
Функция ШаблонURLGET(Запрос)
	СтраницаHTML = "<html><head></head><body><hr><br><br>Тестовая страница<br><br><hr></body></html>";	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки(СтраницаHTML);
	Ответ.Заголовки.Вставить("content-type", "text/html; charset=utf-8");	
	Возврат Ответ;
КонецФункции

Функция ШаблонURLPOST(Запрос)
		
	ВремяНачалаФормированияОтвета = ТекущаяУниверсальнаяДатаВМиллисекундах(); 

	СтруктураОтвета = Новый Структура;
	СтруктураТаймингов = Новый Структура;
	СтруктураТаймингов.Вставить("MethodStart ", ВремяНачалаФормированияОтвета);
	
	ID = Запрос.Заголовки.Получить("ID");         

	ИмяМетода = Запрос.ПараметрыURL["MethodName"];
	
	КодОтвета = 200;
	СтруктураОтвета = Новый Структура;  	
	ФормированиеОтвета = Ложь;

	Попытка
		
		Если ИмяМетода = "TestPost" Тогда 
			
			ТекстОтвета = "It works";
			
		ИначеЕсли ИмяМетода = "AddExtension" Тогда // установка расширения
			
			//Заголовки.Вставить("Content-Disposition", СформироватьContentDisposition(СтруктураПараметров));
			//СтруктураПараметровContentDisposition = ПарсерContentDisposition(СтрокаContentDisposition);
			
			Результат 	  		= Неопределено;
			ИмяРасширения 		= "";
			ВерсияРасширения 	= "";
			Zone 				= Неопределено;
			
			СтрокаContentDisposition = Запрос.Заголовки.Получить("Content-Disposition");
			Если СтрокаContentDisposition <> Неопределено Тогда
				СтруктураПараметровContentDisposition = CTSM_EfsolУниверсальныеФункцииКлиентСервер.ПарсерContentDisposition(СтрокаContentDisposition);
				СтруктураПараметровContentDisposition.Свойство("Name", ИмяРасширения);
				СтруктураПараметровContentDisposition.Свойство("Version", ВерсияРасширения);
				СтруктураПараметровContentDisposition.Свойство("Zone", Zone);
				Zone = Число(Zone);
			КонецЕсли;
			
			ДвоичныеДанные = Запрос.ПолучитьТелоКакДвоичныеДанные();					 
			
			Если CTSM_Расширения.ВключеноРаздениеРасширений() Тогда
				CTSM_Расширения.УстановкаРасширенияПоОбластям(ИмяРасширения, ДвоичныеДанные, Результат, Zone);	
			Иначе	
				CTSM_Расширения.УстановкаРасширения(ИмяРасширения, ДвоичныеДанные, Результат);	
			КонецЕсли;

			
			
			Если Результат = Истина Тогда
				КодОтвета = 200;
				ТекстОтвета = "Расширение успешно установлено!";
			Иначе
				КодОтвета = 400;
				ТекстОтвета = Результат;	
			КонецЕсли;
			
			СтруктураОтвета.Вставить("Code", Строка(КодОтвета));
			СтруктураОтвета.Вставить("Description", "Добавление расширения");
			СтруктураОтвета.Вставить("DebugInfo", ТекстОтвета);
			ФормированиеОтвета = Истина;

		ИначеЕсли ИмяМетода = "UpdateExtension" Тогда // обновление расширения
			
			
			Результат 	  		= Неопределено;
			ИмяРасширения 		= "";
			ВерсияРасширения 	= "";
			Zone 				= Неопределено;
			
			СтрокаContentDisposition = Запрос.Заголовки.Получить("Content-Disposition");
			Если СтрокаContentDisposition <> Неопределено Тогда
				СтруктураПараметровContentDisposition = CTSM_EfsolУниверсальныеФункцииКлиентСервер.ПарсерContentDisposition(СтрокаContentDisposition);
				СтруктураПараметровContentDisposition.Свойство("Name", ИмяРасширения);
				СтруктураПараметровContentDisposition.Свойство("Version", ВерсияРасширения);
				СтруктураПараметровContentDisposition.Свойство("Zone", Zone);
				Zone = Число(Zone);
			КонецЕсли;
			
			ДвоичныеДанные = Запрос.ПолучитьТелоКакДвоичныеДанные();					 
			
			//CTSM_Расширения.ОбновлениеРасширения(ИмяРасширения, ДвоичныеДанные, Результат, Zone);
			Если CTSM_Расширения.ВключеноРаздениеРасширений() Тогда
				CTSM_Расширения.ОбновлениеРасширенияПоОбластям(ИмяРасширения, ДвоичныеДанные, Результат, Zone);	
			Иначе	
				CTSM_Расширения.ОбновлениеРасширения(ИмяРасширения, ДвоичныеДанные, Результат);	
			КонецЕсли;

			
			Если Результат = Истина Тогда
				КодОтвета = 200;
				ТекстОтвета = "Расширение успешно обновлено!";
			Иначе
				КодОтвета = 400;
				ТекстОтвета = Результат;	
			КонецЕсли;

			СтруктураОтвета.Вставить("Code", Строка(КодОтвета));
			СтруктураОтвета.Вставить("Description", "Обновление расширения");
			СтруктураОтвета.Вставить("DebugInfo", ТекстОтвета);
			ФормированиеОтвета = Истина;

			
		ИначеЕсли ИмяМетода = "DeleteExtension" Тогда // удаление расширения
			
			
			Результат 	  		= Неопределено;
			ИмяРасширения 		= "";
			ВерсияРасширения 	= "";
			Zone 				= Неопределено;
			
			
			//СтрокаContentDisposition = Запрос.Заголовки.Получить("Content-Disposition");
			//Если СтрокаContentDisposition <> Неопределено Тогда
			//	СтруктураПараметровContentDisposition = CTSM_EfsolУниверсальныеФункцииКлиентСервер.ПарсерContentDisposition(СтрокаContentDisposition);
			//	СтруктураПараметровContentDisposition.Свойство("Name", ИмяРасширения);
			//	СтруктураПараметровContentDisposition.Свойство("Version", ВерсияРасширения);
			//	СтруктураПараметровContentDisposition.Свойство("Zone", Zone);
			//	Zone = Число(Zone);
			//КонецЕсли;
			
			СтруктураПараметров = CTSM_EfsolУниверсальныеФункцииКлиентСервер.ПарсерОтветаXML(Запрос.ПолучитьТелоКакСтроку());
			Если СтруктураПараметров <> Неопределено Тогда
				СтруктураПараметров.Свойство("Name", ИмяРасширения);
				СтруктураПараметров.Свойство("Version", ВерсияРасширения);
				СтруктураПараметров.Свойство("Zone", Zone);
				Zone = Число(Zone);
			КонецЕсли;
			
			//CTSM_Расширения.УдалениеРасширения(ИмяРасширения, Результат, Zone);
			Если CTSM_Расширения.ВключеноРаздениеРасширений() Тогда
				CTSM_Расширения.УдалениеРасширенияПоОбластям(ИмяРасширения, Результат, Zone);	
			Иначе	
				CTSM_Расширения.УдалениеРасширения(ИмяРасширения, Результат);	
			КонецЕсли;

			
			Если Результат = Истина Тогда
				КодОтвета = 200;
				ТекстОтвета = "Расширение успешно удалено!";
			Иначе
				КодОтвета = 400;
				ТекстОтвета = Результат;
			КонецЕсли;
			
			СтруктураОтвета.Вставить("Code", Строка(КодОтвета));
			СтруктураОтвета.Вставить("Description", "Удаление расширения");
			СтруктураОтвета.Вставить("DebugInfo", ТекстОтвета);
			ФормированиеОтвета = Истина;

		Иначе	             
			КодОтвета = 404;
			СтруктураОтвета.Вставить("Code", Строка(КодОтвета));
			СтруктураОтвета.Вставить("Description", "Метод объекта не найден");
			СтруктураОтвета.Вставить("DebugInfo", "Method not found");
			ФормированиеОтвета = Истина;
		КонецЕсли;
		
	Исключение	
		КодОтвета = 400;
		СтруктураОтвета.Вставить("Code", Строка(КодОтвета));
		СтруктураОтвета.Вставить("Description", "Ошибка при выполнении метода");
		СтруктураОтвета.Вставить("DebugInfo", ОписаниеОшибки());
		ФормированиеОтвета = Истина;
	КонецПопытки;

	
	Попытка
		
		Если ФормированиеОтвета Тогда 			
			ВремяНачалаСформироватьXML = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ТекстXML =  CTSM_EfsolУниверсальныеФункцииСервер.СформироватьXML(СтруктураОтвета, КодОтвета);	
			СтруктураТаймингов.Вставить("CreateXML", (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачалаСформироватьXML));
			Ответ = CTSM_EfsolУниверсальныеФункцииСервер.СформироватьHTTPСервисОтвет(ТекстXML, КодОтвета, СтруктураТаймингов, ID);
			Возврат Ответ;
		КонецЕсли;
		
		СтруктураТаймингов.Вставить("Total", (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачалаФормированияОтвета));
		
	Исключение
		КодОтвета = 404;		
	КонецПопытки;
	
	Ответ = Новый HTTPСервисОтвет(КодОтвета);
	Ответ.УстановитьТелоИзСтроки(ТекстОтвета);	
	Возврат Ответ;
	
КонецФункции


