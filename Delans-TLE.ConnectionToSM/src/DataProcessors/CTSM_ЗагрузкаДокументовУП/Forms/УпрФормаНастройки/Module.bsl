
&НаКлиенте
Перем 
ЕстьНесохраненныеИзменения;       	// признак наличия несохраненных изменений

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события формы "ПриОткрытии"
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтруктураТиповДокументов = ВладелецФормы.СтруктураТиповДокументов;
	ВозможныеВидыДокументовДляСценарияВходящий = ВладелецФормы.ВозможныеВидыДокументовДляСценариев["Входящий"];
	ВозможныеВидыДокументовДляСценарияИсходящий= ВладелецФормы.ВозможныеВидыДокументовДляСценариев["Исходящий"];
	Для Каждого СтрокаТипаДокумента Из ВладелецФормы.ТаблицаВходящихДокументов Цикл
		СтрокаТипаДокументаНовыеЗначения = ПользовательскиеВидыДокументов.Добавить();
		СтрокаТипаДокументаНовыеЗначения.ТипРаспознан = СтрокаТипаДокумента.ТипРаспознан;
		ОписаниеТипа = Неопределено;
		Если СтруктураТиповДокументов.Свойство(СтрокаТипаДокумента.ТипРаспознан, ОписаниеТипа) Тогда
			СтрокаТипаДокументаНовыеЗначения.ТипДокументаПолноеНаименование = ОписаниеТипа.ОтображениеПолное;
		КонецЕсли;
		СтрокаТипаДокументаНовыеЗначения.ВходящийДокумент = СтрокаТипаДокумента.ВходящийДокумент;
		СтрокаТипаДокументаНовыеЗначения.ИсходящийДокумент = СтрокаТипаДокумента.ИсходящийДокумент;
		ВидыТипаВходящий = ВозможныеВидыДокументовДляСценарияВходящий[СтрокаТипаДокумента.ТипРаспознан];
		ВидыТипаИсходящий = ВозможныеВидыДокументовДляСценарияИсходящий[СтрокаТипаДокумента.ТипРаспознан];
		СтрокаТипаДокументаНовыеЗначения.ВходящийДокументПолноеНаименование = ВидыТипаВходящий.НайтиПоЗначению(СтрокаТипаДокумента.ВходящийДокумент).Представление;
		СтрокаТипаДокументаНовыеЗначения.ИсходящийДокументПолноеНаименование = ВидыТипаИсходящий.НайтиПоЗначению(СтрокаТипаДокумента.ИсходящийДокумент).Представление;
		СтрокаТипаДокументаНовыеЗначения.ВходящийДокументЕстьВыбор = ВидыТипаВходящий.Количество() > 1;
		СтрокаТипаДокументаНовыеЗначения.ИсходящийДокументЕстьВыбор = ВидыТипаИсходящий.Количество() > 1;
	КонецЦикла;


	ФлажокСловарьПоНаименованиям = ВладелецФормы.СловарьПоНаименованиям; 
	ФлажокУдалятьПослеЗагрузки = ВладелецФормы.УдалятьПослеЗагрузки; 
	ФлажокИспользоватьСловарь = ВладелецФормы.ИспользоватьСловарь;
	Элементы.ФлажокСловарьПоНаименованиям.Доступность = ФлажокИспользоватьСловарь;
	Элементы.ОткрытьСловарь.Доступность = ФлажокИспользоватьСловарь;
	
	//// Русанова М. 05.10.2018 (
	//ПрикрепитьДокумент = ВладелецФормы.ПрикреплятьФайлКДокументу;
	//	// ) Русанова М. 05.10.2018
	
	Для Каждого ОписаниеДокумента Из ВладелецФормы.СтруктураОписанийДокументов Цикл
		Элементы.НастройкаВидДокумента.СписокВыбора.Добавить(ОписаниеДокумента.Ключ, ОписаниеДокумента.Значение.СинонимДокумента);
	КонецЦикла;
	
	НастройкаВидДокумента = Элементы.НастройкаВидДокумента.СписокВыбора[0].Значение;	
	
	 Для Каждого Строка Из ВладелецФормы.ТаблицаНастроек Цикл
		НоваяСтрока = ТаблицаНастроек.Добавить();
		НоваяСтрока.Синоним = Строка.Синоним;
		НоваяСтрока.Значение = Строка.Значение;
		НоваяСтрока.Идентификатор = Строка.Идентификатор;
		НоваяСтрока.СоздаваемыйДокумент = Строка.СоздаваемыйДокумент;
	КонецЦикла;
	МассивСтрокВидаСоздаваемогоДокумента = ТаблицаНастроек.НайтиСтроки(Новый Структура("СоздаваемыйДокумент", НастройкаВидДокумента));
	Для Каждого Строка Из МассивСтрокВидаСоздаваемогоДокумента Цикл
		НоваяСтрока = ТаблицаНастроекВидаСоздаваемогоДокумента.Добавить();
		НоваяСтрока.Синоним = Строка.Синоним;
		НоваяСтрока.Значение = Строка.Значение;
		НоваяСтрока.Идентификатор = Строка.Идентификатор;
	КонецЦикла;

	ЕстьНесохраненныеИзменения = Ложь;
	Элементы.Применить.Доступность = ЕстьНесохраненныеИзменения;
	
	//Элементы.ДобавитьВПФ.Видимость = НЕ ВладелецФормы.ЭтоВебКлиент И НЕ ВладелецФормы.ВПФДобавлена И НЕ ВладелецФормы.RICOH;
	
КонецПроцедуры

// Процедура - обработчик события формы "ПередЗакрытием"
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЕстьНесохраненныеИзменения Тогда
		Оповещение = Новый ОписаниеОповещения("ПрименитьНесохраненныеИзменения", ЭтаФорма);
		ПоказатьВопрос(Оповещение, "Применить выбранные настройки?", РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да, "Изменение настроек");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события формы "ОбработкаОповещения"
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УпрОсновнаяФормаБудетЗакрыта" И ЭтаФорма.Открыта() Тогда
		
		ЕстьНесохраненныеИзменения = Ложь;
		ЭтаФорма.Закрыть();
		
	ИначеЕсли ИмяСобытия = "ОтключитьИспользоватьСловарь" Тогда
		
		ФлажокИспользоватьСловарь = Ложь;
		Элементы.ФлажокСловарьПоНаименованиям.Доступность = ФлажокИспользоватьСловарь;
		Элементы.ОткрытьСловарь.Доступность = ФлажокИспользоватьСловарь;
		
	ИначеЕсли  ИмяСобытия = "ВПФДобавлена" Тогда
		
		Элементы.ДобавитьВПФ.Видимость = Ложь;

	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Основные действия формы

// Обработка ответа на вопрос о сохранении изменений
//
&НаКлиенте
Процедура ПрименитьНесохраненныеИзменения(Ответ, ДопПараметры = Неопределено) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Применить(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды формы "ОткрытьСловарь"
//
&НаКлиенте
Процедура ОткрытьСловарь(Команда)
	
	Если НЕ ВладелецФормы.СлужбаADL42Доступна(ЭтаФорма.УникальныйИдентификатор) Тогда
		Возврат;
	КонецЕсли;	

	ВладелецФормы.ИспользоватьСловарь = ФлажокИспользоватьСловарь;
	ВладелецФормы.СловарьПоНаименованиям = ФлажокСловарьПоНаименованиям;

	ФормаСловаря = ПолучитьФорму(ВладелецФормы.ПрефиксИмениФорм + "УпрФормаСловаря", , ЭтаФорма.ВладелецФормы);
	ФормаСловаря.ЗакрыватьПриЗакрытииВладельца = Истина;
	Если НЕ ФормаСловаря.Открыта() Тогда
		ФормаСловаря.Открыть(); 
	Иначе
		ФормаСловаря.Активизировать(); 
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик команды формы "Применить"
//
&НаКлиенте
Процедура Применить(Команда)

	Если (НЕ ВладелецФормы.ИспользоватьСловарь И ФлажокИспользоватьСловарь) ИЛИ НЕ ВладелецФормы.СловарьПоНаименованиям = ФлажокСловарьПоНаименованиям Тогда
		ВладелецФормы.ИспользоватьСловарь = ФлажокИспользоватьСловарь;
		ВладелецФормы.СловарьПоНаименованиям = ФлажокСловарьПоНаименованиям;
		ВладелецФормы.ОбновитьСловарь();
	Иначе
		ВладелецФормы.ИспользоватьСловарь = ФлажокИспользоватьСловарь;
		ВладелецФормы.СловарьПоНаименованиям = ФлажокСловарьПоНаименованиям;
	КонецЕсли;
	
	////Русанова М. 05.10.2018 (
	//		ВладелецФормы.ПрикреплятьФайлКДокументу = ПрикрепитьДокумент;
	//// ) Русанова М. 05.10.2018
	
	ВладелецФормы.НастройкаВидДокумента = НастройкаВидДокумента; 
	ВладелецФормы.УдалятьПослеЗагрузки = ФлажокУдалятьПослеЗагрузки; 

	ВладелецФормы.ТаблицаНастроек.Очистить();
	Для Каждого Строка Из ТаблицаНастроек Цикл
		НоваяСтрока = ВладелецФормы.ТаблицаНастроек.Добавить();
		НоваяСтрока.Синоним = Строка.Синоним;
		НоваяСтрока.Значение = Строка.Значение;
		НоваяСтрока.Идентификатор = Строка.Идентификатор;
		НоваяСтрока.СоздаваемыйДокумент = Строка.СоздаваемыйДокумент;
	КонецЦикла;
	
	ЕстьНесохраненныеИзменения = Ложь;
	
	Элементы.Применить.Доступность = ЕстьНесохраненныеИзменения;
	
	Для Каждого СтрокаТипаДокумента Из ВладелецФормы.ТаблицаВходящихДокументов Цикл
		МассивСтрокТипа = ПользовательскиеВидыДокументов.НайтиСтроки(Новый Структура("ТипРаспознан", СтрокаТипаДокумента.ТипРаспознан));
		СтрокаТипаДокументаНовыеЗначения = МассивСтрокТипа[0];
		СтрокаТипаДокумента.ВходящийДокумент = СтрокаТипаДокументаНовыеЗначения.ВходящийДокумент;
		СтрокаТипаДокумента.ИсходящийДокумент = СтрокаТипаДокументаНовыеЗначения.ИсходящийДокумент;
	КонецЦикла;
	
	ЭтаФорма.Закрыть();

КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

// Процедура - обработчик события элемента ФлажокИспользоватьСловарь "ПриИзменении"
//
&НаКлиенте
Процедура ФлажокИспользоватьСловарьПриИзменении(Элемент)
	
	ПриИзмененииЗначения(Элемент);
	Элементы.ФлажокСловарьПоНаименованиям.Доступность = ФлажокИспользоватьСловарь;
	Элементы.ОткрытьСловарь.Доступность = ФлажокИспользоватьСловарь;
	
КонецПроцедуры

// Общая процедура для события "ПриИзменении"
//
&НаКлиенте
Процедура ПриИзмененииЗначения(Элемент)
	
	ЕстьНесохраненныеИзменения = Истина;
	Элементы.Применить.Доступность = ЕстьНесохраненныеИзменения;
	
КонецПроцедуры

// Процедура - обработчик события элемента НастройкаВидДокумента "ОбработкаВыбора"
//
&НаКлиенте
Процедура НастройкаВидДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	МассивСтрокВидаСоздаваемогоДокумента = ВладелецФормы.ТаблицаНастроек.НайтиСтроки(Новый Структура("СоздаваемыйДокумент", ВыбранноеЗначение));
	ТаблицаНастроекВидаСоздаваемогоДокумента.Очистить();
	Для Каждого Строка Из МассивСтрокВидаСоздаваемогоДокумента Цикл
		НоваяСтрока = ТаблицаНастроекВидаСоздаваемогоДокумента.Добавить();
		НоваяСтрока.Синоним = Строка.Синоним;
		НоваяСтрока.Значение = Строка.Значение;
		НоваяСтрока.Идентификатор = Строка.Идентификатор;
	КонецЦикла;
	
КонецПроцедуры
 
// Процедура - обработчик события элемента ТаблицаНастроекВидаСоздаваемогоДокумента "ПриАктивизацииЯчейки"
//
&НаКлиенте
Процедура ТаблицаНастроекВидаСоздаваемогоДокументаПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено И Элементы.ТаблицаНастроекВидаСоздаваемогоДокумента.ТекущийЭлемент.Имя <> "ТаблицаНастроекВидаСоздаваемогоДокументаСиноним" Тогда
		СтруктураНастроекЯчейки = Новый Структура("КнопкаВыбора, КнопкаОткрытия, КнопкаСпискаВыбора, КнопкаОчистки, ВыбиратьТип, БыстрыйВыбор, РедактированиеТекста,  РежимВыбораИзСписка, СписокВыбора", 
													Истина, Ложь, Ложь, Истина, Ложь, Истина, Истина, Ложь, Новый СписокЗначений);

		Элемент.ТекущийЭлемент.КнопкаВыбора = СтруктураНастроекЯчейки.КнопкаВыбора;
		Элемент.ТекущийЭлемент.КнопкаОткрытия = СтруктураНастроекЯчейки.КнопкаОткрытия;
		Элемент.ТекущийЭлемент.КнопкаСпискаВыбора = СтруктураНастроекЯчейки.КнопкаСпискаВыбора;
		Элемент.ТекущийЭлемент.КнопкаОчистки = СтруктураНастроекЯчейки.КнопкаОчистки;
		Элемент.ТекущийЭлемент.ВыбиратьТип = СтруктураНастроекЯчейки.ВыбиратьТип;
		Элемент.ТекущийЭлемент.БыстрыйВыбор = СтруктураНастроекЯчейки.БыстрыйВыбор;
		Элемент.ТекущийЭлемент.РедактированиеТекста = СтруктураНастроекЯчейки.РедактированиеТекста;
		Элемент.ТекущийЭлемент.РежимВыбораИзСписка = СтруктураНастроекЯчейки.РежимВыбораИзСписка;
		Элемент.ТекущийЭлемент.СписокВыбора.Очистить();
		Для Каждого ЭлементСпискаВыбора Из СтруктураНастроекЯчейки.СписокВыбора Цикл
			Элемент.ТекущийЭлемент.СписокВыбора.Добавить(ЭлементСпискаВыбора.Ключ, ЭлементСпискаВыбора.Значение);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события элемента ТаблицаНастроекВидаСоздаваемогоДокументаЗначение "НачалоВыбора"
//
&НаКлиенте
Процедура ТаблицаНастроекВидаСоздаваемогоДокументаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Идентификатор = Элементы.ТаблицаНастроекВидаСоздаваемогоДокумента.ТекущиеДанные.Идентификатор;

	Если Идентификатор = "ГруппаНоменклатурДляСопоставления" ИЛИ Идентификатор = "ГруппаНовыхНоменклатур" Тогда 
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбораГруппы",  , Элементы.ТаблицаНастроекВидаСоздаваемогоДокумента.ТекущийЭлемент);
		ФормаВыбора.Открыть();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события элемента ТаблицаНастроекВидаСоздаваемогоДокументаЗначение "Очистка"
//
&НаКлиенте
Процедура ТаблицаНастроекВидаСоздаваемогоДокументаЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	ПриИзмененииЗначения(Элемент);

КонецПроцедуры

// Процедура - обработчик события элемента ТаблицаНастроекВидаСоздаваемогоДокументаЗначение "ОбработкаВыбора"
//
&НаКлиенте
Процедура ТаблицаНастроекВидаСоздаваемогоДокументаЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Идентификатор = Элементы.ТаблицаНастроекВидаСоздаваемогоДокумента.ТекущиеДанные.Идентификатор;
	Если Идентификатор = "ГруппаНоменклатурДляСопоставления" Тогда	
		СтандартнаяОбработка = Ложь;
		Если Элементы.ТаблицаНастроекВидаСоздаваемогоДокумента.ТекущиеДанные.Значение.НайтиПоЗначению(ВыбранноеЗначение) = Неопределено Тогда 
			Элементы.ТаблицаНастроекВидаСоздаваемогоДокумента.ТекущиеДанные.Значение.Добавить(ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события элемента ТаблицаНастроекВидаСоздаваемогоДокументаЗначение "ПриИзменении"
//
&НаКлиенте
Процедура ТаблицаНастроекВидаСоздаваемогоДокументаЗначениеПриИзменении(Элемент)
	
	Идентификатор = Элементы.ТаблицаНастроекВидаСоздаваемогоДокумента.ТекущиеДанные.Идентификатор;
	Значение = Элементы.ТаблицаНастроекВидаСоздаваемогоДокумента.ТекущиеДанные.Значение;
	
	МассивСтрокВидаСоздаваемогоДокумента = ТаблицаНастроек.НайтиСтроки(Новый Структура("СоздаваемыйДокумент, Идентификатор", НастройкаВидДокумента, Идентификатор));
	СтрокаНастройки = МассивСтрокВидаСоздаваемогоДокумента[0];
	СтрокаНастройки.Значение = Значение;

	ПриИзмененииЗначения(Элемент);

КонецПроцедуры

// Процедура - обработчик события элемента ПользовательскиеВидыДокументов "ПриАктивизацииЯчейки"
//
&НаКлиенте
Процедура ПользовательскиеВидыДокументовПриАктивизацииЯчейки(Элемент)
	
	Элемент.ТекущийЭлемент.СписокВыбора.Очистить();
	Элемент.ТекущийЭлемент.КнопкаВыпадающегоСписка = Ложь;
	Если Элемент.ТекущиеДанные <> Неопределено И Элементы.ПользовательскиеВидыДокументов.ТекущийЭлемент.Имя = "ВходящийДокумент" Тогда
		Если Элемент.ТекущиеДанные.ВходящийДокументЕстьВыбор Тогда
			ВидыТипа = ВладелецФормы.ВозможныеВидыДокументовДляСценариев["Входящий"][Элемент.ТекущиеДанные.ТипРаспознан];
			Для Каждого ЭлементВидДокумента Из ВидыТипа Цикл
				Элемент.ТекущийЭлемент.СписокВыбора.Добавить(ЭлементВидДокумента.Значение, ЭлементВидДокумента.Представление);
			КонецЦикла;
			Элемент.ТекущийЭлемент.КнопкаВыпадающегоСписка = Истина;
		КонецЕсли;
	ИначеЕсли Элемент.ТекущиеДанные <> Неопределено И Элементы.ПользовательскиеВидыДокументов.ТекущийЭлемент.Имя = "ИсходящийДокумент" Тогда
		Если Элемент.ТекущиеДанные.ИсходящийДокументЕстьВыбор Тогда
			ВидыТипа= ВладелецФормы.ВозможныеВидыДокументовДляСценариев["Исходящий"][Элемент.ТекущиеДанные.ТипРаспознан];
			Для Каждого ЭлементВидДокумента Из ВидыТипа Цикл
				Элемент.ТекущийЭлемент.СписокВыбора.Добавить(ЭлементВидДокумента.Значение, ЭлементВидДокумента.Представление);
			КонецЦикла;
			Элемент.ТекущийЭлемент.КнопкаВыпадающегоСписка = Истина;
		КонецЕсли;
	КонецЕсли;
	Элемент.ТекущийЭлемент.ТолькоПросмотр = НЕ Элемент.ТекущийЭлемент.КнопкаВыпадающегоСписка;
	
КонецПроцедуры

// Процедура - обработчик события элемента ВходящийДокумент "ОбработкаВыбора"
//
&НаКлиенте
Процедура ВходящийДокументОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВидыДокументов = ВладелецФормы.ВозможныеВидыДокументовДляСценариев.Входящий[Элементы.ПользовательскиеВидыДокументов.ТекущиеДанные.ТипРаспознан]; 	
	Элементы.ПользовательскиеВидыДокументов.ТекущиеДанные.ВходящийДокумент = ВыбранноеЗначение;
	Элементы.ПользовательскиеВидыДокументов.ТекущиеДанные.ВходящийДокументПолноеНаименование = ВидыДокументов.НайтиПоЗначению(ВыбранноеЗначение).Представление;
	ПриИзмененииЗначения(Элемент);

КонецПроцедуры

// Процедура - обработчик события элемента ИсходящийДокумент "ОбработкаВыбора"
//
&НаКлиенте
Процедура ИсходящийДокументОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВидыДокументов = ВладелецФормы.ВозможныеВидыДокументовДляСценариев.Исходящий[Элементы.ПользовательскиеВидыДокументов.ТекущиеДанные.ТипРаспознан]; 	
	Элементы.ПользовательскиеВидыДокументов.ТекущиеДанные.ИсходящийДокумент = ВыбранноеЗначение;
	Элементы.ПользовательскиеВидыДокументов.ТекущиеДанные.ИсходящийДокументПолноеНаименование = ВидыДокументов.НайтиПоЗначению(ВыбранноеЗначение).Представление;
	ПриИзмененииЗначения(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВПФ(Команда)
	
	ВладелецФормы.ДобавитьВПФ(Истина);
	
КонецПроцедуры

//Русанова М. 05.10.2018 (

&НаКлиенте
Процедура ПрикрепитьДокументПриИзменении(Элемент)
	
	ПриИзмененииЗначения(Элемент);
	
	Если ПрикрепитьДокумент Тогда
		ВладелецФормы.ПрикреплятьФайлКДокументу = Истина;
	Иначе
		ВладелецФормы.ПрикреплятьФайлКДокументу = Ложь;		
	КонецЕсли;
	
КонецПроцедуры

// ) Русанова М. 05.10.2018

