
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтаФорма.Заголовок = Параметры.СтруктураСтроки.Наименование;
	ТекДокИД = Параметры.СтруктураСтроки.ДокументИД;
	СтруктураДокумента = Параметры.СтруктураСтроки;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ФормаОткрытьФайлДокумента.Видимость = НЕ ВладелецФормы.RICOH;	
	СтруктураОписанийДокументов = ВладелецФормы.СтруктураОписанийДокументов;
	ВозможныеВидыДокументовДляСценариев = ВладелецФормы.ВозможныеВидыДокументовДляСценариев;
	ОписаниеТиповУниверсальное = ВладелецФормы.ОписаниеТиповУниверсальное;
	//СписокЗначенийИменКолонокОформления = ВладелецФормы.СписокЗначенийИменКолонокОформления;
	ЭтоВебКлиент = ВладелецФормы.ЭтоВебКлиент;
	ВерсияПриложения = ВладелецФормы.ВерсияПриложения;
	ИмяШаблона = ВладелецФормы.ИмяШаблона;
	//ПоказыватьИсходныеЗначения = ВладелецФормы.ПоказыватьИсходныеЗначения;

	Если Элементы.Контрагент.СписокВыбора.Количество() = 0 И СтруктураДокумента.Шапка.Свойство("Контрагент") Тогда
		СписокВыбораДляЭлемента = НачалоВыбораИзСписка("Контрагент");
		Для Каждого Элем Из СписокВыбораДляЭлемента Цикл
			Элементы.Контрагент.СписокВыбора.Добавить(Элем.Значение, Элем.Представление);
		КонецЦикла;
	КонецЕсли;

	Если Элементы.СчетКонтрагента.СписокВыбора.Количество() = 0 И СтруктураДокумента.Шапка.Свойство("СчетКонтрагента") Тогда
		СписокВыбораДляЭлемента = НачалоВыбораИзСписка("СчетКонтрагента");
		Для Каждого Элем Из СписокВыбораДляЭлемента Цикл
			Элементы.СчетКонтрагента.СписокВыбора.Добавить(Элем.Значение, Элем.Представление);
		КонецЦикла;
	КонецЕсли;

	Если Элементы.Склад.СписокВыбора.Количество() = 0 И СтруктураДокумента.Шапка.Свойство("Склад") Тогда
		СписокВыбораДляЭлемента = НачалоВыбораИзСписка("Склад");
		Для Каждого Элем Из СписокВыбораДляЭлемента Цикл
			Элементы.Склад.СписокВыбора.Добавить(Элем.Значение, Элем.Представление);
		КонецЦикла;
	КонецЕсли;
	Если Элементы.ДоговорКонтрагента.СписокВыбора.Количество() = 0 И (СтруктураДокумента.Шапка.Свойство("ДоговорКонтрагента") ИЛИ СтруктураДокумента.Шапка.Свойство("Договор") ИЛИ СтруктураДокумента.Шапка.Свойство("Соглашение")) Тогда
		Если СтруктураДокумента.Шапка.Свойство("ДоговорКонтрагента") Тогда
			ИмяЭлемента = "ДоговорКонтрагента";
		ИначеЕсли СтруктураДокумента.Шапка.Свойство("Договор") Тогда
			ИмяЭлемента = "Договор";
		ИначеЕсли СтруктураДокумента.Шапка.Свойство("Соглашение") Тогда
			ИмяЭлемента = "Соглашение";
		Иначе
			ИмяЭлемента = "";
		КонецЕсли;	
		Если НЕ ИмяЭлемента = "" Тогда
			СписокВыбораДляЭлемента = НачалоВыбораИзСписка(ИмяЭлемента);
			Для Каждого Элем Из СписокВыбораДляЭлемента Цикл
				Элементы.ДоговорКонтрагента.СписокВыбора.Добавить(Элем.Значение, Элем.Представление);
			КонецЦикла;
		Иначе
			Элементы.ДоговорКонтрагента.Видимость = Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	ПоказатьДокумент();
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УпрОсновнаяФормаБудетЗакрыта" И ЭтаФорма.Открыта() Тогда
		
		ЭтаФорма.Закрыть();
		
	ИначеЕсли ИмяСобытия = "ВыбранКонтрагент" И ТекДокИД = Параметр.ТекДокИД Тогда
		
		ДокументКонтрагент = Параметр.КонтрагентСсылка;
		СтруктураДокумента.Шапка.Контрагент.ИтоговоеЗначение = Параметр.КонтрагентСсылка;
		Элементы.Контрагент.ЦветТекста = Новый Цвет(51,51,51);
		Элементы.СоздатьКонтрагента.Видимость = Ложь;
		
		СтруктураДокумента.Шапка.ИНН.ИтоговоеЗначение = Параметр.ИНН;
		СтруктураДокумента.Шапка.КПП.ИтоговоеЗначение = Параметр.КПП;
		СтруктураДокумента.Шапка.АдресКонтрагента.ИтоговоеЗначение = Параметр.АдресКонтрагента;
		
	ИначеЕсли ИмяСобытия = "ИзмененыДанныеКонтрагента" И ТекДокИД = Параметр.ТекДокИД Тогда
		
		ДокументКонтрагент = Параметр.КраткоеНаименование; 
		СтруктураДокумента.Шапка.Контрагент.ИтоговоеЗначение = Параметр.КраткоеНаименование;
		СтруктураДокумента.Шапка.ИНН.ИтоговоеЗначение = Параметр.ИНН;
		СтруктураДокумента.Шапка.КПП.ИтоговоеЗначение = Параметр.КПП;
		СтруктураДокумента.Шапка.АдресКонтрагента.ИтоговоеЗначение = Параметр.АдресКонтрагента;
		
	ИначеЕсли ИмяСобытия = "ЗакрытьФормуДокумента" Тогда
		
		Если Параметр.ДокументИД = ТекДокИД Тогда
			ЗакрытиеБезСохранения = истина;
			ЭтаФорма.Закрыть();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзмененыЦеныИВалюта" Тогда
		Если ТекДокИД = Параметр.СтруктураДокумента.ДокументИД Тогда
			СтруктураДокумента = Параметр.СтруктураДокумента;
			Если Параметр.СтруктураИзменяемыхРеквизитов.Свойство("СтавкаНДС") Тогда
				Для Каждого СтрокаТЧ Из СтруктураДокумента.ТЧ Цикл
					СтрокаТЧ.Значение.СтавкаНДС.ИтоговоеЗначение = Параметр.СтруктураИзменяемыхРеквизитов.СтавкаНДС;
				КонецЦикла;
			КонецЕсли;
			МассивДокументов = ВладелецФормы.ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ТекДокИД, 1)) ;
			Если МассивДокументов.Количество() > 0 Тогда
				Документ = МассивДокументов[0];
			КонецЕсли;
			Если Документ <> Неопределено Тогда
				Для Каждого Элемент Из СтруктураДокумента Цикл
					Документ[Элемент.Ключ] = Элемент.Значение;	
				КонецЦикла;
				Если Параметр.СтруктураИзменяемыхРеквизитов.Свойство("УчитыватьНДС") ИЛИ Параметр.СтруктураИзменяемыхРеквизитов.Свойство("СуммаВключаетНДС") ИЛИ Параметр.СтруктураИзменяемыхРеквизитов.Свойство("ЦенаВключаетНДС") ИЛИ Параметр.СтруктураИзменяемыхРеквизитов.Свойство("СтавкаНДС") Тогда
					
					ВладелецФормы.ВычислениеРасчетныхЗначенийВызовСервера(ТекДокИД);
					СтруктураДокумента = ВладелецФормы.ОбновитьДанныеДокумента(ТекДокИД);
					
				КонецЕсли;
			КонецЕсли;

			ПоказатьДокумент();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры



&НаКлиенте
Процедура СоздатьКонтрагентаНажатие(Элемент)
	
	Наименование = СтруктураДокумента.Шапка.Контрагент.ИтоговоеЗначение;
	ИНН = СтруктураДокумента.Шапка.ИНН.ИтоговоеЗначение;
	КПП = СтруктураДокумента.Шапка.КПП.ИтоговоеЗначение;
	АдресКонтрагента = СтруктураДокумента.Шапка.АдресКонтрагента.ИтоговоеЗначение;
	ВалютаВзаиморасчетов = Неопределено;
	Если НЕ СтруктураДокумента.Шапка.Свойство("ВалютаДокумента", ВалютаВзаиморасчетов) Тогда
		СтруктураДокумента.Шапка.Свойство("Валюта", ВалютаВзаиморасчетов);
	КонецЕсли;
	Если ВалютаВзаиморасчетов <> Неопределено И ЗначениеНеЗаполнено(ВалютаВзаиморасчетов.ИтоговоеЗначение) ИЛИ ТипЗнч(ВалютаВзаиморасчетов.ИтоговоеЗначение) <> Тип("СправочникСсылка.Валюты") Тогда
		ВалютаВзаиморасчетов = ВладелецФормы.мВалютаРегламентированногоУчета;
	ИначеЕсли ВалютаВзаиморасчетов <> Неопределено Тогда
		ВалютаВзаиморасчетов = ВалютаВзаиморасчетов.ИтоговоеЗначение;
	КонецЕсли;
	ДанныеКонтрагента = Новый Структура("КраткоеНаименование, ПолноеНаименование, ИНН, КПП, АдресКонтрагента, ТелефонКонтрагента, Родитель, ВалютаВзаиморасчетов, ТекДокИД, ВидДокумента",
		Наименование, Наименование, ИНН, КПП, АдресКонтрагента, "", , ВалютаВзаиморасчетов, ТекДокИД, ВидДокумента);
	
	ФормаДопРеквизитов = ПолучитьФорму(ВладелецФормы.ПрефиксИмениФорм + "УпрФормаСоздатьКонтрагент", ДанныеКонтрагента, ЭтаФорма.ВладелецФормы);
	ФормаДопРеквизитов.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаДопРеквизитов.Открыть();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Определяет заполнено ли переданное значение
//
// Параметры: 
// Значение - значение, заполенение которого надо проверить
//
// Возвращаемое значение:
// 		Признак заполненности значения, тип "Булево"
//
Функция ЗначениеНеЗаполнено(Значение) Экспорт
	
	Результат   = Ложь;
	ТипЗначения = ТипЗнч(Значение);
	
	// Сначала примитивные типы
	Если Значение = Неопределено Тогда
		Результат = Истина;
		
	ИначеЕсли Значение = NULL Тогда
		Результат = Истина;
		
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Если СокрЛП(Значение) = "" Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		Если Значение = 0 Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Если Значение = Дата('00010101') Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Ложь; // Булево будем считать не пустым
		
		//Отдельное определение, так как конструкторов данного типа не существует	
	ИначеЕсли ТипЗначения = Тип("РежимПроведенияДокумента") Тогда
		
		Если Значение = РежимПроведенияДокумента.Неоперативный или Значение = РежимПроведенияДокумента.Оперативный тогда
			Результат = Ложь;
		КонецЕсли;
		
		// Для остальных будем считать значение пустым, если оно равно дефолтному значению своего типа
		
	Иначе
		
		Если Значение = Новый(ТипЗначения) Тогда
			Результат = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 


// Процедура - обработчик команды формы "Команда1".
//
&НаКлиенте
Процедура Команда1(Команда)
	
	ОбщаяПроцедураНажатияДопКнопок(Команда);
	
КонецПроцедуры

// Процедура - обработчик команды формы "Команда2".
//
&НаКлиенте
Процедура Команда2(Команда)
	
	ОбщаяПроцедураНажатияДопКнопок(Команда);
	
КонецПроцедуры

// Процедура - обработчик команды формы "Команда3".
//
&НаКлиенте
Процедура Команда3(Команда)
	
	ОбщаяПроцедураНажатияДопКнопок(Команда);
	
КонецПроцедуры

// Процедура - обработчик команды формы "Команда4".
//
&НаКлиенте
Процедура Команда4(Команда)
	
	ОбщаяПроцедураНажатияДопКнопок(Команда);
	
КонецПроцедуры

// Процедура - обработчик команды формы "Команда5".
//
&НаКлиенте
Процедура Команда5(Команда)
	
	ОбщаяПроцедураНажатияДопКнопок(Команда);
	
КонецПроцедуры


// Универсальная процедура, которая предназначена для обработки нажатия дополнительных кнопок (Команда1-5)
//
// Параметры:
//  Кнопка - КнопкаКоманднойПанели, элемент формы - дополнительная кнопка
//
&НаКлиенте
Процедура ОбщаяПроцедураНажатияДопКнопок(Команда)
	
	ТекстВыполнения = "";
	
 	Документ = СтруктураДокумента;

	Если Элементы[Команда.Имя].Заголовок = "Услуги" Тогда
		Для каждого СтруктураСтрокиТЧ Из Документ.ТЧ Цикл
			СтрокаТЧ = СтруктураСтрокиТЧ.Значение;
			Если ТипЗнч(СтрокаТЧ.Номенклатура.ИтоговоеЗначение) = Тип("Строка") Тогда
				СтрокаТЧ.Услуга.ИтоговоеЗначение = Документ.Шапка.ПометитьУслуги.ИтоговоеЗначение;
			КонецЕсли;
		КонецЦикла;
		Документ.Шапка.ПометитьУслуги.ИтоговоеЗначение = НЕ Документ.Шапка.ПометитьУслуги.ИтоговоеЗначение;
		ПоказатьДокумент();
	ИначеЕсли Команда.Имя = "Команда2" Тогда
		ПараметрыДляПередачи = Новый Структура("ИДДокумента, ИмяКоманды", ТекДокИД, Команда.Имя);
		ФормаДопРеквизитов = ПолучитьФорму(ВладелецФормы.ПрефиксИмениФорм + "УпрФормаДопРеквизитов", ПараметрыДляПередачи, ЭтаФорма);
		ФормаДопРеквизитов.ЗакрыватьПриЗакрытииВладельца = Истина;
		ФормаДопРеквизитов.Заголовок = "Цены и валюты";
		ФормаДопРеквизитов.Открыть();
	КонецЕсли;
	
КонецПроцедуры	

// Процедура выполняет заполнение и отображение реквизитов шапки и табличной части текущего документа
//
&НаСервере
Процедура ПоказатьДокумент()

	Документ = СтруктураДокумента;
	ВидДокумента = Документ.ВидДокумента;
	СтрокаШапки = Документ.Шапка;
	ТЧ = Документ.ТЧ;
	МассивИменЧисловыхКолонок = Новый Массив;
	Элементы.ГруппаРеквизитыТЧ.Видимость = Ложь;

	СтруктураОписанияДокумента = Неопределено;
	СтруктураОписанийДокументов.Свойство(ВидДокумента, СтруктураОписанияДокумента);
	ШапкаОписание = СтруктураОписанияДокумента.Шапка;
	ТЧОписание = СтруктураОписанияДокумента.ТЧ;
		
	AСсылкаДокумент = ?(Документ.СсылкаДокумент = Неопределено, "", "" + Документ.СсылкаДокумент);
	Элементы.ВидДокумента.СписокВыбора.Очистить();
	ВидыДокументовСценарийВходящий = ВозможныеВидыДокументовДляСценариев.Входящий[Документ.ТипРаспознан];
	ВидыДокументовСценарийИсходящий = ВозможныеВидыДокументовДляСценариев.Исходящий[Документ.ТипРаспознан];
	Для Каждого ЭлементВидДокумента Из ВидыДокументовСценарийВходящий Цикл
		Элементы.ВидДокумента.СписокВыбора.Добавить("Входящий_" + ЭлементВидДокумента.Значение, ЭлементВидДокумента.Представление + " (обработка входящих документов)");
		//Элементы.ВидДокумента.СписокВыбора.Добавить("Входящий_" + ЭлементВидДокумента.Значение, ЭлементВидДокумента.Представление);
	КонецЦикла;
	Для Каждого ЭлементВидДокумента Из ВидыДокументовСценарийИсходящий Цикл
		Элементы.ВидДокумента.СписокВыбора.Добавить("Исходящий_" + ЭлементВидДокумента.Значение, ЭлементВидДокумента.Представление+ " (обработка исходящих документов)");
		//Элементы.ВидДокумента.СписокВыбора.Добавить("Исходящий_" + ЭлементВидДокумента.Значение, ЭлементВидДокумента.Представление);
	КонецЦикла;
	ДокументТип = ?(Документ.Исходящий,"Исходящий_","Входящий_") + Документ.ВидДокумента;

	Если Документ.ВидДокумента = "КФЛ" Тогда
		Элементы.ГруппаШапкаЛевая.Видимость = Ложь;
		Элементы.ГруппаШапкаПравая.Видимость = Ложь;
		Элементы.Паспорт.Видимость = Истина;
		
		ПаспортФамилия = СтрокаШапки.Фамилия.ИтоговоеЗначение;
		ПаспортИмя = СтрокаШапки.Имя.ИтоговоеЗначение;
		ПаспортОтчество = СтрокаШапки.Отчество.ИтоговоеЗначение;
		ПаспортДатаРождения = СтрокаШапки.ДатаРождения .ИтоговоеЗначение;
		ПаспортМестоРождения = СтрокаШапки.МестоРождения.ИтоговоеЗначение;
		ПаспортПол = СтрокаШапки.Пол.ИтоговоеЗначение;
		ПаспортИНН = СтрокаШапки.ИНН.ИтоговоеЗначение;
		ПаспортСерия = СтрокаШапки.СерияПаспорта.ИтоговоеЗначение;
		ПаспортНомер = СтрокаШапки.НомерПаспорта.ИтоговоеЗначение;
		ПаспортДатаВыдачи = СтрокаШапки.ДатаВыдачи.ИтоговоеЗначение;
		ПаспортКодПодразделения = СтрокаШапки.КодПодразделения.ИтоговоеЗначение;
	Иначе
		Элементы.ГруппаШапкаЛевая.Видимость = Истина;
		Элементы.ГруппаШапкаПравая.Видимость = Истина;
		//Элементы.ДокументНазначениеПлатежа.Видимость = (Документ.ВидДокумента = "ПП");

		Элементы.Паспорт.Видимость = Ложь;

		Если СтрокаШапки.Контрагент.ИтоговоеЗначение = Неопределено Тогда
			ДокументКонтрагент = "";
		Иначе
			ДокументКонтрагент = СтрокаШапки.Контрагент.ИтоговоеЗначение;
		КонецЕсли;
		Элементы.ДоговорКонтрагента.Заголовок = "Договор";
		Если ТипЗнч(СтрокаШапки.Контрагент.ИтоговоеЗначение) = Тип("Строка") Тогда
			Элементы.СоздатьКонтрагента.Видимость = Истина;
			Элементы.Контрагент.ЦветТекста = Новый Цвет(180,0,0);
		Иначе
			Элементы.СоздатьКонтрагента.Видимость = Ложь;
			Элементы.Контрагент.ЦветТекста = Новый Цвет(51,51,51);
		КонецЕсли;
		Если СтрокаШапки.Свойство("ДоговорКонтрагента") Тогда
			Элементы.ДоговорКонтрагента.Видимость = Истина;
			ДокументДоговор = СтрокаШапки.ДоговорКонтрагента.ИтоговоеЗначение;
		ИначеЕсли СтрокаШапки.Свойство("Договор") Тогда
			Элементы.ДоговорКонтрагента.Видимость = Истина;
			ДокументДоговор = СтрокаШапки.Договор.ИтоговоеЗначение;
		ИначеЕсли СтрокаШапки.Свойство("Соглашение") Тогда
			Элементы.ДоговорКонтрагента.Видимость = Истина;
			ДокументДоговор = СтрокаШапки.Соглашение.ИтоговоеЗначение;
			Элементы.ДоговорКонтрагента.Заголовок = "Соглашение";
		Иначе
			Элементы.ДоговорКонтрагента.Видимость = Ложь;
		КонецЕсли;
		ДокументОрганизация = СтрокаШапки.Организация.ИтоговоеЗначение;
		Если СтрокаШапки.Свойство("Склад") Тогда
			ДокументСклад = СтрокаШапки.Склад.ИтоговоеЗначение;
		Иначе
			Элементы.Склад.Видимость = Ложь;
		КонецЕсли;
		ДокументДатаВходящего = СтрокаШапки.ДатаВходящегоДокумента.ИтоговоеЗначение;
		ДокументДата = СтрокаШапки.Дата.ИтоговоеЗначение;
		ДокументНомер = СтрокаШапки.НомерВходящегоДокумента.ИтоговоеЗначение;
		НадписьКонтрагент = "Распознанное значение контрагента: " + СтрокаШапки.Контрагент.ИсходноеЗначение;
		Элементы.НадписьКонтрагент.Заголовок = НадписьКонтрагент;
		НадписьОрганизация = "Распознанное значение организации: " + СтрокаШапки.Организация.ИсходноеЗначение;
		Элементы.НадписьОрганизация.Заголовок = НадписьОрганизация;
		Если СтрДлина(НадписьКонтрагент) > 200 ИЛИ СтрДлина(НадписьОрганизация) > 200 Тогда
			Элементы.НадписьКонтрагент.Высота = 0;
			Элементы.НадписьОрганизация.Высота = 0;
		КонецЕсли;
		
		Если СтрокаШапки.Свойство("УчитыватьНДС") Тогда
			Если Не СтрокаШапки.УчитыватьНДС.ИтоговоеЗначение Тогда
				Элементы.НДСвхождение.Заголовок = "НДС не выделять";
			Иначе
				Если (СтрокаШапки.Свойство("СуммаВключаетНДС")И СтрокаШапки.СуммаВключаетНДС.ИтоговоеЗначение) 
					ИЛИ (СтрокаШапки.Свойство("ЦенаВключаетНДС")И СтрокаШапки.ЦенаВключаетНДС.ИтоговоеЗначение) Тогда
					Элементы.НДСвхождение.Заголовок = "НДС в сумме";
				Иначе
					Элементы.НДСвхождение.Заголовок = "НДС сверху";
				КонецЕсли;
			КонецЕсли;
			Элементы.НДСвхождение.Видимость = Истина;
		ИначеЕсли СтрокаШапки.Свойство("НалогообложениеНДС") Тогда
			Элементы.НДСвхождение.Заголовок = "Цены и валюта";
			Элементы.НДСвхождение.Видимость = Истина;
		Иначе
			Элементы.НДСвхождение.Видимость = Ложь;
		КонецЕсли;

	КонецЕсли;

	Если ТЧОписание <> Неопределено Тогда
		
		Элементы.ГруппаПП.Видимость = Ложь;

		СтруктураОписанияДокументаТЧКопия = ПреобразоватьМассивСтуктурСтрокВТаблицуЗначений(ТЧОписание).Скопировать();
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Отображать", Ложь);
		МассивНеОтображаемыхСтрокТЧ = СтруктураОписанияДокументаТЧКопия.НайтиСтроки(СтруктураОтбора);
		
		// Удаляем не отображаемые строки
		Для каждого НайденнаяСтрока Из МассивНеОтображаемыхСтрокТЧ Цикл
			СтруктураОписанияДокументаТЧКопия.Удалить(НайденнаяСтрока);	
		КонецЦикла;
		СтруктураОписанияДокументаТЧКопия.Сортировать("ПорядокОтображения");	
		
		МассивДобавляемыхРеквизитов = Новый Массив();
		МассивУдаляемыхРеквизитов = Новый Массив();
		
		МассивУдаляемых = ПолучитьРеквизиты("РеквизитыТЧ");
		Если МассивУдаляемых.Количество() > 0 Тогда
			Для каждого ЭлемМассива Из МассивУдаляемых Цикл
				Если ЭлемМассива.Имя = "ИС" ИЛИ ЭлемМассива.Имя = "ИС_Картинка" Тогда
					Продолжить;
				КонецЕсли;
				МассивУдаляемыхРеквизитов.Добавить(ЭлемМассива.Путь + "." + ЭлемМассива.Имя);
			КонецЦикла;
			ИзменитьРеквизиты( , МассивУдаляемыхРеквизитов);
		КонецЕсли;
		ОписаниеТипов = Новый ОписаниеТипов("Строка");
		ВременнаяТЗ = РеквизитФормыВЗначение("РеквизитыТЧ", Тип("ДеревоЗначений"));
		ВременнаяТЗ.Строки.Очистить();
		Для каждого СтрокаОписание Из СтруктураОписанияДокументаТЧКопия Цикл
			Если НЕ ПустаяСтрока(СтрокаОписание.ОписаниеТипаРеквизита) Тогда
				ВременнаяТЗ.Колонки.Добавить(СтрокаОписание.Идентификатор, СтрокаОписание.ОписаниеТипаРеквизита, СтрокаОписание.Синоним);
				Если СтрокаОписание.Тип = Тип("Число") Тогда
					МассивИменЧисловыхКолонок.Добавить(СтрокаОписание.Идентификатор);
				КонецЕсли;
			Иначе
				ВременнаяТЗ.Колонки.Добавить(СтрокаОписание.Идентификатор, ОписаниеТиповУниверсальное, СтрокаОписание.Синоним);
			КонецЕсли;
			ВременнаяТЗ.Колонки.Добавить(СтрокаОписание.Идентификатор + "СтатусОтображения", );
		КонецЦикла;
		ВременнаяТЗ.Колонки.Добавить("ИндексСтрокиТЧ");
		// Создаем КолонкиОформления
		//Для каждого ЭлементСписка Из ВременнаяТЗ.Колонки Цикл
		//	КолонкаОформленияИмя = ЭлементСписка.Значение;
		//	ВременнаяТЗ.Колонки.Добавить(КолонкаОформленияИмя + "СтатусОтображения", );		
		//КонецЦикла;	
		

		й = 1;
		Для каждого Стр Из ТЧ Цикл
			СтрокаТЧ = Стр.Значение;
			НомерСтроки = Число(СтрЗаменить(Стр.Ключ, "Стр", ""));

			СтрокаСопоставленногоЗначения = ВременнаяТЗ.Строки.Добавить();
			СтрокаИсходногоЗначения = СтрокаСопоставленногоЗначения.Строки.Добавить();

			СтрокаСопоставленногоЗначения.ИС = й;
			й = й +1;
			СтрокаСопоставленногоЗначения.ИС_Картинка = 0;
			
			СтрокаИсходногоЗначения.ИС = 0;
			СтрокаИсходногоЗначения.ИС_Картинка = 1;

			Для каждого РеквизитСтроки Из СтрокаТЧ Цикл
				ИмяКолонки = РеквизитСтроки.Ключ;
				Если ВременнаяТЗ.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда
					ОписаниеРеквизитаТЧ = СтруктураОписанияДокументаТЧКопия.Найти(ИмяКолонки);
					Если ОписаниеРеквизитаТЧ <> Неопределено Тогда
						СтрокаСопоставленногоЗначения[ИмяКолонки] = СтрокаТЧ[ИмяКолонки].ИтоговоеЗначение;
						//Если ИмяКолонки = "Номенклатура" Тогда
						//	СтрокаИсходногоЗначения[ИмяКолонки] = Новый ФорматированнаяСтрока("" + СтрокаТЧ[ИмяКолонки].ИтоговоеЗначение, Новый Шрифт(,,Истина), Новый Цвет(0, 0, 139));
						//Иначе	
							СтрокаИсходногоЗначения[ИмяКолонки] = СтрокаТЧ[ИмяКолонки].ИсходноеЗначение;
						//КонецЕсли;
						//Если СписокЗначенийИменКолонокОформления.НайтиПоЗначению(ИмяКолонки) <> Неопределено Тогда
							
							ТипРеквизитаКолонки = ОписаниеРеквизитаТЧ.Тип;
							ВидРеквизитаКолонки = ОписаниеРеквизитаТЧ.Вид;
							ТипВидРеквизитаКолонки = ?(ПустаяСтрока(ТипРеквизитаКолонки), "", ТипРеквизитаКолонки + "." + ВидРеквизитаКолонки);
							
							Если Найти(ТипВидРеквизитаКолонки, "Число") > 0 И Окр(СтрокаТЧ[ИмяКолонки].ИсходноеЗначение, 2) <> Окр(СтрокаТЧ[ИмяКолонки].ИтоговоеЗначение, 2) Тогда
								СтрокаСопоставленногоЗначения[ИмяКолонки + "СтатусОтображения"] = "3"; 
							ИначеЕсли Найти(ТипВидРеквизитаКолонки, "Число") = 0 И Найти(ТипВидРеквизитаКолонки, "Ссылка") = 0 И СокрЛП(Строка(СтрокаТЧ[ИмяКолонки].ИсходноеЗначение)) <> СокрЛП(Строка(СтрокаТЧ[ИмяКолонки].ИтоговоеЗначение)) Тогда
								СтрокаСопоставленногоЗначения[ИмяКолонки + "СтатусОтображения"] = "3";        
							Иначе					
								СтрокаСопоставленногоЗначения[ИмяКолонки + "СтатусОтображения"] = СтрокаТЧ[ИмяКолонки].СпособСопоставления;
							КонецЕсли;
							
						//КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;           
			СтрокаСопоставленногоЗначения.ИндексСтрокиТЧ = НомерСтроки;
			//
			//Если ПоказыватьИсходныеЗначения Тогда
			//	СтрокаИсходногоЗначения = ВременнаяТЗ.Добавить();
			//	СтрокаИсходногоЗначения.ИС = 0;
			//	СтрокаИсходногоЗначения.ИС_Картинка = 1;
			//	
			//	Для каждого РеквизитСтроки Из СтрокаТЧ Цикл
			//		ИмяКолонки = РеквизитСтроки.Ключ;
			//		Если ВременнаяТЗ.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда
			//			ОписаниеРеквизитаТЧ = СтруктураОписанияДокументаТЧКопия.Найти(ИмяКолонки);
			//			Если ОписаниеРеквизитаТЧ <> Неопределено И ОписаниеРеквизитаТЧ.ОтображатьВИсходном Тогда
			//				ТипРеквизитаКолонки = ОписаниеРеквизитаТЧ.Тип;
			//				ВидРеквизитаКолонки = ОписаниеРеквизитаТЧ.Вид;
			//				ТипВидРеквизитаКолонки = ?(ПустаяСтрока(ТипРеквизитаКолонки), "", ТипРеквизитаКолонки + "." + ВидРеквизитаКолонки);
			//				
			//				СтрокаИсходногоЗначения[ИмяКолонки] = СтрокаТЧ[ИмяКолонки].ИсходноеЗначение;
			//				
			//			КонецЕсли;
			//		КонецЕсли;
			//	КонецЦикла;
			//КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Колонка Из ВременнаяТЗ.Колонки Цикл
			Если Колонка.Имя = "ИС" ИЛИ Колонка.Имя = "ИС_Картинка" Тогда
				Продолжить;
			КонецЕсли;	
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "РеквизитыТЧ"));
		КонецЦикла;	
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		ЭлементТаблица = Элементы.Найти("РеквизитыТЧ");
		//Если ЭтоВебКлиент Тогда
			//ЭлементТаблица = Элементы.Найти("РеквизитыТЧ_Веб"); 
			МассивУдаляемыхЭлементов = Новый Массив();
			Если ЭлементТаблица <> Неопределено Тогда 
				Для каждого ПодчиненныйЭлемент Из ЭлементТаблица.ПодчиненныеЭлементы Цикл
					Если НЕ ПодчиненныйЭлемент.Имя = "РеквизитыТЧИС" Тогда
						МассивУдаляемыхЭлементов.Добавить(ПодчиненныйЭлемент);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Для Каждого ЭлементТЧ Из МассивУдаляемыхЭлементов Цикл
				Элементы.Удалить(ЭлементТЧ);
			КонецЦикла;
		//Иначе
			//Удалим отображение таблицы на форме и создадим новую
			//ЭлементТаблица = Элементы.Найти("РеквизитыТЧ");
			//Если ЭлементТаблица <> Неопределено Тогда
			//	Элементы.Удалить(ЭлементТаблица);        
			//КонецЕсли;     
			//ГруппаТаблица = Элементы.Найти("ГруппаТаблица");
			//ЭлементТаблица = Элементы.Добавить("РеквизитыТЧ", Тип("ТаблицаФормы"), ГруппаТаблица);
			//Если СравнитьВерсии("8.3.8.0", ВерсияПриложения) Тогда 
			//	ЗаполнитьЗначенияСвойств(ЭлементТаблица, Элементы.РеквизитыТЧ_Основа,,"ЗапросОбновления, ДополнительныеПараметрыСоздания");
			//Иначе
			//	ЗаполнитьЗначенияСвойств(ЭлементТаблица, Элементы.РеквизитыТЧ_Основа,,"ЗапросОбновления");
			//КонецЕсли;
		//КонецЕсли;
		//НовыйЭлемент = Элементы.Добавить("РеквизитыТЧИС", Тип("ПолеФормы"), ЭлементТаблица);
		//ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элементы.РеквизитыТЧИС,,"ВыделенныйТекст");
		ЭлементТаблица.КартинкаСтрок = Элементы.Найти("КартинкаИС").Картинка;
		
		Для Каждого Колонка Из ВременнаяТЗ.Колонки Цикл
			Если  Колонка.Имя = "ИС_Картинка" ИЛИ Колонка.Имя = "ИндексСтрокиТЧ" ИЛИ Найти(Колонка.Имя, "СтатусОтображения") <> 0 Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ Колонка.Имя = "ИС" Тогда
				НовыйЭлемент = Элементы.Добавить("РеквизитыТЧ" + Колонка.Имя, Тип("ПолеФормы"), ЭлементТаблица);
				Если НЕ Найти(Колонка.Имя, "ИС") = 1 И СтруктураОписанияДокументаТЧКопия.Найти(Колонка.Имя, "Идентификатор").Тип = "Булево" Тогда
					НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
				Иначе
					НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
					НовыйЭлемент.ВыбиратьТип = Ложь;	
				КонецЕсли;
				НовыйЭлемент.ПутьКДанным = "РеквизитыТЧ." + Колонка.Имя;
			КонецЕсли;
			Если Найти(Колонка.Имя, "Услуга") = 1  Тогда
				НовыйЭлемент.ВидФлажка = ВидФлажка.Тумблер;
				НовыйЭлемент.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
			ИначеЕсли Найти(Колонка.Имя, "Номенклатура") = 1  Тогда
				НовыйЭлемент.Ширина = 15;
				НовыйЭлемент.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
			ИначеЕсли Найти(Колонка.Имя, "ИС") = 1 Тогда
				Если ВременнаяТЗ.Строки[ВременнаяТЗ.Строки.Количество() - 1].ИС < 10 Тогда
					Колонка.Ширина = 4;
				ИначеЕсли ВременнаяТЗ.Строки[ВременнаяТЗ.Строки.Количество() - 1].ИС < 100 Тогда
					Колонка.Ширина = 5;
				ИначеЕсли ВременнаяТЗ.Строки[ВременнаяТЗ.Строки.Количество() - 1].ИС < 1000 Тогда
					Колонка.Ширина = 6;
				ИначеЕсли ВременнаяТЗ.Строки[ВременнаяТЗ.Строки.Количество() - 1].ИС > 1000 Тогда
					Колонка.Ширина = 7;
				КонецЕсли;
			Иначе
				НовыйЭлемент.Ширина = 10;
			КонецЕсли;
			
			Если НЕ Колонка.Имя = "ИС" Тогда
				Если Колонка.Заголовок = "" Тогда
					НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				Иначе
					НовыйЭлемент.Заголовок = Колонка.Заголовок;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для каждого ПодчиненныйЭлемент Из ЭлементТаблица.ПодчиненныеЭлементы Цикл
			Если ПодчиненныйЭлемент.Вид = ВидПоляФормы.ПолеВвода Тогда
				ПодчиненныйЭлемент.УстановитьДействие("ОбработкаВыбора", "РеквизитыТЧОбработкаВыбора");
				ПодчиненныйЭлемент.УстановитьДействие("Очистка", "РеквизитыТЧОчистка");
			КонецЕсли;
		КонецЦикла;
		ЭлементТаблица.УстановитьДействие("ПриИзменении", "РеквизитыТЧПриИзменении");
		ЭлементТаблица.УстановитьДействие("ПриАктивизацииЯчейки", "РеквизитыТЧПриАктивизацииЯчейки");
		ЭлементТаблица.УстановитьДействие("ПриАктивизацииЯчейки", "РеквизитыТЧПриАктивизацииЯчейки");
		ЗначениеВРеквизитФормы(ВременнаяТЗ, "РеквизитыТЧ");

		Результат = ПроверитьРасчетныеИИтоговыеЗначения(Документ, ИмяШаблона);
		Элементы.РасчетныеЗначения.Заголовок = Результат.РасчетныеЗначения;
		Если Результат.ТекстОшибки = "" Тогда
			Элементы.РасчетныеЗначения.ЦветТекста = Новый Цвет(27, 128, 45);
			Элементы.РасчетныеЗначения.Подсказка = "Суммы документа совпадают с рассчитанными по таблице!"  + Символы.ПС + "Кликните по ссылке чтобы открыть документ";
		Иначе
			Элементы.РасчетныеЗначения.ЦветТекста = Новый Цвет(180,0,0);
			Элементы.РасчетныеЗначения.Подсказка = "Суммы документа отличаются от рассчитанных по таблице!"  + Символы.ПС + Результат.ТекстОшибки  + "Кликните по ссылке чтобы открыть документ";
		КонецЕсли;
		
		//Обход всех элементов условного оформления с удалением ненужных (без пометки "По-умолчанию", которые устанавливаются в конфигураторе
		ЕстьНеудаленные = Истина;
		Пока ЕстьНеудаленные Цикл
			
			ЕстьНеудаленные = Ложь;
			Для Каждого ЭлементУсловногоОформления Из ЭтаФорма.УсловноеОформление.Элементы Цикл
				Если ЭлементУсловногоОформления.Представление <> "СтрокиТЧ" Тогда
					ЕстьНеудаленные = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьНеудаленные Тогда
				Для Каждого ЭлементУсловногоОформления Из ЭтаФорма.УсловноеОформление.Элементы Цикл
					Если ЭлементУсловногоОформления.Представление <> "СтрокиТЧ" Тогда
						ЭтаФорма.УсловноеОформление.Элементы.Удалить(ЭлементУсловногоОформления);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	//	ЭлементУсловногоОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	//
	//	// Форматируемое поле
	//	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	//	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("РеквизитыТЧ");
	//	ПолеОформления.Использование = Истина;
	//
	//	// Оформление поля
	//	ФонСтроки = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветФона");
	//	ФонСтроки.Использование = Истина;
	//	ФонСтроки.Значение = Новый Цвет(255, 249, 222);
	//	Шрифт = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	//	Шрифт.Использование = Истина;
	//	Шрифт.Значение = Новый Шрифт(,8);
	//	
	//	// Условие отбора форматирования
	//	ОтборОформления = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//	ОтборОформления.Использование = Истина;
	//	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыТЧ.ИС");
	//	ОтборОформления.ПравоеЗначение = 1;
		
		// Условное оформление РеквизитыТЧ
		//Для каждого ЭлементСписка Из СписокЗначенийИменКолонокОформления Цикл
		Для Каждого Колонка Из ВременнаяТЗ.Колонки Цикл
			//ИмяФорматируемойКолонки = ЭлементСписка.Значение;
			ИмяФорматируемойКолонки = Колонка.имя;
			УстановитьУсловноеФорматированиеКолонкиРеквизитыТЧ(ИмяФорматируемойКолонки);
		КонецЦикла;
		
		Элементы.СчетКонтрагента.Видимость = Ложь;
		//Элементы.СчетОрганизации.Видимость = Ложь;

	ИначеЕсли НЕ Документ.ВидДокумента = "КФЛ" Тогда
		//Элементы.ПоказыватьИсходныеЗначения.Видимость = Ложь;
		//Элементы.НДСвхождение.Видимость = Ложь;
		Всего = СтрокаШапки.Всего.ИтоговоеЗначение;
		ДокументСтавкаНДС = СтрокаШапки.СтавкаНДС.ИтоговоеЗначение;
		ДокументСуммаНДС = СтрокаШапки.СуммаНДС.ИтоговоеЗначение;
		Если ЗначениеЗаполнено(СтрокаШапки.СчетКонтрагента.ИтоговоеЗначение) Тогда
			ДокументСчетКонтрагента = СтрокаШапки.СчетКонтрагента.ИтоговоеЗначение;
		Иначе
			СпрБанк = Справочники.Банки.НайтиПоКоду(СтрокаШапки.БикБанка.ИтоговоеЗначение);
			БанкТекст = ?(СпрБанк.Пустая(), СтрокаШапки.БикБанка.ИтоговоеЗначение, СпрБанк.Наименование);
			ДокументСчетКонтрагента = ?(СтрокаШапки.СчетКонтрагента.ИсходноеЗначение = Неопределено, "", СтрокаШапки.СчетКонтрагента.ИсходноеЗначение + ", " + БанкТекст);
			Элементы.СчетКонтрагента.ЦветТекста = Новый Цвет(180,0,0);
		КонецЕсли;
		//Если Документ.ВидДокумента = "ПП" Тогда
		//	ДокументНазначениеПлатежа =  СтрокаШапки.НазначениеПлатежа.ИтоговоеЗначение;
		//КонецЕсли;
		//ДокументСчетОрганизации = СтрокаШапки.БанковскийСчет.ИтоговоеЗначение;
		                                   
	//ИначеЕсли НЕ Элементы.ГруппаДерева.Видимость Тогда
	//	Элементы.ГруппаДерева.Видимость = Истина;
	//	Элементы.РеквизитыШапки.Видимость = Истина;
	КонецЕсли;
	
	Если Документ.ВидДокумента = "ПТУ" ИЛИ Документ.ВидДокумента = "РТУ" ИЛИ Документ.ВидДокумента = "ЗП" ИЛИ Документ.ВидДокумента = "ПН" ИЛИ Документ.ВидДокумента = "РН" ИЛИ Документ.ВидДокумента = "СП" ИЛИ Документ.ВидДокумента = "ПТ" ИЛИ Документ.ВидДокумента = "РТ" Тогда
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			УчитыватьНДС = Документ.Шапка.УчитыватьНДС.ИтоговоеЗначение; 
		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			НалогообложениеНДС = Документ.Шапка.НалогообложениеНДС.ИтоговоеЗначение;
			УчитыватьНДС = (НалогообложениеНДС = "Закупка облагается НДС" ИЛИ НалогообложениеНДС = "Продажа облагается НДС");
		ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
			УчитыватьНДС = (Документ.Шапка.НалогообложениеНДС.ИтоговоеЗначение = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС);
		ИначеЕсли  ИмяШаблона = "Розница 2.2" Тогда
			УчитыватьНДС = Документ.Шапка.УчитыватьНДС.ИтоговоеЗначение;
		КонецЕсли;
		ЭлементТаблица.ПодчиненныеЭлементы.РеквизитыТЧСтавкаНДС.Видимость = УчитыватьНДС;
		ЭлементТаблица.ПодчиненныеЭлементы.РеквизитыТЧСуммаНДС.Видимость = УчитыватьНДС;
	КонецЕсли;

	ДобавлениеКнопокКоманднойПанелиРеквизитыТЧ(Документ);

	Если НЕ ТЧОписание = Неопределено Тогда
		Элементы.ГруппаРеквизитыТЧ.Видимость = Истина;
	КонецЕсли;
	
	ЭлементТаблица = Элементы.Найти("РеквизитыТЧ");
	Если НЕ ЭлементТаблица = Неопределено И ЭлементТаблица.КонтекстноеМеню.ПодчиненныеЭлементы.Найти("РеквизитыТЧКонтекстноеМенюИзменить")<> Неопределено Тогда
		ЭлементТаблица.КонтекстноеМеню.ПодчиненныеЭлементы.РеквизитыТЧКонтекстноеМенюИзменить.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Функция предназначена создания и обработки действий при создании дополнительных кнопок командной панели реквизитов ТЧ
//
// Параметры:
//		СтруктураПараметров - набор параметров события, тип "Структура"
//			Обязательные элементы структуры параметров: 
//				ключ - ИД; значение - строка, идентификатор документа
//
// Возвращаемое значение:
//	ТекстВыполнения - Строка, исполняемый код 1С в виде строки
//
&НаСервере
Процедура ДобавлениеКнопокКоманднойПанелиРеквизитыТЧ(Документ) 
	
	Шапка = Документ.Шапка;
	ТЧ = Документ.ТЧ;
	
	Если Документ.ВидДокумента = "ПТУ" ИЛИ Документ.ВидДокумента = "ПТ" ИЛИ Документ.ВидДокумента = "РТУ" ИЛИ Документ.ВидДокумента = "РТ" ИЛИ Документ.ВидДокумента = "ЗП" ИЛИ Документ.ВидДокумента = "ПН" ИЛИ Документ.ВидДокумента = "РН" ИЛИ Документ.ВидДокумента = "СП" Тогда
		
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ПометитьУслуги = Шапка.ПометитьУслуги.ИтоговоеЗначение; 
			Элементы.Команда1.Видимость = Истина;
			Элементы.Команда1.Заголовок = "Услуги";
			Элементы.Команда1.Отображение = ОтображениеКнопки.КартинкаИТекст;
			Если ПометитьУслуги Тогда
				Попытка
					Элементы.Команда1.Картинка = БиблиотекаКартинок.УстановитьФлажки;
				Исключение
				КонецПопытки;
			Иначе
				Попытка
					Элементы.Команда1.Картинка = БиблиотекаКартинок.СнятьФлажки;
				Исключение
				КонецПопытки;
			КонецЕсли;
		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			Элементы.Команда1.Видимость = Ложь;
		КонецЕсли;
		//Элементы.Команда2.Видимость = Истина;
		//Элементы.Команда2.Заголовок = "Цены и валюты";
		//Элементы.Команда2.Картинка = БиблиотекаКартинок.ОтборПоВиду;
		//Элементы.Команда2.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Элементы.ДобавитьНоменклатуру.Видимость = Истина;
		Элементы.УдалитьПозицию.Видимость = Истина;

		
	Иначе
		//Элементы.Команда1.Видимость = Ложь;
		//Элементы.Команда2.Видимость = Ложь;
		Элементы.ДобавитьНоменклатуру.Видимость = Ложь;
		Элементы.УдалитьПозицию.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура позволяет сравнить значения версии программы
//
&НаСервереБезКонтекста
Функция СравнитьВерсии(Знач Версия1, Знач Версия2) Экспорт
	
	Версия1Меньше=Ложь;
	Пока Версия1<>"" И Версия2<>"" Цикл
		ПозицияРазделителяРазряда1=Найти(Версия1, ".");
		Если ПозицияРазделителяРазряда1 = 0 Тогда
			Разряд1 = Версия1;
			Версия1 = ""
		Иначе
			Разряд1 = Лев(Версия1,ПозицияРазделителяРазряда1-1);
			Версия1 = Сред(Версия1, ПозицияРазделителяРазряда1+1);
		КонецЕсли;
		Разряд1Число = Число(Разряд1);
		ПозицияРазделителяРазряда2=Найти(Версия2, ".");
		Если ПозицияРазделителяРазряда2 = 0 Тогда
			Разряд2 = Версия2;
			Версия2 = ""
		Иначе
			Разряд2 = Лев(Версия2,ПозицияРазделителяРазряда2-1);
			Версия2 = Сред(Версия2, ПозицияРазделителяРазряда2+1);
		КонецЕсли;
		Разряд2Число = Число(Разряд2);
		Если Разряд1Число<Разряд2Число Тогда
			Версия1Меньше=Истина;
			Прервать;
		ИначеЕсли Разряд1Число>Разряд2Число Тогда
			Версия1Меньше=Ложь;
			Прервать;
		КонецЕсли;;
	КонецЦикла;
	Возврат Версия1Меньше;		
	
КонецФункции


// функция преобразования массива стуктур строк в таблицу значений
//
// параметры:
//  МассивСтуктурСтрок, тип "Массив", где каждый элемент - структура, ключи которой являются именами колонок таблицы 
//
// возвращаемое значение: таблица значений
//
&НаСервереБезКонтекста
Функция ПреобразоватьМассивСтуктурСтрокВТаблицуЗначений(МассивСтуктурСтрок) Экспорт
	
	Если МассивСтуктурСтрок = Неопределено Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	ТаблицаЗначений = Новый ТаблицаЗначений;
	Для Каждого СтуктураСтроки Из МассивСтуктурСтрок Цикл
		НоваяСтрока = ТаблицаЗначений.Добавить();
		Для Каждого ЭлементСтруктуры Из СтуктураСтроки Цикл
			Если ТаблицаЗначений.Колонки.Найти(ЭлементСтруктуры.Ключ) = Неопределено Тогда
				ТаблицаЗначений.Колонки.Добавить(ЭлементСтруктуры.Ключ);
			КонецЕсли;
			НоваяСтрока[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
		КонецЦикла;		
	КонецЦикла;		
		
	Возврат ТаблицаЗначений;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруКолонок(МассивСтуктурСтрок) Экспорт
	
	Если МассивСтуктурСтрок = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ТаблицаЗначений = Новый ТаблицаЗначений;
	Для Каждого СтуктураСтроки Из МассивСтуктурСтрок Цикл
		НоваяСтрока = ТаблицаЗначений.Добавить();
		Для Каждого ЭлементСтруктуры Из СтуктураСтроки Цикл
			Если ТаблицаЗначений.Колонки.Найти(ЭлементСтруктуры.Ключ) = Неопределено Тогда
				ТаблицаЗначений.Колонки.Добавить(ЭлементСтруктуры.Ключ);
			КонецЕсли;
			НоваяСтрока[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
		КонецЦикла;		
	КонецЦикла;	
	
	ТаблицаЗначений.Сортировать("ПорядокОтображения");
	МассивСтрок = ТаблицаЗначений.НайтиСтроки(Новый Структура("Отображать", Истина));
	
	СтруктураКолонок = Новый Структура;
	Для Каждого Строка Из МассивСтрок Цикл
		СтруктураКолонок.Вставить(Строка.Идентификатор, Строка.Тип);
	КонецЦикла;
	
	Возврат СтруктураКолонок;

КонецФункции


// Процедура - обработчик события элемента ПоказыватьИсходныеЗначения "ПриИзменении"
//
&НаКлиенте
Процедура ПоказыватьИсходныеЗначенияПриИзменении(Элемент)
	
	НоваяСтрокаСтатистики                       = ВладелецФормы.ТЗПоказателиРаботы.Добавить();
	НоваяСтрокаСтатистики.DateTime              = ТекущаяДата();
	НоваяСтрокаСтатистики.EventName             = "Действия пользователя";
	//Ресурсы
	НоваяСтрокаСтатистики.User1C                = ВладелецФормы.ПользовательИнфБазы;
	НоваяСтрокаСтатистики.ConfigurationVersion  = ВладелецФормы.ВерсияКонфигурации;
	НоваяСтрокаСтатистики.ConfigurationName     = ВладелецФормы.МетаданныеИмя;
	НоваяСтрокаСтатистики.ClientName            = "ESDL";
	НоваяСтрокаСтатистики.ClientVersion         = ВладелецФормы.ВерсияПрограммы;
	НоваяСтрокаСтатистики.AccauntDataBaseID		= ВладелецФормы.ИДБазыДанныхПользователя;
	//Реквизиты
	НоваяСтрокаСтатистики.StatisticalDataName0  = "Включены исходные значения";
	НоваяСтрокаСтатистики.StatisticalDataValue0 = ПоказыватьИсходныеЗначения;
	//ВладелецФормы.ПоказыватьИсходныеЗначения = ПоказыватьИсходныеЗначения;
	
	ПоказатьДокумент();
	
КонецПроцедуры

// Процедура - обработчик события элемента РасчетныеЗначения "Нажатие"
//
&НаКлиенте
Процедура РасчетныеЗначенияНажатие(Элемент)
	
	//Если НЕ ВладелецФормы.RICOH Тогда
	//	Если Найти(Элементы.РасчетныеЗначения.Подсказка, "совпадают") = 0 Тогда
	//		СообщениеПользователю = Новый СообщениеПользователю;
	//		ТекстСообщения = СтрЗаменить(Элементы.РасчетныеЗначения.Подсказка, "Кликните по ссылке чтобы открыть документ", "");
	//		СообщениеПользователю.Текст = ТекстСообщения;
	//		СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
	//		СообщениеПользователю.Сообщить();
	//	КонецЕсли;
	//	ВладелецФормы.ПоказатьИзображения(ТекДокИД);
	//КонецЕсли;
	
	ВладелецФормы.ОткрытьФайлДокумента(ТекДокИД);
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////////////
// События таблицы формы "РеквизитыТЧ"

// Процедура - обработчик события элемента РеквизитыТЧ "ПриАктивизацииЯчейки"
//
&НаКлиенте
Процедура РеквизитыТЧПриАктивизацииЯчейки(Элемент)  	
	
	Если Элемент.ТекущаяСтрока = Неопределено ИЛИ Элемент.ТекущийЭлемент = Неопределено  Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = РеквизитыТЧ.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	ИДКолонки = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "РеквизитыТЧ", "");
	ИндексСтрокиТЧ = ТекущаяСтрока.ИндексСтрокиТЧ;
	
	ИмяЭлемента = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "РеквизитыТЧ", "");
	ЗначениеЭлемента = Элемент.ТекущиеДанные[ИмяЭлемента];
	Элемент.ТекущийЭлемент.Доступность = Истина;
	Попытка
		Элемент.ТекущийЭлемент.СписокВыбора.Очистить();
		Элемент.ТекущийЭлемент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
	Исключение
	КонецПопытки;
	Если ИндексСтрокиТЧ = Неопределено Тогда
		Если Элемент.ТекущийЭлемент.Вид <> ВидПоляФормы.ПолеКартинки И Элемент.ТекущийЭлемент.Вид <> ВидПоляФормы.ПолеФлажка Тогда
			Элемент.ТекущийЭлемент.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
			Элемент.ТекущийЭлемент.РедактированиеТекста = Ложь;
			Элемент.ТекущийЭлемент.КнопкаВыбора = Ложь;
			Элемент.ТекущийЭлемент.КнопкаВыпадающегоСписка = Ложь;
			Элемент.ТекущийЭлемент.КнопкаОчистки = Ложь;
			Элемент.ТекущийЭлемент.КнопкаОткрытия = Ложь;
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
		Возврат;
	Иначе
		Элемент.ТекущийЭлемент.РежимРедактирования = РежимРедактированияКолонки.Вход;
	КонецЕсли;
	
	СтруктураНастроекЯчейки = Новый Структура("КнопкаОткрытия, КнопкаСпискаВыбора, КнопкаОчистки, ВыбиратьТип, БыстрыйВыбор, РедактированиеТекста,  РежимВыбораИзСписка, ВыборГруппИЭлементов, ТолькоПросмотр, КнопкаВыбора", 
	Ложь, Ложь, Ложь, Ложь, Ложь, Истина, Ложь, ГруппыИЭлементы.ГруппыИЭлементы, Ложь, Ложь);
	
	
	Если Элемент.ТекущийЭлемент.Вид <> ВидПоляФормы.ПолеКартинки И Элемент.ТекущийЭлемент.Вид <> ВидПоляФормы.ПолеФлажка Тогда
		Попытка
			Элемент.ПодчиненныеЭлементы["РеквизитыТЧ" + ИмяЭлемента].КнопкаВыпадающегоСписка = Ложь;
			СтруктураНастроекЯчейки.Вставить("КнопкаВыпадающегоСписка", Ложь);
		Исключение	
		КонецПопытки;
		
		Элемент.ПодчиненныеЭлементы["РеквизитыТЧ" + ИмяЭлемента].КнопкаВыбора = Ложь;
		Элемент.ПодчиненныеЭлементы["РеквизитыТЧ" + ИмяЭлемента].КнопкаОчистки = Ложь;
		Элемент.ПодчиненныеЭлементы["РеквизитыТЧ" + ИмяЭлемента].КнопкаОткрытия = Ложь;
		Элемент.ПодчиненныеЭлементы["РеквизитыТЧ" + ИмяЭлемента].ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Документ = СтруктураДокумента;
	СписокВыбораДляЭлемента = Новый СписокЗначений();
	
	СтруктураОписанияДокумента = Неопределено;
	СтруктураОписанийДокументов.Свойство(Документ.ВидДокумента, СтруктураОписанияДокумента);
	ТЧ = СтруктураОписанияДокумента.ТЧ;
	ОписаниеРеквизита = ВладелецФормы.НайтиВМассивеСтруктур(ТЧ, ИмяЭлемента, "Идентификатор");
	СтруктураКолонок = ПолучитьСтруктуруКолонок(СтруктураОписанияДокумента.ТЧ);
	
	Если ОписаниеРеквизита = Неопределено Тогда
		СтруктураНастроекЯчейки.Удалить("КнопкаОткрытия");
		СтруктураНастроекЯчейки.ТолькоПросмотр = Истина;
		ТекстВыполнения = "";
	Иначе
		
		ТипРеквизита = ОписаниеРеквизита.Тип;
		ВидРеквизита = ОписаниеРеквизита.Вид;
		ТипВидРеквизита = ?(ПустаяСтрока(ТипРеквизита), "", ТипРеквизита + "." + ВидРеквизита);
		
		Если ТипРеквизита = "Строка" Тогда
			// пока ничего не меняем
		ИначеЕсли ТипРеквизита = "Число" Тогда
			СтруктураНастроекЯчейки.Удалить("БыстрыйВыбор");
			СтруктураНастроекЯчейки.Удалить("ВыборГруппИЭлементов");
			// пока ничего не меняем	
		ИначеЕсли ТипРеквизита = "Дата" Тогда
			СтруктураНастроекЯчейки.КнопкаВыбора = Истина;	
		ИначеЕсли ТипРеквизита = "Булево" Тогда
			СтруктураНастроекЯчейки.КнопкаВыбора = Ложь;
		ИначеЕсли ТипРеквизита = "СправочникСсылка" Тогда
			Если СтруктураНастроекЯчейки.Свойство("КнопкаВыпадающегоСписка") Тогда
				СтруктураНастроекЯчейки.КнопкаВыпадающегоСписка = Истина;
			Иначе
				СтруктураНастроекЯчейки.КнопкаСпискаВыбора = Истина;
			КонецЕсли;
			
			Если ТипЗнч(ЗначениеЭлемента) = Тип(ТипВидРеквизита) Тогда
				СтруктураНастроекЯчейки.КнопкаОткрытия = Истина;
				СтруктураНастроекЯчейки.КнопкаОчистки = Истина;
			КонецЕсли;
		ИначеЕсли ТипРеквизита = "ПеречислениеСсылка" Тогда
			Если СтруктураНастроекЯчейки.Свойство("КнопкаВыпадающегоСписка") Тогда
				СтруктураНастроекЯчейки.КнопкаВыпадающегоСписка = Истина;
			Иначе
				СтруктураНастроекЯчейки.КнопкаСпискаВыбора = Истина;
			КонецЕсли;
		ИначеЕсли ТипРеквизита = "ПланСчетовСсылка" Тогда
			СтруктураНастроекЯчейки.КнопкаВыбора = Истина;
		ИначеЕсли ПустаяСтрока(ТипВидРеквизита) Тогда
			СтруктураНастроекЯчейки.ТолькоПросмотр = Истина;		
		КонецЕсли;
		
		СписокВыбораДляЭлемента = Новый СписокЗначений();
		
		ИскомаяКолонка = Неопределено;
		Для Каждого РеквизитСтроки Из Документ.ТЧ[?(ИндексСтрокиТЧ = 0 ,"Стр0",("Стр" + Формат(ИндексСтрокиТЧ, "ЧГ=0")))] Цикл
			Если РеквизитСтроки.Ключ = ИмяЭлемента Тогда
				ИскомаяКолонка = ИмяЭлемента;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ИскомаяКолонка = "Услуга" Тогда
			ТекстВыполнения = "";
		КонецЕсли;
		
		Если ИскомаяКолонка <> Неопределено Тогда    
			Если НЕ ЗначениеЗаполнено(Документ.ТЧ[?(ИндексСтрокиТЧ = 0 ,"Стр0",("Стр" + Формат(ИндексСтрокиТЧ, "ЧГ=0")))][ИмяЭлемента].ВариантыПодбора) Тогда
				Если ИмяЭлемента = "Номенклатура" Тогда
					ПоискПоНаименованиеПолное = Истина;
				Иначе
					ПоискПоНаименованиеПолное = Ложь;
				КонецЕсли;
				ВариантыПодбора = ВладелецФормы.ЗаполнитьВариантыПодбораСпискаВыбора(ВладелецФормы.ESDLТаблицаВариантовНечеткогоПоиска,  ОписаниеРеквизита, Документ.ТЧ[?(ИндексСтрокиТЧ = 0 ,"Стр0",("Стр" + Формат(ИндексСтрокиТЧ, "ЧГ=0")))], ВладелецФормы.ТаблицаДанных, ТекДокИД, "", Ложь, ПоискПоНаименованиеПолное, , ИмяШаблона);	
				
				Данные = Документ.ТЧ[?(ИндексСтрокиТЧ = 0 ,"Стр0",("Стр" + Формат(ИндексСтрокиТЧ, "ЧГ=0")))];
				Если ЗначениеЗаполнено(Данные[ОписаниеРеквизита.Идентификатор].ИтоговоеЗначение) И ТипЗнч(Данные[ОписаниеРеквизита.Идентификатор].ИтоговоеЗначение) = Тип("Строка") Тогда
					СтрокаПоиска = СокрЛП(Данные[ОписаниеРеквизита.Идентификатор].ИтоговоеЗначение);
				Иначе
					СтрокаПоиска = СокрЛП(Данные[ОписаниеРеквизита.Идентификатор].ИсходноеЗначение);
				КонецЕсли;
				Если ОписаниеРеквизита.Владелец <> "" Тогда
					Владелец = Данные[ОписаниеРеквизита.Владелец].ИтоговоеЗначение;
				Иначе
					Владелец = "";
				КонецЕсли;
				НоваяСтрокаВариантов = ВладелецФормы.ESDLТаблицаВариантовНечеткогоПоиска.Добавить();
				НоваяСтрокаВариантов.Идентификатор = ОписаниеРеквизита.Идентификатор;
				НоваяСтрокаВариантов.ВидСправочника = ОписаниеРеквизита.Вид;
				НоваяСтрокаВариантов.СтрокаПоиска = СтрокаПоиска;
				НоваяСтрокаВариантов.Владелец = Владелец;
				НоваяСтрокаВариантов.СписокВариантов = ВариантыПодбора;
				
				Документ.ТЧ[?(ИндексСтрокиТЧ = 0 ,"Стр0",("Стр" + Формат(ИндексСтрокиТЧ, "ЧГ=0")))][ИмяЭлемента].ВариантыПодбора = ВариантыПодбора;
			КонецЕсли;
			СписокВыбораДляЭлемента = Документ.ТЧ[?(ИндексСтрокиТЧ = 0 ,"Стр0",("Стр" + Формат(ИндексСтрокиТЧ, "ЧГ=0")))][ИмяЭлемента].ВариантыПодбора;
		КонецЕсли;
		
		СтрокаТЧ = Документ.ТЧ["Стр" + ИндексСтрокиТЧ];

		Если ТипРеквизита = "СправочникСсылка" Тогда
			Если ИмяЭлемента = "ГруппаНоменклатуры" ИЛИ ИмяЭлемента = "ВидНоменклатуры" Тогда
				СтруктураНастроекЯчейки.КнопкаОткрытия = Ложь;
				Если СтруктураНастроекЯчейки.Свойство("КнопкаВыпадающегоСписка") Тогда
					СтруктураНастроекЯчейки.КнопкаВыпадающегоСписка = Ложь;
				Иначе
					СтруктураНастроекЯчейки.КнопкаСпискаВыбора = Ложь;
				КонецЕсли;
				СтруктураНастроекЯчейки.КнопкаОчистки = Ложь;
				
				СтруктураНастроекЯчейки.КнопкаВыбора = Истина;
				Если ИмяЭлемента = "ГруппаНоменклатуры" Тогда
					СтруктураНастроекЯчейки.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
				Иначе
					СтруктураНастроекЯчейки.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
				КонецЕсли;

				Если ТипЗнч(СтрокаТЧ.Номенклатура.ИтоговоеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда
					СтруктураНастроекЯчейки.ТолькоПросмотр = Истина;
					СтруктураНастроекЯчейки.КнопкаВыбора = Ложь;
				КонецЕсли;
			ИначеЕсли ИмяЭлемента = "Склад" Тогда
				СтруктураНастроекЯчейки.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;	
			ИначеЕсли ИмяЭлемента = "НомерГТД" Тогда
				Если СтруктураНастроекЯчейки.Свойство("КнопкаВыпадающегоСписка") Тогда
					СтруктураНастроекЯчейки.КнопкаВыпадающегоСписка = Ложь;
				Иначе
					СтруктураНастроекЯчейки.КнопкаСпискаВыбора = Ложь;
				КонецЕсли;
				СтруктураНастроекЯчейки.КнопкаОткрытия = Ложь;
				СтруктураНастроекЯчейки.КнопкаВыбора = Ложь;
				//СтруктураНастроекЯчейки.КнопкаОчистки = Ложь;
			КонецЕсли;
		ИначеЕсли ТипРеквизита = "Число" Тогда
			Если ИмяЭлемента = "СуммаНДС" Тогда
				СтруктураНастроекЯчейки.ТолькоПросмотр = Истина;				
			КонецЕсли;
		ИначеЕсли ТипРеквизита = "Булево" Тогда
			Если ИмяЭлемента = "Услуга" И ТипЗнч(СтрокаТЧ.Номенклатура.ИтоговоеЗначение)<> Тип("Строка") Тогда
				Элемент.ПодчиненныеЭлементы["РеквизитыТЧ" + ИмяЭлемента].ТолькоПросмотр = Истина;
			Иначе
				Элемент.ПодчиненныеЭлементы["РеквизитыТЧ" + ИмяЭлемента].ТолькоПросмотр = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если СписокВыбораДляЭлемента.Количество() > 0 Тогда
			ЗначениеРеквизита = СтрокаТЧ[ИмяЭлемента].ИсходноеЗначение;
			Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				к = СписокВыбораДляЭлемента.Количество() - 1;
				Пока к >= 0 Цикл
					Если СписокВыбораДляЭлемента[к].Значение <> "Открыть" Тогда
						СписокВыбораДляЭлемента.Удалить(к);
					КонецЕсли;
					к = к - 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураНастроекЯчейки.Свойство("КнопкаВыпадающегоСписка") Тогда
		Попытка
			Элемент.ПодчиненныеЭлементы["РеквизитыТЧ" + ИмяЭлемента].КнопкаСпискаВыбора = Ложь;
			СтруктураНастроекЯчейки.КнопкаСпискаВыбора = СтруктураНастроекЯчейки.КнопкаВыпадающегоСписка;	
		Исключение
			СтруктураНастроекЯчейки.Удалить("КнопкаСпискаВыбора");
		КонецПопытки;
	КонецЕсли;
	
	Для каждого ИзменяемыйЭлемент Из СтруктураНастроекЯчейки Цикл
		Если Элемент.ТекущийЭлемент.Вид <> ВидПоляФормы.ПолеФлажка И Элемент.ТекущийЭлемент.Вид <> ВидПоляФормы.ПолеКартинки Тогда
			Элемент.ПодчиненныеЭлементы["РеквизитыТЧ" + ИмяЭлемента][ИзменяемыйЭлемент.Ключ] = ИзменяемыйЭлемент.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если СписокВыбораДляЭлемента.Количество() > 0 Тогда
		Элемент.ПодчиненныеЭлементы["РеквизитыТЧ" + ИмяЭлемента].СписокВыбора.Очистить();	
		Для Каждого Элем Из СписокВыбораДляЭлемента Цикл
			Элемент.ПодчиненныеЭлементы["РеквизитыТЧ" + ИмяЭлемента].СписокВыбора.Добавить(Элем.Значение, Элем.Представление);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события элемента РеквизитыТЧ "ОбработкаВыбора"
//
&НаКлиенте
Процедура РеквизитыТЧОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//Если ЭтоВебКлиент Тогда
	//	ЭлементТаблица = Элементы.РеквизитыТЧ_Веб;
	//Иначе
		ЭлементТаблица = Элементы.РеквизитыТЧ;
	//КонецЕсли;

	ТекущаяСтрокаРеквизитыТЧ = РеквизитыТЧ.НайтиПоИдентификатору(ЭлементТаблица.ТекущаяСтрока);
	
	СтандартнаяОбработка = Ложь;	
	
	ИмяЭлемента = СтрЗаменить(Элемент.Имя, "РеквизитыТЧ", "");
	ЗначениеЭлемента = ВыбранноеЗначение;
	СтароеЗначение = ЭлементТаблица.ТекущиеДанные[ИмяЭлемента];
	ИндексСтрокиТЧ = ТекущаяСтрокаРеквизитыТЧ.ИндексСтрокиТЧ;
	
	Документ = СтруктураДокумента;

	Реквизит = Документ.ТЧ[?(ИндексСтрокиТЧ = 0 ,"Стр0",("Стр" + Формат(ИндексСтрокиТЧ, "ЧГ=0")))][ИмяЭлемента];
	ЗначениеРеквизита = Реквизит.ИтоговоеЗначение;
	
	СтруктураОписанияДокумента = Неопределено;
	СтруктураОписанийДокументов.Свойство(Документ.ВидДокумента, СтруктураОписанияДокумента);
	ОписаниеРеквизита = ВладелецФормы.НайтиВМассивеСтруктур(СтруктураОписанияДокумента.ТЧ, ИмяЭлемента, "Идентификатор");

	// определение владельца
	ВладелецИмя = ОписаниеРеквизита.Владелец;
	ВладелецЗначение = Неопределено;
	Если ЗначениеЗаполнено(ВладелецИмя) Тогда
		СтрокаВладельца = Документ.ТЧ[?(ИндексСтрокиТЧ = 0 ,"Стр0",("Стр" + Формат(ИндексСтрокиТЧ, "ЧГ=0")))][ВладелецИмя];
		ВладелецЗначение = СтрокаВладельца.ИтоговоеЗначение;
	КонецЕсли;
		
	Если ЗначениеЭлемента = "Открыть" Тогда
		//
	ИначеЕсли ЗначениеЭлемента = "Обновить" Тогда
		Если ИмяЭлемента = "Номенклатура" Тогда
			ПоискПоНаименованиеПолное = Истина;
		Иначе
			ПоискПоНаименованиеПолное = Ложь;
		КонецЕсли;
		СписокВыбораДляЭлемента = ВладелецФормы.ЗаполнитьВариантыПодбораСпискаВыбора(ВладелецФормы.ESDLТаблицаВариантовНечеткогоПоиска,  ОписаниеРеквизита, Документ.ТЧ[?(ИндексСтрокиТЧ = 0 ,"Стр0",("Стр" + Формат(ИндексСтрокиТЧ, "ЧГ=0")))], ВладелецФормы.ТаблицаДанных, ТекДокИД, ,Истина,ПоискПоНаименованиеПолное, ,ИмяШаблона);
		
		Данные = Документ.ТЧ[?(ИндексСтрокиТЧ = 0 ,"Стр0",("Стр" + Формат(ИндексСтрокиТЧ, "ЧГ=0")))];
		Если ЗначениеЗаполнено(Данные[ОписаниеРеквизита.Идентификатор].ИтоговоеЗначение) И ТипЗнч(Данные[ОписаниеРеквизита.Идентификатор].ИтоговоеЗначение) = Тип("Строка") Тогда
			СтрокаПоиска = СокрЛП(Данные[ОписаниеРеквизита.Идентификатор].ИтоговоеЗначение);
		Иначе
			СтрокаПоиска = СокрЛП(Данные[ОписаниеРеквизита.Идентификатор].ИсходноеЗначение);
		КонецЕсли;
		Если ОписаниеРеквизита.Владелец <> "" Тогда
			Владелец = Данные[ОписаниеРеквизита.Владелец].ИтоговоеЗначение;
		Иначе
			Владелец = "";
		КонецЕсли;
		НоваяСтрокаВариантов = ВладелецФормы.ESDLТаблицаВариантовНечеткогоПоиска.Добавить();
		НоваяСтрокаВариантов.Идентификатор = ОписаниеРеквизита.Идентификатор;
		НоваяСтрокаВариантов.ВидСправочника = ОписаниеРеквизита.Вид;
		НоваяСтрокаВариантов.СтрокаПоиска = СтрокаПоиска;
		НоваяСтрокаВариантов.Владелец = Владелец;
		НоваяСтрокаВариантов.СписокВариантов = СписокВыбораДляЭлемента ;

		Документ.ТЧ[?(ИндексСтрокиТЧ = 0 ,"Стр0",("Стр" + Формат(ИндексСтрокиТЧ, "ЧГ=0")))][ИмяЭлемента].ВариантыПодбора = СписокВыбораДляЭлемента;
	Иначе
		//
	КонецЕсли;
	
	ТипРеквизита = ОписаниеРеквизита.Тип;
	ВидРеквизита = ОписаниеРеквизита.Вид;
	
	Если ВыбранноеЗначение = "Открыть" Тогда
		Если ТипРеквизита = "СправочникСсылка" Тогда
			ПараметрыФормыВыбора = Новый Структура("РежимВыбора", Истина);
			//для интерфейса Такси 
			Если Найти(ИмяЭлемента, "Группа") > 0 Тогда 
				ФормаВыбора = ПолучитьФорму("Справочник." + ВидРеквизита + ".ФормаВыбораГруппы", ПараметрыФормыВыбора, Элемент);
			Иначе
				ФормаВыбора = ПолучитьФорму("Справочник." + ВидРеквизита + ".ФормаВыбора", ПараметрыФормыВыбора, Элемент);
			КонецЕсли;
			Если ТипЗнч(ЗначениеРеквизита) = Тип("СправочникСсылка.Номенклатура") И ФормаВыбора.Элементы.Найти("Список") <> Неопределено Тогда
				ФормаВыбора.Элементы.Список.ТекущаяСтрока = СтароеЗначение;
			КонецЕсли;
			Если НЕ ВладелецЗначение = Неопределено Тогда
				ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
				ЭлементОтбора.ПравоеЗначение = ВладелецЗначение;
				ЭлементОтбора.Использование = ?(ВладелецЗначение = "", Ложь, Истина);
			КонецЕсли;
			ФормаВыбора.Открыть();	
		КонецЕсли;
	ИначеЕсли ВыбранноеЗначение = "Обновить" Тогда		
		Элемент.СписокВыбора.Очистить();
		Для Каждого Элем Из СписокВыбораДляЭлемента Цикл
			Элемент.СписокВыбора.Добавить(Элем.Значение, Элем.Представление);
		КонецЦикла;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("РеквизитыТЧВыполнитьПослеВыбора", ЭтаФорма, Элемент);
		ПоказатьВыборИзСписка(ОписаниеОповещения, Элемент.СписокВыбора, Элемент);
		Возврат;
	Иначе
		ЭлементТаблица.ТекущиеДанные[ИмяЭлемента] = ВыбранноеЗначение;
		Если ВыбранноеЗначение <> Неопределено И ВыбранноеЗначение <> СтароеЗначение Тогда
			РеквизитыТЧПриИзменении(ЭлементТаблица);
		КонецЕсли;
	КонецЕсли;
	
	РеквизитыТЧПриАктивизацииЯчейки(ЭлементТаблица);
	
КонецПроцедуры

// Процедура - обработчик оповещения при выполнении процедуры "РеквизитыТЧОбработкаВыбора"
//
&НаКлиенте
Процедура РеквизитыТЧВыполнитьПослеВыбора(ВыбранноеЗначение, Элемент) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыТЧОбработкаВыбора(Элемент, ВыбранноеЗначение.Значение, Ложь);	
	
КонецПроцедуры

// Процедура - обработчик события элемента РеквизитыТЧ "ПриИзменении"
//
&НаКлиенте
Процедура РеквизитыТЧПриИзменении(Элемент)

	СтандартнаяОбработка = Ложь;
	
	РеквизитЭлементФормыРеквизитыТЧ = Элемент.ТекущиеДанные;
	ИндексСтрокиТЧ = РеквизитЭлементФормыРеквизитыТЧ.ИндексСтрокиТЧ;
	ИмяЭлемента = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "РеквизитыТЧ", "");
	Если  Элемент.ТекущийЭлемент.Вид = ВидПоляФормы.ПолеФлажка И ИндексСтрокиТЧ = Неопределено Тогда
		РеквизитЭлементФормыРеквизитыТЧ[ИмяЭлемента] = Ложь;
		Возврат
	КонецЕсли;
	
	ЗначениеЭлемента = РеквизитЭлементФормыРеквизитыТЧ[ИмяЭлемента];
	
	Документ = СтруктураДокумента;
	СтруктураПараметров = Новый Структура("Документ, ИД, ИмяЭлемента, ЗначениеЭлемента, СтароеЗначение, ИндексСтрокиТЧ, ПересчитатьИтоговоеПоле, СтруктураИзменяемыхРеквизитов, СтруктураСообщений, СтруктураОписанийДокументов, Документ", 
	Документ, ТекДокИД, ИмяЭлемента, ЗначениеЭлемента, "", ИндексСтрокиТЧ, Ложь, Новый Структура(), Новый Структура(), СтруктураОписанийДокументов);
	
	Если НЕ ИндексСтрокиТЧ = Неопределено Тогда
		СтруктураПараметров.Документ = Документ;
		ТЧ = Документ.ТЧ;
		Реквизит = ТЧ[?(ИндексСтрокиТЧ = 0 ,"Стр0",("Стр" + Формат(ИндексСтрокиТЧ, "ЧГ=0")))][ИмяЭлемента];
		СтруктураПараметров.СтароеЗначение = Реквизит.ИтоговоеЗначение;
		
		СтруктураОписанияДокумента = Неопределено;
		СтруктураОписанийДокументов.Свойство(Документ.ВидДокумента, СтруктураОписанияДокумента);
		ТабЧасть = СтруктураОписанияДокумента.ТЧ;
		ОписаниеРеквизита = ВладелецФормы.НайтиВМассивеСтруктур(ТабЧасть, ИмяЭлемента, "Идентификатор");	
		
		ТипРеквизита = ОписаниеРеквизита.Тип;
		ВидРеквизита = ОписаниеРеквизита.Вид;
		ТипВидРеквизита = ?(ПустаяСтрока(ТипРеквизита), "", ?(ПустаяСтрока(ВидРеквизита), ТипРеквизита, ТипРеквизита + "." + ВидРеквизита));
		
		// Стандартная обработка изменения
		Реквизит.ИтоговоеЗначение = ЗначениеЭлемента;
		
		Если Реквизит.СпособСопоставления <> "1" Тогда
			Если ПустаяСтрока(ЗначениеЭлемента) Тогда 
				Реквизит.СпособСопоставления = "9";
			Иначе
				Если ТипЗнч(ЗначениеЭлемента) = Тип("" + ОписаниеРеквизита.Тип + ?(ОписаниеРеквизита.Вид <> "", ".", "") + ОписаниеРеквизита.Вид) Тогда
					Реквизит.СпособСопоставления = "8";
				Иначе
					Реквизит.СпособСопоставления = "7";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СохранитьИзменения();

		СтруктураПараметров.СтруктураИзменяемыхРеквизитов.Вставить(ИмяЭлемента, Новый Структура("ЗначениеЭлемента, СпособСопоставления", Реквизит.ИтоговоеЗначение, Реквизит.СпособСопоставления));
		ВладелецФормы.РеквизитыТЧПриИзмененииШаблон(СтруктураПараметров);
	КонецЕсли;
	
	// После возвращения с сервера структура именно объявленная на клиенте теряет свои значения!	
	СтруктураИзменяемыхРеквизитов = СтруктураПараметров.СтруктураИзменяемыхРеквизитов;
	
	Для каждого ИзменяемыйРеквизитСтруктура Из СтруктураИзменяемыхРеквизитов Цикл
		РеквизитЭлементФормыРеквизитыТЧ[ИзменяемыйРеквизитСтруктура.Ключ] = ИзменяемыйРеквизитСтруктура.Значение.ЗначениеЭлемента;
		СтрокаДокумента = Документ.ТЧ[?(ИндексСтрокиТЧ = 0 ,"Стр0",("Стр" + Формат(ИндексСтрокиТЧ, "ЧГ=0")))];
		СтрокаДокумента[ИзменяемыйРеквизитСтруктура.Ключ].ИтоговоеЗначение = ИзменяемыйРеквизитСтруктура.Значение.ЗначениеЭлемента;
		Если РеквизитЭлементФормыРеквизитыТЧ.Свойство(ИзменяемыйРеквизитСтруктура.Ключ + "СтатусОтображения") Тогда
			Если ТипЗнч(ИзменяемыйРеквизитСтруктура.Значение.ЗначениеЭлемента) = Тип("Число") И 
				Окр(СтрокаДокумента[ИзменяемыйРеквизитСтруктура.Ключ].ИтоговоеЗначение, 2) <> Окр(СтрокаДокумента[ИзменяемыйРеквизитСтруктура.Ключ].ИсходноеЗначение, 2) Тогда
				РеквизитЭлементФормыРеквизитыТЧ[ИзменяемыйРеквизитСтруктура.Ключ + "СтатусОтображения"] = "3"; 
			Иначе
				РеквизитЭлементФормыРеквизитыТЧ[ИзменяемыйРеквизитСтруктура.Ключ + "СтатусОтображения"] = ИзменяемыйРеквизитСтруктура.Значение.СпособСопоставления;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураПараметров.ПересчитатьИтоговоеПоле Тогда				
		Результат = ПроверитьРасчетныеИИтоговыеЗначения(Документ, ИмяШаблона);
		Элементы.РасчетныеЗначения.Заголовок = Результат.РасчетныеЗначения;
		Если Результат.ТекстОшибки = "" Тогда
			Элементы.РасчетныеЗначения.ЦветТекста = Новый Цвет(27, 128, 45);
			Элементы.РасчетныеЗначения.Подсказка = "Суммы документа совпадают с рассчитанными по таблице!"  + Символы.ПС + "Кликните по ссылке чтобы открыть документ";
			Если Документ.Статус = 3 Тогда
				Документ.Статус = 2;
			КонецЕсли;
		Иначе
			Элементы.РасчетныеЗначения.ЦветТекста = Новый Цвет(180,0,0);
			Элементы.РасчетныеЗначения.Подсказка = "Суммы документа отличаются от рассчитанных по таблице!"  + Символы.ПС + Результат.ТекстОшибки  + "Кликните по ссылке чтобы открыть документ";
			Если Документ.Статус = 2 Тогда
				Документ.Статус = 3;
			КонецЕсли;
		КонецЕсли;
		//ТекущаяСтрокаДерево.Статус= Документ.Статус;
	КонецЕсли;
	
	Для каждого Сообщ Из СтруктураПараметров.СтруктураСообщений Цикл
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = Сообщ.Значение;
		СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
		СообщениеПользователю.Сообщить();
	КонецЦикла;
	
	ВладелецФормы.ПроверитьНаСервере(ТекДокИД, ИндексСтрокиТЧ, ИмяЭлемента, ЗначениеЭлемента, СтруктураИзменяемыхРеквизитов);

	#Если НЕ ВебКлиент Тогда
		РеквизитыТЧПриАктивизацииЯчейки(Элемент);
	#КонецЕсли
	
КонецПроцедуры

// Процедура - обработчик события элемента РеквизитыТЧ "Очистка"
//
&НаКлиенте
Процедура РеквизитыТЧОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	//Если ЭтоВебКлиент Тогда
	//	ЭлементТаблица = Элементы.РеквизитыТЧ_Веб;
	//Иначе
		ЭлементТаблица = Элементы.РеквизитыТЧ;
	//КонецЕсли;

	ЭлементТаблица.ТекущиеДанные[СтрЗаменить(Элемент.Имя, "РеквизитыТЧ", "")] = "";
	РеквизитыТЧПриИзменении(ЭлементТаблица);
	
КонецПроцедуры

// Процедура - обработчик команды формы "ДобавитьПозицию".
//
&НаКлиенте
Процедура ДобавитьПозицию(Команда)
	
	Перем СтраницаДобавленныхНоменклатур;
	
	Индекс = 0;
	НоваяСтрока = ВладелецФормы.РеквизитыТЧДобавитьПозициюВызовСервера(ТекДокИД, Индекс);
	
	ТЧ = СтруктураДокумента.ТЧ;
	ТЧ.Вставить(?(Индекс = 0 ,"Стр0",("Стр" + Формат(Индекс, "ЧГ=0"))), НоваяСтрока);
	СтруктураОписанияДокумента = Неопределено;
	СтруктураОписанийДокументов.Свойство(СтруктураДокумента.ВидДокумента, СтруктураОписанияДокумента);

	СтрокиТЧ = РеквизитыТЧ.ПолучитьЭлементы();
	СопоставленнаяСтрокаРеквизитыТЧ = СтрокиТЧ.Добавить();
	СтрокиСопСтроки = СопоставленнаяСтрокаРеквизитыТЧ.ПолучитьЭлементы();
	//Если ПоказыватьИсходныеЗначения Тогда
		ИсходнаяСтрокаРеквизитыТЧ = СтрокиСопСтроки.Добавить();
		ИсходнаяСтрокаРеквизитыТЧ.ИС = 0;
		ИсходнаяСтрокаРеквизитыТЧ.ИС_Картинка = 1;
	//КонецЕсли;

	СопоставленнаяСтрокаРеквизитыТЧ.ИндексСтрокиТЧ = Индекс;
	СопоставленнаяСтрокаРеквизитыТЧ.ИС = Индекс + 1;
	Для Каждого ОписаниеРеквизита Из СтруктураОписанияДокумента.ТЧ Цикл					
		Если ОписаниеРеквизита.Отображать Тогда
			СтруктураРеквизита = НоваяСтрока[ОписаниеРеквизита.Идентификатор];
			//Если ПоказыватьИсходныеЗначения Тогда
				ИсходнаяСтрокаРеквизитыТЧ[ОписаниеРеквизита.Идентификатор] = СтруктураРеквизита.ИсходноеЗначение;
			//КонецЕсли;
			СопоставленнаяСтрокаРеквизитыТЧ[ОписаниеРеквизита.Идентификатор] = СтруктураРеквизита.ИтоговоеЗначение;
		КонецЕсли;
	КонецЦикла;
	
	//Если ЭтоВебКлиент Тогда
	//	Элементы.РеквизитыТЧ_Веб.ТекущаяСтрока = РеквизитыТЧ.Получить(РеквизитыТЧ.Количество() - 1).ПолучитьИдентификатор();
	//Иначе
		//Элементы.РеквизитыТЧ.ТекущаяСтрока = РеквизитыТЧ.Получить(РеквизитыТЧ.Строки.Количество() - 1).ПолучитьИдентификатор();
	//КонецЕсли;
	
	
КонецПроцедуры

// Процедура - обработчик команды формы "УдалитьПозицию".
//
&НаКлиенте
Процедура УдалитьПозицию(Команда)
	
	НеАктивизироватьСтроку = Истина;

	ИД = ТекДокИД;
	//Если ЭтоВебКлиент Тогда
	//	УдаляемаяПозиция = Элементы.РеквизитыТЧ_Веб.ТекущаяСтрока;
	//Иначе
		УдаляемаяПозиция = Элементы.РеквизитыТЧ.ТекущаяСтрока;
	//КонецЕсли;

	Если УдаляемаяПозиция = Неопределено Тогда
		НеАктивизироватьСтроку = Ложь;
		Возврат;
	КонецЕсли;	
	ИндексСтрокиТЧ = Элементы.РеквизитыТЧ.ТекущиеДанные.ИндексСтрокиТЧ;
	СтрокиТЧ = РеквизитыТЧ.ПолучитьЭлементы();
	//УдаляемаяСтрока = СтрокиТЧ.НайтиПоИдентификатору(УдаляемаяПозиция);
	Если УдаляемаяПозиция <> Неопределено Тогда
		//ИндексСтроки = СтрокиТЧ.Индекс(УдаляемаяПозиция);
		//Если ПоказыватьИсходныеЗначения Тогда
		//	Если НЕ УдаляемаяСтрока.ИС = 0 Тогда
		//		ИндексСтрокиТЧ = РеквизитыТЧ[ИндексСтроки + 1].ИндексСтрокиТЧ;
		//		РеквизитыТЧ.Удалить(ИндексСтроки);
		//		РеквизитыТЧ.Удалить(ИндексСтроки);
		//	Иначе
		//		ИндексСтрокиТЧ = УдаляемаяСтрока.ИндексСтрокиТЧ;
		//		РеквизитыТЧ.Удалить(ИндексСтроки - 1);
		//		РеквизитыТЧ.Удалить(ИндексСтроки - 1);
		//	КонецЕсли;
		//Иначе
			//ИндексСтрокиТЧ = СтрокиТЧ[ИндексСтроки].ИндексСтрокиТЧ;
			//РеквизитыТЧ.СтрокиТЧ(ИндексСтроки);
		//КонецЕсли;
		СтрокиТЧ.Удалить(Элементы.РеквизитыТЧ.ТекущиеДанные);
	Иначе
		Возврат;
	КонецЕсли;
	
	Документ = СтруктураДокумента;
	ТЧ = Документ.ТЧ;
	
	ТЧ.Удалить(?(ИндексСтрокиТЧ = 0 ,"Стр0",("Стр" + Формат(ИндексСтрокиТЧ, "ЧГ=0"))));	
	
	Если ТЧ.Количество() = 0 Тогда
	
		СтруктураДокумента.СтатусОбработки = "Готов к загрузке";
		ВладелецФормы.ЗаполнитьДеревоДокументов();
		Закрыть();
	Иначе
		
		й = 1;
		Для к = 0 По СтрокиТЧ.Количество() - 1 Цикл
			Строка = СтрокиТЧ.Получить(к);
			Если Строка.ИС <> 0 Тогда
				Строка.ИС = й;
				й = й + 1 ;
			КонецЕсли;
		КонецЦикла;
	 		
		// заполнение ИтоговоеПоле
		Результат = ПроверитьРасчетныеИИтоговыеЗначения(Документ, ИмяШаблона);
		Элементы.РасчетныеЗначения.Заголовок = Результат.РасчетныеЗначения;
		Если Результат.ТекстОшибки = "" Тогда
			Элементы.РасчетныеЗначения.ЦветТекста = Новый Цвет(27, 128, 45);
			Элементы.РасчетныеЗначения.Подсказка = "Суммы документа совпадают с рассчитанными по таблице!"  + Символы.ПС + "Кликните по ссылке чтобы открыть документ";
			Если Документ.Статус = 3 Тогда
				Документ.Статус = 2;
			КонецЕсли;
		Иначе
			Элементы.РасчетныеЗначения.ЦветТекста = Новый Цвет(180,0,0);
			Элементы.РасчетныеЗначения.Подсказка = "Суммы документа отличаются от рассчитанных по таблице!"  + Символы.ПС + Результат.ТекстОшибки  + "Кликните по ссылке чтобы открыть документ";
			Если Документ.Статус = 2 Тогда
				Документ.Статус = 3;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НеАктивизироватьСтроку = Ложь;
	
КонецПроцедуры

// Функция формирует строки табличного поля документа ИтоговоеПоле
//
// Параметры:
//		СтруктураПараметров - набор параметров события, тип "Структура"
//			Обязательные элементы структуры параметров: 
//		Документ, строка таблицы документов
// 
// Возвращаемое значение:
//		ИтоговоеПоле
//
&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьРасчетныеИИтоговыеЗначения(Документ, ИмяШаблона)
	
	РасчетныеЗначения = "";
	ТекстОшибки = "";
	
	ИтоговоеПоле = Новый Структура;
	ИтоговоеПоле.Вставить("Строка1", Новый Структура());
	ИтоговоеПоле.Строка1.Вставить("ИмяРеквизитаШапки", "");
	ИтоговоеПоле.Строка1.Вставить("Наименование", "");
	ИтоговоеПоле.Строка1.Вставить("ИсходноеЗначение", "Исходное значение:");
	ИтоговоеПоле.Строка1.Вставить("РасчетноеЗначение", "Расчетное значение:");
	
	СтрокаШапки = Документ.Шапка;
	
	Если НЕ Документ.ВидДокумента = "КФЛ" Тогда
		// две строки для заполнения значений Всего и ВсегоНДС
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			УчитыватьНДС = СтрокаШапки.УчитыватьНДС.СопоставленноеЗначение; 
			СуммаВключаетНДС = СтрокаШапки.СуммаВключаетНДС.ИтоговоеЗначение;			
		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			НалогообложениеНДС = СтрокаШапки.НалогообложениеНДС.ИтоговоеЗначение;
			УчитыватьНДС = (НалогообложениеНДС = "Закупка облагается НДС" ИЛИ НалогообложениеНДС = "Продажа облагается НДС");
			СуммаВключаетНДС = СтрокаШапки.ЦенаВключаетНДС.ИтоговоеЗначение;
		ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
			УчитыватьНДС = (Строка(СтрокаШапки.НалогообложениеНДС.ИтоговоеЗначение) = "Облагается (с НДС)");
			СуммаВключаетНДС = СтрокаШапки.СуммаВключаетНДС.ИтоговоеЗначение;
		ИначеЕсли ИмяШаблона = "Розница 2.2" Тогда
			УчитыватьНДС = СтрокаШапки.УчитыватьНДС.СопоставленноеЗначение;
			СуммаВключаетНДС = СтрокаШапки.ЦенаВключаетНДС.ИтоговоеЗначение;
		КонецЕсли;
		ИтоговоеПоле.Вставить("Строка2", Новый Структура());
		ИтоговоеПоле.Строка2.Вставить("ИмяРеквизитаШапки", "Всего");
		ИтоговоеПоле.Строка2.Вставить("Наименование", "Всего:");
		ИтоговоеПоле.Строка2.Вставить("ИсходноеЗначение", СтрокаШапки.Всего.ИсходноеЗначение);
		ИтоговоеПоле.Строка2.Вставить("РасчетноеЗначение", 0);
		Если УчитыватьНДС Тогда			
			ИтоговоеПоле.Вставить("Строка3", Новый Структура());
			ИтоговоеПоле.Строка3.Вставить("ИмяРеквизитаШапки", "ВсегоНДС");
			ИтоговоеПоле.Строка3.Вставить("Наименование", "НДС ( в т. ч.):");
			ИтоговоеПоле.Строка3.Вставить("ИсходноеЗначение", СтрокаШапки.ВсегоНДС.ИсходноеЗначение);
			ИтоговоеПоле.Строка3.Вставить("РасчетноеЗначение", 0);
		КонецЕсли;
		Для каждого СтруктураСтрокиТЧ Из Документ.ТЧ Цикл
			СтрокаТЧ = СтруктураСтрокиТЧ.Значение; 
			ИтоговоеПоле.Строка2.РасчетноеЗначение = ИтоговоеПоле.Строка2.РасчетноеЗначение + СтрокаТЧ.Всего.ИтоговоеЗначение;
			Если УчитыватьНДС Тогда
				ИтоговоеПоле.Строка3.РасчетноеЗначение = ИтоговоеПоле.Строка3.РасчетноеЗначение + СтрокаТЧ.СуммаНДС.ИтоговоеЗначение;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	ИтоговоеПоле.Строка2.РасчетноеЗначение = Окр(ИтоговоеПоле.Строка2.РасчетноеЗначение, 2);
	Если УчитыватьНДС Тогда
		ИтоговоеПоле.Строка3.РасчетноеЗначение = Окр(ИтоговоеПоле.Строка3.РасчетноеЗначение, 2);
	КонецЕсли;

	РасчетныеЗначения = "";
	ТекстОшибки = "";
	Для Каждого СтруктураСтрокаИтогов Из ИтоговоеПоле Цикл
		СтрокаИтогов = СтруктураСтрокаИтогов.Значение;
		Если СтрокаИтогов.Наименование = "" Тогда
			Продолжить;
		КонецЕсли;
		Если Окр(СтрокаИтогов.ИсходноеЗначение, 2) <> СтрокаИтогов.РасчетноеЗначение Тогда
			ТекстОшибки = ТекстОшибки + "Сумма " + СтрокаИтогов.Наименование + " Значение из документа - " + Окр(СтрокаИтогов.ИсходноеЗначение, 2) + "/ Расчетное значение - " + СтрокаИтогов.РасчетноеЗначение + Символы.ПС; 
		КонецЕсли;
		РасчетныеЗначения = РасчетныеЗначения + ?(РасчетныеЗначения = "", "", "/") + СтрокаИтогов.Наименование +  " " + СтрокаИтогов.РасчетноеЗначение;
	КонецЦикла;
	
	Возврат Новый Структура("ТекстОшибки, РасчетныеЗначения", ТекстОшибки, РасчетныеЗначения);
	
КонецФункции


// Процедура задает условное форматирование для колонок элемента РеквизитыТЧ 
//
&НаСервере
Процедура УстановитьУсловноеФорматированиеКолонкиРеквизитыТЧ(ИмяФорматируемойКолонки)
	
	//Статус - 2 - Зеленый - 27,128,45
	ЭлементУсловногоОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	
	//// Форматируемое поле
	//ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	//ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("РеквизитыТЧ" + ИмяФорматируемойКолонки);
	//ПолеОформления.Использование = Истина;
	//
	//// Оформление поля
	//ШрифтПоляОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	//ШрифтПоляОформления.Использование = Истина;
	//ШрифтПоляОформления.Значение = Новый Цвет(27, 128, 45);
	//
	//// Условие отбора форматирования
	//ОтборОформления = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборОформления.Использование = Истина;
	//ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	//ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыТЧ." + ИмяФорматируемойКолонки + "СтатусОтображения");
	//ОтборОформления.ПравоеЗначение = "2";
	//----
	
	//Статус - 3 - Оранжевый - 246,148,0
	ЭлементУсловногоОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	
	// Форматируемое поле
	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("РеквизитыТЧ" + ИмяФорматируемойКолонки);
	ПолеОформления.Использование = Истина;
	
	// Оформление поля
	ШрифтПоляОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ШрифтПоляОформления.Использование = Истина;
	//ШрифтПоляОформления.Значение = Новый Цвет(246, 148, 0);
	ШрифтПоляОформления.Значение = Новый Цвет(255, 102, 0);
	
	// Условие отбора форматирования
	ОтборОформления = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование = Истина;
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыТЧ." + ИмяФорматируемойКолонки + "СтатусОтображения");
	ОтборОформления.ПравоеЗначение = "3";
	//----
	
	////Статус - 4 - Зеленый - 27,128,45
	//ЭлементУсловногоОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	//
	//// Форматируемое поле
	//ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	//ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("РеквизитыТЧ" + ИмяФорматируемойКолонки);
	//ПолеОформления.Использование = Истина;
	//
	//// Оформление поля
	//ШрифтПоляОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	//ШрифтПоляОформления.Использование = Истина;
	//ШрифтПоляОформления.Значение = Новый Цвет(27, 128, 45);
	//
	//// Условие отбора форматирования
	//ОтборОформления = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборОформления.Использование = Истина;
	//ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	//ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыТЧ." + ИмяФорматируемойКолонки + "СтатусОтображения");
	//ОтборОформления.ПравоеЗначение = "4";
	//----
	
	//Статус - 5 - Синий - 28,56,141 //Статус - 5 - Оранжевый - 246,148,0
	ЭлементУсловногоОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	
	// Форматируемое поле
	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("РеквизитыТЧ" + ИмяФорматируемойКолонки);
	ПолеОформления.Использование = Истина;
	
	// Оформление поля
	ШрифтПоляОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ШрифтПоляОформления.Использование = Истина;
	//ШрифтПоляОформления.Значение = Новый Цвет(28, 56, 141);
	//ШрифтПоляОформления.Значение = Новый Цвет(246, 148, 0);
	ШрифтПоляОформления.Значение = Новый Цвет(255, 102, 0);
	
	// Условие отбора форматирования
	ОтборОформления = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование = Истина;
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыТЧ." + ИмяФорматируемойКолонки + "СтатусОтображения");
	ОтборОформления.ПравоеЗначение = "5";
	//----
	
	////Статус - 6 - Зеленый - 27,128,45
	//ЭлементУсловногоОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	//
	//// Форматируемое поле
	//ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	//ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("РеквизитыТЧ" + ИмяФорматируемойКолонки);
	//ПолеОформления.Использование = Истина;
	//
	//// Оформление поля
	//ШрифтПоляОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	//ШрифтПоляОформления.Использование = Истина;
	//ШрифтПоляОформления.Значение = Новый Цвет(27, 128, 45);
	//
	//// Условие отбора форматирования
	//ОтборОформления = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборОформления.Использование = Истина;
	//ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	//ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыТЧ." + ИмяФорматируемойКолонки + "СтатусОтображения");
	//ОтборОформления.ПравоеЗначение = "6";
	//----
	
	//Статус - 7 - Красный - 180,0,0
	ЭлементУсловногоОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	
	// Форматируемое поле
	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("РеквизитыТЧ" + ИмяФорматируемойКолонки);
	ПолеОформления.Использование = Истина;
	
	// Оформление поля
	ШрифтПоляОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ШрифтПоляОформления.Использование = Истина;
	ШрифтПоляОформления.Значение = Новый Цвет(180, 0, 0);
	
	// Условие отбора форматирования
	ОтборОформления = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование = Истина;
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыТЧ." + ИмяФорматируемойКолонки + "СтатусОтображения");
	ОтборОформления.ПравоеЗначение = "7";
	//----
	
	////Статус - 8 - Фиолетовый - 87,29,143
	//ЭлементУсловногоОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	//
	//// Форматируемое поле
	//ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	//ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("РеквизитыТЧ" + ИмяФорматируемойКолонки);
	//ПолеОформления.Использование = Истина;
	//
	//// Оформление поля
	//ШрифтПоляОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	//ШрифтПоляОформления.Использование = Истина;
	//ШрифтПоляОформления.Значение = Новый Цвет(87, 29, 143);
	//
	//// Условие отбора форматирования
	//ОтборОформления = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборОформления.Использование = Истина;
	//ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	//ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыТЧ." + ИмяФорматируемойКолонки + "СтатусОтображения");
	//ОтборОформления.ПравоеЗначение = "8";
	//----
	
	//Статус - 9 - Красный - 180,0,0
	ЭлементУсловногоОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	
	// Форматируемое поле
	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("РеквизитыТЧ" + ИмяФорматируемойКолонки);
	ПолеОформления.Использование = Истина;
	
	// Оформление поля
	ШрифтПоляОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ШрифтПоляОформления.Использование = Истина;
	ШрифтПоляОформления.Значение = Новый Цвет(180, 0, 0);
	
	// Условие отбора форматирования
	ОтборОформления = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование = Истина;
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыТЧ." + ИмяФорматируемойКолонки + "СтатусОтображения");
	ОтборОформления.ПравоеЗначение = "9";
	//----
	
	////Статус - А - Зеленый - 27,128,45
	//ЭлементУсловногоОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	//
	//// Форматируемое поле
	//ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	//ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("РеквизитыТЧ" + ИмяФорматируемойКолонки);
	//ПолеОформления.Использование = Истина;
	//
	//// Оформление поля
	//ШрифтПоляОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	//ШрифтПоляОформления.Использование = Истина;
	//ШрифтПоляОформления.Значение = Новый Цвет(27, 128, 45);
	//
	//// Условие отбора форматирования
	//ОтборОформления = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборОформления.Использование = Истина;
	//ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	//ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыТЧ." + ИмяФорматируемойКолонки + "СтатусОтображения");
	//ОтборОформления.ПравоеЗначение = "А";
	//----
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗакрытиеБезСохранения Тогда
		СохранитьИзменения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения()
	
	СтрокаШапки = СтруктураДокумента.Шапка;
	
	Если СтруктураДокумента.ВидДокумента = "КФЛ" Тогда
		СтрокаШапки.Фамилия.ИтоговоеЗначение = ПаспортФамилия;
		СтрокаШапки.Имя.ИтоговоеЗначение = ПаспортИмя;
		СтрокаШапки.Отчество.ИтоговоеЗначение = ПаспортОтчество;
		СтрокаШапки.ДатаРождения.ИтоговоеЗначение = ПаспортДатаРождения;
		СтрокаШапки.МестоРождения.ИтоговоеЗначение = ПаспортМестоРождения;
		СтрокаШапки.Пол.ИтоговоеЗначение = ПаспортПол;
		СтрокаШапки.ИНН.ИтоговоеЗначение = ПаспортИНН;
		СтрокаШапки.СерияПаспорта.ИтоговоеЗначение = ПаспортСерия;
		СтрокаШапки.НомерПаспорта.ИтоговоеЗначение = ПаспортНомер;
		СтрокаШапки.ДатаВыдачи.ИтоговоеЗначение = ПаспортДатаВыдачи;
		СтрокаШапки.КодПодразделения.ИтоговоеЗначение = ПаспортКодПодразделения;
	Иначе
		СтрокаШапки.Контрагент.ИтоговоеЗначение = ДокументКонтрагент;
		Если СтрокаШапки.Свойство("ДоговорКонтрагента") Тогда
			СтрокаШапки.ДоговорКонтрагента.ИтоговоеЗначение = ДокументДоговор;
		ИначеЕсли СтрокаШапки.Свойство("Договор") Тогда
			СтрокаШапки.Договор.ИтоговоеЗначение = ДокументДоговор;
		ИначеЕсли СтрокаШапки.Свойство("Соглашение") Тогда
			СтрокаШапки.Соглашение.ИтоговоеЗначение = ДокументДоговор;
		КонецЕсли;
		СтрокаШапки.Организация.ИтоговоеЗначение = ДокументОрганизация;
		Если СтруктураДокумента.Свойство("Склад") Тогда
			СтрокаШапки.Склад.ИтоговоеЗначение = ДокументСклад;
		КонецЕсли;
		СтрокаШапки.ДатаВходящегоДокумента.ИтоговоеЗначение = ДокументДатаВходящего;
		СтрокаШапки.Дата.ИтоговоеЗначение = ДокументДата;
		СтрокаШапки.НомерВходящегоДокумента.ИтоговоеЗначение = ДокументНомер;
		Если Элементы.ГруппаПП.Видимость Тогда
			СтрокаШапки.Всего.ИтоговоеЗначение = Всего;
			Если СтрокаШапки.Свойство("СуммаДокумента") Тогда
				СтрокаШапки.СуммаДокумента.ИтоговоеЗначение = Всего;
			КонецЕсли;
			СтрокаШапки.СтавкаНДС.ИтоговоеЗначение = ДокументСтавкаНДС;
			СтрокаШапки.СуммаНДС.ИтоговоеЗначение = ДокументСуммаНДС;
			Если ТипЗнч(ДокументСчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				СтрокаШапки.СчетКонтрагента.ИтоговоеЗначение = ДокументСчетКонтрагента;   
			КонецЕсли;
			//СтрокаШапки.БанковскийСчет.ИтоговоеЗначение = ДокументСчетОрганизации;
		КонецЕсли;
	КонецЕсли;
	
	МассивДокументов = ВладелецФормы.ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ТекДокИД, 1)) ;
	Если МассивДокументов.Количество() > 0 Тогда
		Документ = МассивДокументов[0];
	КонецЕсли;
	Если Документ <> Неопределено Тогда
		Для Каждого Элемент Из СтруктураДокумента Цикл
			Документ[Элемент.Ключ] = Элемент.Значение;	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьДокумент(Команда)
	
	СтруктураДокумента.ОткрытьПослеЗагрузки = Истина;
	СохранитьИзменения();
	ВладелецФормы.ПолучитьДокументы(Истина, ТекДокИД);
	ЗакрытиеБезСохранения = Истина;
	//ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура НДСвхождениеНажатие(Элемент)
	ПараметрыДляПередачи = Новый Структура("СтруктураДокумента, ИмяКоманды", СтруктураДокумента, "Команда2");
	ФормаДопРеквизитов = ПолучитьФорму(ВладелецФормы.ПрефиксИмениФорм + "УпрФормаДопРеквизитов", ПараметрыДляПередачи, ЭтаФорма);
	ФормаДопРеквизитов.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаДопРеквизитов.Заголовок = "Цены и валюты";
	ФормаДопРеквизитов.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	ТекстВопроса = "Получить документ повторно с выбранной настройкой?";
	Оповещение = Новый ОписаниеОповещения("ВидДокументаОбработкаВыбораОтветНаВопрос", ЭтаФорма, ДокументТип);
	ПоказатьВопрос(Оповещение, "Получить документ повторно с выбранной настройкой?", РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да, "Изменить вид создаваемого документа");

КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаОбработкаВыбораОтветНаВопрос(Ответ, ВидДокумента) Экспорт
	 	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИД = ТекДокИД;
	МассивДокументов = ВладелецФормы.ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка",ИД, 1));
	Если МассивДокументов.Количество() > 0 Тогда
		Документ = МассивДокументов[0];
	КонецЕсли;

	Если Документ <> Неопределено Тогда
		
		Исходящий = Найти(ВидДокумента, "Исходящий_") = 1;
		Если Исходящий Тогда
			ВидПовторно = СтрЗаменить(ВидДокумента, "Исходящий_", "");
		Иначе
			ВидПовторно = СтрЗаменить(ВидДокумента, "Входящий_", "");	
		КонецЕсли;
		БазаДанныхИД = Документ.БазаДанныхИД;
		Дата = Документ.Дата;
		ДатаСоздания = Документ.ДатаСоздания;
		Комментарий = Документ.Комментарий;
		Контрагент = Документ.Контрагент;
		Номер = Документ.Номер;
		Организация = Документ.Организация;
		ПолныйПутьКФайлу = Документ.ПолныйПутьКФайлу;
		СсылкаДокумент = Документ.СсылкаДокумент;
		СсылкаИД = Документ.СсылкаИД;
		СсылкаТип = Документ.СсылкаТип;
		СтараяВерсия = Документ.СтараяВерсия;
		СтраницаИД = Документ.СтраницаИД;
		СтраницаНомер = Документ.СтраницаНомер;
		Сумма = Документ.Сумма;
		Тип = Документ.Тип;
		ТипРаспознан = Документ.ТипРаспознан;
		ТипФайла = Документ.ТипФайла;
		ЭтоСделка = Документ.ЭтоСделка;
		Атрибутирован = Документ.Атрибутирован;
		Загрузить = Ложь;
		
		ВладелецФормы.ТаблицаДанных.Удалить(Документ);
		
		СтрокаДокумента = ВладелецФормы.ТаблицаДанных.Добавить();	
		СтрокаДокумента.БазаДанныхИД = БазаДанныхИД;
		СтрокаДокумента.Дата = Дата;
		СтрокаДокумента.ДатаСоздания = ДатаСоздания;
		СтрокаДокумента.ДокументИД = ИД;
		СтрокаДокумента.Исходящий = Исходящий;
		СтрокаДокумента.Комментарий = Комментарий;
		СтрокаДокумента.Контрагент = Контрагент;
		СтрокаДокумента.Номер = Номер;
		СтрокаДокумента.Организация = Организация;
		СтрокаДокумента.ПолныйПутьКФайлу = ПолныйПутьКФайлу;
		СтрокаДокумента.СтараяВерсия = СтараяВерсия;
		СтрокаДокумента.СтраницаИД = СтраницаИД;
		СтрокаДокумента.СтраницаНомер = СтраницаНомер;
		СтрокаДокумента.Сумма = Сумма;
		СтрокаДокумента.Тип = Тип;
		СтрокаДокумента.ТипРаспознан = ТипРаспознан;
		СтрокаДокумента.ТипФайла = ТипФайла;
		СтрокаДокумента.ЭтоСделка = ЭтоСделка;
		СтрокаДокумента.Атрибутирован = Атрибутирован;
		СтрокаДокумента.Загрузить = Загрузить;
		СтрокаДокумента.ВидПовторно = ВидПовторно;
		
		ВладелецФормы.МассивГотовых.Добавить(ИД);
		
		ЗакрытиеБезСохранения = истина;
		ЭтаФорма.Закрыть();

		ВладелецФормы.ПолучитьГотовыеНаКлиенте();	
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция НачалоВыбораИзСписка(ИмяЭлемента)
	
	СтруктураОписанияДокумента = Неопределено;
	СтруктураОписанийДокументов.Свойство(СтруктураДокумента.ВидДокумента, СтруктураОписанияДокумента);
	ШапкаДокумента = СтруктураОписанияДокумента.Шапка;
	Шапка = СтруктураДокумента.Шапка;
	ОписаниеРеквизита = ВладелецФормы.НайтиВМассивеСтруктур(ШапкаДокумента, ИмяЭлемента, "Идентификатор");
	
	Если СтруктураДокумента.Шапка.Свойство(ИмяЭлемента) Тогда
		Если НЕ ЗначениеЗаполнено(СтруктураДокумента.Шапка[ИмяЭлемента].ВариантыПодбора) Тогда
			ДанныеКонтрагента = "";
			ПоискПоНаименованиеПолное = Ложь;
			Если ИмяЭлемента = "Контрагент" Тогда
				ПоискПоНаименованиеПолное = Истина;
			КонецЕсли;
			ВариантыПодбора = ВладелецФормы.ЗаполнитьВариантыПодбораСпискаВыбора(ВладелецФормы.ESDLТаблицаВариантовНечеткогоПоиска, ОписаниеРеквизита, СтруктураДокумента.Шапка, ВладелецФормы.ТаблицаДанных, СтруктураДокумента.ДокументИД, ДанныеКонтрагента, Ложь, ПоискПоНаименованиеПолное, ВладелецФормы.ESDLСтруктураОПФ, ИмяШаблона);
			
			Если ЗначениеЗаполнено(Шапка[ОписаниеРеквизита.Идентификатор].ИтоговоеЗначение) И ТипЗнч(Шапка[ОписаниеРеквизита.Идентификатор].ИтоговоеЗначение) = Тип("Строка") Тогда
				СтрокаПоиска = СокрЛП(Шапка[ОписаниеРеквизита.Идентификатор].ИтоговоеЗначение);
			Иначе
				СтрокаПоиска = СокрЛП(Шапка[ОписаниеРеквизита.Идентификатор].ИсходноеЗначение);
			КонецЕсли;
			Если ОписаниеРеквизита.Владелец <> "" Тогда
				Владелец = Шапка[ОписаниеРеквизита.Владелец].ИтоговоеЗначение;
			Иначе
				Владелец = "";
			КонецЕсли;
			НоваяСтрокаВариантов = ВладелецФормы.ESDLТаблицаВариантовНечеткогоПоиска.Добавить();
			НоваяСтрокаВариантов.Идентификатор = ОписаниеРеквизита.Идентификатор;
			НоваяСтрокаВариантов.ВидСправочника = ОписаниеРеквизита.Вид;
			НоваяСтрокаВариантов.СтрокаПоиска = СтрокаПоиска;
			НоваяСтрокаВариантов.Владелец = Владелец;
			НоваяСтрокаВариантов.СписокВариантов = ВариантыПодбора;
			
			СтруктураДокумента.Шапка[ИмяЭлемента].Вставить("ВариантыПодбора", ВариантыПодбора);
		КонецЕсли;
		Если СтруктураДокумента.Шапка[ИмяЭлемента].ВариантыПодбора <> Неопределено Тогда 
			СписокВыбораДляЭлемента = СтруктураДокумента.Шапка[ИмяЭлемента].ВариантыПодбора;
		КонецЕсли;
	КонецЕсли;

	Возврат  СписокВыбораДляЭлемента;
		
КонецФункции

&НаКлиенте
Процедура КонтрагентНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокВыбораДляЭлемента = НачалоВыбораИзСписка("Контрагент");
	Если СписокВыбораДляЭлемента.Количество() > 0 Тогда	
		Для Каждого Элем Из СписокВыбораДляЭлемента Цикл
			Элементы.РеквизитыШапки.ТекущийЭлемент.СписокВыбора.Добавить(Элем.Значение, Элем.Представление);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Если СтруктураДокумента.Шапка.Свойство("ДоговорКонтрагента") Тогда
		ИмяЭлемента = "ДоговорКонтрагента";
	ИначеЕсли СтруктураДокумента.Шапка.Свойство("Договор") Тогда
		ИмяЭлемента = "Договор";
	ИначеЕсли СтруктураДокумента.Шапка.Свойство("Соглашение") Тогда
		ИмяЭлемента = "Соглашение";
	КонецЕсли;
	
	НачалоВыбораИзСписка(ИмяЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументСкладНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораИзСписка("Склад");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументСкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораИзСписка("Склад");
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.Контрагент.СписокВыбора.Количество() = 0 Тогда
		СписокВыбораДляЭлемента = НачалоВыбораИзСписка("Контрагент");
		Если СписокВыбораДляЭлемента.Количество() > 0 Тогда	
			Для Каждого Элем Из СписокВыбораДляЭлемента Цикл
				Элементы.Контрагент.СписокВыбора.Добавить(Элем.Значение, Элем.Представление);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораИзСписка("ДоговорКонтрагента");
КонецПроцедуры

&НаКлиенте
Процедура РеквизитШапкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;	
	ИД = ТекДокИД;
	
	ИмяЭлемента = Элемент.Имя;
	Если ИмяЭлемента = "ДоговорКонтрагента" Тогда
		Если СтруктураДокумента.Шапка.Свойство("ДоговорКонтрагента") Тогда
			ИмяЭлемента = "ДоговорКонтрагента";
		ИначеЕсли СтруктураДокумента.Шапка.Свойство("Договор") Тогда
			ИмяЭлемента = "Договор";
		ИначеЕсли СтруктураДокумента.Шапка.Свойство("Соглашение") Тогда
			ИмяЭлемента = "Соглашение";
		КонецЕсли;	
	КонецЕсли;

	СтароеЗначение = СтруктураДокумента.Шапка[ИмяЭлемента].ИтоговоеЗначение;
	
	Документ = СтруктураДокумента;
	СтрокаШапки = СтруктураДокумента.Шапка;
	Реквизит = СтрокаШапки[ИмяЭлемента];
	
	СтруктураОписанияДокумента = Неопределено;
	СтруктураОписанийДокументов.Свойство(Документ.ВидДокумента, СтруктураОписанияДокумента);
	ОписаниеРеквизита = ВладелецФормы.НайтиВМассивеСтруктур(СтруктураОписанияДокумента.Шапка, ИмяЭлемента, "Идентификатор");	
	
	ТипРеквизита = ОписаниеРеквизита.Тип;
	ВидРеквизита = ОписаниеРеквизита.Вид;
	
	// определение владельца
	ВладелецИмя = ОписаниеРеквизита.Владелец;
	ВладелецЗначение = Неопределено;
	Если ЗначениеЗаполнено(ВладелецИмя) Тогда
		СтрокаВладельца = СтрокаШапки[ВладелецИмя];
		ВладелецЗначение = СтрокаВладельца.ИтоговоеЗначение;
	КонецЕсли;
		
	Если ВыбранноеЗначение = "Обновить" Тогда
		ДанныеКонтрагента = "";
		ПоискПоНаименованиеПолное = Ложь;
		Если ИмяЭлемента = "Контрагент" Тогда
			ПоискПоНаименованиеПолное = Истина;
		КонецЕсли;
		СписокВыбораДляЭлемента = ВладелецФормы.ЗаполнитьВариантыПодбораСпискаВыбора(ВладелецФормы.ESDLТаблицаВариантовНечеткогоПоиска,  ОписаниеРеквизита, СтрокаШапки, ВладелецФормы.ТаблицаДанных, ИД, ДанныеКонтрагента, Истина, ПоискПоНаименованиеПолное, ВладелецФормы.ESDLСтруктураОПФ, ИмяШаблона);
		
		Данные = СтрокаШапки;
		Если ЗначениеЗаполнено(Данные[ОписаниеРеквизита.Идентификатор].ИтоговоеЗначение) И ТипЗнч(Данные[ОписаниеРеквизита.Идентификатор].ИтоговоеЗначение) = Тип("Строка") Тогда
			СтрокаПоиска = СокрЛП(Данные[ОписаниеРеквизита.Идентификатор].ИтоговоеЗначение);
		Иначе
			СтрокаПоиска = СокрЛП(Данные[ОписаниеРеквизита.Идентификатор].ИсходноеЗначение);
		КонецЕсли;
		Если ОписаниеРеквизита.Владелец <> "" Тогда
			Владелец = Данные[ОписаниеРеквизита.Владелец].ИтоговоеЗначение;
		Иначе
			Владелец = "";
		КонецЕсли;
		НоваяСтрокаВариантов = ВладелецФормы.ESDLТаблицаВариантовНечеткогоПоиска.Добавить();
		НоваяСтрокаВариантов.Идентификатор = ОписаниеРеквизита.Идентификатор;
		НоваяСтрокаВариантов.ВидСправочника = ОписаниеРеквизита.Вид;
		НоваяСтрокаВариантов.СтрокаПоиска = СтрокаПоиска;
		НоваяСтрокаВариантов.Владелец = Владелец;
		НоваяСтрокаВариантов.СписокВариантов = СписокВыбораДляЭлемента ;
		
		Реквизит.ВариантыПодбора = СписокВыбораДляЭлемента;
		
	КонецЕсли;
	
	Если ВыбранноеЗначение = "Открыть" Тогда
		Если ТипРеквизита = "СправочникСсылка" Тогда
			ПараметрыФормыВыбора = Новый Структура("РежимВыбора", Истина);
			ФормаВыбора = ПолучитьФорму("Справочник." + ВидРеквизита + ".ФормаВыбора", ПараметрыФормыВыбора, Элемент);
		ИначеЕсли ТипРеквизита = "ПланСчетовСсылка" Тогда
			ФормаВыбора = ПолучитьФорму("ПланСчетов." + ВидРеквизита + ".ФормаВыбора", , Элемент);
		КонецЕсли;

		Если ИмяЭлемента = "Контрагент" Тогда
			Если НЕ ИмяШаблона = "УправлениеНебольшойФирмой 1.6" И НЕ ИмяШаблона = "Розница 2.2" Тогда
				ФормаВыбора.ПодчиненныеЭлементы.Список.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "СчетКонтрагента" Тогда
			Если ТипЗнч(ВладелецЗначение) <> Тип("СправочникСсылка.Контрагенты") Тогда
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = "Не выбран контрагент из базы";
				СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
				СообщениеПользователю.Сообщить();
				Возврат;
			Иначе
				ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
				ЭлементОтбора.ПравоеЗначение = СтрокаШапки.Контрагент.ИтоговоеЗначение;
				ЭлементОтбора.Использование = Истина;
			КонецЕсли;
			//ОтборОрганизация = СтрокаШапки.Контрагент.ИтоговоеЗначение;
			Отбор = Новый Структура("Владелец", СтрокаШапки.Контрагент.ИтоговоеЗначение);
			ПараметрыФормыВыбора = Новый Структура("РежимВыбора, Отбор", Истина, Отбор);
			ФормаВыбора = ПолучитьФорму("Справочник." + ВидРеквизита + ".ФормаВыбора", ПараметрыФормыВыбора, Элемент);

		ИначеЕсли ИмяЭлемента = "ДоговорКонтрагента" ИЛИ ИмяЭлемента = "Договор" ИЛИ ИмяЭлемента = "СоглашенияСКлиентами" Тогда
			Если ТипЗнч(ВладелецЗначение) <> Тип("СправочникСсылка.Контрагенты") Тогда
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = "Не выбран контрагент из базы";
				СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
				СообщениеПользователю.Сообщить();
				Возврат;
			Иначе
				ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
				ЭлементОтбора.ПравоеЗначение = СтрокаШапки.Организация.ИтоговоеЗначение;
				ЭлементОтбора.Использование = Истина;
				
				Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
					ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидДоговора");
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					ЭлементОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
					ЭлементОтбора.ПравоеЗначение =  СтрокаШапки.ВидДоговора.ИтоговоеЗначение;
					ЭлементОтбора.Использование = Истина;
					ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					ЭлементОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
					ЭлементОтбора.ПравоеЗначение = СтрокаШапки.Контрагент.ИтоговоеЗначение;
					ЭлементОтбора.Использование = Истина;

				ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда 					
					ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент");
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					ЭлементОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
					ЭлементОтбора.ПравоеЗначение = СтрокаШапки.Контрагент.ИтоговоеЗначение;
					ЭлементОтбора.Использование = Истина;
					Если НЕ ИмяЭлемента = "СоглашенияСКлиентами" Тогда
						ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипДоговора");
						ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
						ЭлементОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
						ЭлементОтбора.ПравоеЗначение =  СтрокаШапки.ТипДоговора.ИтоговоеЗначение;
						ЭлементОтбора.Использование = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ФормаВыбора.Открыть();
		ВыбранноеЗначение = СтароеЗначение;
		
	ИначеЕсли ВыбранноеЗначение = "Обновить" Тогда
		
		Элемент.СписокВыбора.Очистить();	
		Для Каждого Элем Из СписокВыбораДляЭлемента Цикл
			Элемент.СписокВыбора.Добавить(Элем.Значение, Элем.Представление);
		КонецЦикла;

		//ОписаниеОповещения = Новый ОписаниеОповещения("РеквизитШапкиВыполнитьПослеВыбора", ЭтаФорма, Элемент);
		//ПоказатьВыборИзСписка(ОписаниеОповещения, Элемент.СписокВыбора, Элемент);
		ВыбранноеЗначение = СтароеЗначение;
		
	Иначе
		Если ВыбранноеЗначение <> Неопределено И ВыбранноеЗначение <> СтароеЗначение Тогда
			СтруктураДокумента.Шапка[ИмяЭлемента].ИтоговоеЗначение = ВыбранноеЗначение;
			Если ИмяЭлемента = "Контрагент" Тогда
				ДокументКонтрагент = ВыбранноеЗначение;
				Элементы.СоздатьКонтрагента.Видимость = Ложь;
				Элементы.Контрагент.ЦветТекста = Новый Цвет(51,51,51);

				РеквизитШапкиОбработкаВыбора(Элементы.ДоговорКонтрагента, "Обновить", СтандартнаяОбработка);
			ИначеЕсли ИмяЭлемента = "СчетКонтрагента" Тогда
				ДокументСчетКонтрагента = ВыбранноеЗначение;
				Элементы.СчетКонтрагента.ЦветТекста = Новый Цвет(51,51,51);
			ИначеЕсли ИмяЭлемента = "Склад" Тогда
				ДокументСклад = ВыбранноеЗначение;
			ИначеЕсли ИмяЭлемента = "Организация" Тогда
				ДокументОрганизация = ВыбранноеЗначение;
			ИначеЕсли ИмяЭлемента = "ДоговорКонтрагента" ИЛИ ИмяЭлемента = "Соглашение" ИЛИ ИмяЭлемента = "Договор" Тогда
				ДокументДоговор = ВыбранноеЗначение;
			КонецЕсли;
			
			Если (ИмяЭлемента = "Склад" ИЛИ ИмяЭлемента = "Организация") И НЕ Документ.ВидДокумента = "СП" Тогда
				
				СохранитьИзменения();
					
				СтруктураИзменяемыхРеквизитов = Новый Структура;
				СтруктураИзменяемыхРеквизитов.Вставить(ИмяЭлемента, Новый Структура("ЗначениеЭлемента, СпособСопоставления", Реквизит.ИтоговоеЗначение, Реквизит.СпособСопоставления));
				
				СтруктураПараметров = Новый Структура("Документ, ИмяЭлемента, ЗначениеЭлемента, СтруктураИзменяемыхРеквизитов", 
				Документ, ИмяЭлемента, ВыбранноеЗначение, СтруктураИзменяемыхРеквизитов);
				
				ВладелецФормы.РеквизитыШапкиПриИзмененииШаблон(СтруктураПараметров);
				СтруктураСтрокТЧ = Неопределено;
				Если СтруктураПараметров.Свойство("СтруктураСтрокТЧ", СтруктураСтрокТЧ) Тогда
					СтрокиТЧ = РеквизитыТЧ.ПолучитьЭлементы();
					Для Каждого Строка Из СтрокиТЧ Цикл
						ИндексСтроки = СтрокиТЧ.Индекс(Строка);
						Для каждого СтруктураРеквизита Из СтруктураСтрокТЧ["Строка" + ИндексСтроки] Цикл
							Для каждого СтруктураРеквизитаЗнач Из СтруктураРеквизита.Значение Цикл
								Строка[СтруктураРеквизитаЗнач.Ключ] = СтруктураРеквизитаЗнач.Значение;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДокумента(Команда)
	
	ВладелецФормы.ОткрытьФайлДокумента(ТекДокИД);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыТЧПередСворачиванием(Элемент, Строка, Отказ)
	
	Если Не Элементы.РеквизитыТЧ.ТекущиеДанные = Неопределено Тогда
		НоваяСтрокаСтатистики                       = ВладелецФормы.ТЗПоказателиРаботы.Добавить();
		НоваяСтрокаСтатистики.DateTime              = ТекущаяДата();
		НоваяСтрокаСтатистики.EventName             = "Действия пользователя";
		//Ресурсы
		НоваяСтрокаСтатистики.User1C                = ВладелецФормы.ПользовательИнфБазы;
		НоваяСтрокаСтатистики.ConfigurationVersion  = ВладелецФормы.ВерсияКонфигурации;
		НоваяСтрокаСтатистики.ConfigurationName     = ВладелецФормы.МетаданныеИмя;
		НоваяСтрокаСтатистики.ClientName            = "ESDL";
		НоваяСтрокаСтатистики.ClientVersion         = ВладелецФормы.ВерсияПрограммы;
		НоваяСтрокаСтатистики.AccauntDataBaseID		= ВладелецФормы.ИДБазыДанныхПользователя;
		//Реквизиты
		НоваяСтрокаСтатистики.StatisticalDataName0  = "Свернута строка номер";
		НоваяСтрокаСтатистики.StatisticalDataValue0 = Элементы.РеквизитыТЧ.ТекущиеДанные.ИС;
		НоваяСтрокаСтатистики.StatisticalDataName1  = "ДокументИД";
		НоваяСтрокаСтатистики.StatisticalDataValue1 = ТекДокИД;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыТЧПередРазворачиванием(Элемент, Строка, Отказ)
	
	Если Не Элементы.РеквизитыТЧ.ТекущиеДанные = Неопределено Тогда
		НоваяСтрокаСтатистики                       = ВладелецФормы.ТЗПоказателиРаботы.Добавить();
		НоваяСтрокаСтатистики.DateTime              = ТекущаяДата();
		НоваяСтрокаСтатистики.EventName             = "Действия пользователя";
		//Ресурсы
		НоваяСтрокаСтатистики.User1C                = ВладелецФормы.ПользовательИнфБазы;
		НоваяСтрокаСтатистики.ConfigurationVersion  = ВладелецФормы.ВерсияКонфигурации;
		НоваяСтрокаСтатистики.ConfigurationName     = ВладелецФормы.МетаданныеИмя;
		НоваяСтрокаСтатистики.ClientName            = "ESDL";
		НоваяСтрокаСтатистики.ClientVersion         = ВладелецФормы.ВерсияПрограммы;
		НоваяСтрокаСтатистики.AccauntDataBaseID		= ВладелецФормы.ИДБазыДанныхПользователя;
		//Реквизиты
		НоваяСтрокаСтатистики.StatisticalDataName0  = "Развёрнута строка номер";
		НоваяСтрокаСтатистики.StatisticalDataValue0 = Элементы.РеквизитыТЧ.ТекущиеДанные.ИС;
		НоваяСтрокаСтатистики.StatisticalDataName1  = "ДокументИД";
		НоваяСтрокаСтатистики.StatisticalDataValue1 = ТекДокИД;
	КонецЕсли;
	
КонецПроцедуры






