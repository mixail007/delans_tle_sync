//&НаКлиенте
//Перем МассивПоисковыхЗапросов, МассивВерныхРезультатов, МассивНеВерныхРезультатов; //Запросы, ВерныеРезультатыЗапросов, НеВерныеРезультатыЗапросов;

&НаСервереБезКонтекста
// Функция вычисляет процент вхождения одной строки в другую
//
// Параметры: 
// 		СтрокаПоиска - строка, для которой вычисляется процент вхождения в другую строку
// 		Строка - строка, процент вхождения в которую нужно вычислить
//
// Возвращаемое значение:
// 		Процент вхождения одной строки в другую
//
Функция ПодсчитатьПроцентВхождения(Знач СтрокаПоиска, Знач Строка, Знач ESDLСтруктураОПФ) 
	
	КвоВхождений = 0;
	КвоВхождений2 = 0;
	СтепеньСовпадения = 0;
	
	СтрокаПоиска = СокрЛП(ВРЕГ(СтрокаПоиска));
	Строка = СокрЛП(ВРЕГ(Строка));

	Если ESDLСтруктураОПФ <> Неопределено Тогда
		Для Каждого СтрокаОПФ Из ESDLСтруктураОПФ Цикл
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, СтрокаОПФ.КраткоОПФ, "");
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, СтрокаОПФ.ПолностьюОПФ, "");
			Строка = СтрЗаменить(Строка, СтрокаОПФ.КраткоОПФ, "");
			Строка = СтрЗаменить(Строка, СтрокаОПФ.ПолностьюОПФ, "");
		КонецЦикла;
	КонецЕсли;
	
	СтрокаПоиска = СтрЗаменить(СтрокаПоиска, """", "");
	Строка = СтрЗаменить(Строка, """", "");
	
	ДлинаВ = СтрДлина(Строка);
	Если ДлинаВ > 100 Тогда
		ДлинаПодстрокиНач = 3;
	ИначеЕсли ДлинаВ > 50 Тогда
		ДлинаПодстрокиНач = 2;
	Иначе
		ДлинаПодстрокиНач = 1;
	КонецЕсли;
 
	Если НЕ (СтрДлина(СтрокаПоиска) = 0 ИЛИ СтрДлина(Строка) = 0) Тогда
		
		Для ДлинаПодстроки = ДлинаПодстрокиНач По 3 Цикл
			
			НачНомерПодстроки = 1;
			НомерСимвола = 0;
			Пока НомерСимвола + ДлинаПодстроки <= СтрДлина(Строка) Цикл
				Подстрока = СРЕД(Строка, НачНомерПодстроки, ДлинаПодстроки);
				Если Найти(СтрокаПоиска, Подстрока) > 0 Тогда
					КвоВхождений2=КвоВхождений2 + 1;
				КонецЕсли;
				КвоВхождений = КвоВхождений + 1;
				НачНомерПодстроки = НачНомерПодстроки + 1;
				НомерСимвола = НомерСимвола + 1;
			КонецЦикла;
			
			НачНомерПодстроки = 1;
			НомерСимвола = 0;
			Пока НомерСимвола + ДлинаПодстроки <= СтрДлина(СтрокаПоиска) Цикл
				Подстрока = СРЕД(СтрокаПоиска, НачНомерПодстроки, ДлинаПодстроки);
				Если Найти(Строка, Подстрока) <> 0 Тогда
					КвоВхождений2=КвоВхождений2 + 1;
				КонецЕсли;
				КвоВхождений = КвоВхождений + 1;
				НачНомерПодстроки = НачНомерПодстроки + 1;
				НомерСимвола = НомерСимвола + 1;
			КонецЦикла;
			
		КонецЦикла;

	КонецЕсли;

	Если КвоВхождений > 0 Тогда
		Результат = ?(КвоВхождений>КвоВхождений2, Окр((КвоВхождений2/КвоВхождений)*100),Окр((КвоВхождений/КвоВхождений2)*100));
		Результат = ?(Результат = 100 И КвоВхождений<>КвоВхождений2, 99, Результат);
	Иначе
		Результат = 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


// Функция нечеткого поиска элементов справочников
//
&НаСервереБезКонтекста
Функция ЗаполнитьХешДляНечеткогоСравнения(Вид, СтрокаПоиска, Владелец = Неопределено, МетодПоиска = "Наименование", СписокГрупп = Неопределено, ВариантПоискаСтарый = Ложь, ЛогПоиска) Экспорт

	ВестиЛог = Истина;
	
	СтрокаВ = ВРег(СтрЗаменить(СтрокаПоиска, """", ""));
	ДлинаВ = СтрДлина(СтрокаВ);
	Список = Новый СписокЗначений;
	
	// Масленников Е. (
	Если ВариантПоискаСтарый Тогда
		Если ДлинаВ > 100 Тогда
			ДлинаПодстроки = 10;
		ИначеЕсли ДлинаВ > 5 Тогда
			ДлинаПодстроки = 5;
		ИначеЕсли ДлинаВ > 2 Тогда
			ДлинаПодстроки = 2;
		Иначе
			ДлинаПодстроки = ДлинаВ;
		КонецЕсли;
	Иначе
		Если ДлинаВ > 100 Тогда
			ДлинаПодстроки = 10; 
		ИначеЕсли ДлинаВ > 50 Тогда
			ДлинаПодстроки = 5;
		ИначеЕсли ДлинаВ > 28 Тогда
			ДлинаПодстроки = 4;
		ИначеЕсли ДлинаВ > 12 Тогда
			ДлинаПодстроки = 3;
		ИначеЕсли ДлинаВ > 2 Тогда
			ДлинаПодстроки = 2;
		Иначе
			ДлинаПодстроки = ДлинаВ;
		КонецЕсли;
	КонецЕсли;	
	// ) Масленников Е.
	
	Для ПозСтрВ = 1 По ДлинаВ-ДлинаПодстроки + 1 Цикл
		ПодстрокаВ = Сред(СтрокаВ, ПозСтрВ, ДлинаПодстроки);
		Список.Добавить(ПодстрокаВ);
	КонецЦикла; 
		
	длиннаСписка = Список.Количество() - 1;
	ДлинаСтроки = Метаданные.Справочники[Вид].ДлинаНаименования;
	Если ДлинаСтроки = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	//Проверка нужен ли поиск только в заданных группах
	Если СписокГрупп <> Неопределено Тогда
		ВИерархии = "И ИсходныйСправочник.Ссылка В ИЕРАРХИИ (&СписокГрупп)";
	Иначе
		ВИерархии = "";
	КонецЕсли;	
	//Проверка является ли справочник иерархическим
	Иерархический = ?(Метаданные.Справочники[Вид].Иерархический И Метаданные.Справочники[Вид].ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов, Истина, Ложь);
	Если Иерархический Тогда
		НЕГруппа = "И НЕ ИсходныйСправочник.ЭтоГруппа";
	Иначе
		НЕГруппа = "";
	КонецЕсли;
	//Проверка на наличие реквизита "Владелец" у справочника
	ОтборПоВладельцу = "";
	Если Метаданные.Справочники[Вид].Владельцы.Количество() > 0 И Владелец <> Неопределено Тогда
		Если ТипЗнч(Владелец) = Тип("Строка") Тогда
			ОтборПоВладельцу = "И ИсходныйСправочник.Владелец.Наименование = &Владелец ";
		ИначеЕсли Найти(ТипЗнч(Владелец), "СправочникСсылка") > 0 Тогда
			ОтборПоВладельцу = "И ИсходныйСправочник.Владелец = &Владелец ";
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос(); 
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 	|	ИсходныйСправочник.Ссылка КАК Ссылка,
		|	ИсходныйСправочник." + МетодПоиска + " КАК " + МетодПоиска + "  
		|ПОМЕСТИТЬ ОтфильтрованоДляПоиска
	 	|ИЗ
	 	|	Справочник." + Вид + " КАК ИсходныйСправочник
	 	|ГДЕ
	 	|	НЕ ИсходныйСправочник.ПометкаУдаления 
	 	|	" + ВИерархии + "
	 	|	" + НЕГруппа + "
		|	" + ОтборПоВладельцу + "
		|
  		|ИНДЕКСИРОВАТЬ ПО
  		|	Ссылка
	 	|;
	 	|
	 	|////////////////////////////////////////////////////////////////////////////////

		| ВЫБРАТЬ ПЕРВЫЕ 5
		| 	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
		| 	ВложенныйЗапрос.Ссылка
		|ИЗ
		| (";
		
	Для к = 0 По длиннаСписка Цикл 
		Запрос.Текст =  Запрос.Текст + "
		|ВЫБРАТЬ
		|	ПоискПодстроки.Ссылка КАК Ссылка,
		|	1 КАК Количество
		| ИЗ
		|	ОтфильтрованоДляПоиска КАК ПоискПодстроки
		| ГДЕ
		|	ПоискПодстроки." + МетодПоиска + " ПОДОБНО ""%" + Список[к].Значение + "%""
		| 	" + ?(к < длиннаСписка, "ОБЪЕДИНИТЬ ВСЕ", "");
	КонецЦикла; 
	
	Запрос.Текст = Запрос.Текст + 
		") КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Ссылка
		|УПОРЯДОЧИТЬ ПО
		|	Количество УБЫВ";
	
	//Проверка на наличие реквизита "Владелец" у справочника
	Если Метаданные.Справочники[Вид].Владельцы.Количество() > 0 И Владелец <> Неопределено Тогда
		Запрос.УстановитьПараметр("Владелец",Владелец);
	КонецЕсли;
	Если СписокГрупп <> Неопределено Тогда
		Запрос.УстановитьПараметр("СписокГрупп",СписокГрупп);
    КонецЕсли;
	
	ВремяХЭШЗапросНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();	
	Хеш = Запрос.Выполнить().Выгрузить();
	ВремяХЭШЗапросКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Если ВестиЛог Тогда
		ЛогПоиска = ""+ЛогПоиска + "ВремяХЭШЗапрос = "+(ВремяХЭШЗапросКонец-ВремяХЭШЗапросНачало)/1000 + Символы.ПС;	
	КонецЕсли;

	Возврат Хеш;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//МассивПоисковыхЗапросов = ПолучитьМассивСловИзМакетаНаСервере("R3C2:R12C2");	
	//МассивВерныхРезультатов = ПолучитьМассивСловИзМакетаНаСервере("R3C4:R12C4");	
	//МассивНеВерныхРезультатов = ПолучитьМассивСловИзМакетаНаСервере("R3C6:R12C6");
		
	ИспользуютсяАртикулы   		= ВладелецФормы.СтруктураПараметровИБ.ПроцентИспользованияАртикулов>30;
	КоличествоНоменклатуры 		= ВладелецФормы.СтруктураПараметровИБ.КоличествоНоменклатуры;
	ИскатьПоПолномуНаименованию = ВладелецФормы.СтруктураПараметровИБ.ПроцентСоответствийПолногоНаименования<50;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбъектПоиска = "Номенклатура";
	СтрокаПоиска = "Номенклатура, которая имеет артикул 78912482";
	
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	СУММА(ВЫБОР
	//	|			КОГДА Номенклатура.Артикул <> """"
	//	|				ТОГДА 1
	//	|			ИНАЧЕ 0
	//	|		КОНЕЦ) КАК КоличествоАртикулов,
	//	|	СУММА(1) КАК КоличествоОбщее
	//	|ИЗ
	//	|	Справочник.Номенклатура КАК Номенклатура
	//	|ГДЕ
	//	|	НЕ Номенклатура.ПометкаУдаления";
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//Выборка = РезультатЗапроса.Выбрать();
	//Выборка.Следующий();
	//
	//ИспользуютсяАртикулы = (Выборка.КоличествоАртикулов/Выборка.КоличествоОбщее)>0.3;	
	//
	//КоличествоНоменклатуры = Выборка.КоличествоОбщее;
		
	//////////////////
	
	ИспользоватьПерестановки = Истина;
	
	//////////////////
	
	//Если Метаданные.Справочники.Номенклатура.Реквизиты.Найти("НаименованиеПолное")<>Неопределено Тогда
	//	ИспользуетсяПолноеНаименование = Истина;
	//КонецЕсли;
	
КонецПроцедуры



// Процедура - обработчик события формы "ОбработкаОповещения"
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УпрОсновнаяФормаБудетЗакрыта"  И ЭтаФорма.Открыта() Тогда
		
		ЭтаФорма.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


&НаКлиенте
Процедура НайтиЭлементы(Команда)
		
	Если ВладелецФормы.ESDLСтруктураОПФ.Количество() = 0 Тогда
		ВладелецФормы.ЗаполнитьТаблицуОПФ();	
	КонецЕсли;
	ESDLСтруктураОПФ = ВладелецФормы.ESDLСтруктураОПФ;
	
	Если Команда<>Неопределено Тогда
		РезультатыПоиска.Очистить();
	КонецЕсли;
	
	СтрокаПоиска = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаПоиска, ")",""), "(", ""), """", "");
	
	НачалоТеста = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если СтарыйВариантПоиска Тогда
		_________Найти_____На______Сервере_____СтарыйВариант(ESDLСтруктураОПФ);
	Иначе
		НайтиНаКлиентеСервере(ESDLСтруктураОПФ);
		//НайтиНаСервере(ESDLСтруктураОПФ);
	КонецЕсли;
	
	
	ОкончаниеТеста = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТекстПерестановки = ?(НЕ СтарыйВариантПоиска, ?(ИспользоватьПерестановки, " + перестановки", ""), "");
	
	
	// анализ результатов
	Если Команда = Неопределено Тогда
		
		Отбор = Новый Структура("Запрос", СтрокаПоиска);
		Строки = АнализРезультатов.НайтиСтроки(Отбор);
		Если Строки.Количество()>0 Тогда
			НоваяСтрока = Строки[0];
		Иначе
			НоваяСтрока = АнализРезультатов.Добавить();
			НоваяСтрока.Запрос = СтрокаПоиска;
		КонецЕсли;
		
		ЗамерВремени = (ОкончаниеТеста-НачалоТеста)/1000;
		
		Если РезультатыПоиска.Количество()>0 Тогда
			НаиболееПодходящаяСтрока = РезультатыПоиска[0];
			НоваяСтрока.ПоискПоАртикулу = НаиболееПодходящаяСтрока.ПоискПоАртикулу;
		Иначе
			НаиболееПодходящаяСтрока = Неопределено;		
		КонецЕсли;
		
		Если СтарыйВариантПоиска Тогда
			ИтогВремяС=ИтогВремяС+ЗамерВремени;
			НоваяСтрока.ВремяСтарый     = ЗамерВремени;
			НоваяСтрока.РезультатСтарый = ?(НаиболееПодходящаяСтрока = Неопределено, 0, НаиболееПодходящаяСтрока.Результат);
			НоваяСтрока.ТочностьСтарый  = ?(НаиболееПодходящаяСтрока = Неопределено, 0, НаиболееПодходящаяСтрока.Процент);
		Иначе
			ИтогВремяН=ИтогВремяН+ЗамерВремени;
			НоваяСтрока.ВремяНовый     = ЗамерВремени;
			НоваяСтрока.РезультатНовый = ?(НаиболееПодходящаяСтрока = Неопределено, 0, НаиболееПодходящаяСтрока.Результат);
			НоваяСтрока.ТочностьНовый  = ?(НаиболееПодходящаяСтрока = Неопределено, 0, НаиболееПодходящаяСтрока.СравнениеИтог);
			НоваяСтрока.Перестановки   = ИспользоватьПерестановки;
		КонецЕсли;
		
	Иначе
		
		Сообщить("Время выполнения: "+(ОкончаниеТеста-НачалоТеста)+" с. Алгоритм = "+?(СтарыйВариантПоиска, " старый ", " новый ") + ТекстПерестановки );
		
	КонецЕсли;
	// анализ результатов

			
	
	
КонецПроцедуры

&НаСервере
Процедура НайтиНаСервере(ESDLСтруктураОПФ)
		
	ВестиЛог = Истина;
	
	ВидСправочника = "Номенклатура";
	СтрокаПоиска   = СтрокаПоиска;
	
	//  Масленников Е. (
	Если ВестиЛог Тогда
		ЛогПоиска = ""+ЛогПоиска + СтрокаПоиска + Символы.ПС+"-----------------"+Символы.ПС+" новый режим поиска, номенклатуры в базе "+КоличествоНоменклатуры+Символы.ПС+"-----------------"+Символы.ПС;	
	КонецЕсли;
	
	// ) Масленников Е.
	
	ВариантыСопоставления = Новый СписокЗначений;
	
	ТаблицаВариантов = Новый ТаблицаЗначений;
	ТаблицаВариантов.Колонки.Добавить("Ссылка");
	ТаблицаВариантов.Колонки.Добавить("Сравнение");
	// Масленников Е. (
	//ТаблицаВариантов.Колонки.Добавить("ПоискПоАртикулу");
	ТаблицаВариантов.Колонки.Добавить("СравнениеЦифр");
	ТаблицаВариантов.Колонки.Добавить("СовпадениеСлов");
	ТаблицаВариантов.Колонки.Добавить("СравнениеИтог");
	// ) Масленников Е.
	ВремяХЭШНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ХЕШ = ЗаполнитьХешДляНечеткогоСравнения(ВидСправочника, СтрокаПоиска, , , , Ложь, ЛогПоиска); //хеш = ЗаполнитьХешДляНечеткогоСравнения(ВидСправочника, СтрокаПоиска, , , , Ложь, ЛогПоиска);
	ВремяХЭШКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Если ВестиЛог Тогда
		ЛогПоиска = ""+ЛогПоиска + "ВремяХЭШ = "+(ВремяХЭШКонец-ВремяХЭШНачало)/1000 + Символы.ПС;	
	КонецЕсли;
	
	НайденЭталонныйЭлемент = Ложь;
	///////////////////////////////////////////////////
	Если хеш <> Неопределено Тогда
		КоэфГрань = ?(хеш.Количество() > 5, (хеш.Итог("Количество") / хеш.Количество()), 1);
		Для каждого стрХеш из хеш цикл
			Если стрХеш.Количество >= КоэфГрань Тогда
				ДлинаСтр1 = СтрДлина(СтрокаПоиска);
				ДлинаСтр2 = СтрДлина(СтрХеш.Ссылка);
				СравнениеДлины = ?(ДлинаСтр1>ДлинаСтр2, Окр((ДлинаСтр2/ДлинаСтр1)*100), Окр((ДлинаСтр1/ДлинаСтр2)*100));
				Если СравнениеДлины >= 40 Тогда
					//  Масленников Е. (
					Если СокрЛП(ДлинаСтр1)=СокрЛП(ДлинаСтр2) Тогда
						РезультатСравнения = СравнитьДвеСтрокиСУчетомЛатиницы(СтрокаПоиска, СтрХеш.Ссылка);
						Если РезультатСравнения = 100 Тогда
							НовыйВариант = ТаблицаВариантов.Добавить();
							НовыйВариант.Ссылка = СтрХеш.Ссылка;
							НовыйВариант.Сравнение = 100;
							НовыйВариант.СравнениеИтог = 100;
							НайденЭталонныйЭлемент = Истина;
							//Нов = РезультатыПоиска.Добавить();
							//Нов.Результат = СтрХеш.Ссылка;
							//Нов.Процент   = 100;
							Продолжить; //Прервать;
						КонецЕсли;
					КонецЕсли; 
					// ) Масленников Е.
					Сравнение = ПодсчитатьПроцентВхождения(СтрокаПоиска, Строка(СтрХеш.Ссылка), ESDLСтруктураОПФ);
					Если Сравнение >= 40 Тогда
						НовыйВариант = ТаблицаВариантов.Добавить();
						НовыйВариант.Ссылка = СтрХеш.Ссылка;
						НовыйВариант.Сравнение = Сравнение;
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	///////////////////////////////////////////////////		
	
	//  Масленников Е. ( дополняем таблицу по словам
	Если НЕ НайденЭталонныйЭлемент  Тогда
		
		МассивСловСтрокиПоиска = РазложитьСтрокуВМассивСлов(СтрокаПоиска, " ;:-");
		ВремяСловаНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ДополнитьТаблицуПоискомПоСловам(хеш, СтрокаПоиска, МассивСловСтрокиПоиска);
		//ВладелецФормы.ДополнитьТаблицуПоискомПоСловам(хеш, СтрокаПоиска, МассивСловСтрокиПоиска);
		ВремяСловаКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Если ВестиЛог Тогда
			ЛогПоиска = ""+ЛогПоиска + "ВремяСлова = "+(ВремяСловаКонец-ВремяСловаНачало)/1000 + Символы.ПС;	
		КонецЕсли;
		// ) Масленников Е.
		
		//  Масленников Е. ( 	
		Если хеш <> Неопределено Тогда //  И НЕ НайденЭталонныйЭлемент 
			КоэфГрань = ?(хеш.Количество() > 5, (хеш.Итог("Количество") / хеш.Количество()), 1);
			Для каждого стрХеш из хеш цикл 
				Если стрХеш.Количество >= КоэфГрань ИЛИ стрХеш.СовпадениеСлов >= 25 Тогда  // (= 1 т.к. не всегда определен тип)  Масленников Е.
					ДлинаСтр1 = СтрДлина(СтрокаПоиска);
					ДлинаСтр2 = СтрДлина(СтрХеш.Ссылка);
					СравнениеДлины = ?(ДлинаСтр1>ДлинаСтр2, Окр((ДлинаСтр2/ДлинаСтр1)*100), Окр((ДлинаСтр1/ДлинаСтр2)*100));
					// Масленников Е. (
					//ВремяЦифрыНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
					//СравнениеЦифр = ПодсчитатьПроцентВхожденияСловИзЦифр(СтрокаПоиска, Строка(СтрХеш.Ссылка), МассивСловСтрокиПоиска);
					//ВремяЦифрыКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
					//Если ВестиЛог Тогда
					//	ЛогПоиска = ""+ЛогПоиска + "ВремяЦифры = "+(ВремяЦифрыКонец-ВремяЦифрыНачало)/1000 + " # "+Строка(СтрХеш.Ссылка)+ Символы.ПС;	
					//КонецЕсли;
					//// ) Масленников Е.
					Если СравнениеДлины >= 40 ИЛИ стрХеш.СравнениеЦифр>=50 ИЛИ стрХеш.СовпадениеСлов >= 30 Тогда // Масленников Е.
						ВремяСравнениеНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
						Сравнение = ПодсчитатьПроцентВхождения(СтрокаПоиска, Строка(СтрХеш.Ссылка), ESDLСтруктураОПФ);
						ВремяСравнениеКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
						Если ВестиЛог Тогда
							ЛогПоиска = ""+ЛогПоиска + "ВремяСравнение = "+(ВремяСравнениеКонец-ВремяСравнениеНачало)/1000 + " # "+Строка(СтрХеш.Ссылка)+Символы.ПС;	
						КонецЕсли;
						Если Сравнение >= 40 ИЛИ (Сравнение >= 20 И стрХеш.СравнениеЦифр>=1) ИЛИ стрХеш.СовпадениеСлов = 1 Тогда  // ) Масленников Е.
							НовыйВариант = ТаблицаВариантов.Добавить();
							НовыйВариант.Ссылка = СтрХеш.Ссылка;
							НовыйВариант.Сравнение = Сравнение;
							НовыйВариант.СравнениеЦифр = стрХеш.СравнениеЦифр; //СравнениеЦифр;          //
							НовыйВариант.СовпадениеСлов = СтрХеш.СовпадениеСлов; //
							//НовыйВариант.ПоискПоАртикулу = СтрХеш.ПоискПоАртикулу; //
							
							//Если стрХеш.СравнениеЦифр = -1 Тогда
							//	СравнениеИтог = (Сравнение + СтрХеш.СовпадениеСлов)/2;
							//Иначе
							//	СравнениеИтог = (Сравнение + стрХеш.СравнениеЦифр + СтрХеш.СовпадениеСлов)/3;
							//КонецЕсли;
							
							Если стрХеш.СравнениеЦифр = -1 Тогда
								СравнениеИтог = (Сравнение + СтрХеш.СовпадениеСлов)/2;   
							Иначе
								СравнениеИтог = (Сравнение + стрХеш.СравнениеЦифр + СтрХеш.СовпадениеСлов)/3;
							КонецЕсли;
							
							НовыйВариант.СравнениеИтог = СравнениеИтог;
							
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	// ) Масленников Е.
		
	Для каждого ТекСтрока Из ТаблицаВариантов Цикл
		Нов = РезультатыПоиска.Добавить();
		Нов.Результат       = ТекСтрока.Ссылка;
		Нов.Процент         = ТекСтрока.Сравнение;
		Нов.СравнениеЦифр   = ТекСтрока.СравнениеЦифр;
		Нов.СовпадениеСлов  = ТекСтрока.СовпадениеСлов;
		Нов.СравнениеИтог   = ТекСтрока.СравнениеИтог;
		//Нов.ПоискПоАртикулу = ТекСтрока.ПоискПоАртикулу;
		Нов.РежимПоиска     = СтарыйВариантПоиска;
		Нов.Перестановки    = ИспользоватьПерестановки;
	КонецЦикла;
	
	Если ИспользоватьПерестановки Тогда
		РезультатыПоиска.Сортировать("РежимПоиска Возр, СравнениеИтог Убыв");	
	Иначе
		РезультатыПоиска.Сортировать("РежимПоиска Возр, СравнениеИтог Убыв");	
	КонецЕсли;
	
	Если ВестиЛог Тогда
		ЛогПоиска = ""+ЛогПоиска + "=================================================" + Символы.ПС;	
	КонецЕсли;
	
	//	//
	//Запрос = Новый Запрос;
	////Запрос.УстановитьПараметр("Наименование", СтрокаПоиска);
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	Номенклатура.Ссылка КАК Ссылка,
	//	|	Номенклатура.Наименование КАК Наименование,
	//	|	Номенклатура.Артикул КАК Артикул,
	//	|	Номенклатура.Код КАК Код
	//	|ИЗ
	//	|	Справочник.Номенклатура КАК Номенклатура
	//	|ГДЕ
	//	|	Номенклатура.Наименование ПОДОБНО ""%" + СокрЛП(СтрокаПоиска) + "%"" ИЛИ 
	//	|	Номенклатура.Артикул ПОДОБНО ""%" + СокрЛП(СтрокаПоиска) + "%"" ИЛИ
	//	|	Номенклатура.Код ПОДОБНО ""%" + СокрЛП(СтрокаПоиска) + "%"" ";
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Выборка = РезультатЗапроса.Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	Нов = РезультатыПоиска.Добавить();
	//	Нов.Результат  = Выборка.Ссылка;
	//	//Нов.Процент = ПодсчитатьПроцентВхождения(СтрокаПоиска, Выборка.Наименование); 
	//КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура НайтиНаКлиентеСервере(Команда)
	
	ESDLСтруктураОПФ = ВладелецФормы.ESDLСтруктураОПФ;
		
	ВестиЛог = Истина;
	
	ВидСправочника = "Номенклатура";
	СтрокаПоиска   = СтрокаПоиска;
	
	//  Масленников Е. (
	Если ВестиЛог Тогда
		ЛогПоиска = ""+ЛогПоиска + СтрокаПоиска + Символы.ПС+"-----------------"+Символы.ПС+" новый режим поиска, номенклатуры в базе "+КоличествоНоменклатуры+Символы.ПС+"-----------------"+Символы.ПС;	
	КонецЕсли;
	
	// ) Масленников Е.
	
	//ВариантыСопоставления = Новый СписокЗначений;
	//
	//ТаблицаВариантов = Новый ТаблицаЗначений;
	//ТаблицаВариантов.Колонки.Добавить("Ссылка");
	//ТаблицаВариантов.Колонки.Добавить("Сравнение");
	//// Масленников Е. (
	////ТаблицаВариантов.Колонки.Добавить("ПоискПоАртикулу");
	//ТаблицаВариантов.Колонки.Добавить("СравнениеЦифр");
	//ТаблицаВариантов.Колонки.Добавить("СовпадениеСлов");
	//ТаблицаВариантов.Колонки.Добавить("СравнениеИтог");
	// ) Масленников Е.
	
	ВремяХЭШНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ХЕШ = ВладелецФормы.ПолучитьХешДляНечеткогоСравненияНаСервере(ВидСправочника, СтрокаПоиска);	// массив структур
	//хеш = ЗаполнитьХешДляНечеткогоСравнения(ВидСправочника, СтрокаПоиска, , , , Ложь, ЛогПоиска); // Таблица значений	
	ВремяХЭШКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Если ВестиЛог Тогда
		ЛогПоиска = ""+ЛогПоиска + "ВремяХЭШ = "+(ВремяХЭШКонец-ВремяХЭШНачало)/1000 + Символы.ПС;	
	КонецЕсли;
	
	НайденЭталонныйЭлемент = Ложь;
	ХЕШ = НайтиНаСервереСПреобразованием(ХЕШ, ESDLСтруктураОПФ, НайденЭталонныйЭлемент);
	
	/////////////////////////////////////////////////////////////////////////////////////////
	
	Если НЕ НайденЭталонныйЭлемент Тогда
		
		МассивСловСтрокиПоиска = РазложитьСтрокуВМассивСлов(СтрокаПоиска, " ;:-");
		
		ВремяСловаНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ХЕШ = ВладелецФормы.ДополнитьХешДляНечеткогоСравненияНаСервере(Хеш, СтрокаПоиска, МассивСловСтрокиПоиска, ESDLСтруктураОПФ);
		//ДополнитьТаблицуПоискомПоСловам(хеш, СтрокаПоиска, МассивСловСтрокиПоиска);
		ВремяСловаКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Если ВестиЛог Тогда
			ЛогПоиска = ""+ЛогПоиска + "ВремяСлова = "+(ВремяСловаКонец-ВремяСловаНачало)/1000 + Символы.ПС;	
		КонецЕсли;

		ДополнитьТаблицуХЕШа(ХЕШ, ESDLСтруктураОПФ)

	КонецЕсли;
	

	Если ВестиЛог Тогда
		ЛогПоиска = ""+ЛогПоиска + "=================================================" + Символы.ПС;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиНаСервереСПреобразованием(Знач ХЕШ, ESDLСтруктураОПФ, НайденЭталонныйЭлемент)

	ТаблицаВариантов.Очистить();
	
	ХЕШ = ПреобразоватьМассивСтуктурСтрокВТаблицуЗначений(ХЕШ);

	ВариантыСопоставления = Новый СписокЗначений;
	
	//ТаблицаВариантов = Новый ТаблицаЗначений;
	//ТаблицаВариантов.Колонки.Добавить("Ссылка");
	//ТаблицаВариантов.Колонки.Добавить("Сравнение");
	//// Масленников Е. (
	////ТаблицаВариантов.Колонки.Добавить("ПоискПоАртикулу");
	//ТаблицаВариантов.Колонки.Добавить("СравнениеЦифр");
	//ТаблицаВариантов.Колонки.Добавить("СовпадениеСлов");
	//ТаблицаВариантов.Колонки.Добавить("СравнениеИтог");
	//// ) Масленников Е.

	ВестиЛог = Истина;
	//НайденЭталонныйЭлемент = Ложь;
	///////////////////////////////////////////////////
	Если хеш <> Неопределено Тогда
		КоэфГрань = ?(хеш.Количество() > 5, (хеш.Итог("Количество") / хеш.Количество()), 1);
		Для каждого стрХеш из хеш цикл
			//++  Масленников Е.А. 29.05.2018 - далее меняем "СтрХеш.Ссылка" на "СтрокаХЕШа"(
			СтрокаХЕШа = СтрЗаменить(СтрХеш.Ссылка, """","");
			//--  Масленников Е.А. 29.05.2018 )
			Если стрХеш.Количество >= КоэфГрань Тогда
				ДлинаСтр1 = СтрДлина(СтрокаПоиска);
				ДлинаСтр2 = СтрДлина(СтрокаХЕШа);
				СравнениеДлины = ?(ДлинаСтр1>ДлинаСтр2, Окр((ДлинаСтр2/ДлинаСтр1)*100), Окр((ДлинаСтр1/ДлинаСтр2)*100));
				Если СравнениеДлины >= 40 Тогда
					//  Масленников Е. (
					Если СокрЛП(ДлинаСтр1)=СокрЛП(ДлинаСтр2) Тогда
						РезультатСравнения = СравнитьДвеСтрокиСУчетомЛатиницы(СтрокаПоиска, СтрокаХЕШа);
						Если РезультатСравнения = 100 Тогда
							НовыйВариант = ТаблицаВариантов.Добавить();
							НовыйВариант.Ссылка = СтрХеш.Ссылка;
							НовыйВариант.Сравнение = 100;
							НовыйВариант.СравнениеПроцент = 100;
							НайденЭталонныйЭлемент = Истина;
							Продолжить; //Прервать;
						КонецЕсли;
					КонецЕсли; 
					// ) Масленников Е.
					Сравнение = ПодсчитатьПроцентВхождения(СтрокаПоиска, СтрокаХЕШа, ESDLСтруктураОПФ);
					Если Сравнение >= 40 Тогда
						НовыйВариант = ТаблицаВариантов.Добавить();
						НовыйВариант.Ссылка = СтрХеш.Ссылка;
						НовыйВариант.Сравнение = Сравнение;
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;

	///////////////////////////////////////////////////		
	
	//ХЕШ = ПреобразоватьТаблицуЗначенийВМассивСтруктур(ХЕШ);
	
	Возврат ПреобразоватьТаблицуЗначенийВМассивСтруктур(ТаблицаВариантов.Выгрузить());
	
	////  Масленников Е. ( дополняем таблицу по словам
	//Если НЕ НайденЭталонныйЭлемент  Тогда		
	//	
	//КонецЕсли;
	//// ) Масленников Е.
		
	//Для каждого ТекСтрока Из ТаблицаВариантов Цикл
	//	Нов = РезультатыПоиска.Добавить();
	//	Нов.Результат       = ТекСтрока.Ссылка;
	//	Нов.Процент         = ТекСтрока.Сравнение;
	//	Нов.СравнениеЦифр   = ТекСтрока.СравнениеЦифр;
	//	Нов.СовпадениеСлов  = ТекСтрока.СовпадениеСлов;
	//	Нов.СравнениеИтог   = ТекСтрока.СравнениеИтог;
	//	//Нов.ПоискПоАртикулу = ТекСтрока.ПоискПоАртикулу;
	//	Нов.РежимПоиска     = СтарыйВариантПоиска;
	//	Нов.Перестановки    = ИспользоватьПерестановки;
	//КонецЦикла;
	//
	//Если ИспользоватьПерестановки Тогда
	//	РезультатыПоиска.Сортировать("РежимПоиска Возр, СравнениеИтог Убыв");	
	//Иначе
	//	РезультатыПоиска.Сортировать("РежимПоиска Возр, СравнениеИтог Убыв");	
	//КонецЕсли;

КонецФункции


&НаСервере
Процедура ДополнитьТаблицуХЕШа(Знач ХЕШ, ESDLСтруктураОПФ)
	
	Если ХЕШ.Количество()=0 Тогда
		Возврат;	
	КонецЕсли;
	
	ХЕШ = ПреобразоватьМассивСтуктурСтрокВТаблицуЗначений(ХЕШ);
	
	ТаблицаВариантовНовая = ХЕШ.Скопировать();
	ТаблицаВариантов.Очистить();

	ВестиЛог = Истина;
	
	Для каждого стрХеш из ТаблицаВариантовНовая Цикл //хеш цикл 
		
		Если стрХеш.Сравнение = 0 Тогда
			Сравнение = ПодсчитатьПроцентВхождения(СтрокаПоиска, Строка(СтрХеш.Ссылка), ESDLСтруктураОПФ);
			стрХеш.Сравнение = Сравнение;
		КонецЕсли;
	
		Если стрХеш.Сравнение>=35 ИЛИ стрХеш.СравнениеЦифр >= 25 ИЛИ стрХеш.СовпадениеСлов >= 25 Тогда 
			//ДлинаСтр1 = СтрДлина(СтрокаПоиска);
			//ДлинаСтр2 = СтрДлина(СтрХеш.Ссылка);
			//СравнениеДлины = ?(ДлинаСтр1>ДлинаСтр2, Окр((ДлинаСтр2/ДлинаСтр1)*100), Окр((ДлинаСтр1/ДлинаСтр2)*100));
			//Если СравнениеДлины >= 40 ИЛИ стрХеш.СравнениеЦифр>=50 ИЛИ стрХеш.СовпадениеСлов >= 30 Тогда
			
			ВремяСравнениеНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Сравнение = ПодсчитатьПроцентВхождения(СтрокаПоиска, Строка(СтрХеш.Ссылка), ESDLСтруктураОПФ);
			ВремяСравнениеКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Если ВестиЛог Тогда
				ЛогПоиска = ""+ЛогПоиска + "ВремяСравнение = "+(ВремяСравнениеКонец-ВремяСравнениеНачало)/1000 + " # "+Строка(СтрХеш.Ссылка)+Символы.ПС;	
			КонецЕсли;
			Если Сравнение >= 30 Тогда
				НовыйВариант = ТаблицаВариантов.Добавить();
				НовыйВариант.Ссылка = СтрХеш.Ссылка;
				НовыйВариант.Сравнение = Сравнение;
				НовыйВариант.СравнениеЦифр = стрХеш.СравнениеЦифр;
				НовыйВариант.СовпадениеСлов = СтрХеш.СовпадениеСлов;
				
				НовыйВариант.СравнениеПроцент = НовыйВариант.Сравнение;
				
				// Для случаев, когда есть ошибки в буквах сравнение слов будет сильно уменьшать процент, 
				// 	поэтому исключим такие ситуации формулой.	
				СравнениеИтог = Макс(Сравнение, СтрХеш.СовпадениеСлов);
				Если стрХеш.СравнениеЦифр = -1 Тогда
					СравнениеИтог = СравнениеИтог; //(Сравнение + СтрХеш.СовпадениеСлов)/2;   
				Иначе
					СравнениеИтог = (СравнениеИтог + стрХеш.СравнениеЦифр)/2;
				КонецЕсли;
				НовыйВариант.Сравнение        = Окр(СравнениеИтог);
				
			КонецЕсли;	
			//КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;	
	
	Для каждого ТекСтрока Из ТаблицаВариантов Цикл
		Нов = РезультатыПоиска.Добавить();
		Нов.Результат       = ТекСтрока.Ссылка;
		Нов.Процент         = ТекСтрока.СравнениеПроцент;
		Нов.СравнениеЦифр   = ТекСтрока.СравнениеЦифр;
		Нов.СовпадениеСлов  = ТекСтрока.СовпадениеСлов;
		Нов.СравнениеИтог   = ТекСтрока.Сравнение;
		//Нов.ПоискПоАртикулу = ТекСтрока.ПоискПоАртикулу;
		Нов.РежимПоиска     = СтарыйВариантПоиска;
		Нов.Перестановки    = ИспользоватьПерестановки;
	КонецЦикла;
	
	ТаблицаВариантов.Очистить();
	
	Если ИспользоватьПерестановки Тогда
		РезультатыПоиска.Сортировать("РежимПоиска Возр, СравнениеИтог Убыв");	
	Иначе
		РезультатыПоиска.Сортировать("РежимПоиска Возр, СравнениеИтог Убыв");	
	КонецЕсли;
	
КонецПроцедуры



&НаСервере
Процедура НайтиНаСервере_С_Артикулом(ESDLСтруктураОПФ)
	
	ВестиЛог = Истина;
	
	ВидСправочника = "Номенклатура";
	СтрокаПоиска   = СтрокаПоиска;
	
	//  Масленников Е. (
	Если ВестиЛог Тогда
		ЛогПоиска = ""+ЛогПоиска + СтрокаПоиска + Символы.ПС+"-----------------"+Символы.ПС+" новый режим поиска, номенклатуры в базе "+КоличествоНоменклатуры+Символы.ПС+"-----------------"+Символы.ПС;	
	КонецЕсли;
	
	// ) Масленников Е.
	
	ВариантыСопоставления = Новый СписокЗначений;
	
	ТаблицаВариантов = Новый ТаблицаЗначений;
	ТаблицаВариантов.Колонки.Добавить("Ссылка");
	ТаблицаВариантов.Колонки.Добавить("Сравнение");
	// Масленников Е. (
	ТаблицаВариантов.Колонки.Добавить("ПоискПоАртикулу");
	ТаблицаВариантов.Колонки.Добавить("СравнениеЦифр");
	ТаблицаВариантов.Колонки.Добавить("СовпадениеСлов");
	ТаблицаВариантов.Колонки.Добавить("СравнениеИтог");
	// ) Масленников Е.
	ВремяХЭШНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	хеш = ЗаполнитьХешДляНечеткогоСравнения(ВидСправочника, СтрокаПоиска, , , , Ложь, ЛогПоиска);
	ВремяХЭШКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Если ВестиЛог Тогда
		ЛогПоиска = ""+ЛогПоиска + "ВремяХЭШ = "+(ВремяХЭШКонец-ВремяХЭШНачало)/1000 + Символы.ПС;	
	КонецЕсли;
	
	НайденЭталонныйЭлемент = Ложь;
	///////////////////////////////////////////////////
	Если хеш <> Неопределено Тогда
		КоэфГрань = ?(хеш.Количество() > 5, (хеш.Итог("Количество") / хеш.Количество()), 1);
		Для каждого стрХеш из хеш цикл 
			Если стрХеш.Количество >= КоэфГрань Тогда
				ДлинаСтр1 = СтрДлина(СтрокаПоиска);
				ДлинаСтр2 = СтрДлина(СтрХеш.Ссылка);
				СравнениеДлины = ?(ДлинаСтр1>ДлинаСтр2, Окр((ДлинаСтр2/ДлинаСтр1)*100), Окр((ДлинаСтр1/ДлинаСтр2)*100));
				Если СравнениеДлины >= 40 Тогда
					//  Масленников Е. (
					Если СокрЛП(ДлинаСтр1)=СокрЛП(ДлинаСтр2) Тогда
						РезультатСравнения = СравнитьДвеСтрокиСУчетомЛатиницы(СтрокаПоиска, СтрХеш.Ссылка);
						Если РезультатСравнения = 100 Тогда
							НовыйВариант = ТаблицаВариантов.Добавить();
							НовыйВариант.Ссылка = СтрХеш.Ссылка;
							НовыйВариант.Сравнение = 100;
							НовыйВариант.СравнениеИтог = 100;
							НайденЭталонныйЭлемент = Истина;
							//Нов = РезультатыПоиска.Добавить();
							//Нов.Результат = СтрХеш.Ссылка;
							//Нов.Процент   = 100;
							Продолжить; //Прервать;
						КонецЕсли;
					КонецЕсли; 
					// ) Масленников Е.
					Сравнение = ПодсчитатьПроцентВхождения(СтрокаПоиска, Строка(СтрХеш.Ссылка), ESDLСтруктураОПФ);
					Если Сравнение >= 40 Тогда
						НовыйВариант = ТаблицаВариантов.Добавить();
						НовыйВариант.Ссылка = СтрХеш.Ссылка;
						НовыйВариант.Сравнение = Сравнение;
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	///////////////////////////////////////////////////		
	
	//  Масленников Е. ( дополняем таблицу по словам
	Если НЕ НайденЭталонныйЭлемент  Тогда
		
		МассивСловСтрокиПоиска = РазложитьСтрокуВМассивСлов(СтрокаПоиска, " ;:-");
		ВремяСловаНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ДополнитьТаблицуПоискомПоСловам(хеш, СтрокаПоиска, МассивСловСтрокиПоиска);
		ВремяСловаКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Если ВестиЛог Тогда
			ЛогПоиска = ""+ЛогПоиска + "ВремяСлова = "+(ВремяСловаКонец-ВремяСловаНачало)/1000 + Символы.ПС;	
		КонецЕсли;
		// ) Масленников Е.
		
		//  Масленников Е. ( 	
		Если хеш <> Неопределено Тогда //  И НЕ НайденЭталонныйЭлемент 
			КоэфГрань = ?(хеш.Количество() > 5, (хеш.Итог("Количество") / хеш.Количество()), 1);
			Для каждого стрХеш из хеш цикл 
				Если стрХеш.Количество >= КоэфГрань ИЛИ стрХеш.СовпадениеСлов >= 25 ИЛИ стрХеш.ПоискПоАртикулу = 1 Тогда  // (= 1 т.к. не всегда определен тип)  Масленников Е.
					ДлинаСтр1 = СтрДлина(СтрокаПоиска);
					ДлинаСтр2 = СтрДлина(СтрХеш.Ссылка);
					СравнениеДлины = ?(ДлинаСтр1>ДлинаСтр2, Окр((ДлинаСтр2/ДлинаСтр1)*100), Окр((ДлинаСтр1/ДлинаСтр2)*100));
					// Масленников Е. (
					//ВремяЦифрыНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
					//СравнениеЦифр = ПодсчитатьПроцентВхожденияСловИзЦифр(СтрокаПоиска, Строка(СтрХеш.Ссылка), МассивСловСтрокиПоиска);
					//ВремяЦифрыКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
					//Если ВестиЛог Тогда
					//	ЛогПоиска = ""+ЛогПоиска + "ВремяЦифры = "+(ВремяЦифрыКонец-ВремяЦифрыНачало)/1000 + " # "+Строка(СтрХеш.Ссылка)+ Символы.ПС;	
					//КонецЕсли;
					//// ) Масленников Е.
					Если СравнениеДлины >= 40 ИЛИ стрХеш.СравнениеЦифр>=50 ИЛИ стрХеш.СовпадениеСлов >= 30 ИЛИ стрХеш.ПоискПоАртикулу = 1 Тогда // Масленников Е.
						ВремяСравнениеНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
						Сравнение = ПодсчитатьПроцентВхождения(СтрокаПоиска, Строка(СтрХеш.Ссылка), ESDLСтруктураОПФ);
						ВремяСравнениеКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
						Если ВестиЛог Тогда
							ЛогПоиска = ""+ЛогПоиска + "ВремяСравнение = "+(ВремяСравнениеКонец-ВремяСравнениеНачало)/1000 + " # "+Строка(СтрХеш.Ссылка)+Символы.ПС;	
						КонецЕсли;
						Если Сравнение >= 40 ИЛИ (Сравнение >= 20 И стрХеш.СравнениеЦифр>=1) ИЛИ стрХеш.СовпадениеСлов = 1 ИЛИ стрХеш.ПоискПоАртикулу = 1 Тогда  // ) Масленников Е.
							НовыйВариант = ТаблицаВариантов.Добавить();
							НовыйВариант.Ссылка = СтрХеш.Ссылка;
							НовыйВариант.Сравнение = Сравнение;
							НовыйВариант.СравнениеЦифр = стрХеш.СравнениеЦифр; //СравнениеЦифр;          //
							НовыйВариант.СовпадениеСлов = СтрХеш.СовпадениеСлов; //
							НовыйВариант.ПоискПоАртикулу = СтрХеш.ПоискПоАртикулу; //
							
							//Если стрХеш.СравнениеЦифр = -1 Тогда
							//	СравнениеИтог = (Сравнение + СтрХеш.СовпадениеСлов)/2;
							//Иначе
							//	СравнениеИтог = (Сравнение + стрХеш.СравнениеЦифр + СтрХеш.СовпадениеСлов)/3;
							//КонецЕсли;
							
							Если стрХеш.СравнениеЦифр = -1 Тогда
								СравнениеИтог = (Сравнение + СтрХеш.СовпадениеСлов + ?(СтрХеш.ПоискПоАртикулу=1, 100, 0))/?(СтрХеш.ПоискПоАртикулу=1, 3, 2);   
							Иначе
								СравнениеИтог = (Сравнение + стрХеш.СравнениеЦифр + СтрХеш.СовпадениеСлов + ?(СтрХеш.ПоискПоАртикулу=1, 100, 0))/?(СтрХеш.ПоискПоАртикулу=1, 4, 3);
							КонецЕсли;
							
							НовыйВариант.СравнениеИтог = СравнениеИтог;
							
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	// ) Масленников Е.
		
	Для каждого ТекСтрока Из ТаблицаВариантов Цикл
		Нов = РезультатыПоиска.Добавить();
		Нов.Результат       = ТекСтрока.Ссылка;
		Нов.Процент         = ТекСтрока.Сравнение;
		Нов.СравнениеЦифр   = ТекСтрока.СравнениеЦифр;
		Нов.СовпадениеСлов  = ТекСтрока.СовпадениеСлов;
		Нов.СравнениеИтог   = ТекСтрока.СравнениеИтог;
		Нов.ПоискПоАртикулу = ТекСтрока.ПоискПоАртикулу;
		Нов.РежимПоиска     = СтарыйВариантПоиска;
		Нов.Перестановки    = ИспользоватьПерестановки;
	КонецЦикла;
	
	Если ИспользоватьПерестановки Тогда
		РезультатыПоиска.Сортировать("РежимПоиска Возр, Перестановки Убыв, СравнениеИтог Убыв");	
	Иначе
		РезультатыПоиска.Сортировать("РежимПоиска Возр, Перестановки Возр, СравнениеИтог Убыв");	
	КонецЕсли;
	
	Если ВестиЛог Тогда
		ЛогПоиска = ""+ЛогПоиска + "=================================================" + Символы.ПС;	
	КонецЕсли;
	
	//	//
	//Запрос = Новый Запрос;
	////Запрос.УстановитьПараметр("Наименование", СтрокаПоиска);
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	Номенклатура.Ссылка КАК Ссылка,
	//	|	Номенклатура.Наименование КАК Наименование,
	//	|	Номенклатура.Артикул КАК Артикул,
	//	|	Номенклатура.Код КАК Код
	//	|ИЗ
	//	|	Справочник.Номенклатура КАК Номенклатура
	//	|ГДЕ
	//	|	Номенклатура.Наименование ПОДОБНО ""%" + СокрЛП(СтрокаПоиска) + "%"" ИЛИ 
	//	|	Номенклатура.Артикул ПОДОБНО ""%" + СокрЛП(СтрокаПоиска) + "%"" ИЛИ
	//	|	Номенклатура.Код ПОДОБНО ""%" + СокрЛП(СтрокаПоиска) + "%"" ";
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Выборка = РезультатЗапроса.Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	Нов = РезультатыПоиска.Добавить();
	//	Нов.Результат  = Выборка.Ссылка;
	//	//Нов.Процент = ПодсчитатьПроцентВхождения(СтрокаПоиска, Выборка.Наименование); 
	//КонецЦикла;

КонецПроцедуры


Функция СравнитьДвеСтрокиСУчетомЛатиницы(Знач Строка1, Знач Строка2)

	Результат = 0;
	
	ТолькоРусскиеСимволы 	= "БбвГгДдЁёЖжЗзИиЙйЛлмнПптУФфЦцЧчШшЩщЪъЫыЬьЭэЮюЯя";
	ТолькоАнглийскиеСимволы = "DdFfGghIiJjLlNQqRrSstUVvWwYZz";
	РусскиеСимволы 			= "АаВЕеКкМНОоРрСсТуХхЗО1ти@пь.,:;""";//"АаВЕеКкМНОоРрСсТуХхЗО1тиа@пь";
	АнглийскиеСимволы 		= "AaBEeKkMHOoPpCcTyXx30imu@nb.,:;""";//"AaBEeKkMHOoPpCcTyXx30imu@anb";
	
	для сч = 1 по СтрДлина(Строка1) Цикл
		Строка1 = СтрЗаменить(Строка1, Сред(АнглийскиеСимволы,сч,1), Сред(РусскиеСимволы,сч,1));
		Строка2 = СтрЗаменить(Строка2, Сред(АнглийскиеСимволы,сч,1), Сред(РусскиеСимволы,сч,1));
	КонецЦикла;
	
	Если Строка1 = Строка2 Тогда
		Результат = 100;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СравнитьДвеСтрокиСУчетомЛатиницы()


&НаСервере
Процедура _________Найти_____На______Сервере_____СтарыйВариант(ESDLСтруктураОПФ)
	
	ВестиЛог = Истина;
	ВидСправочника = "Номенклатура";
	СтрокаПоиска   = СтрокаПоиска;
	
	Если ВестиЛог Тогда
		ЛогПоиска = ""+ЛогПоиска + СтрокаПоиска + Символы.ПС+"-----------------"+Символы.ПС+" старый режим поиска, номенклатуры в базе "+КоличествоНоменклатуры+Символы.ПС+"-----------------"+Символы.ПС;	
	КонецЕсли;
	
	ВариантыСопоставления = Новый СписокЗначений;
	
	//ТаблицаВариантов = Новый ТаблицаЗначений;
	//ТаблицаВариантов.Колонки.Добавить("Ссылка");
	//ТаблицаВариантов.Колонки.Добавить("Сравнение");
	//// Масленников Е. (
	//ТаблицаВариантов.Колонки.Добавить("СравнениеЦифр");
	//ТаблицаВариантов.Колонки.Добавить("СовпадениеСлов");
	//ТаблицаВариантов.Колонки.Добавить("СравнениеИтог");
	//// ) Масленников Е.
	
	
	ВремяХЭШНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	хеш = ЗаполнитьХешДляНечеткогоСравнения(ВидСправочника, СтрокаПоиска, , , , Истина, ЛогПоиска);
	ВремяХЭШКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Если ВестиЛог Тогда
		ЛогПоиска = ""+ЛогПоиска + "ВремяХЭШ = "+(ВремяХЭШКонец-ВремяХЭШНачало)/1000 + Символы.ПС;	
	КонецЕсли;
	
	//  Масленников Е. ( дополняем таблицу по словам
	//ДополнитьТаблицуПоискомПоСловам(хеш, СтрокаПоиска);
	// ) Масленников Е.
	Если хеш <> Неопределено Тогда
		КоэфГрань = ?(хеш.Количество() > 5, (хеш.Итог("Количество") / хеш.Количество()), 1);
		Для каждого стрХеш из хеш цикл 
			Если стрХеш.Количество >= КоэфГрань Тогда //ИЛИ стрХеш.СовпадениеСлов = 1 Тогда  // (= 1 т.к. не всегда определен тип)  Масленников Е.
				ДлинаСтр1 = СтрДлина(СтрокаПоиска);
				ДлинаСтр2 = СтрДлина(СтрХеш.Ссылка);
				СравнениеДлины = ?(ДлинаСтр1>ДлинаСтр2, Окр((ДлинаСтр2/ДлинаСтр1)*100), Окр((ДлинаСтр1/ДлинаСтр2)*100));
				// Масленников Е. (
				//СравнениеЦифр = ПодсчитатьПроцентВхожденияСловИзЦифр(СтрокаПоиска, Строка(СтрХеш.Ссылка) );
				// ) Масленников Е.
				Если СравнениеДлины >= 40 Тогда //  ИЛИ (СравнениеДлины >= 20 И СравнениеЦифр>=0.75) ИЛИ стрХеш.СовпадениеСлов = 1 Тогда // Масленников Е.
					//Сравнение = ПодсчитатьПроцентВхождения(СтрокаПоиска, Строка(СтрХеш.Ссылка), ESDLСтруктураОПФ);
					ВремяСравнениеНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
					Сравнение = ПодсчитатьПроцентВхождения(СтрокаПоиска, Строка(СтрХеш.Ссылка), ESDLСтруктураОПФ);
					ВремяСравнениеКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
					Если ВестиЛог Тогда
						ЛогПоиска = ""+ЛогПоиска + "ВремяСравнение = "+(ВремяСравнениеКонец-ВремяСравнениеНачало)/1000 + Символы.ПС;	
					КонецЕсли;
					Если Сравнение >= 40 Тогда // ИЛИ (Сравнение >= 20 И СравнениеЦифр>=1) ИЛИ стрХеш.СовпадениеСлов = 1 Тогда  // ) Масленников Е.
						НовыйВариант = ТаблицаВариантов.Добавить();
						НовыйВариант.Ссылка = СтрХеш.Ссылка;
						НовыйВариант.Сравнение = Сравнение;
						//НовыйВариант.СравнениеЦифр = СравнениеЦифр;          // +??% вероятности
						//НовыйВариант.СовпадениеСлов = СтрХеш.СовпадениеСлов; // +30% вероятности
						//НовыйВариант.СравнениеИтог = Мин( (Сравнение * ?(СравнениеЦифр=0, 1, СравнениеЦифр) * ?(СтрХеш.СовпадениеСлов=0, 1, 1.3)), 100);
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;

		
	Для каждого ТекСтрока Из ТаблицаВариантов Цикл
		Нов = РезультатыПоиска.Добавить();
		Нов.Результат  = ТекСтрока.Ссылка;
		Нов.Процент = ТекСтрока.Сравнение;
		//Нов.СравнениеЦифр = ТекСтрока.СравнениеЦифр;
		//Нов.СовпадениеСлов = ТекСтрока.СовпадениеСлов;
		//Нов.СравнениеИтог = ТекСтрока.СравнениеИтог;
		Нов.РежимПоиска = СтарыйВариантПоиска;
	КонецЦикла;
	
	РезультатыПоиска.Сортировать("РежимПоиска Убыв, Процент Убыв");
	
	Если ВестиЛог Тогда
		ЛогПоиска = ""+ЛогПоиска + "=================================================" + Символы.ПС;	
	КонецЕсли;
	
	//	//
	//Запрос = Новый Запрос;
	////Запрос.УстановитьПараметр("Наименование", СтрокаПоиска);
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	Номенклатура.Ссылка КАК Ссылка,
	//	|	Номенклатура.Наименование КАК Наименование,
	//	|	Номенклатура.Артикул КАК Артикул,
	//	|	Номенклатура.Код КАК Код
	//	|ИЗ
	//	|	Справочник.Номенклатура КАК Номенклатура
	//	|ГДЕ
	//	|	Номенклатура.Наименование ПОДОБНО ""%" + СокрЛП(СтрокаПоиска) + "%"" ИЛИ 
	//	|	Номенклатура.Артикул ПОДОБНО ""%" + СокрЛП(СтрокаПоиска) + "%"" ИЛИ
	//	|	Номенклатура.Код ПОДОБНО ""%" + СокрЛП(СтрокаПоиска) + "%"" ";
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Выборка = РезультатЗапроса.Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	Нов = РезультатыПоиска.Добавить();
	//	Нов.Результат  = Выборка.Ссылка;
	//	//Нов.Процент = ПодсчитатьПроцентВхождения(СтрокаПоиска, Выборка.Наименование); 
	//КонецЦикла;

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//	ПЕРЕСТАНОВКИ (пока не используются)

&НаСервереБезКонтекста
Функция получитьВсеВозможныеПерестановки(начМассив)
	
 	МассивДляПерестановки = новый массив;
	Перестановки(начМассив, начМассив.количество(), МассивДляПерестановки);	

	возврат МассивДляПерестановки

конецФункции

&НаСервереБезКонтекста
Функция Перестановки(МассивДляПерестановки, СколькоПереставлять, итоговыйМассив)
	
	Если СколькоПереставлять=1 Тогда
		времМассив = МассивДляПерестановки.скопировать();
		итоговыйМассив.добавить(времМассив);
    	возврат Истина;
	Иначе
		Для сч = 0 по СколькоПереставлять-1 Цикл
			Замена(МассивДляПерестановки[сч],МассивДляПерестановки[СколькоПереставлять - 1]); //меняем последний элемент с каждым, в том числе и с самим собой.
			Перестановки(МассивДляПерестановки,СколькоПереставлять - 1, итоговыйМассив); //запускаем функцию, для n-1 элементов
			Замена(МассивДляПерестановки[сч],МассивДляПерестановки[СколькоПереставлять - 1]); //Возвращаем массив в прежнее состояние для следующего обмена элементов
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция Замена(ПервоеСлово, ВтороеСлово)

    Врем 		 = ПервоеСлово.значение;
    ПервоеСлово.значение  = ВтороеСлово.значение;
    ВтороеСлово.значение  = Врем;
	
	возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Процедура пернеслась в осноную формы и будет вызваться оттуда. Вызов из это формы запрещен
&НаСервере
Процедура ДополнитьТаблицуПоискомПоСловам(Хеш, СтрокаПоиска, МассивСлов) Экспорт
	
	КоличествоСлов = МассивСлов.Количество();
	
	Хеш.Колонки.Добавить("СравнениеЦифр");
	Хеш.Колонки.Добавить("СовпадениеСлов");
	//Хеш.Колонки.Добавить("ПоискПоАртикулу");
		
	ВестиЛог = Истина;
	// ИспользоватьПерестановки = Истина; // ?	
	
	МассивСловИзЦифр = Новый Массив;
	Для каждого Слово Из МассивСлов Цикл
		Если ТолькоЦифрыВСтроке(Слово) Тогда	
			МассивСловИзЦифр.Добавить(Слово);
		КонецЕсли;			
	КонецЦикла;
	
	ЕстьСловаИзЦифр = МассивСловИзЦифр.Количество()>0;
		
	НоваяСтрокаПоискаПодобно = "";	
	Для каждого Слово Из МассивСлов Цикл
		НоваяСтрокаПоискаПодобно = ""+НоваяСтрокаПоискаПодобно+"%"+Слово;	
	КонецЦикла;
	НоваяСтрокаПоискаПодобно = НоваяСтрокаПоискаПодобно+"%";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ПометкаУдаления ";
	//|	И Номенклатура.Наименование ПОДОБНО &Наименование";
	Запрос.Текст = ""+Запрос.Текст + " И Номенклатура.Наименование ПОДОБНО &Наименование ";
	Запрос.УстановитьПараметр("Наименование", НоваяСтрокаПоискаПодобно);
	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл
		Нов = хеш.Добавить();
		Нов.Ссылка = Выборка.Ссылка;
		Нов.Количество = МассивСлов.Количество();	
	КонецЦикла;
	
	Хеш.Свернуть("Ссылка","Количество,СовпадениеСлов,СравнениеЦифр");
	
	// расчет совпадения слов
	Для каждого ТекСтрока Из Хеш Цикл
				
		СтрокаВыборка = СтрЗаменить(СтрЗаменить(СтрЗаменить(Строка(ТекСтрока.Ссылка), ")",""), "(", ""), """", "");
		МассивСловВыборка = РазложитьСтрокуВМассивСлов(СокрЛП(СтрокаВыборка), " ,.;:-");
		к = 0;
		Для каждого Слово Из МассивСлов Цикл
			Если МассивСловВыборка.Найти(Слово)<>Неопределено Тогда
				к = к + 1;		
			КонецЕсли;
		КонецЦикла;
		
		Если к = МассивСловВыборка.Количество() Тогда
			ТекСтрока.СовпадениеСлов = 100;
		Иначе
			ТекСтрока.СовпадениеСлов = Окр(100*(к/МассивСловВыборка.Количество()+к/КоличествоСлов)/2, 2);		
		КонецЕсли;	
		
		/////////////////////////////////
		// 		поиск слов из цифр 
		к = 0;
		Если ЕстьСловаИзЦифр Тогда
			
			Для каждого Слово Из МассивСловИзЦифр Цикл
				СловоНайдено = МассивСловВыборка.Найти(Слово)<>Неопределено;
				Если СловоНайдено Тогда
					к = к + 1;
				КонецЕсли;
			КонецЦикла;
			ТекСтрока.СравнениеЦифр = Окр(100*к/МассивСловИзЦифр.Количество(),2);
		Иначе
			ТекСтрока.СравнениеЦифр = -1;	
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура _ДополнитьТаблицуПоискомПоСловам_вариант_с_Перестановками_и_Артикулом(Хеш, СтрокаПоиска, МассивСлов) Экспорт
	
	Хеш.Колонки.Добавить("СравнениеЦифр");
	Хеш.Колонки.Добавить("СовпадениеСлов");
	Хеш.Колонки.Добавить("ПоискПоАртикулу");
	
	
	ВестиЛог = Истина;
	// ИспользоватьПерестановки = Истина; // ?	
	
	МассивСловИзЦифр = Новый Массив;
	Для каждого Слово Из МассивСлов Цикл
		Если ТолькоЦифрыВСтроке(Слово) Тогда	
			МассивСловИзЦифр.Добавить(Слово);
		КонецЕсли;			
	КонецЦикла;
	
	ЕстьСловаИзЦифр = МассивСловИзЦифр.Количество()>0;
	
	// артикул
	ВремяАртикулНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();	
	Если ЕстьСловаИзЦифр И ИспользуютсяАртикулы Тогда
		
		// поиск по артикулам
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Артикул В(&МассивАртикулов)
		|	И НЕ Номенклатура.ПометкаУдаления
		|	И НЕ Номенклатура.ЭтоГруппа";
		
		Запрос.УстановитьПараметр("МассивАртикулов", МассивСловИзЦифр);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Нов = хеш.Добавить();
			Нов.Ссылка = Выборка.Ссылка;
			Нов.Количество = 1;	
			Нов.ПоискПоАртикулу = 1;
		КонецЦикла;
		
	КонецЕсли;
	ВремяАртикулКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Если ВестиЛог Тогда
		ЛогПоиска = ""+ЛогПоиска + "ВремяАртикул = "+(ВремяАртикулКонец-ВремяАртикулНачало)/1000 + Символы.ПС;	
	КонецЕсли;
	//
	
	
	//НачальноеКоличество = Хеш.Количество();	
	//МассивСлов     = РазложитьСтрокуВМассивСлов(СтрокаПоиска, " ;:-");
	КоличествоСлов = МассивСлов.Количество();
	
	// анализ количества номенклатуры в базе
	Если КоличествоНоменклатуры>200000 Тогда
		ИспользоватьОграничение = ?(КоличествоСлов>2, 1, 0);
	ИначеЕсли КоличествоНоменклатуры>100000 Тогда	
		ИспользоватьОграничение = ?(КоличествоСлов>3, 1, 0);
	ИначеЕсли КоличествоНоменклатуры>50000 Тогда	
		ИспользоватьОграничение = ?(КоличествоСлов>4, 1, 0);
	ИначеЕсли КоличествоНоменклатуры>20000 Тогда
		ИспользоватьОграничение = ?(КоличествоСлов>5, 1, 0);
	ИначеЕсли КоличествоСлов>6 Тогда
		ИспользоватьОграничение = 1;
	Иначе
		ИспользоватьОграничение = 0;	
	КонецЕсли;
	
	Если ИспользоватьОграничение = 0 Тогда
		ИспользоватьПерестановки = Истина;
	Иначе
		ИспользоватьПерестановки = Ложь;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////
	Если ИспользоватьПерестановки Тогда
		
		условие = "";
		списокСтрок = новый СписокЗначений;
		списокСтрок.ЗагрузитьЗначения(МассивСлов);
		
		ВремяПерестановкиНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
		массивМассивовСтрок = получитьВсеВозможныеПерестановки(списокСтрок);
		ВремяПерестановкиКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Если ВестиЛог Тогда
			ЛогПоиска = ""+ЛогПоиска + "ВремяПерестановки = "+(ВремяПерестановкиКонец-ВремяПерестановкиНачало)/1000 + Символы.ПС;	
		КонецЕсли;
	
		ПервыйПроход = Истина;
		Для сч = 0 по массивМассивовСтрок.количество() - 1 Цикл
			НоваяСтрокаПоиска = "";
			текМассивСтрок = массивМассивовСтрок[сч];
			Для каждого Слово Из текМассивСтрок Цикл
				НоваяСтрокаПоиска = ""+НоваяСтрокаПоиска+"%"+Слово;	
			КонецЦикла;
			НоваяСтрокаПоиска = НоваяСтрокаПоиска+"%";
			//условие = ""+условие + " Номенклатура.Наименование ПОДОБНО """+НоваяСтрокаПоиска+""" ИЛИ";
			
			Если НЕ ПервыйПроход Тогда
				Условие = ""+Условие+"  Объединить  ";				
			КонецЕсли;
			
			Условие = ""+Условие+
			"  
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Номенклатура.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ 
			|	 НЕ Номенклатура.ПометкаУдаления И
			|	 Номенклатура.Наименование ПОДОБНО """+НоваяСтрокаПоиска+"""";
			
			Если ИскатьПоПолномуНаименованию Тогда
				Условие = ""+Условие+" " + " ИЛИ Номенклатура.НаименованиеПолное ПОДОБНО """+НоваяСтрокаПоиска+"""";		
			КонецЕсли;
			
			Если ПервыйПроход = Истина Тогда
				ПервыйПроход = Ложь;			
			КонецЕсли;
			
		конецЦикла;
		//условие = " И ( "+Лев(условие, СтрДлина(условие)-3) + " )";
		
	Иначе
		
		НоваяСтрокаПоискаПодобно = "";	
		Для каждого Слово Из МассивСлов Цикл
			НоваяСтрокаПоискаПодобно = ""+НоваяСтрокаПоискаПодобно+"%"+Слово;	
		КонецЦикла;
		НоваяСтрокаПоискаПодобно = НоваяСтрокаПоискаПодобно+"%";
		
	КонецЕсли;
	////////////////////////////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
		
	Если ИспользоватьПерестановки Тогда	
		Запрос.Текст = ""+Запрос.Текст + условие;
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ПометкаУдаления ";
		//|	И Номенклатура.Наименование ПОДОБНО &Наименование";
		Запрос.Текст = ""+Запрос.Текст + " И Номенклатура.Наименование ПОДОБНО &Наименование ";
		Запрос.УстановитьПараметр("Наименование", НоваяСтрокаПоискаПодобно);
	КонецЕсли;
	
	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	//ДополнительноеКоличество = Выборка.Количество();	
	Пока Выборка.Следующий() Цикл
		Нов = хеш.Добавить();
		Нов.Ссылка = Выборка.Ссылка;
		Нов.Количество = МассивСлов.Количество();	
	КонецЦикла;
	
	Хеш.Свернуть("Ссылка","Количество,СовпадениеСлов,ПоискПоАртикулу,СравнениеЦифр");
	
	// расчет совпадения слов для других позиций в таблице
	Для каждого ТекСтрока Из Хеш Цикл
				
		СтрокаВыборка = СтрЗаменить(СтрЗаменить(СтрЗаменить(Строка(ТекСтрока.Ссылка), ")",""), "(", ""), """", "");
		МассивСловВыборка = РазложитьСтрокуВМассивСлов(СокрЛП(СтрокаВыборка), " ,.;:-");
		к = 0;
		Для каждого Слово Из МассивСлов Цикл
			Если МассивСловВыборка.Найти(Слово)<>Неопределено Тогда
				к = к + 1;		
			КонецЕсли;
		КонецЦикла;
		
		Если к = МассивСловВыборка.Количество() Тогда
			ТекСтрока.СовпадениеСлов = 100;
		Иначе
			//ТекСтрока.СовпадениеСлов = Окр(100*к/МассивСловВыборка.Количество(), 2);
			ТекСтрока.СовпадениеСлов = Окр(100*(к/МассивСловВыборка.Количество()+к/КоличествоСлов)/2, 2);		
		КонецЕсли;	
		
		/////////////////////////////////
		// 		поиск слов из цифр 
		к = 0;
		Если ЕстьСловаИзЦифр Тогда
			
			Для каждого Слово Из МассивСловИзЦифр Цикл
				СловоНайдено = МассивСловВыборка.Найти(Слово)<>Неопределено;
				Если СловоНайдено Тогда
					к = к + 1;
				КонецЕсли;
			КонецЦикла;
			
			ТекСтрока.СравнениеЦифр = Окр(100*к/МассивСловИзЦифр.Количество(),2);
			
		Иначе
			ТекСтрока.СравнениеЦифр = -1;	
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// процедуры перенесены в основную форму. вызывать также там.

// Проверяет, содержит ли строка только цифры.
//
// Параметры:
//  Значение         - Строка - проверяемая строка.
//  Устаревший       - Булево - устаревший параметр, не используется.
//  ПробелыЗапрещены - Булево - если Ложь, то в строке допустимо наличие пробелов.
//
// Возвращаемое значение:
//   Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
//
// Пример:
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("0123"); // Истина
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("0123abc"); // Ложь
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("01 2 3",, Ложь); // Истина
//
Функция ТолькоЦифрыВСтроке(Знач Значение, Знач Устаревший = Истина, Знач ПробелыЗапрещены = Истина) Экспорт
	
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПробелыЗапрещены Тогда
		Значение = СтрЗаменить(Значение, " ", "");
	КонецЕсли;
		
	Если СтрДлина(Значение) = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Если содержит только цифры, то в результате замен должна быть получена пустая строка.
	// Проверять при помощи ПустаяСтрока нельзя, так как в исходной строке могут быть пробельные символы.
	//Возврат СтрДлина(
	//	СтрЗаменить(СтрЗаменить(
	//	СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
	//	СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
	//		Значение, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", ""), ".", ""), ",", "")) = 0;
	
	Возврат СтрДлина(УдалитьЦифрыВСтрокеИПараметры(Значение, ".,хХxX/"))=0;
	
КонецФункции

// Разбивает строку на несколько строк, используя заданный набор разделителей.
// Если параметр РазделителиСлов не задан, то разделителем слов считается любой из символов, 
// не относящихся к символам латиницы, кириллицы, цифры, подчеркивания.
//
// Параметры:
//  Значение        - Строка - исходная строка, которую необходимо разложить на слова.
//  РазделителиСлов - Строка - перечень символов-разделителей. Например, ".,;".
//
// Возвращаемое значение:
//  Массив - список слов.
//
// Пример:
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов("один-@#два2_!три") возвратит массив значений: "один",
//  "два2_", "три"; СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов("один-@#два2_!три", "#@!_") возвратит массив
//  значений: "один-", "два2", "три".
//
Функция РазложитьСтрокуВМассивСлов(Знач Значение, РазделителиСлов = Неопределено) Экспорт
	
	Слова = Новый Массив;
	
	РазмерТекста = СтрДлина(Значение);
	НачалоСлова = 1;
	Для Позиция = 1 По РазмерТекста Цикл
		КодСимвола = КодСимвола(Значение, Позиция);
		Если ЭтоРазделительСлов(КодСимвола, РазделителиСлов) Тогда
			Если Позиция <> НачалоСлова Тогда
				Слова.Добавить(Сред(Значение, НачалоСлова, Позиция - НачалоСлова));
			КонецЕсли;
			НачалоСлова = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Позиция <> НачалоСлова Тогда
		Слова.Добавить(Сред(Значение, НачалоСлова, Позиция - НачалоСлова));
	КонецЕсли;
	
	Возврат Слова;
	
КонецФункции

// Определяет, является ли символ разделителем.
//
// Параметры:
//  КодСимвола      - Число  - код проверяемого символа;
//  РазделителиСлов - Строка - символы разделителей. Если параметр не указан, то 
//                             разделителем считаются все символы, не являющиеся цифрами, 
//                             латинскими и кириллическими буквами, а также знаком подчеркивания.
//
// Возвращаемое значение:
//  Булево - Истина, если символ с кодом КодСимвола является разделителем.
//
Функция ЭтоРазделительСлов(КодСимвола, РазделителиСлов = Неопределено) Экспорт
	
	Если РазделителиСлов <> Неопределено Тогда
		Возврат СтрНайти(РазделителиСлов, Символ(КодСимвола)) > 0;
	КонецЕсли;
		
	Диапазоны = Новый Массив;
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 48, 57)); 		// цифры
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 65, 90)); 		// латиница большие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 97, 122)); 		// латиница маленькие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1040, 1103)); 	// кириллица
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1025, 1025)); 	// символ "Ё"
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1105, 1105)); 	// символ "ё"
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 95, 95)); 		// символ "_"
	
	Для Каждого Диапазон Из Диапазоны Цикл
		Если КодСимвола >= Диапазон.Мин И КодСимвола <= Диапазон.Макс Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция УдалитьЦифрыВСтрокеИПараметры(Знач Значение, Параметры = Неопределено)

	Значение = СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
	СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
	Значение, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", "");
	
	Если Параметры<>Неопределено Тогда
		Для сч = 1 По СтрДлина(Параметры) Цикл
			Значение = СтрЗаменить(Значение, Сред(Параметры, сч, 1), "");				   
		КонецЦикла;
	КонецЕсли;

	Возврат Значение;
	
КонецФункции // ()

// не используется
&НаСервере
Функция _ПодсчитатьПроцентВхожденияСловИзЦифр(Знач СтрокаПоиска, Знач СтрокаНоменклатуры, МассивСлов) 
	
	СтрокаНоменклатуры = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаНоменклатуры, ")",""), "(", ""), """", "");	
	МассивСловНоменклатуры = РазложитьСтрокуВМассивСлов(СтрокаНоменклатуры, " ;:-");

	//
	//СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(
	//СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
	
	СтрокаПоиска = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаПоиска, ")",""), "(", ""), """", "");
	ДлинаСтрокиПоиска = СтрДлина(СтрокаПоиска);
	
	//СтрокаПоискаБезЦифр  = УдалитьЦифрыВСтрокеИПараметры(СтрокаПоиска, ".,");
	//ПроцентВхожденияЦифр = Окр((1-СтрДлина(СтрокаПоискаБезЦифр)/СтрДлина(СтрокаПоиска)), 2); // 100*
	
	МассивОбязательныхСлов = Новый Массив;
	//МассивСлов = РазложитьСтрокуВМассивСлов(СтрокаПоиска, " ;:-");
	Для каждого Слово Из МассивСлов Цикл
		Если ТолькоЦифрыВСтроке(Слово) Тогда	
			МассивОбязательныхСлов.Добавить(Слово);
		КонецЕсли;			
	КонецЦикла;	

	КоличествоОбязательныхСлов = МассивОбязательныхСлов.Количество();
	
	ЧастьОтОбщейДлиныСлова = 0;
	к = 0;
	Если КоличествоОбязательныхСлов>0 Тогда
		Для каждого Слово Из МассивОбязательныхСлов Цикл
			//СловоНайдено = СтрНайти(СтрокаНоменклатуры, Слово)>0; ошибка!
			СловоНайдено = МассивСловНоменклатуры.Найти(Слово)<>Неопределено;
			Если СловоНайдено Тогда
				к = к + 1;
				ЧастьОтОбщейДлиныСлова = ЧастьОтОбщейДлиныСлова + СтрДлина(Слово)/ДлинаСтрокиПоиска; // коэффициент
				//Если (СтрДлина(Слово)/ДлинаСтрокиПоиска)>0.25 Тогда
				//	к = к + 1; // увеличиваем значимость найденного слова		
				//КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если КоличествоОбязательныхСлов=0 Тогда
		Результат = -1;			
	ИначеЕсли КоличествоОбязательныхСлов=к Тогда
		Результат = 100;
	Иначе
		Результат = Окр(100*к/КоличествоОбязательныхСлов,2); // 100*
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//																ТЕСТИРОВАНИЕ

&НаКлиенте
Процедура ПоискДвумяВариантами(Команда)
	
	//АнализРезультатов.Очистить();
	
	РезультатыПоиска.Очистить();
	
	СтарыйВариантПоиска = Истина;
	НайтиЭлементы(Неопределено);
	
	Если Команда = Неопределено Тогда
		РезультатыПоиска.Очистить();	
	КонецЕсли;
	
	СтарыйВариантПоиска = Ложь;
	//ИспользоватьПерестановки = Ложь;
	НайтиЭлементы(Неопределено);
	
	
	//РезультатыПоиска.Очистить();
	//СтарыйВариантПоиска = Ложь;
	//ИспользоватьПерестановки = Истина;
	//НайтиЭлементы(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматизированныйТест(Команда)
	
	Элементы.Группа3.ТекущаяСтраница = Элементы.Группа5;
	
	СоздатьНомеклатуруДляЗапросов(Неопределено);
	
	АнализРезультатов.Очистить();
	ИтогВремяН=0; 
	ИтогВремяС=0;
	
	МассивПоисковыхЗапросов = ПолучитьМассивыЗапросов().МассивПоисковыхЗапросов;
		
	Для каждого Запрос Из МассивПоисковыхЗапросов Цикл
		СтрокаПоиска = Запрос;
		ПоискДвумяВариантами(Неопределено);
	КонецЦикла;
	
	ПроверитьРезультатыТеста(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура АвтоматизированныйТест1000НаСервере(МассивЗапросов)
	
	//МассивЗапросов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
		|	Номенклатура.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование ПОДОБНО ""р% %а% %[0-9][0-9][0-9][0-9]%""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
		|	Номенклатура.Наименование
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование ПОДОБНО ""%[б-д]% %к% %ф% ""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
		|	Номенклатура.Наименование
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование ПОДОБНО ""[к-м]% %а% %у%""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
		|	Номенклатура.Наименование
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование ПОДОБНО ""[л-п]% %[0-9][0-9][0-9][0-9]%[0-9][0-9][0-9]% %[0-9][0-9][0-9][0-9]%[0-9][0-9][0-9]%""
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
		|	Номенклатура.Наименование
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование ПОДОБНО ""[и-н]% %[0-9][0-9][0-9][0-9]% %[0-9][0-9][0-9]% %[0-9][0-9][0-9][0-9]% """;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	к = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Наименование = ВыборкаДетальныеЗаписи.Наименование;
		
		МассивСлов = РазложитьСтрокуВМассивСлов(Наименование, " ");
		Если МассивСлов.Количество()<4 Тогда Продолжить; КонецЕсли;
		НовыйЗапрос = "";
		Для сч = 1 по МассивСлов.Количество() Цикл
			Если (к%3=0 и сч = 2) ИЛИ (к%7=0 и сч = 1) ИЛИ (к%8=0 и сч = 3) ИЛИ (к%11=0 и сч = МассивСлов.Количество() ) Тогда
				Продолжить;
			КонецЕсли;
			Если к%17=0 Тогда
				НовыйЗапрос = ""+МассивСлов.Получить(сч-1)+" "+НовыйЗапрос+" ";
			ИначеЕсли к%13=0 И сч%2=0 Тогда
				НовыйЗапрос = ""+МассивСлов.Получить(сч-1)+" "+НовыйЗапрос+" ";
			Иначе
				НовыйЗапрос = ""+НовыйЗапрос+МассивСлов.Получить(сч-1)+" ";
			КонецЕсли;
		КонецЦикла;
		МассивЗапросов.Добавить(СокрЛП(НовыйЗапрос));
		к = к + 1;
		Если к = 100 Тогда
			Прервать;		
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматизированныйТест1000(Команда)
	
	Элементы.Группа3.ТекущаяСтраница = Элементы.Группа5;
	
	АнализРезультатов.Очистить();
	ИтогВремяН=0; ИтогВремяС=0;
	
	МассивЗапросов = Новый Массив;
	АвтоматизированныйТест1000НаСервере(МассивЗапросов);
	
	Для каждого Запрос Из МассивЗапросов Цикл
		СтрокаПоиска = Запрос;
		ПоискДвумяВариантами(Неопределено);
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Функция ПолучитьМассивСловИзМакетаНаСервере(Область)

	МассивСлов = Новый Массив;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект"); 
	Макет = ОбработкаОбъект.ПолучитьМакет("ТестПоиска");
	ОбластьЯчеек = Макет.ПолучитьОбласть(Область);
	Для сч = 1 По ОбластьЯчеек.ВысотаТаблицы Цикл
		ТекстЯчейки = ОбластьЯчеек.Область(сч,1,сч,1).Текст;
		Если ТекстЯчейки<>"" Тогда
			МассивСлов.Добавить(ТекстЯчейки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСлов;	

КонецФункции // ПолучитьМассивСлов()


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 										Создание удаление номенклатуры для тестирования
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура СоздатьНомеклатуруДляЗапросов(Команда)
	
	ИмяРеквизитаДляПометкиТеста = ВернутьИмяРеквизитаНоменклатурыДляПометкиНоменклатуры();
	Если ИмяРеквизитаДляПометкиТеста = "" Тогда
		Сообщить("Проведение теста на данной конфигурации невозможно!");
		Возврат;
	КонецЕсли;
	
	// создаем верные варианты:
	МассивЗапросов = ПолучитьМассивыЗапросов();
	
	Для каждого Запрос Из МассивЗапросов.МассивВерныхРезультатов Цикл
		СоздатьНайтиКарточкуНоменклатуры(Запрос, ИмяРеквизитаДляПометкиТеста);
	КонецЦикла;
	
	// создаем НЕверные варианты:
	Для каждого Запрос Из МассивЗапросов.МассивНеВерныхРезультатов Цикл
		СоздатьНайтиКарточкуНоменклатуры(Запрос, ИмяРеквизитаДляПометкиТеста);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьНайтиКарточкуНоменклатуры(Наименование, ИмяРеквизитаДляПометкиТеста)

	ТекстОписанияКомментария = "###ЗагрузкаДокументов###ТестПоиска###";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат Истина;	
	КонецЕсли;

	РеквизитыНоменклатуры = Метаданные.Справочники.Номенклатура.Реквизиты;
	
	// Создаем карточку номенклатуры
	НоваяКарточка = Справочники.Номенклатура.СоздатьЭлемент();	
	НоваяКарточка.Наименование = Наименование;
	
	Если РеквизитыНоменклатуры.Найти("НаименованиеПолное")<>Неопределено Тогда
		НоваяКарточка.НаименованиеПолное = Наименование;
	КонецЕсли;
	
	Попытка
		Если РеквизитыНоменклатуры.Найти("СтавкаНДС")<>Неопределено Тогда
			НоваяКарточка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		Если РеквизитыНоменклатуры.Найти("ВидНоменклатуры")<>Неопределено Тогда
			НоваяКарточка.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиСоздатьЭлементыТовар();
		КонецЕсли;
		
		Если РеквизитыНоменклатуры.Найти("ЕдиницаИзмерения")<>Неопределено Тогда
			НоваяКарточка.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПолучитьЕдиницуИзмеренияПоУмолчанию();
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	НоваяКарточка[ИмяРеквизитаДляПометкиТеста] = ТекстОписанияКомментария;
	
	НоваяКарточка.ОбменДанными.Загрузка = Истина; // нам нужно только искать 
	
	Попытка
		НоваяКарточка.Записать();
		Сообщить("Создана номенклатура: "+Наименование, СтатусСообщения.Информация);
		Возврат Истина;	
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции // СоздатьНайтиКарточкуНоменклатуры()

&НаКлиенте
Процедура УдалитьНоменклатуруДляТестов(Команда)
	
	ИмяРеквизитаДляПометкиТеста = ВернутьИмяРеквизитаНоменклатурыДляПометкиНоменклатуры();
	Если ИмяРеквизитаДляПометкиТеста = "" Тогда
		Сообщить("Проведение теста на данной конфигурации невозможно!");
		Возврат;
	КонецЕсли;

	МассивЗапросов = ПолучитьМассивыЗапросов();
	
	// удаляем верные варианты:
	Для каждого Запрос Из МассивЗапросов.МассивВерныхРезультатов Цикл
		УдалитьНоменклатуруДляТестовНаСервере(Запрос, ИмяРеквизитаДляПометкиТеста);
	КонецЦикла;
	
	// удаляем НЕверные варианты:
	Для каждого Запрос Из МассивЗапросов.МассивНеВерныхРезультатов Цикл
		УдалитьНоменклатуруДляТестовНаСервере(Запрос, ИмяРеквизитаДляПометкиТеста);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция УдалитьНоменклатуруДляТестовНаСервере(Наименование, ИмяРеквизитаДляПометкиТеста)
	
	ТекстОписанияКомментария = "###ЗагрузкаДокументов###ТестПоиска###";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование = &Наименование
		|	И Номенклатура."+ИмяРеквизитаДляПометкиТеста+" Подобно "+"""###ЗагрузкаДокументов###ТестПоиска###""";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;	
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Попытка
		Об = Выборка.Ссылка.ПолучитьОбъект();
		Об.Удалить();
		Сообщить("Удалена номенклатура: "+Наименование, СтатусСообщения.Информация);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;	
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьИмяРеквизитаНоменклатурыДляПометкиНоменклатуры()
	
	Результат = "";
	Если Метаданные.Справочники.Номенклатура.Реквизиты.Найти("Комментарий")<>Неопределено Тогда
		Результат = "Комментарий";
	ИначеЕсли Метаданные.Справочники.Номенклатура.Реквизиты.Найти("Описание")<>Неопределено Тогда
		Результат = "Описание";
	//Иначе
	КонецЕсли;

	Возврат Результат;
	
КонецФункции // ()

&НаСервере
Функция ПолучитьМассивыЗапросов()

	// ♣ //
	МассивПоисковыхЗапросов = ПолучитьМассивСловИзМакетаНаСервере("R3C2:R12C2");	
	МассивВерныхРезультатов = ПолучитьМассивСловИзМакетаНаСервере("R3C4:R12C4");	
	МассивНеВерныхРезультатов = ПолучитьМассивСловИзМакетаНаСервере("R3C6:R16C6");
	
	Возврат Новый Структура("МассивПоисковыхЗапросов, МассивВерныхРезультатов, МассивНеВерныхРезультатов", МассивПоисковыхЗапросов, МассивВерныхРезультатов, МассивНеВерныхРезультатов);

КонецФункции // ПолучитьМассивыЗапросов()

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 										Результаты теста
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПроверитьРезультатыТеста(Команда)
	
	РезультатТеста = "";
	
	РезультатВремя = ?(ИтогВремяН/АнализРезультатов.Количество()-ИтогВремяС/АнализРезультатов.Количество()<3, Истина, Ложь);
	
	//КоличествоЭталонныхЗначенийСтарый = 0;
	//КоличествоЭталонныхЗначенийНовый  = 0;
	РезультатПоиска = Истина;
	МассивыЗапросов = ПолучитьМассивыЗапросов();
	Для каждого ТекСтрока Из АнализРезультатов Цикл
		ИндексПоисковогоЗапроса = МассивыЗапросов.МассивПоисковыхЗапросов.Найти(ТекСтрока.Запрос);
		Если ИндексПоисковогоЗапроса=Неопределено Тогда
			Сообщить("Запрос: "+ТекСтрока.Запрос+" отсутствует в эталонной таблице! Определение результата может быть некорректным!!");
			Продолжить;
		КонецЕсли;
		
		ЭталонноеЗначение = МассивыЗапросов.МассивВерныхРезультатов.Получить(ИндексПоисковогоЗапроса);
		
		ВремРезультатСравнения = ?(СокрЛП(ТекСтрока.РезультатНовый) = ЭталонноеЗначение, 1, 0) - ?(СокрЛП(ТекСтрока.РезультатСтарый) = ЭталонноеЗначение, 1, 0);
		РезультатПоиска = ?(ВремРезультатСравнения<0, Ложь, РезультатПоиска);
		//КоличествоЭталонныхЗначенийСтарый = КоличествоЭталонныхЗначенийСтарый +?(СокрЛП(ТекСтрока.РезультатСтарый) = ЭталонноеЗначение, 1, 0);
		//КоличествоЭталонныхЗначенийНовый  = КоличествоЭталонныхЗначенийНовый  +?(СокрЛП(ТекСтрока.РезультатНовый) = ЭталонноеЗначение, 1, 0);
		
	КонецЦикла;
	
	РезультатТеста = ?(РезультатПоиска И РезультатВремя, "Тест пройден!", "Тест не пройден: "+?(РезультатПоиска, "", "Не найдены эталонные значения! ")+?(РезультатВремя, "", "Слишком долгое выполнение!"));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// функция преобразования массива стуктур строк в таблицу значений
//
// параметры:
//  МассивСтуктурСтрок, тип "Массив", где каждый элемент - структура, ключи которой являются именами колонок таблицы 
//
// возвращаемое значение: таблица значений
//
&НаСервереБезКонтекста
Функция ПреобразоватьМассивСтуктурСтрокВТаблицуЗначений(МассивСтуктурСтрок) Экспорт
	
	Если МассивСтуктурСтрок = Неопределено Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	ТаблицаЗначений = Новый ТаблицаЗначений;
	Для Каждого СтуктураСтроки Из МассивСтуктурСтрок Цикл
		НоваяСтрока = ТаблицаЗначений.Добавить();
		Для Каждого ЭлементСтруктуры Из СтуктураСтроки Цикл
			Если ТаблицаЗначений.Колонки.Найти(ЭлементСтруктуры.Ключ) = Неопределено Тогда
				ТаблицаЗначений.Колонки.Добавить(ЭлементСтруктуры.Ключ);
			КонецЕсли;
			НоваяСтрока[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
		КонецЦикла;		
	КонецЦикла;		
		
	Возврат ТаблицаЗначений;

КонецФункции

// функция преобразования таблицы значений в массив стуктур строк
//
// параметры:
//    ТаблицаЗначений - любая таблица значений
//
// возвращаемое значение: 
//    МассивСтуктурСтрок, тип "Массив", где каждый элемент - структура, ключи которой являются именами колонок таблицы 
//
&НаСервереБезКонтекста
Функция ПреобразоватьТаблицуЗначенийВМассивСтруктур(ТаблицаЗначений)
	
	МассивСтрок = Новый Массив();
	Для Каждого Элемент Из ТаблицаЗначений Цикл
		СтруктураСтроки = Новый Структура();
		Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			СтруктураСтроки.Вставить(Колонка.Имя, Элемент[Колонка.Имя]);
		КонецЦикла;	
		МассивСтрок.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат МассивСтрок;
	
КонецФункции
