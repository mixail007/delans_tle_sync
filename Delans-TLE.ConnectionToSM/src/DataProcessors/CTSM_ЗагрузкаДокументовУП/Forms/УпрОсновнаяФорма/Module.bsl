
&НаКлиенте                                                                                                
Перем 
НачальноеКоличествоГотовых, 			//Начальное количество готовых документов к загрузке 
КоличествоОшибок,  						//Счетчик количества ошибок при получении документов
ТекущаяСтрокаЯчейки, 					//Текущая строка в таблице "ДокументыТаблица"
КоличествоВыделенныхСтрокДерева, 		//Запоминает количество выделеных строк в таблице "ДокументыТаблица"                    
ДиалогМассивВыбранныхФайлов,			//Массив выделеных файлов для распознавания
БезРаспознавания,                       //Признак отправки без распознавания
МассивДопустимыхРасширений,    			//Массив масок файлов доступных для распознавания
ЗакрытиеПриЗапуске,   					//Признак закрытия во время запуска
СтароеЗначениеЭлементаРеквизитыШапки,	//Запоминает значение ячейки в таблице "РеквизитыШапки" до изменения
СтароеЗначениеЭлементаРеквизитыТЧ,    	//Запоминает значение ячейки в таблице  "РеквизитыТЧ" до изменения
ВыполненоСохранениеНастроек,   			//Признак сохранения настроек перед закрытием формы
ВремяНачалаОперации,                    //Используется для замера времени выполнения метода
МассивФайловВОчередиНаПечать,           //Используется для очереди файлов на печать
ВременныйКаталогЭкспорта,               //Каталог для сохранения файлов для веб     
ПоискДубляОжидание,
СозданыНовыеЭлементы,
ПолученоКоличествоВАрхиве,
КаталогЭкспорта;                        //Каталог для сохранения файлов
 
&НаКлиенте                                                                                                        
Перем ПервоеПолучениеСеанса Экспорт;   	//Признак первого получения документа в рамках сеанса  
&НаКлиенте   
Перем МассивГотовых Экспорт;   			//Массив готовых к загругрузке документов                 
&НаКлиенте   
Перем ESDLADLHTTP Экспорт;  			//HTTPСоединение сервиса ADL
&НаКлиенте   
Перем ESDLCoreHTTP Экспорт;  			//HTTPСоединение сервиса Core
&НаКлиенте   
Перем НеАктивизироватьСтроку Экспорт;   //Используется для деактивации текущей строки в таблице

&НаКлиенте
Перем ПервоеОтображение;  // признак первого отображения формы

&НаКлиенте
Перем АктивнаяСтрокаДерева;  // активная строка ДеревоДокументов

&НаКлиенте
Перем ДеревоТекущаяСтрока;   // текущая строка ДеревоДокументов

//&НаКлиенте
//Перем ПрикреплятьФайлКДокументу; //Определяет, нужно ли прикреплять файл к документу

&НаСервере
Перем ТаблицаОписанияДокумента; //Таблица описания документов



//////////////////////////////////////////////////////////////////////////////////////////////
//Открытие и закрытие Основной формы
//////////////////////////////////////////////////////////////////////////////////////////////

// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	                                                  
	МодульЭтойОбработки = РеквизитФормыВЗначение("Объект");
	РегистрационныеДанные = МодульЭтойОбработки.СведенияОВнешнейОбработке();	
	ВерсияПрограммы = РегистрационныеДанные.Версия;
	//ЗапускаемаяОбработка = РегистрационныеДанные.ИспользуемоеИмяФайла;
	ВерсияКонфигурации = РегистрационныеДанные.ВерсияКонфигурации;
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПриложения = СистемнаяИнформация.ВерсияПриложения;
	МетаданныеИмя = Метаданные.Имя;
	ПользовательИнфБазы = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;             
	ПользовательИнфБазыИД = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	РежимСовместимости = РегистрационныеДанные.РежимСовместимости;
	РежимСовместимостиНиже838 = Ложь;
	Если РежимСовместимости = "Версия8_3_5" Или РежимСовместимости = "Версия8_3_6"
		ИЛИ РежимСовместимости = "Версия8_3_7" Тогда
		Если РежимСовместимости = "Версия8_3_5" Тогда
			РежимСовместимости = "8.3.5";                                                                                  
		ИначеЕсли РежимСовместимости = "Версия8_3_6" Тогда
			РежимСовместимости = "8.3.6";
		Иначе	
			РежимСовместимости = "8.3.7";
		КонецЕсли;
		РежимСовместимостиНиже838 = Истина;
	КонецЕсли;
	ВерсияНиже838 = СравнитьВерсии(ВерсияПриложения, "8.3.8.0") ИЛИ РежимСовместимостиНиже838;
	ТекущаяСтраницаСписка = 1;
	//КолДокСтраница = 25;
	
	//Элементы.КоманднаяПанельФормыИБаланс.Доступность = Ложь;
	
	//ХранилищеРазрешениеПередачиФайловИнтернет = ХранилищеНастроекДанныхФорм.Загрузить("ESDLРазрешения", "РазрешениеПередачиФайловИнтернет");
	//Если ХранилищеРазрешениеПередачиФайловИнтернет <> Неопределено И ТипЗнч(ХранилищеРазрешениеПередачиФайловИнтернет) = Тип("Булево") Тогда
	//	РазрешениеПередачиФайловИнтернет = ХранилищеРазрешениеПередачиФайловИнтернет;
	//КонецЕсли;
	РазрешениеПередачиФайловИнтернет = Истина;
	
	// veda@1c.ru 2016-03-28 Оставим команду проверки безопасного режима для не только лишь всех
	ВидимостьКомандыПроверкиБезопасногоРежима = ХранилищеНастроекДанныхФорм.Загрузить("ESDLРазрешения", "ВидимостьКомандыПроверкиБезопасногоРежима");
	Если ВидимостьКомандыПроверкиБезопасногоРежима = Истина Тогда
		//Элементы._1сбо_ПроверкаБезопасногоРежима.Видимость = Истина;
	КонецЕсли;
	//ИспользоватьВстроеннуюАвторизацию = Метаданные.ОбщиеФормы.Найти("EfsolФормаАвторизации") <> Неопределено;
	
	КопироватьВБуфер = "<HTML><HEAD><META content=""text/html; charset=utf-8"" http-equiv=Content-Type><META name=GENERATOR content=""MSHTML 11.00.9600.18349""></HEAD><BODY style=""OVERFLOW: hidden; PADDING-TOP: 10px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px""></BODY></HTML>";	

	Если Метаданные.Константы.Найти("EFSOL_ИДБазыДанных")<>Неопределено  Тогда
		ИДБазыДанныхПользователя = Константы.EFSOL_ИДБазыДанных.Получить();	
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события формы "ПриОткрытии".
//
&НаКлиенте                                                                                        
Процедура ПриОткрытии(Отказ)
		
	СозданыНовыеЭлементы = Ложь;
	//ПрикреплятьФайлКДокументу = Ложь;
	
	//ОкнаКП = ПолучитьОкна();
	//Для Каждого ОкноКП Из ОкнаКП Цикл
	//	Если ОкноКП.Заголовок = "ДокАрхив и Загрузка документов" Тогда
	//		Отказ = Истина;
	//		Возврат;
	//	КонецЕсли;
	//КонецЦикла; 	
	ТекущаяСтраницаСписка = 1;
	ВысотаЭкрана = ПолучитьИнформациюЭкрановКлиента()[0].Высота;
	Если ВысотаЭкрана < 1000 Тогда 	
		КолДокСтраница = 15;
	Иначе
		КолДокСтраница = 25;
	КонецЕсли;
	
	ЗакрытиеПриЗапуске = Истина;
	//Если Не РазрешениеПередачиФайловИнтернет И Не RICOH Тогда
	//	ПодключитьОбработчикОжидания("ПриОткрытииПолучитьРазрешение", 0.1, Истина);
	//Иначе
		ПриОткрытииПолученоРазрешение();
	//КонецЕсли;
	
	ПоискДубляОжидание = Ложь;
					
	СимволТочка = ".";
	ПозицияТочки = СтрДлина(ЭтаФорма.ИмяФормы);
	Пока Сред(ЭтаФорма.ИмяФормы, ПозицияТочки, 1) <> СимволТочка Цикл 
		ПозицияТочки = ПозицияТочки - 1; 
	КонецЦикла; 
	ПрефиксИмениФорм = Лев(ЭтаФорма.ИмяФормы, ПозицияТочки);
	   
КонецПроцедуры

// Процедура открывает форму УпрФормаРазрешениеПередачиФайловИнтернет
//
&НаКлиенте                                                                                        
Процедура ПриОткрытииПолучитьРазрешение()

	ОткрытьФорму(ПрефиксИмениФорм + "УпрФормаРазрешениеПередачиФайловИнтернет", , ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СправкаОткрыть(Команда)
	
	ОткрытьФорму(ПрефиксИмениФорм + "УпрФормаСправка", Новый Структура("RICOH", RICOH), ЭтаФорма);

КонецПроцедуры

// Процедура продолжает инициализацию программы после получения разрешения
//
&НаКлиенте                                                                                        
Процедура ПриОткрытииПолученоРазрешение() Экспорт
	
	Если Не РазрешениеПередачиФайловИнтернет Тогда
		Закрыть();
	Иначе	
		//Элементы.ГруппаОповещенияПользователя.Видимость = Истина;
		Состояние("Выполняется инициализация программы", 1);

		ВремяНачалаОперации = ТекущаяУниверсальнаяДатаВМиллисекундах(); 
		#Если НЕ ВебКлиент Тогда
			ESDLADLHTTP = HTTPConnection("ADL", beta);
			ESDLCoreHTTP = HTTPConnection("Core", beta);
		#Иначе
		#КонецЕсли
		Если НЕ СлужбаADL42Доступна(ЭтаФорма.УникальныйИдентификатор, Истина) И ProtectedMode Тогда
			ТекстПредупреждения = "Извините, сервис «Загрузка документов» временно недоступен." + Символы.ПС + "Пожалуйста, попробуйте позже";
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	
		НеАктивизироватьСтроку = Ложь;
		ВыполненоСохранениеНастроек = Ложь;
		ПервоеПолучениеСеанса = Истина;
		
		ОписаниеТиповУниверсальное = СформироватьОписаниеТиповУниверсальное();
		Состояние("Выполняется инициализация программы", 5);
		
		//  Масленников Е. (
		ДополнитьСтатистикуПараметрамиИБ();
		// ) Масленников Е.

		ПодключитьОбработчикОжидания("ПриОткрытииАвторизация",1,Истина);
	КонецЕсли;

КонецПроцедуры

// Подключение расширения работы с файлами
//
&НаКлиенте
Процедура ПриОткрытииПослеУстановкиРасширенияРаботыСФайлами(ДополнительныеПараметры = Неопределено) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииПослеПодключенияРасширенияРаботыСФайлами", ЭтаФорма);
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

// Процедура - обработчик оповещения после подключения расширения работы с файлами
//
&НаКлиенте
Процедура ПриОткрытииПослеПодключенияРасширенияРаботыСФайлами(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ Результат Тогда
		Если НЕ ОтказОтУстановкиРасширенияРаботыСФайлами Тогда
			ТекстВопроса = "Для удобной работы с программой предлагается установить расширение для веб-клиента 1С:Предприятие." + Символы.ПС + "Установить?";
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("Установить и продолжить");
			Кнопки.Добавить("Продолжить без установки");
			Кнопки.Добавить("Больше не напоминать");
			ОписаниеОповещения = Новый ОписаниеОповещения("УстановкаРасширенияРаботыСФайламиОтветНаВопрос", ЭтаФорма);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,, Кнопки[0].Значение, "Установка расширения работы с файлами");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановкаРасширенияРаботыСФайламиОтветНаВопрос(Ответ, ДопПараметры = Неопределено) Экспорт
	
	Если Ответ = "Установить и продолжить" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииПослеУстановкиРасширенияРаботыСФайлами", ЭтаФорма);
		НачатьУстановкуРасширенияРаботыСФайлами(ОписаниеОповещения);
	ИначеЕсли Ответ = "Больше не напоминать" Тогда
		ОтказОтУстановкиРасширенияРаботыСФайлами = Истина;
	КонецЕсли;

КонецПроцедуры


//Процедура открывает форму авторизации
//
&НаКлиенте
Процедура ПриОткрытииАвторизация()
	
	Если ИспользоватьВстроеннуюАвторизацию Тогда
		ОткрытьФорму("ОбщаяФорма.EfsolФормаАвторизации",,ЭтаФорма);
	Иначе
		ОткрытьФорму(ПрефиксИмениФорм + "УпрАвторизация", , ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

//Процедура продолжает инициализацию программы после авторизации
//
&НаКлиенте
Процедура ПриОткрытииПослеАвторизации(Результат, ДопПараметры = Неопределено) Экспорт
	
	Состояние("Выполняется инициализация программы", 10);

	ТекстПредупреждения = "";
	Если Результат.АвторизацияПройдена Тогда
		ESDLИДПользователя = Результат.ESDLИДПользователя;
		ESDLEmailПользователя = Результат.ESDLEmailПользователя;
		ESDLPhoneNumberПользователя = Результат.ESDLPhoneNumberПользователя;
		ESDLТокен = Результат.ESDLТокен;
		ESDLИДАккаунта = Результат.ESDLИДАккаунта;
		ESDLФИОПользователя = Результат.ESDLФИОПользователя;
		Если ЗначениеЗаполнено(ESDLФИОПользователя) Тогда
			Элементы.Пользователь.Заголовок = ESDLФИОПользователя;
		Иначе
			Элементы.Пользователь.Заголовок = Результат.Логин;
		КонецЕсли;

		ПоискНезагруженных();
	Иначе
		ТекстПредупреждения = ?(ProtectedMode, "Извините, сервис «Загрузка документов 42» временно недоступен. Пожалуйста, попробуйте позже", "Не пройдена авторизация");
		Перейти ~ВыходПриОткрытии;
	КонецЕсли;

	Если ИДБазыДанныхПользователя = "" Тогда
		СтруктураПараметров = Новый Структура("ListOrganizationsIDs, AcDBConnectionString", ПолучитьСсылкиОрганизаций(), СтрокаСоединенияИнформационнойБазы());
		СтрокаЗапроса = "/adl42/hs/api_v1/AccauntDataBases/IdentifyDatabase";
		ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", СтруктураПараметров);
		Если ПараметрыОтвета.КодОтвета = 200 Тогда
			ИДБазыДанныхПользователя = ПараметрыОтвета.СтруктураОтвета.AccauntDataBaseID;  
		Иначе
			ТекстПредупреждения = "Ошибка при обращении к серверу: " + ПараметрыОтвета.СтруктураОтвета.Description;
			Перейти ~ВыходПриОткрытии;
		КонецЕсли;
	КонецЕсли;
	
	Состояние("Выполняется инициализация программы", 20);

	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#Иначе
		ЭтоВебКлиент = Ложь;
	#КонецЕсли
	
	СтрокаЗапроса = "/adl42/hs/api_v1/TemplatesName/GetTemplateName?ConfigurationVersion=" + ВерсияКонфигурации + "&ConfigurationName=" + МетаданныеИмя + "&AccauntDataBaseID=" + ИДБазыДанныхПользователя;
	ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса);
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		ИмяФайлаШаблона = ПараметрыОтвета.СтруктураОтвета.TemplateName; 
		ИмяШаблона = СтрЗаменить(ИмяФайлаШаблона, ".epf", "");             
		Если ИмяФайлаШаблона = "" Тогда
			ТекстПредупреждения = "Конфигурация " + МетаданныеИмя + " версии " + ВерсияКонфигурации + " не поддерживается сервисом";
			Перейти ~ВыходПриОткрытии;
		КонецЕсли;
	Иначе
		ТекстПредупреждения = "Ошибка при обращении к серверу: " + ПараметрыОтвета.СтруктураОтвета.Description;
		Перейти ~ВыходПриОткрытии;
	КонецЕсли;
	
	Состояние("Выполняется инициализация программы", 30);
	
	СтрокаЗапроса = "/adl42/hs/api_v1/AccauntDataBases/GetUserSettings?AccauntDataBaseID=" + ИДБазыДанныхПользователя + "&DatabaseUserID=" + ПользовательИнфБазыИД;
	ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса,,,,Истина);
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		XMLНастроек = ПараметрыОтвета.СтруктураОтвета.ТелоОтветаСтрока;
	Иначе
		XMLНастроек = Неопределено;
	КонецЕсли;
	
	Состояние("Выполняется инициализация программы", 40);

	ПолучитьИЗаполнитьНастройки(XMLНастроек);
	ОтобразитьОтборы();

	Состояние("Выполняется инициализация программы", 50);
	
	//Элементы.ФлажокСловарьПоНаименованиям.Доступность = ИспользоватьСловарь;
	//Элементы.ОткрытьСловарь.Доступность = ИспользоватьСловарь;

	
	СтруктураСпособовСопоставления = Новый Структура;
	СтруктураСпособовСопоставления.Вставить("Имя0", "не сопоставлялся");
	СтруктураСпособовСопоставления.Вставить("Имя1", "значение из ТЗ правил");
	СтруктураСпособовСопоставления.Вставить("Имя2", "простой поиск");
	СтруктураСпособовСопоставления.Вставить("Имя3", "нечеткий поиск");
	СтруктураСпособовСопоставления.Вставить("Имя4", "создан новый");
	СтруктураСпособовСопоставления.Вставить("Имя5", "словарь");
	СтруктураСпособовСопоставления.Вставить("Имя6", "элемент найден по коду");
	СтруктураСпособовСопоставления.Вставить("Имя7", "ссылка удалена и задано наименование нового элемента");
	СтруктураСпособовСопоставления.Вставить("Имя8", "изменили вручную");
	СтруктураСпособовСопоставления.Вставить("Имя9", "прошел все и не сопоставился");
	СтруктураСпособовСопоставления.Вставить("ИмяА", "элемент найден по артикулу");

	МассивДопустимыхРасширений = Новый Массив();
	МассивДопустимыхРасширений.Добавить("xls");
	МассивДопустимыхРасширений.Добавить("xlsx");
	МассивДопустимыхРасширений.Добавить("jpg");
	МассивДопустимыхРасширений.Добавить("jpeg");
	МассивДопустимыхРасширений.Добавить("bmp");
	МассивДопустимыхРасширений.Добавить("png");
	МассивДопустимыхРасширений.Добавить("tif");
	МассивДопустимыхРасширений.Добавить("tiff");
	МассивДопустимыхРасширений.Добавить("gif");
	МассивДопустимыхРасширений.Добавить("jpe");
	МассивДопустимыхРасширений.Добавить("pdf");
	
	МассивФайловВОчередиНаПечать = Новый Массив;
	
	МассивГотовых = Новый Массив;

	ИзмененоРазвернутьТЧ = Ложь;

	//Если ПоказыватьИсходныеЗначения Тогда
	//	//Элементы.РеквизитыШапкиИсходноеЗначение.Видимость = Истина;
	//Иначе
	//	//Элементы.РеквизитыШапкиИсходноеЗначение.Видимость = Ложь;
	//КонецЕсли;	
	//Элементы.РеквизитыШапкиИсходноеЗначение.РедактированиеТекста = Ложь;
	//
	//Элементы.УдалитьДокумент.Доступность = Ложь;
	//
	//Элементы.КоманднаяПанельФормыИБаланс.Доступность = Истина;
	
	Состояние("Выполняется инициализация программы", 55);

	ОбновитьДокументыТаблица();
	
	Состояние("Выполняется инициализация программы", 70);
	
	Если ЭтоВебКлиент Тогда
		//Элементы.ДобавитьИзФайлов.Картинка = БиблиотекаКартинок.ОткрытьФайл;
	КонецЕсли;
	
	КоличествоОшибок = 0;
	
	~ВыходПриОткрытии:
	Если ТекстПредупреждения <> "" Тогда
		ПоказатьОповещениеПользователя(ИмяПрограммы, , ТекстПредупреждения);
		ЭтаФорма.Закрыть();
		Возврат;
	Иначе
		//Элементы.ГруппаОповещенияПользователя.Видимость = Ложь;
		ИнициализацияЗавершена = Истина;
		ДокументыТаблицаПриАктивизацииЯчейки(Неопределено, Истина);	
		ЗакрытиеПриЗапуске = Ложь;
		Инициализирована = Истина;
		Оповестить("ОткрытаФормаЭРЗД");
		
		//Если beta Тогда
		//	HTMLПризывКДействию = 
		//	"<HTML><BODY style=""OVERFLOW: hidden"">
		//	|<center><P><IMG src=""http://beta-adl.42clouds.com/adl42/hs/api_v1/DocLoaderFiles/GetTheUpdateFile?DocLoaderFileID=ПризывКДействию"" width=""70%"" height=""auto""></IMG></P></center>
		//	|<P></P><TABLE borderColor=#ffffff width=""100%"">
		//	|<TBODY><TR><TD>
		//	|<P align=""right"" margin=""50px""><A href=""https://beta.42clouds.com/ru-ru/manuals/esdl/"">Инструкции</A></P></TD>
		//	|<TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TD></TR></TBODY></TABLE>
		//	|</BODY></HTML>";
		//Иначе
		//	HTMLПризывКДействию = 
		//	"<HTML><BODY style=""OVERFLOW: hidden"">
		//	|<center><P><IMG src=""http://adl.42clouds.com/adl42/hs/api_v1/DocLoaderFiles/GetTheUpdateFile?DocLoaderFileID=ПризывКДействию"" width=""70%"" height=""auto""></IMG></P></center>
		//	|<P></P><TABLE borderColor=#ffffff width=""100%"">
		//	|<TBODY><TR><TD>
		//	|<P align=""right"" margin=""50px""><A href=""https://42clouds.com/ru-ru/manuals/esdl/"">Инструкции</A></P></TD>
		//	|<TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TD></TR></TBODY></TABLE>
		//	|</BODY></HTML>";
		//	
		//КонецЕсли;
		
		Состояние("Выполняется инициализация программы", 80);

	
		Состояние("Выполняется инициализация программы", 85);

		Состояние("Выполняется инициализация программы", 90);

	КонецЕсли;
	
	ТекстПредупреждения = "";
	Если НЕ ЭтоВебКлиент Тогда
		Если НЕ СлужбаADL42Доступна(ЭтаФорма.УникальныйИдентификатор, Истина) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
	Иначе
		//Элементы.СсылкаНаИзображение.Видимость = Ложь;
		//Элементы.HTMLФайлДокумента.Видимость = Истина;
		//Элементы.ВыборДействия.Ширина = 7;
	КонецЕсли;
	
	СписокРасширений.Добавить("BMP");
	СписокРасширений.Добавить("GIF");
	СписокРасширений.Добавить("JPE");
	СписокРасширений.Добавить("JPEG");
	СписокРасширений.Добавить("JPG");
	СписокРасширений.Добавить("PDF");
	СписокРасширений.Добавить("PNG");
	СписокРасширений.Добавить("TIF");
	СписокРасширений.Добавить("TIFF");
	           
	Пользователь = ESDLИДПользователя;
	
	//Проверка ДокАрхива
	СтруктураРесурсов = ПолучитьДанныеОРесурсах();
	//ЛицензияАДЛ = СтруктураРесурсов.КоличествоДнейДатаДокАрхив;
	//ADL = ЛицензияАДЛ <> 0;
	ADL = Истина;
	//Если ЛицензияАДЛ>-45 И ЛицензияАДЛ<0 Тогда
	//		Предупреждение("У Вас закончился срок действия лицензии на сервис ДокАрхив. Пожалуйста обновите лицензию или в противоположном случае Ваши документы будут удалены с сервиса ДокАрхив!");
	//КонецЕсли;
		
	Если ADL Тогда
		//Если ЛицензияАДЛ<30 И ЛицензияАДЛ>=0 Тогда
		//	Предупреждение("У Вас заканчиваеться лицензия на сервис ДокАрхив. До окончания действия лицензии осталось "+ЛицензияАДЛ+" дней, после чего даный сервер будет отключен. Пожалуйста обновите лицензию.");
		//КонецЕсли;
		ПользовательМенеджер = Ложь;
		Элементы.ОрганизацииИДоступы.Видимость = Истина;
		ЗаполнитьТаблицуОрганизаций = Ложь;
		ЗаполнитьСписокОрганизаций(ЗаполнитьТаблицуОрганизаций);	
		СтрокаЗапроса = "/api_v2/AccountUsers/CheckAdminUserRole?accountUserID=" + Пользователь;
		ПараметрыОтвета = ВыполнитьЗапрос("ESDLCoreHTTP", СтрокаЗапроса);                 	
		Если ПараметрыОтвета.КодОтвета = 200 Тогда
			Если ПараметрыОтвета.СтруктураОтвета.AdminUserRole="true" Тогда
				ПользовательМенеджер = Истина;
				Если ЗаполнитьТаблицуОрганизаций И Не ОтказЗаполненияСпискаОрганизаций Тогда
					ТекстВопроса = "Для использования ДокАрхива Вам необходимо настроить доступы пользователей к документам организаций." 
					+ Символы.ПС + "Список организаций пуст. Выберите один из вариантов заполнения списка организаций";
					ЗаголовокОкнаВопроса = "Добавление оргнизаций аккаунта";
					
					Кнопки = Новый СписокЗначений;
					Кнопки.Добавить("Экспорт", "Экспорт организаций из базы");
					Кнопки.Добавить("Форма", "Открыть форму настройки доступов");
					Кнопки.Добавить("Отказ", "Больше не предлагать");
					Кнопки.Добавить("Отмена");
					Оповещение = Новый ОписаниеОповещения("ОтветНаВопросДоступовОрганизаций", ЭтаФорма);
					ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки,, Кнопки[0].Значение, ЗаголовокОкнаВопроса);
				КонецЕсли;
			КонецЕсли;            
			СтрокаЗапроса = "/adl42/hs/api_v1/EDocumentsTypes/GetList";
			ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса);                 	
			Если ПараметрыОтвета.КодОтвета = 200 Тогда
				Для Каждого СтруктураТипаДокумента ИЗ ПараметрыОтвета.СтруктураОтвета.ListDocumentType Цикл
					//Элементы.Тип.СписокВыбора.Добавить(СтруктураТипаДокумента.DocumentTypeName, СтруктураТипаДокумента.DocumentTypeGroupName +" \ " + СтруктураТипаДокумента.DocumentTypeName);
					Элементы.Тип.СписокВыбора.Добавить(СтруктураТипаДокумента.DocumentTypeName, СтруктураТипаДокумента.DocumentTypeGroupName +" \ " + СтруктураТипаДокумента.DocumentTypeName);
				КонецЦикла;
			Иначе
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = ПараметрыОтвета.СтруктураОтвета.Description;
				СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
				СообщениеПользователю.Сообщить();
			КонецЕсли;
		Иначе
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = ПараметрыОтвета.СтруктураОтвета.Description;
			СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
			СообщениеПользователю.Сообщить();
		КонецЕсли;
	Иначе
		Элементы.ОрганизацииИДоступы.Видимость = Ложь;
		Элементы.ГруппаНеАрхив.Видимость = Ложь;
		Элементы.ГруппаАрхив.Видимость = Ложь;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////
	ПервоеОтображение = Истина;
	ПодключитьОбработчикОжидания("Обновить", 0.1, Истина);
	ПодключитьОбработчикОжидания("ПроверитьПерераспознаваемые", 30);
	
	СоздаватьДокументВида = СоздаватьДокументВида; 		
	
	ТекстСообщенияВерсия = "";
	Если ВерсияНиже838 Тогда
		ТекстСообщенияВерсия =  "Для оптимального отображения форм сервиса рекомендуем использовать версию платформы 1С:Предприятие 8 не ниже 8.3.8";
	ИначеЕсли Найти(РежимСовместимости, "8.3.") > 0 Тогда
		ТекстСообщенияВерсия = "Для оптимального отображения форм сервиса рекомендуем отключить режим совместимости с версиями платформы ниже 8.3.8";
	КонецЕсли;
	Если ТекстСообщенияВерсия <> "" Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст =  ТекстСообщенияВерсия;
		СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
	//Если НЕ ЭтоВебКлиент И НЕ НеДобавлятьВПФ Тогда
	//	ДобавитьВПФ();
	//КонецЕсли;

	НоваяСтрокаСтатистики                       = ТЗПоказателиРаботы.Добавить();
	НоваяСтрокаСтатистики.DateTime              = ТекущаяДата();
	НоваяСтрокаСтатистики.EventName             = "ЗапускПрограммы";
	//Ресурсы
	НоваяСтрокаСтатистики.User1C                = ПользовательИнфБазы;
	НоваяСтрокаСтатистики.ConfigurationVersion  = ВерсияКонфигурации;
	НоваяСтрокаСтатистики.ConfigurationName     = МетаданныеИмя;
	НоваяСтрокаСтатистики.ClientName            = "ESDL";
	НоваяСтрокаСтатистики.ClientVersion         = ВерсияПрограммы;
	НоваяСтрокаСтатистики.AccauntDataBaseID		= ИДБазыДанныхПользователя;
	//Реквизиты
	НоваяСтрокаСтатистики.StatisticalDataName0  = "ВерсияПриложения";
	НоваяСтрокаСтатистики.StatisticalDataValue0 = ВерсияПриложения;
	НоваяСтрокаСтатистики.StatisticalDataName1  = "РежимСовместимости";
	НоваяСтрокаСтатистики.StatisticalDataValue1 = РежимСовместимости;
	
	СтрокаЗапроса = "/adl42/hs/api_v1/CustomAccounts/Find?AccountID=" + ESDLИДАккаунта + "&Service=RICOH";
	ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса);
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		RICOH = ?(НРег(ПараметрыОтвета.СтруктураОтвета.Found) = "true", Истина, Ложь);
	КонецЕсли;
	ИмяПрограммы = ?(RICOH, "Ricoh ADL", "EFSOL:ДокАрхив и Загрузка документов");
	ЭтаФорма.Заголовок = ИмяПрограммы;
	Элементы.ОткрытьФайл.Видимость = НЕ RICOH;
	Элементы.КнопкаКопироватьВБуфер.Видимость = НЕ RICOH;
	//Элементы.ДобавитьИзФайлов.Видимость = НЕ RICOH;
	//Элементы.ВыборДействия.Видимость = НЕ RICOH;
	//Элементы.ПолучитьданныеДляОтправкиПисьмом1.Видимость = RICOH;
	Элементы.Группа3.Видимость = НЕ RICOH;
		
КонецПроцедуры


// Процедура выполняет оповещение о закрытии программы 
//
&НаКлиенте
Процедура ВыполнитьПередЗакрытием()
	
	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#Иначе
		ЭтоВебКлиент = Ложь;
	#КонецЕсли

	Если НЕ ЭтоВебКлиент Тогда
		КаталогНаДиске = Новый Файл(ВременныйКаталогЭкспорта);
		Если КаталогНаДиске.Существует() Тогда
			Попытка
				УдалитьФайлы(ВременныйКаталогЭкспорта);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗакрытиеПриЗапуске Тогда
		СохранитьНастрПользователя();  
	КонецЕсли;
	
	Если ТЗПоказателиРаботы.Количество() > 0 Тогда
		СтруктураПараметров = Новый Структура("SatisticTable", ТЗПоказателиРаботы);
		СтрокаЗапроса = "/adl42/hs/api_v1/Satistic/AddRecords";
		РезультатСохранения = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", СтруктураПараметров);                   
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("ОпросБиблиотеки");
	ОтключитьОбработчикОжидания("ПоискНезагруженных");

	ВыполненоСохранениеНастроек = Истина;		
	Оповестить("УпрОсновнаяФормаБудетЗакрыта");
	
КонецПроцедуры

// Процедура - обработчик события формы "ПередЗакрытием".
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы = Истина Тогда
		ТекстПредупреждения = НСтр("ru = 'Закройте форму ""Загрузка документов"" перед закрытием базы данных для корректного завершения работы программы'");
        Отказ = Истина;
    	Возврат;
	КонецЕсли;
	
	ВыполнитьПередЗакрытием();
	
КонецПроцедуры

// Процедура - обработчик события формы "ПриЗакрытии".
//
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы = Истина Тогда
		Если НЕ ВыполненоСохранениеНастроек Тогда
			ВыполнитьПередЗакрытием();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет сохранение настроек текущего пользователя
//
&НаКлиенте
Процедура СохранитьНастрПользователя()
	
	СписокСправочниковСловаря = "";
	Для Каждого Справочник Из СписокЗначенийСправочникиСловаряСоответствий Цикл
		Если Справочник.Пометка Тогда
			СписокСправочниковСловаря = СписокСправочниковСловаря + "," + Справочник.Значение;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураНастроек = Новый Структура(
	"ПоказыватьНовыеЭлементыСправочника,
	|УдалятьПослеЗагрузки,
	|ИспользоватьСловарь,
	|СортироватьПо,
	|СловарьПоНаименованиям,
	|ПапкаВыбораДокументов,
	|НастройкаВидДокумента,
	|ДатаПоследнегоОткрытияФормыНормализации,
	|СоздаватьДокументВида,
	|СписокСправочниковСловаря,
	|НеДобавлятьВПФ,
	|ОтказЗаполненияСпискаОрганизаций,
	|ОтказОтУстановкиРасширенияРаботыСФайлами,
	|ПрикреплятьФайлКДокументу",
	ПоказыватьНовыеЭлементыСправочника,
	УдалятьПослеЗагрузки,
	ИспользоватьСловарь,
	СортироватьПо,
	СловарьПоНаименованиям,
	ПапкаВыбораДокументов,
	НастройкаВидДокумента,
	ДатаПоследнегоОткрытияФормыНормализации,
	СоздаватьДокументВида,
	СписокСправочниковСловаря,
	НеДобавлятьВПФ,
	ОтказЗаполненияСпискаОрганизаций,
	ОтказОтУстановкиРасширенияРаботыСФайлами,
	ПрикреплятьФайлКДокументу);
	
	СтруктураНастроек.Вставить("ТаблицаНастроек", ТаблицаНастроек);
	СтруктураНастроек.Вставить("ТаблицаВходящихДокументов", ТаблицаВходящихДокументов);
	СтруктураНастроек.Вставить("ТаблицаОтборов", ТаблицаОтборов);
	СтруктураНастроек.Вставить("ТаблицаСортировки", ТаблицаСортировки);

	СтруктураПараметров = Новый Структура("AccauntDataBaseID, DatabaseUserID", ИДБазыДанныхПользователя, ПользовательИнфБазыИД);
	СтрокаЗапроса = "/adl42/hs/api_v1/AccauntDataBases/SaveUserSettings";
	ТекстXML = СформироватьXMLЗапроса(СтруктураНастроек, Истина); 
	ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post_File", СтруктураПараметров, , , ТекстXML);  
	
КонецПроцедуры

// Процедура выполняет сохранение настроек в ХранилищеСистемныхНастроек
//
&НаСервереБезКонтекста
Процедура СохранитьВХранилищеСистемныхНастроек(КлючОбъекта, КлючНастроек, Знач Настройки)
	
	СохраняемыеНастройки = Настройки;
	Если ТипЗнч(СохраняемыеНастройки) = Тип("ДанныеФормыКоллекция") Тогда
		СохраняемыеНастройки = ДанныеФормыВЗначение(Настройки, Тип("ТаблицаЗначений"));
	КонецЕсли;
	
	ХранилищеСистемныхНастроек.Сохранить(КлючОбъекта, КлючНастроек, СохраняемыеНастройки);
	
КонецПроцедуры


// Процедура - обработчик события формы "ОбработкаОповещения".
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УпрОсновнаяФормаЗакрыть" Тогда
		
		ЭтаФорма.Закрыть();
		
	ИначеЕсли ИмяСобытия = "ФормаАвторизацииЗакрыта" Тогда
		
		ПриОткрытииПослеАвторизации(Параметр);
		
	ИначеЕсли ИмяСобытия = "ОбработкаРезультатаАвторизации"  И ЗакрытиеПриЗапуске Тогда
		
		Результат = ПолучитьПараметрыСеанса();
		Если Параметр И НЕ ESDLТокен = Результат.ESDLТокен Тогда
			ESDLТокен = Результат.ESDLТокен;
			ОбновитьHTTPConnections();
		КонецЕсли;
		Результат.Вставить("АвторизацияПройдена", Параметр);	
		ПриОткрытииПослеАвторизации(Результат);
				
	ИначеЕсли ИмяСобытия = "Efsol_ВыполненВыход" Тогда
		
		ПоказатьОповещениеПользователя(, , "Завершена работа приложения Загрузка документов");
		ЭтаФорма.Закрыть();
		
	ИначеЕсли ИмяСобытия = "ОтключитьИспользоватьСловарь" Тогда
		
		ИспользоватьСловарь = Ложь;
		Элементы.ФлажокСловарьПоНаименованиям.Доступность = ИспользоватьСловарь;
		Элементы.ОткрытьСловарь.Доступность = ИспользоватьСловарь;
		
	ИначеЕсли  ИмяСобытия = "ДокументРаспознан" Тогда
		
		ОткрытьФормуДокумента(Параметр);
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет получение параметров сеанса
//
&НаСервере
Функция ПолучитьПараметрыСеанса()
	
	beta = ПараметрыСеанса.EfsolBeta;

	Возврат Новый Структура("ESDLИДАккаунта, ESDLИДПользователя, ESDLТокен, ESDLФИОПользователя, ESDLEmailПользователя, ESDLPhoneNumberПользователя", 
		ПараметрыСеанса.EfsolИДАккаунта, ПараметрыСеанса.EfsolИДПользователя, ПараметрыСеанса.EfsolТокен, ПараметрыСеанса.EfsolФИОПользователя, ПараметрыСеанса.EfsolEmailПользователя, ПараметрыСеанса.EfsolPhoneNumberПользователя);

КонецФункции

&НаСервере
Процедура СменитьПользователяОчиститьПараметрыСеанса()
	
	ПараметрыСеанса.EfsolИДАккаунта			= "";
	ПараметрыСеанса.EfsolИДПользователя		= "";
	ПараметрыСеанса.EfsolТокен				= "";
	ПараметрыСеанса.EfsolФИОПользователя	= "";
	ПараметрыСеанса.EfsolЛогин				= "";
	ПараметрыСеанса.EfsolПароль				= "";
	ПараметрыСеанса.EfsolEmailПользователя			= "";
	ПараметрыСеанса.EfsolPhoneNumberПользователя	= "";
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////////////
// Основные действия программы
//////////////////////////////////////////////////////////////////////////////////////////////

// Процедура получения распознанного документа
//
// Параметры: 
//      ИД - ИД документа
//      ТекстXML - текст xml c с результатом распознавания 
//      ТекстОшибки - текст ошибки для возвращения пользоваителю
//
&НаСервере
Процедура ПолучитьДокумент(ИД, ТекстXML, ТекстОшибки) Экспорт

	МассивСтрок = ТаблицаДанныхПолученные.НайтиСтроки(Новый Структура("ДокументИД", ИД)); 
	Если МассивСтрок.Количество() > 0 Тогда
		ТаблицаДанныхПолученные.Удалить(МассивСтрок[0]);
	КонецЕсли;

	Документ = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ИД, 1))[0];
	
	ТаблицаНастроекЗначение = ДанныеФормыВЗначение(ТаблицаНастроек, Тип("ТаблицаЗначений"));
	ТаблицаСловаряЗначение = ДанныеФормыВЗначение(ТаблицаСловаря, Тип("ТаблицаЗначений"));
	
	СтруктураТипа = Неопределено;
	Если Документ.ТипРаспознан <> "" Тогда
		СтруктураТиповДокументов.Свойство(Документ.ТипРаспознан, СтруктураТипа);
	КонецЕсли;
	Если СтруктураТипа = Неопределено Тогда
		ТекстОшибки = "Не найдено описание типа документа";
		Возврат;
	КонецЕсли;	
	МассивСтрок = ТаблицаВходящихДокументов.НайтиСтроки(Новый Структура("ТипРаспознан", Документ.ТипРаспознан));
	Если МассивСтрок.Количество() = 0 Тогда
		Если СтруктураТипа.ОтображениеКраткоe <> "-" Тогда
			ТекстОшибки = "Не найден тип документа " + СтруктураТипа.ОтображениеПолное + " (Идентификатор документа " + ИД +")";
		Иначе
			ТекстОшибки = "Тип документа не определен (Идентификатор документа " + ИД +")";
		КонецЕсли;
	    Возврат;
	Иначе
		СтрокаТипаДокумента = МассивСтрок[0];
	КонецЕсли;
	
	ОписаниеДокумента = "" + СтруктураТипа.ОтображениеКраткоe + " №"+ Документ.Номер + " от "+ Документ.Дата + ?(ПустаяСтрока(Документ.Контрагент), "", "(контрагент " + Документ.Контрагент + ")"); 
	
	СтруктураДанныхXML = ПарсерДокументаXML(ТекстXML, Документ.СтараяВерсия, Документ.ТипРаспознан);
	Если СтруктураДанныхXML.Шапка = Неопределено ИЛИ СтруктураДанныхXML.Шапка.Количество() = 0 Тогда
		ТекстОшибки = "Ошибка обработки документа " +  ОписаниеДокумента;
        Возврат;
    КонецЕсли;
	
	ДатаПолучения = ТекущаяДата();
	
	Если Документ.ВидПовторно <> "" Тогда
		ВидДокумента = Документ.ВидПовторно;
	Иначе
		Если НЕ Документ.Атрибутирован Тогда
			Если СоздаватьДокументВида = "Входящий" Тогда   
				Документ.Исходящий = Ложь;
			ИначеЕсли СоздаватьДокументВида = "Исходящий" Тогда
				Документ.Исходящий = Истина;
			Иначе
				Документ.Исходящий = АвтоопределениеСценарияСозданияДокумента(СтруктураДанныхXML.Шапка, ESDLСтруктураОПФ);
			КонецЕсли;
		КонецЕсли;
		Если Документ.Исходящий Тогда 
			ВидДокумента = СтрокаТипаДокумента.ИсходящийДокумент;
		Иначе
			ВидДокумента = СтрокаТипаДокумента.ВходящийДокумент;
		КонецЕсли;
	КонецЕсли;

	СтруктураОписанияДокумента = Неопределено;
	СтруктураОписанийДокументов.Свойство(ВидДокумента, СтруктураОписанияДокумента);
	Если СтруктураОписанияДокумента = Неопределено Тогда
		ТекстОшибки = "Ошибка обработки документа " +  ОписаниеДокумента;
        Возврат;
	КонецЕсли;
	ТаблицаНастроекЗначение = РеквизитФормыВЗначение("ТаблицаНастроек", Тип("ТаблицаЗначений"));
	МассивСтрокВидаСоздаваемогоДокумента = ТаблицаНастроекЗначение.НайтиСтроки(Новый Структура("СоздаваемыйДокумент", ВидДокумента));
	ЗначениеНастроекДокумента = ТаблицаНастроекЗначение.Скопировать(МассивСтрокВидаСоздаваемогоДокумента, "Синоним, Значение, Идентификатор");
    Документ.ДатаПолучения = ДатаПолучения;
	Документ.ВидДокумента = ВидДокумента;
	Документ.ЗначениеНастроек = Новый Структура();
	Для Каждого СтрокаНастройки Из ЗначениеНастроекДокумента Цикл
		Документ.ЗначениеНастроек.Вставить(СтрокаНастройки.Идентификатор, Новый Структура("Значение, Синоним", СтрокаНастройки.Значение, СтрокаНастройки.Синоним));
	КонецЦикла;
	 	
	Если СтруктураДанныхXML.Шапка <> Неопределено Тогда
		ЗаполнитьСтруктуруДокумента(СтруктураДанныхXML, СтруктураОписанияДокумента, Документ);	
	КонецЕсли;
	Если Документ.Шапка = Неопределено ИЛИ Документ.Шапка.Количество() = 0 Тогда
		ТекстОшибки = "Ошибка обработки распознанных данных " +  ОписаниеДокумента;
        Возврат;
	КонецЕсли;
	
	Если Документ.ТЧ.Количество() = 0 И СтруктураОписанияДокумента.ТЧ <> Неопределено Тогда
		РеквизитыТЧДобавитьПозицию(ИД);
	КонецЕсли;
	
	ДополнительнаяОбработкаДанных(Документ);

	//ЗаполнитьНаименованиеДокумента(Документ, СтруктураТиповДокументов);
	
	Документ.Наименование =  СформироватьНаименованиеЭлементаАрхива(Документ.Организация, Документ.Тип, Документ.Номер, Документ.Дата, Документ.Контрагент, Документ.Сумма);
	СтрокаДокумент = ДокументыТаблица.Добавить();
	СтрокаДокумент.Наименование = Документ.Наименование;
	СтрокаДокумент.ДокументИД = Документ.ДокументИД;
	СтрокаДокумент.Ссылка = Документ.СсылкаДокумент;
	СтрокаДокумент.Статус = Документ.Статус;
	СтрокаДокумент.ДатаПолучения = Документ.ДатаПолучения;
	СтрокаДокумент.ВидДокумента = Документ.ВидДокумента;
	
	Документ.СтатусОбработки = "В обработке";
	Документ.ГотовКЗагрузке = ложь;

	Документ.ПолученНеОткрыт = Истина;
	Документ.Новый = Ложь;
	
КонецПроцедуры

// Процедура обработки оповещения после выбора файлов для отправки на сервер
//
&НаКлиенте
Процедура ДобавитьИзФайловПослеВыбора(ВыбранныеФайлы, ДопПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда 
		СписокФайлов = Новый СписокЗначений;
		СписокФайлов.ЗагрузитьЗначения(ВыбранныеФайлы);
		СписокФайлов.СортироватьПоЗначению();
		ДиалогМассивВыбранныхФайлов = СписокФайлов.ВыгрузитьЗначения();
		//Элементы.НадписьОповещения.Заголовок = "Подождите, пожалуйста, идет отправка документов";
		//Элементы.ГруппаОповещенияПользователя.Видимость = Истина;
		Индикатор = 1;
		Состояние("Отправка документов на сервер распознавания", Индикатор);

		ПодключитьОбработчикОжидания("ОтправкаДокументовНаСервер", 1, Истина);
	КонецЕсли;

КонецПроцедуры

// Процедура обработки оповещения при выборе файлов для отправки на сервер
//
&НаКлиенте
Процедура ОтправкаДокументовНаСервер() 
	
	ОтправкаФайловНаСерверРаспознавания();
	//Элементы.ГруппаОповещенияПользователя.Видимость = Ложь;
	
	Индикатор = 100;
	Состояние("Отправка документов на сервер распознавания", Индикатор);
	
КонецПроцедуры

// Функция выполняет отправку файлов на сервер распознавания
//
// Параметры:
// 		
// Возвращаемое значение:
//		Тип Булево, признак успешной отправки
//
&НаКлиенте
Функция ОтправкаФайловНаСерверРаспознавания() Экспорт
	
	Счетчик = 0;
	
	СтрокаОшибок = "";
	ПомещаемыеФайлы = Новый Массив;
	UserPacketID = Строка(Новый УникальныйИдентификатор);
	КоличествоИзображений = 0;
	КоличествоПДФ = 0;
	СоответствиеИменФайловПутям = Новый Соответствие;
	Шаг = 60/ДиалогМассивВыбранныхФайлов.Количество();
	Для Каждого ИмяФайла Из ДиалогМассивВыбранныхФайлов Цикл
		Файл = Новый Файл(ИмяФайла);
		ИмяОтправки = Файл.Имя;
		Расширение = Файл.Расширение;
		Если ВРег(Расширение) = ".PDF" Тогда
			КоличествоПДФ = КоличествоПДФ + 1;
		ИначеЕсли НЕ (ВРег(Расширение) = ".XLS" ИЛИ ВРег(Расширение) = ".XLSX") Тогда
			КоличествоИзображений = КоличествоИзображений + 1
		КонецЕсли;
		СоответствиеИменФайловПутям.Вставить(ИмяФайла, ИмяОтправки);
		ТекстПредупреждения = "";
		Если ЭтоВебКлиент Тогда	
			ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(Файл.ПолноеИмя));
		Иначе
			Если Файл.Существует() Тогда 
				РазмерФайла = Файл.Размер();
				Если РазмерФайла >  23165338 Тогда
					СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Размер файла " + Файл.ПолноеИмя + " превышает допустимую норму.";
				Иначе
					WithoutRecognition = ?(БезРаспознавания = Истина, "true", "false"); 
					LastFile = ?((Счетчик = ДиалогМассивВыбранныхФайлов.Количество() - 1), "true", "false");
					СтруктураПараметров = Новый Структура("UserID, FileName, UserPacketID, LastFile, UserAgent, WithoutRecognition", ESDLИДПользователя, ИмяОтправки, UserPacketID, LastFile, "ESDL1C", WithoutRecognition);
					СтрокаЗапроса = "/adl42/hs/api_v1/AccountUserIncomingFiles/Add";
					
					ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post_File", СтруктураПараметров, ИмяФайла);
					
					Если ПараметрыОтвета.КодОтвета = 200 Тогда
						Счетчик = Счетчик + 1;
					Иначе
						СтрокаОшибок = СтрокаОшибок + Символы.ПС + ПараметрыОтвета.СтруктураОтвета.Description;
					КонецЕсли;
				КонецЕсли;
			Иначе 
				СтрокаОшибок = СтрокаОшибок + Символы.ПС + "Файл " + Файл.ПолноеИмя + " не наден!";
			КонецЕсли;
		КонецЕсли;
			
		Индикатор = Индикатор + Шаг;
		Состояние("Отправка документов на сервер распознавания", Индикатор);

	КонецЦикла;
	Если БезРаспознавания = Ложь И КоличествоИзображений > 10 Тогда
		СтрокаОшибок = "рекомендуемый размер пакета страниц от 1 до 10 файлов!" + Символы.ПС + "При большем количестве файлов изображений есть вероятность некорректного разбиения документов на страницы." + Символы.ПС;
	КонецЕсли;
	Если ЭтоВебКлиент И ПомещаемыеФайлы.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтправкаФайловНаСерверРаспознаванияПослеПомешенияФайлов", ЭтаФорма, СоответствиеИменФайловПутям);
		НачатьПомещениеФайлов(ОписаниеОповещения, ПомещаемыеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор);
	Иначе
		Если Счетчик > 0 Тогда
			ПоискНезагруженных();
		КонецЕсли;
	КонецЕсли;           
	
	Если СтрокаОшибок <> "" Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Отправка файлов: " + СтрокаОшибок;
		СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
		СообщениеПользователю.Сообщить();
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура обработки оповещения о помещении файлов в веб-клиенте
//
&НаКлиенте
Процедура ОтправкаФайловНаСерверРаспознаванияПослеПомешенияФайлов(ПомещенныеФайлы, СоответствиеИменФайловПутям) Экспорт 
	
	СтрокаОшибок = ОтправкаФайловНаСерверРаспознаванияВебКлиент(ПомещенныеФайлы, ESDLИДПользователя, ESDLТокен, СоответствиеИменФайловПутям, beta, БезРаспознавания);
	Индикатор = 90;
	Состояние("Отправка документов на сервер распознавания", Индикатор);

	ПоискНезагруженных();
	
	Если СтрокаОшибок <> "" Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Отправка файлов: " + СтрокаОшибок;
		СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
		СообщениеПользователю.Сообщить();
	КонецЕсли;

КонецПроцедуры

// Функция выполняет отправку файлов на сервер распознавания  в веб-клиените
//
// Параметры:
//		ПомещенныеФайлы, тип Массив - массив файлов
// 		ESDLИДПользователя, тип Строка - ИД пользователя
// 		ESDLТокен, тип Строка - токен
//		СоответствиеИменФайловПутям, тип Соответствие - имена файлов
//		beta, тип Булево - признак версии сервера
//
// Возвращаемое значение:
//		Тип Булево, признак успешной отправки
//
&НаСервереБезКонтекста
Функция ОтправкаФайловНаСерверРаспознаванияВебКлиент(ПомещенныеФайлы, ESDLИДПользователя, ESDLТокен, СоответствиеИменФайловПутям, beta, БезРаспознавания)
	
 	СтрокаОшибок = "";
 
	Попытка
		Если ПомещенныеФайлы <> Неопределено Тогда
			UserPacketID = Строка(Новый УникальныйИдентификатор);
			Счетчик = 0;
			Для Каждого ФайлОписание Из ПомещенныеФайлы Цикл
				АдресФайла = ФайлОписание.Хранение;
				ИмяФайла = СоответствиеИменФайловПутям.Получить(ФайлОписание.Имя);
				WithoutRecognition = ?(БезРаспознавания = Истина, "true", "false"); 
				LastFile = ?((Счетчик = ПомещенныеФайлы.Количество() - 1), "true", "false");
				СтруктураПараметров = Новый Структура("UserID, FileName, UserPacketID, LastFile, UserAgent, WithoutRecognition", ESDLИДПользователя, ИмяФайла, UserPacketID, LastFile, "ESDL1C", WithoutRecognition);
				СтрокаЗапроса = "/adl42/hs/api_v1/AccountUserIncomingFiles/Add";
				ПараметрыОтвета = ВыполнитьЗапросНаСервере("ESDLADLHTTP", СтрокаЗапроса, "Post_File", СтруктураПараметров, АдресФайла, Ложь, "", ESDLТокен, beta);
				Если НЕ ПараметрыОтвета.КодОтвета = 200 Тогда
					СтрокаОшибок = СтрокаОшибок + Символы.ПС + ПараметрыОтвета.СтруктураОтвета.Description;
				КонецЕсли;
				Счетчик = Счетчик + 1;
			КонецЦикла;
		КонецЕсли;
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	 
	Возврат СтрокаОшибок; 
	
КонецФункции

//Общая процедура загрузки документов на сервер
//
//Параметры:
//
//	МассивИД - массив, содержит идентификаторы загружаемых документов 
//
&НаКлиенте
Процедура ЗагрузкаДокументов(МассивИД) Экспорт
	
	Если МассивИД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//Элементы.Индикатор.Заголовок = "Поиск ранее загруженных";
	//Индикатор = 0;
	////Элементы.ГруппаИндикатора.Видимость = Истина;
	//ЭтаФорма.ОбновитьОтображениеДанных();
	//ШагИндикатора = 50/МассивИД.Количество();
	
	СтруктураСообщений = Новый Структура();
	СтруктураСообщений.Вставить("ИмяШаблона", ИмяШаблона); 
	СтруктураСообщений.Вставить("ВерсияКонфигурации", ВерсияКонфигурации); 

	ЗадатьВопрос = Ложь;
	Для Каждого ИД Из МассивИД Цикл
		//Индикатор = Индикатор + ШагИндикатора;
		//Состояние("Прогресс загрузки документов", Индикатор);

		Результат = ПроверкаГотовностиКЗагрузкеИПоискДублей(ТаблицаДанных, ИД, СтруктураСообщений);
		
		Если НЕ Результат.Готов Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = СтруктураСообщений.ТекстСообщения;
			СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
			СообщениеПользователю.Сообщить();
		Иначе
			
			Оповестить("ЗакрытьФормуДокумента", Новый Структура("ДокументИД", ИД));
			Если Результат.СтараяСсылка <> Неопределено Тогда
				ПоискДубляОжидание = Истина;
				Оповещение = Новый ОписаниеОповещения("ЗагрузкаДокументовЗаменаДублей", ЭтаФорма, ИД);
				Документ = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ИД, 1))[0];
				ПараметрыФормы = Новый Структура("ДокументИД, СтруктураСообщений, Наименование", ИД, СтруктураСообщений, Документ.Наименование); 
				ОткрытьФорму(ПрефиксИмениФорм + "УпрФормаНайденыДубли", ПараметрыФормы, ЭтаФорма,,,,Оповещение);
			Иначе
				ЗагрузкаДокументовПослеОбработкаОтветаНаВопрос(ИД);
			КонецЕсли;
			
		КонецЕсли;
		
		//Индикатор = Индикатор + ШагИндикатора;
		//Состояние("Прогресс загрузки документов", Индикатор);

	КонецЦикла;	
	
КонецПроцедуры

// Процедура обработки ответа на вопрос при загрузке документов
//
&НаКлиенте
Процедура ЗагрузкаДокументовЗаменаДублей(Результат, ДокументИД) Экспорт 
	
	ПоискДубляОжидание = Ложь;
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат = "Создать новый" Тогда
		Ссылка = Неопределено;
	Иначе
		Ссылка = Результат;
	КонецЕсли;
	
	ЗагрузкаДокументовПослеОбработкаОтветаНаВопрос(ДокументИД, Ссылка);
	
КонецПроцедуры



// Процедура выполяемая после ответа на вопрос при загрузке документов
//
&НаКлиенте
Процедура ЗагрузкаДокументовПослеОбработкаОтветаНаВопрос(ИД, Ссылка = Неопределено) Экспорт
	
	СтруктураСообщений = Новый Структура();
	
	РабочиеПараметры = Новый Структура("СоответствиеСтатусовДокументов, НовыеЭлементы", Новый Соответствие(), Неопределено);
	
	СчетчикАвтозагрузки = 0;
	
	ТекстСообщения = "";
	
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	
	Загружен = ЗагрузитьДокументНаСервере(ИД, Ссылка, РабочиеПараметры, СтруктураСообщений);//ЗАГРУЗИТЬ ДОКУМЕНТ
		
	// (Статистика 
	КоличествоСтрокТЧ = 1;
	МассивДокументов = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ИД, 1)) ;
	Если МассивДокументов.Количество() > 0 Тогда
		Документ = МассивДокументов[0];
		Если Документ.ТЧ <> Неопределено Тогда
			КоличествоСтрокТЧ = КоличествоСтрокТЧ + Документ.ТЧ.Количество();
		КонецЕсли;
	КонецЕсли;  
	
	////Русанова М. 05.10.2018(
	//Если Загружен И ПрикреплятьФайлКДокументу Тогда
	//	ПрикрепитьФайлКДокументу(Документ);
	//КонецЕсли;
	//// Русанова М. 05.10.2018
	
	ВремяВыполнения = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала)/1000; 
	//СтруктураПараметров = Новый Структура("CloudServiceID, AccountUserID, PerformanceCounterID, PerformanceCounterValue", "ESDL", ESDLИДПользователя, "esdl.internal.document.position_loading", (ВремяВыполнения/КоличествоСтрокТЧ));
	//СтрокаЗапроса = "/adl42/hs/api_v1/CSPerformanceCounters/SetPerformanceValue";
	//ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	НоваяСтрокаСтатистики                       = ТЗПоказателиРаботы.Добавить();
	НоваяСтрокаСтатистики.DateTime              =  ТекущаяДата();
	НоваяСтрокаСтатистики.EventName             = "Загрузить Документ";
	//Ресурсы
	НоваяСтрокаСтатистики.User1C                = ПользовательИнфБазы;
	НоваяСтрокаСтатистики.ConfigurationVersion  = ВерсияКонфигурации;
	НоваяСтрокаСтатистики.ConfigurationName     = МетаданныеИмя;
	НоваяСтрокаСтатистики.ClientName            = "ESDL";
	НоваяСтрокаСтатистики.ClientVersion         = ВерсияПрограммы;
	НоваяСтрокаСтатистики.AccauntDataBaseID		= ИДБазыДанныхПользователя;
	//Реквизиты
	НоваяСтрокаСтатистики.Runtime               = ВремяВыполнения*1000;
	НоваяСтрокаСтатистики.StatisticalDataName0  = "ИД";
	НоваяСтрокаСтатистики.StatisticalDataValue0 = ИД;
	НоваяСтрокаСтатистики.StatisticalDataName1  = "Загрузка без верификации";
	НоваяСтрокаСтатистики.StatisticalDataValue1 = Строка(Документ.Загрузить);
	Если Загружен Тогда   
		ЗаписьИзмененийПоДокументам(ИД);  			//Логирование изменений
		Если РабочиеПараметры.НовыеЭлементы <> Неопределено Тогда
			СтрокаНовогоЭлемента = НовыеЭлементыСправочников.Добавить();
			СтрокаНовогоЭлемента.ВидСправочника = РабочиеПараметры.НовыеЭлементы.ВидСправочника;
			СтрокаНовогоЭлемента.Ссылка = РабочиеПараметры.НовыеЭлементы.Ссылка;
			СтрокаНовогоЭлемента.ДокументИД = ИД; 		
		КонецЕсли;
		
		//Сохранение последнего выбранного договора 
		Если РабочиеПараметры.Свойство("СтруктураНовогоДоговора") Тогда
			СтруктураПараметров = РабочиеПараметры.СтруктураНовогоДоговора;
			СтрокаЗапроса = "/adl42/hs/api_v1/AcDbOrgСontractorАgreement/Add";
			ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", СтруктураПараметров);      
		КонецЕсли;
	Иначе
		ТекстСообщения = ТекстСообщения + Символы.ПС + СтруктураСообщений.ТекстСообщения;
	КонецЕсли;
	Если Документ.Загрузить Тогда
		СчетчикАвтозагрузки = СчетчикАвтозагрузки + 1;
		Если НЕ Загружен Тогда
			СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocuments/SetDocumentProperties";
			ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", Новый Структура("DocumentID, АutoloadingStatus", "True", "4"));
		КонецЕсли;
	КонецЕсли;
	Если Документ.ОткрытьПослеЗагрузки Тогда
		ОткрытьВУС(ИД);
		Документ.ОткрытьПослеЗагрузки = Ложь;
	КонецЕсли;
	СтрокиДерева = ДеревоДокументов.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.ДокументИД = ИД Тогда
			СтрокаДерева.СтатусСтроки = 7;	
			СтрокаДерева.СсылкаДокумент = Ссылка;
			СтрокаДерева.Статус = Документ.СтатусОбработки;
		КонецЕсли;
	КонецЦикла;
	
	Если Ссылка <> Неопределено Тогда
		СтрокиНовЭл = НовыеЭлементыСправочников.НайтиСтроки(Новый Структура("ДокументИД", ИД));
		Для Каждого СтрокаДокумента Из СтрокиНовЭл Цикл
			СтрокаДокумента.Документ = Ссылка;
			СозданыНовыеЭлементы = Истина;
		КонецЦикла;
	КонецЕсли;
	Для каждого ЭлементДокумент Из ДокументыТаблица Цикл
		Если ЭлементДокумент.ДокументИД = ИД Тогда
			Если РабочиеПараметры.СоответствиеСтатусовДокументов[ИД] <> Неопределено Тогда
				ЭлементДокумент.Статус = РабочиеПараметры.СоответствиеСтатусовДокументов[ИД];
				Если ЭлементДокумент.Статус = 0 Тогда
					СтруктураСсылки = ТипСсылки(Ссылка);
					СтруктураПараметров = Новый Структура("DocumentID, LinkDatabaseID, LinkID, LinkType, DocumentName", ИД, ИДБазыДанныхПользователя, СтруктураСсылки.СсылкаИД, СтруктураСсылки.СсылкаТип, Строка(Документ.СсылкаДокумент)); 
					СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocumentLinks/Add";
					ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", СтруктураПараметров);                   
					Если НЕ ПараметрыОтвета.КодОтвета = 200 Тогда
						СообщениеПользователю = Новый СообщениеПользователю;
						СообщениеПользователю.Текст ="Ошибка при сохранении ссылки в архиве: " + ПараметрыОтвета.СтруктураОтвета.Description;
						СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
						СообщениеПользователю.Сообщить();
					Иначе
						Оповестить("ЗагруженДокумент", Новый Структура("ДокументИД, СсылкаДокумент", ИД, Ссылка));
					КонецЕсли;
					Если УдалятьПослеЗагрузки Тогда
						Если Документ.Атрибутирован Тогда
							//СообщениеПользователю = Новый СообщениеПользователю;
							//СообщениеПользователю.Текст ="Документ : " + Документ.Наименование + "не был удален, т.к. помещен в архив";
							//СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
							//СообщениеПользователю.Сообщить();
						Иначе
							СтруктураПараметров = Новый Структура("DocumentID", ИД);
							СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocuments/Delete";
							ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", СтруктураПараметров);                   
							Если НЕ ПараметрыОтвета.КодОтвета = 200 Тогда
								СообщениеПользователю = Новый СообщениеПользователю;
								СообщениеПользователю.Текст ="Ошибка при удалении документа: " + ПараметрыОтвета.СтруктураОтвета.Description;
								СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
								СообщениеПользователю.Сообщить();
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;						
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ТекстСообщения <> "" Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = ТекстСообщения;
		СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
		СообщениеПользователю.Сообщить();
	ИначеЕсли СтруктураСообщений.Свойство("ТекстСообщения") И СтруктураСообщений.ТекстСообщения <> "" Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = СтруктураСообщений.ТекстСообщения;
		СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
	ДобавитьЗначенияВСловарь();
	
	КоличествоДокументовВАвтозагрузке = КоличествоДокументовВАвтозагрузке - СчетчикАвтозагрузки;

КонецПроцедуры

//Русанова М. 03.10.2018(

&НаКлиенте
Процедура ПрикрепитьФайлКДокументу(Документ)	
	
	СтрокаПараметры = "AccountEDocuments/GetDocumentFile?DocumentID=" + Документ.ДокументИД;
	СтрокаЗапроса = "/adl42/hs/api_v1/" + СтрокаПараметры;
	ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса,,,,Истина);
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		ДвоичныеДанные=ПараметрыОтвета.СтруктураОтвета.ДвоичныеДанные;
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные,УникальныйИдентификатор);
		
	Иначе 
		Возврат;
		
	КонецЕсли;
	
	ДобавитьФайл(Документ.ДокументИД, Документ.СсылкаДокумент, Документ.Наименование, Документ.ТипФайла, АдресФайла);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьФайл(ИД ,Ссылка, Наименование, ТипФайла, АдресФайла)
	
	ПараметрыФайла = ЗаполнитьПараметрыФайла(Ссылка, Наименование, ТипФайла);
	СсылкаСправочник = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайла);
	Сообщить(СсылкаСправочник);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьПараметрыФайла(Ссылка, Наименование, ТипФайла)
	
	ПараметрыФайла = Новый Структура();
	ПараметрыФайла.Вставить("Автор", Неопределено);
	ПараметрыФайла.Вставить("ВладелецФайлов", Ссылка);
	ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	ПараметрыФайла.Вставить("ГруппаФайлов", Неопределено);
	ПараметрыФайла.Вставить("ИмяБезРасширения", Наименование);
	ПараметрыФайла.Вставить("РасширениеБезТочки", ТипФайла);
	
	Возврат ПараметрыФайла;
	
КонецФункции

//)Русанова М. 03.10.2018


// Функция выполняет создание/перезаполнение документа в базе данных
//
// Параметры:
//	ИД, тип "строка" - идентификатор документа
//	Ссылка, тип "ДокументСсылка" - ссылка на ранее созданный документ
//  РабочиеПараметры, тип "Структура" - параметры загрузки
//  СтруктураСообщений, тип "Структура" - структура для записи сообщений пользователю
//	
// Возвращаемое значение: 
//   результат, тип "Булево" - истина если документ загружен
//
&НаСервере
Функция ЗагрузитьДокументНаСервере(ИД, Ссылка, РабочиеПараметры, СтруктураСообщений)

	МассивДокументов = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ИД, 1)) ;
	Если МассивДокументов.Количество() > 0 Тогда
		Документ = МассивДокументов[0];
	Иначе
		Возврат Ложь;
	КонецЕсли;

	СоздатьНовыеЭлементыСправочников(Документ);
	
	Результат = ЗагрузитьДокументШаблон(Документ, Ссылка, РабочиеПараметры, СтруктураСообщений);
	Если Результат И Ссылка<> Неопределено И Документ.Шапка.Свойство("Организация") И (Документ.Шапка.Свойство("ДоговорКонтрагента") ИЛИ Документ.Шапка.Свойство("Соглашение")) Тогда
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			Договор = Ссылка.ДоговорКонтрагента;
		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда 	
			Договор = Ссылка.Соглашение;
		КонецЕсли;
		СтруктураНовогоДоговора = Новый Структура("AccountDatabaseID, OrganizationID, ContractorID, CreateDocument, АgreementID", ИДБазыДанныхПользователя, XMLСтрока(Ссылка.Организация), XMLСтрока(Ссылка.Контрагент),Документ.ВидДокумента, XMLСтрока(Договор));
		РабочиеПараметры.Вставить("СтруктураНовогоДоговора", СтруктураНовогоДоговора);
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

// Процедура выполняет создание новых элементов справочников перед загрузкой документа
//
// Параметры:
//    Документ, тип "Строка таблицы значений" - строка из ТаблицаДанных
//
&НаСервере
Процедура СоздатьНовыеЭлементыСправочников(Документ) Экспорт  
	
	СтруктураОписанияДокумента = Неопределено;
	СтруктураОписанийДокументов.Свойство(Документ.ВидДокумента, СтруктураОписанияДокумента);

	// создание новых элементов справочников шапки
	Для Каждого ОписаниеРеквизита Из СтруктураОписанияДокумента.Шапка Цикл
		СопоставлениеРеквизита(ОписаниеРеквизита, Документ,, Истина);
	КонецЦикла;
	
	// создание новых элементов справочников табличной части
	Если СтруктураОписанияДокумента.ТЧ <> Неопределено Тогда
		Для Каждого СтрокаТЧ Из Документ.ТЧ Цикл
			Для Каждого ОписаниеРеквизита Из СтруктураОписанияДокумента.ТЧ Цикл	
				СопоставлениеРеквизита(ОписаниеРеквизита, Документ, СтрокаТЧ.Значение, Истина);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет заполнение таблицы организационно-правовых форм предприятий
//
&НаКлиенте
Процедура ЗаполнитьТаблицуОПФ() Экспорт
	
	СтрокаЗапроса = "/adl42/hs/api_v1/LegalOrganizationalForms/GetList";
	ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса);   
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		 МассивСтруктурСтрокESDLСтруктураОПФ = ПараметрыОтвета.СтруктураОтвета.TableLegalOrganizationalFormsData;
		 Для Каждого Элемент Из МассивСтруктурСтрокESDLСтруктураОПФ Цикл
			 СтрокаОПФ = ESDLСтруктураОПФ.Добавить();
			 СтрокаОПФ.КраткоОПФ = Элемент.Name;
			 СтрокаОПФ.ПолностьюОПФ = Элемент.FullName;
		 КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Функция сохраняет статистику изменений пользователя в документе
//
&НаКлиенте
Функция ЗаписьИзмененийПоДокументам(ИД) Экспорт
	
	Документ = Неопределено;
	МассивДокументов = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ИД, 1)) ;
	Если МассивДокументов.Количество() > 0 Тогда
		Документ = МассивДокументов[0];
	КонецЕсли;

	Шапка = Документ.Шапка;
	ТЧ = Документ.ТЧ;
	
	СтруктураОписанияДокумента = Неопределено;
	СтруктураОписанийДокументов.Свойство(Документ.ВидДокумента, СтруктураОписанияДокумента);
	
	ОписаниеШапки = СтруктураОписанияДокумента.Шапка;
	ОписаниеТЧ = СтруктураОписанияДокумента.ТЧ;
	
	// Шапка
	Для каждого Колонка Из Документ.Шапка Цикл
		ИмяКолонки = Колонка.Ключ;
		
		ОписаниеРеквизита = НайтиВМассивеСтруктур(ОписаниеШапки, ИмяКолонки, "Идентификатор"); //ОписаниеШапки.Найти(ИмяКолонки, "Идентификатор");
		
		Если ОписаниеРеквизита <> Неопределено Тогда
			ТипИВидЗначения = Строка(ОписаниеРеквизита.Тип) + ?(ПустаяСтрока(ОписаниеРеквизита.Вид), "", "." + Строка(ОписаниеРеквизита.Вид));
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если Шапка[ИмяКолонки].СопоставленноеЗначение <> Шапка[ИмяКолонки].ИтоговоеЗначение И ОписаниеРеквизита.Отображать = Истина Тогда
			Если ТипЗнч(Шапка[ИмяКолонки].ИсходноеЗначение) = Тип(ТипИВидЗначения) Тогда
				ТипИсходного = ТипИВидЗначения
			Иначе
				ТипИсходного = Строка(ТипЗнч(Шапка[ИмяКолонки].ИсходноеЗначение));
			КонецЕсли;
			Если ТипЗнч(Шапка[ИмяКолонки].СопоставленноеЗначение) = Тип(ТипИВидЗначения) Тогда
				ТипСопоставленного = ТипИВидЗначения
			Иначе
				ТипСопоставленного = Строка(ТипЗнч(Шапка[ИмяКолонки].СопоставленноеЗначение));
			КонецЕсли;
			Если ТипЗнч(Шапка[ИмяКолонки].ИтоговоеЗначение) = Тип(ТипИВидЗначения) Тогда
				ТипИтогового = ТипИВидЗначения
			Иначе
				ТипИтогового = Строка(ТипЗнч(Шапка[ИмяКолонки].ИтоговоеЗначение));
			КонецЕсли;
			
			НоваяСтрокаСтатистики                       = ТЗПоказателиРаботы.Добавить();
			НоваяСтрокаСтатистики.DateTime              =  ТекущаяДата();
			НоваяСтрокаСтатистики.EventName             = "ИзмененияЗначенийРеквизитов";
			//Ресурсы
			НоваяСтрокаСтатистики.User1C                = ПользовательИнфБазы;
			НоваяСтрокаСтатистики.ConfigurationVersion  = ВерсияКонфигурации;
			НоваяСтрокаСтатистики.ConfigurationName     = МетаданныеИмя;
			НоваяСтрокаСтатистики.ClientName            = "ESDL";
			НоваяСтрокаСтатистики.ClientVersion         = ВерсияПрограммы;
			НоваяСтрокаСтатистики.AccauntDataBaseID		= ИДБазыДанныхПользователя;
			//Реквизиты
			НоваяСтрокаСтатистики.Runtime               = 0;
			НоваяСтрокаСтатистики.StatisticalDataName0  = "Реквизит";
			НоваяСтрокаСтатистики.StatisticalDataValue0 = ИмяКолонки;
			НоваяСтрокаСтатистики.StatisticalDataName1  = "СопоставленноеЗначение";
			НоваяСтрокаСтатистики.StatisticalDataValue1 = Строка(Шапка[ИмяКолонки].СопоставленноеЗначение);
			НоваяСтрокаСтатистики.StatisticalDataName2  = "ИтоговоеЗначение";
			НоваяСтрокаСтатистики.StatisticalDataValue2 = Строка(Шапка[ИмяКолонки].ИтоговоеЗначение);
			НоваяСтрокаСтатистики.StatisticalDataName3  = "ИсходноеЗначение";
			НоваяСтрокаСтатистики.StatisticalDataValue3 = Строка(Шапка[ИмяКолонки].ИсходноеЗначение);
			НоваяСтрокаСтатистики.StatisticalDataName4  = "ИндексТЧ";
			НоваяСтрокаСтатистики.StatisticalDataValue4 = "";
			НоваяСтрокаСтатистики.StatisticalDataName5  = "СпособСопоставления";
			НоваяСтрокаСтатистики.StatisticalDataValue5 = Строка(Шапка[ИмяКолонки].СпособСопоставления);
			НоваяСтрокаСтатистики.StatisticalDataName6  = "ИДДокумента";
			НоваяСтрокаСтатистики.StatisticalDataValue6 = ИД;
			НоваяСтрокаСтатистики.StatisticalDataName7  = "ТипИсходного";
			НоваяСтрокаСтатистики.StatisticalDataValue7 = ТипИсходного;
			НоваяСтрокаСтатистики.StatisticalDataName8  = "ТипСопоставленного";
			НоваяСтрокаСтатистики.StatisticalDataValue8 = ТипСопоставленного;
			НоваяСтрокаСтатистики.StatisticalDataName9  = "ТипИтогового";
			НоваяСтрокаСтатистики.StatisticalDataValue9 = ТипИтогового;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр из Документ.ТЧ Цикл
		СтрКлюч = Стр.Ключ;
		Прервать;
	КонецЦикла;	
		
	// ТЧ
	Если Документ.ТЧ.Количество() <> 0 Тогда 
		Для каждого Колонка Из Документ.ТЧ[СтрКлюч] Цикл
			ИмяКолонки = Колонка.Ключ;
			
			ОписаниеРеквизита = НайтиВМассивеСтруктур(ОписаниеТЧ, ИмяКолонки, "Идентификатор");
			Если ОписаниеРеквизита <> Неопределено Тогда
				ТипИВидЗначения = Строка(ОписаниеРеквизита.Тип) + ?(ПустаяСтрока(ОписаниеРеквизита.Вид), "", "." + Строка(ОписаниеРеквизита.Вид));
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если ОписаниеРеквизита.Отображать <> Истина Тогда
				Продолжить;
			КонецЕсли;
			
			Для каждого Стр из Документ.ТЧ Цикл			
				
				СтрокаТЧ = Стр.Значение;
				НомерСтроки = СтрЗаменить(Стр.Ключ, "Стр", "");
				
				Если СтрокаТЧ[ИмяКолонки].СопоставленноеЗначение <> СтрокаТЧ[ИмяКолонки].ИтоговоеЗначение //Тогда
					// Е.Масленников. 25.04.18 (
					// вариант, когда сработал нечеткий поиск. Эти результаты нужны, чтобы проанализировать его работу 
					ИЛИ (СтрокаТЧ[ИмяКолонки].СопоставленноеЗначение <> СтрокаТЧ[ИмяКолонки].ИсходноеЗначение И СтрокаТЧ[ИмяКолонки].СпособСопоставления = "3" И ИмяКолонки = "Номенклатура") Тогда 
					// Е.Масленников. 20.03.18 )

					
					Если ТипЗнч(СтрокаТЧ[ИмяКолонки].ИсходноеЗначение) = Тип(ТипИВидЗначения) Тогда
						ТипИсходного = ТипИВидЗначения
					Иначе
						ТипИсходного = Строка(ТипЗнч(СтрокаТЧ[ИмяКолонки].ИсходноеЗначение));
					КонецЕсли;
					Если ТипЗнч(СтрокаТЧ[ИмяКолонки].СопоставленноеЗначение) = Тип(ТипИВидЗначения) Тогда
						ТипСопоставленного = ТипИВидЗначения
					Иначе
						ТипСопоставленного = Строка(ТипЗнч(СтрокаТЧ[ИмяКолонки].СопоставленноеЗначение));
					КонецЕсли;
					Если ТипЗнч(СтрокаТЧ[ИмяКолонки].ИтоговоеЗначение) = Тип(ТипИВидЗначения) Тогда
						ТипИтогового = ТипИВидЗначения
					Иначе
						ТипИтогового = Строка(ТипЗнч(СтрокаТЧ[ИмяКолонки].ИтоговоеЗначение));
					КонецЕсли;	
					
					НоваяСтрокаСтатистики                       = ТЗПоказателиРаботы.Добавить();
					НоваяСтрокаСтатистики.DateTime              =  ТекущаяДата();
					НоваяСтрокаСтатистики.EventName             = "ИзмененияЗначенийРеквизитов";
					//Ресурсы
					НоваяСтрокаСтатистики.User1C                = ПользовательИнфБазы;
					НоваяСтрокаСтатистики.ConfigurationVersion  = ВерсияКонфигурации;
					НоваяСтрокаСтатистики.ConfigurationName     = МетаданныеИмя;
					НоваяСтрокаСтатистики.ClientName            = "ESDL";
					НоваяСтрокаСтатистики.ClientVersion         = ВерсияПрограммы;
					НоваяСтрокаСтатистики.AccauntDataBaseID		= ИДБазыДанныхПользователя;
					//Реквизиты
					
					// Е.Масленников. 20.03.18 (
					//НоваяСтрокаСтатистики.Runtime             = 0;
					НоваяСтрокаСтатистики.Runtime           = ?(СтрокаТЧ[ИмяКолонки].ВремяСопоставления=Неопределено, 0, СтрокаТЧ[ИмяКолонки].ВремяСопоставления);
					НоваяСтрокаСтатистики.ИДСтатистики      =  Новый УникальныйИдентификатор;
					// Е.Масленников. 20.03.18 )
					НоваяСтрокаСтатистики.StatisticalDataName0  = "Реквизит";
					НоваяСтрокаСтатистики.StatisticalDataValue0 = ИмяКолонки;
					НоваяСтрокаСтатистики.StatisticalDataName1  = "СопоставленноеЗначение";
					НоваяСтрокаСтатистики.StatisticalDataValue1 =  Строка(СтрокаТЧ[ИмяКолонки].СопоставленноеЗначение);
					НоваяСтрокаСтатистики.StatisticalDataName2  = "ИтоговоеЗначение";
					НоваяСтрокаСтатистики.StatisticalDataValue2 = Строка(СтрокаТЧ[ИмяКолонки].ИтоговоеЗначение);
					НоваяСтрокаСтатистики.StatisticalDataName3  = "ИсходноеЗначение";
					НоваяСтрокаСтатистики.StatisticalDataValue3 = Строка(СтрокаТЧ[ИмяКолонки].ИсходноеЗначение);
					НоваяСтрокаСтатистики.StatisticalDataName4  = "НомерСтроки";
					НоваяСтрокаСтатистики.StatisticalDataValue4 = Строка(НомерСтроки);
					НоваяСтрокаСтатистики.StatisticalDataName5  = "СпособСопоставления";
					НоваяСтрокаСтатистики.StatisticalDataValue5 = Строка(СтрокаТЧ[ИмяКолонки].СпособСопоставления);
					НоваяСтрокаСтатистики.StatisticalDataName6  = "ИДДокумента";
					НоваяСтрокаСтатистики.StatisticalDataValue6 = ИД;
					НоваяСтрокаСтатистики.StatisticalDataName7  = "ТипИсходного";
					НоваяСтрокаСтатистики.StatisticalDataValue7 = ТипИсходного;
					НоваяСтрокаСтатистики.StatisticalDataName8  = "ТипСопоставленного";
					НоваяСтрокаСтатистики.StatisticalDataValue8 = ТипСопоставленного;
					НоваяСтрокаСтатистики.StatisticalDataName9  = "ТипИтогового";
					НоваяСтрокаСтатистики.StatisticalDataValue9 = ТипИтогового;
					
				КонецЕсли;			
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
КонецФункции

// Процедура выполняет получение словаря соответствий
//
&НаКлиенте
Процедура ОбновитьСловарь() Экспорт;
	
	ТаблицаСловаря.Очистить();	
	Если ИспользоватьСловарь Тогда
		Если СловарьПоНаименованиям Тогда
			СтрокаЗапроса = "/adl42/hs/api_v1/AcDbDictionariesMatches/GetDictionary?XDTOSerializer=true";
		Иначе
			СтрокаЗапроса = "/adl42/hs/api_v1/AcDbDictionariesMatches/GetDictionary?LinkDatabaseID=" + ИДБазыДанныхПользователя + "&XDTOSerializer=true";
		КонецЕсли;
		ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса);
		Если ПараметрыОтвета.КодОтвета = 200 Тогда
			Для Каждого Элемент Из ПараметрыОтвета.СтруктураОтвета.TableDictionary Цикл
				ЭлементСписка = СписокЗначенийСправочникиСловаряСоответствий.НайтиПоЗначению(СтрЗаменить(Элемент.LinkType, "СправочникСсылка.", ""));
				Если ЭлементСписка <> Неопределено И ЭлементСписка.Пометка Тогда
					Если Элемент.LinkID <> "" Тогда
						Ссылка = ПолучитьСсылкуПоИД(Элемент.LinkID, Элемент.LinkType);
					Иначе
						Ссылка = Неопределено;
					КонецЕсли;
					Если Ссылка = Неопределено ИЛИ Найти(Строка(Ссылка), "Объект не найден") = 0 Тогда
						СтрокаСловаря = ТаблицаСловаря.Добавить();
						СтрокаСловаря.СоответствиеИД = Элемент.MatchingID;
						СтрокаСловаря.ИмяСправочника = СтрЗаменить(Элемент.LinkType, "СправочникСсылка.", "");
						СтрокаСловаря.НаименованиеИзДокумента = Элемент.NameFromDocument;
						СтрокаСловаря.СоответствиеСсылкаИД = Элемент.LinkID;
						СтрокаСловаря.СоответствиеСсылка = Ссылка;
						СтрокаСловаря.СоответствиеПолноеНаименование = Элемент.ConformityFullName;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ТаблицаСловаря.Сортировать("ИмяСправочника Возр, СоответствиеПолноеНаименование Возр");
		Иначе
			ТекстПредупреждения =  "Ошибка при чтении словаря соответстыий: " + ПараметрыОтвета.СтруктураОтвета.Description;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Предназначениа для удаления записи в словаре соответствий
//
&НаКлиенте
Функция УдалитьЗаписьВСловаре(СоответствиеИД, УникальныйИдентификаторСообщения = Неопределено) Экспорт
	
	СписокУдаленных = Новый СписокЗначений;
	Для Каждого СтрокаИД ИЗ СоответствиеИД Цикл
		Если УникальныйИдентификаторСообщения = Неопределено Тогда
			УникальныйИдентификаторСообщения = ЭтаФорма.УникальныйИдентификатор;
		КонецЕсли;
		СтруктураПараметров = Новый Структура("MatchingID", СтрокаИД.Значение);
		СтрокаЗапроса = "/adl42/hs/api_v1/AcDbDictionariesMatches/Delete";
		ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", СтруктураПараметров);                   
		МассивСтрок = ТаблицаСловаря.НайтиСтроки(Новый Структура("СоответствиеИД", СтрокаИД.Значение));
		Если НЕ ПараметрыОтвета.КодОтвета = 200 Тогда
			Для каждого Строка Из МассивСтрок Цикл
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст ="Ошибка при удалении записи " + Строка.ИмяСправочника + "справочника " + Строка.СоответствиеСсылка + " в архиве: " + ПараметрыОтвета.СтруктураОтвета.Description;
				СообщениеПользователю.ИдентификаторНазначения = УникальныйИдентификаторСообщения;
				СообщениеПользователю.Сообщить();
				ОбновитьСловарь();
			КонецЦикла;
		Иначе
			Для каждого Строка Из МассивСтрок Цикл
				ТаблицаСловаря.Удалить(Строка);
				СписокУдаленных.Добавить(СтрокаИД.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Возврат СписокУдаленных;

КонецФункции

// Процедура добавляет новые значения в базу словаря соответствий
// 
&НаКлиенте
Процедура ДобавитьЗначенияВСловарь(УникальныйИдентификаторСообщения = Неопределено) Экспорт
	
	УникальныйИдентификаторСообщения = ?(УникальныйИдентификаторСообщения = Неопределено, ЭтаФорма.УникальныйИдентификатор, УникальныйИдентификаторСообщения);	
	МассвивНайденных = ТаблицаСловаря.НайтиСтроки(Новый Структура("СоответствиеИД", ""));
	Для Каждого НовоеСоответствие Из МассвивНайденных Цикл
		//++  Масленников Е.А. 18.06.2018 #Не добавляем строки, где наименования совпадают с учетом латиницы(
		РезультатСравнения = СравнитьДвеСтрокиСУчетомЛатиницы(НовоеСоответствие.НаименованиеИзДокумента, НовоеСоответствие.СоответствиеПолноеНаименование);
		Если РезультатСравнения = 100 ИЛИ НовоеСоответствие.НаименованиеИзДокумента = НовоеСоответствие.СоответствиеПолноеНаименование Тогда
			Продолжить;	
		КонецЕсли;
		//--  Масленников Е.А. 18.06.2018 )
		LinkDatabaseID = ?(СловарьПоНаименованиям, "", ИДБазыДанныхПользователя);
		СтруктураПараметров = Новый Структура("LinkDatabaseID, NameFromDocument, LinkType, LinkID, ConformityFullName", 
											   LinkDatabaseID, 
											   НовоеСоответствие.НаименованиеИзДокумента, 
											   "СправочникСсылка." + НовоеСоответствие.ИмяСправочника, 
											   НовоеСоответствие.СоответствиеСсылкаИД, 
											   НовоеСоответствие.СоответствиеПолноеНаименование);
											   
		СтрокаЗапроса = "/adl42/hs/api_v1/AcDbDictionariesMatches/Add";
		ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", СтруктураПараметров);                   
		Если ПараметрыОтвета.КодОтвета = 200 Тогда
			НовоеСоответствие.СоответствиеИД = ПараметрыОтвета.СтруктураОтвета.MatchingID;  
		Иначе
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст ="Ошибка при сохранении записи словаря соответстий в архиве: " + ПараметрыОтвета.СтруктураОтвета.Description;
			СообщениеПользователю.ИдентификаторНазначения = УникальныйИдентификаторСообщения;
			СообщениеПользователю.Сообщить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

// Процедура выполняет заполонение структуры документа
//
// Параметры:
//		СтруктураДанныхXML - структура данных распознавания
//	    СтруктураОписанияДокумента - описание документа заданного вида
//		Документ - строка таблицы Таблицаданных
//
&НаСервере
Процедура ЗаполнитьСтруктуруДокумента(СтруктураДанныхXML, СтруктураОписанияДокумента, Документ)
	
	Документ.ТЧ = Новый Структура;
	Документ.Шапка = Новый Структура;
	
	//Настройки данных для сценария
	Если Документ.Исходящий И (Документ.ВидДокумента = "ЗП" ИЛИ Документ.ВидДокумента = "ПП") Тогда
		IssCompany = СтруктураДанныхXML.Шапка.IssCompany;
		СтруктураДанныхXML.Шапка.IssCompany = СтруктураДанныхXML.Шапка.DesCompany;
		СтруктураДанныхXML.Шапка.DesCompany = IssCompany;
		Если СтруктураДанныхXML.Шапка.Свойство("IssINN") Тогда
			IssINN = СтруктураДанныхXML.Шапка.IssINN;
			СтруктураДанныхXML.Шапка.IssINN = СтруктураДанныхXML.Шапка.DestINN;
			СтруктураДанныхXML.Шапка.DestINN = IssINN;
		КонецЕсли;
		Если СтруктураДанныхXML.Шапка.Свойство("IssKPP") Тогда
			IssKPP = СтруктураДанныхXML.Шапка.IssKPP;		
			СтруктураДанныхXML.Шапка.IssKPP = СтруктураДанныхXML.Шапка.DestKPP;
			СтруктураДанныхXML.Шапка.DestKPP = IssKPP;
		КонецЕсли;
		Если СтруктураДанныхXML.Шапка.Свойство("IssAddres") Тогда
			IssAddres = СтруктураДанныхXML.Шапка.IssAddres;
			СтруктураДанныхXML.Шапка.IssAddres = СтруктураДанныхXML.Шапка.DestAddres;
			СтруктураДанныхXML.Шапка.DestAddres = IssAddres;
		КонецЕсли;
	КонецЕсли;
	
	// заполнение шапки
	Для Каждого ОписаниеРеквизита Из СтруктураОписанияДокумента.Шапка Цикл
		Если ОписаниеРеквизита.Тип <> "" Тогда
			Документ.Шапка.Вставить(ОписаниеРеквизита.Идентификатор, Новый Структура("ИсходноеЗначение, СопоставленноеЗначение, ИтоговоеЗначение, СпособСопоставления, ВариантыПодбора, ДопИнфо, Равен, ВремяСопоставления"));
			ТекущееЗначение = Неопределено;
			Если Документ.Атрибутирован Тогда
				Если ОписаниеРеквизита.Идентификатор = "ДатаВходящегоДокумента" Тогда
					ТекущееЗначение = Документ.Дата;
				ИначеЕсли ОписаниеРеквизита.Идентификатор = "НомерВходящегоДокумента" Тогда
					ТекущееЗначение = Документ.Номер;
				ИначеЕсли ОписаниеРеквизита.Идентификатор = "Организация" Тогда     
					Если Документ.Исходящий Тогда
						ТекущееЗначение = Документ.Контрагент;
					Иначе
						ТекущееЗначение = Документ.Организация;
					КонецЕсли;
				ИначеЕсли ОписаниеРеквизита.Идентификатор = "Контрагент" Тогда
					Если Документ.Исходящий Тогда
						ТекущееЗначение = Документ.Организация;
					Иначе
						ТекущееЗначение = Документ.Контрагент;
					КонецЕсли;
				ИначеЕсли ОписаниеРеквизита.Идентификатор = "Всего" Тогда
					ТекущееЗначение = Документ.Сумма;
				КонецЕсли;	
			КонецЕсли;
			Если ТекущееЗначение = Неопределено Тогда
				Если ОписаниеРеквизита.Выражение <> "" И Найти(ОписаниеРеквизита.Выражение, "[") = 0 Тогда
					ИмяСтолбца = ОписаниеРеквизита.Выражение;
					СтруктураДанныхXML.Шапка.Свойство(ИмяСтолбца, ТекущееЗначение);
				КонецЕсли;
				Если ОписаниеРеквизита.Идентификатор = "СпособЗачетаАвансов" Тогда
					Результат = ЗаполнениеРеквизита(ОписаниеРеквизита, ТекущееЗначение, Документ.Шапка, Документ.ЗначениеНастроек.СпособЗачетаАвансов.Значение);
				Иначе
					Результат = ЗаполнениеРеквизита(ОписаниеРеквизита, ТекущееЗначение, Документ.Шапка);
					Если ОписаниеРеквизита.Идентификатор = "Комментарий" Тогда
						ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "ИмяПрограммы", ИмяПрограммы);
					КонецЕсли;
				КонецЕсли;
				Если Результат Тогда
					Документ.Шапка[ОписаниеРеквизита.Идентификатор].СпособСопоставления = "1";	
				КонецЕсли;
			КонецЕсли;
			Документ.Шапка[ОписаниеРеквизита.Идентификатор].Вставить("ИсходноеЗначение", ТекущееЗначение);
			СопоставлениеРеквизита(ОписаниеРеквизита, Документ);
		КонецЕсли;
	КонецЦикла;
	
	// заполнение табличной части
	Если СтруктураОписанияДокумента.ТЧ <> Неопределено Тогда
		Если СтруктураДанныхXML.ТЧ <> Неопределено Тогда
			Счетчик = 0;
			Для Каждого Строка Из СтруктураДанныхXML.ТЧ Цикл
				СтруктураНоменклатуры = Новый Структура;
				Для Каждого ОписаниеРеквизита Из СтруктураОписанияДокумента.ТЧ Цикл					
					ТекущееЗначение = "";
					// Е.Масленников. 26.04.18 (
					//СтруктураНоменклатуры.Вставить(ОписаниеРеквизита.Идентификатор, Новый Структура("ИсходноеЗначение, СопоставленноеЗначение, ИтоговоеЗначение, СпособСопоставления, ВариантыПодбора, ДопИнфо, Равен"));
					СтруктураНоменклатуры.Вставить(ОписаниеРеквизита.Идентификатор, Новый Структура("ИсходноеЗначение, СопоставленноеЗначение, ИтоговоеЗначение, СпособСопоставления, ВариантыПодбора, ДопИнфо, Равен, ВремяСопоставления"));
					// Е.Масленников. 26.04.18 )
					Если ОписаниеРеквизита.Выражение <> "" И Найти(ОписаниеРеквизита.Выражение, "[") = 0 Тогда
						ИмяСтолбца = ОписаниеРеквизита.Выражение; 
						Если СтруктураДанныхXML.ТЧ.Колонки.Найти(ИмяСтолбца) <> Неопределено Тогда
							ТекущееЗначение = Строка[ИмяСтолбца]
						КонецЕсли;
					КонецЕсли;
					Если ЗаполнениеРеквизита(ОписаниеРеквизита, ТекущееЗначение, Документ.Шапка, Строка) Тогда
						СтруктураНоменклатуры[ОписаниеРеквизита.Идентификатор].СпособСопоставления = "1";
					КонецЕсли;
					СтруктураНоменклатуры[ОписаниеРеквизита.Идентификатор].Вставить("ИсходноеЗначение", ТекущееЗначение);
					СопоставлениеРеквизита(ОписаниеРеквизита, Документ, СтруктураНоменклатуры);
				КонецЦикла;
				Документ.ТЧ.Вставить(?(Счетчик = 0 ,"Стр0",("Стр" + Формат(Счетчик, "ЧГ=0"))), СтруктураНоменклатуры);
				Счетчик = Счетчик + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет сопоставление реквизита
//
// параметры:
// 		ОписаниеРеквизита - структура описания реквизита
//      Документ - строка таблицы Таблицаданных
//      СтруктураНоменклатуры - строка табличной части документа 
//      СозданиеЭлемента - признак создания элемента
//
&НаСервере
Процедура СопоставлениеРеквизита(ОписаниеРеквизита, Документ, СтруктураНоменклатуры = Неопределено, СозданиеЭлемента = Ложь)
		
	//Описание СпособСопоставление, строковые значения ////////////////////////////////////////////
	// 0 -не сопоставлялся
	// 1 -значение из ТЗ правил
	// 2 -простой поиск 
	// 3 -нечеткий поиск                                         
	// 4 -создан новый
	// 5 -словарь
	// 6 -элемент найден по коду
	// 7 -ссылка удалена и задано наименование нового элемента
	// 8 -изменили вручную
	// 9 -прошел все и не сопоставился
	// А -элемент найден по артикулу
	// = -элемент связан с контрагентом/огранизацией
	////////////////////////////////////////////////////////////////////////////////////////////////

	ТипЗнач = ОписаниеРеквизита.Тип;
	Если ПустаяСтрока(ТипЗнач) Тогда
		Возврат;
	КонецЕсли;
	
	ВидЗнач = ОписаниеРеквизита.Вид;
	ТипИВидЗначения = Тип(Строка(ТипЗнач) + ?(ПустаяСтрока(ВидЗнач), "", "." + Строка(ВидЗнач)));
	
	Если СтруктураНоменклатуры = Неопределено Тогда
		Данные = Документ.Шапка;
	Иначе
		Данные = СтруктураНоменклатуры;
	КонецЕсли;
	СтруктураРеквизита = Данные[ОписаниеРеквизита.Идентификатор];
	
	Владелец = ?(ОписаниеРеквизита.Владелец <> "", Данные[ОписаниеРеквизита.Владелец].ИтоговоеЗначение, "");
	Владелец = ?(ТипЗнч(Владелец) = Тип("Строка"), "", Владелец);
	Равен = ?(СтруктураРеквизита.Равен = Неопределено, Ложь, СтруктураРеквизита.Равен);
	// Масленников Е. 26.04.2018 (
	//ПараметрыСопоставления = Новый Структура("Равен, Владелец, Родитель, СопоставляемоеЗначение, СопоставленноеЗначение, СпособСопоставления, ", Равен, Владелец, "");
	ПараметрыСопоставления = Новый Структура("Равен, Владелец, Родитель, СопоставляемоеЗначение, СопоставленноеЗначение, СпособСопоставления, ВремяСопоставления", Равен, Владелец, "");
	// Масленников Е. 26.04.2018 )
	
	//Если СозданиеЭлемента И Документ.Загрузить Тогда
	//	Если ТипЗнач = "СправочникСсылка" И НЕ ТипЗнч(СтруктураРеквизита.ИтоговоеЗначение) = ТипИВидЗначения Тогда
	//		Если НЕ СтруктураРеквизита.ИтоговоеЗначение = "" Тогда
	//			Ссылка = СозданиеШаблон(ОписаниеРеквизита, Документ, Данные, ,НовыеЭлементыСправочников);
	//			Если Ссылка = Неопределено Тогда
	//				СтруктураРеквизита.ИтоговоеЗначение = СозданиеЭлементСправочникаОбщее(ОписаниеРеквизита, Данные); 
	//			Иначе
	//				СтруктураРеквизита.ИтоговоеЗначение = Ссылка;
	//			КонецЕсли;
	//		Иначе
	//			СтруктураРеквизита.ИтоговоеЗначение = Справочники[ВидЗнач].ПустаяСсылка();
	//		КонецЕсли;
	//		СтруктураРеквизита.СпособСопоставления = "4";
	//		Если НЕ СтруктураРеквизита.ИтоговоеЗначение.Пустая() Тогда
	//			СтрокаНовогоЭлемента = НовыеЭлементыСправочников.Добавить();
	//			СтрокаНовогоЭлемента.ВидСправочника = ВидЗнач;
	//			СтрокаНовогоЭлемента.Ссылка = СтруктураРеквизита.ИтоговоеЗначение;
	//			СтрокаНовогоЭлемента.ДокументИД = Документ.ДокументИД;
	//		КонецЕсли;
	//	КонецЕсли;
	//ИначеЕсли СозданиеЭлемента Тогда 
	Если СозданиеЭлемента Тогда 

		// Условие выполняется при загрузке документа в базу
		ПараметрыСопоставления.Вставить("СозданиеЭлемента");
		Сопоставить = Истина;
		Если ТипЗнч(СтруктураРеквизита.ИтоговоеЗначение) = ТипИВидЗначения Тогда
			Если ТипЗнач = "СправочникСсылка" И ТипЗнч(СтруктураРеквизита.ИсходноеЗначение) <> ТипИВидЗначения
			И (СтруктураРеквизита.ИтоговоеЗначение.Пустая() ИЛИ (НЕ СтруктураРеквизита.ИтоговоеЗначение.Пустая() И СтруктураРеквизита.ИтоговоеЗначение.ПолучитьОбъект() = Неопределено)) Тогда
				// В случае битой ссылки создается элемент с исходным значением
				СтруктураРеквизита.ИтоговоеЗначение = СтруктураРеквизита.ИсходноеЗначение;
			Иначе
				// Элемент сопоставлен
				Сопоставить = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если Сопоставить Тогда
			Если СтруктураРеквизита.ИтоговоеЗначение <> "" Тогда
				ПараметрыСопоставления.СопоставляемоеЗначение = СокрЛП(СтруктураРеквизита.ИтоговоеЗначение); 
				СопоставлениеПроизведено = СопоставлениеШаблон(ОписаниеРеквизита, Документ, Данные, ПараметрыСопоставления, ESDLСтруктураОПФ, ИмяШаблона);
				Если СопоставлениеПроизведено <> Истина Тогда
					СопоставлениеОбщее(ОписаниеРеквизита, ПараметрыСопоставления);
				КонецЕсли;
				Если ТипЗнач = "СправочникСсылка" И ТипЗнч(ПараметрыСопоставления.СопоставленноеЗначение) = ТипИВидЗначения И НЕ ПараметрыСопоставления.СопоставленноеЗначение.Пустая() Тогда
					СтруктураРеквизита.ИсходноеЗначение = ПараметрыСопоставления.СопоставленноеЗначение;
					СтруктураРеквизита.ИтоговоеЗначение = ПараметрыСопоставления.СопоставленноеЗначение;
					СтруктураРеквизита.СпособСопоставления = ПараметрыСопоставления.СпособСопоставления;
				ИначеЕсли ТипЗнач = "СправочникСсылка" Тогда
					
					Ссылка = СозданиеШаблон(ОписаниеРеквизита, Документ, Данные, ,НовыеЭлементыСправочников);
					Если Ссылка = Неопределено Тогда
						СтруктураРеквизита.ИтоговоеЗначение = СозданиеЭлементСправочникаОбщее(ОписаниеРеквизита, Данные); 
					Иначе
						СтруктураРеквизита.ИтоговоеЗначение = Ссылка;
					КонецЕсли;
					СтруктураРеквизита.СпособСопоставления = "4";
					
					Если НЕ СтруктураРеквизита.ИтоговоеЗначение.Пустая() Тогда
						СтрокаНовогоЭлемента = НовыеЭлементыСправочников.Добавить();
						СтрокаНовогоЭлемента.ВидСправочника = ВидЗнач;
						СтрокаНовогоЭлемента.Ссылка = СтруктураРеквизита.ИтоговоеЗначение;
						СтрокаНовогоЭлемента.ДокументИД = Документ.ДокументИД;
					КонецЕсли;
					
				КонецЕсли;
			ИначеЕсли ТипЗнач = "СправочникСсылка" И СтруктураРеквизита.ИтоговоеЗначение = "" Тогда
				СтруктураРеквизита.ИтоговоеЗначение = Справочники[ВидЗнач].ПустаяСсылка();
				СтруктураРеквизита.СпособСопоставления = "4";
			КонецЕсли;
			СтруктураРеквизита.Равен = ПараметрыСопоставления.Равен;
		КонецЕсли;
		Если ИспользоватьСловарь И СписокЗначенийСправочникиСловаряСоответствий.НайтиПоЗначению(ВидЗнач) <> Неопределено И ТипЗнач = "СправочникСсылка" 
			И НЕ СтруктураРеквизита.ИтоговоеЗначение.Пустая() И ЗначениеЗаполнено(СтруктураРеквизита.ИсходноеЗначение)  
			И ВРег(СтруктураРеквизита.ИтоговоеЗначение.Наименование) <> ВРег(СтруктураРеквизита.ИсходноеЗначение)
			И  (Метаданные.Справочники[ВидЗнач].Реквизиты.Найти("НаименованиеПолное") <> Неопределено И ВРег(СтруктураРеквизита.ИтоговоеЗначение.НаименованиеПолное) <> ВРег(СтруктураРеквизита.ИсходноеЗначение)) Тогда
			
			СоответствиеПолноеНаименование = ?(Метаданные.Справочники[ВидЗнач].Реквизиты.Найти("НаименованиеПолное") <> Неопределено, СтруктураРеквизита.ИтоговоеЗначение.НаименованиеПолное, СтруктураРеквизита.ИтоговоеЗначение.Наименование);
			МассивСтрок = ТаблицаСловаря.НайтиСтроки(Новый Структура("ИмяСправочника, НаименованиеИзДокумента", ВидЗнач, СтруктураРеквизита.ИсходноеЗначение));
			Если МассивСтрок.Количество() > 0 Тогда
				СтрокаНовогоЭлемента = МассивСтрок[0];
				СтрокаНовогоЭлемента.СоответствиеИД = "";
			Иначе
				СтрокаНовогоЭлемента = ТаблицаСловаря.Добавить();
			КонецЕсли;
			СтрокаНовогоЭлемента.ИмяСправочника = ВидЗнач;
			СтрокаНовогоЭлемента.СоответствиеСсылка = СтруктураРеквизита.ИтоговоеЗначение;
			СтрокаНовогоЭлемента.НаименованиеИзДокумента = СтруктураРеквизита.ИсходноеЗначение;
			СтрокаНовогоЭлемента.СоответствиеПолноеНаименование = СоответствиеПолноеНаименование;
			СтруктураСсылки = ТипСсылки(СтруктураРеквизита.ИтоговоеЗначение);
			СтрокаНовогоЭлемента.СоответствиеСсылкаИД = СтруктураСсылки.СсылкаИД;
			
		КонецЕсли;
		
	Иначе
		Если ТипЗнч(СтруктураРеквизита.ИсходноеЗначение) = ТипИВидЗначения Тогда
			Если ЗначениеНеЗаполнено(СтруктураРеквизита.ИсходноеЗначение) Тогда
				СтруктураРеквизита.СопоставленноеЗначение = ПустоеЗначениеТипа(ТипИВидЗначения);
				СтруктураРеквизита.СпособСопоставления = "0";
			Иначе
				СтруктураРеквизита.СопоставленноеЗначение = СтруктураРеквизита.ИсходноеЗначение;
				Если ТипЗнач = "Строка" ИЛИ ТипЗнач = "Число" ИЛИ ТипЗнач = "Дата" Тогда
					СтруктураРеквизита.СпособСопоставления = "0";
				Иначе
					СтруктураРеквизита.СпособСопоставления = "1";	
				КонецЕсли;
			КонецЕсли;
		Иначе
			ПараметрыСопоставления.СопоставляемоеЗначение = СокрЛП(СтруктураРеквизита.ИсходноеЗначение);
			//Если ОписаниеРеквизита.Идентификатор = "Организация" Тогда
			Если ТипЗнач = "СправочникСсылка" Тогда	//поиск в словаре соответствий	
				ПоискВСловареСоответствий(ПараметрыСопоставления, ВидЗнач);
			КонецЕсли;
			Если НЕ ПараметрыСопоставления.СпособСопоставления = "5" Тогда
				СопоставлениеПроизведено = СопоставлениеШаблон(ОписаниеРеквизита, Документ, Данные, ПараметрыСопоставления, ESDLСтруктураОПФ, ИмяШаблона);
				Если СопоставлениеПроизведено <> Истина Тогда
					СопоставлениеОбщее(ОписаниеРеквизита, ПараметрыСопоставления);
				//ИначеЕсли ПараметрыСопоставления.СпособСопоставления = "9" И ТипЗнач = "СправочникСсылка" Тогда
				//	//поиск в словаре соответствий	
				//	ПоискВСловареСоответствий(ПараметрыСопоставления, ВидЗнач);
				КонецЕсли;
			КонецЕсли;		
			Если (ОписаниеРеквизита.Идентификатор = "Контрагент" ИЛИ ОписаниеРеквизита.Идентификатор = "Номенклатура") И (ТипЗнч(ПараметрыСопоставления.СопоставленноеЗначение) <> ТипИВидЗначения ИЛИ (ТипЗнч(ПараметрыСопоставления.СопоставленноеЗначение) = ТипИВидЗначения И ПараметрыСопоставления.СопоставленноеЗначение.Пустая())) Тогда
				// Масленников Е. 27.04.2018 (
				//ПоискПоПолномуНаименованию = Истина;
				Если ОписаниеРеквизита.Идентификатор = "Номенклатура" Тогда
					ПоискПоПолномуНаименованию = СтруктураПараметровИБ.ПроцентСоответствийПолногоНаименования>=95 И СтруктураПараметровИБ.КоличествоНоменклатуры<5000;	
				Иначе
					ПоискПоПолномуНаименованию = Истина;	
				КонецЕсли;
				// Масленников Е. 27.04.2018)
				Если ОписаниеРеквизита.Идентификатор = "Номенклатура" Тогда
					ПроизводитьНечеткийПоиск = Документ.ЗначениеНастроек.НечеткийПоискНоменклатуры.Значение;
					ПоискТолькоВПриоритетныхГруппах = Документ.ЗначениеНастроек.ПоискТолькоВПриоритетныхГруппах.Значение;	
					Если ПоискТолькоВПриоритетныхГруппах Тогда 
						СписокГруппДляСопоставления = Документ.ЗначениеНастроек.ГруппаНоменклатурДляСопоставления.Значение;	
					Иначе
						СписокГруппДляСопоставления = Неопределено;
						// Масленников Е. 27.04.2018 (
						//ПоискПоПолномуНаименованию = (КоличестоЭлементовСправочникаНоменклатура < 5000);
						// Масленников Е. 27.04.2018)
					КонецЕсли;
				КонецЕсли;
				Если (ОписаниеРеквизита.Идентификатор = "Контрагент" ИЛИ (ОписаниеРеквизита.Идентификатор = "Номенклатура" И ПроизводитьНечеткийПоиск = Истина)) Тогда
					ВероятностьНСС = 70;
					// Масленников Е. 26.04.2018 (
					ВремяСопоставленияНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
					// Масленников Е. 26.04.2018)
					СписокВыбораДляЭлемента = ЗаполнитьСписокВыбора(ESDLТаблицаВариантовНечеткогоПоиска, ОписаниеРеквизита, ПараметрыСопоставления.СопоставляемоеЗначение, "", Истина, СписокГруппДляСопоставления, ПоискПоПолномуНаименованию, ESDLСтруктураОПФ);
					Если СписокВыбораДляЭлемента.Количество() > 2 Тогда
						Вариант = ?(СписокВыбораДляЭлемента[2].Представление = "Обновить список вариантов", 3, 2);
						Если СписокВыбораДляЭлемента.Количество() > Вариант Тогда
							НаибольшаяВероятность = Число(СокрЛП(Лев(СписокВыбораДляЭлемента[Вариант].Представление, 3)));
							Если НаибольшаяВероятность > ВероятностьНСС Тогда
								ЭлементПоиска = СписокВыбораДляЭлемента[Вариант].Значение;
								ПараметрыСопоставления.СпособСопоставления = "3";
								ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
								// Масленников Е. 26.04.2018 (
									ПараметрыСопоставления.ВремяСопоставления = ТекущаяУниверсальнаяДатаВМиллисекундах()-ВремяСопоставленияНачало;								
								// Масленников Е. 26.04.2018 )
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СтруктураРеквизита.СопоставленноеЗначение = ПараметрыСопоставления.СопоставленноеЗначение;
			СтруктураРеквизита.СпособСопоставления = ПараметрыСопоставления.СпособСопоставления;
			// Масленников Е. 26.04.2018 (
			СтруктураРеквизита.ВремяСопоставления = ПараметрыСопоставления.ВремяСопоставления;								
			// Масленников Е. 26.04.2018 )

		КонецЕсли;	
		
		Если ОписаниеРеквизита.Идентификатор = "ДоговорКонтрагента" Тогда 
			ДоговорСсылка = ПодборДоговораКонтрагента(Документ.ДокументИД, ТипИВидЗначения);
			Если ДоговорСсылка <> Неопределено Тогда
				СтруктураРеквизита.СопоставленноеЗначение =  ДоговорСсылка;
				СтруктураРеквизита.СпособСопоставления = "2";
			КонецЕсли;
		КонецЕсли;

		Если (СтруктураРеквизита.СпособСопоставления = "9" ИЛИ СтруктураРеквизита.СпособСопоставления = "1") И НЕ ЗначениеЗаполнено(СтруктураРеквизита.СопоставленноеЗначение) Тогда
			Если СтруктураРеквизита.ИсходноеЗначение <> Неопределено Тогда
				Если НЕ ЗначениеЗаполнено(СтруктураРеквизита.СопоставленноеЗначение) Тогда
					СтруктураРеквизита.СопоставленноеЗначение = СтруктураРеквизита.ИсходноеЗначение;
				КонецЕсли;
			Иначе
				СтруктураРеквизита.СопоставленноеЗначение = "";
			КонецЕсли;
		КонецЕсли;
		
		СтруктураРеквизита.ИтоговоеЗначение = СтруктураРеквизита.СопоставленноеЗначение;
		СтруктураРеквизита.Равен = ПараметрыСопоставления.Равен;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет сопоставление реквизита
//
// параметры:
// 		ОписаниеРеквизита, структура - структура описания реквизита
//		ПараметрыСопоставления, структура - параметры сопоставления
//
&НаСервере
Процедура СопоставлениеОбщее(ОписаниеРеквизита, ПараметрыСопоставления)
		
	Если ОписаниеРеквизита.Тип = "ПеречислениеСсылка" Тогда
		// значение перечисления			
		МетПеречисление = Метаданные.Перечисления.Найти(ОписаниеРеквизита.Вид);
		Если МетПеречисление = Неопределено Тогда
			ПараметрыСопоставления.СопоставленноеЗначение = Неопределено;
			ПараметрыСопоставления.СпособСопоставления = "0";
			Возврат;				
		КонецЕсли;
		
		НайденноеЗначение = МетПеречисление.ЗначенияПеречисления.Найти(ПараметрыСопоставления.СопоставляемоеЗначение);
		Если НайденноеЗначение = Неопределено Тогда
			ПараметрыСопоставления.СопоставленноеЗначение = Перечисления[ОписаниеРеквизита.Вид].ПустаяСсылка();
			ПараметрыСопоставления.СпособСопоставления = "9";
		Иначе
			ПараметрыСопоставления.СопоставленноеЗначение = НайденноеЗначение;
			ПараметрыСопоставления.СпособСопоставления = "2";
		КонецЕсли;			
		
	ИначеЕсли ОписаниеРеквизита.Тип = "СправочникСсылка" Тогда
		
		Если Метаданные.Справочники.Найти(ОписаниеРеквизита.Вид) = Неопределено ИЛИ СтрокаНеИмеетСмысла(ПараметрыСопоставления.СопоставляемоеЗначение) Тогда
			ПараметрыСопоставления.СопоставленноеЗначение = Неопределено;	
			ПараметрыСопоставления.СпособСопоставления = "0";
			Возврат;
		КонецЕсли;
		
		НайденноеЗначение = ВыполнитьПоискЭлемента(ПараметрыСопоставления, ОписаниеРеквизита.Вид);

		Если НЕ НайденноеЗначение.Пустая() Тогда
			ПараметрыСопоставления.СопоставленноеЗначение = НайденноеЗначение;
			Если НЕ ЗначениеЗаполнено(ПараметрыСопоставления.СпособСопоставления) Тогда
				ПараметрыСопоставления.СпособСопоставления = "2";
			КонецЕсли;
		Иначе
			ПараметрыСопоставления.СопоставленноеЗначение = Неопределено;
			ПараметрыСопоставления.СпособСопоставления = "0";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция создания элементов справочников
//
// Параметры:
//      ОписаниеРеквизита - структура описания реквизита
//		Данные - данные сопоставления
//
// Возвращаемое значение:
//     Ссылка нового элемента
//
&НаСервереБезКонтекста
Функция СозданиеЭлементСправочникаОбщее(ОписаниеРеквизита, Данные) 
	
	ВидЗнач = ОписаниеРеквизита.Вид;
	
	Объект = Справочники[ВидЗнач].СоздатьЭлемент();
	ДлинаНаименования = Метаданные.Справочники[ВидЗнач].ДлинаНаименования;
	Если ДлинаНаименования > 0 Тогда
		Объект.Наименование = Лев(СокрЛП(Данные[ОписаниеРеквизита.Идентификатор].ИтоговоеЗначение), ДлинаНаименования);			
	Иначе
		ДлинаКода = Метаданные.Справочники[ВидЗнач].ДлинаКода;
		ТипКода = Метаданные.Справочники[ВидЗнач].ТипКода;
		Если (ДлинаКода > 0) И (ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка) Тогда
			Объект.Код = Лев(СокрЛП(Данные[ОписаниеРеквизита.Идентификатор].ИтоговоеЗначение), ДлинаКода);
		КонецЕсли;
	КонецЕсли;
	Если ЗаписатьОбъект(Объект) Тогда
		Ссылка = Объект.Ссылка;
	Иначе
		Ссылка = Справочники[ВидЗнач].ПустаяСсылка();
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

// Функция выполняет заполнение данных реквизита
//
&НаСервереБезКонтекста
Функция ЗаполнениеРеквизита(ОписаниеРеквизита, ТекущееЗначение, Шапка, СтрокаТЧ = Неопределено)
	
	Если ТипЗнч(ТекущееЗначение) = Тип("Строка") Тогда
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "E", "Е");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "e", "е");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "O", "О");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "o", "о");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "H", "Н");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "K", "К");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "T", "Т");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "P", "Р");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "p", "р");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "A", "А");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "a", "а");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "X", "Х");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "x", "х");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "C", "С");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "c", "с");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "B", "В");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "M", "М");
	КонецЕсли;
	
	Если ОписаниеРеквизита.Выражение <> "" И Найти(ОписаниеРеквизита.Выражение, "[") = 0 Тогда
		ТипКолонки = ОписаниеРеквизита.Тип;
		Если ТипКолонки = "Булево" Тогда
			Если ТекущееЗначение <> Неопределено И ВРЕГ(ТекущееЗначение) = ВРЕГ("Истина") Тогда
				ТекущееЗначение = Истина;
			Иначе
				ТекущееЗначение = Ложь;
			КонецЕсли;
		ИначеЕсли ТипКолонки = "Число" Тогда 
			Если ТекущееЗначение = Неопределено Или ТекущееЗначение = "" Тогда
				ТекущееЗначение = 0
			Иначе
				Попытка
					ТекущееЗначение = ПодготовитьСтрокуКПереводуВТип(ТекущееЗначение, ТипКолонки);
					ТекущееЗначение = Число(ТекущееЗначение);
				Исключение
					ТекущееЗначение = 0;
				КонецПопытки;
			КонецЕсли;
		ИначеЕсли ТипКолонки = "Дата" Тогда
			Если ТекущееЗначение = Неопределено Или ТекущееЗначение = "" Тогда
				ТекущееЗначение = Дата('00010101');
			Иначе
				Дата = СтрокаДатыВДату(ТекущееЗначение);
				СтараяДата = Шапка.Свойство("СтараяДата");
				Если Дата <> Неопределено И ТипЗнч(Дата) = Тип("Дата") Тогда
					Если ОписаниеРеквизита.Идентификатор = "ДатаРождения" ИЛИ ОписаниеРеквизита.Идентификатор = "ДатаВыдачи" ИЛИ (Дата > (ТекущаяДата() - 100000000) И Дата < (ТекущаяДата() + 100000000)) Тогда   // Если дата не попадает в интервал +- около трех лет, то считаем нераспознанной
						ТекущееЗначение = Дата;
					Иначе
						ТекущееЗначение = '00010101';
					КонецЕсли;
				Иначе
					ТекущееЗначение = Дата('00010101');
				КонецЕсли;
			КонецЕсли;
		//ИначеЕсли ТипКолонки = "Строка" Тогда
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "E", "Е");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "e", "е");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "O", "О");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "o", "о");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "H", "Н");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "K", "К");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "T", "Т");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "P", "Р");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "p", "р");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "A", "А");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "a", "а");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "X", "Х");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "x", "х");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "C", "С");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "c", "с");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "B", "В");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "M", "М");
		КонецЕсли;
	Иначе 
		Выражение = ОписаниеРеквизита.Выражение;
		Выражение = Сред(Выражение, 2, СтрДлина(Выражение) - 2); 
		Если Выражение = "" Тогда
			ТекущееЗначение = Неопределено;
			Возврат Ложь;
		КонецЕсли;
		Попытка                                                   
			//ТекущееЗначение = Вычислить(Выражение);
			Параметры = Новый Структура("Шапка, СтрокаТЧ", Шапка, СтрокаТЧ);
			ТекущееЗначение = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме(Выражение, Параметры);
		Исключение
			ОписОшибки = ОписаниеОшибки();         
			ТекущееЗначение = Неопределено;
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции

// Функция выполняет поиск элемента в базе данных и в словаре соответствий
//
// Параметры:
//     ПараметрыСопоставления - структура параметров сопоставления
//     ИмяСправочника - имя справочника
//     МетодПоиска - поиск по коду или по наименованию
//
// Возвращаемое значение: 
//     ссылка на найденный элемент
//
&НаСервере
Функция ВыполнитьПоискЭлемента(ПараметрыСопоставления, ИмяСправочника, МетодПоиска = "ПоНаименованию") Экспорт
		
	//поиск в справочнике
	Рез = НайтиВСправочнике(ПараметрыСопоставления, ИмяСправочника, МетодПоиска); 
	Если НЕ Рез.Пустая() Тогда
		ПараметрыСопоставления.СпособСопоставления = "2"; 
	Иначе
		//поиск в словаре соответствий	
		Рез = ПоискВСловареСоответствий(ПараметрыСопоставления, ИмяСправочника);
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции 

// Функция выполняет поиск элемента в базе данных
//
// Параметры:
//     ПараметрыСопоставления - структура параметров сопоставления
//     ИмяСправочника - имя справочника
//     МетодПоиска - поиск по коду или по наименованию
//
// Возвращаемое значение: 
//     ссылка на найденный элемент
//
&НаСервереБезКонтекста
Функция НайтиВСправочнике(ПараметрыСопоставления, ИмяСправочника, МетодПоиска = "ПоНаименованию")
	
	СтрокаПоиска = ПараметрыСопоставления.СопоставляемоеЗначение;
	Родитель = ПараметрыСопоставления.Родитель;
	Владелец = ПараметрыСопоставления.Владелец;
	
	Если МетодПоиска = "ПоНаименованию" Тогда
		ДлинаСтроки = Метаданные.Справочники[ИмяСправочника].ДлинаНаименования;
		Если ДлинаСтроки = 0 Тогда
			ДлинаКода = Метаданные.Справочники[ИмяСправочника].ДлинаКода;
			ТипКода = Метаданные.Справочники[ИмяСправочника].ТипКода;
			Если (ДлинаКода > 0) И (ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка) Тогда
				МетодПоиска = "ПоКоду";
				ДлинаСтроки = ДлинаКода;
			Иначе
				Возврат Справочники[ИмяСправочника].ПустаяСсылка();
			КонецЕсли;		
		КонецЕсли;
	Иначе
		ДлинаСтроки = Метаданные.Справочники[ИмяСправочника].ДлинаКода;
	КонецЕсли;
	
	Если СтрДлина(СтрокаПоиска) > ДлинаСтроки Тогда
		СтрокаПоиска = Лев(СтрокаПоиска, ДлинаСтроки);	
	КонецЕсли;

	
	Иерархический = ?(Метаданные.Справочники[ИмяСправочника].Иерархический И Метаданные.Справочники[ИмяСправочника].ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов, Истина, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникПоиска.Ссылка
	|ИЗ
	|	Справочник."+ИмяСправочника+" КАК СправочникПоиска
	|ГДЕ	
	|	СправочникПоиска." + ?(МетодПоиска = "ПоНаименованию", "Наименование", "Код") + " = &СтрокаПоиска
	|	" + ?(Иерархический, "И НЕ СправочникПоиска.ЭтоГруппа","") + "
	|	И НЕ СправочникПоиска.ПометкаУдаления";
	
	Если НЕ ЗначениеНеЗаполнено(Родитель) Тогда		
		Запрос.Текст = Запрос.Текст + "
		|	И СправочникПоиска.Родитель В ИЕРАРХИИ(&Родитель)";
		Запрос.УстановитьПараметр("Родитель", Родитель);
	КонецЕсли;
	
	//Проверка на наличие реквизита "Владелец" у справочника
	Если Метаданные.Справочники[ИмяСправочника].Владельцы.Количество() > 0 И НЕ ЗначениеНеЗаполнено(Владелец) Тогда		
		Запрос.Текст = Запрос.Текст + "
		|	И СправочникПоиска.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", Владелец);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	КонецЕсли;	
	
	Если Найти(ИмяСправочника,"Номенклатура") > 0 ИЛИ Найти(ИмяСправочника,"Контрагенты") > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникПоиска.Ссылка
		|ИЗ
		|	Справочник." + ИмяСправочника + " КАК СправочникПоиска
		|ГДЕ	
		|	ПОДСТРОКА(СправочникПоиска.НаименованиеПолное,0,200) = &СтрокаПоиска
		|	" + ?(Иерархический, "И НЕ СправочникПоиска.ЭтоГруппа", "") + "
		|	И НЕ СправочникПоиска.ПометкаУдаления";
		
		Если НЕ ЗначениеНеЗаполнено(Родитель) Тогда		
			Запрос.Текст = Запрос.Текст + "
			|	И СправочникПоиска.Родитель В ИЕРАРХИИ(&Родитель)";
			Запрос.УстановитьПараметр("Родитель", Родитель);
		КонецЕсли;
		
		//Проверка на наличие реквизита "Владелец" у справочника
		Если Метаданные.Справочники[ИмяСправочника].Владельцы.Количество() > 0 И НЕ ЗначениеНеЗаполнено(Владелец) Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И СправочникПоиска.Владелец = &Владелец";
			Запрос.УстановитьПараметр("Владелец", Владелец);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			Возврат Результат.Ссылка;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Справочники[ИмяСправочника].ПустаяСсылка();
	
КонецФункции	

// Функция выполняет поиск элемента в словаре соответствий
//
// Параметры:
//     ПараметрыСопоставления - структура параметров сопоставления
//     ИмяСправочника - имя справочника
//
// Возвращаемое значение: 
//     ссылка на найденный элемент
//
&НаСервере
Функция ПоискВСловареСоответствий(ПараметрыСопоставления, ИмяСправочника)     	
	
	СтрокаПоиска = ПараметрыСопоставления.СопоставляемоеЗначение;
	
	Рез = Справочники[ИмяСправочника].ПустаяСсылка();
	Если ИспользоватьСловарь Тогда
		ПараметрыОтбора = Новый Структура("ИмяСправочника, НаименованиеИзДокумента", ИмяСправочника, СтрокаПоиска);
		МассивСтрок = ТаблицаСловаря.НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаСловаря = МассивСтрок[0];
			Если СтрокаСловаря.СоответствиеСсылка <> Неопределено Тогда
				Рез = СтрокаСловаря.СоответствиеСсылка;
			ИначеЕсли СловарьПоНаименованиям Тогда
				ПараметрыСопоставления.СопоставляемоеЗначение = СтрокаСловаря.СоответствиеПолноеНаименование;
				Рез = НайтиВСправочнике(ПараметрыСопоставления, ИмяСправочника, "ПоНаименованию");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Рез.Пустая() И НЕ Рез.ПометкаУдаления Тогда
		ПараметрыСопоставления.СопоставленноеЗначение = Рез;
		ПараметрыСопоставления.СпособСопоставления = "5"; 
	Иначе
		ПараметрыСопоставления.СопоставляемоеЗначение = СтрокаПоиска;
	КонецЕсли;

	Возврат Рез;

КонецФункции

// Функция выполняет подбор договора контрагента
//
// Параметры:
//     	ИД, строка - ИД документа
//		ТипИВидЗначенияДоговор, строка - тип ссылки
//
// Возвращаемое значение:
//		Ссылка на договор или Неопределено
//
&НаСервере                                                                                           
Функция ПодборДоговораКонтрагента(ИД, ТипИВидЗначенияДоговор = Неопределено) Экспорт
	
	ТаблицаДанныхЗначение = ДанныеФормыВЗначение(ТаблицаДанных, Тип("ТаблицаЗначений"));
	Документ = ТаблицаДанныхЗначение.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ИД, 1))[0];

	СтруктураОписанияДокумента = Неопределено;
	СтруктураОписанийДокументов.Свойство(Документ.ВидДокумента, СтруктураОписанияДокумента);
	ШапкаДокумента = СтруктураОписанияДокумента.Шапка;
	ОписаниеРеквизитаКонтрагент = НайтиВМассивеСтруктурНаСервере(СтруктураОписанияДокумента.Шапка, "Контрагент", "Идентификатор");
	ТипЗначКонтрагент = ОписаниеРеквизитаКонтрагент.Тип;
	ВидЗначКонтрагент = ОписаниеРеквизитаКонтрагент.Вид;
	ТипИВидЗначенияКонтрагент = Тип(Строка(ТипЗначКонтрагент) + ?(ПустаяСтрока(ВидЗначКонтрагент), "", "." + Строка(ВидЗначКонтрагент)));
	Если ТипИВидЗначенияДоговор = Неопределено Тогда
		ОписаниеРеквизитаДоговор = НайтиВМассивеСтруктурНаСервере(СтруктураОписанияДокумента.Шапка, "ДоговорКонтрагента", "Идентификатор");
		ТипЗначДоговор = ОписаниеРеквизитаДоговор.Тип;
		ВидЗначДоговор = ОписаниеРеквизитаДоговор.Вид;
		ТипИВидЗначенияДоговор = Тип(Строка(ТипЗначДоговор) + ?(ПустаяСтрока(ВидЗначДоговор), "", "." + Строка(ВидЗначДоговор)));
	КонецЕсли;
	Если ТипЗнч(Документ.Шапка.Контрагент.ИтоговоеЗначение) = ТипИВидЗначенияКонтрагент Тогда
		AccountDatabaseID = ИДБазыДанныхПользователя;
		OrganizationID = XMLСтрока(Документ.Шапка.Организация.ИтоговоеЗначение);
		ContractorID = XMLСтрока(Документ.Шапка.Контрагент.ИтоговоеЗначение);
		CreateDocument = Документ.ВидДокумента;
		СтрокаЗапроса = "/adl42/hs/api_v1/AcDbOrgСontractorАgreement/Get?AccountDatabaseID=" + AccountDatabaseID
		+ "&OrganizationID=" + OrganizationID + "&ContractorID=" + ContractorID + "&CreateDocument=" + CreateDocument;
		ПараметрыОтвета = ВыполнитьЗапросНаСервере("ESDLADLHTTP", СтрокаЗапроса, "Get", Неопределено, Неопределено, Ложь, "", ESDLТокен, beta);
		Если ПараметрыОтвета.КодОтвета = 200 Тогда
			АgreementID = ПараметрыОтвета.СтруктураОтвета.АgreementID;
			Если АgreementID <> "" Тогда
				Попытка                                                     
					Ссылка = XMLЗначение(ТипИВидЗначенияДоговор, АgreementID);
					Если Ссылка.ПолучитьОбъект() = Неопределено Тогда
						Ссылка = Неопределено;
					КонецЕсли;
					Возврат Ссылка;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции


//////////////////////////////////////////////////////////////////////////////////////////////
//Вспомогательные процедуры, функции
//////////////////////////////////////////////////////////////////////////////////////////////

// Пустая процедура - обработкчик оповещения
&НаКлиенте
Процедура ПустойОбработчикОповещения(Результат, ДопПараметры) Экспорт
 
 //Ничего не нужно делать, но наличие процедуры обязательно
 
КонецПроцедуры

// Функция возвращает количество элементов указанного справочника
//
&НаСервереБезКонтекста
Функция КоличестоЭлементовСправочника(ИмяСправочника) 
	
	КоличествоЭлементов = 0;

	Если Метаданные.Справочники.Найти(ИмяСправочника) <> Неопределено Тогда
		
		Иерархический = ?(Метаданные.Справочники[ИмяСправочника].Иерархический И Метаданные.Справочники[ИмяСправочника].ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов, Истина, Ложь);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(1) КАК КоличествоЗаписей
		|ИЗ
		|	Справочник."+ИмяСправочника+" КАК СправочникПоиска
		|ГДЕ	
		|	НЕ СправочникПоиска.ПометкаУдаления
		|	" + ?(Иерархический, "И НЕ СправочникПоиска.ЭтоГруппа","");
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			КоличествоЭлементов = Выборка.КоличествоЗаписей;
		КонецЕсли;
		
	КонецЕсли;

	Возврат КоличествоЭлементов;
	
КонецФункции

// Функция для определоения ИД ссылки и её типа
//
// Параметры:
//    Ссылка - любая ссылка на объект базы данных
//
// Возвращаемое значение:
//    Структура, сождержащая СсылкаИД и СсылкаТип
//
&НаСервереБезКонтекста
Функция ТипСсылки(Ссылка)
	
	Если Ссылка <> Неопределено Тогда
		ИмяМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка)).ПолноеИмя();
		Если Найти(ИмяМетаданных, "Документ.") = 1 Тогда
			СсылкаТип = СтрЗаменить(ИмяМетаданных, "Документ.", "ДокументСсылка.");
		ИначеЕсли Найти(ИмяМетаданных, "Справочник.") = 1 Тогда
			СсылкаТип = СтрЗаменить(ИмяМетаданных, "Справочник.", "СправочникСсылка.");
		ИначеЕсли Найти(ИмяМетаданных, "Перечисление.") = 1 Тогда
			СсылкаТип = СтрЗаменить(ИмяМетаданных, "Перечисление.", "ПеречислениеСсылка.");
		ИначеЕсли Найти(ИмяМетаданных, "ПланВидовХарактеристик.") = 1 Тогда
			СсылкаТип = СтрЗаменить(ИмяМетаданных, "ПланВидовХарактеристик.", "ПланВидовХарактеристикСсылка.");
		Иначе 
			СсылкаТип = ИмяМетаданных;
		КонецЕсли;
	Иначе
		СсылкаТип = Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("СсылкаИД, СсылкаТип", XMLСтрока(Ссылка), СсылкаТип) 
	
КонецФункции

// Процедура для получения реквизитов ссылки на сервере
//
// Параметры:
//    СправочникСсылка, тип СправочникСсылка  - ссылка на элемент справочника
//    СтруктураРеквизитов, тип "Структура" - структура с ключами - именами реквизитов для заполнения значений
//    ИмяШаблона, тип "Строка" - имя шаблона конфигурации
//
&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыСсылки(СправочникСсылка, СтруктураРеквизитов, ИмяШаблона)
	                              
	Для Каждого ЭлементРеквизит Из СтруктураРеквизитов Цикл
		
		Если ЭлементРеквизит.Ключ = "Услуга" Тогда
			Если ИмяШаблона = "БухгалтерияПредприятия 3.0" И Найти(ВРЕГ(Строка(СправочникСсылка.ВидНоменклатуры)), "УСЛУГИ") > 0 Тогда
				СтруктураРеквизитов[ЭлементРеквизит.Ключ] = Истина;
			ИначеЕсли НЕ ИмяШаблона = "БухгалтерияПредприятия 3.0" И СправочникСсылка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				СтруктураРеквизитов[ЭлементРеквизит.Ключ] = Истина;
			Иначе
				СтруктураРеквизитов[ЭлементРеквизит.Ключ] = Ложь;
			КонецЕсли;
		Иначе
			
			Попытка
				СтруктураРеквизитов[ЭлементРеквизит.Ключ] = СправочникСсылка[ЭлементРеквизит.Ключ];
			Исключение
			КонецПопытки;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция для получения реквизита ссылки на сервере
//
// Параметры:
//    Ссылка, ссылка на элемент справочника
//    ИмяРеквизита, тип "Строка" - имя реквизита
//
// Возвращаемое значение:
//    Значение реквизита ссылки
//
&НаСервереБезКонтекста
Функция ВернутьРеквизитСсылки(Ссылка, ИмяРеквизита)
	
	Возврат Ссылка[ИмяРеквизита];
	
КонецФункции

// Функция выполняет заполнение списков выбора и подбор вариантов
//
// Параметры:
//    ESDLТаблицаВариантовНечеткогоПоиска, таблица значений
//    ОписаниеРеквизита, тип Структура - структура описания реквизита
//    Данные, тип Структура - структура данных шапки или строки ТЧ
//    ТаблицаДанных, тип ТаблицаЗначений - таблица данных
//    ИД, тип Строка - идентификатор документа
//    ДанныеКонтрагента, тип Структура - данные Контрагента, найденные в Интернет
//    Обновить, тип Булево - признак обновления существующего списка значений
//    ПоискПоНаименованиеПолное, тип Булево - признак поиска по полному наименованию
//    ESDLСтруктураОПФ, тип Структура - структура ОПФ
//    ИмяШаблона, тип Строка - имя шаблона конфигурации
//
// Возвращаемое значение:
//    СписокВыбораДляЭлемента, тип СписокЗначений - список значений с вариантами подбора
//
&НаСервереБезКонтекста
Функция ЗаполнитьВариантыПодбораСпискаВыбора(Знач ESDLТаблицаВариантовНечеткогоПоиска, ОписаниеРеквизита, Данные, Знач ТаблицаДанных, ИД, ДанныеКонтрагента = "", Обновить = Ложь, ПоискПоНаименованиеПолное = Ложь, Знач ESDLСтруктураОПФ = Неопределено, ИмяШаблона) Экспорт
	
	Перем СписокВыбораДляЭлемента;
	
	ТаблицаДанныхЗначение = ДанныеФормыВЗначение(ТаблицаДанных, Тип("ТаблицаЗначений"));
	Документ = ТаблицаДанныхЗначение.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ИД, 1))[0];
	
	Если ЗначениеЗаполнено(Данные[ОписаниеРеквизита.Идентификатор].ИтоговоеЗначение) И ТипЗнч(Данные[ОписаниеРеквизита.Идентификатор].ИтоговоеЗначение) = Тип("Строка") Тогда
		ЗначениеДляПодбора = Данные[ОписаниеРеквизита.Идентификатор].ИтоговоеЗначение;
	Иначе
		ЗначениеДляПодбора = Данные[ОписаниеРеквизита.Идентификатор].ИсходноеЗначение;
	КонецЕсли;

	Если ОписаниеРеквизита.Владелец <> "" Тогда
		Владелец = Данные[ОписаниеРеквизита.Владелец].ИтоговоеЗначение;
	Иначе
		Владелец = "";
	КонецЕсли;
	
	Тип = ОписаниеРеквизита.Тип;
	Вид = ОписаниеРеквизита.Вид;

	СтруктураПараметров = Новый Структура("Документ, ОписаниеРеквизита, Данные, СписокВыбораДляЭлемента, Обновить, ПоискПоНаименованиеПолное, ПоискИнтернет, ИмяШаблона", Документ, ОписаниеРеквизита, Данные, Новый СписокЗначений, Обновить, ПоискПоНаименованиеПолное, ,ИмяШаблона);
	СписокВыбораДляЭлемента = ЗаполнитьВариантыПодбораСпискаВыбораШаблон(СтруктураПараметров);
	//СписокВыбораДляЭлемента = СтруктураПараметров.СписокВыбораДляЭлемента;
	Если СписокВыбораДляЭлемента = Неопределено ИЛИ (СписокВыбораДляЭлемента <> Неопределено И СписокВыбораДляЭлемента.Количество() = 0) Тогда
		Если Тип = "СправочникСсылка" Тогда
			ВидСправочника = Вид;
			СтрокаПоиска = СокрЛП(ЗначениеДляПодбора);

			Если ОписаниеРеквизита.Идентификатор = "Номенклатура" Тогда
				ЗначениеНастроек = Документ.ЗначениеНастроек;
				СтрокаНастройки = ЗначениеНастроек.ГруппаНоменклатурДляСопоставления;
				СписокГруппДляСопоставления = СтрокаНастройки.Значение;	
				СтрокаНастройки = ЗначениеНастроек.ПоискТолькоВПриоритетныхГруппах;
				ПоискТолькоВПриоритетныхГруппах = СтрокаНастройки.Значение;	
				СтрокаПоиска = СокрЛП(ЗначениеДляПодбора);
				Если ПоискТолькоВПриоритетныхГруппах И СписокГруппДляСопоставления.Количество() > 0 Тогда
					СписокВыбораДляЭлемента = ЗаполнитьСписокВыбора(ESDLТаблицаВариантовНечеткогоПоиска, ОписаниеРеквизита, СтрокаПоиска, Владелец, Обновить, СписокГруппДляСопоставления , Истина) 			
				Иначе
					СписокВыбораДляЭлемента = ЗаполнитьСписокВыбора(ESDLТаблицаВариантовНечеткогоПоиска, ОписаниеРеквизита, СтрокаПоиска, Владелец, Обновить, , Истина) 			
				КонецЕсли;
			//++  Масленников Е.А. 13.06.2018 (
			//ИначеЕсли ОписаниеРеквизита.Идентификатор = "Контрагенты" Тогда
			ИначеЕсли ОписаниеРеквизита.Идентификатор = "Контрагент" Тогда
			//--  Масленников Е.А. 13.06.2018 )
				СписокВыбораДляЭлемента = ЗаполнитьСписокВыбора(ESDLТаблицаВариантовНечеткогоПоиска, ОписаниеРеквизита, СтрокаПоиска, Владелец, Обновить, , ПоискПоНаименованиеПолное, ESDLСтруктураОПФ);	
			Иначе 
				СписокВыбораДляЭлемента = ЗаполнитьСписокВыбора(ESDLТаблицаВариантовНечеткогоПоиска, ОписаниеРеквизита, СтрокаПоиска, Владелец, Обновить, , ПоискПоНаименованиеПолное);	
			КонецЕсли;

		ИначеЕсли Тип = "ПланСчетовСсылка" Тогда
			СписокВыбораДляЭлемента.Вставить(0, "Открыть", "Открыть план счетов """ + Вид + """");
		ИначеЕсли Тип = "ПеречислениеСсылка" Тогда
			Для Каждого ЭлементПеречисления Из Перечисления[Вид] Цикл
				СписокВыбораДляЭлемента.Добавить(ЭлементПеречисления);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокВыбораДляЭлемента;	
	
КонецФункции

//		НЕЧЕТКИЙ ПОИСК


// Масленников Е. 27.04.2018 (
// Функция выполняет заполнение списка выбора
//
// Параметры:
//    ESDLТаблицаВариантовНечеткогоПоиска, таблица значений
//    ОписаниеРеквизита, тип Структура - структура описания реквизита
//    Данные, тип Структура - структура данных шапки или строки ТЧ
//    ТаблицаДанных, тип ТаблицаЗначений - таблица данных
//    ИД, тип Строка - идентификатор документа
//    ДанныеКонтрагента, тип Структура - данные Контрагента, найденные в Интернет
//    Обновить, тип Булево - признак обновления существующего списка значений
//    ПоискПоНаименованиеПолное, тип Булево - признак поиска по полному наименованию
//    ESDLСтруктураОПФ, тип Структура - структура ОПФ
//    ИмяШаблона, тип Строка - имя шаблона конфигурации
//
// Возвращаемое значение:
//    СписокВыбораДляЭлемента, тип СписокЗначений - список значений с вариантами подбора
//
&НаСервереБезКонтекста
Функция ЗаполнитьСписокВыбора(ESDLТаблицаВариантовНечеткогоПоиска, ОписаниеРеквизита, СтрокаПоиска, Владелец = Неопределено, ОбновитьВарианты = Ложь, СписокГруппДляСопоставления = Неопределено, ПоискПоНаименованиеПолное = Ложь, ESDLСтруктураОПФ = Неопределено) Экспорт	
		
	ВидСправочника = ОписаниеРеквизита.Вид;
	СтруктураПоиска = Новый Структура("Идентификатор, ВидСправочника, СтрокаПоиска, Владелец", ОписаниеРеквизита.Идентификатор, ВидСправочника, СтрокаПоиска, Владелец);
	МассивНайденныхСтрок = ESDLТаблицаВариантовНечеткогоПоиска.НайтиСтроки(СтруктураПоиска);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		
		ВариантыСопоставления = МассивНайденныхСтрок[0].СписокВариантов;
		Если НЕ ОбновитьВарианты Тогда
			Возврат ВариантыСопоставления;
		Иначе
			ВариантыСопоставления = Новый СписокЗначений;
			МассивНайденныхСтрок[0].СписокВариантов = ВариантыСопоставления;
		КонецЕсли;
	Иначе
		ВариантыСопоставления = Новый СписокЗначений;
	КонецЕсли;
	СинонимСправончика = Метаданные.Справочники[ВидСправочника].Синоним;
	ВариантыСопоставления.Добавить("Открыть", "Открыть справочник """ + СинонимСправончика + """"); 
	Если СтрокаПоиска = "" Тогда
	    Возврат ВариантыСопоставления;
	ИначеЕсли СтрокаПоиска <> "" Тогда
		ВариантыСопоставления.Добавить("Обновить", "Обновить список вариантов"); 
	КонецЕсли;
	
	ТаблицаВариантов = Новый ТаблицаЗначений;
	ТаблицаВариантов.Колонки.Добавить("Ссылка");
	ТаблицаВариантов.Колонки.Добавить("Сравнение");	
	
	//  Масленников Е. (
	ТаблицаВариантов.Колонки.Добавить("СравнениеЦифр");
	ТаблицаВариантов.Колонки.Добавить("СовпадениеСлов");
	ТаблицаВариантов.Колонки.Добавить("СравнениеПроцент");//("СравнениеИтог");

	НайденЭталонныйЭлемент = Ложь;
	ВестиЛог = Ложь;
	// ) Масленников Е.
	
	хеш = ЗаполнитьХешДляНечеткогоСравнения(ВидСправочника, СтрокаПоиска, Владелец, , СписокГруппДляСопоставления); 
	Если хеш <> Неопределено Тогда
		КоэфГрань = ?(хеш.Количество() > 5, (хеш.Итог("Количество") / хеш.Количество()), 1);
		Для каждого стрХеш из хеш цикл
			//++  Масленников Е.А. 29.05.2018 - далее меняем "СтрХеш.Ссылка" на "СтрокаХЕШа"(
			СтрокаХЕШа   = СтрЗаменить(СтрХеш.Ссылка, """","");
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, """","");
			//--  Масленников Е.А. 29.05.2018 )
			Если стрХеш.Количество >= КоэфГрань Тогда
				ДлинаСтр1 = СтрДлина(СтрокаПоиска);
				ДлинаСтр2 = СтрДлина(СтрокаХЕШа);
				СравнениеДлины = ?(ДлинаСтр1>ДлинаСтр2, Окр((ДлинаСтр2/ДлинаСтр1)*100), Окр((ДлинаСтр1/ДлинаСтр2)*100));
				Если СравнениеДлины >= 40 Тогда
					//  Масленников Е. (
					Если СокрЛП(ДлинаСтр1)=СокрЛП(ДлинаСтр2) Тогда
						РезультатСравнения = СравнитьДвеСтрокиСУчетомЛатиницы(СтрокаПоиска, СтрокаХЕШа);
						Если РезультатСравнения = 100 Тогда
							НовыйВариант = ТаблицаВариантов.Добавить();
							НовыйВариант.Ссылка = СтрХеш.Ссылка;
							НовыйВариант.Сравнение = ?(СтрокаПоиска = СтрокаХЕШа, 100, 99);
							НовыйВариант.СравнениеПроцент = ?(СтрокаПоиска = СтрокаХЕШа, 100, 99);
							НайденЭталонныйЭлемент = Истина;
							Продолжить; //Прервать;
						КонецЕсли;
					КонецЕсли; 
					// ) Масленников Е.
					Сравнение = ПодсчитатьПроцентВхождения(СтрокаПоиска, СтрокаХЕШа, ESDLСтруктураОПФ);
					Если Сравнение >= 40 Тогда
						НовыйВариант = ТаблицаВариантов.Добавить();
						НовыйВариант.Ссылка = СтрХеш.Ссылка;
						НовыйВариант.Сравнение = Сравнение;
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Если ПоискПоНаименованиеПолное Тогда
		МетодПоиска = "НаименованиеПолное";
		хеш = ЗаполнитьХешДляНечеткогоСравнения(ВидСправочника, СтрокаПоиска, Владелец, МетодПоиска, СписокГруппДляСопоставления);
		КоэфГрань = ?(хеш.Количество() > 5, (хеш.Итог("Количество") / хеш.Количество()), 1);
		Для каждого стрХеш из хеш цикл
			//++  Масленников Е.А. 29.05.2018 - далее меняем "СтрХеш.Ссылка" на "СтрокаХЕШа"(
			СтрокаХЕШа = СтрЗаменить(СтрХеш.Ссылка.НаименованиеПолное, """","");
			//--  Масленников Е.А. 29.05.2018 )
			Если стрХеш.Количество >= КоэфГрань Тогда
				ПовторениеСсылки = ТаблицаВариантов.Найти(СтрХеш.Ссылка, "Ссылка"); 
				Если ПовторениеСсылки = Неопределено Тогда
					ДлинаСтр1 = СтрДлина(СтрокаПоиска);
					ДлинаСтр2 = СтрДлина(СтрокаХЕШа);
					СравнениеДлины = ?(ДлинаСтр1>ДлинаСтр2, Окр((ДлинаСтр2/ДлинаСтр1)*100), Окр((ДлинаСтр1/ДлинаСтр2)*100));
					Если СравнениеДлины >= 40 Тогда
						//  Масленников Е. (
						Если СокрЛП(ДлинаСтр1)=СокрЛП(ДлинаСтр2) Тогда
							РезультатСравнения = СравнитьДвеСтрокиСУчетомЛатиницы(СтрокаПоиска, СтрокаХЕШа);
							Если РезультатСравнения = 100 Тогда
								НовыйВариант = ТаблицаВариантов.Добавить();
								НовыйВариант.Ссылка = СтрХеш.Ссылка;
								НовыйВариант.Сравнение = ?(СтрокаПоиска = СтрокаХЕШа, 100, 99);
								НовыйВариант.СравнениеПроцент = ?(СтрокаПоиска = СтрокаХЕШа, 100, 99);
								НайденЭталонныйЭлемент = Истина;
								Продолжить; //Прервать;
							КонецЕсли;
						КонецЕсли; 
						// ) Масленников Е.
						Сравнение = ПодсчитатьПроцентВхождения(СтрокаПоиска, СтрокаХЕШа, ESDLСтруктураОПФ);
						Если Сравнение >= 40 Тогда
							НовыйВариант = ТаблицаВариантов.Добавить();
							НовыйВариант.Ссылка = СтрХеш.Ссылка;
							НовыйВариант.Сравнение = Сравнение;
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	//  Масленников Е. ( дополняем таблицу по словам
	Если НЕ НайденЭталонныйЭлемент И ВидСправочника = "Номенклатура" Тогда
		
		ТаблицаВариантовНовая = ТаблицаВариантов.Скопировать();
		ТаблицаВариантов.Очистить();
		
		МассивСловСтрокиПоиска = РазложитьСтрокуВМассивСлов(СтрокаПоиска, " ;:-");
		ВремяСловаНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
		//ДополнитьТаблицуПоискомПоСловам(хеш, СтрокаПоиска, МассивСловСтрокиПоиска, СписокГруппДляСопоставления);
		ДополнитьТаблицуПоискомПоСловам(ТаблицаВариантовНовая, СтрокаПоиска, МассивСловСтрокиПоиска, СписокГруппДляСопоставления, ESDLСтруктураОПФ);
		
		//ВладелецФормы.ДополнитьТаблицуПоискомПоСловам(хеш, СтрокаПоиска, МассивСловСтрокиПоиска);
		ВремяСловаКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Если ВестиЛог Тогда
			ЛогПоиска = ""+ЛогПоиска + "ВремяСлова = "+(ВремяСловаКонец-ВремяСловаНачало)/1000 + Символы.ПС;	
		КонецЕсли;
		 	
		Для каждого стрХеш из ТаблицаВариантовНовая Цикл //хеш цикл 
			Если стрХеш.Сравнение>40 ИЛИ стрХеш.СравнениеЦифр >= 25 ИЛИ стрХеш.СовпадениеСлов >= 25 Тогда 
				//ДлинаСтр1 = СтрДлина(СтрокаПоиска);
				//ДлинаСтр2 = СтрДлина(СтрХеш.Ссылка);
				//СравнениеДлины = ?(ДлинаСтр1>ДлинаСтр2, Окр((ДлинаСтр2/ДлинаСтр1)*100), Окр((ДлинаСтр1/ДлинаСтр2)*100));
				//Если СравнениеДлины >= 40 ИЛИ стрХеш.СравнениеЦифр>=50 ИЛИ стрХеш.СовпадениеСлов >= 30 Тогда
				
				ВремяСравнениеНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
				Сравнение = ПодсчитатьПроцентВхождения(СтрокаПоиска, Строка(СтрХеш.Ссылка), ESDLСтруктураОПФ);
				ВремяСравнениеКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
				Если ВестиЛог Тогда
					ЛогПоиска = ""+ЛогПоиска + "ВремяСравнение = "+(ВремяСравнениеКонец-ВремяСравнениеНачало)/1000 + " # "+Строка(СтрХеш.Ссылка)+Символы.ПС;	
				КонецЕсли;
				Если Сравнение >= 30 Тогда
					НовыйВариант = ТаблицаВариантов.Добавить();
					НовыйВариант.Ссылка = СтрХеш.Ссылка;
					НовыйВариант.Сравнение = Сравнение;
					НовыйВариант.СравнениеЦифр = стрХеш.СравнениеЦифр;
					НовыйВариант.СовпадениеСлов = СтрХеш.СовпадениеСлов;
					
					НовыйВариант.СравнениеПроцент = НовыйВариант.Сравнение;
					
					// Для случаев, когда есть ошибки в буквах сравнение слов будет сильно уменьшать процент, 
					// 	поэтому исключим такие ситуации формулой.	
					СравнениеИтог = Макс(Сравнение, СтрХеш.СовпадениеСлов);
					Если стрХеш.СравнениеЦифр = -1 Тогда
						СравнениеИтог = СравнениеИтог; //(Сравнение + СтрХеш.СовпадениеСлов)/2;   
					Иначе
						СравнениеИтог = (СравнениеИтог + стрХеш.СравнениеЦифр)/2;
					КонецЕсли;
					НовыйВариант.Сравнение        = Окр(СравнениеИтог);
					
				КонецЕсли;	
				//КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаВариантов.Сортировать("Сравнение Убыв");
	// ) Масленников Е.
	
	Для Каждого Вариант Из ТаблицаВариантов Цикл
		Представление = ?(Вариант.Сравнение >= 100, "" + Вариант.Сравнение + "% | ", " " + Вариант.Сравнение + "% | ") + Вариант.Ссылка;
		ВариантыСопоставления.Добавить(Вариант.Ссылка, Представление); 
	КонецЦикла;	
	
	Возврат ВариантыСопоставления;
	
КонецФункции

// Функция нечеткого поиска элементов справочников
//
&НаСервереБезКонтекста
Функция ЗаполнитьХешДляНечеткогоСравнения(Вид, СтрокаПоиска, Владелец = Неопределено, МетодПоиска = "Наименование", СписокГрупп = Неопределено) Экспорт

	СтрокаВ = ВРег(СтрЗаменить(СтрокаПоиска, """", ""));
	ДлинаВ = СтрДлина(СтрокаВ);
	Список = Новый СписокЗначений;
	// Масленников Е. 27.04.2018 (
	//Если ДлинаВ > 100 Тогда
	//	ДлинаПодстроки = 10;
	//ИначеЕсли ДлинаВ > 5 Тогда
	//	ДлинаПодстроки = 5;
	//ИначеЕсли ДлинаВ > 2 Тогда
	//	ДлинаПодстроки = 2;
	//Иначе
	//	ДлинаПодстроки = ДлинаВ;
	//КонецЕсли;
	Если ДлинаВ > 100 Тогда
		ДлинаПодстроки = 10; 
	ИначеЕсли ДлинаВ > 50 Тогда
		ДлинаПодстроки = 5;
	ИначеЕсли ДлинаВ > 28 Тогда
		ДлинаПодстроки = 4;
	ИначеЕсли ДлинаВ > 12 Тогда
		ДлинаПодстроки = 3;
	ИначеЕсли ДлинаВ > 2 Тогда
		ДлинаПодстроки = 2;
	Иначе
		ДлинаПодстроки = ДлинаВ;
	КонецЕсли;
	// Масленников Е. 27.04.2018 )
	
	Для ПозСтрВ = 1 По ДлинаВ-ДлинаПодстроки + 1 Цикл
		ПодстрокаВ = Сред(СтрокаВ, ПозСтрВ, ДлинаПодстроки);
		Список.Добавить(ПодстрокаВ);
	КонецЦикла; 
		
	длиннаСписка = Список.Количество() - 1;
	ДлинаСтроки = Метаданные.Справочники[Вид].ДлинаНаименования;
	Если ДлинаСтроки = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	//Проверка нужен ли поиск только в заданных группах
	Если СписокГрупп <> Неопределено Тогда
		ВИерархии = "И ИсходныйСправочник.Ссылка В ИЕРАРХИИ (&СписокГрупп)";
	Иначе
		ВИерархии = "";
	КонецЕсли;	
	//Проверка является ли справочник иерархическим
	Иерархический = ?(Метаданные.Справочники[Вид].Иерархический И Метаданные.Справочники[Вид].ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов, Истина, Ложь);
	Если Иерархический Тогда
		НЕГруппа = "И НЕ ИсходныйСправочник.ЭтоГруппа";
	Иначе
		НЕГруппа = "";
	КонецЕсли;
	//Проверка на наличие реквизита "Владелец" у справочника
	ОтборПоВладельцу = "";
	Если Метаданные.Справочники[Вид].Владельцы.Количество() > 0 И Владелец <> Неопределено Тогда
		Если ТипЗнч(Владелец) = Тип("Строка") Тогда
			ОтборПоВладельцу = "И ИсходныйСправочник.Владелец.Наименование = &Владелец ";
		ИначеЕсли Найти(ТипЗнч(Владелец), "СправочникСсылка") > 0 Тогда
			ОтборПоВладельцу = "И ИсходныйСправочник.Владелец = &Владелец ";
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(); 
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 	|	ИсходныйСправочник.Ссылка КАК Ссылка,
		|	ИсходныйСправочник." + МетодПоиска + " КАК " + МетодПоиска + "  
		|ПОМЕСТИТЬ ОтфильтрованоДляПоиска
	 	|ИЗ
	 	|	Справочник." + Вид + " КАК ИсходныйСправочник
	 	|ГДЕ
	 	|	НЕ ИсходныйСправочник.ПометкаУдаления 
	 	|	" + ВИерархии + "
	 	|	" + НЕГруппа + "
		|	" + ОтборПоВладельцу + "
		|
  		|ИНДЕКСИРОВАТЬ ПО
  		|	Ссылка
	 	|;
	 	|
	 	|////////////////////////////////////////////////////////////////////////////////

		| ВЫБРАТЬ ПЕРВЫЕ 5
		| 	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
		| 	ВложенныйЗапрос.Ссылка
		|ИЗ
		| (";
		
	Для к = 0 По длиннаСписка Цикл 
		Запрос.Текст =  Запрос.Текст + "
		|ВЫБРАТЬ
		|	ПоискПодстроки.Ссылка КАК Ссылка,
		|	1 КАК Количество
		| ИЗ
		|	ОтфильтрованоДляПоиска КАК ПоискПодстроки
		| ГДЕ
		|	ПоискПодстроки." + МетодПоиска + " ПОДОБНО ""%" + Список[к].Значение + "%""
		| 	" + ?(к < длиннаСписка, "ОБЪЕДИНИТЬ ВСЕ", "");
	КонецЦикла; 
	
	Запрос.Текст = Запрос.Текст + 
		") КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Ссылка
		|УПОРЯДОЧИТЬ ПО
		|	Количество УБЫВ";
	
	//Проверка на наличие реквизита "Владелец" у справочника
	Если Метаданные.Справочники[Вид].Владельцы.Количество() > 0 И Владелец <> Неопределено Тогда
		Запрос.УстановитьПараметр("Владелец",Владелец);
	КонецЕсли;
	Если СписокГрупп <> Неопределено Тогда
		Запрос.УстановитьПараметр("СписокГрупп",СписокГрупп);
    КонецЕсли;
	
	Хеш = Запрос.Выполнить().Выгрузить();
	Возврат Хеш;
	
КонецФункции


// Старые варианты поиска. 
// Используются для сравнения результатов с новым

&НаСервереБезКонтекста
Функция ЗаполнитьСписокВыбора_СтарыйВариант(ESDLТаблицаВариантовНечеткогоПоиска, ОписаниеРеквизита, СтрокаПоиска, Владелец = Неопределено, ОбновитьВарианты = Ложь, СписокГруппДляСопоставления = Неопределено, ПоискПоНаименованиеПолное = Ложь, ESDLСтруктураОПФ = Неопределено) Экспорт	
		
	ВидСправочника = ОписаниеРеквизита.Вид;
	СтруктураПоиска = Новый Структура("Идентификатор, ВидСправочника, СтрокаПоиска, Владелец", ОписаниеРеквизита.Идентификатор, ВидСправочника, СтрокаПоиска, Владелец);
	МассивНайденныхСтрок = ESDLТаблицаВариантовНечеткогоПоиска.НайтиСтроки(СтруктураПоиска);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		ВариантыСопоставления = МассивНайденныхСтрок[0].СписокВариантов;
		Если НЕ ОбновитьВарианты Тогда
			Возврат ВариантыСопоставления;
		Иначе
			ВариантыСопоставления = Новый СписокЗначений;
			МассивНайденныхСтрок[0].СписокВариантов = ВариантыСопоставления;
		КонецЕсли;
	Иначе
		ВариантыСопоставления = Новый СписокЗначений;
	КонецЕсли;
	СинонимСправончика = Метаданные.Справочники[ВидСправочника].Синоним;
	ВариантыСопоставления.Добавить("Открыть", "Открыть справочник """ + СинонимСправончика + """"); 
	Если СтрокаПоиска = "" Тогда
	    Возврат ВариантыСопоставления;
	ИначеЕсли СтрокаПоиска <> "" Тогда
		ВариантыСопоставления.Добавить("Обновить", "Обновить список вариантов"); 
	КонецЕсли;
	
	ТаблицаВариантов = Новый ТаблицаЗначений;
	ТаблицаВариантов.Колонки.Добавить("Ссылка");
	ТаблицаВариантов.Колонки.Добавить("Сравнение");	
	
	хеш = ЗаполнитьХешДляНечеткогоСравнения(ВидСправочника, СтрокаПоиска, Владелец, , СписокГруппДляСопоставления); 
	Если хеш <> Неопределено Тогда
		КоэфГрань = ?(хеш.Количество() > 5, (хеш.Итог("Количество") / хеш.Количество()), 1);
		Для каждого стрХеш из хеш цикл 
			Если стрХеш.Количество >= КоэфГрань Тогда
				ДлинаСтр1 = СтрДлина(СтрокаПоиска);
				ДлинаСтр2 = СтрДлина(СтрХеш.Ссылка);
				СравнениеДлины = ?(ДлинаСтр1>ДлинаСтр2, Окр((ДлинаСтр2/ДлинаСтр1)*100), Окр((ДлинаСтр1/ДлинаСтр2)*100));
				Если СравнениеДлины >= 40 Тогда
					Сравнение = ПодсчитатьПроцентВхождения(СтрокаПоиска, Строка(СтрХеш.Ссылка), ESDLСтруктураОПФ);
					Если Сравнение >= 40 Тогда
						НовыйВариант = ТаблицаВариантов.Добавить();
						НовыйВариант.Ссылка = СтрХеш.Ссылка;
						НовыйВариант.Сравнение = Сравнение;
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Если ПоискПоНаименованиеПолное Тогда
		МетодПоиска = "НаименованиеПолное";
		хеш = ЗаполнитьХешДляНечеткогоСравнения(ВидСправочника, СтрокаПоиска, Владелец, МетодПоиска, СписокГруппДляСопоставления);
		КоэфГрань = ?(хеш.Количество() > 5, (хеш.Итог("Количество") / хеш.Количество()), 1);
		Для каждого стрХеш из хеш цикл 
			Если стрХеш.Количество >= КоэфГрань Тогда
				ПовторениеСсылки = ТаблицаВариантов.Найти(СтрХеш.Ссылка, "Ссылка"); 
				Если ПовторениеСсылки = Неопределено Тогда
					ДлинаСтр1 = СтрДлина(СтрокаПоиска);
					ДлинаСтр2 = СтрДлина(СтрХеш.Ссылка.НаименованиеПолное);
					СравнениеДлины = ?(ДлинаСтр1>ДлинаСтр2, Окр((ДлинаСтр2/ДлинаСтр1)*100), Окр((ДлинаСтр1/ДлинаСтр2)*100));
					Если СравнениеДлины >= 40 Тогда
						Сравнение = ПодсчитатьПроцентВхождения(СтрокаПоиска, Строка(СтрХеш.Ссылка.НаименованиеПолное), ESDLСтруктураОПФ);
						Если Сравнение >= 40 Тогда
							НовыйВариант = ТаблицаВариантов.Добавить();
							НовыйВариант.Ссылка = СтрХеш.Ссылка;
							НовыйВариант.Сравнение = Сравнение;
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	ТаблицаВариантов.Сортировать("Сравнение Убыв");
	Для Каждого Вариант Из ТаблицаВариантов Цикл
		Представление = ?(Вариант.Сравнение >= 100, "" + Вариант.Сравнение + "% | ", " " + Вариант.Сравнение + "% | ") + Вариант.Ссылка;
		ВариантыСопоставления.Добавить(Вариант.Ссылка, Представление); 
	КонецЦикла;	
	
	Возврат ВариантыСопоставления;
	
КонецФункции

// Функция нечеткого поиска элементов справочников
//
&НаСервереБезКонтекста
Функция ЗаполнитьХешДляНечеткогоСравнения_СтарыйВариант(Вид, СтрокаПоиска, Владелец = Неопределено, МетодПоиска = "Наименование", СписокГрупп = Неопределено) Экспорт

	СтрокаВ = ВРег(СтрЗаменить(СтрокаПоиска, """", ""));
	ДлинаВ = СтрДлина(СтрокаВ);
	Список = Новый СписокЗначений;
	Если ДлинаВ > 100 Тогда
		ДлинаПодстроки = 10;
	ИначеЕсли ДлинаВ > 5 Тогда
		ДлинаПодстроки = 5;
	ИначеЕсли ДлинаВ > 2 Тогда
		ДлинаПодстроки = 2;
	Иначе
		ДлинаПодстроки = ДлинаВ;
	КонецЕсли;
	
	Для ПозСтрВ = 1 По ДлинаВ-ДлинаПодстроки + 1 Цикл
		ПодстрокаВ = Сред(СтрокаВ, ПозСтрВ, ДлинаПодстроки);
		Список.Добавить(ПодстрокаВ);
	КонецЦикла; 
		
	длиннаСписка = Список.Количество() - 1;
	ДлинаСтроки = Метаданные.Справочники[Вид].ДлинаНаименования;
	Если ДлинаСтроки = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	//Проверка нужен ли поиск только в заданных группах
	Если СписокГрупп <> Неопределено Тогда
		ВИерархии = "И ИсходныйСправочник.Ссылка В ИЕРАРХИИ (&СписокГрупп)";
	Иначе
		ВИерархии = "";
	КонецЕсли;	
	//Проверка является ли справочник иерархическим
	Иерархический = ?(Метаданные.Справочники[Вид].Иерархический И Метаданные.Справочники[Вид].ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов, Истина, Ложь);
	Если Иерархический Тогда
		НЕГруппа = "И НЕ ИсходныйСправочник.ЭтоГруппа";
	Иначе
		НЕГруппа = "";
	КонецЕсли;
	//Проверка на наличие реквизита "Владелец" у справочника
	ОтборПоВладельцу = "";
	Если Метаданные.Справочники[Вид].Владельцы.Количество() > 0 И Владелец <> Неопределено Тогда
		Если ТипЗнч(Владелец) = Тип("Строка") Тогда
			ОтборПоВладельцу = "И ИсходныйСправочник.Владелец.Наименование = &Владелец ";
		ИначеЕсли Найти(ТипЗнч(Владелец), "СправочникСсылка") > 0 Тогда
			ОтборПоВладельцу = "И ИсходныйСправочник.Владелец = &Владелец ";
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос(); 
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 	|	ИсходныйСправочник.Ссылка КАК Ссылка,
		|	ИсходныйСправочник." + МетодПоиска + " КАК " + МетодПоиска + "  
		|ПОМЕСТИТЬ ОтфильтрованоДляПоиска
	 	|ИЗ
	 	|	Справочник." + Вид + " КАК ИсходныйСправочник
	 	|ГДЕ
	 	|	НЕ ИсходныйСправочник.ПометкаУдаления 
	 	|	" + ВИерархии + "
	 	|	" + НЕГруппа + "
		|	" + ОтборПоВладельцу + "
		|
  		|ИНДЕКСИРОВАТЬ ПО
  		|	Ссылка
	 	|;
	 	|
	 	|////////////////////////////////////////////////////////////////////////////////

		| ВЫБРАТЬ ПЕРВЫЕ 5
		| 	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
		| 	ВложенныйЗапрос.Ссылка
		|ИЗ
		| (";
		
	Для к = 0 По длиннаСписка Цикл 
		Запрос.Текст =  Запрос.Текст + "
		|ВЫБРАТЬ
		|	ПоискПодстроки.Ссылка КАК Ссылка,
		|	1 КАК Количество
		| ИЗ
		|	ОтфильтрованоДляПоиска КАК ПоискПодстроки
		| ГДЕ
		|	ПоискПодстроки." + МетодПоиска + " ПОДОБНО ""%" + Список[к].Значение + "%""
		| 	" + ?(к < длиннаСписка, "ОБЪЕДИНИТЬ ВСЕ", "");
	КонецЦикла; 
	
	Запрос.Текст = Запрос.Текст + 
		") КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Ссылка
		|УПОРЯДОЧИТЬ ПО
		|	Количество УБЫВ";
	
	//Проверка на наличие реквизита "Владелец" у справочника
	Если Метаданные.Справочники[Вид].Владельцы.Количество() > 0 И Владелец <> Неопределено Тогда
		Запрос.УстановитьПараметр("Владелец",Владелец);
	КонецЕсли;
	Если СписокГрупп <> Неопределено Тогда
		Запрос.УстановитьПараметр("СписокГрупп",СписокГрупп);
    КонецЕсли;
	
	Хеш = Запрос.Выполнить().Выгрузить();
	Возврат Хеш;
	
КонецФункции
// Масленников Е. 27.04.2018 )


// Масленников Е. Доработки для нечеткого поиска (

// Функция для нечеткого поиска элементов справочников. Дополняет таблицу ХЕШ
//
&НаСервереБезКонтекста
Процедура ДополнитьТаблицуПоискомПоСловам(Хеш, СтрокаПоиска, МассивСлов, СписокГрупп, ESDLСтруктураОПФ) Экспорт
	
	Если ХЕШ.Колонки.Количество()=0 Тогда
		ХЕШ.Колонки.Добавить("Ссылка");
		ХЕШ.Колонки.Добавить("Сравнение");
		ХЕШ.Колонки.Добавить("СравнениеЦифр");
		ХЕШ.Колонки.Добавить("СовпадениеСлов");
		ХЕШ.Колонки.Добавить("СравнениеПроцент");	
	КонецЕсли;
	
	КоличествоСлов = МассивСлов.Количество();
	
	//Проверка нужен ли поиск только в заданных группах
	Если СписокГрупп <> Неопределено Тогда
		ВИерархии = " И Номенклатура.Ссылка В ИЕРАРХИИ (&СписокГрупп) ";
	Иначе
		ВИерархии = "";
	КонецЕсли;
	
	//Хеш.Колонки.Добавить("СравнениеЦифр");
	//Хеш.Колонки.Добавить("СовпадениеСлов");		
		
	МассивСловИзЦифр = Новый Массив;
	Для каждого Слово Из МассивСлов Цикл
		Если ТолькоЦифрыВСтроке(Слово) Тогда	
			МассивСловИзЦифр.Добавить(Слово);
		КонецЕсли;			
	КонецЦикла;
	
	ЕстьСловаИзЦифр = МассивСловИзЦифр.Количество()>0;
		
	НоваяСтрокаПоискаПодобно = "";	
	Для каждого Слово Из МассивСлов Цикл
		НоваяСтрокаПоискаПодобно = ""+НоваяСтрокаПоискаПодобно+"%"+Слово;	
	КонецЦикла;
	НоваяСтрокаПоискаПодобно = НоваяСтрокаПоискаПодобно+"%";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ПометкаУдаления
	|	И НЕ Номенклатура.ЭтоГруппа
	|	" + ВИерархии;

	Запрос.Текст = ""+Запрос.Текст + " И Номенклатура.Наименование ПОДОБНО &Наименование ";
	Запрос.УстановитьПараметр("Наименование", НоваяСтрокаПоискаПодобно);
	Запрос.УстановитьПараметр("СписокГрупп", СписокГрупп);
	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл
		Нов = хеш.Добавить();
		Нов.Ссылка = Выборка.Ссылка;
		//Нов.Количество = МассивСлов.Количество();	
	КонецЦикла;
	
	Если Хеш.Количество()=0 Тогда
		Возврат;		
	КонецЕсли;
	
	Хеш.Свернуть("Ссылка","СовпадениеСлов,СравнениеЦифр,Сравнение,СравнениеПроцент");
	
	// расчет совпадения слов
	Для каждого ТекСтрока Из Хеш Цикл
		
		Если ТекСтрока.Сравнение = 0 Тогда
			Сравнение = ПодсчитатьПроцентВхождения(СтрокаПоиска, Строка(ТекСтрока.Ссылка), ESDLСтруктураОПФ);
			ТекСтрока.Сравнение = Сравнение;
		КонецЕсли;
		
		СтрокаВыборка = СтрЗаменить(СтрЗаменить(СтрЗаменить(Строка(ТекСтрока.Ссылка), ")",""), "(", ""), """", "");
		МассивСловВыборка = РазложитьСтрокуВМассивСлов(СокрЛП(СтрокаВыборка), " ,.;:-");
		к = 0;
		Для каждого Слово Из МассивСлов Цикл
			Если МассивСловВыборка.Найти(Слово)<>Неопределено Тогда
				к = к + 1;		
			КонецЕсли;
		КонецЦикла;
		
		// Масленников Е. 2018.05.14 (
		//Если к = МассивСловВыборка.Количество() Тогда
		//	ТекСтрока.СовпадениеСлов = 100;
		//Иначе
		//	ТекСтрока.СовпадениеСлов = Окр(100*(к/МассивСловВыборка.Количество()+к/КоличествоСлов)/2, 2);		
		//КонецЕсли;	
		Если МассивСловВыборка.Количество() = к И МассивСлов.Количество() = к Тогда // совпадает количество слов и они равны 
			ТекСтрока.СовпадениеСлов = 100;
		ИначеЕсли МассивСловВыборка.Количество() = к Тогда // +++ в запрос содежит в себе номенклатуру, но не все слова
			ТекСтрока.СовпадениеСлов = 75+25*(к/МассивСлов.Количество());	
			
		//   Русанова М. 24.01.2019(
		//Иначе
		//	ТекСтрока.СовпадениеСлов = Окр(100*(к/МассивСловВыборка.Количество()+к/КоличествоСлов)/2, 2);		
		//КонецЕсли;
		ИначеЕсли Не (МассивСловВыборка.Количество() = 0 ИЛИ КоличествоСлов = 0) Тогда 
			ТекСтрока.СовпадениеСлов = Окр(100*(к/МассивСловВыборка.Количество()+к/КоличествоСлов)/2, 2);
		Иначе
			ТекСтрока.СовпадениеСлов = 0;
		КонецЕсли;
		// ) Русанова М. 24.01.2019
		
		// ) Масленников Е. 2018.05.14
		
		/////////////////////////////////
		// 		поиск слов из цифр 
		к = 0;
		Если ЕстьСловаИзЦифр Тогда
			
			Для каждого Слово Из МассивСловИзЦифр Цикл
				СловоНайдено = МассивСловВыборка.Найти(Слово)<>Неопределено;
				Если СловоНайдено Тогда
					к = к + 1;
				КонецЕсли;
			КонецЦикла;
			ТекСтрока.СравнениеЦифр = Окр(100*к/МассивСловИзЦифр.Количество(),2);
		Иначе
			ТекСтрока.СравнениеЦифр = -1;	
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры


// -- вспомогательные функции для нечеткого поиска (


// Проверяет, содержит ли строка только цифры.
//
// Параметры:
//  Значение         - Строка - проверяемая строка.
//  Устаревший       - Булево - устаревший параметр, не используется.
//  ПробелыЗапрещены - Булево - если Ложь, то в строке допустимо наличие пробелов.
//
// Возвращаемое значение:
//   Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
//
// Пример:
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("0123"); // Истина
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("0123abc"); // Ложь
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("01 2 3",, Ложь); // Истина
&НаСервереБезКонтекста
Функция ТолькоЦифрыВСтроке(Знач Значение, Знач Устаревший = Истина, Знач ПробелыЗапрещены = Истина) Экспорт
	
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПробелыЗапрещены Тогда
		Значение = СтрЗаменить(Значение, " ", "");
	КонецЕсли;
		
	Если СтрДлина(Значение) = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат СтрДлина(УдалитьЦифрыВСтрокеИПараметры(Значение, ".,хХxX/"))=0;
	
КонецФункции

// Разбивает строку на несколько строк, используя заданный набор разделителей.
// Если параметр РазделителиСлов не задан, то разделителем слов считается любой из символов, 
// не относящихся к символам латиницы, кириллицы, цифры, подчеркивания.
//
// Параметры:
//  Значение        - Строка - исходная строка, которую необходимо разложить на слова.
//  РазделителиСлов - Строка - перечень символов-разделителей. Например, ".,;".
//
// Возвращаемое значение:
//  Массив - список слов.
//
// Пример:
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов("один-@#два2_!три") возвратит массив значений: "один",
//  "два2_", "три"; СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов("один-@#два2_!три", "#@!_") возвратит массив
//  значений: "один-", "два2", "три".
//
&НаСервереБезКонтекста
Функция РазложитьСтрокуВМассивСлов(Знач Значение, РазделителиСлов = Неопределено) Экспорт
	
	Слова = Новый Массив;
	
	РазмерТекста = СтрДлина(Значение);
	НачалоСлова = 1;
	Для Позиция = 1 По РазмерТекста Цикл
		КодСимвола = КодСимвола(Значение, Позиция);
		Если ЭтоРазделительСлов(КодСимвола, РазделителиСлов) Тогда
			Если Позиция <> НачалоСлова Тогда
				Слова.Добавить(Сред(Значение, НачалоСлова, Позиция - НачалоСлова));
			КонецЕсли;
			НачалоСлова = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Позиция <> НачалоСлова Тогда
		Слова.Добавить(Сред(Значение, НачалоСлова, Позиция - НачалоСлова));
	КонецЕсли;
	
	Возврат Слова;
	
КонецФункции

// Определяет, является ли символ разделителем.
//
// Параметры:
//  КодСимвола      - Число  - код проверяемого символа;
//  РазделителиСлов - Строка - символы разделителей. Если параметр не указан, то 
//                             разделителем считаются все символы, не являющиеся цифрами, 
//                             латинскими и кириллическими буквами, а также знаком подчеркивания.
//
// Возвращаемое значение:
//  Булево - Истина, если символ с кодом КодСимвола является разделителем.
//
&НаСервереБезКонтекста
Функция ЭтоРазделительСлов(КодСимвола, РазделителиСлов = Неопределено) Экспорт
	
	Если РазделителиСлов <> Неопределено Тогда
		Возврат Найти(РазделителиСлов, Символ(КодСимвола)) > 0;
	КонецЕсли;
		
	Диапазоны = Новый Массив;
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 48, 57)); 		// цифры
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 65, 90)); 		// латиница большие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 97, 122)); 		// латиница маленькие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1040, 1103)); 	// кириллица
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1025, 1025)); 	// символ "Ё"
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1105, 1105)); 	// символ "ё"
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 95, 95)); 		// символ "_"
	
	Для Каждого Диапазон Из Диапазоны Цикл
		Если КодСимвола >= Диапазон.Мин И КодСимвола <= Диапазон.Макс Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция УдалитьЦифрыВСтрокеИПараметры(Знач Значение, Параметры = Неопределено)

	Значение = СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
	СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
	Значение, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", "");
	
	Если Параметры<>Неопределено Тогда
		Для сч = 1 По СтрДлина(Параметры) Цикл
			Значение = СтрЗаменить(Значение, Сред(Параметры, сч, 1), "");				   
		КонецЦикла;
	КонецЕсли;

	Возврат Значение;
	
КонецФункции // ()

&НаСервереБезКонтекста
Функция СравнитьДвеСтрокиСУчетомЛатиницы(Знач Строка1, Знач Строка2)

	Результат = 0;
	
	ТолькоРусскиеСимволы 	= "БбвГгДдЁёЖжЗзИиЙйЛлмнПптУФфЦцЧчШшЩщЪъЫыЬьЭэЮюЯя";
	ТолькоАнглийскиеСимволы = "DdFfGghIiJjLlNQqRrSstUVvWwYZz";
	РусскиеСимволы 			= "АаВЕеКкМНОоРрСсТуХхЗО1ти@пь.,:;""";//"АаВЕеКкМНОоРрСсТуХхЗО1тиа@пь";
	АнглийскиеСимволы 		= "AaBEeKkMHOoPpCcTyXx30imu@nb.,:;""";//"AaBEeKkMHOoPpCcTyXx30imu@anb";
	
	для сч = 1 по СтрДлина(Строка1) Цикл
		Строка1 = СтрЗаменить(Строка1, Сред(АнглийскиеСимволы,сч,1), Сред(РусскиеСимволы,сч,1));
		Строка2 = СтрЗаменить(Строка2, Сред(АнглийскиеСимволы,сч,1), Сред(РусскиеСимволы,сч,1));
	КонецЦикла;
	
	Если Строка1 = Строка2 Тогда
		Результат = 100;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СравнитьДвеСтрокиСУчетомЛатиницы()

// -- вспомогательные функции для нечеткого поиска )

// Масленников Е. Доработки для нечеткого поиска )

// Функция предназначена для получения массива ссылок организаций
//
// Параметры:
//
// Возвращаемое значение:
//     СтрокаСсылокОрганизаций, тип Строка - строка с идентификаторами ссылок организаций базы
//
&НаСервереБезКонтекста
Функция ПолучитьСсылкиОрганизаций() Экспорт
	
	СтрокаСсылокОрганизаций = "";
	Попытка
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления";
		
		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			СтрокаСсылокОрганизаций = СтрокаСсылокОрганизаций + Строка(ВыборкаЗапроса.Ссылка.УникальныйИдентификатор()) + ";";		 
		КонецЦикла;
	Исключение
	КонецПопытки;
	Возврат СтрокаСсылокОрганизаций;
	
КонецФункции

// Процедура выполняет отправку Like для документа на сервер
//
// Параметры:
//     СтрокаИД, тип "Строка" -  ИД документа
//     УникальныйИдентификаторФормы, тип УИД - уникальный идентификатор формы
//
&НаКлиенте
Процедура ОтправитьЛайк(СтрокаИД, УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	СтруктураЗапроса = Новый Структура("DocumentIDList", СтрокаИД);
	
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocuments/Like";
	ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", СтруктураЗапроса);                   
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Спасибо за положительную оценку нашего сервиса!";
		Если УникальныйИдентификаторФормы = Неопределено Тогда
			УникальныйИдентификаторФормы = ЭтаФорма.УникальныйИдентификатор;
		КонецЕсли;
		СообщениеПользователю.ИдентификаторНазначения = УникальныйИдентификаторФормы;
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет обновление HTTP-соединений и проверку их доступности 
//
&НаКлиенте
Функция ОбновитьHTTPConnections() Экспорт 
	
	ESDLADLHTTP = HTTPConnection("ADL", beta);
	ESDLCoreHTTP = HTTPConnection("Core", beta);
	СлужбаADL42Доступна(ЭтаФорма.УникальныйИдентификатор, Истина);
	
КонецФункции

// Процедура добавляет строку реквизита в таблицу описания шапки или табличной части документа
//
// Параметры:
// 		Идентификатор - идентификатор реквизита
//      Синоним - синоним реквизита, отображаемый пользователю
//      Тип - итоговый тип значения реквизита 
//      Вид - итоговый вид значения реквизита (задается только для ссылочных типов, т.е это имя справочника или перечисления и т.п.)
//      Владелец - наименование реквизита-владельца
//      Отображать - признак отображения реквизита в форме
//      Выражение - имя раздела xml или формула для вычисления значения реквизита (формулы указываются в квадратных скобках, например "[Ложь]")
//      Родитель - значение родителя строки реквизита при отображении в дереве шапки формы (позволяет создавать многоуровневое дерево значений шапки)
//      ПорядокОтображения - число, на основании которого определяется последовательность расположения элементов в шапке
//      Развернуть - признак свернутого или развернутого состояния реквизита при отображении в дереве
//      ОтображатьВИсходном - признак отображения исходного значения в форме
//		
&НаСервере
Процедура ДобавитьРеквизитТаблицыОписанияДокумента(Идентификатор, Синоним = "", Тип = "", Вид = "", Владелец = "", Отображать = Истина, Выражение = "", Родитель = "", ПорядокОтображения = Неопределено, Развернуть = Ложь, ОтображатьВИсходном = Истина)
	
	// Если данные есть в реквизитах xml, то указываем имя реквизита последним параметром
	// иначе выражение для вычисления данных
	
	СтрокаРеквизита = ТаблицаОписанияДокумента.Добавить();
	СтрокаРеквизита.Идентификатор = Идентификатор;
	СтрокаРеквизита.Синоним = ?(Синоним = "", Идентификатор, Синоним);
	СтрокаРеквизита.Тип = Тип;
	СтрокаРеквизита.ОписаниеТипаРеквизита = СоздатьОписаниеТипа(Идентификатор, Тип);
	СтрокаРеквизита.Вид = Вид;
	СтрокаРеквизита.Владелец = Владелец;
	СтрокаРеквизита.Отображать = Отображать;
	СтрокаРеквизита.Выражение = Выражение;
	СтрокаРеквизита.Родитель = Родитель;
	СтрокаРеквизита.ПорядокОтображения = ПорядокОтображения;
	СтрокаРеквизита.Развернуть = Развернуть;
	СтрокаРеквизита.ОтображатьВИсходном = ОтображатьВИсходном;
	
КонецПроцедуры


// Функция для проверки ИНН
//
// Параметры:
//     ИНН, тип Строка - ИНН
//     СтруктураСообщений, тип "Структура" - структура для записи сообщений пользователю
//
// Возвращаемое значение:
// Тип Булево, признак валидности ИНН
// 
&НаКлиенте
Функция ВерныйИННВызовнаСервер(Знач ИНН, СтруктураСообщений = Неопределено) Экспорт
	Возврат ВерныйИНН(ИНН, СтруктураСообщений);
КонецФункции

// Функция для проверки ИНН на сервере
//
// Параметры:
//     ИНН, тип Строка - ИНН
//     СтруктураСообщений, тип "Структура" - структура для записи сообщений пользователю
//
// Возвращаемое значение:
// Тип Булево, признак валидности ИНН
// 
&НаСервереБезКонтекста
Функция ВерныйИНН(Знач ИНН, СтруктураСообщений = Неопределено) Экспорт
	
	ИНН = СокрЛП(ИНН);
	
	Если НЕ ТолькоЦифры(ИНН) Тогда
		Если СтруктураСообщений <> Неопределено Тогда
			СтруктураСообщений.Вставить("ВерныйИНН", "ИНН контрагента должен содержать только цифры");
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	Если СтрДлина(ИНН)<>10 И СтрДлина(ИНН)<>12 Тогда
		Если СтруктураСообщений <> Неопределено Тогда
			СтруктураСообщений.Вставить("ВерныйИНН", "ИНН контрагента должен содержать 10 или 12 цифр");
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	Если СтрДлина(ИНН)=12 Тогда
		Сумма1 = 7*Сред(ИНН, 1, 1) + 2*Сред(ИНН, 2, 1) + 4*Сред(ИНН, 3, 1) + 10*Сред(ИНН, 4, 1) + 3*Сред(ИНН, 5, 1) + 5*Сред(ИНН, 6, 1) + 9*Сред(ИНН, 7, 1) + 4*Сред(ИНН, 8, 1) + 6*Сред(ИНН, 9, 1) + 8*Сред(ИНН, 10, 1);
		КонтрольноеЧисло1 = Сумма1 - Цел(Сумма1/11)*11;
		КонтрольнаяЦифра1 = ?(КонтрольноеЧисло1=10, "0", "" + КонтрольноеЧисло1);
		Сумма2 = 3*Сред(ИНН, 1, 1) + 7*Сред(ИНН, 2, 1) + 2*Сред(ИНН, 3, 1) + 4*Сред(ИНН, 4, 1) + 10*Сред(ИНН, 5, 1) + 3*Сред(ИНН, 6, 1) + 5*Сред(ИНН, 7, 1) + 9*Сред(ИНН, 8, 1) + 4*Сред(ИНН, 9, 1) + 6*Сред(ИНН, 10, 1) + 8*Сред(ИНН, 11, 1);
		КонтрольноеЧисло2 = Сумма2 - Цел(Сумма2/11)*11;
		КонтрольнаяЦифра2 = ?(КонтрольноеЧисло2=10, "0", "" + КонтрольноеЧисло2);
		Если Сред(ИНН, 11, 1)<>КонтрольнаяЦифра1 ИЛИ Сред(ИНН, 12, 1)<>КонтрольнаяЦифра2 Тогда
			Если СтруктураСообщений <> Неопределено Тогда
				СтруктураСообщений.Вставить("ВерныйИНН", "ИНН контрагента не прошел проверку на контрольную сумму");
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Сумма2 = 2*Сред(ИНН, 1, 1) + 4*Сред(ИНН, 2, 1) + 10*Сред(ИНН, 3, 1) + 3*Сред(ИНН, 4, 1) + 5*Сред(ИНН, 5, 1) + 9*Сред(ИНН, 6, 1) + 4*Сред(ИНН, 7, 1) + 6*Сред(ИНН, 8, 1) + 8*Сред(ИНН, 9, 1);
		КонтрольноеЧисло2 = Сумма2 - Цел(Сумма2/11)*11;
		КонтрольнаяЦифра2 = ?(КонтрольноеЧисло2=10, "0", "" + КонтрольноеЧисло2);
		Если Сред(ИНН, 10, 1)<>КонтрольнаяЦифра2 Тогда
			Если СтруктураСообщений <> Неопределено Тогда
				СтруктураСообщений.Вставить("ВерныйИНН", "ИНН контрагента не прошел проверку на контрольную сумму");
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

// функция на основе данных переданных в параметре формирует параметры HTTPСоединение
//
// параметры:
//	ИмяСервиса, тип "строка" - имя сервиса к которому требуется подключение	
//	
// возвращаемое значение: новое HTTPСоединение 
//
&НаКлиентеНаСервереБезКонтекста
Функция HTTPConnection(ИмяСервиса, beta) Экспорт
	
	#Если ВебКлиент Тогда
		
		Возврат Неопределено;
		
	#Иначе

		Порт = 443;
		//Порт = 80;
		Пользователь = "";
		Пароль = "";
		Таймаут = 0;
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
		//ЗащищенноеСоединение = Неопределено;
		Попытка
			Прокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("http");
		Исключение
			Прокси = Неопределено;
		КонецПопытки;          
		Если ИмяСервиса = "ADL" Тогда
			Сервер = "adl.42clouds.com";
			Если beta Тогда
				Сервер = "beta-" + Сервер;
			КонецЕсли;
		ИначеЕсли ИмяСервиса = "Core" Тогда
			Сервер = "core.42clouds.com";
			Если beta Тогда
				Сервер = "beta" + Сервер;
			КонецЕсли;
		КонецЕсли;  
				
		НТТР = Новый HTTPСоединение(Сервер, Порт, Пользователь, Пароль, Прокси, Таймаут, ЗащищенноеСоединение); 
		
		Возврат НТТР;
		
	#КонецЕсли
	
КонецФункции

// функция парсинга XML ответа сервера, на основе анализа ответа сервера формируется структура
// с нужными параметрами из ответа сервера
//
// параметры:
//	ОтветСервера, тип "строка" - ответ сервера в виде XML строки		
//
// возвращаемое значение: структура с параметрми ответа сервера
//
&НаСервереБезКонтекста
Функция ПарсерОтветаXML(ОтветСервера) Экспорт
	
	ПараметрыОтвета = Новый Структура("КодОтвета, СтруктураОтвета", 200, Новый Структура);
	
	Если НЕ ОтветСервера = "" Тогда
		
		ОтветСервера = СтрЗаменить(ОтветСервера, "<result>", "<Result>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "</result>", "</Result>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<result/>", "<Result/>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<request>", "<Request>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "</request>", "</Request>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<request/>", "<Request/>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<error>", "<Error>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "</error>", "</Error>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<error/>", "<Error/>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<code>", "<Code>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "</code>", "</Code>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<code/>", "<Code/>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<description>", "<Description>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "</description>", "</Description>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<description/>", "<Description/>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<debuginfo>", "<DebugInfo>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "</debuginfo>", "</DebugInfo>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<debuginfo/>", "<DebugInfo/>");
		
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(ОтветСервера);
			Если Найти(ОтветСервера, "<Result") = 0 И Найти(ОтветСервера, "<Error") = 0 Тогда
				Попытка 
					СтруктураОтвета = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
				Исключение
				КонецПопытки;
			КонецЕсли;
			Если СтруктураОтвета = Неопределено Тогда
				Пока ЧтениеXML.Прочитать() Цикл
					Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						КорневойЭлемент = ЧтениеXML.Имя;
						Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = КорневойЭлемент И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
							Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
								ИмяЭлементаОтвета = ЧтениеXML.Имя;
								Если ЧтениеXML.ПервыйАтрибут() И ЧтениеXML.Имя = "Type" Тогда
									ТипЭлемента = ЧтениеXML.Значение
								Иначе
									ТипЭлемента = "String";
								КонецЕсли;
								Если ТипЭлемента = "List" Тогда 
									ЗначениеЭлементаОтвета = Новый Массив;
									Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = ИмяЭлементаОтвета И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
										Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
											ЗначениеЭлементаОтвета.Добавить(ЧтениеXML.Значение);
										КонецЕсли;
									КонецЦикла;
								ИначеЕсли ТипЭлемента = "Table" Тогда 
									ЗначениеЭлементаОтвета = Новый Массив;
									Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = ИмяЭлементаОтвета И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
										Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Row" Тогда
											СтруктураСтроки = Новый Структура;
											Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = "Row" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
												Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
													ИмяКолонки = ЧтениеXML.Имя;
												ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
													Значение = ЧтениеXML.Значение;
													СтруктураСтроки.Вставить(ИмяКолонки, Значение);
												ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
													Если НЕ СтруктураСтроки.Свойство(ИмяКолонки) Тогда
														СтруктураСтроки.Вставить(ИмяКолонки, ""); 
													КонецЕсли;
												КонецЕсли;
											КонецЦикла;
											ЗначениеЭлементаОтвета.Добавить(СтруктураСтроки);
										КонецЕсли;
									КонецЦикла
								ИначеЕсли ТипЭлемента = "String" Тогда
									ЗначениеЭлементаОтвета = "";
									Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = ИмяЭлементаОтвета И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
										Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
											ЗначениеЭлементаОтвета = ЧтениеXML.Значение;
										КонецЕсли;
									КонецЦикла
								КонецЕсли;
								ПараметрыОтвета.СтруктураОтвета.Вставить(ИмяЭлементаОтвета, ЗначениеЭлементаОтвета);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				Если ВРег(КорневойЭлемент) = ВРег("Error")Тогда
					Попытка
						ПараметрыОтвета.КодОтвета = Число(ПараметрыОтвета.СтруктураОтвета.Code);
					Исключение
						ПараметрыОтвета.КодОтвета = 400;
					КонецПопытки;
				ИначеЕсли НЕ (ВРег(КорневойЭлемент) = ВРег("Result") ИЛИ ВРег(КорневойЭлемент) = ВРег("Request")) Тогда
					ПараметрыОтвета.КодОтвета = 400;
				КонецЕсли;
			Иначе
				Для Каждого Элемент Из СтруктураОтвета Цикл
					Если ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") Тогда
						СтруктураОтвета[Элемент.Ключ] = ПреобразоватьТаблицуЗначенийВМассивСтруктур(Элемент.Значение);
					КонецЕсли;
				КонецЦикла;
				ПараметрыОтвета.СтруктураОтвета = СтруктураОтвета;
			КонецЕсли;
		Исключение
			ПараметрыОтвета.КодОтвета = 400;
		КонецПопытки;
		
	Иначе
		ПараметрыОтвета.КодОтвета = 400;
	КонецЕсли;
	
	Если ПараметрыОтвета.КодОтвета = 400 И Не ПараметрыОтвета.СтруктураОтвета.Свойство("Code") Тогда
		Если Не ПараметрыОтвета.СтруктураОтвета.Свойство("Code") Тогда
			ПараметрыОтвета.СтруктураОтвета.Вставить("Code", Строка("400"));
		КонецЕсли;
		Если НЕ (ПараметрыОтвета.СтруктураОтвета.Свойство("Description") И ПараметрыОтвета.СтруктураОтвета.Свойство("DebugInfo")) Тогда
			ПараметрыОтвета.СтруктураОтвета.Вставить("DebugInfo", "The server's response does not meet the standard of service");
			ПараметрыОтвета.СтруктураОтвета.Вставить("Description", "Ответ сервера не соответствует стандарту сервиса");
		КонецЕсли;
		ПараметрыОтвета.СтруктураОтвета.Вставить("ТелоОтветаСтрока", ОтветСервера);
	КонецЕсли;
	
	Если ВРег(КорневойЭлемент) = ВРег("Request") Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета;
	Иначе
		Возврат ПараметрыОтвета;
	КонецЕсли;
	
КонецФункции

// Процедура выполняет чтение настроек из xml и их заполнение
//
// Параметры: 
//		XMLНастроек, тип Строка - текст xml с настройками 
//
&НаСервере
Процедура ПолучитьИЗаполнитьНастройки(XMLНастроек) Экспорт
	
	СтруктураНастроек = Новый Структура;

	Если НЕ XMLНастроек = "" И НЕ XMLНастроек = Неопределено Тогда
		
		XMLНастроек = СтрЗаменить(XMLНастроек, "<result>", "<Result>");
		XMLНастроек = СтрЗаменить(XMLНастроек, "</result>", "</Result>");
		XMLНастроек = СтрЗаменить(XMLНастроек, "<result/>", "<Result/>");
		XMLНастроек = СтрЗаменить(XMLНастроек, "<request>", "<Request>");
		XMLНастроек = СтрЗаменить(XMLНастроек, "</request>", "</Request>");
		XMLНастроек = СтрЗаменить(XMLНастроек, "<request/>", "<Request/>");
		XMLНастроек = СтрЗаменить(XMLНастроек, "<error>", "<Error>");
		XMLНастроек = СтрЗаменить(XMLНастроек, "</error>", "</Error>");
		XMLНастроек = СтрЗаменить(XMLНастроек, "<error/>", "<Error/>");
		XMLНастроек = СтрЗаменить(XMLНастроек, "<code>", "<Code>");
		XMLНастроек = СтрЗаменить(XMLНастроек, "</code>", "</Code>");
		XMLНастроек = СтрЗаменить(XMLНастроек, "<code/>", "<Code/>");
		XMLНастроек = СтрЗаменить(XMLНастроек, "<description>", "<Description>");
		XMLНастроек = СтрЗаменить(XMLНастроек, "</description>", "</Description>");
		XMLНастроек = СтрЗаменить(XMLНастроек, "<description/>", "<Description/>");
		XMLНастроек = СтрЗаменить(XMLНастроек, "<debuginfo>", "<DebugInfo>");
		XMLНастроек = СтрЗаменить(XMLНастроек, "</debuginfo>", "</DebugInfo>");
		XMLНастроек = СтрЗаменить(XMLНастроек, "<debuginfo/>", "<DebugInfo/>");
		XMLНастроек = СтрЗаменить(XMLНастроек, "type=", "Type=");
		XMLНастроек = СтрЗаменить(XMLНастроек, """list""", """List""");
		XMLНастроек = СтрЗаменить(XMLНастроек, """table""", """Table""");
		XMLНастроек = СтрЗаменить(XMLНастроек, "<row>", "<Row>");
		XMLНастроек = СтрЗаменить(XMLНастроек, "</row>", "</Row>");
		XMLНастроек = СтрЗаменить(XMLНастроек, "<row/>", "<Row/>");

		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(XMLНастроек);             
			
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					КорневойЭлемент = ЧтениеXML.Имя;
					Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = КорневойЭлемент И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
							ИмяЭлементаОтвета = ЧтениеXML.Имя;
							ТипЭлемента = ЧтениеXML.ПолучитьАтрибут("Type"); 
							ТипЭлементовСпискаЗначений = ЧтениеXML.ПолучитьАтрибут("ElementType");
							Если ТипЭлемента = "Table" Тогда 
								ТаблицаЗначение = РеквизитФормыВЗначение(ИмяЭлементаОтвета, Тип("ТаблицаЗначений"));
								Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = ИмяЭлементаОтвета И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
									Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Row" Тогда
										НоваяСтрока = ТаблицаЗначение.Добавить();
										Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = "Row" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
											Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
												ИмяКолонки = ЧтениеXML.Имя;
												ТипЭлемента = ЧтениеXML.ПолучитьАтрибут("Type");
												ТипЭлементовСпискаЗначений = ЧтениеXML.ПолучитьАтрибут("ElementType");
												Значение = "";
											ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
												Значение = ЧтениеXML.Значение;
												Если ТаблицаЗначение.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда 
													Если НЕ ТипЭлемента = "Список значений" Тогда
														Значение = XMLЗначение(Тип(ТипЭлемента), Значение);
													Иначе
														МассивЗначений = СтрРазделить(Значение, ";", Ложь); 
														Значение = Новый СписокЗначений();
														Для Каждого ЭлементСпискаСтрока Из МассивЗначений Цикл
															Если ТипЭлементовСпискаЗначений <> Неопределено И ТипЭлементовСпискаЗначений <> "" Тогда
																Если ЭлементСпискаСтрока = "" Тогда
																	ЭлементСписка = ПустоеЗначениеТипа(Тип(ТипЭлементовСпискаЗначений));
																Иначе
																	ПозицияРазделителя = Найти(ЭлементСпискаСтрока, "|");
																	Если ПозицияРазделителя > 0 Тогда
																		ЭлементСпискаЗначениеСтрока = Лев(ЭлементСпискаСтрока, ПозицияРазделителя-1); 
																		ЭлементСпискаЗначение = XMLЗначение(Тип(ТипЭлементовСпискаЗначений), ЭлементСпискаЗначениеСтрока);
																		ЭлементСпискаПредставление = Сред(ЭлементСпискаСтрока, ПозицияРазделителя+1);
																	Иначе
																		ЭлементСпискаЗначение = XMLЗначение(Тип(ТипЭлементовСпискаЗначений), ЭлементСпискаСтрока);
																	КонецЕсли;	
																КонецЕсли;
															Иначе
																ЭлементСписка = ЭлементСпискаСтрока;
															КонецЕсли;
															Значение.Добавить(ЭлементСпискаЗначение, ЭлементСпискаПредставление);
														КонецЦикла;
													КонецЕсли;
													НоваяСтрока[ИмяКолонки] = Значение;
												КонецЕсли;
											ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И Значение = "" Тогда
												Если НЕ ТипЭлемента = "Список значений" Тогда
													Значение = ПустоеЗначениеТипа(Тип(ТипЭлемента));
												Иначе
													Значение = Новый СписокЗначений();
												КонецЕсли;
												НоваяСтрока[ИмяКолонки] = Значение;
											КонецЕсли;
										КонецЦикла;
									КонецЕсли;
								КонецЦикла;
								СтруктураНастроек.Вставить(ИмяЭлементаОтвета, ТаблицаЗначение);
							ИначеЕсли НЕ ТипЭлемента = Неопределено Тогда
								Значение = "";
								Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = ИмяЭлементаОтвета И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
									Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
										Если НЕ ТипЭлемента = "Список значений" Тогда
											Значение = XMLЗначение(Тип(ТипЭлемента), ЧтениеXML.Значение);
										Иначе
											Значение = ЧтениеXML.Значение;
											МассивЗначений = СтрРазделить(Значение, ";", Ложь); 
											Значение = Новый СписокЗначений();
											Для Каждого ЭлементСпискаСтрока Из МассивЗначений Цикл
												Если ТипЭлементовСпискаЗначений <> Неопределено Тогда
													Если ЭлементСпискаСтрока = "" Тогда
														ЭлементСписка = ПустоеЗначениеТипа(Тип(ТипЭлементовСпискаЗначений));
													Иначе
														ЭлементСписка = XMLЗначение(Тип(ТипЭлементовСпискаЗначений), ЭлементСпискаСтрока);
													КонецЕсли;
												Иначе
													ЭлементСписка = ЭлементСпискаСтрока;
												КонецЕсли;
												Значение.Добавить(ЭлементСписка);
											КонецЦикла;
										КонецЕсли;
									КонецЕсли;
								КонецЦикла;
								Если Значение = "" Тогда
									Если НЕ ТипЭлемента = "Список значений" Тогда
										Значение = ПустоеЗначениеТипа(Тип(ТипЭлемента));
									Иначе
										Значение = Новый СписокЗначений();
									КонецЕсли;
								КонецЕсли;
								СтруктураНастроек.Вставить(ИмяЭлементаОтвета, Значение);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	СтруктураОписанийДокументов = СоздатьСтруктуруОписанийДокументов();
	Для Каждого Элемент Из СтруктураОписанийДокументов Цикл
		Для Каждого ПодЭлемент Из Элемент.Значение Цикл
			Если ТипЗнч(ПодЭлемент.Значение) = Тип("ТаблицаЗначений") Тогда
				Элемент.Значение[ПодЭлемент.Ключ] = ПреобразоватьТаблицуЗначенийВМассивСтруктур(ПодЭлемент.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//Для Каждого ОписаниеДокумента Из СтруктураОписанийДокументов Цикл
	//	Элементы.НастройкаВидДокумента.СписокВыбора.Добавить(ОписаниеДокумента.Ключ, ОписаниеДокумента.Значение.СинонимДокумента);
	//КонецЦикла;
	//НастройкаВидДокумента = Элементы.НастройкаВидДокумента.СписокВыбора[0].Значение;	
	
	ВозможныеВидыДокументовДляСценариев = ЗаполнитьВозможныеВидыДокументовДляСценариев(ИмяШаблона, ВерсияКонфигурации);	
	ЗаполнитьСтруктуруТиповДокументов();
	Если СтруктураНастроек.Свойство("ТаблицаВходящихДокументов") Тогда
		ЗначениеВРеквизитФормы(СтруктураНастроек.ТаблицаВходящихДокументов, "ТаблицаВходящихДокументов");
	КонецЕсли;
	ЗаполнитьТаблицаВходящихДокументов();

	Для Каждого Элемент Из СтруктураТиповДокументов Цикл
		МассивСтрокТипа = ТаблицаВходящихДокументов.НайтиСтроки(Новый Структура("ТипРаспознан", Элемент.Ключ));
		Элемент.Значение.Вставить("ГотовКЗагрузке", ?(МассивСтрокТипа.Количество() = 0, Ложь, Истина));
	КонецЦикла;
	
	ТаблицаНастроекЗначение = ТаблицаНастроекЗаполнить();
	Если СтруктураНастроек.Свойство("ТаблицаНастроек") Тогда
		ТаблицаНастроекСохраненная = СтруктураНастроек.ТаблицаНастроек;
		Для Каждого ОписаниеДокумента Из СтруктураОписанийДокументов Цикл
			ВидДокумента = ОписаниеДокумента.Ключ;
			МассивСтрокВидаСоздаваемогоДокумента = ТаблицаНастроекЗначение.НайтиСтроки(Новый Структура("СоздаваемыйДокумент", ВидДокумента));
			Для Каждого СтрокаНастройкиВидаДокумента Из МассивСтрокВидаСоздаваемогоДокумента Цикл
				МассивСтрокСохраненнойТаблицыВидаСоздаваемогоДокумента = ТаблицаНастроекСохраненная.НайтиСтроки(Новый Структура("СоздаваемыйДокумент, Идентификатор", ВидДокумента, СтрокаНастройкиВидаДокумента.Идентификатор));
				Если МассивСтрокСохраненнойТаблицыВидаСоздаваемогоДокумента.Количество() > 0 Тогда 
					СтрокаНастройкиСохраненная = МассивСтрокСохраненнойТаблицыВидаСоздаваемогоДокумента[0];
					Если ТипЗнч(СтрокаНастройкиСохраненная.Значение) = ТипЗнч(СтрокаНастройкиВидаДокумента.Значение) Тогда 
						СтрокаНастройкиВидаДокумента.Значение = СтрокаНастройкиСохраненная.Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;	
	ЗначениеВРеквизитФормы(ТаблицаНастроекЗначение, "ТаблицаНастроек");
	
	ЗаполнитьТаблицыСортировкиИОтборов();
	Если СтруктураНастроек.Свойство("ТаблицаОтборов") Тогда
		ТаблицаОтборовСохраненная = СтруктураНастроек.ТаблицаОтборов;
		Для Каждого СтрокаТаблицыОтборов Из ТаблицаОтборов Цикл
			СтрокаСохраненная = ТаблицаОтборовСохраненная.Найти(СтрокаТаблицыОтборов.ИмяПоля,"ИмяПоля");
			Если СтрокаСохраненная <> Неопределено Тогда 
				СтрокаТаблицыОтборов.ВидСравнения = СтрокаСохраненная.ВидСравнения;
				СтрокаТаблицыОтборов.ЗначениеОтбора = СтрокаСохраненная.ЗначениеОтбора;
				СтрокаТаблицыОтборов.ЗначениеОтбораСиноним = СтрокаСохраненная.ЗначениеОтбораСиноним;
				СтрокаТаблицыОтборов.Использование = СтрокаСохраненная.Использование;
			КонецЕсли;
		КонецЦикла;
		//ЗначениеВРеквизитФормы(СтруктураНастроек.ТаблицаОтборов, "ТаблицаОтборов");
	КонецЕсли;
	
	Если СтруктураНастроек.Свойство("ТаблицаСортировки") Тогда
		ТаблицаСортировкиСохраненная = СтруктураНастроек.ТаблицаСортировки;
		Для Каждого СтрокаТаблицыСортировки Из ТаблицаСортировки Цикл
			СтрокаСохраненная = ТаблицаСортировкиСохраненная.Найти(СтрокаТаблицыСортировки.ИмяПоля,"ИмяПоля");
			Если СтрокаСохраненная <> Неопределено Тогда 
				СтрокаТаблицыСортировки.Использование = СтрокаСохраненная.Использование; 
				СтрокаТаблицыСортировки.НаправлениеСортировки = СтрокаСохраненная.НаправлениеСортировки;  
			КонецЕсли;
		КонецЦикла;
		//ЗначениеВРеквизитФормы(СтруктураНастроек.ТаблицаСортировки, "ТаблицаСортировки");
	КонецЕсли;
	
	Если НЕ СтруктураНастроек.Свойство("ПоказыватьНовыеЭлементыСправочника", ПоказыватьНовыеЭлементыСправочника) Тогда
		ПоказыватьНовыеЭлементыСправочника = Истина;
	КонецЕсли;
	//Если НЕ СтруктураНастроек.Свойство("ПоказыватьИсходныеЗначения", ПоказыватьИсходныеЗначения) Тогда
	//	ПоказыватьИсходныеЗначения = Истина;
	//КонецЕсли;
	//Если СтруктураНастроек.Свойство("СортироватьПо", СортироватьПо) Тогда
	//	ЭлементСохраненногоЗначения = Элементы.СортироватьПо.СписокВыбора.НайтиПоЗначению(СтруктураНастроек.СортироватьПо);
	//	СортироватьПо = ?(ЭлементСохраненногоЗначения = Неопределено, Элементы.СортироватьПо.СписокВыбора[0].Значение, ЭлементСохраненногоЗначения.Значение);
	//Иначе
	//	СортироватьПо = Элементы.СортироватьПо.СписокВыбора[0].Значение;
	//КонецЕсли;
	Если НЕ СтруктураНастроек.Свойство("СловарьПоНаименованиям", СловарьПоНаименованиям) Тогда
		СловарьПоНаименованиям = Ложь;
	КонецЕсли;
	Если НЕ СтруктураНастроек.Свойство("СоздаватьДокументВида", СоздаватьДокументВида) Тогда
		СоздаватьДокументВида = "Автоопределение";
	КонецЕсли;
	
	СтруктураНастроек.Свойство("НеДобавлятьВПФ", НеДобавлятьВПФ);
	СтруктураНастроек.Свойство("ОтказЗаполненияСпискаОрганизаций", ОтказЗаполненияСпискаОрганизаций);
	СтруктураНастроек.Свойство("ОтказОтУстановкиРасширенияРаботыСФайлами", ОтказОтУстановкиРасширенияРаботыСФайлами);
	СтруктураНастроек.Свойство("ДатаПоследнегоОткрытияФормыНормализации", ДатаПоследнегоОткрытияФормыНормализации);
	СтруктураНастроек.Свойство("УдалятьПослеЗагрузки", УдалятьПослеЗагрузки);
	СтруктураНастроек.Свойство("ПапкаВыбораДокументов", ПапкаВыбораДокументов);
	СтруктураНастроек.Свойство("ПапкаВыбораДокументов", ПапкаВыбораДокументов);
	
	//   Русанова М. 08.10.2018(
	СтруктураНастроек.Свойство("ПрикреплятьФайлКДокументу", ПрикреплятьФайлКДокументу);
	// ) Русанова М. 08.10.2018
			
	ЗаполнитьСписокЗначенийСправочникиСловаряСоответствий();
	СписокСправочниковСловаря = "";
	Если СтруктураНастроек.Свойство("СписокСправочниковСловаря", СписокСправочниковСловаря) Тогда
		МассивЗначений = СтрРазделить(СписокСправочниковСловаря, ",", Ложь); 
		КоличествоВыбранных = 0;
		Для Каждого ЭлементСписка Из СписокЗначенийСправочникиСловаряСоответствий Цикл
			Если МассивЗначений.Найти(ЭлементСписка.Значение) = Неопределено Тогда
				ЭлементСписка.Пометка = Ложь;	
			Иначе
				КоличествоВыбранных = КоличествоВыбранных + 1;
			КонецЕсли;
		КонецЦикла;
	Иначе
		КоличествоВыбранных = СписокЗначенийСправочникиСловаряСоответствий.Количество();
	КонецЕсли;
	Если КоличествоВыбранных = 0 Тогда
		ИспользоватьСловарь = Ложь;
	ИначеЕсли НЕ СтруктураНастроек.Свойство("ИспользоватьСловарь", ИспользоватьСловарь) Тогда
		ИспользоватьСловарь = Истина;
	КонецЕсли;
	
	Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
		мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда	
		мВалютаРегламентированногоУчета = Константы.ВалютаУчета.Получить(); 
	КонецЕсли;

	//СписокЗначенийИменКолонокОформления.Добавить("Номенклатура");
	//СписокЗначенийИменКолонокОформления.Добавить("НомерГТД");
	//СписокЗначенийИменКолонокОформления.Добавить("СтранаПроисхождения");
	//СписокЗначенийИменКолонокОформления.Добавить("ЕдиницаИзмерения");
	//СписокЗначенийИменКолонокОформления.Добавить("Сумма");
	//СписокЗначенийИменКолонокОформления.Добавить("Количество");
	//СписокЗначенийИменКолонокОформления.Добавить("Всего");
	//СписокЗначенийИменКолонокОформления.Добавить("ЕдиницаИзмерения");

	
КонецПроцедуры

// функция выполняет запрос к серверу на основе информации переданной в параметрах
//
// параметры:
//	HTTPConnection, тип "HTTPСоединение" - соединение с сервером
//	АдресРесурса, тип "строка" - адрес запрашиваемого ресурса  
//	МетодОтправки, тип "строка" - метод отправки запроса (Get, Post, Post_File)
//	СтруктураПараметров, тип "строка" - если метод отправки "Post", то на основе этого параметра строится ContentDisposition
//	ПолноеИмяФайлаТела, тип "строка" - если метод отправки "Post_File", то параметр содержит полное имя файла
//	ПолучитьТелоКакДвоичныеДанные, тип "булево" - признак получения от сервера двоичных данных
//
// возвращаемое значение: структура, ответ сервера пропущенный через "ПарсерОтветаXML"
//
&НаКлиенте
Функция ВыполнитьЗапрос(HTTPConnectionСтрока, АдресРесурса, МетодОтправки = "Get", СтруктураПараметров=Неопределено, ПолноеИмяФайлаТела = Неопределено, ПолучитьТелоКакДвоичныеДанные = Ложь, XMLЗапроса = "") Экспорт
	
	ВремяНачалаОперации = ТекущаяУниверсальнаяДатаВМиллисекундах(); 
	
	#Если ВебКлиент Тогда
		
		Результат = ВыполнитьЗапросНаСервере(HTTPConnectionСтрока, АдресРесурса, МетодОтправки, СтруктураПараметров, ПолноеИмяФайлаТела, ПолучитьТелоКакДвоичныеДанные, XMLЗапроса, ESDLТокен, beta);
		
	#Иначе
		
		Результат =  ВыполнитьЗапросНаКлиенте(HTTPConnectionСтрока, АдресРесурса, МетодОтправки, СтруктураПараметров, ПолноеИмяФайлаТела, ПолучитьТелоКакДвоичныеДанные, XMLЗапроса);
		
	#КонецЕсли
	
	ВремяВыполнения = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачалаОперации)/1000;
	Если ВремяВыполнения > 2 Тогда
		НоваяСтрокаСтатистики                       = ТЗПоказателиРаботы.Добавить();
		НоваяСтрокаСтатистики.DateTime              = ТекущаяДата();
		НоваяСтрокаСтатистики.EventName             = "Выполнение запроса";
		//Ресурсы
		НоваяСтрокаСтатистики.User1C                = ПользовательИнфБазы;
		НоваяСтрокаСтатистики.ConfigurationVersion  = ВерсияКонфигурации;
		НоваяСтрокаСтатистики.ConfigurationName     = МетаданныеИмя;
		НоваяСтрокаСтатистики.ClientName            = "ESDL";
		НоваяСтрокаСтатистики.ClientVersion         = ВерсияПрограммы;
		НоваяСтрокаСтатистики.AccauntDataBaseID		= ИДБазыДанныхПользователя;
		//Реквизиты
		НоваяСтрокаСтатистики.Runtime               = ВремяВыполнения*1000;
		НоваяСтрокаСтатистики.StatisticalDataName0  = "Запрос";
		НоваяСтрокаСтатистики.StatisticalDataValue0 = HTTPConnectionСтрока + ": " + АдресРесурса;
		НоваяСтрокаСтатистики.StatisticalDataName1  = "Timings";
		НоваяСтрокаСтатистики.StatisticalDataValue1 = Результат.Timings;
	КонецЕсли;
	
	Возврат  Результат;

КонецФункции

// функция выполняет запрос к серверу на клиенте на основе информации переданной в параметрах
//
// параметры:
//	HTTPConnection, тип "HTTPСоединение" - соединение с сервером
//	АдресРесурса, тип "строка" - адрес запрашиваемого ресурса  
//	МетодОтправки, тип "строка" - метод отправки запроса (Get, Post, Post_File)
//	СтруктураПараметров, тип "строка" - если метод отправки "Post", то на основе этого параметра строится ContentDisposition
//	ПолноеИмяФайлаТела, тип "строка" - если метод отправки "Post_File", то параметр содержит полное имя файла
//	ПолучитьТелоКакДвоичныеДанные, тип "булево" - признак получения от сервера двоичных данных
//
// возвращаемое значение: структура, ответ сервера пропущенный через "ПарсерОтветаXML"
//
&НаКлиенте	
Функция ВыполнитьЗапросНаКлиенте(HTTPConnectionСтрока, АдресРесурса, МетодОтправки, СтруктураПараметров, ПолноеИмяФайлаТела, ПолучитьТелоКакДвоичныеДанные, XMLЗапроса) 
	
	#Если НЕ ВебКлиент Тогда
		
		ВремяНачалаОперации = ТекущаяУниверсальнаяДатаВМиллисекундах(); 
		
		Если HTTPConnectionСтрока = "ESDLCoreHTTP" Тогда
			HTTPConnection = ESDLCoreHTTP;
		ИначеЕсли HTTPConnectionСтрока = "ESDLADLHTTP" Тогда
			HTTPConnection = ESDLADLHTTP;
		КонецЕсли;
		
		Заголовки = Новый Соответствие();
		Заголовки.Вставить("Accept", "text/xml");
		Заголовки.Вставить("UserAgent", "ESDL1C");
		Заголовки.Вставить("ID", Строка(Новый УникальныйИдентификатор));
		Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
		
		Если Найти(АдресРесурса, "AccountUserSessions/Login") = 0 Тогда;
			Заголовки.Вставить("Token", ESDLТокен);
		КонецЕсли;
		
		Попытка 
			Если МетодОтправки = "Get" Тогда
				HTTPОтвет = HTTPConnection.Получить(Запрос);
				Если ПолучитьТелоКакДвоичныеДанные Тогда
					СтрокаContentDisposition = HTTPОтвет.Заголовки.Получить("Content-Disposition");
					Если СтрокаContentDisposition <> Неопределено Тогда
						СтруктураПараметровContentDisposition = ПарсерContentDisposition(СтрокаContentDisposition);
					КонецЕсли;
				КонецЕсли;
			Иначе 
				Если МетодОтправки = "Post_File" Тогда
					Заголовки.Вставить("Content-Disposition", СформироватьContentDisposition(СтруктураПараметров));
					Если XMLЗапроса <> "" Тогда
						Запрос.УстановитьТелоИзСтроки(XMLЗапроса);
					Иначе
						Запрос.УстановитьИмяФайлаТела(ПолноеИмяФайлаТела); 
					КонецЕсли;
				ИначеЕсли МетодОтправки = "Post" Тогда
					Заголовки.Вставить("Content-Type", "application/xml");
					Если XMLЗапроса = "" Тогда
						XMLЗапроса = СформироватьXMLЗапроса(СтруктураПараметров);
					КонецЕсли;
					Запрос.УстановитьТелоИзСтроки(XMLЗапроса);
				КонецЕсли;
				HTTPОтвет = HTTPConnection.ОтправитьДляОбработки(Запрос);
			КонецЕсли;
			ОтветСервера = HTTPОтвет.ПолучитьТелоКакСтроку();
			Тайминги = HTTPОтвет.Заголовки.Получить("Timings");
		Исключение
			Причина = ОписаниеОшибки();
			ОтветСервера = "";
		КонецПопытки;
		
		Если HTTPОтвет = Неопределено ИЛИ HTTPОтвет.КодСостояния = 500 Тогда 
			ПараметрыОтвета = Новый Структура("КодОтвета, СтруктураОтвета", 500, Новый Структура);
			Если Найти(Причина, "Couldn't resolve host name") ИЛИ НЕ ИнтернетПроверитьПодключение() Тогда
				ПараметрыОтвета.СтруктураОтвета.Вставить("DebugInfo", "The server's response does not meet the standard of service");
				ПараметрыОтвета.СтруктураОтвета.Вставить("Description", "Не доступно подключение к сети Интернет");
			ИначеЕсли Найти(Причина, "Failure when receiving data from the peer") Тогда
				ПараметрыОтвета.СтруктураОтвета.Вставить("DebugInfo", Причина);
				ПараметрыОтвета.СтруктураОтвета.Вставить("Description", "Не доступно подключение к серверу: " + HTTPConnection.Сервер);
			ИначеЕсли Найти(Причина, "Ошибка совместного доступа к файлу")Тогда 
				ПараметрыОтвета.СтруктураОтвета.Вставить("DebugInfo", Причина);
				ПараметрыОтвета.СтруктураОтвета.Вставить("Description", "Ошибка доступа к файлу " + ПолноеИмяФайлаТела + " (возможно файл занят другим приложением");
			Иначе
				ПараметрыОтвета.СтруктураОтвета.Вставить("DebugInfo", "The server's response does not meet the standard of service");
				ПараметрыОтвета.СтруктураОтвета.Вставить("Description", "Ошибка подключения к серверу");
			КонецЕсли;
			ПараметрыОтвета.СтруктураОтвета.Вставить("ТелоОтветаСтрока", ОтветСервера);
		ИначеЕсли ПолучитьТелоКакДвоичныеДанные И HTTPОтвет.КодСостояния = 200 Тогда
			ОтветСервераДвоичныеДанные = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
			ПараметрыОтвета = Новый Структура("КодОтвета, СтруктураОтвета", 200, Новый Структура);
			ПараметрыОтвета.СтруктураОтвета.Вставить("ДвоичныеДанные", ОтветСервераДвоичныеДанные);
			ПараметрыОтвета.СтруктураОтвета.Вставить("ТелоОтветаСтрока", ОтветСервера);
			Если СтруктураПараметровContentDisposition <> Неопределено Тогда
				ПараметрыОтвета.Вставить("СтруктураПараметровContentDisposition", СтруктураПараметровContentDisposition);
			КонецЕсли;
		Иначе
			ПараметрыОтвета = ПарсерОтветаXML(ОтветСервера); 
		КонецЕсли;
		ПараметрыОтвета.Вставить("Timings", Тайминги);
		
		Возврат ПараметрыОтвета;
		
	#Иначе
		
		Возврат Неопределено;
		
	#КонецЕсли
	

КонецФункции

// функция выполняет запрос к серверу на сервере на клиенте на основе информации переданной в параметрах
//
// параметры:
//	HTTPConnection, тип "HTTPСоединение" - соединение с сервером
//	АдресРесурса, тип "строка" - адрес запрашиваемого ресурса  
//	МетодОтправки, тип "строка" - метод отправки запроса (Get, Post, Post_File)
//	СтруктураПараметров, тип "строка" - если метод отправки "Post", то на основе этого параметра строится ContentDisposition
//	ПолноеИмяФайлаТела, тип "строка" - если метод отправки "Post_File", то параметр содержит полное имя файла
//	ПолучитьТелоКакДвоичныеДанные, тип "булево" - признак получения от сервера двоичных данных
//
// возвращаемое значение: структура, ответ сервера пропущенный через "ПарсерОтветаXML"
//
&НаСервереБезКонтекста
Функция ВыполнитьЗапросНаСервере(HTTPConnectionСтрока, АдресРесурса, МетодОтправки, СтруктураПараметров, АдресФайла, ПолучитьТелоКакДвоичныеДанные, XMLЗапроса, ESDLТокен, beta) 
	
	Если HTTPConnectionСтрока = "ESDLCoreHTTP" Тогда
		
		HTTPConnection = HTTPConnection("Core", beta);
		
	ИначеЕсли HTTPConnectionСтрока = "ESDLADLHTTP" Тогда
		
		HTTPConnection = HTTPConnection("ADL", beta);
		
	КонецЕсли;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "text/xml");
	Заголовки.Вставить("UserAgent", "ESDL1C");
	Заголовки.Вставить("ID", Строка(Новый УникальныйИдентификатор));
	Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Если Найти(АдресРесурса, "AccountUserSessions/Login") = 0 Тогда;
		Заголовки.Вставить("Token", ESDLТокен);
	КонецЕсли;
	
	Попытка 
		Если МетодОтправки = "Get" Тогда
			HTTPОтвет = HTTPConnection.Получить(Запрос);
			Если ПолучитьТелоКакДвоичныеДанные Тогда
				СтрокаContentDisposition = HTTPОтвет.Заголовки.Получить("Content-Disposition");
				Если СтрокаContentDisposition <> Неопределено Тогда
					СтруктураПараметровContentDisposition = ПарсерContentDisposition(СтрокаContentDisposition);
				КонецЕсли;
			КонецЕсли;
		Иначе 
			Если МетодОтправки = "Post_File" Тогда
				Заголовки.Вставить("Content-Disposition", СформироватьContentDisposition(СтруктураПараметров));
				Если XMLЗапроса <> "" Тогда
					Запрос.УстановитьТелоИзСтроки(XMLЗапроса);
				Иначе
					ДД = ПолучитьИзВременногоХранилища(АдресФайла);
					Запрос.УстановитьТелоИзДвоичныхДанных(ДД); 
				КонецЕсли;
			ИначеЕсли МетодОтправки = "Post" Тогда
				Заголовки.Вставить("Content-Type", "application/xml");
				Если XMLЗапроса = "" Тогда
					XMLЗапроса = СформироватьXMLЗапроса(СтруктураПараметров);
				КонецЕсли;
				Запрос.УстановитьТелоИзСтроки(XMLЗапроса);
			КонецЕсли;
			HTTPОтвет = HTTPConnection.ОтправитьДляОбработки(Запрос);
		КонецЕсли;
		ОтветСервера = HTTPОтвет.ПолучитьТелоКакСтроку();
		Тайминги = HTTPОтвет.Заголовки.Получить("Timings");
	Исключение
		Причина = ОписаниеОшибки();
		ОтветСервера = "";
	КонецПопытки;
	
	Если HTTPОтвет = Неопределено ИЛИ HTTPОтвет.КодСостояния = 500 Тогда 
		ПараметрыОтвета = Новый Структура("КодОтвета, СтруктураОтвета", 500, Новый Структура);
		Если Найти(Причина, "Couldn't resolve host name") ИЛИ НЕ ИнтернетПроверитьПодключение() Тогда
			ПараметрыОтвета.СтруктураОтвета.Вставить("DebugInfo", "The server's response does not meet the standard of service");
			ПараметрыОтвета.СтруктураОтвета.Вставить("Description", "Не доступно подключение к сети Интернет");
		ИначеЕсли Найти(Причина, "Failure when receiving data from the peer") Тогда
			ПараметрыОтвета.СтруктураОтвета.Вставить("DebugInfo", Причина);
			ПараметрыОтвета.СтруктураОтвета.Вставить("Description", "Не доступно подключение к серверу: " + HTTPConnection.Сервер);
		Иначе
			ПараметрыОтвета.СтруктураОтвета.Вставить("DebugInfo", "The server's response does not meet the standard of service");
			ПараметрыОтвета.СтруктураОтвета.Вставить("Description", "Ошибка подключения к серверу");
		КонецЕсли;
		ПараметрыОтвета.СтруктураОтвета.Вставить("ТелоОтветаСтрока", ОтветСервера);
	ИначеЕсли ПолучитьТелоКакДвоичныеДанные И HTTPОтвет.КодСостояния = 200 Тогда
		ОтветСервераДвоичныеДанные = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
		ПараметрыОтвета = Новый Структура("КодОтвета, СтруктураОтвета", 200, Новый Структура);
		ПараметрыОтвета.СтруктураОтвета.Вставить("ДвоичныеДанные", ОтветСервераДвоичныеДанные);
		ПараметрыОтвета.СтруктураОтвета.Вставить("ТелоОтветаСтрока", ОтветСервера);
		Если СтруктураПараметровContentDisposition <> Неопределено Тогда
			ПараметрыОтвета.Вставить("СтруктураПараметровContentDisposition", СтруктураПараметровContentDisposition);
		КонецЕсли;
	Иначе
		ПараметрыОтвета = ПарсерОтветаXML(ОтветСервера); 
	КонецЕсли;
	
	ПараметрыОтвета.Вставить("Timings", Тайминги);

	Возврат ПараметрыОтвета;
	
КонецФункции

// Функция формирует строку заголовка ContentDisposition
//
// Параметры:
//     СтруктураПараметров, тип Структура -  структура данных для ContentDisposition
//
// Возвращаемое значение:
//     ContentDisposition, тип Строка
//
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьContentDisposition(СтруктураПараметров) Экспорт
	
	ЗначениеContentDisposition = "attachment";
	Если СтруктураПараметров <> Неопределено Тогда
		Для Каждого Параметр Из СтруктураПараметров Цикл
			ЗначениеContentDisposition = ЗначениеContentDisposition + "; " + Параметр.Ключ + "=""" + Параметр.Значение + """";
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЗначениеContentDisposition;
	
КонецФункции

// функция формирования XML запроса (для передачи в теле ответа)
//
// параметры:
//	СтруктураХML, тип "структура" - структура xml, где ключ это xmlElementName, а значение это xmlElementValue
//
// возвращаемое значение: ЗаписьXML, где находится построеный XML 
//	
&НаСервереБезКонтекста
Функция СформироватьXMLЗапроса(СтруктураХML, УказыватьТип = Ложь) Экспорт
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	Запись.ЗаписатьОбъявлениеXML();
	
	Запись.ЗаписатьНачалоЭлемента("Request");
	Если СтруктураХML <> Неопределено Тогда	
		Для Каждого Элемент Из СтруктураХML Цикл
			Запись.ЗаписатьНачалоЭлемента(Элемент.Ключ);
			Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
				Запись.ЗаписатьАтрибут("Type","list");
				Массив = Элемент.Значение;
				Для Каждого ЭлементМассива Из Массив Цикл
					Запись.ЗаписатьНачалоЭлемента("item");
					Если УказыватьТип Тогда
						type = ТипЗнч(ЭлементМассива);
						Запись.ЗаписатьАтрибут("Type", Строка(type));
					КонецЕсли;
					Запись.ЗаписатьТекст(ЭлементМассива);
					Запись.ЗаписатьКонецЭлемента();
				КонецЦикла;
			ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ДанныеФормыКоллекция") Тогда
				Запись.ЗаписатьАтрибут("Type","table");
				ТаблицаЗначений = ДанныеФормыВЗначение(Элемент.Значение, Тип("ТаблицаЗначений"));
				Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
					Запись.ЗаписатьНачалоЭлемента("row");
					Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
						ИмяКолонки = Колонка.Имя;
						ЗначениеЯчейки = СтрокаТаблицы[ИмяКолонки];
						type = ТипЗнч(ЗначениеЯчейки);
						Если type <> Тип("Строка") Тогда
							Если type = Тип("Дата") Тогда
								ЗначениеЯчейки = ДатаВФорматеISO8601(ЗначениеЯчейки);
							ИначеЕсли type = Тип("СписокЗначений") Тогда
								СтрокаЗначения = "";
								Для Каждого ЭлементСписка Из ЗначениеЯчейки Цикл
									ElementType = ТипЗнч(ЭлементСписка.Значение); 
									Если УказыватьТип И ElementType <> Тип("Булево") И ElementType <> Тип("Число") И ElementType <> Тип("Строка") И ElementType <> Тип("Дата") Тогда
										СтруктураСсылки = ТипСсылки(ЭлементСписка.Значение);
										ElementType = СтруктураСсылки.СсылкаТип;
									КонецЕсли;
									СтрокаЗначения = СтрокаЗначения + ";" + XMLСтрока(ЭлементСписка.Значение) + "|" + ЭлементСписка.Представление;  
								КонецЦикла;
								ЗначениеЯчейки = СтрокаЗначения;
							Иначе
								Если УказыватьТип И type <> Тип("Булево") И type <> Тип("Число") Тогда
									СтруктураСсылки = ТипСсылки(ЗначениеЯчейки);
									type = СтруктураСсылки.СсылкаТип;
								КонецЕсли;
								ЗначениеЯчейки = XMLСтрока(ЗначениеЯчейки);
							КонецЕсли;
						КонецЕсли;
						Запись.ЗаписатьНачалоЭлемента(ИмяКолонки);
						Если УказыватьТип Тогда
							Запись.ЗаписатьАтрибут("Type", Строка(type));
							Если type = Тип("СписокЗначений") Тогда
								Запись.ЗаписатьАтрибут("ElementType", Строка(ElementType));
							КонецЕсли;
						КонецЕсли;
						Запись.ЗаписатьТекст(ЗначениеЯчейки);
						Запись.ЗаписатьКонецЭлемента();
					КонецЦикла;
					Запись.ЗаписатьКонецЭлемента();
				КонецЦикла;
			Иначе
				ЗначениеЯчейки = Элемент.Значение;
				type = ТипЗнч(ЗначениеЯчейки);
				Если type = Тип("Дата") Тогда
					ЗначениеЯчейки = ДатаВФорматеISO8601(ЗначениеЯчейки);
				ИначеЕсли type = Тип("СписокЗначений") Тогда
					СтрокаЗначения = "";
					Для Каждого ЭлементСписка Из ЗначениеЯчейки Цикл
						ElementType = ТипЗнч(ЭлементСписка.Значение);
						Если УказыватьТип И ElementType <> Тип("Булево") И ElementType <> Тип("Число") И ElementType <> Тип("Строка") И ElementType <> Тип("Дата") Тогда
							СтруктураСсылки = ТипСсылки(ЭлементСписка.Значение);
							ElementType = СтруктураСсылки.СсылкаТип;
						КонецЕсли;
						СтрокаЗначения = СтрокаЗначения + ";" + XMLСтрока(ЭлементСписка.Значение);  
					КонецЦикла;
					ЗначениеЯчейки = СтрокаЗначения;
				Иначе
					ЗначениеЯчейки = XMLСтрока(ЗначениеЯчейки);
				КонецЕсли;
				Если УказыватьТип Тогда
					Запись.ЗаписатьАтрибут("Type", Строка(type));
					Если type = Тип("СписокЗначений") Тогда
						Запись.ЗаписатьАтрибут("ElementType", Строка(ElementType));
					КонецЕсли;
				КонецЕсли;
				Запись.ЗаписатьТекст(ЗначениеЯчейки);	
			КонецЕсли;
			Запись.ЗаписатьКонецЭлемента();
		КонецЦикла;
	КонецЕсли;
	
	Запись.ЗаписатьКонецЭлемента();
	ТекстЗапросаXML = Запись.Закрыть();
	
	Возврат ТекстЗапросаXML;
	
КонецФункции

// функция анализирует XML и приводит значения данных XML к типам данных 1С 
//
// параметры:
//	СтруктураПараметров, тип "структура" -  структура параметров
//	СтруктураТиповПараметров, тип "структура" - структура типов параметров
//
// возвращаемое значение: СтруктураПреобразованныхДанных, тип "структура"
//
&НаСервереБезКонтекста
Функция ПолучитьXMLЗначенияДанных(СтруктураПараметров, СтруктураТиповПараметров) Экспорт
	
	СтруктураПреобразованныхДанных = Новый Структура;
	
	Для Каждого ЭлементТипаПараметра Из СтруктураТиповПараметров Цикл
		ПреобразованноеЗначение = Неопределено;
		
		Если СтруктураПараметров.Свойство(ЭлементТипаПараметра.Ключ) Тогда
			Попытка
				Если ЭлементТипаПараметра.Значение = "Дата" И Найти(СтруктураПараметров[ЭлементТипаПараметра.Ключ], "0001-01-01T00:00:00") <> 0 Тогда
					ПреобразованноеЗначение = '00010101000000';
				Иначе
					ПреобразованноеЗначение = XMLЗначение(Тип(ЭлементТипаПараметра.Значение), СтруктураПараметров[ЭлементТипаПараметра.Ключ]);
				КонецЕсли;
			Исключение
				Если ЭлементТипаПараметра.Значение = "Булево" Тогда
					ПреобразованноеЗначение = Ложь;
				ИначеЕсли ЭлементТипаПараметра.Значение = "Число" Тогда
					ПреобразованноеЗначение = 0;
				ИначеЕсли ЭлементТипаПараметра.Значение = "Строка" Тогда
					ПреобразованноеЗначение = "";
				ИначеЕсли ЭлементТипаПараметра.Значение = "Дата" Тогда
					ПреобразованноеЗначение = '00010101000000';
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
		СтруктураПреобразованныхДанных.Вставить(ЭлементТипаПараметра.Ключ, ПреобразованноеЗначение); 
	КонецЦикла;
	
	Возврат СтруктураПреобразованныхДанных;
	
КонецФункции

// Функция получения ссылки по её ИД
//
// Параметры:
//      CсылкаИД, тип Строка - ИД ссылки
//      СсылкаТип, тип Строка - тип ссылки
//
// Возвращаемое значение:
//      Ссылка, тип - любая ссылка
//
&НаСервереБезКонтекста
Функция ПолучитьСсылкуПоИД(CсылкаИД, СсылкаТип) Экспорт
	
	Попытка
		Ссылка = XMLЗначение(Тип(СсылкаТип), CсылкаИД);
		Если НЕ Ссылка.ПометкаУдаления Тогда
			Возврат Ссылка;		
		Иначе
			Возврат Неопределено;	
		КонецЕсли;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// функция проверяет валидность текущего токена
//
// Параметры:
//      Token, тип Строка - токен
//      ErrorDescription, тип Строка - описание ошибки
//
// Возвращаемое значение:
//      Булево, признак валидности токена
//
&НаКлиенте
Функция ПроверитьТокен(Token = Неопределено, ErrorDescription) Экспорт
	
	Если Token = Неопределено Тогда
		Token = ESDLТокен;
	КонецЕсли;
	
	Если НЕ (Token = Неопределено ИЛИ Token = "") Тогда
		ErrorDescription = "";
		Если ProtectedMode Тогда
			СтрокаЗапроса = "/adl42/hs/api_v1/Service/CheckTokenValidity?Token=" + Token;
			ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса);   
		Иначе
		    СтрокаЗапроса = "/api_v2/AccountUserSessions/CheckTokenValidity?Token=" + Token;
			ПараметрыОтвета = ВыполнитьЗапрос("ESDLCoreHTTP", СтрокаЗапроса);                           
		КонецЕсли;
		
		Если ПараметрыОтвета.КодОтвета = 200 Тогда
			СтруктураТиповПараметров = Новый Структура("TokenValidity", "Булево");
			ПреобразованнаяСтруктураОтвета = ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
			Возврат ПреобразованнаяСтруктураОтвета.TokenValidity;
		Иначе
			ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// функция проверяет доступность службы ADL
//
// Параметры:
//      УИДОбъекта, тип УИД - уник. ид. формы
//      Запуск, тип Булево - признак запуска программы
//
// Возвращаемое значение:
//      Булево, признак валидности токена
//
&НаКлиенте
Функция СлужбаADL42Доступна(УИДОбъекта, Запуск = Ложь) Экспорт
	                            
	СтрокаЗапроса = "/adl42/hs/api_v1/Service/isRunning";
	ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса);                   
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		СтруктураТиповПараметров = Новый Структура("isRunning, ProtectedMode", "Булево", "Булево");
		ПреобразованнаяСтруктураОтвета = ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		ProtectedMode = ПреобразованнаяСтруктураОтвета.ProtectedMode;
		isRunning = ПреобразованнаяСтруктураОтвета.isRunning;
		Если НЕ isRunning И НЕ (Запуск И ProtectedMode) Тогда
			ТекстПредупреждения = "Извините, сервис «Загрузка документов 42» временно недоступен." + Символы.ПС + "Программа работает в ограниченном режиме!" + 
			?(Запуск, "", (Символы.ПС + "Пожалуйста, попробуйте позже"));
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = ТекстПредупреждения;
			//СообщениеПользователю.ИдентификаторНазначения = УИДОбъекта;
			СообщениеПользователю.Сообщить();
		КонецЕсли;
	Иначе
		ТекстПредупреждения = "Ошибка при подключении: " + ПараметрыОтвета.СтруктураОтвета.Description;
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст =ТекстПредупреждения;
		СообщениеПользователю.ИдентификаторНазначения = УИДОбъекта;
		СообщениеПользователю.Сообщить();
		isRunning = Ложь;
	КонецЕсли;
	
	Если НЕ Запуск Тогда 
		ПоискНезагруженных();	
	КонецЕсли;

	Возврат isRunning;
	
КонецФункции

// функция парсинга заголовка "ContentDisposition"
//
// параметры:
//	СтрокаContentDisposition, тип "строка" - собственно и сам заголовок как строка	
//
// возвращаемое значение: структура параметров заголовка
//
&НаКлиентеНаСервереБезКонтекста
Функция ПарсерContentDisposition(СтрокаContentDisposition) Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	МассивСтрокПараметров = СтрРазделить(СтрокаContentDisposition, ";", Ложь); 

	Для Каждого СтрокаПараметра Из МассивСтрокПараметров Цикл
		ПозицияРазделителя = Найти(СтрокаПараметра, "=");
		Если ПозицияРазделителя > 0 Тогда
			ИмяПараметра = Лев(СтрокаПараметра,ПозицияРазделителя-1); 
			ЗначениеПараметра = Сред(СтрокаПараметра, ПозицияРазделителя+1);
			ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, """", "");
			Попытка
				СтруктураПараметров.Вставить(ИмяПараметра,ЗначениеПараметра); 
			Исключение
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Функция разбивает строку по разделителям, лимит определяет максимальное количество слов
// аналог split в PHP
//
// параметры:
//	СимволыРазделители, тип "строка" - строка с символами разделителями
//	Строка, тип "строка" - строка для разбиения
//	Лимит, тип "число" - количество получаемых слов из строки
//
// возвращаемое значение: массив слов 
//
&НаКлиентеНаСервереБезКонтекста
Функция РазбитьСтроку(СимволыРазделители, Строка, Лимит = Неопределено) Экспорт
	
	НоваяСтрока = Строка;
	МассивСлов = Новый Массив;
	ИщемНачало = Истина;
	ТекСлово = "";
	Если Найти(Строка,СимволыРазделители) = 1 Тогда
		Строка = Сред(Строка,2);
	КонецЕсли;		
	Для НомерСимволаСтроки = 1 по СтрДлина(Строка) цикл
		ТекСимвол = Сред(Строка,НомерСимволаСтроки,1);
		Если Найти(СимволыРазделители, ТекСимвол) = 0 Тогда
			ТекСлово = ТекСлово + ТекСимвол;
			ИщемНачало = Ложь;
			продолжить;
		ИначеЕсли ИщемНачало Тогда
			МассивСлов.Добавить("");
			Если МассивСлов.Количество() = Лимит Тогда
				Возврат МассивСлов;
			КонецЕсли;
			продолжить;
		Иначе
			МассивСлов.Добавить(ТекСлово);
			Если МассивСлов.Количество() = Лимит Тогда
				Возврат МассивСлов;
			КонецЕсли;
			ТекСлово = "";
			ИщемНачало = Истина;
		КонецЕсли;
	конеццикла;
	Если Не ИщемНачало Тогда
		МассивСлов.Добавить(СокрЛП(ТекСлово));
	КонецЕсли;
	
	Возврат МассивСлов;
	
конецфункции

&НаСервереБезКонтекста
Функция ПарсерДокументаXML(ТекстXML, СтараяВерсия, Тип="") Экспорт
	
	Перем ТЧ;
	
	СтруктураДанныхXML = Новый Структура();
	ЧтениеXML = Новый ЧтениеXML;
	
	ТекстXML = СтрЗаменить(ТекстXML, "<_", "<");
	ТекстXML = СтрЗаменить(ТекстXML, "</_", "</");
	// исправляем глюкнутую xml, созданную Recognition42!!!
	ПозицияНачалаНеверногоТега = Найти(ТекстXML, "<form:Documents");	
	Если ПозицияНачалаНеверногоТега > 0 Тогда
		ПозицияКонцаНеверногоТега = Найти(ТекстXML, """>") + 2;
		ТекстДляЗамены = Сред(ТекстXML, ПозицияНачалаНеверногоТега, ПозицияКонцаНеверногоТега - ПозицияНачалаНеверногоТега);
		ТекстXML = СтрЗаменить(ТекстXML, ТекстДляЗамены, "");
		ТекстXML = СтрЗаменить(ТекстXML, "</form:Documents>", "");
	КонецЕсли;
	ТекстТипа = Тип + ":_" + Тип;
	ПозицияНачалаНеверногоТега = Найти(ТекстXML, "<" + ТекстТипа);	
	Если ПозицияНачалаНеверногоТега > 0 Тогда 
		ПозицияКонцаНеверногоТега = Найти(ТекстXML, """>") + 2;
		ТекстДляЗамены = Сред(ТекстXML, ПозицияНачалаНеверногоТега, ПозицияКонцаНеверногоТега - ПозицияНачалаНеверногоТега);
		ТекстXML = СтрЗаменить(ТекстXML, ТекстДляЗамены, "");
		ТекстXML = СтрЗаменить(ТекстXML, "</" + ТекстТипа + ">", "");
	КонецЕсли;
	Пока Найти(ТекстXML, Символы.ПС + Символы.ПС)> 0 Цикл
    	ТекстXML = СтрЗаменить(ТекстXML, Символы.ПС + Символы.ПС,  "");
	КонецЦикла;
	
	Если Тип = "SC" И Найти(ТекстXML, "Рayer>")>0 Тогда
		ТекстXML = СтрЗаменить(ТекстXML, "Рayer>", "IssCompany>");	
		ТекстXML = СтрЗаменить(ТекстXML, "Sum>", "SumWithTax>");	
		ТекстXML = СтрЗаменить(ТекстXML, "TaxTotal>", "SumOfTaxes>");	
		ТекстXML = СтрЗаменить(ТекстXML, "TotalPayment>", "Sum>");	
		ТекстXML = СтрЗаменить(ТекстXML, "SumTax>", "TaxSum>");	
	КонецЕсли;
	
	Попытка
		
		// создание колонок ТЧ
		ЧтениеXML.УстановитьСтроку(ТекстXML);
		Пока ЧтениеXML.Прочитать() Цикл 
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И (ЧтениеXML.Имя = "tabrow" ИЛИ ЧтениеXML.Имя = "Table1") Тогда	
				ТЧ = Новый ТаблицаЗначений();
				Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И (ЧтениеXML.Имя = "tabrow" ИЛИ ЧтениеXML.Имя = "Table1")) Цикл 
					Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						ТЧ.Колонки.Добавить(ЧтениеXML.Имя);
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТЧ <> Неопределено И ТЧ.Колонки.Количество() > 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ЧтениеXML.Закрыть();
		
		// заполнение шапки, табличной части
		//ЧтениеXML.ОткрытьФайл(ИмяФайла);

		Если НЕ СтараяВерсия Тогда
			ЧтениеXML.УстановитьСтроку(ТекстXML);
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И (ЧтениеXML.Имя = "document" 
					ИЛИ ЧтениеXML.Имя = "Товарная_накладная" ИЛИ ЧтениеXML.Имя = "Акт" ИЛИ ЧтениеXML.Имя = "Паспорт_РФ"
					ИЛИ ЧтениеXML.Имя = "Счет-Фактура" ИЛИ ЧтениеXML.Имя = "УПД" ИЛИ ЧтениеXML.Имя = "Счет" ИЛИ ЧтениеXML.Имя = "Раздел_документа_1") Тогда
					ИмяДокумента = ЧтениеXML.Имя;
					Шапка = Новый Структура();
					Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = ИмяДокумента) Цикл 
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Table1" Тогда
							СтрокаТЧ = ТЧ.Добавить();
							Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "Table1") Цикл 
								Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
									ИмяРеквизита = ЧтениеXML.Имя;
									ЧтениеXML.Прочитать();
									Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
										СтрокаТЧ[ИмяРеквизита] = ЧтениеXML.Значение;
									Иначе
										СтрокаТЧ[ИмяРеквизита] = "";
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
								ИмяРеквизита = ЧтениеXML.Имя;
								Шапка.Вставить(ИмяРеквизита);
								Шапка[ИмяРеквизита] = "";
								Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = ИмяРеквизита) Цикл 
									Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
										Шапка[ИмяРеквизита] = ЧтениеXML.Значение;
									КонецЕсли;
								КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;	
			КонецЦикла;
			ЧтениеXML.Закрыть();
			
			Если Шапка <> Неопределено И Шапка.Свойство("TaxSum") Тогда
				Шапка.Вставить("SumOfTaxes", Шапка.TaxSum); 
			КонецЕсли;
		
		Иначе
			
			ЧтениеXML.УстановитьСтроку(ТекстXML);
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "tabpart" И  ТЧ <> Неопределено И ТЧ.Колонки.Количество() > 0 Тогда
					Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "tabpart") Цикл 
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "tabrow" Тогда
							СтрокаТЧ = ТЧ.Добавить();
							Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "tabrow") Цикл 
								Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
									ИмяРеквизита = ЧтениеXML.Имя;
									ЧтениеXML.Прочитать();
									Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
										СтрокаТЧ[ИмяРеквизита] = ЧтениеXML.Значение;
									Иначе
										СтрокаТЧ[ИмяРеквизита] = "";
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "head"  Тогда
					Шапка = Новый Структура();
					Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "head") Цикл 
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
							ИмяРеквизита = ЧтениеXML.Имя;
							Шапка.Вставить(ИмяРеквизита);
							ЧтениеXML.Прочитать();
							Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
								Шапка[ИмяРеквизита] = ЧтениеXML.Значение;
							Иначе
								Шапка[ИмяРеквизита] = "";
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			ЧтениеXML.Закрыть();
			
			
		КонецЕсли;

	Исключение
	КонецПопытки;
			
	СтруктураДанныхXML.Вставить("ТЧ", ТЧ);
    СтруктураДанныхXML.Вставить("Шапка", Шапка);
	
	Возврат СтруктураДанныхXML;
	
КонецФункции

// Функция удаляет лишние символы из строки для преобразования
//
// Параметры:
//      СтрокаДляПодготовки, строка - преобразуемая строка
//      БудущийТип, строка - тип к которому будет выполнятся преобразование строки
//
// Возвращаемое значение:
//		Строка для преобразования
//
&НаКлиентеНаСервереБезКонтекста
Функция ПодготовитьСтрокуКПереводуВТип(СтрокаДляПодготовки, БудущийТип) Экспорт
	
	ДлинаСтроки = СтрДлина(СтрокаДляПодготовки);
	Пока Истина Цикл
		СтрокаДляПодготовки = СтрЗаменить(СтрокаДляПодготовки, " ", "");
		СтрокаДляПодготовки = СтрЗаменить(СтрокаДляПодготовки, "^", "");
		СтрокаДляПодготовки = СтрЗаменить(СтрокаДляПодготовки, Символы.НПП, "");
		СтрокаДляПодготовки = СтрЗаменить(СтрокаДляПодготовки, Символы.ПС, "");
		СтрокаДляПодготовки = СтрЗаменить(СтрокаДляПодготовки, Символы.Таб, "");
		Если ДлинаСтроки = СтрДлина(СтрокаДляПодготовки) Тогда
			Прервать;	
		КонецЕсли;
		ДлинаСтроки = СтрДлина(СтрокаДляПодготовки);
	КонецЦикла;
	
	ЗаменаПроизвелась = Ложь;
	Если БудущийТип = "Число" Тогда
		Пока Истина Цикл
			Если Найти(СтрокаДляПодготовки, ",") <> 0 Тогда
				СтрокаДляПодготовки = СтрЗаменить(СтрокаДляПодготовки, ",", ".");
				ЗаменаПроизвелась = Истина;
			КонецЕсли;
			СтрокаДляПодготовки = СтрЗаменить(СтрокаДляПодготовки, ",,", ".");
			СтрокаДляПодготовки = СтрЗаменить(СтрокаДляПодготовки, "..", ".");

			Если ДлинаСтроки = СтрДлина(СтрокаДляПодготовки) И НЕ ЗаменаПроизвелась Тогда
				Прервать;	
			КонецЕсли;
			ЗаменаПроизвелась = Ложь;
			ДлинаСтроки = СтрДлина(СтрокаДляПодготовки);
		КонецЦикла;
		
	ИначеЕсли БудущийТип = "Дата" Тогда
		Пока Истина Цикл
			Если Найти(СтрокаДляПодготовки, ",") <> 0 Тогда
				СтрокаДляПодготовки = СтрЗаменить(СтрокаДляПодготовки, ",", ".");
				ЗаменаПроизвелась = Истина;
			КонецЕсли;
			Если НЕ ЗаменаПроизвелась Тогда
				Прервать;	
			КонецЕсли;
			ДлинаСтроки = СтрДлина(СтрокаДляПодготовки);
			ЗаменаПроизвелась = Ложь;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтрокаДляПодготовки;
	
КонецФункции

// Функция преобразует строку различных форматов в дату
//
// Параметры:
//      СтрокаДаты, тип Строка - строка с датой
// Возвращаемое значение
// 		Преобразованная дата или Неопределено если преобразование к дате не удалось
//
&НаСервереБезКонтекста
Функция СтрокаДатыВДату(Знач СтрокаДаты) Экспорт                                 	
	
	СтрокаДаты = СтрЗаменить(СтрокаДаты,"/",".");
	СтрокаДаты = СтрЗаменить(СтрокаДаты,"'"," ");
	СтрокаДаты = СтрЗаменить(СтрокаДаты,"""","");                            
	СтрокаДаты = СтрЗаменить(СтрокаДаты,"«"," ");
	СтрокаДаты = СтрЗаменить(СтрокаДаты,"»"," ");
	СтрокаДаты = СтрЗаменить(СтрокаДаты,"  ","");
	СтрокаДаты = СтрЗаменить(СтрокаДаты,"  ","");   
	
	Попытка
		ДатаЗнч = Дата(СтрокаДаты + " 00:00:00");
		Возврат ДатаЗнч;
	Исключение
		
		Попытка
			ДатаЗнч = XMLЗначение(Тип("Дата"), СтрокаДаты);
			Возврат ДатаЗнч;
		Исключение
		КонецПопытки;
		
		Попытка

			// The formats are as follows. Exactly the components shown here must be present, with exactly this punctuation.
			//Note that the "T" appears literally in the string, to indicate the beginning of the time element, as specified in ISO 8601.
			// Year:
			// YYYY (eg 1997)
			// Year and month:
			// YYYY-MM (eg 1997-07)
			// Complete date:
			// YYYY-MM-DD (eg 1997-07-16)
			// Complete date plus hours and minutes:
			// YYYY-MM-DDThh:mmTZD (eg 1997-07-16T19:20+01:00)
			// Complete date plus hours, minutes and seconds:
			// YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)
			// Complete date plus hours, minutes, seconds and a decimal fraction of a
			//second
			// YYYY-MM-DDThh:mm:ss.sTZD (eg 1997-07-16T19:20:30.45+01:00)
			Если СтрДлина(СтрокаДаты) = 4 и ТолькоЦифры(СтрокаДаты) Тогда
				// Year:
				// YYYY (eg 1997)
				Возврат Дата(СтрокаДаты,1,1);
			ИначеЕсли СтрДлина(СтрокаДаты) = 7 и ТолькоЦифры(СтрЗаменить(СтрокаДаты,"-","")) И ТолькоЦифры(Лев(СтрокаДаты,4)) Тогда
				// Year and month:
				// YYYY-MM (eg 1997-07)
				СтрокаДаты = СтрЗаменить(СтрокаДаты,"-","");
				СтрокаДаты = СтрокаДаты+"01";
				Возврат Дата(СтрокаДаты);
			ИначеЕсли СтрДлина(СтрокаДаты) = 8 и ТолькоЦифры(СтрокаДаты) Тогда
				// YYYYMMDD
				Возврат Дата(СтрокаДаты);
			ИначеЕсли СтрДлина(СтрокаДаты) = 10 и ТолькоЦифры(СтрЗаменить(СтрокаДаты,"-","")) И ТолькоЦифры(лев(СтрокаДаты,4)) И ТолькоЦифры(Сред(СтрокаДаты,6,2)) И ТолькоЦифры(Сред(СтрокаДаты,9,2)) Тогда
				// Complete date:
				// YYYY-MM-DD (eg 1997-07-16)
				СтрокаДаты = СтрЗаменить(СтрокаДаты,"-","");
				Возврат Дата(СтрокаДаты);
			ИначеЕсли СтрДлина(СтрокаДаты) > 10 и ТолькоЦифры(СтрЗаменить(Лев(СтрокаДаты,10),"-",""))// первая часть предположительно дата
				И (Сред(СтрокаДаты,11,1) = "T") // Разделитель даты и времени на своем месте
				И (Найти(СтрокаДаты,"Z") > 0 или Найти(СтрокаДаты,"+") > 0 или Найти(СтрокаДаты,"-") > 0) // присутствует TZD
				Тогда
				// Complete date plus hours and minutes:
				// YYYY-MM-DDThh:mmTZD (eg 1997-07-16T19:20+01:00)
				// Complete date plus hours, minutes and seconds:
				// YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)
				// Complete date plus hours, minutes, seconds and a decimal fraction of a
				//second
				// YYYY-MM-DDThh:mm:ss.sTZD (eg 1997-07-16T19:20:30.45+01:00)
				// Выделим Дату в формат YYYYMMDD
				ТолькоДата = СтрЗаменить(Лев(СтрокаДаты,10),"-","");
				// Выделим Время в форматы hh:mm или hh:mm:ss или hh:mm:ss.s
				СимвZ = Найти(Сред(СтрокаДаты,12,20),"Z");
				СимвПлюс = Найти(Сред(СтрокаДаты,12,20),"+");
				СимвМинус = Найти(Сред(СтрокаДаты,12,20),"-");
				ДлинаВремени = ?(СимвZ > 0,СимвZ, ?(СимвПлюс > 0, СимвПлюс, СимвМинус))-1;
				ТолькоВремя = Сред(СтрокаДаты,12, ДлинаВремени);
				Часы = Лев(ТолькоВремя,2);
				Минуты = Сред(ТолькоВремя,4,2);
				Секунды = Сред(ТолькоВремя,7,2);
				
				// Дыделим добавку часового пояса
				Если СимвZ > 0 Тогда
					ДобавкаЧасов = 0;
					ДобавкаМинут = 0;
				ИначеЕсли СимвПлюс > 0 Тогда
					ДобавкаЧасов = ?(ТолькоЦифры(Сред(СтрокаДаты,СимвПлюс+12,2)), Число(Сред(СтрокаДаты,СимвПлюс+12,2)), 0);
					ДобавкаЧасов = ?(ТолькоЦифры(Сред(СтрокаДаты,СимвПлюс+15,2)), Число(Сред(СтрокаДаты,СимвПлюс+15,2)), 0);
				Иначе
					ДобавкаЧасов = ?(ТолькоЦифры(Сред(СтрокаДаты,СимвПлюс+12,2)), Число(Сред(СтрокаДаты,СимвПлюс+12,2))*(-1), 0);
					ДобавкаЧасов = ?(ТолькоЦифры(Сред(СтрокаДаты,СимвПлюс+15,2)), Число(Сред(СтрокаДаты,СимвПлюс+15,2))*(-1), 0);
				КонецЕсли;
				
				ДатаЗнч = Дата(ТолькоДата+Часы+Минуты+Секунды);
				ДатаЗнч = ДатаЗнч + (ДобавкаМинут*60 + ДобавкаЧасов*60*60);
				Возврат ДатаЗнч;
				
			Иначе
				// Пробуем формат GNU
				// Сначала разобъем на блоки по пробелу
				МассивБлоков = новый Массив;
				ИщемНачало = Истина;
				ТекБлок = "";
				СтрокаДаты = нрег(СтрокаДаты);
				Для НомерСимволаСтроки = 1 по СтрДлина(СтрокаДаты) цикл
					ТекСимвол = Сред(СтрокаДаты,НомерСимволаСтроки,1);
					Если Не (ТекСимвол = " " или ТекСимвол = ",") Тогда
						ТекБлок = ТекБлок + ТекСимвол;
						ИщемНачало = Ложь;
						продолжить;
					ИначеЕсли ИщемНачало Тогда
						продолжить;
					Иначе
						МассивБлоков.Добавить(ТекБлок);
						ТекБлок = "";
						ИщемНачало = Истина;
					КонецЕсли;
				конеццикла;
				Если Не ИщемНачало Тогда
					МассивБлоков.Добавить(ТекБлок);
				КонецЕсли;
				// Теперь МассивБлоков содержит блоки строки даты
				
				// Добавим литералы днейнедели и месяце (можно добавлять еще языки)
				Мес = новый Соответствие;
				Мес.Вставить("jan",1);
				Мес.Вставить("feb",2);
				Мес.Вставить("mar",3);
				Мес.Вставить("apr",4);
				Мес.Вставить("may",5);
				Мес.Вставить("jun",6);
				Мес.Вставить("jul",7);
				Мес.Вставить("aug",8);
				Мес.Вставить("sep",9);
				Мес.Вставить("sept",9);
				Мес.Вставить("oct",10);
				Мес.Вставить("nov",11);
				Мес.Вставить("dec",12);
				
				Мес.Вставить("jan.",1);
				Мес.Вставить("feb.",2);
				Мес.Вставить("mar.",3);
				Мес.Вставить("apr.",4);
				Мес.Вставить("may.",5);
				Мес.Вставить("jun.",6);
				Мес.Вставить("jul.",7);
				Мес.Вставить("aug.",8);
				Мес.Вставить("sep.",9);
				Мес.Вставить("sept.",9);
				Мес.Вставить("oct.",10);
				Мес.Вставить("nov.",11);
				Мес.Вставить("dec.",12);
				
				Мес.Вставить("january",1);
				Мес.Вставить("february",2);
				Мес.Вставить("febr",2);
				Мес.Вставить("march",3);
				Мес.Вставить("april",4);
				Мес.Вставить("may",5);
				Мес.Вставить("june",6);
				Мес.Вставить("july",7);
				Мес.Вставить("august",8);
				Мес.Вставить("september",9);
				Мес.Вставить("sept",9);
				Мес.Вставить("october",10);
				Мес.Вставить("november",11);
				Мес.Вставить("december",12);
				
				Мес.Вставить("январь",1);
				Мес.Вставить("февраль",2);
				Мес.Вставить("март",3);
				Мес.Вставить("апрель",4);
				Мес.Вставить("май",5);
				Мес.Вставить("июнь",6);
				Мес.Вставить("июль",7);
				Мес.Вставить("август",8);
				Мес.Вставить("сентябрь",9);
				Мес.Вставить("октябрь",10);
				Мес.Вставить("ноябрь",11);
				Мес.Вставить("декабрь",12);
								
				Мес.Вставить("января",1);
				Мес.Вставить("февраля",2);
				Мес.Вставить("марта",3);
				Мес.Вставить("апреля",4);
				Мес.Вставить("мая",5);
				Мес.Вставить("июня",6);
				Мес.Вставить("июля",7);
				Мес.Вставить("августа",8);
				Мес.Вставить("сентября",9);
				Мес.Вставить("октября",10);
				Мес.Вставить("ноября",11);
				Мес.Вставить("декабря",12);
				
				Мес.Вставить("янв",1);
				Мес.Вставить("фев",2);
				Мес.Вставить("мар",3);
				Мес.Вставить("апр",4);
				Мес.Вставить("май",5);
				Мес.Вставить("июн",6);
				Мес.Вставить("июл",7);
				Мес.Вставить("авг",8);
				Мес.Вставить("сен",9);
				Мес.Вставить("окт",10);
				Мес.Вставить("ноя",11);
				Мес.Вставить("дек",12);
				
				Мес.Вставить("янв.",1);
				Мес.Вставить("фев.",2);
				Мес.Вставить("мар.",3);
				Мес.Вставить("апр.",4);
				Мес.Вставить("май.",5);
				Мес.Вставить("июн.",6);
				Мес.Вставить("июл.",7);
				Мес.Вставить("авг.",8);
				Мес.Вставить("сен.",9);
				Мес.Вставить("окт.",10);
				Мес.Вставить("ноя.",11);
				Мес.Вставить("дек.",12);
				
				
				ДНед = новый Массив;
				ДНед.Добавить("monday");
				ДНед.Добавить("tuesday");
				ДНед.Добавить("wednesday");
				ДНед.Добавить("thursday");
				ДНед.Добавить("friday");
				ДНед.Добавить("saturday");
				ДНед.Добавить("sunday");
				ДНед.Добавить("mon");
				ДНед.Добавить("tue");
				ДНед.Добавить("wed");
				ДНед.Добавить("thu");
				ДНед.Добавить("fri");
				ДНед.Добавить("sat");
				ДНед.Добавить("sun");
				
				
				ДНед.Добавить("понедельник");
				ДНед.Добавить("вторник");
				ДНед.Добавить("среда");
				ДНед.Добавить("четверг");
				ДНед.Добавить("пятница");
				ДНед.Добавить("суббота");
				ДНед.Добавить("воскресенье");
				ДНед.Добавить("пн");
				ДНед.Добавить("вт");
				ДНед.Добавить("ср");
				ДНед.Добавить("чт");
				ДНед.Добавить("пт");
				ДНед.Добавить("сб");
				ДНед.Добавить("вс");
				
				// Текущие данные
				День = Неопределено;
				Месяц = Неопределено;
				Год = Неопределено;
				Часов = Неопределено;
				Минут = Неопределено;
				Секунд = Неопределено;
				
				ЗнакДобавки = 1;
				ДобавкаЧасов = Неопределено;
				ДобавкаМинут = Неопределено;
				ЧасовойПояс = Неопределено;
				
				БлокВремени = Неопределено;
				
				БлокВремениСЧасовымПоясом = Неопределено;
				БлокДатыСРазделителем = Неопределено;
				
				ЧислаХ = новый массив; // для неопределенных числовых значений
				
				Для каждого Блок из МассивБлоков цикл
					Если Найти(Блок,":") > 0 и Найти(Блок,"+") = 0 и Найти(Блок,"-") = 0 Тогда
						// Это блок времени (исключили часовой пояс вида +hh:mm и -hh:mm)
						// 20:02:00.000000
						// 20:02
						// 8:02pm
						БлокВремени = Блок;
					ИначеЕсли ДНед.Найти(Блок) <> Неопределено Тогда
						// Это блок дня недели - просто опускаем (его необходимо исключить, чтобы не мешал)
						//продолжить;
					ИначеЕсли НЕ Мес[Блок] = Неопределено Тогда
						// Нашли месяц
						Месяц = Мес[Блок];
						// продолжить;
					ИначеЕсли Найти(Блок, "gmt") > 0 или Найти(Блок, "z") > 0 или Найти(Блок, "utc") > 0 Тогда
						// Нашли блок часового пояса для варианто UTC, UTC+hhmm, UTC-hh:mm
						ЧасовойПояс = Блок;
					ИначеЕсли Лев(Блок,1) = "-" или Лев(Блок,1) = "+" И ТолькоЦифры(СтрЗаменить(Блок,":","")) Тогда
						// Это должен быть только часовой пояс вида +hhmm, -hhmm, +hh:mm, -hh:mm
						ЧасовойПояс = "" + ЧасовойПояс + Блок;
					ИначеЕсли Найти(Блок,":") > 0 и (Найти(Блок, "-") > 0 или Найти(Блок, "+") > 0) Тогда
						// Это время вместе с добавкой вида 20:02-0500 # In EST (U.S. Eastern Standard Time).
						БлокВремениСЧасовымПоясом = Блок;
						Если Найти(БлокВремениСЧасовымПоясом,"-") Тогда
							ЗнакДобавки = -1;
						КонецЕсли;
						
						МассивВремениИДобавки = СтрРазделить(БлокВремениСЧасовымПоясом, "+-", Истина); 
						БлокВремени = МассивВремениИДобавки[0];
						ЧасовойПояс = "" + ?(ЗнакДобавки > 0,"+","-")+МассивВремениИДобавки[1];
						
					ИначеЕсли (Найти(Блок,"-") > 0 И ТолькоЦифры(СтрЗаменить(Блок,"-",""))) 
						Или (Найти(Блок,"/") > 0 И ТолькоЦифры(СтрЗаменить(Блок,"/",""))) 
						Или (Найти(Блок,"\") > 0 и ТолькоЦифры(СтрЗаменить(Блок,"\","")))
						или (Найти(Блок,".") > 0 и ТолькоЦифры(СтрЗаменить(Блок,".",""))) Тогда
						// Это дата формата
						//   1972-09-24 # ISO 8601.
						//72-9-24 # Assume 19xx for 69 through 99,
						//  # 20xx for 00 through 68.
						//72-09-24 # Leading zeros are ignored.
						//9/24/72 # Common U.S. writing.
						// 01.05.02 - тоже возможно проверить
						// 9/24 - без года - день в конце, но с разделителем
						
						
						БлокДатыСРазделителем = Блок;
					ИначеЕсли ТолькоЦифры(Блок) Тогда
						// остались день месц год - день должен быть первым при этом
						// Если месяц числовой то порядок следования год-месяц-день или месяц-день
						// а Если прописью то допустимы
						// day month year
						// day month
						// month day year
						// day-month-year
						//
						//Or, omitting the year:
						// month day
						// С этим разберемся потом
						ЧислаХ.Добавить(Число(Блок));
					ИначеЕсли (Найти(Блок,"-") > 0)
						или (Найти(Блок,"/") > 0)
						или (Найти(Блок,"\") > 0)
						или (Найти(Блок,".") > 0) Тогда
						// может такое 24-sep-72 24/sep/72 24\sep\72 24.sep.72
						БлокДатыСРазделителем = Блок;
					КонецЕсли;
				КонецЦикла;
				// Теперь можно смотреть что есть.
				
				// Сначала дата
				Если БлокДатыСРазделителем <> Неопределено Тогда
					Если (Найти(Блок,"/") > 0 и ТолькоЦифры(СтрЗаменить(Блок,"/",""))) Тогда
						// Амеркианский стандарт 9/24/72 # Common U.S. writing.
						
						МассивДаты = СтрРазделить(БлокДатыСРазделителем, "/.\", Истина); 

						КвоЭл = МассивДаты.Количество();
						Если КвоЭл > 2 Тогда
							Год = МассивДаты[2];
							Месяц = МассивДаты[0];
							День = МассивДаты[1];
						Иначе
							Год = Год(ТекущаяДата());
							Месяц = МассивДаты[0];
							День = МассивДаты[1];
						КонецЕсли;
					Иначе

						МассивДаты = СтрРазделить(БлокДатыСРазделителем, "-.", Истина); 

						Если МассивДаты.Количество() > 2 Тогда
							// Дата с годом
							Если НЕ ТолькоЦифры(МассивДаты[1]) Тогда
								//месяц прописью -формат день-месц-год
								Месяц = Мес[МассивДаты[1]];
								Год = МассивДаты[2];
								День = МассивДаты[0];
							Иначе
								// месяц числом - формат год-месяц-день
								Год = МассивДаты[0];
								Месяц = МассивДаты[1];
								День = МассивДаты[2];
							КонецЕсли;
						Иначе
							// Дата без года
							Если НЕ Мес[МассивДаты[1]] = Неопределено Тогда
								// месяц прописью на втором месте - на первом день
								Месяц = Мес[МассивДаты[1]];
								День = МассивДаты[0];
								Год = Год(ТекущаяДата());
							ИначеЕсли НЕ Мес[МассивДаты[0]] = Неопределено Тогда
								Месяц = Мес[МассивДаты[0]];
								День = МассивДаты[1];
								Год = Год(ТекущаяДата());
							Иначе // месяц числом без года
								Год = Год(ТекущаяДата());
								Месяц = МассивДаты[0];
								День = МассивДаты[1];
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли Месяц <> Неопределено Тогда
					// Месяц прописью - ищем день и год в ЧислаХ
					День = ЧислаХ[0];
					Если ЧислаХ.Количество() > 1 Тогда
						Год = ЧислаХ[1];
					Иначе
						Год = Год(ТекущаяДата());
					КонецЕсли;
				Иначе // День месяц и годв числаХ
					КвоЧисел = ЧислаХ.Количество();
					Если КвоЧисел > 2 Тогда
						// Год месяц день - хотя такого недолжно быть
						Год = ЧислаХ[0];
						Месяц = ЧислаХ[1];
						День = ЧислаХ[2];
					ИначеЕсли КвоЧисел > 1 Тогда
						// Год опущен Месяц - день
						Год = Год(ТекущаяДата());
						Месяц = ЧислаХ[0];
						День = ЧислаХ[1];
					ИначеЕсли КвоЧисел > 0 Тогда
						// Опущен год и месяц - тоже не должно быть
						День = ЧислаХ[0];
						Год = Год(ТекущаяДата());
						Месяц = Месяц(ТекущаяДата());
					Иначе
						// Опущена вся дата
						День = День(ТекущаяДата());
						Год = Год(ТекущаяДата());
						Месяц = Месяц(ТекущаяДата());
					КонецЕсли;
				КонецЕсли;
				
				// Теперь время
				Если БлокВремени <> Неопределено Тогда
					БлокВремени = СтрЗаменить(БлокВремени, "z", "");
					БлокВремени = СтрЗаменить(БлокВремени, "gmt", "");
					БлокВремени = СтрЗаменить(БлокВремени, "utc", "");
					
					МассивВремени = СтрРазделить(БлокВремени, ":", Ложь); 

					КвоЭлементов = МассивВремени.Количество();
					Если КвоЭлементов > 2 Тогда
						// часы минуты секунды
						Часов = МассивВремени[0];
						СекТекст = Сред(МассивВремени[2],3,4);
						Если Найти(СекТекст,"am") > 0 или Найти(СекТекст,"a.m.") > 0 Тогда
							Часов = ?(Число(Часов) = 12, 0, Число(Часов));
						ИначеЕсли Найти(СекТекст,"pm") > 0 или Найти(СекТекст,"p.m.") > 0 Тогда
							Часов = ?(Число(Часов) = 12, 12, Число(Часов)+12);
						КонецЕсли;
						Минут = МассивВремени[1];
						Секунд = Лев(МассивВремени[2],2);
						
					ИначеЕсли КвоЭлементов > 1 Тогда
						Часов = МассивВремени[0];
						СекТекст = Сред(МассивВремени[1],3,4);
						Если Найти(СекТекст,"am") > 0 или Найти(СекТекст,"a.m.") > 0 Тогда
							Часов = ?(Число(Часов) = 12, 0, Число(Часов));
						ИначеЕсли Найти(СекТекст,"pm") > 0 или Найти(СекТекст,"p.m.") > 0 Тогда
							Часов = ?(Число(Часов) = 12, 12, Число(Часов)+12);
						КонецЕсли;
						Минут = Лев(МассивВремени[1],2);
						Секунд = 0;
					Иначе
						// только часы - не может быть, но пробуем
						Часов = МассивВремени[0];
						Минут = 0;
						Секунд = 0;
					КонецЕсли;
				Иначе
					// время опущено - ставим 0
					Часов = 0;
					Минут = 0;
					Секунд = 0;
					
				КонецЕсли;
				
				// Теперь часовой пояс
				ЧасовойПояс = СтрЗаменить(ЧасовойПояс,"gmt","");
				ЧасовойПояс = СтрЗаменить(ЧасовойПояс,"utc","");
				ЧасовойПояс = СтрЗаменить(ЧасовойПояс,"z","");
				ЧасовойПояс = СтрЗаменить(ЧасовойПояс,":","");
				Если СтрДлина(ЧасовойПояс)<5 Тогда
					// неизвестный формат пояса
					ДобавкаЧасов = 0;
					ДобавкаМинут = 0;
				Иначе
					Если Лев(ЧасовойПояс,1) = "+" Тогда
						ЗнакДобавки = 1;
					ИначеЕсли Лев(ЧасовойПояс,1) = "-" Тогда
						ЗнакДобавки = -1;
					Иначе
						// неверный формат добавки
						ДобавкаЧасов = 0;
						ДобавкаМинут = 0;
					КонецЕсли;
					ДобавкаЧасов = Число(Сред(ЧасовойПояс,2,2))*ЗнакДобавки;
					ДобавкаМинут = Число(Сред(ЧасовойПояс,4,2))*ЗнакДобавки;
				КонецЕсли;
				
				Если Число(год) <= 68 Тогда
					Год = Число(Год) + 2000;
				ИначеЕсли Число(год) < 100 Тогда
					Год = Число(Год) + 1900;
				КонецЕсли;
				ДатаЗнч = Дата(Год,Месяц,День,Часов,Минут,Секунд);
				ДатаЗнч = ДатаЗнч + (ДобавкаМинут*60 + ДобавкаЧасов*60*60);
				Возврат ДатаЗнч;
				
				//where:
				// YYYY = four-digit year
				// MM = two-digit month (01 = January, etc.)
				// DD = two-digit day of month (01 through 31)
				// hh = two digits of hour (00 through 23) (am/pm NOT allowed)
				// mm = two digits of minute (00 through 59)
				// ss = two digits of second (00 through 59)
				// s = one or more digits representing a decimal fraction of a second
				// TZD = time zone designator (Z or +hh:mm or -hh:mm)
				
				//This profile does not specify how many digits may be used to represent the decimal fraction of a second. An adopting standard that permits fractions of a second must specify both the minimum number of digits (a number greater than or equal to one) and the maximum number of digits (the maximum may be stated to be "unlimited").
				
				//This profile defines two ways of handling time zone offsets:
				//Times are expressed in UTC (Coordinated Universal Time), with a special UTC designator ("Z").
				//Times are expressed in local time, together with a time zone offset in hours and minutes. A time zone offset of "+hh:mm" indicates that the date/time uses a local time zone which is "hh" hours and "mm" minutes ahead of UTC. A time zone offset of "-hh:mm" indicates that the date/time uses a local time zone which is "hh" hours and "mm" minutes behind UTC.
				
				//A standard referencing this profile should permit one or both of these ways of handling time zone offsets.
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецПопытки;

	Возврат Неопределено;
	
КонецФункции

// Функция преобразует дату в формат ISO8601
//
// Параметры:
//      Дата, тип Дата - дата для преобразования
// Возвращаемое значение
// 		Строка даты в формате ISO8601
//
&НаСервереБезКонтекста
Функция ДатаВФорматеISO8601(Дата, ДобавитьЧасовойПояс = Истина) Экспорт
	
	Если ТипЗнч(Дата) = Тип("Дата") Тогда
		СтрокаЧасовойПояс =  СериализаторXDTO.XMLСтрока(Дата);
		Если ДобавитьЧасовойПояс Тогда
			СмещениеЧасы = СмещениеСтандартногоВремени(ЧасовойПояс(), УниверсальноеВремя(ТекущаяДата(), ЧасовойПояс())) / 3600;
			СтрокаЧасовойПояс = СтрокаЧасовойПояс + ?(СмещениеЧасы > 0, "+", "-");
			СмещениеЧасы = Макс(СмещениеЧасы,-СмещениеЧасы);
			СтрокаЧасовойПояс = СтрокаЧасовойПояс + ?(СмещениеЧасы < 10, "0" + СмещениеЧасы, СмещениеЧасы) + ":00";
		КонецЕсли;
		Возврат СтрокаЧасовойПояс;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Функция выполняет проверку наличия в строке только цифр
//
// Параметры:
//      КОД, тип Строка - строка для проверки
//
// Возвращаемое значение:
// 		Булево, признак наличия в строке только цифр
//
&НаКлиентеНаСервереБезКонтекста
Функция ТолькоЦифры(КОД) Экспорт 
	
	Цифры = "0123456789";
	Для НомСимвола = 1 По СтрДлина(КОД) Цикл
		ТекСимвол = Сред(КОД, НомСимвола, 1);
		Если Найти(Цифры, ТекСимвол) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

// Функция записывает объект, обрабатывая исключительные ситуации
//
// Параметры:
// Объект - объект для записи
// 
// Возвращаемое значение:
// 		Булево, признак успешной записи
//
&НаСервереБезКонтекста
Функция ЗаписатьОбъект(Объект) Экспорт
	
	Попытка 
		Объект.Записать(); 	
		Возврат Истина;
	Исключение 
		Если Найти(Врег(ОписаниеОшибки()),Врег("не уникал")) > 0 Тогда
			Объект.УстановитьНовыйКод("");			
		КонецЕсли;
	КонеЦПопытки;
	
	Попытка 
		Объект.Записать(); 	
		Возврат Истина;
	Исключение 
		Если Найти(Врег(ОписаниеОшибки()),Врег("не уникал")) > 0 Тогда
			Объект.УстановитьНовыйКод("Н");			
		КонецЕсли;
	КонеЦПопытки;
	
	Попытка	
		Объект.Записать();
		Возврат Истина;
	Исключение		
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст ="Не удается записать "+Строка(ТипЗнч(Объект))+" "+Строка(Объект)+", ошибка: "+ОписаниеОшибки();
		СообщениеПользователю.Сообщить();
	КонецПопытки;
	
	Возврат Ложь;	   
	
КонецФункции

// Функция предназанчена для проверки строки, несет ли она какой-либо смысл 
//
// Параметры:
// ИсходнаяСтрока - строка для проверки
//
// Возвращаемое значение:
// 		Булево, признак содержания в строке значимых символов
//
&НаСервереБезКонтекста
Функция СтрокаНеИмеетСмысла(Знач ИсходнаяСтрока) Экспорт
	
	СимволыНесущиеСмысл = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZЁАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ";
	ИсходнаяСтрока = ВРег(ИсходнаяСтрока);
	Для НомСимвола = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		ТекСимвол = Сред(ИсходнаяСтрока, НомСимвола, 1);
		
		Если Найти(СимволыНесущиеСмысл, ТекСимвол) > 0 Тогда
			Возврат Ложь;
			
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Истина;	
	
КонецФункции 

// Функция предназанчена для поиска элемента в массиве структур
//
// Параметры:
//    	МассивСтруктур, тип массив - массив структур для поиска
//    	ИскомоеЗначение - искомое значение любого типа
//		ИмяКолонки, тип Строка - имя колонки
//
// Возвращаемое значение:
//     	Найденный элемент или Неопределено
//
&НаКлиенте
Функция НайтиВМассивеСтруктур(МассивСтруктур, ИскомоеЗначение, ИмяКолонки) Экспорт
	
	Для Каждого Элемент Из МассивСтруктур Цикл
		Если Элемент[ИмяКолонки] = ИскомоеЗначение Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
		
КонецФункции

// Функция предназанчена для поиска элемента в массиве структур на сервере
//
// Параметры:
//    	МассивСтруктур, тип массив - массив структур для поиска
//    	ИскомоеЗначение - искомое значение любого типа
//		ИмяКолонки, тип Строка - имя колонки
//
// Возвращаемое значение:
//     	Найденный элемент или Неопределено
//
&НаСервереБезКонтекста
Функция НайтиВМассивеСтруктурНаСервере(МассивСтруктур, ИскомоеЗначение, ИмяКолонки) Экспорт
	
	Для Каждого Элемент Из МассивСтруктур Цикл
		Если Элемент[ИмяКолонки] = ИскомоеЗначение Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
		
КонецФункции

// функция преобразования массива стуктур строк в таблицу значений
//
// параметры:
//  МассивСтуктурСтрок, тип "Массив", где каждый элемент - структура, ключи которой являются именами колонок таблицы 
//
// возвращаемое значение: таблица значений
//
&НаСервереБезКонтекста
Функция ПреобразоватьМассивСтуктурСтрокВТаблицуЗначений(МассивСтуктурСтрок) Экспорт
	
	Если МассивСтуктурСтрок = Неопределено Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	ТаблицаЗначений = Новый ТаблицаЗначений;
	Для Каждого СтуктураСтроки Из МассивСтуктурСтрок Цикл
		НоваяСтрока = ТаблицаЗначений.Добавить();
		Для Каждого ЭлементСтруктуры Из СтуктураСтроки Цикл
			Если ТаблицаЗначений.Колонки.Найти(ЭлементСтруктуры.Ключ) = Неопределено Тогда
				ТаблицаЗначений.Колонки.Добавить(ЭлементСтруктуры.Ключ);
			КонецЕсли;
			НоваяСтрока[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
		КонецЦикла;		
	КонецЦикла;		
		
	Возврат ТаблицаЗначений;

КонецФункции

// функция преобразования таблицы значений в массив стуктур строк
//
// параметры:
//    ТаблицаЗначений - любая таблица значений
//
// возвращаемое значение: 
//    МассивСтуктурСтрок, тип "Массив", где каждый элемент - структура, ключи которой являются именами колонок таблицы 
//
&НаСервереБезКонтекста
Функция ПреобразоватьТаблицуЗначенийВМассивСтруктур(ТаблицаЗначений)
	
	МассивСтрок = Новый Массив();
	Для Каждого Элемент Из ТаблицаЗначений Цикл
		СтруктураСтроки = Новый Структура();
		Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			СтруктураСтроки.Вставить(Колонка.Имя, Элемент[Колонка.Имя]);
		КонецЦикла;	
		МассивСтрок.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат МассивСтрок;
	
КонецФункции

// функция преобразования таблицы значений в массив стуктур строк
//
// параметры:
//    ТаблицаЗначений - любая таблица значений
//
// возвращаемое значение: 
//    МассивСтуктурСтрок, тип "Массив", где каждый элемент - структура, ключи которой являются именами колонок таблицы 
//
&НаСервереБезКонтекста
Функция ПреобразоватьСтрокуТаблицыВСтруктуру(Знач ТаблицаЗначенийКоллекция, ИндексСтроки) 
	
	ТаблицаЗначений = ДанныеФормыВЗначение(ТаблицаЗначенийКоллекция, Тип("ТаблицаЗначений"));
	СтрокаТаблицы = ТаблицаЗначений[ИндексСтроки];
	
	СтруктураСтроки = Новый Структура();
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		СтруктураСтроки.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
	КонецЦикла;	
	
	Возврат СтруктураСтроки;
	
КонецФункции

// функция преобразования таблицы значений в структуру стуктур строк
//
// параметры:
//    ТаблицаЗначений - любая таблица значений
//
// возвращаемое значение: 
//    СтруктураСтрок, тип "Структура", где каждый элемент - структура, ключи которой являются именами колонок таблицы 
//
&НаСервереБезКонтекста
Функция ПреобразоватьТаблицуЗначенийВСтруктуруСтруктур(ТаблицаЗначений)
	
	Если ТипЗнч(ТаблицаЗначений) <> Тип("ТаблицаЗначений") Тогда
		Возврат ТаблицаЗначений;
	КонецЕсли;
	
	СтруктураСтрок = Новый Структура();
	Счетчик = 0;
	Для Каждого Элемент Из ТаблицаЗначений Цикл
		СтруктураСтроки = Новый Структура();
		Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			СтруктураСтроки.Вставить(Колонка.Имя, Элемент[Колонка.Имя]);
		КонецЦикла;	
		СтруктураСтрок.Вставить(?(Счетчик = 0 ,"Стр0",("Стр" + Формат(Счетчик, "ЧГ=0"))), СтруктураСтроки);
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	Возврат СтруктураСтрок;
	
КонецФункции

// функция преобразования таблицы значений в структуру стуктур строк
//
// параметры:
//    СтруктураСтрок, тип "Структура", где каждый элемент - структура, ключи которой являются именами колонок таблицы 
//
// возвращаемое значение: 
//     таблица значений
//
&НаСервереБезКонтекста
Функция ПреобразоватьСтруктуруСтруктурВТаблицуЗначений(СтруктураСтрок)
	
	Если ТипЗнч(СтруктураСтрок) <> Тип("Структура") Тогда
		Возврат СтруктураСтрок;
	КонецЕсли;
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	Счетчик = 0;
	Для Каждого Элемент Из СтруктураСтрок Цикл
		Если ТаблицаЗначений.Колонки.Количество() = 0 Тогда
			Для Каждого Ключ Из Элемент.Значение Цикл
				ТаблицаЗначений.Колонки.Добавить(Ключ.Ключ);
			КонецЦикла;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ТаблицаЗначений.Добавить(), Элемент.Значение);
	КонецЦикла;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

// Функция формирует универсальное описание типов
//
//  возвращаемое значение: 
//		ОписаниеТиповУниверсальное - описание типов
//
&НаСервереБезКонтекста
Функция СформироватьОписаниеТиповУниверсальное()
	
	//Создание универсального описания типов
	ДопустимыеТипы = Новый Массив();
	ДопустимыеТипы.Добавить(Тип("Строка"));
	ДопустимыеТипы.Добавить(Тип("Число"));
	ДопустимыеТипы.Добавить(Тип("Дата"));
	ДопустимыеТипы.Добавить(Тип("Булево"));
	Для Каждого Справочник Из Метаданные.Справочники Цикл
		ДопустимыеТипы.Добавить(Тип("СправочникСсылка." + Справочник.Имя));
	КонецЦикла; 
	Для Каждого ПланСч Из Метаданные.ПланыСчетов Цикл
		ДопустимыеТипы.Добавить(Тип("ПланСчетовСсылка." + ПланСч.Имя));
	КонецЦикла; 
	Для Каждого ПеречисленияСсылок Из Метаданные.Перечисления Цикл
		ДопустимыеТипы.Добавить(Тип("ПеречислениеСсылка." + ПеречисленияСсылок.Имя));
	КонецЦикла;	
	ОписаниеТиповУниверсальное = Новый ОписаниеТипов(ДопустимыеТипы);
	
	Возврат ОписаниеТиповУниверсальное;
	
КонецФункции



// Функция выполняет обработку наименований контрагентов с учетом ОПФ
//
// Параметы:
//      СтруктураОПФ - структура ОПФ
//      НаименованиеЭлемента - наименование контрагента или организации
//
// Возвращаемое значение:
// 		Структура, содержащая  КраткоеНаименование, ПолноеНаименование, НаименованиеБезОПФ, КраткоеНаименованиеВариант2, КраткоеНаименованиеВариант3  
//
&НаСервереБезКонтекста
Функция ОбработкаНаименованияЭлемента(Знач СтруктураОПФ, Знач НаименованиеЭлемента) Экспорт
	
	НаименованиеЭлемента = СокрЛП(НаименованиеЭлемента); // убираем правые и левые незначащие символы
	
	// Замена символов неразрывного пробела
	Пока Истина Цикл
		Если Найти(НаименованиеЭлемента, Символы.НПП) <> 0 Тогда
			НаименованиеЭлемента = СтрЗаменить(НаименованиеЭлемента, Символы.НПП, " ");
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Пока Истина Цикл
		ДлинаСтроки = СтрДлина(НаименованиеЭлемента);
		НаименованиеЭлемента = СтрЗаменить(НаименованиеЭлемента, "  ", " ");
		НоваяДлинаСтроки = СтрДлина(НаименованиеЭлемента);
		Если ДлинаСтроки = НоваяДлинаСтроки Тогда
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Пока Истина Цикл
		ДлинаСтроки = СтрДлина(НаименованиеЭлемента);
		НаименованиеЭлемента = СтрЗаменить(НаименованиеЭлемента, """""", """");
		НоваяДлинаСтроки = СтрДлина(НаименованиеЭлемента);
		Если ДлинаСтроки = НоваяДлинаСтроки Тогда
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	НаименованиеЭлементаВРег = ВРег(НаименованиеЭлемента);	
	ВхождениеНенужногоСлова = Найти(НаименованиеЭлементаВРег, "АДРЕС");
	Если ВхождениеНенужногоСлова <> 0 Тогда
		НаименованиеЭлемента = Лев(НаименованиеЭлемента, ВхождениеНенужногоСлова - 1);
	КонецЕсли;
	ВхождениеНенужногоСлова = Найти(НаименованиеЭлементаВРег, "ИНН");
	Если ВхождениеНенужногоСлова <> 0 Тогда
		ЭтоИНН = Ложь;
		
		СледЭлемПослеИНН = Сред(НаименованиеЭлементаВРег, ВхождениеНенужногоСлова + 3, 1);
		Если СледЭлемПослеИНН = " " Тогда
			СледЭлемПослеИНН = Сред(НаименованиеЭлементаВРег, ВхождениеНенужногоСлова + 4, 1);	
		КонецЕсли;
		Для к = 0 По 9 Цикл
			Если СледЭлемПослеИНН = к Тогда
				ЭтоИНН = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЭтоИНН Тогда
			НаименованиеЭлемента = Лев(НаименованиеЭлемента, ВхождениеНенужногоСлова - 1);
		КонецЕсли;
	КонецЕсли;
	ВхождениеНенужногоСлова = Найти(НаименованиеЭлементаВРег, "ТЕЛ.");
	Если ВхождениеНенужногоСлова <> 0 Тогда
		НаименованиеЭлемента = Лев(НаименованиеЭлемента, ВхождениеНенужногоСлова - 1);
	КонецЕсли;
	ВхождениеНенужногоСлова = Найти(НаименованиеЭлементаВРег, "ГРУЗООТПРАВИТЕЛЬ");
	Если ВхождениеНенужногоСлова <> 0 Тогда
		НаименованиеЭлемента = Лев(НаименованиеЭлемента, ВхождениеНенужногоСлова - 1);
	КонецЕсли;
	ВхождениеНенужногоСлова = Найти(НаименованиеЭлементаВРег, "ГРУЗОПОЛУЧАТЕЛЬ");
	Если ВхождениеНенужногоСлова <> 0 Тогда
		НаименованиеЭлемента = Лев(НаименованиеЭлемента, ВхождениеНенужногоСлова - 1);
	КонецЕсли;
	
	ДлинаСтроки = СтрДлина(НаименованиеЭлемента);
	ПодрядЦифр = 0;
	ИндексПервогоВхожденияЦифры = 0;
	Для к = 1 По ДлинаСтроки Цикл
		ЭтоЦифра = Ложь;
		ТекущийСимвол = Сред(НаименованиеЭлемента, к, 1);
		Для н = 0 По 9 Цикл
			Если ТекущийСимвол = Строка(н) ИЛИ ТекущийСимвол = " " ИЛИ ТекущийСимвол = "/" ИЛИ ТекущийСимвол = "\" Тогда
				Если ИндексПервогоВхожденияЦифры = 0 Тогда
					ИндексПервогоВхожденияЦифры = к;
				КонецЕсли;
				ПодрядЦифр = ПодрядЦифр + 1;
				ЭтоЦифра = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		Если ПодрядЦифр >= 6 Тогда
			Прервать;
		КонецЕсли;	
		Если НЕ ЭтоЦифра Тогда
			ПодрядЦифр = 0;
			ИндексПервогоВхожденияЦифры = 0;
		КонецЕсли;	
	КонецЦикла;	
	
	Если ИндексПервогоВхожденияЦифры <> 0 Тогда
		НаименованиеЭлемента = Лев(НаименованиеЭлемента, ИндексПервогоВхожденияЦифры - 1);
	КонецЕсли;
	
	ДлинаСтроки = СтрДлина(НаименованиеЭлемента);
	
	НаименованиеЭлементаВРег = ВРег(НаименованиеЭлемента);
	НомерСтрокиВхождения = 0;
	НомерСтрокиВхожденияКраткоОПФ = 0;
	
	Для каждого Строка Из СтруктураОПФ Цикл
		КраткоОПФ = Строка.КраткоОПФ;
		ПолностьюОПФ = Строка.ПолностьюОПФ;
		Если ПолностьюОПФ = Неопределено ИЛИ ПолностьюОПФ = "" Тогда
			Прервать;
		КонецЕсли;	
		
		НомерСтрокиВхождения = Найти(НаименованиеЭлементаВРег, ПолностьюОПФ);
		Если НомерСтрокиВхождения <> 0 Тогда
			Если НомерСтрокиВхождения <= 3 Тогда
				НомерСтрокиВхождения = 1;
				НаименованиеЭлементаВРег = Прав(НаименованиеЭлементаВРег, ДлинаСтроки - НомерСтрокиВхождения);
				НаименованиеЭлемента = Прав(НаименованиеЭлемента, ДлинаСтроки - НомерСтрокиВхождения);
				ДлинаСтроки = СтрДлина(НаименованиеЭлемента);
			КонецЕсли;
			ДлинаОПФ = СтрДлина(ПолностьюОПФ);
			Если СтрДлина(СтрЗаменить(НаименованиеЭлементаВРег, ПолностьюОПФ, "")) = ДлинаСтроки - (СтрДлина(ПолностьюОПФ) * 2) Тогда
				// создаём СтрокуЗамены длиной ПолностьюОПФ
				СтрокаЗамены = "";
				Для к = 1 По ДлинаОПФ Цикл
					СтрокаЗамены = СтрокаЗамены + "*";
				КонецЦикла;
				НаименованиеЭлементаВРегСЗаменойПервогоВхождения = Лев(НаименованиеЭлементаВРег, НомерСтрокиВхождения - 1) + СтрокаЗамены + Прав(НаименованиеЭлементаВРег, ДлинаСтроки - (ДлинаОПФ + НомерСтрокиВхождения - 1));
				НомерВторойСтрокиВхождения = Найти(НаименованиеЭлементаВРегСЗаменойПервогоВхождения, ПолностьюОПФ);
				НаименованиеЭлемента = Лев(НаименованиеЭлемента, НомерВторойСтрокиВхождения - 2);
				ДлинаСтроки = СтрДлина(НаименованиеЭлемента);
			КонецЕсли;
			
			НаименованиеЭлементаВРег = ВРег(НаименованиеЭлемента);
			ВхождениеКраткоОПФ = Найти(НаименованиеЭлементаВРег, КраткоОПФ);
			Если ВхождениеКраткоОПФ <> 0 Тогда
				Если Сред(НаименованиеЭлемента, ВхождениеКраткоОПФ - 2, 1) = "," ИЛИ Сред(НаименованиеЭлемента, ВхождениеКраткоОПФ - 2, 1) = " " Тогда
					ЧислоЗабираемыхЛевыхСимволов = ВхождениеКраткоОПФ - 3;
				Иначе
					ЧислоЗабираемыхЛевыхСимволов = ВхождениеКраткоОПФ - 2;
				КонецЕсли;
				НаименованиеЭлемента = Лев(НаименованиеЭлемента, ЧислоЗабираемыхЛевыхСимволов);
				ДлинаСтроки = СтрДлина(НаименованиеЭлемента);
			КонецЕсли;
			Прервать;	
		КонецЕсли;	
	КонецЦикла;
	
	Если НомерСтрокиВхождения = 0 Тогда
		Для каждого Строка Из СтруктураОПФ Цикл
			КраткоОПФ = Строка.КраткоОПФ;
			ПолностьюОПФ = Строка.ПолностьюОПФ;
			Если ПолностьюОПФ = Неопределено ИЛИ ПолностьюОПФ = "" Тогда
				Прервать;
			КонецЕсли;	
			
			НомерСтрокиВхожденияКраткоОПФ = Найти(НаименованиеЭлементаВРег, КраткоОПФ);
			Если НомерСтрокиВхожденияКраткоОПФ <> 0 Тогда
				ДлинаОПФ = СтрДлина(КраткоОПФ);
				
				МассивВозможныхСимволов = Новый Массив();
				МассивВозможныхСимволов.Добавить(" ");
				МассивВозможныхСимволов.Добавить("""");
				МассивВозможныхСимволов.Добавить("*");
				МассивВозможныхСимволов.Добавить(".");
				МассивВозможныхСимволов.Добавить(",");
				
				СимволПередКраткоОПФ = Сред(НаименованиеЭлементаВРег, НомерСтрокиВхожденияКраткоОПФ - 1, 1);
				СимволПослеКраткоОПФ = Сред(НаименованиеЭлементаВРег, НомерСтрокиВхожденияКраткоОПФ + ДлинаОПФ, 1);
				
				СимволыПрисутствуют = Ложь;
				Если НомерСтрокиВхожденияКраткоОПФ = 1 Тогда
					Для каждого СимволИзМассива Из МассивВозможныхСимволов Цикл
						Если СимволИзМассива = СимволПослеКраткоОПФ Тогда
							СимволыПрисутствуют = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли (НомерСтрокиВхожденияКраткоОПФ + ДлинаОПФ) > ДлинаСтроки Тогда
					Для каждого СимволИзМассива Из МассивВозможныхСимволов Цикл
						Если СимволИзМассива = СимволПередКраткоОПФ Тогда
							СимволыПрисутствуют = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;		
				Иначе
					ПервыйСимволПрисутствует = Ложь;
					ПоследнийСимволПрисутствует = Ложь;
					Для каждого СимволИзМассива Из МассивВозможныхСимволов Цикл
						Если СимволИзМассива = СимволПередКраткоОПФ Тогда
							ПервыйСимволПрисутствует = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Для каждого СимволИзМассива Из МассивВозможныхСимволов Цикл
						Если СимволИзМассива = СимволПослеКраткоОПФ Тогда
							ПоследнийСимволПрисутствует = Истина;	
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если ПервыйСимволПрисутствует И ПоследнийСимволПрисутствует Тогда
						СимволыПрисутствуют = Истина;	
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ СимволыПрисутствуют Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрДлина(СтрЗаменить(НаименованиеЭлементаВРег, КраткоОПФ, "")) = ДлинаСтроки - (СтрДлина(КраткоОПФ) * 2) Тогда
					// создаём СтрокуЗамены длиной ПолностьюОПФ
					СтрокаЗамены = "";
					Для к = 1 По ДлинаОПФ Цикл
						СтрокаЗамены = СтрокаЗамены + "*";
					КонецЦикла;
					НаименованиеЭлементаВРегСЗаменойПервогоВхождения = Лев(НаименованиеЭлементаВРег, НомерСтрокиВхожденияКраткоОПФ - 1) + СтрокаЗамены + Прав(НаименованиеЭлементаВРег, ДлинаСтроки - (ДлинаОПФ + НомерСтрокиВхожденияКраткоОПФ - 1));
					НомерВторойСтрокиВхождения = Найти(НаименованиеЭлементаВРегСЗаменойПервогоВхождения, КраткоОПФ);
					НаименованиеЭлемента = Лев(НаименованиеЭлемента, НомерВторойСтрокиВхождения - 2);
					ДлинаСтроки = СтрДлина(НаименованиеЭлемента);
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НомерСтрокиВхожденияКраткоОПФ <> 0 Тогда
		Если Сред(НаименованиеЭлемента, НомерСтрокиВхожденияКраткоОПФ - 1, 1) = "(" И Сред(НаименованиеЭлемента, НомерСтрокиВхожденияКраткоОПФ + СтрДлина(КраткоОПФ), 1) = ")" Тогда
			НаименованиеЭлементаПреобраз = Лев(НаименованиеЭлемента, НомерСтрокиВхожденияКраткоОПФ - 2) + Прав(НаименованиеЭлемента, ДлинаСтроки - НомерСтрокиВхожденияКраткоОПФ + 1);
			ДлинаСтроки = ДлинаСтроки - 1;
			НомерСтрокиВхожденияКраткоОПФ = НомерСтрокиВхожденияКраткоОПФ - 1;
			НаименованиеЭлемента = Лев(НаименованиеЭлементаПреобраз, НомерСтрокиВхожденияКраткоОПФ + СтрДлина(КраткоОПФ) - 1) + Прав(НаименованиеЭлементаПреобраз, ДлинаСтроки - НомерСтрокиВхожденияКраткоОПФ - СтрДлина(КраткоОПФ) - 1);
			ДлинаСтроки = ДлинаСтроки - 1;
		КонецЕсли;
	КонецЕсли;
	//ДлинаСтроки = СтрДлина(НаименованиеЭлемента);
	НаименованиеЭлемента = СтрЗаменить(НаименованиеЭлемента, "«", """");
	НаименованиеЭлемента = СтрЗаменить(НаименованиеЭлемента, "»", """");
	НаименованиеЭлементаТест = НаименованиеЭлемента;
	ДлинаСтрокиТест = ДлинаСтроки;
	УтерянноеЧислоСимволов = 0;
	МассивИндексовКавычек = Новый Массив();
	Пока Истина Цикл
		ИндексКавычки = Найти(НаименованиеЭлементаТест, """");
		Если ИндексКавычки = 0 Тогда
			Прервать;
		КонецЕсли;
		МассивИндексовКавычек.Добавить(УтерянноеЧислоСимволов + ИндексКавычки);
		НаименованиеЭлементаТест = Прав(НаименованиеЭлементаТест, ДлинаСтрокиТест - ИндексКавычки);
		ДлинаСтрокиТест = ДлинаСтрокиТест - ИндексКавычки;
		УтерянноеЧислоСимволов = УтерянноеЧислоСимволов + ИндексКавычки;
	КонецЦикла;
	
	ОчищенноеНаименованиеЭлемента = НаименованиеЭлемента;
	
	// Убираем кавычки, если кавычек 2,  первую кавычку если кавычек 3, первую и последнюю если кавычек больше 3
	Если МассивИндексовКавычек.Количество() = 1 Тогда // удаляем эту кавычку
		НаименованиеЭлемента = Лев(НаименованиеЭлемента, МассивИндексовКавычек[0] - 1) + Прав(НаименованиеЭлемента, ДлинаСтроки - МассивИндексовКавычек[0]);
		МассивИндексовКавычек.Очистить();
		ДлинаСтроки = ДлинаСтроки - 1;	
	ИначеЕсли МассивИндексовКавычек.Количество() = 2 Тогда // удаляем обе кавычки
		НаименованиеЭлемента = Лев(НаименованиеЭлемента, МассивИндексовКавычек[0] - 1) + Прав(НаименованиеЭлемента, ДлинаСтроки - МассивИндексовКавычек[0]);
		НаименованиеЭлемента = Лев(НаименованиеЭлемента, МассивИндексовКавычек[1] - 2) + Прав(НаименованиеЭлемента, ДлинаСтроки - МассивИндексовКавычек[1]);
		МассивИндексовКавычек.Очистить();
		ДлинаСтроки = ДлинаСтроки - 2;
	ИначеЕсли МассивИндексовКавычек.Количество() = 3 Тогда // удаляем первую кавычку
		НаименованиеЭлемента = Лев(НаименованиеЭлемента, МассивИндексовКавычек[0] - 1) + Прав(НаименованиеЭлемента, ДлинаСтроки - МассивИндексовКавычек[0]);
		Для к = 1 По МассивИндексовКавычек.Количество() - 1 Цикл // для первой кавычки индекс не нужно уменьшать
			МассивИндексовКавычек[к] = МассивИндексовКавычек[к] - 1;
		КонецЦикла;
		МассивИндексовКавычек.Удалить(0);
		ДлинаСтроки = ДлинаСтроки - 1;
	ИначеЕсли МассивИндексовКавычек.Количество() > 3 Тогда // удаляем первую и последнюю кавычки
		НаименованиеЭлемента = Лев(НаименованиеЭлемента, МассивИндексовКавычек[0] - 1) + Прав(НаименованиеЭлемента, ДлинаСтроки - МассивИндексовКавычек[0]);
		НаименованиеЭлемента = Лев(НаименованиеЭлемента, МассивИндексовКавычек[МассивИндексовКавычек.Количество() - 1] - 2) + Прав(НаименованиеЭлемента, ДлинаСтроки - МассивИндексовКавычек[МассивИндексовКавычек.Количество() - 1]);
		МассивИндексовКавычек.Удалить(0);
		МассивИндексовКавычек.Удалить(МассивИндексовКавычек.Количество() - 1);
		Для к = 0 По МассивИндексовКавычек.Количество() - 1 Цикл
			МассивИндексовКавычек[к] = МассивИндексовКавычек[к] - 1;
		КонецЦикла;
		ДлинаСтроки = ДлинаСтроки - 2;		
	КонецЕсли;
	
	Если МассивИндексовКавычек.Количество() >= 2 Тогда
		// Убираем пробелы после первой кавычки и перед последней
		СимволПослеКавычки = Сред(НаименованиеЭлемента, МассивИндексовКавычек[0] + 1, 1);
		Если СимволПослеКавычки = " " Тогда
			НаименованиеЭлемента = Лев(НаименованиеЭлемента, МассивИндексовКавычек[0]) + Прав(НаименованиеЭлемента, ДлинаСтроки - (МассивИндексовКавычек[0] + 1));
			ДлинаСтроки = ДлинаСтроки - 1;
			Для к = 1 По МассивИндексовКавычек.Количество() - 1 Цикл // для первой кавычки индекс не нужно уменьшать
				МассивИндексовКавычек[к] = МассивИндексовКавычек[к] - 1;
			КонецЦикла;	
		КонецЕсли;
		
		СимволПослеКавычки = Сред(НаименованиеЭлемента, МассивИндексовКавычек[МассивИндексовКавычек.Количество() - 1] - 1, 1);
		Если СимволПослеКавычки = " " Тогда
			НаименованиеЭлемента = Лев(НаименованиеЭлемента, МассивИндексовКавычек[МассивИндексовКавычек.Количество() - 1] - 2) + Прав(НаименованиеЭлемента, ДлинаСтроки - МассивИндексовКавычек[МассивИндексовКавычек.Количество() - 1] + 1);
			ДлинаСтроки = ДлинаСтроки - 1;
			МассивИндексовКавычек[МассивИндексовКавычек.Количество() - 1] = МассивИндексовКавычек[МассивИндексовКавычек.Количество() - 1] - 1;
		КонецЕсли;
	КонецЕсли;			
	
	СтруктураНаименований = Новый Структура("КраткоеНаименование, ПолноеНаименование", "", "");
	СтруктураНаименований.Вставить("ПолноеНаименование", ОчищенноеНаименованиеЭлемента);
	
	Если НомерСтрокиВхождения <> 0 И МассивИндексовКавычек.Количество() > 0 Тогда
		НомерСтрокиВхождения = НомерСтрокиВхождения - 2;
	ИначеЕсли НомерСтрокиВхожденияКраткоОПФ <> 0 И МассивИндексовКавычек.Количество() > 0 Тогда
		НомерСтрокиВхожденияКраткоОПФ = НомерСтрокиВхожденияКраткоОПФ - 2;
	КонецЕсли;
	
	КраткоеНаименованиеЭлемента = "";
	
	Если НомерСтрокиВхождения <> 0 Тогда
		НомерСтрокиВхождения = Найти(ВРег(НаименованиеЭлемента), ПолностьюОПФ);
		КраткоеНаименованиеЭлемента = Лев(НаименованиеЭлемента, НомерСтрокиВхождения - 1) + Прав(НаименованиеЭлемента, ДлинаСтроки - НомерСтрокиВхождения + 1 - ДлинаОПФ) + ", " + КраткоОПФ;	
		КраткоеНаименованиеЭлемента = СокрЛП(КраткоеНаименованиеЭлемента);
	ИначеЕсли НомерСтрокиВхожденияКраткоОПФ <> 0 Тогда
		НомерСтрокиВхожденияКраткоОПФ = Найти(ВРег(НаименованиеЭлемента), КраткоОПФ);
		КраткоеНаименованиеЭлемента = СтрЗаменить(НаименованиеЭлемента, КраткоОПФ, "") + ", " + КраткоОПФ;
		КраткоеНаименованиеЭлемента = СокрЛП(КраткоеНаименованиеЭлемента);
	КонецЕсли;
	
	КраткоеНаименованиеЭлемента = СокрЛП(КраткоеНаименованиеЭлемента);
	
	Если КраткоеНаименованиеЭлемента <> "" Тогда
		Пока Истина Цикл // убираем все лишние пробелы и запятые после всех преобразований
			ДлинаСтроки = СтрДлина(КраткоеНаименованиеЭлемента);
			КраткоеНаименованиеЭлемента = СтрЗаменить(КраткоеНаименованиеЭлемента, " ,", ", ");
			КраткоеНаименованиеЭлемента = СтрЗаменить(КраткоеНаименованиеЭлемента, "  ", " ");
			КраткоеНаименованиеЭлемента = СтрЗаменить(КраткоеНаименованиеЭлемента, ",,", ",");
			КраткоеНаименованиеЭлемента = СтрЗаменить(КраткоеНаименованиеЭлемента, ".,", ",");
			КраткоеНаименованиеЭлемента = СтрЗаменить(КраткоеНаименованиеЭлемента, ",.", ",");
			НоваяДлинаСтроки = СтрДлина(КраткоеНаименованиеЭлемента);
			Если ДлинаСтроки = НоваяДлинаСтроки Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		Если Лев(КраткоеНаименованиеЭлемента, 1) = """" Тогда
			КраткоеНаименованиеЭлемента = Прав(КраткоеНаименованиеЭлемента, ДлинаСтроки - 1);
		КонецЕсли;	
	КонецЕсли;
	
	Если КраткоеНаименованиеЭлемента <> "" И Лев(КраткоеНаименованиеЭлемента, СтрДлина(КраткоеНаименованиеЭлемента) - (СтрДлина(КраткоОПФ) + 2)) = "" Тогда
		КраткоеНаименованиеЭлемента = "";
		ОчищенноеНаименованиеЭлемента = "";
	КонецЕсли;	
	
	НаименованиеКраткоеЭлементаВРег = ВРег(КраткоеНаименованиеЭлемента);
	ДлинаСтроки = СтрДлина(КраткоеНаименованиеЭлемента);
	Для каждого Строка Из СтруктураОПФ Цикл
		КраткоОПФ = Строка.КраткоОПФ;
		ПолностьюОПФ = Строка.ПолностьюОПФ;
		ДлинаКраткоОПФ = СтрДлина(КраткоОПФ);
		Если КраткоОПФ = Неопределено ИЛИ КраткоОПФ = "" Тогда
			Прервать;
		КонецЕсли;	
		
		НомерСтрокиВхождения = Найти(НаименованиеКраткоеЭлементаВРег, КраткоОПФ);
		Если НомерСтрокиВхождения <> 0 Тогда
			Если Сред(НаименованиеКраткоеЭлементаВРег, НомерСтрокиВхождения - 1, 1) <> " " И Сред(НаименованиеКраткоеЭлементаВРег, НомерСтрокиВхождения + ДлинаКраткоОПФ, 1) <> " " Тогда
				Продолжить;
			КонецЕсли;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	НаименованиеПолноеЭлемента = "";
	НаименованиеБезОПФ = "";
	КраткоеНаименованиеВариант2 = "";
	КраткоеНаименованиеВариант3 = "";
	Если НомерСтрокиВхождения <> 0 Тогда
		//Если Прав(НаименованиеКраткоеЭлементаВРег, ДлинаКраткоОПФ + 2) = ", " + КраткоОПФ Тогда
		ПолностьюОПФ = НРег(ПолностьюОПФ);
		ДлинаПолностьюОПФ = СтрДлина(ПолностьюОПФ);
		ПервыйСимвол = Лев(ПолностьюОПФ, 1);
		ПервыйСимвол = ВРег(ПервыйСимвол);
		ПреобразованнаяЧастьПолностьюОПФ = ПервыйСимвол + Прав(ПолностьюОПФ, ДлинаПолностьюОПФ - 1);
		НаименованиеБезОПФ = Лев(КраткоеНаименованиеЭлемента, НомерСтрокиВхождения - 3);
		//НаименованиеПолноеЭлемента = ПреобразованнаяЧастьПолностьюОПФ + " """ + Лев(КраткоеНаименованиеЭлемента, ДлинаСтроки - ДлинаКраткоОПФ - 2) + """";
		НаименованиеПолноеЭлемента = ПреобразованнаяЧастьПолностьюОПФ + " """ + НаименованиеБезОПФ + """";
		//КонецЕсли;	
		КраткоеНаименованиеВариант2 = КраткоОПФ + " """ + НаименованиеБезОПФ + """";
		КраткоеНаименованиеВариант3 = КраткоОПФ + " " + НаименованиеБезОПФ;
		Пока Истина Цикл // убираем все лишние пробелы и запятые после всех преобразований
			ДлинаСтроки = СтрДлина(НаименованиеПолноеЭлемента);
			НаименованиеПолноеЭлемента = СтрЗаменить(НаименованиеПолноеЭлемента, " ,", ", ");
			НаименованиеПолноеЭлемента = СтрЗаменить(НаименованиеПолноеЭлемента, "  ", " ");
			НаименованиеПолноеЭлемента = СтрЗаменить(НаименованиеПолноеЭлемента, ",,", ",");
			НаименованиеПолноеЭлемента = СтрЗаменить(НаименованиеПолноеЭлемента, ".,", ",");
			НаименованиеПолноеЭлемента = СтрЗаменить(НаименованиеПолноеЭлемента, ",.", ",");
			НаименованиеПолноеЭлемента = СтрЗаменить(НаименованиеПолноеЭлемента, """""", """");
			НоваяДлинаСтроки = СтрДлина(НаименованиеПолноеЭлемента);
			Если ДлинаСтроки = НоваяДлинаСтроки Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	Если КраткоеНаименованиеЭлемента = "" И НаименованиеПолноеЭлемента = "" Тогда
		КраткоеНаименованиеЭлемента = НаименованиеЭлемента;	
		НаименованиеПолноеЭлемента = НаименованиеЭлемента;
	КонецЕсли;
	СтруктураНаименований.Вставить("КраткоеНаименование", СокрЛП(КраткоеНаименованиеЭлемента));
	СтруктураНаименований.Вставить("ПолноеНаименование", СокрЛП(НаименованиеПолноеЭлемента));
	СтруктураНаименований.Вставить("НаименованиеБезОПФ", СокрЛП(НаименованиеБезОПФ));
	СтруктураНаименований.Вставить("КраткоеНаименованиеВариант2", СокрЛП(КраткоеНаименованиеВариант2));
	СтруктураНаименований.Вставить("КраткоеНаименованиеВариант3", СокрЛП(КраткоеНаименованиеВариант3));
	
	Возврат СтруктураНаименований;
	
КонецФункции

// Функция проверки подключения Интернет
//
// Параметры:
//
// Возвращаемое значение:
//   	Булево, признак подключения интернет
//
&НаКлиентеНаСервереБезКонтекста
Функция ИнтернетПроверитьПодключение()
	
	Попытка	
		НТТР = Новый HTTPСоединение("www.googleapis.com",,,,,5,Новый ЗащищенноеСоединениеOpenSSL()); 
		Запрос = Новый HTTPЗапрос("language/translate/v2?key=1&q=hello%20world&source=en&target=ru");
		Ответ = НТТР.Получить(Запрос);
		СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
		Если Найти(СтрокаОтвета, "domain") > 0 И Найти(СтрокаОтвета, "reason") Тогда  
			Возврат Истина;
		КонецЕсли;
		
		НТТР = Новый HTTPСоединение("cloud-api.yandex.net",,,,,5,Новый ЗащищенноеСоединениеOpenSSL()); 
		Запрос = Новый HTTPЗапрос("v1/disk");
		Ответ = НТТР.Получить(Запрос);
		СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
		Если Найти(СтрокаОтвета, "Не авторизован") > 0 И Найти(СтрокаОтвета, "UnauthorizedError") Тогда  
			Возврат Истина;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения
//
// Параметры: 
//  Сумма            - число, сумма от которой надо рассчитывать налоги, 
//  СуммаВключаетНДС - булево, признак включения НДС в сумму ("внутри" или "сверху"),
//  СтавкаНДС        - число , процентная ставка НДС,
//
// Возвращаемое значение:
//  Число, полученная сумма НДС
//
&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьСуммуНДС(Сумма, СуммаВключаетНДС, СтавкаНДС) Экспорт
	
	Если СуммаВключаетНДС Тогда
		Если СтавкаНДС=0.1 ИЛИ СтавкаНДС=0.18 Тогда
			СуммаБезНДС = Сумма / (100 + СтавкаНДС);
			СуммаНДС = Сумма - СуммаБезНДС;
		Иначе
			СуммаБезНДС = 100 * Сумма / (100 + СтавкаНДС);
			СуммаНДС = Сумма - СуммаБезНДС;
		КонецЕсли;
	Иначе
		СуммаБезНДС = Сумма;
	КонецЕсли;

	Если НЕ СуммаВключаетНДС Тогда
		Если СтавкаНДС=0.1 ИЛИ СтавкаНДС=0.18 Тогда
			СуммаНДС = СуммаБезНДС * СтавкаНДС;
		Иначе
			СуммаНДС = СуммаБезНДС * СтавкаНДС / 100;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СуммаНДС;


КонецФункции // РассчитатьСуммуНДС()

&НаКлиентеНаСервереБезКонтекста
// Определяет заполнено ли переданное значение
//
// Параметры: 
// Значение - значение, заполенение которого надо проверить
//
// Возвращаемое значение:
// 		Признак заполненности значения, тип "Булево"
//
Функция ЗначениеНеЗаполнено(Значение) Экспорт
	
	Результат   = Ложь;
	ТипЗначения = ТипЗнч(Значение);
	
	// Сначала примитивные типы
	Если Значение = Неопределено Тогда
		Результат = Истина;
		
	ИначеЕсли Значение = NULL Тогда
		Результат = Истина;
		
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Если СокрЛП(Значение) = "" Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		Если Значение = 0 Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Если Значение = Дата('00010101') Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Ложь; // Булево будем считать не пустым
		
		//Отдельное определение, так как конструкторов данного типа не существует	
	ИначеЕсли ТипЗначения = Тип("РежимПроведенияДокумента") Тогда
		
		Если Значение = РежимПроведенияДокумента.Неоперативный или Значение = РежимПроведенияДокумента.Оперативный тогда
			Результат = Ложь;
		КонецЕсли;
		
		// Для остальных будем считать значение пустым, если оно равно дефолтному значению своего типа
		
	Иначе
		
		Если Значение = Новый(ТипЗначения) Тогда
			Результат = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

&НаСервереБезКонтекста
// Предназначена для получения пустого значения заданного типа
//
// Параметры:
//		ЗаданныйТип - тип, пустое значение которого нужно получить
//
// Возвращаемое значение:
//		Пустое значение заданного типа
//
Функция ПустоеЗначениеТипа(ЗаданныйТип) Экспорт
	
	Если ЗаданныйТип = Тип("Число") Тогда
		Возврат 0;
	ИначеЕсли ЗаданныйТип = Тип("Строка") Тогда
		Возврат "";
	ИначеЕсли ЗаданныйТип = Тип("Дата") Тогда
		Возврат '00010101000000';
	ИначеЕсли ЗаданныйТип = Тип("Булево") Тогда
		Возврат Ложь;
	Иначе
		Возврат Новый (ЗаданныйТип);
	КонецЕсли;
	
КонецФункции 

&НаСервереБезКонтекста
// Функция вычисляет процент вхождения одной строки в другую
//
// Параметры: 
// 		СтрокаПоиска - строка, для которой вычисляется процент вхождения в другую строку
// 		Строка - строка, процент вхождения в которую нужно вычислить
//
// Возвращаемое значение:
// 		Процент вхождения одной строки в другую
//
Функция ПодсчитатьПроцентВхождения(Знач СтрокаПоиска, Знач Строка, Знач ESDLСтруктураОПФ) 
	
	КвоВхождений = 0;
	КвоВхождений2 = 0;
	СтепеньСовпадения = 0;
	
	СтрокаПоиска = СокрЛП(ВРЕГ(СтрокаПоиска));
	Строка = СокрЛП(ВРЕГ(Строка));

	Если ESDLСтруктураОПФ <> Неопределено Тогда
		Для Каждого СтрокаОПФ Из ESDLСтруктураОПФ Цикл
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, СтрокаОПФ.КраткоОПФ, "");
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, СтрокаОПФ.ПолностьюОПФ, "");
			Строка = СтрЗаменить(Строка, СтрокаОПФ.КраткоОПФ, "");
			Строка = СтрЗаменить(Строка, СтрокаОПФ.ПолностьюОПФ, "");
		КонецЦикла;
	КонецЕсли;
	
	СтрокаПоиска = СтрЗаменить(СтрокаПоиска, """", "");
	Строка = СтрЗаменить(Строка, """", "");
	
	ДлинаВ = СтрДлина(Строка);
	Если ДлинаВ > 100 Тогда
		ДлинаПодстрокиНач = 3;
	ИначеЕсли ДлинаВ > 50 Тогда
		ДлинаПодстрокиНач = 2;
	Иначе
		ДлинаПодстрокиНач = 1;
	КонецЕсли;
 
	Если НЕ (СтрДлина(СтрокаПоиска) = 0 ИЛИ СтрДлина(Строка) = 0) Тогда
		
		Для ДлинаПодстроки = ДлинаПодстрокиНач По 3 Цикл
			
			НачНомерПодстроки = 1;
			НомерСимвола = 0;
			Пока НомерСимвола + ДлинаПодстроки <= СтрДлина(Строка) Цикл
				Подстрока = СРЕД(Строка, НачНомерПодстроки, ДлинаПодстроки);
				Если Найти(СтрокаПоиска, Подстрока) > 0 Тогда
					КвоВхождений2=КвоВхождений2 + 1;
				КонецЕсли;
				КвоВхождений = КвоВхождений + 1;
				НачНомерПодстроки = НачНомерПодстроки + 1;
				НомерСимвола = НомерСимвола + 1;
			КонецЦикла;
			
			НачНомерПодстроки = 1;
			НомерСимвола = 0;
			Пока НомерСимвола + ДлинаПодстроки <= СтрДлина(СтрокаПоиска) Цикл
				Подстрока = СРЕД(СтрокаПоиска, НачНомерПодстроки, ДлинаПодстроки);
				Если Найти(Строка, Подстрока) <> 0 Тогда
					КвоВхождений2=КвоВхождений2 + 1;
				КонецЕсли;
				КвоВхождений = КвоВхождений + 1;
				НачНомерПодстроки = НачНомерПодстроки + 1;
				НомерСимвола = НомерСимвола + 1;
			КонецЦикла;
			
		КонецЦикла;

	КонецЕсли;

	Если КвоВхождений > 0 Тогда
		Результат = ?(КвоВхождений>КвоВхождений2, Окр((КвоВхождений2/КвоВхождений)*100),Окр((КвоВхождений/КвоВхождений2)*100));
		Результат = ?(Результат = 100 И КвоВхождений<>КвоВхождений2, 99, Результат);
	Иначе
		Результат = 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


//////////////////////////////////////////////////////////////////////////////////////////////
// Обработчики команд формы
//////////////////////////////////////////////////////////////////////////////////////////////

// Процедура - обработчик команды формы "СменитьПользователя"
//
&НаКлиенте
Процедура СменитьПользователя(Команда)
	
	СимволТочка = ".";
	ПозицияТочки = СтрДлина(ЭтаФорма.ИмяФормы);
	Пока Сред(ЭтаФорма.ИмяФормы, ПозицияТочки, 1) <> СимволТочка Цикл 
		ПозицияТочки = ПозицияТочки - 1; 
	КонецЦикла; 
 	ТекущееИмяФормы = Лев(ЭтаФорма.ИмяФормы, ПозицияТочки-1);
	
	СохранитьВХранилищеСистемныхНастроек("ESDLНастройкиПодключения", "НастройкиПодключения", Новый Структура()); // Затираем сохраненные настройки в хранилище

	СохранитьНастрПользователя();
	
	Если ИспользоватьВстроеннуюАвторизацию Тогда
		EfsolТокен = "";
		СменитьПользователяОчиститьПараметрыСеанса();
	КонецЕсли;
	
	Оповестить("Efsol_ВыполненВыход");	
	ОткрытьФорму(ТекущееИмяФормы);
	
КонецПроцедуры

// Процедура - обработчик команды формы "ПоказатьИзображения"
//
&НаКлиенте
Процедура ПоказатьИзображения(ИД) Экспорт
	
	Если beta Тогда
		HTTPСсылкаФайл = "https://docs.google.com/viewer?embedded=true&url=http://beta-adl.42clouds.com/adl42/hs/api_v1/AccountEDocuments/GetDocumentFile/" + ИД + "?TID=" + ESDLТокен;
	Иначе
		HTTPСсылкаФайл = "https://docs.google.com/viewer?embedded=true&url=http://adl.42clouds.com/adl42/hs/api_v1/AccountEDocuments/GetDocumentFile/" + ИД + "?TID=" + ESDLТокен;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПустойОбработчикОповещения", ЭтаФорма);
	НачатьЗапускПриложения(ОписаниеОповещения, HTTPСсылкаФайл);
	
КонецПроцедуры	

// Процедура - обработчик команды формы "УдалитьДокумент".
//
&НаКлиенте
Процедура УдалитьДокумент(Команда)
	
	МассивСтрокДокументыТаблица = Новый Массив();
	СоответствиеИДСтраниц = Новый Соответствие();
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ДокументыТаблица.ВыделенныеСтроки Цикл 
		Строка = ДокументыТаблица.НайтиПоИдентификатору(ВыделеннаяСтрока);
		МассивСтрокДокументыТаблица.Добавить(Строка);
		МассивСтрок = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, СтатусОбработки", Строка.ДокументИД, "В обработке"));
		Если МассивСтрок.Количество() > 0 Тогда 
			//ТаблицаДанных.Удалить(МассивСтрок[0]);
			Если МассивСтрок[0].Статус = 0 Тогда
				МассивСтрок[0].СтатусОбработки = "Загружен";
			Иначе
				МассивСтрок[0].СтатусОбработки = "Готов к загрузке";
			КонецЕсли;
			СодержимоеСпискаПриИзменении();
		КонецЕсли;
	КонецЦикла;
	
	Кнопки = Новый СписокЗначений;
	Если МассивСтрокДокументыТаблица.Количество() = 0 Тогда
		Возврат;
	Иначе
		Для Каждого Строка Из МассивСтрокДокументыТаблица Цикл
			ДокументыТаблица.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтоВебКлиент Тогда
		ТекущаяСтрокаДерево = Элементы.ДокументыТаблица.ТекущиеДанные;
		Если ТекущаяСтрокаДерево = Неопределено И ДокументыТаблица.Количество() > 0 Тогда
			ПерваяСтрока = ДокументыТаблица[0].ПолучитьИдентификатор();
			ТекущаяСтрокаДерево = ДокументыТаблица.НайтиПоИдентификатору(ПерваяСтрока);
			Элементы.ДокументыТаблица.ТекущаяСтрока = ПерваяСтрока;
			Элементы.ДокументыТаблица.ВыделенныеСтроки.Очистить();
			Элементы.ДокументыТаблица.ВыделенныеСтроки.Добавить(ПерваяСтрока);
		ИначеЕсли  ДокументыТаблица.Количество() = 0 Тогда
			Элементы.ДокументыТаблица.ТекущаяСтрока = Неопределено;
			Элементы.ДокументыТаблица.ВыделенныеСтроки.Очистить();
		КонецЕсли;
		ДокументыТаблицаПриАктивизацииЯчейки(Неопределено, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды формы "ДобавитьИзФайлов".
//
&НаКлиенте
Процедура ДобавитьИзФайлов(Команда)
	
	СтруктураРесурсов = ПолучитьДанныеОРесурсах();
	СообщениеПользователю = Новый СообщениеПользователю;
	СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
	Если СтруктураРесурсов <> Неопределено Тогда
		КоличествоДнейЛицензии = СтруктураРесурсов.КоличествоДнейЛицензии;
		КоличествоСтраницЛицензии = СтруктураРесурсов.КоличествоСтраницЛицензии;
		ДоступностьРесурсов = (КоличествоДнейЛицензии > 0 И КоличествоСтраницЛицензии > 0);
		Если НЕ ДоступностьРесурсов ИЛИ (КоличествоДнейЛицензии < 30 ИЛИ КоличествоСтраницЛицензии < 50) Тогда
			ДействиеЛицензии = "Лицензия действительна " + КоличествоДнейЛицензии + " дней. Осталось " + КоличествоСтраницЛицензии + " страниц лицензии";
			Если ДоступностьРесурсов Тогда
				СообщениеПользователю.Текст = "Внимание! Заканчивается действие лицензии!" + Символы.ПС + ДействиеЛицензии;
			Иначе
				СообщениеПользователю.Текст = "Отправка файлов: Проверьте состояние лицензии!" + Символы.ПС + ДействиеЛицензии;
			КонецЕсли;
			СообщениеПользователю.Сообщить();
		КонецЕсли;
	Иначе
		ДоступностьРесурсов = Ложь;
		СообщениеПользователю.Текст = "Отправка файлов: Ошибка при проверке состояния лицензии!" + Символы.ПС + "Обратитесь в службу поддержки";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
	Если ДоступностьРесурсов ИЛИ ADL Тогда
		БезРаспознавания = Ложь;
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьИзФайловПослеПодключенияРасширенияРаботыСФайлами", ЭтаФорма);
		НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзФайловБезРаспознавания(Команда)
	БезРаспознавания = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьИзФайловПослеПодключенияРасширенияРаботыСФайлами", ЭтаФорма);
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
КонецПроцедуры

// Процедура обработкчик оповещени о подключении расширения работы с файлами
//
&НаКлиенте
Процедура ДобавитьИзФайловПослеПодключенияРасширенияРаботыСФайлами(РасширениеРаботыСФайламиПодключено, ДопПараметры)  Экспорт
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Если СлужбаADL42Доступна(ЭтаФорма.УникальныйИдентификатор)  Тогда
		
		МаскаФайлов = "";
		Для Каждого Расширение Из МассивДопустимыхРасширений Цикл
			МаскаФайлов = МаскаФайлов + "*." + Расширение + ";";
		КонецЦикла;
		//МаскаФайлов = "*.xls;*.xlsx;*.jpg;*.jpeg;*.bmp;*.pdf;*.png;*.tif;*.tiff;*.gif;*.jpe";
		Если Не ЭтоВебКлиент ИЛИ РасширениеРаботыСФайламиПодключено = Истина Тогда
			Если НЕ ADL Тогда
				ДиалогОткрытияФайла.Фильтр = МаскаФайлов+"|"+МаскаФайлов;
			КонецЕсли;
			ДиалогОткрытияФайла.МножественныйВыбор = Истина;
			ДиалогОткрытияФайла.Каталог = ПапкаВыбораДокументов;
			Назначение = ?(БезРаспознавания = Истина, "для отправки на сервер", "для распознавания");
			ДиалогОткрытияФайла.Заголовок = "Выберите файлы " + Назначение;
			ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьИзФайловПослеВыбора", ЭтаФорма);
			Если Не ЭтоВебКлиент Тогда 
				Если ДиалогОткрытияФайла.Выбрать() Тогда
					СписокФайлов = Новый СписокЗначений;
					СписокФайлов.ЗагрузитьЗначения(ДиалогОткрытияФайла.ВыбранныеФайлы);
					СписокФайлов.СортироватьПоЗначению();
					ДиалогМассивВыбранныхФайлов = СписокФайлов.ВыгрузитьЗначения();
					//Элементы.НадписьОповещения.Заголовок = "Подождите, пожалуйста, идет отправка документов";
					//Элементы.ГруппаОповещенияПользователя.Видимость = Истина;
					ПодключитьОбработчикОжидания("ОтправкаДокументовНаСервер", 1, Истина);
					ПапкаВыбораДокументов = ДиалогОткрытияФайла.Каталог;
				КонецЕсли;
			Иначе
				ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
			КонецЕсли;
		Иначе 
			ОткрытьФорму(ПрефиксИмениФорм + "УпрФормаДобавленияФайлов", , ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды формы "ЗагрузитьДокументы".
//
&НаКлиенте
Процедура ЗагрузитьДокументыВыделенные(Команда)
	
	МассивИД = Новый Массив;
	
	ТекущаяСтрокаДерево = Элементы.ДокументыТаблица.ТекущиеДанные;
	Если Элементы.ДокументыТаблица.ТекущиеДанные = Неопределено Тогда
		ТекущаяСтрокаДерево = ДокументыТаблица.Получить(ИндексТекущегоДокумента);
	КонецЕсли;

	Если Элементы.ДокументыТаблица.ВыделенныеСтроки.Количество() < 2  Тогда
		
		МассивИД.Добавить(ТекущаяСтрокаДерево.ДокументИД);
		
	Иначе
		
		Для Каждого ИДВыделеннойСтроки Из Элементы.ДокументыТаблица.ВыделенныеСтроки Цикл 
			ВыделеннаяСтрока = ДокументыТаблица.НайтиПоИдентификатору(ИДВыделеннойСтроки);
			МассивИД.Добавить(ВыделеннаяСтрока.ДокументИД);
		КонецЦикла;
		
	КонецЕсли;

	ЗагрузкаДокументов(МассивИД);
	
КонецПроцедуры

// Процедура - обработчик команды формы "Отмена".
//
&НаКлиенте
Процедура Отмена(Команда)
	
	МассивГотовых.Очистить();
	ПолучениеГотовыхОпросПоТаймеру();	
	
КонецПроцедуры

// Процедура - обработчик команды формы "ПоказатьНовыеЭлементыСправочников".
//
&НаКлиенте
Процедура ПоказатьНовыеЭлементыСправочников(Команда)
	
	Если НовыеЭлементыСправочников.Количество() = 0 Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не найдены новые элементы справочников";
		СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецЕсли;
	
	ФормаНовыхЭлементовСправочников = ПолучитьФорму(ПрефиксИмениФорм + "УпрФормаНовыхЭлементовСправочников", , ЭтаФорма);
	ФормаНовыхЭлементовСправочников.ЗакрыватьПриЗакрытииВладельца = Истина;
	Если НЕ ФормаНовыхЭлементовСправочников.Открыта() Тогда
		ФормаНовыхЭлементовСправочников.Открыть();
	Иначе
		ФормаНовыхЭлементовСправочников.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды формы "ПроверитьОбновления".
//
&НаКлиенте
Процедура ПроверитьОбновления(Команда)
	
	Если НЕ СлужбаADL42Доступна(ЭтаФорма.УникальныйИдентификатор) Тогда
		Возврат;
	КонецЕсли;	
	
	ФормаОбновления = ПолучитьФорму(ПрефиксИмениФорм + "УпрФормаОбновления", , ЭтаФорма);
	ФормаОбновления.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаОбновления.Открыть();

КонецПроцедуры

// Процедура - обработчик команды формы "ОткрытьНастройки".
//
&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	//ПараметрыДляПередачи = Новый Структура("ИспользоватьСловарь, ВозможныеВидыДокументовДляСценариев", ИспользоватьСловарь, ВозможныеВидыДокументовДляСценариев);
	ФормаНастройки = ПолучитьФорму(ПрефиксИмениФорм + "УпрФормаНастройки", , ЭтаФорма);
	ФормаНастройки.ЗакрыватьПриЗакрытииВладельца = Истина;
	Если НЕ ФормаНастройки.Открыта() Тогда
		ФормаНастройки.Открыть(); 
	Иначе
		ФормаНастройки.Активизировать(); 
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды формы "ОПрограмме".
//
&НаКлиенте
Процедура ОПрограмме(Команда)
	
	ПараметрыДляПередачи = Новый Структура("ВерсияПрограммы", ВерсияПрограммы);
	ФормаОПрограмме = ПолучитьФорму(ПрефиксИмениФорм + "УпрФормаОПрограмме", ПараметрыДляПередачи, ЭтаФорма);
	ФормаОПрограмме.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаОПрограмме.Открыть();
	
КонецПроцедуры

// Процедура - обработчик команды формы "ПометитьТовары".
//
&НаКлиенте
Процедура ПометитьТовары(Команда)
	
	СменитьЗначенияУслуга(Команда);
	
КонецПроцедуры

// Процедура - обработчик команды формы "ПометитьУслуги".
//
&НаКлиенте
Процедура ПометитьУслуги(Команда)
	
	СменитьЗначенияУслуга(Команда);
	
КонецПроцедуры

// Универсальная процедура для команд изменения реквизита Услуга
//
&НаКлиенте
Процедура СменитьЗначенияУслуга(Команда)
	
	Если Элементы.ДокументыТаблица.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УслугаЗначение = (Команда.Имя = "ПометитьУслуги");
	
	ИДДокумента = Элементы.ДокументыТаблица.ТекущиеДанные.ДокументИД;
	МассивДокументов = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД", ИДДокумента));
	Если МассивДокументов.Количество() > 0 Тогда
		Документ = МассивДокументов[0].Документ;
		Для каждого СтрокаТЧ Из Документ.ПреобразованныйДокумент.ТЧ Цикл
			Если ТипЗнч(СтрокаТЧ.Номенклатура.Значение) <> Тип("СправочникСсылка.Номенклатура") Тогда
				СтрокаТЧ.Услуга.Значение = УслугаЗначение;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из РеквизитыТЧ Цикл
		Если СтрокаТаблицы.ИС <> 0 И ТипЗнч(СтрокаТаблицы.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
			СтрокаТаблицы.Услуга = УслугаЗначение;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик команды формы "ОтправитьДокументНаТестирование".
//
&НаКлиенте
Процедура ОтправитьДокументНаТестирование(Команда)
	
	СписокИД = Новый СписокЗначений;
	
	МассивЭлементов = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, Пометка", 1, Истина));
	Для Каждого СтрокаДокумента Из МассивЭлементов Цикл
		СписокИД.Добавить(СтрокаДокумента.ДокументИД);
	КонецЦикла;
	Если СписокИД.Количество() > 10 Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Максимальное количество отправляемых на диагностику документов 10. Отправка отменена!";
		СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
		СообщениеПользователю.Сообщить();
		Возврат;
	ИначеЕсли СписокИД.Количество() = 0 И Элементы.ДеревоДокументов.ТекущиеДанные <> Неопределено Тогда
		СписокИД.Добавить(Элементы.ДеревоДокументов.ТекущиеДанные.ДокументИД);
	КонецЕсли;
	
	ПараметрыДляПередачи = Новый Структура("Email, СписокИД", ESDLEmailПользователя, СписокИД);
	ФормаОтправкиДокументовНаТестирование = ПолучитьФорму(ПрефиксИмениФорм + "УпрФормаОтправкиДокументовНаТестирование", ПараметрыДляПередачи, ЭтаФорма);
	ФормаОтправкиДокументовНаТестирование.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаОтправкиДокументовНаТестирование.Открыть();
	
КонецПроцедуры

// Процедура - обработчик команды формы "ЛайкнутьДокумент".
//
&НаКлиенте
Процедура ЛайкнутьДокумент(Команда)
	
	СтрокаИД = "";

	Если Элементы.СтраницыЗД.ТекущаяСтраница = Элементы.СтраницаВерификации Тогда
		
		ТекущаяСтрокаДерево = Элементы.ДокументыТаблица.ТекущиеДанные;
		Если Элементы.ДокументыТаблица.ТекущиеДанные = Неопределено Тогда
			ТекущаяСтрокаДерево = ДокументыТаблица.Получить(ИндексТекущегоДокумента);
		КонецЕсли;
		ИД = ТекущаяСтрокаДерево.ДокументИД;
		Если Элементы.ДокументыТаблица.ВыделенныеСтроки.Количество() < 2  Тогда
			СтрокаИД = СтрокаИД + ТекущаяСтрокаДерево.ДокументИД + ";";
		Иначе
			Если Элементы.ДокументыТаблица.ВыделенныеСтроки.Количество() > 10 Тогда
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = "Максимальное количество отправляемых на диагностику документов 10. Отправка отменена!";
				СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
				СообщениеПользователю.Сообщить();
				Возврат;
			КонецЕсли;
			Для Каждого ИДВыделеннойСтроки Из Элементы.ДокументыТаблица.ВыделенныеСтроки Цикл 
				ВыделеннаяСтрока = ДокументыТаблица.НайтиПоИдентификатору(ИДВыделеннойСтроки);
				СтрокаИД = СтрокаИД + ВыделеннаяСтрока.ДокументИД + ";";
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		МассивЭлементов = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, Пометка", 1, Истина));
		Для Каждого СтрокаДокумента Из МассивЭлементов Цикл
			СтрокаИД = СтрокаИД + СтрокаДокумента.ДокументИД + ";";
		КонецЦикла;
		Если СтрокаИД = "" И Элементы.ДеревоДокументов.ТекущиеДанные <> Неопределено Тогда
			СтрокаИД = Элементы.ДеревоДокументов.ТекущиеДанные.ДокументИД + ";";
		КонецЕсли;
		ОтправитьЛайк(СтрокаИД, ЭтаФорма.УникальныйИдентификатор);

	КонецЕсли;
	
	ОтправитьЛайк(СтрокаИД);
	
КонецПроцедуры

// Процедура - обработчик команды формы "СкачатьДесктопКлиент".
//
&НаКлиенте
Процедура СкачатьДесктопКлиент(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПустойОбработчикОповещения", ЭтаФорма);
	НачатьЗапускПриложения(ОписаниеОповещения, "https://42clouds.com/downloads/esdl/ADLDesktopClient.zip") ;

КонецПроцедуры

&НаКлиенте
Процедура ВебКлиентСсылка(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПустойОбработчикОповещения", ЭтаФорма);
	НачатьЗапускПриложения(ОписаниеОповещения, "http://" + ?(beta, "beta.", "") + "docloader.42clouds.com/") ;

КонецПроцедуры


// Процедура - обработчик команды формы "ПолучитьданныеДляОтправкиПисьмом".
//
&НаКлиенте
Процедура ПолучитьданныеДляОтправкиПисьмом(Команда)
	
	СообщениеПользователю = Новый СообщениеПользователю;
	
	email = ?(RICOH, "ricoh.adl@yandex.ru", "ea@42clouds.com");
	
	СообщениеПользователю.Текст = "Вы можете отправлять файлы для распознавания электронным письмом на адрес: " + email + Символы.ПС +
	"Отправляйте с e-mail указанного при регистрации: " + ESDLEmailПользователя + Символы.ПС +
	"Или укажите идентификатор пользователя как тему письма: " + ESDLИДПользователя;
	СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
	СообщениеПользователю.Сообщить();
	
КонецПроцедуры

// Процедура - обработчик команды формы "_1сбо_ПроверкаБезопасногоРежима".
//
&НаКлиенте
Процедура _1сбо_ПроверкаБезопасногоРежима(Команда)
	// veda@1c.ru 2016-03-28 
	ПоказатьПредупреждение(,_1сбо_ПроверкаБезопасногоРежимаНаСервере());
КонецПроцедуры

// Процедура - обработчик команды формы "_1сбо_ПроверкаБезопасногоРежима" на сервере
//
&НаСервереБезКонтекста
Функция _1сбо_ПроверкаБезопасногоРежимаНаСервере()
	// veda@1c.ru 2016-03-28 
	Возврат "Безопасный режим: "+БезопасныйРежим();
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////
//Процедуры и функции работающие по таймеру

//Процедура получения значений счетчиков на сервере/////////////////////////////////////
//
&НаКлиенте
Процедура ПоискНезагруженных() Экспорт
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	СтрокаЗапроса = "/adl42/hs/api_v1/Service/GetIndicatorsQueue?UserID=" + ESDLИДПользователя;
	ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса);
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		КоличествоВсего = ПараметрыОтвета.СтруктураОтвета.CountFilesTotal;
		КоличествоОбработанных = ПараметрыОтвета.СтруктураОтвета.CountFilesProcessed;
		ЗначениеКоличествоНеобработанных = Число(КоличествоВсего - КоличествоОбработанных);
		Если ЗначениеКоличествоНеобработанных = 0 И КоличествоНеобработанных > 0 Тогда
			Элементы.Обновить.ЦветФона = Новый Цвет(250,230,80);
		КонецЕсли;
		КоличествоНеобработанных = ЗначениеКоличествоНеобработанных;
		КоличествоНовых = Число(ПараметрыОтвета.СтруктураОтвета.CountDocumentsNew);
	Иначе
		КоличествоНеобработанных = 0;	
		КоличествоНовых = 0;	
	КонецЕсли;
	
	ВремяВыполнения = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала)/1000;
	
	Если ЭтоВебКлиент Тогда
		Коэффициент = 1;
	Иначе
		Коэффициент = ?(ВремяВыполнения > 3, ?(ВремяВыполнения > 5, 6, 3), 1);
	КонецЕсли;
	
		
	Таймер = ?(КоличествоНеобработанных > 0, 5 * Коэффициент, 60);
	ПодключитьОбработчикОжидания("ПоискНезагруженных", Таймер, Истина);
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить(" Файлов в обработке: ");
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока("" + КоличествоНеобработанных, Новый Шрифт(,,Истина), Новый Цвет(0, 0, 139)));    
	МассивСтрок.Добавить("" + Символы.ПС + " Новых документов: ");
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока("" + КоличествоНовых, Новый Шрифт(,,Истина), Новый Цвет(0, 0, 139)));    
	
	Элементы.НадписьФайлыВОбработке.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		

КонецПроцедуры

//Проверка текущих значений ресурсов пользователя
//
&НаКлиенте
Функция ПолучитьДанныеОРесурсах()  Экспорт
	
	Если НЕ ProtectedMode Тогда
		Recognition42LicenseResourceId = "B08BD408-1684-4209-843F-021608F91135";
		Recognition42DaysResourceId = "43E506C9-B541-4726-AFDC-0CDA973C230B";
		DocLoaderDaysResourceId = "53B988C1-1E7A-41EB-974A-DE08FBDA1614";
		СтрокаЗапроса = "/api_v2/AccountCSResourceValues/GetValue?accountId=" + ESDLИДАккаунта + "&csResourceId=" + Recognition42LicenseResourceId;
		ПараметрыОтвета = ВыполнитьЗапрос("ESDLCoreHTTP", СтрокаЗапроса); 
		Если ПараметрыОтвета.КодОтвета = 200 Тогда
			КоличествоСтраницЛицензии = Число(ПараметрыОтвета.СтруктураОтвета.ServiceResourceValue);
			//СтрокаЗапроса = "/api_v2/AccountCSResourceValues/GetValue?accountId=" + ESDLИДАккаунта + "&csResourceId=" + Recognition42DaysResourceId;
			//ПараметрыОтвета = ВыполнитьЗапрос("ESDLCoreHTTP", СтрокаЗапроса); 
			//Если ПараметрыОтвета.КодОтвета = 200 Тогда
			//	КоличествоДнейЛицензии = Число(ПараметрыОтвета.СтруктураОтвета.ServiceResourceValue);
			//КонецЕсли;
			//СтрокаЗапроса = "/api_v2/AccountCSResourceValues/GetValue?accountId=" + ESDLИДАккаунта + "&csResourceId=" + DocLoaderDaysResourceId;
			//ПараметрыОтвета = ВыполнитьЗапрос("ESDLCoreHTTP", СтрокаЗапроса); 
			//Если ПараметрыОтвета.КодОтвета = 200 Тогда
			//	КоличествоДнейДатаДокАрхив = Число(ПараметрыОтвета.СтруктураОтвета.ServiceResourceValue);
			//Иначе
			//	КоличествоДнейДатаДокАрхив = 0;
			//КонецЕсли;
			
			КоличествоДнейДатаДокАрхив = 0;
			СтрокаЗапроса = "/api_v2/ResourceConfiguration/GetResourceConfigurationExpireDate?accountId="+ ESDLИДАккаунта + "&service=Esdl";
			ПараметрыОтвета = ВыполнитьЗапрос("ESDLCoreHTTP", СтрокаЗапроса); 
			Если ПараметрыОтвета.КодОтвета = 200 Тогда
				ДатаОкончанияЛицензии = СтрокаДатыВДату(ПараметрыОтвета.СтруктураОтвета.Date);
				Если ДатаОкончанияЛицензии <> Неопределено Тогда
					КоличествоДнейЛицензии = Цел((ДатаОкончанияЛицензии - ТекущаяДата())/86400);
					КоличествоДнейЛицензии = ?(КоличествоДнейЛицензии > 0, КоличествоДнейЛицензии, 0);
				КонецЕсли;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
			              
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат Новый Структура("КоличествоСтраницЛицензии, КоличествоДнейЛицензии, КоличествоДнейДатаДокАрхив", КоличествоСтраницЛицензии, КоличествоДнейЛицензии, КоличествоДнейДатаДокАрхив);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//////////////////////////////////////////////////////////////
// Процедуры последовательного получения готовых. Необходимы для корректной работы в веб-клиенте

// Инициализирует процесс получения докуменов
//
&НаКлиенте
Процедура ПолучитьГотовыеНаКлиенте() Экспорт     //ТаблицаДанных
	
	НачальноеКоличествоГотовых = МассивГотовых.Количество();
	Если НачальноеКоличествоГотовых = 0 Тогда 
		Возврат;	
	КонецЕсли;
	//Элементы.Предложения.Видимость = Ложь;
	//Элементы.СтраницаВерификации.Видимость = Истина;
	//ЭтаФорма.ОбновитьОтображениеДанных();
	//ПодключитьОбработчикОжидания("ПоказатьОповещение", 0.1, Истина);
	
	Если ПервоеПолучениеСеанса Тогда
		
		//Элементы.Индикатор.Заголовок = "Получение документов";
		//Элементы.ГруппаИндикатора.Видимость = Истина;
		ПроцентВыполнения = 25/МассивГотовых.Количество();
		Индикатор = ?(ПроцентВыполнения = 0, 1, ПроцентВыполнения);
				                                       
		Если ИспользоватьСловарь Тогда
			Состояние("Идет получение словаря соответствий", 5);
			ОбновитьСловарь();
			Состояние("Прогресс получения документов", Индикатор/2);
		КонецЕсли;

		Если ESDLСтруктураОПФ.Количество() = 0 Тогда
			ЗаполнитьТаблицуОПФ();
			Состояние("Прогресс получения документов", Индикатор);
		КонецЕсли;
				
		ПервоеПолучениеСеанса = Ложь;
		//Если ЭтоВебКлиент Тогда
		//	Элементы.ГруппаОповещенияПользователя.Видимость = Ложь;
		//КонецЕсли;
		//ПодключитьОбработчикОжидания("ПоказатьИндикаторыПодключения", 0.01, Истина);

	Иначе 
		
		//ПоказатьИндикаторыПодключения();
		
	КонецЕсли;
	
	ПроцентВыполнения = 50/МассивГотовых.Количество();
	Индикатор = ?(ПроцентВыполнения = 0, 1, ПроцентВыполнения);
	Состояние("Прогресс получения документов", Индикатор);
		
	//ПодключитьОбработчикОжидания("ПолучениеГотовыхОпросПоТаймеру", 0.1, Истина);

	ПолучениеГотовыхОпросПоТаймеру();
	
КонецПроцедуры	

// Выполняет заполнение данных для получения документов и запускает процедуру "ПоказатьИндикаторыПодключения"
//
&НаКлиенте
Процедура ПоказатьОповещение() Экспорт    //ТаблицаДанных
	
	
КонецПроцедуры

// Заполняет и отображает индикаторы получения документов и запускает процедуру "ПолучениеГотовыхОпросПоТаймеру"
//
&НаКлиенте
Процедура ПоказатьИндикаторыПодключения() Экспорт
	
	//Если НЕ ЭтоВебКлиент Тогда
	//	Элементы.ГруппаОповещенияПользователя.Видимость = Ложь;
	//КонецЕсли;
	//Элементы.Индикатор.Заголовок = "Получение документов";
	//Элементы.ГруппаИндикатора.Видимость = Истина;
	//Элементы.ПолучитьГотовые.Доступность = Ложь;

		
КонецПроцедуры	

// Получение первого документа из МассивГотовых
//
&НаКлиенте
Процедура ПолучениеГотовыхОпросПоТаймеру()
	
	
	ТекущееКоличествоГотовых = МассивГотовых.Количество();
	ТекстОшибки = "";
	
	Если ТекущееКоличествоГотовых = 0 Тогда
		
		Индикатор = 0;
		//Элементы.ГруппаИндикатора.Видимость = Ложь;
		
		СодержимоеСпискаПриИзменении();
		
		КоличествоДокументовПоСтатусамНаСервере();
		
	Иначе
		
		Если НЕ ПоискДубляОжидание Тогда
			
			ИД = МассивГотовых[0];
			Документ = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ИД, 1))[0];
			Если НЕ (Документ.Загрузить И Документ.ОткрытьПослеЗагрузки) Тогда
				СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocuments/GetDocumentXML?DocumentID=" + ИД;
				ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса,,,,Истина);
				
				ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
				
				КоличестоЭлементовСправочникаНоменклатура = КоличестоЭлементовСправочника("Номенклатура");
				
				Если ПараметрыОтвета.КодОтвета = 200 Тогда
					
					Если НЕ Документ.Шапка = Неопределено Тогда
						СброситьРезультатСопоставления(Документ);
					КонецЕсли;
					
					ПолучитьДокумент(ИД, ПараметрыОтвета.СтруктураОтвета.ТелоОтветаСтрока, ТекстОшибки);	
					//Пометить как полученный
					СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocuments/SetDocumentProperties";
					ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", Новый Структура("DocumentID, Received", ИД, "True"));
					Если НЕ ПараметрыОтвета.КодОтвета = 200 Тогда
						ТекстОшибки = "Ошибка при установке признака получения документа: " + ПараметрыОтвета.СтруктураОтвета.Description;
					КонецЕсли;
					ПоискНезагруженных();
				Иначе
					ТекстОшибки = "Ошибка при получении файла результата распознавания документов: " + ПараметрыОтвета.СтруктураОтвета.Description;
				КонецЕсли;
			КонецЕсли;
			
			Документ = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ИД, 1))[0];
			ВремяНаЗагрузку = 0;
			Если ТекстОшибки <> "" Тогда
				
				МассивДокументовКУдаленю = Новый Массив;
				МассивДокументовКУдаленю.Добавить(Документ);
				МассивГотовых.Удалить(0);
				КоличествоОшибок = КоличествоОшибок + 1;
				Если КоличествоОшибок = 5 Тогда
					СообщениеПользователю = Новый СообщениеПользователю;
					СообщениеПользователю.Текст = "При получении документов возникают ошибки. Получение прервано!";
					СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
					СообщениеПользователю.Сообщить();
					Для Каждого ИД Из МассивГотовых Цикл
						Документ = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ИД, 1))[0];
						МассивДокументовКУдаленю.Добавить(Документ);
					КонецЦикла;	
					МассивГотовых.Очистить();
					КоличествоОшибок = 0;
				Иначе
					СообщениеПользователю = Новый СообщениеПользователю;
					СообщениеПользователю.Текст = ТекстОшибки;
					СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
					СообщениеПользователю.Сообщить();
				КонецЕсли;
				Для Каждого Документ Из МассивДокументовКУдаленю Цикл
					ТаблицаДанных.Удалить(Документ);
				КонецЦикла;
				
			Иначе
				
				
				
				Если Документ.Загрузить Тогда
					МассивИД = Новый Массив;
					МассивИД.Добавить(Документ.ДокументИД);
					ЗагрузкаДокументов(МассивИД);
					
				Иначе
					
					// (Статистика 
					КоличествоСтрокТЧ = 1;
					Если Документ.ТЧ <> Неопределено Тогда
						КоличествоСтрокТЧ = КоличествоСтрокТЧ + Документ.ТЧ.Количество();
					КонецЕсли;
					
					ВремяВыполнения = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала)/1000; 
					//СтруктураПараметров = Новый Структура("CloudServiceID, AccountUserID, PerformanceCounterID, PerformanceCounterValue", "ESDL", ESDLИДПользователя, "esdl.internal.document.position_matching", (ВремяВыполнения/КоличествоСтрокТЧ));
					//СтрокаЗапроса = "/adl42/hs/api_v1/CSPerformanceCounters/SetPerformanceValue";
					//ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", СтруктураПараметров);                   
					
					НоваяСтрокаСтатистики                       = ТЗПоказателиРаботы.Добавить();
					НоваяСтрокаСтатистики.DateTime              = ТекущаяДата();
					НоваяСтрокаСтатистики.EventName             = "Получить Документ";
					//Ресурсы
					НоваяСтрокаСтатистики.User1C                = ПользовательИнфБазы;
					НоваяСтрокаСтатистики.ConfigurationVersion  = ВерсияКонфигурации;
					НоваяСтрокаСтатистики.ConfigurationName     = МетаданныеИмя;
					НоваяСтрокаСтатистики.ClientName            = "ESDL";
					НоваяСтрокаСтатистики.ClientVersion         = ВерсияПрограммы;
					НоваяСтрокаСтатистики.AccauntDataBaseID		= ИДБазыДанныхПользователя;
					//Реквизиты
					НоваяСтрокаСтатистики.Runtime               = ВремяВыполнения*1000;
					НоваяСтрокаСтатистики.StatisticalDataName0  = "ИД";
					НоваяСтрокаСтатистики.StatisticalDataValue0 = ИД;
					НоваяСтрокаСтатистики.StatisticalDataName1  = "Количество строк ТЧ";
					НоваяСтрокаСтатистики.StatisticalDataValue1 = КоличествоСтрокТЧ - 1;
					НоваяСтрокаСтатистики.StatisticalDataName2  = "Количество номенклатур в базе";
					НоваяСтрокаСтатистики.StatisticalDataValue2 = КоличестоЭлементовСправочникаНоменклатура;
					НоваяСтрокаСтатистики.StatisticalDataName3  = "Количество контрагентов в базе";
					НоваяСтрокаСтатистики.StatisticalDataValue3 = КоличестоЭлементовСправочника("Контрагенты");
					НоваяСтрокаСтатистики.StatisticalDataName4  = "Создание новых элементов";
					НоваяСтрокаСтатистики.StatisticalDataValue4 = Строка(Документ.Загрузить);
					
					// Статистика)
					
				КонецЕсли;
				
				//СортироватьПоПриИзменении(Элементы.СортироватьПо);
				//ДокументыТаблицаПриАктивизацииЯчейки(Неопределено, Истина);
				
				//Элементы.Предложения.Видимость = Ложь;
				//Элементы.СтраницаВерификации.Видимость = Истина;
				//Элементы.ОсновныеЭлементыФормы.Видимость = Истина;
				//Элементы.ГруппаРеквизитыТЧ.Видимость = Истина;
				
				МассивГотовых.Удалить(0);
				
				Если МассивГотовых.Количество() = 0 И ПоказыватьНовыеЭлементыСправочника И СозданыНовыеЭлементы Тогда
					//ПараметрыДляПередачи = Новый Структура("ИД, Ссылка", ИД, Ссылка);
					//ФормаНовыхЭлементовСправочников = ПолучитьФорму(ПрефиксИмениФорм + "УпрФормаНовыхЭлементовСправочников", ПараметрыДляПередачи, ЭтаФорма);
					ФормаНовыхЭлементовСправочников = ПолучитьФорму(ПрефиксИмениФорм + "УпрФормаНовыхЭлементовСправочников", , ЭтаФорма);
					//Если ФормаНовыхЭлементовСправочников.Открыта() Тогда
					//	ФормаНовыхЭлементовСправочников.Закрыть();
					//	ФормаНовыхЭлементовСправочников = ПолучитьФорму(ПрефиксИмениФорм + "УпрФормаНовыхЭлементовСправочников", ПараметрыДляПередачи, ЭтаФорма);
					//КонецЕсли;
					ФормаНовыхЭлементовСправочников.ЗакрыватьПриЗакрытииВладельца = Истина;
					Если НЕ ФормаНовыхЭлементовСправочников.Открыта() Тогда
						ФормаНовыхЭлементовСправочников.Открыть();
					КонецЕсли;
					СозданыНовыеЭлементы = Ложь;
				КонецЕсли;
				
				Если Документ.ВидПовторно <> "" Тогда
					Оповестить("ДокументРаспознан", ИД);
				КонецЕсли;
				
			КонецЕсли;
			
			
			ПроцентВыполнения = (НачальноеКоличествоГотовых - МассивГотовых.Количество()) / (НачальноеКоличествоГотовых + ВремяНаЗагрузку) * 100;	
			Индикатор = ?(ПроцентВыполнения = 0, 1, ПроцентВыполнения);
			
			Состояние("Прогресс получения документов", Индикатор);
			
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ПолучениеГотовыхОпросПоТаймеру", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьРезультатСопоставления(Документ)
		
		БазаДанныхИД = Документ.БазаДанныхИД;
		ИД = Документ.ДокументИД;
		Дата = Документ.Дата;
		Исходящий = Документ.Исходящий;
		ДатаСоздания = Документ.ДатаСоздания;
		Комментарий = Документ.Комментарий;
		Контрагент = Документ.Контрагент;
		Номер = Документ.Номер;
		Организация = Документ.Организация;
		ПолныйПутьКФайлу = Документ.ПолныйПутьКФайлу;
		СсылкаДокумент = Документ.СсылкаДокумент;
		СсылкаИД = Документ.СсылкаИД;
		СсылкаТип = Документ.СсылкаТип;
		СтараяВерсия = Документ.СтараяВерсия;
		СтраницаИД = Документ.СтраницаИД;
		СтраницаНомер = Документ.СтраницаНомер;
		Сумма = Документ.Сумма;
		Тип = Документ.Тип;
		ТипРаспознан = Документ.ТипРаспознан;
		ТипФайла = Документ.ТипФайла;
		ЭтоСделка = Документ.ЭтоСделка;
		Атрибутирован = Документ.Атрибутирован;
		Загрузить = Документ.Загрузить;

		ТаблицаДанных.Удалить(Документ);
		
		СтрокаДокумента = ТаблицаДанных.Добавить();	
		СтрокаДокумента.БазаДанныхИД = БазаДанныхИД;
		СтрокаДокумента.Дата = Дата;
		СтрокаДокумента.ДатаСоздания = ДатаСоздания;
		СтрокаДокумента.ДокументИД = ИД;
		СтрокаДокумента.Исходящий = Исходящий;
		СтрокаДокумента.Комментарий = Комментарий;
		СтрокаДокумента.Контрагент = Контрагент;
		СтрокаДокумента.Номер = Номер;
		СтрокаДокумента.Организация = Организация;
		СтрокаДокумента.ПолныйПутьКФайлу = ПолныйПутьКФайлу;
		СтрокаДокумента.СтараяВерсия = СтараяВерсия;
		СтрокаДокумента.СтраницаИД = СтраницаИД;
		СтрокаДокумента.СтраницаНомер = СтраницаНомер;
		СтрокаДокумента.Сумма = Сумма;
		СтрокаДокумента.Тип = Тип;
		СтрокаДокумента.ТипРаспознан = ТипРаспознан;
		СтрокаДокумента.ТипФайла = ТипФайла;
		СтрокаДокумента.ЭтоСделка = ЭтоСделка;
		СтрокаДокумента.Атрибутирован = Атрибутирован;
		СтрокаДокумента.Загрузить = Загрузить;
		
		Документ = СтрокаДокумента;
			  
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеДокументаПередВАрхив(ИД)
	
	ТекстОшибки = "";
	Документ = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ИД, 1))[0];
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocuments/GetDocumentXML?DocumentID=" + ИД;
	ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса,,,,Истина);
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	КоличестоЭлементовСправочникаНоменклатура = КоличестоЭлементовСправочника("Номенклатура");
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		ПолучитьДокумент(ИД, ПараметрыОтвета.СтруктураОтвета.ТелоОтветаСтрока, ТекстОшибки);	
		//Пометить как полученный
		СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocuments/SetDocumentProperties";
		ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", Новый Структура("DocumentID, Received", ИД, "True"));
	Иначе
	КонецЕсли;
		
КонецПроцедуры

/////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////////////////
//События таблицы формы "ДокументыТаблица"

// Процедура - обработчик команды элемента ДокументыТаблица "ПриАктивизацииЯчейки"
//
&НаКлиенте
Процедура ДокументыТаблицаПриАктивизацииЯчейки(Элемент, ОбновлениеДерева = Ложь)	     //!!!

	
	//Если Не ИнициализацияЗавершена Тогда
	//	Возврат;
	//КонецЕсли;
	//Если НеАктивизироватьСтроку = Истина И НЕ ОбновлениеДерева Тогда
	//	НеАктивизироватьСтроку = Ложь;
	//	Возврат;
	//ИначеЕсли ОбновлениеДерева Тогда
	//	НеАктивизироватьСтроку = Ложь;
	//КонецЕсли;	
	//	
	//ИндексТекущегоДокумента = ДокументыТаблица.Индекс(Элементы.ДокументыТаблица.ТекущиеДанные);  //!!!

	//ТекущаяСтрокаДерево = Элементы.ДокументыТаблица.ТекущаяСтрока;
	//Если ДокументыТаблица.Количество() = 0 Тогда
	//	ТекущаяСтрокаДерево = Неопределено;
	//	Элементы.ДокументыТаблица.ВыделенныеСтроки.Очистить();
	//	КоличествоВыделенныхСтрокДерева = Элементы.ДокументыТаблица.ВыделенныеСтроки.Количество();
	//	//Элементы.Предложения.Видимость = Истина;
	//	Элементы.СтраницаВерификации.Видимость = Ложь;
	//	//Элементы.ОсновныеЭлементыФормы.Видимость = Ложь;
	//	Элементы.ГруппаРеквизитыТЧ.Видимость = Ложь;
	//	Элементы.ПанельДокументов.Заголовок = "";
	//	Элементы.УдалитьДокумент.Доступность = Ложь;
	//	Элементы.ОтправитьЛайк.Доступность = Ложь;
	//	Элементы.ОтправитьДокументНаТестирование.Доступность = Ложь;
	//	Элементы.ЗагрузитьДокументы.Доступность = Ложь;
	//	Возврат;
	//ИначеЕсли ТекущаяСтрокаЯчейки = ТекущаяСтрокаДерево И ТекущаяСтрокаДерево <> Неопределено И КоличествоВыделенныхСтрокДерева = Элементы.ДокументыТаблица.ВыделенныеСтроки.Количество() Тогда
	//	Возврат;
	//ИначеЕсли ТекущаяСтрокаДерево = Неопределено И ДокументыТаблица.Количество() > 0 Тогда
	//	ПерваяСтрока = ДокументыТаблица[0].ПолучитьИдентификатор();
	//	ТекущаяСтрокаДерево = ПерваяСтрока;
	//	Элементы.ДокументыТаблица.ТекущаяСтрока = ТекущаяСтрокаДерево;
	//	ДокументыТаблицаПриАктивизацииЯчейки(Элемент, истина);
	//	Возврат;
	//Иначе
	//	Элементы.Предложения.Видимость = Ложь;
	//	Элементы.СтраницаВерификации.Видимость = истина;
	//	//Элементы.ОсновныеЭлементыФормы.Видимость = истина;
	//	Элементы.УдалитьДокумент.Доступность = истина;
	//	Элементы.ОтправитьЛайк.Доступность = Истина;
	//	Элементы.ОтправитьДокументНаТестирование.Доступность = Истина;
	//	Элементы.ЗагрузитьДокументы.Доступность = Истина;
	//КонецЕсли;
	//
	//УсловнаяОбработкаАктивизации = Ложь;

	//КоличествоВыделенныхСтрокДерева = Элементы.ДокументыТаблица.ВыделенныеСтроки.Количество();
	//ТекущаяСтрокаЯчейки = Элементы.ДокументыТаблица.ТекущаяСтрока;
	//
	//Если НЕ УсловнаяОбработкаАктивизации Тогда
	//	
	//	МассивВыделенныхСтрок = Элементы.ДокументыТаблица.ВыделенныеСтроки;
	//	
	//	ПоказатьДокумент();

	//	Элементы.ДокументыТаблица.ВыделенныеСтроки.Очистить();
	//	Для Каждого ВыделеннаяСтрока Из МассивВыделенныхСтрок Цикл 
	//		Элементы.ДокументыТаблица.ВыделенныеСтроки.Добавить(ВыделеннаяСтрока);
	//	КонецЦикла;
	//	
	//	Если СписокИменРеквизтовШапки.Количество() > 0 Тогда
	//		МассивИДРазворачиваемыхСтрок = РазвернутьСтрокиШапки(СписокИменРеквизтовШапки.Скопировать(), РеквизитыШапки.ПолучитьЭлементы());
	//		СписокИменРеквизтовШапки.Очистить();
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события элемента ДокументыТаблица "ПриАктивизацииЯчейки"
//
&НаКлиенте
Процедура ОбновитьДокументыТаблица()

	РеквизитыШапкиСтроки = РеквизитыШапки.ПолучитьЭлементы();
	РеквизитыШапкиСтроки.Очистить();
	
	МассивДокументовСОшибками = Новый Массив();//При восстановлении сессии может возникнуть ситуация, когда стуктура документа содержит ошибки. Эти документы будут удалены.
	
	Для каждого Документ Из ТаблицаДанных Цикл
		Если Документ.ДокументИД = "" ИЛИ Документ.ДокументИД = Неопределено ИЛИ Документ.Наименование = Неопределено ИЛИ Документ.Наименование = "" ИЛИ Документ.Статус  = Неопределено ИЛИ  Документ.Шапка.Количество() = 0 Тогда
			МассивДокументовСОшибками.Добавить(Документ);
			Продолжить;
		КонецЕсли;
		Попытка
			МассивСтрок = ДокументыТаблица.НайтиСтроки(Новый Структура("ДокументИД", Документ.ДокументИД));
			Если МассивСтрок.Количество() > 0 Тогда
			    СтрокаДокумента = МассивСтрок[0];
			Иначе
				СтрокаДокумента = ДокументыТаблица.Добавить();
				СтрокаДокумента.ДокументИД = Документ.ДокументИД;
			КонецЕсли;
			СтрокаДокумента.Наименование = Документ.Наименование;
			СтрокаДокумента.ДатаПолучения = Документ.ДатаПолучения;
			СтрокаДокумента.Статус = Документ.Статус;
			СтрокаДокумента.ВидДокумента = Документ.ВидДокумента;
		Исключение
			МассивДокументовСОшибками.Добавить(Документ);
		КонецПопытки;
	КонецЦикла;
	
	Для Каждого Документ Из МассивДокументовСОшибками Цикл
		ТаблицаДанных.Удалить(Документ);
	КонецЦикла;
	
	//ДокументыТаблица.Сортировать(СортироватьПо);  //!!!
	//Элементы.РеквизитыШапки.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;                                           
	
	Если ДокументыТаблица.Количество() > 0 Тогда
		//Элементы.ДокументыТаблица.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды элемента ДокументыТаблица "Выбор"
//
&НаКлиенте
Процедура ДокументыТаблицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ДеревоНаименование" Тогда
		ИД = Элемент.ТекущиеДанные.ДокументИД;
		МассивДокументов = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка",ИД, 1));
		Если МассивДокументов.Количество() > 0 Тогда
			Документ = МассивДокументов[0];
			Если Документ.СсылкаДокумент <> "" И Документ.СсылкаДокумент <> Неопределено Тогда 
				ПараметрыОткрытияФормы = Новый Структура("Ключ", Документ.СсылкаДокумент);
				ОткрытьФорму(СтруктураОписанийДокументов[Документ.ВидДокумента].МетаданныеИмяОбъекта + ".ФормаОбъекта", ПараметрыОткрытияФормы);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры



// Процедура выполняет заполнение данных таб. части при изменении на сервере
//
&НаСервере
Процедура ПроверитьНаСервере(ИД, ИндексСтрокиТЧ, ИмяЭлемента, ЗначениеЭлемента, СтруктураИзменяемыхРеквизитов) 
	
	Документ = Неопределено;
	МассивДокументов = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ИД, 1));
	Если МассивДокументов.Количество() > 0 Тогда
		Документ = МассивДокументов[0];
	КонецЕсли;
	ТЧ = Документ.ТЧ;
	СтрокаДокумента = Документ.ТЧ[?(ИндексСтрокиТЧ = 0 ,"Стр0",("Стр" + Формат(ИндексСтрокиТЧ, "ЧГ=0")))];
	Реквизит = СтрокаДокумента[ИмяЭлемента];
	Если НЕ Реквизит.ИтоговоеЗначение = ЗначениеЭлемента Тогда
		Для каждого ИзменяемыйРеквизитСтруктура Из СтруктураИзменяемыхРеквизитов Цикл
			СтрокаДокумента[ИзменяемыйРеквизитСтруктура.Ключ].ИтоговоеЗначение = ИзменяемыйРеквизитСтруктура.Значение.ЗначениеЭлемента;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////
//События дополнительных элементов формы

// Процедура - обработчик события элемента СортироватьПо "ПриИзменении"
//
&НаКлиенте
Процедура СортироватьПоПриИзменении(Элемент)
	
	Если Элементы.ДокументыТаблица.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийДокументИД = Элементы.ДокументыТаблица.ТекущиеДанные.ДокументИД;
	ТекущаяСтраницаДокумента = Неопределено;

	// запоминаем выделенные строки
	МассивИДВыделенныхСтрок = Новый Массив;
	Для каждого ИДВыделеннойСтроки Из Элементы.ДокументыТаблица.ВыделенныеСтроки Цикл
		ВыделеннаяСтрока = ДокументыТаблица.НайтиПоИдентификатору(ИДВыделеннойСтроки);
		МассивИДВыделенныхСтрок.Добавить(ВыделеннаяСтрока.ДокументИД);
	КонецЦикла;
	
	Элементы.ДокументыТаблица.ВыделенныеСтроки.Очистить();
	ДокументыТаблица.Сортировать(СортироватьПо);
	
КонецПроцедуры

// Процедура - обработчик события элемента Пользователь "Нажатие"
//
&НаКлиенте
Процедура ПользовательНажатие(Элемент)
	
	СтруктураРесурсов = ПолучитьДанныеОРесурсах();
	Если СтруктураРесурсов <> Неопределено Тогда
		КоличествоДнейЛицензии = СтруктураРесурсов.КоличествоДнейЛицензии;
		КоличествоСтраницЛицензии = СтруктураРесурсов.КоличествоСтраницЛицензии;
	Иначе
		КоличествоДнейЛицензии = 0;
		КоличествоСтраницЛицензии = 0;
	КонецЕсли;
	ПараметрыДляПередачи = Новый Структура("ESDLИДАккаунта, ESDLИДПользователя, ESDLТокен, ESDLФИОПользователя, ESDLEmailПользователя, ESDLPhoneNumberПользователя, КоличествоДнейЛицензии, КоличествоСтраницЛицензии", 
								 ESDLИДАккаунта, ESDLИДПользователя, ESDLТокен, ESDLФИОПользователя, ESDLEmailПользователя, ESDLPhoneNumberПользователя, КоличествоДнейЛицензии, КоличествоСтраницЛицензии);
	ФормаДанныеПользователя = ПолучитьФорму(ПрефиксИмениФорм + "УпрДанныеПользователя", ПараметрыДляПередачи, ЭтаФорма);
	ФормаДанныеПользователя.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаДанныеПользователя.Открыть();

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                                          
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                                          
// ШАБЛОН ПРОГРАММЫ "EFSOL: ЗАГРУЗКА ДОКУМЕНТОВ"  кастомизированный для конфигурации "Бухгалтерия предприятия"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                                          
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                                          
                                                                                                                                                                                           
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОПРЕДЕЛЕНИЯ КАСТОМИЗИРУЕМЫХ ПАРАМЕТРОВ РАБОТЫ ПРОГРАММЫ ///////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       
// Функция создает таблицу настроек сопоставления и загрузки документов
// 		Для каждого вида документа добавляется свой перечень настроек
//
// Параметры:
//
// Возвращаемое значение:
//		ТаблицаНастроек, тип "ТаблицаЗначений"
//
&НаСервере
Функция ТаблицаНастроекЗаполнить() Экспорт
	
	ТаблицанастроекЗначение = РеквизитФормыВЗначение("ТаблицаНастроек", Тип("ТаблицаЗначений"));	
	ТаблицаНастроекПоУмолчанию = ТаблицанастроекЗначение.Скопировать();
	
	Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
		//ПТУ
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ГруппаНоменклатурДляСопоставления";
		СтрокаНастройки.Синоним = "Приоритетные группы для поиска номенклатуры";
		СтрокаНастройки.Значение = Новый СписокЗначений();
		СтрокаНастройки.СоздаваемыйДокумент = "ПТУ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ПоискТолькоВПриоритетныхГруппах";
		СтрокаНастройки.Синоним = "Искать только в приоритетных группах";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "ПТУ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();         
		СтрокаНастройки.Идентификатор = "НечеткийПоискНоменклатуры";
		СтрокаНастройки.Синоним = "Производить нечеткий поиск номенклатуры";
		СтрокаНастройки.Значение = Истина;
		СтрокаНастройки.СоздаваемыйДокумент = "ПТУ";
		
		//СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		//СтрокаНастройки.Идентификатор = "ПоискПоАртикулу";
		//СтрокаНастройки.Синоним = "Поиск по артикулу";
		//СтрокаНастройки.Значение = Ложь;
		//СтрокаНастройки.СоздаваемыйДокумент = "ПТУ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ГруппаНовыхНоменклатур";
		СтрокаНастройки.Синоним = "Группа для новых номенклатур";
		СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.Номенклатура");
		СтрокаНастройки.СоздаваемыйДокумент = "ПТУ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "БратьДатуВходящего";
		СтрокаНастройки.Синоним = "Создавать документ с датой исходного документа";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "ПТУ";
		
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
			СтрокаНастройки.Идентификатор = "СоздаватьСФ";
			СтрокаНастройки.Синоним = "Создавать счет-фактуру полученный";
			СтрокаНастройки.Значение = Ложь;
			СтрокаНастройки.СоздаваемыйДокумент = "ПТУ";
			
			СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
			СтрокаНастройки.Идентификатор = "СпособЗачетаАвансов";
			СтрокаНастройки.Синоним = "Способ зачета авансов";
			СтрокаНастройки.Значение = ПустоеЗначениеТипа("ПеречислениеСсылка.СпособыЗачетаАвансов");
			СтрокаНастройки.СоздаваемыйДокумент = "ПТУ";
			
		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда 	
			//
			//Если Лев(Метаданные.Версия, 4) = "11.2" ИЛИ Лев(Метаданные.Версия, 3) = "2.0" Тогда
			//	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
			//	СтрокаНастройки.Идентификатор = "СоздаватьСФ";
			//	СтрокаНастройки.Синоним = "Создавать счет-фактуру полученный";
			//	СтрокаНастройки.Значение = Ложь;
			//	СтрокаНастройки.СоздаваемыйДокумент = "ПТУ";
			//КонецЕсли;
			
			СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
			СтрокаНастройки.Идентификатор = "ВидНоменклатурТовар";
			СтрокаНастройки.Синоним = "Вид номенклатур для новых номенклатур(Товары)";
			СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.ВидыНоменклатуры");
			СтрокаНастройки.СоздаваемыйДокумент = "ПТУ";
			
			Если НЕ ИмяШаблона = "Розница 2.2" Тогда
			СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
			СтрокаНастройки.Идентификатор = "ВидНоменклатурУслуга";
			СтрокаНастройки.Синоним = "Вид номенклатур для новых номенклатур(Услуги)";
			СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.ВидыНоменклатуры");
			СтрокаНастройки.СоздаваемыйДокумент = "ПТУ";
			КонецЕсли;
		КонецЕсли;
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "КонтрагентГрузо";
		СтрокаНастройки.Синоним = "Контрагент является грузоотправителем";
		СтрокаНастройки.Значение = Истина;
		СтрокаНастройки.СоздаваемыйДокумент = "ПТУ";
		
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
			СтрокаНастройки.Идентификатор = "ОрганизацияГрузо";
			СтрокаНастройки.Синоним = "Организация является грузополучателем";
			СтрокаНастройки.Значение = Истина;
			СтрокаНастройки.СоздаваемыйДокумент = "ПТУ";
			
		КонецЕсли;
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ВклНДСБезУчетаНДС";
		СтрокаНастройки.Синоним = "Включить НДС в стоимость без учета НДС";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "ПТУ";

		
		
		//ПТ
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ГруппаНоменклатурДляСопоставления";
		СтрокаНастройки.Синоним = "Приоритетные группы для поиска номенклатуры";
		СтрокаНастройки.Значение = Новый СписокЗначений();
		СтрокаНастройки.СоздаваемыйДокумент = "ПТ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ПоискТолькоВПриоритетныхГруппах";
		СтрокаНастройки.Синоним = "Искать только в приоритетных группах";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "ПТ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();         
		СтрокаНастройки.Идентификатор = "НечеткийПоискНоменклатуры";
		СтрокаНастройки.Синоним = "Производить нечеткий поиск номенклатуры";
		СтрокаНастройки.Значение = Истина;
		СтрокаНастройки.СоздаваемыйДокумент = "ПТ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ГруппаНовыхНоменклатур";
		СтрокаНастройки.Синоним = "Группа для новых номенклатур";
		СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.Номенклатура");
		СтрокаНастройки.СоздаваемыйДокумент = "ПТ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "БратьДатуВходящего";
		СтрокаНастройки.Синоним = "Создавать документ с датой исходного документа";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "ПТ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ВидНоменклатурТовар";
		СтрокаНастройки.Синоним = "Вид номенклатур для новых номенклатур(Товары)";
		СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.ВидыНоменклатуры");
		СтрокаНастройки.СоздаваемыйДокумент = "ПТ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ВклНДСБезУчетаНДС";
		СтрокаНастройки.Синоним = "Включить НДС в стоимость без учета НДС";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "ПТ";

		
		//СП
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ГруппаНоменклатурДляСопоставления";
		СтрокаНастройки.Синоним = "Приоритетные группы для поиска номенклатуры";
		СтрокаНастройки.Значение = Новый СписокЗначений();
		СтрокаНастройки.СоздаваемыйДокумент = "СП";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ПоискТолькоВПриоритетныхГруппах";
		СтрокаНастройки.Синоним = "Искать только в приоритетных группах";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "СП";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();         
		СтрокаНастройки.Идентификатор = "НечеткийПоискНоменклатуры";
		СтрокаНастройки.Синоним = "Производить нечеткий поиск номенклатуры";
		СтрокаНастройки.Значение = Истина;
		СтрокаНастройки.СоздаваемыйДокумент = "СП";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ГруппаНовыхНоменклатур";
		СтрокаНастройки.Синоним = "Группа для новых номенклатур";
		СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.Номенклатура");
		СтрокаНастройки.СоздаваемыйДокумент = "СП";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "БратьДатуВходящего";
		СтрокаНастройки.Синоним = "Создавать документ с датой исходного документа";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "СП";
		

		
		//РТУ
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ГруппаНоменклатурДляСопоставления";
		СтрокаНастройки.Синоним = "Приоритетные группы для поиска номенклатуры";
		СтрокаНастройки.Значение = Новый СписокЗначений;
		СтрокаНастройки.СоздаваемыйДокумент = "РТУ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ПоискТолькоВПриоритетныхГруппах";
		СтрокаНастройки.Синоним = "Искать только в приоритетных группах";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "РТУ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "НечеткийПоискНоменклатуры";
		СтрокаНастройки.Синоним = "Производить нечеткий поиск номенклатуры";
		СтрокаНастройки.Значение = Истина;
		СтрокаНастройки.СоздаваемыйДокумент = "РТУ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ГруппаНовыхНоменклатур";
		СтрокаНастройки.Синоним = "Группа для новых номенклатур";
		СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.Номенклатура");
		СтрокаНастройки.СоздаваемыйДокумент = "РТУ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "БратьДатуВходящего";
		СтрокаНастройки.Синоним = "Создавать документ с датой исходного документа";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "РТУ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "СоздаватьСФ";
		СтрокаНастройки.Синоним = "Создавать счет-фактуру выданный";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "РТУ";
		
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
			СтрокаНастройки.Идентификатор = "СпособЗачетаАвансов";
			СтрокаНастройки.Синоним = "Способ зачета авансов";
			СтрокаНастройки.Значение = ПустоеЗначениеТипа("ПеречислениеСсылка.СпособыЗачетаАвансов");
			СтрокаНастройки.СоздаваемыйДокумент = "РТУ";
			
		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда 
			
			СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
			СтрокаНастройки.Идентификатор = "ВидНоменклатурТовар";
			СтрокаНастройки.Синоним = "Вид номенклатур для новых номенклатур(Товары)";
			СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.ВидыНоменклатуры");
			СтрокаНастройки.СоздаваемыйДокумент = "РТУ";
			
			СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
			СтрокаНастройки.Идентификатор = "ВидНоменклатурУслуга";
			СтрокаНастройки.Синоним = "Вид номенклатур для новых номенклатур(Услуги)";
			СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.ВидыНоменклатуры");
			СтрокаНастройки.СоздаваемыйДокумент = "РТУ";
			
		КонецЕсли;
		
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ (ИмяШаблона = "УправлениеТорговлей 11.1" И Лев(Метаданные.Версия, 4) = "11.1") Тогда
			СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
			СтрокаНастройки.Идентификатор = "КонтрагентГрузо";
			СтрокаНастройки.Синоним = "Контрагент является грузополучателем";
			СтрокаНастройки.Значение = Истина;
			СтрокаНастройки.СоздаваемыйДокумент = "РТУ";
			
			СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
			СтрокаНастройки.Идентификатор = "ОрганизацияГрузо";
			СтрокаНастройки.Синоним = "Организация является грузоотправителем";
			СтрокаНастройки.Значение = Истина;
			СтрокаНастройки.СоздаваемыйДокумент = "РТУ";
			
		КонецЕсли;
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ВклНДСБезУчетаНДС";
		СтрокаНастройки.Синоним = "Включить НДС в стоимость без учета НДС";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "РТУ";

		
		//РТ
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ГруппаНоменклатурДляСопоставления";
		СтрокаНастройки.Синоним = "Приоритетные группы для поиска номенклатуры";
		СтрокаНастройки.Значение = Новый СписокЗначений;
		СтрокаНастройки.СоздаваемыйДокумент = "РТ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ПоискТолькоВПриоритетныхГруппах";
		СтрокаНастройки.Синоним = "Искать только в приоритетных группах";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "РТ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "НечеткийПоискНоменклатуры";
		СтрокаНастройки.Синоним = "Производить нечеткий поиск номенклатуры";
		СтрокаНастройки.Значение = Истина;
		СтрокаНастройки.СоздаваемыйДокумент = "РТ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ГруппаНовыхНоменклатур";
		СтрокаНастройки.Синоним = "Группа для новых номенклатур";
		СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.Номенклатура");
		СтрокаНастройки.СоздаваемыйДокумент = "РТ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "БратьДатуВходящего";
		СтрокаНастройки.Синоним = "Создавать документ с датой исходного документа";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "РТ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "СоздаватьСФ";
		СтрокаНастройки.Синоним = "Создавать счет-фактуру выданный";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "РТ";
			
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ВидНоменклатурТовар";
		СтрокаНастройки.Синоним = "Вид номенклатур для новых номенклатур(Товары)";
		СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.ВидыНоменклатуры");
		СтрокаНастройки.СоздаваемыйДокумент = "РТ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ВклНДСБезУчетаНДС";
		СтрокаНастройки.Синоним = "Включить НДС в стоимость без учета НДС";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "РТ";

		
	КонецЕсли;

	//КФЛ
	//пока нет настроек
	
	//ПП
	//пока нет настроек

	Если НЕ ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
	
		//ЗП
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ГруппаНоменклатурДляСопоставления";
		СтрокаНастройки.Синоним = "Приоритетные группы для поиска номенклатуры";
		СтрокаНастройки.Значение = Новый СписокЗначений;
		СтрокаНастройки.СоздаваемыйДокумент = "ЗП";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ПоискТолькоВПриоритетныхГруппах";
		СтрокаНастройки.Синоним = "Искать только в приоритетных группах";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "ЗП";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "НечеткийПоискНоменклатуры";
		СтрокаНастройки.Синоним = "Производить нечеткий поиск номенклатуры";
		СтрокаНастройки.Значение = Истина;
		СтрокаНастройки.СоздаваемыйДокумент = "ЗП";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "БратьДатуВходящего";
		СтрокаНастройки.Синоним = "Создавать документ с датой исходного документа";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "ЗП";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ГруппаНовыхНоменклатур";
		СтрокаНастройки.Синоним = "Группа для новых номенклатур";
		СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.Номенклатура");
		СтрокаНастройки.СоздаваемыйДокумент = "ЗП";
		
		Если ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
			СтрокаНастройки.Идентификатор = "ВидНоменклатурТовар";
			СтрокаНастройки.Синоним = "Вид номенклатур для новых номенклатур(Товары)";
			СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.ВидыНоменклатуры");
			СтрокаНастройки.СоздаваемыйДокумент = "ЗП";
			
			СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
			СтрокаНастройки.Идентификатор = "ВидНоменклатурУслуга";
			СтрокаНастройки.Синоним = "Вид номенклатур для новых номенклатур(Услуги)";
			СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.ВидыНоменклатуры");
			СтрокаНастройки.СоздаваемыйДокумент = "ЗП";
		КонецЕсли;
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ВклНДСБезУчетаНДС";
		СтрокаНастройки.Синоним = "Включить НДС в стоимость без учета НДС";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "ЗП";

	КонецЕсли;

	//ПН
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "ГруппаНоменклатурДляСопоставления";
	СтрокаНастройки.Синоним = "Приоритетные группы для поиска номенклатуры";
	СтрокаНастройки.Значение = Новый СписокЗначений();
	СтрокаНастройки.СоздаваемыйДокумент = "ПН";
	
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "ПоискТолькоВПриоритетныхГруппах";
	СтрокаНастройки.Синоним = "Искать только в приоритетных группах";
	СтрокаНастройки.Значение = Ложь;
	СтрокаНастройки.СоздаваемыйДокумент = "ПН";
	
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();         
	СтрокаНастройки.Идентификатор = "НечеткийПоискНоменклатуры";
	СтрокаНастройки.Синоним = "Производить нечеткий поиск номенклатуры";
	СтрокаНастройки.Значение = Истина;
	СтрокаНастройки.СоздаваемыйДокумент = "ПН";
		
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "ГруппаНовыхНоменклатур";
	СтрокаНастройки.Синоним = "Группа для новых номенклатур";
	СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.Номенклатура");
	СтрокаНастройки.СоздаваемыйДокумент = "ПН";

	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "БратьДатуВходящего";
	СтрокаНастройки.Синоним = "Создавать документ с датой исходного документа";
	СтрокаНастройки.Значение = Ложь;
	СтрокаНастройки.СоздаваемыйДокумент = "ПН";
	
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "СоздаватьСФ";
	СтрокаНастройки.Синоним = "Создавать счет-фактуру полученный";
	СтрокаНастройки.Значение = Ложь;
	СтрокаНастройки.СоздаваемыйДокумент = "ПН";
	
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "ВклНДСБезУчетаНДС";
	СтрокаНастройки.Синоним = "Включить НДС в стоимость без учета НДС";
	СтрокаНастройки.Значение = Ложь;
	СтрокаНастройки.СоздаваемыйДокумент = "ПН";

	
	//РН
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "ГруппаНоменклатурДляСопоставления";
	СтрокаНастройки.Синоним = "Приоритетные группы для поиска номенклатуры";
	СтрокаНастройки.Значение = Новый СписокЗначений();
	СтрокаНастройки.СоздаваемыйДокумент = "РН";
	
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "ПоискТолькоВПриоритетныхГруппах";
	СтрокаНастройки.Синоним = "Искать только в приоритетных группах";
	СтрокаНастройки.Значение = Ложь;
	СтрокаНастройки.СоздаваемыйДокумент = "РН";
	
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();         
	СтрокаНастройки.Идентификатор = "НечеткийПоискНоменклатуры";
	СтрокаНастройки.Синоним = "Производить нечеткий поиск номенклатуры";
	СтрокаНастройки.Значение = Истина;
	СтрокаНастройки.СоздаваемыйДокумент = "РН";
		
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "ГруппаНовыхНоменклатур";
	СтрокаНастройки.Синоним = "Группа для новых номенклатур";
	СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.Номенклатура");
	СтрокаНастройки.СоздаваемыйДокумент = "РН";

	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "БратьДатуВходящего";
	СтрокаНастройки.Синоним = "Создавать документ с датой исходного документа";
	СтрокаНастройки.Значение = Ложь;
	СтрокаНастройки.СоздаваемыйДокумент = "РН";
	
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "СоздаватьСФ";
	СтрокаНастройки.Синоним = "Создавать счет-фактуру выданный";
	СтрокаНастройки.Значение = Ложь;
	СтрокаНастройки.СоздаваемыйДокумент = "РН";
	
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "ВклНДСБезУчетаНДС";
	СтрокаНастройки.Синоним = "Включить НДС в стоимость без учета НДС";
	СтрокаНастройки.Значение = Ложь;
	СтрокаНастройки.СоздаваемыйДокумент = "РН";
	
	//АВР
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "ГруппаНоменклатурДляСопоставления";
	СтрокаНастройки.Синоним = "Приоритетные группы для поиска номенклатуры";
	СтрокаНастройки.Значение = Новый СписокЗначений();
	СтрокаНастройки.СоздаваемыйДокумент = "АВР";
	
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "ПоискТолькоВПриоритетныхГруппах";
	СтрокаНастройки.Синоним = "Искать только в приоритетных группах";
	СтрокаНастройки.Значение = Ложь;
	СтрокаНастройки.СоздаваемыйДокумент = "АВР";
	
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();         
	СтрокаНастройки.Идентификатор = "НечеткийПоискНоменклатуры";
	СтрокаНастройки.Синоним = "Производить нечеткий поиск номенклатуры";
	СтрокаНастройки.Значение = Истина;
	СтрокаНастройки.СоздаваемыйДокумент = "АВР";
		
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "ГруппаНовыхНоменклатур";
	СтрокаНастройки.Синоним = "Группа для новых номенклатур";
	СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.Номенклатура");
	СтрокаНастройки.СоздаваемыйДокумент = "АВР";

	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "БратьДатуВходящего";
	СтрокаНастройки.Синоним = "Создавать документ с датой исходного документа";
	СтрокаНастройки.Значение = Истина;
	СтрокаНастройки.СоздаваемыйДокумент = "АВР";
	
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "СоздаватьСФ";
	СтрокаНастройки.Синоним = "Создавать счет-фактуру выданный";
	СтрокаНастройки.Значение = Ложь;
	СтрокаНастройки.СоздаваемыйДокумент = "АВР";
	
	Возврат ТаблицаНастроекПоУмолчанию;
	
КонецФункции

// Функция для определения списка справочников, для которых необходимо использовать Словарь соответствий
//
// Параметры:
//
// Возвращаемое значение:
//   	Перечень имен справочников разделенный запятой, тип "Строка"
//
&НаСервере
Функция ЗаполнитьСписокЗначенийСправочникиСловаряСоответствий() Экспорт
	
	СписокЗначенийСправочникиСловаряСоответствий.Добавить("Организации",,Истина);
	СписокЗначенийСправочникиСловаряСоответствий.Добавить("Контрагенты",,Истина);
	СписокЗначенийСправочникиСловаряСоответствий.Добавить("Номенклатура",,Истина);
	Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда      
		СписокЗначенийСправочникиСловаряСоответствий.Добавить("СтраныМира","Страны мира",Истина);
	КонецЕсли;

КонецФункции

// Функция создает структуру, содержащую описания всех видов создаваемых документов
//
// Параметры:
//
// Возвращаемое значение:
//		СтруктураОписанийДокументов, тип "Структура"
//
&НаСервере
Функция СоздатьСтруктуруОписанийДокументов()  Экспорт
	
	СтруктураОписанийДокументов = Новый Структура;
	
	// В структуру описаний документов добавляются элементы, где ключ - обозначение вида документа, 
	// а значение  - структура описания данного вида документа, создаваемая функцией "СтруктураОписанияДокументаЗаполнить"
	// Для каждого вида создаваемого в функцию "СтруктураОписанияДокументаЗаполнить" добавляем раздел с описание структуры данного вида документа
	//
	// Пример: 
	// 		Для создания документа ПоступлениеТоваровУслуг вводим обозначение "ПТУ", 
	//		добавляем в функцию "СтруктураОписанияДокументаЗаполнить" заполнение структуры документа для "ПТУ",
	//		выполняем команду:
	//		СтруктураОписанийДокументов.Вставить("ПТУ", СтруктураОписанияДокументаЗаполнить("ПТУ");
	
	Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
		СтруктураОписанийДокументов.Вставить("ПТУ", СтруктураОписанияДокументаЗаполнить("ПТУ"));
		СтруктураОписанийДокументов.Вставить("РТУ", СтруктураОписанияДокументаЗаполнить("РТУ"));
		СтруктураОписанийДокументов.Вставить("КФЛ", СтруктураОписанияДокументаЗаполнить("КФЛ"));	
		Если НЕ ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			СтруктураОписанийДокументов.Вставить("ЗП", СтруктураОписанияДокументаЗаполнить("ЗП"));
		КонецЕсли;
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			СтруктураОписанийДокументов.Вставить("СП", СтруктураОписанияДокументаЗаполнить("СП"));
			СтруктураОписанийДокументов.Вставить("ПП", СтруктураОписанияДокументаЗаполнить("ПП"));
		КонецЕсли;
	ИначеЕсли ИмяШаблона = "Розница 2.2" Тогда
		СтруктураОписанийДокументов.Вставить("ПТ", СтруктураОписанияДокументаЗаполнить("ПТ"));
		СтруктураОписанийДокументов.Вставить("РТ", СтруктураОписанияДокументаЗаполнить("РТ"));	
		СтруктураОписанийДокументов.Вставить("ЗП", СтруктураОписанияДокументаЗаполнить("ЗП"));
	ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
		СтруктураОписанийДокументов.Вставить("ПН", СтруктураОписанияДокументаЗаполнить("ПН"));
		СтруктураОписанийДокументов.Вставить("РН", СтруктураОписанияДокументаЗаполнить("РН"));
		СтруктураОписанийДокументов.Вставить("АВР", СтруктураОписанияДокументаЗаполнить("АВР"));
		СтруктураОписанийДокументов.Вставить("КФЛ", СтруктураОписанияДокументаЗаполнить("КФЛ"));
		СтруктураОписанийДокументов.Вставить("ЗП", СтруктураОписанияДокументаЗаполнить("ЗП"));
		СтруктураОписанийДокументов.Вставить("ПП", СтруктураОписанияДокументаЗаполнить("ПП"));
	КонецЕсли;
	
	Возврат СтруктураОписанийДокументов;
	
КонецФункции

// Функция создает структуру, содержащую описание заданного вида документа
//
// Параметры:
// 		ВидДокумента - вид загружаемого в базу документа
//
// Возвращаемое значение:
//		СтруктураОписанияДокумента, тип "Структура", содержит следующие элементы:
//			ключ "МетаданныеИмя", значение - имя создаваемого объекта метаданных
//			ключ "СинонимДокумента", значение - синоним документа, отображаемый пользователю
//			ключ "Шапка", значение - таблица описания шапки документа
//			ключ "ТЧ", значение - таблица описания табличной части документа (если документ не содержит табличной части, Неопределено)
//
&НаСервере
Функция СтруктураОписанияДокументаЗаполнить(ВидДокумента)
	
	// Внимание!
	// Добавлять реквизиты шапки и табличной части в таблицу описаний следует в том порядке, 
	// в котором должно выполняться их сопоставление
	// Например:
	// 		Для сопоставления реквизита "ДоговорКонтрагента" должны быть определены реквизиты "Контрагент" и "ВидДоговора",
	//		поэтому сперва добавляются реквизиты "Контрагент" и "ВидДоговора", а затем "ДоговорКонтрагента"
	
	МетаданныеИмяОбъекта = "";
	СинонимДокумента = "";
	Шапка = Неопределено;
	ТЧ = Неопределено;
	ШаблонТаблицаОписанияДокументаЗначение = РеквизитФормыВЗначение("ШаблонТаблицаОписанияДокумента", Тип("ТаблицаЗначений"));
	
	Если ВидДокумента = "ПТУ" Тогда
		
		Если (ИмяШаблона = "УправлениеТорговлей 11.1" И ВерсияКонфигурации = "11.4") ИЛИ (ИмяШаблона = "КомплекснаяАвтоматизация 2.0" И ВерсияКонфигурации = "2.4") Тогда
			МетаданныеИмяОбъекта = "Документ.ПриобретениеТоваровУслуг";
			СинонимДокумента = "Приобретение товаров и услуг";
		Иначе
			МетаданныеИмяОбъекта = "Документ.ПоступлениеТоваровУслуг";
			СинонимДокумента = "Поступление товаров и услуг";
		КонецЕсли;
		//Описание шапки документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента("Основные", "Основные", , , , , , , 1, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента("ОрганизацияИНН", , "Строка", , , Ложь, "DestINN", "Основные");                                
		ДобавитьРеквизитТаблицыОписанияДокумента("ОрганизацияКПП", , "Строка", , , Ложь, "DestKPP", "Основные");                                
		ДобавитьРеквизитТаблицыОписанияДокумента("Организация", , "СправочникСсылка", "Организации", , , "DesCompany", "Основные", 3);
		ДобавитьРеквизитТаблицыОписанияДокумента("НомерВходящегоДокументаДокумент", "Входящий номер", "Строка", , , Ложь, "DocNum", "Основные");
		ДобавитьРеквизитТаблицыОписанияДокумента("НомерВходящегоДокумента", "Входящий номер", "Строка", , , , "[СтрЗаменить(Параметры.Шапка.НомерВходящегоДокументаДокумент.ИтоговоеЗначение, ""№"", """")]", "Основные", 4);
		ДобавитьРеквизитТаблицыОписанияДокумента("ДатаВходящегоДокумента", "Входящая дата", "Дата", , , , "DocDate", "Основные", 5);
		ДобавитьРеквизитТаблицыОписанияДокумента("Дата", , "Дата", , , ,"[?(Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение <> Неопределено, Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение, ТекущаяДата())]", "Основные", 2);	
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("ВалютаДокумента", "Валюта документа", "СправочникСсылка", "Валюты", , Ложь, "DocCur", "ЦеныИВалюты", 23);	
		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0"  Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("Валюта", "Валюта документа", "СправочникСсылка", "Валюты", , Ложь, "DocCur", "ЦеныИВалюты", 23);
			ДобавитьРеквизитТаблицыОписанияДокумента("ВалютаВзаиморасчетов", "Валюта взаиморасчетов", "СправочникСсылка", "Валюты", , Ложь, "[Константы.ВалютаРегламентированногоУчета.Получить()]", "ЦеныИВалюты", 24);
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента("ИНН", , "Строка", , , , "IssINN", "Контрагент", 7);                                
		ДобавитьРеквизитТаблицыОписанияДокумента("КПП", , "Строка", , , , "IssKPP", "Контрагент", 8);
		ДобавитьРеквизитТаблицыОписанияДокумента("АдресКонтрагента", "Адрес контрагента", "Строка", , , , "IssAddres", "Контрагент", 9);                                                                          
		ДобавитьРеквизитТаблицыОписанияДокумента("Контрагент", , "СправочникСсылка", "Контрагенты", , , "IssCompany", "Основные", 6, Истина);
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("ВидДоговора", , "ПеречислениеСсылка", "ВидыДоговоровКонтрагентов", , Ложь, "[Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком]");
			ДобавитьРеквизитТаблицыОписанияДокумента("ДоговорКонтрагента", "Договор контрагента", "СправочникСсылка", "ДоговорыКонтрагентов", "Контрагент", , "[""Основной договор""]", "Основные", 10);		
			ДобавитьРеквизитТаблицыОписанияДокумента("Склад", , "СправочникСсылка", "Склады", , ,  "[ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию(""ОсновнойСклад"")]", "Основные", 11);	
			ДобавитьРеквизитТаблицыОписанияДокумента("СпособЗачетаАвансов", "Способ зачета авансов", "ПеречислениеСсылка", "СпособыЗачетаАвансов", , ,"[?(не ЗначениеЗаполнено(Параметры.СтрокаТЧ), Перечисления.СпособыЗачетаАвансов.Автоматически, Параметры.СтрокаТЧ)]", "Основные", 12);	
			ДобавитьРеквизитТаблицыОписанияДокумента("Счета", "Счета", , , , , , , 13);
			ДобавитьРеквизитТаблицыОписанияДокумента("СчетаУчета", "Счета учета", "Структура", , , Ложь, "[БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Справочники.Организации.ПустаяСсылка(), Справочники.Контрагенты.ПустаяСсылка(),Справочники.ДоговорыКонтрагентов.ПустаяСсылка())]", "Счета");
			ДобавитьРеквизитТаблицыОписанияДокумента("СчетУчетаРасчетовПоАвансам", "Счет учета расчетов по авансам", "ПланСчетовСсылка", "Хозрасчетный", , , "[?(Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетАвансов = Неопределено,ПланыСчетов.Хозрасчетный.ПустаяСсылка(),Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетАвансов)]", "Счета", 14);
			ДобавитьРеквизитТаблицыОписанияДокумента("СчетУчетаРасчетовПоТаре", "Счет учета расчетов по таре", "ПланСчетовСсылка", "Хозрасчетный", , , "[?(Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетУчетаТары = Неопределено,ПланыСчетов.Хозрасчетный.ПустаяСсылка(),Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетУчетаТары)]", "Счета", 15);
			ДобавитьРеквизитТаблицыОписанияДокумента("СчетУчетаРасчетовСКонтрагентом", "Счет учета расчетов с контрагентом", "ПланСчетовСсылка", "Хозрасчетный", , , "[?(Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетРасчетов = Неопределено,ПланыСчетов.Хозрасчетный.ПустаяСсылка(),Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетРасчетов)]", "Счета", 16);
			ДобавитьРеквизитТаблицыОписанияДокумента("Дополнительно", "Дополнительно", , , , , , , 17);
			ДобавитьРеквизитТаблицыОписанияДокумента("Ответственный", , "СправочникСсылка", "Пользователи", , , "[Пользователи.ТекущийПользователь()]", "Дополнительно", 18);
			ДобавитьРеквизитТаблицыОписанияДокумента("ГрузополучательДокумент", , "Строка", , , Ложь, "DesCompany", "Дополнительно");
			ДобавитьРеквизитТаблицыОписанияДокумента("Грузополучатель", , "СправочникСсылка", "Контрагенты", , , "[?(ВРег(Параметры.Шапка.ГрузополучательДокумент.ИтоговоеЗначение) = ""ОНЖЕ"" ИЛИ ВРег(Параметры.Шапка.ГрузополучательДокумент.ИтоговоеЗначение) = ""ОН ЖЕ"", Лев(Параметры.Шапка.Организация.ИтоговоеЗначение, 100), Лев(Параметры.Шапка.ГрузополучательДокумент.ИтоговоеЗначение, 100))]", "Дополнительно", 20);
		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("ТипДоговора", , "ПеречислениеСсылка", "ТипыДоговоров", , Ложь, "[Перечисления.ТипыДоговоров.СПоставщиком]");
			ДобавитьРеквизитТаблицыОписанияДокумента("Договор", "Договор контрагента", "СправочникСсылка", "ДоговорыКонтрагентов", "Контрагент", , "[""Основной договор""]", "Основные", 10);		
			ДобавитьРеквизитТаблицыОписанияДокумента("Склад", , "СправочникСсылка", "Склады", , ,  "[БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(""ОсновнойСклад"")]", "Основные", 11);	
			ДобавитьРеквизитТаблицыОписанияДокумента("Дополнительно", "Дополнительно", , , , , , , 17);
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента("Комментарий", , "Строка", , , ,  "[""ИмяПрограммы/"" + Формат(ТекущаяДата(), ""ДФ='дд.ММ.гггг ЧЧ:мм:сс'"")+ ""/"" + ИмяПользователя()]", "Дополнительно", 21);
		ДобавитьРеквизитТаблицыОписанияДокумента("ЦеныИВалюты", "Цены и валюты", , , , Ложь, , , 22);
		ДобавитьРеквизитТаблицыОписанияДокумента("ГрузоотправительДокумент", , "Строка", , , Ложь, "Consignor", "Дополнительно");
		ДобавитьРеквизитТаблицыОписанияДокумента("Грузоотправитель", , "СправочникСсылка", "Контрагенты", , , "[?(ВРег(Параметры.Шапка.ГрузоотправительДокумент.ИтоговоеЗначение) = ""ОНЖЕ"" ИЛИ ВРег(Параметры.Шапка.ГрузоотправительДокумент.ИтоговоеЗначение) = ""ОН ЖЕ"", Лев(Параметры.Шапка.Контрагент.ИтоговоеЗначение, 100), Лев(Параметры.Шапка.ГрузоотправительДокумент.ИтоговоеЗначение, 100))]", "Дополнительно", 19);
		ДобавитьРеквизитТаблицыОписанияДокумента("СтруктураКурсаВзаиморасчетов", , "Структура", , , Ложь, "[?(ЗначениеНеЗаполнено(Параметры.Шапка.ВалютаДокумента.ИтоговоеЗначение),Неопределено,МодульВалютногоУчета.ПолучитьКурсВалюты(Параметры.Шапка.ВалютаДокумента.ИтоговоеЗначение, ТекущаяДата()))]", "ЦеныИВалюты");
		ДобавитьРеквизитТаблицыОписанияДокумента("КурсВзаиморасчетов", "Курс взаиморасчетов", "Число", , , Ложь, "[?(ЗначениеНеЗаполнено(Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение), 1, Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение.Курс)]");	
		ДобавитьРеквизитТаблицыОписанияДокумента("КратностьВзаиморасчетов", "Кратность взаиморасчетов", "Число", , , Ложь, "[?(ЗначениеНеЗаполнено(Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение),1 , Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение.Кратность)]", "ЦеныИВалюты");	
		ДобавитьРеквизитТаблицыОписанияДокумента("РегистрироватьЦеныПоставщика", "Регистрировать цены поставщика", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("УчитыватьНДС", "Учитывать НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");                                      
			ДобавитьРеквизитТаблицыОписанияДокумента("СуммаВключаетНДС", "Сумма включает НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("НалогообложениеНДС", "Налогообложение", "Строка",, , Ложь, "[Закупка  не облагается НДС]", "ЦеныИВалюты");                                      
			ДобавитьРеквизитТаблицыОписанияДокумента("ЦенаВключаетНДС", "Цена Включает НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
			ДобавитьРеквизитТаблицыОписанияДокумента("СуммаДокумента", , "Число", , , Ложь, "Sum");
			ДобавитьРеквизитТаблицыОписанияДокумента("СуммаВзаиморасчетов", , "Число", , , Ложь, "[Параметры.Шапка.СуммаДокумента.ИтоговоеЗначение]");
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента("Всего", , "Число", , , Ложь, "Sum");
		ДобавитьРеквизитТаблицыОписанияДокумента("ВсегоНДС", "НДС (в т.ч.)", "Число", , , Ложь, "SumOfTaxes");
		ДобавитьРеквизитТаблицыОписанияДокумента("Итого", , "Число", , , Ложь, "TotalSum");
		ДобавитьРеквизитТаблицыОписанияДокумента("ПометитьУслуги", , "Булево", , , Ложь, "[Истина]");
		ДобавитьРеквизитТаблицыОписанияДокумента("СтавкаНДС", "% НДС", "ПеречислениеСсылка", "СтавкиНДС", , Ложь, , "ЦеныИВалюты");	
		Шапка = ТаблицаОписанияДокумента.Скопировать();
		
		//Описание табличной части документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("Услуга", "Усл.", "Булево", , , , "[Ложь]", , 1, , Ложь);
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента("НомерГТД", "Номер ГТД", "СправочникСсылка", "НомераГТД", , , "Decl", , 10);
		ДобавитьРеквизитТаблицыОписанияДокумента("Номенклатура", "Номенклатура", "СправочникСсылка", "Номенклатура", , , "Descript", , 2);
		ДобавитьРеквизитТаблицыОписанияДокумента("ЕдиницаИзмеренияКод", , "Строка", , , Ложь, "UnitCode");
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("ЕдиницаИзмерения", "Ед.изм.", "СправочникСсылка", "КлассификаторЕдиницИзмерения", , , "Unit", , 3);
			ДобавитьРеквизитТаблицыОписанияДокумента("Количество", "К-во", "Число", , , , "Qty", , 4);
		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			Если (ИмяШаблона = "УправлениеТорговлей 11.1" И НЕ Лев(Метаданные.Версия, 4) = "11.1") ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
				ДобавитьРеквизитТаблицыОписанияДокумента("ЕдиницаИзмерения", "Ед.изм.", "СправочникСсылка", "УпаковкиЕдиницыИзмерения", , , "Unit", , 3);
			Иначе
				ДобавитьРеквизитТаблицыОписанияДокумента("ЕдиницаИзмерения", "Ед.изм.", "СправочникСсылка", "ЕдиницыИзмерения", , , "Unit", , 3);
			КонецЕсли;
			ДобавитьРеквизитТаблицыОписанияДокумента("КоличествоУпаковок", "Количество", "Число", , , , "Qty", , 4);
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента("КодТНВЭД", "Код ТНВЭД", "Строка", , ,  Ложь, "DescriptCode", , 3);
		ДобавитьРеквизитТаблицыОписанияДокумента("Цена", , "Число", , , , "Price", , 5);
		ДобавитьРеквизитТаблицыОписанияДокумента("Сумма", , "Число", , , , "Cost", , 6);
		ДобавитьРеквизитТаблицыОписанияДокумента("СтавкаНДС", "% НДС", "ПеречислениеСсылка", "СтавкиНДС", , , "TaxRate", , 7, , Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента("СуммаНДС", "НДС", "Число", , , , "TaxSum", , 8);
		ДобавитьРеквизитТаблицыОписанияДокумента("Всего", , "Число", , , , "SumWithTax", , 9);
		ДобавитьРеквизитТаблицыОписанияДокумента("СтранаПроисхожденияКод", , "Строка", , , Ложь, "CountryCode");
		ДобавитьРеквизитТаблицыОписанияДокумента("СтранаПроисхождения", "Страна пр.", "СправочникСсылка", "СтраныМира", , , "Country", , 11);
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("СчетУчета", "Счет учета", "ПланСчетовСсылка", "Хозрасчетный", , , "[ПланыСчетов.Хозрасчетный.НайтиПоКоду(""41.01"")]", , 12);
			ДобавитьРеквизитТаблицыОписанияДокумента("СчетУчетаНДС", "Счет учета НДС", "ПланСчетовСсылка", "Хозрасчетный", , , "[ПланыСчетов.Хозрасчетный.НайтиПоКоду(""19.03"")]", , 13);
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента("ГруппаНоменклатуры", "Группа номенклатуры", "СправочникСсылка", "Номенклатура", , , , , 15, , Ложь);
		Если ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("СуммаСНДС", , "Число", , , Ложь, "SumWithTax");
			ДобавитьРеквизитТаблицыОписанияДокумента("ВидНоменклатуры", "Вид номенклатуры", "СправочникСсылка", "ВидыНоменклатуры", , , , , 14, , Ложь);
		КонецЕсли;	
		
		ТЧ = ТаблицаОписанияДокумента.Скопировать();
	/////////////////////////////////////////////////////////////////
	ИначеЕсли ВидДокумента = "ПТ" Тогда
		
		МетаданныеИмяОбъекта = "Документ.ПоступлениеТоваров";
		СинонимДокумента = "Поступление товаров";
		
		//Описание шапки документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента("Основные", "Основные", , , , , , , 1, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента("ОрганизацияИНН", , "Строка", , , Ложь, "DestINN", "Основные");  
		ДобавитьРеквизитТаблицыОписанияДокумента("ОрганизацияКПП", , "Строка", , , Ложь, "DestKPP", "Основные");                                
		ДобавитьРеквизитТаблицыОписанияДокумента("Организация", , "СправочникСсылка", "Организации", , , "DesCompany", "Основные", 3);
		ДобавитьРеквизитТаблицыОписанияДокумента("НомерВходящегоДокументаДокумент", "Входящий номер", "Строка", , , Ложь, "DocNum", "Основные");
		ДобавитьРеквизитТаблицыОписанияДокумента("НомерВходящегоДокумента", "Входящий номер", "Строка", , , , "[СтрЗаменить(Параметры.Шапка.НомерВходящегоДокументаДокумент.ИтоговоеЗначение, ""№"", """")]", "Основные", 4);
		ДобавитьРеквизитТаблицыОписанияДокумента("ДатаВходящегоДокумента", "Входящая дата", "Дата", , , , "DocDate", "Основные", 5);
		ДобавитьРеквизитТаблицыОписанияДокумента("Дата", , "Дата", , , ,"[?(Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение <> Неопределено, Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение, ТекущаяДата())]", "Основные", 2);	
		ДобавитьРеквизитТаблицыОписанияДокумента("ИНН", , "Строка", , , , "IssINN", "Контрагент", 7);                                
		ДобавитьРеквизитТаблицыОписанияДокумента("КПП", , "Строка", , , , "IssKPP", "Контрагент", 8);
		ДобавитьРеквизитТаблицыОписанияДокумента("АдресКонтрагента", "Адрес контрагента", "Строка", , , , "IssAddres", "Контрагент", 9);                                                                          
		ДобавитьРеквизитТаблицыОписанияДокумента("Контрагент", , "СправочникСсылка", "Контрагенты", , , "IssCompany", "Основные", 6, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента("Склад", , "СправочникСсылка", "Склады", , ,  "[БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(""ОсновнойСклад"")]", "Основные", 11);	
		ДобавитьРеквизитТаблицыОписанияДокумента("Дополнительно", "Дополнительно", , , , , , , 17);
		ДобавитьРеквизитТаблицыОписанияДокумента("Комментарий", , "Строка", , , ,  "[""ИмяПрограммы/"" + Формат(ТекущаяДата(), ""ДФ='дд.ММ.гггг ЧЧ:мм:сс'"")+ ""/"" + ИмяПользователя()]", "Дополнительно", 21);
		ДобавитьРеквизитТаблицыОписанияДокумента("ЦеныИВалюты", "Цены и валюты", , , , Ложь, , , 22);
		ДобавитьРеквизитТаблицыОписанияДокумента("УчитыватьНДС", "Учитывать НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");   
		ДобавитьРеквизитТаблицыОписанияДокумента("ЦенаВключаетНДС", "Цена Включает НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
		ДобавитьРеквизитТаблицыОписанияДокумента("СуммаДокумента", , "Число", , , Ложь, "Sum");
		ДобавитьРеквизитТаблицыОписанияДокумента("Всего", , "Число", , , Ложь, "Sum");
		ДобавитьРеквизитТаблицыОписанияДокумента("ВсегоНДС", "НДС (в т.ч.)", "Число", , , Ложь, "SumOfTaxes");
		ДобавитьРеквизитТаблицыОписанияДокумента("Итого", , "Число", , , Ложь, "TotalSum");
		ДобавитьРеквизитТаблицыОписанияДокумента("СтавкаНДС", "% НДС", "ПеречислениеСсылка", "СтавкиНДС", , Ложь, , "ЦеныИВалюты");	
		Шапка = ТаблицаОписанияДокумента.Скопировать();
		
		//Описание табличной части документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента("Номенклатура", "Номенклатура", "СправочникСсылка", "Номенклатура", , , "Descript", , 2);
		ДобавитьРеквизитТаблицыОписанияДокумента("КодТНВЭД", "Код ТНВЭД", "Строка", , ,  Ложь, "DescriptCode", , 3);
		ДобавитьРеквизитТаблицыОписанияДокумента("ЕдиницаИзмеренияКод", , "Строка", , , Ложь, "UnitCode");
		ДобавитьРеквизитТаблицыОписанияДокумента("ЕдиницаИзмерения", "Ед.изм.", "СправочникСсылка", "БазовыеЕдиницыИзмерения", , , "Unit", , 3);
		ДобавитьРеквизитТаблицыОписанияДокумента("КоличествоУпаковок", "Количество", "Число", , , , "Qty", , 4);
		ДобавитьРеквизитТаблицыОписанияДокумента("Цена", , "Число", , , , "Price", , 5);
		ДобавитьРеквизитТаблицыОписанияДокумента("Сумма", , "Число", , , , "Cost", , 6);
		ДобавитьРеквизитТаблицыОписанияДокумента("СтавкаНДС", "% НДС", "ПеречислениеСсылка", "СтавкиНДС", , , "TaxRate", , 7, , Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента("СуммаНДС", "НДС", "Число", , , , "TaxSum", , 8);
		ДобавитьРеквизитТаблицыОписанияДокумента("Всего", , "Число", , , , "SumWithTax", , 9);
		ДобавитьРеквизитТаблицыОписанияДокумента("СтранаПроисхожденияКод", , "Строка", , , Ложь, "CountryCode");
		ДобавитьРеквизитТаблицыОписанияДокумента("СтранаПроисхождения", "Страна пр.", "СправочникСсылка", "СтраныМира", , , "Country", , 11);
		ДобавитьРеквизитТаблицыОписанияДокумента("ГруппаНоменклатуры", "Группа номенклатуры", "СправочникСсылка", "Номенклатура", , , , , 15, , Ложь);
		ДобавитьРеквизитТаблицыОписанияДокумента("СуммаСНДС", , "Число", , , Ложь, "SumWithTax");
		ДобавитьРеквизитТаблицыОписанияДокумента("ВидНоменклатуры", "Вид номенклатуры", "СправочникСсылка", "ВидыНоменклатуры", , , , , 14, , Ложь);	
		
		ТЧ = ТаблицаОписанияДокумента.Скопировать();
	/////////////////////////////////////////////////////////////////
	ИначеЕсли ВидДокумента = "СП" Тогда
		
		МетаданныеИмяОбъекта = "Документ.СчетНаОплатуПоставщика";
		СинонимДокумента = "Счет от поставщика";

		//Описание шапки документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента("Основные", "Основные", , , , , , , 1, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента("ОрганизацияИНН", , "Строка", , , Ложь, "DestINN", "Основные");   		
		ДобавитьРеквизитТаблицыОписанияДокумента("ОрганизацияКПП", , "Строка", , , Ложь, "DestKPP", "Основные");                                
		ДобавитьРеквизитТаблицыОписанияДокумента("Организация", , "СправочникСсылка", "Организации", , , "DesCompany", "Основные", 3);
		ДобавитьРеквизитТаблицыОписанияДокумента("НомерВходящегоДокументаДокумент", "Входящий номер", "Строка", , , Ложь, "DocNum", "Основные");
		ДобавитьРеквизитТаблицыОписанияДокумента("НомерВходящегоДокумента", "Входящий номер", "Строка", , , , "[СтрЗаменить(Параметры.Шапка.НомерВходящегоДокументаДокумент.ИтоговоеЗначение, ""№"", """")]", "Основные", 4);
		ДобавитьРеквизитТаблицыОписанияДокумента("ДатаВходящегоДокумента", "Входящая дата", "Дата", , , , "DocDate", "Основные", 5);
		ДобавитьРеквизитТаблицыОписанияДокумента("Дата", , "Дата", , , ,"[?(Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение <> Неопределено, Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение, ТекущаяДата())]", "Основные", 2);				//ДобавитьРеквизитТаблицыОписанияДокумента("ВалютаДокумента", "Валюта документа", "СправочникСсылка", "Валюты", , Ложь, "DocCur", "ЦеныИВалюты", 23);	
		ДобавитьРеквизитТаблицыОписанияДокумента("ИНН", , "Строка", , , , "IssINN", "Контрагент", 7);                                
		ДобавитьРеквизитТаблицыОписанияДокумента("КПП", , "Строка", , , , "IssKPP", "Контрагент", 8);
		ДобавитьРеквизитТаблицыОписанияДокумента("АдресКонтрагента", "Адрес контрагента", "Строка", , , , "IssAddres", "Контрагент", 11);
		ДобавитьРеквизитТаблицыОписанияДокумента("Контрагент", , "СправочникСсылка", "Контрагенты", , , "IssCompany", "Основные", 6, Истина);
		//ДобавитьРеквизитТаблицыОписанияДокумента("СчетКонтрагентаДокумент", "Номер счета контрагента", "Строка", , , , "DestCurrentAccount", "Контрагент",9);
		ДобавитьРеквизитТаблицыОписанияДокумента("СчетБанка", "Счет банка", "Строка", , , Ложь, "CorrAccount", "Основные");
		ДобавитьРеквизитТаблицыОписанияДокумента("БикБанка", "Бик банка", "Строка", , , , "BIC", "Контрагент",10);
		ДобавитьРеквизитТаблицыОписанияДокумента("СчетКонтрагента", "Счет контрагента", "СправочникСсылка", "БанковскиеСчета", "Контрагент", , "DestCurrentAccount", "Основные", 12);
		ДобавитьРеквизитТаблицыОписанияДокумента("БанковскийСчет", "Счет организации", "СправочникСсылка", "БанковскиеСчета", "Организация", , , "Основные", 3);
		ДобавитьРеквизитТаблицыОписанияДокумента("ВидДоговора", , "ПеречислениеСсылка", "ВидыДоговоровКонтрагентов", , Ложь, "[Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком]");
		ДобавитьРеквизитТаблицыОписанияДокумента("ДоговорКонтрагента", "Договор контрагента", "СправочникСсылка", "ДоговорыКонтрагентов", "Контрагент", , "[""Основной договор""]", "Основные", 13);			
		ДобавитьРеквизитТаблицыОписанияДокумента("ВидДоговора", , "ПеречислениеСсылка", "ВидыДоговоровКонтрагентов", , Ложь, "[Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком]");
		ДобавитьРеквизитТаблицыОписанияДокумента("ВалютаДокумента", "Валюта документа", "СправочникСсылка", "Валюты", , Ложь, "DocCur", "ЦеныИВалюты", 23);	
		ДобавитьРеквизитТаблицыОписанияДокумента("Дополнительно", "Дополнительно", , , , , , , 17);
		ДобавитьРеквизитТаблицыОписанияДокумента("Ответственный", , "СправочникСсылка", "Пользователи", , , "[Пользователи.ТекущийПользователь()]", "Дополнительно", 18);
		ДобавитьРеквизитТаблицыОписанияДокумента("Комментарий", , "Строка", , , ,  "[""ИмяПрограммы/"" + Формат(ТекущаяДата(), ""ДФ='дд.ММ.гггг ЧЧ:мм:сс'"")+ ""/"" + ИмяПользователя()]", "Дополнительно", 21);
		ДобавитьРеквизитТаблицыОписанияДокумента("КурсВзаиморасчетов", "Курс взаиморасчетов", "Число", , , Ложь, "[?(ЗначениеНеЗаполнено(Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение), 1, Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение.Курс)]");	
		ДобавитьРеквизитТаблицыОписанияДокумента("КратностьВзаиморасчетов", "Кратность взаиморасчетов", "Число", , , Ложь, "[?(ЗначениеНеЗаполнено(Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение),1 , Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение.Кратность)]", "ЦеныИВалюты");	
		ДобавитьРеквизитТаблицыОписанияДокумента("ЦеныИВалюты", "Цены и валюты", , , , Ложь, , , 22);
		ДобавитьРеквизитТаблицыОписанияДокумента("СтруктураКурсаВзаиморасчетов", , "Структура", , , Ложь, "[?(ЗначениеНеЗаполнено(Параметры.Шапка.ВалютаДокумента.ИтоговоеЗначение),Неопределено,МодульВалютногоУчета.ПолучитьКурсВалюты(Параметры.Шапка.ВалютаДокумента.ИтоговоеЗначение, ТекущаяДата()))]", "ЦеныИВалюты");
		ДобавитьРеквизитТаблицыОписанияДокумента("РегистрироватьЦеныПоставщика", "Регистрировать цены поставщика", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
		ДобавитьРеквизитТаблицыОписанияДокумента("УчитыватьНДС", "Учитывать НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");                                      
		ДобавитьРеквизитТаблицыОписанияДокумента("СуммаВключаетНДС", "Сумма включает НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
		ДобавитьРеквизитТаблицыОписанияДокумента("Всего", , "Число", , , Ложь, "Sum");
		ДобавитьРеквизитТаблицыОписанияДокумента("ВсегоНДС", "НДС (в т.ч.)", "Число", , , Ложь, "SumOfTaxes");
		ДобавитьРеквизитТаблицыОписанияДокумента("Итого", , "Число", , , Ложь, "TotalSum");
		ДобавитьРеквизитТаблицыОписанияДокумента("ПометитьУслуги", , "Булево", , , Ложь, "[Истина]");
		ДобавитьРеквизитТаблицыОписанияДокумента("СтавкаНДС", "% НДС", "ПеречислениеСсылка", "СтавкиНДС", , Ложь, , "ЦеныИВалюты");	
		Шапка = ТаблицаОписанияДокумента.Скопировать();
		 
		//Описание табличной части документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента("Услуга", "Усл.", "Булево", , , , "[Ложь]", , 1, , Ложь);
		ДобавитьРеквизитТаблицыОписанияДокумента("Номенклатура", "Номенклатура", "СправочникСсылка", "Номенклатура", , , "Descript", , 2);
		ДобавитьРеквизитТаблицыОписанияДокумента("КодТНВЭД", "Код ТНВЭД", "Строка", , ,  Ложь, "DescriptCode", , 3);
		ДобавитьРеквизитТаблицыОписанияДокумента("ЕдиницаИзмеренияКод", , "Строка", , , Ложь, "UnitCode");
		ДобавитьРеквизитТаблицыОписанияДокумента("ЕдиницаИзмерения", "Ед.изм.", "СправочникСсылка", "КлассификаторЕдиницИзмерения", , , "Unit", , 3);
		ДобавитьРеквизитТаблицыОписанияДокумента("Количество", "К-во", "Число", , , , "Qty", , 4);
		ДобавитьРеквизитТаблицыОписанияДокумента("Цена", , "Число", , , , "Price", , 5);
		ДобавитьРеквизитТаблицыОписанияДокумента("Сумма", , "Число", , , , "Cost", , 6);
		ДобавитьРеквизитТаблицыОписанияДокумента("СтавкаНДС", "% НДС", "ПеречислениеСсылка", "СтавкиНДС", , , "TaxRate", , 7, , Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента("СуммаНДС", "НДС", "Число", , , , "TaxSum", , 8);
		ДобавитьРеквизитТаблицыОписанияДокумента("Всего", , "Число", , , , "SumWithTax", , 9);
		ДобавитьРеквизитТаблицыОписанияДокумента("ГруппаНоменклатуры", "Группа номенклатуры", "СправочникСсылка", "Номенклатура", , , , , 15, , Ложь);
		//
		
		ТЧ = ТаблицаОписанияДокумента.Скопировать();	
		
	/////////////////////////////////////////////////////////////////
	
	ИначеЕсли ВидДокумента = "РТУ" Тогда
		
		МетаданныеИмяОбъекта = "Документ.РеализацияТоваровУслуг";             
		СинонимДокумента = "Реализация товаров и услуг";
	
		//Описание шапки документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента("Основные", "Основные", , , , , , , 1, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента("ОрганизацияИНН", , "Строка", , , Ложь, "DestINN", "Основные");                                
		ДобавитьРеквизитТаблицыОписанияДокумента("ОрганизацияКПП", , "Строка", , , Ложь, "DestKPP", "Основные");                                
		ДобавитьРеквизитТаблицыОписанияДокумента("Организация", , "СправочникСсылка", "Организации", , , "IssCompany", "Основные", 3);
		ДобавитьРеквизитТаблицыОписанияДокумента("НомерВходящегоДокументаДокумент", "Входящий номер", "Строка", , , Ложь, "DocNum", "Основные");
		ДобавитьРеквизитТаблицыОписанияДокумента("НомерВходящегоДокумента", "Входящий номер", "Строка", , , , "[СтрЗаменить(Параметры.Шапка.НомерВходящегоДокументаДокумент.ИтоговоеЗначение, ""№"", """")]", "Основные", 4);
		ДобавитьРеквизитТаблицыОписанияДокумента("ДатаВходящегоДокумента", "Входящая дата", "Дата", , , , "DocDate", "Основные", 5);
		ДобавитьРеквизитТаблицыОписанияДокумента("Дата", , "Дата", , , ,"[?(Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение <> Неопределено, Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение, ТекущаяДата())]", "Основные", 2);
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("ВалютаДокумента", "Валюта документа", "СправочникСсылка", "Валюты", , Ложь, "DocCur", "ЦеныИВалюты", 23);	
		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("Валюта", "Валюта документа", "СправочникСсылка", "Валюты", , Ложь, "DocCur", "ЦеныИВалюты", 23);
			ДобавитьРеквизитТаблицыОписанияДокумента("ВалютаВзаиморасчетов", "Валюта взаиморасчетов", "СправочникСсылка", "Валюты", , Ложь, "[Константы.ВалютаРегламентированногоУчета.Получить()]", "ЦеныИВалюты", 24);
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента("ИНН", , "Строка", , , , "DestINN", "Контрагент", 7);
		ДобавитьРеквизитТаблицыОписанияДокумента("КПП", , "Строка", , , , "DestKPP", "Контрагент", 8);
		ДобавитьРеквизитТаблицыОписанияДокумента("АдресКонтрагента", "Адрес контрагента", "Строка", , , , "DestAddres", "Контрагент", 9);                                                                          
		ДобавитьРеквизитТаблицыОписанияДокумента("Контрагент", , "СправочникСсылка", "Контрагенты", , , "DesCompany", "Основные", 6, Истина);
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("ВидДоговора", , "ПеречислениеСсылка", "ВидыДоговоровКонтрагентов", , Ложь, "[Перечисления.ВидыДоговоровКонтрагентов.СПокупателем]");
			ДобавитьРеквизитТаблицыОписанияДокумента("ДоговорКонтрагента", "Договор контрагента", "СправочникСсылка", "ДоговорыКонтрагентов", "Контрагент", , "[""Основной договор""]", "Основные", 10);		
			ДобавитьРеквизитТаблицыОписанияДокумента("Склад", , "СправочникСсылка", "Склады", , ,  "[ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию(""ОсновнойСклад"")]", "Основные", 11);	
			ДобавитьРеквизитТаблицыОписанияДокумента("СпособЗачетаАвансов", "Способ зачета авансов", "ПеречислениеСсылка", "СпособыЗачетаАвансов", , , "[?(не ЗначениеЗаполнено(Параметры.СтрокаТЧ), Перечисления.СпособыЗачетаАвансов.Автоматически, Параметры.СтрокаТЧ)]", "Основные", 12);		
			ДобавитьРеквизитТаблицыОписанияДокумента("Счета", "Счета", , , , , , , 13);
			ДобавитьРеквизитТаблицыОписанияДокумента("СчетаУчета", "Счета учета", "Структура", , , Ложь, "[БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Справочники.Организации.ПустаяСсылка(), Справочники.Контрагенты.ПустаяСсылка(),Справочники.ДоговорыКонтрагентов.ПустаяСсылка())]", "Счета");
			ДобавитьРеквизитТаблицыОписанияДокумента("СчетУчетаРасчетовПоАвансам", "Счет учета расчетов по авансам", "ПланСчетовСсылка", "Хозрасчетный", , , "[?(Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетАвансовПокупателя = Неопределено,ПланыСчетов.Хозрасчетный.ПустаяСсылка(),Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетАвансовПокупателя)]", "Счета", 14);
			ДобавитьРеквизитТаблицыОписанияДокумента("СчетУчетаРасчетовПоТаре", "Счет учета расчетов по таре", "ПланСчетовСсылка", "Хозрасчетный", , , "[?(Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетУчетаТарыПокупателя = Неопределено,ПланыСчетов.Хозрасчетный.ПустаяСсылка(),Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетУчетаТарыПокупателя)]", "Счета", 15);
			ДобавитьРеквизитТаблицыОписанияДокумента("СчетУчетаРасчетовСКонтрагентом", "Счет учета расчетов с контрагентом", "ПланСчетовСсылка", "Хозрасчетный", , , "[?(Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетРасчетовПокупателя = Неопределено,ПланыСчетов.Хозрасчетный.ПустаяСсылка(),Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетРасчетовПокупателя)]", "Счета", 16);
			ДобавитьРеквизитТаблицыОписанияДокумента("Дополнительно", "Дополнительно", , , , , , , 17);
			ДобавитьРеквизитТаблицыОписанияДокумента("Ответственный", , "СправочникСсылка", "Пользователи", , , "[Пользователи.ТекущийПользователь()]", "Дополнительно", 18);
			ДобавитьРеквизитТаблицыОписанияДокумента("ГрузоотправительДокумент", , "Строка", , , Ложь, "Consignor", "Дополнительно");
			ДобавитьРеквизитТаблицыОписанияДокумента("Грузоотправитель", , "СправочникСсылка", "Контрагенты", , , "[?(ВРег(Параметры.Шапка.ГрузоотправительДокумент.ИтоговоеЗначение) = ""ОНЖЕ"" ИЛИ ВРег(Параметры.Шапка.ГрузоотправительДокумент.ИтоговоеЗначение) = ""ОН ЖЕ"", Лев(Параметры.Шапка.Организация.ИтоговоеЗначение, 100), Лев(Параметры.Шапка.ГрузоотправительДокумент.ИтоговоеЗначение, 100))]", "Дополнительно", 19);
			ДобавитьРеквизитТаблицыОписанияДокумента("ГрузополучательДокумент", , "Строка", , , Ложь, "DesCompany", "Дополнительно");
			ДобавитьРеквизитТаблицыОписанияДокумента("Грузополучатель", , "СправочникСсылка", "Контрагенты", , , "[?(ВРег(Параметры.Шапка.ГрузополучательДокумент.ИтоговоеЗначение) = ""ОНЖЕ"" ИЛИ ВРег(Параметры.Шапка.ГрузополучательДокумент.ИтоговоеЗначение) = ""ОН ЖЕ"", Лев(Параметры.Шапка.Контрагент.ИтоговоеЗначение, 100), Лев(Параметры.Шапка.ГрузополучательДокумент.ИтоговоеЗначение, 100))]", "Дополнительно", 20);
		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("Соглашение", , "СправочникСсылка", "СоглашенияСКлиентами", , , "[""Основное соглашение""]", "Основные", 10);		
			ДобавитьРеквизитТаблицыОписанияДокумента("Склад", , "СправочникСсылка", "Склады", , ,  "[БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(""ОсновнойСклад"")]", "Основные", 11);	
			ДобавитьРеквизитТаблицыОписанияДокумента("Дополнительно", "Дополнительно", , , , , , , 17);
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента("Комментарий", , "Строка", , , ,  "[""ИмяПрограммы/"" + Формат(ТекущаяДата(), ""ДФ='дд.ММ.гггг ЧЧ:мм:сс'"")+ ""/"" + ИмяПользователя()]", "Дополнительно", 21);
		ДобавитьРеквизитТаблицыОписанияДокумента("ЦеныИВалюты", "Цены и валюты", , , , Ложь, , , 22);
		ДобавитьРеквизитТаблицыОписанияДокумента("СтруктураКурсаВзаиморасчетов", , "Структура", , , Ложь, "[?(ЗначениеНеЗаполнено(Параметры.Шапка.ВалютаДокумента.ИтоговоеЗначение),Неопределено,МодульВалютногоУчета.ПолучитьКурсВалюты(Параметры.Шапка.ВалютаДокумента.ИтоговоеЗначение, ТекущаяДата()))]", "ЦеныИВалюты");
		ДобавитьРеквизитТаблицыОписанияДокумента("КурсВзаиморасчетов", "Курс взаиморасчетов", "Число", , , Ложь, "[?(ЗначениеНеЗаполнено(Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение), 1, Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение.Курс)]");	
		ДобавитьРеквизитТаблицыОписанияДокумента("КратностьВзаиморасчетов", "Кратность взаиморасчетов", "Число", , , Ложь, "[?(ЗначениеНеЗаполнено(Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение),1 , Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение.Кратность)]", "ЦеныИВалюты");	
		ДобавитьРеквизитТаблицыОписанияДокумента("РегистрироватьЦеныПоставщика", "Регистрировать цены поставщика", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("УчитыватьНДС", "Учитывать НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");                                      
			ДобавитьРеквизитТаблицыОписанияДокумента("СуммаВключаетНДС", "Сумма включает НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("НалогообложениеНДС", "Налогообложение", "Строка",, , Ложь, "[Продажа  не облагается НДС]", "ЦеныИВалюты");                                      
			ДобавитьРеквизитТаблицыОписанияДокумента("ЦенаВключаетНДС", "Цена Включает НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
			ДобавитьРеквизитТаблицыОписанияДокумента("СуммаДокумента", , "Число", , , Ложь, "Sum");
			ДобавитьРеквизитТаблицыОписанияДокумента("СуммаВзаиморасчетов", , "Число", , , Ложь, "[Параметры.Шапка.СуммаДокумента.ИтоговоеЗначение]");	
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента("Всего", , "Число", , , Ложь, "Sum");
		ДобавитьРеквизитТаблицыОписанияДокумента("ВсегоНДС", "НДС (в т.ч.)", "Число", , , Ложь, "SumOfTaxes");
		ДобавитьРеквизитТаблицыОписанияДокумента("Итого", , "Число", , , Ложь, "TotalSum");
		ДобавитьРеквизитТаблицыОписанияДокумента("ПометитьУслуги", , "Булево", , , Ложь, "[Истина]");
		ДобавитьРеквизитТаблицыОписанияДокумента("СтавкаНДС", "% НДС", "ПеречислениеСсылка", "СтавкиНДС", , Ложь, , "ЦеныИВалюты");	

		Шапка = ТаблицаОписанияДокумента.Скопировать();
		
		//Описание табличной части документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("Услуга", "Усл.", "Булево", , , , "[Ложь]", , 1, , Ложь);
			ДобавитьРеквизитТаблицыОписанияДокумента("НомерГТД", "Номер ГТД", "СправочникСсылка", "НомераГТД", , , "Decl", , 10);
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента("Номенклатура", , "СправочникСсылка", "Номенклатура", , , "Descript", , 2);
		ДобавитьРеквизитТаблицыОписанияДокумента("КодТНВЭД", "Код ТНВЭД", "Строка", , ,  Ложь, "DescriptCode", , 3);
		ДобавитьРеквизитТаблицыОписанияДокумента("ЕдиницаИзмеренияКод", , "Строка", , , Ложь, "UnitCode");
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("ЕдиницаИзмерения", "Ед.изм.", "СправочникСсылка", "КлассификаторЕдиницИзмерения", , , "Unit", , 3);
			ДобавитьРеквизитТаблицыОписанияДокумента("Количество", "К-во", "Число", , , , "Qty", , 4);
		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			Если (ИмяШаблона = "УправлениеТорговлей 11.1" И НЕ Лев(Метаданные.Версия, 4) = "11.1") ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
				ДобавитьРеквизитТаблицыОписанияДокумента("ЕдиницаИзмерения", "Ед.изм.", "СправочникСсылка", "УпаковкиЕдиницыИзмерения", , , "Unit", , 2);	
			Иначе
				ДобавитьРеквизитТаблицыОписанияДокумента("ЕдиницаИзмерения", "Ед.изм.", "СправочникСсылка", "ЕдиницыИзмерения", , , "Unit", , 2);
			КонецЕсли;
			ДобавитьРеквизитТаблицыОписанияДокумента("КоличествоУпаковок", "Количество", "Число", , , , "Qty", , 3);
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента("Цена", , "Число", , , , "Price", , 5);
		ДобавитьРеквизитТаблицыОписанияДокумента("Сумма", , "Число", , , , "Cost", , 6);
		ДобавитьРеквизитТаблицыОписанияДокумента("СтавкаНДС", "% НДС", "ПеречислениеСсылка", "СтавкиНДС", , , "TaxRate", , 7, , Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента("СуммаНДС", "НДС", "Число", , , , "TaxSum", , 8);
		ДобавитьРеквизитТаблицыОписанияДокумента("Всего", , "Число", , , , "SumWithTax", , 9);
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("СтранаПроисхожденияКод", , "Строка", , , Ложь, "CountryCode");
			ДобавитьРеквизитТаблицыОписанияДокумента("СтранаПроисхождения", "Страна происхождения", "СправочникСсылка", "СтраныМира", , , "Country", , 11);
			ДобавитьРеквизитТаблицыОписанияДокумента("СчетУчета", "Счет учета", "ПланСчетовСсылка", "Хозрасчетный", , , "[Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетУчета]", , 12);
			ДобавитьРеквизитТаблицыОписанияДокумента("СчетДоходов", "Счет доходов", "ПланСчетовСсылка", "Хозрасчетный", , , "[Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетДоходов]", , 13);
			ДобавитьРеквизитТаблицыОписанияДокумента("СчетРасходов", "Счет расходов", "ПланСчетовСсылка", "Хозрасчетный", , , "[Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетРасходов]", , 14);								
			ДобавитьРеквизитТаблицыОписанияДокумента("СчетУчетаНДСПоРеализации", "Счет учета НДС по реализации", "ПланСчетовСсылка", "Хозрасчетный", , , "[Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетУчетаНДСПоРеализации]", , 15);
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента("ГруппаНоменклатуры", "Группа номенклатуры", "СправочникСсылка", "Номенклатура", , , , , 17, , Ложь);
		Если ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("СуммаСНДС", , "Число", , , Ложь, "SumWithTax");
			ДобавитьРеквизитТаблицыОписанияДокумента("ВидНоменклатуры", "Вид номенклатуры", "СправочникСсылка", "ВидыНоменклатуры", , , , , 11, , Ложь);
		КонецЕсли;
		ТЧ = ТаблицаОписанияДокумента.Скопировать();
		
	ИначеЕсли ВидДокумента = "РТ" Тогда
		
		МетаданныеИмяОбъекта = "Документ.РеализацияТоваров";
		СинонимДокумента = "Реализация товаров";
	
		//Описание шапки документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента("Основные", "Основные", , , , , , , 1, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента("ОрганизацияИНН", , "Строка", , , Ложь, "DestINN", "Основные");                                
		ДобавитьРеквизитТаблицыОписанияДокумента("ОрганизацияКПП", , "Строка", , , Ложь, "DestKPP", "Основные");                                
		ДобавитьРеквизитТаблицыОписанияДокумента("Организация", , "СправочникСсылка", "Организации", , , "IssCompany", "Основные", 3);
		ДобавитьРеквизитТаблицыОписанияДокумента("НомерВходящегоДокументаДокумент", "Входящий номер", "Строка", , , Ложь, "DocNum", "Основные");
		ДобавитьРеквизитТаблицыОписанияДокумента("НомерВходящегоДокумента", "Входящий номер", "Строка", , , , "[СтрЗаменить(Параметры.Шапка.НомерВходящегоДокументаДокумент.ИтоговоеЗначение, ""№"", """")]", "Основные", 4);
		ДобавитьРеквизитТаблицыОписанияДокумента("ДатаВходящегоДокумента", "Входящая дата", "Дата", , , , "DocDate", "Основные", 5);
		ДобавитьРеквизитТаблицыОписанияДокумента("Дата", , "Дата", , , ,"[?(Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение <> Неопределено, Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение, ТекущаяДата())]", "Основные", 2);
		ДобавитьРеквизитТаблицыОписанияДокумента("ИНН", , "Строка", , , , "DestINN", "Контрагент", 7);
		ДобавитьРеквизитТаблицыОписанияДокумента("КПП", , "Строка", , , , "DestKPP", "Контрагент", 8);
		ДобавитьРеквизитТаблицыОписанияДокумента("АдресКонтрагента", "Адрес контрагента", "Строка", , , , "DestAddres", "Контрагент", 9);                                                                          
		ДобавитьРеквизитТаблицыОписанияДокумента("Контрагент", , "СправочникСсылка", "Контрагенты", , , "DesCompany", "Основные", 6, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента("Склад", , "СправочникСсылка", "Склады", , ,  "[БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(""ОсновнойСклад"")]", "Основные", 11);	
		ДобавитьРеквизитТаблицыОписанияДокумента("Дополнительно", "Дополнительно", , , , , , , 17);
		ДобавитьРеквизитТаблицыОписанияДокумента("Комментарий", , "Строка", , , ,  "[""ИмяПрограммы/"" + Формат(ТекущаяДата(), ""ДФ='дд.ММ.гггг ЧЧ:мм:сс'"")+ ""/"" + ИмяПользователя()]", "Дополнительно", 21);
		ДобавитьРеквизитТаблицыОписанияДокумента("ЦеныИВалюты", "Цены и валюты", , , , Ложь, , , 22);
		ДобавитьРеквизитТаблицыОписанияДокумента("УчитыватьНДС", "Учитывать НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");   
		ДобавитьРеквизитТаблицыОписанияДокумента("ЦенаВключаетНДС", "Цена Включает НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
		ДобавитьРеквизитТаблицыОписанияДокумента("СуммаДокумента", , "Число", , , Ложь, "Sum");	
		ДобавитьРеквизитТаблицыОписанияДокумента("Всего", , "Число", , , Ложь, "Sum");
		ДобавитьРеквизитТаблицыОписанияДокумента("ВсегоНДС", "НДС (в т.ч.)", "Число", , , Ложь, "SumOfTaxes");
		ДобавитьРеквизитТаблицыОписанияДокумента("Итого", , "Число", , , Ложь, "TotalSum");
		ДобавитьРеквизитТаблицыОписанияДокумента("СтавкаНДС", "% НДС", "ПеречислениеСсылка", "СтавкиНДС", , Ложь, , "ЦеныИВалюты");	
		Шапка = ТаблицаОписанияДокумента.Скопировать();

		//Описание табличной части документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента("Номенклатура", , "СправочникСсылка", "Номенклатура", , , "Descript", , 2);
		ДобавитьРеквизитТаблицыОписанияДокумента("КодТНВЭД", "Код ТНВЭД", "Строка", , ,  Ложь, "DescriptCode", , 3);
		ДобавитьРеквизитТаблицыОписанияДокумента("ЕдиницаИзмеренияКод", , "Строка", , , Ложь, "UnitCode");
		ДобавитьРеквизитТаблицыОписанияДокумента("ЕдиницаИзмерения", "Ед.изм.", "СправочникСсылка", "БазовыеЕдиницыИзмерения", , , "Unit", , 2);	
		ДобавитьРеквизитТаблицыОписанияДокумента("КоличествоУпаковок", "Количество", "Число", , , , "Qty", , 3);
		ДобавитьРеквизитТаблицыОписанияДокумента("Цена", , "Число", , , , "Price", , 5);
		ДобавитьРеквизитТаблицыОписанияДокумента("Сумма", , "Число", , , , "Cost", , 6);
		ДобавитьРеквизитТаблицыОписанияДокумента("СтавкаНДС", "% НДС", "ПеречислениеСсылка", "СтавкиНДС", , , "TaxRate", , 7, , Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента("СуммаНДС", "НДС", "Число", , , , "TaxSum", , 8);
		ДобавитьРеквизитТаблицыОписанияДокумента("Всего", , "Число", , , , "SumWithTax", , 9);
		ДобавитьРеквизитТаблицыОписанияДокумента("ГруппаНоменклатуры", "Группа номенклатуры", "СправочникСсылка", "Номенклатура", , , , , 17, , Ложь);
		ДобавитьРеквизитТаблицыОписанияДокумента("СуммаСНДС", , "Число", , , Ложь, "SumWithTax");
		ДобавитьРеквизитТаблицыОписанияДокумента("ВидНоменклатуры", "Вид номенклатуры", "СправочникСсылка", "ВидыНоменклатуры", , , , , 11, , Ложь);
		ТЧ = ТаблицаОписанияДокумента.Скопировать();

	ИначеЕсли ВидДокумента = "КФЛ" Тогда
		
		МетаданныеИмяОбъекта = "Справочник.ФизическиеЛица";
		СинонимДокумента = "Карточка физического лица";
		
		//Описание шапки документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента("СтараяДата", , "Булево", , ,Ложь,"[Истина]", , 0);	
		ДобавитьРеквизитТаблицыОписанияДокумента("Фамилия", , "Строка", , , ,"PP_SurName", , 1);	
		ДобавитьРеквизитТаблицыОписанияДокумента("Имя", , "Строка", , , , "PP_Name", , 2);
		ДобавитьРеквизитТаблицыОписанияДокумента("Отчество", , "Строка", , , , "PP_SecName", , 3);
		ДобавитьРеквизитТаблицыОписанияДокумента("ДатаРождения", "Дата рождения", "Дата", , , , "PP_BirthDate", , 5);
		ДобавитьРеквизитТаблицыОписанияДокумента("МестоРождения", , "Строка", , , , "PP_BirthPlace", , 6);
		ДобавитьРеквизитТаблицыОписанияДокумента("Пол", , "ПеречислениеСсылка", "ПолФизическогоЛица", , , "PP_Sex", , 7);
		ДобавитьРеквизитТаблицыОписанияДокумента("ИНН", , "Строка", , , , "PP_INN", , 8);
		ДобавитьРеквизитТаблицыОписанияДокумента("СерияПаспорта", "Серия паспорта", "Строка", , , ,"PP_Ser", , 9);	
		ДобавитьРеквизитТаблицыОписанияДокумента("НомерПаспорта", "Номер паспорта", "Строка", , , ,"PP_Num", , 10);	
		ДобавитьРеквизитТаблицыОписанияДокумента("КемВыдан", "Кем выдан", "Строка", , , , "PP_Kem", , 11);
		ДобавитьРеквизитТаблицыОписанияДокумента("ДатаВыдачи", "Дата выдачи", "Дата", , , , "PP_Date", , 12);
		ДобавитьРеквизитТаблицыОписанияДокумента("КодПодразделения", "Код подразделения", "Строка", , , , "PP_Podr", , 13);
		//ДобавитьРеквизитТаблицыОписанияДокумента("Фото", , "Строка", , , Ложь, "Photo");
		Шапка = ТаблицаОписанияДокумента.Скопировать(); 
		
		//Описание табличной части документа
		ТЧ = Неопределено;
		
	ИначеЕсли ВидДокумента = "ЗП" Тогда
		
		МетаданныеИмяОбъекта = "Документ.ЗаказПоставщику";
		СинонимДокумента = "Заказ поставщику";                                                              
		                                         
		//Описание шапки документа              
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента("Основные", "Основные", , , , , , , 1, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента("ОрганизацияИНН", , "Строка", , , Ложь, "DestINN", "Основные");                                
		ДобавитьРеквизитТаблицыОписанияДокумента("ОрганизацияКПП", , "Строка", , , Ложь, "DestKPP", "Основные");                                
		ДобавитьРеквизитТаблицыОписанияДокумента("Организация", , "СправочникСсылка", "Организации", , , "DesCompany", "Основные", 3);
		ДобавитьРеквизитТаблицыОписанияДокумента("НомерВходящегоДокументаДокумент", "Входящий номер", "Строка", , , Ложь, "DocNum", "Основные");
		ДобавитьРеквизитТаблицыОписанияДокумента("НомерВходящегоДокумента", "Входящий номер", "Строка", , , , "[СтрЗаменить(Параметры.Шапка.НомерВходящегоДокументаДокумент.ИтоговоеЗначение, ""№"", """")]", "Основные", 4);
		ДобавитьРеквизитТаблицыОписанияДокумента("ДатаВходящегоДокумента", "Входящая дата", "Дата", , , , "DocDate", "Основные", 5);
		ДобавитьРеквизитТаблицыОписанияДокумента("Дата", , "Дата", , , ,"[?(Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение <> Неопределено, Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение, ТекущаяДата())]", "Основные", 2);	
		ЕСЛИ НЕ ИмяШаблона = "Розница 2.2" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("Валюта", "Валюта документа", "СправочникСсылка", "Валюты", , Ложь, "DocCur", "ЦеныИВалюты", 23);
			ДобавитьРеквизитТаблицыОписанияДокумента("ВалютаВзаиморасчетов", "Валюта взаиморасчетов", "СправочникСсылка", "Валюты", , Ложь, "[Константы.ВалютаРегламентированногоУчета.Получить()]", "ЦеныИВалюты", 24);
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента("ИНН", , "Строка", , , , "IssINN", "Контрагент", 7);
		ДобавитьРеквизитТаблицыОписанияДокумента("КПП", , "Строка", , , , "IssKPP", "Контрагент", 8);
		ДобавитьРеквизитТаблицыОписанияДокумента("АдресКонтрагента", "Адрес контрагента", "Строка", , , , "IssAddres", "Контрагент", 9);
		ДобавитьРеквизитТаблицыОписанияДокумента("Контрагент", , "СправочникСсылка", "Контрагенты", , , "IssCompany", "Основные", 6, Истина);
		Если ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("ВидДоговора", , "ПеречислениеСсылка", "ВидыДоговоров", , Ложь, "[Перечисления.ВидыДоговоров.СПоставщиком]");
			ДобавитьРеквизитТаблицыОписанияДокумента("Договор", "Договор контрагента", "СправочникСсылка", "ДоговорыКонтрагентов", "Контрагент", , "[""Основной договор""]", "Основные", 10);		
			ДобавитьРеквизитТаблицыОписанияДокумента("СтруктурнаяЕдиница", "Склад" , "СправочникСсылка", "СтруктурныеЕдиницы", , ,  "[УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), ""ОсновнойСклад"")]", "Основные", 11);	
		Иначе
			Если НЕ ИмяШаблона = "Розница 2.2" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("ТипДоговора", , "ПеречислениеСсылка", "ТипыДоговоров", , Ложь, "[Перечисления.ТипыДоговоров.СПоставщиком]");
			ДобавитьРеквизитТаблицыОписанияДокумента("Договор", "Договор контрагента", "СправочникСсылка", "ДоговорыКонтрагентов", "Контрагент", , "[""Основной договор""]", "Основные", 10);		
			КонецЕсли;
			ДобавитьРеквизитТаблицыОписанияДокумента("Склад", , "СправочникСсылка", "Склады", , ,  "[БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(""ОсновнойСклад"")]", "Основные", 11);	
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента("Дополнительно", "Дополнительно", , , , , , , 16);
		ДобавитьРеквизитТаблицыОписанияДокумента("Комментарий", , "Строка", , , ,  "[""ИмяПрограммы/"" + Формат(ТекущаяДата(), ""ДФ='дд.ММ.гггг ЧЧ:мм:сс'"")+ ""/"" + ИмяПользователя()]", "Дополнительно", 21);
		ДобавитьРеквизитТаблицыОписанияДокумента("ЦеныИВалюты", "Цены и валюты", , , , Ложь, , , 22);
		Если ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("НалогообложениеНДС", "Налогообложение", "ПеречислениеСсылка", "ТипыНалогообложенияНДС", , Ложь, "[Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС]", "ЦеныИВалюты");                                      
			ДобавитьРеквизитТаблицыОписанияДокумента("СуммаВключаетНДС", "Сумма включает НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
		Иначе
			Если ИмяШаблона = "Розница 2.2" Тогда
				ДобавитьРеквизитТаблицыОписанияДокумента("УчитыватьНДС", "Учитывать НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");   
				ДобавитьРеквизитТаблицыОписанияДокумента("ЦенаВключаетНДС", "Цена Включает НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
				ДобавитьРеквизитТаблицыОписанияДокумента("СуммаДокумента", , "Число", , , Ложь, "Sum");
			Иначе
				ДобавитьРеквизитТаблицыОписанияДокумента("СтруктураКурсаВзаиморасчетов", , "Структура", , , Ложь, "[?(ЗначениеНеЗаполнено(Параметры.Шапка.Валюта.ИтоговоеЗначение),Неопределено,МодульВалютногоУчета.ПолучитьКурсВалюты(Параметры.Шапка.Валюта.ИтоговоеЗначение, ТекущаяДата()))]", "ЦеныИВалюты");
				ДобавитьРеквизитТаблицыОписанияДокумента("КурсВзаиморасчетов", "Курс взаиморасчетов", "Число", , , Ложь, "[?(ЗначениеНеЗаполнено(Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение), 1, Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение.Курс)]");	
				ДобавитьРеквизитТаблицыОписанияДокумента("КратностьВзаиморасчетов", "Кратность взаиморасчетов", "Число", , , Ложь, "[?(ЗначениеНеЗаполнено(Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение),1 , Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение.Кратность)]", "ЦеныИВалюты");	
				ДобавитьРеквизитТаблицыОписанияДокумента("НалогообложениеНДС", "Налогообложение", "Строка",, , Ложь, "[Закупка  не облагается НДС]", "ЦеныИВалюты");                                      
				ДобавитьРеквизитТаблицыОписанияДокумента("ЦенаВключаетНДС", "Цена Включает НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
		КонецЕсли;
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента("СуммаДокумента", , "Число", , , Ложь, "Sum");
		ДобавитьРеквизитТаблицыОписанияДокумента("Всего", , "Число", , , Ложь, "Sum");
		ДобавитьРеквизитТаблицыОписанияДокумента("ВсегоНДС", "НДС (в т.ч.)", "Число", , , Ложь, "SumOfTaxes");
		ДобавитьРеквизитТаблицыОписанияДокумента("Итого", , "Число", , , Ложь, "TotalSum");
		ДобавитьРеквизитТаблицыОписанияДокумента("ПометитьУслуги", , "Булево", , , Ложь, "[Истина]");
		Если ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("СтавкаНДС", "% НДС", "СправочникСсылка", "СтавкиНДС", , Ложь, , "ЦеныИВалюты");	
		Иначе
			ДобавитьРеквизитТаблицыОписанияДокумента("СтавкаНДС", "% НДС", "ПеречислениеСсылка", "СтавкиНДС", , Ложь, , "ЦеныИВалюты");	
		КонецЕсли;
		Шапка = ТаблицаОписанияДокумента.Скопировать();
		
		//Описание табличной части документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		Если ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("Услуга", "Усл.", "Булево", , , , "[Ложь]", , 1, , Ложь);
		ИначеЕсли НЕ ИмяШаблона = "Розница 2.2" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("НомерГТД", "Номер ГТД", "СправочникСсылка", "НомераГТД", , , "Decl", , 9);
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента("Номенклатура", , "СправочникСсылка", "Номенклатура", , , "Descript", , 1);
		ДобавитьРеквизитТаблицыОписанияДокумента("КодТНВЭД", "Код ТНВЭД", "Строка", , ,  Ложь, "DescriptCode", , 3);
		ДобавитьРеквизитТаблицыОписанияДокумента("ЕдиницаИзмеренияКод", , "Строка", , , Ложь, "UnitCode");
		Если ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("ЕдиницаИзмерения", "Ед.изм.", "СправочникСсылка", "КлассификаторЕдиницИзмерения", , , "Unit", , 3);
			ДобавитьРеквизитТаблицыОписанияДокумента("Количество", "К-во", "Число", , , , "Qty", , 4);
			ДобавитьРеквизитТаблицыОписанияДокумента("СтавкаНДС", "% НДС", "СправочникСсылка", "СтавкиНДС", , , "TaxRate", , 7, , Истина);
		Иначе
			Если (ИмяШаблона = "УправлениеТорговлей 11.1" И НЕ Лев(Метаданные.Версия, 4) = "11.1") ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
				ДобавитьРеквизитТаблицыОписанияДокумента("ЕдиницаИзмерения", "Единица измерения", "СправочникСсылка", "УпаковкиЕдиницыИзмерения", , , "Unit", , 2);
			ИначеЕсли  ИмяШаблона = "Розница 2.2" Тогда
				ДобавитьРеквизитТаблицыОписанияДокумента("ЕдиницаИзмерения", "Ед.изм.", "СправочникСсылка", "БазовыеЕдиницыИзмерения", , , "Unit", , 2);	
			Иначе 
				ДобавитьРеквизитТаблицыОписанияДокумента("ЕдиницаИзмерения", "Единица измерения", "СправочникСсылка", "ЕдиницыИзмерения", , , "Unit", , 2);
			КонецЕсли;
			ДобавитьРеквизитТаблицыОписанияДокумента("КоличествоУпаковок", "Количество", "Число", , , , "Qty", , 3);
			ДобавитьРеквизитТаблицыОписанияДокумента("СтавкаНДС", "Ставка НДС", "ПеречислениеСсылка", "СтавкиНДС", , , "TaxRate", , 6, , Истина);
			ДобавитьРеквизитТаблицыОписанияДокумента("ВидНоменклатуры", "Вид номенклатуры", "СправочникСсылка", "ВидыНоменклатуры", , , , , 11, , Ложь);
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента("Цена", , "Число", , , , "Price", , 4);
		ДобавитьРеквизитТаблицыОписанияДокумента("Сумма", , "Число", , , ,  "Cost", , 5);
		ДобавитьРеквизитТаблицыОписанияДокумента("СуммаНДС", "Сумма НДС", "Число", , , , "TaxSum", , 7);
		ДобавитьРеквизитТаблицыОписанияДокумента("Всего", , "Число", , , , "SumWithTax", , 8);
		ДобавитьРеквизитТаблицыОписанияДокумента("СуммаСНДС", , "Число", , , Ложь, "SumWithTax", , 8);
		ДобавитьРеквизитТаблицыОписанияДокумента("СтранаПроисхожденияКод", , "Строка", , , Ложь, "CountryCode");
		ДобавитьРеквизитТаблицыОписанияДокумента("СтранаПроисхождения", "Страна происхождения", "СправочникСсылка", "СтраныМира", , , "Country", , 10);
		ДобавитьРеквизитТаблицыОписанияДокумента("ГруппаНоменклатуры", "Группа номенклатуры", "СправочникСсылка", "Номенклатура", , , , , 12, , Ложь);
		ТЧ = ТаблицаОписанияДокумента.Скопировать();
		
	ИначеЕсли ВидДокумента = "ПП" Тогда
		
		МетаданныеИмяОбъекта = "Документ.ПлатежноеПоручение";
		СинонимДокумента = "Платежное поручение";
		                                         
		//Описание шапки документа              
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента("Основные", "Основные", , , , , , , 1, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента("ОрганизацияИНН", , "Строка", , , Ложь, "DestINN", "Основные");                                
		ДобавитьРеквизитТаблицыОписанияДокумента("ОрганизацияКПП", , "Строка", , , Ложь, "DestKPP", "Основные");                                
		ДобавитьРеквизитТаблицыОписанияДокумента("Организация", , "СправочникСсылка", "Организации", , , "DesCompany", "Основные", 3);
		ДобавитьРеквизитТаблицыОписанияДокумента("НомерВходящегоДокументаДокумент", "Входящий номер", "Строка", , , Ложь, "DocNum", "Основные");
		ДобавитьРеквизитТаблицыОписанияДокумента("НомерВходящегоДокумента", "Входящий номер", "Строка", , , , "[СтрЗаменить(Параметры.Шапка.НомерВходящегоДокументаДокумент.ИтоговоеЗначение, ""№"", """")]", "Основные", 4);
		ДобавитьРеквизитТаблицыОписанияДокумента("ДатаВходящегоДокумента", "Входящая дата", "Дата", , , , "DocDate", "Основные", 5);
		//ДобавитьРеквизитТаблицыОписанияДокумента("НазначениеПлатежа", "Назначение платежа", "Строка", , , , "[""Счет №"" + Параметры.Шапка.НомерВходящегоДокументаДокумент.ИтоговоеЗначение + "" от "" + Формат(Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение, ""ДЛФ=Д"")]", "Основные", 3);
		ДобавитьРеквизитТаблицыОписанияДокумента("Дата", , "Дата", , , ,"[ТекущаяДата()]", "Основные", 2);	
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("ВалютаДокумента", "Валюта документа", "СправочникСсылка", "Валюты", , Ложь, "DocCur", "ЦеныИВалюты", 23);	
		ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("Валюта", "Валюта документа", "СправочникСсылка", "Валюты", , Ложь, "DocCur", "ЦеныИВалюты", 23);
			ДобавитьРеквизитТаблицыОписанияДокумента("ВалютаВзаиморасчетов", "Валюта взаиморасчетов", "СправочникСсылка", "Валюты", , Ложь, "[Константы.ВалютаУправленческогоУчета.Получить()]", "ЦеныИВалюты", 24);
	    КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента("ВалютаВзаиморасчетов", "Валюта взаиморасчетов", "СправочникСсылка", "Валюты", , Ложь, "[Константы.ВалютаУправленческогоУчета.Получить()]", "ЦеныИВалюты", 24);
		ДобавитьРеквизитТаблицыОписанияДокумента("ИНН", , "Строка", , , , "IssINN", "Контрагент", 7);
		ДобавитьРеквизитТаблицыОписанияДокумента("КПП", , "Строка", , , , "IssKPP", "Контрагент", 8);
		ДобавитьРеквизитТаблицыОписанияДокумента("АдресКонтрагента", "Адрес контрагента", "Строка", , , , "IssAddres", "Контрагент", 11);
		ДобавитьРеквизитТаблицыОписанияДокумента("Контрагент", , "СправочникСсылка", "Контрагенты", , , "IssCompany", "Основные", 6, Истина);
		//ДобавитьРеквизитТаблицыОписанияДокумента("СчетКонтрагентаДокумент", "Номер счета контрагента", "Строка", , , , "DestCurrentAccount", "Контрагент",9);
		ДобавитьРеквизитТаблицыОписанияДокумента("СчетБанка", "Счет банка", "Строка", , , Ложь, "CorrAccount", "Основные");
		ДобавитьРеквизитТаблицыОписанияДокумента("БикБанка", "Бик банка", "Строка", , , , "BIC", "Контрагент",10);
		ДобавитьРеквизитТаблицыОписанияДокумента("СчетКонтрагента", "Счет контрагента", "СправочникСсылка", "БанковскиеСчета", "Контрагент", , "DestCurrentAccount", "Основные", 12);
		ДобавитьРеквизитТаблицыОписанияДокумента("БанковскийСчет", "Счет организации", "СправочникСсылка", "БанковскиеСчета", "Организация", , , "Основные", 3);
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("ВидДоговора", , "ПеречислениеСсылка", "ВидыДоговоровКонтрагентов", , Ложь, "[Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком]");
			ДобавитьРеквизитТаблицыОписанияДокумента("ДоговорКонтрагента", "Договор контрагента", "СправочникСсылка", "ДоговорыКонтрагентов", "Контрагент", , "[""Основной договор""]", "Основные", 13);		
		КонецЕсли;	
		ДобавитьРеквизитТаблицыОписанияДокумента("Дополнительно", "Дополнительно", , , , , , , 16);
		ДобавитьРеквизитТаблицыОписанияДокумента("Комментарий", , "Строка", , , ,  "[""ИмяПрограммы/"" + Формат(ТекущаяДата(), ""ДФ='дд.ММ.гггг ЧЧ:мм:сс'"")+ ""/"" + ИмяПользователя()]", "Дополнительно", 21);
		ДобавитьРеквизитТаблицыОписанияДокумента("СуммаДокумента", "Всего", "Число", , , , "Sum", "Основные",22);
		ДобавитьРеквизитТаблицыОписанияДокумента("Всего", , "Число", , , Ложь, "Sum");
		ДобавитьРеквизитТаблицыОписанияДокумента("ВсегоНДС", "НДС (в т.ч.)", "Число", , , Ложь, "SumOfTaxes");
		ДобавитьРеквизитТаблицыОписанияДокумента("СуммаНДС", "Сумма НДС", "Число", , , , "SumOfTaxes", "Основные",23);
		Если ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("СтавкаНДС", "% НДС", "СправочникСсылка", "СтавкиНДС", , , ,"Основные",24);
		ИначеЕсли ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента("СтавкаНДС", "% НДС", "ПеречислениеСсылка", "СтавкиНДС", , , ,"Основные",24);
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента("Итого", , "Число", , , Ложь, "TotalSum");
		Шапка = ТаблицаОписанияДокумента.Скопировать();
		
		//Описание табличной части документа
		ТЧ = Неопределено;
		
	ИначеЕсли ВидДокумента = "ПН" Тогда
		
		МетаданныеИмяОбъекта = "Документ.ПриходнаяНакладная";
		СинонимДокумента = "Приходная накладная";

		//Описание шапки документа              
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента("Основные", "Основные", , , , , , , 1, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента("ОрганизацияИНН", , "Строка", , , Ложь, "DestINN", "Основные");                                
		ДобавитьРеквизитТаблицыОписанияДокумента("ОрганизацияКПП", , "Строка", , , Ложь, "DestKPP", "Основные");                                
		ДобавитьРеквизитТаблицыОписанияДокумента("Организация", , "СправочникСсылка", "Организации", , , "DesCompany", "Основные", 3);
		ДобавитьРеквизитТаблицыОписанияДокумента("НомерВходящегоДокументаДокумент", "Входящий номер", "Строка", , , Ложь, "DocNum", "Основные");
		ДобавитьРеквизитТаблицыОписанияДокумента("НомерВходящегоДокумента", "Входящий номер", "Строка", , , , "[СтрЗаменить(Параметры.Шапка.НомерВходящегоДокументаДокумент.ИтоговоеЗначение, ""№"", """")]", "Основные", 4);
		ДобавитьРеквизитТаблицыОписанияДокумента("ДатаВходящегоДокумента", "Входящая дата", "Дата", , , , "DocDate", "Основные", 5);
		ДобавитьРеквизитТаблицыОписанияДокумента("Дата", , "Дата", , , ,"[?(Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение <> Неопределено,Параметры. Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение, ТекущаяДата())]", "Основные", 2);	
		ДобавитьРеквизитТаблицыОписанияДокумента("ВалютаДокумента", "Валюта документа", "СправочникСсылка", "Валюты", , Ложь, "DocCur", "ЦеныИВалюты", 23);
		ДобавитьРеквизитТаблицыОписанияДокумента("ИНН", , "Строка", , , , "IssINN", "Контрагент", 7);
		ДобавитьРеквизитТаблицыОписанияДокумента("КПП", , "Строка", , , , "IssKPP", "Контрагент", 8);
		ДобавитьРеквизитТаблицыОписанияДокумента("АдресКонтрагента", "Адрес контрагента", "Строка", , , , "IssAddres", "Контрагент", 9);
		ДобавитьРеквизитТаблицыОписанияДокумента("Контрагент", , "СправочникСсылка", "Контрагенты", , , "IssCompany", "Основные", 6, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента("ВидДоговора", , "ПеречислениеСсылка", "ВидыДоговоров", , Ложь, "[Перечисления.ВидыДоговоров.СПоставщиком]");
		ДобавитьРеквизитТаблицыОписанияДокумента("Договор", "Договор контрагента", "СправочникСсылка", "ДоговорыКонтрагентов", "Контрагент", , "[""Основной договор""]", "Основные", 10);		
		ДобавитьРеквизитТаблицыОписанияДокумента("СтруктурнаяЕдиница", "Склад" , "СправочникСсылка", "СтруктурныеЕдиницы", , ,  "[УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), ""ОсновнойСклад"")]", "Основные", 11);	
		ДобавитьРеквизитТаблицыОписанияДокумента("Дополнительно", "Дополнительно", , , , , , , 16);
		ДобавитьРеквизитТаблицыОписанияДокумента("Комментарий", , "Строка", , , ,  "[""ИмяПрограммы/"" + Формат(ТекущаяДата(), ""ДФ='дд.ММ.гггг ЧЧ:мм:сс'"")+ ""/"" + ИмяПользователя()]", "Дополнительно", 21);
		ДобавитьРеквизитТаблицыОписанияДокумента("ЦеныИВалюты", "Цены и валюты", , , , Ложь, , , 22);
		ДобавитьРеквизитТаблицыОписанияДокумента("НалогообложениеНДС", "Налогообложение", "ПеречислениеСсылка", "ТипыНалогообложенияНДС", , Ложь, "[Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС]", "ЦеныИВалюты");                                      
		ДобавитьРеквизитТаблицыОписанияДокумента("СуммаВключаетНДС", "Сумма включает НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
		ДобавитьРеквизитТаблицыОписанияДокумента("Всего", , "Число", , , Ложь, "Sum");
		ДобавитьРеквизитТаблицыОписанияДокумента("ВсегоНДС", "НДС (в т.ч.)", "Число", , , Ложь, "SumOfTaxes");
		ДобавитьРеквизитТаблицыОписанияДокумента("Итого", , "Число", , , Ложь, "TotalSum");
		ДобавитьРеквизитТаблицыОписанияДокумента("ПометитьУслуги", , "Булево", , , Ложь, "[Истина]");
		ДобавитьРеквизитТаблицыОписанияДокумента("СтавкаНДС", "% НДС", "СправочникСсылка", "СтавкиНДС", , Ложь, , "ЦеныИВалюты");	
		Шапка = ТаблицаОписанияДокумента.Скопировать();

		//Описание табличной части документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента("Услуга", "Усл.", "Булево", , , , "[Ложь]", , 1, , Ложь);
		ДобавитьРеквизитТаблицыОписанияДокумента("НомерГТД", "Номер ГТД", "СправочникСсылка", "НомераГТД", , , "Decl", , 10);
		ДобавитьРеквизитТаблицыОписанияДокумента("Номенклатура", , "СправочникСсылка", "Номенклатура", , , "Descript", , 2);
		ДобавитьРеквизитТаблицыОписанияДокумента("КодТНВЭД", "Код ТНВЭД", "Строка", , ,  Ложь, "DescriptCode", , 3);
		ДобавитьРеквизитТаблицыОписанияДокумента("ЕдиницаИзмеренияКод", , "Строка", , , Ложь, "UnitCode");
		ДобавитьРеквизитТаблицыОписанияДокумента("ЕдиницаИзмерения", "Ед.изм.", "СправочникСсылка", "КлассификаторЕдиницИзмерения", , , "Unit", , 3);
		ДобавитьРеквизитТаблицыОписанияДокумента("Количество", "К-во", "Число", , , , "Qty", , 4);
		ДобавитьРеквизитТаблицыОписанияДокумента("Цена", , "Число", , , , "Price", , 5);
		ДобавитьРеквизитТаблицыОписанияДокумента("Сумма", , "Число", , , , "Cost", , 6);
		ДобавитьРеквизитТаблицыОписанияДокумента("СтавкаНДС", "% НДС", "СправочникСсылка", "СтавкиНДС", , , "TaxRate", , 7, , Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента("СуммаНДС", "НДС", "Число", , , , "TaxSum", , 8);
		ДобавитьРеквизитТаблицыОписанияДокумента("Всего", , "Число", , , , "SumWithTax", , 9);
		ДобавитьРеквизитТаблицыОписанияДокумента("ГруппаНоменклатуры", "Группа номенклатуры", "СправочникСсылка", "Номенклатура", , , , , 17, , Ложь);
		ДобавитьРеквизитТаблицыОписанияДокумента("СтранаПроисхожденияКод", , "Строка", , , Ложь, "CountryCode");
		ДобавитьРеквизитТаблицыОписанияДокумента("СтранаПроисхождения", "Страна происхождения", "СправочникСсылка", "СтраныМира", , , "Country", , 10);
		ТЧ = ТаблицаОписанияДокумента.Скопировать();
		
	ИначеЕсли ВидДокумента = "РН" Тогда
		
		МетаданныеИмяОбъекта = "Документ.РасходнаяНакладная";
		СинонимДокумента = "Расходная накладная";
		
		//Описание шапки документа              
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента("Основные", "Основные", , , , , , , 1, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента("ОрганизацияИНН", , "Строка", , , Ложь, "DestINN", "Основные");                                
		ДобавитьРеквизитТаблицыОписанияДокумента("ОрганизацияКПП", , "Строка", , , Ложь, "DestKPP", "Основные");                                
		ДобавитьРеквизитТаблицыОписанияДокумента("Организация", , "СправочникСсылка", "Организации", , , "IssCompany", "Основные", 3);
		ДобавитьРеквизитТаблицыОписанияДокумента("НомерВходящегоДокументаДокумент", "Входящий номер", "Строка", , , Ложь, "DocNum", "Основные");
		ДобавитьРеквизитТаблицыОписанияДокумента("НомерВходящегоДокумента", "Входящий номер", "Строка", , , , "[СтрЗаменить(Параметры.Шапка.НомерВходящегоДокументаДокумент.ИтоговоеЗначение, ""№"", """")]", "Основные", 4);
		ДобавитьРеквизитТаблицыОписанияДокумента("ДатаВходящегоДокумента", "Входящая дата", "Дата", , , , "DocDate", "Основные", 5);
		ДобавитьРеквизитТаблицыОписанияДокумента("Дата", , "Дата", , , ,"[?(Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение <> Неопределено,Параметры. Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение, ТекущаяДата())]", "Основные", 2);	
		ДобавитьРеквизитТаблицыОписанияДокумента("ВалютаДокумента", "Валюта документа", "СправочникСсылка", "Валюты", , Ложь, "DocCur", "ЦеныИВалюты", 23);
		ДобавитьРеквизитТаблицыОписанияДокумента("ИНН", , "Строка", , , , "DestINN", "Контрагент", 7);
		ДобавитьРеквизитТаблицыОписанияДокумента("КПП", , "Строка", , , , "DestKPP", "Контрагент", 8);
		ДобавитьРеквизитТаблицыОписанияДокумента("АдресКонтрагента", "Адрес контрагента", "Строка", , , , "DestAddres", "Контрагент", 9);
		ДобавитьРеквизитТаблицыОписанияДокумента("Контрагент", , "СправочникСсылка", "Контрагенты", , , "DesCompany", "Основные", 6, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента("ВидДоговора", , "ПеречислениеСсылка", "ВидыДоговоров", , Ложь, "[Перечисления.ВидыДоговоров.СПокупателем]");
		ДобавитьРеквизитТаблицыОписанияДокумента("Договор", "Договор контрагента", "СправочникСсылка", "ДоговорыКонтрагентов", "Контрагент", , "[""Основной договор""]", "Основные", 10);		
		ДобавитьРеквизитТаблицыОписанияДокумента("СтруктурнаяЕдиница", "Склад" , "СправочникСсылка", "СтруктурныеЕдиницы", , ,  "[УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), ""ОсновнойСклад"")]", "Основные", 11);	
		ДобавитьРеквизитТаблицыОписанияДокумента("Дополнительно", "Дополнительно", , , , , , , 16);
		ДобавитьРеквизитТаблицыОписанияДокумента("Комментарий", , "Строка", , , ,  "[""ИмяПрограммы/"" + Формат(ТекущаяДата(), ""ДФ='дд.ММ.гггг ЧЧ:мм:сс'"")+ ""/"" + ИмяПользователя()]", "Дополнительно", 21);
		ДобавитьРеквизитТаблицыОписанияДокумента("ЦеныИВалюты", "Цены и валюты", , , , Ложь, , , 22);
		ДобавитьРеквизитТаблицыОписанияДокумента("НалогообложениеНДС", "Налогообложение", "ПеречислениеСсылка", "ТипыНалогообложенияНДС", , Ложь, "[Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС]", "ЦеныИВалюты");                                      
		ДобавитьРеквизитТаблицыОписанияДокумента("СуммаВключаетНДС", "Сумма включает НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
		ДобавитьРеквизитТаблицыОписанияДокумента("Всего", , "Число", , , Ложь, "Sum");
		ДобавитьРеквизитТаблицыОписанияДокумента("ВсегоНДС", "НДС (в т.ч.)", "Число", , , Ложь, "SumOfTaxes");
		ДобавитьРеквизитТаблицыОписанияДокумента("Итого", , "Число", , , Ложь, "TotalSum");
		ДобавитьРеквизитТаблицыОписанияДокумента("ПометитьУслуги", , "Булево", , , Ложь, "[Истина]");
		ДобавитьРеквизитТаблицыОписанияДокумента("СтавкаНДС", "% НДС", "СправочникСсылка", "СтавкиНДС", , Ложь, , "ЦеныИВалюты");	
		Шапка = ТаблицаОписанияДокумента.Скопировать();

		//Описание табличной части документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента("Услуга", "Усл.", "Булево", , , , "[Ложь]", , 1, , Ложь);
		ДобавитьРеквизитТаблицыОписанияДокумента("НомерГТД", "Номер ГТД", "СправочникСсылка", "НомераГТД", , , "Decl", , 10);
		ДобавитьРеквизитТаблицыОписанияДокумента("Номенклатура", , "СправочникСсылка", "Номенклатура", , , "Descript", , 2);
		ДобавитьРеквизитТаблицыОписанияДокумента("КодТНВЭД", "Код ТНВЭД", "Строка", , ,  Ложь, "DescriptCode", , 3);
		ДобавитьРеквизитТаблицыОписанияДокумента("ЕдиницаИзмеренияКод", , "Строка", , , Ложь, "UnitCode");
		ДобавитьРеквизитТаблицыОписанияДокумента("ЕдиницаИзмерения", "Ед.изм.", "СправочникСсылка", "КлассификаторЕдиницИзмерения", , , "Unit", , 3);
		ДобавитьРеквизитТаблицыОписанияДокумента("Количество", "К-во", "Число", , , , "Qty", , 4);
		ДобавитьРеквизитТаблицыОписанияДокумента("Цена", , "Число", , , , "Price", , 5);
		ДобавитьРеквизитТаблицыОписанияДокумента("Сумма", , "Число", , , , "Cost", , 6);
		ДобавитьРеквизитТаблицыОписанияДокумента("СтавкаНДС", "% НДС", "СправочникСсылка", "СтавкиНДС", , , "TaxRate", , 7, , Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента("СуммаНДС", "НДС", "Число", , , , "TaxSum", , 8);
		ДобавитьРеквизитТаблицыОписанияДокумента("Всего", , "Число", , , , "SumWithTax", , 9);
		ДобавитьРеквизитТаблицыОписанияДокумента("ГруппаНоменклатуры", "Группа номенклатуры", "СправочникСсылка", "Номенклатура", , , , , 17, , Ложь);
		ДобавитьРеквизитТаблицыОписанияДокумента("СтранаПроисхожденияКод", , "Строка", , , Ложь, "CountryCode");
		ДобавитьРеквизитТаблицыОписанияДокумента("СтранаПроисхождения", "Страна происхождения", "СправочникСсылка", "СтраныМира", , , "Country", , 10);
		ТЧ = ТаблицаОписанияДокумента.Скопировать();
		
	ИначеЕсли ВидДокумента = "АВР" Тогда
		
		МетаданныеИмяОбъекта = "Документ.АктВыполненныхРабот";
		СинонимДокумента = "Акт выполненных работ";
		
		//Описание шапки документа              
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента("Основные", "Основные", , , , , , , 1, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента("ОрганизацияИНН", , "Строка", , , Ложь, "DestINN", "Основные");                                
		ДобавитьРеквизитТаблицыОписанияДокумента("ОрганизацияКПП", , "Строка", , , Ложь, "DestKPP", "Основные");                                
		ДобавитьРеквизитТаблицыОписанияДокумента("Организация", , "СправочникСсылка", "Организации", , , "IssCompany", "Основные", 3);
		ДобавитьРеквизитТаблицыОписанияДокумента("НомерВходящегоДокументаДокумент", "Входящий номер", "Строка", , , Ложь, "DocNum", "Основные");
		ДобавитьРеквизитТаблицыОписанияДокумента("НомерВходящегоДокумента", "Входящий номер", "Строка", , , , "[СтрЗаменить(Параметры.Шапка.НомерВходящегоДокументаДокумент.ИтоговоеЗначение, ""№"", """")]", "Основные", 4);
		ДобавитьРеквизитТаблицыОписанияДокумента("ДатаВходящегоДокумента", "Входящая дата", "Дата", , , , "DocDate", "Основные", 5);
		ДобавитьРеквизитТаблицыОписанияДокумента("Дата", , "Дата", , , ,"[?(Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение <> Неопределено,Параметры. Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение, ТекущаяДата())]", "Основные", 2);	
		ДобавитьРеквизитТаблицыОписанияДокумента("ВалютаДокумента", "Валюта документа", "СправочникСсылка", "Валюты", , Ложь, "DocCur", "ЦеныИВалюты", 23);
		ДобавитьРеквизитТаблицыОписанияДокумента("ИНН", , "Строка", , , , "DestINN", "Контрагент", 7);
		ДобавитьРеквизитТаблицыОписанияДокумента("КПП", , "Строка", , , , "DestKPP", "Контрагент", 8);
		ДобавитьРеквизитТаблицыОписанияДокумента("АдресКонтрагента", "Адрес контрагента", "Строка", , , , "DestAddres", "Контрагент", 9);
		ДобавитьРеквизитТаблицыОписанияДокумента("Контрагент", , "СправочникСсылка", "Контрагенты", , , "DesCompany", "Основные", 6, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента("ВидДоговора", , "ПеречислениеСсылка", "ВидыДоговоров", , Ложь, "[Перечисления.ВидыДоговоров.СПокупателем]");
		ДобавитьРеквизитТаблицыОписанияДокумента("Договор", "Договор контрагента", "СправочникСсылка", "ДоговорыКонтрагентов", "Контрагент", , "[""Основной договор""]", "Основные", 10);		
		ДобавитьРеквизитТаблицыОписанияДокумента("Дополнительно", "Дополнительно", , , , , , , 16);
		ДобавитьРеквизитТаблицыОписанияДокумента("Комментарий", , "Строка", , , ,  "[""ИмяПрограммы/"" + Формат(ТекущаяДата(), ""ДФ='дд.ММ.гггг ЧЧ:мм:сс'"")+ ""/"" + ИмяПользователя()]", "Дополнительно", 21);
		ДобавитьРеквизитТаблицыОписанияДокумента("ЦеныИВалюты", "Цены и валюты", , , , Ложь, , , 22);
		ДобавитьРеквизитТаблицыОписанияДокумента("НалогообложениеНДС", "Налогообложение", "ПеречислениеСсылка", "ТипыНалогообложенияНДС", , Ложь, "[Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС]", "ЦеныИВалюты");                                      
		ДобавитьРеквизитТаблицыОписанияДокумента("СуммаВключаетНДС", "Сумма включает НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
		ДобавитьРеквизитТаблицыОписанияДокумента("Всего", , "Число", , , Ложь, "Sum");
		ДобавитьРеквизитТаблицыОписанияДокумента("ВсегоНДС", "НДС (в т.ч.)", "Число", , , Ложь, "SumOfTaxes");
		ДобавитьРеквизитТаблицыОписанияДокумента("Итого", , "Число", , , Ложь, "TotalSum");
		ДобавитьРеквизитТаблицыОписанияДокумента("СтавкаНДС", "% НДС", "СправочникСсылка", "СтавкиНДС", , Ложь, , "ЦеныИВалюты");	
		//ДобавитьРеквизитТаблицыОписанияДокумента("ПометитьУслуги", , "Булево", , , Ложь, "[Ложь]");
		Шапка = ТаблицаОписанияДокумента.Скопировать();
		
		//Описание табличной части документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента("Услуга", "Усл.", "Булево", , , , "[Истина]", , 1, , Ложь);
		ДобавитьРеквизитТаблицыОписанияДокумента("Номенклатура", , "СправочникСсылка", "Номенклатура", , , "Descript", , 2);
		ДобавитьРеквизитТаблицыОписанияДокумента("КодТНВЭД", "Код ТНВЭД", "Строка", , ,  Ложь, "DescriptCode", , 3);
		ДобавитьРеквизитТаблицыОписанияДокумента("ЕдиницаИзмеренияКод", , "Строка", , , Ложь, "UnitCode");
		ДобавитьРеквизитТаблицыОписанияДокумента("ЕдиницаИзмерения", "Ед.изм.", "СправочникСсылка", "КлассификаторЕдиницИзмерения", , , "Unit", , 3);
		ДобавитьРеквизитТаблицыОписанияДокумента("Количество", "К-во", "Число", , , , "Qty", , 4);
		ДобавитьРеквизитТаблицыОписанияДокумента("Цена", , "Число", , , , "Price", , 5);
		ДобавитьРеквизитТаблицыОписанияДокумента("Сумма", , "Число", , , , "Cost", , 6);
		ДобавитьРеквизитТаблицыОписанияДокумента("СтавкаНДС", "% НДС", "СправочникСсылка", "СтавкиНДС", , , "TaxRate", , 7, , Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента("СуммаНДС", "НДС", "Число", , , , "TaxSum", , 8);
		ДобавитьРеквизитТаблицыОписанияДокумента("Всего", , "Число", , , , "SumWithTax", , 9);
		ДобавитьРеквизитТаблицыОписанияДокумента("ГруппаНоменклатуры", "Группа номенклатуры", "СправочникСсылка", "Номенклатура", , , , , 17, , Ложь);
		ДобавитьРеквизитТаблицыОписанияДокумента("СтранаПроисхожденияКод", , "Строка", , , Ложь, "CountryCode");
		ДобавитьРеквизитТаблицыОписанияДокумента("СтранаПроисхождения", "Страна происхождения", "СправочникСсылка", "СтраныМира", , , "Country", , 10);
		ТЧ = ТаблицаОписанияДокумента.Скопировать();
		
		
	КонецЕсли;

	СтруктураОписанияДокумента = Новый Структура("Шапка, ТЧ, МетаданныеИмяОбъекта, СинонимДокумента", Шапка, ТЧ, МетаданныеИмяОбъекта, СинонимДокумента);
	
	Возврат СтруктураОписанияДокумента;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтруктуруТиповДокументов()
	
	СтруктураТиповДокументов = Новый Структура;
	СтруктураТиповДокументов.Вставить("UNDEF", Новый Структура("ОтображениеКраткоe, ОтображениеПолное, Описание", "-", "Не определен"));
	СтруктураТиповДокументов.Вставить("ERROR", Новый Структура("ОтображениеКраткоe, ОтображениеПолное, Описание", "-", "Не определен"));
	СтруктураТиповДокументов.Вставить("SF", Новый Структура("ОтображениеКраткоe, ОтображениеПолное, Описание", "СФ", "Счет-фактура", "Поступления \ Счет-фактура"));
	СтруктураТиповДокументов.Вставить("TN", Новый Структура("ОтображениеКраткоe, ОтображениеПолное, Описание", "ТН", "Товарная накладная", "Поступления \ Товарная накладная (ТОРГ-12)"));
	СтруктураТиповДокументов.Вставить("PASS", Новый Структура("ОтображениеКраткоe, ОтображениеПолное, Описание", "ПаспортРФ", "Паспорт РФ", "Кадровые \ Паспорт"));
	СтруктураТиповДокументов.Вставить("AT", Новый Структура("ОтображениеКраткоe, ОтображениеПолное, Описание", "Акт", "Акт выполненых работ", "Поступления \ Акт выполненных работ"));
	СтруктураТиповДокументов.Вставить("SC", Новый Структура("ОтображениеКраткоe, ОтображениеПолное, Описание", "Счет", "Счет на оплату", "Поступления \ Счет на оплату"));
	СтруктураТиповДокументов.Вставить("UD", Новый Структура("ОтображениеКраткоe, ОтображениеПолное, Описание", "УПД", "Универсальный передаточный документ", "Поступления \ УПД"));
		
КонецПроцедуры
                                                                                                                                           
// Функция создает таблицу определяющую связь входящих и загружаемых в базу документов
//
// Параметры:
//
// Возвращаемое значение:
//		ТаблицаВходящихДокументов, тип "ТаблицаЗначений"
//
&НаСервере
Процедура ЗаполнитьТаблицаВходящихДокументов() Экспорт
	
	//// ТипРаспознан - числовой идентификатор типа документа, 
	//// полный перечень распознаваемых документов задан в переменной общего модуля ТаблицаТиповДокументов
	//ТаблицаВходящихДокументов.Колонки.Добавить("ТипРаспознан");
	//// ВходящийДокумент - вид документа, создаваемый в случае если первичный документ является входящим 
	//ТаблицаВходящихДокументов.Колонки.Добавить("ВходящийДокумент");
	//// ИсходящийДокумент - вид документа, создаваемый в случае если первичный документ является исходящим 
	//ТаблицаВходящихДокументов.Колонки.Добавить("ИсходящийДокумент");
	
	// Например:
	// 		Идентификатор первичного документа
	//				"SF" - "Счет-фактура"
	//				"TN" - "Товарная накладная"
	//				"PASS" - "Паспорт РФ"                                                      
	//				"AT" - "Акт выполненых работ"
	//				"SC" - "Счет на оплату"
	//				"UD" - "Универсальный передаточный документ"
	
	//      На основании счета-фактуры входящего создается документ конфигурации "ПоступлениеТоваровУслуг" 
	//			(обозначение вида документа в структуре описаний документов "ПТУ")
	//      На основании счета-фактуры исходящего создается документ конфигурации "РеализацияТоваровУслуг" 
	//			(обозначение вида документа в структуре описаний документов "РТУ")
	//
	//		Добавляем связь счета-фактуры с создаваемыми документами:
	// 			СтрокаТипаДокумента = ТаблицаВходящихДокументов.Добавить();
	//			СтрокаТипаДокумента.ТипРаспознан = "1";
	//			СтрокаТипаДокумента.Входящий = "ПТУ";
	//			СтрокаТипаДокумента.Исходящий = "РТУ";
	
	//Удаление неподдерживаемых типов
	МассивСтрокДляУдаления = Новый Массив;
	Для Каждого СтрокаТаблицаВходящихДокументов Из ТаблицаВходящихДокументов Цикл
		Если Не СтруктураТиповДокументов.Свойство(СтрокаТаблицаВходящихДокументов.ТипРаспознан) Тогда
			МассивСтрокДляУдаления.Добавить(СтрокаТаблицаВходящихДокументов);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицаВходящихДокументов Из МассивСтрокДляУдаления Цикл
		ТаблицаВходящихДокументов.Удалить(СтрокаТаблицаВходящихДокументов);
	КонецЦикла;
	
	//Добавление новых и проверка заполнения для старых типов
	Для Каждого ОписаниеТипа Из СтруктураТиповДокументов Цикл
		Если ОписаниеТипа.Значение.ОтображениеКраткоe <> "-" Тогда
			Если ВозможныеВидыДокументовДляСценариев.Входящий.Свойство(ОписаниеТипа.Ключ) Тогда
				МассивСтрокТипа = ТаблицаВходящихДокументов.НайтиСтроки(Новый Структура("ТипРаспознан", ОписаниеТипа.Ключ));
				Если МассивСтрокТипа.Количество() > 0 Тогда
					СтрокаТипаДокумента = МассивСтрокТипа[0];
					Если ВозможныеВидыДокументовДляСценариев.Входящий[ОписаниеТипа.Ключ].НайтиПоЗначению(СтрокаТипаДокумента.ВходящийДокумент) = Неопределено Тогда
						СтрокаТипаДокумента.ВходящийДокумент = ВозможныеВидыДокументовДляСценариев.Входящий[ОписаниеТипа.Ключ][0].Значение;
					КонецЕсли;
					Если ВозможныеВидыДокументовДляСценариев.Исходящий[ОписаниеТипа.Ключ].НайтиПоЗначению(СтрокаТипаДокумента.ИсходящийДокумент) = Неопределено Тогда
						СтрокаТипаДокумента.ИсходящийДокумент = ВозможныеВидыДокументовДляСценариев.Исходящий[ОписаниеТипа.Ключ][0].Значение;
					КонецЕсли;
				Иначе
					СтрокаТипаДокумента = ТаблицаВходящихДокументов.Добавить();
					СтрокаТипаДокумента.ТипРаспознан = ОписаниеТипа.Ключ;
					СтрокаТипаДокумента.ВходящийДокумент = ВозможныеВидыДокументовДляСценариев.Входящий[ОписаниеТипа.Ключ][0].Значение;
					СтрокаТипаДокумента.ИсходящийДокумент = ВозможныеВидыДокументовДляСценариев.Исходящий[ОписаниеТипа.Ключ][0].Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	//ВозможныеВидыДокументовДляСценарияВходящий = ВозможныеВидыДокументовДляСценариев["Входящий"];
	//ВозможныеВидыДокументовДляСценарияИсходящий = ВозможныеВидыДокументовДляСценариев["Исходящий"];
	//Для Каждого СтрокаТипаДокумента Из ТаблицаВходящихДокументов Цикл
	//	СтрокаТипаДокументаНовыеЗначения = ПользовательскиеВидыДокументов.Добавить();
	//	СтрокаТипаДокументаНовыеЗначения.ТипРаспознан = СтрокаТипаДокумента.ТипРаспознан;
	//	ОписаниеТипа = Неопределено;
	//	Если СтруктураТиповДокументов.Свойство(СтрокаТипаДокумента.ТипРаспознан, ОписаниеТипа) Тогда
	//		СтрокаТипаДокументаНовыеЗначения.ТипДокументаПолноеНаименование = ОписаниеТипа.ОтображениеПолное;
	//	КонецЕсли;
	//	СтрокаТипаДокументаНовыеЗначения.ВходящийДокумент = СтрокаТипаДокумента.ВходящийДокумент;
	//	СтрокаТипаДокументаНовыеЗначения.ИсходящийДокумент = СтрокаТипаДокумента.ИсходящийДокумент;
	//	ВидыТипаВходящий = ВозможныеВидыДокументовДляСценарияВходящий[СтрокаТипаДокумента.ТипРаспознан];
	//	ВидыТипаИсходящий = ВозможныеВидыДокументовДляСценарияИсходящий[СтрокаТипаДокумента.ТипРаспознан];
	//	СтрокаТипаДокументаНовыеЗначения.ВходящийДокументПолноеНаименование = ВидыТипаВходящий.НайтиПоЗначению(СтрокаТипаДокумента.ВходящийДокумент).Представление;
	//	СтрокаТипаДокументаНовыеЗначения.ИсходящийДокументПолноеНаименование = ВидыТипаИсходящий.НайтиПоЗначению(СтрокаТипаДокумента.ИсходящийДокумент).Представление;
	//	СтрокаТипаДокументаНовыеЗначения.ВходящийДокументЕстьВыбор = ВидыТипаВходящий.Количество() > 1;
	//	СтрокаТипаДокументаНовыеЗначения.ИсходящийДокументЕстьВыбор = ВидыТипаИсходящий.Количество() > 1;
	//КонецЦикла;
	
КонецПроцедуры

// Функция предназначена для создания описания типа реквизита
//
// Параметры:
//  ИдентификаторРеквизита - Строка, имя реквизита,
//	ТипРеквизита - Строка, содержит имя типа реквизита
//
// Возвращаемое значение:
//	ОписаниеТипаРеквизита - ОписаниеТипов, содержит описание типа реквизита
//
&НаСервере
Функция СоздатьОписаниеТипа(ИдентификаторРеквизита, ТипРеквизита)

	ОписаниеТипаРеквизита = "";
	МассивТипов = Новый Массив();	
	
	Если ТипРеквизита = "Число" Тогда
		МассивТипов.Добавить(Тип("Число"));
		Если ИдентификаторРеквизита = "Количество" ИЛИ ИдентификаторРеквизита = "КоличествоУпаковок" Тогда
			
			ОписаниеТипаРеквизита = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
			
		ИначеЕсли ИдентификаторРеквизита = "Цена" 
			ИЛИ ИдентификаторРеквизита = "Сумма"  
			ИЛИ ИдентификаторРеквизита = "СуммаНДС" 
			ИЛИ ИдентификаторРеквизита = "Всего"
			ИЛИ ИдентификаторРеквизита = "СуммаДокумента" 
			ИЛИ ИдентификаторРеквизита = "СуммаСНДС" Тогда
			
			ОписаниеТипаРеквизита = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));	
			
		КонецЕсли;
	ИначеЕсли ТипРеквизита = "Булево" Тогда 
		
		ОписаниеТипаРеквизита = Новый ОписаниеТипов("Булево");
		
	ИначеЕсли ТипРеквизита = "Строка" Тогда // по условиям необходимое описание типов
		
	КонецЕсли;
	
	Возврат ОписаниеТипаРеквизита;
		
КонецФункции

// Функция создает таблицу определяющую связь входящих и загружаемых в базу документов
//
// Параметры:
//
// Возвращаемое значение:
//		ВозможныеВидыДокументовДляСценариев, тип "Структура",
//
&НаСервереБезКонтекста
Функция ЗаполнитьВозможныеВидыДокументовДляСценариев(ИмяШаблона, ВерсияКонфигурации) Экспорт
	
	ВозможныеВидыДокументовДляСценариев = Новый Структура;
	
	//Обработка входящих документов
	ВидыДокументовДляТиповДокументов = Новый Структура;
	ВидыДокументов = Новый СписокЗначений;
	Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
		Если НЕ ВерсияКонфигурации = "2.4" Тогда
			ВидыДокументов.Добавить("ПТУ", "Поступление товаров и услуг");
		Иначе
			ВидыДокументов.Добавить("ПТУ", "Приобретение товаров и услуг");
		КонецЕсли;	
	ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
		ВидыДокументов.Добавить("ПН", "Приходная накладная");
	ИначеЕсли ИмяШаблона = "Розница 2.2" Тогда
		ВидыДокументов.Добавить("ПТ", "Поступление товаров");
	КонецЕсли;	
	ВидыДокументовДляТиповДокументов.Вставить("SF", ВидыДокументов);
	ВидыДокументовДляТиповДокументов.Вставить("TN", ВидыДокументов);
	ВидыДокументовДляТиповДокументов.Вставить("AT", ВидыДокументов);
	ВидыДокументовДляТиповДокументов.Вставить("UD", ВидыДокументов);
	
	ВидыДокументов = Новый СписокЗначений;;
	ВидыДокументов.Добавить("КФЛ", "Карточка физического лица");
	ВидыДокументовДляТиповДокументов.Вставить("PASS", ВидыДокументов);
	
	ВидыДокументов = Новый СписокЗначений;
	Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
		ВидыДокументов.Добавить("ПП", "Платёжное поручение");
		ВидыДокументов.Добавить("СП", "Счет от поставщика");
	ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
		ВидыДокументов.Добавить("ЗП", "Заказ поставщику");
	ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
		ВидыДокументов.Добавить("ПП", "Платёжное поручение");
		ВидыДокументов.Добавить("ЗП", "Заказ поставщику");
	КонецЕсли;
	ВидыДокументовДляТиповДокументов.Вставить("SC", ВидыДокументов);
	ВозможныеВидыДокументовДляСценариев.Вставить("Входящий", ВидыДокументовДляТиповДокументов);
	
	//Обработка исходящих документов
	ВидыДокументовДляТиповДокументов = Новый Структура;
	ВидыДокументов = Новый СписокЗначений;
	Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
		ВидыДокументов.Добавить("РТУ", "Реализация товаров и услуг");
	ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
		ВидыДокументов.Добавить("РН", "Расходная накладная");
	ИначеЕсли ИмяШаблона = "Розница 2.2" Тогда
		ВидыДокументов.Добавить("РТ", "Реализация товаров");
	КонецЕсли;	
	ВидыДокументовДляТиповДокументов.Вставить("SF", ВидыДокументов);
	ВидыДокументовДляТиповДокументов.Вставить("TN", ВидыДокументов);
	ВидыДокументовДляТиповДокументов.Вставить("UD", ВидыДокументов);
	
	Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
		ВидыДокументовДляТиповДокументов.Вставить("AT", ВидыДокументов);
	ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
		ВидыДокументов = Новый СписокЗначений;
		ВидыДокументов.Добавить("АВР", "АктВыполненныхРабот");
		ВидыДокументовДляТиповДокументов.Вставить("AT", ВидыДокументов);
	КонецЕсли;	
	
	ВидыДокументов = Новый СписокЗначений;;                                                          
	ВидыДокументов.Добавить("КФЛ", "Карточка физического лица");
	ВидыДокументовДляТиповДокументов.Вставить("PASS", ВидыДокументов);
	
	ВидыДокументов = Новый СписокЗначений;
	Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
		ВидыДокументов.Добавить("ПП", "Платёжное поручение");	
	ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
		ВидыДокументов.Добавить("ЗП", "Заказ поставщику");
	ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
		ВидыДокументов.Добавить("ПП", "Платёжное поручение");
	КонецЕсли;
	ВидыДокументовДляТиповДокументов.Вставить("SC", ВидыДокументов);
	ВозможныеВидыДокументовДляСценариев.Вставить("Исходящий", ВидыДокументовДляТиповДокументов);

	Возврат ВозможныеВидыДокументовДляСценариев;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СОПОСТАВЛЕНИЯ РЕКВИЗИТОВ ДОКУМЕНТА ////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Функция реализует преобразование строки в ссылку, индивидуальна для конкретной конфигурации
//
// Параметры:
//		ОписаниеРеквизита - структура описания реквизита
//		Данные - строка таблицы с данными шапки или строки табличной части документа
//		ИД - идентификатор документа
//		ПараметрыСопоставления - тип "Структура", содержит следующие ключи:
//			СопоставляемоеЗначение - строка для сопоставления
//			СопоставленноеЗначение - в результате выполнения функции будет содержать сопоставленное значение
//			СпособСопоставления - в результате выполнения функции будет содержать способ сопоставления
//			Владелец - данные о владельце реквизита для сопоставления
//
// Возвращаемое значение:   		
//		Истина или Ложь, в зависимости от того выполнялось ли сопоставление строки
//
&НаСервереБезКонтекста
Функция СопоставлениеШаблон(ОписаниеРеквизита, Документ, Данные, ПараметрыСопоставления, СтруктураОПФ = Неопределено, ИмяШаблона = "") Экспорт
	
	//Описание СпособСопоставление, строковые значения ////////////////////////////////////////////
	// 0 -не сопоставлялся
	// 1 -значение из ТЗ правил
	// 2 -простой поиск 
	// 3 -нечеткий поиск                                         
	// 4 -создан новый
	// 5 -словарь
	// 6 -элемент найден по коду
	// 7 -ссылка удалена и задано наименование нового элемента
	// 8 -изменили вручную
	// 9 -прошел все и не сопоставился
	// А -элемент найден по артикулу
	////////////////////////////////////////////////////////////////////////////////////////////////
	
	ТипЗнач = ОписаниеРеквизита.Тип;
	ВидЗнач = ОписаниеРеквизита.Вид;		
	ТипИВидЗначения = Строка(ТипЗнач) + ?(ПустаяСтрока(ВидЗнач), "", "." + Строка(ВидЗнач));
	
	Если ТипЗнач = "ПеречислениеСсылка" Тогда	
		
		Если ВидЗнач = "СтавкиНДС" Тогда
			
			ПараметрыСопоставления.СопоставленноеЗначение = ПолучитьСтавкуНДС(ПараметрыСопоставления.СопоставляемоеЗначение, ИмяШаблона);
			ПараметрыСопоставления.СпособСопоставления = "2";
			
		ИначеЕсли ВРег(ВидЗнач) = ВРег("ПолФизическогоЛица") Тогда
			Если Найти(ВРег(ПараметрыСопоставления.СопоставляемоеЗначение), "МУЖ") > 0 Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = Перечисления.ПолФизическогоЛица.Мужской;
			Иначе
				ПараметрыСопоставления.СопоставленноеЗначение = Перечисления.ПолФизическогоЛица.Женский;
			КонецЕсли;
			ПараметрыСопоставления.СпособСопоставления = "2";
		Иначе	
			// значение перечисления			
			МетПеречисление = Метаданные.Перечисления.Найти(ВидЗнач);
			Если МетПеречисление = Неопределено Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = Неопределено;
				ПараметрыСопоставления.СпособСопоставления = "9";
			ИначеЕсли МетПеречисление.ЗначенияПеречисления.Найти(ПараметрыСопоставления.СопоставляемоеЗначение) <> Неопределено Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = Перечисления[ВидЗнач][ПараметрыСопоставления.СопоставляемоеЗначение];
				ПараметрыСопоставления.СпособСопоставления = "2";
			Иначе 
				ПараметрыСопоставления.СопоставленноеЗначение = Перечисления[ВидЗнач].ПустаяСсылка();
				ПараметрыСопоставления.СпособСопоставления = "9";
			КонецЕсли;		
		КонецЕсли;
		
	ИначеЕсли ТипЗнач = "СправочникСсылка" Тогда
		
		Если ВидЗнач = "Организации" Тогда
			
			ИННОрганизации = Документ.Шапка.ОрганизацияИНН.ИтоговоеЗначение;     			
			КППОрганизации = Документ.Шапка.ОрганизацияКПП.ИтоговоеЗначение;
			Организация = НайтиОрганизациюПоИНН(ИННОрганизации, КППОрганизации); 
			Если Организация = Неопределено Тогда
				ОбработанноеНаименование = ОбработкаНаименованияЭлемента(СтруктураОПФ, ПараметрыСопоставления.СопоставляемоеЗначение);
				МассивВариантовНаименования = Новый Массив;
				МассивВариантовНаименования.Добавить(ПараметрыСопоставления.СопоставляемоеЗначение);
				МассивВариантовНаименования.Добавить(ОбработанноеНаименование.КраткоеНаименование);
				МассивВариантовНаименования.Добавить(ОбработанноеНаименование.ПолноеНаименование);
				МассивВариантовНаименования.Добавить(ОбработанноеНаименование.НаименованиеБезОПФ);
				МассивВариантовНаименования.Добавить(ОбработанноеНаименование.КраткоеНаименованиеВариант2);
				МассивВариантовНаименования.Добавить(ОбработанноеНаименование.КраткоеНаименованиеВариант3);
				Организация = НайтиОрганизациюПоНаименованию(МассивВариантовНаименования, ИмяШаблона); 
				Если Организация = Неопределено Тогда
					Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
						Организация = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме("БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(""ОсновнаяОрганизация"")");
					ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
						Организация = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме("УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), ""ОсновнаяОрганизация"")");
					КонецЕсли;
					Если ЗначениеНеЗаполнено(Организация) Тогда
						Выборка = Справочники.Организации.Выбрать();
						Пока Выборка.Следующий() Цикл
							Организация = Выборка.Ссылка;
							Если Организация.ПометкаУдаления ИЛИ (Метаданные.Справочники["Организации"].Иерархический И Организация.ЭтоГруппа) Тогда
								Продолжить;
							Иначе
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			ПараметрыСопоставления.СопоставленноеЗначение = Организация;
			Если НЕ ЗначениеЗаполнено(ПараметрыСопоставления.СпособСопоставления) Тогда
				ПараметрыСопоставления.СпособСопоставления = "2";	
			КонецЕсли;
			
			Возврат Истина;
			
		ИначеЕсли ВидЗнач = "Контрагенты" Тогда
			
			ЗначениеНастроекДокумента = Документ.ЗначениеНастроек;
			СтруктураКонтрагентГрузо = Неопределено;
			ЗначениеНастроекДокумента.Свойство("КонтрагентГрузо", СтруктураКонтрагентГрузо);
			Если СтруктураКонтрагентГрузо <> Неопределено Тогда 
				КонтрагентГрузо = СтруктураКонтрагентГрузо.Значение;	
				Если НЕ КонтрагентГрузо Тогда
					Если (ОписаниеРеквизита.Идентификатор = "Грузоотправитель" И (Документ.ВидДокумента = "ПТУ" ИЛИ Документ.ВидДокумента = "ПТ") И 
						((ВРег(Данные.ГрузоотправительДокумент.ИтоговоеЗначение) = "ОНЖЕ" ИЛИ ВРег(Данные.ГрузоотправительДокумент.ИтоговоеЗначение) = "ОН ЖЕ") ИЛИ 
						(Данные.Контрагент.ИсходноеЗначение <> "" И Данные.Контрагент.ИсходноеЗначение = Данные.ГрузоотправительДокумент.ИтоговоеЗначение))) 
						ИЛИ 
						(ОписаниеРеквизита.Идентификатор = "Грузополучатель" И (Документ.ВидДокумента = "РТУ" ИЛИ Документ.ВидДокумента = "РТ") И
						((ВРег(Данные.ГрузополучательДокумент.ИтоговоеЗначение) = "ОНЖЕ" ИЛИ ВРег(Данные.ГрузополучательДокумент.ИтоговоеЗначение) = "ОН ЖЕ") ИЛИ 
						(Данные.Контрагент.ИсходноеЗначение <> "" И Данные.Контрагент.ИсходноеЗначение = Данные.ГрузополучательДокумент.ИтоговоеЗначение))) 
						Тогда
						КонтрагентГрузо = Истина;
						СтруктураКонтрагентГрузо.Значение = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			СтруктураОрганизацияГрузо = Неопределено;
			ЗначениеНастроекДокумента.Свойство("ОрганизацияГрузо", СтруктураОрганизацияГрузо);
			Если СтруктураОрганизацияГрузо <> Неопределено Тогда
				ОрганизацияГрузо = СтруктураОрганизацияГрузо.Значение;	
				Если НЕ ОрганизацияГрузо Тогда
					Если (ОписаниеРеквизита.Идентификатор = "Грузоотправитель" И (Документ.ВидДокумента = "РТУ" ИЛИ Документ.ВидДокумента = "РТ") И
						((ВРег(Данные.ГрузоотправительДокумент.ИтоговоеЗначение) = "ОНЖЕ" ИЛИ ВРег(Данные.ГрузоотправительДокумент.ИтоговоеЗначение) = "ОН ЖЕ") ИЛИ
						(Данные.Организация.ИсходноеЗначение <> "" И Данные.Организация.ИсходноеЗначение = Данные.ГрузоотправительДокумент.ИтоговоеЗначение))) 
						Тогда
						ОрганизацияГрузо = Истина;
						СтруктураОрганизацияГрузо.Значение = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ЭлементПоиска = Справочники.Контрагенты.ПустаяСсылка();
			Если ОписаниеРеквизита.Идентификатор = "Контрагент" Тогда
				ИННКонтрагента = Данные.ИНН.ИтоговоеЗначение;
				КППКонтрагента = Данные.КПП.ИтоговоеЗначение;
				ВалидностьИНН = ВерныйИНН(ИННКонтрагента);    				
				СписокКонтрагентов = Новый СписокЗначений();
				Если ВалидностьИНН Тогда
					СписокКонтрагентов = НайтиКонтрагентаПоИННиКППНовый(ИННКонтрагента, КППКонтрагента);
					Если СписокКонтрагентов <> Неопределено Тогда
						Для Каждого СтрокаКонтрагент Из СписокКонтрагентов Цикл
							ЭлементПоиска = СтрокаКонтрагент.Значение;
							Прервать;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если КонтрагентГрузо = Истина 
					И (ОписаниеРеквизита.Идентификатор = "Грузополучатель" И (Документ.ВидДокумента = "РТУ" ИЛИ Документ.ВидДокумента = "РТ"))
					ИЛИ (ОписаниеРеквизита.Идентификатор = "Грузоотправитель" И (Документ.ВидДокумента = "ПТУ" ИЛИ Документ.ВидДокумента = "ПТ")) Тогда   
					Если Данные.Контрагент.ИтоговоеЗначение <> "" Тогда
						ПараметрыСопоставления.СопоставленноеЗначение =  Данные.Контрагент.ИтоговоеЗначение;
					Иначе	
						ПараметрыСопоставления.СопоставленноеЗначение =  Данные.Контрагент.СопоставленноеЗначение;
					КонецЕсли;
					ПараметрыСопоставления.Равен = Истина;	
					Если ТипЗнч(ПараметрыСопоставления.СопоставленноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда  
						Данные[ОписаниеРеквизита.Идентификатор].ИсходноеЗначение = ПараметрыСопоставления.СопоставленноеЗначение.Наименование;
						ПараметрыСопоставления.СпособСопоставления = "2";
						ЭлементПоиска =  ПараметрыСопоставления.СопоставленноеЗначение;
					Иначе
						Данные[ОписаниеРеквизита.Идентификатор].ИсходноеЗначение = ПараметрыСопоставления.СопоставленноеЗначение;
						ПараметрыСопоставления.СопоставляемоеЗначение = ПараметрыСопоставления.СопоставленноеЗначение;
					КонецЕсли;
				КонецЕсли;
				Если ОрганизацияГрузо = Истина 
					И (ОписаниеРеквизита.Идентификатор = "Грузополучатель" И (Документ.ВидДокумента = "ПТУ" ИЛИ Документ.ВидДокумента = "ПТ"))
					ИЛИ (ОписаниеРеквизита.Идентификатор = "Грузоотправитель" И (Документ.ВидДокумента = "РТУ" ИЛИ Документ.ВидДокумента = "РТ")) Тогда    
					Если ТипЗнч(Данные.Организация.СопоставленноеЗначение) = Тип("СправочникСсылка.Организации") Тогда
						Данные[ОписаниеРеквизита.Идентификатор].ИсходноеЗначение = Данные.Организация.ИтоговоеЗначение.Наименование;
						ПараметрыСопоставления.СопоставляемоеЗначение = Данные.Организация.ИтоговоеЗначение.Наименование;
						ПараметрыСопоставления.Равен = Истина;	
						ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "Контрагенты");
						Если ЭлементПоиска.Пустая() Тогда
							ПараметрыСопоставления.СопоставляемоеЗначение = Данные.Организация.ИтоговоеЗначение.НаименованиеСокращенное;
							ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "Контрагенты");
							Если ЭлементПоиска.Пустая() Тогда
								ПараметрыСопоставления.СопоставляемоеЗначение = Данные.Организация.ИтоговоеЗначение.НаименованиеПолное;
								ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "Контрагенты");
							КонецЕсли;
						КонецЕсли;
						Если НЕ ЭлементПоиска.Пустая() Тогда
							ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
							Если НЕ ЗначениеЗаполнено(ПараметрыСопоставления.СпособСопоставления) Тогда
								ПараметрыСопоставления.СпособСопоставления = "2";	
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Если НЕ ПараметрыСопоставления.Свойство("ПоискТолькоПоИНН") Тогда  
				Если ЭлементПоиска.Пустая() И СтрокаНеИмеетСмысла(ПараметрыСопоставления.СопоставляемоеЗначение) Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = Справочники.Контрагенты.ПустаяСсылка();
					ПараметрыСопоставления.СпособСопоставления = "9";
					Возврат Истина;
				КонецЕсли;
				
				Если ЭлементПоиска.Пустая() Тогда
					Если СтруктураОПФ <> Неопределено Тогда
						ОбработанноеНаименование = ОбработкаНаименованияЭлемента(СтруктураОПФ, ПараметрыСопоставления.СопоставляемоеЗначение);
						МассивНаименований = Новый Массив;
						Если ПараметрыСопоставления.СопоставляемоеЗначение <> "" И МассивНаименований.Найти(ПараметрыСопоставления.СопоставляемоеЗначение)= Неопределено Тогда
							МассивНаименований.Добавить(ПараметрыСопоставления.СопоставляемоеЗначение);
						КонецЕсли;
						Если ОбработанноеНаименование.КраткоеНаименование <> "" И МассивНаименований.Найти(ОбработанноеНаименование.КраткоеНаименование)= Неопределено Тогда
							МассивНаименований.Добавить(ОбработанноеНаименование.КраткоеНаименование);
						КонецЕсли;
						Если ОбработанноеНаименование.ПолноеНаименование <> "" И МассивНаименований.Найти(ОбработанноеНаименование.ПолноеНаименование)= Неопределено Тогда
							МассивНаименований.Добавить(ОбработанноеНаименование.ПолноеНаименование);
						КонецЕсли;
						Если ОбработанноеНаименование.НаименованиеБезОПФ <> "" И МассивНаименований.Найти(ОбработанноеНаименование.НаименованиеБезОПФ)= Неопределено Тогда
							МассивНаименований.Добавить(ОбработанноеНаименование.НаименованиеБезОПФ);
						КонецЕсли;
						Если ОбработанноеНаименование.КраткоеНаименованиеВариант2 <> "" И МассивНаименований.Найти(ОбработанноеНаименование.КраткоеНаименованиеВариант2)= Неопределено Тогда
							МассивНаименований.Добавить(ОбработанноеНаименование.КраткоеНаименованиеВариант2);
						КонецЕсли;
						Если ОбработанноеНаименование.КраткоеНаименованиеВариант3 <> "" И МассивНаименований.Найти(ОбработанноеНаименование.КраткоеНаименованиеВариант3)= Неопределено Тогда
							МассивНаименований.Добавить(ОбработанноеНаименование.КраткоеНаименованиеВариант3);
						КонецЕсли;
						
						Иерархический = ?(Метаданные.Справочники.Контрагенты.Иерархический И Метаданные.Справочники.Контрагенты.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов, Истина, Ложь);
						Если Иерархический Тогда
							НЕГруппа = " И НЕ Контрагенты.ЭтоГруппа";
						Иначе
							НЕГруппа = "";
						КонецЕсли;
						Запрос = Новый Запрос;
						Запрос.Текст = 
						"ВЫБРАТЬ ПЕРВЫЕ 1
						|	Контрагенты.Ссылка
						|ИЗ
						|	Справочник.Контрагенты КАК Контрагенты
						|ГДЕ
						|	НЕ Контрагенты.ПометкаУдаления" + НЕГруппа;
						//Если ИмяШаблона = "УправлениеНебольшойФирмой 1.6" ИЛИ ИмяШаблона = "Розница 2.2" Тогда
							к = 0;
							Для Каждого ВариантНаименования Из МассивНаименований Цикл
								Если ВариантНаименования <> "" Тогда
									ВариантНаименования = СтрЗаменить(ВариантНаименования, """", """"""); 
									Если к = 0 Тогда
										Запрос.Текст = Запрос.Текст + "
										|			И (Контрагенты.НаименованиеПолное Подобно """ + ВариантНаименования + """";
										к = к + 1;
									Иначе
										Запрос.Текст = Запрос.Текст + "
										|			ИЛИ Контрагенты.НаименованиеПолное Подобно """ + ВариантНаименования + """";
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							Если к > 0 тогда
								Запрос.Текст = Запрос.Текст + ")";
							КонецЕсли;
						//Иначе
						//	Запрос.Текст = Запрос.Текст + "
						//	| И	(Контрагенты.НаименованиеПолное В (&МассивНаименований) ИЛИ	Контрагенты.Наименование В (&МассивНаименований))";
						//КонецЕсли;
												
						//Запрос.УстановитьПараметр("МассивНаименований", МассивНаименований);
						РезультатЗапроса = Запрос.Выполнить();
						Выборка = РезультатЗапроса.Выбрать();
						Если Выборка.Следующий() Тогда
							ЭлементПоиска = Выборка.Ссылка;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЭлементПоиска.Пустая() Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
				Если НЕ ЗначениеЗаполнено(ПараметрыСопоставления.СпособСопоставления) Тогда
					ПараметрыСопоставления.СпособСопоставления = "2";	
				КонецЕсли;
				Если ОписаниеРеквизита.Идентификатор = "Контрагент" Тогда				
					Данные.ИНН.ИтоговоеЗначение = ЭлементПоиска.ИНН;
					Данные.КПП.ИтоговоеЗначение = ЭлементПоиска.КПП;
					Данные.АдресКонтрагента.ИтоговоеЗначение = ПолучитьКонтактнуюИнформациюКонтрагента(ЭлементПоиска, "Юридический");
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(ПараметрыСопоставления.СопоставляемоеЗначение) Тогда
				Если ОбработанноеНаименование <> Неопределено Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = ОбработанноеНаименование.КраткоеНаименование;
				Иначе
					ПараметрыСопоставления.СопоставленноеЗначение = ПараметрыСопоставления.СопоставляемоеЗначение;
				КонецЕсли;
			Иначе
				ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
			КонецЕсли;

			Если ЭлементПоиска.Пустая() Тогда
				ПараметрыСопоставления.СпособСопоставления = "9";
			Иначе
				Если НЕ ЗначениеЗаполнено(ПараметрыСопоставления.СпособСопоставления) Тогда
					ПараметрыСопоставления.СпособСопоставления = "2";	
				КонецЕсли;
			КонецЕсли;
			
			Возврат Истина;
			
		ИначеЕсли ВидЗнач = "Валюты" Тогда
			
			Валюта = НайтиВСправочнике(ПараметрыСопоставления, ВидЗнач);
			Если Валюта.Пустая() Тогда
				Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
					Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
				ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда	
					Валюта = Константы.ВалютаУчета.Получить(); 
				КонецЕсли;

			КонецЕсли;
			ПараметрыСопоставления.СопоставленноеЗначение = Валюта;
			ПараметрыСопоставления.СпособСопоставления = "2";
			
			Возврат Истина;
						
		ИначеЕсли ВидЗнач = "БанковскиеСчета" Тогда	                  
			ЭлементПоиска = Справочники.БанковскиеСчета.ПустаяСсылка();           
			Если НЕ ТипЗнч(ПараметрыСопоставления.Владелец) = Тип("Строка") Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	БанковскиеСчета.Ссылка
				|ИЗ
				|	Справочник.БанковскиеСчета КАК БанковскиеСчета
				|ГДЕ
				|	БанковскиеСчета.Владелец = &Владелец
				|	И НЕ БанковскиеСчета.ПометкаУдаления";
				Запрос.УстановитьПараметр("Владелец", ПараметрыСопоставления.Владелец);
				
				Если (Документ.Исходящий И ТипЗнч(ПараметрыСопоставления.Владелец) = Тип("СправочникСсылка.Организации")) ИЛИ 
					(НЕ Документ.Исходящий И ТипЗнч(ПараметрыСопоставления.Владелец) = Тип("СправочникСсылка.Контрагенты")) Тогда
					Запрос.Текст = Запрос.Текст + " 
					|	И БанковскиеСчета.НомерСчета = &НомерСчета
					|	И БанковскиеСчета.Банк.Код = &БИК";
					Запрос.УстановитьПараметр("НомерСчета", Данные.СчетКонтрагента.ИсходноеЗначение);
					Запрос.УстановитьПараметр("БИК", Данные.БикБанка.ИсходноеЗначение);
				КонецЕсли;
				РезультатЗапроса = Запрос.Выполнить();
				Выборка = РезультатЗапроса.Выбрать();
				Если Выборка.Следующий() Тогда
					ЭлементПоиска = Выборка.Ссылка;
				КонецЕсли;
				
				Если ЭлементПоиска.Пустая() Тогда  
					Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
						ЭлементПоиска = ПараметрыСопоставления.Владелец.ОсновнойБанковскийСчет;
					ИначеЕсли  ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
						ЭлементПоиска = ПараметрыСопоставления.Владелец.БанковскийСчетПоУмолчанию;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			//Если ПараметрыСопоставления.СопоставленноеЗначение = Неопределено Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
				ПараметрыСопоставления.СпособСопоставления = "2";
			//КонецЕсли;
			
			Возврат Истина;


		ИначеЕсли ВидЗнач = "ДоговорыКонтрагентов" Тогда
			
			Если ПараметрыСопоставления.Владелец = "" Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = "Основной договор";
				ПараметрыСопоставления.СпособСопоставления = "9";
				Возврат Истина;
			КонецЕсли;
			
			Если ЗначениеНеЗаполнено(ПараметрыСопоставления.Владелец) Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				ПараметрыСопоставления.СпособСопоставления = "9";
				Возврат Истина;
			КонецЕсли;
			
			Организация = Данные.Организация.ИтоговоеЗначение;
			
			Если Данные.Свойство("ВалютаДокумента") Тогда
				ВалютаВзаиморасчетов = Данные.ВалютаДокумента.ИтоговоеЗначение;
			ИначеЕсли Данные.Свойство("Валюта") Тогда
				ВалютаВзаиморасчетов = Данные.Валюта.ИтоговоеЗначение;
			КонецЕсли;
			Если ЗначениеНеЗаполнено(ВалютаВзаиморасчетов) ИЛИ (ТипЗнч(ВалютаВзаиморасчетов) <> "СправочникСсылка.Валюты") Тогда
				Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
					ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
				ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда	
					ВалютаВзаиморасчетов = Константы.ВалютаУчета.Получить(); 
				КонецЕсли;
			КонецЕсли;
			
			ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			Если Данные.Свойство("ВидДоговора") Тогда
				ОтборВидДоговора = Данные.ВидДоговора.ИтоговоеЗначение;
				Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
					Параметры = Новый Массив;
					Параметры.Добавить(ДоговорКонтрагента);
					Параметры.Добавить(ПараметрыСопоставления.Владелец);
					Параметры.Добавить(Организация);
					Попытка
						РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации("РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента", Параметры);
					Исключение
						РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации("БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента", Параметры);
					КонецПопытки;
				ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
					//Если Не ПараметрыСопоставления.Владелец.ВестиРасчетыПоДоговорам Тогда
					//	ДоговорКонтрагента = ПараметрыСопоставления.Владелец.ДоговорПоУмолчанию;
					//Иначе
						СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ, Данные.ВидДоговора.ИтоговоеЗначение);
						ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(ПараметрыСопоставления.Владелец, Организация, СписокВидовДоговоров);
					//КонецЕсли;
				КонецЕсли;
			ИначеЕсли Данные.Свойство("ТипДоговора") Тогда
				ОтборВидДоговора = Данные.ТипДоговора.ИтоговоеЗначение;
			КонецЕсли;
			
			Если НЕ ДоговорКонтрагента.Пустая() Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = ДоговорКонтрагента;
				ПараметрыСопоставления.СпособСопоставления = "2";	
			Иначе
				
				Запрос = Новый Запрос();
				Запрос.УстановитьПараметр("Контрагент", ПараметрыСопоставления.Владелец);
				Запрос.УстановитьПараметр("Организация",Организация);
				Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
				Запрос.УстановитьПараметр("Наименование", ПараметрыСопоставления.СопоставляемоеЗначение);
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|ГДЕ
				|	ДоговорыКонтрагентов.Наименование = &Наименование
				|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
				|	И ДоговорыКонтрагентов.Организация = &Организация";						   
				
				Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
					
					Запрос.Текст = Запрос.Текст + "
					|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
					|	И ДоговорыКонтрагентов.Владелец = &Контрагент";
					Если НЕ ЗначениеНеЗаполнено(ОтборВидДоговора) Тогда
						Запрос.Текст = Запрос.Текст+"
						|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора";  
						Запрос.УстановитьПараметр("ВидДоговора", ОтборВидДоговора);
					КонецЕсли;
					Запрос.Текст = Запрос.Текст + " 
					|	УПОРЯДОЧИТЬ ПО
					|	ДоговорыКонтрагентов.Дата УБЫВ";
					
				ИначеЕсли  ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
					
					Запрос.Текст = Запрос.Текст + "
					|	И ДоговорыКонтрагентов.ВалютаРасчетов = &ВалютаВзаиморасчетов
					|	И ДоговорыКонтрагентов.Владелец = &Контрагент";
					Если НЕ ЗначениеНеЗаполнено(ОтборВидДоговора) Тогда
						Запрос.Текст = Запрос.Текст+"
						|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора";  
						Запрос.УстановитьПараметр("ВидДоговора", ОтборВидДоговора);
					КонецЕсли;
					Запрос.Текст = Запрос.Текст + " 
					|	УПОРЯДОЧИТЬ ПО
					|	ДоговорыКонтрагентов.ДатаДоговора УБЫВ";

				ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
					Запрос.Текст = Запрос.Текст + "
					|	И ДоговорыКонтрагентов.Контрагент = &Контрагент";
					Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует);
					Запрос.Текст = Запрос.Текст + "
					|	И ДоговорыКонтрагентов.Статус = &Статус";
					Если НЕ ЗначениеНеЗаполнено(ОтборВидДоговора) Тогда
						Запрос.Текст = Запрос.Текст+"
						|	И ДоговорыКонтрагентов.ТипДоговора = &ТипДоговора";  
						Запрос.УстановитьПараметр("ТипДоговора", ОтборВидДоговора);
					КонецЕсли;
				КонецЕсли;
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = Выборка.Ссылка;
					ПараметрыСопоставления.СпособСопоставления = "2";
					Возврат Истина;
				Иначе
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("Контрагент",  ПараметрыСопоставления.Владелец);
					Запрос.УстановитьПараметр("Организация", Организация);
					Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
					Запрос.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
					|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
					|ГДЕ
					|	ДоговорыКонтрагентов.Организация = &Организация
					|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления";
					
					Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
						Запрос.Текст = Запрос.Текст + "
						|	И ДоговорыКонтрагентов.Владелец = &Контрагент";
						Если НЕ ЗначениеНеЗаполнено(ОтборВидДоговора) Тогда
							Запрос.Текст = Запрос.Текст+"
							|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора";  
							Запрос.УстановитьПараметр("ВидДоговора", ОтборВидДоговора);
						КонецЕсли;
						Запрос.Текст = Запрос.Текст + " 
						|	УПОРЯДОЧИТЬ ПО
						|	ДоговорыКонтрагентов.Дата УБЫВ";
					ИначеЕсли  ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
						Запрос.Текст = Запрос.Текст + "
						|	И ДоговорыКонтрагентов.ВалютаРасчетов = &ВалютаВзаиморасчетов
						|	И ДоговорыКонтрагентов.Владелец = &Контрагент";
						Если НЕ ЗначениеНеЗаполнено(ОтборВидДоговора) Тогда
							Запрос.Текст = Запрос.Текст+"
							|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора";  
							Запрос.УстановитьПараметр("ВидДоговора", ОтборВидДоговора);
						КонецЕсли;
						Запрос.Текст = Запрос.Текст + " 
						|	УПОРЯДОЧИТЬ ПО
						|	ДоговорыКонтрагентов.ДатаДоговора УБЫВ";
					ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
						Запрос.Текст = Запрос.Текст + "
						|	И ДоговорыКонтрагентов.Контрагент = &Контрагент";
						Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует);
						Запрос.Текст = Запрос.Текст + "
						|	И ДоговорыКонтрагентов.Статус = &Статус";
						Если НЕ ЗначениеНеЗаполнено(ОтборВидДоговора) Тогда
							Запрос.Текст = Запрос.Текст+"
							|	И ДоговорыКонтрагентов.ТипДоговора = &ТипДоговора";  
							Запрос.УстановитьПараметр("ТипДоговора", ОтборВидДоговора);
						КонецЕсли;
					КонецЕсли;
					
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						ПараметрыСопоставления.СопоставленноеЗначение = Выборка.Ссылка;
						ПараметрыСопоставления.СпособСопоставления = "2";	
					Иначе
						ПараметрыСопоставления.СопоставленноеЗначение = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
						ПараметрыСопоставления.СпособСопоставления = "9";	
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Возврат Истина;		
			
		ИначеЕсли ВидЗнач = "СтраныМира" Тогда

			Если СтрокаНеИмеетСмысла(ПараметрыСопоставления.СопоставляемоеЗначение) Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = Справочники.СтраныМира.ПустаяСсылка();
				ПараметрыСопоставления.СпособСопоставления = "2";
				Возврат Истина;
			КонецЕсли;
			
			ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "СтраныМира");
			
			Если ЭлементПоиска.Пустая() Тогда
				ПараметрыСопоставления.СопоставляемоеЗначение = СтрЗаменить(ПараметрыСопоставления.СопоставляемоеЗначение, "ё", "е");
				ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "СтраныМира");
			КонецЕсли;
			
			Если ЭлементПоиска.Пустая() Тогда
				ПараметрыСопоставления.СопоставляемоеЗначение = СтрЗаменить(ПараметрыСопоставления.СопоставляемоеЗначение, "й", "и");
				ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "СтраныМира");
			КонецЕсли;
			
			Если НЕ ЭлементПоиска.Пустая() Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
				Если НЕ ЗначениеЗаполнено(ПараметрыСопоставления.СпособСопоставления) Тогда
					ПараметрыСопоставления.СпособСопоставления = "2";	
				КонецЕсли;
				Возврат Истина;
			КонецЕсли;
			
			ЗначениеКодаСтраны = Данные.СтранаПроисхожденияКод.ИтоговоеЗначение;
			Если ЭлементПоиска.Пустая() И ЗначениеКодаСтраны <> "" Тогда	
				ПараметрыСопоставления.СопоставляемоеЗначение = ЗначениеКодаСтраны;
				ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "СтраныМира", "ПоКоду");
				Если НЕ ЭлементПоиска.Пустая() Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
					ПараметрыСопоставления.СпособСопоставления = "6";
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;	
			
			СтранаНайдена = "";
			Макет = Справочники.СтраныМира.ПолучитьМакет("Классификатор");
			
			Чтение = Новый ЧтениеXML;
			Чтение.УстановитьСтроку(Макет.ПолучитьТекст());
			
			ТаблицаСтран = СериализаторXDTO.ПрочитатьXML(Чтение);
			
			НайденнаяСтрока = ТаблицаСтран.Найти(ПараметрыСопоставления.СопоставляемоеЗначение);
			Если НайденнаяСтрока <> Неопределено Тогда
				КодЧисловой         = НайденнаяСтрока.Код;
				НаименованиеКраткое = НайденнаяСтрока.Наименование;
				НаименованиеПолное  = НайденнаяСтрока.НаименованиеПолное;
				КодАльфа2           = НайденнаяСтрока.КодАльфа2;
				КодАльфа3			= НайденнаяСтрока.КодАльфа3;
				
				СтранаНайдена = "ПоНаименованию";
				
				ПараметрыСопоставления.СопоставляемоеЗначение = КодЧисловой;
				ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "СтраныМира", "ПоКоду");
				Если НЕ ЭлементПоиска.Пустая() Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
					ПараметрыСопоставления.СпособСопоставления = "6";
					Возврат Истина;
				КонецЕсли;	
			КонецЕсли;
			
			Если СтранаНайдена <> "" И ЗначениеКодаСтраны <> "" Тогда
				НайденнаяСтрока = ТаблицаСтран.Найти(ЗначениеКодаСтраны);
				Если НайденнаяСтрока <> Неопределено Тогда
					КодЧисловой         = НайденнаяСтрока.Код;
					НаименованиеКраткое = НайденнаяСтрока.Наименование;
					НаименованиеПолное  = НайденнаяСтрока.НаименованиеПолное;
					КодАльфа2           = НайденнаяСтрока.КодАльфа2;
					КодАльфа3			= НайденнаяСтрока.КодАльфа3;
					
					СтранаНайдена = "ПоКоду";
				КонецЕсли;
			КонецЕсли;	
		
			Если СтранаНайдена <> "" Тогда
				СтранаОбъект = Справочники.СтраныМира.СоздатьЭлемент();
				СтранаОбъект.Наименование = НаименованиеКраткое;
				СтранаОбъект.НаименованиеПолное = НаименованиеПолное;
				СтранаОбъект.Код = КодЧисловой;
				СтранаОбъект.КодАльфа2 = КодАльфа2;
				СтранаОбъект.КодАльфа3 = КодАльфа3;
				
				Если ЗаписатьОбъект(СтранаОбъект) Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = СтранаОбъект.Ссылка;
					Если СтранаНайдена = "ПоКоду" Тогда
						ПараметрыСопоставления.СпособСопоставления = "6";
					Иначе
						ПараметрыСопоставления.СпособСопоставления = "2";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыСопоставления.СопоставленноеЗначение = Неопределено Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = Справочники.СтраныМира.ПустаяСсылка();
				ПараметрыСопоставления.СпособСопоставления = "2";
			КонецЕсли;
			
			Возврат Истина;
			
		ИначеЕсли ВидЗнач = "НомераГТД" Тогда
			
			НомерГТД = Строка(Данные.НомерГТД.ИсходноеЗначение);
			К = 0;
			Пока Найти(НомерГТД, "/")<> 0 Цикл
				К = К + 1;
				НомерГТД = Прав(НомерГТД, СтрДлина(НомерГТД) - Найти(НомерГТД, "/"));
			КонецЦикла;
			
			Если СтрокаНеИмеетСмысла(ПараметрыСопоставления.СопоставляемоеЗначение) ИЛИ НЕ ( К > 1 И К < 4 ) Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = "";
				ПараметрыСопоставления.СпособСопоставления = "2";
				Возврат Истина;			
			КонецЕсли;
			
			ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "НомераГТД");
			
			ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
			Если НЕ ЭлементПоиска.Пустая() Тогда
				Если НЕ ЗначениеЗаполнено(ПараметрыСопоставления.СпособСопоставления) Тогда
					ПараметрыСопоставления.СпособСопоставления = "2";	
				КонецЕсли;
			Иначе
				ПараметрыСопоставления.СпособСопоставления = "9";	
			КонецЕсли;			
			
			Возврат Истина;	
			
		ИначеЕсли ВидЗнач = "Номенклатура" Тогда
			
			Если ОписаниеРеквизита.Идентификатор = "Номенклатура" Тогда
				ЭлементПоиска = Справочники.Номенклатура.ПустаяСсылка();
				
				ПараметрыСопоставления.СопоставляемоеЗначение = СокрЛП(ПараметрыСопоставления.СопоставляемоеЗначение);
				
				Если СтрокаНеИмеетСмысла(ПараметрыСопоставления.СопоставляемоеЗначение) Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = Справочники.Номенклатура.ПустаяСсылка();
					ПараметрыСопоставления.СпособСопоставления = "9";
					Возврат Истина;				
				КонецЕсли;
				
				Если НЕ ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
					ЗначениеНастроекДокумента = Документ.ЗначениеНастроек;
					ГруппаНоменклатурДляСопоставления = Неопределено;
					ЗначениеНастроекДокумента.Свойство("ГруппаНоменклатурДляСопоставления", ГруппаНоменклатурДляСопоставления);
					СписокГруппДляСопоставления = ГруппаНоменклатурДляСопоставления.Значение;	
					СтруктураПоискТолькоВПриоритетныхГруппах = Неопределено;
					ЗначениеНастроекДокумента.Свойство("ПоискТолькоВПриоритетныхГруппах", СтруктураПоискТолькоВПриоритетныхГруппах);
					ПоискТолькоВПриоритетныхГруппах = СтруктураПоискТолькоВПриоритетныхГруппах.Значение И СписокГруппДляСопоставления.Количество() > 0;
					
					Если СписокГруппДляСопоставления.Количество() > 0 Тогда
						ПараметрыСопоставления.Родитель = СписокГруппДляСопоставления;
						ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "Номенклатура");
					КонецЕсли;
				Иначе
					ПоискТолькоВПриоритетныхГруппах = Ложь;
				КонецЕсли;

				Если (ЭлементПоиска = Неопределено ИЛИ ЭлементПоиска.Пустая()) И НЕ ПоискТолькоВПриоритетныхГруппах Тогда
					ПараметрыСопоставления.Родитель = "";
					ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "Номенклатура");
				КонецЕсли;
				
				ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
				
				Если НЕ ЭлементПоиска.Пустая() Тогда
					Если НЕ ЗначениеЗаполнено(ПараметрыСопоставления.СпособСопоставления) Тогда
						ПараметрыСопоставления.СпособСопоставления = "2";	
					КонецЕсли;
				Иначе
					ПараметрыСопоставления.СпособСопоставления = "9";	
				КонецЕсли;
				
			ИначеЕсли ОписаниеРеквизита.Идентификатор = "ГруппаНоменклатуры" Тогда
				
				РеквизитНоменклатура = Данные.Номенклатура.ИтоговоеЗначение;
				Если ТипЗнч(РеквизитНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = РеквизитНоменклатура.Родитель;
					ПараметрыСопоставления.СпособСопоставления = "2";
				Иначе
					ПараметрыСопоставления.СопоставленноеЗначение = Справочники.Номенклатура.ПустаяСсылка();
					ПараметрыСопоставления.СпособСопоставления = "1";
				КонецЕсли;
				
			КонецЕсли;
			
			Возврат Истина;	
			
		ИначеЕсли ВидЗнач = "СтавкиНДС" Тогда
			
			Если Документ.ВидДокумента = "ПП" Тогда
				
				Если Документ.Шапка.Всего.ИтоговоеЗначение = 0 ИЛИ Документ.Шапка.ВсегоНДС.ИтоговоеЗначение = 0 Тогда 
					СтавкаНДС = ПолучитьСтавкуНДС("", ИмяШаблона);
				Иначе
					Попытка
						СтавкаНДСЧисло = Окр((Документ.Шапка.ВсегоНДС.ИтоговоеЗначение/(Документ.Шапка.Всего.ИтоговоеЗначение - Документ.Шапка.ВсегоНДС.ИтоговоеЗначение))*100);					
						ПараметрыСопоставления.СопоставляемоеЗначение = Строка(СтавкаНДСЧисло);
					Исключение
					КонецПопытки;
				КонецЕсли;

			КонецЕсли;
			
			ПараметрыСопоставления.СопоставленноеЗначение = ПолучитьСтавкуНДС(ПараметрыСопоставления.СопоставляемоеЗначение, ИмяШаблона);

			ПараметрыСопоставления.СпособСопоставления = "2";
			
			Возврат Истина;
			
		ИначеЕсли ВидЗнач = "ВидыНоменклатуры" Тогда
				
				ЗначениеНастроекДокумента = Документ.ЗначениеНастроек;
				РеквизитНоменклатура = Данные.Номенклатура.ИтоговоеЗначение;
				ПараметрыСопоставления.СпособСопоставления = "2";

				Если ТипЗнч(РеквизитНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = РеквизитНоменклатура.ВидНоменклатуры;
				Иначе
					Если Документ.ТипРаспознан = "AT" И НЕ ИмяШаблона = "Розница 2.2" Тогда
						ВидНоменклатуры = Документ.ЗначениеНастроек.ВидНоменклатурУслуга.Значение;
					Иначе
						ВидНоменклатуры = Документ.ЗначениеНастроек.ВидНоменклатурТовар.Значение;
					КонецЕсли;
					Если ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка() Тогда
						Если Документ.ТипРаспознан = "AT" И НЕ ИмяШаблона = "Розница 2.2" Тогда
							ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуга", Истина);
						Иначе
							ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар", Истина);
						КонецЕсли;
					КонецЕсли;
					ПараметрыСопоставления.СопоставленноеЗначение = ВидНоменклатуры;
				КонецЕсли;
				
				Возврат Истина;

		ИначеЕсли ВидЗнач = "КлассификаторЕдиницИзмерения" Тогда
			
			ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "КлассификаторЕдиницИзмерения");
			Если ЗначениеЗаполнено(ЭлементПоиска) Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
				Возврат Истина;
			КонецЕсли;
			
			Если Прав(ПараметрыСопоставления.СопоставляемоеЗначение, 1) = "." ИЛИ Прав(ПараметрыСопоставления.СопоставляемоеЗначение, 1) = "," Тогда
				ДлинаНаименования = СтрДлина(ПараметрыСопоставления.СопоставляемоеЗначение);
				Если ДлинаНаименования > 1 Тогда
					ПараметрыСопоставления.СопоставляемоеЗначение = Лев(ПараметрыСопоставления.СопоставляемоеЗначение, ДлинаНаименования - 1);
				КонецЕсли;
			КонецЕсли;
			
			ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "КлассификаторЕдиницИзмерения");
			Если ЗначениеЗаполнено(ЭлементПоиска) Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
				Возврат Истина;
			Иначе
				//Поиск по полному наименованию
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СправочникПоиска.Ссылка
				|ИЗ
				|	Справочник.КлассификаторЕдиницИзмерения КАК СправочникПоиска
				|ГДЕ	
				|	ПОДСТРОКА(СправочникПоиска.НаименованиеПолное,0,200) = &СтрокаПоиска
				|	И НЕ СправочникПоиска.ПометкаУдаления";
				Запрос.УстановитьПараметр("СтрокаПоиска", ПараметрыСопоставления.СопоставляемоеЗначение);
				Результат = Запрос.Выполнить().Выбрать();
				Если Результат.Следующий() Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = Результат.Ссылка;
					Возврат Истина;
				КонецЕсли;	
			КонецЕсли;
			
			КодЗначения = Данные.ЕдиницаИзмеренияКод.ИтоговоеЗначение;
			Если КодЗначения <> "" Тогда
				ПараметрыСопоставленияПоКоду = Новый Структура;
				Для Каждого ЭлементСтруктуры Из ПараметрыСопоставления Цикл
					ПараметрыСопоставленияПоКоду.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
				КонецЦикла;
				ПараметрыСопоставленияПоКоду.СопоставляемоеЗначение = КодЗначения;
				ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставленияПоКоду, "КлассификаторЕдиницИзмерения", "ПоКоду");
				Если ЗначениеЗаполнено(ЭлементПоиска) Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
					ПараметрыСопоставления.СпособСопоставления = "6";
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
			
			Попытка           //макет КлассификаторЕдиницИзмерения был изменен на xml
				ЕдиницаНайдена = "";
				ТабличныйДокумент = Справочники.КлассификаторЕдиницИзмерения.ПолучитьМакет("КлассификаторЕдиницИзмерения");
				ОбластьНаименованиеКраткое = ТабличныйДокумент.Области.НаименованиеКраткое;
				ТекущаяОбласть = ТабличныйДокумент.НайтиТекст(ПараметрыСопоставления.СопоставляемоеЗначение, , ОбластьНаименованиеКраткое, , Истина, , Истина);
				Если ТекущаяОбласть <> Неопределено Тогда
					ТабличныйДокумент.ТекущаяОбласть = ТекущаяОбласть;
					
					ОбластьКодЧисловой         = ТабличныйДокумент.Области.КодЧисловой;
					ОбластьНаименованиеПолное  = ТабличныйДокумент.Области.НаименованиеПолное;
					
					КодЧисловой         = ТабличныйДокумент.Область(ТекущаяОбласть.Верх, ОбластьКодЧисловой.        Лево, ТекущаяОбласть.Низ, ОбластьКодЧисловой.        Право).Текст;
					НаименованиеКраткое = ТабличныйДокумент.Область(ТекущаяОбласть.Верх, ОбластьНаименованиеКраткое.Лево, ТекущаяОбласть.Низ, ОбластьНаименованиеКраткое.Право).Текст;
					НаименованиеПолное  = ТабличныйДокумент.Область(ТекущаяОбласть.Верх, ОбластьНаименованиеПолное. Лево, ТекущаяОбласть.Низ, ОбластьНаименованиеПолное. Право).Текст;
					
					ЕдиницаНайдена = "ПоНаименованию";
					
					ПараметрыСопоставления.СопоставляемоеЗначение = КодЧисловой;
					ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "КлассификаторЕдиницИзмерения", "ПоКоду");
					Если НЕ ЭлементПоиска.Пустая() Тогда
						ПараметрыСопоставления.СопоставленноеЗначение =ЭлементПоиска;
						ПараметрыСопоставления.СпособСопоставления = "6";
						Возврат Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если ЕдиницаНайдена = "" И КодЗначения <> "" Тогда
					ОбластьКодЧисловой = ТабличныйДокумент.Области.КодЧисловой;
					ТекущаяОбласть = ТабличныйДокумент.НайтиТекст(КодЗначения, , ОбластьКодЧисловой, , Истина, , Истина);
					Если ТекущаяОбласть <> Неопределено Тогда
						ТабличныйДокумент.ТекущаяОбласть = ТекущаяОбласть;
						
						ОбластьНаименованиеКраткое = ТабличныйДокумент.Области.НаименованиеКраткое;
						ОбластьНаименованиеПолное  = ТабличныйДокумент.Области.НаименованиеПолное;
						
						КодЧисловой         = ТабличныйДокумент.Область(ТекущаяОбласть.Верх, ОбластьКодЧисловой.        Лево, ТекущаяОбласть.Низ, ОбластьКодЧисловой.        Право).Текст;
						НаименованиеКраткое = ТабличныйДокумент.Область(ТекущаяОбласть.Верх, ОбластьНаименованиеКраткое.Лево, ТекущаяОбласть.Низ, ОбластьНаименованиеКраткое.Право).Текст;
						НаименованиеПолное  = ТабличныйДокумент.Область(ТекущаяОбласть.Верх, ОбластьНаименованиеПолное. Лево, ТекущаяОбласть.Низ, ОбластьНаименованиеПолное. Право).Текст;
						
						ЕдиницаНайдена = "ПоКоду";
					КонецЕсли;
				КонецЕсли;			
			Исключение
			КонецПопытки;
			
			Если ЕдиницаНайдена <> "" Тогда
				ЕдиницаОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
				ЕдиницаОбъект.Наименование = НаименованиеКраткое;
				ЕдиницаОбъект.НаименованиеПолное = НаименованиеПолное;
				ЕдиницаОбъект.Код = КодЧисловой;
				Если ЗаписатьОбъект(ЕдиницаОбъект) Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = ЕдиницаОбъект.Ссылка;
					Если ЕдиницаНайдена = "ПоКоду" Тогда
						ПараметрыСопоставления.СпособСопоставления = "6";
					Иначе
						ПараметрыСопоставления.СпособСопоставления = "2";
					КонецЕсли;
				КонецЕсли;
			Иначе
				ПараметрыСопоставления.СопоставляемоеЗначение = "796";
				ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "КлассификаторЕдиницИзмерения", "ПоКоду");
				Если НЕ ЭлементПоиска.Пустая() Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
					ПараметрыСопоставления.СпособСопоставления = "2";
				КонецЕсли;	
			КонецЕсли;
			Если ПараметрыСопоставления.СопоставленноеЗначение = Неопределено Тогда
				ЕдиницаОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
				ЕдиницаОбъект.Наименование = "шт";
				ЕдиницаОбъект.НаименованиеПолное = "Штука";
				ЕдиницаОбъект.Код = 796;
				НаименованиеКраткое = "шт";
				ЗаписатьОбъект(ЕдиницаОбъект);
				ПараметрыСопоставления.СопоставленноеЗначение = ЕдиницаОбъект.Ссылка;
				ПараметрыСопоставления.СпособСопоставления = "2";
			КонецЕсли;
			
			Возврат Истина;
			
		ИначеЕсли ВидЗнач = "ЕдиницыИзмерения" Тогда
			
			ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "ЕдиницыИзмерения");
			Если ЗначениеЗаполнено(ЭлементПоиска) Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
				Возврат Истина;
			КонецЕсли;
			
			Если Прав(ПараметрыСопоставления.СопоставляемоеЗначение, 1) = "." ИЛИ Прав(ПараметрыСопоставления.СопоставляемоеЗначение, 1) = "," Тогда
				ДлинаНаименования = СтрДлина(ПараметрыСопоставления.СопоставляемоеЗначение);
				Если ДлинаНаименования > 1 Тогда
					ПараметрыСопоставления.СопоставляемоеЗначение = Лев(ПараметрыСопоставления.СопоставляемоеЗначение, ДлинаНаименования - 1);
				КонецЕсли;
			КонецЕсли;
			
			ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "ЕдиницыИзмерения");
			Если ЗначениеЗаполнено(ЭлементПоиска) Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
				Возврат Истина;
			КонецЕсли;
			
			КодЗначения = Данные.ЕдиницаИзмеренияКод.ИтоговоеЗначение;
			Если КодЗначения <> "" Тогда
				ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "ЕдиницыИзмерения", "ПоКоду");
				Если ЗначениеЗаполнено(ЭлементПоиска) Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
					ПараметрыСопоставления.СпособСопоставления = "6";
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыСопоставления.СопоставленноеЗначение = Неопределено Тогда
				ПараметрыСопоставления.СопоставляемоеЗначение = "796";
				ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "ЕдиницыИзмерения", "ПоКоду");
				Если НЕ ЭлементПоиска.Пустая() Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
					ПараметрыСопоставления.СпособСопоставления = "2";
				КонецЕсли;	
			КонецЕсли;
			
			Если ПараметрыСопоставления.СопоставленноеЗначение = Неопределено Тогда
				ЕдиницаОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
				ЕдиницаОбъект.Наименование = "шт";
				ЕдиницаОбъект.НаименованиеПолное = "Штука";
				ЕдиницаОбъект.Код = 796;
				НаименованиеКраткое = "шт";
				ЗаписатьОбъект(ЕдиницаОбъект);
				ПараметрыСопоставления.СопоставленноеЗначение = ЕдиницаОбъект.Ссылка;
				ПараметрыСопоставления.СпособСопоставления = "2";
			КонецЕсли;
			
			Возврат Истина;
			
		ИначеЕсли ВидЗнач = "УпаковкиЕдиницыИзмерения" Тогда
			
			ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "УпаковкиЕдиницыИзмерения");
			Если ЗначениеЗаполнено(ЭлементПоиска) Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
				Возврат Истина;
			КонецЕсли;
			
			Если Прав(ПараметрыСопоставления.СопоставляемоеЗначение, 1) = "." ИЛИ Прав(ПараметрыСопоставления.СопоставляемоеЗначение, 1) = "," Тогда
				ДлинаНаименования = СтрДлина(ПараметрыСопоставления.СопоставляемоеЗначение);
				Если ДлинаНаименования > 1 Тогда
					ПараметрыСопоставления.СопоставляемоеЗначение = Лев(ПараметрыСопоставления.СопоставляемоеЗначение, ДлинаНаименования - 1);
				КонецЕсли;
			КонецЕсли;
			
			ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "УпаковкиЕдиницыИзмерения");
			Если ЗначениеЗаполнено(ЭлементПоиска) Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
				Возврат Истина;
			КонецЕсли;
			
			КодЗначения = Данные.ЕдиницаИзмеренияКод.ИтоговоеЗначение;
			Если КодЗначения <> "" Тогда
				ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "УпаковкиЕдиницыИзмерения", "ПоКоду");
				Если ЗначениеЗаполнено(ЭлементПоиска) Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
					ПараметрыСопоставления.СпособСопоставления = "6";
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыСопоставления.СопоставленноеЗначение = Неопределено Тогда
				ПараметрыСопоставления.СопоставляемоеЗначение = "796";
				ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "УпаковкиЕдиницыИзмерения", "ПоКоду");
				Если НЕ ЭлементПоиска.Пустая() Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
					ПараметрыСопоставления.СпособСопоставления = "2";
				КонецЕсли;	
			КонецЕсли;
			
			Если ПараметрыСопоставления.СопоставленноеЗначение = Неопределено Тогда
				ЕдиницаОбъект = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
				ЕдиницаОбъект.Наименование = "шт";
				ЕдиницаОбъект.НаименованиеПолное = "Штука";
				ЕдиницаОбъект.Код = 796;
				НаименованиеКраткое = "шт";
				ЗаписатьОбъект(ЕдиницаОбъект);
				ПараметрыСопоставления.СопоставленноеЗначение = ЕдиницаОбъект.Ссылка;
				ПараметрыСопоставления.СпособСопоставления = "2";
			КонецЕсли;
			
			Возврат Истина;

		ИначеЕсли ВидЗнач = "БазовыеЕдиницыИзмерения" Тогда
			
			ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "БазовыеЕдиницыИзмерения");
			Если ЗначениеЗаполнено(ЭлементПоиска) Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
				Возврат Истина;
			КонецЕсли;
			
			Если Прав(ПараметрыСопоставления.СопоставляемоеЗначение, 1) = "." ИЛИ Прав(ПараметрыСопоставления.СопоставляемоеЗначение, 1) = "," Тогда
				ДлинаНаименования = СтрДлина(ПараметрыСопоставления.СопоставляемоеЗначение);
				Если ДлинаНаименования > 1 Тогда
					ПараметрыСопоставления.СопоставляемоеЗначение = Лев(ПараметрыСопоставления.СопоставляемоеЗначение, ДлинаНаименования - 1);
				КонецЕсли;
			КонецЕсли;
			
			ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "БазовыеЕдиницыИзмерения");
			Если ЗначениеЗаполнено(ЭлементПоиска) Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
				Возврат Истина;
			КонецЕсли;
			
			КодЗначения = Данные.ЕдиницаИзмеренияКод.ИтоговоеЗначение;
			Если КодЗначения <> "" Тогда
				ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "БазовыеЕдиницыИзмерения", "ПоКоду");
				Если ЗначениеЗаполнено(ЭлементПоиска) Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
					ПараметрыСопоставления.СпособСопоставления = "6";
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыСопоставления.СопоставленноеЗначение = Неопределено Тогда
				ПараметрыСопоставления.СопоставляемоеЗначение = "796";
				ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "БазовыеЕдиницыИзмерения", "ПоКоду");
				Если НЕ ЭлементПоиска.Пустая() Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
					ПараметрыСопоставления.СпособСопоставления = "2";
				КонецЕсли;	
			КонецЕсли;
			
			Если ПараметрыСопоставления.СопоставленноеЗначение = Неопределено Тогда
				ЕдиницаОбъект = Справочники.БазовыеЕдиницыИзмерения.СоздатьЭлемент();
				ЕдиницаОбъект.Наименование = "шт";
				ЕдиницаОбъект.НаименованиеПолное = "Штука";
				ЕдиницаОбъект.Код = 796;
				НаименованиеКраткое = "шт";
				ЗаписатьОбъект(ЕдиницаОбъект);
				ПараметрыСопоставления.СопоставленноеЗначение = ЕдиницаОбъект.Ссылка;
				ПараметрыСопоставления.СпособСопоставления = "2";
			КонецЕсли;
			
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ПараметрыСопоставления.СопоставленноеЗначение <> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция выполняет вызов функции "СопоставлениеШаблон"
//
&НаСервереБезКонтекста
Функция СопоставлениеШаблонВызовСКлиента(Знач ОписаниеРеквизита, ИД, ПараметрыСопоставления, Знач ТаблицаДанных, Знач СтуктураОПФ = Неопределено, ИмяШаблона)
	
	МассивДокументов = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ИД, 1)) ;
	Документ = МассивДокументов[0];
	Данные = Документ.Шапка;
	Результат = СопоставлениеШаблон(ОписаниеРеквизита, Документ, Данные, ПараметрыСопоставления, СтуктураОПФ,ИмяШаблона);
	Документ = Неопределено;
	Возврат Результат;
	
КонецФункции

// Процедура выполняет заполнение счетов учета в строке табличной части документа с использованием страндартных механизмов конфигурации
// 
// Параметры:
//		ИндексСтрокиТЧ - индекс строки табличной части 
//		ИД - идентификатор документа
//
&НаСервереБезКонтекста
Функция ЗаполнитьСчета(Номенклатура, Организация, Склад, ГруппаНоменклатуры) Экспорт
	
	Параметры = Новый Структура("Номенклатура, Организация, Склад", Номенклатура, Организация, Склад);
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Параметры.Вставить("Номенклатура", Номенклатура);
	Иначе
		Параметры.Вставить("Номенклатура", ГруппаНоменклатуры);
	КонецЕсли;
	
	РекСчУчета = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме("БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Параметры.Организация, Параметры.Номенклатура, Параметры.Склад)", Параметры);
	
	Если НЕ ЗначениеЗаполнено(РекСчУчета.СчетУчета) Тогда
		РекСчУчета.СчетУчета = ПланыСчетов.Хозрасчетный.НайтиПоКоду("41.01");	
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(РекСчУчета.СчетУчетаНДС) Тогда
		РекСчУчета.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НайтиПоКоду("19.03");	
	КонецЕсли;
		
	Возврат  РекСчУчета;
	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполнитьСчетаВСтроке(СтрокаТЧДокумента, РекСчУчета, ВидДокумента)
	
	Если ВидДокумента = "ПТУ" ИЛИ ВидДокумента = "ПТ" Тогда
		
		СчетУчета = РекСчУчета.СчетУчета;
		Если ЗначениеЗаполнено(СчетУчета) Тогда
			СтрокаТЧДокумента.СчетУчета.ИтоговоеЗначение = СчетУчета;
		КонецЕсли;
		
		СчетУчетаНДС = РекСчУчета.СчетУчетаНДС;
		Если ЗначениеЗаполнено(СчетУчетаНДС) Тогда
			СтрокаТЧДокумента.СчетУчетаНДС.ИтоговоеЗначение = СчетУчетаНДС;
		КонецЕсли;
		СтрокаТЧДокумента.СчетУчета.СопоставленноеЗначение = СтрокаТЧДокумента.СчетУчета.ИтоговоеЗначение;
		СтрокаТЧДокумента.СчетУчетаНДС.СопоставленноеЗначение = СтрокаТЧДокумента.СчетУчетаНДС.ИтоговоеЗначение;
		
	ИначеЕсли ВидДокумента = "РТУ" ИЛИ ВидДокумента = "РТ" Тогда
		
		СчетДоходов  = РекСчУчета.СчетДоходов;
		Если ЗначениеЗаполнено(СчетДоходов) Тогда
			СтрокаТЧДокумента.СчетДоходов.ИтоговоеЗначение = СчетДоходов;
		КонецЕсли;
		
		СчетРасходов = РекСчУчета.СчетРасходов;
		Если ЗначениеЗаполнено(СчетРасходов) Тогда
			СтрокаТЧДокумента.СчетРасходов.ИтоговоеЗначение = СчетРасходов;
		КонецЕсли;
		СчетУчетаНДСПоРеализации = РекСчУчета.СчетУчетаНДСПродажи;
		Если ЗначениеЗаполнено(СчетУчетаНДСПоРеализации) Тогда
			СтрокаТЧДокумента.СчетУчетаНДСПоРеализации.ИтоговоеЗначение = СчетУчетаНДСПоРеализации;
		КонецЕсли;
		
		СчетУчета = РекСчУчета.СчетУчета;
		Если ЗначениеЗаполнено(СчетУчета) Тогда
			СтрокаТЧДокумента.СчетУчета.ИтоговоеЗначение = СчетУчета;
		КонецЕсли;
		СтрокаТЧДокумента.СчетУчета.СопоставленноеЗначение = СтрокаТЧДокумента.СчетУчета.ИтоговоеЗначение;
		СтрокаТЧДокумента.СчетДоходов.СопоставленноеЗначение = СтрокаТЧДокумента.СчетДоходов.ИтоговоеЗначение;
		СтрокаТЧДокумента.СчетРасходов.СопоставленноеЗначение = СтрокаТЧДокумента.СчетРасходов.ИтоговоеЗначение;
		СтрокаТЧДокумента.СчетУчетаНДСПоРеализации.СопоставленноеЗначение = СтрокаТЧДокумента.СчетУчетаНДСПоРеализации.ИтоговоеЗначение;
		
	КонецЕсли;

КонецФункции

// Процедура выполняет заполнение контактной информации (адреса и телефона) контрагента
//
// Параметры:
//		КонтрагентОбъект - объект справочника "Контрагенты"
//      АдресКонтрагента - строка с адресом контрагента
//      ТелефонКонтрагента - строка с телефоном контрагента 
//
&НаСервереБезКонтекста
Функция  ЗаполнитьКонтактнуюИнформацию(КонтрагентОбъект, АдресКонтрагента, АдресПартнера, ТелефонКонтрагента)
	
	Если НЕ ПустаяСтрока(АдресКонтрагента) Тогда
		// Юр адрес контрагента
		КонтактнаяИнформация = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
		КонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		КонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		КонтактнаяИнформация.Представление = АдресКонтрагента;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(АдресПартнера) И НЕ Метаданные.Имя="Розница" И НЕ Метаданные.Имя = "УправлениеНебольшойФирмой" Тогда	
		// Адрес партнера
		КонтактнаяИнформация = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
		КонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		КонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
		КонтактнаяИнформация.Представление = АдресПартнера;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТелефонКонтрагента) Тогда
		// Телефон контрагента
		КонтактнаяИнформация = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
		КонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		КонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		КонтактнаяИнформация.Представление = ТелефонКонтрагента;
	КонецЕсли;

	Если НЕ ЗаписатьОбъект(КонтрагентОбъект) Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	Иначе
		Возврат КонтрагентОбъект.Ссылка;
	КонецЕсли;

КонецФункции

// Функция выполняет получение контактной информации контрагента из регистра сведений "КонтактнаяИнформация"
//
// Параметры:
//		КонтрагентСсылка - ссылка справочника "Контрагенты"
//		ВидКонтактнойИнформации - значение перечисления "ТипыКонтактнойИнформации"
// 
// Возвращаемое значение:
// 		Результат - набор или представление конактной информации в зависимости от запрашиваемого вида контактной информации
//		
&НаСервереБезКонтекста
Функция ПолучитьКонтактнуюИнформациюКонтрагента(КонтрагентСсылка, ВидКонтактнойИнформации)
	
	КонтактнаяИнфаИзТЧКонтрагентаСтрока = КонтрагентСсылка.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, "Вид");
	Если КонтактнаяИнфаИзТЧКонтрагентаСтрока <> Неопределено Тогда
		Результат = КонтактнаяИнфаИзТЧКонтрагентаСтрока.Представление;
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция реализует создание нового элемента справочника, индивидуальна для конкретной конфигурации.
// 		Параметры:
//			ОписаниеРеквизита - структура описания реквизита
//			Данные - строка таблицы с данными шапки или строки табличной части документа
//			ИД - идентификатор документа
//			ПараметрыСоздания - структура дополнительных параметров создания, необязательный
//
//		Возвращаемое значение:
//   	    Ссылка на новый элемент справочника
//
&НаСервере
Функция СозданиеШаблон(ОписаниеРеквизита, Документ, Данные, ПараметрыСоздания = Неопределено, НовыеЭлементыСправочников) Экспорт
	
	ТипЗнач = ОписаниеРеквизита.Тип;
	ВидЗнач = ОписаниеРеквизита.Вид;		
	ТипИВидЗначения = Строка(ТипЗнач) + ?(ПустаяСтрока(ВидЗнач), "", "." + Строка(ВидЗнач));
	
	СтруктураРеквизита = Данные[ОписаниеРеквизита.Идентификатор];
	
	Если ВидЗнач = "Контрагенты" Тогда
		// создание элементов справочника "Контрагенты"	
		
		Наименование = СтруктураРеквизита.ИтоговоеЗначение;
		Если Найти(ОписаниеРеквизита.Идентификатор, "Грузо") = 0 Тогда
			ИНН = Данные.ИНН.ИтоговоеЗначение;
			КПП = Данные.КПП.ИтоговоеЗначение;
			АдресКонтрагента = Данные.АдресКонтрагента.ИтоговоеЗначение;
		Иначе
			Если СтруктураРеквизита.Равен Тогда
				Возврат Справочники.Контрагенты.ПустаяСсылка();
			Иначе
				ИНН = "";
				КПП = "";
				АдресКонтрагента = ""
			КонецЕсли;	
		КонецЕсли;
		ВалютаВзаиморасчетов = Неопределено;
		Если НЕ Данные.Свойство("ВалютаДокумента", ВалютаВзаиморасчетов) Тогда
			Данные.Свойство("Валюта", ВалютаВзаиморасчетов);
		КонецЕсли;
		//Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
		//	ВалютаВзаиморасчетов = Данные.ВалютаДокумента.ИтоговоеЗначение;
		//ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
		//	ВалютаВзаиморасчетов = Данные.Валюта.ИтоговоеЗначение;
		//КонецЕсли;
		Если ЗначениеНеЗаполнено(ВалютаВзаиморасчетов) ИЛИ ТипЗнч(ВалютаВзаиморасчетов) <> Тип("СправочникСсылка.Валюты") Тогда
			ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета;
		КонецЕсли;
		ДанныеКонтрагента = Новый Структура("КраткоеНаименование, ПолноеНаименование, ИНН, КПП, АдресКонтрагента, ТелефонКонтрагента, Родитель, ВалютаВзаиморасчетов",
		Наименование, Наименование, ИНН, КПП, АдресКонтрагента, "", , ВалютаВзаиморасчетов);
		Если ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			ДанныеКонтрагента.Вставить("АдресПартнера", АдресКонтрагента);
		КонецЕсли;
		ДанныеКонтрагента.Вставить("ВидДокумента", Документ.ВидДокумента);
		Если Документ.ВидДокумента="ПП" ИЛИ Документ.ВидДокумента="СП" Тогда
			//ДанныеКонтрагента.Вставить("БикБанка", Документ.Шапка.БикБанка.ИтоговоеЗначение);
			//ДанныеКонтрагента.Вставить("СчетБанка", Документ.Шапка.СчетБанка.ИтоговоеЗначение);
			//ДанныеКонтрагента.Вставить("СчетКонтрагентаДокумент", Документ.Шапка.СчетКонтрагентаДокумент.ИтоговоеЗначение);
			ДанныеКонтрагента.Вставить("СчетКонтрагента", Документ.Шапка.СчетКонтрагента.ИтоговоеЗначение);
		КонецЕсли;
		Сообщение = "";
		КонтрагентСсылка = СоздатьКонтрагента(ДанныеКонтрагента, Сообщение);
		Если ДанныеКонтрагента.Свойство("Партнер") И НЕ ИмяШаблона = "Розница 2.2" Тогда
			СтрокаНовогоЭлемента = НовыеЭлементыСправочников.Добавить();
			СтрокаНовогоЭлемента.ВидСправочника = "Партнеры";
			СтрокаНовогоЭлемента.Ссылка = ДанныеКонтрагента.Партнер;
			СтрокаНовогоЭлемента.ДокументИД = Документ.ДокументИД;
		КонецЕсли;

		Возврат КонтрагентСсылка;
		
	ИначеЕсли ВидЗнач = "БанковскиеСчета" Тогда
		    
		СчетСсылка = Справочники.БанковскиеСчета.ПустаяСсылка();
		
		Если ОписаниеРеквизита.Владелец <> "Организация" И ТипЗнч(Данные.Контрагент.ИтоговоеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
			//СчетКонтрагентаДокумент = Данные.СчетКонтрагентаДокумент.ИтоговоеЗначение;
			СчетКонтрагентаДокумент = Данные.СчетКонтрагента.ИсходноеЗначение;
			БикБанка = Данные.БикБанка.ИтоговоеЗначение;
			СчетБанка = Данные.СчетБанка.ИтоговоеЗначение;
			Если СтрДлина(БикБанка) = 9 И СтрДлина(СчетКонтрагентаДокумент) = 20 Тогда
				СпрБанк = Справочники.Банки.НайтиПоКоду(БикБанка);				
				Если СпрБанк = Справочники.Банки.ПустаяСсылка() Тогда
					БанкКонтрагента = Справочники.Банки.СоздатьЭлемент();
					//БанкКонтрагента.Наименование = БикБанка;
					БанкКонтрагента.КоррСчет = СчетБанка;
					БанкКонтрагента.Код = БикБанка;
					ЗаписатьОбъект(БанкКонтрагента);
					СпрБанк = БанкКонтрагента.Ссылка
				КонецЕсли;
				БС = Справочники.БанковскиеСчета.СоздатьЭлемент();
				БС.Владелец =  Данные.Контрагент.ИтоговоеЗначение;
				БС.НомерСчета = СчетКонтрагентаДокумент;
				БС.Банк = СпрБанк;
				Если Данные.Свойство("ВалютаВзаиморасчетов") Тогда    
					ВалютаВзаиморасчетов = Данные.ВалютаВзаиморасчетов.ИтоговоеЗначение;
				ИначеЕсли Данные.Свойство("ВалютаДокумента") Тогда 
					ВалютаВзаиморасчетов = Данные.ВалютаДокумента.ИтоговоеЗначение;
				ИначеЕсли Данные.Свойство("Валюта") Тогда 
					ВалютаВзаиморасчетов = Данные.Валюта.ИтоговоеЗначение;
				КонецЕсли;
				БС.ВалютаДенежныхСредств =  ВалютаВзаиморасчетов; 
				БС.Наименование = БС.НомерСчета + ", "+ БС.Банк.Наименование;
				ЗаписатьОбъект(БС);
				СчетСсылка = БС.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Возврат СчетСсылка;

	ИначеЕсли ВидЗнач = "СоглашенияСКлиентами" Тогда
		// создание элементов справочника "СоглашенияСКлиентами"
		Если ТипЗнч(Данные.Соглашение.ИтоговоеЗначение) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
			СоглашениеСсылка = Данные.Соглашение.ИтоговоеЗначение;
		Иначе
			СоглашениеСсылка = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
		КонецЕсли;	
		Возврат СоглашениеСсылка;
		
	ИначеЕсли ВидЗнач = "ДоговорыКонтрагентов" Тогда
		// создание элементов справочника "ДоговорыКонтрагентов"
		
		Организация = Данные.Организация.ИтоговоеЗначение;
		Контрагент = Данные.Контрагент.ИтоговоеЗначение;
		Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты")
			И НЕ Организация.Пустая() И НЕ Контрагент.Пустая() И НЕ (ИмяШаблона = "УправлениеНебольшойФирмой 1.6" И НЕ Контрагент.ВестиРасчетыПоДоговорам) Тогда
			
			ДоговорОбъект  = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();

			Если ЗначениеЗаполнено(СтруктураРеквизита.ИтоговоеЗначение) Тогда
				ДоговорОбъект.Наименование = СтруктураРеквизита.ИтоговоеЗначение;
			ИначеЕсли ЗначениеЗаполнено(СтруктураРеквизита.ИсходноеЗначение) Тогда
				ДоговорОбъект.Наименование = СтруктураРеквизита.ИтоговоеЗначение;
			Иначе
				ДоговорОбъект.Наименование = "Основной договор";
			КонецЕсли;
			ДоговорОбъект.Организация = Организация;
				
			Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
				ДоговорОбъект.Владелец = Контрагент;
				Если Данные.Свойство("ВалютаВзаиморасчетов") Тогда    
					ВалютаВзаиморасчетов = Данные.ВалютаВзаиморасчетов.ИтоговоеЗначение;
				ИначеЕсли Данные.Свойство("ВалютаДокумента") Тогда 
					ВалютаВзаиморасчетов = Данные.ВалютаДокумента.ИтоговоеЗначение;
				ИначеЕсли Данные.Свойство("Валюта") Тогда 
					ВалютаВзаиморасчетов = Данные.Валюта.ИтоговоеЗначение;
				КонецЕсли;
				Если ЗначениеНеЗаполнено(Данные.ВидДоговора.ИтоговоеЗначение) Тогда
					Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
						ДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
					Иначе
						ДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоров.СПоставщиком;
					КонецЕсли;
				Иначе
					ДоговорОбъект.ВидДоговора = Данные.ВидДоговора.ИтоговоеЗначение;
				КонецЕсли;

			ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
				ДоговорОбъект.Контрагент = Контрагент;
				ВалютаВзаиморасчетов = Данные.Валюта.ИтоговоеЗначение;
				ДоговорОбъект.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Действует;
				Если ЗначениеНеЗаполнено(Данные.ТипДоговора.ИтоговоеЗначение) Тогда
					ДоговорОбъект.ТипДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
				Иначе
					ДоговорОбъект.ТипДоговора = Данные.ТипДоговора.ИтоговоеЗначение;
				КонецЕсли;

			КонецЕсли;
			
			Если ЗначениеНеЗаполнено(ВалютаВзаиморасчетов) ИЛИ ТипЗнч(ВалютаВзаиморасчетов) <> Тип("СправочникСсылка.Валюты") Тогда
				ЗначениеВалюты = мВалютаРегламентированногоУчета;
			Иначе
				ЗначениеВалюты = ВалютаВзаиморасчетов;
			КонецЕсли;
			Если ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
				ДоговорОбъект.ВалютаРасчетов = ЗначениеВалюты;
			Иначе
				ДоговорОбъект.ВалютаВзаиморасчетов = ЗначениеВалюты;
			КонецЕсли;
			
			Если (ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" ИЛИ ИмяШаблона = "Розница 2.2") И ЗаписатьОбъект(ДоговорОбъект) Тогда
				ПартнерСсылка = Неопределено;
				Попытка
					ПартнерСсылка = Данные.Партнер.ИтоговоеЗначение.ПолучитьОбъект();
				Исключение
				КонецПопытки;
				Если ПартнерСсылка <> Неопределено Тогда
					ДоговорОбъект.Партнер = ПартнерСсылка.Ссылка;	
				КонецЕсли;
			КонецЕсли;
			
			Если ЗаписатьОбъект(ДоговорОбъект) Тогда
				Попытка
					КонтрагентОбъект = Данные.Контрагент.ИтоговоеЗначение.ПолучитьОбъект();
					КонтрагентОбъект.ОсновнойДоговорКонтрагента = ДоговорОбъект.Ссылка;
					КонтрагентОбъект.Записать();

				Исключение
				КонецПопытки;
				Возврат ДоговорОбъект.Ссылка;	
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		
	ИначеЕсли ВидЗнач = "СтраныМира" Тогда
		// создание элементов справочника "СтраныМира"
		// если элемент не найден ни по наименованию, ни по коду и не подобран из ОКСМ при сопоставлении, то новый элемент в класификаторе не создается
		
		Возврат Справочники.СтраныМира.ПустаяСсылка();
		
	ИначеЕсли ВидЗнач = "КлассификаторЕдиницИзмерения" Тогда
		// создание элементов справочника "КлассификаторЕдиницИзмерения"
		// если элемент не найден ни по наименованию, ни по коду и не подобран из ОКСМ при сопоставлении, то новый элемент в класификаторе не создается
		
		Возврат Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
		
	ИначеЕсли ВидЗнач = "ЕдиницыИзмерения" Тогда
		// создание элементов справочника "КлассификаторЕдиницИзмерения"
		// если элемент не найден ни по наименованию, ни по коду и не подобран из ОКСМ при сопоставлении, то новый элемент в класификаторе не создается
		
		Возврат Справочники.ЕдиницыИзмерения.ПустаяСсылка();
		
	ИначеЕсли ВидЗнач = "УпаковкиЕдиницыИзмерения" Тогда
		// создание элементов справочника "УпаковкиЕдиницыИзмерения"
		// если элемент не найден ни по наименованию, ни по коду и не подобран из ОКСМ при сопоставлении, то новый элемент в класификаторе не создается
		
		Возврат Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		
	ИначеЕсли ВидЗнач = "БазовыеЕдиницыИзмерения" Тогда
				
	     Возврат Справочники.БазовыеЕдиницыИзмерения.ПустаяСсылка();
		 
	ИначеЕсли ВидЗнач = "Номенклатура" Тогда
		
		Если ЗначениеЗаполнено(СтруктураРеквизита.ИтоговоеЗначение) Тогда
			Наименование = СтруктураРеквизита.ИтоговоеЗначение;
		ИначеЕсли ЗначениеЗаполнено(СтруктураРеквизита.ИсходноеЗначение) Тогда
			Наименование = СтруктураРеквизита.ИтоговоеЗначение;
		КонецЕсли;
		Если Наименование <> Неопределено Тогда
			НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
			НоменклатураОбъект.Наименование = Наименование;
			НоменклатураОбъект.НаименованиеПолное = Наименование;
			
			Если НЕ ИмяШаблона = "УправлениеНебольшойФирмой 1.6" И Метаданные.Справочники.Найти("КлассификаторТНВЭД") <> Неопределено И Данные.КодТНВЭД.ИсходноеЗначение <> "" Тогда
				КодТНВЭД = Справочники.КлассификаторТНВЭД.НайтиПоКоду(Данные.КодТНВЭД.ИсходноеЗначение, Истина);
				Если КодТНВЭД.Пустая() Тогда
					Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда 
						ЭлементыКлассификатораИзМакета = Справочники.КлассификаторТНВЭД.ТаблицаКлассификатораТНВЭД();
					Иначе	
						ЭлементыКлассификатораИзМакета = Справочники.КлассификаторТНВЭД.ТаблицаКлассификатора("КлассификаторТоварнойНоменклатурыВнешнеэкономическойДеятельности");
					КонецЕсли;
					НайденныйЭлементКлассификатораИзМакета = ЭлементыКлассификатораИзМакета.Найти(Данные.КодТНВЭД.ИсходноеЗначение, "Код");
					Если НайденныйЭлементКлассификатораИзМакета <> Неопределено Тогда
						ЭлементКлассификатора = Справочники.КлассификаторТНВЭД.СоздатьЭлемент();
						ЗаполнитьЗначенияСвойств(ЭлементКлассификатора, НайденныйЭлементКлассификатораИзМакета);
						ЭлементКлассификатора.НаименованиеПолное = НайденныйЭлементКлассификатораИзМакета.Наименование;
						Если  Метаданные.Справочники.КлассификаторТНВЭД.Реквизиты.Найти("ЕдиницаИзмерения") <> Неопределено Тогда 
							Если (ИмяШаблона = "УправлениеТорговлей 11.1" И НЕ ВерсияКонфигурации = "11.1") ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
								Если ЗначениеЗаполнено(НайденныйЭлементКлассификатораИзМакета.ЕдиницаИзмеренияКод) Тогда
									СоответствиеКодов = Справочники.УпаковкиЕдиницыИзмерения.ЗаполнитьЕдиницыИзмеренияИзКлассификатора(НайденныйЭлементКлассификатораИзМакета.ЕдиницаИзмеренияКод);
									ЕдиницаИзмерения = СоответствиеКодов[НайденныйЭлементКлассификатораИзМакета.ЕдиницаИзмеренияКод];
								КонецЕсли;
							ИначеЕсли ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
								Если ЗначениеЗаполнено(НайденныйЭлементКлассификатораИзМакета.ЕдиницаИзмерения) Тогда
									ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду(НайденныйЭлементКлассификатораИзМакета.ЕдиницаИзмерения);
								КонецЕсли;
							КонецЕсли; 
							ЭлементКлассификатора.ЕдиницаИзмерения = ЕдиницаИзмерения;
						КонецЕсли;
						ЭлементКлассификатора.Записать();
						НоменклатураОбъект.КодТНВЭД = ЭлементКлассификатора.Ссылка;
					КонецЕсли;
				Иначе
					НоменклатураОбъект.КодТНВЭД = КодТНВЭД;
				КонецЕсли;	
			КонецЕсли;
			
			Если Данные.ГруппаНоменклатуры.ИтоговоеЗначение = "" Тогда
				ГруппаНовыхНоменклатур = Неопределено;
				Документ.ЗначениеНастроек.Свойство("ГруппаНовыхНоменклатур", ГруппаНовыхНоменклатур);
				Данные.ГруппаНоменклатуры.ИтоговоеЗначение = ГруппаНовыхНоменклатур.Значение;
			КонецЕсли;
			НоменклатураОбъект.Родитель = Данные.ГруппаНоменклатуры.ИтоговоеЗначение;
			НоменклатураОбъект.ЕдиницаИзмерения = Данные.ЕдиницаИзмерения.ИтоговоеЗначение;
			////НоменклатураОбъект.СтавкаНДС = Данные.СтавкаНДС.ИтоговоеЗначение;
			////   Русанова М. 14.12.2018(
			//Если ИмяШаблона = "БухгалтерияПредприятия 3.0" И НЕ СравнитьВерсии(Метаданные.Версия, "3.0.67.38") Тогда
			//	НоменклатураОбъект.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.ВидСтавки(Данные.СтавкаНДС.ИтоговоеЗначение);
			//Иначе
			//	 НоменклатураОбъект.СтавкаНДС = Данные.СтавкаНДС.ИтоговоеЗначение;
			//КонецЕсли;
			//// ) Русанова М. 14.12.2018
			Попытка
				НоменклатураОбъект.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.ВидСтавки(Данные.СтавкаНДС.ИтоговоеЗначение);
			Исключение
				 НоменклатураОбъект.СтавкаНДС = Данные.СтавкаНДС.ИтоговоеЗначение;
			КонецПопытки;

			Если ИмяШаблона = "БухгалтерияПредприятия 3.0" И НЕ Документ.ВидДокумента = "СП" Тогда
				НоменклатураОбъект.Услуга = Данные.Услуга.ИтоговоеЗначение;
				НоменклатураОбъект.НомерГТД = Данные.НомерГТД.ИтоговоеЗначение;
				НоменклатураОбъект.СтранаПроисхождения = Данные.СтранаПроисхождения.ИтоговоеЗначение;
				НоменклатураОбъект.ВидНоменклатуры = Данные.ГруппаНоменклатуры.ИтоговоеЗначение.ВидНоменклатуры;
			ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
				
				НоменклатураОбъект.ВидНоменклатуры = Данные.ВидНоменклатуры.ИтоговоеЗначение;
			  	НоменклатураОбъект.ТипНоменклатуры = Данные.ВидНоменклатуры.ИтоговоеЗначение.ТипНоменклатуры;
				Если ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
				НоменклатураОбъект.Качество = Перечисления.ГрадацииКачества.Новый;
				НоменклатураОбъект.ГруппаДоступа = Данные.ВидНоменклатуры.ИтоговоеЗначение.ГруппаДоступа;
				НоменклатураОбъект.ИспользованиеХарактеристик = Данные.ВидНоменклатуры.ИтоговоеЗначение.ИспользованиеХарактеристик;
				НоменклатураОбъект.ВариантОформленияПродажи = Данные.ВидНоменклатуры.ИтоговоеЗначение.ВариантОформленияПродажи;
				НоменклатураОбъект.ВестиУчетПоГТД = Данные.Свойство("НомерГТД") И ТипЗнч(Данные.НомерГТД.ИтоговоеЗначение)= Тип("СправочникСсылка.НомераГТД") И НЕ Данные.НомерГТД.ИтоговоеЗначение.Пустая();
				КонецЕсли;
			ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
				Если Данные.Услуга.ИтоговоеЗначение Тогда
					НоменклатураОбъект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
				Иначе
					НоменклатураОбъект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас;
				КонецЕсли;
				НоменклатураОбъект.СтранаПроисхождения = Данные.СтранаПроисхождения.ИтоговоеЗначение;
			КонецЕсли;
			Если ЗаписатьОбъект(НоменклатураОбъект) Тогда	
				Если ИмяШаблона = "БухгалтерияПредприятия 3.0" И НЕ Документ.ВидДокумента = "СП" Тогда
					Если Данные.СчетУчета.СпособСопоставления="8" ИЛИ ((Документ.ВидДокумента = "ПТУ" ИЛИ Документ.ВидДокумента = "ПТ") И Данные.СчетУчетаНДС.СпособСопоставления="8")
						ИЛИ (Документ.ВидДокумента = "РТУ" И (Данные.СчетДоходов.СпособСопоставления="8" ИЛИ Данные.СчетРасходов.СпособСопоставления="8" ИЛИ Данные.СчетУчетаНДСПоРеализации.СпособСопоставления="8")) Тогда
						МенеджерЗаписи = РегистрыСведений.СчетаУчетаНоменклатуры.СоздатьМенеджерЗаписи(); 
						МенеджерЗаписи.Номенклатура = НоменклатураОбъект.Ссылка; 
						МенеджерЗаписи.СчетУчета = Данные.СчетУчета.ИтоговоеЗначение; 
						Если (Документ.ВидДокумента = "ПТУ" ИЛИ Документ.ВидДокумента = "ПТ") Тогда
							МенеджерЗаписи.СчетУчетаНДСПоПриобретеннымЦенностям = Данные.СчетУчетаНДС.ИтоговоеЗначение; 
						ИначеЕсли Документ.ВидДокумента = "РТУ" Тогда
							МенеджерЗаписи.СчетУчетаНДСПоРеализации = Данные.СчетДоходов.ИтоговоеЗначение;
							МенеджерЗаписи.СчетДоходовОтРеализации = Данные.СчетРасходов.ИтоговоеЗначение;  
							МенеджерЗаписи.СчетРасходовОтРеализации = Данные.СчетУчетаНДСПоРеализации.ИтоговоеЗначение;
						КонецЕсли;
						МенеджерЗаписи.Записать(Истина); 
					КонецЕсли;
				КонецЕсли;
				Возврат НоменклатураОбъект.Ссылка;
			КонецЕсли;	
		КонецЕсли;
		
		Возврат Справочники.Номенклатура.ПустаяСсылка();
		
	ИначеЕсли ВидЗнач = "НомераГТД" Тогда
		
		НомерГТД = Строка(СтруктураРеквизита.ИтоговоеЗначение);
		К = 0;
		Пока Найти(НомерГТД, "/")<> 0 Цикл
			К = К + 1;
			НомерГТД = Прав(НомерГТД, СтрДлина(НомерГТД) - Найти(НомерГТД, "/"));
		КонецЦикла;
		
		Если НЕ ( К > 1 И К < 4 ) Тогда
			Возврат Справочники.НомераГТД.ПустаяСсылка();
		Иначе
			НомерГТДОбъект = Справочники.НомераГТД.СоздатьЭлемент(); 		
			НомерГТДОбъект.Код =  СтруктураРеквизита.ИтоговоеЗначение;	
			Если ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда  
				НомерГТДОбъект.СтранаПроисхождения = Данные.СтранаПроисхождения.ИтоговоеЗначение;
			КонецЕсли;
			Попытка
				НомерГТДОбъект.Записать();
			Исключение
				Возврат Справочники.НомераГТД.ПустаяСсылка();
			КонецПопытки;
			Возврат НомерГТДОбъект.Ссылка;	 			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция СоздатьКонтрагентаВызовСервера(СтруктураДанных, Сообщение) Экспорт
	Возврат СоздатьКонтрагента(СтруктураДанных, Сообщение);	
КонецФункции

// Функция создает новый элемент в справочнике "Контрагенты"
//
// Прараметры:
//		СтруктураДанных - структура данных контрагента
//
// Возвращаемое значение
//		Ссылка на созданный элемент справочника, в случае ошибки при создании пустая ссылка
//
&НаСервереБезКонтекста
Функция СоздатьКонтрагента(СтруктураДанных, Сообщение) 
	
	Перем КраткоеНаименование, ПолноеНаименование, ИНН, КПП, АдресКонтрагента, АдресПартнера, ТелефонКонтрагента, Родитель, ВалютаВзаиморасчетов, ВидДокумента, СчетКонтрагента;
	
	СтруктураДанных.Свойство("КраткоеНаименование", КраткоеНаименование);
	СтруктураДанных.Свойство("ПолноеНаименование", ПолноеНаименование);
	СтруктураДанных.Свойство("ИНН", ИНН);
	СтруктураДанных.Свойство("КПП", КПП);
	СтруктураДанных.Свойство("АдресКонтрагента", АдресКонтрагента);
	СтруктураДанных.Свойство("АдресПартнера", АдресПартнера);
	СтруктураДанных.Свойство("ТелефонКонтрагента", ТелефонКонтрагента);
	СтруктураДанных.Свойство("Родитель", Родитель);
	СтруктураДанных.Свойство("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	СтруктураДанных.Свойство("ВидДокумента", ВидДокумента);
	СтруктураДанных.Свойство("СчетКонтрагента", СчетКонтрагента);
	
	Если ИНН <> "" Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И НЕ Контрагенты.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ИНН", СтруктураДанных.ИНН);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Сообщение = "Контрагент с заданным ИНН уже есть в справочнике ""Контрагенты""";
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

	КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
	КонтрагентОбъект.Наименование = КраткоеНаименование;
	КонтрагентОбъект.НаименованиеПолное = ПолноеНаименование;
	Если ЗначениеЗаполнено(Родитель) Тогда
		КонтрагентОбъект.Родитель = Родитель;
	КонецЕсли;
	
	Если Метаданные.Справочники.Контрагенты.Реквизиты.Найти("ОсновнойБанковскийСчет") <> Неопределено Тогда 
		КонтрагентОбъект.ОсновнойБанковскийСчет = СчетКонтрагента;
	ИначеЕсли Метаданные.Справочники.Контрагенты.Реквизиты.Найти("БанковскийСчетПоУмолчанию") <> Неопределено Тогда 
		КонтрагентОбъект.БанковскийСчетПоУмолчанию = СчетКонтрагента;
	КонецЕсли;
	
	ФизЛицо = ?(Найти(ВРег(ПолноеНаименование), ", ИП") > 0 ИЛИ Найти(ВРег(ПолноеНаименование), ", ПБОЮЛ") > 0, Истина, Ложь);
	Если Не ПустаяСтрока(ИНН) Тогда
		КонтрагентОбъект.ИНН = ИНН;
		Если НЕ ФизЛицо И СтрДлина(ИНН) = 12 Тогда
			ФизЛицо	= Истина;
		КонецЕсли;
	КонецЕсли;	
	
	Если Не ПустаяСтрока(КПП) Тогда
		КонтрагентОбъект.КПП = КПП;
	КонецЕсли;	
	
	Если  Метаданные.Справочники.Контрагенты.Реквизиты.Найти("ЮрФизЛицо") <> Неопределено Тогда 
		Если Найти(ВРег(ПолноеНаименование), ", ИП") > 0 Тогда
			КонтрагентОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
		ИначеЕсли ФизЛицо Тогда	
			КонтрагентОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		Иначе
			КонтрагентОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		КонецЕсли;
	ИначеЕсли Метаданные.Справочники.Контрагенты.Реквизиты.Найти("ЮридическоеФизическоеЛицо") <> Неопределено Тогда
		Если ФизЛицо Тогда
			КонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Иначе
			КонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		КонецЕсли;
	Иначе
		Если Найти(ВРег(ПолноеНаименование), ", ИП") > 0 Тогда
			КонтрагентОбъект.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель;
		ИначеЕсли ФизЛицо Тогда	
			КонтрагентОбъект.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо;
		Иначе
			КонтрагентОбъект.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
		КонецЕсли;
	КонецЕсли;
	
	Если Метаданные.Имя="УправлениеНебольшойФирмой" Тогда
		КонтрагентОбъект.СтранаРегистрации = Справочники.СтраныМира.Россия;
	КонецЕсли;
	
	Если НЕ ЗаписатьОбъект(КонтрагентОбъект) Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ Метаданные.Имя="УправлениеНебольшойФирмой" И Метаданные.Справочники.Контрагенты.Реквизиты.Найти("ГоловнойКонтрагент") <> Неопределено Тогда
		КонтрагентОбъект.ГоловнойКонтрагент = КонтрагентОбъект.Ссылка;
		Если НЕ ЗаписатьОбъект(КонтрагентОбъект) Тогда
			Возврат Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

	
	//Если АдресПартнера <> Неопределено Тогда
	//	КонтрагентОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;	
	//КонецЕсли;
	
	КонтрагентСсылка = ЗаполнитьКонтактнуюИнформацию(КонтрагентОбъект, АдресКонтрагента, АдресПартнера, ТелефонКонтрагента);
	
	Если ЗначениеЗаполнено(КонтрагентСсылка) И АдресПартнера <> Неопределено И ВидДокумента <> Неопределено И НЕ Метаданные.Имя="Розница" И НЕ Метаданные.Имя="УправлениеНебольшойФирмой" Тогда
		//Заполнение реквизита Партнер
		ПараметрыСопоставления = Новый Структура("Владелец, Равен,Родитель,СопоставленноеЗначение,СопоставляемоеЗначение,СпособСопоставления, ВремяСопоставления","",Ложь,"",Неопределено, КонтрагентОбъект.Наименование,Неопределено);
		ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "Партнеры");
		Если ЭлементПоиска.Пустая() Тогда
			НовыйПартнер = Справочники.Партнеры.СоздатьЭлемент();
			НовыйПартнер.Наименование = КонтрагентОбъект.Наименование;
			НовыйПартнер.НаименованиеПолное = КонтрагентОбъект.НаименованиеПолное;
			НовыйПартнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
			Для Каждого СтрокаКИ Из КонтрагентОбъект.КонтактнаяИнформация Цикл
				ПартнерСтрокаКИ = НовыйПартнер.КонтактнаяИнформация.Добавить();
				Для Каждого РеквизитКИ Из Метаданные.Справочники.Партнеры.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты Цикл
					ПартнерСтрокаКИ[РеквизитКИ.Имя] = СтрокаКИ[РеквизитКИ.Имя];
				КонецЦикла;
			КонецЦикла;
			ИскомыеГруппы = Новый Массив;
			Если НЕ (ВидДокумента = "РТУ" ИЛИ ВидДокумента = "РТ") Тогда
				НовыйПартнер.Поставщик = Истина;
				ИскомыеГруппы.Добавить("поставщики");
				ИскомыеГруппы.Добавить("поставщик");
				ИскомыеГруппы.Добавить("прочие");
			Иначе
				НовыйПартнер.Клиент = Истина;
				ИскомыеГруппы.Добавить("клиенты");
				ИскомыеГруппы.Добавить("клиент");
				ИскомыеГруппы.Добавить("покупатели");
				ИскомыеГруппы.Добавить("покупатель");
				ИскомыеГруппы.Добавить("прочие");
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ГруппыДоступаПартнеров.Ссылка
			|ИЗ
			|	Справочник.ГруппыДоступаПартнеров КАК ГруппыДоступаПартнеров
			|ГДЕ
			|	НЕ ГруппыДоступаПартнеров.ПометкаУдаления
			|	И ГруппыДоступаПартнеров.Наименование В(&ИскомыеГруппы)";
			Запрос.УстановитьПараметр("ИскомыеГруппы", ИскомыеГруппы);
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				НовыйПартнер.ГруппаДоступа = Выборка.Ссылка;
			КонецЕсли;
			
			Если ЗаписатьОбъект(НовыйПартнер) Тогда
				КонтрагентОбъект.Партнер = НовыйПартнер.Ссылка;
				ЗаписатьОбъект(КонтрагентОбъект);
				СтруктураДанных.Вставить("Партнер", НовыйПартнер.Ссылка);
			КонецЕсли;
		Иначе
			КонтрагентОбъект.Партнер = ЭлементПоиска;
			КонтрагентОбъект = КонтрагентСсылка.ПолучитьОбъект();
			Если НЕ (НЕ (ВидДокумента = "РТУ" ИЛИ ВидДокумента = "РТ") И ЭлементПоиска.Поставщик) Тогда
				ПартнерОбъект = ЭлементПоиска.ПолучитьОбъект();
				ПартнерОбъект.Поставщик = Истина;
				ЗаписатьОбъект(ПартнерОбъект);
			ИначеЕсли НЕ ЭлементПоиска.Клиент Тогда
				ПартнерОбъект = ЭлементПоиска.ПолучитьОбъект();
				ПартнерОбъект.Клиент = Истина;
				ЗаписатьОбъект(ПартнерОбъект);
			КонецЕсли;
			ЗаписатьОбъект(КонтрагентОбъект);
		КонецЕсли;
	КонецЕсли;
	
	Возврат КонтрагентСсылка;	

КонецФункции

// Процедура выполняет обработку полученных из первичного документа данных,
// вычисление расчетных значений, определение строки наименования документа
//
// Прараметры:
//		ИД - идентификатор документа
//		ПараметрыОбработки - параметры обработки, тип "Структура", необязательный
//
&НаСервере
Процедура ДополнительнаяОбработкаДанных(Документ, ПараметрыОбработки = Неопределено) Экспорт
	
	Перем СтавкаНДС;
	
	СчетчикНезаполненныхЕдИзм = 0;
	СтрокаШапки = Документ.Шапка;
	
	// Выполняем для указанного вида документа нужную обработку полученных из первичного документа данных
	// Выполняем вычисление расчетных значений (вызов функции "ВычислениеРасчетныхЗначений")
	// Выполняем проверку контрольных сумм и присваиваем документу начальный статус:
	// 		Статусы:
	// 		0 - Загружен
	// 		1 - Готов к загрузке
	// 		2 - Сопоставлен и суммы совпадают
	// 		3 - Сопоставлен, но суммы не совпадают
	
	Если  Документ.ВидДокумента = "КФЛ" ИЛИ Документ.ВидДокумента = "ПП" Тогда
		
		Документ.Статус = 2;
		Если Документ.ВидДокумента = "ПП" Тогда
			Попытка
				Если СтрокаШапки.СтавкаНДС.ИтоговоеЗначение = перечисления.СтавкиНДС.БезНДС тогда
					СтавкаНДСЧисло = Окр((СтрокаШапки.ВсегоНДС.ИтоговоеЗначение/(СтрокаШапки.Всего.ИтоговоеЗначение - СтрокаШапки.ВсегоНДС.ИтоговоеЗначение))*100);					
					СтрокаШапки.СтавкаНДС.ИтоговоеЗначение = ПолучитьСтавкуНДС(Строка(СтавкаНДСЧисло), ИмяШаблона);
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	Иначе
		
		ДатаДокументаИзВходящего = Неопределено;
		Документ.ЗначениеНастроек.Свойство("БратьДатуВходящего", ДатаДокументаИзВходящего);
		Если ДатаДокументаИзВходящего <> Неопределено Тогда
			Если ДатаДокументаИзВходящего.Значение И ЗначениеЗаполнено(СтрокаШапки.ДатаВходящегоДокумента.СопоставленноеЗначение) Тогда
				СтрокаШапки.Дата.СопоставленноеЗначение = СтрокаШапки.ДатаВходящегоДокумента.СопоставленноеЗначение;
				СтрокаШапки.Дата.ИтоговоеЗначение = СтрокаШапки.Дата.СопоставленноеЗначение;
			ИначеЕсли НЕ ДатаДокументаИзВходящего.Значение ИЛИ НЕ ЗначениеЗаполнено(СтрокаШапки.ДатаВходящегоДокумента.СопоставленноеЗначение) Тогда
				СтрокаШапки.Дата.ИтоговоеЗначение = ТекущаяДата();
			КонецЕсли;
		КонецЕсли;

		//Удаляем строки с названиями колонок ТЧ  + Применение настройки ВклНДСБезУчетаНДС ("Включить НДС в стоимость без учета НДС")
		ВклНДСБезУчетаНДС = Неопределено;
		Если Документ.ЗначениеНастроек.Свойство("ВклНДСБезУчетаНДС", ВклНДСБезУчетаНДС) Тогда
			ВклНДСБезУчетаНДС = ?(ВклНДСБезУчетаНДС.Значение = Истина, Истина, Ложь);
		Иначе
			ВклНДСБезУчетаНДС = Ложь;
		КонецЕсли;
		МассивУдаляемыхСтрок = Новый Массив;
		Для каждого СтруктураСтрокиТЧ Из Документ.ТЧ Цикл
			СтрокаТЧ = СтруктураСтрокиТЧ.Значение; 
			Если СтрокаТЧ.Номенклатура.ИсходноеЗначение = "Товар" 
				И (Найти(СтрокаТЧ.ЕдиницаИзмерения.ИсходноеЗначение,"Единиц") <> Неопределено ИЛИ Найти(СтрокаТЧ.ЕдиницаИзмерения.ИсходноеЗначение,"Ед.") <> Неопределено) Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
			ИначеЕсли СтрокаТЧ.Номенклатура.ИсходноеЗначение = "" Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
			ИначеЕсли ВклНДСБезУчетаНДС И СтрокаТЧ.Всего.ИтоговоеЗначение = СтрокаТЧ.Сумма.ИтоговоеЗначение + СтрокаТЧ.СуммаНДС.ИтоговоеЗначение Тогда
				СтрокаТЧ.Сумма.ИтоговоеЗначение = СтрокаТЧ.Всего.ИтоговоеЗначение;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТЧ Из МассивУдаляемыхСтрок Цикл
			Документ.ТЧ.Удалить(СтрокаТЧ);
		КонецЦикла;
		
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" И НЕ Документ.ВидДокумента = "СП" И 
			(НЕ ЗначениеЗаполнено(СтрокаШапки.СчетУчетаРасчетовПоАвансам.ИтоговоеЗначение) И НЕ  ЗначениеЗаполнено(СтрокаШапки.СчетУчетаРасчетовПоТаре.ИтоговоеЗначение) И НЕ  ЗначениеЗаполнено(СтрокаШапки.СчетУчетаРасчетовСКонтрагентом.ИтоговоеЗначение)) Тогда
			
			ПараметрыВыполнения = Новый Структура("Организация, Контрагент, Договор", СтрокаШапки.Организация.ИтоговоеЗначение, Справочники.Контрагенты.ПустаяСсылка(),Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
			СтрокаШапки.СчетаУчета.ИтоговоеЗначение = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме("БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Параметры.Организация, Параметры.Контрагент, Параметры.Договор)", ПараметрыВыполнения);
			СтрокаШапки.СчетУчетаРасчетовПоАвансам.СопоставленноеЗначение = ?(СтрокаШапки.СчетаУчета.ИтоговоеЗначение.СчетАвансов = Неопределено,ПланыСчетов.Хозрасчетный.ПустаяСсылка(),СтрокаШапки.СчетаУчета.ИтоговоеЗначение.СчетАвансов);	
			СтрокаШапки.СчетУчетаРасчетовПоАвансам.ИтоговоеЗначение = СтрокаШапки.СчетУчетаРасчетовПоАвансам.СопоставленноеЗначение;
			СтрокаШапки.СчетУчетаРасчетовПоТаре.СопоставленноеЗначение = ?(СтрокаШапки.СчетаУчета.ИтоговоеЗначение.СчетУчетаТары = Неопределено,ПланыСчетов.Хозрасчетный.ПустаяСсылка(),СтрокаШапки.СчетаУчета.ИтоговоеЗначение.СчетУчетаТары);
			СтрокаШапки.СчетУчетаРасчетовПоТаре.ИтоговоеЗначение = СтрокаШапки.СчетУчетаРасчетовПоТаре.СопоставленноеЗначение;
			СтрокаШапки.СчетУчетаРасчетовСКонтрагентом.СопоставленноеЗначение = ?(СтрокаШапки.СчетаУчета.ИтоговоеЗначение.СчетРасчетов = Неопределено,ПланыСчетов.Хозрасчетный.ПустаяСсылка(),СтрокаШапки.СчетаУчета.ИтоговоеЗначение.СчетРасчетов);
			СтрокаШапки.СчетУчетаРасчетовСКонтрагентом.ИтоговоеЗначение = СтрокаШапки.СчетУчетаРасчетовСКонтрагентом.СопоставленноеЗначение;	
		КонецЕсли;
		
		//Заполняем флаги "УчитыватьНДС" И "СуммаВключаетНДС", вычисляем количество строк с услугами 
		                                              		
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
					
			СчетчикУслуг = 0;
			СчетчикРавныхСумм = 0;	
			УчитыватьНДС = НЕ ВклНДСБезУчетаНДС И СтрокаШапки.ВсегоНДС.ИтоговоеЗначение <> 0;
			Для каждого СтруктураСтрокиТЧ Из Документ.ТЧ Цикл
				СтрокаТЧ = СтруктураСтрокиТЧ.Значение; 
				Если ТипЗнч(СтрокаТЧ.Номенклатура.ИтоговоеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда
					Если СтрокаТЧ.Услуга.ИтоговоеЗначение = Истина Тогда
						СчетчикУслуг = СчетчикУслуг + 1;
					КонецЕсли;
				ИначеЕсли ПустаяСтрока(СтрокаТЧ.ЕдиницаИзмерения.ИтоговоеЗначение) И ТипЗнч(СтрокаТЧ.Номенклатура.ИтоговоеЗначение) <> Тип("СправочникСсылка.Номенклатура") Тогда 
					СчетчикУслуг = СчетчикУслуг + 1;	
				КонецЕсли;
				
				Если СтрокаТЧ.СуммаНДС.ИтоговоеЗначение <> 0 Тогда
					УчитыватьНДС = Истина;
					Попытка 
						СтавкаНДС = Число(СтрокаТЧ.СтавкаНДС.ИсходноеЗначение);
					Исключение
						СтавкаНДС = 0;
					КонецПопытки;
					Если СтавкаНДС > 0 И СтрокаТЧ.Всего.ИтоговоеЗначение <> 0 И СтрокаТЧ.Сумма.ИтоговоеЗначение = СтрокаТЧ.Всего.ИтоговоеЗначение Тогда
						СчетчикРавныхСумм = СчетчикРавныхСумм + 1;	
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			СуммаВключаетНДС = ?(СчетчикРавныхСумм/Документ.ТЧ.Количество() > 0.5,	Истина, Ложь);
	        			
			//Присваиваем значение флага "Услуга" для новых номенклатур, заполняем реквизиты номенклатуры, заполняем счета
			Услуги = ?(СчетчикУслуг/Документ.ТЧ.Количество() > 0.5, Истина, Ложь);
			ГруппаНовыхНоменклатур = Неопределено;
			Документ.ЗначениеНастроек.Свойство("ГруппаНовыхНоменклатур", ГруппаНовыхНоменклатур);
			ГруппаНоменклатурыПоУмолчанию = ГруппаНовыхНоменклатур.Значение;
			Для каждого СтруктураСтрокиТЧ Из Документ.ТЧ Цикл
				СтрокаТЧ = СтруктураСтрокиТЧ.Значение; 
				
				Если ТипЗнч(СтрокаТЧ.Номенклатура.ИтоговоеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда
					Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
						Услуга = СтрокаТЧ.Номенклатура.ИтоговоеЗначение.Услуга;
						Если СтрокаТЧ.Свойство("СтранаПроисхождения") Тогда
							СтрокаТЧ.СтранаПроисхождения.ИтоговоеЗначение = СтрокаТЧ.Номенклатура.ИтоговоеЗначение.СтранаПроисхождения;
							СтрокаТЧ.НомерГТД.ИтоговоеЗначение = СтрокаТЧ.Номенклатура.ИтоговоеЗначение.НомерГТД;
						КонецЕсли;
					Иначе
						Услуга = (СтрокаТЧ.Номенклатура.ИтоговоеЗначение.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
					КонецЕсли;
					ГруппаНоменклатуры = СтрокаТЧ.Номенклатура.ИтоговоеЗначение.Родитель;
				Иначе
					Услуга = Услуги;
					ГруппаНоменклатуры = ГруппаНоменклатурыПоУмолчанию; 
				КонецЕсли;
				
				СтрокаТЧ.Услуга.СопоставленноеЗначение = Услуга;
				СтрокаТЧ.Услуга.ИтоговоеЗначение = СтрокаТЧ.Услуга.СопоставленноеЗначение;
				СтрокаТЧ.ГруппаНоменклатуры.СопоставленноеЗначение = ГруппаНоменклатуры;
				СтрокаТЧ.ГруппаНоменклатуры.ИтоговоеЗначение = СтрокаТЧ.ГруппаНоменклатуры.СопоставленноеЗначение;
				
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ГруппаНоменклатуры.ИтоговоеЗначение) Тогда
					СтруктураГруппаНовыхНоменклатур = Неопределено;
					Документ.ЗначениеНастроек.Свойство("ГруппаНовыхНоменклатур", СтруктураГруппаНовыхНоменклатур);
					ГруппаНоменклатуры = СтруктураГруппаНовыхНоменклатур.Значение
				Иначе
					ГруппаНоменклатуры = СтрокаТЧ.ГруппаНоменклатуры.ИтоговоеЗначение;	
				КонецЕсли;
				Если ИмяШаблона = "БухгалтерияПредприятия 3.0" И НЕ Документ.ВидДокумента = "СП" Тогда
					РекСчУчета = ЗаполнитьСчета(СтрокаТЧ.Номенклатура.ИтоговоеЗначение, СтрокаШапки.Организация.ИтоговоеЗначение, СтрокаШапки.Склад.ИтоговоеЗначение, ГруппаНоменклатуры);
					ЗаполнитьСчетаВСтроке(СтрокаТЧ, РекСчУчета, Документ.ВидДокумента);
				КонецЕсли;
			КонецЦикла;

		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда

			НалогообложениеНДС = СтрокаШапки.НалогообложениеНДС.СопоставленноеЗначение;
			СуммаВключаетНДС = Ложь;
			УчитыватьНДС = СтрокаШапки.ВсегоНДС.ИтоговоеЗначение <> 0;

			Для каждого СтруктураСтрокиТЧ Из Документ.ТЧ Цикл
				СтрокаТЧ = СтруктураСтрокиТЧ.Значение; 
				Если ТипЗнч(СтрокаТЧ.Номенклатура.ИтоговоеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда
					ГруппаНоменклатуры = СтрокаТЧ.Номенклатура.ИтоговоеЗначение.Родитель;
				Иначе
					ГруппаНовыхНоменклатур = Неопределено;
					Документ.ЗначениеНастроек.Свойство("ГруппаНовыхНоменклатур", ГруппаНовыхНоменклатур);
					ГруппаНоменклатуры = ГруппаНовыхНоменклатур.Значение;
				КонецЕсли;
				СтрокаТЧ.ГруппаНоменклатуры.СопоставленноеЗначение = ГруппаНоменклатуры;
				СтрокаТЧ.ГруппаНоменклатуры.ИтоговоеЗначение = СтрокаТЧ.ГруппаНоменклатуры.СопоставленноеЗначение;
			КонецЦикла;
		ИначеЕсли ИмяШаблона = "Розница 2.2" Тогда
			
			СуммаВключаетНДС = Ложь;
			УчитыватьНДС = СтрокаШапки.ВсегоНДС.ИтоговоеЗначение <> 0;
			Если СтрокаШапки.ВсегоНДС.ИтоговоеЗначение = 0 Тогда
				УчитыватьНДС = Ложь;
			Иначе
				УчитыватьНДС = Истина;
			КонецЕсли;
			
			Для каждого СтруктураСтрокиТЧ Из Документ.ТЧ Цикл
				СтрокаТЧ = СтруктураСтрокиТЧ.Значение; 
				Если ТипЗнч(СтрокаТЧ.Номенклатура.ИтоговоеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда
					ГруппаНоменклатуры = СтрокаТЧ.Номенклатура.ИтоговоеЗначение.Родитель;
				Иначе
					ГруппаНовыхНоменклатур = Неопределено;
					Документ.ЗначениеНастроек.Свойство("ГруппаНовыхНоменклатур", ГруппаНовыхНоменклатур);
					ГруппаНоменклатуры = ГруппаНовыхНоменклатур.Значение;
				КонецЕсли;
				СтрокаТЧ.ГруппаНоменклатуры.СопоставленноеЗначение = ГруппаНоменклатуры;
				СтрокаТЧ.ГруппаНоменклатуры.ИтоговоеЗначение = СтрокаТЧ.ГруппаНоменклатуры.СопоставленноеЗначение;
			КонецЦикла;
		КонецЕсли;
		
		// Обработка акта на услуги по умолчанию
		Если Документ.ТипРаспознан = "AT" ИЛИ Документ.ТипРаспознан = "SC" Тогда
			ВычислениеСтавкиНДСПоИтогу = Истина;
			КолонкаВсегоЗаполнена = Ложь;
			Для каждого СтруктураСтрокиТЧ Из Документ.ТЧ Цикл
				СтрокаТЧ = СтруктураСтрокиТЧ.Значение; 
				Если Документ.ТипРаспознан = "AT" И НЕ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" И НЕ ИмяШаблона = "УправлениеТорговлей 11.1" И НЕ ИмяШаблона = "Розница 2.2" И ТипЗнч(СтрокаТЧ.Номенклатура.ИтоговоеЗначение) <> Тип("СправочникСсылка.Номенклатура") Тогда
					СтрокаТЧ.Услуга.ИтоговоеЗначение = Истина;	
				КонецЕсли;
				Если СтрокаТЧ.СтавкаНДС.ИсходноеЗначение <> "" ИЛИ (СтрокаТЧ.СуммаНДС.ИсходноеЗначение <> 0 И СтрокаТЧ.Всего.ИсходноеЗначение <> 0) Тогда
					ВычислениеСтавкиНДСПоИтогу = Ложь;
					Если СтрокаТЧ.СтавкаНДС.ИсходноеЗначение = "" Тогда
						СтавкаНДСЧисло = Окр((СтрокаТЧ.СуммаНДС.ИсходноеЗначение/(СтрокаТЧ.Всего.ИсходноеЗначение - СтрокаТЧ.СуммаНДС.ИсходноеЗначение))*100);					
						СтавкаНДС = ПолучитьСтавкуНДС(Строка(СтавкаНДСЧисло), ИмяШаблона);
						СтрокаТЧ.СтавкаНДС.ИтоговоеЗначение = СтавкаНДС;
					КонецЕсли;
				КонецЕсли;
				Если СтрокаТЧ.Всего.ИтоговоеЗначение <> 0 Тогда
					КолонкаВсегоЗаполнена = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если ВычислениеСтавкиНДСПоИтогу Тогда
				Если СтрокаШапки.Всего.ИтоговоеЗначение = 0 ИЛИ СтрокаШапки.ВсегоНДС.ИтоговоеЗначение = 0 Тогда
					СтавкаНДС = ПолучитьСтавкуНДС("", ИмяШаблона);
				Иначе
					Попытка
						СтавкаНДСЧисло = Окр((СтрокаШапки.ВсегоНДС.ИтоговоеЗначение/(СтрокаШапки.Всего.ИтоговоеЗначение - СтрокаШапки.ВсегоНДС.ИтоговоеЗначение))*100);					
						СтавкаНДС = ПолучитьСтавкуНДС(Строка(СтавкаНДСЧисло), ИмяШаблона);
					Исключение
					КонецПопытки;
				КонецЕсли;
				Если (Строка(ТипЗнч(СтавкаНДС)) = "Ставки НДС" И СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС) ИЛИ (Строка(ТипЗнч(СтавкаНДС)) = "Ставка НДС" И Найти(Строка(СтавкаНДС), "БезНДС") <> 0) Тогда
					УчитыватьНДС = Истина;
				КонецЕсли;
				Для каждого СтруктураСтрокиТЧ Из Документ.ТЧ Цикл
					СтрокаТЧ = СтруктураСтрокиТЧ.Значение; 
					СтрокаТЧ.СтавкаНДС.ИтоговоеЗначение = СтавкаНДС;
				КонецЦикла;
			КонецЕсли;	
			Если НЕ КолонкаВсегоЗаполнена И СтрокаШапки.ВсегоНДС.ИтоговоеЗначение <> 0 И СтрокаШапки.Всего.ИтоговоеЗначение = СтрокаШапки.ВсегоНДС.ИтоговоеЗначение + СтрокаШапки.Итого.ИтоговоеЗначение Тогда
				СуммаВключаетНДС = Ложь;
			ИначеЕсли НЕ КолонкаВсегоЗаполнена Тогда
				СуммаВключаетНДС = Истина;
			КонецЕсли;
		КонецЕсли;
		Если СтрокаШапки.Свойство("СтавкаНДС") И УчитыватьНДС И Документ.ТЧ <> Неопределено И Документ.ТЧ.Количество()>0 Тогда
			Для Каждого СтрокаТЧ ИЗ Документ.ТЧ Цикл
				Если СтрокаТЧ.Значение.Свойство("СтавкаНДС") Тогда
					СтрокаШапки.СтавкаНДС.ИтоговоеЗначение = СтрокаТЧ.Значение.СтавкаНДС.ИтоговоеЗначение;
				КонецЕсли;
				Прервать;
			КонецЦикла;
		КонецЕсли;
		
		Если ВклНДСБезУчетаНДС Тогда
		    СуммаВключаетНДС = Истина;
			УчитыватьНДС = Ложь;
		КонецЕсли;
		
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			СтрокаШапки.УчитыватьНДС.СопоставленноеЗначение = УчитыватьНДС;
			СтрокаШапки.УчитыватьНДС.ИтоговоеЗначение = УчитыватьНДС;
			СтрокаШапки.СуммаВключаетНДС.СопоставленноеЗначение = СуммаВключаетНДС;
			СтрокаШапки.СуммаВключаетНДС.ИтоговоеЗначение = СуммаВключаетНДС;
		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			СтрокаШапки.ЦенаВключаетНДС.СопоставленноеЗначение = СуммаВключаетНДС;
			СтрокаШапки.ЦенаВключаетНДС.ИтоговоеЗначение = СуммаВключаетНДС;
			Если УчитыватьНДС Тогда
				Если Документ.ВидДокумента = "ПТУ" ИЛИ Документ.ВидДокумента = "ЗП" ИЛИ Документ.ВидДокумента = "ПТ" Тогда
					СтрокаШапки.НалогообложениеНДС.ИтоговоеЗначение = "Закупка облагается НДС";
				Иначе
					СтрокаШапки.НалогообложениеНДС.ИтоговоеЗначение = "Продажа облагается НДС";
				КонецЕсли;
			Иначе
				Если Документ.ВидДокумента = "ПТУ" ИЛИ Документ.ВидДокумента = "ЗП" ИЛИ Документ.ВидДокумента = "ПТ" Тогда
					СтрокаШапки.НалогообложениеНДС.ИтоговоеЗначение = "Закупка не облагается НДС";
				Иначе
					СтрокаШапки.НалогообложениеНДС.ИтоговоеЗначение = "Продажа не облагается НДС";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
			СтрокаШапки.НалогообложениеНДС.СопоставленноеЗначение = ?(УчитыватьНДС, Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС, Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС);
			СтрокаШапки.НалогообложениеНДС.ИтоговоеЗначение = СтрокаШапки.НалогообложениеНДС.СопоставленноеЗначение;
			СтрокаШапки.СуммаВключаетНДС.СопоставленноеЗначение = СуммаВключаетНДС;
			СтрокаШапки.СуммаВключаетНДС.ИтоговоеЗначение = СуммаВключаетНДС;
		ИначеЕсли ИмяШаблона = "Розница 2.2" Тогда
			СтрокаШапки.ЦенаВключаетНДС.СопоставленноеЗначение = СуммаВключаетНДС;
			СтрокаШапки.ЦенаВключаетНДС.ИтоговоеЗначение = СуммаВключаетНДС;
			СтрокаШапки.УчитыватьНДС.СопоставленноеЗначение = УчитыватьНДС;
			СтрокаШапки.УчитыватьНДС.ИтоговоеЗначение = УчитыватьНДС;
		КонецЕсли;
		
		// Вычисление расчетных значений, проверка контрольных сумм и присвоение статусов
		ВычислениеРасчетныхЗначений(Документ.ДокументИД, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбновитьДанныеДокумента(ИД) Экспорт
	
	Документ = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ИД, 1))[0];
	ИндексСтроки = ТаблицаДанных.Индекс(Документ);

	Возврат ПреобразоватьСтрокуТаблицыВСтруктуру(ТаблицаДанных, ИндексСтроки);
	
КонецФункции

&НаКлиенте
Функция ВычислениеРасчетныхЗначенийВызовСервера(ИД, Сопоставление = Ложь) Экспорт
	
	ВычислениеРасчетныхЗначений(ИД, Сопоставление);
	
КонецФункции

// Процедура выполняет вычисление расчетных значений, проверку контрольных сумм и присвоение статусов
//
// Параметры:
//		ИД - идентификатор документа
//		Сопоставление - признак заполнения сопоставляемого значения 
//
&НаСервере
Процедура ВычислениеРасчетныхЗначений(ИД, Сопоставление = Ложь)
	
	МассивДокументов = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ИД, 1)) ;
	Если МассивДокументов.Количество() > 0 Тогда
		Документ = МассивДокументов[0];
	КонецЕсли;

	Шапка = Документ.Шапка;
	ТЧ = Документ.ТЧ;
	Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда	
		УчитыватьНДС = Шапка.УчитыватьНДС.ИтоговоеЗначение;
		СуммаВключаетНДС = Шапка.СуммаВключаетНДС.ИтоговоеЗначение;
		ИмяКоличество = "Количество";
	ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
		НалогообложениеНДС = Шапка.НалогообложениеНДС.ИтоговоеЗначение;
		УчитыватьНДС = (НалогообложениеНДС = "Закупка облагается НДС" ИЛИ НалогообложениеНДС = "Продажа облагается НДС");
		СуммаВключаетНДС = Шапка.ЦенаВключаетНДС.ИтоговоеЗначение;
		ИмяКоличество = "КоличествоУпаковок";
	ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
		УчитыватьНДС = (Шапка.НалогообложениеНДС.ИтоговоеЗначение = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС);
		СуммаВключаетНДС = Шапка.СуммаВключаетНДС.ИтоговоеЗначение;
		ИмяКоличество = "Количество";
	ИначеЕсли ИмяШаблона = "Розница 2.2" Тогда
		УчитыватьНДС = Шапка.УчитыватьНДС.ИтоговоеЗначение;
		СуммаВключаетНДС = Шапка.ЦенаВключаетНДС.ИтоговоеЗначение;
		ИмяКоличество = "КоличествоУпаковок";
	КонецЕсли;
	СуммаПоДокументу = 0;
	СуммаНДСПоДокументу = 0;
	
	Для каждого СтруктураСтрокиТЧ Из ТЧ Цикл
		
		СтрокаТЧ = СтруктураСтрокиТЧ.Значение;
		СтавкаНДС = СтрокаТЧ.СтавкаНДС.ИтоговоеЗначение;
		СтавкаНДСЧисло = 0;
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0"  Тогда
			СтавкаНДСЧисло = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме("УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Параметры)", СтавкаНДС);
		ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
			Если ТипЗнч(СтавкаНДС) = Тип("СправочникСсылка.СтавкиНДС") Тогда
				СтавкаНДСЧисло = СтавкаНДС.Ставка;
			Иначе
				СтавкаНДСЧисло = 0;
			КонецЕсли;
		ИначеЕсли ИмяШаблона = "Розница 2.2" Тогда
			СтавкаНДСЧисло = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме("ОбработкаТабличнойЧастиТоварыКлиентСерверПовтИсп.ПолучитьСтавкуНДСЧислом(Параметры)", СтавкаНДС);
		КонецЕсли;
		
		ОбратныйПорядокРасчетаНДС = УчитыватьНДС И НЕ СуммаВключаетНДС И (СтрокаТЧ.Всего.ИсходноеЗначение <> 0);
		Множитель = 100;
		
		//КОЛИЧЕСТВО
		Если СтрокаТЧ[ИмяКоличество].ИтоговоеЗначение = 0 Тогда
			Если СтрокаТЧ.Сумма.ИтоговоеЗначение <> 0 И СтрокаТЧ.Цена.ИтоговоеЗначение <> 0 Тогда
				Количество = СтрокаТЧ.Сумма.ИтоговоеЗначение/СтрокаТЧ.Цена.ИтоговоеЗначение;
				Если Количество - Окр(Количество) < 0.01 Тогда
					Количество = Окр(Количество);
					Если Количество = 0 Тогда
						Количество = 1;	
					КонецЕсли;
				КонецЕсли;
			Иначе
				Количество = 1;
			КонецЕсли;
			СтрокаТЧ[ИмяКоличество].ИтоговоеЗначение = Количество;
			Если Сопоставление Тогда
				СтрокаТЧ[ИмяКоличество].СопоставленноеЗначение = СтрокаТЧ[ИмяКоличество].ИтоговоеЗначение;
				СтрокаТЧ[ИмяКоличество].СпособСопоставления = "8";
			КонецЕсли;
		Иначе
			Количество = СтрокаТЧ[ИмяКоличество].ИтоговоеЗначение;
		КонецЕсли;
		
		Если ОбратныйПорядокРасчетаНДС Тогда
			//От общего к частному
			//Сумма
			
			СтрокаТЧ.Всего.ИтоговоеЗначение = СтрокаТЧ.Всего.ИсходноеЗначение;
			Если СуммаВключаетНДС Тогда
				Сумма = СтрокаТЧ.Всего.ИтоговоеЗначение;
			Иначе
				Если ИмяШаблона= "Розница 2.2" Тогда
					Сумма = Окр(СтрокаТЧ.Всего.ИтоговоеЗначение / (1 + СтавкаНДСЧисло), 2);
				Иначе
					Сумма = Окр(СтрокаТЧ.Всего.ИтоговоеЗначение / (1 + СтавкаНДСЧисло / Множитель), 2);
				КонецЕсли;
			КонецЕсли;
			РазницаСумма = СтрокаТЧ.Сумма.ИсходноеЗначение - Сумма;
			Если (РазницаСумма > 0 И РазницаСумма < 0.03) ИЛИ (РазницаСумма < 0 И РазницаСумма > -0.03) Тогда
				Сумма = СтрокаТЧ.Сумма.ИсходноеЗначение;
			КонецЕсли;
			СтрокаТЧ.Сумма.ИтоговоеЗначение = Сумма;
			
			//Цена
			Цена = Сумма/Количество;
			Цена = Окр(Цена, 2);
			РазницаЦена = СтрокаТЧ.Цена.ИсходноеЗначение - Цена;
			Если (РазницаЦена > 0 И РазницаЦена < 0.03) ИЛИ (РазницаЦена < 0 И РазницаЦена > -0.03) Тогда
				Цена = СтрокаТЧ.Цена.ИсходноеЗначение;
			КонецЕсли;
			СтрокаТЧ.Цена.ИтоговоеЗначение = Цена;
			
			//НДС
			Если ИмяШаблона= "Розница 2.2" Тогда
				СуммаНДС = СтрокаТЧ.Всего.ИтоговоеЗначение * (1 - 1 / (1 + СтавкаНДСЧисло));
			Иначе
				СуммаНДС = СтрокаТЧ.Всего.ИтоговоеЗначение * (1 - 1 / (1 + СтавкаНДСЧисло/Множитель));
			КонецЕсли;
			СуммаНДС = Окр(СуммаНДС, 2);
			РазницаСуммаНДС = СтрокаТЧ.СуммаНДС.ИсходноеЗначение - СуммаНДС;
			Если (РазницаСуммаНДС > 0 И РазницаСуммаНДС < 0.03) ИЛИ (РазницаСуммаНДС < 0 И РазницаСуммаНДС > -0.03) Тогда
				СуммаНДС = СтрокаТЧ.СуммаНДС.ИсходноеЗначение;
			КонецЕсли;
			СтрокаТЧ.СуммаНДС.ИтоговоеЗначение = СуммаНДС;
			
			
		Иначе
			//От частного к общему
			Сумма = СтрокаТЧ.Сумма.ИтоговоеЗначение;
			//Цена
			Если Сумма <> 0 Тогда
				Цена = Сумма/Количество;
				Цена = Окр(Цена, 2);
				РазницаЦена = СтрокаТЧ.Цена.ИсходноеЗначение - Цена;
				Если (РазницаЦена > 0 И РазницаЦена < 0.03) ИЛИ (РазницаЦена < 0 И РазницаЦена > -0.03) Тогда
					Цена = СтрокаТЧ.Цена.ИсходноеЗначение;
				КонецЕсли;
				СтрокаТЧ.Цена.ИтоговоеЗначение = Цена;
			Иначе
				Цена = Окр(СтрокаТЧ.Цена.ИтоговоеЗначение, 2);
				РазницаЦена = СтрокаТЧ.Цена.ИсходноеЗначение - Цена;
				Если (РазницаЦена > 0 И РазницаЦена < 0.03) ИЛИ (РазницаЦена < 0 И РазницаЦена > -0.03) Тогда
					Цена = СтрокаТЧ.Цена.ИсходноеЗначение;
				КонецЕсли;
				СтрокаТЧ.Цена.ИтоговоеЗначение = Цена;
				Сумма = Окр(СтрокаТЧ.Цена.ИтоговоеЗначение * Количество, 2);
				РазницаСумма = СтрокаТЧ.Сумма.ИсходноеЗначение - Сумма;
				Если (РазницаСумма > 0 И РазницаСумма < 0.03) ИЛИ (РазницаСумма < 0 И РазницаСумма > -0.03) Тогда
					Сумма = СтрокаТЧ.Сумма.ИсходноеЗначение;
				КонецЕсли;
				СтрокаТЧ.Сумма.ИтоговоеЗначение = Сумма;
			КонецЕсли;
			//НДС
			Если УчитыватьНДС Тогда
				СуммаНДС = Сумма * СтавкаНДСЧисло / 100;
				СуммаНДС = Окр(СуммаНДС, 2);
			Иначе
				СуммаНДС = 0;
			КонецЕсли;
			//Сумма, Всего
			СтрокаТЧ.Сумма.ИтоговоеЗначение = Сумма;
			Если СуммаВключаетНДС Тогда
				Всего = Сумма;
				Если ИмяШаблона="Розница 2.2" Тогда
					СуммаНДС = Сумма * (1 - 1 / (1 + СтавкаНДСЧисло));
				Иначе
					СуммаНДС = Сумма * (1 - 1 / (1 + СтавкаНДСЧисло/Множитель));
				КонецЕсли;
				РазницаСуммаНДС = СтрокаТЧ.СуммаНДС.ИсходноеЗначение - СуммаНДС;
				Если (РазницаСуммаНДС > 0 И РазницаСуммаНДС < 0.03) ИЛИ (РазницаСуммаНДС < 0 И РазницаСуммаНДС > -0.03) Тогда
					СуммаНДС = СтрокаТЧ.СуммаНДС.ИсходноеЗначение;
				КонецЕсли;
			Иначе
				РазницаСуммаНДС = СтрокаТЧ.СуммаНДС.ИсходноеЗначение - СуммаНДС;
				Если (РазницаСуммаНДС > 0 И РазницаСуммаНДС < 0.03) ИЛИ (РазницаСуммаНДС < 0 И РазницаСуммаНДС > -0.03) Тогда
					СуммаНДС = СтрокаТЧ.СуммаНДС.ИсходноеЗначение;
				КонецЕсли;
				СтрокаТЧ.СуммаНДС.ИтоговоеЗначение = СуммаНДС;

				Всего = Сумма + СуммаНДС;

			КонецЕсли;
			СтрокаТЧ.СуммаНДС.ИтоговоеЗначение = СуммаНДС;
			
			РазницаВсего = СтрокаТЧ.Всего.ИсходноеЗначение - Всего;
			Если (РазницаВсего > 0 И РазницаВсего < 0.03) ИЛИ (РазницаВсего < 0 И РазницаВсего > -0.03) Тогда
				Всего = СтрокаТЧ.Всего.ИсходноеЗначение;
			КонецЕсли;
			СтрокаТЧ.Всего.ИтоговоеЗначение = Всего;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//СУММА ПО ДОКУМЕНТУ
	Для каждого СтруктураСтрокиТЧ Из ТЧ Цикл
		
		СтрокаТЧ = СтруктураСтрокиТЧ.Значение;
		
		СуммаПоДокументу = СуммаПоДокументу + СтрокаТЧ.Всего.ИтоговоеЗначение;
		Если УчитыватьНДС Тогда
			СуммаНДСПоДокументу = СуммаНДСПоДокументу + СтрокаТЧ.СуммаНДС.ИтоговоеЗначение;
		КонецЕсли;
		
		//СОПОСТАВЛЕНИЕ			
		Если Сопоставление Тогда
			СтрокаТЧ.Сумма.СопоставленноеЗначение = СтрокаТЧ.Сумма.ИтоговоеЗначение;
			СтрокаТЧ.СуммаНДС.СопоставленноеЗначение = СтрокаТЧ.СуммаНДС.ИтоговоеЗначение;
			СтрокаТЧ.Цена.СопоставленноеЗначение = СтрокаТЧ.Цена.ИтоговоеЗначение;
		КонецЕсли;

	КонецЦикла;	

	ИстинностьВсего = Ложь;
	ИстинностНДСВсего = Ложь;
	Если Окр(СуммаПоДокументу, 2) = Окр(Шапка.Всего.ИтоговоеЗначение, 2) Тогда
		ИстинностьВсего = Истина;	
	КонецЕсли;
	
	Если Окр(СуммаНДСПоДокументу, 2) = Окр(Шапка.ВсегоНДС.ИтоговоеЗначение, 2) ИЛИ НЕ УчитыватьНДС Тогда
		ИстинностНДСВсего = Истина;	
	КонецЕсли;
	
	Если ИстинностьВсего И ИстинностНДСВсего Тогда
		Документ.Статус = 2;
	Иначе
		Документ.Статус = 3;
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет заполнение строки наименования документа
//
// Прараметры:
//		ИД - идентификатор документа
//		СтруктураПараметров - структура параметров, необязательный
//
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНаименованиеДокумента(Документ, СтруктураТиповДокументов) Экспорт
	                       
	//СтрокаШапки = Документ.Шапка;
	//
	//ОписаниеТипа = Неопределено;
	//СтруктураТиповДокументов.Свойство(Документ.ТипРаспознан, ОписаниеТипа); 
	//Если НЕ ОписаниеТипа = Неопределено Тогда
	//	Документ.Наименование = ОписаниеТипа.ОтображениеКраткоe;
	//Иначе
	//	Документ.Наименование = "" + Документ.Тип;
	//КонецЕсли;

	//// Выполняется заполнение строки наименования документа для каждого вида документа
	//Если Документ.ВидДокумента = "КФЛ" Тогда
	//	Документ.Наименование = Документ.Наименование + " " + СтрокаШапки.Фамилия.ИтоговоеЗначение + " " + СтрокаШапки.Имя.ИтоговоеЗначение + " " + СтрокаШапки.Отчество.ИтоговоеЗначение;
	//Иначе
	//	ДатаДокумента = ?(СтрокаШапки.ДатаВходящегоДокумента.ИтоговоеЗначение = Дата("00000000"), "__.__.____", Формат(СтрокаШапки.ДатаВходящегоДокумента.ИтоговоеЗначение, "ДФ = ""дд.ММ.гггг"""));
	//	НомерДокумента = ?(ПустаяСтрока(СтрокаШапки.НомерВходящегоДокумента.ИтоговоеЗначение), "__", СтрокаШапки.НомерВходящегоДокумента.ИтоговоеЗначение);
	//	СтрокаНаименованиеКонтрагента = "";
	//	Если ЗначениеЗаполнено(СтрокаШапки.Контрагент.ИтоговоеЗначение) Тогда
	//		СтрокаНаименованиеКонтрагента = " (" + СтрокаШапки.Контрагент.ИтоговоеЗначение + ")";
	//	КонецЕсли;
	//	Документ.Наименование = Документ.Наименование + " №" + НомерДокумента + " от " + ДатаДокумента + СтрокаНаименованиеКонтрагента;
	//КонецЕсли;
	
КонецПроцедуры

// Функция определяет вид документа в зависимости от того является ли исходный документ входящим или исходящим 
//
// Параметры:
//		ШапкаXML - данные шапки из xml документа
//		СтрокаТипаДокумента - строка таблицы входящих документов соответствующая типу первичного документа
//		СтруктураПараметров - структура параметров, необязательный
//
// Возвращаемое значение:
//		ВидДокумента, тип "Строка"
//
&НаСервереБезКонтекста
Функция АвтоопределениеСценарияСозданияДокумента(ШапкаXML, СтруктураОПФ) Экспорт
	
	Исходящий = Ложь;

	Если ШапкаXML.свойство("IssCompany") И НЕ СтрокаНеИмеетСмысла(ШапкаXML.IssCompany) Тогда
		ОбработанноеНаименование = ОбработкаНаименованияЭлемента(СтруктураОПФ, ШапкаXML.IssCompany);
		
		УНФ = (Метаданные.Справочники.Организации.Реквизиты.Найти("НаименованиеСокращенное") = Неопределено);
		МассивНаименований = Новый Массив;
		МассивНаименований.Добавить(ШапкаXML.IssCompany);
		МассивНаименований.Добавить(ОбработанноеНаименование.КраткоеНаименование);                            
		МассивНаименований.Добавить(ОбработанноеНаименование.ПолноеНаименование);                             
		МассивНаименований.Добавить(ОбработанноеНаименование.НаименованиеБезОПФ);
		МассивНаименований.Добавить(ОбработанноеНаименование.КраткоеНаименованиеВариант2);
		МассивНаименований.Добавить(ОбработанноеНаименование.КраткоеНаименованиеВариант3);
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления";
		Запрос.УстановитьПараметр("МассивНаименований", МассивНаименований);
		Если УНФ ИЛИ Метаданные.Имя="Розница" Тогда
			Запрос.Текст = Запрос.Текст + "
			| И	(Организации.Наименование В (&МассивНаименований)";
			Для Каждого ВариантНаименования Из МассивНаименований Цикл
				Если ВариантНаименования <> "" Тогда
					ВариантНаименования = СтрЗаменить(ВариантНаименования, """", """"""); 
					Запрос.Текст = Запрос.Текст + "
					|	ИЛИ Организации.НаименованиеПолное Подобно """ + ВариантНаименования + """";
				КонецЕсли;
			КонецЦикла;
			Запрос.Текст = Запрос.Текст + ")";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			| И	(Организации.НаименованиеСокращенное В (&МассивНаименований)
			|			ИЛИ Организации.НаименованиеПолное В (&МассивНаименований))";
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Исходящий = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Исходящий;
	
КонецФункции



//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// КАСТОМИЗАЦИЯ (выполнение действий в зависимости от конфигурации базы) ПРОЦЕДУР 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Функция для проверки возможности создания и заполнения документа в базе данных
//
// Параметры:
//  ИД - Строка, уникальный идентификатор документа из контейнера данных,
//	СтруктураСообщений - тип "Структура", служит для сохранения сообщений пользователю 
//
// Возвращаемое значение:
//	ДокументГотов - признак готовности документа к загрузке
//
&НаСервереБезКонтекста
Функция ПроверкаГотовностиКЗагрузкеИПоискДублей(Знач ТаблицаДанных, ИД, СтруктураСообщений, ВАрхив = Ложь) Экспорт
	
	Документ = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ИД, 1))[0];
	
	ДокументГотов = Истина;
	СтрокаШапки = Документ.Шапка;
	Если НЕ Документ.ВидДокумента = "КФЛ" Тогда
		Если Не ЗначениеЗаполнено(СтрокаШапки.Организация.ИтоговоеЗначение) Тогда
			ТекстСообщения = "Документ " + Документ.Наименование + " не готов к загрузке: Не указана организация!";
			СтруктураСообщений.Вставить("ТекстСообщения", ТекстСообщения);
			ДокументГотов = Ложь;
		КонецЕсли;
		Если СтруктураСообщений.ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ СтруктураСообщений.ИмяШаблона = "КомплекснаяАвтоматизация 2.0" ИЛИ СтруктураСообщений.ИмяШаблона = "Розница 2.2" Тогда 
			Для Каждого Строка ИЗ Документ.ТЧ Цикл 
				Если ТипЗнч(Строка.Значение.Номенклатура.ИтоговоеЗначение) <> Тип("СправочникСсылка.Номенклатура") 
					И Строка.Значение.ВидНоменклатуры.ИтоговоеЗначение = Справочники.ВидыНоменклатуры.ПустаяСсылка() Тогда
					ТекстСообщения = "Документ " + Документ.Наименование + " не готов к загрузке: в табличной части документа не заполнен вид номеклатуры." + Символы.ПС + "Для автоматического заполнения вида номенклатуры заполните соответствующие настройки в меню настроек. ";
					СтруктураСообщений.Вставить("ТекстСообщения", ТекстСообщения);
					ДокументГотов = Ложь;
					Прервать;
				КонецЕсли;			
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументГотов Тогда
		СтараяСсылка = ПоискДублей(Документ, СтруктураСообщений, ВАрхив);
	Иначе
		СтараяСсылка = Неопределено;
	КонецЕсли;

	Возврат Новый Структура("Готов, СтараяСсылка", ДокументГотов, СтараяСсылка);
	
КонецФункции

&НаКлиенте
Функция ПоискДублейВызовСервера(ДокументИД) Экспорт
	
	СтруктураСообщений = Новый Структура();
	СтруктураСообщений.Вставить("ИмяШаблона", ИмяШаблона); 
	СтруктураСообщений.Вставить("ВерсияКонфигурации", ВерсияКонфигурации); 
 
	
	ПроверкаГотовностиКЗагрузкеИПоискДублей(ТаблицаДанных, ДокументИД, СтруктураСообщений);
	
	Возврат СтруктураСообщений.МассивССылок;
	
КонецФункции

// Функция для проверки существования документов контрагента с заданными входящими датой и номером
//
// Параметры:
//  ИД - Строка, уникальный идентификатор документа из контейнера данных,
//	СтруктураСообщений - тип "Структура", служит для сохранения сообщений пользователю 
//
// Возвращаемое значение:
//	СтараяСсылка - ссылка на найденный документ, если дублей нет то Неопределено
//
&НаСервереБезКонтекста
Функция ПоискДублей(Знач Документ, СтруктураСообщений, ВАрхив = Ложь) Экспорт
	
	СтараяСсылка = Неопределено;
	СтрокаШапки = Документ.Шапка;
	    	
	МассивССылок = Новый Массив;

	Если ЗначениеЗаполнено(Документ.СсылкаДокумент) И Не Документ.СсылкаДокумент.Пустая() И Документ.СсылкаДокумент.ПолучитьОбъект() <> Неопределено Тогда
		
		СтараяСсылка = Документ.СсылкаДокумент;
		
	КонецЕсли;
	
	Если Документ.ВидДокумента = "ПТУ" ИЛИ Документ.ВидДокумента = "РТУ" ИЛИ Документ.ВидДокумента = "ПН" ИЛИ Документ.ВидДокумента = "РН" ИЛИ Документ.ВидДокумента = "ПТ" ИЛИ Документ.ВидДокумента = "РТ" Тогда
		
		Если СтараяСсылка = Неопределено Тогда
			
			//Поиск документов с равными датой и номером вх.док-та для контрагента
			Если  Документ.ВидДокумента = "ПТУ" Тогда
				Если (СтруктураСообщений.ИмяШаблона = "УправлениеТорговлей 11.1" И Лев(Метаданные.Версия, 4) = "11.4") ИЛИ (СтруктураСообщений.ИмяШаблона = "КомплекснаяАвтоматизация 2.0" И Лев(Метаданные.Версия, 3) = "2.4") Тогда
					ВидДокумента = "ПриобретениеТоваровУслуг"
				Иначе
					ВидДокумента = "ПоступлениеТоваровУслуг";
				КонецЕсли;
			ИначеЕсли Документ.ВидДокумента = "СП" Тогда
				ВидДокумента = "СчетНаОплатуПоставщика";
			ИначеЕсли  Документ.ВидДокумента = "РТУ" Тогда
				ВидДокумента = "РеализацияТоваровУслуг";
			ИначеЕсли  Документ.ВидДокумента = "ПН" Тогда
				ВидДокумента = "ПриходнаяНакладная";
			ИначеЕсли  Документ.ВидДокумента = "РН" Тогда
				ВидДокумента = "РасходнаяНакладная";
			ИначеЕсли Документ.ВидДокумента = "ПТ" Тогда
				ВидДокумента = "ПоступлениеТоваров";
			ИначеЕсли Документ.ВидДокумента = "РТ" Тогда
				ВидДокумента = "РеализацияТоваров";
			КонецЕсли;                                                                 
			                                                                           
			Запрос = Новый Запрос;                                                     
			Запрос.Текст =                                                             
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	" + ВидДокумента + ".Ссылка
			|ИЗ
			|	Документ." + ВидДокумента + " КАК " + ВидДокумента + "
			|ГДЕ
			|	" + ВидДокумента + ".Контрагент = &Контрагент";
			//|	И НЕ " + ВидДокумента + ".ПометкаУдаления";
			//Если НЕ ВАрхив Тогда
			//	Запрос.Текст = Запрос.Текст +"
			//	|	И НЕ " + ВидДокумента + ".Проведен";
			//КонецЕсли;
			Запрос.УстановитьПараметр("Контрагент",  СтрокаШапки.Контрагент.ИтоговоеЗначение);
			Если СтруктураСообщений.ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ СтруктураСообщений.ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
				Запрос.УстановитьПараметр("НомерВходящегоДокумента",  СтрокаШапки.НомерВходящегоДокумента.ИтоговоеЗначение);
				Запрос.Текст = Запрос.Текст +"
				|	И " + ВидДокумента + ".ВидОперации В (&ВидыОперации)";
				ВидыОперации = Новый Массив;
				Если Документ.ВидДокумента = "ПТУ" Тогда
					Запрос.Текст = Запрос.Текст +"
					|	И " + ВидДокумента + ".ДатаВходящегоДокумента = &ДатаВходящегоДокумента 
					|	И " + ВидДокумента + ".НомерВходящегоДокумента = &НомерВходящегоДокумента";    
					ВидыОперации.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия);
					ВидыОперации.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары);
					ВидыОперации.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги);
					Запрос.УстановитьПараметр("ДатаВходящегоДокумента", СтрокаШапки.ДатаВходящегоДокумента.ИтоговоеЗначение);
				ИначеЕсли Документ.ВидДокумента = "РТУ" Тогда
					ВидыОперации.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия);
					ВидыОперации.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.Товары);
					ВидыОперации.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.Услуги);
					Запрос.Текст = Запрос.Текст +"
					|	И " + ВидДокумента + ".Дата МЕЖДУ &ДатаНачало И &ДатаКонец 
					|	И " + ВидДокумента + ".СуммаДокумента = &Всего";    
					Запрос.УстановитьПараметр("ДатаНачало", НачалоДня(СтрокаШапки.Дата.ИтоговоеЗначение));
					Запрос.УстановитьПараметр("ДатаКонец", КонецДня(СтрокаШапки.Дата.ИтоговоеЗначение));
					Запрос.УстановитьПараметр("Всего",  СтрокаШапки.Всего.ИтоговоеЗначение);
				ИначеЕсли Документ.ВидДокумента = "ПН" Тогда
					ВидыОперации.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика);
				ИначеЕсли Документ.ВидДокумента = "РН" Тогда
					ВидыОперации.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю);
				КонецЕсли;
				Запрос.УстановитьПараметр("ВидыОперации", ВидыОперации);
			ИначеЕсли СтруктураСообщений.ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ СтруктураСообщений.ИмяШаблона = "КомплекснаяАвтоматизация 2.0" ИЛИ СтруктураСообщений.ИмяШаблона = "Розница 2.2" Тогда 
				Если Документ.ВидДокумента = "ПТУ" Тогда
					Запрос.Текст = Запрос.Текст +"
					|	И " + ВидДокумента + ".ХозяйственнаяОперация = &ХозяйственнаяОперация";
					Запрос.УстановитьПараметр("ХозяйственнаяОперация",  Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
				ИначеЕсли Документ.ВидДокумента = "ПТ" Тогда
					Запрос.Текст = Запрос.Текст +"
					|	И " + ВидДокумента + ".ХозяйственнаяОперация = &ХозяйственнаяОперация";
					Запрос.УстановитьПараметр("ХозяйственнаяОперация",  Перечисления.ХозяйственныеОперации.ПоступлениеТоваров);
				КонецЕсли;
			КонецЕсли;
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				СтараяСсылка = Выборка.Ссылка;
				МассивССылок.Добавить(СтараяСсылка);
			КонецЦикла;

		КонецЕсли;
		
		СсылкаНаДокСтрока = Строка(СтараяСсылка);
		СсылкаНаДокПреобразованная = СтрЗаменить(СсылкаНаДокСтрока, " 0:00:00", "");
		ТекстВопроса = "Найден документ с указанным номером и датой входящего документа для указанного контрагента: " + СсылкаНаДокПреобразованная;
		
	ИначеЕсли Документ.ВидДокумента = "КФЛ" Тогда
		
		// Поиск карточек физического лица с указанными паспортными данными
		
		Фамилия =СтрокаШапки.Фамилия.ИтоговоеЗначение;
		Имя = СтрокаШапки.Имя.ИтоговоеЗначение;
		Отчество = СтрокаШапки.Отчество.ИтоговоеЗначение;
		Наименование = "" + Фамилия + " " + Имя + " " + Отчество; 
		
		Если СтараяСсылка = Неопределено Тогда
			
			// Проверка на дубли
			ЗапросПоДублям = Новый Запрос;
			ЗапросПоДублям.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ДокументыФизическихЛиц.Физлицо КАК ФизЛицо
			|ИЗ
			|	РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
			|ГДЕ
			|	ДокументыФизическихЛиц.Физлицо.Наименование = &Наименование
			|	И ДокументыФизическихЛиц.ВидДокумента = &ВидДокумента
			|	И ДокументыФизическихЛиц.Серия = &Серия
			|	И ДокументыФизическихЛиц.Номер = &Номер
			|	И ДокументыФизическихЛиц.ДатаВыдачи = &ДатаВыдачи
			|	И ДокументыФизическихЛиц.КодПодразделения = &КодПодразделения";
			
			ЗапросПоДублям.УстановитьПараметр("Наименование",						Наименование);
			ЗапросПоДублям.УстановитьПараметр("ВидДокумента",				Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ);
			ЗапросПоДублям.УстановитьПараметр("Серия",				СтрокаШапки.СерияПаспорта.ИтоговоеЗначение);
			ЗапросПоДублям.УстановитьПараметр("Номер",				СтрокаШапки.НомерПаспорта.ИтоговоеЗначение);
			ЗапросПоДублям.УстановитьПараметр("ДатаВыдачи",			СтрокаШапки.ДатаВыдачи.ИтоговоеЗначение);
			ЗапросПоДублям.УстановитьПараметр("КодПодразделения",	СтрокаШапки.КодПодразделения.ИтоговоеЗначение);
			
			Выборка = ЗапросПоДублям.Выполнить().Выбрать();
			//Если Выборка.Следующий() Тогда
			//	СтараяСсылка = Выборка.ФизЛицо;
			//КонецЕсли;
			Пока Выборка.Следующий() Цикл
				СтараяСсылка = Выборка.Ссылка;
				МассивССылок.Добавить(СтараяСсылка);
			КонецЦикла;

		КонецЕсли; 
		
		ТекстВопроса = "Найдено физ. лицо, которое имеет такие же ФИО и паспортные данные как у " + Наименование;
		
	ИначеЕсли Документ.ВидДокумента = "ЗП" Тогда
		
		Если СтараяСсылка = Неопределено Тогда
			//Поиск документов с равными датой и номером вх.док-та для контрагента
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ЗаказПоставщику.Ссылка
			|ИЗ
			|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
			|ГДЕ
			|	ЗаказПоставщику.ДатаПоступления = &ДатаПоступления
			|	И НЕ ЗаказПоставщику.Проведен
			|	И НЕ ЗаказПоставщику.ПометкаУдаления
			|	И ЗаказПоставщику.Контрагент = &Контрагент";
			Запрос.УстановитьПараметр("Контрагент",  СтрокаШапки.Контрагент.ИтоговоеЗначение);
			Запрос.УстановитьПараметр("ДатаПоступления", НачалоДня(СтрокаШапки.ДатаВходящегоДокумента.ИтоговоеЗначение));
			Если СтруктураСообщений.ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
				Запрос.Текст = Запрос.Текст  + " И ЗаказПоставщику.ХозяйственнаяОперация = &ХозяйственнаяОперация";
				Запрос.УстановитьПараметр("ХозяйственнаяОперация", Справочники.ХозяйственныеОперации.ЗаказНаЗакупку);
			ИначеЕсли СтруктураСообщений.ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ СтруктураСообщений.ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
				Запрос.Текст = Запрос.Текст + " И ЗаказПоставщику.ХозяйственнаяОперация = &ХозяйственнаяОперация";
				Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
			КонецЕсли;
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				СтараяСсылка = Выборка.Ссылка;
				МассивССылок.Добавить(СтараяСсылка);
			КонецЦикла;

		КонецЕсли;
		
		СсылкаНаДокСтрока = Строка(СтараяСсылка);
		СсылкаНаДокПреобразованная = СтрЗаменить(СсылкаНаДокСтрока, " 0:00:00", "");
		ТекстВопроса = "Найден документ с указанным номером и датой входящего документа для указанного контрагента: " + СсылкаНаДокПреобразованная;
		
	ИначеЕсли Документ.ВидДокумента = "АВР" Тогда
		
		Если СтараяСсылка = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	АктВыполненныхРабот.Ссылка
			|ИЗ
			|	Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
			|ГДЕ
			|	АктВыполненныхРабот.Контрагент = &Контрагент
			|	И НЕ АктВыполненныхРабот.ПометкаУдаления
			|	И АктВыполненныхРабот.Дата МЕЖДУ &ДатаНачало И &ДатаКонец
			|	И АктВыполненныхРабот.ХозяйственнаяОперация = &ХозяйственнаяОперация";
			Запрос.УстановитьПараметр("ДатаНачало", НачалоДня(СтрокаШапки.Дата.ИтоговоеЗначение));
			Запрос.УстановитьПараметр("ДатаКонец", КонецДня(СтрокаШапки.Дата.ИтоговоеЗначение));
			Запрос.УстановитьПараметр("Контрагент", СтрокаШапки.Контрагент.ИтоговоеЗначение);
			Запрос.УстановитьПараметр("ХозяйственнаяОперация", Справочники.ХозяйственныеОперации.АктВыполненныхРабот);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				СтараяСсылка = Выборка.Ссылка;
				МассивССылок.Добавить(СтараяСсылка);
			КонецЦикла;

		КонецЕсли;
		
		СсылкаНаДокСтрока = Строка(СтараяСсылка);
		СсылкаНаДокПреобразованная = СтрЗаменить(СсылкаНаДокСтрока, " 0:00:00", "");
		ТекстВопроса = "Найден документ с указаной датой документа для указанного контрагента: " + СсылкаНаДокПреобразованная;
		
	ИначеЕсли Документ.ВидДокумента = "ПП" Тогда
		
		Если СтараяСсылка = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ПлатежноеПоручение.Ссылка
			|ИЗ
			|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
			|ГДЕ
			|	ПлатежноеПоручение.Контрагент = &Контрагент
			|	И НЕ ПлатежноеПоручение.ПометкаУдаления
			|	И ПлатежноеПоручение.Дата МЕЖДУ &ДатаНачало И &ДатаКонец";
			Запрос.УстановитьПараметр("ДатаНачало", НачалоДня(СтрокаШапки.Дата.ИтоговоеЗначение));
			Запрос.УстановитьПараметр("ДатаКонец", КонецДня(СтрокаШапки.Дата.ИтоговоеЗначение));
			Запрос.УстановитьПараметр("Контрагент", СтрокаШапки.Контрагент.ИтоговоеЗначение);
			Если СтруктураСообщений.ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
				Запрос.Текст = Запрос.Текст +"
				|	И ПлатежноеПоручение.Организация = &Организация
				|	И ПлатежноеПоручение.ВидОперации = &ВидОперации";
				Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику);
				Запрос.УстановитьПараметр("Организация", СтрокаШапки.Организация.ИтоговоеЗначение);
				
			ИначеЕсли СтруктураСообщений.ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
				Запрос.Текст = Запрос.Текст +"
				|	И ПлатежноеПоручение.ХозяйственнаяОперация = &ХозяйственнаяОперация";
				Запрос.УстановитьПараметр("ХозяйственнаяОперация",  Справочники.ХозяйственныеОперации.Оплата);
			КонецЕсли;
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				СтараяСсылка = Выборка.Ссылка;
				МассивССылок.Добавить(СтараяСсылка);
			КонецЦикла;

		КонецЕсли;
		
		СсылкаНаДокСтрока = Строка(СтараяСсылка);
		СсылкаНаДокПреобразованная = СтрЗаменить(СсылкаНаДокСтрока, " 0:00:00", "");
		ТекстВопроса = "Найден документ с указаной датой документа для указанного контрагента: " + СсылкаНаДокПреобразованная;
	КонецЕсли;
	
	ТекстВопроса = ?(СтараяСсылка <> Неопределено, ТекстВопроса, Неопределено);
	СтруктураСообщений.Вставить("ТекстВопроса", ТекстВопроса);
	СтруктураСообщений.Вставить("МассивССылок", МассивССылок);
	
	Возврат СтараяСсылка;
	
КонецФункции

// Функция выполняет создание  и заполнение нового документа (загрузку документа)
//
// Параметры:
//  ИД - Строка, уникальный идентификатор документа из контейнера данных,
//	Ссылка - ссылка на существующий документ контрагента с заданными входящими датой и номером 
//					(если определена, документ будет перезаписан)
//	СтруктураСообщений - тип "Структура", служит для сохранения сообщений пользователю 
//
// Возвращаемое значение:
//	булево
//
&НаСервере
Функция ЗагрузитьДокументШаблон(Документ, Ссылка, РабочиеПараметры, СтруктураСообщений) Экспорт
	
	СтрокаШапки = Документ.Шапка;
	
	Если Документ.ВидДокумента = "ПТУ" ИЛИ Документ.ВидДокумента = "РТУ" ИЛИ Документ.ВидДокумента = "ЗП" ИЛИ Документ.ВидДокумента = "ПН" ИЛИ Документ.ВидДокумента = "РН" ИЛИ Документ.ВидДокумента = "ПП"  ИЛИ Документ.ВидДокумента = "АВР" ИЛИ Документ.ВидДокумента = "СП" ИЛИ Документ.ВидДокумента = "ПТ" ИЛИ Документ.ВидДокумента = "РТ" Тогда
		
		Если Документ.ВидДокумента = "ПТУ" Тогда
			Если (ИмяШаблона = "УправлениеТорговлей 11.1" И ВерсияКонфигурации = "11.4") ИЛИ (ИмяШаблона = "КомплекснаяАвтоматизация 2.0" И ВерсияКонфигурации = "2.4") Тогда
				ВидДокумента = "ПриобретениеТоваровУслуг"
			Иначе
				ВидДокумента = "ПоступлениеТоваровУслуг";
			КонецЕсли;
		ИначеЕсли Документ.ВидДокумента = "РТУ" тогда
			ВидДокумента = "РеализацияТоваровУслуг";
		ИначеЕсли Документ.ВидДокумента = "ЗП" Тогда 
			ВидДокумента = "ЗаказПоставщику";
		ИначеЕсли Документ.ВидДокумента = "ПН" Тогда 
			ВидДокумента = "ПриходнаяНакладная";
		ИначеЕсли Документ.ВидДокумента = "РН" Тогда 
			ВидДокумента = "РасходнаяНакладная";
		ИначеЕсли Документ.ВидДокумента = "ПП" Тогда 
			ВидДокумента = "ПлатежноеПоручение";
		ИначеЕсли Документ.ВидДокумента = "АВР" Тогда
			ВидДокумента = "АктВыполненныхРабот"
		ИначеЕсли Документ.ВидДокумента = "СП" Тогда
			ВидДокумента = "СчетНаОплатуПоставщика"
		ИначеЕсли Документ.ВидДокумента = "ПТ" Тогда
			ВидДокумента = "ПоступлениеТоваров"
		ИначеЕсли Документ.ВидДокумента = "РТ" Тогда
			ВидДокумента = "РеализацияТоваров"
		КонецЕсли;
		
		Если Ссылка = Неопределено Тогда
			НовыйДокументОбъект = Документы[ВидДокумента].СоздатьДокумент();
		Иначе
			НовыйДокументОбъект = Ссылка.ПолучитьОбъект() ;
		КонецЕсли;
		
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			
			ПараметрыЗаполнения = Новый Массив;
			ПараметрыЗаполнения.Добавить(НовыйДокументОбъект);
			Попытка
				//Выполнить("ЗаполнениеДокументов.Заполнить(ДокументОбъект)");		
				РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации("ЗаполнениеДокументов.Заполнить", ПараметрыЗаполнения);
			Исключение
				//Выполнить("ЗаполнениеДокументовВызовСервера.Заполнить(ДокументОбъект)");		
				РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации("ЗаполнениеДокументовВызовСервера.Заполнить", Параметры);
			КонецПопытки;
			
			Если Документ.ВидДокумента = "РТУ" Тогда
				//Если Метаданные.Документы["РеализацияТоваровУслуг"].СтандартныеРеквизиты["Номер"] <> неопределено И СтрокаШапки["НомерВходящегоДокумента"] <> неопределено Тогда
				//	НовыйДокументОбъект["Номер"] = СтрокаШапки["НомерВходящегоДокумента"].ИтоговоеЗначение;
				//КонецЕсли;
				НовыйДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
				НовыйДокументОбъект.ДокументБезНДС = НЕ Документ.Шапка.УчитыватьНДС.ИтоговоеЗначение;
			ИначеЕсли Документ.ВидДокумента = "ПП" Тогда	
				НовыйДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
			Иначе
				Если НЕ Документ.ВидДокумента = "СП" Тогда
					НовыйДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
				КонецЕсли;
				Попытка
					НовыйДокументОбъект.НДСНеВыделять = НЕ Документ.Шапка.УчитыватьНДС.ИтоговоеЗначение; 
					НовыйДокументОбъект.НДСВключенВСтоимость = Документ.Шапка.СуммаВключаетНДС.ИтоговоеЗначение;
				Исключение
				КонецПопытки;
			КонецЕсли;
			Если НЕ Документ.ВидДокумента = "ПП" И НЕ Документ.ВидДокумента = "СП" Тогда
				Попытка
					ОсновнойСклад = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме("БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(""ОсновнойСклад"", Параметры)", Пользователи.ТекущийПользователь());
					НовыйДокументОбъект.Склад = ОсновнойСклад;
				Исключение
				КонецПопытки;
			КонецЕсли;
		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			
			//Заполнение реквизитов по умолчанию
			НовыйДокументОбъект.Менеджер = Пользователи.ТекущийПользователь();
			Если ЗначениеЗаполнено(НовыйДокументОбъект.Менеджер) Тогда
				Если (ИмяШаблона = "УправлениеТорговлей 11.1" И НЕ Лев(Метаданные.Версия, 4) = "11.1") ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
					НовыйДокументОбъект.Подразделение = НовыйДокументОбъект.Менеджер.Подразделение;
				Иначе 
					НовыйДокументОбъект.Подразделение = НовыйДокументОбъект.Менеджер.ТекущееПодразделение;
				КонецЕсли;
			КонецЕсли;
			НовыйДокументОбъект.ФормаОплаты = Перечисления.ФормыОплаты.ПустаяСсылка();
			
			ОсновнойСклад = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме("БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(""ОсновнойСклад"", Параметры)", НовыйДокументОбъект.Менеджер);
			НовыйДокументОбъект.Склад = ОсновнойСклад;
					
			НовыйДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
			Если Документ.ВидДокумента = "ПТУ" Тогда
				НовыйДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
				//НовыйДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
				НовыйДокументОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;			
			ИначеЕсли Документ.ВидДокумента = "РТУ" Тогда
				НовыйДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
				НовыйДокументОбъект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.КПредоплате;			
			ИначеЕсли Документ.ВидДокумента = "ЗП" Тогда
				НовыйДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
				//НовыйДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
				НовыйДокументОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
				НовыйДокументОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Согласован;
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Приоритеты.Ссылка                                     
				|ИЗ
				|	Справочник.Приоритеты КАК Приоритеты
				|ГДЕ
				|	НЕ Приоритеты.ПометкаУдаления
				|
				|УПОРЯДОЧИТЬ ПО
				|	Приоритеты.Наименование";
				РезультатЗапроса = Запрос.Выполнить();
				Выборка = РезультатЗапроса.Выбрать();
				Если Выборка.Следующий() Тогда
					НовыйДокументОбъект.Приоритет = Выборка.Ссылка;
				КонецЕсли;
				СтрокаШапки.СуммаДокумента.ИтоговоеЗначение = СтрокаШапки.Всего.ИтоговоеЗначение;
				Если СтрокаШапки.Свойство("СуммаВзаиморасчетов") Тогда
					СтрокаШапки.СуммаВзаиморасчетов.ИтоговоеЗначение = СтрокаШапки.Всего.ИтоговоеЗначение;
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
			
			Если Документ.ВидДокумента = "ПН" ИЛИ Документ.ВидДокумента = "РН" ИЛИ Документ.ВидДокумента = "ЗП" Тогда
				СтратегияЗаполнения = Новый Соответствие;
				СтратегияЗаполнения[Тип("Структура")] = "ЗаполнитьПоСтруктуре";
				Если Документ.ВидДокумента = "ПН" Тогда
					//СтратегияЗаполнения[Тип("ДокументСсылка.РасходнаяНакладная")] = "ЗаполнитьПоРасходнойНакладной";
					//СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПокупателя")] = "ЗаполнитьПоЗаказуПокупателя";
					//СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПоставщику")] = "ЗаполнитьПоЗаказуПоставщику";
					//СтратегияЗаполнения[Тип("ДокументСсылка.ПриходныйОрдер")] = "ЗаполнитьПоПриходномуОрдеру";
					//СтратегияЗаполнения[Тип("ДокументСсылка.СчетНаОплатуПоставщика")] = "ЗаполнитьПоСчетуНаОплатуПоставщика";
					//СтратегияЗаполнения[Тип("ДокументСсылка.СчетНаОплату")] = "ЗаполнитьПоСчетуНаОплатуВозврат";
					//СтратегияЗаполнения[Тип("ДокументСсылка.ЧекККМ")] = "ЗаполнитьПоЧекуККМ";
					//СтратегияЗаполнения[Тип("ДокументСсылка.ТоварноТранспортнаяНакладнаяЕГАИС")] = "ЗаполнитьПоНакладнойЕГАИС";
					ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика;
				ИначеЕсли Документ.ВидДокумента = "РН" Тогда
					//СтратегияЗаполнения[Тип("ДокументСсылка.ПриходнаяНакладная")] = "ЗаполнитьПоПриходнойНакладной";
					//СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПокупателя")] = "ЗаполнитьПоЗаказуПокупателя";
					//СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПоставщику")] = "ЗаполнитьПоЗаказуПоставщику";
					//СтратегияЗаполнения[Тип("ДокументСсылка.СчетНаОплату")] = "ЗаполнитьПоСчетуНаОплату";
					//СтратегияЗаполнения[Тип("ДокументСсылка.ПеремещениеЗапасов")] = "ЗаполнитьПоПеремещениюЗапасов";
					//СтратегияЗаполнения[Тип("ДокументСсылка.СборкаЗапасов")] = "ЗаполнитьПоСборкеЗапасов";
					ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю;
				ИначеЕсли Документ.ВидДокумента = "ЗП" Тогда
					ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.ЗаказНаЗакупку;

				КонецЕсли;
				ДанныеЗаполнения = Неопределено;
				ПараметрыЗаполнения = Новый Массив;
				ПараметрыЗаполнения.Добавить(НовыйДокументОбъект);
				ПараметрыЗаполнения.Добавить(ДанныеЗаполнения);
				ПараметрыЗаполнения.Добавить(СтратегияЗаполнения);
				Попытка
					РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации("ЗаполнениеОбъектов.ЗаполнитьДокумент", ПараметрыЗаполнения);
				Исключение
					РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации("ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент", ПараметрыЗаполнения);
				КонецПопытки;
				НовыйДокументОбъект.ВидОперации = ВидОперации;
				Если Документ.ВидДокумента = "ЗП" Тогда
					Попытка
						РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме("ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаПоставщику");
					Исключение
					КонецПопытки;
				КонецЕсли;

			КонецЕсли;
			//ЗначениеНастройки = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме("УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), ""ОсновнойСклад"")");
			//ОсновнойСклад = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
			//НовыйДокументОбъект.Склад = ОсновнойСклад;
		КонецЕсли;
		
		Если ИмяШаблона = "Розница 2.2" И (Документ.Шапка.УчитыватьНДС.ИтоговоеЗначение=Истина)  Тогда
			НовыйДокументОбъект.УчитыватьНДС=Истина;	
		КонецЕсли;
		
		
		// Заполнение шапки
		НовыйДокументОбъект.Дата = СтрокаШапки.Дата.ИтоговоеЗначение;
		Для Каждого СтруктураРеквизита Из Документ.Шапка Цикл
			Если Метаданные.Документы[ВидДокумента].Реквизиты.Найти(СтруктураРеквизита.Ключ) <> неопределено Тогда
				Если (ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0") И СтруктураРеквизита.Ключ = "Контрагент" Тогда 
					Если НЕ СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение.пустая() И НЕ СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение.Партнер.Пустая() Тогда
						Если НЕ Документ.ВидДокумента = "РТУ" И НЕ СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение.Партнер.Поставщик Тогда
							ПартнерОбъект = СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение.Партнер.ПолучитьОбъект();
							ПартнерОбъект.Поставщик = Истина;
							ЗаписатьОбъект(ПартнерОбъект);
						ИначеЕсли Документ.ВидДокумента = "РТУ" И НЕ СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение.Партнер.Клиент Тогда
							ПартнерОбъект = СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение.Партнер.ПолучитьОбъект();
							ПартнерОбъект.Клиент = Истина;
							ЗаписатьОбъект(ПартнерОбъект);
						КонецЕсли;
					КонецЕсли;
					НовыйДокументОбъект[СтруктураРеквизита.Ключ] = СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение;
					НовыйДокументОбъект.Партнер = СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение.Партнер;
					
					////   Русанова М. 11.10.2018(
					//ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(НовыйДокументОбъект.Партнер, НовыйДокументОбъект.Контрагент);
					//// ) Русанова М. 11.10.2018
					
					Если Лев(Метаданные.Версия, 4) = "11.3" И НЕ Документ.ВидДокумента = "ЗП" Тогда
						
						Курс = 0;
						Кратность = 0;
						ПараметрыЗаполнения = Новый Массив;
						ПараметрыЗаполнения.Добавить(Курс);
						ПараметрыЗаполнения.Добавить(Кратность);
						ПараметрыЗаполнения.Добавить(СтрокаШапки.Валюта.ИтоговоеЗначение);
						ПараметрыЗаполнения.Добавить(СтрокаШапки.ВалютаВзаиморасчетов.ИтоговоеЗначение);
						
						РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации("РаботаСКурсамиВалютУТ.ЗаполнитьКурсКратностьПоУмолчанию", ПараметрыЗаполнения);
						
						НовыйДокументОбъект.Курс = ПараметрыЗаполнения.Получить(0);
						НовыйДокументОбъект.Кратность = ПараметрыЗаполнения.Получить(1);
						
					КонецЕсли;
					
				ИначеЕсли СтруктураРеквизита.Ключ = "НалогообложениеНДС" Тогда
					
					Если ТипЗнч(СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение) = Тип("ПеречислениеСсылка.ТипыНалогообложенияНДС") Тогда
						НовыйДокументОбъект[СтруктураРеквизита.Ключ] = СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение;
					ИначеЕсли СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение = "Закупка не облагается НДС"
						ИЛИ СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение = "Продажа не облагается НДС" Тогда
						Если ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
							НовыйДокументОбъект[СтруктураРеквизита.Ключ] = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
						Иначе
							НовыйДокументОбъект[СтруктураРеквизита.Ключ] = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
						КонецЕсли;
					ИначеЕсли СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение = "Закупка облагается НДС"
						ИЛИ СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение = "Продажа облагается НДС" Тогда
						Если ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
							НовыйДокументОбъект[СтруктураРеквизита.Ключ] = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
						Иначе
							НовыйДокументОбъект[СтруктураРеквизита.Ключ] = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
						КонецЕсли;
					ИначеЕсли СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение = "Налоговый агент по НДС" Тогда
						НовыйДокументОбъект[СтруктураРеквизита.Ключ] = Перечисления.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС;
					ИначеЕсли СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение = "Продажа на экспорт (ставка 0%)" Тогда
						Если ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
							НовыйДокументОбъект[СтруктураРеквизита.Ключ] = Перечисления.ТипыНалогообложенияНДС.НаЭкспорт;
						Иначе
							НовыйДокументОбъект[СтруктураРеквизита.Ключ] = Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт;
						КонецЕсли;
					ИначеЕсли СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение = "Продажа облагается ЕНВД" Тогда
						НовыйДокументОбъект[СтруктураРеквизита.Ключ] = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД;
					КонецЕсли;
				ИначеЕсли (ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0") И СтруктураРеквизита.Ключ = "Договор" Тогда
					Если НЕ СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение.Пустая() Тогда
						ДоговорКонтрагентаОбъект = СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение.ПолучитьОбъект();
						ДоговорКонтрагентаОбъект.Партнер = НовыйДокументОбъект.Партнер;
						ДоговорКонтрагентаОбъект.Записать();
					КонецЕсли;
					НовыйДокументОбъект[СтруктураРеквизита.Ключ] = СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение;
					Попытка
						ПараметрыЗаполнения = Новый Структура("Договор", СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение);
						НовыйДокументОбъект.ВариантПриемкиТоваров =  РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме("ЗакупкиСервер.ПолучитьВариантПриемкиТоваров(Неопределено, Параметры.Договор)", ПараметрыЗаполнения);
					Исключение
					КонецПопытки;
				Иначе 					
					НовыйДокументОбъект[СтруктураРеквизита.Ключ] = СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение; 					
				КонецЕсли;
			КонецЕсли;
			////   Русанова М. 11.10.2018(
			//НовыйДокументОбъект.Договор = Неопределено;
			//// ) Русанова М. 11.10.2018
		КонецЦикла;
				
		//Заполнение банковских счетов
		Если (ИмяШаблона = "УправлениеНебольшойФирмой 1.6" И Документ.ВидДокумента = "ПП") ИЛИ ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			
			Если Документ.ВидДокумента = "ПП" Тогда	
				НовыйДокументОбъект.СчетКонтрагента = СтрокаШапки.СчетКонтрагента.ИтоговоеЗначение;
				НовыйДокументОбъект.ИННПлательщика = СтрокаШапки.Организация.ИтоговоеЗначение.ИНН;
				НовыйДокументОбъект.КПППлательщика = СтрокаШапки.Организация.ИтоговоеЗначение.КПП;
				НовыйДокументОбъект.ТекстПлательщика = "" + СтрокаШапки.Организация.ИтоговоеЗначение;
				НовыйДокументОбъект.ИННПолучателя = СтрокаШапки.Контрагент.ИтоговоеЗначение.ИНН;
				НовыйДокументОбъект.КПППолучателя = СтрокаШапки.Контрагент.ИтоговоеЗначение.КПП;
				НовыйДокументОбъект.ТекстПолучателя = "" + СтрокаШапки.Контрагент.ИтоговоеЗначение;
				Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
					НовыйДокументОбъект.СчетОрганизации = СтрокаШапки.БанковскийСчет.ИтоговоеЗначение;        
				ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
					НовыйДокументОбъект.БанковскийСчет  = СтрокаШапки.БанковскийСчет.ИтоговоеЗначение;
				КонецЕсли;
				
				Если ИмяШаблона = "БухгалтерияПредприятия 3.0" И НовыйДокументОбъект.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
					ТекстНДС = "Без налога (НДС)";
				ИначеЕсли ИмяШаблона = "БухгалтерияПредприятия 3.0" И НовыйДокументОбъект.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
					ТекстНДС = "НДС (0%)";
				ИначеЕсли НовыйДокументОбъект.СуммаНДС > 0 ИЛИ ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
					ТекстНДС = "В т.ч. НДС " 
					+ ?(ЗначениеЗаполнено(НовыйДокументОбъект.СтавкаНДС), " (" + НовыйДокументОбъект.СтавкаНДС + ") ", "")
					+ Формат(НовыйДокументОбъект.СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
				Иначе
					ТекстНДС = "";
				КонецЕсли;
				НовыйДокументОбъект.НазначениеПлатежа = "Счет №" + СтрокаШапки.НомерВходящегоДокументаДокумент.ИтоговоеЗначение + " от " + 
					Формат(СтрокаШапки.ДатаВходящегоДокумента.ИтоговоеЗначение, "ДЛФ=Д") + Символы.ПС + 
					"Сумма " + Формат(НовыйДокументОбъект.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=") +  Символы.ПС + ТекстНДС;

			ИначеЕсли Документ.ВидДокумента = "СП" Тогда
				НовыйДокументОбъект.БанковскийСчетКонтрагента= СтрокаШапки.СчетКонтрагента.ИтоговоеЗначение;
			КонецЕсли;
			
		КонецЕсли;
		
		// Заполнение табличных частей
		Если Документ.ТЧ.Количество() > 0 Тогда
			Если НЕ ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
				НовыйДокументОбъект.Товары.Очистить();
				Если ИмяШаблона = "БухгалтерияПредприятия 3.0" И НЕ Документ.ВидДокумента = "СП" Тогда
					НовыйДокументОбъект.Услуги.Очистить();
				КонецЕсли;
			Иначе
				Если Документ.ВидДокумента = "АВР" Тогда
					НовыйДокументОбъект.РаботыИУслуги.Очистить();
				Иначе
					НовыйДокументОбъект.Запасы.Очистить();
					Если Документ.ВидДокумента = "ПН" Тогда
						НовыйДокументОбъект.Расходы.Очистить();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			К = 1;
			Для каждого СтруктураСтрокиТЧ Из Документ.ТЧ Цикл
				СтрокаТЧ = СтруктураСтрокиТЧ.Значение; 
				Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
					Если Документ.ВидДокумента = "СП" Тогда
						ИмяТабличнойЧасти = "Товары";
					Иначе
						ИмяТабличнойЧасти = ?(СтрокаТЧ.Услуга.ИтоговоеЗначение, "Услуги", "Товары");
					КонецЕсли;
				ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
					ИмяТабличнойЧасти = "Товары";
					СтрокаТЧ.СуммаСНДС.ИтоговоеЗначение = СтрокаТЧ.Всего.ИтоговоеЗначение;
				ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
					Если Документ.ВидДокумента = "ПН" Тогда
						ИмяТабличнойЧасти = ?(СтрокаТЧ.Услуга.ИтоговоеЗначение, "Расходы", "Запасы");
					ИначеЕсли Документ.ВидДокумента = "АВР" Тогда
						ИмяТабличнойЧасти = "РаботыИУслуги";
					Иначе
						ИмяТабличнойЧасти = "Запасы";	
					КонецЕсли;		
				КонецЕсли;
				НовСтрокаДокумента = НовыйДокументОбъект[ИмяТабличнойЧасти].Добавить();
				Попытка
					Если Метаданные.Документы[ВидДокумента].ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти("НомерГТД")<> неопределено  
						И Метаданные.Документы[ВидДокумента].ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти("СтранаПроисхождения")<> неопределено  
						И СтрокаТЧ.СтранаПроисхождения.ИтоговоеЗначение = Справочники.СтраныМира.ПустаяСсылка()
						И СтрокаТЧ.НомерГТД.ИтоговоеЗначение <> Справочники.НомераГТД.ПустаяСсылка() 
						И СтрокаТЧ.Номенклатура.ИтоговоеЗначение.НомерГТД = СтрокаТЧ.НомерГТД.ИтоговоеЗначение	Тогда
						СтрокаТЧ.СтранаПроисхождения.ИтоговоеЗначение = СтрокаТЧ.Номенклатура.ИтоговоеЗначение.СтранаПроисхождения;
					ИначеЕсли Метаданные.Документы[ВидДокумента].ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти("НомерГТД")<> неопределено  
						И Метаданные.Документы[ВидДокумента].ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти("СтранаПроисхождения")<> неопределено  
						И СтрокаТЧ.НомерГТД.ИтоговоеЗначение = Справочники.НомераГТД.ПустаяСсылка() Тогда
						СтрокаТЧ.СтранаПроисхождения.ИтоговоеЗначение = Справочники.СтраныМира.ПустаяСсылка();
					КонецЕсли;				
				исключение
				КонецПопытки;
				
				//Если ИмяШаблона = "УправлениеТорговлей 11.1" И Документ.ВидДокумента = "ПТУ" Тогда
				//	Если Лев(Метаданные.Версия, 4) = "11.2" ИЛИ Лев(Метаданные.Версия, 3) = "2.0" Тогда
				//		НовСтрокаДокумента.УдалитьНомерСтрокиДокументаПоставщика = К;
				//	Иначе
				//		НовСтрокаДокумента.НомерСтрокиДокументаПоставщика = К;
				//	КонецЕсли;
				//	НовСтрокаДокумента.Количество = НовСтрокаДокумента.КоличествоУпаковок;
				//	К = К + 1;
				//КонецЕсли;
				Для Каждого Элемент Из СтруктураСтрокиТЧ.Значение Цикл
					Если Метаданные.Документы[ВидДокумента].ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти(Элемент.Ключ) <> неопределено Тогда
						НовСтрокаДокумента[Элемент.Ключ] = СтрокаТЧ[Элемент.Ключ].ИтоговоеЗначение;
					КонецЕсли;
				КонецЦикла;
				Если ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
					НовСтрокаДокумента.Количество = НовСтрокаДокумента.КоличествоУпаковок;
					Если ИмяШаблона = "УправлениеТорговлей 11.1" Тогда
						НовСтрокаДокумента.Склад = Документ.Шапка.Склад.ИтоговоеЗначение;
						////Русанова М. 09.10.2018 (
						//НовыйДокументОбъект.Кратность = 1;
						//НовыйДокументОбъект.Курс = 1;
						//НовыйДокументОбъект.ДатаПлатежа = ТекущаяДата();
						//НовыйДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада;
						//НовыйДокументОбъект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
						//НовыйДокументОбъект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
						//НовыйДокументОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
						//НовыйДокументОбъект.Валюта = Справочники.Валюты.НайтиПоНаименованию("RUB");
						//НовыйДокументОбъект.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоНаименованию("RUB");
						//НовыйДокументОбъект.ЦенаВключаетНДС = Истина;
						//НовыйДокументОбъект.Контрагент = Справочники.Контрагенты.НайтиПоНаименованию("Кронин-Трейд, ООО");
						////) Русанова М. 09.10.2018

					КонецЕсли;
				КонецЕсли;
				Если ИмяТабличнойЧасти = "Услуги" Тогда
					НовСтрокаДокумента.Содержание = НовСтрокаДокумента.Номенклатура.НаименованиеПолное;
					Если Документ.ВидДокумента = "ПТУ" Тогда
						НовСтрокаДокумента.СчетЗатрат = СтрокаТЧ.СчетУчета.ИтоговоеЗначение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Заполнение тип цен
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" И Документ.ВидДокумента = "ПТУ" Тогда
			НовыйДокументОбъект.ТипЦен =  Документ.Шапка.ДоговорКонтрагента.ИтоговоеЗначение.ТипЦен;
		КонецЕсли;
	  
		ДокументОбъектПередЗаписью(НовыйДокументОбъект);
		
		Попытка
			НовыйДокументОбъект.Записать(); 	
			//НовыйДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			//О = ОписаниеОшибки();
			Попытка
				НовыйДокументОбъект.УстановитьНовыйНомер(""); 
				НовыйДокументОбъект.Записать();
				//НовыйДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ТекстСообщения = "Ошибка при записи документа:" + ОписаниеОшибки();
				СтруктураСообщений.Вставить("ТекстСообщения", ТекстСообщения );
				Возврат Ложь;
			КонецПопытки;		
		КонеЦПопытки;
		
		СоздаватьСФ = Неопределено;
		Документ.ЗначениеНастроек.Свойство("СоздаватьСФ", СоздаватьСФ);
		Если Не СоздаватьСФ = Неопределено И СоздаватьСФ.Значение Тогда
			Попытка
				Если Документ.ВидДокумента = "ПТУ" ИЛИ Документ.ВидДокумента = "ПН" ИЛИ Документ.ВидДокумента = "ПТ" Тогда
					СчетФактураВид = "СчетФактураПолученный";
				ИначеЕсли Документ.ВидДокумента = "РН" Тогда
					СчетФактураВид = "СчетФактура";
				Иначе
					СчетФактураВид = "СчетФактураВыданный";
				КонецЕсли;
				Если СчетФактураВид = "СчетФактураВыданный" Тогда
					Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
						ВидыСчетовФактур = Новый Массив;
						ВидыСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
						ВидыСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
						Запрос = Новый Запрос;
						Запрос.УстановитьПараметр("ВидыСчетовФактур",  ВидыСчетовФактур);
						Запрос.УстановитьПараметр("ДокументОснование", НовыйДокументОбъект.Ссылка);
						Запрос.Текст = 
						"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						|	ДокументыОснования.Ссылка КАК СчетФактура
						|ИЗ
						|	Документ.СчетФактураВыданный.ДокументыОснования КАК ДокументыОснования
						|ГДЕ
						|	(ДокументыОснования.ДокументОснование = &ДокументОснование
						|			ИЛИ ДокументыОснования.Ссылка = &ДокументОснование)
						|	И НЕ ДокументыОснования.Ссылка.ПометкаУдаления
						|	И ДокументыОснования.Ссылка.ВидСчетаФактуры В(&ВидыСчетовФактур)";
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() Тогда
							СчетФактураПодч = Выборка.СчетФактура;
						КонецЕсли;
					ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
						Запрос = Новый Запрос("
						|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						|	СчетФактураВыданный.Ссылка КАК Ссылка
						|ИЗ
						|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
						|ГДЕ
						|	СчетФактураВыданный.ДокументОснование = &Основание
						|	И (НЕ СчетФактураВыданный.ПометкаУдаления)
						|	И (СчетФактураВыданный.Организация = &Организация
						|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
						|
						|УПОРЯДОЧИТЬ ПО
						|	СчетФактураВыданный.НомерИсправления УБЫВ
						|");
						Запрос.УстановитьПараметр("Основание",   НовыйДокументОбъект.Ссылка);
						Запрос.УстановитьПараметр("Организация", НовыйДокументОбъект.Организация);
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() Тогда
							СчетФактураПодч = Выборка.Ссылка;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
						ВидыСчетовФактур = Новый Массив;
						ВидыСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыПолученного.НаПоступление);
						ВидыСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыПолученного.Корректировочный);
						Запрос = Новый Запрос;
						Запрос.УстановитьПараметр("ВидыСчетовФактур",  ВидыСчетовФактур);
						Запрос.УстановитьПараметр("ДокументОснование", НовыйДокументОбъект.Ссылка);
						Запрос.Текст = 
						"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						|	ДокументыОснования.Ссылка КАК СчетФактура
						|ИЗ
						|	Документ.СчетФактураПолученный.ДокументыОснования КАК ДокументыОснования
						|ГДЕ
						|	(ДокументыОснования.ДокументОснование = &ДокументОснование
						|			ИЛИ ДокументыОснования.Ссылка = &ДокументОснование)
						|	И НЕ ДокументыОснования.Ссылка.ПометкаУдаления
						|	И ДокументыОснования.Ссылка.ВидСчетаФактуры В(&ВидыСчетовФактур)";
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() Тогда
							СчетФактураПодч = Выборка.СчетФактура;
						КонецЕсли;
					ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
						Запрос = Новый Запрос("
						|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						|	ТаблицаОснований.Ссылка КАК Ссылка
						|ИЗ
						|	Документ.СчетФактураПолученный.ДокументыОснования КАК ТаблицаОснований
						|ГДЕ
						|	ТаблицаОснований.Ссылка.ПометкаУдаления = ЛОЖЬ
						|	И ТаблицаОснований.ДокументОснование = &Основание
						|	И (ТаблицаОснований.Ссылка.Организация = &Организация
						|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
						|
						|УПОРЯДОЧИТЬ ПО
						|	ТаблицаОснований.Ссылка.НомерИсправления УБЫВ
						|");
						Запрос.УстановитьПараметр("Основание",   НовыйДокументОбъект.Ссылка);
						Запрос.УстановитьПараметр("Организация", НовыйДокументОбъект.Организация); 
						РезультатЗапроса = Запрос.Выполнить(); 	
						ТаблицаСчетовФактур = РезультатЗапроса.Выгрузить();
						Для Каждого Элемент из ТаблицаСчетовФактур Цикл
							СчетФактураПодч = Элемент.Ссылка;
						КонецЦикла;
					ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
						Полученный = (СчетФактураВид = "СчетФактураПолученный");
						ПараметрыЗаполнения = Новый Структура("ДокументОснование, Полученный", НовыйДокументОбъект.Ссылка, Полученный);
						СчетФактураПодчСтруктура = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме("УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(Параметры.ДокументОснование, Параметры.Полученный)", ПараметрыЗаполнения);
						Если СчетФактураПодчСтруктура = Неопределено Тогда
							СчетФактураПодч = Неопределено;
						Иначе 
							СчетФактураПодч = СчетФактураПодчСтруктура.Ссылка;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если СчетФактураПодч = Неопределено Тогда
					СчетФактураОбъект = Документы[СчетФактураВид].СоздатьДокумент();
				Иначе
					СчетФактураОбъект = СчетФактураПодч.ПолучитьОбъект(); 
				КонецЕсли;
				Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
					СчетФактураОбъект.Заполнить(НовыйДокументОбъект.Ссылка); 
					Если СчетФактураВид = "СчетФактураПолученный" Тогда
						СчетФактураОбъект.НомерВходящегоДокумента = НовыйДокументОбъект.НомерВходящегоДокумента;
						СчетФактураОбъект.ДатаВходящегоДокумента = НовыйДокументОбъект.ДатаВходящегоДокумента;
					КонецЕсли;
					СчетФактураОбъект.Дата = НовыйДокументОбъект.Дата + 1;
					СчетФактураОбъект.Записать();
				ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
					Если СчетФактураВид = "СчетФактураВыданный" Тогда
						СтруктураЗаполнения = Новый Структура("Дата, ДокументОснование, Исправление, Корректировочный, Организация", 
						(ТекущаяДата() + 1),
						НовыйДокументОбъект.Ссылка,
						Ложь,
						Ложь,
						НовыйДокументОбъект.Организация);
						СчетФактураОбъект.Заполнить(СтруктураЗаполнения);
					Иначе
						СчетФактураОбъект.Заполнить(НовыйДокументОбъект.Ссылка);
					КонецЕсли;
					
					Если СчетФактураВид = "СчетФактураПолученный" Тогда
						СчетФактураОбъект.Номер = НовыйДокументОбъект.НомерВходящегоДокумента;
						СчетФактураОбъект.ДатаСоставления = НовыйДокументОбъект.ДатаВходящегоДокумента;
					КонецЕсли;
					СчетФактураОбъект.Дата = НовыйДокументОбъект.Дата + 1;
					СчетФактураОбъект.Записать();
				ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
					Если СчетФактураВид = "СчетФактураПолученный" Тогда
						СчетФактураОбъект.ЗаполнитьНаОснованииПриходнойНакладной(НовыйДокументОбъект.Ссылка);
						СчетФактураОбъект.НомерВходящегоДокумента = НовыйДокументОбъект.НомерВходящегоДокумента;
						СчетФактураОбъект.ДатаВходящегоДокумента = НовыйДокументОбъект.ДатаВходящегоДокумента;
					Иначе
						ПараметрыЗаполнения = Новый Массив;
						ПараметрыЗаполнения.Добавить(СчетФактураОбъект);
						ПараметрыЗаполнения.Добавить(НовыйДокументОбъект.Ссылка);
						ПараметрыЗаполнения.Добавить("ОбработчикЗаполнения");
						РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации("ЗаполнениеОбъектов.ЗаполнитьДокумент", ПараметрыЗаполнения);
					КонецЕсли;
					СчетФактураОбъект.Дата = НовыйДокументОбъект.Дата + 1;
					СчетФактураОбъект.Записать();
				КонецЕсли;
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = "Не создана счетФактура!";
				СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
				СообщениеПользователю.Сообщить();

			КонецПопытки;
		КонецЕсли;
		
		Документ.СсылкаДокумент = НовыйДокументОбъект.Ссылка;
		
	ИначеЕсли Документ.ВидДокумента = "КФЛ" Тогда
		
		Фамилия = СтрокаШапки.Фамилия.ИтоговоеЗначение;
		Имя = СтрокаШапки.Имя.ИтоговоеЗначение;
		Отчество = СтрокаШапки.Отчество.ИтоговоеЗначение;
		Наименование = "" + Фамилия + " " + Имя + " " + Отчество; 

		Если Ссылка = Неопределено Тогда
			КарточкаОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
		Иначе
			КарточкаОбъект = Ссылка.ПолучитьОбъект();
		КонецЕсли;
		
		КарточкаОбъект.Наименование = Наименование;
		КарточкаОбъект.ДатаРождения = СтрокаШапки.ДатаРождения.ИтоговоеЗначение;
		КарточкаОбъект.Пол = СтрокаШапки.Пол.ИтоговоеЗначение;
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			КарточкаОбъект.ФИО = Наименование;
			КарточкаОбъект.МестоРождения = "0," + СтрокаШапки.МестоРождения.ИтоговоеЗначение;
		КонецЕсли;
		
		Попытка
			КарточкаОбъект.Записать();
		Исключение
			ТекстСообщения = "Ошибка при записи документа:" + ОписаниеОшибки();
			СтруктураСообщений.Вставить("ТекстСообщения", ТекстСообщения );
			Возврат Ложь;
		КонецПопытки;
		
		// запись в регистр паспортных данных
		ЗаписьПаспорт = РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи();
		ЗаписьПаспорт.Физлицо = КарточкаОбъект.Ссылка;
		ЗаписьПаспорт.Период = '19000101';
		ЗаписьПаспорт.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ;
		ЗаписьПаспорт.ДатаВыдачи = СтрокаШапки.ДатаВыдачи.ИтоговоеЗначение;
		ЗаписьПаспорт.КемВыдан = СтрокаШапки.КемВыдан.ИтоговоеЗначение;
		ЗаписьПаспорт.КодПодразделения = СтрокаШапки.КодПодразделения.ИтоговоеЗначение;
		Номер = СтрокаШапки.НомерПаспорта.ИтоговоеЗначение;
		Пока СтрДлина(Номер) < 6 Цикл
			Номер = "0" + Номер;
		КонецЦикла;
		ЗаписьПаспорт.Номер = Номер;
		Серия = "" + Лев(СтрокаШапки.СерияПаспорта.ИтоговоеЗначение, 2) + " " + Прав(СтрокаШапки.СерияПаспорта.ИтоговоеЗначение, 2);
		ЗаписьПаспорт.Серия = Серия;
		ЗаписьПаспорт.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
		ЗаписьПаспорт.Записать(Истина);
		
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			
			// запись в регистр гражданство
			ЗаписьРоссия = РегистрыСведений.ГражданствоФизическихЛиц.СоздатьМенеджерЗаписи();
			ЗаписьРоссия.ФизическоеЛицо = КарточкаОбъект.Ссылка;
			ЗаписьРоссия.Период = '19000101';
			ЗаписьРоссия.Страна = Справочники.СтраныМира.Россия;
			ЗаписьРоссия.Записать(Истина);
			
			// запись в регистр ФИО
			ЗаписьФИО = РегистрыСведений.ФИОФизическихЛиц.СоздатьМенеджерЗаписи();
			ЗаписьФИО.ФизическоеЛицо = КарточкаОбъект.Ссылка;
			ЗаписьФИО.Период = '19000101';
			ЗаписьФИО.Фамилия = Фамилия;
			ЗаписьФИО.Имя = Имя;
			ЗаписьФИО.Отчество = Отчество;
			ЗаписьФИО.Записать(Истина);
			
		КонецЕсли;
		
		Документ.СсылкаДокумент = КарточкаОбъект.Ссылка;

	КонецЕсли;
	
	
	Ссылка = Документ.СсылкаДокумент;
	
	
	Документ.ЗагруженНеОткрыт = Истина;
	Документ.СтатусОбработки = "Загружен";
	Документ.Загружен = Истина;
	Документ.ПолученНеОткрыт = Ложь;
	СтруктураСсылки = ТипСсылки(Ссылка);
	Документ.СсылкаИД = СтруктураСсылки.СсылкаИД;
	Документ.СсылкаТип = СтруктураСсылки.СсылкаТип;

	Документ.Статус = 0;
	РабочиеПараметры.СоответствиеСтатусовДокументов.Вставить(Документ.ДокументИД, Документ.Статус);
	
	МассивСтрок = ТаблицаДанныхПолученные.НайтиСтроки(Новый Структура("ДокументИД", Документ.ДокументИД)); 
	Если МассивСтрок.Количество() > 0 Тогда
		ТаблицаДанныхПолученные.Удалить(МассивСтрок[0]);
	КонецЕсли;
	
	Возврат Истина;	
	
КонецФункции

// Процедура вызывается каждый раз перед записью документа,
// выполняет заполнение счетов учета 
//
// Параметры:
//		ДокументОбъект - документ (тип "ДокументОбъект")
//		Отказ - если присвоить этой переменной значение Истина, формирование документа будет прервано
//
&НаСервереБезКонтекста
Процедура ДокументОбъектПередЗаписью(ДокументОбъект)
	
	Если ДокументОбъект.Номер = "" Тогда
		ДокументОбъект.УстановитьНовыйНомер("");
	КонецЕсли;
	
КонецПроцедуры

// Функция для кастомизированного заполнения списка выбора в поле реквизита
//
// Параметры:
//		СтруктураПараметров - набор параметров события, тип "Структура"
//			Обязательные элементы структуры параметров: 
//				ключ - ОписаниеРеквизита; значение - строка описания реквизита
//				ключ - Данные; значение - строка шапки или табличной части документа
//				ключ - ИД; значение - идентификатор документа
//
// Возвращаемое значение:
//		ВидДокумента, тип "Строка"
//
&НаСервереБезКонтекста
Функция ЗаполнитьВариантыПодбораСпискаВыбораШаблон(СтруктураПараметров)
	
	Данные = СтруктураПараметров.Данные;
	ОписаниеРеквизита = СтруктураПараметров.ОписаниеРеквизита;
	Документ = СтруктураПараметров.Документ;
	ИмяШаблона = СтруктураПараметров.ИмяШаблона;
	
	Обновить = Неопределено;
	Если НЕ СтруктураПараметров.Свойство("Обновить", Обновить) Тогда
		Обновить = Ложь;
	КонецЕсли;
	
	СписокВыбораДляЭлемента = Новый СписокЗначений();
    	
	ЗначениеДляПодбора = Данные[ОписаниеРеквизита.Идентификатор].ИсходноеЗначение;
	Если ОписаниеРеквизита.Владелец <> "" Тогда
		Владелец = Данные[ОписаниеРеквизита.Владелец].ИтоговоеЗначение;
	Иначе
		Владелец = "";
	КонецЕсли;
	Тип = ОписаниеРеквизита.Тип;
	Вид = ОписаниеРеквизита.Вид;
	
	Если Тип = "СправочникСсылка" Тогда
		Если Вид = "Организации" Тогда
			
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Организации.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	НЕ Организации.ПометкаУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка";
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				СписокВыбораДляЭлемента.Добавить(Выборка.Ссылка, Выборка.Ссылка.Наименование); 
			КонецЦикла;
			
		ИначеЕсли Вид = "БанковскиеСчета" Тогда
			
			СписокВыбораДляЭлемента = Новый СписокЗначений();
			СинонимСправончика = Метаданные.Справочники[Вид].Синоним;
			СписокВыбораДляЭлемента.Добавить("Открыть", "Открыть справочник """ + СинонимСправончика + """"); 
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БанковскиеСчета.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.БанковскиеСчета КАК БанковскиеСчета
			|ГДЕ
			|	НЕ БанковскиеСчета.ПометкаУдаления
			|	И БанковскиеСчета.Владелец = &Владелец";
			Запрос.УстановитьПараметр("Владелец", Владелец);
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				СписокВыбораДляЭлемента.Добавить(Выборка.Ссылка, Выборка.Ссылка.Наименование); 
			КонецЦикла;

		ИначеЕсли Вид = "ДоговорыКонтрагентов" Тогда
			
			СписокВыбораДляЭлемента = Новый СписокЗначений();
			СинонимСправончика = Метаданные.Справочники[Вид].Синоним;
			СписокВыбораДляЭлемента.Добавить("Открыть", "Открыть справочник """ + СинонимСправончика + """"); 
			Запрос = Новый Запрос();
			
			Условия = "";
			Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
				ВалютаВзаиморасчетов = Данные.ВалютаДокумента.ИтоговоеЗначение;
				ОтборВидДоговора = Данные.ВидДоговора.ИтоговоеЗначение;
				Если НЕ ЗначениеНеЗаполнено(ОтборВидДоговора) Тогда
					Условия = "И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов 
							|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
							|	И ДоговорыКонтрагентов.Владелец = &Контрагент";  
					Запрос.УстановитьПараметр("ВидДоговора", ОтборВидДоговора);
				КонецЕсли;
			ИначеЕсли  ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
				Если Данные.Свойство("ВалютаВзаиморасчетов") Тогда    
					ВалютаВзаиморасчетов = Данные.ВалютаВзаиморасчетов.ИтоговоеЗначение;
				ИначеЕсли Данные.Свойство("ВалютаДокумента") Тогда 
					ВалютаВзаиморасчетов = Данные.ВалютаДокумента.ИтоговоеЗначение;
				ИначеЕсли Данные.Свойство("Валюта") Тогда 
					ВалютаВзаиморасчетов = Данные.Валюта.ИтоговоеЗначение;
				КонецЕсли;
				ОтборВидДоговора = Данные.ВидДоговора.ИтоговоеЗначение;
				Если НЕ ЗначениеНеЗаполнено(ОтборВидДоговора) Тогда
					Условия = "И ДоговорыКонтрагентов.ВалютаРасчетов = &ВалютаВзаиморасчетов 
							|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
							|	И ДоговорыКонтрагентов.Владелец = &Контрагент";  
					Запрос.УстановитьПараметр("ВидДоговора", ОтборВидДоговора);
				КонецЕсли;
			ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда 
				ВалютаВзаиморасчетов = Данные.Валюта.ИтоговоеЗначение;
				ОтборВидДоговора = Данные.ТипДоговора.ИтоговоеЗначение;
				Если НЕ ЗначениеНеЗаполнено(ОтборВидДоговора) Тогда
					Условия = "И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов 
							|	И ДоговорыКонтрагентов.ТипДоговора = &ВидДоговора
							|	И ДоговорыКонтрагентов.Контрагент = &Контрагент";
					Запрос.УстановитьПараметр("ВидДоговора", ОтборВидДоговора);
				КонецЕсли;
			КонецЕсли;

			Запрос.УстановитьПараметр("Контрагент", Данные.Контрагент.ИтоговоеЗначение);
			Запрос.УстановитьПараметр("Организация", Данные.Организация.ИтоговоеЗначение);
			Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|ГДЕ
				|	ДоговорыКонтрагентов.Организация = &Организация
				|	" + Условия +"
				|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления						   
				|
				|УПОРЯДОЧИТЬ ПО
				|	Ссылка";
			
			Выборка = Запрос.Выполнить().Выбрать();                            
			Пока Выборка.Следующий() Цикл
				СписокВыбораДляЭлемента.Добавить(Выборка.Ссылка, Выборка.Ссылка.Наименование); 
			КонецЦикла;
		ИначеЕсли Вид = "СоглашенияСКлиентами" Тогда	
			
			СписокВыбораДляЭлемента = Новый СписокЗначений();
			СинонимСправончика = Метаданные.Справочники[Вид].Синоним;
			СписокВыбораДляЭлемента.Добавить("Открыть", "Открыть справочник """ + СинонимСправончика + """"); 

			Запрос = Новый Запрос();
			Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СоглашенияСКлиентами.Ссылка
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
			|ГДЕ
			|	НЕ СоглашенияСКлиентами.ПометкаУдаления
			|	И СоглашенияСКлиентами.Контрагент = &Контрагент
			|	И СоглашенияСКлиентами.Организация = &Организация";
			Запрос.УстановитьПараметр("Контрагент", Данные.Контрагент.ИтоговоеЗначение);
			Запрос.УстановитьПараметр("Организация", Данные.Организация.ИтоговоеЗначение);
			
			Выборка = Запрос.Выполнить().Выбрать();                           
			Пока Выборка.Следующий() Цикл
				СписокВыбораДляЭлемента.Добавить(Выборка.Ссылка, Выборка.Ссылка.Наименование); 
			КонецЦикла;

		Иначе
			
			СписокВыбораДляЭлемента = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СписокВыбораДляЭлемента;
		
КонецФункции

// Функция дополнительной обработки события элемента РеквизитыШапки "ПриИзменении"
//
// Параметры:
//		СтруктураПараметров - набор параметров события, тип "Структура"
//			Обязательные элементы структуры параметров: 
//				ключ - ИмяСобытия; значение - строка, идентификатор события элемента формы
//				ключ - ИД; значение - строка, идентификатор документа
//				ключ - ИмяЭлемента; значение - строка, идентификатор реквизита
//
// Возвращаемое значение:
//		ТекстВыполнения - Текст содержащий команды для выполнения в обработчике события элемента формы 
//
&НаКлиенте
Процедура РеквизитыШапкиПриИзмененииШаблон(СтруктураПараметров) Экспорт
	

	Документ = СтруктураПараметров.Документ;
	Шапка = Документ.Шапка;
	
	ИмяЭлемента	= СтруктураПараметров.ИмяЭлемента;
	Реквизит = Шапка[ИмяЭлемента];
	ЗначениеЭлемента = СтруктураПараметров.ЗначениеЭлемента;
	
	СтруктураОписанияДокумента = Неопределено;
	СтруктураОписанийДокументов.Свойство(Документ.ВидДокумента, СтруктураОписанияДокумента);
	ОписаниеРеквизита = НайтиВМассивеСтруктур(СтруктураОписанияДокумента.Шапка, ИмяЭлемента, "Идентификатор");
	ТипРеквизита = ОписаниеРеквизита.Тип;
	ВидРеквизита = ОписаниеРеквизита.Вид;
	ТипВидРеквизита = ?(ПустаяСтрока(ТипРеквизита), "", ?(ПустаяСтрока(ВидРеквизита), ТипРеквизита, ТипРеквизита + "." + ВидРеквизита));
	
	СтруктураИзменяемыхРеквизитов = СтруктураПараметров.СтруктураИзменяемыхРеквизитов;
	
	Если ИмяЭлемента = "Организация" ИЛИ ИмяЭлемента = "Склад" Тогда
		Если ЗначениеЭлемента = "" Тогда
			Реквизит.ИтоговоеЗначение = ПустоеЗначениеТипа(Тип("СправочникСсылка." + ВидРеквизита));
		КонецЕсли;
		СтруктураИзменяемыхРеквизитов.Вставить(ИмяЭлемента, Новый Структура("ЗначениеЭлемента, СпособСопоставления", Шапка[ИмяЭлемента].ИтоговоеЗначение, Шапка[ИмяЭлемента].СпособСопоставления));	
		
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			
			СтруктураСтрокТЧ = Новый Структура;
			ТЧ = Документ.ТЧ;
			к = 0;
			Для Каждого СтруктураСтроки Из Документ.ТЧ Цикл
				//к =  Число(СтрЗаменить(СтруктураСтроки.Ключ, "Стр", ""));
				
				Если НЕ ЗначениеЗаполнено(СтруктураСтроки.Значение.ГруппаНоменклатуры.ИтоговоеЗначение) Тогда
					СтруктураГруппаНовыхНоменклатур = Неопределено;
					Документ.ЗначениеНастроек.Свойство("ГруппаНовыхНоменклатур", СтруктураГруппаНовыхНоменклатур);
					ГруппаНоменклатуры = СтруктураГруппаНовыхНоменклатур.Значение
				Иначе
					ГруппаНоменклатуры = СтруктураСтроки.Значение.ГруппаНоменклатуры.ИтоговоеЗначение;	
				КонецЕсли;
				СтрокаТЧ = СтруктураСтроки.Значение;
				Если ИмяШаблона = "БухгалтерияПредприятия 3.0" И НЕ Документ.ВидДокумента = "СП" Тогда
					РекСчУчета = ЗаполнитьСчета(СтруктураСтроки.Значение.Номенклатура.ИтоговоеЗначение, Шапка.Организация.ИтоговоеЗначение, Шапка.Склад.ИтоговоеЗначение, ГруппаНоменклатуры);
					ЗаполнитьСчетаВСтроке(СтрокаТЧ, РекСчУчета, Документ.ВидДокумента);
					СтруктураСчетов = Новый Структура;
					СтруктураСчетов.Вставить("Реквизит0", Новый Структура("СчетУчета", СтрокаТЧ.СчетУчета.ИтоговоеЗначение));
					Если Документ.ВидДокумента = "ПТУ" Тогда
						СтруктураСчетов.Вставить("Реквизит1", Новый Структура("СчетУчетаНДС", СтрокаТЧ.СчетУчетаНДС.ИтоговоеЗначение));
					ИначеЕсли Документ.ВидДокумента = "РТУ" Тогда
						СтруктураСчетов.Вставить("Реквизит1", Новый Структура("СчетДоходов", СтрокаТЧ.СчетДоходов.ИтоговоеЗначение));
						СтруктураСчетов.Вставить("Реквизит2", Новый Структура("СчетРасходов", СтрокаТЧ.СчетРасходов.ИтоговоеЗначение));
						СтруктураСчетов.Вставить("Реквизит3", Новый Структура("СчетУчетаНДСПоРеализации", СтрокаТЧ.СчетУчетаНДСПоРеализации.ИтоговоеЗначение));
					КонецЕсли;
					СтруктураСтрокТЧ.Вставить("Строка" + к, СтруктураСчетов);
				КонецЕсли;
				Документ.ТЧ[СтруктураСтроки.Ключ] = СтрокаТЧ;
				к = к + 1;
			КонецЦикла;
			СтруктураПараметров.Вставить("СтруктураСтрокТЧ", СтруктураСтрокТЧ);
		КонецЕсли;
		Если  ИмяЭлемента = "Организация" Тогда
			Если (Документ.ВидДокумента = "ПТУ" ИЛИ Документ.ВидДокумента = "ПТ") И Шапка.Свойство("Грузополучатель") И Шапка.Грузополучатель.Равен 
				ИЛИ (Документ.ВидДокумента = "РТУ" ИЛИ Документ.ВидДокумента = "РТ") И Шапка.Свойство("Грузоотправитель") И Шапка.Грузоотправитель.Равен Тогда
				
				Если Документ.ВидДокумента = "ПТУ" ИЛИ Документ.ВидДокумента = "ПТ" Тогда
					ОписаниеРеквизита = НайтиВМассивеСтруктур(СтруктураОписанияДокумента.Шапка, "Грузополучатель", "Идентификатор");
				Иначе
					ОписаниеРеквизита = НайтиВМассивеСтруктур(СтруктураОписанияДокумента.Шапка, "Грузоотправитель", "Идентификатор");
				КонецЕсли;
				Владелец = ?(ОписаниеРеквизита.Владелец <> "", Шапка[ОписаниеРеквизита.Владелец].ИтоговоеЗначение, "");
				Владелец = ?(ТипЗнч(Владелец) = Тип("Строка"), "", Владелец);
				
				Шапка[ОписаниеРеквизита.Идентификатор].ИтоговоеЗначение = Строка(ЗначениеЭлемента);
				ПараметрыСопоставления = Новый Структура("Равен, Владелец, Родитель, СопоставляемоеЗначение, СопоставленноеЗначение, СпособСопоставления, ВремяСопоставления", Истина, Владелец, "", Шапка[ОписаниеРеквизита.Идентификатор].ИтоговоеЗначение);
				Если СопоставлениеШаблонВызовСКлиента(ОписаниеРеквизита, Документ.ДокументИД, ПараметрыСопоставления, ТаблицаДанных, , ИмяШаблона) = Истина И ПараметрыСопоставления.СпособСопоставления = "2" Тогда
					Шапка[ОписаниеРеквизита.Идентификатор].ИтоговоеЗначение = ПараметрыСопоставления.СопоставленноеЗначение;
					Шапка[ОписаниеРеквизита.Идентификатор].СопоставленноеЗначение = ПараметрыСопоставления.СопоставленноеЗначение;
					Шапка[ОписаниеРеквизита.Идентификатор].СпособСопоставления = ПараметрыСопоставления.СпособСопоставления;
				ИначеЕсли ПараметрыСопоставления.СпособСопоставления = Неопределено ИЛИ НЕ ПараметрыСопоставления.СпособСопоставления = "2" Тогда
					Шапка[ОписаниеРеквизита.Идентификатор].СпособСопоставления = "9";
				КонецЕсли;
				СтруктураИзменяемыхРеквизитов.Вставить(ОписаниеРеквизита.Идентификатор, Новый Структура("ЗначениеЭлемента, СпособСопоставления", Шапка[ОписаниеРеквизита.Идентификатор].ИтоговоеЗначение, Шапка[ОписаниеРеквизита.Идентификатор].СпособСопоставления));
			КонецЕсли;
			// заполняем договор контрагента для выбранной организации
			Если Шапка.Свойство("ДоговорКонтрагента") Тогда
				ИмяРеквизитаДоговор = "ДоговорКонтрагента";
			ИначеЕсли Шапка.Свойство("Договор") Тогда
				ИмяРеквизитаДоговор = "Договор";
			КонецЕсли;
			Если НЕ ИмяРеквизитаДоговор = Неопределено Тогда 
				ОписаниеРеквизита = НайтиВМассивеСтруктур(СтруктураОписанияДокумента.Шапка, ИмяРеквизитаДоговор, "Идентификатор");
				РеквизитДоговора = Шапка[ИмяРеквизитаДоговор];
				
				
				Владелец = ?(ОписаниеРеквизита.Владелец <> "", Шапка[ОписаниеРеквизита.Владелец].ИтоговоеЗначение, "");
				Владелец = ?(ТипЗнч(Владелец) = Тип("Строка"), "", Владелец);
				ПараметрыСопоставления = Новый Структура("Равен, Владелец, Родитель, СопоставляемоеЗначение, СопоставленноеЗначение, СпособСопоставления, ВремяСопоставления", РеквизитДоговора.Равен, Владелец, "", РеквизитДоговора.ИсходноеЗначение);
				Если СопоставлениеШаблонВызовСКлиента(ОписаниеРеквизита, Документ.ДокументИД, ПараметрыСопоставления, ТаблицаДанных, , ИмяШаблона) = Истина 
					И ПараметрыСопоставления.СопоставленноеЗначение <> Неопределено 
					И НЕ ТипЗнч(ПараметрыСопоставления.СопоставленноеЗначение) = Тип("Строка") 
					И НЕ ПараметрыСопоставления.СопоставленноеЗначение.Пустая() Тогда 
					РеквизитДоговора.ИтоговоеЗначение = ПараметрыСопоставления.СопоставленноеЗначение;
					РеквизитДоговора.СпособСопоставления = ПараметрыСопоставления.СпособСопоставления;
				Иначе
					РеквизитДоговора.ИтоговоеЗначение = "Основной договор";
					РеквизитДоговора.СпособСопоставления = "9";
				КонецЕсли;
				СтруктураИзменяемыхРеквизитов.Вставить(ИмяРеквизитаДоговор, Новый Структура("ЗначениеЭлемента, СпособСопоставления", Шапка[ИмяРеквизитаДоговор].ИтоговоеЗначение, Шапка[ИмяРеквизитаДоговор].СпособСопоставления));
			КонецЕсли;
			Если Документ.ВидДокумента = "ПП" Тогда
				ОписаниеРеквизита = НайтиВМассивеСтруктур(СтруктураОписанияДокумента.Шапка, "БанковскийСчет", "Идентификатор");
				РеквизитСчет = Шапка.БанковскийСчет;
				Владелец = ?(ОписаниеРеквизита.Владелец <> "", Шапка[ОписаниеРеквизита.Владелец].ИтоговоеЗначение, "");
				Владелец = ?(ТипЗнч(Владелец) = Тип("Строка"), "", Владелец);
				ПараметрыСопоставления = Новый Структура("Равен, Владелец, Родитель, СопоставляемоеЗначение, СопоставленноеЗначение, СпособСопоставления, ВремяСопоставления", РеквизитСчет.Равен, Владелец, "", РеквизитСчет.ИсходноеЗначение);
				СопоставлениеШаблонВызовСКлиента(ОписаниеРеквизита, Документ.ДокументИД, ПараметрыСопоставления, ТаблицаДанных, , ИмяШаблона);
				РеквизитСчет.ИтоговоеЗначение = ПараметрыСопоставления.СопоставленноеЗначение;
				РеквизитСчет.СпособСопоставления = ПараметрыСопоставления.СпособСопоставления;
				СтруктураИзменяемыхРеквизитов.Вставить("БанковскийСчет", Новый Структура("ЗначениеЭлемента, СпособСопоставления", Шапка.БанковскийСчет.ИтоговоеЗначение, Шапка.БанковскийСчет.СпособСопоставления));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяЭлемента = "Грузоотправитель" ИЛИ  ИмяЭлемента = "Грузополучатель"  Тогда
		Реквизит.Равен = Ложь;
	ИначеЕсли ИмяЭлемента = "Контрагент" Тогда
		Если (Документ.ВидДокумента = "ПТУ" ИЛИ Документ.ВидДокумента = "ПТ") И Шапка.Свойство("Грузоотправитель") И Шапка.Грузоотправитель.Равен Тогда
			Шапка.Грузоотправитель.ИтоговоеЗначение = ЗначениеЭлемента;
			Шапка.Грузоотправитель.СпособСопоставления = "8";
			СтруктураИзменяемыхРеквизитов.Вставить("Грузоотправитель", Новый Структура("ЗначениеЭлемента, СпособСопоставления", Шапка["Грузоотправитель"].ИтоговоеЗначение, Шапка["Грузоотправитель"].СпособСопоставления));
		ИначеЕсли (Документ.ВидДокумента = "РТУ" ИЛИ Документ.ВидДокумента = "РТ")  И Шапка.Свойство("Грузополучатель") И Шапка.Грузополучатель.Равен Тогда
			Шапка.Грузополучатель.ИтоговоеЗначение = ЗначениеЭлемента;
			Шапка.Грузополучатель.СпособСопоставления = "8";
			СтруктураИзменяемыхРеквизитов.Вставить("Грузополучатель", Новый Структура("ЗначениеЭлемента, СпособСопоставления", Шапка["Грузополучатель"].ИтоговоеЗначение, Шапка["Грузополучатель"].СпособСопоставления));
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеЭлемента) = Тип("СправочникСсылка.Контрагенты") Тогда
			СтруктураРеквизитов = Новый Структура("ИНН, КПП");
			ПолучитьРеквизитыСсылки(ЗначениеЭлемента, СтруктураРеквизитов, ИмяШаблона);
			Шапка.ИНН.ИтоговоеЗначение = СтруктураРеквизитов.ИНН;
			Шапка.КПП.ИтоговоеЗначение = СтруктураРеквизитов.КПП;
			Шапка.АдресКонтрагента.ИтоговоеЗначение = ПолучитьКонтактнуюИнформациюКонтрагента(ЗначениеЭлемента, "Юридический");
			Шапка.КПП.СпособСопоставления = "8";
			Шапка.ИНН.СпособСопоставления = "8";
			Шапка.АдресКонтрагента.СпособСопоставления = "8";
			
			//СопоставлениеРеквизита(ОписаниеРеквизита, Шапка, ИД, Ложь);
			СтруктураИзменяемыхРеквизитов.Вставить("ИНН", Новый Структура("ЗначениеЭлемента, СпособСопоставления", Шапка["ИНН"].ИтоговоеЗначение, Шапка["ИНН"].СпособСопоставления));
			СтруктураИзменяемыхРеквизитов.Вставить("КПП", Новый Структура("ЗначениеЭлемента, СпособСопоставления", Шапка["КПП"].ИтоговоеЗначение, Шапка["КПП"].СпособСопоставления));
			СтруктураИзменяемыхРеквизитов.Вставить("АдресКонтрагента", Новый Структура("ЗначениеЭлемента, СпособСопоставления", Шапка["АдресКонтрагента"].ИтоговоеЗначение, Шапка["АдресКонтрагента"].СпособСопоставления));
		КонецЕсли;
		
		// заполняем договор выбранного контрагента
		Если Шапка.Свойство("ДоговорКонтрагента") Тогда
			ИмяРеквизитаДоговор = "ДоговорКонтрагента";
		ИначеЕсли Шапка.Свойство("Договор") Тогда
			ИмяРеквизитаДоговор = "Договор";
		КонецЕсли;
		Если НЕ ИмяРеквизитаДоговор = Неопределено Тогда 
			ОписаниеРеквизита = НайтиВМассивеСтруктур(СтруктураОписанияДокумента.Шапка, ИмяРеквизитаДоговор, "Идентификатор");
			РеквизитДоговора = Шапка[ИмяРеквизитаДоговор];
			Владелец = ?(ОписаниеРеквизита.Владелец <> "", Шапка[ОписаниеРеквизита.Владелец].ИтоговоеЗначение, "");
			Владелец = ?(ТипЗнч(Владелец) = Тип("Строка"), "", Владелец);
			ПараметрыСопоставления = Новый Структура("Равен, Владелец, Родитель, СопоставляемоеЗначение, СопоставленноеЗначение, СпособСопоставления, ВремяСопоставления", РеквизитДоговора.Равен, Владелец, "", РеквизитДоговора.ИсходноеЗначение);
			Если СопоставлениеШаблонВызовСКлиента(ОписаниеРеквизита, Документ.ДокументИД, ПараметрыСопоставления, ТаблицаДанных,, ИмяШаблона)= Истина 
				И ПараметрыСопоставления.СопоставленноеЗначение <> Неопределено 
				И НЕ ТипЗнч(ПараметрыСопоставления.СопоставленноеЗначение) = Тип("Строка") 
				И НЕ ПараметрыСопоставления.СопоставленноеЗначение.Пустая() Тогда 
				РеквизитДоговора.ИтоговоеЗначение = ПараметрыСопоставления.СопоставленноеЗначение;
				РеквизитДоговора.СпособСопоставления = ПараметрыСопоставления.СпособСопоставления;
			Иначе
				РеквизитДоговора.ИтоговоеЗначение = "Основной договор";
				РеквизитДоговора.СпособСопоставления = "9";
			КонецЕсли;
			СтруктураИзменяемыхРеквизитов.Вставить(ИмяРеквизитаДоговор, Новый Структура("ЗначениеЭлемента, СпособСопоставления", Шапка[ИмяРеквизитаДоговор].ИтоговоеЗначение, Шапка[ИмяРеквизитаДоговор].СпособСопоставления));
		КонецЕсли;
		Если Документ.ВидДокумента = "ПП" Тогда
			ОписаниеРеквизита = НайтиВМассивеСтруктур(СтруктураОписанияДокумента.Шапка, "СчетКонтрагента", "Идентификатор");
			РеквизитСчет = Шапка.СчетКонтрагента;
			Владелец = ?(ОписаниеРеквизита.Владелец <> "", Шапка[ОписаниеРеквизита.Владелец].ИтоговоеЗначение, "");
			Владелец = ?(ТипЗнч(Владелец) = Тип("Строка"), "", Владелец);
			ПараметрыСопоставления = Новый Структура("Равен, Владелец, Родитель, СопоставляемоеЗначение, СопоставленноеЗначение, СпособСопоставления, ВремяСопоставления", РеквизитСчет.Равен, Владелец, "", РеквизитСчет.ИсходноеЗначение);
			СопоставлениеШаблонВызовСКлиента(ОписаниеРеквизита, Документ.ДокументИД, ПараметрыСопоставления, ТаблицаДанных, , ИмяШаблона);
			РеквизитСчет.ИтоговоеЗначение = ПараметрыСопоставления.СопоставленноеЗначение;
			РеквизитСчет.СпособСопоставления = ПараметрыСопоставления.СпособСопоставления;
			СтруктураИзменяемыхРеквизитов.Вставить("СчетКонтрагента", Новый Структура("ЗначениеЭлемента, СпособСопоставления", Шапка.СчетКонтрагента.ИтоговоеЗначение, Шапка.СчетКонтрагента.СпособСопоставления));
		КонецЕсли;

	ИначеЕсли ИмяЭлемента = "ИНН" ИЛИ ИмяЭлемента = "КПП" Тогда
		
		ОписаниеРеквизитаКонтрагента = НайтиВМассивеСтруктур(СтруктураОписанияДокумента.Шапка, "Контрагент", "Идентификатор");
		Если Не ОписаниеРеквизитаКонтрагента = Неопределено Тогда
			ПараметрыСопоставления = Новый Структура("Владелец, Родитель, СопоставляемоеЗначение, СопоставленноеЗначение, СпособСопоставления, ПоискТолькоПоИНН, ВремяСопоставления", 
			"", "", ""); // сопоставляем только по ИНН или КПП
			
			СопоставлениеШаблонВызовСКлиента(ОписаниеРеквизитаКонтрагента, Документ.ДокументИД, ПараметрыСопоставления, ТаблицаДанных, ESDLСтруктураОПФ, ИмяШаблона);
			Если НЕ ПараметрыСопоставления.СопоставленноеЗначение.Пустая() Тогда
				Шапка.Контрагент.ИтоговоеЗначение = ПараметрыСопоставления.СопоставленноеЗначение;
				Шапка.Контрагент.СпособСопоставления = ПараметрыСопоставления.СпособСопоставления;
				
				СтруктураИзменяемыхРеквизитов.Вставить("Контрагент", Новый Структура("ЗначениеЭлемента, СпособСопоставления", Шапка["Контрагент"].ИтоговоеЗначение, Шапка["Контрагент"].СпособСопоставления));
				СтруктураИзменяемыхРеквизитов.Вставить("КПП", Новый Структура("ЗначениеЭлемента, СпособСопоставления", Шапка["КПП"].ИтоговоеЗначение, Шапка["КПП"].СпособСопоставления));
				СтруктураИзменяемыхРеквизитов.Вставить("АдресКонтрагента", Новый Структура("ЗначениеЭлемента, СпособСопоставления", Шапка["АдресКонтрагента"].ИтоговоеЗначение, Шапка["АдресКонтрагента"].СпособСопоставления));
				// заполняем договор выбранного контрагента
				Если Шапка.Свойство("ДоговорКонтрагента") Тогда
					ИмяРеквизитаДоговор = "ДоговорКонтрагента";
				ИначеЕсли Шапка.Свойство("Договор") Тогда
					ИмяРеквизитаДоговор = "Договор";
				КонецЕсли;
				ОписаниеРеквизита = НайтиВМассивеСтруктур(СтруктураОписанияДокумента.Шапка, ИмяРеквизитаДоговор, "Идентификатор");
				РеквизитДоговора = Шапка[ИмяРеквизитаДоговор];
				Владелец = ?(ОписаниеРеквизита.Владелец <> "", Шапка[ОписаниеРеквизита.Владелец].ИтоговоеЗначение, "");
				Владелец = ?(ТипЗнч(Владелец) = Тип("Строка"), "", Владелец);
				ПараметрыСопоставления = Новый Структура("Равен, Владелец, Родитель, СопоставляемоеЗначение, СопоставленноеЗначение, СпособСопоставления, ВремяСопоставления", РеквизитДоговора.Равен, Владелец, "", РеквизитДоговора.ИсходноеЗначение);
				Если СопоставлениеШаблонВызовСКлиента(ОписаниеРеквизита, Документ.ДокументИД, ПараметрыСопоставления, ТаблицаДанных,, ИмяШаблона)= Истина 
					И ПараметрыСопоставления.СопоставленноеЗначение <> Неопределено 
					И НЕ ТипЗнч(ПараметрыСопоставления.СопоставленноеЗначение) = Тип("Строка") 
					И НЕ ПараметрыСопоставления.СопоставленноеЗначение.Пустая() Тогда 
					РеквизитДоговора.ИтоговоеЗначение = ПараметрыСопоставления.СопоставленноеЗначение;
					РеквизитДоговора.СпособСопоставления = ПараметрыСопоставления.СпособСопоставления;
				Иначе
					РеквизитДоговора.ИтоговоеЗначение = "Основной договор";
					РеквизитДоговора.СпособСопоставления = "9";
				КонецЕсли;
				СтруктураИзменяемыхРеквизитов.Вставить(ИмяРеквизитаДоговор, Новый Структура("ЗначениеЭлемента, СпособСопоставления", Шапка[ИмяРеквизитаДоговор].ИтоговоеЗначение, Шапка[ИмяРеквизитаДоговор].СпособСопоставления));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;  
	// изменяем наименование документа
	Если ИмяЭлемента = "Контрагент" ИЛИ ИмяЭлемента = "НомерВходящегоДокумента" ИЛИ ИмяЭлемента = "ДатаВходящегоДокумента" Тогда
		ЗаполнитьНаименованиеДокумента(Документ, СтруктураТиповДокументов);
	КонецЕсли;
	
КонецПроцедуры

// Функция дополнительной обработки событий элемента РеквизитыТЧ "ПриИзменении"
//
// Параметры:
//		СтруктураПараметров - набор параметров события, тип "Структура"
//			Обязательные элементы структуры параметров: 
//				ключ - ИмяСобытия; значение - строка, идентификатор события элемента формы
//				ключ - ИД; значение - строка, идентификатор документа
//				ключ - ИмяЭлемента; значение - строка, идентификатор реквизита
//
// Возвращаемое значение:
//		ТекстВыполнения - Текст содержащий команды для выполнения в обработчике события элемента формы 
//
&НаКлиенте
Процедура РеквизитыТЧПриИзмененииШаблон(СтруктураПараметров) Экспорт	
	
	Документ = СтруктураПараметров.Документ;
	ВидДокумента = Документ.ВидДокумента;
	СтрокаШапки = Документ.Шапка;
	ТЧ = Документ.ТЧ;
	
	ИмяЭлемента = СтруктураПараметров.ИмяЭлемента;
	ИндексСтрокиТЧ = СтруктураПараметров.ИндексСтрокиТЧ;
	ЗначениеЭлемента = Неопределено;
	СтруктураПараметров.Свойство("ЗначениеЭлемента", ЗначениеЭлемента);
	СтрокаТЧ = Документ.ТЧ["Стр" + ИндексСтрокиТЧ];
	Если СтрокаТЧ.Свойство(ИмяЭлемента) Тогда
		Реквизит = СтрокаТЧ[ИмяЭлемента];
	КонецЕсли;
	
	СтруктураОписанияДокумента = Неопределено;
	СтруктураПараметров.СтруктураОписанийДокументов.Свойство(ВидДокумента, СтруктураОписанияДокумента);

	ОписаниеРеквизита = НайтиВМассивеСтруктур(СтруктураОписанияДокумента.ТЧ, ИмяЭлемента, "Идентификатор");

	ТипРеквизита = ОписаниеРеквизита.Тип;
	ВидРеквизита = ОписаниеРеквизита.Вид;
	ТипВидРеквизита = ?(ПустаяСтрока(ТипРеквизита), "", ?(ПустаяСтрока(ВидРеквизита), ТипРеквизита, ТипРеквизита + "." + ВидРеквизита));
	
	СтруктураИзменяемыхРеквизитов = СтруктураПараметров.СтруктураИзменяемыхРеквизитов;
	СтароеЗначение = СтруктураПараметров.СтароеЗначение;	
	
	Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда	
		УчитыватьНДС = СтрокаШапки.УчитыватьНДС.ИтоговоеЗначение;
		СуммаВключаетНДС = СтрокаШапки.СуммаВключаетНДС.ИтоговоеЗначение;
		ИмяКоличество = "Количество";
	ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
		НалогообложениеНДС = СтрокаШапки.НалогообложениеНДС.ИтоговоеЗначение;
		УчитыватьНДС = (НалогообложениеНДС = "Закупка облагается НДС" ИЛИ НалогообложениеНДС = "Продажа облагается НДС");
		СуммаВключаетНДС = СтрокаШапки.ЦенаВключаетНДС.ИтоговоеЗначение;
		ИмяКоличество = "КоличествоУпаковок";
	ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
		УчитыватьНДС = (Строка(СтрокаШапки.НалогообложениеНДС.ИтоговоеЗначение) = "Облагается (с НДС)");
		СуммаВключаетНДС = СтрокаШапки.СуммаВключаетНДС.ИтоговоеЗначение;
		ИмяКоличество = "Количество";
	ИначеЕсли ИмяШаблона = "Розница 2.2" Тогда
		УчитыватьНДС = СтрокаШапки.УчитыватьНДС.ИтоговоеЗначение;
		СуммаВключаетНДС = СтрокаШапки.ЦенаВключаетНДС.ИтоговоеЗначение;
		ИмяКоличество = "КоличествоУпаковок";
	КонецЕсли;
	
	Если ТипРеквизита = "СправочникСсылка" Тогда
		Если ИмяЭлемента = "Номенклатура" Тогда
			Если ТипЗнч(ЗначениеЭлемента) = Тип("СправочникСсылка.Номенклатура") Тогда
				Если НЕ ВидДокумента = "КФЛ" Тогда
					СтруктураРеквизитов = Новый Структура("Услуга, Родитель, НомерГТД, СтранаПроисхождения");
					ПолучитьРеквизитыСсылки(ЗначениеЭлемента, СтруктураРеквизитов, ИмяШаблона);
					СтрокаТЧ.ГруппаНоменклатуры.ИтоговоеЗначение = СтруктураРеквизитов.Родитель;
					Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ГруппаНоменклатуры.ИтоговоеЗначение) Тогда
						СтруктураГруппаНовыхНоменклатур = Неопределено;
						Документ.ЗначениеНастроек.Свойство("ГруппаНовыхНоменклатур", СтруктураГруппаНовыхНоменклатур);
						ГруппаНоменклатуры = СтруктураГруппаНовыхНоменклатур.Значение
					Иначе
						ГруппаНоменклатуры = СтрокаТЧ.ГруппаНоменклатуры.ИтоговоеЗначение;	
					КонецЕсли;
					Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
						СтрокаТЧ.Услуга.ИтоговоеЗначение = СтруктураРеквизитов.Услуга;
						СтруктураИзменяемыхРеквизитов.Вставить("Услуга", Новый Структура("ЗначениеЭлемента, СпособСопоставления", СтрокаТЧ["Услуга"].ИтоговоеЗначение, СтрокаТЧ["Услуга"].СпособСопоставления));
						Если СтрокаТЧ.Свойство("НомерГТД") Тогда
							СтрокаТЧ.НомерГТД.ИтоговоеЗначение = СтруктураРеквизитов.НомерГТД;
							СтруктураИзменяемыхРеквизитов.Вставить("НомерГТД", Новый Структура("ЗначениеЭлемента, СпособСопоставления", СтрокаТЧ["НомерГТД"].ИтоговоеЗначение, СтрокаТЧ["НомерГТД"].СпособСопоставления));
							СтрокаТЧ.СтранаПроисхождения.ИтоговоеЗначение = СтруктураРеквизитов.СтранаПроисхождения;
							СтруктураИзменяемыхРеквизитов.Вставить("СтранаПроисхождения", Новый Структура("ЗначениеЭлемента, СпособСопоставления", СтрокаТЧ["СтранаПроисхождения"].ИтоговоеЗначение, СтрокаТЧ["СтранаПроисхождения"].СпособСопоставления));
						КонецЕсли;
						Если НЕ ВидДокумента = "СП" Тогда
						РекСчУчета = ЗаполнитьСчета(СтрокаТЧ.Номенклатура.ИтоговоеЗначение, СтрокаШапки.Организация.ИтоговоеЗначение, СтрокаШапки.Склад.ИтоговоеЗначение, ГруппаНоменклатуры);
						КонецЕсли;
						ЗаполнитьСчетаВСтроке(СтрокаТЧ, РекСчУчета, Документ.ВидДокумента);
						Если НЕ ВидДокумента = "СП" Тогда
						СтруктураИзменяемыхРеквизитов.Вставить("СчетУчета", Новый Структура("ЗначениеЭлемента, СпособСопоставления", СтрокаТЧ["СчетУчета"].ИтоговоеЗначение, СтрокаТЧ["СчетУчета"].СпособСопоставления));
						КонецЕсли;
						Если Документ.ВидДокумента = "ПТУ" ИЛИ Документ.ВидДокумента = "ПТ" Тогда
							СтруктураИзменяемыхРеквизитов.Вставить("СчетУчетаНДС", Новый Структура("ЗначениеЭлемента, СпособСопоставления", СтрокаТЧ["СчетУчетаНДС"].ИтоговоеЗначение, СтрокаТЧ["СчетУчетаНДС"].СпособСопоставления));
						Иначе
							Если НЕ ВидДокумента = "СП" Тогда
							СтруктураИзменяемыхРеквизитов.Вставить("СчетУчетаНДСПоРеализации", Новый Структура("ЗначениеЭлемента, СпособСопоставления", СтрокаТЧ["СчетУчетаНДСПоРеализации"].ИтоговоеЗначение, СтрокаТЧ["СчетУчетаНДСПоРеализации"].СпособСопоставления));
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда 					
						//СтрокаТЧ.ВидНоменклатуры.ИтоговоеЗначение = ЗначениеЭлемента.ВидНоменклатуры;
						СтрокаТЧ.ВидНоменклатуры.ИтоговоеЗначение = ВернутьРеквизитСсылки(ЗначениеЭлемента, "ВидНоменклатуры");
						СтруктураИзменяемыхРеквизитов.Вставить("ГруппаНоменклатуры", Новый Структура("ЗначениеЭлемента, СпособСопоставления", СтрокаТЧ["ГруппаНоменклатуры"].ИтоговоеЗначение, СтрокаТЧ["ГруппаНоменклатуры"].СпособСопоставления));
					ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
						СтрокаТЧ.Услуга.ИтоговоеЗначение = СтруктураРеквизитов.Услуга;
						СтруктураИзменяемыхРеквизитов.Вставить("Услуга", Новый Структура("ЗначениеЭлемента, СпособСопоставления", СтрокаТЧ["Услуга"].ИтоговоеЗначение, СтрокаТЧ["Услуга"].СпособСопоставления));
					КонецЕсли;
					СтруктураИзменяемыхРеквизитов.Вставить("ГруппаНоменклатуры", Новый Структура("ЗначениеЭлемента, СпособСопоставления", СтрокаТЧ["ГруппаНоменклатуры"].ИтоговоеЗначение, СтрокаТЧ["ГруппаНоменклатуры"].СпособСопоставления));
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "ГруппаНоменклатуры" Тогда
			Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ГруппаНоменклатуры.ИтоговоеЗначение) Тогда
					СтруктураГруппаНовыхНоменклатур = Неопределено;
					Документ.ЗначениеНастроек.Свойство("ГруппаНовыхНоменклатур", СтруктураГруппаНовыхНоменклатур);
					ГруппаНоменклатуры = СтруктураГруппаНовыхНоменклатур.Значение
				Иначе
					ГруппаНоменклатуры = СтрокаТЧ.ГруппаНоменклатуры.ИтоговоеЗначение;	
				КонецЕсли;
				РекСчУчета = ЗаполнитьСчета(СтрокаТЧ.Номенклатура.ИтоговоеЗначение, СтрокаШапки.Организация.ИтоговоеЗначение, СтрокаШапки.Склад.ИтоговоеЗначение, ГруппаНоменклатуры);
				ЗаполнитьСчетаВСтроке(СтрокаТЧ, РекСчУчета, Документ.ВидДокумента);
				СтруктураИзменяемыхРеквизитов.Вставить("СчетУчета", Новый Структура("ЗначениеЭлемента, СпособСопоставления", СтрокаТЧ["СчетУчета"].ИтоговоеЗначение, СтрокаТЧ["СчетУчета"].СпособСопоставления));
				Если ВидДокумента = "РТУ" Тогда
					СтруктураИзменяемыхРеквизитов.Вставить("СчетУчетаНДСПоРеализации", Новый Структура("ЗначениеЭлемента, СпособСопоставления", СтрокаТЧ["СчетУчетаНДСПоРеализации"].ИтоговоеЗначение, СтрокаТЧ["СчетУчетаНДСПоРеализации"].СпособСопоставления));
				Иначе
					СтруктураИзменяемыхРеквизитов.Вставить("СчетУчетаНДС", Новый Структура("ЗначениеЭлемента, СпособСопоставления", СтрокаТЧ["СчетУчетаНДС"].ИтоговоеЗначение, СтрокаТЧ["СчетУчетаНДС"].СпособСопоставления));
				КонецЕсли;
			ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ГруппаНоменклатуры.ИтоговоеЗначение) Тогда
					СтруктураГруппаНовыхНоменклатур = Неопределено;
					Документ.ЗначениеНастроек.Свойство("ГруппаНовыхНоменклатур", СтруктураГруппаНовыхНоменклатур);
					ГруппаНоменклатуры = СтруктураГруппаНовыхНоменклатур.Значение
				Иначе
					ГруппаНоменклатуры = СтрокаТЧ.ГруппаНоменклатуры.ИтоговоеЗначение;	
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипРеквизита = "ПеречислениеСсылка" Тогда
		Если ИмяЭлемента = "СтавкаНДС" Тогда 
			СтавкаНДСЧисло = СтавкаНДСЧислом(ЗначениеЭлемента, ИмяШаблона);
			СтрокаТЧ.СуммаНДС.ИтоговоеЗначение = РассчитатьСуммуНДС(СтрокаТЧ.Сумма.ИтоговоеЗначение, СуммаВключаетНДС, СтавкаНДСЧисло);
			Если СуммаВключаетНДС Тогда
				СтрокаТЧ.Всего.ИтоговоеЗначение =  СтрокаТЧ.Сумма.ИтоговоеЗначение;
			Иначе
				СтрокаТЧ.Всего.ИтоговоеЗначение =  СтрокаТЧ.Сумма.ИтоговоеЗначение + СтрокаТЧ.СуммаНДС.ИтоговоеЗначение;
			КонецЕсли;
			СтруктураИзменяемыхРеквизитов.Вставить("СуммаНДС", Новый Структура("ЗначениеЭлемента, СпособСопоставления", СтрокаТЧ["СуммаНДС"].ИтоговоеЗначение, СтрокаТЧ["СуммаНДС"].СпособСопоставления));
			СтруктураИзменяемыхРеквизитов.Вставить("Всего", Новый Структура("ЗначениеЭлемента, СпособСопоставления", СтрокаТЧ["Всего"].ИтоговоеЗначение, СтрокаТЧ["Всего"].СпособСопоставления));
		КонецЕсли;
		СтруктураПараметров.ПересчитатьИтоговоеПоле	= Истина;
	ИначеЕсли ТипРеквизита = "Число" Тогда
		Если Документ.ВидДокумента = "ПТУ" ИЛИ Документ.ВидДокумента = "ПТ" ИЛИ Документ.ВидДокумента = "РТУ" ИЛИ Документ.ВидДокумента = "РТ" ИЛИ ВидДокумента = "ЗП" ИЛИ ВидДокумента = "ПН" ИЛИ ВидДокумента = "РН" ИЛИ ВидДокумента = "СП" Тогда
			Если ИмяЭлемента = "Количество" ИЛИ ИмяЭлемента = "КоличествоУпаковок" Тогда
				СтрокаТЧ.Цена.ИтоговоеЗначение = СтрокаТЧ.Сумма.ИтоговоеЗначение / ЗначениеЭлемента;
				СтруктураИзменяемыхРеквизитов.Вставить("Цена", Новый Структура("ЗначениеЭлемента, СпособСопоставления", СтрокаТЧ["Цена"].ИтоговоеЗначение, СтрокаТЧ["Цена"].СпособСопоставления));
			ИначеЕсли ИмяЭлемента = "Цена" ИЛИ ИмяЭлемента = "Сумма" Тогда
				Если ИмяЭлемента = "Цена" Тогда
					СтрокаТЧ.Сумма.ИтоговоеЗначение = СтрокаТЧ[ИмяКоличество].ИтоговоеЗначение * ЗначениеЭлемента;
					СтруктураИзменяемыхРеквизитов.Вставить("Сумма", Новый Структура("ЗначениеЭлемента, СпособСопоставления", СтрокаТЧ["Сумма"].ИтоговоеЗначение, СтрокаТЧ["Сумма"].СпособСопоставления));
				ИначеЕсли ИмяЭлемента = "Сумма" Тогда
					СтрокаТЧ.Цена.ИтоговоеЗначение = ЗначениеЭлемента / СтрокаТЧ[ИмяКоличество].ИтоговоеЗначение;
					СтруктураИзменяемыхРеквизитов.Вставить("Цена", Новый Структура("ЗначениеЭлемента, СпособСопоставления", СтрокаТЧ["Цена"].ИтоговоеЗначение, СтрокаТЧ["Цена"].СпособСопоставления));
				КонецЕсли;
				СтавкаНДСЧисло = СтавкаНДСЧислом(СтрокаТЧ.СтавкаНДС.ИтоговоеЗначение, ИмяШаблона);
				СтрокаТЧ.СуммаНДС.ИтоговоеЗначение = РассчитатьСуммуНДС(СтрокаТЧ.Сумма.ИтоговоеЗначение, СуммаВключаетНДС, СтавкаНДСЧисло);
				Если СуммаВключаетНДС Тогда
					СтрокаТЧ.Всего.ИтоговоеЗначение =  СтрокаТЧ.Сумма.ИтоговоеЗначение;
				Иначе
					СтрокаТЧ.Всего.ИтоговоеЗначение =  СтрокаТЧ.Сумма.ИтоговоеЗначение + СтрокаТЧ.СуммаНДС.ИтоговоеЗначение;
				КонецЕсли;
				СтруктураИзменяемыхРеквизитов.Вставить("СуммаНДС", Новый Структура("ЗначениеЭлемента, СпособСопоставления", СтрокаТЧ["СуммаНДС"].ИтоговоеЗначение, СтрокаТЧ["СуммаНДС"].СпособСопоставления));
				СтруктураИзменяемыхРеквизитов.Вставить("Всего", Новый Структура("ЗначениеЭлемента, СпособСопоставления", СтрокаТЧ["Всего"].ИтоговоеЗначение, СтрокаТЧ["Всего"].СпособСопоставления));
			ИначеЕсли ИмяЭлемента = "Всего"	Тогда

				СтавкаНДСЧисло = СтавкаНДСЧислом(СтрокаТЧ.СтавкаНДС.ИтоговоеЗначение, ИмяШаблона); 
				ОбратныйПорядокРасчетаНДС = УчитыватьНДС И НЕ СуммаВключаетНДС;
				Множитель = 100;	
				
				//СУММА
				Если ОбратныйПорядокРасчетаНДС Тогда	
					СтрокаТЧ.Сумма.ИтоговоеЗначение = Окр(ЗначениеЭлемента / (1 + СтавкаНДСЧисло / Множитель), 2);
				Иначе
					СтрокаТЧ.Сумма.ИтоговоеЗначение = Окр(ЗначениеЭлемента, 2);
				КонецЕсли;
				Сумма = СтрокаТЧ.Сумма.ИтоговоеЗначение;
				
				//ЦЕНА
				Цена = СтрокаТЧ.Сумма.ИтоговоеЗначение/СтрокаТЧ[ИмяКоличество].ИтоговоеЗначение;
				СтрокаТЧ.Цена.ИтоговоеЗначение = Окр(Цена, 2);
				
				//НДС
				Если ОбратныйПорядокРасчетаНДС Тогда
					СуммаНДС = ЗначениеЭлемента * (1 - 1 / (1 + СтавкаНДСЧисло/Множитель));
				Иначе
					Сумма = СтрокаТЧ.Сумма.ИтоговоеЗначение;
					СуммаНДС = РассчитатьСуммуНДС(СтрокаТЧ.Сумма.ИтоговоеЗначение, СуммаВключаетНДС, СтавкаНДСЧисло);
				КонецЕсли;
				СуммаНДС = Окр(СуммаНДС, 2);
				СтрокаТЧ.СуммаНДС.ИтоговоеЗначение = СуммаНДС;
				СтруктураИзменяемыхРеквизитов.Вставить("Цена", Новый Структура("ЗначениеЭлемента, СпособСопоставления", СтрокаТЧ["Цена"].ИтоговоеЗначение, СтрокаТЧ["Цена"].СпособСопоставления));
				СтруктураИзменяемыхРеквизитов.Вставить("Сумма", Новый Структура("ЗначениеЭлемента, СпособСопоставления", СтрокаТЧ["Сумма"].ИтоговоеЗначение, СтрокаТЧ["Сумма"].СпособСопоставления));
				СтруктураИзменяемыхРеквизитов.Вставить("СуммаНДС", Новый Структура("ЗначениеЭлемента, СпособСопоставления", СтрокаТЧ["СуммаНДС"].ИтоговоеЗначение, СтрокаТЧ["СуммаНДС"].СпособСопоставления));
			
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПараметров.ПересчитатьИтоговоеПоле	= Истина;  
		
		//ВычислениеРасчетныхЗначений(Документ.ДокументИД);
		
	ИначеЕсли ТипРеквизита = "Булево" Тогда
		Если ИмяЭлемента = "Услуга" Тогда
			Если ТипЗнч(СтрокаТЧ.Номенклатура.ИтоговоеЗначение) <> Тип("СправочникСсылка.Номенклатура") Тогда
				СтрокаТЧ.Услуга.ИтоговоеЗначение = ЗначениеЭлемента;
				СтруктураИзменяемыхРеквизитов.Вставить("Услуга", Новый Структура("ЗначениеЭлемента, СпособСопоставления", СтрокаТЧ["Услуга"].ИтоговоеЗначение, СтрокаТЧ["Услуга"].СпособСопоставления));
			Иначе
				СтрокаТЧ.Услуга.ИтоговоеЗначение = СтруктураПараметров.СтароеЗначение;
				СтруктураИзменяемыхРеквизитов.Вставить("Услуга", Новый Структура("ЗначениеЭлемента, СпособСопоставления", СтруктураПараметров.СтароеЗначение, СтрокаТЧ["Услуга"].СпособСопоставления));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//Выполняет множественный поиск по ИИН и КПП
&НаСервереБезКонтекста
Функция НайтиКонтрагентаПоИННиКППНовый(ИННКонтрагента, КППКонтрагента) Экспорт
	
	СписокКонтрагентов = Новый СписокЗначений();
	Если ЗначениеЗаполнено(ИННКонтрагента) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И НЕ Контрагенты.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ИНН", ИННКонтрагента);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокКонтрагентов.Добавить(Выборка.Контрагент);
		КонецЦикла;
		//проверим по КПП если нашли много
		Если ЗначениеЗаполнено(КППКонтрагента) Тогда
			Если СписокКонтрагентов.Количество() > 1 Тогда				
				КвоЭлСписка = СписокКонтрагентов.Количество();
				Для к = 1 по КвоЭлСписка Цикл
					ЭлСписокКонтрагентов = СписокКонтрагентов[КвоЭлСписка-к];				
					Если СокрЛП(ЭлСписокКонтрагентов.Значение.КПП) = СокрЛП(КППКонтрагента) Тогда
						СписокКонтрагентов.Вставить(0, ЭлСписокКонтрагентов.Значение);
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	Если СписокКонтрагентов.Количество() > 0 Тогда
		Возврат СписокКонтрагентов;
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиОрганизациюПоИНН(ИННОрганизации, КППОрганизации) Экспорт
	
	НайденнаяОрганизация = Неопределено;
	
	Если ЗначениеЗаполнено(ИННОрганизации) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ИНН = &ИНН
		|	И НЕ Организации.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ИНН", ИННОрганизации);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НайденнаяОрганизация =  Выборка.Ссылка;
			Если КППОрганизации <> "" И Выборка.Количество() > 1 Тогда
				Если Выборка.Ссылка.КПП = КППОрганизации Тогда
					Прервать;
				КонецЕсли;
			Иначе 
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат НайденнаяОрганизация;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиОрганизациюПонаименованию(МассивВариантовНаименования, ИмяШаблона) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления";
	Если ИмяШаблона = "УправлениеНебольшойФирмой 1.6" ИЛИ ИмяШаблона = "Розница 2.2" Тогда
		Запрос.Текст = Запрос.Текст + "
		| И	(Организации.Наименование В (&МассивНаименований)";
		Для Каждого ВариантНаименования Из МассивВариантовНаименования Цикл
			Если ВариантНаименования <> "" Тогда
				ВариантНаименования = СтрЗаменить(ВариантНаименования, """", """"""); 
				Запрос.Текст = Запрос.Текст + "
				|	ИЛИ Организации.НаименованиеПолное Подобно """ + ВариантНаименования + """";
			КонецЕсли;
		КонецЦикла;
		Запрос.Текст = Запрос.Текст + ")";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		| И	(Организации.НаименованиеСокращенное В (&МассивНаименований)
		|			ИЛИ Организации.НаименованиеПолное В (&МассивНаименований))";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивНаименований", МассивВариантовНаименования);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Организация = Выборка.Ссылка;
	Иначе
		Организация = Неопределено;
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

// Функция преобразует ставку НДС в число
//
// Параметры:
//		СтавкаНДС, ставка НДС в формате конфигурации 
//		ИмяШаблона, строка - имя шаблона
//
// Возвращаемое значение:
//      СтавкаНДСЧисло
//
&НаСервереБезКонтекста
Функция СтавкаНДСЧислом(СтавкаНДС, ИмяШаблона)
	
	СтавкаНДСЧисло = 0;
	Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
		СтавкаНДСЧисло = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме("УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Параметры)", СтавкаНДС);
	ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
		Если ТипЗнч(СтавкаНДС) = Тип("СправочникСсылка.СтавкиНДС") Тогда
			СтавкаНДСЧисло = СтавкаНДС.Ставка;
		Иначе
			СтавкаНДСЧисло = 0;
		КонецЕсли;

	ИначеЕсли ИмяШаблона = "Розница 2.2" Тогда
		СтавкаНДСЧисло = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме("ОбработкаТабличнойЧастиТоварыКлиентСерверПовтИсп.ПолучитьСтавкуНДСЧислом(Параметры)", СтавкаНДС);
	КонецЕсли;
	
	Возврат СтавкаНДСЧисло;
	
КонецФункции

// Функция преобразует ставку НДС в формат конфигурации
//
// Параметры:
//		ЗначениеСтавки, строка  - строка ставка НДС
//		ИмяШаблона, строка - имя шаблона
//
// Возвращаемое значение:
//      СтавкаНДС, ставка НДС в формате конфигурации 
//
&НаСервереБезКонтекста
Функция ПолучитьСтавкуНДС(ЗначениеСтавки, ИмяШаблона)
	
	СтавкаНДС = Неопределено; 
	
	Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда

		Попытка
			Если ПустаяСтрока(ЗначениеСтавки) Тогда
				СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			ИначеЕсли Найти(ЗначениеСтавки, "10") > 0 Тогда
				СтавкаНДС = Перечисления.СтавкиНДС.НДС10;				
			ИначеЕсли Найти(ЗначениеСтавки, "18") > 0 Тогда
				СтавкаНДС = Перечисления.СтавкиНДС.НДС18;		
			ИначеЕсли Найти(ЗначениеСтавки, "20") > 0 Тогда
				СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
			Иначе
				СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли;
		Исключение
			СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецПопытки;
		
	ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
		
		Если Найти(ЗначениеСтавки, "10") > 0 Тогда
			Наименование = "10%";				
		ИначеЕсли Найти(ЗначениеСтавки, "18") > 0 Тогда
			Наименование = "18%";				
		ИначеЕсли Найти(ЗначениеСтавки, "20") > 0 Тогда
			Наименование = "20%";
		Иначе
			Наименование = "Без НДС";
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтавкиНДС.Ссылка
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", Наименование);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			СтавкаНДС = Выборка.Ссылка;
		Иначе
			Наименование = "Без НДС";
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СтавкиНДС.Ссылка
			|ИЗ
			|	Справочник.СтавкиНДС КАК СтавкиНДС
			|ГДЕ
			|	СтавкиНДС.Наименование = &Наименование";
			Запрос.УстановитьПараметр("Наименование", "Без НДС");
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				СтавкаНДС = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	Возврат СтавкаНДС;
	
КонецФункции

//Описание СпособСопоставление, строковые значения ////////////////////////////////////////////
	// 0 -не сопоставлялся
	// 1 -значение из ТЗ правил
	// 2 -простой поиск 
	// 3 -нечеткий поиск                                         
	// 4 -создан новый
	// 5 -словарь
	// 6 -элемент найден по коду
	// 7 -ссылка удалена и задано наименование нового элемента
	// 8 -изменили вручную
	// 9 -прошел все и не сопоставился
	// А -элемент найден по артикулу

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
////////////////////////////////////////////////////////////////////////////////
// ОСНОВНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Функция ПолучитьСтруктуруПоиска(ПолучитьКоличествоВАрхиве = Ложь)
	
	
	Если ТаблицаОтборов.Количество() > 0 Тогда
		
		СтруктураПоиска = Новый Структура("LinkDatabaseID, RecognitionOld, XDTOSerializer, Page, NumberРerРage, SortingOrder", ИДБазыДанныхПользователя, "true", "true", Строка(ТекущаяСтраницаСписка), Строка(КолДокСтраница), ПолучитьПоляСортировки(Истина));
		
		СтрокаИнтервалДат = ТаблицаОтборов.НайтиСтроки(Новый Структура("ИмяПоля", "ИнтервалДат"))[0];
		Если СтрокаИнтервалДат.Использование Тогда
			КолличествоСекундВСутках = 86400 ;
			ИнтервалДат = СтрокаИнтервалДат.ЗначениеОтбора;
			Если ИнтервалДат = "1" Тогда
				НачальнаяДата = НачалоДня(ТекущаяДата());
			ИначеЕсли ИнтервалДат = "2" Тогда
				НачальнаяДата = НачалоДня(ТекущаяДата() - КолличествоСекундВСутках);
			ИначеЕсли ИнтервалДат = "3" Тогда
				НачальнаяДата = НачалоДня(ТекущаяДата() - КолличествоСекундВСутках * 7);
			ИначеЕсли ИнтервалДат = "4" Тогда
				НачальнаяДата = ДобавитьМесяц(ТекущаяДата(), -1);
			ИначеЕсли ИнтервалДат = "5" Тогда
				НачальнаяДата = ДобавитьМесяц(ТекущаяДата(), -3);
			//ИначеЕсли ИнтервалДат = "6" Тогда
			//	НачальнаяДата = ДобавитьМесяц(ТекущаяДата(), -6);
			КонецЕсли;
			Если НЕ ИнтервалДат = "6" Тогда
				СмещениеЧасы = Окр((ТекущаяДата() - УниверсальноеВремя(ТекущаяДата()))/3600, 0, 0);
				Знак = ?(СмещениеЧасы < 0 , "-", "+");
				СмещениеЧасы =  Макс(СмещениеЧасы,-СмещениеЧасы);
				СмещениеЧасыЧасы = Цел(СмещениеЧасы);
				СмещениеЧасыМинуты = ?(СмещениеЧасы=СмещениеЧасыЧасы, "00", Строка((СмещениеЧасы-СмещениеЧасыЧасы)*100));	
				СмещениеЧасыСтрока = ?(СмещениеЧасыЧасы < 10, "0" + СмещениеЧасыЧасы, "" + СмещениеЧасыЧасы) + ":" + СмещениеЧасыМинуты;
				ДатаС =  ДатаВФорматеISO8601(НачальнаяДата, Ложь) + Знак + СмещениеЧасыСтрока;
				СтруктураПоиска.Вставить("BeginCreateData",ДатаС); 
			КонецЕсли;
			Если Показывать = "Архив" ИЛИ ПолучитьКоличествоВАрхиве Тогда
				СтруктураПоиска.Вставить("Status", "1");
			ИначеЕсли Показывать = "НеАрхив" Тогда	
				СтруктураПоиска.Вставить("Status", "0");
			ИначеЕсли Показывать = "Готовые" Тогда	
				СтруктураПоиска.Вставить("DocumentRecognized", "true");
				СтруктураПоиска.Вставить("LinkFull", "false");
			ИначеЕсли Показывать = "НеГотовые" Тогда	
				СтруктураПоиска.Вставить("DocumentRecognized", "false");
			ИначеЕсли Показывать = "Загруженные" Тогда
				СтруктураПоиска.Вставить("LinkFull", "true");
	       	КонецЕсли;
		КонецЕсли;
		
		СтрокаОрганизация = ТаблицаОтборов.НайтиСтроки(Новый Структура("ИмяПоля", "Организация"))[0];
		Если СтрокаОрганизация.Использование Тогда
			Если СтрокаОрганизация.ВидСравнения = "равно" Тогда
				СтруктураПоиска.Вставить("OrganizationList", СтрокаОрганизация.ЗначениеОтбораСиноним);
			ИначеЕсли СтрокаОрганизация.ВидСравнения = "не равно" Тогда
				СтруктураПоиска.Вставить("NotOrganization", СтрокаОрганизация.ЗначениеОтбораСиноним);
			ИначеЕсли СтрокаОрганизация.ВидСравнения = "содержит" Тогда
				СтруктураПоиска.Вставить("OrganizationSearchSubstring", СтрокаОрганизация.ЗначениеОтбораСиноним);
			КонецЕсли; 
		КонецЕсли;
		СтрокаКонтрагент = ТаблицаОтборов.НайтиСтроки(Новый Структура("ИмяПоля", "Контрагент"))[0];
		Если СтрокаКонтрагент.Использование Тогда
			Если СтрокаКонтрагент.ВидСравнения = "равно" Тогда
				СтруктураПоиска.Вставить("ContractorList", СтрокаКонтрагент.ЗначениеОтбораСиноним);
			ИначеЕсли СтрокаКонтрагент.ВидСравнения = "не равно" Тогда
				СтруктураПоиска.Вставить("NotContractor", СтрокаКонтрагент.ЗначениеОтбораСиноним);
			ИначеЕсли СтрокаКонтрагент.ВидСравнения = "содержит" Тогда
				СтруктураПоиска.Вставить("ContractorSearchSubstring", СтрокаКонтрагент.ЗначениеОтбораСиноним);
			КонецЕсли; 
		КонецЕсли;
		СтрокаТип = ТаблицаОтборов.НайтиСтроки(Новый Структура("ИмяПоля", "Тип"))[0];
		Если СтрокаТип.Использование Тогда
			Если СтрокаТип.ВидСравнения = "равно" Тогда
				СтруктураПоиска.Вставить("DocumentTypeList", СтрокаТип.ЗначениеОтбораСиноним);
			ИначеЕсли СтрокаТип.ВидСравнения = "не равно" Тогда
				СтруктураПоиска.Вставить("NotDocumentType", СтрокаТип.ЗначениеОтбораСиноним);
			КонецЕсли; 
		КонецЕсли; 
		
		СтрокаДатаС = ТаблицаОтборов.НайтиСтроки(Новый Структура("ИмяПоля", "ДатаС"))[0];
		Если СтрокаДатаС.Использование Тогда
			СтруктураПоиска.Вставить("BeginDate", ДатаВФорматеISO8601(НачалоДня(СтрокаДатаС.ЗначениеОтбора), Ложь));
		КонецЕсли; 
		СтрокаДатаПо = ТаблицаОтборов.НайтиСтроки(Новый Структура("ИмяПоля", "ДатаПо"))[0];
		Если СтрокаДатаПо.Использование Тогда
			СтруктураПоиска.Вставить("EndDate", ДатаВФорматеISO8601(КонецДня(СтрокаДатаПо.ЗначениеОтбора), Ложь));
		КонецЕсли; 
		//Если Пользователь <> "null" Тогда	
		//	СтруктураПоиска.Вставить("UserID", Пользователь);
		//КонецЕсли;
		Если НЕ ПустаяСтрока(ПолеЖивогоПоиска) Тогда
			СтруктураПоиска.Вставить("SearchSubstring", ПолеЖивогоПоиска); 
		КонецЕсли;
		
		Возврат СтруктураПоиска;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


// Процедура - обработчик команды формы "Обновить"
//
&НаКлиенте
Процедура Обновить()
	  	
	//ТекущаяСтраницаСписка = 1;
	
	Состояние("Получение списка документов", 1);
	
	//Если НЕ ПолученоКоличествоВАрхиве = Истина Тогда
	//	СтруктураПоиска = ПолучитьСтруктуруПоиска(Истина);
	//	СтрокаЗапроса = "/adl42/hs/api_v1/Service/GetTableDataFound";
	//	ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", СтруктураПоиска);
	//	Если ПараметрыОтвета.КодОтвета = 200 Тогда
	//		МассивСтрокТаблицыДанных = ПараметрыОтвета.СтруктураОтвета.TableDataFound;
	//		ЗаполнитьТаблицуДанных(МассивСтрокТаблицыДанных, СтруктураТиповДокументов);
	//		МассивСтрокДокументовВАрхиве = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, Атрибутирован", 1, Истина));
	//		КоличествоДокументовВАрхиве = МассивСтрокДокументовВАрхиве.Количество();
	//		ПолученоКоличествоВАрхиве = Истина;
	//		Состояние("Получение списка документов", 15);
	//	Иначе
	//		СообщениеПользователю = Новый СообщениеПользователю;
	//		СообщениеПользователю.Текст = "Ошибка при получении списка документов: " + ПараметрыОтвета.СтруктураОтвета.Description;
	//		СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
	//		СообщениеПользователю.Сообщить();
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	
	СтруктураПоиска = ПолучитьСтруктуруПоиска();
	СтрокаЗапроса = "/adl42/hs/api_v1/Service/GetTableDataFound";
	ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", СтруктураПоиска);
	Состояние("Получение списка документов", 30);
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		
		КоличествоПоСтатусам = ПараметрыОтвета.СтруктураОтвета.NumberOfStatuses;
		КоличествоДокументовВсего = КоличествоПоСтатусам.КоличествоВсегоСОтборами;
		КоличествоДокументовЗагружено  = КоличествоПоСтатусам.КоличествоЗагруженных;
		КоличествоДокументовНеРаспознаны = КоличествоПоСтатусам.КоличествоНеРаспознанных;
		КоличествоДокументовВАрхиве  = КоличествоПоСтатусам.КоличествоВАрхиве;

		МассивСтрокТаблицыДанных = ПараметрыОтвета.СтруктураОтвета.TableDataFound;
		ЗаполнитьТаблицуДанных(МассивСтрокТаблицыДанных, СтруктураТиповДокументов);
		
		Состояние("Получение списка документов", 35);
		ЗаполнитьДеревоДокументовВызовСервера();
		Состояние("Получение списка документов", 80);

		Если ТаблицаДанных.Количество() = 0 Тогда
			СсылкаНаИзображение = Неопределено;
			//Элементы.СсылкаНаИзображение.Видимость = Истина;
			//Элементы.HTMLФайлДокумента.Видимость = Ложь;
			//Элементы.HTMLФайлСтраницы.Видимость = Ложь;
			HTMLФайлДокумента = "";
			HTMLФайлСтраницы = 	"";
			ИмяФайлаИсточника = "";
		КонецЕсли;
		ПервоеОтображение = Истина;
		АктивнаяСтрокаДерева = Неопределено;
		//Элементы.ДеревоДокументов.ТекущийЭлемент = Неопределено;
		//Элементы.ДеревоДокументов.ТекущаяСтрока = Неопределено;
		ИзменитьДоступностьКнопок();
		Состояние("Получение списка документов", 90);
	Иначе
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Ошибка при получении списка документов: " + ПараметрыОтвета.СтруктураОтвета.Description;
		СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецЕсли;
		
	ИзмененыРеквизиты = Ложь;
	//Элементы.ГруппаОповещенияПользователя.Видимость = Ложь;
	//Элементы.ПредупреждениеОбновить.Видимость = Ложь;
	//Элементы.Обновить.КнопкаПоУмолчанию = Ложь;
	Элементы.Обновить.ЦветФона = Новый Цвет(255,255,255);
	
	Состояние("Получение списка документов", 100);

КонецПроцедуры

// Процедура - обработчик события элемента СоздаватьДокументВида "ОбработкаВыбора"
//
&НаКлиенте
Процедура СоздаватьДокументВидаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СоздаватьДокументВида = ВыбранноеЗначение;
	
КонецПроцедуры

//Заполнение таблицы данных
//
&НаСервере
Процедура ЗаполнитьТаблицуДанных(МассивСтрокТаблицыДанных, СтруктураТиповДокументов)
	
	// Удаляем не полученные документы
	ТаблицаДанныхЗначение = РеквизитФормыВЗначение("ТаблицаДанных");
	СтрокиДокументовВОбработке = ТаблицаДанныхЗначение.НайтиСтроки(Новый Структура("СтатусОбработки", "В обработке"));
	ТаблицаДанныхКопия = ТаблицаДанныхЗначение.Скопировать(СтрокиДокументовВОбработке); 
	// Формируем список обрабатываемых документов

	Для Каждого СтрокаДокументаПолученКопия Из ТаблицаДанныхКопия Цикл
		МассивСтрокПолученных = ТаблицаДанныхПолученные.НайтиСтроки(Новый Структура("ДокументИД", СтрокаДокументаПолученКопия.ДокументИД));
		Если МассивСтрокПолученных.Количество() = 0 Тогда
			СтрокаДокументаПолучен = ТаблицаДанныхПолученные.Добавить();
		Иначе
			СтрокаДокументаПолучен = МассивСтрокПолученных[0];
		КонецЕсли;
		Для Каждого Колонка Из ТаблицаДанныхКопия.Колонки Цикл
			СтрокаДокументаПолучен[Колонка.Имя] = СтрокаДокументаПолученКопия[Колонка.Имя];
		КонецЦикла;
		СтрокаДокументаПолучен.ДругаяСтраница = Ложь;
	КонецЦикла;
	
	ТаблицаДанных.Очистить();
	Для Каждого СтруктураСтрокиТаблицыДанных Из МассивСтрокТаблицыДанных Цикл
		Если СтруктураСтрокиТаблицыДанных.DocumentID = "" Тогда
			Продолжить;  // ЭРЗД не рассматривает пока документы в разрезе сделок, а также исключаем повторное добавление полученных документов
		КонецЕсли;
		МассивСтрокПолученных = ТаблицаДанныхПолученные.НайтиСтроки(Новый Структура("ЭтоСделка, ДокументИД", 1, СтруктураСтрокиТаблицыДанных.DocumentID));
		Если МассивСтрокПолученных.Количество() > 0 Тогда
			СтрокаДокументаПолучен = МассивСтрокПолученных[0];
		Иначе
			СтрокаДокументаПолучен = Неопределено;
		КонецЕсли;
		СтрокаТаблицаДанных = ТаблицаДанных.Добавить();	
		ПреобразованныеДанные = ПреобразоватьСтруктуру(СтруктураСтрокиТаблицыДанных, Истина);
		Если СтрокаДокументаПолучен <> Неопределено И ПреобразованныеДанные.ЭтоСделка = 1 Тогда
			Для Каждого Колонка Из ТаблицаДанныхКопия.Колонки Цикл
				СтрокаТаблицаДанных[Колонка.Имя] = СтрокаДокументаПолучен[Колонка.Имя];
			КонецЦикла;
		Иначе
			СтрокаТаблицаДанных.ДокументИД = СтруктураСтрокиТаблицыДанных.DocumentID;
			СтрокаТаблицаДанных.СтраницаИД = СтруктураСтрокиТаблицыДанных.PageID;
			СтрокаТаблицаДанных.Организация = СтруктураСтрокиТаблицыДанных.Organization;
			СтрокаТаблицаДанных.Контрагент = СтруктураСтрокиТаблицыДанных.Contractor;
			СтрокаТаблицаДанных.Комментарий = СтруктураСтрокиТаблицыДанных.Comment;
			СтрокаТаблицаДанных.Номер = СтруктураСтрокиТаблицыДанных.DocumentNumber;
			СтрокаТаблицаДанных.Тип	= СтруктураСтрокиТаблицыДанных.DocumentType;
			СтрокаТаблицаДанных.ТипФайла        = СтруктураСтрокиТаблицыДанных.DocumentFileExtension;
			СтрокаТаблицаДанных.СсылкаИД =  СтруктураСтрокиТаблицыДанных.LinkID;
			СтрокаТаблицаДанных.СсылкаТип =  СтруктураСтрокиТаблицыДанных.LinkType;
			СтрокаТаблицаДанных.ТипРаспознан = СтруктураСтрокиТаблицыДанных.RecognitionType;
			СтрокаТаблицаДанных.СтатусРаспознавания = ПреобразованныеДанные.СтатусРаспознавания;
			СтрокаТаблицаДанных.Атрибутирован = ПреобразованныеДанные.Атрибутирован;
			СтрокаТаблицаДанных.Исходящий = ПреобразованныеДанные.Исходящий;
			СтрокаТаблицаДанных.СтараяВерсия = ПреобразованныеДанные.СтараяВерсия;
			СтрокаТаблицаДанных.Дата = ПреобразованныеДанные.Дата;
			СтрокаТаблицаДанных.Новый = ПреобразованныеДанные.Новый;
			СтрокаТаблицаДанных.ДатаСоздания = ПреобразованныеДанные.ДатаСоздания;
			СтрокаТаблицаДанных.СтраницаНомер = ПреобразованныеДанные.СтраницаНомер;
			СтрокаТаблицаДанных.Сумма = ПреобразованныеДанные.Сумма;
			СтрокаТаблицаДанных.ЭтоСделка = ПреобразованныеДанные.ЭтоСделка;
			СтрокаТаблицаДанных.ПлохоеКачествоИсходныхФайлов = ПреобразованныеДанные.ПлохоеКачествоИсходныхФайлов;
			СтрокаТаблицаДанных.ЭтоСделка = ПреобразованныеДанные.ЭтоСделка;
			СтрокаТаблицаДанных.Оригинал = СтруктураСтрокиТаблицыДанных.Original;
			СтрокаТаблицаДанных.ОрганизацияИД = СтруктураСтрокиТаблицыДанных.AccountOrganizationID;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаСортировки = ПолучитьПоляСортировки();
	ТаблицаДанных.Сортировать(СтрокаСортировки);
	
	Если ТаблицаДанных.Количество() > 0 Тогда
		ДатаСервера = ТаблицаДанных[0].ДатаСоздания;
		МассивСтрокДокументов = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка", 1));	
		//КоличествоДокументовВсего = МассивСтрокДокументов.Количество();
		ПервыйЭлемент = Истина;
		Для Каждого ТаблицаДанныхСтрокаДокумента Из МассивСтрокДокументов Цикл
			МассивСтрокСтраницДокумента = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ТаблицаДанныхСтрокаДокумента.ДокументИД, 2));	
			СтруктураТипа = Неопределено;
			Если НЕ ТаблицаДанныхСтрокаДокумента.СтатусОбработки = "В обработке" Тогда
				Если ТаблицаДанныхСтрокаДокумента.ТипРаспознан <> "" Тогда
					СтруктураТиповДокументов.Свойство(ВРЕГ(ТаблицаДанныхСтрокаДокумента.ТипРаспознан), СтруктураТипа);
				КонецЕсли;
				Если СтруктураТипа = Неопределено Тогда
					ГотовКЗагрузке = Ложь;
					Статус = "Документ не распознавался";
				Иначе
					ГотовКЗагрузке = СтруктураТипа.ГотовКЗагрузке;
					ТаблицаДанныхСтрокаДокумента.ТипОписание = СтруктураТипа.Описание;
				КонецЕсли;
				
				Если ТаблицаДанныхСтрокаДокумента.СсылкаИД <> "" Тогда
					СсылкаДокумент = ПолучитьСсылкуПоИД(ТаблицаДанныхСтрокаДокумента.СсылкаИД, ТаблицаДанныхСтрокаДокумента.СсылкаТип); 
					ТаблицаДанныхСтрокаДокумента.СсылкаДокумент = СсылкаДокумент; 
				Иначе
					СсылкаДокумент = "";
				КонецЕсли;
				Если ТаблицаДанныхСтрокаДокумента.СтатусРаспознавания = 0 Тогда
					Если СсылкаДокумент <> "" И СсылкаДокумент <> Неопределено Тогда
						Статус = "Загружен";
						ГотовКЗагрузке = Ложь;
					ИначеЕсли ГотовКЗагрузке Тогда
						Статус = "Готов к загрузке";
					ИначеЕсли ТаблицаДанныхСтрокаДокумента.ТипРаспознан = "UNDEF" Тогда
						Статус = "Попробуйте выбрать тип документа и выполнить повторное распознавание";	
					ИначеЕсли ТаблицаДанныхСтрокаДокумента.ТипРаспознан = "Error" Тогда
						Статус = ?(ТаблицаДанныхСтрокаДокумента.Комментарий = "Файл не подлежит распознаванию" ИЛИ ТаблицаДанныхСтрокаДокумента.Комментарий = "Файл помещен без распознавания", ТаблицаДанныхСтрокаДокумента.Комментарий, "Ошибка при распознавании: " + ТаблицаДанныхСтрокаДокумента.Комментарий);	
					Иначе
						Статус = "Документ нельзя загрузить в данную учетную систему";	
					КонецЕсли;
				Иначе
					ГотовКЗагрузке = Ложь;
					Если ТаблицаДанныхСтрокаДокумента.СтатусРаспознавания = 2 Тогда  
						Статус = "Выполняется повторное распознавание";
					ИначеЕсли ТаблицаДанныхСтрокаДокумента.СтатусРаспознавания = 5 Тогда  
						Статус = "Страницы документа были перемещены или удалены";
					Иначе  
						Статус = "Перераспознайте документ (изменен шаблона, состав или порядок страниц)";
					КонецЕсли;
				КонецЕсли;
				ТаблицаДанныхСтрокаДокумента.ГотовКЗагрузке = ГотовКЗагрузке;
				ТаблицаДанныхСтрокаДокумента.СтатусОбработки = Статус;
				ТаблицаДанныхСтрокаДокумента.Загружен = (Статус = "Загружен");
				Если Найти(Статус, "Перераспознайте документ") > 0 Тогда
					ТаблицаДанныхСтрокаДокумента.КПерераспознаванию = Истина;
				Иначе
					ТаблицаДанныхСтрокаДокумента.КПерераспознаванию = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Для Каждого СтрокаДокументаПолучен Из ТаблицаДанныхПолученные Цикл
		МассивСтрок = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, ДокументИД", 1, СтрокаДокументаПолучен.ДокументИД));
		Если МассивСтрок.Количество() = 0 Тогда
		 	СтрокаТаблицаДанных = ТаблицаДанных.Добавить();	
			Для Каждого Колонка Из ТаблицаДанныхКопия.Колонки Цикл
				СтрокаТаблицаДанных[Колонка.Имя] = СтрокаДокументаПолучен[Колонка.Имя];
			КонецЦикла;
			СтрокаТаблицаДанных.ДругаяСтраница = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры    

// Получение документогв
//
&НаСервере
Процедура КоличествоДокументовПоСтатусамНаСервере()	
	
	КоличествоДокументовКАтрибутированию = КоличествоДокументовВсего - КоличествоДокументовВАрхиве;
	КоличествоДокументовРаспознаны = КоличествоДокументовВсего - КоличествоДокументовНеРаспознаны;
	
	МассивСтрокДокументовНаПроверке = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, СтатусОбработки", 1, "В обработке"));	
	КоличествоДокументовНаПроверке = МассивСтрокДокументовНаПроверке.Количество();
	
	Элементы.ВсеЗагрузкаДокументов.Заголовок = "Загрузка документов " + КоличествоДокументовВсего;
	Элементы.Готовые.Заголовок = "Распознанные " + КоличествоДокументовРаспознаны;
	Элементы.ВОбработке.Заголовок = "На проверке " + КоличествоДокументовНаПроверке;
	Элементы.Загруженные.Заголовок = "Загруженные " + КоличествоДокументовЗагружено;
	Элементы.НеГотовые.Заголовок = "Нераспознанные " + КоличествоДокументовНеРаспознаны;
	Элементы.ВсеДокАрхив.Заголовок = "ДокАрхив " + КоличествоДокументовВсего;
	Элементы.НеАрхив.Заголовок = "К атрибутированию  " + КоличествоДокументовКАтрибутированию;
	Элементы.Архив.Заголовок = "В архиве " + КоличествоДокументовВАрхиве;
	
	//Если Показывать = "Архив" Тогда
	//	МассивСтрокДокументовВАрхиве = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, Атрибутирован", 1, Истина));
	//	КоличествоДокументовВАрхиве = МассивСтрокДокументовВАрхиве.Количество();
	//Иначе
		//МассивСтрокДокументовНовыхВсего = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, Новый", 1, Истина));
		//КоличествоНовыхВсего = МассивСтрокДокументовНовыхВсего.Количество();
		//МассивСтрокДокументовНовыхЗагружено = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, ЗагруженНеОткрыт", 1, Истина));
		//КоличествоДокументовНовыхЗагружено = МассивСтрокДокументовНовыхЗагружено.Количество();
		//МассивСтрокДокументовКАтрибутированию = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, Атрибутирован", 1, Ложь));
		//КоличествоДокументовКАтрибутированию = МассивСтрокДокументовКАтрибутированию.Количество();
		//МассивСтрокДокументовНовыхКАтрибутированию = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, Атрибутирован, Новый", 1, Ложь, Истина));
		//КоличествоДокументовНовыхКАтрибутированию = МассивСтрокДокументовНовыхКАтрибутированию.Количество();
		//МассивСтрокДокументовНовыхПолучено = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, ПолученНеОткрыт", 1, Истина));
		//КоличествоДокументовНовыхПолучено = МассивСтрокДокументовНовыхПолучено.Количество();
		//МассивСтрокДокументовНовыхРаспознано = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, ГотовКЗагрузке, Новый", 1, Истина, Истина));	
		//КоличествоНовыхРаспознано = МассивСтрокДокументовНовыхРаспознано.Количество();
		//МассивСтрокДокументовРаспознано = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, ГотовКЗагрузке", 1, Истина));	
		//КоличествоДокументовРаспознаны = МассивСтрокДокументовРаспознано.Количество();
		//МассивСтрокДокументовЗагружено = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, СтатусОбработки", 1, "Загружен"));	
		//КоличествоДокументовЗагружено = МассивСтрокДокументовЗагружено.Количество();
		//МассивСтрокДокументовНаПроверке = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, СтатусОбработки", 1, "В обработке"));	
		//КоличествоДокументовНаПроверке = МассивСтрокДокументовНаПроверке.Количество();
		//МассивСтрокДокументовКПерераспознаванию = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, СтатусОбработки", 1, "Перераспознайте документ (изменен шаблона, состав или порядок страниц)"));	
		//КоличествоДокументовКПерераспознаванию = МассивСтрокДокументовКПерераспознаванию.Количество();
		//МассивСтрокДокументовНовыхКПерераспознаванию = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, ПрисвоенСтатусКПерераспознаванию", 1, Истина));	
		//КоличествоДокументовНовыхКПерераспознаванию = МассивСтрокДокументовНовыхКПерераспознаванию.Количество();
		//КоличествоДокументовНеРаспознаны = КоличествоДокументовВсего - КоличествоДокументовРаспознаны - КоличествоДокументовЗагружено - КоличествоДокументовНаПроверке - КоличествоДокументовКПерераспознаванию;
		//КоличествоДокументовНовыхНеРаспознаны = КоличествоНовыхВсего - КоличествоНовыхРаспознано;
		
		//МассивСтрок = Новый Массив;
		//МассивСтрок.Добавить("Загрузка документов ");
		////Если КоличествоНовыхВсего > 0 Тогда 
		////	МассивСтрок.Добавить(Новый ФорматированнаяСтрока("" + КоличествоНовыхВсего + "/", Новый Шрифт(,,Истина)));   
		////КонецЕсли;
		//МассивСтрок.Добавить("" + КоличествоДокументовВсего);
		//Элементы.ВсеЗагрузкаДокументов.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		//
		//МассивСтрок = Новый Массив;
		//МассивСтрок.Добавить("Распознанные ");
		////Если КоличествоНовыхРаспознано > 0 Тогда 
		////	МассивСтрок.Добавить(Новый ФорматированнаяСтрока("" + КоличествоНовыхРаспознано + "/", Новый Шрифт(,,Истина)));   
		////КонецЕсли;
		//МассивСтрок.Добавить("" + КоличествоДокументовРаспознаны);
		//Элементы.Готовые.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		//
		//МассивСтрок = Новый Массив;
		//МассивСтрок.Добавить("На проверке ");
		////Если КоличествоДокументовНовыхПолучено > 0 Тогда 
		////	МассивСтрок.Добавить(Новый ФорматированнаяСтрока("" + КоличествоДокументовНовыхПолучено + "/", Новый Шрифт(,,Истина)));   
		////КонецЕсли;
		//МассивСтрок.Добавить("" + КоличествоДокументовНаПроверке);
		//Элементы.ВОбработке.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		//
		//МассивСтрок = Новый Массив;
		//МассивСтрок.Добавить("Загруженные ");
		////Если КоличествоДокументовНовыхЗагружено > 0 Тогда 
		////	МассивСтрок.Добавить(Новый ФорматированнаяСтрока("" + КоличествоДокументовНовыхЗагружено + "/", Новый Шрифт(,,Истина)));   
		////КонецЕсли;
		//МассивСтрок.Добавить("" + КоличествоДокументовЗагружено);
		//Элементы.Загруженные.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		//
		//МассивСтрок = Новый Массив;
		//МассивСтрок.Добавить("Нераспознанные ");
		////Если КоличествоДокументовНовыхНеРаспознаны > 0 Тогда 
		////	МассивСтрок.Добавить(Новый ФорматированнаяСтрока("" + КоличествоДокументовНовыхНеРаспознаны + "/", Новый Шрифт(,,Истина)));   
		////КонецЕсли;
		//МассивСтрок.Добавить("" + КоличествоДокументовНеРаспознаны);
		//Элементы.НеГотовые.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		
		//МассивСтрок = Новый Массив;
		//МассивСтрок.Добавить("К перераспознаванию ");
		////Если КоличествоДокументовНовыхКПерераспознаванию > 0 Тогда 
		////	МассивСтрок.Добавить(Новый ФорматированнаяСтрока("" + КоличествоДокументовНовыхКПерераспознаванию + "/", Новый Шрифт(,,Истина)));   
		////КонецЕсли;
		//МассивСтрок.Добавить("" + КоличествоДокументовКПерераспознаванию);
		//Элементы.КПерераспознаванию.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		
	//	МассивСтрок = Новый Массив;
	//	МассивСтрок.Добавить("ДокАрхив ");
	//	//Если КоличествоНовыхВсего > 0 Тогда 
	//	//	МассивСтрок.Добавить(Новый ФорматированнаяСтрока("" + КоличествоНовыхВсего + "/", Новый Шрифт(,,Истина)));   
	//	//КонецЕсли;
	//	МассивСтрок.Добавить("" + КоличествоДокументовВсего);
	//	Элементы.ВсеДокАрхив.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	//	
	//	МассивСтрок = Новый Массив;
	//	МассивСтрок.Добавить("К атрибутированию ");
	//	//Если КоличествоДокументовНовыхКАтрибутированию > 0 Тогда 
	//	//	МассивСтрок.Добавить(Новый ФорматированнаяСтрока("" + КоличествоДокументовНовыхКАтрибутированию + "/", Новый Шрифт(,,Истина)));   
	//	//КонецЕсли;
	//	МассивСтрок.Добавить("" + КоличествоДокументовКАтрибутированию);
	//	Элементы.НеАрхив.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	////КонецЕсли;
	//
	//МассивСтрок = Новый Массив;
	//МассивСтрок.Добавить("В архиве ");
	////Если КоличествоДокументовНовыхКАтрибутированию > 0 Тогда 
	////	МассивСтрок.Добавить(Новый ФорматированнаяСтрока("" + КоличествоДокументовНовыхКАтрибутированию + "/", Новый Шрифт(,,Истина)));   
	////КонецЕсли;
	//МассивСтрок.Добавить("" + КоличествоДокументовВАрхиве);
	//Элементы.Архив.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоДокументовВызовСервера()	
	
	МассивИДРазвёрнутых = Новый Массив;	
	СтрокиДерева = ДеревоДокументов.ПолучитьЭлементы();
	Для Каждого Строка Из СтрокиДерева Цикл		
		Если Элементы.ДеревоДокументов.Развернут(Строка.ПолучитьИдентификатор()) Тогда
			МассивИДРазвёрнутых.Добавить(Строка.ДокументИД);
		КонецЕсли;
	КонецЦикла;
	Если Элементы.ДеревоДокументов.ТекущиеДанные <> Неопределено Тогда
		ТекущийДокументИД = Элементы.ДеревоДокументов.ТекущиеДанные.ДокументИД;
	КонецЕсли;
	
	ЗаполнитьДеревоДокументов();
	
	ДеревоДокументовКоллекцияСтрок = ДеревоДокументов.ПолучитьЭлементы();
	Для Каждого Строка Из ДеревоДокументовКоллекцияСтрок Цикл
		Если МассивИДРазвёрнутых.Найти(Строка.ДокументИД) <> Неопределено Тогда
			Элементы.ДеревоДокументов.Развернуть(Строка.ПолучитьИдентификатор());
		КонецЕсли;
		Если Строка.ДокументИД = ТекущийДокументИД тогда
			Элементы.ДеревоДокументов.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры


// Заполнение дерева документов
//
&НаСервере
Процедура ЗаполнитьДеревоДокументов();
	
	ДеревоДокументовКоллекцияСтрок = ДеревоДокументов.ПолучитьЭлементы();
	ДеревоДокументовКоллекцияСтрок.Очистить();
	Если ТаблицаДанных.Количество() > 0 Тогда
		ПервыйДокумент = ТекущаяСтраницаСписка * КолДокСтраница - КолДокСтраница + 1; 
		ПоследнийДокумент = ТекущаяСтраницаСписка * КолДокСтраница;
		ПорядковыйНомерДокумента = 0;

		ДатаСервера = ТаблицаДанных[0].ДатаСоздания;
		
		ПервыйЭлемент = Истина;
		    	
		Показывать = ?(Показывать = "", "Все", Показывать); 
		Если Показывать = "Все" Тогда
			МассивСтрокДокументов = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка", 1));	
			Элементы.СсылкаДокумент.Видимость = Истина;
		ИначеЕсли Показывать = "Готовые" Тогда
			МассивСтрокДокументов = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, ГотовКЗагрузке", 1, Истина));	
			Элементы.СсылкаДокумент.Видимость = Ложь;
		ИначеЕсли Показывать = "Загруженные" Тогда
			МассивСтрокДокументов = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, СтатусОбработки", 1, "Загружен"));	
			Элементы.СсылкаДокумент.Видимость = Истина;
		ИначеЕсли Показывать = "ВОбработке" Тогда
			МассивСтрокДокументов = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, СтатусОбработки", 1, "В обработке"));	
			Элементы.СсылкаДокумент.Видимость = Ложь;
		//ИначеЕсли Показывать = "КПерераспознаванию" Тогда
		//	МассивСтрокДокументов = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, КПерераспознаванию", 1, Истина));	
		//	Элементы.СсылкаДокумент.Видимость = Ложь;
		ИначеЕсли Показывать = "НеГотовые" Тогда
			МассивСтрокДокументов = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, ГотовКЗагрузке, КПерераспознаванию, Загружен", 1, Ложь, Ложь, Ложь));	
			Элементы.СсылкаДокумент.Видимость = Ложь;
		ИначеЕсли Показывать = "НеАрхив" Тогда
			МассивСтрокДокументов = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, Атрибутирован", 1, Ложь));
			Элементы.СсылкаДокумент.Видимость = Истина;
		ИначеЕсли Показывать = "Архив" Тогда
			МассивСтрокДокументов = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, Атрибутирован", 1, Истина));	
			Элементы.СсылкаДокумент.Видимость = Истина;
		КонецЕсли;
		
		Для Каждого ТаблицаДанныхСтрокаДокумента Из МассивСтрокДокументов Цикл

			ПорядковыйНомерДокумента  = ПорядковыйНомерДокумента + 1;
			Если ТаблицаДанныхСтрокаДокумента.ДругаяСтраница И НЕ Показывать = "ВОбработке" Тогда
				Продолжить;
			КонецЕсли;
			//Если ПорядковыйНомерДокумента < ПервыйДокумент Тогда
			//	Продолжить;
			//ИначеЕсли ПорядковыйНомерДокумента > ПоследнийДокумент Тогда
			//	Прервать;
			//ИначеЕсли Показывать = "НеГотовые" И ТаблицаДанныхСтрокаДокумента.СтатусОбработки = "В обработке" Тогда
			//	Продолжить;
			//КонецЕсли;
			//
			Если Показывать = "НеГотовые" И ТаблицаДанныхСтрокаДокумента.СтатусОбработки = "В обработке" Тогда
				Продолжить;
			КонецЕсли;

			
			Шаблон = Элементы.Шаблон.СписокВыбора.НайтиПоЗначению(ТаблицаДанныхСтрокаДокумента.ТипРаспознан);
			Если ТаблицаДанныхСтрокаДокумента.СсылкаИД <> "" Тогда
				СсылкаДокумент = ПолучитьСсылкуПоИД(ТаблицаДанныхСтрокаДокумента.СсылкаИД, ТаблицаДанныхСтрокаДокумента.СсылкаТип); 
			Иначе
				СсылкаДокумент = "";
			КонецЕсли;
			ДеревоДокумент = ДеревоДокументовКоллекцияСтрок.Добавить();
			ДеревоДокумент.Наименование =  СформироватьНаименованиеЭлементаАрхива(ТаблицаДанныхСтрокаДокумента.Организация, ТаблицаДанныхСтрокаДокумента.Тип, ТаблицаДанныхСтрокаДокумента.Номер, ТаблицаДанныхСтрокаДокумента.Дата, ТаблицаДанныхСтрокаДокумента.Контрагент, ТаблицаДанныхСтрокаДокумента.Сумма);
			ТаблицаДанныхСтрокаДокумента.Наименование = ДеревоДокумент.Наименование;
			ДеревоДокумент.ДокументИД = ТаблицаДанныхСтрокаДокумента.ДокументИД;
			ДеревоДокумент.СтраницаИД = ТаблицаДанныхСтрокаДокумента.СтраницаИД;
			ДеревоДокумент.ЭтоСделка = ТаблицаДанныхСтрокаДокумента.ЭтоСделка;
			ДеревоДокумент.СсылкаДокумент = ТаблицаДанныхСтрокаДокумента.СсылкаДокумент;
			ДеревоДокумент.ГотовКЗагрузке = ТаблицаДанныхСтрокаДокумента.ГотовКЗагрузке;
			ДеревоДокумент.Статус = ТаблицаДанныхСтрокаДокумента.СтатусОбработки;
			ДеревоДокумент.Новый = ТаблицаДанныхСтрокаДокумента.Новый;
			ДеревоДокумент.Атрибутирован = ТаблицаДанныхСтрокаДокумента.Атрибутирован;

			ДеревоДокумент.ПлохоеКачествоИсходныхФайлов = ТаблицаДанныхСтрокаДокумента.ПлохоеКачествоИсходныхФайлов;
			ДеревоДокумент.Шаблон = ?(Шаблон = Неопределено, "Не определен", Шаблон.Представление);
			Если ДеревоДокумент.Атрибутирован И ДеревоДокумент.Шаблон = "Не определен" Тогда
				ДеревоДокумент.Шаблон = ТаблицаДанныхСтрокаДокумента.Тип;
			КонецЕсли;
			ДеревоДокумент.Пометка = ТаблицаДанныхСтрокаДокумента.Пометка;
			Если СписокРасширений.НайтиПоЗначению(ТаблицаДанныхСтрокаДокумента.ТипФайла) <> Неопределено Тогда
				МассивСтрокСтраницДокумента = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ТаблицаДанныхСтрокаДокумента.ДокументИД, 2));
				Для Каждого СтрокаСтраницы Из МассивСтрокСтраницДокумента Цикл
					ДеревоСтраница = ДеревоДокумент.ПолучитьЭлементы().Добавить();
					ДеревоСтраница.Наименование = "Страница " + СтрокаСтраницы.СтраницаНомер;
					ДеревоСтраница.ДокументИД = СтрокаСтраницы.ДокументИД;
					ДеревоСтраница.СтраницаИД = СтрокаСтраницы.СтраницаИД;
					ДеревоСтраница.ЭтоСделка = СтрокаСтраницы.ЭтоСделка;
				КонецЦикла;
			КонецЕсли;
			Если ПервыйЭлемент Тогда
				ПервыйЭлемент = Ложь;
			КонецЕсли;
			Если ДеревоДокумент.Статус = "Загружен" Тогда
				ДеревоДокумент.СтатусСтроки = 7;
			ИначеЕсли ДеревоДокумент.Статус = "В обработке" Тогда
				Если ТаблицаДанныхСтрокаДокумента.Статус = 2 Тогда
					ДеревоДокумент.СтатусСтроки = 2;
				ИначеЕсли ТаблицаДанныхСтрокаДокумента.Статус = 0 Тогда
					ДеревоДокумент.СтатусСтроки = 7;
				ИначеЕсли ТаблицаДанныхСтрокаДокумента.Статус = 3 Тогда
					ДеревоДокумент.СтатусСтроки = 1;
				КонецЕсли;
			Иначе 
				Если ДеревоДокумент.Статус <> "Готов к загрузке" Тогда
					ДеревоДокумент.ДеревоКомментарий = ДеревоДокумент.Статус;
				КонецЕсли;
				ДеревоДокумент.СтатусСтроки = 0;
			КонецЕсли;

			Если Показывать = "Все" Тогда
				ДеревоДокумент.Жирный = ТаблицаДанныхСтрокаДокумента.Новый;	
				КоличествоДокументовВСпискеВсего = КоличествоДокументовВсего;
			ИначеЕсли Показывать = "Готовые" Тогда
				ДеревоДокумент.Жирный = ТаблицаДанныхСтрокаДокумента.Новый;	
				КоличествоДокументовВСпискеВсего = КоличествоДокументовРаспознаны;
			ИначеЕсли Показывать = "Загруженные" Тогда
				ДеревоДокумент.Жирный = ТаблицаДанныхСтрокаДокумента.ЗагруженНеОткрыт;
				КоличествоДокументовВСпискеВсего = КоличествоДокументовРаспознаны;
			ИначеЕсли Показывать = "ВОбработке" Тогда
				ДеревоДокумент.Жирный = ТаблицаДанныхСтрокаДокумента.ПолученНеОткрыт;	
				КоличествоДокументовВСпискеВсего = КоличествоДокументовНаПроверке;
			//ИначеЕсли Показывать = "КПерераспознаванию" Тогда
			//	ДеревоДокумент.Жирный = ТаблицаДанныхСтрокаДокумента.ПрисвоенСтатусКПерераспознаванию;	
			ИначеЕсли Показывать = "НеГотовые" Тогда
				ДеревоДокумент.Жирный = ТаблицаДанныхСтрокаДокумента.Новый;	
				КоличествоДокументовВСпискеВсего = КоличествоДокументовНеРаспознаны;
			ИначеЕсли Показывать = "НеАрхив" Тогда
				ДеревоДокумент.Жирный = ТаблицаДанныхСтрокаДокумента.Новый;	
				КоличествоДокументовВСпискеВсего = КоличествоДокументовНеРаспознаны;
			ИначеЕсли Показывать = "Архив" Тогда
				ДеревоДокумент.Жирный = ТаблицаДанныхСтрокаДокумента.Новый;	
				КоличествоДокументовВСпискеВсего = КоличествоДокументовВАрхиве;
			КонецЕсли;
			
		КонецЦикла;
		//КоличествоДокументовВСпискеВсего = ПорядковыйНомерДокумента;
		
	КонецЕсли;
	
	КоличествоДокументовПоСтатусамНаСервере();
	
КонецПроцедуры

// Получение документогв
//
&НаКлиенте
Процедура ПолучитьДокументы(Загрузить = Ложь, ТекДокИД = Неопределено) Экспорт	
	
	Если ТекДокИД = Неопределено Тогда
		МассивВыбранныхСтрок = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, Пометка, ГотовКЗагрузке", 1, Истина, Истина));
		Если МассивВыбранныхСтрок.Количество() = 0 и  Элементы.ДеревоДокументов.ТекущиеДанные <> Неопределено И Элементы.ДеревоДокументов.ТекущиеДанные.Статус = "Готов к загрузке" Тогда
			МассивВыбранныхСтрок = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка, ГотовКЗагрузке", Элементы.ДеревоДокументов.ТекущиеДанные.ДокументИД, 1, Истина));
		КонецЕсли;
	Иначе		
		МассивВыбранныхСтрок = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ТекДокИД, 1));
	КонецЕсли;

	Для каждого Документ Из МассивВыбранныхСтрок Цикл
		Документ.Загрузить = Загрузить; 
		МассивГотовых.Добавить(Документ.ДокументИД);
	КонецЦикла;
	
	ИзменитьПометку(Ложь);
	
	ПолучитьГотовыеНаКлиенте();
	
КонецПроцедуры

// Процедура - обработчик команды формы "ПолучитьВыбранные"
//
&НаКлиенте
Процедура ПолучитьВыбранные(Команда)
	
	ПолучитьДокументы();
	
КонецПроцедуры

// Процедура - обработчик команды формы "Загрузить"
//
&НаКлиенте
Процедура ЗагрузитьВыбранные(Команда)
	
	ПолучитьДокументы(Истина);
	
КонецПроцедуры

// Процедура - обработчик команды формы "ВыбратьВсеНовые"
//
&НаКлиенте
Процедура ВыбратьВсеНовые(Команда)
	
	ИзменитьПометку(Ложь);
	
	ДокументыДерева = ДеревоДокументов.ПолучитьЭлементы();
	Для Каждого СтрокаДокумента Из ДокументыДерева Цикл
		Если СтрокаДокумента.Новый Тогда
			СтрокаДокумента.Пометка = Истина;
			МассивВыбранныхСтрок = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка, Новый", СтрокаДокумента.ДокументИД, 1, Истина));
			МассивВыбранныхСтрок[0].Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ИзменитьДоступностьКнопок();


КонецПроцедуры

// Процедура - обработчик команды формы "Удалить"
//
&НаКлиенте
Процедура Удалить(Команда)
	
	Если Элементы.ДеревоДокументов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//Если Элементы.ДеревоДокументов.ТекущиеДанные.ЭтоСделка = 2 
	//	И ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", Элементы.ДеревоДокументов.ТекущиеДанные.ДокументИД, 1))[0].СтатусОбработки <> "Загружен"
	//	Тогда
		Если Элементы.ДеревоДокументов.ТекущиеДанные.ЭтоСделка = 2 Тогда

		УдалитьСтраницу();
		
	//ИначеЕсли ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", Элементы.ДеревоДокументов.ТекущиеДанные.ДокументИД, 1))[0].СтатусОбработки <> "Загружен" Тогда
	Иначе	
		КоличествоПомеченных = ТаблицаДанных.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество();
		
		МассивСтрокДляУдаления = Новый Массив;	
		ДокументыДерева = ДеревоДокументов.ПолучитьЭлементы();
		ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
		Если КоличествоПомеченных > 0 Тогда
			Для Каждого СтрокаДокумента Из ДокументыДерева Цикл
				Если СтрокаДокумента.Пометка Тогда
					Если УдалитьДокументСписка(СтрокаДокумента.ДокументИД) Тогда
						МассивСтрокДляУдаления.Добавить(СтрокаДокумента);
					Иначе
						Прервать;
					КонецЕсли;
				Иначе
					СтрокиСтраниц = СтрокаДокумента.ПолучитьЭлементы();
					Для Каждого СтрокаСтраницы Из СтрокиСтраниц Цикл
						Если СтрокаСтраницы.Пометка Тогда
							Если УдалитьДокументСписка(СтрокаСтраницы.ДокументИД) Тогда
								МассивСтрокДляУдаления.Добавить(СтрокаСтраницы.ПолучитьРодителя());
								Прервать;
							Иначе
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли УдалитьДокументСписка(ТекущиеДанные.ДокументИД) Тогда
			Если ТекущиеДанные.ЭтоСделка = 1 Тогда
				МассивСтрокДляУдаления.Добавить(ТекущиеДанные);
			Иначе
				МассивСтрокДляУдаления.Добавить(ТекущиеДанные.ПолучитьРодителя());
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого СтрокаДокумента Из МассивСтрокДляУдаления Цикл
			ДокументыДерева.Удалить(СтрокаДокумента);
		КонецЦикла;	
		
		ЗаполнитьДеревоДокументовВызовСервера();
		КоличествоДокументовПоСтатусамНаСервере();

	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик команды формы "ОценитьРаботуСервиса"
//
&НаКлиенте
Процедура ОценитьРаботуСервиса(Команда)
	
	СтрокаИД = "";
	МассивЭлементов = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, Пометка", 1, Истина));
	Для Каждого СтрокаДокумента Из МассивЭлементов Цикл
		СтрокаИД = СтрокаИД + СтрокаДокумента.ДокументИД + ";";
	КонецЦикла;
	Если СтрокаИД = "" И Элементы.ДеревоДокументов.ТекущиеДанные <> Неопределено Тогда
		СтрокаИД = Элементы.ДеревоДокументов.ТекущиеДанные.ДокументИД + ";";
	КонецЕсли;
	ОтправитьЛайк(СтрокаИД, ЭтаФорма.УникальныйИдентификатор);

КонецПроцедуры

// Процедура - обработчик команды формы "Перераспознать"
//
&НаКлиенте
Процедура Перераспознать(Команда)
	
	КоличествоПомеченныхКПерераспознаванию = ТаблицаДанных.НайтиСтроки(Новый Структура("Пометка, ЭтоСделка, СтатусРаспознавания", Истина, 1, 3)).Количество();

	ДокументыДерева = ДеревоДокументов.ПолучитьЭлементы();
	ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	КоличествоСтраницПервогоДокумента = 0;
	МассивСтрокДляУдаления = Новый Массив;
	Если КоличествоПомеченныхКПерераспознаванию > 0 Тогда
		Для Каждого СтрокаДокумента Из ДокументыДерева Цикл
			Если СтрокаДокумента.Пометка И СтрокаДокумента.Статус = "Перераспознайте документ (изменен шаблона, состав или порядок страниц)" Тогда
				МассивЭлементов = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", СтрокаДокумента.ДокументИД, 1));
				Если ПерераспознатьДокумент(СтрокаДокумента.ДокументИД, МассивЭлементов[0].ТипРаспознан) Тогда
					СтрокаДокумента.Статус = "Выполняется повторное распознавание";
					СтрокаДокумента.ДеревоКомментарий = СтрокаДокумента.Статус;
					 МассивЭлементов[0].СтатусОбработки = СтрокаДокумента.Статус;
					СтрокаДокумента.ГотовКЗагрузке = Ложь;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТекущиеДанные <> Неопределено Тогда 
		МассивЭлементов = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ТекущиеДанные.ДокументИД, 1));
		Если ПерераспознатьДокумент(ТекущиеДанные.ДокументИД, МассивЭлементов[0].ТипРаспознан) Тогда
			ТекущиеДанные.Статус = "Выполняется повторное распознавание";
			ТекущиеДанные.ДеревоКомментарий = ТекущиеДанные.Статус;
			МассивЭлементов[0].СтатусОбработки = ТекущиеДанные.Статус;
			ТекущиеДанные.ГотовКЗагрузке = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаДокумента Из МассивСтрокДляУдаления Цикл
		ДокументыДерева.Удалить(СтрокаДокумента);
	КонецЦикла;	

	ИзменитьПометку(Ложь);

КонецПроцедуры

// Проверка документов отправленных на перераспознавание
//
&НаКлиенте
Процедура ПроверитьПерераспознаваемые()
	
	МассивПерераспознаваемыхДокументов = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, СтатусРаспознавания", 1, 2));
	Если МассивПерераспознаваемыхДокументов.Количество() > 0 Тогда
		ДокументыДерева = ДеревоДокументов.ПолучитьЭлементы();
		//МасассивСтрокДляУдаления = Новый Массив;
		Для Каждого СтрокаТаблицаДанных Из МассивПерераспознаваемыхДокументов Цикл
			СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocuments/GetDocumentProperties?DocumentID=" + СтрокаТаблицаДанных.ДокументИД;
			ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса);       
			Если ПараметрыОтвета.КодОтвета = 200 И ПараметрыОтвета.СтруктураОтвета.Свойство("RecognitionStatus") И ПараметрыОтвета.СтруктураОтвета.RecognitionStatus <> "2" Тогда
				СтруктураСтрокиТаблицыДанных = ПараметрыОтвета.СтруктураОтвета; 
				ПреобразованныеДанные = ПреобразоватьСтруктуру(СтруктураСтрокиТаблицыДанных);
				СтрокаТаблицаДанных.Организация = СтруктураСтрокиТаблицыДанных.Organization;
				СтрокаТаблицаДанных.Контрагент = СтруктураСтрокиТаблицыДанных.Contractor;
				СтрокаТаблицаДанных.Комментарий = СтруктураСтрокиТаблицыДанных.Comment;
				СтрокаТаблицаДанных.Номер = СтруктураСтрокиТаблицыДанных.DocumentNumber;
				СтрокаТаблицаДанных.Тип	= СтруктураСтрокиТаблицыДанных.DocumentType;
				СтрокаТаблицаДанных.ТипФайла        = СтруктураСтрокиТаблицыДанных.DocumentFileExtension;
				СтрокаТаблицаДанных.ТипРаспознан = СтруктураСтрокиТаблицыДанных.RecognitionType;
				СтрокаТаблицаДанных.СтатусРаспознавания = ПреобразованныеДанные.СтатусРаспознавания;
				СтрокаТаблицаДанных.Атрибутирован = ПреобразованныеДанные.Атрибутирован;
				СтрокаТаблицаДанных.Исходящий = ПреобразованныеДанные.Исходящий;
				СтрокаТаблицаДанных.СтараяВерсия = ПреобразованныеДанные.СтараяВерсия;
				СтрокаТаблицаДанных.Дата = ПреобразованныеДанные.Дата;
				СтрокаТаблицаДанных.ДатаСоздания = ПреобразованныеДанные.ДатаСоздания;
				СтрокаТаблицаДанных.Сумма = ПреобразованныеДанные.Сумма;
				СтрокаТаблицаДанных.Новый = ПреобразованныеДанные.Новый;
				
				СтруктураТипа = Неопределено;
				Если СтрокаТаблицаДанных.ТипРаспознан <> "" Тогда
					СтруктураТиповДокументов.Свойство(ВРЕГ(СтрокаТаблицаДанных.ТипРаспознан), СтруктураТипа);
				КонецЕсли;
				Если СтруктураТипа = Неопределено Тогда
					ГотовКЗагрузке = Ложь;
					Статус = "Документ не распознавался";
				Иначе
					ГотовКЗагрузке = СтруктураТипа.ГотовКЗагрузке;
				КонецЕсли;
				
				Если СтрокаТаблицаДанных.СсылкаИД <> "" Тогда
					СсылкаДокумент = ПолучитьСсылкуПоИД(СтрокаТаблицаДанных.СсылкаИД, СтрокаТаблицаДанных.СсылкаТип); 
				Иначе
					СсылкаДокумент = "";
				КонецЕсли;
				
				Если СтрокаТаблицаДанных.СтатусРаспознавания = 0 Тогда
					Если ГотовКЗагрузке Тогда
						Если СсылкаДокумент <> "" Тогда
							Статус = "Загружен";
							ГотовКЗагрузке = Ложь;
						Иначе
							Статус = "Готов к загрузке";
						КонецЕсли;
					ИначеЕсли СтрокаТаблицаДанных.ТипРаспознан = "UNDEF" Тогда
						Статус = "Попробуйте выбрать тип документа и выполнить повторное распознавание";	
					ИначеЕсли СтрокаТаблицаДанных.ТипРаспознан = "Error" Тогда
						Статус = "Ошибка при распознавании: " + СтрокаТаблицаДанных.Комментарий;	
					Иначе
						Статус = "Документ нельзя загрузить в данную учетную систему";	
					КонецЕсли;
				Иначе
					ГотовКЗагрузке = Ложь;
					Если СтрокаТаблицаДанных.СтатусРаспознавания = 2 Тогда  
						Статус = "Выполняется повторное распознавание";
					ИначеЕсли СтрокаТаблицаДанных.СтатусРаспознавания = 5 Тогда  
						Статус = "Страницы документа были перемещены или удалены";
					Иначе  
						Статус = "Перераспознайте документ (изменен шаблона, состав или порядок страниц)";
					КонецЕсли;
				КонецЕсли;
				СтрокаТаблицаДанных.Пометка = Ложь;
				
				СтрокаТаблицаДанных.ГотовКЗагрузке = ГотовКЗагрузке;

				СтрокаДокумента = Неопределено;
				Для Каждого Строка Из ДокументыДерева Цикл
					Если Строка.ДокументИД = СтрокаТаблицаДанных.ДокументИД Тогда
						СтрокаДокумента	= Строка;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				//Если (Показывать = "Готовые" И НЕ ГотовКЗагрузке) 
				//	ИЛИ (Показывать = "Загруженные" И Статус <> "Загружен")
				//	ИЛИ Показывать = "НеГотовые" И (ГотовКЗагрузке ИЛИ Статус = "Загружен")Тогда
				//	
				//	Если СтрокаДокумента <> Неопределено Тогда 
				//		МасассивСтрокДляУдаления.Добавить(СтрокаДокумента);
				//	КонецЕсли;
				//	Продолжить;
				//	
				//КонецЕсли;
				Если СтрокаДокумента = Неопределено Тогда 
					СтрокаДокумента = ДокументыДерева.Вставить(0);
				КонецЕсли;
				
				Шаблон = Элементы.Шаблон.СписокВыбора.НайтиПоЗначению(СтрокаТаблицаДанных.ТипРаспознан);
				
				СтрокаДокумента.Наименование =  СформироватьНаименованиеЭлементаАрхива(СтрокаТаблицаДанных.Организация, СтрокаТаблицаДанных.Тип, СтрокаТаблицаДанных.Номер, СтрокаТаблицаДанных.Дата, СтрокаТаблицаДанных.Контрагент, СтрокаТаблицаДанных.Сумма);
				СтрокаДокумента.ГотовКЗагрузке = ГотовКЗагрузке;
				СтрокаДокумента.Статус = Статус;
				Если Найти(Статус, "Перераспознайте документ") > 0 Тогда
					СтрокаТаблицаДанных.ПрисвоенСтатусКПерераспознаванию = Истина;
					СтрокаТаблицаДанных.КПерераспознаванию = Истина;
					
				Иначе
					СтрокаТаблицаДанных.ПрисвоенСтатусКПерераспознаванию = Ложь;
					СтрокаТаблицаДанных.КПерераспознаванию = Ложь;

				КонецЕсли;
				СтрокаДокумента.Шаблон = ?(Шаблон = Неопределено, "Не определен", Шаблон.Представление);
				СтрокаДокумента.Пометка = СтрокаТаблицаДанных.Пометка;
				СтрокаДокумента.Новый = СтрокаТаблицаДанных.Новый;
				Если СтрокаДокумента.Статус <> "Готов к загрузке" Тогда
					СтрокаДокумента.ДеревоКомментарий = СтрокаДокумента.Статус;
				КонецЕсли;
				СтрокаТаблицаДанных.СтатусОбработки = СтрокаДокумента.Статус;
				
				ОбновитьДерево = Истина;
			ИначеЕсли Не ПараметрыОтвета.КодОтвета = 200 Тогда
				
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = "Ошибка получения данных документа: " + ПараметрыОтвета.СтруктураОтвета.Description;
				СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
				СообщениеПользователю.Сообщить();
				
			КонецЕсли;
			
		КонецЦикла;
		//Для Каждого СтрокаДокумента Из МасассивСтрокДляУдаления Цикл
		//	ДокументыДерева.Удалить(СтрокаДокумента);
		//КонецЦикла;
		//ИзменитьДоступностьКнопок();
		Если ОбновитьДерево = Истина Тогда
			ЗаполнитьДеревоДокументовВызовСервера();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды формы "ПометитьКакНовый"
//
&НаКлиенте
Процедура ПометитьКакНовый(Команда)
	
	МассивВыбранныхСтрок = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, Пометка, Новый", 1, Истина, Ложь));
	Если МассивВыбранныхСтрок.Количество() = 0 Тогда
		МассивВыбранныхСтрок = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка, Новый", Элементы.ДеревоДокументов.ТекущиеДанные.ДокументИД, 1, Ложь));
	КонецЕсли;
	
	Для Каждого СтрокаДокумента Из МассивВыбранныхСтрок Цикл
		СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocuments/SetDocumentProperties";
		ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", Новый Структура("DocumentID, Received", СтрокаДокумента.ДокументИД, "False"));
		Если ПараметрыОтвета.КодОтвета = 200 Тогда
			СтрокаДокумента.Новый = Истина; 
			СтрокаДокумента.Пометка = Ложь;
			СтрокиДерева = ДеревоДокументов.ПолучитьЭлементы();
			Для Каждого СтрокаДерева Из СтрокиДерева Цикл
				Если СтрокаДерева.ДокументИД = СтрокаДокумента.ДокументИД Тогда
					 СтрокаДерева.Новый = Истина;
					 СтрокаДерева.Пометка = Ложь;
					 Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ТекстОшибки = "Ошибка при установке признака получения документа: " + ПараметрыОтвета.СтруктураОтвета.Description;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьДеревоДокументовВызовСервера();

КонецПроцедуры


// Процедура - обработчик команды формы "ПометитьКакНовый"
//
&НаКлиенте
Процедура ПометитьКакНеНовый(Команда)
	
	МассивВыбранныхСтрок = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, Пометка, Новый", 1, Истина, Истина));
	Если МассивВыбранныхСтрок.Количество() = 0 Тогда
		МассивВыбранныхСтрок = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка, Новый", Элементы.ДеревоДокументов.ТекущиеДанные.ДокументИД, 1, Истина));
	КонецЕсли;
	
	Для Каждого СтрокаДокумента Из МассивВыбранныхСтрок Цикл
		СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocuments/SetDocumentProperties";
		ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", Новый Структура("DocumentID, Received", СтрокаДокумента.ДокументИД, "True"));
		Если ПараметрыОтвета.КодОтвета = 200 Тогда
			СтрокаДокумента.Новый = Ложь; 
			СтрокаДокумента.Пометка = Ложь;
			СтрокиДерева = ДеревоДокументов.ПолучитьЭлементы();
			Для Каждого СтрокаДерева Из СтрокиДерева Цикл
				Если СтрокаДерева.ДокументИД = СтрокаДокумента.ДокументИД Тогда
					 СтрокаДерева.Новый = Ложь;
					 СтрокаДерева.Пометка = Ложь;
					 Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ТекстОшибки = "Ошибка при установке признака получения документа: " + ПараметрыОтвета.СтруктураОтвета.Description;
		КонецЕсли;
	КонецЦикла;

	ЗаполнитьДеревоДокументовВызовСервера();
	
КонецПроцедуры


// Помечает как неновые недоступные к получению документы
//
&НаКлиенте
Процедура ПометитьНераспознанныеКакНеНовые() 
	
	МассивВыбранныхСтрок = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, Новый, ТипРаспознан", 1, Истина, "UNDEF"));
	Для Каждого СтрокаДокумента Из МассивВыбранныхСтрок Цикл
		СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocuments/SetDocumentProperties";
		ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", Новый Структура("DocumentID, Received, АutoloadingStatus", СтрокаДокумента.ДокументИД, "True", "4"));
		Если НЕ ПараметрыОтвета.КодОтвета = 200 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;                             
	
	МассивВыбранныхСтрок = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, Новый, ТипРаспознан", 1, Истина, "Error"));
	Для Каждого СтрокаДокумента Из МассивВыбранныхСтрок Цикл
		СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocuments/SetDocumentProperties";
		ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", Новый Структура("DocumentID, Received, АutoloadingStatus", СтрокаДокумента.ДокументИД, "True", "4"));
		Если НЕ ПараметрыОтвета.КодОтвета = 200 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Функция УдалитьДокументСписка(ДокументИД)
	
	МассивЭлементов = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ДокументИД, 1));
	Документ = МассивЭлементов[0];
	Если Документ.Атрибутирован И Не Показывать = "Архив" Тогда
		СообщениеТекст ="Документ : " + Документ.Наименование + " не был удален, т.к. помещен в архив." + Символы.ПС + "Удаление из архива возможно из списка документов в архиве.";
	Иначе
		СтруктураПараметров = Новый Структура("DocumentID", ДокументИД);
		СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocuments/Delete";
		ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", СтруктураПараметров);          
		Если ПараметрыОтвета.КодОтвета = 200 Тогда
			МассивСтрокДокумента = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД", ДокументИД));
			Для Каждого СтрокаТаблицыДанных Из МассивСтрокДокумента Цикл
				Если СтрокаТаблицыДанных.СтатусОбработки = "В обработке" Тогда
					Оповестить("ЗакрытьФормуДокумента", Новый Структура("ДокументИД", ДокументИД));
				КонецЕсли;
				ТаблицаДанных.Удалить(СтрокаТаблицыДанных);	
			КонецЦикла;
			
			Возврат Истина;
			
		Иначе
			СообщениеТекст = "Ошибка при удалении документа: " + ПараметрыОтвета.СтруктураОтвета.Description;		
		КонецЕсли;
	КонецЕсли;
	
	СообщениеПользователю = Новый СообщениеПользователю;
	СообщениеПользователю.Текст = СообщениеТекст;
	СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
	СообщениеПользователю.Сообщить();
	
	Возврат Ложь;

КонецФункции

&НаКлиенте
Функция ПерераспознатьДокумент(ДокументИД, Шаблон)
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();

	СтруктураПараметров = Новый Структура("DocumentID, TemplateName", ДокументИД, Шаблон);
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocuments/RepeatRecognition";
	ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", СтруктураПараметров);   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		
		МассивЭлементов = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ДокументИД, 1));
		МассивЭлементов[0].СтатусРаспознавания = 2;
		МассивЭлементов[0].ГотовКЗагрузке = Ложь;
		
		// (Статистика 
		ВремяВыполнения = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала)/1000; 
		НоваяСтрокаСтатистики                       = ТЗПоказателиРаботы.Добавить();
		НоваяСтрокаСтатистики.DateTime              = ТекущаяДата();
		НоваяСтрокаСтатистики.EventName             = "Перераспознать документ";
		//Ресурсы
		НоваяСтрокаСтатистики.User1C                = ПользовательИнфБазы;
		НоваяСтрокаСтатистики.ConfigurationVersion  = ВерсияКонфигурации;
		НоваяСтрокаСтатистики.ConfigurationName     = МетаданныеИмя;
		НоваяСтрокаСтатистики.ClientName            = "ESDL";
		НоваяСтрокаСтатистики.ClientVersion         = ВерсияПрограммы;
		НоваяСтрокаСтатистики.AccauntDataBaseID		= ИДБазыДанныхПользователя;
		//Реквизиты
		НоваяСтрокаСтатистики.Runtime               = ВремяВыполнения*1000;
		НоваяСтрокаСтатистики.StatisticalDataName0  = "ДокументИД";
		НоваяСтрокаСтатистики.StatisticalDataValue0 = ДокументИД;
		НоваяСтрокаСтатистики.StatisticalDataName1  = "Был распознан как";
		НоваяСтрокаСтатистики.StatisticalDataValue1 = МассивЭлементов[0].ТипРаспознанНачальный;
		НоваяСтрокаСтатистики.StatisticalDataName2  = "Применен шаблон";
		НоваяСтрокаСтатистики.StatisticalDataValue2 = Шаблон;
		// Статистика)
		
		Возврат Истина;
		
	Иначе
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Ошибка при повторном распознавании: " + ПараметрыОтвета.СтруктураОтвета.Description;
		СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
		СообщениеПользователю.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// функция собирает название документа или сделки на основе переданных параметров
//
// параметры:
//	Организация, тип "строка" - (передаётся по значению) строка с наименованием организации
//	Тип, тип "строка" - (передаётся по значению) строка с типом
//	Вид, тип "строка" - (передаётся по значению) строка с видом
//	Номер, тип "строка" - (передаётся по значению) строка с номер
//	Дата, тип "строка" - (передаётся по значению) строка с датой
//	Контрагент, тип "строка" - (передаётся по значению) строка с наименованием контрагента
//	Сумма, тип "строка" - (передаётся по значению) строка с суммой
//
// возвращаемое значение: строка с собранным названием
//
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНаименованиеЭлементаАрхива(знач ЭлементОрганизация = "", знач ЭлементВид = "", знач ЭлементНомер = "", знач ЭлементДата = "", знач ЭлементКонтрагент = "", знач ЭлементСумма = "") //Дубль
	
	Разделитель = ",_";
	
	ЭлементОрганизация = Лев(ЭлементОрганизация, 30) + Разделитель;
	ЭлементВид         = ЭлементВид                                 + Разделитель;
	ЭлементНомер 		= ?(ПустаяСтрока(ЭлементНомер), "", "№_" + Лев(ЭлементНомер, 15)   + Разделитель); // от сделки номер приходит как пустая строка
	ЭлементДата        = ?(ЭлементДата <> '00010101', Лев(ЭлементДата, 10), "")  + Разделитель;
	ЭлементКонтрагент  = Лев(ЭлементКонтрагент, 30) + Разделитель;
	ЭлементСумма       = Формат(ЭлементСумма, "ЧДЦ=2; ЧГ=0");
		
	Наименование = ЭлементОрганизация + ЭлементВид + ЭлементНомер + ЭлементДата + ЭлементКонтрагент + ЭлементСумма;
	
	Наименование = СтрЗаменить(Наименование, ":", "");
	Наименование = СтрЗаменить(Наименование, "|", ""); 
	Наименование = СтрЗаменить(Наименование, "/", ""); 
	Наименование = СтрЗаменить(Наименование, "\", ""); 
	Наименование = СтрЗаменить(Наименование, "?", ""); 
	Наименование = СтрЗаменить(Наименование, "<", ""); 
	Наименование = СтрЗаменить(Наименование, ">", ""); 
	Наименование = СтрЗаменить(Наименование, "*", ""); 
	Наименование = СтрЗаменить(Наименование, """", ""); 

	Возврат Наименование;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПреобразоватьСтруктуру(СтруктураСтрокиТаблицыДанных, СериализаторXDTO = Ложь)
	
	ПреобразованныеДанные = Новый Структура("Исходящий, СтараяВерсия, Дата, ДатаСоздания, СтраницаНомер, Сумма, ЭтоСделка, СтатусРаспознавания, Новый, ПлохоеКачествоИсходныхФайлов, Атрибутирован");
	
	Если СериализаторXDTO Тогда
		ПреобразованныеДанные.СтатусРаспознавания = СтруктураСтрокиТаблицыДанных.RecognitionStatus;
		ПреобразованныеДанные.Исходящий =  СтруктураСтрокиТаблицыДанных.Emanating;	
		ПреобразованныеДанные.СтараяВерсия =  СтруктураСтрокиТаблицыДанных.RecognitionOld;
		ПреобразованныеДанные.Новый = ?(СтруктураСтрокиТаблицыДанных.Received = Неопределено, Неопределено, НЕ СтруктураСтрокиТаблицыДанных.Received);	
		ПреобразованныеДанные.Дата = СтруктураСтрокиТаблицыДанных.DocumentDate;
		ПреобразованныеДанные.ДатаСоздания = СтруктураСтрокиТаблицыДанных.CreateData;
		Если СтруктураСтрокиТаблицыДанных.Свойство("PageID") И СтруктураСтрокиТаблицыДанных.PageID <> "" И СтруктураСтрокиТаблицыДанных.PageID <> Неопределено Тогда
			ПреобразованныеДанные.СтраницаНомер = СтруктураСтрокиТаблицыДанных.PageNumber;
			ПреобразованныеДанные.ЭтоСделка	= 2;
		Иначе 
			ПреобразованныеДанные.Сумма = СтруктураСтрокиТаблицыДанных.Sum;
			ПреобразованныеДанные.ЭтоСделка = 1;
		КонецЕсли;
		Если СтруктураСтрокиТаблицыДанных.Свойство("BadQualitySourceFiles") Тогда
			ПреобразованныеДанные.ПлохоеКачествоИсходныхФайлов = СтруктураСтрокиТаблицыДанных.BadQualitySourceFiles;	
		Иначе
			ПреобразованныеДанные.ПлохоеКачествоИсходныхФайлов = Ложь;	
		КонецЕсли;
		ПреобразованныеДанные.Атрибутирован = (СтруктураСтрокиТаблицыДанных.Status = 1);
	Иначе
		ПреобразованныеДанные.Атрибутирован = (СтруктураСтрокиТаблицыДанных.Status = "1");
		Если СтруктураСтрокиТаблицыДанных.RecognitionStatus <> "" Тогда
			ПреобразованныеДанные.СтатусРаспознавания = СтруктураСтрокиТаблицыДанных.RecognitionStatus;
		Иначе
			ПреобразованныеДанные.СтатусРаспознавания = 0;
		КонецЕсли;
		Если НЕ СтруктураСтрокиТаблицыДанных.Emanating = "" Тогда
			ПреобразованныеДанные.Исходящий =  XMLЗначение(Тип("Булево"), СтруктураСтрокиТаблицыДанных.Emanating);	
		КонецЕсли;
		Если НЕ СтруктураСтрокиТаблицыДанных.RecognitionOld = "" Тогда
			ПреобразованныеДанные.СтараяВерсия =  XMLЗначение(Тип("Булево"), СтруктураСтрокиТаблицыДанных.RecognitionOld);	
		КонецЕсли;
		Если НЕ СтруктураСтрокиТаблицыДанных.Received = "" Тогда
			ПреобразованныеДанные.Новый = НЕ XMLЗначение(Тип("Булево"), СтруктураСтрокиТаблицыДанных.Received);	
		КонецЕсли;
		Если СтруктураСтрокиТаблицыДанных.DocumentDate = "" ИЛИ Найти(СтруктураСтрокиТаблицыДанных.DocumentDate, "0001-01-01T00:00:00") <> 0 Тогда
			ПреобразованныеДанные.Дата = '00010101000000';
		Иначе
			ПреобразованныеДанные.Дата = XMLЗначение(Тип("Дата"), СтруктураСтрокиТаблицыДанных.DocumentDate);
		КонецЕсли;
		Если СтруктураСтрокиТаблицыДанных.CreateData = "" ИЛИ Найти(СтруктураСтрокиТаблицыДанных.CreateData, "0001-01-01T00:00:00") <> 0 Тогда
			ПреобразованныеДанные.ДатаСоздания = '00010101000000';
		Иначе
			ПреобразованныеДанные.ДатаСоздания = XMLЗначение(Тип("Дата"), СтруктураСтрокиТаблицыДанных.CreateData);
		КонецЕсли;
		Если СтруктураСтрокиТаблицыДанных.Свойство("PageID") И СтруктураСтрокиТаблицыДанных.PageID <> "" Тогда
			ПреобразованныеДанные.СтраницаНомер = XMLЗначение(Тип("Число"), СтруктураСтрокиТаблицыДанных.PageNumber);
			ПреобразованныеДанные.ЭтоСделка		= 2;
		Иначе 
			ПреобразованныеДанные.Сумма = XMLЗначение(Тип("Число"), СтруктураСтрокиТаблицыДанных.Sum);
			ПреобразованныеДанные.ЭтоСделка = 1;
		КонецЕсли;
		Если СтруктураСтрокиТаблицыДанных.Свойство("BadQualitySourceFiles") И НЕ СтруктураСтрокиТаблицыДанных.BadQualitySourceFiles = "" Тогда
			ПреобразованныеДанные.ПлохоеКачествоИсходныхФайлов = XMLЗначение(Тип("Булево"), СтруктураСтрокиТаблицыДанных.BadQualitySourceFiles);	
		Иначе
			ПреобразованныеДанные.ПлохоеКачествоИсходныхФайлов = Ложь;	
		КонецЕсли;
	КонецЕсли;

	Возврат ПреобразованныеДанные;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьПометку(Значение)   
	
	ДокументыДерева = ДеревоДокументов.ПолучитьЭлементы();
	Для Каждого СтрокаДокумента Из ДокументыДерева Цикл
		Если НЕ (СтрокаДокумента.СтатусСтроки = 1 ИЛИ СтрокаДокумента.СтатусСтроки = 2) Тогда
			МассивЭлементов = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", СтрокаДокумента.ДокументИД, 1));
			СтрокаДокумента.Пометка = Значение;
			МассивЭлементов[0].Пометка = Значение; 
		КонецЕсли;
	КонецЦикла;
	ИзменитьДоступностьКнопок();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьКнопок()  //!!!
	
	Элементы.ПоказатьРеквизитыДокумента.Видимость = Элементы.КнопкиАрхива.Видимость;
	Если Не Элементы.КнопкиАрхива.Видимость Тогда
		Элементы.Атрибуты.Видимость = Ложь;
	КонецЕсли;

	КоличествоПомеченныхКПерераспознаванию = ТаблицаДанных.НайтиСтроки(Новый Структура("Пометка, ЭтоСделка, СтатусРаспознавания", Истина, 1, 3)).Количество();
	Если НЕ Показывать = "Загруженные" Тогда
		Элементы.Перераспознать.Видимость = Истина;
		Элементы.Перераспознать.Доступность = КоличествоПомеченныхКПерераспознаванию > 0 ИЛИ 
		(Элементы.ДеревоДокументов.ТекущаяСтрока <> Неопределено И Элементы.ДеревоДокументов.ТекущиеДанные <> Неопределено И Элементы.ДеревоДокументов.ТекущиеДанные.Статус = "Перераспознайте документ (изменен шаблона, состав или порядок страниц)");
	Иначе
		Элементы.Перераспознать.Видимость = Ложь;
	КонецЕсли;
	КоличествоПомеченныхДоступныхКПолучению = ТаблицаДанных.НайтиСтроки(Новый Структура("Пометка, ГотовКЗагрузке, ЭтоСделка", Истина, Истина, 1)).Количество();
	Если Показывать = "Все" ИЛИ Показывать = "Готовые" Тогда
		Элементы.ПолучитьВыбранные.Видимость = Истина;
		Элементы.Загрузить.Видимость = Истина;
		Элементы.ПолучитьВыбранные.Доступность = КоличествоПомеченныхДоступныхКПолучению > 0 ИЛИ 
		(Элементы.ДеревоДокументов.ТекущаяСтрока <> Неопределено И Элементы.ДеревоДокументов.ТекущиеДанные <> Неопределено И Элементы.ДеревоДокументов.ТекущиеДанные.Статус = "Готов к загрузке");
		Элементы.Загрузить.Доступность= Элементы.ПолучитьВыбранные.Доступность;          
	Иначе
	    Элементы.ПолучитьВыбранные.Видимость = Ложь;
		Элементы.Загрузить.Видимость = Ложь;
	КонецЕсли;
	КоличествоДокументов = ДеревоДокументов.ПолучитьЭлементы().Количество();
	
	КоличествоПомеченных = ТаблицаДанных.НайтиСтроки(Новый Структура("Пометка, ЭтоСделка", Истина, 1)).Количество();
	Элементы.Удалить.Доступность = КоличествоПомеченных > 0 ИЛИ (Элементы.ДеревоДокументов.ТекущаяСтрока <> Неопределено И КоличествоДокументов > 0);
	Элементы.ВывестиСписокДокументов.Доступность = КоличествоПомеченных > 0;
	Элементы.ГруппаПометить.Доступность = Элементы.Удалить.Доступность;
	Если НЕ Элементы.ГруппаПометить.Доступность Тогда
		Элементы.ГруппаПометить.ЦветТекстаЗаголовка = Новый Цвет(140, 140, 140);	
	Иначе
		Элементы.ГруппаПометить.ЦветТекстаЗаголовка = Новый Цвет(51, 51, 51);
	КонецЕсли;
	//Элементы.ПометитьКак.Доступность = Элементы.Удалить.Доступность;
	//Элементы.ПометитьКакНеНовые.Доступность = Элементы.Удалить.Доступность;
	Элементы.ПоказатьРеквизитыДокумента.Доступность = Элементы.ДеревоДокументов.ТекущаяСтрока <> Неопределено;
	Элементы.ОтправитьДокументНаТестирование.Доступность = Элементы.Удалить.Доступность;
	Элементы.СохранитьДокумент.Доступность = Элементы.Удалить.Доступность;
	Если НЕ ЭтоВебКлиент Тогда
		Элементы.ПечататьДокументы.Доступность = Элементы.Удалить.Доступность;
		Элементы.ОткрытьФайл.Доступность = Элементы.Удалить.Доступность;
	Иначе
		Элементы.ПечататьДокументы.Видимость = Ложь;
	КонецЕсли;

	Элементы.КнопкаКопироватьВБуфер.Доступность = (Элементы.ДеревоДокументов.ТекущаяСтрока <> Неопределено И КоличествоДокументов > 0);

	Если ТекущаяСтраницаСписка < 2 Тогда
		Элементы.ПредыдущаяСтраницаСписка.Доступность = Ложь;
	Иначе
		Элементы.ПредыдущаяСтраницаСписка.Доступность = Истина;
	КонецЕсли;
	Если ТекущаяСтраницаСписка*КолДокСтраница > КоличествоДокументовВСпискеВсего Тогда
		Элементы.СледующаяСтраницаСписка.Доступность = Ложь;
	Иначе
		Элементы.СледующаяСтраницаСписка.Доступность = Истина;
	КонецЕсли;
	
	Элементы.ТекущаяСтраницаСписка.МаксимальноеЗначение = Окр(КоличествоДокументовВСпискеВсего/КолДокСтраница) + 1;
	
КонецПроцедуры

// процедура получает с сервера изображения страницы по идентификатору
//
// параметры:
//	СтраницаИД, тип "строка" - идентификатор страницы
//	Превью, тип "булево" - признак получения изображения страницы либо её уменьшеной копии (превью)
//
&НаКлиенте
Функция ПолучитьСтраницуДокумента(СтраницаИД, Превью = Истина)
	
	ОписаниеОшибки = "";
	Если Превью Тогда
		СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocumentPages/GetPagePreview?PageID=" + СтраницаИД;	
	Иначе
		СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocumentPages/GetPage?PageID=" + СтраницаИД;
	КонецЕсли;

	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах(); 

	ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса,,,,Истина);
	
	ВремяВыполнения = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала)/1000; 
	//СтруктураПараметров = Новый Структура("CloudServiceID, AccountUserID, PerformanceCounterID, PerformanceCounterValue", "ESDL", ESDLИДПользователя, "esdl.internal.AccountEDocumentPages.TimeObtaining", ВремяВыполнения);
	//СтрокаЗапроса = "/adl42/hs/api_v1/CSPerformanceCounters/SetPerformanceValue";
	//ПараметрыОтветаПоказатели = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", СтруктураПараметров);   
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.ДвоичныеДанные;  
	Иначе
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Ошибка при получении изображения страницы: "+ПараметрыОтвета.СтруктураОтвета.Description;
		СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
		СообщениеПользователю.Сообщить();
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// процедура управления отображением кнопок сдвига страниц
//
// параметры:
//
&НаКлиенте
Процедура ОтображениеКнопокСтраниц()
	
	//Элементы.Вверх.Доступность = Ложь;	
	//Элементы.Вниз.Доступность = Ложь;	
	//Элементы.УдалитьСтраницу.Доступность = Ложь;	 
	//СтрокаДерева = Элементы.ДеревоДокументов.ТекущиеДанные;
	//Если СтрокаДерева.ЭтоСделка = 2 Тогда
	//	СтраницыДокумента = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", СтрокаДерева.ДокументИД, 2));
	//	Элементы.УдалитьСтраницу.Доступность = Истина;
	//	Если СтраницыДокумента.Количество() > 1 Тогда
	//		Если СтрокаДерева.Наименование = "Страница 1" Тогда
	//			Элементы.Вниз.Доступность = Истина;
	//		ИначеЕсли СтрокаДерева.Наименование = "Страница " + СтраницыДокумента.Количество() Тогда
	//			Элементы.Вверх.Доступность = Истина;
	//		Иначе
	//			Элементы.Вниз.Доступность = Истина;
	//			Элементы.Вверх.Доступность = Истина;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
		
КонецПроцедуры

// функция выполняет перенос страницы из документа в документ
//
&НаКлиенте
Функция ПеренестиСтраницуВДокумент(СтрокаСтраницы, ПринимающаяСтрока)
	
	СтруктураПараметров = Новый Структура("DocumentID, PageID", ПринимающаяСтрока.ДокументИД, СтрокаСтраницы.СтраницаИД);
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocumentPages/Move";
	ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", СтруктураПараметров);
	Если ПараметрыОтвета.КодОтвета <> 200 Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Добавление страницы: " + ПараметрыОтвета.СтруктураОтвета.Description;
		СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
		СообщениеПользователю.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	СтрокиДокумента = ПринимающаяСтрока.ПолучитьЭлементы();
	ПринимающийДокументИД = ПринимающаяСтрока.ДокументИД;
	СтарыйНомерСтраницы = СтрокаСтраницы.СтраницаНомер;
	//Если СтрокиДокумента.Количество() = 0 Тогда
	//	НовыйНомерСтраницы = 1;
	//Иначе
	//	НовыйНомерСтраницы = Число(СтрЗаменить(СтрокиДокумента[СтрокиДокумента.Количество()-1].Наименование, "Страница ", "")) + 1;
	//КонецЕсли;
	НовыйНомерСтраницы = СтрокиДокумента.Количество() + 1;
	НоваяСтрока = СтрокиДокумента.Добавить();
	НоваяСтрока.Наименование = "Страница " + НовыйНомерСтраницы; 
	НоваяСтрока.ДокументИД = ПринимающийДокументИД;
	НоваяСтрока.СтраницаИД = СтрокаСтраницы.СтраницаИД;
	НоваяСтрока.ЭтоСделка = СтрокаСтраницы.ЭтоСделка;
	
	ПеретаскиваемыйДокументИД = СтрокаСтраницы.ДокументИД;

	СтрокаСтраницы.ДокументИД = ПринимающийДокументИД;
	СтрокаСтраницы.СтраницаНомер = НовыйНомерСтраницы;
	
	
	МассивЭлементов = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ПринимающийДокументИД, 1));
	МассивЭлементов[0].ГотовКЗагрузке = Ложь;
	МассивЭлементов[0].СтатусРаспознавания = 3;
	СтрокаСтраницы.ДатаСоздания = МассивЭлементов[0].ДатаСоздания;
	
	Если Не (Показывать = "Все" ИЛИ Показывать = "НеГотовые") Тогда
		ДокументыДерево = ДеревоДокументов.ПолучитьЭлементы();
		ДокументыДерево.Удалить(ПринимающаяСтрока);
	Иначе
		ПринимающаяСтрока.Статус = "Перераспознайте документ (изменен шаблона, состав или порядок страниц)";
		ПринимающаяСтрока.ДеревоКомментарий = ПринимающаяСтрока.Статус;
		ПринимающаяСтрока.ГотовКЗагрузке = Ложь;
	КонецЕсли;

	СтрокиДеревоДокументов = ДеревоДокументов.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из СтрокиДеревоДокументов Цикл
		Если СтрокаДерева.ДокументИД = ПеретаскиваемыйДокументИД Тогда
			СтараяСтрокаДокумента = СтрокаДерева;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВыполнитьИзмененияПослеУдаленияСтраницыДокумента(СтараяСтрокаДокумента, СтарыйНомерСтраницы);
	
	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура ВыполнитьИзмененияПослеУдаленияСтраницыДокумента(СтрокаДокумента, НомерУдаленнойСтраницы)
	
	СтарыеСтрокиДокумента = СтрокаДокумента.ПолучитьЭлементы();
	СтарыеСтрокиДокумента.Очистить();
	МассивЭлементов = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", СтрокаДокумента.ДокументИД, 2));
	Для Каждого Страница Из МассивЭлементов Цикл
		Если Страница.СтраницаНомер > НомерУдаленнойСтраницы Тогда
			Страница.СтраницаНомер = Страница.СтраницаНомер - 1;
		КонецЕсли;
	КонецЦикла;
	КоличествоСтраниц = МассивЭлементов.Количество();
	Для к = 1 по КоличествоСтраниц Цикл
		МассивЭлементов = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, СтраницаНомер", СтрокаДокумента.ДокументИД, к));
		Страница =  МассивЭлементов[0];
		СтрокаСтраницыДерева = СтарыеСтрокиДокумента.Добавить();
		СтрокаСтраницыДерева.Наименование = "Страница " + Страница.СтраницаНомер; 
		СтрокаСтраницыДерева.ДокументИД = Страница.ДокументИД;
		СтрокаСтраницыДерева.СтраницаИД = Страница.СтраницаИД;
		СтрокаСтраницыДерева.ЭтоСделка = Страница.ЭтоСделка;
	КонецЦикла;

	МассивЭлементов = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", СтрокаДокумента.ДокументИД, 1));
	МассивЭлементов[0].ГотовКЗагрузке = Ложь;
	Если КоличествоСтраниц = 0 Тогда
		СтрокаДокумента.Статус = "Страницы документа были перемещены или удалены";
		МассивЭлементов[0].СтатусРаспознавания = 5;
	Иначе
		СтрокаДокумента.Статус = "Перераспознайте документ (изменен шаблона, состав или порядок страниц)";
		МассивЭлементов[0].СтатусРаспознавания = 3;
	КонецЕсли;
	МассивЭлементов[0].СтатусОбработки = СтрокаДокумента.Статус ;
	
	Если Не (Показывать = "Все" ИЛИ Показывать = "НеГотовые") Тогда
		ДокументыДерево = ДеревоДокументов.ПолучитьЭлементы();
		ДокументыДерево.Удалить(СтрокаДокумента);
	КонецЕсли;
	СтрокаДокумента.ДеревоКомментарий = СтрокаДокумента.Статус;
	
	ИзменитьДоступностьКнопок();
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ 

// Процедура - обработчик события элемента ДеревоДокументов "ПриАктивизацииЯчейки"
//
&НаКлиенте
Процедура ДеревоДокументовПриАктивизацииЯчейки(Элемент)
	
	Если ПервоеОтображение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные = Неопределено ИЛИ
		ПервоеОтображение ИЛИ
		АктивнаяСтрокаДерева = Элемент.ТекущиеДанные Тогда
		Если ПервоеОтображение Тогда
			Элемент.ТекущаяСтрока = Неопределено;
			ПервоеОтображение = Ложь;
		КонецЕсли;
	ИначеЕсли НЕ Элемент.ТекущийЭлемент = Неопределено И Элемент.ТекущийЭлемент.Имя = "Пометка" Тогда	
		Если (АктивнаяСтрокаДерева <> Неопределено И АктивнаяСтрокаДерева <> Элемент.ТекущиеДанные) ИЛИ
			(АктивнаяСтрокаДерева = Неопределено И ЭтоВебклиент) Тогда
			АктивнаяСтрокаДерева = Элемент.ТекущиеДанные;
		КонецЕсли;
		Если ЭтоВебклиент Тогда
			МассивЭлементов = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, СтраницаИД, ЭтоСделка",  Элементы.ДеревоДокументов.ТекущиеДанные.ДокументИД,  Элементы.ДеревоДокументов.ТекущиеДанные.СтраницаИД,  Элементы.ДеревоДокументов.ТекущиеДанные.ЭтоСделка));
			АктивнаяСтрокаДерева.Пометка = НЕ АктивнаяСтрокаДерева.Пометка;
			МассивЭлементов[0].Пометка = АктивнаяСтрокаДерева.Пометка;
			ИзменитьДоступностьКнопок();
		КонецЕсли;
		Элемент.ТекущаяСтрока = Неопределено
	ИначеЕсли Элемент.ТекущийЭлемент = Неопределено Тогда
		Элемент.ТекущийЭлемент = Элементы.Пометка;
		Элементы.ПлохоеКачествоИсходныхФайлов.Видимость = Ложь;
	Иначе
		
		Если ADL И ИзмененыРеквизиты Тогда
			Документ = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", АктивнаяСтрокаДерева.ДокументИД, 1))[0];
			
			Документ.Организация = ДокументОрганизация;
			Документ.Контрагент = ДокументКонтрагент;
			Документ.Комментарий = ДокументКомментарий;
			Документ.Сумма = ДокументСумма;
			Документ.Тип = ДокументТип;
			Документ.Дата = ДокументДата;
			Документ.Номер = ДокументНомер;
			Документ.Исходящий = ДокументИсходящий;
			Документ.Оригинал = ДокументОригинал;
			Документ.ОрганизацияИД = ДокументОрганизацияИД;
			Документ.СсылкаДокумент = ДокументСсылкаНаДокумент;

			ИзмененыРеквизиты = Ложь;
		КонецЕсли;
		АктивнаяСтрокаДерева = Элемент.ТекущиеДанные;
		ДеревоТекущаяСтрока = Элемент.ТекущаяСтрока;
		
		Элементы.ПлохоеКачествоИсходныхФайлов.Видимость =  Элемент.ТекущиеДанные.ПлохоеКачествоИсходныхФайлов;

		Элементы.ДеревоДокументов.Ширина = 65;
		СтрокиДокументаТД = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", Элементы.ДеревоДокументов.ТекущиеДанные.ДокументИД, 1));
		Если СтрокиДокументаТД.Количество()>0 Тогда
			ТипФайла = СтрокиДокументаТД[0].ТипФайла;
		КонецЕсли;
		СсылкаНаИзображение = "";	
		Если Элемент.ТекущиеДанные.ЭтоСделка = 1 Тогда
					
			Если ADL Тогда
				
				Документ = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", Элемент.ТекущиеДанные.ДокументИД, 1))[0];
				ДокументИД = Элемент.ТекущиеДанные.ДокументИД;
				ДокументОрганизация = Документ.Организация;
				ДокументОрганизацияИД = Документ.ОрганизацияИД;
				Если ДокументОрганизацияИД = Неопределено ИЛИ ДокументОрганизацияИД = "" И Документ.Шапка <> Неопределено Тогда
					СопоставленнаяОрганизация = Неопределено;
					Если Документ.Шапка.Свойство("Организация", СопоставленнаяОрганизация) Тогда 
						СопоставленнаяОрганизацияСсылка = СопоставленнаяОрганизация.ИтоговоеЗначение;	
						Если ЗначениеЗаполнено(СопоставленнаяОрганизацияСсылка) Тогда
							СтруктураРеквизитов = Новый Структура("ИНН");
							ПолучитьРеквизитыСсылки(СопоставленнаяОрганизацияСсылка, СтруктураРеквизитов, ИмяШаблона);
							МассивСтрок = Организации.НайтиСтроки(Новый Структура("ИНН", СтруктураРеквизитов.ИНН));
							Если МассивСтрок.Количество() > 0 Тогда
								ДокументОрганизацияИД = МассивСтрок[0].ИДОрганизации;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если Элементы.ПоказатьРеквизитыДокумента.Видимость Тогда
					СтруктураПараметров = Новый Структура;
					Если Элементы.Организация.СписокВыбора.НайтиПоЗначению(ДокументОрганизацияИД) = Неопределено Тогда
						Элементы.Организация.ЦветТекста = Новый Цвет(255, 0, 0);
						Элементы.Организация.ПодсказкаВвода = ДокументОрганизация;
					Иначе
						Элементы.Организация.ЦветТекста = Новый Цвет(51, 51, 51);
					КонецЕсли;
				КонецЕсли;
				ДокументКонтрагент = Документ.Контрагент;
				ДокументКомментарий = Документ.Комментарий;
				ДокументСумма = Документ.Сумма;
				ДокументТип = Документ.Тип;
				ДокументТипОписание = Документ.Тип;
				//ДокументТипОписание = Документ.ТипОписание;
				ДокументДата = Документ.Дата;
				ДокументНомер = Документ.Номер;
				ДокументИсходящий = Документ.Исходящий;
				ДокументОригинал = Документ.Оригинал;
				ДокументСсылкаНаДокумент = Документ.СсылкаДокумент;

				Элементы.ПоместитьВАрхив.Доступность = НЕ Документ.Атрибутирован;
				
			КонецЕсли;
			
			МассивЭлементов = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка, СтраницаНомер", Элемент.ТекущиеДанные.ДокументИД, 2, 1));
			СсылкаЗаполнена = (Элементы.ДеревоДокументов.ТекущиеДанные.СсылкаДокумент <> Неопределено);
			Элементы.СсылкаДокумент.КнопкаОткрытия = СсылкаЗаполнена;
			Элементы.СсылкаДокумент.КнопкаОчистки = СсылкаЗаполнена;
			//Элементы.Шаблон.ТолькоПросмотр = Не СсылкаЗаполнена; 
			ВозможностьПерераспознавания = Элемент.ТекущиеДанные.Статус <> "Страницы документа были перемещены или удалены" 
			И НЕ СсылкаЗаполнена 
			И (МассивЭлементов.Количество() <> 0 ИЛИ ТипФайла = "XLS" ИЛИ ТипФайла = "XLSX");
			Элементы.Шаблон.КнопкаВыпадающегоСписка = ВозможностьПерераспознавания;
			Элементы.Шаблон.ТолькоПросмотр = НЕ ВозможностьПерераспознавания;
			Если ЭтоВебКлиент Тогда		
				Элементы.HTMLФайлДокумента.Видимость = Истина;
				Элементы.HTMLФайлСтраницы.Видимость = Ложь;
				Элементы.СсылкаНаИзображение.Видимость = Ложь;
				Если НЕ ТипФайла = "JPG" Тогда
					Элементы.HTMLФайлДокумента.Видимость = Истина;
					Элементы.HTMLФайлСтраницы.Видимость = Ложь;
					HTMLФайлДокумента = "https://docs.google.com/viewer?embedded=true&url=http://" + ?(beta, "beta-", "") + "adl.42clouds.com/adl42/hs/api_v1/AccountEDocuments/GetDocumentFile/" + Элемент.ТекущиеДанные.ДокументИД + "?TID=" + ESDLТокен;
				Иначе
					Элементы.HTMLФайлДокумента.Видимость = Ложь;
					Элементы.HTMLФайлСтраницы.Видимость = Истина;
					src = "http://" + ?(beta, "beta-", "") + "adl.42clouds.com/adl42/hs/api_v1/AccountEDocuments/GetDocumentFile/" + Элемент.ТекущиеДанные.ДокументИД + "?TID=" + ESDLТокен;
					HTMLФайлСтраницы = 
					"<HTML>
					|<BODY>
					|<P><IMG "" src=" + src + " hspace=5 vspace=5 width=100% height=auto></IMG></P>
					|</BODY>
					|</HTML>";
				КонецЕсли;
			КонецЕсли;
		Иначе
			Элементы.СсылкаДокумент.КнопкаОткрытия = Ложь;
			Элементы.СсылкаДокумент.КнопкаОчистки = Ложь;
			Элементы.Шаблон.КнопкаВыпадающегоСписка = Ложь;
			МассивЭлементов = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, СтраницаИД, ЭтоСделка", Элемент.ТекущиеДанные.ДокументИД, Элемент.ТекущиеДанные.СтраницаИД, 2));
			Элементы.Шаблон.ТолькоПросмотр = Истина;
			Если ЭтоВебКлиент Тогда		
				Элементы.СсылкаНаИзображение.Видимость = Ложь;
				Элементы.HTMLФайлДокумента.Видимость = Ложь;
				Элементы.HTMLФайлСтраницы.Видимость = Истина;
				Если beta Тогда
					src = "http://beta-adl.42clouds.com/adl42/hs/api_v1/AccountEDocumentPages/GetPage/" + Элемент.ТекущиеДанные.СтраницаИД + "?TID=" + ESDLТокен;
				Иначе
					src = "http://adl.42clouds.com/adl42/hs/api_v1/AccountEDocumentPages/GetPage/" + Элемент.ТекущиеДанные.СтраницаИД + "?TID=" + ESDLТокен;
				КонецЕсли;
				HTMLФайлСтраницы = 
				"<HTML>
				|<BODY>
				|<P><IMG "" src=" + src + " hspace=5 vspace=5 width=100% height=auto></IMG></P>
				|</BODY>
				|</HTML>";
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЭтоВебКлиент И Элементы.ПросмотрГруппа.Видимость Тогда
			Если МассивЭлементов.Количество() > 0 Тогда
				СтрокаСтраницы = МассивЭлементов[0];
				Если СтрокаСтраницы.КартинкаПолныйРазмер.Вид = ВидКартинки.Пустая Тогда
					СтрокаДокумента = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", СтрокаСтраницы.ДокументИД, 1))[0];
					Если СписокРасширений.НайтиПоЗначению(СтрокаДокумента.ТипФайла) <> Неопределено Тогда
						ДвоичныеДанные =  ПолучитьСтраницуДокумента(СтрокаСтраницы.СтраницаИД, Ложь);
						Если ДвоичныеДанные <> Неопределено Тогда
							СтрокаСтраницы.КартинкаПолныйРазмер = Новый Картинка(ДвоичныеДанные);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				СсылкаНаИзображение = ПоместитьВоВременноеХранилище(СтрокаСтраницы.КартинкаПолныйРазмер, УникальныйИдентификатор);
				СсылкаНаИзображениеСтраницаИД = СтрокаСтраницы.СтраницаИД;
			КонецЕсли;
		КонецЕсли;
		ОтображениеКнопокСтраниц();
		ИзменитьДоступностьКнопок();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события элемента ДеревоДокументов "ПроверкаПеретаскивания"
//
&НаКлиенте
Процедура ДеревоДокументовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Процедура - обработчик события элемента ДеревоДокументов "Перетаскивание"
//
&НаКлиенте
Процедура ДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ВыполненыИзменения = Ложь;
	СтандартнаяОбработка = Ложь;
	ИдентификаторПеретаскиваемойСтроки = ПараметрыПеретаскивания.Значение;
	ЭлементПеретаскивания = ДеревоДокументов.НайтиПоИдентификатору(ИдентификаторПеретаскиваемойСтроки);
	Если Строка <> Неопределено И ЭлементПеретаскивания.ЭтоСделка = 2 Тогда
		
		ПринимающаяСтрока = ДеревоДокументов.НайтиПоИдентификатору(Строка);
		ОтдающаяСтрока = ЭлементПеретаскивания.ПолучитьРодителя();

		СдвинутьСтраницы = Ложь;
		Если ПринимающаяСтрока.ЭтоСделка = 2 Тогда
			ПринимающаяСтрокаРодитель = ПринимающаяСтрока.ПолучитьРодителя();
			Если ПринимающаяСтрокаРодитель <> ОтдающаяСтрока Тогда
				ПринимающаяСтрока = ПринимающаяСтрокаРодитель;	
			Иначе
				СдвинутьСтраницы = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ (ОтдающаяСтрока.Статус = "В обработке" ИЛИ ПринимающаяСтрока.Статус = "В обработке") 
			И ОтдающаяСтрока.СсылкаДокумент  = Неопределено И
			ПринимающаяСтрока.СсылкаДокумент = Неопределено Тогда
			
			ВыполненыИзменения = Ложь;
			Если ЭлементПеретаскивания.ДокументИД <> ПринимающаяСтрока.ДокументИД Тогда
				МассивЭлементов = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ПринимающаяСтрока.ДокументИД, 1));
				ПринимающийДокумент = МассивЭлементов[0];
				Если СписокРасширений.НайтиПоЗначению(ПринимающийДокумент.ТипФайла) <> Неопределено Тогда
					МассивЭлементов = ТаблицаДанных.НайтиСтроки(Новый Структура("СтраницаИД", ЭлементПеретаскивания.СтраницаИД));
					Если ПеренестиСтраницуВДокумент(МассивЭлементов[0], ПринимающаяСтрока) Тогда
						// (Статистика 
						ВремяВыполнения = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала)/1000; 
						НоваяСтрокаСтатистики                       = ТЗПоказателиРаботы.Добавить();
						НоваяСтрокаСтатистики.DateTime              = ТекущаяДата();
						НоваяСтрокаСтатистики.EventName             = "Перемещение страницы";
						//Ресурсы
						НоваяСтрокаСтатистики.User1C                = ПользовательИнфБазы;
						НоваяСтрокаСтатистики.ConfigurationVersion  = ВерсияКонфигурации;
						НоваяСтрокаСтатистики.ConfigurationName     = МетаданныеИмя;
						НоваяСтрокаСтатистики.ClientName            = "ESDL";
						НоваяСтрокаСтатистики.ClientVersion         = ВерсияПрограммы;
						НоваяСтрокаСтатистики.AccauntDataBaseID		= ИДБазыДанныхПользователя;
						//Реквизиты
						НоваяСтрокаСтатистики.Runtime               = ВремяВыполнения*1000;
						НоваяСтрокаСтатистики.StatisticalDataName0  = "ПринимающийДокументИД";
						НоваяСтрокаСтатистики.StatisticalDataValue0 = ПринимающаяСтрока.ДокументИД;
						НоваяСтрокаСтатистики.StatisticalDataName1  = "ПеретаскиваемыйДокументИД";
						НоваяСтрокаСтатистики.StatisticalDataValue1 = ЭлементПеретаскивания.ДокументИД;
						НоваяСтрокаСтатистики.StatisticalDataName2  = "СтраницаИД";
						НоваяСтрокаСтатистики.StatisticalDataValue2 = ЭлементПеретаскивания.СтраницаИД;
						ПринимающийДокумент.СтатусОбработки = ПринимающаяСтрока.Статус;
						ВыполненыИзменения = Истина;
					КонецЕсли;
					// Статистика)
				КонецЕсли;
			ИначеЕсли СдвинутьСтраницы И ПринимающаяСтрока.ЭтоСделка = 2 Тогда
				НомерСтрокиКуда = Число(СтрЗаменить(ПринимающаяСтрока.Наименование, "Страница ", ""));
				СдвинутьСНомера = Число(СтрЗаменить(ЭлементПеретаскивания.Наименование, "Страница ", ""));
				ВыполненыИзменения = СдвинутьСтраницы(НомерСтрокиКуда, СдвинутьСНомера);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ВыполненыИзменения Тогда
		СтрокаСортировки = ПолучитьПоляСортировки();
		ТаблицаДанных.Сортировать(СтрокаСортировки);
		ЗаполнитьДеревоДокументовВызовСервера();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если  Элемент.ТекущиеДанные.Статус = "В обработке" Тогда
		ОткрытьФормуДокумента(Элемент.ТекущиеДанные.ДокументИД)

	ИначеЕсли Элемент.ТекущиеДанные.СсылкаДокумент <> "" И Элемент.ТекущиеДанные.СсылкаДокумент <> Неопределено Тогда 
		
		ОткрытьВУС(Элемент.ТекущиеДанные.ДокументИД); 		
		ЗаполнитьДеревоДокументовВызовСервера();
		
	КонецЕсли;
	
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДокумента(ИД)
	
	Документ = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ИД, 1))[0];
	ИндексСтроки = ТаблицаДанных.Индекс(Документ);
	
	Документ.ПолученНеОткрыт = Ложь;
	
	СтруктураСтроки = ПреобразоватьСтрокуТаблицыВСтруктуру(ТаблицаДанных, ИндексСтроки);
	
	ПФ = Новый структура("СтруктураСтроки, Наименование, ДокументИД", СтруктураСтроки, Документ.Наименование, Документ.ДокументИД);
	ОткрытьФорму(ПрефиксИмениФорм + "УпрФормаВерификации", ПФ, ЭтаФорма, Документ.ДокументИД);
	
	ЗаполнитьДеревоДокументовВызовСервера();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВУС(ИД) 
	
	МассивДокументов = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка",ИД, 1));
	Если МассивДокументов.Количество() > 0 Тогда
		Документ = МассивДокументов[0];
		Если Документ.СсылкаДокумент <> "" И Документ.СсылкаДокумент <> Неопределено Тогда 
			ПараметрыОткрытияФормы = Новый Структура("Ключ", Документ.СсылкаДокумент);
			ОткрытьФорму(ВидДокумента(Документ.СсылкаТип) + ".ФормаОбъекта", ПараметрыОткрытияФормы);
			Документ.ЗагруженНеОткрыт = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события элемента Шаблон "ОбработкаВыбора"
//
&НаКлиенте
Процедура ШаблонОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("DocumentID", Элементы.ДеревоДокументов.ТекущиеДанные.ДокументИД);
	СтруктураПараметров.Вставить("RecognitionType", ВыбранноеЗначение);
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocuments/SetDocumentProperties";
	ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", СтруктураПараметров);
	
	Если ПараметрыОтвета.КодОтвета <> 200 Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Удаление ссылки: " + ПараметрыОтвета.СтруктураОтвета.Description;
		СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
		СообщениеПользователю.Сообщить();
	Иначе
		МассивЭлементов = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", Элементы.ДеревоДокументов.ТекущиеДанные.ДокументИД, 1));
		МассивЭлементов[0].ТипРаспознанНачальный = МассивЭлементов[0].ТипРаспознан;
		МассивЭлементов[0].ТипРаспознан = ВыбранноеЗначение;
		МассивЭлементов[0].ГотовКЗагрузке = Ложь;
		МассивЭлементов[0].СтатусРаспознавания = 3;
		МассивЭлементов[0].ПрисвоенСтатусКПерераспознаванию = Истина;
		МассивЭлементов[0].КПерераспознаванию = Истина;
		МассивЭлементов[0].СтатусОбработки = "Перераспознайте документ (изменен шаблона, состав или порядок страниц)";
		
		Если Не (Показывать = "Все" ИЛИ Показывать = "КПерераспознаванию") Тогда
			ДокументыДерево = ДеревоДокументов.ПолучитьЭлементы();
			ДокументыДерево.Удалить(Элементы.ДеревоДокументов.ТекущиеДанные);
		Иначе
			Элементы.ДеревоДокументов.ТекущиеДанные.Шаблон = Элементы.Шаблон.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение).Представление;
			Элементы.ДеревоДокументов.ТекущиеДанные.Статус = МассивЭлементов[0].СтатусОбработки;
			Элементы.ДеревоДокументов.ТекущиеДанные.ДеревоКомментарий = МассивЭлементов[0].СтатусОбработки;

			Элементы.ДеревоДокументов.ТекущиеДанные.ГотовКЗагрузке = Ложь;
		КонецЕсли;
		
		ИзменитьДоступностьКнопок();
		КоличествоДокументовПоСтатусамНаСервере();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события элемента СсылкаДокумент "Очистка"
//
&НаКлиенте
Процедура СсылкаДокументОчистка(Элемент, СтандартнаяОбработка)
	
	СтрокаДокумента = Элементы.ДеревоДокументов.ТекущиеДанные;
	Если СтрокаДокумента.СсылкаДокумент <> Неопределено И СтрокаДокумента.СсылкаДокумент <> "" Тогда
		СтруктураПараметров = Новый Структура("DocumentID, LinkID", СтрокаДокумента.ДокументИД, ТипСсылки(СтрокаДокумента.СсылкаДокумент).СсылкаИД);
		СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocumentLinks/Delete";
		ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", СтруктураПараметров);
		Если ПараметрыОтвета.КодОтвета <> 200 Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Удаление ссылки: " + ПараметрыОтвета.СтруктураОтвета.Description;
			СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
			СообщениеПользователю.Сообщить();
		Иначе
			МассивЭлементов = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", СтрокаДокумента.ДокументИД, 1));
			ТаблицаДанныхСтрокаДокумента = МассивЭлементов[0];
			ТаблицаДанныхСтрокаДокумента.СсылкаИД = "";		
			ТаблицаДанныхСтрокаДокумента.СсылкаТип = "";		
			ТаблицаДанныхСтрокаДокумента.СсылкаДокумент = "";
			ТаблицаДанныхСтрокаДокумента.Загружен = Ложь;
			ТаблицаДанныхСтрокаДокумента.СтатусОбработки = "Готов к загрузке";
			Если Показывать = "Загруженные" Тогда
				ДеревоДокументов.ПолучитьЭлементы().Удалить(СтрокаДокумента);
			Иначе
				СтрокаДокумента.СсылкаДокумент = Неопределено;
				СтруктураТипа = Неопределено;
				Если ТаблицаДанныхСтрокаДокумента.ТипРаспознан <> "" Тогда
					СтруктураТиповДокументов.Свойство(ВРЕГ(ТаблицаДанныхСтрокаДокумента.ТипРаспознан), СтруктураТипа);
				КонецЕсли;
				Если ТаблицаДанныхСтрокаДокумента.СтатусРаспознавания = 0 Тогда
					СтрокаДокумента.ГотовКЗагрузке = СтруктураТипа.ГотовКЗагрузке;
					Если СтрокаДокумента.ГотовКЗагрузке Тогда
						СтрокаДокумента.Статус = "Готов к загрузке";
					Иначе
						СтрокаДокумента.Статус = "Документ нельзя загрузить в данную учетную систему";	
					КонецЕсли;
				ИначеЕсли ТаблицаДанныхСтрокаДокумента.СтатусРаспознавания = 2 Тогда  
					СтрокаДокумента.Статус = "Выполняется повторное распознавание";
					СтрокаДокумента.ГотовКЗагрузке = Ложь;
				ИначеЕсли ТаблицаДанныхСтрокаДокумента.СтатусРаспознавания = 5 Тогда  
					СтрокаДокумента.Статус = "Страницы документа были перемещены или удалены";
					СтрокаДокумента.ГотовКЗагрузке = Ложь;
				Иначе  
					СтрокаДокумента.Статус = "Перераспознайте документ (изменен шаблона, состав или порядок страниц)";
					СтрокаДокумента.ГотовКЗагрузке = Ложь;
				КонецЕсли;
				ТаблицаДанныхСтрокаДокумента.ГотовКЗагрузке = СтрокаДокумента.ГотовКЗагрузке;
				АктивнаяСтрокаДерева = Неопределено;
				ДеревоДокументовПриАктивизацииЯчейки(Элементы.ДеревоДокументов);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	Если СтрокаДокумента.Статус <> "Готов к загрузке" Тогда
		СтрокаДокумента.ДеревоКомментарий = СтрокаДокумента.Статус;
	КонецЕсли;

	СтрокаДокумента.СтатусСтроки = 0;

КонецПроцедуры


// Процедура - обработчик события элемента СсылкаНаИзображение "Нажатие"
//
&НаКлиенте
Процедура СсылкаНаИзображениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Попытка 
		Если СсылкаНаИзображение <> Неопределено И СсылкаНаИзображение <> "" Тогда	
			ИмяФайла = КаталогВременныхФайлов() + СсылкаНаИзображениеСтраницаИД + ".jpg";
			ПолучитьФайл(СсылкаНаИзображение, ИмяФайла, Ложь); 
			Файл = Новый Файл(ИмяФайла);
			Если Файл.Существует() Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения("ПустойОбработчикОповещения", ЭтаФорма);
				НачатьЗапускПриложения(ОписаниеОповещения, ИмяФайла);
			КонецЕсли;	
		КонецЕсли;
	Исключение
		Т = ОписаниеОшибки();
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Ошибка при открытии файла изображения";
		СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
		СообщениеПользователю.Сообщить();
	КонецПопытки;

КонецПроцедуры

// Процедура - обработчик команды формы "Вверх" и "Вниз"
//
&НаКлиенте
Функция СдвинутьСтраницы(НомерСтрокиКуда, СдвинутьСНомера)
	
	Вверх = (НомерСтрокиКуда - СдвинутьСНомера) < 0;
	СдвигаемаяСтрока = Элементы.ДеревоДокументов.ТекущиеДанные;
	ДокументИД = СдвигаемаяСтрока.ДокументИД;
	Сдвиг = ?(Вверх, 1, -1);
	
	Если НЕ ИзменитьномерСтраницы(СдвигаемаяСтрока.СтраницаИД, НомерСтрокиКуда, СдвинутьСНомера) Тогда
		Возврат Ложь;
	КонецЕсли;

	МассивСтраницДокумента = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, ДокументИД", 2, ДокументИД));
	Если Вверх Тогда
		СледующийНомер = НомерСтрокиКуда + Сдвиг;
	Иначе
		СледующийНомер = СдвинутьСНомера;
	КонецЕсли;
	Для каждого СтраницаДокумента Из МассивСтраницДокумента Цикл
		Если СтраницаДокумента.СтраницаИД <> СдвигаемаяСтрока.СтраницаИД Тогда
			Если Вверх И СтраницаДокумента.СтраницаНомер < СдвинутьСНомера И НЕ СтраницаДокумента.СтраницаНомер < НомерСтрокиКуда Тогда
				Если ИзменитьномерСтраницы(СтраницаДокумента.СтраницаИД, СледующийНомер, СтраницаДокумента.СтраницаНомер) Тогда
					СледующийНомер = СледующийНомер + Сдвиг;
				Иначе
					Возврат Ложь;
				КонецЕсли;
			ИначеЕсли НЕ Вверх И СтраницаДокумента.СтраницаНомер > СдвинутьСНомера И НЕ СтраницаДокумента.СтраницаНомер > НомерСтрокиКуда Тогда 
				Если ИзменитьномерСтраницы(СтраницаДокумента.СтраницаИД, СледующийНомер, СтраницаДокумента.СтраницаНомер) Тогда
					СледующийНомер = СледующийНомер + 1;
				Иначе
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МассивНайденныхСтрок = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ДокументИД, 1));	
	ТаблицаДанныхСтрокаДокумента  = МассивНайденныхСтрок[0];
	ТаблицаДанныхСтрокаДокумента.ГотовКЗагрузке = Ложь;
	ТаблицаДанныхСтрокаДокумента.Статус = "Перераспознайте документ (изменен шаблона, состав или порядок страниц)";
	
	Возврат Истина;

КонецФункции

&НаКлиенте
Функция ИзменитьНомерСтраницы(СтраницаИД, СтраницаНомер, СдвинутьСНомера)
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();

	СтруктураПараметров = Новый Структура("PageID, Number", СтраницаИД, Строка(СтраницаНомер));
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocumentPages/SetPageProperties";
	ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", СтруктураПараметров);
	Если ПараметрыОтвета.КодОтвета <> 200 Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Изменение порядка страниц: " + ПараметрыОтвета.СтруктураОтвета.Description;
		СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
		СообщениеПользователю.Сообщить();
		Возврат Ложь;
	Иначе
		СтрокаСтраницы= ТаблицаДанных.НайтиСтроки(Новый Структура("СтраницаИД", СтраницаИД))[0];
		СтрокаСтраницы.СтраницаНомер = СтраницаНомер;
		// (Статистика 
		ВремяВыполнения = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала)/1000; 
		НоваяСтрокаСтатистики                       = ТЗПоказателиРаботы.Добавить();
		НоваяСтрокаСтатистики.DateTime              = ТекущаяДата();
		НоваяСтрокаСтатистики.EventName             = "Изменение порядка страницы";
		//Ресурсы
		НоваяСтрокаСтатистики.User1C                = ПользовательИнфБазы;
		НоваяСтрокаСтатистики.ConfigurationVersion  = ВерсияКонфигурации;
		НоваяСтрокаСтатистики.ConfigurationName     = МетаданныеИмя;
		НоваяСтрокаСтатистики.ClientName            = "ESDL";
		НоваяСтрокаСтатистики.ClientVersion         = ВерсияПрограммы;
		НоваяСтрокаСтатистики.AccauntDataBaseID		= ИДБазыДанныхПользователя;
		//Реквизиты
		НоваяСтрокаСтатистики.Runtime               = ВремяВыполнения*1000;
		НоваяСтрокаСтатистики.StatisticalDataName0  = "ДокументИД";
		НоваяСтрокаСтатистики.StatisticalDataValue0 = ДокументИД;
		НоваяСтрокаСтатистики.StatisticalDataName1  = "СтраницаИД";
		НоваяСтрокаСтатистики.StatisticalDataValue1 = СтраницаИД;
		НоваяСтрокаСтатистики.StatisticalDataName1  = "Сдвиг";
		НоваяСтрокаСтатистики.StatisticalDataValue1 = СдвинутьСНомера - СтраницаНомер;
		НоваяСтрокаСтатистики.StatisticalDataName1  = "Начальный номер страницы";
		НоваяСтрокаСтатистики.StatisticalDataValue1 = СдвинутьСНомера;
		// Статистика)
		Возврат Истина;
	КонецЕсли;

КонецФункции


// Процедура удаления страницы документа
&НаКлиенте
Процедура УдалитьСтраницу()
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();

	СтруктураПараметров = Новый Структура("PageID", Элементы.ДеревоДокументов.ТекущиеДанные.СтраницаИД);
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocumentPages/Delete";
	ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", СтруктураПараметров);
	Если ПараметрыОтвета.КодОтвета =  200 Тогда
		НомерУдаленнойСтраницы = Число(СтрЗаменить(Элементы.ДеревоДокументов.ТекущиеДанные.Наименование, "Страница ", ""));
		СтрокиДеревоДокументов = ДеревоДокументов.ПолучитьЭлементы();
		ДокументИД = Элементы.ДеревоДокументов.ТекущиеДанные.ДокументИД;
		СтраницаИД = Элементы.ДеревоДокументов.ТекущиеДанные.СтраницаИД;
		Для Каждого СтрокаДерева Из СтрокиДеревоДокументов Цикл
			Если СтрокаДерева.ДокументИД = ДокументИД Тогда
				СтрокаДокумента = СтрокаДерева;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		МассивСтрокСтраницы = ТаблицаДанных.НайтиСтроки(Новый Структура("СтраницаИД", Элементы.ДеревоДокументов.ТекущиеДанные.СтраницаИД));
		ТаблицаДанных.Удалить(МассивСтрокСтраницы[0]);	
		СтрокиСтрокаДокумента = СтрокаДокумента.ПолучитьЭлементы();
		СтрокиСтрокаДокумента.Удалить(Элементы.ДеревоДокументов.ТекущиеДанные);
		ВыполнитьИзмененияПослеУдаленияСтраницыДокумента(СтрокаДокумента, НомерУдаленнойСтраницы);
			
		// (Статистика 
		ВремяВыполнения = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала)/1000; 
		НоваяСтрокаСтатистики                       = ТЗПоказателиРаботы.Добавить();
		НоваяСтрокаСтатистики.DateTime              = ТекущаяДата();
		НоваяСтрокаСтатистики.EventName             = "Удаление страницы";
		//Ресурсы
		НоваяСтрокаСтатистики.User1C                = ПользовательИнфБазы;
		НоваяСтрокаСтатистики.ConfigurationVersion  = ВерсияКонфигурации;
		НоваяСтрокаСтатистики.ConfigurationName     = МетаданныеИмя;
		НоваяСтрокаСтатистики.ClientName            = "ESDL";
		НоваяСтрокаСтатистики.ClientVersion         = ВерсияПрограммы;
		НоваяСтрокаСтатистики.AccauntDataBaseID		= ИДБазыДанныхПользователя;
		//Реквизиты
		НоваяСтрокаСтатистики.Runtime               = ВремяВыполнения*1000;
		НоваяСтрокаСтатистики.StatisticalDataName0  = "ДокументИД";
		НоваяСтрокаСтатистики.StatisticalDataValue0 = ДокументИД;
		НоваяСтрокаСтатистики.StatisticalDataName1  = "СтраницаИД";
		НоваяСтрокаСтатистики.StatisticalDataValue1 = СтраницаИД;
		// Статистика)

	Иначе
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Добавление страницы: " + ПараметрыОтвета.СтруктураОтвета.Description;
		СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события элемента Пометка "ПриИзменении"
//
&НаКлиенте
Процедура ПометкаПриИзменении(Элемент)
	
	
	МассивЭлементов = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, СтраницаИД, ЭтоСделка",  Элементы.ДеревоДокументов.ТекущиеДанные.ДокументИД,  Элементы.ДеревоДокументов.ТекущиеДанные.СтраницаИД,  Элементы.ДеревоДокументов.ТекущиеДанные.ЭтоСделка));
	Если НЕ ЭтоВебклиент ИЛИ (ЭтоВебклиент И МассивЭлементов[0].Пометка <> Элементы.ДеревоДокументов.ТекущиеДанные.Пометка)Тогда
		МассивЭлементов[0].Пометка = Элементы.ДеревоДокументов.ТекущиеДанные.Пометка;
		ИзменитьДоступностьКнопок();
	КонецЕсли;
	Если Элементы.ДеревоДокументов.ТекущийЭлемент = Неопределено Тогда
		Элементы.ДеревоДокументов.ТекущийЭлемент = Элементы.Пометка;
	КонецЕсли;
   
КонецПроцедуры

// Процедура - обработчик команды формы "ПометитьВсе"
//
&НаКлиенте
Процедура ПометитьВсе(Команда)
	
	ИзменитьПометку(Истина);

КонецПроцедуры

// Процедура - обработчик команды формы "СнятьПометки"
//
&НаКлиенте
Процедура СнятьПометки(Команда)
	
	ИзменитьПометку(Ложь);

КонецПроцедуры

// Процедура - обработчик команды формы "КопироватьВБуфер"
//
&НаКлиенте
Процедура КопироватьСсылкуНажатие(Элемент)
	
	Если Элементы.ДеревоДокументов.ТекущиеДанные <> Неопределено Тогда
		ИД = Элементы.ДеревоДокументов.ТекущиеДанные.ДокументИД;
		Если beta Тогда
			HTTPСсылкаФайл = "https://docs.google.com/viewer?embedded=true&url=http://beta-adl.42clouds.com/adl42/hs/api_v1/AccountEDocuments/GetDocumentFile/" + Элементы.ДеревоДокументов.ТекущиеДанные.ДокументИД + "?TID=" + ESDLТокен;
		Иначе
			HTTPСсылкаФайл = "https://docs.google.com/viewer?embedded=true&url=http://adl.42clouds.com/adl42/hs/api_v1/AccountEDocuments/GetDocumentFile/" + Элементы.ДеревоДокументов.ТекущиеДанные.ДокументИД + "?TID=" + ESDLТокен;
		КонецЕсли;
		Элементы.КопироватьВБуфер.Документ.ParentWindow.ClipboardData.SetData("Text", HTTPСсылкаФайл);            
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события элемента Показывать "ПриИзменении"
//
&НаКлиенте
Процедура СодержимоеСпискаПриИзменении()
	
	//СтрокаСортировки = ПолучитьПоляСортировки();
	//ТаблицаДанных.Сортировать(СтрокаСортировки);
	//ЗаполнитьДеревоДокументовВызовСервера();
	//ИзменитьДоступностьКнопок();
	Обновить();

КонецПроцедуры

&НаКлиенте
Процедура СтраницыЗДПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ПометитьНераспознанныеКакНеНовые();
	
	Если ТекущаяСтраница.Имя = "СписокДокументов" Тогда
		ЗаполнитьДеревоДокументовВызовСервера();
		//Элементы.ПолучитьВыбранные.КнопкаПоУмолчанию = Истина;
	Иначе
		//Элементы.ЗагрузитьДокументы.КнопкаПоУмолчанию = Истина;
	КонецЕсли;

КонецПроцедуры




&НаКлиенте
Процедура ПредыдущаяСтраницаСписка(Команда)
	
	ТекущаяСтраницаСписка = ТекущаяСтраницаСписка - 1;
	Если ТекущаяСтраницаСписка < 2 Тогда
		Элементы.ПредыдущаяСтраницаСписка.Доступность = Ложь;
	Иначе
		Элементы.ПредыдущаяСтраницаСписка.Доступность = Истина;
	КонецЕсли;
	//СодержимоеСпискаПриИзменении();
	Обновить();

КонецПроцедуры


&НаКлиенте
Процедура СледующаяСтраницаСписка(Команда)
	
	ТекущаяСтраницаСписка = ТекущаяСтраницаСписка + 1;
	Если ТекущаяСтраницаСписка*КолДокСтраница > КоличествоДокументовВСпискеВсего Тогда
		Элементы.СледующаяСтраницаСписка.Доступность = Ложь;
	Иначе
		Элементы.СледующаяСтраницаСписка.Доступность = Истина;
	КонецЕсли;
	//СодержимоеСпискаПриИзменении();
	Обновить();

КонецПроцедуры

&НаКлиенте
Процедура ОтборыПриИзменении(Элемент)
	
	ТекущаяСтраницаСписка = 1;
	//СодержимоеСпискаПриИзменении();
	Обновить();

КонецПроцедуры

&НаКлиенте
Процедура КолДокСтраницаПриИзменении(Элемент)
	
	Если ТекущаяСтраницаСписка > 1 И ТекущаяСтраницаСписка*КолДокСтраница < КоличествоДокументовВСпискеВсего Тогда
		ТекущаяСтраницаСписка = ТекущаяСтраницаСписка - 1;
	КонецЕсли;
	Если ТекущаяСтраницаСписка*КолДокСтраница > КоличествоДокументовВСпискеВсего Тогда
		Элементы.СледующаяСтраницаСписка.Доступность = Ложь;
	Иначе
		Элементы.СледующаяСтраницаСписка.Доступность = Истина;
	КонецЕсли;
	//СодержимоеСпискаПриИзменении();
	ТекущаяСтраницаСписка = 1;
	Обновить();
	
КонецПроцедуры


&НаКлиенте
Процедура СохранитьДокумент(Команда)
	
	КоличествоПомеченных = ТаблицаДанных.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество();
	МассивСтрокДляСохранения = Новый Массив;	
	ДокументыДерева = ДеревоДокументов.ПолучитьЭлементы();
	ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	Если КоличествоПомеченных > 0 Тогда
		Для Каждого СтрокаДокумента Из ДокументыДерева Цикл
			Если СтрокаДокумента.Пометка Тогда
					МассивСтрокДляСохранения.Добавить(СтрокаДокумента);
			Иначе
				СтрокиСтраниц = СтрокаДокумента.ПолучитьЭлементы();
				Для Каждого СтрокаСтраницы Из СтрокиСтраниц Цикл
					Если СтрокаСтраницы.Пометка Тогда
							МассивСтрокДляСохранения.Добавить(СтрокаСтраницы.ПолучитьРодителя());
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ТекущиеДанные.ЭтоСделка = 1 Тогда
			МассивСтрокДляСохранения.Добавить(ТекущиеДанные);
		Иначе
			МассивСтрокДляСохранения.Добавить(ТекущиеДанные.ПолучитьРодителя());
		КонецЕсли;
	КонецЕсли;
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияКаталога = Новый ДиалогВыбораФайла(Режим);
	Если НЕ ЭтоВебКлиент Тогда
		ДиалогОткрытияКаталога.Выбрать();
		КаталогЭкспорта = ДиалогОткрытияКаталога.Каталог;
		Если КаталогЭкспорта = "" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;		
	 
	Для Каждого СтрокаДокумента Из МассивСтрокДляСохранения Цикл
		СохраняемыйДокумент = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка",СтрокаДокумента.ДокументИД, 1));	
			
			СтрокаПараметры = "AccountEDocuments/GetDocumentFile?DocumentID=" + СтрокаДокумента.ДокументИД;
			СтрокаЗапроса = "/adl42/hs/api_v1/" + СтрокаПараметры;
			ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса,,,,Истина);
		
			Если ПараметрыОтвета.КодОтвета = 200 Тогда
				ДвоичныеДанные=ПараметрыОтвета.СтруктураОтвета.ДвоичныеДанные;
				АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные,УникальныйИдентификатор);
				Если ЭтоВебКлиент Тогда
					ИмяФайла =СтрокаДокумента.Наименование+"."+СохраняемыйДокумент[0].ТипФайла;
					ПолучитьФайл(АдресФайла,ИмяФайла, Истина);
				Иначе
					ПолныйПуть =КаталогЭкспорта +"\"+СтрокаДокумента.Наименование+"."+СохраняемыйДокумент[0].ТипФайла;
					Попытка
	        			ДвоичныеДанные.Записать(ПолныйПуть);
					Исключение
						СообщениеПользователю = Новый СообщениеПользователю;
						СообщениеПользователю.Текст = "Не удалось экспортировать! Возможно у Вас нету прав на сохранение файлов в выбраный каталог!";
						СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
						СообщениеПользователю.Сообщить();
						Возврат;
					КонецПопытки;
				КонецЕсли;
				ПоказатьОповещениеПользователя("Документ экспортирован!");
			Иначе
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = "Файл "+СтрокаДокумента.Наименование+" не удалось экспортировать!";
				СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
				СообщениеПользователю.Сообщить();

			КонецЕсли;
			
	КонецЦикла;	
	
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса",ЭтотОбъект);	
    ПоказатьВопрос(Оповещение,"Открыть каталог?",РежимДиалогаВопрос.ДаНет,0,КодВозвратаДиалога.Да,"Вопрос");
	
	
	ЗаполнитьДеревоДокументовВызовСервера();
	ИзменитьПометку(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт		
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПустойОбработчикОповещения", ЭтаФорма);
		НачатьЗапускПриложения(ОписаниеОповещения, КаталогЭкспорта);
    КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьДокументы(Команда)
	
	Если МассивФайловВОчередиНаПечать.Количество() > 0 Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Выполняется печать ранее переданных документов. Попробуйте позже.";
		СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
		СообщениеПользователю.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	КоличествоПомеченных = ТаблицаДанных.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество();
	
	МассивСтрокДляПечати = Новый Массив;	
	ДокументыДерева = ДеревоДокументов.ПолучитьЭлементы();
	ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	Если КоличествоПомеченных > 0 Тогда
		Для Каждого СтрокаДокумента Из ДокументыДерева Цикл
			Если СтрокаДокумента.Пометка Тогда
					МассивСтрокДляПечати.Добавить(СтрокаДокумента);
			Иначе
				СтрокиСтраниц = СтрокаДокумента.ПолучитьЭлементы();
				Для Каждого СтрокаСтраницы Из СтрокиСтраниц Цикл
					Если СтрокаСтраницы.Пометка Тогда
							МассивСтрокДляПечати.Добавить(СтрокаСтраницы.ПолучитьРодителя());
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ТекущиеДанные.ЭтоСделка = 1 Тогда
			МассивСтрокДляПечати.Добавить(ТекущиеДанные);
		Иначе
			МассивСтрокДляПечати.Добавить(ТекущиеДанные.ПолучитьРодителя());
		КонецЕсли;
	КонецЕсли;
	
	ВременныйКаталогЭкспорта = КаталогВременныхФайлов() + "ADLClientTemp";
	КаталогНаДиске = Новый Файл(ВременныйКаталогЭкспорта);
	Если Не КаталогНаДиске.Существует() Тогда
		Попытка
			СоздатьКаталог(ВременныйКаталогЭкспорта);
		Исключение
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Не удалось создать временный каталог! Возможно у Вас нету прав на создание каталога по адресу: " + ВременныйКаталогЭкспорта;
			СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
			СообщениеПользователю.Сообщить();

			 Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Для Каждого СтрокаДокумента Из МассивСтрокДляПечати Цикл
		
		СохраняемыйДокумент = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка",СтрокаДокумента.ДокументИД, 1));	
		ПолныйПуть =ВременныйКаталогЭкспорта + "\"+СтрокаДокумента.Наименование+"."+СохраняемыйДокумент[0].ТипФайла; 
				
			СтрокаПараметры = "AccountEDocuments/GetDocumentFile?DocumentID=" + СтрокаДокумента.ДокументИД;
			СтрокаЗапроса = "/adl42/hs/api_v1/" + СтрокаПараметры;
			ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса,,,,Истина);
		
			Если ПараметрыОтвета.КодОтвета = 200 Тогда
				ДвоичныеДанные=ПараметрыОтвета.СтруктураОтвета.ДвоичныеДанные;
				МассивФайловВОчередиНаПечать.Добавить(ПолныйПуть);
				ПроверкаФайла = Новый Файл(ПолныйПуть);
				Если Не ПроверкаФайла.Существует() Тогда
					 ДвоичныеДанные.Записать(ПолныйПуть);
				КонецЕсли;			
			Иначе
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = "Файл "+СтрокаДокумента.Наименование+" не найден";
				СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
				СообщениеПользователю.Сообщить();

			КонецЕсли;
			
		ПодключитьОбработчикОжидания("ПечатьДокументаИзОчередиПечати", 1);
		
	КонецЦикла;
	
	ЗаполнитьДеревоДокументовВызовСервера();
	ИзменитьПометку(Ложь);
	
КонецПроцедуры


////////////////////////////// Печать_файлов //////////////////////////////

// процедура удаляет из процессов ОС процесс "Adobe Acrobat Reader"
&НаКлиенте
Процедура УдалитьПроцессAdobeAcrobatReader()
	
	WShell = Новый COMОбъект("WScript.Shell");
	WShell.Run("taskkill /f /im AcroRd*", 0);

	ПоказатьОповещениеПользователя("Файлы добавлены в очередь на печать!");
	
КонецПроцедуры	  

// процедура запуска печати файла из массива очереди печати
// проверяет "МассивФайловВОчередиНаПечать", если не пустой, то печатает последний файл в массиве, после
// чего его удаляет, перезапускается через 1 секунду. Если массив пустой - отключает обработчик ожидания
//
&НаКлиенте
Процедура ПечатьДокументаИзОчередиПечати()
	
	Если МассивФайловВОчередиНаПечать.Количество() = 0 Тогда
		ОтключитьОбработчикОжидания("ПечатьДокументаИзОчередиПечати");
		ПодключитьОбработчикОжидания("УдалитьПроцессAdobeAcrobatReader", 3, Истина);
	Иначе
		Shell = Новый COMОбъект("Shell.Application");
		ИндексПоследнего = МассивФайловВОчередиНаПечать.ВГраница();
		ИмяПоследнегоВОчереди = МассивФайловВОчередиНаПечать[ИндексПоследнего];
		Shell.ShellExecute(ИмяПоследнегоВОчереди, "", "", "print", 0);
		МассивФайловВОчередиНаПечать.Удалить(ИндексПоследнего);
	КонецЕсли;		 	 
	
КонецПроцедуры




&НаКлиенте
Процедура ОтборыИСортировка(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТаблицаСортировки", ТаблицаСортировки);
	ПараметрыФормы.Вставить("ТаблицаОтборов", ТаблицаОтборов);
	
	ОткрытьФорму(ПрефиксИмениФорм + "УпрФормаНастройкаСортировки", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПоляСортировки(ИменаСервера = Ложь)
	
	// Возвращаемое значение функции.
	
	ПоляСортировки = "";
	Разделитель = "";
	Для Каждого СтрокаТаблицы Из ТаблицаСортировки Цикл
		Если СтрокаТаблицы.Использование Тогда
			Разделитель = ?(ПустаяСтрока(ПоляСортировки), "", ", ");
			НаправлениеСортировкиСтр = ?(СтрокаТаблицы.НаправлениеСортировки, " Возр", " Убыв");
			ПоляСортировки = ПоляСортировки + Разделитель + ?(ИменаСервера, СтрокаТаблицы.ИмяСервера, СтрокаТаблицы.ИмяПоля) + НаправлениеСортировкиСтр;
		КонецЕсли;
	КонецЦикла;
	
	Разделитель = ?(ПустаяСтрока(ПоляСортировки), "", ", ");
	Если ИменаСервера Тогда
		СтрокаСортировки = ПоляСортировки + Разделитель + "CreateData Убыв, DocumentID Возр";
	Иначе
		СтрокаСортировки = ПоляСортировки + Разделитель + "ДатаСоздания Убыв, ДокументИД Возр, СтраницаНомер Возр";
	КонецЕсли;
	Возврат СтрокаСортировки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицыСортировкиИОтборов()
	
	ТаблицаСортировки.Очистить();
	
	СтрокаТаблицы = ТаблицаСортировки.Добавить();
	СтрокаТаблицы.ИмяПоля               = "Организация";
	СтрокаТаблицы.ИмяСервера            = "Organization";
	СтрокаТаблицы.Синоним               = "Организация";
	СтрокаТаблицы.Использование         = Ложь; 
	СтрокаТаблицы.НаправлениеСортировки = Истина; // по возрастанию

	СтрокаТаблицы = ТаблицаСортировки.Добавить();
	СтрокаТаблицы.ИмяПоля               = "Контрагент";
	СтрокаТаблицы.ИмяСервера            = "Contractor";
	СтрокаТаблицы.Синоним               = "Контрагент";
	СтрокаТаблицы.Использование         = Ложь; 
	СтрокаТаблицы.НаправлениеСортировки = Истина; // по возрастанию
	
	СтрокаТаблицы = ТаблицаСортировки.Добавить();
	СтрокаТаблицы.ИмяПоля               = "Дата";
	СтрокаТаблицы.ИмяСервера            = "DocumentDate";
	СтрокаТаблицы.Синоним               = "Дата документа";
	СтрокаТаблицы.Использование         = Ложь; 
	СтрокаТаблицы.НаправлениеСортировки = Истина; // по возрастанию
	
	СтрокаТаблицы = ТаблицаСортировки.Добавить();
	СтрокаТаблицы.ИмяПоля               = "Тип";
	СтрокаТаблицы.ИмяСервера            = "DocumentType";
	СтрокаТаблицы.Синоним               = "Тип документа";
	СтрокаТаблицы.Использование         = Ложь; 
	СтрокаТаблицы.НаправлениеСортировки = Истина; // по возрастанию
	
	ТаблицаОтборов.Очистить();
	//ИнтервалДат
	СтрокаТаблицы = ТаблицаОтборов.Добавить();
	СтрокаТаблицы.ИмяПоля               = "ИнтервалДат";
	СтрокаТаблицы.Синоним               = "Период";
	СтрокаТаблицы.Использование         = Истина; 
	СтрокаТаблицы.ВидСравнения = "равно";
	СтрокаТаблицы.ЗначениеОтбора = "3";
	СтрокаТаблицы.ЗначениеОтбораСиноним = "7 дней";
	
	СтрокаТаблицы.СписокЗначенийВидСравнения = Новый СписокЗначений;
	СтрокаТаблицы.СписокЗначенийВидСравнения.Добавить("равно", "равно"); 
	
	СтрокаТаблицы.СписокЗначенийЗначениеОтбора = Новый СписокЗначений;
	СтрокаТаблицы.СписокЗначенийЗначениеОтбора.Добавить("1", "Сегодня"); 
	СтрокаТаблицы.СписокЗначенийЗначениеОтбора.Добавить("2", "2 дня"); 
	СтрокаТаблицы.СписокЗначенийЗначениеОтбора.Добавить("3", "7 дней"); 
	СтрокаТаблицы.СписокЗначенийЗначениеОтбора.Добавить("4", "30 дней"); 
	СтрокаТаблицы.СписокЗначенийЗначениеОтбора.Добавить("5", "3 месяца");
	СтрокаТаблицы.СписокЗначенийЗначениеОтбора.Добавить("6", "Все");

	//Статус
	//СтрокаТаблицы = ТаблицаОтборов.Добавить();
	//СтрокаТаблицы.ИмяПоля               = "Статус";
	//СтрокаТаблицы.Синоним               = "Статус документа";
	//СтрокаТаблицы.Использование         = Ложь; 
	//СтрокаТаблицы.ВидСравнения = "равно";
	//СтрокаТаблицы.ЗначениеОтбора = "";
	//СтрокаТаблицы.ЗначениеОтбораСиноним = "";
	//
	//СтрокаТаблицы.СписокЗначенийВидСравнения = Новый СписокЗначений;
	//СтрокаТаблицы.СписокЗначенийВидСравнения.Добавить("равно", "равно"); 
	//
	//СтрокаТаблицы.СписокЗначенийЗначениеОтбора = Новый СписокЗначений;
	//СтрокаТаблицы.СписокЗначенийЗначениеОтбора.Добавить("Готовые", "Готовые к загрузке"); 
	//СтрокаТаблицы.СписокЗначенийЗначениеОтбора.Добавить("Загруженные", "Загруженные"); 
	//СтрокаТаблицы.СписокЗначенийЗначениеОтбора.Добавить("НеГотовые", "Не готовые к загрузке"); 
	//СтрокаТаблицы.СписокЗначенийЗначениеОтбора.Добавить("ВОбработке", "В обработке"); 
	//Организация
	СтрокаТаблицы = ТаблицаОтборов.Добавить();
	СтрокаТаблицы.ИмяПоля               = "Организация";
	СтрокаТаблицы.Синоним               = "Организация";
	СтрокаТаблицы.Использование         = Ложь; 
	СтрокаТаблицы.ВидСравнения = "равно";
	СтрокаТаблицы.ЗначениеОтбора = "";
	СтрокаТаблицы.ЗначениеОтбораСиноним = "";
	
	СтрокаТаблицы.СписокЗначенийВидСравнения = Новый СписокЗначений;
	СтрокаТаблицы.СписокЗначенийВидСравнения.Добавить("равно", "равно"); 
	СтрокаТаблицы.СписокЗначенийВидСравнения.Добавить("не равно", "не равно"); 
	СтрокаТаблицы.СписокЗначенийВидСравнения.Добавить("содержит", "содержит"); 
	//Контрагент
	СтрокаТаблицы = ТаблицаОтборов.Добавить();
	СтрокаТаблицы.ИмяПоля               = "Контрагент";
	СтрокаТаблицы.Синоним               = "Контрагент";
	СтрокаТаблицы.Использование         = Ложь; 
	СтрокаТаблицы.ВидСравнения = "равно";
	СтрокаТаблицы.ЗначениеОтбора = "";
	СтрокаТаблицы.ЗначениеОтбораСиноним = "";                                                

	СтрокаТаблицы.СписокЗначенийВидСравнения = Новый СписокЗначений;
	СтрокаТаблицы.СписокЗначенийВидСравнения.Добавить("равно", "равно"); 
	СтрокаТаблицы.СписокЗначенийВидСравнения.Добавить("не равно", "не равно"); 
	СтрокаТаблицы.СписокЗначенийВидСравнения.Добавить("содержит", "содержит"); 
	
	 //Тип
	СтрокаТаблицы = ТаблицаОтборов.Добавить();
	СтрокаТаблицы.ИмяПоля               = "Тип";
	СтрокаТаблицы.Синоним               = "Тип документа";
	СтрокаТаблицы.Использование         = Ложь; 
	СтрокаТаблицы.ВидСравнения = "равно";
	СтрокаТаблицы.ЗначениеОтбора = "";
	СтрокаТаблицы.ЗначениеОтбораСиноним = "";
	
	СтрокаТаблицы.СписокЗначенийВидСравнения = Новый СписокЗначений;
	СтрокаТаблицы.СписокЗначенийВидСравнения.Добавить("равно", "равно"); 
	СтрокаТаблицы.СписокЗначенийВидСравнения.Добавить("не равно", "не равно"); 
	
	СтрокаТаблицы.СписокЗначенийЗначениеОтбора = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из Элементы.Шаблон.СписокВыбора Цикл
		СтрокаТаблицы.СписокЗначенийЗначениеОтбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	//"Дата документа с"
	СтрокаТаблицы = ТаблицаОтборов.Добавить();
	СтрокаТаблицы.ИмяПоля               = "ДатаС";
	СтрокаТаблицы.Синоним               = "Дата документа начальная";
	СтрокаТаблицы.Использование         = Ложь; 
	СтрокаТаблицы.ВидСравнения = "равно";
	СтрокаТаблицы.ЗначениеОтбора = НачалоГода(ТекущаяДата());
	СтрокаТаблицы.ЗначениеОтбораСиноним = СтрокаТаблицы.ЗначениеОтбора;

	СтрокаТаблицы.СписокЗначенийВидСравнения = Новый СписокЗначений;
	СтрокаТаблицы.СписокЗначенийВидСравнения.Добавить("равно", "равно"); 

	//"Дата документа по"
	СтрокаТаблицы = ТаблицаОтборов.Добавить();
	СтрокаТаблицы.ИмяПоля               = "ДатаПо";
	СтрокаТаблицы.Синоним               = "Дата документа конечная";
	СтрокаТаблицы.Использование         = Ложь; 
	СтрокаТаблицы.ВидСравнения = "равно";
	СтрокаТаблицы.ЗначениеОтбора = КонецДня(ТекущаяДата());
	СтрокаТаблицы.ЗначениеОтбораСиноним = СтрокаТаблицы.ЗначениеОтбора;

	СтрокаТаблицы.СписокЗначенийВидСравнения = Новый СписокЗначений;
	СтрокаТаблицы.СписокЗначенийВидСравнения.Добавить("равно", "равно"); 

КонецПроцедуры


&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если Найти(ИсточникВыбора.ИмяФормы, "УпрФормаНастройкаСортировки") Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаСортировки.Очистить();
		
		// Заполняем коллекцию формы полученными настройками.
		Для Каждого СтрокаТаблицы Из ВыбранноеЗначение.ТаблицаСортировки Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаСортировки.Добавить(), СтрокаТаблицы);
		КонецЦикла;
		Если ВыбранноеЗначение.Свойство("ТаблицаОтборов") Тогда
			ТаблицаОтборов.Очистить();
			Для Каждого СтрокаТаблицы Из ВыбранноеЗначение.ТаблицаОтборов Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаОтборов.Добавить(), СтрокаТаблицы);
			КонецЦикла;
			ТекущаяСтраницаСписка = 1;
		    Обновить();
			ОтобразитьОтборы();
		Иначе
			СтрокаСортировки = ПолучитьПоляСортировки();
			ТаблицаДанных.Сортировать(СтрокаСортировки);
			ЗаполнитьДеревоДокументовВызовСервера();
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьОтборы()
	
	КолОтборов = 0;
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить("УСТАНОВЛЕНЫ ОТБОРЫ: ");
	Для Каждого ЭлементОтбора Из ТаблицаОтборов Цикл
		Если ЭлементОтбора.Использование Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ЭлементОтбора.Синоним, Новый Шрифт(,8,,Истина)));
			ВидСравненияЗнач = ЭлементОтбора.СписокЗначенийВидСравнения.НайтиПоЗначению(ЭлементОтбора.ВидСравнения).Представление;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" " + НРег(ВидСравненияЗнач) + " ", Новый Шрифт(,8,,Истина)));
			Если ТипЗнч(ЭлементОтбора.ЗначениеОтбораСиноним) = Тип("Дата") Тогда
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Формат(ЭлементОтбора.ЗначениеОтбораСиноним,"ДЛФ=Д"), Новый Шрифт(,8,Истина)));
			Иначе
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(ЭлементОтбора.ЗначениеОтбораСиноним), Новый Шрифт(,8,Истина)));
			КонецЕсли;
			МассивСтрок.Добавить("; ");
			КолОтборов = КолОтборов +1;
		КонецЕсли;
	КонецЦикла;
	Элементы.УстановленныеОтборы.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	Элементы.УстановленныеОтборы.Видимость = (КолОтборов <> 0);
	
КонецПроцедуры


////////////////////Организации и доступы

&НаКлиенте
Процедура ОргДоступы(Команда)
	
	ФормаДоступа = ПолучитьФорму(ПрефиксИмениФорм + "УпрФормаДоступа", , ЭтаФорма);
	ФормаДоступа.ЗакрыватьПриЗакрытииВладельца = Истина;
	Если НЕ ФормаДоступа.Открыта() Тогда
		ФормаДоступа.Открыть(); 
	Иначе
		ФормаДоступа.Активизировать(); 
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОтветНаВопросДоступовОрганизаций(Ответ, Параметры) Экспорт
	
	Если Ответ = "Экспорт" Тогда 	
		ОрганизацииЗапрос = ПолучитьОрганизации();	
		Для Каждого ЭлементМассива из ОрганизацииЗапрос Цикл		
			СтруктураПараметров = Новый Структура("OrganizationName, OrganizationINN, OrganizationKPP", ЭлементМассива.Наименование, ЭлементМассива.ИНН, ЭлементМассива.КПП);
			СтрокаЗапроса = "/adl42/hs/api_v1/AccountOrganizations/Add";
			ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", СтруктураПараметров);
			Если ПараметрыОтвета.КодОтвета = 200 Тогда
				ОргИД = ПараметрыОтвета.СтруктураОтвета.AccountOrganizationID;
			Иначе
				
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = ПараметрыОтвета.СтруктураОтвета.Description;
				СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
				СообщениеПользователю.Сообщить()

			КонецЕсли;  
		КонецЦикла;
		ЗаполнитьСписокОрганизаций();
		
	ИначеЕсли Ответ = "Форма" Тогда
		ОргДоступы(Неопределено);
	ИначеЕсли Ответ = "Отказ" Тогда
		ОтказЗаполненияСпискаОрганизаций = Истина;
	ИначеЕсли Ответ = "Отмена" Тогда
  		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Функции докархива будут недоступны Настройте доступы пользователей к документам организаций!";
		СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
		СообщениеПользователю.Сообщить();

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОрганизации()Экспорт
	
	Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.ИНН,
		|	Организации.Наименование,
		|	Организации.КПП
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления";
		
		Выборка = Запрос.Выполнить().Выгрузить();
		
		РезультатЗапроса = ПреобразоватьТаблицуЗначенийВМассивСтруктур(Выборка);
	
	Возврат РезультатЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ЖивойПоиск(Команда)
	
	Элементы.Поиск.Видимость = Истина;
	Элементы.ЖивойПоиск.Видимость = Ложь;
	Элементы.ОтменитьЖивойПоиск.Видимость = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЖивойПоиск(Команда)
	
	Элементы.Поиск.Видимость = Ложь;
	Элементы.ЖивойПоиск.Видимость = Истина;
	Элементы.ОтменитьЖивойПоиск.Видимость = Ложь;    
	ПолеЖивогоПоиска = "";
	Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоиск(Команда)
	
	Если НЕ ПустаяСтрока(ПолеЖивогоПоиска) Тогда
		Обновить();
	Иначе
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Введите строку поиска!";
		СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
	
КонецПроцедуры




&НаКлиенте
Процедура Сохранить(Команда)

	СохранитьИзмененияДокумента(ДокументИД, Ложь);
	
КонецПроцедуры

// Помещает в архив неатрибутированные документы или сделки с документами
&НаКлиенте
Процедура ПоместитьВАрхив()
	
	Если ДокументОрганизация = "" ИЛИ ДокументКонтрагент = "" ИЛИ ДокументТип = "" ИЛИ ДокументДата = Дата("00010101") ИЛИ ДокументОрганизацияИД = "" Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Документ не может быть помещен в архив, т.к. не заполнены обязательные поля!";
		СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецЕсли;

	Если СохранитьИзмененияДокумента(ДокументИД, Истина) Тогда
		ЗаполнитьДеревоДокументовВызовСервера();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Функция СохранитьИзмененияДокумента(ДокументИД, ВАрхив)
	
	Если АктивнаяСтрокаДерева = Неопределено Тогда
		АктивнаяСтрокаДерева = Элементы.ДеревоДокументов.ТекущиеДанные; 
	КонецЕсли;
	
	Если ДокументДата > '39991231000000' Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Дата больше максимально возможной! Документ не помещен в архив";
		СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
		СообщениеПользователю.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Документ = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", АктивнаяСтрокаДерева.ДокументИД, 1))[0];

	СтруктураКолонок = Новый Структура("ДокументОрганизация, ДокументОрганизацияИД, ДокументКонтрагент, ДокументКомментарий, ДокументСумма, ДокументДата, ДокументТип, ДокументНомер, ДокументИсходящий, ДокументОригинал",
	"Организация", "ОрганизацияИД", "Контрагент", "Комментарий", "Сумма", "Дата", "Тип", "Номер", "Исходящий", "Оригинал");	

	СтруктураИменADL = Новый Структура("ДокументОрганизация, ДокументОрганизацияИД, ДокументКонтрагент, ДокументКомментарий, ДокументСумма, ДокументДата, ДокументТип, ДокументНомер, ДокументИсходящий, ДокументОригинал",
	"Organization", "AccountOrganizationID", "Contractor", "Comment", "Sum", "DocumentDate", "DocumentType", "DocumentNumber", "Emanating", "Original");	

	СтруктураПараметров = Новый Структура;
	
	Для Каждого Колонка Из СтруктураКолонок Цикл
		//Если Документ[Колонка.Значение] <> ЭтотОбъект[Колонка.Ключ] Тогда
			СтруктураПараметров.Вставить(СтруктураИменADL[Колонка.Ключ], ЭтотОбъект[Колонка.Ключ]); 
		//КонецЕсли;
	КонецЦикла;
	СтруктураПараметров.Вставить("DocumentID", ДокументИД);
	СтруктураПараметров.Вставить("AccountOrganizationID",ДокументОрганизацияИД);
	//СтруктураПараметров.Вставить("Organization",ДокументОрганизация);
	//СтруктураПараметров.Вставить("Comment", ДокументКомментарий);
	//СтруктураПараметров.Вставить("Contractor",ДокументКонтрагент);
	//СтруктураПараметров.Вставить("Sum",ДокументСумма);
	//СтруктураПараметров.Вставить("DocumentDate", ДокументДата);
	//СтруктураПараметров.Вставить("DocumentType", ДокументТип);
	//СтруктураПараметров.Вставить("DocumentNumber", ДокументНомер);
	//СтруктураПараметров.Вставить("Emanating", ДокументИсходящий);
	//СтруктураПараметров.Вставить("Original", ДокументОригинал);
	
	Если ВАрхив Тогда
		СтруктураПараметров.Вставить("Status", 1);
		Документ.Атрибутирован = Истина;
	КонецЕсли;
	
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocuments/SetDocumentProperties";
	ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", СтруктураПараметров);
	
	Если Не ПараметрыОтвета.КодОтвета = 200 Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Сохранение документа: " + ПараметрыОтвета.СтруктураОтвета.Description;
		СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
		СообщениеПользователю.Сообщить();
	Иначе
		
		Документ.Организация = ДокументОрганизация;
		Документ.Контрагент = ДокументКонтрагент;
		Документ.Комментарий = ДокументКомментарий;
		Документ.Сумма = ДокументСумма;
		Документ.Тип = ДокументТип;
		Документ.Дата = ДокументДата;
		Документ.Номер = ДокументНомер;
		Документ.Исходящий = ДокументИсходящий;
		Документ.Оригинал = ДокументОригинал;
		Документ.ОрганизацияИД = ДокументОрганизацияИД;
		Если ВАрхив Тогда
			Документ.Атрибутирован = Истина;
		КонецЕсли;
		//Если ВАрхив И (ДокументСсылкаНаДокумент = Неопределено ИЛИ ДокументСсылкаНаДокумент.Пустая()) Тогда
		//	СтруктураСообщений = Новый Структура();
		//	СтруктураСообщений.Вставить("ИмяШаблона", ИмяШаблона); 
		//	Если Документ.Шапка = Неопределено Тогда
		//		ПолучениеДокументаПередВАрхив(ДокументИД);
		//	КонецЕсли;
		//	Если НЕ Документ.Шапка = Неопределено Тогда
		//		Результат = ПроверкаГотовностиКЗагрузкеИПоискДублей(ТаблицаДанных, ДокументИД, СтруктураСообщений, Истина);
		//		ДокументСсылкаНаДокумент = Результат.СтараяСсылка;
		//	КонецЕсли;
		//КонецЕсли;
		
		Если ДокументСсылкаНаДокумент <> Неопределено И НЕ ДокументСсылкаНаДокумент.Пустая() Тогда
			СтруктураСсылки = ТипСсылки(ДокументСсылкаНаДокумент);
			СтруктураПараметров = Новый Структура("DocumentID, LinkDatabaseID, LinkID, LinkType, DocumentName", ДокументИД, ИДБазыДанныхПользователя, СтруктураСсылки.СсылкаИД, СтруктураСсылки.СсылкаТип, Строка(ДокументСсылкаНаДокумент)); 
			СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocumentLinks/Add";
			ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Post", СтруктураПараметров);                   
			Если не ПараметрыОтвета.КодОтвета = 200 Тогда
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст ="Ошибка при сохранении ссылки в архиве: " + ПараметрыОтвета.СтруктураОтвета.Description;
				СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
				СообщениеПользователю.Сообщить();
			КонецЕсли;
		Иначе
			СсылкаДокументОчистка(Неопределено, Истина);
		КонецЕсли;

		Если ДокументСсылкаНаДокумент <> Неопределено И НЕ ДокументСсылкаНаДокумент.Пустая() И Документ.СсылкаДокумент <> ДокументСсылкаНаДокумент Тогда
			Документ.СсылкаДокумент = ДокументСсылкаНаДокумент;
			Документ.СтатусОбработки = "Загружен";
			СтруктураСсылки = ТипСсылки(ДокументСсылкаНаДокумент);
			Документ.СсылкаИД = СтруктураСсылки.СсылкаИД;
			Документ.СсылкаТип = СтруктураСсылки.СсылкаТип;
			
			Если ДокументСсылкаНаДокумент <> Неопределено И НЕ ДокументСсылкаНаДокумент.Пустая() Тогда
				АктивнаяСтрокаДерева.СсылкаДокумент = ДокументСсылкаНаДокумент;
				АктивнаяСтрокаДерева.СтатусСтроки = 7;
				Элементы.СсылкаДокумент.КнопкаОткрытия = Истина;
				Элементы.СсылкаДокумент.КнопкаОчистки = Истина;
			Иначе
				АктивнаяСтрокаДерева.СтатусСтроки = 0;
				Элементы.СсылкаДокумент.КнопкаОткрытия = Истина;
				Элементы.СсылкаДокумент.КнопкаОчистки = Истина;
			КонецЕсли;
		ИначеЕсли ДокументСсылкаНаДокумент = Неопределено ИЛИ (ДокументСсылкаНаДокумент <> Неопределено И ДокументСсылкаНаДокумент.Пустая()) Тогда
				АктивнаяСтрокаДерева.СтатусСтроки = 0;
				Элементы.СсылкаДокумент.КнопкаОткрытия = Истина;
				Элементы.СсылкаДокумент.КнопкаОчистки = Истина;
		КонецЕсли;
		Если ВАрхив Тогда
			КоличествоДокументовВАрхиве = КоличествоДокументовВАрхиве + 1;
		КонецЕсли;

		ИзмененыРеквизиты = Ложь;
	КонецЕсли;
	
	Возврат истина;

КонецФункции

&НаКлиенте
Процедура ТипОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДокументТипОписание = Неопределено;
	ДокументТип = "";
	ИзмененыРеквизиты = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДокументТип =  ВыбранноеЗначение;
	//Для Каждого СтруктураТипа Из СтруктураТиповДокументов Цикл
	//	Если СтруктураТипа.Значение.Описание = ВыбранноеЗначение Тогда
	//		ДокументТип = СтруктураТипа.Ключ;
	//	КонецЕсли;
	//КонецЦикла;
	//
	ИзмененыРеквизиты = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРеквизита(Элемент)
	
	ИзмененыРеквизиты = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	ДокументОрганизация = ЭлементСписка.Представление;
	ДокументОрганизацияИД = ЭлементСписка.Значение;
	Элемент.ЦветТекста = Новый Цвет(51, 51, 51);
	ИзмененыРеквизиты = Истина;

КонецПроцедуры


&НаКлиенте
Процедура ОрганизацияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Элемент.ЦветТекста = Новый Цвет(255, 0, 0);
	Для Каждого ЭлементСписка Из Элемент.СписокВыбора Цикл
		Если ЭлементСписка.Представление = Текст Тогда
			Элемент.ЦветТекста = Новый Цвет(51, 51, 51);
			ДокументОрганизацияИД = ЭлементСписка.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрНажатие(Элемент)
	Элементы.ПросмотрГруппа.Видимость = НЕ Элементы.ПросмотрГруппа.Видимость;
	АктивнаяСтрокаДерева = Неопределено;
	ДеревоДокументовПриАктивизацииЯчейки(Элементы.ДеревоДокументов);
КонецПроцедуры


&НаКлиенте
Процедура СтатусыНажатие(Элемент)
	
	Если НЕ ADL И Элемент.Имя = "ВсеДокАрхив" Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Сервис ДокАрхив не подключен. Для подключения обратитесь в службу поддержки";
		СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
		СообщениеПользователю.Сообщить();
		Показывать = "Все";
		СтатусыНажатие(Элементы.ВсеЗагрузкаДокументов);
	Иначе
		Если Показывать = "" Тогда
			Показывать = "Все";
		КонецЕсли;
		Если Показывать = "Все" Тогда
			Элементы.ВсеЗагрузкаДокументов.ЦветФона = Новый Цвет(255, 250, 217);
			Элементы.ВсеДокАрхив.ЦветФона = Новый Цвет(255, 250, 217);
		Иначе
			Элементы[Показывать].ЦветФона = Новый Цвет(255, 250, 217);
		КонецЕсли;
		
		Если НЕ Показывать = "ВОбработке" Тогда
			ОбновитьДанные = Истина;
		Иначе
			ОбновитьДанные = Ложь;
		КонецЕсли;
		//
		//Если Показывать = "Архив" Или Элемент.Имя = "Архив" Тогда
		//	ОбновитьДанные = Истина;
		//Иначе
		//	ОбновитьДанные = Ложь;
		//КонецЕсли;;
		Если Найти(Элемент.Имя, "Все") = 1 Тогда
			Показывать = "Все";
		Иначе
			Показывать = Элемент.Имя;	
		КонецЕсли;
		
		Элемент.ЦветФона = Новый Цвет(230, 235, 150);
		Элементы.КнопкиАрхива.Видимость = ADL И (Элемент.Имя = "ВсеДокАрхив" ИЛИ Элемент.Имя = "Архив" ИЛИ Элемент.Имя = "НеАрхив");
		Элементы.Атрибутирован.Видимость = ADL И Элемент.Имя = "ВсеДокАрхив"; 
		
		ТекущаяСтраницаСписка = 1;
		Если ОбновитьДанные Тогда
			Обновить();
		Иначе
			ЗаполнитьДеревоДокументовВызовСервера();
			ИзменитьДоступностьКнопок();
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРеквизитыДокументаНажатие(Элемент)
	
	Элементы.Атрибуты.Видимость = НЕ Элементы.Атрибуты.Видимость;

КонецПроцедуры


&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	КоличествоПомеченных = ТаблицаДанных.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество();
	
	МассивИД = Новый Массив;	
	ДокументыДерева = ДеревоДокументов.ПолучитьЭлементы();
	ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	Если КоличествоПомеченных > 0 Тогда
		Для Каждого СтрокаДокумента Из ДокументыДерева Цикл
			Если СтрокаДокумента.Пометка Тогда
				МассивИД.Добавить(СтрокаДокумента.ДокументИД);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Элементы.ДеревоДокументов.ТекущиеДанные <> Неопределено Тогда
		МассивИД.Добавить(Элементы.ДеревоДокументов.ТекущиеДанные.ДокументИД);
	КонецЕсли;

	Для Каждого ИД Из МассивИД Цикл 
		ОткрытьФайлДокумента(ИД);
	КонецЦикла;
	
КонецПроцедуры

// типфайла - тип с точкой
&НаКлиенте
Функция ПолучитьАссоциациюДляТипаФайла(ТипФайла, ДополнятьТекстомПроверки = Истина)
	
	Данные = "";
	
	#Если НЕ ВебКлиент Тогда
		ИмяВрФайла = ПолучитьИмяВременногоФайла("txt");
		КомандаСистемы("assoc "+ТипФайла+" >> "+ИмяВрФайла);
		Если ДополнятьТекстомПроверки Тогда
			КомандаСистемы("echo qwerty >> "+ИмяВрФайла);
		КонецЕсли;
		ТекстовыйФайл = Новый ЧтениеТекста(ИмяВрФайла);
		Данные = ТекстовыйФайл.Прочитать();
		ТекстовыйФайл.Закрыть();
	#КонецЕсли

	Возврат Данные
		
КонецФункции // ПолучитьАссоциациюДляТипаФайла()
	
&НаКлиенте
Процедура ОткрытьФайлДокумента(ИД) Экспорт
	
	// Масленников Е. 2018.05.16 (
	//Если beta Тогда
	//	HTTPСсылкаФайл = "https://docs.google.com/viewer?embedded=true&url=http://beta-adl.42clouds.com/adl42/hs/api_v1/AccountEDocuments/GetDocumentFile/" + ИД + "?TID=" + ESDLТокен;
	//Иначе
	//	HTTPСсылкаФайл = "https://docs.google.com/viewer?embedded=true&url=http://adl.42clouds.com/adl42/hs/api_v1/AccountEDocuments/GetDocumentFile/" + ИД + "?TID=" + ESDLТокен;
	//КонецЕсли;
	//ОписаниеОповещения = Новый ОписаниеОповещения("ПустойОбработчикОповещения", ЭтаФорма);
	//НачатьЗапускПриложения(ОписаниеОповещения, HTTPСсылкаФайл);

	Если beta Тогда
		HTTPСсылкаФайл = "http://beta-adl.42clouds.com/adl42/hs/api_v1/AccountEDocuments/GetDocumentFile/" + ИД + "?TID=" + ESDLТокен; 
	Иначе
		HTTPСсылкаФайл = "http://adl.42clouds.com/adl42/hs/api_v1/AccountEDocuments/GetDocumentFile/" + ИД + "?TID=" + ESDLТокен; 
	КонецЕсли;
	
	Если Элементы.ДеревоДокументов.ТекущиеДанные<>Неопределено Тогда
		НаименованиеДокумента = Элементы.ДеревоДокументов.ТекущиеДанные.Наименование;
		СтрОтбора = Новый Структура("ДокументИД", ИД);
		СтрокиДанных = ТаблицаДанных.НайтиСтроки(СтрОтбора);
		Если СтрокиДанных.Количество()>0 Тогда
			СтрокаДанных = СтрокиДанных[0];
			ТипФайла = СтрокаДанных.ТипФайла;
		Иначе
			ТипФайла = "";
		КонецЕсли;
	КонецЕсли;
	Расширение = "."+НРег(ТипФайла);
	
	ИспользоватьОткрытиеГуглДиска = ЭтоВебКлиент; // Если вебклиент или не XLS файл и нет программы на ПК
	
	Если НЕ ЭтоВебКлиент И ТипФайла <> "XLS" И ТипФайла <> "XLSX" Тогда 
		СтрОтбора = Новый Структура("Расширение", Расширение);
		Строки = ТаблицаСоответствийРасширенийИПрограмм.НайтиСтроки(СтрОтбора);
		Если Строки.Количество()=0 Тогда
			
			к=0;
			Данные = "";
			Пока Найти(Данные, "qwerty")=0 и к<4 Цикл			
				Данные = ПолучитьАссоциациюДляТипаФайла(Расширение);
				к=к+1;
			КонецЦикла;
			
			Если Найти(Данные, "qwerty")=0 Тогда 
				Программа = "отсутствует";
			ИначеЕсли СокрЛП(Данные) = "qwerty" Тогда
				Программа = "отсутствует";
			Иначе
				Программа = Данные;		
			КонецЕсли;
			
			НоваяСтрока = ТаблицаСоответствийРасширенийИПрограмм.Добавить();
			НоваяСтрока.Расширение = Расширение;
			НоваяСтрока.Программа = Программа;
			
		Иначе	
			НоваяСтрока = Строки[0];
		КонецЕсли;
		
		Если НоваяСтрока.Программа = "отсутствует" ИЛИ НЕ ЗначениеЗаполнено(НоваяСтрока.Программа) Тогда		
			ИспользоватьОткрытиеГуглДиска = Истина;		
		КонецЕсли;	
		
	КонецЕсли;                                                       
	
	Если ИспользоватьОткрытиеГуглДиска Тогда 
		HTTPСсылкаФайл = "https://docs.google.com/viewer?embedded=true&url=" + HTTPСсылкаФайл;
	КонецЕсли;

	Если ИспользоватьОткрытиеГуглДиска Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПустойОбработчикОповещения", ЭтаФорма);
		НачатьЗапускПриложения(ОписаниеОповещения, HTTPСсылкаФайл);
		
	ИначеЕсли ТипФайла = "XLS" ИЛИ ТипФайла = "XLSX" ИЛИ ТипФайла = "PDF" ИЛИ ТипФайла = "JPG" Тогда	
		
		Парам = Новый Структура("ПолноеИмяФайла, НаименованиеДокумента, ТипФайла", HTTPСсылкаФайл, НаименованиеДокумента, ТипФайла);
		ОткрытьФорму(ПрефиксИмениФорм + "ФормаПросмотраДокумента", Парам, ЭтаФорма, Новый УникальныйИдентификатор);         
		                                                          
	Иначе
		
		ПолныйПутьКФайлу = КаталогВременныхФайлов() + НаименованиеДокумента + Расширение;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеНачатьКопированиеФайла", ЭтаФорма);
		НачатьКопированиеФайла(ОписаниеОповещения, HTTPСсылкаФайл, ПолныйПутьКФайлу);
		
	КонецЕсли;	
	// Масленников Е. 2018.05.16 )                             

КонецПроцедуры

&НаКлиенте
Процедура ПослеНачатьКопированиеФайла(ПолныйПутьКФайлу, ДопПараметры = Неопределено) Экспорт
	Если ПолныйПутьКФайлу <> Неопределено И ПолныйПутьКФайлу <> "" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПустойОбработчикОповещения", ЭтаФорма);
		НачатьЗапускПриложения(ОписаниеОповещения, ПолныйПутьКФайлу);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВидДокумента(Знач ТипСсылки)
	
	Если Найти(ТипСсылки, "ДокументСсылка.") = 1 Тогда
		ВидДокумента = СтрЗаменить(ТипСсылки, "ДокументСсылка.", "Документ.");
	ИначеЕсли Найти(ТипСсылки, "СправочникСсылка.") = 1 Тогда
		ВидДокумента = СтрЗаменить(ТипСсылки,  "СправочникСсылка.", "Справочник.");
	ИначеЕсли Найти(ТипСсылки, "ПеречПеречислениеСсылкаисление.") = 1 Тогда
		ВидДокумента = СтрЗаменить(ТипСсылки, "ПеречислениеСсылка.", "Перечисление.");
	ИначеЕсли Найти(ТипСсылки, "ПланВидовХарактеристикСсылка.") = 1 Тогда
		ВидДокумента = СтрЗаменить(ТипСсылки, "ПланВидовХарактеристикСсылка.", "ПланВидовХарактеристик.");
	Иначе 
		ВидДокумента = ТипСсылки;
	КонецЕсли;
	
	Возврат ВидДокумента; 
	
КонецФункции

&НаКлиенте
Функция РеквизитыТЧДобавитьПозициюВызовСервера(ИД, Индекс = 0) Экспорт
	Возврат РеквизитыТЧДобавитьПозицию(ИД, Индекс);	
КонецФункции

// Процедура выполняет добавление строки в табличную часть и её запролнение
//
&НаСервере
Функция РеквизитыТЧДобавитьПозицию(ИД, Индекс = 0) 

	ТаблицаДанныхЗначение = ДанныеФормыВЗначение(ТаблицаДанных, Тип("ТаблицаЗначений"));
	//Документ = ТаблицаДанныхЗначение.Найти(ИД, "ДокументИД");
	Документ = ТаблицаДанныхЗначение.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ИД, 1))[0];
	ТЧ = Документ.ТЧ;
	СтрокаШапки = Документ.Шапка;
	
	СтруктураОписанияДокумента = Неопределено;
	СтруктураОписанийДокументов.Свойство(Документ.ВидДокумента, СтруктураОписанияДокумента);
	
	Для Каждого СтруктураСтроки Из ТЧ Цикл
		ИндексСтроки =  Число(СтрЗаменить(СтруктураСтроки.Ключ, "Стр", ""));
		Если ИндексСтроки > Индекс Тогда
			Индекс = ИндексСтроки;	
		КонецЕсли;
	КонецЦикла;
	Индекс = Индекс + 1;
	ТЧ.Вставить(?(Индекс = 0 ,"Стр0",("Стр" + Формат(Индекс, "ЧГ=0"))), Новый Структура());
	НоваяСтрока = ТЧ[?(Индекс = 0 ,"Стр0",("Стр" + Формат(Индекс, "ЧГ=0")))];

	Для Каждого ОписаниеРеквизита Из СтруктураОписанияДокумента.ТЧ Цикл					
		ТекущееЗначение = "";
		НоваяСтрока.Вставить(ОписаниеРеквизита.Идентификатор, Новый Структура("ИсходноеЗначение, СопоставленноеЗначение, ИтоговоеЗначение, СпособСопоставления, ВариантыПодбора, ДопИнфо, Равен, ВремяСопоставления"));
		Если ОписаниеРеквизита.Выражение <> "" И Найти(ОписаниеРеквизита.Выражение, "[") = 0 Тогда
			ИмяСтолбца = ОписаниеРеквизита.Выражение; 
		КонецЕсли;
		ЗаполнениеРеквизита(ОписаниеРеквизита, ТекущееЗначение, СтрокаШапки, НоваяСтрока);
		НоваяСтрока[ОписаниеРеквизита.Идентификатор].Вставить("ИсходноеЗначение", ТекущееЗначение);
		СопоставлениеРеквизита(ОписаниеРеквизита, Документ, НоваяСтрока);	
	КонецЦикла;
	
	Возврат НоваяСтрока;
	
КонецФункции


&НаКлиенте
Процедура КопироватьВБуфер(Команда)
		
	Если Элементы.ДеревоДокументов.ТекущиеДанные <> Неопределено Тогда
		ИД = Элементы.ДеревоДокументов.ТекущиеДанные.ДокументИД;
		Если beta Тогда
			HTTPСсылкаФайл = "https://docs.google.com/viewer?embedded=true&url=http://beta-adl.42clouds.com/adl42/hs/api_v1/AccountEDocuments/GetDocumentFile/" + Элементы.ДеревоДокументов.ТекущиеДанные.ДокументИД + "?TID=" + ESDLТокен;
		Иначе
			HTTPСсылкаФайл = "https://docs.google.com/viewer?embedded=true&url=http://adl.42clouds.com/adl42/hs/api_v1/AccountEDocuments/GetDocumentFile/" + Элементы.ДеревоДокументов.ТекущиеДанные.ДокументИД + "?TID=" + ESDLТокен;
		КонецЕсли;
		Элементы.КопироватьВБуфер1.Документ.ParentWindow.ClipboardData.SetData("Text", HTTPСсылкаФайл);            
	КонецЕсли;

КонецПроцедуры


// Процедура позволяет сравнить значения версии программы
//
&НаСервереБезКонтекста
Функция СравнитьВерсии(Знач Версия1, Знач Версия2) Экспорт
	
	Версия1Меньше=Ложь;
	Пока Версия1<>"" И Версия2<>"" Цикл
		ПозицияРазделителяРазряда1=Найти(Версия1, ".");
		Если ПозицияРазделителяРазряда1 = 0 Тогда
			Разряд1 = Версия1;
			Версия1 = ""
		Иначе
			Разряд1 = Лев(Версия1,ПозицияРазделителяРазряда1-1);
			Версия1 = Сред(Версия1, ПозицияРазделителяРазряда1+1);
		КонецЕсли;
		Разряд1Число = Число(Разряд1);
		ПозицияРазделителяРазряда2=Найти(Версия2, ".");
		Если ПозицияРазделителяРазряда2 = 0 Тогда
			Разряд2 = Версия2;
			Версия2 = ""
		Иначе
			Разряд2 = Лев(Версия2,ПозицияРазделителяРазряда2-1);
			Версия2 = Сред(Версия2, ПозицияРазделителяРазряда2+1);
		КонецЕсли;
		Разряд2Число = Число(Разряд2);
		Если Разряд1Число<Разряд2Число Тогда
			Версия1Меньше=Истина;
			Прервать;
		ИначеЕсли Разряд1Число>Разряд2Число Тогда
			Версия1Меньше=Ложь;
			Прервать;
		КонецЕсли;;
	КонецЦикла;
	Возврат Версия1Меньше;		
	
КонецФункции


&НаСервере
Функция ДобавитьОбработку(АдресФайла)
	
	Попытка
		
		ВПФ = Справочники.ДополнительныеОтчетыИОбработки.СоздатьЭлемент();
		ВПФ.БезопасныйРежим	= Истина;
		ВПФ.Версия = "1.2";
		ВПФ.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма;
		ВПФ.ИмяОбъекта = "Открыть файл документа";
		ВПФ.ИмяФайла = "ВнешняяПечатнаяФормаИсходныйдокумент.epf";
		ВПФ.ИспользоватьДляФормыОбъекта	= Истина;
		ВПФ.ИспользоватьДляФормыСписка = Ложь;
		ВПФ.ИспользуетХранилищеВариантов = Ложь;
		ВПФ.Наименование = "Efsol: Первичный документ";
		ВПФ.Ответственный = Справочники.Пользователи.НайтиПоНаименованию(ПользовательИнфБазы, Истина);

		ВПФ.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется;
		ВПФ.РежимСовместимостиРазрешений = Перечисления.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок.Версия_2_1_3;
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
		ВПФ.ХранилищеОбработки = Новый ХранилищеЗначения(ДвоичныеДанные);
		ВПФ.ХранилищеНастроек = ВПФ.ХранилищеОбработки;
		
		СтрокаКоманды = ВПФ.Команды.Добавить();
		СтрокаКоманды.Идентификатор = "Efsol: Первичный документ";
		СтрокаКоманды.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.ОткрытиеФормы;
		СтрокаКоманды.Модификатор = "ПечатьXML";
		СтрокаКоманды.ПоказыватьОповещение = Ложь;
		СтрокаКоманды.Представление = "Efsol: Первичный документ";
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИдентификаторыОбъектовМетаданных.Ссылка
		|ИЗ
		|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
		|ГДЕ
		|	ИдентификаторыОбъектовМетаданных.Родитель.Наименование = ""Документы""";
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаНазначение = РезультатЗапроса.Выбрать();
		Пока ВыборкаНазначение.Следующий() Цикл
			СтрокаНазначения = ВПФ.Назначение.Добавить();
			СтрокаНазначения.ОбъектНазначения = ВыборкаНазначение.Ссылка;
		КонецЦикла;
		
		ВПФ.Записать();
		
		Возврат Истина;
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;

КонецФункции

&НаСервере
Функция ВПФДобавлена()
	
	ВидОбработки = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", "Efsol: Первичный документ");
	Запрос.УстановитьПараметр("Вид", Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование
		|	И ДополнительныеОтчетыИОбработки.Вид = &Вид";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ОбработкаУстановлена = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка.Версия = "1.2" И Не Выборка.Ссылка.ПометкаУдаления Тогда
			ОбработкаУстановлена = Истина;
		Иначе
			Попытка
				ОбработкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ОбработкаОбъект.Удалить();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбработкаУстановлена;
		
КонецФункции

&НаКлиенте
Процедура ДобавитьВПФ(Принудительно = Ложь) Экспорт
	
	Если Не ВПФДобавлена() Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Добавить внешнюю печатную форму");
		Кнопки.Добавить("Отмена");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаНаВопрос", ЭтаФорма);
		ТекстВопроса = "Добавить внешнюю печатную форму для открытия первичного документа из меню документа в УС?";
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,, Кнопки[0].Значение, "Добавление внешней печатной формы");
		
	Иначе
		
		ВПФДобавлена = Истина;
		НеДобавлятьВПФ = Ложь;
		
		Если Принудительно Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Внешняя печатная форма ""Efsol: Первичный документ"" добавлена ранее";
			СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
			СообщениеПользователю.Сообщить();
		КонецЕсли;

		Оповестить("ВПФДобавлена");
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПослеОтветаНаВопрос(Ответ, ДопПараметры = Неопределено) Экспорт
	
	Текст = "Добавить внешнюю печатную форму для открытия исходного документа из меню документа в УС можно из настроек программы";
	Если Ответ = "Добавить внешнюю печатную форму" Тогда
		СтрокаЗапроса = "/adl42/hs/api_v1/DocLoaderFiles/GetTheUpdateFile?DocLoaderFileID=ВнешняяПечатнаяФормаИсходныйдокумент";
		ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса,,,,Истина); 
		Если ПараметрыОтвета.КодОтвета Тогда
			ДвоичныеДанные = ПараметрыОтвета.СтруктураОтвета.ДвоичныеДанные;
			АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
			Если ДобавитьОбработку(АдресФайла) Тогда
				ВПФДобавлена = Истина;
				Текст = "Внешняя печатная форма ""Efsol: Первичный документ"" добавлена";
				Оповестить("ВПФДобавлена");
				НеДобавлятьВПФ = Ложь;
			КонецЕсли;
		Иначе
			Текст = "Не найден файл внешней печатной формы." + Символы.ПС + Текст;
		КонецЕсли;
	Иначе
		НеДобавлятьВПФ = Истина;
	КонецЕсли;
	
	СообщениеПользователю = Новый СообщениеПользователю;
	СообщениеПользователю.Текст = Текст;
	СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
	СообщениеПользователю.Сообщить();

КонецПроцедуры

&НаКлиенте
Процедура ЮнитТест() Экспорт
	
	СтрокаПоиска = "ООО, Вася";
	СоответствиеСтрок = Новый Соответствие;
	СоответствиеСтрок.Вставить("катавасия", 41);
	СоответствиеСтрок.Вставить("ООО Вася", 89);
	СоответствиеСтрок.Вставить("Общество с ограниченной ответственностью ""Вася""", 89);
	СоответствиеСтрок.Вставить("ООО, Вася1", 91);

	Если ESDLСтруктураОПФ.Количество() = 0 Тогда
		ЗаполнитьТаблицуОПФ();
	КонецЕсли;
	
	ТекстСообщения = "Совпадение строки """ + СтрокаПоиска + """:";
	ТестПройден = Истина;
	//Тестирование сравнения строк
	Для Каждого СоответствиеСтрока Из СоответствиеСтрок Цикл
		СтрокаСравнения = СоответствиеСтрока.Ключ;
		ЭталонПВ = СоответствиеСтрока.Значение;
		ПВ = ПодсчитатьПроцентВхождения(СтрокаПоиска, СтрокаСравнения, ESDLСтруктураОПФ);
		Если ЭталонПВ <> ПВ Тогда
	    	ТекстСообщения = ТекстСообщения + Символы.ПС + "Эталон: " + ПВ +  "% | " + СтрокаСравнения;
		КонецЕсли;
	КонецЦикла;
	Если ТестПройден Тогда
		ТекстСообщения = "Тест пройден успешно";
	КонецЕсли;
	СообщениеПользователю = Новый СообщениеПользователю;
	СообщениеПользователю.Текст = ТекстСообщения;
	СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
	СообщениеПользователю.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокОрганизаций(ЗаполнитьТаблицуОрганизаций = Ложь) Экспорт
	
	СтрокаЗапроса = "/adl42/hs/api_v1/AccOrgAccess/GetTableByAccountID?AccountID=" + ESDLИДАккаунта;
	ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса);         
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		ТаблицаОрганизаций = ПараметрыОтвета.СтруктураОтвета.TableAccOrgAccess;
		Если НЕ ТаблицаОрганизаций.Количество() = 0 Тогда
			
			Элементы.Организация.СписокВыбора.Очистить();
			Организации.Очистить();
			
			Для Каждого СтрокаДоступа Из ТаблицаОрганизаций Цикл
				
				Если СтрокаДоступа.UserID = ESDLИДПользователя Тогда
					Элементы.Организация.СписокВыбора.Добавить(СтрокаДоступа.AccountOrganizationID, СтрокаДоступа.OrganizationName);
				КонецЕсли;
				
				МассивСтрок = Организации.НайтиСтроки(Новый Структура("ИНН", СтрокаДоступа.OrganizationINN));
				Если МассивСтрок.Количество() = 0 Тогда
					НоваяСтрока = Организации.Добавить();
					Новаястрока.ИДОрганизации	= СтрокаДоступа.AccountOrganizationID;
					Новаястрока.Наименование	= СтрокаДоступа.OrganizationName;
					НоваяСтрока.ИНН				= СтрокаДоступа.OrganizationINN;
					НоваяСтрока.КПП				= СтрокаДоступа.OrganizationKPP;
					НоваяСтрока.Аккаунт			= СтрокаДоступа.OrganizationAccountCaption;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			ЗаполнитьТаблицуОрганизаций = Истина;
			
			
		КонецЕсли;
	Иначе
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = ПараметрыОтвета.СтруктураОтвета.Description;
		СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
		СообщениеПользователю.Сообщить();
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаДокументОчистка(Элемент, СтандартнаяОбработка)
		
	СсылкаНаДокумент = Неопределено;
	
КонецПроцедуры


&НаКлиенте
Процедура ВывестиСписокДокументов(Команда)
	
	МассивВыбранныхСтрок = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭтоСделка, Пометка", 1, Истина));
	
	ТабДок = Новый ТабличныйДокумент;
	
	ТабДок.Область("R1"+"C1").Текст = "Организация";
	ТабДок.Область("R1"+"C2").Текст = "Вид документа";
	ТабДок.Область("R1"+"C3").Текст = "Номер";
	ТабДок.Область("R1"+"C4").Текст = "Дата";
	ТабДок.Область("R1"+"C5").Текст = "Контрагент";
	ТабДок.Область("R1"+"C6").Текст = "Сумма";
	Рамка = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ТабДок.Область("R1C1:R1C6").Обвести(,Рамка,,Рамка);
	ТабДок.Область("R1C1:R1C6").Шрифт = Новый Шрифт(,,Истина);
	
	К=1;
	Для Каждого ТаблицаДанныхСтрокаДокумента Из МассивВыбранныхСтрок Цикл
		
		ТабДок.Область("R"+(К+1)+"C1").Текст = Лев(ТаблицаДанныхСтрокаДокумента.Организация, 100);
		ТабДок.Область("R"+(К+1)+"C2").Текст = ТаблицаДанныхСтрокаДокумента.Тип;
		ТабДок.Область("R"+(К+1)+"C3").Текст = ?(ПустаяСтрока(ТаблицаДанныхСтрокаДокумента.Номер), "", "№" + Лев(ТаблицаДанныхСтрокаДокумента.Номер, 15));
		ТабДок.Область("R"+(К+1)+"C4").Текст = ?(ТаблицаДанныхСтрокаДокумента.Дата <> '00010101', Лев(ТаблицаДанныхСтрокаДокумента.Дата, 10), "");
		ТабДок.Область("R"+(К+1)+"C5").Текст =  Лев(ТаблицаДанныхСтрокаДокумента.Контрагент, 100);
		ТабДок.Область("R"+(К+1)+"C6").Текст = Формат(ТаблицаДанныхСтрокаДокумента.Сумма, "ЧДЦ=2; ЧГ=0");

		К=К+1;
		
	КонецЦикла;
	
	ТабДок.Область("R1"+"C1").ШиринаКолонки = 40;
	ТабДок.Область("R1"+"C2").ШиринаКолонки = 20;
	ТабДок.Область("R1"+"C3").ШиринаКолонки = 15;
	ТабДок.Область("R1"+"C4").ШиринаКолонки = 10;
	ТабДок.Область("R1"+"C5").ШиринаКолонки = 40;
	ТабДок.Область("R1"+"C6").ШиринаКолонки = 15;
	
	ТабДок.Область("R1"+"C1").АвтоВысотаСтроки = Истина;
	ТабДок.Область("R1"+"C5").АвтоВысотаСтроки = Истина;
	
	ТабДок.Показать();
	
	ТабДок.Показать("Список документов");
	
КонецПроцедуры


//	Масленников Е. дополнения(
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ДополнитьСтатистикуПараметрамиИБ()
	
	//НоваяСтрокаСтатистики                       = ТЗПоказателиРаботы.Добавить();
	//НоваяСтрокаСтатистики.DateTime              = ТекущаяДата();
	//НоваяСтрокаСтатистики.EventName             = "ЗапускПрограммы";
	////Ресурсы
	//НоваяСтрокаСтатистики.User1C                = ПользовательИнфБазы;
	//НоваяСтрокаСтатистики.ConfigurationVersion  = ВерсияКонфигурации;
	//НоваяСтрокаСтатистики.ConfigurationName     = МетаданныеИмя;
	//НоваяСтрокаСтатистики.ClientName            = "ESDL";
	//НоваяСтрокаСтатистики.ClientVersion         = ВерсияПрограммы;
	//НоваяСтрокаСтатистики.AccauntDataBaseID		= ИДБазыДанныхПользователя;
	////Реквизиты
	//НоваяСтрокаСтатистики.StatisticalDataName0  = "ВерсияПриложения";
	//НоваяСтрокаСтатистики.StatisticalDataValue0 = ВерсияПриложения;
	//НоваяСтрокаСтатистики.StatisticalDataName1  = "РежимСовместимости";
	//НоваяСтрокаСтатистики.StatisticalDataValue1 = РежимСовместимости;
	
	СтруктураПараметровИБ = ПолучитьПараметрыИБДляСтатистикиНаСервере();	
	
	к = 0;
	Для каждого Показатель Из СтруктураПараметровИБ Цикл

		Ключ     = Показатель.Ключ;
		Значение = Показатель.Значение;
		
		Если к = 0 ИЛИ к % 10 = 0 Тогда 
			
			НоваяСтрокаСтатистики                       = ТЗПоказателиРаботы.Добавить();
			НоваяСтрокаСтатистики.DateTime              = ТекущаяДата();
			НоваяСтрокаСтатистики.EventName             = "ПараметрыИБ"; // "ЗапускПрограммы";
			//Ресурсы
			НоваяСтрокаСтатистики.User1C                = ПользовательИнфБазы;
			НоваяСтрокаСтатистики.ConfigurationVersion  = ВерсияКонфигурации;
			НоваяСтрокаСтатистики.ConfigurationName     = МетаданныеИмя;
			НоваяСтрокаСтатистики.ClientName            = "ESDL";
			НоваяСтрокаСтатистики.ClientVersion         = ВерсияПрограммы;
			НоваяСтрокаСтатистики.AccauntDataBaseID		= ИДБазыДанныхПользователя;
			
		КонецЕсли;
				
		//Реквизиты
		НоваяСтрокаСтатистики["StatisticalDataName"+(к%10)]  = Ключ;    //"ВерсияПриложения";
		НоваяСтрокаСтатистики["StatisticalDataValue"+(к%10)] = Значение;//ВерсияПриложения;
		
		//НоваяСтрокаСтатистики.StatisticalDataName1  = "РежимСовместимости";
		//НоваяСтрокаСтатистики.StatisticalDataValue1 = РежимСовместимости;
		
		к = к + 1;
		
	КонецЦикла;	

КонецПроцедуры

// Функция 
//	Возвращает структуру с показателями базы.
//
// Структура:
//	 1. Количество групп                     // Количество групп
//	 2. Объем номенклатуры                   // КоличествоНоменклатуры
//	 3. Полноенаименование = Наименование, % // ПроцентСоответствийПолногоНаименования
//	 4. Артикулы - используются или нет, %   // ПроцентИспользованияАртикулов
//	 5. Артикулы - с буквами или нет, %      // ПроцентАртикуловСБуквами
//	 6. Английские буквы в названиях, %      // ПроцентНаименованийАнглийскиеБуквы	 
//   7. Дубли номенклатуры                   // КоличествоДублейНоменклатуры
//	 8. Дубли контрагентов			         // КоличествоДублейКонтрагентов
Функция ПолучитьПараметрыИБДляСтатистикиНаСервере()
	
	ПараметрыИБ = Новый Структура;
	
	ЕстьРеквизитНоменклатурыНаименованиеПолное = Метаданные.Справочники.Номенклатура.Реквизиты.Найти("НаименованиеПолное")<>Неопределено;	
	Если ЕстьРеквизитНоменклатурыНаименованиеПолное Тогда
		ТекстЗапросаПоПолномуНаименованию = "
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|		КОГДА ПОДСТРОКА(Номенклатура.НаименованиеПолное,0,300) = Номенклатура.Наименование
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ),0) КАК КоличествоСоответствийПолногоНаименования, ";	
	Иначе
		ТекстЗапросаПоПолномуНаименованию = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|			КОГДА Номенклатура.ЭтоГруппа
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ),0) КАК КоличествоОбщее,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|			КОГДА Номенклатура.ЭтоГруппа
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ),0) КАК КоличествоГрупп, "+ ТекстЗапросаПоПолномуНаименованию
		//|	СУММА(ВЫБОР
		//|			КОГДА Номенклатура.НаименованиеПолное = Номенклатура.Наименование
		//|				ТОГДА 1
		//|			ИНАЧЕ 0
		//|		КОНЕЦ) КАК КоличествоСоответствийПолногоНаименования,
		+"
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|			КОГДА Номенклатура.Артикул <> """"
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ),0) КАК КоличествоАртикулов,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|			КОГДА Номенклатура.Наименование ПОДОБНО ""%[A-z]%""
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ),0) КАК КоличествоНаименованийАнглийскиеБуквы,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|			КОГДА Номенклатура.Артикул ПОДОБНО ""%[А-я]%""
		|				ТОГДА 1
		|			КОГДА Номенклатура.Артикул ПОДОБНО ""%[A-z]%""
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ),0) КАК КоличествоАртикуловСБуквами
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	//ИспользуютсяАртикулы = (Выборка.КоличествоАртикулов/Выборка.КоличествоОбщее)>0.3;	
	Если Выборка.КоличествоОбщее = 0 Тогда
		
		ПараметрыИБ.Вставить("КоличествоГрупп", Выборка.КоличествоГрупп);
		ПараметрыИБ.Вставить("КоличествоНоменклатуры", 0);
		ПараметрыИБ.Вставить("ПроцентИспользованияАртикулов", 0);
		ПараметрыИБ.Вставить("ПроцентАртикуловСБуквами", 0);
		ПараметрыИБ.Вставить("ПроцентНаименованийАнглийскиеБуквы", 0);	
		ПараметрыИБ.Вставить("ПроцентСоответствийПолногоНаименования", 0);
		
	Иначе
		
		ПараметрыИБ.Вставить("КоличествоГрупп", Выборка.КоличествоГрупп);
		ПараметрыИБ.Вставить("КоличествоНоменклатуры", Выборка.КоличествоОбщее);
		ПараметрыИБ.Вставить("ПроцентИспользованияАртикулов", Окр(100*(Выборка.КоличествоАртикулов/Выборка.КоличествоОбщее),2));
		ПараметрыИБ.Вставить("ПроцентАртикуловСБуквами", Окр(100*(Выборка.КоличествоАртикуловСБуквами/Выборка.КоличествоОбщее),2) );
		ПараметрыИБ.Вставить("ПроцентНаименованийАнглийскиеБуквы", Окр(100*(Выборка.КоличествоНаименованийАнглийскиеБуквы/Выборка.КоличествоОбщее),2) );
		
		Если ЕстьРеквизитНоменклатурыНаименованиеПолное Тогда
			ПроцентСоответствийПолногоНаименования = Окр(100*(Выборка.КоличествоСоответствийПолногоНаименования/Выборка.КоличествоОбщее),2);	
		Иначе
			ПроцентСоответствийПолногоНаименования = 0;	
		КонецЕсли;	
		ПараметрыИБ.Вставить("ПроцентСоответствийПолногоНаименования", ПроцентСоответствийПолногоНаименования);
		
	КонецЕсли;
	
	// дубли номенклатуры
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура.Ссылка) КАК Ссылка,
		|	Номенклатура.Наименование КАК Наименование
		|ПОМЕСТИТЬ ТаблицаДублей
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура.Наименование
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура.Ссылка) > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаДублей.Наименование) КАК Наименование
		|ИЗ
		|	ТаблицаДублей КАК ТаблицаДублей";
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	ВыборкаДетальныеЗаписи.Следующий();	

	ПараметрыИБ.Вставить("КоличествоДублейНоменклатуры", ВыборкаДетальныеЗаписи.Наименование);	
	
	
	// дубли контрагентов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагенты.Ссылка) КАК Ссылка,
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.КПП КАК КПП
		|ПОМЕСТИТЬ ТаблицаДублей
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН <> """"
		|
		|СГРУППИРОВАТЬ ПО
		|	Контрагенты.ИНН,
		|	Контрагенты.КПП
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагенты.Ссылка) > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ТаблицаДублей.ИНН) КАК ИНН
		|ИЗ
		|	ТаблицаДублей КАК ТаблицаДублей";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();;	
	ВыборкаДетальныеЗаписи.Следующий();
	
	ПараметрыИБ.Вставить("КоличествоДублейКонтрагентов", ВыборкаДетальныеЗаписи.ИНН);
	
	Возврат ПараметрыИБ;
	
КонецФункции // ()

// для получения таблицы ХЕШ в форме тестирвоания
&НаСервереБезКонтекста 
Функция ПолучитьХешДляНечеткогоСравненияНаСервере(ВидСправочника, СтрокаПоиска)

	Возврат ПреобразоватьТаблицуЗначенийВМассивСтруктур(ЗаполнитьХешДляНечеткогоСравнения(ВидСправочника, СтрокаПоиска));	

КонецФункции // ()

// для дополнения таблицы ХЕШа в форме тестирвоания
&НаСервереБезКонтекста 
Функция ДополнитьХешДляНечеткогоСравненияНаСервере(Знач Хеш, СтрокаПоиска, МассивСлов, ESDLСтруктураОПФ)

	Хеш = ПреобразоватьМассивСтуктурСтрокВТаблицуЗначений(Хеш);
	ДополнитьТаблицуПоискомПоСловам(Хеш, СтрокаПоиска, МассивСлов, Неопределено, ESDLСтруктураОПФ);
	Возврат ПреобразоватьТаблицуЗначенийВМассивСтруктур(Хеш);

КонецФункции // ()


