&НаКлиенте
Процедура Очистить(Команда)
	
	Name = "";
	StoredPasswordValue = "";
	Zone = 0;
	OSUser = "";
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ДобавитьПользователяОбласти(Команда)
	
	Сообщить(Строка(ДобавитьПользователяОбластиНаСервере()));
	
КонецПроцедуры

&НаСервере
Функция ДобавитьПользователяОбластиНаСервере()
	
	Если Не ЗначениеЗаполнено(Name) ИЛИ Не ЗначениеЗаполнено(StoredPasswordValue) ИЛИ Не ЗначениеЗаполнено(Zone) ИЛИ Не ЗначениеЗаполнено(OSUser) Тогда
		Сообщить("Не все поля заполнены");
	КонецЕсли;
	//StoredPasswordValue = ПользователиСервиса.СгенерироватьНовыйПароль();
	user = Новый Структура("Name, FullName, StoredPasswordValue, Zone, Contacts, OSUser, Roles,        FullRights, 				Language, UserServiceID, 				 EMail, Phone", 
							Name, Name,     StoredPasswordValue, Zone,         , OSUser, "Бухгалтер", ?(ПолныеПрава, "Да", ""), "",		  Новый УникальныйИдентификатор, "", 	"");
							
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ContactType");
	ТЗ.Колонки.Добавить("Value");
	//Строка = ТЗ.Добавить();
	//Строка.ContactType = "UserEMail";
	//Строка.Value = "makashev@smartsatu.kz";
	user.Contacts = Новый Структура("Item", ТЗ);
	
	
	Если НЕ CTSM_Efsol_Платформа.ДобавитьПользователяПриложения(user) Тогда //CTSM_Efsol_Sauri.ДобавитьНовогоПользователяАбонента(user) Тогда
		Сообщить("Ошибка добавления пользователя абонента");
		Возврат Ложь;
	КонецЕсли;
	
	//AccountUserID = CTSM_Efsol_Sauri.НайтиПользователяПоLogin(OSUser);
	//Если  AccountUserID = "" Тогда
	//	Сообщить("Не найден пользователь облака");
	//	Возврат Ложь;
	//КонецЕсли;		
	
	//ТекстОшибки = "";
	//LocalUserID="";
	//Если CTSM_Efsol_Sauri.AcDbLocalUsers_ДобавитьПользователя(AccountUserID, Name, StoredPasswordValue, ТекстОшибки, LocalUserID, Ложь) Тогда
	//	
	//	Если НЕ CTSM_Efsol_Sauri.ДобавитьНовогоПользователяАбонента(user) Тогда
	//		Сообщить("Ошибка добавления пользователя абонента");
	//		Возврат Ложь;
	//	КонецЕсли;
	//	
	//	//AccountID = Efsol_Sauri.AccountUsers_GetAccountId(AccountUserID);
	//	//
	//	//Если AccountID <> "" И AccountID <> "93e324cd-4a25-4a2d-a0de-2136fc8c1866" Тогда // аккаунт ЕФСОЛ
	//	//	
	//	//	ПриложениеСсылка = ОбластиДанных.ПолучитьОбластьДанныхПоКоду(user.Zone);
	//	//	ТекстОшибки = "";                                                                                        
	//	//	СтруктураПередаваемыхПараметров = Новый Структура("Zone, AccountID", user.Zone, AccountID);
	//	//	Результат = Efsol_Sauri.ДобавитьAccountIDВОбласть(ПриложениеСсылка.Владелец, СтруктураПередаваемыхПараметров, ТекстОшибки);
	//	//	
	//	//	Если НЕ Efsol_ADL.АutoloadingSauriAccounts_AddAccountID(AccountID,ТекстОшибки) Тогда
	//	//		Сообщить("Не удалось записать AccountID в ADL: "+AccountID);	
	//	//	КонецЕсли;
	//	//ИначеЕсли AccountID = "" Тогда			
	//	//	Сообщить("Ошибка получения AccountID по AccountUserID: "+AccountUserID);	
	//	//КонецЕсли;
	//	
	//Иначе
	//	Сообщить("Ошибка добавления AcDbLocalUser: " + ТекстОшибки);
	//	Элементы.Группа1.Видимость = (LocalUserID <> "");
	//	Возврат Ложь;
	//КонецЕсли;		
	
	Возврат Истина;
	
КонецФункции


//////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура УдалитьПользователяОбласти(Команда)
	УдалитьПользователяОбластиНаСервере();
КонецПроцедуры

&НаСервере
Процедура УдалитьПользователяОбластиНаСервере()
	
	СтруктураПараметров = Новый Структура("Name, Zone", Name, Zone);
	Результат = CTSM_Efsol_Платформа.УдалитьПользователяПриложения(СтруктураПараметров);
	Если Результат = Ложь Тогда
		Сообщить("Пользователь не найден");	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПользователяПриложенияНаСервере() // недоступность
	СтруктураПараметров = Новый Структура("Name, Zone", Name, Zone);
	Результат = CTSM_Efsol_Платформа.УстановитьДоступностьПользователяПриложения(СтруктураПараметров);
	Если Результат = Ложь Тогда
		Сообщить("Пользователь не найден");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПользователяПриложения(Команда)
	УстановитьДоступностьПользователяПриложенияНаСервере();
КонецПроцедуры


//////////////////////////////////////////////////////////////////

//&НаСервере
//Процедура УдалитьПользователяЛинкаНаСервере()   
//	
//	Efsol_Sauri.AcDbLocalUsers_УдалитьПользователя(LocalUserID);
//	
//	Если LocalUserID <> "" Тогда
//		Элементы.Группа1.Видимость = (LocalUserID = "");
//	КонецЕсли;

//КонецПроцедуры

//&НаКлиенте
//Процедура УдалитьПользователяЛинка(Команда)
//	УдалитьПользователяЛинкаНаСервере();
//КонецПроцедуры



//&НаКлиенте
//Процедура Команда11(Команда)
//	Команда1НаСервере();
//КонецПроцедуры

//&НаСервере
//Функция Команда1НаСервере()
//	
//	ПользовательСсылка = Справочники.Пользователи.НайтиПоКоду("Смарт_Сату");
//	Витрина = Витрины.ВитринаСеанса(, Истина);
//	Приложения = ОбластиДанных.ПолучитьСписокОписанийПриложений(ПользовательСсылка, Витрина);
//	
//КонецФункции
