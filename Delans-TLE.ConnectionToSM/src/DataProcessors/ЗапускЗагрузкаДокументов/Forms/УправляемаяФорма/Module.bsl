
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастройкиПодключения = ХранилищеСистемныхНастроек.Загрузить("ESDLНастройкиПодключения", "НастройкиПодключения");
	Если НастройкиПодключения <> Неопределено И ТипЗнч(НастройкиПодключения) = Тип("Структура") Тогда
		Если НастройкиПодключения.Свойство("Логин") Тогда
			ЛогинВвод = НастройкиПодключения.Логин;
			Если Найти(ЛогинВвод, "beta#") = 1 Тогда
				beta = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ПолучитьИПодключить() Тогда
		ОткрытьОсновнуюФорму();
		Отказ = Истина;
	Иначе
		Элементы.СообщениеПользователю.Заголовок = "Программа не была подключена. Попробуйте выполнить запуск ещё раз";
		Элементы.ГруппаОповещенияПользователя.Видимость = Ложь;
		Элементы.ГруппаСообщениеПользователю.Видимость = Истина;
		ЭтаФорма.ОбновитьОтображениеДанных();
		Элементы.ЛК.Видимость = ДоступВЛК;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОсновнуюФорму()
	
	Попытка
		
		НоваяОсновнаяФорма = ПолучитьФорму("ВнешняяОбработка.ЗагрузкаДокументовУП.Форма");
		
		Если СравнитьВерсии(НоваяОсновнаяФорма.ВерсияПриложения, "8.3.5.1") Тогда
			Элементы.СообщениеПользователю.Заголовок = "Для работы программы ""Загрузка документов"" требуется версия платформы 1С:Предприятия не ниже 8.3.5.1";
		Иначе
			
			ИмяШаблона = "";
			СтрокаЗапроса = "/adl42/hs/api_v1/TemplatesName/GetTemplateName?ConfigurationVersion=" + НоваяОсновнаяФорма.ВерсияКонфигурации + "&ConfigurationName=" + НоваяОсновнаяФорма.МетаданныеИмя + "&AccauntDataBaseID=0";
			ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Get", Неопределено, Неопределено, Ложь, "", "", beta);
			Если ПараметрыОтвета.КодОтвета = 200 Тогда
				ИмяШаблона = ПараметрыОтвета.СтруктураОтвета.TemplateName; 
			КонецЕсли;
			Если ИмяШаблона = "" Тогда
				Элементы.СообщениеПользователю.Заголовок = "Конфигурация " + НоваяОсновнаяФорма.МетаданныеИмя + " версии " + НоваяОсновнаяФорма.ВерсияКонфигурации + " не поддерживается сервисом";
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Элементы.СообщениеПользователю.Заголовок = "Произошла ошибка при подключении программы: " + ТекстОшибки;
	КонецПопытки;
	
	Если НЕ Элементы.СообщениеПользователю.Заголовок = "" Тогда
		Элементы.ГруппаОповещенияПользователя.Видимость = Ложь;
		Элементы.ГруппаСообщениеПользователю.Видимость = Истина;
		ЭтаФорма.ОбновитьОтображениеДанных();
		Элементы.ЛК.Видимость = ДоступВЛК;
	Иначе
		НоваяОсновнаяФорма.Открыть();
		Если ЭтаФорма.Открыта() Тогда
			ЭтаФорма.Закрыть();
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьИПодключитьКлиент() Экспорт
	
	ЭтаФорма.Закрыть();
	Если ПолучитьИПодключить() Тогда
		ОткрытьОсновнуюФорму();
	КонецЕсли;                                
	
КонецФункции

&НаСервере
Функция ПолучитьИПодключить() Экспорт
	
	СтрокаЗапроса = "/adl42/hs/api_v1/DocLoaderFiles/GetTheUpdateFile?DocLoaderFileID=ЗагрузкаДокументовУП";
	ПараметрыОтвета = ВыполнитьЗапросСервер("ESDLADLHTTP", СтрокаЗапроса, "Get", Неопределено, Неопределено, Истина, "", "", beta); 
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		ДвоичныеДанныеИмяФайлЗагрузкаДокументовФормы = ПараметрыОтвета.СтруктураОтвета.ДвоичныеДанные;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Попытка	
		ИмяФайлЗагрузкаДокументовФормы = КаталогВременныхФайлов() + "ЗагрузкаДокументовУП.epf";
		ДвоичныеДанныеИмяФайлЗагрузкаДокументовФормы.Записать(ИмяФайлЗагрузкаДокументовФормы);
		ЗагрузкаДокументовУП = ВнешниеОбработки.Создать(ИмяФайлЗагрузкаДокументовФормы, Ложь);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;	

КонецФункции

&НаСервере
Функция  ВыполнитьЗапросСервер(HTTPConnectionСтрока, АдресРесурса, МетодОтправки, СтруктураПараметров, ПолноеИмяФайлаТела, ПолучитьТелоКакДвоичныеДанные, XMLЗапроса, ESDLТокен, beta)
	
	Если HTTPConnectionСтрока = "ESDLCoreHTTP" Тогда
		
		HTTPConnection = HTTPConnection("Core", beta);
		
	ИначеЕсли HTTPConnectionСтрока = "ESDLADLHTTP" Тогда
		
		HTTPConnection = HTTPConnection("ADL", beta);;
		
	ИначеЕсли HTTPConnectionСтрока = "ESDLMDMHTTP" Тогда
		
		HTTPConnection = HTTPConnection("MDM", beta);
		
	КонецЕсли;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "text/xml");
	Заголовки.Вставить("UserAgent", "ESDL1C");
	
	Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Если Найти(АдресРесурса, "AccountUserSessions/Login") = 0 Тогда;
		Заголовки.Вставить("Token", ESDLТокен);
	КонецЕсли;
	
	Попытка 
		Если МетодОтправки = "Get" Тогда
			HTTPОтвет = HTTPConnection.Получить(Запрос);
			Если ПолучитьТелоКакДвоичныеДанные Тогда
				СтрокаContentDisposition = HTTPОтвет.Заголовки.Получить("Content-Disposition");
				Если СтрокаContentDisposition <> Неопределено Тогда
					СтруктураПараметровContentDisposition = ПарсерContentDisposition(СтрокаContentDisposition);
				КонецЕсли;
			КонецЕсли;
		Иначе 
			Если МетодОтправки = "Post_File" Тогда
				Заголовки.Вставить("Content-Disposition", СформироватьContentDisposition(СтруктураПараметров));
				Если XMLЗапроса <> "" Тогда
					Запрос.УстановитьТелоИзСтроки(XMLЗапроса);
				Иначе
					Запрос.УстановитьИмяФайлаТела(ПолноеИмяФайлаТела); 
				КонецЕсли;
			ИначеЕсли МетодОтправки = "Post" Тогда
				Заголовки.Вставить("Content-Type", "application/xml");
				Если XMLЗапроса = "" Тогда
					XMLЗапроса = СформироватьXMLЗапроса(СтруктураПараметров);
				КонецЕсли;
				Запрос.УстановитьТелоИзСтроки(XMLЗапроса);
			КонецЕсли;
			HTTPОтвет = HTTPConnection.ОтправитьДляОбработки(Запрос);
		КонецЕсли;
		ОтветСервера = HTTPОтвет.ПолучитьТелоКакСтроку();
	Исключение
		Причина = ОписаниеОшибки();
		ОтветСервера = "";
	КонецПопытки;
	
	Если HTTPОтвет = Неопределено ИЛИ HTTPОтвет.КодСостояния = 500 Тогда 
		Если Найти(Причина, "Couldn't resolve host name") Тогда
			ПараметрыОтвета = Новый Структура("КодОтвета, СтруктураОтвета", 500, Новый Структура);
			ПараметрыОтвета.СтруктураОтвета.Вставить("DebugInfo", "The server's response does not meet the standard of service");
			ПараметрыОтвета.СтруктураОтвета.Вставить("Description", "Не доступно подключение к сети Интернет");
			ПараметрыОтвета.СтруктураОтвета.Вставить("ТелоОтветаСтрока", ОтветСервера);
		Иначе
			ПараметрыОтвета = Новый Структура("КодОтвета, СтруктураОтвета", 500, Новый Структура);
			ПараметрыОтвета.СтруктураОтвета.Вставить("DebugInfo", "The server's response does not meet the standard of service");
			ПараметрыОтвета.СтруктураОтвета.Вставить("Description", "Ошибка подключения к серверу");
			ПараметрыОтвета.СтруктураОтвета.Вставить("ТелоОтветаСтрока", ОтветСервера);
		КонецЕсли;
	ИначеЕсли ПолучитьТелоКакДвоичныеДанные И HTTPОтвет.КодСостояния = 200 Тогда
		ОтветСервераДвоичныеДанные = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
		ПараметрыОтвета = Новый Структура("КодОтвета, СтруктураОтвета", 200, Новый Структура);
		ПараметрыОтвета.СтруктураОтвета.Вставить("ДвоичныеДанные", ОтветСервераДвоичныеДанные);
		ПараметрыОтвета.СтруктураОтвета.Вставить("ТелоОтветаСтрока", ОтветСервера);
		Если СтруктураПараметровContentDisposition <> Неопределено Тогда
			ПараметрыОтвета.Вставить("СтруктураПараметровContentDisposition", СтруктураПараметровContentDisposition);
		КонецЕсли;
	Иначе
		ПараметрыОтвета = ПарсерОтветаXML(ОтветСервера); 
	КонецЕсли;

	
	Возврат ПараметрыОтвета;

КонецФункции

&НаКлиенте
Функция ВыполнитьЗапрос(HTTPConnectionСтрока, АдресРесурса, МетодОтправки, СтруктураПараметров, ПолноеИмяФайлаТела, ПолучитьТелоКакДвоичныеДанные, XMLЗапроса, ESDLТокен, beta) 
	
	#Если ВебКлиент Тогда
		Возврат ВыполнитьЗапросСервер(HTTPConnectionСтрока, АдресРесурса, МетодОтправки, СтруктураПараметров, ПолноеИмяФайлаТела, ПолучитьТелоКакДвоичныеДанные, XMLЗапроса, ESDLТокен, beta);
	#КонецЕсли
	
	Если HTTPConnectionСтрока = "ESDLCoreHTTP" Тогда
		
		HTTPConnection = HTTPConnection("Core", beta);
		
	ИначеЕсли HTTPConnectionСтрока = "ESDLADLHTTP" Тогда
		
		HTTPConnection = HTTPConnection("ADL", beta);;
		
	ИначеЕсли HTTPConnectionСтрока = "ESDLMDMHTTP" Тогда
		
		HTTPConnection = HTTPConnection("MDM", beta);
		
	КонецЕсли;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "text/xml");
	Заголовки.Вставить("UserAgent", "ESDL1C");
	
	Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Если Найти(АдресРесурса, "AccountUserSessions/Login") = 0 Тогда;
		Заголовки.Вставить("Token", ESDLТокен);
	КонецЕсли;
	
	Попытка 
		Если МетодОтправки = "Get" Тогда
			HTTPОтвет = HTTPConnection.Получить(Запрос);
			Если ПолучитьТелоКакДвоичныеДанные Тогда
				СтрокаContentDisposition = HTTPОтвет.Заголовки.Получить("Content-Disposition");
				Если СтрокаContentDisposition <> Неопределено Тогда
					СтруктураПараметровContentDisposition = ПарсерContentDisposition(СтрокаContentDisposition);
				КонецЕсли;
			КонецЕсли;
		Иначе 
			Если МетодОтправки = "Post_File" Тогда
				Заголовки.Вставить("Content-Disposition", СформироватьContentDisposition(СтруктураПараметров));
				Если XMLЗапроса <> "" Тогда
					Запрос.УстановитьТелоИзСтроки(XMLЗапроса);
				Иначе
					Запрос.УстановитьИмяФайлаТела(ПолноеИмяФайлаТела); 
				КонецЕсли;
			ИначеЕсли МетодОтправки = "Post" Тогда
				Заголовки.Вставить("Content-Type", "application/xml");
				Если XMLЗапроса = "" Тогда
					XMLЗапроса = СформироватьXMLЗапроса(СтруктураПараметров);
				КонецЕсли;
				Запрос.УстановитьТелоИзСтроки(XMLЗапроса);
			КонецЕсли;
			HTTPОтвет = HTTPConnection.ОтправитьДляОбработки(Запрос);
		КонецЕсли;
		ОтветСервера = HTTPОтвет.ПолучитьТелоКакСтроку();
	Исключение
		Причина = ОписаниеОшибки();
		ОтветСервера = "";
	КонецПопытки;
	
	Если HTTPОтвет = Неопределено ИЛИ HTTPОтвет.КодСостояния = 500 Тогда 
		Если Найти(Причина, "Couldn't resolve host name") ИЛИ НЕ ИнтернетПроверитьПодключение() Тогда
			ПараметрыОтвета = Новый Структура("КодОтвета, СтруктураОтвета", 500, Новый Структура);
			ПараметрыОтвета.СтруктураОтвета.Вставить("DebugInfo", "The server's response does not meet the standard of service");
			ПараметрыОтвета.СтруктураОтвета.Вставить("Description", "Не доступно подключение к сети Интернет");
			ПараметрыОтвета.СтруктураОтвета.Вставить("ТелоОтветаСтрока", ОтветСервера);
		Иначе
			ПараметрыОтвета = Новый Структура("КодОтвета, СтруктураОтвета", 500, Новый Структура);
			ПараметрыОтвета.СтруктураОтвета.Вставить("DebugInfo", "The server's response does not meet the standard of service");
			ПараметрыОтвета.СтруктураОтвета.Вставить("Description", "Ошибка подключения к серверу");
			ПараметрыОтвета.СтруктураОтвета.Вставить("ТелоОтветаСтрока", ОтветСервера);
		КонецЕсли;
	ИначеЕсли ПолучитьТелоКакДвоичныеДанные И HTTPОтвет.КодСостояния = 200 Тогда
		ОтветСервераДвоичныеДанные = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
		ПараметрыОтвета = Новый Структура("КодОтвета, СтруктураОтвета", 200, Новый Структура);
		ПараметрыОтвета.СтруктураОтвета.Вставить("ДвоичныеДанные", ОтветСервераДвоичныеДанные);
		ПараметрыОтвета.СтруктураОтвета.Вставить("ТелоОтветаСтрока", ОтветСервера);
		Если СтруктураПараметровContentDisposition <> Неопределено Тогда
			ПараметрыОтвета.Вставить("СтруктураПараметровContentDisposition", СтруктураПараметровContentDisposition);
		КонецЕсли;
	Иначе
		ПараметрыОтвета = ПарсерОтветаXML(ОтветСервера); 
	КонецЕсли;

	
	Возврат ПараметрыОтвета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьContentDisposition(СтруктураПараметров) Экспорт
	
	ЗначениеContentDisposition = "attachment";
	Если СтруктураПараметров <> Неопределено Тогда
		Для Каждого Параметр Из СтруктураПараметров Цикл
			////преобразование в строку URL для значений, которые могут содержать кирилицу  при отправке для служб, работающих не в 1С
			////пока не используется
			//ЗначениеContentDisposition = ЗначениеContentDisposition + "; " + Параметр.Ключ + "*=""UTF-8''" + ПреобразоватьКURL(Параметр.Значение) + """";
			//
			ЗначениеContentDisposition = ЗначениеContentDisposition + "; " + Параметр.Ключ + "=""" + Параметр.Значение + """";
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЗначениеContentDisposition;
	
КонецФункции

// функция формирования XML запроса (для передачи в теле ответа)
//
// параметры:
//	СтруктураХML, тип "структура" - структура xml, где ключ это xmlElementName, а значение это xmlElementValue
//
// возвращаемое значение: ЗаписьXML, где находится построеный XML 
//	
&НаСервереБезКонтекста
Функция СформироватьXMLЗапроса(СтруктураХML) Экспорт
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	Запись.ЗаписатьОбъявлениеXML();
	
	Запись.ЗаписатьНачалоЭлемента("Request");
	Если СтруктураХML <> Неопределено Тогда	
		Для Каждого Элемент Из СтруктураХML Цикл
			Запись.ЗаписатьНачалоЭлемента(Элемент.Ключ);
			Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
				Запись.ЗаписатьАтрибут("type","list");
				Массив = Элемент.Значение;
				Для Каждого ЭлементМассива Из Массив Цикл
					Запись.ЗаписатьНачалоЭлемента("item");
					Запись.ЗаписатьТекст(ЭлементМассива);
					Запись.ЗаписатьКонецЭлемента();
				КонецЦикла;
				ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ДанныеФормыКоллекция") Тогда
					Запись.ЗаписатьАтрибут("type","table");
					ТаблицаЗначений = ДанныеФормыВЗначение(Элемент.Значение, Тип("ТаблицаЗначений"));
					Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
						Запись.ЗаписатьНачалоЭлемента("row");
						Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
							ИмяКолонки = Колонка.Имя;
							ЗначениеЯчейки = СтрокаТаблицы[ИмяКолонки];
							Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Тогда
								Если ТипЗнч(ЗначениеЯчейки) = Тип("Дата") Тогда
									ЗначениеЯчейки = ДатаВФорматеISO8601(ЗначениеЯчейки);
								Иначе
									ЗначениеЯчейки = XMLСтрока(ЗначениеЯчейки);
								КонецЕсли;
							КонецЕсли;
							Запись.ЗаписатьНачалоЭлемента(ИмяКолонки);
							Запись.ЗаписатьТекст(ЗначениеЯчейки);
							Запись.ЗаписатьКонецЭлемента();
						КонецЦикла;
						Запись.ЗаписатьКонецЭлемента();
					КонецЦикла;
			Иначе
				Запись.ЗаписатьТекст(Элемент.Значение);	
			КонецЕсли;
			Запись.ЗаписатьКонецЭлемента();
		КонецЦикла;
	КонецЕсли;
	
	Запись.ЗаписатьКонецЭлемента();
	ТекстЗапросаXML = Запись.Закрыть();
	
	Возврат ТекстЗапросаXML;
	
КонецФункции

// функция анализирует XML и приводит значения данных XML к типам данных 1С 
//
// параметры:
//	СтруктураПараметров, тип "структура" -  структура параметров
//	СтруктураТиповПараметров, тип "структура" - структура типов параметров
//
// возвращаемое значение: СтруктураПреобразованныхДанных, тип "структура"
//
&НаСервереБезКонтекста
Функция ПолучитьXMLЗначенияДанных(СтруктураПараметров, СтруктураТиповПараметров) Экспорт
	
	СтруктураПреобразованныхДанных = Новый Структура;
	
	Для Каждого ЭлементТипаПараметра Из СтруктураТиповПараметров Цикл
		ПреобразованноеЗначение = Неопределено;
		
		Если СтруктураПараметров.Свойство(ЭлементТипаПараметра.Ключ) Тогда
			Попытка
				Если ЭлементТипаПараметра.Значение = "Дата" И Найти(СтруктураПараметров[ЭлементТипаПараметра.Ключ], "0001-01-01T00:00:00") <> 0 Тогда
					ПреобразованноеЗначение = '00010101000000';
				Иначе
					ПреобразованноеЗначение = XMLЗначение(Тип(ЭлементТипаПараметра.Значение), СтруктураПараметров[ЭлементТипаПараметра.Ключ]);
				КонецЕсли;
			Исключение
				Если ЭлементТипаПараметра.Значение = "Булево" Тогда
					ПреобразованноеЗначение = Ложь;
				ИначеЕсли ЭлементТипаПараметра.Значение = "Число" Тогда
					ПреобразованноеЗначение = 0;
				ИначеЕсли ЭлементТипаПараметра.Значение = "Строка" Тогда
					ПреобразованноеЗначение = "";
				ИначеЕсли ЭлементТипаПараметра.Значение = "Дата" Тогда
					ПреобразованноеЗначение = '00010101000000';
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
		СтруктураПреобразованныхДанных.Вставить(ЭлементТипаПараметра.Ключ, ПреобразованноеЗначение); 
	КонецЦикла;
	
	Возврат СтруктураПреобразованныхДанных;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция HTTPConnection(ИмяСервиса, beta) Экспорт
	
	#Если ВебКлиент Тогда
		
		Возврат Неопределено;
		
	#Иначе
		
		Порт = 80;
		Пользователь = "";
		Пароль = "";
		Попытка
			Прокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("http");
		Исключение
			Прокси = Неопределено;
		КонецПопытки;  
		Таймаут = 0;
		ЗащищенноеСоединение = Неопределено;
		
	Если ИмяСервиса = "ADL" Тогда
		Сервер = "adl.42clouds.com";
		Если beta Тогда
			Сервер = "beta-" + Сервер;
		КонецЕсли;
	ИначеЕсли ИмяСервиса = "Recognition" Тогда
		Сервер = "recognition.42clouds.com";
		Если beta Тогда
			Сервер = "beta-" + Сервер;
		КонецЕсли;
	ИначеЕсли ИмяСервиса = "Core" Тогда
		Сервер = "core.42clouds.com";
		Если beta Тогда
			Сервер = "beta-" + Сервер;
		КонецЕсли;
		ИначеЕсли ИмяСервиса = "MDM" Тогда
			Сервер = "mdm42.42clouds.com";
			Пользователь = "UserADL";
			Пароль = "tr158h2F3U";
		КонецЕсли;  
		
		НТТР = Новый HTTPСоединение(Сервер, Порт, Пользователь, Пароль, Прокси, Таймаут, ЗащищенноеСоединение); 
		
		Возврат НТТР;
		
	#КонецЕсли
	
КонецФункции

// функция парсинга XML ответа сервера, на основе анализа ответа сервера формируется структура
// с нужными параметрами из ответа сервера
//
// параметры:
//	ОтветСервера, тип "строка" - ответ сервера в виде XML строки		
//
// возвращаемое значение: структура с параметрми ответа сервера
//
&НаСервереБезКонтекста
Функция ПарсерОтветаXML(ОтветСервера) Экспорт
	
	ПараметрыОтвета = Новый Структура("КодОтвета, СтруктураОтвета", 200, Новый Структура);
	
	Если НЕ ОтветСервера = "" Тогда
		
		ОтветСервера = СтрЗаменить(ОтветСервера, "<result>", "<Result>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "</result>", "</Result>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<result/>", "<Result/>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<request>", "<Request>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "</request>", "</Request>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<request/>", "<Request/>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<error>", "<Error>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "</error>", "</Error>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<error/>", "<Error/>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<code>", "<Code>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "</code>", "</Code>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<code/>", "<Code/>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<description>", "<Description>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "</description>", "</Description>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<description/>", "<Description/>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<debuginfo>", "<DebugInfo>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "</debuginfo>", "</DebugInfo>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<debuginfo/>", "<DebugInfo/>");
		
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(ОтветСервера);
			
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					КорневойЭлемент = ЧтениеXML.Имя;
					Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = КорневойЭлемент И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
							ИмяЭлементаОтвета = ЧтениеXML.Имя;
							Если ЧтениеXML.ПервыйАтрибут() И ЧтениеXML.Имя = "Type" Тогда
								ТипЭлемента = ЧтениеXML.Значение
							Иначе
								ТипЭлемента = "String";
							КонецЕсли;
							Если ТипЭлемента = "List" Тогда 
								ЗначениеЭлементаОтвета = Новый Массив;
								Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = ИмяЭлементаОтвета И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
									Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
										ЗначениеЭлементаОтвета.Добавить(ЧтениеXML.Значение);
									КонецЕсли;
								КонецЦикла;
							ИначеЕсли ТипЭлемента = "Table" Тогда 
								ЗначениеЭлементаОтвета = Новый Массив;
								Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = ИмяЭлементаОтвета И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
									Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Row" Тогда
										СтруктураСтроки = Новый Структура;
										Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = "Row" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
											Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
												ИмяКолонки = ЧтениеXML.Имя;
											ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
												Значение = ЧтениеXML.Значение;
												СтруктураСтроки.Вставить(ИмяКолонки, Значение);
											ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
												Если НЕ СтруктураСтроки.Свойство(ИмяКолонки) Тогда
													СтруктураСтроки.Вставить(ИмяКолонки, ""); 
												КонецЕсли;
											КонецЕсли;
										КонецЦикла;
										ЗначениеЭлементаОтвета.Добавить(СтруктураСтроки);
									КонецЕсли;
								КонецЦикла
							ИначеЕсли ТипЭлемента = "String" Тогда
								ЗначениеЭлементаОтвета = "";
								Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = ИмяЭлементаОтвета И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
									Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
										ЗначениеЭлементаОтвета = ЧтениеXML.Значение;
									КонецЕсли;
								КонецЦикла
							КонецЕсли;
							ПараметрыОтвета.СтруктураОтвета.Вставить(ИмяЭлементаОтвета, ЗначениеЭлементаОтвета);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			Если ВРег(КорневойЭлемент) = ВРег("Error")Тогда
				Попытка
					ПараметрыОтвета.КодОтвета = Число(ПараметрыОтвета.СтруктураОтвета.Code);
				Исключение
					ПараметрыОтвета.КодОтвета = 400;
				КонецПопытки;
			ИначеЕсли НЕ (ВРег(КорневойЭлемент) = ВРег("Result") ИЛИ ВРег(КорневойЭлемент) = ВРег("Request")) Тогда
				ПараметрыОтвета.КодОтвета = 400;
			КонецЕсли;
		Исключение
			ПараметрыОтвета.КодОтвета = 400;
		КонецПопытки;
		
	Иначе
		ПараметрыОтвета.КодОтвета = 400;
	КонецЕсли;
	
	Если ПараметрыОтвета.КодОтвета = 400 И Не ПараметрыОтвета.СтруктураОтвета.Свойство("Code") Тогда
		Если Не ПараметрыОтвета.СтруктураОтвета.Свойство("Code") Тогда
			ПараметрыОтвета.СтруктураОтвета.Вставить("Code", Строка("400"));
		КонецЕсли;
		Если НЕ (ПараметрыОтвета.СтруктураОтвета.Свойство("Description") И ПараметрыОтвета.СтруктураОтвета.Свойство("DebugInfo")) Тогда
			ПараметрыОтвета.СтруктураОтвета.Вставить("DebugInfo", "The server's response does not meet the standard of service");
			ПараметрыОтвета.СтруктураОтвета.Вставить("Description", "Ответ сервера не соответствует стандарту сервиса");
			ПараметрыОтвета.СтруктураОтвета.Вставить("ТелоОтветаСтрока", ОтветСервера);
		КонецЕсли;
	КонецЕсли;
	
	Если ВРег(КорневойЭлемент) = ВРег("Request") Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета;
	Иначе
		Возврат ПараметрыОтвета;
	КонецЕсли;
	
КонецФункции

// функция парсинга заголовка "ContentDisposition"
//
// параметры:
//	СтрокаContentDisposition, тип "строка" - собственно и сам заголовок как строка	
//
// возвращаемое значение: структура параметров заголовка
//
&НаКлиентеНаСервереБезКонтекста
Функция ПарсерContentDisposition(СтрокаContentDisposition) Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	МассивСтрокПараметров = РазбитьСтроку(";", СтрокаContentDisposition);
	Для Каждого СтрокаПараметра Из МассивСтрокПараметров Цикл
		ПозицияРазделителя = Найти(СтрокаПараметра, "=");
		Если ПозицияРазделителя > 0 Тогда
			ИмяПараметра = Лев(СтрокаПараметра,ПозицияРазделителя-1); 
			ЗначениеПараметра = Сред(СтрокаПараметра, ПозицияРазделителя+1);
			ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, """", "");
			Попытка
				СтруктураПараметров.Вставить(ИмяПараметра,ЗначениеПараметра); 
			Исключение
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Функция разбивает строку по разделителям, лимит определяет максимальное количество слов
// аналог split в PHP
//
// параметры:
//	СимволыРазделители, тип "строка" - строка с символами разделителями
//	Строка, тип "строка" - строка для разбиения
//	Лимит, тип "число" - количество получаемых слов из строки
//
// возвращаемое значение: массив слов 
//
&НаКлиентеНаСервереБезКонтекста
Функция РазбитьСтроку(СимволыРазделители, Строка, Лимит = Неопределено) Экспорт
	
	НоваяСтрока = Строка;
	МассивСлов = Новый Массив;
	ИщемНачало = Истина;
	ТекСлово = "";
	
	Для НомерСимволаСтроки = 1 по СтрДлина(Строка) цикл
		ТекСимвол = Сред(Строка,НомерСимволаСтроки,1);
		Если Найти(СимволыРазделители, ТекСимвол) = 0 Тогда
			ТекСлово = ТекСлово + ТекСимвол;
			ИщемНачало = Ложь;
			продолжить;
		ИначеЕсли ИщемНачало Тогда
			МассивСлов.Добавить("");
			Если МассивСлов.Количество() = Лимит Тогда
				Возврат МассивСлов;
			КонецЕсли;
			продолжить;
		Иначе
			МассивСлов.Добавить(ТекСлово);
			Если МассивСлов.Количество() = Лимит Тогда
				Возврат МассивСлов;
			КонецЕсли;
			ТекСлово = "";
			ИщемНачало = Истина;
		КонецЕсли;
	конеццикла;
	Если Не ИщемНачало Тогда
		МассивСлов.Добавить(СокрЛП(ТекСлово));
	КонецЕсли;
	
	Возврат МассивСлов;
	
конецфункции


&НаСервереБезКонтекста
Функция ДатаВФорматеISO8601(Дата) Экспорт
	
	Если ТипЗнч(Дата) = Тип("Дата") Тогда
		СтрокаЧасовойПояс =  СериализаторXDTO.XMLСтрока(Дата);
		СмещениеЧасы = СмещениеСтандартногоВремени(ЧасовойПояс(), УниверсальноеВремя(ТекущаяДата(), ЧасовойПояс())) / 3600;
		СтрокаЧасовойПояс = СтрокаЧасовойПояс + ?(СмещениеЧасы > 0, "+", "-");
		СмещениеЧасы = Макс(СмещениеЧасы,-СмещениеЧасы);
		СтрокаЧасовойПояс = СтрокаЧасовойПояс + ?(СмещениеЧасы < 10, "0" + СмещениеЧасы, СмещениеЧасы) + ":00";
		Возврат СтрокаЧасовойПояс;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИнтернетПроверитьПодключение()
	
	#Если ВебКлиент Тогда
		Возврат Истина
	#Иначе
		Попытка	
			НТТР = Новый HTTPСоединение("www.googleapis.com",,,,,5,Новый ЗащищенноеСоединениеOpenSSL()); 
			Запрос = Новый HTTPЗапрос("language/translate/v2?key=1&q=hello%20world&source=en&target=ru");
			Ответ = НТТР.Получить(Запрос);
			СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
			Если Найти(СтрокаОтвета, "domain") > 0 И Найти(СтрокаОтвета, "reason") Тогда  
				Возврат Истина;
			КонецЕсли;
			
			НТТР = Новый HTTPСоединение("cloud-api.yandex.net",,,,,5,Новый ЗащищенноеСоединениеOpenSSL()); 
			Запрос = Новый HTTPЗапрос("v1/disk");
			Ответ = НТТР.Получить(Запрос);
			СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
			Если Найти(СтрокаОтвета, "Не авторизован") > 0 И Найти(СтрокаОтвета, "UnauthorizedError") Тогда  
				Возврат Истина;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Возврат Ложь;
	#КонецЕсли

КонецФункции

&НаКлиенте
Процедура ЛКНажатие(Элемент)
	
	ЗапуститьПриложение("https://cp.42clouds.com");	

КонецПроцедуры

&НаСервереБезКонтекста
Функция СравнитьВерсии(Знач Версия1, Знач Версия2) Экспорт
	
	Версия1Меньше=Ложь;
	Пока Версия1<>"" И Версия2<>"" Цикл
		ПозицияРазделителяРазряда1=Найти(Версия1, ".");
		Если ПозицияРазделителяРазряда1 = 0 Тогда
			Разряд1 = Версия1;
			Версия1 = ""
		Иначе
			Разряд1 = Лев(Версия1,ПозицияРазделителяРазряда1-1);
			Версия1 = Сред(Версия1, ПозицияРазделителяРазряда1+1);
		КонецЕсли;
		Разряд1Число = Число(Разряд1);
		ПозицияРазделителяРазряда2=Найти(Версия2, ".");
		Если ПозицияРазделителяРазряда2 = 0 Тогда
			Разряд2 = Версия2;
			Версия2 = ""
		Иначе
			Разряд2 = Лев(Версия2,ПозицияРазделителяРазряда2-1);
			Версия2 = Сред(Версия2, ПозицияРазделителяРазряда2+1);
		КонецЕсли;
		Разряд2Число = Число(Разряд2);
		Если Разряд1Число<Разряд2Число Тогда
			Версия1Меньше=Истина;
			Прервать;
		ИначеЕсли Разряд1Число>Разряд2Число Тогда
			Версия1Меньше=Ложь;
			Прервать;
		КонецЕсли;;
	КонецЦикла;
	Возврат Версия1Меньше;		
	
КонецФункции
