Процедура ЗагрузитьОбластьДанныхИзАрхива(НомерОбласти, ИмяФайлаВыгрузки) Экспорт
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, НомерОбласти);
		ВыгрузкаЗагрузкаОбластейДанных.ЗагрузитьТекущуюОбластьДанныхИзАрхива(ИмяФайлаВыгрузки);
	Исключение
		ЗаписьЖурналаРегистрации("DownloadDataArea", УровеньЖурналаРегистрации.Ошибка, ,, ОписаниеОшибки());
	КонецПопытки; 
	
КонецПроцедуры

Процедура ВыгрузитьОбластьДанныхВАрхив(НомерОбласти, ПутьКПапке) Экспорт
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, НомерОбласти);
		ИмяФайлаВыгрузки = ВыгрузкаЗагрузкаОбластейДанных.ВыгрузитьТекущуюОбластьДанныхВАрхив();
		КопироватьФайл(ИмяФайлаВыгрузки, ПутьКПапке + "\data_dump.zip") 
	Исключение
		ЗаписьЖурналаРегистрации("UploadingDataArea", УровеньЖурналаРегистрации.Ошибка, ,, ОписаниеОшибки());
	КонецПопытки; 
	
КонецПроцедуры


Функция ДобавитьПользователяПриложения(СтруктураПараметров, ТекстОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Число(СтруктураПараметров.Zone));
	
	Попытка
		
		Roles = "";
		СтруктураПараметров.Свойство("Roles", Roles);
		Roles = СтрЗаменить(Roles,";","");
		Если НЕ (Roles = "" ИЛИ Roles = Неопределено) Тогда
			СоздатьАдминистратораОбласти();
		Иначе
			Если Roles = "" ИЛИ Roles = Неопределено Тогда
				Roles = "Администратор,";
			КонецЕсли;
		КонецЕсли;
		//++  Масленников Е.А. 10.08.2018 (
		// Посчитаем, сколько установили ролей. 
		// Если не установили ни одной, установим роль администратора
		УстановленоРолей = 0; 
		//--  Масленников Е.А. 10.08.2018 )

		//НачатьТранзакцию();
		ЯзыкПользователя = ЯзыкПоКоду(СтруктураПараметров.Language);
		Почта = СтруктураПараметров.EMail;
		Телефон = СтруктураПараметров.Phone;
		//ПолныеПрава = XMLЗначение(Тип("Булево"), СтруктураПараметров.FullRights);
		ПолныеПрава = СтруктураПараметров.FullRights = "Да";
		СтруктураАдресаЭП = СоставПочтовогоАдреса(Почта);
		ИдентификаторПользователяСервиса = Новый УникальныйИдентификатор(СтруктураПараметров.UserServiceID);
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(СтруктураПараметров.Name);
		Если НЕ ПользовательИБ = Неопределено Тогда
			//ЗаписьЖурналаРегистрации("ДобПольз", УровеньЖурналаРегистрации.Ошибка,,,"0");
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Пользователи.Наименование,
			|	Пользователи.Ссылка,
			|	Пользователи.ИдентификаторПользователяИБ
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
			//|	И НЕ Пользователи.ПометкаУдаления";
			Запрос.УстановитьПараметр("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				ПользовательОбластиДанных = Выборка.Ссылка;
				//ТекстОшибки = "Пользователь для пользователоя ИБ существует: " + ПользовательИБ.Имя;
				ЗаписьЖурналаРегистрации("ДобавитьПользователяПриложения", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
				//ОтменитьТранзакцию();
				//Возврат;
			КонецЕсли;
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Пользователи.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.ИдентификаторПользователяСервиса = &ИдентификаторПользователяСервиса
			|	И НЕ Пользователи.ПометкаУдаления";
			Запрос.УстановитьПараметр("ИдентификаторПользователяСервиса", ИдентификаторПользователяСервиса);
			//
			//Блокировка = Новый БлокировкаДанных;
			//ЭлементБлокировки = Блокировка.Добавить("Справочник.Пользователи");
			//Блокировка.Заблокировать();
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				//ЗаписьЖурналаРегистрации("ДобПольз", УровеньЖурналаРегистрации.Ошибка,,,"3");
				ПользовательОбластиДанных = Неопределено;
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Пользователи.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	Пользователи.Наименование = &Наименование
				|	И НЕ Пользователи.ПометкаУдаления";
				Запрос.УстановитьПараметр("Наименование", СтруктураПараметров.FullName);
				РезультатСтарые = Запрос.Выполнить();
				ВыборкаСтарые = РезультатСтарые.Выбрать();
				Пока ВыборкаСтарые.Следующий() Цикл
					//ЗаписьЖурналаРегистрации("ДобПольз", УровеньЖурналаРегистрации.Ошибка,,,"4");
					СтарыйПользователь = ВыборкаСтарые.Ссылка.ПолучитьОбъект();
					СтарыйПользователь.УстановитьПометкуУдаления(Истина);
					ЗаписьЖурналаРегистрации("ДобавитьПользователяПриложения", УровеньЖурналаРегистрации.Ошибка,,, "УстановитьПометкуУдаления_" + СтарыйПользователь.ПометкаУдаления);
				КонецЦикла;
			Иначе
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				ПользовательОбластиДанных = Выборка.Ссылка;
				Роли = Новый Массив;	
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ГруппыДоступаПользователи.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
				|ГДЕ
				|	ГруппыДоступаПользователи.Пользователь = &Пользователь";
				Запрос.УстановитьПараметр("Пользователь", ПользовательОбластиДанных);
				РезультатЗапроса = Запрос.Выполнить();
				ВыборкаГруппыПользователей = РезультатЗапроса.Выбрать();
				Пока ВыборкаГруппыПользователей.Следующий() Цикл
					Для Каждого Роль Из ВыборкаГруппыПользователей.Ссылка.Профиль.Роли Цикл
						Роли.Добавить(Роль.Роль.Имя);
						УстановленоРолей = УстановленоРолей + 1; 
					КонецЦикла;		
				КонецЦикла;

				ЗаписьЖурналаРегистрации("ДобавитьПользователяПриложения", УровеньЖурналаРегистрации.Ошибка,,, "Пользователь с ИД пользователя сервиса" + ИдентификаторПользователяСервиса + " существует: " + СтруктураПараметров.Name);
				//ОтменитьТранзакцию();
				//Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПользовательОбластиДанных) Тогда
			ПользовательОбъект = Справочники.Пользователи.СоздатьЭлемент();
			ПользовательОбъект.ИдентификаторПользователяСервиса = ИдентификаторПользователяСервиса;
		Иначе
			ПользовательОбъект = ПользовательОбластиДанных.ПолучитьОбъект();
			
			//++  Масленников Е.А. 23.11.2018 (
			ПользовательОбъект.ПометкаУдаления = Ложь;
			ПользовательОбъект.Недействителен  = Ложь;
			//--  Масленников Е.А. 23.11.2018 )
			
		КонецЕсли;
		
		ПользовательОбъект.Наименование = СтруктураПараметров.FullName;
		
		ОбновитьАдресЭлектроннойПочты(ПользовательОбъект, Почта, СтруктураАдресаЭП);
		
		ОбновитьТелефон(ПользовательОбъект, Телефон);
		
		ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
		
		ОписаниеПользователяИБ.Имя = СтруктураПараметров.Name;
		
		ОписаниеПользователяИБ.АутентификацияСтандартная = Истина;
		ОписаниеПользователяИБ.Роли = Роли;
		//++  Масленников Е.А. 15.08.2018 (
		//ОписаниеПользователяИБ.АутентификацияOpenID = Ложь;
		ОписаниеПользователяИБ.АутентификацияOpenID = Истина;
		//--  Масленников Е.А. 15.08.2018 )
		
		ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
		OSUser = Неопределено;
		//Если СтруктураПараметров.Свойство("OSUser", OSUser) И OSUser <> "" Тогда
			ОписаниеПользователяИБ.АутентификацияОС = Истина; 
			ОписаниеПользователяИБ.ПользовательОС = "\\AD\" + СтруктураПараметров.Name;
			//ЗащитаОтОпасныхДействий = Новый ОписаниеЗащитыОтОпасныхДействий;
			//ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
			//ОписаниеПользователяИБ.Вставить("ЗащитаОтОпасныхДействий", ЗащитаОтОпасныхДействий);
		//КонецЕсли;
		
		//ОписаниеПользователяИБ.ПарольУстановлен = Истина;
		ОписаниеПользователяИБ.Пароль = СтруктураПараметров.StoredPasswordValue;
		ОписаниеПользователяИБ.ПарольУстановлен = Истина;
		//ОписаниеПользователяИБ.СохраняемоеЗначениеПароля = СтруктураПараметров.StoredPasswordValue;
		
		//++  Масленников Е.А. 15.08.2018 (
		// т.к. типовые механизмы не используются, оставляем верхний вариант.
		// Минусы: открытая передача паролей пользователей; не работает типовое добавление пользователей как класс
		// Плюсы:  ничего не ломаем
		//ОписаниеПользователяИБ.ПарольУстановлен = Истина;
		//ОписаниеПользователяИБ.СохраняемоеЗначениеПароля = СтруктураПараметров.StoredPasswordValue;
		//--  Масленников Е.А. 15.08.2018 )
		
		ОписаниеПользователяИБ.Язык = ЯзыкПользователя;
		
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ОбработкаСообщенияКаналаУдаленногоАдминистрирования");
		
		Попытка
			ПользовательОбъект.Записать();
			//ЗаписьЖурналаРегистрации("ДобПольз", УровеньЖурналаРегистрации.Ошибка,,,"8");
			//ЗафиксироватьТранзакцию();
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ДобПольз", УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			//ОтменитьТранзакцию();
			//ВызватьИсключение;
			Возврат Ложь;
		КонецПопытки;
		
		//Если OSUser <> "" Тогда
			ОтключитьЗащиту(ПользовательОбъект.Ссылка);
		//КонецЕсли;
		
		//ЗафиксироватьТранзакцию();
		
		//НачатьТранзакцию();
		
		МассивПрофилей = Новый Массив;
		//ПрофилиЗаданы = Ложь;
		//Если СтруктураПараметров.Свойство("Roles", Roles) Тогда 
		СписокПрофилей = СтрРазделить(Roles, ",", Ложь);
		
		Если УстановленоРолей = 0 Тогда
			Для Каждого Профиль Из СписокПрофилей Цикл
				ПрофильДоступа = Справочники.ПрофилиГруппДоступа.НайтиПоНаименованию(Профиль);
				//ЗаписьЖурналаРегистрации("НЕ ПрофилиЗаданы", УровеньЖурналаРегистрации.Ошибка, ,, "10"+ПрофильДоступа);
				
				Если ПрофильДоступа <> Справочники.ПрофилиГруппДоступа.ПустаяСсылка() Тогда
					//ЗаписьЖурналаРегистрации("НЕ ПрофилиЗаданы", УровеньЖурналаРегистрации.Ошибка, ,, "100");
					
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ГруппыДоступа.Ссылка
					|ИЗ
					|	Справочник.ГруппыДоступа КАК ГруппыДоступа
					|ГДЕ
					|	ГруппыДоступа.Профиль = &Профиль
					|	И ГруппыДоступа.Родитель = &Родитель";
					Запрос.УстановитьПараметр("Профиль", ПрофильДоступа);
					Запрос.УстановитьПараметр("Родитель", Справочники.ГруппыДоступа.ПустаяСсылка());			
					РезультатЗапроса = Запрос.Выполнить();
					Выборка = РезультатЗапроса.Выгрузить();
					Если Выборка.Количество()= 1 Тогда 
						Если Выборка[0].Ссылка.Пользователи.Найти(ПользовательОбластиДанных, "Пользователь") = Неопределено Тогда
							ПрофильДоступаПользователя = Выборка[0].Ссылка.ПолучитьОбъект();
							ПрофильДоступаПользователя.Пользователи.Добавить().Пользователь = ПользовательОбъект.Ссылка;
							ПрофильДоступаПользователя.Записать();
						КонецЕсли;
						УстановленоРолей = УстановленоРолей + 1;
						//ЗаписьЖурналаРегистрации("НЕ ПрофилиЗаданы", УровеньЖурналаРегистрации.Ошибка, ,, "1000");
					Иначе
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	ГруппыДоступа.Ссылка КАК Ссылка
						|ИЗ
						|	Справочник.ГруппыДоступа КАК ГруппыДоступа
						|ГДЕ
						|	ГруппыДоступа.Профиль = &Профиль
						|	И ГруппыДоступа.Пользователь = &Пользователь";
						Запрос.УстановитьПараметр("Профиль", ПрофильДоступа);
						Запрос.УстановитьПараметр("Пользователь", ПользовательОбъект.Ссылка);			
						РезультатЗапроса = Запрос.Выполнить();
						Выборка = РезультатЗапроса.Выгрузить();
						Если Выборка.Количество()= 0 Тогда 
							ПрофильДоступаПользователя = Справочники.ГруппыДоступа.СоздатьЭлемент();
							ПрофильДоступаПользователя.Наименование = ПрофильДоступа.Наименование;
							ПрофильДоступаПользователя.Пользователь = ПользовательОбъект.Ссылка;
							ПрофильДоступаПользователяТЧ = ПрофильДоступаПользователя.Пользователи.Добавить();
							ПрофильДоступаПользователяТЧ.Пользователь = ПользовательОбъект.Ссылка;
							ПрофильДоступаПользователя.Профиль = ПрофильДоступа;
							Попытка
								ПрофильДоступаПользователя.Записать();
								УстановленоРолей = УстановленоРолей + 1;
								//ЗаписьЖурналаРегистрации("НЕ ПрофилиЗаданы", УровеньЖурналаРегистрации.Ошибка, ,, "11");
								
							Исключение
								//ОтправитьПисьмоОбОшибке(ОписаниеОшибки());
								ТекстОшибки = ОписаниеОшибки();
								ЗаписьЖурналаРегистрации("НЕ ПрофилиЗаданы", УровеньЖурналаРегистрации.Ошибка, ,, ТекстОшибки);
								
							КонецПопытки;
						КонецЕсли;	
					КонецЕсли;
					//ПрофилиЗаданы = Истина;
				КонецЕсли;
			КонецЦикла;
			//++  Масленников Е.А. 10.08.2018 (
			Если УстановленоРолей = 0 Тогда // зададим права администратора
				
				Профиль = "Администратор";
				ПрофильДоступа = Справочники.ПрофилиГруппДоступа.НайтиПоНаименованию(Профиль);
				
				Если ПрофильДоступа <> Справочники.ПрофилиГруппДоступа.ПустаяСсылка() Тогда
					
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ГруппыДоступа.Ссылка
					|ИЗ
					|	Справочник.ГруппыДоступа КАК ГруппыДоступа
					|ГДЕ
					|	ГруппыДоступа.Профиль = &Профиль
					|	И ГруппыДоступа.Родитель = &Родитель";
					Запрос.УстановитьПараметр("Профиль", ПрофильДоступа);
					Запрос.УстановитьПараметр("Родитель", Справочники.ГруппыДоступа.ПустаяСсылка());			
					РезультатЗапроса = Запрос.Выполнить();
					Выборка = РезультатЗапроса.Выгрузить();
					Если Выборка.Количество()= 1 Тогда 
						ПрофильДоступаПользователя = Выборка[0].Ссылка.ПолучитьОбъект();				
						ПрофильДоступаПользователя.Пользователи.Добавить().Пользователь = ПользовательОбъект.Ссылка;
						ПрофильДоступаПользователя.Записать();
					Иначе
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	ГруппыДоступа.Ссылка КАК Ссылка
						|ИЗ
						|	Справочник.ГруппыДоступа КАК ГруппыДоступа
						|ГДЕ
						|	ГруппыДоступа.Профиль = &Профиль
						|	И ГруппыДоступа.Пользователь = &Пользователь";
						Запрос.УстановитьПараметр("Профиль", ПрофильДоступа);
						Запрос.УстановитьПараметр("Пользователь", ПользовательОбъект.Ссылка);			
						РезультатЗапроса = Запрос.Выполнить();
						Выборка = РезультатЗапроса.Выгрузить();
						Если Выборка.Количество()= 0 Тогда 
							ПрофильДоступаПользователя = Справочники.ГруппыДоступа.СоздатьЭлемент();
							ПрофильДоступаПользователя.Наименование = ПрофильДоступа.Наименование;
							ПрофильДоступаПользователя.Пользователь = ПользовательОбъект.Ссылка;
							ПрофильДоступаПользователяТЧ = ПрофильДоступаПользователя.Пользователи.Добавить();
							ПрофильДоступаПользователяТЧ.Пользователь = ПользовательОбъект.Ссылка;
							ПрофильДоступаПользователя.Профиль = ПрофильДоступа;
							Попытка
								ПрофильДоступаПользователя.Записать();							
							Исключение
								ЗаписьЖурналаРегистрации("НЕ ПрофилиЗаданы", УровеньЖурналаРегистрации.Ошибка, ,, ОписаниеОшибки());	
							КонецПопытки;
						КонецЕсли; // Выборка.Количество()= 0	
					КонецЕсли; // Выборка.Количество()= 1
				КонецЕсли; // ПрофильДоступа <> Справочники.ПрофилиГруппДоступа.ПустаяСсылка()
			КонецЕсли; // УстановленоРолей = 0
		КонецЕсли;
				
		//--  Масленников Е.А. 10.08.2018 )
		
		//++  Масленников Е.А. 20.09.2018 #Под полными правами работает без этого кода(
		//СоздатьПрофильЗапускТонкогоКлиента(ПользовательОбъект.Ссылка);
		//--  Масленников Е.А. 20.09.2018 )
		
		////КонецЕсли;
		//Если НЕ ПрофилиЗаданы Тогда
		//	СообщенияУдаленногоАдминистрированияРеализация.УстановитьПолныеПраваОбластиДанных(ИдентификаторПользователяСервиса, ПолныеПрава);	
		//	ЗаписьЖурналаРегистрации("НЕ ПрофилиЗаданы", УровеньЖурналаРегистрации.Ошибка, ,, "0");
		//КонецЕсли;
		//ЗафиксироватьТранзакцию();
		
	Исключение
		ТекстОшибки = ОписаниеОшибки(); // "OSUser_" + OSUser + "_" + ОписаниеОшибки()
		ЗаписьЖурналаРегистрации("ДобавитьПользователяПриложения", УровеньЖурналаРегистрации.Ошибка, , ,ТекстОшибки);
		//ОтменитьТранзакцию();
	КонецПопытки;
	
	
	//Попытка
	//	AccountID = "";
	//	Если СтруктураПараметров.Свойство("AccountID", AccountID) И AccountID <> "" Тогда
	//		
	//		EFSOL_AccountID = Константы.EFSOL_AccountID.Получить();
	//		Если EFSOL_AccountID <> AccountID И AccountID <> "93e324cd-4a25-4a2d-a0de-2136fc8c1866" Тогда
	//			Константы.EFSOL_AccountID.Установить(AccountID);
	
	//			ErrorDescription = "";
	//			Если НЕ EfsolADLКлиентСервер.АutoloadingSauriAccounts_AddAccountID(AccountID, ErrorDescription) Тогда
	//				ЗаписьЖурналаРегистрации("ДобПольз", УровеньЖурналаРегистрации.Ошибка,,, ErrorDescription);
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//Исключение
	//	ЗаписьЖурналаРегистрации("ДобПольз", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
	//	Возврат Ложь;
	//КонецПопытки;
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(СтруктураПараметров.Name);
	Если ПользовательИБ = Неопределено Тогда
		ТекстОшибки = "Всё прошло но пользователь ИБ не создан";
		ЗаписьЖурналаРегистрации("ДобавитьПользователяПриложения", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//++  Масленников Е.А. 20.09.2018 #Не тестировал(
Процедура СоздатьПрофильЗапускТонкогоКлиента(ПользовательСсылка)
	
	ПрофильНаименование = "ЗапускТонкогоКлиента";
	ПолноеИимяРолиЗапускТонкогоКлиента = "Роль.ЗапускТонкогоКлиента";
	
	ПрофильДоступа = Справочники.ПрофилиГруппДоступа.НайтиПоНаименованию(ПрофильНаименование);
	Если ПрофильДоступа <> Справочники.ПрофилиГруппДоступа.ПустаяСсылка() Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыОбъектовМетаданных = Справочники.ИдентификаторыОбъектовМетаданных.ИдентификаторОбъектаМетаданныхПоПолномуИмени(ПолноеИимяРолиЗапускТонкогоКлиента);
	
	ПрофильДоступа = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент();
	ПрофильДоступа.Наименование = ПрофильНаименование;
	НоваяРоль = ПрофильДоступа.Роли.Добавить();
	НоваяРоль.Роль = ИдентификаторыОбъектовМетаданных;
	Попытка
		ПрофильДоступа.Записать();
	Исключение
		ЗаписьЖурналаРегистрации("ПрофилиГруппДоступа.Создание", УровеньЖурналаРегистрации.Ошибка, ,, "Не удалось создать профиль доступа: "+ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ПрофильДоступаПользователя = Справочники.ГруппыДоступа.СоздатьЭлемент();
	ПрофильДоступаПользователя.Наименование = ПрофильНаименование;
	ПрофильДоступаПользователя.Пользователь = ПользовательСсылка;
	ПрофильДоступаПользователяТЧ = ПрофильДоступаПользователя.Пользователи.Добавить();
	ПрофильДоступаПользователяТЧ.Пользователь = ПользовательСсылка;
	ПрофильДоступаПользователя.Профиль = ПрофильДоступа.Ссылка;
	Попытка
		ПрофильДоступаПользователя.Записать();							
	Исключение
		ЗаписьЖурналаРегистрации("ГруппыДоступа.Создание", УровеньЖурналаРегистрации.Ошибка, ,, "Не удалось создать группу доступа: "+ОписаниеОшибки());	
	КонецПопытки;
	
	
КонецПроцедуры
//--  Масленников Е.А. 20.09.2018 )

//++  Масленников Е.А. 23.11.2018 (
Функция ИзменитьПарольПользователяПриложения(СтруктураПараметров, ТекстОшибки = "") Экспорт
	
	Результат = Ложь;
	
	Zone = Число(СтруктураПараметров.Zone);
	Name = СтруктураПараметров.Name;
	Password = СтруктураПараметров.Password;
	
	МенятьПолноеИмя = Ложь;
	Если СтруктураПараметров.Свойство("FullName") Тогда
		МенятьПолноеИмя = Истина;
		FullName = СтруктураПараметров.FullName;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Число(СтруктураПараметров.Zone));
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Name);
	Если НЕ ПользовательИБ = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Наименование,
		|	Пользователи.Ссылка,
		|	Пользователи.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
		Запрос.УстановитьПараметр("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Попытка
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторПользователяИБ);
				ПользовательИБ.Пароль = Password;
				//Если МенятьПолноеИмя Тогда
				//	ПользовательИБ.ПолноеИмя = FullName;
				//КонецЕсли;
				ПользовательИБ.Записать();
				
				Если МенятьПолноеИмя Тогда
					//ПользовательИБ.ПолноеИмя = FullName;
					ПользовательОбъект = Выборка.Ссылка.ПолучитьОбъект();
					ПользовательОбъект.Наименование = FullName;
					ПользовательОбъект.Записать();
				КонецЕсли;
				
				Результат = Истина;
			Исключение
				Результат = Ложь;
				ТекстОшибки = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("Пользователи. ИзменениеПароля", УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
//--  Масленников Е.А. 23.11.2018 )

Функция УдалитьПользователяПриложения(СтруктураПараметров, ТекстОшибки = "") Экспорт
	
	Результат = Ложь;
	
	Zone = Число(СтруктураПараметров.Zone);
	Name = СтруктураПараметров.Name;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Число(СтруктураПараметров.Zone));
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Name);
	Если НЕ ПользовательИБ = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Наименование,
		|	Пользователи.Ссылка,
		|	Пользователи.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
		Запрос.УстановитьПараметр("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Попытка
				ПользовательОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ПользовательОбъект.Недействителен  = Истина;
				ПользовательОбъект.ПометкаУдаления = Истина;
				ПользовательОбъект.Записать();
				//ПользовательОбъект.Удалить();
				Результат = Истина;
			Исключение
				Результат = Ложь;
				ТекстОшибки = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("Пользователи. Удаление", УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			КонецПопытки;
			
			//Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УстановитьДоступностьПользователяПриложения(СтруктураПараметров, ТекстОшибки = "") Экспорт
	
	Zone = Число(СтруктураПараметров.Zone);
	Name = СтруктураПараметров.Name;
	
	Availability = Ложь;
	СтруктураПараметров.Свойство("Availability", Availability);
	
	Результат = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Число(СтруктураПараметров.Zone));
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Name);
	Если НЕ ПользовательИБ = Неопределено Тогда
		
		ПользовательИБ.АутентификацияОС 		 = Availability; //Ложь;
		ПользовательИБ.АутентификацияOpenID 	 = Availability; //Ложь;
		ПользовательИБ.АутентификацияСтандартная = Availability; //Ложь;
		ПользовательИБ.Записать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Наименование,
		|	Пользователи.Ссылка,
		|	Пользователи.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
		Запрос.УстановитьПараметр("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			
			Попытка
				ПользовательОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
				
				ОписаниеПользователяИБ.Имя = СтруктураПараметров.Name;
				
				ОписаниеПользователяИБ.АутентификацияСтандартная = Availability; //Ложь;
				ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора 	 = Availability; //Ложь;
				ОписаниеПользователяИБ.АутентификацияОС 		 = Availability; //Ложь; 
				ОписаниеПользователяИБ.АутентификацияOpenID 	 = Availability; //Ложь;
				Если Availability Тогда
					ОписаниеПользователяИБ.ПользовательОС = "\\AD\" + СтруктураПараметров.Name;
				КонецЕсли;

				ОписаниеПользователяИБ.Вставить("Действие", "Записать");
				ПользовательОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
				
				ПользовательОбъект.ДополнительныеСвойства.Вставить("ОбработкаСообщенияКаналаУдаленногоАдминистрирования");
				ПользовательОбъект.Записать();
				
				Результат = Истина;
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				Результат = Ложь;
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//СтруктураПередаваемыхПараметров
//Zone, Presentation, TimeZone
Процедура ПрикрепитьОбластьДанных(СтруктураПередаваемыхПараметров) Экспорт
	
	ЗаписьЖурналаРегистрации("ПрикрепитьОбластьДанных_", УровеньЖурналаРегистрации.Ошибка);
	
	Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(СообщенияУдаленногоАдминистрированияИнтерфейс.СообщениеПрикрепитьОбластьДанных());
	Zone = Число(СтруктураПередаваемыхПараметров.Zone);
	Presentation = СтруктураПередаваемыхПараметров.Presentation;
	TimeZone = СтруктураПередаваемыхПараметров.TimeZone;
	Сообщение.Body.Zone = Zone;
	Сообщение.Body.Presentation = Presentation;
	Сообщение.Body.TimeZone = TimeZone;
	ТелоСообщения = Сообщение.Body;
	СообщенияУдаленногоАдминистрированияРеализация.ПрикрепитьОбластьДанных(ТелоСообщения); 
	СообщенияУдаленногоАдминистрированияРеализация.УстановитьПараметрыОбластиДанных(Zone, Presentation, TimeZone);
	
КонецПроцедуры

Функция СоставПочтовогоАдреса(Знач АдресЭП)
	
	Если ЗначениеЗаполнено(АдресЭП) Тогда
		
		Попытка
			СтруктураАдресаЭП = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(АдресЭП);
		Исключение
			ШаблонСообщения = НСтр("ru = 'Указан некорректный адрес электронной почты: %1
			|Ошибка: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, АдресЭП, ИнформацияОбОшибке().Описание);
			ВызватьИсключение(ТекстСообщения);
		КонецПопытки;
		
		Возврат СтруктураАдресаЭП;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ОбновитьАдресЭлектроннойПочты(Знач ПользовательОбъект, Знач Адрес, Знач СтруктураАдресаЭП)
	
	ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailПользователя;
	
	СтрокаТабличнойЧасти = ПользовательОбъект.КонтактнаяИнформация.Найти(ВидКИ, "Вид");
	Если СтруктураАдресаЭП = Неопределено Тогда
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			ПользовательОбъект.КонтактнаяИнформация.Удалить(СтрокаТабличнойЧасти);
		КонецЕсли;
	Иначе
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			СтрокаТабличнойЧасти = ПользовательОбъект.КонтактнаяИнформация.Добавить();
			СтрокаТабличнойЧасти.Вид = ВидКИ;
		КонецЕсли;
		СтрокаТабличнойЧасти.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтрокаТабличнойЧасти.Представление = Адрес;
		
		Если СтруктураАдресаЭП.Количество() > 0 Тогда
			СтрокаТабличнойЧасти.АдресЭП = СтруктураАдресаЭП[0].Адрес;
			
			Поз = СтрНайти(СтрокаТабличнойЧасти.АдресЭП, "@");
			Если Поз <> 0 Тогда
				СтрокаТабличнойЧасти.ДоменноеИмяСервера = Сред(СтрокаТабличнойЧасти.АдресЭП, Поз + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьТелефон(Знач ПользовательОбъект, Знач Телефон)
	
	ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
	
	СтрокаТабличнойЧасти = ПользовательОбъект.КонтактнаяИнформация.Найти(ВидКИ, "Вид");
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = ПользовательОбъект.КонтактнаяИнформация.Добавить();
		СтрокаТабличнойЧасти.Вид = ВидКИ;
	КонецЕсли;
	СтрокаТабличнойЧасти.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	СтрокаТабличнойЧасти.Представление = Телефон;
	
КонецПроцедуры

Функция ЯзыкПоКоду(Знач КодЯзыка)
	
	Если ЗначениеЗаполнено(КодЯзыка) Тогда
		
		Для каждого Язык Из Метаданные.Языки Цикл
			Если Язык.КодЯзыка = КодЯзыка Тогда
				Возврат Язык.Имя;
			КонецЕсли;
		КонецЦикла;
		
		ШаблонСообщения = НСтр("ru = 'Неподдерживаемый код языка: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Язык);
		ВызватьИсключение(ТекстСообщения);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Процедура ОтправитьСообщениеООшибкеРаботыСервиса(ID, ИмяСервиса, ИмяМетода, ТекстОшибки, Тайминги, ВремяНачалаЗапроса = Неопределено, ВремяОкончанияЗапроса = Неопределено, ОтветОшибка = "", КоличествоЭлементовXML = 0, ИПАдрес = "") Экспорт
	
	ErrorDescription = "";
	СтрокаТаймингов = CTSM_EfsolУниверсальныеФункцииСервер.СформироватьTimings(Тайминги);
	СтруктураПараметров = Новый Структура("ID, ServiceName, MethodName, ErrorText, Timings, StringDebugInfo, IP", ID, ИмяСервиса, ИмяМетода, ТекстОшибки, СтрокаТаймингов, ОтветОшибка, ИмяКомпьютера());
	MS_ОтправитьПисьмо(СтруктураПараметров, ErrorDescription);
	
КонецПроцедуры

//Коллекция файлов Загрузки документов

// Метод возвращает признак работы сервера
//
// параметры:
//	 ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: истина/ложь или неопределено
//
Функция MS_ОтправитьПисьмо(СтруктураПараметров, ErrorDescription) Экспорт 
	
	EfsolMSHTTP = CTSM_EfsolУниверсальныеФункцииСервер.HTTPConnection("MS");
	
	СтрокаЗапроса = "/ms-int/hs/Platform/SendLetter";
	ПараметрыОтвета = CTSM_EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolMSHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);
	
	Если НЕ ПараметрыОтвета.КодОтвета = 200 Тогда
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
	КонецЕсли;
	
КонецФункции

// Метод оповещает о пропуске резервного копирования данных
//
// параметры:

//	 ErrorDescription, тип "строка" - строка с описанием ошибки
//СтруктураПередаваемыхПараметров: параметр Zone - число, номер области
Процедура MS_ZoneBackupSkipped(СтруктураПараметров, ErrorDescription) Экспорт 
			  
	EfsolMSHTTP = CTSM_EfsolУниверсальныеФункцииСервер.HTTPConnection("MS");
	СтрокаЗапроса = "/ms-int/hs/Platform/ZoneBackupSkipped";
	ПараметрыОтвета = CTSM_EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolMSHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);
	
	Если НЕ ПараметрыОтвета.КодОтвета = 200 Тогда
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
	КонецЕсли;
	
КонецПроцедуры


Процедура УстановитьИспользоватьИнструментыБухгалтера() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ЭтоВебКлиент = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ЭтоВебКлиент");
	Попытка
		Константы.EFSOL_ИспользоватьИнструментыБухгалтера.Установить(НЕ ЭтоВебКлиент);
		ОбновитьПовторноИспользуемыеЗначения();
	Исключение
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СоздатьАдминистратораОбласти()
	
	//НачатьТранзакцию();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Наименование = &Наименование
	|	И НЕ Пользователи.ПометкаУдаления";
	Запрос.УстановитьПараметр("Наименование", "Администратор");
	//Блокировка = Новый БлокировкаДанных;
	//ЭлементБлокировки = Блокировка.Добавить("Справочник.Пользователи");
	//Блокировка.Заблокировать();
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ПользовательАдминистраторОбъект = Справочники.Пользователи.СоздатьЭлемент();
		ПользовательАдминистраторОбъект.ИдентификаторПользователяСервиса = Новый УникальныйИдентификатор("a59d8d7e-33d6-11e7-80e0-00155d0a2ee9");
	Иначе
		Возврат;
	КонецЕсли;		
	
	ПользовательАдминистраторОбъект.Наименование = "Администратор";
	//
	//ОбновитьАдресЭлектроннойПочты(ПользовательОбъект, Почта, СтруктураАдресаЭП);
	//
	//ОбновитьТелефон(ПользовательОбъект, Телефон);
	
	ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
	
	ОписаниеПользователяИБ.Имя = "Администратор";
	
	ОписаниеПользователяИБ.АутентификацияСтандартная = Истина;
	//++  Масленников Е.А. 16.08.2018 (
	//ОписаниеПользователяИБ.АутентификацияOpenID = Ложь;
	ОписаниеПользователяИБ.АутентификацияOpenID = Истина;
	//--  Масленников Е.А. 16.08.2018 )	
	ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
	ОписаниеПользователяИБ.АутентификацияОС = Ложь; 
	
	ОписаниеПользователяИБ.СохраняемоеЗначениеПароля = "8S7hJleumvenopAMkOoY9gcVgYk=,1AOJ6uPisznuYTes4K0mS7znt40=";
	//ОписаниеПользователяИБ.Пароль = "admcob";
	
	//ОписаниеПользователяИБ.СохраняемоеЗначениеПароля = "8S7hJleumvenopAMkOoY9gcVgYk=,1AOJ6uPisznuYTes4K0mS7znt40=";
	//ОписаниеПользователяИБ.Пароль = "Qwerty_123";
	
	ОписаниеПользователяИБ.ПарольУстановлен = Истина;
	
	ОписаниеПользователяИБ.Язык = ЯзыкПоКоду("ru");
	
	ОписаниеПользователяИБ.Вставить("Действие", "Записать");
	ПользовательАдминистраторОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
	ПользовательАдминистраторОбъект.ДополнительныеСвойства.Вставить("ОбработкаСообщенияКаналаУдаленногоАдминистрирования");
	ПользовательАдминистраторОбъект.Записать();
	
	ОтключитьЗащиту(ПользовательАдминистраторОбъект.Ссылка);
	//ЗафиксироватьТранзакцию();
	
	ПрофильДоступа = Справочники.ПрофилиГруппДоступа.НайтиПоНаименованию("Администратор");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыДоступа.Ссылка
	|ИЗ
	|	Справочник.ГруппыДоступа КАК ГруппыДоступа
	|ГДЕ
	|	ГруппыДоступа.Профиль = &Профиль
	|	И ГруппыДоступа.Родитель = &Родитель";
	Запрос.УстановитьПараметр("Профиль", ПрофильДоступа);
	Запрос.УстановитьПараметр("Родитель", Справочники.ГруппыДоступа.ПустаяСсылка());			
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выгрузить();
	Если Выборка.Количество()= 1 Тогда 
		ПрофильДоступаПользователя = Выборка[0].Ссылка.ПолучитьОбъект();				
		ПрофильДоступаПользователя.Пользователи.Добавить().Пользователь = ПользовательАдминистраторОбъект.Ссылка;
		ПрофильДоступаПользователя.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьОбластьНаименование(НаименованиеОбасти) Экспорт
	
	СтруктураПараметров = Новый Структура("Область, НаименованиеОбласти", Строка(ПараметрыСеанса.ОбластьДанныхЗначение), НаименованиеОбасти);
	
	EfsolMSHTTP = CTSM_EfsolУниверсальныеФункцииСервер.HTTPConnection("MS");
	
	СтрокаЗапроса = "/ms-int/hs/Platform/UpdateArea";
	ПараметрыОтвета = CTSM_EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolMSHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);
	
	Если НЕ ПараметрыОтвета.КодОтвета = 200 Тогда
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
	КонецЕсли;
	
КонецПроцедуры

//Процедура ОбновитьПользователя(Знач Сообщение, Знач Отправитель)
//	
//	ТелоСообщения = Сообщение.Body;
//	СообщенияУдаленногоАдминистрированияРеализация.ОбновитьПользователя(
//		ТелоСообщения.Name,
//		ТелоСообщения.FullName,
//		ТелоСообщения.StoredPasswordValue,
//		ТелоСообщения.UserApplicationID,
//		ТелоСообщения.UserServiceID,
//		ТелоСообщения.Phone,
//		ТелоСообщения.EMail,
//		ТелоСообщения.Language);
//	
//КонецПроцедуры

Функция СохранитьТокенМодульбанк(СтруктураПараметров) Экспорт
	
	Попытка	
		УстановитьПривилегированныйРежим(Истина);
		
		ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Число(СтруктураПараметров.Zone));
		Если СтруктураПараметров.Свойство("INN") И ЗначениеЗаполнено(СтруктураПараметров.INN) Тогда
			Организация = Справочники.Организации.НайтиПоИНН(СтруктураПараметров.INN);
			Если Не Организация.Пустая() Тогда
				ОбъектОрганизация = Организация.ПолучитьОбъект();
				ОбъектОрганизация.ModulbankToken = СтруктураПараметров.ModulbankToken;
				ОбъектОрганизация.Записать();
				Результат = Истина;
			Иначе
				Результат = "Не найдена организация с ИНН " + СтруктураПараметров.INN; 
			КонецЕсли;
		Иначе
			Результат = "Не указан ИНН";
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
	Исключение
		Результат = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("СохранитьТокенМодульбанк", УровеньЖурналаРегистрации.Ошибка,,,Результат); 
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ОтключитьЗащиту(Пользователь)
	
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") И НЕ Пользователь.Пустая() Тогда
		Попытка
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
			ПользовательИБ.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
			ПользовательИБ.Записать();      
		Исключение
			ЗаписьЖурналаРегистрации("ЗащитаОтОпасныхДействий",,,ОписаниеОшибки()); 
		КонецПопытки;
	КонецЕсли; 	
	
КонецПроцедуры



Процедура ЗагрузитьКурсыВалют() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрСведенийОбластиДанных.ОбластьДанныхВспомогательныеДанные
	|ИЗ
	|	РегистрСведений.ОбластиДанных КАК РегистрСведенийОбластиДанных";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Область = Выборка.ОбластьДанныхВспомогательныеДанные;
		ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Область);
		ЗагрузитьАктуальныйКурс();
	КонецЦикла;
	ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
	
	УстановитьПривилегированныйРежим(ложь);
	
КонецПроцедуры

Процедура ЗагрузитьАктуальныйКурс(ПараметрыЗагрузки = Неопределено, АдресРезультата = Неопределено) 
	
	ИмяСобытия = ИмяСобытияЖурналаРегистрации();
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
	НСтр("ru = 'Начата регламентная загрузка курсов валют'"));
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	СостояниеЗагрузки = Неопределено;
	ПриЗагрузкеВозниклиОшибки = Ложь;
	
	Если ПараметрыЗагрузки = Неопределено Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	КурсыВалют.Валюта КАК Валюта,
		|	КурсыВалют.Валюта.Код КАК КодВалюты,
		|	МАКСИМУМ(КурсыВалют.Период) КАК ДатаКурса
		|ИЗ
		|	РегистрСведений.КурсыВалют КАК КурсыВалют
		|ГДЕ
		|	КурсыВалют.Валюта.СпособУстановкиКурса = ЗНАЧЕНИЕ(Перечисление.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета)
		|	И НЕ КурсыВалют.Валюта.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	КурсыВалют.Валюта,
		|	КурсыВалют.Валюта.Код";
		Запрос = Новый Запрос(ТекстЗапроса);
		Выборка = Запрос.Выполнить().Выбрать();
		
		КонецПериода = ТекущаяДата;
		Пока Выборка.Следующий() Цикл
			НачалоПериода = ?(Выборка.ДатаКурса = '198001010000', НачалоГода(ДобавитьМесяц(ТекущаяДата, -12)), Выборка.ДатаКурса + 60*60*24);
			СписокВалют = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка);
			ЗагрузитьКурсыВалютПоПараметрам(СписокВалют, НачалоПериода, КонецПериода, ПриЗагрузкеВозниклиОшибки);
		КонецЦикла;
	Иначе
		Результат = ЗагрузитьКурсыВалютПоПараметрам(ПараметрыЗагрузки.СписокВалют,
		ПараметрыЗагрузки.НачалоПериода, ПараметрыЗагрузки.КонецПериода, ПриЗагрузкеВозниклиОшибки);
	КонецЕсли;
	
	Если АдресРезультата <> Неопределено Тогда
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	КонецЕсли;
	
	Если ПриЗагрузкеВозниклиОшибки Тогда
		ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,
		, 
		,
		НСтр("ru = 'Во время регламентного задания загрузки курсов валют возникли ошибки'"));
		//ВызватьИсключение НСтр("ru = 'Загрузка курсов не выполнена.'");
	Иначе
		ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Информация,
		,
		,
		НСтр("ru = 'Завершена регламентная загрузка курсов валют.'"));
	КонецЕсли;
	
КонецПроцедуры

// Процедура для загрузки курсов валют по определенному периоду.
//
// Параметры:
// Валюты		- Любая коллекция - со следующими полями:
//					КодВалюты - числовой код валюты.
//					Валюта - ссылка на валюту.
// НачалоПериодаЗагрузки	- Дата - начало периода загрузки курсов.
// ОкончаниеПериодаЗагрузки	- Дата - окончание периода загрузки курсов.
//
// Возвращаемое значение:
// Массив состояния загрузки  - каждый элемент - структура с полями.
//		Валюта - загружаемая валюта.
//		СтатусОперации - завершилась ли загрузка успешно.
//		Сообщение - пояснение о загрузке (текст сообщения об ошибке или поясняющее сообщение).
//
Функция ЗагрузитьКурсыВалютПоПараметрам(Знач Валюты, Знач НачалоПериодаЗагрузки, Знач ОкончаниеПериодаЗагрузки, ПриЗагрузкеВозниклиОшибки = Ложь)
	
	СостояниеЗагрузки = Новый Массив;
	
	ПараметрыПолучения = Неопределено;
	ИмяФайлаДневногоКурса = Формат(ОкончаниеПериодаЗагрузки, "ДФ=/yyyy/MM/dd");
	
	ИспользоватьАльтернативныйСервер = Константы.ИспользоватьАльтернативныйСерверДляЗагрузкиКурсовВалют.Получить();
	
	Если ИспользоватьАльтернативныйСервер Тогда
		СерверИсточник = "http://cbrates.rbc.ru";
		Если НачалоПериодаЗагрузки = ОкончаниеПериодаЗагрузки Тогда
			ШаблонИмениФайла = СерверИсточник + "/tsv/%1" + ИмяФайлаДневногоКурса + ".tsv";
		Иначе
			ШаблонИмениФайла = СерверИсточник + "/tsv/cb/%1.tsv";
		КонецЕсли;
	Иначе
		СерверИсточник = "https://currencyrates.1c.ru/exchangerate/v1";
		Если НачалоПериодаЗагрузки = ОкончаниеПериодаЗагрузки Тогда
			ШаблонИмениФайла = СерверИсточник + "/%1" + ИмяФайлаДневногоКурса + ".tsv";
		Иначе
			ШаблонИмениФайла = СерверИсточник + "/%1.tsv";
		КонецЕсли;
		
		ПараметрыПолучения = ПараметрыАутентификацииНаСайте();
	КонецЕсли;
	
	ВалютыЗагружаемыеИзИнтернета = ВалютыЗагружаемыеИзИнтернета();
	
	Для Каждого Валюта Из Валюты Цикл
		Если ВалютыЗагружаемыеИзИнтернета.Найти(Валюта.Валюта) = Неопределено Тогда
			ПриЗагрузкеВозниклиОшибки = Истина;
			СтатусОперации = Ложь;
			ПоясняющееСообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Невозможно получить файл данных с курсами валюты (%1 - %2):
			|Курсы данной валюты не предоставляются.'"),
			Валюта.КодВалюты,
			Валюта.Валюта);
			
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ПоясняющееСообщение);
		Иначе
			ФайлНаВебСервере = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла, Валюта.КодВалюты);
			Результат = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(ФайлНаВебСервере, ПараметрыПолучения);
			
			Если Результат.Статус Тогда
				ПоясняющееСообщение = ЗагрузитьКурсВалютыИзФайла(Валюта.Валюта, Результат.Путь, НачалоПериодаЗагрузки, ОкончаниеПериодаЗагрузки) + Символы.ПС;
				УдалитьФайлы(Результат.Путь);
				СтатусОперации = ПустаяСтрока(ПоясняющееСообщение);
			Иначе
				ПоясняющееСообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Невозможно получить файл данных с курсами валюты (%1 - %2):
				|%3
				|Возможно, нет доступа к веб сайту с курсами валют, либо указана несуществующая валюта.'"),
				Валюта.КодВалюты,
				Валюта.Валюта,
				Результат.СообщениеОбОшибке);
				СтатусОперации = Ложь;
				ПриЗагрузкеВозниклиОшибки = Истина;
			КонецЕсли;
		КонецЕсли;
		СостояниеЗагрузки.Добавить(Новый Структура("Валюта,СтатусОперации,Сообщение", Валюта.Валюта, СтатусОперации, ПоясняющееСообщение));
		
	КонецЦикла;
	
	Возврат СостояниеЗагрузки;
	
КонецФункции

Функция ИмяСобытияЖурналаРегистрации()
	Возврат НСтр("ru = 'Валюты.Загрузка курсов валют'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
КонецФункции

Функция ПараметрыАутентификацииНаСайте()
	Результат = Новый Структура;
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		ДанныеАутентификации = МодульИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		Если ДанныеАутентификации <> Неопределено Тогда
			Результат.Вставить("Пользователь", ДанныеАутентификации.Логин);
			Результат.Вставить("Пароль", ДанныеАутентификации.Пароль);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ВалютыЗагружаемыеИзИнтернета()
	
	КлассификаторXML = Обработки.ЗагрузкаКурсовВалют.ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст();
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	НайденныеСтроки = КлассификаторТаблица.НайтиСтроки(Новый Структура("RBCLoading", "истина"));
	ЗагружаемыеПоКлассификатору = КлассификаторТаблица.Скопировать(НайденныеСтроки, "Code").ВыгрузитьКолонку("Code");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Валюты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	НЕ Валюты.ПометкаУдаления
	|	И Валюты.СпособУстановкиКурса = ЗНАЧЕНИЕ(Перечисление.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета)
	|	И Валюты.Код В(&ЗагружаемыеПоКлассификатору)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ЗагружаемыеПоКлассификатору", ЗагружаемыеПоКлассификатору);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
КонецФункции

// Загружает информацию о курсе валюты Валюта из файла ПутьКФайлу в регистр
// сведений курсов валют. При этом файл с курсами разбирается, и записываются
// только те данные, которые удовлетворяют периоду (НачалоПериодаЗагрузки, ОкончаниеПериодаЗагрузки).
//
Функция ЗагрузитьКурсВалютыИзФайла(Знач Валюта, Знач ПутьКФайлу, Знач НачалоПериодаЗагрузки, Знач ОкончаниеПериодаЗагрузки)
	
	СтатусЗагрузки = 1;
	
	ЧислоЗагружаемыхДнейВсего = 1 + (ОкончаниеПериодаЗагрузки - НачалоПериодаЗагрузки) / ( 24 * 60 * 60);
	
	ЧислоЗагруженныхДней = 0;
	
	Если ЭтоАдресВременногоХранилища(ПутьКФайлу) Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла();
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПутьКФайлу);
		ДвоичныеДанные.Записать(ИмяФайла);
	Иначе
		ИмяФайла = ПутьКФайлу;
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент();
	
	
	Текст.Прочитать(ИмяФайла, КодировкаТекста.ANSI);
	
	ДатаЗапрета = Неопределено;
	Для НомерСтроки = 1 По Текст.КоличествоСтрок() Цикл
		
		Стр = Текст.ПолучитьСтроку(НомерСтроки);
		Если (Стр = "") ИЛИ (СтрНайти(Стр, Символы.Таб) = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		ЧастиСтроки = СтрРазделить(Стр, Символы.Таб, Истина);
		
		Если НачалоПериодаЗагрузки = ОкончаниеПериодаЗагрузки Тогда
			ДатаКурса = ОкончаниеПериодаЗагрузки;
			Кратность = Число(ЧастиСтроки[0]);
			Курс = Число(ЧастиСтроки[1]);
		Иначе
			ДатаКурсаСтр = ЧастиСтроки[0];
			ДатаКурса = Дата(Лев(ДатаКурсаСтр,4), Сред(ДатаКурсаСтр,5,2), Сред(ДатаКурсаСтр,7,2));
			Кратность = Число(ЧастиСтроки[1]);
			Курс = Число(ЧастиСтроки[2]);
		КонецЕсли;
		
		Если ДатаКурса > ОкончаниеПериодаЗагрузки Тогда
			Прервать;
		КонецЕсли;
		
		Если ДатаКурса < НачалоПериодаЗагрузки Тогда 
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Валюта.Установить(Валюта);
		НаборЗаписей.Отбор.Период.Установить(ДатаКурса);
		Запись = НаборЗаписей.Добавить();
		Запись.Валюта = Валюта;
		Запись.Период = ДатаКурса;
		Запись.Курс = Курс;
		Запись.Кратность = Кратность;
		
		Записывать = Истина;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДатыЗапретаИзменения") Тогда
			МодульДатыЗапретаИзмененияСлужебный = ОбщегоНазначения.ОбщийМодуль("ДатыЗапретаИзмененияСлужебный");
			Если МодульДатыЗапретаИзмененияСлужебный.ЗапретИзмененияПроверяется(Метаданные.РегистрыСведений.КурсыВалют) Тогда
				МодульДатыЗапретаИзменения = ОбщегоНазначения.ОбщийМодуль("ДатыЗапретаИзменения");
				Записывать = Не МодульДатыЗапретаИзменения.ИзменениеЗапрещено(НаборЗаписей);
				Если Не Записывать Тогда
					Если ДатаЗапрета = Неопределено Тогда
						ДатаЗапрета = ДатаКурса;
					Иначе
						ДатаЗапрета = Макс(ДатаЗапрета, ДатаКурса);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Записывать Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		
		ЧислоЗагруженныхДней = ЧислоЗагруженныхДней + 1;
	КонецЦикла;
	
	Если ЭтоАдресВременногоХранилища(ПутьКФайлу) Тогда
		УдалитьФайлы(ИмяФайла);
		УдалитьИзВременногоХранилища(ПутьКФайлу);
	КонецЕсли;
	
	ПояснениеОЗагрузке = "";
	Если ЧислоЗагружаемыхДнейВсего <> ЧислоЗагруженныхДней Тогда
		Если ЧислоЗагруженныхДней = 0 Тогда
			ПояснениеОЗагрузке = НСтр("ru = 'Курсы валюты %1 (%2) не загружены.
			|Нет сведение о курсе за указанный период.'");
		Иначе
			ПояснениеОЗагрузке = НСтр("ru = 'Загружены не все курсы по валюте %1 (%2).'");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПояснениеОЗагрузке) Тогда
		ПояснениеОЗагрузке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПояснениеОЗагрузке, Валюта.Наименование, Валюта.Код);
	КонецЕсли;
	
	Если ДатаЗапрета <> Неопределено Тогда
		ПояснениеОЗагрузке = ПояснениеОЗагрузке + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Загрузка курсов валюты %1(%2) ограничена датой запрета изменений %3.
		|Курсы запрещенного периода были пропущены при загрузке.'"), Валюта.Наименование, Валюта.Код, Формат(ДатаЗапрета, "ДЛФ=D"));
	КонецЕсли;
	
	ПояснениеОЗагрузке = СокрЛП(ПояснениеОЗагрузке);
	
	СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
	СписокОшибок = Новый Массив;
	Для Каждого СообщениеПользователю Из СообщенияПользователю Цикл
		СписокОшибок.Добавить(СообщениеПользователю.Текст);
	КонецЦикла;
	СписокОшибок = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокОшибок);
	ПояснениеОЗагрузке = ПояснениеОЗагрузке + ?(ПустаяСтрока(ПояснениеОЗагрузке), "", Символы.ПС) + СтрСоединить(СписокОшибок, Символы.ПС);
	
	Возврат ПояснениеОЗагрузке;
	
КонецФункции

Процедура ДобавитьAccountIDВОбласть(СтруктураПараметров) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Число(СтруктураПараметров.Zone));	
	
	AccountID = "";
	Если СтруктураПараметров.Свойство("AccountID", AccountID) И AccountID <> "" Тогда
		
		EFSOL_AccountID = Константы.EFSOL_AccountID.Получить();
		Если EFSOL_AccountID <> AccountID И AccountID <> "93e324cd-4a25-4a2d-a0de-2136fc8c1866" Тогда
			Константы.EFSOL_AccountID.Установить(AccountID);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры


// Гиршфельд Андрей 25.10.2018 {
Функция ПроверитьСтруктуруНаНаличиеСвойствИЗначений(СтрокаСвойств, СтруктураПараметров, ОписаниеОшибок = "")
	
	ОписаниеОшибок = "";
	МассивИменСвойств = СтрРазделить(СтрокаСвойств, ",", Ложь);
	
	Для каждого ИмяСвойства Из МассивИменСвойств Цикл
		ЗначСвойства = Неопределено;
		Если НЕ ( СтруктураПараметров.Свойство(СокрЛП(ИмяСвойства), ЗначСвойства) И ЗначениеЗаполнено(ЗначСвойства) ) Тогда
			ОписаниеОшибок = ОписаниеОшибок + "'" + ИмяСвойства  + "'" + Символы.ПС;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат НЕ ЗначениеЗаполнено(ОписаниеОшибок);
КонецФункции // 
 
Процедура ОбновитьAplicationUserВОбласть(СтруктураПараметров, ОписаниеОшибок = "", Код = 200) Экспорт
	
	ОписаниеОшибок = "";
	
	УстановитьПривилегированныйРежим(Истина);

	НачатьТранзакцию();
	
	#Область Проверки_и_поиск_прежнего_пользователя
	
	//свойство - OSUser - опционально - если свойства не будет - ошибку не вернет
	СтрокаСвойств = "Zone, UserServiceID_Old, UserServiceID_New, FullName_New, Name, EMail, Phone, FullRights, Language, StoredPasswordValue";   
	
	Если НЕ ПроверитьСтруктуруНаНаличиеСвойствИЗначений(СтрокаСвойств, СтруктураПараметров, ОписаниеОшибок) Тогда
	   Код = 415;
	   ОписаниеОшибок = "!!Отмена - Параметры: " + ОписаниеОшибок + " не заполнены!";
	   ОтменитьТранзакцию();
	   Возврат; 
	КонецЕсли;
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Число(СтруктураПараметров.Zone));	
	//
	ТекстЗапросаПоискаПользователейПоИдентификаторПользователяСервиса =
	"ВЫБРАТЬ
	|	Пользователи.Наименование,
	|	Пользователи.Ссылка,
	|	Пользователи.ИдентификаторПользователяСервиса,
	|	Пользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	(Пользователи.ИдентификаторПользователяСервиса = &ИдентификаторПользователяИБ
	|	ИЛИ Пользователи.Код = &Name ИЛИ ИЛИ Пользователи.Наименование = &Name)
	|	И НЕ Пользователи.ПометкаУдаления";
	Запрос = Новый Запрос(ТекстЗапросаПоискаПользователейПоИдентификаторПользователяСервиса);
	//	
	ИдПользователяСервисаСтарого 	= Новый УникальныйИдентификатор(СтруктураПараметров.UserServiceID_Old);
	ИдПользователяСервисаНовый		= Новый УникальныйИдентификатор(СтруктураПараметров.UserServiceID_New);
	
	//Проверить - может пользователь которого хотим создать уже есть?? Если есть - просто выходим 
	Запрос.УстановитьПараметр("ИдентификаторПользователяИБ", ИдПользователяСервисаНовый);
	Запрос.УстановитьПараметр("Name", СтруктураПараметров.Name);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		//
		//// раз такой уже есть - нужно заменить уму пароль 
		//Выборка = РезультатЗапроса.Выбрать();
		//Выборка.Следующий();
		//ПользовательОбластиДанных = Выборка.Ссылка;
		//
		//ПользовательИБ_Новый = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторПользователяИБ);
		//ПользовательИБ_Новый.Пароль = СтруктураПараметров.StoredPasswordValue;
		//ПользовательИБ_Новый.СохраняемоеЗначениеПароля = СтруктураПараметров.StoredPasswordValue;
		//Попытка
		//	ПользовательИБ_Новый.Записать();
		//Исключение
		//	Код = 415;
		//	ОписаниеОшибок = "!!Отмена - Пользователю с ID: " + СтруктураПараметров.UserServiceID_New + " не удалось сменить пароль!";
		//	ОтменитьТранзакцию();
		//	Возврат;		
		//КонецПопытки; 

		Код = 415; // 200 - если нужно менять пароль
		ОписаниеОшибок = "!!Отмена - Пользователь с ID: " + СтруктураПараметров.UserServiceID_New + " уже есть!";
		ОтменитьТранзакцию();
		//ЗафиксироватьТранзакцию();
		Возврат;		
	КонецЕсли;
	//
	
	//ищем старого
	Запрос.УстановитьПараметр("ИдентификаторПользователяИБ", ИдПользователяСервисаСтарого);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Код = 415;
		ОписаниеОшибок = "!!Отмена - прежний Пользователь (справочник) с ID: " + СтруктураПараметров.UserServiceID_Old + " не найден!";
		ОтменитьТранзакцию();
		Возврат;		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ПользовательОбластиДанных = Выборка.Ссылка;
	
	ПользовательИБ_Старый = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторПользователяИБ);
	Если ПользовательИБ_Старый = Неопределено Тогда
		Код = 415;
		ОписаниеОшибок = "!!Отмена - Пользователь (ИБ) с ID: " + СокрЛП(Выборка.ИдентификаторПользователяИБ) + " не найден! Роли не установить.";
		ОтменитьТранзакцию();
		Возврат; 
	КонецЕсли;
	
	#КонецОбласти 	

	#Область Сбор_данных_о_ролях_и_группах_доступа_прежнего_пользователя
	
	//получим роли и ГруппыДоступа старого
	КоллекцияРолейПользователя = ПользовательИБ_Старый.Роли;
	
	МассивГруппыДоступа = Новый Массив;
	МассивГруппыДоступаПользователи = Новый Массив;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ГруппыДоступа.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ГруппыДоступа КАК ГруппыДоступа
	|ГДЕ
	|	ГруппыДоступа.Пользователь = &Пользователь
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГруппыДоступаПользователи.Ссылка
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|ГДЕ
	|	ГруппыДоступаПользователи.Пользователь = &Пользователь
	|";
	
	Запрос.УстановитьПараметр("Пользователь", ПользовательОбластиДанных);	
	
	РезультатЗапроса = Запрос.ВыполнитьПакет(); //.Выполнить()
	
	Если НЕ РезультатЗапроса[0].Пустой() Тогда
		МассивГруппыДоступа = РезультатЗапроса[0].Выгрузить().ВыгрузитьКолонку("Ссылка"); 
	КонецЕсли; 

	Если НЕ РезультатЗапроса[1].Пустой() Тогда
		МассивГруппыДоступаПользователи = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Ссылка"); 
	КонецЕсли; 
	
	#КонецОбласти
	
	#Область Создаем_нового_пользователя_заполняем_свойства_переданными_данными
		
	//Обновим  Пользователя
	ПользовательОбъект = Справочники.Пользователи.СоздатьЭлемент();

	ПользовательОбъект.ИдентификаторПользователяСервиса = ИдПользователяСервисаНовый;
	
	ЯзыкПользователя = ЯзыкПоКоду(СтруктураПараметров.Language);
	Почта = СтруктураПараметров.EMail;
	Телефон = СтруктураПараметров.Phone;
	ПолныеПрава = СтруктураПараметров.FullRights = "Да";
	СтруктураАдресаЭП = СоставПочтовогоАдреса(Почта);
	
	ПользовательОбъект.Наименование = СтруктураПараметров.FullName_New;
		
	ОбновитьАдресЭлектроннойПочты(ПользовательОбъект, Почта, СтруктураАдресаЭП);
		
	ОбновитьТелефон(ПользовательОбъект, Телефон);
		
	ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
	
	ОписаниеПользователяИБ.Имя = СтруктураПараметров.Name;
	
	ОписаниеПользователяИБ.АутентификацияСтандартная = Истина;
	ОписаниеПользователяИБ.АутентификацияOpenID = Истина;
	
	ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
	
	//OSUser = Неопределено;
	//Если СтруктураПараметров.Свойство("OSUser", OSUser) И OSUser <> "" Тогда
			ОписаниеПользователяИБ.АутентификацияОС = Истина; 
			ОписаниеПользователяИБ.ПользовательОС = "\\AD\" + СтруктураПараметров.Name;
	//КонецЕсли;
		
	ОписаниеПользователяИБ.Пароль = СтруктураПараметров.StoredPasswordValue;
	ОписаниеПользователяИБ.ПарольУстановлен = Истина;

	ОписаниеПользователяИБ.Язык = ЯзыкПользователя;
		
	ОписаниеПользователяИБ.Вставить("Действие", "Записать");
	
	ПользовательОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
	ПользовательОбъект.ДополнительныеСвойства.Вставить("ОбработкаСообщенияКаналаУдаленногоАдминистрирования");
	
	//удалим старого
	СтарыйПользователь  = ПользовательОбластиДанных.ПолучитьОбъект();
	СтарыйПользователь.УстановитьПометкуУдаления(Истина);
	СтарыйПользователь.Недействителен = Истина;
	
	//ПользовательИБ_Старый.Имя = Строка(СтруктураПараметров.UserServiceID_Old);
	
	Попытка
		СтарыйПользователь.Записать();
		ЗаписьЖурналаРегистрации("ОбновитьAplicationUserВОбласть", УровеньЖурналаРегистрации.Информация,,, "УстановитьНедействителен_" + СтарыйПользователь.Недействителен);
	
		ПользовательИБ_Старый.Удалить();
		ПользовательОбъект.Записать();
	Исключение
		Код = 415;
		ОписаниеОшибок = ОписаниеОшибки();
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации("ОбновитьAplicationUserВОбласть", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибок);
		Возврат ;
	КонецПопытки;
	
	НовыйПользователь = ПользовательОбъект.Ссылка;
	
	//Если OSUser <> "" Тогда
		ОтключитьЗащиту(ПользовательОбластиДанных);
	//КонецЕсли;
	
	#КонецОбласти 
	
	#Область Заполняем_Группы_доступа_и_Роли_на_основе_данных_прежнего_пользователя
	
	//Проверить - пользователь которого создали есть?? Если нет - просто выходим 
	Если НЕ НовыйПользователь.ИдентификаторПользователяСервиса = ИдПользователяСервисаНовый Тогда
		Код = 415;
		ОписаниеОшибок = "!!Отмена - Пользователь с ID: " + СтруктураПараметров.UserServiceID_New + " не создан!";
		ОтменитьТранзакцию();
		Возврат;		
	КонецЕсли;

	ПользовательИБ_Новый = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(НовыйПользователь.ИдентификаторПользователяИБ);
	Если ПользовательИБ_Новый = Неопределено Тогда
		Код = 415;
		ОписаниеОшибок = "!!Отмена - Пользователь (ИБ) с ID: " + СтруктураПараметров.UserServiceID_New + " не создан!";
		ОтменитьТранзакцию();
		Возврат; 
	КонецЕсли;
	
	// Добавим Роли
	
	ПользовательИБ_Новый.Роли.Очистить();
	
	Для каждого РольПользователя Из КоллекцияРолейПользователя Цикл
	    ПользовательИБ_Новый.Роли.Добавить(РольПользователя);
	КонецЦикла;
	
	// Добавим в группы доступа
	Для каждого ГруппаДоступа Из МассивГруппыДоступа Цикл
		ОбъектГруппаДоступа = ГруппаДоступа.ПолучитьОбъект();
		ОбъектГруппаДоступа.Пользователь = НовыйПользователь;
		Попытка
			ОбъектГруппаДоступа.Записать();
		Исключение
			Код = 415;
			ОписаниеОшибок = ОписаниеОшибки();
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации("ОбновитьAplicationUserВОбласть", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибок);
			Возврат ;
		КонецПопытки;
	КонецЦикла;
	
	Для каждого ГруппаДоступаПользователи Из МассивГруппыДоступаПользователи Цикл
		ОбъектГруппаДоступа = ГруппаДоступаПользователи.ПолучитьОбъект();
		Строка = ОбъектГруппаДоступа.Пользователи.Добавить();
		Строка.Пользователь = НовыйПользователь;
		Попытка
			ОбъектГруппаДоступа.Записать();
		Исключение
			Код = 415;
			ОписаниеОшибок = ОписаниеОшибки();
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации("ОбновитьAplicationUserВОбласть", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибок);
			Возврат ;
		КонецПопытки;
	КонецЦикла;
	
	#КонецОбласти 
	//
	ЗафиксироватьТранзакцию();
	
	ОтключитьЗащиту(НовыйПользователь);

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры
// Гиршфельд Андрей}


//++  Масленников Е.А. 11.12.2018 #(
Функция ИзменитьПараметрыПользователя(ЗначенияПереданныхПараметров, ТекстОшибки) Экспорт
	
	//СтруктураОписанияПараметров = Новый Структура("AccountUserID, Login, Password, Email, Phone, FullName", 
	//"Строка",   "Строка", "Строка", "Строка", "Строка", "Строка"); 
	//ЗначенияПереданныхПараметров = EfsolУниверсальныеФункцииСервер.ПолучитьЗначенияПараметров(Запрос, СтруктураОписанияПараметров);
	
	OldLogin = "";
	Login = "";
	FullName = "";
	Password = "";
	Email = "";
	Phone = "";
	
	ЗначенияПереданныхПараметров.Свойство("OldLogin", OldLogin);
	ЗначенияПереданныхПараметров.Свойство("Login", Login);
	ЗначенияПереданныхПараметров.Свойство("FullName", FullName);
	ЗначенияПереданныхПараметров.Свойство("Password", Password);
	
	ЗначенияПереданныхПараметров.Свойство("Email", Email);
	ЗначенияПереданныхПараметров.Свойство("Phone", Phone);
	
	Zone = Число(ЗначенияПереданныхПараметров.Zone);
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Число(Zone));
	ProviderUserIB = ПользователиИнформационнойБазы.НайтиПоИмени(?(ЗначениеЗаполнено(OldLogin), OldLogin, Login));
	
	Если ProviderUserIB = Неопределено Тогда
		
		ТекстОшибки = "Не найден пользователь ИБ";	
		Результат = Ложь;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Наименование,
		|	Пользователи.Ссылка,
		|	Пользователи.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
		Запрос.УстановитьПараметр("ИдентификаторПользователяИБ", ProviderUserIB.УникальныйИдентификатор);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			
			ТекстОшибки = "Не найден пользователь приложения по пользователю ИБ";	
			Результат = Ложь;
			
		Иначе
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Попытка
				
				ProviderUserObj = Выборка.Ссылка.ПолучитьОбъект();
				
				Если ЗначениеЗаполнено(Login) Тогда	
					ProviderUserIB.Имя           = Login;
					ProviderUserIB.ПолноеИмя     = Login;
					
					//ProviderUserObj.Код          = Login;
					ProviderUserObj.Наименование = Login;	
				КонецЕсли;
				
				Если ЗначениеЗаполнено(FullName) Тогда
					ProviderUserIB.ПолноеИмя     = FullName;
					ProviderUserObj.Наименование = FullName;	
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Password) Тогда				
					ProviderUserIB.Пароль = Password;	
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Email) Тогда
					
					//ProviderUserObj.Почта = Email;
					
					СтрОтбора = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Справочники.ВидыКонтактнойИнформации.EmailПользователя);
					СтрокиКИ = ProviderUserObj.КонтактнаяИнформация.НайтиСтроки(СтрОтбора);	
					Если СтрокиКИ.Количество() = 0 Тогда
						СтрокаСТелефоном = ProviderUserObj.КонтактнаяИнформация.Добавить();
						СтрокаСТелефоном.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
						СтрокаСТелефоном.Вид = Справочники.ВидыКонтактнойИнформации.EmailПользователя;
					Иначе
						СтрокаСТелефоном = СтрокиКИ[0];	
					КонецЕсли;
					
					СтрокаСТелефоном.Представление = Email;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Phone) Тогда
					
					СтрОтбора = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонПользователя);
					СтрокиКИ = ProviderUserObj.КонтактнаяИнформация.НайтиСтроки(СтрОтбора);	
					Если СтрокиКИ.Количество() = 0 Тогда
						СтрокаСТелефоном = ProviderUserObj.КонтактнаяИнформация.Добавить();
						СтрокаСТелефоном.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
						СтрокаСТелефоном.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
					Иначе
						СтрокаСТелефоном = СтрокиКИ[0];	
					КонецЕсли;
					
					СтрокаСТелефоном.Представление = Phone;
					СтрокаСТелефоном.НомерТелефона = Phone;
					
				КонецЕсли;
				
				ProviderUserIB.Записать();
				ProviderUserObj.Записать();
				
				
				Результат = Истина;
			Исключение
				Результат = Ложь;
				ТекстОшибки = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("Пользователи. ИзменениеПароля", УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//--  Масленников Е.А. 11.12.2018 )

Процедура ЗаписатьПараметрыФабрикиXDTO(ИмяСобытия = "ФабрикаXDTO.СчетчикПриЗапуске") Экспорт
	
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда

		КолФабрикаXDTO = ФабрикаXDTO.Пакеты.Количество();
		КодМетаданные  = Метаданные.ПакетыXDTO.Количество();
		
		// для платформы 8.3.12.1790:
		// 		303 пакета для 3.0.67.74
		// 		304 пакета для 3.0.68.58
		СисИнфо = Новый СистемнаяИнформация;
		Версия  = СисИнфо.ВерсияПриложения;
		
		Если Версия = "8.3.12.1790" Тогда
			ТребуемоеКоличество = 304;
		ИначеЕсли Версия = "8.3.13.1644" Тогда	
			ТребуемоеКоличество = 304;
		Иначе
			ТребуемоеКоличество = 304;
		КонецЕсли;
		
		Если КолФабрикаXDTO = ТребуемоеКоличество Тогда  
			Возврат;		
		КонецЕсли;
		
		СтрокаЖуранала = ""+"ФабрикаXDTO="+КолФабрикаXDTO+" , Метаданные="+КодМетаданные;
		
		СтрокаЖуранала = ""+СтрокаЖуранала+"==="+
		ПараметрыСеанса.ТекущийПользователь+"==="+
		ПараметрыСеанса.ОбластьДанныхЗначение+"==="+
		ИмяКомпьютера()+"==="+
		СисИнфо.ИнформацияПрограммыПросмотра+"==="+
		НомерСеансаИнформационнойБазы()+"==="+
		НомерСоединенияИнформационнойБазы()+"===";
		//СтрокаСоединенияИнформационнойБазы()+"==="+
		//ТекущийРежимЗапуска()+"==="+
		//ЧасовойПоясСеанса()+"===//===="+
		//СисИнфо.ВерсияОС+"==="+
		//СисИнфо.ВерсияПриложения+"==="+
		//СисИнфо.ИдентификаторКлиента+"==="+
		//СисИнфо.ИнформацияПрограммыПросмотра+"==="+
		//СисИнфо.ОперативнаяПамять+"==="+
		//СисИнфо.Процессор+"==="+
		//СисИнфо.ТипПлатформы;
				
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,СтрокаЖуранала);
		
	КонецЕсли;

КонецПроцедуры

//--  Масленников Е.А. 11.12.2018 )


Процедура Пауза(Время) Экспорт

	ВремяЗавершения = ТекущаяДата() + Время;
	Пока ТекущаяДата() < ВремяЗавершения Цикл
	КонецЦикла;

КонецПроцедуры


//Процедура СделатьОбращениеКВиртуальнойФабрике(КоличествоЦиклов = 1000000) Экспорт

//	Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
//		Возврат;	
//	КонецЕсли;
//	
//	//ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
//	//Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
//	
//	//ТипDumpInfo 			= ФабрикаXDTO.Тип("http://www.1c.ru/1cFresh/Data/Dump/1.0.2.1", "DumpInfo");
//	//ТипConfigurationInfo 	= ФабрикаXDTO.Тип("http://www.1c.ru/1cFresh/Data/Dump/1.0.2.1", "ConfigurationInfo");

//	
//	Для сч=1 По КоличествоЦиклов Цикл
//	
//				
//		//CTSM_Efsol_Платформа.ЗаписатьПараметрыФабрикиXDTO("ФабрикаXDTO.ОбращениеКФабрикеПриТесте");
//		//ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
//		//Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
//		
//		
//		//1.
//		Попытка
//			
//			ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
//			Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
//		
//		Исключение
//			ЗаписатьПараметрыФабрикиXDTO("ФабрикаXDTO.СчетчикПриАвтотесте");
//			
//			Фабрика = CTSM_хФабрика.Вернуть();
//			Результат = Фабрика.Создать(Фабрика.Тип(ПространствоИмен, "КонтактнаяИнформация"));
//			
//		КонецПопытки;
//		
//		Пауза(10);
//		CTSM_ЭмуляцияФабрики.CTSM_АВтоТестФабрики(ПространствоИмен, "КонтактнаяИнформация");
//		Пауза(10);
//		
//		//2.	
//		Попытка 
//			ТипDumpInfo 			= ФабрикаXDTO.Тип("http://www.1c.ru/1cFresh/Data/Dump/1.0.2.1", "DumpInfo");
//			ТипConfigurationInfo 	= ФабрикаXDTO.Тип("http://www.1c.ru/1cFresh/Data/Dump/1.0.2.1", "ConfigurationInfo");
//		ИСключение
//			ЗаписатьПараметрыФабрикиXDTO("ФабрикаXDTO.СчетчикПриАвтотесте");

//			Фабрика = CTSM_хФабрика.Вернуть();
//			ТипDumpInfo = Фабрика.Тип("http://www.1c.ru/1cFresh/Data/Dump/1.0.2.1", "DumpInfo");
//			ТипConfigurationInfo = Фабрика.Тип("http://www.1c.ru/1cFresh/Data/Dump/1.0.2.1", "ConfigurationInfo");
//			
//		КонецПопытки;
//		
//		ПОпытка
//			ИнформацияОВыгрузке = ФабрикаXDTO.Создать(ТипDumpInfo);
//		ИСключение
//			ЗаписатьПараметрыФабрикиXDTO("ФабрикаXDTO.СчетчикПриАвтотесте");

//			Фабрика = CTSM_Efsol_Платформа.CTSM_ВернутьНаборПакетовXDTO();
//			ИнформацияОВыгрузке = ФабрикаXDTO.Создать(ТипDumpInfo);
//		КонецПопытки;

//		
//		Пауза(10);
//		CTSM_ЭмуляцияФабрики.CTSM_АВтоТестФабрики();
//		Пауза(10);
//		
//		// 3.	
//		Попытка
//			Пакет = РаботаВБезопасномРежимеСлужебный.Пакет();
//			Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(Пакет, "InternetResourceAccess"));
//		Исключение
//			ЗаписатьПараметрыФабрикиXDTO("ФабрикаXDTO.СчетчикПриАвтотесте");
//			Фабрика = CTSM_хФабрика.Вернуть();
//			Результат = Фабрика.Создать(Фабрика.Тип(Пакет, "InternetResourceAccess"));
//		КонецПопытки;

//		Пауза(10);
//		CTSM_ЭмуляцияФабрики.CTSM_АВтоТестФабрики();
//		Пауза(10);
//		
//		//4.	
//		Попытка
//			ПространствоИменАдресов = РаботаСАдресами.ПространствоИмен();
//			АдресРФ_КИ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменАдресов, "АдресРФ"));
//		Исключение
//			ЗаписатьПараметрыФабрикиXDTO("ФабрикаXDTO.СчетчикПриАвтотесте");
//			прФабрика = CTSM_хФабрика.Вернуть();
//			АдресРФ_КИ = прФабрика.Создать(прФабрика.Тип(ПространствоИменАдресов, "АдресРФ"));
//		КонецПопытки;

//		Пауза(10);
//		CTSM_ЭмуляцияФабрики.CTSM_АВтоТестФабрики();
//		Пауза(10);
//		
//		//5.	
//		Попытка
//			ПространствоИмен = "www.v8.1c.ru/ssl/performace-assessment/apdexExport/1.0.0.3";
//			ТипКлючеваяОперация = ФабрикаXDTO.Тип(ПространствоИмен, "KeyOperation");
//			ТипИзмерение = ФабрикаXDTO.Тип(ПространствоИмен, "Measurement");
//		Исключение
//			ЗаписатьПараметрыФабрикиXDTO("ФабрикаXDTO.СчетчикПриАвтотесте");
//			Фабрика = CTSM_хФабрика.Вернуть();
//			ТипКлючеваяОперация = Фабрика.Тип(ПространствоИмен, "KeyOperation");
//			ТипИзмерение = Фабрика.Тип(ПространствоИмен, "Measurement");
//		КонецПопытки;

//		
//		Пауза(10);
//		CTSM_ЭмуляцияФабрики.CTSM_АВтоТестФабрики();
//		Пауза(10);
//		
//		//6.
//		Попытка
//			ФродТип = ФабрикаXDTO.Тип("http://bssys.com/upg", "FraudParams");
//			ФродЭл = ФабрикаXDTO.Создать(ФродТип);
//		ИСключение
//			ЗаписатьПараметрыФабрикиXDTO("ФабрикаXDTO.СчетчикПриАвтотесте");
//			Фабрика = CTSM_хФабрика.Вернуть();
//			ФродТип = Фабрика.Тип("http://bssys.com/upg", "FraudParams");
//			ФродЭл = Фабрика.Создать(ФродТип);
//		КонецПопытки;

//		
//	КонецЦикла;	
//	
//КонецПроцедуры


// +++ Нагрузочное тестирование для беты
//Процедура СделатьОбращениеКФабрике(КоличествоЦиклов = 1000000) Экспорт

//	Для сч=1 По КоличествоЦиклов Цикл
//	
//				
//		CTSM_Efsol_Платформа.ЗаписатьПараметрыФабрикиXDTO("ФабрикаXDTO.ОбращениеКФабрикеПриТесте");

//		ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
//		Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));

//	КонецЦикла;	
//	
//КонецПроцедуры

//Процедура СделатьОбращениеКФабрикеЧерезПрокси(КоличествоЦиклов = 1000000) Экспорт

//	УстановитьПривилегированныйРежим(Истина);
//	Прокси = РаботаВМоделиСервиса.ПолучитьПроксиМенеджераСервиса(Неопределено);
//	УстановитьПривилегированныйРежим(Ложь);
//	
//	Для сч=1 По КоличествоЦиклов Цикл
//		
//		ТипЗаписьКИ = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/SaaS/ApplicationUsers", "ContactsItem");
//		ЗаписьКИ = Прокси.ФабрикаXDTO.Создать(ТипЗаписьКИ);
//		
//		//CTSM_Efsol_Платформа.ЗаписатьПараметрыФабрикиXDTO();

//		//ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
//		//Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));

//	КонецЦикла;	
//	
//КонецПроцедуры

Процедура СоздатьМиллионЭлементов() Экспорт

	Выборка = Справочники.Контрагенты.Выбрать();
	Пока Выборка.Следующий() Цикл
		Об = Выборка.ПолучитьОбъект();
		Об.Удалить();
		
		CTSM_Efsol_Платформа.ЗаписатьПараметрыФабрикиXDTO("ФабрикаXDTO.СоздатьМиллионЭлементов");
		
		ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
		Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
		
	КонецЦикла;
	
	Для сч=1 По 1000000 Цикл
	
		НовыйЭлемент = Справочники.Контрагенты.СоздатьЭлемент();
		НовыйЭлемент.ОбменДанными.Загрузка = Истина;
		НовыйЭлемент.Наименование = "Контрагенты"+сч;
		НовыйЭлемент.Записать();
		
		CTSM_Efsol_Платформа.ЗаписатьПараметрыФабрикиXDTO("ФабрикаXDTO.СоздатьМиллионЭлементов");

		ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
		Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));

	КонецЦикла;
	
	//////////////////////////////////////////////////////////////////
	
	Выборка = Справочники.Номенклатура.Выбрать();
	Пока Выборка.Следующий() Цикл
		Об = Выборка.ПолучитьОбъект();
		Об.Удалить();
		
		CTSM_Efsol_Платформа.ЗаписатьПараметрыФабрикиXDTO("ФабрикаXDTO.СоздатьМиллионЭлементов");
		
		ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
		Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));

	КонецЦикла;
	
	Для сч=1 По 1000000 Цикл
	
		НовыйЭлемент = Справочники.Номенклатура.СоздатьЭлемент();
		НовыйЭлемент.ОбменДанными.Загрузка = Истина;
		НовыйЭлемент.Наименование = "Номенклатура"+сч;
		НовыйЭлемент.Записать();
		
		CTSM_Efsol_Платформа.ЗаписатьПараметрыФабрикиXDTO("ФабрикаXDTO.СоздатьМиллионЭлементов");
		
		ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
		Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	
	КонецЦикла;

	//////////////////////////////////////////////////////////////////
	
	Выборка = Документы.ПоступлениеТоваровУслуг.Выбрать();
	Пока Выборка.Следующий() Цикл
		Об = Выборка.ПолучитьОбъект();
		Об.Удалить();
		
		CTSM_Efsol_Платформа.ЗаписатьПараметрыФабрикиXDTO("ФабрикаXDTO.СоздатьМиллионЭлементов");
		
		ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
		Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));

	КонецЦикла;
	
	Для сч=1 По 1000000 Цикл
	
		НовыйЭлемент = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		НовыйЭлемент.ОбменДанными.Загрузка = Истина;
		НовыйЭлемент.Дата = ТекущаяДата();
		НовыйЭлемент.Комментарий = сч;
		НовыйЭлемент.Записать();
		
		CTSM_Efsol_Платформа.ЗаписатьПараметрыФабрикиXDTO("ФабрикаXDTO.СоздатьМиллионЭлементов");
		
		ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
		Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	
	КонецЦикла;

	
КонецПроцедуры

// --- Нагрузочное тестирование для беты

Функция ПолучитьИнформациюДляПартнераОСостоянииСервиса(СервисИД, Логин = Неопределено, ТекстОшибки = "") Экспорт
	
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		// вернуть ошибку - метод доступен только при разделении данных
		//ПараметрыОтвета = Новый Структура("КодОтвета,СтруктураОтвета", 404, Новый Структура("Description", "Не включено разделение данных!"));
		//Возврат ПараметрыОтвета;
		ТекстОшибки = "Не включено разделение данных!";
		Возврат Неопределено;
	КонецЕсли;
	
	Если Логин = Неопределено ИЛИ Логин = "" Тогда
		ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
		Логин = СокрЛП(ТекПользователь.Наименование);	
	КонецЕсли;
		
	HTTPConnectionCore = CTSM_EfsolУниверсальныеФункцииСервер.HTTPConnection("Core");

	АдресРесурса = "api_v2/PartnerServicesData/GetServiceTypeStateForUserByLogin?serviceId="+СервисИД+"&accountUserLogin="+Логин;
	ПараметрыОтвета = CTSM_EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(HTTPConnectionCore, АдресРесурса, "Get");
	
	Если НЕ ПараметрыОтвета.КодОтвета = 200 Тогда
		ТекстОшибки = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;

	Возврат ПараметрыОтвета.СтруктураОтвета;
	
	
	//Если НЕ ПараметрыОтвета.КодОтвета = 200 Тогда
	//	ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
	//КонецЕсли;
	// сформировать XML
	//CTSM_EfsolУниверсальныеФункцииКлиентСервер.СформироватьXMLЗапроса(ПараметрыОтвета.СтруктураОтвета);
	
	
КонецФункции // ()

// Русанова М.Л. 18.03.2019 (
Функция УслугаСервисаПодключена(УслугаИД, Логин = Неопределено, ТекстОшибки = "")Экспорт
	
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		ТекстОшибки = "Не включено разделение данных!";
		Возврат Неопределено;
	КонецЕсли;
	
	Если Логин = Неопределено ИЛИ Логин = "" Тогда
		ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
		Логин = СокрЛП(ТекПользователь.Наименование);	
	КонецЕсли;
	
	HTTPConnectionCore = CTSM_EfsolУниверсальныеФункцииСервер.HTTPConnection("Core");
	
	АдресРесурса = "api_v2/PartnerServicesData/CheckServiceTypeStatusForUserByLogin?serviceTypeId="+УслугаИД+"&accountUserLogin="+Логин;
	ПараметрыОтвета = CTSM_EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(HTTPConnectionCore, АдресРесурса, "Get");
	
	Если НЕ ПараметрыОтвета.КодОтвета = 200 Тогда
		ТекстОшибки = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Возврат XMLЗначение(Тип ("Булево"), ПараметрыОтвета.СтруктураОтвета.Result);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции
// Русанова М.Л. 18.03.2019 )

