&Вместо("СозданиеКопий")
// Создает резервную копию области в соответствии с настройками резервного копирования
// области.
//
// Параметры:
//  ПараметрыСоздания - ФиксированнаяСтруктура - параметры создания резервной копии,
//   соответствуют настройкам резервного копирования.
//  СостояниеСоздания - ФиксированнаяСтруктура - состояние процесса создания
//   резервных копий в области.
//
Процедура CTSM_СозданиеКопий(Знач ПараметрыСоздания, Знач СостояниеСоздания) Экспорт
	
	НачалоВыполнения = ТекущаяУниверсальнаяДата();
	
	УсловияСозданияКопий = Новый Массив;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Тип", "Ежедневная");
	Параметры.Вставить("Включены", "СоздаватьЕжедневные");
	Параметры.Вставить("Периодичность", "День");
	Параметры.Вставить("ДатаСоздания", "ДатаСозданияПоследнейЕжедневной");
	Параметры.Вставить("День", Неопределено);
	Параметры.Вставить("Месяц", Неопределено);
	УсловияСозданияКопий.Добавить(Параметры);
	
	Параметры = Новый Структура;
	Параметры.Вставить("Тип", "Ежемесячная");
	Параметры.Вставить("Включены", "СоздаватьЕжемесячные");
	Параметры.Вставить("Периодичность", "Месяц");
	Параметры.Вставить("ДатаСоздания", "ДатаСозданияПоследнейЕжемесячной");
	Параметры.Вставить("День", "ДеньСозданияЕжемесячных");
	Параметры.Вставить("Месяц", Неопределено);
	УсловияСозданияКопий.Добавить(Параметры);
	
	Параметры = Новый Структура;
	Параметры.Вставить("Тип", "Ежегодная");
	Параметры.Вставить("Включены", "СоздаватьЕжегодные");
	Параметры.Вставить("Периодичность", "Год");
	Параметры.Вставить("ДатаСоздания", "ДатаСозданияПоследнейЕжегодной");
	Параметры.Вставить("День", "ДеньСозданияЕжегодных");
	Параметры.Вставить("Месяц", "МесяцСозданияЕжегодных");
	УсловияСозданияКопий.Добавить(Параметры);
	
	ТребуетсяСоздание = Ложь;
	ТекущаяДата = ТекущаяУниверсальнаяДата();
	
	ПоследнийСеанс = Константы.ДатаПоследнегоСтартаКлиентскогоСеанса.Получить();
	
	СоздаватьБезусловно = НЕ ПараметрыСоздания.ТолькоПриАктивностиПользователей;
	
	ФлагиПериодичности = Новый Структура;
	Для каждого ПараметрыПериодичности Из УсловияСозданияКопий Цикл
		
		ФлагиПериодичности.Вставить(ПараметрыПериодичности.Тип, Ложь);
		
		Если НЕ ПараметрыСоздания[ПараметрыПериодичности.Включены] Тогда
			// Создание копий данной периодичности выключено в настройках.
			Продолжить;
		КонецЕсли;
		
		ДатаСозданияПредыдущей = СостояниеСоздания[ПараметрыПериодичности.ДатаСоздания];
		
		Если Год(ТекущаяДата) = Год(ДатаСозданияПредыдущей) Тогда
			Если ПараметрыПериодичности.Периодичность = "Год" Тогда
				// Год еще не сменился
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Месяц(ТекущаяДата) = Месяц(ДатаСозданияПредыдущей) Тогда
			Если ПараметрыПериодичности.Периодичность = "Месяц" Тогда
				// Месяц еще не сменился
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если День(ТекущаяДата) = День(ДатаСозданияПредыдущей) Тогда
			// День еще не сменился
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыПериодичности.День <> Неопределено
			И День(ТекущаяДата) < ПараметрыСоздания[ПараметрыПериодичности.День] Тогда
			
			// Нужный день еще не наступил.
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыПериодичности.Месяц <> Неопределено
			И Месяц(ТекущаяДата) < ПараметрыСоздания[ПараметрыПериодичности.Месяц] Тогда
			
			// Нужный месяц еще не наступил.
			Продолжить;
		КонецЕсли;
		
		Если НЕ СоздаватьБезусловно
			И ЗначениеЗаполнено(ДатаСозданияПредыдущей)
			И ПоследнийСеанс < ДатаСозданияПредыдущей Тогда
			
			// Пользователи не заходили в область после создания резервной копии.
			Продолжить;
		КонецЕсли;
		
		ТребуетсяСоздание = Истина;
		ФлагиПериодичности.Вставить(ПараметрыПериодичности.Тип, Истина);
		
	КонецЦикла;
	
	Если НЕ ТребуетсяСоздание Тогда
		
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("Zone", Строка(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса()));
		CTSM_Efsol_Платформа.MS_ZoneBackupSkipped(ПараметрыСообщения, "");
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации() + "." 
				+ НСтр("ru = 'Пропуск создания'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация);
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ВыгрузкаЗагрузкаОбластейДанных") Тогда
		
		РаботаВМоделиСервиса.ВызватьИсключениеОтсутствуетПодсистемаБТС("ТехнологияСервиса.РаботаВМоделиСервиса.ВыгрузкаЗагрузкаОбластейДанных");
		
	КонецЕсли;
	
	МодульВыгрузкаЗагрузкаОбластейДанных = ОбщегоНазначения.ОбщийМодуль("ВыгрузкаЗагрузкаОбластейДанных");
	
	ИмяАрхива = Неопределено;
	
	Попытка
	
		ИмяАрхива = МодульВыгрузкаЗагрузкаОбластейДанных.ВыгрузитьТекущуюОбластьДанныхВАрхив();
		
		ДатаСозданияКопии = ТекущаяУниверсальнаяДата();
		
		ОписаниеАрхива = Новый Файл(ИмяАрхива);
		РазмерФайла = ОписаниеАрхива.Размер();
		
		ИДФайла = РаботаВМоделиСервиса.ПоместитьФайлВХранилищеМенеджераСервиса(ОписаниеАрхива);
		
		Попытка
			УдалитьФайлы(ИмяАрхива);
		Исключение
			// При невозможности удаления файла выполнение не должно прерываться.
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание резервной копии области данных.Не удалось удалить временный файл'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		ИдКопии = Новый УникальныйИдентификатор;
		
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("ОбластьДанных", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
		ПараметрыСообщения.Вставить("ИДКопии", ИдКопии);
		ПараметрыСообщения.Вставить("ИДФайла", ИДФайла);
		ПараметрыСообщения.Вставить("ДатаСоздания", ДатаСозданияКопии);
		Для каждого КлючИЗначение Из ФлагиПериодичности Цикл
			ПараметрыСообщения.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		ОтправитьСообщениеРезервнаяКопияОбластиСоздана(ПараметрыСообщения);
		
		// Обновление состояния в параметрах.
		ОтборЗаданий = Новый Структура;
		ОтборЗаданий.Вставить("ИмяМетода", "РезервноеКопированиеОбластейДанных.СозданиеКопий");
		ОтборЗаданий.Вставить("Ключ", "1");
		Задания = ОчередьЗаданий.ПолучитьЗадания(ОтборЗаданий);
		Если Задания.Количество() > 0 Тогда
			Задание = Задания[0].Идентификатор;
			
			ПараметрыМетода = Новый Массив;
			ПараметрыМетода.Добавить(ПараметрыСоздания);
			
			ОбновленноеСостояние = Новый Структура;
			Для каждого ПараметрыПериодичности Из УсловияСозданияКопий Цикл
				Если ФлагиПериодичности[ПараметрыПериодичности.Тип] Тогда
					ДатаСостояния = ДатаСозданияКопии;
				Иначе
					ДатаСостояния = СостояниеСоздания[ПараметрыПериодичности.ДатаСоздания];
				КонецЕсли;
				
				ОбновленноеСостояние.Вставить(ПараметрыПериодичности.ДатаСоздания, ДатаСостояния);
			КонецЦикла;
			
			ПараметрыМетода.Добавить(Новый ФиксированнаяСтруктура(ОбновленноеСостояние));
			
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("Параметры", ПараметрыМетода);
			ОчередьЗаданий.ИзменитьЗадание(Задание, ПараметрыЗадания);
		КонецЕсли;
		
		ПараметрыСобытия = Новый Структура;
		Для каждого КлючИЗначение Из ФлагиПериодичности Цикл
			ПараметрыСобытия.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		ПараметрыСобытия.Вставить("ИдКопии", ИдКопии);
		ПараметрыСобытия.Вставить("ИдФайла", ИдФайла);
		ПараметрыСобытия.Вставить("Размер", РазмерФайла);
		ПараметрыСобытия.Вставить("Длительность", ТекущаяУниверсальнаяДата() - НачалоВыполнения);
		
		ЗаписатьСобытиеВЖурнал(
			НСтр("ru = 'Создание'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			ПараметрыСобытия);
			
	Исключение
		
		//Залевская 30/10/18
		//ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание резервной копии области данных'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
		//	УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание резервной копии области данных'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);

		Попытка
			Если ИмяАрхива <> Неопределено Тогда
				УдалитьФайлы(ИмяАрхива);
			КонецЕсли;
		Исключение
			// При невозможности удаления файла выполнение не должно прерываться.
			
			//Залевская 30/10/18
			//ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание резервной копии области данных.Не удалось удалить временный файл'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			//	УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстОшибки2 = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = ТекстОшибки + Символы.ПС + ТекстОшибки2;
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание резервной копии области данных'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки2);

		КонецПопытки;
		
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("ОбластьДанных", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
		ПараметрыСообщения.Вставить("ИДКопии", Новый УникальныйИдентификатор);
		ОтправитьСообщениеОшибкаАрхивацииОбласти(ПараметрыСообщения);
	КонецПопытки;
	
КонецПроцедуры
