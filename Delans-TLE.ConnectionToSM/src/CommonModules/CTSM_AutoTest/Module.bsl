#Область ПараметрыАвтоТестов

// Каждая из функций возвращает параметры определенного теста
// Название и структуру определяет сам разработчик

Функция ПараметрыТеста_AddAplicationUser()

	Name = "Тест999";
	StoredPasswordValue = "123456";
	Zone = 1;
	OSUser = "79513380219";
	
	ПараметрыТестаТеста = Новый Структура("Name, FullName, StoredPasswordValue, Contacts, OSUser, Roles,       FullRights, Language, UserServiceID, 				   EMail, Phone", 
											Name, Name, 	StoredPasswordValue,         , OSUser, "Бухгалтер", "Да",		  "ru",		Новый УникальныйИдентификатор, "", 	  "");
	ПараметрыТестаТеста.Вставить("Описание", "Добавление пользователя приложения");
	ПараметрыТестаТеста.Вставить("Zone", 1);
	
	Возврат ПараметрыТестаТеста;
	
КонецФункции 

Функция ПараметрыТеста_DeleteApplicationUserAvailability()

	ПараметрыТестаТеста = Новый Структура("Zone, Name, ТипДокумента", "1", "Тест999");
	ПараметрыТестаТеста.Вставить("Описание", "Удаление пользователя приожения");
	Возврат ПараметрыТестаТеста;
	
КонецФункции 

Функция ПараметрыТеста_DeleteApplicationUser()

	ПараметрыТестаТеста = Новый Структура("Zone, Name, ТипДокумента", "1", "Тест999");
	ПараметрыТестаТеста.Вставить("Описание", "Блокировка входа пользователя приложения");
	Возврат ПараметрыТестаТеста;

КонецФункции 

Функция ПараметрыТеста_DownloadDataArea()

	// download - Загрузить данные ИЗ архива!!
	ИмяКаталогаВыгрузки = КаталогВременныхФайлов();	
	ИмяФайлаВыгрузки    = ""+ИмяКаталогаВыгрузки+"data_dump.zip";	
	
	ПараметрыТестаТеста = Новый Структура("Zone", "1");
	ПараметрыТестаТеста.Вставить("FileName", ИмяФайлаВыгрузки);
	ПараметрыТестаТеста.Вставить("Описание", "Загрузить данные ИЗ архива");
	Возврат ПараметрыТестаТеста;
	
КонецФункции 

Функция ПараметрыТеста_UploadingDataArea()

	ИмяКаталогаВыгрузки = КаталогВременныхФайлов();	
	ПараметрыТестаТеста = Новый Структура("СтрокаПоиска", "Тест");
	ПараметрыТестаТеста.Вставить("Path", ИмяКаталогаВыгрузки);
	ПараметрыТестаТеста.Вставить("Описание", "Загрузить область данных");
	ПараметрыТестаТеста.Вставить("Zone", "1");
	Возврат ПараметрыТестаТеста;
	
КонецФункции 

Функция  ПараметрыТеста_AddAccountIDForArea()

	ПараметрыТестаТеста = Новый Структура("Zone", "1");
	ПараметрыТестаТеста.Вставить("AccountID", "35c3673e-f77d-48d5-b1fb-4f2e40c2da57");
	ПараметрыТестаТеста.Вставить("Описание", "Доабвить AccountID для области");
	Возврат ПараметрыТестаТеста;
	
КонецФункции 

#КонецОбласти

#Область ПараметрыАвтоТестовРасширений

Функция ПараметрыТеста_AddExtension() Экспорт
	
	ПараметрыТестаТеста = Новый Структура;
	ПараметрыТестаТеста.Вставить("Описание", "Добавление расширения");
	ПараметрыТестаТеста.Вставить("FileName", "");
	ПараметрыТестаТеста.Вставить("BinaryData", Обработки.CTSM_Тестирование.ПолучитьМакет("TestExtension"));
	ПараметрыТестаТеста.Вставить("Name", 	 "TestExtension");
	ПараметрыТестаТеста.Вставить("Version",  "1.0.0.3");
	ПараметрыТестаТеста.Вставить("Zone",  	 1);

	Возврат ПараметрыТестаТеста;

КонецФункции 

Функция ПараметрыТеста_UpdateExtension() Экспорт

	ПараметрыТестаТеста = Новый Структура;
	ПараметрыТестаТеста.Вставить("Описание", "Обновление расширения");
	ПараметрыТестаТеста.Вставить("FileName", "");
	ПараметрыТестаТеста.Вставить("BinaryData", Обработки.CTSM_Тестирование.ПолучитьМакет("TestExtension"));
	ПараметрыТестаТеста.Вставить("Name", 	 "TestExtension");
	ПараметрыТестаТеста.Вставить("Version",  "1.0.0.3");
	ПараметрыТестаТеста.Вставить("Zone",  	 1);
	Возврат ПараметрыТестаТеста;
	
КонецФункции 

Функция ПараметрыТеста_DeleteExtension() Экспорт

	ПараметрыТестаТеста = Новый Структура;
	ПараметрыТестаТеста.Вставить("Описание", "Удаление расширения");
	ПараметрыТестаТеста.Вставить("Name", 	 "TestExtension");
	ПараметрыТестаТеста.Вставить("Zone",  	 1);
	Возврат ПараметрыТестаТеста;

КонецФункции 

#КонецОбласти


#Область ВспомогательныеПроцедурыАвтотестов

#КонецОбласти


#Область АвтоТесты

Функция TestAddAplicationUser(Параметры, Результат) Экспорт
	
	Если Параметры = Неопределено Тогда
		Параметры = ПараметрыТеста_AddAplicationUser();	
	КонецЕсли;
	
	РезультатТеста = Истина; 
	СтруктураПараметров = Параметры; 
	РезультатТеста = CTSM_Efsol_Платформа.ДобавитьПользователяПриложения(СтруктураПараметров);
	ВыполнениеТеста = ?(РезультатТеста = Ложь, "Провал", "Успех");
	Результат = Новый Структура("ВыполнениеТеста, ДанныеРезультата", ВыполнениеТеста, РезультатТеста);
		
КонецФункции 

Функция TestDeleteApplicationUser(Параметры, Результат) Экспорт
	
	Если Параметры = Неопределено Тогда
		Параметры = ПараметрыТеста_DeleteApplicationUserAvailability();	
	КонецЕсли;
	РезультатТеста = Истина;
	РезультатТеста = CTSM_Efsol_Платформа.УдалитьПользователяПриложения(Параметры);
	ВыполнениеТеста = ?(РезультатТеста = Ложь, "Провал", "Успех");
	Результат = Новый Структура("ВыполнениеТеста, ДанныеРезультата", ВыполнениеТеста, РезультатТеста);
	
КонецФункции 

Функция TestDeleteApplicationUserAvailability(Параметры, Результат) Экспорт

	Если Параметры = Неопределено Тогда
		Параметры = ПараметрыТеста_DeleteApplicationUser();	
	КонецЕсли;
	РезультатТеста = Истина;	
	РезультатТеста = CTSM_Efsol_Платформа.УстановитьДоступностьПользователяПриложения(Параметры);		
	ВыполнениеТеста = ?(РезультатТеста = Ложь, "Провал", "Успех");
	Результат = Новый Структура("ВыполнениеТеста, ДанныеРезультата", ВыполнениеТеста, РезультатТеста);

КонецФункции 

Функция TestDownloadDataArea(Параметры, Результат) Экспорт	
	
	Если Параметры = Неопределено Тогда
		Параметры = ПараметрыТеста_DownloadDataArea();	
	КонецЕсли;
	
	РезультатТеста = Истина;       
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(Число(Параметры.Zone));
	ПараметрыЗадания.Добавить(Параметры.FileName);
	
	Попытка
		
		МассивЗаданий = Новый Массив;
		Задание = ФоновыеЗадания.Выполнить("CTSM_Efsol_Платформа.ЗагрузитьОбластьДанныхИзАрхива", ПараметрыЗадания, , НСтр("ru = 'Загрузка области данных'"));
		МассивЗаданий.Добавить(Задание);
		ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
		
	Исключение
		РезультатТеста = ОписаниеОшибки(); 
	КонецПопытки;
	
	ВыполнениеТеста = ?(РезультатТеста = Истина, "Успех", "Провал");
	Результат = Новый Структура("ВыполнениеТеста, ДанныеРезультата", ВыполнениеТеста, РезультатТеста);
	
КонецФункции 

Функция TestUploadingDataArea(Параметры, Результат) Экспорт

	Если Параметры = Неопределено Тогда
		Параметры = ПараметрыТеста_UploadingDataArea();	
	КонецЕсли;
	
	РезультатТеста = Истина;
		
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(Число(Параметры.Zone));
	ПараметрыЗадания.Добавить(Параметры.Path);
	
	Попытка
		
		МассивЗаданий = Новый Массив;
		Задание = ФоновыеЗадания.Выполнить("CTSM_Efsol_Платформа.ВыгрузитьОбластьДанныхВАрхив", ПараметрыЗадания, , НСтр("ru = 'Выгрузка области данных'"));
		МассивЗаданий.Добавить(Задание);
		ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
		
	Исключение
		РезультатТеста = ОписаниеОшибки(); 
	КонецПопытки;
	
	ВыполнениеТеста = ?(РезультатТеста = Истина, "Успех", "Провал");
	Результат = Новый Структура("ВыполнениеТеста, ДанныеРезультата", ВыполнениеТеста, РезультатТеста);
	
КонецФункции 

Функция TestAddAccountID(Параметры, Результат) Экспорт

	Если Параметры = Неопределено Тогда
		Параметры = ПараметрыТеста_AddAccountIDForArea();	
	КонецЕсли;
	
	РезультатТеста = Истина;
	
	Попытка	
		CTSM_Efsol_Платформа.ДобавитьAccountIDВОбласть(Параметры);		
	Исключение
		РезультатТеста = ОписаниеОшибки(); //Ложь;
	КонецПопытки;
		
	ВыполнениеТеста = ?(РезультатТеста = Истина, "Успех", "Провал");
	Результат = Новый Структура("ВыполнениеТеста, ДанныеРезультата", ВыполнениеТеста, РезультатТеста);
	
КонецФункции 

#КонецОбласти

#Область АвтоТестыРасширений

Функция TestAddExtension (Параметры, Результат) Экспорт

	РезультатТеста = Истина;
	
	Если Параметры = Неопределено Тогда
		Параметры = ПараметрыТеста_AddExtension();	
	КонецЕсли;
		
	Если Параметры.Свойство("BinaryData") Тогда
		BinaryData = Параметры.BinaryData;
	Иначе
		BinaryData = Новый ДвоичныеДанные(Параметры.FileName);	
	КонецЕсли;
		
	Попытка
		
		Если CTSM_Расширения.ВключеноРаздениеРасширений() Тогда
			CTSM_Расширения.УстановкаРасширенияПоОбластям(Параметры.Name, BinaryData, РезультатТеста, Параметры.Zone);	
		Иначе	
			CTSM_Расширения.УстановкаРасширения(Параметры.Name, BinaryData, РезультатТеста);		
		КонецЕсли;
		
	Исключение
		РезультатТеста = ОписаниеОшибки(); 
	КонецПопытки;
	
	ВыполнениеТеста = ?(РезультатТеста = Истина, "Успех", "Провал");	
	Результат = Новый Структура("ВыполнениеТеста, ДанныеРезультата", ВыполнениеТеста, РезультатТеста);
	
КонецФункции 

Функция TestUpdateExtension(Параметры, Результат) Экспорт

	РезультатТеста = Истина;
	
	Если Параметры = Неопределено Тогда
		Параметры = ПараметрыТеста_UpdateExtension();	
	КонецЕсли;
	
	Если Параметры.Свойство("BinaryData") Тогда
		BinaryData = Параметры.BinaryData;
	Иначе
		BinaryData = Новый ДвоичныеДанные(Параметры.FileName);	
	КонецЕсли;
	
	Попытка
		
		Если CTSM_Расширения.ВключеноРаздениеРасширений() Тогда
			CTSM_Расширения.ОбновлениеРасширенияПоОбластям(Параметры.Name, BinaryData, РезультатТеста, Параметры.Zone);	
		Иначе	
			CTSM_Расширения.ОбновлениеРасширения(Параметры.Name, BinaryData, РезультатТеста);		
		КонецЕсли;
		
	Исключение
		РезультатТеста = ОписаниеОшибки(); 
	КонецПопытки;
	
	ВыполнениеТеста = ?(РезультатТеста = Истина, "Успех", "Провал");	
	Результат = Новый Структура("ВыполнениеТеста, ДанныеРезультата", ВыполнениеТеста, РезультатТеста);
	
КонецФункции 

Функция TestDeleteExtension(Параметры, Результат) Экспорт

	РезультатТеста = Истина;
	
	Если Параметры = Неопределено Тогда
		Параметры = ПараметрыТеста_DeleteExtension();	
	КонецЕсли;
	
	Попытка
		
		Если CTSM_Расширения.ВключеноРаздениеРасширений() Тогда
			CTSM_Расширения.УдалениеРасширенияПоОбластям(Параметры.Name, РезультатТеста, Параметры.Zone);	
		Иначе	
			CTSM_Расширения.УдалениеРасширения(Параметры.Name, РезультатТеста);		
		КонецЕсли;
		
	Исключение
		РезультатТеста = ОписаниеОшибки(); 
	КонецПопытки;
	
	ВыполнениеТеста = ?(РезультатТеста = Истина, "Успех", "Провал");
	Результат = Новый Структура("ВыполнениеТеста, ДанныеРезультата", ВыполнениеТеста, РезультатТеста);
	
КонецФункции 

#КонецОбласти


#Область ВыполнениеАвтоТеста

// Формирует массив из структур для выполнения автотестов.
// Массив содержит параметры выполнения теста, а также структуру, в которую будет помещен результат
//
// Параметры: нет
//
// Возвращаемое значение:
//   МассивВыполняемыхТестов - <Массив>   - <содержит массив структур выполняемых тестов>
//		
//		<Структура> - <является элементом массива>
//
//			Имя              - <Строка>   	  	 - <Наименование теста>
//			ПараметрыТеста   - <Структура>   	 - <Структура параметров, необходих для выполнения теста. Обазательный параметр структуры - "Описание".>
//			Результат        - <Неопределено> 	 - <После выполнения будет записан результат теста>
//			Время            - <Неопределено>    - <Время выполнения теста>
//			Ответ            - <Неопределено>    - <Ответ>
//
//
Функция ЗаполнениеМассиваВыполняемыхТестов()

	МассивВыполняемыхТестов = Новый Массив;
	
	МассивВыполняемыхТестов.Добавить(Новый Структура("Имя, ПараметрыТеста, Результат, Время, Ответ", "TestAddAplicationUser", ПараметрыТеста_AddAplicationUser(), Неопределено, Неопределено, Неопределено));
	МассивВыполняемыхТестов.Добавить(Новый Структура("Имя, ПараметрыТеста, Результат, Время, Ответ", "TestDeleteApplicationUser", ПараметрыТеста_DeleteApplicationUser(), Неопределено, Неопределено, Неопределено));
	МассивВыполняемыхТестов.Добавить(Новый Структура("Имя, ПараметрыТеста, Результат, Время, Ответ", "TestDeleteApplicationUserAvailability", ПараметрыТеста_DeleteApplicationUserAvailability(), Неопределено, Неопределено, Неопределено));
	МассивВыполняемыхТестов.Добавить(Новый Структура("Имя, ПараметрыТеста, Результат, Время, Ответ", "TestUploadingDataArea", ПараметрыТеста_UploadingDataArea(), Неопределено, Неопределено, Неопределено));
	МассивВыполняемыхТестов.Добавить(Новый Структура("Имя, ПараметрыТеста, Результат, Время, Ответ", "TestDownloadDataArea", ПараметрыТеста_DownloadDataArea(), Неопределено, Неопределено, Неопределено));
	
	МассивВыполняемыхТестов.Добавить(Новый Структура("Имя, ПараметрыТеста, Результат, Время, Ответ", "TestAddAccountIDForArea", ПараметрыТеста_AddAccountIDForArea(), Неопределено, Неопределено, Неопределено));
	
	МассивВыполняемыхТестов.Добавить(Новый Структура("Имя, ПараметрыТеста, Результат, Время, Ответ", "TestAddExtension", ПараметрыТеста_AddExtension(), Неопределено, Неопределено, Неопределено));
	МассивВыполняемыхТестов.Добавить(Новый Структура("Имя, ПараметрыТеста, Результат, Время, Ответ", "TestUpdateExtension", ПараметрыТеста_UpdateExtension(), Неопределено, Неопределено, Неопределено));
	МассивВыполняемыхТестов.Добавить(Новый Структура("Имя, ПараметрыТеста, Результат, Время, Ответ", "TestDeleteExtension", ПараметрыТеста_DeleteExtension(), Неопределено, Неопределено, Неопределено));

	Возврат МассивВыполняемыхТестов;

КонецФункции 

// Выполняет тестирование расширения. 
// Вызывается через http-сервис (<имя публикации>+<URL сервиса>+"/AutoTest") и через обработку "ES_ESDL_Тестирование"
//
// Параметры:
//   МассивВыполняемыхТестов - <Массив>   - <содержит массив структур выполняемых тестов>
//		
//		<Структура> - <является элементом массива>
//
//			Имя              - <Строка>   	  	 - <Наименование теста>
//			ПараметрыТеста   - <Структура>   	 - <Структура параметров, необходих для выполнения теста. Обазательный параметр структуры - "Описание".>
//			Результат        - <Неопределено> 	 - <После выполнения будет записан результат теста>
//			Время            - <Неопределено>    - <Время выполнения теста>
//			Ответ            - <Неопределено>    - <Ответ>
//
Функция ExecuteAutoTest(МассивВыполняемыхТестов = Неопределено) Экспорт
	
	Если МассивВыполняемыхТестов = Неопределено Тогда
		МассивВыполняемыхТестов = ЗаполнениеМассиваВыполняемыхТестов();	
	КонецЕсли;
	
	Для каждого ТекущийТест Из МассивВыполняемыхТестов Цикл
		
		Результат = Неопределено;
		ПараметрыТеста = ТекущийТест.ПараметрыТеста;
		
		Если ПараметрыТеста = Неопределено Тогда
			ПараметрыТеста = ПолучитьПараметрыТеста(ТекущийТест.Имя);
			ТекущийТест.Вставить("ПараметрыТеста", ПараметрыТеста);
		КонецЕсли;

		ИсполняемаяСтрока = ""+ТекущийТест.Имя+"(ПараметрыТеста, Результат)";
		
		НачалоТеста = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Попытка
			Выполнить(ИсполняемаяСтрока);		
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Результат = Новый Структура("ВыполнениеТеста, ДанныеРезультата", "Провал", ТекстОшибки);
		КонецПопытки;
			
		ОкончаниеТеста = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ВремяВыполнения = (ОкончаниеТеста-НачалоТеста)/1000;

		ТекущийТест.Результат = Результат.ВыполнениеТеста;
		ТекущийТест.Время     = ВремяВыполнения;
		ТекущийТест.Ответ 	  = Результат.ДанныеРезультата;
		
	КонецЦикла;

КонецФункции 

Функция ПолучитьПараметрыТеста(ИмяТеста)

	ПрефиксПараметров = (Прав(ИмяТеста, СтрДлина(ИмяТеста)-4));	
	
	Если ПрефиксПараметров = "AddAplicationUser" Тогда
		ПараметрыТеста = ПараметрыТеста_AddAplicationUser();
	ИначеЕсли ПрефиксПараметров = "DeleteApplicationUser" Тогда
		ПараметрыТеста = ПараметрыТеста_DeleteApplicationUser();
	ИначеЕсли ПрефиксПараметров = "DeleteApplicationUserAvailability" Тогда
		ПараметрыТеста = ПараметрыТеста_DeleteApplicationUserAvailability();
	ИначеЕсли ПрефиксПараметров = "DownloadDataArea" Тогда
		ПараметрыТеста = ПараметрыТеста_DownloadDataArea();
	ИначеЕсли ПрефиксПараметров = "UploadingDataArea" Тогда
		ПараметрыТеста = ПараметрыТеста_UploadingDataArea();
	ИначеЕсли ПрефиксПараметров = "AddAccountIDForArea" Тогда
		ПараметрыТеста = ПараметрыТеста_AddAccountIDForArea();
	ИначеЕсли ПрефиксПараметров = "AddExtension" Тогда
		ПараметрыТеста = ПараметрыТеста_AddExtension();
	ИначеЕсли ПрефиксПараметров = "UpdateExtension" Тогда
		ПараметрыТеста = ПараметрыТеста_UpdateExtension();
	ИначеЕсли ПрефиксПараметров = "DeleteExtension" Тогда
		ПараметрыТеста = ПараметрыТеста_DeleteExtension();	
	КонецЕсли;
	
	Возврат ПараметрыТеста;
	
КонецФункции 

#КонецОбласти
