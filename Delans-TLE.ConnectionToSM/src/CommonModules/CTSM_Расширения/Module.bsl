
#Область ДополнительныеФункции

Функция ВключеноРаздениеРасширений() Экспорт

	РазделениеРасширенийКонфигурации = Метаданные.ОбщиеРеквизиты.ОбластьДанныхОсновныеДанные.РазделениеРасширенийКонфигурации;
	Если РазделениеРасширенийКонфигурации = Метаданные.СвойстваОбъектов.РазделениеРасширенийКонфигурацииОбщегоРеквизита.Разделять Тогда
		РасширенияРазделяются = Истина;
	Иначе
		РасширенияРазделяются = Ложь;	
	КонецЕсли;

	Возврат РасширенияРазделяются;
	
КонецФункции // ()

#КонецОбласти

#Область МетодыРасширенийПоОбластямДанных

Процедура УстановкаРасширенияПоОбластям(ИмяРасширения, ДвоичныеДанные, Результат, Zone = Неопределено) Экспорт
	
	// нужно проверить параметр Zone
	Если Zone = Неопределено Тогда
		
		// устанавливаем по умолчанию  - запрет установки в 0 область
		Возврат;
		
	ИначеЕсли Zone = "all" Тогда
		
		// уставнока в каждую область в режиме разделения данных
		РезультатОбщий = "";
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрСведенийОбластиДанных.ОбластьДанныхВспомогательныеДанные
		|ИЗ
		|	РегистрСведений.ОбластиДанных КАК РегистрСведенийОбластиДанных";
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ОбластьДанных = Выборка.ОбластьДанныхВспомогательныеДанные;
			
			ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, ОбластьДанных);
			УстановкаРасширения(ИмяРасширения, ДвоичныеДанные, Результат, ОбластьДанных);
			
			РезультатОбщий = ""+РезультатОбщий+"|"+Результат;
			
		КонецЦикла;
		
		Результат = РезультатОбщий;
		
		ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);

	Иначе
		
		// указывается конретная область данных
		ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Zone);
		
		УстановкаРасширения(ИмяРасширения, ДвоичныеДанные, Результат, Zone);

		ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);

	КонецЕсли;	

КонецПроцедуры

Процедура ОбновлениеРасширенияПоОбластям(ИмяРасширения, ДвоичныеДанные, Результат, Zone = Неопределено) Экспорт
	
	// нужно проверить параметр Zone
	Если Zone = Неопределено Тогда
		
		// устанавливаем по умолчанию  - запрет установки в 0 область
		Возврат;
		
	ИначеЕсли Zone = "all" Тогда
		
		// уставнока в каждую область в режиме разделения данных
		РезультатОбщий = "";
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрСведенийОбластиДанных.ОбластьДанныхВспомогательныеДанные
		|ИЗ
		|	РегистрСведений.ОбластиДанных КАК РегистрСведенийОбластиДанных";
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ОбластьДанных = Выборка.ОбластьДанныхВспомогательныеДанные;
			
			ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, ОбластьДанных);
			ОбновлениеРасширения(ИмяРасширения, ДвоичныеДанные, Результат, ОбластьДанных);
			
			РезультатОбщий = ""+РезультатОбщий+"|"+Результат;
			
		КонецЦикла;
		
		Результат = РезультатОбщий;
		
		ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);

	Иначе
		
		// указывается конретная область данных
		ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Zone);
		
		ОбновлениеРасширения(ИмяРасширения, ДвоичныеДанные, Результат, Zone);

		ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);

	КонецЕсли;	

КонецПроцедуры

Процедура УдалениеРасширенияПоОбластям(ИмяРасширения, Результат, Zone = Неопределено) Экспорт
	
	// нужно проверить параметр Zone
	Если Zone = Неопределено Тогда
		
		// устанавливаем по умолчанию  - запрет установки в 0 область
		Возврат;
		
	ИначеЕсли Zone = "all" Тогда
		
		// уставнока в каждую область в режиме разделения данных
		РезультатОбщий = "";
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрСведенийОбластиДанных.ОбластьДанныхВспомогательныеДанные
		|ИЗ
		|	РегистрСведений.ОбластиДанных КАК РегистрСведенийОбластиДанных";
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ОбластьДанных = Выборка.ОбластьДанныхВспомогательныеДанные;
			
			ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, ОбластьДанных);
			УдалениеРасширения(ИмяРасширения, Результат, ОбластьДанных);
			
			РезультатОбщий = ""+РезультатОбщий+"|"+Результат;
			
		КонецЦикла;
		
		Результат = РезультатОбщий;
		
		ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
		
	Иначе
		
		// указывается конретная область данных
		ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Zone);
		
		УдалениеРасширения(ИмяРасширения, Результат, Zone);

		ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
		
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти


#Область МетодыРасширений

Процедура УстановкаРасширения(ИмяРасширения, ДвоичныеДанные, Результат, Zone = Неопределено) Экспорт
	
	// Если имя не пустое, пробуем найти уже устновленное расширение
	Если ИмяРасширения<>"" Тогда

		СтруктураПоиска = Новый Структура("Имя", ИмяРасширения);
		МассивРасширений = РасширенияКонфигурации.Получить(СтруктураПоиска);
		Если МассивРасширений.Количество() <> 0 Тогда	
			Результат = "Расширение уже существует! Используйте метод для обновления!";
			Возврат;
		КонецЕсли;
	
	КонецЕсли;	
	
	НовоеРасширение = РасширенияКонфигурации.Создать();
	НовоеРасширение.БезопасныйРежим = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		НовоеРасширение.Записать(ДвоичныеДанные);
		Результат = Истина;
	Исключение
		Результат = ""+ОписаниеОшибки();
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
	МожноУстановитьРасширение = Истина;
	
	МассивОшибок = НовоеРасширение.ПроверитьВозможностьПрименения(ДвоичныеДанные, Ложь);
	Если МассивОшибок.Количество()>0 Тогда
		Результат = "";
		Для каждого ТекСтрока Из МассивОшибок Цикл
			Результат = ""+ТекСтрока.Описание+Символы.ПС+Результат;
			МожноУстановитьРасширение = Ложь;
		КонецЦикла;
	КонецЕсли;
		
	Если МожноУстановитьРасширение = Ложь Тогда
		 НовоеРасширение.Удалить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеРасширения(ИмяРасширения, ДвоичныеДанные, Результат, Zone = Неопределено) Экспорт

	// Если имя не пустое, пробуем найти уже устновленное расширение
	Если ИмяРасширения = "" Тогда
		Результат = "Не задано имя расширения в Content-Disposition! Обновление не возможно";
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Имя", ИмяРасширения);
	МассивРасширений = РасширенияКонфигурации.Получить(СтруктураПоиска);
	Если МассивРасширений.Количество() = 0 Тогда
		Результат = "Не найдено расширение "+ИмяРасширения+"! Обновление не возможно. Воспользуйтесь процедурой установки";
		Возврат;
	КонецЕсли;
	
	НовоеРасширение = МассивРасширений[0]; 
		
	МожноУстановитьРасширение = Истина;
	МассивОшибок = НовоеРасширение.ПроверитьВозможностьПрименения(ДвоичныеДанные, Ложь);
	Если МассивОшибок.Количество()>0 Тогда
		Результат = "";
		Для каждого ТекСтрока Из МассивОшибок Цикл
			Результат = ""+ТекСтрока.Описание+Символы.ПС+Результат;
			МожноУстановитьРасширение = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	Если МожноУстановитьРасширение Тогда
		Попытка
			НовоеРасширение.Записать(ДвоичныеДанные);
			Результат = Истина;
		Исключение
			Результат = ""+ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалениеРасширения(ИмяРасширения, Результат, Zone = Неопределено) Экспорт

	// Если имя не пустое, пробуем найти уже установленное расширение
	Если ИмяРасширения = "" Тогда
		Результат = "Не задано имя расширения в Content-Disposition! Удаление не возможно";
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Имя", ИмяРасширения);
	МассивРасширений = РасширенияКонфигурации.Получить(СтруктураПоиска);
	Если МассивРасширений.Количество() = 0 Тогда
		Результат = "Не найдено расширение "+ИмяРасширения+"! Удаление не возможно. Сначала установите расширение";
		Возврат;
	КонецЕсли;
	
	НовоеРасширение = МассивРасширений[0]; 
		
	Попытка
		НовоеРасширение.Удалить();
		Результат = Истина;
	Исключение
		Результат = ""+ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти
