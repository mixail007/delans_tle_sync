&НаКлиенте
Процедура ПриОткрытии(Отказ)
			
		СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocumentLinks/FindDocumentByLinkID?LinkID=" + СсылкаНаОбъект;
		ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Get");
		Если ПараметрыОтвета.КодОтвета = 200 Тогда
			ИД = ПараметрыОтвета.СтруктураОтвета.DocumentID; 
			
			СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocuments/GetDocumentProperties?DocumentID=" + ИД;
			ПараметрыОтвета = ВыполнитьЗапрос("ESDLADLHTTP", СтрокаЗапроса, "Get");
			Если ПараметрыОтвета.КодОтвета = 200 Тогда
				ТипФайла = ПараметрыОтвета.СтруктураОтвета.DocumentFileExtension;
				ПоказатьИзображения(ИД, ТипФайла);
			Иначе
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = "Ошибка при получении свойств документа" + " " + ПараметрыОтвета.КодОтвета + " " + ИД ;
				СообщениеПользователю.Сообщить();
			КонецЕсли;
		Иначе
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Документ не найден";
			СообщениеПользователю.Сообщить();
		КонецЕсли;
			
		Отказ = Истина;	
			
КонецПроцедуры

// Процедура - обработчик команды формы "ПоказатьИзображения"
//
&НаКлиенте
Процедура ПоказатьИзображения(ИД, ТипФайла) Экспорт
	
	#Если ВебКлиент Тогда
		
		ПараметрыОткрытия = Новый Структура("ИД, ESDLТокен, beta, ТипФайла", ИД, ESDLТокен, beta, ТипФайла);
		Форма = получитьФорму("ОбщаяФорма.CTSM_ФормаПросмотраДокументаВебКлиент", ПараметрыОткрытия);
		Если Форма.Открыта() Тогда
			Форма.Закрыть();
			ОткрытьФорму("ОбщаяФорма.CTSM_ФормаПросмотраДокументаВебКлиент", ПараметрыОткрытия);
		Иначе
			Форма.Открыть();
		КонецЕсли;

	#Иначе
	
	РасширениеСтрока = "."+НРег(ТипФайла);
	    	
	Если beta Тогда
		HTTPСсылкаФайл = "http://beta.adl.42clouds.com/adl42/hs/api_v1/AccountEDocuments/GetDocumentFile/" + ИД + "?TID=" + ESDLТокен; 
	Иначе
		HTTPСсылкаФайл = "http://adl.42clouds.com/adl42/hs/api_v1/AccountEDocuments/GetDocumentFile/" + ИД + "?TID=" + ESDLТокен; 
	КонецЕсли;
	
	Если ТипФайла = "XLS" ИЛИ ТипФайла = "XLSX" ИЛИ ТипФайла = "PDF" ИЛИ ТипФайла = "JPG" Тогда	
		Парам = Новый Структура("ПолноеИмяФайла, НаименованиеДокумента, ТипФайла", HTTPСсылкаФайл, "Файл документа " + СсылкаНаименование, ТипФайла);
		ОткрытьФорму ("ОбщаяФорма.CTSM_ФормаПросмотраДокумента", Парам, ЭтаФорма, Новый УникальныйИдентификатор);
	Иначе
		Сообщить("Для данного типа файлов предпросмотр недоступен");
	КонецЕсли;
	
#КонецЕсли

КонецПроцедуры	

&НаКлиенте
Процедура ПослеНачатьКопированиеФайла(ПолныйПутьКФайлу, ДопПараметры = Неопределено) Экспорт
	Если ПолныйПутьКФайлу <> Неопределено И ПолныйПутьКФайлу <> "" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПустойОбработчикОповещения", ЭтаФорма);
		НачатьЗапускПриложения(ОписаниеОповещения, ПолныйПутьКФайлу);
	КонецЕсли;
КонецПроцедуры

// типфайла - тип с точкой
&НаКлиенте
Функция ПолучитьАссоциациюДляТипаФайла(ТипФайла, ДополнятьТекстомПроверки = Истина)
	
	Данные = "";
	
	#Если НЕ ВебКлиент Тогда
		ИмяВрФайла = ПолучитьИмяВременногоФайла("txt");
		КомандаСистемы("assoc "+ТипФайла+" >> "+ИмяВрФайла);
		Если ДополнятьТекстомПроверки Тогда
			КомандаСистемы("echo qwerty >> "+ИмяВрФайла);
		КонецЕсли;
		ТекстовыйФайл = Новый ЧтениеТекста(ИмяВрФайла);
		Данные = ТекстовыйФайл.Прочитать();
		ТекстовыйФайл.Закрыть();
	#КонецЕсли

	Возврат Данные
		
КонецФункции // ПолучитьАссоциациюДляТипаФайла()

// функция на основе данных переданных в параметре формирует параметры HTTPСоединение
//
// параметры:
//	ИмяСервиса, тип "строка" - имя сервиса к которому требуется подключение	
//	
// возвращаемое значение: новое HTTPСоединение 
//
&НаКлиентеНаСервереБезКонтекста
Функция HTTPConnection(ИмяСервиса, beta) Экспорт
	
	#Если ВебКлиент Тогда
		
		Возврат Неопределено;
		
	#Иначе

		Порт = 80;
		Пользователь = "";
		Пароль = "";
		Таймаут = 0;
		ЗащищенноеСоединение = Неопределено;
		Попытка
			Прокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("http");
		Исключение
			Прокси = Неопределено;
		КонецПопытки;          
		Если ИмяСервиса = "ADL" Тогда
			Сервер = "adl.42clouds.com";
			Если beta Тогда
				Сервер = "beta-" + Сервер;
			КонецЕсли;
		ИначеЕсли ИмяСервиса = "Core" Тогда
			Сервер = "core.42clouds.com";
			Если beta Тогда
				Сервер = "beta." + Сервер;
			КонецЕсли;
		КонецЕсли;  
				
		НТТР = Новый HTTPСоединение(Сервер, Порт, Пользователь, Пароль, Прокси, Таймаут, ЗащищенноеСоединение); 
		
		Возврат НТТР;
		
	#КонецЕсли
	
КонецФункции


// Функция предназначена для получения массива ссылок организаций
//
// Параметры:
//
// Возвращаемое значение:
//     СтрокаСсылокОрганизаций, тип Строка - строка с идентификаторами ссылок организаций базы
//
&НаСервереБезКонтекста
Функция ПолучитьСсылкиОрганизаций() Экспорт
	
	СтрокаСсылокОрганизаций = "";
	Попытка
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления";
		
		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			СтрокаСсылокОрганизаций = СтрокаСсылокОрганизаций + Строка(ВыборкаЗапроса.Ссылка.УникальныйИдентификатор()) + ";";		 
		КонецЦикла;
	Исключение
	КонецПопытки;
	Возврат СтрокаСсылокОрганизаций;
	
КонецФункции


// Пустая процедура - обработкчик оповещения
&НаКлиенте
Процедура ПустойОбработчикОповещения(Результат, ДопПараметры) Экспорт
 
 //Ничего не нужно делать, но наличие процедуры обязательно
 
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СсылкаНаименование = Строка(Параметры.ОбъектыНазначения[0]);
	СсылкаНаОбъект = XMLСтрока(Параметры.ОбъектыНазначения[0]);
	
	НастройкиПодключения = ХранилищеСистемныхНастроек.Загрузить("ESDLНастройкиПодключения", "НастройкиПодключения");
	Если НастройкиПодключения <> Неопределено И ТипЗнч(НастройкиПодключения) = Тип("Структура") И НастройкиПодключения.Свойство("EfsolТокен") Тогда
		ESDLТокен = НастройкиПодключения.EfsolТокен;
		Если НастройкиПодключения.Свойство("Логин") Тогда
			ЛогинВвод = НастройкиПодключения.Логин;
			beta = Найти(ЛогинВвод, "beta#") = 1;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


// функция выполняет запрос к серверу на основе информации переданной в параметрах
//
// параметры:
//	HTTPConnection, тип "HTTPСоединение" - соединение с сервером
//	АдресРесурса, тип "строка" - адрес запрашиваемого ресурса  
//	МетодОтправки, тип "строка" - метод отправки запроса (Get, Post, Post_File)
//	СтруктураПараметров, тип "строка" - если метод отправки "Post", то на основе этого параметра строится ContentDisposition
//	ПолноеИмяФайлаТела, тип "строка" - если метод отправки "Post_File", то параметр содержит полное имя файла
//	ПолучитьТелоКакДвоичныеДанные, тип "булево" - признак получения от сервера двоичных данных
//
// возвращаемое значение: структура, ответ сервера пропущенный через "ПарсерОтветаXML"
//
&НаКлиенте
Функция ВыполнитьЗапрос(HTTPConnectionСтрока, АдресРесурса, МетодОтправки = "Get", СтруктураПараметров=Неопределено, ПолноеИмяФайлаТела = Неопределено, ПолучитьТелоКакДвоичныеДанные = Ложь, XMLЗапроса = "") Экспорт
		
	#Если ВебКлиент Тогда
		
		Результат = ВыполнитьЗапросНаСервере(HTTPConnectionСтрока, АдресРесурса, МетодОтправки, СтруктураПараметров, ПолноеИмяФайлаТела, ПолучитьТелоКакДвоичныеДанные, XMLЗапроса, ESDLТокен, ложь);
		
	#Иначе
		
		Результат =  ВыполнитьЗапросНаКлиенте(HTTPConnectionСтрока, АдресРесурса, МетодОтправки, СтруктураПараметров, ПолноеИмяФайлаТела, ПолучитьТелоКакДвоичныеДанные, XMLЗапроса);
		
	#КонецЕсли

    Возврат  Результат;	

КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьЗапросНаСервере(HTTPConnectionСтрока, АдресРесурса, МетодОтправки, СтруктураПараметров, АдресФайла, ПолучитьТелоКакДвоичныеДанные, XMLЗапроса, ESDLТокен, beta) 
	
	Если HTTPConnectionСтрока = "ESDLCoreHTTP" Тогда
		
		HTTPConnection = HTTPConnection("Core", beta);
		
	ИначеЕсли HTTPConnectionСтрока = "ESDLADLHTTP" Тогда
		
		HTTPConnection = HTTPConnection("ADL", beta);
		
	КонецЕсли;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "text/xml");
	Заголовки.Вставить("UserAgent", "ESDL1C");
	Заголовки.Вставить("ID", Строка(Новый УникальныйИдентификатор));
	Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Если Найти(АдресРесурса, "AccountUserSessions/Login") = 0 Тогда;
		Заголовки.Вставить("Token", ESDLТокен);
	КонецЕсли;
	
	Попытка 
		Если МетодОтправки = "Get" Тогда
			HTTPОтвет = HTTPConnection.Получить(Запрос);
			Если ПолучитьТелоКакДвоичныеДанные Тогда
				СтрокаContentDisposition = HTTPОтвет.Заголовки.Получить("Content-Disposition");
				Если СтрокаContentDisposition <> Неопределено Тогда
					СтруктураПараметровContentDisposition = ПарсерContentDisposition(СтрокаContentDisposition);
				КонецЕсли;
			КонецЕсли;
		Иначе 
			Если МетодОтправки = "Post_File" Тогда
				Заголовки.Вставить("Content-Disposition", СформироватьContentDisposition(СтруктураПараметров));
				Если XMLЗапроса <> "" Тогда
					Запрос.УстановитьТелоИзСтроки(XMLЗапроса);
				Иначе
					ДД = ПолучитьИзВременногоХранилища(АдресФайла);
					Запрос.УстановитьТелоИзДвоичныхДанных(ДД); 
				КонецЕсли;
			ИначеЕсли МетодОтправки = "Post" Тогда
				Заголовки.Вставить("Content-Type", "application/xml");
				Если XMLЗапроса = "" Тогда
					XMLЗапроса = СформироватьXMLЗапроса(СтруктураПараметров);
				КонецЕсли;
				Запрос.УстановитьТелоИзСтроки(XMLЗапроса);
			КонецЕсли;
			HTTPОтвет = HTTPConnection.ОтправитьДляОбработки(Запрос);
		КонецЕсли;
		ОтветСервера = HTTPОтвет.ПолучитьТелоКакСтроку();
		Тайминги = HTTPОтвет.Заголовки.Получить("Timings");
	Исключение
		Причина = ОписаниеОшибки();
		ОтветСервера = "";
	КонецПопытки;
	
	Если HTTPОтвет = Неопределено ИЛИ HTTPОтвет.КодСостояния = 500 Тогда 
		ПараметрыОтвета = Новый Структура("КодОтвета, СтруктураОтвета", 500, Новый Структура);
		Если Найти(Причина, "Couldn't resolve host name") ИЛИ НЕ ИнтернетПроверитьПодключение() Тогда
			ПараметрыОтвета.СтруктураОтвета.Вставить("DebugInfo", "The server's response does not meet the standard of service");
			ПараметрыОтвета.СтруктураОтвета.Вставить("Description", "Не доступно подключение к сети Интернет");
		ИначеЕсли Найти(Причина, "Failure when receiving data from the peer") Тогда
			ПараметрыОтвета.СтруктураОтвета.Вставить("DebugInfo", Причина);
			ПараметрыОтвета.СтруктураОтвета.Вставить("Description", "Не доступно подключение к серверу: " + HTTPConnection.Сервер);
		Иначе
			ПараметрыОтвета.СтруктураОтвета.Вставить("DebugInfo", "The server's response does not meet the standard of service");
			ПараметрыОтвета.СтруктураОтвета.Вставить("Description", "Ошибка подключения к серверу");
		КонецЕсли;
		ПараметрыОтвета.СтруктураОтвета.Вставить("ТелоОтветаСтрока", ОтветСервера);
	ИначеЕсли ПолучитьТелоКакДвоичныеДанные И HTTPОтвет.КодСостояния = 200 Тогда
		ОтветСервераДвоичныеДанные = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
		ПараметрыОтвета = Новый Структура("КодОтвета, СтруктураОтвета", 200, Новый Структура);
		ПараметрыОтвета.СтруктураОтвета.Вставить("ДвоичныеДанные", ОтветСервераДвоичныеДанные);
		ПараметрыОтвета.СтруктураОтвета.Вставить("ТелоОтветаСтрока", ОтветСервера);
		Если СтруктураПараметровContentDisposition <> Неопределено Тогда
			ПараметрыОтвета.Вставить("СтруктураПараметровContentDisposition", СтруктураПараметровContentDisposition);
		КонецЕсли;
	Иначе
		ПараметрыОтвета = ПарсерОтветаXML(ОтветСервера); 
	КонецЕсли;
	
	ПараметрыОтвета.Вставить("Timings", Тайминги);

	Возврат ПараметрыОтвета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИнтернетПроверитьПодключение()
	
	Попытка	
		НТТР = Новый HTTPСоединение("www.googleapis.com",,,,,5,Новый ЗащищенноеСоединениеOpenSSL()); 
		Запрос = Новый HTTPЗапрос("language/translate/v2?key=1&q=hello%20world&source=en&target=ru");
		Ответ = НТТР.Получить(Запрос);
		СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
		Если Найти(СтрокаОтвета, "domain") > 0 И Найти(СтрокаОтвета, "reason") Тогда  
			Возврат Истина;
		КонецЕсли;
		
		НТТР = Новый HTTPСоединение("cloud-api.yandex.net",,,,,5,Новый ЗащищенноеСоединениеOpenSSL()); 
		Запрос = Новый HTTPЗапрос("v1/disk");
		Ответ = НТТР.Получить(Запрос);
		СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
		Если Найти(СтрокаОтвета, "Не авторизован") > 0 И Найти(СтрокаОтвета, "UnauthorizedError") Тогда  
			Возврат Истина;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции


// функция выполняет запрос к серверу на клиенте на основе информации переданной в параметрах
//
// параметры:
//	HTTPConnection, тип "HTTPСоединение" - соединение с сервером
//	АдресРесурса, тип "строка" - адрес запрашиваемого ресурса  
//	МетодОтправки, тип "строка" - метод отправки запроса (Get, Post, Post_File)
//	СтруктураПараметров, тип "строка" - если метод отправки "Post", то на основе этого параметра строится ContentDisposition
//	ПолноеИмяФайлаТела, тип "строка" - если метод отправки "Post_File", то параметр содержит полное имя файла
//	ПолучитьТелоКакДвоичныеДанные, тип "булево" - признак получения от сервера двоичных данных
//
// возвращаемое значение: структура, ответ сервера пропущенный через "ПарсерОтветаXML"
//
&НаКлиенте	
Функция ВыполнитьЗапросНаКлиенте(HTTPConnectionСтрока, АдресРесурса, МетодОтправки, СтруктураПараметров, ПолноеИмяФайлаТела, ПолучитьТелоКакДвоичныеДанные, XMLЗапроса) 
	
	#Если НЕ ВебКлиент Тогда
		
		ВремяНачалаОперации = ТекущаяУниверсальнаяДатаВМиллисекундах(); 
			
		HTTPConnection = HTTPConnection("ADL", beta);
		
		Заголовки = Новый Соответствие();
		Заголовки.Вставить("Accept", "text/xml");
		Заголовки.Вставить("UserAgent", "ESDL1C");
		Заголовки.Вставить("ID", Строка(Новый УникальныйИдентификатор));
		Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
		
		Если Найти(АдресРесурса, "AccountUserSessions/Login") = 0 Тогда;
			Заголовки.Вставить("Token", ESDLТокен);
		КонецЕсли;
		
		Попытка 
			Если МетодОтправки = "Get" Тогда
				HTTPОтвет = HTTPConnection.Получить(Запрос);
				Если ПолучитьТелоКакДвоичныеДанные Тогда
					СтрокаContentDisposition = HTTPОтвет.Заголовки.Получить("Content-Disposition");
					Если СтрокаContentDisposition <> Неопределено Тогда
						СтруктураПараметровContentDisposition = ПарсерContentDisposition(СтрокаContentDisposition);
					КонецЕсли;
				КонецЕсли;
			Иначе 
				Если МетодОтправки = "Post_File" Тогда
					Заголовки.Вставить("Content-Disposition", СформироватьContentDisposition(СтруктураПараметров));
					Если XMLЗапроса <> "" Тогда
						Запрос.УстановитьТелоИзСтроки(XMLЗапроса);
					Иначе
						Запрос.УстановитьИмяФайлаТела(ПолноеИмяФайлаТела); 
					КонецЕсли;
				ИначеЕсли МетодОтправки = "Post" Тогда
					Заголовки.Вставить("Content-Type", "application/xml");
					Если XMLЗапроса = "" Тогда
						XMLЗапроса = СформироватьXMLЗапроса(СтруктураПараметров);
					КонецЕсли;
					Запрос.УстановитьТелоИзСтроки(XMLЗапроса);
				КонецЕсли;
				HTTPОтвет = HTTPConnection.ОтправитьДляОбработки(Запрос);
			КонецЕсли;
			ОтветСервера = HTTPОтвет.ПолучитьТелоКакСтроку();
			Тайминги = HTTPОтвет.Заголовки.Получить("Timings");
		Исключение
			Причина = ОписаниеОшибки();
			ОтветСервера = "";
		КонецПопытки;
		
		Если HTTPОтвет = Неопределено ИЛИ HTTPОтвет.КодСостояния = 500 Тогда 
			ПараметрыОтвета = Новый Структура("КодОтвета, СтруктураОтвета", 500, Новый Структура);
			Если Найти(Причина, "Couldn't resolve host name")  Тогда
				ПараметрыОтвета.СтруктураОтвета.Вставить("DebugInfo", "The server's response does not meet the standard of service");
				ПараметрыОтвета.СтруктураОтвета.Вставить("Description", "Не доступно подключение к сети Интернет");
			ИначеЕсли Найти(Причина, "Ошибка совместного доступа к файлу")Тогда 
				ПараметрыОтвета.СтруктураОтвета.Вставить("DebugInfo", Причина);
				ПараметрыОтвета.СтруктураОтвета.Вставить("Description", "Ошибка доступа к файлу " + ПолноеИмяФайлаТела + " (возможно файл занят другим приложением");
			Иначе
				ПараметрыОтвета.СтруктураОтвета.Вставить("DebugInfo", "The server's response does not meet the standard of service");
				ПараметрыОтвета.СтруктураОтвета.Вставить("Description", "Ошибка подключения к серверу");
			КонецЕсли;
			ПараметрыОтвета.СтруктураОтвета.Вставить("ТелоОтветаСтрока", ОтветСервера);
		ИначеЕсли ПолучитьТелоКакДвоичныеДанные И HTTPОтвет.КодСостояния = 200 Тогда
			ОтветСервераДвоичныеДанные = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
			ПараметрыОтвета = Новый Структура("КодОтвета, СтруктураОтвета", 200, Новый Структура);
			ПараметрыОтвета.СтруктураОтвета.Вставить("ДвоичныеДанные", ОтветСервераДвоичныеДанные);
			ПараметрыОтвета.СтруктураОтвета.Вставить("ТелоОтветаСтрока", ОтветСервера);
			Если СтруктураПараметровContentDisposition <> Неопределено Тогда
				ПараметрыОтвета.Вставить("СтруктураПараметровContentDisposition", СтруктураПараметровContentDisposition);
			КонецЕсли;
		Иначе
			ПараметрыОтвета = ПарсерОтветаXML(ОтветСервера); 
		КонецЕсли;
		ПараметрыОтвета.Вставить("Timings", Тайминги);
		
		Возврат ПараметрыОтвета;
		
	#Иначе
		
		Возврат Неопределено;
		
	#КонецЕсли
	

КонецФункции

// функция парсинга заголовка "ContentDisposition"
//
// параметры:
//	СтрокаContentDisposition, тип "строка" - собственно и сам заголовок как строка	
//
// возвращаемое значение: структура параметров заголовка
//
&НаКлиентеНаСервереБезКонтекста
Функция ПарсерContentDisposition(СтрокаContentDisposition) Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	МассивСтрокПараметров = РазбитьСтроку(";", СтрокаContentDisposition);
	Для Каждого СтрокаПараметра Из МассивСтрокПараметров Цикл
		ПозицияРазделителя = Найти(СтрокаПараметра, "=");
		Если ПозицияРазделителя > 0 Тогда
			ИмяПараметра = Лев(СтрокаПараметра,ПозицияРазделителя-1); 
			ЗначениеПараметра = Сред(СтрокаПараметра, ПозицияРазделителя+1);
			ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, """", "");
			Попытка
				СтруктураПараметров.Вставить(ИмяПараметра,ЗначениеПараметра); 
			Исключение
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Функция разбивает строку по разделителям, лимит определяет максимальное количество слов
// аналог split в PHP
//
// параметры:
//	СимволыРазделители, тип "строка" - строка с символами разделителями
//	Строка, тип "строка" - строка для разбиения
//	Лимит, тип "число" - количество получаемых слов из строки
//
// возвращаемое значение: массив слов 
//
&НаКлиентеНаСервереБезКонтекста
Функция РазбитьСтроку(СимволыРазделители, Строка, Лимит = Неопределено) Экспорт
	
	НоваяСтрока = Строка;
	МассивСлов = Новый Массив;
	ИщемНачало = Истина;
	ТекСлово = "";
	Если Найти(Строка,СимволыРазделители) = 1 Тогда
		Строка = Сред(Строка,2);
	КонецЕсли;		
	Для НомерСимволаСтроки = 1 по СтрДлина(Строка) цикл
		ТекСимвол = Сред(Строка,НомерСимволаСтроки,1);
		Если Найти(СимволыРазделители, ТекСимвол) = 0 Тогда
			ТекСлово = ТекСлово + ТекСимвол;
			ИщемНачало = Ложь;
			продолжить;
		ИначеЕсли ИщемНачало Тогда
			МассивСлов.Добавить("");
			Если МассивСлов.Количество() = Лимит Тогда
				Возврат МассивСлов;
			КонецЕсли;
			продолжить;
		Иначе
			МассивСлов.Добавить(ТекСлово);
			Если МассивСлов.Количество() = Лимит Тогда
				Возврат МассивСлов;
			КонецЕсли;
			ТекСлово = "";
			ИщемНачало = Истина;
		КонецЕсли;
	конеццикла;
	Если Не ИщемНачало Тогда
		МассивСлов.Добавить(СокрЛП(ТекСлово));
	КонецЕсли;
	
	Возврат МассивСлов;
	
конецфункции

// Функция формирует строку заголовка ContentDisposition
//
// Параметры:
//     СтруктураПараметров, тип Структура -  структура данных для ContentDisposition
//
// Возвращаемое значение:
//     ContentDisposition, тип Строка
//
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьContentDisposition(СтруктураПараметров) Экспорт
	
	ЗначениеContentDisposition = "attachment";
	Если СтруктураПараметров <> Неопределено Тогда
		Для Каждого Параметр Из СтруктураПараметров Цикл
			ЗначениеContentDisposition = ЗначениеContentDisposition + "; " + Параметр.Ключ + "=""" + Параметр.Значение + """";
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЗначениеContentDisposition;
	
КонецФункции


// функция формирования XML запроса (для передачи в теле ответа)
//
// параметры:
//	СтруктураХML, тип "структура" - структура xml, где ключ это xmlElementName, а значение это xmlElementValue
//
// возвращаемое значение: ЗаписьXML, где находится построеный XML 
//	
&НаСервереБезКонтекста
Функция СформироватьXMLЗапроса(СтруктураХML, УказыватьТип = Ложь) Экспорт
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	Запись.ЗаписатьОбъявлениеXML();
	
	Запись.ЗаписатьНачалоЭлемента("Request");
	Если СтруктураХML <> Неопределено Тогда	
		Для Каждого Элемент Из СтруктураХML Цикл
			Запись.ЗаписатьНачалоЭлемента(Элемент.Ключ);
			Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
				Запись.ЗаписатьАтрибут("Type","list");
				Массив = Элемент.Значение;
				Для Каждого ЭлементМассива Из Массив Цикл
					Запись.ЗаписатьНачалоЭлемента("item");
					Если УказыватьТип Тогда
						type = ТипЗнч(ЭлементМассива);
						Запись.ЗаписатьАтрибут("Type", Строка(type));
					КонецЕсли;
					Запись.ЗаписатьТекст(ЭлементМассива);
					Запись.ЗаписатьКонецЭлемента();
				КонецЦикла;
			ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ДанныеФормыКоллекция") Тогда
				Запись.ЗаписатьАтрибут("Type","table");
				ТаблицаЗначений = ДанныеФормыВЗначение(Элемент.Значение, Тип("ТаблицаЗначений"));
				Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
					Запись.ЗаписатьНачалоЭлемента("row");
					Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
						ИмяКолонки = Колонка.Имя;
						ЗначениеЯчейки = СтрокаТаблицы[ИмяКолонки];
						type = ТипЗнч(ЗначениеЯчейки);
						Если type <> Тип("Строка") Тогда
							Если type = Тип("Дата") Тогда
								ЗначениеЯчейки = ДатаВФорматеISO8601(ЗначениеЯчейки);
							ИначеЕсли type = Тип("СписокЗначений") Тогда
								СтрокаЗначения = "";
								Для Каждого ЭлементСписка Из ЗначениеЯчейки Цикл
									ElementType = ТипЗнч(ЭлементСписка.Значение); 
									Если УказыватьТип И ElementType <> Тип("Булево") И ElementType <> Тип("Число") И ElementType <> Тип("Строка") И ElementType <> Тип("Дата") Тогда
										СтруктураСсылки = ТипСсылки(ЭлементСписка.Значение);
										ElementType = СтруктураСсылки.СсылкаТип;
									КонецЕсли;
									СтрокаЗначения = СтрокаЗначения + ";" + XMLСтрока(ЭлементСписка.Значение) + "|" + ЭлементСписка.Представление;  
								КонецЦикла;
								ЗначениеЯчейки = СтрокаЗначения;
							Иначе
								Если УказыватьТип И type <> Тип("Булево") И type <> Тип("Число") Тогда
									СтруктураСсылки = ТипСсылки(ЗначениеЯчейки);
									type = СтруктураСсылки.СсылкаТип;
								КонецЕсли;
								ЗначениеЯчейки = XMLСтрока(ЗначениеЯчейки);
							КонецЕсли;
						КонецЕсли;
						Запись.ЗаписатьНачалоЭлемента(ИмяКолонки);
						Если УказыватьТип Тогда
							Запись.ЗаписатьАтрибут("Type", Строка(type));
							Если type = Тип("СписокЗначений") Тогда
								Запись.ЗаписатьАтрибут("ElementType", Строка(ElementType));
							КонецЕсли;
						КонецЕсли;
						Запись.ЗаписатьТекст(ЗначениеЯчейки);
						Запись.ЗаписатьКонецЭлемента();
					КонецЦикла;
					Запись.ЗаписатьКонецЭлемента();
				КонецЦикла;
			Иначе
				ЗначениеЯчейки = Элемент.Значение;
				type = ТипЗнч(ЗначениеЯчейки);
				Если type = Тип("Дата") Тогда
					ЗначениеЯчейки = ДатаВФорматеISO8601(ЗначениеЯчейки);
				ИначеЕсли type = Тип("СписокЗначений") Тогда
					СтрокаЗначения = "";
					Для Каждого ЭлементСписка Из ЗначениеЯчейки Цикл
						ElementType = ТипЗнч(ЭлементСписка.Значение);
						Если УказыватьТип И ElementType <> Тип("Булево") И ElementType <> Тип("Число") И ElementType <> Тип("Строка") И ElementType <> Тип("Дата") Тогда
							СтруктураСсылки = ТипСсылки(ЭлементСписка.Значение);
							ElementType = СтруктураСсылки.СсылкаТип;
						КонецЕсли;
						СтрокаЗначения = СтрокаЗначения + ";" + XMLСтрока(ЭлементСписка.Значение);  
					КонецЦикла;
					ЗначениеЯчейки = СтрокаЗначения;
				Иначе
					ЗначениеЯчейки = XMLСтрока(ЗначениеЯчейки);
				КонецЕсли;
				Если УказыватьТип Тогда
					Запись.ЗаписатьАтрибут("Type", Строка(type));
					Если type = Тип("СписокЗначений") Тогда
						Запись.ЗаписатьАтрибут("ElementType", Строка(ElementType));
					КонецЕсли;
				КонецЕсли;
				Запись.ЗаписатьТекст(ЗначениеЯчейки);	
			КонецЕсли;
			Запись.ЗаписатьКонецЭлемента();
		КонецЦикла;
	КонецЕсли;
	
	Запись.ЗаписатьКонецЭлемента();
	ТекстЗапросаXML = Запись.Закрыть();
	
	Возврат ТекстЗапросаXML;
	
КонецФункции


// Функция преобразует дату в формат ISO8601
//
// Параметры:
//      Дата, тип Дата - дата для преобразования
// Возвращаемое значение
// 		Строка даты в формате ISO8601
//
&НаСервереБезКонтекста
Функция ДатаВФорматеISO8601(Дата, ДобавитьЧасовойПояс = Истина) Экспорт
	
	Если ТипЗнч(Дата) = Тип("Дата") Тогда
		СтрокаЧасовойПояс =  СериализаторXDTO.XMLСтрока(Дата);
		Если ДобавитьЧасовойПояс Тогда
			СмещениеЧасы = СмещениеСтандартногоВремени(ЧасовойПояс(), УниверсальноеВремя(ТекущаяДата(), ЧасовойПояс())) / 3600;
			СтрокаЧасовойПояс = СтрокаЧасовойПояс + ?(СмещениеЧасы > 0, "+", "-");
			СмещениеЧасы = Макс(СмещениеЧасы,-СмещениеЧасы);
			СтрокаЧасовойПояс = СтрокаЧасовойПояс + ?(СмещениеЧасы < 10, "0" + СмещениеЧасы, СмещениеЧасы) + ":00";
		КонецЕсли;
		Возврат СтрокаЧасовойПояс;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Функция для определоения ИД ссылки и её типа
//
// Параметры:
//    Ссылка - любая ссылка на объект базы данных
//
// Возвращаемое значение:
//    Структура, сождержащая СсылкаИД и СсылкаТип
//
&НаСервереБезКонтекста
Функция ТипСсылки(Ссылка)
	
	Если Ссылка <> Неопределено Тогда
		ИмяМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка)).ПолноеИмя();
		Если Найти(ИмяМетаданных, "Документ.") = 1 Тогда
			СсылкаТип = СтрЗаменить(ИмяМетаданных, "Документ.", "ДокументСсылка.");
		ИначеЕсли Найти(ИмяМетаданных, "Справочник.") = 1 Тогда
			СсылкаТип = СтрЗаменить(ИмяМетаданных, "Справочник.", "СправочникСсылка.");
		ИначеЕсли Найти(ИмяМетаданных, "Перечисление.") = 1 Тогда
			СсылкаТип = СтрЗаменить(ИмяМетаданных, "Перечисление.", "ПеречислениеСсылка.");
		ИначеЕсли Найти(ИмяМетаданных, "ПланВидовХарактеристик.") = 1 Тогда
			СсылкаТип = СтрЗаменить(ИмяМетаданных, "ПланВидовХарактеристик.", "ПланВидовХарактеристикСсылка.");
		Иначе 
			СсылкаТип = ИмяМетаданных;
		КонецЕсли;
	Иначе
		СсылкаТип = Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("СсылкаИД, СсылкаТип", XMLСтрока(Ссылка), СсылкаТип) 
	
КонецФункции

// функция парсинга XML ответа сервера, на основе анализа ответа сервера формируется структура
// с нужными параметрами из ответа сервера
//
// параметры:
//	ОтветСервера, тип "строка" - ответ сервера в виде XML строки		
//
// возвращаемое значение: структура с параметрми ответа сервера
//
&НаСервереБезКонтекста
Функция ПарсерОтветаXML(ОтветСервера) Экспорт
	
	ПараметрыОтвета = Новый Структура("КодОтвета, СтруктураОтвета", 200, Новый Структура);
	
	Если НЕ ОтветСервера = "" Тогда
		
		ОтветСервера = СтрЗаменить(ОтветСервера, "<result>", "<Result>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "</result>", "</Result>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<result/>", "<Result/>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<request>", "<Request>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "</request>", "</Request>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<request/>", "<Request/>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<error>", "<Error>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "</error>", "</Error>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<error/>", "<Error/>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<code>", "<Code>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "</code>", "</Code>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<code/>", "<Code/>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<description>", "<Description>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "</description>", "</Description>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<description/>", "<Description/>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<debuginfo>", "<DebugInfo>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "</debuginfo>", "</DebugInfo>");
		ОтветСервера = СтрЗаменить(ОтветСервера, "<debuginfo/>", "<DebugInfo/>");
		
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(ОтветСервера);
			
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					КорневойЭлемент = ЧтениеXML.Имя;
					Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = КорневойЭлемент И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
							ИмяЭлементаОтвета = ЧтениеXML.Имя;
							Если ЧтениеXML.ПервыйАтрибут() И ЧтениеXML.Имя = "Type" Тогда
								ТипЭлемента = ЧтениеXML.Значение
							Иначе
								ТипЭлемента = "String";
							КонецЕсли;
							Если ТипЭлемента = "List" Тогда 
								ЗначениеЭлементаОтвета = Новый Массив;
								Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = ИмяЭлементаОтвета И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
									Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
										ЗначениеЭлементаОтвета.Добавить(ЧтениеXML.Значение);
									КонецЕсли;
								КонецЦикла;
							ИначеЕсли ТипЭлемента = "Table" Тогда 
								ЗначениеЭлементаОтвета = Новый Массив;
								Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = ИмяЭлементаОтвета И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
									Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Row" Тогда
										СтруктураСтроки = Новый Структура;
										Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = "Row" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
											Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
												ИмяКолонки = ЧтениеXML.Имя;
											ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
												Значение = ЧтениеXML.Значение;
												СтруктураСтроки.Вставить(ИмяКолонки, Значение);
											ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
												Если НЕ СтруктураСтроки.Свойство(ИмяКолонки) Тогда
													СтруктураСтроки.Вставить(ИмяКолонки, ""); 
												КонецЕсли;
											КонецЕсли;
										КонецЦикла;
										ЗначениеЭлементаОтвета.Добавить(СтруктураСтроки);
									КонецЕсли;
								КонецЦикла
							ИначеЕсли ТипЭлемента = "String" Тогда
								ЗначениеЭлементаОтвета = "";
								Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = ИмяЭлементаОтвета И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
									Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
										ЗначениеЭлементаОтвета = ЧтениеXML.Значение;
									КонецЕсли;
								КонецЦикла
							КонецЕсли;
							ПараметрыОтвета.СтруктураОтвета.Вставить(ИмяЭлементаОтвета, ЗначениеЭлементаОтвета);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			Если ВРег(КорневойЭлемент) = ВРег("Error")Тогда
				Попытка
					ПараметрыОтвета.КодОтвета = Число(ПараметрыОтвета.СтруктураОтвета.Code);
				Исключение
					ПараметрыОтвета.КодОтвета = 400;
				КонецПопытки;
			ИначеЕсли НЕ (ВРег(КорневойЭлемент) = ВРег("Result") ИЛИ ВРег(КорневойЭлемент) = ВРег("Request")) Тогда
				ПараметрыОтвета.КодОтвета = 400;
			КонецЕсли;
		Исключение
			ПараметрыОтвета.КодОтвета = 400;
		КонецПопытки;
		
	Иначе
		ПараметрыОтвета.КодОтвета = 400;
	КонецЕсли;
	
	Если ПараметрыОтвета.КодОтвета = 400 И Не ПараметрыОтвета.СтруктураОтвета.Свойство("Code") Тогда
		Если Не ПараметрыОтвета.СтруктураОтвета.Свойство("Code") Тогда
			ПараметрыОтвета.СтруктураОтвета.Вставить("Code", Строка("400"));
		КонецЕсли;
		Если НЕ (ПараметрыОтвета.СтруктураОтвета.Свойство("Description") И ПараметрыОтвета.СтруктураОтвета.Свойство("DebugInfo")) Тогда
			ПараметрыОтвета.СтруктураОтвета.Вставить("DebugInfo", "The server's response does not meet the standard of service");
			ПараметрыОтвета.СтруктураОтвета.Вставить("Description", "Ответ сервера не соответствует стандарту сервиса");
		КонецЕсли;
		ПараметрыОтвета.СтруктураОтвета.Вставить("ТелоОтветаСтрока", ОтветСервера);
	КонецЕсли;
	
	Если ВРег(КорневойЭлемент) = ВРег("Request") Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета;
	Иначе
		Возврат ПараметрыОтвета;
	КонецЕсли;
	
КонецФункции
