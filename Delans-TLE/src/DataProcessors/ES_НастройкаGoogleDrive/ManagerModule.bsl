
Функция ПолучитьПараметрыПодключенияGoogleDrive() Экспорт
	//EFSOL_Сальник К.А. 2019-05-08 {+
	
	ПараметрыПодключенияGoogleDrive = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ES_ПараметрыПодключенияGoogleDrive.ИдентификаторКлиента КАК ИдентификаторКлиента,
		|	ES_ПараметрыПодключенияGoogleDrive.СекретКлиента КАК СекретКлиента,
		|	ES_ПараметрыПодключенияGoogleDrive.КодДоступа КАК КодДоступа,
		|	ES_ПараметрыПодключенияGoogleDrive.ТокенДоступа КАК ТокенДоступа,
		|	ES_ПараметрыПодключенияGoogleDrive.ТокенОбновления КАК ТокенОбновления,
		|	ES_ПараметрыПодключенияGoogleDrive.ВремяЖизниТокена КАК ВремяЖизниТокена
		|ИЗ
		|	РегистрСведений.ES_ПараметрыПодключенияGoogleDrive КАК ES_ПараметрыПодключенияGoogleDrive
		|
		|УПОРЯДОЧИТЬ ПО
		|	ES_ПараметрыПодключенияGoogleDrive.ВремяЖизниТокена УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() <> 1 Тогда
		Возврат Неопределено;
	Иначе
		ПараметрыПодключенияGoogleDrive.Вставить("ИдентификаторКлиента", РезультатЗапроса[0].ИдентификаторКлиента);
		ПараметрыПодключенияGoogleDrive.Вставить("СекретКлиента", РезультатЗапроса[0].СекретКлиента);
		ПараметрыПодключенияGoogleDrive.Вставить("КодДоступа", РезультатЗапроса[0].КодДоступа);
		ПараметрыПодключенияGoogleDrive.Вставить("ТокенДоступа", РезультатЗапроса[0].ТокенДоступа);
		ПараметрыПодключенияGoogleDrive.Вставить("ТокенОбновления", РезультатЗапроса[0].ТокенОбновления);
		ПараметрыПодключенияGoogleDrive.Вставить("ВремяЖизниТокена", РезультатЗапроса[0].ВремяЖизниТокена); 
		
		Возврат ПараметрыПодключенияGoogleDrive;
		
	КонецЕсли;
	//EFSOL_Сальник К.А.  -}

КонецФункции

Процедура СохранитьПараметрыПодключенияGoogleDrive(ПараметрыПодключенияGoogleDrive) Экспорт
	//EFSOL_Сальник К.А. 2019-05-07 {+
		
	МенеджерЗаписи = РегистрыСведений.ES_ПараметрыПодключенияGoogleDrive.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Настройка = Истина;
	МенеджерЗаписи.ИдентификаторКлиента = ПараметрыПодключенияGoogleDrive.ИдентификаторКлиента;
	МенеджерЗаписи.СекретКлиента = ПараметрыПодключенияGoogleDrive.СекретКлиента;
	МенеджерЗаписи.КодДоступа = ПараметрыПодключенияGoogleDrive.КодДоступа;
	МенеджерЗаписи.ТокенДоступа = ПараметрыПодключенияGoogleDrive.ТокенДоступа;
	МенеджерЗаписи.ТокенОбновления = ПараметрыПодключенияGoogleDrive.ТокенОбновления;
	МенеджерЗаписи.ВремяЖизниТокена = ПараметрыПодключенияGoogleDrive.ВремяЖизниТокена;

	МенеджерЗаписи.Записать();
	//EFSOL_Сальник К.А.  -}
	
КонецПроцедуры

Функция ОбновитьТокенДоступа()  Экспорт
	//EFSOL_Сальник К.А. 2019-05-07 {+
	
	ПараметрыПодключенияGoogleDrive = ПолучитьПараметрыПодключенияGoogleDrive();
	Если ПараметрыПодключенияGoogleDrive = Неопределено Тогда
		Возврат Ложь;
	Иначе
		
		СтрокаЗапроса = "grant_type=refresh_token" + "&";
		СтрокаЗапроса = СтрокаЗапроса + "client_id=" + ПараметрыПодключенияGoogleDrive.ИдентификаторКлиента + "&";
		СтрокаЗапроса = СтрокаЗапроса + "client_secret=" + ПараметрыПодключенияGoogleDrive.СекретКлиента + "&";
		СтрокаЗапроса = СтрокаЗапроса + "refresh_token=" + ПараметрыПодключенияGoogleDrive.ТокенОбновления;
		
		Соединение = Новый HTTPСоединение("accounts.google.com",443,,,,,Новый ЗащищенноеСоединениеOpenSSL);
		
		Заголовки  = Новый Соответствие;
		Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded");
		
		ЗапросХТТП = Новый HTTPЗапрос("/o/oauth2/token", Заголовки);
		ЗапросХТТП.УстановитьТелоИзСтроки(СтрокаЗапроса);
		
		Ответ = Соединение.ВызватьHTTPМетод("POST",ЗапросХТТП);
		
		Если Ответ.КодСостояния <> 200 Тогда Возврат Ложь; КонецЕсли;
		
		Строка = Ответ.ПолучитьТелоКакСтроку();
		
		Чтение = Новый ЧтениеJSON();
		Чтение.УстановитьСтроку(Строка);
		
		Фабрика = ФабрикаXDTO.ПрочитатьJSON(Чтение);
		
		Чтение.Закрыть();
		
		ПараметрыПодключенияGoogleDrive.ТокенДоступа = Фабрика.access_token;	
		ПараметрыПодключенияGoogleDrive.ВремяЖизниТокена = ТекущаяДата() + Число(Фабрика.expires_in) - 5; //так как есть небольшая задержка при проверки и создании/изменении учетки
		
		СохранитьПараметрыПодключенияGoogleDrive(ПараметрыПодключенияGoogleDrive);
		
		Возврат Истина;
	КонецЕсли;
	//EFSOL_Сальник К.А.  -}
	
КонецФункции
	
Функция ПолучитьКаталогДляСохраненияНаДиске(ДокументДоставки, Дата) Экспорт
	//EFSOL_Сальник К.А. 2019-06-17 {+
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ES_КаталогиИзображенийЗаказовСрезПоследних.Идентификатор КАК Идентификатор1гоУровня,
		|	ES_КаталогиИзображенийЗаказовСрезПоследних1.Идентификатор КАК Идентификатор2гоУровня
		|ИЗ
		|	РегистрСведений.ES_КаталогиИзображенийЗаказов.СрезПоследних(&Дата, ДокументДоставки = """") КАК ES_КаталогиИзображенийЗаказовСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_КаталогиИзображенийЗаказов.СрезПоследних(&Дата, ДокументДоставки = &ДокументДоставки) КАК ES_КаталогиИзображенийЗаказовСрезПоследних1
		|		ПО ES_КаталогиИзображенийЗаказовСрезПоследних.Период = ES_КаталогиИзображенийЗаказовСрезПоследних1.Период";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ДокументДоставки", ДокументДоставки);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если не РезультатЗапроса.Количество() = 0 Тогда
		ИдентификаторРодителя = РезультатЗапроса[0].Идентификатор1гоУровня;
		ИдентификаторКаталога = РезультатЗапроса[0].Идентификатор2гоУровня;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторРодителя) Тогда
		МенеджерЗаписи = РегистрыСведений.ES_КаталогиИзображенийЗаказов.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.Период 			= Дата;
		МенеджерЗаписи.ДокументДоставки = "";
		Имя 							= Формат(Дата, "ДЛФ=DD");
		ИдентификаторРодителя           = СоздатьКаталогНаДиске(Имя, Неопределено);
		МенеджерЗаписи.Идентификатор 	= ИдентификаторРодителя;
		МенеджерЗаписи.Наименование 	= Имя;
		
		МенеджерЗаписи.Записать();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ИдентификаторКаталога) Тогда
		МенеджерЗаписи = РегистрыСведений.ES_КаталогиИзображенийЗаказов.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.Период 			= Дата;
		МенеджерЗаписи.ДокументДоставки = ДокументДоставки;
		Если ТипЗнч(ДокументДоставки) = ТИП("ДокументСсылка.ЗаказПокупателя") Тогда
			Имя 						= ДокументДоставки.ES_НомерНакладной;
		Иначе
			Имя							= ДокументДоставки.НомерНакладной;
		КонецЕсли;	
		ИдентификаторКаталога           = СоздатьКаталогНаДиске(Имя, ИдентификаторРодителя);
		МенеджерЗаписи.Идентификатор 	= ИдентификаторКаталога;
		МенеджерЗаписи.Наименование 	= Имя;
		
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	Возврат ИдентификаторКаталога;
	//EFSOL_Сальник К.А.  -}	
КонецФункции

Функция СоздатьКаталогНаДиске(Имя, Родитель)
	//EFSOL_Сальник К.А. 2019-06-17 {+
	
	ТокенДоступа = ПолучитьТокенДоступаGoogleDrive();
	
	Если не ЗначениеЗаполнено(ТокенДоступа) Тогда
		Сообщить("Сервис запрещен в основной системе.");
		Возврат Неопределено;
	КонецЕсли;

	ПараметрыСоединения = Новый Структура;
	//формируем запрос к gs
	Соединение = Новый HTTPСоединение("www.googleapis.com", 443,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	Заголовки  = Новый Соответствие;
	Заголовки.Вставить("Authorization","Bearer " + ТокенДоступа);
	Заголовки.Вставить("Content-Type: application/json; charset=UTF-8");
	
	ТелоЗапроса = СтрЗаменить(СформироватьТелоЗапросаСозданиеКаталога(Имя, Родитель), "\", "");
	
	ЗапросHTTP = Новый HTTPЗапрос(СтрШаблон("%1?alt=json", "/drive/v2/files"), Заголовки);
		
	ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	Ответ = Соединение.ВызватьHTTPМетод("POST", ЗапросHTTP);
	ОтветСтрока = Ответ.ПолучитьТелоКакСтроку();
	ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
	Идентификатор = ОбработкаJSON.UnJSON(ОтветСтрока).Получить("id");
	Возврат Идентификатор;
	//EFSOL_Сальник К.А.  -}
	
КонецФункции

Функция СформироватьТелоЗапросаСозданиеКаталога(Имя, Родитель)
	//EFSOL_Сальник К.А. 2019-06-17 {+
	
	 СтруктураТелаЗапроса = Новый Структура;
	 СтруктураТелаЗапроса.Вставить("title", Имя);
	 СтруктураТелаЗапроса.Вставить("mimeType", "application/vnd.google-apps.folder");
	 Если ЗначениеЗаполнено(Родитель) Тогда
		 Родители = Новый Массив;
		 СтруктураРодитель = Новый Структура;
		 СтруктураРодитель.Вставить("id", Родитель);	
		 Родители.Добавить(СтруктураРодитель);
		 СтруктураТелаЗапроса.Вставить("parents", Родители);
	 КонецЕсли;
	 	 
	 ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
	 Возврат ОбработкаJSON.JSON(СтруктураТелаЗапроса);
	 
	//EFSOL_Сальник К.А.  -}
Конецфункции

Функция СоздатьСообщение_Текст(ЗаголовкиСообщения, ДвоичныеДанныеТекст)  
	
	//EFSOL_Сальник К.А. 2019-05-07 {+
	Поток = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Поток);
	
	// Заголовки.
	Для Каждого Стр Из ЗаголовкиСообщения Цикл 
		ЗаписьДанных.ЗаписатьСтроку(Стр);
	КонецЦикла;	
	ЗаписьДанных.ЗаписатьСтроку("");
	
	// Тело.
	ЗаписьДанных.ЗаписатьСтроку(ДвоичныеДанныеТекст);
	ЗаписьДанных.Закрыть();
	
	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
	//EFSOL_Сальник К.А.  -}
	
КонецФункции

Функция ПолучитьТокенДоступаGoogleDrive()
	//EFSOL_Сальник К.А. 2019-05-08 {+
	
	ПараметрыПодключенияGoogleDrive = Обработки.ES_НастройкаGoogleDrive.ПолучитьПараметрыПодключенияGoogleDrive();
	Если ПараметрыПодключенияGoogleDrive = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.ВремяЖизниТокена) и ТекущаяДата() <= ПараметрыПодключенияGoogleDrive.ВремяЖизниТокена и ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.ТокенДоступа) Тогда
		Возврат ПараметрыПодключенияGoogleDrive.ТокенДоступа;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.ИдентификаторКлиента) и  ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.СекретКлиента) и ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.ТокенОбновления) Тогда
		Если Обработки.ES_НастройкаGoogleDrive.ОбновитьТокенДоступа() Тогда
			ПараметрыПодключенияGoogleDrive = Обработки.ES_НастройкаGoogleDrive.ПолучитьПараметрыПодключенияGoogleDrive();
			Возврат ПараметрыПодключенияGoogleDrive.ТокенДоступа;
		Иначе
			Возврат Неопределено;
		КонецЕсли;	 
	КонецЕсли;
	
	//EFSOL_Сальник К.А.  -}

КонецФункции
	
