
////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.ДатаДокументаПоУмолчанию = ТекущаяДата();
	//Объект.ДатаДоставкиПоУмолчанию = '00010101000000';
	Объект.Организация 			= ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Организация);
	Объект.Склад				= ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Склад);
	ИспользоватьТК 				= Константы.ES_ИспользоватьТарифныйКалькулятор.Получить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	//ЭР Несторук С.И. 10.04.2019 9:32:27 {
	ES_БиллингКлиент.ПроверитьДоступностьСервисаDelans(Отказ);
	//}ЭР Несторук С.И.
	
	ОбновитьДанныеШаблонаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьДанныеНастройки" Тогда
		ОбновитьДанныеШаблонаНаКлиенте();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ЭЛЕМЕНТОВ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДокументExcelПриИзменении(Элемент)
	
	ОчиститьДанныеОФайлеДляЗагрузкиДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументExcelНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Результат.Количество() > 0 Тогда
		Результат.Очистить();
	КонецЕсли;
	
	ВыборФайла(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПриИзменении(Элемент)
	
	ОбновитьДанныеШаблонаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокиСПриИзменении(Элемент)
	
	Если СтрокиС > СтрокиПо Тогда
		СтрокиПо = СтрокиС;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокиПоПриИзменении(Элемент)
	
	Если СтрокиС > СтрокиПо Тогда
		СтрокиС = СтрокиПо;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ КНОПОК

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	
	#Если ВебКлиент Тогда
		
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаДоступностиРасчширенияРаботыСФайлами", ЭтотОбъект);
		МенеджерОборудованияКлиент.ПроверитьДоступностьРасширенияРаботыСФайлами(ОписаниеОповещения, Истина);
		
	#Иначе
		
		ПутьКФайлу = "";
		АдресФайлаДанных= "";
		НетКомпонентыExcel = Ложь;
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Фильтр = "(*.xls;*xlsx;*xlsb)| *.xls;*xlsx;*xlsb"; 
		Если ДиалогВыбораФайла.Выбрать() Тогда
			ПутьКФайлу = ДиалогВыбораФайла.ВыбранныеФайлы[0];
			Розширение = Прав(ПутьКФайлу,СтрДлина(ПутьКФайлу)-Найти(ПутьКФайлу,"."));
			АдресФайлаДанных = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлу));
			//Мы помещаем объект формы в переменную,
			//так как должны передать её в процедуру на сервере,
			//где нельзя изменять объект формы, зато можно править переменную содержащую его
			ЗагрузитьИзФайлаНаКлиенте(АдресФайлаДанных,Розширение, НетКомпонентыExcel);
			Если НетКомпонентыExcel Тогда
				ЗагрузитьИзФайлаВТабличныйДокумент(АдресФайлаДанных,Розширение);
			КонецЕсли;

		КонецЕсли;
	#КонецЕсли	
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаНаКлиенте(АдресФайлаДанных,Розширение, НетКомпонентыExcel = Ложь)

	#Если НЕ ВебКлиент Тогда
		
		мФайл = ПолучитьИзВременногоХранилища(АдресФайлаДанных);
		Имя = ПолучитьИмяВременногоФайла("."+Розширение);
		мФайл.Записать(Имя);
		
		Попытка
			Excel = новый COMОбъект("Excel.Application");
			ДокExcel = Excel.Workbooks.Open(Имя);
			Лист = ДокExcel.Worksheets(1);
		Исключение
			НетКомпонентыExcel = Истина;
			Возврат;
		КонецПопытки;
		
		УдалитьКолонкиНаСервере();
		Результат.Очистить();
		
		МК 			= МассивКолонокНаКлиенте(Лист);
		ДобавитьКолонкиНаСервере(МК);
		МКП 		= МассивПродолжение(Лист);
		ДокExcel.Close();
		ТекстСообщения = ЗаполняемТЗНАСервере(МКП);
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
		КонецЕсли; 
	#КонецЕсли
	

КонецПроцедуры // ЗагрузитьИзФайлаНаКлиенте()
&НаКлиенте
Процедура ПроверкаДоступностиРасчширенияРаботыСФайлами(Результат, ДополнительныеПараметры) Экспорт
	
	#Если ВебКлиент Тогда
		
		Если Результат = Истина Тогда
			ЗагрузитьФайл();
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьФайл()
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогВыбораФайла.Фильтр = "(*.xls;*xlsx;*xlsb)| *.xls;*xlsx;*xlsb"; 
	ДиалогВыбораФайла.ПолноеИмяФайла = "";
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = "Выберите файлы";
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПослеВыбораФайлаДляЗаписи", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПослеВыбораФайлаДляЗаписи(ВыбранныеФайлы, ДопПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив")	Тогда
		ОписаниеФайла = новый ОписаниеПередаваемогоФайла();
		ОписаниеФайла.Имя = ВыбранныеФайлы[0];
		ПомещаемыеФайлы = новый Массив;
		ПомещаемыеФайлы.Добавить(ОписаниеФайла);
		Расширение = Прав(ОписаниеФайла.Имя,СтрДлина(ОписаниеФайла.Имя)-Найти(ОписаниеФайла.Имя,"."));
		Структура = Новый Структура;
		Структура.Вставить("Расширение", Расширение); 
		Оповещение = новый ОписаниеОповещения("ОповещениеПомещениеФайла", ЭтотОбъект, Структура);		
		НачатьПомещениеФайлов(Оповещение, ПомещаемыеФайлы,, Ложь, ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПомещениеФайла(ПомещенныеФайлы, ДопПараметры)Экспорт
	Если ТипЗнч(ПомещенныеФайлы) = Тип("Массив")	Тогда
		НетКомпонентыExcel = Ложь;
		ЗагрузитьИзФайлаНаСервере(ПомещенныеФайлы[0].Хранение, ДопПараметры.Расширение, НетКомпонентыExcel);
		Если НетКомпонентыExcel Тогда
			ЗагрузитьИзФайлаВТабличныйДокумент(ПомещенныеФайлы[0].Хранение, ДопПараметры.Расширение);
		КонецЕсли;

	КонецЕсли; 	
КонецПроцедуры 

&НаСервере
Процедура ЗагрузитьИзФайлаВТабличныйДокумент(АдресФайлаДанных,Розширение)

	мФайл = ПолучитьИзВременногоХранилища(АдресФайлаДанных);
	Имя = ПолучитьИмяВременногоФайла("."+Розширение);
	мФайл.Записать(Имя);

	Попытка
		
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.Прочитать(Имя,СпособЧтенияЗначенийТабличногоДокумента.Текст);
		
		КоличествоСтрок = ТабДок.ВысотаТаблицы;
		КоличествоКолонок = ТабДок.ШиринаТаблицы;	
		Построитель = Новый ПостроительЗапроса;
		
		//Область = ТабДок.Область("R"+НомерПервойСтроки+"C"+НомерПервойКолонки+":R"+ВсегоСтрок+"C"+ВсегоКолонок);
		Область = ТабДок.Область(1,1,КоличествоСтрок,КоличествоКолонок);
		Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(Область);
		Построитель.Выполнить();
		ТЗ = Построитель.Результат.Выгрузить();
		
		УдалитьКолонкиНаСервере();
		Результат.Очистить();
		
		
		МК 			= МассивКолонокНаСервере(КоличествоКолонок);
		ДобавитьКолонкиНаСервере(МК);
		МКП 		= МассивПродолжениеНаСервереДляТЗ(ТЗ,КоличествоСтрок,КоличествоКолонок);
		ТекстСообщения = ЗаполняемТЗНАСервере(МКП, Ложь);
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
		КонецЕсли;
	Исключение
		Сообщить("Не удалось прочитать файл");
	КонецПопытки;

	
КонецПроцедуры // ЗагрузитьИзФайлаВТабличныйДокумент()


Функция МассивПродолжениеНаСервереДляТЗ(ТЗ,КоличествоСтрок,КоличествоКолонок) 
	
	КолонкиТЗ = ТЗ.Колонки;
	
	МассивВнешний = Новый Массив;	
	
	КолПустыхСтрок = 0;
	МассивВнутренний = Новый Массив;
	
	Для каждого Колонка ИЗ КолонкиТЗ Цикл
		МассивВнутренний.Добавить(Колонка.Имя);
	КонецЦикла;
	МассивВнешний.Добавить(МассивВнутренний);
	
	Для сч = 0 По ТЗ.Количество()-1 Цикл
		
		//проверка что мы читаем не пустые строки
		//Колонка1 = Лист.Cells(сч,1).Text;
		//Колонка2 = Лист.Cells(сч,2).Text;
		//Колонка3 = Лист.Cells(сч,3).Text;
		//
		//Если Не ЗначениеЗаполнено(Колонка1) И Не ЗначениеЗаполнено(Колонка2) И Не ЗначениеЗаполнено(Колонка3) Тогда
		//	КолПустыхСтрок = КолПустыхСтрок + 1;
		//КонецЕсли;
		//
		//Если КолПустыхСтрок > 10 Тогда 
		//	Прервать;
		//КонецЕсли;
		//
		
		МассивВнутренний = Новый Массив;
		Для каждого Колонка ИЗ КолонкиТЗ Цикл
			Если Врег(Колонка.Имя) = Врег("НомерСтроки") Тогда
				Продолжить;
			КонецЕсли;
			МассивВнутренний.Добавить(ТЗ[сч][Колонка.Имя]);
		КонецЦикла;
								
		МассивВнешний.Добавить(МассивВнутренний);
		
	КонецЦикла;
	
	Возврат МассивВнешний;

	
КонецФункции


&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере (АдресФайлаДанных,Розширение, НетКомпонентыExcel)
	
	мФайл = ПолучитьИзВременногоХранилища(АдресФайлаДанных);
	Имя = ПолучитьИмяВременногоФайла("."+Розширение);
	мФайл.Записать(Имя);
	
	Попытка 	
		Excel = новый COMОбъект("Excel.Application");
		ДокExcel = Excel.Workbooks.Open(Имя);
		Лист = ДокExcel.Worksheets(1);
	Исключение
		НетКомпонентыExcel = Истина;
		Возврат;
	КонецПопытки;
	
	УдалитьКолонкиНаСервере();
	Результат.Очистить();
	
	МК 			= МассивКолонокНаСервере(Лист.UsedRange.Columns.Count);
	ДобавитьКолонкиНаСервере(МК);
	МКП 		= МассивПродолжениеНаСервере(Лист);
	ДокExcel.Close();
	ТекстСообщения = ЗаполняемТЗНАСервере(МКП);
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция МассивКолонокНаСервере(КолСтолбцов)
	
	//КолСтолбцов = Лист.UsedRange.Columns.Count;
	МассивДляExcel = Новый Массив(КолСтолбцов + 1);
	Для СчСт = 0 По КолСтолбцов Цикл
		Если СчСт = 0 Тогда
			МассивДляExcel[СчСт] = "НомерСтроки";
		Иначе
			МассивДляExcel[СчСт] = "Столбец" + СтрЗаменить(СчСт, Символы.НПП, "");       
		КонецЕсли; 
	КонецЦикла;
	
	Возврат МассивДляExcel;
	
КонецФункции


&НаКлиенте
Процедура СоздатьЗаказыНаДоставку(Команда)
	
	ВозвратОшибкиТЧ = ПроверкаРасчетаСтоимостиТЧ();
	Если  ВозвратОшибкиТЧ тогда
		Возврат;
	Иначе
		
		ОчиститьСообщения();
		Если НЕ ЗначениеЗаполнено(Объект.Манифест) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Укажите реестр загрузки манифеста.";
			Сообщение.Поле 	= "Объект.Манифест";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		
		// Проверка заполнения настройки
		Если НЕ ЗначениеЗаполнено(Объект.Настройка) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Укажите шаблон загрузки манифеста.";
			Сообщение.Поле 	= "Объект.Настройка";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		// Проверка выгрузки манифеста в поле Результат
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Необходимо загрузить данные из файла";
			Сообщение.Поле 	= "Результат";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		// Проверка заполнения диапазона строк
		Если НЕ ЗначениеЗаполнено(СтрокиС) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Поле ""Строки с"" не заполнено";
			Сообщение.Поле = "СтрокиС";
			Сообщение.Сообщить(); 
			Возврат;
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(СтрокиС) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Поле ""Строки по"" не заполнено";
			Сообщение.Поле = "СтрокиПо";
			Сообщение.Сообщить(); 
			Возврат;
		КонецЕсли;
		Если СтрокиС > СтрокиПо Тогда
			Сообщить("Диапазон строк указан неправильно");
			Возврат;
		КонецЕсли;
		//ЭР Несторук С.И. 20.12.2016 15:47:00 {
		Если НЕ ЗначениеЗаполнено(КлючСопоставления) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Пожалуйста, укажите ключ сопоставления";
			Сообщение.Поле = "КлючСопоставления";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		//ЭР Несторук С.И. 20.12.2016 15:47:00 }
		
		НайтиКлючСопоставленияВНастройкеМанифестов();
		
		// Создание новых документов
		СтартНастройки = ES_ОбщегоНазначения.ПолучитьВсеСтартовыеНастройки();
		МассивСообщений = СоздатьНовыйДокументНаСервере(СтартНастройки);
		
				
		// После создания документов
		Если МассивСообщений.Количество() > 0 Тогда
			Для каждого ЭлементМассива Из МассивСообщений Цикл
				Если ТипЗнч(ЭлементМассива) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
					ПоказатьОповещениеПользователя(НСтр("ru = 'Создание:'"), 
					ПолучитьНавигационнуюСсылку(ЭлементМассива),
					Строка(ЭлементМассива),
					БиблиотекаКартинок.Информация32);
					Сообщить("Создан новый " + ЭлементМассива);
				Иначе
					Сообщить(ЭлементМассива);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура ОбновитьДанныеШаблонаНаКлиенте()
	
	ЗаполнитьДаннымиШаблонаМанифеста();
	
	НастройкаКолонок.Параметры.УстановитьЗначениеПараметра("СсылкаНаШаблон", Объект.Настройка);
	Элементы.НастройкаКолонок.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеОФайлеДляЗагрузкиДанных()
	
	ИмяФайла = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайла(Элемент)
	
	ДиалогВыбораФайла			 =	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Заголовок  = "Выберите файл исходных данных";		
	ДиалогВыбораФайла.Фильтр	 = "Microsoft Excel (*.xls;*.xlsx)|*.xls;*.xlsx|";
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ЭтаФорма.ДокументExcel = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
Процедура ЗаполнитьДаннымиШаблонаМанифеста()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ES_НастройкиЗагрузкиМанифестов.УслугаДоставки,
	|	ES_НастройкиЗагрузкиМанифестов.Характеристика,
	|	ES_НастройкиЗагрузкиМанифестов.ВидДоставки,
	|	ES_НастройкиЗагрузкиМанифестов.Контрагент,
	|	ES_НастройкиЗагрузкиМанифестов.ВидЗабора,
	|	ES_НастройкиЗагрузкиМанифестов.Срочность,
	|	ES_НастройкиЗагрузкиМанифестов.УслугаСамовывоза,
	|	ES_НастройкиЗагрузкиМанифестов.БезВыезда,
	|	ES_НастройкиЗагрузкиМанифестов.Договор,
	|	ES_НастройкиЗагрузкиМанифестов.СоздатьСбор,
	|	ES_НастройкиЗагрузкиМанифестов.СтранаОтправитель,
	|	ES_НастройкиЗагрузкиМанифестов.ИндексОтправитель,
	|	ES_НастройкиЗагрузкиМанифестов.ГородОтправитель,
	|	ES_НастройкиЗагрузкиМанифестов.ОбластьОтправитель,
	|	ES_НастройкиЗагрузкиМанифестов.Отправитель,
	|	ES_НастройкиЗагрузкиМанифестов.УлицаОтправитель,
	|	ES_НастройкиЗагрузкиМанифестов.ДомОтправитель,
	|	ES_НастройкиЗагрузкиМанифестов.КорпусОтправитель,
	|	ES_НастройкиЗагрузкиМанифестов.СтроениеОтправитель,
	|	ES_НастройкиЗагрузкиМанифестов.КвартираОтправитель,
	|	ES_НастройкиЗагрузкиМанифестов.Адрес,
	//Почкун 15.05.2019 +
	|	ES_НастройкиЗагрузкиМанифестов.ДеньДоставки КАК ДеньДоставки,
	|	ES_НастройкиЗагрузкиМанифестов.ДеньСбора КАК ДеньСбора
	//Почкун 15.05.2019 -
	|ИЗ
	|	Справочник.ES_НастройкиЗагрузкиМанифестов КАК ES_НастройкиЗагрузкиМанифестов
	|ГДЕ
	|	ES_НастройкиЗагрузкиМанифестов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Настройка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Выборка.Следующий();
		Номенклатура 		= Выборка.УслугаДоставки;
		Характеристика 		= Выборка.Характеристика;
		ВидДоставки 		= Выборка.ВидДоставки;
		Заказчик 			= Выборка.Контрагент;
		ВидЗабора 			= Выборка.ВидЗабора;
		Договор				= Выборка.Договор;
		БезВыезда			= Выборка.БезВыезда;
		СоздатьСбор			= Выборка.СоздатьСбор;
		Отправитель  		= Выборка.Отправитель;
		Адрес			 	= Выборка.Адрес;
		ГородОтправитель	= Выборка.ГородОтправитель;
		Срочность			= Выборка.Срочность;
		УслугаСамовывоза	= Выборка.УслугаСамовывоза;
		//Почкун 14.05.2019 +
		ДеньДоставки		= Выборка.ДеньДоставки;
		ДеньСбора			= Выборка.ДеньСбора;		
		//Почкун 14.05.2019 -

		
	Иначе
		// Очищаем реквизиты
		Номенклатура 	= Неопределено;
		Характеристика 	= Неопределено;
		ВидДоставки 	= Неопределено;
		Заказчик 		= Неопределено;
		ВидЗабора 		= Неопределено;
		Срочность		= Неопределено;
		УслугаСамовывоза = Неопределено;
		Договор  = Неопределено;
		БезВыезда = Неопределено;
		СоздатьСбор = Неопределено;
		Отправитель  		= Неопределено;
		Адрес 	= Неопределено;
		ГородОтправитель = Неопределено;
		ДеньДоставки		= Неопределено;
		ДеньСбора			= Неопределено;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуБезЛишнихПробелов(ВходящаяСтрока)
	
	СтрокаРезультат = ВходящаяСтрока;
	Пока Найти(СтрокаРезультат, "  ") > 0 Цикл
		СтрокаРезультат = стрЗаменить(СтрокаРезультат, "  ", " ");
	КонецЦикла;
	
	Возврат СтрокаРезультат;
	
КонецФункции 

&НаСервереБезКонтекста
Функция ПреобразоватьСтрокуВоВремя(СтрокаВремени)
	
	ВозвращаемаяСтруктура = Новый Структура("ВремяС, ВремяПо", '00010101090000', '00010101180000');
	
	Если ЗначениеЗаполнено(СтрокаВремени) Тогда
		
		РазделителМеждуДатами = Найти(СтрокаВремени, "-");
		Если РазделителМеждуДатами > 0 Тогда
			// Время С
			СтрокаВремениС = СокрЛП(Сред(СтрокаВремени, 1, РазделителМеждуДатами - 1));
			РазделительВремяС = Найти(СтрокаВремениС, ":");
			Если РазделительВремяС > 0 Тогда
				ЧасыС = СокрЛП(Сред(СтрокаВремениС, 1, РазделительВремяС - 1));
				ЧасыС = ?(СтрДлина(ЧасыС) = 1, "0" + ЧасыС, ЧасыС);
				МинутыС = СокрЛП(Сред(СтрокаВремениС, РазделительВремяС + 1, СтрДлина(СтрокаВремениС)));
			КонецЕсли; 
			
			Попытка
				ВозвращаемаяСтруктура.Вставить("ВремяС", Дата("00010101" + ЧасыС + МинутыС));
				ВозвращаемаяСтруктура.Вставить("ВремяПо", Дата("00010101" + ЧасыС + МинутыС));
			Исключение
				Сообщить("Неверный формат времени в документе загрузки");
			КонецПопытки;
			
			// Время ПО
			СтрокаВремениПо = СокрЛП(Сред(СтрокаВремени, РазделителМеждуДатами + 1, СтрДлина(СтрокаВремени)));
			РазделительВремяПо = Найти(СтрокаВремениПо, ":");
			Если РазделительВремяПо > 0 Тогда
				ЧасыПо = СокрЛП(Сред(СтрокаВремениПо, 1, РазделительВремяПо - 1));
				ЧасыПо = ?(СтрДлина(ЧасыПо) = 1, "0" + ЧасыПо, ЧасыПо);
				МинутыПо = СокрЛП(Сред(СтрокаВремениПо, РазделительВремяПо + 1, СтрДлина(СтрокаВремениПо)));
				Попытка
					ВозвращаемаяСтруктура.Вставить("ВремяПо", Дата("00010101" + ЧасыПо + МинутыПо));
				Исключение
					Сообщить("Неверный формат времени в документе загрузки");
				КонецПопытки;
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьСтрокуВДату(ТекДата)
	
	Если ТипЗнч(ТекДата) = Тип("Дата") Тогда
		Возврат ТекДата;
	КонецЕсли;
	
	День = Сред(ТекДата, 1, 2);
	Месяц = Сред(ТекДата, 4, 2);
	Год = Сред(ТекДата, 7, 4);
	Год = ?(СтрДлина(Год) = 2, "20" + Год, Год);
	Попытка
		ТекДата = Дата(""+Год+Месяц+День);
	Исключение
		ТекДата = "";
	КонецПопытки;
	
	Возврат ТекДата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции загрузки данных из документа в обработку

&НаСервере
Процедура УдалитьКолонкиНаСервере() Экспорт
	
	МассивУдаляемыхРеквизитов = ЭтаФорма.ПолучитьРеквизиты("Результат");
	Если МассивУдаляемыхРеквизитов.Количество() > 0 Тогда
		
		ПутьКРеквизитам = Новый Массив;
		
		Для Каждого Элемент Из МассивУдаляемыхРеквизитов Цикл
			ПутьКДанным =  Элемент.Путь+"."+Элемент.Имя;
			ПутьКРеквизитам.Добавить(ПутьКДанным);
		КонецЦикла;
		
		ИзменитьРеквизиты(,ПутьКРеквизитам);
		
	КонецЕсли;	
	
КонецПроцедуры 

&НаКлиенте
Функция МассивКолонокНаКлиенте(Лист)
	
	КолСтолбцов = Лист.UsedRange.Columns.Count;
	МассивДляExcel = Новый Массив(КолСтолбцов + 1);
	Для СчСт = 0 По КолСтолбцов Цикл
		Если СчСт = 0 Тогда
			МассивДляExcel[СчСт] = "НомерСтроки";
		Иначе
			МассивДляExcel[СчСт] = "Столбец" + СтрЗаменить(СчСт, Символы.НПП, "");       
		КонецЕсли; 
	КонецЦикла;
	
	Возврат МассивДляExcel;
	
КонецФункции

&НаСервере
Процедура ДобавитьКолонкиНаСервере(МК)

	ОписаниеТиповДляРеквизита = Новый ОписаниеТипов("Строка");
	
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого ЭлементМассива Из МК Цикл
		Если ЭлементМассива = "НомерСтроки" Тогда
			НовыйРеквизит = Новый РеквизитФормы(ЭлементМассива,Новый ОписаниеТипов("Число"),"Результат",ЭлементМассива);
		Иначе
			НовыйРеквизит = Новый РеквизитФормы(ЭлементМассива,ОписаниеТиповДляРеквизита,"Результат",ЭлементМассива);
		КонецЕсли; 
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	КонецЦикла;	

	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	Для Каждого ЭлементМассива Из МК Цикл
		Если Элементы.Найти(ЭлементМассива) = Неопределено Тогда
			НовыйЭлемент = Элементы.Добавить(ЭлементМассива,Тип("ПолеФормы"),Элементы.Результат);
			НовыйЭлемент.ПутьКДанным = "Результат."+ЭлементМассива;
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		КонецЕсли;

	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Функция МассивПродолжение(Лист)
	
	КолСтрок = Лист.UsedRange.Rows.Count;
	КолСтолбцов = Лист.UsedRange.Columns.Count;
	
	МассивВнешний = Новый Массив;	
	
	КолПустыхСтрок = 0;
	
	Для сч = 1 По КолСтрок + 1 Цикл
		
		//проверка что мы читаем не пустые строки
		Колонка1 = Лист.Cells(сч,1).Text;
		Колонка2 = Лист.Cells(сч,2).Text;
		Колонка3 = Лист.Cells(сч,3).Text;
		
		Если Не ЗначениеЗаполнено(Колонка1) И Не ЗначениеЗаполнено(Колонка2) И Не ЗначениеЗаполнено(Колонка3) Тогда
			КолПустыхСтрок = КолПустыхСтрок + 1;
		КонецЕсли;
		
		Если КолПустыхСтрок > 10 Тогда 
			Прервать;
		КонецЕсли;
		//
		
		МассивВнутренний = Новый Массив;
		Для СчСт = 0 По КолСтолбцов Цикл
			
			МассивВнутренний.Добавить(Лист.Cells(сч,СчСт + 1).Text);
			
		КонецЦикла;
		
		МассивВнешний.Добавить(МассивВнутренний);
		
	КонецЦикла;
	
	Возврат МассивВнешний;
	
КонецФункции

&НаСервере
Функция ЗаполняемТЗНАСервере(МКП, ЗагрузкаExcel = Истина)
	
	ТЗ = ДанныеФормыВЗначение(Результат,Тип("ТаблицаЗначений"));
	
	НомерСтроки = 0;
	Для Каждого Элемент Из МКП Цикл
		НомерСтроки = НомерСтроки + 1;
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.НомерСтроки = НомерСтроки;
		Если ЗагрузкаExcel = Истина Тогда
			ГраницаМассива = Элемент.ВГраница();
		Иначе
			ГраницаМассива = Элемент.ВГраница() + 1;
		КонецЕсли;
		Для Сч = 1 По ГраницаМассива Цикл
			НоваяСтрока[Сч] = Элемент[Сч-1];
		КонецЦикла;
	КонецЦикла;
	
	// удалить из ТЗ пустые колонки
	СписокКолонок = Новый СписокЗначений;  // колонки которые должны остаться
	Для каждого Колонка Из ТЗ.Колонки Цикл
		ВыгруженнаяКолонка = ТЗ.ВыгрузитьКолонку(Колонка);
		Для каждого Строка Из ВыгруженнаяКолонка Цикл
			Если ЗначениеЗаполнено(Строка) И СписокКолонок.НайтиПоЗначению(Строка) = Неопределено Тогда
				СписокКолонок.Добавить(Колонка.Имя);
				Прервать;
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла; 
	
	ИндексКолонки = ТЗ.Колонки.Количество() - 1;
	Пока ИндексКолонки >= 0 Цикл
		Если СписокКолонок.НайтиПоЗначению(ТЗ.Колонки[ИндексКолонки].Имя) = Неопределено Тогда
			ТЗ.Колонки.Удалить(ТЗ.Колонки[ИндексКолонки]);
		КонецЕсли; 
		ИндексКолонки = ИндексКолонки - 1;
	КонецЦикла; 
	
	// изменяем Имя колонок
	НомерКолонки = 0;
	Для каждого Колонка Из ТЗ.Колонки Цикл
		Если Колонка.Имя <> "НомерСтроки" Тогда
			НомерКолонки = НомерКолонки + 1;
			Колонка.Имя = "Столбец" + НомерКолонки;
		КонецЕсли; 
	КонецЦикла; 

	УдалитьПустыеКолонкиНаСервере(ТЗ.Колонки.Количество());
	
	ТекстСообщения = "";
	
	ЗначениеВРеквизитФормы(ТЗ,"Результат");
	
	Возврат ТекстСообщения;
		
КонецФункции 

&НаСервере
Процедура УдалитьПустыеКолонкиНаСервере(ПерваяКолонки)
	
	МассивУдаляемыхРеквизитов = ЭтаФорма.ПолучитьРеквизиты("Результат");
	
	ПутьКРеквизитам = Новый Массив;
	
	УдалятьКолонки = Ложь;
	Для Каждого Элемент Из МассивУдаляемыхРеквизитов Цикл
		Если Элемент.Имя = "Столбец" + ПерваяКолонки Тогда
			УдалятьКолонки = Истина;
		КонецЕсли;
		Если УдалятьКолонки Тогда
			ПутьКДанным =  Элемент.Путь+"."+Элемент.Имя;
			ПутьКРеквизитам.Добавить(ПутьКДанным);
		КонецЕсли; 
	КонецЦикла;
	
	ИзменитьРеквизиты(,ПутьКРеквизитам);
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции создания заказов

&НаСервере
Функция СоздатьНовыйДокументНаСервере(СтартНастройки)
	
	МассивСообщений = Новый Массив;
	
	// Получаем настройки из спр Настройки манифестов
	ТаблицаНастроек = Новый ТаблицаЗначений;
	СоответствиеНастроек = Новый Соответствие;
	ПолучитьНастройкиМанифеста(ТаблицаНастроек, СоответствиеНастроек);
	
	// Если не указан столбец для реквизита "Получатель", документы не создаются
	СтрокаПолучатель = ТаблицаНастроек.Найти("Получатель", "РеквизитЗаказа");
	
	Если СтрокаПолучатель = Неопределено Тогда
		МассивСообщений.Добавить("В шаблоне не указан столбец для заполнения реквизита ""Получатель""");
		Возврат МассивСообщений;
	КонецЕсли;
	
	// Получаем значения из шапки настройки
	//ЭР Несторук С.И. 06.04.2017 19:53:50 {
	УслугаСамовывоза 		= ?(СоответствиеНастроек.Получить("УслугаСамовывоза") 		= Неопределено, "", СоответствиеНастроек.Получить("УслугаСамовывоза"));
	Если УслугаСамовывоза = "" Тогда
		МассивСообщений.Добавить("В шаблоне не указана услуга самовывоза");
		Возврат МассивСообщений;
	КонецЕсли;
	УслугаДоставки 			= ?(СоответствиеНастроек.Получить("УслугаДоставки") 		= Неопределено, "", СоответствиеНастроек.Получить("УслугаДоставки"));
	Если УслугаДоставки = "" Тогда
		МассивСообщений.Добавить("В шаблоне не указана услуга доставки");
		Возврат МассивСообщений;
	КонецЕсли;
	//}ЭР Несторук С.И.
	Характеристика 			= ?(СоответствиеНастроек.Получить("Характеристика") 		= Неопределено, "", СоответствиеНастроек.Получить("Характеристика"));
	мВидДоставки 			= ?(СоответствиеНастроек.Получить("ВидДоставки") 			= Неопределено, "", СоответствиеНастроек.Получить("ВидДоставки"));
	ТекЗаказчик 			= ?(СоответствиеНастроек.Получить("Контрагент") 			= Неопределено, "", СоответствиеНастроек.Получить("Контрагент"));
	мВидЗабора 				= ?(СоответствиеНастроек.Получить("ВидЗабора") 				= Неопределено, "", СоответствиеНастроек.Получить("ВидЗабора"));
	КонтрагентОтветственный = ?(СоответствиеНастроек.Получить("КонтрагентОтветственный")= Неопределено, "", СоответствиеНастроек.Получить("КонтрагентОтветственный"));
	КонтрагентВидОплаты 	= ?(СоответствиеНастроек.Получить("КонтрагентВидОплаты") 	= Неопределено, "", СоответствиеНастроек.Получить("КонтрагентВидОплаты"));
	КонтрагентПлательщик 	= ?(СоответствиеНастроек.Получить("КонтрагентПлательщик") 	= Неопределено, "", СоответствиеНастроек.Получить("КонтрагентПлательщик"));
	мСрочность			 	= ?(СоответствиеНастроек.Получить("Срочность") 				= Неопределено, "", СоответствиеНастроек.Получить("Срочность"));
	мДоставкаСКлиента		= ?(СоответствиеНастроек.Получить("ДоставкаСКлиента")		= Неопределено, "", СоответствиеНастроек.Получить("ДоставкаСКлиента"));
	Договор					= ?(СоответствиеНастроек.Получить("Договор")= Неопределено, "", СоответствиеНастроек.Получить("Договор"));
	ГородОтправитель		= ?(СоответствиеНастроек.Получить("ГородОтправитель")= Неопределено, "", СоответствиеНастроек.Получить("ГородОтправитель"));
	Отправитель				= ?(СоответствиеНастроек.Получить("Отправитель")= Неопределено, Справочники.Контрагенты.ПустаяСсылка(), СоответствиеНастроек.Получить("Отправитель"));
	Адрес					= ?(СоответствиеНастроек.Получить("Адрес")= Неопределено, "", СоответствиеНастроек.Получить("Адрес"));
	
	//Почкун 15.05.2019  +
	Если ДеньДоставки = Перечисления.ES_ДниДоставки.Завтра Тогда
		ДатаДоставки = ТекущаяДата() + 24*3600;
	ИначеЕсли ДеньДоставки = Перечисления.ES_ДниДоставки.Сегодня Тогда
		ДатаДоставки = ТекущаяДата();
	КонецЕсли;
	Если ДеньСбора = Перечисления.ES_ДниДоставки.Завтра Тогда
		ДатаСбора = ТекущаяДата() + 24*3600;
	ИначеЕсли ДеньСбора = Перечисления.ES_ДниДоставки.Сегодня Тогда
		ДатаСбора = ТекущаяДата();
	КонецЕсли;
	//Почкун 15.05.2019

	
	СтрокаС 				= СтрокиС - 1;
	СтрокаПо 				= СтрокиПо - 1;
	Если Результат.Количество() - 1 < СтрокаПо Тогда
		МассивСообщений.Добавить("Возможно, выбрана неправильная настройка");
		Возврат МассивСообщений;
	КонецЕсли; 	
	
	// Создаем структуру со значениями общих реквизитов для всех документов
	СтруктураОбщихРеквизитов = Новый Структура;
	СтруктураОбщихРеквизитов.Вставить("ДатаДокумента", 			Объект.ДатаДокументаПоУмолчанию);
	СтруктураОбщихРеквизитов.Вставить("Манифест", 				Объект.Манифест);
	СтруктураОбщихРеквизитов.Вставить("ВидДоставки", 			мВидДоставки);
	СтруктураОбщихРеквизитов.Вставить("Заказчик", 				ТекЗаказчик);
	СтруктураОбщихРеквизитов.Вставить("ВидЗабора", 				мВидЗабора);
	СтруктураОбщихРеквизитов.Вставить("КонтрагентОтветственный",КонтрагентОтветственный);
	СтруктураОбщихРеквизитов.Вставить("КонтрагентВидОплаты", 	КонтрагентВидОплаты);
	СтруктураОбщихРеквизитов.Вставить("КонтрагентПлательщик", 	КонтрагентПлательщик);
	СтруктураОбщихРеквизитов.Вставить("ГородОтправитель", 		ГородОтправитель);
	СтруктураОбщихРеквизитов.Вставить("Срочность",				мСрочность);
	СтруктураОбщихРеквизитов.Вставить("ДоставкаСКлиента",		мДоставкаСКлиента);
	СтруктураОбщихРеквизитов.Вставить("КлючСопоставления",		КлючСопоставления); 	
	СтруктураОбщихРеквизитов.Вставить("Договор",				Договор); 
	СтруктураОбщихРеквизитов.Вставить("Отправитель",			Отправитель);
	СтруктураОбщихРеквизитов.Вставить("Адрес",					Адрес);
	//Почкун 15.05.2019 +
	СтруктураОбщихРеквизитов.Вставить("ДатаДоставки",			ДатаДоставки);
	СтруктураОбщихРеквизитов.Вставить("ЗаборДоставитьДо",		ДатаСбора);
	//Почкун 15.05.2019 -
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Организация = СтартНастройки.Организация;
	Иначе
		Организация = Объект.Организация;
	КонецЕсли;	
	
	//Временно убрали склад из загрузки, из шапки заказа на доставку и из стартовых
	Склад = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
		
	СтруктураОбщихРеквизитов.Вставить("Организация",			Организация);
	СтруктураОбщихРеквизитов.Вставить("Склад",					Склад);
	
	ГруппаДляГрузов = СтартНастройки.ГруппаДляГрузов;
		
	ЗаполнитьСтруктуруОбщихРеквизитов(СтруктураОбщихРеквизитов,СтартНастройки);
	
	Ответственный 	= ?(ЗначениеЗаполнено(СтруктураОбщихРеквизитов.КонтрагентОтветственный), СтруктураОбщихРеквизитов.КонтрагентОтветственный, СтруктураОбщихРеквизитов.ОтветственныйПоУмолчанию);
	ВидОплаты 		= ?(ЗначениеЗаполнено(СтруктураОбщихРеквизитов.КонтрагентВидОплаты), СтруктураОбщихРеквизитов.КонтрагентВидОплаты, СтруктураОбщихРеквизитов.ВидОплатыПоУмолчанию);
	Плательщик 		= ?(ЗначениеЗаполнено(СтруктураОбщихРеквизитов.КонтрагентПлательщик), СтруктураОбщихРеквизитов.КонтрагентПлательщик, СтруктураОбщихРеквизитов.ПлательщикПоУмолчанию);
	// Создаем массив имен реквизитов документа, которые будут заполняться из Excel
	СтруктураРеквизитовXL = СоздатьСтруктуруРеквизитовXL();
	
	СтруктураКолонокРеквизитовXL = ЗаполнитьСтруктуруКолонокРеквизитов(ТаблицаНастроек, СтруктураРеквизитовXL);
	
	ТаблицаНовыхЗаказов = ДобавитьКолонкиВТаблицуНовыхЗаказов();
	
	СтруктураКодовСрочности = ПолучитьСтруктуруКодовСрочности(СтартНастройки);
	СтруктураКодовВидовДоставки = ПолучитьСтруктуруКодовВидовДоставки(СтартНастройки);
	СоздаватьЗабор = Ложь;
	
	Для НомСтроки = СтрокаС По СтрокаПо Цикл
		ТекСтрока = Результат.Получить(НомСтроки);
		
		СтруктураТекДанных = ПолучитьТекущиеДанные(ТекСтрока, СтруктураКолонокРеквизитовXL, СтруктураОбщихРеквизитов, МассивСообщений, ГруппаДляГрузов, СтруктураКодовСрочности, СтруктураКодовВидовДоставки );
		
		Если НЕ ТипЗнч(СтруктураТекДанных) = Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаНовыхЗаказов.Добавить();
		НоваяСтрока.Автор 						= СтруктураОбщихРеквизитов.Пользователь;
		НоваяСтрока.ВидОперации 				= СтруктураОбщихРеквизитов.ВидОперации; 
		НоваяСтрока.Дата 						= ?(СтруктураОбщихРеквизитов.ДатаДокумента = Дата("00010101"), ТекущаяДата(),СтруктураОбщихРеквизитов.ДатаДокумента) ;
		
		НоваяСтрока.Комментарий 				= СтруктураТекДанных.Комментарий;
		
		Если ЗначениеЗаполнено(СтруктураОбщихРеквизитов.Заказчик) Тогда
			НоваяСтрока.Контрагент 				= СтруктураОбщихРеквизитов.Заказчик;
		ИначеЕсли ЗначениеЗаполнено(СтруктураТекДанных.Заказчик) Тогда
			НоваяСтрока.Контрагент 					= СтруктураТекДанных.Заказчик;
		КонецЕсли;
		
		НоваяСтрока.Организация 				= СтруктураОбщихРеквизитов.Организация;
		НоваяСтрока.ES_Склад					= СтруктураОбщихРеквизитов.Склад;
		НоваяСтрока.Ответственный 				= Ответственный;
		НоваяСтрока.СтруктурнаяЕдиницаПродажи 	= СтруктураОбщихРеквизитов.Подразделение;				
		НоваяСтрока.ES_АдресДоставки 			= СтруктураТекДанных.ПолныйАдресДоставки;		
		НоваяСтрока.ES_АдресДоставкиДолгота 	= СтруктураТекДанных.АдресДоставкиДолгота;
		НоваяСтрока.ES_АдресДоставкиШирота 		= СтруктураТекДанных.АдресДоставкиШирота;	
		
		Если ЗначениеЗаполнено(СтруктураОбщихРеквизитов.ВидДоставки) Тогда
			НоваяСтрока.ES_ВидДоставки 				= СтруктураОбщихРеквизитов.ВидДоставки;
		ИначеЕсли  ЗначениеЗаполнено(СтруктураТекДанных.ВидДоставки) Тогда
			НоваяСтрока.ES_ВидДоставки 				= СтруктураТекДанных.ВидДоставки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураОбщихРеквизитов.ВидЗабора) Тогда
			НоваяСтрока.ES_ВидЗабора 				= СтруктураОбщихРеквизитов.ВидЗабора;
		ИначеЕсли  ЗначениеЗаполнено(СтруктураТекДанных.ВидЗабора) Тогда
			НоваяСтрока.ES_ВидЗабора 				= СтруктураТекДанных.ВидЗабора;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураОбщихРеквизитов.Срочность) Тогда
			НоваяСтрока.ES_СрочностьДоставки 				= СтруктураОбщихРеквизитов.Срочность;
		ИначеЕсли  ЗначениеЗаполнено(СтруктураТекДанных.Срочность) Тогда
			НоваяСтрока.ES_СрочностьДоставки 				= СтруктураТекДанных.Срочность;
		КонецЕсли;
		
		НоваяСтрока.ES_ВремяДоставкиС 			= СтруктураТекДанных.ВремяС;
		НоваяСтрока.ES_ВремяДоставкиПо 			= СтруктураТекДанных.ВремяПо;
		НоваяСтрока.ES_ВхНакладная 				= СтруктураТекДанных.ВхНакладная;
		
		Если ДатаДоставки = Неопределено Тогда
			НоваяСтрока.ES_ДатаДоставки					= СтруктураТекДанных.ДатаДоставки;
		Иначе
			НоваяСтрока.ES_ДатаДоставки 				= ДатаДоставки;
		КонецЕсли;
		НоваяСтрока.ДатаОтгрузки 				= НоваяСтрока.ES_ДатаДоставки;

		НоваяСтрока.ES_КоличествоМест 			= СтруктураТекДанных.КоличествоМест;
		
		Если ЗначениеЗаполнено(СтруктураОбщихРеквизитов.ЗаказчикКонтЛицо) Тогда
			НоваяСтрока.ES_ЗаказчикКонтактноеЛицо 				= СтруктураОбщихРеквизитов.ЗаказчикКонтЛицо;
		ИначеЕсли ЗначениеЗаполнено(СтруктураТекДанных.ЗаказчикКонтЛицо) Тогда
			НоваяСтрока.ES_ЗаказчикКонтактноеЛицо 				= СтруктураТекДанных.ЗаказчикКонтЛицо;
		КонецЕсли;
		
		НоваяСтрока.ES_ПолучательКонтактноеЛицо = СтруктураТекДанных.ПолучательКонтактноеЛицо;
		НоваяСтрока.ES_НППлан 					= СтруктураТекДанных.НППлан;
		НоваяСтрока.Стоимость 					= СтруктураТекДанных.Стоимость;
		
		Если ЗначениеЗаполнено(СтруктураТекДанных.НомерНакладной) Тогда
			НоваяСтрока.ES_НомерНакладной 			= СтруктураТекДанных.НомерНакладной;
		КонецЕсли;
		
		НоваяСтрока.ES_Манифест 				= СтруктураОбщихРеквизитов.Манифест;
		НоваяСтрока.ES_ОбщийВес 				= СтруктураТекДанных.Вес;
		НоваяСтрока.ES_ОбщийОбъемныйВес 		= СтруктураТекДанных.ВесОбъемный;
		НоваяСтрока.ES_Плательщик 				= Плательщик;
		НоваяСтрока.ES_Получатель 				= СтруктураТекДанных.Получатель;
		
		Если ЗначениеЗаполнено(СтруктураОбщихРеквизитов.ЗаказчикТелефон) Тогда
			НоваяСтрока.ES_ЗаказчикТелефон 				= СтруктураОбщихРеквизитов.ЗаказчикТелефон;
		ИначеЕсли ЗначениеЗаполнено(СтруктураТекДанных.ЗаказчикТелефон) Тогда
			НоваяСтрока.ES_ЗаказчикТелефон 				= СтруктураТекДанных.ЗаказчикТелефон;
		КонецЕсли;		
		
		НоваяСтрока.ES_ПолучательТелефон 		= СтруктураТекДанных.ПолучательТелефон;
		
		Если НоваяСтрока.ES_ВидДоставки	= Перечисления.ES_ВидыДоставки.ДвериДвери Тогда
			НоваяСтрока.ES_Город1				= СтруктураТекДанных.ГородОтправителя; //СтруктураОбщихРеквизитов.ГородОтправитель;
		Иначе
			НоваяСтрока.ES_Город1				= СтруктураОбщихРеквизитов.ГородОтправитель;
		КонецЕсли;
		
		НоваяСтрока.ES_АдресДоставкиГород		= СтруктураТекДанных.ГородДоставки;
		НоваяСтрока.ES_Направление          	= СтруктураТекДанных.Направление;
		НоваяСтрока.ES_ВнутризональныйКоэф  	= СтруктураТекДанных.ВнутризональныйКоэффициент;
		НоваяСтрока.ES_ЗонаДоставки		    	= СтруктураТекДанных.ЗонаДоставки;
		НоваяСтрока.Договор				    	= ?(НЕ ЗначениеЗаполнено(СтруктураТекДанных.Договор),СтруктураОбщихРеквизитов.Договор,СтруктураТекДанных.Договор);
		НоваяСтрока.ES_СрокДоставки				= СтруктураТекДанных.СрокДоставки;
		НоваяСтрока.ES_АдресДоставкиСтрана      = СтруктураТекДанных.СтранаПолучатель;
		НоваяСтрока.ES_АдресДоставкиИндекс      = СтруктураТекДанных.ИндексПолучатель;
		НоваяСтрока.ES_ОбластьПолучатель      	= СтруктураТекДанных.ОбластьПолучатель;
		НоваяСтрока.ES_АдресДоставкиУлица    	= СтруктураТекДанных.УлицаПолучатель;
		НоваяСтрока.ES_АдресДоставкиДом			=  СтруктураТекДанных.ДомПолучатель;
		НоваяСтрока.ES_АдресДоставкиСтроение 	= СтруктураТекДанных.СтроениеПолучатель;
		НоваяСтрока.ES_АдресДоставкиКорпус 		= СтруктураТекДанных.КорпусПолучатель; 
		НоваяСтрока.ES_АдресДоставкиОбласть 	= СтруктураТекДанных.ОбластьПолучатель;
		НоваяСтрока.ES_АдресДоставкиКвартира 	= СтруктураТекДанных.КвартираПолучатель;
		НоваяСтрока.Длина 						= СтруктураТекДанных.Длина;
		НоваяСтрока.Ширина 						= СтруктураТекДанных.Ширина;
		НоваяСтрока.Высота 						= СтруктураТекДанных.Высота;  		
		НоваяСтрока.ES_ЗаборСтранаОтправитель  	= СтруктураТекДанных.ЗаборСтранаОтправитель;
		НоваяСтрока.ES_ЗаборОбластьОтправитель  = СтруктураТекДанных.ЗаборОбластьОтправитель;
		НоваяСтрока.ES_ЗаборИндексОтправитель  	= СтруктураТекДанных.ЗаборИндексОтправитель;
		НоваяСтрока.ES_ЗаборАдресОтправитель 	= СтруктураТекДанных.ЗаборУлицаОтправитель; 
		НоваяСтрока.ES_АдресЗаборДом 			= СтруктураТекДанных.ЗаборДомОтправитель;   
		НоваяСтрока.ES_АдресЗаборСтроение 		= СтруктураТекДанных.ЗаборСтроениеОтправитель;
		НоваяСтрока.ES_АдресЗаборКорпус 		= СтруктураТекДанных.ЗаборКорпусОтправитель;
		НоваяСтрока.ES_АдресЗаборКвартира 		= СтруктураТекДанных.ЗаборКвартираОтправитель;
		НоваяСтрока.ES_ЗаборАдрес 				= СтруктураТекДанных.ЗаборПолныйАдрес;
		
		Если ПустаяСтрока(НоваяСтрока.ES_ЗаборАдрес) Тогда
			НоваяСтрока.ES_ЗаборАдрес 			=  ЗаполнитьES_АдресДоставки(НоваяСтрока.ES_ЗаборИндексОтправитель,НоваяСтрока.ES_ЗаборОбластьОтправитель,НоваяСтрока.ES_Город1,НоваяСтрока.ES_ЗаборАдресОтправитель,НоваяСтрока.ES_АдресЗаборДом,НоваяСтрока.ES_АдресЗаборСтроение,НоваяСтрока.ES_АдресЗаборКорпус,НоваяСтрока.ES_АдресЗаборКвартира);
		КонецЕсли;
		
		Если ПустаяСтрока(НоваяСтрока.ES_ЗаборАдрес) Тогда
			НоваяСтрока.ES_ЗаборАдрес = СтруктураОбщихРеквизитов.Адрес;
		КонецЕсли;
		
		НоваяСтрока.ES_ЗаборАдресДолгота 		= СтруктураТекДанных.ЗаборАдресДолгота;
		НоваяСтрока.ES_ЗаборАдресШирота 		= СтруктураТекДанных.ЗаборАдресШирота;
		
		Если БезВыезда ИЛИ СоздатьСбор Тогда
			НоваяСтрока.ES_ЗаборДата = ТекущаяДата();
		Иначе			
			Если ДатаСбора = Неопределено Тогда
				НоваяСтрока.ES_ЗаборДата					= СтруктураТекДанных.ЗаборДоставитьДо;
			Иначе
				НоваяСтрока.ES_ЗаборДата					= ДатаСбора;
			КонецЕсли;	
		КонецЕСли;
		
		НоваяСтрока.ES_ЗаборОтправитель 		= СтруктураТекДанных.ЗаборОтправитель;
		НоваяСтрока.ES_ЗаборКонтактноеЛицо 		= СтруктураТекДанных.ЗаборКонтактноеЛицо;
		НоваяСтрока.ES_ЗаборТелефон 			= СтруктураТекДанных.ЗаборТелефон;
		НоваяСтрока.ES_ЗаборВремяС				= СтруктураТекДанных.ЗаборВремяС;
		НоваяСтрока.ES_ЗаборВремяПо				= СтруктураТекДанных.ЗаборВремяПо;
		НоваяСтрока.ES_ПолучательРегион			= СтруктураТекДанных.ПолучательРегион;
		НоваяСтрока.ES_ПолучательРегионРасстояние	= СтруктураТекДанных.ПолучательРегионРасстояние;
		НоваяСтрока.ES_ЗаборРегион				= СтруктураТекДанных.ЗаборРегион;
		НоваяСтрока.ES_ЗаборРегионРасстояние	= СтруктураТекДанных.ЗаборРегионРасстояние;
		НоваяСтрока.ES_ТипГруза					= СтруктураТекДанных.ТипГруза;
		НоваяСтрока.ES_ОбьявленнаяСтоимость		= СтруктураТекДанных.ОбьявленнаяСтоимость;
		НоваяСтрока.ES_ПлательщикПереключатель 	= Плательщик;
		НоваяСтрока.ES_ПроцентСтраховки			= СтруктураОбщихРеквизитов.ПроцентСтраховки;
		НоваяСтрока.ES_ЗаборКомментарий			= СтруктураТекДанных.ПримечаниеЗабор;
		НоваяСтрока.КодТовара					= СтруктураТекДанных.КодТовара;
		НоваяСтрока.Товар					 	= СтруктураТекДанных.Товар;
		НоваяСтрока.КоличествоТовара			= СтруктураТекДанных.КоличествоТовара;
		НоваяСтрока.СтоимостьТовара				= СтруктураТекДанных.СтоимостьТовара;
		НоваяСтрока.ES_ВидОплаты				= СтруктураТекДанных.ВидОплаты;
		НоваяСтрока.ОбьявСтоимостьТовара		= СтруктураТекДанных.ОбьявСтоимостьТовара;
		НоваяСтрока.ES_ЧекНаОбщуюСумму			= СтруктураТекДанных.ЧекНаОбщуюСумму;
		НоваяСтрока.ES_ЗачетНП					= СтруктураТекДанных.ЗачетНП;
		
		Если СтруктураОбщихРеквизитов.ВидДоставки = Перечисления.ES_ВидыДоставки.Самовывоз 
			ИЛИ СтруктураТекДанных.ВидДоставки = Перечисления.ES_ВидыДоставки.Самовывоз Тогда
			Если ЗначениеЗаполнено(СтруктураТекДанных.СкладПолучатель) Тогда
				НоваяСтрока.ES_СкладДоставки 			=	СтруктураТекДанных.СкладПолучатель;
				НоваяСтрока.ES_АдресСкладаДоставки      = 	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СтруктураТекДанных.СкладПолучатель,
				Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы,ТекущаяДата());
			Иначе
				НоваяСтрока.ES_СкладДоставки 			=	СтруктураОбщихРеквизитов.Склад;
				НоваяСтрока.ES_АдресСкладаДоставки      = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СтруктураОбщихРеквизитов.Склад,
				Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы,ТекущаяДата());
				
			КонецЕсли;
		КонецЕсли;
		
		Если НоваяСтрока.ES_ВидДоставки = Перечисления.ES_ВидыДоставки.СкладСклад Тогда
			НоваяСтрока.ES_Терминал					=   СтруктураТекДанных.СкладПолучатель;
		КонецЕсли;
		
		НоваяСтрока.ES_Предоплачен 				= СтруктураТекДанных.Предоплачен;
		НоваяСтрока.ES_Объем 					= СтруктураТекДанных.Объем;
		НоваяСтрока.ДоставкаСКлиента			= ?(ЗначениеЗаполнено(СтруктураОбщихРеквизитов.ДоставкаСКлиента),СтруктураТекДанных.ДоставкаСклиента, 0);
		НоваяСтрока.СтавкаНДС                   = СтруктураТекДанных.СтавкаНДС;
		НоваяСтрока.СуммаНДС                    = СтруктураТекДанных.СуммаНДС;
		НоваяСтрока.ES_ПВЗ						= ?(ЗначениеЗаполнено(СтруктураТекДанных.ПВЗ), СтруктураТекДанных.ПВЗ, Справочники.ES_ПунктыВыдачиЗаказов.ПустаяСсылка());
		НоваяСтрока.ПроверкаНаправлений			= СтруктураТекДанных.ПроверкаНаправлений;
		
		Если НЕ НоваяСтрока.ES_ВидДоставки = Перечисления.ES_ВидыДоставки.ДвериДвери Тогда
			СоздаватьЗабор = Истина;
		КонецЕсли;
	КонецЦикла; 
	
	КолонкаПоиска = ?(СтруктураОбщихРеквизитов.КлючСопоставления = "Номер накладной","ES_НомерНакладной","ES_ВхНакладная");
	
	Запрос = Новый Запрос;
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("ТаблицаНовыхЗаказов",ТаблицаНовыхЗаказов);
	
	Запрос.Текст = "Выбрать 
	|ТЗ."+КолонкаПоиска+", 
	|ТЗ.ES_Манифест,
	|ТЗ.Дата
	|ПОМЕСТИТЬ ВТ
	|ИЗ &ТаблицаНовыхЗаказов КАК ТЗ";
	Запрос.Выполнить();
	
	//Запрос.Текст = "ВЫБРАТЬ
	//|	ВТ."+КолонкаПоиска+",
	//|	isnull(ЗаказПокупателя.Ссылка,Значение(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК Ссылка,
	//|	ЗаказПокупателя.ПометкаУдаления КАК ПометкаУдаления
	//|ИЗ
	//|	ВТ КАК ВТ
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
	//|ПО ВТ."+КолонкаПоиска+" = ЗаказПокупателя."+КолонкаПоиска+"
	//|И ВТ.ES_Манифест = ЗаказПокупателя.ES_Манифест
	//|И ЗаказПокупателя.Контрагент = &Контрагент
	//|И (НАЧАЛОПЕРИОДА(ВТ.Дата, НЕДЕЛЯ) = НАЧАЛОПЕРИОДА(ЗаказПокупателя.Дата, НЕДЕЛЯ))
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ВТ."+КолонкаПоиска+",
	//|	isnull(ЗаказПокупателя.Ссылка,Значение(Документ.ЗаказПокупателя.ПустаяСсылка)),
	//|	ЗаказПокупателя.ПометкаУдаления";
	//Запрос.УстановитьПараметр("Дата",СтруктураОбщихРеквизитов.ДатаДокумента);
	//Запрос.УстановитьПараметр("Контрагент",СоответствиеНастроек.Получить("Контрагент"));
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ЗаказПокупателя.Ссылка, ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК Ссылка,
	|	ЗаказПокупателя.ПометкаУдаления КАК ПометкаУдаления,
	|	ЗаказПокупателя."+КолонкаПоиска+" КАК "+КолонкаПоиска+",
	|	ЗаказПокупателя.ES_Манифест КАК ES_Манифест,
	|	ЗаказПокупателя.Дата КАК Дата
	|ПОМЕСТИТЬ ВТ_ТаблицаЗаказы
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ЗаказПокупателя.Дата, НЕДЕЛЯ) = НАЧАЛОПЕРИОДА(&Дата, НЕДЕЛЯ)
	|	И ЗаказПокупателя.Контрагент = &Контрагент
	|	И НЕ ЗаказПокупателя.ПометкаУдаления
	|	И ЗаказПокупателя.ES_Манифест = &Манифест
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ЗаказПокупателя.Ссылка, ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)),
	|	ЗаказПокупателя.ПометкаУдаления,
	|	ЗаказПокупателя."+КолонкаПоиска+",
	|	ЗаказПокупателя.ES_Манифест,
	|	ЗаказПокупателя.Дата";
	
	Запрос.УстановитьПараметр("Дата",СтруктураОбщихРеквизитов.ДатаДокумента);
	Запрос.УстановитьПараметр("Контрагент",СоответствиеНастроек.Получить("Контрагент"));
	ЗАпрос.УстановитьПараметр("Манифест", СтруктураОбщихРеквизитов.Манифест);
	Запрос.Выполнить();
	
	 Запрос.Текст = "ВЫБРАТЬ
	 |	ЕСТЬNULL(ВТ_ТаблицаЗаказы.Ссылка, ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК Ссылка,
	 |	ВТ_ТаблицаЗаказы.ПометкаУдаления КАК ПометкаУдаления,
	 |	ВТ."+КолонкаПоиска+" КАК "+КолонкаПоиска+"
	 |ИЗ
	 |	ВТ КАК ВТ
	 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаЗаказы КАК ВТ_ТаблицаЗаказы
	 |		ПО ВТ."+КолонкаПоиска+" = ВТ_ТаблицаЗаказы."+КолонкаПоиска+"
	 |			И ВТ.ES_Манифест = ВТ_ТаблицаЗаказы.ES_Манифест
	 |			И (НАЧАЛОПЕРИОДА(ВТ.Дата, НЕДЕЛЯ) = НАЧАЛОПЕРИОДА(ВТ_ТаблицаЗаказы.Дата, НЕДЕЛЯ))";
	 
	 Если ЕстьКлючСопоставленияВНастройке Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС +
		 "
		 |СГРУППИРОВАТЬ ПО
		 |	ВТ."+КолонкаПоиска+",
		 //|	isnull(ВТ_ТаблицаЗаказы.Ссылка,Значение(Документ.ЗаказПокупателя.ПустаяСсылка)),
		 |	ВТ_ТаблицаЗаказы.ПометкаУдаления";
		 
		 Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЕСТЬNULL(ВТ_ТаблицаЗаказы.Ссылка, ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК Ссылка",
		 "Максимум(ЕСТЬNULL(ВТ_ТаблицаЗаказы.Ссылка, ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))) КАК Ссылка");
	 КонецЕсли;
	 
	ТЗДокументы = Запрос.Выполнить().Выгрузить();
	
	Коэффициент = СтартНастройки.Коэффициент;
	
	Если ТипЗНЧ(СтруктураТекДанных) = Тип("Массив") Тогда
		СоздатьСбор = Ложь;
		БезВыезда = Ложь;
		//МассивСообщений.Добавить("Сбор не создан");
	КонецЕсли;   	
	
	//НовыйЗабор = Истина;
	НовыйДокументСбор = Документы.ES_ЗаборГруза.ПустаяСсылка();
	Если (СоздатьСбор = Истина ИЛИ БезВыезда= Истина) И СоздаватьЗабор Тогда    			
		НовыйДокументСбор = СоздатьСборНаСервере(СтруктураОбщихРеквизитов,СтруктураТекДанных,БезВыезда);		
	КонецЕсли;
	//мПерваяСтрока = Истина;
	Для каждого СтрокаДокумента Из ТЗДокументы Цикл
		мПерваяСтрока = Истина;	
		// Создаем, заполняем и записываем реквизиты документа
		ЭтоНовый = СтрокаДокумента.Ссылка.Пустая();
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить(КолонкаПоиска,СтрокаДокумента[КолонкаПоиска]);
		НайтиСтроки = ТаблицаНовыхЗаказов.НайтиСтроки(ПараметрыОтбора);
		Если НайтиСтроки.Количество() > 0 Тогда
			ДанныеШапки = НайтиСтроки[0];			
			Если мПерваяСтрока Тогда
				// определяем документ заполнения
				Если НЕ ЭтоНовый и НЕ СтрокаДокумента.ПометкаУдаления Тогда
					НовыйДокумент = СтрокаДокумента.Ссылка.ПолучитьОбъект();
				Иначе 
					НовыйДокумент = Документы.ЗаказПокупателя.СоздатьДокумент();
				КонецЕсли;
			КонецЕсли;			
			
			мПерваяСтрока = Ложь;
			
			ТекКолонкаПоиска = СтрЗаменить(КолонкаПоиска, "ES_","");		
			мНомерНакладной = ?(ЗначениеЗаполнено(НовыйДокумент.ES_НомерНакладной),НовыйДокумент.ES_НомерНакладной,"");				
			ЗаполнитьЗначенияСвойств(НовыйДокумент, ДанныеШапки);
			НовыйДокумент.ДатаОтгрузки	= ?(НовыйДокумент.ES_ДатаДоставки<> Дата("00010101"),НовыйДокумент.ES_ДатаДоставки, ТекущаяДата());
			
			Если ЭтоНовый = Ложь Тогда
				НовыйДокумент.ES_НомерНакладной = мНомерНакладной;
			КонецЕсли;
			
			ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС(НовыйДокумент);		
			
			ЗаполнитьДокДаннымиКонтрагента(НовыйДокумент);
			
			// Добавить в ТЧ "Товары" Услугу доставки
			// Создаем структуру со значениями для ТЧ Запасы
			СтоимостьУслуги = 0;
			СтруктураУслугиДоставки = Новый Структура;
			СтруктураУслугиДоставки.Вставить("УслугаДоставки", УслугаДоставки);
			СтруктураУслугиДоставки.Вставить("Характеристика", Характеристика);
			СтруктураУслугиДоставки.Вставить("СтоимостьУслуги", СтоимостьУслуги);
			СтруктураУслугиДоставки.СтоимостьУслуги = ДанныеШапки.Стоимость;
			
			// заполним таблицу грузов
			НовыйДокумент.ES_Грузы.Очистить();
			Для СТ_Товары = 0 По НайтиСтроки.Количество() - 1 Цикл
				ДобавитьТоварВТчГрузы(НовыйДокумент,НайтиСтроки[СТ_Товары],Коэффициент);
			КонецЦикла;
			НовыйДокумент.Ширина 		= Макс(НовыйДокумент.ES_Грузы.Итог("Ширина"),ДанныеШапки.Ширина);
			НовыйДокумент.Высота 		= Макс(НовыйДокумент.ES_Грузы.Итог("Высота"),ДанныеШапки.Высота);
			НовыйДокумент.Длина  		= Макс(НовыйДокумент.ES_Грузы.Итог("Длина"),ДанныеШапки.Длина);
			НовыйДокумент.ES_ОбщийВес  	= Макс(НовыйДокумент.ES_Грузы.Итог("Вес"),ДанныеШапки.ES_ОбщийВес);
			НовыйДокумент.ES_ОбщийОбъемныйВес 		= Макс(НовыйДокумент.ES_Грузы.Итог("ОбъемныйВес"),ДанныеШапки.ES_ОбщийОбъемныйВес);
			НовыйДокумент.ES_Объем  	= Макс(НовыйДокумент.ES_Грузы.Итог("Объем"),ДанныеШапки.ES_Объем);
			НовыйДокумент.ES_ОбьявленнаяСтоимость 	= Макс(НовыйДокумент.ES_Грузы.Итог("ОбьявленнаяСтоимость"),ДанныеШапки.ES_ОбьявленнаяСтоимость);
			НовыйДокумент.ES_НППлан		= Макс(НовыйДокумент.ES_Грузы.Итог("НППлан"),ДанныеШапки.ES_НППлан);
			
			
			Если НЕ ИспользоватьТК ИЛИ ЗначениеЗаполнено(СтруктураУслугиДоставки.СтоимостьУслуги) Тогда
				ДобавитьУслугуДоставкиВТчТовары(НовыйДокумент, СтруктураУслугиДоставки);
			Иначе
				ОбновитьСтоимостьДоставкиИДопУслуг(НовыйДокумент,СтартНастройки, МассивСообщений);
			КонецЕсли;
			
			//Если СтрокаДокумента.ДоставкаСКлиента > 0 Тогда			
			//	ДобавитьДоставкуСКлиентаВТЧГрузы(НовыйДокумент,ДанныеШапки, СтруктураОбщихРеквизитов.ДоставкаСКлиента);			
			//КонецЕсли;
			
			НовыйДокумент.ES_ЗаборИзКЛАДР = Ложь;
			НовыйДокумент.ES_ИзКЛАДР = Ложь;
			
			Если НЕ ДанныеШапки.ПроверкаНаправлений И ИспользоватьТК Тогда 
				НовыйДокумент.ES_ДоУточнения = Истина;
				НовыйДокумент.ES_ДанныеОбработанДоУточнения = "" + ПользователиКлиентСервер.ТекущийПользователь() + ", " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ""в"" ЧЧ:мм'");
				Сообщение = "Направление не найдено " + НовыйДокумент.Ссылка;
				Сообщение = СтрЗаменить(Сообщение, "(не проведен)", "");
				МассивСообщений.Добавить(Сообщение);
				//Сообщить("Направление не найдено " + НовыйДокумент.Ссылка);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НовыйДокумент.ES_АдресДоставки) Тогда 
				НовыйДокумент.ES_ДоУточнения = Истина;
				НовыйДокумент.ES_ДанныеОбработанДоУточнения = "" + ПользователиКлиентСервер.ТекущийПользователь() + ", " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ""в"" ЧЧ:мм'");
				Сообщение = "Адрес доставки не заполнен "+НовыйДокумент.Ссылка;
				Сообщение = СтрЗаменить(Сообщение, "(не проведен)", "");
				МассивСообщений.Добавить(Сообщение);

				//Сообщить("Адрес доставки не заполнен "+НовыйДокумент.Ссылка);
			КонецЕсли;
			
			// Сообщить о создании нового документа
			
			Попытка
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
				Если ЭтоНовый Тогда
					МассивСообщений.Добавить(НовыйДокумент.Ссылка);
				Иначе
					МассивСообщений.Добавить("Изменен "+ НовыйДокумент.Ссылка);
				КонецЕсли;
			Исключение
				МассивСообщений.Добавить("Документ с номером накладной """ + мНомерНакладной + """ может содержать ошибки заполнения!");
				Продолжить;
			КонецПопытки;
			
			Если (СоздатьСбор = Истина ИЛИ БезВыезда = Истина) И НЕ НовыйДокумент.ES_ВидДоставки = Перечисления.ES_ВидыДоставки.ДвериДвери Тогда  				
				НайтиСтроки = НовыйДокументСбор.Заказы.НайтиСтроки(Новый Структура("Заказ",НовыйДокумент.Ссылка));
				Если НайтиСтроки.Количество() = 0 Тогда
					ТЧСбор = НовыйДокументСбор.Заказы.Добавить();
					ТЧСбор.Заказ = НовыйДокумент.Ссылка;
				КонецЕсли;
							
			КонецЕСли;
		КонецЕсли;
		
	КонецЦикла; 
	
	Если (СоздатьСбор ИЛИ БезВыезда) И ТипЗнч(НовыйДокументСбор) = Тип("ДокументОбъект.ES_ЗаборГруза") Тогда
		ПересчитатьИтогиВСборе(НовыйДокументСбор);
		Попытка	
			НовыйДокументСбор.Записать(РежимЗаписиДокумента.Проведение);
			МассивСообщений.Добавить("Создан "+ НовыйДокументСбор.Ссылка);
		Исключение				
			НовыйДокументСбор.Записать(РежимЗаписиДокумента.Запись);
			МассивСообщений.Добавить("Документ "+ НовыйДокументСбор.Ссылка+ " может содержать ошибки заполнения!");				
		КонецПопытки;			
	КонецЕсли;

	
	Возврат МассивСообщений;
	
КонецФункции

&НаСервере
Процедура ПолучитьНастройкиМанифеста(ТаблицаНастроек, СоответствиеНастроек)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.Ссылка.Наименование КАК Наименование,
	|	ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.Ссылка.Контрагент КАК Контрагент,
	|	ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.Ссылка.УслугаДоставки КАК УслугаДоставки,
	|	ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.Ссылка.Характеристика КАК Характеристика,
	|	ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.Ссылка.ВидДоставки КАК ВидДоставки,
	|	ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.Ссылка.ВидЗабора КАК ВидЗабора,
	|	ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.ИмяКолонки КАК ИмяКолонки,
	|	ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.РеквизитЗаказа КАК РеквизитЗаказа,
	|	ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.Ссылка.Срочность КАК Срочность,
	|	ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.Ссылка.УслугаСамовывоза КАК УслугаСамовывоза,
	|	ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.Ссылка.ДоставкаСКлиента КАК ДоставкаСКлиента,
	|	ЕСТЬNULL(ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.Ссылка.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Договор,
	|	ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.Ссылка.ГородОтправитель КАК ГородОтправитель,
	|	ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.Ссылка.СтранаОтправитель КАК СтранаОтправитель,
	|	ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.Ссылка.ИндексОтправитель КАК ИндексОтправитель,
	|	ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.Ссылка.УлицаОтправитель КАК УлицаОтправитель,
	|	ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.Ссылка.ДомОтправитель КАК ДомОтправитель,
	|	ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.Ссылка.КорпусОтправитель КАК КорпусОтправитель,
	|	ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.Ссылка.СтроениеОтправитель КАК СтроениеОтправитель,
	|	ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.Ссылка.КвартираОтправитель КАК КвартираОтправитель,
	|	ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.Ссылка.ОбластьОтправитель КАК ОбластьОтправитель,
	|	ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.Ссылка.Отправитель КАК Отправитель,
	|	ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.Ссылка.Адрес КАК Адрес,
	|	ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.Ссылка.ДеньДоставки КАК ДеньДоставки,
	|	ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.Ссылка.ДеньСбора КАК ДеньСбора
	|ПОМЕСТИТЬ ВТ_НастройкиМанифеста
	|ИЗ
	|	Справочник.ES_НастройкиЗагрузкиМанифестов.НастройкаКолонок КАК ES_НастройкиЗагрузкиМанифестовНастройкаКолонок
	|ГДЕ
	|	ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК КонтрагентСсылка,
	|	Контрагенты.Ответственный КАК КонтрагентОтветственный,
	|	Контрагенты.ES_ВидОплаты КАК КонтрагентВидОплаты,
	|	Контрагенты.ES_Плательщик КАК КонтрагентПлательщик
	|ПОМЕСТИТЬ ВТ_ДанныеКонтрагенты
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_НастройкиМанифеста.Контрагент
	|			ИЗ
	|				ВТ_НастройкиМанифеста КАК ВТ_НастройкиМанифеста)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НастройкиМанифеста.Наименование КАК Наименование,
	|	ВТ_НастройкиМанифеста.Контрагент КАК Контрагент,
	|	ВТ_НастройкиМанифеста.УслугаДоставки КАК УслугаДоставки,
	|	ВТ_НастройкиМанифеста.Характеристика КАК Характеристика,
	|	ВТ_НастройкиМанифеста.ВидДоставки КАК ВидДоставки,
	|	ВТ_НастройкиМанифеста.ВидЗабора КАК ВидЗабора,
	|	ВТ_НастройкиМанифеста.ИмяКолонки КАК ИмяКолонки,
	|	ВТ_НастройкиМанифеста.РеквизитЗаказа КАК РеквизитЗаказа,
	|	ЕСТЬNULL(ВТ_ДанныеКонтрагенты.КонтрагентОтветственный, НЕОПРЕДЕЛЕНО) КАК КонтрагентОтветственный,
	|	ЕСТЬNULL(ВТ_ДанныеКонтрагенты.КонтрагентВидОплаты, НЕОПРЕДЕЛЕНО) КАК КонтрагентВидОплаты,
	|	ЕСТЬNULL(ВТ_ДанныеКонтрагенты.КонтрагентПлательщик, НЕОПРЕДЕЛЕНО) КАК КонтрагентПлательщик,
	|	ВТ_НастройкиМанифеста.Срочность КАК Срочность,
	|	ВТ_НастройкиМанифеста.УслугаСамовывоза КАК УслугаСамовывоза,
	|	ВТ_НастройкиМанифеста.ДоставкаСКлиента КАК ДоставкаСКлиента,
	|	ВТ_НастройкиМанифеста.Договор КАК Договор,
	|	ВТ_НастройкиМанифеста.ГородОтправитель КАК ГородОтправитель,
	|	ВТ_НастройкиМанифеста.СтранаОтправитель КАК СтранаОтправитель,
	|	ВТ_НастройкиМанифеста.ИндексОтправитель КАК ИндексОтправитель,
	|	ВТ_НастройкиМанифеста.УлицаОтправитель КАК УлицаОтправитель,
	|	ВТ_НастройкиМанифеста.ДомОтправитель КАК ДомОтправитель,
	|	ВТ_НастройкиМанифеста.КорпусОтправитель КАК КорпусОтправитель,
	|	ВТ_НастройкиМанифеста.СтроениеОтправитель КАК СтроениеОтправитель,
	|	ВТ_НастройкиМанифеста.КвартираОтправитель КАК КвартираОтправитель,
	|	ВТ_НастройкиМанифеста.ОбластьОтправитель КАК ОбластьОтправитель,
	|	ВТ_НастройкиМанифеста.Отправитель КАК Отправитель,
	|	ВТ_НастройкиМанифеста.Адрес КАК Адрес,
	|	ВТ_НастройкиМанифеста.ДеньДоставки КАК ДеньДоставки,
	|	ВТ_НастройкиМанифеста.ДеньСбора КАК ДеньСбора
	|ИЗ
	|	ВТ_НастройкиМанифеста КАК ВТ_НастройкиМанифеста
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеКонтрагенты КАК ВТ_ДанныеКонтрагенты
	|		ПО ВТ_НастройкиМанифеста.Контрагент = ВТ_ДанныеКонтрагенты.КонтрагентСсылка
	|ИТОГИ
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(УслугаДоставки),
	|	МАКСИМУМ(Характеристика),
	|	МАКСИМУМ(ВидДоставки),
	|	МАКСИМУМ(ВидЗабора),
	|	МАКСИМУМ(КонтрагентОтветственный),
	|	МАКСИМУМ(КонтрагентВидОплаты),
	|	МАКСИМУМ(КонтрагентПлательщик),
	|	МАКСИМУМ(Срочность),
	|	МАКСИМУМ(УслугаСамовывоза),
	|	МАКСИМУМ(ДоставкаСКлиента),
	|	МАКСИМУМ(Договор),
	|	МАКСИМУМ(ГородОтправитель),
	|	МАКСИМУМ(СтранаОтправитель),
	|	МАКСИМУМ(ИндексОтправитель),
	|	МАКСИМУМ(УлицаОтправитель),
	|	МАКСИМУМ(ДомОтправитель),
	|	МАКСИМУМ(КорпусОтправитель),
	|	МАКСИМУМ(СтроениеОтправитель),
	|	МАКСИМУМ(КвартираОтправитель),
	|	МАКСИМУМ(ОбластьОтправитель),
	|	МАКСИМУМ(Отправитель),
	|	МАКСИМУМ(Адрес),
	|	МАКСИМУМ(ДеньДоставки),
	|	МАКСИМУМ(ДеньСбора)
	|ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Настройка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаНастроек = РезультатЗапроса.Выгрузить();
	ТаблицаНастроек = ТаблицаНастроек.Скопировать(, "ИмяКолонки, РеквизитЗаказа");
	
	СоответствиеНастроек = Новый Соответствие;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаНаименование = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если ВыборкаНаименование.Следующий() Тогда
			//ЕФСОЛ Несторук 13.09.2016 +
			Если ЗначениеЗаполнено(ВыборкаНаименование.Контрагент) Тогда
				СоответствиеНастроек.Вставить("Контрагент", 			ВыборкаНаименование.Контрагент);
			КонецЕсли;
			//ЕФСОЛ Несторук 13.09.2016 -
			СоответствиеНастроек.Вставить("УслугаДоставки", 		ВыборкаНаименование.УслугаДоставки);
			СоответствиеНастроек.Вставить("Характеристика", 		ВыборкаНаименование.Характеристика);
			Если ЗначениеЗаполнено(ВыборкаНаименование.ВидДоставки) Тогда
				СоответствиеНастроек.Вставить("ВидДоставки", 			ВыборкаНаименование.ВидДоставки);
			КонецЕсли;
			СоответствиеНастроек.Вставить("ВидЗабора", 				ВыборкаНаименование.ВидЗабора);
			СоответствиеНастроек.Вставить("КонтрагентОтветственный", ВыборкаНаименование.КонтрагентОтветственный);
			СоответствиеНастроек.Вставить("КонтрагентВидОплаты", 	ВыборкаНаименование.КонтрагентВидОплаты);
			СоответствиеНастроек.Вставить("КонтрагентПлательщик", 	ВыборкаНаименование.КонтрагентПлательщик);
			СоответствиеНастроек.Вставить("ГородОтправитель", 				ВыборкаНаименование.ГородОтправитель);
			//ЕФСОЛ Несторук 19.08.2016 +
			Если ЗначениеЗаполнено(ВыборкаНаименование.Срочность) Тогда
				СоответствиеНастроек.Вставить("Срочность", 				ВыборкаНаименование.Срочность);
				//ЕФСОЛ Сережко А.С. +
				//СоответствиеНастроек.Вставить("ГородОтправитель", 	ВыборкаНаименование.Договор);
				//СоответствиеНастроек.Вставить("ИндексОтправитель", 		ВыборкаНаименование.ИндексОтправитель);
				//СоответствиеНастроек.Вставить("ОбластьОтправитель", 	ВыборкаНаименование.ОбластьОтправитель);
				//СоответствиеНастроек.Вставить("УлицаОтправитель", 		ВыборкаНаименование.УлицаОтправитель);
				//СоответствиеНастроек.Вставить("КвартираОтправитель", 	ВыборкаНаименование.КвартираОтправитель);
				//СоответствиеНастроек.Вставить("ДомОтправитель", 		ВыборкаНаименование.ДомОтправитель);
				//СоответствиеНастроек.Вставить("СтроениеОтправитель", 	ВыборкаНаименование.СтроениеОтправитель);
				//СоответствиеНастроек.Вставить("КорпусОтправитель", 		ВыборкаНаименование.КорпусОтправитель);
				//ЕФСОЛ Сережко А.С. -
				
			КонецЕсли;
			СоответствиеНастроек.Вставить("Договор", 				ВыборкаНаименование.Договор);
			СоответствиеНастроек.Вставить("Отправитель", 			ВыборкаНаименование.Отправитель);
			СоответствиеНастроек.Вставить("Адрес", 					ВыборкаНаименование.Адрес);
			
			СоответствиеНастроек.Вставить("УслугаСамовывоза",			ВыборкаНаименование.УслугаСамовывоза);
			СоответствиеНастроек.Вставить("ДоставкаСКлиента", 			ВыборкаНаименование.ДоставкаСКлиента); 
			СоответствиеНастроек.Вставить("ДеньДоставки", 				ВыборкаНаименование.ДеньДоставки); 
			СоответствиеНастроек.Вставить("ДеньСбора", 					ВыборкаНаименование.ДеньСбора); 
			//ЕФСОЛ Несторук 19.08.2016 -
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСтруктуруОбщихРеквизитов(СтруктураОбщихРеквизитов,СтартНастройки)
	
	// КонтЛицо и Телефон Заказчика
	Если ЗначениеЗаполнено(СтруктураОбщихРеквизитов.Заказчик) Тогда
		ЗаказчикКонтЛицо = ES_ОбщегоНазначения.ПолучитьКонтактноеЛицоКонтрагента(СтруктураОбщихРеквизитов.Заказчик);
		ЗаказчикТелефон = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СтруктураОбщихРеквизитов.Заказчик, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
		
		Если НЕ ЗначениеЗаполнено(ЗаказчикТелефон) И ЗначениеЗаполнено(ЗаказчикКонтЛицо) Тогда
			ЗаказчикТелефон = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ЗаказчикКонтЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица);
		КонецЕсли; 
	КонецЕсли; 		
	
	// Пользователь
	Пользователь = Пользователи.ТекущийПользователь();
	
	// Ответственный по умолчанию
	ОтветственныйПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойОтветственный");	
	
	// Плательщик по умолчанию
	ПлательщикПоУмолчанию = СтартНастройки.Плательщик;
	Если НЕ ЗначениеЗаполнено(ПлательщикПоУмолчанию) Тогда
		ПлательщикПоУмолчанию = Перечисления.ES_ТипыПлательщиков.Заказчик;
	КонецЕсли; 
	
	// Подразделение
	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновноеПодразделение");
	Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
		Подразделение = ЗначениеНастройки;
	Иначе
		Подразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;	
	КонецЕсли;
	
	
	
	
	//// Состояние заказа
	//Если Константы.ИспользоватьСостоянияЗаказовПокупателей.Получить() Тогда
	//	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "СостояниеНовогоЗаказаПокупателя");
	//	Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
	//		СостояниеЗаказа = ЗначениеНастройки;
	//	Иначе
	//		СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Открыт;
	//	КонецЕсли;
	//Иначе
	//	СостояниеЗаказа = Константы.СостояниеВРаботеЗаказовПокупателей.Получить();
	//КонецЕсли;
	
	// Вид операции
	ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ES_ЗаказНаДоставку;
	
	// Организация
	//Организация = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Организация);
	
	// Вид оплаты по умолчанию
	ВидОплатыПоУмолчанию = СтартНастройки.ВидОплаты;
	Если НЕ ЗначениеЗаполнено(ВидОплатыПоУмолчанию) Тогда
		ВидОплатыПоУмолчанию = Перечисления.ТипыДенежныхСредств.Наличные;
	КонецЕсли;
	//ЕФСОЛ Несторук 19.08.2016 +
	//ПроцентСтраховки
	ПроцентСтраховки = СтартНастройки.ПроцентСтраховки;
	Если НЕ ЗначениеЗаполнено(ПроцентСтраховки) Тогда
		ПроцентСтраховки = 0;
	КонецЕсли;
	//ЕФСОЛ Несторук 19.08.2016 -	
	
	СтруктураОбщихРеквизитов.Вставить("ЗаказчикКонтЛицо", 			ЗаказчикКонтЛицо);
	СтруктураОбщихРеквизитов.Вставить("ЗаказчикТелефон", 			ЗаказчикТелефон);
	СтруктураОбщихРеквизитов.Вставить("Подразделение", 				Подразделение);
	//СтруктураОбщихРеквизитов.Вставить("СостояниеЗаказа", 			СостояниеЗаказа);
	СтруктураОбщихРеквизитов.Вставить("Пользователь", 				Пользователь);
	СтруктураОбщихРеквизитов.Вставить("ОтветственныйПоУмолчанию", 	ОтветственныйПоУмолчанию);
	СтруктураОбщихРеквизитов.Вставить("ВидОперации", 				ВидОперации);
	//СтруктураОбщихРеквизитов.Вставить("Организация", 				Организация);
	СтруктураОбщихРеквизитов.Вставить("ВидОплатыПоУмолчанию", 		ВидОплатыПоУмолчанию);
	СтруктураОбщихРеквизитов.Вставить("ПлательщикПоУмолчанию", 		ПлательщикПоУмолчанию);
	//ЕФСОЛ Несторук 19.08.2016+
	СтруктураОбщихРеквизитов.Вставить("ПроцентСтраховки", 			ПроцентСтраховки);
	//ЕФСОЛ Несторук 19.08.2016 -
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьСтруктуруРеквизитовXL()
	
	// Ключ записывается в МассивИменКолонок
	// по Значению происходит поиск Реквизита в ТаблицеНастроек
	
	СтруктураРеквизитовXL = Новый Структура;
	СтруктураРеквизитовXL.Вставить("Адрес", 					"Адрес доставки");
	СтруктураРеквизитовXL.Вставить("Вес", 						"Вес");
	СтруктураРеквизитовXL.Вставить("ВесОбъемный", 				"Вес объемный");
	СтруктураРеквизитовXL.Вставить("ВремяДоставки", 			"Время доставки");
	СтруктураРеквизитовXL.Вставить("ВремяС", 			        "Время с");
	СтруктураРеквизитовXL.Вставить("ВремяПо", 			        "Время по");
	СтруктураРеквизитовXL.Вставить("Стоимость", 		        "Стоимость доставки");
	СтруктураРеквизитовXL.Вставить("ВхНакладная", 				"Вх. накладная");
	СтруктураРеквизитовXL.Вставить("ГородДоставки", 			"Город доставки");
	//ЕФСОЛ Несторук 12.09.2016 +
	СтруктураРеквизитовXL.Вставить("КодЗаказчика", 			"Код заказчика");
	//ЕФСОЛ Несторук 12.09.2016 -
	
	//ЕФСОЛ Несторук 21.07.2016 +
	//СтруктураРеквизитовXL.Вставить("Регион", 					"Метро");
	//ЕФСОЛ Несторук 21.07.2016 -
	СтруктураРеквизитовXL.Вставить("ДатаДоставки", 				"Дата доставки");
	СтруктураРеквизитовXL.Вставить("НомерНакладной", 			"Накладная");
	СтруктураРеквизитовXL.Вставить("КоличествоМест", 			"Мест");
	СтруктураРеквизитовXL.Вставить("ОбьявленнаяСтоимость", 			"Объяв. стоимость");
	//ЕФСОЛ Несторук 16.08.2016 +
	//СтруктураРеквизитовXL.Вставить("Комментарий", 				"Комментарий");
	СтруктураРеквизитовXL.Вставить("Комментарий", 				"Примечание к заказу");
	СтруктураРеквизитовXL.Вставить("ТипГруза", 					"Тип груза");
	//ЕФСОЛ Несторук 16.08.2016 +
	СтруктураРеквизитовXL.Вставить("НППлан", 					"НП план");
	СтруктураРеквизитовXL.Вставить("Получатель", 				"Получатель");
	СтруктураРеквизитовXL.Вставить("ПолучательКонтактноеЛицо", 	"Контактное лицо получателя");
	СтруктураРеквизитовXL.Вставить("ПолучательТелефон", 		"Телефон получателя");
	//СтруктураРеквизитовXL.Вставить("СправочноОтправитель", 		"Отправитель (справочно)");
	//СтруктураРеквизитовXL.Вставить("СправочноАдресПолучателя", 	"Адрес получателя (справочно)");
	//СтруктураРеквизитовXL.Вставить("СправочноПолучательГород", 	"Город получателя (справочно)");
	//СтруктураРеквизитовXL.Вставить("СправочноПолучатель", 		"Получатель (справочно)");
	//СтруктураРеквизитовXL.Вставить("СправочноПолучательТелефон","Телефон получателя (справочно)");
	СтруктураРеквизитовXL.Вставить("ЗаявкаАдрес", 				"Адрес отправителя");
	СтруктураРеквизитовXL.Вставить("ЗаявкаГород", 				"Город отправителя");
	СтруктураРеквизитовXL.Вставить("ЗаборОтправитель", 			"Отправитель");
	СтруктураРеквизитовXL.Вставить("ЗаборДоставитьДо", 			"Дата сбора");
	//ЕФСОЛ Несторук 19.08.2016 +
	СтруктураРеквизитовXL.Вставить("ЗаборВремя", 				"Время сбора");
	СтруктураРеквизитовXL.Вставить("ЗаборВремяС", 				"Время сбора с");
	СтруктураРеквизитовXL.Вставить("ЗаборВремяПо", 				"Время сбора по");
	СтруктураРеквизитовXL.Вставить("ПримечаниеЗабор", 			"Примечание к сбору");
	
	//ЕФСОЛ Несторук 19.08.2016 +
	СтруктураРеквизитовXL.Вставить("ЗаборКонтактноеЛицо", 		"Контактное лицо отправителя");
	СтруктураРеквизитовXL.Вставить("ЗаборТелефон", 				"Телефон отправителя");
	
	//EFSOL_Шаповал Олег Анатольевич 8 ноября 2016 г. 11:17:53 +
	СтруктураРеквизитовXL.Вставить("КодТовара", 				"Артикул товара");
	СтруктураРеквизитовXL.Вставить("Товар", 					"Товар");
	СтруктураРеквизитовXL.Вставить("КоличествоТовара", 			"Количество товара");
	СтруктураРеквизитовXL.Вставить("СтоимостьТовара", 			"Цена товара");
	СтруктураРеквизитовXL.Вставить("ВесТовара", 				"Вес товара");
	СтруктураРеквизитовXL.Вставить("ДлинаТовара", 				"Длина товара");
	СтруктураРеквизитовXL.Вставить("ВысотаТовара", 				"Высота товара");
	СтруктураРеквизитовXL.Вставить("ШиринаТовара", 				"Ширина товара");
	СтруктураРеквизитовXL.Вставить("Опасность", 				"Опасность товара");
	СтруктураРеквизитовXL.Вставить("НаименованиеТовара", 		"Наименование товара");
	//СтруктураРеквизитовXL.Вставить("ЗонаДоставки",				"Код зоны доставки");
	//EFSOL Шаповал О.А. -
	
	//ЕФСОЛ Несторук 09-11-16 +
	СтруктураРеквизитовXL.Вставить("ВидОплаты", 				"Вид оплаты");
	СтруктураРеквизитовXL.Вставить("ШтрихкодТовара", 			"Штрихкод товара");
	СтруктураРеквизитовXL.Вставить("ОбьявСтоимостьТовара", 		"Объяв. стоимость товара");
	СтруктураРеквизитовXL.Вставить("СкладПолучатель",			"Склад самовывоза");
	//ЕФСОЛ Несторук 09-11-16 -
	//ЭР Несторук С.И. 27.02.2017 17:22:50 {
	СтруктураРеквизитовXL.Вставить("КодСрочности",				"Код срочности");
	СтруктураРеквизитовXL.Вставить("КодВидаДоставки",			"Код вида доставки");
	СтруктураРеквизитовXL.Вставить("Предоплачен",				"Предоплачен");
	СтруктураРеквизитовXL.Вставить("Объем",						"Объем");
	СтруктураРеквизитовXL.Вставить("ЧекНаОбщуюСумму",			"Чек на общую сумму");
	СтруктураРеквизитовXL.Вставить("ЗачетНП",					"Зачет НП");
	СтруктураРеквизитовXL.Вставить("ДоставкаСКлиента",			"Доставка с клиента");
	//}ЭР Несторук С.И.
	
	//ES_Савченко К.Р. 09.08.2017 +
	СтруктураРеквизитовXL.Вставить("СтавкаНДС",                 "Ставка НДС по товару");
	СтруктураРеквизитовXL.Вставить("СуммаНДС",                  "Сумма НДС по товару");
	//ES_Савченко К.Р. 09.08.2017 -
	
	СтруктураРеквизитовXL.Вставить("ГородОтправителя",			"Город отправителя");
	СтруктураРеквизитовXL.Вставить("ГородДоставки",				"Город доставки");
	СтруктураРеквизитовXL.Вставить("ИндексПолучатель",			"Индекс доставки");
	СтруктураРеквизитовXL.Вставить("ЗаборИндексОтправитель",	"Индекс отправителя");
	СтруктураРеквизитовXL.Вставить("СтранаПолучатель",			"Страна доставки");
	СтруктураРеквизитовXL.Вставить("ОбластьПолучатель",			"Область доставки");
	СтруктураРеквизитовXL.Вставить("УлицаПолучатель",			"Улица доставки");
	СтруктураРеквизитовXL.Вставить("ДомПолучатель",			"Дом доставки");
	СтруктураРеквизитовXL.Вставить("СтроениеПолучатель",	"Строение доставки");
	СтруктураРеквизитовXL.Вставить("КорпусПолучатель",		"Корпус доставки");
	СтруктураРеквизитовXL.Вставить("КвартираПолучатель",	"Квартира/офис доставки");
	СтруктураРеквизитовXL.Вставить("ЗаборОбластьОтправитель",	"Область отправителя");
	СтруктураРеквизитовXL.Вставить("ЗаборУлицаОтправитель",	"Улица отправителя");
	СтруктураРеквизитовXL.Вставить("ЗаборДомОтправитель",	"Дом отправителя");
	СтруктураРеквизитовXL.Вставить("ЗаборКвартираОтправитель",	"Квартира/офис отправителя");	 
	СтруктураРеквизитовXL.Вставить("ЗаборСтроениеОтправитель",	"Строение отправителя");
	СтруктураРеквизитовXL.Вставить("ЗаборКорпусОтправитель",	"Корпус отправителя");
	СтруктураРеквизитовXL.Вставить("ЗаборСтранаОтправитель",	"Страна отправителя");
	СтруктураРеквизитовXL.Вставить("Длина",	"Длина");	
	СтруктураРеквизитовXL.Вставить("Ширина",	"Ширина");
	СтруктураРеквизитовXL.Вставить("Высота",	"Высота");
	СтруктураРеквизитовXL.Вставить("КодПВЗ",	"Код ПВЗ");
	
	Возврат СтруктураРеквизитовXL;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьСтруктуруКолонокРеквизитов(ТаблицаНастроек, СтруктураРеквизитовXL)
	
	// Заполняем структуру
	СтруктураКолонокРеквизитовXL = Новый Структура;
	
	Для каждого Реквизит Из СтруктураРеквизитовXL Цикл
		МассивИменКолонок = Новый Массив;
		МассивСтрок = ТаблицаНастроек.НайтиСтроки(Новый Структура("РеквизитЗаказа", Реквизит.Значение));
		Если МассивСтрок.Количество() > 0 Тогда
			Для каждого Строка Из МассивСтрок Цикл
				МассивИменКолонок.Добавить(Строка.ИмяКолонки);
			КонецЦикла; 
			СтруктураКолонокРеквизитовXL.Вставить(Реквизит.Ключ, МассивИменКолонок);
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат СтруктураКолонокРеквизитовXL;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДобавитьКолонкиВТаблицуНовыхЗаказов()
	
	// Имена колонок должны повторять реквизиты документа Заказ на доставку
	//ЭР Несторук С.И. 06.10.2017 21:40:46 {
	КД = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	ОписаниеТиповД = Новый ОписаниеТипов(Массив, , КД);
	//}ЭР Несторук С.И.
	
	ТаблицаНовыхЗаказов = Новый ТаблицаЗначений;
	ТаблицаНовыхЗаказов.Колонки.Добавить("Автор");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ВидОперации");
	ТаблицаНовыхЗаказов.Колонки.Добавить("Дата",ОписаниеТиповД);
	ТаблицаНовыхЗаказов.Колонки.Добавить("ДатаОтгрузки");
	ТаблицаНовыхЗаказов.Колонки.Добавить("Комментарий");
	ТаблицаНовыхЗаказов.Колонки.Добавить("Контрагент");
	ТаблицаНовыхЗаказов.Колонки.Добавить("НДСВключатьВСтоимость");
	ТаблицаНовыхЗаказов.Колонки.Добавить("Организация");
	ТаблицаНовыхЗаказов.Колонки.Добавить("Ответственный");
	//ТаблицаНовыхЗаказов.Колонки.Добавить("СостояниеЗаказа");
	ТаблицаНовыхЗаказов.Колонки.Добавить("СтруктурнаяЕдиницаПродажи");
	ТаблицаНовыхЗаказов.Колонки.Добавить("АдресДоставки");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_АдресДоставкиДолгота");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_АдресДоставкиШирота");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ВидДоставки");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ВидЗабора");	
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ВидОплаты");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_АдресДоставки");
	
	// ЕФСОЛ Сережко А.С. +
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_Город1");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_АдресДоставкиГород");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_Направление");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ВнутризональныйКоэф");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ЗонаДоставки");
	ТаблицаНовыхЗаказов.Колонки.Добавить("Договор");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_СрокДоставки");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_АдресДоставкиИндекс");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_АдресДоставкиСтрана");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ОбластьПолучатель");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_АдресДоставкиУлица");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_АдресДоставкиДом");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_АдресДоставкиСтроение");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_АдресДоставкиКорпус");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_АдресДоставкиОбласть");   	
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_АдресДоставкиКвартира");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ЗаборСтранаОтправитель");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ЗаборИндексОтправитель");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ЗаборОбластьОтправитель");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ЗаборАдресОтправитель");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_АдресЗаборДом");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_АдресЗаборСтроение");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_АдресЗаборКорпус");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_АдресЗаборКвартира"); 
	ТаблицаНовыхЗаказов.Колонки.Добавить("Адрес");
	ТаблицаНовыхЗаказов.Колонки.Добавить("Длина");
	ТаблицаНовыхЗаказов.Колонки.Добавить("Ширина");
	ТаблицаНовыхЗаказов.Колонки.Добавить("Высота");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ПВЗ");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_Терминал");
	// ЕФСОЛ Сережко А.С. -
	
	//EFSOL_Шаповал Олег Анатольевич 8 ноября 2016 г. 12:12:19 +
	// необходимо для выборки в запросе
	КС = Новый КвалификаторыСтроки(20);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ВхНакладная",ОписаниеТиповС);
	//EFSOL Шаповал О.А. -
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ВремяДоставкиС");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ВремяДоставкиПо");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ДатаДоставки");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ЗаказчикКонтактноеЛицо");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ЗаказчикТелефон");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ЗаборАдрес");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ЗаборАдресДолгота");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ЗаборАдресШирота");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ЗаборДата");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ЗаборОтправитель");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ЗаборКонтактноеЛицо");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ЗаборТелефон");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_КоличествоМест");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_Манифест", Новый ОписаниеТипов("СправочникСсылка.ES_Реестры"));
	//EFSOL_Шаповал Олег Анатольевич 8 ноября 2016 г. 12:18:07 +
	КС = Новый КвалификаторыСтроки(30);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_НомерНакладной",ОписаниеТиповС);
	//EFSOL Шаповал О.А. -
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_НППлан");
	ТаблицаНовыхЗаказов.Колонки.Добавить("Стоимость");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ОбщийВес");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ОбщийОбъемныйВес");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_Плательщик");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_Получатель");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ПолучательКонтактноеЛицо");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ПолучательТелефон");
	//ТаблицаНовыхЗаказов.Колонки.Добавить("ES_СправочноОтправитель");
	//ТаблицаНовыхЗаказов.Колонки.Добавить("ES_СправочноПолучатель");
	//ТаблицаНовыхЗаказов.Колонки.Добавить("ES_СправочноТелПолучателя");
	//ТаблицаНовыхЗаказов.Колонки.Добавить("ES_СправочноАдресПолучателя");
	//ТаблицаНовыхЗаказов.Колонки.Добавить("ES_СправочноПолучательГород");
	//ЕФСОЛ Несторук 21.07.2016 + 
	//ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ПолучательРегион");
	//ЕФСОЛ Несторук 21.07.2016 -
	//ЕФСОЛ Несторук 05.08.2016 +
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ПолучательРегион");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ПолучательРегионРасстояние");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ЗаборРегион");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ЗаборРегионРасстояние");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ТипГруза");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_СрочностьДоставки");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ОбьявленнаяСтоимость");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ПроцентСтраховки");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ПлательщикПереключатель");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ЗаборВремяС");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ЗаборВремяПо");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ЗаборКомментарий");
	//ЕФСОЛ Несторук 05.08.2016 -
	//EFSOL_Шаповал Олег Анатольевич 8 ноября 2016 г. 11:15:16 +
	ТаблицаНовыхЗаказов.Колонки.Добавить("КодТовара");
	ТаблицаНовыхЗаказов.Колонки.Добавить("Товар");
	ТаблицаНовыхЗаказов.Колонки.Добавить("КоличествоТовара");
	ТаблицаНовыхЗаказов.Колонки.Добавить("СтоимостьТовара");
	//	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ЗонаДоставки");
	//EFSOL Шаповал О.А. -
	//ЕФСОЛ Несторук 15-11-16 +
	ТаблицаНовыхЗаказов.Колонки.Добавить("ОбьявСтоимостьТовара");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_Склад");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_СкладДоставки");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_АдресСкладаДоставки");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_Предоплачен");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_Объем");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ЧекНаОбщуюСумму");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ES_ЗачетНП");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ДоставкаСКлиента");
	//ЕФСОЛ Несторук 15-11-16 -
	// ES_Савченко К.Р. 09.08.2017 +
	ТаблицаНовыхЗаказов.Колонки.Добавить("СтавкаНДС");
	ТаблицаНовыхЗаказов.Колонки.Добавить("СуммаНДС");
	ТаблицаНовыхЗаказов.Колонки.Добавить("ПроверкаНаправлений");
	
	// ES_Савченко К.Р. 09.08.2017 -
	Возврат ТаблицаНовыхЗаказов;
	
КонецФункции

&НаСервере
Функция ПолучитьТекущиеДанные(ТекСтрока, СтруктураКолонокРеквизитовXL, СтруктураОбщихРеквизитов, МассивСообщений, ГруппаДляГрузов,СтруктураКодовСрочности ,СтруктураКодовВидовДоставки)
	
	// Получаем значения по колонкам
	//ЕФСОЛ Несторук 12.09.2016 +	
	//ТекЗаказчик
	ТекЗаказчик = "";
	ЗаказчикКонтЛицо = "";
	ЗаказчикТелефон = "";
	Если НЕ ЗначениеЗаполнено(СтруктураОбщихРеквизитов.Заказчик) Тогда
		МассивКолонок = Новый Массив;
		ТекЗаказчик = "";
		Если СтруктураКолонокРеквизитовXL.Свойство("КодЗаказчика", МассивКолонок) Тогда
			Попытка
				ТекКодЗаказчика = СокрЛП(ТекСтрока[МассивКолонок[0]]);
			Исключение
				МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
				Возврат МассивСообщений;
			КонецПопытки; 
		КонецЕсли;
		
		// Если не заполнено поле "КодКонтрагента", документ не создается
		Если НЕ ЗначениеЗаполнено(ТекКодЗаказчика) Тогда
			МассивСообщений.Добавить(СообщениеНеправильноУказанРеквизит(ТекСтрока.НомерСтроки, "Код заказчика"));
			Возврат МассивСообщений;
		Иначе 
			ТекЗаказчик = ДобавитьЗаказчикаПоКоду(ТекКодЗаказчика);
			Если ЗначениеЗаполнено(ТекЗаказчик) Тогда
				ЗаказчикКонтЛицо = ES_ОбщегоНазначения.ПолучитьКонтактноеЛицоКонтрагента(ТекЗаказчик);
				ЗаказчикТелефон = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ТекЗаказчик, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
				
				Если НЕ ЗначениеЗаполнено(ЗаказчикТелефон) И ЗначениеЗаполнено(ЗаказчикКонтЛицо) Тогда
					ЗаказчикТелефон = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ЗаказчикКонтЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица);
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЕсли;
	КонецЕсли;
	//ЕФСОЛ Несторук 12.09.2016 -
	
	//ЭР Несторук С.И. 27.02.2017 16:12:30 {
	//Срочность доставки - определеяется по коду срочности (из стартовых), если не заполнена срочность в шапке настроек манифеста
	ТекСрочность = Перечисления.ES_СрочностьДоставки.ПустаяСсылка();
	Если НЕ ЗначениеЗаполнено(СтруктураОбщихРеквизитов.Срочность) Тогда
		МассивКолонок = Новый Массив;
		ТекКодСрочности = "";
		Если СтруктураКолонокРеквизитовXL.Свойство("КодСрочности", МассивКолонок) Тогда
			Попытка
				ТекКодСрочности = СокрЛП(ТекСтрока[МассивКолонок[0]]);
			Исключение
				МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
				Возврат МассивСообщений;
			КонецПопытки; 
		КонецЕсли;
		
		// Если не заполнено поле "КодСрочности", документ не создается
		Если НЕ ЗначениеЗаполнено(ТекКодСрочности) Тогда
			ТекСрочность = Перечисления.ES_СрочностьДоставки.Стандартная;
		Иначе
			ТекСрочность = ОпределитьТекСрочность(СтруктураКодовСрочности, ТекКодСрочности);
			ТекСрочность = ?(ЗначениеЗаполнено(ТекСрочность),ТекСрочность, Перечисления.ES_СрочностьДоставки.Стандартная);
		КонецЕсли;
	КонецЕсли;
	
	// ES_Савченко К.Р. 09.08.2017 +
	ТекСтавкаНДС = "";
	МассивКолонок = Новый Массив;
	Если СтруктураКолонокРеквизитовXL.Свойство("СтавкаНДС",МассивКолонок) Тогда
		Попытка
			ТекСтавкаНДС = СтрЗаменить(ТекСтрока[МассивКолонок[0]],"%", "");
			ТекСтавкаНДС = ?(ПустаяСтрока(ТекСтавкаНДС), 0, Число (ТекСтавкаНДС));  
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки;
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(ТекСтавкаНДС) Тогда 
		ТекСтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДС(ТекСтавкаНДС);
	КонецЕсли;
	// ES_Савченко К.Р. 09.08.2017 -
	
	// ES_Савченко К.Р. 10.08.2017 +
	ТекСуммаНДС = "";
	МассивКолонок = Новый Массив;
	Если СтруктураКолонокРеквизитовXL.Свойство("СуммаНДС",МассивКолонок) Тогда
		Попытка
			ТекСуммаНДС = ТекСтрока[МассивКолонок[0]];
			ТекСуммаНДС = ?(Не ЗначениеЗаполнено(ТекСуммаНДС),0,Число (ТекСтрока[МассивКолонок[0]]));
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	Иначе
		СтоимостьТовара = 0;
	КонецЕсли;
	
	// ES_Савченко К.Р. 10.08.2017 -
	
	//ВидДоставки - определяется по коду доставки (из стартовых), если не заполнен вид доставки в шапке настроек манифеста
	ТекВидДоставки = Перечисления.ES_ВидыДоставки.ПустаяСсылка();
	ТекВидЗабора = Перечисления.ES_ВидыЗабора.ПустаяСсылка();
	Если НЕ ЗначениеЗаполнено(СтруктураОбщихРеквизитов.ВидДоставки) Тогда
		
		МассивКолонок = Новый Массив;
		ТекКодВидаДоставки = "";
		Если СтруктураКолонокРеквизитовXL.Свойство("КодВидаДоставки", МассивКолонок) Тогда
			Попытка
				ТекКодВидаДоставки = СокрЛП(ТекСтрока[МассивКолонок[0]]);
			Исключение
				МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
				Возврат МассивСообщений;
			КонецПопытки; 
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекКодВидаДоставки) Тогда
			МассивСообщений.Добавить(СообщениеНеправильноУказанРеквизит(ТекСтрока.НомерСтроки, "Код вида доставки"));
			Возврат МассивСообщений;
		Иначе
			ТекВидДоставки = ОпределитьВидДоставки(СтруктураКодовВидовДоставки, ТекКодВидаДоставки, Ложь);
			Если НЕ ЗначениеЗаполнено(ТекВидДоставки) Тогда
				МассивСообщений.Добавить("По строке " + ТекСтрока.НомерСтроки + " не удалось создать документ. Соответствующий код вида доставки не найден");
				Возврат МассивСообщений;	
			ИначеЕсли ТекВидДоставки = Перечисления.ES_ВидыДоставки.ДвериДвери Тогда
				ТекВидЗабора =  ОпределитьВидДоставки(СтруктураКодовВидовДоставки, ТекКодВидаДоставки, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	
	//ЕФСОЛ Сережко А.С. + 
	//Если НЕ ЗначениеЗаполнено(СтруктураОбщихРеквизитов.ГородОтправитель) Тогда
	ТекГород1 = "";
	МассивКолонок = Новый Массив;
	Если СтруктураКолонокРеквизитовXL.Свойство("ГородОтправителя",МассивКолонок) Тогда
		Попытка
			ТекГород1 = СокрЛП(ТекСтрока[МассивКолонок[0]]);
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	Иначе
	КонецЕсли;
	Если ТекВидДоставки = Перечисления.ES_ВидыДоставки.ДвериДвери Тогда
		Город1 = ТекГород1;
	Иначе
		Если ЗначениеЗаполнено(СтруктураОбщихРеквизитов.ГородОтправитель) Тогда
			Город1 = СтруктураОбщихРеквизитов.ГородОтправитель;
		Иначе
			Город1 = ТекГород1;
		КонецЕсли;
	КонецЕсли;
	//Иначе 
	//Город1 = СтруктураОбщихРеквизитов.ГородОтправитель;
	//Город1 = "";
	
	//КонецЕсли;
	
	//Если Не ЗначениеЗаполнено(Город1) Тогда
	//	Город1 = Справочники.ES_Города.СоздатьЭлемент();
	//	Город1.Наименование = ТекГород1; 
	//	Город1.Записать();
	//КонецЕСли;
	
	
	ТекГород2 = "";
	МассивКолонок = Новый Массив;
	Если СтруктураКолонокРеквизитовXL.Свойство("ГородДоставки",МассивКолонок) Тогда
		Попытка
			ТекГород2 = СокрЛП(ТекСтрока[МассивКолонок[0]]);
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	Иначе
	КонецЕсли;
	
	Город2 = ТекГород2;  
	//Если Не ЗначениеЗаполнено(Город2) Тогда
	//	Город2 = Справочники.ES_Города.СоздатьЭлемент();
	//	Город2.Наименование = ТекГород2; 
	//	Город2.Записать();
	//КонецЕСли;
	
	
	//Направление = ES_ОбщегоНазначения.ПолучитьНаправление(Город1,Город2); // нужно добавить регионы
	//ПроверкаНаправлений = ЗначениеЗаполнено(Направление.Направление);
	//ВнутризональныйКоэффициент = Направление.Коэффициент;
	//	
	//Зона = ES_ОбщегоНазначения.ОпределитьЗонуДоставки(Направление.Направление, Заказчик.ES_ВидКонтрагента, СтруктураОбщихРеквизитов.Срочность);
	//ЗонаДоставки = Справочники.ES_ЗоныДоставки.НайтиПоНаименованию(Зона.Зона); 
	//СрокДоставки = Зона.СрокДоставки;
	
	
	ТекСтранаПолучатель = "";
	МассивКолонок = Новый Массив;
	Если СтруктураКолонокРеквизитовXL.Свойство("СтранаПолучатель",МассивКолонок) Тогда
		Попытка
			ТекСтранаПолучатель = СокрЛП(ТекСтрока[МассивКолонок[0]]);
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки;     		
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекСтранаПолучатель) Тогда
		СтранаПолучатель = Справочники.СтраныМира.НайтиПоНаименованию(ТекСтранаПолучатель); 
	Иначе
		СтранаПолучатель = Справочники.СтраныМира.Россия;
	КонецЕсли;
		
	ТекЗаборСтранаОтправитель = "";
	МассивКолонок = Новый Массив;
	Если СтруктураКолонокРеквизитовXL.Свойство("ЗаборСтранаОтправитель",МассивКолонок) Тогда
		Попытка
			ТекЗаборСтранаОтправитель = СокрЛП(ТекСтрока[МассивКолонок[0]]);
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки;     		
	КонецЕсли;
	ЗаборСтранаОтправитель = Справочники.СтраныМира.НайтиПоНаименованию(ТекЗаборСтранаОтправитель); 
	
	//Ширина по заказу
	ТекШирина = 0;
	МассивКолонок = Новый Массив;
	Если СтруктураКолонокРеквизитовXL.Свойство("Ширина",МассивКолонок) Тогда
		Попытка
			ТекШирина = СокрЛП(ТекСтрока[МассивКолонок[0]]);
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки;     		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекШирина) Тогда
		ТекШирина = СтрЗаменить(ТекШирина, " ", "");
		Попытка
			ТекШирина = Число(ТекШирина);
		Исключение
			МассивСообщений.Добавить(СообщениеНеправильноУказанРеквизит(ТекСтрока.НомерСтроки, "Ширина"));
			Возврат МассивСообщений;
		КонецПопытки;
	Иначе
		ТекШирина = 0;
	КонецЕсли;
	
	//Высота по заказу
	ТекВысота = "";
	МассивКолонок = Новый Массив;
	Если СтруктураКолонокРеквизитовXL.Свойство("Высота",МассивКолонок) Тогда
		Попытка
			ТекВысота = СокрЛП(ТекСтрока[МассивКолонок[0]]);
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки;     		
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(ТекВысота) Тогда
		ТекВысота = СтрЗаменить(ТекВысота, " ", "");
		Попытка
			ТекВысота = Число(ТекВысота);
		Исключение
			МассивСообщений.Добавить(СообщениеНеправильноУказанРеквизит(ТекСтрока.НомерСтроки, "Высота"));
			Возврат МассивСообщений;
		КонецПопытки;
	Иначе
		ТекВысота = 0;
	КонецЕсли;
	
	
	//Длина по заказу
	ТекДлина = "";
	МассивКолонок = Новый Массив;
	Если СтруктураКолонокРеквизитовXL.Свойство("Длина",МассивКолонок) Тогда
		Попытка
			ТекДлина = СокрЛП(ТекСтрока[МассивКолонок[0]]);
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки;     		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДлина) Тогда
		ТекДлина = СтрЗаменить(ТекДлина, " ", "");
		Попытка
			ТекДлина = Число(ТекДлина);
		Исключение
			МассивСообщений.Добавить(СообщениеНеправильноУказанРеквизит(ТекСтрока.НомерСтроки, "Длина"));
			Возврат МассивСообщений;
		КонецПопытки;
	Иначе
		ТекДлина = 0;
	КонецЕсли;
	
	
	ТекИндексПолучатель = "";
	МассивКолонок = Новый Массив;
	Если СтруктураКолонокРеквизитовXL.Свойство("ИндексПолучатель",МассивКолонок) Тогда
		Попытка
			ТекИндексПолучатель = СокрЛП(ТекСтрока[МассивКолонок[0]]);
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 			
	КонецЕсли; 
	ИндексПолучатель = ТекИндексПолучатель;
	
	ТекЗаборИндексОтправитель = "";
	МассивКолонок = Новый Массив;
	Если СтруктураКолонокРеквизитовXL.Свойство("ЗаборИндексОтправитель",МассивКолонок) Тогда
		Попытка
			ТекЗаборИндексОтправитель = СокрЛП(ТекСтрока[МассивКолонок[0]]);
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 			
	КонецЕсли; 
	
	ЗаборИндексОтправитель = ТекЗаборИндексОтправитель; 
	
	ТекОбластьПолучатель = "";
	МассивКолонок = Новый Массив;
	Если СтруктураКолонокРеквизитовXL.Свойство("ОбластьПолучатель",МассивКолонок) Тогда
		Попытка
			ТекОбластьПолучатель = СокрЛП(ТекСтрока[МассивКолонок[0]]);
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 			
	КонецЕсли;
	ОбластьПолучатель = ТекОбластьПолучатель;
	
	ТекЗаборОбластьОтправитель = "";
	МассивКолонок = Новый Массив;
	Если СтруктураКолонокРеквизитовXL.Свойство("ЗаборОбластьОтправитель",МассивКолонок) Тогда
		Попытка
			ТекЗаборОбластьОтправитель = СокрЛП(ТекСтрока[МассивКолонок[0]]);
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 			
	КонецЕсли;
	ЗаборОбластьОтправитель = ТекЗаборОбластьОтправитель;
	
	//ЭР Несторук С.И. 27.09.2017 21:14:09 {
	
	//ПВЗ
	МассивКолонок = Новый Массив;
	ТекКодПВЗ = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("КодПВЗ", МассивКолонок) Тогда
		Попытка
			ТекКодПВЗ = СокрЛП(ТекСтрока[МассивКолонок[0]]);
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекКодПВЗ) Тогда
		ТекКодПВЗ = СтрЗаменить(ТекКодПВЗ, " ", "");
		ПВЗ = Справочники.ES_ПунктыВыдачиЗаказов.НайтиПоКоду(ТекКодПВЗ);
	Иначе 
		ПВЗ = Справочники.ES_ПунктыВыдачиЗаказов.ПустаяСсылка();
	КонецЕсли;
	//}ЭР Несторук С.И.
	Если ТекВидДоставки = Перечисления.ES_ВидыДоставки.Самовывоз ИЛИ 
		(НЕ ЗначениеЗаполнено(ТекВидДоставки) И СтруктураОбщихРеквизитов.ВидДоставки = Перечисления.ES_ВидыДоставки.Самовывоз) Тогда
		Город2 = ?(ЗначениеЗаполнено(ПВЗ.Город), ПВЗ.Город, Город2);
	КонецЕсли;
		
	//ТекЗаборОбластьОтправитель = "";
	//    МассивКолонок = Новый Массив;
	//    Если СтруктураКолонокРеквизитовXL.Свойство("ЗаборОбластьОтправитель",МассивКолонок) Тогда
	//    	Попытка
	//    		ТекЗаборОбластьОтправитель = СокрЛП(ТекСтрока[МассивКолонок[0]]);
	//    		Исключение
	//    		МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
	//    		Возврат МассивСообщений;
	//    	КонецПопытки; 			
	//    КонецЕсли;
	//ЗаборОбластьОтправитель = ТекЗаборОбластьОтправитель;
	
	ТекУлицаПолучатель = "";
	МассивКолонок = Новый Массив;
	Если СтруктураКолонокРеквизитовXL.Свойство("УлицаПолучатель",МассивКолонок) Тогда
		Попытка
			ТекУлицаПолучатель = СокрЛП(ТекСтрока[МассивКолонок[0]]);
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 			
	КонецЕсли;
	УлицаПолучатель = ТекУлицаПолучатель;
	
	ТекДомПолучатель = "";
	МассивКолонок = Новый Массив;
	Если СтруктураКолонокРеквизитовXL.Свойство("ДомПолучатель",МассивКолонок) Тогда
		Попытка
			ТекДомПолучатель = СокрЛП(ТекСтрока[МассивКолонок[0]]);
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 			
	КонецЕсли;
	ДомПолучатель = ТекДомПолучатель;
	
	ТекСтроениеПолучатель = "";
	МассивКолонок = Новый Массив;
	Если СтруктураКолонокРеквизитовXL.Свойство("СтроениеПолучатель",МассивКолонок) Тогда
		Попытка
			ТекСтроениеПолучатель = СокрЛП(ТекСтрока[МассивКолонок[0]]);
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 			
	КонецЕсли;
	СтроениеПолучатель = ТекСтроениеПолучатель;   
	
	ТекКорпусПолучатель = "";
	МассивКолонок = Новый Массив;
	Если СтруктураКолонокРеквизитовXL.Свойство("КорпусПолучатель",МассивКолонок) Тогда
		Попытка
			ТекКорпусПолучатель = СокрЛП(ТекСтрока[МассивКолонок[0]]);
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 			
	КонецЕсли;
	КорпусПолучатель = ТекКорпусПолучатель;
	
	ТекКвартираПолучатель = "";
	МассивКолонок = Новый Массив;
	Если СтруктураКолонокРеквизитовXL.Свойство("КвартираПолучатель",МассивКолонок) Тогда
		Попытка
			ТекКвартираПолучатель = СокрЛП(ТекСтрока[МассивКолонок[0]]);
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 			
	КонецЕсли;
	КвартираПолучатель = ТекКвартираПолучатель;
	
	ТекЗаборУлицаОтправитель = "";
	МассивКолонок = Новый Массив;
	Если СтруктураКолонокРеквизитовXL.Свойство("ЗаборУлицаОтправитель",МассивКолонок) Тогда
		Попытка
			ТекЗаборУлицаОтправитель = СокрЛП(ТекСтрока[МассивКолонок[0]]);
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 			
	КонецЕсли;
	ЗаборУлицаОтправитель = ТекЗаборУлицаОтправитель;
	
	ТекЗаборДомОтправитель = "";
	МассивКолонок = Новый Массив;
	Если СтруктураКолонокРеквизитовXL.Свойство("ЗаборДомОтправитель",МассивКолонок) Тогда
		Попытка
			ТекЗаборДомОтправитель = СокрЛП(ТекСтрока[МассивКолонок[0]]);
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 			
	КонецЕсли;
	ЗаборДомОтправитель = ТекЗаборДомОтправитель;
	
	ТекЗаборКорпусОтправитель = "";
	МассивКолонок = Новый Массив;
	Если СтруктураКолонокРеквизитовXL.Свойство("ЗаборКорпусОтправитель",МассивКолонок) Тогда
		Попытка
			ТекЗаборКорпусОтправитель = СокрЛП(ТекСтрока[МассивКолонок[0]]);
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 			
	КонецЕсли;
	ЗаборКорпусОтправитель = ТекЗаборКорпусОтправитель;
	
	ТекЗаборКвартираОтправитель = "";
	МассивКолонок = Новый Массив;
	Если СтруктураКолонокРеквизитовXL.Свойство("ЗаборКвартираОтправитель",МассивКолонок) Тогда
		Попытка
			ТекЗаборКвартираОтправитель = СокрЛП(ТекСтрока[МассивКолонок[0]]);
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 			
	КонецЕсли;
	ЗаборКвартираОтправитель = ТекЗаборКвартираОтправитель;
	
	ТекЗаборСтроениеОтправитель = "";
	МассивКолонок = Новый Массив;
	Если СтруктураКолонокРеквизитовXL.Свойство("ЗаборСтроениеОтправитель",МассивКолонок) Тогда
		Попытка
			ТекЗаборСтроениеОтправитель = СокрЛП(ТекСтрока[МассивКолонок[0]]);
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 			
	КонецЕсли;
	ЗаборСтроениеОтправитель = ТекЗаборСтроениеОтправитель;     
	
	
	//ЕФСОЛ Сережко А.С. - 
	
	
	//}ЭР Несторук С.И.
	
	
	// ТекПолучатель
	МассивКолонок = Новый Массив;
	ТекПолучатель = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("Получатель", МассивКолонок) Тогда
		Попытка
			ТекПолучатель = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	// ТекНомерНакладной
	МассивКолонок = Новый Массив;
	ТекНомерНакладной = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("НомерНакладной", МассивКолонок) Тогда
		Попытка
			ТекНомерНакладной = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	// ТекВхНакладная
	МассивКолонок = Новый Массив;
	ТекВхНакладная = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ВхНакладная", МассивКолонок) Тогда
		Попытка
			ТекВхНакладная = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	// Если не заполнено поле "Получатель", документ не создается
	Если НЕ ЗначениеЗаполнено(ТекПолучатель) Тогда
		МассивСообщений.Добавить(СообщениеНеправильноУказанРеквизит(ТекСтрока.НомерСтроки, "Получатель"));
		Возврат МассивСообщений;
	КонецЕсли;
	
	// ТекАдрес - одно значение
	МассивКолонок = Новый Массив;
	ТекАдрес = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("Адрес", МассивКолонок) Тогда
		Попытка
			ТекАдрес = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	// ТекГородДоставки - одно значение
	МассивКолонок = Новый Массив;
	ТекГородДоставки = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ГородДоставки", МассивКолонок) Тогда
		Попытка
			ТекГородДоставки = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	////ЕФСОЛ Несторук 21.07.2016 +
	//// ТекРегион(Метро) - одно значение
	//МассивКолонок = Новый Массив;
	//ТекРегион = "";
	//Если СтруктураКолонокРеквизитовXL.Свойство("Регион", МассивКолонок) Тогда
	//	Попытка
	//		ТекРегион = ТекСтрока[МассивКолонок[0]];
	//	Исключение
	//		МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
	//		Возврат МассивСообщений;
	//	КонецПопытки; 
	//КонецЕсли;
	//
	//Регион = СокрЛП(ПолучитьСтрокуБезЛишнихПробелов(ТекРегион)); 	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ES_Регионы.Наименование,
	//	|	ES_Регионы.Ссылка
	//	|ИЗ
	//	|	Справочник.ES_Регионы КАК ES_Регионы
	//	|ГДЕ
	//	|	ES_Регионы.Наименование = &Наименование";
	//
	//Запрос.УстановитьПараметр("Наименование", Регион);
	//РезультатЗапроса = Запрос.Выполнить();
	//Выборка = РезультатЗапроса.Выбрать();
	//
	//Если Выборка.Следующий() Тогда
	//	Регион = Выборка.Ссылка; 
	//КонецЕсли;
	
	//
	////ЕФСОЛ Несторук 21.07.2016 -
	
	//ЕФСОЛ Несторук 21.07.2016 +
	// ТипГруза - одно значение
	МассивКолонок = Новый Массив;
	ТекРегион = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ТипГруза", МассивКолонок) Тогда
		Попытка
			ТекТипГруза = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	ТекТипГруза = СокрЛП(ТекТипГруза);
	ТекТипГруза = ДобавитьТипГрузаНаСервере(ТекТипГруза);
	
	// ТекОбьявленнаяСтоимость - одно значение
	МассивКолонок = Новый Массив;
	ТекОбьявленнаяСтоимость = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ОбьявленнаяСтоимость", МассивКолонок) Тогда
		Попытка
			ТекОбьявленнаяСтоимость = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекОбьявленнаяСтоимость) Тогда
		ТекОбьявленнаяСтоимость = СтрЗаменить(ТекОбьявленнаяСтоимость, " ", "");
		Попытка
			ОбьявленнаяСтоимость = Число(ТекОбьявленнаяСтоимость);
		Исключение
			МассивСообщений.Добавить(СообщениеНеправильноУказанРеквизит(ТекСтрока.НомерСтроки, "Обьявленная стоимость"));
			Возврат МассивСообщений;
		КонецПопытки;
	Иначе
		ОбьявленнаяСтоимость = 0;
	КонецЕсли; 
	//ЕФСОЛ Несторук 19.08.2016 -
	
	
	// ТекВес - одно значение
	МассивКолонок = Новый Массив;
	ТекВес = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("Вес", МассивКолонок) Тогда
		Попытка
			ТекВес = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекВес) Тогда
		ТекВес = СтрЗаменить(ТекВес, " ", "");
		Попытка
			Вес = Число(ТекВес);
		Исключение
			МассивСообщений.Добавить(СообщениеНеправильноУказанРеквизит(ТекСтрока.НомерСтроки, "Вес"));
			Возврат МассивСообщений;
		КонецПопытки;
	Иначе
		Вес = 0;
	КонецЕсли; 
	
	// Стоимость - одно значение
	МассивКолонок = Новый Массив;
	мСтоимость = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("Стоимость", МассивКолонок) Тогда
		Попытка
			мСтоимость = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мСтоимость) Тогда
		мСтоимость = СтрЗаменить(мСтоимость, " ", "");
		Попытка
			Стоимость = Число(мСтоимость);
		Исключение
			МассивСообщений.Добавить(СообщениеНеправильноУказанРеквизит(ТекСтрока.НомерСтроки, "Стоимость"));
			Возврат МассивСообщений;
		КонецПопытки;
	Иначе
		Стоимость = 0;
	КонецЕсли;
	
	// ТекВесОбъемный - одно значение
	МассивКолонок = Новый Массив;
	ТекВесОбъемный = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ВесОбъемный", МассивКолонок) Тогда
		Попытка
			ТекВесОбъемный = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекВесОбъемный) Тогда
		ТекВесОбъемный = СтрЗаменить(ТекВесОбъемный, " ", "");
		Попытка
			ВесОбъемный = Число(ТекВесОбъемный);
		Исключение
			МассивСообщений.Добавить(СообщениеНеправильноУказанРеквизит(ТекСтрока.НомерСтроки, "Вес объемный"));
			Возврат МассивСообщений;
		КонецПопытки;
	Иначе
		ВесОбъемный = 0;
	КонецЕсли; 
	
	//ЭР Несторук С.И. 02.03.2017 11:42:15 {
	// ТекОбъем - одно значение
	МассивКолонок = Новый Массив;
	ТекОбъем = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("Объем", МассивКолонок) Тогда
		Попытка
			ТекОбъем = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекОбъем) Тогда
		ТекОбъем = СтрЗаменить(ТекОбъем, " ", "");
		Попытка
			Объем = Число(ТекОбъем);
		Исключение
			МассивСообщений.Добавить(СообщениеНеправильноУказанРеквизит(ТекСтрока.НомерСтроки, "Объем"));
			Возврат МассивСообщений;
		КонецПопытки;
	Иначе
		Объем = 0;
	КонецЕсли;
	//}ЭР Несторук С.И.
	
	// ТекВремяДоставки - одно значение
	МассивКолонок = Новый Массив;
	ТекВремяДоставки = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ВремяДоставки", МассивКолонок) Тогда
		Попытка
			ТекВремяДоставки = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
		ТекВремяДоставки = СокрЛП(ПолучитьСтрокуБезЛишнихПробелов(ТекВремяДоставки));
	КонецЕсли;
	
	// ВресяС - одно значение
	МассивКолонок = Новый Массив;
	ВремяС = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ВремяС", МассивКолонок) Тогда
		Попытка
			ВремяС = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
		ВремяС = СокрЛП(ПолучитьСтрокуБезЛишнихПробелов(ВремяС));
	КонецЕсли;
	
	// ВресяПо - одно значение
	МассивКолонок = Новый Массив;
	ВремяПо = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ВремяПо", МассивКолонок) Тогда
		Попытка
			ВремяПо = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
		ВремяПо = СокрЛП(ПолучитьСтрокуБезЛишнихПробелов(ВремяПо));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекВремяДоставки) Тогда 
		ТекВремяДоставки = "" + ВремяС + "-" + ВремяПо;
	КонецЕсли;
	
	СтрокаВремени = СокрЛП(ПолучитьСтрокуБезЛишнихПробелов(ТекВремяДоставки));
	СтруктураВремениДоставки = ПреобразоватьСтрокуВоВремя(СтрокаВремени);		
	
	// ТекДатаДоставки - одно значение
	ТекДатаДоставки = "";
	//Почкун 15.05.2019 +
	Если ДеньДоставки.Пустая() Тогда
		//Почкун 15.05.2019 -
		Если СтруктураКолонокРеквизитовXL.Свойство("ДатаДоставки", МассивКолонок) Тогда
			Попытка
				ТекДатаДоставки = ТекСтрока[МассивКолонок[0]];
			Исключение
				МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
				Возврат МассивСообщений;
			КонецПопытки;
		Иначе
			МассивСообщений.Добавить("В документе Excel не обнаружен реквизит ""Дата доставки""");
			Возврат МассивСообщений;
		КонецЕсли;
	
		ДатаДоставки = ПреобразоватьСтрокуВДату(ТекДатаДоставки);
		Если НЕ ЗначениеЗаполнено(ДатаДоставки) Тогда
			МассивСообщений.Добавить(СообщениеНеправильноУказанРеквизит(ТекСтрока.НомерСтроки, "Дата доставки"));
			Возврат МассивСообщений;
		КонецЕсли; 
	КонецЕсли;

	// ТекКоличествоМест - одно значение
	МассивКолонок = Новый Массив;
	ТекКоличествоМест = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("КоличествоМест", МассивКолонок) Тогда
		Попытка
			ТекКоличествоМест = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекКоличествоМест) Тогда
		ТекКоличествоМест = СтрЗаменить(ТекКоличествоМест, " ", "");
		Попытка
			КоличествоМест = Число(ТекКоличествоМест);
		Исключение
			МассивСообщений.Добавить(СообщениеНеправильноУказанРеквизит(ТекСтрока.НомерСтроки, "Количество мест"));
			Возврат МассивСообщений;
		КонецПопытки;
	Иначе
		КоличествоМест = 1;
	КонецЕсли; 
	
	// ТекПолучательКонтактноеЛицо - одно значение
	МассивКолонок = Новый Массив;
	ТекПолучательКонтактноеЛицо = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ПолучательКонтактноеЛицо", МассивКолонок) Тогда
		Попытка
			ТекПолучательКонтактноеЛицо = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	// ТекНППлан - одно значение
	МассивКолонок = Новый Массив;
	ТекНППлан = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("НППлан", МассивКолонок) Тогда
		Попытка
			ТекНППлан = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекНППлан) Тогда
		ТекНППлан = СтрЗаменить(ТекНППлан, " ", "");
		Попытка
			НППлан = Число(ТекНППлан);
		Исключение
			МассивСообщений.Добавить(СообщениеНеправильноУказанРеквизит(ТекСтрока.НомерСтроки, "Наложенный платеж"));
			Возврат МассивСообщений;
		КонецПопытки;
	Иначе
		НППлан = 0;
	КонецЕсли; 
	
	
	
	// ТекКомментарий - объединяет несколько столбцов
	МассивКолонок = Новый Массив;
	ТекКомментарий = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("Комментарий", МассивКолонок) Тогда
		Для каждого ИмяКолонки Из МассивКолонок Цикл
			ТекКомментарий = ТекКомментарий + ?(ЗначениеЗаполнено(ТекКомментарий), ", ", "") + ТекСтрока[ИмяКолонки];
		КонецЦикла;
		ТекКомментарий = ПолучитьСтрокуБезЛишнихПробелов(ТекКомментарий);
	КонецЕсли;
	//ТекКомментарий = ?(ЗначениеЗаполнено(ТекКомментарий), ТекКомментарий + Символы.ПС, ТекКомментарий) + НСтр("ru = 'Создан автоматически обработкой ""Загрузка манифестов""'");
	ТекКомментарий = ?(ЗначениеЗаполнено(ТекКомментарий), ТекКомментарий + Символы.ПС, ТекКомментарий);
	
	// ТекПолучательТелефон - объединяет несколько столбцов
	МассивКолонок = Новый Массив;
	ТекПолучательТелефон = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ПолучательТелефон", МассивКолонок) Тогда
		Для каждого ИмяКолонки Из МассивКолонок Цикл
			ТекПолучательТелефон = ТекПолучательТелефон + ?(ЗначениеЗаполнено(ТекПолучательТелефон), ", ", "") + ТекСтрока[ИмяКолонки];
		КонецЦикла; 
	КонецЕсли;
	
	// Получатель - одно значение
	Получатель 					= ПолучитьСтрокуБезЛишнихПробелов(ТекПолучатель);
	ПолучательТелефон 			= ПолучитьСтрокуБезЛишнихПробелов(ТекПолучательТелефон);
	ПолучательКонтактноеЛицо 	= ПолучитьСтрокуБезЛишнихПробелов(ТекПолучательКонтактноеЛицо);
	
	
	// ТекСправОтправитель - объединяет несколько столбцов
	МассивКолонок = Новый Массив;
	ТекСправОтправитель = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("СправочноОтправитель", МассивКолонок) Тогда
		Для каждого ИмяКолонки Из МассивКолонок Цикл
			ТекСправОтправитель = ТекСправОтправитель + ?(ЗначениеЗаполнено(ТекСправОтправитель), ", ", "") + ТекСтрока[ИмяКолонки];
		КонецЦикла; 
		ТекСправОтправитель = СокрЛП(ПолучитьСтрокуБезЛишнихПробелов(ТекСправОтправитель));
	КонецЕсли;
	
	// ТекСправПолучатель - объединяет несколько столбцов
	МассивКолонок = Новый Массив;
	ТекСправПолучатель = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("СправочноПолучатель", МассивКолонок) Тогда
		Для каждого ИмяКолонки Из МассивКолонок Цикл
			ТекСправПолучатель = ТекСправПолучатель + ?(ЗначениеЗаполнено(ТекСправПолучатель), ", ", "") + ТекСтрока[ИмяКолонки];
		КонецЦикла; 
	КонецЕсли;
	
	// ТекСправТелПолучателя - объединяет несколько столбцов
	МассивКолонок = Новый Массив;
	ТекСправТелПолучателя = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("СправочноПолучательТелефон", МассивКолонок) Тогда
		Для каждого ИмяКолонки Из МассивКолонок Цикл
			ТекСправТелПолучателя = ТекСправТелПолучателя + ?(ЗначениеЗаполнено(ТекСправТелПолучателя), ", ", "") + ТекСтрока[ИмяКолонки];
		КонецЦикла; 
	КонецЕсли;
	
	// ТекСправАдресПолучателя - объединяет несколько столбцов
	МассивКолонок = Новый Массив;
	ТекСправАдресПолучателя = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("СправочноАдресПолучателя", МассивКолонок) Тогда
		Для каждого ИмяКолонки Из МассивКолонок Цикл
			ТекСправАдресПолучателя = ТекСправАдресПолучателя + ?(ЗначениеЗаполнено(ТекСправАдресПолучателя), ", ", "") + ТекСтрока[ИмяКолонки];
		КонецЦикла; 
	КонецЕсли;
	
	// ТекСправГородПолучателя - одно значение
	МассивКолонок = Новый Массив;
	ТекСправГородПолучателя = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("СправочноПолучательГород", МассивКолонок) Тогда
		Попытка
			ТекСправГородПолучателя = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	// Полный адрес получателя (справочно) - составное поле из Города + Адреса
	СправочноПолныйАдресПолучателя = СокрЛП(СокрП(ТекСправГородПолучателя) + " " + СокрЛ(ТекСправАдресПолучателя));
	СправочноПолныйАдресПолучателя = СокрЛ(ПолучитьСтрокуБезЛишнихПробелов(СправочноПолныйАдресПолучателя));
	
	/////////////////////////////////////////////////////////////////////////
	// Реквизиты ЗАБОРА
	
	// ТекЗаборОтправитель - одно значение
	
	МассивКолонок = Новый Массив;
	ТекЗаборОтправитель = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ЗаборОтправитель", МассивКолонок) Тогда
		Попытка
			ТекЗаборОтправитель = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	// ТекЗаявкаКонтЛицо - одно значение
	МассивКолонок = Новый Массив;
	ТекЗаявкаКонтЛицо = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ЗаборКонтактноеЛицо", МассивКолонок) Тогда
		Попытка
			ТекЗаявкаКонтЛицо = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	// ТекЗаборТелефон - объединяет несколько столбцов
	МассивКолонок = Новый Массив;
	ТекЗаборТелефон = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ЗаборТелефон", МассивКолонок) Тогда
		Для каждого ИмяКолонки Из МассивКолонок Цикл
			ТекЗаборТелефон = ТекЗаборТелефон + ?(ЗначениеЗаполнено(ТекЗаборТелефон), ", ", "") + ТекСтрока[ИмяКолонки];
		КонецЦикла; 
	КонецЕсли;
	
	// ЗаборОтправитель - одно значение
	ЗаборОтправитель 	= ПолучитьСтрокуБезЛишнихПробелов(ТекЗаборОтправитель);
	ЗаборТелефон 		= ПолучитьСтрокуБезЛишнихПробелов(ТекЗаборТелефон);
	ЗаявкаКонтЛицо 		= ПолучитьСтрокуБезЛишнихПробелов(ТекЗаявкаКонтЛицо);
	
	// ТекЗаявкаАдрес - одно значение
	МассивКолонок = Новый Массив;
	ТекЗаявкаАдрес = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ЗаявкаАдрес", МассивКолонок) Тогда
		Попытка
			ТекЗаявкаАдрес = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	// ТекЗаявкаГород - одно значение
	МассивКолонок = Новый Массив;
	ТекЗаявкаГород = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ЗаявкаГород", МассивКолонок) Тогда
		Попытка
			ТекЗаявкаГород = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	
	// ТекЗаборДоставитьДо - одно значение
	ТекЗаборДоставитьДо = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ЗаборДоставитьДо", МассивКолонок) Тогда
		Попытка
			ТекЗаборДоставитьДо = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекЗаборДоставитьДо) Тогда
		ДатаЗавтра 				= ТекущаяДата() + 86400;
		ТекЗаборДоставитьДо 	= НачалоДня(ДатаЗавтра);
	КонецЕсли; 
	
	ЗаборДоставитьДо = ПреобразоватьСтрокуВДату(ТекЗаборДоставитьДо);
	Если НЕ ЗначениеЗаполнено(ЗаборДоставитьДо) Тогда
		МассивСообщений.Добавить(СообщениеНеправильноУказанРеквизит(ТекСтрока.НомерСтроки, "Забор: Дата забора"));
		Возврат МассивСообщений;
	КонецЕсли; 
	//ЕФСОЛ Несторук 19.08.2016 +
	// ТекВремяЗабора - одно значение
	МассивКолонок = Новый Массив;
	ТекВремяЗабора = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ЗаборВремя", МассивКолонок) Тогда
		Попытка
			ТекВремяЗабора = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
		ТекВремяЗабора = СокрЛП(ПолучитьСтрокуБезЛишнихПробелов(ТекВремяЗабора));
	КонецЕсли;
	
	// ВремяЗабораС - одно значение
	МассивКолонок = Новый Массив;
	ВремяЗабораС = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ЗаборВремяС", МассивКолонок) Тогда
		Попытка
			ВремяЗабораС = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
		ВремяЗабораС = СокрЛП(ПолучитьСтрокуБезЛишнихПробелов(ВремяЗабораС));
	КонецЕсли;
	
	// ВремяЗабораПо - одно значение
	МассивКолонок = Новый Массив;
	ВремяЗабораПо = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ЗаборВремяПо", МассивКолонок) Тогда
		Попытка
			ВремяЗабораПо = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
		ВремяЗабораПо = СокрЛП(ПолучитьСтрокуБезЛишнихПробелов(ВремяЗабораПо));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекВремяЗабора) Тогда 
		ТекВремяЗабора = "" + ВремяЗабораС + "-" + ВремяЗабораПо;
	КонецЕсли;
	
	СтрокаВремениЗабора = СокрЛП(ПолучитьСтрокуБезЛишнихПробелов(ТекВремяЗабора));
	СтруктураВремениЗабора = ПреобразоватьСтрокуВоВремя(СтрокаВремениЗабора);	
	//ЕФСОЛ Несторук 19.08.2016 -
	
	//ЕФСОЛ Несторук 02.10.2016 + 
	//ТекПримечаниеЗабор - объединяет несколько столбцов
	МассивКолонок = Новый Массив;
	ТекПримечаниеЗабор = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ПримечаниеЗабор", МассивКолонок) Тогда
		Для каждого ИмяКолонки Из МассивКолонок Цикл
			ТекПримечаниеЗабор = ТекПримечаниеЗабор + ?(ЗначениеЗаполнено(ТекПримечаниеЗабор), ", ", "") + ТекСтрока[ИмяКолонки];
		КонецЦикла;
		ТекПримечаниеЗабор = ПолучитьСтрокуБезЛишнихПробелов(ТекПримечаниеЗабор);
	КонецЕсли;
	//ТекКомментарий = ?(ЗначениеЗаполнено(ТекКомментарий), ТекКомментарий + Символы.ПС, ТекКомментарий) + НСтр("ru = 'Создан автоматически обработкой ""Загрузка манифестов""'");
	//ТекПримечаниеЗабор = ?(ЗначениеЗаполнено(ТекПримечаниеЗабор), ТекПримечаниеЗабор + Символы.ПС, ТекПримечаниеЗабор);
	//ЕФСОЛ Несторук 02.10.2016 + 
	
	//EFSOL_Шаповал Олег Анатольевич 8 ноября 2016 г. 11:40:14 +
	МассивКолонок = Новый Массив;
	КодТовара = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("КодТовара", МассивКолонок) Тогда
		Попытка
			КодТовара = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
		КодТовара = СокрЛП(ПолучитьСтрокуБезЛишнихПробелов(КодТовара));
	КонецЕсли;
	
	// Количество товара 
	МассивКолонок = Новый Массив;
	КоличествоТовара = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("КоличествоТовара", МассивКолонок) Тогда
		Попытка
			КоличествоТовара = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КоличествоТовара) Тогда
		КоличествоТовара = СтрЗаменить(КоличествоТовара, " ", "");
		Попытка
			КоличествоТовара = Число(КоличествоТовара);
		Исключение
			МассивСообщений.Добавить(СообщениеНеправильноУказанРеквизит(ТекСтрока.НомерСтроки, "Забор: Дата забора"));
			Возврат МассивСообщений;
		КонецПопытки;
	Иначе
		КоличествоТовара = 0;
	КонецЕсли;
	
	// Стоимость товара 
	МассивКолонок = Новый Массив;
	СтоимостьТовара = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("СтоимостьТовара", МассивКолонок) Тогда
		Попытка
			СтоимостьТовара = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтоимостьТовара) Тогда
		СтоимостьТовара = СтрЗаменить(СтоимостьТовара, " ", "");
		Попытка
			СтоимостьТовара = Число(СтоимостьТовара);
		Исключение
			МассивСообщений.Добавить(СообщениеНеправильноУказанРеквизит(ТекСтрока.НомерСтроки, "Стоимость товара"));
			Возврат МассивСообщений;
		КонецПопытки;
	Иначе
		СтоимостьТовара = 0;
	КонецЕсли;	
	
	// Вес товара 
	МассивКолонок = Новый Массив;
	ВесТовара = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ВесТовара", МассивКолонок) Тогда
		Попытка
			ВесТовара = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВесТовара) Тогда
		ВесТовара = СтрЗаменить(ВесТовара, " ", "");
		Попытка
			ВесТовара = Число(ВесТовара);
		Исключение
			МассивСообщений.Добавить(СообщениеНеправильноУказанРеквизит(ТекСтрока.НомерСтроки, "Вес товара"));
			Возврат МассивСообщений;
		КонецПопытки;
	Иначе
		ВесТовара = 0;
	КонецЕсли;
	
	// Длина товара 
	МассивКолонок = Новый Массив;
	ДлинаТовара = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ДлинаТовара", МассивКолонок) Тогда
		Попытка
			ДлинаТовара = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДлинаТовара) Тогда
		ДлинаТовара = СтрЗаменить(ДлинаТовара, " ", "");
		Попытка
			ДлинаТовара = Число(ДлинаТовара);
		Исключение
			МассивСообщений.Добавить(СообщениеНеправильноУказанРеквизит(ТекСтрока.НомерСтроки, "Длина товара"));
			Возврат МассивСообщений;
		КонецПопытки;
	Иначе
		ДлинаТовара = 0;
	КонецЕсли;
	
	// Высота товара 
	МассивКолонок = Новый Массив;
	ВысотаТовара = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ВысотаТовара", МассивКолонок) Тогда
		Попытка
			ВысотаТовара = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВысотаТовара) Тогда
		ВысотаТовара = СтрЗаменить(ВысотаТовара, " ", "");
		Попытка
			ВысотаТовара = Число(ВысотаТовара);
		Исключение
			МассивСообщений.Добавить(СообщениеНеправильноУказанРеквизит(ТекСтрока.НомерСтроки, "Высота товара"));
			Возврат МассивСообщений;
		КонецПопытки;
	Иначе
		ВысотаТовара = 0;
	КонецЕсли;
	
	// Ширина товара 
	МассивКолонок = Новый Массив;
	ШиринаТовара = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ШиринаТовара", МассивКолонок) Тогда
		Попытка
			ШиринаТовара = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШиринаТовара) Тогда
		ШиринаТовара = СтрЗаменить(ШиринаТовара, " ", "");
		Попытка
			ШиринаТовара = Число(ШиринаТовара);
		Исключение
			МассивСообщений.Добавить(СообщениеНеправильноУказанРеквизит(ТекСтрока.НомерСтроки, "Ширина товара"));
			Возврат МассивСообщений;
		КонецПопытки;
	Иначе
		ШиринаТовара = 0;
	КонецЕсли;
	
	// НаименованиеТовара - одно значение
	МассивКолонок = Новый Массив;
	НаименованиеТовара = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("НаименованиеТовара", МассивКолонок) Тогда
		Попытка
			НаименованиеТовара = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	МассивКолонок = Новый Массив;
	Опасность = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("Опасность", МассивКолонок) Тогда
		Попытка
			Опасность = СокрЛП(ТекСтрока[МассивКолонок[0]]);
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	Если СтрДлина(Опасность)>0 Тогда
		Опасность = Истина;
	Иначе
		Опасность = Ложь;
	КонецЕсли;
	
	//ЕФСОЛ Несторук 11-11-16 +
	
	// Штрихкод товара 
	МассивКолонок = Новый Массив;
	ШтрихкодТовара = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ШтрихкодТовара", МассивКолонок) Тогда
		Попытка
			ШтрихкодТовара = СтрЗаменить(ТекСтрока[МассивКолонок[0]]," ","");
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	
	//ЕФСОЛ Несторук 11-11-16 - 
	//ЕФСОЛ Несторук 15-11-16 +	
	// Обьяв. стоимость товара 
	МассивКолонок = Новый Массив;
	ОбьявСтоимостьТовара = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ОбьявСтоимостьТовара", МассивКолонок) Тогда
		Попытка
			ОбьявСтоимостьТовара = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбьявСтоимостьТовара) Тогда
		ОбьявСтоимостьТовара = СтрЗаменить(ОбьявСтоимостьТовара, " ", "");
		Попытка
			ОбьявСтоимостьТовара = Число(ОбьявСтоимостьТовара);
		Исключение
			МассивСообщений.Добавить(СообщениеНеправильноУказанРеквизит(ТекСтрока.НомерСтроки, "Количество товара"));
			Возврат МассивСообщений;
		КонецПопытки;
	Иначе
		ОбьявСтоимостьТовара = 0;
	КонецЕсли;
	//ЕФСОЛ Несторук 15-11-16 -	
	
	//	//создаем товар
	//ЭР Несторук С.И. 25.09.2017 18:18:07 {
	//Товар ниже - это СТРУКТУРА!!!
	//}ЭР Несторук С.И.
	Товар = СоздатьНовуюНоменклатуру(НаименованиеТовара,КодТовара,ВесТовара,
	ДлинаТовара,ВысотаТовара,ШиринаТовара,Опасность,
	ШтрихкодТовара,ГруппаДляГрузов, ТекСтавкаНДС, ТекСуммаНДС);
	//КонецЕсли;
	
	//EFSOL Шаповал О.А. -
	
	
	
	//ЕФСОЛ Несторук 09-11-16 +
	//Вид оплаты
	МассивКолонок = Новый Массив;
	ВидОплаты = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ВидОплаты", МассивКолонок) Тогда
		Попытка
			ВидОплаты = СокрЛП(ТекСтрока[МассивКолонок[0]]);
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	Если ВидОплаты = "Безналичные" Тогда
		ВидОплаты = Перечисления.ТипыДенежныхСредств.Безналичные;
	Иначе
		ВидОплаты = Перечисления.ТипыДенежныхСредств.Наличные;
	КонецЕсли;
	
	//ЕФСОЛ Несторук 09-11-16 - 
	
	//ЭР Несторук С.И. 23.02.2017 16:00:27 {
	//Склад получатель
	МассивКолонок = Новый Массив;
	ТекКодСкладПолучатель = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("СкладПолучатель", МассивКолонок) Тогда
		Попытка
			ТекКодСкладПолучатель = СокрЛП(ПолучитьСтрокуБезЛишнихПробелов(ТекСтрока[МассивКолонок[0]]));
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	Если СтрДлина(ТекКодСкладПолучатель) > 0 Тогда
		СкладПолучатель = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(ТекКодСкладПолучатель);
	Иначе 
		СкладПолучатель = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	КонецЕсли;
	
	//}ЭР Несторук С.И.
	
	//ЭР Несторук С.И. 28.02.2017 9:18:07 {
	//Предоплачен
	МассивКолонок = Новый Массив;
	ТекПредоплачен = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("Предоплачен", МассивКолонок) Тогда
		Попытка
			ТекПредоплачен = СокрЛП(ТекСтрока[МассивКолонок[0]]);
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	Если СтрДлина(ТекПредоплачен)>0 Тогда
		Предоплачен = Истина;
	Иначе
		Предоплачен = Ложь;
	КонецЕсли;
	
	//}ЭР Несторук С.И.
	
	//EFSOL_Шаповал Олег Анатольевич 20 марта 2017 г. 16:06:26 +
	//Склад получатель
	//МассивКолонок = Новый Массив;
	//КодЗоныДоставки = "";
	//Если СтруктураКолонокРеквизитовXL.Свойство("ЗонаДоставки", МассивКолонок) Тогда
	//	Попытка
	//		КодЗоныДоставки = СокрЛП(ПолучитьСтрокуБезЛишнихПробелов(ТекСтрока[МассивКолонок[0]]));
	//	Исключение
	//		МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
	//		Возврат МассивСообщений;
	//	КонецПопытки; 
	//КонецЕсли;
	//Если СтрДлина(КодЗоныДоставки) > 0 Тогда
	//	ЗонаДоставки = Справочники.ES_ЗоныДоставки.НайтиПоКоду(КодЗоныДоставки);
	//Иначе 
	//	ЗонаДоставки = Справочники.ES_ЗоныДоставки.ПустаяСсылка();
	//КонецЕсли;
	//EFSOL Шаповал О.А. -
	
	//ЧекНаОбщуюСумму
	//Истина - если в колонке что-то проставлено, если колока пуста - Ложь
	МассивКолонок = Новый Массив;
	ТекЧекНаОбщуюСумму = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ЧекНаОбщуюСумму", МассивКолонок) Тогда
		Попытка
			ТекЧекНаОбщуюСумму = СокрЛП(ТекСтрока[МассивКолонок[0]]);
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	Если СтрДлина(ТекЧекНаОбщуюСумму)>0 Тогда
		ЧекНаОбщуюСумму = Истина;
	Иначе
		ЧекНаОбщуюСумму = Ложь;
	КонецЕсли;
	
	//ЗачетНП
	//Истина - если в колонке что-то проставлено, если колока пуста - Ложь
	МассивКолонок = Новый Массив;
	ТекЗачетНП = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ЗачетНП", МассивКолонок) Тогда
		Попытка
			ТекЗачетНП = СокрЛП(ТекСтрока[МассивКолонок[0]]);
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	Если СтрДлина(ТекЗачетНП)>0 Тогда
		ЗачетНП = Истина;
	Иначе
		ЗачетНП = Ложь;
	КонецЕсли;
	
	//ЭР Несторук С.И. 10.05.2017 16:00:15 {
	
	//Доставка с клиента
	МассивКолонок = Новый Массив;
	ТекДоставкаСКлиента = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("ДоставкаСКлиента", МассивКолонок) Тогда
		Попытка
			ТекДоставкаСКлиента = СокрЛП(ТекСтрока[МассивКолонок[0]]);
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДоставкаСКлиента) Тогда
		ТекДоставкаСКлиента = СтрЗаменить(ТекДоставкаСКлиента, " ", "");
		Попытка
			ТекДоставкаСКлиента = Число(ТекДоставкаСКлиента);
		Исключение
			МассивСообщений.Добавить(СообщениеНеправильноУказанРеквизит(ТекСтрока.НомерСтроки, "Доставка с клиента"));
			Возврат МассивСообщений;
		КонецПопытки;
	Иначе
		ТекДоставкаСКлиента = 0;
	КонецЕсли;
	
	// Полный адрес доставки - составное поле из Города + Адреса
	Если ПустаяСтрока(ТекАдрес) Тогда
		ТекАдрес = ЗаполнитьES_АдресДоставки("","","",УлицаПолучатель,ДомПолучатель,СтроениеПолучатель,,КвартираПолучатель);
	КонецЕсли;
	ПолныйАдресДоставки = СокрЛП(СокрП(ТекГородДоставки) + " " + СокрЛ(ТекАдрес));
	ПолныйАдресДоставки = СокрЛ(ПолучитьСтрокуБезЛишнихПробелов(ПолныйАдресДоставки));
	
	Если ПустаяСтрока(ПолныйАдресДоставки) Тогда
		ПолныйАдресДоставки = ЗаполнитьES_АдресДоставки(ТекИндексПолучатель,ТекОбластьПолучатель,
		Город2,УлицаПолучатель,ДомПолучатель,СтроениеПолучатель, КорпусПолучатель,КвартираПолучатель);
	КонецЕсли;
	
	Если ТекВидДоставки = Перечисления.ES_ВидыДоставки.Самовывоз ИЛИ
		(НЕ ЗначениеЗаполнено(ТекВидДоставки) И СтруктураОбщихРеквизитов.ВидДоставки = Перечисления.ES_ВидыДоставки.Самовывоз) Тогда
		
		ПолныйАдресДоставки = ПВЗ.ПолныйАдрес;
		Если ПустаяСтрока(ПолныйАдресДоставки) Тогда
			ПолныйАдресДоставки = ЗаполнитьES_АдресДоставки(ПВЗ.Индекс,ПВЗ.Область,
			ПВЗ.Город,ПВЗ.Улица,ПВЗ.Дом,ПВЗ.Строение, ПВЗ.Корпус,ПВЗ.Квартира);
		КонецЕсли;
		Город2 							= ПВЗ.Город;
		ТекИндексПолучатель 			= ПВЗ.Индекс;
		ОбластьПолучатель				= ПВЗ.Область;
		ТекУлицаПолучатель				= ПВЗ.Улица;
		ТекДомПолучатель				= ПВЗ.Дом;
		ТекСтроениеПолучатель 			= ПВЗ.Строение;
		ТекКорпусПолучатель				= ПВЗ.Корпус;
		ТекКвартираПолучатель 			= ПВЗ.Квартира ;
	КонецЕсли;
	
	Если (ТекВидДоставки = Перечисления.ES_ВидыДоставки.СкладСклад ИЛИ
		(НЕ ЗначениеЗаполнено(ТекВидДоставки) И СтруктураОбщихРеквизитов.ВидДоставки = Перечисления.ES_ВидыДоставки.СкладСклад))И ЗначениеЗаполнено(СкладПолучатель) Тогда
		ПолныйАдресДоставки = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СкладПолучатель,Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы);
		АдресXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(ПолныйАдресДоставки,Перечисления.ТипыКонтактнойИнформации.Адрес);
		АдресВФорматеКладр = УправлениеКонтактнойИнформацией.АдресВФорматеКЛАДР(АдресXML);
		Если ТипЗнч(АдресВФорматеКладр) = Тип("Структура") Тогда
			Город2 							= ?(АдресВФорматеКладр.Свойство("Город"),АдресВФорматеКладр.Город, "");
			ТекИндексПолучатель 			= ?(АдресВФорматеКладр.Свойство("Индекс"),АдресВФорматеКладр.Индекс, "");
			ОбластьПолучатель				= ?(АдресВФорматеКладр.Свойство("Регион"),АдресВФорматеКладр.Регион, "");
			ТекУлицаПолучатель				= ?(АдресВФорматеКладр.Свойство("Улица"),АдресВФорматеКладр.Улица, "");
			ТекДомПолучатель				= ?(АдресВФорматеКладр.Свойство("Дом"),АдресВФорматеКладр.Дом, "");
			ТекСтроениеПолучатель 			= ?(АдресВФорматеКладр.Свойство("Строение"),АдресВФорматеКладр.Строение, "");
			ТекКорпусПолучатель				= ?(АдресВФорматеКладр.Свойство("Корпус"),АдресВФорматеКладр.Корпус, "");
			ТекКвартираПолучатель 			= ?(АдресВФорматеКладр.Свойство("Квартира"),АдресВФорматеКладр.Квартира, "");
		КонецЕсли;
	КонецЕсли;
	
	
	АдресДоставкиДолгота = 0;
	АдресДоставкиШирота = 0;
	
	Если ES_YandexMaps.ПроверкаИнтернет() Тогда
		//ЕФСОЛ Несторук 08.08.2016 +
		СтруктураГеокодирования = ES_YandexMaps.ГеокодированияПолучитьКоординаты(ПолныйАдресДоставки);
		//ЕФСОЛ Несторук 08.08.2016 -
		АдресДоставкиДолгота 	= СтруктураГеокодирования.Долгота;
		АдресДоставкиШирота 	= СтруктураГеокодирования.Широта;
		//EFSOL_Сальник К.А. 2018-11-21 {+
		Если не ЗначениеЗаполнено(СтранаПолучатель) Тогда 
			СтранаПолучатель = СтруктураГеокодирования.Страна;
		КонецЕсли;
		Если не ЗначениеЗаполнено(Город2) Тогда
			Город2 = СтруктураГеокодирования.Город;
		КонецЕсли;
		Если не ЗначениеЗаполнено(ТекИндексПолучатель) Тогда
			ТекИндексПолучатель = СтруктураГеокодирования.Индекс;
		КонецЕсли;
		Если не ЗначениеЗаполнено(ОбластьПолучатель) Тогда
			ОбластьПолучатель = СтруктураГеокодирования.Область;
		КонецЕсли;
		Если не ЗначениеЗаполнено(ТекУлицаПолучатель) Тогда
			ТекУлицаПолучатель = СтруктураГеокодирования.Улица;
		КонецЕсли;
		Если не ЗначениеЗаполнено(ТекДомПолучатель) Тогда
			ТекДомПолучатель = СтруктураГеокодирования.Дом;
		КонецЕсли;
		Если не ЗначениеЗаполнено(ТекСтроениеПолучатель) Тогда
			ТекСтроениеПолучатель = СтруктураГеокодирования.Строение;
		КонецЕсли;
		//EFSOL_Сальник К.А.  -}
		
		//ЕФСОЛ Несторук 05.08.2016 +
		Если ЗначениеЗаполнено(АдресДоставкиДолгота) И ЗначениеЗаполнено(АдресДоставкиШирота) Тогда
			//СтруктураГеокодированияПоМетро = ES_YandexMaps.ГеокодированияПолучитьКоординатыМетро(СтруктураГеокодирования);
			СтруктураИнфоПоМетро = ES_ОбщегоНазначения.ПолучитьДанныеПоМетро(СтруктураГеокодирования);
			//СтруктураИнфоПоМетро = ПолучитьМетроИРасстояние(СтруктураГеокодированияПоМетро,СтруктураГеокодирования);
			ПолучательРегион = СтруктураИнфоПоМетро.Метро;
			ПолучательРегионРасстояние = СтруктураИнфоПоМетро.Расстояние;
		КонецЕсли;
		//ЕФСОЛ Несторук 05.08.2016 - 
	КонецЕсли;
	
	// ЗаявкаАдрес - одно значение
	// Полный адрес доставки - составное поле из ЗаявкаГород + ЗаявкаАдрес
	ЗаборПолныйАдрес = СокрЛП(СокрП(ТекЗаявкаГород) + " "  + СокрЛ(ТекЗаявкаАдрес));
	ЗаборПолныйАдрес = СокрЛ(ПолучитьСтрокуБезЛишнихПробелов(ЗаборПолныйАдрес));
	
	Если ПустаяСтрока(ЗаборПолныйАдрес)ИЛИ ЗаборПолныйАдрес = (СокрП(ТекЗаявкаГород) + " " ) Тогда
		ЗаборПолныйАдрес = ЗаполнитьES_АдресДоставки(ТекЗаборИндексОтправитель,ТекЗаборИндексОтправитель,
		Город1,УлицаОтправитель,ДомОтправитель,СтроениеОтправитель, КорпусОтправитель,КвартираОтправитель); 	
	КонецЕсли;
	
	ЗаборАдресДолгота = 0;
	ЗаборАдресШирота = 0;
	
	Если ES_YandexMaps.ПроверкаИнтернет() Тогда
		//ЕФСОЛ Несторук 08.08.2016 +
		СтруктураГеокодирования = ES_YandexMaps.ГеокодированияПолучитьКоординаты(ЗаборПолныйАдрес);
		//ЕФСОЛ Несторук 08.08.2016 -
		ЗаборАдресДолгота 		= СтруктураГеокодирования.Долгота;
		ЗаборАдресШирота 		= СтруктураГеокодирования.Широта;
		//ЕФСОЛ Несторук 05.08.2016 +
		Если ЗначениеЗаполнено(ЗаборАдресДолгота) И ЗначениеЗаполнено(ЗаборАдресШирота) Тогда
			//СтруктураГеокодированияПоМетро = ES_YandexMaps.ГеокодированияПолучитьКоординатыМетро(СтруктураГеокодирования);
			//СтруктураИнфоПоМетро = ПолучитьМетроИРасстояние(СтруктураГеокодированияПоМетро,СтруктураГеокодирования);
			СтруктураИнфоПоМетро = ES_ОбщегоНазначения.ПолучитьДанныеПоМетро(СтруктураГеокодирования);
			ЗаборРегион = СтруктураИнфоПоМетро.Метро;
			ЗаборРегионРасстояние = СтруктураИнфоПоМетро.Расстояние;
		КонецЕсли;
		//ЕФСОЛ Несторук 05.08.2016 - 
		
	КонецЕсли;
	
	Направление = ES_ОбщегоНазначения.ПолучитьНаправление(Город1,Город2,ЗаборОбластьОтправитель,ОбластьПолучатель); // нужно добавить регионы
	ПроверкаНаправлений = ЗначениеЗаполнено(Направление.Направление);
	ВнутризональныйКоэффициент = Направление.Коэффициент;
	
	//EFSOL_Сальник К.А. 2018-11-02 {+
	Если ЗначениеЗаполнено(Заказчик) Тогда
		мЗаказчик = Заказчик;
	Иначе 
		мЗаказчик = ТекЗаказчик;
	КонецЕсли;
	//EFSOL_Сальник К.А.  -}
	
	Зона = ES_ОбщегоНазначения.ОпределитьЗонуДоставки(Направление.Направление, мЗаказчик.ES_ВидКонтрагента, ?(ЗначениеЗаполнено(ТекСрочность), ТекСрочность,СтруктураОбщихРеквизитов.Срочность));
	ЗонаДоставки = Зона.Зона; 
	СрокДоставки = Зона.СрокДоставки;
	
	//Сережко А.С. +
	МассивКолонок = Новый Массив;
	мДоговор = "";
	Если СтруктураКолонокРеквизитовXL.Свойство("Договор", МассивКолонок) Тогда
		Попытка
			мДоговор = ТекСтрока[МассивКолонок[0]];
		Исключение
			МассивСообщений.Добавить("В документе Excel не обнаружен " + МассивКолонок[0]);
			Возврат МассивСообщений;
		КонецПопытки; 
	КонецЕсли;
	//Сережко А.С. -
	
	//EFSOL_Сальник К.А. 2018-11-02 {+	
	Если НЕ ЗначениеЗаполнено(мДоговор) Тогда
		Если ЗначениеЗаполнено(Договор) Тогда	
			мДоговор = Договор;
		Иначе
			мДоговор = ПолучитьОсновнойДоговорКонтрагента(мЗаказчик);
		КонецЕсли;
	КонецЕсли;
	//EFSOL_Сальник К.А.  -}

	
	// Заполняем структуру текущих данных
	СтруктураТекДанных = Новый Структура;
	СтруктураТекДанных.Вставить("ПолныйАдресДоставки", 		ПолныйАдресДоставки);
	СтруктураТекДанных.Вставить("АдресДоставкиДолгота", 	АдресДоставкиДолгота);
	СтруктураТекДанных.Вставить("АдресДоставкиШирота", 		АдресДоставкиШирота);
	СтруктураТекДанных.Вставить("Вес", 						Вес);
	СтруктураТекДанных.Вставить("ВесОбъемный", 				ВесОбъемный);
	СтруктураТекДанных.Вставить("Объем",					Объем);
	СтруктураТекДанных.Вставить("ВремяС", 					СтруктураВремениДоставки.ВремяС);
	СтруктураТекДанных.Вставить("ВремяПо", 					СтруктураВремениДоставки.ВремяПо);
	СтруктураТекДанных.Вставить("ДатаДоставки", 			ДатаДоставки);
	СтруктураТекДанных.Вставить("НомерНакладной", 			ТекНомерНакладной);
	СтруктураТекДанных.Вставить("КоличествоМест", 			КоличествоМест);
	СтруктураТекДанных.Вставить("Комментарий", 				ТекКомментарий);
	СтруктураТекДанных.Вставить("ПолучательКонтактноеЛицо", ПолучательКонтактноеЛицо);
	СтруктураТекДанных.Вставить("ВхНакладная", 				ТекВхНакладная);
	СтруктураТекДанных.Вставить("НППлан", 					НППлан);
	СтруктураТекДанных.Вставить("Стоимость", 			    Стоимость);
	СтруктураТекДанных.Вставить("Получатель", 				Получатель);
	СтруктураТекДанных.Вставить("ПолучательТелефон", 		ПолучательТелефон);
	СтруктураТекДанных.Вставить("СправочноОтправитель", 	ТекСправОтправитель);
	СтруктураТекДанных.Вставить("СправочноПолучатель", 		ТекСправПолучатель);
	СтруктураТекДанных.Вставить("СправочноТелПолучателя", 	ТекСправТелПолучателя);
	СтруктураТекДанных.Вставить("СправочноАдресПолучателя", СправочноПолныйАдресПолучателя);
	СтруктураТекДанных.Вставить("ЗаборПолныйАдрес", 		ЗаборПолныйАдрес);
	СтруктураТекДанных.Вставить("ЗаборАдресДолгота", 		ЗаборАдресДолгота);
	СтруктураТекДанных.Вставить("ЗаборАдресШирота", 		ЗаборАдресШирота);
	СтруктураТекДанных.Вставить("ЗаборДоставитьДо", 		ЗаборДоставитьДо);
	СтруктураТекДанных.Вставить("ЗаборКонтактноеЛицо", 		ЗаявкаКонтЛицо);
	СтруктураТекДанных.Вставить("ЗаборОтправитель", 		ЗаборОтправитель);
	СтруктураТекДанных.Вставить("ЗаборТелефон", 			ЗаборТелефон);
	//ЕФСОЛ Несторук 05.08.2016 +
	СтруктураТекДанных.Вставить("ПолучательРегион",			ПолучательРегион);
	СтруктураТекДанных.Вставить("ПолучательРегионРасстояние", ПолучательРегионРасстояние);
	СтруктураТекДанных.Вставить("ЗаборРегион",				ЗаборРегион);
	СтруктураТекДанных.Вставить("ЗаборРегионРасстояние", 	ЗаборРегионРасстояние);
	СтруктураТекДанных.Вставить("ТипГруза",				 	ТекТипГруза);
	СтруктураТекДанных.Вставить("ЗаборВремяС",				СтруктураВремениЗабора.ВремяС);
	СтруктураТекДанных.Вставить("ЗаборВремяПо",				СтруктураВремениЗабора.ВремяПо);
	СтруктураТекДанных.Вставить("ОбьявленнаяСтоимость",		ОбьявленнаяСтоимость);
	СтруктураТекДанных.Вставить("Заказчик",					ТекЗаказчик);
	СтруктураТекДанных.Вставить("ЗаказчикКонтЛицо",			ЗаказчикКонтЛицо);
	СтруктураТекДанных.Вставить("ЗаказчикТелефон",			ЗаказчикТелефон);
	СтруктураТекДанных.Вставить("ПримечаниеЗабор",			ТекПримечаниеЗабор);
	//ЕФСОЛ Несторук 05.08.2016 -
	//EFSOL_Шаповал Олег Анатольевич 8 ноября 2016 г. 11:50:19 +
	СтруктураТекДанных.Вставить("КодТовара",				КодТовара);
	СтруктураТекДанных.Вставить("Товар",					Товар);
	СтруктураТекДанных.Вставить("КоличествоТовара",			КоличествоТовара);
	СтруктураТекДанных.Вставить("СтоимостьТовара",			СтоимостьТовара);
	//СтруктураТекДанных.Вставить("ЗонаДоставки",				ЗонаДоставки);
	//EFSOL Шаповал О.А. -
	//ЕФСОЛ Несторук 09-11-16 +
	СтруктураТекДанных.Вставить("ВидОплаты",				ВидОплаты);
	//ЕФСОЛ Несторук 09-11-16 -
	СтруктураТекДанных.Вставить("ОбьявСтоимостьТовара",	ОбьявСтоимостьТовара);
	СтруктураТекДанных.Вставить("СкладПолучатель", 	СкладПолучатель);
	//ЭР Несторук С.И. 27.02.2017 17:21:42 {
	СтруктураТекДанных.Вставить("Срочность",	 	ТекСрочность);
	СтруктураТекДанных.Вставить("ВидДоставки", 		ТекВидДоставки);
	СтруктураТекДанных.Вставить("ВидЗабора", 		ТекВидЗабора);
	СтруктураТекДанных.Вставить("Предоплачен", 		Предоплачен);
	СтруктураТекДанных.Вставить("ЧекНаОбщуюСумму", 		ЧекНаОбщуюСумму);
	СтруктураТекДанных.Вставить("ЗачетНП", 				ЗачетНП);
	СтруктураТекДанных.Вставить("ДоставкаСКлиента",		ТекДоставкаСКлиента);
	//}ЭР Несторук С.И.
	// ES_Савченко К.Р. 09.08.2017 +	
	СтруктураТекДанных.Вставить("СтавкаНДС",         ТекСтавкаНДС);
	СтруктураТекДанных.Вставить("СуммаНДС",          ТекСуммаНДС);
	// ES_Савченко К.Р. 09.08.2017 _
	//Ефсол Сережко А.С. +	
	СтруктураТекДанных.Вставить("ГородОтправителя", Город1);
	СтруктураТекДанных.Вставить("ГородДоставки", Город2);
	СтруктураТекДанных.Вставить("Направление", Направление.Направление);
	СтруктураТекДанных.Вставить("ВнутризональныйКоэффициент", ВнутризональныйКоэффициент);
	СтруктураТекДанных.Вставить("ЗонаДоставки", ЗонаДоставки);	
	СтруктураТекДанных.Вставить("Договор", мДоговор);
	СтруктураТекДанных.Вставить("СрокДоставки", СрокДоставки);
	СтруктураТекДанных.Вставить("СтранаПолучатель", СтранаПолучатель);
	СтруктураТекДанных.Вставить("ИндексПолучатель", ТекИндексПолучатель);
	СтруктураТекДанных.Вставить("ОбластьПолучатель",ОбластьПолучатель);
	СтруктураТекДанных.Вставить("ЗаборСтранаОтправитель", ЗаборСтранаОтправитель);
	СтруктураТекДанных.Вставить("ЗаборИндексОтправитель", ТекЗаборИндексОтправитель);
	СтруктураТекДанных.Вставить("ЗаборОбластьОтправитель",ЗаборОбластьОтправитель);	
	СтруктураТекДанных.Вставить("УлицаПолучатель",ТекУлицаПолучатель);	
	СтруктураТекДанных.Вставить("ДомПолучатель",ТекДомПолучатель);
	СтруктураТекДанных.Вставить("КорпусПолучатель",ТекКорпусПолучатель);
	СтруктураТекДанных.Вставить("СтроениеПолучатель",ТекСтроениеПолучатель);
	СтруктураТекДанных.Вставить("КвартираПолучатель",ТекКвартираПолучатель);
	СтруктураТекДанных.Вставить("ЗаборУлицаОтправитель",ТекЗаборУлицаОтправитель);
	СтруктураТекДанных.Вставить("ЗаборДомОтправитель",ТекЗаборДомОтправитель);
	СтруктураТекДанных.Вставить("ЗаборСтроениеОтправитель",ТекЗаборСтроениеОтправитель);
	СтруктураТекДанных.Вставить("ЗаборКорпусОтправитель",ТекЗаборКорпусОтправитель);
	СтруктураТекДанных.Вставить("ЗаборКвартираОтправитель",ТекЗаборКвартираОтправитель);   
	СтруктураТекДанных.Вставить("Ширина",ТекШирина);
	СтруктураТекДанных.Вставить("Длина",ТекДлина);
	СтруктураТекДанных.Вставить("Высота",ТекВысота);
	СтруктураТекДанных.Вставить("ПроверкаНаправлений",ПроверкаНаправлений);
	СтруктураТекДанных.Вставить("ПВЗ",ПВЗ);
	//Ефсол Сережко А.С. -
	
	Возврат СтруктураТекДанных;
	
КонецФункции

&НаСервере
Функция СоздатьНовуюНоменклатуру(НаименованиеТовара,КодТовара,ВесТовара,ДлинаТовара,ВысотаТовара,ШиринаТовара,Опасность, ШтрихкодТовара, ГруппаДляГрузов, СтавкаНДС, СуммаНДС)
	
	//ЕФСОЛ Несторук 11-11-16 +
	//Если НЕ ЗначениеЗаполнено(НаименованиеТовара) Тогда
	//	Возврат Справочники.Номенклатура.ПустаяСсылка();
	//КонецЕсли;
	
	//ЭР Несторук С.И. 25.09.2017 18:08:40 {
	СтруктураПоНоменклатуре = Новый Структура;
	СтруктураПоНоменклатуре.Вставить("Номенклатура",Справочники.Номенклатура.Груз);	
	СтруктураПоНоменклатуре.Вставить("Наименование",НаименованиеТовара);
	СтруктураПоНоменклатуре.Вставить("Артикул",КодТовара);
	СтруктураПоНоменклатуре.Вставить("Вес", ВесТовара);
	СтруктураПоНоменклатуре.Вставить("Длина", ДлинаТовара);
	СтруктураПоНоменклатуре.Вставить("Высота", ВысотаТовара);
	СтруктураПоНоменклатуре.Вставить("Ширина", ШиринаТовара);
	СтруктураПоНоменклатуре.Вставить("Опасность",Опасность);
	СтруктураПоНоменклатуре.Вставить("Штрихкод",ШтрихкодТовара);
	СтруктураПоНоменклатуре.Вставить("СтавкаНДС",СтавкаНДС);
	СтруктураПоНоменклатуре.Вставить("СуммаНДС",СуммаНДС);
	
	Возврат СтруктураПоНоменклатуре;
	
	//}ЭР Несторук С.И.
	
	//мНоменклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",КодТовара);
	//Если ЗначениеЗаполнено(мНоменклатура) Тогда 
	//	мНоменклатура = мНоменклатура.ПолучитьОбъект();
	//Иначе 
	//	мНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
	//КонецЕсли;
	////ЕФСОЛ Несторук 11-11-16 - 
	////мНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
	//
	//мНоменклатура.Наименование 	= НаименованиеТовара;
	//мНоменклатура.НаименованиеПолное 	= НаименованиеТовара;
	//мНоменклатура.КатегорияНоменклатуры = Справочники.КатегорииНоменклатуры.БезКатегории;
	//Если ЗначениеЗаполнено(ГруппаДляГрузов) Тогда
	//	Если ГруппаДляГрузов.ЭтоГруппа = Истина Тогда
	//		мНоменклатура.Родитель = ГруппаДляГрузов;	
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//мНоменклатура.Артикул		= КодТовара;
	//мНоменклатура.ЭР_Вес 		= ВесТовара;
	//мНоменклатура.ЭР_Длина 		= ДлинаТовара;
	//мНоменклатура.ЭР_Высота 	= ВысотаТовара;
	//мНоменклатура.ЭР_Ширина 	= ШиринаТовара;
	//мНоменклатура.ЭР_Опасность 	= Опасность;
	//мНоменклатура.ИсключитьИзПрайсЛистов = Истина;
	//мНоменклатура.ЕдиницаИзмерения 	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");// штуки
	//Если Найти(НаименованиеТовара,"услуга") = 0 Тогда
	//	мНоменклатура.ТипНоменклатуры 	= Перечисления.ТипыНоменклатуры.Запас;
	//Иначе
	//	мНоменклатура.ТипНоменклатуры 	= Перечисления.ТипыНоменклатуры.Услуга;
	//КонецЕсли;
	////ЭР Несторук С.И. 10.03.2017 22:41:12 {
	//Если мНоменклатура.ТипНоменклатуры 	= Перечисления.ТипыНоменклатуры.Запас Тогда
	//	мНоменклатура.МетодОценки 					= Перечисления.МетодОценкиЗапасов.ПоСредней;
	//	мНоменклатура.НаправлениеДеятельности		= Справочники.НаправленияДеятельности.ОсновноеНаправление;
	//	мНоменклатура.СпособПополнения				= Перечисления.СпособыПополненияЗапасов.Закупка;
	//	мНоменклатура.СчетУчетаЗапасов				= ПланыСчетов.Управленческий.СырьеИМатериалы;
	//	мНоменклатура.СчетУчетаЗатрат				= ПланыСчетов.Управленческий.КоммерческиеРасходы;
	//КонецЕсли;
	////}ЭР Несторук С.И.
	//
	//мНоменклатура.Записать();
	////ЕФСОЛ Несторук 11-11-16 +
	//Если ЗначениеЗаполнено(ШтрихкодТовара) Тогда
	//Штирихкод = СоздатьШтрихкодНоменклатуры(мНоменклатура.Ссылка,ШтрихкодТовара);
	//КонецЕсли;
	////ЕФСОЛ Несторук 11-11-16 - 
	//Возврат мНоменклатура.Ссылка;
	
КонецФункции

&НаСервере
Функция СоздатьШтрихкодНоменклатуры (мНоменклатура, ШтрихкодТовара)
	//ЕФСОЛ Несторук 11-11-16 +
	МенеджерЗаписи = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Штрихкод = ШтрихкодТовара;
	МенеджерЗаписи.Номенклатура = мНоменклатура;
	МенеджерЗаписи.ЕдиницаИзмерения = мНоменклатура.ЕдиницаИзмерения;
	
	МенеджерЗаписи.Записать();		
	//ЕФСОЛ Несторук 11-11-16 -
	
КонецФункции


&НаСервере
// Процедура заполняет Ставку НДС в табличной части по системе налогообложения
// организации.
// 
Процедура ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС(НовыйДокумент)
	
	НовыйДокумент.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(НовыйДокумент.Организация,, НовыйДокумент.Дата);
	
	Если НовыйДокумент.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда	
		НовыйДокумент.НДСВключатьВСтоимость = Ложь;
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	Иначе
		НовыйДокумент.НДСВключатьВСтоимость = Истина;
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
	КонецЕсли;	
	
	Для каждого СтрокаТабличнойЧасти Из НовыйДокумент.Запасы Цикл
		
		//ЕФСОЛ Несторук 09-11-16 +
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда  
			//ЕФСОЛ Несторук 09-11-16 -
			
			
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
			//ЕФСОЛ Несторук 09-11-16 +
		КонецЕсли;
		//ЕФСОЛ Несторук 09-11-16 -
		
	КонецЦикла;	
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаСервере
Процедура ЗаполнитьДокДаннымиКонтрагента(НовыйДокумент)
	
	//НовыйДокумент = НовДокСсылка.ПолучитьОбъект();
	Контрагент = НовыйДокумент.Контрагент;
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(НовыйДокумент.Ссылка, Контрагент, НовыйДокумент.Организация,НовыйДокумент.Договор);
	
	НовыйДокумент.Договор = СтруктураДанные.Договор;
	НовыйДокумент.ВалютаДокумента = ?(ЗначениеЗаполнено(СтруктураДанные.ВалютаРасчетов), СтруктураДанные.ВалютаРасчетов, Константы.НациональнаяВалюта.Получить());
	
	Если ЗначениеЗаполнено(НовыйДокумент.Договор) Тогда 
		НовыйДокумент.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
		НовыйДокумент.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
		НовыйДокумент.ВидЦен = СтруктураДанные.ВидЦен;
		НовыйДокумент.ВидСкидкиНаценки = СтруктураДанные.ВидСкидкиНаценки;
		НовыйДокумент.СуммаВключаетНДС = СтруктураДанные.СуммаВключаетНДС;
		////ЭР Несторук С.И. 19.04.2017 9:34:50 {
		//Если СтруктураДанные.СуммаВключаетНДС <> Неопределено Тогда
		//	НовыйДокумент.НДСВключатьВСтоимость = ?(СтруктураДанные.СуммаВключаетНДС, Истина, Ложь);
		//КонецЕсли;
		////}ЭР Несторук С.И.
		
	КонецЕсли;
	
	НовыйДокумент.Записать();
	
КонецПроцедуры // КонтрагентПриИзменении()


// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(НовДокСсылка, Контрагент, Организация, Договор)
	
	//ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(НовДокСсылка, Контрагент, Организация, Перечисления.ВидыОперацийЗаказПокупателя.ES_ЗаказНаДоставку);
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
	"Договор",
	Договор
	);
	
	СтруктураДанные.Вставить(
	"ВалютаРасчетов",
	Договор.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
	"ВалютаРасчетовКурсКратность",
	РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.ДатаДокументаПоУмолчанию, Новый Структура("Валюта", Договор.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
	"РасчетыВУсловныхЕдиницах",
	Договор.РасчетыВУсловныхЕдиницах
	);
	
	СтруктураДанные.Вставить(
	"ВидСкидкиНаценки",
	Договор.ВидСкидкиНаценки
	);
	
	СтруктураДанные.Вставить(
	"ВидЦен",
	Договор.ВидЦен
	);
	
	СтруктураДанные.Вставить(
	"СуммаВключаетНДС",
	?(ЗначениеЗаполнено(Договор.ВидЦен), Договор.ВидЦен.ЦенаВключаетНДС, Неопределено)
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает договор по умолчанить в зависимости от способа ведения расчетов.
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Контрагент.ДоговорПоУмолчанию;
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

&НаСервере
Процедура ДобавитьУслугуДоставкиВТчТовары(НовыйДокумент, СтруктураУслугиДоставки)
	
	//EFSOL_Шаповал Олег Анатольевич 8 ноября 2016 г. 13:08:25 +
	УслДоставки = НовыйДокумент.Запасы.Найти(СтруктураУслугиДоставки.УслугаДоставки,"Номенклатура");
	
	Если НЕ УслДоставки = Неопределено Тогда
		//Услуга уже добавлена
		Возврат;
	КонецЕсли;
	//EFSOL Шаповал О.А. -
	
	
	СтрокаТабличнойЧасти = НовыйДокумент.Запасы.Добавить();
	СтрокаТабличнойЧасти.Номенклатура = СтруктураУслугиДоставки.УслугаДоставки;
	СтрокаТабличнойЧасти.Характеристика = СтруктураУслугиДоставки.Характеристика;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", НовыйДокумент.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("НалогообложениеНДС", НовыйДокумент.НалогообложениеНДС);
	
	Если ЗначениеЗаполнено(НовыйДокумент.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки", НовыйДокумент.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", НовыйДокумент.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", НовыйДокумент.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", НовыйДокумент.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", НовыйДокумент.ВидСкидкиНаценки);
		
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Цена = ?(ЗначениеЗаполнено(СтруктураУслугиДоставки.СтоимостьУслуги),СтруктураУслугиДоставки.СтоимостьУслуги,СтруктураДанные.Цена);
	СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.Содержание = "";
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
	СтрокаТабличнойЧасти.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
	
	СтрокаТабличнойЧасти.Количество 	= 1;
	СтрокаТабличнойЧасти.ДатаОтгрузки 	= НовыйДокумент.ES_ДатаДоставки;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(НовыйДокумент, СтрокаТабличнойЧасти);
	ПересчитатьСтоимостьДоставки(НовыйДокумент);
	
КонецПроцедуры 

&НаСервере
Процедура ДобавитьДоставкуСКлиентаВТЧГрузы(НовыйДокумент, СтрокаДокумента, НоменклатураДоставкиСКлиента)
	
	//EFSOL_Шаповал Олег Анатольевич 8 ноября 2016 г. 13:08:25 +
	//Товар = НовыйДокумент.Запасы.Найти(СтрокаДокумента.Товар,"Номенклатура");
	//ЭР Несторук С.И. 23.02.2017 15:50:11 {
	Если НЕ ЗначениеЗаполнено(НоменклатураДоставкиСКлиента) ТОгда
		Возврат;
	КонецЕсли;
	НайтиСтроки = НовыйДокумент.ES_Грузы.НайтиСтроки(Новый Структура("Номенклатура", НоменклатураДоставкиСКлиента));
	Если НайтиСтроки.Количество() > 0 Тогда
		ЭтоНоваяСтрока = Ложь;
		СтрокаТабличнойЧасти = НайтиСтроки[0];
	Иначе
		ЭтоНоваяСтрока = Истина;
		//}ЭР Несторук С.И.
		СтрокаТабличнойЧасти = НовыйДокумент.ES_Грузы.Добавить();
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Номенклатура = НоменклатураДоставкиСКлиента;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", НовыйДокумент.Организация);
	СтруктураДанные.Вставить("Номенклатура", НоменклатураДоставкиСКлиента);
	СтруктураДанные.Вставить("НалогообложениеНДС", НовыйДокумент.НалогообложениеНДС);
	
	Если ЗначениеЗаполнено(НовыйДокумент.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки", НовыйДокумент.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", НовыйДокумент.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", НовыйДокумент.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", НовыйДокумент.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", НовыйДокумент.ВидСкидкиНаценки);
		
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения 		= СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество 			= 1;
	//ЭР Несторук С.И. 06.03.2017 17:10:48 {
	//СтрокаТабличнойЧасти.Цена 				= СтрокаДокумента.СтоимостьТовара/?(СтрокаДокумента.КоличествоТовара = 0,1,СтрокаДокумента.КоличествоТовара);
	СтрокаТабличнойЧасти.Цена 					= СтрокаДокумента.ДоставкаСКлиента;
	//}ЭР Несторук С.И.
	СтрокаТабличнойЧасти.ПроцентСкидкиНаценки 	= СтруктураДанные.ПроцентСкидкиНаценки;
	СтрокаТабличнойЧасти.НППлан 				= СтрокаДокумента.ДоставкаСКлиента;
	СтрокаТабличнойЧасти.Содержание 			= НоменклатураДоставкиСКлиента.НаименованиеПолное;
	
	//EFSOL Шаповал О.А. -
	//ЕФСОЛ Несторук 09-11-16 +
	Если НЕ ЭтоНоваяСтрока Тогда
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(СтрокаТабличнойЧасти);
		ТЗ = НовыйДокумент.ES_Грузы.Выгрузить(МассивСтрок);
		НовыйДокумент.ES_Грузы.Удалить(СтрокаТабличнойЧасти);
		НоваяСтрока = НовыйДокумент.ES_Грузы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТЗ[0]);                             
	КонецЕсли;
	
	ПересчитатьИтоги(НовыйДокумент);
	//ЕФСОЛ Несторук 09-11-16 -
КонецПроцедуры


&НаСервере
Процедура ДобавитьТоварВТчГрузы(НовыйДокумент, СтрокаДокумента, Коэффициент)
	
	//ЭР Несторук С.И. 25.09.2017 18:20:05 {
	//Передаваемый в процедуру товар "СтрокаДокумента.Товар" - это структура!!!!
	//}ЭР Несторук С.И.
	//EFSOL_Шаповал Олег Анатольевич 8 ноября 2016 г. 13:08:25 +
	//Товар = НовыйДокумент.Запасы.Найти(СтрокаДокумента.Товар,"Номенклатура");
	//ЭР Несторук С.И. 23.02.2017 15:50:11 {
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Товар.Наименование) Тогда
		Возврат;
	КонецЕсли;
	//}ЭР Несторук С.И.
	СтрокаТабличнойЧасти = НовыйДокумент.ES_Грузы.Добавить();
	СтрокаТабличнойЧасти.Номенклатура = СтрокаДокумента.Товар.Номенклатура;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", НовыйДокумент.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаДокумента.Товар.Номенклатура);
	СтруктураДанные.Вставить("НалогообложениеНДС", НовыйДокумент.НалогообложениеНДС);
	
	Если ЗначениеЗаполнено(НовыйДокумент.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки", НовыйДокумент.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", НовыйДокумент.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", НовыйДокумент.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", НовыйДокумент.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", НовыйДокумент.ВидСкидкиНаценки);
		
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения 		= СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество 			= СтрокаДокумента.КоличествоТовара;
	//ЭР Несторук С.И. 06.03.2017 17:10:48 {
	//СтрокаТабличнойЧасти.Цена 				= СтрокаДокумента.СтоимостьТовара/?(СтрокаДокумента.КоличествоТовара = 0,1,СтрокаДокумента.КоличествоТовара);
	СтрокаТабличнойЧасти.Цена 					= СтрокаДокумента.СтоимостьТовара;
	//}ЭР Несторук С.И.
	СтрокаТабличнойЧасти.ПроцентСкидкиНаценки 	= СтруктураДанные.ПроцентСкидкиНаценки;
	СтрокаТабличнойЧасти.НППлан 				= СтрокаДокумента.СтоимостьТовара*СтрокаДокумента.КоличествоТовара;
	СтрокаТабличнойЧасти.Содержание 			= СтрокаДокумента.Товар.Наименование;
	СтрокаТабличнойЧасти.Опасность 				= СтрокаДокумента.Товар.Опасность;
	СтрокаТабличнойЧасти.ВесЗаЕдиницу			= СтрокаДокумента.Товар.Вес;
	СтрокаТабличнойЧасти.Вес 					= СтрокаДокумента.Товар.Вес*СтрокаДокумента.КоличествоТовара;
	//ЭР Несторук С.И. 29.09.2017 19:13:51 {
	//Теперь габаринты указываются в метрах
	//}ЭР Несторук С.И.
	СтрокаТабличнойЧасти.Объем 					= СтрокаДокумента.Товар.Длина * СтрокаДокумента.Товар.Высота * СтрокаДокумента.Товар.Ширина;	
	СтрокаТабличнойЧасти.ОбъемныйВес			= ?(Коэффициент = 0 , 0,Окр(СтрокаДокумента.Товар.Длина * СтрокаДокумента.Товар.Высота * СтрокаДокумента.Товар.Ширина *(100*100*100)/ Коэффициент, 3));
	СтрокаТабличнойЧасти.ОбьявленнаяСтоимость   = СтрокаДокумента.ОбьявСтоимостьТовара;
	СтрокаТабличнойЧасти.Артикул				= СтрокаДокумента.Товар.Артикул;
	СтрокаТабличнойЧасти.Штрихкод				= СтрокаДокумента.Товар.Штрихкод;
	//ES_Савченко К.Р. 10.08.2017 +
	СтрокаТабличнойЧасти.СтавкаНДС              = СтрокаДокумента.Товар.СтавкаНДС;
	СтрокаТабличнойЧасти.СуммаНДС               = СтрокаДокумента.Товар.СуммаНДС;
	Если СтрокаТабличнойЧасти.СуммаНДС = 0 Тогда
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС); 		
		СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.НпПлан - (СтрокаТабличнойЧасти.НпПлан) / ((СтавкаНДС + 100) / 100);		
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Высота              	= СтрокаДокумента.Товар.Высота;
	СтрокаТабличнойЧасти.Длина              	= СтрокаДокумента.Товар.Длина;
	СтрокаТабличнойЧасти.Ширина              	= СтрокаДокумента.Товар.Ширина;
	//ES_Савченко К.Р. 10.08.2017 +
	//РассчитатьСуммуВСтрокеТабличнойЧасти(НовыйДокумент, СтрокаТабличнойЧасти);
	//ПересчитатьСтоимостьДоставки(НовыйДокумент);
	
	//EFSOL Шаповал О.А. -
	//ЕФСОЛ Несторук 09-11-16 +
	ПересчитатьИтоги(НовыйДокумент);
	//ЕФСОЛ Несторук 09-11-16 -
КонецПроцедуры

&НаСервере
Процедура ДобавитьУслугуРКОВТчТовары(НовыйДокумент)
	
	Если НовыйДокумент.ES_Грузы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовыйДокумент.ES_ВидОплаты) Тогда
		Возврат;
	КонецЕсли;
	
	УслугаРКО		 = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.УслугаРКО);
	Если НЕ ЗначениеЗаполнено(УслугаРКО) Тогда 
		Возврат;
	КонецЕсли;
	
	
	ПроцентРКО = ПолучитьПроцентРКО(НовыйДокумент.Контрагент, НовыйДокумент.ES_ВидОплаты);
	Если НЕ ЗначениеЗаполнено(ПроцентРКО) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщаяСуммаТоваров = НовыйДокумент.ES_Грузы.Итог("НППлан");
	Если ОбщаяСуммаТоваров = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", НовыйДокумент.Организация);
	СтруктураДанные.Вставить("Номенклатура", УслугаРКО);
	//СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("НалогообложениеНДС", НовыйДокумент.НалогообложениеНДС);
	
	Если ЗначениеЗаполнено(НовыйДокумент.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки", НовыйДокумент.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", НовыйДокумент.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", НовыйДокумент.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", НовыйДокумент.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", НовыйДокумент.ВидСкидкиНаценки);
		
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	НайденнаяСтрока = НовыйДокумент.Запасы.НайтиСтроки(Новый Структура("Номенклатура", УслугаРКО));
	Если НайденнаяСтрока.Количество() > 0 Тогда
		СтрокаТабличнойЧасти = НайденнаяСтрока[0];
	Иначе
		СтрокаТабличнойЧасти = НовыйДокумент.Запасы.Добавить();
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Номенклатура = УслугаРКО;
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Цена = ОбщаяСуммаТоваров*ПроцентРКО/100;
	СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.Содержание = "";
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
	СтрокаТабличнойЧасти.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
	
	СтрокаТабличнойЧасти.Количество 	= 1;
	СтрокаТабличнойЧасти.ДатаОтгрузки 	= НовыйДокумент.ES_ДатаДоставки;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(НовыйДокумент, СтрокаТабличнойЧасти);
	ПересчитатьСтоимостьДоставки(НовыйДокумент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПроцентРКО(Контрагент, ВидОплаты)
	
	ПроцентРКО = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ES_ПроцентКомиссииНал, 0) КАК ПроцентНал,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ES_ПроцентКомиссииБезнал, 0) КАК ПроцентБезнал
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Выборка.Следующий();
		
		Если ВидОплаты = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
			ПроцентРКО = Выборка.ПроцентБезнал;
		Иначе 
			ПроцентРКО = Выборка.ПроцентНал;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПроцентРКО;
	
	
КонецФункции

&НаСервере
Процедура ДобавитьУслугуСтраховкиВТчТовары(НовыйДокумент)
	
	УслугаСтраховки = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.УслугаСтраховки);
	ПроцентСтраховки = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ПроцентСтраховки);
	
	Если ЗначениеЗаполнено(УслугаСтраховки) И ЗначениеЗаполнено(ПроцентСтраховки) И ЗначениеЗаполнено(НовыйДокумент.ES_ОбьявленнаяСтоимость) Тогда
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", НовыйДокумент.Организация);
		СтруктураДанные.Вставить("Номенклатура", УслугаСтраховки);
		//СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("НалогообложениеНДС", НовыйДокумент.НалогообложениеНДС);
		
		Если ЗначениеЗаполнено(НовыйДокумент.ВидЦен) Тогда
			
			СтруктураДанные.Вставить("ДатаОбработки", НовыйДокумент.Дата);
			СтруктураДанные.Вставить("ВалютаДокумента", НовыйДокумент.ВалютаДокумента);
			СтруктураДанные.Вставить("СуммаВключаетНДС", НовыйДокумент.СуммаВключаетНДС);
			СтруктураДанные.Вставить("ВидЦен", НовыйДокумент.ВидЦен);
			СтруктураДанные.Вставить("Коэффициент", 1);
			СтруктураДанные.Вставить("ВидСкидкиНаценки", НовыйДокумент.ВидСкидкиНаценки);
			
		КонецЕсли;
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		НайденнаяСтрока = НовыйДокумент.Запасы.НайтиСтроки(Новый Структура("Номенклатура", УслугаСтраховки));
		Если НайденнаяСтрока.Количество() > 0 Тогда
			СтрокаТабличнойЧасти = НайденнаяСтрока[0];
		Иначе
			СтрокаТабличнойЧасти = НовыйДокумент.Запасы.Добавить();
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Номенклатура = УслугаСтраховки;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Количество = 1;
		СтрокаТабличнойЧасти.Цена = НовыйДокумент.ES_ОбьявленнаяСтоимость*ПроцентСтраховки/100;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
		СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		СтрокаТабличнойЧасти.Содержание = "";
		СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
		
		СтрокаТабличнойЧасти.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
		
		СтрокаТабличнойЧасти.Количество 	= 1;
		СтрокаТабличнойЧасти.ДатаОтгрузки 	= НовыйДокумент.ES_ДатаДоставки;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти(НовыйДокумент, СтрокаТабличнойЧасти);
		ПересчитатьСтоимостьДоставки(НовыйДокумент);
		
	КонецЕсли;
	
	
	
КонецПроцедуры


// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	//ЭР Несторук С.И. 25.09.2017 16:48:55 {
	ЕдИзмеренияШтуки = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");//Шт
	//}ЭР Несторук С.И.
	СтруктураДанные.Вставить("ЕдиницаИзмерения", ?(ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ЕдиницаИзмерения),СтруктураДанные.Номенклатура.ЕдиницаИзмерения,ЕдИзмеренияШтуки));
	
	СтруктураДанные.Вставить("ЭтоУслуга", СтруктураДанные.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	СтруктураДанные.Вставить("ЭтоЗапас", СтруктураДанные.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас);
	
	Если СтруктураДанные.Свойство("НормаВремени") Тогда		
		СтруктураДанные.НормаВремени = УправлениеНебольшойФирмойСервер.ПолучитьНормуВремениРаботы(СтруктураДанные);		
	КонецЕсли;	
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС") 
		И НЕ СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;	
		
	ИначеЕсли ЗначениеЗаполнено(ES_ОбщегоНазначения.ПолучитьСтавкуНДСНоменклатуры(СтруктураДанные.Номенклатура)) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", ES_ОбщегоНазначения.ПолучитьСтавкуНДСНоменклатуры(СтруктураДанные.Номенклатура));
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию));
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("Характеристика") Тогда
		СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
	Иначе
		СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура));
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда	
			СтруктураДанные.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());	
		КонецЕсли;
		
		Если СтруктураДанные.Свойство("ВидРабот") Тогда
			
			Если СтруктураДанные.Номенклатура.ФиксированнаяСтоимость Тогда		
				
				Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
				СтруктураДанные.Вставить("Цена", Цена);
				
			Иначе
				
				СтруктураДанные.Номенклатура = СтруктураДанные.ВидРабот;
				СтруктураДанные.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
				СтруктураДанные.Вставить("Цена", Цена);
				
			КонецЕсли;	
			
		Иначе
			
			Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
			СтруктураДанные.Вставить("Цена", Цена);	
			
		КонецЕсли;				
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;	
	
	Если СтруктураДанные.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	Иначе	
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Процедура рассчитывает сумму в строке табличной части.
//
&НаСервере
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(НовыйДокумент, СтрокаТабличнойЧасти)
	
	// Сумма.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	// Скидки.
	Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
		СтрокаТабличнойЧасти.Сумма = 0;
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * (1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
	КонецЕсли;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(НовыйДокумент, СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(НовыйДокумент.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()	

// Рассчитывается сумма НДС в строке табличной части.
//
&НаСервере
Процедура РассчитатьСуммуНДС(НовыйДокумент, СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(НовыйДокумент.СуммаВключаетНДС, 
	СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
	СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // ПересчитатьСуммыДокумента() 

&НаСервере
Процедура ПересчитатьСтоимостьДоставки(НовыйДокумент)
	
	НовСтоимостьДоставки = 0;
	Для каждого Строка Из НовыйДокумент.Запасы Цикл
		Если НЕ Строка.ТипНоменклатурыЗапас Тогда
			НовСтоимостьДоставки = НовСтоимостьДоставки + Строка.Сумма;
		КонецЕсли; 
	КонецЦикла;
	
	НовыйДокумент.ES_СтоимостьДоставки = НовСтоимостьДоставки;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьИтоги(НовыйДокумент)
	
	Если НовыйДокумент.ES_Грузы.Количество() > 0 Тогда 
		НовыйДокумент.ES_НППлан			 	= НовыйДокумент.ES_Грузы.Итог("НППлан");
		
		НовыйДокумент.ES_ОбщийОбъемныйВес	= НовыйДокумент.ES_Грузы.Итог("ОбъемныйВес");
		НовыйДокумент.ES_ОбьявленнаяСтоимость = НовыйДокумент.ES_Грузы.Итог("ОбьявленнаяСтоимость");
		НовыйДокумент.ES_Объем				= НовыйДокумент.ES_Грузы.Итог("Объем");
		
	КонецЕсли;
	ВесПоТАблице = НовыйДокумент.ES_Грузы.Итог("Вес");
	Если ВесПоТАблице > 0 Тогда
		НовыйДокумент.ES_ОбщийВес 			= ВесПоТАблице;
	КонецЕсли;
	//ЭР Несторук С.И. 28.02.2017 9:29:42 {
	Если НовыйДокумент.ES_Предоплачен = Истина Тогда
		НовыйДокумент.ES_НППлан			 	= 0;
	КонецЕсли;
	
	ВысотаПоТАблице = НовыйДокумент.ES_Грузы.Итог("Высота");
	ДлинаПоТАблице = НовыйДокумент.ES_Грузы.Итог("Длина");
	ШиринаПоТАблице = НовыйДокумент.ES_Грузы.Итог("Ширина");
	Если ШиринаПоТАблице > 0 Тогда
		НовыйДокумент.Ширина = ШиринаПоТАблице;
	КонецЕсли;
	Если ДлинаПоТАблице > 0 Тогда
		НовыйДокумент.Длина = ДлинаПоТАблице;
	КонецЕсли;
	Если ВысотаПоТАблице > 0 Тогда
		НовыйДокумент.Высота = ВысотаПоТАблице;
	КонецЕсли;
	//}ЭР Несторук С.И.
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикПриИзменении(Элемент)
	ЗаказчикПриИзмененииНаСервере(Объект.Настройка);
КонецПроцедуры

&НаСервере
Процедура ЗаказчикПриИзмененииНаСервере(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ES_НастройкиЗагрузкиМанифестов.Ссылка
	|ИЗ
	|	Справочник.ES_НастройкиЗагрузкиМанифестов КАК ES_НастройкиЗагрузкиМанифестов
	|ГДЕ
	|	ES_НастройкиЗагрузкиМанифестов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		мОбъект = Выборка.Ссылка.ПолучитьОбъект();
		мОбъект.Контрагент = Заказчик;
		мОбъект.Записать();
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле = "Объект.Настройка";
		Сообщение.Текст = "Поле ""Шаблон"" не заполнено";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаСервере
Функция	ПолучитьМетроИРасстояние(Координаты1,Координаты2)
	PI = 3.1415926535897932; 
	Регион = ДобавитьМетроНаСервере(Координаты1.Имя, Координаты1.ЛинияМетро);
	
	Lt1 = Координаты1.Долгота;
	Lg1 = Координаты1.Широта;
	
	Lt2 = Координаты2.Долгота;
	Lg2 = Координаты2.Широта;
	Если ЗначениеЗаполнено(Lt1) И ЗначениеЗаполнено(Lg1) 
		И ЗначениеЗаполнено(Lt2) И ЗначениеЗаполнено(Lg2) И НЕ Lt1=Lt2 И НЕ Lg1 =Lg2 Тогда
		
		abs = (PI*Lg2/180- PI*Lg1/180);
		
		Если abs < 0 Тогда
			abs = abs* -1;
		КонецЕсли;
		Попытка
			dist = 6372797*acos(sin(PI*Lt1/180)*sin(PI*Lt2/180)+ cos(PI*Lt1/180)* cos(PI*Lt2/180)* cos(abs));							
			dist = ""+Окр((dist/1000),2)+" км";
			Возврат Новый Структура("Регион, Расстояние", Регион, dist);
			
		Исключение
			
			Возврат  Новый Структура ("Регион, Расстояние", Справочники.ES_Регионы.ПустаяСсылка(), "");
			
		КонецПопытки;
		
	Иначе 
		Возврат  Новый Структура ("Регион, Расстояние", Справочники.ES_Регионы.ПустаяСсылка(), "");
	КонецЕсли;
КонецФункции

&НаСервере
Функция ДобавитьМетроНаСервере(Метро, ЛинияМетро = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ES_Регионы.Ссылка
	|ИЗ
	|	Справочник.ES_Регионы КАК ES_Регионы
	|ГДЕ
	|	ES_Регионы.Наименование = &Наименование
	|	И ES_Регионы.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Наименование", Метро);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
		
	Иначе
		Если Метро = "..." ИЛИ НЕ ЗначениеЗаполнено(Метро) Тогда
			Возврат Справочники.ES_Регионы.ПустаяСсылка();
		Иначе
			
			НовыйЭлемент = Справочники.ES_Регионы.СоздатьЭлемент();
			НовыйЭлемент.Наименование = Метро;
			НовыйЭлемент.ЛинияМетро = ЛинияМетро;
			НовыйЭлемент.Записать();
			
			Возврат НовыйЭлемент.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецФункции

&НаСервере 
Функция ДобавитьТипГрузаНаСервере(ТипГруза)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ES_ТипыГрузов.Ссылка
	|ИЗ
	|	Справочник.ES_ТипыГрузов КАК ES_ТипыГрузов
	|ГДЕ
	|	ES_ТипыГрузов.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", ТипГруза);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
		Если НЕ ЗначениеЗаполнено(ТипГруза) Тогда
			Возврат Справочники.ES_ТипыГрузов.ПустаяСсылка();
		Иначе 
			мОбъект = Справочники.ES_ТипыГрузов.СоздатьЭлемент();
			мОбъект.Наименование = ТипГруза;
			мОбъект.Записать();
			Возврат мОбъект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	
	
КонецФункции

&НаСервере
Функция ДобавитьЗаказчикаПоКоду(Код)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", Код);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ТекЗаказчик = Выборка.Ссылка;
		
	Иначе
		
		ТекЗаказчик = ES_ОбщегоНазначения.СоздатьКонтрагентаПоКоду(Код);
		Сообщить("Создан новый контрагент. Наименование контрагента: " + Код+ ". Код контрагента: " + Код); 
	КонецЕсли;
	
	Возврат ТекЗаказчик;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруКодовСрочности(СтартНастройки)
	
	КодСтандартная 		= СтартНастройки.Метка1Код;
	КодСрочная			= СтартНастройки.Метка2Код;
	КодСверхсрочная		= СтартНастройки.Метка3Код;
	Структура  = Новый Структура;
	Структура.Вставить("Стандартная", 	КодСтандартная);
	Структура.Вставить("Срочная", 		КодСрочная);
	Структура.Вставить("Сверхсрочная",	КодСверхсрочная);
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруКодовВидовДоставки(СтартНастройки)
	
	КодСкладДвери				= СтартНастройки.КодСкладДвери;
	КодДвериДвериПодЗаказ		= СтартНастройки.КодДвериДвери;
	//КодДвериДвериУпрощенный		= СтартНастройки.КодДвериДвериУпрощенный;
	//КодСамовывоз		 		= СтартНастройки.КодСамовывоз;
	КодТерминалТерминал			= СтартНастройки.КодТерминалТерминал;	
	КодТерминалПВЗ 				= СтартНастройки.КодТерминалПВЗ;
	Структура = Новый Структура;
	
	Структура.Вставить("СкладДвери", 			КодСкладДвери);
	Структура.Вставить("ДвериДвериПодЗаказ",	КодДвериДвериПодЗаказ);
	//Структура.Вставить("ДвериДвериУпрощенный", 	КодДвериДвериУпрощенный);
	//Структура.Вставить("Самовывоз", 			КодСамовывоз);
	Структура.Вставить("ТерминалТерминал", 		КодТерминалТерминал);
	Структура.Вставить("ТерминалПВЗ", 			КодТерминалПВЗ);
	
	Возврат Структура;
	
КонецФункции

&НаСервере 
Функция ОпределитьТекСрочность(СтруктураКодовСрочности, КодСрочности)
	
	мСрочность = Неопределено;
	
	Если КодСрочности = СтруктураКодовСрочности.Стандартная ТОгда
		мСрочность = Перечисления.ES_СрочностьДоставки.Стандартная;
	ИначеЕсли КодСрочности = СтруктураКодовСрочности.Сверхсрочная Тогда
		мСрочность = Перечисления.ES_СрочностьДоставки.Сверхсрочная;
	ИначеЕсли КодСрочности = СтруктураКодовСрочности.Срочная Тогда
		мСрочность = Перечисления.ES_СрочностьДоставки.Срочная;
	КонецЕсли;
	
	Возврат мСрочность;
	
КонецФункции

&НаСервере
Функция ОпределитьВидДоставки(СтруктураКодовВидовДоставки, КодВидаДоставки, УточнитьВидЗабора = Ложь)
	
	Если УточнитьВидЗабора = Ложь Тогда
		
		мВидДоставки = Неопределено;
		
		Если КодВидаДоставки = СтруктураКодовВидовДоставки.СкладДвери Тогда
			мВидДоставки = Перечисления.ES_ВидыДоставки.СкладДвери;
		ИначеЕсли КодВидаДоставки = СтруктураКодовВидовДоставки.ДвериДвериПодЗаказ Тогда
			//ИЛИ КодВидаДоставки = СтруктураКодовВидовДоставки.ДвериДвериУпрощенный Тогда
			мВидДоставки = Перечисления.ES_ВидыДоставки.ДвериДвери;
		//ИначеЕсли КодВидаДоставки = СтруктураКодовВидовДоставки.Самовывоз Тогда
		//	мВидДоставки = Перечисления.ES_ВидыДоставки.Самовывоз;
		ИначеЕсли КодВидаДоставки = СтруктураКодовВидовДоставки.ТерминалТерминал Тогда
			мВидДоставки = Перечисления.ES_ВидыДоставки.СкладСклад;
		ИначеЕсли КодВидаДоставки = СтруктураКодовВидовДоставки.ТерминалПВЗ Тогда
			мВидДоставки = Перечисления.ES_ВидыДоставки.Самовывоз;
		КонецЕсли;
		
		Возврат мВидДоставки;
		
	Иначе
		
		мВидЗабора = Перечисления.ES_ВидыЗабора.ПодЗаказ;
		//Если КодВидаДоставки = СтруктураКодовВидовДоставки.ДвериДвериУпрощенный  Тогда
		//	мВидЗабора = Перечисления.ES_ВидыЗабора.Упрощенный;
		//КонецЕсли;
		
		Возврат мВидЗабора;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция МассивПродолжениеНаСервере(Лист)
	
	КолСтрок = Лист.UsedRange.Rows.Count;
	КолСтолбцов = Лист.UsedRange.Columns.Count;
	
	МассивВнешний = Новый Массив;	
	
	КолПустыхСтрок = 0;
	
	Для сч = 1 По КолСтрок + 1 Цикл
		
		//проверка что мы читаем не пустые строки
		Колонка1 = Лист.Cells(сч,1).Text;
		Колонка2 = Лист.Cells(сч,2).Text;
		Колонка3 = Лист.Cells(сч,3).Text;
		
		Если Не ЗначениеЗаполнено(Колонка1) И Не ЗначениеЗаполнено(Колонка2) И Не ЗначениеЗаполнено(Колонка3) Тогда
			КолПустыхСтрок = КолПустыхСтрок + 1;
		КонецЕсли;
		
		Если КолПустыхСтрок > 10 Тогда 
			Прервать;
		КонецЕсли;
		//
		
		МассивВнутренний = Новый Массив;
		Для СчСт = 0 По КолСтолбцов Цикл
			
			МассивВнутренний.Добавить(Лист.Cells(сч,СчСт + 1).Text);
			
		КонецЦикла;
		
		МассивВнешний.Добавить(МассивВнутренний);
		
	КонецЦикла;
	
	Возврат МассивВнешний;
	
КонецФункции

&НаСервере
Процедура ОбновитьСтоимостьДоставкиИДопУслуг(НовыйДокумент,СтартНастройки, МассивСообщений)
	//EFSOL_Шаповал Олег Анатольевич 16 марта 2017 г. 17:58:26 +
	
	Если СтартНастройки.УслугаДоставки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	мУслуга = СтартНастройки.УслугаДоставки;
	
	НовыйДокумент.Запасы.Очистить();
	
	МассивСтрок = НовыйДокумент.Запасы.НайтиСтроки(Новый Структура("Номенклатура",мУслуга));
	
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаДоставки = МассивСтрок[0];
	Иначе		
		СтрокаДоставки = НовыйДокумент.Запасы.Добавить();
		//СтрокаДоставки.Количество = 1;
		СтрокаДоставки.ЕдиницаИзмерения = мУслуга.ЕдиницаИзмерения;
		СтрокаДоставки.СтавкаНДС = ES_ОбщегоНазначения.ПолучитьСтавкуНДСНоменклатуры(мУслуга);
		СтрокаДоставки.Номенклатура = мУслуга;
	КонецЕсли;
	
	СтрокаДоставки.Количество = 1;
	мВес = ?(НовыйДокумент.Договор.ES_РасчетТарифовОтМаксимальногоВеса, Макс(НовыйДокумент.ES_ОбщийВес,НовыйДокумент.ES_ОбщийОбъемныйВес),НовыйДокумент.ES_ОбщийВес);
	СтруктураВозврата = ES_ОбщегоНазначенияКлиентСервер.ЭР_ОбновитьСтоимостьДоставки(НовыйДокумент.Дата, НовыйДокумент.Договор, НовыйДокумент.ES_ЗонаДоставки, мВес,НовыйДокумент.ES_СрочностьДоставки,НовыйДокумент.ES_ВидДоставки,НовыйДокумент.Контрагент.ES_ВидКонтрагента);
	//СтрокаДоставки.Цена = 0;	
	СтрокаДоставки.Цена = СтруктураВозврата.Цена*НовыйДокумент.ES_ВнутризональныйКоэф;
	СтрокаДоставки.Сумма = СтрокаДоставки.Цена * СтрокаДоставки.Количество;
	СтрокаДоставки.СуммаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаДоставки.СтавкаНДС)*СтруктураВозврата.Цена/100;
	СтрокаДоставки.Всего = СтрокаДоставки.Цена + ?(НовыйДокумент.СуммаВключаетНДС, 0, СтрокаДоставки.СуммаНДС);
	СтрокаДоставки.ДатаОтгрузки = ТекущаяДата();
	
	Если СтрокаДоставки.Цена = 0 Тогда
		НовыйДокумент.ES_ДоУточнения = Истина;
		//ES_Савченко К.Р. 02.10.2017+
		НовыйДокумент.ES_ДанныеОбработанДоУточнения = "" + ПользователиКлиентСервер.ТекущийПользователь() + ", " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ""в"" ЧЧ:мм'");	
		//ES_Савченко К.Р. 02.10.2017-
		Сообщение = "Тариф не рассчитан "+НовыйДокумент;
		Сообщение = СтрЗаменить(Сообщение,"(не проведен)","");
		МассивСообщений.Добавить(Сообщение);
		//Сообщить("Тариф не рассчитан "+НовыйДокумент);
	КонецЕсли;
	
	//Теперь добавим сбор если он нужен
	ОбновитьСтоимостьУслугиСбора(НовыйДокумент,СтартНастройки,мВес); 
	ОбновитьСтоимостьОбязательныхУслуг(НовыйДокумент,СтартНастройки,СтрокаДоставки.Цена,мВес);
	
	//НовыйДокумент.ES_СрокДоставки = СтруктураВозврата.Срок;
	
	//EFSOL Шаповал О.А. -	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтоимостьУслугиСбора(НовыйДокумент,СтартНастройки,мВес)
	
	Если НовыйДокумент.ES_ВидДоставки = Перечисления.ES_ВидыДоставки.ДвериДвери тогда  		
		УслугаСбора = СтартНастройки.УслугаСбора;
		Если УслугаСбора.Пустая() Тогда
			Возврат;
		КонецЕсли;
		СТ_Поиска = Новый Структура;
		СТ_Поиска.Вставить("Номенклатура",УслугаСбора); 
		НайтиСтроки =  НовыйДокумент.Запасы.НайтиСтроки(СТ_Поиска);
		Если НайтиСтроки.Количество()>0 Тогда 
			НоваяСтрока = НайтиСтроки[0];
		Иначе   		
			НоваяСтрока =  НовыйДокумент.Запасы.Добавить();
		КонецЕсли;	
		НоваяСтрока.Номенклатура = УслугаСбора;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.ДатаОтгрузки = ТекущаяДата();
		//НоваяСтрока.СтавкаНДС = УслугаСбора.СтавкаНДС;
		
		Таб = Новый ТаблицаЗначений;
		Таб.Колонки.Добавить("Номенклатура"); 	
		Таб.Колонки.Добавить("Цена");
		Стр = Таб.Добавить();
		Стр.Номенклатура = УслугаСбора;
		Стр.Цена = 0;
		
		//мВес = ?(НовыйДокумент.Договор.ES_РасчетТарифовОтМаксимальногоВеса, Макс(НовыйДокумент.ES_ОбщийВес,НовыйДокумент.ES_ОбщийОбъемныйВес),НовыйДокумент.ES_ОбщийВес);
		
		Ответ = ES_ОбщегоНазначенияКлиентСервер.ЭР_ОбновитьУслугиТЧДоставки(Таб, НовыйДокумент.Дата, НовыйДокумент.Договор,0,0,0,мВес);
		////Возврат Таб;    
		НоваяЦена = Таб.ВыгрузитьКолонку("Цена");
		
		НоваяСтрока.Цена = ?(НоваяЦена.Количество() <> 0, НоваяЦена[0],  0);
		НоваяСтрока.Сумма = НоваяСтрока.Цена*НоваяСтрока.Количество;
		НоваяСтрока.СтавкаНДС = ES_ОбщегоНазначения.ПолучитьСтавкуНДСНоменклатуры(УслугаСбора);
		НоваяСтрока.СуммаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС)*НоваяСтрока.Цена/100;
		
		// Всего.
		НоваяСтрока.Всего = НоваяСтрока.Сумма + НоваяСтрока.СуммаНДС;  			
		
		Если НоваяСтрока.Цена = 0 Тогда
			НовыйДокумент.Запасы.Удалить(НоваяСтрока);
		КонецЕсли;
		
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтоимостьОбязательныхУслуг(НовыйДокумент,СтартНастройки,СтоимостьДоставки,мВес)
	
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("Номенклатура");
	Таб.Колонки.Добавить("Количество");
	Таб.Колонки.Добавить("Цена");
	
	// позднее время
	Если Константы.ES_ПозднееВремя.Получить() <= НовыйДокумент.ES_ВремяДоставкиПо Тогда
		Артикул = "1016";
		Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);      	                                    
		
		Стр = Таб.Добавить();
		Стр.Номенклатура = Номенклатура;
		Стр.Количество = 1;
		Стр.Цена = 0;	
	КонецЕсли;
	
	// объявленная стоимость
	Если НовыйДокумент.ES_ОбьявленнаяСтоимость > 0 Тогда
		Артикул = "1002";
		Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);      	                                    
		
		Стр = Таб.Добавить();
		Стр.Номенклатура = Номенклатура;
		Стр.Количество = 1;
		Стр.Цена = 0;	
	КонецЕсли;
	
	// доставка выходного дня
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеПроизводственногоКалендаря.ВидДня
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.Дата = &Дата
	|	И ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь";
	
	Запрос.УстановитьПараметр("Дата", НовыйДокумент.ES_ДатаДоставки);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", Справочники.ПроизводственныеКалендари.НайтиПоКоду("РФ"));
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	ВидДня = ВыборкаДетальныеЗаписи.ВидДня;
	Если НЕ ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий Тогда
		Артикул = "1017";
		Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);      	                                    
		
		Стр = Таб.Добавить();
		Стр.Номенклатура = Номенклатура;
		Стр.Количество = 1;
		Стр.Цена = 0;	
	КонецЕсли;
	
	// услуги из договора
	Если НовыйДокумент.Договор.Услуги.Количество() > 0 Тогда
		Для Каждого СТ_Услуги Из НовыйДокумент.Договор.Услуги Цикл
			СТ_Поиска = Новый Структура;
			СТ_Поиска.Вставить("Номенклатура",СТ_Услуги.Номенклатура); 
			НайтиСтроки =  Таб.НайтиСтроки(СТ_Поиска);
			Если НайтиСтроки.Количество()>0 Тогда 
				Продолжить;
			КонецЕсли;	
			
			Стр = Таб.Добавить();
			Стр.Номенклатура = СТ_Услуги.Номенклатура;
			Стр.Количество = 1;
			Стр.Цена = 0;
		КонецЦикла;
	КонецЕсли;
	
	Ответ = ES_ОбщегоНазначенияКлиентСервер.ЭР_ОбновитьУслугиТЧДоставки(Таб,ТекущаяДата(),НовыйДокумент.Договор,СтоимостьДоставки, НовыйДокумент.ES_ОбьявленнаяСтоимость,НовыйДокумент.ES_НППлан, мВес);
	//НовыйДокумент.Запасы.Очистить();
	Для Каждого СТ_Таб Из Таб Цикл
		Если СТ_Таб.Цена = 0 Тогда
			НовыйДокумент.ES_ДоУточнения = Истина;
		КонецЕсли;
		СТ_Запасы = НовыйДокумент.Запасы.Добавить();
		СТ_Запасы.Номенклатура = СТ_Таб.Номенклатура;
		СТ_Запасы.Количество = СТ_Таб.Количество;
		СТ_Запасы.Цена = СТ_Таб.Цена;
		СТ_Запасы.СтавкаНДС = ES_ОбщегоНазначения.ПолучитьСтавкуНДСНоменклатуры(СТ_Таб.Номенклатура);
		СТ_Запасы.ТипНоменклатурыЗапас = Ложь;
		СТ_Запасы.ДатаОтгрузки 	= НовыйДокумент.ES_ДатаДоставки;
		СТ_Запасы.Сумма = СТ_Запасы.Количество * СТ_Запасы.Цена;
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СТ_Запасы.СтавкаНДС);
		
		СТ_Запасы.СуммаНДС = ?(НовыйДокумент.СуммаВключаетНДС, 
		СТ_Запасы.Сумма - (СТ_Запасы.Сумма) / ((СтавкаНДС + 100) / 100),
		СТ_Запасы.Сумма * СтавкаНДС / 100);
		
		СТ_Запасы.Всего = СТ_Запасы.Сумма + ?(НовыйДокумент.СуммаВключаетНДС, 0, СТ_Запасы.СуммаНДС);
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОсновнойДоговорКонтрагента(мЗаказчик)
     //EFSOL_Сальник К.А. 2018-11-02 {+
	 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсновныеДоговорыКонтрагента.Договор КАК Договор
		|ИЗ
		|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
		|ГДЕ
		|	ОсновныеДоговорыКонтрагента.Контрагент = &мЗаказчик";
	
	Запрос.УстановитьПараметр("мЗаказчик", мЗаказчик);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() <> 0 Тогда
		Возврат РезультатЗапроса[0].Договор;
	Иначе
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
			   
	 //EFSOL_Сальник К.А.  -}
КонецФункции

Функция ЗаполнитьES_АдресДоставки(Индекс,Область,Город,Улица,Дом,Строение,Корпус,Квартира)
	//ЕФСОЛ Савченко К.Р. 15.09.2017 +
	
	мАдрес = "";
	//мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Индекс)),СокрЛП(Индекс),"");
	//мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Область)),", "+СокрЛП(Область),"");
	//мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Город)),", "+СокрЛП(Город)+" г","");
	//мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Улица)),", "+СокрЛП(Улица)+" ул","");
	//мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Дом)),", дом № "+СокрЛП(Дом),"");
	//мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Строение)),", строение "+СокрЛП(Строение),"");
	//мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Корпус)),", корпус "+СокрЛП(Корпус),"");
	//мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Квартира)),", квартира "+СокрЛП(Квартира),"");
	
	
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Индекс)),СокрЛП(Индекс)+ ", ","");
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Область)),СокрЛП(Область)+", ","");
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Город)),СокрЛП(Город)+", ","");
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Улица)),СокрЛП(Улица)+" ул, ","");
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Дом)),"дом № "+СокрЛП(Дом)+", ","");
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Строение)),"строение "+СокрЛП(Строение)+", ","");
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Корпус)),"корпус "+СокрЛП(Корпус)+", ","");
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Квартира)),"квартира "+СокрЛП(Квартира)+", ","");
	
	Возврат мАдрес;
	//ES_АдресДоставкиXML = "";
	//ЗаполнитьШиротуИДолготуПоАдресу("ES_АдресДоставки");
	//ЕФСОЛ Савченко К.Р. 15.09.2017 -
КонецФункции

//Создает забор груза 
&НаСервере
Функция СоздатьСборНаСервере(СтруктураОбщихРеквизитов,СтруктураТекДанных,БезВыезда)
	//ЭР Несторук С.И. 30.09.2017 20:32:46 {
	//Поместил это в отдельную функцию
	//}ЭР Несторук С.И.
	
	НовыйДокументСбор = Документы.ES_ЗаборГруза.СоздатьДокумент();   		
	НовыйДокументСбор.Дата = ТекущаяДата();
	НовыйДокументСбор.Заказчик = СтруктураОбщихРеквизитов.Заказчик;
	НовыйДокументСбор.Отправитель = СтруктураОбщихРеквизитов.Отправитель; 
	//НовыйДокументСбор.КонтактноеЛицо = СтруктураТекДанных.ЗаборКонтактноеЛицо;
	НовыйДокументСбор.КонтактноеЛицо = СтруктураОбщихРеквизитов.ЗаказчикКонтЛицо;
	НовыйДокументСбор.ES_Договор = ?(ЗначениеЗаполнено(СтруктураОбщихРеквизитов.Договор),СтруктураОбщихРеквизитов.Договор,НовыйДокументСбор.Заказчик.ДоговорПоУмолчанию);
	НовыйДокументСбор.Организация = СтруктураОбщихРеквизитов.Организация;
	//НовыйДокументСбор.Телефон = СтруктураТекДанных.ЗаборТелефон;
	НовыйДокументСбор.Телефон = СтруктураОбщихРеквизитов.ЗаказчикТелефон;
	НовыйДокументСбор.Ответственный = СтруктураОбщихРеквизитов.КонтрагентОтветственный;
	//НовыйДокументСбор.Комментарий = СтруктураТекДанных.Комментарий;
	НовыйДокументСбор.Срочность = СтруктураОбщихРеквизитов.Срочность;
	НовыйДокументСбор.ВремяЗабораС = Дата("000101010900");
	НовыйДокументСбор.ВремяЗабораПО = Дата("000101011800");
	НовыйДокументСбор.ES_БезВыезда = БезВыезда;
	//НовыйДокументСбор.ES_Договор = Договор;
	//НовыйДокументСбор.ES_ИзКЛАДР = Ложь;
	НовыйДокументСбор.ES_НомерРеестра = СтруктураОбщихРеквизитов.Манифест;
	НовыйДокументСбор.ES_Город = СтруктураОбщихРеквизитов.ГородОтправитель;
	НовыйДокументСбор.Адрес = СтруктураОбщихРеквизитов.Адрес;
	//КонецЕсли;
	Если ЗначениеЗаполнено(НовыйДокументСбор.Адрес) Тогда
		СтруктураГеокодирования = ES_YandexMaps.ГеокодированияПолучитьКоординаты(НовыйДокументСбор.Адрес);
		//ЕФСОЛ Несторук 08.08.2016 -
		ЗаборАдресДолгота 		= СтруктураГеокодирования.Долгота;
		ЗаборАдресШирота 		= СтруктураГеокодирования.Широта;
		//ЕФСОЛ Несторук 05.08.2016 +
		Если ЗначениеЗаполнено(ЗаборАдресДолгота) И ЗначениеЗаполнено(ЗаборАдресШирота) Тогда
			СтруктураИнфоПоМетро = ES_ОбщегоНазначения.ПолучитьДанныеПоМетро(СтруктураГеокодирования);
			НовыйДокументСбор.Регион = СтруктураИнфоПоМетро.Метро;
			НовыйДокументСбор.РегионРасстоняние = СтруктураИнфоПоМетро.Расстояние;
		КонецЕсли;
		
		НовыйДокументСбор.АдресДолгота = ЗаборАдресДолгота;
		НовыйДокументСбор.АдресШирота = ЗаборАдресШирота;
	КонецЕсли;
	
	Если БезВыезда ИЛИ СоздатьСбор Тогда
		НовыйДокументСбор.ДатаЗабора = ТекущаяДата();
	Иначе  		
		НовыйДокументСбор.ДатаЗабора = СтруктураТекДанных.ЗаборДоставитьДо;
	КонецЕсли;
	
	Если БезВыезда Тогда
		НовыйДокументСбор.ВидЗабора = Перечисления.ES_ВидыЗабора.Реестр;
	ИНаче
		НовыйДокументСбор.ВидЗабора = Перечисления.ES_ВидыЗабора.Выезд;
	КонецЕсли;
	
	Возврат НовыйДокументСбор; 
КонецФункции

&НаСервере
Процедура ПересчитатьИтогиВСборе(Сбор)
	
	ОбщийВес = 0;
	ОбщийОбъем = 0;
	ОбщийОбъемныйВес = 0;
	Для каждого Стр ИЗ Сбор.Заказы Цикл
		
		ОбщийВес = ОбщийВес+Стр.Заказ.ES_ОбщийВес;
		ОбщийОбъем = ОбщийОбъем+Стр.Заказ.ES_Объем;
		ОбщийОбъемныйВес = ОбщийОбъемныйВес+Стр.Заказ.ES_ОбщийОбъемныйВес;
		
	КонецЦикла;
	
	Сбор.ОбщийВес = ОбщийВес;
	Сбор.ОбщийОбъем = ОбщийОбъем;
	Сбор.ОбщийОбъемныйВес = ОбщийОбъемныйВес;
КонецПроцедуры

&НаСервере      
Функция ПроверкаРасчетаСтоимостиТЧ()
	Проверка = Ложь;
	СтрокаОшибки = "";
	Если НЕ ЗначениеЗаполнено(ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.УслугаДоставки)) Тогда
		СтрокаОшибки = "Услуга доставки в Стартовых настройках не заполнена ";
		Проверка = Истина;
	ИначеЕсли
		НЕ ЗначениеЗаполнено(ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.УслугаСбора)) Тогда
		СтрокаОшибки = СтрокаОшибки+ "Услуга сбора в Стартовых настройках не заполнена " +Символы.ПС;
		Проверка = Истина;
	КонецЕсли;	
	//АртикулПВ = "1016";  //позднее время
	//АртикулВД = "1017";  //выходной день
	//АртикулНП = "1001";  //наложенный платеж
	//АртикулС = "1002";  //страховка  
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Артикул КАК АртикулПВ
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул = ""1016""
	|	И Номенклатура.ПометкаУдаления = ЛОЖЬ
	|	И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если ПустаяСтрока(Выборка.АртикулПВ) Тогда
		СтрокаОшибки = СтрокаОшибки + "Услуга Поздняя доставка с артикулем 1016 не создана "+Символы.ПС;
		Проверка = Истина;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Артикул КАК АртикулВД
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул = ""1017""
	|	И Номенклатура.ПометкаУдаления = ЛОЖЬ
	|	И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если ПустаяСтрока(Выборка.АртикулВД)  Тогда
		СтрокаОшибки = СтрокаОшибки + "Услуга Доставка в выходные дни с артикулем 1017 не создана "+Символы.ПС;
		Проверка = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Артикул КАК АртикулНП
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул = ""1001""
	|	И Номенклатура.ПометкаУдаления = ЛОЖЬ
	|	И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если ПустаяСтрока(Выборка.АртикулНП) Тогда
		СтрокаОшибки = СтрокаОшибки + "Услуга Сбор наложенного платежа с артикулем 1001 не создана "+Символы.ПС;
		Проверка = Истина;
	КонецЕсли;    
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Артикул КАК АртикулС
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул = ""1002""
	|	И Номенклатура.ПометкаУдаления = ЛОЖЬ
	|	И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий(); 
	
	Если ПустаяСтрока(Выборка.АртикулС) Тогда
		СтрокаОшибки = СтрокаОшибки + "Услуга Страховка с артикулем 1002 не создана";
		Проверка = Истина;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтрокаОшибки) Тогда
		Сообщить(СтрокаОшибки);
	КонецЕсли;
	
	Возврат Проверка;
КонецФункции

&НаСервере
Процедура НайтиКлючСопоставленияВНастройкеМанифестов()
	
	//ЭР Несторук С.И. 23.10.2017 13:03:13 {
	Если КлючСопоставления = "Вх. накладная" Тогда
		Критерий = КлючСопоставления;
	Иначе
		Критерий = "Накладная";
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.РеквизитЗаказа КАК РеквизитЗаказа
	|ИЗ
	|	Справочник.ES_НастройкиЗагрузкиМанифестов.НастройкаКолонок КАК ES_НастройкиЗагрузкиМанифестовНастройкаКолонок
	|ГДЕ
	|	ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.Ссылка = &Ссылка
	|	И ES_НастройкиЗагрузкиМанифестовНастройкаКолонок.РеквизитЗаказа = &РеквизитЗаказа";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Настройка);
	Запрос.УстановитьПараметр("РеквизитЗаказа", Критерий);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ЕстьКлючСопоставленияВНастройке = Истина;
	КонецЕсли;
	//}ЭР Несторук С.И.

	 	
КонецПроцедуры

&НаСервере
Функция СообщениеНеправильноУказанРеквизит(НомерСтроки ,ИмяРеквизита)
	
	Возврат "По строке " + НомерСтроки + " не удалось создать документ. Реквизит """+ИмяРеквизита+""" указан неправильно";	
	
КонецФункции


#КонецОбласти


