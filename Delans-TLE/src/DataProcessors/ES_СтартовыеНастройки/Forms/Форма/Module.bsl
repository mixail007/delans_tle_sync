
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтруктураСтратровыхНастроек = ES_ОбщегоНазначения.ПолучитьВсеСтартовыеНастройки();
	
	ЗаполнитьЗначенияСвойств(Объект, СтруктураСтратровыхНастроек);

	//ЭР Несторук С.И. 28.02.2017 11:49:57 {
	Объект.ИспользоватьВыдачуПриемкуПоКурьерам = Константы.ES_ИспользоватьВидачуПриемкуПоКурьерам.Получить();
	Объект.ИспользоватьТарифныйКалькулятор = Константы.ES_ИспользоватьТарифныйКалькулятор.Получить();
	Объект.ПозднееВремя = Константы.ES_ПозднееВремя.Получить();
	//}ЭР Несторук С.И.
	
	//ЭР Сережко А.С. 06.08.2018 + 	
	Объект.РаспределениеЗаявокВОтдельномОкне = Константы.ES_РаспределениеЗаявокВОтдельномОкне.Получить();  
	Объект.АдресПубликацииИнформационнойБазы = Константы.АдресПубликацииИнформационнойБазыВИнтернете.Получить(); 	
	Если Объект.РаспределениеЗаявокВОтдельномОкне Тогда
		Элементы.АдресПубликацииИнформационнойБазы.Видимость = Истина;
	Иначе Элементы.АдресПубликацииИнформационнойБазы.Видимость = Ложь;
	КонецЕсли;
	
	//ЭР Сережко А.С. 06.08.2018 -   
	
	// Заполнение и доступность поля Вид комплектации
	Если НЕ ЗначениеЗаполнено(Объект.ВидЗабора) Тогда
		Объект.ВидЗабора = Перечисления.ES_ВидыЗабора.НаСклад;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.Метка1Цвет) Тогда 
		мМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Объект.Метка1Цвет,"#");
		RGBМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(мМассив[1],",");
		Элементы.Метка1.ЦветФона = Новый Цвет(RGBМассив[0],RGBМассив[1],RGBМассив[2]);		
		Этаформа.Цвет1 = Элементы.Метка1Цвета.СписокВыбора.НайтиПоЗначению(Объект.Метка1Цвет).Значение;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Метка2Цвет) Тогда
		мМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Объект.Метка2Цвет,"#");
		RGBМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(мМассив[1],",");
		Элементы.Метка2.ЦветФона = Новый Цвет(RGBМассив[0],RGBМассив[1],RGBМассив[2]);
		Этаформа.Цвет2 = Элементы.Метка2Цвета.СписокВыбора.НайтиПоЗначению(Объект.Метка2Цвет).Значение;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Метка3Цвет) Тогда
		мМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Объект.Метка3Цвет,"#");
		RGBМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(мМассив[1],",");
		Элементы.Метка3.ЦветФона = Новый Цвет(RGBМассив[0],RGBМассив[1],RGBМассив[2]);
		Этаформа.Цвет3 = Элементы.Метка3Цвета.СписокВыбора.НайтиПоЗначению(Объект.Метка3Цвет).Значение;
	КонецЕсли;  
	
	//EFSOL_Сальник К.А. 2019-05-15 {+
	Объект.МенеджерКонтактноеЛицо = Константы.ES_МенеджерКонтактноеЛицо.Получить();
	Объект.МенеджерТелефон = Константы.ES_МенеджерТелефон.Получить();
	Объект.МенеджерEmail = Константы.ES_МенеджерEmail.Получить();
	//EFSOL_Сальник К.А.  -}
	
	//Efsol Рыбалка Н.А. 19.12.2018+
	ТокенБотаПриИзмененииНаСервере();
	ИДЧатаДляТелеграмНаСервере();
	//Efsol Рыбалка Н.А.-

	//ЭР Несторук С.И. 13.06.2019 16:53:02 {
	ЗаблокироватьФорму = НЕ ES_ОбщегоНазначения.РазрешеноРедактированиеСтартовыхНастроек();
	ЭтаФорма.ТолькоПросмотр = ЗаблокироватьФорму;
	ЭтаФорма.Элементы.ФормаОК.Доступность = НЕ ЗаблокироватьФорму;
	ЭтаФорма.Элементы.ПодключениеБотаТелеграм.Доступность = НЕ ЗаблокироватьФорму;
	//}ЭР Несторук С.И.
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	ОшибкаЗаполнения = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Укажите организацию";
		Сообщение.Поле = "Объект.Организация";
		Сообщение.Сообщить();
		
		ОшибкаЗаполнения = Истина;
	КонецЕсли;
	
	//ЭР Несторук С.И. 17.03.2017 14:40:01 {
	//Временно скрываем Склад
	//Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
	//	Сообщение = Новый СообщениеПользователю;
	//	Сообщение.Текст = "Укажите склад";
	//	Сообщение.Поле = "Объект.Склад";
	//	Сообщение.Сообщить();
	//	
	//	ОшибкаЗаполнения = Истина;
	//КонецЕсли;
		
	//Если НЕ ЗначениеЗаполнено(Объект.НоменклатураДляЧека) Тогда
	//	Сообщение = Новый СообщениеПользователю;
	//	Сообщение.Текст = "Укажите номенклатуру для подставления в чеки ККМ";
	//	Сообщение.Поле = "Объект.НоменклатураДляЧека";
	//	Сообщение.Сообщить();
	//	
	//	ОшибкаЗаполнения = Истина;
	//КонецЕсли; 
	//}ЭР Несторук С.И.

	//ЭР Семесенко 13.09.2017 {
	Если  ПолучитьФункциональнуюОпциюНаСервере("УчетПоЯчейкам") Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ОсновнаяЯчейка) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Укажите основную ячейку";
			Сообщение.Поле = "Объект.ОсновнаяЯчейка";
			Сообщение.Сообщить();
			
			ОшибкаЗаполнения = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ЯчейкаКВыдаче) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Укажите ячейку к выдаче";
			Сообщение.Поле = "Объект.ЯчейкаКВыдаче";
			Сообщение.Сообщить();
			
			ОшибкаЗаполнения = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ЯчейкаПроблема) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Укажите ячейку проблема";
			Сообщение.Поле = "Объект.ЯчейкаПроблема";
			Сообщение.Сообщить();
			
			ОшибкаЗаполнения = Истина;
		КонецЕсли;
	КонецЕсли;


	//}ЭР Семесенко

	Если НЕ ЗначениеЗаполнено(Объект.ОсновнойГород) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Укажите основной город";
		Сообщение.Поле = "Объект.ОсновнойГород";
		Сообщение.Сообщить();
		
		ОшибкаЗаполнения = Истина;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.УслугаДоставки) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Укажите услугу доставки";
		Сообщение.Поле = "Объект.УслугаДоставки";
		Сообщение.Сообщить();
		
		ОшибкаЗаполнения = Истина;
	КонецЕсли;
	
			
	Если НЕ ЭтоЛогист() И НЕ ЗначениеЗаполнено(Объект.КассаНаложенныхПлатежей) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Укажите кассу наложенных платежей";
		Сообщение.Поле = "Объект.КассаНаложенныхПлатежей";
		Сообщение.Сообщить();
		
		ОшибкаЗаполнения = Истина;
		
	КонецЕсли;
	
	
	//ЕФСОЛ Несторук 15.09.2016 +
	Если Объект.Коэффициент = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Коэффициент расчета объемного веса не может быть равен 0";
		Сообщение.Поле = "Объект.Коэффициент";
		Сообщение.Сообщить();
		
		ОшибкаЗаполнения = Истина;
	КонецЕсли;

	//ЕФСОЛ Несторук 15.09.2016 -
	
	// Сережко А.С. 15.08.18 +	
	Если Объект.РаспределениеЗаявокВОтдельномОкне Тогда
		Если НЕ ЗначениеЗаполнено(Объект.АдресПубликацииИнформационнойБазы) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Поле = "Объект.АдресПубликацииИнформационнойБазы";
			Сообщение.Текст = "Адрес публикации информационной базы не заполнен";
			Сообщение.Сообщить();
			
			ОшибкаЗаполнения = Истина;  
		КонецЕсли;
	КонецЕсли; 	
	// Сережко А.С. 15.08.18 -
	
	Если ОшибкаЗаполнения Тогда
		Возврат;
	КонецЕсли; 
	
	УстановитьЗначенияНаСервере();
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаСервере 
Функция ПолучитьФункциональнуюОпциюНаСервере(Опция)
  Возврат ПолучитьФункциональнуюОпцию(Опция);
КонецФункции

&НаСервере
Процедура УстановитьЗначенияНаСервере()
	
	//ПОЛЬЗОВАТЕЛЬСКИЕ НАСТРОЙКИ
	
	// Организация
	ВнестиЗаписьВРсСтартовыеНастройки("Организация", Перечисления.ES_ВидыСтартовыхНастроек.Организация, Истина);
	
	// Касса наложенных платежей
	ВнестиЗаписьВРсСтартовыеНастройки("КассаНаложенныхПлатежей", Перечисления.ES_ВидыСтартовыхНастроек.КассаНаложенныхПлатежей, Истина);
	
	// Счет учета наложенных платежей
	ВнестиЗаписьВРсСтартовыеНастройки("ДопКассаНП", Перечисления.ES_ВидыСтартовыхНастроек.ДопКассаНП, Истина);
	
	// Город
	ВнестиЗаписьВРсСтартовыеНастройки("ОсновнойГород", Перечисления.ES_ВидыСтартовыхНастроек.ОсновнойГород, Истина);
	
	// Вид Забора
	ВнестиЗаписьВРсСтартовыеНастройки("ВидЗабора", Перечисления.ES_ВидыСтартовыхНастроек.ВидЗабора, Истина);
	
	//ЭР Несторук С.И. 27.07.2017 11:14:00 {
	ВнестиЗаписьВРсСтартовыеНастройки("ВидДоставки", Перечисления.ES_ВидыСтартовыхНастроек.ВидДоставки, Истина);
	//}ЭР Несторук С.И.
	
	//ОБЩИЕ НАСТРОЙКИ
	
	// Услуга доставки
	ВнестиЗаписьВРсСтартовыеНастройки("УслугаДоставки", Перечисления.ES_ВидыСтартовыхНастроек.УслугаДоставки);
	
	//Сережко А.С. 12.09.2017 +
	// Услуга сбора
	ВнестиЗаписьВРсСтартовыеНастройки("УслугаСбора", Перечисления.ES_ВидыСтартовыхНастроек.УслугаСбора);
	//Сережко А.С. 12.09.2017 -   
	
	// Характеристика
	ВнестиЗаписьВРсСтартовыеНастройки("Характеристика", Перечисления.ES_ВидыСтартовыхНастроек.Характеристика);
	
	// Услуга страховки
	ВнестиЗаписьВРсСтартовыеНастройки("УслугаСтраховки", Перечисления.ES_ВидыСтартовыхНастроек.УслугаСтраховки);
	
	// Услуга самовывоза
	ВнестиЗаписьВРсСтартовыеНастройки("УслугаСамовывоза", Перечисления.ES_ВидыСтартовыхНастроек.УслугаСамовывоза);
	
	// Услуга РКО
	ВнестиЗаписьВРсСтартовыеНастройки("УслугаРКО", Перечисления.ES_ВидыСтартовыхНастроек.УслугаРКО);
	
	// Розничный покупатель
	ВнестиЗаписьВРсСтартовыеНастройки("РозничныйПокупатель", Перечисления.ES_ВидыСтартовыхНастроек.РозничныйПокупатель);
	
	// Плательщик
	ВнестиЗаписьВРсСтартовыеНастройки("Плательщик", Перечисления.ES_ВидыСтартовыхНастроек.Плательщик);
	
	// Вид оплаты
	ВнестиЗаписьВРсСтартовыеНастройки("ВидОплаты", Перечисления.ES_ВидыСтартовыхНастроек.ВидОплаты);
	
	// День доставки
	ВнестиЗаписьВРсСтартовыеНастройки("ДеньДоставки", Перечисления.ES_ВидыСтартовыхНастроек.ДеньДоставки);
	
	// Логин SMS-Сервиса
	ВнестиЗаписьВРсСтартовыеНастройки("СмсСервисЛогин", Перечисления.ES_ВидыСтартовыхНастроек.СмсСервисЛогин);
	
	// Пароль SMS-Сервиса
	ВнестиЗаписьВРсСтартовыеНастройки("СмсСервисПароль", Перечисления.ES_ВидыСтартовыхНастроек.СмсСервисПароль);
	
	// Сервер SMS-Сервиса
	ВнестиЗаписьВРсСтартовыеНастройки("СмсСервисСервер", Перечисления.ES_ВидыСтартовыхНастроек.СмсСервисСервер);
	//ЕФСОЛ Несторук 21.10.16 закомментировано, теперь раскрашиваем в соответствии со срочностью
	
	//Efsol Рыбалка Н.А. 25.06.2019+
	//Адрес склада и его координаты
	ВнестиЗаписьВРсСтартовыеНастройки("АдресСклада", Перечисления.ES_ВидыСтартовыхНастроек.АдресСклада);
	ВнестиЗаписьВРсСтартовыеНастройки("АдресСкладаШирота", Перечисления.ES_ВидыСтартовыхНастроек.АдресСкладаШирота);
	ВнестиЗаписьВРсСтартовыеНастройки("АдресСкладаДолгота", Перечисления.ES_ВидыСтартовыхНастроек.АдресСкладаДолгота);
	//Efsol Рыбалка Н.А.-

	//// Маркер 1
	//ВнестиЗаписьВРсСтартовыеНастройки("Метка1ВремяС", Перечисления.ES_ВидыСтартовыхНастроек.Метка1ВремяС);
	//ВнестиЗаписьВРсСтартовыеНастройки("Метка1ВремяПо", Перечисления.ES_ВидыСтартовыхНастроек.Метка1ВремяПо);
	//ВнестиЗаписьВРсСтартовыеНастройки("Метка1Цвет", Перечисления.ES_ВидыСтартовыхНастроек.Метка1Цвет);
	//
	//// Маркер 2
	//ВнестиЗаписьВРсСтартовыеНастройки("Метка2ВремяС", Перечисления.ES_ВидыСтартовыхНастроек.Метка2ВремяС);
	//ВнестиЗаписьВРсСтартовыеНастройки("Метка2ВремяПо", Перечисления.ES_ВидыСтартовыхНастроек.Метка2ВремяПо);
	//ВнестиЗаписьВРсСтартовыеНастройки("Метка2Цвет", Перечисления.ES_ВидыСтартовыхНастроек.Метка2Цвет);
	//
	//// Маркер 3
	//ВнестиЗаписьВРсСтартовыеНастройки("Метка3ВремяС", Перечисления.ES_ВидыСтартовыхНастроек.Метка3ВремяС);
	//ВнестиЗаписьВРсСтартовыеНастройки("Метка3ВремяПо", Перечисления.ES_ВидыСтартовыхНастроек.Метка3ВремяПо);
	//ВнестиЗаписьВРсСтартовыеНастройки("Метка3Цвет", Перечисления.ES_ВидыСтартовыхНастроек.Метка3Цвет);
	
	//ЕФСОЛ Несторук 11.08.2016 +
	ВнестиЗаписьВРсСтартовыеНастройки("ОтражатьВремяНаКарте", Перечисления.ES_ВидыСтартовыхНастроек.ОтражатьВремяНаКарте);
	ВнестиЗаписьВРсСтартовыеНастройки("СистемаОпределенияКоординат", Перечисления.ES_ВидыСтартовыхНастроек.СистемаОпределенияКоординат);
	ВнестиЗаписьВРсСтартовыеНастройки("ПроцентСтраховки", Перечисления.ES_ВидыСтартовыхНастроек.ПроцентСтраховки);
	ВнестиЗаписьВРсСтартовыеНастройки("Коэффициент", Перечисления.ES_ВидыСтартовыхНастроек.Коэффициент);
	
	ВнестиЗаписьВРсСтартовыеНастройки("Метка1Цвет", Перечисления.ES_ВидыСтартовыхНастроек.Метка1Цвет);
	ВнестиЗаписьВРсСтартовыеНастройки("Метка2Цвет", Перечисления.ES_ВидыСтартовыхНастроек.Метка2Цвет);
	ВнестиЗаписьВРсСтартовыеНастройки("Метка3Цвет", Перечисления.ES_ВидыСтартовыхНастроек.Метка3Цвет);
	ВнестиЗаписьВРсСтартовыеНастройки("ПоискЗаказовПоВхНакладной", Перечисления.ES_ВидыСтартовыхНастроек.ПоискЗаказовПоВхНакладной);
	ВнестиЗаписьВРсСтартовыеНастройки("АвтоПринятКурьером", Перечисления.ES_ВидыСтартовыхНастроек.АвтоПринятКурьером);
	ВнестиЗаписьВРсСтартовыеНастройки("АвтоПриемЗаборов", Перечисления.ES_ВидыСтартовыхНастроек.АвтоПриемЗаборов);
	//ЭР Несторук С.И. 17.03.2017 14:41:41 {
	//Временно скрываем
	ВнестиЗаписьВРсСтартовыеНастройки("Склад", Перечисления.ES_ВидыСтартовыхНастроек.Склад,Истина);  
	//}ЭР Несторук С.И.
	
	//ЭР Семесенко 13.09.2017{
	ВнестиЗаписьВРсСтартовыеНастройки("ОсновнаяЯчейка", Перечисления.ES_ВидыСтартовыхНастроек.ЯчейкаОсновная);
	ВнестиЗаписьВРсСтартовыеНастройки("ЯчейкаКВыдаче", 	Перечисления.ES_ВидыСтартовыхНастроек.ЯчейкаКВыдаче);
	ВнестиЗаписьВРсСтартовыеНастройки("ЯчейкаПроблема", Перечисления.ES_ВидыСтартовыхНастроек.ЯчейкаПроблема);
	//}ЭР Семесенко
	
	ВнестиЗаписьВРсСтартовыеНастройки("ГруппаДляГрузов", Перечисления.ES_ВидыСтартовыхНастроек.ГруппаДляГрузов);	
	ВнестиЗаписьВРсСтартовыеНастройки("Метка1Код", Перечисления.ES_ВидыСтартовыхНастроек.Метка1Код);
	ВнестиЗаписьВРсСтартовыеНастройки("Метка2Код", Перечисления.ES_ВидыСтартовыхНастроек.Метка2Код);
	ВнестиЗаписьВРсСтартовыеНастройки("Метка3Код", Перечисления.ES_ВидыСтартовыхНастроек.Метка3Код);
	
	ВнестиЗаписьВРсСтартовыеНастройки("КодСкладДвери", Перечисления.ES_ВидыСтартовыхНастроек.КодСкладДвери);
	ВнестиЗаписьВРсСтартовыеНастройки("КодДвериДвери", Перечисления.ES_ВидыСтартовыхНастроек.КодДвериДвери);
	ВнестиЗаписьВРсСтартовыеНастройки("КодДвериДвериУпрощенный", Перечисления.ES_ВидыСтартовыхНастроек.КодДвериДвериУпрощенный);
	ВнестиЗаписьВРсСтартовыеНастройки("КодСамовывоз", Перечисления.ES_ВидыСтартовыхНастроек.КодСамовывоз);
	//EFSOL_Шаповал Олег Анатольевич 26 сентября 2017 г. 15:12:50 +
	ВнестиЗаписьВРсСтартовыеНастройки("КодТерминалТерминал", Перечисления.ES_ВидыСтартовыхНастроек.КодТерминалТерминал);
	ВнестиЗаписьВРсСтартовыеНастройки("КодТерминалПВЗ", Перечисления.ES_ВидыСтартовыхНастроек.КодТерминалПВЗ);
	//EFSOL Шаповал О.А. -
	
	ВнестиЗаписьВРсСтартовыеНастройки("НоменклатураДляЧека",Перечисления.ES_ВидыСтартовыхНастроек.НоменклатураДляЧека);
	ВнестиЗаписьВРсСтартовыеНастройки("ИспользоватьНоменклатуруДляЧеков",Перечисления.ES_ВидыСтартовыхНастроек.ИспользоватьНоменклатуруДляЧеков);
	ВнестиЗаписьВРсСтартовыеНастройки("ОтражатьДДуНаКарте", Перечисления.ES_ВидыСтартовыхНастроек.ОтражатьДДуНаКарте);
	
	//Efsol Рыбалка Н.А. 05.06.2019+
	ВнестиЗаписьВРсСтартовыеНастройки("ШаблонСообщенияДляСбора", Перечисления.ES_ВидыСтартовыхНастроек.ШаблонСообщенияДляСбора);
	ВнестиЗаписьВРсСтартовыеНастройки("ШаблонСообщенияДляЗаказа", Перечисления.ES_ВидыСтартовыхНастроек.ШаблонСообщенияДляЗаказа);
	ВнестиЗаписьВРсСтартовыеНастройки("ТокенБотаДляТелеграм", Перечисления.ES_ВидыСтартовыхНастроек.ТокенБотаДляТелеграм);
	ВнестиЗаписьВРсСтартовыеНастройки("ИДЧатаДляТелеграм", Перечисления.ES_ВидыСтартовыхНастроек.ИДЧатаДляТелеграм);
	ВнестиЗаписьВРсСтартовыеНастройки("ШаблонСообщенияДляВидаЗаказа", Перечисления.ES_ВидыСтартовыхНастроек.ШаблонСообщенияДляВидаЗаказа);
	ВнестиЗаписьВРсСтартовыеНастройки("ЛогинПользователяИБ", Перечисления.ES_ВидыСтартовыхНастроек.ЛогинПользователяИБ);
	ВнестиЗаписьВРсСтартовыеНастройки("ПарольПользователяИБ", Перечисления.ES_ВидыСтартовыхНастроек.ПарольПользователяИБ);
	//Efsol Рыбалка Н.А.-
	
	//Если НЕ ЭтоЛогист() Тогда - возможно нужно вернуть
	Константы.ES_ИспользоватьВидачуПриемкуПоКурьерам.Установить(Объект.ИспользоватьВыдачуПриемкуПоКурьерам);
	Константы.ES_ИспользоватьТарифныйКалькулятор.Установить(Объект.ИспользоватьТарифныйКалькулятор);
	Константы.ES_ПозднееВремя.Установить(Объект.ПозднееВремя);
	//КонецЕсли;
	//ЕФСОЛ Несторук 11.08.2016 -
	
	//ЭР Сережко А.С. 06.08.2018 + 	
	Константы.ES_РаспределениеЗаявокВОтдельномОкне.Установить(Объект.РаспределениеЗаявокВОтдельномОкне);  
	Константы.АдресПубликацииИнформационнойБазыВИнтернете.Установить(Объект.АдресПубликацииИнформационнойБазы);
	//ЭР Сережко А.С. 06.08.2018 - 
	
	//EFSOL_Сальник К.А. 2019-05-15 {+
	Константы.ES_МенеджерКонтактноеЛицо.Установить(Объект.МенеджерКонтактноеЛицо);  
	Константы.ES_МенеджерТелефон.Установить(Объект.МенеджерТелефон);  
	Константы.ES_МенеджерEmail.Установить(Объект.МенеджерEmail);
	//EFSOL_Сальник К.А.  -}
	
КонецПроцедуры

&НаСервере
Процедура ВнестиЗаписьВРсСтартовыеНастройки(ИмяРеквизита, ВидНастройки, Пользователь = Ложь)
	
	НаборЗаписей = РегистрыСведений.ES_СтартовыеНастройки.СоздатьНаборЗаписей();
	Если Пользователь Тогда
		НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.ТекущийПользователь());
	КонецЕсли; 
	НаборЗаписей.Отбор.ВидСтартовойНастройки.Установить(ВидНастройки);
	НаборЗаписей.Записать();
	НовЗапись = НаборЗаписей.Добавить();
	НовЗапись.ВидСтартовойНастройки = ВидНастройки;
	НовЗапись.Значение = Объект[ИмяРеквизита];
	Если Пользователь Тогда
		НовЗапись.Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли; 
	НаборЗаписей.Записать();
		
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.УслугаДоставки) Тогда
		СтандартнаяОбработка = Ложь;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Поле ""Номенклатура"" не заполнено";
		Сообщение.Поле = "Объект.УслугаДоставки";
		Сообщение.Сообщить(); 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикПриИзменении(Элемент)
	
	Если Объект.Плательщик = ПредопределенноеЗначение("Перечисление.ES_ТипыПлательщиков.Получатель") Тогда
		Объект.ВидОплаты = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Наличные");
		Элементы.ВидОплаты.ТолькоПросмотр = Истина;
	Иначе	
		Элементы.ВидОплаты.ТолькоПросмотр = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УстановитьЦвет(Элемент, ВыбранноеЗначение);	
КонецПроцедуры

&НаКлиенте
Процедура Метка2ЦветаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УстановитьЦвет(Элемент, ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура Метка3ЦветаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УстановитьЦвет(Элемент, ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦвет(Элемент, ВыбранноеЗначение)
	мМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыбранноеЗначение,"#");
	RGBМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(мМассив[1],",");
	ИмяПоля = СтрЗаменить(Элемент.Имя,"Цвета","");
	Элементы[ИмяПоля].ЦветФона = Новый Цвет(RGBМассив[0],RGBМассив[1],RGBМассив[2]);
	Объект[ИмяПоля+"Цвет"] = ВыбранноеЗначение;
КонецПроцедуры

&НаКлиенте
Процедура ГруппаДляГрузовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//ЭР Несторук С.И. 26.02.2017 15:23:46 {
	СтандартнаяОбработка = Ложь;
		Уникальность = "ФормаВыбораГруппыНоменклатурыИзСтратовых";
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборГруппыНоменклатуры",ЭтаФорма);
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбораГруппы",,ЭтаФорма,Уникальность,,,ОписаниеОповещения);

	//}ЭР Несторук С.И.
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборГруппыНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	//ЭР Несторук С.И. 26.02.2017 15:24:11 {
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.Номенклатура") Тогда
		Объект.ГруппаДляГрузов = Результат;
	КонецЕсли;
	
	//}ЭР Несторук С.И.	
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВыдачуПриемкуПоКурьерамПриИзменении(Элемент)
	
	Сообщение = Новый СообщениеПользователю;
	//Сообщение.Поле = "Объект.ИспользоватьВыдачуПриемкуПоКурьерам";
	Сообщение.Текст = "После записи нужно перезапустить систему, что бы изменения вступили в силу";
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьТарифныйКалькуляторПриИзменении(Элемент)
	
	//EFSOL_Шаповал Олег Анатольевич 17 марта 2017 г. 11:54:42 +
	Сообщить("При изменении параметра необходимо перезапустить программу!",СтатусСообщения.ОченьВажное);
	//EFSOL Шаповал О.А. -
	
КонецПроцедуры


&НаКлиенте
Процедура Метка1ЦветаОчистка(Элемент, СтандартнаяОбработка)
	
	  ОчиститьФон(Элемент);
	
КонецПроцедуры


&НаКлиенте
Процедура ОчиститьФон(Элемент)
	ИмяПоля = СтрЗаменить(Элемент.Имя,"Цвета","");
	Элементы[ИмяПоля].ЦветФона = Новый Цвет(255, 255, 255);

КонецПроцедуры // ОчиститьФон()

&НаКлиенте
Процедура Метка2ЦветаОчистка(Элемент, СтандартнаяОбработка)
	ОчиститьФон(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Метка3ЦветаОчистка(Элемент, СтандартнаяОбработка)
	ОчиститьФон(Элемент);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоЛогист()
	
	Возврат РольДоступна("ES_Логист");
	
КонецФункции

&НаКлиенте
Процедура РаспределениеЗаявокВОтдельномОкнеПриИзменении(Элемент)
	РаспределениеЗаявокВОтдельномОкнеПриИзмененииНаСервере();
	Если Объект.РаспределениеЗаявокВОтдельномОкне Тогда
		Элементы.АдресПубликацииИнформационнойБазы.Видимость = Истина;
	Иначе Элементы.АдресПубликацииИнформационнойБазы.Видимость = Ложь;
	КонецЕсли;
	 
	Сообщить("При изменении параметра необходимо перезапустить программу!",СтатусСообщения.ОченьВажное);   
КонецПроцедуры

Процедура РаспределениеЗаявокВОтдельномОкнеПриИзмененииНаСервере();
	//ЭР Сережко А.С. 06.08.2018 + 	
	Константы.ES_РаспределениеЗаявокВОтдельномОкне.Установить(Объект.РаспределениеЗаявокВОтдельномОкне);  
	//ЭР Сережко А.С. 06.08.2018 -
КонецПроцедуры

&НаСервере
Процедура АдресПубликацииИнформационнойБазыПриИзмененииНаСервере()
	Константы.АдресПубликацииИнформационнойБазыВИнтернете.Установить(Объект.АдресПубликацииИнформационнойБазы);

КонецПроцедуры


&НаКлиенте
Процедура АдресПубликацииИнформационнойБазыПриИзменении(Элемент)
	АдресПубликацииИнформационнойБазыПриИзмененииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьНастройкиПоУмолчанию(Команда)
	
	  
	ЗаполнитьНастройкиПоУмолчаниюНаСервере(); 
	
	НовМасс = Новый Массив;
	Эл = Элементы.ГруппаОбщиеНастройки; 	
	ЭлП = Элементы.ГруппаПользовательскиеНастройки;
	НовМасс.Добавить(Эл);
	НовМасс.Добавить(ЭлП);
	ЭтаФорма.ОбновитьОтображениеДанных(НовМасс);
	ЭтотОбъект.ОбновитьОтображениеДанных();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиПоУмолчаниюНаСервере()
	
	//Создаем номенклатуру
	НомДоставка = Справочники.Номенклатура.НайтиПоНаименованию("Доставка");
	Если НомДоставка.Пустая() Тогда
		НомДоставка 						= Справочники.Номенклатура.СоздатьЭлемент();
		НомДоставка.Наименование 			= "Доставка";
		НомДоставка.НаименованиеПолное 		= "Доставка";
		НомДоставка.ЕдиницаИзмерения 		= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
		НомДоставка.ТипНоменклатуры 		= Перечисления.ТипыНоменклатуры.Услуга;
		НомДоставка.КатегорияНоменклатуры 	= Справочники.КатегорииНоменклатуры.БезКатегории;
		НомДоставка.СчетУчетаЗатрат			= ПланыСчетов.Управленческий;
		НомДоставка.НаправлениеДеятельности	= Справочники.НаправленияДеятельности.ОсновноеНаправление; 
		НомДоставка.СтавкаНДС				= Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС");
		НомДоставка.Записать();
	КонецЕсли;
	
	НомДоставкаВыходногоДня = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул","1017");
	Если НомДоставкаВыходногоДня.Пустая() Тогда
		НомДоставкаВыходногоДня 						= Справочники.Номенклатура.СоздатьЭлемент();
		НомДоставкаВыходногоДня.Наименование 			= "Доставка в выходной день";
		НомДоставкаВыходногоДня.НаименованиеПолное 		= "Доставка в выходной день";
		НомДоставкаВыходногоДня.ЕдиницаИзмерения 		= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
		НомДоставкаВыходногоДня.Артикул 				= "1017";
		НомДоставкаВыходногоДня.ТипНоменклатуры 		= Перечисления.ТипыНоменклатуры.Услуга;
		НомДоставкаВыходногоДня.КатегорияНоменклатуры 	= Справочники.КатегорииНоменклатуры.БезКатегории;
		НомДоставкаВыходногоДня.СчетУчетаЗатрат			= ПланыСчетов.Управленческий;
		НомДоставкаВыходногоДня.НаправлениеДеятельности	= Справочники.НаправленияДеятельности.ОсновноеНаправление;
		НомДоставкаВыходногоДня.СтавкаНДС				= Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС");
		НомДоставкаВыходногоДня.Записать();
	КонецЕсли;
	
	НомНаложенныйПлатеж = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул","1001");
	Если НомНаложенныйПлатеж.Пустая() Тогда
		НомНаложенныйПлатеж 						= Справочники.Номенклатура.СоздатьЭлемент();
		НомНаложенныйПлатеж.Наименование 			= "Наложенный платеж";
		НомНаложенныйПлатеж.НаименованиеПолное 		= "Наложенный платеж";
		НомНаложенныйПлатеж.ЕдиницаИзмерения 		= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
		НомНаложенныйПлатеж.Артикул 				= "1001";
		НомНаложенныйПлатеж.ТипНоменклатуры 		= Перечисления.ТипыНоменклатуры.Услуга;
		НомНаложенныйПлатеж.КатегорияНоменклатуры 	= Справочники.КатегорииНоменклатуры.БезКатегории;
		НомНаложенныйПлатеж.СчетУчетаЗатрат			= ПланыСчетов.Управленческий;
		НомНаложенныйПлатеж.НаправлениеДеятельности	= Справочники.НаправленияДеятельности.ОсновноеНаправление; 
		НомНаложенныйПлатеж.СтавкаНДС				= Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС");
		НомНаложенныйПлатеж.Записать();
	КонецЕсли;
	
	НомСтраховка = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул","1002");
	Если НомСтраховка.Пустая() Тогда
		НомСтраховка 							= Справочники.Номенклатура.СоздатьЭлемент();
		НомСтраховка.Наименование 				= "Страховка";
		НомСтраховка.НаименованиеПолное			= "Страховка";
		НомСтраховка.ЕдиницаИзмерения 			= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
		НомСтраховка.Артикул 					= "1002";
		НомСтраховка.ТипНоменклатуры 			= Перечисления.ТипыНоменклатуры.Услуга;
		НомСтраховка.КатегорияНоменклатуры 		= Справочники.КатегорииНоменклатуры.БезКатегории;
		НомСтраховка.СчетУчетаЗатрат			= ПланыСчетов.Управленческий;
		НомСтраховка.НаправлениеДеятельности	= Справочники.НаправленияДеятельности.ОсновноеНаправление; 
		НомСтраховка.СтавкаНДС					= Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС");
		НомСтраховка.Записать();
	КонецЕсли;
	
	НомПоздняяДоставка = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул","1016");
	Если НомПоздняяДоставка.Пустая() Тогда
		НомПоздняяДоставка 							= Справочники.Номенклатура.СоздатьЭлемент();
		НомПоздняяДоставка.Наименование 			= "Поздняя доставка";
		НомПоздняяДоставка.НаименованиеПолное		= "Поздняя доставка";
		НомПоздняяДоставка.ЕдиницаИзмерения			= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
		НомПоздняяДоставка.Артикул 					= "1016";
		НомПоздняяДоставка.ТипНоменклатуры 			= Перечисления.ТипыНоменклатуры.Услуга;
		НомПоздняяДоставка.КатегорияНоменклатуры 	= Справочники.КатегорииНоменклатуры.БезКатегории;
		НомПоздняяДоставка.СчетУчетаЗатрат			= ПланыСчетов.Управленческий;
		НомПоздняяДоставка.НаправлениеДеятельности	= Справочники.НаправленияДеятельности.ОсновноеНаправление; 
		НомПоздняяДоставка.СтавкаНДС				= Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС");
		НомПоздняяДоставка.Записать();
	КонецЕсли;
	
	НомРКО = Справочники.Номенклатура.НайтиПоНаименованию("Расчетно-кассовое обслуживание");
	Если НомРКО.Пустая() Тогда
		НомРКО									= Справочники.Номенклатура.СоздатьЭлемент();
		НомРКО.Наименование 					= "Расчетно-кассовое обслуживание";
		НомРКО.НаименованиеПолное				= "Расчетно-кассовое обслуживание";
		НомРКО.ЕдиницаИзмерения 				= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796"); 
		НомРКО.ТипНоменклатуры 					= Перечисления.ТипыНоменклатуры.Услуга;
		НомРКО.КатегорияНоменклатуры 			= Справочники.КатегорииНоменклатуры.БезКатегории;
		НомРКО.СчетУчетаЗатрат					= ПланыСчетов.Управленческий;
		НомРКО.НаправлениеДеятельности			= Справочники.НаправленияДеятельности.ОсновноеНаправление;
		НомРКО.СтавкаНДС						= Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС");
		НомРКО.Записать();
	КонецЕсли;
	
	НомСбор = Справочники.Номенклатура.НайтиПоНаименованию("Сбор");
	Если НомСбор.Пустая() Тогда
		НомСбор 								= Справочники.Номенклатура.СоздатьЭлемент();
		НомСбор.Наименование 					= "Сбор";
		НомСбор.НаименованиеПолное				= "Сбор";
		НомСбор.ЕдиницаИзмерения 				= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796"); 
		НомСбор.ТипНоменклатуры 				= Перечисления.ТипыНоменклатуры.Услуга;
		НомСбор.КатегорияНоменклатуры 			= Справочники.КатегорииНоменклатуры.БезКатегории;
		НомСбор.СчетУчетаЗатрат					= ПланыСчетов.Управленческий;
		НомСбор.НаправлениеДеятельности			= Справочники.НаправленияДеятельности.ОсновноеНаправление;
		НомСбор.СтавкаНДС						= Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС");
		НомСбор.Записать();
	КонецЕсли;

	НомСамовывоз = Справочники.Номенклатура.НайтиПоНаименованию("Самовывоз");
	Если НомСамовывоз.Пустая() Тогда
		НомСамовывоз 							= Справочники.Номенклатура.СоздатьЭлемент();
		НомСамовывоз.Наименование 				= "Самовывоз";
		НомСамовывоз.НаименованиеПолное			= "Самовывоз";
		НомСамовывоз.ЕдиницаИзмерения 			= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796"); 
		НомСамовывоз.ТипНоменклатуры 			= Перечисления.ТипыНоменклатуры.Услуга;
		НомСамовывоз.КатегорияНоменклатуры 		= Справочники.КатегорииНоменклатуры.БезКатегории;
		НомСамовывоз.СчетУчетаЗатрат			= ПланыСчетов.Управленческий;
		НомСамовывоз.НаправлениеДеятельности	= Справочники.НаправленияДеятельности.ОсновноеНаправление;
		НомСамовывоз.СтавкаНДС					= Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС");
		НомСамовывоз.Записать();
	КонецЕсли;
	
	НомСтраховка = Справочники.Номенклатура.НайтиПоНаименованию("Страховка");
	Если НомСтраховка.Пустая() Тогда
		НомСтраховка 							= Справочники.Номенклатура.СоздатьЭлемент();
		НомСтраховка.Наименование 				= "Страховка";
		НомСтраховка.НаименованиеПолное			= "Страховка"; 
		НомСтраховка.ЕдиницаИзмерения 			= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796"); 
		НомСтраховка.ТипНоменклатуры 			= Перечисления.ТипыНоменклатуры.Услуга;
		НомСтраховка.КатегорияНоменклатуры 		= Справочники.КатегорииНоменклатуры.БезКатегории;
		НомСтраховка.СчетУчетаЗатрат			= ПланыСчетов.Управленческий;
		НомСтраховка.НаправлениеДеятельности	= Справочники.НаправленияДеятельности.ОсновноеНаправление;
		НомСтраховка.СтавкаНДС					= Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС");
		НомСтраховка.Записать();
	КонецЕсли;
	
	//Розничный покупатель
	
	Контрагент = Справочники.Контрагенты.НайтиПоНаименованию("Розничный покупатель");
	Если Контрагент.Пустая() Тогда
		Контрагент 								= Справочники.Контрагенты.СоздатьЭлемент();
		Контрагент.Наименование 				= "Розничный покупатель";
		Контрагент.КонтактноеЛицо 				= "Розничный покупатель";
		Контрагент.ВидКонтрагента 				= Перечисления.ВидыКонтрагентов.ФизическоеЛицо;
		Контрагент.СтранаРегистрации 			= Справочники.СтраныМира.Россия;
		Контрагент.ES_ВидКонтрагента 			= Перечисления.ES_ВидКонтрагента.В2В;
		Контрагент.СчетУчетаАвансовПокупателя   = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
		Контрагент.СчетУчетаАвансовПоставщику	= ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
		Контрагент.СчетУчетаРасчетовСПокупателем = ПланыСчетов.Управленческий.РасчетыСПокупателями; 
		Контрагент.СчетУчетаРасчетовСПоставщиком = ПланыСчетов.Управленческий.РасчетыСПоставщиками;
		Контрагент.Покупатель 					= Истина;
		Контрагент.Поставщик 					= Истина;
		Контрагент.ПрочиеОтношения 				= Истина;
		Контрагент.ВестиРасчетыПоДоговорам		= Истина;
		Контрагент.ВестиРасчетыПоДокументам		= Истина;
		Контрагент.ВестиРасчетыПоЗаказам		= Истина;
		Контрагент.ВестиУчетОплатыПоСчетам		= Истина;
		Контрагент.Записать();
	КонецЕсли;
	//Заполняем настройки   		
	Объект.УслугаДоставки   = НомДоставка;
	Объект.УслугаРКО		= НомРКО;
	Объект.УслугаСбора		= НомСбор;
	Объект.УслугаСамовывоза	= НомСамовывоз;
	Объект.УслугаСтраховки	= НомСтраховка;
	
	Объект.РозничныйПокупатель = Контрагент;
	
	Объект.Организация 		= Справочники.Организации.НайтиПоНаименованию("Наша фирма");
	Объект.Склад		    = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Основной склад");
	Объект.КассаНаложенныхПлатежей = Справочники.Кассы.НайтиПоНаименованию("Основная касса");
	Объект.ОсновнойГород	= "Москва";
	Объект.ПозднееВремя		= '00010101190000';
	
	Объект.Коэффициент		= 5000;
	Объект.ИспользоватьТарифныйКалькулятор = Истина;
	Объект.ВидДоставки		= Перечисления.ES_ВидыДоставки.СкладДвери;
	Объект.ВидЗабора		= Перечисления.ES_ВидыЗабора.ПодЗаказ;
	
	Объект.КодДвериДвери = "Д-Д";
	Объект.КодСкладДвери = "Т-Д";
	Объект.КодТерминалПВЗ = "Т-ПВЗ";
	Объект.КодТерминалТерминал = "Т-Т";
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//ЭР Несторук С.И. 10.04.2019 9:32:27 {
	ES_БиллингКлиент.ПроверитьДоступностьСервисаDelans(Отказ);
	//}ЭР Несторук С.И.
КонецПроцедуры

//Efsol Рыбалка Н.А. 04.06.2019+
&НаКлиенте
Процедура ПодключениеБотаТелеграм(Команда)
	ОткрытьФорму("Обработка.ES_ПомощникДляБотаТелеграм.Форма.ФормаУпр");
КонецПроцедуры


&НаКлиенте
Процедура ТокенБотаДляТелеграмНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТокенБотаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ТокенБотаПриИзмененииНаСервере()
	
	Элементы.ТокенБотаДляТелеграм.СписокВыбора.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_ТаблицаТокенов.Токен КАК Токен
	|ИЗ
	|	РегистрСведений.ES_ТаблицаТокенов КАК ES_ТаблицаТокенов";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Элементы.ТокенБотаДляТелеграм.СписокВыбора.Добавить(Выборка.Токен);
	КонецЦикла;
	Элементы.ТокенБотаДляТелеграм.РежимВыбораИзСписка = Истина;
	//Объект.ТокенБота = СЗ;
	
КонецПроцедуры

&НаКлиенте
Процедура ИДЧатаДляТелеграмНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ИДЧатаДляТелеграмНаСервере();
КонецПроцедуры

&НаСервере
Процедура ИДЧатаДляТелеграмНаСервере()
	
	Элементы.ИДЧатаДляТелеграм.СписокВыбора.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_ТаблицаТокенов.ИДЧата КАК ИДЧата
	|ИЗ
	|	РегистрСведений.ES_ТаблицаТокенов КАК ES_ТаблицаТокенов";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Элементы.ИДЧатаДляТелеграм.СписокВыбора.Добавить(Выборка.ИДЧата);
	КонецЦикла;
	Элементы.ИДЧатаДляТелеграм.РежимВыбораИзСписка = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура ШаблонСообщенияДляЗаказаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура АдресСкладаПриИзменении(Элемент)

	АдресСкладаПриИзминенииНаСервере();
	
КонецПроцедуры


&НаСервере
Процедура АдресСкладаПриИзминенииНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.АдресСклада) Тогда
		Объект.АдресСкладаДолгота = "";
		Объект.АдресСкладаШирота = "";
		Возврат;
	КонецЕсли;
	
	Если ES_YandexMaps.ПроверкаИнтернет() Тогда
		СтруктураГеокодирования = ES_YandexMaps.ГеокодированияПолучитьКоординаты(Объект.АдресСклада);
		
		Объект.АдресСкладаДолгота = СтруктураГеокодирования.Долгота;
		Объект.АдресСкладаШирота = СтруктураГеокодирования.Широта;
	КонецЕсли;
	
КонецПроцедуры
//Efsol Рыбалка Н.А.-
