
#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущееРабочееМесто = ПараметрыСеанса.РабочееМестоКлиента;
	РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	Если РазделениеВключено Тогда
		ИнтервалПроверкиЧековПоУмолчанию = 300;
	Иначе
		ИнтервалПроверкиЧековПоУмолчанию = 30;
	КонецЕсли;
	
	ЗаполнитьПодключенноеОборудование();
	
	ОперацииПоКартам.Параметры.УстановитьЗначениеПараметра("РабочееМесто", ТекущееРабочееМесто);
	ОперацииПоКартам.Параметры.УстановитьЗначениеПараметра("ВсеРабочиеМеста", ВсеРабочиеМеста);
	ОперацииПоКартам.Параметры.УстановитьЗначениеПараметра("ПодключенныеКассыККМ", ПодключенныеКассыККМ.ВыгрузитьЗначения());
	
	КассыККМ.Параметры.УстановитьЗначениеПараметра("РабочееМесто", ТекущееРабочееМесто);
	КассыККМ.Параметры.УстановитьЗначениеПараметра("ВсеРабочиеМеста", ВсеРабочиеМеста);
	КассыККМ.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", УправлениеНебольшойФирмойВызовСервера.ДатаСеанса());
	КассыККМ.Параметры.УстановитьЗначениеПараметра("ПодключенныеКассыККМ", ПодключенныеКассыККМ.ВыгрузитьЗначения());
	
	ОбменыССайтом.ТекстЗапроса = ТекстЗапросаОбменыССайтом(); //Разные регистры для разделенного и неразделенного режимов
	ОбменыССайтом.Параметры.УстановитьЗначениеПараметра("ВсеРабочиеМеста", ВсеРабочиеМеста);
	ОбменыССайтом.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", УправлениеНебольшойФирмойВызовСервера.ДатаСервера());
	ОбменыССайтом.Параметры.УстановитьЗначениеПараметра("ПодключенныеКассыККМ", ПодключенныеКассыККМ.ВыгрузитьЗначения());
	
	ЗаполнитьСписокВидОплатыНаСайте();
	
	ПроверитьОшибкиОплаты();
	ПроверитьОшибкиККМ();
	ПроверитьОшибкиОбмены();
	ДатаВремяСледующейПроверки = УправлениеНебольшойФирмойВызовСервера.ДатаСеанса() + 30;
	ОбновитьСостояниеРасписаниеПроверкиОплат();
	
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	
	// Установим формат для текущей даты: ДФ=Ч:мм
	УправлениеНебольшойФирмойСервер.УстановитьОформлениеКолонкиДата(ОперацииПоКартам);
	УправлениеНебольшойФирмойСервер.УстановитьОформлениеКолонкиДата(КассыККМ);
	УправлениеНебольшойФирмойСервер.УстановитьОформлениеКолонкиДата(ОбменыССайтом);
		
	СтруктураИменЭлементовККМ = Новый Структура;
	СтруктураИменЭлементовККМ.Вставить("ФильтрыНастройкиИДопИнфо", "ФильтрыНастройкиИДопИнфоККМ");
	СтруктураИменЭлементовККМ.Вставить("ДекорацияРазвернутьОтборы", "ДекорацияРазвернутьОтборыККМ");
	СтруктураИменЭлементовККМ.Вставить("ПраваяПанель", "ПраваяПанельККМ");
	СтруктураИменЭлементовККМ.Вставить("ОтборПериод", "ОтборПериодККМ");
	СтруктураИменЭлементовККМ.Вставить("ПредставлениеПериода", "ПредставлениеПериодаККМ");
	СтруктураИменЭлементовККМ.Вставить("ИмяПоляОтбора", "НачалоКассовойСмены");
	
	СтруктураИменЭлементовОбмен = Новый Структура;
	СтруктураИменЭлементовОбмен.Вставить("ФильтрыНастройкиИДопИнфо", "ФильтрыНастройкиИДопИнфоОбмен");
	СтруктураИменЭлементовОбмен.Вставить("ДекорацияРазвернутьОтборы", "ДекорацияРазвернутьОтборыОбмен");
	СтруктураИменЭлементовОбмен.Вставить("ПраваяПанель", "ПраваяПанельОбмен");
	СтруктураИменЭлементовОбмен.Вставить("ОтборПериод", "ОтборПериодОбмен");
	СтруктураИменЭлементовОбмен.Вставить("ПредставлениеПериода", "ПредставлениеПериодаОбмен");
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		
		РаботаСОтборами.СвернутьРазвернутьОтборыНаСервере(ЭтотОбъект, Истина);
		РаботаСОтборами.СвернутьРазвернутьОтборыНаСервере(ЭтотОбъект, Истина, СтруктураИменЭлементовККМ);
		РаботаСОтборами.СвернутьРазвернутьОтборыНаСервере(ЭтотОбъект, Истина, СтруктураИменЭлементовОбмен);

		ЭтоНачальнаяСтраница = Ложь;
		
	ИначеЕсли Параметры.Свойство("ЭтоНачальнаяСтраница") Тогда

		РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, ОперацииПоКартам, "ОперацииПоКартам");
		РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, КассыККМ, "КассыККМ", СтруктураИменЭлементовККМ,,,, "ДанныеМетокККМ");
		РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, ОбменыССайтом, "ОбменыССайтом", СтруктураИменЭлементовОбмен,,,, "ДанныеМетокОбмен");
		ПечататьБумажныйЧек = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(ИмяФормы, "ПечататьБумажныйЧек", Ложь);

		ЭтоНачальнаяСтраница = Ложь;
		
	Иначе
		
		РаботаСОтборами.СвернутьРазвернутьОтборыНаСервере(ЭтотОбъект, Ложь);
		РаботаСОтборами.СвернутьРазвернутьОтборыНаСервере(ЭтотОбъект, Ложь, СтруктураИменЭлементовККМ);
		РаботаСОтборами.СвернутьРазвернутьОтборыНаСервере(ЭтотОбъект, Ложь, СтруктураИменЭлементовОбмен);
		ПредставлениеПериода	= РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(Неопределено);
		ПредставлениеПериодаККМ	= РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(Неопределено);
		ПредставлениеПериодаОбмен = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(Неопределено);
		
		ЭтоНачальнаяСтраница = Истина;
		
	КонецЕсли;
	
	АвторПоУмолчанию = ПараметрыСеанса.ТекущийПользователь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОсталосьДоПроверки = ДатаВремяСледующейПроверки - УправлениеНебольшойФирмойВызовСервера.ДатаСеанса();
	
	ОбновитьКартинкиИТекстОшибок();
	
	Если ОсталосьДоПроверки>0 Тогда
		ПодключитьОбработчикОжидания("ПроверитьЧеки", ОсталосьДоПроверки, Истина);
		
		Если ОплатыКартойДляПробитияЧекаККМ.Количество()>0 И НЕ ИдетПечатьЧека Тогда
			ПодключитьОбработчикОжидания("НапечататьЧек", 1, Истина);
		КонецЕсли;
		
	Иначе
		ПодключитьОбработчикОжидания("ПроверитьЧеки", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		//УНФ.ОтборыСписка
		СохранитьНастройкиОтборов();
		//Конец УНФ.ОтборыСписка
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия="ЗавершенСеансОбменаССайтом" Тогда
		Если ТипЗнч(Параметр) = Тип("ПланОбменаСсылка.ОбменУправлениеНебольшойФирмойСайт") Тогда
			//Запустить формирование чеков
			ПроверитьЧеки();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		ЗакрытиеПодтверждено = Истина;
	КонецЕсли;
	
	Если НЕ ЗакрытиеПодтверждено Тогда
		
		ПодтвердитьЗакрытие();
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьЗакрытие()
	
	ТекстВопроса = НСтр("ru = 'Закрыть монитор?
	|Чеки онлайн-оплат не будут формироваться автоматически.'");
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(1, НСтр("ru = 'Не закрывать'"));
	Кнопки.Добавить(2, НСтр("ru = 'Закрыть'"));
	
	ОтключитьОбработчикОжидания("ПроверитьЧеки");
	
	Обработчик = Новый ОписаниеОповещения("ОтменитьЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки, 60,1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ПрерватьЕслиНеВыполнено = (Ответ = 2);
	Если ПрерватьЕслиНеВыполнено Тогда
		ЗакрытиеПодтверждено = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаОшибок

&НаКлиенте
Процедура ПроверитьЧеки()
	
	ОбщееСостояние = НСтр("ru = 'Обновляю данные об оплатах'");
	
	ПеречитатьДанные();
	
	ОбновитьКартинкиИТекстОшибок();
	
	Если ОплатыКартойДляПробитияЧекаККМ.Количество()>0 И НЕ ИдетПечатьЧека Тогда
		ПодключитьОбработчикОжидания("НапечататьЧек", 0.1, Истина);
	ИначеЕсли Ошибки.Количество() > 0  И НЕ ИдетПечатьЧека И ЗначениеЗаполнено(ТекущееРабочееМесто) Тогда
		ОтправитьОповещения();
	КонецЕсли;
	
	ВремяДоСледующегоЗапуска = ДатаВремяСледующейПроверки - УправлениеНебольшойФирмойВызовСервера.ДатаСеанса();
	
	Если ВремяДоСледующегоЗапуска>0 Тогда
		ПодключитьОбработчикОжидания("ПроверитьЧеки", ВремяДоСледующегоЗапуска, Истина);
	Иначе
		ПодключитьОбработчикОжидания("ПроверитьЧеки", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьДанные()
	
	Ошибки.Очистить();
	
	ПроверитьОшибкиОплаты();
	ПроверитьОшибкиККМ();
	ПроверитьОшибкиОбмены();
	ОбновитьСостояниеРасписаниеПроверкиОплат();

КонецПроцедуры

&НаСервере
Процедура ОтправитьОповещения()
	
	Если (УправлениеНебольшойФирмойВызовСервера.ДатаСеанса() - ДатаВремяПоследнейОтправки) < 60*15 Тогда //15 минут между повторными оправками
		Возврат;
	КонецЕсли;
	
	СобытиеРабочегоПроцесса = Перечисления.СобытияРабочегоПроцесса.ОшибкаПробитияОнлайнЧеков;
	Источник = ТекущееРабочееМесто.ПолучитьОбъект();
	ДанныеРабочегоПроцесса = Новый Структура;
	ДанныеРабочегоПроцесса.Вставить("ЭтоНовый", Истина);
	ДанныеРабочегоПроцесса.Вставить("СобытиеРабочегоПроцесса",	СобытиеРабочегоПроцесса);
	
	ДанныеРабочегоПроцесса.Вставить("ДанныеИсточника", Новый Структура("ПроизвольныеПараметры", Новый  Структура("КоличествоОшибок, ТекстОшибок", Строка(Ошибки.Количество()), ПолныйТекстОшибок())));
	
	Источник.ДополнительныеСвойства.Вставить("ДанныеРабочегоПроцесса", ДанныеРабочегоПроцесса);
	
	РабочиеПроцессы.ВыполнитьРабочийПроцессПриЗаписиИсточника(Источник, Ложь);
	
	Типы = Новый Массив;
	
	Типы.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	Типы.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	Типы.Добавить(Тип("ДокументСсылка.ЗаказНаПроизводство"));
	Типы.Добавить(Тип("ДокументСсылка.Событие"));
	Типы.Добавить(Тип("ДокументСсылка.ЗаданиеНаРаботу"));
	Типы.Добавить(Тип("ДокументСсылка.ПриемИПередачаВРемонт"));
	Типы.Добавить(Тип("СправочникСсылка.РабочиеМеста"));
	
	ДанныеКОбработке = Новый ТаблицаЗначений;
	ДанныеКОбработке.Колонки.Добавить("Источник",			Новый ОписаниеТипов(Типы));
	ДанныеКОбработке.Колонки.Добавить("СобытиеПроцесса",	Новый ОписаниеТипов("ПеречислениеСсылка.СобытияРабочегоПроцесса"));
	ДанныеКОбработке.Колонки.Добавить("Автор",				Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ДанныеКОбработке.Колонки.Добавить("ДанныеИсточника");
	
	СтрокаДанных = ДанныеКОбработке.Добавить();
	СтрокаДанных.Источник			= Источник.Ссылка;
	СтрокаДанных.СобытиеПроцесса	= ДанныеРабочегоПроцесса.СобытиеРабочегоПроцесса;
	СтрокаДанных.Автор				= Пользователи.ТекущийПользователь();
	Если ДанныеРабочегоПроцесса.Свойство("ДанныеИсточника") Тогда
		СтрокаДанных.ДанныеИсточника = ДанныеРабочегоПроцесса.ДанныеИсточника;
	КонецЕсли;

	РабочиеПроцессы.ОбработатьПравилаРабочихПроцессов(ДанныеКОбработке);
	
	ДатаВремяПоследнейОтправки = УправлениеНебольшойФирмойВызовСервера.ДатаСеанса();
	
КонецПроцедуры

Функция ПолныйТекстОшибок()
	
	ТекстОшибок = "";
	Для каждого стр Из Ошибки Цикл
		ТекстОшибок = ТекстОшибок + стр.ДатаВремя + " " + стр.ИсточникОшибки + Символы.ПС + стр.ТекстОшибки + Символы.ПС;
	КонецЦикла; 
	
	Возврат ТекстОшибок;
	
КонецФункции

&НаСервере
Процедура ПроверитьОшибкиОплаты()
	
	ОчиститьОшибкиПоТипуИсточника(1, Ошибки);

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОперацияПоПлатежнымКартам.Ссылка КАК ДокументОплаты
	|ИЗ
	|	Документ.ОперацияПоПлатежнымКартам КАК ОперацияПоПлатежнымКартам
	|ГДЕ
	|	ОперацияПоПлатежнымКартам.СпособОплаты = ЗНАЧЕНИЕ(Перечисление.СпособыОплатыЭквайринг.ОплатаОнлайн)
	|	И ОперацияПоПлатежнымКартам.КассаККМ В(&ПодключенныеКассыККМ)
	|	И ОперацияПоПлатежнымКартам.НомерЧекаККМ = 0
	|	И НЕ ОперацияПоПлатежнымКартам.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("РабочееМесто", ПараметрыСеанса.РабочееМестоКлиента);
	Запрос.УстановитьПараметр("ВсеРабочиеМеста", ВсеРабочиеМеста);
	Запрос.УстановитьПараметр("ТекущаяДата", УправлениеНебольшойФирмойВызовСервера.ДатаСеанса());
	Запрос.УстановитьПараметр("ПодключенныеКассыККМ", ПодключенныеКассыККМ.ВыгрузитьЗначения());
	
	Результат = Запрос.Выполнить().Выгрузить();
	спОплат = Результат.ВыгрузитьКолонку("ДокументОплаты");
	ОплатыКартойДляПробитияЧекаККМ.ЗагрузитьЗначения(спОплат);
	
КонецПроцедуры	

&НаСервере
Процедура ПроверитьОшибкиККМ()

	ОчиститьОшибкиПоТипуИсточника(2, Ошибки);
	
	//проверить кассовые смены
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассоваяСмена.Статус КАК Статус,
	|	КассоваяСмена.НачалоКассовойСмены КАК НачалоКассовойСмены,
	|	КассыККМ.ПодключаемоеОборудование КАК Оборудование,
	|	КассыККМ.ИспользоватьБезПодключенияОборудования КАК БезПодключения,
	|	КассоваяСмена.НомерСменыККТ КАК НомерСменыККТ,
	|	ВЫБОР
	|		КОГДА НЕ КассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА 2
	|		КОГДА РАЗНОСТЬДАТ(&ТекущаяДатаСеанса, КассоваяСмена.НачалоКассовойСмены, ДЕНЬ) >= 1
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Состояние
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КассоваяСмена КАК КассоваяСмена
	|		ПО (КассоваяСмена.КассаККМ = КассыККМ.Ссылка)
	|			И (КассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта))
	|ГДЕ
	|	(КассыККМ.Ссылка В (&ПодключенныеКассыККМ)
	|			ИЛИ &ВсеРабочиеМеста)
	|	И НЕ КассыККМ.ПометкаУдаления
	|ИТОГИ ПО
	|	КассаККМ";
	Запрос.УстановитьПараметр("РабочееМесто", ПараметрыСеанса.РабочееМестоКлиента);
	Запрос.УстановитьПараметр("ВсеРабочиеМеста", ВсеРабочиеМеста);
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", УправлениеНебольшойФирмойВызовСервера.ДатаСеанса());
	Запрос.УстановитьПараметр("ПодключенныеКассыККМ", ПодключенныеКассыККМ.ВыгрузитьЗначения());
	
	Результат = Запрос.Выполнить();
	ВыборкаКассаККМ = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКассаККМ.Следующий() Цикл
		
		ТекстОшибки = "";
		КакИсправить = "";
		ВыборкаСмены = ВыборкаКассаККМ.Выбрать();
		Если ВыборкаСмены.Количество()>1 Тогда
			ТекстОшибки = ТекстОшибки + "Открыто одновременно "+ВыборкаСмены.Количество()+" смены" + Символы.ПС;
			КакИсправить = КакИсправить + "Перейдите на закладку 'Кассы ККМ', выберите строку с более старой сменой, нажмите 'Закрыть смену'" + Символы.ПС;
		КонецЕсли;
		
		Пока ВыборкаСмены.Следующий() Цикл
			Если НЕ ВыборкаСмены.Статус = Перечисления.СтатусыКассовойСмены.Открыта Тогда
				ТекстОшибки = ТекстОшибки + "Смена не открыта" + Символы.ПС;
				КакИсправить = КакИсправить + "Чтобы сформировать чек, в кассе ККМ должна быть открыта смена. Нажмите 'Открыть смену'" + Символы.ПС;
			ИначеЕсли ВыборкаСмены.Статус = Перечисления.СтатусыКассовойСмены.Открыта
				И (УправлениеНебольшойФирмойВызовСервера.ДатаСеанса() - ВыборкаСмены.НачалоКассовойСмены) > 24*3600 Тогда 
				ТекстОшибки = ТекстОшибки + "Смена превысила 24 часа" + Символы.ПС;
				КакИсправить = КакИсправить + "Длительность смены ККМ не должна превышать 24 часа. Нужно закрыть смену" + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
		
		Если ТекстОшибки<>"" Тогда
			НайтиДобавитьОшибку(ВыборкаКассаККМ.КассаККМ, Ошибки, ТекстОшибки, КакИсправить);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ПроверитьОшибкиОбмены()
	
	ОчиститьОшибкиПоТипуИсточника(3, Ошибки);
	
	//Обмены с сайтом
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(РегистрСведенийСостоянияОбменовССайтами.УзелИнформационнойБазы КАК ПланОбмена.ОбменУправлениеНебольшойФирмойСайт) КАК УзелОбмена,
	|	РегистрСведенийСостоянияОбменовССайтами.ДействиеПриОбмене КАК ДействиеПриОбмене,
	|	РегистрСведенийСостоянияОбменовССайтами.РезультатВыполненияОбмена КАК РезультатВыполненияОбмена,
	|	РегистрСведенийСостоянияОбменовССайтами.ДатаНачала КАК ДатаНачала,
	|	РегистрСведенийСостоянияОбменовССайтами.ДатаОкончания КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА РАЗНОСТЬДАТ(РегистрСведенийСостоянияОбменовССайтами.ДатаОкончания, &ТекущаяДата, МИНУТА) < 0
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(РегистрСведенийСостоянияОбменовССайтами.ДатаОкончания, &ТекущаяДата, МИНУТА)
	|	КОНЕЦ КАК МинутОтПоследнегоОбмена
	|ИЗ
	|	РегистрСведений.СостоянияОбменовССайтами КАК РегистрСведенийСостоянияОбменовССайтами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланОбмена.ОбменУправлениеНебольшойФирмойСайт.СоответствиеВидовОплат КАК ОбменУправлениеНебольшойФирмойСайтСоответствиеВидовОплат
	|		ПО РегистрСведенийСостоянияОбменовССайтами.УзелИнформационнойБазы = ОбменУправлениеНебольшойФирмойСайтСоответствиеВидовОплат.Ссылка
	|ГДЕ
	|	РегистрСведенийСостоянияОбменовССайтами.УзелИнформационнойБазы ССЫЛКА ПланОбмена.ОбменУправлениеНебольшойФирмойСайт
	|	И РегистрСведенийСостоянияОбменовССайтами.УзелИнформационнойБазы.ОнлайнОплаты
	|	И НЕ РегистрСведенийСостоянияОбменовССайтами.УзелИнформационнойБазы.ПометкаУдаления
	|	И РегистрСведенийСостоянияОбменовССайтами.ДействиеПриОбмене <> ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ПустаяСсылка)
	|	И (ОбменУправлениеНебольшойФирмойСайтСоответствиеВидовОплат.АналитикаОплаты.Касса В (&ПодключенныеКассыККМ)
	|			ИЛИ &ВсеРабочиеМеста)";
	
	Запрос.УстановитьПараметр("ВсеРабочиеМеста", ВсеРабочиеМеста);
	Запрос.УстановитьПараметр("ТекущаяДата", УправлениеНебольшойФирмойВызовСервера.ДатаСервера());
	Запрос.УстановитьПараметр("ПодключенныеКассыККМ", ПодключенныеКассыККМ.ВыгрузитьЗначения());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Количество()=0 Тогда
		СостояниеУзлаОбмена = "Нет узлов обмена, в которых настроена загрузка онлайн-оплат, либо обмен не выполнялся";
	КонецЕсли;
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = "";
		ТекстПросроченОбмен = "";
		КакИсправить="";
		
		Если Выборка.МинутОтПоследнегоОбмена>5 Тогда
			ТекстОшибки = "Последний обмен выполнялся " + Символы.ПС + Выборка.МинутОтПоследнегоОбмена +" минут назад." + Символы.ПС;
			КакИсправить = КакИсправить + "Откройте узел обмена, проверьте соединение с сайтом."+ Символы.ПС;
			НайтиДобавитьОшибку(ПредставлениеУзлаОбменаДляОтбора(Выборка.УзелОбмена, Выборка.ДействиеПриОбмене), Ошибки, ТекстОшибки, КакИсправить);
		КонецЕсли;
		Если Выборка.РезультатВыполненияОбмена <> Перечисления.РезультатыВыполненияОбмена.Выполнено Тогда
			ТекстОшибки = "Результат обмена: "+Выборка.РезультатВыполненияОбмена + Символы.ПС;
			КакИсправить = "Чтобы просмотреть описание ошибки, нажмите 'Открыть журнал событий' и откройте событие с ошибкой";
			НайтиДобавитьОшибку(ПредставлениеУзлаОбменаДляОтбора(Выборка.УзелОбмена, Выборка.ДействиеПриОбмене), Ошибки, ТекстОшибки, КакИсправить);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьОшибкиПоТипуИсточника(ТипИсточника, Ошибки)

	ОтборОшибок = Новый Структура("ТипИсточника", ТипИсточника);
	НайдОшибки = Ошибки.НайтиСтроки(ОтборОшибок);
	Для каждого стр Из НайдОшибки Цикл
		Ошибки.Удалить(стр);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НайтиДобавитьОшибку(ИсточникОшибки, Ошибки, ТекстСообщения, КакИсправить="")
	
	НайдСтроки = Ошибки.НайтиСтроки(Новый Структура("ИсточникОшибки", ИсточникОшибки));
	Если НайдСтроки.Количество()>0 Тогда
		Для каждого стр Из НайдСтроки Цикл
			стр.ТекстОшибки = стр.ТекстОшибки + ТекстСообщения;
			стр.ДатаВремя = УправлениеНебольшойФирмойВызовСервера.ДатаСеанса();
			Если КакИсправить<>"" Тогда
				Стр.КакИсправить = Стр.КакИсправить + КакИсправить;
			КонецЕсли;
		КонецЦикла;
	Иначе
		НовСтр = Ошибки.Добавить();
		НовСтр.ИсточникОшибки = ИсточникОшибки;
		НовСтр.ТекстОшибки = ТекстСообщения;
		НовСтр.КакИсправить = КакИсправить;
		НовСтр.ДатаВремя = УправлениеНебольшойФирмойВызовСервера.ДатаСеанса();
		Если ТипЗнч(ИсточникОшибки) = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам") Тогда
			НовСтр.ТипИсточника = 1;
		ИначеЕсли ТипЗнч(ИсточникОшибки) = Тип("СправочникСсылка.КассыККМ") Тогда
			НовСтр.ТипИсточника = 2;
		ИначеЕсли ТипЗнч(ИсточникОшибки) = Тип("Строка") Тогда
			НовСтр.ТипИсточника = 3;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКартинкиИТекстОшибок()
	
	Если Ошибки.НайтиСтроки(Новый Структура("ТипИсточника",1)).Количество()>0 
		ИЛИ ОплатыКартойДляПробитияЧекаККМ.Количество()>0
		Тогда
		Элементы.СтраницаОплаты.Картинка = БиблиотекаКартинок.ПроверкаНеУспешна20;
	Иначе
		Элементы.СтраницаОплаты.Картинка = БиблиотекаКартинок.ПроверкаУспешна20;
	КонецЕсли;
	
	Если Ошибки.НайтиСтроки(Новый Структура("ТипИсточника",2)).Количество()>0 Тогда
		Элементы.СтраницаКассыККМ.Картинка = БиблиотекаКартинок.ПроверкаНеУспешна20;
	Иначе
		Элементы.СтраницаКассыККМ.Картинка = БиблиотекаКартинок.ПроверкаУспешна20;
	КонецЕсли;
	
	Если Ошибки.НайтиСтроки(Новый Структура("ТипИсточника",3)).Количество()>0 Тогда
		Элементы.СтраницаУзлыОбмена.Картинка = БиблиотекаКартинок.ПроверкаНеУспешна20;
	Иначе
		Элементы.СтраницаУзлыОбмена.Картинка = БиблиотекаКартинок.ПроверкаУспешна20;
	КонецЕсли;
	
	Если ОплатыКартойДляПробитияЧекаККМ.Количество()>0 И ИдетПечатьЧека Тогда
		ОбщееСостояние = НСтр("ru = 'Формирую чек '") + ОплатыКартойДляПробитияЧекаККМ[0].Значение;
		Элементы.КартинкаСостояние.Картинка = БиблиотекаКартинок.ПроверкаВыполняется20;
	ИначеЕсли Ошибки.Количество()=0 Тогда
		Элементы.КартинкаСостояние.Картинка = БиблиотекаКартинок.ПроверкаУспешна20;
		ОбщееСостояние = "Успешно";
	Иначе	
		Элементы.КартинкаСостояние.Картинка = БиблиотекаКартинок.ПроверкаНеУспешна20;
		ОбщееСостояние = "Ошибок: " + Ошибки.Количество();
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОплаты Тогда
		ОбновитьОплатыПраваяПанель();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКассыККМ Тогда
		ОбновитьККМПраваяПанель();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУзлыОбмена Тогда
		ОбновитьОбменПраваяПанель();
	КонецЕсли;
	
	Элементы.СтраницаОшибки.Заголовок = ?(Ошибки.Количество()=0, "Ошибки", "Ошибки ("+Ошибки.Количество()+")");

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОшибки(Команда)
	
	Ошибки.Очистить();
	Элементы.СтраницаОшибки.Заголовок = ?(Ошибки.Количество()=0, "Все ошибки", "Все ошибки ("+Ошибки.Количество()+")");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ТекстЗапросаОбменыССайтом()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(РегистрСведенийСостоянияОбменовССайтами.УзелИнформационнойБазы КАК ПланОбмена.ОбменУправлениеНебольшойФирмойСайт) КАК УзелОбмена,
	|	РегистрСведенийСостоянияОбменовССайтами.ДействиеПриОбмене КАК ДействиеПриОбмене,
	|	РегистрСведенийСостоянияОбменовССайтами.РезультатВыполненияОбмена КАК РезультатВыполненияОбмена,
	|	РегистрСведенийСостоянияОбменовССайтами.ДатаНачала КАК ДатаНачала,
	|	РегистрСведенийСостоянияОбменовССайтами.ДатаОкончания КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА РегистрСведенийСостоянияОбменовССайтами.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Ошибка)
	|				ИЛИ РегистрСведенийСостоянияОбменовССайтами.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения)
	|			ТОГДА 2
	|		КОГДА РАЗНОСТЬДАТ(РегистрСведенийСостоянияОбменовССайтами.ДатаОкончания, &ТекущаяДата, МИНУТА) > 15
	|			ТОГДА 2
	|		КОГДА РАЗНОСТЬДАТ(РегистрСведенийСостоянияОбменовССайтами.ДатаОкончания, &ТекущаяДата, МИНУТА) > 5
	|			ТОГДА 1
	|		КОГДА РегистрСведенийСостоянияОбменовССайтами.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Выполнено)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Состояние,
	|	ВЫБОР
	|		КОГДА РАЗНОСТЬДАТ(РегистрСведенийСостоянияОбменовССайтами.ДатаОкончания, &ТекущаяДата, МИНУТА) < 0
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(РегистрСведенийСостоянияОбменовССайтами.ДатаОкончания, &ТекущаяДата, МИНУТА)
	|	КОНЕЦ КАК МинутОтПоследнегоОбмена
	|ИЗ
	|	РегистрСведений.СостоянияОбменовССайтами КАК РегистрСведенийСостоянияОбменовССайтами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланОбмена.ОбменУправлениеНебольшойФирмойСайт.СоответствиеВидовОплат КАК ОбменУправлениеНебольшойФирмойСайтСоответствиеВидовОплат
	|		ПО РегистрСведенийСостоянияОбменовССайтами.УзелИнформационнойБазы = ОбменУправлениеНебольшойФирмойСайтСоответствиеВидовОплат.Ссылка
	|ГДЕ
	|	РегистрСведенийСостоянияОбменовССайтами.УзелИнформационнойБазы ССЫЛКА ПланОбмена.ОбменУправлениеНебольшойФирмойСайт
	|	И РегистрСведенийСостоянияОбменовССайтами.УзелИнформационнойБазы.ОнлайнОплаты
	|	И НЕ РегистрСведенийСостоянияОбменовССайтами.УзелИнформационнойБазы.ПометкаУдаления
	|	И РегистрСведенийСостоянияОбменовССайтами.ДействиеПриОбмене <> ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ПустаяСсылка)
	|	И (ОбменУправлениеНебольшойФирмойСайтСоответствиеВидовОплат.АналитикаОплаты.Касса В (&ПодключенныеКассыККМ)
	|			ИЛИ &ВсеРабочиеМеста)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьПодключенноеОборудование()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассыККМ.ПодключаемоеОборудование КАК Оборудование,
	|	КассыККМ.ИспользоватьБезПодключенияОборудования КАК БезПодключения,
	|	ВЫБОР
	|		КОГДА КассыККМ.ИспользоватьБезПодключенияОборудования
	|			ТОГДА &РабочееМесто
	|		ИНАЧЕ РабочиеМеста.Ссылка
	|	КОНЕЦ КАК РабочееМесто
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РабочиеМеста КАК РабочиеМеста
	|		ПО (КассыККМ.ПодключаемоеОборудование.РабочееМесто = РабочиеМеста.Ссылка
	|				ИЛИ КассыККМ.ИспользоватьБезПодключенияОборудования)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодключаемоеОборудование КАК Оборудование
	|		ПО (КассыККМ.ПодключаемоеОборудование = Оборудование.Ссылка
	|				ИЛИ КассыККМ.ИспользоватьБезПодключенияОборудования)";
	
	Запрос.УстановитьПараметр("РабочееМесто", ТекущееРабочееМесто);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КассаККМ");
	Результат.Добавить(Справочники.КассыККМ.ПустаяСсылка());
	ПодключенныеКассыККМ.ЗагрузитьЗначения(Результат);
		
КонецПроцедуры

Процедура ЗаполнитьСписокВидОплатыНаСайте()
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	 |	ОбменУправлениеНебольшойФирмойСайтСоответствиеВидовОплат.СпособОплатыНаСайте КАК СпособОплатыНаСайте
	 |ИЗ
	 |	ПланОбмена.ОбменУправлениеНебольшойФирмойСайт.СоответствиеВидовОплат КАК ОбменУправлениеНебольшойФирмойСайтСоответствиеВидовОплат
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	 |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РабочиеМеста КАК РабочиеМеста
	 |			ПО ПодключаемоеОборудование.РабочееМесто = РабочиеМеста.Ссылка
	 |		ПО (ОбменУправлениеНебольшойФирмойСайтСоответствиеВидовОплат.АналитикаОплаты.Касса.ПодключаемоеОборудование = ПодключаемоеОборудование.Ссылка
	 |				ИЛИ ОбменУправлениеНебольшойФирмойСайтСоответствиеВидовОплат.АналитикаОплаты.Касса.ИспользоватьБезПодключенияОборудования)
	 |ГДЕ
	 |	(РабочиеМеста.Ссылка = &РабочееМесто
	 |			ИЛИ &ВсеРабочиеМеста)
	 |	И ОбменУправлениеНебольшойФирмойСайтСоответствиеВидовОплат.Ссылка.ОнлайнОплаты
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	СпособОплатыНаСайте";
	 
	 Запрос.Параметры.Вставить("РабочееМесто", ТекущееРабочееМесто);
	 Запрос.Параметры.Вставить("ВсеРабочиеМеста", ВсеРабочиеМеста);
	 Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СпособОплатыНаСайте");
	 
	 Элементы.ОтборВидОплаты.СписокВыбора.ЗагрузитьЗначения(Результат);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеУзлаОбменаДляОтбора(УзелОбмена, ДействиеПриОбмене="")
	
	Возврат СокрЛП(""+УзелОбмена+" "+ДействиеПриОбмене);
	
КонецФункции

&НаКлиенте
Процедура ВсеРабочиеМестаПриИзменении(Элемент)
	
	ОперацииПоКартам.Параметры.УстановитьЗначениеПараметра("ВсеРабочиеМеста", ВсеРабочиеМеста);
	КассыККМ.Параметры.УстановитьЗначениеПараметра("ВсеРабочиеМеста", ВсеРабочиеМеста);
	ОбменыССайтом.Параметры.УстановитьЗначениеПараметра("ВсеРабочиеМеста", ВсеРабочиеМеста);
	
	Элементы.РабочееМесто.Видимость = ВсеРабочиеМеста;
	Элементы.КассыККМРабочееМесто.Видимость = ВсеРабочиеМеста;
	
	ЗаполнитьСписокВидОплатыНаСайте();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОплаты(Команда)
	
	ОбновитьОплатыСервер();
	ОбновитьКартинкиИТекстОшибок();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОплатыСервер()
	
	ПроверитьОшибкиОплаты();
	ОбновитьСостояниеРасписаниеПроверкиОплат();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьККМ(Команда)
	
	Если Элементы.КассыККМ.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьОшибкиККМ();
	ОбновитьКартинкиИТекстОшибок();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьУзлыОбмена(Команда)
	
	ПроверитьОшибкиОбмены();
	ОбновитьКартинкиИТекстОшибок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖурналСобытий(Команда)
	
	ТекДанные = Элементы.ОбменыССайтом.ТекущиеДанные;
	Если ТекДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ДействиеПриОбмене = ПредопределенноеЗначение("Перечисление.ДействияПриОбмене.ЗагрузкаДанных") Тогда
		ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(ТекДанные.УзелОбмена, ЭтотОбъект, "ЗагрузкаДанных");
	Иначе
		ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(ТекДанные.УзелОбмена, ЭтотОбъект, "ВыгрузкаДанных");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КассыККМВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.КассыККМ.ФормаОбъекта",Новый Структура("Ключ", Элементы.КассыККМ.ТекущиеДанные.КассаККМ),ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПоКартамПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ФильтрыНастройкиИДопИнфо.Видимость = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ОперацииПоКартам.ТекущаяСтрока = ТекСтрокаОплаты Тогда
		Возврат;
	Иначе
		ТекСтрокаОплаты = Элементы.ОперацииПоКартам.ТекущаяСтрока;
	КонецЕсли;
	
	СостояниеТекущегоДокумента = "";
	ПодсказкаДляТекущегоДокумента = "";
	
	ПодключитьОбработчикОжидания("ОбновитьОплатыПраваяПанель", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОплатыПраваяПанель()

	ТекДанные = Элементы.ОперацииПоКартам.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайдСтроки = Ошибки.НайтиСтроки(Новый Структура("ИсточникОшибки", ТекДанные.Ссылка));
	Если НайдСтроки.Количество()>0 Тогда
		СостояниеТекущегоДокумента = Строка(ТекДанные.Статус) + Символы.ПС;
		ПодсказкаДляТекущегоДокумента = "";
		Для каждого стр Из НайдСтроки Цикл
			СостояниеТекущегоДокумента = СостояниеТекущегоДокумента + стр.ТекстОшибки + Символы.ПС;
			ПодсказкаДляТекущегоДокумента = ПодсказкаДляТекущегоДокумента + стр.КакИсправить + Символы.ПС;
		КонецЦикла;
		Элементы.ГруппаПодсказкаОплаты.Видимость = Истина;
	Иначе
		СостояниеТекущегоДокумента = Строка(ТекДанные.Статус) + Символы.ПС;
		Элементы.ГруппаПодсказкаОплаты.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры	
	
&НаКлиенте
Процедура КассыККМПриАктивизацииСтроки(Элемент)
	
	Если Элементы.КассыККМ.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.КассыККМ.ТекущаяСтрока = ТекСтрокаКассыККМ Тогда
		Возврат;
	Иначе
		ТекСтрокаКассыККМ = Элементы.КассыККМ.ТекущаяСтрока;
	КонецЕсли;
	
	СостояниеТекущейККМ = "";
	ПодсказкаДляТекущейККМ = "";
	ТекДанные = Элементы.КассыККМ.ТекущиеДанные;
	
	Если ТекДанные.РабочееМесто = ТекущееРабочееМесто
		ИЛИ ТекДанные.БезПодключения
		Тогда
		ПодключитьОбработчикОжидания("ОбновитьККМПраваяПанель", 0.1, Истина);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьККМПраваяПанель()
	
	ТекДанные = Элементы.КассыККМ.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КассаККМ = Элементы.КассыККМ.ТекущиеДанные.КассаККМ;
	
	Если Элементы.КассыККМ.ТекущиеДанные.РабочееМесто = ТекущееРабочееМесто
		ИЛИ Элементы.КассыККМ.ТекущиеДанные.БезПодключения
		Тогда
		Элементы.ГруппаКомандыКасса.Доступность = Истина;
	Иначе
		Элементы.ГруппаКомандыКасса.Доступность = Ложь;
	КонецЕсли; 
	
	ОбновитьСостояниеКассовойСменыНаСервере(КассаККМ);
	
	Если Элементы.ФильтрыНастройкиИДопИнфоККМ.Видимость = Истина Тогда
		СостояниеТекущейККМ = "";
		
		НайдСтроки = Ошибки.НайтиСтроки(Новый Структура("ИсточникОшибки", ТекДанные.КассаККМ));
		Если НайдСтроки.Количество()>0 Тогда
			Для каждого стр Из НайдСтроки Цикл
				СостояниеТекущейККМ = СостояниеТекущейККМ + стр.ТекстОшибки + Символы.ПС;
				Элементы.ГруппаПодсказкаККМ.Видимость = Истина;
				ПодсказкаДляТекущейККМ = стр.КакИсправить;
			КонецЦикла;
		Иначе
			СостояниеТекущейККМ = "Состояние смены: "+ТекДанные.Статус;
			Элементы.ГруппаПодсказкаККМ.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбменыССайтомПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.ОбменыССайтом.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ОбменыССайтом.ТекущаяСтрока = ТекСтрокаОбмены Тогда
		Возврат;
	Иначе
		ТекСтрокаОбмены = Элементы.ОбменыССайтом.ТекущаяСтрока;
	КонецЕсли;
	
	СостояниеТекущегоОбмена = "";
	ПодсказкаДляТекущегоОбмена= "";
	
	ПодключитьОбработчикОжидания("ОбновитьОбменПраваяПанель", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбменПраваяПанель()
	
	Если Элементы.ОбменыССайтом.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелОбмена = Элементы.ОбменыССайтом.ТекущиеДанные.УзелОбмена;
	
	СостояниеУзлаОбмена = РасписаниеУзлаОбмена(УзелОбмена);
	
	Если Элементы.ФильтрыНастройкиИДопИнфоОбмен.Видимость = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеТекущегоОбмена = "";
	ТекДанные = Элементы.ОбменыССайтом.ТекущиеДанные;
	
	НайдСтроки = Ошибки.НайтиСтроки(Новый Структура("ИсточникОшибки", ПредставлениеУзлаОбменаДляОтбора(ТекДанные.УзелОбмена, ТекДанные.ДействиеПриОбмене)));
	Если НайдСтроки.Количество()>0 Тогда
		Для каждого стр Из НайдСтроки Цикл
			СостояниеТекущегоОбмена = СостояниеТекущегоОбмена + стр.ТекстОшибки + Символы.ПС;
			Элементы.ГруппаПодсказкаОбмена.Видимость = Истина;
			ПодсказкаДляТекущегоОбмена = стр.КакИсправить;
		КонецЦикла;
	Иначе
		СостояниеТекущегоОбмена = ТекДанные.РезультатВыполненияОбмена;
		Элементы.ГруппаПодсказкаОбмена.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастроитьОповещения(Команда)
	
	СтруктураОтбора = Новый Структура("Отбор", Новый Структура("УсловиеСтарта", ПредопределенноеЗначение("Перечисление.СобытияРабочегоПроцесса.ОшибкаПробитияОнлайнЧеков")));
	ОткрытьФорму("Справочник.ПравилаРабочегоПроцесса.ФормаСписка",СтруктураОтбора);
	
КонецПроцедуры

#КонецОбласти

#Область ПробитиеЧека

&НаКлиенте
Процедура НапечататьЧек()
	
	Если ОплатыКартойДляПробитияЧекаККМ.Количество()>0 И НЕ ИдетПечатьЧека Тогда
		ДокументСсылка = ОплатыКартойДляПробитияЧекаККМ[0].Значение;
	Иначе
		Возврат;
	КонецЕсли;
	
	ИдетПечатьЧека = Истина;
	ОбновитьКартинкиИТекстОшибок();
	
	ТекстСообщения = "";
	ОбщиеПараметры = Новый Структура();
	Если НЕ ПроверитьВозможностьПечатиЧека(ДокументСсылка, ОбщиеПараметры, ТекстСообщения) Тогда
		
		Если ОбщиеПараметры.Свойство("СменаОткрыта") И ОбщиеПараметры.СменаОткрыта<>Истина Тогда
			ИдетПечатьЧека = Ложь;
			ОткрытьСмену(ОбщиеПараметры.КассаККМ);
			ОшибкаПробитияЧека(ДокументСсылка, "Кассовая смена не открыта");
		ИначеЕсли ОбщиеПараметры.Свойство("СменаИстекла") И ОбщиеПараметры.СменаИстекла=Истина Тогда
			ИдетПечатьЧека = Ложь;
			ЗакрытьСмену(ОбщиеПараметры.КассаККМ);
			ОшибкаПробитияЧека(ДокументСсылка, "Кассовая смена истекла");
		ИначеЕсли ТекстСообщения="" Тогда
			УспешноеПробитиеЧека(ДокументСсылка);
		Иначе	
			ОшибкаПробитияЧека(ДокументСсылка, ТекстСообщения);
		КонецЕсли;
		
		ОбновитьКартинкиИТекстОшибок();
		Возврат;
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ОбщиеПараметры.ФискальныйРегистратор) Тогда
		
		Контекст = Новый Структура();
		Контекст.Вставить("ДокументСсылка", ДокументСсылка);
		
		Оповещение = Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект, Контекст);
		ПослеОшибкиПечатиЧека = Новый ОписаниеОповещения("ПечатьЧека_ПослеОшибкиПечатиЧека", ЭтотОбъект, Контекст);
		
		ИдетПечатьЧека = Истина;
		
		МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
			Оповещение, 
			УникальныйИдентификатор, 
			ОбщиеПараметры, 
			ОбщиеПараметры.ФискальныйРегистратор,
			,
			,
			ПослеОшибкиПечатиЧека
		);
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Устройство для формирования чеков не выбрано.'");
		ОшибкаПробитияЧека(ДокументСсылка, ТекстСообщения);
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ОшибкаПробитияЧека(ДокументСсылка, ТекстСообщения)
	
	КакИсправить = "Проверьте заполнение документа. Запустите формирование чека повторно из формы документа";
	
	НайтиДобавитьОшибку(ДокументСсылка, Ошибки, ТекстСообщения, КакИсправить);
	
	УдалитьДокументИзОчередиПечати(ДокументСсылка);
	
	ИдетПечатьЧека = Ложь;
	
	ОбновитьКартинкиИТекстОшибок();
	ОбщееСостояние = ""+ДокументСсылка + ": Ошибка!";
	
	Если ОплатыКартойДляПробитияЧекаККМ.Количество()>0 Тогда
		ПодключитьОбработчикОжидания("НапечататьЧек", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УспешноеПробитиеЧека(ДокументСсылка)
	
	НайдСтроки = Ошибки.НайтиСтроки(Новый Структура("ИсточникОшибки", ДокументСсылка));
	Если НайдСтроки.Количество()>0 Тогда
		Для каждого стр Из НайдСтроки Цикл
			Ошибки.Удалить(Ошибки.Индекс(стр));
		КонецЦикла;
	КонецЕсли;
	
	УдалитьДокументИзОчередиПечати(ДокументСсылка);
	Элементы.ОперацииПоКартам.Обновить();

	ИдетПечатьЧека = Ложь;
	
	ОбновитьКартинкиИТекстОшибок();
	
	Если ОплатыКартойДляПробитияЧекаККМ.Количество()>0 Тогда
		ПодключитьОбработчикОжидания("НапечататьЧек", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьПечатиЧека(ДокСсылка, ОбщиеПараметры, ТекстСообщения) Экспорт
	
	Если ДокСсылка.СуммаДокумента=0 Тогда
		ТекстСообщения = НСтр("ru = 'Сумма оплаты не заполнена'");
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураСостояниеКассовойСмены = СостояниеКассовойСменыНаСервере(ДокСсылка.КассаККМ);
	Если СтруктураСостояниеКассовойСмены.СменаОткрыта Тогда
		СтруктураСостояниеКассовойСмены.Вставить("СменаИстекла", (УправлениеНебольшойФирмойВызовСервера.ДатаСеанса() - СтруктураСостояниеКассовойСмены.ДатаИзмененияСтатуса) > 24*3600); //*3600
	Иначе
	    СтруктураСостояниеКассовойСмены.Вставить("СменаИстекла", Ложь);
	КонецЕсли;
	
	Если НЕ ИспользоватьПодключаемоеОборудование 
		ИЛИ ДокСсылка.КассаККМ.ИспользоватьБезПодключенияОборудования Тогда
		// Внешнее оборудование не используется, просто записываем документ с номером чека=1
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ОбщиеПараметры, СтруктураСостояниеКассовойСмены, Ложь);

		Если НЕ СтруктураСостояниеКассовойСмены.СменаОткрыта Тогда
			Возврат Ложь;
		ИначеЕсли СтруктураСостояниеКассовойСмены.СменаИстекла Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ДокументОбъект = ДокСсылка.ПолучитьОбъект();
		ДокументОбъект.Дата = УправлениеНебольшойФирмойВызовСервера.ДатаСеанса();
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.НомерЧекаККМ) Тогда
			ДокументОбъект.НомерЧекаККМ = 1;
		КонецЕсли;
		ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит");
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = ОписаниеОшибки();
		КонецПопытки;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ПечататьЧек = Истина;
	
	Если ДокСсылка.ВалютаДенежныхСредств <> УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
		
		ТекстСообщения = НСтр("ru = 'Валюта оплаты отличается от национальной'");
		ПечататьЧек = Ложь;
		
	ИначеЕсли ДокСсылка.НомерЧекаККМ<>0 Тогда 
		
		ТекстСообщения = НСтр("ru = 'Чек уже сформирован'");
		ПечататьЧек = Ложь;
		
	ИначеЕсли ДокСсылка.СуммаДокумента=0 Тогда 
		
		ТекстСообщения = НСтр("ru = 'Сумма оплаты не указана'");
		ПечататьЧек = Ложь;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ДокСсылка.ДокументОснование) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не заполнен документ-основание оплаты'");
		ПечататьЧек = Ложь;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ДокСсылка.ЭквайринговыйТерминал) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не заполнен эквайринговый терминал в документе'");
		ПечататьЧек = Ложь;
		
	ИначеЕсли НЕ ТипЗнч(ДокСсылка.ЭквайринговыйТерминал.Касса) = Тип("СправочникСсылка.КассыККМ") Тогда
		
		ТекстСообщения = НСтр("ru = 'Касса ККМ в эквайриноговом терминале в документе не заполнена'");
		ПечататьЧек = Ложь;
		
	ИначеЕсли ДокСсылка.СуммаДокумента <> СуммаДокументаОснования(ДокСсылка) Тогда
		
		ТекстСообщения = НСтр("ru = 'Сумма оплаты отличается от суммы заказа'");
		ПечататьЧек = Ложь;
		
	ИначеЕсли НЕ ДокСсылка.Проведен Тогда
		
		Попытка
			ДокументОбъект = ДокСсылка.ПолучитьОбъект();
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось выполнить проведение документа'");
			ПечататьЧек = Ложь;
		КонецПопытки;
		
	ИначеЕсли ЗначениеЗаполнено(АвторПоУмолчанию) И (НЕ ЗначениеЗаполнено(ДокСсылка.Автор) ИЛИ ДокСсылка.Автор.Служебный) Тогда
		
		Попытка
			ДокументОбъект = ДокСсылка.ПолучитьОбъект();
			ДокументОбъект.Автор = АвторПоУмолчанию;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось выполнить проведение документа'");
			ПечататьЧек = Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Если ПечататьЧек И ЗначениеЗаполнено(ДокСсылка.КассаККМ.ПодключаемоеОборудование) Тогда
		
		Если НЕ СтруктураСостояниеКассовойСмены.СменаОткрыта Тогда
			ПечататьЧек = Ложь;
		ИначеЕсли СтруктураСостояниеКассовойСмены.СменаИстекла Тогда
			ПечататьЧек = Ложь;	
		Иначе
			ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ДокСсылка);
			Если ОбщиеПараметры = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось получить данные для формирования чека'");
				ПечататьЧек = Ложь;
			КонецЕсли;
			
			ОбщиеПараметры.ДатаВремя = УправлениеНебольшойФирмойВызовСервера.ДатаСеанса();
		КонецЕсли;
	КонецЕсли;
	
	ОбщиеПараметры.Вставить("ФискальныйРегистратор", ДокСсылка.КассаККМ.ПодключаемоеОборудование);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ОбщиеПараметры, СтруктураСостояниеКассовойСмены, Ложь);
	
	Возврат ПечататьЧек;
	
КонецФункции

Функция СуммаДокументаОснования(ДокОперацияПоПлатежнымКартам)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ОперацияПоПлатежнымКартам.ДокументОснование КАК Документ.ЗаказПокупателя).СуммаДокумента, 0) КАК СуммаДокумента
	|ИЗ
	|	Документ.ОперацияПоПлатежнымКартам КАК ОперацияПоПлатежнымКартам
	|ГДЕ
	|	ОперацияПоПлатежнымКартам.Ссылка = &ДокОперацияПоПлатежнымКартам";
	
	Запрос.УстановитьПараметр("ДокОперацияПоПлатежнымКартам", ДокОперацияПоПлатежнымКартам);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.СуммаДокумента;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

&НаКлиенте
Процедура ПечатьЧека_ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт

	ИдетПечатьЧека = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения="";
		
		ПробитьЧекЗавершениеСервер(РезультатВыполнения, Параметры, ТекстСообщения);
		
		Если ТекстСообщения="" Тогда
			УспешноеПробитиеЧека(Параметры.ДокументСсылка);
		Иначе
			ОшибкаПробитияЧека(Параметры.ДокументСсылка, ТекстСообщения);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр(
			"ru = 'При печати чека произошла ошибка.
			|Чек не сформирован на фискальном регистраторе.
			|Дополнительное описание:
			|%ДополнительноеОписание%'"
		);
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%ДополнительноеОписание%",
			РезультатВыполнения.ОписаниеОшибки
		);
		ОшибкаПробитияЧека(Параметры.ДокументСсылка, ТекстСообщения);
	КонецЕсли;
	
	Если ОплатыКартойДляПробитияЧекаККМ.Количество()>0 Тогда
		ПодключитьОбработчикОжидания("НапечататьЧек", 0.1, Истина);
	Иначе
		Если ЗначениеЗаполнено(ТекущееРабочееМесто) Тогда
			ОтправитьОповещения();
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДокументИзОчередиПечати(ДокументСсылка)
	
	ЭлементСписка = ОплатыКартойДляПробитияЧекаККМ.НайтиПоЗначению(ДокументСсылка);
	Если ЭлементСписка<> Неопределено Тогда
		ОплатыКартойДляПробитияЧекаККМ.Удалить(ЭлементСписка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПробитьЧекЗавершениеСервер(РезультатВыполнения, Параметры, ТекстСообщения)
	
	ДокументСсылка = Параметры.ДокументСсылка;
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	
	// Установить полученное значение номера чека реквизиту документа.
	Если РезультатВыполнения.ВыходныеПараметры <> Неопределено Тогда
		ДокументОбъект.НомерСменыККМ = РезультатВыполнения.ВыходныеПараметры[0];
		ДокументОбъект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
	КонецЕсли;
	
	ДокументОбъект.Дата = УправлениеНебольшойФирмойВызовСервера.ДатаСеанса();
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.НомерЧекаККМ) Тогда
		ДокументОбъект.НомерЧекаККМ = 1;
	КонецЕсли;
	ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит");
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить проведение документа'");
		Возврат;
	КонецПопытки; 
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляПробитияЧека(Объект)
	
	// Подготовка таблицы товаров
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	РозничныеПродажиСервер.ДополнитьТоварамиПараметрыПриПробитииЧека(Объект, ОбщиеПараметры);
	СуммаСтрокЧека = РозничныеПродажиСервер.СуммаСтрокЧека(ОбщиеПараметры);
	
	// Общие параметры чека
	РеквизитыОрганизация = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "НаименованиеПолное,ИНН,КПП");
	
	СтруктураРеквизитов = Новый Структура("ЭлектронныйЧекSMSПередаютсяПрограммой1С,ЭлектронныйЧекEmailПередаютсяПрограммой1С,СерийныйНомер,Код,ПодключаемоеОборудование");
	СтруктураРеквизитов.Вставить("СпособФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.СпособФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ДопустимоеРасхождениеФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.ДопустимоеРасхождениеФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ТипОборудования", "ПодключаемоеОборудование.ТипОборудования");
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.КассаККМ, СтруктураРеквизитов);
	
	РеквизитыКассира = РозничныеПродажиСервер.ПолучитьРеквизитыКассира(Объект.Автор);
	
	ОбщиеПараметры.ТипРасчета = ?(Объект.ВидОперации = Перечисления.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю,
		Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств,
		Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств);
		
	ОбщиеПараметры.Электронно = НЕ ПечататьБумажныйЧек;
	
	Если ЗначениеЗаполнено(Объект.Телефон) Тогда
		Если РеквизитыКассыККМ.ЭлектронныйЧекSMSПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СSMS = Истина;
		КонецЕсли;
		ОбщиеПараметры.ПокупательНомер = РозничныеПродажиСервер.УбратьРазделителиВНомереТелефона(Объект.Телефон);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АдресЭП) Тогда
		Если РеквизитыКассыККМ.ЭлектронныйЧекEmailПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СEmail = Истина;
		КонецЕсли;
		ОбщиеПараметры.ПокупательEmail = Объект.АдресЭП;
	КонецЕсли;
	
	ОбщиеПараметры.ДокументОснование = Объект.Ссылка;
	
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ОбщиеПараметры.Кассир = РеквизитыКассира.ИмяКассираИДолжность;
	ОбщиеПараметры.Вставить("ИмяКассира", РеквизитыКассира.ИмяКассира);
	ОбщиеПараметры.КассирИНН = РеквизитыКассира.КассирИНН;
	
	ОбщиеПараметры.ОрганизацияНазвание = РеквизитыОрганизация.НаименованиеПолное;
	ОбщиеПараметры.ОрганизацияИНН = РеквизитыОрганизация.ИНН;
	ОбщиеПараметры.ОрганизацияКПП = РеквизитыОрганизация.КПП;
	ОбщиеПараметры.НомерКассы     = "00001";
	ОбщиеПараметры.НомерЧека      = "1";
	ОбщиеПараметры.НомерСмены     = "1";
	
	АдресМагазина = УправлениеНебольшойФирмойСервер.ПолучитьКонтактнуюИнформацию(Объект.Организация, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации"));
	
	СерийныйНомер = РеквизитыКассыККМ.СерийныйНомер;
	Если НЕ ЗначениеЗаполнено(СерийныйНомер) Тогда
		СерийныйНомер = "1";
	КонецЕсли;
	
	ОбщиеПараметры.АдресМагазина = АдресМагазина;
	ОбщиеПараметры.НаименованиеМагазина = Строка(Объект.Организация);
	ОбщиеПараметры.СерийныйНомер = СерийныйНомер;
	ОбщиеПараметры.СистемаНалогообложения = РозничныеПродажиСервер.ПолучитьТипСистемыНалогообложенияККТ(
		Объект.Организация,
		,
		Объект.Дата,
		Объект.СпециальныйНалоговыйРежим);
		
	Если РеквизитыКассыККМ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
		ОбщиеПараметры.СпособФорматноЛогическогоКонтроля = РеквизитыКассыККМ.СпособФорматноЛогическогоКонтроля;
		ОбщиеПараметры.ДопустимоеРасхождениеФорматноЛогическогоКонтроля = РеквизитыКассыККМ.ДопустимоеРасхождениеФорматноЛогическогоКонтроля;
		Если ФорматноЛогическийКонтрольКлиентСервер.НуженФорматноЛогическийКонтроль(ОбщиеПараметры) Тогда
			ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ОбщиеПараметры);
		КонецЕсли;
	КонецЕсли;
		
	СтрокаОплаты = Новый Структура("ТипОплаты,Наименование,Сумма", Перечисления.ТипыОплатыККТ.Электронно, НСтр("ru = 'Оплата по карте'"), Объект.СуммаДокумента);
	ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	
	РазницаСумм = СуммаСтрокЧека - Объект.СуммаДокумента;
	Если РазницаСумм > 0 Тогда
		СтрокаОплаты = Новый Структура("ТипОплаты,Наименование,Сумма", Перечисления.ТипыОплатыККТ.Постоплата, НСтр("ru = 'Постоплата'"), РазницаСумм);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
		
	Возврат ОбщиеПараметры;
	
КонецФункции // ПодготовитьДанныеДляПробитияЧека()

#КонецОбласти

#Область РаботаСКассой

// Процедура - обработчик команды "СоздатьЧек".
//
&НаКлиенте
Процедура СоздатьОплату(Команда)
	
	ПараметрыОткрытия = Новый Структура("Основание", Новый Структура("СпособОплаты", ПредопределенноеЗначение("Перечисление.СпособыОплатыЭквайринг.ОплатаОнлайн")));
	ОткрытьФорму("Документ.ОперацияПоПлатежнымКартам.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры // СоздатьЧек()

// Процедура - обработчик команды "ОткрытьКассовуюСмену".
//
&НаКлиенте
Процедура ОткрытьКассовуюСмену(Команда)
	
	ОчиститьСообщения();
	
	Если Элементы.КассыККМ.ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Выберите строку (кассу ККМ).'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	КассаККМ = Элементы.КассыККМ.ТекущиеДанные.КассаККМ;
	
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		ТекстОшибки = НСтр("ru='Выберите кассу ККМ!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, ,"КассаККМ");
		Возврат;
	КонецЕсли;
	
	ОткрытьСмену(КассаККМ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСмену(КассаККМ) //, ЗапуститьПробитиеЧекаПослеОткрытияСмены=Неопределено)
	
	ОписаниеОшибки = "";
	
	ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КассаККМ", КассаККМ);
	ДополнительныеПараметры.Вставить("СтруктурнаяЕдиница", ПараметрыКассыККМ.СтруктурнаяЕдиница);
	ДополнительныеПараметры.Вставить("Организация", ПараметрыКассыККМ.Организация);
	
	Если ИспользоватьПодключаемоеОборудование И НЕ ИспользоватьБезПодключенияОборудования И ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		ЭтаФорма.Доступность = Ложь;
		
		ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
		РеквизитыКассира = РозничныеПродажиСервер.ПолучитьРеквизитыКассира(ПользователиКлиент.ТекущийПользователь());
		Если РеквизитыКассира.ИмяКассираИДолжность <> "" Тогда
			ПараметрыОперации.Кассир = РеквизитыКассира.ИмяКассираИДолжность;
			ПараметрыОперации.КассирИНН = РеквизитыКассира.КассирИНН;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ОткрытьКассовуюСменуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		МенеджерОборудованияКлиент.НачатьОткрытиеСменыНаФискальномУстройстве(
			Оповещение, 
			УникальныйИдентификатор, 
			ПараметрыОперации,
			ИдентификаторУстройства, 
			, 
			ДополнительныеПараметры
		);
	Иначе
		
		Результат = ОткрытьКассовуюСменуНаСервере(КассаККМ, ОписаниеОшибки);
		ОбновитьКартинкиИТекстОшибок();
		
		Если ОписаниеОшибки = "" И ОплатыКартойДляПробитияЧекаККМ.Количество()>0 Тогда
			ПодключитьОбработчикОжидания("НапечататьЧек", 0.1, Истина);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКассовуюСменуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	Если РезультатВыполнения.Результат Тогда 
		ОписаниеОшибки = "";
		Результат = ОткрытьКассовуюСменуНаСервере(Параметры.КассаККМ, ОписаниеОшибки); 
	Иначе
		ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
			                      |Смена не открыта на фискальном регистраторе.
			                      |%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		КакИсправить = "" + КакИсправить + "Проверьте, что ККМ корректно подключена. Перейдите в меню 'Компания-Администрирование-Подключаемое оборудование' для настройки";
		НайтиДобавитьОшибку(Параметры.КассаККМ, Ошибки, ТекстСообщения, КакИсправить);
	КонецЕсли;
	
	ОбновитьКартинкиИТекстОшибок();
	
	Если ОплатыКартойДляПробитияЧекаККМ.Количество()>0 Тогда
		ПодключитьОбработчикОжидания("НапечататьЧек", 0.1, Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КассовыеСмены(Команда)
	
	ОткрытьФорму("Документ.КассоваяСмена.ФормаСписка");
	
КонецПроцедуры

// Процедура - обработчик команды "ЗакрытьКассовуюСмену".
//
&НаКлиенте
Процедура ЗакрытьКассовуюСмену(Команда)

	ОчиститьСообщения();
	
	Если Элементы.КассыККМ.ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Выберите строку (кассу ККМ).'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	КассаККМ = Элементы.КассыККМ.ТекущиеДанные.КассаККМ;
	
	ЗакрытьСмену(КассаККМ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСмену(КассаККМ)
	
	ПараметрыКассыККМ = ПараметрыКассыККМ(КассаККМ);
	
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	Если ИспользоватьБезПодключенияОборудования Тогда
		
		ОписаниеОшибки = "";
		
		// 1. Заполнение отчета о розничных продажах.
		Документ = СформироватьОтчетОРозничныхПродажахНаСервере(КассаККМ, ОписаниеОшибки); 
		
		Если ЗначениеЗаполнено(ОписаниеОшибки)
			И ИспользоватьБезПодключенияОборудования Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
		ИначеЕсли ЗначениеЗаполнено(ОписаниеОшибки)
			И НЕ ИспользоватьБезПодключенияОборудования Тогда
			ТекстСообщения = НСтр(
			"ru = 'При формировании отчета о розничных продажах возникли ошибки.
			|Дополнительное описание:
			|%ДополнительноеОписание%'"
			);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			КакИсправить = "";
			НайтиДобавитьОшибку(Параметры.КассаККМ, Ошибки, ТекстСообщения, КакИсправить);
		КонецЕсли;
		
		// 2. Заполнение параметров кассовой смены.
		Результат = ЗакрытьКассовуюСменуНаСервере(КассаККМ, ОписаниеОшибки); 
		
		ОбновитьКартинкиИТекстОшибок();
		
		Если ОписаниеОшибки = "" И ОплатыКартойДляПробитияЧекаККМ.Количество()>0 Тогда
			ПодключитьОбработчикОжидания("НапечататьЧек", 0.1, Истина);
		КонецЕсли;	

	ИначеЕсли ИспользоватьПодключаемоеОборудование И ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		Оповещение = Новый ОписаниеОповещения("ПечатьФискальногоОтчетаЗавершение", ЭтотОбъект, Новый Структура("КассаККМ", КассаККМ));
		МенеджерОборудованияКлиент.НачатьЗакрытиеСменыНаФискальномУстройстве(
			Оповещение,
			УникальныйИдентификатор,
			ПараметрыКассыККМ,
			ИдентификаторУстройства,
			ПараметрыКассыККМ.ТипОборудования,
			ПараметрыКассыККМ.ТекущаяКассоваяСмена
		);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетОРозничныхПродажахНаСервере(КассаККМ, ОписаниеОшибки = "")
	
	Возврат Документы.ОтчетОРозничныхПродажах.СформироватьОтчетОРозничныхПродажахИВыполнитьАрхивацию(КассаККМ, ОписаниеОшибки);
	
КонецФункции // СформироватьОтчетОРозничныхПродажахНаСервере()

&НаСервере
Функция ПараметрыКассыККМ(КассаККМ)

	СтруктураСостояниеКассовойСмены = СостояниеКассовойСменыНаСервере(КассаККМ);
	СменаОткрыта = СтруктураСостояниеКассовойСмены.СменаОткрыта;
	ТекущаяКассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
	
	ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(КассаККМ);
	
	ПараметрыКассыККМ.Вставить("СменаОткрыта", СменаОткрыта);
	ПараметрыКассыККМ.Вставить("ТекущаяКассоваяСмена", ТекущаяКассоваяСмена);
	ПараметрыКассыККМ.Вставить("ТипОборудования", ПараметрыКассыККМ.ИдентификаторУстройства.ТипОборудования);
	
	Возврат ПараметрыКассыККМ;

КонецФункции

&НаКлиенте
Процедура ПечатьФискальногоОтчетаЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Параметры.Свойство("КассаККМ") Тогда
		КассаККМ = Параметры.КассаККМ;
	ИначеЕсли ЗначениеЗаполнено(Элементы.КассыККМ.ТекущиеДанные) Тогда
		КассаККМ = Элементы.КассыККМ.ТекущиеДанные.КассаККМ;	
	ИначеЕсли Элементы.КассыККМ.ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Выберите строку (кассу ККМ).'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаКомандыКасса.Доступность = Истина; // Разблокировка интерфейса пользователя.
	
	Если РезультатВыполнения.Результат Тогда
		
		ОписаниеОшибки = "";
		Результат = ЗакрытьКассовуюСменуНаСервере(КассаККМ, ОписаниеОшибки); 
		
		ОбновитьКартинкиИТекстОшибок();
		
		Если ОплатыКартойДляПробитияЧекаККМ.Количество()>0 Тогда
			ПодключитьОбработчикОжидания("НапечататьЧек", 0.1, Истина);
		КонецЕсли;	
		
	Иначе
		ТекстСообщения = НСтр(
			"ru = 'При закрытии смены на фискальном регистраторе произошла ошибка.
			|""%ОписаниеОшибки%""
			|Отчет на фискальном регистраторе не сформирован.'"
		);
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%ОписаниеОшибки%",
			РезультатВыполнения.ОписаниеОшибки
		);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		ОбновитьСостояниеКассовойСменыНаСервере(КассаККМ);
		ОбновитьКартинкиИТекстОшибок();
	КонецЕсли;
	
КонецПроцедуры

// Функция выполняет получение состояния кассовой смены на сервере.
//
&НаСервереБезКонтекста
Функция СостояниеКассовойСменыНаСервере(КассаККМ)
	
	Возврат РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
	
КонецФункции // ПолучитьСостояниеКассовойСменыНаСервере()

// Процедура выполняет обновление состояния кассовой смены на клиенте.
//
&НаСервере
Процедура ОбновитьСостояниеКассовойСменыНаСервере(КассаККМ)
	
	СтруктураСостояниеКассовойСмены = СостояниеКассовойСменыНаСервере(КассаККМ);
	
	Если ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены.СтатусКассовойСмены) Тогда
		
		ТекстСообщения = НСтр("ru='Смена № %НомерСмены%, Статус: %СтатусСмены% %ВремяИзменения%, В кассе %НаличностьВКассе% %Валюта%'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСмены%", СокрЛП(СтруктураСостояниеКассовойСмены.НомерКассовойСмены));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтатусСмены%", СтруктураСостояниеКассовойСмены.СтатусКассовойСмены);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаличностьВКассе%", СтруктураСостояниеКассовойСмены.НаличностьВКассе);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", СтруктураСостояниеКассовойСмены.ВалютаДокументаПредставление);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВремяИзменения%", Формат(СтруктураСостояниеКассовойСмены.ДатаИзмененияСтатуса,"ДФ='dd.MM.yy ЧЧ:мм'"));
		
		СостояниеККТ = ТекстСообщения;
		
	Иначе
		
		СостояниеККТ = НСтр("ru='Смена не открыта.'");
		
	КонецЕсли;
	
	СменаОткрыта = СтруктураСостояниеКассовойСмены.СменаОткрыта;
	
	Элементы.СнятьZОтчет.Видимость = СменаОткрыта;
	Элементы.ОткрытьКассовуюСмену.Видимость = НЕ СменаОткрыта И ЗначениеЗаполнено(КассаККМ);
	КассыККМ.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", УправлениеНебольшойФирмойВызовСервера.ДатаСеанса());
	
КонецПроцедуры // ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписков()

&НаСервере
Функция ЗакрытьКассовуюСменуНаСервере(КассаККМ, ОписаниеОшибки, СсылкаНаОтчет = Неопределено)
	
	Результат = РозничныеПродажиСервер.ЗакрытьКассовуюСмену(КассаККМ, ОписаниеОшибки, СсылкаНаОтчет);
	Если НЕ Результат Тогда
		ТекстСообщения = НСтр("ru = 'При закрытии смены произошла ошибка.
		                            |Смена не закрыта.
		                            |Дополнительное описание:
		                            |%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
		КакИсправить = ""; //"Проверьте, что ККМ корректно подключена. Перейдите в меню 'Компания - Администрирование - Подключаемое оборудование' для настройки";
		НайтиДобавитьОшибку(КассаККМ, Ошибки, ТекстСообщения, КакИсправить);		
	КонецЕсли;
	
	ОбновитьСостояниеКассовойСменыНаСервере(КассаККМ);
	ПроверитьОшибкиККМ();

	Возврат Результат;
	
КонецФункции

// Функция выполняет открытие кассовой смены на сервере.
//
&НаСервере
Функция ОткрытьКассовуюСменуНаСервере(КассаККМ, ОписаниеОшибки = "", ТекстПереходящегоОстатка = "")
	
	Результат = РозничныеПродажиСервер.ОткрытьКассовуюСмену(КассаККМ, ОписаниеОшибки, ТекстПереходящегоОстатка);
	Если НЕ Результат Тогда
		ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
		|Смена не открыта.
		|Дополнительное описание:
		|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
		КакИсправить = "Проверьте, что ККМ корректно подключена. Перейдите в меню 'Компания - Администрирование - Подключаемое оборудование' для настройки";
		НайтиДобавитьОшибку(КассаККМ, Ошибки, ТекстСообщения, КакИсправить);
	КонецЕсли;
	
	ОбновитьСостояниеКассовойСменыНаСервере(КассаККМ);
	ПроверитьОшибкиККМ();
	
	Возврат Результат;
	
КонецФункции // ОткрытьКассовуюСменуНаСервере()

&НаКлиенте
Процедура ЗакрытьСменуОбновитьСтатус(КассаККМ) Экспорт
	
	ОписаниеОшибки = "";
	Результат = ЗакрытьКассовуюСменуНаСервере(КассаККМ, ОписаниеОшибки); 
	
КонецПроцедуры

&НаСервере
Функция РасписаниеУзлаОбмена(УзелОбмена)

	ТекстСостояниеОбмена = "";
	
	УстановитьПривилегированныйРежим(Истина);
	РегламентноеЗадание = ОбменССайтомРегламентныеЗадания.НайтиЗадание(УзелОбмена.ИдентификаторРегламентногоЗаданияПечатьЧеков);
	
	Если РегламентноеЗадание=Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
			ТекстСостояниеОбмена = "";
		ИначеЕсли НЕ УзелОбмена.ОбменЗаказами Тогда
			ТекстСостояниеОбмена = "Обмен заказами не настроен";
		Иначе
			ТекстСостояниеОбмена = "Периодическая загрузка оплат с сайта не настроена";
		КонецЕсли;
	Иначе
		
		ПоследнееЗадание = Неопределено;
		Расписание = Неопределено;
		
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			Расписание = РегламентноеЗадание.Расписание.Получить();
			ПоследнееЗадание = ОбменССайтомРегламентныеЗадания.НайтиЗадание(РегламентноеЗадание.ИсполняющееФоновоеЗадание);
			РазностьДат = УправлениеНебольшойФирмойВызовСервера.ДатаСеанса() - ТекущаяУниверсальнаяДата();
			
			Если ПоследнееЗадание=Неопределено И ЗначениеЗаполнено(РегламентноеЗадание.ДатаНачалаПоследнегоЗапуска) Тогда
				ПоследнееЗадание = Новый Структура("ИнформацияОбОшибке, Состояние, Начало, Конец");
				ПоследнееЗадание.Вставить("ИнформацияОбОшибке", "");
				ПоследнееЗадание.Вставить("Состояние", РегламентноеЗадание.СостояниеЗадания);
				ПоследнееЗадание.Вставить("Начало", РегламентноеЗадание.ДатаНачалаПоследнегоЗапуска + РазностьДат);
				ПоследнееЗадание.Вставить("Конец", РегламентноеЗадание.ДатаЗавершенияПоследнегоЗапуска + РазностьДат);
			КонецЕсли;
			ВремяСледующегоЗапуска = РегламентноеЗадание.ЗапланированныйМоментЗапуска;
		Иначе
			ПоследнееЗадание = РегламентноеЗадание.ПоследнееЗадание;
			Расписание = РегламентноеЗадание.Расписание;
		КонецЕсли;
	
		Если ТипЗнч(Расписание) = Тип("РасписаниеРегламентногоЗадания") Тогда
			ПериодПовтораВТечениеДняВМинутах = Окр(Расписание.ПериодПовтораВТечениеДня/60,2);
		КонецЕсли;
		ИнформацияОбОшибке = "";
		
		Если ПоследнееЗадание <> Неопределено Тогда
			ИнформацияОбОшибке = ПоследнееЗадание.ИнформацияОбОшибке;
			
			Если ИнформацияОбОшибке<>Неопределено И ИнформацияОбОшибке<>"" Тогда
				ТекстСостояниеОбмена = ""+ПоследнееЗадание.Состояние + " " +ПоследнееЗадание.Конец + "; " +ИнформацияОбОшибке.Описание;
				
				КакИсправить = "Чтобы просмотреть описание ошибки, нажмите 'Открыть журнал событий', откройте запись о событии 'Обмен с сайтами' с ошибкой выполнения";
				НайтиДобавитьОшибку(ПредставлениеУзлаОбменаДляОтбора(УзелОбмена), Ошибки, ИнформацияОбОшибке.Описание, КакИсправить);
			ИначеЕсли ПоследнееЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
				ТекстСостояниеОбмена = ""+ПоследнееЗадание.Состояние + " с " +ПоследнееЗадание.Начало;
			Иначе
				ТекстСостояниеОбмена = ""+ПоследнееЗадание.Состояние + " " +ПоследнееЗадание.Конец + ", повтор каждые " + ПериодПовтораВТечениеДняВМИнутах + " мин.";
				ВремяСледующегоЗапуска = ПоследнееЗадание.Конец + Расписание.ПериодПовтораВТечениеДня;
				Если ЗначениеЗаполнено(ВремяСледующегоЗапуска) Тогда
					Если ВремяСледующегоЗапуска > УправлениеНебольшойФирмойВызовСервера.ДатаСеанса() Тогда
						ТекстСостояниеОбмена = ТекстСостояниеОбмена + " Следующий запуск в "+ Прав(ВремяСледующегоЗапуска, 8);
					Иначе
						ТекстСостояниеОбмена = ТекстСостояниеОбмена + " Следующий запуск в "+ Прав(УправлениеНебольшойФирмойВызовСервера.ДатаСервера()+ПериодПовтораВТечениеДняВМинутах*60, 8);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ТекстСостояниеОбмена = "Автоматический запуск не выполнялся";
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбменыССайтом.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", УправлениеНебольшойФирмойВызовСервера.ДатаСервера());
	
	Возврат ТекстСостояниеОбмена;
	
КонецФункции

&НаСервере
Функция ОбновитьСостояниеРасписаниеПроверкиОплат()

	ДатаПредыдущейПроверки = ДатаВремяСледующейПроверки;
	Если ДатаВремяСледующейПроверки - УправлениеНебольшойФирмойВызовСервера.ДатаСеанса() <= 0 Тогда
		ДатаВремяСледующейПроверки = УправлениеНебольшойФирмойВызовСервера.ДатаСеанса() + ИнтервалПроверкиЧековПоУмолчанию;
	КонецЕсли;
	
	Если РазделениеВключено Тогда
		Если ДатаВремяСледующейПроверки < УправлениеНебольшойФирмойВызовСервера.ДатаСеанса() Тогда
			ДатаВремяСледующейПроверки = УправлениеНебольшойФирмойВызовСервера.ДатаСеанса() + ИнтервалПроверкиЧековПоУмолчанию
		КонецЕсли;
		
		Возврат ДатаВремяСледующейПроверки;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбменУправлениеНебольшойФирмойСайт.Ссылка КАК УзелОбмена,
	|	ОбменУправлениеНебольшойФирмойСайт.Ссылка.ИдентификаторРегламентногоЗаданияПечатьЧеков
	|ИЗ
	|	ПланОбмена.ОбменУправлениеНебольшойФирмойСайт.СоответствиеВидовОплат КАК ОбменУправлениеНебольшойФирмойСайт
	|ГДЕ
	|	ОбменУправлениеНебольшойФирмойСайт.Ссылка.ОнлайнОплаты
	|	И НЕ ОбменУправлениеНебольшойФирмойСайт.Ссылка.ПометкаУдаления
	|	И (ОбменУправлениеНебольшойФирмойСайт.АналитикаОплаты.Касса В (&ПодключенныеКассыККМ)
	|			ИЛИ &ВсеРабочиеМеста)";
	
	Запрос.УстановитьПараметр("ВсеРабочиеМеста", ВсеРабочиеМеста);
	Запрос.УстановитьПараметр("ТекущаяДата", УправлениеНебольшойФирмойВызовСервера.ДатаСеанса());
	Запрос.УстановитьПараметр("ПодключенныеКассыККМ", ПодключенныеКассыККМ.ВыгрузитьЗначения());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		УстановитьПривилегированныйРежим(Истина);
		РегламентноеЗадание = ОбменССайтомРегламентныеЗадания.НайтиЗадание(Выборка.ИдентификаторРегламентногоЗаданияПечатьЧеков);
		УстановитьПривилегированныйРежим(Ложь);
		Если РегламентноеЗадание=Неопределено Тогда
			ДатаВремяСледующейПроверки = Мин(ДатаВремяСледующейПроверки, УправлениеНебольшойФирмойВызовСервера.ДатаСеанса() + ИнтервалПроверкиЧековПоУмолчанию);
		Иначе
			
			ПоследнееЗадание = РегламентноеЗадание.ПоследнееЗадание;
			ПериодПовтораВТечениеДня = РегламентноеЗадание.Расписание.ПериодПовтораВТечениеДня;
			
			ИнформацияОбОшибке = "";
			Если ПоследнееЗадание <> Неопределено Тогда
				ИнформацияОбОшибке = ПоследнееЗадание.ИнформацияОбОшибке;
				Если ПоследнееЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
					//Перенести запуск на 1 мин
					ДатаВремяСледующейПроверки = Мин(ДатаВремяСледующейПроверки, УправлениеНебольшойФирмойВызовСервера.ДатаСеанса() + 60);
				ИначеЕсли ПоследнееЗадание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
					//Запустить печать чеков
					//Назначить время проверки след. раз
					ДатаВремяСледующейПроверки = Мин(ДатаПредыдущейПроверки + ИнтервалПроверкиЧековПоУмолчанию, ПоследнееЗадание.Конец + ПериодПовтораВТечениеДня);
				ИначеЕсли ПоследнееЗадание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
					// смс/емейл администратору
					ДатаВремяСледующейПроверки = Мин(ДатаПредыдущейПроверки + ИнтервалПроверкиЧековПоУмолчанию, УправлениеНебольшойФирмойВызовСервера.ДатаСеанса() + ПериодПовтораВТечениеДня);
				КонецЕсли;
				
			Иначе
				ДатаВремяСледующейПроверки = Мин(ДатаВремяСледующейПроверки, УправлениеНебольшойФирмойВызовСервера.ДатаСеанса() + ПериодПовтораВТечениеДня);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ДатаВремяСледующейПроверки < УправлениеНебольшойФирмойВызовСервера.ДатаСеанса() Тогда
		ДатаВремяСледующейПроверки = УправлениеНебольшойФирмойВызовСервера.ДатаСеанса() + ИнтервалПроверкиЧековПоУмолчанию
	КонецЕсли;
	
	Возврат ДатаВремяСледующейПроверки;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ДИНАМИЧЕСКОГО СПИСКА

// Выбор значения отбора в поле отбора
&НаКлиенте
Процедура ОтборОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ОперацииПоКартам", "Организация", Элемент.Родитель.Имя, ВыбранноеЗначение,,"ДанныеМеток");
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ОперацииПоКартам", "ДокументОснование", Элемент.Родитель.Имя, ВыбранноеЗначение,,"ДанныеМеток");
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ОперацииПоКартам", "Контрагент", Элемент.Родитель.Имя, ВыбранноеЗначение,,"ДанныеМеток");
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусЧекаККМОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ОперацииПоКартам", "Статус", Элемент.Родитель.Имя, ВыбранноеЗначение,,"ДанныеМеток");
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборАвторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ОперацииПоКартам", "Автор", Элемент.Родитель.Имя, ВыбранноеЗначение,,"ДанныеМеток");
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЭквайринговыйТерминалОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ОперацииПоКартам", "ЭквайринговыйТерминал", Элемент.Родитель.Имя, ВыбранноеЗначение,,"ДанныеМеток");
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОборудованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("КассыККМ", "Оборудование", Элемент.Родитель.Имя, ВыбранноеЗначение,,"ДанныеМетокККМ");
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипОборудованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("КассыККМ", "ТипОборудования", Элемент.Родитель.Имя, ВыбранноеЗначение,,"ДанныеМетокККМ");
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтруктурнаяЕдиницаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("КассыККМ", "СтруктурнаяЕдиница", Элемент.Родитель.Имя, ВыбранноеЗначение,,"ДанныеМетокККМ");
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидОплатыНаСайтеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ОперацииПоКартам", "ВидПлатежнойКарты", Элемент.Родитель.Имя, ВыбранноеЗначение,,"ДанныеМеток");
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборУзелОбменаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ОбменыССайтом", "УзелОбмена", Элемент.Родитель.Имя, ВыбранноеЗначение,,"ДанныеМетокОбмен");
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидОплатыОбменОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ОтборВидОплатыСервер("ОбменыССайтом", "УзелОбмена", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

Процедура ОтборВидОплатыСервер(СписокДляОтбора, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения, СписокДляОтбора,,"ДанныеМетокОбмен");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОбменУправлениеНебольшойФирмойСайтСоответствиеВидовОплат.Ссылка КАК УзелОбмена
	|ИЗ
	|	ПланОбмена.ОбменУправлениеНебольшойФирмойСайт.СоответствиеВидовОплат КАК ОбменУправлениеНебольшойФирмойСайтСоответствиеВидовОплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|		ПО ОбменУправлениеНебольшойФирмойСайтСоответствиеВидовОплат.АналитикаОплаты = ЭквайринговыеТерминалы.Ссылка
	|ГДЕ
	|	ОбменУправлениеНебольшойФирмойСайтСоответствиеВидовОплат.АналитикаОплаты В(&спТерминал)";
	Запрос.УстановитьПараметр("спТерминал", ДанныеМетокОбмен.Выгрузить().ВыгрузитьКолонку("Метка"));
	МассивОтбора = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УзелОбмена");
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(ОбменыССайтом, "УзелОбмена", МассивОтбора, Истина, ВидСравненияКомпоновкиДанных.ВСписке);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбменыССайтомВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя="ОбменыССайтомРезультатВыполненияОбмена" Тогда
		СтандартнаяОбработка = Ложь;
		Если Элемент.ТекущиеДанные.ДействиеПриОбмене = ПредопределенноеЗначение("Перечисление.ДействияПриОбмене.ВыгрузкаДанных") Тогда
			ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(Элемент.ТекущиеДанные.УзелОбмена,ЭтотОбъект,"ВыгрузкаДанных");
		ИначеЕсли Элемент.ТекущиеДанные.ДействиеПриОбмене = ПредопределенноеЗначение("Перечисление.ДействияПриОбмене.ЗагрузкаДанных") Тогда
			ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(Элемент.ТекущиеДанные.УзелОбмена,ЭтотОбъект,"ЗагрузкаДанных");
		КонецЕсли;
	ИначеЕсли Поле.Имя="ОбменыССайтомУзелОбмена" Тогда 
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("ПланОбмена.ОбменУправлениеНебольшойФирмойСайт.ФормаОбъекта", Новый Структура("Ключ", Элемент.ТекущиеДанные.УзелОбмена));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МеткиОтборов

&НаСервере
Процедура УстановитьМеткуИОтборСписка(СписокДляОтбора, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="",ТаблицаДанныеМеток)
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения, СписокДляОтбора,,ТаблицаДанныеМеток);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, ЭтотОбъект[СписокДляОтбора], ИмяПоляОтбораСписка,,,ТаблицаДанныеМеток);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОплаты Тогда
		ИмяРеквизитаСписка = "ОперацииПоКартам";
		ИмяТЧДанныеМеток = "ДанныеМеток";
		НачалоИмениМетки = "Метка_";
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКассыККМ Тогда
		ИмяРеквизитаСписка = "КассыККМ";
		ИмяТЧДанныеМеток = "ДанныеМетокККМ";
		НачалоИмениМетки = "МеткаККМ_";
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУзлыОбмена Тогда
		ИмяРеквизитаСписка = "ОбменыССайтом";
		ИмяТЧДанныеМеток = "ДанныеМетокОбмен";
		НачалоИмениМетки = "МеткаОбменыССайтом_";
	КонецЕсли;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина(НачалоИмениМетки)+1);
	УдалитьМеткуОтбора(МеткаИД, ИмяРеквизитаСписка, ИмяТЧДанныеМеток);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД, ИмяРеквизитаСписка, ИмяТЧДанныеМеток)
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, ЭтотОбъект[ИмяРеквизитаСписка], МеткаИД, ИмяРеквизитаСписка, ИмяТЧДанныеМеток);

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, "ОперацииПоКартам", "Дата");
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаККМНажатие(Элемент, СтандартнаяОбработка)
	
	СтруктураИменЭлементов = Новый Структура("ОтборПериод, ПредставлениеПериода", "ОтборПериодККМ", "ПредставлениеПериодаККМ");
	
	СтандартнаяОбработка = Ложь;
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, "КассыККМ", "НачалоКассовойСмены", СтруктураИменЭлементов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаОбменНажатие(Элемент, СтандартнаяОбработка)
	
	СтруктураИменЭлементов = Новый Структура("ОтборПериод, ПредставлениеПериода", "ОтборПериодОбмен", "ПредставлениеПериодаОбмен");

	СтандартнаяОбработка = Ложь;
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, "ОбменыССайтом", "ДатаНачала", СтруктураИменЭлементов);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	Если НЕ ЭтоНачальнаяСтраница Тогда
	
		РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект, "ОперацииПоКартам");
		
		СтруктураИменЭлементовККМ = Новый Структура;
		СтруктураИменЭлементовККМ.Вставить("ФильтрыНастройкиИДопИнфо", "ФильтрыНастройкиИДопИнфоККМ");
		СтруктураИменЭлементовККМ.Вставить("ДекорацияРазвернутьОтборы", "ДекорацияРазвернутьОтборыККМ");
		СтруктураИменЭлементовККМ.Вставить("ПраваяПанель", "ПраваяПанельККМ");
		СтруктураИменЭлементовККМ.Вставить("ОтборПериод", "ОтборПериодККМ");
		
		РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект, "КассыККМ", СтруктураИменЭлементовККМ,,, "ДанныеМетокККМ");
		
		СтруктураИменЭлементовОбмен = Новый Структура;
		СтруктураИменЭлементовОбмен.Вставить("ФильтрыНастройкиИДопИнфо", "ФильтрыНастройкиИДопИнфоОбмен");
		СтруктураИменЭлементовОбмен.Вставить("ДекорацияРазвернутьОтборы", "ДекорацияРазвернутьОтборыОбмен");
		СтруктураИменЭлементовОбмен.Вставить("ПраваяПанель", "ПраваяПанельОбмен");
		СтруктураИменЭлементовОбмен.Вставить("ОтборПериод", "ОтборПериодОбмен");
		
		РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект, "ОбменыССайтом", СтруктураИменЭлементовОбмен,,, "ДанныеМетокОбмен");
		
		ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(ИмяФормы,"ПечататьБумажныйЧек",ПечататьБумажныйЧек);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборов(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборовККМ(Элемент)
	
	СтруктураИменЭлементов = Новый Структура;
	СтруктураИменЭлементов.Вставить("ФильтрыНастройкиИДопИнфо", "ФильтрыНастройкиИДопИнфоККМ");
	СтруктураИменЭлементов.Вставить("ДекорацияРазвернутьОтборы", "ДекорацияРазвернутьОтборыККМ");
	СтруктураИменЭлементов.Вставить("ПраваяПанель", "ПраваяПанельККМ");
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфоККМ.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость, СтруктураИменЭлементов);
	
	ТекСтрокаКассыККМ = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборовОбмен(Элемент)
	
	СтруктураИменЭлементов = Новый Структура;
	СтруктураИменЭлементов.Вставить("ФильтрыНастройкиИДопИнфо", "ФильтрыНастройкиИДопИнфоОбмен");
	СтруктураИменЭлементов.Вставить("ДекорацияРазвернутьОтборы", "ДекорацияРазвернутьОтборыОбмен");
	СтруктураИменЭлементов.Вставить("ПраваяПанель", "ПраваяПанельОбмен");
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфоОбмен.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость, СтруктураИменЭлементов);
	
КонецПроцедуры

#КонецОбласти

