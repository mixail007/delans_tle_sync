#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ФоновоеЗадание

Процедура СформироватьДокументы(Параметры, ВременноеХранилищеРезультата) Экспорт
	
	Результат = Новый Структура;
	Ошибки = Новый СписокЗначений;
	
	Если НЕ Параметры.Свойство("ПланДоставки") ИЛИ ТипЗнч(Параметры.ПланДоставки)<>Тип("ДеревоЗначений") Тогда
		Ошибка = НСтр("ru = 'Не задан план доставки'");
		Ошибки.Добавить(, Ошибка);
		Результат.Вставить("Ошибки", Ошибки);
		ПоместитьВоВременноеХранилище(Результат, ВременноеХранилищеРезультата);
		Возврат;
	КонецЕсли;
	
	ПланДоставки = Параметры.ПланДоставки;
	
	КоличествоСтрок = 0;
	Для каждого Стр Из ПланДоставки.Строки Цикл
	    Если Стр.СостояниеОтгрузкиИзменено ИЛИ Стр.СостояниеОплатыИзменено Тогда
			КоличествоСтрок = КоличествоСтрок+1;
		КонецЕсли; 
	КонецЦикла;
	
	ОбновляемыеРеквизиты = Новый Соответствие;
	
	НомерСтроки = 0;
	Для каждого Стр Из ПланДоставки.Строки Цикл
		
		Если НЕ Стр.СостояниеОтгрузкиИзменено И НЕ Стр.СостояниеОплатыИзменено Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураРеквизитов = Новый Структура;
		
		Если Стр.СостояниеОтгрузкиИзменено Тогда
			СоздатьОбновитьДокументыОтгрузки(Стр, Ошибки);
			СтруктураРеквизитов.Вставить("СостояниеОтгрузкиИзменено", Ложь);
			СтруктураРеквизитов.Вставить("ДокументОтгрузки", Стр.ДокументОтгрузки);
			Если Стр.СостояниеОтгрузки=Перечисления.СостоянияДоставкиЗаказа.Доставлен Тогда
				СтруктураРеквизитов.Вставить("МожноМенятьСостояниеОтгрузки", Ложь);
			КонецЕсли; 
		КонецЕсли; 
		
		Если Стр.СостояниеОплатыИзменено Тогда
			СоздатьОбновитьДокументыОплаты(Стр, Ошибки);
			СтруктураРеквизитов.Вставить("СостояниеОплатыИзменено", Ложь);
			СтруктураРеквизитов.Вставить("ДокументОплаты", Стр.ДокументОплаты);
			Если Стр.СостояниеОплаты<>Перечисления.СостоянияОплатыЗаказа.НеОплачен Тогда
				СтруктураРеквизитов.Вставить("МожноМенятьСостояниеОплаты", Ложь);
			КонецЕсли; 
		КонецЕсли;
		
		ОбновляемыеРеквизиты.Вставить(Стр.Группировка, СтруктураРеквизитов);
		
		НомерСтроки = НомерСтроки+1;
		ДлительныеОперации.СообщитьПрогресс(Окр(НомерСтроки/КоличествоСтрок*100), Стр.ПредставлениеГруппировки, ОбновляемыеРеквизиты);
		
	КонецЦикла;
	
	Если Ошибки.Количество()>0 Тогда
		Результат.Вставить("Ошибки", Ошибки);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, ВременноеХранилищеРезультата);
	
КонецПроцедуры

Процедура СоздатьОбновитьДокументыОтгрузки(Стр, Ошибки)
	
	Если Стр.СостояниеОтгрузки=Перечисления.СостоянияДоставкиЗаказа.Доставлен И ТипЗнч(Стр.Группировка)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		// Обновление расходной накладной
		Если ЗначениеЗаполнено(Стр.ДокументОтгрузки) Тогда
			Док = Стр.ДокументОтгрузки.ПолучитьОбъект();
		Иначе
			Док = Документы.РасходнаяНакладная.СоздатьДокумент();
			Док.Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Попытка
			Док.Заполнить(Стр.Группировка);
			Док.Записать(РежимЗаписиДокумента.Проведение);
			Стр.ДокументОтгрузки = Док.Ссылка;
		Исключение
			Информация = ИнформацияОбОшибке();
			СообщенияПользователю = ПолучитьСообщенияПользователю();
			Ошибка = СтрШаблон(НСтр("ru = 'Не удалось обновить данные расходной накладной по заказу %1: %2'"), Стр.ПредставлениеГруппировки, РекурсивноеОписаниеОшибки(Информация, СообщенияПользователю));
			Если Док.ЭтоНовый() Тогда
				Ошибки.Добавить(Стр.Группировка, Ошибка);
			Иначе
				Ошибки.Добавить(Док.Ссылка, Ошибка);
			КонецЕсли; 
		КонецПопытки; 
		
		// Обновление состояния заказа
		НовоеСостояниеЗаказа = СостояниеДоставлен(Стр.Группировка);
		Если Стр.Группировка.СостояниеЗаказа<>НовоеСостояниеЗаказа Тогда
			Заказ = Стр.Группировка.ПолучитьОбъект();
			Заказ.СостояниеЗаказа = НовоеСостояниеЗаказа;
			Если НовоеСостояниеЗаказа=Справочники.СостоянияЗаказовПокупателей.Завершен Тогда
				Заказ.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Успешно;
			КонецЕсли; 
			Попытка
				Заказ.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Информация = ИнформацияОбОшибке();
				СообщенияПользователю = ПолучитьСообщенияПользователю();
				Ошибка = СтрШаблон(НСтр("ru = 'Не удалось обновить состояние заказа %1: %2'"), Стр.ПредставлениеГруппировки, РекурсивноеОписаниеОшибки(Информация, СообщенияПользователю));
				Ошибки.Добавить(Стр.Группировка, Ошибка);
			КонецПопытки; 
		КонецЕсли;
		
	ИначеЕсли Стр.СостояниеОтгрузки=Перечисления.СостоянияДоставкиЗаказа.НеДоставлен И ТипЗнч(Стр.Группировка)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		// Возврат отгруженных документов
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Заказ", Стр.Группировка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасходнаяНакладная.Ссылка
		|ИЗ
		|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
		|		ПО РасходнаяНакладная.Ссылка = ПриходнаяНакладная.ДокументОснование
		|			И (ПриходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя))
		|ГДЕ
		|	РасходнаяНакладная.Заказ = &Заказ
		|	И РасходнаяНакладная.Проведен
		|	И ПриходнаяНакладная.Ссылка ЕСТЬ NULL";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокВозврат = Документы.ПриходнаяНакладная.СоздатьДокумент();
			ДокВозврат.Заполнить(Выборка.Ссылка);
			ДокВозврат.Дата = ТекущаяДатаСеанса();
			Попытка
				ДокВозврат.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Информация = ИнформацияОбОшибке();
				СообщенияПользователю = ПолучитьСообщенияПользователю();
				Ошибка = СтрШаблон(НСтр("ru = 'Не удалось сформировать возврат по заказу %1: %2'"), Стр.ПредставлениеГруппировки, РекурсивноеОписаниеОшибки(Информация, СообщенияПользователю));
				Ошибки.Добавить(Стр.Группировка, Ошибка);
			КонецПопытки; 
		КонецЦикла; 
		
	ИначеЕсли Стр.СостояниеОтгрузки=Перечисления.СостоянияДоставкиЗаказа.ДоставленЧастично И ТипЗнч(Стр.Группировка)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		ДоставленныеТовары = Новый Массив;
		Для каждого СтрНоменклатура Из Стр.Строки Цикл
			Если ТипЗнч(СтрНоменклатура.Группировка)<>Тип("СправочникСсылка.Номенклатура") Тогда
				Продолжить;
			КонецЕсли; 
			Если СтрНоменклатура.СостояниеОтгрузки=Перечисления.СостоянияДоставкиЗаказа.Доставлен Тогда
				ДоставленныеТовары.Добавить(СтрНоменклатура.Группировка);
			КонецЕсли; 
		КонецЦикла;  
		
		Если ЗначениеЗаполнено(Стр.ДокументОтгрузки) Тогда
			Док = Стр.ДокументОтгрузки.ПолучитьОбъект();
		Иначе
			Док = Документы.РасходнаяНакладная.СоздатьДокумент();
			Док.Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		Попытка
			Док.Заполнить(Стр.Группировка);
			СтрокиКУдалению = Новый Массив;
			Для каждого СтрЗапас Из Док.Запасы Цикл
				Если ДоставленныеТовары.Найти(СтрЗапас.Номенклатура)=Неопределено Тогда
					СтрокиКУдалению.Добавить(СтрЗапас);
				КонецЕсли; 
			КонецЦикла;
			Для каждого СтрЗапас Из СтрокиКУдалению Цикл
				Док.Запасы.Удалить(СтрЗапас);
			КонецЦикла; 
			Док.Записать(РежимЗаписиДокумента.Проведение);
			Стр.ДокументОтгрузки = Док.Ссылка;
		Исключение
			Информация = ИнформацияОбОшибке();
			СообщенияПользователю = ПолучитьСообщенияПользователю();
			Ошибка = СтрШаблон(НСтр("ru = 'Не удалось выполнить частичную отгрузку по заказу %1: %2'"), Стр.ПредставлениеГруппировки, РекурсивноеОписаниеОшибки(Информация, СообщенияПользователю));
			Если Док.ЭтоНовый() Тогда
				Ошибки.Добавить(Стр.Группировка, Ошибка);
			Иначе
				Ошибки.Добавить(Док.Ссылка, Ошибка);
			КонецЕсли; 
		КонецПопытки; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьОбновитьДокументыОплаты(Стр, Ошибки)
	
	Если (Стр.СостояниеОплаты=Перечисления.СостоянияОплатыЗаказа.НеОплачен ИЛИ Стр.Оплачено=0) И ТипЗнч(Стр.Группировка)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		// Удаление оплат
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Заказ", Стр.Группировка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоступлениеВКассуРасшифровкаПлатежа.Ссылка
		|ИЗ
		|	Документ.ПоступлениеВКассу.РасшифровкаПлатежа КАК ПоступлениеВКассуРасшифровкаПлатежа
		|ГДЕ
		|	ПоступлениеВКассуРасшифровкаПлатежа.Заказ = &Заказ
		|	И ПоступлениеВКассуРасшифровкаПлатежа.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеВКассуРасшифровкаПлатежа.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеНаСчетРасшифровкаПлатежа.Ссылка
		|ИЗ
		|	Документ.ПоступлениеНаСчет.РасшифровкаПлатежа КАК ПоступлениеНаСчетРасшифровкаПлатежа
		|ГДЕ
		|	ПоступлениеНаСчетРасшифровкаПлатежа.Заказ = &Заказ
		|	И ПоступлениеНаСчетРасшифровкаПлатежа.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеНаСчетРасшифровкаПлатежа.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОперацияПоПлатежнымКартамРасшифровкаПлатежа.Ссылка
		|ИЗ
		|	Документ.ОперацияПоПлатежнымКартам.РасшифровкаПлатежа КАК ОперацияПоПлатежнымКартамРасшифровкаПлатежа
		|ГДЕ
		|	ОперацияПоПлатежнымКартамРасшифровкаПлатежа.Заказ = &Заказ
		|	И ОперацияПоПлатежнымКартамРасшифровкаПлатежа.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ОперацияПоПлатежнымКартамРасшифровкаПлатежа.Ссылка";
		Выборка = Запрос.Выполнить().Выбрать();
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Заказ", Стр.Группировка);
		Пока Выборка.Следующий() Цикл
			Док = Выборка.Ссылка.ПолучитьДокумент();
			СтрокиКУдалению = Док.РасшифровкаПлатежа.НайтиСтроки(СтруктураОтбора);
			Для каждого СтрРасшифровки Из СтрокиКУдалению Цикл
				Док.РасшифровкаПлатежа.Удалить(СтрРасшифровки);
			КонецЦикла;
			Попытка
				Если Док.РасшифровкаПлатежа.Количество()=0 Тогда
					Док.УстановитьПометкуУдаления(Истина);
				Иначе
					Док.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли; 
			Исключение
				Информация = ИнформацияОбОшибке();
				СообщенияПользователю = ПолучитьСообщенияПользователю();
				Ошибка = СтрШаблон(НСтр("ru = 'Не отменить оплату заказа %1: %2'"), Стр.ПредставлениеГруппировки, РекурсивноеОписаниеОшибки(Информация, СообщенияПользователю));
				Ошибки.Добавить(Выборка.Ссылка, Ошибка);
			КонецПопытки; 
		КонецЦикла;
		
	ИначеЕсли Стр.СостояниеОплаты=Перечисления.СостоянияОплатыЗаказа.ОплаченНаличными И ТипЗнч(Стр.Группировка)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		Если ЗначениеЗаполнено(Стр.ДокументОплаты) И ТипЗнч(Стр.ДокументОплаты)=Тип("ДокументСсылка.ПоступлениеВКассу") Тогда
			Док = Стр.ДокументОплаты.ПолучитьОбъект();
		Иначе
			Если ЗначениеЗаполнено(Стр.ДокументОплаты) 
				И ТипЗнч(Стр.ДокументОплаты)<>Тип("ДокументСсылка.ПоступлениеВКассу") Тогда
				Док = Стр.ДокументОплаты.ПолучитьОбъект();
				Док.УстановитьПометкуУдаления(Истина);
			КонецЕсли; 
			Док = Документы.ПоступлениеВКассу.СоздатьДокумент();
			Док.Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		Попытка
			Если ЗначениеЗаполнено(Стр.ДокументОтгрузки) Тогда
				Док.Заполнить(Стр.ДокументОтгрузки);
			Иначе
				Док.Заполнить(Стр.Группировка);
			КонецЕсли;
			Док.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Информация = ИнформацияОбОшибке();
			СообщенияПользователю = ПолучитьСообщенияПользователю();
			Ошибка = СтрШаблон(НСтр("ru = 'Не удалось зафиксировать оплату заказа %1: %2'"), Стр.ПредставлениеГруппировки, РекурсивноеОписаниеОшибки(Информация, СообщенияПользователю));
			Если Док.ЭтоНовый() Тогда
				Ошибки.Добавить(Стр.Группировка, Ошибка);
			Иначе
				Ошибки.Добавить(Док.Ссылка, Ошибка);
			КонецЕсли; 
		КонецПопытки; 
		
	ИначеЕсли Стр.СостояниеОплаты=Перечисления.СостоянияОплатыЗаказа.ОплаченКартой И ТипЗнч(Стр.Группировка)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		Если ЗначениеЗаполнено(Стр.ДокументОплаты) 
			И (ТипЗнч(Стр.ДокументОплаты)=Тип("ДокументСсылка.ОперацияПоПлатежнымКартам") 
			ИЛИ ТипЗнч(Стр.ДокументОплаты)=Тип("ДокументСсылка.ПоступлениеНаСчет")) Тогда
			Док = Стр.ДокументОплаты.ПолучитьОбъект();
		Иначе
			Если ЗначениеЗаполнено(Стр.ДокументОплаты) 
				И ТипЗнч(Стр.ДокументОплаты)<>Тип("ДокументСсылка.ОперацияПоПлатежнымКартам")
				И ТипЗнч(Стр.ДокументОплаты)<>Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
				Док = Стр.ДокументОплаты.ПолучитьОбъект();
				Док.УстановитьПометкуУдаления(Истина);
			КонецЕсли; 
			Док = Документы.ОперацияПоПлатежнымКартам.СоздатьДокумент();
			Док.Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		Попытка
			Если ЗначениеЗаполнено(Стр.ДокументОтгрузки) Тогда
				Док.Заполнить(Стр.ДокументОтгрузки);
			Иначе
				Док.Заполнить(Стр.Группировка);
			КонецЕсли;
			Док.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Информация = ИнформацияОбОшибке();
			СообщенияПользователю = ПолучитьСообщенияПользователю();
			Ошибка = СтрШаблон(НСтр("ru = 'Не удалось зафиксировать оплату заказа %1: %2'"), Стр.ПредставлениеГруппировки, РекурсивноеОписаниеОшибки(Информация, СообщенияПользователю));
			Если Док.ЭтоНовый() Тогда
				Ошибки.Добавить(Стр.Группировка, Ошибка);
			Иначе
				Ошибки.Добавить(Док.Ссылка, Ошибка);
			КонецЕсли;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СостояниеДоставлен(Заказ)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей") Тогда
		ВидЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "ВидЗаказа");
	Иначе
		ВидЗаказа = Справочники.ВидыЗаказовПокупателей.Основной;
	КонецЕсли;
	СостояниеЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидЗаказа, "СостояниеДоставлен");
	
	Возврат СостояниеЗаказа;
	
КонецФункции

Функция РекурсивноеОписаниеОшибки(Информация, СообщенияПользователю = Неопределено)
	
	Ошибка = КраткоеПредставлениеОшибки(Информация)+?(Информация.Причина=Неопределено, "", Символы.ПС+РекурсивноеОписаниеОшибки(Информация.Причина));
	Если СообщенияПользователю<>Неопределено Тогда
		Для каждого Сообщение Из СообщенияПользователю Цикл
			Если Найти(Сообщение.Текст, ДлительныеОперации.СообщениеПрогресса()) > 0 Тогда
				Продолжить;
			КонецЕсли;
			Ошибка = Ошибка+Символы.ПС+Сообщение.Текст;
		КонецЦикла; 
	КонецЕсли; 
	Возврат Ошибка	
	
КонецФункции

#КонецОбласти

#КонецЕсли