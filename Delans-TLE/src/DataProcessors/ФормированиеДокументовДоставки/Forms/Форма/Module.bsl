
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПредставленияДокументов = Новый ФиксированноеСоответствие(Новый Соответствие);
	
	Параметры.Свойство("СлужбаДоставки", ФильтрСлужбаДоставки);
	Параметры.Свойство("Курьер", ФильтрКурьер);
	Параметры.Свойство("МаршрутныйЛист", ФильтрМаршрутныйЛист);
	
	ФормаПараметры = Новый Структура;
	ФормаПараметры.Вставить("НесколькоОрганизаций", ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") 
	И НЕ ЗначениеЗаполнено(Справочники.Организации.ОрганизацияКомпания())); 
	ФормаПараметры.Вставить("НесколькоСкладов", ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам"));
	ФормаПараметры.Вставить("НесколькоВидовЗаказов", ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей"));
	ФормаПараметры.Вставить("НеПредупреждатьПередФормированием", ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить("ФормированиеДокументовДоставки", "НеПредупреждатьПередФормированием", Ложь));
	ФормаПараметры.Вставить("ПравоВводаКассовыхДокументов", РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ДобавлениеИзменениеПодсистемыКасса"));
	ФормаПараметры.Вставить("ПравоВводаБанковскихДокументов", РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ДобавлениеИзменениеПодсистемыБанк"));
	ФормаПараметры.Вставить("ПравоВводаРасходныхДокументов", РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ДобавлениеИзменениеПодсистемыПродажи"));
	
	УстановитьУсловноеОформление();
	УправлениеФормой(ЭтаФорма);
	ЗаполнитьИУстановитьВидимостьНастройкиСостоянийЗаказов();
	
	ЗаполнитьДеревоЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НаборКонстант" Тогда
		ЗаполнитьИУстановитьВидимостьНастройкиСостоянийЗаказов();
	ИначеЕсли ИмяСобытия = "Запись_ЗаказПокупателя"
		ИЛИ ИмяСобытия = "Запись_РасходнаяНакладная"
		ИЛИ ИмяСобытия = "ОповещениеОбОплатеЗаказа" Тогда
		ПроверитьМодифицированностьИОбновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ ТолькоПросмотр Тогда
		
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		Текст = НСтр("ru='Сохранить внесенные изменения?'");
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СформироватьДокументыКлиент();
		Модифицированность = Ложь;
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДекорацияСостояниеЗаказовПриДоставкеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Заголовок", НСтр("ru = 'Состояние доставленных заказов'"));
	СтруктураОткрытия.Вставить("Подсказка", НСтр("ru = 'Укажите состояние, в которое будет переведен заказ покупателя после установки признака доставки'"));
	СтруктураОткрытия.Вставить("ИмяРеквизита", "СостояниеДоставлен");
	ОткрытьФорму("ОбщаяФорма.ФормаНастройкиФиксированныхСостоянийЗаказов", СтруктураОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ФильтрКурьер) И ФильтрСлужбаДоставки<>ПредопределенноеЗначение("Справочник.СлужбыДоставки.ДоставкаСобственнымиСилами") Тогда
		ФильтрСлужбаДоставки = ПредопределенноеЗначение("Справочник.СлужбыДоставки.ДоставкаСобственнымиСилами");
	ИначеЕсли НЕ ЗначениеЗаполнено(ФильтрКурьер) И ФильтрСлужбаДоставки=ПредопределенноеЗначение("Справочник.СлужбыДоставки.ДоставкаСобственнымиСилами") Тогда
		ФильтрСлужбаДоставки = ПредопределенноеЗначение("Справочник.СлужбыДоставки.ПустаяСсылка");
	КонецЕсли; 
	УправлениеФормой(ЭтаФорма);
	
	ПроверитьМодифицированностьИОбновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ Поле=Элементы.ПланДоставкиПредставлениеГруппировки
		И НЕ Поле=Элементы.ПланДоставкиПредставлениеСостояниеОтгрузки
		И НЕ Поле=Элементы.ПланДоставкиПредставлениеСостояниеОплаты Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;	
	СтрокаТабличнойЧасти = Элементы.ПланДоставки.ТекущиеДанные;
	СтруктураОповещения = Новый Структура;
	СтруктураОповещения.Вставить("Поле", Поле);
	СтруктураОповещения.Вставить("СтрокаТабличнойЧасти", СтрокаТабличнойЧасти);
	Если Поле=Элементы.ПланДоставкиПредставлениеГруппировки Тогда
		ПоказатьЗначение(, СтрокаТабличнойЧасти.Группировка);
	ИначеЕсли Поле=Элементы.ПланДоставкиПредставлениеСостояниеОтгрузки Тогда
		ПоказатьЗначение(, СтрокаТабличнойЧасти.ДокументОтгрузки);
	ИначеЕсли Поле=Элементы.ПланДоставкиПредставлениеСостояниеОплаты Тогда
		ПоказатьЗначение(, СтрокаТабличнойЧасти.ДокументОплаты);
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиСостояниеОтгрузкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СостоянияДоставкиЗаказа.Отгружен");
	КонецЕсли; 
	
	ТекущаяСтрока = Элементы.ПланДоставки.ТекущиеДанные;
	ТекущаяСтрока.СостояниеОтгрузкиИзменено = (ТекущаяСтрока.СостояниеОтгрузки<>ВыбранноеЗначение ИЛИ ТекущаяСтрока.СостояниеОтгрузкиИзменено);
	
	Если ТекущаяСтрока.СостояниеОтгрузкиИзменено Тогда
		СтрокаРодитель = ТекущаяСтрока.ПолучитьРодителя();
		Если СтрокаРодитель<>Неопределено Тогда
			СтрокаРодитель.СостояниеОтгрузкиИзменено = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиСостояниеОтгрузкиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	ТекущаяСтрока = Элементы.ПланДоставки.ТекущиеДанные;
	
	Если ТекущаяСтрока.СостояниеОтгрузки=ПредопределенноеЗначение("Перечисление.СостоянияДоставкиЗаказа.ДоставленЧастично") Тогда
		РазвернутьНоменклатуру(ТекущаяСтрока.ПолучитьИдентификатор());
		Элементы.ПланДоставки.Развернуть(ТекущаяСтрока.ПолучитьИдентификатор());
		ПоНоменклатуре = Истина;
		УстановитьВидимостьЭлементов(ЭтотОбъект);
	ИначеЕсли ТекущаяСтрока.ПолучитьЭлементы().Количество()>0 Тогда
		ТекущаяСтрока.ПолучитьЭлементы().Очистить();
	КонецЕсли; 
	
	ОбновитьСуммыСтрокиДерева(ТекущаяСтрока);
	РассчитатьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиСостояниеОплатыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СостоянияОплатыЗаказа.НеОплачен");
	КонецЕсли; 
	
	ТекущаяСтрока = Элементы.ПланДоставки.ТекущиеДанные;
	ТекущаяСтрока.СостояниеОплатыИзменено = (ТекущаяСтрока.СостояниеОплаты<>ВыбранноеЗначение ИЛИ ТекущаяСтрока.СостояниеОплатыИзменено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиСостояниеОплатыПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	ТекущаяСтрока = Элементы.ПланДоставки.ТекущиеДанные;
	
	Если ТекущаяСтрока.СостояниеОплаты<>ПредопределенноеЗначение("Перечисление.СостоянияОплатыЗаказа.НеОплачен")
		И (ТекущаяСтрока.СостояниеОтгрузки=ПредопределенноеЗначение("Перечисление.СостоянияДоставкиЗаказа.Отгружен")
		ИЛИ ТекущаяСтрока.СостояниеОтгрузки=ПредопределенноеЗначение("Перечисление.СостоянияДоставкиЗаказа.НеДоставлен")) Тогда
		Состояние(
		НСтр("ru = 'Заказ еще не доставлен. Невозможно определить сумму оплаты.'"), , ,
		БиблиотекаКартинок.ВниманиеВВидеТреугольника_32);
	КонецЕсли; 
	
	ОбновитьСуммыСтрокиДерева(ТекущаяСтрока);
	РассчитатьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиСостояниеОтгрузкиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиСостояниеОплатыОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиСостояниеОтгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ПланДоставки.ТекущиеДанные;
	Если СтрокаТабличнойЧасти=Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	Если ТипЗнч(СтрокаТабличнойЧасти.СостояниеОтгрузки)=Тип("ПеречислениеСсылка.СостоянияДоставкиЗаказа") 
		ИЛИ СтрокаТабличнойЧасти.СостояниеОтгрузки=Неопределено Тогда
		Если ТипЗнч(СтрокаТабличнойЧасти.Группировка)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДоставкиЗаказа.Отгружен"));
		КонецЕсли; 
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДоставкиЗаказа.Доставлен"));
		Если ТипЗнч(СтрокаТабличнойЧасти.Группировка)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДоставкиЗаказа.ДоставленЧастично"));
		КонецЕсли; 
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияДоставкиЗаказа.НеДоставлен"));
	Иначе
		ДанныеВыбора.Добавить(СтрокаТабличнойЧасти.СостояниеОтгрузки);
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиСостояниеОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ПланДоставки.ТекущиеДанные;
	Если СтрокаТабличнойЧасти=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	Если ТипЗнч(СтрокаТабличнойЧасти.СостояниеОплаты)=Тип("ПеречислениеСсылка.СостоянияОплатыЗаказа") 
		ИЛИ СтрокаТабличнойЧасти.СостояниеОплаты=Неопределено Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияОплатыЗаказа.НеОплачен"));
		Если ФормаПараметры.ПравоВводаКассовыхДокументов Тогда
			ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияОплатыЗаказа.ОплаченНаличными"));
		КонецЕсли;
		Если ФормаПараметры.ПравоВводаБанковскихДокументов Тогда
			ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияОплатыЗаказа.ОплаченКартой"));
		КонецЕсли; 
	Иначе
		ДанныеВыбора.Добавить(СтрокаТабличнойЧасти.СостояниеОплаты);
	КонецЕсли; 	
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ПроверитьМодифицированностьИОбновить();
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	СформироватьДокументыКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументыКлиент()
	
	Если НЕ ФормаПараметры.НесколькоВидовЗаказов И НЕ ЗначениеЗаполнено(СостояниеЗаказовПриДоставке) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		НСтр("ru = 'Укажите состояние заказа, устанавливаемое при доставке'"), , 
		"СостояниеЗаказовПриДоставке");
		Возврат;
	КонецЕсли;
	
	ПараметрыСовета = Новый Структура;
	ПараметрыСовета.Вставить("Заголовок", НСтр("ru = 'Формирование документов доставки'"));
	ПараметрыСовета.Вставить("ТекстСообщения", НСтр("ru = 'Все внесенные изменения будут сохранены. Для доставленных заказов будет изменено состояние, для частично доставленных - изменена расходная накладная, для недоставленных - сформирован возврат от покупателя. 
	|Для измененных состояний оплаты будут сформированы послупления в кассу либо операции платежными картами'"));
	ПараметрыСовета.Вставить("ВидимостьБольшеНеПоказывать", Истина);
	ПараметрыСовета.Вставить("ЗаголовокКнопкиОк", НСтр("ru = 'Продолжить'"));
	Если ФормаПараметры.НеПредупреждатьПередФормированием Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("БольшеНеПоказывать", ФормаПараметры.НеПредупреждатьПередФормированием);
		СтруктураВозврата.Вставить("КодВозврата", КодВозвратаДиалога.ОК);
		СформироватьДокументыКлиентПродолжение(СтруктураВозврата, ПараметрыСовета);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьДокументыКлиентПродолжение", ЭтотОбъект, ПараметрыСовета);
		ОткрытьФорму("ОбщаяФорма.ФормаПредупреждения", ПараметрыСовета, ЭтаФорма, Истина, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументыКлиентПродолжение(Результат, ПараметрыСовета) Экспорт
	
	Если ТипЗнч(Результат)<>Тип("Структура") ИЛИ НЕ Результат.Свойство("КодВозврата") ИЛИ Результат.КодВозврата<>КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьФоновоеЗадание();
	
	Если Результат.БольшеНеПоказывать<>ФормаПараметры.НеПредупреждатьПередФормированием Тогда
		СохранитьНастройкуНеПредупреждатьПередФормированием(Результат.БольшеНеПоказывать);
	КонецЕсли; 
	
КонецПроцедуры
 
&НаСервере
Процедура СохранитьНастройкуНеПредупреждатьПередФормированием(БольшеНеПоказывать)
	
	ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить("ФормированиеДокументовДоставки", "НеПредупреждатьПередФормированием", БольшеНеПоказывать);
	
КонецПроцедуры
 
&НаКлиенте
Процедура НастроитьСостояниеЗаказов(Команда)
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Заголовок", НСтр("ru = 'Состояния доставленных заказов'"));
	СтруктураОткрытия.Вставить("Подсказка", НСтр("ru = 'Укажите состояния, в которые будет переведен заказ покупателя после установки признака доставки'"));
	СтруктураОткрытия.Вставить("ИмяРеквизита", "СостояниеДоставлен");
	ОткрытьФорму("ОбщаяФорма.ФормаНастройкиФиксированныхСостоянийЗаказов", СтруктураОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	ФормаПараметры = Форма.ФормаПараметры;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФильтрОрганизация", "Видимость", ФормаПараметры.НесколькоОрганизаций);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФильтрСлужбаДоставки", "ТолькоПросмотр", ЗначениеЗаполнено(Форма.ФильтрКурьер));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФильтрСклад", "Видимость", ФормаПараметры.НесколькоСкладов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФильтрВидЗаказа", "Видимость", ФормаПараметры.НесколькоВидовЗаказов);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПланДоставкиГруппаСостояниеОплаты", "Видимость", ФормаПараметры.ПравоВводаКассовыхДокументов ИЛИ ФормаПараметры.ПравоВводаБанковскихДокументов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИтогОплачено", "Видимость", ФормаПараметры.ПравоВводаКассовыхДокументов ИЛИ ФормаПараметры.ПравоВводаБанковскихДокументов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОплатаРасшифровка", "Видимость", ФормаПараметры.ПравоВводаКассовыхДокументов ИЛИ ФормаПараметры.ПравоВводаБанковскихДокументов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПланДоставкиГруппаСостояниеОтгрузки", "Видимость", ФормаПараметры.ПравоВводаРасходныхДокументов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИУстановитьВидимостьНастройкиСостоянийЗаказов()
	
	Если НЕ ФормаПараметры.НесколькоВидовЗаказов Тогда
		СостояниеЗаказовПриДоставке = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.ВидыЗаказовПокупателей.Основной, "СостояниеДоставлен");
		Элементы.ДекорацияСостояниеЗаказовПриДоставке.Видимость = ЗначениеЗаполнено(СостояниеЗаказовПриДоставке);
		Элементы.ГруппаСостояниеЗаказов.ЦветФона = ?(ЗначениеЗаполнено(СостояниеЗаказовПриДоставке), ЦветаСтиля.ЦветФонаФормы, Новый Цвет);
		Элементы.СостояниеЗаказовПриДоставке.Видимость = Не Элементы.ДекорацияСостояниеЗаказовПриДоставке.Видимость;
		Элементы.НастроитьСостояниеЗаказов.Видимость = Ложь;
		Элементы.ДекорацияСостояниеЗаказовПриДоставке.Заголовок = Новый ФорматированнаяСтрока(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Состояние заказов при доставке изменится на «%1». Настраивается '"), СостояниеЗаказовПриДоставке),
			Новый ФорматированнаяСтрока(НСтр("ru = 'здесь'"),,,,"Переход"));
	Иначе
		Элементы.ДекорацияСостояниеЗаказовПриДоставке.Видимость = Ложь;
		Элементы.ГруппаСостояниеЗаказов.ЦветФона = Новый Цвет;
		Элементы.СостояниеЗаказовПриДоставке.Видимость = Ложь;
		Элементы.НастроитьСостояниеЗаказов.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Доступность к изменению
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПланДоставки.МожноМенятьСостояниеОплаты", Ложь);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, "ПланДоставкиСостояниеОплаты");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПланДоставки.МожноМенятьСостояниеОтгрузки", Ложь);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, "ПланДоставкиСостояниеОтгрузки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПланДоставки.СостояниеОтгрузки", Перечисления.СостоянияДоставкиЗаказа.ПустаяСсылка());
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, "ПланДоставкиСостояниеОтгрузки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Не сформирован документ отгрузки>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	// Видимость колонок
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПланДоставки.ПредставлениеГруппировки", Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, "ПланДоставкиПредставлениеГруппировки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПланДоставки.ПредставлениеГруппировки", Неопределено, ВидСравненияКомпоновкиДанных.Заполнено);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, "ПланДоставкиГруппировка");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПланДоставки.ПредставлениеСостояниеОтгрузки", Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, "ПланДоставкиПредставлениеСостояниеОтгрузки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПланДоставки.ПредставлениеСостояниеОтгрузки", Неопределено, ВидСравненияКомпоновкиДанных.Заполнено);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, "ПланДоставкиСостояниеОтгрузки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПланДоставки.ПредставлениеСостояниеОплаты", Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, "ПланДоставкиПредставлениеСостояниеОплаты");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПланДоставки.ПредставлениеСостояниеОплаты", Неопределено, ВидСравненияКомпоновкиДанных.Заполнено);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, "ПланДоставкиСостояниеОплаты");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
	// Измененные данные
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПланДоставки.СостояниеОтгрузкиИзменено", Истина);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, "ПланДоставкиСостояниеОтгрузки");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Шрифт", Новый Шрифт(Элементы.ПланДоставкиСостояниеОтгрузки.Шрифт, , , Истина));
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ПланДоставки.СостояниеОплатыИзменено", Истина);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, "ПланДоставкиСостояниеОплаты");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Шрифт", Новый Шрифт(Элементы.ПланДоставкиСостояниеОплаты.Шрифт, , , Истина));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФильтров()
	
	ЗаголовокГруппы = "";
	Если ЗначениеЗаполнено(ФильтрСлужбаДоставки) Тогда
		ЗаголовокГруппы = ЗаголовокГруппы+?(ПустаяСтрока(ЗаголовокГруппы), "", ", ")+Строка(ФильтрСлужбаДоставки);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ФильтрСпособОтгрузки) Тогда
		ЗаголовокГруппы = ЗаголовокГруппы+?(ПустаяСтрока(ЗаголовокГруппы), "", ", ")+Строка(ФильтрСпособОтгрузки);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ФильтрСпособДоставки) Тогда
		ЗаголовокГруппы = ЗаголовокГруппы+?(ПустаяСтрока(ЗаголовокГруппы), "", ", ")+Строка(ФильтрСпособДоставки);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ФильтрЗонаТариф) Тогда
		ЗаголовокГруппы = ЗаголовокГруппы+?(ПустаяСтрока(ЗаголовокГруппы), "", ", ")+Строка(ФильтрЗонаТариф);
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрДатаДоставки) Тогда
		ЗаголовокГруппы = ЗаголовокГруппы+?(ПустаяСтрока(ЗаголовокГруппы), "", ", ")+НСтр("ru = 'доставка '")+Формат(ФильтрДатаДоставки, "ДЛФ=D");
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрОрганизация) Тогда
		ЗаголовокГруппы = ЗаголовокГруппы+?(ПустаяСтрока(ЗаголовокГруппы), "", ", ")+Строка(ФильтрОрганизация);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ФильтрСклад) Тогда
		ЗаголовокГруппы = ЗаголовокГруппы+?(ПустаяСтрока(ЗаголовокГруппы), "", ", ")+Строка(ФильтрСклад);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ФильтрВидЗаказа) И ФормаПараметры.НесколькоВидовЗаказов Тогда
		ЗаголовокГруппы = ЗаголовокГруппы+?(ПустаяСтрока(ЗаголовокГруппы), "", ", ")+Строка(ФильтрВидЗаказа);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ФильтрКурьер) Тогда
		ЗаголовокГруппы = ЗаголовокГруппы+?(ПустаяСтрока(ЗаголовокГруппы), "", ", ")+Строка(ФильтрКурьер);
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрМаршрутныйЛист) Тогда
		ЗаголовокГруппы = ЗаголовокГруппы+?(ПустаяСтрока(ЗаголовокГруппы), "", ", ")+Строка(ФильтрМаршрутныйЛист);
	КонецЕсли;
	Если ФильтрТолькоНедоставленные Тогда
		ЗаголовокГруппы = ЗаголовокГруппы+?(ПустаяСтрока(ЗаголовокГруппы), "", ", ")+НСтр("ru = 'недоставленные'");
	КонецЕсли; 
	Если ФильтрТолькоНеоплаченные Тогда
		ЗаголовокГруппы = ЗаголовокГруппы+?(ПустаяСтрока(ЗаголовокГруппы), "", ", ")+НСтр("ru = 'неоплаченные'");
	КонецЕсли; 
	Если ПустаяСтрока(ЗаголовокГруппы) Тогда
		Элементы.ГруппаФильтры.ЗаголовокСвернутогоОтображения = НСтр("ru = 'Фильтры'");
	Иначе
		Элементы.ГруппаФильтры.ЗаголовокСвернутогоОтображения = НСтр("ru = 'Фильтры: '")+ЗаголовокГруппы;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМодифицированностьИОбновить()
	
	Если НЕ Модифицированность Тогда
		ЗаполнитьДеревоЗаказов();
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПроверитьМодифицированностьИОбновитьЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
	Оповещение, 
	НСтр("ru = 'При обновлении списка внесенные изменения будут отменены. Все равно продолжить?'"), 
	РежимДиалогаВопрос.ОКОтмена, 
	, 
	КодВозвратаДиалога.Отмена, 
	НСтр("ru = 'Обновление списка заказов'")); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМодифицированностьИОбновитьЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если НЕ Ответ=КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли; 	
	
	ЗаполнитьДеревоЗаказов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоЗаказов()
	
	ОбновитьЗаголовокФильтров();
	Если НЕ СостоянияЗаказовЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	Модифицированность = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СлужбаДоставки", ФильтрСлужбаДоставки);
	Запрос.УстановитьПараметр("Курьер", ФильтрКурьер);
	Запрос.УстановитьПараметр("СпособДоставки", ФильтрСпособДоставки);
	Запрос.УстановитьПараметр("СпособОтгрузки", ФильтрСпособОтгрузки);
	Запрос.УстановитьПараметр("МаршрутныйЛист", ФильтрМаршрутныйЛист);
	Запрос.УстановитьПараметр("ВидЗаказа", ФильтрВидЗаказа);
	Запрос.УстановитьПараметр("ТолькоНедоставленные", ФильтрТолькоНедоставленные);
	Запрос.УстановитьПараметр("ТолькоНеоплаченные", ФильтрТолькоНеоплаченные);
	Запрос.УстановитьПараметр("Организация", ФильтрОрганизация);
	Запрос.УстановитьПараметр("ЗонаТариф", ФильтрЗонаТариф);
	Запрос.УстановитьПараметр("Склад", ФильтрСклад);
	Запрос.УстановитьПараметр("ДатаДоставки", ФильтрДатаДоставки);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателя.Ссылка КАК Заказ,
	|	ЗаказПокупателя.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЗаказПокупателя.ВидЗаказа КАК ВидЗаказа,
	|	МаршрутныйЛистЗаказы.Ссылка.СлужбаДоставки КАК СлужбаДоставки,
	|	ЗаказПокупателя.СуммаДокумента КАК СуммаДокумента
	|ПОМЕСТИТЬ Заказы
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.Заказы КАК МаршрутныйЛистЗаказы
	|		ПО (МаршрутныйЛистЗаказы.Заказ = ЗаказПокупателя.Ссылка)
	|			И (МаршрутныйЛистЗаказы.Ссылка.Проведен)
	|ГДЕ
	|	ЗаказПокупателя.Проведен
	|	И (ЗаказПокупателя.СостояниеЗаказа <> ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.Завершен)
	|			ИЛИ ЗаказПокупателя.ВидЗаказа.СостояниеДоставлен = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.Завершен))
	|	И ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу)
	|	И НЕ МаршрутныйЛистЗаказы.Ссылка ЕСТЬ NULL
	|	И (&МаршрутныйЛист = ЗНАЧЕНИЕ(Документ.МаршрутныйЛист.ПустаяСсылка)
	|			ИЛИ МаршрутныйЛистЗаказы.Ссылка = &МаршрутныйЛист)
	|	И (НЕ &ТолькоНедоставленные
	|			ИЛИ НЕ (ЗаказПокупателя.ВидЗаказа, ЗаказПокупателя.СостояниеЗаказа) В
	|					(ВЫБРАТЬ
	|						Справочник.ВидыЗаказовПокупателей.Ссылка,
	|						Справочник.ВидыЗаказовПокупателей.СостояниеДоставлен
	|					ИЗ
	|						Справочник.ВидыЗаказовПокупателей
	|					ГДЕ
	|						НЕ Справочник.ВидыЗаказовПокупателей.ПометкаУдаления
	|						И НЕ Справочник.ВидыЗаказовПокупателей.НеИспользоватьДоставку))
	|	И (&ВидЗаказа = ЗНАЧЕНИЕ(Справочник.ВидыЗаказовПокупателей.ПустаяСсылка)
	|			ИЛИ ЗаказПокупателя.ВидЗаказа = &ВидЗаказа)
	|	И (&СлужбаДоставки = ЗНАЧЕНИЕ(Справочник.СлужбыДоставки.ПустаяСсылка)
	|			ИЛИ МаршрутныйЛистЗаказы.Ссылка.СлужбаДоставки = &СлужбаДоставки)
	|	И (&Курьер = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ИЛИ МаршрутныйЛистЗаказы.Ссылка.Курьер = &Курьер)
	|	И (&СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПустаяСсылка)
	|			ИЛИ МаршрутныйЛистЗаказы.Ссылка.СпособДоставки = &СпособДоставки)
	|	И (&СпособОтгрузки = ЗНАЧЕНИЕ(Перечисление.СпособыОтгрузки.ПустаяСсылка)
	|			ИЛИ МаршрутныйЛистЗаказы.Ссылка.СпособОтгрузки = &СпособОтгрузки)
	|	И (&Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ИЛИ МаршрутныйЛистЗаказы.Ссылка.Организация = &Организация)
	|	И (&Склад = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|			ИЛИ ВЫБОР
	|				КОГДА МаршрутныйЛистЗаказы.Ссылка.Склад = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|					ТОГДА ЗаказПокупателя.СтруктурнаяЕдиницаРезерв
	|				ИНАЧЕ МаршрутныйЛистЗаказы.Ссылка.Склад
	|			КОНЕЦ = &Склад)
	|	И (&ЗонаТариф = ЗНАЧЕНИЕ(Справочник.ЗоныТарифыДоставки.ПустаяСсылка)
	|			ИЛИ ВЫБОР
	|				КОГДА МаршрутныйЛистЗаказы.Ссылка.ЗонаТариф = ЗНАЧЕНИЕ(Справочник.ЗоныТарифыДоставки.ПустаяСсылка)
	|					ТОГДА ЗаказПокупателя.ЗонаТариф
	|				ИНАЧЕ МаршрутныйЛистЗаказы.Ссылка.ЗонаТариф
	|			КОНЕЦ = &ЗонаТариф)
	|	И (&ДатаДоставки = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ ЗаказПокупателя.ОжидаемаяДатаВручения = &ДатаДоставки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Отгрузка.Заказ КАК Заказ,
	|	ВЫБОР
	|		КОГДА СУММА(Отгрузка.КоличествоДокументов) = 1
	|			ТОГДА МАКСИМУМ(Отгрузка.ДокументОтгрузки)
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ДокументОтгрузки,
	|	ВЫБОР
	|		КОГДА СУММА(Отгрузка.КоличествоВозвратов) = 1
	|			ТОГДА МАКСИМУМ(Отгрузка.ДокументВозврата)
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ДокументВозврата,
	|	СУММА(Отгрузка.КоличествоДокументов) КАК КоличествоДокументов,
	|	СУММА(Отгрузка.КоличествоВозвратов) КАК КоличествоВозвратов,
	|	СУММА(Отгрузка.Заказано) КАК Заказано,
	|	СУММА(Отгрузка.Отгружено) КАК Отгружено,
	|	СУММА(Отгрузка.Возвращено) КАК Возвращено
	|ПОМЕСТИТЬ Отгрузка
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасходнаяНакладнаяЗапасы.Ссылка.Заказ КАК Заказ,
	|		МАКСИМУМ(РасходнаяНакладнаяЗапасы.Ссылка) КАК ДокументОтгрузки,
	|		NULL КАК ДокументВозврата,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РасходнаяНакладнаяЗапасы.Ссылка) КАК КоличествоДокументов,
	|		0 КАК КоличествоВозвратов,
	|		0 КАК Заказано,
	|		СУММА(РасходнаяНакладнаяЗапасы.Количество) КАК Отгружено,
	|		0 КАК Возвращено
	|	ИЗ
	|		Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|	ГДЕ
	|		РасходнаяНакладнаяЗапасы.Ссылка.Проведен
	|		И РасходнаяНакладнаяЗапасы.Ссылка.Заказ В
	|				(ВЫБРАТЬ
	|					Заказы.Заказ
	|				ИЗ
	|					Заказы)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РасходнаяНакладнаяЗапасы.Ссылка.Заказ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказПокупателяЗапасы.Ссылка,
	|		NULL,
	|		NULL,
	|		0,
	|		0,
	|		СУММА(ЗаказПокупателяЗапасы.Количество),
	|		0,
	|		0
	|	ИЗ
	|		Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|	ГДЕ
	|		ЗаказПокупателяЗапасы.Ссылка В
	|				(ВЫБРАТЬ
	|					Заказы.Заказ
	|				ИЗ
	|					Заказы)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПокупателяЗапасы.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПриходнаяНакладнаяЗапасы.Ссылка.ДокументОснование.Заказ,
	|		NULL,
	|		МАКСИМУМ(ПриходнаяНакладнаяЗапасы.Ссылка),
	|		0,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПриходнаяНакладнаяЗапасы.Ссылка),
	|		0,
	|		0,
	|		СУММА(ПриходнаяНакладнаяЗапасы.Количество)
	|	ИЗ
	|		Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
	|	ГДЕ
	|		ПриходнаяНакладнаяЗапасы.Ссылка.Проведен
	|		И ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|		И ПриходнаяНакладнаяЗапасы.Ссылка.ДокументОснование.Заказ В
	|				(ВЫБРАТЬ
	|					Заказы.Заказ
	|				ИЗ
	|					Заказы)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПриходнаяНакладнаяЗапасы.Ссылка.ДокументОснование.Заказ) КАК Отгрузка
	|
	|СГРУППИРОВАТЬ ПО
	|	Отгрузка.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату КАК СчетНаОплату,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОплатаСчетовИЗаказовОбороты.Регистратор) КАК КоличествоДокументов,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОплатаСчетовИЗаказовОбороты.Регистратор) = 1
	|			ТОГДА МАКСИМУМ(ОплатаСчетовИЗаказовОбороты.Регистратор)
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ДокументОплаты,
	|	СУММА(ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот) КАК Аванс,
	|	СУММА(ВЫБОР
	|			КОГДА ОплатаСчетовИЗаказовОбороты.Регистратор ССЫЛКА Документ.ПоступлениеВКассу
	|				ТОГДА ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Наличные,
	|	СУММА(ВЫБОР
	|			КОГДА ОплатаСчетовИЗаказовОбороты.Регистратор ССЫЛКА Документ.ПоступлениеНаСчет
	|					ИЛИ ОплатаСчетовИЗаказовОбороты.Регистратор ССЫЛКА Документ.ОперацияПоПлатежнымКартам
	|				ТОГДА ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Безналичные
	|ПОМЕСТИТЬ Оплата
	|ИЗ
	|	РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			СчетНаОплату В
	|				(ВЫБРАТЬ
	|					Заказы.Заказ
	|				ИЗ
	|					Заказы)) КАК ОплатаСчетовИЗаказовОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заказы.Заказ КАК Группировка,
	|	Заказы.СлужбаДоставки,
	|	Заказы.СуммаДокумента КАК Сумма,
	|	ВЫБОР
	|		КОГДА (Заказы.ВидЗаказа, Заказы.СостояниеЗаказа) В
	|					(ВЫБРАТЬ
	|						Справочник.ВидыЗаказовПокупателей.Ссылка,
	|						Справочник.ВидыЗаказовПокупателей.СостояниеОтгружен
	|					ИЗ
	|						Справочник.ВидыЗаказовПокупателей
	|					ГДЕ
	|						НЕ Справочник.ВидыЗаказовПокупателей.ПометкаУдаления
	|						И НЕ Справочник.ВидыЗаказовПокупателей.НеИспользоватьДоставку)
	|				И (ЕСТЬNULL(Отгрузка.Возвращено, 0) > 0
	|					ИЛИ ЕСТЬNULL(Отгрузка.Отгружено, 0) <> ЕСТЬNULL(Отгрузка.Заказано, 0))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияДоставкиЗаказа.ДоставленЧастично)
	|		КОГДА ЕСТЬNULL(Отгрузка.Отгружено, 0) - ЕСТЬNULL(Отгрузка.Возвращено, 0) = 0
	|				И ЕСТЬNULL(Отгрузка.Отгружено, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияДоставкиЗаказа.НеДоставлен)
	|		КОГДА (Заказы.ВидЗаказа, Заказы.СостояниеЗаказа) В
	|				(ВЫБРАТЬ
	|					Справочник.ВидыЗаказовПокупателей.Ссылка,
	|					Справочник.ВидыЗаказовПокупателей.СостояниеДоставлен
	|				ИЗ
	|					Справочник.ВидыЗаказовПокупателей
	|				ГДЕ
	|					НЕ Справочник.ВидыЗаказовПокупателей.ПометкаУдаления
	|					И НЕ Справочник.ВидыЗаказовПокупателей.НеИспользоватьДоставку)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияДоставкиЗаказа.Доставлен)
	|		КОГДА ЕСТЬNULL(Отгрузка.КоличествоДокументов, 0) = 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияДоставкиЗаказа.ПустаяСсылка)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияДоставкиЗаказа.Отгружен)
	|	КОНЕЦ КАК СостояниеОтгрузки,
	|	ЛОЖЬ КАК СостояниеОтгрузкиИзменено,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Отгрузка.КоличествоДокументов, 0) = 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК МожноМенятьСостояниеОтгрузки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Оплата.КоличествоДокументов, 0) > 1
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыЗаказа.КомбинированнаяОплата)
	|		КОГДА ЕСТЬNULL(Оплата.Аванс, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыЗаказа.Предоплата)
	|		КОГДА ЕСТЬNULL(Оплата.Наличные, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыЗаказа.ОплаченНаличными)
	|		КОГДА ЕСТЬNULL(Оплата.Безналичные, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыЗаказа.ОплаченКартой)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыЗаказа.НеОплачен)
	|	КОНЕЦ КАК СостояниеОплаты,
	|	ЛОЖЬ КАК СостояниеОплатыИзменено,
	|	ВЫБОР
	|		КОГДА Заказы.СуммаДокумента = ЕСТЬNULL(Оплата.Аванс, 0)
	|				ИЛИ ЕСТЬNULL(Оплата.КоличествоДокументов, 0) >= 1
	|				ИЛИ Заказы.СлужбаДоставки <> ЗНАЧЕНИЕ(Справочник.СлужбыДоставки.ДоставкаСобственнымиСилами)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК МожноМенятьСостояниеОплаты,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Отгрузка.КоличествоДокументов, 0) = 1
	|			ТОГДА ЕСТЬNULL(Отгрузка.ДокументОтгрузки, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументОтгрузки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Отгрузка.КоличествоВозвратов, 0) = 1
	|			ТОГДА ЕСТЬNULL(Отгрузка.ДокументВозврата, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументВозврата,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Оплата.КоличествоДокументов, 0) = 1
	|				И Заказы.СуммаДокумента <> ЕСТЬNULL(Оплата.Аванс, 0)
	|			ТОГДА ЕСТЬNULL(Оплата.ДокументОплаты, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ КАК ДокументОплаты,
	|	ЕСТЬNULL(Отгрузка.Отгружено, 0) КАК Отгружено,
	|	ЕСТЬNULL(Отгрузка.Возвращено, 0) КАК Возвращено,
	|	ЕСТЬNULL(Отгрузка.Заказано, 0) КАК Заказано,
	|	ЕСТЬNULL(Оплата.Аванс, 0) КАК Аванс
	|ИЗ
	|	Заказы КАК Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Отгрузка КАК Отгрузка
	|		ПО Заказы.Заказ = Отгрузка.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Оплата КАК Оплата
	|		ПО Заказы.Заказ = Оплата.СчетНаОплату
	|ГДЕ
	|	(НЕ &ТолькоНеоплаченные
	|			ИЛИ ЕСТЬNULL(Оплата.Аванс, 0) = 0
	|				И ЕСТЬNULL(Оплата.Наличные, 0) = 0
	|				И ЕСТЬNULL(Оплата.Безналичные, 0) = 0)
	|	И (Заказы.СостояниеЗаказа <> ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.Завершен)
	|			ИЛИ ЕСТЬNULL(Оплата.Аванс, 0) = 0
	|				И ЕСТЬNULL(Оплата.Наличные, 0) = 0
	|				И ЕСТЬNULL(Оплата.Безналичные, 0) = 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Группировка
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Заказ КАК ЗаказПокупателя,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
	|	СУММА(ВложенныйЗапрос.Заказано) КАК Заказано,
	|	СУММА(ВложенныйЗапрос.Отгружено) КАК Отгружено
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказПокупателяЗапасы.Ссылка КАК Заказ,
	|		ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|		ЗаказПокупателяЗапасы.Всего КАК Сумма,
	|		ЗаказПокупателяЗапасы.Количество КАК Заказано,
	|		0 КАК Отгружено
	|	ИЗ
	|		Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|	ГДЕ
	|		ЗаказПокупателяЗапасы.Ссылка.Проведен
	|		И ЗаказПокупателяЗапасы.Ссылка В
	|				(ВЫБРАТЬ
	|					Отгрузка.Заказ
	|				ИЗ
	|					Отгрузка
	|				ГДЕ
	|					Отгрузка.Отгружено > 0
	|					И Отгрузка.Отгружено <> Отгрузка.Заказано)
	|		И ЗаказПокупателяЗапасы.НомерВариантаКП = ЗаказПокупателяЗапасы.Ссылка.ОсновнойВариантКП
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказПокупателя.Ссылка,
	|		""Доставка"",
	|		ЗаказПокупателя.СтоимостьДоставки,
	|		1,
	|		1
	|	ИЗ
	|		Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|	ГДЕ
	|		ЗаказПокупателя.Проведен
	|		И ЗаказПокупателя.СтоимостьДоставки > 0
	|		И ЗаказПокупателя.Ссылка В
	|				(ВЫБРАТЬ
	|					Отгрузка.Заказ
	|				ИЗ
	|					Отгрузка
	|				ГДЕ
	|					Отгрузка.Отгружено > 0
	|					И Отгрузка.Отгружено <> Отгрузка.Заказано)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасходнаяНакладнаяЗапасы.Ссылка.Заказ,
	|		РасходнаяНакладнаяЗапасы.Номенклатура,
	|		0,
	|		0,
	|		РасходнаяНакладнаяЗапасы.Количество
	|	ИЗ
	|		Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|	ГДЕ
	|		РасходнаяНакладнаяЗапасы.Ссылка.Проведен
	|		И РасходнаяНакладнаяЗапасы.Ссылка.Заказ В
	|				(ВЫБРАТЬ
	|					Отгрузка.Заказ
	|				ИЗ
	|					Отгрузка
	|				ГДЕ
	|					Отгрузка.Отгружено > 0
	|					И Отгрузка.Отгружено <> Отгрузка.Заказано)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПриходнаяНакладнаяЗапасы.Ссылка.Заказ,
	|		ПриходнаяНакладнаяЗапасы.Номенклатура,
	|		0,
	|		0,
	|		-ПриходнаяНакладнаяЗапасы.Количество
	|	ИЗ
	|		Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
	|	ГДЕ
	|		ПриходнаяНакладнаяЗапасы.Ссылка.Проведен
	|		И ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|		И ПриходнаяНакладнаяЗапасы.Ссылка.Заказ В
	|				(ВЫБРАТЬ
	|					Отгрузка.Заказ
	|				ИЗ
	|					Отгрузка
	|				ГДЕ
	|					Отгрузка.Отгружено > 0
	|					И Отгрузка.Отгружено - Отгрузка.Возвращено <> Отгрузка.Заказано)) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Заказ,
	|	ВложенныйЗапрос.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПокупателя,
	|	Номенклатура
	|ИТОГИ ПО
	|	ЗаказПокупателя
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	СоответсвиеСтрокЗаказов = Новый Соответствие;
	ПланДоставки.ПолучитьЭлементы().Очистить();
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаКорень = Результат.Получить(3).Выбрать();
	ДокументыДляПолученияПредставлений = Новый Массив;
	Пока ВыборкаКорень.Следующий() Цикл
	    Если ЗначениеЗаполнено(ВыборкаКорень.Группировка) И ПредставленияДокументов.Получить(ВыборкаКорень.Группировка)=Неопределено Тогда
			ДокументыДляПолученияПредставлений.Добавить(ВыборкаКорень.Группировка);
		КонецЕсли; 
	    Если ЗначениеЗаполнено(ВыборкаКорень.ДокументОтгрузки) И ПредставленияДокументов.Получить(ВыборкаКорень.ДокументОтгрузки)=Неопределено Тогда
			ДокументыДляПолученияПредставлений.Добавить(ВыборкаКорень.ДокументОтгрузки);
		КонецЕсли; 
	    Если ЗначениеЗаполнено(ВыборкаКорень.ДокументОплаты) И ПредставленияДокументов.Получить(ВыборкаКорень.ДокументОплаты)=Неопределено Тогда
			ДокументыДляПолученияПредставлений.Добавить(ВыборкаКорень.ДокументОплаты);
		КонецЕсли; 
	КонецЦикла;
	Если ДокументыДляПолученияПредставлений.Количество()>0 Тогда
		ДополнитьПредставления(ДокументыДляПолученияПредставлений);
	КонецЕсли; 
	
	ВыборкаКорень.Сбросить();
	Пока ВыборкаКорень.Следующий() Цикл
		СтрокаДерева = ПланДоставки.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, ВыборкаКорень);
		СтрокаДерева.ПредставлениеГруппировки = ПредставленияДокументов.Получить(ВыборкаКорень.Группировка);
		Если ЗначениеЗаполнено(ВыборкаКорень.ДокументОтгрузки) 
			И (ВыборкаКорень.СостояниеОтгрузки=Перечисления.СостоянияДоставкиЗаказа.Доставлен 
			ИЛИ ВыборкаКорень.СостояниеОтгрузки=Перечисления.СостоянияДоставкиЗаказа.ДоставленЧастично) Тогда
			СтрокаДерева.ПредставлениеСостояниеОтгрузки = ПредставленияДокументов.Получить(ВыборкаКорень.ДокументОтгрузки);
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаКорень.ДокументОплаты) Тогда
			СтрокаДерева.ПредставлениеСостояниеОплаты = ПредставленияДокументов.Получить(ВыборкаКорень.ДокументОплаты);
		КонецЕсли; 
		СоответсвиеСтрокЗаказов.Вставить(ВыборкаКорень.Группировка, СтрокаДерева);
	КонецЦикла; 
	
	ВыборкаЗаказы = Результат.Получить(4).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаказы.Следующий() Цикл
		СтрокаДерева = СоответсвиеСтрокЗаказов.Получить(ВыборкаЗаказы.ЗаказПокупателя);
		Если СтрокаДерева=Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		ВыборкаДетали = ВыборкаЗаказы.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			СтрокаНоменклатура = СтрокаДерева.ПолучитьЭлементы().Добавить();
			СтрокаНоменклатура.Группировка = ВыборкаДетали.Номенклатура;
			СтрокаНоменклатура.СостояниеОтгрузки = 
			?(ВыборкаДетали.Отгружено=0, 
			Перечисления.СостоянияДоставкиЗаказа.НеДоставлен, 
			Перечисления.СостоянияДоставкиЗаказа.Доставлен);
			СтрокаНоменклатура.МожноМенятьСостояниеОтгрузки = (ТипЗнч(ВыборкаДетали.Номенклатура)=Тип("СправочникСсылка.Номенклатура"));
			СтрокаНоменклатура.МожноМенятьСостояниеОплаты = Ложь;
			СтрокаНоменклатура.Сумма = ВыборкаДетали.Сумма;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого СтрокаДерева Из ПланДоставки.ПолучитьЭлементы() Цикл
		ОбновитьСуммыСтрокиДерева(СтрокаДерева);
	КонецЦикла; 
	
	ПоНоменклатуре = (ВыборкаЗаказы.Количество()>0);
	УстановитьВидимостьЭлементов(ЭтотОбъект);
	РассчитатьИтоги(ЭтаФорма);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементов(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.ПоНоменклатуре Тогда
		Элементы.ПланДоставкиГруппировка.Заголовок = НСтр("ru = 'Заказ / Номенклатура'");
		Элементы.ПланДоставкиПредставлениеГруппировки.Заголовок = НСтр("ru = 'Заказ / Номенклатура'");
		Элементы.ПланДоставки.Отображение = ОтображениеТаблицы.Дерево;
	Иначе
		Элементы.ПланДоставкиГруппировка.Заголовок = НСтр("ru = 'Заказ'");
		Элементы.ПланДоставкиПредставлениеГруппировки.Заголовок = НСтр("ru = 'Заказ'");
		Элементы.ПланДоставки.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоги(Форма)
	
	Элементы = Форма.Элементы;
	
	Дерево = Форма.ПланДоставки;
	Форма.ИтогКОплате = 0;
	Форма.ИтогОплачено = 0;
	Форма.ИтогОплаченоНаличными = 0;
	Форма.ИтогОплаченоКартой = 0;
	Для каждого СтрокаДерева Из Дерево.ПолучитьЭлементы() Цикл
		Форма.ИтогКОплате = Форма.ИтогКОплате+СтрокаДерева.КОплате;
		Форма.ИтогОплачено = Форма.ИтогОплачено+СтрокаДерева.Оплачено;
		Если ЗаказОплаченНаличными(СтрокаДерева) Тогда
			Форма.ИтогОплаченоНаличными = Форма.ИтогОплаченоНаличными+СтрокаДерева.КОплате;
		ИначеЕсли ЗаказОплаченКартой(СтрокаДерева) Тогда
			Форма.ИтогОплаченоКартой = Форма.ИтогОплаченоКартой+СтрокаДерева.КОплате;
		КонецЕсли; 
	КонецЦикла;
	
	Если Форма.ИтогОплаченоНаличными=0 ИЛИ Форма.ИтогОплаченоКартой=0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИтогОплаченоНаличными", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИтогОплаченоКартой", "Видимость", Ложь);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИтогОплаченоНаличными", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИтогОплаченоКартой", "Видимость", Истина);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСформировать", "Доступность", Форма.Модифицированность);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПредставления(ДокументыДляПолученияПредставлений)
	
	Соответсвие = Новый Соответствие(ПредставленияДокументов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", ДокументыДляПолученияПредставлений);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка,
	|	ЗаказПокупателя.Номер,
	|	ЗаказПокупателя.Дата
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&Ссылки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходнаяНакладная.Ссылка,
	|	РасходнаяНакладная.Номер,
	|	РасходнаяНакладная.Дата
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|ГДЕ
	|	РасходнаяНакладная.Ссылка В(&Ссылки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеВКассу.Ссылка,
	|	ПоступлениеВКассу.Номер,
	|	ПоступлениеВКассу.Дата
	|ИЗ
	|	Документ.ПоступлениеВКассу КАК ПоступлениеВКассу
	|ГДЕ
	|	ПоступлениеВКассу.Ссылка В(&Ссылки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеНаСчет.Ссылка,
	|	ПоступлениеНаСчет.Номер,
	|	ПоступлениеНаСчет.Дата
	|ИЗ
	|	Документ.ПоступлениеНаСчет КАК ПоступлениеНаСчет
	|ГДЕ
	|	ПоступлениеНаСчет.Ссылка В(&Ссылки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОперацияПоПлатежнымКартам.Ссылка,
	|	ОперацияПоПлатежнымКартам.Номер,
	|	ОперацияПоПлатежнымКартам.Дата
	|ИЗ
	|	Документ.ОперацияПоПлатежнымКартам КАК ОперацияПоПлатежнымКартам
	|ГДЕ
	|	ОперацияПоПлатежнымКартам.Ссылка В(&Ссылки)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Ссылка)=Тип("ДокументСсылка.ПоступлениеВКассу") Тогда
			Основа = НСтр("ru = 'В кассу '");
		ИначеЕсли ТипЗнч(Выборка.Ссылка)=Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
			Основа = НСтр("ru = 'На счет '");
		ИначеЕсли ТипЗнч(Выборка.Ссылка)=Тип("ДокументСсылка.ОперацияПоПлатежнымКартам") Тогда
			Основа = НСтр("ru = 'Оплата картой '");
		Иначе
			Основа = "";
		КонецЕсли; 
		Представление = Основа+СтрШаблон(
		НСтр("ru = '№%1 от %2'"),
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина),
		Формат(Выборка.Дата, "ДЛФ=D"));
		Соответсвие.Вставить(Выборка.Ссылка, Представление);
	КонецЦикла; 
	
	ПредставленияДокументов = Новый ФиксированноеСоответствие(Соответсвие);
	
КонецПроцедуры

&НаСервере
Процедура РазвернутьНоменклатуру(Идентификатор)
		
	СтрокаДерева = ПланДоставки.НайтиПоИдентификатору(Идентификатор);
	СтрокаДерева.ПолучитьЭлементы().Очистить();
	
	Если ТипЗнч(СтрокаДерева.Группировка)<>Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", СтрокаДерева.Группировка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Заказ КАК ЗаказПокупателя,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
	|	СУММА(ВложенныйЗапрос.Заказано) КАК Заказано,
	|	СУММА(ВложенныйЗапрос.Отгружено) КАК Отгружено
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказПокупателяЗапасы.Ссылка КАК Заказ,
	|		ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|		ЗаказПокупателяЗапасы.Всего КАК Сумма,
	|		ЗаказПокупателяЗапасы.Количество КАК Заказано,
	|		0 КАК Отгружено
	|	ИЗ
	|		Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|	ГДЕ
	|		ЗаказПокупателяЗапасы.Ссылка.Проведен
	|		И ЗаказПокупателяЗапасы.Ссылка = &Заказ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказПокупателя.Ссылка,
	|		""Доставка"",
	|		ЗаказПокупателя.СтоимостьДоставки,
	|		1,
	|		1
	|	ИЗ
	|		Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|	ГДЕ
	|		ЗаказПокупателя.Проведен
	|		И ЗаказПокупателя.СтоимостьДоставки > 0
	|		И ЗаказПокупателя.Ссылка = &Заказ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасходнаяНакладнаяЗапасы.Ссылка.Заказ,
	|		РасходнаяНакладнаяЗапасы.Номенклатура,
	|		0,
	|		0,
	|		РасходнаяНакладнаяЗапасы.Количество
	|	ИЗ
	|		Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|	ГДЕ
	|		РасходнаяНакладнаяЗапасы.Ссылка.Проведен
	|		И РасходнаяНакладнаяЗапасы.Ссылка.Заказ = &Заказ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПриходнаяНакладнаяЗапасы.Ссылка.Заказ,
	|		ПриходнаяНакладнаяЗапасы.Номенклатура,
	|		0,
	|		0,
	|		-ПриходнаяНакладнаяЗапасы.Количество
	|	ИЗ
	|		Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
	|	ГДЕ
	|		ПриходнаяНакладнаяЗапасы.Ссылка.Проведен
	|		И ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|		И ПриходнаяНакладнаяЗапасы.Ссылка.Заказ = &Заказ) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Заказ,
	|	ВложенныйЗапрос.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаНоменклатура = СтрокаДерева.ПолучитьЭлементы().Добавить();
		СтрокаНоменклатура.Группировка = Выборка.Номенклатура;
		СтрокаНоменклатура.СостояниеОтгрузки = Перечисления.СостоянияДоставкиЗаказа.Доставлен;
		СтрокаНоменклатура.МожноМенятьСостояниеОплаты = Ложь;
		СтрокаНоменклатура.МожноМенятьСостояниеОтгрузки = ТипЗнч(Выборка.Номенклатура)=Тип("СправочникСсылка.Номенклатура");
		СтрокаНоменклатура.Сумма = Выборка.Сумма;
	КонецЦикла;
	
	ОбновитьСуммыСтрокиДерева(СтрокаДерева);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСуммыСтрокиДерева(СтрокаДерева)
	
	СтрокаРодителя = СтрокаДерева.ПолучитьРодителя();
	Если СтрокаРодителя<>Неопределено Тогда
		// Строка с товаром
		Если ЗаказДоставлен(СтрокаДерева) И РассчитыватьСуммуКОплате(СтрокаРодителя) Тогда
			СтрокаДерева.КОплате = СтрокаДерева.Сумма;
		Иначе
			СтрокаДерева.КОплате = 0;
		КонецЕсли;
		СтрокаРодителя.КОплате = 0;
		Для каждого ПодСтрока Из СтрокаРодителя.ПолучитьЭлементы() Цикл
			СтрокаРодителя.КОплате = СтрокаРодителя.КОплате+ПодСтрока.КОплате;
		КонецЦикла;
		Если ЗаказДоставлен(СтрокаРодителя) И РассчитыватьСуммуКОплате(СтрокаРодителя) Тогда
			СтрокаРодителя.КОплате = СтрокаРодителя.КОплате-СтрокаРодителя.Аванс;
		КонецЕсли; 
		Если ЗаказОплачен(СтрокаРодителя) И СтрокаРодителя.МожноМенятьСостояниеОплаты Тогда
			СтрокаРодителя.Оплачено = СтрокаРодителя.КОплате;
		Иначе
			СтрокаРодителя.Оплачено = 0;
		КонецЕсли; 
	ИначеЕсли СтрокаДерева.ПолучитьЭлементы().Количество()=0 Тогда
		// Строка заказа без разворота до товаров
		Если ЗаказДоставлен(СтрокаДерева) И РассчитыватьСуммуКОплате(СтрокаДерева)  Тогда
			СтрокаДерева.КОплате = СтрокаДерева.Сумма-СтрокаДерева.Аванс;
		Иначе
			СтрокаДерева.КОплате = 0;
		КонецЕсли;
		Если ЗаказОплачен(СтрокаДерева) И СтрокаДерева.МожноМенятьСостояниеОплаты Тогда
			СтрокаДерева.Оплачено = СтрокаДерева.КОплате;
		Иначе
			СтрокаДерева.Оплачено = 0;
		КонецЕсли; 
	Иначе
		// Строка заказа с разворотом до товаров
		СтрокаДерева.КОплате = 0;
		Для каждого ПодСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
			Если ЗаказДоставлен(ПодСтрока) И РассчитыватьСуммуКОплате(СтрокаДерева)  Тогда
				ПодСтрока.КОплате = ПодСтрока.Сумма;
			Иначе
				ПодСтрока.КОплате = 0;
			КонецЕсли;
			СтрокаДерева.КОплате = СтрокаДерева.КОплате+ПодСтрока.КОплате;
		КонецЦикла;
		Если ЗаказДоставлен(СтрокаДерева) И РассчитыватьСуммуКОплате(СтрокаДерева) Тогда
			СтрокаДерева.КОплате =  СтрокаДерева.КОплате-СтрокаДерева.Аванс;
		КонецЕсли; 
		Если ЗаказОплачен(СтрокаДерева) И СтрокаДерева.МожноМенятьСостояниеОплаты Тогда
			СтрокаДерева.Оплачено = СтрокаДерева.КОплате;
		Иначе
			СтрокаДерева.Оплачено = 0;
		КонецЕсли; 
	КонецЕсли; 	
	
КонецПроцедуры
 
&НаСервере
Функция СостоянияЗаказовЗаполнены()
	
	СохранитьСостояниеДоставлен();
	
	МассивЗаказов = Новый Массив;
	Для каждого СтрокаТабличнойЧасти Из ПланДоставки.ПолучитьЭлементы() Цикл
		Если СтрокаТабличнойЧасти.СостояниеОтгрузкиИзменено Тогда
			МассивЗаказов.Добавить(СтрокаТабличнойЧасти.Группировка);
		КонецЕсли; 
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказы", МассивЗаказов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателя.ВидЗаказа
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&Заказы)
	|	И ЗаказПокупателя.ВидЗаказа.СостояниеДоставлен = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателя.ВидЗаказа";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество()=0 Тогда
		Возврат Истина;
	КонецЕсли; 
	Пока Выборка.Следующий() Цикл
		Если ФормаПараметры.НесколькоВидовЗаказов Тогда
			ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Не задано состояние доставленных заказов для вида %1'"),
			Выборка.ВидЗаказа),
			Выборка.ВидЗаказа,
			"СостояниеДоставлен",,);
		Иначе
			ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не задано состояние доставленных заказов'"),
			Выборка.ВидЗаказа,
			"СостояниеДоставлен",,);
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура СохранитьСостояниеДоставлен()
	
	Если НЕ ФормаПараметры.НесколькоВидовЗаказов 
		И Элементы.СостояниеЗаказовПриДоставке.Видимость 
		И ЗначениеЗаполнено(СостояниеЗаказовПриДоставке)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.ВидыЗаказовПокупателей.Основной, "СостояниеДоставлен")<>СостояниеЗаказовПриДоставке Тогда
		ВидЗаказаОбъект = Справочники.ВидыЗаказовПокупателей.Основной.ПолучитьОбъект();
		ВидЗаказаОбъект.СостояниеДоставлен = СостояниеЗаказовПриДоставке;
		ВидЗаказаОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаказДоставлен(СтрокаДерева)
	
	Возврат СтрокаДерева.СостояниеОтгрузки=ПредопределенноеЗначение("Перечисление.СостоянияДоставкиЗаказа.Доставлен")
		ИЛИ СтрокаДерева.СостояниеОтгрузки=ПредопределенноеЗначение("Перечисление.СостоянияДоставкиЗаказа.ДоставленЧастично");	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаказОплачен(СтрокаДерева)
	
	Возврат СтрокаДерева.СостояниеОплаты=ПредопределенноеЗначение("Перечисление.СостоянияОплатыЗаказа.ОплаченНаличными")
		ИЛИ СтрокаДерева.СостояниеОплаты=ПредопределенноеЗначение("Перечисление.СостоянияОплатыЗаказа.ОплаченКартой");	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаказОплаченНаличными(СтрокаДерева)
	
	Возврат СтрокаДерева.СостояниеОплаты=ПредопределенноеЗначение("Перечисление.СостоянияОплатыЗаказа.ОплаченНаличными");	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаказОплаченКартой(СтрокаДерева)
	
	Возврат СтрокаДерева.СостояниеОплаты=ПредопределенноеЗначение("Перечисление.СостоянияОплатыЗаказа.ОплаченКартой");	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РассчитыватьСуммуКОплате(СтрокаДерева)
	
	Возврат СтрокаДерева.МожноМенятьСостояниеОплаты
		ИЛИ СтрокаДерева.СостояниеОплаты=ПредопределенноеЗначение("Перечисление.СостоянияОплатыЗаказа.НеОплачен");	
	
КонецФункции

#КонецОбласти

#Область ФоновоеЗаданиеПолучениеДанных

&НаКлиенте
Процедура ЗапуститьФоновоеЗадание()
	
	УстановитьДоступностьФормы(Ложь);
	
	Задание = ЗаданиеФормированиеДокументовДоставки();
	Если Задание=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПрогрессФормированияДокументов", ЭтотОбъект); 
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
	Задание,
	Новый ОписаниеОповещения("ОбработатьФормированиеДокументов", ЭтотОбъект),
	ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрогрессФормированияДокументов(Прогресс, ДополнительныеПараметры) Экспорт
	
	Если Прогресс = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Прогресс.Статус <> "Выполняется" ИЛИ Прогресс.Прогресс=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИндикаторВыполнения = Прогресс.Прогресс.Процент;
	ДлительнаяОперацияДокумент = Прогресс.Прогресс.Текст;
	ОбновляемыеРеквизиты = Прогресс.Прогресс.ДополнительныеПараметры;
	Если ТипЗнч(ОбновляемыеРеквизиты)=Тип("Соответствие") Тогда
		Для каждого Стр Из ПланДоставки.ПолучитьЭлементы() Цикл
			СтруктураРеквизитов = ОбновляемыеРеквизиты.Получить(Стр.Группировка);
			Если СтруктураРеквизитов<>Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Стр, СтруктураРеквизитов);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьФормированиеДокументов(Результат, Параметры) Экспорт
	
	УстановитьДоступностьФормы(Истина);
	
	Если Результат.Статус <> "Выполнено" Тогда
		Если Результат.Свойство("КраткоеПредставлениеОшибки") Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
			Результат.КраткоеПредставлениеОшибки);
		КонецЕсли; 
		Элементы.СтраницыСтатусФоновогоЗадания.ТекущаяСтраница = Элементы.ЗаданиеЗавершеноСОшибкой;
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	Если ТипЗнч(РезультатВыполнения)=Тип("Структура") И РезультатВыполнения.Свойство("Ошибки") И ТипЗнч(РезультатВыполнения.Ошибки)=Тип("СписокЗначений") И РезультатВыполнения.Ошибки.Количество()>0 Тогда
		Для каждого Ошибка Из РезультатВыполнения.Ошибки Цикл
			ОбщегоНазначенияКлиент.СообщитьПользователю(
			Ошибка.Представление,
			Ошибка.Значение);
		КонецЦикла;
		Элементы.СтраницыСтатусФоновогоЗадания.ТекущаяСтраница = Элементы.ЗаданиеЗавершеноСОшибкой;
		Возврат;
	КонецЕсли;
	
	ОбработатьФормированиеДокументовСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьФормированиеДокументовСервер()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницыСтатусФоновогоЗадания", "Видимость", Ложь);
	ЗаполнитьДеревоЗаказов();
	
КонецПроцедуры
 
&НаСервере
Функция ЗаданиеФормированиеДокументовДоставки()
	
	Если НЕ СостоянияЗаказовЗаполнены() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницыСтатусФоновогоЗадания", "Видимость", Истина);
	Элементы.СтраницыСтатусФоновогоЗадания.ТекущаяСтраница = Элементы.ЗаданиеВыполняется;
	ДлительнаяОперацияДокумент = "";
	ИндикаторВыполнения = 0;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	ДеревоПлан = РеквизитФормыВЗначение("ПланДоставки");
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ПланДоставки", ДеревоПлан);
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
	"Обработки.ФормированиеДокументовДоставки.СформироватьДокументы",
	ПараметрыЗадания,
	ПараметрыВыполнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьФормы(Доступность)
	
	ТолькоПросмотр = НЕ Доступность;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПланДоставки", "ТолькоПросмотр", НЕ Доступность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаФильтры", "ТолькоПросмотр", НЕ Доступность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСостояниеЗаказов", "ТолькоПросмотр", НЕ Доступность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбновить", "Доступность", Доступность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаФормаКоманднаяПанельЛево", "Доступность", Доступность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаФормаКоманднаяПанельПраво", "Доступность", Доступность);
	
КонецПроцедуры

#КонецОбласти

