
#Область СлужебныеМетоды

&НаКлиенте
Процедура ИскатьСтрокуВТаблице(ИскатьВперед)
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не задана строка поиска'"));
		ТекущийЭлемент = Элементы.СтрокаПоиска;
		
		Возврат;
		
	КонецЕсли;
	
	НайденнаяОбласть = ТабличныйДокумент.НайтиТекст(СокрЛП(СтрокаПоиска), Элементы.ТабличныйДокумент.ТекущаяОбласть, , , , ИскатьВперед, Истина);
	Если НайденнаяОбласть = Неопределено Тогда
		
		НайденнаяОбласть = ТабличныйДокумент.НайтиТекст(СокрЛП(СтрокаПоиска), , , , , , Истина);
		Если НайденнаяОбласть = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru = 'В прайс-листе искомый текст не найден...'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "СтрокаПоиска");
			ТекущийЭлемент = Элементы.СтрокаПоиска;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущийЭлемент = Элементы.ТабличныйДокумент;
	
	МассивОбластей = Новый Массив;
	МассивОбластей.Добавить(НайденнаяОбласть);
	Элементы.ТабличныйДокумент.УстановитьВыделенныеОбласти(МассивОбластей);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистНеактуален()
	
	ОтображениеСостояния = Элементы.ТабличныйДокумент.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	ОтображениеСостояния.Картинка = БиблиотекаКартинок.ВниманиеВВидеТреугольника_32;
	ОтображениеСостояния.Текст = НСтр("ru = 'Возможно данные прайс-листа изменились. 
		|Рекомендуется повторно сформировать прайс-лист.'");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаписьОЦенеСуществует(Знач ДанныеРасшифровки, КэшЗначений)
	
	КлючЗаписи = Новый Структура("Период, ВидЦен, Номенклатура, Характеристика");
	
	Если ТипЗнч(ДанныеРасшифровки) <> Тип("Структура") Тогда
		
		ДанныеРасшифровки = Новый Структура;
		
	КонецЕсли;
	
	Если НЕ ДанныеРасшифровки.Свойство("Период", КлючЗаписи.Период) Тогда
		
		КлючЗаписи.Период = ?(ЗначениеЗаполнено(КэшЗначений.ПериодЦен), КэшЗначений.ПериодЦен, ТекущаяДатаСеанса());
		
	КонецЕсли;
	
	Если НЕ ДанныеРасшифровки.Свойство("ВидЦен", КлючЗаписи.ВидЦен) Тогда
		
		КлючЗаписи.ВидЦен = КэшЗначений.ВидЦен;
		
	КонецЕсли;
	
	Если НЕ ДанныеРасшифровки.Свойство("Номенклатура", КлючЗаписи.Номенклатура) Тогда
		
		КлючЗаписи.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		
	КонецЕсли;
	
	Если НЕ ДанныеРасшифровки.Свойство("Характеристика", КлючЗаписи.Характеристика) Тогда
		
		КлючЗаписи.Характеристика =  Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат ЦенообразованиеСервер.ЗаписьОЦенеСуществует(КлючЗаписи);
	
КонецФункции

&НаКлиенте
// Процедура открывает запись реистра.
//
Процедура ОткрытьФормуЗаписиРегистра(ДанныеРасшифровки)
	
	КлючЗаписи = ЗаписьОЦенеСуществует(ДанныеРасшифровки, КэшЗначений);
	
	Если КлючЗаписи.ЗаписьСуществует Тогда
		
		КлючЗаписи.Удалить("ЗаписьСуществует");
		
		ПараметрыМассив = Новый Массив;
		ПараметрыМассив.Добавить(КлючЗаписи);
		
		КлючЗаписиРегистра = Новый("РегистрСведенийКлючЗаписи.ЦеныНоменклатуры", ПараметрыМассив);
		ОткрытьФорму("РегистрСведений.ЦеныНоменклатуры.ФормаЗаписи", Новый Структура("Ключ", КлючЗаписиРегистра));
		
	Иначе
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", КлючЗаписи);
		
		Если ЗначениеЗаполнено(КэшЗначений.ПериодЦен) Тогда
			
			ПараметрыОткрытия.Вставить("ПериодЗаписи", КэшЗначений.ПериодЦен);
			
		КонецЕсли;
		
		ОткрытьФорму("РегистрСведений.ЦеныНоменклатуры.ФормаЗаписи", ПараметрыОткрытия, ЭтаФорма);
		
	КонецЕсли; 
	
КонецПроцедуры // ОткрытьФормуЗаписиРегистра()

&НаКлиенте
Процедура ОбработатьРасшифровкуЯчейки(ДанныеРасшифровки)
	
	Если ДанныеРасшифровки.Свойство("ВидЦен")
		И ДанныеРасшифровки.Свойство("Номенклатура") Тогда
		
		ОткрытьФормуЗаписиРегистра(ДанныеРасшифровки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовуюЗаписьОЦене(ДанныеРасшифровки)
	
	ОткрытьФормуЗаписиРегистра(ДанныеРасшифровки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗаписьОЦене(ДанныеРасшифровки)
	
	ОткрытьФормуЗаписиРегистра(ДанныеРасшифровки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьЗаписьОЦене(ДанныеРасшифровки)
	
	Если ТипЗнч(ДанныеРасшифровки) = Тип("Структура") 
		И ДанныеРасшифровки.Свойство("Номенклатура") Тогда
		
		Характеристика = Неопределено;
		ДанныеРасшифровки.Свойство("Характеристика", Характеристика);
		ДобавитьИсключение(ДанныеРасшифровки.Номенклатура, Характеристика, ПрайсЛист);
		
		ПрайсЛистНеактуален();
		
	ИначеЕсли ТипЗнч(ДанныеРасшифровки) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ДобавитьИсключение(ДанныеРасшифровки, Неопределено, ПрайсЛист);
		
	Иначе
		
		ТекстСообщения = Нстр("ru ='Для исключения позиции из прайс-листа необходимо указать номенклатуру.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьИмяСохраняемогоФайла()
	
	РабочаяДата = СтрЗаменить(Формат(ТекущаяДатаСеанса(), "ДЛФ=DT"), ":", "");
	РабочаяДата = СтрЗаменить(РабочаяДата, ".", "");
	РабочаяДата = СтрЗаменить(РабочаяДата, " ", "_");
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ПрайсЛист.Наименование + РабочаяДата);
	
КонецФункции

&НаСервере
Процедура ДобавитьИсключение(Номенклатура, Характеристика, ПрайсЛист)
	
	РегистрыСведений.ИсключенияПрайсЛистов.ДобавитьИсключение(Номенклатура, Характеристика, ПрайсЛист);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьНастройкуОсновнойФормыПрайсЛистов()
	
	Элементы.ЭтоОсновнаяФормаПрайсЛистов.Пометка = НЕ Элементы.ЭтоОсновнаяФормаПрайсЛистов.Пометка;
	ЗначениеНастройки = Перечисления.ОсновнаяФормаПрайсЛиста[?(Элементы.ЭтоОсновнаяФормаПрайсЛистов.Пометка, "ФормированиеПрайсЛистов", "СписокПрайсЛистов")];
	УправлениеНебольшойФирмойСервер.УстановитьНастройкуПользователя(ЗначениеНастройки, "ОсновнаяФормаПрайсЛиста");
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПечатныеФормы(ЭтоПрограммноеСохранениеБольшогоПрайсЛиста)
	
	КэшЗначений.ЭтоПрограммноеСохранениеБольшогоПрайсЛиста = ЭтоПрограммноеСохранениеБольшогоПрайсЛиста;
	
	ОбъектыПечати = Новый СписокЗначений;
	ОбъектыПечати.Добавить(ПрайсЛист);
	
	ПараметрыСохранения = Новый Структура;
	ПараметрыСохранения.Вставить("ОбъектыПечати", ОбъектыПечати);
	
	ОткрытьФорму("ОбщаяФорма.СохранениеПечатнойФормы", ПараметрыСохранения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПечатныеФормыПоПочте()
	
	ОбработчикРезультата = Новый ОписаниеОповещения("ОтправитьПечатныеФормыПоПочтеПродолжение", ЭтотОбъект);
	РаботаСПочтовымиСообщениямиКлиент.ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОбработчикРезультата);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПечатныеФормыПоПочтеПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИмяПрайсЛиста = СформироватьИмяСохраняемогоФайла();
	
	Вложение = Новый Структура;
	Вложение.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилище(ТабличныйДокумент, УникальныйИдентификатор));
	Вложение.Вставить("Представление", ИмяПрайсЛиста);
	
	ПараметрыОтправки = РаботаСПочтовымиСообщениямиКлиент.ПараметрыОтправкиПисьма();
	ПараметрыОтправки.Тема = НСтр("ru ='Прайс-лист '") + ?(ЗначениеЗаполнено(КэшЗначений.Организация), КэшЗначений.ОрганизацияНаименование, "");
	ПараметрыОтправки.Вложения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Вложение);
	РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТабличныеДокументыВоВременноеХранилище(НастройкиСохранения)
	Перем ЗаписьZipФайла, ИмяАрхива;
	
	Результат 					= Новый Массив;
	ИспользованныеИменаФайлов	= Новый Соответствие;
	
	ИмяПрайсЛиста = СформироватьИмяСохраняемогоФайла(); 
	
	// подготовка архива
	Если НастройкиСохранения.УпаковатьВАрхив Тогда
		
		ИмяАрхива = ПолучитьИмяВременногоФайла();
		ЗаписьZipФайла = Новый ЗаписьZipФайла(ИмяАрхива);
		
	КонецЕсли;
	
	// подготовка временной папки
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	
	ВыбранныеФорматыСохранения = НастройкиСохранения.ФорматыСохранения;
	ПереводитьИменаФайловВТранслит = НастройкиСохранения.ПереводитьИменаФайловВТранслит;
	ТаблицаФорматов = УправлениеПечатью.НастройкиФорматовСохраненияТабличногоДокумента();
	
	// сохранение печатных форм
	Если КэшЗначений.ЭтоПрограммноеСохранениеБольшогоПрайсЛиста Тогда
		
		РезультатВыполнения = ПолучитьИзВременногоХранилища(КэшЗначений.ПараметрыДлительнойОперации.РезультатФормирования.АдресРезультата);
		ПечатнаяФорма = РезультатВыполнения.ТабличныйДокумент;
		
		//Отображение большого прайс-листа на клиенте занимает много времени.
		//Пользователь естественно не дожидается и закрывает клиент (вкладку браузера).
		//При этом сеанс, а следовательно и его сеансовые данные не удалятся.
		//Из-за этого получаем огромный массив данных сеанса, которые мешают платформе провести "самоочистку".
		//Это приводит к тому, что в разделе с сеансовыми данным заканчивается свободное место и база падает.
		УдалитьИзВременногоХранилища(КэшЗначений.ПараметрыДлительнойОперации.РезультатФормирования.АдресРезультата);
		
	Иначе
		
		ПечатнаяФорма = ТабличныйДокумент;
		
	КонецЕсли;
	
	Если ПечатнаяФорма.Защита Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ПечатнаяФорма.ВысотаТаблицы = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ПереводитьИменаФайловВТранслит Тогда
		
		ИмяПрайсЛиста = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(ИмяПрайсЛиста);
		
	КонецЕсли;
	
	Для Каждого ТипФайла Из ВыбранныеФорматыСохранения Цикл
		
		Если ТипЗнч(ТипФайла) = Тип("Строка") Тогда
			
			ТипФайла = ТипФайлаТабличногоДокумента[ТипФайла];
			
		КонецЕсли;
		
		НастройкиФормата = ТаблицаФорматов.НайтиСтроки(Новый Структура("ТипФайлаТабличногоДокумента", ТипФайла))[0];
		
		ИмяФайла = ИмяПрайсЛиста + "." + НастройкиФормата.Расширение;
		ПолноеИмяФайла = УникальноеИмяФайла(ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ИмяФайла);
		ПечатнаяФорма.Записать(ПолноеИмяФайла, ТипФайла);
		
		Если ТипФайла = ТипФайлаТабличногоДокумента.HTML Тогда
			ВставитьКартинкиВHTML(ПолноеИмяФайла);
		КонецЕсли;
		
		Если ЗаписьZipФайла <> Неопределено Тогда
			
			ЗаписьZipФайла.Добавить(ПолноеИмяФайла);
			
		Иначе
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
			ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтотОбъект.УникальныйИдентификатор);
			
			ОписаниеФайла = Новый Структура;
			ОписаниеФайла.Вставить("Представление", 			ИмяПрайсЛиста);
			ОписаниеФайла.Вставить("ИмяБезРасширения",			ИмяПрайсЛиста);
			ОписаниеФайла.Вставить("РасширениеБезТочки",		НастройкиФормата.Расширение);
			ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);
			
			Если ТипФайла = ТипФайлаТабличногоДокумента.ANSITXT Тогда
				ОписаниеФайла.Вставить("Кодировка", "windows-1251");
			КонецЕсли;
			Результат.Добавить(ОписаниеФайла);
			
		КонецЕсли;
	КонецЦикла;
	
	// если архив подготовлен, записываем и помещаем его во временное хранилище
	Если ЗаписьZipФайла <> Неопределено Тогда
		
		ЗаписьZipФайла.Записать();
		
		ФайлАрхива = Новый Файл(ИмяАрхива);
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяАрхива);
		ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтотОбъект.УникальныйИдентификатор);
		
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("Представление", 			ИмяПрайсЛиста);
		ОписаниеФайла.Вставить("ИмяБезРасширения",			ИмяПрайсЛиста);
		ОписаниеФайла.Вставить("РасширениеБезТочки",		"zip");
		ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);
		
		Результат.Добавить(ОписаниеФайла);
		
		УдалитьФайлы(ИмяАрхива);
		
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременнойПапки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВставитьКартинкиВHTML(ИмяФайлаHTML)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Прочитать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	ТекстHTML = ТекстовыйДокумент.ПолучитьТекст();
	
	ФайлHTML = Новый Файл(ИмяФайлаHTML);
	
	ИмяПапкиКартинок = ФайлHTML.ИмяБезРасширения + "_files";
	ПутьКПапкеКартинок = СтрЗаменить(ФайлHTML.ПолноеИмя, ФайлHTML.Имя, ИмяПапкиКартинок);
	
	// ожидается, что в папке будут только картинки
	ФайлыКартинок = НайтиФайлы(ПутьКПапкеКартинок, "*");
	
	Для Каждого ФайлКартинки Из ФайлыКартинок Цикл
		КартинкаТекстом = Base64Строка(Новый ДвоичныеДанные(ФайлКартинки.ПолноеИмя));
		КартинкаТекстом = "data:image/" + Сред(ФайлКартинки.Расширение,2) + ";base64," + Символы.ПС + КартинкаТекстом;
		
		ТекстHTML = СтрЗаменить(ТекстHTML, ИмяПапкиКартинок + "\" + ФайлКартинки.Имя, КартинкаТекстом);
	КонецЦикла;
		
	ТекстовыйДокумент.УстановитьТекст(ТекстHTML);
	ТекстовыйДокумент.Записать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПечатныеФормыВПапку(СписокФайловВоВременномХранилище, Знач Папка = "")
	
	#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
		Для Каждого ФайлДляЗаписи Из СписокФайловВоВременномХранилище Цикл
			ПолучитьФайл(ФайлДляЗаписи.АдресВоВременномХранилище, ФайлДляЗаписи.ИмяБезРасширения + "." + ФайлДляЗаписи.РасширениеБезТочки);
		КонецЦикла;
		Возврат;
	#КонецЕсли
	
	Папка = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Папка);
	Для Каждого ФайлДляЗаписи Из СписокФайловВоВременномХранилище Цикл
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ФайлДляЗаписи.АдресВоВременномХранилище);
		ДвоичныеДанные.Записать(УникальноеИмяФайла(Папка + ФайлДляЗаписи.ИмяБезРасширения + "." + ФайлДляЗаписи.РасширениеБезТочки));
	КонецЦикла;
	
	Состояние(НСтр("ru = 'Сохранение успешно завершено'"), , НСтр("ru = 'в папку:'") + " " + Папка);
	
КонецПроцедуры

&НаСервере
Функция ПрисоединитьПечатныеФормыКОбъекту(ФайлыВоВременномХранилище, ОбъектДляПрисоединения)
	
	Результат = Новый Массив;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		
		Для Каждого Файл Из ФайлыВоВременномХранилище Цикл
			
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("Автор", 						Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", 				ОбъектДляПрисоединения);
			ПараметрыФайла.Вставить("ИмяБезРасширения", 			Файл.ИмяБезРасширения);
			ПараметрыФайла.Вставить("РасширениеБезТочки", 			Файл.РасширениеБезТочки);
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное",	ТекущаяДата());
			
			Результат.Добавить(РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, Файл.АдресВоВременномХранилище));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УникальноеИмяФайла(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	ИмяБезРасширения = Файл.ИмяБезРасширения;
	Расширение = Файл.Расширение;
	Папка = Файл.Путь;
	
	Счетчик = 1;
	Пока Файл.Существует() Цикл
		Счетчик = Счетчик + 1;
		Файл = Новый Файл(Папка + ИмяБезРасширения + " (" + Счетчик + ")" + Расширение);
	КонецЦикла;
	
	Возврат Файл.ПолноеИмя;
	
КонецФункции

&НаСервере
Процедура ОбновитьДополнитьКэшЗначений()
	
	КэшЗначений.Вставить("Организация", 			ПрайсЛист.Организация);
	КэшЗначений.Вставить("ОрганизацияНаименование", Строка(ПрайсЛист.Организация));
	КэшЗначений.Вставить("ВыводитьДатуФормирования",ПрайсЛист.ВыводитьДатуФормирования);
	КэшЗначений.Вставить("ДатаФормирования",		ПрайсЛист.ДатаФормирования);
	КэшЗначений.Вставить("ПериодЦен",				ПрайсЛист.ПериодЦен);
	КэшЗначений.Вставить("ВидЦен",					?(ПрайсЛист.ВидыЦен.Количество()> 0, ПрайсЛист.ВидыЦен[0].ВидЦен, Справочники.ВидыЦен.Оптовая));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКомандуКонтекстногоМеню(ИмяКоманды)
	
	ВыделанныеОбласти = Элементы.ТабличныйДокумент.ПолучитьВыделенныеОбласти();
	Если ВыделанныеОбласти.Количество() > 0 Тогда
		
		ДанныеРасшифровки = ВыделанныеОбласти[0].Расшифровка;
		
		Если ИмяКоманды = "Добавить" Тогда
			
			ДобавитьНовуюЗаписьОЦене(ДанныеРасшифровки);
			
		КонецЕсли;
		
		Если ИмяКоманды = "Изменить"
			И ТипЗнч(ДанныеРасшифровки) = Тип("Структура") Тогда
			
			ИзменитьЗаписьОЦене(ДанныеРасшифровки); // поведение отличается от выбора ячейки в 2 клика!
			
		КонецЕсли;
		
		Если ИмяКоманды = "Исключить" Тогда
			
			ИсключитьЗаписьОЦене(ДанныеРасшифровки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ДлительнаяОперация

&НаКлиенте
Процедура СформироватьПрайсЛистНаКлиенте()
	
	//СтандартныеПодсистемы.ОценкаПроизводительности
	КэшЗначений.УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "ФормированиеПрайсЛиста");
	//Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	СформироватьПрайсЛистНаСервере();
	ПослеФормированияПрайсЛиста();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеФормированияПрайсЛиста()
	
	Если КэшЗначений.ПараметрыДлительнойОперации.РезультатФормирования = Неопределено Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	Если КэшЗначений.ПараметрыДлительнойОперации.РезультатФормирования.Статус <> "Выполняется" Тогда 
		
		ОбработатьРезультатВыполненияФоновогоЗадания(КэшЗначений.ПараметрыДлительнойОперации.РезультатФормирования, Неопределено);
		Возврат;
		
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатВыполненияФоновогоЗадания", ЭтотОбъект, Неопределено);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения		= НСтр("ru ='Формирование прайс-листа.'");
	ПараметрыОжидания.ВыводитьОкноОжидания	= Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(КэшЗначений.ПараметрыДлительнойОперации.РезультатФормирования, Обработчик, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатВыполненияФоновогоЗадания(РезультатФормирования, ДополнительныеПараметры) Экспорт
	
	Если РезультатФормирования = Неопределено Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	КэшЗначений.ПараметрыДлительнойОперации.РезультатФормирования = РезультатФормирования;
	
	Заголовок = НСтр("ru ='Формирование прайс-листа'");
	Если КэшЗначений.ПараметрыДлительнойОперации.РезультатФормирования.Статус = "Выполнено" Тогда 
		
		РезультатДлительнойОперацииВТабличныйДокументФормы();
		Если КэшЗначений.ПараметрыДлительнойОперации.СохранитьВФайл Тогда
			
			ОтображениеСостоянияТабличногоДокумента(1);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияПредупрежденияОРазмереПрайсЛиста", ЭтотОбъект);
			ОткрытьФорму("Обработка.ФормированиеПрайсЛистов.Форма.ФормаПредупреждения", Неопределено, ЭтаФорма, , , , ОписаниеОповещения);
			
		Иначе
			
			ОтображениеСостоянияТабличногоДокумента(2);
			
			ТекстОповещения = НСтр("ru ='Прайс-лист сформирован.'");
			ПоказатьОповещениеПользователя(ТекстОповещения, , Заголовок);
			
		КонецЕсли;
		
	ИначеЕсли КэшЗначений.ПараметрыДлительнойОперации.РезультатФормирования.Статус = "Ошибка" Тогда
		
		ОтображениеСостоянияТабличногоДокумента(0);
		ПоказатьОповещениеПользователя(КэшЗначений.ПараметрыДлительнойОперации.РезультатФормирования.КраткоеПредставлениеОшибки, , Заголовок);
		
	КонецЕсли;
	
	//СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(КэшЗначений.УИДЗамера);
	//Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеСостоянияТабличногоДокумента(Состояние)
	
	Если Состояние = 0 Тогда
		
		ОтображениеСостояния = Элементы.ТабличныйДокумент.ОтображениеСостояния;
		ОтображениеСостояния.Видимость = Истина;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
		ОтображениеСостояния.Картинка = БиблиотекаКартинок.ВниманиеВВидеТреугольника_32;
		ОтображениеСостояния.Текст = НСтр("ru = 'Ошибка формирования прайс-листа.'");
		
	ИначеЕсли Состояние = 1 Тогда
		
		ОтображениеСостояния = Элементы.ТабличныйДокумент.ОтображениеСостояния;
		ОтображениеСостояния.Видимость = Истина;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
		ОтображениеСостояния.Картинка = БиблиотекаКартинок.ВниманиеВВидеТреугольника_32;
		ОтображениеСостояния.Текст = НСтр("ru = 'Данные прайс-листа слишком велики (вероятно, из-за использования картинок).
			|Документ был сохранен локально или присоединен к карточке прайс-листа.'");
		
	Иначе
		
		ОтображениеСостояния = Элементы.ТабличныйДокумент.ОтображениеСостояния;
		ОтображениеСостояния.Видимость = Ложь;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияПредупрежденияОРазмереПрайсЛиста(Результат, ДополнительныеПараметры) Экспорт
	
	СохранитьПечатныеФормы(Истина);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПрайсЛистНаСервере()
	
	Если ЗначениеЗаполнено(КэшЗначений.ПараметрыДлительнойОперации.ИдентификаторЗадания) Тогда
		
		ДлительныеОперации.ОтменитьВыполнениеЗадания(КэшЗначений.ПараметрыДлительнойОперации.ИдентификаторЗадания);
		КэшЗначений.ПараметрыДлительнойОперации.ИдентификаторЗадания = Неопределено;
		
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	КэшЗначений.ПараметрыДлительнойОперации.СохранитьВФайл = Ложь;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ПрайсЛист", ПрайсЛист);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Формирование прайс-листа'");
	ПараметрыВыполнения.ЗапуститьВФоне				= Истина;
	
	ИмяМетода = "Обработки.ФормированиеПрайсЛистов.СформироватьПЛ";
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыПроцедуры, ПараметрыВыполнения);
	
	КэшЗначений.ПараметрыДлительнойОперации.РезультатФормирования	= РезультатФоновогоЗадания;
	КэшЗначений.ПараметрыДлительнойОперации.ИдентификаторЗадания	= РезультатФоновогоЗадания.ИдентификаторЗадания;
	
КонецПроцедуры

&НаСервере
Процедура РезультатДлительнойОперацииВТабличныйДокументФормы()
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(КэшЗначений.ПараметрыДлительнойОперации.РезультатФормирования.АдресРезультата);
	
	РазмерКартинокMb = Окр(РезультатВыполнения.РазмерКартинокБайт/1048576, 0);
	Если РазмерКартинокMb >= КэшЗначений.ПредельноДопустимыРазмерКартинокМб Тогда
		
		КэшЗначений.ПараметрыДлительнойОперации.СохранитьВФайл = Истина;
		
	Иначе
		
		ТабличныйДокумент = РезультатВыполнения.ТабличныйДокумент;
		
		//Отображение большого прайс-листа на клиенте занимает много времени.
		//Пользователь естественно не дожидается и закрывает клиент (вкладку браузера).
		//При этом сеанс, а следовательно и его сеансовые данные не удалятся.
		//Из-за этого получаем огромный массив данных сеанса, которые мешают платформе провести "самоочистку".
		//Это приводит к тому, что в разделе с сеансовыми данным заканчивается свободное место и база падает.
		УдалитьИзВременногоХранилища(КэшЗначений.ПараметрыДлительнойОперации.РезультатФормирования.АдресРезультата);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ЭтоОсновнаяФормаПрайсЛистов.Пометка = (УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяФормаПрайсЛиста") = Перечисления.ОсновнаяФормаПрайсЛиста.ФормированиеПрайсЛистов);
	
	Если Параметры.Свойство("ОткрытьОсновнойРабочийПрайсЛист") Тогда
		
		ПрайсЛист = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнойРабочийПрайсЛист");
		
	Иначе
		
		Параметры.Свойство("ПрайсЛист", ПрайсЛист);
		
	КонецЕсли;
	
	АвтоматическиФормироватьОбновлятьПрайсЛист = (ЗначениеЗаполнено(ПрайсЛист) И УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("АвтоматическиФормироватьОбновлятьПрайсЛист"));
	
	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("АвтоматическиФормироватьОбновлятьПрайсЛист",	АвтоматическиФормироватьОбновлятьПрайсЛист);
	КэшЗначений.Вставить("ПредельноДопустимыРазмерКартинокМб", 			500);
	КэшЗначений.Вставить("ЭтоПрограммноеСохранениеБольшогоПрайсЛиста",	Ложь);
	КэшЗначений.Вставить("УИДЗамера",									Неопределено);
	КэшЗначений.Вставить("ПараметрыДлительнойОперации",					Новый Структура);
	КэшЗначений.ПараметрыДлительнойОперации.Вставить("РезультатФормирования",	Неопределено);
	КэшЗначений.ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания",	"");
	КэшЗначений.ПараметрыДлительнойОперации.Вставить("СохранитьВФайл",			Ложь);
	ОбновитьДополнитьКэшЗначений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ПрайсЛист) Тогда
		
		СформироватьПрайсЛистНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаВыбора.
//
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.СохранениеПечатнойФормы") Тогда
		
		Если ВыбранноеЗначение <> Неопределено 
			И ВыбранноеЗначение <> КодВозвратаДиалога.Отмена Тогда
			
			ФайлыВоВременномХранилище = ПоместитьТабличныеДокументыВоВременноеХранилище(ВыбранноеЗначение);
			Если ВыбранноеЗначение.ВариантСохранения = "СохранитьВПапку" Тогда
				
				СохранитьПечатныеФормыВПапку(ФайлыВоВременномХранилище, ВыбранноеЗначение.ПапкаДляСохранения);
				
			ИначеЕсли ВыбранноеЗначение.ВариантСохранения = "Присоединить" Тогда
				
				ЗаписанныеОбъекты = ПрисоединитьПечатныеФормыКОбъекту(ФайлыВоВременномХранилище, ВыбранноеЗначение.ОбъектДляПрикрепления);
				Если ЗаписанныеОбъекты.Количество() > 0 Тогда
					
					ОповеститьОбИзменении(ТипЗнч(ЗаписанныеОбъекты[0]));
					
				КонецЕсли;
				
				Для Каждого ЗаписанныйОбъект Из ЗаписанныеОбъекты Цикл
					
					Оповестить("Запись_Файл", Новый Структура, ЗаписанныйОбъект);
					
					ТекстИсточник = ОбсужденияКлиент.HTMLСсылка(ЗаписанныйОбъект);
					ОбсужденияВызовСервера.ДобавитьСообщение(НСтр("ru = 'Присоединен файл '")+ТекстИсточник, ВыбранноеЗначение.ОбъектДляПрикрепления, Истина);
					
				КонецЦикла;
				
				ПоказатьОповещениеПользователя(, , НСтр("ru = 'Сохранение завершено'"), БиблиотекаКартинок.Информация32);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаЦена" Тогда
		
		Если КэшЗначений.АвтоматическиФормироватьОбновлятьПрайсЛист Тогда
			
			СформироватьПрайсЛистНаКлиенте();
			
		Иначе
			
			ПрайсЛистНеактуален();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		Если Расшифровка.Свойство("ЭтоХарактеристика") Тогда
			
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаОбъекта", Новый Структура("Ключ", Расшифровка.Характеристика), ЭтаФорма);
			
		Иначе
			
			СтандартнаяОбработка = Ложь;
			ОбработатьРасшифровкуЯчейки(Расшифровка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистПриИзменении(Элемент)
	
	ОбновитьДополнитьКэшЗначений();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИскатьСтрокуВТаблице(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)
	
	СформироватьПрайсЛистНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоОсновнаяФормаПрайсЛистов(Команда)
	
	ИзменитьНастройкуОсновнойФормыПрайсЛистов();
	
КонецПроцедуры

// Процедура - обработчик команды Сохранить.
//
&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьПечатныеФормы(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ОтправитьПечатныеФормыПоПочте();
	
КонецПроцедуры

&НаКлиенте
Процедура Добавить(Команда)
	
	ОбработатьКомандуКонтекстногоМеню("Добавить");
	
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	
	ОбработатьКомандуКонтекстногоМеню("Изменить");
	
КонецПроцедуры

&НаКлиенте
Процедура Исключить(Команда)
	
	ОбработатьКомандуКонтекстногоМеню("Исключить");
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключенияПрайсЛиста(Команда)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПрайсЛист", ПрайсЛист);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("РегистрСведений.ИсключенияПрайсЛистов.ФормаСписка", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетНеИспользуемаяНоменклатура(Команда)
	
	ОткрытьФорму("Обработка.ФормированиеПрайсЛистов.Форма.ФормаНеИспользуемаяНоменклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ИскатьНазад(Команда)
	
	ИскатьСтрокуВТаблице(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИскатьВперед(Команда)
	
	ИскатьСтрокуВТаблице(Истина);
	
КонецПроцедуры

#КонецОбласти

