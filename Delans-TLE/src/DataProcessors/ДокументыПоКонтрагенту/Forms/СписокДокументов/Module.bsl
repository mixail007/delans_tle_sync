
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		Элементы.ПодменюПродать.Видимость = РольДоступна("ДобавлениеИзменениеПодсистемыПродажи");
		Элементы.ПодменюКупить.Видимость = РольДоступна("ДобавлениеИзменениеПодсистемыЗакупки");
	КонецЕсли;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ИмяФормыНастройкаСоставаВидовДокументов = ОбработкаОбъект.Метаданные().ПолноеИмя()
			+ ".Форма.НастройкаСоставаВидовДокументов";
	
	УстановитьКлючНастроек();
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Договор", Договор) Тогда
		ИмяКритерияОтбора = "ДокументыПоДоговору";
		Заголовок = НСтр("ru = 'Документы по договору'");
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы,"ПродатьКупить","Видимость", Ложь);
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВидДоговора");
		Если ВидДоговора = Перечисления.ВидыДоговоров.СПокупателем Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы,"ПодменюКупитьПоДоговору","Видимость", Ложь);
		ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоров.СПоставщиком Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы,"ПодменюПродатьПоДоговору","Видимость", Ложь);
		КонецЕсли;
	Иначе
		ИмяКритерияОтбора = "ДокументыПоКонтрагенту";
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы,"ПродатьКупитьПоДоговору","Видимость", Ложь);
	КонецЕсли;
	
	ЗаполнитьТаблицуЗапросов(ОбработкаОбъект, ИмяКритерияОтбора);
	
	ОбновитьСписокВидовДокументов();
	
	ВосстановитьНастройки();
	
	ОбновитьТекстЗапроса();
	
	ПрименитьПараметрыКоманды();
	
	УстановитьВидимостьИДоступностьРМК();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВыполнитьОбработкуИзмененияДанных();
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДокументов

&НаКлиенте
Процедура ТаблицаДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Документ);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьСоставДокументов(Команда)

	РедактироватьСоставДокументов();

КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	ОчиститьСообщения();
	ОбновитьТаблицуДокументовНаСервере();
	ВыполнитьОбработкуИзмененияДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)

	ТекущиеДанные = Элементы.ТаблицаДокументов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда

		ПоказатьЗначение(Неопределено, ТекущиеДанные.Документ);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура SMS(Команда)
	
	СоздатьСобытиеПоКонтрагенту("СообщениеSMS");
	
КонецПроцедуры

&НаКлиенте
Процедура ЛичнаяВстреча(Команда)
	
	СоздатьСобытиеПоКонтрагенту("ЛичнаяВстреча");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьСобытие(Команда)
	СоздатьСобытиеПоКонтрагенту("Запись");
КонецПроцедуры

&НаКлиенте
Процедура Прочее(Команда)
	
	СоздатьСобытиеПоКонтрагенту("Прочее");
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонныйЗвонок(Команда)
	
	СоздатьСобытиеПоКонтрагенту("ТелефонныйЗвонок");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектронноеПисьмо(Команда)
	
	СоздатьСобытиеПоКонтрагенту("ЭлектронноеПисьмо");
	
КонецПроцедуры

&НаКлиенте
Процедура Создать(Команда)
	
	СписокДокументовДляСозданияНового = ПолучитьСписокДокументовДляСозданияНового();
	СписокДокументовДляСозданияНового.ПоказатьВыборЭлемента(
		Новый ОписаниеОповещения("СоздатьПродолжение", ЭтотОбъект),
		НСтр("ru='Выбор типа документа'"),
		?(Элементы.ТаблицаДокументов.ТекущиеДанные = Неопределено, Неопределено, ТипЗнч(Элементы.ТаблицаДокументов.ТекущиеДанные.Документ))
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекстВопроса = "";
	
	Если ЗначениеЗаполнено(Договор) И Не ПроверитьКорректностьДоговора(ТекстВопроса, Результат.Значение) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьЗавершение", ЭтотОбъект, Результат);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Возврат;
		
	КонецЕсли;
	
	СоздатьЗавершение( КодВозвратаДиалога.Да ,Результат);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПараметрыФормыСоздаваемогоДокумента(ДополнительныеПараметры.Значение);
	
	ФормаОбъекта = "Документ." + ИмяМетаданныхПоВидуДокумента(ДополнительныеПараметры.Значение) + ".ФормаОбъекта";
	ОткрытьФорму(ФормаОбъекта, ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКорректностьДоговора(ТекстСообщения, ВидДокумента)
	Отказ = Ложь;
	Справочники.ДоговорыКонтрагентов.ПроверитьСоответствиеДоговораУсловиямДокумента(
		ТекстСообщения, 
		Договор,
		Документы[ИмяМетаданныхПоВидуДокумента(ВидДокумента)].ПустаяСсылка(), 
		Договор.Организация, 
		Договор.Владелец, 
		Отказ);
	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		ТекстСообщения = ТекстСообщения + "
		| Хотите продолжить?";
	КонецЕсли;
	
	Возврат Не Отказ;
КонецФункции

&НаКлиенте
Процедура Скопировать(Команда)
	
	ДокументСсылка = Элементы.ТаблицаДокументов.ТекущиеДанные.Документ;
	ФормаОбъекта = "Документ." + ИмяОбъектаПоСсылке(ДокументСсылка) + ".ФормаОбъекта";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначениеКопирования", ДокументСсылка);
	
	ОткрытьФорму(ФормаОбъекта, ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	ПоказатьЗначение(Неопределено, Элементы.ТаблицаДокументов.ТекущиеДанные.Документ);
КонецПроцедуры

&НаКлиенте
Процедура ПометкаУдаления(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаДокументов.ТекущиеДанные;
	
	ТекущаяСсылка = ТекущиеДанные.Документ;
	
	ПометкаУдаленияУстановлена = ТекущиеДанные.ПометкаУдаления;
	
	Если ПометкаУдаленияУстановлена Тогда
		ТекстВопроса = НСтр("ru='Снять с ""%1"" пометку на удаление?'");
	Иначе
		ТекстВопроса = НСтр("ru='Пометить ""%1"" на удаление?'");
	КонецЕсли;
	
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", Строка(ТекущаяСсылка)); 
	
	ПараметрыВопроса = Новый Структура("ТекущаяСсылка, ПометкаУдаленияУстановлена", ТекущаяСсылка, ПометкаУдаленияУстановлена);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьПометкуУдаленияПослеВопроса", ЭтотОбъект, ПараметрыВопроса);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуУдаленияПослеВопроса(Результат, ПараметрыВопроса) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСсылка = ПараметрыВопроса.ТекущаяСсылка;
	
	УстановитьСнятьПометкуУдаления(ТекущаяСсылка, ПараметрыВопроса.ПометкаУдаленияУстановлена);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСнятьПометкуУдаления(СсылкаНаОбъект, ПометкаУдаления)
	
	Попытка
		ДокументОбъект = СсылкаНаОбъект.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(НЕ ПометкаУдаления);
		СтрокаДанных = ТаблицаДокументов.НайтиПоИдентификатору(Элементы.ТаблицаДокументов.ТекущаяСтрока);
		СтрокаДанных.ИдентификаторКартинки = ?(ПометкаУдаления, 2, 1);
		СтрокаДанных.ПометкаУдаления = НЕ ПометкаУдаления; 
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось %Операция пометку удаления документа ""%1""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Строка(СсылкаНаОбъект));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Операция", ?(ПометкаУдаления, "снять", "установить"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьКоличествоДокументовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДополнитьСписок();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	
	ОбновитьТаблицуДокументовНаСервере(ВсеСтрокиОтображены);
	
КонецПроцедуры

&НаКлиенте
Процедура Провести(Команда)
	
	ВыполнитьГрупповоеПроведение(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаПроведения(Команда)
	
	ВыполнитьГрупповоеПроведение(РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтборЗаказыИСчетаПриИзменении(Элемент)
	
	УстановитьОтборТипСобытия(ОтборЗаказыИСчета, ОтборНакладные, ОтборОплаты, ОтборСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНакладныеПриИзменении(Элемент)
	
	УстановитьОтборТипСобытия(ОтборЗаказыИСчета, ОтборНакладные, ОтборОплаты, ОтборСобытия);

КонецПроцедуры

&НаКлиенте
Процедура ОтборОплатыПриИзменении(Элемент)
	
	УстановитьОтборТипСобытия(ОтборЗаказыИСчета, ОтборНакладные, ОтборОплаты, ОтборСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСобытияПриИзменении(Элемент)
	
	УстановитьОтборТипСобытия(ОтборЗаказыИСчета, ОтборНакладные, ОтборОплаты, ОтборСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныйОтборПриИзменении(Элемент)
	Если ПроизвольныйОтбор Тогда
		ОтборЗаказыИСчета 	= Ложь;
		ОтборНакладные		= Ложь;
		ОтборОплаты			= Ложь;
		ОтборСобытия		= Ложь;
	Иначе
		УстановитьОтборТипСобытия(Истина, Истина, Истина, Истина);
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Настройки

&НаСервере
Процедура ВосстановитьНастройки()

	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ДокументыПоКонтрагенту", КлючНастроек);
	Если ТипЗнч(ЗначениеНастроек) = Тип("Соответствие") Тогда
		
		Контрагент = ЗначениеНастроек.Получить("Параметр");

		ЗначениеИзНастройки = ЗначениеНастроек.Получить("СписокВидовДокументов");
		Если ТипЗнч(ЗначениеИзНастройки) = Тип("СписокЗначений") Тогда
			ПрименитьНастройкиКСпискуВидовДокументов(ЗначениеИзНастройки);
		КонецЕсли;
		
		ОтборЗаказыИСчета	= ЗначениеНастроек.Получить("ОтборЗаказыИСчета");
		ОтборНакладные		= ЗначениеНастроек.Получить("ОтборНакладные");
		ОтборОплаты			= ЗначениеНастроек.Получить("ОтборОплаты");
		ОтборСобытия		= ЗначениеНастроек.Получить("ОтборСобытия");
		ПроизвольныйОтбор	= ЗначениеНастроек.Получить("ПроизвольныйОтбор");
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()

	Настройки = Новый Соответствие;
	Настройки.Вставить("Параметр"				, Контрагент);
	Настройки.Вставить("СписокВидовДокументов"	, СписокВидовДокументов);
	Настройки.Вставить("ОтборЗаказыИСчета"		, ОтборЗаказыИСчета);
	Настройки.Вставить("ОтборНакладные"			, ОтборНакладные);
	Настройки.Вставить("ОтборОплаты"			, ОтборОплаты);
	Настройки.Вставить("ОтборСобытия"			, ОтборСобытия);
	Настройки.Вставить("ПроизвольныйОтбор"		, ПроизвольныйОтбор);

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ДокументыПоКонтрагенту", КлючНастроек, Настройки);

КонецПроцедуры

&НаСервере
Процедура ПрименитьПараметрыКоманды()

	Если Параметры.Свойство("Отбор") Тогда

		Параметры.Отбор.Свойство("Контрагент", Контрагент);
		Параметры.Отбор.Свойство("Договор", Договор);
	
	КонецЕсли;

	Если Параметры.Свойство("СформироватьПриОткрытии") И Параметры.СформироватьПриОткрытии Тогда

		ОбновитьТаблицуДокументовНаСервере();

	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) И НЕ ЗначениеЗаполнено(Договор) Тогда
		Элементы.Контрагент.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьКлючНастроек()

	Если Параметры.Свойство("КлючНастроек") И Не ПустаяСтрока(Параметры.КлючНастроек) Тогда

		КлючНастроек = Параметры.КлючНастроек;

	Иначе

		КлючНастроек = "БезКонтрагента";

	КонецЕсли;

	КлючНастроек = КлючНастроек + "_" + Пользователи.ТекущийПользователь().УникальныйИдентификатор();

	Если Параметры.Свойство("Отбор") Тогда
		Если Параметры.Отбор.Свойство("Контрагент") Тогда
		
			КлючНастроек = КлючНастроек + "_" + Параметры.Отбор.Контрагент.УникальныйИдентификатор();
		ИначеЕсли Параметры.Отбор.Свойство("Договор") Тогда
			КлючНастроек = КлючНастроек + "_" + Параметры.Отбор.Договор.УникальныйИдентификатор();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПреобразоватьВЗначениеНастройки(СписокТиповПоГруппам)
	
	Результат = СписокВидовДокументов.Скопировать();
		
	Для Каждого СтрокаВида Из Результат Цикл
		Если СписокТиповПоГруппам.НайтиПоЗначению(СтрокаВида.Значение) <> Неопределено Тогда
			СтрокаВида.Пометка = Истина;
		Иначе
			СтрокаВида.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ДополнитьСписок()
	ЗаполнитьСтрокиИзВременногоХранилища();
	ВыполнитьОбработкуИзмененияДанных();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяОбъектаПоСсылке(Ссылка)
	Возврат Ссылка.Метаданные().Имя;
КонецФункции

&НаКлиенте
Процедура СоздатьСобытиеПоКонтрагенту(ИмяТипаСобытия)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ТипСобытия", ПредопределенноеЗначение("Перечисление.ТипыСобытий." + ИмяТипаСобытия));
	ЗначенияЗаполнения.Вставить("Контрагент", Контрагент);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокТипов(ЗаказыИСчета, Накладные, Оплаты, События)
	
	ВсеТипы = НЕ Макс(ЗаказыИСчета, Накладные, Оплаты, События); 
	
	СписокТипов = Новый СписокЗначений;
	
	Если ЗаказыИСчета ИЛИ ВсеТипы Тогда
		СписокТипов.Добавить("ЗаказПокупателя");
		СписокТипов.Добавить("ЗаказПоставщику");
		СписокТипов.Добавить("СчетНаОплату");
		СписокТипов.Добавить("СчетНаОплатуПоставщика");
	КонецЕсли;
	
	Если Накладные ИЛИ ВсеТипы Тогда
		СписокТипов.Добавить("АвансовыйОтчет");
		СписокТипов.Добавить("АктВыполненныхРабот");
		СписокТипов.Добавить("ВводНачальныхОстатков");
		СписокТипов.Добавить("Доверенность");
		СписокТипов.Добавить("ДополнительныеРасходы");
		СписокТипов.Добавить("ОтчетКомиссионера");
		СписокТипов.Добавить("ОтчетКомитенту");
		СписокТипов.Добавить("ОтчетОПереработке");
		СписокТипов.Добавить("ОтчетПереработчика");
		СписокТипов.Добавить("ПередачаВА");
		СписокТипов.Добавить("ПеремещениеЗапасов");
		СписокТипов.Добавить("ПриходнаяНакладная");
		СписокТипов.Добавить("ПрочиеРасходы");
		СписокТипов.Добавить("РасходнаяНакладная");
		СписокТипов.Добавить("СчетФактура");
		СписокТипов.Добавить("СчетФактураПолученный");
	КонецЕсли;
	
	Если Оплаты ИЛИ ВсеТипы Тогда
		СписокТипов.Добавить("Взаимозачет");
		СписокТипов.Добавить("ДоговорКредитаИЗайма");
		СписокТипов.Добавить("НачисленияПоКредитамИЗаймам");
		СписокТипов.Добавить("ОперацияПоПлатежнымКартам");
		СписокТипов.Добавить("ПлатежноеПоручение");
		СписокТипов.Добавить("ПоступлениеВКассу");
		СписокТипов.Добавить("ПоступлениеДСПлан");
		СписокТипов.Добавить("ПоступлениеНаСчет");
		СписокТипов.Добавить("РасходДСПлан");
		СписокТипов.Добавить("РасходИзКассы");
		СписокТипов.Добавить("РасходСоСчета");
		СписокТипов.Добавить("СверкаВзаиморасчетов");
	КонецЕсли;
	
	Если События ИЛИ ВсеТипы Тогда
		СписокТипов.Добавить("ЗаданиеНаРаботу");
		СписокТипов.Добавить("МассоваяРассылка");
		СписокТипов.Добавить("ОтзывСогласияНаОбработкуПерсональныхДанных");
		СписокТипов.Добавить("Событие");
		СписокТипов.Добавить("СогласиеНаОбработкуПерсональныхДанных");
	КонецЕсли;
	
	Возврат СписокТипов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСоответствиеТипов()
	
	СоответствиеТипов = Новый Соответствие;
	
	СоответствиеТипов.Вставить("ЗаказПокупателя"		, "ОтборЗаказыИСчета");
	СоответствиеТипов.Вставить("ЗаказПоставщику"		, "ОтборЗаказыИСчета");
	СоответствиеТипов.Вставить("СчетНаОплату"			, "ОтборЗаказыИСчета");
	СоответствиеТипов.Вставить("СчетНаОплатуПоставщика"	, "ОтборЗаказыИСчета");

	СоответствиеТипов.Вставить("АвансовыйОтчет"			, "ОтборНакладные");
	СоответствиеТипов.Вставить("АктВыполненныхРабот"	, "ОтборНакладные");
	СоответствиеТипов.Вставить("ВводНачальныхОстатков"	, "ОтборНакладные");
	СоответствиеТипов.Вставить("Доверенность"			, "ОтборНакладные");
	СоответствиеТипов.Вставить("ДополнительныеРасходы"	, "ОтборНакладные");
	СоответствиеТипов.Вставить("ОтчетКомиссионера"		, "ОтборНакладные");
	СоответствиеТипов.Вставить("ОтчетКомитенту"			, "ОтборНакладные");
	СоответствиеТипов.Вставить("ОтчетОПереработке"		, "ОтборНакладные");
	СоответствиеТипов.Вставить("ОтчетПереработчика"		, "ОтборНакладные");
	СоответствиеТипов.Вставить("ПередачаВА"				, "ОтборНакладные");
	СоответствиеТипов.Вставить("ПеремещениеЗапасов"		, "ОтборНакладные");
	СоответствиеТипов.Вставить("ПриходнаяНакладная"		, "ОтборНакладные");
	СоответствиеТипов.Вставить("ПриходнаяНакладная"		, "ОтборНакладные");
	СоответствиеТипов.Вставить("ПрочиеРасходы"			, "ОтборНакладные");
	СоответствиеТипов.Вставить("РасходнаяНакладная"		, "ОтборНакладные");
	СоответствиеТипов.Вставить("СчетФактура"			, "ОтборНакладные");
	СоответствиеТипов.Вставить("СчетФактураПолученный"	, "НОтборНакладныеакладные");
	
	СоответствиеТипов.Вставить("Взаимозачет"			, "ОтборОплаты");
	СоответствиеТипов.Вставить("ДоговорКредитаИЗайма"	, "ОтборОплаты");
	СоответствиеТипов.Вставить("НачисленияПоКредитамИЗаймам", "ОтборОплаты");
	СоответствиеТипов.Вставить("ОперацияПоПлатежнымКартам"	, "ОтборОплаты");
	СоответствиеТипов.Вставить("ПлатежноеПоручение"			, "ОтборОплаты");
	СоответствиеТипов.Вставить("ПоступлениеВКассу"		, "ОтборОплаты");
	СоответствиеТипов.Вставить("ПоступлениеДСПлан"		, "ОтборОплаты");
	СоответствиеТипов.Вставить("ПоступлениеНаСчет"		, "ОтборОплаты");
	СоответствиеТипов.Вставить("РасходДСПлан"			, "ОтборОплаты");
	СоответствиеТипов.Вставить("РасходИзКассы"			, "ОтборОплаты");
	СоответствиеТипов.Вставить("РасходСоСчета"			, "ОтборОплаты");
	СоответствиеТипов.Вставить("СверкаВзаиморасчетов"	, "ОтборОплаты");

	СоответствиеТипов.Вставить("ЗаданиеНаРаботу"		, "ОтборСобытия");
	СоответствиеТипов.Вставить("МассоваяРассылка"		, "ОтборСобытия");
	СоответствиеТипов.Вставить("ОтзывСогласияНаОбработкуПерсональныхДанных"	, "ОтборСобытия");
	СоответствиеТипов.Вставить("Событие"				, "ОтборСобытия");
	СоответствиеТипов.Вставить("СогласиеНаОбработкуПерсональныхДанных"		, "ОтборСобытия");
	
		
	Возврат СоответствиеТипов;
	
КонецФункции

&НаКлиенте
Процедура УстановитьОтборТипСобытия(Знач ОтборЗаказыИСчета, Знач ОтборНакладные,Знач ОтборОплаты, Знач ОтборСобытия)
	
	СписокТиповПоГруппам = ПолучитьСписокТипов(ОтборЗаказыИСчета, ОтборНакладные, ОтборОплаты, ОтборСобытия);
	ЗначениеНастройки = ПреобразоватьВЗначениеНастройки(СписокТиповПоГруппам);
	ПрименитьНастройкиКСпискуВидовДокументов(ЗначениеНастройки);
	
	ВыполнитьОбработкуИзмененияДанных();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЗапросов(ОбработкаОбъект, ИмяКритерияОтбора)

	ДополнительныеДокументы = Новый Массив;
	// В массив помещаются дополнительные документы, которых нет в критерии отбора
	// ДополнительныеДокументы.Добавить(Метаданные.Документы.РасходныйОрдер);

	ПоляШапки = Новый Массив;
	ПоляШапки.Добавить("СуммаДокумента");
	ПоляШапки.Добавить("Валюта");
	ПоляШапки.Добавить("ВидОперации");
	ПоляШапки.Добавить("Автор");
	ПоляШапки.Добавить("Ответственный");
	ПоляШапки.Добавить("Организация");
	ПоляШапки.Добавить("Комментарий");

	ОбработкаОбъект.ЗаполнитьТаблицуЗапросов(ТаблицаЗапросов, 
											ИмяКритерияОтбора,
											ДополнительныеДокументы,
											ПоляШапки,
											,
											,
											АдресТаблицыСоответствия, 
											УникальныйИдентификатор, 
											АдресВременногоХранилища);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекстЗапроса()

	ВремТекстЗапросаВт     = "";
	ВремТекстЗапросаПолный = "";
	ВремТекстЗапросаДанные = "";
	Для Каждого СтрокаТаб Из ТаблицаЗапросов.НайтиСтроки(Новый Структура("Использовать", Истина)) Цикл

		ВремТекстЗапросаВт = ВремТекстЗапросаВт + ?(ПустаяСтрока(ВремТекстЗапросаВт), "", " ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС)
				+ СтрокаТаб.ТекстЗапроса;

		ВремТекстЗапросаДанные = ВремТекстЗапросаДанные + ?(ПустаяСтрока(ВремТекстЗапросаДанные), "", " ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС)
				+ СтрокаТаб.ТекстЗапросаВыборка;

	КонецЦикла;

	ВремТекстЗапросаПолный = ВремТекстЗапросаВт; 
	
	Позиция = СтрНайти(ВРЕГ(ВремТекстЗапросаПолный), ВРег("//%ПОМЕСТИТЬ%"));
	Если Позиция > 0 Тогда

		ВремТекстЗапросаПолный = ЛЕВ(ВремТекстЗапросаПолный, Позиция-1) + " ПОМЕСТИТЬ ВтТаблицаОтбора " + Сред(ВремТекстЗапросаПолный, Позиция + СтрДлина("//%ПОМЕСТИТЬ%"));

	КонецЕсли;

	Позиция = СтрНайти(ВРЕГ(ВремТекстЗапросаДанные), ВРег("Выбрать"));
	Если Позиция > 0 Тогда

		ВремТекстЗапросаДанные = "ВЫБРАТЬ РАЗРЕШЕННЫЕ " + Сред(ВремТекстЗапросаДанные, Позиция + СтрДлина("Выбрать")) + 
		"УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Документ
		|";

	КонецЕсли;

	ТекстЗапросаФильтр = "Выбрать %ПорцияДанных% Документ, Дата Поместить ВтТаблицаОтбора ИЗ (" + ВремТекстЗапросаВт + ") Как ВЗ Упорядочить По Дата Убыв";
	ТекстЗапросаФильтр = СтрЗаменить(ТекстЗапросаФильтр, "%ПорцияДанных%", "Первые " + ПорцияДанных());
	
	ТекстЗапросаФильтрПолный = ВремТекстЗапросаПолный ;
	
	ТекстЗапросаПоДокументам = ВремТекстЗапросаДанные;

КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакИспользованияВидаДокумента()

	Для Каждого СтрокаТаб Из ТаблицаЗапросов Цикл

		ЭлементСписка = СписокВидовДокументов.НайтиПоЗначению(СтрокаТаб.ИмяДокумента);
		Если ЭлементСписка <> Неопределено Тогда
			СтрокаТаб.Использовать = ЭлементСписка.Пометка;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВидовДокументов()

	СписокВидовДокументов.Очистить();
	Для Каждого Строка Из ТаблицаЗапросов Цикл
		СписокВидовДокументов.Добавить(Строка.ИмяДокумента, Строка.СинонимДокумента, Строка.Использовать);
	КонецЦикла;

	СписокВидовДокументов.СортироватьПоЗначению(НаправлениеСортировки.Возр);

КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройкиКСпискуВидовДокументов(ЗначениеНастройки)

	ПереформироватьЗапрос = Ложь;
	Для Каждого Элемент Из ЗначениеНастройки Цикл

		ЭлементСписка = СписокВидовДокументов.НайтиПоЗначению(Элемент.Значение);
		Если ЭлементСписка <> Неопределено И ЭлементСписка.Пометка <> Элемент.Пометка Тогда

			ЭлементСписка.Пометка = Элемент.Пометка;
			ПереформироватьЗапрос = Истина;

		КонецЕсли;

	КонецЦикла;

	Если ПереформироватьЗапрос Тогда

		УстановитьПризнакИспользованияВидаДокумента();

		ОбновитьТекстЗапроса();

		СохранитьНастройки();
		
		ОбновитьТаблицуДокументовНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСоставДокументов()

	Результат = Неопределено;

	ОткрытьФорму(ИмяФормыНастройкаСоставаВидовДокументов,
			Новый Структура("СписокВидовДокументов", СписокВидовДокументов),,,,, 
			Новый ОписаниеОповещения("РедактироватьСоставДокументовЗавершение", ЭтотОбъект), 
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСоставДокументовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("СписокЗначений") Тогда
		ПрименитьНастройкиКСпискуВидовДокументов(Результат);
	КонецЕсли;
	
	ВыполнитьОбработкуИзмененияДанных();
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуДокументовНаСервере(ВсеСтроки = Ложь)
	
	Если ПустаяСтрока(ТекстЗапросаПоДокументам) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Необходимо настроить состав документов'"),,"ЭтаФорма");
		Возврат;
	КонецЕсли;
	
	ВсеСтрокиОтображены = Ложь;

	Запрос = Новый Запрос(ТекстЗапросаФильтр);
	Если ЗначениеЗаполнено(Договор) Тогда
		Запрос.УстановитьПараметр("Параметр", Договор);
	Иначе
		Запрос.УстановитьПараметр("Параметр", Контрагент);
	КонецЕсли;
	Запрос.МенеджерВременныхТаблиц  = Новый МенеджерВременныхТаблиц;
	
	УстановитьОграниченияПоВидамОпераций(Запрос);
	
	Если ВсеСтроки Тогда
		Запрос.Текст = ТекстЗапросаФильтрПолный;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	Запрос.Текст = ТекстЗапросаПоДокументам;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ТаблицаДокументов.Загрузить(Результат);
	
	ПараметрыЗапроса = Запрос.Параметры;

КонецПроцедуры

&НаСервере
Процедура УстановитьОграниченияПоВидамОпераций(Запрос)
	
	Если НЕ РольДоступна("ПолныеПрава") Тогда
		
		ТаблицаСоответствия = ПолучитьИзВременногоХранилища(АдресТаблицыСоответствия);
		
		ДоступныеПрофили = ПолучитьДоступныеПрофилиПользователя();
		
		УточняемыеОбъекты = ПолучитьУточняемыеТипыДокументов();
		
		СоответствиеПараметров = Новый Соответствие;
		
		Для Каждого ДоступныйПрофиль ИЗ ДоступныеПрофили Цикл
			
			Для Каждого УточняемыйОбъект Из УточняемыеОбъекты Цикл
				
				РезультатПоиска = ТаблицаСоответствия.НайтиСтроки(
					Новый Структура("Профиль,Объект", ДоступныйПрофиль, УточняемыйОбъект.Значение));
				
				МассивДопустимыхВидовОпераций = СоответствиеПараметров[УточняемыйОбъект.Ключ];
				
				Если МассивДопустимыхВидовОпераций = Неопределено Тогда
					МассивДопустимыхВидовОпераций = Новый Массив;
				КонецЕсли;
				
				Если РезультатПоиска.Количество() Тогда
					
					Для Каждого СтрокаВидОперации Из РезультатПоиска Цикл
						Если МассивДопустимыхВидовОпераций.Найти(СтрокаВидОперации.ВидОперации) = Неопределено Тогда
							МассивДопустимыхВидовОпераций.Добавить(СтрокаВидОперации.ВидОперации);
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				СоответствиеПараметров.Вставить(УточняемыйОбъект.Ключ, МассивДопустимыхВидовОпераций);
				
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого ПараметрЗапроса Из СоответствиеПараметров Цикл 
			Запрос.УстановитьПараметр("МассивДопустимыхВидовОпераций" + ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗадание(ПараметрыЗадания, ИмяПроцедуры)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
	ИмяПроцедуры,
	ПараметрыЗадания,
	ПараметрыВыполнения);

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьФоновоеЗадание(ПараметрыЗадания)
	
	Задание = ПолучитьЗадание(ПараметрыЗадания, "Обработки.ДокументыПоКонтрагенту.ЗапуститьФормированиеСпискаДокументовПоКонтрагенту");
	Если Задание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
	Задание,
	Новый ОписаниеОповещения("ЗаполнитьАдресВременногоХранилища", ЭтотОбъект),
	ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАдресВременногоХранилища(Результат, Параметры) Экспорт
	
	АдресВременногоХранилища = "";
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	АдресВременногоХранилища = Результат.АдресРезультата;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиИзВременногоХранилища()
	
	Если ЗначениеЗаполнено(АдресВременногоХранилища) Тогда
		ВременноеХранилище = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		Если ВременноеХранилище.Количество() = 0 Тогда
			ОбновитьТаблицуДокументовНаСервере(Истина);
			Возврат;
		КонецЕсли;
	Иначе
		ОбновитьТаблицуДокументовНаСервере(Истина);
		Возврат;
	Конецесли;

	ТаблицаДокументов.Загрузить(ВременноеХранилище);
	
	ВсеСтрокиОтображены = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДоступныеПрофилиПользователя()
	
	Пользователь = ПараметрыСеанса.АвторизованныйПользователь;
	
	Если УправлениеДоступомСлужебный.УпрощенныйИнтерфейсНастройкиПравДоступа() Тогда
		
		Запрос = Новый Запрос;
		
		МассивИсключений = Новый Массив;
		// ИдентификаторПрофиляРедактированиеЦенДокументов
		МассивИсключений.Добавить(УправлениеДоступомПереопределяемый.ПрофильРедактированиеЦенДокументов().УИД);
		// ИдентификаторПрофиляРедактированиеНоменклатуры
		МассивИсключений.Добавить(УправлениеДоступомПереопределяемый.ПрофильРедактированиеНоменклатуры().УИД);
		// ИдентификаторПрофиляВозвратыОтПокупателей
		МассивИсключений.Добавить(УправлениеДоступомПереопределяемый.ПрофильВозвратыОтПокупателей().УИД);
		// ИдентификаторПрофиляВозвратыПоставщикам
		МассивИсключений.Добавить(УправлениеДоступомПереопределяемый.ПрофильВозвратыПоставщикам().УИД);
		// ИдентификаторПрофиляСинхронизацияДанных
		МассивИсключений.Добавить(УправлениеДоступомПереопределяемый.ПрофильСинхронизацияДанных().УИД);
		// СебестоимостьВОтчетеПродажи
		МассивИсключений.Добавить(УправлениеДоступомПереопределяемый.ПрофильСебестоимостьВОтчетеПродажи().УИД);
		
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		Запрос.УстановитьПараметр("ОтборПрофилейТолькоТекущегоПользователя", Истина);
		Запрос.УстановитьПараметр("МассивИсключений", МассивИсключений);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Профили.ИдентификаторПоставляемыхДанных
		|ИЗ
		|	Справочник.ПрофилиГруппДоступа КАК Профили
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
		|		ПО Профили.Ссылка = ГруппыДоступа.Профиль
		|			И (НЕ(ГруппыДоступа.Пользователь <> &Пользователь))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|		ПО (ГруппыДоступа.Ссылка = ГруппыДоступаПользователи.Ссылка)
		|ГДЕ
		|	НЕ Профили.ПометкаУдаления
		|	И НЕ Профили.ИдентификаторПоставляемыхДанных В (&МассивИсключений)
		|	И НЕ(&ОтборПрофилейТолькоТекущегоПользователя = ИСТИНА
		|				И ГруппыДоступаПользователи.Ссылка ЕСТЬ NULL)
		|	И ГруппыДоступа.Пользователь = &Пользователь";
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПрофилиГруппДоступа.ИдентификаторПоставляемыхДанных
		|ИЗ
		|	Справочник.ГруппыДоступа КАК ГруппыДоступа
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
		|		ПО ГруппыДоступа.Профиль = ПрофилиГруппДоступа.Ссылка
		|ГДЕ
		|	ГруппыДоступа.Пользователь = &Пользователь";
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	ОписанияПрофилей = Справочники.ПрофилиГруппДоступа.ОписаниеПоставляемыхПрофилей().ОписанияПрофилей;
	
	ДоступныеПрофили = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		ОписаниеПрофиля = ОписанияПрофилей.Получить(Строка(Выборка.ИдентификаторПоставляемыхДанных));
		Если ОписаниеПрофиля = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДоступныеПрофили.Добавить(ОписаниеПрофиля.Имя);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДоступныеПрофили;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьУточняемыеТипыДокументов()
	
	Результат = Новый Соответствие;
	Результат.Вставить("РасходнаяНакладная", Тип("ДокументСсылка.РасходнаяНакладная"));
	Результат.Вставить("ПриходнаяНакладная", Тип("ДокументСсылка.ПриходнаяНакладная"));
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьОбработкуИзмененияДанных()
	
	Если НЕ ВсеСтрокиОтображены Тогда
		ВсеСтрокиОтображены = ТаблицаДокументов.Количество() < ПорцияДанных();
	КонецЕсли;
	
	Если НЕ ВсеСтрокиОтображены Тогда
		ЗапуститьФоновоеЗадание(Новый Структура(
			"ТекстЗапросаФильтрПолный, 
			|ТекстЗапросаПоДокументам, 
			|ПараметрыЗапроса, 
			|ИдентификаторФормы",
			ТекстЗапросаФильтрПолный,
			ТекстЗапросаПоДокументам,
			ПараметрыЗапроса,
			УникальныйИдентификатор));
	КонецЕсли;
	
	НастроитьВидимостьЭлементов();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы()
	
	Если ПроизвольныйОтбор Тогда
		Элементы.НастроитьСоставДокументов.Доступность  = Истина;
		Элементы.ОтборЗаказыИСчета.Доступность			= Ложь;
		Элементы.ОтборНакладные.Доступность				= Ложь;
		Элементы.ОтборОплаты.Доступность				= Ложь;
		Элементы.ОтборСобытия.Доступность				= Ложь;
	Иначе
		Элементы.НастроитьСоставДокументов.Доступность 	= Ложь;
		Элементы.ОтборЗаказыИСчета.Доступность			= Истина;
		Элементы.ОтборНакладные.Доступность				= Истина;
		Элементы.ОтборОплаты.Доступность				= Истина;
		Элементы.ОтборСобытия.Доступность				= Истина;
	КонецЕсли;
	
	
	СоответствиеТипов = ПолучитьСоответствиеТипов();
	СоответствиеРезультат = Новый Соответствие;
	
	Для Каждого Строка Из ТаблицаЗапросов Цикл
		ИмяЭлементаФормы = СоответствиеТипов[Строка.ИмяДокумента];
		Если ИмяЭлементаФормы <> Неопределено
			И СоответствиеРезультат[ИмяЭлементаФормы] = Неопределено Тогда
			СоответствиеРезультат.Вставить(ИмяЭлементаФормы, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыФормы = Новый Массив;
	ЭлементыФормы.Добавить("ОтборСобытия");
	ЭлементыФормы.Добавить("ОтборЗаказыИСчета");
	ЭлементыФормы.Добавить("ОтборНакладные");
	ЭлементыФормы.Добавить("ОтборОплаты");
	
	Для Каждого ЭлементФормы ИЗ ЭлементыФормы Цикл
		Элементы[ЭлементФормы].Видимость = СоответствиеРезультат[ЭлементФормы] <> Неопределено;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Договор) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы,"ОтборСобытия","Видимость", Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПорцияДанных()
	Возврат 100;
КонецФункции

&НаКлиенте
Процедура НастроитьВидимостьЭлементов()
	
	Если ВсеСтрокиОтображены Тогда
		Элементы.НадписьКоличествоДокументов.Видимость = Ложь;
	Иначе
		Элементы.НадписьКоличествоДокументов.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступностьРМК()
	
	Если УправлениеНебольшойФирмойУправлениеДоступомПовтИсп.ЕстьПрофильРабочееМестоКассира() Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы,"ПодменюСобытия","Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыСоздаваемогоДокумента(ВидДокумента)
	
	ПараметрыФормы = Новый Структура;
	
	РазрешеныПродажи = РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ДобавлениеИзменениеПодсистемыПродажи");
	РазрешеныЗакупки = РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ДобавлениеИзменениеПодсистемыЗакупки");
	
	ТипУточняемогоДокумента = ПолучитьУточняемыеТипыДокументов().Получить(ВидДокумента);
	Если ТипУточняемогоДокумента = Тип("ДокументСсылка.РасходнаяНакладная") И НЕ РазрешеныПродажи Тогда
		ПараметрыФормы.Вставить("ВидОперацииВозврат", Истина);
	ИначеЕсли ТипУточняемогоДокумента = Тип("ДокументСсылка.ПриходнаяНакладная") И НЕ РазрешеныЗакупки Тогда
		ПараметрыФормы.Вставить("ВидОперацииВозврат", Истина);
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Контрагент", Контрагент);
	Если ЗначениеЗаполнено(Договор) Тогда
		ЗначенияЗаполнения.Вставить("Договор", Договор);
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор,"Владелец, Организация");
		ЗначенияЗаполнения.Вставить("Контрагент", РеквизитыДоговора.Владелец);
		ЗначенияЗаполнения.Вставить("Организация", РеквизитыДоговора.Организация);
	КонецЕсли;
	Если ВидДокумента = "ЗаказНаряд" Тогда
		ЗначенияЗаполнения.Вставить("ВидОперации", Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСписокДокументовДляСозданияНового()
	
	ДокументыИсключение = Новый Массив;
	ДокументыИсключение.Добавить("Событие");
	ДокументыИсключение.Добавить("ЧекККМВозврат");
	
	СписокРезультат = Новый СписокЗначений;
	Для каждого ЭлементСписка Из СписокВидовДокументов Цикл
		Если ДокументыИсключение.Найти(ЭлементСписка.Значение) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СписокРезультат.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	СписокРезультат.Добавить("ЗаказНаряд", НСтр("ru='Заказ-наряд'"));
	СписокРезультат.СортироватьПоЗначению();
	
	Возврат СписокРезультат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяМетаданныхПоВидуДокумента(ВидДокумента)
	
	Если ВидДокумента = "ЗаказНаряд" Тогда
		Возврат "ЗаказПокупателя";
	Иначе
		Возврат ВидДокумента;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьГрупповоеПроведение(РежимЗаписи)
	
	ОчиститьСообщения();
	
	ВыбранныеДокументы = Новый Массив;
	Для каждого Эл Из Элементы.ТаблицаДокументов.ВыделенныеСтроки Цикл
		ВыбранныеДокументы.Добавить(ТаблицаДокументов.НайтиПоИдентификатору(Эл).Документ);
	КонецЦикла;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ВыбранныеДокументы", ВыбранныеДокументы);
	ПараметрыЗадания.Вставить("РежимЗаписи", РежимЗаписи);
	
	Задание = ПолучитьЗадание(ПараметрыЗадания, "Обработки.ДокументыПоКонтрагенту.ГрупповоеПроведениеДокументов");
	Если Задание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		Задание,
		Новый ОписаниеОповещения("ВыполнитьГрупповоеПроведениеЗавершение", ЭтотОбъект),
		ПараметрыОжидания
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьГрупповоеПроведениеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Статус <> "Выполнено" Тогда
		Возврат
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.АдресРезультата) Тогда
		РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		ПоказатьОповещениеПользователя(
			СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru=';Изменен %1 документ;;Изменено %1 документа;Изменено %1 документов;Изменено %1 документа'"),
				РезультатВыполнения.ИзмененоДокументов
			));
		
		Для каждого Тип Из РезультатВыполнения.ИзмененныеТипы Цикл
			ОповеститьОбИзменении(Тип);
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьТаблицуДокументовНаСервере(ВсеСтрокиОтображены);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Поиск

&НаКлиенте
Функция ИнвертироватьСтроку(Строка)
	
	СтрокаКириллица = "йцукенгшщзхъфывапролджэячсмитьбю.ё";
	СтрокаЛатиница = "qwertyuiop[]asdfghjkl;'zxcvbnm,./`";
	Результат = "";
	Строка = НРег(Строка);
	Для Сч = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Сч, 1);
		Позиция = Найти(СтрокаЛатиница, Символ);
		Если Позиция <> 0 Тогда
			Результат = Результат + Сред(СтрокаКириллица, Позиция, 1);
		Иначе
			Позиция = Найти(СтрокаКириллица, Символ);
			Если Позиция <> 0 Тогда
				Результат = Результат + Сред(СтрокаЛатиница, Позиция, 1);
			Иначе
				Результат = Результат + Символ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьМассивПоиска(Знач ИскомоеЗначение)
	
	Результат = Новый Массив;
	
	Если ИскомоеЗначение <> Неопределено Тогда
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"%"," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"["," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"]"," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"_"," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,""""," ");
		ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"¶"," ");
		ИскомоеЗначение = СокрЛП(ИскомоеЗначение);
		ИскомоеЗначение = ИскомоеЗначение;
		
		ИскомоеЗначение = ИскомоеЗначение + " ";
		Пока Найти(ИскомоеЗначение,"  ") <> 0 Цикл
			ИскомоеЗначение = СтрЗаменить(ИскомоеЗначение,"  "," ");
		КонецЦикла;
		
		Позиция = Найти(ИскомоеЗначение," ");
		
		Пока Позиция <> 0 Цикл
			
			ИсходноеЗначение = Лев(ИскомоеЗначение,Позиция - 1);
			ИнвертированноеЗначение = ИнвертироватьСтроку(ИсходноеЗначение);
			
			Результат.Добавить(Новый Структура("ИсходноеЗначение,ИнвертированноеЗначение", ВРег(ИсходноеЗначение), ВРег(ИнвертированноеЗначение)));
			
			ИскомоеЗначение = Сред(ИскомоеЗначение, Позиция + 1);
			Позиция = Найти(ИскомоеЗначение," ");
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)

	Если НЕ ВсеСтрокиОтображены Тогда
		ДополнитьСписок();
	КонецЕсли;
	
	ИскомоеЗначение = "" + ЭтаФорма.СтрокаПоиска;
	
	Если ПустаяСтрока(ИскомоеЗначение) Тогда
		Элементы.ТаблицаДокументов.ОтборСтрок = Неопределено;
	Иначе
		МассивПоиска =  ПолучитьМассивПоиска(СтрЗаменить(ИскомоеЗначение, ".", ","));
		Если МассивПоиска.Количество() = 0 Тогда
			Элементы.Товары.ОтборСтрок = Неопределено;
		Иначе
			Для Каждого ДанныеСтроки Из ЭтаФорма.ТаблицаДокументов Цикл
				ТекстПоиска = СтрЗаменить(ВРЕГ(""+
				ДанныеСтроки.Автор + " "+
				ДанныеСтроки.Номер + " "+
				ДанныеСтроки.Дата + " " +
				ДанныеСтроки.Ответственный + " "+
				ДанныеСтроки.Комментарий + " "+
				ДанныеСтроки.ТипДокумента + " "+
				ДанныеСтроки.ВидОперации + " "+
				Формат(ДанныеСтроки.СуммаДокумента, "ЧДЦ=2; ЧРД=,; ЧГ=") + " "+
				""), ".", ",");
				
				ДанныеСтроки.Отбор = Истина;
				Для Каждого ПараПоиска Из МассивПоиска Цикл
					Если Найти(ТекстПоиска, ПараПоиска.ИсходноеЗначение) + Найти(ТекстПоиска, ПараПоиска.ИнвертированноеЗначение) = 0 Тогда
						ДанныеСтроки.Отбор = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Элементы.ТаблицаДокументов.ОтборСтрок = Новый ФиксированнаяСтруктура("Отбор", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
