
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	Если Не Параметры.Свойство("ИдентификаторНоменклатуры", ИдентификаторНоменклатуры) Тогда
		ВызватьИсключение НСтр("ru = 'Не задан идентификатор номенклатуры'");
	КонецЕсли;
	
	Если Не Параметры.Свойство("НоменклатураБазы", НоменклатураБазы) Тогда
		ВызватьИсключение НСтр("ru = 'Не задана номенклатура информационной базы'");
	КонецЕсли;
	
	Параметры.Свойство("НоменклатураНаименование",       НоменклатураНаименование);
	Параметры.Свойство("ВызовИзПомощникаОбновления",     ВызовИзПомощникаОбновления);
	Параметры.Свойство("ДанныеИнтерактивногоЗаполнения", ДанныеИнтерактивногоЗаполнения);
	Параметры.Свойство("ПервичноеЗаполнение",            ПервичноеЗаполнение);
	
	////////////////////////////////////////////////////////////////////////////////
	
	Если ВызовИзПомощникаОбновления Тогда
		РеквизитыНоменклатурыДляОбновления = Неопределено;
		
		Если Параметры.Свойство("РеквизитыНоменклатурыДляОбновления", РеквизитыНоменклатурыДляОбновления) Тогда
			РеквизитыИзПомощникаОбновления.ЗагрузитьЗначения(РеквизитыНоменклатурыДляОбновления);
		КонецЕсли;
	КонецЕсли;
	
	ВедетсяУчетВидовНоменклатуры = РаботаСНоменклатурой.ВедетсяУчетВидовНоменклатуры();
	
	Если ВедетсяУчетВидовНоменклатуры Тогда
		Если ЗначениеЗаполнено(ДанныеИнтерактивногоЗаполнения) Тогда
			ПолученыЗначенияРеквизитов(ВидНоменклатуры, "ВидНоменклатуры");
		Иначе
			РаботаСНоменклатуройПереопределяемый.ПолучитьВидНоменклатуры(НоменклатураБазы, ВидНоменклатуры);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПодсказкиФормы();
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПолучитьДанныеПоНоменклатуре();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НадписьНеСопоставленВидНоменклатурыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьКатегорию" Тогда
		ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.КарточкаКатегории", Новый Структура("ИдентификаторКатегории", ИдентификаторКатегории));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбновляемыеРеквизиты

&НаКлиенте
Процедура ОбновляемыеРеквизитыПередНачаломИзменения(Элемент, Отказ)
	
	Если Элементы.ОбновляемыеРеквизиты.ТекущийЭлемент <> Элементы.ОбновляемыеРеквизитыПометка Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновляемыеРеквизитыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновлятьВсеАвтоматически(Команда)
	
	РаботаСНоменклатуройКлиент.ПоказатьВопросПриВключенииАвтообновленияНоменклатуры(НоменклатураБазы, ИдентификаторНоменклатуры, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНоменклатуру(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.РаботаСНоменклатурой.Форма.ЗаполнениеНоменклатуры.ОбновитьНоменклатуру");

	Если ВызовИзПомощникаОбновления 
		ИЛИ ЗначениеЗаполнено(ДанныеИнтерактивногоЗаполнения) Тогда
		
		Закрыть(Новый Структура("АвтоматическийРежимОбновления, ТаблицаОтличий", 
			Ложь, 
			ПоместитьДанныеВХранилище()));
	Иначе
		ЗаполнитьНоменклатуру();
		Закрыть(Новый Структура("АвтоматическийРежимОбновления", Ложь));
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПоместитьДанныеВХранилище()
	
	Если ЗначениеЗаполнено(ДанныеИнтерактивногоЗаполнения) Тогда
		РаботаСНоменклатурой.УстановитьРежимОбновленияНоменклатуры(НоменклатураБазы, ИдентификаторНоменклатуры, Ложь);
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(ОбновляемыеРеквизиты.Выгрузить());
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНоменклатуру()
	
	НачатьТранзакцию();
	Попытка
		
		РаботаСНоменклатуройПереопределяемый.ЗаполнитьНоменклатуру(
			НоменклатураБазы, ОбновляемыеРеквизиты.Выгрузить(Новый Структура("Пометка, ЯвляетсяДополнительнымРеквизитом", Истина, Ложь)));

		Если ВедетсяУчетВидовНоменклатуры Тогда
			РаботаСНоменклатуройПереопределяемый.ЗаполнитьДополнительныеРеквизитыНоменклатуры(
				НоменклатураБазы, ОбновляемыеРеквизиты.Выгрузить(Новый Структура("Пометка, ЯвляетсяДополнительнымРеквизитом", Истина, Истина)));
		КонецЕсли;	
									
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
			
	РаботаСНоменклатурой.УстановитьРежимОбновленияНоменклатуры(НоменклатураБазы, ИдентификаторНоменклатуры, Ложь);	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Для Каждого ЭлементКоллекции Из ОбновляемыеРеквизиты Цикл
		ЭлементКоллекции.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Для Каждого ЭлементКоллекции Из ОбновляемыеРеквизиты Цикл
		ЭлементКоллекции.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеКФормеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ИдентификаторыНоменклатуры", НавигационнаяСсылкаФорматированнойСтроки);
	
	ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.КарточкаНоменклатуры", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПолучитьДанныеПоНоменклатуре()
	
	ПараметрыЗавершения = Новый Структура;
	
	ПолучитьНоменклатуруЗавершение = Новый ОписаниеОповещения("ПолучитьДанныеПоНоменклатуреЗавершение", ЭтотОбъект, ПараметрыЗавершения);
	
	РаботаСНоменклатуройКлиент.ПолучитьДанныеНоменклатурыСервиса(
		ПолучитьНоменклатуруЗавершение, ИдентификаторНоменклатуры, ЭтотОбъект, ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеПоНоменклатуреЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ИдентификаторЗадания <> ДополнительныеПараметры.ИдентификаторЗадания Тогда 
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗадания = Неопределено;
	
	ЗаполнитьТаблицыФорм(Результат.АдресРезультата, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыФорм(АдресРезультата, ДополнительныеПараметры)
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПоНоменклатуре = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(ДанныеПоНоменклатуре) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеПоНоменклатуре.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	СтрокаДанных = ДанныеПоНоменклатуре[0];
	
	ИдентификаторКатегории = СтрокаДанных.Категория.Идентификатор;
	КатегорияНаименование = СтрокаДанных.Категория.Наименование;
		
	СформироватьТаблицуОсновныхРеквизитов(СтрокаДанных);
		
	Если ВедетсяУчетВидовНоменклатуры Тогда
				
		СоответствиеРеквизитовИЗначений = Неопределено;
		
		Если ВидНоменклатурыБудетИзменен Тогда
			РаботаСНоменклатурой.ПолучитьСоответствиеРеквизитовИЗначений(ДанныеПоНоменклатуре.ВыгрузитьКолонку("ИдентификаторКатегории"), СоответствиеРеквизитовИЗначений, НовыйВидНоменклатуры);
			РаботаСНоменклатурой.ЗаполнитьСоответствиеРеквизитовИЗначенийНоменклатуры(СоответствиеРеквизитовИЗначений, СтрокаДанных, НовыйВидНоменклатуры);
		Иначе
			РаботаСНоменклатурой.ПолучитьСоответствиеРеквизитовИЗначений(ДанныеПоНоменклатуре.ВыгрузитьКолонку("ИдентификаторКатегории"), СоответствиеРеквизитовИЗначений, ВидНоменклатуры);
			РаботаСНоменклатурой.ЗаполнитьСоответствиеРеквизитовИЗначенийНоменклатуры(СоответствиеРеквизитовИЗначений, СтрокаДанных, ВидНоменклатуры);
		КонецЕсли;
				
		СформироватьТаблицуДополнительныхРеквизитов(СтрокаДанных);
		
		// Проверка сопоставления вида номенклатуры
		
		Если НЕ ВидНоменклатурыСопоставлен() Тогда
			ЗаполнитьПодсказкуСопоставленияВидаНоменклатуры();	
		КонецЕсли;
			
	КонецЕсли;
	
	Если ВызовИзПомощникаОбновления Тогда
		Для каждого ЭлементКоллекции Из ОбновляемыеРеквизиты Цикл
			ЭлементКоллекции.Пометка 
				= РеквизитыИзПомощникаОбновления.НайтиПоЗначению(ЭлементКоллекции.РеквизитОбъекта) <> Неопределено;
		КонецЦикла;
	КонецЕсли;
				
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюДоступностью()
	
	Элементы.ОбновлятьВсеАвтоматически.Видимость 
		= НЕ ВызовИзПомощникаОбновления И ЗначениеЗаполнено(НоменклатураБазы);
	
	Если ВызовИзПомощникаОбновления Тогда
		Элементы.ОбновитьНоменклатуру.Заголовок = НСтр("ru = 'Закрыть'");
		Заголовок = НСтр("ru = 'Изменения номенклатуры'");
	Иначе
		Если ПервичноеЗаполнение Тогда
			Элементы.ОбновитьНоменклатуру.Заголовок = НСтр("ru = 'Заполнить'");
			Заголовок = НСтр("ru = 'Заполнение номенклатуры'");
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВидНоменклатурыСопоставлен()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории КАК ИдентификаторКатегории,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры = &ВидНоменклатуры
	|	И СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории = &ИдентификаторКатегории";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	Запрос.УстановитьПараметр("ИдентификаторКатегории", ИдентификаторКатегории);
		
	Возврат НЕ Запрос.Выполнить().Пустой();
		
КонецФункции

&НаСервере
Процедура СформироватьТаблицуОсновныхРеквизитов(СтрокаДанных)
	
	Если ЗначениеЗаполнено(ДанныеИнтерактивногоЗаполнения) Тогда
		ЗначенияРеквизитовОбъекта = Неопределено;
		
		Если НЕ ПолученыЗначенияРеквизитов(ЗначенияРеквизитовОбъекта, "ОсновныеРеквизиты") Тогда
			Возврат;	
		КонецЕсли;
	Иначе
		ЗначенияРеквизитовОбъекта = Новый ТаблицаЗначений;
		
		РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовНоменклатуры(НоменклатураБазы, ЗначенияРеквизитовОбъекта);
		
		Если ЗначенияРеквизитовОбъекта.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;	
		
		ЗначенияРеквизитовОбъекта = ЗначенияРеквизитовОбъекта[0];
		
	КонецЕсли;
		
	ТаблицаОтличий = РаботаСНоменклатурой.ТаблицаОтличийРеквизитов();
	
	РаботаСНоменклатуройПереопределяемый.ПолучитьОтличияНоменклатуры(СтрокаДанных, ЗначенияРеквизитовОбъекта, ТаблицаОтличий);
	
	// Добавление вида номенклатуру в таблицу изменений.
	
	Если ВедетсяУчетВидовНоменклатуры Тогда
		
		ВидыНоменклатурыБазы = РаботаСНоменклатурой.ВидыНоменклатурыПоИдентификаторуКатегории(СтрокаДанных.Категория.Идентификатор);
		
		Если ВидыНоменклатурыБазы.Количество() > 0 Тогда
			
			Если ВидыНоменклатурыБазы.Найти(ВидНоменклатуры) = Неопределено Тогда				
				СтрокиСВидомНоменклатуры = ТаблицаОтличий.НайтиСтроки(
					Новый Структура("ТекущееЗначение, НовоеЗначение, Пометка", ВидНоменклатуры, ВидыНоменклатурыБазы[0], Истина));
					
				Если СтрокиСВидомНоменклатуры.Количество() > 0  Тогда
					ВидНоменклатурыБудетИзменен = Истина;
					НовыйВидНоменклатуры = ВидыНоменклатурыБазы[0];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбновляемыеРеквизиты.Загрузить(ТаблицаОтличий);
	
КонецПроцедуры

&НаСервере
Функция ПолученыЗначенияРеквизитов(ЗначенияРеквизитовОбъекта, ТипРеквизитов)
	
	Если НЕ ЭтоАдресВременногоХранилища(ДанныеИнтерактивногоЗаполнения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗначенияИзХранилища = ПолучитьИзВременногоХранилища(ДанныеИнтерактивногоЗаполнения);
	
	Если ТипЗнч(ЗначенияИзХранилища) <> Тип("Структура")
		ИЛИ Не ЗначенияИзХранилища.Свойство(ТипРеквизитов) Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	ЗначенияРеквизитовОбъекта = ЗначенияИзХранилища[ТипРеквизитов];
	
	Возврат Истина;
		
КонецФункции

&НаСервере
Процедура СформироватьТаблицуДополнительныхРеквизитов(СтрокаДанных)
	
	ЗначенияРеквизитов = Новый ТаблицаЗначений;
	
	Если ЗначениеЗаполнено(ДанныеИнтерактивногоЗаполнения) Тогда
		Если Не ПолученыЗначенияРеквизитов(ЗначенияРеквизитов, "ДополнительныеРеквизиты") Тогда
			Возврат;
		КонецЕсли;
	Иначе
		РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияДополнительныхРеквизитов(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НоменклатураБазы), ЗначенияРеквизитов);
	КонецЕсли;
	
	// Заполнение сопоставленных реквизитов
	
	Для каждого ТекущийРеквизит Из СтрокаДанных.ДополнительныеРеквизиты Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекущийРеквизит.РеквизитИнформационнойБазы) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеОбъекта = ЗначенияРеквизитов.Найти(ТекущийРеквизит.РеквизитИнформационнойБазы, "Свойство");
		
		ЭтоСсылочноеЗначение = ЗначениеЗаполнено(ТекущийРеквизит.ИдентификаторЗначения);
				
		Если ЗначениеОбъекта <> Неопределено Тогда
			
			ЗначенияСовпадают = (ЭтоСсылочноеЗначение И ЗначениеОбъекта.Значение = ТекущийРеквизит.ЗначениеИнформационнойБазы)
				ИЛИ (Не ЭтоСсылочноеЗначение И ЗначениеОбъекта.Значение = ТекущийРеквизит.Значение);

			Если ЗначенияСовпадают Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если (Не ЗначениеЗаполнено(ТекущийРеквизит.Значение) 
				И Не ЗначениеЗаполнено(ТекущийРеквизит.ИдентификаторЗначения))
					ИЛИ ТекущийРеквизит.Значение = Ложь Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = ОбновляемыеРеквизиты.Добавить();
		
		НоваяСтрока.РеквизитОбъекта        = ТекущийРеквизит.РеквизитИнформационнойБазы;
		НоваяСтрока.ПредставлениеРеквизита = ТекущийРеквизит.РеквизитИнформационнойБазы;
		НоваяСтрока.Пометка                = Истина;
		НоваяСтрока.ТекущееЗначение        = ?(ЗначениеОбъекта = Неопределено, Неопределено, ЗначениеОбъекта.Значение);
		НоваяСтрока.НовоеЗначение          = ?(ЭтоСсылочноеЗначение, ТекущийРеквизит.ЗначениеИнформационнойБазы, ТекущийРеквизит.Значение);
		НоваяСтрока.ПредставлениеЗначенияСервиса = ?(ЭтоСсылочноеЗначение, ТекущийРеквизит.ЗначениеИнформационнойБазы, ТекущийРеквизит.Значение);
		НоваяСтрока.ЯвляетсяДополнительнымРеквизитом = Истина;
		
	КонецЦикла;
	
	// Заполнение несопоставленных реквизитов
	
	Для каждого ТекущийРеквизит Из СтрокаДанных.ДополнительныеРеквизиты Цикл
		
		Если ЗначениеЗаполнено(ТекущийРеквизит.РеквизитИнформационнойБазы) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ОбновляемыеРеквизиты.Добавить();
		НоваяСтрока.РеквизитОбъекта        = ТекущийРеквизит.Наименование;
		НоваяСтрока.ПредставлениеРеквизита = ТекущийРеквизит.Наименование;
		НоваяСтрока.НовоеЗначение          = ?(ЗначениеЗаполнено(ТекущийРеквизит.Значение), ТекущийРеквизит.Значение, ТекущийРеквизит.СтроковоеЗначение);
		НоваяСтрока.НеСопоставлен          = Истина;
		НоваяСтрока.ПредставлениеЗначенияСервиса = НоваяСтрока.НовоеЗначение;
		НоваяСтрока.ЯвляетсяДополнительнымРеквизитом = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодсказкиФормы()
	
	Элементы.ПояснениеКФорме.Заголовок = Новый ФорматированнаяСтрока(ТекстПоясненияКФорме());
	Элементы.ГруппаНеСопоставленВидНоменклатуры.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодсказкуСопоставленияВидаНоменклатуры()
	
	Элементы.НадписьНеСопоставленВидНоменклатуры.Заголовок = Новый ФорматированнаяСтрока(ТекстНеСопоставленногоВида());
	Элементы.ГруппаНеСопоставленВидНоменклатуры.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Не сопоставленные реквизиты
	
	// Текст
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<реквизит не сопоставлен>'"));
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОбновляемыеРеквизиты.НеСопоставлен");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбновляемыеРеквизитыТекущееЗначение.Имя);
	
	// Цвет строки
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(200, 200, 200));
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОбновляемыеРеквизиты.НеСопоставлен");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбновляемыеРеквизиты.Имя);
		
КонецПроцедуры

#КонецОбласти

#Область СтроковыеКонстанты

&НаСервере
Функция ТекстПоясненияКФорме()
	
	МассивПодстрок = Новый Массив;
	
	Если Не ПервичноеЗаполнение Тогда
		МассивПодстрок.Добавить(НСтр("ru = 'Обновление номенклатуры'") + " ");
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(Строка(НоменклатураБазы),Новый Шрифт(,,Истина)));
	Иначе
		МассивПодстрок.Добавить(НСтр("ru = 'Заполнение номенклатуры'"));
	КонецЕсли;
	
	МассивПодстрок.Добавить(" " + НСтр("ru = 'на основании карточки 1С:Номенклатуры'") + " ");
	МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(НоменклатураНаименование,,,,ИдентификаторНоменклатуры));

	Возврат МассивПодстрок;
	
КонецФункции

&НаСервере
Функция ТекстНеСопоставленногоВида()
	
	ПредставлениеВидаНоменклатуры = 
		?(НЕ ЗначениеЗаполнено(ВидНоменклатуры), Строка(НоменклатураБазы), Строка(ВидНоменклатуры));
	
	МассивПодстрок = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		
		МассивПодстрок.Добавить(НСтр("ru = 'Не заполнен вид номенклатуры карточки'") + " ");
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(ПредставлениеВидаНоменклатуры, Новый Шрифт(,,Истина)));
		МассивПодстрок.Добавить(". " + НСтр("ru = 'Для возможности обновления дополнительных реквизитов необходимо выбрать вид номенклатуры, сопоставленный с категорией'") + " ");
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(КатегорияНаименование,,,,"ОткрытьКатегорию"));
		МассивПодстрок.Добавить(".");
		
	Иначе
		
		МассивПодстрок.Добавить(НСтр("ru = 'Вид номенклатуры'") + " ");
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(ПредставлениеВидаНоменклатуры, Новый Шрифт(,,Истина)));
		МассивПодстрок.Добавить(" " + НСтр("ru = 'не сопоставлен с категорией 1С:Номенклатуры'") + " ");
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(КатегорияНаименование,,,,"ОткрытьКатегорию"));
		МассивПодстрок.Добавить(НСтр("ru = '. Для возможности обновления дополнительных реквизитов необходимо сопоставить вид номенклатуры с категорией.'"));
		
	КонецЕсли;
		
	Возврат МассивПодстрок;
	
КонецФункции

#КонецОбласти