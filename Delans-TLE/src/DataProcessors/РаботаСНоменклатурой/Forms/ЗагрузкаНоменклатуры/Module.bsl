
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	Параметры.Свойство("РежимВыбораНоменклатуры", РежимВыбораНоменклатуры);
	Параметры.Свойство("СтрокаПоиска", СтрокаПоиска);
	Параметры.Свойство("ИдентификаторКатегории", ТекущаяКатегория); 
	Параметры.Свойство("ИдентификаторНоменклатуры", ИдентификаторНоменклатуры); 
	
	////////////////////////////////////////////////////////////////////////////////
	
	Элементы.ДекорацияУсловияИспользованияСервиса.Заголовок = 
		Новый ФорматированнаяСтрока(УсловиеИспользованияСервиса(РежимВыбораНоменклатуры));
	
	ТипНоменклатуры =  Метаданные.ОпределяемыеТипы.НоменклатураРаботаСНоменклатурой.Тип.Типы()[0];
	ИмяФормыНоменклатуры = Метаданные.НайтиПоТипу(ТипНоменклатуры).ПолноеИмя()+".Форма.ФормаСписка";
	
	ЦветаСтиляПоясняющийТекст = ЦветаСтиля.ПоясняющийТекст;
	ЦветаСтиляЦветТекстаФормы = ЦветаСтиля.ЦветТекстаФормы;
	
	ПравоИзмененияДанных = РаботаСНоменклатурой.ПравоИзмененияДанных();
	
	АвтоНавигационнаяСсылка = Ложь;
	НавигационнаяСсылка = "e1cib/app/" + ЭтотОбъект.ИмяФормы;
	
	ИнтернетПоддержкаПодключена = ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	
	НастроитьВнешнийВидФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ИнтернетПоддержкаПодключена Тогда
		ЗагрузитьДанныеПослеОткрытияЗавершение();
	Иначе
		ЗагрузитьДанныеПослеОткрытия = Новый ОписаниеОповещения("ЗагрузитьДанныеПослеОткрытия",
			ЭтотОбъект);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ЗагрузитьДанныеПослеОткрытия,
			ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "РаботаСНоменклатурой_Обновить" Тогда
		
		ПараметрыИзменены = Ложь;
		Если Параметр.Свойство("ИдентификаторКатегории") И ТекущаяКатегория <> Параметр.ИдентификаторКатегории Тогда
			ПараметрыИзменены = Истина;
			ТекущаяКатегория = Параметр.ИдентификаторКатегории;
		КонецЕсли;
		
		Если ПараметрыИзменены Тогда
			ЗаполнитьНавигациюКатегорийИЗагрузитьНоменклатуру(ТекущаяКатегория);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "РаботаСНоменклатурой_ПроставитьПризнакЗагрузки" Тогда	
		
		Если Параметр.Свойство("ТекущийБаланс") Тогда
			ТекущийБаланс = Параметр.ТекущийБаланс;
		КонецЕсли;
		
		ПроставитьПризнакЗагрузки(, Параметр.СсылкаНаНовуюНоменклатуру);
		
		ОбновитьТекущийБаланс();
		УстановитьВидимостьДоступность();
		
	ИначеЕсли ИмяСобытия = "РаботаСНоменклатурой_ОбновитьТекущийБаланс" Тогда
		
		Если Параметр.ТекущийБаланс <> Неопределено Тогда
			ТекущийБаланс = Параметр.ТекущийБаланс;
			ОбновитьТекущийБаланс();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.РаботаСНоменклатурой.Форма.ЗагрузкаНоменклатуры.СтрокаПоискаПриИзменении");
	
	ПолучитьНоменклатуру();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если РежимВыбораНоменклатуры Тогда
		ВыбратьНоменклатуруИзСписка();
	Иначе
		ОткрытьКарточкуНоменклатуры();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказыватьОтборы(Команда)
	
	Элементы.ПоказыватьОтборы.Пометка = НЕ Элементы.ПоказыватьОтборы.Пометка;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточку(Команда)
	
	ОткрытьКарточкуНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИдентификаторыНоменклатуры(ИсключитьЗагруженные = Ложь)
	
	ИдентификаторыНоменклатуры = Новый Массив;
	
	Для Каждого ЭлементКоллекции Из Элементы.Список.ВыделенныеСтроки Цикл
		
		СтрокаНоменклатуры = Список.НайтиПоИдентификатору(ЭлементКоллекции);
		
		Если ИсключитьЗагруженные 
			И СтрокаНоменклатуры.Загружена Тогда
			
			Продолжить;
		КонецЕсли;
		
		ИдентификаторыНоменклатуры.Добавить(СтрокаНоменклатуры.Идентификатор);
		
	КонецЦикла;

	Возврат ИдентификаторыНоменклатуры;
	
КонецФункции

&НаКлиенте
Процедура СоздатьНоменклатуру(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Список.ТекущиеДанные.Загружена Тогда
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	ИдентификаторыНоменклатуры = ПолучитьИдентификаторыНоменклатуры(Истина);
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("ИдентификаторЗадания", Неопределено);
	
	СоздатьНоменклатуруПродолжение = Новый ОписаниеОповещения("СоздатьНоменклатуруПродолжение",
		ЭтотОбъект, ПараметрыЗавершения);
	
	РаботаСНоменклатуройКлиент.СоздатьНоменклатуру(СоздатьНоменклатуруПродолжение, ИдентификаторыНоменклатуры, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуруПродолжение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат.Свойство("Сообщения") И Результат.Сообщения <> Неопределено Тогда
		Для каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
		
	Ошибка = Ложь;
	ПроставитьПризнакЗагрузки = Ложь;
	РезультатСоздания = Неопределено;
	
	РаботаСНоменклатуройКлиент.ОбработкаРезультатаСозданияНоменклатуры(
		Результат, РезультатСоздания, Ошибка, ПроставитьПризнакЗагрузки, ЭтотОбъект);

	Если Ошибка Тогда 
		Возврат;
	КонецЕсли;
	
	Если РезультатСоздания.Свойство("ТекущийБаланс") Тогда
		ТекущийБаланс = РезультатСоздания.ТекущийБаланс;
	КонецЕсли;
	
	Если ПроставитьПризнакЗагрузки Тогда 
		ПроставитьПризнакЗагрузки(Неопределено, РезультатСоздания.НовыеЭлементы);
		
		Если РезультатСоздания.НовыеЭлементы.Количество() > 0 Тогда
			ОповеститьОбИзменении(ТипЗнч(РезультатСоздания.НовыеЭлементы[0]));	
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	ОбновитьТекущийБаланс();
	
	Если РезультатСоздания.НоменклатураДляАнализа <> Неопределено Тогда 
		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияФормыРаспределенияХарактеристик", ЭтотОбъект);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("НоменклатураДляАнализа", РезультатСоздания.НоменклатураДляАнализа);
		
		ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.СозданиеНоменклатурыСУчетомХарактеристик", ПараметрыФормы, ЭтаФорма,,,, Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НажатиеОповещенияПользователя(ДополнительныеПараметры) Экспорт 
	
	ПараметрыОткрытияФормыСписка = Новый Структура();
	ПараметрыОткрытияФормыСписка.Вставить("Отбор", Новый Структура("Ссылка", ДополнительныеПараметры));
	ОткрытьФорму(ИмяФормыНоменклатуры, ПараметрыОткрытияФормыСписка, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыРаспределенияХарактеристик(Результат, ДополнительныеПараметры) Экспорт
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНоменклатуру(Команда)
	
	ВыбратьНоменклатуруИзСписка();
		
КонецПроцедуры

&НаКлиенте
Процедура НайтиКарточки(Команда)
	
	ПолучитьНоменклатуру();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыбратьНоменклатуруИзСписка()
	
	ВыбраннаяНоменклатура = Неопределено;
	
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		
		ВыбраннаяНоменклатура = Новый Структура("Наименование, Идентификатор",
			Элементы.Список.ТекущиеДанные.Наименование,
			Элементы.Список.ТекущиеДанные.Идентификатор);
			
		Отказ = Ложь;	
			
		Результат = КупитьКарточкиНоменклатуры(ВыбраннаяНоменклатура.Идентификатор, Отказ);	
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если Результат.ЕстьОшибки Тогда
			ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.ОшибкаПокупкиНоменклатуры", 
				Новый Структура("Ошибка", Результат.ОписаниеОшибки));
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Закрыть(ВыбраннаяНоменклатура);
	
КонецПроцедуры

&НаСервере
Функция КупитьКарточкиНоменклатуры(Идентификатор, Отказ)
	
	Возврат РаботаСНоменклатурой.ПокупкаКарточекНоменклатуры(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификатор), Отказ);
		
КонецФункции

&НаКлиенте
Процедура ОткрытьКарточкуНоменклатуры()
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	ИдентификаторыНоменклатуры = ПолучитьИдентификаторыНоменклатуры();
	Если ИдентификаторыНоменклатуры.Количество() = 1 Тогда 
		ИдентификаторФормы = ИдентификаторыНоменклатуры[0];
	Иначе
		ИдентификаторФормы = "";
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.РаботаСНоменклатурой.Форма.ЗагрузкаНоменклатуры.ОткрытьКарточкиНоменклатуры");

	ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.КарточкаНоменклатуры", 
		Новый Структура("ИдентификаторыНоменклатуры", ИдентификаторыНоменклатуры),, ИдентификаторФормы);
		
КонецПроцедуры

&НаСервере
Процедура ПроставитьПризнакЗагрузки(ИдентификаторыНоменклатуры = Неопределено, Номенклатура = Неопределено)
	
	Если Номенклатура = Неопределено Тогда 
		Если ИдентификаторыНоменклатуры = Неопределено Тогда
			ИдентификаторыНоменклатуры = Список.Выгрузить().ВыгрузитьКолонку("Идентификатор");
		КонецЕсли;
		
		СоответствиеНоменклатуры = РаботаСНоменклатурой.ПолучитьСоответствиеНоменклатурыПоИдентификаторам(ИдентификаторыНоменклатуры);
	Иначе	
		
		СоответствиеНоменклатуры = РаботаСНоменклатурой.ПолучитьСоответствиеНоменклатурыПоСсылкамНоменклатуры(Номенклатура);
	КонецЕсли;
	
	Для Каждого ЭлементКоллекции Из СоответствиеНоменклатуры Цикл
		
		СтрокиПоИдентификатору = Список.НайтиСтроки(Новый Структура("Идентификатор", ЭлементКоллекции.ИдентификаторНоменклатурыСервиса));
		
		Если СтрокиПоИдентификатору.Количество() <> 0 Тогда
			СтрокиПоИдентификатору[0].Загружена = Истина;
		КонецЕсли;

	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыОтборов()
	
	МассивУдаления = Новый Массив;
	Для каждого ПодчиненныйЭлемент Из Элементы.ГруппаОтборов0.ПодчиненныеЭлементы Цикл
		МассивУдаления.Добавить(ПодчиненныйЭлемент);
	КонецЦикла;
	Для каждого ПодчиненныйЭлемент Из Элементы.ГруппаОтборов1.ПодчиненныеЭлементы Цикл
		МассивУдаления.Добавить(ПодчиненныйЭлемент);
	КонецЦикла;
	Для каждого ЭлементУдаления Из МассивУдаления Цикл
		Элементы.Удалить(ЭлементУдаления);
	КонецЦикла;
	ИзменитьРеквизиты(, СписокДобавленныхРеквизитов.ВыгрузитьЗначения());
	СписокДобавленныхРеквизитов.Очистить();
	
	Элементы.СтраницаОтборы.ТекущаяСтраница = Элементы.СтраницаНетОтборов;
	
	ОтборыПоКатегорииАктуальны = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтборыПоКатегории(ИдентификаторКатегории = Неопределено)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.РаботаСНоменклатурой.Форма.ЗагрузкаНоменклатуры.СформироватьОтборыПоКатегории");
	
	ОтборыПоКатегорииАктуальны = Ложь;
	
	Если ИдентификаторКатегории = Неопределено Тогда
		Если Элементы.ГруппаОтборов0.ПодчиненныеЭлементы.Количество() > 0 
			ИЛИ Элементы.ГруппаОтборов1.ПодчиненныеЭлементы.Количество() > 0 Тогда
			
			УдалитьЭлементыОтборов();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("ИдентификаторКатегории",  ИдентификаторКатегории);
	ПараметрыЗавершения.Вставить("ИдентификаторЗадания", ИдентификаторЗаданияОбработкиФильтровРубрикатора);
	
	СформироватьОтборыПоКатегорииЗавершение = Новый ОписаниеОповещения("СформироватьОтборыПоКатегорииЗавершение",
		ЭтотОбъект, ПараметрыЗавершения);
		
	РаботаСНоменклатуройКлиент.ПолучитьФильтрыКатегории(СформироватьОтборыПоКатегорииЗавершение,
		ИдентификаторКатегории, ЭтотОбъект, ИдентификаторЗаданияОбработкиФильтровРубрикатора, Элементы.ДекорацияКореньКатегорий);
		
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтборыПоКатегорииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ИдентификаторЗаданияОбработкиФильтровРубрикатора <> ДополнительныеПараметры.ИдентификаторЗадания Тогда 
		Возврат;
	КонецЕсли;
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	ИдентификаторЗаданияОбработкиФильтровРубрикатора = Неопределено;
	
	СформироватьОтборыПоКатегорииНаСервере(Результат.АдресРезультата, ДополнительныеПараметры);
	
	Элементы.ДекорацияКореньКатегорий.Картинка = БиблиотекаКартинок.НавигацияДомойБЭД;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтборыПоКатегорииНаСервере(АдресРезультата, ДополнительныеПараметры)
	
	УдалитьЭлементыОтборов();
	
	Если Не ЗначениеЗаполнено(ДополнительныеПараметры.ИдентификаторКатегории) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда 
		ДополнительныеРеквизиты = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если ДополнительныеРеквизиты = Неопределено Тогда 
			Возврат;
		ИначеЕсли ДополнительныеРеквизиты.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	КоличествоВКолонке = ДополнительныеРеквизиты.Количество();
	Если КоличествоВКолонке > 20 Тогда
		КоличествоВКолонке = Окр(ДополнительныеРеквизиты.Количество() / 2, 0, РежимОкругления.Окр15как10) + 1;
	КонецЕсли;
	
	СформироватьОтборыПоРеквизитам(ДополнительныеРеквизиты, КоличествоВКолонке);
	
	Элементы.СтраницаОтборы.ТекущаяСтраница = Элементы.СтраницыОтборыГруппы;
	
	ОтборыПоКатегорииАктуальны = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтборыПоРеквизитам(ДополнительныеРеквизиты, КоличествоВКолонке)
	
	СчетчикХарактеристики = 0;
	Для Каждого ТекущийРеквизит Из ДополнительныеРеквизиты Цикл
		
		НаименованиеЕдиницыИзмерения = "";
		Если Не ТекущийРеквизит.ЕдиницаИзмерения = Неопределено Тогда 
			НаименованиеЕдиницыИзмерения = ТекущийРеквизит.ЕдиницаИзмерения.Наименование;
		КонецЕсли;
		Представление = ТекущийРеквизит.Наименование+ ?(ПустаяСтрока(НаименованиеЕдиницыИзмерения),"", ", " + НаименованиеЕдиницыИзмерения);
				
		НомерГруппы = Цел(СчетчикХарактеристики / КоличествоВКолонке);
		ГруппаОтборов = Элементы["ГруппаОтборов" + НомерГруппы];
		СчетчикХарактеристики = СчетчикХарактеристики + 1;
		
		ИдентификаторРеквизита = Формат(ТекущийРеквизит.Идентификатор,"ЧРГ=; ЧГ=");
		
		Если СтрСравнить(ТекущийРеквизит.Тип, "Список") = 0 Тогда
			
			СтрелкаВниз = "↓";
			
			ГруппаЗаголовкаОтбора = ДобавитьГруппуЗаголовокОтбораСоСписком(ИдентификаторРеквизита, ГруппаОтборов);
			
			НовыйЭлемент = Элементы.Добавить("ЗаголовокОтбора_" + ИдентификаторРеквизита, Тип("ДекорацияФормы"), ГруппаЗаголовкаОтбора);
			НовыйЭлемент.Заголовок = Представление + " " + СтрелкаВниз;
			НовыйЭлемент.Гиперссылка = Истина;
			НовыйЭлемент.Подсказка = Представление;
			НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_НажатиеГиперссылки");
			
			НовыйЭлемент = Элементы.Добавить("ДекорацияДлительнойОперацииОтбора_" + ИдентификаторРеквизита, Тип("ДекорацияФормы"), ГруппаЗаголовкаОтбора);
			НовыйЭлемент.Вид      = ВидДекорацииФормы.Картинка;
			НовыйЭлемент.Картинка = БиблиотекаКартинок.Пустая;
			
			ДобавитьПустуюГруппу(ИдентификаторРеквизита, ГруппаОтборов);
			
		ИначеЕсли СтрСравнить(ТекущийРеквизит.Тип, "Булево") = 0 Тогда
			
			МассивРеквизитов = Новый Массив;
			Реквизит = Новый РеквизитФормы("Отбор_" + ИдентификаторРеквизита, Новый ОписаниеТипов("Булево"));
			МассивРеквизитов.Добавить(Реквизит);
			ИзменитьРеквизиты(МассивРеквизитов);
			СписокДобавленныхРеквизитов.Добавить(Реквизит.Имя, Представление);
			
			НовыйЭлемент = Элементы.Добавить("Отбор_" + ИдентификаторРеквизита, Тип("ПолеФормы"), ГруппаОтборов);
			НовыйЭлемент.Заголовок = Представление;
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
			НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			НовыйЭлемент.ПутьКДанным = Реквизит.Имя;
			НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ИзменениеОтбора");
			
		ИначеЕсли СтрСравнить(ТекущийРеквизит.Тип, "Число") = 0 Тогда
			
			МассивРеквизитов = Новый Массив;
			Реквизит = Новый РеквизитФормы("Отбор_" + ИдентификаторРеквизита, Новый ОписаниеТипов("Число"));
			МассивРеквизитов.Добавить(Реквизит);
			ИзменитьРеквизиты(МассивРеквизитов);
			СписокДобавленныхРеквизитов.Добавить(Реквизит.Имя, Представление);
			
			НовыйЭлемент = Элементы.Добавить("Отбор_" + ИдентификаторРеквизита, Тип("ПолеФормы"), ГруппаОтборов);
			НовыйЭлемент.Заголовок = Представление;
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.Ширина = 0;
			НовыйЭлемент.ПутьКДанным = Реквизит.Имя;
			
			ПодсказкаВвода = Новый Массив;
			Если ЗначениеЗаполнено(ТекущийРеквизит.МинимальноеЗначение) Тогда 
				ПодсказкаВвода.Добавить(СтрШаблон(НСтр("ru = 'от %1'"), Формат(ТекущийРеквизит.МинимальноеЗначение, "ЧН=0; ЧГ=3,0; ЧО=1")))
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекущийРеквизит.МаксимальноеЗначение) Тогда
				ПодсказкаВвода.Добавить(СтрШаблон(НСтр("ru = 'до %1'"), Формат(ТекущийРеквизит.МаксимальноеЗначение, "ЧН=0; ЧГ=3,0; ЧО=1")))
			КонецЕсли;
			НовыйЭлемент.Подсказка = Представление + Символы.ПС + СтрСоединить(ПодсказкаВвода, " ");
			
			НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ИзменениеОтбора");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОтборыПоКатегорииАктуальны = Истина;
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьПустуюГруппу(ИдентификаторРеквизита, ГруппаОтборов)
	
	НоваяГруппа = Элементы.Добавить("ГруппаОтбора_" + ИдентификаторРеквизита, Тип("ГруппаФормы"), ГруппаОтборов);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппа.Видимость = Ложь;
	НоваяГруппа.ОтображатьОтступСлева = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьГруппуЗаголовокОтбораСоСписком(ИдентификаторРеквизита, ГруппаОтборов)
	
	НоваяГруппа = Элементы.Добавить("ЗаголовкаОтбора_" + ИдентификаторРеквизита, Тип("ГруппаФормы"), ГруппаОтборов);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	НоваяГруппа.Видимость = Истина;
	НоваяГруппа.ОтображатьОтступСлева = Ложь;
	
	Возврат НоваяГруппа;
	
КонецФункции

&НаСервере
Процедура НастроитьВнешнийВидФормы()
	
	РазрешеноПакетноеСоздание = Ложь;
	РаботаСНоменклатуройПереопределяемый.РазрешеноПакетноеСозданиеНоменклатуры(РазрешеноПакетноеСоздание);
	
	Элементы.Список.МножественныйВыбор = РазрешеноПакетноеСоздание И НЕ РежимВыбораНоменклатуры;
	Элементы.Список.РежимВыделения = ?(Элементы.Список.МножественныйВыбор,
		РежимВыделенияТаблицы.Множественный,
		РежимВыделенияТаблицы.Одиночный);
	
	Элементы.СписокСоздатьНоменклатуру.Видимость         = НЕ РежимВыбораНоменклатуры;
	Элементы.СписокСоздатьНоменклатуру.КнопкаПоУмолчанию = НЕ РежимВыбораНоменклатуры;
	Элементы.СписокВыбратьНоменклатуру.Видимость         = РежимВыбораНоменклатуры;
	Элементы.СписокВыбратьНоменклатуру.КнопкаПоУмолчанию = РежимВыбораНоменклатуры;
	
	ЗакрыватьПриВыборе = РежимВыбораНоменклатуры;
	
	Если РежимВыбораНоменклатуры Тогда 
		Заголовок = НСтр("ru = 'Выбор номенклатуры из сервиса 1С:Номенклатура'");
	Иначе
		Заголовок = НСтр("ru = 'Добавление номенклатуры из сервиса 1С:Номенклатура'");
	КонецЕсли;
	
	Элементы.СтруктураКатегорий.Заголовок = НСтр("ru = 'Категории загружаются...'");
	Элементы.ДекорацияПодкатегорий.Заголовок = "";
	
	Элементы.СписокСоздатьНоменклатуру.Доступность = Ложь;
	Элементы.СписокОткрытьКарточку.Доступность     = Ложь;
	Элементы.ГруппаПанельОтборов.Видимость         = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПанельНавигации(ТекущаяВетка, СтруктураКатегорий, ДекорацияПодкатегорий)
	
	Если ТипЗнч(ТекущаяВетка) = Тип("ДанныеФормыДерево") Тогда
		СтруктураКатегорий.Заголовок = Новый ФорматированнаяСтрока(ТекстПредставленияКорневойКатегории());
	Иначе
		СтруктураКатегорий.Заголовок = Новый ФорматированнаяСтрока(ПолучитьПутьККатегории(ТекущаяВетка));
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	СтрокиКатегорий = ТекущаяВетка.ПолучитьЭлементы();
	
	ФорматированнаяСтрокаКатегорий = Новый Массив;
	
	Для каждого ЭлементКоллекции Из СтрокиКатегорий Цикл
		ФорматированнаяСтрокаКатегорий.Добавить(
			Новый ФорматированнаяСтрока(ЭлементКоллекции.Наименование,,,,ЭлементКоллекции.Идентификатор));
		ФорматированнаяСтрокаКатегорий.Добавить(РазделительПодкатегорий());
	КонецЦикла;
	
	ДекорацияПодкатегорий.Заголовок = Новый ФорматированнаяСтрока(ФорматированнаяСтрокаКатегорий);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Элементы.СписокСоздатьНоменклатуру.Доступность = ТекущиеДанные <> Неопределено И НЕ ТекущиеДанные.Загружена;
	Элементы.СписокОткрытьКарточку.Доступность = ТекущиеДанные <> Неопределено;
	Элементы.ГруппаПанельОтборов.Видимость = Элементы.ПоказыватьОтборы.Пометка;
	
	Если НЕ ПравоИзмененияДанных Тогда
		Элементы.СписокСоздатьНоменклатуру.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПутьККатегории(ТекущаяВетка)
	
	МассивПодстрок = Новый Массив;
	
	ДополнитьМассивПодстрок(ТекущаяВетка, МассивПодстрок);
	
	Возврат МассивПодстрок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьМассивПодстрок(ТекущаяВетка, МассивПодстрок)
	
	МассивПодстрок.Вставить(0, Новый ФорматированнаяСтрока(ТекущаяВетка.Наименование,,,,ТекущаяВетка.Идентификатор));
	
	Родитель = ТекущаяВетка.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		МассивПодстрок.Вставить(0, РазделительКатегорий());
		ДополнитьМассивПодстрок(Родитель, МассивПодстрок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКатегории(ИдентификаторКатегории = Неопределено)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.РаботаСНоменклатурой.Форма.ЗагрузкаНоменклатуры.ПолучитьКатегории");
	
	ТекущаяКатегория      = ИдентификаторКатегории;
	ТекущаяВетка          = Неопределено;
	КатегорииСервиса      = Новый Массив;
	ТребуетсяПодгрузка    = Истина;
	ЕстьКорневыеКатегории = Категории.ПолучитьЭлементы().Количество() > 0;
	
	////////////////////////////////////////////////////////////////////////////////
	
	ПодготовитьТекущуюВетку(Категории, КартаДереваКатегорий, ТекущаяВетка, ИдентификаторКатегории, Элементы.СтруктураКатегорий, Элементы.ДекорацияПодкатегорий, ТребуетсяПодгрузка);
	
	Если Не ТребуетсяПодгрузка Тогда
		Возврат;
	КонецЕсли;
		
	////////////////////////////////////////////////////////////////////////////////
	
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("ИдентификаторКатегории",  ИдентификаторКатегории);
	ПараметрыЗавершения.Вставить("ЕстьКорневыеКатегории",   ЕстьКорневыеКатегории);
	ПараметрыЗавершения.Вставить("ИдентификаторЗадания",    ИдентификаторЗаданияОбработкиРубрикатора);
	
	ПолучитьКатегорииЗавершение = Новый ОписаниеОповещения("ПолучитьКатегорииЗавершение",
		ЭтотОбъект, ПараметрыЗавершения);
	
	Если ИдентификаторКатегории = Неопределено Тогда 
		РаботаСНоменклатуройКлиент.ПолучитьКорневыеКатегории(ПолучитьКатегорииЗавершение, ЭтотОбъект, ИдентификаторЗаданияОбработкиРубрикатора,
			Элементы.ДекорацияКореньКатегорий);
	ИначеЕсли ТекущаяВетка = Неопределено И ЕстьКорневыеКатегории Тогда 
			
		РаботаСНоменклатуройКлиент.ПолучитьКатегорииНаПутиКЭлементу(ПолучитьКатегорииЗавершение, ИдентификаторКатегории, ЭтотОбъект, ИдентификаторЗаданияОбработкиРубрикатора,
			Элементы.ДекорацияКореньКатегорий);
			
	ИначеЕсли ТекущаяВетка = Неопределено И ЕстьКорневыеКатегории = Ложь Тогда 
			
		РаботаСНоменклатуройКлиент.ПолучитьКатегорииНаПутиКЭлементуСКорневымиКатегориями(ПолучитьКатегорииЗавершение, ИдентификаторКатегории, ЭтотОбъект, ИдентификаторЗаданияОбработкиРубрикатора,
			Элементы.ДекорацияКореньКатегорий);
	Иначе
		РаботаСНоменклатуройКлиент.ПолучитьСокращенноеОписаниеДочернихКатегорий(ПолучитьКатегорииЗавершение, ИдентификаторКатегории, ЭтотОбъект, ИдентификаторЗаданияОбработкиРубрикатора,
			Элементы.ДекорацияКореньКатегорий);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКатегорииЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Элементы.ДекорацияКореньКатегорий.Картинка = БиблиотекаКартинок.НавигацияДомойБЭД;
	
	Если ИдентификаторЗаданияОбработкиРубрикатора <> ДополнительныеПараметры.ИдентификаторЗадания Тогда 
		Возврат;
	КонецЕсли;
	ИдентификаторЗаданияОбработкиРубрикатора = Неопределено;
	
	ОбработатьДанныеКатегории(Результат.АдресРезультата, ДополнительныеПараметры);
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДанныеКатегории(АдресРезультата, ДополнительныеПараметры)
	
	ИдентификаторКатегории = ДополнительныеПараметры.ИдентификаторКатегории;
	ЕстьКорневыеКатегории  = ДополнительныеПараметры.ЕстьКорневыеКатегории;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда 
		КатегорииСервиса = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если КатегорииСервиса = Неопределено Тогда 
			ТекущаяВетка        = Неопределено;
			ПодготовитьТекущуюВетку(Категории, КартаДереваКатегорий, ТекущаяВетка, ИдентификаторКатегории, Элементы.СтруктураКатегорий, Элементы.ДекорацияПодкатегорий);
			Возврат;
		КонецЕсли;
	Иначе
		РезультатКартаДереваКатегорий = КартаДереваКатегорий.НайтиСтроки(Новый Структура("ИдентификаторКатегории", ИдентификаторКатегории));
		Если РезультатКартаДереваКатегорий.Количество() Тогда 
			ТекущаяВетка = Категории.НайтиПоИдентификатору(РезультатКартаДереваКатегорий[0].ИдентификаторСтрокиДерева);
			ТекущаяВетка.ДочерниеПодгружены = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ТекущаяВетка        = Неопределено;
	ПодготовитьТекущуюВетку(Категории, КартаДереваКатегорий, ТекущаяВетка, ИдентификаторКатегории, Элементы.СтруктураКатегорий, Элементы.ДекорацияПодкатегорий);
	
	ЗаполнитьДанныеДерева(ТекущаяВетка, КатегорииСервиса, ИдентификаторКатегории, ЕстьКорневыеКатегории);
	
	ЗаполнитьПанельНавигации(ТекущаяВетка, Элементы.СтруктураКатегорий, Элементы.ДекорацияПодкатегорий);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПодготовитьТекущуюВетку(Категории, КартаДереваКатегорий, ТекущаяВетка, ИдентификаторКатегории, СтруктураКатегорий, ДекорацияПодкатегорий, ТребуетсяПодгрузка = Истина)
	
	Если ИдентификаторКатегории <> Неопределено Тогда
		
		РезультатКартаДереваКатегорий = КартаДереваКатегорий.НайтиСтроки(Новый Структура("ИдентификаторКатегории", ИдентификаторКатегории));
		Если РезультатКартаДереваКатегорий.Количество() Тогда 
			ТекущаяВетка = Категории.НайтиПоИдентификатору(РезультатКартаДереваКатегорий[0].ИдентификаторСтрокиДерева);
		КонецЕсли;
		
		Если ТекущаяВетка = Неопределено Тогда 
			ТребуетсяПодгрузка = Истина;
		Иначе
			Если ТекущаяВетка.ДочерниеПодгружены Тогда
				ТребуетсяПодгрузка = Ложь;
				ЗаполнитьПанельНавигации(ТекущаяВетка, СтруктураКатегорий, ДекорацияПодкатегорий);
				Возврат;
			Иначе
				ТекущаяВетка.ДочерниеПодгружены = Истина;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ТекущаяВетка = Категории;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеДерева(ТекущаяВетка, ДанныеДерева, ИдентификаторКатегории, ЕстьКорневыеКатегории)
	
	Если ТекущаяВетка = Неопределено Тогда 
		
		ДобавитьВДеревоКатегорийЭлементыДоВыбраннойКатегории(ДанныеДерева, ЕстьКорневыеКатегории);
		ПодготовитьТекущуюВетку(Категории, КартаДереваКатегорий, ТекущаяВетка, ИдентификаторКатегории, Элементы.СтруктураКатегорий, Элементы.ДекорацияПодкатегорий);
	Иначе
		
		ДобавитьВДеревоКатегорийДочерниеКатегории(ТекущаяВетка, ДанныеДерева); 
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьВДеревоКатегорийЭлементыДоВыбраннойКатегории(ДанныеДерева, ЕстьКорневыеКатегории)
	
	ПутьККатегории = ДанныеДерева.ИдентификаторыКатегорийУзлов;
	
	ТаблицаКатегорий = ДанныеДерева.ТаблицаКатегорий;
	ТаблицаКатегорий.Индексы.Добавить("ИдентификаторРодителя");
	
	Если Не ЕстьКорневыеКатегории Тогда 
		ДобавитьВДеревоКатегорийДочерниеКатегории(Категории, ДанныеДерева.КорневыеКатегории);
	КонецЕсли;
	
	ПутьКЭлементу = Новый Массив;
	ТекущаяГруппа = Категории.ПолучитьЭлементы();
	
	Для Индекс = -ПутьККатегории.Количество()+1 По 0 Цикл
		ЭлементКоллекции =  ПутьККатегории[-Индекс];
		Для каждого СтрокаДереваПоИдентификатору Из ТекущаяГруппа Цикл
			Если СтрокаДереваПоИдентификатору.Идентификатор = ЭлементКоллекции Тогда
				
				ИдентификаторСтроки = СтрокаДереваПоИдентификатору.ПолучитьИдентификатор();
				ПутьКЭлементу.Добавить(ИдентификаторСтроки);
				
				Если НЕ СтрокаДереваПоИдентификатору.ДочерниеПодгружены Тогда
					ОтборПоРодителю = Новый Структура("ИдентификаторРодителя", ЭлементКоллекции);
					ДочерниеЭлементы = ТаблицаКатегорий.Скопировать(ОтборПоРодителю);
					Если ДочерниеЭлементы.Количество() Тогда 
						ДобавитьВДеревоКатегорийДочерниеКатегории(СтрокаДереваПоИдентификатору, ДочерниеЭлементы);
					КонецЕсли;
				КонецЕсли;
				
				ТекущаяГруппа = СтрокаДереваПоИдентификатору.ПолучитьЭлементы();
				
				Прервать;
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВДеревоКатегорийДочерниеКатегории(ТекущаяВетка, ДанныеДерева)
	
	СтрокиКатегорий = ТекущаяВетка.ПолучитьЭлементы();
	Для каждого ЭлементКоллекции Из ДанныеДерева Цикл
		РезультатКартаДереваКатегорий = КартаДереваКатегорий.НайтиСтроки(Новый Структура("ИдентификаторКатегории", ЭлементКоллекции.Идентификатор));
		Если РезультатКартаДереваКатегорий.Количество() = 0 Тогда
			
			СтрокаКатегории = СтрокиКатегорий.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКатегории, ЭлементКоллекции);
			
			ЗаполнитьЗначенияСвойств(КартаДереваКатегорий.Добавить(),
				Новый Структура("ИдентификаторСтрокиДерева, ИдентификаторКатегории",
								СтрокаКатегории.ПолучитьИдентификатор(), СтрокаКатегории.Идентификатор));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНавигациюКатегорийИЗагрузитьНоменклатуру(ИдентификаторКатегории)
	
	ПолучитьКатегории(ИдентификаторКатегории);
	СформироватьОтборыПоКатегории(ИдентификаторКатегории);
	ПолучитьНоменклатуру(ИдентификаторКатегории);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПодкатегорийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторКатегории = НавигационнаяСсылкаФорматированнойСтроки;
		
	ПолучитьКатегории(ИдентификаторКатегории);
	
	СформироватьОтборыПоКатегории(ИдентификаторКатегории);
	
	ПолучитьНоменклатуру(ИдентификаторКатегории);
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНоменклатуру(ИдентификаторКатегории = Неопределено)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.РаботаСНоменклатурой.Форма.ЗагрузкаНоменклатуры.ПолучитьНоменклатуру");
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("ИдентификаторКатегории",  ИдентификаторКатегории);
	ПараметрыЗавершения.Вставить("ИдентификаторЗадания",    ИдентификаторЗаданияРаботыСНоменклатурой);
	
	ПолучитьНоменклатуруЗавершение = Новый ОписаниеОповещения("ПолучитьНоменклатуруЗавершение",
		ЭтотОбъект, ПараметрыЗавершения);
	
	ПараметрыПоиска = СформироватьПараметрыПоиска();
		
	РаботаСНоменклатуройКлиент.ПолучитьПереченьНоменклатуры(ПолучитьНоменклатуруЗавершение, ПараметрыПоиска, ЭтотОбъект, ИдентификаторЗаданияРаботыСНоменклатурой, Элементы.НайтиКарточки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНоменклатуруЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Элементы.НайтиКарточки.Картинка = БиблиотекаКартинок.УправлениеПоиском;
	
	Если ИдентификаторЗаданияРаботыСНоменклатурой <> ДополнительныеПараметры.ИдентификаторЗадания Тогда 
		Возврат;
	КонецЕсли;
	ИдентификаторЗаданияРаботыСНоменклатурой = Неопределено;
	
	ЗаполнитьТаблицуФормы(Результат.АдресРезультата, ДополнительныеПараметры);
	
	ОбновитьТекущийБаланс();
	
	Если ЗначениеЗаполнено(ИдентификаторНоменклатуры)
		И Список.Количество() > 0 Тогда
		
		СтрокиПоИдентификатору = Список.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторНоменклатуры));
		
		Если СтрокиПоИдентификатору.Количество() > 0 Тогда
			Элементы.Список.ТекущаяСтрока = СтрокиПоИдентификатору[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьПараметрыПоиска()
	
	ПараметрыПоиска = Новый Структура();
	
	
	ПараметрыПоиска.Вставить("СтрокаПоиска",               СтрокаПоиска);
	
	Если ЗначениеЗаполнено(ТекущаяКатегория) Тогда
		ПараметрыПоиска.Вставить("ИдентификаторКатегории", ТекущаяКатегория);
		ПараметрыПоиска.Вставить("ИскатьВПодчиненных",     Истина);
	КонецЕсли;
	
	// Быстрые отборы.
	БыстрыеОтборы.Очистить();
	Если Не ПустаяСтрока(ПроизводительНаименование) И РазрешитьИзменениеПроизводителя Тогда
		БыстрыеОтборы.Добавить("ПроизводительНаименование", СтрШаблон(НСтр("ru = 'Производитель: %1'"), ПроизводительНаименование));
	КонецЕсли;
	
	Если ОтборыПоКатегорииАктуальны Тогда
		
		МассивАтрибутов = Новый Массив;
		МассивПроизводителей = Новый Массив;
		Для каждого ДобавленныйРеквизит Из СписокДобавленныхРеквизитов Цикл
			ЗначениеРеквизита = ЭтотОбъект[ДобавленныйРеквизит.Значение];
			ИдентификаторРеквизита = СтрРазделить(ДобавленныйРеквизит.Значение, "_")[1];
			Если ДобавленныйРеквизит.Значение = "Отбор_Производитель" Тогда 
				СтрокаЗначенийОтборов = "";
				Для каждого ЭлементСписка Из ЗначениеРеквизита Цикл
					Если ЭлементСписка.Пометка Тогда
						МассивПроизводителей.Добавить(ЭлементСписка.Значение);
						СтрокаЗначенийОтборов = СтрокаЗначенийОтборов + ?(ПустаяСтрока(СтрокаЗначенийОтборов), "", ", ")
							+ ЭлементСписка.Представление;
					КонецЕсли;
				КонецЦикла;
				Если Не ПустаяСтрока(СтрокаЗначенийОтборов) Тогда
					БыстрыеОтборы.Добавить(ДобавленныйРеквизит.Значение, ДобавленныйРеквизит.Представление + ": " + СтрокаЗначенийОтборов);
				КонецЕсли;
			ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Тогда
				Если ЗначениеРеквизита <> Ложь Тогда
					МассивАтрибутов.Добавить(
						Новый Структура("Идентификатор, Значение",
							ИдентификаторРеквизита, ЗначениеРеквизита));
					БыстрыеОтборы.Добавить(ДобавленныйРеквизит.Значение, ДобавленныйРеквизит.Представление + ": " + ЗначениеРеквизита);
				КонецЕсли;
			ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("СписокЗначений") Тогда 
				СтрокаЗначенийОтборов = "";
				ИдентификаторыЗначений = Новый Массив;
				Для каждого ЭлементСписка Из ЗначениеРеквизита Цикл
					Если ЭлементСписка.Пометка Тогда
						ИдентификаторыЗначений.Добавить(ЭлементСписка.Значение);
						СтрокаЗначенийОтборов = СтрокаЗначенийОтборов + ?(ПустаяСтрока(СтрокаЗначенийОтборов), "", ", ")
							+ ЭлементСписка.Представление;
					КонецЕсли;
				КонецЦикла;
				Если ИдентификаторыЗначений.Количество() Тогда 
					МассивАтрибутов.Добавить(
						Новый Структура("Идентификатор, ИдентификаторыЗначений",
							ИдентификаторРеквизита, ИдентификаторыЗначений));
				КонецЕсли;
				Если Не ПустаяСтрока(СтрокаЗначенийОтборов) Тогда
					БыстрыеОтборы.Добавить(ДобавленныйРеквизит.Значение, ДобавленныйРеквизит.Представление + ": " + СтрокаЗначенийОтборов);
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				МассивАтрибутов.Добавить(
					Новый Структура("Идентификатор, Значение",
						ИдентификаторРеквизита, ЗначениеРеквизита));
				БыстрыеОтборы.Добавить(ДобавленныйРеквизит.Значение, ДобавленныйРеквизит.Представление + ": " + ЗначениеРеквизита);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивАтрибутов.Количество() Тогда
			ПараметрыПоиска.Вставить("ДополнительныеРеквизиты", МассивАтрибутов);
		КонецЕсли;
		
		Если МассивПроизводителей.Количество() Тогда
			ПараметрыПоиска.Вставить("ИдентификаторыПроизводителей", МассивПроизводителей);
		КонецЕсли;
		
	КонецЕсли;
	
	// Удаление старых элементов быстрых отборов.
	МассивЭлементовУдаления = Новый Массив;
	КоличествоЭлементов = Элементы.ГруппаБыстрыхОтборов.ПодчиненныеЭлементы.Количество();
	МассивЭлементовКУдалению = Новый Массив;
	Для ОбратныйИндекс = 1 По КоличествоЭлементов Цикл
		ИндексЭлемента = КоличествоЭлементов - ОбратныйИндекс;
		ЭлементОтбора = Элементы.ГруппаБыстрыхОтборов.ПодчиненныеЭлементы[ИндексЭлемента];
		Если ЭлементОтбора.Видимость Тогда
			МассивЭлементовКУдалению.Добавить(ИндексЭлемента);
		КонецЕсли;
	КонецЦикла;
	Если МассивЭлементовКУдалению.Количество() Тогда 
		УдалитьЭлементыБыстрыхОтборов(МассивЭлементовКУдалению)
	КонецЕсли;
	
	// Создание новых элементов быстрых отборов.
	Если БыстрыеОтборы.Количество() Тогда 
		СоздатьЭлементыБыстрыхОтборов();
	КонецЕсли;
	
	Возврат ПараметрыПоиска;
	
КонецФункции

&НаСервере
Процедура УдалитьЭлементыБыстрыхОтборов(МассивЭлементовКУдалению)
	
	Для Каждого ИндексЭлемента Из МассивЭлементовКУдалению Цикл
		ЭлементОтбора = Элементы.ГруппаБыстрыхОтборов.ПодчиненныеЭлементы[ИндексЭлемента];
		Элементы.Удалить(ЭлементОтбора);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыБыстрыхОтборов()
	
	Для каждого ЭлементОтбора Из БыстрыеОтборы Цикл
		
		// Добавление пустой группы.
		НоваяГруппа = Элементы.Добавить("ГруппаБыстрогоОтбора_" + ЭлементОтбора.Значение, Тип("ГруппаФормы"), Элементы.ГруппаБыстрыхОтборов);
		НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
		НоваяГруппа.ОтображатьЗаголовок = Ложь;
		НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		НоваяГруппа.Видимость = Истина;
		НоваяГруппа.ОтображатьОтступСлева = Ложь;
		НоваяГруппа.ЦветФона = WebЦвета.СветлоЖелтый;
		НоваяГруппа.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
		
		НовыйЭлемент = Элементы.Добавить("ЗаголовокОтбора_" + ЭлементОтбора.Значение, Тип("ДекорацияФормы"), НоваяГруппа);
		
		// Разбитие на форматированную строку.
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(Лев(ЭлементОтбора.Представление, СтрНайти(ЭлементОтбора.Представление, ":")));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			Сред(ЭлементОтбора.Представление, СтрНайти(ЭлементОтбора.Представление, ":")+1),, ЦветаСтиляЦветТекстаФормы));
		НовыйЭлемент.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		
		НовыйЭлемент.ЦветТекста = ЦветаСтиляПоясняющийТекст;
		НовыйЭлемент.Гиперссылка = Истина;
		НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_Нажатие");
		
		НовыйЭлемент = Элементы.Добавить("ОчиститьОтбор_" + ЭлементОтбора.Значение, Тип("ДекорацияФормы"), НоваяГруппа);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Картинка;
		НовыйЭлемент.Картинка = БиблиотекаКартинок.Очистить;
		НовыйЭлемент.Гиперссылка = Истина;
		НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_Нажатие");
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуФормы(АдресРезультата, ДополнительныеПараметры)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда 
		ДанныеПоНоменклатуре = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если ДанныеПоНоменклатуре = Неопределено Тогда 
			Список.Очистить();
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Список.Очистить();
	
	Для каждого ЭлементКоллекции Из ДанныеПоНоменклатуре.ПереченьНоменклатуры Цикл
		
		ЗаполнитьЗначенияСвойств(Список.Добавить(), ЭлементКоллекции);
		
	КонецЦикла;
	
	КоличествоСтрок = Список.Количество();
	Если КоличествоСтрок = 0 Тогда
		ЗаголовокДекорации = НСтр("ru = 'Ничего не найдено'");
	ИначеЕсли КоличествоСтрок >= 500 Тогда
		ЗаголовокДекорации = НСтр("ru = 'Отображаются первые 500 позиций'");
	Иначе
		ЗаголовокДекорации = СтрШаблон(НСтр("ru = 'Найдено %1 позиций'"), КоличествоСтрок); 
	КонецЕсли;
	Элементы.ДекорацияОграничения.Заголовок = ЗаголовокДекорации;
	
	ТекущийБаланс = ДанныеПоНоменклатуре.ТекущийБаланс;
	
	ПроставитьПризнакЗагрузки();

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКореньКатегорийНажатие(Элемент)
	
	ПолучитьКатегории();
	
	СформироватьОтборыПоКатегории();
	
	ПолучитьНоменклатуру();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураКатегорийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторКатегории = НавигационнаяСсылкаФорматированнойСтроки;
	
	ПолучитьКатегории(ИдентификаторКатегории);
	
	СформироватьОтборыПоКатегории(ИдентификаторКатегории);
	
	ПолучитьНоменклатуру(ИдентификаторКатегории);
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекущийБаланс()
	
	Элементы.ДекорацияДоступноДляПокупки.Заголовок = 
		Новый ФорматированнаяСтрока(НСтр("ru = 'Доступно для покупки'") + 
			": " + Строка(Формат(ТекущийБаланс, "ЧН=0")),,,, "https://catalog-api.1c.ru/lk");
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеПослеОткрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("Логин") Тогда
		ИнтернетПоддержкаПодключена = Истина;
		ЗагрузитьДанныеПослеОткрытияЗавершение();
	Иначе
		ТекстСообщения = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Элементы.СтруктураКатегорий.Заголовок = НСтр("ru = 'Категории не загружены'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеПослеОткрытияЗавершение()
	
	ПолучитьКатегории(ТекущаяКатегория);
	СформироватьОтборыПоКатегории(ТекущаяКатегория);
	ПолучитьНоменклатуру(ТекущаяКатегория);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеОбработчики

&НаКлиенте
Процедура Подключаемый_НажатиеГиперссылки(Элемент)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.РаботаСНоменклатурой.Форма.ЗагрузкаНоменклатуры.Подключаемый_НажатиеГиперссылки");

	Если Не СтрНайти(Элемент.Имя, "ЗаголовокОтбора_") Тогда
		Возврат;
	КонецЕсли;
	
	СтрелкаВверх = "↑";
	СтрелкаВниз = "↓";
	
	ИмяГруппыОтбора = СтрЗаменить(Элемент.Имя, "ЗаголовокОтбора_", "ГруппаОтбора_");
	ГруппаОтбора = Элементы[ИмяГруппыОтбора];
	Если ГруппаОтбора.Видимость Тогда
		ГруппаОтбора.Видимость = Ложь;
		Элемент.Заголовок = СтрЗаменить(Элемент.Заголовок, СтрелкаВверх, СтрелкаВниз);
	ИначеЕсли ГруппаОтбора.ПодчиненныеЭлементы.Количество() Тогда
		ГруппаОтбора.Видимость = Истина;
		Элемент.Заголовок = СтрЗаменить(Элемент.Заголовок, СтрелкаВниз, СтрелкаВверх);
	Иначе
		Идентификатор = СтрЗаменить(Элемент.Имя, "ЗаголовокОтбора_", "");
		СформироватьЭлементыХарактеристики(Идентификатор, Элемент.Подсказка);
		ГруппаОтбора.Видимость = Истина;
		Элемент.Заголовок = СтрЗаменить(Элемент.Заголовок, СтрелкаВниз, СтрелкаВверх);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЭлементыХарактеристики(ИдентификаторРеквизита, Представление)
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("Идентификатор",        ИдентификаторРеквизита);
	ПараметрыЗавершения.Вставить("Представление",        Представление);
	ПараметрыЗавершения.Вставить("ИдентификаторЗадания", ИдентификаторЗаданияОбработкиФильтровРубрикатора);
	
	СформироватьЭлементыХарактеристикиПродолжение = Новый ОписаниеОповещения("СформироватьЭлементыХарактеристикиПродолжение",
		ЭтотОбъект, ПараметрыЗавершения);
		
	ДекорацияДлительноеОжидание = БиблиотекаКартинок.Пустая;
	
	Если ИдентификаторРеквизита = "Производитель" Тогда 
		
		РаботаСНоменклатуройКлиент.ПолучитьПроизводителейКатегории(СформироватьЭлементыХарактеристикиПродолжение,
			ТекущаяКатегория, ЭтотОбъект, ИдентификаторЗаданияОбработкиФильтровРубрикатора, Элементы["ДекорацияДлительнойОперацииОтбора_" + ИдентификаторРеквизита]);
	Иначе
		
		ПараметрыПоиска = Новый Структура();
		ПараметрыПоиска.Вставить("ИдентификаторДополнительногоРеквизита", ИдентификаторРеквизита);
		ПараметрыПоиска.Вставить("ИдентификаторКатегории",                ТекущаяКатегория);
	
		РаботаСНоменклатуройКлиент.ПолучитьЗначенияДополнительногоРеквизитаКатегории(СформироватьЭлементыХарактеристикиПродолжение,
			ПараметрыПоиска, ЭтотОбъект, ИдентификаторЗаданияОбработкиФильтровРубрикатора, Элементы["ДекорацияДлительнойОперацииОтбора_" + ИдентификаторРеквизита]);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЭлементыХарактеристикиПродолжение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ИдентификаторЗаданияОбработкиФильтровРубрикатора <> ДополнительныеПараметры.ИдентификаторЗадания Тогда 
		Возврат;
	КонецЕсли;
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	ИдентификаторЗаданияОбработкиФильтровРубрикатора = Неопределено;
	
	Элементы["ДекорацияДлительнойОперацииОтбора_" + ДополнительныеПараметры.Идентификатор].Картинка = БиблиотекаКартинок.Пустая;
	
	СформироватьЭлементыХарактеристикиЗавершение(Результат.АдресРезультата, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЭлементыХарактеристикиЗавершение(АдресРезультата, ДополнительныеПараметры)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда 
		ЗначенияХарактеристик = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если ЗначенияХарактеристик = Неопределено Тогда 
			Возврат;
		ИначеЕсли ЗначенияХарактеристик.Количество() = 0 Тогда 
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Идентификатор = ДополнительныеПараметры.Идентификатор;
	Представление = ДополнительныеПараметры.Представление;
	
	Если Не Идентификатор = "Производитель" Тогда 
		ЗначенияХарактеристик = ЗначенияХарактеристик[0].Значения;
	КонецЕсли;
	
	Если ЗначенияХарактеристик.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	
	МассивРеквизитов = Новый Массив;
	Реквизит = Новый РеквизитФормы("Отбор_" + Идентификатор, Новый ОписаниеТипов("СписокЗначений"));
	МассивРеквизитов.Добавить(Реквизит);
	ИзменитьРеквизиты(МассивРеквизитов);
	СписокДобавленныхРеквизитов.Добавить(Реквизит.Имя, Представление);
	СписокДобавленныхРеквизитов.СортироватьПоЗначению();
	
	Для Каждого Значение Из ЗначенияХарактеристик Цикл
		ЭтотОбъект[Реквизит.Имя].Добавить(Значение.Идентификатор, Значение.Наименование);
	КонецЦикла;
	
	// Сортировка элементов.
	ЭтотОбъект[Реквизит.Имя].СортироватьПоПредставлению();
	
	ГруппаОтборов = Элементы["ГруппаОтбора_" + Идентификатор];
	
	НовыйЭлемент = Элементы.Добавить("Отбор_" + Идентификатор, Тип("ТаблицаФормы"), ГруппаОтборов);
	НовыйЭлемент.Отображение = ОтображениеТаблицы.Список;
	НовыйЭлемент.АвтоМаксимальнаяВысота = Истина;
	Если ЗначенияХарактеристик.Количество() <= 5 Тогда
		НовыйЭлемент.Высота = ЗначенияХарактеристик.Количество() + 1;
	Иначе
		НовыйЭлемент.Высота = 6;
		НовыйЭлемент.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.ИспользоватьВсегда;
	КонецЕсли;
	НовыйЭлемент.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	НовыйЭлемент.РастягиватьПоВертикали = Ложь;
	НовыйЭлемент.ПутьКДанным = Реквизит.Имя;
	НовыйЭлемент.КоманднаяПанель.Видимость = Ложь;
	НовыйЭлемент.ЧередованиеЦветовСтрок = Истина;
	НовыйЭлемент.ЦветРамки = ЦветаСтиля.ЦветФонаФормы;
	НовыйЭлемент.Шрифт = Новый Шрифт(, 8);
	НовыйЭлемент.ИзменятьПорядокСтрок = Ложь;
	НовыйЭлемент.ИзменятьСоставСтрок = Ложь;
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ИзменениеОтбора");
	
	ЭлементКолонки = Элементы.Добавить(НовыйЭлемент.Имя + "_Пометка", Тип("ПолеФормы"), НовыйЭлемент);
	ЭлементКолонки.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементКолонки.ШиринаЭлемента = 1;
	ЭлементКолонки.ПутьКДанным = Реквизит.Имя + ".Пометка";
	ЭлементКолонки = Элементы.Добавить(НовыйЭлемент.Имя + "_Значение", Тип("ПолеФормы"), НовыйЭлемент);
	ЭлементКолонки.АвтоМаксимальнаяВысота = Истина;
	ЭлементКолонки.АвтоВысотаЯчейки = Истина;
	ЭлементКолонки.ТолькоПросмотр = Истина;
	ЭлементКолонки.ПутьКДанным = Реквизит.Имя + ".Значение";	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИзменениеОтбора(Элемент)
	
	ПолучитьНоменклатуру();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие(Элемент)
	
	Если Найти(Элемент.Имя, "ОчиститьОтбор_") Тогда
		
		// Очистка отбора.
		ИмяРеквизита = Сред(Элемент.Имя, СтрНайти(Элемент.Имя, "_") + 1);
		
		ЗначениеРеквизита = ЭтотОбъект[ИмяРеквизита];
		Если ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Тогда
			ЭтотОбъект[ИмяРеквизита] = Ложь;
		ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Число") Тогда
			ЭтотОбъект[ИмяРеквизита] = 0;
		ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Строка") Тогда
			ЭтотОбъект[ИмяРеквизита] = "";
		ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("СписокЗначений") Тогда 
			Для Каждого ЭлементСписка Из ЭтотОбъект[ИмяРеквизита] Цикл
				ЭлементСписка.Пометка = Ложь;
			КонецЦикла;
		Иначе
			Возврат;
		КонецЕсли;
		
		ПолучитьНоменклатуру();
		
	ИначеЕсли Найти(Элемент.Имя, "ЗаголовокОтбора_") Тогда
		
		ИмяРеквизита = Сред(Элемент.Имя, СтрНайти(Элемент.Имя, "_") + 1);
		
		Если Не Элементы.ГруппаПанельОтборов.Видимость Тогда
			Элементы.ПоказыватьОтборы.Пометка = Истина;
			Элементы.ГруппаПанельОтборов.Видимость = Истина;
		КонецЕсли;
		
		ТекущийЭлемент = Элементы[ИмяРеквизита];
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтроковыеКонстанты

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПредставленияКорневойКатегории()
	
	Возврат НСтр("ru = 'Все категории'");
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазделительПодкатегорий()
	
	Возврат "     ";
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазделительКатегорий()
	
	Возврат " • ";
		
КонецФункции

&НаСервере
Функция УсловиеИспользованияСервиса(РежимВыбора)
	
	МассивПодстрок = Новый Массив;
	
	МассивПодстрок.Добавить(НСтр("ru = 'Нажатие'") + " """);
	
	Если РежимВыбора Тогда
		МассивПодстрок.Добавить(НСтр("ru = 'Выбрать'"));
	Иначе
		МассивПодстрок.Добавить(НСтр("ru = 'Создать номенклатуру'"));
	КонецЕсли;
	
	МассивПодстрок.Добавить(""" " + НСтр("ru = 'означает согласие с'") + " ");
	МассивПодстрок.Добавить(
		Новый ФорматированнаяСтрока(НСтр("ru = 'Условиями использования сервиса'"),,,,
		"https://catalog-api.1c.ru/agreement/"));
		
	Возврат МассивПодстрок;
		
КонецФункции

#КонецОбласти