
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	Параметры.Свойство("РежимВыбораКатегории", РежимВыбораКатегории);
	Параметры.Свойство("ИдентификаторВыбраннойКатегории", ИдентификаторВыбраннойКатегории);
	Параметры.Свойство("ЗаполнятьПриВыборе", ЗаполнятьПриВыборе);
	
	ИмяФормыВидаНоменклатуры = Метаданные.НайтиПоТипу(ТипВидаНоменклатуры()).ПолноеИмя() +".Форма.ФормаСписка";
	
	ПравоИзмененияДанных = РаботаСНоменклатурой.ПравоИзмененияДанных();
	
	АвтоНавигационнаяСсылка = Ложь;
	НавигационнаяСсылка = "e1cib/app/" + ЭтотОбъект.ИмяФормы;
	
	ИнтернетПоддержкаПодключена = ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	
	ПодготовитьКэшКатегорий();
	ПодготовитьМакеты();
	НастроитьВнешнийВидФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ИнтернетПоддержкаПодключена Тогда
		ПостроитьДеревоПослеОткрытияЗавершение();
	Иначе	
		ПостроитьДеревоПослеОткрытияПродолжение = Новый ОписаниеОповещения("ПостроитьДеревоПослеОткрытияПродолжение",
			ЭтотОбъект);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ПостроитьДеревоПослеОткрытияПродолжение,
			ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтрокаПоиска) И РежимОтбораПоСтроке Тогда
		НачатьПозиционированиеНаВыбранном();
	ИначеЕсли ЗначениеЗаполнено(СтрокаПоиска) Тогда
		СформироватьРезультатПоиска();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Элементы.СтрокаПоиска.ТекстРедактирования) Тогда
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	СтрокаПоиска = Элементы.СтрокаПоиска.ТекстРедактирования;
	
	СформироватьРезультатПоиска();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	Если Не РежимОтбораПоСтроке Тогда
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	НачатьПозиционированиеНаВыбранном();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКатегории

&НаКлиенте
Процедура КатегорииПередРазворачиванием(Элемент, Строка, Отказ)
	
	СтрокаДерева = Категории.НайтиПоИдентификатору(Строка);
	
	Если СтрокаДерева.ДочерниеПодгружены Тогда
		Возврат;
	КонецЕсли; 
	

	////////////////////////////////////////////////////////////////////////////////
	
	Отказ = Истина;
	ПостроитьДеревоКатегорий(Строка, "", Элементы.ТолькоВыбранные.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Категории.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	////////////////////////////////////////////////////////////////////////////////
	
	Баннер = "";
	Если ТекущиеДанные.КоличествоПодчиненных > 0 Тогда
		ДанныеПоКатегории = ПредставлениеГруппыКатегории(ДанныеОГруппе(ТекущиеДанные));
	Иначе 
		Если НЕ ДанныеЗагруженыИзКэша(ТекущиеДанные.Идентификатор) Тогда
			СформироватьПредставлениеКатегории(ТекущиеДанные);
		КонецЕсли; 
	КонецЕсли;
	
	Элементы.ВыбратьКатегорию.Доступность = ТекущиеДанные.КоличествоПодчиненных = 0;
	Элементы.Баннер.Гиперссылка = Не ПустаяСтрока(Баннер);
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Категории.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
		
	////////////////////////////////////////////////////////////////////////////////
	
	Если ТекущиеДанные.Пометка = 2 Тогда
		ТекущиеДанные.Пометка = 0;
	КонецЕсли; 

	ИзменитьПометкуРодителей(ТекущиеДанные, ТекущиеДанные.Пометка);
	ИзменитьПометкуПодчиненных(ТекущиеДанные, ТекущиеДанные.Пометка);
	
	Если НЕ ТекущиеДанные.Пометка И Элементы.ТолькоВыбранные.Пометка Тогда
		УдалитьСтрокиБезПометки(Категории);
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура БаннерНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ПустаяСтрока(СсылкаПереходаПоБаннеру) Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(СсылкаПереходаПоБаннеру); 
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьКатегорию(Команда)
	
	Если ЗаполнятьПриВыборе Тогда
		ПоказатьВопросПриВыбореКатегории();
	Иначе
		ВыбратьКатегориюИзСписка();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТолькоВыбранные(Команда)
	
	Элементы.ТолькоВыбранные.Пометка = НЕ Элементы.ТолькоВыбранные.Пометка;
	
	РежимТолькоВыбранные = Элементы.ТолькоВыбранные.Пометка;
	
	Если Элементы.ТолькоВыбранные.Пометка Тогда
		ЗакэшироватьДерево();
		УдалитьСтрокиБезПометки(Категории);
	Иначе 
		ИзменитьЗначениеПометок(ЭтотОбъект.КэшКатегорий, 0);
		ВосстановитьДеревоИПометки();
	КонецЕсли;
	
	УправлениеВидимостьюДоступностью(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	ИзменитьЗначениеПометок(Категории, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	ИзменитьЗначениеПометок(Категории, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКатегории(Команда)
	
	КатегорииКЗагрузке = КатегорииКЗагрузке();
	
	Если КатегорииКЗагрузке.Количество() = 0 Тогда 
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не выбраны категории для загрузки.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("ИдентификаторЗадания", Неопределено);
	ПараметрыЗавершения.Вставить("КатегорииКЗагрузке",   КатегорииКЗагрузке);
	
	ЗагрузитьКатегорииЗавершение = Новый ОписаниеОповещения("ЗагрузитьКатегорииЗавершение",
		ЭтотОбъект, ПараметрыЗавершения);
	
	РаботаСНоменклатуройКлиент.ЗагрузитьКатегории(ЗагрузитьКатегорииЗавершение, КатегорииКЗагрузке, ЭтотОбъект, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПостроитьДеревоПослеОткрытияПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("Логин") Тогда
		ИнтернетПоддержкаПодключена = Истина;
		ПостроитьДеревоПослеОткрытияЗавершение();
	Иначе
		ТекстСообщения = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПостроитьДеревоПослеОткрытияЗавершение()
	
	Если Не ЗначениеЗаполнено(ИдентификаторВыбраннойКатегории) Тогда
		ПостроитьДеревоКатегорий();
	Иначе
		СпозиционироватьНаВыбранном(ИдентификаторВыбраннойКатегории);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриВыбореКатегории(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ВыбратьКатегориюИзСписка();
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросПриВыбореКатегории()
	
	ТекущаяКатегория = "";
	
	Если Элементы.Категории.ТекущиеДанные <> Неопределено Тогда
		ТекущаяКатегория = Элементы.Категории.ТекущиеДанные.Наименование;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВопросПриВыбореКатегории", ЭтотОбъект);
	
	ПоказатьВопрос(Оповещение, 
		СтрШаблон(НСтр("ru = 'Текущий вид номенклатуры будет заполнен на основании категории %1 и записан. Продолжить?'"), 
			ТекущаяКатегория), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипВидаНоменклатуры()
	
	Возврат Метаданные.ОпределяемыеТипы.ВидНоменклатурыРаботаСНоменклатурой.Тип.Типы()[0];
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьКатегорииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Ошибка    = Ложь;
	Закрывать = Истина;
	Если ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда 
		РезультатЗагрузки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если РезультатЗагрузки = Неопределено Тогда 
			Ошибка = Истина;
		КонецЕсли;
	Иначе
		Ошибка = Истина;
	КонецЕсли;
	
	ПроставитьПризнакЗагрузки = Ложь;
	
	Если Ошибка Тогда 
		
		Закрывать = Ложь;
		
		НажатиеОповещенияПользователя = "";
		КартинкаОповещения = БиблиотекаКартинок.Ошибка32;
		ТекстОповещения = НСтр("ru = 'Создать не удалось'");
		
	ИначеЕсли РезультатЗагрузки.Создано <> РезультатЗагрузки.ДолжноБытьСоздано Тогда 
		
		Закрывать = Ложь;
		
		НажатиеОповещенияПользователя = Новый ОписаниеОповещения("НажатиеОповещенияПользователя",
			ЭтотОбъект, РезультатЗагрузки.НовыеЭлементы);
		КартинкаОповещения = БиблиотекаКартинок.Предупреждение32;
		ТекстОповещения = СтрШаблон(НСтр("ru = 'Создано элементов %1 из %2'"),
			РезультатЗагрузки.Создано, РезультатЗагрузки.ДолжноБытьСоздано);
			
		ПроставитьПризнакЗагрузки = Истина;
		
		Оповестить("РаботаСНоменклатурой_ЗагрузкаКатегорийЗавершена", РезультатЗагрузки.НовыеЭлементы);
		
	Иначе
		
		Закрывать = Истина;
		
		НажатиеОповещенияПользователя = Новый ОписаниеОповещения("НажатиеОповещенияПользователя",
			ЭтотОбъект, РезультатЗагрузки.НовыеЭлементы);
		КартинкаОповещения = БиблиотекаКартинок.Успешно32;
		ТекстОповещения = СтрШаблон(НСтр("ru = 'Создано элементов %1'"), РезультатЗагрузки.Создано);
		
		Оповестить("РаботаСНоменклатурой_ЗагрузкаКатегорийЗавершена", РезультатЗагрузки.НовыеЭлементы);
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Загрузка категорий'"), НажатиеОповещенияПользователя, ТекстОповещения, КартинкаОповещения, СтатусОповещенияПользователя.Информация, УникальныйИдентификатор);
	
	Если Закрывать Тогда 
		Закрыть();
	КонецЕсли;
	
	Если ПроставитьПризнакЗагрузки Тогда 
		ПроставитьПризнакЗагрузки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НажатиеОповещенияПользователя(ДополнительныеПараметры) Экспорт 
	
	ПараметрыОткрытияФормыСписка = Новый Структура();
	ПараметрыОткрытияФормыСписка.Вставить("Отбор", Новый Структура("Ссылка", ДополнительныеПараметры));
	ОткрытьФорму(ИмяФормыВидаНоменклатуры, ПараметрыОткрытияФормыСписка, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКатегориюИзСписка()
	
	ВыбраннаяКатегория = Неопределено;
	
	Если Элементы.Категории.ТекущиеДанные <> Неопределено Тогда
				
		ВыбраннаяКатегория = Новый Структура("Наименование, Идентификатор, ЗаполнятьПриВыборе",
			Элементы.Категории.ТекущиеДанные.Наименование,
			Элементы.Категории.ТекущиеДанные.Идентификатор,
			ЗаполнятьПриВыборе);
		
	КонецЕсли;
	
	Закрыть(ВыбраннаяКатегория);
		
КонецПроцедуры

&НаКлиенте
Процедура НачатьПозиционированиеНаВыбранном()
	
	Идентификатор = Неопределено;
	
	Если Элементы.Категории.ТекущиеДанные <> Неопределено Тогда
		Идентификатор = Элементы.Категории.ТекущиеДанные.Идентификатор;
	КонецЕсли;
	
	Элементы.Категории.Отображение = ОтображениеТаблицы.Дерево;
	
	ВосстановитьДеревоИзКэша();
	
	СпозиционироватьНаВыбранном(Идентификатор);
	
	РежимОтбораПоСтроке = Ложь;
	
	УправлениеВидимостьюДоступностью(ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Функция ДобавитьСтрокуВДерево(ТекущаяВетка, ДанныеДляДобавления, СоздаватьФантомныеЭлементы, УстановитьПометку, КэшироватьПредставлениеКатегории = Ложь)
	
	Если ТипЗнч(ТекущаяВетка) = Тип("СтрокаДереваЗначений") Тогда
		НоваяСтрока = ТекущаяВетка.Строки.Добавить();	
	Иначе 
		НоваяСтрока = ТекущаяВетка.ПолучитьЭлементы().Добавить();	
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДляДобавления);
		
	Если НоваяСтрока.Загружена Тогда
		НоваяСтрока.Пометка = 1;
	КонецЕсли; 
	
	Если УстановитьПометку Тогда
		НоваяСтрока.Пометка = 1;	
	КонецЕсли; 
	
	Если НЕ ДанныеДляДобавления.ЛистоваяКатегория Тогда
		НоваяСтрока.ИндексКартинки = 0;
		
		Если СоздаватьФантомныеЭлементы Тогда
			СоздатьФантомныйЭлемент(НоваяСтрока, УстановитьПометку);	
		КонецЕсли;
	Иначе
		НоваяСтрока.ИндексКартинки = 3;
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Процедура СоздатьФантомныйЭлемент(НоваяСтрока, УстановитьПометку)
	
	Если ТипЗнч(НоваяСтрока) = Тип("СтрокаДереваЗначений") Тогда
		ТехническаяВетка = НоваяСтрока.Строки.Добавить();
	Иначе 
		ТехническаяВетка = НоваяСтрока.ПолучитьЭлементы().Добавить();
	КонецЕсли; 
	
	ТехническаяВетка.ТехническаяСтрока = Истина;
	
	Если УстановитьПометку Тогда
		ТехническаяВетка.Пометка = 1;	
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьДеревоКатегорий(ИдентификаторСтроки = Неопределено, ТекстПоиска = "", ПродублироватьВКэше = Ложь)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.РаботаСНоменклатурой.Форма.ЗагрузкаКатегорий.ПостроитьДеревоКатегорий");

	ТекущаяВетка       = Неопределено;
	КатегорииСервиса   = Новый Массив;
	ТребуетсяПодгрузка = Истина;
	
	ПодготовитьТекущуюВетку(Категории, ТекущаяВетка, ИдентификаторСтроки, ТребуетсяПодгрузка);
	
	Если НЕ ТребуетсяПодгрузка Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = Неопределено;
	Если ТипЗнч(ТекущаяВетка) = Тип("ДанныеФормыЭлементДерева") Тогда
		Идентификатор = ТекущаяВетка.Идентификатор;
	КонецЕсли;
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("ИдентификаторСтроки",  ИдентификаторСтроки);
	ПараметрыЗавершения.Вставить("ПродублироватьВКэше",  ПродублироватьВКэше);
	ПараметрыЗавершения.Вставить("ТребуетсяПодгрузка",   ТребуетсяПодгрузка);
	ПараметрыЗавершения.Вставить("ТекстПоиска",          ТекстПоиска);
	ПараметрыЗавершения.Вставить("ИдентификаторЗадания", Неопределено);
	
	КоличествоЗаданий = КоличествоЗаданий + 1;
	
	ПостроитьДеревоКатегорийЗавершение = Новый ОписаниеОповещения("ПостроитьДеревоКатегорийЗавершение",
		ЭтотОбъект, ПараметрыЗавершения);
		
	Если ЗначениеЗаполнено(ТекстПоиска) Тогда
		РаботаСНоменклатуройКлиент.НайтиКатегорииПоСтрокеПоиска(ПостроитьДеревоКатегорийЗавершение, ТекстПоиска, ЭтотОбъект, Неопределено,
			Элементы.ДекорацияДлительнаяОперация)
	Иначе 
		Если Идентификатор = Неопределено Тогда 
			РаботаСНоменклатуройКлиент.ПолучитьКорневыеКатегории(ПостроитьДеревоКатегорийЗавершение, ЭтотОбъект, Неопределено,
				Элементы.ДекорацияДлительнаяОперация);
		Иначе	
			РаботаСНоменклатуройКлиент.ПолучитьПолноеОписаниеДочернихКатегорий(ПостроитьДеревоКатегорийЗавершение, Идентификатор, ЭтотОбъект, Неопределено,
				Элементы.ДекорацияДлительнаяОперация);
		КонецЕсли;
	КонецЕсли; 
	
	УстановитьВидимостьДоступностьЭлементовПриДлительнойОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьДеревоКатегорийЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	КоличествоЗаданий = Макс(КоличествоЗаданий - 1, 0);
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
		
	ЗагрузитьДанныеДерева(Результат.АдресРезультата, ДополнительныеПараметры);
	
	УстановитьВидимостьДоступностьЭлементовПриДлительнойОперации();
	
	ЗакэшироватьИзображенияБаннеров();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеДерева(АдресРезультата, ДополнительныеПараметры)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда 
		КатегорииСервиса = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если КатегорииСервиса = Неопределено Тогда 
			Возврат;
		ИначеЕсли КатегорииСервиса.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
	ПродублироватьВКэше = ДополнительныеПараметры.ПродублироватьВКэше;
	ТекстПоиска         = ДополнительныеПараметры.ТекстПоиска;
	
	ДобавитьСтрокиВДерево(КатегорииСервиса, ИдентификаторСтроки, ПродублироватьВКэше, ТекстПоиска);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиВДерево(Знач КатегорииСервиса, ИдентификаторСтроки, ПродублироватьВКэше, ТекстПоиска)
	
	ТекущаяВетка        = Неопределено;
	ПодготовитьТекущуюВетку(Категории, ТекущаяВетка, ИдентификаторСтроки);
	
	////////////////////////////////////////////////////////////////////////////////
	
	ПодготовитьТаблицуКатегорий(КатегорииСервиса);
	
	Если ПродублироватьВКэше Тогда
		ДеревоКатегорийКэш = РеквизитФормыВЗначение("КэшКатегорий");
		ТекущаяВеткаКэша = ДеревоКатегорийКэш.Строки.Найти(ТекущаяВетка.Идентификатор, "Идентификатор", Истина);
		ТекущаяВеткаКэша.Строки.Очистить();
		ТекущаяВеткаКэша.ДочерниеПодгружены = Истина;
	КонецЕсли; 
	
	////////////////////////////////////////////////////////////////////////////////
	
	УстановитьПометку          = ИдентификаторСтроки <> Неопределено И ТекущаяВетка.Пометка = 1;
	СоздаватьФантомныеЭлементы = НЕ ЗначениеЗаполнено(ТекстПоиска);
	ПерваяСтрока               = Неопределено;
	
	Для каждого ЭлементКоллекции Из КатегорииСервиса Цикл
		
		// Кэшируем представление листовых категорий если идет разворачивание группы
		// или отрабатывается поиск по строке.
		
		КэшироватьПредставлениеКатегории 
			= ЭлементКоллекции.ЛистоваяКатегория 
				И (ИдентификаторСтроки <> Неопределено ИЛИ ЗначениеЗаполнено(ТекстПоиска)); 
				
		Если КэшироватьПредставлениеКатегории Тогда
			ПодготовитьПредставлениеКатегории(ЭлементКоллекции);
		КонецЕсли;
				
		НоваяСтрока = ДобавитьСтрокуВДерево(ТекущаяВетка, ЭлементКоллекции, СоздаватьФантомныеЭлементы, УстановитьПометку, КэшироватьПредставлениеКатегории);
		
		Если ПерваяСтрока = Неопределено Тогда 
			ПерваяСтрока = НоваяСтрока;
		КонецЕсли;
		
		Если ПродублироватьВКэше Тогда
			ДобавитьСтрокуВДерево(ТекущаяВеткаКэша, ЭлементКоллекции, СоздаватьФантомныеЭлементы, УстановитьПометку);
		КонецЕсли; 
		
	КонецЦикла;
	
	Если Не ПерваяСтрока = Неопределено Тогда 
		Элементы.Категории.ТекущаяСтрока = ПерваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если ПродублироватьВКэше Тогда
		ЗначениеВРеквизитФормы(ДеревоКатегорийКэш, "КэшКатегорий");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПодготовитьТекущуюВетку(Категории, ТекущаяВетка, ИдентификаторСтроки, ТребуетсяПодгрузка = Истина)
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		
		ТекущаяВетка = Категории.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ТекущаяВетка.ДочерниеПодгружены Тогда
			ТребуетсяПодгрузка = Ложь;
			Возврат;
		КонецЕсли;
		
		ТекущаяВетка.ДочерниеПодгружены = Истина;	
		
	Иначе
		ТекущаяВетка = Категории;
	КонецЕсли;
	
	ТекущаяВетка.ПолучитьЭлементы().Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьТаблицуКатегорий(ТаблицаКатегорий)
	
	ЛистовыеКатегории = Новый Массив;
	
	ТаблицаКатегорий.Колонки.Добавить("ЛистоваяКатегория", Новый ОписаниеТипов("Булево"));
	ТаблицаКатегорий.Колонки.Добавить("Загружена", Новый ОписаниеТипов("Булево"));
	
	ЛистовыеСтроки = ТаблицаКатегорий.НайтиСтроки(Новый Структура("КоличествоПодчиненных", 0));
	
	Для каждого ЭлементКоллекции Из ЛистовыеСтроки Цикл
		ЭлементКоллекции.ЛистоваяКатегория = Истина;
		ЛистовыеКатегории.Добавить(ЭлементКоллекции.Идентификатор);
	КонецЦикла;
		
	Если ЛистовыеКатегории.Количество() > 0 Тогда
		ПроставитьПризнакЗагрузки(ЛистовыеКатегории, ТаблицаКатегорий);
	КонецЕсли; 
	
	ТаблицаКатегорий.Сортировать("ЛистоваяКатегория, Наименование");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостьюДоступностью(Форма)
	
	// Отбор по строке
	
	Форма.Элементы.КатегорииПометка.ТолькоПросмотр = Форма.РежимОтбораПоСтроке;
	Форма.Элементы.НадписьКоличествоКатегорийПриПоиске.Видимость = Форма.РежимОтбораПоСтроке;
	Форма.Элементы.КоманднаяПанельКатегорий.Доступность = НЕ Форма.РежимОтбораПоСтроке;
	Форма.Элементы.ЗагрузитьКатегории.Доступность = НЕ Форма.РежимОтбораПоСтроке;
	
	// Только выбранные
	
	Форма.Элементы.СтрокаПоиска.Доступность = НЕ Форма.РежимТолькоВыбранные;
	Форма.Элементы.УстановитьФлажки.Доступность = НЕ Форма.РежимТолькоВыбранные;
	Форма.Элементы.СнятьФлажки.Доступность = НЕ Форма.РежимТолькоВыбранные;
	
	Если НЕ Форма.ПравоИзмененияДанных Тогда
		Форма.Элементы.ЗагрузитьКатегории.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура НастроитьВнешнийВидФормы()
	
	Элементы.ЗагрузитьКатегории.Видимость         = НЕ РежимВыбораКатегории;
	Элементы.ЗагрузитьКатегории.КнопкаПоУмолчанию = НЕ РежимВыбораКатегории;
	Элементы.КоманднаяПанельКатегорий.Видимость   = НЕ РежимВыбораКатегории;
	Элементы.КатегорииПометка.Видимость           = НЕ РежимВыбораКатегории;
	Элементы.ПодсказкаКФорме.Видимость            = НЕ РежимВыбораКатегории;
	
	Элементы.ВыбратьКатегорию.Видимость           = РежимВыбораКатегории;
	Элементы.ВыбратьКатегорию.КнопкаПоУмолчанию   = РежимВыбораКатегории;
	
	Если НЕ ПравоИзмененияДанных Тогда
		Элементы.ЗагрузитьКатегории.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПодготовитьПредставлениеКатегории(ДанныеДляДобавления)
	
	Если КэшПредставленийКатегорий.НайтиСтроки(Новый Структура("Идентификатор", ДанныеДляДобавления.Идентификатор)).Количество() > 0 Тогда
		Возврат;
	КонецЕсли; 
	
	////////////////////////////////////////////////////////////////////////////////
	
	НоваяСтрока = КэшПредставленийКатегорий.Добавить();
	
	НоваяСтрока.Идентификатор = ДанныеДляДобавления.Идентификатор;
	
	ТабличныйДокументКатегории = ПредставлениеКатегории(ДанныеДляДобавления);
	
	НоваяСтрока.ПутьКТабличномуДокументу = ПоместитьВоВременноеХранилище(ТабличныйДокументКатегории, УникальныйИдентификатор);
	
	НоваяСтрока.ИдентификаторРекламнойЗаписи = ДанныеДляДобавления.ИдентификаторРекламнойЗаписи;
	НоваяСтрока.ЗакэшироватьБаннер = Не ПустаяСтрока(ДанныеДляДобавления.ИдентификаторРекламнойЗаписи);
	
КонецПроцедуры

&НаКлиенте
Функция КатегорииКЗагрузке()
	
	КатегорииКЗагрузке = Новый Массив;
	
	ЗаполнитьПомеченныеКатегории(Категории, КатегорииКЗагрузке);
	
	Возврат КатегорииКЗагрузке; 
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПомеченныеКатегории(ТекущаяВетка, КатегорииКЗагрузке)
	
	Для каждого ЭлементКоллекции Из ТекущаяВетка.ПолучитьЭлементы() Цикл
		
		Если НЕ ЭлементКоллекции.Пометка Тогда
			Продолжить;
		КонецЕсли; 
		
		Если НЕ ОтрабатыватьСтроку(ЭлементКоллекции) Тогда
			Продолжить;
		КонецЕсли;	
		
		////////////////////////////////////////////////////////////////////////////////
		
		Если ЭлементКоллекции.ТехническаяСтрока Тогда
			КатегорииКЗагрузке.Добавить(СтруктураДанных(ЭлементКоллекции.ПолучитьРодителя()));
			Возврат;	
		КонецЕсли;
		
		////////////////////////////////////////////////////////////////////////////////
		
		Если ЭлементКоллекции.КоличествоПодчиненных = 0 Тогда
			КатегорииКЗагрузке.Добавить(СтруктураДанных(ЭлементКоллекции));
		Иначе 
			ЗаполнитьПомеченныеКатегории(ЭлементКоллекции, КатегорииКЗагрузке);
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураДанных(СтрокаДерева)
	
	Данные = Новый Структура;
	
	Данные.Вставить("Наименование", СтрокаДерева.Наименование);
	Данные.Вставить("Идентификатор", СтрокаДерева.Идентификатор);
	Данные.Вставить("КоличествоПодчиненных", СтрокаДерева.КоличествоПодчиненных);
	
	Возврат Данные;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Загруженные элементы
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Категории.Загружена");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КатегорииПометка.Имя);
	
	// Выделение строки в режиме выбора категории
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Категории.Идентификатор");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ИдентификаторВыбраннойКатегории;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КатегорииНаименование.Имя)
		
		
КонецПроцедуры

&НаКлиенте
Процедура СформироватьРезультатПоиска()
	
	Если НЕ РежимОтбораПоСтроке Тогда
		
		Элементы.Категории.Отображение = ОтображениеТаблицы.Список;
		
		ЗакэшироватьДерево();
		
		РежимОтбораПоСтроке = Истина;
		
		Категории.ПолучитьЭлементы().Очистить();
		
		УправлениеВидимостьюДоступностью(ЭтаФорма);
		
	КонецЕсли; 
	
	ПостроитьДеревоКатегорий(Неопределено, СтрокаПоиска);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьКэшКатегорий()
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("КэшКатегорий", Новый ОписаниеТипов("ДеревоЗначений")));
	
	ДеревоДанные = РеквизитФормыВЗначение("Категории");
	
	Для каждого ЭлементКоллекции Из ДеревоДанные.Колонки Цикл
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ЭлементКоллекции.Имя, ЭлементКоллекции.ТипЗначения, "КэшКатегорий"));
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);

КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревом

&НаКлиенте
Процедура УдалитьСтрокиБезПометки(ТекущаяВетка)
	
	Счетчик = 0;
	
	ЭлементыДерева = ТекущаяВетка.ПолучитьЭлементы();
	
	Пока Счетчик < ЭлементыДерева.Количество() Цикл
				
		Если ЭлементыДерева[Счетчик].ПолучитьЭлементы().Количество() <> 0 Тогда
			УдалитьСтрокиБезПометки(ЭлементыДерева[Счетчик]);
		КонецЕсли;
				
		Если (ЭлементыДерева[Счетчик].Пометка = 0
			И ЭлементыДерева[Счетчик].ПолучитьЭлементы().Количество() = 0)
				ИЛИ НЕ ОтрабатыватьСтроку(ЭлементыДерева[Счетчик]) Тогда
			
			ЭлементыДерева.Удалить(ЭлементыДерева[Счетчик]);
		Иначе
			Счетчик = Счетчик + 1	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СпозиционироватьНаВыбранном(ИдентификаторВыбраннойКатегории)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.РаботаСНоменклатурой.Форма.ЗагрузкаКатегорий.СпозиционироватьНаВыбранном");	
	
	Если ИдентификаторВыбраннойКатегории = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЕстьКорневыеКатегории = КэшПредставленийКатегорий.Количество() > 0;
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("ИдентификаторЗадания",  Неопределено);
	ПараметрыЗавершения.Вставить("ЕстьКорневыеКатегории", ЕстьКорневыеКатегории);
	
	СпозиционироватьНаВыбранномЗавершение = 
		Новый ОписаниеОповещения("СпозиционироватьНаВыбранномЗавершение", ЭтотОбъект, ПараметрыЗавершения);
		
	КоличествоЗаданий = КоличествоЗаданий + 1;	
		
	Если ЕстьКорневыеКатегории Тогда 
		РаботаСНоменклатуройКлиент.ПолучитьКатегорииНаПутиКЭлементу(СпозиционироватьНаВыбранномЗавершение, ИдентификаторВыбраннойКатегории, ЭтотОбъект, Неопределено,
			Элементы.ДекорацияДлительнаяОперация);
	Иначе
		РаботаСНоменклатуройКлиент.ПолучитьКатегорииНаПутиКЭлементуСКорневымиКатегориями(СпозиционироватьНаВыбранномЗавершение, ИдентификаторВыбраннойКатегории, ЭтотОбъект, Неопределено,
			Элементы.ДекорацияДлительнаяОперация);
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементовПриДлительнойОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура СпозиционироватьНаВыбранномЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КоличествоЗаданий = Макс(КоличествоЗаданий - 1, 0);
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
		
	СтрокаДляПозиционирования = ЗагрузитьЭлементыДоВыбраннойКатегории(Результат.АдресРезультата, ДополнительныеПараметры.ЕстьКорневыеКатегории);
	
	Если СтрокаДляПозиционирования = Неопределено Тогда
		УстановитьВидимостьДоступностьЭлементовПриДлительнойОперации();
		Возврат;
	КонецЕсли; 
	
	Элементы.Категории.ТекущаяСтрока = СтрокаДляПозиционирования;
	
	УстановитьВидимостьДоступностьЭлементовПриДлительнойОперации();
	
	ЗакэшироватьИзображенияБаннеров();
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьЭлементыДоВыбраннойКатегории(АдресРезультата, ЕстьКорневыеКатегории)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда 
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если Результат = Неопределено Тогда 
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ПутьККатегории = Результат.ИдентификаторыКатегорийУзлов;
	Если ПутьККатегории = Неопределено 
		ИЛИ ПутьККатегории.Количество() = 0 Тогда
		
		Возврат Неопределено;
	КонецЕсли; 
	
	ТаблицаКатегорий = Результат.ТаблицаКатегорий;
	ТаблицаКатегорий.Индексы.Добавить("ИдентификаторРодителя");
	
	////////////////////////////////////////////////////////////////////////////////
	
	ПутьКЭлементу = Новый Массив;
	
	Если ЕстьКорневыеКатегории = Ложь Тогда 
		ДобавитьСтрокиВДерево(Результат.КорневыеКатегории, Неопределено, Ложь, ""); 
	КонецЕсли;
	
	ТекущаяГруппа = Категории.ПолучитьЭлементы();
	
	Для Индекс = -ПутьККатегории.Количество()+1 По 0 Цикл
		ЭлементКоллекции =  ПутьККатегории[-Индекс];
		Для каждого СтрокаДереваПоИдентификатору Из ТекущаяГруппа Цикл
			Если СтрокаДереваПоИдентификатору.Идентификатор = ЭлементКоллекции Тогда
				
				ИдентификаторСтроки = СтрокаДереваПоИдентификатору.ПолучитьИдентификатор();
				ПутьКЭлементу.Добавить(ИдентификаторСтроки);
				
				Если НЕ СтрокаДереваПоИдентификатору.ДочерниеПодгружены Тогда
					ОтборПоРодителю = Новый Структура("ИдентификаторРодителя", ЭлементКоллекции);
					ДочерниеЭлементы = ТаблицаКатегорий.Скопировать(ОтборПоРодителю);
					Если ДочерниеЭлементы.Количество() Тогда 
						ДобавитьСтрокиВДерево(ДочерниеЭлементы, ИдентификаторСтроки, Ложь, ""); 
					КонецЕсли;
				КонецЕсли;
				
				ТекущаяГруппа = СтрокаДереваПоИдентификатору.ПолучитьЭлементы();
				
				Прервать;
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;
	
	Если ПутьКЭлементу.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат ПутьКЭлементу[ПутьКЭлементу.ВГраница()];	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗакэшироватьИзображенияБаннеров()
	
	МассивДляКэширования = КэшПредставленийКатегорий.НайтиСтроки(Новый Структура("ЗакэшироватьБаннер", Истина));
	Если МассивДляКэширования.Количество() Тогда
		ИдентификаторыИсточников = Новый Массив;
		
		Для Каждого ЗаписьКэша Из МассивДляКэширования Цикл 
			Если Не ПустаяСтрока(ЗаписьКэша.ИдентификаторРекламнойЗаписи) 
				И ИдентификаторыИсточников.Найти(ЗаписьКэша.ИдентификаторРекламнойЗаписи) = Неопределено Тогда 
				ИдентификаторыИсточников.Добавить(ЗаписьКэша.ИдентификаторРекламнойЗаписи);
			КонецЕсли;
		КонецЦикла;

		ЗакэшироватьИзображенияБаннеровЗавершение = Новый ОписаниеОповещения("ЗакэшироватьИзображенияБаннеровЗавершение",
			ЭтотОбъект);
			
		РаботаСНоменклатуройКлиент.ЗакэшироватьИзображенияБаннеров(ЗакэшироватьИзображенияБаннеровЗавершение, ИдентификаторыИсточников, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакэшироватьИзображенияБаннеровЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда 
		КэшБаннеров = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если КэшБаннеров = Неопределено Тогда 
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Для Каждого Кэш Из КэшБаннеров Цикл 
		МассивДляКэширования = КэшПредставленийКатегорий.НайтиСтроки(Новый Структура("ИдентификаторРекламнойЗаписи", Кэш.Ключ));
		Для Каждого ЗаписьКэша Из МассивДляКэширования Цикл 
			ЗаписьКэша.ЗакэшироватьБаннер      = Ложь;
			ЗаписьКэша.ПутьКДаннымБаннера      = Кэш.Значение.ПутьКДаннымБаннера;
			ЗаписьКэша.СсылкаПереходаПоБаннеру = Кэш.Значение.СсылкаПереходаПоБаннеру;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры



&НаСервере
Процедура ЗакэшироватьДерево()
	
	ДеревоДанные = РеквизитФормыВЗначение("Категории");
	
	ЗначениеВРеквизитФормы(ДеревоДанные.Скопировать(), "КэшКатегорий");
		
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДеревоИзКэша()
	
	ДеревоДанные = РеквизитФормыВЗначение("КэшКатегорий");
		
	ЗначениеВРеквизитФормы(ДеревоДанные.Скопировать(), "Категории");
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДеревоИПометки()
	
	ДеревоДанные = РеквизитФормыВЗначение("КэшКатегорий");
	
	СкопироватьПометки(Категории, ДеревоДанные);
		
	ЗначениеВРеквизитФормы(ДеревоДанные.Скопировать(), "Категории");
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьПометки(ТекущаяВетка, ДеревоДанные)
		
	Для каждого ЭлементКоллекции Из ТекущаяВетка.ПолучитьЭлементы() Цикл
		
		Если ЭлементКоллекции.ТехническаяСтрока Тогда
			ДеревоДанные.Строки[0].Пометка = ЭлементКоллекции.Пометка;
			Возврат;
		КонецЕсли;
		
		////////////////////////////////////////////////////////////////////////////////
		
		СтрокаВКэшеДанных = ДеревоДанные.Строки.Найти(ЭлементКоллекции.Идентификатор, "Идентификатор", Истина);
				
		Если СтрокаВКэшеДанных <> Неопределено Тогда
			СтрокаВКэшеДанных.Пометка = ЭлементКоллекции.Пометка
		КонецЕсли; 
		
		Если ЭлементКоллекции.ПолучитьЭлементы().Количество() > 0 Тогда
			СкопироватьПометки(ЭлементКоллекции, СтрокаВКэшеДанных)
		КонецЕсли; 
				
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗначениеПометок(ТекущаяВетка, ЗначениеПометки)
	
	Для каждого ЭлементКоллекции Из ТекущаяВетка.ПолучитьЭлементы() Цикл
		
		Если Не ОтрабатыватьСтроку(ЭлементКоллекции) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементКоллекции.Пометка = ЗначениеПометки;
		
		Если ЭлементКоллекции.ПолучитьЭлементы().Количество() > 0 Тогда
			ИзменитьЗначениеПометок(ЭлементКоллекции, ЗначениеПометки);
		КонецЕсли; 
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометкуРодителей(ТекущиеДанные, Пометка)
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;	
		
	Если Пометка <> 0 Тогда
		
		НайденыНеОтмеченные = Ложь;
		
		Для каждого ЭлементКоллекции Из Родитель.ПолучитьЭлементы() Цикл
			Если ЭлементКоллекции.Пометка <> 1 
				И ОтрабатыватьСтроку(ЭлементКоллекции) Тогда
				
				НайденыНеОтмеченные = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		Если НайденыНеОтмеченные Тогда
			Родитель.Пометка = 2;
		Иначе
			Родитель.Пометка = 1;	
		КонецЕсли;
		
	Иначе 
		
		НайденыОтмеченные = Ложь;
		
		Для каждого ЭлементКоллекции Из Родитель.ПолучитьЭлементы() Цикл
			Если ЭлементКоллекции.Пометка <> 0 
				И ОтрабатыватьСтроку(ЭлементКоллекции) Тогда
				
				НайденыОтмеченные = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;	
		
		Если НЕ НайденыОтмеченные Тогда
			Родитель.Пометка = 0;
		Иначе 
			Родитель.Пометка = 2;
		КонецЕсли; 
		
	КонецЕсли; 
	
	ИзменитьПометкуРодителей(Родитель, Пометка);
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОтрабатыватьСтроку(СтрокаДерева)
	
	Возврат НЕ (СтрокаДерева.Загружена И СтрокаДерева.КоличествоПодчиненных = 0);
	
КонецФункции

&НаКлиенте
Процедура ИзменитьПометкуПодчиненных(ТекущиеДанные, Пометка)
	
	Подчиненные = ТекущиеДанные.ПолучитьЭлементы();
	
	Для каждого ЭлементКоллекции Из Подчиненные Цикл
		
		Если НЕ ОтрабатыватьСтроку(ЭлементКоллекции) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементКоллекции.Пометка = Пометка;	
		
		Если ЭлементКоллекции.ПолучитьЭлементы().Количество() > 0 Тогда
			ИзменитьПометкуПодчиненных(ЭлементКоллекции, Пометка);
		КонецЕсли; 
		
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура ПроставитьПризнакЗагрузки(ИдентификаторыДляПоиска = Неопределено, Знач ТаблицаДанных = Неопределено)
	
	
	ПроставитьПоВсемНезагруженным = ИдентификаторыДляПоиска = Неопределено;
	
	Если ПроставитьПоВсемНезагруженным Тогда
		
		ИдентификаторыДляПоиска = Новый Массив;
		
		ДеревоДанные = РеквизитФормыВЗначение("Категории");
		
		ЛистовыеСтроки = ДеревоДанные.Строки.НайтиСтроки(
			Новый Структура("Пометка, Загружена, КоличествоПодчиненных", 1, Ложь, 0), Истина);
			
		Для каждого ЭлементКоллекции Из ЛистовыеСтроки Цикл
			ИдентификаторыДляПоиска.Добавить(ЭлементКоллекции.Идентификатор);
		КонецЦикла;
		
	Иначе
		ЛистовыеСтроки = ТаблицаДанных.НайтиСтроки(Новый Структура("ЛистоваяКатегория", Истина));
	КонецЕсли; 
	
	Если ЛистовыеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	////////////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Соответствие.ИдентификаторКатегории КАК Идентификатор
	|ИЗ
	|	РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК Соответствие
	|ГДЕ
	|	Соответствие.ИдентификаторКатегории В(&ИдентификаторыДляПоиска)";
	
	Запрос.УстановитьПараметр("ИдентификаторыДляПоиска", ИдентификаторыДляПоиска);
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	Выгрузка.Индексы.Добавить("Идентификатор");
	
	////////////////////////////////////////////////////////////////////////////////
			
	Если ПроставитьПоВсемНезагруженным Тогда
		ПроставитьПоВсемуДереву(Категории, Выгрузка); // обходим на форме чтобы не потерять развернутые
	Иначе 
		Для каждого ЭлементКоллекции Из ЛистовыеСтроки Цикл
			Если Выгрузка.Найти(ЭлементКоллекции.Идентификатор) <> Неопределено Тогда
				ЭлементКоллекции.Загружена = Истина;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПроставитьПоВсемуДереву(ТекущаяВетка, ТаблицаДанных)
	
	Для каждого ЭлементКоллекции Из ТекущаяВетка.ПолучитьЭлементы() Цикл
		
		Если ЭлементКоллекции.КоличествоПодчиненных = 0 Тогда
			Если ЭлементКоллекции.Пометка = 1 И НЕ ЭлементКоллекции.Загружена Тогда
				Если ТаблицаДанных.Найти(ЭлементКоллекции.Идентификатор) <> Неопределено Тогда
					ЭлементКоллекции.Загружена = Истина;
				КонецЕсли;
			КонецЕсли; 
		Иначе 
			ПроставитьПоВсемуДереву(ЭлементКоллекции, ТаблицаДанных);
		КонецЕсли; 
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область РаботаСТабличнымДокументом

&НаКлиенте
Функция ПредставлениеГруппыКатегории(ДанныеЗаполнения)
	
	ДанныеПоКатегории = Новый ТабличныйДокумент;
	
	Область = ДанныеПоКатегории.Область(2, 1);
	
	Область.ЦветТекста = Новый Цвет(28, 85, 174);
	Область.Шрифт      = Новый Шрифт("Arial", 12);
	Область.Текст      = ДанныеЗаполнения.НаименованиеКатегории;
	
	Возврат ДанныеПоКатегории;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеКатегории(ДанныеЗаполнения)
	
	ДанныеПоКатегории = Новый ТабличныйДокумент;
	
	РаботаСНоменклатурой.ЗаполнитьКарточкуВидаНоменклатуры(ДанныеПоКатегории, ДанныеЗаполнения);
		
	Возврат ДанныеПоКатегории;
	
КонецФункции

&НаСервере
Процедура ПодготовитьМакеты()
	
	МакетГруппыКатегорий = Обработки.РаботаСНоменклатурой.ПолучитьМакет("ПФ_MXL_ГруппаКатегорий");
		
КонецПроцедуры

&НаКлиенте
Функция ДанныеЗагруженыИзКэша(Идентификатор)
	
	ПредставлениеКатегории = КэшПредставленийКатегорий.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор));
	
	Если ПредставлениеКатегории.Количество() > 0 
		И ЭтоАдресВременногоХранилища(ПредставлениеКатегории[0].ПутьКТабличномуДокументу) Тогда
		
		ДанныеПоКатегории       = ПолучитьИзВременногоХранилища(ПредставлениеКатегории[0].ПутьКТабличномуДокументу);
		Баннер                  = ПредставлениеКатегории[0].ПутьКДаннымБаннера;
		СсылкаПереходаПоБаннеру = ПредставлениеКатегории[0].СсылкаПереходаПоБаннеру;
		
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;	
		
КонецФункции

&НаКлиенте
Функция ДанныеОГруппе(ТекущиеДанные)
	
	ДанныеОГруппеСтруктура = Новый Структура;
	
	ДанныеОГруппеСтруктура.Вставить("НаименованиеКатегории", ТекущиеДанные.Наименование);
	ДанныеОГруппеСтруктура.Вставить("КоличествоПодчиненных", ТекущиеДанные.КоличествоПодчиненных);
	
	Возврат ДанныеОГруппеСтруктура;
	
КонецФункции

&НаКлиенте
Процедура СформироватьПредставлениеКатегории(ТекущиеДанные)
	
	ДанныеПоКатегории = Новый ТабличныйДокумент;
	
	КоличествоЗаданий = КоличествоЗаданий + 1;
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("ИдентификаторЗадания", Неопределено);
	ПараметрыЗавершения.Вставить("Идентификатор", ТекущиеДанные.Идентификатор);
	
	СформироватьПредставлениеКатегорииЗавершение = Новый ОписаниеОповещения("СформироватьПредставлениеКатегорииЗавершение",
		ЭтотОбъект, ПараметрыЗавершения);
	
	РаботаСНоменклатуройКлиент.ПолучитьПолноеОписаниеКатегорииПоИдентификатору(СформироватьПредставлениеКатегорииЗавершение,
		ТекущиеДанные.Идентификатор, ЭтотОбъект, Неопределено, Элементы.ДекорацияДлительнаяОперация);
		
	УстановитьВидимостьДоступностьЭлементовПриДлительнойОперации();	
		
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставлениеКатегорииЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	КоличествоЗаданий = Макс(КоличествоЗаданий - 1, 0);
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда 
		Возврат;
	КонецЕсли;
	
	СформироватьПредставлениеКатегорииНаСервере(Результат.АдресРезультата);
	
	Если Элементы.Категории.ТекущиеДанные <> Неопределено
		И Элементы.Категории.ТекущиеДанные.Идентификатор = ДополнительныеПараметры.Идентификатор Тогда
		
		ДанныеЗагруженыИзКэша(ДополнительныеПараметры.Идентификатор);
	КонецЕсли; 
		
	УстановитьВидимостьДоступностьЭлементовПриДлительнойОперации();
		
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеКатегорииНаСервере(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКатегорииСервиса = Результат[0];
	
	ТабличныйДокументКатегории = ПредставлениеКатегории(ДанныеКатегорииСервиса);
		
	НоваяСтрока = КэшПредставленийКатегорий.Добавить();
	
	НоваяСтрока.Идентификатор                = ДанныеКатегорииСервиса.Идентификатор;
	НоваяСтрока.ПутьКТабличномуДокументу     = ПоместитьВоВременноеХранилище(ТабличныйДокументКатегории, УникальныйИдентификатор);
	НоваяСтрока.ИдентификаторРекламнойЗаписи = ДанныеКатегорииСервиса.ИдентификаторРекламнойЗаписи;
	НоваяСтрока.ЗакэшироватьБаннер           = Не ПустаяСтрока(ДанныеКатегорииСервиса.ИдентификаторРекламнойЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура КатегорииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если РежимВыбораКатегории 
		И Категории.НайтиПоИдентификатору(ВыбраннаяСтрока).КоличествоПодчиненных = 0 Тогда 
		
		СтандартнаяОбработка = Ложь;
		
		Если ЗаполнятьПриВыборе Тогда
			ПоказатьВопросПриВыбореКатегории();
		Иначе
			ВыбратьКатегориюИзСписка();
		КонецЕсли;
		
	ИначеЕсли РежимОтбораПоСтроке Тогда 
		
		СтандартнаяОбработка = Ложь;
		НачатьПозиционированиеНаВыбранном();
				
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементовПриДлительнойОперации()
	
	Если КоличествоЗаданий = 0 Тогда 
		Элементы.ДекорацияДлительнаяОперация.Картинка = БиблиотекаКартинок.Пустая;
	КонецЕсли;
	
	ДлительнаяОперацияНеАктивна = Элементы.ДекорацияДлительнаяОперация.Картинка = БиблиотекаКартинок.Пустая;
	
	Элементы.ДекорацияДлительнаяОперация.Видимость = Не ДлительнаяОперацияНеАктивна;
	
	Элементы.ГруппаОсновныеКнопкиФормы.Доступность = ДлительнаяОперацияНеАктивна;
	Элементы.КоманднаяПанельКатегорий.Доступность = ДлительнаяОперацияНеАктивна И Не РежимОтбораПоСтроке;
	Элементы.СтрокаПоиска.Доступность = ДлительнаяОперацияНеАктивна;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоКатегорииОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	РаботаСНоменклатуройКлиент.
		ОбработкаРасшифровкиПредставленияКатегории(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти
