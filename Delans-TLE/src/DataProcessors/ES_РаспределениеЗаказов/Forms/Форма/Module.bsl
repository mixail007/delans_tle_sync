////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//ЭР Несторук С.И. 03.12.2018 10:17:31 {
	АпиКлючКартЯндекса = ПараметрыСеанса.ES_APIКлючЯндекса;
	//Если НЕ ПустаяСтрока(АпиКлючКартЯндекса) Тогда
	//	АпиКлючКартЯндекса = "apikey="+СокрЛП(АпиКлючКартЯндекса) + "&";
	//Иначе
	//	АпиКлючКартЯндекса = "apikey=e2b034f7-f42a-47dd-b007-e84288d87bff&";
	//КонецЕсли;
	//}ЭР Несторук С.И.
	
	// Заполняем значения реквизитов по умолчанию
	Объект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
	НовыйПланДоставкиДата = ТекущаяДата();
	ОтображатьПредопределенныеОбласти = Истина;
	//СвязатьЗаборЗаказ = Истина;
	
	// Устанавливаем переключатели на вкладке Карта по умолчанию
	ВидОтображения 	= 1;

	//ЭР Несторук С.И. 01.03.2017 11:09:56 {
	УстановитьВидимостьЛогистики();
	//}ЭР Несторук С.И.
	
	// Устанавливаем период по умолчанию - Текущий день
	ЗаказыОтборСтандартныйПериод.ДатаНачала 	= НачалоДня(ТекущаяДата());
	ЗаказыОтборСтандартныйПериод.ДатаОкончания 	= КонецДня(ТекущаяДата());
	
	ПДОтборСтандартныйПериод.ДатаНачала 	= НачалоДня(ТекущаяДата());
	ПДОтборСтандартныйПериод.ДатаОкончания 	= КонецДня(ТекущаяДата());
	
	ПеремещенияОтборПериод.ДатаНачала		= НачалоДня(ТекущаяДата());
	ПеремещенияОтборПериод.ДатаОкончания	= КонецДня(ТекущаяДата());
	
	ОтчетыОтборПериод.ДатаНачала		= НачалоДня(ТекущаяДата());
	ОтчетыОтборПериод.ДатаОкончания		= КонецДня(ТекущаяДата());
	
	// Обновляем все табличные поля на текущую дату
	ЗаполнитьЗаказамиНаСервере();
	//ЗаполнитьПланамиДоставкиНаСервере();
	ОбновитьОтчетыНаСервере();
	//ЭР Несторук С.И. 16.03.2017 11:35:20 {
	УстановитьУсловноеОформление();
	//}ЭР Несторук С.И.
	
	Элементы.ОбновитьКоординатыКурьеров.Видимость = ПоказатьКурьеров;
	
	//Efsol Рыбалка Н.А. 25.06.2019+
	Дата = ЗаказыОтборСтандартныйПериод.ДатаОкончания;
	
	ЗаполнитьТаблицуМашины(Дата);
	
	ЗаполнитьТаблицуМашины2(Дата);
	//Efsol Рыбалка Н.А.-
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ЭЛЕМЕНТОВ

#Область ОбработчикиСобытийЭлементовФормы

/////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ВКЛАДКИ НОВЫЕ ЗАКАЗЫ

// НовыеЗаказы ОТБОРЫ

&НаКлиенте
Процедура ЗаказыОтборСтандартныйПериодДатаНачалаПриИзменении(Элемент)
	
	ОбновитьСписокЗаказовНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОтборСтандартныйПериодДатаОкончанияПриИзменении(Элемент)
	
	ОбновитьСписокЗаказовНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОтборНомерНакладнойПриИзменении(Элемент)
	
	ОбновитьСписокЗаказовНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОтборВхНакладнаяПриИзменении(Элемент)
	
	ОбновитьСписокЗаказовНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОтборАдресПриИзменении(Элемент)
	
	ОбновитьСписокЗаказовНаФорме();
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаказОтборСкладПриИзменении(Элемент)
	
	ОбновитьСписокЗаказовНаФорме();

КонецПроцедуры



&НаКлиенте
Процедура ЗаказыОтборВидДоставкиПриИзменении(Элемент)
	
	ОбновитьСписокЗаказовНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОтборЗаказчикПриИзменении(Элемент)
	
	ОбновитьСписокЗаказовНаФорме();

КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОтборПолучательПриИзменении(Элемент)
	
	ОбновитьСписокЗаказовНаФорме();

КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОтборРегионПриИзменении(Элемент)
	
	ОбновитьСписокЗаказовНаФорме();
	
КонецПроцедуры

// НовыеЗаказы ТЧ ЗАКАЗЫ

&НаКлиенте
Процедура ЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// При двойном клике на строке открывается заказ покупателя
	Если Поле.Имя = "ЗаказыЗоны"
		//ЕФСОЛ Несторук 24.10.2016 + 
		ИЛИ Поле.Имя = "ЗаказыЦветМетки"
		//ЕФСОЛ Несторук 24.10.2016 -
		Тогда
		Возврат;
	КонецЕсли; 
	
	ПоказатьЗначение(,Элемент.ТекущиеДанные.ДокументДоставки); 	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОтметкаПриИзменении(Элемент)
	
	//ЭР Несторук С.И. 20.02.2017 16:07:46 {
	//ТекущаяСтрока = Элементы.Заказы.ТекущиеДанные;
	//СвязДок = ТекущаяСтрока.СвязанныйДокумент;
	////Если СвязатьЗаборЗаказ И ЗначениеЗаполнено(СвязДок) Тогда
	//Если ЗначениеЗаполнено(СвязДок) Тогда
	//	НайденныеСтроки = Объект.Заказы.НайтиСтроки(Новый Структура("ДокументДоставки", СвязДок));
	//	Если НайденныеСтроки.Количество() > 0 Тогда
	//		НайденныеСтроки[0].Отметка = ТекущаяСтрока.Отметка;
	//		ДокДоставки = ПолучитьСсылкуНаЗаказ(НайденныеСтроки[0].ДокументДоставки);
	//		Если ЗначениеЗаполнено(Объект.Карта) Тогда
	//			ES_YandexMaps.ОтметитьЗаказНаКарте(Элементы.Карта.Документ.parentWindow, ДокДоставки, ТекущаяСтрока.Отметка);
	//		КонецЕсли; 
	//	КонецЕсли; 
	//КонецЕсли;
	//}ЭР Несторук С.И.
	
	
	//ЭР Сальник К.А. 02.04.2018 17:27:00 {
	Если ОтображениеКарты = ПредопределенноеЗначение("Перечисление.ES_ВидОтображенияКарты.YandexКарты") Тогда
	ПересчитатьСуммарныйВесИОбъемныйВес();
	
	ИзменитьМеткуНаКарте();
	Иначе
		Если НЕ ЭтаФорма.Элементы.СтраницаКарта.ПодчиненныеЭлементы.ГруппаЛеваяПанель.ПодчиненныеЭлементы.Карта = Неопределено тогда
			Отметка = Элементы.Заказы.ТекущиеДанные.Отметка;
			
			НомерСтроки = Строка(Элементы.Заказы.ТекущиеДанные.НомерСтроки);
			
			Попытка
				ЭтаФорма.Элементы.СтраницаКарта.ПодчиненныеЭлементы.ГруппаЛеваяПанель.ПодчиненныеЭлементы.Карта.Документ.parentWindow.eval("setOrder(" + ПреобразоватьБулевоВJS(Отметка) + ", " + НомерСтроки + ")");
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	//}ЭР Сальник К.А.
	
КонецПроцедуры


Функция ПреобразоватьБулевоВJS(Значение)
	//ЭР Сальник К.А. 02.04.2018 17:27:00 {
	Возврат ? (Значение, "true", "false");
	//}ЭР Сальник К.А.
КонецФункции


&НаКлиенте
Процедура ЗаказыЗоныНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СписокЗонДляВыбора.Количество() = 0 Тогда
		Сообщить("Зоны не найдены. Нажмите кнопку ""Проставить зоны"" на карте");
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = СписокЗонДляВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыНоменклатураВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// При двойном клике на строке открывается карточка номенклатуры
	ПоказатьЗначение(,Элемент.ТекущиеДанные.Номенклатура); 
	
КонецПроцедуры

// ПланыДоставки ТЧ ПЛАНЫ ДОСТАВКИ
&НаКлиенте
Процедура ПланыДоставкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// При двойном клике на строке открывается План доставки
	Если Поле.Имя = "ПланыДоставкиОтчетОДоставке" Тогда
		ПоказатьЗначение(,Элемент.ТекущиеДанные.ОтчетОДоставке);
	Иначе
		ПоказатьЗначение(,Элемент.ТекущиеДанные.ПланДоставки); 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПланыДоставкиПриАктивизацииСтроки(Элемент)
		
	Если НЕ Элементы.ПланыДоставки.ТекущиеДанные = Неопределено Тогда
		Элементы.ПланыДоставкиЗаказы.ОтборСтрок = Новый ФиксированнаяСтруктура("ПланДоставки", Элементы.ПланыДоставки.ТекущиеДанные.ПланДоставки);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ПланыДоставкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланыДоставкиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

// ПланыДоставки ТЧ ЗАКАЗЫ
&НаКлиенте
Процедура ПланыДоставкиЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// При двойном клике на строке открывается заказ покупателя
	ПоказатьЗначение(,Элемент.ТекущиеДанные.ДокументДоставки); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПланыДоставкиЗаказыПриАктивизацииСтроки(Элемент)
		
	ОтборСтрокПланыТчГрузы(Элементы.ПланыДоставкиЗаказы.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ПланыДоставкиЗаказыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланыДоставкиЗаказыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

// ПланыДоставки ТЧ ГРУЗЫ / ЗАПАСЫ

&НаКлиенте
Процедура ПДГрузыВРазрезеЗаказовПриИзменении(Элемент)
	
	ОтборСтрокПланыТчГрузы(Элементы.ПланыДоставкиЗаказы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланыДоставкиГрузыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// При двойном клике на строке открывается карточка номенклатуры
	ПоказатьЗначение(,Элемент.ТекущиеДанные.Номенклатура); 
	
КонецПроцедуры

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// РАБОТА С КАРТОЙ

#Область ПроцедурыИФункцииДляРаботыСКартой

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура КартаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	//ЭР Сальник К.А. 13.04.2018 13:06:00 {
	#Если НЕ ВебКлиент Тогда
	Если ОтображениеКарты = ПредопределенноеЗначение("Перечисление.ES_ВидОтображенияКарты.YandexКарты") Тогда 
		
	СтандартнаяОбработка = Ложь;
	
	РезультатОбработки = Новый Массив();
	
	Если ES_YandexMaps.ОбработкаНажатия(ДанныеСобытия, РезультатОбработки) Тогда
		
		// Определяем, какую отметку нужно установить
		//если есть хотябы один неотмеченный документ - отмечаем все документы, иначе - снимаем отметки 
		Если РезультатОбработки.Количество() = 1 Тогда
			ТекОтметка = РезультатОбработки[0].Статус;
		Иначе
			ТекОтметка = Истина;
			Для каждого Элем Из РезультатОбработки Цикл
				Если НЕ Элем.Статус Тогда
					ТекОтметка = Ложь;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		
		МассивЗаказов = СформироватьМассивЗаказовДляОтметки(РезультатОбработки);
		
		Для каждого Элем Из МассивЗаказов Цикл
			НайденныйДокДоставки = Объект.Заказы.НайтиСтроки(Новый Структура("ДокументДоставки", Элем));
			Если НайденныйДокДоставки.Количество() > 0 Тогда
				// Отмечаем на закладке Заказы
				НайденныйДокДоставки[0].Отметка = ТекОтметка;
				// Отмечаем на карте
				//ES_YandexMaps.ОтметитьЗаказНаКарте(Элементы.Карта.Документ.parentWindow, ПолучитьСсылкуНаЗаказ(Элем), ТекОтметка);
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли;
	
	ПересчитатьСуммарныйВесИОбъемныйВес();
	
	Иначе
		НомерЗаказа = ЭтаФорма.Элементы.СтраницаКарта.ПодчиненныеЭлементы.ГруппаЛеваяПанель.ПодчиненныеЭлементы.Карта.Документ.parentWindow.eval("getOrder()");	
		Отметка = ЭтаФорма.Элементы.СтраницаКарта.ПодчиненныеЭлементы.ГруппаЛеваяПанель.ПодчиненныеЭлементы.Карта.Документ.parentWindow.eval("getLabel()");	
		Если НЕ ПустаяСтрока(НомерЗаказа)   Тогда
			НайтиСтроку = Объект.Заказы.НайтиСтроки(Новый Структура("НомерСтроки", Число(НомерЗаказа)));
			
			если НайтиСтроку.Количество()>0 тогда
				НайтиСтроку[0].Отметка = Отметка;
			КонецЕсли;
		КонецЕсли;
		
		Отметить = ЭтаФорма.Элементы.СтраницаКарта.ПодчиненныеЭлементы.ГруппаЛеваяПанель.ПодчиненныеЭлементы.Карта.Документ.parentWindow.eval("getSelected()");
		Итератор = 1;
		Пока Истина Цикл	
			Попытка			
				Номер = Отметить[Строка(Итератор)].number;
				Отметка = Отметить[Строка(Итератор)].label;
				НайтиСтроку = Объект.Заказы.НайтиСтроки(Новый Структура("НомерСтроки", Число(Номер)));
				если НайтиСтроку.Количество()>0 тогда
					НайтиСтроку[0].Отметка = Отметка;
				КонецЕсли;
				Итератор = Итератор + 1;
			Исключение
				Прервать;
			КонецПопытки;	 
		КонецЦикла;
	КонецЕсли;
	#КонецЕсли
	//}ЭР Сальник К.А.

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКарту(НужноЗаполнятьАдресами = Ложь)
	
	Если Не ES_ОбщегоНазначения.ПроверкаИнтернет() Тогда 
		Сообщить("Нет соединения с интернетом");
		Возврат;	
	КонецЕсли;
	
	НужноОбновитьКартуЗаказы = Ложь;
	КартаОписаниеПроезда = "";
	
	ЦентрКарты = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(ПредопределенноеЗначение("Перечисление.ES_ВидыСтартовыхНастроек.ОсновнойГород"));
	
	// если не указан основной город в стартовых настройках, карта не отобразится
	Если НЕ ЗначениеЗаполнено(ЦентрКарты) Тогда
		ПоказатьПредупреждение(,"Не определен основной город доставки. Проверьте стартовые настройки");
		Возврат;
	КонецЕсли; 
	
	// Заполнение таблицы Список адресов
	Если НужноЗаполнятьАдресами Тогда
		ЗаполнитьСписокАдресов();
	КонецЕсли; 
	
	СписокЗаказовДляКарты = ПолучитьСписокЗаказов();
	
	ОбластиДляКарты = Новый Массив;
	Если ОтображатьПредопределенныеОбласти Тогда
		ОбластиДляКарты = ПолучитьСписокЗон();
	КонецЕсли; 

	ПараметрыКарты = Новый Структура("Карта", Новый Структура("Центр", ЦентрКарты));
	ПараметрыКарты.Карта.Вставить("Размеры", Новый Структура("Ширина,Высота", 700, 500));
	ПараметрыКарты.Карта.Вставить("Центр", Новый Структура("Адрес", ЦентрКарты));
	ПараметрыКарты.Вставить("ОтобразитьКурьеров", ПоказатьКурьеров);
	
	Объект.Карта = ES_YandexMaps.ПолучитьТекстКарты(СписокЗаказовДляКарты, ОбластиДляКарты, ПараметрыКарты,АпиКлючКартЯндекса);
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьМеткуНаКарте()
	
	ТекущаяСтрока = Элементы.Заказы.ТекущиеДанные;
	
	ДокДоставки = ПолучитьСсылкуНаЗаказ(ТекущаяСтрока.ДокументДоставки);
	//EFSOL_Сальник К.А. 2019-04-18 {+	
	Если ЗначениеЗаполнено(Объект.Карта) Тогда
		ES_YandexMaps.ОтметитьЗаказНаКарте(Элементы.Карта.Документ, ДокДоставки, ТекущаяСтрока.Отметка);
	КонецЕсли;
	//EFSOL_Сальник К.А.  -}
	
КонецПроцедуры

&НаКлиенте
  //- массив структур:
  //   * Код1С (навигационная ссылка)
  //   * КраткоеОписание (подсказка при наведении)
  //   * Номер (выводится на метке)
  //   * НомерСвязанногоЗаказа (синхронизация основного и связанного заказа)
  //   * ВыделятьЦветом (булево - если истина, то цвет отмеченной метки зеленый, не отмеченной - синий; если Ложь, то цвет отмеченной метки зеленый, не отмеченной - красный)
  //   * Отметка (флаг - да/нет - галка)
  //   * ОбработкаНажатия (флаг - да/нет - галка)
  //   * ПостроениеМаршрута (флаг - да/нет - галка)
  //   * Координаты - структура с полями (долгота, широта)
  // Должна выполняться на клиенте - с сервера на клиент нельзя вернуть массив структур  
Процедура ЗаполнитьСписокАдресов()
	
	Объект.СписокАдресовНаКарте.Очистить();
	ОтражатьДДуНаКарте = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(ПредопределенноеЗначение("Перечисление.ES_ВидыСтартовыхНастроек.ОтражатьДДуНаКарте"));
	ОтражатьДДуНаКарте = ?(ЗначениеЗаполнено(ОтражатьДДуНаКарте), ОтражатьДДуНаКарте, Ложь);
	// ВидОтображения = Заказы
	Если ВидОтображения = 1
	   И Объект.Заказы.Количество() > 0 Тогда
	   
		СоответствиеАдресовКоординат = Новый Соответствие;	   
		Для каждого Элем Из Объект.Заказы Цикл
			СоответствиеАдресовКоординат.Вставить(Элем.АдресДоставки, Новый Структура("Широта, Долгота", СтрЗаменить(Элем.АдресДоставкиШирота, ",", "."), СтрЗаменить(Элем.АдресДоставкиДолгота, ",", ".")));
			Если НЕ Элем.ЭтоЗаборГруза Тогда
				//СоответствиеАдресовКоординат.Вставить(Элем.ЗаборАдрес, Новый Структура("Широта, Долгота", СтрЗаменить(Элем.ЗаборАдресШирота, ",", "."), СтрЗаменить(Элем.ЗаборАдресДолгота, ",", ".")));
				СоответствиеАдресовКоординат.Вставить(Элем.АдресДоставки, Новый Структура("Широта, Долгота", СтрЗаменить(Элем.АдресДоставкиШирота, ",", "."), СтрЗаменить(Элем.АдресДоставкиДолгота, ",", ".")));
			КонецЕсли; 
		КонецЦикла; 
	   
		Для каждого СтрокаЗаказ Из Объект.Заказы Цикл
			//ЭР Несторук С.И. 13.03.2017 16:45:12 {
			ЭтоДДУ = Ложь;
			Если СтрокаЗаказ.ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.ДвериДвери") 
				И СтрокаЗаказ.ВидЗабора = ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.Упрощенный") Тогда
				Если ОтражатьДДуНаКарте Тогда
					ЭтоДДУ = Истина;
					мЦветМетки = "violet#238,130,238";
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			//}ЭР Несторук С.И.
					
			СсылкаНаОбъект = ПолучитьСсылкуНаЗаказ(СтрокаЗаказ.ДокументДоставки);
			
			// *НЕ ИСПОЛЬЗУЕТСЯ* удален реквизит ИспользоватьЗабор
			//Если СтрокаЗаказ.ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.ДвериДвери")
			//   И НЕ СтрокаЗаказ.ИспользоватьЗабор
			//Тогда
			//	
			//	ИнформацияОЗаборе = "" + СтрокаЗаказ.ДокументДоставки +
			//					 "<br>Адрес забора: " + СтрокаЗаказ.ЗаборАдрес + 
			//					 "<br>Контрагент: " + СтрокаЗаказ.ЗаборОтправитель;
			//
			//	НовСтр = Объект.СписокАдресовНаКарте.Добавить();
			//	НовСтр.Код1С 					= СсылкаНаОбъект;
			//	НовСтр.КраткоеОписание 			= "" + СтрокаЗаказ.ДокументДоставки;
			//	НовСтр.Номер 					= "(" + СтрокаЗаказ.НомерСтроки + ")";
			//	НовСтр.НомерСвязанногоЗаказа 	= "" + СтрокаЗаказ.ДокументДоставки;
			//	НовСтр.ВыделятьЦветом 			= Истина;
			//	НовСтр.Отметка 					= СтрокаЗаказ.Отметка;
			//	НовСтр.ОбработкаНажатия 		= Истина;
			//	НовСтр.ПостроениеМаршрута 		= Ложь;
			//	НовСтр.ИнформацияОЗаказе 		= ИнформацияОЗаборе;
			//	НовСтр.АдресДолгота 			= СоответствиеАдресовКоординат[СтрокаЗаказ.ЗаборАдрес].Долгота;
			//	НовСтр.АдресШирота 				= СоответствиеАдресовКоординат[СтрокаЗаказ.ЗаборАдрес].Широта;
			//	НовСтр.АдресТекстом 			= "" + СтрокаЗаказ.ЗаборАдрес;
			//	
			//КонецЕсли; 
			ВидДоставки = ПолучитьВидДоставки(СтрокаЗаказ.ДокументДоставки);
			
			//ИнформацияОЗаказе = "" + СтрокаЗаказ.ДокументДоставки +
			//				 ?(СтрокаЗаказ.ЭтоЗаборГруза, "<br>Адрес забора: ", "<br>Адрес доставки: ") + СтрокаЗаказ.АдресДоставки + 
			//				 "<br>Получатель: " + СтрокаЗаказ.Получатель + "<br>Накладная: " + СтрокаЗаказ.НомерНакладной +" (" +ВидДоставки+")" + "<br>Заказчик: " + СтрокаЗаказ.Заказчик +
			//				 "<br>Курьер: "+СтрокаЗаказ.Курьер + "<br>Вес: "+  СтрокаЗаказ.ОбщийВес + "<br>Время доставки: "+ Формат(СтрокаЗаказ.ВремяДоставкиС,"ДФ=ЧЧ:мм; ДП=-") +" - "+
			//				 Формат(СтрокаЗаказ.ВремяДоставкиПо,"ДФ=ЧЧ:мм; ДП=-") + "<br>Комментарий: "+ СокрЛП(СтрокаЗаказ.Комментарий);
							 
			ИнформацияОЗаказе = "<br>Накладная: " + СтрокаЗаказ.НомерНакладной +" (" +ВидДоставки+")" + ?(СтрокаЗаказ.ЭтоЗаборГруза, "<br>Забор ", "<br>Заказ ") 
							+ "<br>Статус: " +СтрокаЗаказ.СтатусДокумента + "<br>Адрес: " + СтрокаЗаказ.АдресДоставки  
							 + "<br>Время доставки: "+ Формат(СтрокаЗаказ.ВремяДоставкиС,"ДФ=ЧЧ:мм; ДП=-") +" - "+ Формат(СтрокаЗаказ.ВремяДоставкиПо,"ДФ=ЧЧ:мм; ДП=-")
							 + "<br>Заказчик: " + СтрокаЗаказ.Заказчик +  "<br>Получатель: " + СтрокаЗаказ.Получатель + "<br>Примечание: "+ СокрЛП(СтрокаЗаказ.Комментарий) 
							 + "<br>Вес: "+  СтрокаЗаказ.ОбщийВес + "<br>Объем: "+  СтрокаЗаказ.ОбщийОбъем; 
							 			
			Если СтрокаЗаказ.СвязанныйДокумент = Неопределено Тогда
				НомСвязанногоДокумента = "";
				НомерСтрокиСвязанногоДокумента = "";
			Иначе
				НомСвязанногоДокумента = СтрокаЗаказ.СвязанныйДокумент;
				
				НомерСтрокиСвязанногоДокумента = "";
				НайдСтроки = Объект.Заказы.НайтиСтроки(Новый Структура("ДокументДоставки", НомСвязанногоДокумента));
				Если НайдСтроки.Количество() > 0 Тогда
					НомерСтрокиСвязанногоДокумента = НайдСтроки[0].НомерСтроки;
				КонецЕсли; 
			КонецЕсли;
			
			Если СтрокаЗаказ.ЭтоЗаборГруза
			   И СтрокаЗаказ.ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.ПоПути") Тогда
				ВыделятьЦветом = Истина
			Иначе
				ВыделятьЦветом = Ложь;
			КонецЕсли; 
			
			Если СтрокаЗаказ.ЭтоЗаборГруза И ЗначениеЗаполнено(НомерСтрокиСвязанногоДокумента) Тогда
				НомерНаМетке = "" + СтрокаЗаказ.НомерСтроки + "(" + НомерСтрокиСвязанногоДокумента + ")";
			Иначе
				НомерНаМетке = "" + СтрокаЗаказ.НомерСтроки;
			КонецЕсли; 
			
			НовСтр = Объект.СписокАдресовНаКарте.Добавить();
			НовСтр.Код1С 					= СсылкаНаОбъект;
			НовСтр.КраткоеОписание 			= "" + СтрокаЗаказ.ДокументДоставки;
			НовСтр.Номер 					= НомерНаМетке;
			НовСтр.ИнтервалВремени			= Формат(СтрокаЗаказ.ВремяДоставкиС,"ДФ=Ч:мм") + "-" + Формат(СтрокаЗаказ.ВремяДоставкиПо,"ДФ=Ч:мм");
			НовСтр.НомерСвязанногоЗаказа 	= "" + НомСвязанногоДокумента;
			НовСтр.ВыделятьЦветом 			= ВыделятьЦветом;
			НовСтр.ЦветМетки 				= ?(ЭтоДДУ, мЦветМетки,"" + СтрокаЗаказ.ЦветМетки);
			НовСтр.Отметка 					= СтрокаЗаказ.Отметка;
			НовСтр.ОбработкаНажатия 		= Истина;
			НовСтр.ПостроениеМаршрута 		= Ложь;
			НовСтр.ИнформацияОЗаказе 		= ИнформацияОЗаказе;
			НовСтр.АдресДолгота 			= СоответствиеАдресовКоординат[СтрокаЗаказ.АдресДоставки].Долгота;
			НовСтр.АдресШирота 				= СоответствиеАдресовКоординат[СтрокаЗаказ.АдресДоставки].Широта;
			НовСтр.АдресТекстом 			= "" + СтрокаЗаказ.АдресДоставки;
			//ЕФСОЛ Несторук 11.10.2016 +
			НовСтр.ВидДоставки				= ВидДоставки;
			//ЕФСОЛ Несторук 11.10.2016 -
			
			//ЭР Несторук С.И. 28.07.2017 10:56:38 {
			//Фиолетовым отражаются заказы ДДу 
			Если ЭтоДДУ Тогда
				НовСтр = Объект.СписокАдресовНаКарте.Добавить();
				НовСтр.Код1С 					= СсылкаНаОбъект;
				НовСтр.КраткоеОписание 			= "" + СтрокаЗаказ.ДокументДоставки;
				НовСтр.Номер 					= НомерНаМетке;
				НовСтр.ИнтервалВремени			= Формат(СтрокаЗаказ.ВремяДоставкиС,"ДФ=Ч:мм") + "-" + Формат(СтрокаЗаказ.ВремяДоставкиПо,"ДФ=Ч:мм");
				НовСтр.НомерСвязанногоЗаказа 	= "" + НомСвязанногоДокумента;
				НовСтр.ВыделятьЦветом 			= ВыделятьЦветом;
				НовСтр.ЦветМетки 				= мЦветМетки;
				НовСтр.Отметка 					= СтрокаЗаказ.Отметка;
				НовСтр.ОбработкаНажатия 		= Истина;
				НовСтр.ПостроениеМаршрута 		= Ложь;
				НовСтр.ИнформацияОЗаказе 		= ИнформацияОЗаказе;
				СтруктураПоЗабору 				= ПолучитьСтруктуруПоЗабору(СтрокаЗаказ.ДокументДоставки);
				НовСтр.АдресДолгота 			= СтруктураПоЗабору.Долгота;
				НовСтр.АдресШирота 				= СтруктураПоЗабору.Широта;
				НовСтр.АдресТекстом 			= "" + СтруктураПоЗабору.АдресЗабора;
				//ЕФСОЛ Несторук 11.10.2016 +
				НовСтр.ВидДоставки				= ВидДоставки;
				//ЕФСОЛ Несторук 11.10.2016 -
			КонецЕсли;
			
			//}ЭР Несторук С.И.
		КонецЦикла;
		
	// ВидОтображения = Планы доставки	
	ИначеЕсли ВидОтображения = 2
			//И Объект.ПланыДоставки.Количество() > 0 Тогда 	
			И ЗначениеЗаполнено(ВыделенныйПлан) Тогда
			
			НомерПлана = ПолучитьНомерВыделеногоПлана(ВыделенныйПлан);
		
			// Добавление начальной точки
			Если ЗначениеЗаполнено(НачальнаяТочка) Тогда
				НовСтр = Объект.СписокАдресовНаКарте.Добавить();
				НовСтр.КраткоеОписание 			= "";
				НовСтр.Номер 					= "А";
				НовСтр.НомерСвязанногоЗаказа 	= "";
				НовСтр.ВыделятьЦветом 			= Ложь;
				НовСтр.Отметка 					= Ложь;
				НовСтр.ОбработкаНажатия 		= Ложь;
				НовСтр.ПостроениеМаршрута 		= Истина;
				НовСтр.ИнформацияОЗаказе 		= "Начальная точка: " + НачальнаяТочка;
				НовСтр.АдресДолгота 			= "";
				НовСтр.АдресШирота 				= "";
				НовСтр.АдресТекстом 			= НачальнаяТочка;
			КонецЕсли; 
			
			// Добавление адресов по плану
			
			//ЭР Сальник С.И. 13.04.2018 15:32:00 {
			//ЭР Несторук С.И. 27.12.2017 15:22:54 {
			МассивПланов = Новый Массив;
			МассивПланов.Добавить(ВыделенныйПлан);
			СписокЗаказовПоПлану = ПолучитьМассивЗаказовПоПлану(МассивПланов);
			//СписокЗаказовПоПлану = Объект.ПланыДоставкиЗаказы.НайтиСтроки(Новый Структура("ПланДоставки", Элементы.ПланыДоставки.ТекущиеДанные.ПланДоставки));
			//}ЭР Несторук С.И.
			//}ЭР Сальник К.А.

			
			СоответствиеАдресовКоординат = Новый Соответствие;	   
			Для каждого Элем Из СписокЗаказовПоПлану Цикл
				СоответствиеАдресовКоординат.Вставить(Элем.АдресДоставки, Новый Структура("Широта, Долгота", СтрЗаменить(Элем.АдресДоставкиШирота, ",", "."), СтрЗаменить(Элем.АдресДоставкиДолгота, ",", ".")));
				// *НЕ ИСПОЛЬЗУЕТСЯ* удален реквизит ИспользоватьЗабор
				//Если Элем.ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.ДвериДвери")
				//   И НЕ Элем.ИспользоватьЗабор
				//Тогда
				//	СоответствиеАдресовКоординат.Вставить(Элем.ЗаборАдрес, Новый Структура("Широта, Долгота", СтрЗаменить(Элем.ЗаборАдресШирота, ",", "."), СтрЗаменить(Элем.ЗаборАдресДолгота, ",", ".")));
				//КонецЕсли; 
			КонецЦикла; 
		
			Для каждого СтрокаПланЗаказ Из СписокЗаказовПоПлану Цикл
				//ЭР Несторук С.И. 29.12.2016 17:24:28 {
				Если БезВыполненных Тогда
					Если СтрокаПланЗаказ.СтатусДокумента = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.НазначенПринят") ИЛИ
						СтрокаПланЗаказ.СтатусДокумента = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Назначен") ИЛИ
						СтрокаПланЗаказ.СтатусДокумента = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаборов.Назначен") Тогда
					Иначе 
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				ЭтоДДУ = Ложь;
				Если СтрокаПланЗаказ.ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.ДвериДвери") 
					И СтрокаПланЗаказ.ВидЗабора = ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.Упрощенный") Тогда
					Если ОтражатьДДуНаКарте Тогда
						ЭтоДДУ = Истина;
						мЦветМетки = "violet#238,130,238";
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				//}ЭР Несторук С.И.
							
				
				СсылкаНаОбъект = ПолучитьСсылкуНаЗаказ(СтрокаПланЗаказ.ДокументДоставки);
				
				// *НЕ ИСПОЛЬЗУЕТСЯ* удален реквизит ИспользоватьЗабор
				//Если СтрокаПланЗаказ.ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.ДвериДвери")
				//   И НЕ СтрокаПланЗаказ.ИспользоватьЗабор
				//Тогда
				//
				//	ИнформацияОЗаборе = "" + СтрокаПланЗаказ.ДокументДоставки +
				//	"<br>Адрес забора: " + СтрокаПланЗаказ.ЗаборАдрес + 
				//	"<br>Контрагент: " + СтрокаПланЗаказ.Получатель;
				//	
				//	НовСтр = Объект.СписокАдресовНаКарте.Добавить();
				//	НовСтр.Код1С 					= СсылкаНаОбъект;
				//	НовСтр.КраткоеОписание 			= "" + СтрокаПланЗаказ.ДокументДоставки;
				//	НовСтр.Номер 					= "(" + СтрокаПланЗаказ.НомерСтрокиВПлане + ")";
				//	НовСтр.НомерСвязанногоЗаказа 	= "";
				//	НовСтр.ВыделятьЦветом 			= Ложь;
				//	НовСтр.Отметка 					= Ложь;
				//	НовСтр.ОбработкаНажатия 		= Ложь;
				//	НовСтр.ПостроениеМаршрута 		= Истина;
				//	НовСтр.ИнформацияОЗаказе 		= ИнформацияОЗаборе;
				//	НовСтр.АдресДолгота 			= СоответствиеАдресовКоординат[СтрокаПланЗаказ.ЗаборАдрес].Долгота;
				//	НовСтр.АдресШирота 				= СоответствиеАдресовКоординат[СтрокаПланЗаказ.ЗаборАдрес].Широта;
				//	НовСтр.АдресТекстом 			= "" + СтрокаПланЗаказ.ЗаборАдрес;
				//КонецЕсли; 
				
				//ИнформацияОЗаказе = "" + СтрокаПланЗаказ.ДокументДоставки +
				//					?(СтрокаПланЗаказ.ЭтоЗаборГруза, "<br>Адрес забора: ", "<br>Адрес доставки: ") + СтрокаПланЗаказ.АдресДоставки + 
				//					"<br>Контрагент: " + СтрокаПланЗаказ.Получатель;
				
				ВидДоставки = ПолучитьВидДоставки(СтрокаПланЗаказ.ДокументДоставки);
				
				//ИнформацияОЗаказе = "" + СтрокаПланЗаказ.ДокументДоставки +
				//?(СтрокаПланЗаказ.ЭтоЗаборГруза, "<br>Адрес забора: ", "<br>Адрес доставки: ") + СтрокаПланЗаказ.АдресДоставки + 
				//"<br>Получатель: " + СтрокаПланЗаказ.Получатель + "<br>Накладная: " + СтрокаПланЗаказ.НомерНакладной + " ("+ ВидДоставки +")"+ "<br>Заказчик: " + СтрокаПланЗаказ.Заказчик +
				//"<br>Вес: "+  СтрокаПланЗаказ.ОбщийВес + "<br>Время доставки: "+ Формат(СтрокаПланЗаказ.ВремяДоставкиС,"ДФ=Ч:мм; ДП=-") +" - "+
				//Формат(СтрокаПланЗаказ.ВремяДоставкиПо,"ДФ=Ч:мм; ДП=-") + "<br>Комментарий: "+ СокрЛП(СтрокаПланЗаказ.Комментарий);
				ИнформацияОЗаказе = "<br>Накладная: " + СтрокаПланЗаказ.НомерНакладной +" (" +ВидДоставки+")" + ?(СтрокаПланЗаказ.ЭтоЗаборГруза, "<br>Забор ", "<br>Заказ ") 
							+ "<br>Статус: " +СтрокаПланЗаказ.СтатусДокумента + "<br>Адрес: " + СтрокаПланЗаказ.АдресДоставки  
							 + "<br>Время доставки: "+ Формат(СтрокаПланЗаказ.ВремяДоставкиС,"ДФ=ЧЧ:мм; ДП=-") +" - "+ Формат(СтрокаПланЗаказ.ВремяДоставкиПо,"ДФ=ЧЧ:мм; ДП=-")
							 + "<br>Заказчик: " + СтрокаПланЗаказ.Заказчик +  "<br>Получатель: " + СтрокаПланЗаказ.Получатель + "<br>Примечание: "+ СокрЛП(СтрокаПланЗаказ.Комментарий) 
							 + "<br>Вес: "+  СтрокаПланЗаказ.ОбщийВес + "<br>Объем: "+  СтрокаПланЗаказ.ОбщийОбъем; 

				
				НовСтр = Объект.СписокАдресовНаКарте.Добавить();
				НовСтр.Код1С 					= СсылкаНаОбъект;
				НовСтр.НомерПлана               = НомерПлана;
				НовСтр.СсылкаНаЗаказ 			= СтрокаПланЗаказ.ДокументДоставки;
				НовСтр.КраткоеОписание 			= "" + СтрокаПланЗаказ.ДокументДоставки;
				НовСтр.Номер 					= "" + СтрокаПланЗаказ.НомерСтрокиВПлане;
				НовСтр.ИнтервалВремени			= Формат(СтрокаПланЗаказ.ВремяДоставкиС,"ДФ=Ч:мм") + "-" + Формат(СтрокаПланЗаказ.ВремяДоставкиПо,"ДФ=Ч:мм");
				НовСтр.НомерСвязанногоЗаказа 	= "";
				НовСтр.ВыделятьЦветом 			= Ложь;
				НовСтр.ЦветМетки 				= ?(ЭтоДДУ, мЦветМетки,"" + СтрокаПланЗаказ.ЦветМетки);
				НовСтр.Отметка 					= Ложь;
				НовСтр.ОбработкаНажатия 		= Ложь;
				НовСтр.ПостроениеМаршрута 		= Истина;
				НовСтр.ИнформацияОЗаказе 		= ИнформацияОЗаказе;
				НовСтр.АдресДолгота 			= СоответствиеАдресовКоординат[СтрокаПланЗаказ.АдресДоставки].Долгота;
				НовСтр.АдресШирота 				= СоответствиеАдресовКоординат[СтрокаПланЗаказ.АдресДоставки].Широта;
				НовСтр.АдресТекстом 			= "" + СтрокаПланЗаказ.АдресДоставки;
				//ЕФСОЛ Несторук 11.10.2016 +
				НовСтр.ВидДоставки				= ВидДоставки;
				НовСтр.НомерНакладной			= СтрокаПланЗаказ.НомерНакладной;
				//ЕФСОЛ Несторук 11.10.2016 -

				Если ЭтоДДУ ТОгда
					НовСтр = Объект.СписокАдресовНаКарте.Добавить();
					НовСтр.Код1С 					= СсылкаНаОбъект;
					НовСтр.СсылкаНаЗаказ 			= СтрокаПланЗаказ.ДокументДоставки;
					НовСтр.КраткоеОписание 			= "" + СтрокаПланЗаказ.ДокументДоставки;
					НовСтр.Номер 					= "" + СтрокаПланЗаказ.НомерСтрокиВПлане;
					НовСтр.ИнтервалВремени			= Формат(СтрокаПланЗаказ.ВремяДоставкиС,"ДФ=Ч:мм") + "-" + Формат(СтрокаПланЗаказ.ВремяДоставкиПо,"ДФ=Ч:мм");
					НовСтр.НомерСвязанногоЗаказа 	= "";
					НовСтр.ВыделятьЦветом 			= Ложь;
					НовСтр.ЦветМетки 				=  мЦветМетки;
					НовСтр.Отметка 					= Ложь;
					НовСтр.ОбработкаНажатия 		= Ложь;
					НовСтр.ПостроениеМаршрута 		= Истина;
					НовСтр.ИнформацияОЗаказе 		= ИнформацияОЗаказе;
					СтруктураПоЗабору 				= ПолучитьСтруктуруПоЗабору(СтрокаПланЗаказ.ДокументДоставки);
					НовСтр.АдресДолгота 			= СтруктураПоЗабору.Долгота;
					НовСтр.АдресШирота 				= СтруктураПоЗабору.Широта;
					НовСтр.АдресТекстом 			= "" + СтрокаПланЗаказ.АдресДоставки;
					//ЕФСОЛ Несторук 11.10.2016 +
					НовСтр.ВидДоставки				= ВидДоставки;
					НовСтр.НомерНакладной			= "" + СтруктураПоЗабору.АдресЗабора;
					//ЕФСОЛ Несторук 11.10.2016 -
				КонецЕсли;
			КонецЦикла;
		
			// Добавление Конечной точки
			Если ЗначениеЗаполнено(КонечнаяТочка) Тогда
				НовСтр = Объект.СписокАдресовНаКарте.Добавить();
				НовСтр.КраткоеОписание 			= "";
				НовСтр.Номер 					= "Б";
				НовСтр.НомерСвязанногоЗаказа 	= "";
				НовСтр.ВыделятьЦветом 			= Ложь;
				НовСтр.Отметка 					= Ложь;
				НовСтр.ОбработкаНажатия 		= Ложь;
				НовСтр.ПостроениеМаршрута 		= Истина;
				НовСтр.ИнформацияОЗаказе 		= "Конечная точка: " + КонечнаяТочка;
				НовСтр.АдресДолгота 			= "";
				НовСтр.АдресШирота 				= "";
				НовСтр.АдресТекстом 			= КонечнаяТочка;
			КонецЕсли; 
			
			
			
	ИначеЕсли ВидОтображения = 3 и ОтображениеКарты = ПредопределенноеЗначение("Перечисление.ES_ВидОтображенияКарты.OpenStreetMap")
		И ЗначениеЗаполнено(ВыделенныйПлан) Тогда
		
		НомерПлана = ПолучитьНомерВыделеногоПлана(ВыделенныйПлан);	
		
		Если ЗначениеЗаполнено(НачальнаяТочка) Тогда
			НовСтр = Объект.СписокАдресовНаКарте.Добавить();
			НовСтр.КраткоеОписание 			= "";
			НовСтр.Номер 					= "А";
			НовСтр.НомерСвязанногоЗаказа 	= "";
			НовСтр.ВыделятьЦветом 			= Ложь;
			НовСтр.Отметка 					= Ложь;
			НовСтр.ОбработкаНажатия 		= Ложь;
			НовСтр.ПостроениеМаршрута 		= Истина;
			НовСтр.ИнформацияОЗаказе 		= "Начальная точка: " + НачальнаяТочка;
			НовСтр.АдресДолгота 			= "";
			НовСтр.АдресШирота 				= "";
			НовСтр.АдресТекстом 			= НачальнаяТочка;
		КонецЕсли; 
		
		МассивПланов = Новый Массив;
		МассивПланов.Добавить(ВыделенныйПлан);
		СписокЗаказовПоПлану = ПолучитьМассивЗаказовПоПлану(МассивПланов);
		
		СоответствиеАдресовКоординат = Новый Соответствие;	   
		Для каждого Элем Из СписокЗаказовПоПлану Цикл
			СоответствиеАдресовКоординат.Вставить(Элем.АдресДоставки, Новый Структура("Широта, Долгота", СтрЗаменить(Элем.АдресДоставкиШирота, ",", "."), СтрЗаменить(Элем.АдресДоставкиДолгота, ",", ".")));
		КонецЦикла; 
		
		Для каждого СтрокаПланЗаказ Из СписокЗаказовПоПлану Цикл
			Если БезВыполненных Тогда
				Если СтрокаПланЗаказ.СтатусДокумента = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.НазначенПринят") ИЛИ
					СтрокаПланЗаказ.СтатусДокумента = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Назначен") ИЛИ
					СтрокаПланЗаказ.СтатусДокумента = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаборов.Назначен") Тогда
				Иначе 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ЭтоДДУ = Ложь;
			Если СтрокаПланЗаказ.ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.ДвериДвери") 
				И СтрокаПланЗаказ.ВидЗабора = ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.Упрощенный") Тогда
				Если ОтражатьДДуНаКарте Тогда
					ЭтоДДУ = Истина;
					мЦветМетки = "violet#238,130,238";
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			
			
			СсылкаНаОбъект = ПолучитьСсылкуНаЗаказ(СтрокаПланЗаказ.ДокументДоставки);
			
			ВидДоставки = ПолучитьВидДоставки(СтрокаПланЗаказ.ДокументДоставки);
			
			ИнформацияОЗаказе = "<br>Накладная: " + СтрокаПланЗаказ.НомерНакладной +" (" +ВидДоставки+")" + ?(СтрокаПланЗаказ.ЭтоЗаборГруза, "<br>Забор ", "<br>Заказ ") 
			+ "<br>Статус: " +СтрокаПланЗаказ.СтатусДокумента + "<br>Адрес: " + СтрокаПланЗаказ.АдресДоставки  
			+ "<br>Время доставки: "+ Формат(СтрокаПланЗаказ.ВремяДоставкиС,"ДФ=ЧЧ:мм; ДП=-") +" - "+ Формат(СтрокаПланЗаказ.ВремяДоставкиПо,"ДФ=ЧЧ:мм; ДП=-")
			+ "<br>Заказчик: " + СтрокаПланЗаказ.Заказчик +  "<br>Получатель: " + СтрокаПланЗаказ.Получатель + "<br>Примечание: "+ СокрЛП(СтрокаПланЗаказ.Комментарий) 
			+ "<br>Вес: "+  СтрокаПланЗаказ.ОбщийВес + "<br>Объем: "+  СтрокаПланЗаказ.ОбщийОбъем; 
			
			
			НовСтр = Объект.СписокАдресовНаКарте.Добавить();
			НовСтр.Код1С 					= СсылкаНаОбъект;
			НовСтр.НомерПлана               = НомерПлана;
			НовСтр.СсылкаНаЗаказ 			= СтрокаПланЗаказ.ДокументДоставки;
			НовСтр.КраткоеОписание 			= "" + СтрокаПланЗаказ.ДокументДоставки;
			НовСтр.Номер 					= "" + СтрокаПланЗаказ.НомерСтрокиВПлане;
			НовСтр.ИнтервалВремени			= Формат(СтрокаПланЗаказ.ВремяДоставкиС,"ДФ=Ч:мм") + "-" + Формат(СтрокаПланЗаказ.ВремяДоставкиПо,"ДФ=Ч:мм");
			НовСтр.НомерСвязанногоЗаказа 	= "";
			НовСтр.ВыделятьЦветом 			= Ложь;
			НовСтр.ЦветМетки 				= ?(ЭтоДДУ, мЦветМетки,"" + СтрокаПланЗаказ.ЦветМетки);
			НовСтр.Отметка 					= Ложь;
			НовСтр.ОбработкаНажатия 		= Ложь;
			НовСтр.ПостроениеМаршрута 		= Истина;
			НовСтр.ИнформацияОЗаказе 		= ИнформацияОЗаказе;
			НовСтр.АдресДолгота 			= СоответствиеАдресовКоординат[СтрокаПланЗаказ.АдресДоставки].Долгота;
			НовСтр.АдресШирота 				= СоответствиеАдресовКоординат[СтрокаПланЗаказ.АдресДоставки].Широта;
			НовСтр.АдресТекстом 			= "" + СтрокаПланЗаказ.АдресДоставки;
			НовСтр.ВидДоставки				= ВидДоставки;
			НовСтр.НомерНакладной			= СтрокаПланЗаказ.НомерНакладной;
			
			Если ЭтоДДУ ТОгда
				НовСтр = Объект.СписокАдресовНаКарте.Добавить();
				НовСтр.Код1С 					= СсылкаНаОбъект;
				НовСтр.СсылкаНаЗаказ 			= СтрокаПланЗаказ.ДокументДоставки;
				НовСтр.КраткоеОписание 			= "" + СтрокаПланЗаказ.ДокументДоставки;
				НовСтр.Номер 					= "(" + СтрокаПланЗаказ.НомерСтрокиВПлане+")";
				НовСтр.ИнтервалВремени			= "("+Формат(СтрокаПланЗаказ.ВремяДоставкиС,"ДФ=Ч:мм") + "-" + Формат(СтрокаПланЗаказ.ВремяДоставкиПо,"ДФ=Ч:мм")+")";
				НовСтр.НомерСвязанногоЗаказа 	= "";
				НовСтр.ВыделятьЦветом 			= Ложь;
				НовСтр.ЦветМетки 				=  мЦветМетки;
				НовСтр.Отметка 					= Ложь;
				НовСтр.ОбработкаНажатия 		= Ложь;
				НовСтр.ПостроениеМаршрута 		= Истина;
				НовСтр.ИнформацияОЗаказе 		= ИнформацияОЗаказе;
				СтруктураПоЗабору 				= ПолучитьСтруктуруПоЗабору(СтрокаПланЗаказ.ДокументДоставки);
				НовСтр.АдресДолгота 			= СтруктураПоЗабору.Долгота;
				НовСтр.АдресШирота 				= СтруктураПоЗабору.Широта;
				НовСтр.АдресТекстом 			= "" + СтрокаПланЗаказ.АдресДоставки;
				НовСтр.ВидДоставки				= ВидДоставки;
				НовСтр.НомерНакладной			= "" + СтруктураПоЗабору.АдресЗабора;
			КонецЕсли;
		КонецЦикла;		
			
			
	// Вид отображения = Совместно	
	ИначеЕсли ВидОтображения = 3 и ОтображениеКарты = ПредопределенноеЗначение("Перечисление.ES_ВидОтображенияКарты.YandexКарты") Тогда

		
		СЗНомПланов = Новый СписокЗначений;
		//Для каждого СтрокаПланДоставки Из Объект.ПланыДоставки Цикл
		//	СЗНомПланов.Добавить(СтрокаПланДоставки.ПланДоставки, СтрокаПланДоставки.НомерСтроки);
		//КонецЦикла; 
	   
		//СоответствиеАдресовКоординатПоПлану = Новый Соответствие;	   
		//Для каждого Элем Из Объект.ПланыДоставкиЗаказы Цикл
		//	СоответствиеАдресовКоординатПоПлану.Вставить(Элем.АдресДоставки, Новый Структура("Широта, Долгота", СтрЗаменить(Элем.АдресДоставкиШирота, ",", "."), СтрЗаменить(Элем.АдресДоставкиДолгота, ",", ".")));
		//	// *НЕ ИСПОЛЬЗУЕТСЯ* удален реквизит ИспользоватьЗабор
		//	//Если НЕ Элем.ЭтоЗаборГруза И НЕ Элем.ИспользоватьЗабор Тогда
		//	//	СоответствиеАдресовКоординатПоПлану.Вставить(Элем.ЗаборАдрес, Новый Структура("Широта, Долгота", СтрЗаменить(Элем.ЗаборАдресШирота, ",", "."), СтрЗаменить(Элем.ЗаборАдресДолгота, ",", ".")));
		//	//КонецЕсли; 
		//КонецЦикла; 
		
		// Вкладка Планы доставки
		
		МассивПланов = Новый Массив;
		ЗаполнитьСписокЗначенийПланоВДоставки(СЗНомПланов,МассивПланов);
		СписокЗаказовПоПлану = ПолучитьМассивЗаказовПоПлану(МассивПланов);
		СоответствиеАдресовКоординатПоПлану = Новый Соответствие;
	   
		Для каждого Элем Из СписокЗаказовПоПлану Цикл
			СоответствиеАдресовКоординатПоПлану.Вставить(Элем.АдресДоставки, Новый Структура("Широта, Долгота", СтрЗаменить(Элем.АдресДоставкиШирота, ",", "."), СтрЗаменить(Элем.АдресДоставкиДолгота, ",", ".")));
		КонецЦикла; 
		
		Для каждого СтрокаЗаказПланЗаказа Из СписокЗаказовПоПлану Цикл
			//ЭР Несторук С.И. 29.12.2016 17:24:28 {
			Если БезВыполненных Тогда
				Если СтрокаЗаказПланЗаказа.СтатусДокумента = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.НазначенПринят") ИЛИ
					СтрокаЗаказПланЗаказа.СтатусДокумента = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Назначен") ИЛИ
					СтрокаЗаказПланЗаказа.СтатусДокумента = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаборов.Назначен") Тогда
				Иначе 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ЭтоДДУ = Ложь;
			Если СтрокаЗаказПланЗаказа.ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.ДвериДвери") 
				И СтрокаЗаказПланЗаказа.ВидЗабора = ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.Упрощенный") Тогда
				Если ОтражатьДДуНаКарте Тогда
					ЭтоДДУ = Истина;
					мЦветМетки = "violet#238,130,238";
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			//}ЭР Несторук С.И.

			
			СсылкаНаОбъект = ПолучитьСсылкуНаЗаказ(СтрокаЗаказПланЗаказа.ДокументДоставки);

			НомерПлана = СЗНомПланов.НайтиПоЗначению(СтрокаЗаказПланЗаказа.ПланДоставки);

			// *НЕ ИСПОЛЬЗУЕТСЯ* удален реквизит ИспользоватьЗабор
			//Если СтрокаЗаказПланЗаказа.ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.ДвериДвери")
			//   И НЕ СтрокаЗаказПланЗаказа.ИспользоватьЗабор
			//Тогда
			//	
			//	ИнформацияОЗаборе = "" + СтрокаЗаказПланЗаказа.ДокументДоставки +
			//					 "<br>Адрес забора: " + СтрокаЗаказПланЗаказа.ЗаборАдрес + 
			//					 "<br>Контрагент: " + СтрокаЗаказПланЗаказа.ЗаборОтправитель;
			//
			//	НовСтр = Объект.СписокАдресовНаКарте.Добавить();
			//	НовСтр.Код1С 					= СсылкаНаОбъект;
			//	НовСтр.КраткоеОписание 			= "" + СтрокаЗаказПланЗаказа.ДокументДоставки;
			//	НовСтр.Номер 					= "" + НомерПлана;
			//	НовСтр.НомерСвязанногоЗаказа 	= "" + СтрокаЗаказПланЗаказа.ДокументДоставки;
			//	НовСтр.ВыделятьЦветом 			= Ложь;
			//	НовСтр.Отметка 					= Ложь;
			//	НовСтр.ОбработкаНажатия 		= Ложь;
			//	НовСтр.ПостроениеМаршрута 		= Ложь;
			//	НовСтр.ИнформацияОЗаказе 		= ИнформацияОЗаборе;
			//	НовСтр.АдресДолгота 			= СоответствиеАдресовКоординатПоПлану[СтрокаЗаказПланЗаказа.ЗаборАдрес].Долгота;
			//	НовСтр.АдресШирота 				= СоответствиеАдресовКоординатПоПлану[СтрокаЗаказПланЗаказа.ЗаборАдрес].Широта;
			//	НовСтр.АдресТекстом 			= "" + СтрокаЗаказПланЗаказа.ЗаборАдрес;
			//КонецЕсли; 
			
			//ИнформацияОЗаказе = "" + СтрокаЗаказПланЗаказа.ДокументДоставки +
			//				 ?(СтрокаЗаказПланЗаказа.ЭтоЗаборГруза, "<br>Адрес забора: ", "<br>Адрес доставки: ") + СтрокаЗаказПланЗаказа.АдресДоставки + 
			//				 "<br>Контрагент: " + СтрокаЗаказПланЗаказа.Получатель;
			
			ВидДоставки = ПолучитьВидДоставки(СтрокаЗаказПланЗаказа.ДокументДоставки);
			
			//ИнформацияОЗаказе = "" + СтрокаЗаказПланЗаказа.ДокументДоставки +
			//				 ?(СтрокаЗаказПланЗаказа.ЭтоЗаборГруза, "<br>Адрес забора: ", "<br>Адрес доставки: ") + СтрокаЗаказПланЗаказа.АдресДоставки + 
			//				 "<br>Получатель: " + СтрокаЗаказПланЗаказа.Получатель + "<br>Накладная: " + СтрокаЗаказПланЗаказа.НомерНакладной +" ("+ ВидДоставки +")"+ "<br>Заказчик: " + СтрокаЗаказПланЗаказа.Заказчик +
			//				 "<br>Вес: "+  СтрокаЗаказПланЗаказа.ОбщийВес + "<br>Время доставки: "+ Формат(СтрокаЗаказПланЗаказа.ВремяДоставкиС,"ДФ=Ч:мм; ДП=-") +" - "+
			//				 Формат(СтрокаЗаказПланЗаказа.ВремяДоставкиПо,"ДФ=Ч:мм; ДП=-") + "<br>Комментарий: "+ СокрЛП(СтрокаЗаказПланЗаказа.Комментарий);
			ИнформацияОЗаказе = "<br>Накладная: " + СтрокаЗаказПланЗаказа.НомерНакладной +" (" +ВидДоставки+")" + ?(СтрокаЗаказПланЗаказа.ЭтоЗаборГруза, "<br>Забор ", "<br>Заказ ") 
							+ "<br>Статус: " +СтрокаЗаказПланЗаказа.СтатусДокумента + "<br>Адрес: " + СтрокаЗаказПланЗаказа.АдресДоставки  
							 + "<br>Время доставки: "+ Формат(СтрокаЗаказПланЗаказа.ВремяДоставкиС,"ДФ=ЧЧ:мм; ДП=-") +" - "+ Формат(СтрокаЗаказПланЗаказа.ВремяДоставкиПо,"ДФ=ЧЧ:мм; ДП=-")
							 + "<br>Заказчик: " + СтрокаЗаказПланЗаказа.Заказчик +  "<br>Получатель: " + СтрокаЗаказПланЗаказа.Получатель + "<br>Примечание: "+ СокрЛП(СтрокаЗаказПланЗаказа.Комментарий) 
							 + "<br>Вес: "+  СтрокаЗаказПланЗаказа.ОбщийВес + "<br>Объем: "+  СтрокаЗаказПланЗаказа.ОбщийОбъем; 

			
			НовСтр = Объект.СписокАдресовНаКарте.Добавить();
			НовСтр.Код1С 					= СсылкаНаОбъект;
			НовСтр.КраткоеОписание 			= "" + СтрокаЗаказПланЗаказа.ДокументДоставки;
			НовСтр.Номер 					= НомерПлана;
			НовСтр.ИнтервалВремени			= Формат(СтрокаЗаказПланЗаказа.ВремяДоставкиС,"ДФ=Ч:мм") + "-" + Формат(СтрокаЗаказПланЗаказа.ВремяДоставкиПо,"ДФ=Ч:мм");
			НовСтр.НомерСвязанногоЗаказа 	= "";
			НовСтр.ВыделятьЦветом 			= Ложь;
			НовСтр.ЦветМетки 				= ?(ЭтоДДУ, мЦветМетки,"" + СтрокаЗаказПланЗаказа.ЦветМетки);
			НовСтр.Отметка 					= Ложь;
			НовСтр.ОбработкаНажатия 		= Ложь;
			НовСтр.ПостроениеМаршрута 		= Ложь;
			НовСтр.ИнформацияОЗаказе 		= ИнформацияОЗаказе;
			НовСтр.АдресДолгота 			= СоответствиеАдресовКоординатПоПлану[СтрокаЗаказПланЗаказа.АдресДоставки].Долгота;
			НовСтр.АдресШирота 				= СоответствиеАдресовКоординатПоПлану[СтрокаЗаказПланЗаказа.АдресДоставки].Широта;
			НовСтр.АдресТекстом 			= "" + СтрокаЗаказПланЗаказа.АдресДоставки;
			НовСтр.СсылкаНаЗаказ			= СтрокаЗаказПланЗаказа.ДокументДоставки;
			//ЕФСОЛ Несторук 11.10.2016 +
			НовСтр.ВидДоставки				= ВидДоставки;
			//ЕФСОЛ Несторук 11.10.2016 -
			
			Если ЭтоДДУ Тогда
				НовСтр = Объект.СписокАдресовНаКарте.Добавить();
				НовСтр.Код1С 					= СсылкаНаОбъект;
				НовСтр.КраткоеОписание 			= "" + СтрокаЗаказПланЗаказа.ДокументДоставки;
				НовСтр.Номер 					= НомерПлана;
				НовСтр.ИнтервалВремени			= Формат(СтрокаЗаказПланЗаказа.ВремяДоставкиС,"ДФ=Ч:мм") + "-" + Формат(СтрокаЗаказПланЗаказа.ВремяДоставкиПо,"ДФ=Ч:мм");
				НовСтр.НомерСвязанногоЗаказа 	= "";
				НовСтр.ВыделятьЦветом 			= Ложь;
				НовСтр.ЦветМетки 				= мЦветМетки;
				НовСтр.Отметка 					= Ложь;
				НовСтр.ОбработкаНажатия 		= Ложь;
				НовСтр.ПостроениеМаршрута 		= Ложь;
				НовСтр.ИнформацияОЗаказе 		= ИнформацияОЗаказе;
				СтруктураПоЗабору				= ПолучитьСтруктуруПоЗабору(СтрокаЗаказПланЗаказа.ДокументДоставки);
				НовСтр.АдресДолгота 			= СтруктураПоЗабору.Долгота;
				НовСтр.АдресШирота 				= СтруктураПоЗабору.Широта;
				НовСтр.АдресТекстом 			= "" + СтруктураПоЗабору.АдресЗабора;
				НовСтр.СсылкаНаЗаказ			= СтрокаЗаказПланЗаказа.ДокументДоставки;
				//ЕФСОЛ Несторук 11.10.2016 +
				НовСтр.ВидДоставки				= ВидДоставки;
				//ЕФСОЛ Несторук 11.10.2016 -
			КонецЕсли;

		КонецЦикла;
		
		// Вкладка Заказы
	   
		СоответствиеАдресовКоординат = Новый Соответствие;	   
		Для каждого Элем Из Объект.Заказы Цикл
			СоответствиеАдресовКоординат.Вставить(Элем.АдресДоставки, Новый Структура("Широта, Долгота", СтрЗаменить(Элем.АдресДоставкиШирота, ",", "."), СтрЗаменить(Элем.АдресДоставкиДолгота, ",", ".")));
			// *НЕ ИСПОЛЬЗУЕТСЯ* удален реквизит ИспользоватьЗабор
			//Если НЕ Элем.ЭтоЗаборГруза И НЕ Элем.ИспользоватьЗабор Тогда
			//	СоответствиеАдресовКоординат.Вставить(Элем.ЗаборАдрес, Новый Структура("Широта, Долгота", СтрЗаменить(Элем.ЗаборАдресШирота, ",", "."), СтрЗаменить(Элем.ЗаборАдресДолгота, ",", ".")));
			//КонецЕсли; 
		КонецЦикла; 
		
		Для каждого СтрокаЗаказ Из Объект.Заказы Цикл
			
			//ЭР Несторук С.И. 29.12.2016 17:24:28 {
			Если БезВыполненных Тогда
				Если СтрокаЗаказ.СтатусДокумента = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Подготовлен") ИЛИ
					СтрокаЗаказ.СтатусДокумента = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ПодготовленПринят") ИЛИ 
					СтрокаЗаказ.СтатусДокумента = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.НеДоставлен") ИЛИ
					СтрокаЗаказ.СтатусДокумента = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаборов.ВРаботе") ИЛИ
					СтрокаЗаказ.СтатусДокумента = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаборов.НеВыполнен") Тогда
				Иначе 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ЭтоДДУ = Ложь;
			Если СтрокаЗаказ.ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.ДвериДвери") 
				И СтрокаЗаказ.ВидЗабора = ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.Упрощенный") Тогда
					Если ОтражатьДДуНаКарте Тогда
					ЭтоДДУ = Истина;
					мЦветМетки = "violet#238,130,238";
				Иначе
					Продолжить;
				КонецЕсли;

			КонецЕсли;

			//ЭР Несторук С.И. }

			СсылкаНаОбъект = ПолучитьСсылкуНаЗаказ(СтрокаЗаказ.ДокументДоставки);
			
			ВидДоставки = ПолучитьВидДоставки(СтрокаЗаказ.ДокументДоставки);

			//ИнформацияОЗаказе = "" + СтрокаЗаказ.ДокументДоставки +
			//				 ?(СтрокаЗаказ.ЭтоЗаборГруза, "<br>Адрес забора: ", "<br>Адрес доставки: ") + СтрокаЗаказ.АдресДоставки + 
			//				 "<br>Получатель: " + СтрокаЗаказ.Получатель + "<br>Накладная: " + СтрокаЗаказ.НомерНакладной + " ("+ ВидДоставки +")"+ "<br>Заказчик: " + СтрокаЗаказ.Заказчик +
			//				 "<br>Курьер: "+СтрокаЗаказ.Курьер + "<br>Вес: "+  СтрокаЗаказ.ОбщийВес + "<br>Время доставки: "+ Формат(СтрокаЗаказ.ВремяДоставкиС,"ДФ=Ч:мм; ДП=-") +" - "+
			//				 Формат(СтрокаЗаказ.ВремяДоставкиПо,"ДФ=Ч:мм; ДП=-") + "<br>Комментарий: "+ СокрЛП(СтрокаЗаказ.Комментарий);

			ИнформацияОЗаказе = "<br>Накладная: " + СтрокаЗаказ.НомерНакладной +" (" +ВидДоставки+")" + ?(СтрокаЗаказ.ЭтоЗаборГруза, "<br>Забор ", "<br>Заказ ") 
							+ "<br>Статус: " +СтрокаЗаказПланЗаказа.СтатусДокумента + "<br>Адрес: " + СтрокаЗаказПланЗаказа.АдресДоставки  
							 + "<br>Время доставки: "+ Формат(СтрокаЗаказПланЗаказа.ВремяДоставкиС,"ДФ=ЧЧ:мм; ДП=-") +" - "+ Формат(СтрокаЗаказПланЗаказа.ВремяДоставкиПо,"ДФ=ЧЧ:мм; ДП=-")
							 + "<br>Заказчик: " + СтрокаЗаказПланЗаказа.Заказчик +  "<br>Получатель: " + СтрокаЗаказПланЗаказа.Получатель + "<br>Примечание: "+ СокрЛП(СтрокаЗаказПланЗаказа.Комментарий) 
							 + "<br>Вес: "+  СтрокаЗаказПланЗаказа.ОбщийВес + "<br>Объем: "+  СтрокаЗаказПланЗаказа.ОбщийОбъем; 				 
							 
			//ИнформацияОЗаказе = "" + СтрокаЗаказ.ДокументДоставки +
			//				 ?(СтрокаЗаказ.ЭтоЗаборГруза, "<br>Адрес забора: ", "<br>Адрес доставки: ") + СтрокаЗаказ.АдресДоставки + 
			//				 "<br>Контрагент: " + СтрокаЗаказ.Получатель;
				
			Если СтрокаЗаказ.ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.ПоПути") Тогда
				ВыделятьЦветом = Истина
			Иначе
				ВыделятьЦветом = Ложь;
			КонецЕсли; 
			
			НовСтр = Объект.СписокАдресовНаКарте.Добавить();
			НовСтр.Код1С 					= СсылкаНаОбъект;
			НовСтр.КраткоеОписание 			= "" + СтрокаЗаказ.ДокументДоставки;
			НовСтр.Номер 					= "" + СтрокаЗаказ.НомерСтроки;
			НовСтр.ИнтервалВремени			= Формат(СтрокаЗаказ.ВремяДоставкиС,"ДФ=Ч:мм") + "-" + Формат(СтрокаЗаказ.ВремяДоставкиПо,"ДФ=Ч:мм");
			//НовСтр.Номер 					= Формат(СтрокаЗаказ.ВремяДоставкиПо,"ДФ=ЧЧ:мм");
			НовСтр.НомерСвязанногоЗаказа 	= "";
			НовСтр.ВыделятьЦветом 			= ВыделятьЦветом;
			НовСтр.ЦветМетки 				= ?(ЭтоДДУ, мЦветМетки,"" + СтрокаЗаказ.ЦветМетки);
			НовСтр.Отметка 					= СтрокаЗаказ.Отметка;
			НовСтр.ОбработкаНажатия 		= Истина;
			НовСтр.ПостроениеМаршрута 		= Ложь;
			НовСтр.ИнформацияОЗаказе 		= ИнформацияОЗаказе;
			НовСтр.АдресДолгота 			= СоответствиеАдресовКоординат[СтрокаЗаказ.АдресДоставки].Долгота;
			НовСтр.АдресШирота 				= СоответствиеАдресовКоординат[СтрокаЗаказ.АдресДоставки].Широта;
			НовСтр.АдресТекстом 			= "" + СтрокаЗаказ.АдресДоставки;
			НовСтр.СсылкаНаЗаказ			= СтрокаЗаказ.ДокументДоставки;
			//ЕФСОЛ Несторук 11.10.2016 +
			НовСтр.ВидДоставки				= ВидДоставки;
			//ЕФСОЛ Несторук 11.10.2016 -

			Если ЭтоДДУ Тогда
				НовСтр = Объект.СписокАдресовНаКарте.Добавить();
				НовСтр.Код1С 					= СсылкаНаОбъект;
				НовСтр.КраткоеОписание 			= "" + СтрокаЗаказ.ДокументДоставки;
				НовСтр.Номер 					= "" + СтрокаЗаказ.НомерСтроки;
				НовСтр.ИнтервалВремени			= Формат(СтрокаЗаказ.ВремяДоставкиС,"ДФ=Ч:мм") + "-" + Формат(СтрокаЗаказ.ВремяДоставкиПо,"ДФ=Ч:мм");
				//НовСтр.Номер 					= Формат(СтрокаЗаказ.ВремяДоставкиПо,"ДФ=ЧЧ:мм");
				НовСтр.НомерСвязанногоЗаказа 	= "";
				НовСтр.ВыделятьЦветом 			= ВыделятьЦветом;
				НовСтр.ЦветМетки 				= ?(ЭтоДДУ, мЦветМетки,"" + СтрокаЗаказ.ЦветМетки);
				НовСтр.Отметка 					= СтрокаЗаказ.Отметка;
				НовСтр.ОбработкаНажатия 		= Истина;
				НовСтр.ПостроениеМаршрута 		= Ложь;
				НовСтр.ИнформацияОЗаказе 		= ИнформацияОЗаказе;
				СтруктураПоЗабору				= ПолучитьСтруктуруПоЗабору(СтрокаЗаказ.ДокументДоставки);
				НовСтр.АдресДолгота 			= СтруктураПоЗабору.Долгота;
				НовСтр.АдресШирота 				= СтруктураПоЗабору.Широта;
				НовСтр.АдресТекстом 			= "" + СтруктураПоЗабору.АдресЗабора;
				НовСтр.СсылкаНаЗаказ			= СтрокаЗаказ.ДокументДоставки;
				//ЕФСОЛ Несторук 11.10.2016 +
				НовСтр.ВидДоставки				= ВидДоставки;
				//ЕФСОЛ Несторук 11.10.2016 -
			КонецЕсли;
			
			// *НЕ ИСПОЛЬЗУЕТСЯ* удален реквизит ИспользоватьЗабор
			//Если СтрокаЗаказ.ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.ДвериДвери")
			//	И НЕ СтрокаЗаказ.ИспользоватьЗабор
			//Тогда
			//	
			//	ИнформацияОЗаборе = "" + СтрокаЗаказ.ДокументДоставки +
			//					 "<br>Адрес забора: " + СтрокаЗаказ.ЗаборАдрес + 
			//					 "<br>Контрагент: " + СтрокаЗаказ.ЗаборОтправитель;
			//
			//	НовСтр = Объект.СписокАдресовНаКарте.Добавить();
			//	НовСтр.Код1С 					= СсылкаНаОбъект;
			//	НовСтр.КраткоеОписание 			= "" + СтрокаЗаказ.ДокументДоставки;
			//	НовСтр.Номер 					= "" + СтрокаЗаказ.НомерСтроки;
			//	НовСтр.НомерСвязанногоЗаказа 	= "" + СтрокаЗаказ.ДокументДоставки;
			//	НовСтр.ВыделятьЦветом 			= ВыделятьЦветом;
			//	НовСтр.Отметка 					= СтрокаЗаказ.Отметка;
			//	НовСтр.ОбработкаНажатия 		= Истина;
			//	НовСтр.ПостроениеМаршрута 		= Ложь;
			//	НовСтр.ИнформацияОЗаказе 		= ИнформацияОЗаборе;
			//	НовСтр.АдресДолгота 			= СоответствиеАдресовКоординат[СтрокаЗаказ.ЗаборАдрес].Долгота;
			//	НовСтр.АдресШирота 				= СоответствиеАдресовКоординат[СтрокаЗаказ.ЗаборАдрес].Широта;
			//	НовСтр.АдресТекстом 			= "" + СтрокаЗаказ.ЗаборАдрес;
			//КонецЕсли; 

		КонецЦикла;
		
	// Отчеты о доставке
	ИначеЕсли ВидОтображения = 4
	   И Объект.ОтчетыОДоставке.Количество() > 0 Тогда
	   
	   // Добавление начальной точки
			Если ЗначениеЗаполнено(НачальнаяТочка) Тогда
				НовСтр = Объект.СписокАдресовНаКарте.Добавить();
				НовСтр.КраткоеОписание 			= "";
				НовСтр.Номер 					= "А";
				НовСтр.НомерСвязанногоЗаказа 	= "";
				НовСтр.ВыделятьЦветом 			= Ложь;
				НовСтр.Отметка 					= Ложь;
				НовСтр.ОбработкаНажатия 		= Ложь;
				НовСтр.ПостроениеМаршрута 		= Истина;
				НовСтр.ИнформацияОЗаказе 		= "Начальная точка: " + НачальнаяТочка;
				НовСтр.АдресДолгота 			= "";
				НовСтр.АдресШирота 				= "";
				НовСтр.АдресТекстом 			= НачальнаяТочка;
			КонецЕсли; 

	   // Добавление адресов по плану
	   Если Элементы.ОтчетыОДоставке.ТекущиеДанные = Неопределено Тогда
		   СписокЗаказовПоОтчету = Новый Массив;
	   Иначе
		   СписокЗаказовПоОтчету = Объект.ОтчетыОДоставкеЗаказы.НайтиСтроки(Новый Структура("ОтчетОДоставке", Элементы.ОтчетыОДоставке.ТекущиеДанные.ОтчетОДоставке));
	   КонецЕсли;
		//СписокЗаказовПоПлану = Объект.ПланыДоставкиЗаказы.НайтиСтроки(Новый Структура("ПланДоставки", Элементы.ПланыДоставки.ТекущиеДанные.ПланДоставки));
		СоответствиеАдресовКоординат = Новый Соответствие;	   
		Для каждого Элем Из СписокЗаказовПоОтчету Цикл
			СоответствиеАдресовКоординат.Вставить(Элем.АдресДоставки, Новый Структура("Широта, Долгота", СтрЗаменить(Элем.АдресДоставкиШирота, ",", "."), СтрЗаменить(Элем.АдресДоставкиДолгота, ",", ".")));
			Если НЕ Элем.ЭтоЗаборГруза Тогда
				//СоответствиеАдресовКоординат.Вставить(Элем.ЗаборАдрес, Новый Структура("Широта, Долгота", СтрЗаменить(Элем.ЗаборАдресШирота, ",", "."), СтрЗаменить(Элем.ЗаборАдресДолгота, ",", ".")));
				СоответствиеАдресовКоординат.Вставить(Элем.АдресДоставки, Новый Структура("Широта, Долгота", СтрЗаменить(Элем.АдресДоставкиШирота, ",", "."), СтрЗаменить(Элем.АдресДоставкиДолгота, ",", ".")));
			КонецЕсли; 
		КонецЦикла; 
	   
		Для каждого СтрокаЗаказ Из СписокЗаказовПоОтчету Цикл
			//ЭР Несторук С.И. 13.03.2017 16:45:12 {
			ЭтоДДУ = Ложь;
			Если СтрокаЗаказ.ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.ДвериДвери") 
				И СтрокаЗаказ.ВидЗабора = ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.Упрощенный") Тогда
				Если ОтражатьДДуНаКарте Тогда
					ЭтоДДУ = Истина;
					мЦветМетки = "violet#238,130,238";
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			//}ЭР Несторук С.И.
					
			СсылкаНаОбъект = ПолучитьСсылкуНаЗаказ(СтрокаЗаказ.ДокументДоставки);
			
			ВидДоставки = ПолучитьВидДоставки(СтрокаЗаказ.ДокументДоставки);
			
						 
			ИнформацияОЗаказе = "<br>Накладная: " + СтрокаЗаказ.НомерНакладной +" (" +ВидДоставки+")" + ?(СтрокаЗаказ.ЭтоЗаборГруза, "<br>Забор ", "<br>Заказ ") 
							+ "<br>Статус: " +СтрокаЗаказ.СтатусДокумента + "<br>Адрес: " + СтрокаЗаказ.АдресДоставки  
							 + "<br>Время доставки: "+ Формат(СтрокаЗаказ.ВремяДоставкиС,"ДФ=ЧЧ:мм; ДП=-") +" - "+ Формат(СтрокаЗаказ.ВремяДоставкиПо,"ДФ=ЧЧ:мм; ДП=-")
							 + "<br>Заказчик: " + СтрокаЗаказ.Заказчик +  "<br>Получатель: " + СтрокаЗаказ.Получатель + "<br>Примечание: "+ СокрЛП(СтрокаЗаказ.Комментарий) 
							 + "<br>Вес: "+  СтрокаЗаказ.ОбщийВес + "<br>Объем: "+  СтрокаЗаказ.ОбщийОбъем; 
							 			
			Если СтрокаЗаказ.СвязанныйДокумент = Неопределено Тогда
				НомСвязанногоДокумента = "";
				НомерСтрокиСвязанногоДокумента = "";
			Иначе
				НомСвязанногоДокумента = СтрокаЗаказ.СвязанныйДокумент;
				
				НомерСтрокиСвязанногоДокумента = "";
				НайдСтроки = Объект.Заказы.НайтиСтроки(Новый Структура("ДокументДоставки", НомСвязанногоДокумента));
				Если НайдСтроки.Количество() > 0 Тогда
					НомерСтрокиСвязанногоДокумента = НайдСтроки[0].НомерСтроки;
				КонецЕсли; 
			КонецЕсли;
			
			Если СтрокаЗаказ.ЭтоЗаборГруза
			   И СтрокаЗаказ.ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.ПоПути") Тогда
				ВыделятьЦветом = Истина
			Иначе
				ВыделятьЦветом = Ложь;
			КонецЕсли; 
			
			Если СтрокаЗаказ.ЭтоЗаборГруза И ЗначениеЗаполнено(НомерСтрокиСвязанногоДокумента) Тогда
				НомерНаМетке = "" + СтрокаЗаказ.НомерСтроки + "(" + НомерСтрокиСвязанногоДокумента + ")";
			Иначе
				НомерНаМетке = "" + СтрокаЗаказ.НомерСтроки;
			КонецЕсли; 
			ЦветМетки = "violet#238,130,238";
			НовСтр = Объект.СписокАдресовНаКарте.Добавить();
			НовСтр.Код1С 					= СсылкаНаОбъект;
			НовСтр.КраткоеОписание 			= "" + СтрокаЗаказ.ДокументДоставки;
			НовСтр.Номер 					= НомерНаМетке;
			НовСтр.ИнтервалВремени			= Формат(СтрокаЗаказ.ВремяДоставкиС,"ДФ=Ч:мм") + "-" + Формат(СтрокаЗаказ.ВремяДоставкиПо,"ДФ=Ч:мм");
			НовСтр.НомерСвязанногоЗаказа 	= "" + НомСвязанногоДокумента;
			НовСтр.ВыделятьЦветом 			= ВыделятьЦветом;
			НовСтр.ЦветМетки 				= ?(ЭтоДДУ, мЦветМетки,"" + ЦветМетки);
			НовСтр.Отметка 					= Ложь;
			НовСтр.ОбработкаНажатия 		= Ложь;
			НовСтр.ПостроениеМаршрута 		= Истина;
			НовСтр.ИнформацияОЗаказе 		= ИнформацияОЗаказе;
			НовСтр.АдресДолгота 			= СоответствиеАдресовКоординат[СтрокаЗаказ.АдресДоставки].Долгота;
			НовСтр.АдресШирота 				= СоответствиеАдресовКоординат[СтрокаЗаказ.АдресДоставки].Широта;
			НовСтр.АдресТекстом 			= "" + СтрокаЗаказ.АдресДоставки;
			НовСтр.ВидДоставки				= ВидДоставки;
			НовСтр.НомерНакладной			= СтрокаЗаказ.НомерНакладной;
			//Фиолетовым отражаются заказы ДДу 
			Если ЭтоДДУ Тогда
				НовСтр = Объект.СписокАдресовНаКарте.Добавить();
				НовСтр.Код1С 					= СсылкаНаОбъект;
				НовСтр.КраткоеОписание 			= "" + СтрокаЗаказ.ДокументДоставки;
				НовСтр.Номер 					= "" + СтрокаПланЗаказ.НомерСтрокиВПлане;
				НовСтр.ИнтервалВремени			= Формат(СтрокаЗаказ.ВремяДоставкиС,"ДФ=Ч:мм") + "-" + Формат(СтрокаЗаказ.ВремяДоставкиПо,"ДФ=Ч:мм");
				НовСтр.НомерСвязанногоЗаказа 	= "" + НомСвязанногоДокумента;
				НовСтр.ВыделятьЦветом 			= ВыделятьЦветом;
				НовСтр.ЦветМетки 				= мЦветМетки;
				НовСтр.Отметка 					= Ложь;
				НовСтр.ОбработкаНажатия 		= Ложь;
				НовСтр.ПостроениеМаршрута 		= Истина;
				НовСтр.ИнформацияОЗаказе 		= ИнформацияОЗаказе;
				СтруктураПоЗабору 				= ПолучитьСтруктуруПоЗабору(СтрокаЗаказ.ДокументДоставки);
				НовСтр.АдресДолгота 			= СтруктураПоЗабору.Долгота;
				НовСтр.АдресШирота 				= СтруктураПоЗабору.Широта;
				НовСтр.АдресТекстом 			= "" + СтруктураПоЗабору.АдресЗабора;
				//ЕФСОЛ Несторук 11.10.2016 +
				НовСтр.ВидДоставки				= ВидДоставки;
				//ЕФСОЛ Несторук 11.10.2016 -
			КонецЕсли; 				 		
		КонецЦикла;
		
		// Добавление Конечной точки
		Если ЗначениеЗаполнено(КонечнаяТочка) Тогда
			НовСтр = Объект.СписокАдресовНаКарте.Добавить();
			НовСтр.КраткоеОписание 			= "";
			НовСтр.Номер 					= "Б";
			НовСтр.НомерСвязанногоЗаказа 	= "";
			НовСтр.ВыделятьЦветом 			= Ложь;
			НовСтр.Отметка 					= Ложь;
			НовСтр.ОбработкаНажатия 		= Ложь;
			НовСтр.ПостроениеМаршрута 		= Истина;
			НовСтр.ИнформацияОЗаказе 		= "Конечная точка: " + КонечнаяТочка;
			НовСтр.АдресДолгота 			= "";
			НовСтр.АдресШирота 				= "";
			НовСтр.АдресТекстом 			= КонечнаяТочка;
		КонецЕсли; 	
		
	// Вид отображения = Заказы + Отчеты	
	ИначеЕсли ВидОтображения = 5 Тогда
		
		СЗНомОтчетов = Новый СписокЗначений;
		Для каждого СтрокаОтчеты Из Объект.ОтчетыОДоставке Цикл
			СЗНомОтчетов.Добавить(СтрокаОтчеты.ОтчетОДоставке, СтрокаОтчеты.НомерСтроки);
		КонецЦикла; 
	   
		СоответствиеАдресовКоординатПоОтчету = Новый Соответствие;	   
		Для каждого Элем Из Объект.ОтчетыОДоставкеЗаказы Цикл
			СоответствиеАдресовКоординатПоОтчету.Вставить(Элем.АдресДоставки, Новый Структура("Широта, Долгота", СтрЗаменить(Элем.АдресДоставкиШирота, ",", "."), СтрЗаменить(Элем.АдресДоставкиДолгота, ",", ".")));
			
		КонецЦикла; 
		
		// Вкладка Отчеты доставки
		
		Для каждого СтрокаЗаказОтчеты Из Объект.ОтчетыОДоставкеЗаказы Цикл
			
			Если БезВыполненных Тогда
				Если СтрокаЗаказОтчеты.СтатусДокумента = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.НазначенПринят") ИЛИ
					СтрокаЗаказОтчеты.СтатусДокумента = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Назначен") ИЛИ
					СтрокаЗаказОтчеты.СтатусДокумента = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаборов.Назначен") Тогда
				Иначе 
					Продолжить;
				КонецЕсли;
			КонецЕсли;   			
			ЭтоДДУ = Ложь;
			Если СтрокаЗаказОтчеты.ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.ДвериДвери") 
				И СтрокаЗаказОтчеты.ВидЗабора = ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.Упрощенный") Тогда
				Если ОтражатьДДуНаКарте Тогда
					ЭтоДДУ = Истина;
					мЦветМетки = "violet#238,130,238";
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;   			
			
			СсылкаНаОбъект = ПолучитьСсылкуНаЗаказ(СтрокаЗаказОтчеты.ДокументДоставки);
			
			ВидДоставки = ПолучитьВидДоставки(СтрокаЗаказОтчеты.ДокументДоставки);
			
			
			ИнформацияОЗаказе = "<br>Накладная: " + СтрокаЗаказОтчеты.НомерНакладной +" (" +ВидДоставки+")" + ?(СтрокаЗаказОтчеты.ЭтоЗаборГруза, "<br>Забор ", "<br>Заказ ") 
			+ "<br>Статус: " + СтрокаЗаказОтчеты.СтатусДокумента + "<br>Адрес: " + СтрокаЗаказОтчеты.АдресДоставки  
			+ "<br>Время доставки: "+ Формат(СтрокаЗаказОтчеты.ВремяДоставкиС,"ДФ=ЧЧ:мм; ДП=-") +" - "+ Формат(СтрокаЗаказОтчеты.ВремяДоставкиПо,"ДФ=ЧЧ:мм; ДП=-")
			+ "<br>Заказчик: " + СтрокаЗаказОтчеты.Заказчик +  "<br>Получатель: " + СтрокаЗаказОтчеты.Получатель + "<br>Примечание: "+ СокрЛП(СтрокаЗаказОтчеты.Комментарий) 
			+ "<br>Вес: "+  СтрокаЗаказОтчеты.ОбщийВес + "<br>Объем: "+  СтрокаЗаказОтчеты.ОбщийОбъем; 
			
			Если СтрокаЗаказОтчеты.СвязанныйДокумент = Неопределено Тогда
				НомСвязанногоДокумента = "";
				НомерСтрокиСвязанногоДокумента = "";
			Иначе
				НомСвязанногоДокумента = СтрокаЗаказОтчеты.СвязанныйДокумент;
				
				НомерСтрокиСвязанногоДокумента = "";
				НайдСтроки = Объект.Заказы.НайтиСтроки(Новый Структура("ДокументДоставки", НомСвязанногоДокумента));
				Если НайдСтроки.Количество() > 0 Тогда
					НомерСтрокиСвязанногоДокумента = НайдСтроки[0].НомерСтроки;
				КонецЕсли; 
			КонецЕсли;
			
			Если СтрокаЗаказОтчеты.ЭтоЗаборГруза
				И СтрокаЗаказОтчеты.ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.ПоПути") Тогда
				ВыделятьЦветом = Истина
			Иначе
				ВыделятьЦветом = Ложь;
			КонецЕсли; 
			
			Если СтрокаЗаказОтчеты.ЭтоЗаборГруза И ЗначениеЗаполнено(НомерСтрокиСвязанногоДокумента) Тогда
				НомерНаМетке = "" + СтрокаЗаказОтчеты.НомерСтроки + "(" + НомерСтрокиСвязанногоДокумента + ")";
			Иначе
				НомерНаМетке = "" + СтрокаЗаказОтчеты.НомерСтроки;
			КонецЕсли; 
			ЦветМетки = "violet#238,130,238";
			НовСтр = Объект.СписокАдресовНаКарте.Добавить();
			НовСтр.Код1С 					= СсылкаНаОбъект;
			НовСтр.КраткоеОписание 			= "" + СтрокаЗаказОтчеты.ДокументДоставки;
			НовСтр.Номер 					= НомерНаМетке;
			НовСтр.ИнтервалВремени			= Формат(СтрокаЗаказОтчеты.ВремяДоставкиС,"ДФ=Ч:мм") + "-" + Формат(СтрокаЗаказОтчеты.ВремяДоставкиПо,"ДФ=Ч:мм");
			НовСтр.НомерСвязанногоЗаказа 	= "" + НомСвязанногоДокумента;
			НовСтр.ВыделятьЦветом 			= ВыделятьЦветом;
			НовСтр.ЦветМетки 				= ?(ЭтоДДУ, мЦветМетки,"" + ЦветМетки);
			НовСтр.Отметка 					= Ложь;
			НовСтр.ОбработкаНажатия 		= Ложь;
			НовСтр.ПостроениеМаршрута 		= Истина;
			НовСтр.ИнформацияОЗаказе 		= ИнформацияОЗаказе;
			НовСтр.АдресДолгота 			= СоответствиеАдресовКоординатПоОтчету[СтрокаЗаказОтчеты.АдресДоставки].Долгота;
			НовСтр.АдресШирота 				= СоответствиеАдресовКоординатПоОтчету[СтрокаЗаказОтчеты.АдресДоставки].Широта;
			НовСтр.АдресТекстом 			= "" + СтрокаЗаказОтчеты.АдресДоставки;
			НовСтр.ВидДоставки				= ВидДоставки;
			НовСтр.НомерНакладной			= СтрокаЗаказОтчеты.НомерНакладной;
			//Фиолетовым отражаются заказы ДДу 
			Если ЭтоДДУ Тогда
				НовСтр = Объект.СписокАдресовНаКарте.Добавить();
				НовСтр.Код1С 					= СсылкаНаОбъект;
				НовСтр.КраткоеОписание 			= "" + СтрокаЗаказОтчеты.ДокументДоставки;
				//НовСтр.Номер 					= "" + СтрокаЗаказОтчеты.НомерСтрокиВПлане;
				НовСтр.ИнтервалВремени			= Формат(СтрокаЗаказОтчеты.ВремяДоставкиС,"ДФ=Ч:мм") + "-" + Формат(СтрокаЗаказОтчеты.ВремяДоставкиПо,"ДФ=Ч:мм");
				НовСтр.НомерСвязанногоЗаказа 	= "" + НомСвязанногоДокумента;
				НовСтр.ВыделятьЦветом 			= ВыделятьЦветом;
				НовСтр.ЦветМетки 				= мЦветМетки;
				НовСтр.Отметка 					= Ложь;
				НовСтр.ОбработкаНажатия 		= Ложь;
				НовСтр.ПостроениеМаршрута 		= Истина;
				НовСтр.ИнформацияОЗаказе 		= ИнформацияОЗаказе;
				СтруктураПоЗабору 				= ПолучитьСтруктуруПоЗабору(СтрокаЗаказОтчеты.ДокументДоставки);
				НовСтр.АдресДолгота 			= СтруктураПоЗабору.Долгота;
				НовСтр.АдресШирота 				= СтруктураПоЗабору.Широта;
				НовСтр.АдресТекстом 			= "" + СтруктураПоЗабору.АдресЗабора;
				//ЕФСОЛ Несторук 11.10.2016 +
				НовСтр.ВидДоставки				= ВидДоставки;
				//ЕФСОЛ Несторук 11.10.2016 -
			КонецЕсли; 				 		
		КонецЦикла;

		
		// Вкладка Заказы
	   
		СоответствиеАдресовКоординат = Новый Соответствие;	   
		Для каждого Элем Из Объект.Заказы Цикл
			СоответствиеАдресовКоординат.Вставить(Элем.АдресДоставки, Новый Структура("Широта, Долгота", СтрЗаменить(Элем.АдресДоставкиШирота, ",", "."), СтрЗаменить(Элем.АдресДоставкиДолгота, ",", ".")));
		КонецЦикла; 
		
		Для каждого СтрокаЗаказ Из Объект.Заказы Цикл
			
			Если БезВыполненных Тогда
				Если СтрокаЗаказ.СтатусДокумента = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Подготовлен") ИЛИ
					СтрокаЗаказ.СтатусДокумента = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ПодготовленПринят") ИЛИ 
					СтрокаЗаказ.СтатусДокумента = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.НеДоставлен") ИЛИ
					СтрокаЗаказ.СтатусДокумента = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаборов.ВРаботе") ИЛИ
					СтрокаЗаказ.СтатусДокумента = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаборов.НеВыполнен") Тогда
				Иначе 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ЭтоДДУ = Ложь;
			Если СтрокаЗаказ.ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.ДвериДвери") 
				И СтрокаЗаказ.ВидЗабора = ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.Упрощенный") Тогда
					Если ОтражатьДДуНаКарте Тогда
					ЭтоДДУ = Истина;
					мЦветМетки = "violet#238,130,238";
				Иначе
					Продолжить;
				КонецЕсли;

			КонецЕсли; 
			СсылкаНаОбъект = ПолучитьСсылкуНаЗаказ(СтрокаЗаказ.ДокументДоставки);
			
			ВидДоставки = ПолучитьВидДоставки(СтрокаЗаказ.ДокументДоставки);

			ИнформацияОЗаказе = "<br>Накладная: " + СтрокаЗаказ.НомерНакладной +" (" +ВидДоставки+")" + ?(СтрокаЗаказ.ЭтоЗаборГруза, "<br>Забор ", "<br>Заказ ") 
							+ "<br>Статус: " +СтрокаЗаказОтчеты.СтатусДокумента + "<br>Адрес: " + СтрокаЗаказОтчеты.АдресДоставки  
							 + "<br>Время доставки: "+ Формат(СтрокаЗаказОтчеты.ВремяДоставкиС,"ДФ=ЧЧ:мм; ДП=-") +" - "+ Формат(СтрокаЗаказОтчеты.ВремяДоставкиПо,"ДФ=ЧЧ:мм; ДП=-")
							 + "<br>Заказчик: " + СтрокаЗаказОтчеты.Заказчик +  "<br>Получатель: " + СтрокаЗаказОтчеты.Получатель + "<br>Примечание: "+ СокрЛП(СтрокаЗаказОтчеты.Комментарий) 
							 + "<br>Вес: "+  СтрокаЗаказОтчеты.ОбщийВес + "<br>Объем: "+  СтрокаЗаказОтчеты.ОбщийОбъем; 				 
							 
			Если СтрокаЗаказ.ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.ПоПути") Тогда
				ВыделятьЦветом = Истина
			Иначе
				ВыделятьЦветом = Ложь;
			КонецЕсли; 
			
			НовСтр = Объект.СписокАдресовНаКарте.Добавить();
			НовСтр.Код1С 					= СсылкаНаОбъект;
			НовСтр.КраткоеОписание 			= "" + СтрокаЗаказ.ДокументДоставки;
			НовСтр.Номер 					= "" + СтрокаЗаказ.НомерСтроки;
			НовСтр.ИнтервалВремени			= Формат(СтрокаЗаказ.ВремяДоставкиС,"ДФ=Ч:мм") + "-" + Формат(СтрокаЗаказ.ВремяДоставкиПо,"ДФ=Ч:мм");
			//НовСтр.Номер 					= Формат(СтрокаЗаказ.ВремяДоставкиПо,"ДФ=ЧЧ:мм");
			НовСтр.НомерСвязанногоЗаказа 	= "";
			НовСтр.ВыделятьЦветом 			= ВыделятьЦветом;
			НовСтр.ЦветМетки 				= ?(ЭтоДДУ, мЦветМетки,"" + СтрокаЗаказ.ЦветМетки);
			НовСтр.Отметка 					= СтрокаЗаказ.Отметка;
			НовСтр.ОбработкаНажатия 		= Истина;
			НовСтр.ПостроениеМаршрута 		= Ложь;
			НовСтр.ИнформацияОЗаказе 		= ИнформацияОЗаказе;
			НовСтр.АдресДолгота 			= СоответствиеАдресовКоординат[СтрокаЗаказ.АдресДоставки].Долгота;
			НовСтр.АдресШирота 				= СоответствиеАдресовКоординат[СтрокаЗаказ.АдресДоставки].Широта;
			НовСтр.АдресТекстом 			= "" + СтрокаЗаказ.АдресДоставки;
			НовСтр.СсылкаНаЗаказ			= СтрокаЗаказ.ДокументДоставки;
			//ЕФСОЛ Несторук 11.10.2016 +
			НовСтр.ВидДоставки				= ВидДоставки;
			//ЕФСОЛ Несторук 11.10.2016 -

			Если ЭтоДДУ Тогда
				НовСтр = Объект.СписокАдресовНаКарте.Добавить();
				НовСтр.Код1С 					= СсылкаНаОбъект;
				НовСтр.КраткоеОписание 			= "" + СтрокаЗаказ.ДокументДоставки;
				НовСтр.Номер 					= "" + СтрокаЗаказ.НомерСтроки;
				НовСтр.ИнтервалВремени			= Формат(СтрокаЗаказ.ВремяДоставкиС,"ДФ=Ч:мм") + "-" + Формат(СтрокаЗаказ.ВремяДоставкиПо,"ДФ=Ч:мм");
				//НовСтр.Номер 					= Формат(СтрокаЗаказ.ВремяДоставкиПо,"ДФ=ЧЧ:мм");
				НовСтр.НомерСвязанногоЗаказа 	= "";
				НовСтр.ВыделятьЦветом 			= ВыделятьЦветом;
				НовСтр.ЦветМетки 				= ?(ЭтоДДУ, мЦветМетки,"" + СтрокаЗаказ.ЦветМетки);
				НовСтр.Отметка 					= СтрокаЗаказ.Отметка;
				НовСтр.ОбработкаНажатия 		= Истина;
				НовСтр.ПостроениеМаршрута 		= Ложь;
				НовСтр.ИнформацияОЗаказе 		= ИнформацияОЗаказе;
				СтруктураПоЗабору				= ПолучитьСтруктуруПоЗабору(СтрокаЗаказ.ДокументДоставки);
				НовСтр.АдресДолгота 			= СтруктураПоЗабору.Долгота;
				НовСтр.АдресШирота 				= СтруктураПоЗабору.Широта;
				НовСтр.АдресТекстом 			= "" + СтруктураПоЗабору.АдресЗабора;
				НовСтр.СсылкаНаЗаказ			= СтрокаЗаказ.ДокументДоставки;
				//ЕФСОЛ Несторук 11.10.2016 +
				НовСтр.ВидДоставки				= ВидДоставки;
				//ЕФСОЛ Несторук 11.10.2016 -
			КонецЕсли;  		
		КонецЦикла;    		
	КонецЕсли;   	
КонецПроцедуры



&НаСервере
Функция ПолучитьНомерВыделеногоПлана(ВыделеныйПлан)
	//ЭР Сальник К.А. 13.04.2018 12:57:00 {
	НомерПлана = ВыделеныйПлан.Номер;
	
	Возврат НомерПлана;	
	//}ЭР Сальник К.А.
КонецФункции


&НаКлиенте
Функция ПолучитьСписокЗаказов()
//ЕФСОЛ Несторук 11.08.2016 +
	ОтражатьВремя = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(ПредопределенноеЗначение("Перечисление.ES_ВидыСтартовыхНастроек.ОтражатьВремяНаКарте"));
	Если НЕ ЗначениеЗаполнено(ОтражатьВремя) Тогда
		ОтражатьВремя = Ложь;
	КонецЕсли;
	
	//ЕФСОЛ Несторук 11.08.2016-
	ВозвращаемыйМассивСтруктур = Новый Массив;
	
	Для каждого Стр Из Объект.СписокАдресовНаКарте Цикл
		Если НЕ Стр.Номер = "А" И НЕ Стр.Номер = "Б" Тогда
			СтруктураЗаказа = Новый Структура;
			СтруктураЗаказа.Вставить("Код1С", 					Стр.Код1С);
			СтруктураЗаказа.Вставить("КраткоеОписание", 		Стр.КраткоеОписание);
			//ЕФСОЛ Несторук 11.08.2016 +
			Если ОтражатьВремя Тогда
			//СтруктураЗаказа.Вставить("Номер", 					Стр.ИнтервалВремени);
			СтруктураЗаказа.Вставить("Номер", 					Стр.Номер +"; "+Стр.ИнтервалВремени);
			Иначе
				СтруктураЗаказа.Вставить("Номер", 					Стр.Номер);
			КонецЕсли;
			//ЕФСОЛ Несторук 11.08.2016 -
			СтруктураЗаказа.Вставить("НомерСвязанногоЗаказа", 	Стр.НомерСвязанногоЗаказа);
			СтруктураЗаказа.Вставить("ВыделятьЦветом", 			Стр.ВыделятьЦветом);
			Если ЗначениеЗаполнено(Стр.ЦветМетки) Тогда
				ЦветМетки = Истина;
				мМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр.ЦветМетки,"#");
				Если мМассив[0] = "truck" Тогда
					//ИмяЦвета = "twirl#"+мМассив[0]+"Icon";
					ИмяЦвета = "twirl#redStretchyIcon";
				//Иначе					
				//	ИмяЦвета = "twirl#"+мМассив[0]+"StretchyIcon";
				Иначе
				ИмяЦвета = "twirl#"+ мМассив[0]+"StretchyIcon";
				КонецЕсли;
			Иначе
				//ЕФСОЛ Несторук 28.09.2016 +
				Если  ОтражатьВремя Тогда
					ЦветМетки = Истина;

					Если ВидОтображения = 1 Тогда
						ИмяЦвета = "twirl#redStretchyIcon";
						//ИмяЦвета = "twirl#greyStretchyIcon";
					КонецЕсли;
					Если ВидОтображения = 2 Тогда
						
						//ИмяЦвета = "twirl#redStretchyIcon";
						ИмяЦвета = "twirl#greyStretchyIcon";
					КонецЕсли;
					
					Если ВидОтображения = 3 Тогда
						НайтиЗаказ = Объект.Заказы.НайтиСтроки(Новый Структура("ДокументДоставки", Стр.СсылкаНаЗаказ));
						Если НайтиЗаказ.Количество() > 0 Тогда
						ИмяЦвета = "twirl#redStretchyIcon";
						Иначе
						НайтиЗаказ = Объект.ПланыДоставкиЗаказы.НайтиСтроки(Новый Структура("ДокументДоставки", Стр.СсылкаНаЗаказ));
							Если НайтиЗаказ.Количество() > 0 Тогда
							ИмяЦвета = "twirl#greyStretchyIcon";
							Иначе 
							ИмяЦвета = "twirl#greyStretchyIcon";
							КонецЕсли;
						
						КонецЕсли;
						
					КонецЕсли;
					
					Если ВидОтображения = 4 Тогда
						ИмяЦвета = "twirl#redStretchyIcon";
						//ИмяЦвета = "twirl#greyStretchyIcon";
					КонецЕсли;

														
				Иначе 
				ЦветМетки = Ложь;
				ИмяЦвета = "";
			КонецЕсли;
			//ЕФСОЛ Несторук 28.09.2016 +

			КонецЕсли;
			СтруктураЗаказа.Вставить("ЦветМетки", 				ЦветМетки);
			СтруктураЗаказа.Вставить("Цвет", 					ИмяЦвета);
			СтруктураЗаказа.Вставить("Отметка", 				Стр.Отметка);
			СтруктураЗаказа.Вставить("ОбработкаНажатия", 		Стр.ОбработкаНажатия);
			СтруктураЗаказа.Вставить("ПостроениеМаршрута", 		Стр.ПостроениеМаршрута);
			СтруктураЗаказа.Вставить("ИнформацияОЗаказе", 		Стр.ИнформацияОЗаказе);
			СтруктураЗаказа.Вставить("Координаты", 				Новый Структура("Долгота, Широта", Стр.АдресДолгота, Стр.АдресШирота));
			СтруктураЗаказа.Вставить("АдресТекстом", 			Стр.АдресТекстом);
			
			ВозвращаемыйМассивСтруктур.Добавить(СтруктураЗаказа);
			
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ВозвращаемыйМассивСтруктур;

КонецФункции

&НаСервереБезКонтекста
//- массив структур:
// * Код - код справочника
// * Цвет - цвет заливки зоны
// * Название (при наведении подсказка)
// * СписокВершин - массив структур (долгота, широта)()
Функция ПолучитьСписокЗон()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ES_ЗоныГородаСписокКоординат.Ссылка.Код КАК Код,
		|	ES_ЗоныГородаСписокКоординат.Ссылка.Наименование КАК Наименование,
		|	ES_ЗоныГородаСписокКоординат.Ссылка.КодЦвета КАК КодЦвета,
		|	ES_ЗоныГородаСписокКоординат.Долгота,
		|	ES_ЗоныГородаСписокКоординат.Широта,
		|	ES_ЗоныГородаСписокКоординат.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ES_ЗоныГорода.СписокКоординат КАК ES_ЗоныГородаСписокКоординат
		|ГДЕ
		|	НЕ ES_ЗоныГородаСписокКоординат.Ссылка.ПометкаУдаления
		|ИТОГИ
		|	МАКСИМУМ(Наименование),
		|	МАКСИМУМ(КодЦвета),
		|	МАКСИМУМ(Ссылка)
		|ПО
		|	Код";

	РезультатЗапроса = Запрос.Выполнить();

	ВозвращаемыйМассивСтруктур = Новый Массив;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаКод = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКод.Следующий() Цикл
			
			СтруктураЭлементаСправочника = Новый Структура;
			СтруктураЭлементаСправочника.Вставить("Код", ПолучитьУИДЗоны(ВыборкаКод.Ссылка));//ВыборкаКод.Код);
			СтруктураЭлементаСправочника.Вставить("Название", ВыборкаКод.Наименование);
			СтруктураЭлементаСправочника.Вставить("Цвет", ВыборкаКод.КодЦвета);

			МассивКоординатЗоны = Новый Массив;
			
			ВыборкаДетальныеЗаписи = ВыборкаКод.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СтруктураКоординат = Новый Структура;
				СтруктураКоординат.Вставить("Долгота", СтрЗаменить(ВыборкаДетальныеЗаписи.Долгота, ",", "."));
				СтруктураКоординат.Вставить("Широта", СтрЗаменить(ВыборкаДетальныеЗаписи.Широта, ",", "."));
				МассивКоординатЗоны.Добавить(СтруктураКоординат);
			КонецЦикла;
			
			СтруктураЭлементаСправочника.Вставить("СписокВершин", МассивКоординатЗоны);
			
			ВозвращаемыйМассивСтруктур.Добавить(СтруктураЭлементаСправочника);
		КонецЦикла;

	КонецЕсли;
	
	Возврат ВозвращаемыйМассивСтруктур;
	
КонецФункции

// ТЧ Список адресов
&НаКлиенте
Процедура СписокАдресовНаКартеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАдресовНаКартеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаЗаказ(ОбъектЗаказ)
	
	// Получаем полный путь к метаданным объекта                        
	ТипОбъектаЗаказа = ОбъектЗаказ.Метаданные().ПолноеИмя();			    
	// Получаем GUID объекта в информационной базе                        
	GUIDОбъектаЗаказа = ОбъектЗаказ.УникальныйИдентификатор();					   
	// Формируем строку ссылки как GUID объекта"                        
	Возврат GUIDОбъектаЗаказа;
	
КонецФункции

&НаСервере
Функция СформироватьМассивЗаказовДляОтметки(РезультатОбработки)
	
	МассивДокументов = Новый Массив;
	ВозвращаемыйМассив = Новый Массив;
	
	// Создаем массив ссылок на документы
	Для Каждого Строка Из РезультатОбработки Цикл                                                       
		МассивДокументов.Добавить(ПолучитьДокументДоставкиПоСсылке(Строка.КодДокумента));
	КонецЦикла;

	// Создаем ТЗ для передачи документов в запрос
	ТЗДокументы = Новый ТаблицаЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ES_ЗаборГруза"));
	
	ТЗДокументы.Колонки.Добавить("ДокументыДоставки", Новый ОписаниеТипов(МассивТипов));
	
	Для каждого Док Из МассивДокументов Цикл
		НовСтр = ТЗДокументы.Добавить();
		НовСтр.ДокументыДоставки = Док;
	КонецЦикла; 
	
	// Получаем массив переданных и связанных документов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		
		"ВЫБРАТЬ
		|	ТЗДокументы.ДокументыДоставки
		|ПОМЕСТИТЬ ВТ_ТЗДокументы
		|ИЗ
		|	&ТЗДокументы КАК ТЗДокументы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ES_СведенияОЗаборахСрезПоследних.Забор КАК ДокументДоставки
		|ПОМЕСТИТЬ ВТ_Документы
		|ИЗ
		|	РегистрСведений.ES_СведенияОЗаборах.СрезПоследних(, ОснованиеЗабора В (&МассивДокументов)) КАК ES_СведенияОЗаборахСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ES_СведенияОЗаборахСрезПоследних.ОснованиеЗабора
		|ИЗ
		|	РегистрСведений.ES_СведенияОЗаборах.СрезПоследних(, Забор В (&МассивДокументов)) КАК ES_СведенияОЗаборахСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ.ДокументыДоставки
		|ИЗ
		|	ВТ_ТЗДокументы КАК ВТ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Документы.ДокументДоставки
		|ИЗ
		|	ВТ_Документы КАК ВТ_Документы";

	Запрос.УстановитьПараметр("ТЗДокументы", ТЗДокументы);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВозвращаемыйМассив = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ДокументДоставки");
	КонецЕсли; 

	Возврат ВозвращаемыйМассив;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДокументДоставкиПоСсылке(КодЗаказа)
	
	// проверяем на битую ссылку:
	// если результат запроса пустой - переданная ссылка битая
	// если ссылка битая - тип документа, в котором ищем неправильный (не ЗаказПокупателя)
	// т.к. возможны только два вида документов, находим ссылку среди ЗаборовГруза
	
	СсылкаНаДокумент = Документы.ЗаказПокупателя.ПолучитьСсылку(Новый УникальныйИдентификатор(КодЗаказа));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	    "ВЫБРАТЬ
	    |   ИСТИНА как НЕЧТО
	    |ИЗ
	    |   Документ.ЗаказПокупателя КАК ДокЗаказПокупателя
	    |ГДЕ
	    |   ДокЗаказПокупателя.Ссылка = &Cсылка";
    Запрос.УстановитьПараметр("Cсылка", СсылкаНаДокумент);
    РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СсылкаНаДокумент = Документы.ES_ЗаборГруза.ПолучитьСсылку(Новый УникальныйИдентификатор(КодЗаказа));
	КонецЕсли; 
	
	Возврат СсылкаНаДокумент;
	
КонецФункции
 
&НаСервере
Процедура ОбновитьДанныеСправочникаЗоны(МассивОбластейКарты)
	
	УстановитьПривилегированныйРежим(Истина);
	
	//// Удаление всех элементов спр "Зоны города"
	//ЭлемСпр = Справочники.ES_ЗоныГорода.Выбрать();
	//Пока ЭлемСпр.Следующий() Цикл
	//	ТекЭлем = ЭлемСпр.ПолучитьОбъект();
	//	ТекЭлем.Удалить();
	//КонецЦикла; 
	МассивЗон = Новый Массив;
	Для каждого ТекЗона Из МассивОбластейКарты Цикл
		
		ЭтоНовый = Ложь;
		// Создать новый элемент справочника
		Если НЕ ЗначениеЗаполнено(ТекЗона.Код1С) Тогда
			НоваяЗона = Справочники.ES_ЗоныГорода.СоздатьЭлемент();
			ЭтоНовый = Истина;
		Иначе 
			НоваяЗона = ПолучитьСсылкаЗоныПоУИДу(ТекЗона.Код1С).ПолучитьОбъект();
		КонецЕсли;
		Если ЭтоНовый Тогда
			НоваяЗона.УстановитьНовыйКод();
		КонецЕсли;
		НоваяЗона.Наименование = ТекЗона.Название;
		НоваяЗона.КодЦвета = ТекЗона.Цвет;
		НоваяЗона.СписокКоординат.Очистить();
		Для каждого ЭлемКоординат Из ТекЗона.Координаты Цикл
			НоваяКоордината = НоваяЗона.СписокКоординат.Добавить();
			НоваяКоордината.Долгота = ЭлемКоординат.Долгота;
			НоваяКоордината.Широта = ЭлемКоординат.Широта;
		КонецЦикла; 
		НоваяЗона.Записать();
		МассивЗон.Добавить(НоваяЗона.Ссылка);
	КонецЦикла; 
	
	//Удялем зоны, которые не пришли с карты	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ES_ЗоныГорода.Ссылка
		|ИЗ
		|	Справочник.ES_ЗоныГорода КАК ES_ЗоныГорода
		|ГДЕ
		|	НЕ ES_ЗоныГорода.Ссылка В (&МассивЗон)";
	
	Запрос.УстановитьПараметр("МассивЗон", МассивЗон);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		УдаляемаяЗона = Выборка.Ссылка.ПолучитьОбъект();
		УдаляемаяЗона.Удалить();
	КонецЦикла;
	
	

		
КонецПроцедуры

&НаСервере
Процедура СоотнестиЗоныИЗаказыНаКарте(ДанныеОбластиВЗонах)
		
	СписокЗонДляВыбора.Очистить();
	
	// Очистить столбец Зоны
	Для каждого Строка Из Объект.Заказы Цикл
		Строка.Зона = "";
	КонецЦикла;
	
	// Создаем ТЗ со списком Зон и Кодом элементов справочника этих зон
	ТЗАйдиИСправочник = Новый ТаблицаЗначений;
	ТЗАйдиИСправочник.Колонки.Добавить("Айди");
	ТЗАйдиИСправочник.Колонки.Добавить("Название");
	Для каждого Область Из ДанныеОбластиВЗонах.Области Цикл
		НовСтр = ТЗАйдиИСправочник.Добавить();
		НовСтр.Айди 	= Область.Айди;
		НовСтр.Название = Область.Название;
		
		// Заполнить Список зон для ручного выбора
		СписокЗонДляВыбора.Добавить(Область.Название);
	КонецЦикла; 
	
	// Создаем ТЗ со списком ИД Документов заказа и Кодом элементов справочника зон
	ТЗЗоныИЗаказы = Новый ТаблицаЗначений;
	ТЗЗоныИЗаказы.Колонки.Добавить("КодДокумента");
	ТЗЗоныИЗаказы.Колонки.Добавить("Название");
	
	Для каждого Элемент Из ДанныеОбластиВЗонах.Метки Цикл
		
		РезультатПоиска = ТЗАйдиИСправочник.Найти(Элемент.АйдиЗоны, "Айди");
		Если НЕ РезультатПоиска = Неопределено Тогда
			СсылкаНаДокумент = ПолучитьДокументДоставкиПоСсылке(Элемент.КодДокумента);
			НайденныйДокДоставки = Объект.Заказы.НайтиСтроки(Новый Структура("ДокументДоставки", СсылкаНаДокумент));
			Если НайденныйДокДоставки.Количество() > 0 Тогда
				НайденныйДокДоставки[0].Зона = РезультатПоиска.Название;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

// Новые заказы

&НаКлиенте
Процедура ВыборПериодаЗаказ(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = ЗаказыОтборСтандартныйПериод;
	Если Диалог.Редактировать() Тогда 
	    ЗаказыОтборСтандартныйПериод = Диалог.Период;
	КонецЕсли;
	
	ОбновитьСписокЗаказовНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаказыДоставки(Команда)

	ОбновитьСписокЗаказовНаФорме();
	ИстрияОтбора.Очистить();
	СнятьВсеОтметки();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПланПоЗонам(Команда)
	//ЭР Сальник К.А. 13.04.2018 12:58:00 {
	Если ОтображениеКарты = ПредопределенноеЗначение("Перечисление.ES_ВидОтображенияКарты.YandexКарты") Тогда

	ОчиститьСообщения();
	
	Если Объект.Заказы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Нет заказов для создания нового плана доставки";
		Сообщение.Поле = "Объект.Заказы";
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли;
		
	//EFSOL_Сальник К.А. 2019-04-18 {+
	ДокументыПоЗонам = СоздатьПланыДоставкиПоЗонам();
	Если ДокументыПоЗонам <> Неопределено Тогда
		Для Каждого Зона из ДокументыПоЗонам Цикл
			Форма = ПолучитьФорму("Документ.ES_ПланДоставки.ФормаОбъекта",,ЭтаФорма, Новый УникальныйИдентификатор);
			ОбъектФормы = Форма.Объект;
			ОбъектФормы.Курьер = Зона.Курьер;
			ОбъектФормы.Дата = ТекущаяДата();
			ОбъектФормы.Автор = Зона.Автор;
			ОбъектФормы.Ответственный = Объект.Ответственный;
			ES_ОбщегоНазначения.ПолучитьДанныеПоЗаказамДляЗаполненияПланаДоставки(Тип("ДокументСсылка.ES_ПланДоставки"), ОбъектФормы, Зона.ДокументыДоставки);
			КопироватьДанныеФормы(ОбъектФормы, Форма.Объект);
			Форма.Открыть();
		КонецЦикла;
	КонецЕсли;
	ЭтаФорма.Активизировать();
	//EFSOL_Сальник К.А.  -}
	
	//Если МассивСсылокНаДокумент.Количество() > 0 Тогда
	//	Для каждого СсылкаНаДок Из МассивСсылокНаДокумент Цикл
	//		Если ТипЗнч(СсылкаНаДок) = Тип("Строка") Тогда
	//			Сообщить(СсылкаНаДок);
	//		Иначе
	//			Сообщить("Создан новый " + СсылкаНаДок);
	//			ПоказатьОповещениеПользователя(
	//					НСтр("ru = 'Создание:'"),
	//					ПолучитьНавигационнуюСсылку(СсылкаНаДок),
	//					Строка(СсылкаНаДок),
	//					БиблиотекаКартинок.Информация32);
	//		КонецЕсли;  
	//	КонецЦикла; 
	//КонецЕсли; 
	
	ОбновитьСписокЗаказовНаФорме();
	//EFSOL_Сальник К.А. 2019-04-18 {+				   
	Сообщить("Планы доставки по зонам сформированы!");
	//EFSOL_Сальник К.А.  -}

	//ОбновитьСписокПлановДоставкиНаФорме();
	Иначе
		ЗаказыПолигоны = ЭтаФорма.Элементы.СтраницаКарта.ПодчиненныеЭлементы.ГруппаЛеваяПанель.ПодчиненныеЭлементы.Карта.Документ.parentWindow.eval("getPointsOfPolygon()");
		
		МассивЗон = Новый Массив;
		
		Итератор = 1;
		Пока Истина Цикл	
			Попытка	
				
				Элемент = ЗаказыПолигоны[Строка(Итератор)];	
				
				Зона = Новый Структура;			
				Зона.Вставить("Код", Элемент.id);
				
				МассивЗаказов = Новый Массив;
				
				ИтераторЗаказов = 0;
				Пока Истина Цикл
					Попытка
						МассивЗаказов.Добавить(Элемент.points[Строка(ИтераторЗаказов)]);
						ИтераторЗаказов = ИтераторЗаказов + 1;
					Исключение
						Прервать;
					КонецПопытки;	
				КонецЦикла;	
				Зона.Вставить("Заказы", МассивЗаказов);
				Итератор = Итератор + 1;
				
				МассивЗон.Добавить(Зона);
			Исключение
				Прервать;
			КонецПопытки;
		КонецЦикла;
		
		
		ES_OpenStreetMap.СоздатьПланыДоставкиПоЗонам(МассивЗон, Объект.Ответственный);
		Сообщить("Планы доставки по зонам созданы!");
	КонецЕсли;
	//} Сальник К.А.
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеДокументыДоставки(Команда)
	
	Для каждого Строка Из Объект.Заказы Цикл
		Строка.Отметка = Истина;
	КонецЦикла; 
	
	ПересчитатьСуммарныйВесИОбъемныйВес();
	
	ИзменитьМеткуНаКарте();

КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиСоВсехДокументовДоставки(Команда)
	
	Для каждого Строка Из Объект.Заказы Цикл
		Строка.Отметка = Ложь;
	КонецЦикла; 
	
	ПересчитатьСуммарныйВесИОбъемныйВес();
	
	ИзменитьМеткуНаКарте();
	
КонецПроцедуры

// Планы

&НаКлиенте
Процедура ВыборПериодаПлан(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = ПДОтборСтандартныйПериод;
	Если Диалог.Редактировать() Тогда 
	    ПДОтборСтандартныйПериод = Диалог.Период;
	КонецЕсли;
	
	ОбновитьСписокПлановДоставкиНаФорме();
	
КонецПроцедуры


Функция ПолучитьМассивЗаказовПоПлану(ПланДоставки)
	
	Массив = Новый Массив;
	
	Если ПланДоставки = Неопределено Тогда
		СтруктураСтрокиПоЗаказу = ПолучитьСтруктуруСтрокиПоЗаказу();
		Массив.Добавить(СтруктураСтрокиПоЗаказу);
		Возврат Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ES_ПланДоставкиЗаказы.ДокументДоставки КАК ДокументыДоставки,
	|	ES_ПланДоставкиЗаказы.Ссылка КАК ПланДоставки,
	|	ES_ПланДоставкиЗаказы.НомерСтроки
	|ПОМЕСТИТЬ ВТ_ТаблицаДляОтбора
	|ИЗ
	|	Документ.ES_ПланДоставки.Заказы КАК ES_ПланДоставкиЗаказы
	|ГДЕ
	|	ES_ПланДоставкиЗаказы.Ссылка В(&Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	2 КАК Порядок,
	|	ES_ДанныеПоЗаказамСрезПоследних.Заказ КАК ДокументДоставки,
	|	ES_ДанныеПоЗаказамСрезПоследних.Подтвержден,
	|	ES_ДанныеПоЗаказамСрезПоследних.НомерНакладной,
	|	ES_ДанныеПоЗаказамСрезПоследних.ВхНакладная,
	|	ES_ДанныеПоЗаказамСрезПоследних.КоличествоМест,
	|	ES_ДанныеПоЗаказамСрезПоследних.ВидДоставки,
	|	ES_ДанныеПоЗаказамСрезПоследних.ДатаДоставки,
	|	ES_ДанныеПоЗаказамСрезПоследних.ВремяДоставкиС,
	|	ES_ДанныеПоЗаказамСрезПоследних.ВремяДоставкиПо,
	|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийВес,
	|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийОбъемныйВес,
	|	ES_ДанныеПоЗаказамСрезПоследних.Заказчик,
	|	ES_ДанныеПоЗаказамСрезПоследних.СправочноЗаказчик,
	|	ES_ДанныеПоЗаказамСрезПоследних.АдресДоставки,
	|	ES_ДанныеПоЗаказамСрезПоследних.АдресДоставкиДолгота,
	|	ES_ДанныеПоЗаказамСрезПоследних.АдресДоставкиШирота,
	|	ES_ДанныеПоЗаказамСрезПоследних.Получатель,
	|	ES_ДанныеПоЗаказамСрезПоследних.ПредставлениеГрузов,
	|	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа КАК СтатусДокумента,
	|	ES_СостоянияЗаказовСрезПоследних.СостояниеЗаказа,
	|	ЕСТЬNULL(ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Значение, ES_ДанныеПоЗаказамСрезПоследних.Комментарий) КАК Комментарий,
	|	ES_ДанныеПоЗаказамСрезПоследних.ВидЗабора,
	|	ES_ДанныеПоЗаказамСрезПоследних.СрочностьДоставки,
	|	ES_ДанныеПоЗаказамСрезПоследних.ВидОплаты,
	|	ES_ДанныеПоЗаказамСрезПоследних.Возврат,
	|	ES_ЗаказыНаСкладеОстатки.Склад,
	|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийОбъем,
	|	ЛОЖЬ КАК ЭтоЗаборГруза,
	|	ВТ_ТаблицаДляОтбора.ПланДоставки КАК ПланДоставки,
	|	ВТ_ТаблицаДляОтбора.НомерСтроки КАК НомерСтрокиВПлане
	|ИЗ
	|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(
	|			,
	|			Заказ В
	|				(ВЫБРАТЬ
	|					ВТ_ТаблицаДляОтбора.ДокументыДоставки
	|				ИЗ
	|					ВТ_ТаблицаДляОтбора КАК ВТ_ТаблицаДляОтбора
	|				ГДЕ
	|					ВТ_ТаблицаДляОтбора.ДокументыДоставки ССЫЛКА Документ.ЗаказПокупателя)) КАК ES_ДанныеПоЗаказамСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(
	|				,
	|				Заказ В
	|					(ВЫБРАТЬ
	|						ВТ_ТаблицаДляОтбора.ДокументыДоставки
	|					ИЗ
	|						ВТ_ТаблицаДляОтбора КАК ВТ_ТаблицаДляОтбора
	|					ГДЕ
	|						ВТ_ТаблицаДляОтбора.ДокументыДоставки ССЫЛКА Документ.ЗаказПокупателя)) КАК ES_СтатусыЗаказовСрезПоследних
	|		ПО ES_ДанныеПоЗаказамСрезПоследних.Заказ = ES_СтатусыЗаказовСрезПоследних.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
	|				,
	|				Заказ В
	|						(ВЫБРАТЬ
	|							ВТ_ТаблицаДляОтбора.ДокументыДоставки
	|						ИЗ
	|							ВТ_ТаблицаДляОтбора КАК ВТ_ТаблицаДляОтбора
	|						ГДЕ
	|							ВТ_ТаблицаДляОтбора.ДокументыДоставки ССЫЛКА Документ.ЗаказПокупателя)
	|					И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Комментарий)) КАК ES_ИзменяемыеРеквизитыЗаказовСрезПоследних
	|		ПО ES_ДанныеПоЗаказамСрезПоследних.Заказ = ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СостоянияЗаказов.СрезПоследних(
	|				,
	|				Заказ В
	|					(ВЫБРАТЬ
	|						ВТ_ТаблицаДляОтбора.ДокументыДоставки
	|					ИЗ
	|						ВТ_ТаблицаДляОтбора КАК ВТ_ТаблицаДляОтбора
	|					ГДЕ
	|						ВТ_ТаблицаДляОтбора.ДокументыДоставки ССЫЛКА Документ.ЗаказПокупателя)) КАК ES_СостоянияЗаказовСрезПоследних
	|		ПО ES_ДанныеПоЗаказамСрезПоследних.Заказ = ES_СостоянияЗаказовСрезПоследних.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ES_ЗаказыНаСкладе.Остатки(
	|				,
	|				Заказ В
	|					(ВЫБРАТЬ
	|						ВТ_ТаблицаДляОтбора.ДокументыДоставки
	|					ИЗ
	|						ВТ_ТаблицаДляОтбора КАК ВТ_ТаблицаДляОтбора
	|					ГДЕ
	|						ВТ_ТаблицаДляОтбора.ДокументыДоставки ССЫЛКА Документ.ЗаказПокупателя)) КАК ES_ЗаказыНаСкладеОстатки
	|		ПО ES_ДанныеПоЗаказамСрезПоследних.Заказ = ES_ЗаказыНаСкладеОстатки.Заказ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаДляОтбора КАК ВТ_ТаблицаДляОтбора
	|		ПО ES_ДанныеПоЗаказамСрезПоследних.Заказ = ВТ_ТаблицаДляОтбора.ДокументыДоставки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ES_ДанныеПоЗаборамСрезПоследних.Забор,
	|	ES_ДанныеПоЗаборамСрезПоследних.Подтвержден,
	|	ES_ДанныеПоЗаборамСрезПоследних.НомерНакладной,
	|	"""",
	|	ES_ДанныеПоЗаборамСрезПоследних.КоличествоМест,
	|	ES_ДанныеПоЗаборамСрезПоследних.ВидЗабора,
	|	ES_ДанныеПоЗаборамСрезПоследних.ДатаЗабора,
	|	ES_ДанныеПоЗаборамСрезПоследних.ВремяЗабораС,
	|	ES_ДанныеПоЗаборамСрезПоследних.ВремяЗабораПо,
	|	ES_ДанныеПоЗаборамСрезПоследних.ОбщийВес,
	|	ES_ДанныеПоЗаборамСрезПоследних.ОбщийОбъемныйВес,
	|	ES_ДанныеПоЗаборамСрезПоследних.Заказчик,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
	|	ES_ДанныеПоЗаборамСрезПоследних.Адрес,
	|	ES_ДанныеПоЗаборамСрезПоследних.АдресДолгота,
	|	ES_ДанныеПоЗаборамСрезПоследних.АдресШирота,
	|	"""",
	|	ES_ДанныеПоЗаборамСрезПоследних.ПредставлениеГрузов,
	|	ES_СтатусыЗаборовСрезПоследних.СтатусЗабора,
	|	NULL,
	|	ЕСТЬNULL(ES_ИзменяемыеРеквизитыЗаборовСрезПоследних.Значение, ES_ДанныеПоЗаборамСрезПоследних.Комментарий),
	|	ES_ДанныеПоЗаборамСрезПоследних.ВидЗабора,
	|	ЗНАЧЕНИЕ(Перечисление.ES_СрочностьДоставки.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.ПустаяСсылка),
	|	ЛОЖЬ,
	|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка),
	|	ES_ДанныеПоЗаборамСрезПоследних.ОбщийОбъем,
	|	ИСТИНА,
	|	ВТ_ТаблицаДляОтбора.ПланДоставки,
	|	ВТ_ТаблицаДляОтбора.НомерСтроки
	|ИЗ
	|	РегистрСведений.ES_ДанныеПоЗаборам.СрезПоследних(
	|			,
	|			Забор В
	|				(ВЫБРАТЬ
	|					ВТ_ТаблицаДляОтбора.ДокументыДоставки
	|				ИЗ
	|					ВТ_ТаблицаДляОтбора КАК ВТ_ТаблицаДляОтбора
	|				ГДЕ
	|					ВТ_ТаблицаДляОтбора.ДокументыДоставки ССЫЛКА Документ.ES_ЗаборГруза)) КАК ES_ДанныеПоЗаборамСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаборов.СрезПоследних(
	|				,
	|				Забор В
	|					(ВЫБРАТЬ
	|						ВТ_ТаблицаДляОтбора.ДокументыДоставки
	|					ИЗ
	|						ВТ_ТаблицаДляОтбора КАК ВТ_ТаблицаДляОтбора
	|					ГДЕ
	|						ВТ_ТаблицаДляОтбора.ДокументыДоставки ССЫЛКА Документ.ES_ЗаборГруза)) КАК ES_СтатусыЗаборовСрезПоследних
	|		ПО ES_ДанныеПоЗаборамСрезПоследних.Забор = ES_СтатусыЗаборовСрезПоследних.Забор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаборов.СрезПоследних(
	|				,
	|				Забор В
	|						(ВЫБРАТЬ
	|							ВТ_ТаблицаДляОтбора.ДокументыДоставки
	|						ИЗ
	|							ВТ_ТаблицаДляОтбора КАК ВТ_ТаблицаДляОтбора
	|						ГДЕ
	|							ВТ_ТаблицаДляОтбора.ДокументыДоставки ССЫЛКА Документ.ES_ЗаборГруза)
	|					И РеквизитЗабора = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗабора.Комментарий)) КАК ES_ИзменяемыеРеквизитыЗаборовСрезПоследних
	|		ПО ES_ДанныеПоЗаборамСрезПоследних.Забор = ES_ИзменяемыеРеквизитыЗаборовСрезПоследних.Забор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаДляОтбора КАК ВТ_ТаблицаДляОтбора
	|		ПО ES_ДанныеПоЗаборамСрезПоследних.Забор = ВТ_ТаблицаДляОтбора.ДокументыДоставки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланДоставки,
	|	НомерСтрокиВПлане,
	|	ДокументДоставки";
	
	Запрос.УстановитьПараметр("Ссылка", ПланДоставки);
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр Из ТЗ Цикл
		СтруктураСтрокиПоЗаказу = ПолучитьСтруктуруСтрокиПоЗаказу();
		ЗаполнитьЗначенияСвойств(СтруктураСтрокиПоЗаказу, Стр);
		Массив.Добавить(СтруктураСтрокиПоЗаказу);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьСтруктуруСтрокиПоЗаказу()
	
	Структура = Новый Структура;
	Структура.Вставить("ПланДоставки");
	Структура.Вставить("ДокументДоставки");
	Структура.Вставить("СвязанныйДокумент");
	Структура.Вставить("АдресДоставки");
	Структура.Вставить("АдресДоставкиДолгота");
	Структура.Вставить("АдресДоставкиШирота");
	Структура.Вставить("ВидДоставки");
	Структура.Вставить("ВремяДоставкиС");
	Структура.Вставить("ВремяДоставкиПо");
	Структура.Вставить("ВхНакладная");
	Структура.Вставить("ДатаДоставки");
	Структура.Вставить("Заказчик");
	Структура.Вставить("КоличествоМест");
	Структура.Вставить("Комментарий");
	Структура.Вставить("НомерНакладной");
	Структура.Вставить("НомерСтрокиВПлане");
	Структура.Вставить("ОбщийВес");
	Структура.Вставить("ОбщийОбъем");
	Структура.Вставить("ОбщийОбъемныйВес");
	Структура.Вставить("Получатель");
	Структура.Вставить("Подтвержден");
	Структура.Вставить("Срочность");
	Структура.Вставить("СтатусДокумента");
	Структура.Вставить("ЭтоЗаборГруза");
	Структура.Вставить("ЦветМетки");
	Структура.Вставить("ВидОплаты");
	Структура.Вставить("Аббревиатура");
	Структура.Вставить("ВидЗабора");
	Структура.Вставить("Склад");
	Структура.Вставить("НомерСтрокиВПлане");
	
	//Структура.Вставить("Подтвержден");
	
	Возврат Структура;
	
КонецФункции


&НаСервере
Процедура ЗаполнитьСписокЗначенийПланоВДоставки(СписокЗначений, Массив)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаН", ПДОтборСтандартныйПериод.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаК", ПДОтборСтандартныйПериод.ДатаОкончания);
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ES_ПланДоставкиЗаказы.Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ES_ПланДоставкиЗаказы.ДокументДоставки) КАК КоличествоЗаказов
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Документ.ES_ПланДоставки.Заказы КАК ES_ПланДоставкиЗаказы
	|ГДЕ
	|	ES_ПланДоставкиЗаказы.Ссылка.Проведен
	|	И ES_ПланДоставкиЗаказы.Ссылка.Дата МЕЖДУ &ДатаН И &ДатаК
	|
	|СГРУППИРОВАТЬ ПО
	|	ES_ПланДоставкиЗаказы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Ссылка.Подтвержден КАК Подтвержден,
	|	ВТ.Ссылка.Дата КАК Дата,
	|	ВТ.Ссылка.Номер КАК Номер,
	|	ВТ.Ссылка.Подрядчиком КАК Подрядчиком,
	|	ВТ.Ссылка.Курьер КАК Курьер,
	|	ВТ.Ссылка.ТранспортноеСредство КАК ТранспортноеСредство,
	|	ES_ОтчетОДоставке.Ссылка КАК ОтчетОДоставке,
	|	ВТ.Ссылка.ДанныеПодтверждения КАК ДанныеПодтверждения,
	|	ВТ.Ссылка.Комментарий КАК Комментарий,
	|	ВТ.Ссылка КАК Ссылка,
	|	ВТ.КоличествоЗаказов
	|ПОМЕСТИТЬ мВТ
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ES_ОтчетОДоставке КАК ES_ОтчетОДоставке
	|		ПО ВТ.Ссылка = ES_ОтчетОДоставке.ПланДоставки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	мВТ.Подтвержден,
	|	мВТ.Дата,
	|	мВТ.Номер,
	|	мВТ.Подрядчиком,
	|	мВТ.Курьер,
	|	мВТ.ТранспортноеСредство,
	|	мВТ.ОтчетОДоставке,
	|	мВТ.ДанныеПодтверждения,
	|	мВТ.Комментарий,
	|	ES_ПланДоставки.Ссылка,
	|	мВТ.КоличествоЗаказов
	|ИЗ
	|	мВТ КАК мВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ES_ПланДоставки КАК ES_ПланДоставки
	|		ПО мВТ.Ссылка = ES_ПланДоставки.Ссылка";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Если ТЗ.Количество() > 0 Тогда
		Для й = 0 По ТЗ.Количество()-1 Цикл
			
			СписокЗначений.Добавить(ТЗ[й].Ссылка,й+1);
			Массив.Добавить(ТЗ[й].Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры



&НаКлиенте
Процедура ОбновитьПланыДоставки(Команда)

	//ЭР Сальник К.А. 13.04.2018 14:02:00 {
	//ОбновитьСписокПлановДоставкиНаФорме();
	Элементы.СписокПД.Обновить();
	//}ЭР Сальник К.А.
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаказыВТекПланДоставки(Команда)
	
	ОчиститьСообщения();

	// Проверяем, выделен ли План доставки
	Если Элементы.СписокПД.ТекущиеДанные = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Выделите План доставки, в который нужно добавить заказы";
		//ЭР Сальник К.А. 13.04.2018 14:03:00 {
		//Сообщение.Поле = "Объект.ПланыДоставки";
		Сообщение.Поле = "СписокПД";
		//}ЭР Сальник К.А.
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли;
	
	ДокументыДоставкиДляДобавления = Новый Массив;
	Для каждого СтрокаЗаказа Из Объект.Заказы Цикл
		Если СтрокаЗаказа.Отметка Тогда
			ДокументыДоставкиДляДобавления.Добавить(СтрокаЗаказа.ДокументДоставки);
		КонецЕсли; 
	КонецЦикла;
	
	Если ДокументыДоставкиДляДобавления.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отметьте заказы для добавления в План доставки";
		Сообщение.Поле = "Объект.Заказы";
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли; 
	
	//ЭР Сальник К.А. 13.04.2018 14:03:00 {
	//СсылкаНаПланДоставки = Элементы.ПланыДоставки.ТекущиеДанные.ПланДоставки;
	СсылкаНаПланДоставки = ВыделенныйПлан;
	//}ЭР Сальник К.А.
	
	
	// Добавляем выбранные заказы доставки в указанный план доставки
	МассивСообщений = ДобавитьЗаказНаСервере(СсылкаНаПланДоставки, ДокументыДоставкиДляДобавления);
	Если МассивСообщений.Количество() > 0 Тогда
		Для каждого Сообщение Из МассивСообщений Цикл
			Сообщить(Сообщение);			
		КонецЦикла; 
	КонецЕсли; 
	
	ОбновитьСписокЗаказовНаФорме(Ложь);
	//ЭР Сальник К.А. 13.04.2018 14:04:00 {
	//ОбновитьСписокПлановДоставкиНаФорме();
	//}ЭР Сальник К.А.

	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьНакладныеНаЗапасы(Команда)
	
	ТекСтрока = Элементы.ПланыДоставки.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Выделите План доставки, для которых нужно печатать товарный чек";
		Сообщение.Поле = "Объект.ПланыДоставки";
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли;
	
	МассивНайденныхЗаказов = Объект.ПланыДоставкиЗаказы.НайтиСтроки(Новый Структура("ПланДоставки", ТекСтрока.ПланДоставки));
	
	МассивЗаказов = Новый Массив;
	Для каждого Заказ Из МассивНайденныхЗаказов Цикл
		Если НЕ Заказ.ЭтоЗаборГруза Тогда
			МассивЗаказов.Добавить(Заказ.ДокументДоставки);
		КонецЕсли; 
	КонецЦикла; 
	
	Если МассивЗаказов.Количество() > 0 Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Документ.ЗаказПокупателя",
		"ПФ_MXL_ES_НакладнаяНаЗапасы",
		МассивЗаказов,
		Неопределено,
		Неопределено
		);

	КонецЕсли; 
	
КонецПроцедуры

// Карта

&НаКлиенте
Процедура ОбновитьКартуКоманда(Команда)
	//ЭР Сальник К.А. 13.04.2018 11:56:00 {
	Если ОтображениеКарты = ПредопределенноеЗначение("Перечисление.ES_ВидОтображенияКарты.YandexКарты") Тогда
		ОбновитьКарту(Истина);
		//ЭР Несторук С.И. 16.03.2017 12:57:28 {
		УстановитьУсловноеОформление();
		//}ЭР Несторук С.И.
	Иначе
		Если ВидОтображения = 2 или ВидОтображения = 3 Тогда
			ЗаполнитьСписокАдресов();
		КонецЕсли;
		Объект.Карта = СформироватьКартуСервер(ОтображатьПредопределенныеОбласти, ВидОтображения);	
	КонецЕсли;
	//}ЭР Сальник К.А.
КонецПроцедуры


&НаСервере
Функция СформироватьКартуСервер(ОтображатьПредопределенныеОбласти, ВидОтображения)
	//ЭР Сальник К.А. 02.04.2018 11:40:00 {
	мОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ES_OpenStreetMap.СформироватьКарту(ОтображатьПредопределенныеОбласти, ВидОтображения, мОбъект);	
	//}ЭР Сальник К.А.
КонецФункции



&НаКлиенте
Процедура СохранитьЗоны(Команда)
	//ЭР Сальник К.А. 13.04.2018 13:04:00 {	
	Если ОтображениеКарты = ПредопределенноеЗначение("Перечисление.ES_ВидОтображенияКарты.YandexКарты") Тогда
		ОчиститьСообщения();
		
		Если ЗначениеЗаполнено(Объект.Карта) Тогда
			//ЭР Сальник К.А. 13.04.2018 13:04:00 {	
			ДанныеОбластиВЗонах = ES_YandexMaps.ПолучитьОбластиВЗонах(Элементы.Карта.Документ);	// возвращает структуру
			//}ЭР Сальник К.А.
			ОбновитьДанныеСправочникаЗоны(ДанныеОбластиВЗонах.Области);
			Сообщить("Зоны успешно сохранены в справочнике", СтатусСообщения.Информация);
		КонецЕсли; 
	Иначе
		Удаление = ЭтаФорма.Элементы.СтраницаКарта.ПодчиненныеЭлементы.ГруппаЛеваяПанель.ПодчиненныеЭлементы.Карта.Документ.parentWindow.eval("getList(deleted)");
		Обновление = ЭтаФорма.Элементы.СтраницаКарта.ПодчиненныеЭлементы.ГруппаЛеваяПанель.ПодчиненныеЭлементы.Карта.Документ.parentWindow.eval("getList(edited)");
		Создание = ЭтаФорма.Элементы.СтраницаКарта.ПодчиненныеЭлементы.ГруппаЛеваяПанель.ПодчиненныеЭлементы.Карта.Документ.parentWindow.eval("getList(created)");
		
		Итератор = 0;
		Пока Истина Цикл	
			Попытка			
				Элемент = Создание[Строка(Итератор)];
				Цвет = Элемент.fillcolor;
				Если Цвет = Неопределено Тогда 
					Цвет = Элемент.color;
				КонецЕсли;
				Код = Элемент.code;
				Наименование = Элемент.title;
				Координаты = Новый Массив;
				ИтераторКоординат = 0;
				Пока Истина Цикл	
					Попытка
						точка = Элемент.coord[Строка(ИтераторКоординат)];
						Координаты.Добавить(новый структура("Долгота, Широта",точка.lat, точка.lng));  
						ИтераторКоординат = ИтераторКоординат + 1;
					Исключение
						Прервать;
					КонецПопытки;	
				КонецЦикла;	
				ES_OpenStreetMap.CоздатьЗонуНаСервере(Наименование, Цвет, Код, Координаты);
				Итератор = Итератор + 1;
			Исключение
				Прервать;
			КонецПопытки;
		КонецЦикла;
		
		
		Итератор = 0;
		Пока Истина Цикл	
			Попытка			
				Элемент = Обновление[Строка(Итератор)];
				Цвет = Элемент.fillcolor;
				Если Цвет = Неопределено Тогда 
					Цвет = Элемент.color;
				КонецЕсли;
				Код = Элемент.code;
				Наименование = Элемент.title;
				Координаты = Новый Массив;
				ИтераторКоординат = 0;
				Пока Истина Цикл	
					Попытка
						точка = Элемент.coord[Строка(ИтераторКоординат)];
						Координаты.Добавить(новый структура("Долгота, Широта",точка.lat, точка.lng));  
						ИтераторКоординат = ИтераторКоординат + 1;
					Исключение
						Прервать;
					КонецПопытки;	
				КонецЦикла;	
				ES_OpenStreetMap.ОбновитьЗонуНаСервере(Наименование, Цвет, Код, Координаты);
				Итератор = Итератор + 1;
			Исключение
				Прервать;
			КонецПопытки;
		КонецЦикла;
		
		Итератор = 0;
		Пока Истина Цикл	
			Попытка			
				Элемент = Удаление[Строка(Итератор)];
				Код = Элемент.code;
				Координаты = Новый Массив;
				ИтераторКоординат = 0;
				ES_OpenStreetMap.УдалитьЗонуНаСервере(Код);
				Итератор = Итератор + 1;
			Исключение
				Прервать;
			КонецПопытки;
		КонецЦикла;
		
		Сообщить("Изменения сохранены!");
		
	КонецЕсли;
	//}ЭР Сальник К.А.
	

КонецПроцедуры

&НаКлиенте
Процедура ПроставитьЗоны(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(Объект.Карта) Тогда
		Сообщить("Обновите карту");
		Возврат;
	КонецЕсли; 
	
	Если НужноОбновитьКартуЗаказы Тогда
		Сообщить("Данные на вкладке ""Новые заказы"" изменены. Обновите карту!");
		Возврат;
	КонецЕсли; 
	//EFSOL_Сальник К.А. 2019-04-18 {+	
	ДанныеОбластиВЗонах = ES_YandexMaps.ПолучитьОбластиВЗонах(Элементы.Карта.Документ);	// возвращает структуру
	//EFSOL_Сальник К.А.  -}	
	Если ДанныеОбластиВЗонах.Метки.Количество() = 0
	 ИЛИ ДанныеОбластиВЗонах.Области.Количество() = 0
	Тогда
		Сообщить("Зоны на карте не найдены");
		Возврат;
	КонецЕсли; 
	
	// Заполнить Зонами
	СоотнестиЗоныИЗаказыНаКарте(ДанныеОбластиВЗонах);
	
	Сообщить("Зоны успешно проставлены", СтатусСообщения.Информация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроложитьМаршрут(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(Объект.Карта) Тогда
		Сообщить("Карта не обновлена!");
		Возврат;
	КонецЕсли;
	
	// Маршрут строится только если ВидОтображения = План доставки
	Если ВидОтображения = 1 ИЛИ ВидОтображения = 3 ИЛИ ВидОтображения = 5 Тогда
		Сообщить("Маршрут можно построить только для вида отображения ""Планы доставки""");
		Возврат;
	КонецЕсли; 
	
	ПараметрыМаршрута = Новый Структура();
	
	// Начальная/Конечная точки маршрута
	Если ЗначениеЗаполнено(НачальнаяТочка) Тогда
		СтруктураГеокодирования = ES_YandexMaps.ГеокодированияПолучитьКоординаты(НачальнаяТочка);
		ПараметрыМаршрута.Вставить("НачальнаяТочка", Новый Структура("Долгота, Широта", СтруктураГеокодирования.Долгота, СтруктураГеокодирования.Широта));
	КонецЕсли;
	Если ЗначениеЗаполнено(КонечнаяТочка) Тогда
		СтруктураГеокодирования = ES_YandexMaps.ГеокодированияПолучитьКоординаты(КонечнаяТочка);
		ПараметрыМаршрута.Вставить("КонечнаяТочка", Новый Структура("Долгота, Широта", СтруктураГеокодирования.Долгота, СтруктураГеокодирования.Широта));
	КонецЕсли;
	
	ПараметрыМаршрута.Вставить("УчитыватьПробки", УчитыватьПробки);
	//EFSOL_Сальник К.А. 2019-04-18 {+
	ES_YandexMaps.ПостроитьМаршруты(Элементы.Карта.Документ, ПараметрыМаршрута);
	//EFSOL_Сальник К.А.  -}

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОписаниеПроезда(Команда)

	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(Объект.Карта) Тогда
		Сообщить("Карта не обновлена!");
		Возврат;
	КонецЕсли;
		
	МаршрутОписаниеПроезда = "";
	
	ДанныеМаршрута = ES_YandexMaps.ПолучитьОписаниеМаршрута(Элементы.Карта.Документ);
	Если НЕ ЗначениеЗаполнено(ДанныеМаршрута) Тогда
		Сообщить("Маршрут еще не проложен");
		Возврат;
	КонецЕсли; 
	
	Если ДанныеМаршрута.Свойство("Время") Тогда
		Часов 		= Цел(ДанныеМаршрута.Время / 3600);
		ОстачаМин 	= ДанныеМаршрута.Время % 3600;
		Минут 		= Окр(ОстачаМин / 60);
		
		МаршрутВремяВПути = СокрЛП(?(Часов = 0, "", "" + Часов + " ч ") + ?(Минут = 0, "", "" + Минут + " мин"));
	КонецЕсли; 
	
	Если ДанныеМаршрута.Свойство("Дистанция") Тогда
		Дистанция = Окр(ДанныеМаршрута.Дистанция / 1000, 1);
		МаршрутКилометраж = "" + Дистанция + " км";
	КонецЕсли; 
	
	Если ДанныеМаршрута.Свойство("Текст") Тогда
		МаршрутОписаниеПроезда = СтрЗаменить(ДанныеМаршрута.Текст, "; ", ";" + Символы.ПС);
	КонецЕсли;
	
	ОписаниеПроезда = "Ехать " + МаршрутВремяВПути + ", " + МаршрутКилометраж + Символы.ПС + Символы.ПС + МаршрутОписаниеПроезда;
	КартаОписаниеПроезда = ОписаниеПроезда;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОчередь(Команда)
	
	ОбновитьКарту();
	//УстановитьПорядокВПлане(Элементы.ПланыДоставки.ТекущиеДанные.ПланДоставки);
	УстановитьПорядокВПлане(Элементы.СписокПД.ТекущиеДанные.Ссылка);
	//ОбновитьСписокПлановДоставкиНаФорме();
	ОбновитьКарту(Истина);
КонецПроцедуры

&НаСервере
Процедура УстановитьПорядокВПлане(Параметр)
	
	ПланОбъект = Параметр.ПолучитьОбъект();
	ТЗЗаказов = ПланОбъект.Заказы.Выгрузить();
	
	ТЗПоАдресам = Объект.СписокАдресовНаКарте.Выгрузить();
	
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст ="ВЫБРАТЬ
	              //|	ES_ПланДоставкиЗаказы.Ссылка,
	              |	ES_ПланДоставкиЗаказы.НомерСтроки,
	              |	ES_ПланДоставкиЗаказы.СвязкаЗаказЗабор,
	              |	ES_ПланДоставкиЗаказы.ДокументДоставки,
	              |	ES_ПланДоставкиЗаказы.СвязанныйДокумент,
	              |	ES_ПланДоставкиЗаказы.ДатаЗаказа,
	              |	ES_ПланДоставкиЗаказы.ДатаВремяДобавленияЗаказа,
	              |	ES_ПланДоставкиЗаказы.ВидДоставки,
	              |	ES_ПланДоставкиЗаказы.ВидСвязанногоДокЗабора,
	              |	ES_ПланДоставкиЗаказы.ВремяДоставки,
	              |	ES_ПланДоставкиЗаказы.ВремяДоставкиС,
	              |	ES_ПланДоставкиЗаказы.ВремяДоставкиПо,
	              |	ES_ПланДоставкиЗаказы.КоличествоМест,
	              |	ES_ПланДоставкиЗаказы.Комментарий,
	              |	ES_ПланДоставкиЗаказы.НППлан,
	              |	ES_ПланДоставкиЗаказы.ОбщийВес,
	              |	ES_ПланДоставкиЗаказы.ОбщийОбъем,
	              |	ES_ПланДоставкиЗаказы.Получатель,
	              |	ES_ПланДоставкиЗаказы.ПолучательАдрес,
	              |	ES_ПланДоставкиЗаказы.ПолучательКонтЛицо,
	              |	ES_ПланДоставкиЗаказы.ПолучательТелефон,
	              |	ES_ПланДоставкиЗаказы.СтоимостьДоставки,
	              |	ES_ПланДоставкиЗаказы.Удалить_ВремяОтправки,
	              |	ES_ПланДоставкиЗаказы.Удалить_ВремяОтпрС,
	              |	ES_ПланДоставкиЗаказы.Удалить_ВремяОтпрПо,
	              |	ES_ПланДоставкиЗаказы.Удалить_Отправитель,
	              |	ES_ПланДоставкиЗаказы.Удалить_ОтправительАдрес,
	              |	ES_ПланДоставкиЗаказы.Удалить_ОтправительКонтЛицо,
	              |	ES_ПланДоставкиЗаказы.Удалить_ОтправительТелефон,
	              |	ES_ПланДоставкиЗаказы.ПорядокОбъезда
	              |ПОМЕСТИТЬ ЗаказыИзПлана
	              |ИЗ
	              |	&ДанныеПлана КАК ES_ПланДоставкиЗаказы
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ES_ПланДоставкиES_Заказы.НомерСтроки,
	              |	ES_ПланДоставкиES_Заказы.СсылкаНаЗаказ
	              |ПОМЕСТИТЬ ЗаказыИзСпискаАдресов
	              |ИЗ
	              |	&ДанныеАдресов КАК ES_ПланДоставкиES_Заказы
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ЗаказыИзСпискаАдресов.НомерСтроки КАК ПорядокОбъезда,
	              //|	ЗаказыИзПлана.Ссылка,
	              |	ЗаказыИзПлана.НомерСтроки,
	              |	ЗаказыИзПлана.СвязкаЗаказЗабор,
	              |	ЗаказыИзПлана.ДокументДоставки,
	              |	ЗаказыИзПлана.СвязанныйДокумент,
	              |	ЗаказыИзПлана.ДатаЗаказа,
	              |	ЗаказыИзПлана.ДатаВремяДобавленияЗаказа,
	              |	ЗаказыИзПлана.ВидДоставки,
	              |	ЗаказыИзПлана.ВидСвязанногоДокЗабора,
	              |	ЗаказыИзПлана.ВремяДоставки,
	              |	ЗаказыИзПлана.ВремяДоставкиС,
	              |	ЗаказыИзПлана.ВремяДоставкиПо,
	              |	ЗаказыИзПлана.КоличествоМест,
	              |	ЗаказыИзПлана.Комментарий,
	              |	ЗаказыИзПлана.НППлан,
	              |	ЗаказыИзПлана.ОбщийВес,
	              |	ЗаказыИзПлана.ОбщийОбъем,
	              |	ЗаказыИзПлана.Получатель,
	              |	ЗаказыИзПлана.ПолучательАдрес,
	              |	ЗаказыИзПлана.ПолучательКонтЛицо,
	              |	ЗаказыИзПлана.ПолучательТелефон,
	              |	ЗаказыИзПлана.СтоимостьДоставки,
	              |	ЗаказыИзПлана.Удалить_ВремяОтправки,
	              |	ЗаказыИзПлана.Удалить_ВремяОтпрС,
	              |	ЗаказыИзПлана.Удалить_ВремяОтпрПо,
	              |	ЗаказыИзПлана.Удалить_Отправитель,
	              |	ЗаказыИзПлана.Удалить_ОтправительАдрес,
	              |	ЗаказыИзПлана.Удалить_ОтправительКонтЛицо,
	              |	ЗаказыИзПлана.Удалить_ОтправительТелефон,
	              |	ЗаказыИзСпискаАдресов.НомерСтроки КАК ПорядокУпорядочивания
	              |ИЗ
	              |	ЗаказыИзПлана КАК ЗаказыИзПлана
	              |		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыИзСпискаАдресов КАК ЗаказыИзСпискаАдресов
	              |		ПО ЗаказыИзПлана.ДокументДоставки = ЗаказыИзСпискаАдресов.СсылкаНаЗаказ
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	ПорядокУпорядочивания"; 
	
	Запрос.УстановитьПараметр("ДанныеПлана",ТЗЗаказов);
	Запрос.УстановитьПараметр("ДанныеАдресов",ТЗПоАдресам);
	Результат = Запрос.Выполнить().Выгрузить(); 
	
	ПланОбъект.Заказы.Загрузить(Результат);
	
	ПланОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтрокПланыТчГрузы(ТекСтрока)
	
	//ЭР Несторук С.И. 21.03.2017 16:47:47 {
	ПДГрузыВРазрезеЗаказов = Истина;
	//}ЭР Несторук С.И.
		
	Если ПДГрузыВРазрезеЗаказов Тогда
		
		Если ТекСтрока <> Неопределено
		   И ТекСтрока.ДокументДоставки <> Неопределено Тогда
			Элементы.ПланыДоставкиСписокГрузов.ОтборСтрок 	= Новый ФиксированнаяСтруктура("ДокументДоставки", ТекСтрока.ДокументДоставки);
			Элементы.ПланыДоставкиГрузы.ОтборСтрок 			= Новый ФиксированнаяСтруктура("ДокументДоставки", ТекСтрока.ДокументДоставки);
		КонецЕсли; 
		
	Иначе
		Элементы.ПланыДоставкиСписокГрузов.ОтборСтрок 	= Неопределено;
		Элементы.ПланыДоставкиГрузы.ОтборСтрок 			= Неопределено;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция СоздатьПланыДоставкиПоЗонам()
	//EFSOL_Сальник К.А. 2019-04-18 {+
	Результат = Новый Массив;
	//EFSOL_Сальник К.А.  -}
	
	// Получаем список заказов 
	СписокЗаказов = Объект.Заказы.Выгрузить(, "ДокументДоставки, Зона, ВидДоставки, СвязанныйДокумент");
	
	// Забор с видом доставки "ПоПути" должен попадать в тот же План доставки, что и Заказ на доставку, на основании которого создан Забор
	Для каждого Строка Из СписокЗаказов Цикл
		//ЭР Несторук С.И. 25.02.2017 23:27:40 {
		//Если ТипЗнч(Строка.ДокументДоставки) = Тип("ДокументСсылка.ES_ЗаборГруза") Тогда
		//	Если Строка.ВидДоставки = Перечисления.ES_ВидыЗабора.ПоПути Тогда
		//		НайденнаяСтрока = СписокЗаказов.Найти(Строка.СвязанныйДокумент, "ДокументДоставки");
		//		Если НайденнаяСтрока <> Неопределено Тогда
		//			Строка.Зона = НайденнаяСтрока.Зона;
		//		КонецЕсли; 
		//	КонецЕсли; 
		//КонецЕсли;
		Если Строка.ВидДоставки = Перечисления.ES_ВидыДоставки.Самовывоз Тогда
			СписокЗаказов.Удалить(Строка);
		КонецЕсли;
		
		//}ЭР Несторук С.И.
	КонецЦикла; 
	
	// Создаем массив зон
	ТЗСписокЗон = Объект.Заказы.Выгрузить(, "Зона");
	ТЗСписокЗон.Свернуть("Зона");
	МассивЗон = Новый Массив;
	Для каждого Стр Из ТЗСписокЗон Цикл
		Если ЗначениеЗаполнено(Стр.Зона) Тогда
			МассивЗон.Добавить(Стр.Зона);
		КонецЕсли; 
	КонецЦикла;
	
	// Структура соотношения Зоны и Курьера
	ТаблицаДанныхПоЗонам = ПолучитьТаблицуДанныхПоЗонам(МассивЗон);
		
	Если МассивЗон.Количество() = 0 Тогда
		//EFSOL_Сальник К.А. 2019-04-18 {+
		Сообщить("Зоны не найдены");
		Возврат Неопределено; 
		//EFSOL_Сальник К.А.  -}
	КонецЕсли;
	
	// Создаем отдельный План доставки на каждую зону
	Для каждого Зона Из МассивЗон Цикл
		ДокументыДоставки = СписокЗаказов.Скопировать(Новый Структура ("Зона", Зона), "ДокументДоставки").ВыгрузитьКолонку("ДокументДоставки");
		
		Если ДокументыДоставки.Количество() = 0 Тогда
			Продолжить;			
		КонецЕсли;	
				
		//НовыйДокумент = Документы.ES_ПланДоставки.СоздатьДокумент();
		//НовыйДокумент = Документы.ES_ПланДоставки.СоздатьДокумент();
		//НовыйДокумент.Дата 			= ТекущаяДата();
		//НовыйДокумент.Автор 		= Пользователи.ТекущийПользователь();
		//НовыйДокумент.Ответственный = Объект.Ответственный;
		//НовыйДокумент.Курьер 		= КурьерЗоны;
	
		СтруктураПоЗоне = Новый Структура;
		СтрокаДанныхЗоны = ТаблицаДанныхПоЗонам.Найти(Зона, "НаименованиеЗоны");
		СтруктураПоЗоне.Вставить("Зона", Зона);
		КурьерЗоны = Справочники.Сотрудники.ПустаяСсылка(); 
		Если НЕ СтрокаДанныхЗоны = Неопределено Тогда
			 КурьерЗоны = СтрокаДанныхЗоны.Курьер;
		КонецЕсли; 
		СтруктураПоЗоне.Вставить("Курьер", КурьерЗоны);
		СтруктураПоЗоне.Вставить("ДокументыДоставки", ДокументыДоставки);
		СтруктураПоЗоне.Вставить("Автор", Пользователи.ТекущийПользователь()); 
		Результат.Добавить(СтруктураПоЗоне);
		
		//ES_ОбщегоНазначения.ПолучитьДанныеПоЗаказамДляЗаполненияПланаДоставки(Тип("ДокументСсылка.ES_ПланДоставки"), НовыйДокумент, ДокументыДоставки);
		
		//РежимЗаписи = ?(ЗначениеЗаполнено(КурьерЗоны), РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		
		//Попытка
		//	НовыйДокумент.Записать(РежимЗаписи);
		//	МассивСообщений.Добавить(НовыйДокумент.Ссылка);
		//Исключение
		//    МассивСообщений.Добавить("Не удалось записать новый План доставки по зоне " + Зона);
		//КонецПопытки;
	
	КонецЦикла; 

	Возврат Результат;
		
КонецФункции
 
&НаСервере
Функция ПолучитьТаблицуДанныхПоЗонам(МассивЗон)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ES_ЗоныГорода.Ссылка КАК Зона,
		|	ES_ЗоныГорода.Наименование КАК НаименованиеЗоны,
		|	ES_ЗоныГорода.Курьер
		|ИЗ
		|	Справочник.ES_ЗоныГорода КАК ES_ЗоныГорода
		|ГДЕ
		|	ES_ЗоныГорода.Наименование В(&МассивЗон)";
	
	Запрос.УстановитьПараметр("МассивЗон", МассивЗон);
	
	ТаблицаДанныхПоЗонам = Новый ТаблицаЗначений;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаДанныхПоЗонам = РезультатЗапроса.Выгрузить();
	КонецЕсли; 

	Возврат ТаблицаДанныхПоЗонам;
	
КонецФункции

&НаСервере
Функция ДобавитьЗаказНаСервере(СсылкаНаДок, ДокументыДоставкиДляДобавления)
	
	// Поиск добавляемых заказов среди уже существующих в плане доставки
	МассивСообщений = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ES_ПланДоставкиЗаказы.ДокументДоставки
		|ИЗ
		|	Документ.ES_ПланДоставки.Заказы КАК ES_ПланДоставкиЗаказы
		|ГДЕ
		|	ES_ПланДоставкиЗаказы.Ссылка = &Ссылка
		|	И ES_ПланДоставкиЗаказы.ДокументДоставки В(&ДокументыДоставкиДляДобавления)";

	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДок);
	Запрос.УстановитьПараметр("ДокументыДоставкиДляДобавления", ДокументыДоставкиДляДобавления);

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		УжеСуществующиеЗаказы = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ДокументДоставки");
		Для каждого Элем Из УжеСуществующиеЗаказы Цикл
			ДокументыДоставкиДляДобавления.Удалить(ДокументыДоставкиДляДобавления.Найти(Элем));
			МассивСообщений.Добавить("" + Элем + " уже есть в выбраном плане доставки");
		КонецЦикла; 
	КонецЕсли; 
	
	// Добавление новых заказов доставки
	ДокПланДоставки = СсылкаНаДок.ПолучитьОбъект();
	
	ES_ОбщегоНазначения.ПолучитьДанныеПоЗаказамДляЗаполненияПланаДоставки(Тип("ДокументСсылка.ES_ПланДоставки"), ДокПланДоставки, ДокументыДоставкиДляДобавления);
	//ЭР Несторук С.И. 25.02.2017 14:43:12 {
	//При добавлении в План нового документа, признак подтвержде убираем
	ДокПланДоставки.Подтвержден = Ложь;
	ДокПланДоставки.ДанныеПодтверждения = "";
	//}ЭР Несторук С.И.
	
	ДокументПроведен = ДокПланДоставки.Проведен;
	Попытка
		ДокПланДоставки.Записать(?(ДокументПроведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	Исключение
	    МассивСообщений.Добавить("Не удалось добавить документы доставки в План доставки");
	КонецПопытки; 
	
	Возврат МассивСообщений;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
// Процедура заполняет табличные части на вкладке Заказы
//попадают документы доставки, соответствующие условиям:
//  * документ доставки не входит в План доставки - ни записанный, ни проведенный
Процедура ЗаполнитьЗаказамиНаСервере()

	
	Объект.Заказы.Очистить();
	Объект.ЗаказыСписокГрузов.Очистить();
	Объект.ЗаказыГрузы.Очистить();
	
	Запрос1 = Новый Запрос;
	
	// EFSOL Шаповал О. А. 17.11.2015 
	Запрос1.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	МАКСИМУМ(Метка1.МеткаС) КАК МеткаС,
	                |	МАКСИМУМ(Метка1.МеткаПо) КАК МеткаПо,
	                |	МАКСИМУМ(Метка1.Цвет) КАК Цвет
	                |ИЗ
	                |	(ВЫБРАТЬ
	                |		ES_СтартовыеНастройки.Значение КАК МеткаС,
	                |		"""" КАК МеткаПо,
	                |		"""" КАК Цвет
	                |	ИЗ
	                |		РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	                |	ГДЕ
	                |		ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Метка1ВремяС)
	                |	
	                |	ОБЪЕДИНИТЬ ВСЕ
	                |	
	                |	ВЫБРАТЬ
	                |		"""",
	                |		ES_СтартовыеНастройки.Значение,
	                |		""""
	                |	ИЗ
	                |		РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	                |	ГДЕ
	                |		ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Метка1ВремяПо)
	                |	
	                |	ОБЪЕДИНИТЬ ВСЕ
	                |	
	                |	ВЫБРАТЬ
	                |		"""",
	                |		"""",
	                |		ES_СтартовыеНастройки.Значение
	                |	ИЗ
	                |		РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	                |	ГДЕ
	                |		ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Метка1Цвет)) КАК Метка1
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	МАКСИМУМ(Метка2.МеткаС),
	                |	МАКСИМУМ(Метка2.МеткаПо),
	                |	МАКСИМУМ(Метка2.Цвет)
	                |ИЗ
	                |	(ВЫБРАТЬ
	                |		ES_СтартовыеНастройки.Значение КАК МеткаС,
	                |		"""" КАК МеткаПо,
	                |		"""" КАК Цвет
	                |	ИЗ
	                |		РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	                |	ГДЕ
	                |		ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Метка2ВремяС)
	                |	
	                |	ОБЪЕДИНИТЬ ВСЕ
	                |	
	                |	ВЫБРАТЬ
	                |		"""",
	                |		ES_СтартовыеНастройки.Значение,
	                |		""""
	                |	ИЗ
	                |		РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	                |	ГДЕ
	                |		ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Метка2ВремяПо)
	                |	
	                |	ОБЪЕДИНИТЬ ВСЕ
	                |	
	                |	ВЫБРАТЬ
	                |		"""",
	                |		"""",
	                |		ES_СтартовыеНастройки.Значение
	                |	ИЗ
	                |		РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	                |	ГДЕ
	                |		ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Метка2Цвет)) КАК Метка2
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	МАКСИМУМ(Метка3.МеткаС),
	                |	МАКСИМУМ(Метка3.МеткаПо),
	                |	МАКСИМУМ(Метка3.Цвет)
	                |ИЗ
	                |	(ВЫБРАТЬ
	                |		ES_СтартовыеНастройки.Значение КАК МеткаС,
	                |		"""" КАК МеткаПо,
	                |		"""" КАК Цвет
	                |	ИЗ
	                |		РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	                |	ГДЕ
	                |		ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Метка3ВремяС)
	                |	
	                |	ОБЪЕДИНИТЬ ВСЕ
	                |	
	                |	ВЫБРАТЬ
	                |		"""",
	                |		ES_СтартовыеНастройки.Значение,
	                |		""""
	                |	ИЗ
	                |		РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	                |	ГДЕ
	                |		ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Метка3ВремяПо)
	                |	
	                |	ОБЪЕДИНИТЬ ВСЕ
	                |	
	                |	ВЫБРАТЬ
	                |		"""",
	                |		"""",
	                |		ES_СтартовыеНастройки.Значение
	                |	ИЗ
	                |		РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	                |	ГДЕ
	                |		ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Метка3Цвет)) КАК Метка3";
	
	Выборка = Запрос1.Выполнить().Выбрать();
	
	ТЗ = Новый ТаблицаЗначений();
	
	КС = Новый КвалификаторыСтроки(30);
	КД = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	
	Массив.Очистить();
	Массив.Добавить(Тип("Дата"));
	ОписаниеТиповД = Новый ОписаниеТипов(Массив, , КД);
	
	ТЗ.Колонки.Добавить("МеткаС",ОписаниеТиповД);
	ТЗ.Колонки.Добавить("МеткаПо",ОписаниеТиповД);
	ТЗ.Колонки.Добавить("Цвет",ОписаниеТиповС);
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.МеткаС) И ЗначениеЗаполнено(Выборка.МеткаПо) И ЗначениеЗаполнено(Выборка.Цвет) Тогда
			СтрокаТЗ         = ТЗ.Добавить();
			СтрокаТЗ.МеткаС  = Дата(Выборка.МеткаС);
			СтрокаТЗ.МеткаПо = Дата(Выборка.МеткаПо);
			СтрокаТЗ.Цвет    = Выборка.Цвет;
		КонецЕсли;
	КонецЦикла;

	// EFSOL Шаповал О. А. 17.11.2015 	
	
	Запрос = Новый Запрос;
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МВТ;	
	Запрос.Текст = "Выбрать ВТ.МеткаС, ВТ.МеткаПо, ВТ.Цвет ПОМЕСТИТЬ ВТ_ЦветЗаказа ИЗ &ТЗ КАК ВТ";
	Запрос.УстановитьПараметр("ТЗ",ТЗ);
	Запрос.Выполнить();
	//ЭР Несторук С.И. 24.02.2017 16:45:22 {
	//в тексте запроса установил цвет метки для забора - lightblue#166,202,240
	//}ЭР Несторук С.И.
	ТекстЗапроса =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ES_СведенияОЗаказахСрезПоследних.Заказ КАК Заказ
		|ПОМЕСТИТЬ ВТ_Исключения
		|ИЗ
		|	РегистрСведений.ES_СведенияОЗаказах.СрезПоследних(
		|			,
		|			Регистратор ССЫЛКА Документ.ES_ПланДоставки
		|				И (Заказ.ES_ДатаДоставки МЕЖДУ &ДатаНачала И &ДатаОкончания)) КАК ES_СведенияОЗаказахСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(&Период, ) КАК ES_СтатусыЗаказовСрезПоследних
		|		ПО ES_СведенияОЗаказахСрезПоследних.Заказ = ES_СтатусыЗаказовСрезПоследних.Заказ
		|ГДЕ
		|	НЕ ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_СтатусыЗаказов.Недоставлен)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ES_СведенияОЗаборахСрезПоследних.Забор
		|ИЗ
		|	РегистрСведений.ES_СведенияОЗаборах.СрезПоследних(
		|			,
		|			Регистратор ССЫЛКА Документ.ES_ПланДоставки
		|				И (Забор.ДатаЗабора МЕЖДУ &ДатаНачала И &ДатаОкончания)) КАК ES_СведенияОЗаборахСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаборов.СрезПоследних(&Период, ) КАК ES_СтатусыЗаборовСрезПоследних
		|		ПО ES_СведенияОЗаборахСрезПоследних.Забор = ES_СтатусыЗаборовСрезПоследних.Забор
		|ГДЕ
		|	НЕ ES_СтатусыЗаборовСрезПоследних.СтатусЗабора = ЗНАЧЕНИЕ(Перечисление.ES_СтатусыЗаборов.НеВыполнен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ES_СтатусыЗаказовСрезПоследних.Заказ КАК Заказ,
		|	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа КАК СтатусЗаказа
		|ПОМЕСТИТЬ ВТ_Заказы
		|ИЗ
		|	РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(
		|			,
		|			НЕ Заказ В
		|						(ВЫБРАТЬ
		|							ВТ_Исключения.Заказ
		|						ИЗ
		|							ВТ_Исключения КАК ВТ_Исключения)
		|				И (Заказ.ES_ДатаДоставки МЕЖДУ &ДатаНачала И &ДатаОкончания)) КАК ES_СтатусыЗаказовСрезПоследних
		|ГДЕ
		|	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа В(&СтатусыНераспределенныхЗаказов)
		|	И ВЫБОР
		|			КОГДА &Накладная = """"
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ES_СтатусыЗаказовСрезПоследних.Заказ.ES_НомерНакладной ПОДОБНО &Накладная
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Номер = """"
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ES_СтатусыЗаказовСрезПоследних.Заказ.ES_ВхНакладная ПОДОБНО &Номер
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ОтборАдрес = """"
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ES_СтатусыЗаказовСрезПоследних.Заказ.ES_АдресДоставки ПОДОБНО &ОтборАдрес
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Подрядчик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ES_СтатусыЗаказовСрезПоследних.Заказ.ES_Подрядчик = &Подрядчик
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Получатель = """"
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ES_СтатусыЗаказовСрезПоследних.Заказ.ES_Получатель ПОДОБНО &Получатель
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Курьер = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ES_СтатусыЗаказовСрезПоследних.Заказ.ES_Курьер = &Курьер
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Заказчик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ES_СтатусыЗаказовСрезПоследних.Заказ.Контрагент = &Заказчик
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ВидДоставкиЗаказы = ЗНАЧЕНИЕ(Перечисление.ES_ВидыДоставки.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ES_СтатусыЗаказовСрезПоследних.Заказ.ES_ВидДоставки = &ВидДоставкиЗаказы
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Регион = ЗНАЧЕНИЕ(Справочник.ES_Регионы.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ES_СтатусыЗаказовСрезПоследних.Заказ.ES_ПолучательРегион В ИЕРАРХИИ (&Регион)
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ЛинияМетро = ЗНАЧЕНИЕ(Справочник.ES_ЛинииМетро.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ES_СтатусыЗаказовСрезПоследних.Заказ.ES_ПолучательРегион.ЛинияМетро = &ЛинияМетро
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &толькосборы
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &КодНаправление = """"
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ES_СтатусыЗаказовСрезПоследних.Заказ.ES_Направление.КодНаправления = &КодНаправление
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ES_ВидКонтрагента.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ES_СтатусыЗаказовСрезПоследних.Заказ.Контрагент.ES_ВидКонтрагента = &ВидКонтрагента
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ES_СведенияОЗаборахСрезПоследних.Забор КАК СвязанныйДокумент,
		|	ES_СведенияОЗаборахСрезПоследних.ОснованиеЗабора КАК ДокументДоставки
		|ПОМЕСТИТЬ ВТ_ЗаборДляЗаказа
		|ИЗ
		|	РегистрСведений.ES_СведенияОЗаборах.СрезПоследних(
		|			,
		|			ОснованиеЗабора В
		|				(ВЫБРАТЬ
		|					ВТ_Заказы.Заказ
		|				ИЗ
		|					ВТ_Заказы КАК ВТ_Заказы)) КАК ES_СведенияОЗаборахСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Заказ КАК Заказ,
		|	ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Значение КАК Курьер,
		|	NULL КАК Подрядчик,
		|	NULL КАК Комментарий,
		|	NULL КАК Поврежден
		|ПОМЕСТИТЬ ВТ_ЗаказИзмРекв
		|ИЗ
		|	РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
		|			,
		|			Заказ В
		|					(ВЫБРАТЬ
		|						ВТ_Заказы.Заказ
		|					ИЗ
		|						ВТ_Заказы КАК ВТ_Заказы)
		|				И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Курьер)) КАК ES_ИзменяемыеРеквизитыЗаказовСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Заказ,
		|	NULL,
		|	NULL,
		|	ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Значение,
		|	NULL
		|ИЗ
		|	РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
		|			,
		|			Заказ В
		|					(ВЫБРАТЬ
		|						ВТ_Заказы.Заказ
		|					ИЗ
		|						ВТ_Заказы КАК ВТ_Заказы)
		|				И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Комментарий)) КАК ES_ИзменяемыеРеквизитыЗаказовСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Заказ,
		|	NULL,
		|	ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Значение,
		|	NULL,
		|	NULL
		|ИЗ
		|	РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
		|			,
		|			Заказ В
		|					(ВЫБРАТЬ
		|						ВТ_Заказы.Заказ
		|					ИЗ
		|						ВТ_Заказы КАК ВТ_Заказы)
		|				И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Подрядчик)) КАК ES_ИзменяемыеРеквизитыЗаказовСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Заказ,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Значение КАК БУЛЕВО), ЛОЖЬ)
		|ИЗ
		|	РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
		|			,
		|			Заказ В
		|					(ВЫБРАТЬ
		|						ВТ_Заказы.Заказ
		|					ИЗ
		|						ВТ_Заказы КАК ВТ_Заказы)
		|				И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Поврежден)) КАК ES_ИзменяемыеРеквизитыЗаказовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЗаказИзмРекв.Заказ КАК Заказ,
		|	МАКСИМУМ(ВТ_ЗаказИзмРекв.Курьер) КАК Курьер,
		|	МАКСИМУМ(ВТ_ЗаказИзмРекв.Комментарий) КАК Комментарий,
		|	МАКСИМУМ(ВТ_ЗаказИзмРекв.Подрядчик) КАК Подрядчик,
		|	МАКСИМУМ(ВТ_ЗаказИзмРекв.Поврежден) КАК Поврежден
		|ПОМЕСТИТЬ ВТ_ЗаказИзмРеквГруп
		|ИЗ
		|	ВТ_ЗаказИзмРекв КАК ВТ_ЗаказИзмРекв
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ЗаказИзмРекв.Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ES_СтатусыЗаборовСрезПоследних.Забор КАК Забор,
		|	ES_СтатусыЗаборовСрезПоследних.Заказ КАК Заказ,
		|	ES_СтатусыЗаборовСрезПоследних.СтатусЗабора КАК СтатусЗабора
		|ПОМЕСТИТЬ ВТ_Заборы
		|ИЗ
		|	РегистрСведений.ES_СтатусыЗаборов.СрезПоследних(
		|			,
		|			НЕ Забор В
		|						(ВЫБРАТЬ
		|							ВТ_Исключения.Заказ
		|						ИЗ
		|							ВТ_Исключения КАК ВТ_Исключения)
		|				И (Забор.ДатаЗабора МЕЖДУ &ДатаНачала И &ДатаОкончания)) КАК ES_СтатусыЗаборовСрезПоследних
		|ГДЕ
		|	ES_СтатусыЗаборовСрезПоследних.СтатусЗабора В(&СтатусыНераспределенныхЗаборов)
		|	И ВЫБОР
		|			КОГДА &Накладная = """"
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ES_СтатусыЗаборовСрезПоследних.Заказ.ES_НомерНакладной ПОДОБНО &Накладная
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Номер = """"
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ES_СтатусыЗаборовСрезПоследних.Заказ.ES_ВхНакладная ПОДОБНО &Номер
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ОтборАдрес = """"
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ES_СтатусыЗаборовСрезПоследних.Забор.Адрес ПОДОБНО &ОтборАдрес
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Подрядчик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ES_СтатусыЗаборовСрезПоследних.Заказ.ES_Подрядчик = &Подрядчик
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Получатель = """"
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ES_СтатусыЗаборовСрезПоследних.Забор.Отправитель ПОДОБНО &Получатель
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Курьер = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ES_СтатусыЗаборовСрезПоследних.Забор.Курьер = &Курьер
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Заказчик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ES_СтатусыЗаборовСрезПоследних.Забор.Заказчик = &Заказчик
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ВидДоставкиЗабор = ЗНАЧЕНИЕ(Перечисление.ES_ВидыЗабора.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ES_СтатусыЗаборовСрезПоследних.Забор.ВидЗабора = &ВидДоставкиЗабор
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Регион = ЗНАЧЕНИЕ(Справочник.ES_Регионы.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ES_СтатусыЗаборовСрезПоследних.Забор.Регион В ИЕРАРХИИ (&Регион)
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ЛинияМетро = ЗНАЧЕНИЕ(Справочник.ES_ЛинииМетро.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ES_СтатусыЗаборовСрезПоследних.Забор.Регион.ЛинияМетро = &ЛинияМетро
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &толькодоставки
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ES_ИзменяемыеРеквизитыЗаборовСрезПоследних.Забор КАК Забор,
		|	ES_ИзменяемыеРеквизитыЗаборовСрезПоследних.Значение КАК Курьер,
		|	NULL КАК Комментарий
		|ПОМЕСТИТЬ ВТ_КомплИзмРекв
		|ИЗ
		|	РегистрСведений.ES_ИзменяемыеРеквизитыЗаборов.СрезПоследних(
		|			,
		|			Забор В
		|					(ВЫБРАТЬ
		|						ВТ_Заборы.Забор
		|					ИЗ
		|						ВТ_Заборы КАК ВТ_Заборы)
		|				И РеквизитЗабора = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗабора.Курьер)) КАК ES_ИзменяемыеРеквизитыЗаборовСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ES_ИзменяемыеРеквизитыЗаборовСрезПоследних.Забор,
		|	NULL,
		|	ES_ИзменяемыеРеквизитыЗаборовСрезПоследних.Значение
		|ИЗ
		|	РегистрСведений.ES_ИзменяемыеРеквизитыЗаборов.СрезПоследних(
		|			,
		|			Забор В
		|					(ВЫБРАТЬ
		|						ВТ_Заборы.Забор
		|					ИЗ
		|						ВТ_Заборы КАК ВТ_Заборы)
		|				И РеквизитЗабора = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗабора.Комментарий)) КАК ES_ИзменяемыеРеквизитыЗаборовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_КомплИзмРекв.Забор КАК Забор,
		|	МАКСИМУМ(ВТ_КомплИзмРекв.Курьер) КАК Курьер,
		|	МАКСИМУМ(ВТ_КомплИзмРекв.Комментарий) КАК Комментарий
		|ПОМЕСТИТЬ ВТ_КомплИзмРеквГруп
		|ИЗ
		|	ВТ_КомплИзмРекв КАК ВТ_КомплИзмРекв
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_КомплИзмРекв.Забор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	2 КАК Порядок,
		|	ВТ_Заказы.Заказ КАК ДокументДоставки,
		|	ВТ_Заказы.СтатусЗаказа КАК СтатусЗаказа,
		|	ES_ДанныеПоЗаказамСрезПоследних.ДатаДокумента КАК ДатаДокумента,
		|	ES_ДанныеПоЗаказамСрезПоследних.НомерДокумента КАК НомерДокумента,
		|	ES_ДанныеПоЗаказамСрезПоследних.АдресДоставки КАК Адрес,
		|	ES_ДанныеПоЗаказамСрезПоследних.АдресДоставкиДолгота КАК АдресДоставкиДолгота,
		|	ES_ДанныеПоЗаказамСрезПоследних.АдресДоставкиШирота КАК АдресДоставкиШирота,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВидДоставки КАК ВидДоставки,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВидОплаты КАК ВидОплаты,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВремяДоставкиС КАК ВремяДоставкиС,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВремяДоставкиПо КАК ВремяДоставкиПо,
		|	ES_ДанныеПоЗаказамСрезПоследних.ДатаДоставки КАК ДатаДоставки,
		|	ES_ДанныеПоЗаказамСрезПоследних.КоличествоМест КАК КоличествоМест,
		|	ES_ДанныеПоЗаказамСрезПоследних.ЗаборОтправитель КАК ЗаборОтправитель,
		|	ES_ДанныеПоЗаказамСрезПоследних.Получатель КАК Получатель,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВхНакладная КАК ВхНакладная,
		|	ES_ДанныеПоЗаказамСрезПоследних.НомерНакладной КАК НомерНакладной,
		|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийВес КАК ОбщийВес,
		|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийОбъем КАК ОбщийОбъем,
		|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийОбъемныйВес КАК ОбщийОбъемныйВес,
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказчик КАК Заказчик,
		|	ES_ДанныеПоЗаказамСрезПоследних.СправочноЗаказчик КАК СправочноЗаказчик,
		|	ES_ДанныеПоЗаказамСрезПоследних.Плательщик КАК Плательщик,
		|	ES_ДанныеПоЗаказамСрезПоследних.Подтвержден КАК Подтвержден,
		|	ES_ДанныеПоЗаказамСрезПоследних.ПолучательРегион КАК ПолучательРегион,
		|	ES_ДанныеПоЗаказамСрезПоследних.СправочноАдресПолучателя КАК СправочноАдресПолучателя,
		|	ES_ДанныеПоЗаказамСрезПоследних.СуммаДокумента КАК СуммаДокумента,
		|	ES_ДанныеПоЗаказамСрезПоследних.СрочностьДоставки КАК СрочностьДоставки,
		|	ВТ_ЗаборДляЗаказа.СвязанныйДокумент КАК СвязанныйДокумент,
		|	ВТ_ЗаказИзмРеквГруп.Курьер КАК Курьер,
		|	ES_ДанныеПоЗаказамСрезПоследних.ПредставлениеГрузов КАК ПредставлениеГрузов,
		|	ЕСТЬNULL(ВТ_ЗаказИзмРеквГруп.Комментарий, ES_ДанныеПоЗаказамСрезПоследних.Комментарий) КАК Комментарий,
		|	ВТ_ЗаказИзмРеквГруп.Подрядчик КАК Подрядчик,
		|	ВТ_Заказы.Заказ.ES_ЦветМетки КАК ЦветМетки,
		|	ЕСТЬNULL(ES_ЗаказыНаСкладеОстатки.Склад, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК Склад,
		|	ES_ДанныеПоЗаказамСрезПоследних.ПолучательРегион.ЛинияМетро КАК ЛинияМетро,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВидЗабора КАК ВидЗабора,
		|	ES_ДанныеПоЗаказамСрезПоследних.Возврат КАК Возврат,
		|	ES_ДанныеПоЗаказамСрезПоследних.ЗаборАдрес КАК ЗаборАдрес,
		|	ЕСТЬNULL(ВТ_ЗаказИзмРеквГруп.Поврежден, ЛОЖЬ) КАК Поврежден,
		|	ES_ДанныеПоЗаказамСрезПоследних.ДоУточнения КАК ДоУточнения,
		|	ES_ДанныеПоЗаказамСрезПоследних.Направление КАК Направление
		|ПОМЕСТИТЬ ВТ_ЗаказыБезГрузов
		|ИЗ
		|	ВТ_Заказы КАК ВТ_Заказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(
		|				,
		|				Заказ В
		|					(ВЫБРАТЬ
		|						ВТ_Заказы.Заказ
		|					ИЗ
		|						ВТ_Заказы КАК ВТ_Заказы)) КАК ES_ДанныеПоЗаказамСрезПоследних
		|		ПО ВТ_Заказы.Заказ = ES_ДанныеПоЗаказамСрезПоследних.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаборДляЗаказа КАК ВТ_ЗаборДляЗаказа
		|		ПО ВТ_Заказы.Заказ = ВТ_ЗаборДляЗаказа.ДокументДоставки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаказИзмРеквГруп КАК ВТ_ЗаказИзмРеквГруп
		|		ПО ВТ_Заказы.Заказ = ВТ_ЗаказИзмРеквГруп.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ES_ЗаказыНаСкладе.Остатки(
		|				,
		|				Заказ В
		|					(ВЫБРАТЬ
		|						ВТ_Заказы.Заказ
		|					ИЗ
		|						ВТ_Заказы КАК ВТ_Заказы)) КАК ES_ЗаказыНаСкладеОстатки
		|		ПО ВТ_Заказы.Заказ = ES_ЗаказыНаСкладеОстатки.Заказ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1,
		|	ВТ_Заборы.Забор,
		|	ВТ_Заборы.СтатусЗабора,
		|	ES_ДанныеПоЗаборамСрезПоследних.ДатаДокумента,
		|	ES_ДанныеПоЗаборамСрезПоследних.НомерДокумента,
		|	ES_ДанныеПоЗаборамСрезПоследних.Адрес,
		|	ES_ДанныеПоЗаборамСрезПоследних.АдресДолгота,
		|	ES_ДанныеПоЗаборамСрезПоследних.АдресШирота,
		|	ES_ДанныеПоЗаборамСрезПоследних.ВидЗабора,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.ПустаяСсылка),
		|	ES_ДанныеПоЗаборамСрезПоследних.ВремяЗабораС,
		|	ES_ДанныеПоЗаборамСрезПоследних.ВремяЗабораПо,
		|	ES_ДанныеПоЗаборамСрезПоследних.ДатаЗабора,
		|	ES_ДанныеПоЗаборамСрезПоследних.КоличествоМест,
		|	"""",
		|	ES_ДанныеПоЗаборамСрезПоследних.Отправитель,
		|	"""",
		|	ES_ДанныеПоЗаборамСрезПоследних.НомерНакладной,
		|	ES_ДанныеПоЗаборамСрезПоследних.ОбщийВес,
		|	ES_ДанныеПоЗаборамСрезПоследних.ОбщийОбъем,
		|	ES_ДанныеПоЗаборамСрезПоследних.ОбщийОбъемныйВес,
		|	ES_ДанныеПоЗаборамСрезПоследних.Заказчик,
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
		|	ЗНАЧЕНИЕ(Перечисление.ES_ТипыПлательщиков.ПустаяСсылка),
		|	ES_ДанныеПоЗаборамСрезПоследних.Подтвержден,
		|	ES_ДанныеПоЗаборамСрезПоследних.Регион,
		|	"""",
		|	0,
		|	ЗНАЧЕНИЕ(Перечисление.ES_СрочностьДоставки.ПустаяСсылка),
		|	ВТ_Заборы.Заказ,
		|	ВТ_КомплИзмРеквГруп.Курьер,
		|	ES_ДанныеПоЗаборамСрезПоследних.ПредставлениеГрузов,
		|	ЕСТЬNULL(ВТ_КомплИзмРеквГруп.Комментарий, ES_ДанныеПоЗаборамСрезПоследних.Комментарий),
		|	"""",
		|	""lightblue#166,202,240"",
		|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка),
		|	ES_ДанныеПоЗаборамСрезПоследних.Регион.ЛинияМетро,
		|	ES_ДанныеПоЗаборамСрезПоследних.ВидЗабора,
		|	ЛОЖЬ,
		|	ES_ДанныеПоЗаборамСрезПоследних.Адрес,
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	ЗНАЧЕНИЕ(Справочник.ES_Направления.ПустаяСсылка)
		|ИЗ
		|	ВТ_Заборы КАК ВТ_Заборы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ДанныеПоЗаборам.СрезПоследних(
		|				,
		|				Забор В
		|					(ВЫБРАТЬ
		|						ВТ_Заборы.Забор
		|					ИЗ
		|						ВТ_Заборы КАК ВТ_Заборы)) КАК ES_ДанныеПоЗаборамСрезПоследних
		|		ПО ВТ_Заборы.Забор = ES_ДанныеПоЗаборамСрезПоследних.Забор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КомплИзмРеквГруп КАК ВТ_КомплИзмРеквГруп
		|		ПО ВТ_Заборы.Забор = ВТ_КомплИзмРеквГруп.Забор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказ КАК ЗаказДляГрузов
		|ПОМЕСТИТЬ ВТ_СписокЗказовДляГрузов
		|ИЗ
		|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(
		|			,
		|			Заказ В
		|				(ВЫБРАТЬ
		|					ВТ_Заказы.Заказ
		|				ИЗ
		|					ВТ_Заказы КАК ВТ_Заказы)) КАК ES_ДанныеПоЗаказамСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НЕ ES_ДанныеПоЗаборамСрезПоследних.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|			ТОГДА ES_ДанныеПоЗаборамСрезПоследних.ДокументОснование
		|		ИНАЧЕ ES_ДанныеПоЗаборамСрезПоследних.Забор
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.ES_ДанныеПоЗаборам.СрезПоследних(
		|			,
		|			Забор В
		|				(ВЫБРАТЬ
		|					ВТ_Заборы.Забор
		|				ИЗ
		|					ВТ_Заборы КАК ВТ_Заборы)) КАК ES_ДанныеПоЗаборамСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ES_ГрузыВЗаказахСрезПоследних.НомерСтроки КАК НомерСтроки,
		|	ES_ГрузыВЗаказахСрезПоследних.ДокументДоставки КАК ДокументДоставки,
		|	ES_ГрузыВЗаказахСрезПоследних.КлючСтроки КАК КлючСтроки,
		|	ES_ГрузыВЗаказахСрезПоследних.ТипГруза КАК ТипГруза,
		|	ES_ГрузыВЗаказахСрезПоследних.Вес КАК Вес,
		|	ES_ГрузыВЗаказахСрезПоследних.ОбъемныйВес КАК ОбъемныйВес,
		|	ES_ГрузыВЗаказахСрезПоследних.Высота КАК Высота,
		|	ES_ГрузыВЗаказахСрезПоследних.Длина КАК Длина,
		|	ES_ГрузыВЗаказахСрезПоследних.Ширина КАК Ширина,
		|	ES_ГрузыВЗаказахСрезПоследних.НППлан КАК НППлан,
		|	ES_ГрузыВЗаказахСрезПоследних.Страховка КАК Страховка,
		|	ES_ГрузыВЗаказахСрезПоследних.ОписаниеГруза КАК ОписаниеГруза
		|ПОМЕСТИТЬ ВТ_ГрузыМеста
		|ИЗ
		|	РегистрСведений.ES_ГрузыВЗаказах.СрезПоследних(
		|			,
		|			ДокументДоставки В
		|				(ВЫБРАТЬ
		|					ВТ_СписокЗказовДляГрузов.ЗаказДляГрузов
		|				ИЗ
		|					ВТ_СписокЗказовДляГрузов КАК ВТ_СписокЗказовДляГрузов)) КАК ES_ГрузыВЗаказахСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ES_НоменклатураВЗаказахСрезПоследних.НомерСтроки КАК НомерСтроки,
		|	ES_НоменклатураВЗаказахСрезПоследних.ДокументДоставки КАК ДокументДоставки,
		|	ES_НоменклатураВЗаказахСрезПоследних.Номенклатура КАК Номенклатура,
		|	ES_НоменклатураВЗаказахСрезПоследних.Характеристика КАК Характеристика,
		|	ES_НоменклатураВЗаказахСрезПоследних.Партия КАК Партия,
		|	ES_НоменклатураВЗаказахСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ES_НоменклатураВЗаказахСрезПоследних.Количество КАК Количество,
		|	ES_НоменклатураВЗаказахСрезПоследних.НППлан КАК НППлан,
		|	ES_НоменклатураВЗаказахСрезПоследних.Содержание КАК Содержание,
		|	ES_НоменклатураВЗаказахСрезПоследних.Цена КАК Цена,
		|	ES_НоменклатураВЗаказахСрезПоследних.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|	ES_НоменклатураВЗаказахСрезПоследних.Вес КАК Вес,
		|	ES_НоменклатураВЗаказахСрезПоследних.Объем КАК Объем,
		|	ES_НоменклатураВЗаказахСрезПоследних.ОбъемныйВес КАК ОбъемныйВес,
		|	ES_НоменклатураВЗаказахСрезПоследних.ОбьявленнаяСтоимость КАК ОбьявленнаяСтоимость,
		|	ES_НоменклатураВЗаказахСрезПоследних.Опасность КАК Опасность,
		|	ES_НоменклатураВЗаказахСрезПоследних.Артикул КАК Артикул,
		|	ES_НоменклатураВЗаказахСрезПоследних.Штрихкод КАК Штрихкод
		|ПОМЕСТИТЬ ВТ_ГрузыЗапасы
		|ИЗ
		|	РегистрСведений.ES_НоменклатураВЗаказах.СрезПоследних(
		|			,
		|			ДокументДоставки В
		|				(ВЫБРАТЬ
		|					ВТ_СписокЗказовДляГрузов.ЗаказДляГрузов
		|				ИЗ
		|					ВТ_СписокЗказовДляГрузов КАК ВТ_СписокЗказовДляГрузов)) КАК ES_НоменклатураВЗаказахСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтандартнаяСрочность.МеткаСтандартная КАК ЦветМетки,
		|	СтандартнаяСрочность.Срочность КАК Срочность
		|ПОМЕСТИТЬ ВТ_ЦветСрочности
		|ИЗ
		|	(ВЫБРАТЬ
		|		ES_СтартовыеНастройки.Значение КАК МеткаСтандартная,
		|		ЗНАЧЕНИЕ(Перечисление.ES_СрочностьДоставки.Стандартная) КАК Срочность
		|	ИЗ
		|		РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
		|	ГДЕ
		|		ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Метка1Цвет)) КАК СтандартнаяСрочность
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СрочнаяСрочность.МеткаСрочная,
		|	СрочнаяСрочность.Срочность
		|ИЗ
		|	(ВЫБРАТЬ
		|		ES_СтартовыеНастройки.Значение КАК МеткаСрочная,
		|		ЗНАЧЕНИЕ(Перечисление.ES_СрочностьДоставки.Срочная) КАК Срочность
		|	ИЗ
		|		РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
		|	ГДЕ
		|		ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Метка2Цвет)) КАК СрочнаяСрочность
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СверхсрочнаяСрочность.МеткаСверхСрочная,
		|	СверхсрочнаяСрочность.Срочность
		|ИЗ
		|	(ВЫБРАТЬ
		|		ES_СтартовыеНастройки.Значение КАК МеткаСверхСрочная,
		|		ЗНАЧЕНИЕ(Перечисление.ES_СрочностьДоставки.СверхСрочная) КАК Срочность
		|	ИЗ
		|		РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
		|	ГДЕ
		|		ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Метка3Цвет)) КАК СверхсрочнаяСрочность
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ES_СтатусыЗаказовСрезПоследних.Заказ КАК Заказ,
		|	ES_СтатусыЗаказовСрезПоследних.Регистратор КАК ДокПеремещение
		|ПОМЕСТИТЬ ВТ_Перемещение
		|ИЗ
		|	РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(
		|			,
		|			Заказ В
		|					(ВЫБРАТЬ
		|						ВТ_Заказы.Заказ
		|					ИЗ
		|						ВТ_Заказы КАК ВТ_Заказы)
		|				И Регистратор ССЫЛКА Документ.ES_ПеремещениеЗаказов
		|				И СтатусЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_СтатусыЗаказов.МеждуСкладами)) КАК ES_СтатусыЗаказовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЗаказыБезГрузов.Порядок КАК Порядок,
		|	ВТ_ЗаказыБезГрузов.ДокументДоставки КАК ДокументДоставки,
		|	ВТ_ЗаказыБезГрузов.ДатаДокумента КАК ДатаЗаказа,
		|	ВТ_ЗаказыБезГрузов.НомерДокумента КАК НомерЗаказа,
		|	ВТ_ЗаказыБезГрузов.Адрес КАК АдресДоставки,
		|	ВТ_ЗаказыБезГрузов.АдресДоставкиДолгота КАК АдресДоставкиДолгота,
		|	ВТ_ЗаказыБезГрузов.АдресДоставкиШирота КАК АдресДоставкиШирота,
		|	ВТ_ЗаказыБезГрузов.ВидДоставки КАК ВидДоставки,
		|	ВТ_ЗаказыБезГрузов.ВидОплаты КАК ВидОплаты,
		|	ВТ_ЗаказыБезГрузов.ВремяДоставкиС КАК ВремяДоставкиС,
		|	ВТ_ЗаказыБезГрузов.ВремяДоставкиПо КАК ВремяДоставкиПо,
		|	ВТ_ЗаказыБезГрузов.ДатаДоставки КАК ДатаДоставки,
		|	ВТ_ЗаказыБезГрузов.Курьер КАК Курьер,
		|	ВТ_ЗаказыБезГрузов.КоличествоМест КАК КоличествоМест,
		|	ВТ_ЗаказыБезГрузов.ЗаборОтправитель КАК ЗаборОтправитель,
		|	ВТ_ЗаказыБезГрузов.Заказчик КАК Заказчик,
		|	ВТ_ЗаказыБезГрузов.СправочноЗаказчик КАК СправочноЗаказчик,
		|	ВТ_ЗаказыБезГрузов.ВхНакладная КАК ВхНакладная,
		|	ВТ_ЗаказыБезГрузов.НомерНакладной КАК НомерНакладной,
		|	ВТ_ЗаказыБезГрузов.ОбщийВес КАК ОбщийВес,
		|	ВТ_ЗаказыБезГрузов.ОбщийОбъем КАК ОбщийОбъем,
		|	ВТ_ЗаказыБезГрузов.ОбщийОбъемныйВес КАК ОбщийОбъемныйВес,
		|	ВТ_ЗаказыБезГрузов.Получатель КАК Получатель,
		|	ВТ_ЗаказыБезГрузов.Плательщик КАК Плательщик,
		|	ВТ_ЗаказыБезГрузов.Подтвержден КАК Подтвержден,
		|	ВТ_ЗаказыБезГрузов.ПредставлениеГрузов КАК ПредставлениеГрузов,
		|	ВТ_ЗаказыБезГрузов.ПолучательРегион КАК Регион,
		|	ВТ_ЗаказыБезГрузов.СвязанныйДокумент КАК СвязанныйДокумент,
		|	ВТ_ЗаказыБезГрузов.СправочноАдресПолучателя КАК СправочноАдресПолучателя,
		|	ВТ_ЗаказыБезГрузов.СтатусЗаказа КАК СтатусДокумента,
		|	ВТ_ЗаказыБезГрузов.СрочностьДоставки КАК СрочностьДоставки,
		|	ВТ_ЗаказыБезГрузов.Комментарий КАК Комментарий,
		|	ВТ_ЗаказыБезГрузов.СуммаДокумента КАК СуммаДокумента,
		|	ВЫБОР
		|		КОГДА ВТ_ЗаказыБезГрузов.ДокументДоставки ССЫЛКА Документ.ES_ЗаборГруза
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоЗаборГруза,
		|	ЕСТЬNULL(ВТ_ГрузыМеста.НомерСтроки, """") КАК МестоНомерСтроки,
		|	ЕСТЬNULL(ВТ_ГрузыМеста.КлючСтроки, """") КАК МестоКлючСтроки,
		|	ЕСТЬNULL(ВТ_ГрузыМеста.ТипГруза, ЗНАЧЕНИЕ(Справочник.ES_ТипыГрузов.ПустаяСсылка)) КАК МестоТипГруза,
		|	ЕСТЬNULL(ВТ_ГрузыМеста.Вес, 0) КАК МестоВес,
		|	ЕСТЬNULL(ВТ_ГрузыМеста.ОбъемныйВес, 0) КАК МестоОбъемныйВес,
		|	ЕСТЬNULL(ВТ_ГрузыМеста.Высота, 0) КАК МестоВысота,
		|	ЕСТЬNULL(ВТ_ГрузыМеста.Длина, 0) КАК МестоДлина,
		|	ЕСТЬNULL(ВТ_ГрузыМеста.Ширина, 0) КАК МестоШирина,
		|	ЕСТЬNULL(ВТ_ГрузыМеста.НППлан, 0) КАК МестоНППлан,
		|	ЕСТЬNULL(ВТ_ГрузыМеста.Страховка, 0) КАК МестоСтраховка,
		|	ЕСТЬNULL(ВТ_ГрузыМеста.ОписаниеГруза, """") КАК МестоОписаниеГруза,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.НомерСтроки, """") КАК ЗапасНомерСтроки,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ЗапасНоменклатура,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЗапасХарактеристика,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Партия, ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)) КАК ЗапасПартия,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЗапасЕдиницаИзмерения,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Количество, 0) КАК ЗапасКоличество,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.НППлан, 0) КАК ЗапасНППлан,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Содержание, """") КАК ЗапасСодержание,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Цена, 0) КАК ЗапасЦена,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.ПроцентСкидкиНаценки, 0) КАК ЗапасПроцентСкидкиНаценки,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Вес, 0) КАК ЗапасВес,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Объем, 0) КАК ЗапасОбъем,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.ОбъемныйВес, 0) КАК ЗапасОбъемныйВес,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.ОбьявленнаяСтоимость, 0) КАК ЗапасОбьявленнаяСтоимость,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Опасность, ЛОЖЬ) КАК ЗапасОпасность,
		|	ВТ_ЗаказыБезГрузов.СтатусЗаказа КАК СтатусЗаказа,
		|	ВТ_ЗаказыБезГрузов.ДатаДокумента КАК ДатаДокумента,
		|	ВТ_ЗаказыБезГрузов.НомерДокумента КАК НомерДокумента,
		|	ВТ_ЗаказыБезГрузов.Адрес КАК Адрес,
		|	ВТ_ЗаказыБезГрузов.ПолучательРегион КАК ПолучательРегион,
		|	ВТ_ЗаказыБезГрузов.Подрядчик КАК Подрядчик,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТ_ЗаказыБезГрузов.ЦветМетки, """") = """"
		|			ТОГДА ВТ_ЦветСрочности.ЦветМетки
		|		ИНАЧЕ ЕСТЬNULL(ВТ_ЗаказыБезГрузов.ЦветМетки, """")
		|	КОНЕЦ КАК ЦветМетки,
		|	ВТ_ЗаказыБезГрузов.ЛинияМетро КАК ЛинияМетро,
		|	ВТ_Перемещение.ДокПеремещение КАК ДокПеремещение,
		|	ВТ_ЗаказыБезГрузов.ВидЗабора КАК ВидЗабора,
		|	ВТ_ЗаказыБезГрузов.Возврат КАК Возврат,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Артикул, """") КАК ЗапасАртикул,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Штрихкод, """") КАК ЗапасШтрихкод,
		|	ВТ_ЗаказыБезГрузов.ЗаборАдрес КАК ЗаборАдрес,
		|	ВТ_ЗаказыБезГрузов.Склад КАК Склад,
		|	ВТ_ЗаказыБезГрузов.ДоУточнения КАК ДоУточнения,
		|	ВТ_ЗаказыБезГрузов.Направление КАК Направление,
		|	ВТ_ЗаказыБезГрузов.Поврежден КАК Поврежден
		|ИЗ
		|	ВТ_ЗаказыБезГрузов КАК ВТ_ЗаказыБезГрузов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГрузыМеста КАК ВТ_ГрузыМеста
		|		ПО (ВЫБОР
		|				КОГДА ВТ_ЗаказыБезГрузов.ДокументДоставки ССЫЛКА Документ.ES_ЗаборГруза
		|						И НЕ ВТ_ЗаказыБезГрузов.СвязанныйДокумент = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|					ТОГДА ВТ_ЗаказыБезГрузов.СвязанныйДокумент = ВТ_ГрузыМеста.ДокументДоставки
		|				ИНАЧЕ ВТ_ЗаказыБезГрузов.ДокументДоставки = ВТ_ГрузыМеста.ДокументДоставки
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГрузыЗапасы КАК ВТ_ГрузыЗапасы
		|		ПО (ВЫБОР
		|				КОГДА ВТ_ЗаказыБезГрузов.ДокументДоставки ССЫЛКА Документ.ES_ЗаборГруза
		|						И НЕ ВТ_ЗаказыБезГрузов.СвязанныйДокумент = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|					ТОГДА ВТ_ЗаказыБезГрузов.СвязанныйДокумент = ВТ_ГрузыЗапасы.ДокументДоставки
		|				ИНАЧЕ ВТ_ЗаказыБезГрузов.ДокументДоставки = ВТ_ГрузыЗапасы.ДокументДоставки
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦветСрочности КАК ВТ_ЦветСрочности
		|		ПО ВТ_ЗаказыБезГрузов.СрочностьДоставки = ВТ_ЦветСрочности.Срочность
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Перемещение КАК ВТ_Перемещение
		|		ПО ВТ_ЗаказыБезГрузов.ДокументДоставки = ВТ_Перемещение.Заказ
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &Склад = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВТ_ЗаказыБезГрузов.Склад = &Склад
		|		КОНЕЦ
		|	И НЕ ВТ_ЗаказыБезГрузов.Поврежден
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	ДатаЗаказа,
		|	НомерЗаказа,
		|	МестоНомерСтроки,
		|	ЗапасНомерСтроки
		|ИТОГИ
		|	МАКСИМУМ(Порядок),
		|	МАКСИМУМ(ДатаЗаказа),
		|	МАКСИМУМ(НомерЗаказа),
		|	МАКСИМУМ(АдресДоставки),
		|	МАКСИМУМ(АдресДоставкиДолгота),
		|	МАКСИМУМ(АдресДоставкиШирота),
		|	МАКСИМУМ(ВидДоставки),
		|	МАКСИМУМ(ВидОплаты),
		|	МАКСИМУМ(ВремяДоставкиС),
		|	МАКСИМУМ(ВремяДоставкиПо),
		|	МАКСИМУМ(ДатаДоставки),
		|	МАКСИМУМ(Курьер),
		|	МАКСИМУМ(КоличествоМест),
		|	МАКСИМУМ(ЗаборОтправитель),
		|	МАКСИМУМ(Заказчик),
		|	МАКСИМУМ(СправочноЗаказчик),
		|	МАКСИМУМ(ВхНакладная),
		|	МАКСИМУМ(НомерНакладной),
		|	МАКСИМУМ(ОбщийВес),
		|	МАКСИМУМ(ОбщийОбъем),
		|	МАКСИМУМ(ОбщийОбъемныйВес),
		|	МАКСИМУМ(Получатель),
		|	МАКСИМУМ(Плательщик),
		|	МАКСИМУМ(Подтвержден),
		|	МАКСИМУМ(ПредставлениеГрузов),
		|	МАКСИМУМ(Регион),
		|	МАКСИМУМ(СвязанныйДокумент),
		|	МАКСИМУМ(СправочноАдресПолучателя),
		|	МАКСИМУМ(СтатусДокумента),
		|	МАКСИМУМ(СрочностьДоставки),
		|	МАКСИМУМ(Комментарий),
		|	МАКСИМУМ(СуммаДокумента),
		|	МАКСИМУМ(ЭтоЗаборГруза),
		|	МАКСИМУМ(СтатусЗаказа),
		|	МАКСИМУМ(ДатаДокумента),
		|	МАКСИМУМ(НомерДокумента),
		|	МАКСИМУМ(Адрес),
		|	МАКСИМУМ(ПолучательРегион),
		|	МАКСИМУМ(Подрядчик),
		|	МАКСИМУМ(ЦветМетки),
		|	МАКСИМУМ(ЛинияМетро),
		|	МАКСИМУМ(ДокПеремещение),
		|	МАКСИМУМ(ВидЗабора),
		|	МАКСИМУМ(Возврат),
		|	МАКСИМУМ(ЗаборАдрес),
		|	МАКСИМУМ(Склад),
		|	МАКСИМУМ(ДоУточнения),
		|	МАКСИМУМ(Направление),
		|	МАКСИМУМ(Поврежден)
		|ПО
		|	ДокументДоставки";
	
	Запрос.УстановитьПараметр("ДатаНачала", ЗаказыОтборСтандартныйПериод.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ЗаказыОтборСтандартныйПериод.ДатаОкончания);
	Запрос.УстановитьПараметр("Период", ТекущаяДата() + 2592000); // тек дата + 30 денй (86400 * 30)
	
	Запрос.УстановитьПараметр("толькодоставки", ТолькоДоставки);
	Запрос.УстановитьПараметр("толькосборы", ТолькоСборы);
	Запрос.УстановитьПараметр("ВидКонтрагента", ЗаказыОтборВидКонтрагента);
	Запрос.УстановитьПараметр("КодНаправление",ЗаказыОтборКодНаправления);
   	
	ВидыДоставкиСкладСклад = Новый Массив;
	ВидыДоставкиСкладСклад.Добавить(Перечисления.ES_ВидыДоставки.СкладСклад);
	Запрос.УстановитьПараметр("ВидыДоставкиСкладСклад",ВидыДоставкиСкладСклад);
	
	СтатусыНераспределенныхЗаказов = Новый Массив;
	СтатусыНераспределенныхЗаказов.Добавить(Перечисления.ES_СтатусыЗаказов.Подготовлен);
	СтатусыНераспределенныхЗаказов.Добавить(Перечисления.ES_СтатусыЗаказов.ПодготовленПринят);
	//ЭР Несторук С.И. 16.02.2017 14:12:54 {
	Если ОжидающиеЗаказы = Истина Тогда
		СтатусыНераспределенныхЗаказов.Добавить(Перечисления.ES_СтатусыЗаказов.ОжидаетГруз);
	КонецЕсли;
	//ЭР Несторук С.И. 16.02.2017 14:12:54 }
	

	СтатусыНераспределенныхЗаказов.Добавить(Перечисления.ES_СтатусыЗаказов.Комплектуется);
	СтатусыНераспределенныхЗаказов.Добавить(Перечисления.ES_СтатусыЗаказов.НеДоставлен);
	Запрос.УстановитьПараметр("СтатусыНераспределенныхЗаказов", СтатусыНераспределенныхЗаказов);
	
	СтатусыНераспределенныхЗаборов = Новый Массив;
	СтатусыНераспределенныхЗаборов.Добавить(Перечисления.ES_СтатусыЗаборов.ВРаботе);
	СтатусыНераспределенныхЗаборов.Добавить(Перечисления.ES_СтатусыЗаборов.Комплектуется);
	СтатусыНераспределенныхЗаборов.Добавить(Перечисления.ES_СтатусыЗаборов.НеВыполнен);
	Запрос.УстановитьПараметр("СтатусыНераспределенныхЗаборов", СтатусыНераспределенныхЗаборов);
	
	СтатусыАдресаСкладов = Новый Массив;
	СтатусыАдресаСкладов.Добавить(Перечисления.ES_ВидыДоставки.СкладСклад);
	Запрос.УстановитьПараметр("СтатусыАдресаСкладов", СтатусыАдресаСкладов);
	
	// Параметры запроса для отбора 	
	Запрос.УстановитьПараметр("Номер", 			?(ЗначениеЗаполнено(ЗаказыОтборВхНакладная), "%" + ЗаказыОтборВхНакладная + "%", ""));
	Запрос.УстановитьПараметр("Накладная", 		?(ЗначениеЗаполнено(ЗаказыОтборНомерНакладной), "%" + ЗаказыОтборНомерНакладной + "%", ""));
	Если НЕ ЗначениеЗаполнено(ЗаказыОтборАдрес) ИЛИ ЗаказыОтборАдресНЕ Тогда
		ОтборАдрес = "";
	Иначе
		ОтборАдрес = "%" + ЗаказыОтборАдрес + "%";
	КонецЕсли;
	//Запрос.УстановитьПараметр("ОтборАдрес", 	?(ЗначениеЗаполнено(ЗаказыОтборАдрес), "%" + ЗаказыОтборАдрес + "%", ""));
	Запрос.УстановитьПараметр("ОтборАдрес", 	ОтборАдрес);
	Запрос.УстановитьПараметр("Подрядчик",      ЗаказыОтборПодрядчик);
	Запрос.УстановитьПараметр("Получатель", 	?(ЗначениеЗаполнено(ЗаказыОтборПолучатель), "%" + ЗаказыОтборПолучатель + "%", ""));
	Запрос.УстановитьПараметр("Курьер", 		ЗаказыОтборКурьер);
	Запрос.УстановитьПараметр("Заказчик", 		ЗаказыОтборЗаказчик);        
	//ЭР Несторук С.И. 24.01.2017 10:17:18 {
	Запрос.УстановитьПараметр("Склад", 			ЗаказыОтборСклад);
	Если ТипЗнч(ЗаказыОтборРегион) = Тип("СправочникСсылка.ES_Регионы") Тогда 
		Запрос.УстановитьПараметр("Регион", 		ЗаказыОтборРегион);
		Запрос.УстановитьПараметр("ЛинияМетро", 	Справочники.ES_ЛинииМетро.ПустаяСсылка());
	ИначеЕсли ТипЗнч(ЗаказыОтборРегион) = Тип("СправочникСсылка.ES_ЛинииМетро") Тогда
		Запрос.УстановитьПараметр("Регион", 		Справочники.ES_Регионы.ПустаяСсылка());
		Запрос.УстановитьПараметр("ЛинияМетро", 	ЗаказыОтборРегион);
	Иначе 
		Запрос.УстановитьПараметр("Регион", 		Справочники.ES_Регионы.ПустаяСсылка());
		Запрос.УстановитьПараметр("ЛинияМетро", 	Справочники.ES_ЛинииМетро.ПустаяСсылка());
	КонецЕсли;

	//ЭР Несторук С.И.}
	
	Если ЗаказыОтборВидДоставки = Неопределено ИЛИ ЗаказыОтборВидДоставкиНЕ Тогда
		ВидДоставкиЗаказы 		= Перечисления.ES_ВидыДоставки.ПустаяСсылка();
		ВидДоставкиЗабор = Перечисления.ES_ВидыЗабора.ПустаяСсылка();
	Иначе
		ВидДоставкиЗаказы 		= ?(ТипЗнч(ЗаказыОтборВидДоставки) = Тип("ПеречислениеСсылка.ES_ВидыДоставки"), ЗаказыОтборВидДоставки, Перечисления.ES_ВидыДоставки.ПустаяСсылка());
		ВидДоставкиЗабор = ?(ТипЗнч(ЗаказыОтборВидДоставки) = Тип("ПеречислениеСсылка.ES_ВидыЗабора"), ЗаказыОтборВидДоставки, Перечисления.ES_ВидыЗабора.ПустаяСсылка());
	КонецЕсли; 
	//Иначе
	//	Если ЗаказыОтборВидДоставки = Неопределено Тогда
	//		ВидДоставкиЗаказы 		= Перечисления.ES_ВидыДоставки.ПустаяСсылка();
	//		ВидДоставкиЗабор = Перечисления.ES_ВидыЗабора.ПустаяСсылка();
	//	Иначе
	//		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИНАЧЕ ES_СтатусыЗаказовСрезПоследних.Заказ.ES_ВидДоставки = &ВидДоставкиЗаказы","ИНАЧЕ ES_СтатусыЗаказовСрезПоследних.Заказ.ES_ВидДоставки <> &ВидДоставкиЗаказы"); 
	//		
	//	КонецЕсли;
	//КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидДоставкиЗаказы", 		 ВидДоставкиЗаказы);
	Запрос.УстановитьПараметр("ВидДоставкиЗабор", ?(ЗначениеЗаполнено(ВидДоставкиЗаказы), ВидДоставкиЗаказы, ВидДоставкиЗабор));
	
	// Результат запроса
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ВыборкаСсылка.Следующий() Цикл
			
			//ЭР Несторук С.И. 20.03.2017 18:16:28 {
			ПерейтиКСледующему = Ложь;
			Если СписокАдресов.Количество() > 0 Тогда
				Для каждого Элемент ИЗ СписокАдресов Цикл
					Если НЕ ПустаяСтрока(ВыборкаСсылка.АдресДоставки) И НЕ  ПустаяСтрока(Элемент) Тогда
						Если СтрНайти(ВРег(ВыборкаСсылка.АдресДоставки), ВРег(Элемент))<> 0 Тогда
							ПерейтиКСледующему = Истина;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ПерейтиКСледующему Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗаказыОтборАдресНЕ И НЕ ПустаяСтрока(ЗаказыОтборАдрес) Тогда
				
				Если СтрНайти(Врег(ВыборкаСсылка.АдресДоставки), ВРег(ЗаказыОтборАдрес))<>0 Тогда
					Продолжить;
				КонецЕсли;
							
			КонецЕсли;
					
			
			//}ЭР Несторук С.И.
			
			//ЭР Несторук С.И. 01.03.2017 11:31:29 {
			//Самовывозы не пускаем в РЗ
			//03.10.2017 - теперь пускаем...
			Если ВыборкаСсылка.ВидДоставки = ЗаказыОтборВидДоставки И ЗаказыОтборВидДоставкиНЕ Тогда
				Продолжить;
			КонецЕсли;
			//}ЭР Несторук С.И.
			СтрЗаказ = Объект.Заказы.Добавить();			
			ЗаполнитьЗначенияСвойств(СтрЗаказ, ВыборкаСсылка);
			//ЭР Несторук С.И. 02.03.2017 22:48:16 {
			Если ВыборкаСсылка.ВидДоставки = Перечисления.ES_ВидыДоставки.ДвериДвери
				И ВыборкаСсылка.ВидЗабора = Перечисления.ES_ВидыЗабора.Упрощенный Тогда
				СтрЗаказ.Аббревиатура			=  "(У)";
				СтрЗаказ.АдресДоставки = "" + ВыборкаСсылка.ЗаборАдрес + " / " + ВыборкаСсылка.АдресДоставки;
			КонецЕсли;
			//}ЭР Несторук С.И.
			Выборка = ВыборкаСсылка.Выбрать();
			
			Если ВыборкаСсылка.ПредставлениеГрузов = Перечисления.ES_ПредставлениеГрузов.Места Тогда
				Пока Выборка.Следующий() Цикл
					Если НЕ ЗначениеЗаполнено(Выборка.МестоКлючСтроки) Тогда
						Продолжить;
					КонецЕсли; 
					
					СтрМеста = Объект.ЗаказыСписокГрузов.Добавить();
					СтрМеста.ДокументДоставки 	= ВыборкаСсылка.ДокументДоставки;
					СтрМеста.НомерНакладной 	= ВыборкаСсылка.НомерНакладной;
					СтрМеста.НомерСтрокиВЗаказе = Выборка.МестоНомерСтроки;
					СтрМеста.КлючСтроки 		= Выборка.МестоКлючСтроки;
					СтрМеста.Вес 				= Выборка.МестоВес;
					СтрМеста.Высота 			= Выборка.МестоВысота;
					СтрМеста.Длина 				= Выборка.МестоДлина;
					СтрМеста.Ширина 			= Выборка.МестоШирина;
					СтрМеста.НППлан 			= Выборка.МестоНППлан;
					СтрМеста.ОбъемныйВес 		= Выборка.МестоОбъемныйВес;
					СтрМеста.ОписаниеГруза 		= Выборка.МестоОписаниеГруза;
					СтрМеста.Страховка 			= Выборка.МестоСтраховка;
					СтрМеста.ТипГруза 			= Выборка.МестоТипГруза;
				КонецЦикла; 
			КонецЕсли; 
			
			Если ВыборкаСсылка.ПредставлениеГрузов = Перечисления.ES_ПредставлениеГрузов.Запасы Тогда
				Пока Выборка.Следующий() Цикл
					Если НЕ ЗначениеЗаполнено(Выборка.ЗапасНоменклатура) Тогда
						Продолжить;
					КонецЕсли; 

					СтрЗапас = Объект.ЗаказыГрузы.Добавить();
					СтрЗапас.ДокументДоставки 	= ВыборкаСсылка.ДокументДоставки;
					СтрЗапас.НомерНакладной 	= ВыборкаСсылка.НомерНакладной;
					СтрЗапас.НомерСтрокиВЗаказе = Выборка.ЗапасНомерСтроки;
					СтрЗапас.Номенклатура 		= Выборка.ЗапасНоменклатура;
					СтрЗапас.Характеристика 	= Выборка.ЗапасХарактеристика;
					СтрЗапас.Партия 			= Выборка.ЗапасПартия;
					СтрЗапас.Количество 		= Выборка.ЗапасКоличество;
					СтрЗапас.ЕдиницаИзмерения 	= Выборка.ЗапасЕдиницаИзмерения;
					СтрЗапас.Цена 				= Выборка.ЗапасЦена;
					СтрЗапас.ПроцентСкидкиНаценки = Выборка.ЗапасПроцентСкидкиНаценки;
					СтрЗапас.НППлан 			= Выборка.ЗапасНППлан;
					СтрЗапас.Содержание 		= Выборка.ЗапасСодержание;
					//ЕФСОЛ Несторук 07-11-16 +
					СтрЗапас.Вес		 		= Выборка.ЗапасВес;
					СтрЗапас.Объем		 		= Выборка.ЗапасОбъем;
					СтрЗапас.ОбъемныйВес		= Выборка.ЗапасОбъемныйВес;
					СтрЗапас.ОбьявленнаяСтоимость	= Выборка.ЗапасОбьявленнаяСтоимость;
					СтрЗапас.Опасность	 		= Выборка.ЗапасОпасность;
					СтрЗапас.Артикул			= Выборка.ЗапасАртикул;
					СтрЗапас.Штрихкод			= Выборка.ЗапасШтрихкод;
					//ЕФСОЛ Несторук 07-11-16 -	
				КонецЦикла; 
			КонецЕсли; 
		КонецЦикла;
		
		// Установить текующей строкой первую
		Если Объект.Заказы.Количество() > 0 Тогда
			Элементы.Заказы.ТекущаяСтрока = Объект.Заказы[0].ПолучитьИдентификатор();
		КонецЕсли;                               

	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПриАктивизацииСтроки(Элемент)
		
	ОтборСтрокЗаказыТчГрузы(Элементы.Заказы.ТекущиеДанные);

КонецПроцедуры

&НаСервере
// Процедура заполняет табличные части на вкладке Планы
Процедура ЗаполнитьПланамиДоставкиНаСервере()

	Объект.ПланыДоставки.Очистить();
	Объект.ПланыДоставкиЗаказы.Очистить();
	Объект.ПланыДоставкиСписокГрузов.Очистить();
	Объект.ПланыДоставкиГрузы.Очистить();

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ES_ПланДоставкиЗаказы.Ссылка КАК ПланДоставкиСсылка,
		|	ES_ПланДоставкиЗаказы.ДокументДоставки КАК ДокументыДоставки,
		|	ES_ПланДоставкиЗаказы.СвязанныйДокумент,
		|	ES_ПланДоставкиЗаказы.НомерСтроки КАК НомерСтрокиВПлане,
		|	ЕСТЬNULL(ES_ПланДоставки.Подрядчик, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Подрядчик,
		|	ES_ПланДоставкиЗаказы.ВидДоставки,
		|	ES_ПланДоставкиЗаказы.ВидЗабора,
		|	ES_ПланДоставки.Комментарий
		|ПОМЕСТИТЬ ВТ_ТаблицаДляОтбора
		|ИЗ
		|	Документ.ES_ПланДоставки КАК ES_ПланДоставки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ES_ПланДоставки.Заказы КАК ES_ПланДоставкиЗаказы
		|		ПО ES_ПланДоставки.Ссылка = ES_ПланДоставкиЗаказы.Ссылка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &Курьер = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ES_ПланДоставки.Курьер = &Курьер
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ТранспортноеСредство = ЗНАЧЕНИЕ(Справочник.ТранспортныеСредства.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ES_ПланДоставки.ТранспортноеСредство = &ТранспортноеСредство
		|		КОНЕЦ
		|	И ES_ПланДоставки.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И НЕ ES_ПланДоставки.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаДляОтбора.ПланДоставкиСсылка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ТаблицаДляОтбора.ДокументыДоставки) КАК ПланКоличествоЗаказов
		|ПОМЕСТИТЬ ВТ_КоличествоЗаказов
		|ИЗ
		|	ВТ_ТаблицаДляОтбора КАК ВТ_ТаблицаДляОтбора
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ТаблицаДляОтбора.ПланДоставкиСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ES_ОтчетОДоставке.ПланДоставки,
		|	ES_ОтчетОДоставке.Ссылка КАК ОтчетОДоставке,
		|	ES_ОтчетОДоставке.Обработан КАК ОтчетОДоставкеОбработан
		|ПОМЕСТИТЬ ВТ_ПланОтчет
		|ИЗ
		|	Документ.ES_ОтчетОДоставке КАК ES_ОтчетОДоставке
		|ГДЕ
		|	ES_ОтчетОДоставке.ПланДоставки В
		|			(ВЫБРАТЬ
		|				ВТ_ТаблицаДляОтбора.ПланДоставкиСсылка
		|			ИЗ
		|				ВТ_ТаблицаДляОтбора КАК ВТ_ТаблицаДляОтбора)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	2 КАК Порядок,
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказ КАК ДокументДоставки,
		|	ES_ДанныеПоЗаказамСрезПоследних.Подтвержден,
		|	ES_ДанныеПоЗаказамСрезПоследних.НомерНакладной,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВхНакладная,
		|	ES_ДанныеПоЗаказамСрезПоследних.КоличествоМест,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВидДоставки,
		|	ES_ДанныеПоЗаказамСрезПоследних.ДатаДоставки,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВремяДоставкиС,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВремяДоставкиПо,
		|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийВес,
		|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийОбъемныйВес,
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказчик,
		|	ES_ДанныеПоЗаказамСрезПоследних.СправочноЗаказчик,
		|	ES_ДанныеПоЗаказамСрезПоследних.АдресДоставки,
		|	ES_ДанныеПоЗаказамСрезПоследних.АдресДоставкиДолгота,
		|	ES_ДанныеПоЗаказамСрезПоследних.АдресДоставкиШирота,
		|	ES_ДанныеПоЗаказамСрезПоследних.Получатель,
		|	ES_ДанныеПоЗаказамСрезПоследних.ПредставлениеГрузов,
		|	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа,
		|	ES_СостоянияЗаказовСрезПоследних.СостояниеЗаказа,
		|	ЕСТЬNULL(ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Значение, ES_ДанныеПоЗаказамСрезПоследних.Комментарий) КАК Комментарий,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВидЗабора,
		|	ES_ДанныеПоЗаказамСрезПоследних.СрочностьДоставки,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВидОплаты,
		|	ES_ДанныеПоЗаказамСрезПоследних.Возврат,
		|	ES_ЗаказыНаСкладеОстатки.Склад,
		|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийОбъем,
		|	ES_ДанныеПоЗаказамСрезПоследних.Направление,
		|	ES_ДанныеПоЗаказамСрезПоследних.ДоУточнения
		|ПОМЕСТИТЬ ВТ_ДанныеПоДокументам
		|ИЗ
		|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(
		|			,
		|			Заказ В
		|				(ВЫБРАТЬ
		|					ВТ_ТаблицаДляОтбора.ДокументыДоставки
		|				ИЗ
		|					ВТ_ТаблицаДляОтбора КАК ВТ_ТаблицаДляОтбора)) КАК ES_ДанныеПоЗаказамСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(
		|				,
		|				Заказ В
		|					(ВЫБРАТЬ
		|						ВТ_ТаблицаДляОтбора.ДокументыДоставки
		|					ИЗ
		|						ВТ_ТаблицаДляОтбора КАК ВТ_ТаблицаДляОтбора)) КАК ES_СтатусыЗаказовСрезПоследних
		|		ПО ES_ДанныеПоЗаказамСрезПоследних.Заказ = ES_СтатусыЗаказовСрезПоследних.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
		|				,
		|				Заказ В
		|						(ВЫБРАТЬ
		|							ВТ_ТаблицаДляОтбора.ДокументыДоставки
		|						ИЗ
		|							ВТ_ТаблицаДляОтбора КАК ВТ_ТаблицаДляОтбора)
		|					И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Комментарий)) КАК ES_ИзменяемыеРеквизитыЗаказовСрезПоследних
		|		ПО ES_ДанныеПоЗаказамСрезПоследних.Заказ = ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СостоянияЗаказов.СрезПоследних(
		|				,
		|				Заказ В
		|					(ВЫБРАТЬ
		|						ВТ_ТаблицаДляОтбора.ДокументыДоставки
		|					ИЗ
		|						ВТ_ТаблицаДляОтбора КАК ВТ_ТаблицаДляОтбора)) КАК ES_СостоянияЗаказовСрезПоследних
		|		ПО ES_ДанныеПоЗаказамСрезПоследних.Заказ = ES_СостоянияЗаказовСрезПоследних.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ES_ЗаказыНаСкладе.Остатки(
		|				,
		|				Заказ В
		|					(ВЫБРАТЬ
		|						ВТ_ТаблицаДляОтбора.ДокументыДоставки
		|					ИЗ
		|						ВТ_ТаблицаДляОтбора КАК ВТ_ТаблицаДляОтбора)) КАК ES_ЗаказыНаСкладеОстатки
		|		ПО ES_ДанныеПоЗаказамСрезПоследних.Заказ = ES_ЗаказыНаСкладеОстатки.Заказ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1,
		|	ES_ДанныеПоЗаборамСрезПоследних.Забор,
		|	ES_ДанныеПоЗаборамСрезПоследних.Подтвержден,
		|	ES_ДанныеПоЗаборамСрезПоследних.НомерНакладной,
		|	"""",
		|	ES_ДанныеПоЗаборамСрезПоследних.КоличествоМест,
		|	ES_ДанныеПоЗаборамСрезПоследних.ВидЗабора,
		|	ES_ДанныеПоЗаборамСрезПоследних.ДатаЗабора,
		|	ES_ДанныеПоЗаборамСрезПоследних.ВремяЗабораС,
		|	ES_ДанныеПоЗаборамСрезПоследних.ВремяЗабораПо,
		|	ES_ДанныеПоЗаборамСрезПоследних.ОбщийВес,
		|	ES_ДанныеПоЗаборамСрезПоследних.ОбщийОбъемныйВес,
		|	ES_ДанныеПоЗаборамСрезПоследних.Заказчик,
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
		|	ES_ДанныеПоЗаборамСрезПоследних.Адрес,
		|	ES_ДанныеПоЗаборамСрезПоследних.АдресДолгота,
		|	ES_ДанныеПоЗаборамСрезПоследних.АдресШирота,
		|	"""",
		|	ES_ДанныеПоЗаборамСрезПоследних.ПредставлениеГрузов,
		|	ES_СтатусыЗаборовСрезПоследних.СтатусЗабора,
		|	NULL,
		|	ЕСТЬNULL(ES_ИзменяемыеРеквизитыЗаборовСрезПоследних.Значение, ES_ДанныеПоЗаборамСрезПоследних.Комментарий),
		|	ES_ДанныеПоЗаборамСрезПоследних.ВидЗабора,
		|	ЗНАЧЕНИЕ(Перечисление.ES_СрочностьДоставки.ПустаяСсылка),
		|	ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.ПустаяСсылка),
		|	ЛОЖЬ,
		|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка),
		|	ES_ДанныеПоЗаборамСрезПоследних.ОбщийОбъем,
		|	ЗНАЧЕНИЕ(Справочник.ES_Направления.ПустаяСсылка),
		|	ЛОЖЬ
		|ИЗ
		|	РегистрСведений.ES_ДанныеПоЗаборам.СрезПоследних(
		|			,
		|			Забор В
		|				(ВЫБРАТЬ
		|					ВТ_ТаблицаДляОтбора.ДокументыДоставки
		|				ИЗ
		|					ВТ_ТаблицаДляОтбора КАК ВТ_ТаблицаДляОтбора)) КАК ES_ДанныеПоЗаборамСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаборов.СрезПоследних(
		|				,
		|				Забор В
		|					(ВЫБРАТЬ
		|						ВТ_ТаблицаДляОтбора.ДокументыДоставки
		|					ИЗ
		|						ВТ_ТаблицаДляОтбора КАК ВТ_ТаблицаДляОтбора)) КАК ES_СтатусыЗаборовСрезПоследних
		|		ПО ES_ДанныеПоЗаборамСрезПоследних.Забор = ES_СтатусыЗаборовСрезПоследних.Забор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаборов.СрезПоследних(
		|				,
		|				Забор В
		|						(ВЫБРАТЬ
		|							ВТ_ТаблицаДляОтбора.ДокументыДоставки
		|						ИЗ
		|							ВТ_ТаблицаДляОтбора КАК ВТ_ТаблицаДляОтбора)
		|					И РеквизитЗабора = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗабора.Комментарий)) КАК ES_ИзменяемыеРеквизитыЗаборовСрезПоследних
		|		ПО ES_ДанныеПоЗаборамСрезПоследних.Забор = ES_ИзменяемыеРеквизитыЗаборовСрезПоследних.Забор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказ КАК ЗаказДляГрузов
		|ПОМЕСТИТЬ ВТ_СписокЗказовДляГрузов
		|ИЗ
		|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(
		|			,
		|			Заказ В
		|				(ВЫБРАТЬ
		|					ВТ_ТаблицаДляОтбора.ДокументыДоставки
		|				ИЗ
		|					ВТ_ТаблицаДляОтбора КАК ВТ_ТаблицаДляОтбора)) КАК ES_ДанныеПоЗаказамСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НЕ ES_ДанныеПоЗаборамСрезПоследних.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|			ТОГДА ES_ДанныеПоЗаборамСрезПоследних.ДокументОснование
		|		ИНАЧЕ ES_ДанныеПоЗаборамСрезПоследних.Забор
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.ES_ДанныеПоЗаборам.СрезПоследних(
		|			,
		|			Забор В
		|				(ВЫБРАТЬ
		|					ВТ_ТаблицаДляОтбора.ДокументыДоставки
		|				ИЗ
		|					ВТ_ТаблицаДляОтбора КАК ВТ_ТаблицаДляОтбора)) КАК ES_ДанныеПоЗаборамСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ES_ГрузыВЗаказахСрезПоследних.НомерСтроки,
		|	ES_ГрузыВЗаказахСрезПоследних.ДокументДоставки,
		|	ES_ГрузыВЗаказахСрезПоследних.КлючСтроки,
		|	ES_ГрузыВЗаказахСрезПоследних.ТипГруза,
		|	ES_ГрузыВЗаказахСрезПоследних.Вес,
		|	ES_ГрузыВЗаказахСрезПоследних.ОбъемныйВес,
		|	ES_ГрузыВЗаказахСрезПоследних.Высота,
		|	ES_ГрузыВЗаказахСрезПоследних.Длина,
		|	ES_ГрузыВЗаказахСрезПоследних.Ширина,
		|	ES_ГрузыВЗаказахСрезПоследних.НППлан,
		|	ES_ГрузыВЗаказахСрезПоследних.Страховка,
		|	ES_ГрузыВЗаказахСрезПоследних.ОписаниеГруза
		|ПОМЕСТИТЬ ВТ_ГрузыМеста
		|ИЗ
		|	РегистрСведений.ES_ГрузыВЗаказах.СрезПоследних(
		|			,
		|			ДокументДоставки В
		|				(ВЫБРАТЬ
		|					ВТ_СписокЗказовДляГрузов.ЗаказДляГрузов
		|				ИЗ
		|					ВТ_СписокЗказовДляГрузов КАК ВТ_СписокЗказовДляГрузов)) КАК ES_ГрузыВЗаказахСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ES_НоменклатураВЗаказахСрезПоследних.НомерСтроки,
		|	ES_НоменклатураВЗаказахСрезПоследних.ДокументДоставки,
		|	ES_НоменклатураВЗаказахСрезПоследних.Номенклатура,
		|	ES_НоменклатураВЗаказахСрезПоследних.Характеристика,
		|	ES_НоменклатураВЗаказахСрезПоследних.Партия,
		|	ES_НоменклатураВЗаказахСрезПоследних.ЕдиницаИзмерения,
		|	ES_НоменклатураВЗаказахСрезПоследних.Количество,
		|	ES_НоменклатураВЗаказахСрезПоследних.НППлан,
		|	ES_НоменклатураВЗаказахСрезПоследних.Содержание,
		|	ES_НоменклатураВЗаказахСрезПоследних.Цена,
		|	ES_НоменклатураВЗаказахСрезПоследних.ПроцентСкидкиНаценки,
		|	ES_НоменклатураВЗаказахСрезПоследних.Вес,
		|	ES_НоменклатураВЗаказахСрезПоследних.Объем,
		|	ES_НоменклатураВЗаказахСрезПоследних.ОбъемныйВес,
		|	ES_НоменклатураВЗаказахСрезПоследних.ОбьявленнаяСтоимость,
		|	ES_НоменклатураВЗаказахСрезПоследних.Опасность,
		|	ES_НоменклатураВЗаказахСрезПоследних.Артикул,
		|	ES_НоменклатураВЗаказахСрезПоследних.Штрихкод
		|ПОМЕСТИТЬ ВТ_ГрузыЗапасы
		|ИЗ
		|	РегистрСведений.ES_НоменклатураВЗаказах.СрезПоследних(
		|			,
		|			ДокументДоставки В
		|				(ВЫБРАТЬ
		|					ВТ_СписокЗказовДляГрузов.ЗаказДляГрузов
		|				ИЗ
		|					ВТ_СписокЗказовДляГрузов КАК ВТ_СписокЗказовДляГрузов)) КАК ES_НоменклатураВЗаказахСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаДляОтбора.ПланДоставкиСсылка КАК ПланДоставкиСсылка,
		|	ВТ_ТаблицаДляОтбора.ПланДоставкиСсылка.Проведен КАК ПланДоставкиПроведен,
		|	ВТ_ТаблицаДляОтбора.ПланДоставкиСсылка.Номер КАК ПланДоставкиНомер,
		|	ВТ_ТаблицаДляОтбора.ПланДоставкиСсылка.Дата КАК ПланДоставкиДата,
		|	ВТ_ТаблицаДляОтбора.ПланДоставкиСсылка.Курьер КАК ПланДоставкиКурьер,
		|	ВТ_ТаблицаДляОтбора.ПланДоставкиСсылка.ТранспортноеСредство КАК ПланДоставкиТранспортноеСредство,
		|	ВТ_ТаблицаДляОтбора.ПланДоставкиСсылка.Подтвержден КАК ПланДоставкиПодтвержден,
		|	ВТ_ТаблицаДляОтбора.Подрядчик КАК ПланДоставкиПодрядчик,
		|	ЕСТЬNULL(ВТ_КоличествоЗаказов.ПланКоличествоЗаказов, 0) КАК ПланДоставкиКоличествоЗаказов,
		|	ВТ_ТаблицаДляОтбора.Комментарий КАК ПланДоставкиКомментарий,
		|	ЕСТЬNULL(ВТ_ПланОтчет.ОтчетОДоставке, НЕОПРЕДЕЛЕНО) КАК ОтчетОДоставке,
		|	ЕСТЬNULL(ВТ_ПланОтчет.ОтчетОДоставкеОбработан, ЛОЖЬ) КАК ОтчетОДоставкеОбработан,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.Порядок, 3) КАК Порядок,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.ДокументДоставки, НЕОПРЕДЕЛЕНО) КАК ДокументДоставки,
		|	ЕСТЬNULL(ВТ_ТаблицаДляОтбора.СвязанныйДокумент, НЕОПРЕДЕЛЕНО) КАК СвязанныйДокумент,
		|	ЕСТЬNULL(ВТ_ТаблицаДляОтбора.НомерСтрокиВПлане, 0) КАК НомерСтрокиВПлане,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.АдресДоставки, """") КАК АдресДоставки,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.АдресДоставкиДолгота, 0) КАК АдресДоставкиДолгота,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.АдресДоставкиШирота, 0) КАК АдресДоставкиШирота,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.ВидДоставки, ЗНАЧЕНИЕ(Перечисление.ES_ВидыДоставки.ПустаяСсылка)) КАК ВидДоставки,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.ВидЗабора, НЕОПРЕДЕЛЕНО) КАК ВидСвязанногоЗабора,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.ВремяДоставкиС, ДАТАВРЕМЯ(1, 1, 1)) КАК ВремяДоставкиС,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.ВремяДоставкиПо, ДАТАВРЕМЯ(1, 1, 1)) КАК ВремяДоставкиПо,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.ДатаДоставки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДоставки,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.КоличествоМест, 0) КАК КоличествоМест,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.Получатель, """") КАК Получатель,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.Комментарий, """") КАК Комментарий,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.ВхНакладная, """") КАК ВхНакладная,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.НомерНакладной, """") КАК НомерНакладной,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.ОбщийВес, 0) КАК ОбщийВес,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.ОбщийОбъем, 0) КАК ОбщийОбъем,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.ОбщийОбъемныйВес, 0) КАК ОбщийОбъемныйВес,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.Заказчик, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Заказчик,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.СправочноЗаказчик, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК СправочноЗаказчик,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.Подтвержден, ЛОЖЬ) КАК Подтвержден,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.ПредставлениеГрузов, ЗНАЧЕНИЕ(Перечисление.ES_ПредставлениеГрузов.Места)) КАК ПредставлениеГрузов,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.СтатусЗаказа, НЕОПРЕДЕЛЕНО) КАК СтатусДокумента,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.СостояниеЗаказа, НЕОПРЕДЕЛЕНО) КАК СостояниеЗаказа,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.СрочностьДоставки, ЗНАЧЕНИЕ(Перечисление.ES_СрочностьДоставки.ПустаяСсылка)) КАК СрочностьДоставки,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.Склад, ЗНАЧЕНИЕ(справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК Склад,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТ_ДанныеПоДокументам.ДокументДоставки, ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) ССЫЛКА Документ.ES_ЗаборГруза
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоЗаборГруза,
		|	ЕСТЬNULL(ВТ_ГрузыМеста.НомерСтроки, 0) КАК МестоНомерСтроки,
		|	ЕСТЬNULL(ВТ_ГрузыМеста.КлючСтроки, """") КАК МестоКлючСтроки,
		|	ЕСТЬNULL(ВТ_ГрузыМеста.ТипГруза, ЗНАЧЕНИЕ(Справочник.ES_ТипыГрузов.ПустаяСсылка)) КАК МестоТипГруза,
		|	ЕСТЬNULL(ВТ_ГрузыМеста.Вес, 0) КАК МестоВес,
		|	ЕСТЬNULL(ВТ_ГрузыМеста.ОбъемныйВес, 0) КАК МестоОбъемныйВес,
		|	ЕСТЬNULL(ВТ_ГрузыМеста.Высота, 0) КАК МестоВысота,
		|	ЕСТЬNULL(ВТ_ГрузыМеста.Длина, 0) КАК МестоДлина,
		|	ЕСТЬNULL(ВТ_ГрузыМеста.Ширина, 0) КАК МестоШирина,
		|	ЕСТЬNULL(ВТ_ГрузыМеста.НППлан, 0) КАК МестоНППлан,
		|	ЕСТЬNULL(ВТ_ГрузыМеста.Страховка, 0) КАК МестоСтраховка,
		|	ЕСТЬNULL(ВТ_ГрузыМеста.ОписаниеГруза, """") КАК МестоОписаниеГруза,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.НомерСтроки, 0) КАК ЗапасНомерСтроки,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ЗапасНоменклатура,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЗапасХарактеристика,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Партия, ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)) КАК ЗапасПартия,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЗапасЕдиницаИзмерения,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Количество, 0) КАК ЗапасКоличество,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.НППлан, 0) КАК ЗапасНППлан,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Содержание, """") КАК ЗапасСодержание,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Цена, 0) КАК ЗапасЦена,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.ПроцентСкидкиНаценки, 0) КАК ЗапасПроцентСкидкиНаценки,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Вес, 0) КАК ЗапасВес,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Объем, 0) КАК ЗапасОбъем,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.ОбъемныйВес, 0) КАК ЗапасОбъемныйВес,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.ОбьявленнаяСтоимость, 0) КАК ЗапасОбьявленнаяСтоимость,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Опасность, ЛОЖЬ) КАК ЗапасОпасность,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Артикул, """") КАК ЗапасАртикул,
		|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Штрихкод, """") КАК ЗапасШтрихкод,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.ВидОплаты, ЗНАЧЕНИЕ(Перечисление.ТипыденежныхСредств.ПустаяСсылка)) КАК ВидОплаты,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.Возврат, ЛОЖЬ) КАК Возврат,
		|	ЕСТЬNULL(ВТ_ДанныеПоДокументам.ВидЗабора, ЗНАЧЕНИЕ(Перечисление.ES_ВидыЗабора.ПустаяСсылка)) КАК ВидЗабора,
		|	ВТ_ДанныеПоДокументам.Направление КАК Направление,
		|	ВТ_ДанныеПоДокументам.ДоУточнения КАК ДоУточнения
		|ИЗ
		|	ВТ_ТаблицаДляОтбора КАК ВТ_ТаблицаДляОтбора
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПланОтчет КАК ВТ_ПланОтчет
		|		ПО ВТ_ТаблицаДляОтбора.ПланДоставкиСсылка = ВТ_ПланОтчет.ПланДоставки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоЗаказов КАК ВТ_КоличествоЗаказов
		|		ПО ВТ_ТаблицаДляОтбора.ПланДоставкиСсылка = ВТ_КоличествоЗаказов.ПланДоставкиСсылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеПоДокументам КАК ВТ_ДанныеПоДокументам
		|		ПО ВТ_ТаблицаДляОтбора.ДокументыДоставки = ВТ_ДанныеПоДокументам.ДокументДоставки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГрузыМеста КАК ВТ_ГрузыМеста
		|		ПО (ВЫБОР
		|				КОГДА ВТ_ТаблицаДляОтбора.ДокументыДоставки ССЫЛКА Документ.ES_ЗаборГруза
		|						И НЕ ВТ_ТаблицаДляОтбора.СвязанныйДокумент = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|					ТОГДА ВТ_ТаблицаДляОтбора.СвязанныйДокумент = ВТ_ГрузыМеста.ДокументДоставки
		|				ИНАЧЕ ВТ_ТаблицаДляОтбора.ДокументыДоставки = ВТ_ГрузыМеста.ДокументДоставки
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГрузыЗапасы КАК ВТ_ГрузыЗапасы
		|		ПО (ВЫБОР
		|				КОГДА ВТ_ТаблицаДляОтбора.ДокументыДоставки ССЫЛКА Документ.ES_ЗаборГруза
		|						И НЕ ВТ_ТаблицаДляОтбора.СвязанныйДокумент = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|					ТОГДА ВТ_ТаблицаДляОтбора.СвязанныйДокумент = ВТ_ГрузыЗапасы.ДокументДоставки
		|				ИНАЧЕ ВТ_ТаблицаДляОтбора.ДокументыДоставки = ВТ_ГрузыЗапасы.ДокументДоставки
		|			КОНЕЦ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	НомерСтрокиВПлане,
		|	МестоНомерСтроки,
		|	ЗапасНомерСтроки
		|ИТОГИ
		|	МАКСИМУМ(ПланДоставкиПроведен),
		|	МАКСИМУМ(ПланДоставкиНомер),
		|	МАКСИМУМ(ПланДоставкиДата),
		|	МАКСИМУМ(ПланДоставкиКурьер),
		|	МАКСИМУМ(ПланДоставкиТранспортноеСредство),
		|	МАКСИМУМ(ПланДоставкиПодтвержден),
		|	МАКСИМУМ(ПланДоставкиПодрядчик),
		|	МАКСИМУМ(ПланДоставкиКоличествоЗаказов),
		|	МАКСИМУМ(ПланДоставкиКомментарий),
		|	МАКСИМУМ(ОтчетОДоставке),
		|	МАКСИМУМ(ОтчетОДоставкеОбработан),
		|	МАКСИМУМ(Порядок),
		|	МАКСИМУМ(СвязанныйДокумент),
		|	МАКСИМУМ(НомерСтрокиВПлане),
		|	МАКСИМУМ(АдресДоставки),
		|	МАКСИМУМ(АдресДоставкиДолгота),
		|	МАКСИМУМ(АдресДоставкиШирота),
		|	МАКСИМУМ(ВидДоставки),
		|	МАКСИМУМ(ВидСвязанногоЗабора),
		|	МАКСИМУМ(ВремяДоставкиС),
		|	МАКСИМУМ(ВремяДоставкиПо),
		|	МАКСИМУМ(ДатаДоставки),
		|	МАКСИМУМ(КоличествоМест),
		|	МАКСИМУМ(Получатель),
		|	МАКСИМУМ(Комментарий),
		|	МАКСИМУМ(ВхНакладная),
		|	МАКСИМУМ(НомерНакладной),
		|	МАКСИМУМ(ОбщийВес),
		|	МАКСИМУМ(ОбщийОбъем),
		|	МАКСИМУМ(ОбщийОбъемныйВес),
		|	МАКСИМУМ(Заказчик),
		|	МАКСИМУМ(СправочноЗаказчик),
		|	МАКСИМУМ(Подтвержден),
		|	МАКСИМУМ(ПредставлениеГрузов),
		|	МАКСИМУМ(СтатусДокумента),
		|	МАКСИМУМ(СостояниеЗаказа),
		|	МАКСИМУМ(СрочностьДоставки),
		|	МАКСИМУМ(Склад),
		|	МАКСИМУМ(ЭтоЗаборГруза),
		|	МАКСИМУМ(ВидОплаты),
		|	МАКСИМУМ(Возврат),
		|	МАКСИМУМ(ВидЗабора),
		|	МАКСИМУМ(Направление),
		|	МАКСИМУМ(ДоУточнения)
		|ПО
		|	ПланДоставкиСсылка,
		|	ДокументДоставки";

	Запрос.УстановитьПараметр("ДатаНачала", ПДОтборСтандартныйПериод.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПДОтборСтандартныйПериод.ДатаОкончания);

	Запрос.УстановитьПараметр("Курьер", ПДОтборКурьер);
	Запрос.УстановитьПараметр("ТранспортноеСредство", ПДОтборТранспорт);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаПланДоставки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ВыборкаПланДоставки.Следующий() Цикл
			
			// Заполнение ТЧ ПланыДоставки
			СтрокаПД = Объект.ПланыДоставки.Добавить();
			СтрокаПД.ПланДоставки 			= ВыборкаПланДоставки.ПланДоставкиСсылка;
			СтрокаПД.Подтвержден 			= ВыборкаПланДоставки.ПланДоставкиПодтвержден;
			СтрокаПД.Проведен 				= ВыборкаПланДоставки.ПланДоставкиПроведен;
			СтрокаПД.ДатаПланаДоставки 		= ВыборкаПланДоставки.ПланДоставкиДата;
			СтрокаПД.НомерПланаДоставки 	= ВыборкаПланДоставки.ПланДоставкиНомер;
			СтрокаПД.Курьер 				= ВыборкаПланДоставки.ПланДоставкиКурьер;
			СтрокаПД.ТранспортноеСредство 	= ВыборкаПланДоставки.ПланДоставкиТранспортноеСредство;
			СтрокаПД.КоличествоЗаказов 		= ВыборкаПланДоставки.ПланДоставкиКоличествоЗаказов;
			СтрокаПД.ОтчетОДоставке 		= ВыборкаПланДоставки.ОтчетОДоставке;
			СтрокаПД.ОтчетОбработан 		= ВыборкаПланДоставки.ОтчетОДоставкеОбработан;
			СтрокаПД.Подрядчик				= ВыборкаПланДоставки.ПланДоставкиПодрядчик;
			СтрокаПД.Комментарий			= ВыборкаПланДоставки.ПланДоставкиКомментарий;
			
			ВыборкаЗаказ = ВыборкаПланДоставки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаЗаказ.Следующий() Цикл
				
				СтрокаЗаказы = Объект.ПланыДоставкиЗаказы.Добавить();
				СтрокаЗаказы.ПланДоставки 			= ВыборкаЗаказ.ПланДоставкиСсылка;
				СтрокаЗаказы.ДокументДоставки 		= ВыборкаЗаказ.ДокументДоставки;
				СтрокаЗаказы.СвязанныйДокумент 		= ВыборкаЗаказ.СвязанныйДокумент;
				СтрокаЗаказы.АдресДоставки 			= ВыборкаЗаказ.АдресДоставки;
				СтрокаЗаказы.АдресДоставкиДолгота 	= ВыборкаЗаказ.АдресДоставкиДолгота;
				СтрокаЗаказы.АдресДоставкиШирота 	= ВыборкаЗаказ.АдресДоставкиШирота;
				СтрокаЗаказы.ВидДоставки 			= ВыборкаЗаказ.ВидДоставки;
				СтрокаЗаказы.ВидСвязанногоЗабора 	= ВыборкаЗаказ.ВидСвязанногоЗабора;
				СтрокаЗаказы.ДатаДоставки 			= ВыборкаЗаказ.ДатаДоставки;
				СтрокаЗаказы.ВремяДоставкиС 		= ВыборкаЗаказ.ВремяДоставкиС;
				СтрокаЗаказы.ВремяДоставкиПо 		= ВыборкаЗаказ.ВремяДоставкиПо;
				СтрокаЗаказы.КоличествоМест			= ВыборкаЗаказ.КоличествоМест;
				СтрокаЗаказы.Получатель 			= ВыборкаЗаказ.Получатель;
				СтрокаЗаказы.Комментарий 			= ВыборкаЗаказ.Комментарий;
				СтрокаЗаказы.ВхНакладная 			= ВыборкаЗаказ.ВхНакладная;
				СтрокаЗаказы.НомерНакладной 		= ВыборкаЗаказ.НомерНакладной;
				СтрокаЗаказы.НомерСтрокиВПлане 		= ВыборкаЗаказ.НомерСтрокиВПлане;
				СтрокаЗаказы.ОбщийВес 				= ВыборкаЗаказ.ОбщийВес;
				СтрокаЗаказы.ОбщийОбъем 			= ВыборкаЗаказ.ОбщийОбъем;
				СтрокаЗаказы.ОбщийОбъемныйВес 		= ВыборкаЗаказ.ОбщийОбъемныйВес;
				СтрокаЗаказы.Заказчик 				= ВыборкаЗаказ.Заказчик;
				СтрокаЗаказы.СправочноЗаказчик 		= ВыборкаЗаказ.СправочноЗаказчик;
				СтрокаЗаказы.Подтвержден 			= ВыборкаЗаказ.Подтвержден;
				СтрокаЗаказы.ПредставлениеГрузов 	= ВыборкаЗаказ.ПредставлениеГрузов;
				СтрокаЗаказы.СостояниеЗаказа 		= ВыборкаЗаказ.СостояниеЗаказа;                                                   
				СтрокаЗаказы.СрочностьДоставки 		= ВыборкаЗаказ.СрочностьДоставки;
				СтрокаЗаказы.СтатусДокумента 		= ВыборкаЗаказ.СтатусДокумента;
				СтрокаЗаказы.ЭтоЗаборГруза 			= ВыборкаЗаказ.ЭтоЗаборГруза;
				СтрокаЗаказы.ЦветМетки 			    = "";
				//ЕФСОЛ Несторук 21-11-16 +
				СтрокаЗаказы.ВидОплаты				= ВыборкаЗаказ.ВидОплаты;
				СтрокаЗаказы.Склад					= ВыборкаЗаказ.Склад;
				//ЕФСОЛ Несторук 21-11-16 -
				//ЭР Несторук С.И. 02.03.2017 23:00:24 {
				Если ВыборкаЗаказ.ВидДоставки = Перечисления.ES_ВидыДоставки.ДвериДвери
					И ВыборкаЗаказ.ВидЗабора = Перечисления.ES_ВидыЗабора.Упрощенный Тогда
					СтрокаЗаказы.Аббревиатура			=  "(У)";
				КонецЕсли;
				СтрокаЗаказы.ВидЗабора				= ВыборкаЗаказ.ВидЗабора;
				// ES_Савченко К.Р. 18.09.2017 +
				СтрокаЗаказы.ДоУточнения            = ВыборкаЗаказ.ДоУточнения;
				СтрокаЗаказы.Направление            = ВыборкаЗаказ.Направление;
				// ES_Савченко К.Р. 18.09.2017 +
			     //}ЭР Несторук С.И.
				
				Выборка = ВыборкаЗаказ.Выбрать();

				Если ВыборкаЗаказ.ПредставлениеГрузов = Перечисления.ES_ПредставлениеГрузов.Места Тогда
					
					Пока Выборка.Следующий() Цикл
						Если НЕ ЗначениеЗаполнено(Выборка.МестоКлючСтроки) Тогда
							Продолжить;
						КонецЕсли; 
						
						СтрокаМесто = Объект.ПланыДоставкиСписокГрузов.Добавить();
						СтрокаМесто.ДокументДоставки 	= ВыборкаЗаказ.ДокументДоставки;
						СтрокаМесто.НомерНакладной 		= ВыборкаЗаказ.НомерНакладной;
						СтрокаМесто.НомерСтрокиВЗаказе 	= Выборка.МестоНомерСтроки;
						СтрокаМесто.КлючСтроки 			= Выборка.МестоКлючСтроки;
						СтрокаМесто.Вес 				= Выборка.МестоВес;
						СтрокаМесто.Высота 				= Выборка.МестоВысота;
						СтрокаМесто.Длина 				= Выборка.МестоДлина;
						СтрокаМесто.Ширина 				= Выборка.МестоШирина;
						СтрокаМесто.НППлан 				= Выборка.МестоНППлан;
						СтрокаМесто.ОбъемныйВес 		= Выборка.МестоОбъемныйВес;
						СтрокаМесто.ОписаниеГруза 		= Выборка.МестоОписаниеГруза;
						СтрокаМесто.Страховка 			= Выборка.МестоСтраховка;
						СтрокаМесто.ТипГруза 			= Выборка.МестоТипГруза;
					КонецЦикла; 
				
				ИначеЕсли ВыборкаЗаказ.ПредставлениеГрузов = Перечисления.ES_ПредставлениеГрузов.Запасы Тогда
					
					Пока Выборка.Следующий() Цикл
						Если НЕ ЗначениеЗаполнено(Выборка.ЗапасНоменклатура) Тогда
							Продолжить;
						КонецЕсли; 
						
						СтрокаЗапас = Объект.ПланыДоставкиГрузы.Добавить();
						СтрокаЗапас.ДокументДоставки 		= ВыборкаЗаказ.ДокументДоставки;
						СтрокаЗапас.НомерНакладной 			= ВыборкаЗаказ.НомерНакладной;
						СтрокаЗапас.НомерСтрокиВЗаказе 		= Выборка.ЗапасНомерСтроки;
						СтрокаЗапас.Номенклатура 			= Выборка.ЗапасНоменклатура;
						СтрокаЗапас.Характеристика 			= Выборка.ЗапасХарактеристика;
						СтрокаЗапас.Партия 					= Выборка.ЗапасПартия;
						СтрокаЗапас.Количество 				= Выборка.ЗапасКоличество;
						СтрокаЗапас.ЕдиницаИзмерения 		= Выборка.ЗапасЕдиницаИзмерения;
						СтрокаЗапас.Цена 					= Выборка.ЗапасЦена;
						СтрокаЗапас.ПроцентСкидкиНаценки 	= Выборка.ЗапасПроцентСкидкиНаценки;
						СтрокаЗапас.НППлан 					= Выборка.ЗапасНППлан;
						СтрокаЗапас.Содержание 				= Выборка.ЗапасСодержание;
						СтрокаЗапас.Вес 					= Выборка.ЗапасВес;
						СтрокаЗапас.Объем 					= Выборка.ЗапасОбъем;
						СтрокаЗапас.Опасность 				= Выборка.ЗапасОпасность;
						СтрокаЗапас.ОбъемныйВес 			= Выборка.ЗапасОбъемныйВес;
						СтрокаЗапас.ОбьявленнаяСтоимость	= Выборка.ЗапасОбьявленнаяСтоимость;
						СтрокаЗапас.Артикул					= Выборка.ЗапасАртикул;
						СтрокаЗапас.Штрихкод				= Выборка.ЗапасШтрихкод;
					КонецЦикла; 
					
				КонецЕсли; 
				
			КонецЦикла;
		КонецЦикла;
	
		// Установить текующей строкой первую
		Если Объект.ПланыДоставки.Количество() > 0 Тогда
			Элементы.ПланыДоставки.ТекущаяСтрока = Объект.ПланыДоставки[0].ПолучитьИдентификатор();
		КонецЕсли; 
		
		Если Объект.ПланыДоставкиЗаказы.Количество() > 0 Тогда
			Элементы.ПланыДоставкиЗаказы.ТекущаяСтрока = Объект.ПланыДоставкиЗаказы[0].ПолучитьИдентификатор();
		КонецЕсли; 

	КонецЕсли;
	
	// Упорядочивание
	Объект.ПланыДоставки.Сортировать("ДатаПланаДоставки Убыв");
	Объект.ПланыДоставкиЗаказы.Сортировать("НомерСтрокиВПлане");

КонецПроцедуры

&НаКлиенте
Процедура СоздатьПланПоОтметкам(Команда)
	
	ОчиститьСообщения();
	
	МассивЗаказовДоставки = Объект.Заказы.НайтиСтроки(Новый Структура("Отметка", Истина));
	
	Если МассивЗаказовДоставки.Количество() = 0 Тогда
		Сообщить("Не отмечены документы доставки");
		Возврат;
	КонецЕсли;
	
	ФормаНовогоДокумента = ПолучитьФорму("Документ.ES_ПланДоставки.Форма.ФормаДокумента");
	ДанныеФормы = ФормаНовогоДокумента.Объект;
	
	СоздатьПланДоставкиПоОтметкам(ДанныеФормы);
	
	КопироватьДанныеФормы(ДанныеФормы, ФормаНовогоДокумента.Объект);
	ФормаНовогоДокумента.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПланДоставкиПоОтметкам(ДанныеФормы)
	//ЭР Несторук С.И. 25.02.2017 23:22:15 {
	СписокЗаказов = Новый Массив;
	Для каждого Стр ИЗ Объект.Заказы Цикл
		Если Стр.Отметка = Истина И Стр.ВидДоставки <> Перечисления.ES_ВидыДоставки.СкладСклад Тогда
			СписокЗаказов.Добавить(Стр.ДокументДоставки);
		КонецЕсли;		
	КонецЦикла;
	
	Если СписокЗаказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//}ЭР Несторук С.И.
	//СписокЗаказов = Объект.Заказы.Выгрузить(Новый Структура("Отметка", Истина), "ДокументДоставки").ВыгрузитьКолонку("ДокументДоставки");

	
		
	ДанныеФормы.Дата 			= ТекущаяДатаСеанса();
	ДанныеФормы.Автор 			= Пользователи.ТекущийПользователь();
	ДанныеФормы.Ответственный 	= Объект.Ответственный;
	
	ES_ОбщегоНазначения.ПолучитьДанныеПоЗаказамДляЗаполненияПланаДоставки(Тип("ДокументСсылка.ES_ПланДоставки"), ДанныеФормы, СписокЗаказов);
		
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
// Парметры:
//  * ОтметитьЗаказ - запоминать заказы, которые были отмечены до обновления, и отмечать их после обновления
Процедура ОбновитьСписокЗаказовНаФорме(ОтметитьЗаказы = Истина)
	
	Если НЕ ЗначениеЗаполнено(ЗаказыОтборСтандартныйПериод.ДатаНачала)
	 ИЛИ НЕ ЗначениеЗаполнено(ЗаказыОтборСтандартныйПериод.ДатаОкончания)
	Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан период отбора";
		Сообщение.Поле = ?(НЕ ЗначениеЗаполнено(ЗаказыОтборСтандартныйПериод.ДатаНачала), "ЗаказыОтборСтандартныйПериод.ДатаНачала", "ЗаказыОтборСтандартныйПериод.ДатаОкончания");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли; 
	
	Если ЗаказыОтборСтандартныйПериод.ДатаНачала > ЗаказыОтборСтандартныйПериод.ДатаОкончания Тогда
		ЗаказыОтборСтандартныйПериод.ДатаОкончания = КонецДня(ЗаказыОтборСтандартныйПериод.ДатаНачала);
	КонецЕсли; 
	
	НужноОбновитьКартуЗаказы = Истина;
	
	//ЕФСОЛ Несторук 28.07.2016 + 
	/////////////////////////////////
	// Запоминаем отмеченные заказы
	//Если ОтметитьЗаказы Тогда
	//	МассивОтмеченныхЗаказов = Объект.Заказы.НайтиСтроки(Новый Структура("Отметка", Истина));
	//КонецЕсли;
	////////////////////////////////
	Если ОтметитьЗаказы Тогда
		Для каждого Стр Из Объект.Заказы Цикл
			Если Стр.Отметка = Истина Тогда
				Если НЕ ЗначениеЗаполнено(ИстрияОтбора.НайтиСтроки(Новый Структура("ДокументДоставки", Стр.ДокументДоставки))) Тогда 
				НоваяСтрока = ИстрияОтбора.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//ЕФСОЛ Несторук 28.07.2016 -
	
	// Запоминаем текущую строку
	Если Объект.Заказы.Количество() > 0 Тогда
		ТекСтрока = Элементы.Заказы.ТекущиеДанные;
		ТекущийЗаказ = ?(ТекСтрока = Неопределено, Неопределено, ТекСтрока.ДокументДоставки);
	КонецЕсли; 
	
		
	// Заполнить вкладку Заказы
	ЗаполнитьЗаказамиНаСервере();
	
	//ЕФСОЛ Несторук 28.07.2016 + 
	/////////////////////////////////
	// Отмечаем заказы
	//Если ОтметитьЗаказы И МассивОтмеченныхЗаказов.Количество() > 0 Тогда
	//	Для каждого Элем Из МассивОтмеченныхЗаказов Цикл
	//		НайденнаяСтрока = Объект.Заказы.НайтиСтроки(Новый Структура("ДокументДоставки", Элем.ДокументДоставки));
	//		Если НайденнаяСтрока.Количество() > 0 Тогда
	//			НайденнаяСтрока[0].Отметка = Истина;
	//		КонецЕсли; 
	//	КонецЦикла; 
	//КонецЕсли;
	////////////////////////////////
	Если ОтметитьЗаказы Тогда
		
		Для каждого СтрЗаказ Из Объект.Заказы Цикл
			Если ЗначениеЗаполнено(ИстрияОтбора.НайтиСтроки(Новый Структура("ДокументДоставки", СтрЗаказ.ДокументДоставки))) Тогда
				СтрЗаказ.Отметка = Истина;
			КонецЕсли;
		КонецЦикла;
			
	КонецЕсли;
	//ЕФСОЛ Несторук 28.07.2016 -

	// Устанавливаем текущую строку
	Если Объект.Заказы.Количество() > 0 Тогда
		Если ТекущийЗаказ = Неопределено Тогда
			Элементы.Заказы.ТекущаяСтрока = Объект.Заказы[0].ПолучитьИдентификатор();
		Иначе
			НужнаяСтрока = Объект.Заказы.НайтиСтроки(Новый Структура("ДокументДоставки", ТекущийЗаказ));
			Если НужнаяСтрока.Количество() > 0 Тогда
				Элементы.Заказы.ТекущаяСтрока = НужнаяСтрока[0].ПолучитьИдентификатор();
			Иначе
				Элементы.Заказы.ТекущаяСтрока = Объект.Заказы[0].ПолучитьИдентификатор();
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	// Пересчитываем Суммарный вес и объемный вес
	ПересчитатьСуммарныйВесИОбъемныйВес();
	
	//ЭР Несторук С.И. 16.03.2017 11:50:03 {
	УстановитьУсловноеОформление();
	//}ЭР Несторук С.И.
	
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПлановДоставкиНаФорме()
	// ES_Сережко А.С. 05.07.18 Закоментила + 
	//Если НЕ ЗначениеЗаполнено(ПДОтборСтандартныйПериод.ДатаНачала)
	// ИЛИ НЕ ЗначениеЗаполнено(ПДОтборСтандартныйПериод.ДатаОкончания) Тогда
	//	Сообщение = Новый СообщениеПользователю;
	//	Сообщение.Текст = "Не указан период отбора";
	//	Сообщение.Поле = ?(НЕ ЗначениеЗаполнено(ПДОтборСтандартныйПериод.ДатаНачала), "ПДОтборСтандартныйПериод.ДатаНачала", "ПДОтборСтандартныйПериод.ДатаОкончания");
	//	Сообщение.Сообщить();
	//	Возврат;
	//КонецЕсли; 
	//
	//// Запоминаем текущую строку
	//Если Объект.ПланыДоставки.Количество() > 0 Тогда
	//	ТекСтрока = Элементы.ПланыДоставки.ТекущиеДанные;
	//	ТекущийПлан = ?(ТекСтрока = Неопределено, Неопределено, ТекСтрока.ПланДоставки);
	//КонецЕсли; 
	//
	//// Заполнить вкладку Планы доставки
	//ЗаполнитьПланамиДоставкиНаСервере();
	//
	//// Устанавливаем текущую строку
	//Если Объект.ПланыДоставки.Количество() > 0 Тогда
	//	Если ТекущийПлан = Неопределено Тогда
	//		Элементы.ПланыДоставки.ТекущаяСтрока = Объект.ПланыДоставки[0].ПолучитьИдентификатор();
	//	Иначе
	//		НужнаяСтрока = Объект.ПланыДоставки.НайтиСтроки(Новый Структура("ПланДоставки", ТекущийПлан));
	//		Если НужнаяСтрока.Количество() > 0 Тогда
	//			Элементы.ПланыДоставки.ТекущаяСтрока = НужнаяСтрока[0].ПолучитьИдентификатор();
	//		Иначе
	//			Элементы.ПланыДоставки.ТекущаяСтрока = Объект.ПланыДоставки[0].ПолучитьИдентификатор();
	//		КонецЕсли; 
	//	КонецЕсли;
	//КонецЕсли; 

	//Если Объект.ПланыДоставкиЗаказы.Количество() > 0 Тогда
	//	Элементы.ПланыДоставкиЗаказы.ТекущаяСтрока = Объект.ПланыДоставкиЗаказы[0].ПолучитьИдентификатор();
	//КонецЕсли; 
	////ЭР Несторук С.И. 16.03.2017 11:54:57 {
	//УстановитьУсловноеОформление();
	////}ЭР Несторук С.И.
	// ES_Сережко А.С. 05.07.18 Закоментила -
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОтборЗонаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ЗаказыОтборЗона) Тогда
		Элементы.Заказы.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Зона", ЗаказыОтборЗона));	
	Иначе
		Элементы.Заказы.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Зона", Неопределено));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОтборЗонаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СписокЗонДляВыбора.Количество() = 0 Тогда
		Сообщить("Зоны не найдены. Нажмите кнопку ""Проставить зоны"" на карте");
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = СписокЗонДляВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОтборКурьерПриИзменении(Элемент)
	
	ОбновитьСписокЗаказовНаФорме();

КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ВКЛАДКИ ПЛАНЫ ДОСТАВКИ

// ПланыДоставки ОТБОРЫ
&НаКлиенте
Процедура ПДОтборСтандартныйПериодДатаНачалаПриИзменении(Элемент)

	Если ПДОтборСтандартныйПериод.ДатаНачала > ПДОтборСтандартныйПериод.ДатаОкончания Тогда
		ПДОтборСтандартныйПериод.ДатаОкончания = КонецДня(ПДОтборСтандартныйПериод.ДатаНачала);
	КонецЕсли; 
	
	ОбновитьСписокПлановДоставкиНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ПДОтборСтандартныйПериодДатаОкончанияПриИзменении(Элемент)

	Если ПДОтборСтандартныйПериод.ДатаНачала > ПДОтборСтандартныйПериод.ДатаОкончания Тогда
		ПДОтборСтандартныйПериод.ДатаНачала = НачалоДня(ПДОтборСтандартныйПериод.ДатаОкончания);
	КонецЕсли; 
	
	ОбновитьСписокПлановДоставкиНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ПДОтборКурьерПриИзменении(Элемент)
	
	ОбновитьСписокПлановДоставкиНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОтборПодрядчикПриИзменении(Элемент)
	
	ОбновитьСписокЗаказовНаФорме();
	
КонецПроцедуры

// НовыеЗаказы ТЧ ГРУЗЫ / ЗАПАСЫ

&НаКлиенте
Процедура ЗаказыГрузыВРазрезеЗаказовПриИзменении(Элемент)
	
	ОтборСтрокЗаказыТчГрузы(Элементы.Заказы.ТекущиеДанные);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПДОтборТранспортПриИзменении(Элемент)
	
	ОбновитьСписокПлановДоставкиНаФорме();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьВПланСписокАдресовНаСервере(ТекПланДоставки)
	
	ТекстДляДобавления = "";
	Для каждого Стр Из Объект.СписокАдресовНаКарте Цикл
		ТекстДляДобавления = ТекстДляДобавления + Стр.НомерСтроки + " - " + Стр.Номер + " - " + Стр.АдресТекстом + Символы.ПС;
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ES_ПланДоставки.Ссылка,
		|	ES_ПланДоставки.СхемаПроезда
		|ИЗ
		|	Документ.ES_ПланДоставки КАК ES_ПланДоставки
		|ГДЕ
		|	ES_ПланДоставки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТекПланДоставки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ДокОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			
			Разделитель = ?(ЗначениеЗаполнено(ДокОбъект.СхемаПроезда), Символы.ПС, "");
			ДокОбъект.СхемаПроезда = ДокОбъект.СхемаПроезда + Разделитель + ТекстДляДобавления;
			
			Попытка
				ДокОбъект.Записать();
				Сообщить("Последовательность точек сохранена в документ " + ВыборкаДетальныеЗаписи.Ссылка);
			Исключение
				Сообщить("Не удалось сохранить последовательность точек!");
			    //ОписаниеОшибки()
			КонецПопытки;
		КонецЕсли;
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура СохранитьВПланОписаниеПроездаНаСервере(ТекПланДоставки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ES_ПланДоставки.Ссылка,
		|	ES_ПланДоставки.СхемаПроезда
		|ИЗ
		|	Документ.ES_ПланДоставки КАК ES_ПланДоставки
		|ГДЕ
		|	ES_ПланДоставки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТекПланДоставки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ДокОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			
			Разделитель = ?(ЗначениеЗаполнено(ДокОбъект.СхемаПроезда), Символы.ПС, "");
			ДокОбъект.СхемаПроезда = ДокОбъект.СхемаПроезда + Разделитель + КартаОписаниеПроезда;
			
			Попытка
				ДокОбъект.Записать();
				Сообщить("Описание проезда сохранено в документ " + ВыборкаДетальныеЗаписи.Ссылка);
			Исключение
				Сообщить("Не удалось сохранить описание проезда!");
			    //ОписаниеОшибки()
			КонецПопытки;
		КонецЕсли;
	
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ КНОПОК

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСпискиДокументов(Команда)
	//ЕФСОЛ Савченко К.Р. 15.09.2017 +
	
	Обновить();
	//ЕФСОЛ Савченко К.Р. 15.09.2017 -
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить()
	ОбновитьСписокЗаказовНаФорме();
	ОбновитьСписокПлановДоставкиНаФорме();
	//ЭР Несторук С.И. 21.03.2017 15:01:21 {
	ОбновитьКарту(Истина);
	ОбновитьСписокПеремещенийНаСевере();
	ОбновитьОтчетыНаСервере();
	//}ЭР Несторук С.И.
	
КонецПроцедуры


&НаКлиенте
Процедура ПересчитатьСуммарныйВесИОбъемныйВес()
	
	СуммарныйВес = 0;
	СуммарныйОбъемныйВес = 0;
	СуммарныйОбъем = 0;
	
	Для каждого ОтмСтр Из Объект.Заказы Цикл
		Если ОтмСтр.Отметка Тогда
			СуммарныйВес = СуммарныйВес + ОтмСтр.ОбщийВес;
			СуммарныйОбъемныйВес = СуммарныйОбъемныйВес + ОтмСтр.ОбщийОбъемныйВес;
			СуммарныйОбъем = СуммарныйОбъем + ОтмСтр.ОбщийОбъем;
		КонецЕсли; 
	КонецЦикла; 
	ИтогоОбъем = СуммарныйОбъем;
	ИтогоВес = СуммарныйВес;
	ИтогоОбъемныйВес = СуммарныйОбъемныйВес;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеЗаказов(Команда)

	// Проверяем, выделен ли План доставки
	ТекСтрока = Элементы.ПланыДоставки.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Выделите План доставки, заказам которых нужно изменить состояние";
		Сообщение.Поле = "Объект.ПланыДоставки";
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли;
	
	МассивЗаказов = Новый Массив;
	НайденныеСтроки = Объект.ПланыДоставкиЗаказы.НайтиСтроки(Новый Структура("ПланДоставки", ТекСтрока.ПланДоставки));
	Для каждого Строка Из НайденныеСтроки Цикл
		Если ТипЗнч(Строка.ДокументДоставки) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			МассивЗаказов.Добавить(Строка.ДокументДоставки);
		КонецЕсли; 
	КонецЦикла; 
	
	Если МассивЗаказов.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "В плане нет заказов на доставку";
		Сообщение.Поле = "Объект.ПланыДоставкиЗаказы";
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивЗаказов", МассивЗаказов);
	
	ОткрытьФорму("ОбщаяФорма.ES_ФормаУстановкиСостояния", ПараметрыФормы, ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВПланСписокАдресов(Команда)
	
	Если ВидОтображения = 2 И Объект.СписокАдресовНаКарте.Количество() > 0 Тогда
		СохранитьВПланСписокАдресовНаСервере(Элементы.СписокПД.ТекущиеДанные.Ссылка);
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВПланОписаниеПроезда(Команда)
	
	Если ВидОтображения = 2 И ЗначениеЗаполнено(КартаОписаниеПроезда) Тогда
		СохранитьВПланОписаниеПроездаНаСервере(Элементы.ПланыДоставки.ТекущиеДанные.ПланДоставки);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтрокЗаказыТчГрузы(ТекСтрока)
	
	//ЭР Несторук С.И. 21.03.2017 16:50:59 {
	ЗаказыГрузыВРазрезеЗаказов = Истина;
	//}ЭР Несторук С.И.
	
	Если ЗаказыГрузыВРазрезеЗаказов Тогда
		
		Если ТекСтрока <> Неопределено
		   И ТекСтрока.ДокументДоставки <> Неопределено Тогда
			Элементы.ЗаказыСписокГрузов.ОтборСтрок 	= Новый ФиксированнаяСтруктура("ДокументДоставки", ТекСтрока.ДокументДоставки);
			Элементы.ЗаказыГрузы.ОтборСтрок 		= Новый ФиксированнаяСтруктура("ДокументДоставки", ТекСтрока.ДокументДоставки);
		КонецЕсли; 
		
	Иначе
		Элементы.ЗаказыСписокГрузов.ОтборСтрок 	= Неопределено;
		Элементы.ЗаказыГрузы.ОтборСтрок 		= Неопределено;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПлановДоставкиПриИзменении(Элемент)
	
	Если СортировкаПлановДоставки = 1 Тогда
		Объект.ПланыДоставки.Сортировать("ДатаПланаДоставки");
	ИначеЕсли СортировкаПлановДоставки = 2 Тогда
		Объект.ПланыДоставки.Сортировать("НомерПланаДоставки");
	ИначеЕсли СортировкаПлановДоставки = 3 Тогда
		Объект.ПланыДоставки.Сортировать("Подрядчик");
	ИначеЕсли СортировкаПлановДоставки = 4 Тогда
		Объект.ПланыДоставки.Сортировать("Курьер");
	КонецЕсли;
	
	Элементы.ПланыДоставки.Обновить();

	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборы(Команда)  Экспорт
	
	ИстрияОтбора.Очистить();
	СнятьВсеОтметки();	
	
КонецПроцедуры
//ЕФСОЛ Несторук +
&НаКлиенте
Процедура СнятьВсеОтметки()
	
	Для каждого Стр Из Объект.Заказы Цикл
		Стр.Отметка = Ложь;
	КонецЦикла;

	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаВОЗР(Команда)
	ПараметрыСортировки = " Возр";
	СортироватьЗаказы(ПараметрыСортировки);
КонецПроцедуры

&НаКлиенте
Процедура СортировкаУБЫВ(Команда)
	ПараметрыСортировки = " Убыв";
	СортироватьЗаказы(ПараметрыСортировки);
КонецПроцедуры

&НаКлиенте
Процедура СортироватьЗаказы(ПараметрыСортировки)
	
	СтрокаПоиска = СтрЗаменить(Элементы.Заказы.ТекущийЭлемент.Имя,"Заказы", "");
	
	Если СтрокаПоиска = "Заказ" Тогда
		СтрокаПоиска = "ДокументДоставки";
	ИначеЕсли СтрокаПоиска = "СтатусЗаказа" Тогда
		СтрокаПоиска = "СтатусДокумента";
	КонецЕсли;	
	Объект.Заказы.Сортировать(""+СтрокаПоиска+ ПараметрыСортировки);
	
	Элементы.Заказы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачальнаяТочкаПриИзменении(Элемент)
	
	Элементы.НачальнаяТочка.КнопкаВыпадающегоСписка = Ложь;
	Элементы.НачальнаяТочка.СписокВыбора.Очистить();
	НачальнаяТочка = "";
	
	МассивАдресов = ПолучитьАдресКонтрагента(КонтрагентНачальнаяТочка);
	Если МассивАдресов.Количество() > 0 Тогда
		НачальнаяТочка = МассивАдресов[0];
		Если МассивАдресов.Количество() > 1 Тогда
			Элементы.НачальнаяТочка.КнопкаВыпадающегоСписка = Истина;
			Элементы.НачальнаяТочка.СписокВыбора.ЗагрузитьЗначения(МассивАдресов);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьАдресКонтрагента(Контрагент)
	
	Массив = Новый Массив();
	Массив.Добавить(Контрагент);
	ТаблицаАдресовДоставки = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(Массив,,Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета);
	ПочтовыйАдрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Контрагент, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента);
	ФактАдрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Контрагент, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	ЮрАдрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	МассивАдресов = Новый Массив();
	Для каждого Адрес Из ТаблицаАдресовДоставки Цикл
		МассивАдресов.Добавить(Адрес.Представление);
	КонецЦикла;
	Если ЗначениеЗаполнено(ПочтовыйАдрес) Тогда
		МассивАдресов.Добавить(ПочтовыйАдрес);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЮрАдрес) Тогда
		МассивАдресов.Добавить(ЮрАдрес);
	КонецЕсли;
	Если ЗначениеЗаполнено(ФактАдрес) Тогда
		МассивАдресов.Добавить(ФактАдрес);
	КонецЕсли;
	
	
	Возврат  МассивАдресов;
  
КонецФункции

&НаКлиенте
Процедура КонтрагентКонечнаяТочкаПриИзменении(Элемент)
	
	Элементы.КонечнаяТочка.КнопкаВыпадающегоСписка = Ложь;
	Элементы.КонечнаяТочка.СписокВыбора.Очистить();
	КонечнаяТочка = "";		
	МассивАдресов = ПолучитьАдресКонтрагента(КонтрагентКонечнаяТочка);
	Если МассивАдресов.Количество() > 0 Тогда
		КонечнаяТочка = МассивАдресов[0];
		Если МассивАдресов.Количество() > 1 Тогда
			Элементы.КонечнаяТочка.КнопкаВыпадающегоСписка = Истина;
			Элементы.КонечнаяТочка.СписокВыбора.ЗагрузитьЗначения(МассивАдресов);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВидДоставки (Заказ)
	
	ВидДоставки = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ES_ДанныеПоЗаказамСрезПоследних.ВидДоставки,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВидЗабора,
		|	ES_ДанныеПоЗаказамСрезПоследних.Возврат
		|ИЗ
		|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(, Заказ = &Заказ) КАК ES_ДанныеПоЗаказамСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ES_ДанныеПоЗаборамСрезПоследних.ВидЗабора,
		|	"""",
		|	ЛОЖЬ
		|ИЗ
		|	РегистрСведений.ES_ДанныеПоЗаборам.СрезПоследних(, Забор = &Заказ) КАК ES_ДанныеПоЗаборамСрезПоследних";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда	
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ВидДоставки = ES_ОбщегоНазначения.ВернутьСокращениеВидовДоставки(Выборка.ВидДоставки, Выборка.ВидЗабора, Выборка.Возврат);

	КонецЕсли;
	
	Возврат ВидДоставки;
	
КонецФункции

&НаКлиенте
Процедура ВидОтображенияПриИзменении(Элемент)
	
	//ЭР Несторук С.И. 01.03.2017 11:09:33 {
	УстановитьВидимостьЛогистики();
	//}ЭР Несторук С.И.
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыЦветМеткиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	//
	//мМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыбранноеЗначение,"#");
	//RGBМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(мМассив[1],",");
	ТекДанные = Элементы.Заказы.ТекущиеДанные;
	//Цвет = Новый Цвет(RGBМассив[0],RGBМассив[1],RGBМассив[2]);
	
	ПоменятьЦветМеткиНаСервере(ТекДанные.ДокументДоставки, ВыбранноеЗначение);
	//Элементы.ES_ЦветМетки.ЦветФона = Новый Цвет(RGBМассив[0],RGBМассив[1],RGBМассив[2]);
	//Объект.ES_ЦветМетки = ВыбранноеЗначение;

	
КонецПроцедуры

&НаСервере
Процедура ПоменятьЦветМеткиНаСервере(Ссылка, Цвет)

	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		мОбъект = Ссылка.ПолучитьОбъект();
		мОбъект.ES_ЦветМетки = Цвет;
		мОбъект.Записать();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОтборЛинияМетроПриИзменении(Элемент)
	ОбновитьСписокЗаказовНаФорме();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПеремещениеЗаказов(Команда)
	ОчиститьСообщения();
	
	МассивЗаказов = Новый Массив;
	//Объект.Заказы.Выгрузить(Новый Структура("Отметка", Истина), "ДокументДоставки").ВыгрузитьКолонку("ДокументДоставки");
	Для каждого Стр Из Объект.Заказы Цикл
		Если Стр.Отметка Тогда //и ТипЗнч(Стр.ДокументДоставки) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			МассивЗаказов.Добавить(Стр.ДокументДоставки);
		КонецЕсли;
	КонецЦикла;

	
	Если МассивЗаказов.Количество() = 0 Тогда
		Сообщить("Не отмечены документы доставки");
		Возврат;
	КонецЕсли;
	
	ФормаНовогоДокумента = ПолучитьФорму("Документ.ES_ПеремещениеЗаказов.Форма.ФормаДокумента");
	ДанныеФормы = ФормаНовогоДокумента.Объект;
	
	ES_ОбщегоНазначения.СоздатьПеремещениеЗаказовНаСервере(ДанныеФормы, МассивЗаказов);
	
	КопироватьДанныеФормы(ДанныеФормы, ФормаНовогоДокумента.Объект);
	ФормаНовогоДокумента.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура СкрытьОжидаетГрузПриИзменении(Элемент)
	
	ОбновитьСписокЗаказовНаФорме();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЛогистики();
	
	//ЭР Несторук С.И. 01.03.2017 11:06:17 {
	Если ВидОтображения = 3 ИЛИ ВидОтображения = 1 ИЛИ ВидОтображения = 5 Тогда
		Элементы.СтраницыСхемаПроезда.Видимость = Ложь;
		Элементы.ГруппаПараметрыПостроенияМаршрута.Видимость = Ложь;
		Элементы.ГруппаКнопкиМарштрута.Видимость = Ложь;
	Иначе
		Элементы.СтраницыСхемаПроезда.Видимость = Истина;
		Элементы.ГруппаПараметрыПостроенияМаршрута.Видимость = Истина;
		Элементы.ГруппаКнопкиМарштрута.Видимость = Истина;
	КонецЕсли;
	
	Если ВидОтображения = 2 ИЛИ ВидОтображения = 3 ИЛИ ВидОтображения = 5 Тогда
		Элементы.БезВыполненных.Видимость = Истина;
	Иначе
		Элементы.БезВыполненных.Видимость = Ложь;
		БезВыполненных = Ложь;
	КонецЕсли;
	//}ЭР Несторук С.И.	
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаВозрСписокАдресовНаКарте(Команда)
	
	Объект.СписокАдресовНаКарте.Сортировать("НомерНакладной ВОЗР");
	
	Элементы.СписокАдресовНаКарте.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура СортировкаУбывСписокАдресовНаКарте(Команда)
	Объект.СписокАдресовНаКарте.Сортировать("НомерНакладной Убыв");
	
	Элементы.СписокАдресовНаКарте.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	//ЭР Несторук С.И. 16.03.2017 11:34:54 {
	УсловноеОформление.Элементы.Очистить();
	ЦветФона = Новый Цвет(255, 255, 153);
	// ТЧ ЗАКАЗЫ
	
	СписокЗаказов = Новый СписокЗначений;
	Для каждого Стр ИЗ Объект.Заказы Цикл
		НайденныеЗаказы = Объект.Заказы.НайтиСтроки(Новый Структура("НомерНакладной", Стр.НомерНакладной));
		Если НайденныеЗаказы.Количество() > 1 Тогда
			СписокЗаказов.Добавить(Стр.ДокументДоставки);
		КонецЕсли;
	КонецЦикла;
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Заказы.ДокументДоставки");
	ЭлементОтбора.ПравоеЗначение = СписокЗаказов;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование = Истина;
	
	Оформление = ЭлементОформления.Поля.Элементы.Добавить();
	Оформление.Использование = Истина;
	Оформление.Поле = Новый ПолеКомпоновкиДанных("Заказы");
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);	
	ЭлементОформления.Использование = Истина;
	
	//// ТЧ Планы

	//СписокЗаказов = Новый СписокЗначений;
	//Для каждого Стр ИЗ Объект.ПланыДоставкиЗаказы Цикл
	//	НайденныеЗаказы = Объект.ПланыДоставкиЗаказы.НайтиСтроки(Новый Структура("НомерНакладной", Стр.НомерНакладной));
	//	Если НайденныеЗаказы.Количество() > 1 Тогда
	//		СписокЗаказов.Добавить(Стр.ДокументДоставки);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	//
	//ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПланыДоставкиЗаказы.ДокументДоставки");
	//ЭлементОтбора.ПравоеЗначение = СписокЗаказов;
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	//ЭлементОтбора.Использование = Истина;
	//
	//Оформление = ЭлементОформления.Поля.Элементы.Добавить();
	//Оформление.Использование = Истина;
	//Оформление.Поле = Новый ПолеКомпоновкиДанных("ПланыДоставкиЗаказы");
	//
	//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);	
	//ЭлементОформления.Использование = Истина;

	// ТЧ СписокАдресовНаКарте

	СписокЗаказов = Новый СписокЗначений;
	Для каждого Стр ИЗ Объект.СписокАдресовНаКарте Цикл
		НайденныеЗаказы = Объект.СписокАдресовНаКарте.НайтиСтроки(Новый Структура("НомерНакладной", Стр.НомерНакладной));
		Если НайденныеЗаказы.Количество() > 1 Тогда
			СписокЗаказов.Добавить(Стр.СсылкаНаЗаказ);
		КонецЕсли;
	КонецЦикла;
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СписокАдресовНаКарте.СсылкаНаЗаказ");
	ЭлементОтбора.ПравоеЗначение = СписокЗаказов;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование = Истина;
	
	Оформление = ЭлементОформления.Поля.Элементы.Добавить();
	Оформление.Использование = Истина;
	Оформление.Поле = Новый ПолеКомпоновкиДанных("СписокАдресовНаКарте");
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);	
	ЭлементОформления.Использование = Истина;

	//}ЭР Несторук С.И.
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАдресовПриИзменении(Элемент)
	ОбновитьСписокЗаказовНаФорме();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОтборСтандартныйПериодПриИзменении(Элемент)
	ОбновитьСписокЗаказовНаФорме();
КонецПроцедуры

&НаКлиенте
Процедура ПДОтборСтандартныйПериодПриИзменении(Элемент)
	ОбновитьСписокПлановДоставкиНаФорме();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьУИДЗоны(СсылкаНаЗону)
	
	// Получаем полный путь к метаданным объекта                        
	ТипОбъекта = СсылкаНаЗону.Метаданные().ПолноеИмя();			    
	// Получаем GUID объекта в информационной базе                        
	GUIDОбъекта = СсылкаНаЗону.УникальныйИдентификатор();					   
	// Формируем строку ссылки как GUID объекта"                        
	Возврат GUIDОбъекта;
	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСсылкаЗоныПоУИДу(УИДЗоны)
		
	СсылкаНаЗону = Справочники.ES_ЗоныГорода.ПолучитьСсылку(Новый УникальныйИдентификатор(УИДЗоны));
			
	Возврат СсылкаНаЗону;
	
КонецФункции

#КонецОбласти

#Область РаботаСПеремещениями

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	//ЭР Несторук С.И. 02.06.2017 13:30:45 {
	Если ИмяСобытия = "ПеремещениеПроведено" Тогда
		ОбновитьЗаказыДоставки("ок");
		ОбновитьСписокПеремещенийНаФорме();
	КонецЕсли;
	//}ЭР Несторук С.И.
	
	//Efsol Рыбалка Н.А. 25.06.2019+
	//
	//Если ИмяСобытия = "ОкончаниеВыполнениеФоновогоЗадания" Тогда
	//	
	//	Рез = ПолучитьИзВременногоХранилища(Параметр.АдресРезультата);
	//	
	//КонецЕсли;
	//Рыбалка Н.А-
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПеремещения(Команда)
	
	ОбновитьСписокПеремещенийНаФорме();
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПеремещенийНаФорме()
	
	// Запоминаем текущую строку
	Если Объект.Перемещения.Количество() > 0 Тогда
		ТекСтрока = Элементы.Перемещения.ТекущиеДанные;
		ТекущееПеремещение = ?(ТекСтрока = Неопределено, Неопределено, ТекСтрока.Перемещение);
	КонецЕсли; 
	
	ОбновитьСписокПеремещенийНаСевере();
	
	// Устанавливаем текущую строку
	Если Объект.Перемещения.Количество() > 0 Тогда
		Если ТекущееПеремещение = Неопределено Тогда
			Элементы.Перемещения.ТекущаяСтрока = Объект.Перемещения[0].ПолучитьИдентификатор();
		Иначе
			НужнаяСтрока = Объект.Перемещения.НайтиСтроки(Новый Структура("Перемещение", ТекущееПеремещение));
			Если НужнаяСтрока.Количество() > 0 Тогда
				Элементы.Перемещения.ТекущаяСтрока = НужнаяСтрока[0].ПолучитьИдентификатор();
			Иначе
				Элементы.Перемещения.ТекущаяСтрока = Объект.ПеремещенияЗаказы[0].ПолучитьИдентификатор();
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	
	Если Объект.ПеремещенияЗаказы.Количество() > 0 Тогда
		Элементы.ПеремещенияЗаказы.ТекущаяСтрока = Объект.ПеремещенияЗаказы[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокПеремещенийНаСевере()
	
	Объект.Перемещения.Очистить();
	Объект.ПеремещенияЗаказы.Очистить();
	Объект.ПеремещенияЗаказыГрузы.Очистить();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ES_ПеремещениеЗаказов.Ссылка КАК Перемещение,
	|	ES_ПеремещениеЗаказов.Подтвержден,
	|	ES_ПеремещениеЗаказов.Номер,
	|	ES_ПеремещениеЗаказов.Дата,
	|	ES_ПеремещениеЗаказов.СкладОтправитель,
	|	ES_ПеремещениеЗаказов.СкладПолучатель,
	|	ES_ПеремещениеЗаказов.Курьер,
	|	ES_ПеремещениеЗаказов.Подрядчик
	|ПОМЕСТИТЬ ВТ_Перемещение
	|ИЗ
	|	Документ.ES_ПеремещениеЗаказов КАК ES_ПеремещениеЗаказов
	|ГДЕ
	|	НЕ ES_ПеремещениеЗаказов.ПометкаУдаления
	|	И ES_ПеремещениеЗаказов.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ES_ПеремещениеЗаказовЗаказы.Ссылка КАК Перемещение,
	|	КОЛИЧЕСТВО(ES_ПеремещениеЗаказовЗаказы.Заказ) КАК КоличествоЗаказов
	|ПОМЕСТИТЬ ВТ_КоличествоЗаказов
	|ИЗ
	|	Документ.ES_ПеремещениеЗаказов.Заказы КАК ES_ПеремещениеЗаказовЗаказы
	|ГДЕ
	|	ES_ПеремещениеЗаказовЗаказы.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_Перемещение.Перемещение
	|			ИЗ
	|				ВТ_Перемещение КАК ВТ_Перемещение)
	|
	|СГРУППИРОВАТЬ ПО
	|	ES_ПеремещениеЗаказовЗаказы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ES_ПеремещениеЗаказовЗаказы.Заказ,
	|	ES_ПеремещениеЗаказовЗаказы.Ссылка КАК Перемещение,
	|	ES_ПеремещениеЗаказовЗаказы.НомерСтроки
	|ПОМЕСТИТЬ ВТ_Заказ
	|ИЗ
	|	Документ.ES_ПеремещениеЗаказов.Заказы КАК ES_ПеремещениеЗаказовЗаказы
	|ГДЕ
	|	ES_ПеремещениеЗаказовЗаказы.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_Перемещение.Перемещение
	|			ИЗ
	|				ВТ_Перемещение КАК ВТ_Перемещение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ES_ДанныеПоЗаказамСрезПоследних.АдресДоставки,
	|	ES_ДанныеПоЗаказамСрезПоследних.ВидДоставки,
	|	ES_ДанныеПоЗаказамСрезПоследних.ДатаДоставки,
	|	ES_ДанныеПоЗаказамСрезПоследних.ВремяДоставкиС,
	|	ES_ДанныеПоЗаказамСрезПоследних.ВремяДоставкиПо,
	|	ES_ДанныеПоЗаказамСрезПоследних.ВхНакладная,
	|	ES_ДанныеПоЗаказамСрезПоследних.Заказчик,
	|	ES_ДанныеПоЗаказамСрезПоследних.КоличествоМест,
	|	ES_ДанныеПоЗаказамСрезПоследних.Комментарий,
	|	ES_ДанныеПоЗаказамСрезПоследних.НомерНакладной,
	|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийВес,
	|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийОбъем,
	|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийОбъемныйВес,
	|	ES_ДанныеПоЗаказамСрезПоследних.СрочностьДоставки,
	|	ES_ДанныеПоЗаказамСрезПоследних.Получатель,
	|	ВТ_Заказ.Заказ КАК Заказ,
	|	ВТ_Заказ.Перемещение,
	|	ВТ_Заказ.НомерСтроки КАК НомерСтрокиВПеремещении
	|ПОМЕСТИТЬ ВТ_ДанныеПоЗаказу
	|ИЗ
	|	ВТ_Заказ КАК ВТ_Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(
	|				,
	|				Заказ В
	|					(ВЫБРАТЬ
	|						ВТ_Заказ.Заказ
	|					ИЗ
	|						ВТ_Заказ КАК ВТ_Заказ)) КАК ES_ДанныеПоЗаказамСрезПоследних
	|		ПО ВТ_Заказ.Заказ = ES_ДанныеПоЗаказамСрезПоследних.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ES_НоменклатураВЗаказахСрезПоследних.ДокументДоставки,
	|	ES_НоменклатураВЗаказахСрезПоследних.Номенклатура,
	|	ES_НоменклатураВЗаказахСрезПоследних.Характеристика,
	|	ES_НоменклатураВЗаказахСрезПоследних.Партия,
	|	ES_НоменклатураВЗаказахСрезПоследних.Количество,
	|	ES_НоменклатураВЗаказахСрезПоследних.Цена,
	|	ES_НоменклатураВЗаказахСрезПоследних.ПроцентСкидкиНаценки,
	|	ES_НоменклатураВЗаказахСрезПоследних.Содержание,
	|	ES_НоменклатураВЗаказахСрезПоследних.Вес,
	|	ES_НоменклатураВЗаказахСрезПоследних.Объем,
	|	ES_НоменклатураВЗаказахСрезПоследних.ОбъемныйВес,
	|	ES_НоменклатураВЗаказахСрезПоследних.ОбьявленнаяСтоимость,
	|	ES_НоменклатураВЗаказахСрезПоследних.Опасность,
	|	ES_НоменклатураВЗаказахСрезПоследних.Артикул,
	|	ES_НоменклатураВЗаказахСрезПоследних.Штрихкод
	|ПОМЕСТИТЬ ВТ_НоменклатураВЗаказах
	|ИЗ
	|	РегистрСведений.ES_НоменклатураВЗаказах.СрезПоследних(
	|			,
	|			ДокументДоставки В
	|				(ВЫБРАТЬ
	|					ВТ_Заказ.Заказ
	|				ИЗ
	|					ВТ_Заказ КАК ВТ_Заказ)) КАК ES_НоменклатураВЗаказахСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Перемещение.Перемещение КАК Перемещение,
	|	ВТ_Перемещение.Подтвержден КАК Подтвержден,
	|	ВТ_Перемещение.Номер КАК НомерПеремещения,
	|	ВТ_Перемещение.Дата КАК ДатаПеремещения,
	|	ВТ_Перемещение.СкладОтправитель КАК СкладОтправитель,
	|	ВТ_Перемещение.СкладПолучатель КАК СкладПолучатель,
	|	ВТ_Перемещение.Курьер КАК Курьер,
	|	ВТ_КоличествоЗаказов.КоличествоЗаказов КАК КоличествоЗаказов,
	|	ВТ_ДанныеПоЗаказу.АдресДоставки КАК АдресДоставки,
	|	ВТ_ДанныеПоЗаказу.ВидДоставки КАК ВидДоставки,
	|	ВТ_ДанныеПоЗаказу.ДатаДоставки КАК ДатаДоставки,
	|	ВТ_ДанныеПоЗаказу.ВремяДоставкиС КАК ВремяДоставкиС,
	|	ВТ_ДанныеПоЗаказу.ВремяДоставкиПо КАК ВремяДоставкиПо,
	|	ВТ_ДанныеПоЗаказу.ВхНакладная КАК ВхНакладная,
	|	ВТ_ДанныеПоЗаказу.Заказчик КАК Заказчик,
	|	ВТ_ДанныеПоЗаказу.КоличествоМест КАК КоличествоМест,
	|	ВТ_ДанныеПоЗаказу.Комментарий КАК Комментарий,
	|	ВТ_ДанныеПоЗаказу.НомерНакладной КАК НомерНакладной,
	|	ВТ_ДанныеПоЗаказу.ОбщийВес КАК ОбщийВес,
	|	ВТ_ДанныеПоЗаказу.ОбщийОбъем КАК ОбщийОбъем,
	|	ВТ_ДанныеПоЗаказу.ОбщийОбъемныйВес КАК ОбщийОбъемныйВес,
	|	ВТ_ДанныеПоЗаказу.СрочностьДоставки КАК СрочностьДоставки,
	|	ВТ_ДанныеПоЗаказу.Получатель КАК Получатель,
	|	ВТ_ДанныеПоЗаказу.Заказ КАК Заказ,
	|	ВТ_НоменклатураВЗаказах.Номенклатура,
	|	ВТ_НоменклатураВЗаказах.Характеристика,
	|	ВТ_НоменклатураВЗаказах.Партия,
	|	ВТ_НоменклатураВЗаказах.Количество,
	|	ВТ_НоменклатураВЗаказах.Цена,
	|	ВТ_НоменклатураВЗаказах.ПроцентСкидкиНаценки,
	|	ВТ_НоменклатураВЗаказах.Содержание,
	|	ВТ_НоменклатураВЗаказах.Вес,
	|	ВТ_НоменклатураВЗаказах.Объем,
	|	ВТ_НоменклатураВЗаказах.ОбъемныйВес,
	|	ВТ_НоменклатураВЗаказах.ОбьявленнаяСтоимость,
	|	ВТ_НоменклатураВЗаказах.Опасность,
	|	ВТ_НоменклатураВЗаказах.Артикул,
	|	ВТ_НоменклатураВЗаказах.Штрихкод,
	|	ВТ_ДанныеПоЗаказу.НомерСтрокиВПеремещении КАК НомерСтрокиВПеремещении,
	|	ВТ_Перемещение.Подрядчик КАК Подрядчик
	|ИЗ
	|	ВТ_Перемещение КАК ВТ_Перемещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоЗаказов КАК ВТ_КоличествоЗаказов
	|		ПО ВТ_Перемещение.Перемещение = ВТ_КоличествоЗаказов.Перемещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеПоЗаказу КАК ВТ_ДанныеПоЗаказу
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураВЗаказах КАК ВТ_НоменклатураВЗаказах
	|			ПО ВТ_ДанныеПоЗаказу.Заказ = ВТ_НоменклатураВЗаказах.ДокументДоставки
	|		ПО ВТ_Перемещение.Перемещение = ВТ_ДанныеПоЗаказу.Перемещение
	|ИТОГИ
	|	МАКСИМУМ(Подтвержден),
	|	МАКСИМУМ(НомерПеремещения),
	|	МАКСИМУМ(ДатаПеремещения),
	|	МАКСИМУМ(СкладОтправитель),
	|	МАКСИМУМ(СкладПолучатель),
	|	МАКСИМУМ(Курьер),
	|	МАКСИМУМ(КоличествоЗаказов),
	|	МАКСИМУМ(АдресДоставки),
	|	МАКСИМУМ(ВидДоставки),
	|	МАКСИМУМ(ДатаДоставки),
	|	МАКСИМУМ(ВремяДоставкиС),
	|	МАКСИМУМ(ВремяДоставкиПо),
	|	МАКСИМУМ(ВхНакладная),
	|	МАКСИМУМ(Заказчик),
	|	МАКСИМУМ(КоличествоМест),
	|	МАКСИМУМ(Комментарий),
	|	МАКСИМУМ(НомерНакладной),
	|	МАКСИМУМ(ОбщийВес),
	|	МАКСИМУМ(ОбщийОбъем),
	|	МАКСИМУМ(ОбщийОбъемныйВес),
	|	МАКСИМУМ(СрочностьДоставки),
	|	МАКСИМУМ(Получатель),
	|	МАКСИМУМ(НомерСтрокиВПеремещении),
	|	МАКСИМУМ(Подрядчик)
	|ПО
	|	Перемещение,
	|	Заказ";
	
	Запрос.УстановитьПараметр("КонецПериода", ПеремещенияОтборПериод.ДатаОкончания);
	Запрос.УстановитьПараметр("НачалоПериода", ПеремещенияОтборПериод.ДатаНачала);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПеремещение = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПеремещение.Следующий() Цикл
		
		НоваяСтрока = Объект.Перемещения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПеремещение);
		ВыборкаЗаказ = ВыборкаПеремещение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаЗаказ.Следующий() Цикл
			НоваяСтрока = Объект.ПеремещенияЗаказы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаЗаказ);
			
			Выборка = ВыборкаЗаказ.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = Объект.ПеремещенияЗаказыГрузы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Установить текующей строкой первую
	Если Объект.Перемещения.Количество() > 0 Тогда
		Элементы.Перемещения.ТекущаяСтрока = Объект.Перемещения[0].ПолучитьИдентификатор();
	КонецЕсли; 
	
	Если Объект.ПеремещенияЗаказы.Количество() > 0 Тогда
		Элементы.ПеремещенияЗаказы.ТекущаяСтрока = Объект.ПеремещенияЗаказы[0].ПолучитьИдентификатор();
	КонецЕсли; 
	
	
	
	// Упорядочивание
	Объект.Перемещения.Сортировать("ДатаПеремещения Убыв");
	Объект.ПеремещенияЗаказы.Сортировать("НомерСтрокиВПеремещении");

	
	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещенияОтборПериодПриИзменении(Элемент)
	
	ОбновитьСписокПеремещенийНаФорме();	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПеремещенияЗаказыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПеремещенияЗаказыГрузыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПеремещенияПриАктивизацииСтроки(Элемент)
	Если НЕ Элементы.Перемещения.ТекущиеДанные = Неопределено Тогда
		Элементы.ПеремещенияЗаказы.ОтборСтрок = Новый ФиксированнаяСтруктура("Перемещение", Элементы.Перемещения.ТекущиеДанные.Перемещение);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// При двойном клике на строке открывается Перемещение
	
	ПоказатьЗначение(,Элемент.ТекущиеДанные.Перемещение); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещенияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПеремещенияЗаказыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПеремещенияЗаказыГрузыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПеремещенияЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// При двойном клике на строке открывается заказ покупателя
	ПоказатьЗначение(,Элемент.ТекущиеДанные.Заказ);
КонецПроцедуры

&НаКлиенте
Процедура ПеремещенияЗаказыПриАктивизацииСтроки(Элемент)
	ТекСтрока = Элементы.ПеремещенияЗаказы.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Элементы.ПеремещенияЗаказыГрузы.ОтборСтрок 	= Новый ФиксированнаяСтруктура("Заказ", ТекСтрока.Заказ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеремещенияЗаказыГрузыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(,Элемент.ТекущиеДанные.Номенклатура);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВПеремещение(Команда)
	
	ОчиститьСообщения();
	
	МассивЗаказов = Новый Массив;
	//Объект.Заказы.Выгрузить(Новый Структура("Отметка", Истина), "ДокументДоставки").ВыгрузитьКолонку("ДокументДоставки");
	Для каждого Стр Из Объект.Заказы Цикл
		Если Стр.Отметка и ТипЗнч(Стр.ДокументДоставки) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			МассивЗаказов.Добавить(Стр.ДокументДоставки);
		КонецЕсли;
	КонецЦикла;
		
	Если МассивЗаказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные 		= Элементы.Перемещения.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекПеремещение  = ТекДанные.Перемещение;
	
	//ЭР Несторук С.И. 13.03.2017 10:03:33 {
	ЕстьПриемка = НайтиСвязныеДокументы(ТекПеремещение);
	Если ЕстьПриемка Тогда
		Возврат;
	КонецЕсли;
	//}ЭР Несторук С.И.
	
		
	ДобавитьЗаказыВПеремещение(ТекПеремещение, МассивЗаказов);

	ОбновитьСписокЗаказовНаФорме();
	ОбновитьКарту(Истина);
	ОбновитьСписокПеремещенийНаСевере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиСвязныеДокументы(Ссылка)

	//ЭР Несторук С.И. 13.03.2017 9:53:15 {
	ЕстьПриемка = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ES_Приемка.Ссылка
	|ИЗ
	|	Документ.ES_Приемка КАК ES_Приемка
	|ГДЕ
	|	ES_Приемка.ДокументОснование = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ЕстьПриемка = Истина;
		Выборка = РезультатЗапроса.Выбрать();
		Сообщение = "На основании перемещения создан документ("+Выборка.Количество()+"): ";
		Пока Выборка.Следующий() Цикл
			 Сообщение = Сообщение + Символы.ПС+ Выборка.Ссылка;
		 КонецЦикла;
		  Сообщить(Сообщение);
	КонецЕсли;
		
	Возврат ЕстьПриемка;

	//}ЭР Несторук С.И.
	
КонецФункции // ()

&НаСервере
Процедура ДобавитьЗаказыВПеремещение(ДокСсылка, МассивЗаказов)
	
	
	ПеремещениеОбъект = ДокСсылка.ПолучитьОбъект();
	ES_ОбщегоНазначения.СоздатьПеремещениеЗаказовНаСервере(ПеремещениеОбъект,МассивЗаказов,Истина);
	
	Попытка
		ПеремещениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Сообщить(НСтр("ru='Заказы успешно добавлены в документ "+ ПеремещениеОбъект.Ссылка+"'"));
	Исключение 
		ПеремещениеОбъект.Записать();
		Сообщить(НСтр("ru='Заказы добавлены в документ "+ ПеремещениеОбъект.Ссылка+". Но перепровести документ не удалось'"));
	КонецПопытки;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПоЗабору(Заказ)

	Структура = Новый Структура;
	Структура.Вставить("Долгота", СтрЗаменить(Заказ.ES_ЗаборАдресДолгота, ",", "."));
	Структура.Вставить("Широта", СтрЗаменить(Заказ.ES_ЗаборАдресШирота, ",", "."));
	Структура.Вставить("АдресЗабора",Заказ.ES_ЗаборАдрес); 
	Возврат Структура;	

КонецФункции // ПолучитьАдресЗабора()

//&НаКлиенте
//Процедура ЗаказыОтборКодНаправленияПриИзменении(Элемент)
//	//ЕФСОЛ Савченко К.Р. 14.09.2017 +
//	
//	Если ЗначениеЗаполнено(ЗаказыОтборКодНаправления) Тогда
//		Элементы.Заказы.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Код", ЗаказыОтборКодНаправления));	
//	Иначе
//		Элементы.Заказы.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Код", Неопределено));
//	КонецЕсли;
//	//ЕФСОЛ Савченко К.Р. 14.09.2017 -
//	
//КонецПроцедуры


&НаКлиенте
Процедура СписокПДПриАктивизацииСтроки(Элемент)
	
	//ЭР Сальник К.А. 13.04.2018 13:31:00 {
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		мСсылка = ПолучитьСсылкуНаСервере().Ссылка;
	Иначе
		мСсылка = Элемент.ТекущиеДанные.Ссылка;
	КонецЕсли;
	СписокПДЗаказы.Параметры.УстановитьЗначениеПараметра("Ссылка",мСсылка);
	
	//ЭР Несторук С.И. 28.12.2017 10:35:28 {
	ВыделенныйПлан = мСсылка;
	//}ЭР Несторук С.И.
	//}ЭР Сальник К.А.
	
КонецПроцедуры


&НаСервере
Функция ПолучитьСсылкуНаСервере(Значение = Неопределено)
	//ЭР Сальник К.А. 03.04.2018 9:07:00 {
	мЗначение = Документы.ES_ПланДоставки.ПустаяСсылка();
	
	Возврат Новый Структура("Ссылка",мЗначение);
	//}ЭР Сальник К.А.
КонецФункции


&НаКлиенте
Процедура ПДОтборСтандартныйПериод1ПриИзменении(Элемент)
	//ЭР Сальник К.А. 13.04.2018 13:33:00 {
	Если НЕ ЗначениеЗаполнено(ПДОтборСтандартныйПериод.ДатаНачала)
		ИЛИ НЕ ЗначениеЗаполнено(ПДОтборСтандартныйПериод.ДатаОкончания) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан период отбора";
		Сообщение.Поле = ?(НЕ ЗначениеЗаполнено(ПДОтборСтандартныйПериод.ДатаНачала), "ПДОтборСтандартныйПериод.ДатаНачала", "ПДОтборСтандартныйПериод.ДатаОкончания");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли; 
	
	СписокПД.Параметры.УстановитьЗначениеПараметра("ДатаН",ПДОтборСтандартныйПериод.ДатаНачала);
	СписокПД.Параметры.УстановитьЗначениеПараметра("ДатаК",ПДОтборСтандартныйПериод.ДатаОкончания);
	//}ЭР Сальник К.А.	
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//ЭР Несторук С.И. 10.04.2019 9:32:27 {
	ES_БиллингКлиент.ПроверитьДоступностьСервисаDelans(Отказ);
	//}ЭР Несторук С.И.
	//ЭР Сережко А.С. 06.08.2018 +	
	Если ПолучитьЗначениеКонстантыРаспределениеЗаявок() Тогда
		Отказ = Истина;
		Макет = ПолучитьМакетСервер();
		ДД = ПолучитьИзВременногоХранилища(Макет);
		АдресПубликации =  ПолучитьАдресПубликации();
		
		ИмяВременного = КаталогВременныхФайлов();
		
		ИмяФайла = "index.html";
		
		Страница = ИмяВременного + ИмяФайла;
		                                     		
		ДД.записать(Страница);
		
		ВыбФайл = Новый ЧтениеТекста(Страница,КодировкаТекста.UTF8);
		Файл = ВыбФайл.Прочитать(); 
		ВыбФайл.Закрыть(); 	
		ЗаписьФайл = Новый ЗаписьТекста(Страница,КодировкаТекста.UTF8);
		НовыйТекст = СтрЗаменить(Файл,"baseName",АдресПубликации);
		ЗаписьФайл.Записать(НовыйТекст);
		ЗаписьФайл.Закрыть();
		//ЗаписьФайл.Записать();
		//ЗаписьФайл.Закрыть();
		                        	
		
		ЗапуститьПриложение(Страница);
	Иначе
		
		//ЭР Сальник К.А. 13.04.2018 13:34:00 {
		ЭтаФорма.ОтображениеКарты = ПредопределенноеЗначение("Перечисление.ES_ВидОтображенияКарты.YandexКарты");
		СписокПД.Параметры.УстановитьЗначениеПараметра("ДатаН",ПДОтборСтандартныйПериод.ДатаНачала);
		СписокПД.Параметры.УстановитьЗначениеПараметра("ДатаК",ПДОтборСтандартныйПериод.ДатаОкончания);
		СписокПДЗаказы.Параметры.УстановитьЗначениеПараметра("Ссылка",ПолучитьСсылкуНаСервере().Ссылка);
		//}ЭР Сальник К.А.
		
		
		////ЕФСОЛ Савченко К.Р. 15.09.2017 +
		//ПодключитьОбработчикОжидания("Обновить", 300);//каждых 5 секунд
		////ЕФСОЛ Савченко К.Р. 15.09.2017 -
	КонецЕсли;	
КонецПроцедуры

Функция ПолучитьАдресПубликации()
	
	Возврат Константы.АдресПубликацииИнформационнойБазыВИнтернете.Получить();
	
КонецФункции

&НаСервере
Функция ПолучитьМакетСервер() 
      Макет = ПолучитьОбщийМакет("ES_Карта");
	  Адрес = ПоместитьВоВременноеХранилище(Макет, ЭтаФорма.УникальныйИдентификатор);
	  Возврат Адрес;
КонецФункции 
  
//ЕФСОЛ Савченко К.Р. 19.09.2017 +
&НаКлиенте
Процедура ТолькоДоставкиПриИзменении(Элемент)
	ОбновитьСписокЗаказовНаФорме();
КонецПроцедуры

&НаКлиенте
Процедура ТолькоСборыПриИзменении(Элемент)
	ОбновитьСписокЗаказовНаФорме();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОтборКодНаправленияПриИзменении(Элемент)
	ОбновитьСписокЗаказовНаФорме();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОтборВидКонтрагентаПриИзменении(Элемент)
	ОбновитьСписокЗаказовНаФорме();
КонецПроцедуры
//ЕФСОЛ Савченко К.Р. 19.09.2017 -

&НаСервереБезКонтекста
Функция ПолучитьМассивВидовДоставки()
	
	Массив = Новый Массив;
	
	Массив.Добавить(Перечисления.ES_ВидыДоставки.ДвериДвери);
	Массив.Добавить(Перечисления.ES_ВидыДоставки.СкладДвери);
	Массив.Добавить(Перечисления.ES_ВидыДоставки.СкладСклад);
	Массив.Добавить(Перечисления.ES_ВидыДоставки.Самовывоз);
	
	Возврат Массив;
	
КонецФункции

&НаКлиенте
Процедура ЗаказыОтборВидДоставкиНЕПриИзменении(Элемент)
	
	ОбновитьСписокЗаказовНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОтборАдресНЕПриИзменении(Элемент)
	
	ОбновитьСписокЗаказовНаФорме();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтчеты(Команда)
	
	// Запоминаем текущую строку
	Если Объект.ОтчетыОДоставке.Количество() > 0 Тогда
		ТекСтрока = Элементы.ОтчетыОДоставке.ТекущиеДанные;
		ТекОтчет = ?(ТекСтрока = Неопределено, Неопределено, ТекСтрока.ОтчетОДоставке);
	КонецЕсли; 
	
	ОбновитьОтчетыНаСервере();
	
	// Устанавливаем текущую строку
	Если Объект.ОтчетыОДоставке.Количество() > 0 Тогда
		Если ТекОтчет = Неопределено Тогда
			Элементы.ОтчетыОДоставке.ТекущаяСтрока = Объект.ОтчетыОДоставке[0].ПолучитьИдентификатор();
		Иначе
			НужнаяСтрока = Объект.ОтчетыОДоставке.НайтиСтроки(Новый Структура("ОтчетОДоставке", ТекОтчет));
			Если НужнаяСтрока.Количество() > 0 Тогда
				Элементы.ОтчетыОДоставке.ТекущаяСтрока = НужнаяСтрока[0].ПолучитьИдентификатор();
			Иначе
				Элементы.ОтчетыОДоставке.ТекущаяСтрока = Объект.ОтчетыОДоставкеЗаказы[0].ПолучитьИдентификатор();
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	
	Если Объект.ОтчетыОДоставкеЗаказы.Количество() > 0 Тогда
		Элементы.ОтчетыОДоставкеЗаказы.ТекущаяСтрока = Объект.ОтчетыОДоставкеЗаказы[0].ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьОтчетыНаСервере()
	
	Объект.ОтчетыОДоставке.Очистить();
	Объект.ОтчетыОДоставкеГрузы.Очистить();
	Объект.ОтчетыОДоставкеЗаказы.Очистить();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ES_ОтчетОДоставке.Ссылка КАК ДокОтчет,
		|	ES_ОтчетОДоставке.Номер КАК Номер,
		|	ES_ОтчетОДоставке.Дата КАК Дата,
		|	ES_ОтчетОДоставке.Курьер КАК Курьер,
		|	ES_ОтчетОДоставке.ПланДоставки КАК ПланДоставки,
		|	ES_ОтчетОДоставке.Статус КАК Статус
		|ПОМЕСТИТЬ ВТ_Отчет
		|ИЗ
		|	Документ.ES_ОтчетОДоставке КАК ES_ОтчетОДоставке
		|ГДЕ
		|	ES_ОтчетОДоставке.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ES_ОтчетОДоставке.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ES_ОтчетОДоставкеЗаказы.Ссылка КАК Отчет,
		|	ES_ОтчетОДоставкеЗаказы.НомерСтроки КАК НомерСтроки,
		|	ES_ОтчетОДоставкеЗаказы.ДокументДоставки КАК ДокументДоставки,
		|	ES_ОтчетОДоставкеЗаказы.АдресДоставки КАК АдресДоставки,
		|	ES_ОтчетОДоставкеЗаказы.ВидДоставки КАК ВидДоставки,
		|	ES_ОтчетОДоставкеЗаказы.Заказчик КАК Заказчик,
		|	ES_ОтчетОДоставкеЗаказы.СвязанныйДокумент КАК СвязанныйДокумент
		|ПОМЕСТИТЬ ВТ_ЗаказыИзОтчета
		|ИЗ
		|	Документ.ES_ОтчетОДоставке.Заказы КАК ES_ОтчетОДоставкеЗаказы
		|ГДЕ
		|	ES_ОтчетОДоставкеЗаказы.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТ_Отчет.ДокОтчет КАК ДокОтчет
		|			ИЗ
		|				ВТ_Отчет КАК ВТ_Отчет)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЗаказыИзОтчета.НомерСтроки КАК НомерСтроки,
		|	ВТ_ЗаказыИзОтчета.ДокументДоставки КАК ДокументДоставки,
		|	ВТ_ЗаказыИзОтчета.АдресДоставки КАК АдресДоставки,
		|	ВТ_ЗаказыИзОтчета.ВидДоставки КАК ВидДоставки,
		|	ВТ_ЗаказыИзОтчета.Заказчик КАК Заказчик,
		|	ВТ_ЗаказыИзОтчета.СвязанныйДокумент КАК СвязанныйДокумент,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВхНакладная КАК ВхНакладная,
		|	ES_ДанныеПоЗаказамСрезПоследних.НомерНакладной КАК НомерНакладной,
		|	ВТ_ЗаказыИзОтчета.Отчет КАК Отчет,
		|	ES_ДанныеПоЗаказамСрезПоследних.АдресДоставкиДолгота КАК АдресДоставкиДолгота,
		|	ES_ДанныеПоЗаказамСрезПоследних.АдресДоставкиШирота КАК АдресДоставкиШирота,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВремяДоставкиС КАК ВремяДоставкиС,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВремяДоставкиПо КАК ВремяДоставкиПо,
		|	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа КАК СтатусДокумента,
		|	ES_ДанныеПоЗаказамСрезПоследних.ДатаДоставки КАК ДатаДоставки
		|ПОМЕСТИТЬ ВТ_ДокументыДоставки
		|ИЗ
		|	ВТ_ЗаказыИзОтчета КАК ВТ_ЗаказыИзОтчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(
		|				,
		|				ЗАказ В
		|					(ВЫБРАТЬ
		|						ВТ_ЗаказыИзОтчета.ДокументДоставки КАК ДокументДоставки
		|					ИЗ
		|						ВТ_ЗаказыИзОтчета КАК ВТ_ЗаказыИзОтчета)) КАК ES_ДанныеПоЗаказамСрезПоследних
		|		ПО ВТ_ЗаказыИзОтчета.ДокументДоставки = ES_ДанныеПоЗаказамСрезПоследних.Заказ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних КАК ES_СтатусыЗаказовСрезПоследних
		|		ПО ВТ_ЗаказыИзОтчета.ДокументДоставки = ES_СтатусыЗаказовСрезПоследних.Заказ
		|ГДЕ
		|	ВТ_ЗаказыИзОтчета.ДокументДоставки ССЫЛКА Документ.ЗаказПокупателя
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ЗаказыИзОтчета.НомерСтроки,
		|	ВТ_ЗаказыИзОтчета.ДокументДоставки,
		|	ВТ_ЗаказыИзОтчета.АдресДоставки,
		|	ВТ_ЗаказыИзОтчета.ВидДоставки,
		|	ВТ_ЗаказыИзОтчета.Заказчик,
		|	ВТ_ЗаказыИзОтчета.СвязанныйДокумент,
		|	"""",
		|	ES_ДанныеПоЗаборамСрезПоследних.НомерНакладной,
		|	ВТ_ЗаказыИзОтчета.Отчет,
		|	ES_ДанныеПоЗаборамСрезПоследних.АдресДолгота,
		|	ES_ДанныеПоЗаборамСрезПоследних.АдресШирота,
		|	ES_ДанныеПоЗаборамСрезПоследних.ВремяЗабораС,
		|	ES_ДанныеПоЗаборамСрезПоследних.ВремяЗабораПо,
		|	ES_СтатусыЗаборовСрезПоследних.СтатусЗабора,
		|	ES_ДанныеПоЗаборамСрезПоследних.ДатаЗабора
		|ИЗ
		|	ВТ_ЗаказыИзОтчета КАК ВТ_ЗаказыИзОтчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ДанныеПоЗаборам.СрезПоследних(
		|				,
		|				Забор В
		|					(ВЫБРАТЬ
		|						ВТ_ЗаказыИзОтчета.ДокументДоставки КАК ДокументДоставки
		|					ИЗ
		|						ВТ_ЗаказыИзОтчета КАК ВТ_ЗаказыИзОтчета)) КАК ES_ДанныеПоЗаборамСрезПоследних
		|		ПО ВТ_ЗаказыИзОтчета.ДокументДоставки = ES_ДанныеПоЗаборамСрезПоследних.Забор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаборов.СрезПоследних КАК ES_СтатусыЗаборовСрезПоследних
		|		ПО ВТ_ЗаказыИзОтчета.ДокументДоставки = ES_СтатусыЗаборовСрезПоследних.Забор
		|ГДЕ
		|	ВТ_ЗаказыИзОтчета.ДокументДоставки ССЫЛКА Документ.ES_ЗаборГруза
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ES_НоменклатураВЗаказахСрезПоследних.ДокументДоставки КАК ДокументДоставки,
		|	ES_НоменклатураВЗаказахСрезПоследних.Номенклатура КАК Номенклатура,
		|	ES_НоменклатураВЗаказахСрезПоследних.Содержание КАК Содержание,
		|	ES_НоменклатураВЗаказахСрезПоследних.Характеристика КАК Характеристика,
		|	ES_НоменклатураВЗаказахСрезПоследних.Партия КАК Партия,
		|	ES_НоменклатураВЗаказахСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ES_НоменклатураВЗаказахСрезПоследних.ТипНоменклатурыЗапас КАК ТипНоменклатурыЗапас,
		|	ES_НоменклатураВЗаказахСрезПоследних.Количество КАК Количество,
		|	ES_НоменклатураВЗаказахСрезПоследних.НППлан КАК НППлан,
		|	ES_НоменклатураВЗаказахСрезПоследних.Цена КАК Цена,
		|	ES_НоменклатураВЗаказахСрезПоследних.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|	ES_НоменклатураВЗаказахСрезПоследних.Вес КАК Вес,
		|	ES_НоменклатураВЗаказахСрезПоследних.Объем КАК Объем,
		|	ES_НоменклатураВЗаказахСрезПоследних.ОбъемныйВес КАК ОбъемныйВес,
		|	ES_НоменклатураВЗаказахСрезПоследних.ОбьявленнаяСтоимость КАК ОбьявленнаяСтоимость,
		|	ES_НоменклатураВЗаказахСрезПоследних.Опасность КАК Опасность,
		|	ES_НоменклатураВЗаказахСрезПоследних.Артикул КАК Артикул,
		|	ES_НоменклатураВЗаказахСрезПоследних.Штрихкод КАК Штрихкод,
		|	ES_НоменклатураВЗаказахСрезПоследних.СтавкаНДС КАК СтавкаНДС,
		|	ES_НоменклатураВЗаказахСрезПоследних.СуммаНДС КАК СуммаНДС,
		|	ES_НоменклатураВЗаказахСрезПоследних.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТ_Грузы
		|ИЗ
		|	РегистрСведений.ES_НоменклатураВЗаказах.СрезПоследних(
		|			,
		|			ДокументДоставки В
		|				(ВЫБРАТЬ
		|					ВТ_ЗаказыИзОтчета.ДокументДоставки КАК ДокументДоставки
		|				ИЗ
		|					ВТ_ЗаказыИзОтчета КАК ВТ_ЗаказыИзОтчета)) КАК ES_НоменклатураВЗаказахСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Отчет.ДокОтчет КАК ОтчетОДоставке,
		|	ВТ_Отчет.Номер КАК Номер,
		|	ВТ_Отчет.Дата КАК Дата,
		|	ВТ_Отчет.Курьер КАК Курьер,
		|	ВТ_Отчет.ПланДоставки КАК ПланДоставки,
		|	ВТ_Отчет.Статус КАК Статус,
		|	ВТ_ДокументыДоставки.НомерСтроки КАК НомерСтрокиВОтчете,
		|	ВТ_ДокументыДоставки.ДокументДоставки КАК ДокументДоставки,
		|	ВТ_ДокументыДоставки.АдресДоставки КАК АдресДоставки,
		|	ВТ_ДокументыДоставки.ВидДоставки КАК ВидДоставки,
		|	ВТ_ДокументыДоставки.Заказчик КАК Заказчик,
		|	ВТ_ДокументыДоставки.СвязанныйДокумент КАК СвязанныйДокумент,
		|	ВТ_ДокументыДоставки.ВхНакладная КАК ВхНакладная,
		|	ВТ_ДокументыДоставки.НомерНакладной КАК НомерНакладной,
		|	ВТ_ДокументыДоставки.Отчет КАК Отчет,
		|	ВТ_Грузы.НомерСтроки КАК НомерСтрокиВЗаказе,
		|	ВТ_Грузы.Номенклатура КАК Номенклатура,
		|	ВТ_Грузы.Содержание КАК Содержание,
		|	ВТ_Грузы.Характеристика КАК Характеристика,
		|	ВТ_Грузы.Партия КАК Партия,
		|	ВТ_Грузы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВТ_Грузы.ТипНоменклатурыЗапас КАК ТипНоменклатурыЗапас,
		|	ВТ_Грузы.Количество КАК Количество,
		|	ВТ_Грузы.НППлан КАК НППлан,
		|	ВТ_Грузы.Цена КАК Цена,
		|	ВТ_Грузы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|	ВТ_Грузы.Вес КАК Вес,
		|	ВТ_Грузы.Объем КАК Объем,
		|	ВТ_Грузы.ОбъемныйВес КАК ОбъемныйВес,
		|	ВТ_Грузы.ОбьявленнаяСтоимость КАК ОбьявленнаяСтоимость,
		|	ВТ_Грузы.Опасность КАК Опасность,
		|	ВТ_Грузы.Артикул КАК Артикул,
		|	ВТ_Грузы.Штрихкод КАК Штрихкод,
		|	ВТ_Грузы.СтавкаНДС КАК СтавкаНДС,
		|	ВТ_Грузы.СуммаНДС КАК СуммаНДС,
		|	1 КАК КоличествоЗаказов,
		|	ВТ_ДокументыДоставки.АдресДоставкиДолгота КАК АдресДоставкиДолгота,
		|	ВТ_ДокументыДоставки.АдресДоставкиШирота КАК АдресДоставкиШирота,
		|	ВТ_ДокументыДоставки.ВремяДоставкиС КАК ВремяДоставкиС,
		|	ВТ_ДокументыДоставки.ВремяДоставкиПо КАК ВремяДоставкиПо,
		|	ВТ_ДокументыДоставки.ДатаДоставки КАК ДатаДоставки,
		|	ВТ_ДокументыДоставки.СтатусДокумента КАК СтатусДокумента
		|ИЗ
		|	ВТ_Отчет КАК ВТ_Отчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДокументыДоставки КАК ВТ_ДокументыДоставки
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Грузы КАК ВТ_Грузы
		|			ПО (ВЫБОР
		|					КОГДА ВТ_ДокументыДоставки.ДокументДоставки ССЫЛКА Документ.ES_ЗаборГруза
		|							И НЕ ВТ_ДокументыДоставки.СвязанныйДокумент = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|						ТОГДА ВТ_ДокументыДоставки.СвязанныйДокумент = ВТ_Грузы.ДокументДоставки
		|					ИНАЧЕ ВТ_ДокументыДоставки.ДокументДоставки = ВТ_Грузы.ДокументДоставки
		|				КОНЕЦ)
		|		ПО ВТ_Отчет.ДокОтчет = ВТ_ДокументыДоставки.Отчет
		|ИТОГИ
		|	МАКСИМУМ(Номер),
		|	МАКСИМУМ(Дата),
		|	МАКСИМУМ(Курьер),
		|	МАКСИМУМ(ПланДоставки),
		|	МАКСИМУМ(Статус),
		|	МАКСИМУМ(НомерСтрокиВОтчете),
		|	МАКСИМУМ(АдресДоставки),
		|	МАКСИМУМ(ВидДоставки),
		|	МАКСИМУМ(Заказчик),
		|	МАКСИМУМ(СвязанныйДокумент),
		|	МАКСИМУМ(ВхНакладная),
		|	МАКСИМУМ(НомерНакладной),
		|	МАКСИМУМ(Отчет),
		|	СУММА(КоличествоЗаказов),
		|	МАКСИМУМ(АдресДоставкиДолгота),
		|	МАКСИМУМ(АдресДоставкиШирота),
		|	МАКСИМУМ(ВремяДоставкиС),
		|	МАКСИМУМ(ВремяДоставкиПо),
		|	МАКСИМУМ(ДатаДоставки),
		|	МАКСИМУМ(СтатусДокумента)
		|ПО
		|	ОтчетОДоставке,
		|	ДокументДоставки";
	
	Запрос.УстановитьПараметр("КонецПериода", ОтчетыОтборПериод.ДатаОкончания);
	Запрос.УстановитьПараметр("НачалоПериода", ОтчетыОтборПериод.ДатаНачала);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДокОтчет = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокОтчет.Следующий() Цикл
		НовСтрОтчет = Объект.ОтчетыОДоставке.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрОтчет,ВыборкаДокОтчет);
	    КоличествоЗаказов = 0;
		ВыборкаДокументДоставки = ВыборкаДокОтчет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока ВыборкаДокументДоставки.Следующий() Цикл
			
			НовСтрЗаказ = Объект.ОтчетыОДоставкеЗаказы.Добавить();
			НовСтрЗаказ.ОтчетОДоставке = ВыборкаДокументДоставки.ОтчетОДоставке;
			ЗаполнитьЗначенияСвойств(НовСтрЗаказ,ВыборкаДокументДоставки);
			 КоличествоЗаказов = КоличествоЗаказов+1;

			ВыборкаДетальныеЗаписи = ВыборкаДокументДоставки.Выбрать();
	
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Номенклатура) Тогда
					Продолжить;
				КонецЕсли;
				        
				НовСтрГруз	 = Объект.ОтчетыОДоставкеГрузы.Добавить();
				НовСтрГруз.ДокументДоставки	= ВыборкаДокументДоставки.ДокументДоставки;
				ЗаполнитьЗначенияСвойств(НовСтрГруз,ВыборкаДетальныеЗаписи);
			КонецЦикла;
		КонецЦикла;
		НовСтрОтчет.КоличествоЗаказов = КоличествоЗаказов;
	КонецЦикла;
	Объект.ОтчетыОДоставкеЗаказы.Сортировать("НомерСтрокиВОтчете");
	Объект.ОтчетыОДоставкеГрузы.Сортировать("НомерСтрокиВЗаказе");
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыОДоставкеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(,Элемент.ТекущиеДанные.ОтчетОДоставке); 

КонецПроцедуры

&НаКлиенте
Процедура ОтчетыОДоставкеПриАктивизацииСтроки(Элемент)
	
	Если НЕ Элементы.ОтчетыОДоставке.ТекущиеДанные = Неопределено Тогда
		Элементы.ОтчетыОДоставкеЗаказы.ОтборСтрок = Новый ФиксированнаяСтруктура("ОтчетОДоставке", Элементы.ОтчетыОДоставке.ТекущиеДанные.ОтчетОДоставке);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ОтчетыОДоставкеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыОДоставкеПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыОДоставкеЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		// При двойном клике на строке открывается заказ покупателя
	ПоказатьЗначение(,Элемент.ТекущиеДанные.ДокументДоставки);

КонецПроцедуры

&НаКлиенте
Процедура ОтчетыОДоставкеЗаказыПриАктивизацииСтроки(Элемент)
	ТекСтрока = Элементы.ОтчетыОДоставкеЗаказы.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Элементы.ОтчетыОДоставкеГрузы.ОтборСтрок 	= Новый ФиксированнаяСтруктура("ДокументДоставки", ТекСтрока.ДокументДоставки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтчетыОДоставкеЗаказыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыОДоставкеЗаказыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыОДоставкеГрузыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыОДоставкеГрузыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыОтборПериодПриИзменении(Элемент)
	ОбновитьОтчетыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетНаСервере(Отчет, МассивЗаказовДляДобавления)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ES_ОтчетОДоставкеЗаказы.ДокументДоставки КАК ДокументДоставки
		|ИЗ
		|	Документ.ES_ОтчетОДоставке.Заказы КАК ES_ОтчетОДоставкеЗаказы
		|ГДЕ
		|	ES_ОтчетОДоставкеЗаказы.Ссылка = &Ссылка
		|	И ES_ОтчетОДоставкеЗаказы.ДокументДоставки В (&МассивЗаказов)";
	
	Запрос.УстановитьПараметр("Ссылка", Отчет);
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказовДляДобавления);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		УжеСуществующиеЗаказы = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ДокументДоставки");
		Для каждого Элем Из УжеСуществующиеЗаказы Цикл
			МассивЗаказовДляДобавления.Удалить(МассивЗаказовДляДобавления.Найти(Элем));
			//МассивСообщений.Добавить("" + Элем + " уже есть в выбраном отчете о сборе/доставке");
		КонецЦикла; 
	КонецЕсли; 
	
	Если МассивЗаказовДляДобавления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	мОтчет = Отчет.ПолучитьОбъект();
	
	ES_ОбщегоНазначения.ДобавитьЗаказыВОтчетОДоставке(мОтчет, МассивЗаказовДляДобавления);
	
	Попытка
		
		мОтчет.Записать(РежимЗаписиДокумента.Проведение);
		Сообщить("Заказы добавлены в отчет");
		
	Исключение
		Сообщить("Не удалось добавить заказы в отчет");
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВОтчет(Команда)
		ОчиститьСообщения();
	
	МассивЗаказов = Новый Массив;
	//Объект.Заказы.Выгрузить(Новый Структура("Отметка", Истина), "ДокументДоставки").ВыгрузитьКолонку("ДокументДоставки");
	Для каждого Стр Из Объект.Заказы Цикл
		Если Стр.Отметка и Стр.ВидДоставки <> ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.СкладСклад") Тогда
			МассивЗаказов.Добавить(Стр.ДокументДоставки);
		КонецЕсли;
	КонецЦикла;
		
	Если МассивЗаказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные 		= Элементы.ОтчетыОДоставке.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекОтчет  = ТекДанные.ОтчетОДоставке;
	
	ДобавитьВОтчетНаСервере(ТекОтчет, МассивЗаказов);
	ОбновитьОтчетыНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеКонстантыРаспределениеЗаявок()
	РаспределениеЗаявокВНовомОкне = Константы.ES_РаспределениеЗаявокВОтдельномОкне.Получить();
	Возврат РаспределениеЗаявокВНовомОкне; 
КонецФункции

&НаКлиенте
Процедура ПоказатьКурьеровПриИзменении(Элемент)
	Элементы.ОбновитьКоординатыКурьеров.Видимость = ПоказатьКурьеров;
КонецПроцедуры

//Efsol Рыбалка Н.А. 25.06.2019+
&НаСервере
Функция АвтораспределениеНаСервере(УИДФормы)
	
	ТЗМашины = Объект.Машины.Выгрузить();
	
	СтруктураПарам = Новый Структура;
	СтруктураПарам.Вставить("Машины", ТЗМашины);
	СтруктураПарам.Вставить("Дата", ЗаказыОтборСтандартныйПериод.ДатаНачала);
	СтруктураПарам.Вставить("ДатаНаФорме", ЗаказыОтборСтандартныйПериод.ДатаОкончания);
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УИДФормы);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = "АсинхронноеАвтораспределение";
	
	Задание = ДлительныеОперации.ВыполнитьВФоне("ES_АсинхронныеОбработчики.АсинхронноеАвтораспределение",СтруктураПарам, НастройкиЗапуска);
	
	Возврат Задание;

			
КонецФункции //АвтораспределениеНаСервере

&НаСервере
Процедура ОбновлениеСостояния() Экспорт
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(Идентификатор)); 
	//Задание.Состояние;
	
	Задание.ПолучитьСообщенияПользователю(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеСостоянияНаКлиенте()
	ОбновлениеСостояния();
КонецПроцедуры

&НаКлиенте
Процедура Автораспределение(Команда)
	
	Для каждого Машина из Объект.Машины Цикл
		Если Машина.Отметка = Истина Тогда
			Если Не ЗначениеЗаполнено(Машина.ВремяРаботыС) Или не ЗначениеЗаполнено(Машина.ВремяРаботыПо) Тогда
				Сообщить("Заполните время работы курьеров");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	
	Задание = АвтораспределениеНаСервере(УникальныйИдентификатор);
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
	НастройкиОжидания.ВыводитьПрогрессВыполнения = Истина;
	НастройкиОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПриОбновленииПрогрессаФоновогоЗадания", ЭтотОбъект);
	
	Обработчик = Новый ОписаниеОповещения("ПослеЗавершенияФоновогоЗадания", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Задание, Обработчик, НастройкиОжидания);

	Элементы.Заказы.Обновить();
	
	Элементы.СписокПД.Обновить();
	
	ЗаполнитьТаблицуМашины(ЗаказыОтборСтандартныйПериод.ДатаОкончания);
	ЗаполнитьТаблицуМашины2(ЗаказыОтборСтандартныйПериод.ДатаОкончания);
	Элементы.Машины.Обновить();
	Элементы.Машины2.Обновить();
	ПроверитьЗаблокироватьВозможностьРедактированияМаршрута();
	
	//Если Элементы.Машины2.ТекущиеДанные <> неопределено Тогда
	//	Элементы.Машины2.ТекущиеДанные.Машина2 = Машина;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияФоновогоЗадания(Задание, ДополнительныеПараметры) Экспорт
	
	//Если Задание.Статус = "Ошибка" Тогда
	//	ПодробноеПредставление = Задание.ПодробноеПредставлениеОшибки;
	//	КраткоеПредставление = "Ошибка: "+ Задание.КраткоеПредставлениеОшибки;
	//	ТекстОшибки = КраткоеПредставление+ Символы.ПС + ПодробноеПредставление;		
	//КонецЕсли;
	
	//Сообщить("Задание "+ Задание.Статус)
	
	//ОбработатьРезультатВыполненияЗадания(Задание.АдресРезультата);
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОбновленииПрогрессаФоновогоЗадания(Задание, ДополнительныеПараметры) Экспорт
	
	Сообщить("Задание "+ Задание.Статус); 
	Если Задание.Прогресс <> Неопределено Тогда
		Состояние("Выполнено " + Строка(Задание.Прогресс.Процент) + "%");
		Сообщить("Заявки для курьера " + Задание.Прогресс.Текст + " обработаны");
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьТаблицуМашины(Дата)
	
	Объект.Машины.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	НЕ Сотрудники.ПометкаУдаления
	|	И НЕ Сотрудники.ЭтоГруппа
	|	И Сотрудники.ES_ПризнакСотрудника = &ES_ПризнакСотрудника
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ES_ПланДоставки.Курьер КАК Курьер
	|ПОМЕСТИТЬ Планы
	|ИЗ
	|	Документ.ES_ПланДоставки КАК ES_ПланДоставки
	|ГДЕ
	|	ES_ПланДоставки.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ES_ПланДоставки.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.Ссылка КАК Ссылка
	|ИЗ
	|	вт КАК вт
	|ГДЕ
	|	НЕ вт.Ссылка В
	|				(ВЫБРАТЬ
	|					Планы.Курьер
	|				ИЗ
	|					Планы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	вт.Ссылка.Наименование";
	Запрос.УстановитьПараметр("ES_ПризнакСотрудника", Перечисления.ES_ПризнакСотрудника.Водитель);
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ЗаказыОтборСтандартныйПериод.ДатаОкончания));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ЗаказыОтборСтандартныйПериод.ДатаОкончания));
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.Машины.Добавить();
		НоваяСтрока.Машина = Выборка.Ссылка;
		НоваяСтрока.Отметка = Истина;
		
	КонецЦикла;
	
	
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьТаблицуМашины2(Дата)
	
	Объект.Машины2.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	НЕ Сотрудники.ПометкаУдаления
	|	И НЕ Сотрудники.ЭтоГруппа
	|	И Сотрудники.ES_ПризнакСотрудника = &ES_ПризнакСотрудника
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ES_ПланДоставки.Курьер КАК Курьер
	//СУММА(ES_ПланДоставкиЗаказы.ДокументДоставки.ЭР_СтоимостьОбщая) КАК Сумма
	|ПОМЕСТИТЬ Планы
	|ИЗ
	|	Документ.ES_ПланДоставки.Заказы КАК ES_ПланДоставкиЗаказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ES_ПланДоставки КАК ES_ПланДоставки
	|		ПО ES_ПланДоставкиЗаказы.Ссылка = ES_ПланДоставки.Ссылка
	|ГДЕ
	|	ES_ПланДоставки.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ES_ПланДоставки.ПометкаУдаления = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ES_ПланДоставки.Курьер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.Ссылка КАК Ссылка
	//Планы.Сумма
	|ИЗ
	|	вт КАК вт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Планы КАК Планы
	|		ПО вт.Ссылка = Планы.Курьер
	|ГДЕ
	|	вт.Ссылка В
	|			(ВЫБРАТЬ
	|				Планы.Курьер
	|			ИЗ
	|				Планы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	вт.Ссылка.Наименование";
	
	Запрос.УстановитьПараметр("ES_ПризнакСотрудника",Перечисления.ES_ПризнакСотрудника.Водитель);
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ЗаказыОтборСтандартныйПериод.ДатаОкончания));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ЗаказыОтборСтандартныйПериод.ДатаОкончания));
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Машины2.Добавить();
		НоваяСтрока.Машина2 = Выборка.Ссылка;
		НоваяСтрока.Сумма = 0;
		НоваяСтрока.Отметка2 = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаблокироватьВозможностьРедактированияМаршрута()
	
	Если Элементы.Машины2.ТекущиеДанные <> Неопределено Тогда
		ВыбраннаяМашина = Элементы.Машины2.ТекущиеДанные.Машина2;
		
		ДокументОтчет = ПолучитьРезультатЗапросаДокументОтчетНаСервере(ВыбраннаяМашина);
		
		//Если Не ДокументОтчет = Нопределено Тогда
		//	
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРезультатЗапросаДокументОтчетНаСервере(ВыбранаяМашина)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ES_ПланДоставки.Ссылка КАК ПланДоставки
	|ПОМЕСТИТЬ ВТ_ПланДоставки
	|ИЗ
	|	Документ.ES_ПланДоставки КАК ES_ПланДоставки
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ES_ПланДоставки.Дата, ДЕНЬ) МЕЖДУ &ДатаНач И &ДатаКон
	|	И ES_ПланДоставки.Курьер = &Курьер
	|	И ES_ПланДоставки.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ES_ОтчетОДоставке.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ES_ОтчетОДоставке КАК ES_ОтчетОДоставке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПланДоставки КАК ВТ_ПланДоставки
	|		ПО ES_ОтчетОДоставке.ПланДоставки = ВТ_ПланДоставки.ПланДоставки
	|ГДЕ
	|	ES_ОтчетОДоставке.Проведен";
	
	Запрос.УстановитьПараметр("ДатаНач", ЗаказыОтборСтандартныйПериод.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКон", ЗаказыОтборСтандартныйПериод.ДатаОкончания);
	Запрос.УстановитьПараметр("Курьер", ВыбранаяМашина);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура НастройкиАвтораспределения(Команда)
	
	ОткрытьФорму("ОбщаяФорма.ES_НастройкиARM_ДиспетчераФорма");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// При закрытии нужно отключить обработчик ожидания
    ОтключитьОбработчикОжидания("ОбновлениеСостояния");
    	
КонецПроцедуры


#КонецОбласти

//Рыбалка Н.А.-
