
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаЗавершенияРаботы) Тогда
		ТекущийЭлемент = Элементы.КонтактнаяИнформация0_Наименование;
	КонецЕсли;
	
	Параметры.Свойство("СопоставитьКонтактИАдресЭПВСобытияхПослеЗаписиОбъекта", СопоставитьКонтактИАдресЭПВСобытияхПослеЗаписиОбъекта);
	ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	
	Если Параметры.Ключ.Пустая() Тогда
		ПриСозданииПриЧтенииНаСервере();
	КонецЕсли;
	
	ОбязательноЗаполнятьИсточникВЛидах = 
		РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательностьЗаполненияРеквизита("Лид", "ИсточникПривлечения");
	УправлениеФормой();
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПредставление();
	
	ФормироватьНаименованиеАвтоматически = ПустаяСтрока(Объект.Наименование)
		ИЛИ Элементы.ПредставлениеВПрограмме.СписокВыбора.НайтиПоЗначению(Объект.Наименование) <> Неопределено
		ИЛИ (Объект.Контакты.Количество() > 0 И (ЗначениеЗаполнено(Объект.Контакты[0].Наименование) 
		И Элементы.ПредставлениеВПрограмме.СписокВыбора.НайтиПоЗначению(Объект.Контакты[0].Наименование) = Неопределено));
		
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия="Запись_СостоянияЛидов" Тогда
		ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостояния_Лид" И Параметр <> Неопределено Тогда
		
		ЛидИзменен = Неопределено;
		
		Если ТипЗнч(Параметр) = Тип("Массив") Тогда
			ЛидИзменен = Параметр.Найти(Объект.Ссылка);
		ИначеЕсли ТипЗнч(Параметр) = Тип("СправочникСсылка.Лиды") Тогда
			ЛидИзменен = Параметр = Объект.Ссылка;
		КонецЕсли;
		
		Если ЛидИзменен = Неопределено ИЛИ (ТипЗнч(ЛидИзменен) = Тип("Булево") И ЛидИзменен = Ложь) Тогда
			Возврат;
		КонецЕсли;
		
		ЭтотОбъект.Прочитать();
		УправлениеФормой();
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииПриЧтенииНаСервере();
	СостояниеПередЗавершением = СостоянияЛидов.ПолучитьСостояниеЛидаПередЗавершением(
		ТекущийОбъект.Ссылка,Справочники.СостоянияЛидов.Завершен);
	Элементы.СостояниеЛидаРасширеннаяПодсказка.Заголовок = СтрШаблон(НСтр("ru='Предыдущее состояние: %1'"),
	?(СостояниеПередЗавершением = Неопределено, ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЛида(),СостояниеПередЗавершением));
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ПустыеКонтактыНаФорме", Новый Массив);
	
	УдаляемыеСтроки = Новый Массив;
	Для каждого ДанныеКонтакта Из ТекущийОбъект.Контакты Цикл
		Если ЗначениеЗаполнено(ДанныеКонтакта.Наименование) Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыЗаписи.ПустыеКонтактыНаФорме.Добавить(Новый Структура("ИдентификаторСтрокиТабличнойЧасти", ДанныеКонтакта.ИдентификаторСтрокиТабличнойЧасти));
		УдаляемыеСтроки.Добавить(ДанныеКонтакта);
	КонецЦикла;
	
	Для каждого Строка Из УдаляемыеСтроки Цикл
		ТекущийОбъект.Контакты.Удалить(Строка);
	КонецЦикла;
	
	Если ТекущийОбъект.ЭтоНовый() Тогда
		ПараметрыЗаписи.Вставить("ЗаписьНового", Истина);
	КонецЕсли;
	
	Теги.ПередЗаписьюНаСервере(ЭтотОбъект,ТекущийОбъект);
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец УНФ.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ЗаписьНового") Тогда
		ОповеститьОЗаписиНового(Объект.Ссылка);
	КонецЕсли;
	
	Оповестить("Запись_Лид", Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ПустыеКонтактыНаФорме") Тогда
		Для каждого ДанныеКонтакта Из ПараметрыЗаписи.ПустыеКонтактыНаФорме Цикл
			ЗаполнитьЗначенияСвойств(Объект.Контакты.Добавить(), ДанныеКонтакта);
		КонецЦикла;
	КонецЕсли;
	
	Элементы.СостояниеЛидаРасширеннаяПодсказка.Заголовок = СтрШаблон(НСтр("ru='Предыдущее состояние: %1'"),
		СостоянияЛидов.ПолучитьСостояниеЛидаПередЗавершением(
			ТекущийОбъект.Ссылка,
			Справочники.СостоянияЛидов.Завершен)
	);
	
	Если СопоставитьКонтактИАдресЭПВСобытияхПослеЗаписиОбъекта Тогда
		ЭлектроннаяПочтаУНФ.СопоставитьВФонеКонтактИАдресЭПВСобытиях(
		ТекущийОбъект.Ссылка,
		АдресЭП(),
		УникальныйИдентификатор);
		
		СопоставитьКонтактИАдресЭПВСобытияхПослеЗаписиОбъекта = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	УдаляемыеСтроки = Новый Массив;
	
	Для каждого ДанныеКонтакта Из Объект.Контакты Цикл
		
		Если ЗначениеЗаполнено(ДанныеКонтакта.Наименование) Тогда
			Продолжить;
		КонецЕсли;
		
		КонтактнаяИнформацияКонтактаЗаполнена = Ложь;
		
		КонтактнаяИнформацияКонтакта = ЭтаФорма.КонтактнаяИнформация.НайтиСтроки(Новый Структура("ИдентификаторСтрокиТабличнойЧасти", ДанныеКонтакта.ИдентификаторСтрокиТабличнойЧасти));
		Для каждого ДанныеКИ Из КонтактнаяИнформацияКонтакта Цикл
			Если ЗначениеЗаполнено(ДанныеКИ.Представление) Тогда
				КонтактнаяИнформацияКонтактаЗаполнена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ КонтактнаяИнформацияКонтактаЗаполнена Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(
			ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", "Имя Фамилия", Объект.Контакты.Индекс(ДанныеКонтакта) + 1),,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Объект.Контакты[%1].Наименование", Объект.Контакты.Индекс(ДанныеКонтакта)),,
			Отказ);
		
	КонецЦикла;
		
	ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ);
	
	Для каждого Строка Из УдаляемыеСтроки Цикл
		Объект.Контакты.Удалить(Строка);
	КонецЦикла;
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ);
	// Конец УНФ.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КонтактнаяИнформация0_НаименованиеПриИзменении(Элемент)
	
	Если Элемент.Имя <> "КонтактнаяИнформация0_Наименование" Тогда
		Возврат;
	КонецЕсли;

	ОбновитьПредставление();
	
	Если ФормироватьНаименованиеАвтоматически И Элементы.ПредставлениеВПрограмме.СписокВыбора.Количество() > 0  Тогда
		Объект.Наименование = Элементы.ПредставлениеВПрограмме.СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусЛидаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния Тогда
		ДанныеВыбораСостояния = ПолучитьДанныеВыбора(Тип("СправочникСсылка.СостоянияЛидов"), ПараметрыПолученияДанных);
		ДанныеВыбора = ДанныеВыбораСостояния;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеревестиВКлиента(Команда)
	
	НовыйКонтрагент = ПеревестиВКлиентаСервер();
	
	Если НовыйКонтрагент = Неопределено ИЛИ НЕ ЗначениеЗаполнено(НовыйКонтрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ОповеститьОбИзменении(Объект.Ссылка);
	Оповестить("Запись_Лид", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура("Ключ", НовыйКонтрагент);
	ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы);
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиВНекачественныйЛид(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПеревестиВНекачественныйЛидСервер();
		Оповестить("Запись_Лид", Объект.Ссылка);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВопросПереводВНекачественного",ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Данные еще не записаны." + 
	Символы.ПС + " Перевод лида в некачественного возможен только после записи данных." +
	Символы.ПС + " Данные будут записаны'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьВРаботу(Команда)
	ВернутьВРаботуСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Лиды"));
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовыйКонтакт(Команда)
	
	ДобавитьПоляКонтактаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиВКлиентаИЗаказ(Команда)
	НовыйКонтрагент = ПеревестиВКлиентаСервер();
	
	Если НовыйКонтрагент = Неопределено ИЛИ НЕ ЗначениеЗаполнено(НовыйКонтрагент) Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("Запись_Лид", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура("Основание", НовыйКонтрагент);
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаДокумента", ПараметрыФормы);
	
	Модифицированность = Ложь;
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПредставления

&НаКлиенте
Процедура ОбновитьПредставление()
	
	СписокВыбора = Элементы.ПредставлениеВПрограмме.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если Объект.Контакты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Контакт из Объект.Контакты Цикл
		
		Если НЕ ПустаяСтрока(Контакт.Наименование) 
			И СписокВыбора.НайтиПоЗначению(Контакт.Наименование) = Неопределено Тогда
			СписокВыбора.Добавить(Контакт.Наименование);
		КонецЕсли;
		
		Если ЭтотОбъект.КонтактнаяИнформация.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого КИ Из ЭтотОбъект.КонтактнаяИнформация Цикл
			Если (КИ.ИдентификаторСтрокиТабличнойЧасти <> Контакт.ИдентификаторСтрокиТабличнойЧасти
				ИЛИ ПустаяСтрока(КИ.Представление))
				ИЛИ СписокВыбора.НайтиПоЗначению(КИ.Представление) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СписокВыбора.Добавить(КИ.Представление);
		КонецЦикла;
	КонецЦикла;
	
	Элементы.ПредставлениеВПрограмме.КнопкаВыпадающегоСписка = СписокВыбора.Количество() > 0;
	
	ДопПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОповещенияВыбораНаименования",ЭтаФорма,ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияВыбораНаименования(ЗначениеВыбора, ДопПараметры) Экспорт
	Объект.Наименование = ЗначениеВыбора.Значение;
КонецПроцедуры

#КонецОбласти

#Область Теги

&НаКлиенте
Процедура ПолеВводаТегаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПолеВводаТегаОбработкаВыбораСервер(Элемент.Имя, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаТегаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПолеВводаТегаОкончаниеВводаТекстаСервер(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПолеВводаТегаОбработкаВыбораСервер(ИмяЭлемента, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Теги.ПолеВводаТегаОбработкаВыбора(ЭтотОбъект, ИмяЭлемента, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПолеВводаТегаОкончаниеВводаТекстаСервер(Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Теги.ПолеВводаТегаОкончаниеВводаТекста(ЭтотОбъект, Текст, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОблакоТеговОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОблакоТеговОбработкаНавигационнойСсылкиСервер(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ОблакоТеговОбработкаНавигационнойСсылкиСервер(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
	Теги.ОблакоТеговОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииПриЧтенииНаСервере()
	
	ПрочитатьДанныеКонтактов();
	
	Теги.ПриСозданииПриЧтенииНаСервере(ЭтотОбъект,Объект);
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ПриСозданииПриЧтенииНаСервере(ЭтотОбъект);
	// Конец УНФ.КонтактнаяИнформация
	
	ПереместитьКнопкуДобавленияКонтакта();
	
	Если Параметры.Свойство("КонтактКакСвязаться", КонтактКакСвязаться) Тогда
		ЗаполнитьКонтактКакСвязаться();
	КонецЕсли;
	
	ФормироватьНаименованиеАвтоматически = ПустаяСтрока(Объект.Наименование)
		ИЛИ Элементы.ПредставлениеВПрограмме.СписокВыбора.НайтиПоЗначению(Объект.Наименование) <> Неопределено
		ИЛИ (Объект.Контакты.Количество() > 0 И (ЗначениеЗаполнено(Объект.Контакты[0].Наименование) 
		И Элементы.ПредставлениеВПрограмме.СписокВыбора.НайтиПоЗначению(Объект.Контакты[0].Наименование) = Неопределено));
		
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()

	НекачественныйЛид = ЗначениеЗаполнено(Объект.ПричинаНеуспешногоЗавершенияРаботы)
		ИЛИ Объект.ВариантЗавершения = Перечисления.ВариантЗавершенияРаботыСЛидом.НекачественныйЛид;
	ПереведенВПокупателя = ЗначениеЗаполнено(Объект.ДатаЗавершенияРаботы) И 
		Объект.ВариантЗавершения = Перечисления.ВариантЗавершенияРаботыСЛидом.ПереведенВПокупателя;
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Справочники.Лиды);

	Если НекачественныйЛид ИЛИ ПереведенВПокупателя Тогда
		Элементы.ПолеТекста.Видимость = Истина;
		Элементы.ГруппаЗавершенияРаботы.Заголовок = НСтр("ru='Результат от '") + Формат(Объект.ДатаЗавершенияРаботы,"ДЛФ=Д");
		Элементы.СостояниеЛида.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	Иначе
		Элементы.ПолеТекста.Видимость = Ложь;
		Элементы.ГруппаЗавершенияРаботы.Заголовок = НСтр("ru='Результат'");
		Элементы.СостояниеЛида.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
	Если ПереведенВПокупателя Тогда
		УстановитьПривилегированныйРежим(Истина);
		Контрагент = Справочники.Лиды.СвязанныйКонтрагент(Объект.Ссылка);
		УстановитьПривилегированныйРежим(Ложь);
		
		Текст = Новый ФорматированнаяСтрока(НСтр("ru='Лид переведен в покупателя ' "));
		Если ЗначениеЗаполнено(Контрагент) Тогда
			СтрокаКонтрагент = Новый ФорматированнаяСтрока(Строка(Контрагент),,,,ПолучитьНавигационнуюСсылку(Контрагент));
			ПолеТекста = Новый ФорматированнаяСтрока(Текст,СтрокаКонтрагент);
		Иначе
			ПолеТекста = Текст;
		КонецЕсли;
		
		Элементы.ПолеТекста.АвтоМаксимальнаяШирина = Истина;
		
	КонецЕсли;
	
	Если НекачественныйЛид Тогда
		ПолеТекста= Новый ФорматированнаяСтрока(НСтр("ru='Некачественный лид'"));
		Элементы.СостояниеЛида.ОтображениеПодсказки =ОтображениеПодсказки.ОтображатьСнизу;
	КонецЕсли;
	
	ТолькоПросмотр = ПереведенВПокупателя ИЛИ НЕ МожноРедактировать;
	
	Элементы.ОблакоТегов.Доступность = НЕ НекачественныйЛид;
	Элементы.ГруппаКнопок.Видимость = НЕ (НекачественныйЛид ИЛИ ПереведенВПокупателя);
	Элементы.ВернутьВРаботу.Видимость = НекачественныйЛид;
	Элементы.ПричинаНеуспешногоЗавершенияРаботы.Видимость = НекачественныйЛид;
	Элементы.ЗаметкиЗавершенияРаботы.Видимость = НекачественныйЛид;
	Элементы.КолонкаСлева.Доступность = НЕ НекачественныйЛид;
	Элементы.ДополнительнаяИнформация.Доступность = НЕ НекачественныйЛид;
	
	Если ОбязательноЗаполнятьИсточникВЛидах Тогда
		Элементы.ИсточникПривлечения.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ)
	
	ОбязательныеДляЗаполненияРеквизиты = РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательныеДляЗаполненияРеквизитыОбъекта("Лид");
	
	Для Каждого Реквизит Из ОбязательныеДляЗаполненияРеквизиты Цикл
				
		Если ЗначениеЗаполнено(Объект[Реквизит]) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", 
			"Источник привлечения"),,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Объект[%1]", Реквизит),,
			Отказ);
			
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СоздатьГруппуКонтакта(Идентификатор)
	
	ГруппаКонтакта = Элементы.Добавить("КонтактнаяИнформация" + Идентификатор, Тип("ГруппаФормы"), Элементы.КонтактнаяИнформация);
	ГруппаКонтакта.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаКонтакта.ОтображатьЗаголовок = Ложь;
	ГруппаКонтакта.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаКонтакта.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	СтрокиИдентификаторов = ИдентификаторыСтрокТабличнойЧасти.НайтиСтроки(Новый Структура("Значение", Идентификатор));
	
	ЭлементКонтакт = Элементы.Добавить("КонтактнаяИнформация" + Идентификатор + "Наименование", Тип("ПолеФормы"), ГруппаКонтакта);
	ЭлементКонтакт.Вид = ВидПоляФормы.ПолеВвода;
	Если СтрокиИдентификаторов.Количество() <> 0 Тогда
		ЭлементКонтакт.ПутьКДанным = СтрШаблон("Объект.Контакты[%1].Наименование", ИдентификаторыСтрокТабличнойЧасти.Индекс(СтрокиИдентификаторов[0]));
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭлементКонтакт, Элементы.КонтактнаяИнформация0_Наименование, "ПоложениеЗаголовка,ПодсказкаВвода,РастягиватьПоГоризонтали,АвтомаксимальнаяШирина,МаксимальнаяШирина");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИдентификаторыКонтактов()
	
	Идентификаторы = Объект.Контакты.Выгрузить(, "ИдентификаторСтрокиТабличнойЧасти");
	Идентификаторы.Свернуть("ИдентификаторСтрокиТабличнойЧасти");
	Идентификаторы.Сортировать("ИдентификаторСтрокиТабличнойЧасти Возр");
	Идентификаторы = Идентификаторы.ВыгрузитьКолонку("ИдентификаторСтрокиТабличнойЧасти");
	
	ИдентификаторыСтрокТабличнойЧасти.Очистить();
	
	Для каждого Идентификатор Из Идентификаторы Цикл
		НоваяСтрока = ИдентификаторыСтрокТабличнойЧасти.Добавить();
		НоваяСтрока.Значение = Идентификатор;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПоследнийИдентификаторСтрокиТабличнойЧасти()
	
	Если ИдентификаторыСтрокТабличнойЧасти.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИдентификаторыСтрокТабличнойЧасти[ИдентификаторыСтрокТабличнойЧасти.Количество() - 1].Значение;
	
КонецФункции

&НаСервере
Функция НовыйИдентификаторСтрокиТабличнойЧасти()
	
	НовыйИдентификатор = 0;
	Если ИдентификаторыСтрокТабличнойЧасти.Количество() <> 0 Тогда
		НовыйИдентификатор = ПоследнийИдентификаторСтрокиТабличнойЧасти() + 1;
	КонецЕсли;
	
	НоваяСтрока = ИдентификаторыСтрокТабличнойЧасти.Добавить();
	НоваяСтрока.Значение = НовыйИдентификатор;
	
	Возврат НовыйИдентификатор;
	
КонецФункции

&НаСервере
Процедура ПрочитатьДанныеКонтактов()
	
	Если Объект.Контакты.Количество() = 0 Тогда
		Объект.Контакты.Добавить();
	КонецЕсли;
	
	ОбновитьИдентификаторыКонтактов();
	
	Элементы.Переместить(Элементы.ДобавитьНовыйКонтакт, Элементы.ВсеКонтакты);
	
	УдаляемыеЭлементы = Новый Массив;
	
	Для каждого Идентификатор Из ИдентификаторыСтрокТабличнойЧасти Цикл
		Если Идентификатор.Значение = 0 Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыйЭлемент = Элементы.Найти("КонтактнаяИнформация" + Идентификатор.Значение);
		Если УдаляемыйЭлемент <> Неопределено Тогда
			УдаляемыеЭлементы.Добавить(УдаляемыйЭлемент);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	Для каждого Идентификатор Из ИдентификаторыСтрокТабличнойЧасти Цикл
		Если Идентификатор.Значение = 0 Тогда
			Продолжить;
		КонецЕсли;
		СоздатьГруппуКонтакта(Идентификатор.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьКнопкуДобавленияКонтакта(ИдентификаторКонтакта = Неопределено)
	
	Если ИдентификаторКонтакта = Неопределено Тогда
		ИдентификаторКонтакта = ПоследнийИдентификаторСтрокиТабличнойЧасти();
	КонецЕсли;
	
	ПоследняяГруппаСКомандами = Элементы.Найти("ГруппаДобавитьПолеКонтактнойИнформации_" + ИдентификаторКонтакта);
	
	Если ПоследняяГруппаСКомандами = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МестоРасположения = Неопределено;
	Если ПоследняяГруппаСКомандами.ПодчиненныеЭлементы.Количество() <> 0 Тогда
		МестоРасположения = ПоследняяГруппаСКомандами.ПодчиненныеЭлементы[0];
	КонецЕсли;
	
	Элементы.Переместить(Элементы.ДобавитьНовыйКонтакт, ПоследняяГруппаСКомандами, МестоРасположения);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоляКонтактаСервер()
	
	НовыйИдентификатор = НовыйИдентификаторСтрокиТабличнойЧасти();
	
	НоваяСтрока = Объект.Контакты.Добавить();
	НоваяСтрока.ИдентификаторСтрокиТабличнойЧасти = НовыйИдентификатор;
	
	СоздатьГруппуКонтакта(НовыйИдентификатор);
	
	КонтактнаяИнформацияУНФ.ОбновитьЭлементыКонтактнойИнформации(ЭтотОбъект);
	
	ПолеНаименованиеКонтакта = Элементы["КонтактнаяИнформация"+НовыйИдентификатор+"Наименование"];
	ПолеНаименованиеКонтакта.УстановитьДействие("ПриИзменении","КонтактнаяИнформация0_НаименованиеПриИзменении");
	
	ПереместитьКнопкуДобавленияКонтакта(НовыйИдентификатор);
	
	ТекущийЭлемент = ПолеНаименованиеКонтакта;
	
КонецПроцедуры

&НаСервере
Функция ПеревестиВКлиентаСервер()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЛидОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.Лиды"));
	Теги.ПередЗаписьюНаСервере(ЭтотОбъект, ЛидОбъект);
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ПередЗаписьюНаСервере(ЭтотОбъект, ЛидОбъект);
	// Конец УНФ.КонтактнаяИнформация
	
	Возврат Справочники.Лиды.ПолучитьСоздатьКонтрагента(ЛидОбъект);
	
КонецФункции

&НаСервере
Процедура ПеревестиВНекачественныйЛидСервер()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	
	Объект.ДатаЗавершенияРаботы = ТекущаяДатаСеанса();
	Объект.ВариантЗавершения = Перечисления.ВариантЗавершенияРаботыСЛидом.НекачественныйЛид;
	Объект.СостояниеЛида = Справочники.СостоянияЛидов.Завершен;
	
	Элементы.СостояниеЛидаРасширеннаяПодсказка.Заголовок = СтрШаблон(НСтр("ru='Предыдущее состояние: %1'"),
		СостоянияЛидов.ПолучитьСостояниеЛидаПередЗавершением(
		Объект.Ссылка,
		Справочники.СостоянияЛидов.Завершен)
		);
	Модифицированность = Истина;
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ВернутьВРаботуСервер()
	Объект.СостояниеЛида =  СостоянияЛидов.ПолучитьСостояниеЛидаПередЗавершением(
		Объект.Ссылка,Справочники.СостоянияЛидов.Завершен);
	Объект.ПричинаНеуспешногоЗавершенияРаботы = Неопределено;
	Объект.ВариантЗавершения = Неопределено;
	Объект.ДатаЗавершенияРаботы = Дата('00010101');
	Объект.ЗаметкиЗавершенияРаботы = Неопределено;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросПереводВНекачественного(Результат,ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ПеревестиВНекачественныйЛидСервер();
	
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформацияУНФ

&НаСервере
Функция АдресЭП()
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформация.НайтиСтроки(ПараметрыОтбора);
	
	Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат НайденныеСтроки[0].Значение;
	
КонецФункции

&НаСервере
Функция НайтиИлиДобавитьНовуюСтрокуКИ(ИдентификаторСтрокиТабличнойЧасти, ТипКонтактнойИнформации)
	
	НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформация.НайтиСтроки(
	Новый Структура("ИдентификаторСтрокиТабличнойЧасти,Тип,Значение", ИдентификаторСтрокиТабличнойЧасти, ТипКонтактнойИнформации, ""));
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если Не ЗначениеЗаполнено(НайденнаяСтрока.Представление) Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	// Добавляем новую строку КИ с группировкой по типу КИ
	КоличествоЭлементовКоллекции = ЭтотОбъект.КонтактнаяИнформация.Количество();
	ИндексВставки = КоличествоЭлементовКоллекции;
	
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		ТекущийИндекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		Если ЭтотОбъект.КонтактнаяИнформация[ТекущийИндекс].ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтрокиТабличнойЧасти
			И ЭтотОбъект.КонтактнаяИнформация[ТекущийИндекс].Тип = ТипКонтактнойИнформации Тогда
			ИндексВставки = ТекущийИндекс + 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат = ЭтотОбъект.КонтактнаяИнформация.Вставить(ИндексВставки);
	Результат.Тип = ТипКонтактнойИнформации;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКонтактКакСвязаться()
	
	Если КонтактКакСвязаться.ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		ВидКИ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EmailЛида");
	ИначеЕсли КонтактКакСвязаться.ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ВидКИ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонЛида");
	КонецЕсли;
	Если ВидКИ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Наименование = КонтактКакСвязаться.Контакт;
	
	ИдентификаторСтроки = ИдентификаторыСтрокТабличнойЧасти[0].Значение;
	
	ДанныеКонтактов = Объект.Контакты.НайтиСтроки(Новый Структура("ИдентификаторСтрокиТабличнойЧасти", ИдентификаторСтроки));
	Если ДанныеКонтактов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКонтакта = ДанныеКонтактов[0];
	ДанныеКонтакта.Наименование = КонтактКакСвязаться.Контакт;
	
	СтрокаКИ = НайтиИлиДобавитьНовуюСтрокуКИ(ИдентификаторСтроки, КонтактКакСвязаться.ТипКИ);
	СтрокаКИ.Представление = КонтактКакСвязаться.КакСвязаться;
	СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(КонтактКакСвязаться.КакСвязаться, ВидКИ);
	СтрокаКИ.Вид = ВидКИ;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКонтактнуюИнформациюСервер(ДобавляемыйВид, УстановитьВыводВФормеВсегда = Ложь, ИдентификаторСтрокиТабличнойЧасти = 0) Экспорт
	
	КонтактнаяИнформацияУНФ.ДобавитьКонтактнуюИнформацию(ЭтотОбъект, ДобавляемыйВид, УстановитьВыводВФормеВсегда, ИдентификаторСтрокиТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДействиеКИНажатие(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.ДействиеКИНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИПриИзменении(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИПриИзменении(ЭтотОбъект, Элемент);
	
	ОбновитьПредставление();
	Если ФормироватьНаименованиеАвтоматически И Элементы.ПредставлениеВПрограмме.СписокВыбора.Количество() > 0  Тогда
		Объект.Наименование = Элементы.ПредставлениеВПрограмме.СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИОчистка(Элемент, СтандартнаяОбработка)
	
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийКИПриИзменении(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.КомментарийКИПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияУНФВыполнитьКоманду(Команда)
	
	КонтактнаяИнформацияУНФКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	КонтактнаяИнформацияУНФКлиент.АвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	КонтактнаяИнформацияУНФКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
