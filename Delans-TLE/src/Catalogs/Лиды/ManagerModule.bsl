#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Контрагент, который был создан на основании лида.
//
// Параметры:
//  Лид	 - СправочникСсылка.Лиды
// 
// Возвращаемое значение:
//   - СправочникСсылка.Контрагент
//
Функция СвязанныйКонтрагент(Лид) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Лид) Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СвязиКонтрагентЛид.Контрагент КАК Контрагент
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентЛид КАК СвязиКонтрагентЛид
	|ГДЕ
	|	СвязиКонтрагентЛид.Лид = &Лид";
	
	Запрос.УстановитьПараметр("Лид", Лид);
	Выборка = Запрос.Выполнить().Выбрать();
	ЕстьЗаписи = Выборка.Следующий();
	Если ЕстьЗаписи Тогда
		Возврат Выборка.Контрагент;
	Иначе
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Создает контрагента на основании лида, если контрагент еще не был создан. 
//Если лид уже связан с контрагентом, то возращает ссылку на связанного контрагента
//
// Параметры:
//  Лид - СправочникСсылка.Лиды, СправочникОбъект.Лиды
// 
// Возвращаемое значение:
//   - СправочникСсылка.Контрагенты
//
Функция ПолучитьСоздатьКонтрагента(Лид) Экспорт
	
	Если ТипЗнч(Лид) = Тип("СправочникСсылка.Лиды") Тогда
		ЛидОбъект = Лид.ПолучитьОбъект();
	Иначе
		ЛидОбъект = Лид;
	КонецЕсли;
	
	НовыйКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	
	Если НЕ ЛидОбъект.ПроверитьЗаполнение() Тогда
		Возврат НовыйКонтрагент;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		СвязанныйКонтрагент = СвязанныйКонтрагент(ЛидОбъект.Ссылка);
		КонтрагентУжеСоздан = ЗначениеЗаполнено(СвязанныйКонтрагент);
		
		Если КонтрагентУжеСоздан Тогда
			Возврат СвязанныйКонтрагент;
		КонецЕсли;
		
		ЛидОбъект.СостояниеЛида = Справочники.СостоянияЛидов.Завершен;
		ЛидОбъект.ДатаЗавершенияРаботы = ТекущаяДатаСеанса();
		ЛидОбъект.ПричинаНеуспешногоЗавершенияРаботы = Неопределено;
		ЛидОбъект.ВариантЗавершения = Перечисления.ВариантЗавершенияРаботыСЛидом.ПереведенВПокупателя;
		ЛидОбъект.Записать();
		
		НовыйКонтрагент = СоздатьКонтрагента(ЛидОбъект);
		ГруппаДоступаКонтрагента = НовыйКонтрагент.ГруппаДоступа;
		НовыйКонтактныеЛица = СоздатьКонтактныеЛица(ЛидОбъект,ГруппаДоступаКонтрагента);
		
		Для каждого НовыйКонтакт Из НовыйКонтактныеЛица Цикл
			РегистрыСведений.СвязиКонтрагентКонтакт.НоваяСвязь(НовыйКонтрагент, НовыйКонтакт.Ссылка);
		КонецЦикла;
		
		РегистрыСведений.СвязиКонтрагентЛид.НоваяСвязь(НовыйКонтрагент, ЛидОбъект.Ссылка);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
	Возврат НовыйКонтрагент;
	
КонецФункции

Функция СоздатьКонтрагента(Лид)
	
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	НовыйКонтрагент.Заполнить(Неопределено);
	
	НовыйКонтрагент.Наименование = Лид.Наименование;
	НовыйКонтрагент.ИсточникПривлеченияПокупателя = Лид.ИсточникПривлечения;
	НовыйКонтрагент.Комментарий = Лид.Комментарий;
	НовыйКонтрагент.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
	НовыйКонтрагент.Покупатель = Истина;
	
	НовыйКонтрагент.Теги.Загрузить(Лид.Теги.Выгрузить(,"Тег"));
	
	НовыйКонтрагент.Записать();
	
	Возврат НовыйКонтрагент.Ссылка;
	
КонецФункции

Функция СоздатьКонтактныеЛица(Лид, ГруппаДоступаКонтрагента)
	
	КонтактныеЛица = Новый Массив;
	
	Для каждого ДанныеКонтакта Из Лид.Контакты Цикл
		
		Если Не ЗначениеЗаполнено(ДанныеКонтакта.Наименование) Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйКонтакт = Справочники.КонтактныеЛица.СоздатьЭлемент();
		НовыйКонтакт.Наименование = ДанныеКонтакта.Наименование;
		НовыйКонтакт.Заполнить(Неопределено);
		НовыйКонтакт.ГруппаДоступа = ГруппаДоступаКонтрагента;
		
		ДанныеКонтактаКИ = Лид.КонтактнаяИнформация.НайтиСтроки(Новый Структура("ИдентификаторСтрокиТабличнойЧасти", ДанныеКонтакта.ИдентификаторСтрокиТабличнойЧасти));
		Для каждого СтрокаКИ Из ДанныеКонтактаКИ Цикл
			
			Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
				ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
			ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
				ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
			ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
				ВидКИ = Справочники.ВидыКонтактнойИнформации.МессенджерКонтактногоЛица;
			ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Skype Тогда
				ВидКИ = Справочники.ВидыКонтактнойИнформации.SkypeКонтактногоЛица;
			ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
				ВидКИ = Справочники.ВидыКонтактнойИнформации.СоциальнаяСетьКонтактногоЛица;
			Иначе
				ВидКИ = ВидКИКонтактногоЛица(СтрокаКИ.Тип);
			КонецЕсли;
			
			Если ВидКИ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеКИ = ?(ЗначениеЗаполнено(СтрокаКИ.Значение), СтрокаКИ.Значение, СтрокаКИ.ЗначенияПолей);
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(НовыйКонтакт, ЗначениеКИ, ВидКИ,,Ложь);
			
		КонецЦикла;
		
		НовыйКонтакт.Записать();
		КонтактныеЛица.Добавить(НовыйКонтакт.Ссылка);
		
	КонецЦикла;
	
	Возврат КонтактныеЛица;
	
КонецФункции

Процедура ИзменитьСостояниеЛида(Лид, Состояние, ВариантЗавершения = Неопределено, ПричинаОтмены = Неопределено, Заметки = "") Экспорт
	
	Если Лид.СостояниеЛида = Состояние И Состояние <> Справочники.СостоянияЛидов.Завершен
		ИЛИ (Лид.СостояниеЛида = Состояние И Состояние = Справочники.СостоянияЛидов.Завершен
		И (ЗначениеЗаполнено(Лид.ВариантЗавершения) И Лид.ВариантЗавершения = ВариантЗавершения)) Тогда
		Возврат;
	КонецЕсли;
		
	ЛидОбъект = Лид.ПолучитьОбъект();
	
	ЛидОбъект.Заблокировать();
	
	ЛидОбъект.СостояниеЛида = Состояние;
	
	Если ВариантЗавершения <> Неопределено Тогда
		ЛидОбъект.ВариантЗавершения = ВариантЗавершения;
	КонецЕсли;
	
	Если ПричинаОтмены <> Неопределено Тогда
		ЛидОбъект.ПричинаОтмены = ПричинаОтмены;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Заметки) Тогда
		ЛидОбъект.Заметки = Заметки;
	КонецЕсли;
	
	ЛидОбъект.Записать();
	
	ЛидОбъект.Разблокировать();

КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЭтоГруппа ИЛИ
	|	ЗначениеРазрешено(Ссылка)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает список имен «ключевых» реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

// Возвращает список реквизитов, которые разрешается редактировать
// с помощью обработки группового изменения объектов.
//
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
	
	РедактируемыеРеквизиты.Добавить("ГруппаДоступа");
	РедактируемыеРеквизиты.Добавить("ДатаСоздания");
	РедактируемыеРеквизиты.Добавить("СостояниеЛида");
	РедактируемыеРеквизиты.Добавить("Ответственный");
	РедактируемыеРеквизиты.Добавить("ИсточникПривлечения");
	
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

Функция ВидКИКонтактногоЛица(ТипКИ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Тип = &ТипКИ
	|	И ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникКонтактныеЛица)";
	
	Запрос.УстановитьПараметр("ТипКИ", ТипКИ);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область КонтактнаяИнформацияУНФ

Процедура ЗаполнитьДанныеПанелиКонтактнаяИнформация(Лид, ДанныеПанелиКонтактнойИнформации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(КонтактыЛида.Наименование КАК СТРОКА(1000)) КАК Наименование,
	|	КонтактыЛида.ИдентификаторСтрокиТабличнойЧасти КАК ИдентификаторСтрокиТабличнойЧасти,
	|	ЕСТЬNULL(КонтактыЛидаКонтактнаяИнформация.Тип, ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ПустаяСсылка)) КАК Тип,
	|	ЕСТЬNULL(КонтактыЛидаКонтактнаяИнформация.Вид, ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)) КАК Вид,
	|	ЕСТЬNULL(КонтактыЛидаКонтактнаяИнформация.Представление, """") КАК Представление,
	|	ЕСТЬNULL(КонтактыЛидаКонтактнаяИнформация.Значение, """") КАК Значение
	|ИЗ
	|	Справочник.Лиды.Контакты КАК КонтактыЛида
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Лиды.КонтактнаяИнформация КАК КонтактыЛидаКонтактнаяИнформация
	|		ПО КонтактыЛида.Ссылка = КонтактыЛидаКонтактнаяИнформация.Ссылка
	|			И КонтактыЛида.ИдентификаторСтрокиТабличнойЧасти = КонтактыЛидаКонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти
	|ГДЕ
	|	КонтактыЛида.Ссылка = &Лид
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторСтрокиТабличнойЧасти
	|ИТОГИ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("Лид", Лид);
	ДанныеКИ = Запрос.Выполнить().Выбрать();
	
	ТекущийКонтакт = Неопределено;
	ВладелецКИ = Неопределено;
	
	Пока ДанныеКИ.Следующий() Цикл
		
		Если ТекущийКонтакт <> ДанныеКИ.Наименование Тогда
			
			ВладелецКИ = ДанныеКИ.Наименование;
			
			НоваяСтрока = ДанныеПанелиКонтактнойИнформации.Добавить();
			НоваяСтрока.Отображение = ДанныеКИ.Наименование;
			НоваяСтрока.ИндексПиктограммы = -1;
			НоваяСтрока.ТипОтображаемыхДанных = "КонтактноеЛицо";
			НоваяСтрока.ВладелецКИ = ВладелецКИ;
			НоваяСтрока.Родитель = Лид;
			
			ТекущийКонтакт = ДанныеКИ.Наименование;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеКИ.Тип) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеПанелиКонтактнойИнформации.Добавить();
		Комментарий = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(ДанныеКИ.Значение);
		НоваяСтрока.Отображение = Строка(ДанныеКИ.Вид) + ": " + ДанныеКИ.Представление + ?(ПустаяСтрока(Комментарий), "", ", " + Комментарий);
		НоваяСтрока.ИндексПиктограммы = КонтактнаяИнформацияПанельУНФ.ИндексПиктограммыПоТипу(ДанныеКИ.Тип);
		НоваяСтрока.ТипОтображаемыхДанных = "ЗначениеКИ";
		НоваяСтрока.ВладелецКИ = ВладелецКИ;
		НоваяСтрока.Родитель = Лид;
		НоваяСтрока.ПредставлениеКИ = ДанныеКИ.Представление;
		НоваяСтрока.ТипКИ = ДанныеКИ.Тип;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзВнешнегоИсточника

Процедура ДобавитьКИ(ЭлементСправочника, ПредставлениеКИ, ВидКИ, ИдентификаторСтроки)
	
	XMLПредставление = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(ПредставлениеКИ, ВидКИ);
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ЭлементСправочника, XMLПредставление, ВидКИ, ВидКИ.Тип, ИдентификаторСтроки);
	
КонецПроцедуры

Процедура ДобавитьКонтакт(ЭлементСправочника, ПредставлениеКонтакта, ПредставлениеТелефона, ПредставлениеАдресЭП)
	
	ИдентификаторСтроки = 0;
	Если ЭлементСправочника.Контакты.Количество() <> 0 Тогда
		
		ИдентификаторСтроки = ЭлементСправочника.Контакты[ЭлементСправочника.Контакты.Количество() - 1].ИдентификаторСтрокиТабличнойЧасти + 1;
		
	КонецЕсли;
	
	НоваяСтрока = ЭлементСправочника.Контакты.Добавить();
	НоваяСтрока.Наименование = ПредставлениеКонтакта;
	НоваяСтрока.ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтроки;
	
	ДобавитьКИ(ЭлементСправочника, ПредставлениеТелефона, Справочники.ВидыКонтактнойИнформации.ТелефонЛида, ИдентификаторСтроки);
	ДобавитьКИ(ЭлементСправочника, ПредставлениеАдресЭП, Справочники.ВидыКонтактнойИнформации.EmailЛида, ИдентификаторСтроки);
	
КонецПроцедуры

Процедура ПриОпределенииОбразцовЗагрузкиДанных(НастройкиЗагрузкиДанных, УникальныйИдентификатор) Экспорт
	
	Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанных_xlsx");
	ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
	
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанных_mxl");
	
	Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанных_csv");
	ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
	
КонецПроцедуры

Процедура ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт
	
	ОписаниеТиповСтрока9 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(9));
	ОписаниеТиповСтрока11 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(11));
	ОписаниеТиповСтрока25 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	ОписаниеТиповСтрока150 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(150));
	ОписаниеТиповСтрока200 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200));
	ОписаниеТиповСтрока0000 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(0));
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Лиды");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Наименование","ФИО (наименование)",	ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Лид", 1, Истина, Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Код", 		"Код", 					ОписаниеТиповСтрока9, ОписаниеТиповКолонка, "Лид", 2, , Истина);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Родитель", "Группа", ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СостоянияЛидов");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СостояниеЛида", "Состояние лида", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаЛидов") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ГруппыДоступаКонтрагентов");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ГруппаДоступа", "Группа доступа", ОписаниеТиповСтрока200, ОписаниеТиповКолонка, , , Истина);
		
	КонецЕсли;
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Контакт1", "(1) Контакт (ФИО)", ОписаниеТиповСтрока0000, ОписаниеТиповСтрока0000, "Контакт_1", 1);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Телефон1", "(1) Телефон", ОписаниеТиповСтрока100, ОписаниеТиповСтрока100, "Контакт_1", 2);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "АдресЭП1", "(1) E-mail", ОписаниеТиповСтрока100, ОписаниеТиповСтрока100, "Контакт_1", 3);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Контакт2", "(2) Контакт (ФИО)", ОписаниеТиповСтрока0000, ОписаниеТиповСтрока0000, "Контакт_2", 1);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Телефон2", "(2) Телефон", ОписаниеТиповСтрока100, ОписаниеТиповСтрока100, "Контакт_2", 2);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "АдресЭП2", "(2) E-mail", ОписаниеТиповСтрока100, ОписаниеТиповСтрока100, "Контакт_2", 3);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Контакт3", "(3) Контакт (ФИО)", ОписаниеТиповСтрока0000, ОписаниеТиповСтрока0000, "Контакт_3", 1);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Телефон3", "(3) Телефон", ОписаниеТиповСтрока100, ОписаниеТиповСтрока100, "Контакт_3", 2);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "АдресЭП3", "(3) E-mail", ОписаниеТиповСтрока100, ОписаниеТиповСтрока100, "Контакт_3", 3);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ИсточникиПривлеченияПокупателей");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ИсточникПривлечения", "Источник привлечения", ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("Строка");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Комментарий", "Заметка", ОписаниеТиповСтрока0000, ОписаниеТиповКолонка);
	
	// ДополнительныеРеквизиты
	ЗагрузкаДанныхИзВнешнегоИсточника.ПодготовитьСоответствиеПоДополнительнымРеквизитам(НастройкиЗагрузкиДанных, Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Лиды);
	Если НастройкиЗагрузкиДанных.ОписаниеДополнительныхРеквизитов.Количество() > 0 Тогда
		
		ИмяПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяПоляДобавленияДополнительныхРеквизитов();
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, ИмяПоля, "Дополнительные реквизиты", ОписаниеТиповСтрока150, ОписаниеТиповСтрока11, , , , , , Истина, Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Лиды);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника(ТаблицаСопоставленияДанных, НастройкиЗагрузкиДанных) Экспорт
	
	ОбновлятьДанные = НастройкиЗагрузкиДанных.ОбновлятьСуществующие;
	
	// ТаблицаСопоставленияДанных - Тип ДанныеФормыКоллекция
	Для каждого СтрокаТаблицыФормы Из ТаблицаСопоставленияДанных Цикл
		
		// Номенклатура по ШтрихКоду, Артикулу, Наименованию, НаименованиеПолное
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЛид(СтрокаТаблицыФормы.Лид, СтрокаТаблицыФормы.Наименование, СтрокаТаблицыФормы.Код);
		ЭтаСтрокаСопоставлена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Лид);
		
		// Родитель по наименованию
		ЗначениеПоУмолчанию = Справочники.Лиды.ПустаяСсылка();
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьРодителя("Лиды", СтрокаТаблицыФормы.Родитель, СтрокаТаблицыФормы.Родитель_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		ЗначениеПоУмолчанию = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЛида();
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСостояниеЛида(СтрокаТаблицыФормы.СостояниеЛида, СтрокаТаблицыФормы.СостояниеЛида_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// Группа доступа
		Если ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаЛидов") Тогда
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьГруппуДоступа(СтрокаТаблицыФормы.ГруппаДоступа, СтрокаТаблицыФормы.ГруппаДоступа_ВходящиеДанные);
			
		КонецЕсли;
		
		// Контакты и КИ (удаляем пробелы)
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.Контакт1, СтрокаТаблицыФормы.Контакт1);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.Телефон1, СтрокаТаблицыФормы.Телефон1);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.АдресЭП1, СтрокаТаблицыФормы.АдресЭП1);
		
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.Контакт2, СтрокаТаблицыФормы.Контакт2);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.Телефон2, СтрокаТаблицыФормы.Телефон2);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.АдресЭП2, СтрокаТаблицыФормы.АдресЭП2);
		
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.Контакт3, СтрокаТаблицыФормы.Контакт3);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.Телефон3, СтрокаТаблицыФормы.Телефон3);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.АдресЭП3, СтрокаТаблицыФормы.АдресЭП3);
		
		// Источник привлечения
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьИсточникиПривлеченияПокупателей(СтрокаТаблицыФормы.ИсточникПривлечения, СтрокаТаблицыФормы.ИсточникПривлечения_ВходящиеДанные);
		
		// Комментарий
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.Комментарий, СтрокаТаблицыФормы.Комментарий_ВходящиеДанные);
		
		// Дополнительные реквизиты
		Если НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты.Количество() > 0 Тогда
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьДополнительныеРеквизиты(СтрокаТаблицыФормы, НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты);
			
		КонецЕсли;
		
		ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения = "") Экспорт
	
	СтрокаТаблицыФормы._СтрокаСопоставлена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Лид);
	
	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	
	СтрокаТаблицыФормы[ИмяСлужебногоПоля] = СтрокаТаблицыФормы._СтрокаСопоставлена
											ИЛИ (НЕ СтрокаТаблицыФормы._СтрокаСопоставлена И НЕ ПустаяСтрока(СтрокаТаблицыФормы.Наименование));
	
КонецПроцедуры

Процедура ОбработатьПодготовленныеДанные(СтруктураДанных, ФоновоеЗаданиеАдресХранилища = "") Экспорт
	
	ТекущийПользователь				= Пользователи.АвторизованныйПользователь();
	НастройкиОбновленияСвойств		= СтруктураДанных.НастройкиЗагрузкиДанных.НастройкиОбновленияСвойств;
	ОбновлятьСуществующие			= СтруктураДанных.НастройкиЗагрузкиДанных.ОбновлятьСуществующие;
	СоздаватьЕслиНеСопоставлено		= СтруктураДанных.НастройкиЗагрузкиДанных.СоздаватьЕслиНеСопоставлено;
	ТаблицаСопоставленияДанных		= СтруктураДанных.ТаблицаСопоставленияДанных;
	РазмерТаблицыДанных				= ТаблицаСопоставленияДанных.Количество();
	КоличествоЗаписейТранзакции		= 0;
	ТранзакцияОткрыта				= Ложь;
	
	Попытка
		
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			Если НЕ ТранзакцияОткрыта 
				И КоличествоЗаписейТранзакции = 0 Тогда
				
				НачатьТранзакцию();
				ТранзакцияОткрыта = Истина;
				
			КонецЕсли;
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			
			СогласованноеСостояниеСтроки = (СтрокаТаблицы._СтрокаСопоставлена И ОбновлятьСуществующие) 
				ИЛИ (НЕ СтрокаТаблицы._СтрокаСопоставлена И СоздаватьЕслиНеСопоставлено);
				
			Если ЗагрузкаВПриложениеВозможна И СогласованноеСостояниеСтроки Тогда
				
				КоличествоЗаписейТранзакции = КоличествоЗаписейТранзакции + 1;
				
				Если СтрокаТаблицы._СтрокаСопоставлена Тогда
					
					ЭлементСправочника = СтрокаТаблицы.Лид.ПолучитьОбъект();
					ЗаполнитьЗначенияСвойств(ЭлементСправочника, СтрокаТаблицы, НастройкиОбновленияСвойств.ИменаПолейОбновляемые, НастройкиОбновленияСвойств.ИменаПолейНеподлежащихОбновлению);
					
				Иначе
					
					ЭлементСправочника = Справочники.Лиды.СоздатьЭлемент();
					ЗаполнитьЗначенияСвойств(ЭлементСправочника, СтрокаТаблицы);
					
					ЭлементСправочника.ДатаСоздания = ТекущаяДатаСеанса();
					ЭлементСправочника.Родитель = СтрокаТаблицы.Родитель;
					
				КонецЕсли;
				
				ЭлементСправочника.Наименование = СтрокаТаблицы.Наименование;
				
				НазваниеЛидаКакФИОПервогоКонтакта = Неопределено;
				Если НЕ ПустаяСтрока(СтрокаТаблицы.Контакт1)
					ИЛИ НЕ ПустаяСтрока(СтрокаТаблицы.Телефон1)
					ИЛИ НЕ ПустаяСтрока(СтрокаТаблицы.АдресЭП1) Тогда
					
					ДобавитьКонтакт(ЭлементСправочника, СтрокаТаблицы.Контакт1, СтрокаТаблицы.Телефон1, СтрокаТаблицы.АдресЭП1);
					НазваниеЛидаКакФИОПервогоКонтакта = Истина;
					
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(СтрокаТаблицы.Контакт2)
					ИЛИ НЕ ПустаяСтрока(СтрокаТаблицы.Телефон2)
					ИЛИ НЕ ПустаяСтрока(СтрокаТаблицы.АдресЭП2) Тогда
					
					ДобавитьКонтакт(ЭлементСправочника, СтрокаТаблицы.Контакт2, СтрокаТаблицы.Телефон2, СтрокаТаблицы.АдресЭП2);
					НазваниеЛидаКакФИОПервогоКонтакта = ?(НазваниеЛидаКакФИОПервогоКонтакта = Неопределено, Истина, Ложь);
					
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(СтрокаТаблицы.Контакт3)
					ИЛИ НЕ ПустаяСтрока(СтрокаТаблицы.Телефон3)
					ИЛИ НЕ ПустаяСтрока(СтрокаТаблицы.АдресЭП3) Тогда
					
					ДобавитьКонтакт(ЭлементСправочника, СтрокаТаблицы.Контакт3, СтрокаТаблицы.Телефон3, СтрокаТаблицы.АдресЭП3);
					НазваниеЛидаКакФИОПервогоКонтакта = ?(НазваниеЛидаКакФИОПервогоКонтакта = Неопределено, Истина, Ложь);
					
				КонецЕсли;
				
				Если НазваниеЛидаКакФИОПервогоКонтакта = Истина
					И ПустаяСтрока(ЭлементСправочника.Контакты[0].Наименование) Тогда
					
					ЭлементСправочника.Контакты[0].Наименование = ЭлементСправочника.Наименование;
					
				КонецЕсли;
				
				Если СтруктураДанных.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты.Количество() > 0 Тогда
					
					ЗагрузкаДанныхИзВнешнегоИсточника.ОбработатьВыбранныеДополнительныеРеквизиты(ЭлементСправочника, СтрокаТаблицы._СтрокаСопоставлена, СтрокаТаблицы, СтруктураДанных.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты);
					
				КонецЕсли;
				
				ЭлементСправочника.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.АвторизованныйПользователь(), "ОсновнойОтветственный");
				
				ЭлементСправочника.Записать();
				
			КонецЕсли;
			
			ИндексТекущейстроки = ТаблицаСопоставленияДанных.Индекс(СтрокаТаблицы);
			ТекстПрогресса      = СтрШаблон(НСтр("ru ='Обработано %1 из %2 строк...'"), ИндексТекущейстроки, РазмерТаблицыДанных);
			ПроцентВыполнения   = Окр(ИндексТекущейстроки * 100 / РазмерТаблицыДанных);
			
			ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, ТекстПрогресса);
			
			Если ТранзакцияОткрыта
				И КоличествоЗаписейТранзакции > ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.МаксимумЗаписейВОднойТранзакции() Тогда
				
				ЗафиксироватьТранзакцию();
				ТранзакцияОткрыта = Ложь;
				КоличествоЗаписейТранзакции = 0;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТранзакцияОткрыта 
			И КоличествоЗаписейТранзакции > 0 Тогда
			
			ЗафиксироватьТранзакцию();
			ТранзакцияОткрыта = Ложь;
			
		КонецЕсли;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(Нстр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Лиды, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли