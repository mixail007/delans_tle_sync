
#Область ПеременныеМодуля

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат; // Возврат при получении формы для анализа.
	КонецЕсли;
	
	ОбменСGoogle.ПодготовитьРеквизитыДляАвтоподбораИзКлассификатора(ЭтотОбъект, Параметры);
	
	Параметры.Свойство("СопоставитьКонтактИАдресЭПВСобытияхПослеЗаписиОбъекта", СопоставитьКонтактИАдресЭПВСобытияхПослеЗаписиОбъекта);
	ЭтотОбъект.СобытиеДляПоказаПослеЗакрытия = Параметры.СобытиеДляПоказаПослеЗакрытия;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Параметры.Свойство("Контакт",ПривязанныйКонтакт);
		Параметры.Свойство("Наименование",Объект.НаименованиеПолное);
		
		ПриСозданииПриЧтенииНаСервере();
		
		Если Не ПустаяСтрока(Параметры.ТекстЗаполнения) Тогда
			ЗаполнитьРеквизитыПоТекстуЗаполнения(Параметры.ТекстЗаполнения);
		КонецЕсли;
		
		// Создание из документа с установленным признаком вид операции.
		Если Параметры.ДополнительныеПараметры.Свойство("ВидОперации") Тогда
			Отношения = КлассификацияКонтактов.ТипОтношенийСКонтрагентомПоВидуОперации(Параметры.ДополнительныеПараметры.ВидОперации);
			ЗаполнитьЗначенияСвойств(Объект, Отношения, "Покупатель,Поставщик,ПрочиеОтношения");
		КонецЕсли;
		
		// Взаиморасчеты
		Если Параметры.ЗначениеКопирования.Пустая() Тогда
			ЗаполнитьЗначенияСвойств(Объект, РасчетыРаботаСФормамиВызовСервера.ПолучитьЗначенияРеквизитовПоУмолнчаниюДляНовогоКонтрагента());
		КонецЕсли;
		
		ЭтотКонтрагентЯвляетсяГоловным = Ложь;
		
	Иначе
		
		ЭтотКонтрагентЯвляетсяГоловным = КонтрагентЯвляетсяГоловным(Объект.Ссылка);
		
	КонецЕсли;
	
	ПерсональныеДанные = НСтр("ru ='Персональные данные'");
	ЦветТекстаНекорректногоКонтрагента = ЦветаСтиля.ЦветТекстаНекорректногоКонтрагента;
	ВыполнитьВсеПроверки(ЭтотОбъект);
	
	УстановитьЗаголовокФормы(ЭтотОбъект);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// ЭДО
	ОбменСКонтрагентами.ПроверитьКонтрагентаВ1СЭДОПриСозданииНаСервере(Объект.Ссылка);
	// Конец ЭДО
	
	ЭтотОбъект.ИспользоватьСпаркРиски = ПолучитьФункциональнуюОпцию("ИспользоватьСервисСПАРКРиски");
	Элементы.ГруппаИндексыСПАРКРиски.Видимость = ИспользоватьСпаркРиски;
	
	Если ИспользоватьСпаркРиски Тогда
		
		// ИнтернетПоддержкаПользователей.СПАРКРиски
		ПараметрыПроцедуры = Новый Структура("ВариантОтображения", "Многострочный");
		СПАРКРиски.ПриСозданииНаСервере(
			ЭтотОбъект,
			Объект,
			Объект.Ссылка,
			ПараметрыПроцедуры);
		// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
		
		// Команды1СПАРКРиски
		СПАРКРиски.ДобавитьПодключаемыеКомандыКонтрагента(ЭтотОбъект, Объект, Элементы.Подменю1СПАРКРиски);
		// Конец Команды1СПАРКРиски
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПривязанныйКонтакт) Тогда
		Параметры.Свойство("Наименование",Объект.Наименование);
		
		Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
			Объект.Наименование = ПривязанныйКонтакт.Наименование;
		КонецЕсли;
		
		ТекущийЭлемент = Элементы.НаименованиеПолное;
		Модифицированность = Истина;
	КонецЕсли;
	
	ОбязательноЗаполнятьИсточникВПокупателях = 
		РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательностьЗаполненияРеквизита("Покупатель", "ИсточникПривлечения");
		
	// Взаиморасчеты
	ЗаполнитьДополнительныеРеквизитыВзаиморасчетов();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиПереопределяемый.ЗаполнитьДополнительныеПараметры(Объект, "ДополнительныеРеквизиты", , "КомандыОбычные");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереКонтрагент(ЭтотОбъект, Параметры);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	УправлениеНебольшойФирмойСервер.УстановитьОтображаниеПодменюПечати(Элементы.ПодменюПечать);
	
	ОбменСGoogle.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект, ОписаниеПолейДляАвтоподбора());
	
	ПечатьДокументовУНФ.КорректировкаРазмещениеПодчиненнойГруппыКомандПечати(ЭтаФорма, Элементы.ПодменюПечать, Элементы.ПодменюДоговорКонтрагента);
	Элементы.КомандыПечатиДоговорКонтрагента.Вид = ВидГруппыФормы.ГруппаКнопок;
	ШаблоныПечатиОфисныхДокументов.ОпределитьВидимостьКомандШаблоновПечати(Элементы.ФормаОткрытьШаблоныПечатиДоговоровКонтрагентов);
	
	УстановитьВидимостьИДоступностьМобильноеПриложениеИРМК();
	УстановитьВидимостьИДоступность();
	НастроитьФормуМобильныйКлиент();

	//ЭР Несторук С.И. 21.12.2018 16:49:15 {
	Элементы.ES_Группа.Видимость = Константы.ES_СлужбаДоставки.Получить();	
	//}ЭР Несторук С.И.
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ПустаяСтрока(ОписаниеОшибкиЗаполнения) Тогда
		ОбработчикЗавершенияОбработкиОшибки = Новый ОписаниеОповещения(
		"ОбработатьОшибкуЗаполнитьРеквизитыПоИННЗавершение",
		ЭтотОбъект,
		Объект.ИНН);
		РаботаСКонтрагентамиКлиент.ОбработатьОшибку(ОписаниеОшибкиЗаполнения, ОбработчикЗавершенияОбработкиОшибки);
	КонецЕсли;
	
	УправлениеФормой();
	
	Если ИспользоватьСпаркРиски Тогда
		// ИнтернетПоддержкаПользователей.СПАРКРиски
		СПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Объект);
		// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	КонецЕсли;
	
	// Отключаем проверку контрагентов для РМК
	Если НЕ УправлениеНебольшойФирмойУправлениеДоступомПовтИсп.ЕстьПрофильРабочееМестоКассира() Тогда
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ПриОткрытииКонтрагент(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы И ЗначениеЗаполнено(СобытиеДляПоказаПослеЗакрытия) Тогда
		ПоказатьЗначение(, СобытиеДляПоказаПослеЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	//  Загрузили данные контрагента из XML (БЭД)
	Если СтрНайти("ОбновитьСостояниеЭД", ИмяСобытия) > 0 Тогда
		Прочитать();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменилисьСчетаРасчетов" Тогда
		
		Объект.СчетУчетаРасчетовСПокупателем = Параметр.СчетУчетаРасчетовСПокупателем;
		Объект.СчетУчетаАвансовПокупателя = Параметр.СчетУчетаАвансовПокупателя;
		Объект.СчетУчетаРасчетовСПоставщиком = Параметр.СчетУчетаРасчетовСПоставщиком;
		Объект.СчетУчетаАвансовПоставщику = Параметр.СчетУчетаАвансовПоставщику;
		Модифицированность = Истина;
		
		
	ИначеЕсли ИмяСобытия = "УстановкаОсновногоСчета" И Параметр.Владелец = Объект.Ссылка Тогда
		
		Объект.БанковскийСчетПоУмолчанию = Параметр.НовыйОсновнойСчет;
		Если НЕ Модифицированность Тогда
			Записать();
		КонецЕсли;
		Оповестить("УстановкаОсновногоСчетаВыполнена");
		
	ИначеЕсли ИмяСобытия = "УстановкаКонтактногоЛица" И Параметр.Контрагент = Объект.Ссылка Тогда
		
		Объект[Параметр.Реквизит] = Параметр.КонтактноеЛицо;
		Если НЕ Модифицированность Тогда
			Записать();
		КонецЕсли;
		Оповестить("УстановкаРеквизитаВыполнена",Параметр.КонтактноеЛицо);
		
	ИначеЕсли ИмяСобытия = "Запись_КонтактноеЛицо" 
		И (ДанныеКонтактныхЛиц.НайтиСтроки(Новый Структура("КонтактноеЛицо",Параметр.КонтактноеЛицо)).Количество() <> 0
		ИЛИ (Источник <> Неопределено И Источник.ВладелецФормы = ЭтотОбъект)) Тогда
		
		ОбновитьДанныеОбъекта();
		ЗаполнитьИОбновитьКонтактныеЛица();
		
	ИначеЕсли ИмяСобытия = "Выбор_КонтактноеЛицо" Тогда
		
		Если Источник.ВладелецФормы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если Источник.ВладелецФормы = ЭтотОбъект Тогда
			ОбновитьЭлементТаблицыКонтактныхЛиц(ИндексВыбранногоКонтактногоЛица,Параметр.Контакт);
			ТекущийЭлемент = Элементы.НаименованиеПолное;
			ЗаполнитьСписокВыбораНаименования(ЭтотОбъект);
			Если ФормироватьНаименованиеАвтоматически И Элементы.Наименование.СписокВыбора.Количество() > 0 Тогда
				Объект.Наименование = Элементы.Наименование.СписокВыбора[0].Значение;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ШаблоныПечатиОфисныхДокументов" И Параметр.Свойство("Назначение") Тогда
		
		Если Параметр.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагента") Тогда
			ГруппаКомандПечати = Элементы.ПодменюДоговорКонтрагента;
			УправлениеНебольшойФирмойКлиент.УстановитьПризнакПоявленияНовойКомандыПечати(ГруппаКомандПечати);
		КонецЕсли;
		
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	Если ИспользоватьСпаркРиски Тогда
		// ИнтернетПоддержкаПользователей.СПАРКРиски
		СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Объект, ИмяСобытия, Параметр, Источник);
		// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииПриЧтенииНаСервере();
	ЗаполнитьДополнительныеРеквизитыВзаиморасчетов();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "СправочникКонтрагентыЗапись");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Теги.ПередЗаписьюНаСервере(ЭтотОбъект,ТекущийОбъект);
	
	ПараметрыОтбораКонтактноеЛицо = Новый Структура;
	ПараметрыОтбораКонтактноеЛицо.Вставить("КонтактноеЛицо",ТекущийОбъект.КонтактноеЛицо);
	НайденноеКонтактноеЛицо = НедействительныеСвязиКонтактныеЛица.НайтиСтроки(ПараметрыОтбораКонтактноеЛицо);
	
	ПараметрыОтбораКонтактноеЛицоПодписант = Новый Структура;
	ПараметрыОтбораКонтактноеЛицоПодписант.Вставить("КонтактноеЛицо",ТекущийОбъект.КонтактноеЛицоПодписант);
	НайденноеКонтактноеЛицоПодписант = НедействительныеСвязиКонтактныеЛица.НайтиСтроки(ПараметрыОтбораКонтактноеЛицоПодписант);
	
	Если НайденноеКонтактноеЛицо.Количество() <> 0 Тогда
		ТекущийОбъект.КонтактноеЛицо = Неопределено;
	КонецЕсли;
	
	Если НайденноеКонтактноеЛицоПодписант.Количество() <> 0 Тогда
		ТекущийОбъект.КонтактноеЛицоПодписант = Неопределено;
	КонецЕсли;
	
	// Заполним основное контактное лицо первым имеющимся
	Если Не ЗначениеЗаполнено(ТекущийОбъект.КонтактноеЛицо) Тогда
		Для Каждого ДанныеКЛ Из ДанныеКонтактныхЛиц Цикл
			Если ЗначениеЗаполнено(ДанныеКЛ.КонтактноеЛицо) Тогда
				ТекущийОбъект.КонтактноеЛицо = ДанныеКЛ.КонтактноеЛицо;
				Прервать;
			ИначеЕсли Не ПустаяСтрока(ДанныеКЛ.Наименование) И ТИПЗНЧ(ДанныеКЛ.Наименование) = Тип("Строка") Тогда
				ТекущийОбъект.КонтактноеЛицо = Справочники.КонтактныеЛица.ПолучитьСсылку();
				ТекущийОбъект.ДополнительныеСвойства.Вставить("НовоеОсновноеКонтактноеЛицо", ТекущийОбъект.КонтактноеЛицо);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Заполним информацию о записываемых контактных лицах для реквизита "ОсновныеСведения"
	МассивСтрок = Новый Массив;
	Для Каждого ДанныеКЛ Из ДанныеКонтактныхЛиц Цикл
		
		Если ПустаяСтрока(ДанныеКЛ.Наименование) Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивСтрок.Количество() > 0 Тогда
			МассивСтрок.Добавить(Символы.ПС);
		КонецЕсли;
		
		МассивСтрок.Добавить(ДанныеКЛ.Наименование);
		
		Для Каждого ДанныеКИ Из ДанныеКЛ.КонтактнаяИнформация Цикл
			Если ПустаяСтрока(ДанныеКИ.Представление) Тогда
				Продолжить;
			КонецЕсли;
			МассивСтрок.Добавить(ДанныеКИ.Представление);
		КонецЦикла;
		
	КонецЦикла;
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ОсновныеСведенияКонтактныхЛиц", МассивСтрок);
	
	// Заполним служебный реквизит номера телефонов
	НомераТелефонов = Новый Массив;
	
	Для Каждого СтрокаКИ Из ЭтотОбъект["КонтактнаяИнформация"] Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон И Не ПустаяСтрока(СтрокаКИ.Представление) Тогда
			НомераТелефонов.Добавить(СтрокаКИ.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКЛ Из ДанныеКонтактныхЛиц Цикл
		Для Каждого СтрокаКИ Из СтрокаКЛ.КонтактнаяИнформация Цикл
			Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон И Не ПустаяСтрока(СтрокаКИ.Представление) Тогда
				НомераТелефонов.Добавить(СтрокаКИ.Представление);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТекущийОбъект.НомерТелефона = СтрСоединить(НомераТелефонов, ", ");
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец УНФ.КонтактнаяИнформация
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность", Модифицированность);
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереКонтрагент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьДанныеКонтактныхЛиц(ТекущийОбъект);
	
	ОбменСGoogle.УвеличитьЗначениеСчетчикаПодсказок(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПрочитатьДанныеПанелиДопИнформации();
	
	ЗаполнитьИОбновитьКонтактныеЛица();
	
	Если СопоставитьКонтактИАдресЭПВСобытияхПослеЗаписиОбъекта Тогда
		ЭлектроннаяПочтаУНФ.СопоставитьВФонеКонтактИАдресЭПВСобытиях(
		ТекущийОбъект.Ссылка,
		АдресЭП(),
		УникальныйИдентификатор);
		
		СопоставитьКонтактИАдресЭПВСобытияхПослеЗаписиОбъекта = Ложь;
	КонецЕсли;
	
	Если ИспользоватьСпаркРиски Тогда
		// ИнтернетПоддержкаПользователей.СПАРКРиски
		СПАРКРиски.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
		// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	КонецЕсли;
	
	//Обсуждения
	ОбсужденияСервер.ПослеЗаписиНаСервере(ТекущийОбъект);	
	// Конец Обсуждения
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьЗаголовокФормы(ЭтотОбъект);
	Оповестить("Запись_Контрагент", Объект.Ссылка, ЭтотОбъект);
	
	Для Каждого КонтактноеЛицо Из ДанныеКонтактныхЛиц Цикл
		Оповестить("ИзменениеКонтактногоЛица_Контрагент",КонтактноеЛицо.КонтактноеЛицо,ЭтотОбъект);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьЗаполнениеКонтактныхЛиц(Отказ);
	ПроверитьЗаполнениеКонтактнойИнформацииКонтактныхЛиц(Отказ);
	
	ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ);
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ);
	// Конец УНФ.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОстатокВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
	ОтборРасшифровки = Новый Соответствие;
	ОтборРасшифровки.Вставить("Контрагент", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ОтборРасшифровки", ОтборРасшифровки);
	Вариант =  СсылкаВариантаОтчета("АктСверки", "АктСверкиКонтекст");
	ВариантыОтчетовКлиент.ОткрытьФормуОтчета(ЭтаФорма, Вариант, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПродажОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта", "ДинамикаПродажПоПокупателям");
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Период,Контрагент", Новый СтандартныйПериод, Объект.Ссылка));
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.Продажи.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеКонтактногоЛица_ПриИзменении(Элемент)
	
	ЗаполнитьСписокВыбораНаименования(ЭтотОбъект);
	Если ФормироватьНаименованиеАвтоматически И Элементы.Наименование.СписокВыбора.Количество() > 0 Тогда
		Объект.Наименование = Элементы.Наименование.СписокВыбора[0].Значение;
	КонецЕсли;
	
	ОпределитьВидКонтрагента(ЭтотОбъект);
	УстановитьЗаголовокЮридическихДанных(ЭтотОбъект);
	УправлениеФормой();
	
	ИндексВыбранногоКонтактногоЛица = Число(Сред(Элемент.Имя, СтрДлина("НаименованиеКонтакт_")+1));
	ДанныеКонтактныхЛиц[ИндексВыбранногоКонтактногоЛица].Изменен = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеКонтактногоЛица_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// УНФ.Google
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ОписаниеОповещения") Тогда
		СтандартнаяОбработка = Ложь;
		ИндексВыбранногоКонтактногоЛица = Число(Сред(Элемент.Имя, СтрДлина("НаименованиеКонтакт_")+1));
		ВыполнитьОбработкуОповещения(ВыбранноеЗначение);
		
		ЗаполнитьСписокВыбораНаименования(ЭтотОбъект);
		Если ФормироватьНаименованиеАвтоматически И Элементы.Наименование.СписокВыбора.Количество() > 0 Тогда
			Объект.Наименование = Элементы.Наименование.СписокВыбора[0].Значение;
		КонецЕсли;
		
		Если ВыбранноеЗначение.ИмяПроцедуры = "СозданиеНовогоКонтакта" Тогда
			ТекущийЭлемент = Элементы.Найти("ПредставлениеКонтакт_"+ИндексВыбранногоКонтактногоЛица+"_КИ_0");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторКонтактов") Тогда
		
		СтандартнаяОбработка = Ложь;
		ИндексВыбранногоКонтактногоЛица = Число(Сред(Элемент.Имя, СтрДлина("НаименованиеКонтакт_")+1));
		ЗаполнитьНаименованиеИКонтактнуюИнформацию(ВыбранноеЗначение, Элемент.Имя);
		ОбновитьЭлементыКонтактныхЛиц();
		
		ЗаполнитьСписокВыбораНаименования(ЭтотОбъект);
		Если ФормироватьНаименованиеАвтоматически И Элементы.Наименование.СписокВыбора.Количество() > 0 Тогда
			Объект.Наименование = Элементы.Наименование.СписокВыбора[0].Значение;
		КонецЕсли;
		
		ТекущийЭлемент = Элементы.НаименованиеПолное;

	КонецЕсли;
	// Конец УНФ.Google
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		СтандартнаяОбработка = Ложь;
		ИндексВыбранногоКонтактногоЛица = Число(Сред(Элемент.Имя, СтрДлина("НаименованиеКонтакт_")+1));
		ОбновитьЭлементТаблицыКонтактныхЛиц(ИндексВыбранногоКонтактногоЛица,ВыбранноеЗначение);
		ТекущийЭлемент = Элементы.НаименованиеПолное;
		
		ЗаполнитьСписокВыбораНаименования(ЭтотОбъект);
		Если ФормироватьНаименованиеАвтоматически И Элементы.Наименование.СписокВыбора.Количество() > 0 Тогда
			Объект.Наименование = Элементы.Наименование.СписокВыбора[0].Значение;
		КонецЕсли;
		
		ОпределитьВидКонтрагента(ЭтотОбъект);
		УстановитьЗаголовокЮридическихДанных(ЭтотОбъект);
		УправлениеФормой();
		
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		СтандартнаяОбработка = Ложь;
		ИндексВыбранногоКонтактногоЛица = Число(Сред(Элемент.Имя, СтрДлина("НаименованиеКонтакт_")+1));
		
		ДанныеКонтактныхЛиц[ИндексВыбранногоКонтактногоЛица].Наименование = ВыбранноеЗначение;
		ДанныеКонтактныхЛиц[ИндексВыбранногоКонтактногоЛица].Изменен = Истина;
		
		ТекущийЭлемент = Элементы.Найти("ПредставлениеКонтакт_"+ИндексВыбранногоКонтактногоЛица+"_КИ_0");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеКонтактногоЛица_ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Индекс = Число(Сред(Элемент.Имя, СтрДлина("НаименованиеКонтакт_")+1));

	Элементы.Найти("УстановитьСвязь_" + Индекс).Доступность = Ложь;
	Элементы.Найти("РазорватьСвязь_" + Индекс).Доступность = Истина;
	
	ТекущийЭлемент = Элементы.Найти("ПредставлениеКонтакт_"+Индекс+"_КИ_0");
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеКонтактногоЛица_ИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Индекс = Число(Сред(Элемент.Имя, СтрДлина("НаименованиеКонтакт_")+1));
	Если ЗначениеЗаполнено(ДанныеКонтактныхЛиц[Индекс].КонтактноеЛицо) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеКонтактногоЛица_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ИндексВыбранногоКонтактногоЛица = Число(Сред(Элемент.Имя, СтрДлина("НаименованиеКонтакт_")+1));
	ПараметрыФормы.Вставить("ОткрытиеИзФормыКонтрагента",Истина);
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	ОткрытьФорму("Справочник.КонтактныеЛица.ФормаСписка",ПараметрыФормы,ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеКонтактногоЛица_Открытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ИндексВыбранногоКонтактногоЛица = Число(Сред(Элемент.Имя, СтрДлина("НаименованиеКонтакт_")+1));
	
	Если ЗначениеЗаполнено(ДанныеКонтактныхЛиц[ИндексВыбранногоКонтактногоЛица].КонтактноеЛицо) Тогда
		ПараметрыФормы.Вставить("Ключ",ДанныеКонтактныхЛиц[ИндексВыбранногоКонтактногоЛица].КонтактноеЛицо);
		ОткрытьФорму("Справочник.КонтактныеЛица.ФормаОбъекта",ПараметрыФормы);
		Возврат;
	КонецЕсли;
	
	ДанныеКонтактныхЛиц[ИндексВыбранногоКонтактногоЛица].Изменен = Истина;
	ДанныеКонтактныхЛиц[ИндексВыбранногоКонтактногоЛица].Наименование = Элемент.ТекстРедактирования;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Оповещение = Новый ОписаниеОповещения("ОбработатьВопросСозданиеКЛ",ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны." + Символы.ПС + "Переход к созданию контакта возможен только после записи данных." + Символы.ПС + "Данные будут записаны'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("НаименованиеКонтакта",Элемент.ТекстРедактирования);
	ПараметрыФормы.Вставить("Контрагент",Объект.Ссылка);
	
	ОткрытьФорму("Справочник.КонтактныеЛица.ФормаОбъекта",ПараметрыФормы,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	Объект.НаименованиеПолное = СтрЗаменить(Объект.НаименованиеПолное, Символы.ПС, " ");
	ЗаполнитьСписокВыбораНаименования(ЭтотОбъект);
	Если ФормироватьНаименованиеАвтоматически И Элементы.Наименование.СписокВыбора.Количество() > 0 Тогда
		Объект.Наименование = Элементы.Наименование.СписокВыбора[0].Значение;
	КонецЕсли;
	
	ОпределитьВидКонтрагента(ЭтотОбъект);
	УстановитьЗаголовокЮридическихДанных(ЭтотОбъект);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКонтрагентаПриИзменении(Элемент)
	
	ВыполнитьВсеПроверки(ЭтотОбъект);
	
	УстановитьЗаголовокЮридическихДанных(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.СтранаРегистрации)
		И Объект.ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.ЮридическоеЛицо") Тогда
		Объект.СтранаРегистрации = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
	КонецЕсли;
	
	УправлениеФормой();
	
	Если ИспользоватьСпаркРиски Тогда
		// ИнтернетПоддержкаПользователей.СПАРКРиски
		ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
		ОбновитьОтображениеИндексыСПАРК();
		// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	УстановитьРеквизитыПроверкиКонтрагентов(ЭтотОбъект);
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура СтранаРегистрацииПриИзменении(Элемент)
	
	СформироватьПредставлениеПроверкиОГРН(ЭтотОбъект);
	РаботаСКонтрагентамиКлиентСерверПереопределяемый.СформироватьПредставлениеПроверкиДанных(ЭтотОбъект);
	
	УправлениеФормой();
	
	Если ИспользоватьСпаркРиски Тогда
		// ИнтернетПоддержкаПользователей.СПАРКРиски
		ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
		ОбновитьОтображениеИндексыСПАРК();
		// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	УстановитьРеквизитыПроверкиКонтрагентов(ЭтотОбъект);
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	СформироватьПредставлениеПроверкиИНН(ЭтотОбъект);
	
	Если Объект.ИННВведенКорректно И ПустаяСтрока(Объект.КПП) И Элементы.КПП.Видимость Тогда
		РаботаСКонтрагентамиКлиентСерверПереопределяемый.ЗаполнитьКППпоИНН(Объект.ИНН, Объект.КПП);
	КонецЕсли;
	
	СформироватьПредставлениеПроверкиДублей(ЭтотОбъект);
	
	РаботаСКонтрагентамиКлиентСерверПереопределяемый.СформироватьПредставлениеПроверкиДанных(ЭтотОбъект);
	УстановитьЗаголовокЮридическихДанных(ЭтотОбъект);
	
	Если Не ПустаяСтрока(Объект.ИНН) И Объект.ИННВведенКорректно И Не КлючевыеРеквизитыЗаполнены(ЭтотОбъект) Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН(Объект.ИНН);
	КонецЕсли;
	
	Если ИспользоватьСпаркРиски Тогда
		// ИнтернетПоддержкаПользователей.СПАРКРиски
		ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
		ОбновитьОтображениеИндексыСПАРК();
		// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	УстановитьРеквизитыПроверкиКонтрагентов(ЭтотОбъект);
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	
	СформироватьПредставлениеПроверкиКПП(ЭтотОбъект);
	СформироватьПредставлениеПроверкиДублей(ЭтотОбъект);
	
	РаботаСКонтрагентамиКлиентСерверПереопределяемый.СформироватьПредставлениеПроверкиДанных(ЭтотОбъект);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	УстановитьРеквизитыПроверкиКонтрагентов(ЭтотОбъект);
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКПОПриИзменении(Элемент)
	
	СформироватьПредставлениеПроверкиОКПО(ЭтотОбъект);
	РаботаСКонтрагентамиКлиентСерверПереопределяемый.СформироватьПредставлениеПроверкиДанных(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрационныйНомерПриИзменении(Элемент)
	
	СформироватьПредставлениеПроверкиОГРН(ЭтотОбъект);
	РаботаСКонтрагентамиКлиентСерверПереопределяемый.СформироватьПредставлениеПроверкиДанных(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидГосударственногоОрганаПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПроверкиДанныхОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если СтрНайти(НавигационнаяСсылкаФорматированнойСтроки, "ПоказатьДубли") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИНН", СокрЛП(Объект.ИНН));
		ПараметрыФормы.Вставить("КПП", СокрЛП(Объект.КПП));
		ПараметрыФормы.Вставить("ЭтоЮрЛицо", ЭтоЮрЛицо(Объект.ВидКонтрагента));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСпискаДублей", ЭтотОбъект);
		ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбораДублей", ПараметрыФормы, Элемент,,,,ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОблакоТеговОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОблакоТеговОбработкаНавигационнойСсылкиСервер(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупательПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент,
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиРасчетыПоДокументамПриИзменении(Элемент)
	
	Если ВключенаОтчетность() И НЕ Объект.ВестиРасчетыПоДокументам Тогда
		Объект.ВестиРасчетыПоДокументам = Истина;
		ПоказатьПредупреждение(,НСтр("ru = 'При включенном разделе ""Налоги"" необходимо всегда вести расчеты по документам'"));
		
	КонецЕсли;
	
	ВестиУчетОплатыПоНакладным = Объект.ВестиРасчетыПоДокументам;
	
	СформироватьЗаголовокГруппыДеньги();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиРасчетыПоЗаказамПриИзменении(Элемент)
	
	ВестиУчетОплатыПоЗаказам = Объект.ВестиРасчетыПоЗаказам;
	СформироватьЗаголовокГруппыДеньги();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиРасчетыПоДоговорамПриИзменении(Элемент)
	
	СформироватьЗаголовокГруппыДеньги();
	УстановитьЗаголовкиИВидимостьПриИзмененииФлагаРасчетовПоДоговорам();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетОплатыПоСчетамПриИзменении(Элемент)
	
	СформироватьЗаголовокГруппыДеньги();
	
КонецПроцедуры

&НаКлиенте
Процедура ГоловнойКонтрагентПриИзменении(Элемент)
	
	ГоловнойКонтрагентПриИзмененииНаСервере();
	
	УправлениеФормой();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	УстановитьРеквизитыПроверкиКонтрагентов(ЭтотОбъект);
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьШаблоныПечатиДоговоровКонтрагентов(Команда)
	
	УправлениеНебольшойФирмойКлиент.ОткрытьШаблоныПечатиОфисныхДокументов(
	ПредопределенноеЗначение("Перечисление.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагента"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоДаннымЕГР(Команда)
	
	Если Не ПустаяСтрока(Объект.ИНН) И Объект.ИННВведенКорректно Тогда
	// Выполняем заполнение по ИНН без открытия вспомогательной формы
		
		Если КлючевыеРеквизитыЗаполнены(ЭтотОбъект) Тогда
			ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПерезаполнитьРеквизитыПоИННЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ВыполнитьЗаполнениеРеквизитовПоИНН(Объект.ИНН);
		КонецЕсли;
		
	Иначе
	// Открываем форму заполнения реквизитов
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СтрокаПоиска", ?(ПустаяСтрока(Объект.НаименованиеПолное), Объект.ИНН, Объект.НаименованиеПолное));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнениеРеквизитовКонтрагентВыбран", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ЗаполнениеРеквизитовКонтрагента", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоляКонтактногоЛица(Команда)
	
	ДанныеКЛ = ДанныеКонтактныхЛиц.Добавить();
	
	ЗаполнитьВсегдаВыводимыеВидыКИ(
		ДанныеКЛ.КонтактнаяИнформация,
		СвойстваВидовКонтактнойИнформацииКонтактныхЛиц);
	
	ОбновитьЭлементыКонтактныхЛиц();
	ТекущийЭлемент = Элементы["НаименованиеКонтакт_" + ДанныеКонтактныхЛиц.Индекс(ДанныеКЛ)];
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПолеКонтактнойИнформацииКонтактногоЛица(Команда)
	
	ИндексКонтакта = Число(Сред(ТекущийЭлемент.Имя, СтрДлина("ДобавитьПолеКонтактнойИнформацииКонтактногоЛица_")+1));
	ДанныеКонтакта = ДанныеКонтактныхЛиц[ИндексКонтакта];
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИндексКонтакта", ИндексКонтакта);
	ДополнительныеПараметры.Вставить("МножественнаяФормаВладельца", НСтр("ru='контактных лиц'"));
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьКонтактнуюИнформациюКонтактаВидВыбран", ЭтотОбъект, ДополнительныеПараметры);
	
	СписокДоступныхВидов = Новый СписокЗначений;
	Отбор = Новый Структура("Вид");
	Для Каждого СтрокаТаблицы Из СвойстваВидовКонтактнойИнформацииКонтактныхЛиц Цикл
		Отбор.Вид = СтрокаТаблицы.Вид;
		Если СтрокаТаблицы.РазрешитьВводНесколькихЗначений Или ДанныеКонтакта.КонтактнаяИнформация.НайтиСтроки(Отбор).Количество() = 0 Тогда
			СписокДоступныхВидов.Добавить(СтрокаТаблицы.Вид, СтрокаТаблицы.ПредставлениеВида);
		КонецЕсли;
	КонецЦикла;
	
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокДоступныхВидов, ТекущийЭлемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты"));
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвязь(Команда)
	
	ИндексВыбранногоКонтактногоЛица = Число(Сред(Команда.Имя, СтрДлина("КомандаУстановитьСвязь_")+1));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОткрытиеИзФормыКонтрагента",Истина);
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	ОткрытьФорму("Справочник.КонтактныеЛица.ФормаСписка",ПараметрыФормы,ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РазорватьСвязь(Команда)
	
	ИндексВыбранногоКонтактногоЛица = Число(Сред(Команда.Имя, СтрДлина("КомандаРазорватьСвязь_")+1));
	ДанныеКонтактногоЛица = ДанныеКонтактныхЛиц[ИндексВыбранногоКонтактногоЛица];
	
	КонтактОсновноеКЛ = ДанныеКонтактногоЛица.КонтактноеЛицо = Объект.КонтактноеЛицо И ЗначениеЗаполнено(Объект.КонтактноеЛицо);
	КонтактПодписант = ДанныеКонтактногоЛица.КонтактноеЛицо = Объект.КонтактноеЛицоПодписант И ЗначениеЗаполнено(Объект.КонтактноеЛицоПодписант);
	Если НЕ КонтактОсновноеКЛ И НЕ КонтактПодписант Тогда
		РазорватьСвязьНаСервере();
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВопросОсновноеКЛВыборКонтрагента", ЭтотОбъект);
	ПроверитьКонтактНаОсновнойИПодписанта(ДанныеКонтактногоЛица, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерсональныеДанныеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("ЖурналДокументов.СогласияНаОбработкуПерсональныхДанных.ФормаСписка");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииПриЧтенииНаСервере()
	
	// 1. Инициализация реквизитов формы
	
	КлассификаторОПФ.Загрузить(РегламентированныеДанныеПовтИсп.КлассификаторОрганизационноПравовыхФорм());
	
	ПросмотрВзаиморасчетов	= УправлениеНебольшойФирмойУправлениеДоступомПовтИсп.ЕстьПравоДоступа(
		"Просмотр",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.Взаиморасчеты)
	);
	ПросмотрПродаж			= УправлениеНебольшойФирмойУправлениеДоступомПовтИсп.ЕстьПравоДоступа(
		"Просмотр",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.Продажи)
	);
	
	// 2. Чтение дополнительных данных
	
	ПрочитатьСвойстваВидовКонтактнойИнформацииКонтактныхЛиц();
	ЗаполнитьТаблицуКонтактнойИнформацииКонтактныхЛиц();
	ОбновитьЭлементыКонтактныхЛиц();
	
	Теги.ПриСозданииПриЧтенииНаСервере(ЭтотОбъект,Объект);
	
	ПрочитатьДанныеПанелиДопИнформации();
	
	УстановитьЗаголовокЮридическихДанных(ЭтотОбъект);
	
	// Заполним список возможных кратких наименований и определим флаг автоматической смены краткого наименования
	
	ЗаполнитьСписокВыбораНаименования(ЭтотОбъект);
	
	ФормироватьНаименованиеАвтоматически = ПустаяСтрока(Объект.Наименование)
		Или Элементы.Наименование.СписокВыбора.НайтиПоЗначению(Объект.Наименование) <> Неопределено
		Или (ДанныеКонтактныхЛиц.Количество() > 0 И Элементы.Наименование.СписокВыбора.НайтиПоЗначению(ДанныеКонтактныхЛиц[0].Наименование) <> Неопределено);
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ПриСозданииПриЧтенииНаСервере(ЭтотОбъект);
	// Конец УНФ.КонтактнаяИнформация
	
	Если Параметры.Свойство("КонтактКакСвязаться", КонтактКакСвязаться) Тогда
		ЗаполнитьКонтактКакСвязаться();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()
	
	ЭтоЮридическоеЛицо = (Объект.ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.ЮридическоеЛицо"));
	
	// Изменяем видимость реквизитов формы в зависимости от вида контрагента
	Если ЭтоЮридическоеЛицо Тогда
		
		КонтрагентЗарегистрированВРФ = Объект.СтранаРегистрации = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
		
		Элементы.СтранаРегистрации.Видимость				= Истина;
		Элементы.ФИО.Видимость								= Ложь;
		Элементы.ИНН.Видимость								= Истина;
		Элементы.КПП.Видимость								= КонтрагентЗарегистрированВРФ;
		Элементы.КодПоОКПО.Видимость						= КонтрагентЗарегистрированВРФ;
		Элементы.РегистрационныйНомер.Видимость				= Истина;
		Элементы.ВидГосударственногоОргана.Видимость		= Ложь;
		Элементы.КодГосударственногоОргана.Видимость		= Ложь;
		Элементы.СвидетельствоСерияНомер.Видимость			= Ложь;
		Элементы.СвидетельствоДатаВыдачи.Видимость			= Ложь;
		Элементы.ДокументУдостоверяющийЛичность.Видимость	= Ложь;
		Элементы.Пол.Видимость								= Ложь;
		Элементы.ДатаРождения.Видимость						= Ложь;
		
		Элементы.ИНН.ПодсказкаВвода							= НСтр("ru = '10 цифр'");
		Элементы.ИНН.ОграничениеТипа						= Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(10));
		Элементы.КодПоОКПО.ПодсказкаВвода					= НСтр("ru = '8 цифр'");
		Элементы.КодПоОКПО.ОграничениеТипа					= Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(8));
		
		Если КонтрагентЗарегистрированВРФ Тогда
			Элементы.РегистрационныйНомер.Заголовок			= НСтр("ru = 'ОГРН'");
			Элементы.РегистрационныйНомер.Подсказка			= НСтр("ru = 'Основной государственный регистрационный номер юридического лица'");
			Элементы.РегистрационныйНомер.ПодсказкаВвода	= НСтр("ru = '13 цифр'");
			Элементы.РегистрационныйНомер.ОграничениеТипа	= Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(13));
			Элементы.ИНН.Подсказка							= НСтр("ru = 'Идентификационный номер налогоплательщика'");
		Иначе
			Элементы.РегистрационныйНомер.Заголовок			= НСтр("ru='Рег. номер'");
			Элементы.РегистрационныйНомер.Подсказка			= НСтр("ru='Регистрационный номер, присвоенный иностранной организации в стране регистрации (инкорпорации)'");
			Элементы.РегистрационныйНомер.ПодсказкаВвода	= НСтр("ru='Рег. номер в стране регистрации'");
			Элементы.РегистрационныйНомер.ОграничениеТипа	= Новый ОписаниеТипов("Строка");
			Элементы.ИНН.Подсказка							= НСтр("ru = 'Идентификационный номер налогоплательщика, присваивается иностранной организации 
																	|при первой постановке на учет в налоговом органе Российской Федерации'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИНН", "Доступность", НЕ ЗначениеЗаполнено(Объект.ГоловнойКонтрагент));
		
	ИначеЕсли Объект.ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.ИндивидуальныйПредприниматель") Тогда
		
		Элементы.СтранаРегистрации.Видимость				= Ложь;
		Элементы.ФИО.Видимость								= Истина;
		Элементы.ИНН.Видимость								= Истина;
		Элементы.КПП.Видимость								= Ложь;
		Элементы.КодПоОКПО.Видимость						= Истина;
		Элементы.РегистрационныйНомер.Видимость				= Истина;
		Элементы.ВидГосударственногоОргана.Видимость		= Ложь;
		Элементы.КодГосударственногоОргана.Видимость		= Ложь;
		Элементы.СвидетельствоСерияНомер.Видимость			= Истина;
		Элементы.СвидетельствоДатаВыдачи.Видимость			= Истина;
		Элементы.ДокументУдостоверяющийЛичность.Видимость	= Истина;
		Элементы.Пол.Видимость								= Истина;
		Элементы.ДатаРождения.Видимость						= Истина;
		
		Элементы.РегистрационныйНомер.Заголовок				= НСтр("ru = 'ОГРН ИП'");
		Элементы.РегистрационныйНомер.Подсказка 			= НСтр("ru = 'Основной государственный регистрационный номер индивидуального предпринимателя, 
																	|указан в Свидетельстве о государственной регистрации физического лица в качестве ИП'");
		Элементы.РегистрационныйНомер.ПодсказкаВвода		= НСтр("ru = '15 цифр'");
		Элементы.РегистрационныйНомер.ОграничениеТипа		= Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(15));
		Элементы.ИНН.ПодсказкаВвода							= НСтр("ru = '12 цифр'");
		Элементы.ИНН.ОграничениеТипа						= Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12));
		Элементы.КодПоОКПО.ПодсказкаВвода					= НСтр("ru = '10 цифр'");
		Элементы.КодПоОКПО.ОграничениеТипа					= Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(10));
		
	ИначеЕсли Объект.ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.ФизическоеЛицо") Тогда
		
		Элементы.СтранаРегистрации.Видимость				= Ложь;
		Элементы.ФИО.Видимость								= Истина;
		Элементы.ИНН.Видимость								= Истина;
		Элементы.КПП.Видимость								= Ложь;
		Элементы.КодПоОКПО.Видимость						= Ложь;
		Элементы.РегистрационныйНомер.Видимость				= Ложь;
		Элементы.ВидГосударственногоОргана.Видимость		= Ложь;
		Элементы.КодГосударственногоОргана.Видимость		= Ложь;
		Элементы.СвидетельствоСерияНомер.Видимость			= Ложь;
		Элементы.СвидетельствоДатаВыдачи.Видимость			= Ложь;
		Элементы.ДокументУдостоверяющийЛичность.Видимость	= Истина;
		Элементы.Пол.Видимость								= Истина;
		Элементы.ДатаРождения.Видимость						= Истина;
		
		Элементы.ИНН.ПодсказкаВвода		= НСтр("ru = '12 цифр'");
		Элементы.ИНН.ОграничениеТипа	= Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12));
		
	ИначеЕсли Объект.ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.ГосударственныйОрган") Тогда
		
		Элементы.СтранаРегистрации.Видимость				= Ложь;
		Элементы.ФИО.Видимость								= Ложь;
		Элементы.ИНН.Видимость								= Истина;
		Элементы.КПП.Видимость								= Истина;
		Элементы.КодПоОКПО.Видимость						= Ложь;
		Элементы.РегистрационныйНомер.Видимость				= Ложь;
		Элементы.ВидГосударственногоОргана.Видимость		= Истина;
		Элементы.КодГосударственногоОргана.Видимость		= Истина;
		Элементы.СвидетельствоСерияНомер.Видимость			= Ложь;
		Элементы.СвидетельствоДатаВыдачи.Видимость			= Ложь;
		Элементы.ДокументУдостоверяющийЛичность.Видимость	= Ложь;
		Элементы.Пол.Видимость								= Ложь;
		Элементы.ДатаРождения.Видимость						= Ложь;
		
		Элементы.ИНН.ПодсказкаВвода		= НСтр("ru = '10 цифр'");
		Элементы.ИНН.ОграничениеТипа	= Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(10));
		
		Если ЗначениеЗаполнено(Объект.ВидГосударственногоОргана) Тогда
			
			Если Объект.ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.НалоговыйОрган") Тогда
				Элементы.КодГосударственногоОргана.ОграничениеТипа	= Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4));
				Элементы.КодГосударственногоОргана.Заголовок		= НСтр("ru = 'Код инспекции'");
			ИначеЕсли Объект.ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганПФР") Тогда
				Элементы.КодГосударственногоОргана.ОграничениеТипа	= Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3));
				Элементы.КодГосударственногоОргана.Заголовок		= НСтр("ru = 'Код отделения'");
			ИначеЕсли Объект.ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганФСС") Тогда
				Элементы.КодГосударственногоОргана.ОграничениеТипа	= Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4));
				Элементы.КодГосударственногоОргана.Заголовок		= НСтр("ru = 'Код отделения'");
			Иначе
				Элементы.КодГосударственногоОргана.ОграничениеТипа	= Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10));
				Элементы.КодГосударственногоОргана.Заголовок		= НСтр("ru = 'Код'");
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ИсточникПривлеченияПокупателя.Видимость = Объект.Покупатель;
	Если ОбязательноЗаполнятьИсточникВПокупателях И Объект.Покупатель Тогда
		Элементы.ИсточникПривлеченияПокупателя.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	Элементы.ОстатокВзаиморасчетов.Видимость	= ЭтотОбъект.ПросмотрВзаиморасчетов;
	Элементы.СуммаПродаж.Видимость				= ЭтотОбъект.ПросмотрПродаж И Объект.Покупатель;
	Элементы.ПоследняяПродажа.Видимость			= ЭтотОбъект.ПросмотрПродаж И Объект.Покупатель;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГоловнойКонтрагент", "Видимость", ЭтоЮридическоеЛицо И НЕ ЭтотКонтрагентЯвляетсяГоловным);
	
	// Взаиморасчеты
	УстановитьВидимостьФлагаВ_УЕ();
	УстановитьЗаголовкиИВидимостьПриИзмененииФлагаРасчетовПоДоговорам();
	// Конец Взаиморасчеты
	
	//EFSOL_Шаповал Олег Анатольевич 14 сентября 2017 г. 9:07:56 +
	ES_УстановитьВидимостьЭлементовФормы();
	//EFSOL Шаповал О.А. -
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ)
	
	ОбязательныеДляЗаполненияРеквизиты = РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательныеДляЗаполненияРеквизитыОбъекта("Покупатель");
	
	Для Каждого Реквизит Из ОбязательныеДляЗаполненияРеквизиты Цикл
		
		Если Реквизит = "ИсточникПривлечения" И НЕ Объект.Покупатель Тогда
			Продолжить;
		КонецЕсли;

		Если Реквизит = "ИсточникПривлечения" Тогда
			Реквизит = "ИсточникПривлеченияПокупателя";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект[Реквизит]) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", 
			"Источник привлечения"),,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Объект[%1]", Реквизит),,
			Отказ);
			
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма)
	
	Объект = Форма.Объект;
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Форма.Автозаголовок = Истина;
		Возврат;
	КонецЕсли;
	
	Форма.Автозаголовок = Ложь;
	ВидыОтношений = Новый Массив;
	
	Если Объект.Покупатель Тогда
		ВидыОтношений.Добавить(НСтр("ru='Покупатель'"));
	КонецЕсли;
	
	Если Объект.Поставщик Тогда
		ВидыОтношений.Добавить(НСтр("ru='Поставщик'"));
	КонецЕсли;
	
	Если Объект.ПрочиеОтношения Тогда
		ВидыОтношений.Добавить(НСтр("ru='Прочие отношения'"));
	КонецЕсли;
	
	Заголовок = Объект.Наименование + " (" + НСтр("ru='Контрагент'");
	
	Если ВидыОтношений.Количество() > 0 Тогда
		Заголовок = Заголовок + ": ";
		Для Каждого Вид Из ВидыОтношений Цикл
			Заголовок = Заголовок + Вид + ", ";
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Заголовок, 2);
	КонецЕсли;
	
	Заголовок = Заголовок + ")";
	
	Форма.Заголовок = Заголовок;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораНаименования(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СписокВыбора = Элементы.Наименование.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если Не ПустаяСтрока(Объект.НаименованиеПолное) Тогда
		
		Форма.ОрганизационноПравоваяФорма = УправлениеНебольшойФирмойКлиентСервер.ВыделитьИзНаименованияОПФ(Форма.КлассификаторОПФ, Объект.НаименованиеПолное);
		
		СписокВыбора.Добавить(Форма.ОрганизационноПравоваяФорма.НаименованиеБезОПФ);
		
		Если НЕ ПустаяСтрока(Форма.ОрганизационноПравоваяФорма.КраткаяФорма) Тогда
			СписокВыбора.Вставить(0, Форма.ОрганизационноПравоваяФорма.НаименованиеБезОПФ + " " + Форма.ОрганизационноПравоваяФорма.КраткаяФорма);
			СписокВыбора.Добавить(Форма.ОрганизационноПравоваяФорма.КраткаяФорма + " " + Форма.ОрганизационноПравоваяФорма.НаименованиеБезОПФ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.ДанныеКонтактныхЛиц.Количество() > 0 И Не ПустаяСтрока(Форма.ДанныеКонтактныхЛиц[0].Наименование) Тогда
		СписокВыбора.Добавить(Строка(Форма.ДанныеКонтактныхЛиц[0].Наименование));
	КонецЕсли;
	
	Форма.Элементы.Наименование.КнопкаВыпадающегоСписка = СписокВыбора.Количество() > 0;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьВидКонтрагента(Форма)
	
	Если ТипЗнч(Форма.ОрганизационноПравоваяФорма) <> Тип("Структура") 
		Или Не Форма.ОрганизационноПравоваяФорма.Свойство("ПолнаяФорма") Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ОрганизационноПравоваяФорма.ПолнаяФорма = "Индивидуальный предприниматель" Тогда
		Объект.ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.ИндивидуальныйПредприниматель");
	ИначеЕсли Не ПустаяСтрока(Форма.ОрганизационноПравоваяФорма.ПолнаяФорма) Тогда
		Объект.ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.ЮридическоеЛицо");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыСпискаДублей(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СформироватьПредставлениеПроверкиДублей(ЭтотОбъект);
	РаботаСКонтрагентамиКлиентСерверПереопределяемый.СформироватьПредставлениеПроверкиДанных(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоТекстуЗаполнения(Знач ТекстЗаполнения)
	
	Если (СтрДлина(ТекстЗаполнения) = 10 ИЛИ СтрДлина(ТекстЗаполнения) = 12)
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТекстЗаполнения) Тогда
		
		Объект.Наименование = "";
		Объект.ИНН = ТекстЗаполнения;
		Объект.ВидКонтрагента = ?(СтрДлина(ТекстЗаполнения) = 10,
			Перечисления.ВидыКонтрагентов.ЮридическоеЛицо,
			Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель);
		ТекстЗаполнения = Неопределено;
		
		ОписаниеОшибкиЗаполнения = "";
		ЗаполнитьРеквизитыПоИНННаСервере(Объект.ИНН);
		
		УстановитьЗаголовокЮридическихДанных(ЭтотОбъект);
		
	Иначе
		
		Объект.НаименованиеПолное = ТекстЗаполнения;
		ТекущийЭлемент = Элементы.НаименованиеПолное;
		
		ФормироватьНаименованиеАвтоматически = Истина;
		ЗаполнитьСписокВыбораНаименования(ЭтотОбъект);
		Если Элементы.Наименование.СписокВыбора.Количество() > 0 Тогда
			Объект.Наименование = Элементы.Наименование.СписокВыбора[0];
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтактКакСвязаться()
	
	Если КонтактКакСвязаться.ВидКонтакта = "Контрагент" Тогда
		
		Если КонтактКакСвязаться.ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			ВидКИ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EmailКонтрагента");
		ИначеЕсли КонтактКакСвязаться.ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ВидКИ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента");
		КонецЕсли;
		Если ВидКИ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Объект.Наименование = КонтактКакСвязаться.Контакт;
		Объект.НаименованиеПолное = КонтактКакСвязаться.Контакт;
		
		СтрокаКИ = НайтиИлиДобавитьНовуюСтрокуКИ(ЭтотОбъект.КонтактнаяИнформация, КонтактКакСвязаться.ТипКИ);
		СтрокаКИ.Представление = КонтактКакСвязаться.КакСвязаться;
		СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(КонтактКакСвязаться.КакСвязаться, ВидКИ);
		СтрокаКИ.Вид = ВидКИ;
		
	КонецЕсли;
	
	Если КонтактКакСвязаться.ВидКонтакта = "КонтактноеЛицо" Тогда
		
		Если КонтактКакСвязаться.ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			ВидКИ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EmailКонтактногоЛица");
		ИначеЕсли КонтактКакСвязаться.ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ВидКИ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица");
		КонецЕсли;
		Если ВидКИ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда
			Объект.Наименование = КонтактКакСвязаться.Контакт;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ФИО) Тогда
			Объект.ФИО = КонтактКакСвязаться.Контакт;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеКонтактныхЛиц[0].Наименование) Тогда
			ДанныеКЛ = ДанныеКонтактныхЛиц.Добавить();
			ЗаполнитьВсегдаВыводимыеВидыКИ(
				ДанныеКЛ.КонтактнаяИнформация,
				СвойстваВидовКонтактнойИнформацииКонтактныхЛиц);
		Иначе
			ДанныеКЛ = ДанныеКонтактныхЛиц[0];
		КонецЕсли;
		
		Если ТипЗнч(КонтактКакСвязаться.Контакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			ДанныеКЛ.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтактКакСвязаться.Контакт, "Наименование");
			ДанныеКЛ.КонтактноеЛицо = КонтактКакСвязаться.Контакт;
			ДанныеКЛ.Изменен = Истина;
		Иначе
			ДанныеКЛ.Наименование = КонтактКакСвязаться.Контакт;
			ДанныеКЛ.Изменен = Истина;
		КонецЕсли;
		
		ОбновитьЭлементыКонтактныхЛиц();
		ТекущийЭлемент = Элементы["НаименованиеКонтакт_" + ДанныеКонтактныхЛиц.Индекс(ДанныеКЛ)];
		
		СтрокаКИ = НайтиИлиДобавитьНовуюСтрокуКИ(ДанныеКЛ.КонтактнаяИнформация, КонтактКакСвязаться.ТипКИ);
		СтрокаКИ.Представление = КонтактКакСвязаться.КакСвязаться;
		СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(КонтактКакСвязаться.КакСвязаться, ВидКИ);
		СтрокаКИ.Вид = ВидКИ;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиИлиДобавитьНовуюСтрокуКИ(КонтактнаяИнформация, ТипКонтактнойИнформации)
	
	НайденныеСтроки = КонтактнаяИнформация.НайтиСтроки(
	Новый Структура("Тип,Значение", ТипКонтактнойИнформации, ""));
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если Не ЗначениеЗаполнено(НайденнаяСтрока.Представление) Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	// Добавляем новую строку КИ с группировкой по типу КИ
	КоличествоЭлементовКоллекции = КонтактнаяИнформация.Количество();
	ИндексВставки = КоличествоЭлементовКоллекции;
	
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		ТекущийИндекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		Если КонтактнаяИнформация[ТекущийИндекс].Тип = ТипКонтактнойИнформации Тогда
			ИндексВставки = ТекущийИндекс + 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат = КонтактнаяИнформация.Вставить(ИндексВставки);
	Результат.Тип = ТипКонтактнойИнформации;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьВсегдаВыводимыеВидыКИ(КИ, СвойстваВидовКонтактнойИнформацииКонтактныхЛиц)
	
	НайденныеСтроки = СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.НайтиСтроки(Новый Структура("ВыводитьВФормеВсегда", Истина));
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		НоваяСтрокаКИ = КИ.Добавить();
		НоваяСтрокаКИ.Вид = НайденнаяСтрока.Вид;
		НоваяСтрокаКИ.Тип = НайденнаяСтрока.Тип;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СсылкаВариантаОтчета(ИмяОтчета, КлючВарианта)
	
	Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Отчет." + ИмяОтчета);
	Возврат ВариантыОтчетов.ВариантОтчета(Отчет, КлючВарианта);
	
КонецФункции

&НаСервере
Функция АдресЭП()
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	НайденныеСтроки = ДанныеКонтактныхЛиц[0].КонтактнаяИнформация.НайтиСтроки(ПараметрыОтбора);
	
	Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат НайденныеСтроки[0].Значение;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьИДоступностьМобильноеПриложениеИРМК()
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность()
		ИЛИ УправлениеНебольшойФирмойУправлениеДоступомПовтИсп.ЕстьПрофильРабочееМестоКассира() Тогда
		
		Элементы.ПанельДополнительнойИнформации.Видимость = Ложь;
		Элементы.ФормаЗаполнитьРеквизитыПоДаннымЕГР.Видимость = Ложь;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "ФормаСправочникКонтрагентыДосьеКонтрагента", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "ПроверитьКонтрагента", "Видимость", Ложь);
		Элементы.ОбработкаНастройкаПрограммыБольшеВозможностейКонтекст.Видимость = Ложь;
		Элементы.ЮридическиеДанные.Видимость = Ложь;
		Элементы.Взаиморасчеты.Видимость = Ложь;
		Элементы.Ответственный.Видимость = Ложь;
		Элементы.ДобавитьДополнительныйРеквизит.Видимость = Ложь;
		Элементы.ИсточникПривлеченияПокупателя.Видимость = Ложь;
		Элементы.ВсеКонтакты.Видимость = Ложь;
		Элементы.ПокупательПоставщикПрочие.Видимость = Ложь;
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Объект.ВестиРасчетыПоДоговорам = Ложь;
			Объект.ВестиРасчетыПоДокументам = Ложь;
			Объект.Покупатель = Истина;
			Объект.Поставщик = Истина;
			Объект.ПрочиеОтношения = Истина;
		КонецЕсли;
	КонецЕсли;
	// Конец МобильноеПриложение
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступность()
	
	Элементы.СтатьяДДСПоУмолчанию.Видимость = УправлениеНебольшойФирмойУправлениеДоступомПовтИсп.ЕстьПравоДоступа(
		"Чтение",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.СтатьиДвиженияДенежныхСредств)
	);
	
КонецПроцедуры

&НаСервере
Функция ВключенаОтчетность()
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьОтчетность");
КонецФункции

&НаСервере
Процедура ЗаполнитьДополнительныеРеквизитыВзаиморасчетов()
	
	ВестиУчетОплатыПоЗаказам = Объект.ВестиРасчетыПоЗаказам;
	ВестиУчетОплатыПоНакладным = Объект.ВестиРасчетыПоДокументам;
	
	СформироватьЗаголовокГруппыДеньги();
	
	
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ВалютаРасчетовПоУмолчанию = НациональнаяВалюта;
	КонецЕсли;
	
	Если Объект.СпособЗачетаПредоплатыПоУмолчанию.Пустая() Тогда
		Объект.СпособЗачетаПредоплатыПоУмолчанию = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаПредоплатыПоУмолчанию();
	КонецЕсли;
	Если Объект.СпособРазнесенияОплатыПоУмолчанию.Пустая() Тогда
		Объект.СпособРазнесенияОплатыПоУмолчанию = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособРазнесенияОплатыПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокГруппыДеньги()
	
	РасчетыРаботаСФормамиВызовСервера.СформироватьЗаголовокГруппыДеньги(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура РазорватьСвязьНаСервере()
	
	ДанныеКонтактногоЛица = ДанныеКонтактныхЛиц[ИндексВыбранногоКонтактногоЛица];
	
	Если ЗначениеЗаполнено(ДанныеКонтактногоЛица.КонтактноеЛицо) Тогда
		НедействительнаяСвязьСКонтрагентом = НедействительныеСвязиКонтактныеЛица.Добавить();
		НедействительнаяСвязьСКонтрагентом.КонтактноеЛицо = ДанныеКонтактногоЛица.КонтактноеЛицо;
		НедействительнаяСвязьСКонтрагентом.Должность = ДанныеКонтактногоЛица.Должность;
	КонецЕсли;
	
	ДанныеКонтактногоЛица.Наименование = Неопределено;
	ДанныеКонтактногоЛица.КонтактноеЛицо = Неопределено;
	ДанныеКонтактногоЛица.Должность = Неопределено;
	ДанныеКонтактногоЛица.КонтактнаяИнформация.Очистить();
	
	ЗаполнитьВсегдаВыводимыеВидыКИ(
		ДанныеКонтактногоЛица.КонтактнаяИнформация,
		СвойстваВидовКонтактнойИнформацииКонтактныхЛиц);
		
	ОбновитьЭлементыКонтактныхЛиц();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПолеВводаТегаОкончаниеВводаТекстаСервер(Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Теги.ПолеВводаТегаОкончаниеВводаТекста(ЭтотОбъект, Текст, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПолеВводаТегаОбработкаВыбораСервер(ИмяЭлемента, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Теги.ПолеВводаТегаОбработкаВыбора(ЭтотОбъект, ИмяЭлемента, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ОблакоТеговОбработкаНавигационнойСсылкиСервер(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
	Теги.ОблакоТеговОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
КонецПроцедуры

&НаСервере
Процедура ГоловнойКонтрагентПриИзмененииНаСервере()
	
	УстановитьИННОбособленногоПодразделения(Объект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьИННОбособленногоПодразделения(Объект)
	
	Если ЗначениеЗаполнено(Объект.ГоловнойКонтрагент) Тогда
		
		ИННГоловногоКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ГоловнойКонтрагент, "ИНН");
		Если Объект.ИНН <> ИННГоловногоКонтрагента Тогда
			
			Объект.ИНН = ИННГоловногоКонтрагента;
			
		КонецЕсли;
		
	Иначе
		
		Объект.ИНН = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПунктСозданиеКонтакта(ЭтотОбъект, ДанныеВыбора, Параметры, Текст,СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Текст", Текст);
	
	Если Не ЭтотОбъект.ПоддержкаGoogle.ЗагружатьКонтактыИзGoogle
		И Не ЭтотОбъект.ПоддержкаGoogle.ЕстьКонтактыСозданныеПоСобытию И НЕ ПустаяСтрока(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.КонтактныеЛица"), Параметры);
		
	КонецЕсли;
	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
	"СозданиеНовогоКонтакта",
	ЭтотОбъект,ДополнительныеПараметры);
	
	Если ДанныеВыбора = Неопределено Тогда
		ДанныеВыбора = Новый СписокЗначений;
	КонецЕсли;
	Строки = Новый Массив;
	Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru ='Добавить '")));
	Строки.Добавить(Новый ФорматированнаяСтрока(Текст, Новый Шрифт(, , Истина), WebЦвета.Зеленый));
	
	СтрокаПриЗагрузкеКонтактов = ДанныеВыбора.НайтиПоЗначению(СтрШаблон("""%1""", Текст));
	СтрокаПриЗагрузкеКонтактов = ДанныеВыбора.НайтиПоЗначению(Текст);
	Если СтрокаПриЗагрузкеКонтактов <> Неопределено Тогда
		ДанныеВыбора.Удалить(0);
		ДанныеВыбора.Вставить(0,
			ОписаниеОповещения, Новый ФорматированнаяСтрока(Строки),,БиблиотекаКартинок.Плюс
			);
		Возврат;
	КонецЕсли;
	ДанныеВыбора.Добавить(
	ОписаниеОповещения, Новый ФорматированнаяСтрока(Строки),,БиблиотекаКартинок.Плюс
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеНовогоКонтакта(Результат, Параметры) Экспорт
	
	Элемент = Элементы.Найти("ПредставлениеКонтакт_"+ИндексВыбранногоКонтактногоЛица+"_КИ_0");
	
	ДанныеКонтактныхЛиц[ИндексВыбранногоКонтактногоЛица].Наименование = Параметры.Текст;
	ДанныеКонтактныхЛиц[ИндексВыбранногоКонтактногоЛица].Изменен = Истина;
	
	Модифицированность = Истина;
	Элементы.Найти("УстановитьСвязь_" + ИндексВыбранногоКонтактногоЛица).Доступность = Ложь;
	Элементы.Найти("РазорватьСвязь_" + ИндексВыбранногоКонтактногоЛица).Доступность = Истина;
	
	ТекущийЭлемент = Элемент;
	
КонецПроцедуры

&НаСервере
Функция КонтрагентЯвляетсяГоловным(КонтрагентСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонтрагентСсылка", КонтрагентСсылка);
	Запрос.Текст = "Выбрать Первые 1 Истина Из Справочник.Контрагенты КАК СпрКонтрагенты Где СпрКонтрагенты.ГоловнойКонтрагент = &КонтрагентСсылка";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	ЯвляетсяГоловным = НЕ РезультатЗапроса.Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЯвляетсяГоловным
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеОбъекта()
	НовыйОбъект = Объект.Ссылка.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(НовыйОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтактНаОсновнойИПодписанта(ДанныеКонтактногоЛица,Оповещение)
	
	КонтактОсновноеКЛ = (ДанныеКонтактногоЛица.КонтактноеЛицо = Объект.КонтактноеЛицо);
	КонтактПодписант = (ДанныеКонтактногоЛица.КонтактноеЛицо = Объект.КонтактноеЛицоПодписант);
	
	Если КонтактОсновноеКЛ И КонтактПодписант Тогда
		ТекстВопроса = НСтр("ru = 'Контакт используется как основной и подписант для контрагента"+Символы.ПС+
			"При записи основной контакт и подписант контрагента станут незаполненными'");
	ИначеЕсли КонтактОсновноеКЛ Тогда
		ТекстВопроса = НСтр("ru = 'Контакт используется как основной для контрагента"+Символы.ПС+
			"При записи основной контакт контрагента станет незаполненным'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Контакт используется как подписант для контрагента"+Символы.ПС+
			"При записи подписант станет незаполненным'");
	КонецЕсли;
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросОсновноеКЛВыборКонтрагента(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		РазорватьСвязьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросСозданиеКЛ(Результат,ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Ок Тогда
		
		ЗаполнитьСписокВыбораНаименования(ЭтотОбъект);
		Если ФормироватьНаименованиеАвтоматически И Элементы.Наименование.СписокВыбора.Количество() > 0 Тогда
			Объект.Наименование = Элементы.Наименование.СписокВыбора[0].Значение;
		КонецЕсли;
			
		Записать();
		
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		
		Если ЗначениеЗаполнено(ДанныеКонтактныхЛиц[ИндексВыбранногоКонтактногоЛица].КонтактноеЛицо) Тогда
			ПараметрыФормы.Вставить("Ключ",ДанныеКонтактныхЛиц[ИндексВыбранногоКонтактногоЛица].КонтактноеЛицо);
			ОткрытьФорму("Справочник.КонтактныеЛица.ФормаОбъекта",ПараметрыФормы);
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы.Вставить("Контрагент",Объект.Ссылка);
		ПараметрыФормы.Вставить("НаименованиеКонтакта",ДанныеКонтактныхЛиц[ИндексВыбранногоКонтактногоЛица].Наименование);
		ОткрытьФорму("Справочник.КонтактныеЛица.ФормаОбъекта",ПараметрыФормы,ЭтотОбъект);
		
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуМобильныйКлиент()
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Переместить(Элементы.ПанельДополнительнойИнформации, ЭтотОбъект);
	Элементы.ПанельДополнительнойИнформации.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элементы.ГруппаДолгиПродажи.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элементы.ГруппаСобытия.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	Элементы.ОстатокВзаиморасчетов.РастягиватьПоГоризонтали = Истина;
	Элементы.СуммаПродаж.РастягиватьПоГоризонтали = Истина;
	Элементы.ПоследняяПродажа.РастягиватьПоГоризонтали = Истина;
	Элементы.ПоследнееСобытие.РастягиватьПоГоризонтали = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область КонтактныеЛица

&НаСервере
Процедура ПрочитатьСвойстваВидовКонтактнойИнформацииКонтактныхЛиц()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПорядокТиповКИ.Тип,
	|	ПорядокТиповКИ.Порядок
	|ПОМЕСТИТЬ втПорядокТипов
	|ИЗ
	|	&ПорядокТиповКИ КАК ПорядокТиповКИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Вид,
	|	ПРЕДСТАВЛЕНИЕ(ВидыКонтактнойИнформации.Ссылка) КАК ПредставлениеВида,
	|	ВидыКонтактнойИнформации.Тип КАК Тип,
	|	ЕСТЬNULL(НастройкиВидовКонтактнойИнформации.ВыводитьВФормеВсегда, ЛОЖЬ) КАК ВыводитьВФормеВсегда,
	|	ВидыКонтактнойИнформации.РазрешитьВводНесколькихЗначений КАК РазрешитьВводНесколькихЗначений,
	|	ВидыКонтактнойИнформации.ОбязательноеЗаполнение,
	|	ВидыКонтактнойИнформации.ПроверятьКорректность,
	|	ВидыКонтактнойИнформации.РедактированиеТолькоВДиалоге
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокТипов КАК втПорядокТипов
	|		ПО ВидыКонтактнойИнформации.Тип = втПорядокТипов.Тип
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВидовКонтактнойИнформации КАК НастройкиВидовКонтактнойИнформации
	|		ПО ВидыКонтактнойИнформации.Ссылка = НастройкиВидовКонтактнойИнформации.Вид
	|ГДЕ
	|	ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ
	|	И ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ
	|
	|УПОРЯДОЧИТЬ ПО
	|	втПорядокТипов.Порядок,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания");
	
	Запрос.УстановитьПараметр("ПорядокТиповКИ", КонтактнаяИнформацияУНФ.ПорядокТиповКИ());
	Запрос.УстановитьПараметр("ГруппаВидовКИ", Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛица);
	
	ТаблицаСвойств = Запрос.Выполнить().Выгрузить();
	СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.Загрузить(ТаблицаСвойств);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИОбновитьКонтактныеЛица()
	
	ЗаполнитьТаблицуКонтактнойИнформацииКонтактныхЛиц();
	ОбновитьЭлементыКонтактныхЛиц();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуКонтактнойИнформацииКонтактныхЛиц()
	
	Если ЗначениеЗаполнено(КлассификаторДляЗаполненияКИ) Тогда
		ЗаполнитьНаименованиеИКонтактнуюИнформацию(КлассификаторДляЗаполненияКИ);
		Возврат;
	КонецЕсли;
	
	ДанныеКонтактныхЛиц.Очистить();
	
	Если ЗначениеЗаполнено(ПривязанныйКонтакт) Тогда
		
		ДанныеКЛ = ДанныеКонтактныхЛиц.Добавить();
		ДанныеКЛ.Изменен = Истина;
		КонтактноеЛицо = Новый Структура;
		КонтактноеЛицо.Вставить("КонтактноеЛицо", ПривязанныйКонтакт);
		КонтактноеЛицо.Вставить("Наименование", ПривязанныйКонтакт.Наименование);
		КонтактноеЛицо.Вставить("Должность","");
		ЗаполнитьЗначенияСвойств(ДанныеКЛ, КонтактноеЛицо, "КонтактноеЛицо,Наименование,Должность");
		
		ЗаполнитьКонтактнуюИнформациюКонтактногоЛица(ПривязанныйКонтакт, ДанныеКЛ);
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СвязиКонтрагентКонтактСрезПервых.Контакт КАК Контакт,
	               |	СвязиКонтрагентКонтактСрезПервых.Порядок КАК Порядок
	               |ПОМЕСТИТЬ втПорядокКонтактовКонтрагента
	               |ИЗ
	               |	РегистрСведений.СвязиКонтрагентКонтакт.СрезПервых(, Контрагент = &Владелец) КАК СвязиКонтрагентКонтактСрезПервых
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КонтактныеЛица.Ссылка КАК КонтактноеЛицо,
	               |	СвязиКонтрагентКонтакт.Контрагент КАК Владелец,
	               |	СвязиКонтрагентКонтакт.Должность КАК Должность,
	               |	КонтактныеЛица.Наименование КАК Наименование,
	               |	втПорядокКонтактовКонтрагента.Порядок КАК РеквизитДопУпорядочивания
	               |ПОМЕСТИТЬ втКонтакты
	               |ИЗ
	               |	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних(, Контрагент = &Владелец) КАК СвязиКонтрагентКонтакт
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокКонтактовКонтрагента КАК втПорядокКонтактовКонтрагента
	               |		ПО (втПорядокКонтактовКонтрагента.Контакт = СвязиКонтрагентКонтакт.Контакт)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица КАК КонтактныеЛица
	               |		ПО СвязиКонтрагентКонтакт.Контакт = КонтактныеЛица.Ссылка
	               |ГДЕ
	               |	КонтактныеЛица.Недействителен = ЛОЖЬ
	               |	И СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втКонтакты.КонтактноеЛицо КАК КонтактноеЛицо,
	               |	втКонтакты.Наименование КАК Наименование,
	               |	втКонтакты.Должность КАК Должность
	               |ИЗ
	               |	втКонтакты КАК втКонтакты
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	втКонтакты.РеквизитДопУпорядочивания,
	               |	Наименование
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПорядокТипов.Тип КАК Тип,
	               |	ПорядокТипов.Порядок КАК Порядок
	               |ПОМЕСТИТЬ втПорядокТипов
	               |ИЗ
	               |	&ПорядокТипов КАК ПорядокТипов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втКонтакты.КонтактноеЛицо КАК КонтактноеЛицо,
	               |	ВидыКонтактнойИнформации.Ссылка КАК Вид,
	               |	ВидыКонтактнойИнформации.Тип КАК Тип,
	               |	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания КАК ПорядокВидов,
	               |	втПорядокТипов.Порядок КАК ПорядокТипов
	               |ПОМЕСТИТЬ втВсегдаВыводимыеВиды
	               |ИЗ
	               |	втКонтакты КАК втКонтакты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	               |			ЛЕВОЕ СОЕДИНЕНИЕ втПорядокТипов КАК втПорядокТипов
	               |			ПО ВидыКонтактнойИнформации.Тип = втПорядокТипов.Тип
	               |		ПО (ИСТИНА)
	               |ГДЕ
	               |	ВидыКонтактнойИнформации.Ссылка В(&ВсегдаВыводимыеВиды)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	КонтактноеЛицо,
	               |	Вид
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВладелецКонтактнаяИнформация.Ссылка КАК КонтактноеЛицо,
	               |	ВладелецКонтактнаяИнформация.Вид КАК Вид,
	               |	ВладелецКонтактнаяИнформация.Тип КАК Тип,
	               |	ВладелецКонтактнаяИнформация.Представление КАК Представление,
	               |	ВладелецКонтактнаяИнформация.Значение КАК Значение,
	               |	ВладелецКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
	               |	ВладелецКонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК ПорядокВидов,
	               |	втПорядокТипов.Порядок КАК ПорядокТипов
	               |ПОМЕСТИТЬ втДанныеКИ
	               |ИЗ
	               |	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК ВладелецКонтактнаяИнформация
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокТипов КАК втПорядокТипов
	               |		ПО ВладелецКонтактнаяИнформация.Тип = втПорядокТипов.Тип
	               |ГДЕ
	               |	ВладелецКонтактнаяИнформация.Ссылка В
	               |			(ВЫБРАТЬ
	               |				втКонтакты.КонтактноеЛицо
	               |			ИЗ
	               |				втКонтакты)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	КонтактноеЛицо,
	               |	Вид
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(втДанныеКИ.КонтактноеЛицо, втВсегдаВыводимыеВиды.КонтактноеЛицо) КАК КонтактноеЛицо,
	               |	ЕСТЬNULL(втДанныеКИ.Вид, втВсегдаВыводимыеВиды.Вид) КАК Вид,
	               |	ЕСТЬNULL(втДанныеКИ.Тип, втВсегдаВыводимыеВиды.Тип) КАК Тип,
	               |	ЕСТЬNULL(втДанныеКИ.Представление, """") КАК Представление,
	               |	ЕСТЬNULL(втДанныеКИ.Значение, """") КАК Значение,
	               |	ЕСТЬNULL(втДанныеКИ.ЗначенияПолей, """") КАК ЗначенияПолей,
	               |	ЕСТЬNULL(втДанныеКИ.ПорядокТипов, втВсегдаВыводимыеВиды.ПорядокТипов) КАК ПорядокТипов,
	               |	ЕСТЬNULL(втДанныеКИ.ПорядокВидов, втВсегдаВыводимыеВиды.ПорядокВидов) КАК ПорядокВидов
	               |ИЗ
	               |	втВсегдаВыводимыеВиды КАК втВсегдаВыводимыеВиды
	               |		ПОЛНОЕ СОЕДИНЕНИЕ втДанныеКИ КАК втДанныеКИ
	               |		ПО втВсегдаВыводимыеВиды.Вид = втДанныеКИ.Вид
	               |			И втВсегдаВыводимыеВиды.КонтактноеЛицо = втДанныеКИ.КонтактноеЛицо
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПорядокТипов,
	               |	ПорядокВидов";
	
	Запрос.УстановитьПараметр("Владелец",				Объект.Ссылка);
	Запрос.УстановитьПараметр("ОсновноеКонтактноеЛицо",	Объект.КонтактноеЛицо);
	Запрос.УстановитьПараметр("ПорядокТипов",			КонтактнаяИнформацияУНФ.ПорядокТиповКИ());
	Запрос.УстановитьПараметр("ВсегдаВыводимыеВиды",
		СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.Выгрузить(Новый Структура("ВыводитьВФормеВсегда", Истина), "Вид"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаКонтакты = МассивРезультатов[2].Выбрать();
	ВыборкаКонтактнаяИнформация = МассивРезультатов[6].Выбрать();
	Отбор = Новый Структура("КонтактноеЛицо");
	
	Пока ВыборкаКонтакты.Следующий() Цикл
		
		Отбор.КонтактноеЛицо = ВыборкаКонтакты.КонтактноеЛицо;
		НедействительнаяСвязь = НедействительныеСвязиКонтактныеЛица.НайтиСтроки(Отбор);
		
		Если НедействительнаяСвязь.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеКЛ = ДанныеКонтактныхЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеКЛ, ВыборкаКонтакты, "КонтактноеЛицо,Наименование,Должность");
		ВыборкаКонтактнаяИнформация.Сбросить();
		
		Пока ВыборкаКонтактнаяИнформация.НайтиСледующий(Отбор) Цикл
			
			ДанныеКИ = ДанныеКЛ.КонтактнаяИнформация.Добавить();
			ЗаполнитьЗначенияСвойств(ДанныеКИ, ВыборкаКонтактнаяИнформация, "Тип,Вид,Представление,Значение");
			КонтактнаяИнформацияУНФ.КонвертироватьЗначениеПриНеобходимости(ВыборкаКонтактнаяИнформация.ЗначенияПолей, ВыборкаКонтактнаяИнформация.Представление, ВыборкаКонтактнаяИнформация.Тип, ДанныеКИ.Значение);
			ДанныеКИ.Комментарий = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(ДанныеКИ.Значение);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Всегда есть поля для заполнения одного контактного лица
	Если ДанныеКонтактныхЛиц.Количество() = 0 Тогда
		
		ДанныеКЛ = ДанныеКонтактныхЛиц.Добавить();
		ЗаполнитьВсегдаВыводимыеВидыКИ(
			ДанныеКЛ.КонтактнаяИнформация,
			СвойстваВидовКонтактнойИнформацииКонтактныхЛиц);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыКонтактныхЛиц()
	
	Элементы.Переместить(Элементы.ДобавитьПоляКонтактногоЛица, Элементы.КомандыДобавленияКонтакт_0);
	Элементы.КомандыДобавленияРастяжение_0.МаксимальнаяШирина = 41;
	
	УдаляемыеЭлементы = Новый Массив;
	УдаляемыеКоманды = Новый Массив;
	// Группа первого контактного лица создана в конфигураторе
	Для ИндексГруппы = 1 По Элементы.ВсеКонтакты.ПодчиненныеЭлементы.Количество()-1 Цикл
		УдаляемыеЭлементы.Добавить(Элементы.ВсеКонтакты.ПодчиненныеЭлементы[ИндексГруппы]);
		УдаляемыеКоманды.Добавить(Команды.Найти("КомандаУстановитьСвязь_"+ИндексГруппы));
		УдаляемыеКоманды.Добавить(Команды.Найти("КомандаРазорватьСвязь_"+ИндексГруппы));
	КонецЦикла;
	Для Каждого ГруппаКИ Из Элементы.КонтактнаяИнформацияКонтакт_0.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(ГруппаКИ);
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	Для Каждого УдаляемаяКоманда Из УдаляемыеКоманды Цикл
		Команды.Удалить(УдаляемаяКоманда);
	КонецЦикла;

	
	ШиринаВидаКИ = 8;
	ШиринаПоляКомментария = 11;
	

	Для Каждого ДанныеКонтактногоЛица Из ДанныеКонтактныхЛиц Цикл
 
		ИндексКонтакта = ДанныеКонтактныхЛиц.Индекс(ДанныеКонтактногоЛица);
		
		// Для первого контактного лица элементы формы созданы в конфигураторе
		Если ИндексКонтакта > 0 Тогда
			
			ГруппаКонтактногоЛица = Элементы.Добавить("Контакт_" + ИндексКонтакта, Тип("ГруппаФормы"), Элементы.ВсеКонтакты);
			ГруппаКонтактногоЛица.Вид = Элементы.Контакт_0.Вид;
			ГруппаКонтактногоЛица.Отображение = Элементы.Контакт_0.Отображение;
			ГруппаКонтактногоЛица.Группировка = Элементы.Контакт_0.Группировка;
			ГруппаКонтактногоЛица.ОтображатьЗаголовок = Элементы.Контакт_0.ОтображатьЗаголовок;
			
			ГруппаНаименованиеКонтактногоЛица = Элементы.Добавить("ГруппаНаименованиеКонтакт_" + ИндексКонтакта, Тип("ГруппаФормы"), ГруппаКонтактногоЛица);
			ГруппаНаименованиеКонтактногоЛица.Вид = Элементы.ГруппаНаименованиеКонтакт_0.Вид;
			ГруппаНаименованиеКонтактногоЛица.Отображение = Элементы.ГруппаНаименованиеКонтакт_0.Отображение;
			ГруппаНаименованиеКонтактногоЛица.Группировка = Элементы.ГруппаНаименованиеКонтакт_0.Группировка;
			
			ГруппаНаименованиеКонтактногоЛица.ОтображатьЗаголовок = Элементы.ГруппаНаименованиеКонтакт_0.ОтображатьЗаголовок;
			
			ПолеНаименование = Элементы.Добавить("НаименованиеКонтакт_" + ИндексКонтакта, Тип("ПолеФормы"), ГруппаНаименованиеКонтактногоЛица);
			ПолеНаименование.Вид = Элементы.НаименованиеКонтакт_0.Вид;
			ПолеНаименование.ПутьКДанным = "ДанныеКонтактныхЛиц[" + ИндексКонтакта + "].Наименование";
			ПолеНаименование.ПоложениеЗаголовка = Элементы.НаименованиеКонтакт_0.ПоложениеЗаголовка;
			ПолеНаименование.ПодсказкаВвода = Элементы.НаименованиеКонтакт_0.ПодсказкаВвода;
			
			ПолеНаименование.АвтоМаксимальнаяШирина = Элементы.НаименованиеКонтакт_0.АвтоМаксимальнаяШирина;
			ПолеНаименование.МаксимальнаяШирина = Элементы.НаименованиеКонтакт_0.МаксимальнаяШирина;
			ПолеНаименование.КнопкаВыбора = Элементы.НаименованиеКонтакт_0.КнопкаВыбора;
			ПолеНаименование.КнопкаВыпадающегоСписка = Элементы.НаименованиеКонтакт_0.КнопкаВыпадающегоСписка;
			ПолеНаименование.КнопкаСоздания = Элементы.НаименованиеКонтакт_0.КнопкаСоздания;
			ПолеНаименование.КнопкаОткрытия = Элементы.НаименованиеКонтакт_0.КнопкаОткрытия;
			
			ПолеНаименование.УстановитьДействие("ОбработкаВыбора", "НаименованиеКонтактногоЛица_ОбработкаВыбора");
			ПолеНаименование.УстановитьДействие("НачалоВыбора", "НаименованиеКонтактногоЛица_НачалоВыбора");
			ПолеНаименование.УстановитьДействие("ИзменениеТекстаРедактирования", "НаименованиеКонтактногоЛица_ИзменениеТекстаРедактирования");
			ПолеНаименование.УстановитьДействие("ОкончаниеВводаТекста", "НаименованиеКонтактногоЛица_ОкончаниеВводаТекста");
			ПолеНаименование.УстановитьДействие("ПриИзменении", "НаименованиеКонтактногоЛица_ПриИзменении");
			ПолеНаименование.УстановитьДействие("Открытие", "НаименованиеКонтактногоЛица_Открытие");
			
			КомандыСвязей = Элементы.Добавить("КоманднаяПанельСвязей_" + ИндексКонтакта, Тип("ГруппаФормы"), ГруппаНаименованиеКонтактногоЛица);
			КомандыСвязей.Вид = Элементы.КоманднаяПанельСвязей_0.Вид;
			КомандыСвязей.РастягиватьПоГоризонтали = Элементы.КоманднаяПанельСвязей_0.РастягиватьПоГоризонтали;
			
			ГруппаКомандСвязейСКонтактнымЛицом = Элементы.Добавить("ГруппаСвязей_" + ИндексКонтакта, Тип("ГруппаФормы"), КомандыСвязей);
			ГруппаКомандСвязейСКонтактнымЛицом.Вид = Элементы.ГруппаСвязей_0.Вид;
			ГруппаКомандСвязейСКонтактнымЛицом.Отображение = Элементы.ГруппаСвязей_0.Отображение;
			
			КнопкаУстановитьСвязь = Элементы.Добавить("УстановитьСвязь_" + ИндексКонтакта, Тип("КнопкаФормы"),ГруппаКомандСвязейСКонтактнымЛицом);
			КомандаУстановитьСвязь = ЭтаФорма.Команды.Добавить("КомандаУстановитьСвязь_" + ИндексКонтакта);
			КомандаУстановитьСвязь.Действие = "УстановитьСвязь";
			КомандаУстановитьСвязь.Подсказка = "Установить связь с контактом";
			КомандаУстановитьСвязь.ИзменяетСохраняемыеДанные = Истина;
			
			КнопкаУстановитьСвязь.ИмяКоманды = КомандаУстановитьСвязь.Имя;
			КнопкаУстановитьСвязь.Ширина = 3;
			КнопкаУстановитьСвязь.Картинка = БиблиотекаКартинок.УстановитьСвязь;
			КнопкаУстановитьСвязь.Отображение = ОтображениеКнопки.Картинка;
			
			КнопкаРазорватьСвязь = Элементы.Добавить("РазорватьСвязь_" + ИндексКонтакта, Тип("КнопкаФормы"),ГруппаКомандСвязейСКонтактнымЛицом);
			КомандаРазорватьСвязь = ЭтаФорма.Команды.Добавить("КомандаРазорватьСвязь_" + ИндексКонтакта);
			КомандаРазорватьСвязь.Действие = "РазорватьСвязь";
			КомандаРазорватьСвязь.Подсказка = "Разорвать связь с контактом";
			КомандаРазорватьСвязь.ИзменяетСохраняемыеДанные = Истина;
			
			КнопкаРазорватьСвязь.ИмяКоманды = КомандаРазорватьСвязь.Имя;
			КнопкаРазорватьСвязь.Ширина = 3;
			КнопкаРазорватьСвязь.Картинка = БиблиотекаКартинок.РазорватьСвязь;
			КнопкаРазорватьСвязь.Отображение = ОтображениеКнопки.Картинка;
			
			ГруппаНаименованиеКонтактногоЛица.ГоризонтальныйИнтервал = Элементы.ГруппаНаименованиеКонтакт_0.ГоризонтальныйИнтервал;
			
			Если ЗначениеЗаполнено(ДанныеКонтактногоЛица.КонтактноеЛицо) Тогда
				КнопкаУстановитьСвязь.Доступность = Ложь;
				КнопкаРазорватьСвязь.Доступность = Истина;
			ИначеЕсли ЗначениеЗаполнено(ДанныеКонтактногоЛица.Наименование) Тогда
				КнопкаУстановитьСвязь.Доступность = Ложь;
				КнопкаРазорватьСвязь.Доступность = Истина;
			Иначе
				КнопкаУстановитьСвязь.Доступность = Истина;
				КнопкаРазорватьСвязь.Доступность = Ложь;
			КонецЕсли;
			
			ГруппаКИ = Элементы.Добавить("КонтактнаяИнформацияКонтакт_" + ИндексКонтакта, Тип("ГруппаФормы"), ГруппаКонтактногоЛица);
			ГруппаКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаКИ.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаКИ.ОтображатьЗаголовок = Ложь;
			
			ГруппаДобавление = Элементы.Добавить("КомандыДобавленияКонтакт_" + ИндексКонтакта, Тип("ГруппаФормы"), ГруппаКонтактногоЛица);
			ГруппаДобавление.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаДобавление.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаДобавление.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаДобавление.ОтображатьЗаголовок = Ложь;
			
			ДекорацияРастяжение = Элементы.Добавить("КомандыДобавленияРастяжение_" + ИндексКонтакта, Тип("ДекорацияФормы"), ГруппаДобавление);
			ДекорацияРастяжение.Вид = ВидДекорацииФормы.Надпись;
			ДекорацияРастяжение.АвтоМаксимальнаяШирина = Ложь;
			ДекорацияРастяжение.МаксимальнаяШирина = 41;
			ДекорацияРастяжение.РастягиватьПоГоризонтали = Истина;
			
			Кнопка = Элементы.Добавить("ДобавитьПолеКонтактнойИнформацииКонтактногоЛица_" + ИндексКонтакта, Тип("КнопкаФормы"), ГруппаДобавление);
			Кнопка.ИмяКоманды = "ДобавитьПолеКонтактнойИнформацииКонтактногоЛица";
			Кнопка.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			Кнопка.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
			
		Иначе
			
			ГруппаКИ = Элементы.КонтактнаяИнформацияКонтакт_0;
			Если ЗначениеЗаполнено(ДанныеКонтактногоЛица.КонтактноеЛицо) Тогда
				Элементы.УстановитьСвязь_0.Доступность = Ложь;
				Элементы.РазорватьСвязь_0.Доступность = Истина;
			ИначеЕсли ЗначениеЗаполнено(ДанныеКонтактногоЛица.Наименование) Тогда
				Элементы.УстановитьСвязь_0.Доступность = Ложь;
				Элементы.РазорватьСвязь_0.Доступность = Истина;
			Иначе
				Элементы.УстановитьСвязь_0.Доступность = Истина;
				Элементы.РазорватьСвязь_0.Доступность = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Отбор = Новый Структура("Вид");
		
		Для Каждого ДанныеКИ Из ДанныеКонтактногоЛица.КонтактнаяИнформация Цикл
			
			ИндексКИ = ДанныеКонтактногоЛица.КонтактнаяИнформация.Индекс(ДанныеКИ);
			Отбор.Вид = ДанныеКИ.Вид;
			НайденныеСтроки = СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			СвойстваВида = НайденныеСтроки[0];
			
			ГруппаЗначениеКИ = Элементы.Добавить("Контакт_" + ИндексКонтакта + "_КИ_" + ИндексКИ, Тип("ГруппаФормы"), ГруппаКИ);
			ГруппаЗначениеКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЗначениеКИ.Заголовок = ДанныеКИ.Вид;
			ГруппаЗначениеКИ.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаЗначениеКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаЗначениеКИ.ОтображатьЗаголовок = Ложь;
			ГруппаЗначениеКИ.Ширина = 35;
			
			ДекорацияДействие = Элементы.Добавить("ДействиеКонтакт_" + ИндексКонтакта + "_КИ_" + ИндексКИ, Тип("ДекорацияФормы"), ГруппаЗначениеКИ);
			ДекорацияДействие.Вид = ВидДекорацииФормы.Картинка;
			ДекорацияДействие.Картинка = КонтактнаяИнформацияУНФ.КартинкаДействияПоТипуКонтактнойИнформации(ДанныеКИ.Тип);
			ДекорацияДействие.РазмерКартинки = РазмерКартинки.АвтоРазмер;
			ДекорацияДействие.Гиперссылка = Истина;
			ДекорацияДействие.Ширина = 2;
			ДекорацияДействие.Высота = 1;
			ДекорацияДействие.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Авто;
			ДекорацияДействие.УстановитьДействие("Нажатие", "Подключаемый_ДействиеКИКонтактаНажатие");
			
			ПолеВид = Элементы.Добавить("ВидКонтакт_" + ИндексКонтакта + "_КИ_" + ИндексКИ, Тип("ПолеФормы"), ГруппаЗначениеКИ);
			ПолеВид.Вид = ВидПоляФормы.ПолеНадписи;
			ПолеВид.ПутьКДанным = "ДанныеКонтактныхЛиц[" + ИндексКонтакта + "].КонтактнаяИнформация[" + ИндексКИ + "].Вид";
			ПолеВид.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеВид.Ширина = ШиринаВидаКИ;
			ПолеВид.РастягиватьПоГоризонтали = Ложь;
			
			ДоступноРедактированиеВДиалоге = КонтактнаяИнформацияУНФ.ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(ДанныеКИ.Тип);
			
			ПолеПредставление = Элементы.Добавить("ПредставлениеКонтакт_" + ИндексКонтакта + "_КИ_" + ИндексКИ, Тип("ПолеФормы"), ГруппаЗначениеКИ);
			ПолеПредставление.Вид = ВидПоляФормы.ПолеВвода;
			ПолеПредставление.ПутьКДанным = "ДанныеКонтактныхЛиц[" + ИндексКонтакта + "].КонтактнаяИнформация[" + ИндексКИ + "].Представление";
			ПолеПредставление.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеПредставление.КнопкаВыбора = ДоступноРедактированиеВДиалоге;
			ПолеПредставление.АвтоОтметкаНезаполненного = СвойстваВида.ОбязательноеЗаполнение;
			ПолеПредставление.ШиринаВыпадающегоСписка = 40;
			ПолеПредставление.УстановитьДействие("ПриИзменении", "Подключаемый_ПредставлениеКИКонтактаПриИзменении");
			ПолеПредставление.УстановитьДействие("Очистка", "Подключаемый_ПредставлениеКИКонтактаОчистка");
			Если СвойстваВида.РедактированиеТолькоВДиалоге Тогда
				ПолеПредставление.РедактированиеТекста = Ложь;
				ПолеПредставление.ЦветФона = ЦветаСтиля.КонтактнаяИнформацияСРедактированиемВДиалогеЦвет;
			КонецЕсли;
			Если ДоступноРедактированиеВДиалоге Тогда
				ПолеПредставление.УстановитьДействие("НачалоВыбора", "Подключаемый_ПредставлениеКИКонтактаНачалоВыбора");
			КонецЕсли;
			Если ДанныеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
				ПолеПредставление.МногострочныйРежим = Истина;
				ПолеПредставление.Высота = 2;
				ПолеПредставление.РастягиватьПоВертикали = Ложь;
			КонецЕсли;
			
			Если КонтактнаяИнформацияУНФ.ДляТипаКонтактнойИнформацииДоступенВводКомментария(ДанныеКИ.Тип) Тогда
				
				ПолеПредставление.АвтоМаксимальнаяШирина = Ложь;
				ПолеПредставление.МаксимальнаяШирина = 27;
				
				ПолеКомментарий = Элементы.Добавить("КомментарийКонтакт_" + ИндексКонтакта + "_КИ_" + ИндексКИ, Тип("ПолеФормы"), ГруппаЗначениеКИ);
				ПолеКомментарий.Вид = ВидПоляФормы.ПолеВвода;
				ПолеКомментарий.ПутьКДанным = "ДанныеКонтактныхЛиц[" + ИндексКонтакта + "].КонтактнаяИнформация[" + ИндексКИ + "].Комментарий";
				ПолеКомментарий.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				ПолеКомментарий.ПропускатьПриВводе = Истина;
				ПолеКомментарий.ПодсказкаВвода = НСтр("ru='Прим.'");
				ПолеКомментарий.АвтоМаксимальнаяШирина = Ложь;
				ПолеКомментарий.МаксимальнаяШирина = ШиринаПоляКомментария;
				ПолеКомментарий.УстановитьДействие("ПриИзменении", "Подключаемый_КомментарийКИКонтактаПриИзменении");
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаполнитьСписокВыбораАдресовКонтактныхЛиц(ЭтотОбъект);
	
	ОбменСGoogle.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект, ОписаниеПолейДляАвтоподбора());
	
	ИндексПоследнегоКЛ = ДанныеКонтактныхЛиц.Количество()-1;
	КомандаДобавленияКИ = Элементы["ДобавитьПолеКонтактнойИнформацииКонтактногоЛица_" + ИндексПоследнегоКЛ];
	Элементы.Переместить(Элементы.ДобавитьПоляКонтактногоЛица, КомандаДобавленияКИ.Родитель, КомандаДобавленияКИ);
	Элементы["КомандыДобавленияРастяжение_" + ИндексПоследнегоКЛ].МаксимальнаяШирина = 34;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементТаблицыКонтактныхЛиц(Индекс,Контакт)
	
	ДанныеКонтактныхЛиц[Индекс].КонтактноеЛицо = Контакт;
	ДанныеКонтактныхЛиц[Индекс].Наименование = Контакт.Наименование;
	ДанныеКонтактныхЛиц[Индекс].Изменен = Истина;
	
	Отбор = Новый Структура;
	Отбор.Вставить("КонтактноеЛицо",Контакт);
	Строки = НедействительныеСвязиКонтактныеЛица.НайтиСтроки(Отбор);
	Если Строки.Количество()>0 Тогда
		Для Каждого Строка Из Строки Цикл
			НедействительныеСвязиКонтактныеЛица.Удалить(НедействительныеСвязиКонтактныеЛица.Индекс(Строка));
		КонецЦикла;
	КонецЕсли;
	
	ДанныеКонтактныхЛиц[Индекс].КонтактнаяИнформация.Очистить();
	ЗаполнитьКонтактнуюИнформациюКонтактногоЛица(Контакт, ДанныеКонтактныхЛиц[Индекс]);
	
	Модифицированность = Истина;
	ОбновитьЭлементыКонтактныхЛиц();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеКонтактныхЛиц(Отказ)
	
	// Проверка на заполненность ФИО контактного лица, если введена контактная информация
	Для Каждого ДанныеКонтактногоЛица Из ДанныеКонтактныхЛиц Цикл
		
		Если Не ПустаяСтрока(ДанныеКонтактногоЛица.Наименование) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = "ДанныеКонтактныхЛиц[" + ДанныеКонтактныхЛиц.Индекс(ДанныеКонтактногоЛица) + "].Наименование";
		Для Каждого СтрокаТаблицы Из ДанныеКонтактногоЛица.КонтактнаяИнформация Цикл
			Если Не ПустаяСтрока(СтрокаТаблицы.Значение) Или Не ПустаяСтрока(СтрокаТаблицы.Представление) Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'ФИО контакта не заполнено.'"),,,ИмяРеквизита, Отказ);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеКонтактнойИнформацииКонтактныхЛиц(Отказ)
	
	ЕстьОшибки = Ложь;
	Отбор = Новый Структура("Вид");
	
	Для Каждого ДанныеКонтактногоЛица Из ДанныеКонтактныхЛиц Цикл
		
		Если ПустаяСтрока(ДанныеКонтактногоЛица.Наименование) Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексКонтактногоЛица = ДанныеКонтактныхЛиц.Индекс(ДанныеКонтактногоЛица);
		
		Для Каждого СтрокаТаблицы Из ДанныеКонтактногоЛица.КонтактнаяИнформация Цикл
			
			Отбор.Вид = СтрокаТаблицы.Вид;
			НайденныеСтроки = СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			СвойстваВида = НайденныеСтроки[0];
			Индекс = ДанныеКонтактногоЛица.КонтактнаяИнформация.Индекс(СтрокаТаблицы);
			ИмяРеквизита = "ДанныеКонтактныхЛиц["+ИндексКонтактногоЛица+"].КонтактнаяИнформация["+Индекс+"].Представление";
			
			Если СвойстваВида.ОбязательноеЗаполнение И ПустаяСтрока(СтрокаТаблицы.Представление)
				И Не ЕстьДругиеЗаполненныеСтрокиВидаКИ(ДанныеКонтактногоЛица, СтрокаТаблицы, СтрокаТаблицы.Вид) Тогда
				// И нет других строк с данными для видов КИ с множественными значениями.
				
				ЕстьОшибки = Истина;
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Вид контактной информации ""%1"" не заполнен.'"), СвойстваВида.ПредставлениеВида),,, ИмяРеквизита);
				
			ИначеЕсли НЕ ПустаяСтрока(СтрокаТаблицы.Представление) И СвойстваВида.ПроверятьКорректность Тогда
				
				РезультатПроверки = УправлениеКонтактнойИнформацией.ПроверитьКонтактнуюИнформацию(СтрокаТаблицы.Представление, СтрокаТаблицы.Значение, СтрокаТаблицы.Вид, СтрокаТаблицы.Тип, ИмяРеквизита);
				ЕстьОшибки = РезультатПроверки <> 0;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьДругиеЗаполненныеСтрокиВидаКИ(Знач ДанныеКонтактногоЛица, Знач ПроверяемаяСтрока, Знач ВидКонтактнойИнформации)
	
	ВсеСтрокиЭтогоВида = ДанныеКонтактногоЛица.КонтактнаяИнформация.НайтиСтроки(
		Новый Структура("Вид", ВидКонтактнойИнформации));
	
	Для Каждого СтрокаВида Из ВсеСтрокиЭтогоВида Цикл
		
		Если СтрокаВида <> ПроверяемаяСтрока И Не ПустаяСтрока(СтрокаВида.Представление) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ЗаписатьДанныеКонтактныхЛиц(ТекущийОбъект)
	
	НачатьТранзакцию();
	
	Попытка
		Для Каждого ДанныеКЛ Из ДанныеКонтактныхЛиц Цикл
			
			Если ПустаяСтрока(ДанныеКЛ.Наименование) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ДанныеКЛ.Изменен Тогда
				Продолжить;
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Истина);
			
			Если ЗначениеЗаполнено(ДанныеКЛ.КонтактноеЛицо) Тогда
				КонтактноеЛицоОбъект = ДанныеКЛ.КонтактноеЛицо.ПолучитьОбъект();
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеКЛ.КонтактноеЛицо) Или КонтактноеЛицоОбъект = Неопределено Тогда
				
				// Создание
				КонтактноеЛицоОбъект = Справочники.КонтактныеЛица.СоздатьЭлемент();
				КонтактноеЛицоОбъект.Заполнить(ТекущийОбъект.Ссылка);
				КонтактноеЛицоОбъект.ГруппаДоступа = Объект.ГруппаДоступа;
				
				// Установим ссылку нового по переданной ссылке основного контактного лица
				Если ТекущийОбъект.ДополнительныеСвойства.Свойство("НовоеОсновноеКонтактноеЛицо") Тогда
					КонтактноеЛицоОбъект.УстановитьСсылкуНового(ТекущийОбъект.ДополнительныеСвойства.НовоеОсновноеКонтактноеЛицо);
					ТекущийОбъект.ДополнительныеСвойства.Удалить("НовоеОсновноеКонтактноеЛицо");
				КонецЕсли;
				
			КонецЕсли;
			
			// Внесение изменений
			ЗаполнитьЗначенияСвойств(КонтактноеЛицоОбъект, ДанныеКЛ, "Наименование");
			КонтактноеЛицоОбъект.КонтактнаяИнформация.Очистить();
			
			Если ЗначениеЗаполнено(Объект.ГруппаДоступа) И НЕ ЗначениеЗаполнено(КонтактноеЛицоОбъект.ГруппаДоступа) Тогда
				КонтактноеЛицоОбъект.ГруппаДоступа = Объект.ГруппаДоступа;
			КонецЕсли;
			
			Для Каждого ДанныеКИ Из ДанныеКЛ.КонтактнаяИнформация Цикл
				УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(КонтактноеЛицоОбъект, ДанныеКИ.Значение, ДанныеКИ.Вид, ДанныеКИ.Тип);
			КонецЦикла;
			
			// Запись объекта
			КонтактноеЛицоОбъект.ДополнительныеСвойства.Вставить("СвязьСКонтрагентом", Новый Структура("Контрагент,Должность", ТекущийОбъект.Ссылка, ДанныеКЛ.Должность));
			КонтактноеЛицоОбъект.Записать();
			
			// Сохранение ссылки на созданный объект
			ДанныеКЛ.КонтактноеЛицо = КонтактноеЛицоОбъект.Ссылка;
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЦикла;
		
		КонтактныеЛица = Новый Массив;
		Для Каждого ДанныеКЛ Из НедействительныеСвязиКонтактныеЛица Цикл
			КонтактныеЛица.Добавить(ДанныеКЛ.КонтактноеЛицо);
		КонецЦикла;
		РегистрыСведений.СвязиКонтрагентКонтакт.УстановитьНедействительной(ТекущийОбъект.Ссылка, КонтактныеЛица);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтактнуюИнформациюКонтактногоЛица(КонтактноеЛицо, ДанныеКЛ)
	
	ВсегдаВыводимыеВидыКИ = СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.НайтиСтроки(Новый Структура("ВыводитьВФормеВсегда", Истина));
	
	Для Каждого ВидКи Из ВсегдаВыводимыеВидыКИ Цикл
		СтрокиКИ = КонтактноеЛицо.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид",ВидКи.Вид));
		Если СтрокиКИ.Количество() = 0 Тогда
			ДанныеКИ = ДанныеКЛ.КонтактнаяИнформация.Добавить();
			ЗаполнитьЗначенияСвойств(ДанныеКИ, ВидКи, "Вид,Тип");
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаКИ Из СтрокиКИ Цикл
			ДанныеКИ = ДанныеКЛ.КонтактнаяИнформация.Добавить();
			ЗаполнитьЗначенияСвойств(ДанныеКИ, СтрокаКИ, "Тип,Вид,Представление,Значение");
			КонтактнаяИнформацияУНФ.КонвертироватьЗначениеПриНеобходимости(СтрокаКИ.ЗначенияПолей, СтрокаКИ.Представление, СтрокаКИ.Тип, ДанныеКИ.Значение);
			ДанныеКИ.Комментарий = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(ДанныеКИ.Значение);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораАдресовКонтактныхЛиц(Форма) Экспорт
	
	МассивАдресов = Новый Массив;
	Отбор = Новый Структура("Вид");
	
	Для Каждого ДанныеКонтактногоЛица Из Форма.ДанныеКонтактныхЛиц Цикл
		Для Каждого СтрокаТаблицы Из ДанныеКонтактногоЛица.КонтактнаяИнформация Цикл
			
			Если СтрокаТаблицы.Тип <> ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
				Продолжить;
			КонецЕсли;
			
			Отбор.Вид = СтрокаТаблицы.Вид;
			НайденныеСтроки = Форма.СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ПустаяСтрока(СтрокаТаблицы.Представление)
				И МассивАдресов.Найти(СтрокаТаблицы.Представление) = Неопределено Тогда
				
				МассивАдресов.Добавить(СтрокаТаблицы.Представление);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ДанныеКонтактногоЛица Из Форма.ДанныеКонтактныхЛиц Цикл
		Для Каждого СтрокаТаблицы Из ДанныеКонтактногоЛица.КонтактнаяИнформация Цикл
			
			Если СтрокаТаблицы.Тип <> ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
				Продолжить;
			КонецЕсли;
			
			Отбор.Вид = СтрокаТаблицы.Вид;
			НайденныеСтроки = Форма.СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяПоля = "ПредставлениеКонтакт_" + Форма.ДанныеКонтактныхЛиц.Индекс(ДанныеКонтактногоЛица) + "_КИ_" + ДанныеКонтактногоЛица.КонтактнаяИнформация.Индекс(СтрокаТаблицы);
			ПолеПредставление = Форма.Элементы[ИмяПоля];
			ПолеПредставление.СписокВыбора.ЗагрузитьЗначения(МассивАдресов);
			
			ПолеПредставление.КнопкаВыпадающегоСписка = ПолеПредставление.СписокВыбора.Количество() > 0;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтактнуюИнформациюКонтактаВидВыбран(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Вид", ВыбранныйЭлемент.Значение);
	НайденныеСтроки = СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СвойстваВида = НайденныеСтроки[0];
	
	Если СвойстваВида.ВыводитьВФормеВсегда = Ложь Тогда
		
		ДополнительныеПараметры.Вставить("ДобавляемыйВид", ВыбранныйЭлемент.Значение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьКонтактнуюИнформациюКонтактаВопросЗадан", ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстВопроса = СтрШаблон(НСтр("ru='Возможность ввода ""%1"" будет добавлена для всех %2.
			|Продолжить?'"), ВыбранныйЭлемент.Значение, ДополнительныеПараметры.МножественнаяФормаВладельца);
		ЗаголовокВопроса = НСтр("ru='Подтверждение добавления'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК, ЗаголовокВопроса);
		
	Иначе
		
		ДобавитьКонтактнуюИнформациюКонтактаСервер(ВыбранныйЭлемент.Значение, ДополнительныеПараметры.ИндексКонтакта);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтактнуюИнформациюКонтактаВопросЗадан(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьКонтактнуюИнформациюКонтактаСервер(ДополнительныеПараметры.ДобавляемыйВид, ДополнительныеПараметры.ИндексКонтакта, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКонтактнуюИнформациюКонтактаСервер(ДобавляемыйВид, ИндексКонтакта, УстановитьВыводВФормеВсегда = Ложь)
	
	ДобавляемыйТип = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДобавляемыйВид, "Тип");
	ДанныеКонтакта = ДанныеКонтактныхЛиц[ИндексКонтакта];
	
	КоличествоЭлементовКоллекции = ДанныеКонтакта.КонтактнаяИнформация.Количество();
	ИндексВставки = КоличествоЭлементовКоллекции;
	
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		ТекущийИндекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		Если ДанныеКонтакта.КонтактнаяИнформация[ТекущийИндекс].Вид = ДобавляемыйВид Тогда
			ИндексВставки = ТекущийИндекс+1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеКИ = ДанныеКонтакта.КонтактнаяИнформация.Вставить(ИндексВставки);
	ДанныеКИ.Вид = ДобавляемыйВид;
	ДанныеКИ.Тип = ДобавляемыйТип;
	
	Если УстановитьВыводВФормеВсегда Тогда
		
		КонтактнаяИнформацияУНФ.УстановитьФлагВыводитьВФормеВсегда(ДобавляемыйВид);
		
		НайденныеСтроки = СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.НайтиСтроки(Новый Структура("Вид", ДобавляемыйВид));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].ВыводитьВФормеВсегда = Истина;
		КонецЕсли;
		
		Для ТекущийИндекс = 0 По ДанныеКонтактныхЛиц.Количество()-1 Цикл
			
			Если ТекущийИндекс = ИндексКонтакта Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеКИ = ДанныеКонтактныхЛиц[ТекущийИндекс].КонтактнаяИнформация.Добавить();
			ДанныеКИ.Вид = ДобавляемыйВид;
			ДанныеКИ.Тип = ДобавляемыйТип;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьЭлементыКонтактныхЛиц();
	ТекущийЭлемент = Элементы["ПредставлениеКонтакт_" + ИндексКонтакта + "_КИ_" + ИндексВставки];
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДействиеКИКонтактаНажатие(Элемент)
	
	ПозицияПодчеркиванияОдин = СтрНайти(Элемент.Имя, "_",,,1);
	ПозицияПодчеркиванияДва  = СтрНайти(Элемент.Имя, "_",,,2);
	ПозицияПодчеркиванияТри  = СтрНайти(Элемент.Имя, "_",,,3);
	
	ИндексКЛ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияОдин+1, ПозицияПодчеркиванияДва-ПозицияПодчеркиванияОдин-1));
	ИндексКИ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияТри+1));
	
	СтрокаКИ = ДанныеКонтактныхЛиц[ИндексКЛ].КонтактнаяИнформация[ИндексКИ];
	
	ДанныеКИ = Новый Структура;
	ДанныеКИ.Вставить("Тип", СтрокаКИ.Тип);
	ДанныеКИ.Вставить("Представление", СтрокаКИ.Представление);
	ДанныеКИ.Вставить("Владелец", ДанныеКонтактныхЛиц[ИндексКЛ].КонтактноеЛицо);
	
	КонтактнаяИнформацияУНФКлиент.ОбработатьНажатиеПиктограммы(ЭтотОбъект, Элемент, ДанныеКИ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИКонтактаПриИзменении(Элемент)
	
	ПозицияПодчеркиванияОдин = СтрНайти(Элемент.Имя, "_",,,1);
	ПозицияПодчеркиванияДва  = СтрНайти(Элемент.Имя, "_",,,2);
	ПозицияПодчеркиванияТри  = СтрНайти(Элемент.Имя, "_",,,3);
	
	ИндексКЛ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияОдин+1, ПозицияПодчеркиванияДва-ПозицияПодчеркиванияОдин-1));
	ИндексКИ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияТри+1));
	
	ДанныеКонтактныхЛиц[ИндексКЛ].Изменен = Истина;
	ДанныеКИ = ДанныеКонтактныхЛиц[ИндексКЛ].КонтактнаяИнформация[ИндексКИ];
	
	Если ПустаяСтрока(ДанныеКИ.Представление) Тогда
		ДанныеКИ.Значение = "";
	Иначе
		ДанныеКИ.Значение = КонтактнаяИнформацияУНФВызовСервера.КонтактнаяИнформацияПоПредставлению(ДанныеКИ.Представление, ДанныеКИ.Вид);
	КонецЕсли;
	
	Если ДанныеКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		ЗаполнитьСписокВыбораАдресовКонтактныхЛиц(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИКонтактаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПозицияПодчеркиванияОдин = СтрНайти(Элемент.Имя, "_",,,1);
	ПозицияПодчеркиванияДва  = СтрНайти(Элемент.Имя, "_",,,2);
	ПозицияПодчеркиванияТри  = СтрНайти(Элемент.Имя, "_",,,3);
	
	ИндексКЛ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияОдин+1, ПозицияПодчеркиванияДва-ПозицияПодчеркиванияОдин-1));
	ИндексКИ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияТри+1));
	
	ДанныеКонтактныхЛиц[ИндексКЛ].Изменен = Истина;
	ДанныеКИ = ДанныеКонтактныхЛиц[ИндексКЛ].КонтактнаяИнформация[ИндексКИ];
	
	// Если представление было изменено в поле и не соответствует реквизиту, то приводим в соответствие.
	Если ДанныеКИ.Представление <> Элемент.ТекстРедактирования Тогда
		ДанныеКИ.Представление = Элемент.ТекстРедактирования;
		Подключаемый_ПредставлениеКИКонтактаПриИзменении(Элемент);
		Модифицированность = Истина;
	КонецЕсли;
	
	ПараметрыФормы = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
						ДанныеКИ.Вид,
						ДанныеКИ.Значение,
						ДанныеКИ.Представление,
						ДанныеКИ.Комментарий);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИндексКЛ", ИндексКЛ);
	ДополнительныеПараметры.Вставить("ИндексКИ", ИндексКИ);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗначениеКИКонтактаРедактированиеВДиалогеЗавершено", ЭтотОбъект, ДополнительныеПараметры);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыФормы,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИКонтактаОчистка(Элемент, СтандартнаяОбработка)
	
	ПозицияПодчеркиванияОдин = СтрНайти(Элемент.Имя, "_",,,1);
	ПозицияПодчеркиванияДва  = СтрНайти(Элемент.Имя, "_",,,2);
	ПозицияПодчеркиванияТри  = СтрНайти(Элемент.Имя, "_",,,3);
	
	ИндексКЛ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияОдин+1, ПозицияПодчеркиванияДва-ПозицияПодчеркиванияОдин-1));
	ИндексКИ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияТри+1));
	
	ДанныеКонтактныхЛиц[ИндексКЛ].Изменен = Истина;
	ДанныеКИ = ДанныеКонтактныхЛиц[ИндексКЛ].КонтактнаяИнформация[ИндексКИ];
	ДанныеКИ.Значение = "";
	
	Если ДанныеКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		ЗаполнитьСписокВыбораАдресовКонтактныхЛиц(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийКИКонтактаПриИзменении(Элемент)
	
	ПозицияПодчеркиванияОдин = СтрНайти(Элемент.Имя, "_",,,1);
	ПозицияПодчеркиванияДва  = СтрНайти(Элемент.Имя, "_",,,2);
	ПозицияПодчеркиванияТри  = СтрНайти(Элемент.Имя, "_",,,3);
	
	ИндексКЛ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияОдин+1, ПозицияПодчеркиванияДва-ПозицияПодчеркиванияОдин-1));
	ИндексКИ = Число(Сред(Элемент.Имя, ПозицияПодчеркиванияТри+1));
	ДанныеКонтактныхЛиц[ИндексКЛ].Изменен = Истина;
	ДанныеКИ = ДанныеКонтактныхЛиц[ИндексКЛ].КонтактнаяИнформация[ИндексКИ];
	
	ОжидаемыйВид = ?(ПустаяСтрока(ДанныеКИ.Значение), ДанныеКИ.Вид, Неопределено);
	КонтактнаяИнформацияУНФВызовСервера.УстановитьКомментарийКонтактнойИнформации(ДанныеКИ.Значение, ДанныеКИ.Комментарий, ОжидаемыйВид);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеКИКонтактаРедактированиеВДиалогеЗавершено(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКИ = ДанныеКонтактныхЛиц[ДополнительныеПараметры.ИндексКЛ].КонтактнаяИнформация[ДополнительныеПараметры.ИндексКИ];
	ДанныеКонтактныхЛиц[ДополнительныеПараметры.ИндексКЛ].Изменен = Истина;

	ДанныеКИ.Представление = РезультатЗакрытия.Представление;
	ДанныеКИ.Значение      = РезультатЗакрытия.КонтактнаяИнформация;
	ДанныеКИ.Комментарий   = РезультатЗакрытия.Комментарий;
	
	Модифицированность = Истина;
	
	Если ДанныеКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		ЗаполнитьСписокВыбораАдресовКонтактныхЛиц(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Теги

&НаКлиенте
Процедура ПолеВводаТегаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПолеВводаТегаОбработкаВыбораСервер(Элемент.Имя, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаТегаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПолеВводаТегаОкончаниеВводаТекстаСервер(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкиКонтрагента

&НаКлиентеНаСервереБезКонтекста
Процедура ВыполнитьВсеПроверки(Форма)
	
	СформироватьПредставлениеПроверкиИНН(Форма);
	СформироватьПредставлениеПроверкиКПП(Форма);
	СформироватьПредставлениеПроверкиОКПО(Форма);
	СформироватьПредставлениеПроверкиОГРН(Форма);
	СформироватьПредставлениеПроверкиДублей(Форма);
	
	РаботаСКонтрагентамиКлиентСерверПереопределяемый.СформироватьПредставлениеПроверкиДанных(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПроверкиИНН(Форма)
	
	Объект = Форма.Объект;
	ОписаниеОшибки = "";
	Если ПустаяСтрока(Объект.ИНН) Тогда
		Объект.ИННВведенКорректно = Истина;
	Иначе
		Объект.ИННВведенКорректно = РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Объект.ИНН, ЭтоЮрЛицо(Объект.ВидКонтрагента), ОписаниеОшибки);
	КонецЕсли;
	Форма.ПредставлениеПроверкиИНН = Новый ФорматированнаяСтрока(ОписаниеОшибки, , Форма.ЦветТекстаНекорректногоКонтрагента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПроверкиКПП(Форма)
	
	Объект = Форма.Объект;
	ОписаниеОшибки = "";
	Если ПустаяСтрока(Объект.КПП) Тогда
		Объект.КППВведенКорректно = Истина;
	Иначе
		Объект.КППВведенКорректно = РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(Объект.КПП, ОписаниеОшибки);
	КонецЕсли;
	Форма.ПредставлениеПроверкиКПП = Новый ФорматированнаяСтрока(ОписаниеОшибки, , Форма.ЦветТекстаНекорректногоКонтрагента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПроверкиОКПО(Форма)
	
	Объект = Форма.Объект;
	ОписаниеОшибки = "";
	Если Не ПустаяСтрока(Объект.КодПоОКПО) Тогда
		РегламентированныеДанныеКлиентСервер.КодПоОКПОСоответствуетТребованиям(Объект.КодПоОКПО, ЭтоЮрЛицо(Объект.ВидКонтрагента), ОписаниеОшибки);
	КонецЕсли;
	Форма.ПредставлениеПроверкиОКПО = Новый ФорматированнаяСтрока(ОписаниеОшибки, , Форма.ЦветТекстаНекорректногоКонтрагента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПроверкиОГРН(Форма)
	
	Объект = Форма.Объект;
	ОписаниеОшибки = "";
	
	// Проверка ОГРН имеет смысл только для юридического лица зарегистрированного в России или для индивидуального предпринимателя
	Если Не ПустаяСтрока(Объект.РегистрационныйНомер)
		И ((ЭтоЮрЛицо(Объект.ВидКонтрагента) И Объект.СтранаРегистрации = ПредопределенноеЗначение("Справочник.СтраныМира.Россия"))
		Или (Объект.ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.ИндивидуальныйПредприниматель"))) Тогда
		
		РегламентированныеДанныеКлиентСервер.ОГРНСоответствуетТребованиям(Объект.РегистрационныйНомер, ЭтоЮрЛицо(Объект.ВидКонтрагента), ОписаниеОшибки);
	КонецЕсли;
	
	Форма.ПредставлениеПроверкиОГРН = Новый ФорматированнаяСтрока(ОписаниеОшибки, , Форма.ЦветТекстаНекорректногоКонтрагента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПроверкиДублей(Форма)
	
	Объект = Форма.Объект;
	ОписаниеОшибки = "";
	
	Если ИННиКППКорректны(Форма) И Не ПустаяСтрока(Объект.ИНН) Тогда
		
		
		МассивДублей = ПолучитьДублиКонтрагентаСервер(СокрЛП(Объект.ИНН), СокрЛП(Объект.КПП), Объект.Ссылка);
		
		КоличествоДублей = МассивДублей.Количество();
		
		Если КоличествоДублей > 0 Тогда
			
			СтруктураПараметровСообщенияОДублях = Новый Структура;
			СтруктураПараметровСообщенияОДублях.Вставить("ИННиКПП", ?(ЭтоЮрЛицо(Объект.ВидКонтрагента), НСтр("ru = 'ИНН и КПП'"), НСтр("ru = 'ИНН'")));
			
			Если КоличествоДублей = 1 Тогда
				СтруктураПараметровСообщенияОДублях.Вставить("КоличествоДублей", НСтр("ru = 'один'"));
				СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'контрагент'"));
			ИначеЕсли КоличествоДублей < 5 Тогда
				СтруктураПараметровСообщенияОДублях.Вставить("КоличествоДублей", КоличествоДублей);
				СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'контрагента'"));
			Иначе
				СтруктураПараметровСообщенияОДублях.Вставить("КоличествоДублей", КоличествоДублей);
				СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'контрагентов'"));
			КонецЕсли;
			
			ОписаниеОшибки = НСтр("ru = 'С таким [ИННиКПП] есть [КоличествоДублей] [СклонениеКонтрагентов]'");
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ОписаниеОшибки, СтруктураПараметровСообщенияОДублях);
			
		КонецЕсли;
	КонецЕсли;
	
	Форма.ПредставлениеПроверкиДублей = Новый ФорматированнаяСтрока(ОписаниеОшибки, , Форма.ЦветТекстаНекорректногоКонтрагента, , "ПоказатьДубли");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДублиКонтрагентаСервер(ИНН, КПП, ИсключаяСсылку)
	
	Возврат Справочники.Контрагенты.ПроверитьДублиСправочникаКонтрагентыПоИННКПП(ИНН, КПП, ИсключаяСсылку);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИННиКППКорректны(Форма)
	
	Объект = Форма.Объект;
	ЭтоЮрЛицо = ЭтоЮрЛицо(Объект.ВидКонтрагента);
	
	Если ЭтоЮрЛицо Тогда
		Результат = Объект.ИННВведенКорректно И (Объект.КППВведенКорректно Или ПустаяСтрока(Объект.КПП));
	Иначе
		Результат = Объект.ИННВведенКорректно;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоЮрЛицо(ВидКонтрагента)
	
	Возврат ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.ЮридическоеЛицо")
		Или ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.ГосударственныйОрган");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьРеквизитыПроверкиКонтрагентов(Форма)
	
	Объект = Форма.Объект;
	
	Форма.РеквизитыПроверкиКонтрагентов.ЭтоИностранныйКонтрагент =
		(Объект.ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.ЮридическоеЛицо")
		И Объект.СтранаРегистрации <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия"));
	
	Форма.РеквизитыПроверкиКонтрагентов.ЭтоЮридическоеЛицо =
		(Объект.ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.ЮридическоеЛицо")
		Или Объект.ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.ГосударственныйОрган"));
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеЕГР

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИНН(знач ИНН)
	
	ОписаниеОшибкиЗаполнения = "";
	ЗаполнитьРеквизитыПоИНННаСервере(ИНН);
	УправлениеФормой();
	
	Если Не ПустаяСтрока(ОписаниеОшибкиЗаполнения) Тогда
		ОбработчикЗавершенияОбработкиОшибки = Новый ОписаниеОповещения(
		"ОбработатьОшибкуЗаполнитьРеквизитыПоИННЗавершение",
		ЭтотОбъект,
		ИНН);
		РаботаСКонтрагентамиКлиент.ОбработатьОшибку(ОписаниеОшибкиЗаполнения, ОбработчикЗавершенияОбработкиОшибки);
	Иначе
		Если ИспользоватьСпаркРиски Тогда
			// ИнтернетПоддержкаПользователей.СПАРКРиски
			ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
			ОбновитьОтображениеИндексыСПАРК();
			// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
		КонецЕсли;
		
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		УстановитьРеквизитыПроверкиКонтрагентов(ЭтотОбъект);
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоИНННаСервере(ИНН)
	
	Если СтрДлина(ИНН) = 12 Тогда
		ЭтоЮрЛицо = Ложь;
	Иначе
		ЭтоЮрЛицо = Истина;
	КонецЕсли;
	
	Если ЭтоЮрЛицо Тогда
		
		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН(ИНН);
		
		Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
			ОписаниеОшибкиЗаполнения = РеквизитыКонтрагента.ОписаниеОшибки;
			Возврат;
		КонецЕсли;
		
		Объект.Наименование			= РеквизитыКонтрагента.Наименование;
		Объект.НаименованиеПолное	= РеквизитыКонтрагента.НаименованиеСокращенное;
		Объект.ИНН					= РеквизитыКонтрагента.ИНН;
		Объект.КПП					= РеквизитыКонтрагента.КПП;
		Объект.РегистрационныйНомер	= РеквизитыКонтрагента.РегистрационныйНомер;
		
		Если РеквизитыКонтрагента.ЮридическийАдрес <> Неопределено Тогда
			
			РеквизитыКонтрагента.ЮридическийАдрес.Вставить("Значение", РеквизитыКонтрагента.ЮридическийАдрес.КонтактнаяИнформация);
			
			// Юридический адрес
			КонтактнаяИнформацияУНФ.ЗаполнитьЗначениеКонтактнойИнформации(
				ЭтотОбъект,
				Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
				РеквизитыКонтрагента.ЮридическийАдрес,
				Истина
			);
			// Фактический адрес
			КонтактнаяИнформацияУНФ.ЗаполнитьЗначениеКонтактнойИнформации(
				ЭтотОбъект,
				Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
				РеквизитыКонтрагента.ЮридическийАдрес,
				Ложь
			);
		КонецЕсли;
		
		// Телефон
		Если РеквизитыКонтрагента.Телефон <> Неопределено Тогда
			
			РеквизитыКонтрагента.Телефон.Вставить("Значение", РеквизитыКонтрагента.Телефон.КонтактнаяИнформация);
			КонтактнаяИнформацияУНФ.ЗаполнитьЗначениеКонтактнойИнформации(
				ЭтотОбъект,
				Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
				РеквизитыКонтрагента.Телефон,
				Истина
			);
		КонецЕсли;
		
		// Основное контактное лицо
		ОсновнойКонтакт = ДанныеКонтактныхЛиц[0];
		
		Если РеквизитыКонтрагента.Руководитель <> Неопределено И ПустаяСтрока(ОсновнойКонтакт.Наименование) Тогда
			
			ОсновнойКонтакт.Наименование = РеквизитыКонтрагента.Руководитель.Фамилия
				+ ?(ПустаяСтрока(РеквизитыКонтрагента.Руководитель.Имя), "", " " + РеквизитыКонтрагента.Руководитель.Имя)
				+ ?(ПустаяСтрока(РеквизитыКонтрагента.Руководитель.Отчество), "", " " + РеквизитыКонтрагента.Руководитель.Отчество);
			ОсновнойКонтакт.Должность = РеквизитыКонтрагента.Руководитель.Должность;
			ОсновнойКонтакт.Изменен = Истина;
			
		КонецЕсли;
		
		НаименованиеПолное = РеквизитыКонтрагента.НаименованиеПолное;
		
	Иначе
		
		РеквизитыПредпринимателя = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(ИНН);
		
		Если ЗначениеЗаполнено(РеквизитыПредпринимателя.ОписаниеОшибки) Тогда
			ОписаниеОшибкиЗаполнения = РеквизитыПредпринимателя.ОписаниеОшибки;
			Возврат;
		КонецЕсли;
		
		Объект.Наименование			= РеквизитыПредпринимателя.Наименование;
		Объект.НаименованиеПолное	= РеквизитыПредпринимателя.НаименованиеСокращенное;
		Объект.ИНН					= РеквизитыПредпринимателя.ИНН;
		Объект.РегистрационныйНомер	= РеквизитыПредпринимателя.РегистрационныйНомер;
		
		Если РеквизитыПредпринимателя.СвидетельствоОРегистрации <> Неопределено Тогда
			Объект.СвидетельствоСерияНомер = "" + РеквизитыПредпринимателя.СвидетельствоОРегистрации.Серия + " " + РеквизитыПредпринимателя.СвидетельствоОРегистрации.Номер;
			Объект.СвидетельствоДатаВыдачи = РеквизитыПредпринимателя.СвидетельствоОРегистрации.Дата;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыПредпринимателя.Фамилия) Тогда
			Объект.ФИО = РеквизитыПредпринимателя.Фамилия
				+ ?(ПустаяСтрока(РеквизитыПредпринимателя.Имя), "", " " + РеквизитыПредпринимателя.Имя)
				+ ?(ПустаяСтрока(РеквизитыПредпринимателя.Отчество), "", " " + РеквизитыПредпринимателя.Отчество);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыПредпринимателя.Пол) Тогда
			Объект.Пол = ?(РеквизитыПредпринимателя.Пол = "1", Перечисления.ПолФизическогоЛица.Мужской, Перечисления.ПолФизическогоЛица.Женский);
		КонецЕсли;
		
		НаименованиеПолное = РеквизитыПредпринимателя.НаименованиеПолное;
		
	КонецЕсли;
	
	ЗаполнитьСписокВыбораНаименования(ЭтотОбъект);
	Если ЗначениеЗаполнено(НаименованиеПолное) Тогда
		
		Элементы.Наименование.СписокВыбора.Добавить(НаименованиеПолное);
		
		Элементы.НаименованиеПолное.СписокВыбора.Очистить();
		Элементы.НаименованиеПолное.СписокВыбора.Добавить(Объект.НаименованиеПолное);
		Элементы.НаименованиеПолное.СписокВыбора.Добавить(НаименованиеПолное);
		Элементы.НаименованиеПолное.КнопкаВыпадающегоСписка = Истина;
		
	КонецЕсли;
	
	Если СтрДлина(ИНН) = 10 Тогда
		Объект.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
	ИначеЕсли СтрДлина(ИНН) = 12 Тогда
		
		Если ТипЗнч(ОрганизационноПравоваяФорма) = Тип("Структура")
			И ОрганизационноПравоваяФорма.Свойство("ПолнаяФорма")
			И ВРег(ОрганизационноПравоваяФорма.ПолнаяФорма) = ВРег("Индивидуальный предприниматель") Тогда
				
			Объект.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель;
		Иначе
			Объект.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо;
		КонецЕсли;
		
	КонецЕсли;
	
	КонтактнаяИнформацияУНФКлиентСервер.ЗаполнитьСписокВыбораАдресов(ЭтотОбъект);
	ВыполнитьВсеПроверки(ЭтотОбъект);
	УстановитьЗаголовокЮридическихДанных(ЭтотОбъект);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючевыеРеквизитыЗаполнены(Форма)
	
	Результат = Ложь;
	Объект = Форма.Объект;
	
	Если ЗначениеЗаполнено(Объект.Наименование)
		Или Объект.КонтактнаяИнформация.Количество() > 0 Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОшибкуЗаполнитьРеквизитыПоИННЗавершение(Результат, СтрокаИНН) Экспорт
	
	Если Результат.ПовторитьДействие Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН(СтрокаИНН);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеРеквизитовКонтрагентВыбран(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) 
		ИЛИ ТипЗнч(Результат) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ИНН = Результат;
	ВыполнитьЗаполнениеРеквизитовПоИНН(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерезаполнитьРеквизитыПоИННЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН(Объект.ИНН);
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#Область ЗаголовкиСвернутогоОтображенияГрупп

// Процедура устанавливает заголовок свернутого отображения для группы, по шаблону:
// <заголовок группы (как задан в конфигураторе)> : <динамический параметр 1>, <динамический параметр 2>
//
// Параметры:
//  Форма					 - Форма	 - текущая форма
//  НазваниеГруппы			 - Строка	 - имя группы формы, для которой устанавливается заголовок
//  ДинамическиеПараметры	 - Массив	 - массив частей заголовка.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокСвернутогоОтображения(Форма, НазваниеГруппы, ДинамическиеПараметры)
	
	ЗаголовокТекст = Форма.Элементы[НазваниеГруппы].Заголовок;
	Если ДинамическиеПараметры.Количество() > 0 Тогда
		ЗаголовокТекст = ЗаголовокТекст + ": ";
		Для Каждого Параметр Из ДинамическиеПараметры Цикл
			ЗаголовокТекст = ЗаголовокТекст + Параметр + ", ";
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ЗаголовокТекст, 2);
	КонецЕсли;
	
	Форма.Элементы[НазваниеГруппы].ЗаголовокСвернутогоОтображения = ЗаголовокТекст;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокЮридическихДанных(Форма)
	
	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;
	
	Если Объект.ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.ЮридическоеЛицо") Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='Юр.лицо'"));
	ИначеЕсли Объект.ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.ИндивидуальныйПредприниматель") Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='ИП'"));
	ИначеЕсли Объект.ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.ФизическоеЛицо") Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='Физ.лицо'"));
	ИначеЕсли Объект.ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыКонтрагентов.ГосударственныйОрган") Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='Гос.орган'"));
	КонецЕсли;
	
	Если Не ПустаяСтрока(Объект.ИНН) Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='ИНН'") + " " + Объект.ИНН);
	Иначе
		ДинамическиеПараметры.Добавить(НСтр("ru='ИНН...'"));
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "ЮридическиеДанные", ДинамическиеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ПанельДополнительнойИнформации

&НаСервере
Процедура ПрочитатьДанныеПанелиДопИнформации()
	
	Если УправлениеНебольшойФирмойУправлениеДоступомПовтИсп.ЕстьПрофильРабочееМестоКассира() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПанельДополнительнойИнформации.Видимость = ЗначениеЗаполнено(Объект.Ссылка);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	КрупныйШрифт = Новый Шрифт(,11);
	МелкийШрифт  = Новый Шрифт(,8);
	
	Запрос = Новый Запрос;
	КонтрагентУИД = "Контрагент"+СтрЗаменить(Объект.Ссылка.УникальныйИдентификатор(),"-","");
	Запрос.УстановитьПараметр(КонтрагентУИД, Объект.Ссылка);
	
	// 1. Остаток взаиморасчетов
	
	Если ПросмотрВзаиморасчетов Тогда
				
		Элементы.ОстатокВзаиморасчетов.Заголовок = РаботаСКонтрагентамиУНФ.ЗаголовокНадписиВзаиморасчетов(Объект.Ссылка);
		
	КонецЕсли;
	
	// 2. Сумма продаж
	
	Если ПросмотрПродаж Тогда
		
		Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПродажиОбороты.СуммаОборот КАК Сумма
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(, , , Контрагент = &Контрагент) КАК ПродажиОбороты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Продажи.Документ КАК Документ,
			|	Продажи.Документ.Дата КАК Дата
			|ИЗ
			|	РегистрНакопления.Продажи КАК Продажи
			|ГДЕ
			|	Продажи.Контрагент = &Контрагент
			|
			|УПОРЯДОЧИТЬ ПО
			|	Продажи.Документ.Дата УБЫВ";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Контрагент", "&"+КонтрагентУИД);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Выборка = МассивРезультатов[0].Выбрать();
		Если Выборка.Следующий() Тогда
			Сумма = Выборка.Сумма;
		Иначе
			Сумма = 0;
		КонецЕсли;
		
		КомпонентыФС = Новый Массив;
		КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Продажи на'") + " ", КрупныйШрифт));
		
		СуммаСтрокой = Формат(Сумма, "ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧН=0,00");
		ПозицияРазделителя = СтрНайти(СуммаСтрокой, ",");
		КомпонентыЧисла = Новый Массив;
		КомпонентыЧисла.Добавить(Новый ФорматированнаяСтрока(Лев(СуммаСтрокой, ПозицияРазделителя), КрупныйШрифт));
		КомпонентыЧисла.Добавить(Новый ФорматированнаяСтрока(Сред(СуммаСтрокой, ПозицияРазделителя+1), МелкийШрифт));
		КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(КомпонентыЧисла, , , , "Продажи"));
		
		КомпонентыФС.Добавить(" "
		+ УправлениеНебольшойФирмойПовтИсп.ПолучитьСимвольноеПредставлениеВалюты(
		УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета()));
		
		Элементы.СуммаПродаж.Заголовок = Новый ФорматированнаяСтрока(КомпонентыФС, , ЦветаСтиля.ТекстВторостепеннойНадписи);
		
		// 3. Последняя продажа
		
		Выборка = МассивРезультатов[1].Выбрать();
		Если Выборка.Следующий() Тогда
			Дата = Выборка.Дата;
			НавСсылка = ПолучитьНавигационнуюСсылку(Выборка.Документ);
		Иначе
			Дата = '00010101';
			НавСсылка = "";
		КонецЕсли;
		
		КомпонентыФС = Новый Массив;
		КомпонентыФС.Добавить(НСтр("ru='Последняя продажа'") + " ");
		КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(Формат(Дата, "Л=ru_RU; ДЛФ=D; ДП=<нет>"), , , , НавСсылка));
		
		Элементы.ПоследняяПродажа.Заголовок = Новый ФорматированнаяСтрока(КомпонентыФС, КрупныйШрифт, ЦветаСтиля.ТекстВторостепеннойНадписи);
		
	КонецЕсли;
	
	// 4. Последнее событие
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СобытиеУчастники.Ссылка КАК Событие,
	|	СобытиеУчастники.Ссылка.НачалоСобытия КАК Дата
	|ИЗ
	|	Документ.Событие.Участники КАК СобытиеУчастники
	|ГДЕ
	|	СобытиеУчастники.Контакт = &Контрагент
	|	И СобытиеУчастники.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	СобытиеУчастники.Ссылка.НачалоСобытия УБЫВ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Контрагент", "&"+КонтрагентУИД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Дата = Выборка.Дата;
		НавСсылка = ПолучитьНавигационнуюСсылку(Выборка.Событие);
	Иначе
		Дата = '00010101';
		НавСсылка = "";
	КонецЕсли;
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(НСтр("ru='Последнее событие'") + " ");
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(Формат(Дата, "Л=ru_RU; ДЛФ=D; ДП=<нет>"), , , , НавСсылка));
	
	Элементы.ПоследнееСобытие.Заголовок = Новый ФорматированнаяСтрока(КомпонентыФС, КрупныйШрифт, ЦветаСтиля.ТекстВторостепеннойНадписи);
	
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформацияКонтрагентаУНФ

&НаСервере
Процедура ДобавитьКонтактнуюИнформациюСервер(ДобавляемыйВид, УстановитьВыводВФормеВсегда = Ложь) Экспорт
	
	КонтактнаяИнформацияУНФ.ДобавитьКонтактнуюИнформацию(ЭтотОбъект, ДобавляемыйВид, УстановитьВыводВФормеВсегда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДействиеКИНажатие(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.ДействиеКИНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИПриИзменении(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИОчистка(Элемент, СтандартнаяОбработка)
	
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийКИПриИзменении(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.КомментарийКИПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияУНФВыполнитьКоманду(Команда)
	
	КонтактнаяИнформацияУНФКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	КонтактнаяИнформацияУНФКлиент.АвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	КонтактнаяИнформацияУНФКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область Google

&НаСервере
Процедура ЗаполнитьНаименованиеИКонтактнуюИнформацию(Знач КлассификаторСсылка, Знач ИмяЭлемента = "")
	
	ДанныеКонтакта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	КлассификаторСсылка,
	"Title, JSON");
	
	Если ДанныеКонтактныхЛиц.Количество() = 0 Тогда
		ДанныеКонтактныхЛиц.Добавить();
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяЭлемента) Тогда
		ИндексЭлемента = 0;
	Иначе
		ИндексЭлемента = Число(СтрЗаменить(ИмяЭлемента, "НаименованиеКонтакт_", ""));
	КонецЕсли;
	
	Если ИндексЭлемента = 0 Тогда
		Объект.Наименование = ДанныеКонтакта.Title;
	КонецЕсли;
	
	ДанныеКонтактныхЛиц[ИндексЭлемента].Наименование = ДанныеКонтакта.Title;
	ДанныеКонтактныхЛиц[ИндексЭлемента].Изменен = Истина;
	ДанныеКонтактныхЛиц[ИндексЭлемента].КонтактноеЛицо = Неопределено;
	
	ДанныеКонтактныхЛиц[ИндексЭлемента].КонтактнаяИнформация.Очистить();
	ЗаполнитьВсегдаВыводимыеВидыКИ(
	ДанныеКонтактныхЛиц[ИндексЭлемента].КонтактнаяИнформация,
	СвойстваВидовКонтактнойИнформацииКонтактныхЛиц);
	
	Справочники.КлассификаторКонтактов.ЗаполнитьКонтактнуюИнформациюИзJSON(
	ДанныеКонтактныхЛиц[ИндексЭлемента].КонтактнаяИнформация,
	ДанныеКонтакта.JSON,
	ТипЗнч(ДанныеКонтактныхЛиц[ИндексЭлемента].КонтактноеЛицо));
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОписаниеПолейДляАвтоподбора()
	
	Результат = Новый Соответствие;
	Индекс = 0;
	Для Каждого Контакт Из ДанныеКонтактныхЛиц Цикл
		
		ИмяПоля = "НаименованиеКонтакт_" + Индекс;
		Результат.Вставить(ИмяПоля, Новый Структура);
		
		Результат[ИмяПоля].Вставить("ПутьКДанным", "Объект.КонтактноеЛицо");
		Результат[ИмяПоля].Вставить("ТипЗначения", Тип("СправочникСсылка.КонтактныеЛица"));
		Результат[ИмяПоля].Вставить("ИмяФормыОбъекта", "Справочник.КонтактныеЛица.ФормаОбъекта");
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_АвтоПодбор(
	ЭтотОбъект,
	Элемент,
	Текст,
	ДанныеВыбора,
	Параметры,
	Ожидание,
	СтандартнаяОбработка);
	
	ДобавитьПунктСозданиеКонтакта(ЭтотОбъект, ДанныеВыбора, Параметры, Текст,СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// ИнтернетПоддержкаПользователей.СПАРКРиски
&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()
	ОбновитьОтображениеИндексыСПАРК();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК()
	ПараметрыОтображения = Новый Структура("ВариантОтображения", "Многострочный");
	СПАРКРискиКлиент.ОтобразитьИндексыСПАРК(
		ЭтотОбъект.ИндексыСПАРКРиски,
		Объект,
		Объект.ИНН, // Искать по ИНН
		ЭтотОбъект,
		ПараметрыОтображения,
		Истина);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.СПАРКРиски

// Команды1СПАРКРиски
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду1СПАРКРиски(Команда)
	СПАРКРискиКлиент.ВыполнитьПодключаемуюКоманду(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец Команды1СПАРКРиски

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура ПроверитьКонтрагента(Команда)
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентаПоКнопке(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_РедактироватьСоставСвойств()

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры // ОбновитьЗависимостиДополнительныхРеквизитов()

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры // Подключаемый_ПриИзмененииДополнительногоРеквизита()

&НаКлиенте
Процедура ES_ВидКонтрагентаПриИзменении(Элемент)
	
	//EFSOL_Шаповал Олег Анатольевич 14 сентября 2017 г. 8:39:26 +
	ES_УстановитьВидимостьЭлементовФормы();
	Если Объект.ES_ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ES_ВидКонтрагента.В2С")Тогда
		Объект.ES_ПереноситьНеДоставленныеЗаказыНаЗавтра = Ложь;
	КонецЕсли;
	//EFSOL Шаповал О.А. -
	
КонецПроцедуры

&НаКлиенте
Процедура ES_УстановитьВидимостьЭлементовФормы()
	
	//EFSOL_Шаповал Олег Анатольевич 14 сентября 2017 г. 8:39:26 +
	Если Объект.ES_ВидКонтрагента = ПредопределенноеЗначение("Перечисление.ES_ВидКонтрагента.В2В")Тогда
		Элементы.ES_ПереноситьНеДоставленныеЗаказыНаЗавтра.Видимость = Истина;
	Иначе
		Элементы.ES_ПереноситьНеДоставленныеЗаказыНаЗавтра.Видимость = Ложь;
	КонецЕсли;
	//EFSOL Шаповал О.А. -
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область Взаиморасчеты

&НаКлиенте
Процедура УстановитьЗаголовкиИВидимостьПриИзмененииФлагаРасчетовПоДоговорам()
	
	Если Объект.ВестиРасчетыПоДоговорам Тогда
		Элементы.ГруппаУсловияЗаполненияДокументовОплаты.Заголовок = НСтр("ru = 'Заполнение новых договоров'");
		Элементы.ГруппаУсловияЗаполненияДокументовОплаты.ОтображатьЗаголовок = Истина;
	Иначе
		Элементы.ГруппаУсловияЗаполненияДокументовОплаты.ОтображатьЗаголовок = Ложь;
	КонецЕсли;
	Элементы.ГруппаЗначенияДляДоговораПоУмолчанию.Видимость = Объект.ВестиРасчетыПоДоговорам;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаРасчетовПоУмолчаниюПриИзменении(Элемент)
	
	Если Объект.ВалютаРасчетовПоУмолчанию = НациональнаяВалюта Тогда
		Объект.РасчетыВУсловныхЕдиницахПоУмолчанию = Ложь;
	КонецЕсли;
	УстановитьВидимостьФлагаВ_УЕ();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьФлагаВ_УЕ()
	
	Если Объект.ВалютаРасчетовПоУмолчанию = НациональнаяВалюта Тогда
		Элементы.РасчетыВУсловныхЕдиницахПоУмолчанию.Видимость = Ложь;
	Иначе
		Элементы.РасчетыВУсловныхЕдиницахПоУмолчанию.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГоловнойКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение)
		И Объект.Ссылка = ВыбранноеЗначение Тогда
		
		ВыбранноеЗначение = Неопределено;
		
		ТекстСообщения = НСтр("ru ='Выбрано некорректное значение для головного контрагента.
			|Головной контрагент совпадает с текущим.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , "Объект.ГоловнойКонтрагент");
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти