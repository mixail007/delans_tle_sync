
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "КомандыГлобальные");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	СклонениеПредставленийОбъектов.ПриСозданииНаСервере(ЭтотОбъект, Объект.Наименование);
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
	ОбменСGoogle.ПодготовитьРеквизитыДляАвтоподбораИзКлассификатора(ЭтотОбъект, Параметры);
	Параметры.Свойство("СопоставитьКонтактИАдресЭПВСобытияхПослеЗаписиОбъекта", СопоставитьКонтактИАдресЭПВСобытияхПослеЗаписиОбъекта);
	
	ОбязательноЗаполнятьИсточникВКонтактах = 
		РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательностьЗаполненияРеквизита("Контакт", "ИсточникПривлечения");

	Если Параметры.Ключ.Пустая() Тогда
		
		ПриСозданииПриЧтенииНаСервере();
		
		Если ЗначениеЗаполнено(КлассификаторДляЗаполненияКИ) Тогда
			ЗаполнитьКонтактнуюИнформацию(КлассификаторДляЗаполненияКИ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбязательноЗаполнятьИсточникВКонтактах Тогда
		Элементы.ИсточникПривлечения.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	
	ЭтотОбъект.СобытиеДляПоказаПослеЗакрытия = Параметры.СобытиеДляПоказаПослеЗакрытия;
	ЗаполнитьСписокВыбораПолейДолжность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы И ЗначениеЗаполнено(СобытиеДляПоказаПослеЗакрытия) Тогда
		ПоказатьЗначение(, СобытиеДляПоказаПослеЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_Контрагент" Тогда
		Если ДанныеКонтрагентов.НайтиСтроки(Новый Структура("Контрагент",Параметр)).Количество() <> 0
			ИЛИ (Источник <> Неопределено  И Источник.ВладелецФормы = ЭтотОбъект)
			ИЛИ (ИмяСобытия = "ИзменениеКонтактногоЛица_Контрагент" И Параметр = Объект.Ссылка) Тогда
			ОбновитьДанныеОбъекта();
			ОбновитьДанныеСвязанныхКонтрагентов();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Выбор_Контрагент" Тогда
		Если Источник.ВладелецФормы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если Источник.ВладелецФормы = ЭтотОбъект Тогда
			ОбновитьЭлементТаблицыКонтрагентов(ИндексВыбранногоКонтрагента,Параметр.Контрагент);
			ТекущийЭлемент = Элементы.Найти("Должность_" + ИндексВыбранногоКонтрагента);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииПриЧтенииНаСервере();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьДанныеРолей(ТекущийОбъект);
	
	Теги.ПередЗаписьюНаСервере(ЭтотОбъект,ТекущийОбъект);
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец УНФ.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьСвязиКонтрагентКонтакт(ТекущийОбъект);
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	СклонениеПредставленийОбъектов.ПриЗаписиНаСервере(ЭтотОбъект, Объект.Наименование, ТекущийОбъект.Ссылка, Истина, ИдентификаторПолаКонтактногоЛица(Объект.Пол));
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Для каждого Контрагент из ДанныеКонтрагентов Цикл
		
		Если ПустаяСтрока(Контрагент.Должность) Тогда
			Продолжить;
		КонецЕсли;
		
		ПолеДолжность = Элементы.Найти("Должность_" + ДанныеКонтрагентов.Индекс(Контрагент));
		// Удалим если значение уже было
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("СпискиВыбора", "ДолжностиКонтактныхЛиц", Новый Массив);
		НайденныйЭлемент = ПолеДолжность.СписокВыбора.НайтиПоЗначению(СокрЛП(Контрагент.Должность));
		Если НайденныйЭлемент <> Неопределено Тогда
			ПолеДолжность.СписокВыбора.Удалить(НайденныйЭлемент);
		КонецЕсли;
		
		// Вставим на первое место
		ПолеДолжность.СписокВыбора.Вставить(0, СокрЛП(Контрагент.Должность));
		// Сократим список выбора до 10 значений
		Пока ПолеДолжность.СписокВыбора.Количество() > 10 Цикл
			ПолеДолжность.СписокВыбора.Удалить(ПолеДолжность.СписокВыбора.Количество()-1);
		КонецЦикла;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("СпискиВыбора", "ДолжностиКонтактныхЛиц", ПолеДолжность.СписокВыбора.ВыгрузитьЗначения());
			
	КонецЦикла;
	
	Если СопоставитьКонтактИАдресЭПВСобытияхПослеЗаписиОбъекта Тогда
		ЭлектроннаяПочтаУНФ.СопоставитьВФонеКонтактИАдресЭПВСобытиях(
		ТекущийОбъект.Ссылка,
		АдресЭП(),
		УникальныйИдентификатор);
		
		СопоставитьКонтактИАдресЭПВСобытияхПослеЗаписиОбъекта = Ложь;
	КонецЕсли;
	
	ОбновитьЭлементыСвязанныхКонтрагентов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("КонтактноеЛицо",	Объект.Ссылка);
	ПараметрОповещения.Вставить("СвязанныеКонтрагенты", ДанныеКонтрагентов);
	ПараметрОповещения.Вставить("Наименование",		Объект.Наименование);
	
	Оповестить("Запись_КонтактноеЛицо", ПараметрОповещения, ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ);
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ);
	// Конец УНФ.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	СклонениеПредставленийОбъектовКлиент.ПриИзмененииПредставления(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// УНФ.Google
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ОписаниеОповещения") Тогда
		СтандартнаяОбработка = Ложь;
		ВыполнитьОбработкуОповещения(ВыбранноеЗначение);
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторКонтактов") Тогда
		СтандартнаяОбработка = Ложь;
		ЗаполнитьКонтактнуюИнформацию(ВыбранноеЗначение);
		ОбновитьЭлементыКонтактнойИнформации();
	КонецЕсли;
	// Конец УНФ.Google
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.НаименованиеАвтоПодбор(ЭтотОбъект, Элемент.Имя, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОблакоРолейОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РольИД = Сред(НавигационнаяСсылкаФорматированнойСтроки, СтрДлина("Роль_")+1);
	СтрокаРолей = ДанныеРолей.НайтиПоИдентификатору(РольИД);
	ДанныеРолей.Удалить(СтрокаРолей);
	
	ОбновитьЭлементыРолей();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИндексВыбранногоКонтрагента = Число(Сред(Элемент.Имя, СтрДлина("Контрагент_")+1));
	
	Если ДанныеКонтрагентов[ИндексВыбранногоКонтрагента].Контрагент = ВыбранноеЗначение Тогда
		ОбновитьЭлементыСвязанныхКонтрагентов();
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если НЕ ЗначениеЗаполнено(ДанныеКонтрагентов[ИндексВыбранногоКонтрагента].Контрагент) Тогда
		Строки = НедействительныеСвязиКонтрагенты.НайтиСтроки(Новый Структура("Контрагент",ВыбранноеЗначение));
		Если Строки.Количество()>0 Тогда
			Для Каждого Строка Из Строки Цикл
				НедействительныеСвязиКонтрагенты.Удалить(НедействительныеСвязиКонтрагенты.Индекс(Строка));
			КонецЦикла;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	КонтактОсновноеКЛ = ДанныеКонтрагентов[ИндексВыбранногоКонтрагента].ЭтоОсновноеКЛ;
	КонтактПодписант = ДанныеКонтрагентов[ИндексВыбранногоКонтрагента].ЭтоПодписант;
	
	Если КонтактОсновноеКЛ ИЛИ КонтактПодписант Тогда
		СтандартнаяОбработка = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИндексКонтрагента", ИндексВыбранногоКонтрагента);
		ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьВопросОсновноеКЛВыборКонтрагента", ЭтотОбъект, ДополнительныеПараметры);
		ПроверитьКонтактНаОсновнойИПодписанта(ДанныеКонтрагентов[ИндексВыбранногоКонтрагента], Оповещение);
		Возврат;
	КонецЕсли;
	
	ДобавитьЭлементВТаблицуНедействительных(ДанныеКонтрагентов[ИндексВыбранногоКонтрагента]);
	
	Строки = НедействительныеСвязиКонтрагенты.НайтиСтроки(Новый Структура("Контрагент",ВыбранноеЗначение));
	Если Строки.Количество()>0 Тогда
		Для Каждого Строка Из Строки Цикл
			НедействительныеСвязиКонтрагенты.Удалить(НедействительныеСвязиКонтрагенты.Индекс(Строка));
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ОбновитьЭлементыСвязанныхКонтрагентов();
	ТекущийЭлемент = Элементы.Найти(Строка("Должность_" + ИндексВыбранногоКонтрагента));
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИндексВыбранногоКонтрагента = Число(Сред(Элемент.Имя, СтрДлина("Контрагент_")+1));
	Если ЗначениеЗаполнено(ДанныеКонтрагентов[ИндексВыбранногоКонтрагента].Контрагент) Тогда
		Возврат;
	КонецЕсли;
	СозданиеКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИндексВыбранногоКонтрагента = Число(Сред(Элемент.Имя, СтрДлина("Контрагент_")+1));
	Если ЗначениеЗаполнено(ДанныеКонтрагентов[ИндексВыбранногоКонтрагента].Контрагент) Тогда
		Возврат;
	КонецЕсли;
	СозданиеКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Индекс = Число(Сред(Элемент.Имя, СтрДлина("Контрагент_")+1));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",ДанныеКонтрагентов[Индекс].Контрагент);
	ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта",ПараметрыФормы,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	ИндексВыбранногоКонтрагента = Число(Сред(Элемент.Имя, СтрДлина("Контрагент_")+1));
	
	КонтактОсновноеКЛ = ДанныеКонтрагентов[ИндексВыбранногоКонтрагента].ЭтоОсновноеКЛ;
	КонтактПодписант = ДанныеКонтрагентов[ИндексВыбранногоКонтрагента].ЭтоПодписант;
	
	Если НЕ КонтактОсновноеКЛ И НЕ КонтактПодписант Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеКонтрагента = ДанныеКонтрагентов[ИндексВыбранногоКонтрагента];
		ДобавитьЭлементВТаблицуНедействительных(ДанныеКонтрагента);
		
		Модифицированность = Истина;
		ОбновитьЭлементыСвязанныхКонтрагентов();
		ТекущийЭлемент = Элементы["Контрагент_"+ИндексВыбранногоКонтрагента];
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ОбработатьВопросОсновноеКЛРазрывСвязи", ЭтотОбъект);
	ПроверитьКонтактНаОсновнойИПодписанта(ДанныеКонтрагентов[ИндексВыбранногоКонтрагента], Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НедействителенПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ НЕ Объект.Недействителен Тогда
		Возврат;
	КонецЕсли;
	
	КонтактОсновноеКЛ = Ложь;
	КонтактПодписант = Ложь;
	
	Для Каждого Контрагент ИЗ ДанныеКонтрагентов Цикл
		
		Если НЕ Контрагент.ЭтоОсновноеКЛ И НЕ Контрагент.ЭтоПодписант Тогда
			Продолжить;
		КонецЕсли;
		
		Если Контрагент.ЭтоОсновноеКЛ Тогда
			КонтактОсновноеКЛ = Истина;
		КонецЕсли;
		
		Если Контрагент.ЭтоПодписант Тогда
			КонтактПодписант = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ КонтактОсновноеКЛ И НЕ КонтактПодписант Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВопросОсновноеКЛНедействителен",ЭтотОбъект);
	
	Если КонтактОсновноеКЛ И КонтактПодписант Тогда
		ТекстВопроса = НСтр("ru = 'Контакт используется как основное контактное лицо и подписант контрагента. Пометить его недействительным?'");
	ИначеЕсли КонтактОсновноеКЛ Тогда
		ТекстВопроса = НСтр("ru = 'Контакт используется как основное контактное лицо контрагента. Пометить его недействительным?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Контакт используется как как подписант контрагента. Пометить его недействительным?'");
	КонецЕсли;
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьСвязьСКонтрагентом(Команда)
	
	ИндексВыбранногоКонтрагента = Число(Сред(Команда.Имя, СтрДлина("КомандаУстановитьСвязь_")+1));
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОткрытиеИзФормыКонтакта",Истина);
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",ПараметрыФормы,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтрагента()
	ДобавитьКонтрагентаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДобавитьКонтрагентаНаСервере()
	ДанныеКонтрагентов.Добавить();
	ОбновитьЭлементыСвязанныхКонтрагентов();
	ИндексПоследнегоКА = ДанныеКонтрагентов.Количество() - 1;
	ТекущийЭлемент = Элементы["Контрагент_" + ИндексПоследнегоКА];
КонецПроцедуры

&НаКлиенте
Процедура РазорватьСвязь(Команда)
	
	ИндексВыбранногоКонтрагента = Число(Сред(Команда.Имя, СтрДлина("КомандаРазорватьСвязь_")+1));
	КонтактОсновноеКЛ = ДанныеКонтрагентов[ИндексВыбранногоКонтрагента].ЭтоОсновноеКЛ;
	КонтактПодписант = ДанныеКонтрагентов[ИндексВыбранногоКонтрагента].ЭтоПодписант;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ 
		(НЕ КонтактОсновноеКЛ И НЕ КонтактПодписант) Тогда
		
		ДанныеКонтрагента = ДанныеКонтрагентов[ИндексВыбранногоКонтрагента];
		ДобавитьЭлементВТаблицуНедействительных(ДанныеКонтрагента);
		Модифицированность = Истина;
		ОбновитьЭлементыСвязанныхКонтрагентов();
		ТекущийЭлемент = Элементы["Контрагент_"+ИндексВыбранногоКонтрагента];
		Возврат;
		
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВопросОсновноеКЛРазрывСвязи", ЭтотОбъект);
	ПроверитьКонтактНаОсновнойИПодписанта(ДанныеКонтрагентов[ИндексВыбранногоКонтрагента], Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеКонтрагента()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Оповещение = Новый ОписаниеОповещения("ОбработатьВопросСозданиеКонтрагента",ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны." + Символы.ПС + "Переход к созданию контрагента возможен только после записи данных." + Символы.ПС + "Данные будут записаны'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Наименование",Элементы["Контрагент_"+ИндексВыбранногоКонтрагента].ТекстРедактирования);
		ПараметрыФормы.Вставить("Контакт",Объект.Ссылка);
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта",ПараметрыФормы,ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_КонтактныеЛица"));
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтактНаОсновнойИПодписанта(ДанныеКонтрагента,Оповещение)
	
	КонтактОсновноеКЛ = ДанныеКонтрагента.ЭтоОсновноеКЛ;
	КонтактПодписант = ДанныеКонтрагента.ЭтоПодписант;
	
	Если КонтактОсновноеКЛ И КонтактПодписант Тогда
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Контакт используется как основной и подписант для контрагента %1."+Символы.ПС+
			"При записи основной контакт и подписант контрагента станут незаполненными'"),ДанныеКонтрагента.Контрагент);
	ИначеЕсли КонтактОсновноеКЛ Тогда
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Контакт используется как основной для контрагента %1."+Символы.ПС+
			"При записи основной контакт контрагента станет незаполненным'"),ДанныеКонтрагента.Контрагент);
	Иначе
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Контакт используется как подписант для контрагента %1"+Символы.ПС+
			"При записи подписант станет незаполненным'"),ДанныеКонтрагента.Контрагент);
	КонецЕсли;
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииПриЧтенииНаСервере()
	
	ПрочитатьДанныеРолей();
	ОбновитьЭлементыРолей();
	
	Теги.ПриСозданииПриЧтенииНаСервере(ЭтотОбъект,Объект);
	
	ПрочитатьСвойстваВидовКонтактнойИнформацииКонтактныхЛиц();
	
	ОбновитьДанныеСвязанныхКонтрагентов();
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ПриСозданииПриЧтенииНаСервере(ЭтотОбъект);
	// Конец УНФ.КонтактнаяИнформация
	
	Если Параметры.Свойство("КонтактКакСвязаться", КонтактКакСвязаться) Тогда
		ЗаполнитьКонтактКакСвязаться();
	КонецЕсли;
	
	Если Параметры.Свойство("ЗначенияЗаполнения") И Параметры.ЗначенияЗаполнения.Свойство("Контрагент") Тогда
		
		ДанныеКонтрагентов.Очистить();
		
		Если ТипЗнч(Параметры.ЗначенияЗаполнения.Контрагент) = Тип("Массив")
			И Параметры.ЗначенияЗаполнения.Контрагент.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;

		Если ТипЗнч(Параметры.ЗначенияЗаполнения.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			НовыйКонтрагент = ДанныеКонтрагентов.Добавить();
			НовыйКонтрагент.Контрагент = Параметры.ЗначенияЗаполнения.Контрагент;
			ОбновитьЭлементыСвязанныхКонтрагентов();
			Возврат;
		КонецЕсли;
		
		Для Каждого Контрагент Из Параметры.ЗначенияЗаполнения.Контрагент Цикл
			НовыйКонтрагент = ДанныеКонтрагентов.Добавить();
			НовыйКонтрагент.Контрагент = Контрагент;
		КонецЦикла;
		
		ОбновитьЭлементыСвязанныхКонтрагентов();
		Возврат;
		
	КонецЕсли;
	
	Если Параметры.Свойство("Контрагент",ПривязанныйКонтрагент) Тогда
		ДанныеКонтрагентов.Очистить();
		НовыйКонтрагент = ДанныеКонтрагентов.Добавить();
		НовыйКонтрагент.Контрагент = ПривязанныйКонтрагент;
		ОбновитьЭлементыСвязанныхКонтрагентов();
		Если Параметры.Свойство("НаименованиеКонтакта") Тогда
			Объект.Наименование = Параметры.НаименованиеКонтакта;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ)
	
	ОбязательныеДляЗаполненияРеквизиты = РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательныеДляЗаполненияРеквизитыОбъекта("Контакт");
	
	Для Каждого Реквизит Из ОбязательныеДляЗаполненияРеквизиты Цикл
				
		Если ЗначениеЗаполнено(Объект[Реквизит]) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", 
			"Источник привлечения"),,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Объект[%1]", Реквизит),,
			Отказ);
			
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыКонтактнойИнформации()
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ОбновитьЭлементыКонтактнойИнформации(ЭтотОбъект);
	// Конец УНФ.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСвязанныхКонтрагентов()
	
	ДанныеКонтрагентов.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.Недействителен КАК Недействителен,
	|	Контрагенты.КонтактноеЛицо КАК ОсновноеКЛ,
	|	Контрагенты.КонтактноеЛицоПодписант КАК Подписант,
	|	СвязиКонтрагентКонтакт.Должность КАК Должность
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних(, Контакт = &Контакт) КАК СвязиКонтрагентКонтакт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (Контрагенты.Ссылка = СвязиКонтрагентКонтакт.Контрагент)
	|ГДЕ
	|	СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ
	|	И Контрагенты.Недействителен = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Контакт", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Отбор = Новый Структура("Контрагент",ВыборкаДетальныеЗаписи.Контрагент);
		НедействительнаяСвязь = НедействительныеСвязиКонтрагенты.НайтиСтроки(Отбор);
		
		Если НедействительнаяСвязь.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйКонтрагент = ДанныеКонтрагентов.Добавить();
		НовыйКонтрагент.Контрагент = ВыборкаДетальныеЗаписи.Контрагент;
		НовыйКонтрагент.Должность = Строка(ВыборкаДетальныеЗаписи.Должность);
		НовыйКонтрагент.ЭтоОсновноеКл = ?(ВыборкаДетальныеЗаписи.ОсновноеКЛ = Объект.Ссылка,Истина,Ложь);
		НовыйКонтрагент.ЭтоПодписант = ?(ВыборкаДетальныеЗаписи.Подписант = Объект.Ссылка,Истина,Ложь);
	КонецЦикла;
	
	Если ДанныеКонтрагентов.Количество() = 0 Тогда
		НоваяСтрока = ДанныеКонтрагентов.Добавить();
	КонецЕсли;
	
	ОбновитьЭлементыСвязанныхКонтрагентов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыСвязанныхКонтрагентов()
	
	УдаляемыеЭлементы = Новый Массив;
	УдаляемыеКоманды = Новый Массив;
	// Группа первого контактного лица создана в конфигураторе
	Для ИндексГруппы = 1 По Элементы.СвязанныеКонтрагенты.ПодчиненныеЭлементы.Количество()-1 Цикл
		УдаляемыеЭлементы.Добавить(Элементы.СвязанныеКонтрагенты.ПодчиненныеЭлементы[ИндексГруппы]);
		УдаляемыеКоманды.Добавить(Команды.Найти("КомандаУстановитьСвязь_"+ИндексГруппы));
		УдаляемыеКоманды.Добавить(Команды.Найти("КомандаРазорватьСвязь_"+ИндексГруппы));
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	Для Каждого УдаляемаяКоманда Из УдаляемыеКоманды Цикл
		Команды.Удалить(УдаляемаяКоманда);
	КонецЦикла;
	
	ПолеКонтрагент = Элементы.Контрагент_0;
	КнопкаРазорватьСвязь = Элементы.РазорватьСвязь_0;
	КнопкаУстановитьСвязь = Элементы.УстановитьСвязь_0;
	ПолеДолжность = Элементы.Должность_0;
	ПолеДолжность.СписокВыбора.ЗагрузитьЗначения(ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("СпискиВыбора", "ДолжностиКонтактныхЛиц", Новый Массив));
	ПолеДолжность.КнопкаВыпадающегоСписка = ПолеДолжность.СписокВыбора.Количество() > 0;
	
	ПолеКонтрагент.КнопкаОткрытия = ЗначениеЗаполнено(ДанныеКонтрагентов[0].Контрагент);
	ПолеКонтрагент.КнопкаВыбора = НЕ ЗначениеЗаполнено(ДанныеКонтрагентов[0].Контрагент);
	ПолеКонтрагент.КнопкаСоздания = НЕ ЗначениеЗаполнено(ДанныеКонтрагентов[0].Контрагент);
	
	Если НЕ ЗначениеЗаполнено(ДанныеКонтрагентов[0].Контрагент) Тогда
		ПолеКонтрагент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
		ПолеКонтрагент.КартинкаКнопкиВыбора = БиблиотекаКартинок.Плюс;
	КонецЕсли;
	ПолеДолжность.Доступность = ЗначениеЗаполнено(ДанныеКонтрагентов[0].Контрагент);
	КнопкаРазорватьСвязь.Доступность = ЗначениеЗаполнено(ДанныеКонтрагентов[0].Контрагент);
	КнопкаУстановитьСвязь.Доступность = НЕ ЗначениеЗаполнено(ДанныеКонтрагентов[0].Контрагент);

	Для Каждого Контрагент Из ДанныеКонтрагентов Цикл
		
		ИндексКонтрагента = ДанныеКонтрагентов.Индекс(Контрагент);
		
		Если Элементы.Найти("Контрагент_"+ ИндексКонтрагента) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИндексКонтрагента > 0 Тогда
			ГруппаКонтрагент = Элементы.Добавить("ГруппаКонтрагент_" + ИндексКонтрагента, Тип("ГруппаФормы"), Элементы.СвязанныеКонтрагенты);
			ГруппаКонтрагент.Вид = Элементы.ГруппаКонтрагент_0.Вид;
			ГруппаКонтрагент.Отображение = Элементы.ГруппаКонтрагент_0.Отображение;
			ГруппаКонтрагент.Группировка = Элементы.ГруппаКонтрагент_0.Группировка;
			ГруппаКонтрагент.СквозноеВыравнивание = Элементы.ГруппаКонтрагент_0.СквозноеВыравнивание;
			ГруппаКонтрагент.ОтображатьЗаголовок = Элементы.ГруппаКонтрагент_0.ОтображатьЗаголовок;
			ГруппаКонтрагент.Ширина = Элементы.ГруппаКонтрагент_0.Ширина;
			
			ГруппаНаименованиеКонтрагента = Элементы.Добавить("ГруппаНаименованиеКонтрагента_" + ИндексКонтрагента, Тип("ГруппаФормы"), ГруппаКонтрагент);
			ГруппаНаименованиеКонтрагента.Вид = Элементы.ГруппаНаименованиеКонтрагента_0.Вид;
			ГруппаНаименованиеКонтрагента.Отображение = Элементы.ГруппаНаименованиеКонтрагента_0.Отображение;
			ГруппаНаименованиеКонтрагента.Группировка = Элементы.ГруппаНаименованиеКонтрагента_0.Группировка;
			ГруппаНаименованиеКонтрагента.СквозноеВыравнивание = Элементы.ГруппаНаименованиеКонтрагента_0.СквозноеВыравнивание;
			ГруппаНаименованиеКонтрагента.ОтображатьЗаголовок = Элементы.ГруппаНаименованиеКонтрагента_0.ОтображатьЗаголовок;
			
			ПолеКонтрагент = Элементы.Добавить("Контрагент_" + ИндексКонтрагента, Тип("ПолеФормы"), ГруппаНаименованиеКонтрагента);
			ПолеКонтрагент.Вид = Элементы.Контрагент_0.Вид;
			ПолеКонтрагент.ПутьКДанным = "ДанныеКонтрагентов[" + ИндексКонтрагента + "].Контрагент";
			ПолеКонтрагент.ПодсказкаВвода = Элементы.Контрагент_0.ПодсказкаВвода;
			ПолеКонтрагент.Заголовок = Элементы.Контрагент_0.Заголовок;
			ПолеКонтрагент.КнопкаВыпадающегоСписка = Элементы.Контрагент_0.КнопкаВыпадающегоСписка;
			ПолеКонтрагент.ПоложениеЗаголовка = Элементы.Контрагент_0.ПоложениеЗаголовка;
			ПолеКонтрагент.АвтоМаксимальнаяШирина = Элементы.Контрагент_0.АвтоМаксимальнаяШирина;
			ПолеКонтрагент.МаксимальнаяШирина = Элементы.Контрагент_0.МаксимальнаяШирина;
			ПолеКонтрагент.УстановитьДействие("ПриИзменении","КонтрагентПриИзменении");
			ПолеКонтрагент.УстановитьДействие("ОбработкаВыбора","КонтрагентОбработкаВыбора");
			ПолеКонтрагент.УстановитьДействие("НачалоВыбора","КонтрагентНачалоВыбора");
			ПолеКонтрагент.УстановитьДействие("Создание","КонтрагентСоздание");
			ПолеКонтрагент.УстановитьДействие("Открытие","КонтрагентОткрытие");
			ПолеКонтрагент.УстановитьДействие("ИзменениеТекстаРедактирования","КонтрагентИзменениеТекстаРедактирования");
			
			ГруппаКонтрагент.ВертикальныйИнтервал = Элементы.ГруппаКонтрагент_0.ВертикальныйИнтервал;
			
			КомандыСвязей = Элементы.Добавить("КоманднаяПанельСвязей_" + ИндексКонтрагента, Тип("ГруппаФормы"), ГруппаНаименованиеКонтрагента);
			КомандыСвязей.Вид = Элементы.КоманднаяПанельСвязей_0.Вид;
			КомандыСвязей.РастягиватьПоГоризонтали = Элементы.КоманднаяПанельСвязей_0.РастягиватьПоГоризонтали;
			
			ГруппаКомандСвязейСКонтрагентом = Элементы.Добавить("КомандыСвязейСКонтрагентом_" + ИндексКонтрагента, Тип("ГруппаФормы"), КомандыСвязей);
			ГруппаКомандСвязейСКонтрагентом.Вид = Элементы.КомандыСвязейСКонтрагентом_0.Вид;
			ГруппаКомандСвязейСКонтрагентом.Отображение = Элементы.КомандыСвязейСКонтрагентом_0.Отображение;
						
			КнопкаУстановитьСвязь = Элементы.Добавить("УстановитьСвязь_" + ИндексКонтрагента, Тип("КнопкаФормы"),ГруппаКомандСвязейСКонтрагентом);
			КомандаУстановитьСвязь = Команды.Добавить("КомандаУстановитьСвязь_" + ИндексКонтрагента);
			КомандаУстановитьСвязь.Действие = "УстановитьСвязьСКонтрагентом";
			КомандаУстановитьСвязь.Подсказка = "Установить связь с существующим контрагентом";
			КомандаУстановитьСвязь.ИзменяетСохраняемыеДанные = Истина;
			
			КнопкаУстановитьСвязь.ИмяКоманды = КомандаУстановитьСвязь.Имя;
			КнопкаУстановитьСвязь.Высота = 1;
			КнопкаУстановитьСвязь.Картинка = БиблиотекаКартинок.УстановитьСвязь;
			КнопкаУстановитьСвязь.Отображение = ОтображениеКнопки.Картинка;
			КнопкаУстановитьСвязь.АвтоМаксимальнаяШирина = Элементы.УстановитьСвязь_0.АвтоМаксимальнаяШирина;
			КнопкаУстановитьСвязь.МаксимальнаяШирина = Элементы.УстановитьСвязь_0.МаксимальнаяШирина;
			
			КнопкаРазорватьСвязь = Элементы.Добавить("РазорватьСвязь_" + ИндексКонтрагента, Тип("КнопкаФормы"),ГруппаКомандСвязейСКонтрагентом);
			КомандаРазорватьСвязь = Команды.Добавить("КомандаРазорватьСвязь_" + ИндексКонтрагента);
			КомандаРазорватьСвязь.Действие = "РазорватьСвязь";
			КомандаРазорватьСвязь.Подсказка = "Разорвать связь с контрагентом";
			КомандаРазорватьСвязь.ИзменяетСохраняемыеДанные = Истина;
			
			КнопкаРазорватьСвязь.ИмяКоманды = КомандаРазорватьСвязь.Имя;
			КнопкаРазорватьСвязь.Высота = 1;
			КнопкаРазорватьСвязь.Картинка = БиблиотекаКартинок.РазорватьСвязь;
			КнопкаРазорватьСвязь.Отображение = ОтображениеКнопки.Картинка;
			КнопкаРазорватьСвязь.АвтоМаксимальнаяШирина = Элементы.РазорватьСвязь_0.АвтоМаксимальнаяШирина;
			КнопкаРазорватьСвязь.МаксимальнаяШирина = Элементы.РазорватьСвязь_0.МаксимальнаяШирина;

			ГруппаНаименованиеКонтрагента.ГоризонтальныйИнтервал = Элементы.ГруппаНаименованиеКонтрагента_0.ГоризонтальныйИнтервал;
			
			ПолеДолжность = Элементы.Добавить("Должность_" + ИндексКонтрагента, Тип("ПолеФормы"), ГруппаКонтрагент);
			ПолеДолжность.Вид = Элементы.Должность_0.Вид;
			ПолеДолжность.ПутьКДанным = "ДанныеКонтрагентов[" + ИндексКонтрагента + "].Должность";
			ПолеДолжность.Заголовок = Элементы.Должность_0.Заголовок;
			ПолеДолжность.ПоложениеЗаголовка = Элементы.Должность_0.ПоложениеЗаголовка;
			ПолеДолжность.ПодсказкаВвода = Элементы.Должность_0.ПодсказкаВвода;
			ПолеДолжность.АвтоМаксимальнаяШирина = Элементы.Должность_0.АвтоМаксимальнаяШирина;
			ПолеДолжность.МаксимальнаяШирина = Элементы.Должность_0.МаксимальнаяШирина;
			ПолеДолжность.СписокВыбора.ЗагрузитьЗначения(ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("СпискиВыбора", "ДолжностиКонтактныхЛиц", Новый Массив));
			ПолеДолжность.КнопкаВыпадающегоСписка = ПолеДолжность.СписокВыбора.Количество() > 0;
			ПолеДолжность.РастягиватьПоГоризонтали = Элементы.Должность_0.РастягиватьПоГоризонтали;
			ПолеДолжность.Ширина = Элементы.Должность_0.Ширина;
			
			ПолеКонтрагент.КнопкаОткрытия = ЗначениеЗаполнено(Контрагент.Контрагент);
			ПолеКонтрагент.КнопкаВыбора = НЕ ЗначениеЗаполнено(Контрагент.Контрагент);
			ПолеКонтрагент.КнопкаСоздания = НЕ ЗначениеЗаполнено(Контрагент.Контрагент);

			Если НЕ ЗначениеЗаполнено(Контрагент.Контрагент) Тогда
				ПолеКонтрагент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
				ПолеКонтрагент.КартинкаКнопкиВыбора = БиблиотекаКартинок.Плюс;
			КонецЕсли;
			
			ПолеДолжность.Доступность = ЗначениеЗаполнено(Контрагент.Контрагент);
			КнопкаРазорватьСвязь.Доступность = ЗначениеЗаполнено(Контрагент.Контрагент);
			КнопкаУстановитьСвязь.Доступность = НЕ ЗначениеЗаполнено(Контрагент.Контрагент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементТаблицыКонтрагентов(Индекс,Контрагент)
	ДанныеКонтрагентов[Индекс].Контрагент = Контрагент;
	ДанныеКонтрагентов[Индекс].Должность = Неопределено;
	Строки = НедействительныеСвязиКонтрагенты.НайтиСтроки(Новый Структура("Контрагент",Контрагент));
	Если Строки.Количество()>0 Тогда
		Для Каждого Строка Из Строки Цикл
			НедействительныеСвязиКонтрагенты.Удалить(НедействительныеСвязиКонтрагенты.Индекс(Строка));
		КонецЦикла;
	КонецЕсли;
	ОбновитьЭлементыСвязанныхКонтрагентов();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПолейДолжность()
	
	Если ДанныеКонтрагентов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Индекс = 0;
	Для Каждого Контрагент Из ДанныеКонтрагентов Цикл
		ПолеДолжность = Элементы.Найти("Должность_" + Индекс);
		Если ПолеДолжность.Доступность Тогда
			ПолеДолжность.СписокВыбора.ЗагрузитьЗначения(ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("СпискиВыбора", "ДолжностиКонтактныхЛиц", Новый Массив));
			ПолеДолжность.КнопкаВыпадающегоСписка = ПолеДолжность.СписокВыбора.Количество() > 0;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОбъекта()
	НовыйОбъект = Объект.Ссылка.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(НовыйОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросОсновноеКЛНедействителен(Результат,ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Недействителен = Истина;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Объект.Недействителен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросОсновноеКЛРазрывСвязи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		ДанныеКонтрагента = ДанныеКонтрагентов[ИндексВыбранногоКонтрагента];
		ДобавитьЭлементВТаблицуНедействительных(ДанныеКонтрагента);
		
		Модифицированность = Истина;
		ОбновитьЭлементыСвязанныхКонтрагентов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросОсновноеКЛВыборКонтрагента(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		ДанныеКонтрагента = ДанныеКонтрагентов[ДополнительныеПараметры.ИндексКонтрагента];
		ДобавитьЭлементВТаблицуНедействительных(ДанныеКонтрагента,ДополнительныеПараметры.ВыбранноеЗначение);
		
		Строки = НедействительныеСвязиКонтрагенты.НайтиСтроки(Новый Структура("Контрагент",ДополнительныеПараметры.ВыбранноеЗначение));
		Если Строки.Количество()>0 Тогда
			Для Каждого Строка Из Строки Цикл
				НедействительныеСвязиКонтрагенты.Удалить(НедействительныеСвязиКонтрагенты.Индекс(Строка));
			КонецЦикла;
		КонецЕсли;
		ОбновитьЭлементыСвязанныхКонтрагентов();
		ТекущийЭлемент = Элементы.Найти(Строка("Должность_" + ДополнительныеПараметры.ИндексКонтрагента));
		
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		ОбновитьЭлементыСвязанныхКонтрагентов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросСозданиеКонтрагента(Результат,ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Ок Тогда
		Записать();
		
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Контакт",Объект.Ссылка);
		ПараметрыФормы.Вставить("НаименованиеКонтрагента",Элементы["Контрагент_"+ИндексВыбранногоКонтрагента].ТекстРедактирования);
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта",ПараметрыФормы,ЭтотОбъект);
		
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСвязиКонтрагентКонтакт(ТекущийОбъект)
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	Для Каждого ДанныеКонтрагента из ДанныеКонтрагентов Цикл
		Если НЕ ЗначениеЗаполнено(ДанныеКонтрагента.Контрагент) Тогда
			Продолжить;
		КонецЕсли;
		РегистрыСведений.СвязиКонтрагентКонтакт.НоваяСвязь(ДанныеКонтрагента.Контрагент, ТекущийОбъект.Ссылка,ДанныеКонтрагента.Должность, ТекущийПользователь,);
	КонецЦикла;
	
	Для Каждого ДанныеКонтрагента Из НедействительныеСвязиКонтрагенты Цикл
		
		РегистрыСведений.СвязиКонтрагентКонтакт.УстановитьНедействительной(ДанныеКонтрагента.Контрагент, ТекущийОбъект.Ссылка);

		Если НЕ ДанныеКонтрагента.ЭтоОсновноеКЛ И НЕ ДанныеКонтрагента.ЭтоПодписант Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			Контрагент = ДанныеКонтрагента.Контрагент.ПолучитьОбъект();
			
			Если Контрагент.КонтактноеЛицо = ТекущийОбъект.Ссылка Тогда
				Контрагент.КонтактноеЛицо = Неопределено;
			КонецЕсли;
			
			Если Контрагент.КонтактноеЛицоПодписант = ТекущийОбъект.Ссылка Тогда
				Контрагент.КонтактноеЛицоПодписант = Неопределено;
			КонецЕсли;
			
			Контрагент.Записать();
			
			ЗафиксироватьТранзакцию();
		
		Исключение
		
			ОтменитьТранзакцию();
		
		КонецПопытки;
		
	КонецЦикла;
	
	НедействительныеСвязиКонтрагенты.Очистить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьВсегдаВыводимыеВидыКИ(КИ, СвойстваВидовКонтактнойИнформацииКонтактныхЛиц)
	
	НайденныеСтроки = СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.НайтиСтроки(Новый Структура("ВыводитьВФормеВсегда", Истина));
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		НоваяСтрокаКИ = КИ.Добавить();
		НоваяСтрокаКИ.Вид = НайденнаяСтрока.Вид;
		НоваяСтрокаКИ.Тип = НайденнаяСтрока.Тип;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСвойстваВидовКонтактнойИнформацииКонтактныхЛиц()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПорядокТиповКИ.Тип,
	|	ПорядокТиповКИ.Порядок
	|ПОМЕСТИТЬ втПорядокТипов
	|ИЗ
	|	&ПорядокТиповКИ КАК ПорядокТиповКИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Вид,
	|	ПРЕДСТАВЛЕНИЕ(ВидыКонтактнойИнформации.Ссылка) КАК ПредставлениеВида,
	|	ВидыКонтактнойИнформации.Тип КАК Тип,
	|	ЕСТЬNULL(НастройкиВидовКонтактнойИнформации.ВыводитьВФормеВсегда, ЛОЖЬ) КАК ВыводитьВФормеВсегда,
	|	ВидыКонтактнойИнформации.РазрешитьВводНесколькихЗначений КАК РазрешитьВводНесколькихЗначений,
	|	ВидыКонтактнойИнформации.ОбязательноеЗаполнение,
	|	ВидыКонтактнойИнформации.ПроверятьКорректность,
	|	ВидыКонтактнойИнформации.РедактированиеТолькоВДиалоге
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокТипов КАК втПорядокТипов
	|		ПО ВидыКонтактнойИнформации.Тип = втПорядокТипов.Тип
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВидовКонтактнойИнформации КАК НастройкиВидовКонтактнойИнформации
	|		ПО ВидыКонтактнойИнформации.Ссылка = НастройкиВидовКонтактнойИнформации.Вид
	|ГДЕ
	|	ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ
	|	И ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ
	|
	|УПОРЯДОЧИТЬ ПО
	|	втПорядокТипов.Порядок,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания");
	
	Запрос.УстановитьПараметр("ПорядокТиповКИ", КонтактнаяИнформацияУНФ.ПорядокТиповКИ());
	Запрос.УстановитьПараметр("ГруппаВидовКИ", Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛица);
	
	ТаблицаСвойств = Запрос.Выполнить().Выгрузить();
	СвойстваВидовКонтактнойИнформацииКонтактныхЛиц.Загрузить(ТаблицаСвойств);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтактКакСвязаться()
	
	Если КонтактКакСвязаться.ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		ВидКИ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EmailКонтактногоЛица");
	ИначеЕсли КонтактКакСвязаться.ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ВидКИ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица");
	КонецЕсли;
	Если ВидКИ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтактКакСвязаться.Свойство("Контрагент") Тогда
		СвязьСКонтрагентом = ДанныеКонтрагентов[0];
		СвязьСКонтрагентом.Контрагент = КонтактКакСвязаться.Контрагент;
	КонецЕсли;
	
	Объект.Наименование = КонтактКакСвязаться.Контакт;
	
	СтрокаКИ = НайтиИлиДобавитьНовуюСтрокуКИ(КонтактКакСвязаться.ТипКИ);
	СтрокаКИ.Представление = КонтактКакСвязаться.КакСвязаться;
	СтрокаКИ.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(КонтактКакСвязаться.КакСвязаться, ВидКИ);
	СтрокаКИ.Вид = ВидКИ;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭлементВТаблицуНедействительных(Контрагент,НовоеЗначение = Неопределено)
	
	Если ЗначениеЗаполнено(Контрагент.Контрагент) Тогда
		НедействительнаяСвязьСКонтрагентом = НедействительныеСвязиКонтрагенты.Добавить();
		НедействительнаяСвязьСКонтрагентом.Контрагент = Контрагент.Контрагент;
		НедействительнаяСвязьСКонтрагентом.Должность = Контрагент.Должность;
		НедействительнаяСвязьСКонтрагентом.ЭтоОсновноеКЛ = Контрагент.ЭтоОсновноеКЛ;
		НедействительнаяСвязьСКонтрагентом.ЭтоПодписант = Контрагент.ЭтоПодписант;
	КонецЕсли;
	
	Контрагент.Контрагент = НовоеЗначение;
	Контрагент.Должность = Неопределено;
	Контрагент.ЭтоОсновноеКЛ = Ложь;
	Контрагент.ЭтоПодписант = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область Роли

&НаСервере
Процедура ПрочитатьДанныеРолей()
	
	ДанныеРолей.Очистить();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактныеЛицаРоли.Роль КАК Роль,
		|	КонтактныеЛицаРоли.Роль.ПометкаУдаления КАК ПометкаУдаления,
		|	КонтактныеЛицаРоли.Роль.Наименование КАК Наименование
		|ИЗ
		|	Справочник.КонтактныеЛица.Роли КАК КонтактныеЛицаРоли
		|ГДЕ
		|	КонтактныеЛицаРоли.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НовыеДанныеРоли = ДанныеРолей.Добавить();
		НавигационнаяСсылкаФС = "Роль_" + НовыеДанныеРоли.ПолучитьИдентификатор();
		
		НовыеДанныеРоли.Роль = Выборка.Роль;
		НовыеДанныеРоли.ПометкаУдаления = Выборка.ПометкаУдаления;
		НовыеДанныеРоли.ПредставлениеРоли = ФорматированнаяСтрокаПредставленияРоли(Выборка.Наименование, Выборка.ПометкаУдаления, НавигационнаяСсылкаФС);
		НовыеДанныеРоли.ДлинаРоли = СтрДлина(Выборка.Наименование);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыРолей()
	
	ФС = ДанныеРолей.Выгрузить(, "ПредставлениеРоли").ВыгрузитьКолонку("ПредставлениеРоли");
	
	Индекс = ФС.Количество()-1;
	Пока Индекс > 0 Цикл
		ФС.Вставить(Индекс, "  ");
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Элементы.ОблакоРолей.Заголовок	= Новый ФорматированнаяСтрока(ФС);
	Элементы.РолиИОтступ.Видимость	= ФС.Количество() > 0;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеРолей(ТекущийОбъект)
	
	ТекущийОбъект.Роли.Загрузить(ДанныеРолей.Выгрузить(,"Роль"));
	
КонецПроцедуры

&НаСервере
Процедура ПрикрепитьРольНаСервере(Роль)
	
	Если ДанныеРолей.НайтиСтроки(Новый Структура("Роль", Роль)).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРоли = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Роль, "Наименование, ПометкаУдаления");
	
	СтрокаРолей = ДанныеРолей.Добавить();
	НавигационнаяСсылкаФС = "Роль_" + СтрокаРолей.ПолучитьИдентификатор();
	
	СтрокаРолей.Роль = Роль;
	СтрокаРолей.ПометкаУдаления = ДанныеРоли.ПометкаУдаления;
	СтрокаРолей.ПредставлениеРоли = ФорматированнаяСтрокаПредставленияРоли(ДанныеРоли.Наименование, ДанныеРоли.ПометкаУдаления, НавигационнаяСсылкаФС);
	СтрокаРолей.ДлинаРоли = СтрДлина(ДанныеРоли.Наименование);
	
	ОбновитьЭлементыРолей();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьИПрикрепитьРольНаСервере(знач ЗаголовокРоли)
	
	Роль = НайтиСоздатьРоль(ЗаголовокРоли);
	ПрикрепитьРольНаСервере(Роль);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиСоздатьРоль(Знач ЗаголовокРоли)
	
	Роль = Справочники.РолиКонтактныхЛиц.НайтиПоНаименованию(ЗаголовокРоли, Истина);
	
	Если Роль.Пустая() Тогда
		
		РольОбъект = Справочники.РолиКонтактныхЛиц.СоздатьЭлемент();
		РольОбъект.Наименование = ЗаголовокРоли;
		РольОбъект.Записать();
		Роль = РольОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат Роль;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФорматированнаяСтрокаПредставленияРоли(НаименованиеРоли, ПометкаУдаления, НавигационнаяСсылкаФС)
	
	#Если Клиент Тогда
	Цвет = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ТекстВторостепеннойНадписи");
	БазовыйШрифт = ОбщегоНазначенияКлиентПовтИсп.ШрифтСтиля("ОбычныйШрифтТекста");
	#Иначе
	Цвет = ЦветаСтиля.ТекстВторостепеннойНадписи;
	БазовыйШрифт = ШрифтыСтиля.ОбычныйШрифтТекста;
	#КонецЕсли
	
	Шрифт = Новый Шрифт(БазовыйШрифт,,,Истина,,?(ПометкаУдаления, Истина, Неопределено));
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НаименованиеРоли + Символы.НПП, Шрифт, Цвет));
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.Очистить, , , , НавигационнаяСсылкаФС));
	
	Возврат Новый ФорматированнаяСтрока(КомпонентыФС);
	
КонецФункции

&НаКлиенте
Процедура ПолеВводаРолиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.РолиКонтактныхЛиц") Тогда
		ПрикрепитьРольНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	Элемент.ОбновитьТекстРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаРолиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		СоздатьИПрикрепитьРольНаСервере(Текст);
		ТекущийЭлемент = Элементы.ПолеВводаРоли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Теги

&НаКлиенте
Процедура ПолеВводаТегаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПолеВводаТегаОбработкаВыбораСервер(Элемент.Имя, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаТегаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПолеВводаТегаОкончаниеВводаТекстаСервер(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПолеВводаТегаОбработкаВыбораСервер(ИмяЭлемента, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Теги.ПолеВводаТегаОбработкаВыбора(ЭтотОбъект, ИмяЭлемента, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПолеВводаТегаОкончаниеВводаТекстаСервер(Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Теги.ПолеВводаТегаОкончаниеВводаТекста(ЭтотОбъект, Текст, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОблакоТеговОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОблакоТеговОбработкаНавигационнойСсылкиСервер(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ОблакоТеговОбработкаНавигационнойСсылкиСервер(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
	Теги.ОблакоТеговОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформацияУНФ

&НаСервере
Функция НайтиИлиДобавитьНовуюСтрокуКИ(ТипКонтактнойИнформации)
	
	НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформация.НайтиСтроки(
	Новый Структура("Тип,Значение", ТипКонтактнойИнформации, ""));
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если Не ЗначениеЗаполнено(НайденнаяСтрока.Представление) Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	// Добавляем новую строку КИ с группировкой по типу КИ
	КоличествоЭлементовКоллекции = ЭтотОбъект.КонтактнаяИнформация.Количество();
	ИндексВставки = КоличествоЭлементовКоллекции;
	
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		ТекущийИндекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		Если ЭтотОбъект.КонтактнаяИнформация[ТекущийИндекс].Тип = ТипКонтактнойИнформации Тогда
			ИндексВставки = ТекущийИндекс + 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат = ЭтотОбъект.КонтактнаяИнформация.Вставить(ИндексВставки);
	Результат.Тип = ТипКонтактнойИнформации;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция АдресЭП()
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформация.НайтиСтроки(ПараметрыОтбора);
	
	Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат НайденныеСтроки[0].Значение;
	
КонецФункции

&НаСервере
Процедура ДобавитьКонтактнуюИнформациюСервер(ДобавляемыйВид, УстановитьВыводВФормеВсегда = Ложь) Экспорт
	
	КонтактнаяИнформацияУНФ.ДобавитьКонтактнуюИнформацию(ЭтотОбъект, ДобавляемыйВид, УстановитьВыводВФормеВсегда);
	ПрочитатьСвойстваВидовКонтактнойИнформацииКонтактныхЛиц();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДействиеКИНажатие(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.ДействиеКИНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИПриИзменении(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИОчистка(Элемент, СтандартнаяОбработка)
	
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийКИПриИзменении(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.КомментарийКИПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияУНФВыполнитьКоманду(Команда)
	
	КонтактнаяИнформацияУНФКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	КонтактнаяИнформацияУНФКлиент.АвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	КонтактнаяИнформацияУНФКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область Google

&НаСервере
Процедура ЗаполнитьКонтактнуюИнформацию(Знач КлассификаторСсылка)
	
	ДанныеКонтакта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	КлассификаторСсылка,
	"Title, JSON");
	
	Объект.Наименование = ДанныеКонтакта.Title;
	
	ЭтотОбъект.КонтактнаяИнформация.Очистить();
	
	ЗаполнитьВсегдаВыводимыеВидыКИ(
			ЭтотОбъект.КонтактнаяИнформация,
			СвойстваВидовКонтактнойИнформацииКонтактныхЛиц);
			
	Справочники.КлассификаторКонтактов.ЗаполнитьКонтактнуюИнформациюИзJSON(
	ЭтотОбъект.КонтактнаяИнформация,
	ДанныеКонтакта.JSON,
	Тип("СправочникСсылка.КонтактныеЛица"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторПолаКонтактногоЛица(Пол)
	
	ИдентификаторыПола = Новый Соответствие;
	ИдентификаторыПола.Вставить(ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской"), 1);
	ИдентификаторыПола.Вставить(ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский"), 2);
	ИдентификаторыПола.Вставить(ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.ПустаяСсылка"), Неопределено);
	
	Возврат ИдентификаторыПола.Получить(Пол);
	
КонецФункции

&НаКлиенте 
Процедура Подключаемый_ПросклонятьПредставлениеПоВсемПадежам() Экспорт
	СклонениеПредставленийОбъектовКлиент.ПросклонятьПредставлениеПоВсемПадежам(ЭтотОбъект, Объект.Наименование, Истина, ИдентификаторПолаКонтактногоЛица(Объект.Пол));
КонецПроцедуры

&НаКлиенте
Процедура Склонения(Команда)
	СклонениеПредставленийОбъектовКлиент.ОбработатьКомандуСклонения(ЭтотОбъект, Объект.Наименование, Истина, ИдентификаторПолаКонтактногоЛица(Объект.Пол));
КонецПроцедуры

// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов

#КонецОбласти
