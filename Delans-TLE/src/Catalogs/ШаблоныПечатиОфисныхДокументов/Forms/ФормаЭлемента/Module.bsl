
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Доступно = ?(Объект.ТолькоДляАвтора, 0, 1);
	
	УправлениеФормой();
	ЗаполнитьРеквизиты();
	УстановитьДоступностьКнопок();
	
	ЭтоНовый = НЕ ЗначениеЗаполнено(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Объект.ТолькоДляАвтора = ?(Доступно = 1, Ложь, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ДобавитьИзмененныеФорматыВОбъект(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСФайлами.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, Параметры);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ЭтоНовый Тогда
		Оповестить("Запись_ШаблоныПечатиОфисныхДокументов", Новый Структура("ЭтоНовый,Назначение", Истина, Объект.Назначение));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		
		Если Параметр.Свойство("ЭтоНовый") И Параметр.ЭтоНовый
			И Параметр.Свойство("ВладелецФайла") И Параметр.ВладелецФайла = Объект.Ссылка Тогда
			
			Если ТипЗнч(Источник) = Тип("СправочникСсылка.ШаблоныПечатиОфисныхДокументовПрисоединенныеФайлы") Тогда
				ФайлПодходящегоФормата = ФайлПодходящегоФормата(Источник);
				ФайлШаблон = Источник;
			ИначеЕсли ТипЗнч(Источник) = Тип("Массив") И Источник.Количество() <> 0 Тогда
				ФайлПодходящегоФормата = ФайлПодходящегоФормата(Источник[0]);
				ФайлШаблон = Источник[0];
			КонецЕсли;
			
			Если ФайлПодходящегоФормата Тогда
				Объект.ФайлШаблон = ФайлШаблон;
				Модифицированность = Истина;
				УправлениеФормой();
				ЗаполнитьРеквизиты();
			КонецЕсли;
			
		КонецЕсли;
		
		Если (ТипЗнч(Источник) = Тип("Массив") И Источник.Найти(Объект.ФайлШаблон) <> Неопределено
			ИЛИ Источник = Объект.ФайлШаблон) Тогда
			УстановитьДоступностьКнопок();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПоказатьПодтверждениеЗакрытияФормыСФайлами(ЭтотОбъект, Отказ, ЗавершениеРаботы, Объект.Ссылка);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НазначениеПриИзменении(Элемент)
	
	ЗаполнитьРеквизиты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыборФайлаНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр(
			"ru = 'Данные еще не записаны.
			|Добавление файла возможно только после записи данных.
			|Данные будут записаны.'"
		);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ДобавитьФайлы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыборФайлаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыборФайлаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщить("объект не записан");
		Возврат;
	КонецЕсли;
	
	МассивИменФайлов = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл")
		И ПараметрыПеретаскивания.Значение.ЭтоФайл()
		И ФайлПодходящегоФормата(ПараметрыПеретаскивания.Значение) Тогда
		
		МассивИменФайлов.Добавить(ПараметрыПеретаскивания.Значение.ПолноеИмя);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() = 1
			И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл")
			И ПараметрыПеретаскивания.Значение[0].ЭтоФайл()
			И ФайлПодходящегоФормата(ПараметрыПеретаскивания.Значение[0]) Тогда
			
			МассивИменФайлов.Добавить(ПараметрыПеретаскивания.Значение[0].ПолноеИмя);
		КонецЕсли;
			
	КонецЕсли;
	
	Если МассивИменФайлов.Количество() > 0 Тогда
		РаботаСФайламиСлужебныйКлиент.ДобавитьФайлыПеретаскиванием(Объект.Ссылка, УникальныйИдентификатор, МассивИменФайлов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлШаблонПриИзменении(Элемент)
	УправлениеФормой();
	ЗаполнитьРеквизиты();
КонецПроцедуры

&НаКлиенте
Процедура ФайлШаблонОткрытие(Элемент, СтандартнаяОбработка)
	РаботаСФайламиКлиент.ОткрытьФормуФайла(Объект.ФайлШаблон, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ФайлШаблонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить("docx");
	ЗначенияДляОтбора.Добавить("odt");
	ЗначениеОтбора = Новый Структура("Расширение", Новый ФиксированныйМассив(ЗначенияДляОтбора));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ВладелецФайла", Объект.Ссылка);
	ПараметрыФормы.Вставить("Отбор", ЗначениеОтбора);
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьФайл(Команда)
	
	ДанныеФайла = ДанныеФайла(Объект.ФайлШаблон, УникальныйИдентификатор);
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, ФайлРедактируетсяТекущимПользователем());
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФайл(Команда)
	
	ДанныеФайла = ДанныеФайла(Объект.ФайлШаблон, УникальныйИдентификатор);
	РаботаСФайламиСлужебныйКлиент.РедактироватьФайл(Неопределено, ДанныеФайла, УникальныйИдентификатор);
	УстановитьДоступностьКнопок(ДанныеФайла.Редактирует);
	
	ОповеститьОбИзменении(Объект.ФайлШаблон);
	Оповестить("Запись_Файл", Новый Структура, Объект.ФайлШаблон);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактированиеФайла(Команда)
	
	Если НЕ ФайлРедактируетсяТекущимПользователем() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ДанныеФайла(Объект.ФайлШаблон, УникальныйИдентификатор);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьРедактированиеВыполненоПомещение", ЭтотОбъект);
	
	ПараметрыОбновленияФайла = РаботаСФайламиСлужебныйКлиент.ПараметрыОбновленияФайла(ОписаниеОповещения, ДанныеФайла.Ссылка, УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = ДанныеФайла.ХранитьВерсии;
	ПараметрыОбновленияФайла.ФайлРедактируетТекущийПользователь = ДанныеФайла.ФайлРедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ДанныеФайла.Редактирует;
	РаботаСФайламиСлужебныйКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеВыполненоПомещение(ИнформацияОФайле, ДополнительныеПараметры) Экспорт
	
	ОповеститьОбИзменении(Объект.ФайлШаблон);
	Оповестить("Запись_Файл", Новый Структура, Объект.ФайлШаблон);
	
	УстановитьДоступностьКнопок();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступВсемПользователямПриИзменении(Элемент)
	Доступно = 1;
КонецПроцедуры

&НаКлиенте
Процедура ДоступТолькоАвторуПриИзменении(Элемент)
	Доступно = 0;
КонецПроцедуры

&НаКлиенте
Процедура АвторПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.Автор) Тогда
		Объект.Автор = ПользователиКлиент.АвторизованныйПользователь();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПриАктивизацииСтроки(Элемент)
	
	Элементы.РеквизитыФормат.СписокВыбора.Очистить();
	
	ДанныеСтроки = Элементы.Реквизиты.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеСтроки.ДопустимыеФорматы, Элементы.РеквизитыФормат.СписокВыбора);
	
	Элементы.РеквизитыФормат.КнопкаВыпадающегоСписка = ДанныеСтроки.ДопустимыеФорматы.Количество() <> 0;
	Элементы.РеквизитыФормат.КнопкаВыбора = ДанныеСтроки.ОписаниеТипов.Типы().Количество() <> 0;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Реквизиты.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеСтроки.ЕстьВозможностьВыбораФормата Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.ДопустимыеФорматы.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КлючПараметра", ДанныеСтроки.Имя);
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("СтарыйФормат", ДанныеСтроки.Формат);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьНовыйФорматПараметра", ЭтотОбъект, ДополнительныеПараметры);
	
	Конструктор = Новый КонструкторФорматнойСтроки(ДанныеСтроки.Формат);
	Конструктор.ДоступныеТипы = ДанныеСтроки.ОписаниеТипов;
	Конструктор.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваПараметровШаблонаФорматНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.Реквизиты.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.ОписаниеТипов.Типы().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КлючПараметра", ДанныеСтроки.Имя);
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", Элементы.Реквизиты.ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("СтарыйФормат", ДанныеСтроки.Формат);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьНовыйФорматПараметра", ЭтотОбъект, ДополнительныеПараметры);
	
	Конструктор = Новый КонструкторФорматнойСтроки(ДанныеСтроки.Формат);
	Конструктор.ДоступныеТипы = ДанныеСтроки.ОписаниеТипов;
	Конструктор.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыФорматОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.Реквизиты.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КлючПараметра", ДанныеСтроки.Имя);
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", Элементы.Реквизиты.ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("СтарыйФормат", ДанныеСтроки.Формат);
	
	ВыбратьНовыйФорматПараметра(ВыбранноеЗначение, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНовыйФорматПараметра(НовыйФормат, ДополнительныеПараметры) Экспорт
	
	Если НовыйФормат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Реквизиты.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФорматИзменен = ДополнительныеПараметры.СтарыйФормат <> НовыйФормат;
	
	Если НЕ ФорматИзменен Тогда
		Возврат;
	КонецЕсли;
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	Модифицированность = ФорматИзменен;
	
	ДанныеСтроки.ФорматИзменен = ФорматИзменен;
	ДанныеСтроки.Формат = НовыйФормат;
	
	НоваяСтрока = ИзмененныеФорматы.Добавить();
	НоваяСтрока.Ключ = ДанныеСтроки.Имя;
	НоваяСтрока.Формат = НовыйФормат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомандФормы

&НаКлиенте
Процедура ДобавитьПараметрыВФайл(Команда)
	
	ОчиститьСообщения();
	Результат = ДобавитьПараметрыВФайлСервер();
	
	Если Результат = Истина Тогда
		ПоказатьОповещениеПользователя(,, НСтр("ru='Выбранные параметры успешно добавлены в файл!'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеФормой()
	
	Элементы.ДекорацияВыборФайла.Видимость = НЕ ЗначениеЗаполнено(Объект.ФайлШаблон);
	Элементы.ГруппаФайлШаблон.Видимость = ЗначениеЗаполнено(Объект.ФайлШаблон);
	
	РасширениеВыбранногоФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ФайлШаблон, "Расширение");
	
	Элементы.ДекорацияФайлODT.Видимость = РасширениеВыбранногоФайла = "odt";
	Элементы.ДекорацияФайлDOCX.Видимость = РасширениеВыбранногоФайла = "docx";
	
	Элементы.НеВыделятьПоляДокументаЦветом.Видимость = РасширениеВыбранногоФайла = "docx";
	
	Элементы.РеквизитыДобавитьПараметрыВФайл.Доступность = ЗначениеЗаполнено(Объект.ФайлШаблон);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизиты()
	
	ДеревоРеквизитов = ДанныеФормыВЗначение(Реквизиты, Тип("ДеревоЗначений"));
	ДеревоРеквизитов.Строки.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.Назначение) Тогда
		ЗначениеВДанныеФормы(ДеревоРеквизитов, Реквизиты);
		Возврат;
	КонецЕсли;
	
	ОписаниеПараметров = ШаблоныПечатиОфисныхДокументов.ОписаниеПараметровШаблонаПоНазначению(Объект.Назначение, Объект.Ссылка);
	СобратьДеревоИзПараметровРекурсивно(ДеревоРеквизитов.Строки, ОписаниеПараметров);
	ЗначениеВДанныеФормы(ДеревоРеквизитов, Реквизиты);
	
	ОписаниеПараметровСсылка = ПоместитьВоВременноеХранилище(ОписаниеПараметров, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура СобратьДеревоИзПараметровРекурсивно(СтрокиДерева, ОписаниеПараметров)
	
	Для каждого ОписаниеПараметра Из ОписаниеПараметров Цикл
		
		Если ОписаниеПараметра.Элементы <> Неопределено Тогда
			
			НоваяСтрока = СтрокиДерева.Добавить();
			НоваяСтрока.Представление = ОписаниеПараметра.Представление;
			СобратьДеревоИзПараметровРекурсивно(НоваяСтрока.Строки, ОписаниеПараметра.Элементы);
			
		Иначе
			
			Если ОписаниеПараметра.Вид = ШаблоныПечатиОфисныхДокументов.ВидПараметраИзображение() И НЕ ДобавлятьИзображения() Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = СтрокиДерева.Добавить();
			НоваяСтрока.ЭтоПараметр   = Истина;
			НоваяСтрока.ЭтоПараметрТЧ = ОписаниеПараметра.ТаблицаВладелец <> Неопределено;
			НоваяСтрока.Имя           = ОписаниеПараметра.Ключ;
			НоваяСтрока.Представление = ОписаниеПараметра.Представление;
			НоваяСтрока.Формат        = ОписаниеПараметра.Формат;
			НоваяСтрока.Вид           = ОписаниеПараметра.Вид;
			НоваяСтрока.ОписаниеТипов = ОписаниеПараметра.ОписаниеТипов;
			
			Если ОписаниеПараметра.ДопустимыеФорматы <> Неопределено Тогда
				НоваяСтрока.ДопустимыеФорматы = ОписаниеПараметра.ДопустимыеФорматы;
			КонецЕсли;
			
			НоваяСтрока.ЕстьВозможностьВыбораФормата = НоваяСтрока.ДопустимыеФорматы.Количество() <> 0 ИЛИ НоваяСтрока.ОписаниеТипов.Типы().Количество() <> 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеРеквизита(Ссылка, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

&НаКлиенте
Функция ФайлПодходящегоФормата(Файл)
	
	РасширениеФайла = "";
	
	Если ТипЗнч(Файл) = Тип("СправочникСсылка.ШаблоныПечатиОфисныхДокументовПрисоединенныеФайлы") Тогда
		РасширениеФайла = РасширениеПрисоединенногоФайла(Файл);
	ИначеЕсли ТипЗНЧ(Файл) = Тип("Файл") Тогда
		РасширениеФайла = Файл.Расширение;
	КонецЕсли;
	
	Если СтрНачинаетсяС(РасширениеФайла, ".") Тогда
		РасширениеФайла =  ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(РасширениеФайла);
	КонецЕсли;
	
	Возврат (РасширениеФайла = "docx" ИЛИ РасширениеФайла = "odt");
	
КонецФункции

&НаСервере
Процедура НайтиДобавляемыеПараметры(ДобавляемыеПараметрыДокумента, ДобавляемыеПараметрыТаблицыДокумента, ДобавляемыеКартинкиДокумента, СписокПараметров = Неопределено)
	
	Если СписокПараметров = Неопределено Тогда
		СписокПараметров = Реквизиты.ПолучитьЭлементы();
	КонецЕсли;
	
	Для каждого Параметр Из СписокПараметров Цикл
		
		Если Параметр.Добавить И Параметр.ЭтоПараметр Тогда
			
			Если Параметр.ЭтоПараметрТЧ Тогда
				ДобавляемыеПараметрыТаблицыДокумента.Добавить(Параметр.Имя, Параметр.Представление);
			ИНаче
				ДобавляемыеПараметрыДокумента.Добавить(Параметр.Имя, Параметр.Представление);
			КонецЕсли;
			
			Если Параметр.Вид = ШаблоныПечатиОфисныхДокументов.ВидПараметраИзображение() Тогда
				ДобавляемыеКартинкиДокумента.Добавить(Параметр.Имя, Параметр.Представление);
			КонецЕсли;
			
		КонецЕсли;
		
		НайтиДобавляемыеПараметры(ДобавляемыеПараметрыДокумента, ДобавляемыеПараметрыТаблицыДокумента, ДобавляемыеКартинкиДокумента, Параметр.ПолучитьЭлементы());
		
		Параметр.Добавить = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьПараметрыВФайлСервер()
	
	ДанныеФайла = ДанныеФайла(Объект.ФайлШаблон, УникальныйИдентификатор, Ложь);
	
	Если ДанныеФайла.ФайлРедактируетТекущийПользователь Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Для добавления параметров необходимо завершить редактирование этого файла.'"));
		Возврат Ложь;
	ИначеЕсли ЗначениеЗаполнено(ДанныеФайла.Редактирует) Тогда
		ДатаЗаема = ?(ЗначениеЗаполнено(ДанныеФайла.ДатаЗаема), 
			" " + НСтр("ru='с'") + " " + Формат(ДанныеФайла.ДатаЗаема, "ДЛФ=ДВ"), "");
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Файл ""%1""
					|уже занят для редактирования пользователем
					|""%2""%3.'"),
				Строка(ДанныеФайла.Ссылка), Строка(ДанныеФайла.Редактирует), ДатаЗаема));
		Возврат Ложь;
	КонецЕсли;
	
	СписокДобавляемыхПараметровДокумента = Новый СписокЗначений;
	СписокДобавляемыхПараметровТаблицыДокумента = Новый СписокЗначений;
	СписокДобавляемыхКартинокДокумента = Новый СписокЗначений;
	НайтиДобавляемыеПараметры(СписокДобавляемыхПараметровДокумента, СписокДобавляемыхПараметровТаблицыДокумента, СписокДобавляемыхКартинокДокумента);
	
	Если СписокДобавляемыхПараметровДокумента.Количество() = 0
		И СписокДобавляемыхПараметровТаблицыДокумента.Количество() = 0
		И СписокДобавляемыхКартинокДокумента.Количество() = 0 Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Не выбрано ни одного параметра для добавления.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Расширение = РасширениеПрисоединенногоФайла(Объект.ФайлШаблон);
	
	Если Расширение = "docx" Тогда
		ДобавитьВыбранныеПараметрыВШаблонDOCX(СписокДобавляемыхПараметровДокумента, СписокДобавляемыхПараметровТаблицыДокумента, СписокДобавляемыхКартинокДокумента);
	ИначеЕсли Расширение = "odt" Тогда
		ДобавитьВыбранныеПараметрыВШаблонODT(СписокДобавляемыхПараметровДокумента, СписокДобавляемыхПараметровТаблицыДокумента);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьКнопок(РедактируетФайл = Неопределено)
	
	Если РедактируетФайл = Неопределено Тогда
		РедактируетФайл = ЗначениеРеквизита(Объект.ФайлШаблон, "Редактирует");
	КонецЕсли;
	
	Элементы.РедактироватьФайл.Доступность = НЕ (ЗначениеЗаполнено(РедактируетФайл) И РедактируетФайл <> ТекущийПользователь);
	Элементы.ЗавершитьРедактированиеФайла.Доступность = ЗначениеЗаполнено(РедактируетФайл) И РедактируетФайл = ТекущийПользователь;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИзмененныеФорматыВОбъект(ТекущийОбъект)
	
	Для каждого ИзмененныйФормат Из ИзмененныеФорматы Цикл
		
		Строка = ТекущийОбъект.СвойстваПараметровШаблона.Найти(ИзмененныйФормат.Ключ, "Параметр");
		
		Если Строка = Неопределено Тогда
			Строка = ТекущийОбъект.СвойстваПараметровШаблона.Добавить();
			Строка.Параметр = ИзмененныйФормат.Ключ;
		КонецЕсли;
		
		Строка.Формат = ИзмененныйФормат.Формат;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДобавлятьИзображения()
	
	Возврат РасширениеВыбранногоФайла = "docx";
	
КонецФункции

#КонецОбласти

#Область РаботаСФайлами

&НаСервере
Функция ФайлРедактируетсяТекущимПользователем()
	
	РедактируетФайл = ЗначениеРеквизита(Объект.ФайлШаблон, "Редактирует");
	Возврат ЗначениеЗаполнено(РедактируетФайл) И РедактируетФайл = ТекущийПользователь;
	
КонецФункции

&НаКлиенте
Процедура ВыборФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьФайлы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлы()
	
	Фильтр = НСтр("ru='Офисные документы (*.docx;*.odt)|*.docx;*.odt|Microsoft Word 2007(*.docx)|*.docx|Текстовый документ ODF(*.odt)|*.odt'");
	РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, УникальныйИдентификатор, Фильтр);
	
КонецПроцедуры

&НаСервере
Функция РасширениеПрисоединенногоФайла(ПрисоединенныйФайл)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "Расширение");
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеФайла(ПрисоединыенныйФайл, УникальныйИдентификатор, ПолучатьСсылкуНаДвоичныеДанные = Истина)
	
	ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ДополнительныеПараметры.ИдентификаторФормы = УникальныйИдентификатор;
	ДополнительныеПараметры.ПолучатьСсылкуНаДвоичныеДанные = ПолучатьСсылкуНаДвоичныеДанные;
	
	Возврат РаботаСФайлами.ДанныеФайла(ПрисоединыенныйФайл, ДополнительныеПараметры);
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеФайлаDOCX

&НаСервере
Процедура ДобавитьВыбранныеПараметрыВШаблонDOCX(СписокДобавляемыхПараметровДокумента, СписокДобавляемыхПараметровТаблицыДокумента, СписокДобавляемыхКартинокДокумента)
	
	ОписаниеПараметров = ПолучитьИзВременногоХранилища(ОписаниеПараметровСсылка);
	
	СтруктураДокумента = ШаблоныПечатиОфисныхДокументов.СтруктураДокумента(Объект.ФайлШаблон, УникальныйИдентификатор);
	
	Для каждого Параметр Из СписокДобавляемыхКартинокДокумента Цикл
		ПараметрыКартинки = ШаблоныПечатиОфисныхДокументов.ДобавитьКартинкуВСтруктуруДокумента(
			СтруктураДокумента, Справочники.ШаблоныПечатиОфисныхДокументов.ПолучитьМакет("ФоновоеИзображениеЭлементаКартинкаДокумента_png"), "png");
		
		ОписаниеПараметра = ШаблоныПечатиОфисныхДокументов.ОписаниеПараметра(ОписаниеПараметров, Параметр.Значение);
		ОписаниеПараметра.Вставить("ПараметрыКартинки", ПараметрыКартинки);
	КонецЦикла;
	
	ТаблицыСодержащиеДанныеТЧ = Новый Соответствие;
	Если СписокДобавляемыхПараметровТаблицыДокумента.Количество() > 0 Тогда
		ТаблицыСодержащиеДанныеТЧ = ШаблоныПечатиОфисныхДокументов.ТабличныеЧастиДокумента(СтруктураДокумента, ОписаниеПараметров);
	КонецЕсли;
	
	ТаблицаСодержитДанныеТЧ = ТаблицыСодержащиеДанныеТЧ.Количество() <> 0;
	
	ЧтениеXML = ШаблоныПечатиОфисныхДокументов.НовыйЧтениеXML(СтруктураДокумента.ПутьКФайлу);
	ЗаписьXML = ШаблоныПечатиОфисныхДокументов.НовыйЗаписьXML(СтруктураДокумента.ПутьКФайлуЗамены);
	
	ПараметрыЧтенияXML = Неопределено;
	ШаблоныПечатиОфисныхДокументов.ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
	
	rsidR = "";
	
	// Добавление параметров в текст документа.
	// - параметры документа добавляются в начало;
	// - параметры таблицы добавляются:
	//    - либо в конец найденной таблицы (если найдена);
	//    - либо создается новая таблица в начале документа.
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ШаблоныПечатиОфисныхДокументов.ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
			ШаблоныПечатиОфисныхДокументов.ПродолжитьКопированиеДокументаИсточникаDOCX(ЗаписьXML, ЧтениеXML);
			
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				
				ШаблоныПечатиОфисныхДокументов.ПродолжитьКопированиеДокументаИсточникаDOCX(ЗаписьXML, ЧтениеXML);
				
				Если СписокДобавляемыхПараметровТаблицыДокумента.Количество() > 0 Тогда
					Если ПараметрыЧтенияXML.ЭлементТекущийИмя = "w:tr" И ЧтениеXML.Имя = "w:rsidR" Тогда
						rsidR = ЧтениеXML.Значение;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ЧтениеXML.Имя = "w:body" Тогда
				Продолжить;
			КонецЕсли;
			
			НужноДобавитьПараметрыВНачалоДокумента = СписокДобавляемыхПараметровДокумента.Количество() > 0;
			
			Если НужноДобавитьПараметрыВНачалоДокумента Тогда
				ТекстДобавления = КодДобавляемыхПараметровДокументаDOCX(СписокДобавляемыхПараметровДокумента);
				ЗаписьXML.ЗаписатьБезОбработки(ТекстДобавления);
			КонецЕсли;
			
			НужноДобавитьНовуюТаблицуВНачалоДокумента = (СписокДобавляемыхПараметровТаблицыДокумента.Количество() > 0 ИЛИ СписокДобавляемыхКартинокДокумента.Количество() > 0) И НЕ ТаблицаСодержитДанныеТЧ;
			
			Если НужноДобавитьНовуюТаблицуВНачалоДокумента Тогда
				ТекстДобавления = КодДобавляемыхПараметровТаблицыДокументаDOCX(ОписаниеПараметров, СписокДобавляемыхПараметровТаблицыДокумента, rsidR);
				ТекстДобавления = КодДобавляемойТаблицыДокументаDOCX(ТекстДобавления.ЯчейкаЗаголовок, ТекстДобавления.ЯчейкаЗначение);
				ЗаписьXML.ЗаписатьБезОбработки(ТекстДобавления);
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			ШаблоныПечатиОфисныхДокументов.ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
			ШаблоныПечатиОфисныхДокументов.ПродолжитьКопированиеДокументаИсточникаDOCX(ЗаписьXML, ЧтениеXML);
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			ШаблоныПечатиОфисныхДокументов.ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
			
			Если НЕ ТаблицаСодержитДанныеТЧ Тогда
				ШаблоныПечатиОфисныхДокументов.ПродолжитьКопированиеДокументаИсточникаDOCX(ЗаписьXML, ЧтениеXML);
				Продолжить;
			КонецЕсли;
			
			НужноДобавитьНовуюЯчейкуСтрокиТаблицы = ЧтениеXML.Имя = "w:tr" И ТаблицыСодержащиеДанныеТЧ.Получить(ПараметрыЧтенияXML.Таблица.ПорядковыйНомер) <> Неопределено;
			
			Если НужноДобавитьНовуюЯчейкуСтрокиТаблицы Тогда
				ТекстДобавления = КодДобавляемыхПараметровТаблицыДокументаDOCX(ОписаниеПараметров, СписокДобавляемыхПараметровТаблицыДокумента, rsidR);
				
				Если ПараметрыЧтенияXML.Таблица.ТекущаяСтрокаТаблицы = 1 Тогда
					КодЯчейки = ТекстДобавления.ЯчейкаЗаголовок;
				ИначеЕсли ПараметрыЧтенияXML.Таблица.ТекущаяСтрокаТаблицы > 1 Тогда
					КодЯчейки = ТекстДобавления.ЯчейкаЗначение;
				КонецЕсли;
				
				ЗаписьXML.ЗаписатьБезОбработки(КодЯчейки);
			КонецЕсли;
			
			ШаблоныПечатиОфисныхДокументов.ПродолжитьКопированиеДокументаИсточникаDOCX(ЗаписьXML, ЧтениеXML);
			
		КонецЕсли;
	КонецЦикла;
	
	ШаблоныПечатиОфисныхДокументов.ЗаписатьФайлСвязейДокументаDOCX(СтруктураДокумента);
	ШаблоныПечатиОфисныхДокументов.ЗаписатьФайлТипыКонтентаДокументаDOCX(СтруктураДокумента);
	
	ЧтениеXML.Закрыть();
	ЗаписьXML.Закрыть();
	
	ПереместитьФайл(СтруктураДокумента.ПутьКФайлуЗамены, СтруктураДокумента.ПутьКФайлу);
	
	СтруктураДокумента.ВременныеФайлы.Добавить(СтруктураДокумента.ПутьКФайлуЗамены);  // todo
	
	ДанныеФайла = ШаблоныПечатиОфисныхДокументов.ДокументИзСтруктуры(СтруктураДокумента);
	ДанныеФайлаАдрес = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
	
	ИнформацияОФайле = Новый Структура("АдресФайлаВоВременномХранилище,АдресВременногоХранилищаТекста");
	ИнформацияОФайле.АдресФайлаВоВременномХранилище = ДанныеФайлаАдрес;
	ИнформацияОФайле.АдресВременногоХранилищаТекста = "";
	
	РаботаСФайлами.ОбновитьФайл(Объект.ФайлШаблон, ИнформацияОФайле);
	
КонецПроцедуры

&НаСервере
Функция КодДобавляемыхПараметровДокументаDOCX(ДобавляемыеПараметры)
	
	ТекстДобавления = "";
	
	Для каждого Параметр Из ДобавляемыеПараметры Цикл
		ТекстДобавления = ТекстДобавления + КодПараметраДокументаDOCX(Параметр.Значение, Параметр.Представление);
	КонецЦикла;
	
	Возврат ТекстДобавления;
	
КонецФункции

&НаСервере
Функция КодПараметраДокументаDOCX(ИмяПараметра, Представление)
	
	Возврат СтрШаблон(
		"<w:p>
		|	<w:r>
		|		<w:fldChar w:fldCharType=""begin"">
		|			<w:ffData>
		|				<w:name w:val=""""/>
		|				<w:enabled/>
		|				<w:calcOnExit w:val=""0""/>
		|				<w:textInput>
		|					<w:default w:val=""%1""/>
		|				</w:textInput>
		|			</w:ffData>
		|		</w:fldChar>
		|	</w:r>
		|	<w:r>
		|		<w:instrText xml:space=""preserve""> FORMTEXT </w:instrText>
		|	</w:r>
		|	<w:r>
		|		<w:fldChar w:fldCharType=""separate""/>
		|	</w:r>
		|	<w:r>
		|		<w:rPr>
		|			<w:noProof/>
		|		</w:rPr>
		|		<w:t>%2</w:t>
		|	</w:r>
		|	<w:r>
		|		<w:fldChar w:fldCharType=""end""/>
		|	</w:r>
		|</w:p>",
		ИмяПараметра, Представление
	);
	
КонецФункции

&НаСервере
Функция КодДобавляемойТаблицыДокументаDOCX(ЯчейкиЗаголовка, ЯчейкиЗначения)
	
	ТекстДобавления = СтрШаблон(
		"<w:p/>
		|<w:tbl>
		|	<w:tblPr>
		|		<w:tblStyle w:val=""a3""/>
		|		<w:tblW w:w=""2880"" w:type=""dxa""/>
		|		<w:tblLook/>
		|	</w:tblPr>
		|	<w:tr>
		|		%1
		|	</w:tr>
		|	<w:tr>
		|		%2
		|	</w:tr>
		|</w:tbl>
		|<w:p/>",
		ЯчейкиЗаголовка, ЯчейкиЗначения
	);
	
	Возврат ТекстДобавления;
	
КонецФункции

&НаСервере
Функция КодДобавляемыхПараметровТаблицыДокументаDOCX(ОписаниеПараметров, ДобавляемыеПараметры, rsidR)
	
	ТекстыДобавления = Новый Структура("ЯчейкаЗаголовок,ЯчейкаЗначение", "", "");
	
	Для каждого Параметр Из ДобавляемыеПараметры Цикл
		ОписаниеПараметра = ШаблоныПечатиОфисныхДокументов.ОписаниеПараметра(ОписаниеПараметров, Параметр.Значение);
		НовыйТекст = КодПараметраТаблицыДокументаDOCX(ОписаниеПараметра, rsidR);
		
		ТекстыДобавления.ЯчейкаЗаголовок = ТекстыДобавления.ЯчейкаЗаголовок + НовыйТекст.ЯчейкаЗаголовок;
		ТекстыДобавления.ЯчейкаЗначение  = ТекстыДобавления.ЯчейкаЗначение + НовыйТекст.ЯчейкаЗначение;
	КонецЦикла;
	
	Возврат ТекстыДобавления;
	
КонецФункции

&НаСервере
Функция КодПараметраТаблицыДокументаDOCX(ОписаниеПараметра, rsidR)
	
	ТекстДобавления = Новый Структура("ЯчейкаЗаголовок,ЯчейкаЗначение", "", "");
	
	КлючПараметра = ОписаниеПараметра.Ключ;
	ПредставлениеПараметра = ОписаниеПараметра.Представление;
	
	ШаблоныПечатиОфисныхДокументов.ЗаменитьСлужебныеСимволы1С(КлючПараметра);
	ШаблоныПечатиОфисныхДокументов.ЗаменитьСлужебныеСимволы1С(ПредставлениеПараметра);
	
	ТекстДобавления.ЯчейкаЗаголовок = СтрШаблон(
		"<w:tc>
		|	<w:tcPr>
		|		<w:tcW w:w="""" w:type=""dxa""/>
		|	</w:tcPr>
		|	<w:p w:rsidR=""%2"" w:rsidRDefault=""%2"">
		|		<w:r>
		|			<w:t>%1</w:t>
		|		</w:r>
		|	</w:p>
		|</w:tc>",
		ПредставлениеПараметра, rsidR
	);
	
	Если ОписаниеПараметра.Вид = ШаблоныПечатиОфисныхДокументов.ВидПараметраТекст() Тогда
		ТекстДобавления.ЯчейкаЗначение = СтрШаблон(
			"<w:tc>
			|	<w:tcPr>
			|		<w:tcW w:w="""" w:type=""dxa""/>
			|	</w:tcPr>
			|	<w:p w:rsidR=""%3"" w:rsidRDefault=""%3"">
			|		<w:r>
			|			<w:fldChar w:fldCharType=""begin"">
			|				<w:ffData>
			|					<w:name w:val=""""/>
			|					<w:enabled/>
			|					<w:calcOnExit w:val=""0""/>
			|					<w:textInput>
			|						<w:default w:val=""%1""/>
			|					</w:textInput>
			|				</w:ffData>
			|			</w:fldChar>
			|		</w:r>
			|		<w:r>
			|			<w:instrText xml:space=""preserve""> FORMTEXT </w:instrText>
			|		</w:r>
			|		<w:r>
			|			<w:fldChar w:fldCharType=""separate""/>
			|		</w:r>
			|		<w:r>
			|			<w:rPr>
			|				<w:noProof/>
			|			</w:rPr>
			|			<w:t>%2</w:t>
			|		</w:r>
			|		<w:r>
			|			<w:fldChar w:fldCharType=""end""/>
			|		</w:r>
			|	</w:p>
			|</w:tc>",
			КлючПараметра, ПредставлениеПараметра, rsidR
		);
	ИначеЕсли ОписаниеПараметра.Вид = ШаблоныПечатиОфисныхДокументов.ВидПараметраИзображение() Тогда
		ТекстДобавления.ЯчейкаЗначение = СтрШаблон(
			"<w:tc>
			|	<w:tcPr>
			|		<w:tcW w:w="""" w:type=""dxa""/>
			|	</w:tcPr>
			|	<w:p w:rsidR=""%1"" w:rsidRDefault=""%1"">
			|		<w:r>
			///
			|		<w:sdt>
			|			<w:sdtPr>
			|				<w:alias w:val=""%2""/>
			|				<w:id w:val=""2116631848""/>
			|				<w:showingPlcHdr/>
			|				<w:picture/>
			|			</w:sdtPr>
			|			<w:sdtContent>
			|				<w:r>
			|					<w:rPr>
			|						<w:noProof/>
			|						<w:lang w:eastAsia=""ru-RU""/>
			|					</w:rPr>
			|					<w:drawing>
			|						<wp:inline distT=""0"" distB=""0"" distL=""0"" distR=""0"">
			|							<wp:extent cx=""938254"" cy=""938254""/>
			|							<wp:effectExtent l=""0"" t=""0"" r=""0"" b=""0""/>
			|							<wp:docPr id=""1"" name=""Рисунок 1""/>
			|							<wp:cNvGraphicFramePr>
			|								<a:graphicFrameLocks xmlns:a=""http://schemas.openxmlformats.org/drawingml/2006/main"" noChangeAspect=""1""/>
			|							</wp:cNvGraphicFramePr>
			|							<a:graphic xmlns:a=""http://schemas.openxmlformats.org/drawingml/2006/main"">
			|								<a:graphicData uri=""http://schemas.openxmlformats.org/drawingml/2006/picture"">
			|									<pic:pic xmlns:pic=""http://schemas.openxmlformats.org/drawingml/2006/picture"">
			|										<pic:nvPicPr>
			|											<pic:cNvPr id=""0"" name=""Picture 1""/>
			|											<pic:cNvPicPr>
			|												<a:picLocks noChangeAspect=""1"" noChangeArrowheads=""1""/>
			|											</pic:cNvPicPr>
			|										</pic:nvPicPr>
			|										<pic:blipFill>
			|											<a:blip r:embed=""%3"">
			|												<a:extLst>
			|													<a:ext uri=""{28A0092B-C50C-407E-A947-70E740481C1C}"">
			|														<a14:useLocalDpi xmlns:a14=""http://schemas.microsoft.com/office/drawing/2010/main"" val=""0""/>
			|															</a:ext>
			|												</a:extLst>
			|											</a:blip>
			|											<a:srcRect/>
			|											<a:stretch>
			|												<a:fillRect/>
			|											</a:stretch>
			|										</pic:blipFill>
			|										<pic:spPr bwMode=""auto"">
			|											<a:xfrm>
			|												<a:off x=""0"" y=""0""/>
			|												<a:ext cx=""938254"" cy=""938254""/>
			|											</a:xfrm>
			|											<a:prstGeom prst=""rect"">
			|												<a:avLst/>
			|											</a:prstGeom>
			|											<a:noFill/>
			|											<a:ln>
			|												<a:noFill/>
			|											</a:ln>
			|										</pic:spPr>
			|									</pic:pic>
			|								</a:graphicData>
			|							</a:graphic>
			|						</wp:inline>
			|					</w:drawing>
			|				</w:r>
			|			</w:sdtContent>
			|		</w:sdt>
			//
			|		</w:r>
			|	</w:p>
			|</w:tc>"
			,rsidR, КлючПараметра, ОписаниеПараметра.ПараметрыКартинки.rID
		);
	КонецЕсли;
	
	Возврат ТекстДобавления;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеФайлаODT

&НаСервере
Процедура ДобавитьВыбранныеПараметрыВШаблонODT(СписокДобавляемыхПараметровДокумента, СписокДобавляемыхПараметровТаблицыДокумента)
	
	ОписаниеПараметров = ПолучитьИзВременногоХранилища(ОписаниеПараметровСсылка);
	
	СтруктураДокумента = ШаблоныПечатиОфисныхДокументов.СтруктураДокумента(Объект.ФайлШаблон, УникальныйИдентификатор);
	
	ТаблицыСодержащиеДанныеТЧ = Новый Соответствие;
	Если СписокДобавляемыхПараметровТаблицыДокумента.Количество() > 0 Тогда
		ТаблицыСодержащиеДанныеТЧ = ШаблоныПечатиОфисныхДокументов.ТабличныеЧастиДокумента(СтруктураДокумента, ОписаниеПараметров);
	КонецЕсли;
	
	ТаблицаСодержитДанныеТЧ = ТаблицыСодержащиеДанныеТЧ.Количество() <> 0;
	
	ЧтениеXML = ШаблоныПечатиОфисныхДокументов.НовыйЧтениеXML(СтруктураДокумента.ПутьКФайлу);
	ЗаписьXML = ШаблоныПечатиОфисныхДокументов.НовыйЗаписьXML(СтруктураДокумента.ПутьКФайлуЗамены);
	
	ПараметрыЧтенияXML = Неопределено;
	ШаблоныПечатиОфисныхДокументов.ОбновитьСвойстваЧтенияXMLДокументаDOCX(ЧтениеXML, ПараметрыЧтенияXML);
	
	ЧтениеXMLИмя = "";
	ПараметрыВставлены = Ложь;
	
	// Добавление параметров в начало файла
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ПораВставлятьОписаниеПараметров = ЧтениеXMLИмя = "office:text" И ЧтениеXML.Имя <> "text:variable-decls" ИЛИ ЧтениеXMLИмя = "text:variable-decls";
			
			Если ПораВставлятьОписаниеПараметров Тогда
				
				// Блок описания параметров документа
				ТекстДобавления = КодОписанияДобавляемыеПараметровДокументаODT(
					СписокДобавляемыхПараметровДокумента,
					СписокДобавляемыхПараметровТаблицыДокумента,
					ЧтениеXMLИмя <> "text:variable-decls"
				);
				ЗаписьXML.ЗаписатьБезОбработки(ТекстДобавления);
				
				Если ЧтениеXMLИмя <> "text:variable-decls" Тогда
					
					// Параметров НЕ было в документе. Вставляем новые сразу после блока описания параметров.
					Если СписокДобавляемыхПараметровДокумента.Количество() <> 0 Тогда
						ТекстДобавления = КодДобавляемыхПараметровДокументаODT(СписокДобавляемыхПараметровДокумента);
						ЗаписьXML.ЗаписатьБезОбработки(ТекстДобавления);
					КонецЕсли;
					Если СписокДобавляемыхПараметровТаблицыДокумента.Количество() <> 0 Тогда
						ТекстДобавления = КодДобавляемыхПараметровТаблицыДокументаODT(СписокДобавляемыхПараметровТаблицыДокумента);
						ТекстДобавления = КодДобавляемойТаблицыДокументаODT(
							СписокДобавляемыхПараметровТаблицыДокумента.Количество(),
							ТекстДобавления.ЯчейкаЗаголовок,
							ТекстДобавления.ЯчейкаЗначение
						);
						ЗаписьXML.ЗаписатьБезОбработки(ТекстДобавления);
					КонецЕсли;
					
					ПараметрыВставлены = Истина;
				КонецЕсли;
			КонецЕсли;
			
			ЧтениеXMLИмя = ЧтениеXML.Имя;
			ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
			
			Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя,ЧтениеXML.Значение); 
				КонецЦикла
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			ЗаписьXML.ЗаписатьТекст(ЧтениеXML.Значение);
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
			Если НЕ ПараметрыВставлены И ЧтениеXML.Имя = "text:variable-decls" Тогда
				
				// Параметры уже были в документе. Вставляем новые сразу после блока описания параметров.
				Если СписокДобавляемыхПараметровДокумента.Количество() <> 0 Тогда
					ТекстДобавления = КодДобавляемыхПараметровДокументаODT(СписокДобавляемыхПараметровДокумента);
					ЗаписьXML.ЗаписатьБезОбработки(ТекстДобавления);
				КонецЕсли;
				
				Если СписокДобавляемыхПараметровТаблицыДокумента.Количество() <> 0 Тогда
					ТекстДобавления = КодДобавляемыхПараметровТаблицыДокументаODT(СписокДобавляемыхПараметровТаблицыДокумента);
					ТекстДобавления = КодДобавляемойТаблицыДокументаODT(
							СписокДобавляемыхПараметровТаблицыДокумента.Количество(),
							ТекстДобавления.ЯчейкаЗаголовок,
							ТекстДобавления.ЯчейкаЗначение
						);
					ЗаписьXML.ЗаписатьБезОбработки(ТекстДобавления);
				КонецЕсли;
				
				ПараметрыВставлены = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	ЗаписьXML.Закрыть();
	
	ПереместитьФайл(СтруктураДокумента.ПутьКФайлуЗамены, СтруктураДокумента.ПутьКФайлу);
	
	СтруктураДокумента.ВременныеФайлы.Добавить(СтруктураДокумента.ПутьКФайлуЗамены);  // todo
	
	ДанныеФайла = ШаблоныПечатиОфисныхДокументов.ДокументИзСтруктуры(СтруктураДокумента);
	ДанныеФайлаАдрес = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
	
	ИнформацияОФайле = Новый Структура("АдресФайлаВоВременномХранилище,АдресВременногоХранилищаТекста");
	ИнформацияОФайле.АдресФайлаВоВременномХранилище = ДанныеФайлаАдрес;
	ИнформацияОФайле.АдресВременногоХранилищаТекста = "";
	
	РаботаСФайлами.ОбновитьФайл(Объект.ФайлШаблон, ИнформацияОФайле);
	
КонецПроцедуры

&НаСервере
Функция КодОписанияДобавляемыеПараметровДокументаODT(ДобавляемыеПараметрыДокумента, ДобавляемыеПараметрыТаблицы, ВключаяРодительскийКонтейнер)
	
	ТекстДобавления = "";
	
	Если ВключаяРодительскийКонтейнер Тогда
		ТекстДобавления = ТекстДобавления + "
		|<text:variable-decls>";
	КонецЕсли;
	
	Для каждого Параметр Из ДобавляемыеПараметрыДокумента Цикл
		ТекстДобавления = ТекстДобавления + СтрШаблон("
		|<text:variable-decl office:value-type=""string"" text:name=""%1""/>",
		Параметр.Значение);
	КонецЦикла;
	Для каждого Параметр Из ДобавляемыеПараметрыТаблицы Цикл
		ТекстДобавления = ТекстДобавления + СтрШаблон("
		|<text:variable-decl office:value-type=""string"" text:name=""%1""/>",
		Параметр.Значение);
	КонецЦикла;
	
	Если ВключаяРодительскийКонтейнер Тогда
		ТекстДобавления = ТекстДобавления + "
		|</text:variable-decls>";
	КонецЕсли;
	
	Возврат ТекстДобавления;
	
КонецФункции

&НаСервере
Функция КодДобавляемыхПараметровДокументаODT(ДобавляемыеПараметры)
	
	ТекстДобавления = "";
	
	Для каждого Параметр Из ДобавляемыеПараметры Цикл
		ТекстДобавления = ТекстДобавления + КодПараметраДокументаODT(Параметр.Значение, Параметр.Представление);
	КонецЦикла;
	
	Возврат ТекстДобавления;
	
КонецФункции

&НаСервере
Функция КодПараметраДокументаODT(ИмяПараметра, Представление)
	
	Возврат СтрШаблон(
		"<text:p text:style-name=""Standard"">
		|	<text:variable-set text:name=""%1"" office:value-type=""string"">%2</text:variable-set>
		|</text:p>",
		ИмяПараметра, Представление
	);
	
КонецФункции

&НаСервере
Функция КодДобавляемойТаблицыДокументаODT(КоличествоКолонок, ЯчейкиЗаголовка, ЯчейкиЗначения)
	
	ТекстДобавления = СтрШаблон(
		"<text:p text:style-name=""Standard""/>
		|<table:table>
		|	<table:table-column table:number-columns-repeated=""%1""/>
		|	<table:table-row>
		|		%2
		|	</table:table-row>
		|	<table:table-row>
		|		%3
		|	</table:table-row>
		|</table:table>
		|<text:p text:style-name=""Standard""/>",
		КоличествоКолонок, ЯчейкиЗаголовка, ЯчейкиЗначения
	);
	
	Возврат ТекстДобавления;
	
КонецФункции

&НаСервере
Функция КодДобавляемыхПараметровТаблицыДокументаODT(ДобавляемыеПараметры)
	
	ТекстыДобавления = Новый Структура("ЯчейкаЗаголовок,ЯчейкаЗначение", "", "");
	
	Для каждого Параметр Из ДобавляемыеПараметры Цикл
		НовыйТекст = КодПараметраТаблицыДокументаODT(Параметр.Значение, Параметр.Представление);
		ТекстыДобавления.ЯчейкаЗаголовок = ТекстыДобавления.ЯчейкаЗаголовок + НовыйТекст.ЯчейкаЗаголовок;
		ТекстыДобавления.ЯчейкаЗначение  = ТекстыДобавления.ЯчейкаЗначение + НовыйТекст.ЯчейкаЗначение;
	КонецЦикла;
	
	Возврат ТекстыДобавления;
	
КонецФункции

&НаСервере
Функция КодПараметраТаблицыДокументаODT(ИмяПараметра, Представление)
	
	ТекстДобавления = Новый Структура("ЯчейкаЗаголовок,ЯчейкаЗначение", "", "");
	
	ТекстДобавления.ЯчейкаЗаголовок = СтрШаблон(
		"<table:table-cell office:value-type=""string"">
		|	<text:p>%1</text:p>
		|</table:table-cell>",
		Представление
	);
	
	ТекстДобавления.ЯчейкаЗначение = СтрШаблон(
		"<table:table-cell office:value-type=""string"">
		|	<text:p>
		|		<text:variable-set text:name=""%1"" office:value-type=""string"">%2</text:variable-set>
		|	</text:p>
		|</table:table-cell>",
		ИмяПараметра, Представление
	);
	
	Возврат ТекстДобавления;
	
КонецФункции

#КонецОбласти
