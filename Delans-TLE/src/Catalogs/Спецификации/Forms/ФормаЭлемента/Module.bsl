
&НаКлиенте
Перем ТекущийТипСтрокиСостава;

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиПереопределяемый.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	Если НЕ Константы.ФункциональнаяОпцияИспользоватьТехоперации.Получить() Тогда
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Справочники.Спецификации.ТабличныеЧасти.Состав, НастройкиЗагрузкиДанных, ЭтотОбъект, Ложь);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	// Калькуляция
	Элементы.ЗаказПокупателя.Видимость = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
	// Конец Калькуляция
	
	ОбновитьСписокВыбораЭтапы();
	
	УправлениеФормой(ЭтотОбъект);
	
	УправлениеНебольшойФирмойСервер.НастроитьФормуОбъектаМобильныйКлиент(Элементы);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Параметр = Новый Структура("Ссылка, Недействителен", Объект.Ссылка, Объект.Недействителен);
	Оповестить("СпецификацияЗаписана", Параметр, Объект.Владелец);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//Обсуждения
	ОбсужденияСервер.ПослеЗаписиНаСервере(ТекущийОбъект);	
	// Конец Обсуждения
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#Область Состав

&НаКлиенте
Процедура СоставОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Для каждого Номенклатура Из ВыбранноеЗначение Цикл
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Номенклатура", Номенклатура);
		СуществующиеСтроки = Объект.Состав.НайтиСтроки(СтруктураДанные);
		Если СуществующиеСтроки.Количество()<>0 Тогда
			Для каждого СтрокаТабличнойЧасти Из СуществующиеСтроки Цикл
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + 1;
			КонецЦикла;
			Продолжить;
		КонецЕсли; 
		
		НоваяСрока = Объект.Состав.Добавить();
		НоваяСрока.Номенклатура = Номенклатура;
		НоваяСрока.ТипСтрокиСостава = ПредопределенноеЗначение("Перечисление.ТипыСтрокСоставаСпецификации.Материал");
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		НоваяСрока.Характеристика = Неопределено;
		НоваяСрока.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		НоваяСрока.Спецификация = СтруктураДанные.Спецификация;
		НоваяСрока.Количество = 1;
		НоваяСрока.КоличествоПродукции = 1;
		НоваяСрока.ДоляСтоимости = 1;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода ТипСтрокиСостава.
//
Процедура СоставТипСтрокиСоставаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Состав.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ТипСтрокиСостава)
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("ТипСтрокиСостава", СтрокаТабличнойЧасти.ТипСтрокиСостава);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		
		Если НЕ СоответствуетТипСтрокиТипНоменклатуры(СтруктураДанные) Тогда
			
			СтрокаТабличнойЧасти.Номенклатура = Неопределено;
			СтрокаТабличнойЧасти.Характеристика = Неопределено;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = Неопределено;
			СтрокаТабличнойЧасти.Спецификация = Неопределено;
			СтрокаТабличнойЧасти.Количество = 1;
			СтрокаТабличнойЧасти.КоличествоПродукции = 1;
			СтрокаТабличнойЧасти.ДоляСтоимости = 1;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СоставТипСтрокиСоставаПриИзменении()

&НаКлиенте
Процедура СоставНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Состав.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Характеристика = Неопределено;
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.КоличествоПродукции = 1;
	СтрокаТабличнойЧасти.ДоляСтоимости = 1;
	
КонецПроцедуры // СоставНоменклатураПриИзменении()

&НаКлиенте
Процедура СоставНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбновитьПараметрыВыбораНоменклатуры();	
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание=0 Тогда
		ОбновитьПараметрыВыбораНоменклатуры();	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Запрещаем циклические ссылки
	Если ВыбранноеЗначение = Объект.Владелец Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='В состав спецификации не может входить продукция.'"));
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Характеристика.
//
Процедура СоставХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Состав.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
КонецПроцедуры // СоставХарактеристикаПриИзменении()

#КонецОбласти 

#Область Операции

&НаКлиенте
Процедура ОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Для каждого Операция Из ВыбранноеЗначение Цикл
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Операция", Операция);
		СуществующиеСтроки = Объект.Операции.НайтиСтроки(СтруктураДанные);
		Если СуществующиеСтроки.Количество()<>0 Тогда
			Для каждого СтрокаТабличнойЧасти Из СуществующиеСтроки Цикл
				СтрокаТабличнойЧасти.НормаВремени = СтрокаТабличнойЧасти.НормаВремени + 1;
			КонецЦикла;
			Продолжить;
		КонецЕсли; 
		
		НоваяСрока = Объект.Операции.Добавить();
		НоваяСрока.Операция = Операция;
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Номенклатура", Операция);
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		НоваяСрока.НормаВремени = СтруктураДанные.НормаВремени;
		НоваяСрока.КоличествоПродукции = 1;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Операция.
//
Процедура ОперацииОперацияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Операции.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Операция);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.НормаВремени = СтруктураДанные.НормаВремени;
	СтрокаТабличнойЧасти.КоличествоПродукции = 1;
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

#КонецОбласти 

&НаКлиенте
Процедура ВидПроизводстваПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидПроизводства) Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Состав Цикл
			СтрокаТабличнойЧасти.Этап = ПредопределенноеЗначение("Справочник.ЭтапыПроизводства.ПустаяСсылка");
		КонецЦикла; 
		Для каждого СтрокаТабличнойЧасти Из Объект.Операции Цикл
			СтрокаТабличнойЧасти.Этап = ПредопределенноеЗначение("Справочник.ЭтапыПроизводства.ПустаяСсылка");
		КонецЦикла; 
	КонецЕсли; 
	
	ВидПроизводстваПриИзмененииСервер();	
	
КонецПроцедуры

&НаСервере
Процедура ВидПроизводстваПриИзмененииСервер()
	
	ОбновитьСписокВыбораЭтапы();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборСостав(Команда)
	
	СтруктураОтбора = Новый Структура;
	Для каждого ПараметрВыбора Из Элементы.СоставНоменклатура.ПараметрыВыбора Цикл
		ИмяРеквизита = СтрЗаменить(ПараметрВыбора.Имя, "Отбор.", "");
		ЗначениеОтбора = ?(ТипЗнч(ПараметрВыбора.Значение)=Тип("ФиксированныйМассив"), Новый Массив(ПараметрВыбора.Значение), ПараметрВыбора.Значение);
		СтруктураОтбора.Вставить(ИмяРеквизита, ЗначениеОтбора); 
	КонецЦикла;
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Отбор", СтруктураОтбора);
	СтруктураОткрытия.Вставить("РежимВыбора", Истина);
	СтруктураОткрытия.Вставить("ЗакрыватьПриВыборе", Ложь);
	СтруктураОткрытия.Вставить("МножественныйВыбор", Истина);
	Если Элементы.Состав.ТекущиеДанные<>Неопределено И ЗначениеЗаполнено(Элементы.Состав.ТекущиеДанные.Номенклатура) Тогда
		СтруктураОткрытия.Вставить("ТекущаяСтрока", Элементы.Состав.ТекущиеДанные.Номенклатура);
	КонецЕсли; 
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", СтруктураОткрытия, Элементы.Состав, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОперации(Команда)
	
	СтруктураОтбора = Новый Структура;
	Для каждого ПараметрВыбора Из Элементы.ОперацииОперация.ПараметрыВыбора Цикл
		ИмяРеквизита = СтрЗаменить(ПараметрВыбора.Имя, "Отбор.", "");
		ЗначениеОтбора = ?(ТипЗнч(ПараметрВыбора.Значение)=Тип("ФиксированныйМассив"), Новый Массив(ПараметрВыбора.Значение), ПараметрВыбора.Значение);
		СтруктураОтбора.Вставить(ИмяРеквизита, ЗначениеОтбора); 
	КонецЦикла;
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("Отбор", СтруктураОтбора);
	СтруктураОткрытия.Вставить("РежимВыбора", Истина);
	СтруктураОткрытия.Вставить("ЗакрыватьПриВыборе", Ложь);
	СтруктураОткрытия.Вставить("МножественныйВыбор", Истина);
	Если Элементы.Операции.ТекущиеДанные<>Неопределено И ЗначениеЗаполнено(Элементы.Операции.ТекущиеДанные.Операция) Тогда
		СтруктураОткрытия.Вставить("ТекущаяСтрока", Элементы.Операции.ТекущиеДанные.Операция);
	КонецЕсли; 
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", СтруктураОткрытия, Элементы.Операции, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоставЭтап", 	"Видимость", ЗначениеЗаполнено(Объект.ВидПроизводства));	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОперацииЭтап", 	"Видимость", ЗначениеЗаполнено(Объект.ВидПроизводства));	
	
КонецПроцедуры

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("НормаВремени", СтруктураДанные.Номенклатура.НормаВремени);
	
	Если СтруктураДанные.Свойство("Характеристика") Тогда
		СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
	Иначе
		СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура));
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Получает набор данных с сервера для процедуры ХарактеристикаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

&НаСервереБезКонтекста
// Возвращает результат проверки соответствия типа строки состава типу номенклатуры.
//
Функция СоответствуетТипСтрокиТипНоменклатуры(СтруктураДанные)
	
	Если (СтруктураДанные.ТипСтрокиСостава = ПредопределенноеЗначение("Перечисление.ТипыСтрокСоставаСпецификации.Расход")
		И СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"))
		ИЛИ (СтруктураДанные.ТипСтрокиСостава <> ПредопределенноеЗначение("Перечисление.ТипыСтрокСоставаСпецификации.Расход")
		И СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга")) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервере
Процедура ОбновитьСписокВыбораЭтапы()
	
	Элементы.СоставЭтап.СписокВыбора.Очистить();
	Элементы.ОперацииЭтап.СписокВыбора.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидПроизводства) Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидПроизводства", Объект.ВидПроизводства);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыПроизводстваЭтапы.Этап КАК Этап
	|ИЗ
	|	Справочник.ВидыПроизводства.Этапы КАК ВидыПроизводстваЭтапы
	|ГДЕ
	|	ВидыПроизводстваЭтапы.Ссылка = &ВидПроизводства
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыПроизводстваЭтапы.НомерСтроки";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Элементы.СоставЭтап.СписокВыбора.НайтиПоЗначению(Выборка.Этап)<>Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Элементы.СоставЭтап.СписокВыбора.Добавить(Выборка.Этап);
		Элементы.ОперацииЭтап.СписокВыбора.Добавить(Выборка.Этап);
	КонецЦикла;
	Если Элементы.СоставЭтап.СписокВыбора.Количество()=0 Тогда
		Элементы.СоставЭтап.СписокВыбора.Добавить(Справочники.ЭтапыПроизводства.ЗавершениеПроизводства);
		Элементы.ОперацииЭтап.СписокВыбора.Добавить(Справочники.ЭтапыПроизводства.ЗавершениеПроизводства);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыВыбораНоменклатуры()
	
	ТекСтр = Элементы.Состав.ТекущиеДанные;
	Если ТекСтр=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	// Установим параметры выбора номенклатуры в зависимости от типа строки состава
	МассивОтбора = Новый Массив;
	
	Если ТекСтр.ТипСтрокиСостава = ПредопределенноеЗначение("Перечисление.ТипыСтрокСоставаСпецификации.Расход") Тогда
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	Иначе
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
	КонецЕсли;
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Новый ФиксированныйМассив(МассивОтбора));
	МассивПараметровВыбора = Новый Массив();
	МассивПараметровВыбора.Добавить(ПараметрВыбора);
	// Наборы
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.ЭтоНабор", Ложь);
	МассивПараметровВыбора.Добавить(ПараметрВыбора);
	// Конец Наборы
	Элементы.СоставНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточника(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
			
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
			Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
				
				Если СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()] Тогда
					
					ЗаполнитьЗначенияСвойств(Объект.Состав.Добавить(), СтрокаТаблицы);
					
				конецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

