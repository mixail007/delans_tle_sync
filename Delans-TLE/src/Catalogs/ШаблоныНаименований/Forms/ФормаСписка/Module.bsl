
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Отбор.Свойство("Владелец") Тогда
		Владелец = Параметры.Отбор.Владелец;
	Иначе
		Владелец = Справочники.КатегорииНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	ВидНаименования = Неопределено;
	Параметры.Свойство("ВидНаименования", ВидНаименования);
	
	УправлениеВидимостьюФормы(ВидНаименования);
	
	ПриИзмененииВладельца();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомандФормы

&НаКлиенте
Процедура СоздатьШаблонДляНоменклатуры(Команда)
	
	СтруктураПараметров = Новый Структура("ДляХарактеристики,Владелец", Ложь, Владелец);
	ОткрытьФорму("Справочник.ШаблоныНаименований.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьШаблонДляХарактеристики(Команда)
	
	СтруктураПараметров = Новый Структура("ДляХарактеристики,Владелец", Истина, Владелец);
	ОткрытьФорму("Справочник.ШаблоныНаименований.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьШаблон(Команда)
	
	СтруктураПараметров = Новый Структура("ДляХарактеристики,Владелец", ДляХарактеристики, Владелец);
	ОткрытьФорму("Справочник.ШаблоныНаименований.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	ПриИзмененииВладельца();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриИзмененииВладельца()
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, "Владелец", Владелец
		);
		
		Элементы.СписокВладелец.Видимость = Ложь;
		Элементы.СоздатьШаблон.Доступность = Истина;
		Элементы.ГруппаСоздать.Доступность = Истина;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
			Список, "Владелец"
		);
		
		Элементы.СписокВладелец.Видимость = Истина;
		Элементы.СоздатьШаблон.Доступность = Ложь;
		Элементы.ГруппаСоздать.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюФормы(ВидНаименования)
	
	ГруппаКоманд = Элементы.Найти("НастройкаПорядкаЭлементов");
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		Если ГруппаКоманд <> Неопределено Тогда
			ГруппаКоманд.Видимость = Истина;
		КонецЕсли;
		Элементы.Владелец.Видимость = Ложь;
	Иначе
		Если ГруппаКоманд <> Неопределено Тогда
			ГруппаКоманд.Видимость = Ложь;
		КонецЕсли;
		Элементы.Владелец.Видимость = Истина;
	КонецЕсли;
	
	Если ВидНаименования = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(Владелец) Тогда
		
		Если ЗначениеЗаполнено(Владелец) Тогда
			ЕстьХарактеристики = Владелец.ИспользоватьХарактеристики;
		Иначе
			ЕстьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
		КонецЕсли;
		
		Если ЕстьХарактеристики Тогда
			Элементы.СоздатьШаблон.Видимость = Ложь;
			Элементы.ГруппаСоздать.Видимость = Истина;
			Элементы.ДляХарактеристикиПредставление.Видимость = Истина;
		Иначе
			Элементы.СоздатьШаблон.Видимость = Истина;
			Элементы.ГруппаСоздать.Видимость = Ложь;
			Элементы.ДляХарактеристикиПредставление.Видимость = Ложь;
		КонецЕсли;
		
		Если ЕстьХарактеристики Тогда
			Возврат;
		КонецЕсли;
		
		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(
			Список, "ДляХарактеристики", Ложь
		);
		
	ИначеЕсли ВидНаименования = Перечисления.ВидыНаименованийОбъектов.НоменклатураРабочее
		ИЛИ ВидНаименования = Перечисления.ВидыНаименованийОбъектов.НоменклатураДляПечати Тогда
		
		ДляХарактеристики = Ложь;
		
		Элементы.СоздатьШаблон.Видимость = Истина;
		Элементы.ГруппаСоздать.Видимость = Ложь;
		Элементы.ДляХарактеристикиПредставление.Видимость = Ложь;
		
		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(
			Список, "ДляХарактеристики", ДляХарактеристики
		);
		
	ИначеЕсли ВидНаименования = Перечисления.ВидыНаименованийОбъектов.ХарактеристикаРабочее
		ИЛИ ВидНаименования = Перечисления.ВидыНаименованийОбъектов.ХарактеристикаДляПечати Тогда
		
		ДляХарактеристики = Истина;
		
		Элементы.СоздатьШаблон.Видимость = Истина;
		Элементы.ГруппаСоздать.Видимость = Ложь;
		Элементы.ДляХарактеристикиПредставление.Видимость = Ложь;
		
		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(
			Список, "ДляХарактеристики", ДляХарактеристики
		);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти