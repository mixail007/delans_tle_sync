&НаКлиенте
Перем ПорядокСортировкиИзменен; 

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьСписокТипов();
	КонецЕсли;
	
	Если Не Константы.ФункциональнаяОпцияИспользоватьТехоперации.Получить() Тогда
		НайденнаяОперация = Элементы.ТипНоменклатурыПоУмолчанию.СписокВыбора.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Операция);
		Если НайденнаяОперация <> Неопределено Тогда
			Элементы.ТипНоменклатурыПоУмолчанию.СписокВыбора.Удалить(НайденнаяОперация);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты")
		Тогда
		НайденнаяОперация = Элементы.ТипНоменклатурыПоУмолчанию.СписокВыбора.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.ПодарочныйСертификат);
		Если НайденнаяОперация <> Неопределено Тогда
			Элементы.ТипНоменклатурыПоУмолчанию.СписокВыбора.Удалить(НайденнаяОперация);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСписокСвойствТекущегоНабора("Номенклатура");
	ЗаполнитьСписокСвойствТекущегоНабора("Характеристики");
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	УправлениеВидимостью(ЭтаФорма);
	
	ОбъектМетаданных = Справочники.Номенклатура.ПустаяСсылка().Метаданные();
	РазрешеноРедактированиеНоменклатуры =
		УправлениеНебольшойФирмойУправлениеДоступомПовтИсп.ЕстьПравоДоступа(
			"Добавление",
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных))
		ИЛИ УправлениеНебольшойФирмойУправлениеДоступомПовтИсп.ЕстьПравоДоступа(
			"Изменение", 
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных));
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	РаботаСНоменклатурой.ПриСозданииНаСервереФормаВидаНоменклатуры(ЭтотОбъект, Элементы.ГруппаРаботаСНоменклатурой);
	Элементы.ГруппаРаботаСНоменклатурой.Доступность = РазрешеноРедактированиеНоменклатуры;
	
	Для каждого Элемент Из Элементы.ГруппаРаботаСНоменклатурой.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			Элемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		КонецЕсли;
	КонецЦикла;
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
	УстановитьПризнакПоляДляСортировки(); 
	
	Если Не Константы.ФункциональнаяОпцияИспользоватьХарактеристики.Получить() Тогда
		Элементы.ГруппаХарактеристики.Видимость = Ложь;
	КонецЕсли;
	
	// ВЕТИС
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС") Тогда
		Элементы.ГруппаВЕТИС.Видимость = Ложь;
	КонецЕсли;
	//Конец ВЕТИС
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	РаботаСНоменклатурой.ПриЗаписиНаСервереФормаВидаНоменклатуры(ЭтотОбъект, ТекущийОбъект, Отказ);
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбъектНаборСвойств = Объект.НаборСвойств.ПолучитьОбъект();
	ТЧ = ОбъектНаборСвойств.ДополнительныеРеквизиты;
	Индекс = 0;
	Для каждого Свойство Из СвойстваНоменклатуры Цикл
		
		Строка = ТЧ.Найти(Свойство.Ссылка, "Свойство");
		ТЧ.Сдвинуть(Строка, Индекс - ТЧ.Индекс(Строка));
		Индекс = Индекс + 1;
		
	КонецЦикла;
	ОбъектНаборСвойств.Записать();
	
	ОбъектНаборСвойств = Объект.НаборСвойствХарактеристики.ПолучитьОбъект();
	ТЧ = ОбъектНаборСвойств.ДополнительныеРеквизиты;
	Индекс = 0;
	Для каждого Свойство Из СвойстваХарактеристики Цикл
		
		Строка = ТЧ.Найти(Свойство.Ссылка, "Свойство");
		ТЧ.Сдвинуть(Строка, Индекс - ТЧ.Индекс(Строка));
		Индекс = Индекс + 1;
		
	КонецЦикла;
	ОбъектНаборСвойств.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи) 
	
	Если ПорядокСортировкиИзменен 
		Тогда 
		Оповестить("СортировкаИзменена", Объект.Ссылка);  
	КонецЕсли;
	
	Оповестить("Запись_КатегорииНоменклатуры", Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = НЕ НеПредлагатьСохранять;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ВЕТИС
	СгенерироватьШаблонНаименованияПартии(Неопределено);
	// КонецВЕТИС
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи) 
	
	ПорядокСортировкиИзменен = Ложь;
	МассивТекущихСвойств = Новый Массив;
	
	Для Каждого СтрокаСортировки из Объект.ПорядокСортировки Цикл
		МассивТекущихСвойств.Добавить(СтрокаСортировки.Свойство);
	КонецЦикла;
	
	Объект.ПорядокСортировки.Очистить();
	
	Для Каждого СтрокаТаблицыСвойстваХарактеристики Из СвойстваХарактеристики Цикл
		Если СтрокаТаблицыСвойстваХарактеристики.Сортировать
			Тогда
			НоваяСтрока = Объект.ПорядокСортировки.Добавить();
			НоваяСтрока.Свойство = СтрокаТаблицыСвойстваХарактеристики.Ссылка;
			
			ПорядокСортировкиИзменен = ?(МассивТекущихСвойств.Найти(НоваяСтрока.Свойство) = Неопределено, Истина, Ложь);        
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПорядокСортировкиИзменен и Не МассивТекущихСвойств.Количество() = Объект.ПорядокСортировки.Количество()
		Тогда
		ПорядокСортировкиИзменен = Истина;
	КонецЕсли;
	
	Если Не Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
		И Не Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга")
		И Не Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") 
		Тогда
		Объект.ИспользоватьХарактеристики = Ложь;
		Объект.ПроверятьЗаполнениеХарактеристики = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТипНоменклатурыПоУмолчаниюПриИзменении(Элемент)
	
	УправлениеВидимостью(ЭтаФорма);
	
	Если Не Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
		И Не Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга")
		И Не Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") 
		Тогда
		Объект.ИспользоватьХарактеристики = Ложь;
		Объект.ПроверятьЗаполнениеХарактеристики = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодконтрольнаяПродукцияВЕТИСПриИзменении(Элемент)
	
	УправлениеВидимостью(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗаписьСкладскогоЖурналаВЕТИСПартииПриИзменении(Элемент)
	
	Если Объект.ИспользоватьЗаписьСкладскогоЖурналаВЕТИСПартии Тогда
		
		Элементы.ГруппаДатыПроизводства.Доступность = Истина;
		Элементы.ГруппаСрокаГодности.Доступность = Истина;
		
	Иначе
		
		Элементы.ГруппаДатыПроизводства.Доступность = Ложь;
		Элементы.ГруппаСрокаГодности.Доступность = Ложь;
		Объект.ИспользоватьДатуПроизводстваПартии = Ложь;
		Объект.ИспользоватьСрокГодностиПартии = Ложь;
		
	КонецЕсли;
	
	СгенерироватьШаблонНаименованияПартии(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСвойстваНоменклатуры

&НаКлиенте
Процедура СвойстваНоменклатурыПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборСтрокиТаблицыДопРеквизитов(Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ДобавитьДопРеквизит("Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваНоменклатурыПередНачаломИзменения(Элемент, Отказ)
	
	ВыборСтрокиТаблицыДопРеквизитов(Элемент.ТекущиеДанные.Ссылка);
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваНоменклатурыПередУдалением(Элемент, Отказ)
	
	Для каждого УдаляемаяСтрока Из Элемент.ВыделенныеСтроки Цикл
		УдаляемоеСвойство = СвойстваНоменклатуры.НайтиПоИдентификатору(УдаляемаяСтрока).Ссылка;
		СвойстваНоменклатурыПередУдалениемНаСервере(УдаляемоеСвойство);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СвойстваНоменклатурыПередУдалениемНаСервере(УдаляемоеСвойство)
	
	ОбъектНаборСвойств = Объект.НаборСвойств.ПолучитьОбъект();
	ТЧ = ОбъектНаборСвойств.ДополнительныеРеквизиты;
	Строка = ТЧ.Найти(УдаляемоеСвойство, "Свойство");
	ТЧ.Удалить(Строка);
	ОбъектНаборСвойств.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СвойстваНоменклатурыОбработкаВыбораНаСервере(ВыбранноеЗначение);
	Модифицированность = Истина;
	ЗаполнитьСписокСвойствТекущегоНабора("Номенклатура");
	
КонецПроцедуры

&НаСервере
Процедура СвойстваНоменклатурыОбработкаВыбораНаСервере(МассивВыбранныхЗначений)
	
	Для каждого ВыбранноеЗначение Из МассивВыбранныхЗначений Цикл
		
		Если ВыбранноеЗначение.НаборСвойств <> Объект.НаборСвойств
			И ВыбранноеЗначение.НаборСвойств = Объект.НаборСвойствХарактеристики Тогда
			
			ВыбранноеЗначениеОбъект = ВыбранноеЗначение.ПолучитьОбъект();
			ВыбранноеЗначениеОбъект.НаборСвойств = Объект.НаборСвойствХарактеристики;
			ВыбранноеЗначениеОбъект.Записать();
			
		КонецЕсли;
		
		ОбъектНаборСвойств = Объект.НаборСвойств.ПолучитьОбъект();
		ТЧ = ОбъектНаборСвойств.ДополнительныеРеквизиты;
		Строка = ТЧ.Добавить();
		Строка.Свойство = ВыбранноеЗначение;
		ОбъектНаборСвойств.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСвойстваХарактеристики

&НаКлиенте
Процедура СвойстваХарактеристикиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваХарактеристикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборСтрокиТаблицыДопРеквизитов(Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваХарактеристикиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ДобавитьДопРеквизит("Характеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваХарактеристикиПередНачаломИзменения(Элемент, Отказ)
	
	Если НЕ Элемент.ТекущийЭлемент.Имя = "СвойстваХарактеристикиСортировать" 
		Тогда	
		ВыборСтрокиТаблицыДопРеквизитов(Элемент.ТекущиеДанные.Ссылка);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваХарактеристикиПередУдалением(Элемент, Отказ)
	
	УдаляемоеСвойство = Элемент.ТекущиеДанные.Ссылка;
	СвойстваХарактеристикиПередУдалениемНаСервере(УдаляемоеСвойство);
		
КонецПроцедуры

&НаСервере
Процедура СвойстваХарактеристикиПередУдалениемНаСервере(УдаляемоеСвойство)

	ОбъектНаборСвойств = Объект.НаборСвойствХарактеристики.ПолучитьОбъект();
	ТЧ = ОбъектНаборСвойств.ДополнительныеРеквизиты;
	Строка = ТЧ.Найти(УдаляемоеСвойство, "Свойство");
	
	Если Не Строка = Неопределено Тогда
		ТЧ.Удалить(Строка);
		ОбъектНаборСвойств.Записать();
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Свойство", УдаляемоеСвойство);
	
	СтрокиСортировки = Объект.ПорядокСортировки.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаСортировки из СтрокиСортировки Цикл
		Объект.ПорядокСортировки.Удалить(СтрокаСортировки);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СвойстваХарактеристикиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СвойстваХарактеристикиОбработкаВыбораНаСервере(ВыбранноеЗначение);
	Модифицированность = Истина;
	ЗаполнитьСписокСвойствТекущегоНабора("Характеристики");
	
КонецПроцедуры

&НаСервере
Процедура СвойстваХарактеристикиОбработкаВыбораНаСервере(МассивВыбранныхЗначений)
	
	Для каждого ВыбранноеЗначение Из МассивВыбранныхЗначений Цикл
		
		Если ВыбранноеЗначение.НаборСвойств = Объект.НаборСвойств
			И ВыбранноеЗначение.НаборСвойств <> Объект.НаборСвойствХарактеристики Тогда
			
			ВыбранноеЗначениеОбъект = ВыбранноеЗначение.ПолучитьОбъект();
			ВыбранноеЗначениеОбъект.НаборСвойств = Объект.НаборСвойствХарактеристики;
			ВыбранноеЗначениеОбъект.Записать();
			
		КонецЕсли;
		
		ОбъектНаборСвойств = Объект.НаборСвойствХарактеристики.ПолучитьОбъект();
		ТЧ = ОбъектНаборСвойств.ДополнительныеРеквизиты;
		Строка = ТЧ.Добавить();
		Строка.Свойство = ВыбранноеЗначение;
		ОбъектНаборСвойств.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСписокТипов()
	
	Список = Элементы.ТипНоменклатурыПоУмолчанию.СписокВыбора;
	
	ОграничениеТипаНоменклатуры = Неопределено;
	Параметры.ЗначенияЗаполнения.Свойство("ТипНоменклатуры", ОграничениеТипаНоменклатуры);
	
	Если НЕ ОграничениеТипаНоменклатуры = Неопределено Тогда
		Если (ТипЗнч(ОграничениеТипаНоменклатуры) = Тип("Массив") Или ТипЗнч(ОграничениеТипаНоменклатуры) = Тип("ФиксированныйМассив")) 
			И ОграничениеТипаНоменклатуры.Количество() > 0 Тогда
			
			Список.Очистить();
			Для каждого Тип Из ОграничениеТипаНоменклатуры Цикл
				Список.Добавить(Тип);
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ОграничениеТипаНоменклатуры) = Тип("ПеречислениеСсылка.ТипыНоменклатуры") Тогда
			
			Список.Очистить();
			Список.Добавить(ОграничениеТипаНоменклатуры);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Константы.ФункциональнаяОпцияИспользоватьТехоперации.Получить() Тогда
		НайденнаяОперация = Элементы.ТипНоменклатурыПоУмолчанию.СписокВыбора.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Операция);
		Если НайденнаяОперация <> Неопределено Тогда
			Элементы.ТипНоменклатурыПоУмолчанию.СписокВыбора.Удалить(НайденнаяОперация);
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ТипНоменклатурыПоУмолчанию.СписокВыбора.НайтиПоЗначению(Объект.ТипНоменклатурыПоУмолчанию) = Неопределено Тогда
		Объект.ТипНоменклатурыПоУмолчанию = Список.Получить(0).Значение;
	КонецЕсли;
	
	Если Список.Количество() = 1 Тогда
		Элементы.ТипНоменклатурыПоУмолчанию.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтоДополнительноеСведение(ТипРеквизита)
	
	Если ТипРеквизита.Типы().Найти(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) <> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокСвойствТекущегоНабора(ВладелецНабораЭлементов)
	
	Если ВладелецНабораЭлементов = "Номенклатура" Тогда
		НаборСвойств = Объект.НаборСвойств;
		Таблица = СвойстваНоменклатуры;
	ИначеЕсли ВладелецНабораЭлементов = "Характеристики" Тогда
		НаборСвойств = Объект.НаборСвойствХарактеристики;
		Таблица = СвойстваХарактеристики;
	КонецЕсли;
	
	Таблица.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаборСвойств", НаборСвойств);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДопРеквизиты.Свойство КАК Ссылка,
	|	ДопРеквизиты.НомерСтроки КАК НомерСтрокиДляСортировки
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДопРеквизиты
	|ГДЕ
	|	ДопРеквизиты.Ссылка = &НаборСвойств
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Ссылка = Выборка.Ссылка;
		НоваяСтрока.Заголовок = Выборка.Ссылка.Заголовок;
		
		Если УправлениеСвойствамиСлужебный.ТипЗначенияСодержитЗначенияСвойств(Выборка.Ссылка.ТипЗначения) Тогда
			
			НоваяСтрока.ТипЗначения = Строка(Новый ОписаниеТипов(
				Выборка.Ссылка.ТипЗначения,
				,
				"СправочникСсылка.ЗначенияСвойствОбъектовИерархия,
				|СправочникСсылка.ЗначенияСвойствОбъектов"));
			
			Запрос = Новый Запрос;
			Если ЗначениеЗаполнено(Выборка.Ссылка.ВладелецДополнительныхЗначений) Тогда
				Запрос.УстановитьПараметр("Владелец", Выборка.Ссылка.ВладелецДополнительныхЗначений);
			Иначе
				Запрос.УстановитьПараметр("Владелец", Выборка.Ссылка);
			КонецЕсли;
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 4
			|	ЗначенияСвойствОбъектов.Наименование КАК Наименование
			|ИЗ
			|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Владелец = &Владелец
			|	И НЕ ЗначенияСвойствОбъектов.ЭтоГруппа
			|	И НЕ ЗначенияСвойствОбъектов.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 4
			|	ЗначенияСвойствОбъектовИерархия.Наименование
			|ИЗ
			|	Справочник.ЗначенияСвойствОбъектовИерархия КАК ЗначенияСвойствОбъектовИерархия
			|ГДЕ
			|	ЗначенияСвойствОбъектовИерархия.Владелец = &Владелец
			|	И НЕ ЗначенияСвойствОбъектовИерархия.ПометкаУдаления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК ЗначениеИстина
			|ИЗ
			|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Владелец = &Владелец
			|	И НЕ ЗначенияСвойствОбъектов.ЭтоГруппа
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА
			|ИЗ
			|	Справочник.ЗначенияСвойствОбъектовИерархия КАК ЗначенияСвойствОбъектовИерархия
			|ГДЕ
			|	ЗначенияСвойствОбъектовИерархия.Владелец = &Владелец";
			РезультатыЗапроса = Запрос.ВыполнитьПакет();
			
			ПервыеЗначения = РезультатыЗапроса[0].Выгрузить().ВыгрузитьКолонку("Наименование");
			
			Если ПервыеЗначения.Количество() = 0 Тогда
				Если РезультатыЗапроса[1].Пустой() Тогда
					ПредставлениеЗначений = НСтр("ru = 'Значения еще не введены'");
				Иначе
					ПредставлениеЗначений = НСтр("ru = 'Значения помечены на удаление'");
				КонецЕсли;
			Иначе
				ПредставлениеЗначений = "";
				Номер = 0;
				Для каждого Значение Из ПервыеЗначения Цикл
					Номер = Номер + 1;
					Если Номер = 4 Тогда
						ПредставлениеЗначений = ПредставлениеЗначений + ",...";
						Прервать;
					КонецЕсли;
					ПредставлениеЗначений = ПредставлениеЗначений + ?(Номер > 1, ", ", "") + Значение;
				КонецЦикла;
			КонецЕсли;
			ПредставлениеЗначений = "<" + ПредставлениеЗначений + ">";
			Если ЗначениеЗаполнено(НоваяСтрока.ТипЗначения) Тогда
				ПредставлениеЗначений = ПредставлениеЗначений + ", ";
			КонецЕсли;
			НоваяСтрока.ТипЗначения = ПредставлениеЗначений + НоваяСтрока.ТипЗначения;
			
		Иначе
			
			НоваяСтрока.ТипЗначения = Строка(Выборка.Ссылка.ТипЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакПоляДляСортировки()
	
	Если Объект.ПорядокСортировки.Количество()
		Тогда
		Для Каждого СтрокаПорядокСортировки из Объект.ПорядокСортировки Цикл
			
			СтрокаССортировкой = СвойстваХарактеристики.НайтиСтроки(Новый Структура("Ссылка", СтрокаПорядокСортировки.Свойство));
			
			Если СтрокаССортировкой.Количество()
				Тогда
				СтрокаССортировкой[0].Сортировать = Истина;
			КонецЕсли;
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСтрокиТаблицыДопРеквизитов(Свойство)
	
	ПараметрыФормы = Новый Структура("Ключ", Свойство);
	
	ОткрытьФорму(
		"ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Форма.ФормаЭлемента", 
		ПараметрыФормы, 
		ЭтаФорма
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДопРеквизит(ВладелецНабораЭлементов)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Перед началом управления свойствами необходимо записать объект. Записать?'");
		Ответ = Неопределено;
		
		ДополнительныеПараметры = Новый Структура("ВладелецНабораЭлементов", ВладелецНабораЭлементов);
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ДобавитьДопРеквизитЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет
		);
		
	Иначе
		
		ОткрытьФормуВыбораДопРеквизита(ВладелецНабораЭлементов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДопРеквизитЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуВыбораДопРеквизита(ДополнительныеПараметры.ВладелецНабораЭлементов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораДопРеквизита(ВладелецНабораЭлементов)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоДополнительноеСведение = Ложь;
	ВыбранныеДопРеквизиты = ВыбранныеДопРеквизитыНабора(ВладелецНабораЭлементов);
	
	Отбор = Новый Структура("ЭтоДополнительноеСведение", ЭтоДополнительноеСведение);
	НаборыСвойств = Новый Массив;
	НаборыСвойств.Добавить(Объект.НаборСвойств);
	НаборыСвойств.Добавить(Объект.НаборСвойствХарактеристики);
	Отбор.Вставить("НаборСвойств", НаборыСвойств);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", ЭтоДополнительноеСведение);
	ПараметрыФормы.Вставить("ВыбранныеЗначения", ВыбранныеДопРеквизиты);
	
	Если ЗначениеЗаполнено(Объект.НаборСвойств) И ВладелецНабораЭлементов="Номенклатура" Тогда
		ПараметрыФормы.Вставить("НаборСвойств", Объект.НаборСвойств);
	ИначеЕсли ЗначениеЗаполнено(Объект.НаборСвойствХарактеристики) И ВладелецНабораЭлементов="Характеристики" Тогда
		ПараметрыФормы.Вставить("НаборСвойств", Объект.НаборСвойствХарактеристики);
	Иначе
		ПараметрыФормы.Вставить("НаборСвойств", ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_"+ВладелецНабораЭлементов));
	КонецЕсли;
	
	ВладелецФормыВыбора = ТаблицаФормыДопРеквизитов(ВладелецНабораЭлементов);
	
	ОткрытьФорму(
		"Справочник.КатегорииНоменклатуры.Форма.ФормаВыбораДополнительногоРеквизита",
		ПараметрыФормы, 
		ВладелецФормыВыбора,
		УникальныйИдентификатор
	);
	
КонецПроцедуры

// Функция возвращает массив выбранных доп. реквизитов соответсвующего набора.
//
&НаКлиенте
Функция ВыбранныеДопРеквизитыНабора(ВладелецНабораЭлементов)
	
	ДопРеквизитыНабора = Новый Массив;
	КоллекцияДопРеквизитов = КоллекцияДопРеквизитов(ЭтаФорма, ВладелецНабораЭлементов);
	
	Для каждого ЭлементКоллекции Из КоллекцияДопРеквизитов Цикл
		ДопРеквизитыНабора.Добавить(ЭлементКоллекции.Ссылка);
	КонецЦикла;
	
	Возврат ДопРеквизитыНабора;
	
КонецФункции

// Функция возвращает таблицу формы - таблицу доп. реквизитов,
// относящуюся к нужному набору.
//
&НаКлиенте
Функция ТаблицаФормыДопРеквизитов(ВладелецНабораЭлементов)
	
	Если ВладелецНабораЭлементов = "Номенклатура" Тогда
		Возврат Элементы.СвойстваНоменклатуры;
	ИначеЕсли ВладелецНабораЭлементов = "Характеристики" Тогда
		Возврат Элементы.СвойстваХарактеристики;
	КонецЕсли;
	
КонецФункции

// Функция возвращает коллекцию - таблицу доп. ревизитов,
// относящуюся к нужному набору (набору товаров и услуг, характеристик).
//
&НаКлиентеНаСервереБезКонтекста
Функция КоллекцияДопРеквизитов(Форма, ВладелецНабораЭлементов)
	
	Если ВладелецНабораЭлементов = "Номенклатура" Тогда
		Возврат Форма.СвойстваНоменклатуры;
	ИначеЕсли ВладелецНабораЭлементов = "Характеристики" Тогда
		Возврат Форма.СвойстваХарактеристики;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостью(Форма) 
	
	Форма.Элементы.Весовой.Видимость = (Форма.Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
	
	// ВЕТИС
	Форма.Элементы.ГруппаПараметровВЕТИС.Доступность = Форма.Объект.ПодконтрольнаяПродукцияВЕТИС;
	// Конец ВЕТИС
	
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьШаблонНаименованияПартии(Элемент)
	
	Элементы.ГруппаПараметровВЕТИС.Подсказка = ИнтеграцияВЕТИСУНФКлиент.СгенерироватьШаблонНаименованияПартии(Объект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеЗначенияИспользоватьХарактеристики"
		Тогда
		Элементы.ГруппаХарактеристики.Видимость = Параметр
	КонецЕсли;
		
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
&НаКлиенте
Процедура Подключаемый_НачалоВыбораРаботаСНоменклатурой(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.ВыбратьОбъектСервиса(ЭтотОбъект, Элемент, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОчисткаРаботаСНоменклатурой(Элемент, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.НажатиеОчиститьКатегорию(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеРежимОбновления(Элемент)
	
	РаботаСНоменклатуройКлиент.НажатиеРежимОбновления(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьРаботаСНоменклатурой(Элемент, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.ОткрытКарточкуОбъектаСервиса(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРаботаСНоменклатурой(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	
	Если Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НаименованиеКатегории", ЭтотОбъект.ПредставлениеОбъектаСервиса);
	ПараметрыФормы.Вставить("ИдентификаторКатегории", ЭтотОбъект.ИдентификаторОбъектаСервиса);
	ПараметрыФормы.Вставить("ВидНоменклатуры", Объект.Ссылка);
	
	ОповещениеПриЗакрытии = Новый ОписаниеОповещения("ОбработкаОповещенияЗакрытиеФормыЗаполнения", РаботаСНоменклатуройКлиент, ЭтотОбъект);
	
	ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.ЗаполнениеВидаНоменклатуры", ПараметрыФормы, ЭтотОбъект, , , , ОповещениеПриЗакрытии);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой

#КонецОбласти


