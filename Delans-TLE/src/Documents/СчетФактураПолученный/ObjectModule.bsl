#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Функция НеобходимоОтразитьСчетФактуройЗапасыВРазрезеГТД()
	
	Возврат ГрузовыеТаможенныеДекларацииСервер.НеобходимоОтразитьСчетФактуройЗапасыВРазрезеГТД(Ссылка);
	
КонецФункции

#Область ПроцедурыЗаполненияДокумента

Процедура ПроверитьДокументыОснованияСчетФактуры()
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		ЗаголовокСообщения = НСтр("ru = 'Для добавления счета-фактуры заполните реквизиты на закладке ""Дополнительно"":'");
		ТекстСообщения = "";
		
		ОбязательныеРеквизиты = Новый Структура;
		ОбязательныеРеквизиты.Вставить("СчетФактураДатаВыставления", НСтр("ru ='  - Дата выставления'"));
		ОбязательныеРеквизиты.Вставить("СчетФактураКонтрагент", НСтр("ru ='  - Контрагент'"));
		ОбязательныеРеквизиты.Вставить("СчетФактураДоговорКонтрагента", НСтр("ru ='  - Договор контрагента'"));
		
		Для каждого ЭлементаСтруктуры Из ОбязательныеРеквизиты Цикл
			
			Если ЗначениеЗаполнено(ДокументОснование[ЭлементаСтруктуры.Ключ]) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), ЗаголовокСообщения, "") + Символы.ПС + ЭлементаСтруктуры.Значение;
			
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "ДокументОснование, ВидОперации");
		Если УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(РеквизитыОснования.ДокументОснование, Истина) = Неопределено Тогда
			
			ШаблонТекст = НСтр("ru = 'Перед добавлением %1 счета-фактуры создайте счет-фактуру у документа-основания'");
			
			ЭтоИсправление = (РеквизитыОснования.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
			ОписаниеВидаОперации = ?(ЭтоИсправление, НСтр("ru = 'исправления'"), НСтр("ru = 'корректировочного'"));
			
			ВызватьИсключение СтрШаблон(ШаблонТекст, ОписаниеВидаОперации);
			
		КонецЕсли;
		
		ИсходныйДокумент = Документы.КорректировкаПоступления.ПолучитьИсправляемыйДокументПоступления(ДокументОснование);
		Если НЕ ЗначениеЗаполнено(ИсходныйДокумент) Тогда
			
			ВызватьИсключение НСтр("ru = 'Не определен исправляемый документ'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РасходСоСчета")
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РасходИзКассы") Тогда
		
		Если НЕ Документы.СчетФактураПолученный.ТребуетсяВводитьСчетФактуруНаАванс(ДокументОснование) Тогда
			ТекстИсключения = НСтр("ru = 'Для операции, которая выбрана в документе %1,
				|создание счета-фактуры не требуется.'"
			);
			
			ВызватьИсключение СтрШаблон(ТекстИсключения, СокрЛП(ДокументОснование));
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("ПризнакАванса", Истина);
		
		НайденныеСтроки = ДокументОснование.РасшифровкаПлатежа.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() < 1 Тогда
			
			ТекстИсключения = НСтр("ru = 'В документе %1 нет авансовых данных.
				|Создание счета-фактуры полученного не требуется.'");
			
			ВызватьИсключение СтрШаблон(ТекстИсключения, СокрЛП(ДокументОснование));
			
		КонецЕсли;
		
		Если ДополнительныеСвойства.Свойство("ЭтоВходящаяСуммоваяРазница") Тогда
			
			ОтсутствуетДоговорУЕ = Истина;
			Для каждого СтрокаРасшифровки Из ДокументОснование.РасшифровкаПлатежа Цикл
				
				Если СтрокаРасшифровки.Договор.РасчетыВУсловныхЕдиницах Тогда
					
					ОтсутствуетДоговорУЕ = Ложь;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ОтсутствуетДоговорУЕ Тогда
				
				ТекстИсключения = НСтр("ru = 'Счет-фактура (полученный) с видом операции Суммовые разницы формируется по договорам в У.Е.
					|В документе %1 отсутствуют договоры в условных единицах.'");
				
				ВызватьИсключение СтрШаблон(ТекстИсключения, СокрЛП(ДокументОснование));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныйСчетФактура = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(ДокументОснование, Истина);
	Если ЗначениеЗаполнено(НайденныйСчетФактура)
		И НайденныйСчетФактура.Ссылка <> Ссылка Тогда
		
		ШаблонТекст = НСтр("ru = 'Для документа ""%1"" 
			|уже введен счет-фактура ""%2"".
			|Запись еще одного документа ""Счет-фактура"" не допускается!'");
			
		ВызватьИсключение СтрШаблон(ШаблонТекст, ДокументОснование, НайденныйСчетФактура.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументыОснования(ДанныеЗаполнения)
	
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(ДанныеЗаполнения) Тогда
		
		ДокументОснование = ДанныеЗаполнения;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Ссылка") Тогда
			
			ДокументОснование = ДанныеЗаполнения.Ссылка;
			
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ЭтоВходящаяСуммоваяРазница") Тогда
			
			ЭтотОбъект.ДополнительныеСвойства.Вставить("ЭтоВходящаяСуммоваяРазница", ДанныеЗаполнения.ЭтоВходящаяСуммоваяРазница);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьДокументыОснованияСчетФактуры();
	
КонецПроцедуры

Процедура ЗаполнитьЗначениеСПроверкой(Приемник, Источник, ИмяРеквизита, ЗатиратьЗаполненные = Ложь)
	
	Если ЗатиратьЗаполненные Тогда
		
		Приемник[ИмяРеквизита] = Источник[ИмяРеквизита];
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Приемник[ИмяРеквизита]) Тогда
		
		Приемник[ИмяРеквизита] = Источник[ИмяРеквизита];
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗначенияДокументаВИтоговыеСуммы(ДанныеЗаполнения, СуммыДокументовОснований, СуммаДокументаОснования, СуммаНДСДокументаОснования)
	
	СуммыДокументовОснований.СуммаДокумента = СуммыДокументовОснований.СуммаДокумента + СуммаДокументаОснования;
	СуммыДокументовОснований.СуммаНДСДокумента = СуммыДокументовОснований.СуммаНДСДокумента + СуммаНДСДокументаОснования;
	
	Если ДанныеЗаполнения.СуммаВключаетНДС Тогда
		
		СуммыДокументовОснований.СуммаДокумента = СуммыДокументовОснований.СуммаДокумента - СуммаНДСДокументаОснования;
		
	КонецЕсли;
	
КонецПроцедуры

#Область АвансовыйОтчет

Процедура ЗаполнитьСведенияШапкиПоАвансовомуОтчету(ДанныеЗаполнения, СведенияДокументовОснований)
	
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Организация");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ВалютаДокумента");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Кратность");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Курс");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ХозяйственнаяОперация");
	
	СведенияДокументовОснований.Вставить("ДатаВходящегоДокумента", ДанныеЗаполнения.СчетФактураДатаВыставления);
	СведенияДокументовОснований.Вставить("Контрагент", ДанныеЗаполнения.СчетФактураКонтрагент);
	СведенияДокументовОснований.Вставить("Договор", ДанныеЗаполнения.СчетФактураДоговорКонтрагента);
	
КонецПроцедуры

Процедура ЗаполнитьСуммуДокументаПоАвансовомуОтчету(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований)
	
	СуммаДокументаОснования = (ДанныеЗаполнения.Запасы.Итог("Сумма") + ДанныеЗаполнения.Расходы.Итог("Сумма"));
	СуммаНДСДокументаОснования = (ДанныеЗаполнения.Запасы.Итог("СуммаНДС") + ДанныеЗаполнения.Расходы.Итог("СуммаНДС"));
	
	ДобавитьЗначенияДокументаВИтоговыеСуммы(ДанныеЗаполнения, СуммыДокументовОснований, СуммаДокументаОснования, СуммаНДСДокументаОснования);
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеРасходы

Процедура ЗаполнитьСведенияШапкиПоДополнительнымРасходам(ДанныеЗаполнения, СведенияДокументовОснований)
	
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Организация");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Контрагент");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Договор");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ВалютаДокумента");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Кратность");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Курс");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ХозяйственнаяОперация");
	
	СведенияДокументовОснований.Вставить("ДатаВходящегоДокумента", ДанныеЗаполнения.ДатаВходящегоДокумента);
	
КонецПроцедуры

Процедура ЗаполнитьСуммуДокументаПоДополнительнымРасходам(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований)
	
	СуммаДокументаОснования = ДанныеЗаполнения.Расходы.Итог("Сумма");
	СуммаНДСДокументаОснования = ДанныеЗаполнения.Расходы.Итог("СуммаНДС");
	
	ДобавитьЗначенияДокументаВИтоговыеСуммы(ДанныеЗаполнения, СуммыДокументовОснований, СуммаДокументаОснования, СуммаНДСДокументаОснования);
	
КонецПроцедуры

#КонецОбласти

#Область ДокументыКомиссии

Процедура ЗаполнитьСведенияШапкиПоДокументамКомиссии(ДанныеЗаполнения, СведенияДокументовОснований)
	
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Организация");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Контрагент");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Договор");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ВалютаДокумента");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Кратность");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Курс");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ХозяйственнаяОперация");
	
КонецПроцедуры

Процедура ЗаполнитьСуммуДокументаПоДокументамКомиссии(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований)
	
	СуммаДокументаОснования = ДанныеЗаполнения.Запасы.Итог("СуммаВознаграждения");
	СуммаНДСДокументаОснования = ДанныеЗаполнения.Запасы.Итог("СуммаНДСВознаграждения");
	
	ДобавитьЗначенияДокументаВИтоговыеСуммы(ДанныеЗаполнения, СуммыДокументовОснований, СуммаДокументаОснования, СуммаНДСДокументаОснования);
	
КонецПроцедуры

#КонецОбласти

#Область ПереработкаМатериалов

Процедура ЗаполнитьСведенияШапкиПоПереработке(ДанныеЗаполнения, СведенияДокументовОснований)
	
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Организация");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Контрагент");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Договор");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ВалютаДокумента");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Кратность");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Курс");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ХозяйственнаяОперация");
	
КонецПроцедуры

Процедура ЗаполнитьСуммуДокументаПоПереработке(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований);
	
	СуммаДокументаОснования = ДанныеЗаполнения.Сумма;
	СуммаНДСДокументаОснования = ДанныеЗаполнения.СуммаНДС;
	
	ДобавитьЗначенияДокументаВИтоговыеСуммы(ДанныеЗаполнения, СуммыДокументовОснований, СуммаДокументаОснования, СуммаНДСДокументаОснования);
	
КонецПроцедуры

#КонецОбласти

#Область Поступления

Процедура ЗаполнитьСведенияШапкиПоПоступлению(ДанныеЗаполнения, СведенияДокументовОснований)
	
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Организация");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Контрагент");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Договор");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ВалютаДокумента");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Кратность");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Курс");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ХозяйственнаяОперация");
	
КонецПроцедуры

Процедура ЗаполнитьСуммуДокументаПоПоступлению(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований)
	
	СуммаДокументаОснования = (ДанныеЗаполнения.Запасы.Итог("Сумма") + ДанныеЗаполнения.Расходы.Итог("Сумма"));
	СуммаНДСДокументаОснования = (ДанныеЗаполнения.Запасы.Итог("СуммаНДС") + ДанныеЗаполнения.Расходы.Итог("СуммаНДС"));
	
	ДобавитьЗначенияДокументаВИтоговыеСуммы(ДанныеЗаполнения, СуммыДокументовОснований, СуммаДокументаОснования, СуммаНДСДокументаОснования);
	
КонецПроцедуры

#КонецОбласти

#Область Авансы

Процедура ЗаполнитьСведенияШапкиПоАвансу(ДанныеЗаполнения, СведенияДокументовОснований)
	
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Организация");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Контрагент");
	
	ВидОперацииСчетФактуры = Перечисления.ВидыОперацийСчетФактураПолученный[?(ДополнительныеСвойства.Свойство("ЭтоВходящаяСуммоваяРазница"), "СуммовыеРазницы", "Аванс")];
	СведенияДокументовОснований.Вставить("ВидОперации", ВидОперацииСчетФактуры);
	
	СведенияДокументовОснований.Вставить("ВалютаДокумента", ДанныеЗаполнения.ВалютаДенежныхСредств);
	Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
		
		СтруктураПоВалюте	= РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", СведенияДокументовОснований.ВалютаДокумента));
		СведенияДокументовОснований.Вставить("Курс", СтруктураПоВалюте.Курс);
		СведенияДокументовОснований.Вставить("Кратность", СтруктураПоВалюте.Кратность);
		
	КонецЕсли;
	
	Если СведенияДокументовОснований.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.СуммовыеРазницы Тогда
		
		СведенияДокументовОснований.Вставить("ВалютаДокумента", Константы.НациональнаяВалюта.Получить());
		СведенияДокументовОснований.Вставить("СтавкаНДССуммовойРазницы", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДС(18));
		
	КонецЕсли;
	
	МассивСтрок = ДанныеЗаполнения.РасшифровкаПлатежа.НайтиСтроки(Новый Структура("ПризнакАванса", Истина));
	Если МассивСтрок.Количество() > 0 Тогда
		
		СведенияДокументовОснований.Вставить("Договор", МассивСтрок[0].Договор);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСуммуДокументаПоАвансу(ДанныеЗаполнения, СуммыДокументовОснований)
	
	СуммаДокументаОснования = 0;
	СуммаНДСДокументаОснования = 0;
	СтавкаНДСБезНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	
	МассивСтрок = ДанныеЗаполнения.РасшифровкаПлатежа.НайтиСтроки(Новый Структура("ПризнакАванса", Истина));
	Если МассивСтрок.Количество() > 0 Тогда
		
		Для каждого СтрокаАванса Из МассивСтрок Цикл 
			
			Если СтрокаАванса.СтавкаНДС = СтавкаНДСБезНДС Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СуммаДокументаОснования = СуммаДокументаОснования + (СтрокаАванса.СуммаПлатежа - СтрокаАванса.СуммаНДС);
			СуммаНДСДокументаОснования = СуммаНДСДокументаОснования + СтрокаАванса.СуммаНДС;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СуммыДокументовОснований.СуммаДокумента = СуммаДокументаОснования;
	СуммыДокументовОснований.СуммаНДСДокумента = СуммаНДСДокументаОснования;
	
КонецПроцедуры

Процедура ЗаполнитьРасшифровкуАванса(ДанныеЗаполнения, СуммыДокументовОснований)
	
	Авансы.Очистить();
	
	СтрокаДатаНомерДокументовОплаты = Авансы.Добавить();
	СтрокаДатаНомерДокументовОплаты.Содержание = НСтр("ru ='Предварительная оплата'");
	СтрокаДатаНомерДокументовОплаты.Сумма = СуммыДокументовОснований.СуммаДокумента + СуммыДокументовОснований.СуммаНДСДокумента;
	СтрокаДатаНомерДокументовОплаты.СуммаНДС = СуммыДокументовОснований.СуммаНДСДокумента;
	
	Если ДанныеЗаполнения.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		СтрокаДатаНомерДокументовОплаты.СтавкаНДС = ДанныеЗаполнения.РасшифровкаПлатежа[0].СтавкаНДС;
		
	Иначе
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДС(18);
		Если ЗначениеЗаполнено(СтавкаНДС) Тогда
			
			СтрокаДатаНомерДокументовОплаты.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСРасчетная(СтавкаНДС);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КорректировкаПоступления

Процедура ЗаполнитьСведенияШапкиПоКорректировкаПоступления(ДанныеЗаполнения, СведенияДокументовОснований)
	
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Организация");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Контрагент");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Договор");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ВалютаДокумента");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Кратность");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "Курс");
	ЗаполнитьЗначениеСПроверкой(СведенияДокументовОснований, ДанныеЗаполнения, "ХозяйственнаяОперация");
	
	ИмяРеквизита = ?(ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение, "Корректировка", "Поступление");
	ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный[ИмяРеквизита];
	
КонецПроцедуры

Процедура ЗаполнитьСуммуДокументаПоКорректировкаПоступления(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований)
	
	СуммаДокументаОснования = (ДанныеЗаполнения.Запасы.Итог("Сумма") + ДанныеЗаполнения.Расходы.Итог("Сумма"));
	СуммаНДСДокументаОснования = (ДанныеЗаполнения.Запасы.Итог("СуммаНДС") + ДанныеЗаполнения.Расходы.Итог("СуммаНДС"));
	
	ДобавитьЗначенияДокументаВИтоговыеСуммы(ДанныеЗаполнения, СуммыДокументовОснований, СуммаДокументаОснования, СуммаНДСДокументаОснования);
	
КонецПроцедуры

Процедура ДозаполнениеНаОснованииКорректировкиПоступления(ДанныеЗаполнения)
	
	ДокументПоступления = ДанныеЗаполнения.ДокументОснование;
	ИсходныйДокумент = Документы.КорректировкаПоступления.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления);
	
	УчитыватьИсправлениеИсходногоДокумента = Ложь;
	ПереопределятьПараметрыИсходногоДокумента = Ложь;
	
	ТипИсправляемогоДокумента = ТипЗнч(Документы.КорректировкаПоступления.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Ложь));
	КорректировкаКорректировочногоСчетаФактуры = ТипИсправляемогоДокумента = Тип("ДокументСсылка.КорректировкаПоступления") 
		И ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
		
	ДанныеСчетФактуры = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(ДанныеЗаполнения.ИсправляемыйДокументПоступления, Истина);
	Если ДанныеСчетФактуры <> Неопределено Тогда
		ИсправляемыйСчетФактура = ДанныеСчетФактуры.Ссылка;
	КонецЕсли;
	
	Если Исправление ИЛИ ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИсходныйДокумент", ИсходныйДокумент);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураПолученный.Ссылка КАК Ссылка,
		|	СчетФактураПолученный.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	СчетФактураПолученный.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	СчетФактураПолученный.Исправление КАК Исправление,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученный.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Корректировка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КорректировочныйСчетФактура,
		|	СчетФактураПолученный.НомерИсправления КАК НомерИсправления,
		|	СчетФактураПолученный.ДатаИсправления КАК ДатаИсправления,
		|	СчетФактураПолученный.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
		|	СчетФактураПолученный.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученный.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Корректировка)
		|			ТОГДА СчетФактураПолученный.НомерИсходногоДокумента
		|		ИНАЧЕ СчетФактураПолученный.НомерВходящегоДокумента
		|	КОНЕЦ КАК НомерИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученный.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактураПолученный.Корректировка)
		|			ТОГДА СчетФактураПолученный.ДатаИсходногоДокумента
		|		ИНАЧЕ СчетФактураПолученный.ДатаВходящегоДокумента
		|	КОНЕЦ КАК ДатаИсходногоДокумента
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.ДокументОснование = &ИсходныйДокумент
		|	И НЕ СчетФактураПолученный.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Если КорректировкаКорректировочногоСчетаФактуры Тогда
				
				НомерИсходногоДокумента = Выборка.НомерВходящегоДокумента;
				ДатаИсходногоДокумента  = Выборка.ДатаВходящегоДокумента;
				
				Если Выборка.Исправление Тогда
					УчитыватьИсправлениеИсходногоДокумента = Истина;
					НомерИсправленияИсходногоДокумента = Выборка.НомерИсправления;
					ДатаИсправленияИсходногоДокумента  = Выборка.ДатаИсправления;
				КонецЕсли;
				
			Иначе
				
				Если Выборка.КорректировочныйСчетФактура Тогда
					ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка;
				КонецЕсли;
				
				Если НЕ Выборка.КорректировочныйСчетФактура 
					И ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка Тогда
					НомерВходящегоДокумента = "";
					ДатаВходящегоДокумента  = "";
				Иначе
					НомерВходящегоДокумента = Выборка.НомерВходящегоДокумента;
					ДатаВходящегоДокумента  = Выборка.ДатаВходящегоДокумента;
				КонецЕсли;
				
				Если ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка Тогда
					НомерИсходногоДокумента    = Выборка.НомерИсходногоДокумента;
					ДатаИсходногоДокумента     = Выборка.ДатаИсходногоДокумента;
					Если Выборка.Исправление И НЕ Выборка.КорректировочныйСчетФактура Тогда
						НомерИсправленияИсходногоДокумента = Выборка.НомерИсправления;
						ДатаИсправленияИсходногоДокумента  = Выборка.ДатаИсправления;
						ПереопределятьПараметрыИсходногоДокумента = Истина;
					ИначеЕсли Выборка.КорректировочныйСчетФактура Тогда
						НомерИсправленияИсходногоДокумента = Выборка.НомерИсправленияИсходногоДокумента;
						ДатаИсправленияИсходногоДокумента  = Выборка.ДатаИсправленияИсходногоДокумента;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДатаИсправленияИсходногоДокумента) 
					ИЛИ ЗначениеЗаполнено(НомерИсправленияИсходногоДокумента) Тогда
					УчитыватьИсправлениеИсходногоДокумента = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КорректируемыйДокумент", ДокументПоступления);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетФактураПолученный.Ссылка КАК Ссылка,
	|	СчетФактураПолученный.Исправление КАК Исправление,
	|	СчетФактураПолученный.НомерИсправления КАК НомерИсправления,
	|	СчетФактураПолученный.ДатаИсправления КАК ДатаИсправления
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ДокументОснование = &КорректируемыйДокумент
	|	И НЕ СчетФактураПолученный.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если Выборка.Исправление Тогда
			
			Если ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка Тогда
				Если НЕ УчитыватьИсправлениеИсходногоДокумента ИЛИ ПереопределятьПараметрыИсходногоДокумента Тогда
					Если ЗначениеЗаполнено(Выборка.НомерИсправления) Тогда
						НомерИсправленияИсходногоДокумента = Выборка.НомерИсправления;
						ДатаИсправленияИсходногоДокумента  = Выборка.ДатаИсправления;
						УчитыватьИсправлениеИсходногоДокумента = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьСведения(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований)
	
	ДокументыКомиссии = Новый Массив;
	ДокументыКомиссии.Добавить(Тип("ДокументСсылка.ОтчетКомитенту"));
	ДокументыКомиссии.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
	
	ДокументыАвансов = Новый Массив;
	ДокументыАвансов.Добавить(Тип("ДокументСсылка.РасходИзКассы"));
	ДокументыАвансов.Добавить(Тип("ДокументСсылка.РасходСоСчета"));
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		
		ЗаполнитьСведенияШапкиПоПоступлению(ДанныеЗаполнения, СведенияДокументовОснований);
		ЗаполнитьСуммуДокументаПоПоступлению(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		ЗаполнитьСведенияШапкиПоАвансовомуОтчету(ДанныеЗаполнения, СведенияДокументовОснований);
		ЗаполнитьСуммуДокументаПоАвансовомуОтчету(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ДополнительныеРасходы") Тогда
		
		ЗаполнитьСведенияШапкиПоДополнительнымРасходам(ДанныеЗаполнения, СведенияДокументовОснований);
		ЗаполнитьСуммуДокументаПоДополнительнымРасходам(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетПереработчика") Тогда
		
		ЗаполнитьСведенияШапкиПоПереработке(ДанныеЗаполнения, СведенияДокументовОснований);
		ЗаполнитьСуммуДокументаПоПереработке(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований);
		
	ИначеЕсли ДокументыКомиссии.Найти(ТипЗнч(ДанныеЗаполнения)) <> Неопределено Тогда
		
		ЗаполнитьСведенияШапкиПоДокументамКомиссии(ДанныеЗаполнения, СведенияДокументовОснований);
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
			
			ЗаполнитьСуммуДокументаПоДокументамКомиссии(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований);
			
		КонецЕсли;
		
	ИначеЕсли ДокументыАвансов.Найти(ТипЗнч(ДанныеЗаполнения)) <> Неопределено Тогда
		
		ЗаполнитьСведенияШапкиПоАвансу(ДанныеЗаполнения, СведенияДокументовОснований);
		
		Если СведенияДокументовОснований.ВидОперации <> Перечисления.ВидыОперацийСчетФактураПолученный.СуммовыеРазницы Тогда
			
			ЗаполнитьСуммуДокументаПоАвансу(ДанныеЗаполнения, СуммыДокументовОснований);
			ЗаполнитьРасшифровкуАванса(ДанныеЗаполнения, СуммыДокументовОснований);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		ЗаполнитьСведенияШапкиПоКорректировкаПоступления(ДанныеЗаполнения, СведенияДокументовОснований);
		ЗаполнитьСуммуДокументаПоКорректировкаПоступления(ДанныеЗаполнения, СведенияДокументовОснований, СуммыДокументовОснований);
		ДозаполнениеНаОснованииКорректировкиПоступления(ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		// Более не поддерживается, сценарий признан избыточным. В следующих версиях УНФ у реквизита документ-основание тип будет исключен.
		// Оставлено для поддержки совместимости (смягчение перехода), предполагаем самостоятельное заполнение пользователем.
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбработкуЗаполнения()
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СведенияДокументовОснований = Новый Структура(
		"
		|Организация,
		|Контрагент, Договор,
		|ВалютаДокумента, Кратность, Курс,
		|Автор,
		|ХозяйственнаяОперация
		|"
	);
	
	СуммыДокументовОснований = Новый Структура("СуммаДокумента, СуммаНДСДокумента", 0, 0);
	
	Если НЕ ДополнительныеСвойства.Свойство("ЭтоСинхронизация")
		ИЛИ ДополнительныеСвойства.ЭтоСинхронизация = Ложь Тогда
		
		ВалидныеТипыДокументов = Новый Массив;
		ВалидныеТипыДокументов.Добавить(Тип("ДокументСсылка.ДополнительныеРасходы"));
		ВалидныеТипыДокументов.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
		ВалидныеТипыДокументов.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		ВалидныеТипыДокументов.Добавить(Тип("ДокументСсылка.РасходСоСчета"));
		
		Если ВалидныеТипыДокументов.Найти(ТипЗнч(ДокументОснование)) <> Неопределено Тогда
			
			ДатаВходящегоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДатаВходящегоДокумента");
			Если НЕ ЗначениеЗаполнено(ДатаВходящегоДокумента) Тогда
				
				ДатаВходящегоДокумента = ДокументОснование.Дата;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьСведения(ДокументОснование, СведенияДокументовОснований, СуммыДокументовОснований);
	
	СведенияДокументовОснований.Автор = Пользователи.АвторизованныйПользователь();
	
	УдалитьЗапасы.Очистить();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СведенияДокументовОснований);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СуммыДокументовОснований);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ПриКопировании объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ОчиститьДатуНомерВходящегоДокумента(ЭтотОбъект);
	
КонецПроцедуры // ПриКопировании()

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		
		ЗаполнитьДокументыОснования(ДанныеЗаполнения);
		ВыполнитьОбработкуЗаполнения();
		
	Иначе
		
		Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// В обработчике события ОбработкаПроверкиЗаполнения документа выполняется
// копирование и обнуление проверяемых реквизитов для исключения стандартной
// проверки заполнения платформой и последующей проверки средствами встроенного языка.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Исправление Тогда
		
		ПроверяемыеРеквизиты.Добавить("НомерИсправления");
		ПроверяемыеРеквизиты.Добавить("ДатаИсправления");
		
	Иначе
		
		ПроверяемыеРеквизиты.Добавить("НомерВходящегоДокумента");
		ПроверяемыеРеквизиты.Добавить("ДатаВходящегоДокумента");
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчетГТД") Тогда
		
		Для каждого СтрокаТаблицыЗапасов Из УдалитьЗапасы Цикл
			
			Если НЕ ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Аванс
				И ЗначениеЗаполнено(СтрокаТаблицыЗапасов.НомерГТД)
				И (НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапасов.СтранаПроисхождения) 
					ИЛИ СтрокаТаблицыЗапасов.СтранаПроисхождения = Справочники.СтраныМира.Россия) Тогда
			
				ТекстОшибки = НСтр("ru = 'В строке [%НомерСтрокиСОшибкой%] не верно указана страна происхождения'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтрокиСОшибкой%", СокрЛП(СтрокаТаблицыЗапасов.НомерСтроки));
			
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, 
				ТекстОшибки,
				"Запасы",
				СтрокаТаблицыЗапасов.НомерСтроки,
				"СтранаПроисхождения",
				Отказ);
				
			КонецЕсли;
			
			Если НЕ ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Аванс
				И (ЗначениеЗаполнено(СтрокаТаблицыЗапасов.СтранаПроисхождения)
					И НЕ СтрокаТаблицыЗапасов.СтранаПроисхождения = Справочники.СтраныМира.Россия)
				И НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапасов.НомерГТД) Тогда
				
				ТекстОшибки = НСтр("ru = 'В строке [%НомерСтрокиСОшибкой%] не указан номер ГТД'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтрокиСОшибкой%", СокрЛП(СтрокаТаблицыЗапасов.НомерСтроки));
				
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, 
				ТекстОшибки,
				"Запасы",
				СтрокаТаблицыЗапасов.НомерСтроки,
				"НомерГТД",
				Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.КорректировкаАванса Тогда
		
		ИмяСписка = НСтр("ru = 'Расшифровка аванса'");
		Для Каждого СтрокаАвансы Из Авансы Цикл
			
			ИндексСтроки = Формат(СтрокаАвансы.НомерСтроки - 1, "ЧН=0; ЧГ=");
			Если СтрокаАвансы.СуммаДоКорректировки > СтрокаАвансы.Сумма Тогда
				
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", НСтр("ru = 'Сумма'"), СтрокаАвансы.НомерСтроки, ИмяСписка);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, СтрШаблон("Авансы[%1].Сумма", ИндексСтроки), "Объект", Отказ);
				
			КонецЕсли;
			
			Если СтрокаАвансы.СуммаНДСДоКорректировки > СтрокаАвансы.СуммаНДС Тогда
				
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", НСтр("ru = 'Сумма НДС'"), СтрокаАвансы.НомерСтроки, ИмяСписка);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, СтрШаблон("Авансы[%1].СуммаНДС", ИндексСтроки), "Объект", Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Авансы.КорректируемыйСчетФактура");
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Авансы.СуммаДоКорректировки");
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Авансы.СтавкаНДСДоКорректировки");
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Авансы.СуммаНДСДоКорректировки");
		
	КонецЕсли;
	
	// Документ основание должен быть проведен
	Если ЗначениеЗаполнено(ДокументОснование)
		И НЕ ДокументОснование.Проведен Тогда
		
		ТекстОшибки = НСтр("ru = 'Документ-основание %ПредставлениеДокументаОснования% не проведен. Проведение счет фактуры не возможно.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПредставлениеДокументаОснования%", """" + ТипЗнч(ДокументОснование) + " №" + ДокументОснование.Номер + " от " + ДокументОснование.Дата + """");
		
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстОшибки, , , , Отказ);
		
	КонецЕсли;
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
	КонецЕсли;
	
	ИменаТабличныхЧастей = Новый Массив;
	ИменаТабличныхЧастей.Добавить("УдалитьЗапасы");
	
	ГрузовыеТаможенныеДекларацииСервер.ПриОбработкеПроверкиЗаполнения(Отказ, ЭтотОбъект, ИменаТабличныхЧастей);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	// Проверка на уникальность счета-фактуры полученной
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		
		Если ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		
			НайденныйСчетФактура = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(ДокументОснование, Истина);
			Если ЗначениеЗаполнено(НайденныйСчетФактура) И НайденныйСчетФактура.Ссылка <> Ссылка Тогда
			
				ТекстСообщения = НСтр("ru = 'Для документа ""%Ссылка%"" 
										|уже введен счет-фактура ""%СчетФактура%"". 
										|Запись еще одного документа ""Счет-фактура (полученный)"" не допускается!'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ДокументОснование);						
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СчетФактура%", НайденныйСчетФактура.Ссылка);
				ПолеСообщения = "Объект.ДокументОснование";
				
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,,ПолеСообщения, Отказ);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент)
		И НЕ Контрагент.ВестиРасчетыПоДоговорам
		И НЕ ЗначениеЗаполнено(Договор) Тогда
		
		Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если НеобходимоОтразитьСчетФактуройЗапасыВРазрезеГТД() Тогда
		
		// Инициализация дополнительных свойств для проведения документа.
		УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
		
		// Инициализация данных документа.
		Документы.СчетФактураПолученный.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
		
		// Подготовка наборов записей.
		УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
		
		// Отражение в разделах учета.
		УправлениеНебольшойФирмойСервер.ОтразитьЗапасыВРазрезеГТД(ДополнительныеСвойства, Движения, Отказ);
		
		// Запись наборов записей.
		УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
		
		// Контроль
		Документы.СчетФактураПолученный.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);    
		
		ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей.
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль
	Документы.СчетФактураПолученный.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ (ПолучитьФункциональнуюОпцию("ПередачаТоваровНаКомиссию")
		ИЛИ ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользуетсяОСНО")) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Константы.ФункциональнаяОпцияИспользоватьСчетаФактурыВходящие.Установить(Истина);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли