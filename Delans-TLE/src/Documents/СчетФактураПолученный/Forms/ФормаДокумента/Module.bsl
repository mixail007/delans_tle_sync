
#Область Служебные

&НаКлиенте
Процедура ЗаглавиеДокументовОснований()
	
	ПредставлениеДокументаОснования = ?(ЗначениеЗаполнено(Объект.ДокументОснование), Строка(Объект.ДокументОснование), НСтр("ru ='Выбор'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОснованиеСчетФактуры()
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Ссылка",			Объект.Ссылка);
	ПараметрыПодбора.Вставить("ВидОперации",	Объект.ВидОперации);
	ПараметрыПодбора.Вставить("Организация",	Объект.Организация);
	ПараметрыПодбора.Вставить("Контрагент",		Объект.Контрагент);
	ПараметрыПодбора.Вставить("Договор",		Объект.Договор);
	ПараметрыПодбора.Вставить("ПоступленияДоступны",КэшЗначений.ПоступленияДоступны);
	ПараметрыПодбора.Вставить("КомиссияДоступна",КэшЗначений.КомиссияДоступна);
	ПараметрыПодбора.Вставить("АвансыДоступны",	КэшЗначений.АвансыДоступны);
	ПараметрыПодбора.Вставить("КорректировкиДоступны", КэшЗначений.КорректировкиДоступны);
	ПараметрыПодбора.Вставить("Валюта",			Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("Исправление",	Объект.Исправление);
	ПараметрыПодбора.Вставить("НаВозврат",		НаВозврат);
	ПараметрыПодбора.Вставить("ОснованиеСФ",	Объект.ДокументОснование);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьСписокДокументовОснованийЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.СчетФактураПолученный.Форма.ФормаПодбораДокументовОснований", ПараметрыПодбора, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

// Выполняет действия при изменении договора контрагента.
//
&НаКлиенте
Процедура ОбработатьИзменениеДоговора()
	
	ДоговорПередИзменением	= КэшЗначений.Договор;
	КэшЗначений.Договор		= Объект.Договор;
		
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(Объект.Дата, Объект.Договор);
		
		ВалютаРасчетовПередИзменением = Объект.ВалютаДокумента;
		ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда 
			
			Объект.Курс		= ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0,		1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
			Объект.Кратность= ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0,	1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
			
		КонецЕсли;
		
		Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый
		ИЛИ Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой = Строка(Объект.Кратность) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(Объект.Курс) + " " + СокрЛП(КэшЗначений.НациональнаяВалюта);
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(КурсНовый) + " " + СокрЛП(КэшЗначений.НациональнаяВалюта);
		
		ТекстВопроса = НСтр("ru = 'На дату документа у валюты документа (" + КурсВалютыСтрокой + ") был задан курс.
									|Установить курс документа (" + КурсНовыйВалютыСтрокой + ") в соответствии с курсом валюты?'");
									
		НовыйКурсКратность = Новый Структура;
		НовыйКурсКратность.Вставить("КурсНовый", КурсНовый);
		НовыйКурсКратность.Вставить("КратностьНовый", КратностьНовый);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьУстановкиНовогоКурсаИКратности", ЭтотОбъект, НовыйКурсКратность);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьКурсКратностьВалютыДокумента()

&НаКлиенте
Функция ОбновитьПодвалФормы()
	
	ИтогВсего = Объект.СуммаДокумента + Объект.СуммаНДСДокумента;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоДокументамОснованиямНаКлиенте(ДокументОснованиеВХранилище)
	
	ЗаполнитьПоДокументуОснованию(ДокументОснованиеВХранилище);
	ЗаглавиеДокументовОснований();
	ОбновитьПодвалФормы();
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением, ВалютаДокумента)
	
	РазностьДат = УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаНовая, Новый Структура("Валюта", ВалютаДокумента));
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Получает структуру параметров формы выбора договора контрагента.
//
&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор, ВидОперации)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Получает договор по умолчанить в зависимости от способа ведения расчетов.
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Дата, Договор)
		
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		Договор.ВалютаРасчетов
	);	
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
		"РасчетыВУсловныхЕдиницах",
		Договор.РасчетыВУсловныхЕдиницах
	);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНДС",
		Ложь
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаСервере
Процедура ЗаполнитьСчетаФактурыПокупателей(АдресРасшифровкиПокупателей)
	
	ТаблицаРасшифровкаСчетовФактурПокупателей = ПолучитьИзВременногоХранилища(АдресРасшифровкиПокупателей);
	
	Объект.СчетаФактурыВыданныеПокупателям.Очистить();
	Объект.СчетаФактурыВыданныеПокупателям.Загрузить(ТаблицаРасшифровкаСчетовФактурПокупателей);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасшифровкуАванса(АдресРасшифровкиАвансаВХранилище)
	
	ТаблицаРасшифровкаАванса = ПолучитьИзВременногоХранилища(АдресРасшифровкиАвансаВХранилище);
	
	Объект.Авансы.Очистить();
	Объект.Авансы.Загрузить(ТаблицаРасшифровкаАванса);
	
	Объект.СуммаНДСДокумента = Объект.Авансы.Итог("СуммаНДС") - Объект.Авансы.Итог("СуммаНДСДоКорректировки");
	Объект.СуммаДокумента = Объект.Авансы.Итог("Сумма") - Объект.Авансы.Итог("СуммаДоКорректировки") - Объект.СуммаНДСДокумента;
	
	ИтогВсего = Объект.СуммаНДСДокумента + Объект.СуммаДокумента;
	
КонецПроцедуры

// Процедура устанавливает видимость договора в зависимости от установленного параметра контрагенту.
//
&НаСервере
Процедура УстановитьСвойстваРеквизитовФормы()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Договор", "Видимость", Объект.Контрагент.ВестиРасчетыПоДоговорам);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВходящийНомерДата", "Видимость", Не Объект.Исправление);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИсправлениеНомерДата", "Видимость", Объект.Исправление);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаИсправляемый", "Видимость", Объект.Исправление ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасшифровкаАванса", "Видимость", Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Аванс ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.КорректировкаАванса);
	
	ПоказатьРасшифровкуПокупателейКомиссионногоТовара = ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитенту") И (НЕ ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) ИЛИ Объект.ДатаВходящегоДокумента >= '20150101');
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияПокупателиКомиссионногоТовара", "Видимость", ПоказатьРасшифровкуПокупателейКомиссионногоТовара);
	
	Если ЗначениеЗаполнено(Объект.НомерВходящегоДокумента) Тогда
		
		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 от %2'"),
			Объект.НомерВходящегоДокумента, Формат(Объект.ДатаВходящегоДокумента,"ДЛФ=Д"));
		
	ИначеЕсли ЗначениеЗаполнено(Объект.НомерИсходногоДокумента) Тогда
		
		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 от %2'"),
			Объект.НомерИсходногоДокумента, Формат(Объект.ДатаИсходногоДокумента,"ДЛФ=Д"));
		
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.СуммовыеРазницы Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаДокумента", "ТолькоПросмотр", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаНДСДокумента", "ТолькоПросмотр", Ложь);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтавкаНДССуммовойРазницы", "Видимость", Ложь);
		
	КонецЕсли;
	
	НадписьСчетФактура = ТекстНадписи;
	
КонецПроцедуры

&НаСервере
Процедура РассчетатьСуммыДокумента()
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДССуммовойРазницы);
	
	Объект.СуммаНДСДокумента = ОКР(Объект.СуммаДокумента * СтавкаНДС / 100, 2);
	ИтогВсего = Объект.СуммаДокумента + Объект.СуммаНДСДокумента;
	
КонецПроцедуры

// Процедура вызывает обработку заполнения документа по основанию.
//
&НаСервере
Процедура ЗаполнитьПоДокументуОснованию(НовыйДокументОснование)
	
	Если Объект.ДокументОснование = НовыйДокументОснование Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Объект.ДокументОснование = НовыйДокументОснование;
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(Объект.ДокументОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры // ЗаполнитьПоДокументу()

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Объект.Организация, Объект.ВидОперации);
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"Договор",
		ДоговорПоУмолчанию
	);
		
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорПоУмолчанию.ВалютаРасчетов
	);
	
	УстановитьСвойстваРеквизитовФормы();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

&НаСервере
Функция ПоместитьВХранилищеТабличнуюЧасть(ИмяТабличнойЧасти)
	
	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВидыИспользуемыхДокументов()
	
	КэшЗначений.Вставить("ПоступленияДоступны",		Ложь);
	КэшЗначений.Вставить("КомиссияДоступна",		Ложь);
	КэшЗначений.Вставить("АвансыДоступны",			Ложь);
	КэшЗначений.Вставить("КорректировкиДоступны",	Ложь);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Поступление Тогда
		
		ТипыКомиссия = Новый Массив(2);
		ТипыКомиссия[0] = Тип("ДокументСсылка.ОтчетКомиссионера");
		ТипыКомиссия[1] = Тип("ДокументСсылка.ОтчетКомитенту");
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование)
			И ТипыКомиссия.Найти(ТипЗнч(Объект.ДокументОснование)) <> Неопределено Тогда
			
			КэшЗначений.КомиссияДоступна = Истина;
			
		Иначе
			
			КэшЗначений.ПоступленияДоступны = Истина;
			
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Аванс
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.КорректировкаАванса Тогда
		
		КэшЗначений.АвансыДоступны = Истина;
		Возврат;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка Тогда
		
		КэшЗначений.КорректировкиДоступны = Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Форма

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УправлениеНебольшойФирмойСервер.УстановитьОтображаниеПодменюПечати(Элементы.ПодменюПечать);
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("Контрагент", Объект.Контрагент);
	КэшЗначений.Вставить("Договор", Объект.Договор);
	КэшЗначений.Вставить("НациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
	
	КэшЗначений.Вставить("НаВозврат", Ложь);
	Параметры.Свойство("НаВозврат", КэшЗначений.НаВозврат);
	
	УстановитьСвойстваРеквизитовФормы();
	
	// ПодборНоменклатурыВДокументах
	ПодборНоменклатурыВДокументах.НазначитьФормуПодбора(ПараметрыОткрытияПодбора, Объект.Ссылка.Метаданные().Имя, "Запасы");
	// Конец ПодборНоменклатурыВДокументах
	
	ОбменСGoogle.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// ЭДО
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭДО
	
	ЗаполнитьВидыИспользуемыхДокументов();
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	// ЭДО
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭДО
	
	ЗаглавиеДокументовОснований();
	ОбновитьПодвалФормы();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события ОбработкаВыбора.
//
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаВыбора" Тогда
		
		Для каждого ИдентификаторСтроки Из Элементы.Запасы.ВыделенныеСтроки Цикл
			
			СтрокаЗапасы = Объект.Запасы.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если СтрокаЗапасы = Неопределено Тогда
				Продолжить;
			Иначе
				СтрокаЗапасы.НомерГТД = ВыбранноеЗначение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события ОбработкаОповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		
		ЭтотОбъект.Прочитать();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Контрагент"
		И ЗначениеЗаполнено(Параметр)
		И Объект.Контрагент = Параметр Тогда
		
		УстановитьСвойстваРеквизитовФормы();
		
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// ЭДО
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭДО

КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Проведение"+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

// Процедура обработчик события ПередЗаписьюНаСервере.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТекстСообщения = "";
		Справочники.ДоговорыКонтрагентов.ПроверитьСоответствиеДоговораУсловиямДокумента(
			ТекстСообщения,
			Объект.Договор,
			Объект.Ссылка,
			Объект.Организация,
			Объект.Контрагент,
			Отказ,
			Объект.ВидОперации);
		
		Если ТекстСообщения <> "" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ?(Отказ, НСтр("ru = 'Документ не проведен! '") + ТекстСообщения, ТекстСообщения);
			
			Если Отказ Тогда
				Сообщение.ПутьКДанным = "Объект";
				Сообщение.Поле = "Договор";
			КонецЕсли;
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбменСGoogle.УвеличитьЗначениеСчетчикаПодсказок(ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// ЭДО
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭДО
	
	//Обсуждения
	ОбсужденияСервер.ПослеЗаписиНаСервере(ТекущийОбъект);	
	// Конец Обсуждения
	
КонецПроцедуры // ПослеЗаписиНаСервере()

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ДатаВПредставление			= ?(ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента), Объект.ДатаВходящегоДокумента, Объект.Дата);
	ПредставлениеСчетФактуры	= УправлениеНебольшойФирмойКлиент.ПредставлениеСчетаФактуры(ДатаВПредставление, Объект.НомерВходящегоДокумента);
	
	МассивОснований = Новый Массив(1);
	МассивОснований.Добавить(Объект.ДокументОснование);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ПредставлениеСчетФактуры", ПредставлениеСчетФактуры);
	ПараметрыОповещения.Вставить("ДокументыОснования", МассивОснований);
	
	Оповестить("ОбновлениеТекстаПроСчетФактуруПолученный", ПараметрыОповещения, Объект.Ссылка);
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры // ПриЗакрытии()

#КонецОбласти

#Область Библиотеки

#Область БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ЭДО

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеЭДОНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Реквизиты

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение( , Объект.ИсправляемыйСчетФактура);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением, Объект.ВалютаДокумента);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
			ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Организация.
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	// Обработка события изменения организации.
	Объект.Номер = "";
	
	Объект.Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
// Выполняет очистку договора и табличной части.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = КэшЗначений.Контрагент;
	КэшЗначений.Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент);
		Объект.Договор = СтруктураДанные.Договор;
		
		ОбработатьИзменениеДоговора();
		
	Иначе
		
		Объект.Договор = КэшЗначений.Договор; // Восстанавливаем автоматически очищеный договор.
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Договор.
// Заполняет реквизиты формы курс и кратность.
//
&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры // ДоговорПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода Договор.
//
&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор, Объект.ВидОперации);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		ПоказатьЗначение(Неопределено, Объект.ДокументОснование);
		
	Иначе
		
		ИзменитьОснованиеСчетФактуры();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВходящегоДокументаПриИзменении(Элемент)
	
	УстановитьСвойстваРеквизитовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

#Область ОбменСGoogle

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_ОбработкаВыбора(
	ЭтотОбъект,
	Элемент,
	ВыбранноеЗначение,
	СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_АвтоПодбор(
	ЭтотОбъект,
	Элемент,
	Текст,
	ДанныеВыбора,
	Параметры,
	Ожидание,
	СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура ОткрытьСписокДокументовОснований(Команда)
	
	ИзменитьОснованиеСчетФактуры()
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокДокументовОснованийЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыбора) = Тип("Структура")
		И РезультатВыбора.ВыполненаКоманда = КодВозвратаДиалога.OK Тогда
		
		ЗаполнитьПоДокументамОснованиямНаКлиенте(РезультатВыбора.Документ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПокупателиНажатие(Элемент)
	
	АдресРасшифровкиПокупателей = ПоместитьВХранилищеТабличнуюЧасть("СчетаФактурыВыданныеПокупателям");
	
	ПараметрыОткрываемойФормы = Новый Структура;
	ПараметрыОткрываемойФормы.Вставить("Ссылка",			Объект.Ссылка);
	ПараметрыОткрываемойФормы.Вставить("Организация",		Объект.Организация);
	ПараметрыОткрываемойФормы.Вставить("СуммаНДСДокумента",	Объект.СуммаНДСДокумента);
	ПараметрыОткрываемойФормы.Вставить("СуммаДокумента",	Объект.СуммаДокумента);
	ПараметрыОткрываемойФормы.Вставить("АдресРасшифровкиПокупателей", АдресРасшифровкиПокупателей);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ТаблицаПокупателиЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.СчетФактураПолученный.Форма.ФормаПокупателиКомиссионногоТовара", ПараметрыОткрываемойФормы, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПокупателиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.ВыполненаКоманда = КодВозвратаДиалога.OK Тогда
		
		ЗаполнитьСчетаФактурыПокупателей(Результат.АдресРасшифровкиПокупателей);
		
		Результат.Свойство("СуммаДокумента",	Объект.СуммаДокумента);
		Результат.Свойство("СуммаНДСДокумента",	Объект.СуммаНДСДокумента);
		
		ИтогВсего = Объект.СуммаДокумента + Объект.СуммаНДСДокумента;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаАвансаНажатие(Элемент)
	
	АдресРасшифровки = ПоместитьВХранилищеТабличнуюЧасть("Авансы");
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Ссылка",			Объект.Ссылка);
	ПараметрыПодбора.Вставить("Дата",			Объект.Дата);
	ПараметрыПодбора.Вставить("ВидОперации",	Объект.ВидОперации);
	ПараметрыПодбора.Вставить("Организация",	Объект.Организация);
	ПараметрыПодбора.Вставить("Контрагент",		Объект.Контрагент);
	ПараметрыПодбора.Вставить("Договор",		Объект.Договор);
	ПараметрыПодбора.Вставить("Валюта",			Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("НаВозврат",		НаВозврат);
	ПараметрыПодбора.Вставить("СуммаНДС",		Объект.СуммаНДСДокумента);
	ПараметрыПодбора.Вставить("Сумма",			Объект.СуммаДокумента);
	ПараметрыПодбора.Вставить("АдресРасшифровки",АдресРасшифровки);
	ПараметрыПодбора.Вставить("ДопустимаКорректировка", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РасшифровкаАвансаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.СчетФактураПолученный.Форма.ФормаРасшифровкаАванса", ПараметрыПодбора, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаАвансаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
		
		Если РезультатВыбора.ВыполненаКоманда = КодВозвратаДиалога.OK Тогда
			
			Модифицированность = Истина;
			ЗаполнитьРасшифровкуАванса(РезультатВыбора.АдресРасшифровки);
			
			ИмяПредопределенного = "Перечисление.ВидыОперацийСчетФактураПолученный." + ?(РезультатВыбора.ЭтоКорректировкаАвансаНДС20 = Истина, "КорректировкаАванса", "Аванс");
			НовыйВидОперации = ПредопределенноеЗначение(ИмяПредопределенного);
			Если Объект.ВидОперации <> НовыйВидОперации Тогда
				
				Объект.ВидОперации = НовыйВидОперации;
				ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДССуммовойРазницыПриИзменении(Элемент)
	
	РассчетатьСуммыДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	РассчетатьСуммыДокумента();
	
КонецПроцедуры

#КонецОбласти
