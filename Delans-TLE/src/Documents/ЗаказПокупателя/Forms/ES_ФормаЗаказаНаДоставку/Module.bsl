
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
// Процедура обрабатывает измение реквизитов документов Вид цен и Валюта расчетов
//
Процедура ОбработатьИзменениеВидаЦенИВалютыРасчетов(ПараметрыДокумента)
	
	ДоговорПередИзменением = ПараметрыДокумента.ДоговорПередИзменением;
	ВалютаРасчетовПередИзменением = ПараметрыДокумента.ВалютаРасчетовПередИзменением;
	ДанныеДоговора = ПараметрыДокумента.ДанныеДоговора;
	ВопросВидЦен = ПараметрыДокумента.ВопросВидЦен;
	ОткрытьФормуЦеныИВалюты = ПараметрыДокумента.ОткрытьФормуЦеныИВалюты;
	ИзменилсяВидЦен = ПараметрыДокумента.ИзменилсяВидЦен;
	ИзменилсяВидСкидки = ПараметрыДокумента.ИзменилсяВидСкидки;
	Если ПараметрыДокумента.Свойство("ОчиститьДисконтнуюКарту") Тогда
		ОчиститьДисконтнуюКарту = ПараметрыДокумента.ОчиститьДисконтнуюКарту;
	Иначе
		ОчиститьДисконтнуюКарту = Ложь;
	КонецЕсли;
	ПересчетНеобходимПоЗапасам = ПараметрыДокумента.ПересчетНеобходимПоЗапасам;
	ПересчетНеобходимПоРаботам = ПараметрыДокумента.ПересчетНеобходимПоРаботам;
	
	Если НЕ ДанныеДоговора.СуммаВключаетНДС = Неопределено Тогда
		
		Объект.СуммаВключаетНДС = ДанныеДоговора.СуммаВключаетНДС;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		
		Объект.Курс      = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс);
		Объект.Кратность = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность);
		
	КонецЕсли;
	
	Если ИзменилсяВидЦен Тогда
		
		Объект.ВидЦен = ДанныеДоговора.ВидЦен;
		
	КонецЕсли; 
	
	Если ИзменилсяВидСкидки Тогда
		
		Объект.ВидСкидкиНаценки = ДанныеДоговора.ВидСкидкиНаценки;
		
	КонецЕсли;
	
	Если ОчиститьДисконтнуюКарту Тогда
		
		Объект.ДисконтнаяКарта = ПредопределенноеЗначение("Справочник.ДисконтныеКарты.ПустаяСсылка");
		Объект.ПроцентСкидкиПоДисконтнойКарте = 0;
		
	КонецЕсли;
	
	Если Объект.ВалютаДокумента <> ДанныеДоговора.ВалютаРасчетов Тогда
		
		Объект.БанковскийСчет = Неопределено;
		
	КонецЕсли;
	Объект.ВалютаДокумента = ДанныеДоговора.ВалютаРасчетов;
	
	Если ОткрытьФормуЦеныИВалюты Тогда
		
		ТекстПредупреждения = "";
		Если ИзменилсяВидЦен ИЛИ ИзменилсяВидСкидки Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Договор с контрагентом предусматривает условия цен и скидок, 
			|отличные от установленных в документе! 
			|Возможно, необходимо перезаполнить цены.'") + Символы.ПС + Символы.ПС;
			
		КонецЕсли;
		
		ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом! 
		|Необходимо проверить валюту документа!'");
		
		ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина, (ИзменилсяВидЦен ИЛИ ИзменилсяВидСкидки), ТекстПредупреждения);
		
	ИначеЕсли ВопросВидЦен Тогда
		
		СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте",
		Объект.ВидЦен,
		Объект.ВидСкидкиНаценки,
		Объект.ВалютаДокумента,
		ВалютаРасчетов,
		Объект.Курс,
		КурсНациональнаяВалюта,
		Объект.СуммаВключаетНДС,
		УчетВалютныхОпераций,
		Объект.НалогообложениеНДС,
		Объект.ДисконтнаяКарта,
		Объект.ПроцентСкидкиПоДисконтнойКарте);
		
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
		Если (ПересчетНеобходимПоЗапасам И Объект.Запасы.Количество() > 0)
			ИЛИ (ПересчетНеобходимПоРаботам И Объект.Работы.Количество() > 0) Тогда
			
			ТекстВопроса = НСтр("ru = 'Договор с контрагентом предусматривает условия цен и скидок, отличные от установленных в документе! 
			|Пересчитать документ в соответствии с договором?'");
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора", ЭтотОбъект, ПараметрыДокумента);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	Иначе
		
		СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте",
		Объект.ВидЦен,
		Объект.ВидСкидкиНаценки,
		Объект.ВалютаДокумента,
		ВалютаРасчетов,
		Объект.Курс,
		КурсНациональнаяВалюта,
		Объект.СуммаВключаетНДС,
		УчетВалютныхОпераций,
		Объект.НалогообложениеНДС,
		Объект.ДисконтнаяКарта,
		Объект.ПроцентСкидкиПоДисконтнойКарте);
		
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеВидаЦенИВалютыРасчетов()

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением, ВалютаРасчетов)
	
	РазностьДат = УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", ВалютаРасчетов));
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
	"РазностьДат",
	РазностьДат
	);
	СтруктураДанные.Вставить(
	"ВалютаКурсКратность",
	ВалютаКурсКратность
	);
	
	ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Получает набор данных с сервера.
//
&НаСервере
Функция ПолучитьДанныеОрганизацияПриИзменении()
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация));
	СтруктураДанные.Вставить("БанковскийСчет", Объект.Организация.БанковскийСчетПоУмолчанию);
	СтруктураДанные.Вставить("БанковскийСчетВалютаДенежныхСредств", Объект.Организация.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств);
	
	ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	//ЭР Несторук С.И. 25.09.2017 16:48:55 {
	ЕдИзмеренияШтуки = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");//Шт
	//}ЭР Несторук С.И.
	СтруктураДанные.Вставить("ЕдиницаИзмерения", ?(ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ЕдиницаИзмерения),СтруктураДанные.Номенклатура.ЕдиницаИзмерения,ЕдИзмеренияШтуки));
	
	СтруктураДанные.Вставить("ЭтоУслуга", СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	СтруктураДанные.Вставить("ЭтоЗапас", СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
	
	Если СтруктураДанные.Свойство("НормаВремени") Тогда		
		СтруктураДанные.НормаВремени = УправлениеНебольшойФирмойСервер.ПолучитьНормуВремениРаботы(СтруктураДанные);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС") 
		И НЕ СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ВидСтавкиНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", ES_ОбщегоНазначения.ПолучитьСтавкуНДСНоменклатуры(СтруктураДанные.Номенклатура));
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию));
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("Характеристика") Тогда
		СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
	Иначе
		СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура));
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		КонецЕсли;
		
		Если СтруктураДанные.Свойство("ВидРабот") Тогда
			
			Если СтруктураДанные.Номенклатура.ФиксированнаяСтоимость Тогда
				
				Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
				СтруктураДанные.Вставить("Цена", Цена);
				
			Иначе
				
				СтруктураДанные.Номенклатура = СтруктураДанные.ВидРабот;
				СтруктураДанные.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
				СтруктураДанные.Вставить("Цена", Цена);
				
			КонецЕсли;
			
		Иначе
			
			Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
			СтруктураДанные.Вставить("Цена", Цена);
			
		КонецЕсли;
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	Иначе
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ПроцентСкидкиПоДисконтнойКарте") 
		И ЗначениеЗаполнено(СтруктураДанные.ДисконтнаяКарта) Тогда
		ТекПроцент = СтруктураДанные.ПроцентСкидкиНаценки;
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", ТекПроцент + СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Получает набор данных с сервера для процедуры ХарактеристикаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", 1);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		КонецЕсли;
		
		Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
	
	Если СтруктураДанные.Свойство("НормаВремени") Тогда
		СтруктураДанные.НормаВремени = УправлениеНебольшойФирмойСервер.ПолучитьНормуВремениРаботы(СтруктураДанные);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Дата, ВалютаДокумента, Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация, Объект.ВидОперации);
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
	"Договор",
	ДоговорПоУмолчанию
	);
	
	СтруктураДанные.Вставить(
	"ВалютаРасчетов",
	ДоговорПоУмолчанию.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
	"ВалютаРасчетовКурсКратность",
	РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ДоговорПоУмолчанию.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
	"РасчетыВУсловныхЕдиницах",
	ДоговорПоУмолчанию.РасчетыВУсловныхЕдиницах
	);
	
	СтруктураДанные.Вставить(
	"ВидСкидкиНаценки",
	ДоговорПоУмолчанию.ВидСкидкиНаценки
	);
	
	СтруктураДанные.Вставить(
	"ВидЦен",
	ДоговорПоУмолчанию.ВидЦен
	);
	
	СтруктураДанные.Вставить(
	"СуммаВключаетНДС",
	?(ЗначениеЗаполнено(ДоговорПоУмолчанию.ВидЦен), ДоговорПоУмолчанию.ВидЦен.ЦенаВключаетНДС, Неопределено)
	);
	
	УстановитьВидимостьДоговора();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Дата, ВалютаДокумента, Договор)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
	"ВалютаРасчетов",
	Договор.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
	"ВалютаРасчетовКурсКратность",
	РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
	"ВидЦен",
	Договор.ВидЦен
	);
	
	СтруктураДанные.Вставить(
	"ВидСкидкиНаценки",
	Договор.ВидСкидкиНаценки
	);
	
	СтруктураДанные.Вставить(
	"РасчетыВУсловныхЕдиницах",
	Договор.РасчетыВУсловныхЕдиницах
	);
	
	СтруктураДанные.Вставить(
	"СуммаВключаетНДС",
	?(ЗначениеЗаполнено(Договор.ВидЦен), Договор.ВидЦен.ЦенаВключаетНДС, Неопределено)
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаСервереБезКонтекста
// Получает срок оплаты по договору.
//
Функция ПолучитьСрокОплатыПокупателя(Договор)
	
	Возврат Договор.СрокОплатыПокупателя;
	
КонецФункции // ПолучитьСрокОплатыПокупателя()

&НаСервере
// Процедура заполняет Ставку НДС в табличной части по системе налогообложения
// организации.
// 
Процедура ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС()
	
	НалогообложениеПередИзменением = Объект.НалогообложениеНДС;
	Объект.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Объект.Организация,, Объект.Дата);
	//EFSOL_oks_kry_21.04.2015 10:52:34_BEGIN
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
		Объект.НДСВключатьВСтоимость = Ложь;
		Элементы.ЗапасыИтогСуммаНДС.Видимость = Ложь;
	Иначе
		Объект.НДСВключатьВСтоимость = Истина;
	КонецЕсли; 
	//EFSOL_oks_kry_21.04.2015 10:52:34_END
	
	Если НЕ НалогообложениеПередИзменением = Объект.НалогообложениеНДС Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаСервере
// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию);
			КонецЕсли;
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
			СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
			СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию);
			КонецЕсли;	
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
			СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
			СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;
		
	Иначе
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
		
		Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
			
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
	СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
	СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // ПересчитатьСуммыДокумента() 

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти = "Запасы", СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	КонецЕсли;
	
	// Сумма.
	Если ИмяТабличнойЧасти = "Работы" Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Кратность * СтрокаТабличнойЧасти.Коэффициент * СтрокаТабличнойЧасти.Цена;
	Иначе
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	КонецЕсли; 
	
	// Скидки.
	Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
		СтрокаТабличнойЧасти.Сумма = 0;
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * (1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
	КонецЕсли;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// АвтоматическиеСкидки.
	ТребуетсяПересчетАвтоматическихСкидок = СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти");
	
	СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 0;
	СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0;
	СтрокаТабличнойЧасти.ОбщаяСуммаСкидкиБольшеСуммы = Ложь;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()	

// Процедура пересчитывает суммы в платежном календаре.
//
&НаКлиенте
Процедура ПересчитатьПлатежныйКалендарь()
	
	Для каждого ТекСтрока Из Объект.ПлатежныйКалендарь Цикл
		ТекСтрока.СуммаОплаты = Окр((Объект.Запасы.Итог("Всего") + Объект.Работы.Итог("Всего")) * ТекСтрока.ПроцентОплаты / 100, 2, 1);
		ТекСтрока.СуммаНДСОплаты = Окр((Объект.Запасы.Итог("СуммаНДС") + Объект.Работы.Итог("СуммаНДС")) * ТекСтрока.ПроцентОплаты / 100, 2, 1);
	КонецЦикла;
	
КонецПроцедуры // ПересчитатьПлатежныйКалендарь()

&НаКлиенте
// Процедура пересчитывает курс и кратность валюты расчетов при изменении
// даты документа.
//
Процедура ПересчитатьКурсКратностьВалютыРасчетов(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый
		ИЛИ Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой = Строка(Объект.Кратность) + " " + СокрЛП(ВалютаРасчетов) + " = " + Строка(Объект.Курс) + " " + СокрЛП(НациональнаяВалюта);
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(ВалютаРасчетов) + " = " + Строка(КурсНовый) + " " + СокрЛП(НациональнаяВалюта);
		
		ТекстВопроса = НСтр("ru = 'На дату документа у валюты расчетов (" + КурсВалютыСтрокой + ") был задан курс.
		|Установить курс расчетов (" + КурсНовыйВалютыСтрокой + ") в соответствии с курсом валюты?'");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("КурсНовый", КурсНовый);
		ДополнительныеПараметры.Вставить("КратностьНовый", КратностьНовый);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьУстановкиНовогоКурсаВалюты", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КОнецПроцедуры // ПересчитатьКурсКратностьВалютыРасчетов()

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь, ПерезаполнитьЦены = Ложь, ТекстПредупреждения = "")
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс", Объект.Курс);
	СтруктураПараметров.Вставить("Кратность", Объект.Кратность);
	СтруктураПараметров.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураПараметров.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НДСВключатьВСтоимость", Объект.НДСВключатьВСтоимость);
	СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор", Объект.Договор);
	СтруктураПараметров.Вставить("Организация",	Компания); 
	СтруктураПараметров.Вставить("ДатаДокумента", Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены", ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены", ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	СтруктураПараметров.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураПараметров.Вставить("ВидСкидки", Объект.ВидСкидкиНаценки);
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу") Тогда
		СтруктураПараметров.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()	

&НаКлиенте
// Выполняем пересчет цены табличной части документа после изменений в форме 
// "Цены и валюта".
//
Процедура ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен() 
	
	СтруктураДанных = Новый Структура;
	ТабличнаяЧастьДокумента = Новый Массив;
	
	СтруктураДанных.Вставить("Дата",				Объект.Дата);
	СтруктураДанных.Вставить("Организация",			Компания);
	СтруктураДанных.Вставить("ВидЦен",				Объект.ВидЦен);
	СтруктураДанных.Вставить("ВалютаДокумента",		Объект.ВалютаДокумента);
	СтруктураДанных.Вставить("СуммаВключаетНДС",	Объект.СуммаВключаетНДС);
	
	СтруктураДанных.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	СтруктураДанных.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	СтруктураДанных.Вставить("ПроцентСкидкиНаценки", 0);
	
	Если ВидРаботВШапке Тогда
		
		Для каждого СтрокаТЧ Из Объект.Работы Цикл
			
			СтрокаТЧ.Цена = 0;
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				Продолжить;	
			КонецЕсли; 
			
			СтрокаТабличнойЧасти = Новый Структура();
			СтрокаТабличнойЧасти.Вставить("ВидРабот",			Объект.ВидРабот);
			СтрокаТабличнойЧасти.Вставить("Номенклатура",		СтрокаТЧ.Номенклатура);
			СтрокаТабличнойЧасти.Вставить("Характеристика",		СтрокаТЧ.Характеристика);
			СтрокаТабличнойЧасти.Вставить("Цена",				0);
			
			ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
			
		КонецЦикла;
		
	Иначе
		
		Для каждого СтрокаТЧ Из Объект.Работы Цикл
			
			СтрокаТЧ.Цена = 0;
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ВидРабот) Тогда
				Продолжить;	
			КонецЕсли; 
			
			СтрокаТабличнойЧасти = Новый Структура();
			СтрокаТабличнойЧасти.Вставить("ВидРабот",			СтрокаТЧ.ВидРабот);
			СтрокаТабличнойЧасти.Вставить("Номенклатура",		СтрокаТЧ.Номенклатура);
			СтрокаТабличнойЧасти.Вставить("Характеристика",		СтрокаТЧ.Характеристика);
			СтрокаТабличнойЧасти.Вставить("Цена",				0);
			
			ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанных, ТабличнаяЧастьДокумента);	
	
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаТЧ.Характеристика);
		
		РезультатПоиска = Объект.Работы.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаРезультат Из РезультатПоиска Цикл				
			СтрокаРезультат.Цена = СтрокаТЧ.Цена;
			РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", СтрокаРезультат);
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанных.ПроцентСкидкиНаценки;
		РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", СтрокаТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры // ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен()

&НаСервереБезКонтекста
// Выполняем пересчет цены табличной части документа после изменений в форме 
// "Цены и валюта".
//
// Параметры:
//  СтруктураРеквизитов - Структура реквизитов, необходимых при пересчете
//  ТабличнаяЧастьДокумента - ДанныеФормыСтруктура, содержит табличную часть
//                 документа.
//
Процедура ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанных, ТабличнаяЧастьДокумента)
	
	// Скидки.
	Если СтруктураДанных.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанных.ВидСкидкиНаценки) Тогда
		
		СтруктураДанных.ПроцентСкидкиНаценки = СтруктураДанных.ВидСкидкиНаценки.Процент;
		
	КонецЕсли;	
	
	// Дисконтная карта.
	Если СтруктураДанных.Свойство("ПроцентСкидкиПоДисконтнойКарте") 
		И ЗначениеЗаполнено(СтруктураДанных.ПроцентСкидкиПоДисконтнойКарте) Тогда
		
		СтруктураДанных.ПроцентСкидкиНаценки = СтруктураДанных.ПроцентСкидкиНаценки + СтруктураДанных.ПроцентСкидкиПоДисконтнойКарте;
		
	КонецЕсли;
	
	// 1. Сформируем таблицу документа.
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	
	Массив = Новый Массив;
	
	// Вид работ.
	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("ВидРабот", ОписаниеТипов);
	
	// Номенклатура.
	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура", ОписаниеТипов);
	
	// ФиксированноеЗначение.
	Массив.Добавить(Тип("Булево"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("ФиксированнаяСтоимость", ОписаниеТипов);
	
	// Характеристика.
	Массив.Добавить(Тип("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("Характеристика", ОписаниеТипов);
	
	// СтавкиНДС.
	Массив.Добавить(Тип("СправочникСсылка.СтавкиНДС"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("СтавкаНДС", ОписаниеТипов);	
	
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
		
		НоваяСтрока = ТаблицаНоменклатуры.Добавить();
		НоваяСтрока.ВидРабот	 	 = СтрокаТЧ.ВидРабот;
		НоваяСтрока.ФиксированнаяСтоимость	 = СтрокаТЧ.Номенклатура.ФиксированнаяСтоимость;
		НоваяСтрока.Номенклатура	 = СтрокаТЧ.Номенклатура;
		НоваяСтрока.Характеристика	 = СтрокаТЧ.Характеристика;
		Если ТипЗнч(СтрокаТЧ) = Тип("Структура")
			И СтрокаТЧ.Свойство("СтавкаНДС") Тогда
			НоваяСтрока.СтавкаНДС		 = СтрокаТЧ.СтавкаНДС;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНоменклатуры.ВидРабот,
	|	ТаблицаНоменклатуры.ФиксированнаяСтоимость,
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика,
	|	ТаблицаНоменклатуры.СтавкаНДС
	|ПОМЕСТИТЬ ВременнаяТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры";
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.Выполнить();
	
	// 2. Заполним цены.
	Если СтруктураДанных.ВидЦен.РассчитываетсяДинамически Тогда
		ДинамическийВидЦен = Истина;
		ВидЦенПараметр = СтруктураДанных.ВидЦен.БазовыйВидЦен;
		Наценка = СтруктураДанных.ВидЦен.Процент;
		ПорядокОкругления = СтруктураДанных.ВидЦен.ПорядокОкругления;
		ОкруглятьВБольшуюСторону = СтруктураДанных.ВидЦен.ОкруглятьВБольшуюСторону;
	Иначе
		ДинамическийВидЦен = Ложь;
		ВидЦенПараметр = СтруктураДанных.ВидЦен;	
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатуры.СтавкаНДС КАК СтавкаНДС,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены КАК ЦеныНоменклатурыВалюта,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ПорядокОкругления КАК ПорядокОкругления,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена * КурсВалютыВидЦен.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыВидЦен.Кратность) / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1), 0) КАК Цена
	|ИЗ
	|	ВременнаяТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаОбработки, ВидЦен = &ВидЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (ВЫБОР
	|				КОГДА ТаблицаНоменклатуры.ФиксированнаяСтоимость
	|					ТОГДА ТаблицаНоменклатуры.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|				ИНАЧЕ ТаблицаНоменклатуры.ВидРабот = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА ТаблицаНоменклатуры.ФиксированнаяСтоимость
	|					ТОГДА ТаблицаНоменклатуры.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, ) КАК КурсВалютыВидЦен
	|		ПО (ЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены = КурсВалютыВидЦен.Валюта),
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|ГДЕ
	|	ЦеныНоменклатурыСрезПоследних.Актуальность";
	
	Запрос.УстановитьПараметр("ДатаОбработки",	 СтруктураДанных.Дата);
	Запрос.УстановитьПараметр("ВидЦен",			 ВидЦенПараметр);
	Запрос.УстановитьПараметр("ВалютаДокумента", СтруктураДанных.ВалютаДокумента);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТабЧасти Из ТабличнаяЧастьДокумента Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",	 СтрокаТабЧасти.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика",	 СтрокаТабЧасти.Характеристика);
		Если ТипЗнч(СтрокаТЧ) = Тип("Структура")
			И СтрокаТабЧасти.Свойство("СтавкаНДС") Тогда
			СтруктураПоиска.Вставить("СтавкаНДС", СтрокаТабЧасти.СтавкаНДС);
		КонецЕсли;
		
		РезультатПоиска = ТаблицаЦен.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() > 0 Тогда
			
			Цена = РезультатПоиска[0].Цена;
			Если Цена = 0 Тогда
				СтрокаТабЧасти.Цена = Цена;
			Иначе
				
				// Динамически рассчитываем цену
				Если ДинамическийВидЦен Тогда
					
					Цена = Цена * (1 + Наценка / 100);
					
				Иначе	
					
					ПорядокОкругления = РезультатПоиска[0].ПорядокОкругления;
					ОкруглятьВБольшуюСторону = РезультатПоиска[0].ОкруглятьВБольшуюСторону;
					
				КонецЕсли;
				
				Если СтруктураДанных.Свойство("СуммаВключаетНДС") 
					И ((СтруктураДанных.СуммаВключаетНДС И НЕ РезультатПоиска[0].ЦенаВключаетНДС) 
					ИЛИ (НЕ СтруктураДанных.СуммаВключаетНДС И РезультатПоиска[0].ЦенаВключаетНДС)) Тогда
					Цена = УправлениеНебольшойФирмойСервер.ПересчитатьСуммуПриИзмененииФлаговНДС(Цена, СтруктураДанных.СуммаВключаетНДС, СтрокаТабЧасти.СтавкаНДС);
				КонецЕсли;
				
				СтрокаТабЧасти.Цена = УправлениеНебольшойФирмойСервер.ОкруглитьЦену(Цена, ПорядокОкругления, ОкруглятьВБольшуюСторону);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МенеджерВременныхТаблиц.Закрыть()
	
КонецПроцедуры // ПолучитьЦеныТабличнойЧастиПоВидуЦен()

// Функция возвращает текст надписи "Цены и валюта".
//
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи)
	
	ТекстНадписи = "";
	
	// Валюта.
	Если СтруктураНадписи.УчетВалютныхОпераций Тогда
		Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
			ТекстНадписи = НСтр("ru = '%Валюта%'");
			ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(СтруктураНадписи.ВалютаДокумента)));
		КонецЕсли;
	КонецЕсли;
	
	// Вид цен.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВидЦен) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидЦен%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ВидЦен%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидЦен%", СокрЛП(Строка(СтруктураНадписи.ВидЦен)));
	КонецЕсли;
	
	// Вид скидки наценки.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВидСкидки) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидСкидкиНаценки%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ВидСкидкиНаценки%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидСкидкиНаценки%", СокрЛП(Строка(СтруктураНадписи.ВидСкидки)));
	КонецЕсли;
	
	// Дисконтная карта.
	Если ЗначениеЗаполнено(СтруктураНадписи.ДисконтнаяКарта) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ДисконтнаяКарта%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ДисконтнаяКарта%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ДисконтнаяКарта%", Строка(СтруктураНадписи.ПроцентСкидкиПоДисконтнойКарте)+"% по карте"); //СокрЛП(Строка(СтруктураНадписи.ДисконтнаяКарта)));
	КонецЕсли;	
	
	// Налогообложение НДС.
	Если ЗначениеЗаполнено(СтруктураНадписи.НалогообложениеНДС) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%НалогообложениеНДС%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %НалогообложениеНДС%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%НалогообложениеНДС%", СокрЛП(Строка(СтруктураНадписи.НалогообложениеНДС)));
	КонецЕсли;
	
	// Флаг сумма включает НДС.
	Если ПустаяСтрока(ТекстНадписи) Тогда	
		Если СтруктураНадписи.СуммаВключаетНДС Тогда	
			ТекстНадписи = НСтр("ru = 'Сумма включает НДС'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Сумма не включает НДС'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции // СформироватьНадписьЦеныИВалюта()

// ПодключаемоеОборудование
// Процедура получает данные по штрихкодам.
//
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		ДанныеШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
			И ДанныеШтрихкода.Количество() <> 0 Тогда
			
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("Организация", СтруктураДанные.Организация);
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", СтруктураДанные.НалогообложениеНДС);
			Если ЗначениеЗаполнено(СтруктураДанные.ВидЦен) Тогда
				СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);
				СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", СтруктураДанные.ВалютаДокумента);
				СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", СтруктураДанные.СуммаВключаетНДС);
				СтруктураДанныеНоменклатуры.Вставить("ВидЦен", СтруктураДанные.ВидЦен);
				Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения)
					И ТипЗнч(ДанныеШтрихкода.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
					СтруктураДанныеНоменклатуры.Вставить("Коэффициент", ДанныеШтрихкода.ЕдиницаИзмерения.Коэффициент);
				Иначе
					СтруктураДанныеНоменклатуры.Вставить("Коэффициент", 1);
				КонецЕсли;
				СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки);
			КонецЕсли;
			
			// ДисконтныеКарты
			СтруктураДанныеНоменклатуры.Вставить("ПроцентСкидкиПоДисконтнойКарте", СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте);
			СтруктураДанныеНоменклатуры.Вставить("ДисконтнаяКарта", СтруктураДанные.ДисконтнаяКарта);
			// Конец ДисконтныеКарты
			
			ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
			
			Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
				ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрикодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрикодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрикодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	// Конец ДисконтныеКарты
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
			И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		Иначе
			МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,Партия,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.Партия,ДанныеШтрихкода.ЕдиницаИзмерения));
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				
				НоваяСтрока = Объект.Запасы.Добавить();
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				НоваяСтрока.ПроцентСкидкиНаценки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроцентСкидкиНаценки;
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				НоваяСтрока.Спецификация = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Спецификация;
				
				НоваяСтрока.ТипНоменклатурыЗапас = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоЗапас;
				
				РассчитатьСуммуВСтрокеТабличнойЧасти( , НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				
			Иначе
				
				НайденнаяСтрока = МассивСтрокТЧ[0];
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + ТекШтрихкод.Количество;
				РассчитатьСуммуВСтрокеТабличнойЧасти( , НайденнаяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НеизвестныеШтрихкоды;
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрикодов)
	
	Модифицированность = Истина;
	
	НеизвестныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов);
	
	ВозвращаемыеПараметры = Неопределено;
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтаФорма, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
		"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
		Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтаФорма,,,,Оповещение
		);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НеизвестныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

// Конец ПодключаемоеОборудование


// Процедура заполняет колонку Резерв по свободным остаткам на складе.
//
&НаСервере
Процедура ЗаполнитьКолонкуРезервПоОстаткамНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьКолонкуРезервПоОстаткам();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры // ЗаполнитьКолонкуРезервПоОстаткамНаСервере()

// Проверяет соответствие реквизитов договора "Организация" и "ВидДоговора" условиям документа.
//
&НаСервереБезКонтекста
Процедура ПроверитьСоответствиеДоговораУсловиямДокумента(ТекстСообщения, Договор, Документ, Организация, Контрагент, ВидОперации, Отказ)
	
	Если Не УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов()
		ИЛИ Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		
		Возврат;
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	СписокВидовДоговора = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	
	Если Не МенеджерСправочника.ДоговорСоответствуетУсловиямДокумента(ТекстСообщения, Договор, Организация, Контрагент, СписокВидовДоговора)
		И ПолучитьФункциональнуюОпцию("НеПроводитьДокументыСНекорректнымиДоговорами") Тогда
		
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Получает структуру параметров формы выбора договора контрагента.
//
&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбораДоговора(Документ, Организация, Контрагент, Договор, ВидОперации)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Получает договор по умолчанию в зависимости от способа ведения расчетов.
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Выполняет действия при изменении вида операции.
//
&НаСервере
Процедура ОбработатьИзменениеВидаОперации()
	
	Объект.Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
	
	УстановитьВидимостьИДоступностьОтВидаОперации();
	
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		СтрокаЗапасы.Резерв = 0;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет действия при изменении договора контрагента.
//
&НаКлиенте
Процедура ОбработатьИзменениеДоговора(ДанныеДоговора = Неопределено)
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.Договор;
	
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		Если ДанныеДоговора = Неопределено Тогда
			
			ДанныеДоговора = ПолучитьДанныеДоговорПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.Договор);
			
		КонецЕсли;
		
		ИзменилсяВидЦен = Объект.ВидЦен <> ДанныеДоговора.ВидЦен И ЗначениеЗаполнено(ДанныеДоговора.ВидЦен);
		ИзменилсяВидСкидки = Объект.ВидСкидкиНаценки <> ДанныеДоговора.ВидСкидкиНаценки И ЗначениеЗаполнено(ДанныеДоговора.ВидСкидкиНаценки);
		Если ДанныеДоговора.Свойство("ВызовИзПроцедурыПриИзмененииКонтрагента") Тогда
			ОчиститьДисконтнуюКарту = ЗначениеЗаполнено(Объект.ДисконтнаяКарта); // В дальнейшем реквизит ДисконтнаяКрата будет очищен.
		Иначе
			ОчиститьДисконтнуюКарту = Ложь;
		КонецЕсли;			
		
		ВопросВидЦен = (ЗначениеЗаполнено(Объект.Договор) И (ИзменилсяВидЦен ИЛИ ИзменилсяВидСкидки));
		
		ВалютаРасчетовПередИзменением = ВалютаРасчетов;
		ВалютаРасчетов = ДанныеДоговора.ВалютаРасчетов;
		
		НовыйДоговорИВалютаРасчетов = ЗначениеЗаполнено(Объект.Договор) И ЗначениеЗаполнено(ВалютаРасчетов) 
		И Объект.Договор <> ДоговорПередИзменением И ВалютаРасчетовПередИзменением <> ДанныеДоговора.ВалютаРасчетов;
		ОткрытьФормуЦеныИВалюты = НовыйДоговорИВалютаРасчетов И Объект.ВалютаДокумента <> ДанныеДоговора.ВалютаРасчетов
		И Объект.Запасы.Количество() > 0;
		
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("ДоговорПередИзменением", ДоговорПередИзменением);
		ПараметрыДокумента.Вставить("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением);
		ПараметрыДокумента.Вставить("ДанныеДоговора", ДанныеДоговора);
		ПараметрыДокумента.Вставить("ВопросВидЦен", ВопросВидЦен);
		ПараметрыДокумента.Вставить("ОткрытьФормуЦеныИВалюты", ОткрытьФормуЦеныИВалюты);
		ПараметрыДокумента.Вставить("ИзменилсяВидЦен", ИзменилсяВидЦен);
		ПараметрыДокумента.Вставить("ИзменилсяВидСкидки", ИзменилсяВидСкидки);
		ПараметрыДокумента.Вставить("ОчиститьДисконтнуюКарту", ОчиститьДисконтнуюКарту);
		ПараметрыДокумента.Вставить("ПересчетНеобходимПоЗапасам", Объект.Запасы.Количество() > 0);
		ПараметрыДокумента.Вставить("ПересчетНеобходимПоРаботам", Ложь);
		
		ОбработатьИзменениеВидаЦенИВалютыРасчетов(ПараметрыДокумента);
		
		//ЕФСОЛ Несторук 15-11-16 +
		ПересчитатьРКО();
		//ЕФСОЛ Несторук 15-11-16 -
		
	КонецЕсли;
	
	//EFSOL_Шаповал Олег Анатольевич 16 марта 2017 г. 17:58:47 +
	ЭР_ОбновитьСтоимостьВсехУслуг();
	//EFSOL Шаповал О.А. -
	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ПОДБОРОМ

// Процедура - обработчик события Действие команды Подбор
//
&НаКлиенте
Процедура ЗапасыПодбор(Команда)
	
	ИмяТабличнойЧасти = "Запасы";
	МаркерПодбора = "Запасы";
	
	Если НЕ ПустаяСтрока(ПараметрыОткрытияПодбора[ИмяТабличнойЧасти]) Тогда
		
		ПодборНоменклатурыВДокументахКлиент.ОткрытьПодбор(ЭтаФорма, ИмяТабличнойЧасти, ПараметрыОткрытияПодбора[ИмяТабличнойЧасти]);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период", 				Объект.Дата);
	ПараметрыПодбора.Вставить("Организация", 			Компания);
	ПараметрыПодбора.Вставить("ИспользуютсяСпецификации", Истина);
	
	Если ФункциональнаяОпцияРезервированиеЗапасов Тогда
		
		ПараметрыПодбора.Вставить("СтруктурнаяЕдиница", 	Объект.СтруктурнаяЕдиницаРезерв);
		ПараметрыПодбора.Вставить("ЗаполнятьРезерв", 		Истина);
		ПараметрыПодбора.Вставить("ИспользуетсяРезервирование", Истина);
		
	Иначе
		
		ПараметрыПодбора.Вставить("ЗаполнятьРезерв", 		Ложь);
		
	КонецЕсли;
	
	ПараметрыПодбора.Вставить("ДоступноРедактированиеСтруктурнойЕдиницы", Истина);
	
	ПараметрыПодбора.Вставить("ВидСкидкиНаценки", 		Объект.ВидСкидкиНаценки);
	ПараметрыПодбора.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	ПараметрыПодбора.Вставить("ВидЦен", 				Объект.ВидЦен);
	ПараметрыПодбора.Вставить("Валюта", 				Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("СуммаВключаетНДС", 		Объект.СуммаВключаетНДС);
	ПараметрыПодбора.Вставить("ОрганизацияДокумента", 	Объект.Организация);
	ПараметрыПодбора.Вставить("НалогообложениеНДС",		Объект.НалогообложениеНДС);
	ПараметрыПодбора.Вставить("ДоступноИзменениеЦены",	НЕ Элементы.ЗапасыЦена.ТолькоПросмотр);
	
	ТипНоменклатуры = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Номенклатура"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					ТипНоменклатуры.Добавить(ЭлементФиксМассива);
				КонецЦикла; 
			Иначе
				ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПодбора.Вставить("ТипНоменклатуры",		ТипНоменклатуры);
	
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	#Если ВебКлиент Тогда
		//Обход ошибки платформы передачи данных формы в веб-клиенте при изменении состава элементов формы
		ОткрытьФорму("ОбщаяФорма.ФормаПодбораОстаткиРезервыЦены", ПараметрыПодбора, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	#Иначе
		
		ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	#КонецЕсли
	
КонецПроцедуры // ПодборВыполнить()

// Фиксирует ошибку в журнале регистрации событий
//
&НаКлиенте
Процедура ЗаписатьОшибкуЧтенияДанныхИзХранилища()
	
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации("Ошибка", , ТекстОшибкиЖурналаРегистрации);
	
КонецПроцедуры // ЗаписатьОшибкуЧтенияДанныхИзХранилища()

// Функция получает список товаров из временного хранилища
//
&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Если НЕ (ТипЗнч(ТаблицаДляЗагрузки) = Тип("ТаблицаЗначений")
		ИЛИ ТипЗнч(ТаблицаДляЗагрузки) = Тип("Массив")) Тогда
		
		ТекстОшибкиЖурналаРегистрации = "Несоответствие типа переданного в документ из подбора [" + ТипЗнч(ТаблицаДляЗагрузки) + "].
		|Адрес запасов в хранилище: " + СокрЛП(АдресЗапасовВХранилище) + "
		|Имя табличной части: " + СокрЛП(ИмяТабличнойЧасти);
		
		Возврат;
		
	Иначе
		
		ТекстОшибкиЖурналаРегистрации = "";
		
	КонецЕсли;
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		Если НоваяСтрока.Свойство("Всего")
			И НЕ ЗначениеЗаполнено(НоваяСтрока.Всего) Тогда
			
			НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
			
		КонецЕсли;
		
		// Дозаполнение
		Если ИмяТабличнойЧасти = "Работы" Тогда
			
			НоваяСтрока.КлючСвязи = УправлениеНебольшойФирмойСервер.СоздатьНовыйКлючСвязи(ЭтаФорма);
			
			Если ЗначениеЗаполнено(СтрокаЗагрузки.Номенклатура) Тогда
				
				НоваяСтрока.ТипНоменклатурыУслуга = (СтрокаЗагрузки.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
				
			КонецЕсли;
			
		ИначеЕсли ИмяТабличнойЧасти = "Запасы" Тогда
			
			Если ЗначениеЗаполнено(СтрокаЗагрузки.Номенклатура) Тогда
				
				НоваяСтрока.ТипНоменклатурыЗапас = (СтрокаЗагрузки.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НоваяСтрока.Свойство("Спецификация") Тогда 
			
			НоваяСтрока.Спецификация = УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтрокаЗагрузки.Номенклатура, СтрокаЗагрузки.Характеристика);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// АвтоматическиеСкидки
	Если ТаблицаДляЗагрузки.Количество() > 0 Тогда
		СброситьФлагСкидкиРассчитаныСервер("ОбработкаПодбора");
	КонецЕсли;
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает доступность элементов формы от состояния заказа.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьВидимостьИДоступностьОтСостояния()
	
	Если Объект.СостояниеЗаказа.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.УдалитьСтатусыЗаказов.Открыт") Тогда
		
		Элементы.ЗапланироватьОплату.Доступность = Ложь;
		Элементы.ГруппаПлатежныйКалендарь.Видимость = Ложь;
		
		Объект.ЗапланироватьОплату = Ложь;
		
		Если Объект.ПлатежныйКалендарь.Количество() > 0 Тогда
			Объект.ПлатежныйКалендарь.Очистить();
		КонецЕсли;
		
	Иначе
		
		Элементы.ЗапланироватьОплату.Доступность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьИДоступностьОтСостояния()

// Процедура устанавливает доступность элементов формы от вида операции.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьВидимостьИДоступностьОтВидаОперации()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу") Тогда
		
		Элементы.ЗапасыИзменитьРезерв.Видимость = Истина;
		Элементы.ЗапасыРезерв.Видимость = Истина;
		Элементы.СчитатьДисконтнуюКарту.Видимость = Истина; // ДисконтныеКарты
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку") Тогда
		
		Элементы.ЗапасыИзменитьРезерв.Видимость = Ложь;
		Элементы.ЗапасыРезерв.Видимость = Ложь;
		Элементы.СчитатьДисконтнуюКарту.Видимость = Ложь; // ДисконтныеКарты
		
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу")
		И ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") Тогда
		Элементы.ЗапасыПартия.Видимость = Истина;
	Иначе
		Элементы.ЗапасыПартия.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьИДоступностьОтВидаОперации()

// Процедура устанавливает доступность элементов формы от запланировать оплату.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьВидимостьИДоступностьОтЗапланироватьОплату()
	
	Если Объект.ЗапланироватьОплату Тогда
		
		Элементы.ГруппаПлатежныйКалендарь.Видимость = Истина;
		
	Иначе
		
		Элементы.ГруппаПлатежныйКалендарь.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьИДоступностьОтЗапланироватьОплату()

// Процедура устанавливает видимость элементов формы.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьВидимостьОтПользовательскихНастроек()
	
	Если Объект.ПоложениеДатыОтгрузки = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
		Элементы.ДатаОтгрузки.Видимость = Ложь;
		Элементы.ЗапасыДатаОтгрузки.Видимость = Ложь;
		ДатаОтгрузкиВШапке = Истина;
	Иначе
		Элементы.ДатаОтгрузки.Видимость = Ложь;
		//Элементы.ЗапасыДатаОтгрузки.Видимость = Истина;
		Элементы.ЗапасыДатаОтгрузки.Видимость = Ложь;
		ДатаОтгрузкиВШапке = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьОтПользовательскихНастроек()

// Устанавливает текущую страницу для вида операции документа.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операции
//
&НаКлиенте
Процедура УстановитьТекущуюСтраницу()
        ИмяСтраницы = "";
	    
	Если Объект.ТипДенежныхСредств = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные") Тогда
		ИмяСтраницы = "СтраницаБанковскийСчет";
	ИначеЕсли Объект.ТипДенежныхСредств = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Наличные") Тогда
		ИмяСтраницы = "СтраницаКасса";
	КонецЕсли;
	
	ЭлементСтраница = Элементы.Найти(ИмяСтраницы);
	Если ЭлементСтраница <> Неопределено Тогда
		Элементы.КассаБанковскийСчет.Видимость = Истина;
		Элементы.КассаБанковскийСчет.ТекущаяСтраница = ЭлементСтраница;
	Иначе
		Элементы.КассаБанковскийСчет.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьТекущуюСтраницу()

// Процедура - устанавливает возможность редактирования списком.
//
&НаКлиенте
Процедура УстановитьВозможностьРедактированияСписком()
	
	Элементы.РедактироватьСписком.Пометка = НЕ Элементы.РедактироватьСписком.Пометка;
	
	КоличествоСтрок = Объект.ПлатежныйКалендарь.Количество();
	
	Если НЕ Элементы.РедактироватьСписком.Пометка
		И Объект.ПлатежныйКалендарь.Количество() > 1 Тогда
		
		Ответ = Неопределено;
		
		
		ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьВозможностьРедактированияСпискомЗавершение", ЭтотОбъект, Новый Структура("КоличествоСтрок", КоличествоСтрок)), 
		НСтр("ru='Все строки кроме первой будут удалены. Продолжить?'"),
		РежимДиалогаВопрос.ДаНет
		);
		Возврат;
	КонецЕсли;
	
	УстановитьВозможностьРедактированияСпискомФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВозможностьРедактированияСпискомЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КоличествоСтрок = ДополнительныеПараметры.КоличествоСтрок;
	
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Элементы.РедактироватьСписком.Пометка = Истина;
		Возврат;
	КонецЕсли;
	
	Пока КоличествоСтрок > 1 Цикл
		Объект.ПлатежныйКалендарь.Удалить(Объект.ПлатежныйКалендарь[КоличествоСтрок - 1]);
		КоличествоСтрок = КоличествоСтрок - 1;
	КонецЦикла;
	Элементы.ПлатежныйКалендарь.ТекущаяСтрока = Объект.ПлатежныйКалендарь[0].ПолучитьИдентификатор();
	
	УстановитьВозможностьРедактированияСпискомФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВозможностьРедактированияСпискомФрагмент()
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		Элементы.ГруппаПлатежныйКалендарьСпискомСтрокой.ТекущаяСтраница = Элементы.ГруппаПлатежныйКалендарьСписком;
	Иначе
		Элементы.ГруппаПлатежныйКалендарьСпискомСтрокой.ТекущаяСтраница = Элементы.ГруппаПлатежныйКалендарьСтрокой;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВозможностьРедактированияСписком()

// Процедура устанавливает видимость договора в зависимости от установленного параметра контрагенту.
//
&НаСервере
Процедура УстановитьВидимостьДоговора()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ПараметрыРасчетовСКонтрагентом = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, "ВестиРасчетыПоЗаказам, ВестиРасчетыПоДоговорам");
		
		КонтрагентВестиРасчетыПоЗаказам = ПараметрыРасчетовСКонтрагентом.ВестиРасчетыПоЗаказам;
		Элементы.Договор.Видимость = ПараметрыРасчетовСКонтрагентом.ВестиРасчетыПоДоговорам;
		
	Иначе
		
		КонтрагентВестиРасчетыПоЗаказам = Ложь;
		Элементы.Договор.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьДоговора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтаФорма, Элементы.ИнформационныеСсылки);

	//////Объект.Заполнить(Параметры.ЗначенияЗаполнения);
	
	
	//УправлениеНебольшойФирмойСервер.ЗаполнитьШапкуДокумента(
	//	Объект,
	//	Объект.ВидОперации,
	//	Параметры.ЗначениеКопирования,
	//	Параметры.Основание,
	//	РазрешеноПроведение,
	//	Параметры.ЗначенияЗаполнения
	//);
	
	//EFSOL_oks_kry_18.03.2015 16:37:51_BEGIN
	СкладВШапке = Истина;
	// Проверка на заполнение Стартовых настроек
	//ЭР Несторук С.И. 26.09.2017 10:24:42 {
	//Убрал для роли "Партнер" проверку заполнения стартовых настроек
	СтартНастройки = ES_ОбщегоНазначения.ПолучитьВсеСтартовыеНастройки();
	Если НЕ РольДоступна("ES_Партнёр") Тогда
	//}ЭР Несторук С.И.
		Если НЕ СтартНастройки.Свойство("Организация")
			//ЭР Несторук С.И. 17.03.2017 14:49:02 {
			//Временно скрываем склад
			//ИЛИ НЕ СтартНастройки.Свойство("Склад")
			//ИЛИ НЕ СтартНастройки.Свойство("НоменклатураДляЧека")
			//}ЭР Несторук С.И.
			
			ИЛИ НЕ СтартНастройки.Свойство("ОсновнойГород")
			ИЛИ НЕ СтартНастройки.Свойство("УслугаДоставки") 
			ИЛИ НЕ СтартНастройки.Свойство("КассаНаложенныхПлатежей") Тогда
			
			Сообщить("Не заполнены стартовые настройки", СтатусСообщения.ОченьВажное);
			Отказ = Истина;
			Возврат;
			
		КонецЕсли; 
	КонецЕсли;	
	ES_ПересчитыватьСтоимостьДоставки = Истина;
	ES_ГородПоУмолчанию = СтартНастройки.ОсновнойГород + ", ";
	ES_ДеньДоставкиПоУмолчанию = СтартНастройки.ДеньДоставки;
	Если НЕ ЗначениеЗаполнено(ES_ДеньДоставкиПоУмолчанию) Тогда
		ES_ДеньДоставкиПоУмолчанию = ПредопределенноеЗначение("Перечисление.ES_ДниДоставки.Завтра")
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		// Заполняем данными из стартовых настроек
		ЭтоКопирование = ЗначениеЗаполнено(Параметры.ЗначениеКопирования);
		
		Если НЕ ЭтоКопирование Тогда
			//ЕФСОЛ Савченко К.Р. 20.09.2017 +
			Объект.Дата = ТекущаяДатаСеанса();
			//ЕФСОЛ Савченко К.Р. 20.09.2017 -
			Объект.Организация 				= СтартНастройки.Организация;
			//ЭР Несторук С.И. 14.03.2017 14:42:06 {
			Объект.ES_Город1 = СтартНастройки.ОсновнойГород;
			//Временно убрали склад из шапки заказа на доставку
			//Объект.ES_Склад					= СтартНастройки.Склад;
			Если СтартНастройки.Свойство("ВидДоставки") Тогда
				Объект.ES_ВидДоставки = ?(ЗначениеЗаполнено(СтартНастройки.ВидДоставки), СтартНастройки.ВидДоставки, Перечисления.ES_ВидыДоставки.СкладДвери)
			КонецЕсли;
			//}ЭР Несторук С.И.
			
			Объект.ES_АдресДоставки 		= СтартНастройки.ОсновнойГород + ", ";
			Объект.ES_ПредставлениеГрузов 	= Перечисления.ES_ПредставлениеГрузов.Запасы;
			Объект.ES_ВидОплаты 			= СтартНастройки.ВидОплаты;
			//ЭР Несторук С.И. 26.04.2017 16:58:33 {
			//Объект.ES_Плательщик 			= СтартНастройки.Плательщик;
			Объект.ES_Плательщик 			= Перечисления.ES_ТипыПлательщиков.Заказчик;
			Объект.ES_СпособОплаты 			= Перечисления.ES_ТипыДенежныхСредствОплатаПолучателем.Наличные;
			//}ЭР Несторук С.И.
			
			//ЕФСОЛ Несторук 16.08.2016 +
			Объект.ES_ПлательщикПереключатель		= СтартНастройки.Плательщик;
			Объект.ES_ЦветМетки 					= СтартНастройки.Метка1Цвет;
			//ЕФСОЛ Несторук 16.08.2016 -
			ЗаполнениеЗаказчикаВЗависимостиОтТипаПлательщика();
			
			Если ES_ДеньДоставкиПоУмолчанию = ПредопределенноеЗначение("Перечисление.ES_ДниДоставки.Сегодня") Тогда
				ДатаДоставкиПоУмолчанию = НачалоДня(ТекущаяДата());
			Иначе
				ДатаДоставкиПоУмолчанию = НачалоДня(ТекущаяДата() + 86400);
			КонецЕсли; 
			                              
			Объект.ДатаОтгрузки 		= ДатаДоставкиПоУмолчанию;
			Объект.ES_ДатаДоставки 		= ДатаДоставкиПоУмолчанию;
			Объект.ES_ВремяДоставкиС 	= '000101010900';
			Объект.ES_ВремяДоставкиПо 	= '000101011900'; 
			//ЕФСОЛ Несторук 16.08.2016 +
			Если ЗначениеЗаполнено(СтартНастройки.УслугаСтраховки) И ЗначениеЗаполнено(СтартНастройки.ПроцентСтраховки) Тогда
				Объект.ES_ПроцентСтраховки = СтартНастройки.ПроцентСтраховки;
			КонецЕсли;
			//ЕФСОЛ Несторук 16.08.2016 -		
			УстановитьЗначениеДатыОтгрузки();
		КонецЕсли;
		//ЕФСОЛ Несторук 25.10.16 +
		Если ЭтоКопирование Тогда
			Объект.ES_КомментарийКурьера = "";
		КонецЕсли;
		//ЕФСОЛ Несторук 25.10.16 -
		
	КонецЕсли; 
	
	УстановитьПараметрыДляТабЧастейИстория();
	//EFSOL_oks_kry_18.03.2015 16:37:51_END
	
	ПараметрыДоговораКонтрагента = Новый Структура;
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И ЗначениеЗаполнено(Объект.Контрагент)
		И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
			ПараметрыДоговорПоУмолчанию = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, "ДоговорПоУмолчанию");
			Объект.Договор = ПараметрыДоговорПоУмолчанию.ДоговорПоУмолчанию;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Договор) Тогда
			ПараметрыДоговораКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Договор, "ВалютаРасчетов, ВидСкидкиНаценки, ВидЦен");
			Объект.ВалютаДокумента = ПараметрыДоговораКонтрагента.ВалютаРасчетов;
			ВалютаРасчетовКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", ПараметрыДоговораКонтрагента.ВалютаРасчетов));
			Объект.Курс      = ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
			Объект.Кратность = ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1, ВалютаРасчетовКурсКратность.Кратность);
			Объект.ВидСкидкиНаценки = ПараметрыДоговораКонтрагента.ВидСкидкиНаценки;
			Объект.ВидЦен = ПараметрыДоговораКонтрагента.ВидЦен;
		КонецЕсли;
	Иначе
		ПараметрыДоговораКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Договор, "ВалютаРасчетов");
	КонецЕсли;
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	Контрагент = Объект.Контрагент;
	Договор = Объект.Договор;
	ПараметрыДоговораКонтрагента.Свойство("ВалютаРасчетов", ВалютаРасчетов);
	НациональнаяВалюта = УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту();
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	ИмяТабличнойЧасти = "Работы";
	
	ФункциональнаяОпцияРезервированиеЗапасов = ПолучитьФункциональнуюОпцию("РезервированиеЗапасов");
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВЫБОР
			|		КОГДА Организации.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств = &ВалютаДенежныхСредств
			|			ТОГДА Организации.БанковскийСчетПоУмолчанию
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ КАК БанковскийСчет
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.Ссылка = &Организация");
			Запрос.УстановитьПараметр("Организация", Объект.Организация);
			Запрос.УстановитьПараметр("ВалютаДенежныхСредств", Объект.ВалютаДокумента);
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Объект.БанковскийСчет = Выборка.БанковскийСчет;
			КонецЕсли;
			Объект.Касса = Справочники.Кассы.ПолучитьКассуПоУмолчанию(Объект.Организация);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И НЕ ЗначениеЗаполнено(Параметры.Основание) 
		И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	ИначеЕсли Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
	Иначе
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
	КонецЕсли;
	
	// Сформируем надпись цены и валюты.
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	//	УстановитьВидимостьИДоступностьОтСостояния();
	УстановитьВидимостьИДоступностьОтВидаОперации();
	УстановитьВидимостьИДоступностьОтЗапланироватьОплату();
	//EFSOL_oks_kry_18.03.2015 21:40:55_BEGIN
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		//Объект.ES_ИзКЛАДР = Истина;
		УстановитьВидимостьИДоступностьПолейДоставки();
	КонецЕсли; 
	//EFSOL_oks_kry_18.03.2015 21:40:55_END
	
	//EFSOL_Шаповал Олег Анатольевич 16 марта 2017 г. 11:31:48 +
	Элементы.ГруппаЗонаДоставки.Видимость = Константы.ES_ИспользоватьТарифныйКалькулятор.Получить();
	//EFSOL Шаповал О.А. -
	
	Если НЕ ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") Тогда
		
		Элементы.СтруктурнаяЕдиницаРезерв.Видимость = Ложь;
		
	КонецЕсли; 
	
	// Если документ открыт из подбора, заполнить табличную часть товары
	Если Параметры.ЗначенияЗаполнения.Свойство("АдресЗапасовВХранилище") 
		И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.АдресЗапасовВХранилище) Тогда
		
		ПолучитьЗапасыИзХранилища(Параметры.ЗначенияЗаполнения.АдресЗапасовВХранилище, 
		Параметры.ЗначенияЗаполнения.ИмяТабличнойЧасти,
		Параметры.ЗначенияЗаполнения.ЕстьХарактеристики,
		Параметры.ЗначенияЗаполнения.ЕстьПартии);
		
	КонецЕсли;
	
	// ПодборНоменклатурыВДокументах
	ПодборНоменклатурыВДокументах.НазначитьФормуПодбора(ПараметрыОткрытияПодбора, Объект.Ссылка.Метаданные().Имя, "Запасы");
	// Конец ПодборНоменклатурыВДокументах
	
	//EFSOL_oks_kry_18.03.2015 20:45:06_BEGIN
	// Установка заголовка формы.
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = "Заказ на доставку (Создание)";
	КонецЕсли;
	//EFSOL_oks_kry_18.03.2015 20:45:06_END
	
	// Информация по контрагенту.
	Элементы.ПоказатьИнформациюПоКонтрагенту.Видимость = Объект.ИнформацияПоКонтрагенту.Количество() > 0;
	
	// Установка видимости реквизитов от пользовательских настроек
	УстановитьВидимостьОтПользовательскихНастроек(); 
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОповеститьРабочийКалендарь = Ложь;
	Иначе
		ОповеститьРабочийКалендарь = Истина;
	КонецЕсли;
	
	// Установка видимости договора.
	УстановитьВидимостьДоговора();
	
	// Установка доступности цен для редактирования.
	РазрешеноРедактированиеЦенДокументов = УправлениеНебольшойФирмойУправлениеДоступомПовтИсп.РазрешеноРедактированиеЦенДокументов();
	
	Элементы.ЗапасыЦена.ТолькоПросмотр 				  	  = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыПроцентСкидкиНаценки.ТолькоПросмотр    = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСумма.ТолькоПросмотр 				  = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаНДС.ТолькоПросмотр 			  	  = НЕ РазрешеноРедактированиеЦенДокументов;
	
	// АвтоматическиеСкидки.
	АвтоматическиеСкидкиПриСозданииНаСервере();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ЭлектронныеВесы", , МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
	
	//EFSOL_Сальник К.А. 2019-05-08 {+
	
	ES_ПрикрепленныеИзображения.Параметры.УстановитьЗначениеПараметра("ДокументДоставки", Объект.Ссылка);
	//EFSOL_Сальник К.А.  -}
	
	//ЭР Несторук С.И. 13.06.2019 8:26:50 {
	ИспользуетсяТарифныйКалькулятор = Константы.ES_ИспользоватьТарифныйКалькулятор.Получить();
	УстановитьВидимостьПолейТарифногоКалькулятора(ИспользуетсяТарифныйКалькулятор);
	ЭтаФорма.ТолькоПросмотр = НЕ ES_ОбщегоНазначения.РазрешеноРедактированиеЗаказаНаДоставку();
	//}ЭР Несторук С.И.
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//ЭР Несторук С.И. 10.04.2019 9:32:27 {
	ES_БиллингКлиент.ПроверитьДоступностьСервисаDelans(Отказ);
	//}ЭР Несторук С.И.
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	УстановитьТекущуюСтраницу();
	
	КоличествоСтрок = Объект.ПлатежныйКалендарь.Количество();
	Элементы.РедактироватьСписком.Пометка = КоличествоСтрок > 1;
	
	Если Объект.ПлатежныйКалендарь.Количество() > 0 Тогда
		Элементы.ПлатежныйКалендарь.ТекущаяСтрока = Объект.ПлатежныйКалендарь[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		Элементы.ГруппаПлатежныйКалендарьСпискомСтрокой.ТекущаяСтраница = Элементы.ГруппаПлатежныйКалендарьСписком;
	Иначе
		Элементы.ГруппаПлатежныйКалендарьСпискомСтрокой.ТекущаяСтраница = Элементы.ГруппаПлатежныйКалендарьСтрокой;
	КонецЕсли;
	
	//EFSOL_oks_kry_18.03.2015 22:01:16_BEGIN
	
	ES_АдресДоставкиXML = Объект.ES_АдресДоставки;
	ИзменитьЗаголовокТЧГрузы();
	
	Если Объект.Ссылка.Пустая() Тогда
		ЗаполнитьРеквизитыДоставкиПоУмолчанию();
	Иначе
		ЗаполнитьИзменяемыеРеквизитыЗаказа();
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьЭлементовДоставкиНаКлиенте(Истина);
	//EFSOL_oks_kry_18.03.2015 22:01:16_END
	//ES_УстановитьЦветСрочности();
	Если ЗначениеЗаполнено(Объект.ES_ЦветМетки) Тогда
		УстановитьЦвет(Объект.ES_ЦветМетки);
	КонецЕсли;
	
	ES_УстановитьДоступностьФормыАдреса(Объект.ES_ИзКЛАДР);
	ES_УстановитьДоступностьФормыАдресаЗабора(Объект.ES_ЗаборИзКЛАДР); 
	
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ПриОткрытииНаСервере()
	
	//EFSOL_Сальник К.А. 2019-05-15 {+
	Элементы.ES_ПрикрепленныеИзображения.Обновить();
	//EFSOL_Сальник К.А.  -}
	
КонецПроцедуры

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии()
	
	// АвтоматическиеСкидки
	// Выведем сообщение о рассчёте скидок, если нажата кнопка "Провести и закрыть" или форма закрывается по крестику, с сохранением изменений.
	Если ИспользоватьАвтоматическиеСкидки И СкидкиРассчитаныПередЗаписью Тогда
		ПоказатьОповещениеПользователя("Изменение:", 
		ПолучитьНавигационнуюСсылку(Объект.Ссылка), 
		Строка(Объект.Ссылка)+". Автоматические скидки (наценки) рассчитаны!", 
		БиблиотекаКартинок.Информация32);
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры // ПриЗакрытии()

&НаКлиенте
// Процедура - обработчик события ПослеЗаписи.
//
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ДокументМодифицирован Тогда
		
		ОповеститьРабочийКалендарь = Истина;
		ДокументМодифицирован = Ложь;
		
	КонецЕсли;
	
	//EFSOL_oks_kry_19.03.2015 17:00:57_BEGIN
	ОбновитьСтатусДокумента();
	Элементы.ES_СтатусЗаказа.Видимость = ЗначениеЗаполнено(ES_СтатусЗаказа);
	//EFSOL_oks_kry_19.03.2015 17:00:57_END
	
КонецПроцедуры // ПослеЗаписи()

// Процедура обработчик события ПередЗаписью.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// АвтоматическиеСкидки
	СкидкиРассчитаныПередЗаписью = Ложь;
	// Если документ проводится, проверим рассчитанность скидок.
	Если ИспользоватьАвтоматическиеСкидки Тогда
		Если Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
			РассчитатьСкидкиНаценкиКлиент();
			РассчиталиСкидки = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Рассчитаны автоматические скидки (наценки)!";
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Сообщить();
			
			СкидкиРассчитаныПередЗаписью = Истина;
		Иначе
			Объект.СкидкиРассчитаны = Истина;
			ОбновитьКартинкуАвтоСкидкиПослеЗаписи = Истина;
		КонецЕсли;
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры

&НаСервере
// Процедура обработчик события ПередЗаписьюНаСервере.
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Обработчик подсистемы "Свойства"
	
	Если Модифицированность Тогда
		
		ДокументМодифицирован = Истина;
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТекстСообщения = "";
		ПроверитьСоответствиеДоговораУсловиямДокумента(
		ТекстСообщения, 
		ТекущийОбъект.Договор, 
		ТекущийОбъект.Ссылка, 
		ТекущийОбъект.Организация, 
		ТекущийОбъект.Контрагент, 
		ТекущийОбъект.ВидОперации, 
		Отказ
		);
		
		Если ТекстСообщения <> "" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ?(Отказ, НСтр("ru = 'Документ не проведен! '") + ТекстСообщения, ТекстСообщения);
			
			Если Отказ Тогда
				Сообщение.ПутьКДанным = "Объект";
				Сообщение.Поле = "Договор";
				Сообщение.Сообщить();
				Возврат;
			Иначе
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
// Процедура обработчик события ОбработкаПроверкиЗаполненияНаСервере.
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ОбработкаПроверкиЗаполненияНаСервере()

&НаСервере
// Процедура обработчик события ПослеЗаписиНаСервере.
//
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Заголовок = "";
	АвтоЗаголовок = Истина;
	
	// АвтоматическиеСкидки
	Если ОбновитьКартинкуАвтоСкидкиПослеЗаписи Тогда
		Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		ОбновитьКартинкуАвтоСкидкиПослеЗаписи = Ложь;
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	//EFSOL_oks_kry_19.03.2015 17:06:13_BEGIN
	УстановитьПараметрыДляТабЧастейИстория();
	//EFSOL_oks_kry_19.03.2015 17:06:13_END
	
КонецПроцедуры // ПослеЗаписиНаСервере()

&НаКлиенте
// Процедура - обработчик события ПередЗакрытием формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ОповеститьРабочийКалендарь Тогда
		Оповестить("ИзмененЗаказПокупателя", Объект.Ответственный);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() И Не СчитанаДисконтнаяКарта Тогда
		Если ИмяСобытия = "ScanData" Тогда
			//Преобразуем предварительно к ожидаемому формату
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[0], 1)); // Достаем штрихкод из основных данных
			Иначе
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1)); // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// ДисконтныеКарты
	Если СчитанаДисконтнаяКарта Тогда
		СчитанаДисконтнаяКарта = Ложь;
	КонецЕсли;
	// Конец ДисконтныеКарты
	
	Если ИмяСобытия = "ОбновлениеТекстаПроСчетФактуру" 
		И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.ДокументОснование = Объект.Ссылка Тогда
		
		СчетФактураТекст = Параметр.Представление;
		
	ИначеЕсли ИмяСобытия = "ПослеЗаписиКонтрагента" 
		И ЗначениеЗаполнено(Параметр)
		И Объект.Контрагент = Параметр Тогда
		
		УстановитьВидимостьДоговора();
		
	ИначеЕсли ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		//Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище	= Параметр;
		ЕстьХарактеристики 		= Истина;
		
		ЕстьПартии			= Ложь;
		
		Если МаркерПодбора = "Запасы" Тогда
			
			ИмяТабличнойЧасти	= "Запасы";
			
			ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии);
			
			Если НЕ ПустаяСтрока(ТекстОшибкиЖурналаРегистрации) Тогда
				ЗаписатьОшибкуЧтенияДанныхИзХранилища();
			КонецЕсли;
			
			// Платежный календарь.
			ПересчитатьПлатежныйКалендарь();
			
		КонецЕсли;
		
		МаркерПодбора = "";
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик команды ПоказатьИнформациюПоКонтрагенту.
//
&НаКлиенте
Процедура ПоказатьИнформациюПоКонтрагенту(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИнформацияПоКонтрагенту", Объект.ИнформацияПоКонтрагенту);
	
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаИнформацииПоКонтрагенту", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры // ПоказатьИнформациюПоКонтрагенту()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля.
//
&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	Модифицированность = Истина;
	
КонецПроцедуры // РедактироватьЦеныИВалюту()

// ПодключаемоеОборудование
// Процедура - обработчик команды командной панели табличной части.
//
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, Новый Структура("ТекШтрихкод", ТекШтрихкод)), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // ПоискПоШтрихкоду()

// Получает вес для строки табличной части.
//
&НаКлиенте
Процедура ПолучитьВесДляСтрокиТабличнойЧасти(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Необходимо выбрать строку, для которой необходимо получить вес.'"));
		
	ИначеЕсли МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект, СтрокаТабличнойЧасти);
		МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(ОписаниеОповещения, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьВесДляСтрокиТабличнойЧасти()

&НаКлиенте
Процедура ПолучитьВесЗавершение(Вес, Параметры) Экспорт
	
	СтрокаТабличнойЧасти = Параметры;
	
	Если НЕ Вес = Неопределено Тогда
		Если Вес = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Электронные весы вернули нулевой вес.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			// Вес получен.
			СтрокаТабличнойЧасти.Количество = Вес;
			РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	ПолучитьВесДляСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

// Процедура - обработчик команды ЗагрузитьДанныеИзТСД.
//
&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОповещенияПриЗагрузкеИзТСД = Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(ОповещенияПриЗагрузкеИзТСД, УникальныйИдентификатор);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") 
		И Результат.Количество() > 0 Тогда
		ПолученыШтрихкоды(Результат);
	КонецЕсли;
	
КонецПроцедуры

// Конец ПодключаемоеОборудование

// Процедура - обработчик команды РедактироватьСписком.
//
&НаКлиенте
Процедура РедактироватьСписком(Команда)
	
	УстановитьВозможностьРедактированияСписком();
	
КонецПроцедуры // РедактироватьСписком()

// Процедура - обработчик команды НастройкаДокумента.
//
&НаКлиенте
Процедура НастройкаДокумента(Команда)
	
	// 1. Формируем структуру параметров для заполнения формы "Настройка документа".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПоложениеДатыОтгрузкиВЗаказеПокупателя", Объект.ПоложениеДатыОтгрузки);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаДокумента", СтруктураПараметров,,,,, Новый ОписаниеОповещения("НастройкаДокументаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// 2. Открвыаем форму "Настройка документ".
	СтруктураНастройкаДокумента = Результат;
	
	// 3. Применяем изменения, сделанные в форме "Настройка документа".
	Если ТипЗнч(СтруктураНастройкаДокумента) = Тип("Структура") И СтруктураНастройкаДокумента.БылиВнесеныИзменения Тогда
		
		Объект.ПоложениеДатыОтгрузки = СтруктураНастройкаДокумента.ПоложениеДатыОтгрузкиВЗаказеПокупателя;
		
		ПредВидимостьДатыОтгрузки = Элементы.ДатаОтгрузки.Видимость;
		ПредВидимостьДатыОтгрузки = Элементы.ДатаОтгрузки.Видимость;
		
		УстановитьВидимостьОтПользовательскихНастроек();
		
		Если ПредВидимостьДатыОтгрузки = Ложь // Было в ТЧ.
			И Элементы.ДатаОтгрузки.Видимость = Истина Тогда // Стало в шапке.
			
			Если Объект.Запасы.Количество() > 0 Тогда
				Объект.ДатаОтгрузки = Объект.Запасы[0].ДатаОтгрузки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Изменить резерв - Запасы

// Процедура - обработчик команды ЗаполнитьПоОстаткам подменю ИзменитьРезерв.
//
&НаКлиенте
Процедура ИзменитьРезервЗаполнитьПоОстаткам(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Товары, услуги"" не заполнена!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКолонкуРезервПоОстаткамНаСервере();
	
КонецПроцедуры // ИзменитьРезервЗаполнитьПоОстаткам()

// Процедура - обработчик команды ОчиститьРезерв подменю ИзменитьРезерв.
//
&НаКлиенте
Процедура ИзменитьРезервОчиститьРезерв(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Товары, услуги"" не заполнена!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
		Если СтрокаТабличнойЧасти.ТипНоменклатурыЗапас Тогда
			СтрокаТабличнойЧасти.Резерв = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ИзменитьРезервЗаполнитьПоОстаткам()


////////////////////////////////////////////////////////////////////////////////
// ДЕЙСТВИЯ КОМАНД ПАНЕЛИ СОСТОЯНИЕ ЗАКАЗОВ

// Процедура - обработчик события ПриИзменении поля ввода Статус.
//
&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если Статус = "В работе" Тогда
		Объект.СостояниеЗаказа = СостояниеВРаботе;
		Объект.Закрыт = Ложь;
	ИначеЕсли Статус = "Выполнен" Тогда
		Объект.СостояниеЗаказа = СостояниеВыполнен;
		Объект.Закрыт = Истина;
	ИначеЕсли Статус = "Отменен" Тогда
		Объект.СостояниеЗаказа = СостояниеВРаботе;
		Объект.Закрыт = Истина;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры // СтатусПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением, ВалютаРасчетов);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВалютаРасчетов) Тогда
			ПересчитатьКурсКратностьВалютыРасчетов(СтруктураДанные);
		КонецЕсли;
		
		СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
		ПересчитатьПлатежныйКалендарь();
		
		// ДисконтныеКарты
		// В этой процедуре происходить вызов не модального окна вопроса.
		ПересчитатьПроцентСкидкиПриИзмененииДатыДокумента();
		// Конец ДисконтныеКарты
	КонецЕсли;
	
	// АвтоматическиеСкидки
	ДатаДокументаИзмененаВручную = Истина;
	СброситьФлагСкидкиРассчитаныКлиент("ДатаПриИзменении");
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Организация.
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении();
	Компания = СтруктураДанные.Компания;
	Если Объект.ВалютаДокумента = СтруктураДанные.БанковскийСчетВалютаДенежныхСредств Тогда
		Объект.БанковскийСчет = СтруктураДанные.БанковскийСчет;
	КонецЕсли;
	
	Объект.Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
	ОбработатьИзменениеДоговора();
	
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ВидОперации.
//
&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ОбработатьИзменениеВидаОперации();
	ОбработатьИзменениеДоговора();
	
	// ДисконтныеКарты
	ВидОперацииПередИзменением = ВидОперации;
	ВидОперации = Объект.ВидОперации;
	
	Если ВидОперацииПередИзменением <> Объект.ВидОперации Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу") Тогда
			Элементы.СчитатьДисконтнуюКарту.Видимость = Истина;
		Иначе
			Если Не Объект.ДисконтнаяКарта.Пустая() Тогда
				Объект.ДисконтнаяКарта = ПредопределенноеЗначение("Справочник.ДисконтныеКарты.ПустаяСсылка");
				Объект.ПроцентСкидкиПоДисконтнойКарте = 0;
				СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
				ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);				
			КонецЕсли;
			Элементы.СчитатьДисконтнуюКарту.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Конец ДисконтныеКарты
	
КонецПроцедуры // ВидОперацииПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
// Выполняет очистку договора и табличной части.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		ДанныеДоговора = ПолучитьДанныеКонтрагентПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.Контрагент, Объект.Организация);
		// ДисконтныеКарты
		ДанныеДоговора.Вставить("ВызовИзПроцедурыПриИзмененииКонтрагента", Истина);
		// Конец ДисконтныеКарты
		Объект.Договор = ДанныеДоговора.Договор;
		ОбработатьИзменениеДоговора(ДанныеДоговора);
		
	Иначе
		
		Объект.Договор = Договор; // Восстанавливаем автоматически очищеный договор.
		
	КонецЕсли;
	
	// АвтоматическиеСкидки
	СброситьФлагСкидкиРассчитаныКлиент("КонтрагентПриИзменении");
	
	//EFSOL_oks_kry_19.03.2015 11:16:48_BEGIN
	ЗаполнитьРеквизитыДаннымиЗаказчика();
	УстановитьНастройкиСогласноГалкеЗаказчикИОтправительОдноЛицо();
	//EFSOL_oks_kry_19.03.2015 11:16:48_END     	
	
	СтруктураЗона = ЗаполнениеЗоныПриИзмененииНаСервере();
	Объект.ES_ЗонаДоставки = СтруктураЗона.Зона;
	Объект.ES_СрокДоставки = СтруктураЗона.СрокДоставки;
	
	//EFSOL_Шаповал Олег Анатольевич 12 сентября 2017 г. 18:48:21 +	
	ЭР_ЗаполнитьДопУслугиПоДоговоруНаСервере();
	ЭР_ОбновитьСтоимостьВсехУслуг();
	ES_ПроверкаЗаполненияСтоимостиТК();
	ES_УстановитьВидиомстьВидКонтрагента();
	//EFSOL Шаповал О.А. -
	
КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Договор.
// Заполняет реквизиты формы курс и кратность.
//
&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	//Сережко АС +
	//СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	//добавим товары из договора
	ЭР_ЗаполнитьДопУслугиПоДоговоруНаСервере();
	ЭР_ОбновитьСтоимостьВсехУслуг();
	//EFSOL Шаповал О.А. -	
	ОбработатьИзменениеДоговора();
	ES_ПроверкаЗаполненияСтоимостиТК();

	ПересчитатьРКО();
	
КонецПроцедуры // ДоговорПриИзменении(

&НаСервере
Процедура ЭР_ЗаполнитьДопУслугиПоДоговоруНаСервере ()
	
	//EFSOL_Шаповал Олег Анатольевич 15 сентября 2017 г. 8:48:07 +
	мОбъект = РеквизитФормыВЗначение("Объект");
	мОбъект.Запасы.Очистить();
	ES_ОбщегоНазначения.ЭР_ЗаполнитьДопУслугиПоДоговору(мОбъект);
	ЗначениеВРеквизитФормы(мОбъект,"Объект");
	
	//EFSOL Шаповал О.А. -
	
КонецПроцедуры
	

&НаКлиенте
Процедура ЭР_ОбновитьСтоимостьВсехУслуг ()
	
	//EFSOL_Шаповал Олег Анатольевич 16 марта 2017 г. 17:58:47 +
	ЭР_ОбновитьСтоимостьДоставкиНаСервере();
	//EFSOL Шаповал О.А. -	
	
	
	Если Объект.ES_ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.ДвериДвери") тогда  		
		ЭР_ДобавитьУслугуСбора(); 		
	КонецЕсли;     	
	
	СтартНастройки = ES_ОбщегоНазначения.ПолучитьВсеСтартовыеНастройки();
	УслугаДоставки = СтартНастройки.УслугаДоставки;
	
	ЭР_ДобавитьУслугиСтраховки();
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		Если СтрокаТабличнойЧасти.Номенклатура = УслугаДоставки Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяЦена = ЭР_ОбновитьУслугиТЧДоставкиНаСервере(СтрокаТабличнойЧасти.Номенклатура,УслугаДоставки);
		СтрокаТабличнойЧасти.Цена = ?(НоваяЦена.Количество() <> 0, НоваяЦена[0],  0);
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;
		СтрокаТабличнойЧасти.ДатаОтгрузки = ТекущаяДата();
		РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
		
		// Всего.
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	КонецЦикла;	
	
	ЭР_ДобавитьУслугиНП();
	//ЭР_ДобавитьУслугиСтраховки();
	
	//Сережко АС -
	
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Договор.
//
&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбораДоговора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор, Объект.ВидОперации);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ТипДенежныхСредств.
//
&НаКлиенте
Процедура ТипДенежныхСредствПриИзменении(Элемент)
	
	УстановитьТекущуюСтраницу();
	
КонецПроцедуры // ТипДенежныхСредствПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ОтразитьВПлатежномКалендаре.
//
&НаКлиенте
Процедура ЗапланироватьОплатуПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступностьОтЗапланироватьОплату();
	
	Если Объект.ЗапланироватьОплату
		И Объект.ПлатежныйКалендарь.Количество() = 0 Тогда
		НоваяСтрока = Объект.ПлатежныйКалендарь.Добавить();
		НоваяСтрока.ДатаОплаты = Объект.Дата + ПолучитьСрокОплатыПокупателя(Объект.Договор) * 86400;
		НоваяСтрока.ПроцентОплаты = 100;
		НоваяСтрока.СуммаОплаты = Объект.Запасы.Итог("Всего");
		НоваяСтрока.СуммаНДСОплаты = Объект.Запасы.Итог("СуммаНДС");
		Элементы.ПлатежныйКалендарь.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	ИначеЕсли НЕ Объект.ЗапланироватьОплату
		И Объект.ПлатежныйКалендарь.Количество() > 0 Тогда
		Объект.ПлатежныйКалендарь.Очистить();
	КонецЕсли;
	
КонецПроцедуры // ЗапланироватьОплатуПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ПлатежныйКалендарьПроцентОплаты.
//
&НаКлиенте
Процедура ПлатежныйКалендарьПроцентОплатыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПлатежныйКалендарь.ТекущиеДанные;
	ПроцентОплатыИтог = Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты");
	
	Если ПроцентОплатыИтог > 100 Тогда
		ТекущаяСтрока.ПроцентОплаты = ТекущаяСтрока.ПроцентОплаты - (ПроцентОплатыИтог - 100);
	КонецЕсли;
	
	ТекущаяСтрока.СуммаОплаты = (Окр(Объект.Запасы.Итог("Всего") * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1));
	ТекущаяСтрока.СуммаНДСОплаты = Окр(Объект.Запасы.Итог("СуммаНДС") * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	
КонецПроцедуры // ПлатежныйКалендарьПроцентОплатыПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ПлатежныйКалендарьСуммаОплаты.
//
&НаКлиенте
Процедура ПлатежныйКалендарьСуммаОплатыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПлатежныйКалендарь.ТекущиеДанные;
	
	ЗапасыИтог = Объект.Запасы.Итог("Всего");
	ПлатежныйКалендарьИтог = Объект.ПлатежныйКалендарь.Итог("СуммаОплаты");
	
	Если ПлатежныйКалендарьИтог > ЗапасыИтог Тогда
		ТекущаяСтрока.СуммаОплаты = ТекущаяСтрока.СуммаОплаты - (ПлатежныйКалендарьИтог - ЗапасыИтог);
	КонецЕсли;
	
	ТекущаяСтрока.ПроцентОплаты = ?(ЗапасыИтог = 0, 0, Окр(ТекущаяСтрока.СуммаОплаты / ЗапасыИтог * 100, 2, 1));
	ТекущаяСтрока.СуммаНДСОплаты = Окр(Объект.Запасы.Итог("СуммаНДС") * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	
КонецПроцедуры // ПлатежныйКалендарьСуммаОплатыПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ПлатежныйКалендарьСуммаНДСОплаты.
//
&НаКлиенте
Процедура ПлатежныйКалендарьСуммаНДСОплатыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПлатежныйКалендарь.ТекущиеДанные;
	
	ЗапасыИтог = Объект.Запасы.Итог("СуммаНДС");
	ПлатежныйКалендарьИтог = Объект.ПлатежныйКалендарь.Итог("СуммаНДСОплаты");
	
	Если ПлатежныйКалендарьИтог > ЗапасыИтог Тогда
		ТекущаяСтрока.СуммаНДСОплаты = ТекущаяСтрока.СуммаНДСОплаты - (ПлатежныйКалендарьИтог - ЗапасыИтог);
	КонецЕсли;
	
КонецПроцедуры // ПлатежныйКалендарьСуммаНДСОплатыПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СостояниеЗаказа.
//
&НаКлиенте
Процедура СостояниеЗаказаПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступностьОтСостояния();
	
КонецПроцедуры // СостояниеЗаказаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	//EFSOL_oks_kry_18.03.2015 22:13:08_BEGIN
	//СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Добавить в ТЧ "Товары" Услугу доставки
	Если ТипЗнч(Элемент) = Тип("Структура") Тогда
		НайденнаяСтрока = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура", Элемент.УслугаДоставки));
		Если НайденнаяСтрока.Количество() > 0 Тогда
			СтрокаТабличнойЧасти = НайденнаяСтрока[0];
			СтрокаТабличнойЧасти.Характеристика = Элемент.ХарактеристикаУслуги;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Элемент) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		СтрокаТабличнойЧасти = Элемент;
	Иначе
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли; 
	
	//EFSOL_Шаповал Олег Анатольевич 5 сентября 2017 г. 8:40:44 +
	Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	//EFSOL Шаповал О.А. -
	
	// установить ДатаОтгрузки
	СтрокаТабличнойЧасти.ДатаОтгрузки = Объект.ES_ДатаДоставки;
	//EFSOL_oks_kry_18.03.2015 22:13:08_END
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
		
	КонецЕсли;
	
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);		
	// Конец ДисконтныеКарты
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	//Сережко АС +
	//Несторук С.И 21.09.2017+
	НоваяЦена = новый Массив;

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		НоваяЦена = ЭР_ОбновитьУслугиТЧДоставкиНаСервере(СтрокаТабличнойЧасти.Номенклатура);
	ИначеЕсли НоваяЦена.Количество() = 0 Тогда
		
		НоваяЦена = новый Массив;
		НоваяЦена.Добавить(0);
	Иначе 
		НоваяЦена = новый Массив;
		НоваяЦена.Добавить(0);

	КонецЕсли;
	//Несторук С.И 21.09.2017-
	СтрокаТабличнойЧасти.Цена = ?(НоваяЦена[0] <> 0, НоваяЦена[0],  СтруктураДанные.Цена);
	//Сережко АС -
	СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.Содержание = "";
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
	СтрокаТабличнойЧасти.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
	
	//EFSOL_oks_kry_18.03.2015 22:20:46_BEGIN
	//РассчитатьСуммуВСтрокеТабличнойЧасти();
	Если ТипЗнч(Элемент) = Тип("Структура")
		ИЛИ ТипЗнч(Элемент) = Тип("ДанныеФормыЭлементКоллекции")
		Тогда
		
		СтрокаТабличнойЧасти.Количество 	= 1;
		СтрокаТабличнойЧасти.ДатаОтгрузки 	= Объект.ES_ДатаДоставки;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти(, СтрокаТабличнойЧасти);
		
	Иначе
		РассчитатьСуммуВСтрокеТабличнойЧасти();
	КонецЕсли;
	//EFSOL_oks_kry_18.03.2015 22:20:46_END
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Характеристика.
//
&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки", 		Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", 	Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС",	Объект.СуммаВключаетНДС);
		
		СтруктураДанные.Вставить("СтавкаНДС", 	СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("Цена", 		СтрокаТабличнойЧасти.Цена);
		
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.Содержание = "";
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыХарактеристикаПриИзменении()

// Процедура - обработчик события АвтоПодбор поля ввода Содержание.
//
&НаКлиенте
Процедура ЗапасыСодержаниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		ШаблонСодержания = УправлениеНебольшойФирмойСервер.ПолучитьТекстСодержания(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ШаблонСодержания);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // ЗапасыКоличествоПриИзменении()

// Процедура - обработчик события ОбработкаВыбора поля ввода ЕдиницаИзмерения.
//
&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;	
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли; 		
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыЕдиницаИзмеренияОбработкаВыбора()

// Процедура - обработчик события ПриИзменении поля ввода Цена.
//
&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	//EFSOL_oks_kry_19.03.2015 12:48:35_BEGIN
	Если ТипЗнч(Элемент) = Тип("Число") Тогда
		Элементы.Запасы.ТекущаяСтрока = Элемент;
	КонецЕсли; 
	//EFSOL_oks_kry_19.03.2015 12:48:35_END
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // ЗапасыЦенаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ПроцентСкидкиНаценки.
//
&НаКлиенте
Процедура ЗапасыПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // ЗапасыПроцентСкидкиНаценкиПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Скидка.
	Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / ((1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100) * СтрокаТабличнойЧасти.Количество);
	КонецЕсли;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
	
	СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 0;
	СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0;
	СтрокаТабличнойЧасти.ОбщаяСуммаСкидкиБольшеСуммы = Ложь;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры // ЗапасыСуммаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
&НаКлиенте
Процедура ЗапасыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры  // ЗапасыСтавкаНДСПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
&НаКлиенте
Процедура ЗапасыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // ЗапасыСуммаНДСПриИзменении()

// Процедура - обработчик события ПриОкончанииРедактирования табличной части Запасы.
//
&НаКлиенте
Процедура ЗапасыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // ЗапасыПриОкончанииРедактирования()

// Процедура - обработчик события ПослеУдаления табличной части Запасы.
//
&НаКлиенте
Процедура ЗапасыПослеУдаления(Элемент)
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныКлиент("УдалениеСтроки");
	
КонецПроцедуры // ЗапасыПослеУдаления()

// Процедура - обработчик события НачалоВыбора поля ввода БанковскийСчет.
//
&НаКлиенте
Процедура БанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Договор) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбораБанковскогоСчета(Объект.Договор, Объект.Организация, НациональнаяВалюта);
	Если ПараметрыФормы.РасчетыВУсловныхЕдиницах Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры


// Получает структуру параметров формы выбора банковского счета.
//
&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбораБанковскогоСчета(Договор, Организация, НациональнаяВалюта)
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "ВалютаРасчетов, РасчетыВУсловныхЕдиницах");
	
	СписокВалют = Новый СписокЗначений;
	СписокВалют.Добавить(РеквизитыДоговора.ВалютаРасчетов);
	СписокВалют.Добавить(НациональнаяВалюта);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РасчетыВУсловныхЕдиницах", РеквизитыДоговора.РасчетыВУсловныхЕдиницах);
	ПараметрыФормы.Вставить("Владелец", Организация);
	ПараметрыФормы.Вставить("СписокВалют", СписокВалют);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования списка .ПлатежныйКалендарь
//
&НаКлиенте
Процедура ПлатежныйКалендарьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущаяСтрока = Элементы.ПлатежныйКалендарь.ТекущиеДанные;
		ПроцентОплатыИтог = Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты");
		
		Если ПроцентОплатыИтог > 100 Тогда
			ТекущаяСтрока.ПроцентОплаты = ТекущаяСтрока.ПроцентОплаты - (ПроцентОплатыИтог - 100);
		КонецЕсли;
		
		ТекущаяСтрока.СуммаОплаты = Окр(Объект.Запасы.Итог("Всего") * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
		ТекущаяСтрока.СуммаНДСОплаты = Окр(Объект.Запасы.Итог("СуммаНДС") * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	КонецЕсли;
	
КонецПроцедуры // ПлатежныйКалендарьПриНачалеРедактирования()

// Процедура - обработчик события ПередУдалением табличной части ПлатежныйКалендарь.
//
&НаКлиенте
Процедура ПлатежныйКалендарьПередУдалением(Элемент, Отказ)
	
	Если Объект.ПлатежныйКалендарь.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПлатежныйКалендарьПередУдалением()

// Процедура - обработчик события ПриИзменении поля ввода СписокПлатежныйКалендарьПроцентОплаты.
//
&НаКлиенте
Процедура СписокПлатежныйКалендарьПроцентОплатыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПлатежныйКалендарь.ТекущиеДанные;
	ПроцентОплатыИтог = Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты");
	
	Если ПроцентОплатыИтог > 100 Тогда
		ТекущаяСтрока.ПроцентОплаты = ТекущаяСтрока.ПроцентОплаты - (ПроцентОплатыИтог - 100);
	КонецЕсли;
	
	ТекущаяСтрока.СуммаОплаты = Окр(Объект.Запасы.Итог("Всего") * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	ТекущаяСтрока.СуммаНДСОплаты = Окр(Объект.Запасы.Итог("СуммаНДС") * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	
КонецПроцедуры // СписокПлатежныйКалендарьПроцентОплатыПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СписокПлатежныйКалендарьСуммаОплаты.
//
&НаКлиенте
Процедура СписокПлатежныйКалендарьСуммаОплатыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПлатежныйКалендарь.ТекущиеДанные;
	ЗапасыИтог = Объект.Запасы.Итог("Всего");
	ПлатежныйКалендарьИтог = Объект.ПлатежныйКалендарь.Итог("СуммаОплаты");
	
	Если ПлатежныйКалендарьИтог > ЗапасыИтог Тогда
		ТекущаяСтрока.СуммаОплаты = ТекущаяСтрока.СуммаОплаты - (ПлатежныйКалендарьИтог - ЗапасыИтог);
	КонецЕсли;
	
	ТекущаяСтрока.ПроцентОплаты = ?(ЗапасыИтог = 0, 0, Окр(ТекущаяСтрока.СуммаОплаты / ЗапасыИтог * 100, 2, 1));
	ТекущаяСтрока.СуммаНДСОплаты = Окр(Объект.Запасы.Итог("СуммаНДС") * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	
КонецПроцедуры // СписокПлатежныйКалендарьСуммаОплатыПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СписокПлатежныйКалендарьСуммаНДСОплаты.
//
&НаКлиенте
Процедура СписокПлатежныйКалендарьСуммаНДСОплатыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПлатежныйКалендарь.ТекущиеДанные;
	
	ЗапасыИтог = Объект.Запасы.Итог("СуммаНДС");
	ПлатежныйКалендарьИтог = Объект.ПлатежныйКалендарь.Итог("СуммаНДСОплаты");
	
	Если ПлатежныйКалендарьИтог > ЗапасыИтог Тогда
		ТекущаяСтрока.СуммаНДСОплаты = ТекущаяСтрока.СуммаНДСОплаты - (ПлатежныйКалендарьИтог - ЗапасыИтог);
	КонецЕсли;
	
КонецПроцедуры // СписокПлатежныйКалендарьСуммаНДСОплатыПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОДСКАЗКИ

&НаКлиенте
Процедура СтатусРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Обработка.ПанельАдминистрированияУНФ.Форма.РазделПродажи");
	
КонецПроцедуры

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
// Процедура-обработчик результата открытия формы "Цены и валюты"
//
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") 
		И РезультатЗакрытия.БылиВнесеныИзменения Тогда
		
		Модифицированность = Истина;
		
		Если Объект.ВалютаДокумента <> РезультатЗакрытия.ВалютаДокумента Тогда
			
			Объект.БанковскийСчет = Неопределено;
			
		КонецЕсли;
		
		Объект.ВидЦен = РезультатЗакрытия.ВидЦен;
		Объект.ВидСкидкиНаценки = РезультатЗакрытия.ВидСкидки;
		// ДисконтныеКарты
		Если ЗначениеЗаполнено(РезультатЗакрытия.ДисконтнаяКарта) И ЗначениеЗаполнено(РезультатЗакрытия.Контрагент) И Не Объект.Контрагент.Пустая() Тогда
			Если РезультатЗакрытия.Контрагент = Объект.Контрагент Тогда
				Объект.ДисконтнаяКарта = РезультатЗакрытия.ДисконтнаяКарта;
				Объект.ПроцентСкидкиПоДисконтнойКарте = РезультатЗакрытия.ПроцентСкидкиПоДисконтнойКарте;
			Иначе // Выдадим сообщение и не будем менять данные о дисконтной карте.
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Дисконтная карта не считана. Владелец дисконтной карты не совпадает с контрагентом в документе.'"),
				,
				"Контрагент",
				"Объект");
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(РезультатЗакрытия.ДисконтнаяКарта) И ЗначениеЗаполнено(РезультатЗакрытия.Контрагент) И Объект.Контрагент.Пустая() Тогда
			Объект.Контрагент = РезультатЗакрытия.Контрагент;
			КонтрагентПриИзменении(Элементы.Контрагент); // Данные о дисконтной карте в этой процедуре очищаются.
			Объект.ДисконтнаяКарта = РезультатЗакрытия.ДисконтнаяКарта;
			Объект.ПроцентСкидкиПоДисконтнойКарте = РезультатЗакрытия.ПроцентСкидкиПоДисконтнойКарте;
			
			ПоказатьОповещениеПользователя(
			НСтр("ru = 'Заполнен контрагент и считана дисконтная карта'"),
			ПолучитьНавигационнуюСсылку(Объект.ДисконтнаяКарта),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В документе заполнен контрагент и считана дисконтная карта %1'"), Объект.ДисконтнаяКарта),
			БиблиотекаКартинок.Информация32);
		Иначе
			Объект.ДисконтнаяКарта = РезультатЗакрытия.ДисконтнаяКарта;
			Объект.ПроцентСкидкиПоДисконтнойКарте = РезультатЗакрытия.ПроцентСкидкиПоДисконтнойКарте;
		КонецЕсли;
		// Конец ДисконтныеКарты
		Объект.ВалютаДокумента = РезультатЗакрытия.ВалютаДокумента;
		Объект.Курс = РезультатЗакрытия.КурсРасчетов;
		Объект.Кратность = РезультатЗакрытия.КратностьРасчетов;
		Объект.СуммаВключаетНДС = РезультатЗакрытия.СуммаВключаетНДС;
		//EFSOL_oks_kry_21.04.2015 10:54:23_BEGIN  // ЗАКОММЕНТИРОВАНО
		//Объект.НДСВключатьВСтоимость = РезультатЗакрытия.НДСВключатьВСтоимость;
		//EFSOL_oks_kry_21.04.2015 10:54:23_END
		Объект.НалогообложениеНДС = РезультатЗакрытия.НалогообложениеНДС;
		//EFSOL_oks_kry_21.04.2015 10:50:40_BEGIN
		Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
			Объект.НДСВключатьВСтоимость = Ложь;
			Элементы.ЗапасыИтогСуммаНДС.Видимость = Ложь;
		Иначе
			Объект.НДСВключатьВСтоимость = Истина;
		КонецЕсли; 
		//EFSOL_oks_kry_21.04.2015 10:50:40_END 
		ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
		
		// Пересчитываем цены по виду цен.
		Если РезультатЗакрытия.ПерезаполнитьЦены Тогда
			
			УправлениеНебольшойФирмойКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтаФорма, "Запасы", Истина);
			
		КонецЕсли;
		
		// Пересчитываем цены по валюте.
		Если НЕ РезультатЗакрытия.ПерезаполнитьЦены
			И РезультатЗакрытия.ПересчитатьЦены Тогда
			
			УправлениеНебольшойФирмойКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтаФорма, ВалютаРасчетовПередИзменением, "Запасы");
			
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак Налогообложение НДС.
		Если РезультатЗакрытия.НалогообложениеНДС <> РезультатЗакрытия.ПредНалогообложениеНДС Тогда
			
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
			
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если НЕ РезультатЗакрытия.ПерезаполнитьЦены
			И НЕ РезультатЗакрытия.СуммаВключаетНДС = РезультатЗакрытия.ПредСуммаВключаетНДС Тогда
			
			УправлениеНебольшойФирмойКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтаФорма, "Запасы");
			
		КонецЕсли;
		
		// ДисконтныеКарты
		Если РезультатЗакрытия.ПерезаполнитьСкидки И НЕ РезультатЗакрытия.ПерезаполнитьЦены Тогда
			УправлениеНебольшойФирмойКлиент.ПерезаполнитьСкидкиТабличнойЧастиПослеСчитыванияДисконтнойКарты(ЭтаФорма, "Запасы");
		КонецЕсли;
		// Конец ДисконтныеКарты
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			
			СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
			СтрокаТабличнойЧасти.СуммаРасчетов,
			СтрокаТабличнойЧасти.Курс,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
			СтрокаТабличнойЧасти.Кратность,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КратностьНациональнаяВалюта, Объект.Кратность));
			
		КонецЦикла;
		
		// Сформируем надпись цены и валюты.
		СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте",
		Объект.ВидЦен,
		Объект.ВидСкидкиНаценки,
		Объект.ВалютаДокумента,
		ВалютаРасчетов,
		Объект.Курс,
		КурсНациональнаяВалюта,
		Объект.СуммаВключаетНДС,
		УчетВалютныхОпераций,
		Объект.НалогообложениеНДС,
		Объект.ДисконтнаяКарта,
		Объект.ПроцентСкидкиПоДисконтнойКарте);
		
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
		// АвтоматическиеСкидки
		Если РезультатЗакрытия.ПерезаполнитьСкидки ИЛИ РезультатЗакрытия.ПерезаполнитьЦены ИЛИ РезультатЗакрытия.ПересчитатьЦены Тогда
			СброситьФлагСкидкиРассчитаныКлиент("ПерезаполнениеПоДаннымФормыЦеныИВалюта");
		КонецЕсли;
	КонецЕсли;
	
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // ОткрытьФормуЦеныИВалютаЗавершение()

&НаКлиенте
// Процедура-обработчик ответа на вопрос о необходимости установки нового курса валюты
//
Процедура ОпределитьНеобходимостьУстановкиНовогоКурсаВалюты(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		
		Объект.Курс = ДополнительныеПараметры.КурсНовый;
		Объект.Кратность = ДополнительныеПараметры.КратностьНовый;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			
			СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
			СтрокаТабличнойЧасти.СуммаРасчетов,
			СтрокаТабличнойЧасти.Курс,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
			СтрокаТабличнойЧасти.Кратность,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КратностьНациональнаяВалюта, Объект.Кратность));  
			
		КонецЦикла;
		
		СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", 
		Объект.ВидЦен, 
		Объект.ВидСкидкиНаценки, 
		Объект.ВалютаДокумента, 
		ВалютаРасчетов, 
		Объект.Курс, 
		КурсНациональнаяВалюта, 
		Объект.СуммаВключаетНДС, 
		УчетВалютныхОпераций, 
		Объект.НалогообложениеНДС,
		Объект.ДисконтнаяКарта,
		Объект.ПроцентСкидкиПоДисконтнойКарте
		);
		
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьНеобходимостьУстановкиНовогоКурсаВалюты()

&НаКлиенте
// Процедура-обработчик ответа на вопрос о пересчете документа по данным договора
//
Процедура ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		
		ДанныеДоговора = ДополнительныеПараметры.ДанныеДоговора;
		
		Если ДополнительныеПараметры.ПересчетНеобходимПоЗапасам Тогда
			
			УправлениеНебольшойФирмойКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтаФорма, "Запасы", Истина);
			
		КонецЕсли;
		
		Если ДополнительныеПараметры.ПересчетНеобходимПоРаботам Тогда
			
			ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен();
			
		КонецЕсли;
		
		ПересчитатьПлатежныйКалендарь();
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора()

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ДисконтныеКарты

// Процедура - обработчик выбора дисконтной карты, начало.
//
&НаКлиенте
Процедура ВыбранаДисконтнаяКарта(ДисконтнаяКарта)
	
	ВладелецДисконтнойКарты = ПолучитьВладельцаДисконтнойКарты(ДисконтнаяКарта);
	Если Объект.Контрагент.Пустая() И Не ВладелецДисконтнойКарты.Пустая() Тогда
		Объект.Контрагент = ВладелецДисконтнойКарты;
		КонтрагентПриИзменении(Элементы.Контрагент);
		
		ПоказатьОповещениеПользователя(
		НСтр("ru = 'Заполнен контрагент и считана дисконтная карта'"),
		ПолучитьНавигационнуюСсылку(ДисконтнаяКарта),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В документе заполнен контрагент и считана дисконтная карта %1'"), ДисконтнаяКарта),
		БиблиотекаКартинок.Информация32);
	ИначеЕсли Объект.Контрагент <> ВладелецДисконтнойКарты И Не ВладелецДисконтнойКарты.Пустая() Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		НСтр("ru = 'Дисконтная карта не считана. Владелец дисконтной карты не совпадает с контрагентом в документе.'"),
		,
		"Контрагент",
		"Объект");
		
		Возврат;
	Иначе
		ПоказатьОповещениеПользователя(
		НСтр("ru = 'Считана дисконтная карта'"),
		ПолучитьНавигационнуюСсылку(ДисконтнаяКарта),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Считана дисконтная карта %1'"), ДисконтнаяКарта),
		БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВыбранаДисконтнаяКартаДополнительно(ДисконтнаяКарта);
	
КонецПроцедуры

// Процедура - обработчик выбора дисконтной карты, окончание.
//
&НаКлиенте
Процедура ВыбранаДисконтнаяКартаДополнительно(ДисконтнаяКарта)
	
	Если Не Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Объект.ДисконтнаяКарта = ДисконтнаяКарта;
	Объект.ПроцентСкидкиПоДисконтнойКарте = УправлениеНебольшойФирмойСервер.ВычислитьПроцентСкидкиПоДисконтнойКарте(Объект.Дата, ДисконтнаяКарта);
	
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте",
	Объект.ВидЦен,
	Объект.ВидСкидкиНаценки,
	Объект.ВалютаДокумента,
	ВалютаРасчетов,
	Объект.Курс,
	КурсНациональнаяВалюта,
	Объект.СуммаВключаетНДС,
	УчетВалютныхОпераций,
	Объект.НалогообложениеНДС,
	Объект.ДисконтнаяКарта,
	Объект.ПроцентСкидкиПоДисконтнойКарте);
	
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	Если Объект.Запасы.Количество() > 0 Тогда
		Текст = НСтр("ru = 'Перезаполнить скидки во всех строках?'");
		Оповещение = Новый ОписаниеОповещения("ВыбранаДисконтнаяКартаДополнительноЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик выбора дисконтной карты, завершение.
//
&НаКлиенте
Процедура ВыбранаДисконтнаяКартаДополнительноЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		УправлениеНебольшойФирмойКлиент.ПерезаполнитьСкидкиТабличнойЧастиПослеСчитыванияДисконтнойКарты(ЭтаФорма, "Запасы");
		
		// Платежный календарь.
		ПересчитатьПлатежныйКалендарь();
	КонецЕсли;
	
	// АвтоматическиеСкидки
	СброситьФлагСкидкиРассчитаныКлиент("ПересчетСкидокПоДисконтнойКарте");
	
КонецПроцедуры

// Функция возвращает Истина, если дисконтная карта, которая передана в качестве параметра, является фиксированной.
//
&НаСервереБезКонтекста
Функция ЭтоДисконтнаяКартаСФиксированнойСкидкой(ДисконтнаяКарта)
	
	Возврат ДисконтнаяКарта.Владелец.ВидСкидкиВДисконтныхКартах = Перечисления.ВидыСкидокВДисконтныхКартах.ФиксированнаяСкидка;
	
КонецФункции

// Процедура выполняется только для НАКОПИТЕЛЬНЫХ дисконтных карт.
// Процедура пересчитывает скидки документа, после изменения даты документа. Пересчёт выполняется, если процент скидки
// по выбранной дисконтной карте, изменился. 
//
&НаКлиенте
Процедура ПересчитатьПроцентСкидкиПриИзмененииДатыДокумента()
	
	Если Объект.ДисконтнаяКарта.Пустая() ИЛИ ЭтоДисконтнаяКартаСФиксированнойСкидкой(Объект.ДисконтнаяКарта) Тогда
		Возврат;
	КонецЕсли;
	
	ПредПроцентСкидкиПоДисконтнойКарте = Объект.ПроцентСкидкиПоДисконтнойКарте;
	НовПроцентСкидкиПоДисконтнойКарте = УправлениеНебольшойФирмойСервер.ВычислитьПроцентСкидкиПоДисконтнойКарте(Объект.Дата, Объект.ДисконтнаяКарта);
	
	Если ПредПроцентСкидкиПоДисконтнойКарте <> НовПроцентСкидкиПоДисконтнойКарте Тогда
		
		Если Объект.Запасы.Количество() > 0 Тогда
			Текст = НСтр("ru = 'Изминть % скидки по накопительной дисконтной карте с "+ПредПроцентСкидкиПоДисконтнойКарте+"% на "+НовПроцентСкидкиПоДисконтнойКарте+"% и перезаполнить скидки во всех строках?'");
			
			ДополнительныеПараметры = Новый Структура("НовПроцентСкидкиПоДисконтнойКарте, ПересчитатьТЧ", НовПроцентСкидкиПоДисконтнойКарте, Истина);
			Оповещение = Новый ОписаниеОповещения("ПересчитатьПроцентСкидкиПриИзмененииДатыДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Иначе
			Текст = НСтр("ru = 'Изминть % скидки по накопительной дисконтной карте с "+ПредПроцентСкидкиПоДисконтнойКарте+"% на "+НовПроцентСкидкиПоДисконтнойКарте+"%?'");
			
			ДополнительныеПараметры = Новый Структура("НовПроцентСкидкиПоДисконтнойКарте, ПересчитатьТЧ", НовПроцентСкидкиПоДисконтнойКарте, Ложь);
			Оповещение = Новый ОписаниеОповещения("ПересчитатьПроцентСкидкиПриИзмененииДатыДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		КонецЕсли;
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняется только для НАКОПИТЕЛЬНЫХ дисконтных карт.
// Процедура пересчитывает скидки документа, после изменения даты документа. Пересчёт выполняется, если процент скидки
// по выбранной дисконтной карте, изменился. 
//
&НаКлиенте
Процедура ПересчитатьПроцентСкидкиПриИзмененииДатыДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ПроцентСкидкиПоДисконтнойКарте = ДополнительныеПараметры.НовПроцентСкидкиПоДисконтнойКарте;
		
		СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте",
		Объект.ВидЦен,
		Объект.ВидСкидкиНаценки,
		Объект.ВалютаДокумента,
		ВалютаРасчетов,
		Объект.Курс,
		КурсНациональнаяВалюта,
		Объект.СуммаВключаетНДС,
		УчетВалютныхОпераций,
		Объект.НалогообложениеНДС,
		Объект.ДисконтнаяКарта,
		Объект.ПроцентСкидкиПоДисконтнойКарте);
		
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
		Если ДополнительныеПараметры.ПересчитатьТЧ Тогда
			УправлениеНебольшойФирмойКлиент.ПерезаполнитьСкидкиТабличнойЧастиПослеСчитыванияДисконтнойКарты(ЭтаФорма, "Запасы");
			
			// Платежный календарь.
			ПересчитатьПлатежныйКалендарь();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает валдельца дисконтной карты.
//
&НаСервереБезКонтекста
Функция ПолучитьВладельцаДисконтнойКарты(ДисконтнаяКарта)
	
	Возврат ДисконтнаяКарта.ВладелецКарты;
	
КонецФункции

// Процедура - обработчик команды СчитатьДисконтнуюКарту формы.
//
&НаКлиенте
Процедура СчитатьДисконтнуюКартуНажатие(Элемент)
	
	СтруктураПараметров = Новый Структура("Контрагент", Объект.Контрагент);
	ОписаниеОповещения = Новый ОписаниеОповещения("СчитатьДисконтнуюКартуНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ДисконтныеКарты.Форма.СчитываниеДисконтнойКарты", СтруктураПараметров, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Завершающая часть процедуры - обработчика команды СчитатьДисконтнуюКарту формы.
// Вызывается после закрытия формы считывания дисконтной карты.
//
&НаКлиенте
Процедура СчитатьДисконтнуюКартуНажатиеЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	Если ТипЗнч(ВозвращаемыеПараметры) = Тип("Структура") Тогда
		СчитанаДисконтнаяКарта = ВозвращаемыеПараметры.СчитанаДисконтнаяКарта;
		ВыбранаДисконтнаяКарта(ВозвращаемыеПараметры.ДисконтнаяКарта);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АвтоматическиеСкидки

// Процедура - обработчик команды РассчитатьСкидкиНаценки формы.
//
&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Если Объект.СкидкиНаценки.Количество() > 0 Тогда
			Объект.СкидкиНаценки.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	РассчитатьСкидкиНаценкиКлиент();
	
КонецПроцедуры

// Процедура рассчитывает скидки по документу.
//
&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	
КонецПроцедуры

// Функция сравнивает данные расчёта скидок на текущий момент времени с данными последнего расчёт скидок в документе.
// Если скидки изменились, то функция возвращает значение Истина.
//
&НаСервере
Функция СкидкиИзменились()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	СкидкиИзменились = Ложь;
	
	КоличествоСтрок = ПримененныеСкидки.ТаблицаСкидкиНаценки.Количество();
	Если КоличествоСтрок <> Объект.СкидкиНаценки.Количество() Тогда
		СкидкиИзменились = Истина;
	Иначе
		
		Если Объект.Запасы.Итог("СуммаАвтоматическойСкидки") <> Объект.СкидкиНаценки.Итог("Сумма") Тогда
			СкидкиИзменились = Истина;
		КонецЕсли;
		
		Если Не СкидкиИзменились Тогда
			Для НомерСтроки = 1 По КоличествоСтрок Цикл
				Если    Объект.СкидкиНаценки[НомерСтроки-1].Сумма <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].Сумма
					ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].КлючСвязи <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].КлючСвязи
					ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].СкидкаНаценка <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].СкидкаНаценка Тогда
					СкидкиИзменились = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СкидкиИзменились Тогда
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СкидкиИзменились;
	
КонецФункции

// Процедура рассчитывает скидки по документу.
//
&НаСервере
Процедура РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры)
	
	ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
	Модифицированность = Истина;
	
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект, "Запасы");
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
		
		Объект.СкидкиРассчитаны = Истина;
		
	КонецЕсли;
	
	Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
	Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
	
	ЕстьРучныеСкидки = Константы.ФункциональнаяОпцияИспользоватьСкидкиНаценки.Получить();
	Для Каждого ТекущаяСтрока Из Объект.Запасы Цикл
		ТекСуммаРучнойСкидки = ?(ЕстьРучныеСкидки, ТекущаяСтрока.Цена * ТекущаяСтрока.Количество * ТекущаяСтрока.ПроцентСкидкиНаценки / 100, 0);
		ТекСуммаСкидки = ТекСуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
		Если ТекСуммаСкидки >= ТекущаяСтрока.Сумма И ТекущаяСтрока.Цена > 0 Тогда
			ТекущаяСтрока.ОбщаяСуммаСкидкиБольшеСуммы = Истина;
		Иначе
			ТекущаяСтрока.ОбщаяСуммаСкидкиБольшеСуммы = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик команды "ОткрытьИнформациюОСкидках".
//
&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьИнформациюОСкидкахКлиент()
	
КонецПроцедуры

// Процедура открывает общую форму для анализа информации о скидках по текущей строке.
//
&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
		ТекстВопроса = НСтр("ru='Скидки (наценки) не рассчитаны, рассчитать?'");
		
		ДополнительныеПараметры = Новый Структура; 
		ДополнительныеПараметры.Вставить("СтруктураПараметры", СтруктураПараметры);
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросРассчитатьСкидки", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Завершение немодального открытия окна "ПоказатьВопрос()". Процедура открывает общую форму для анализа информации о скидках по текущей строке.
//
&НаКлиенте
Процедура ОповещениеВопросРассчитатьСкидки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	СтруктураПараметры = ДополнительныеПараметры.СтруктураПараметры;
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры);
	
КонецПроцедуры

// Процедура открывает общую форму для анализа информации о скидках по текущей строке после расчета автоматических скидок (если это было необходимо).
//
&НаКлиенте
Процедура РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры)
	
	Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		РассчитатьСкидкиНаценкиКлиент();
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события Выбор табличной части Запасы.
//
&НаКлиенте
Процедура ЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗапасыПроцентАвтоматическойСкидки
		И НЕ ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьИнформациюОСкидкахКлиент()
		
	КонецЕсли;
	
КонецПроцедуры

// Функция сбрасывает флаг "СкидкиРассчитаны", если это необходимо, и возвращает Истина, если требуется пересчёт скидок.
//
&НаСервере
Функция СброситьФлагСкидкиРассчитаныСервер(Действие, КолонокаТЧ = "")
	
	ТребуетсяПересчет = Ложь;
	Если ИспользоватьАвтоматическиеСкидки И Объект.Запасы.Количество() > 0 И (Объект.СкидкиРассчитаны ИЛИ УстановленСерыйЦвет) Тогда
		ТребуетсяПересчет = СброситьФлагСкидкиРассчитаны(Действие, КолонокаТЧ);
	КонецЕсли;
	Возврат ТребуетсяПересчет;
	
КонецФункции

// Функция сбрасывает флаг "СкидкиРассчитаны", если это необходимо, и возвращает Истина, если требуется пересчёт скидок.
//
&НаКлиенте
Функция СброситьФлагСкидкиРассчитаныКлиент(Действие, КолонокаТЧ = "")
	
	ТребуетсяПересчет = Ложь;
	Если ИспользоватьАвтоматическиеСкидки И Объект.Запасы.Количество() > 0 И (Объект.СкидкиРассчитаны ИЛИ УстановленСерыйЦвет) Тогда
		ТребуетсяПересчет = СброситьФлагСкидкиРассчитаны(Действие, КолонокаТЧ);
	КонецЕсли;
	Возврат ТребуетсяПересчет;
	
КонецФункции

// Функция сбрасывает флаг СкидкиРассчитаны, если это необходимо, и возвращает Истина, если требуется пересчёт скидок.
//
&НаСервере
Функция СброситьФлагСкидкиРассчитаны(Действие, КолонокаТЧ = "")
	
	Возврат СкидкиНаценкиСервер.СброситьФлагСкидкиРассчитаны(ЭтотОбъект, Действие, КолонокаТЧ);
	
КонецФункции

// Процедура выполняет действия необходимые при создании формы на сервере.
//
&НаСервере
Процедура АвтоматическиеСкидкиПриСозданииНаСервере()
	
	УстановленСерыйЦвет = Ложь;
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки");
	Если ИспользоватьАвтоматическиеСкидки Тогда
		Если Объект.Запасы.Количество() = 0 Тогда
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьСерый;
			УстановленСерыйЦвет = Истина;
		ИначеЕсли НЕ Объект.СкидкиРассчитаны Тогда
			Объект.СкидкиРассчитаны = Ложь;
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьКрасный;
		Иначе
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования табличной части Запасы формы.
//
&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.ПроцентАвтоматическойСкидки = 0;
		Элемент.ТекущиеДанные.СуммаАвтоматическойСкидки = 0;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//EFSOL_oks_kry_18.03.2015 21:42:31_BEGIN
#Область EFSOL_СлужбаДоставки

//*************************************************************************************
//**	СОБЫТИЯ ЭЛЕМЕНТОВ ФОРМЫ
//*************************************************************************************

&НаКлиенте
Процедура ES_ЗаказчикКонтактноеЛицоПриИзменении(Элемент)
	
	ЗаполнитьДаннымиПоЗаказчикуИКонтЛицуНаСервере(Объект.ES_ЗаказчикКонтактноеЛицо);
	УстановитьНастройкиСогласноГалкеЗаказчикИОтправительОдноЛицо();
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ЗаказчикКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		СтандартнаяОбработка = Ложь;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Поле ""Заказчик"" не заполнено";
		Сообщение.Поле = "Объект.Контрагент";
		Сообщение.Сообщить(); 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ВидДоставкиПриИзменении(Элемент)
	
	УстановитьВидимостьВЗависимостиОтВидаДоставки();
	
	// Дата доставки и забора
	Если ES_ДеньДоставкиПоУмолчанию = ПредопределенноеЗначение("Перечисление.ES_ДниДоставки.Сегодня") Тогда
		ДатаДоставкиПоУмолчанию = ДатаДокумента;
	Иначе
		ДатаДоставкиПоУмолчанию = ДатаДокумента + 86400;
	КонецЕсли; 
	
	Объект.ES_ДатаДоставки = КонецДня(ДатаДоставкиПоУмолчанию);
	
	Если Элементы.ES_ГруппаЗабор.Видимость Тогда
		Объект.ES_ЗаборДата = НачалоДня(ДатаДоставкиПоУмолчанию);
	Иначе
		Объект.ES_ЗаборДата = '00010101';
	КонецЕсли;
	
	Если Объект.ES_ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.ДвериДвери") Тогда
		ВидЗабораПоУмолчанию = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(ПредопределенноеЗначение("Перечисление.ES_ВидыСтартовыхНастроек.ВидЗабора"));
		Объект.ES_ВидЗабора = ?(ЗначениеЗаполнено(ВидЗабораПоУмолчанию), ВидЗабораПоУмолчанию, ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.НаСклад"));
	КонецЕсли; 
	
		
	//ЭР Несторук С.И. 09.02.2017 14:19:05 {
	Если Объект.ES_ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.Самовывоз")
		ИЛИ Объект.ES_ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.СкладСклад") Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ES_АдресСкладаДоставки) Тогда
			Объект.ES_СкладДоставки = Объект.ES_Склад;
		КонецЕсли;
		
	КонецЕсли;
	//ЭР Несторук С.И. 09.02.2017 14:19:05 }
	
	//ЭР Несторук С.И. 11.12.2018 12:59:04 {
	ES_ОбновитьНаправление();
	//}ЭР Несторук С.И.
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ЗаказчикИОтправительОдноЛицоПриИзменении(Элемент)
	
	УстановитьНастройкиСогласноГалкеЗаказчикИОтправительОдноЛицо();
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ПодтвержденПриИзменении(Элемент)
	
	Если Объект.ES_Подтвержден Тогда
		Объект.ES_ДанныеПодтверждения = "" + ПользователиКлиентСервер.ТекущийПользователь() + ", " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ""в"" ЧЧ:мм'");
	Иначе
		Объект.ES_ДанныеПодтверждения = "";
	КонецЕсли; 
	
КонецПроцедуры

//ЕФСОЛ Несторук 20.07.2016 + 
&НаКлиенте
Процедура ES_ОтмененЗаказчикомПриИзменении(Элемент)
	
	Если Объект.ES_ОтмененЗаказчиком Тогда
		Объект.ES_ДанныеОтменыЗаказчиком = "" + ПользователиКлиентСервер.ТекущийПользователь() + ", " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ""в"" ЧЧ:мм'");
		//ЭР Несторук С.И. 14.03.2017 15:04:37 {
		//Избавляемся от статусов с припиской (принят)
		//Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		//	ТекСтатус = ES_ОбщегоНазначения.ПолучитьТекСтатусЗаказа(Объект.Ссылка);
		//	Если ТекСтатус = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ПодготовленПринят")
		//		ИЛИ ТекСтатус = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.НазначенПринят") Тогда 
		//		ES_СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ОтмененПринят");
		//	Иначе 
		//		ES_СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Отменен");
		//	КонецЕсли;
		//Иначе
		ES_СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Отменен");
		//КонецЕсли;
		
		//}ЭР Несторук С.И.
		
	Иначе
		Объект.ES_ДанныеОтменыЗаказчиком = "";
		ES_СтатусЗаказа = "";
	КонецЕсли; 
	
	//ES_Савченко К.Р. 29.09.2017 +
		Если Объект.ES_ОтмененЗаказчиком Тогда
		Объект.ES_ДанныеОбработанОтмененЗаказчиком = "" + ПользователиКлиентСервер.ТекущийПользователь() + ", " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ""в"" ЧЧ:мм'");
	Иначе
		Объект.ES_ДанныеОбработанОтмененЗаказчиком = "";
	КонецЕсли;
	//ES_Савченко К.Р. 29.09.2017 -
	
КонецПроцедуры
//ЕФСОЛ Несторук 20.07.2016 -

&НаКлиенте
Процедура ES_ПолучательПриИзменении(Элемент)
	
	ОчиститьДанныеПолучателя = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ES_Получатель) Тогда
		
		ТекПолучатель = ОпределитьКонтрагентаПоИмени(Объект.ES_Получатель);
		
		Если НЕ ТекПолучатель = Неопределено Тогда
			
			//ЗаполнитьДанныеПолучателяНаСервере(ТекПолучатель);
			//ES_АдресДоставкиПриИзменении("Ок");
			
		Иначе
			//ОчиститьДанныеПолучателя = Истина;
		КонецЕсли; 
		
	Иначе
		ОчиститьДанныеПолучателя = Истина;
	КонецЕсли;
	
	Если ОчиститьДанныеПолучателя Тогда
		Объект.ES_ПолучательКонтактноеЛицо 	= "";
		Объект.ES_ПолучательТелефон 		= "";
		Объект.ES_АдресДоставки 			= ES_ГородПоУмолчанию;
		ES_АдресДоставкиXML 				= "";
		ES_АдресДоставкиПриИзменении(Элемент);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Уникальность = "ФормаВыбораПолучателя" + "_" + Объект.Ссылка;
	Оповещение = Новый ОписаниеОповещения("ОбработатьДанныеПолучателя",ЭтаФорма);
	Пар = Новый Структура("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаСписка", Пар , ЭтаФорма, Уникальность, , , Оповещение);
	
КонецПроцедуры


&НаКлиенте
Процедура ES_ПолучательКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.ES_Получатель) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Поле ""Получатель"" не заполнено";
		Сообщение.Поле = "Объект.ES_Получатель";
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли; 
	
	Уникальность = "ФормаВыбораПоКонтрагентуКонтЛицо" + "_" + Объект.Ссылка;
	Оповещение = Новый ОписаниеОповещения("ОбработатьДанныеКонтактногоЛицаПолучателя",ЭтаФорма);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидФормыВыбора", "ВыборКонтактногоЛица");
	СтруктураПараметров.Вставить("Контрагент", Объект.ES_Получатель);
	
	ОткрытьФорму("ОбщаяФорма.ES_ФормаВыбораПоКонтрагенту", СтруктураПараметров, ЭтаФорма, Уникальность, , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ES_АдресДоставкиПриИзменении(Элемент)
	//// Савченко К.Р. 14.09.2017 +
	//Объект.ES_АдресДоставки =""+Объект.ES_Страна+" "+Объект.ES_Индекс+" "+Объект.ES_Область+" "+Объект.ES_Город2+" "+Объект.АдресДоставки;
	//// Савченко К.Р. 14.09.2017 -

	
	Если НЕ ЗначениеЗаполнено(Объект.ES_АдресДоставки) Тогда
		Объект.ES_АдресДоставкиДолгота = "";
		Объект.ES_АдресДоставкиШирота = "";
		Возврат;
	КонецЕсли;
	ЗаполнитьШиротуИДолготуПоАдресу("ES_АдресДоставки");
	
	//ЭР Несторук С.И. 11.12.2018 12:18:46 {
	ES_ОбновитьНаправление();
	//}ЭР Несторук С.И.

КонецПроцедуры

&НаКлиенте
Процедура ES_АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.ES_ИзКЛАДР Тогда
		ПредставлениеАдресаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка,
		"ES_АдресДоставки", НСтр("ru = 'Адрес доставки'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ES_АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	ES_АдресДоставкиXML = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ES_АдресДоставкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.ES_Получатель) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Поле ""Получатель"" не заполнено";
		Сообщение.Поле = "Объект.ES_Получатель";
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли; 
	
	Уникальность = "ФормаВыбораПоКонтрагентуАдрес" + "_" + Объект.Ссылка;
	Оповещение = Новый ОписаниеОповещения("ОбработатьДанныеАдресаПолучателя",ЭтаФорма);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидФормыВыбора", "ВыборАдреса");
	СтруктураПараметров.Вставить("Контрагент", Объект.ES_Получатель);
	
	ОткрытьФорму("ОбщаяФорма.ES_ФормаВыбораПоКонтрагенту", СтруктураПараметров, ЭтаФорма, Уникальность, , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ES_АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПредставлениеАдресаОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, "ES_АдресДоставки");
	ЗначениеРеквизитовПоКонтактнойИнформацииАдресРФ(ES_АдресДоставкиXML);
	ЗаполнитьШиротуИДолготуПоАдресу("ES_АдресДоставки");
	
	РегионОтправитель = ?(Объект.ES_ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.ДвериДвери"), Объект.ES_ЗаборОбластьОтправитель, "");
	мСтруктураНаправлений = ES_ОбщегоНазначения.ПолучитьНаправление(Объект.ES_Город1,Объект.ES_АдресДоставкиГород,РегионОтправитель, Объект.ES_АдресДоставкиОбласть); 
	Направление = мСтруктураНаправлений.Направление;
	Объект.ES_ВнутризональныйКоэф = мСтруктураНаправлений.Коэффициент;
	
	Объект.ES_Направление = Направление;
	СтруктураЗона = ЗаполнениеЗоныПриИзмененииНаСервере();
	Объект.ES_ЗонаДоставки = СтруктураЗона.Зона;
	Объект.ES_СрокДоставки = СтруктураЗона.СрокДоставки;
	//EFSOL_Шаповал Олег Анатольевич 16 марта 2017 г. 17:58:47 +
	ЭР_ОбновитьСтоимостьВсехУслуг();
	//EFSOL Шаповал О.А. -
	//ЕФСОЛ Савченко К.Р. 19.09.2017 +
	//ЗаполнитьES_АдресДоставки();
	ЗаполнитьНаправления();
	
КонецПроцедуры

&НаСервере
Процедура ЗначениеРеквизитовПоКонтактнойИнформацииАдресРФ(ES_АдресДоставкиXML)
	
	ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес;
	мОбъект = РеквизитФормыВЗначение("Объект");
	мОбъект.ES_АдресДоставкиСтрана 	= Справочники.СтраныМира.Россия;
	мОбъект.ES_АдресДоставкиОбласть = "";
	мОбъект.ES_АдресДоставкиГород 	= "";
	мОбъект.ES_АдресДоставкиУлица 	= "";
	мОбъект.ES_АдресДоставкиДом     = "";
	мОбъект.ES_АдресДоставкиИндекс  = "";
	мОбъект.ES_АдресДоставкиСтроение= "";
	мОбъект.ES_АдресДоставкиКорпус  = "";
	мОбъект.ES_АдресДоставкиКвартира= "";
	

	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ES_АдресДоставкиXML) Тогда
		ДанныеАдреса = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ES_АдресДоставкиXML, ТипКонтактнойИнформации, "");
		мОбъект.ES_АдресДоставкиСтрана = Справочники.СтраныМира.Россия;
		Если ТипЗнч(ДанныеАдреса) = Тип("ОбъектXDTO") Тогда
			Если ДанныеАдреса.Состав.Состав <> Неопределено Тогда
				мГород = ?(ЗначениеЗаполнено(ДанныеАдреса.Состав.Состав.Город),ДанныеАдреса.Состав.Состав.Город,ДанныеАдреса.Состав.Состав.СубъектРФ);
				мОбласть = ?(ЗначениеЗаполнено(ДанныеАдреса.Состав.Состав.Город),ДанныеАдреса.Состав.Состав.СубъектРФ,"");
				мОбъект.ES_АдресДоставкиУлица = ДанныеАдреса.Состав.Состав.Улица;
			КонецЕсли;
		Иначе
			мГород = "";
			мОбласть ="";
			мОбъект.ES_АдресДоставкиУлица = "";
		КонецЕсли;
		
		//мОбъект.ES_АдресДоставкиГород = ДанныеАдреса.Состав.Состав.СубъектРФ;
		мОбъект.ES_АдресДоставкиГород = СтрЗаменить(мГород," г","");
		мОбъект.ES_АдресДоставкиОбласть = СтрЗаменить(мОбласть," обл","");
        мОбъект.ES_АдресДоставкиУлица = СтрЗаменить(мОбъект.ES_АдресДоставкиУлица," ул","");
		
		//ДанныеАдреса = 
		
		// Индекс просто ставим
		мОбъект.ES_АдресДоставкиИндекс = Формат(Обработки.РасширенныйВводКонтактнойИнформации.ПочтовыйИндексАдреса(ДанныеАдреса), "ЧГ=");
		
		//СформироватьДетальныйНаселенныйПункт(Контекст, ДанныеАдреса);
		
		// Дом, строение, помещение
		ЗданияИПомещения = Обработки.РасширенныйВводКонтактнойИнформации.ЗданияИПомещенияАдреса(ДанныеАдреса);
		
		// Первые два здания выделяем отдельно, остальное в списке.
		ТаблицаДанных = ЗданияИПомещения.Здания;
		
		// Вид = 1 - признак дома, владения. Вид = 2, доп строение.
		СтрокаДома = ТаблицаДанных.Найти(1, "Вид");
		Если СтрокаДома <> Неопределено Тогда
			//мОбъект.ТипДома = СтрокаДома.Тип;
			мОбъект.ES_АдресДоставкиДом     = СтрокаДома.Значение;
			//ТаблицаДанных.Удалить(СтрокаДома);
		Иначе
			мОбъект.ES_АдресДоставкиДом     = "";
		КонецЕсли;
		
		СтрокаДома = ТаблицаДанных.Найти(2, "Вид");
		Если СтрокаДома <> Неопределено Тогда
			//мОбъект.ТипСтроения = СтрокаДома.Тип;
			мОбъект.ES_АдресДоставкиСтроение    = СтрокаДома.Значение;
			//ТаблицаДанных.Удалить(СтрокаДома);
		Иначе
			мОбъект.ES_АдресДоставкиСтроение    = "";
		КонецЕсли;
				
		// Первое помещение указываем отдельно, остальные в списке.
		ТаблицаДанных = ЗданияИПомещения.Помещения;
		Для каждого СТ_ТаблицаДанных ИЗ ТаблицаДанных Цикл 
			Если СТ_ТаблицаДанных.Тип = "Квартира" Тогда
				мОбъект.ES_АдресДоставкиКвартира    = ТаблицаДанных[0].Значение;
			ИначеЕсли СТ_ТаблицаДанных.Тип = "Корпус" Тогда
				мОбъект.ES_АдресДоставкиКорпус    = ТаблицаДанных[0].Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЗначениеВРеквизитФормы(мОбъект,"Объект");
КонецПроцедуры

&НаКлиенте
Процедура АдресПредупреждениеНажатие(Элемент)
	
	ПоказатьПредупреждение(, Элемент.Подсказка);
	
КонецПроцедуры

&НаКлиенте
Процедура ES_СкладДоставкиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ES_СкладДоставки) Тогда
		Объект.ES_АдресСкладаДоставки = ПолучитьФактическийАдресСкладаДоставки(Объект.ES_СкладДоставки);
		ES_АдресСкладаДоставкиПриИзменении(Элемент);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ES_АдресСкладаДоставкиПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ES_АдресСкладаДоставки) Тогда
		Объект.ES_АдресДоставкиДолгота = "";
		Объект.ES_АдресДоставкиШирота = "";
		Возврат;
	КонецЕсли;
	ЗаполнитьШиротуИДолготуПоАдресу("ES_АдресСкладаДоставки");
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ДатаДоставкиПриИзменении(Элемент)
	
	УстановитьЗначениеДатыОтгрузки();
	ДоставкаВыходногоДняНаСервере(Объект.ES_ДатаДоставки);

	
КонецПроцедуры

&НаКлиенте
Процедура ES_ВремяДоставкиСПриИзменении(Элемент)
	
	Если Объект.ES_ВремяДоставкиС > Объект.ES_ВремяДоставкиПо Тогда
		Объект.ES_ВремяДоставкиПо = Объект.ES_ВремяДоставкиС + 3600;
	КонецЕсли;    	
	
	ПозднееВремяНаСервере();  	
	
КонецПроцедуры

&НаКлиенте
Процедура ES_УстановитьЦветСрочности()
	Если ЗначениеЗаполнено(Объект.ES_ЦветМетки) Тогда 
		мМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Объект.ES_ЦветМетки,"#");
		Если мМассив.Количество() = 2 Тогда
			RGBМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(мМассив[1],",");
			Элементы.ES_СрочностьДоставки.ЦветТекста = Новый Цвет(RGBМассив[0],RGBМассив[1],RGBМассив[2]);
		КонецЕсли;
	Иначе
		Элементы.ES_СрочностьДоставки.ЦветТекста = Новый Цвет();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ES_ВремяДоставкиПоПриИзменении(Элемент)
	
	Если Объект.ES_ВремяДоставкиС > Объект.ES_ВремяДоставкиПо Тогда
		Объект.ES_ВремяДоставкиС = Объект.ES_ВремяДоставкиПо - 3600;
	КонецЕсли; 
	
	ПозднееВремяНаСервере(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ПлательщикПриИзменении(Элемент)
	
	//Если Объект.ES_Плательщик_Удалить = ПредопределенноеЗначение("Перечисление.ES_ТипыПлательщиков.Получатель") Тогда
	//	Объект.ES_ВидОплаты = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Наличные");
	//КонецЕсли; 
	
	ВидимостьПолейВЗависимостиОтТипаПлательщика();
	ЗаполнениеЗаказчикаВЗависимостиОтТипаПлательщика();
	КонтрагентПриИзменении("Ок");
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ПредставлениеГрузовПриИзменении(Элемент)
	
	ES_ПредставлениеГрузовДоИзменения = ES_ПредставлениеГрузов;
	ES_ПредставлениеГрузов = Объект.ES_ПредставлениеГрузов;
	
	Если Объект.ES_Грузы.Количество() ИЛИ Объект.ES_СписокГрузов.Количество() Тогда
		
		ТекстСообщения = НСтр("ru = 'Табличная часть Грузы будет очищена. Продолжить?'");
		Описание = Новый ОписаниеОповещения("ОбработкаВопросаОчисткиТЧГрузы", ЭтотОбъект, ES_ПредставлениеГрузовДоИзменения);
		
		ПоказатьВопрос(Описание, ТекстСообщения, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
	Иначе
		
		// Установка текущей страницы грузов
		УстановитьТекСтраницуПредставленияГрузов();
		
	КонецЕсли;
	
КонецПроцедуры

// Забор грузов
&НаКлиенте
Процедура ES_ЗаборОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Уникальность = "ФормаВыбораОтправителя" + "_" + Объект.Ссылка;
	Оповещение = Новый ОписаниеОповещения("ОбработатьДанныеОтправителя",ЭтаФорма);
	
	Пар = Новый Структура("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаСписка", Пар , ЭтаФорма, Уникальность, , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ЗаборКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.ES_ЗаборОтправитель) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Поле ""Отправитель"" не заполнено";
		Сообщение.Поле = "Объект.ES_ЗаборОтправитель";
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли; 
	
	Уникальность = "ФормаВыбораПоКонтрагентуКонтЛицоОтправителя" + "_" + Объект.Ссылка;
	Оповещение = Новый ОписаниеОповещения("ОбработатьДанныеКонтактногоЛицаОтправителя",ЭтаФорма);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидФормыВыбора", "ВыборКонтактногоЛица");
	СтруктураПараметров.Вставить("Контрагент", Объект.ES_ЗаборОтправитель);
	
	ОткрытьФорму("ОбщаяФорма.ES_ФормаВыбораПоКонтрагенту", СтруктураПараметров, ЭтаФорма, Уникальность, , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ЗаборАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПредставлениеАдресаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка,
	"ES_ЗаборАдрес", НСтр("ru = 'Адрес забора'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ЗаборАдресОчистка(Элемент, СтандартнаяОбработка)
	
	ES_ЗаборАдресXML = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ЗаборАдресОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.ES_ЗаборОтправитель) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Поле ""Отправитель"" не заполнено";
		Сообщение.Поле = "Объект.ES_ЗаборОтправитель";
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли; 
	
	Уникальность = "ФормаВыбораПоКонтрагентуАдрес" + "_" + Объект.Ссылка;
	Оповещение = Новый ОписаниеОповещения("ОбработатьДанныеАдресаОтправителя",ЭтаФорма);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидФормыВыбора", "ВыборАдреса");
	СтруктураПараметров.Вставить("Контрагент", Объект.ES_ЗаборОтправитель);
	
	ОткрытьФорму("ОбщаяФорма.ES_ФормаВыбораПоКонтрагенту", СтруктураПараметров, ЭтаФорма, Уникальность, , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ЗаборАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПредставлениеАдресаОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, "ES_ЗаборАдрес");
	ЗначениеРеквизитовПоКонтактнойИнформацииАдресЗабораРФ(ES_ЗаборАдресXML);
	ЗаполнитьШиротуИДолготуПоАдресу("ES_ЗаборАдрес");
	мСтруктураНаправлений = ES_ОбщегоНазначения.ПолучитьНаправление(Объект.ES_Город1,Объект.ES_АдресДоставкиГород); 
	Направление = мСтруктураНаправлений.Направление;
	
	
	Объект.ES_Направление = Направление;
	СтруктураЗона = ЗаполнениеЗоныПриИзмененииНаСервере();
	Объект.ES_ЗонаДоставки = СтруктураЗона.Зона;
	Объект.ES_СрокДоставки = СтруктураЗона.СрокДоставки;
	//EFSOL_Шаповал Олег Анатольевич 16 марта 2017 г. 17:58:47 +
	ЭР_ОбновитьСтоимостьВсехУслуг();
	//EFSOL Шаповал О.А. -
	//ЕФСОЛ Савченко К.Р. 19.09.2017 +
	//ЗаполнитьES_АдресДоставки();
	ЗаполнитьНаправления();

КонецПроцедуры

&НаКлиенте
Процедура ES_ЗаборАдресПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ES_ЗаборАдрес) Тогда
		Объект.ES_ЗаборАдресДолгота = "";
		Объект.ES_ЗаборАдресШирота = "";
		Возврат;
	КонецЕсли;
	ЗаполнитьШиротуИДолготуПоАдресу("ES_ЗаборАдрес");
	
	//ЭР Несторук С.И. 11.12.2018 12:18:46 {
	ES_ОбновитьНаправление();
	//}ЭР Несторук С.И.

КонецПроцедуры

&НаКлиенте
Процедура ES_ЗаборВремяСПриИзменении(Элемент)
	
	Если Объект.ES_ЗаборВремяС > Объект.ES_ЗаборВремяПо Тогда
		Объект.ES_ЗаборВремяПо = Объект.ES_ЗаборВремяС + 3600;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ЗаборВремяПоПриИзменении(Элемент)
	
	Если Объект.ES_ЗаборВремяС > Объект.ES_ЗаборВремяПо Тогда
		Объект.ES_ЗаборВремяС = Объект.ES_ЗаборВремяПо - 3600;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ИсторияЗаборПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ИсторияЗаборПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры


//*************************************************************************************
//**	ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ	
//*************************************************************************************

&НаСервере
Процедура УстановитьВидимостьИДоступностьПолейДоставки()
	
	ЕстьПроведенныйПлан = Ложь;
	ЕстьПроведенныйОтчет = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_СведенияОЗаказахСрезПоследних.Заказ,
	|	ES_СведенияОЗаказахСрезПоследних.ПланДоставки,
	|	ES_СведенияОЗаказахСрезПоследних.ОтчетОДоставке
	|ИЗ
	|	РегистрСведений.ES_СведенияОЗаказах.СрезПоследних(, Заказ = &Заказ) КАК ES_СведенияОЗаказахСрезПоследних";
	
	Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.ПланДоставки) Тогда
				ЕстьПроведенныйПлан = Истина;
			КонецЕсли; 
			Если ЗначениеЗаполнено(Выборка.ОтчетОДоставке) Тогда
				ЕстьПроведенныйОтчет = Истина;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	
	// Курьер
	// если заказ в проведенном документе План доставки или Отчет о доставке, запрет редактирования Курьер
	Элементы.ES_Курьер.ТолькоПросмотр = ЕстьПроведенныйПлан;
	
	// ТрекНомер и Расходы
	// после проведения отчета курьера редактировать ТрекНомер и Расходы в заказе нельзя
	Элементы.ES_ТрекНомер.ТолькоПросмотр = ЕстьПроведенныйОтчет;
	Элементы.ES_Расходы.ТолькоПросмотр = ЕстьПроведенныйОтчет;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьИДоступностьЭлементовДоставкиНаКлиенте(ЭтоСоздание = Ложь)
	
	// Видимость Статус заказа
	Элементы.ES_СтатусЗаказа.Видимость = ЗначениеЗаполнено(ES_СтатусЗаказа);
	
	// Видимость ES_СсылкаНаДокДоставки ЕФСОЛ Несторук 10.10.2016 - Закомментировано
	//Элементы.ES_СсылкаНаДокДоставки.Видимость = ЗначениеЗаполнено(ES_СсылкаНаДокДоставки);
	
	// Видимость ES_СсылкаНаГрупповойЗабор
	Элементы.ES_СсылкаНаГрупповойЗаборГруза.Видимость = ЗначениеЗаполнено(ES_СсылкаНаГрупповойЗаборГруза);
	
	// Видимость Факт доставки
	Элементы.ES_ФактДоставки.Видимость = ЗначениеЗаполнено(ES_ФактДоставки);
	
	//Склад и ячейка хранения
	//Элементы.ГруппаХранение.Видимость = ЗначениеЗаполнено(Ячейка); 
	Элементы.Склад.Видимость = ЗначениеЗаполнено(Склад); 
	Элементы.Ячейка.Видимость = ЗначениеЗаполнено(Ячейка);
	Элементы.КурьерХранение.Видимость = ЗначениеЗаполнено(КурьерХранение);

	УстановитьВидимостьВЗависимостиОтВидаДоставки(ЭтоСоздание);
	УстановитьНастройкиСогласноГалкеЗаказчикИОтправительОдноЛицо(ЭтоСоздание);
	
	// ВидОплаты, Плательщик ТретьеЛицо, Зказчик (спр.)
	ВидимостьПолейВЗависимостиОтТипаПлательщика();
	
	// Страница представления грузов
	УстановитьТекСтраницуПредставленияГрузов();
	
	// Поле НДС
	Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
		Элементы.ЗапасыИтогСуммаНДС.Видимость = Ложь;
	КонецЕсли;
	
	// ТЧ Грузы
	// если заказ доставки есть в проведенных документах, запрещаем редактировать объекты доставки
	Если ЗначениеЗаполнено(ES_СсылкаНаДокДоставки) Тогда
		Элементы.ES_ГруппаГрузы.ТолькоПросмотр = Истина;
		Элементы.Ответственный.ТолькоПросмотр = Истина;
	КонецЕсли; 
	
	// Доступность формы
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Состояние заказа должно быть всегда доступно для редактирования
		Если ПроверитьНаличиеПКОПоЗаказу(Объект.Ссылка) Тогда
			Элементы.Контрагент.ТолькоПросмотр					= Истина;
			Элементы.ES_ЗаказчикКонтактноеЛицо.ТолькоПросмотр	= Истина;
			Элементы.ES_ЗаказчикТелефон.ТолькоПросмотр			= Истина;
			Элементы.Договор.ТолькоПросмотр						= Истина;
			Элементы.Проект.ТолькоПросмотр						= Истина;
			Элементы.ДатаОтгрузки.ТолькоПросмотр				= Истина;
			Элементы.ПраваяКолонка.ТолькоПросмотр				= Истина;
			Элементы.ГруппаПримечаниеКЗаказу.ТолькоПросмотр		= Истина;
			
			Элементы.ES_ДеталиЗаказа.ТолькоПросмотр				= Истина;
			Элементы.ГруппаЗапасы.ТолькоПросмотр 				= Истина;
			Элементы.ES_ГруппаГрузы.ТолькоПросмотр 				= Истина;
			Элементы.ES_ГруппаЗабор.ТолькоПросмотр 				= Истина;
			Элементы.ES_ГруппаИстория.ТолькоПросмотр 			= Истина;
			Элементы.ГруппаПлатежныйКалендарь.ТолькоПросмотр 	= Истина;
			Элементы.ГруппаДополнительно.ТолькоПросмотр 		= Истина;
			Элементы.Подвал.ТолькоПросмотр 						= Истина;
			Элементы.ИнформационныеСсылки.ТолькоПросмотр 		= Истина;
			
			// Кнопкам отключить доступность
			Элементы.ПоказатьИнформациюПоКонтрагенту.Доступность 	= Ложь;
			//Элементы.ЗДЗапасыПоискПоШтрихкоду.Доступность 		= Ложь;
			//Элементы.ЗДЗапасыЗагрузитьДанныеИзТСД.Доступность 	= Ложь;
			//Элементы.ЗДЗапасыПолучитьВес.Доступность 			= Ложь;
			//Элементы.ЗДЗапасыПодбор.Доступность 				= Ложь;
			//Элементы.ЗДЗапасыИзменитьРезерв.Доступность 		= Ложь;
			//Элементы.ЗД_ОтразитьАдресКомплектацииНаКарте.Доступность = Ложь;
			//Элементы.ЗДРедактироватьЦеныИВалюту.Доступность 	= Ложь;
		КонецЕсли; 
	КонецЕсли;
	
	//ЕФСОЛ Несторук 10.10.2016 +
	Элементы.ES_СсылкаНаЗабор.Видимость = ЗначениеЗаполнено(ES_СсылкаНаЗабор);
	Элементы.ES_ФактЗабора.Видимость = ЗначениеЗаполнено(ES_ФактЗабора);
	Элементы.ES_СсылкаНаОтчет.Видимость = ЗначениеЗаполнено(ES_СсылкаНаОтчет);
	Элементы.ES_ФИОПолучателя.Видимость = ЗначениеЗаполнено(ES_ФИОПолучателя);
	Элементы.ES_СсылкаНаДокРасходнаяНакладная.Видимость = ЗначениеЗаполнено(ES_СсылкаНаДокРасходнаяНакладная);
	ES_УстановитьВидиомстьВидКонтрагента();
	//ЕФСОЛ Несторук 10.10.2016 -
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьВЗависимостиОтВидаДоставки(ЭтоСоздание = Ложь)
	
	// видимость и доступность полей Адрес доставки и Адрес склада
	Если  Объект.ES_ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.Самовывоз")Тогда
		//Элементы.ES_ГруппаАдресДоставки.Видимость 	= Ложь;
		Элементы.ES_АдресДоставки.Доступность = Ложь;
		
		Элементы.ES_ПВЗ.Видимость 	= Истина;
		//Элементы.ES_ГруппаАдресСклада.Доступность 	= Истина;
		
		Элементы.ES_Терминал.Видимость = Ложь;
		Элементы.ES_ГруппаЗабор.Видимость 	= Ложь;

		//Элементы.ES_ГруппаАдресТерминала.Доступность = Ложь;
	ИначеЕсли Объект.ES_ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.СкладСклад") Тогда
		Элементы.ES_Терминал.Видимость = Истина;
		Элементы.ES_АдресДоставки.Доступность = Ложь;	
		Элементы.ES_ПВЗ.Видимость 	= Ложь;
		Элементы.ES_ГруппаЗабор.Видимость 	= Ложь;
	ИначеЕсли Объект.ES_ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.ДвериДвери") Тогда
		Элементы.ES_ГруппаЗабор.Видимость = Истина;
		Элементы.ES_ЗаказчикИОтправительОдноЛицо.Видимость = Истина;
		Элементы.ES_ЗаказчикИПолучательОдноЛицо.Видимость = Ложь;
		//Объект.ES_ЗаказчикИПолучательОдноЛицо = Ложь;
		Элементы.ГруппаИсторияКомплектации.Видимость = Истина;
		УстановитьВидимостьВозврата();
		Элементы.ES_АдресДоставки.Доступность = Истина;
		Элементы.ES_Терминал.Видимость = Ложь;
		Элементы.ES_ПВЗ.Видимость 	= Ложь;		
	Иначе
		Элементы.ES_ГруппаЗабор.Видимость = Ложь;
		
		Элементы.ES_ЗаказчикИОтправительОдноЛицо.Видимость = Ложь;
		Объект.ES_ЗаказчикИОтправительОдноЛицо = Ложь;
		УстановитьНастройкиСогласноГалкеЗаказчикИОтправительОдноЛицо();
		
		Элементы.ES_ЗаказчикИПолучательОдноЛицо.Видимость = Истина;
		Элементы.ГруппаИсторияКомплектации.Видимость = Ложь;
		
		УстановитьНастройкиСогласноГалкеЗаказчикИПолучательОдноЛицо(ЭтоСоздание);
		Элементы.ES_АдресДоставки.Доступность = Истина;
		Элементы.ES_Терминал.Видимость = Ложь;
		Элементы.ES_ПВЗ.Видимость 	= Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНастройкиСогласноГалкеЗаказчикИОтправительОдноЛицо(ЭтоСоздание = Ложь)
	
	Если Объект.ES_ЗаказчикИОтправительОдноЛицо Тогда
		
		// Значения полей
		Объект.ES_ЗаборОтправитель = ?(ЗначениеЗаполнено(Объект.Контрагент), Объект.Контрагент, "");
		Объект.ES_ЗаборКонтактноеЛицо = ?(ЗначениеЗаполнено(Объект.ES_ЗаказчикКонтактноеЛицо), Объект.ES_ЗаказчикКонтактноеЛицо, "");
		Объект.ES_ЗаборТелефон = ?(ЗначениеЗаполнено(Объект.ES_ЗаказчикТелефон), Объект.ES_ЗаказчикТелефон, "");
		
		Если НЕ ЗначениеЗаполнено(Объект.ES_ЗаборАдрес) И ЗначениеЗаполнено(Объект.Контрагент) И НЕ ЭтоСоздание Тогда
			// Заполнить Адресом доставки
			Объект.ES_ЗаборАдрес = ПолучитьАдресДоставкиНаСервере(Объект.Контрагент);
			Если ЗначениеЗаполнено(Объект.ES_ЗаборАдрес) Тогда
				ES_ЗаборАдресXML = ПолучитьКонтактнуюИнформациювXML(Объект.ES_ЗаборАдрес); 
			КонецЕсли;
			ЗначениеРеквизитовПоКонтактнойИнформацииАдресЗабораРФ(ES_ЗаборАдресXML);

			ES_ЗаборАдресПриИзменении("Ок");
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНастройкиСогласноГалкеЗаказчикИПолучательОдноЛицо(ЭтоСоздание = Ложь)
	
	Если Объект.ES_ЗаказчикИПолучательОдноЛицо Тогда
		
		// Значения полей
		Объект.ES_Получатель = ?(ЗначениеЗаполнено(Объект.Контрагент), Объект.Контрагент, "");
		Объект.ES_ПолучательКонтактноеЛицо = ?(ЗначениеЗаполнено(Объект.ES_ЗаказчикКонтактноеЛицо), Объект.ES_ЗаказчикКонтактноеЛицо, "");
		//Объект.ES_ПолучательТелефон = ?(ЗначениеЗаполнено(Объект.ES_ЗаказчикТелефон), Объект.ES_ЗаказчикТелефон, "");
		Если ЗначениеЗаполнено(Объект.ES_ЗаказчикТелефон) И НЕ ЗначениеЗаполнено(Объект.ES_ПолучательТелефон) Тогда
			Объект.ES_ПолучательТелефон = Объект.ES_ЗаказчикТелефон;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Контрагент) и НЕ ЭтоСоздание Тогда // И НЕ ЗначениеЗаполнено(Объект.ES_АдресДоставки)
			// Заполнить Адресом доставки
			Объект.ES_АдресДоставки = ПолучитьАдресДоставкиНаСервере(Объект.Контрагент);
			ES_АдресДоставкиXML = ПолучитьКонтактнуюИнформациювXML(Объект.ES_АдресДоставки); 
			ЗначениеРеквизитовПоКонтактнойИнформацииАдресРФ(ES_АдресДоставкиXML);
			ES_АдресДоставкиГородПриИзменении("ок");
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКонтактнуюИнформациювXML(Адрес)

	 Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(Адрес,Перечисления.ТипыКонтактнойИнформации.Адрес);

КонецФункции // ПолучитьКонтактнуюИнформациювXML()


&НаКлиенте
Процедура ВидимостьПолейВЗависимостиОтТипаПлательщика()
	
	// ВидОплаты и Заказчик (спр.)
	//Если Объект.ES_Плательщик_Удалить = ПредопределенноеЗначение("Перечисление.ES_ТипыПлательщиков.Получатель")
	//	ИЛИ Объект.ES_Плательщик_Удалить = ПредопределенноеЗначение("Перечисление.ES_ТипыПлательщиков.ТретьеЛицо") Тогда
	//	Элементы.ES_ВидОплаты.ТолькоПросмотр = Истина;
	//	Элементы.ES_СправочноЗаказчик.Видимость = Истина;
	//	Элементы.ES_ЗаказчикКонтактноеЛицо.Видимость = Ложь;
	//	Элементы.ES_ЗаказчикТелефон.Видимость = Ложь;
	//Иначе
		Элементы.ES_ВидОплаты.ТолькоПросмотр 	= Ложь;
		Элементы.ES_СправочноЗаказчик.Видимость = Ложь;
		Элементы.ES_ЗаказчикКонтактноеЛицо.Видимость = Истина;
		Элементы.ES_ЗаказчикТелефон.Видимость = Истина;
	//КонецЕсли; 
	//ЕФСОЛ Несторук 16.08.2016 +  Закомментированно
	// ТретьеЛицо
	//Если Объект.ES_Плательщик = ПредопределенноеЗначение("Перечисление.ES_ТипыПлательщиков.ТретьеЛицо") Тогда
	//	Элементы.ES_ГруппаПлательщикТретье.Видимость = Истина;
	//Иначе
	//	Элементы.ES_ГруппаПлательщикТретье.Видимость = Ложь;
	//КонецЕсли; 
	//ЕФСОЛ Несторук 16.08.2016 -
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекСтраницуПредставленияГрузов()
	
	//ЭР Несторук С.И. 20.12.2016 12:05:43 закомментировано {
	//ТекущаяСтр = Элементы.ES_СтраницаМеста;
	//Если Объект.ES_ПредставлениеГрузов = ПредопределенноеЗначение("Перечисление.ES_ПредставлениеГрузов.Места") Тогда
	//	ТекущаяСтр = Элементы.ES_СтраницаМеста;
	//ИначеЕсли Объект.ES_ПредставлениеГрузов = ПредопределенноеЗначение("Перечисление.ES_ПредставлениеГрузов.Запасы") Тогда 
	//	ТекущаяСтр = Элементы.ES_СтраницаЗапасы;
	//КонецЕсли; 
	//Элементы.ES_СтраницыПредставленияГруз.ТекущаяСтраница = ТекущаяСтр;
	
	//ЭР Несторук С.И. 20.12.2016 12:05:43 }
	
КонецПроцедуры

//*************************************************************************************
//**	СОБЫТИЯ КОМАНД ФОРМЫ
//*************************************************************************************

&НаКлиенте
Процедура ES_ОтразитьАдресДоставкиНаКарте(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ES_АдресДоставки) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Адрес не указан";
		Сообщение.Поле = "Объект.ES_АдресДоставки";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли; 
	
	Уникальность = "ФормаОпределенияКоординат" + "_" + Объект.Ссылка;
	//Оповещение = Новый ОписаниеОповещения("ОбработатьКоординатыАдреса",ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ОбработатьАдресДоставкиПоКоординатам",ЭтаФорма);
	
	СтруктураКоординат = Новый Структура("Долгота, Широта, Адрес, Метро", Объект.ES_АдресДоставкиДолгота, Объект.ES_АдресДоставкиШирота, Объект.ES_АдресДоставки, Объект.ES_ПолучательРегион);	
	
	ОткрытьФорму("ОбщаяФорма.ES_ФормаОпределенияКоординат", СтруктураКоординат, ЭтаФорма, Уникальность, , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ОтразитьАдресЗабораНаКарте(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ES_ЗаборАдрес) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Адрес не указан";
		Сообщение.Поле = "Объект.ES_ЗаборАдрес";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли; 
	
	Уникальность = "ФормаОпределенияКоординат" + "_" + Объект.Ссылка;
	//Оповещение = Новый ОписаниеОповещения("ОбработатьКоординатыАдресаЗабора",ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ОбработатьАдресЗабораПоКоординатам",ЭтаФорма);
	
	СтруктураКоординат = Новый Структура("Долгота, Широта, Адрес, Метро", Объект.ES_ЗаборАдресДолгота, Объект.ES_ЗаборАдресШирота, Объект.ES_ЗаборАдрес, Объект.ES_ЗаборРегион);	
	
	ОткрытьФорму("ОбщаяФорма.ES_ФормаОпределенияКоординат", СтруктураКоординат, ЭтаФорма, Уникальность, , , Оповещение);
	
КонецПроцедуры

// Штрихкоды грузов
&НаКлиенте
Процедура ES_ГрузыПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ES_ПоискПоШтрихкодуЗавершение", ЭтотОбъект, Новый Структура("ТекШтрихкод", ТекШтрихкод)), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ES_ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // ПоискПоШтрихкоду()

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ES_ПолученыШтрихкоды(ДанныеШтрикодов)
	
	Модифицированность = Истина;
	
	НеизвестныеШтрихкоды = ES_ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов);
	
	ВозвращаемыеПараметры = Неопределено;
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтаФорма, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
		"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
		Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтаФорма,,,,Оповещение
		);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Функция ES_ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрикодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрикодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрикодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	// Конец ДисконтныеКарты
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
			И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		Иначе
			МассивСтрокТЧ = Объект.ES_Грузы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,Партия,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.Партия,ДанныеШтрихкода.ЕдиницаИзмерения));
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				
				НоваяСтрока = Объект.ES_Грузы.Добавить();
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				НоваяСтрока.ПроцентСкидкиНаценки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроцентСкидкиНаценки;
				//НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				//НоваяСтрока.Спецификация = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Спецификация;
				
				//НоваяСтрока.ТипНоменклатурыЗапас = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоЗапас;
				
				ES_РассчитатьСуммуВСтрокеТабличнойЧасти("ES_Грузы", НоваяСтрока);
				Элементы.ES_Грузы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				
			Иначе
				
				НайденнаяСтрока = МассивСтрокТЧ[0];
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + ТекШтрихкод.Количество;
				ES_РассчитатьСуммуВСтрокеТабличнойЧасти("ES_Грузы", НайденнаяСтрока);
				Элементы.ES_Грузы.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НеизвестныеШтрихкоды;
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ES_РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти = "ES_Грузы", СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	КонецЕсли;
	
	// Сумма.
	СтрокаТабличнойЧасти.НППлан = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	// Скидки.
	Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
		СтрокаТабличнойЧасти.НППлан = 0;
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.НППлан = СтрокаТабличнойЧасти.НППлан * (1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
	КонецЕсли;
	
	ПересчитатьНаложенныйПлатеж();
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()	

//*************************************************************************************
//**	ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ СПИСОК ГРУЗОВ (МЕСТА)
//*************************************************************************************

&НаКлиенте
Процедура ES_СписокГрузовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.ES_СписокГрузов.ТекущиеДанные.КлючСтроки = Новый УникальныйИдентификатор;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ES_СписокГрузовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УдалитьПустыеСтрокиТЧГрузы();
	
	ПересчитатьОбщийВес();
	ПересчитатьОбщийОбъемныйВес();
	ПересчитатьНаложенныйПлатеж();
	ПересчитатьКоличествоМест();
	ПересчитатьСтраховку();
	
	ИзменитьЗаголовокТЧГрузы();
	ЭР_ОбновитьСтоимостьВсехУслуг();
	
КонецПроцедуры

&НаКлиенте
Процедура ES_СписокГрузовПослеУдаления(Элемент)
	
	ПересчитатьОбщийВес();
	ПересчитатьОбщийОбъемныйВес();
	ПересчитатьНаложенныйПлатеж();
	ПересчитатьКоличествоМест();
	ПересчитатьСтраховку();
	
	ИзменитьЗаголовокТЧГрузы();
	ЭР_ОбновитьСтоимостьВсехУслуг();
	
КонецПроцедуры

&НаКлиенте
Процедура ES_СписокГрузовДлинаПриИзменении(Элемент)
	
	ПересчитатьОбъемныйВес();	
	
КонецПроцедуры

&НаКлиенте
Процедура ES_СписокГрузовВысотаПриИзменении(Элемент)
	
	ПересчитатьОбъемныйВес();	
	
КонецПроцедуры

&НаКлиенте
Процедура ES_СписокГрузовШиринаПриИзменении(Элемент)
	
	ПересчитатьОбъемныйВес();	
	
КонецПроцедуры

//*************************************************************************************
//**	ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ ГРУЗЫ (ЗАПАСЫ)
//*************************************************************************************

&НаКлиенте
Процедура ES_ГрузыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УдалитьПустыеСтрокиТЧГрузы();
	
	//ЭР Несторук С.И. 20.12.2016 12:11:06 {
	Если НЕ Объект.ES_Предоплачен Тогда
		ПересчитатьНаложенныйПлатеж();
	КонецЕсли;
	ПересчитатьСтраховку();
	Если НЕ Объект.ES_Предоплачен Тогда
		ПересчитатьРКО();
	КонецЕсли;
	//ЭР Несторук С.И. 20.12.2016 12:11:06 }
	
	//EFSOL_Шаповал Олег Анатольевич 16 марта 2017 г. 17:58:47 +
	ЭР_ОбновитьСтоимостьВсехУслуг();
	//EFSOL Шаповал О.А. -
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ГрузыПослеУдаления(Элемент)
	
	ПересчитатьНаложенныйПлатеж();
	
	ЭР_ОбновитьСтоимостьВсехУслуг();	
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ГрузыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ES_Грузы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	
	//EFSOL_Шаповал Олег Анатольевич 5 сентября 2017 г. 8:40:44 +
	Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	//EFSOL Шаповал О.А. -
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("Партия", ПолучитьПартиюНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, Объект.Контрагент));
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения 		= СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество 			= 1;         	
	СтрокаТабличнойЧасти.Цена 					= СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.ПроцентСкидкиНаценки 	= СтруктураДанные.ПроцентСкидкиНаценки;
	СтрокаТабличнойЧасти.Содержание 			= "";
	
	СтрокаТабличнойЧасти.ТипНоменклатурыЗапас 	= СтруктураДанные.ЭтоЗапас;
	СтрокаТабличнойЧасти.Партия 				= СтруктураДанные.Партия;
	//ЕФСОЛ Несторук 09-11-16 +
	ДопДанные = ПолучитьДопДанныеПоНоменклатуре(СтрокаТабличнойЧасти.Номенклатура);
	СтрокаТабличнойЧасти.ВесЗаЕдиницу			= ДопДанные.Вес;
	СтрокаТабличнойЧасти.Вес					= ДопДанные.Вес*СтрокаТабличнойЧасти.Количество;
	СтрокаТабличнойЧасти.Опасность				= ДопДанные.Опасность;
	СтрокаТабличнойЧасти.Объем					= ДопДанные.Объем;
	СтрокаТабличнойЧасти.ОбъемныйВес			= ДопДанные.ОбъемныйВес;
	СтрокаТабличнойЧасти.Артикул 				= ДопДанные.Артикул;
	СтрокаТабличнойЧасти.Штрихкод				= ДопДанные.Штрихкод;
	//ЕФСОЛ Несторук 09-11-16 -
	
	ES_РассчитатьСуммыПоСтрокеТЧ(СтрокаТабличнойЧасти);
	
	//ЕФСОЛ Несторук 09-11-16 +
	ПересчитатьРКО();
	ПересчитатьСтраховку();
	//ЕФСОЛ Несторук 09-11-16 -
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ГрузыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ES_Грузы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки", 		Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", 	Объект.ВалютаДокумента);
		//СтруктураДанные.Вставить("СуммаВключаетНДС",	Объект.СуммаВключаетНДС);
		
		//СтруктураДанные.Вставить("СтавкаНДС", 	СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("Цена", 		СтрокаТабличнойЧасти.Цена);
		
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.Содержание = "";
	//СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
	ES_РассчитатьСуммыПоСтрокеТЧ(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ГрузыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ES_Грузы.ТекущиеДанные;
	ES_РассчитатьСуммыПоСтрокеТЧ(СтрокаТабличнойЧасти);
	РассчетСуммыНДС(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ГрузыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ES_Грузы.ТекущиеДанные;
	ES_РассчитатьСуммыПоСтрокеТЧ(СтрокаТабличнойЧасти);
	РассчетСуммыНДС(СтрокаТабличнойЧасти);
	
КонецПроцедуры


//*************************************************************************************
//**	СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ	
//*************************************************************************************

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура ЗаполнитьРеквизитыДоставкиПоУмолчанию()
	
	// Заполнить реквизиты доставки по умолчанию
	ES_АдресДоставкиПриИзменении("Ок");
	
	Если НЕ Объект.ES_ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.Самовывоз") Тогда
		// Добавить в ТЧ "Товары" Услугу доставки
		ДанныеУслугиДоставки = ПолучитьДанныеУслугиДоставки();
		ДанныеУслугиСтраховки = ПолучитьДанныеУслугиСтраховки();
		
		НайденныеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура", ДанныеУслугиДоставки.УслугаДоставки));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТабличнойЧасти = Объект.Запасы.Добавить();
			СтрокаТабличнойЧасти.Номенклатура 	= ДанныеУслугиДоставки.УслугаДоставки;
			СтрокаТабличнойЧасти.Характеристика = ДанныеУслугиДоставки.ХарактеристикаУслуги;
			ЗапасыНоменклатураПриИзменении(ДанныеУслугиДоставки);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗаголовокТЧГрузы()
	
	КоличествоГрузов = 0;
	
	Если Объект.ES_ПредставлениеГрузов = ПредопределенноеЗначение("Перечисление.ES_ПредставлениеГрузов.Места") Тогда
		КоличествоГрузов = Объект.ES_СписокГрузов.Количество();
	ИначеЕсли Объект.ES_ПредставлениеГрузов = ПредопределенноеЗначение("Перечисление.ES_ПредставлениеГрузов.Запасы") Тогда 	
		КоличествоГрузов = Объект.ES_Грузы.Количество();
	КонецЕсли; 
	
	ЗаголовокТЧГрузы = ?(КоличествоГрузов, "Грузы (" + КоличествоГрузов + ")", "Грузы");
	Элементы.ES_ГруппаГрузы.Заголовок = ЗаголовокТЧГрузы;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШиротуИДолготуПоАдресу(ПолеАдреса)
	
	Если ES_YandexMaps.ПроверкаИнтернет() Тогда
		
		СтруктураГеокодирования = ES_YandexMaps.ГеокодированияПолучитьКоординаты(Объект[ПолеАдреса]);
		
		Если ПолеАдреса = "ES_АдресДоставки" ИЛИ ПолеАдреса = "ES_АдресСкладаДоставки" Тогда
			Объект.ES_АдресДоставкиДолгота 	= СтруктураГеокодирования.Долгота;
			Объект.ES_АдресДоставкиШирота 	= СтруктураГеокодирования.Широта;
			//ДанныеПоМетро = ПолучитьДанныеПоМетро(СтруктураГеокодирования);
			ДанныеПоМетро = ES_ОбщегоНазначения.ПолучитьДанныеПоМетро(СтруктураГеокодирования);
			Объект.ES_ПолучательРегионРасстояние = ДанныеПоМетро.Расстояние;
			Объект.ES_ПолучательРегион = ДанныеПоМетро.Метро;
			
			Объект.ES_АдресДоставкиГород	=	СтруктураГеокодирования.Город;
			Объект.ES_АдресДоставкиДом		=	СтруктураГеокодирования.Дом;
			Объект.ES_АдресДоставкиИндекс	=	СтруктураГеокодирования.Индекс;
			Объект.ES_АдресЗаборКвартира	= 	?(ЗначениеЗаполнено(СтруктураГеокодирования.Квартира), СтруктураГеокодирования.Квартира, Объект.ES_АдресЗаборКвартира);
			Объект.ES_АдресДоставкиКорпус	= 	?(ЗначениеЗаполнено(СтруктураГеокодирования.Корпус), СтруктураГеокодирования.Корпус, Объект.ES_АдресДоставкиКорпус);
			Объект.ES_АдресДоставкиОбласть	= 	СтруктураГеокодирования.Область;
			Объект.ES_АдресДоставкиСтрана	= 	?(ВРЕГ(СтруктураГеокодирования.Страна) = Врег("Россия"), Справочники.СтраныМира.Россия, Справочники.СтраныМира.НайтиПоНаименованию(СтруктураГеокодирования.Страна));
			Объект.ES_АдресДоставкиСтроение	= 	?(ЗначениеЗаполнено(СтруктураГеокодирования.Строение), СтруктураГеокодирования.Строение, Объект.ES_АдресДоставкиСтроение);
			Объект.ES_АдресДоставкиУлица	=	 СтруктураГеокодирования.Улица;
			
		ИначеЕсли ПолеАдреса = "ES_ЗаборАдрес" Тогда 	
			Объект.ES_ЗаборАдресДолгота = СтруктураГеокодирования.Долгота;
			Объект.ES_ЗаборАдресШирота 	= СтруктураГеокодирования.Широта;
			ДанныеПоМетро = ES_ОбщегоНазначения.ПолучитьДанныеПоМетро(СтруктураГеокодирования);
			Объект.ES_ЗаборРегионРасстояние = ДанныеПоМетро.Расстояние;
			Объект.ES_ЗаборРегион = ДанныеПоМетро.Метро;
			
			Объект.ES_Город1	=	СтруктураГеокодирования.Город;
			Объект.ES_АдресЗаборДом		=	СтруктураГеокодирования.Дом;
			Объект.ES_ЗаборИндексОтправитель	=	СтруктураГеокодирования.Индекс;
			Объект.ES_АдресЗаборКвартира	= 	?(ЗначениеЗаполнено(СтруктураГеокодирования.Квартира), СтруктураГеокодирования.Квартира, Объект.ES_АдресЗаборКвартира);
			Объект.ES_АдресЗаборКорпус	= 	?(ЗначениеЗаполнено(СтруктураГеокодирования.Корпус), СтруктураГеокодирования.Корпус, Объект.ES_АдресЗаборКорпус);
			Объект.ES_ЗаборОбластьОтправитель	= 	СтруктураГеокодирования.Область;
			Объект.ES_ЗаборСтранаОтправитель	= 	?(ВРЕГ(СтруктураГеокодирования.Страна) = Врег("Россия"), Справочники.СтраныМира.Россия, Справочники.СтраныМира.НайтиПоНаименованию(СтруктураГеокодирования.Страна));
			Объект.ES_АдресЗаборСтроение	= 	?(ЗначениеЗаполнено(СтруктураГеокодирования.Строение), СтруктураГеокодирования.Строение, Объект.ES_АдресЗаборСтроение);
			Объект.ES_ЗаборАдресОтправитель	=	 СтруктураГеокодирования.Улица;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДанныеПоМетро(СтруктураГеокодирования)
	
	//ЕФСОЛ Несторук 05.08.2016 +
	Если ЗначениеЗаполнено(СтруктураГеокодирования.Долгота) И ЗначениеЗаполнено(СтруктураГеокодирования.Широта) Тогда
		PI = 3.1415926535897932; 
		СтруктураПоМетро = ES_YandexMaps.ГеокодированияПолучитьКоординатыМетро(СтруктураГеокодирования);
		
		Lt1 = СтруктураГеокодирования.Долгота;
		Lg1 = СтруктураГеокодирования.Широта;
		
		Lt2 = СтруктураПоМетро.Долгота;
		Lg2 = СтруктураПоМетро.Широта;
		Если ЗначениеЗаполнено(Lt1) И ЗначениеЗаполнено(Lg1) 
			И ЗначениеЗаполнено(Lt2) И ЗначениеЗаполнено(Lg2) И НЕ Lt1=Lt2 И НЕ Lg1 =Lg2 Тогда
			
			abs = (PI*Lg2/180- PI*Lg1/180);
			
			Если abs < 0 Тогда
				abs = abs* -1;
			КонецЕсли;
			Попытка
				dist = 6372797*acos(sin(PI*Lt1/180)*sin(PI*Lt2/180)+ cos(PI*Lt1/180)* cos(PI*Lt2/180)* cos(abs));							
				dist = ""+Окр((dist/1000),2)+" км";
				
				Возврат Новый Структура("Расстоняие, Метро, Линия",dist,ДобавитьМетроНаСервере(СтруктураПоМетро.Имя,СтруктураПоМетро.ЛинияМетро));  
			Исключение
				Возврат Новый Структура("Расстоняие, Метро",0,ПредопределенноеЗначение("Справочник.ES_Регионы.ПустаяСсылка"));
			КонецПопытки;
			
		Иначе
			Возврат Новый Структура("Расстоняие, Метро",0,ПредопределенноеЗначение("Справочник.ES_Регионы.ПустаяСсылка"));
		КонецЕсли;
	Иначе Возврат Новый Структура("Расстоняие, Метро",0,ПредопределенноеЗначение("Справочник.ES_Регионы.ПустаяСсылка"));
	КонецЕсли;
	//ЕФСОЛ Несторук 05.08.2016 -
	
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьРеквизитыДаннымиЗаказчика(КонтЛицо = Неопределено)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗаполнитьДаннымиЗаказчикаПоУмолчанию();
		ЗаполнитьДаннымиПоЗаказчикуИКонтЛицуНаСервере(КонтЛицо);
	КонецЕсли; 		
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустыеСтрокиТЧГрузы()
	
	Если Объект.ES_ПредставлениеГрузов = ПредопределенноеЗначение("Перечисление.ES_ПредставлениеГрузов.Запасы") Тогда
		
		Для каждого Строка Из Объект.ES_Грузы Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
				Объект.ES_Грузы.Удалить(Строка);
			КонецЕсли; 
		КонецЦикла; 
		
	ИначеЕсли Объект.ES_ПредставлениеГрузов = ПредопределенноеЗначение("Перечисление.ES_ПредставлениеГрузов.Места") Тогда
		Для каждого Строка Из Объект.ES_СписокГрузов Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Вес)
				И НЕ ЗначениеЗаполнено(Строка.Высота)
				И НЕ ЗначениеЗаполнено(Строка.Длина)
				И НЕ ЗначениеЗаполнено(Строка.Ширина)
				И НЕ ЗначениеЗаполнено(Строка.НППлан)
				И НЕ ЗначениеЗаполнено(Строка.ОбъемныйВес)
				И НЕ ЗначениеЗаполнено(Строка.ОписаниеГруза)
				И НЕ ЗначениеЗаполнено(Строка.Страховка)
				И НЕ ЗначениеЗаполнено(Строка.ТипГруза)
				Тогда
				Объект.ES_СписокГрузов.Удалить(Строка);
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьОбъемныйВес()
	
	//ЭР Несторук С.И. 29.09.2017 17:11:10 {
	//Теперь габариты указываются в метрах
	//}ЭР Несторук С.И.
	Коэффициент = 6000;
	КоэффициентИзСтартовых = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(ПредопределенноеЗначение("Перечисление.ES_ВидыСтартовыхНастроек.Коэффициент"));
	Если ЗначениеЗаполнено(КоэффициентИзСтартовых) И НЕ КоэффициентИзСтартовых = 0 Тогда
		Коэффициент = КоэффициентИзСтартовых;
	КонецЕсли;
	
	ТекСтрока = Элементы.ES_СписокГрузов.ТекущиеДанные;
	ТекСтрока.Объем = ТекСтрока.Длина * ТекСтрока.Высота * ТекСтрока.Ширина;
	ТекСтрока.ОбъемныйВес = Окр(ТекСтрока.Длина * ТекСтрока.Высота * ТекСтрока.Ширина*(100*100*100) / Коэффициент, 3);
	
КонецПроцедуры

&НаКлиенте
Процедура ES_РассчитатьСуммыПоСтрокеТЧ(СтрокаТабличнойЧасти)
	
	// Расчет сумм
	СтрокаТабличнойЧасти.НППлан = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;	
	// Скидки.
	//Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
	//	СтрокаТабличнойЧасти.НППлан = 0;
	//ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
	//	СтрокаТабличнойЧасти.НППлан = СтрокаТабличнойЧасти.НППлан * (1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
	//КонецЕсли;
	
	СтрокаТабличнойЧасти.Вес = СтрокаТабличнойЧасти.ВесЗаЕдиницу * СтрокаТабличнойЧасти.Количество;
	
	ПересчитатьНаложенныйПлатеж();
	
	ПересчитатьОбщийВес();
	ЭР_ОбновитьСтоимостьВсехУслуг();
	
	ПересчитатьОбщийОбъемныйВес();
	
	ПересчитатьОбявлСтоимость();
	
	
	
КонецПроцедуры


///////////////////////////////////////////////////////
// Обработка ввода адреса через подсистему КонтактнаяИнформация.

&НаКлиенте
Процедура ПредставлениеАдресаНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка, ИмяРеквизита, ЗаголовокФормы)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
	"УправлениеКонтактнойИнформациейКлиент");
	
	ИмяТипаКонтактнойИнформации = "Перечисление" + ".ТипыКонтактнойИнформации.Адрес";
	
	ВидКонтактнойИнформации = Новый Структура;
	ВидКонтактнойИнформации.Вставить("Тип", ПредопределенноеЗначение(ИмяТипаКонтактнойИнформации));
	ВидКонтактнойИнформации.Вставить("АдресТолькоРоссийский",        Истина);
	ВидКонтактнойИнформации.Вставить("ВключатьСтрануВПредставление", Ложь);
	ВидКонтактнойИнформации.Вставить("СкрыватьНеактуальныеАдреса",   Ложь);
	
	ПараметрыФормы = МодульУправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
	ВидКонтактнойИнформации, Форма[ИмяРеквизита + "XML"], Объект[ИмяРеквизита]);
	
	ПараметрыФормы.Вставить("Заголовок", ЗаголовокФормы);
	ПараметрыФормы.Вставить("Страна", ПредопределенноеЗначение("Справочник.СтраныМира.Россия"));
	
	МодульУправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеАдресаОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ИмяРеквизита)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		// Данные не изменены.
		Возврат;
	КонецЕсли;
	
	Форма[ИмяРеквизита + "XML"] = ВыбранноеЗначение.КонтактнаяИнформация;
	Объект[ИмяРеквизита] = ВыбранноеЗначение.Представление;
	
	ПроверитьАдрес(ИмяРеквизита);
	
КонецПроцедуры

Процедура ПересчитатьОбщийВес()
	//ЭР Несторук С.И. 20.12.2016 11:39:01 {
	//Объект.ES_ОбщийВес = Объект.ES_СписокГрузов.Итог("Вес");
	Объект.ES_ОбщийВес = Объект.ES_Грузы.Итог("Вес");
	//ЭР_ОбновитьСтоимостьВсехУслуг();
	//ЭР Несторук С.И. 20.12.2016 11:39:01 }
КонецПроцедуры

Процедура ПересчитатьОбщийОбъемныйВес()
	
	//ЭР Несторук С.И. 20.12.2016 11:40:21 {
	// Объект.ES_ОбщийОбъемныйВес = Объект.ES_СписокГрузов.Итог("ОбъемныйВес");
	//Коэффициент = 6000;
	//КоэффициентИзСтартовых = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(ПредопределенноеЗначение("Перечисление.ES_ВидыСтартовыхНастроек.Коэффициент"));
	//Если ЗначениеЗаполнено(КоэффициентИзСтартовых) И НЕ КоэффициентИзСтартовых = 0 Тогда
	//	Коэффициент = КоэффициентИзСтартовых;
	//КонецЕсли;
	
	Объект.ES_ОбщийОбъемныйВес = Объект.ES_Грузы.Итог("ОбъемныйВес");
	Объект.ES_Объем = Объект.ES_Грузы.Итог("Объем");
	//ЭР Несторук С.И. 20.12.2016 11:40:21 }
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьОбявлСтоимость()
	
	//ЭР Несторук С.И. 20.12.2016 11:41:31 {
	Если Объект.ES_Грузы.Количество() > 0 Тогда
		Объект.ES_ОбьявленнаяСтоимость = Объект.ES_Грузы.Итог("ОбьявленнаяСтоимость");
	КонецЕсли;
	
	ПересчитатьСтраховку();
	
	//ЭР Несторук С.И. 20.12.2016 11:41:31 }
	
КонецПроцедуры


&НаКлиенте
Процедура ПересчитатьНаложенныйПлатеж()
	
	//ЭР Несторук С.И. 20.12.2016 11:34:40 {
	Если Объект.ES_Предоплачен Тогда
		Возврат;
	КонецЕсли;
	
	НаложенныйПлатеж = Объект.ES_Грузы.Итог("НППлан");
	Объект.ES_НППлан = НаложенныйПлатеж;
	Объект.ES_ОбьявленнаяСтоимость = Объект.ES_Грузы.Итог("ОбьявленнаяСтоимость");
	//ЭР Несторук С.И. 20.12.2016 11:34:40 }
	
	//Если Объект.ES_ПредставлениеГрузов = ПредопределенноеЗначение("Перечисление.ES_ПредставлениеГрузов.Места") Тогда
	//	НаложенныйПлатеж = Объект.ES_СписокГрузов.Итог("НППлан");
	//ИначеЕсли Объект.ES_ПредставлениеГрузов = ПредопределенноеЗначение("Перечисление.ES_ПредставлениеГрузов.Запасы") Тогда 	
	//	НаложенныйПлатеж = Объект.ES_Грузы.Итог("НППлан");
	//КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДопДанныеПоНоменклатуре(ТекНоменклатура)
	
	//ЭР Несторук С.И. 29.09.2017 17:09:04 {
	//Теперь габариты указываются в метрах
	//}ЭР Несторук С.И.
	
	Коэффициент = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Коэффициент);
	
	Структура = Новый Структура();
	Структура.Вставить("Вес", ТекНоменклатура.ЭР_Вес);
	Структура.Вставить("Опасность", ТекНоменклатура.ЭР_Опасность);
	ТекОбъем = ТекНоменклатура.ЭР_Длина*ТекНоменклатура.ЭР_Высота*ТекНоменклатура.ЭР_Ширина;
	Структура.Вставить("Объем", ТекОбъем);
	Если Коэффициент <> 0 Тогда
		Структура.Вставить("ОбъемныйВес", ОКР(ТекНоменклатура.ЭР_Длина*ТекНоменклатура.ЭР_Высота*ТекНоменклатура.ЭР_Ширина*(100*100*100)/Коэффициент,3));
	Иначе
		Структура.Вставить("ОбъемныйВес", 0);
	КонецЕсли;
	Структура.Вставить("Артикул", ТекНоменклатура.Артикул);
	Структура.Вставить("Штрихкод", РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьШтрихкодПоНоменклатуре(ТекНоменклатура));
	Возврат Структура;
	
КонецФункции

// ОПОВЕЩЕНИЯ
&НаКлиенте
Процедура ОбработатьДанныеПолучателя(ВыбранноеЗначение, Параметры) Экспорт 
	
	ОчиститьДанныеПолучателя = Ложь;
	
	Если НЕ ВыбранноеЗначение = КодВозвратаДиалога.Отмена Тогда
		Объект.ES_Получатель = ВыбранноеЗначение;
		
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			
			Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
				ТекПолучатель = ВыбранноеЗначение;
			Иначе
				ТекПолучатель = ОпределитьКонтрагентаПоИмени(ВыбранноеЗначение)
			КонецЕсли; 
			
			Если НЕ ТекПолучатель = Неопределено Тогда
				ЗаполнитьДанныеПолучателяНаСервере(ТекПолучатель);
				ES_АдресДоставкиПриИзменении("Ок");
			Иначе
				ОчиститьДанныеПолучателя = Истина;
			КонецЕсли; 
			
		Иначе
			ОчиститьДанныеПолучателя = Истина;
		КонецЕсли;
		
		//ЭР Несторук С.И. 11.12.2018 12:18:46 {
		ES_ОбновитьНаправление();
		//}ЭР Несторук С.И.
		
	КонецЕсли;
	
	Если ОчиститьДанныеПолучателя Тогда
		Объект.ES_ПолучательКонтактноеЛицо 	= "";
		Объект.ES_ПолучательТелефон 		= "";
		Объект.ES_АдресДоставки 			= ES_ГородПоУмолчанию;
		ES_АдресДоставкиXML 				= "";
		ES_АдресДоставкиПриИзменении("Ок");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеКонтактногоЛицаПолучателя(Результат, Параметры) Экспорт 
	
	Если НЕ Результат = КодВозвратаДиалога.Отмена И НЕ Результат = Неопределено Тогда
		Объект.ES_ПолучательКонтактноеЛицо = Результат;
		//ЭР Несторук С.И. 30.11.2018 15:08:07 {
		КонтактноеЛицоСсылка = ES_ОбщегоНазначения.ПолучитьКонтактноеЛицоКонтрагентаПоНаименованиям(Объект.ES_Получатель,Объект.ES_ПолучательКонтактноеЛицо); 
		ТелефонКонтактногоЛица = ПолучитьКИОбъектаНаСервере(КонтактноеЛицоСсылка, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица")); 
		Если ЗначениеЗаполнено(ТелефонКонтактногоЛица) Тогда
			Объект.ES_ПолучательТелефон = ТелефонКонтактногоЛица;
		КонецЕсли;
		//}ЭР Несторук С.И.
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКоординатыАдреса(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		Объект.ES_АдресДоставки = Результат["ФорматированныйАдрес"];
		Объект.ES_АдресДоставкиДолгота = Результат.Долгота;
		Объект.ES_АдресДоставкиШирота = Результат.Широта;
		//Объект.ES_ПолучательРегион = ДобавитьМетроНаСервере(Результат.Метро);
		Объект.ES_ПолучательРегион = ES_ОбщегоНазначения.ДобавитьМетроНаСервере(Результат.Метро);
		Объект.ES_ПолучательРегионРасстояние = ""+Окр((Число(Результат.Расстояние)/1000),2)+ " км";
		
		ES_АдресДоставкиXML = "";
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьДанныеАдресаПолучателя(Результат, Параметры) Экспорт 
	
	Если НЕ Результат = КодВозвратаДиалога.Отмена И НЕ Результат = Неопределено Тогда
		Объект.ES_АдресДоставки = Результат;
		ЗаполнитьШиротуИДолготуПоАдресу("ES_АдресДоставки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеАдресаОтправителя(Результат, Параметры) Экспорт 
	
	Если НЕ Результат = КодВозвратаДиалога.Отмена И НЕ Результат = Неопределено Тогда
		Объект.ES_ЗаборАдрес = Результат;
		
		ЗаполнитьШиротуИДолготуПоАдресу("ES_ЗаборАдрес");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаОчисткиТЧГрузы(Результат, ES_ПредставлениеГрузовДоИзменения) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Объект.ES_ПредставлениеГрузов = ES_ПредставлениеГрузовДоИзменения;
		ES_ПредставлениеГрузов = Объект.ES_ПредставлениеГрузов;
	Иначе
		
		Объект.ES_Грузы.Очистить();
		Объект.ES_СписокГрузов.Очистить();
		
		ПересчитатьКоличествоМест();
		ПересчитатьНаложенныйПлатеж();
		ИзменитьЗаголовокТЧГрузы();
		
	КонецЕсли;  
	
	// Установка текущей страницы грузов
	УстановитьТекСтраницуПредставленияГрузов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеОтправителя(Результат, Параметры) Экспорт 
	
	Если НЕ Результат = КодВозвратаДиалога.Отмена И НЕ Результат = Неопределено Тогда
		Объект.ES_ЗаборОтправитель = Результат;
		
		Если ЗначениеЗаполнено(Объект.ES_ЗаборОтправитель) Тогда
			
			ТекКонтрагент = ОпределитьКонтрагентаПоИмени(Объект.ES_ЗаборОтправитель);
			Если НЕ ТекКонтрагент = Неопределено Тогда
				ЗаполнитьДаннымиПоОтправителюИКонтЛицуНаСервере(ТекКонтрагент);
				ES_ЗаборАдресПриИзменении("Ок");
			КонецЕсли; 
			
		Иначе
			Объект.ES_ЗаборТелефон = "";
			
		КонецЕсли;
		//ЭР Несторук С.И. 11.12.2018 12:18:46 {
		ES_ОбновитьНаправление();
		//}ЭР Несторук С.И.

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеКонтактногоЛицаОтправителя(Результат, Параметры) Экспорт 
	
	Если НЕ Результат = КодВозвратаДиалога.Отмена И НЕ Результат = Неопределено Тогда
		Объект.ES_ЗаборКонтактноеЛицо = Результат;
		//ЭР Несторук С.И. 30.11.2018 15:08:07 {
		КонтактноеЛицоСсылка = ES_ОбщегоНазначения.ПолучитьКонтактноеЛицоКонтрагентаПоНаименованиям(Объект.ES_ЗаборОтправитель, Объект.ES_ЗаборКонтактноеЛицо);
		ТелефонКонтактногоЛица = ПолучитьКИОбъектаНаСервере(КонтактноеЛицоСсылка, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица"));
		Если ЗначениеЗаполнено(ТелефонКонтактногоЛица) Тогда
			Объект.ES_ЗаборТелефон = ТелефонКонтактногоЛица;
		КонецЕсли;
		//}ЭР Несторук С.И.

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКоординатыАдресаЗабора(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		Объект.ES_ЗаборАдрес = Результат["ФорматированныйАдрес"];
		Объект.ES_ЗаборАдресДолгота = Результат.Долгота;
		Объект.ES_ЗаборАдресШирота = Результат.Широта;
		//Объект.ES_ЗаборРегион = ДобавитьМетроНаСервере(Результат.Метро);
		Объект.ES_ЗаборРегион = ES_ОбщегоНазначения.ДобавитьМетроНаСервере(Результат.Метро);
		Объект.ES_ЗаборРегионРасстояние = ""+Окр((Число(Результат.Расстояние)/1000),2)+ " км";
		ES_ЗаборАдресXML = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАдресДоставкиПоКоординатам(Результат, Параметры) Экспорт 
	//ЭР Сальник К.А. 13.04.2018 17:51:00 {
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		Объект.ES_АдресДоставки = Результат.Адрес;
		Объект.ES_АдресДоставкиДолгота = Результат.Долгота;
		Объект.ES_АдресДоставкиШирота = Результат.Широта;
		Объект.ES_ПолучательРегион = ES_ОбщегоНазначения.ДобавитьМетроНаСервере(Результат.Метро, Результат.ЛинияМетро);
	КонецЕсли;
	//} ЭР Сальник К.А.
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьАдресЗабораПоКоординатам(Результат, Параметры) Экспорт 
	//ЭР Сальник К.А. 13.04.2018 17:54:00 {
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		Объект.ES_ЗаборАдрес = Результат.Адрес;
		Объект.ES_ЗаборАдресДолгота = Результат.Долгота;
		Объект.ES_ЗаборАдресШирота = Результат.Широта;
		Объект.ES_ЗаборРегион = ES_ОбщегоНазначения.ДобавитьМетроНаСервере(Результат.Метро, Результат.ЛинияМетро);
	КонецЕсли;
	//} ЭР Сальник К.А.
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// Вызов сервера
&НаСервереБезКонтекста
Функция ПолучитьКИОбъектаНаСервере(Знач СсылкаНаОбъект, ВидКИ)
	   Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СсылкаНаОбъект, ВидКИ); 
КонецФункции

&НаСервере
Процедура УстановитьЗначениеДатыОтгрузки()
	
	// ДатаОтгрузки всегда равна ДатеДоставки
	Если ДатаОтгрузкиВШапке Тогда
		Объект.ДатаОтгрузки = Объект.ES_ДатаДоставки;
	Иначе
		Для каждого Элемент Из Объект.Запасы Цикл
			Элемент.ДатаОтгрузки = Объект.ES_ДатаДоставки;
		КонецЦикла;		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыДляТабЧастейИстория()
	
	ЗначениеПараметраИстории = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено);
	ES_ИсторияСостоянийЗаказа.Параметры.УстановитьЗначениеПараметра("ЗаказДляОтбораВИсторию", ЗначениеПараметраИстории);
	ES_ИсторияСтатусовЗаборов.Параметры.УстановитьЗначениеПараметра("ЗаказДляОтбораВИсторию", ЗначениеПараметраИстории);
	ES_ИсторияСтатусовЗаказа.Параметры.УстановитьЗначениеПараметра("ЗаказДляОтбораВИсторию", ЗначениеПараметраИстории);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеУслугиДоставки()
	
	УслугаДоставки 			= ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.УслугаДоставки);
	ХарактеристикаУслуги 	= ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Характеристика);
	
	СтруктураДляВозврата = Новый Структура;
	СтруктураДляВозврата.Вставить("УслугаДоставки", УслугаДоставки);
	СтруктураДляВозврата.Вставить("ХарактеристикаУслуги", ХарактеристикаУслуги);
	
	Возврат СтруктураДляВозврата;
	
КонецФункции

//ЕФСОЛ Несторук 15.08.2016 + 
&НаСервере
Функция ПолучитьДанныеУслугиСтраховки()
	
	УслугаСтраховки = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.УслугаСтраховки);
	ПроцентСтраховки = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ПроцентСтраховки);
	
	СтруктураДляВозврата = Новый Структура;
	СтруктураДляВозврата.Вставить("УслугаСтраховки", УслугаСтраховки);
	СтруктураДляВозврата.Вставить("ПроцентСтраховки", ПроцентСтраховки);
	
	Возврат СтруктураДляВозврата;
	
	
КонецФункции
//ЕФСОЛ Несторук 15.08.2016 -

&НаСервере
Процедура ПроверитьАдрес(ИмяРеквизита)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	Сообщение = "";
	Попытка
		ПодробныйИтог = МодульУправлениеКонтактнойИнформацией.ПроверитьАдрес(ЭтотОбъект[ИмяРеквизита + "XML"]);
		
		Если ПодробныйИтог.Результат <> "Корректный" Тогда
			Для каждого ЭлементСписка Из ПодробныйИтог.СписокОшибок Цикл
				Сообщение = Сообщение + Символы.ПС + ЭлементСписка.Представление;
			КонецЦикла;
			Сообщение = СокрЛП(Сообщение);
			Если Не ЗначениеЗаполнено(Сообщение) Тогда
				Сообщение = НСтр("ru = 'Адрес не заполнен'");
			КонецЕсли;
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Сообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
	Если ЗначениеЗаполнено(Сообщение) Тогда
		Элементы[ИмяРеквизита + "Предупреждение"].Подсказка = Сообщение;
		Элементы[ИмяРеквизита + "Предупреждение"].Видимость = Истина;
	Иначе
		Элементы[ИмяРеквизита + "Предупреждение"].Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзменяемыеРеквизитыЗаказа()
	
	// Заполнить Реквизиты формы
	СтруктураДанных = ПолучитьИзменяемыеРеквизитыЗаказа(Объект.Ссылка);
	
	Если СтруктураДанных.Количество() > 0 Тогда
		ES_СтатусЗаказа 					= СтруктураДанных.Статус;
		ES_СсылкаНаДокДоставки 				= СтруктураДанных.ДокОснование;
		ES_СсылкаНаДокРасходнаяНакладная 	= СтруктураДанных.РасходнаяНакладная;
		ES_СсылкаНаГрупповойЗаборГруза 		= СтруктураДанных.ГрупповойЗабор;
		Объект.ES_Курьер 					= ?(СтруктураДанных.Свойство("Курьер"), СтруктураДанных.Курьер, Объект.ES_Курьер);
		//Объект.ES_ВидОплаты					= ?(СтруктураДанных.Свойство("ВидОплаты"), СтруктураДанных.ВидОплаты, Объект.ES_ВидОплаты);
		Объект.ES_Подрядчик					= ?(СтруктураДанных.Свойство("Подрядчик"), СтруктураДанных.Подрядчик, Объект.ES_Подрядчик);
		Объект.ES_ТрекНомер 				= ?(СтруктураДанных.Свойство("ТрекНомер"), СтруктураДанных.ТрекНомер, Объект.ES_ТрекНомер);
		Объект.ES_Расходы 					= ?(СтруктураДанных.Свойство("Расходы"), СтруктураДанных.Расходы, Объект.ES_Расходы);
		Если ЗначениеЗаполнено(СтруктураДанных.ДатаВремяВыполнения) Тогда
			ES_ФактДоставки = Формат(СтруктураДанных.ДатаВремяВыполнения, "ДФ='dd.MM.yyyy ЧЧ:мм'");
		Иначе
			ES_ФактДоставки = Неопределено;
		КонецЕсли;
		//ЕФСОЛ Несторук 10.10.2016 +
		ES_ФИОПолучателя  					= СтруктураДанных.ФИОПолучателя;
		Склад	 							= СтруктураДанных.Склад;
		Ячейка   							= СтруктураДанных.Ячейка;
		КурьерХранение						= СтруктураДанных.КурьерХранение;
		ES_ОплаченiBox  					= СтруктураДанных.ОплатаIBox;
		ES_ИДТранзакции	 					= СтруктураДанных.ИДТранзакции;
		ES_НомерЧека   						= СтруктураДанных.НомерЧека;
		//ЕФСОЛ Несторук 10.10.2016 -
	КонецЕсли; 
	
	
	
	
	//ЕФСОЛ Несторук 10.10.2016 +
	ЗаполнитьСсылкуНаЗабор();
	ЗаполнитьСсылкуНаОтчет();
	//ЗаполнитьКомментарийКурьера();
	//ЕФСОЛ Несторук 10.10.2016 -
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиЗаказчикаПоУмолчанию()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ответственный КАК ОтветственныйМенеджер,
	|	Контрагенты.ES_ВидОплаты КАК ВидОплаты,
	|	Контрагенты.ES_Плательщик КАК Плательщик
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.ОтветственныйМенеджер) Тогда
			Объект.Ответственный = Выборка.ОтветственныйМенеджер;
		КонецЕсли; 
		//Если ЗначениеЗаполнено(Выборка.Плательщик) Тогда
		//	Объект.ES_Плательщик_Удалить = Выборка.Плательщик;
		//КонецЕсли; 
		//Если ЗначениеЗаполнено(Выборка.ВидОплаты) Тогда
		//	Объект.ES_ВидОплаты = Выборка.ВидОплаты;
		//КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиПоЗаказчикуИКонтЛицуНаСервере(КонтЛицо)
	
	Объект.ES_ЗаказчикТелефон = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	
	Если КонтЛицо = Неопределено Тогда
		Объект.ES_ЗаказчикКонтактноеЛицо = ES_ОбщегоНазначения.ПолучитьКонтактноеЛицоКонтрагента(Объект.Контрагент);
	Иначе
		Объект.ES_ЗаказчикКонтактноеЛицо = КонтЛицо;
	КонецЕсли;
	
	//ЭР Несторук С.И. 30.11.2018 15:08:07 {
	ТелефонКонтактногоЛица = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.ES_ЗаказчикКонтактноеЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица); 
	Если ЗначениеЗаполнено(ТелефонКонтактногоЛица) Тогда
		Объект.ES_ЗаказчикТелефон = ТелефонКонтактногоЛица;
	КонецЕсли;
	//}ЭР Несторук С.И.
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПолучателяНаСервере(ТекКонтрагент)
	
	// Заполнить КонтЛицо и телефон получателя
	КонтЛицоПолучателя 	= ES_ОбщегоНазначения.ПолучитьКонтактноеЛицоКонтрагента(ТекКонтрагент);
	ТелефонПолучателя 	= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ТекКонтрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	
	ТелефонКонтактногоЛциа = "";
	
	Если ЗначениеЗаполнено(КонтЛицоПолучателя) Тогда
		ТелефонКонтактногоЛциа = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(КонтЛицоПолучателя, Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТелефонКонтактногоЛциа) Тогда
		ТелефонПолучателя = ТелефонКонтактногоЛциа;
	КонецЕсли;

	Объект.ES_ПолучательКонтактноеЛицо 	= КонтЛицоПолучателя;
	Объект.ES_ПолучательТелефон 		= ТелефонПолучателя;
	// Заполнить Адресом доставки
	Объект.ES_АдресДоставки = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ТекКонтрагент, Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиПоОтправителюИКонтЛицуНаСервере(ТекКонтрагент)
	
	// Заполнить КонтЛицо и телефон отправителя
	КонтактноеЛицоОтправителя 	= ES_ОбщегоНазначения.ПолучитьКонтактноеЛицоКонтрагента(ТекКонтрагент);
	ТелефонОтправителя 			= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ТекКонтрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	
	//ЭР Несторук С.И. 30.11.2018 15:29:51 {
	ТелефонКотактногоЛица = "";
	Если ЗначениеЗаполнено(КонтактноеЛицоОтправителя) Тогда
		ТелефонКотактногоЛица = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(КонтактноеЛицоОтправителя, Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица);
	КонецЕсли;

	//}ЭР Несторук С.И.
	Если ЗначениеЗаполнено(ТелефонКотактногоЛица) Тогда
		ТелефонОтправителя = ТелефонКотактногоЛица;
	КонецЕсли;

	Объект.ES_ЗаборКонтактноеЛицо 	= КонтактноеЛицоОтправителя;
	Объект.ES_ЗаборТелефон 			= ТелефонОтправителя;
	// Заполнить Адресом забора
	Объект.ES_ЗаборАдрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ТекКонтрагент, Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗаказчикаВЗависимостиОтТипаПлательщика()
	
	//Если Объект.ES_Плательщик_Удалить = Перечисления.ES_ТипыПлательщиков.Получатель Тогда
	//	
	//	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
	//		Объект.ES_СправочноЗаказчик = Объект.Контрагент;
	//	КонецЕсли; 
	//	Объект.Контрагент = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.РозничныйПокупатель);
	//	
	//ИначеЕсли Объект.ES_Плательщик_Удалить = Перечисления.ES_ТипыПлательщиков.ТретьеЛицо Тогда
	//	
	//	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
	//		Объект.ES_СправочноЗаказчик = Объект.Контрагент;
	//	КонецЕсли; 
	//	Объект.Контрагент = "";
	//	
	//	//Если Объект.Контрагент = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.РозничныйПокупатель)
	//	//   И ЗначениеЗаполнено(Объект.ES_СправочноЗаказчик)
	//	//Тогда
	//	//	Объект.Контрагент = Объект.ES_СправочноЗаказчик;
	//	//КонецЕсли; 
	//	//Объект.ES_СправочноЗаказчик = Неопределено;
	//	
	//КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИзменяемыеРеквизитыЗаказа(ТекСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказыПокупателей.Регистратор КАК РасходнаяНакладная,
	|	ЗаказыПокупателей.ЗаказПокупателя
	|ПОМЕСТИТЬ ВТ_ДокРасходнаяНакладная
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
	|ГДЕ
	|	ЗаказыПокупателей.Регистратор ССЫЛКА Документ.РасходнаяНакладная
	|	И ЗаказыПокупателей.ЗаказПокупателя = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_СтатусыЗаказовСрезПоследних.Заказ КАК Заказ,
	|	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа КАК СтатусЗаказа,
	|	ES_СтатусыЗаказовСрезПоследних.Регистратор КАК ДокОснование,
	|	ЕСТЬNULL(ES_ИзменяемыеРеквизитыЗаказаСрезПоследнихТрекНомер.Значение, """") КАК ТрекНомер,
	|	ЕСТЬNULL(ES_ИзменяемыеРеквизитыЗаказаСрезПоследнихКурьер.Значение, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Курьер,
	|	ЕСТЬNULL(ES_ИзменяемыеРеквизитыЗаказаСрезПоследнихРасходы.Значение, 0) КАК Расходы,
	|	ЕСТЬNULL(ES_ИзменяемыеРеквизитыЗаказаСрезПоследнихДатаВыполненияЗаказа.Значение, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВыполненияЗаказа,
	|	ЕСТЬNULL(ВТ_ДокРасходнаяНакладная.РасходнаяНакладная, НЕОПРЕДЕЛЕНО) КАК РасходнаяНакладная,
	|	ЕСТЬNULL(ES_ГрупповойЗаборЗаказовСрезПоследних.Забор, НЕОПРЕДЕЛЕНО) КАК ГрупповойЗабор,
	|	ЕСТЬNULL(ES_ИзменяемыеРеквизитыЗаказовСрезПоследнихПодрядчик.Значение, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Подрядчик,
	|	ЕСТЬNULL(ES_ИзменяемыеРеквизитыЗаказовСрезПоследнихФИОПолучателя.Значение, НЕОПРЕДЕЛЕНО) КАК ФИОПолучателя,
	|	ES_ИзменяемыеРеквизитыЗаказаСрезПоследнихВидОплаты.Значение КАК ВидОплаты,	
	|	ES_ИзменяемыеРеквизитыЗаказаСрезПоследнихОплатаIBox.Значение КАК ОплатаIBox,
	|	ES_ИзменяемыеРеквизитыЗаказаСрезПоследнихОплатаНомерЧека.Значение КАК НомерЧека,
	|	ES_ИзменяемыеРеквизитыЗаказаСрезПоследнихОплатаИДТранзакции.Значение КАК ИДТранзакции,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ES_ЗаказыНаСкладеОстатки.Склад, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|		ИНАЧЕ ВЫРАЗИТЬ(ES_ИзменяемыеРеквизитыЗаказовСрезПоследнихЯчейка.Значение КАК Справочник.Ячейки)
	|	КОНЕЦ КАК Ячейка,
	|	ЕСТЬNULL(ES_ЗаказыНаСкладеОстатки.Склад, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК Склад,
	|	ЕСТЬNULL(ES_ЗаказыНаСкладеОстатки.Курьер, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК КурьерХранение
	|ИЗ
	|	РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(, Заказ = &Заказ) КАК ES_СтатусыЗаказовСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДокРасходнаяНакладная КАК ВТ_ДокРасходнаяНакладная
	|		ПО ES_СтатусыЗаказовСрезПоследних.Заказ = ВТ_ДокРасходнаяНакладная.ЗаказПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
	|				,
	|				Заказ = &Заказ
	|					И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.ТрекНомер)) КАК ES_ИзменяемыеРеквизитыЗаказаСрезПоследнихТрекНомер
	|		ПО ES_СтатусыЗаказовСрезПоследних.Заказ = ES_ИзменяемыеРеквизитыЗаказаСрезПоследнихТрекНомер.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
	|				,
	|				Заказ = &Заказ
	|					И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Курьер)) КАК ES_ИзменяемыеРеквизитыЗаказаСрезПоследнихКурьер
	|		ПО ES_СтатусыЗаказовСрезПоследних.Заказ = ES_ИзменяемыеРеквизитыЗаказаСрезПоследнихКурьер.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
	|				,
	|				Заказ = &Заказ
	|					И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.ВидОплаты)) КАК ES_ИзменяемыеРеквизитыЗаказаСрезПоследнихВидОплаты
	|		ПО (ES_СтатусыЗаказовСрезПоследних.Заказ = ES_ИзменяемыеРеквизитыЗаказаСрезПоследнихКурьер.Заказ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
	|				,
	|				Заказ = &Заказ
	|					И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.ОплаченIBox)) КАК ES_ИзменяемыеРеквизитыЗаказаСрезПоследнихОплатаIBox
	|		ПО ES_СтатусыЗаказовСрезПоследних.Заказ = ES_ИзменяемыеРеквизитыЗаказаСрезПоследнихОплатаIBox.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
	|				,
	|				Заказ = &Заказ
	|					И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.НомерЧека)) КАК ES_ИзменяемыеРеквизитыЗаказаСрезПоследнихОплатаНомерЧека
	|		ПО ES_СтатусыЗаказовСрезПоследних.Заказ = ES_ИзменяемыеРеквизитыЗаказаСрезПоследнихОплатаНомерЧека.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
	|				,
	|				Заказ = &Заказ
	|					И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.ИДТранзакции)) КАК ES_ИзменяемыеРеквизитыЗаказаСрезПоследнихОплатаИДТранзакции
	|		ПО ES_СтатусыЗаказовСрезПоследних.Заказ = ES_ИзменяемыеРеквизитыЗаказаСрезПоследнихОплатаИДТранзакции.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
	|				,
	|				Заказ = &Заказ
	|					И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Расходы)) КАК ES_ИзменяемыеРеквизитыЗаказаСрезПоследнихРасходы
	|		ПО ES_СтатусыЗаказовСрезПоследних.Заказ = ES_ИзменяемыеРеквизитыЗаказаСрезПоследнихРасходы.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
	|				,
	|				Заказ = &Заказ
	|					И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.ДатаВыполненияЗаказа)) КАК ES_ИзменяемыеРеквизитыЗаказаСрезПоследнихДатаВыполненияЗаказа
	|		ПО ES_СтатусыЗаказовСрезПоследних.Заказ = ES_ИзменяемыеРеквизитыЗаказаСрезПоследнихДатаВыполненияЗаказа.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ГрупповойЗаборЗаказов.СрезПоследних(, Заказ = &Заказ) КАК ES_ГрупповойЗаборЗаказовСрезПоследних
	|		ПО ES_СтатусыЗаказовСрезПоследних.Заказ = ES_ГрупповойЗаборЗаказовСрезПоследних.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
	|				,
	|				Заказ = &Заказ
	|					И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Подрядчик)) КАК ES_ИзменяемыеРеквизитыЗаказовСрезПоследнихПодрядчик
	|		ПО ES_СтатусыЗаказовСрезПоследних.Заказ = ES_ИзменяемыеРеквизитыЗаказовСрезПоследнихПодрядчик.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
	|				,
	|				Заказ = &Заказ
	|					И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.ФИОПолучателя)) КАК ES_ИзменяемыеРеквизитыЗаказовСрезПоследнихФИОПолучателя
	|		ПО ES_СтатусыЗаказовСрезПоследних.Заказ = ES_ИзменяемыеРеквизитыЗаказовСрезПоследнихФИОПолучателя.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ES_ЗаказыНаСкладе.Остатки(, Заказ = &Заказ) КАК ES_ЗаказыНаСкладеОстатки
	|		ПО ES_СтатусыЗаказовСрезПоследних.Заказ = ES_ЗаказыНаСкладеОстатки.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
	|				,
	|				Заказ = &Заказ
	|					И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Ячейка)) КАК ES_ИзменяемыеРеквизитыЗаказовСрезПоследнихЯчейка
	|		ПО ES_СтатусыЗаказовСрезПоследних.Заказ = ES_ИзменяемыеРеквизитыЗаказовСрезПоследнихЯчейка.Заказ";
	
	Запрос.УстановитьПараметр("Заказ", ТекСсылка);
	
	СтруктураПолученныхДанных = Новый Структура;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если Выборка.Следующий() Тогда
			СтруктураПолученныхДанных.Вставить("Статус", 				Выборка.СтатусЗаказа);
			СтруктураПолученныхДанных.Вставить("ДокОснование", 			Выборка.ДокОснование);
			СтруктураПолученныхДанных.Вставить("РасходнаяНакладная", 	Выборка.РасходнаяНакладная);
			СтруктураПолученныхДанных.Вставить("ГрупповойЗабор", 		Выборка.ГрупповойЗабор);
			СтруктураПолученныхДанных.Вставить("Курьер", 				Выборка.Курьер);
			СтруктураПолученныхДанных.Вставить("ВидОплаты", 			Выборка.ВидОплаты);
			СтруктураПолученныхДанных.Вставить("Подрядчик", 			Выборка.Подрядчик);
			СтруктураПолученныхДанных.Вставить("Расходы", 				Выборка.Расходы);
			СтруктураПолученныхДанных.Вставить("ТрекНомер", 			Выборка.ТрекНомер);
			СтруктураПолученныхДанных.Вставить("ДатаВремяВыполнения", 	Выборка.ДатаВыполненияЗаказа);
			//ЕФСОЛ Несторук 10.10.2016 +
			СтруктураПолученныхДанных.Вставить("ФИОПолучателя", 		Выборка.ФИОПолучателя);
			СтруктураПолученныхДанных.Вставить("Ячейка",				Выборка.Ячейка);
			СтруктураПолученныхДанных.Вставить("Склад",					Выборка.Склад);
			СтруктураПолученныхДанных.Вставить("КурьерХранение", 		Выборка.КурьерХранение);
			
			СтруктураПолученныхДанных.Вставить("ОплатаIBox", 			Выборка.ОплатаIBox);
			СтруктураПолученныхДанных.Вставить("НомерЧека",				Выборка.НомерЧека);
			СтруктураПолученныхДанных.Вставить("ИДТранзакции",			Выборка.ИДТранзакции);
			//ЕФСОЛ Несторук 10.10.2016 -
		КонецЕсли;
	КонецЕсли; 
	
	Возврат СтруктураПолученныхДанных;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьНаличиеПКОПоЗаказу(ЗаказСсылка)
	
	ЕстьПроведенныйПКО = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОплатаСчетовИЗаказов.СчетНаОплату
	|ИЗ
	|	РегистрНакопления.ОплатаСчетовИЗаказов КАК ОплатаСчетовИЗаказов
	|ГДЕ
	|	ОплатаСчетовИЗаказов.СчетНаОплату = &ЗаказСсылка
	|	И ОплатаСчетовИЗаказов.Регистратор ССЫЛКА Документ.ПоступлениеВКассу";
	
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ЕстьПроведенныйПКО = Истина;
	КонецЕсли; 
	
	Возврат ЕстьПроведенныйПКО;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьКонтрагентаПоИмени(ИмяКонтрагента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Наименование ПОДОБНО &ИмяКонтрагента
	|	И НЕ Контрагенты.ЭтоГруппа
	|	И НЕ Контрагенты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ИмяКонтрагента", ИмяКонтрагента);
	
	ТекКонтрагент = Неопределено;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекКонтрагент = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
	КонецЕсли; 
	
	Возврат ТекКонтрагент;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьФактическийАдресСкладаДоставки(СкладДоставки)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницыКонтактнаяИнформация.Представление КАК ФактическийАдрес
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы.КонтактнаяИнформация КАК СтруктурныеЕдиницыКонтактнаяИнформация
	|ГДЕ
	|	СтруктурныеЕдиницыКонтактнаяИнформация.Ссылка = &Склад
	|	И СтруктурныеЕдиницыКонтактнаяИнформация.Тип = &Тип
	|	И СтруктурныеЕдиницыКонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Склад", СкладДоставки);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы);
	
	ФактАдрес = "";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ФактАдрес =  Выборка.ФактическийАдрес;
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат ФактАдрес;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьАдресДоставкиНаСервере(Контрагент)
	
	Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Контрагент, Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПартиюНоменклатуры(Номенклатура, Заказчик)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПартииНоменклатуры.Ссылка КАК Партия
	|ИЗ
	|	Справочник.ПартииНоменклатуры КАК ПартииНоменклатуры
	|ГДЕ
	|	ПартииНоменклатуры.Владелец = &Номенклатура
	|	И НЕ ПартииНоменклатуры.ПометкаУдаления
	|	И ПартииНоменклатуры.Статус = &СтатусОтветХранение
	|	И ПартииНоменклатуры.ВладелецПартии = &Заказчик";
	
	Запрос.УстановитьПараметр("Заказчик", Заказчик);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("СтатусОтветХранение", Перечисления.СтатусыПартий.ОтветственноеХранение);
	
	ПартияНоменклатуры = Неопределено;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ПартияНоменклатуры = ВыборкаДетальныеЗаписи.Партия;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат ПартияНоменклатуры;
	
КонецФункции

&НаСервере
Процедура ПересчитатьКоличествоМест()
	
	КоличествоМест = 0;
	
	Если Объект.ES_ПредставлениеГрузов = Перечисления.ES_ПредставлениеГрузов.Места Тогда
		КоличествоМест = Объект.ES_СписокГрузов.Количество();
	КонецЕсли; 
	
	Если КоличествоМест = 0 Тогда
		КоличествоМест = 1;
	КонецЕсли; 
	
	Объект.ES_КоличествоМест = КоличествоМест;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСтраховку()
	
	// Номенклатура Страховка
	НоменклатураСтраховка = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(ПредопределенноеЗначение("Перечисление.ES_ВидыСтартовыхНастроек.УслугаСтраховки"));
	//ЕФСОЛ Несторук 16.08.2016 +
	ПроцентСтраховки = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(ПредопределенноеЗначение("Перечисление.ES_ВидыСтартовыхНастроек.ПроцентСтраховки"));
	//ЕФСОЛ Несторук 16.08.2016 -
	Если НоменклатураСтраховка.Пустая() Тогда
		Возврат;
	КонецЕсли; 
	//ЕФСОЛ Несторук 16.08.2016 +
	// Сумма страховки
	СуммаСтраховки = 0;
	Если Объект.ES_СписокГрузов.Количество() > 0 Тогда
		Для каждого Стр Из Объект.ES_СписокГрузов Цикл
			Если НЕ ЗначениеЗаполнено(Стр.Страховка) Тогда 
				Продолжить;
			КонецЕсли;
			
			СуммаСтраховки = СуммаСтраховки + Стр.Страховка*Стр.ПроцентСтраховки/100;
			Объект.ES_ОбьявленнаяСтоимость = Объект.ES_СписокГрузов.Итог("Страховка");
		КонецЦикла;
	Иначе 
		СуммаСтраховки = Объект.ES_ОбьявленнаяСтоимость*Объект.ES_ПроцентСтраховки/100;
		
	КонецЕсли;
	//СуммаСтраховки = Объект.ES_СписокГрузов.Итог("Страховка");
	//ЕФСОЛ Несторук 16.08.2016 -
	
	// поиск номенклатури "Страховка" в ТЧ Товары
	НайденныеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура", НоменклатураСтраховка));
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаСтраховки = НайденныеСтроки[0];
		Если СуммаСтраховки = 0 Тогда
			Объект.Запасы.Удалить(СтрокаСтраховки);
		Иначе
			СтрокаСтраховки.Цена = СуммаСтраховки;
			ЗапасыЦенаПриИзменении(СтрокаСтраховки.НомерСтроки - 1);
		КонецЕсли;
		
	ИначеЕсли СуммаСтраховки > 0 Тогда 	// если в ТЧ нет номенклатуры Страховка, добавляем ее
		СтрокаТабличнойЧасти = Объект.Запасы.Добавить();
		СтрокаТабличнойЧасти.Номенклатура 	= НоменклатураСтраховка;
		СтрокаТабличнойЧасти.Количество 	= 1;
		ЗапасыНоменклатураПриИзменении(СтрокаТабличнойЧасти);
		
		СтрокаТабличнойЧасти.Цена 			= СуммаСтраховки;
		//ЕФСОЛ Несторук +
		СтрокаТабличнойЧасти.Сумма 			= СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		//ЕФСОЛ НЕсторук -
		ЗапасыЦенаПриИзменении(СтрокаТабличнойЧасти.НомерСтроки - 1);
	КонецЕсли; 
	
КонецПроцедуры

//ЕФСОЛ Несторук 08-11-16 +
&НаКлиенте
Процедура ПересчитатьРКО()
	
	НоменклатураРКО = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(ПредопределенноеЗначение("Перечисление.ES_ВидыСтартовыхНастроек.УслугаРКО"));
	Если НЕ ЗначениеЗаполнено(НоменклатураРКО) Тогда
		Возврат;
	КонецЕсли;
	
	ПроцентРКО = ПолучитьПроцентРКОНаСервере();
	Если НЕ ЗначениеЗаполнено(ПроцентРКО) Тогда
		Возврат;
	КонецЕсли;
	
	СуммаРКО = 0;
	
	
	Если Объект.ES_Грузы.Количество() > 0 Тогда
		Для каждого Стр Из Объект.ES_Грузы Цикл
			Если НЕ ЗначениеЗаполнено(Стр.НППлан) Тогда 
				Продолжить;
			КонецЕсли;
			
			СуммаРКО = СуммаРКО + Стр.НППлан*ПроцентРКО/100;
		КонецЦикла;
	Иначе 
		СуммаРКО = Объект.ES_НППлан*ПроцентРКО/100;
		
	КонецЕсли;
	
	// поиск номенклатуры "РКО" в ТЧ Товары
	НайденныеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура", НоменклатураРКО));
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаРКО = НайденныеСтроки[0];
		Если СуммаРКО = 0 Тогда
			Объект.Запасы.Удалить(СтрокаРКО);
		Иначе
			СтрокаРКО.Цена = СуммаРКО;
			ЗапасыЦенаПриИзменении(СтрокаРКО.НомерСтроки - 1);
		КонецЕсли;
		
	ИначеЕсли СуммаРКО > 0 Тогда 	// если в ТЧ нет номенклатуры РКО, добавляем ее
		СтрокаТабличнойЧасти = Объект.Запасы.Добавить();
		СтрокаТабличнойЧасти.Номенклатура 	= НоменклатураРКО;
		СтрокаТабличнойЧасти.Количество 	= 1;
		ЗапасыНоменклатураПриИзменении(СтрокаТабличнойЧасти);
		
		СтрокаТабличнойЧасти.Цена 			= СуммаРКО;
		СтрокаТабличнойЧасти.Сумма 			= СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		ЗапасыЦенаПриИзменении(СтрокаТабличнойЧасти.НомерСтроки - 1);
	КонецЕсли;
	
КонецПроцедуры
//ЕФСОЛ Несторук 08-11-16 -

&НаСервере
Функция ПолучитьПроцентРКОНаСервере()
	
	
	ПроцентРКО = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ES_ПроцентКомиссииНал, 0) КАК ПроцентНал,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ES_ПроцентКомиссииБезнал, 0) КАК ПроцентБезнал
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Договор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Если Объект.ES_ВидОплаты = Перечисления.ТипыДенежныхСредств.Наличные Тогда
		ПроцентРКО = Выборка.ПроцентНал;
	ИначеЕсли Объект.ES_ВидОплаты = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
		ПроцентРКО = Выборка.ПроцентБезнал;
	КонецЕсли;
	
	Возврат ПроцентРКО;
	
КонецФункции


&НаСервере
Процедура ОбновитьСтатусДокумента()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа
	|ИЗ
	|	РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(, Заказ = &Заказ) КАК ES_СтатусыЗаказовСрезПоследних";
	
	Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ES_СтатусЗаказа = ВыборкаДетальныеЗаписи.СтатусЗаказа;
		КонецЕсли;
	Иначе
		ES_СтатусЗаказа = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ЗаказчикИПолучательОдноЛицоПриИзменении(Элемент)
	
	УстановитьНастройкиСогласноГалкеЗаказчикИПолучательОдноЛицо();
	
КонецПроцедуры

&НаКлиенте
Процедура ES_СрочностьДоставкиПриИзменении(Элемент)
	Объект.ES_ЦветМетки = ES_ПолучитьЦветМетки();

	Если ЗначениеЗаполнено(Объект.ES_ЦветМетки) Тогда
		УстановитьЦвет(Объект.ES_ЦветМетки);
	КонецЕсли;
	
	ES_ОбновитьНаправление();

КонецПроцедуры

&НаСервере
Функция ES_ПолучитьЦветМетки()
	//ЕФСОЛ Несторук 21.10.16 + 
	ОбъекьОбъект = РеквизитФормыВЗначение("Объект");
	Цвет = "";
	Если ОбъекьОбъект.ES_СрочностьДоставки = Перечисления.ES_СрочностьДоставки.Сверхсрочная Тогда
		Цвет = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Метка3Цвет);
	ИначеЕсли ОбъекьОбъект.ES_СрочностьДоставки = Перечисления.ES_СрочностьДоставки.Срочная Тогда
		Цвет = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Метка2Цвет);
	ИначеЕсли ОбъекьОбъект.ES_СрочностьДоставки = Перечисления.ES_СрочностьДоставки.Стандартная Тогда
		Цвет = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Метка1Цвет);
	КонецЕсли;
	Если ЗначениеЗаполнено(Цвет) Тогда
		Возврат Цвет;
	Иначе Возврат "";
	КонецЕсли;
	//ЕФСОЛ Несторук 21.10.16 - 
	
	
	//Возврат "truck#255,0,0";
	
КонецФункции

//ЕФСОЛ Несторук 05.08.2016 +
&НаСервере
Функция ДобавитьМетроНаСервере(Метро,ЛинияМетро=Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_Регионы.Ссылка,
	|	ES_Регионы.ЛинияМетро
	|ИЗ
	|	Справочник.ES_Регионы КАК ES_Регионы
	|ГДЕ
	|	ES_Регионы.Наименование = &Наименование
	|	И ES_Регионы.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Наименование", Метро);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
		
	Иначе
		Если Метро = "..." ИЛИ НЕ ЗначениеЗаполнено(Метро) Тогда
			Возврат Справочники.ES_Регионы.ПустаяСсылка();
		Иначе
			
			НовыйЭлемент = Справочники.ES_Регионы.СоздатьЭлемент();
			НовыйЭлемент.Наименование = Метро;
			НовыйЭлемент.ЛинияМетро = ЛинияМетро;
			НовыйЭлемент.Записать();
			
			Возврат НовыйЭлемент.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ES_СписокГрузовТипГрузаПриИзменении(Элемент)
	
	УслугаСтраховки = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(ПредопределенноеЗначение("Перечисление.ES_ВидыСтартовыхНастроек.УслугаСтраховки"));
	ПроцентСтраховки = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(ПредопределенноеЗначение("Перечисление.ES_ВидыСтартовыхНастроек.ПроцентСтраховки"));
	Если ЗначениеЗаполнено(УслугаСтраховки) И ЗначениеЗаполнено(ПроцентСтраховки) Тогда
		ТекДанные = Элементы.ES_СписокГрузов.ТекущиеДанные;
		ТекДанные.ПроцентСтраховки = ПроцентСтраховки;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ОбьявленаяСтоимостьПриИзменении(Элемент)
	
	Если Объект.ES_СписокГрузов.Количество() > 0 Тогда
		Объект.ES_СписокГрузов.Очистить();
	КонецЕсли;
	
	//ПересчитатьСтраховку();
	ЭР_ОбновитьСтоимостьВсехУслуг();
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ПроцентСтраховкиПриИзменении(Элемент)
	
	Если Объект.ES_СписокГрузов.Количество() > 0 Тогда
		Для каждого Стр Из Объект.ES_СписокГрузов Цикл
			Стр.ПроцентСтраховки = Объект.ES_ПроцентСтраховки;
		КонецЦикла;	
	КонецЕсли;
	
	ПересчитатьСтраховку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикПереключательПриИзменении(Элемент)
	
	//Если Объект.ES_Плательщик_Удалить = Объект.ES_ПлательщикПереключатель Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если Объект.ES_ПлательщикПереключатель = ПредопределенноеЗначение("Перечисление.ES_ТипыПлательщиков.Заказчик") Тогда
	//	Объект.ES_Плательщик_Удалить = ПредопределенноеЗначение("Перечисление.ES_ТипыПлательщиков.Заказчик");
	//	ES_ПлательщикПриИзменении("Ок");
	//ИначеЕсли Объект.ES_ПлательщикПереключатель = ПредопределенноеЗначение("Перечисление.ES_ТипыПлательщиков.Получатель") Тогда
	//	Объект.ES_Плательщик_Удалить = ПредопределенноеЗначение("Перечисление.ES_ТипыПлательщиков.Получатель");
	//	ES_ПлательщикПриИзменении("Ок");
	//ИначеЕсли   Объект.ES_ПлательщикПереключатель = ПредопределенноеЗначение("Перечисление.ES_ТипыПлательщиков.ТретьеЛицо") Тогда
	//	Объект.ES_Плательщик_Удалить = ПредопределенноеЗначение("Перечисление.ES_ТипыПлательщиков.ТретьеЛицо");
	//	ES_ПлательщикПриИзменении("Ок");
	//	
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСсылкуНаЗабор()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_СтатусыЗаборовСрезПоследних.Забор
	|ИЗ
	|	РегистрСведений.ES_СтатусыЗаборов.СрезПоследних(, Заказ = &Заказ) КАК ES_СтатусыЗаборовСрезПоследних";
	
	Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ES_СсылкаНаЗабор = Выборка.Забор;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ES_СсылкаНаЗабор) Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ES_СтатусыЗаборовСрезПоследних.Период
		|ИЗ
		|	РегистрСведений.ES_СтатусыЗаборов.СрезПоследних(
		|			,
		|			СтатусЗабора = ЗНАЧЕНИЕ(Перечисление.ES_СтатусыЗаборов.Выполнен)
		|				И Забор = &Забор) КАК ES_СтатусыЗаборовСрезПоследних";
		
		Запрос.УстановитьПараметр("Забор", ES_СсылкаНаЗабор);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ES_ФактЗабора = Формат(Выборка.Период, "ДФ='dd.MM.yyyy ЧЧ:мм'");
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСсылкуНаОтчет ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_СтатусыЗаказовСрезПоследних.Регистратор
	|ИЗ
	|	РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(
	|			,
	|			Заказ = &Заказ
	|				И Регистратор ССЫЛКА Документ.ES_ОтчетОДоставке) КАК ES_СтатусыЗаказовСрезПоследних";
	
	Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();	
		ES_СсылкаНаОтчет = Выборка.Регистратор;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ВидЗабораПриИзменении(Элемент)
	
	Если Объект.ES_ВидЗабора = ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.Упрощенный") Тогда
		Элементы.ES_Возврат.Видимость = Истина;
	Иначе
		Объект.ES_Возврат = Ложь;
		Элементы.ES_Возврат.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьВозврата()
	
	Если Объект.ES_ВидЗабора = ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.Упрощенный") Тогда
		Элементы.ES_Возврат.Видимость = Истина;
	Иначе 
		Элементы.ES_Возврат.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ЦветМеткиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УстановитьЦвет(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦвет(ВыбранноеЗначение)
	мМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыбранноеЗначение,"#");
	RGBМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(мМассив[1],",");
	Элементы.ES_ЦветМетки.ЦветФона = Новый Цвет(RGBМассив[0],RGBМассив[1],RGBМассив[2]);
	Объект.ES_ЦветМетки = ВыбранноеЗначение;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКомментарийКурьера ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_ИзменяемыеРеквизитыЗаказов.Значение,
	|	ES_ИзменяемыеРеквизитыЗаказов.Период
	|ИЗ
	|	РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов КАК ES_ИзменяемыеРеквизитыЗаказов
	|ГДЕ
	|	ES_ИзменяемыеРеквизитыЗаказов.Заказ = &Заказ
	|	И ES_ИзменяемыеРеквизитыЗаказов.Регистратор ССЫЛКА Документ.ES_ОтчетОДоставке
	|	И ES_ИзменяемыеРеквизитыЗаказов.РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Комментарий)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ES_ИзменяемыеРеквизитыЗаказов.Период";
	
	Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Объект.ES_КомментарийКурьера = "";
		Пока Выборка.Следующий() Цикл
			Период = Формат(Выборка.Период,"ДЛФ=D");
			Если ЗначениеЗаполнено(Объект.ES_КомментарийКурьера) Тогда
				Объект.ES_КомментарийКурьера = Объект.ES_КомментарийКурьера + Символы.ПС +  Период + " "+ Выборка.Значение;
			Иначе 
				Объект.ES_КомментарийКурьера = Объект.ES_КомментарийКурьера + ""+  Период + " "+ Выборка.Значение;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЭлектронноеПисьмо(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗаказНаДоставку",Истина);
	ПараметрыОткрытия.Вставить("Заказ", Объект.Ссылка);
	ЗаполняемоеЗначение = Новый Структура;
	ЗаполняемоеЗначение.Вставить("ТипСобытия", ПредопределенноеЗначение("Перечисление.ТипыСобытий.ЭлектронноеПисьмо"));
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗаполняемоеЗначение);
	
	
	ОткрытьФорму("Документ.Событие.ФормаОбъекта",ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ПредоплаченПриИзменении(Элемент)
	
	//ЭР Несторук С.И. 20.12.2016 11:34:08 {
	Если Объект.ES_Предоплачен Тогда
		Объект.ES_НППлан = 0;
	Иначе
		ПересчитатьНаложенныйПлатеж();
	КонецЕсли;
	
	//ЭР Несторук С.И. 20.12.2016 11:34:08 }
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ГрузыВесПриИзменении(Элемент)
	ПересчитатьОбщийВес();
	ЭР_ОбновитьСтоимостьВсехУслуг();
КонецПроцедуры

&НаКлиенте
Процедура ES_ГрузыОбьявленнаяСтоимостьПриИзменении(Элемент)
	
	Объект.ES_ОбьявленнаяСтоимость = Объект.ES_Грузы.Итог("ОбьявленнаяСтоимость");
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ВидОплатыПриИзменении(Элемент)
	
	ПересчитатьРКО();
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ГрузыОбъемныйВесПриИзменении(Элемент)
	ПересчитатьОбщийОбъемныйВес();
КонецПроцедуры

&НаКлиенте
Процедура ES_ГрузыОбъемПриИзменении(Элемент)
	ПересчитатьОбщийОбъемныйВес();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтоимостьДоставки(Команда)
	//EFSOL_Шаповал Олег Анатольевич 16 марта 2017 г. 17:58:47 +
	ЭР_ОбновитьСтоимостьВсехУслуг();
	//EFSOL Шаповал О.А. -
КонецПроцедуры

&НаСервере
Процедура ЭР_ОбновитьСтоимостьДоставкиНаСервере()
	//EFSOL_Шаповал Олег Анатольевич 16 марта 2017 г. 17:58:26 +
	
	Если НЕ Константы.ES_ИспользоватьТарифныйКалькулятор.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	мОбъект = РеквизитФормыВЗначение("Объект");
	
			
	СтартНастройки = ES_ОбщегоНазначения.ПолучитьВсеСтартовыеНастройки();
	
	//ЭР Несторук С.И. 04.04.2017 15:25:41 {
	//Если мОбъект.ES_ВидДоставки = Перечисления.ES_ВидыДоставки.Самовывоз Тогда
	//	мУслуга = СтартНастройки.УслугаСамовывоза;
	//Иначе
		мУслуга = СтартНастройки.УслугаДоставки;
	//КонецЕсли;
	//}ЭР Несторук С.И.
	
	Если мУслуга.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура",мУслуга));
	
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаДоставки = МассивСтрок[0];
	Иначе		
		СтрокаДоставки = Объект.Запасы.Добавить();
		СтрокаДоставки.Количество = 1;
		СтрокаДоставки.ЕдиницаИзмерения = мУслуга.ЕдиницаИзмерения;
		СтрокаДоставки.СтавкаНДС = ES_ОбщегоНазначения.ПолучитьСтавкуНДСНоменклатуры(мУслуга);
		СтрокаДоставки.Номенклатура = мУслуга;
	КонецЕсли;
	
	СтрокаДоставки.Количество = 1;
	СтрокаДоставки.ЕдиницаИзмерения = мУслуга.ЕдиницаИзмерения;
	мВес = ?(мОбъект.Договор.ES_РасчетТарифовОтМаксимальногоВеса, Макс(мОбъект.ES_ОбщийВес,мОбъект.ES_ОбщийОбъемныйВес),мОбъект.ES_ОбщийВес);
	СтруктураВозврата = ES_ОбщегоНазначенияКлиентСервер.ЭР_ОбновитьСтоимостьДоставки(мОбъект.Дата, Договор, мОбъект.ES_ЗонаДоставки, мВес,  мОбъект.ES_СрочностьДоставки,  мОбъект.ES_ВидДоставки,мОбъект.Контрагент.ES_ВидКонтрагента);
	СтрокаДоставки.Цена = СтруктураВозврата.Цена*мОбъект.ES_ВнутризональныйКоэф;
	СтрокаДоставки.СуммаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаДоставки.СтавкаНДС)*СтрокаДоставки.Цена/100;
	СтрокаДоставки.Сумма = СтрокаДоставки.Цена;
	//СтрокаДоставки.Всего = СтруктураВозврата.Цена;
	СтрокаДоставки.Всего = СтрокаДоставки.Цена + ?(мОбъект.СуммаВключаетНДС, 0, СтрокаДоставки.СуммаНДС);
	СтрокаДоставки.ДатаОтгрузки = ТекущаяДата();
	
	//Объект.ES_СрокДоставки = 0;
	
	//EFSOL Шаповал О.А. -	
КонецПроцедуры

&НаКлиенте
Процедура ES_ЗонаДоставкиПриИзменении(Элемент)
	//EFSOL_Шаповал Олег Анатольевич 16 марта 2017 г. 17:58:47 +
	ЭР_ОбновитьСтоимостьВсехУслуг();
	ES_ПроверкаЗаполненияСтоимостиТК();

	//EFSOL Шаповал О.А. -
КонецПроцедуры

&НаКлиенте
Процедура ES_ОбщийВесПриИзменении(Элемент)
	//EFSOL_Шаповал Олег Анатольевич 16 марта 2017 г. 17:58:47 +
	ЭР_ОбновитьСтоимостьВсехУслуг();
	ES_ПроверкаЗаполненияСтоимостиТК();

	//EFSOL Шаповал О.А. -
	ES_РасчетныйОбъемныйВесПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ES_ГрузыСтавкаНДСПриИзменении(Элемент)
	 //EFSOL Сережко А.С.
	 
	СтрокаТабличнойЧасти = Элементы.ES_Грузы.ТекущиеДанные;
	
	// Сумма НДС.
	РассчетСуммыНДС(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура ES_ГрузыСуммаНДСПриИзменении(Элемент)
	 //EFSOL Сережко А.С.
	СтрокаТабличнойЧасти = Элементы.ES_Грузы.ТекущиеДанные;
	
	// Всего.
	//СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);

КонецПроцедуры

&НаКлиенте
Процедура РассчетСуммыНДС(СтрокаТабличнойЧасти)
	//EFSOL Сережко А.С.
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
	СтрокаТабличнойЧасти.НпПлан - (СтрокаТабличнойЧасти.НпПлан) / ((СтавкаНДС + 100) / 100),
	СтрокаТабличнойЧасти.НпПлан * СтавкаНДС / 100);
	
КонецПроцедуры // ПересчитатьСуммыДокумента() 

&НаСервереБезКонтекста
Функция ES_НаправлениеПриИзмененииНаСервере(Направление)
	  //EFSOL Сережко А.С.     
	  Структура = Новый Структура;
	  
	  Структура.Вставить("Город1", Направление.Город1);
	  Структура.Вставить("Город2", Направление.Город2);
	  Возврат Структура;
	
КонецФункции

&НаКлиенте
Процедура ES_НаправлениеПриИзменении(Элемент)
	//EFSOL Сережко А.С. +    
	Результат =  ES_НаправлениеПриИзмененииНаСервере(Объект.ES_Направление);
	Объект.ES_ВнутризональныйКоэф = 1;

	Объект.ES_Город1 = Результат.Город1;
	Объект.ES_АдресДоставкиГород = Результат.Город2; 

	//EFSOL Сережко А.С. +
	СтруктураЗона = ЗаполнениеЗоныПриИзмененииНаСервере();
	Объект.ES_ЗонаДоставки = СтруктураЗона.Зона;
	Объект.ES_СрокДоставки = СтруктураЗона.СрокДоставки;
	//EFSOL Сережко А.С. -
	
	//EFSOL_Шаповал Олег Анатольевич 16 марта 2017 г. 17:58:47 +
	ЭР_ОбновитьСтоимостьВсехУслуг();
	ES_ПроверкаЗаполненияСтоимостиТК();

	//EFSOL Шаповал О.А. -
	

КонецПроцедуры

&НаКлиенте
Процедура ES_Город1ПриИзменении(Элемент)   
	//EFSOL Сережко А.С.	
	ES_ОбновитьНаправление();
    //ЕФСОЛ 
КонецПроцедуры 

Процедура ЗаполнитьНаправления()
	//ЕФСОЛ Савченко К.Р. 19.09.2017 +
	Если НЕ ЗначениеЗаполнено (Объект.ES_Направление) и НЕ ЗначениеЗаполнено (Объект.ES_Город1) и НЕ ЗначениеЗаполнено (Объект.ES_АдресДоставкиГород) Тогда  
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Данное направление не создано'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	//ЕФСОЛ Савченко К.Р. 19.09.2017 -
КонецПроцедуры

&НаСервере
Функция ЭР_ОбновитьУслугиТЧДоставкиНаСервере(Номенклатура,УслугаДоставки = Неопределено)
	//EFSOL Сережко А.С.
	Если УслугаДоставки = Неопределено Тогда
		СтартНастройки = ES_ОбщегоНазначения.ПолучитьВсеСтартовыеНастройки();
		УслугаДоставки = СтартНастройки.УслугаДоставки;
	КонецЕсли;
	мОбъект = РеквизитФормыВЗначение("Объект");
	СТ_Доставки = мОбъект.Запасы.Найти(УслугаДоставки,"Номенклатура");
	//ES_Шаповал Олег 19.09.2017+
	Если СТ_Доставки = Неопределено Тогда
		Мас =  новый Массив();
		мас.Добавить(0);
		Возврат Мас;
	КонецЕсли;
	//ES_Шаповал Олег 19.09.2017-
	СтоимостьДоставки = СТ_Доставки.Сумма;
	СтоимостьГрузы = мОбъект.ES_ОбьявленнаяСтоимость;
	СуммаНП = мОбъект.ES_НППлан;
	
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("Номенклатура"); 	
	Таб.Колонки.Добавить("Цена");
	Стр = Таб.Добавить();
   	Стр.Номенклатура = Номенклатура;
	Стр.Цена = 0;

	Ответ = ES_ОбщегоНазначенияКлиентСервер.ЭР_ОбновитьУслугиТЧДоставки(Таб, мОбъект.Дата, Объект.Договор,СтоимостьДоставки,СтоимостьГрузы,СуммаНП,Объект.ES_ОбщийВес);
	////Возврат Таб;    
	СтруктураВозврата = Таб.ВыгрузитьКолонку("Цена");
	Возврат СтруктураВозврата;	 	
КонецФункции

&НаСервере
Функция ЗаполнениеЗоныПриИзмененииНаСервере()
	
	Возврат ES_ОбщегоНазначения.ОпределитьЗонуДоставки(Объект.ES_Направление, Объект.Контрагент.ES_ВидКонтрагента, Объект.ES_СрочностьДоставки);
	
КонецФункции

&НаСервере
Процедура ПозднееВремяНаСервере()
	
	Если Константы.ES_ПозднееВремя.Получить() <= Объект.ES_ВремяДоставкиПо Тогда
		Артикул = "1016";
		Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
		//Номенклатура = Справочники.Номенклатура.НайтиПоНаименованию("Позднее время");
		//Наценка = Номенклатура.ES_Наценка;      	                                    
		
		Доставка = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.УслугаДоставки);
				
		ТЧ=Объект.Запасы;
		НайденныеСтроки = ТЧ.НайтиСтроки(Новый Структура("Номенклатура", Доставка));
		  
		
		мОбъект = РеквизитФормыВЗначение("Объект").Запасы;
		
		   		
		МассСтрок=ТЧ.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
		Если МассСтрок.Количество()>= 1 Тогда
       		Возврат;
		Иначе
			НоваяСтрокаТЧ = ТЧ.Добавить();
			НоваяСтрокаТЧ.Номенклатура = Номенклатура;
		КонецЕсли;				
		
		НоваяСтрокаТЧ.Количество = 1;
		МассЦен = ЭР_ОбновитьУслугиТЧДоставкиНаСервере(Номенклатура,Доставка);
		Если МассЦен.Количество() > 0 Тогда
			Цена = МассЦен[0];
		Иначе
			Цена = 0;
		КонецЕсли;
		НоваяСтрокаТЧ.Цена = Цена;
		НоваяСтрокаТЧ.Сумма = НоваяСтрокаТЧ.Цена * НоваяСтрокаТЧ.Количество;
		НоваяСтрокаТЧ.СтавкаНДС = Номенклатура.СтавкаНДС;
		НоваяСтрокаТЧ.Всего = НоваяСтрокаТЧ.Сумма + ?(Объект.СуммаВключаетНДС, 0, НоваяСтрокаТЧ.СуммаНДС);
	Иначе
		Артикул = "1016";
		Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
		//Номенклатура = Справочники.Номенклатура.НайтиПоНаименованию("Позднее время");
		ТЧ=Объект.Запасы;
		МассСтрок=ТЧ.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
				
		Для каждого Строка Из МассСтрок Цикл      
      		ТЧ.Удалить(Строка);      
     	КонецЦикла;
		
	КонецЕсли; 
	
Конецпроцедуры

&НаСервере
Процедура ДоставкаВыходногоДняНаСервере(мДата)
	//Дата = ТекущаяДата();
	//ДеньРабочий = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий;
	//СтруктураКалендаря = Новый Структура("Рабочий", ДеньРабочий);
	//СтруктураВыходногоДня = РегистрыСведений.ДанныеПроизводственногоКалендаря.Получить(Дата, СтруктураКалендаря);	

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеПроизводственногоКалендаря.ВидДня
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.Дата = &Дата
		|	И ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь";
	
	Запрос.УстановитьПараметр("Дата", мДата);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", Справочники.ПроизводственныеКалендари.НайтиПоКоду("РФ"));
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	ВидДня = ВыборкаДетальныеЗаписи.ВидДня;
	Если НЕ ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий Тогда
		Артикул = "1017";
		Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
		//Номенклатура = Справочники.Номенклатура.НайтиПоНаименованию("Доставка выходного дня");
		//Наценка = Номенклатура.ES_Наценка;
		Доставка = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.УслугаДоставки);
								
		ТЧ=Объект.Запасы; 		
		НайденныеСтроки = ТЧ.НайтиСтроки(Новый Структура("Номенклатура", Доставка));

		мОбъект = РеквизитФормыВЗначение("Объект").Запасы;		
		   		
		МассСтрок=ТЧ.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
		Если МассСтрок.Количество()>= 1 Тогда
       		Возврат;
		Иначе
			НоваяСтрокаТЧ = ТЧ.Добавить();
			НоваяСтрокаТЧ.Номенклатура = Номенклатура;
		КонецЕсли;
		
		НоваяСтрокаТЧ.Количество = 1;
		
		МассЦен = ЭР_ОбновитьУслугиТЧДоставкиНаСервере(Номенклатура,Доставка);
		Если МассЦен.Количество() > 0 Тогда
			Цена = МассЦен[0];
		Иначе
			Цена = 0;
		КонецЕсли;
		
		// установить ДатаОтгрузки
		НоваяСтрокаТЧ.ДатаОтгрузки = Объект.ES_ДатаДоставки;
		//EFSOL_oks_kry_18.03.2015 22:13:08_END
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", НоваяСтрокаТЧ.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", НоваяСтрокаТЧ.Характеристика);
		СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		
		Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
			
			СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
			СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
			СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
			СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
			СтруктураДанные.Вставить("Коэффициент", 1);
			СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
			
		КонецЕсли;
		
		// ДисконтныеКарты
		СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
		СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);		
		// Конец ДисконтныеКарты
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		НоваяСтрокаТЧ.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		НоваяСтрокаТЧ.Количество = 1;
		
		НоваяСтрокаТЧ.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
		НоваяСтрокаТЧ.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		НоваяСтрокаТЧ.Содержание = "";
		НоваяСтрокаТЧ.Спецификация = СтруктураДанные.Спецификация;
		
		НоваяСтрокаТЧ.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;


		НоваяСтрокаТЧ.Цена = Цена;  
		НоваяСтрокаТЧ.Сумма = НоваяСтрокаТЧ.Цена * НоваяСтрокаТЧ.Количество;
		НоваяСтрокаТЧ.СтавкаНДС = ES_ОбщегоНазначения.ПолучитьСтавкуНДСНоменклатуры(Номенклатура);
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрокаТЧ.СтавкаНДС);
		НоваяСтрокаТЧ.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
		НоваяСтрокаТЧ.Сумма - (НоваяСтрокаТЧ.Сумма) / ((СтавкаНДС + 100) / 100),
		НоваяСтрокаТЧ.Сумма * СтавкаНДС / 100);

		НоваяСтрокаТЧ.Всего = НоваяСтрокаТЧ.Сумма + ?(Объект.СуммаВключаетНДС, 0, НоваяСтрокаТЧ.СуммаНДС);
	Иначе
		Артикул = "1017";
		Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
		//Номенклатура = Справочники.Номенклатура.НайтиПоНаименованию("Доставка выходного дня");
		ТЧ=Объект.Запасы;
		МассСтрок=ТЧ.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
				
		Для каждого Строка Из МассСтрок Цикл      
      		ТЧ.Удалить(Строка);      
     	КонецЦикла;
		
	КонецЕсли;  	
	
КонецПроцедуры    

&НаКлиенте
Процедура ES_ОбщийОбъемныйВесПриИзменении(Элемент)

	//EFSOL_Шаповал Олег Анатольевич 16 марта 2017 г. 17:58:47 +
	ЭР_ОбновитьСтоимостьВсехУслуг();
	//EFSOL Шаповал О.А. -
	
КонецПроцедуры

&НаКлиенте
Процедура ES_НеправильныйАдресПриИзменении(Элемент)
	//ЕФСОЛ Савченко К.Р. 14.09.2017 +
	Если Объект.ES_НеправильныйАдрес Тогда
		Объект.ES_ДанныеНеправильныйАдрес = "" + ПользователиКлиентСервер.ТекущийПользователь() + ", " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ""в"" ЧЧ:мм'");
		ES_СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.НеправильныйАдрес");
	Иначе
		Объект.ES_ДанныеНеправильныйАдрес = "";
		ES_СтатусЗаказа = "";
	КонецЕсли;
	Объект.ES_Проблема = Объект.ES_НеправильныйАдрес;
	//ЕФСОЛ Савченко К.Р. 14.09.2017 -
КонецПроцедуры

&НаКлиенте
Процедура ES_ГрузыШиринаПриИзменении(Элемент)
	//ЕФСОЛ Савченко К.Р. 14.09.2017 +
	ПересчитатьОбъемОбъемныйВесВСтрокеГрузы();
	ПересчитатьПодвал();
	ES_РасчетныйОбъемныйВесПриИзменении(Элемент);
	//ЕФСОЛ Савченко К.Р. 14.09.2017 -	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьОбъемОбъемныйВесВСтрокеГрузы()
	//ЭР Несторук С.И. 29.09.2017 16:59:14 {
	//Теперь габариты указываются в метрах
	//}ЭР Несторук С.И.
	Коэфф = 0;
	Коэфф = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(ПредопределенноеЗначение("Перечисление.ES_ВидыСтартовыхНастроек.Коэффициент"));
	Коэфф = ?(ЗначениеЗаполнено(Коэфф), Коэфф, 0);
	
	ТекСтрока = Элементы.ES_Грузы.ТекущиеДанные;
	ТекСтрока.ОбъемныйВес = ?(коэфф = 0,0, ТекСтрока.Ширина*ТекСтрока.Длина*ТекСтрока.Высота*(100*100*100)/Коэфф);
	ТекСтрока.Объем = ТекСтрока.Ширина*ТекСтрока.Длина*ТекСтрока.Высота;///(100*100*100);
	
	Объект.Ширина = Объект.ES_Грузы.Итог("Ширина");
	Объект.Длина = Объект.ES_Грузы.Итог("Длина");
	Объект.Высота = Объект.ES_Грузы.Итог("Высота");
	Объект.ES_ОбщийВес = Объект.ES_Грузы.Итог("Вес");

КонецПроцедуры


&НаКлиенте
Процедура ES_ГрузыДлинаПриИзменении(Элемент)
	//ЕФСОЛ Савченко К.Р. 15.09.2017 +
	ПересчитатьОбъемОбъемныйВесВСтрокеГрузы();

	ПересчитатьПодвал();
	ES_РасчетныйОбъемныйВесПриИзменении(Элемент);
	//ЕФСОЛ Савченко К.Р. 15.09.2017 -
КонецПроцедуры

&НаКлиенте
Процедура ES_ГрузыВысотаПриИзменении(Элемент)
	//ЕФСОЛ Савченко К.Р. 15.09.2017 +
	ПересчитатьОбъемОбъемныйВесВСтрокеГрузы();
	ПересчитатьПодвал();
	ES_РасчетныйОбъемныйВесПриИзменении(Элемент);
	//ЕФСОЛ Савченко К.Р. 15.09.2017 -
КонецПроцедуры


&НаКлиенте
Процедура ВысотаПриИзменении(Элемент)
	ПересчитатьПодвал();
КонецПроцедуры

&НаКлиенте
Процедура ДлинаПриИзменении(Элемент)
	ПересчитатьПодвал();	
КонецПроцедуры

&НаКлиенте
Процедура ШиринаПриИзменении(Элемент)
	ПересчитатьПодвал();	
КонецПроцедуры

Процедура ПересчитатьПодвал()
	//ЕФСОЛ Савченко К.Р. 15.09.2017 +

	//Объект.Ширина = Объект.ES_СписокГрузов.Итог("Ширина");
	//Объект.Ширина = Объект.ES_Грузы.Итог("Ширина");
	//
	//Объект.Длина = Объект.ES_СписокГрузов.Итог("Длина");
	//Объект.Длина = Объект.ES_Грузы.Итог("Длина");
	//
	//Объект.Высота = Объект.ES_СписокГрузов.Итог("Высота");
	//Объект.Высота = Объект.ES_Грузы.Итог("Высота");
	//ЭР Несторук С.И. 29.09.2017 17:05:01 {
	//Теперь габариты указываются в метрах
	//}ЭР Несторук С.И.
	КоэффициентИзСтартовых = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(ПредопределенноеЗначение("Перечисление.ES_ВидыСтартовыхНастроек.Коэффициент"));
	Если КоэффициентИзСтартовых = 0 Тогда Возврат КонецЕсли;
	Объект.ES_ОбщийОбъемныйВес 	= Объект.Ширина * Объект.Длина * Объект.Высота *(100*100*100)/ КоэффициентИзСтартовых ;
	Объект.ES_Объем				= Объект.Ширина * Объект.Длина * Объект.Высота;///(100*100*100);
	//ЕФСОЛ Савченко К.Р. 15.09.2017 -

КонецПроцедуры

&НаКлиенте
Процедура ES_РасчетныйОбъемныйВесПриИзменении(Элемент)
	//ЕФСОЛ Савченко К.Р. 15.09.2017 +
	мМаксВес = ES_ОбщегоНазначения.ЭР_ПолучитьЗначениеРеквизитаНаСервере(Объект.Договор,"ES_РасчетТарифовОтМаксимальногоВеса").ES_РасчетТарифовОтМаксимальногоВеса;
	мВес = ?(мМаксВес, Макс(Объект.ES_ОбщийВес,Объект.ES_ОбщийОбъемныйВес),Объект.ES_ОбщийВес);
	Объект.ES_РасчетныйВес = мВес;
	//ЕФСОЛ Савченко К.Р. 15.09.2017 -
	
КонецПроцедуры

&НаКлиенте
Процедура ES_СтранаПриИзменении(Элемент)
	//ЕФСОЛ Савченко К.Р. 15.09.2017 +
	ЗаполнитьES_АдресДоставки();
	//ЕФСОЛ Савченко К.Р. 15.09.2017 -
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ОбластьПриИзменении(Элемент)
	//ЕФСОЛ Савченко К.Р. 15.09.2017 +
	ЗаполнитьES_АдресДоставки();
	//ЕФСОЛ Савченко К.Р. 15.09.2017 -
КонецПроцедуры

&НаКлиенте
Процедура ES_ИндексПриИзменении(Элемент)
	//ЕФСОЛ Савченко К.Р. 15.09.2017 +
	ЗаполнитьES_АдресДоставки();
	//ЕФСОЛ Савченко К.Р. 15.09.2017 -
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПриИзменении(Элемент)
	//ЕФСОЛ Савченко К.Р. 15.09.2017 +
	ЗаполнитьES_АдресДоставки();
	//ЕФСОЛ Савченко К.Р. 15.09.2017 -
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьES_АдресДоставки()
	//ЕФСОЛ Савченко К.Р. 15.09.2017 +
	
	мАдрес = "";
	//мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_АдресДоставкиИндекс)),СокрЛП(Объект.ES_АдресДоставкиИндекс),"");
	//мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_АдресДоставкиОбласть)),", "+СокрЛП(Объект.ES_АдресДоставкиОбласть),"");
	//мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_АдресДоставкиГород)),", "+СокрЛП(Объект.ES_АдресДоставкиГород)+" г","");
	//мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_АдресДоставкиУлица)),", "+СокрЛП(Объект.ES_АдресДоставкиУлица)+" ул","");
	//мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_АдресДоставкиДом)),", дом № "+СокрЛП(Объект.ES_АдресДоставкиДом),"");
	//мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_АдресДоставкиСтроение)),", строение "+СокрЛП(Объект.ES_АдресДоставкиСтроение),"");
	//мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_АдресДоставкиКорпус)),", корпус "+СокрЛП(Объект.ES_АдресДоставкиКорпус),"");
	//мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_АдресДоставкиКвартира)),", квартира "+СокрЛП(Объект.ES_АдресДоставкиКвартира),"");
	
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_АдресДоставкиИндекс)),СокрЛП(Объект.ES_АдресДоставкиИндекс)+ ", ","");
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_АдресДоставкиОбласть)),СокрЛП(Объект.ES_АдресДоставкиОбласть)+", ","");
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_АдресДоставкиГород)),СокрЛП(Объект.ES_АдресДоставкиГород)+", ","");
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_АдресДоставкиУлица)),СокрЛП(Объект.ES_АдресДоставкиУлица)+" ул, ","");
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_АдресДоставкиДом)),"дом № "+СокрЛП(Объект.ES_АдресДоставкиДом)+", ","");
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_АдресДоставкиСтроение)),"строение "+СокрЛП(Объект.ES_АдресДоставкиСтроение)+", ","");
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_АдресДоставкиКорпус)),"корпус "+СокрЛП(Объект.ES_АдресДоставкиКорпус)+", ","");
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_АдресДоставкиКвартира)),"квартира "+СокрЛП(Объект.ES_АдресДоставкиКвартира)+", ","");

	
	Объект.ES_АдресДоставки = мАдрес;
	ES_АдресДоставкиXML = "";
	ЗаполнитьШиротуИДолготуПоАдресу("ES_АдресДоставки");
	//ЕФСОЛ Савченко К.Р. 15.09.2017 -
КонецПроцедуры

&НаКлиенте
Процедура ES_ИндексОтправительПриИзменении(Элемент)
	//ЕФСОЛ Савченко К.Р. 16.09.2017 +
	ЗаполнитьES_ЗаборАдрес();
	//ЕФСОЛ Савченко К.Р. 16.09.2017 -
КонецПроцедуры

&НаКлиенте
Процедура ES_СтранаОтправительПриИзменении(Элемент)
	//ЕФСОЛ Савченко К.Р. 16.09.2017 +
	ЗаполнитьES_ЗаборАдрес();
	//ЕФСОЛ Савченко К.Р. 16.09.2017 -
КонецПроцедуры

&НаКлиенте
Процедура ES_ОбластьОтправительПриИзменении(Элемент)
	//ЕФСОЛ Савченко К.Р. 16.09.2017 +
	ЗаполнитьES_ЗаборАдрес();
	//ЕФСОЛ Савченко К.Р. 16.09.2017 -
КонецПроцедуры

&НаКлиенте
Процедура ES_ЗаборГородПриИзменении(Элемент)
	ES_ОбновитьНаправление();	
КонецПроцедуры

&НаКлиенте
Процедура ES_АдресОтправительПриИзменении(Элемент)
	//ЕФСОЛ Савченко К.Р. 16.09.2017 +
	ЗаполнитьES_ЗаборАдрес();
	//ЕФСОЛ Савченко К.Р. 16.09.2017 -
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьES_ЗаборАдрес()
	//ЕФСОЛ Савченко К.Р. 16.09.2017 +
	Объект.ES_ЗаборАдрес =""+Объект.ES_ЗаборСтранаОтправитель+" "+Объект.ES_ЗаборИндексОтправитель+" "+Объект.ES_ЗаборОбластьОтправитель+" "+Объект.ES_Город1+" "+Объект.ES_ЗаборАдресОтправитель;
	//ЕФСОЛ Савченко К.Р. 16.09.2017 -
КонецПроцедуры

&НаКлиенте
Процедура ES_НППланПриИзменении(Элемент)
	ЭР_ОбновитьСтоимостьВсехУслуг();
КонецПроцедуры

&НаСервере
Процедура ЭР_ДобавитьУслугиНП()
	
	//мОбъект = РеквизитФормыВЗначение("Объект");
	//
	//УслугаНП = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул","1001");
	//СТ_Поиска = мОбъект.Запасы.Найти(УслугаНП,"Номенклатура");
	//
	//Если мОбъект.ES_НППлан > 0 Тогда
	//	//УслугаНП = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул","1001");
	//	Если УслугаНП.Пустая() Тогда
	//		Сообщить("Не найдена услуга НП с артикулом - 1001");
	//		Возврат;
	//	КонецЕсли;
	//	
	//	//СТ_Поиска = мОбъект.Запасы.Найти(УслугаНП,"Номенклатура");
	//	Если СТ_Поиска = Неопределено Тогда
	//		НоваяСтрока = мОбъект.Запасы.Добавить();
	//		НоваяСтрока.Номенклатура = УслугаНП;
	//		НоваяСтрока.Количество = 1;
	//		НоваяСтрока.СтавкаНДС = УслугаНП.СтавкаНДС;
	//	КонецЕсли;
	//Иначе
	//	Если НЕ СТ_Поиска = Неопределено Тогда
	//		мОбъект.Запасы.Удалить(СТ_Поиска);
	//	КонецЕсли;
	//КонецЕсли;
	//ЗначениеВДанныеФормы(мОбъект,Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЭР_ДобавитьУслугиСтраховки()
	
	мОбъект = РеквизитФормыВЗначение("Объект");
	
	УслугаСтраховки = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул","1002");
	СТ_Поиска = мОбъект.Запасы.Найти(УслугаСтраховки,"Номенклатура");
	
	Если мОбъект.ES_ОбьявленнаяСтоимость > 0 Тогда
		//УслугаНП = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул","1001");
		Если УслугаСтраховки.Пустая() Тогда
			Сообщить("Не найдена услуга НП с артикулом - 1002");
			Возврат;
		КонецЕсли;
		
		//СТ_Поиска = мОбъект.Запасы.Найти(УслугаНП,"Номенклатура");
		Если СТ_Поиска = Неопределено Тогда
			НоваяСтрока = мОбъект.Запасы.Добавить();
			НоваяСтрока.Номенклатура = УслугаСтраховки;
			НоваяСтрока.Количество = 1;
			НоваяСтрока.СтавкаНДС = ES_ОбщегоНазначения.ПолучитьСтавкуНДСНоменклатуры(УслугаСтраховки);
			НоваяСтрока.ЕдиницаИзмерения = УслугаСтраховки.ЕдиницаИзмерения;
		КонецЕсли;
	Иначе
		Если НЕ СТ_Поиска = Неопределено Тогда
			мОбъект.Запасы.Удалить(СТ_Поиска);
		КонецЕсли;
	КонецЕсли;
	ЗначениеВДанныеФормы(мОбъект,Объект);
	
КонецПроцедуры


&НаКлиенте
Процедура ЭР_ДобавитьУслугуСбора()
	
	
	УслугаСбора = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(ПредопределенноеЗначение("Перечисление.ES_ВидыСтартовыхНастроек.УслугаСбора"));
	СТ_Поиска = Новый Структура;
	СТ_Поиска.Вставить("Номенклатура",УслугаСбора); 
	НайтиСтроки =  Объект.Запасы.НайтиСтроки(СТ_Поиска);
	Если НайтиСтроки.Количество()>0 Тогда 
		НоваяСтрока = НайтиСтроки[0];
	Иначе   		
		НоваяСтрока =  Объект.Запасы.Добавить();
	КонецЕсли;	
	НоваяСтрока.Номенклатура = УслугаСбора;
	НоваяСтрока.ЕдиницаИзмерения = ES_ОбщегоНазначения.ЭР_ПолучитьЗначениеРеквизитаНаСервере(УслугаСбора,"ЕдиницаИзмерения").ЕдиницаИзмерения;
	НоваяСтрока.Количество = 1;
	НоваяСтрока.ДатаОтгрузки = ТекущаяДата();
	//НоваяСтрока.СтавкаНДС = УслугаСбора.СтавкаНДС;		
	НоваяЦена = ЭР_ОбновитьУслугиТЧДоставкиНаСервере(НоваяСтрока.Номенклатура,УслугаСбора);
	НоваяСтрока.Цена = ?(НоваяЦена.Количество() <> 0, НоваяЦена[0],  0);
	НоваяСтрока.Сумма = НоваяСтрока.Цена*НоваяСтрока.Количество;
	НоваяСтрока.СтавкаНДС = ES_ОбщегоНазначения.ПолучитьСтавкуНДСНоменклатуры(УслугаСбора);
	РассчитатьСуммуНДС(НоваяСтрока);
	
	// Всего.
	НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);  			
	
	Если НоваяСтрока.Цена = 0 Тогда
		Объект.Запасы.Удалить(НоваяСтрока);
	КонецЕсли;
	                		
КонецПроцедуры



&НаКлиенте
Процедура ДатаСоздание(Элемент, СтандартнаяОбработка)
	ДатаДокумента = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура ES_АдресДоставкиИндексПриИзменении(Элемент)
	ЗаполнитьES_АдресДоставки();
КонецПроцедуры

&НаКлиенте
Процедура ES_ИзКЛАДРПриИзменении(Элемент)
	ES_УстановитьДоступностьФормыАдреса(Объект.ES_ИзКЛАДР);
КонецПроцедуры
#КонецОбласти

&НаКлиенте
Процедура ES_УстановитьДоступностьФормыАдреса(Кладр)	
	Элементы.ES_АдресКЛАДР.Доступность = НЕ Кладр;
	Элементы.ES_АдресДоставки.Доступность = Кладр;
КонецПроцедуры

&НаКлиенте
Процедура ES_АдресДоставкиОбластьПриИзменении(Элемент)
	ES_ОбновитьНаправление();
	ЗаполнитьES_АдресДоставки();
КонецПроцедуры

&НаКлиенте
Процедура ES_АдресДоставкиГородПриИзменении(Элемент)
	ES_ОбновитьНаправление();
КонецПроцедуры

&НаКлиенте
Процедура ES_ОбновитьНаправление()
	Если ИспользуетсяТарифныйКалькулятор Тогда
		мСтруктураНаправлений = ES_ОбщегоНазначения.ПолучитьНаправление(Объект.ES_Город1,Объект.ES_АдресДоставкиГород,Объект.ES_ЗаборОбластьОтправитель,Объект.ES_АдресДоставкиОбласть); 
		Направление = мСтруктураНаправлений.Направление;
		Объект.ES_ВнутризональныйКоэф = мСтруктураНаправлений.Коэффициент;
		Объект.ES_Направление = Направление;
		СтруктураЗона = ЗаполнениеЗоныПриИзмененииНаСервере();
		Объект.ES_ЗонаДоставки = СтруктураЗона.Зона;
		Объект.ES_СрокДоставки = СтруктураЗона.СрокДоставки;
		//EFSOL_Шаповал Олег Анатольевич 16 марта 2017 г. 17:58:47 +
		ЭР_ОбновитьСтоимостьВсехУслуг();
		//EFSOL Шаповал О.А. -
		//ЕФСОЛ Савченко К.Р. 19.09.2017 +
		//ЗаполнитьES_АдресДоставки();
		ЗаполнитьНаправления();
		ES_ПроверкаЗаполненияНаправления();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ES_АдресДоставкиУлицаПриИзменении(Элемент)
	ЗаполнитьES_АдресДоставки();
КонецПроцедуры

&НаКлиенте
Процедура ES_АдресДоставкиДомПриИзменении(Элемент)
	ЗаполнитьES_АдресДоставки();
КонецПроцедуры

&НаКлиенте
Процедура ES_АдресДоставкиСтроениеПриИзменении(Элемент)
	ЗаполнитьES_АдресДоставки();
КонецПроцедуры

&НаКлиенте
Процедура ES_АдресДоставкиКорпусПриИзменении(Элемент)
	ЗаполнитьES_АдресДоставки();
КонецПроцедуры

&НаКлиенте
Процедура ES_АдресДоставкиКвартираПриИзменении(Элемент)
	ЗаполнитьES_АдресДоставки();
КонецПроцедуры

&НаКлиенте
Процедура ES_ЗаборИзКЛАДРПриИзменении(Элемент)
	ES_УстановитьДоступностьФормыАдресаЗабора(Объект.ES_ЗаборИзКЛАДР);
КонецПроцедуры

&НаКлиенте
Процедура ES_УстановитьДоступностьФормыАдресаЗабора(Кладр)	
	Элементы.ES_АдресЗаборКЛАДР.Доступность = НЕ Кладр;
	Элементы.ES_ЗаборАдрес.Доступность = Кладр;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьES_АдресЗабора()
	//ЕФСОЛ Савченко К.Р. 15.09.2017 +
	
	мАдрес = "";
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_ЗаборИндексОтправитель)),СокрЛП(Объект.ES_ЗаборИндексОтправитель)+", ","");
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_ЗаборОбластьОтправитель)),СокрЛП(Объект.ES_ЗаборОбластьОтправитель)+", ","");
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_Город1)),СокрЛП(Объект.ES_Город1)+", ","");
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_ЗаборАдресОтправитель)),СокрЛП(Объект.ES_ЗаборАдресОтправитель)+" ул, ","");
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_АдресЗаборДом)),"дом № "+СокрЛП(Объект.ES_АдресЗаборДом)+", ","");
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_АдресЗаборСтроение)),"строение "+СокрЛП(Объект.ES_АдресЗаборСтроение)+", ","");
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_АдресЗаборКорпус)),"корпус "+СокрЛП(Объект.ES_АдресЗаборКорпус)+", ","");
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_АдресЗаборКвартира)),"квартира "+СокрЛП(Объект.ES_АдресЗаборКвартира)+", ","");
	
	Объект.ES_ЗаборАдрес = мАдрес;
	ES_ЗаборАдресXML = "";
	ЗаполнитьШиротуИДолготуПоАдресу("ES_ЗаборАдрес");
	//ЕФСОЛ Савченко К.Р. 15.09.2017 -
КонецПроцедуры

&НаКлиенте
Процедура ES_ПВЗПриИзменении(Элемент)
	
	ЗаполнитьАдресДоставкиПоПВЗ(Объект.ES_ПВЗ);
	Если ЗначениеЗаполнено(Объект.ES_АдресДоставки) Тогда
		ЗаполнитьШиротуИДолготуПоАдресу("ES_АдресДоставки");
	КонецЕсли;
	//EFSOL Сережко А.С.	
	ES_ОбновитьНаправление();
	//ЕФСОЛ 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресДоставкиПоПВЗ(ПВЗ)


	Объект.ES_ИзКЛАДР = ПВЗ.ИзКЛАДР;
	
	Если ЗначениеЗаполнено(ПВЗ.ПолныйАдрес) Тогда
		Объект.ES_АдресДоставки = ПВЗ.ПолныйАдрес;
		Объект.ES_АдресДоставкиСтрана 	= Справочники.СтраныМира.Россия;
		Объект.ES_АдресДоставкиОбласть = ПВЗ.Область;
		Объект.ES_АдресДоставкиГород 	= ПВЗ.Город;
		Объект.ES_АдресДоставкиУлица 	= ПВЗ.Улица;
		Объект.ES_АдресДоставкиДом     = ПВЗ.Дом;
		Объект.ES_АдресДоставкиИндекс  = ПВЗ.Индекс;
		Объект.ES_АдресДоставкиСтроение= ПВЗ.Строение;
		Объект.ES_АдресДоставкиКорпус  = ПВЗ.Корпус;
		Объект.ES_АдресДоставкиКвартира= ПВЗ.Квартира;
	Иначе
		Объект.ES_АдресДоставкиСтрана 	= Справочники.СтраныМира.Россия;
		Объект.ES_АдресДоставкиОбласть = ПВЗ.Область;
		Объект.ES_АдресДоставкиГород 	= ПВЗ.Город;
		Объект.ES_АдресДоставкиУлица 	= ПВЗ.Улица;
		Объект.ES_АдресДоставкиДом     = ПВЗ.Дом;
		Объект.ES_АдресДоставкиИндекс  = ПВЗ.Индекс;
		Объект.ES_АдресДоставкиСтроение= ПВЗ.Строение;
		Объект.ES_АдресДоставкиКорпус  = ПВЗ.Корпус;
		Объект.ES_АдресДоставкиКвартира= ПВЗ.Квартира;
		ЗаполнитьES_АдресДоставки();
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(Объект.ES_АдресДоставки) И Объект.ES_ИзКЛАДР Тогда
		ES_АдресДоставкиXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(Объект.ES_АдресДоставки,Перечисления.ТипыКонтактнойИнформации.Адрес);
		ЗначениеРеквизитовПоКонтактнойИнформацииАдресРФ(ES_АдресДоставкиXML);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ТерминалПриИзменении(Элемент)
	ЗаполнитьАдресДоставкиПоТерминалу(Объект.ES_Терминал);
	ЗаполнитьШиротуИДолготуПоАдресу("ES_АдресДоставки");
	//EFSOL Сережко А.С.	
	ES_ОбновитьНаправление();
	//ЕФСОЛ 

КонецПроцедуры


&НаСервере
Процедура ЗаполнитьАдресДоставкиПоТерминалу(Терминал)
	
	Объект.ES_АдресДоставки = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Терминал,Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы);
	Если ЗначениеЗаполнено(Объект.ES_АдресДоставки) Тогда
		ES_АдресДоставкиXML = 	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(Объект.ES_АдресДоставки,Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы);
		ЗначениеРеквизитовПоКонтактнойИнформацииАдресРФ(ES_АдресДоставкиXML);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗначениеРеквизитовПоКонтактнойИнформацииАдресЗабораРФ(ES_ЗаборАдресXML)
	
	ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес;
	мОбъект = РеквизитФормыВЗначение("Объект");
	мОбъект.ES_ЗаборСтранаОтправитель 	= Справочники.СтраныМира.Россия;
	мОбъект.ES_ЗаборОбластьОтправитель = "";
	мОбъект.ES_Город1 	= "";
	мОбъект.ES_ЗаборАдресОтправитель 	= "";
	мОбъект.ES_АдресЗаборДом     = "";
	мОбъект.ES_АдресЗаборСтроение  = "";
	мОбъект.ES_АдресЗаборКорпус= "";
	мОбъект.ES_АдресЗаборКвартира  = "";
	мОбъект.ES_ЗаборИндексОтправитель= "";
	
	

	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ES_ЗаборАдресXML) Тогда
		ДанныеАдреса = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ES_ЗаборАдресXML, ТипКонтактнойИнформации, "");
		мОбъект.ES_ЗаборСтранаОтправитель = Справочники.СтраныМира.Россия;
		мГород = ?(ЗначениеЗаполнено(ДанныеАдреса.Состав.Состав.Город),ЗначениеЗаполнено(ДанныеАдреса.Состав.Состав.Город),ДанныеАдреса.Состав.Состав.СубъектРФ);
		//мОбъект.ES_АдресДоставкиГород = ДанныеАдреса.Состав.Состав.СубъектРФ;
		мОбъект.ES_Город1 = СтрЗаменить(мГород," г","");
		мОбласть = ?(ЗначениеЗаполнено(ДанныеАдреса.Состав.Состав.Город),ДанныеАдреса.Состав.Состав.СубъектРФ,"");
		мОбъект.ES_ЗаборОбластьОтправитель = СтрЗаменить(мОбласть," обл","");
		мОбъект.ES_ЗаборАдресОтправитель = ДанныеАдреса.Состав.Состав.Улица;
		мОбъект.ES_ЗаборАдресОтправитель = СтрЗаменить(мОбъект.ES_ЗаборАдресОтправитель," ул","");
		
		//ДанныеАдреса = 
		
		// Индекс просто ставим
		мОбъект.ES_ЗаборИндексОтправитель = Формат(Обработки.РасширенныйВводКонтактнойИнформации.ПочтовыйИндексАдреса(ДанныеАдреса), "ЧГ=");
		
		//СформироватьДетальныйНаселенныйПункт(Контекст, ДанныеАдреса);
		
		// Дом, строение, помещение
		ЗданияИПомещения = Обработки.РасширенныйВводКонтактнойИнформации.ЗданияИПомещенияАдреса(ДанныеАдреса);
		
		// Первые два здания выделяем отдельно, остальное в списке.
		ТаблицаДанных = ЗданияИПомещения.Здания;
		
		// Вид = 1 - признак дома, владения. Вид = 2, доп строение.
		СтрокаДома = ТаблицаДанных.Найти(1, "Вид");
		Если СтрокаДома <> Неопределено Тогда
			//мОбъект.ТипДома = СтрокаДома.Тип;
			мОбъект.ES_АдресЗаборДом     = СтрокаДома.Значение;
			//ТаблицаДанных.Удалить(СтрокаДома);
		Иначе
			мОбъект.ES_АдресЗаборДом     = "";
		КонецЕсли;
		
		СтрокаДома = ТаблицаДанных.Найти(2, "Вид");
		Если СтрокаДома <> Неопределено Тогда
			//мОбъект.ТипСтроения = СтрокаДома.Тип;
			мОбъект.ES_АдресЗаборСтроение    = СтрокаДома.Значение;
			//ТаблицаДанных.Удалить(СтрокаДома);
		Иначе
			мОбъект.ES_АдресЗаборСтроение    = "";
		КонецЕсли;
				
		// Первое помещение указываем отдельно, остальные в списке.
		ТаблицаДанных = ЗданияИПомещения.Помещения;
		Для каждого СТ_ТаблицаДанных ИЗ ТаблицаДанных Цикл 
			Если СТ_ТаблицаДанных.Тип = "Квартира" Тогда
				мОбъект.ES_АдресЗаборКвартира    = ТаблицаДанных[0].Значение;
			ИначеЕсли СТ_ТаблицаДанных.Тип = "Корпус" Тогда
				мОбъект.ES_АдресЗаборКвартира    = ТаблицаДанных[0].Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЗначениеВРеквизитФормы(мОбъект,"Объект");
КонецПроцедуры

&НаКлиенте
Процедура ES_ЗаборАдресОтправительПриИзменении(Элемент)
	ЗаполнитьES_АдресЗабора();

КонецПроцедуры

&НаКлиенте
Процедура ES_ЗаборОбластьОтправительПриИзменении(Элемент)
	ES_ОбновитьНаправление();
	ЗаполнитьES_АдресЗабора();
КонецПроцедуры

&НаКлиенте
Процедура ES_АдресЗаборДомПриИзменении(Элемент)
		ЗаполнитьES_АдресЗабора();

КонецПроцедуры

&НаКлиенте
Процедура ES_АдресЗаборСтроениеПриИзменении(Элемент)
		ЗаполнитьES_АдресЗабора();

КонецПроцедуры

&НаКлиенте
Процедура ES_АдресЗаборКорпусПриИзменении(Элемент)
		ЗаполнитьES_АдресЗабора();

КонецПроцедуры

&НаКлиенте
Процедура ES_АдресЗаборКвартираПриИзменении(Элемент)
		ЗаполнитьES_АдресЗабора();

	КонецПроцедуры
	
&НаКлиенте
Процедура ES_ПроверкаЗаполненияНаправления()
	Если ИспользуетсяТарифныйКалькулятор Тогда
		Если ЗначениеЗаполнено(Объект.ES_Город1) И ЗначениеЗаполнено(Объект.ES_АдресДоставкиГород) И Не ЗначениеЗаполнено(Объект.ES_Направление) Тогда
			Сообщить("Направление не найдено, невозможно рассчитать тариф");
		КонецЕсли;       
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ES_ПроверкаЗаполненияСтоимостиТК() 

	
	мУслуга = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(ПредопределенноеЗначение("Перечисление.ES_ВидыСтартовыхНастроек.УслугаДоставки"));	 	
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", мУслуга);
		
	РезультатПоиска = Объект.Запасы.НайтиСтроки(СтруктураПоиска);
	ВидКонтрагента = ES_ОбщегоНазначения.ЭР_ПолучитьЗначениеРеквизитаНаСервере(Объект.Контрагент,"ES_ВидКонтрагента").ES_ВидКонтрагента;
	
	Если ЗначениеЗаполнено(Объект.ES_ВидДоставки) И ЗначениеЗаполнено(Объект.ES_СрочностьДоставки) И ЗначениеЗаполнено(Объект.ES_ЗонаДоставки) И ЗначениеЗаполнено(Объект.ES_ОбщийВес) И ЗначениеЗаполнено(ВидКонтрагента) И ЗначениеЗаполнено(Объект.Договор) Тогда
		Если РезультатПоиска.Количество() = 0 Тогда
			Сообщить("Для указанной комбинации параметров тарифы не заданы");
		ИначеЕсли РезультатПоиска[0].Цена = 0 Тогда
			Сообщить("Для указанной комбинации параметров тарифы не заданы");
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры  

&НаКлиенте
Процедура ES_ДоУточненияПриИзменении(Элемент)
	Если Объект.ES_ДоУточнения Тогда Объект.ES_ДатаДоставки = '00010101'; КонецЕсли;
		//ES_Савченко К.Р. 29.09.2017 +
	Если Объект.ES_ДоУточнения Тогда
		Объект.ES_ДанныеОбработанДоУточнения = "" + ПользователиКлиентСервер.ТекущийПользователь() + ", " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ""в"" ЧЧ:мм'");
	Иначе
		Объект.ES_ДанныеОбработанДоУточнения = "";
	КонецЕсли; 
	//ES_Савченко К.Р. 29.09.2017 -

КонецПроцедуры

&НаКлиенте
Процедура ES_УстановитьВидиомстьВидКонтрагента()
	   Элементы.ВидДоставки.Видимость 	= ЗначениеЗаполнено(ES_ОбщегоНазначения.ЭР_ПолучитьЗначениеРеквизитаНаСервере(Объект.Контрагент,"ES_ВидКонтрагента").ES_ВидКонтрагента);
КонецПроцедуры

&НаКлиенте
Процедура ES_ЗаборИндексОтправительПриИзменении(Элемент)
	ЗаполнитьES_АдресЗабора();
КонецПроцедуры

&НаКлиенте
Процедура ES_ЗаборСтранаОтправительПриИзменении(Элемент)
	ЗаполнитьES_АдресЗабора();
КонецПроцедуры

&НаКлиенте
Процедура ES_ГрузыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекСтрока = Элементы.ES_Грузы.ТекущиеДанные;
		ТекСтрока.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.Груз");
		ES_ГрузыНоменклатураПриИзменении("ок");
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент.ES_ВидКонтрагента) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Поле = "Объект.Контрагент";
			Сообщение.Текст = "Не установлен тип отправлений заказчика";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли; 

	
КонецПроцедуры

&НаКлиенте
Процедура ES_ПроблемаПриИзменении(Элемент)
	//ES_Савченко К.Р. 29.09.2017 +
	Если Объект.ES_Проблема Тогда
		Объект.ES_ДанныеОбработанПроблема = "" + ПользователиКлиентСервер.ТекущийПользователь() + ", " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ""в"" ЧЧ:мм'");
	Иначе
		Объект.ES_ДанныеОбработанПроблема = "";
	КонецЕсли; 
	//ES_Савченко К.Р. 29.09.2017 -
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦены(Команда)
	//EFSOL_Шаповал Олег Анатольевич 16 марта 2017 г. 17:58:47 +
	ЭР_ОбновитьСтоимостьВсехУслуг();
	ES_ПроверкаЗаполненияСтоимостиТК();
	//EFSOL Шаповал О.А. -
КонецПроцедуры



//EFSOL_oks_kry_18.03.2015 21:42:31_END

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
	// УНФ
	СтатистикаИспользованияФормКлиент.ДобавитьСтатистикуПодключаемойКоманды(ЭтотОбъект, Команда);
	// Конец УНФ
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьSMS(Команда)
	
	//EFSOL_Сальник К.А. 2018-12-07 {+ 
	//ДанныеПоЗаказу = ПолучитьДанныеПоЗаказу(Объект.Ссылка);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Документ", Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.ES_ФормаОтправкиСМС", ПараметрыОткрытия, ЭтаФорма);
	//EFSOL_Сальник К.А.  -} 
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ПрикрепленныеИзображенияПриАктивизацииСтроки(Элемент)
	
	//EFSOL_Сальник К.А. 2019-05-15 {+
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		ES_Изображение = Неопределено;
	Иначе
		Изображение = Элемент.ТекущиеДанные.ИмяФайла;
		ES_Изображение = ПоместитьВоВременноеХранилище(ПолучитьНаСервереКартинку(Изображение));
	КонецЕсли;
	//EFSOL_Сальник К.А.  -}

КонецПроцедуры

&НаСервере
Функция ПолучитьНаСервереКартинку(ИмяФайла)
	
	//EFSOL_Сальник К.А. 2019-05-15 {+	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ES_ПрикрепленныеИзображения.ХранилищеЗначения КАК ХранилищеЗначения
		|ИЗ
		|	РегистрСведений.ES_ПрикрепленныеИзображения КАК ES_ПрикрепленныеИзображения
		|ГДЕ
		|	ES_ПрикрепленныеИзображения.ДокументДоставки = &ДокументДоставки
		|	И ES_ПрикрепленныеИзображения.ИмяФайла = &ИмяФайла";
	
	Запрос.УстановитьПараметр("ДокументДоставки", Объект.Ссылка);
	Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() <> 1 Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезультатЗапроса[0].ХранилищеЗначения.Получить();
	КонецЕсли;
	//EFSOL_Сальник К.А.  -}
	
КонецФункции

&НаКлиенте
Процедура ES_ДобавитьФото(Команда)
	//EFSOL_Сальник К.А. 2019-06-14 {+
	
	ПараметрыПодключенияGoogleDrive = ПолучитьПараметрыНаСервере();
	Если ПараметрыПодключенияGoogleDrive = Неопределено или не ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.ИдентификаторКлиента) или не ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.СекретКлиента) или не ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.ТокенОбновления) Тогда
			Сообщить("Сервис запрещен в основной системе.");
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаДоступностиРасчширенияРаботыСФайлами", ЭтотОбъект);
		МенеджерОборудованияКлиент.ПроверитьДоступностьРасширенияРаботыСФайлами(ОписаниеОповещения, Истина);
		
	#Иначе
		
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.Фильтр = "Все картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|" 
		+ "Формат bmp (*.bmp;*.dib;*.rle)|*.bmp;*.dib;*.rle|"
		+ "Формат JPEG (*.jpg;*.jpeg)|*.jpg;*.jpeg|"
		+ "Формат TIFF (*.tif)|*.tif|"
		+ "Формат GIF (*.gif)|*.gif|"
		+ "Формат PNG (*.png)|*.png|"
		+ "Формат icon (*.ico)|*.ico|"
		+ "Формат метафайл (*.wmf;*.emf)|*.wmf;*.emf|";
		Диалог.МножественныйВыбор = Истина;
		Если Диалог.Выбрать() Тогда
			МассивФайлов = Диалог.ВыбранныеФайлы;
			Для Каждого ПутьКФото из Массивфайлов Цикл
				ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФото);
				ВыполнитьЗаписьВРегистр(ДвоичныеДанные);
			КонецЦикла;	
		КонецЕсли;
	#КонецЕсли
	//EFSOL_Сальник К.А.  -}
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыНаСервере()
//EFSOL_Сальник К.А. 2019-05-08 {+
	
Возврат Обработки.ES_НастройкаGoogleDrive.ПолучитьПараметрыПодключенияGoogleDrive();
//EFSOL_Сальник К.А.  -}
	
КонецФункции

&НаСервере
Процедура ВыполнитьЗаписьВРегистр(ДвоичныеДанные)
	
	//EFSOL_Сальник К.А. 2019-05-06 {	
	Имя = "IMG_" + Формат(ТекущаяДата(),"ДФ=yyyyMMddHHммсс");
	СтруктураОтвет = ЗагрузитьИзображениеНаГуглДиск(Имя, ДвоичныеДанные);
	Если СтруктураОтвет <> Неопределено Тогда
		СсылкаНаДиск = СтруктураОтвет.СсылкаНаДиск;
		ИД = СтруктураОтвет.ИД;
	Иначе
		Возврат;
	КонецЕсли;
	
	ХранилищеЗначения = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	
	МенеджерЗаписи = РегистрыСведений.ES_ПрикрепленныеИзображения.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ТекущаяДата();
	МенеджерЗаписи.ДокументДоставки = Объект.Ссылка;	
	МенеджерЗаписи.Тип = "Доставка";
	МенеджерЗаписи.ХранилищеЗначения = ХранилищеЗначения;
	МенеджерЗаписи.ИмяФайла = Имя;
	МенеджерЗаписи.СсылкаНаДиск = СсылкаНаДиск;
	МенеджерЗаписи.Идентификатор = ИД;
	МенеджерЗаписи.Записать();
	
	Элементы.ES_ПрикрепленныеИзображения.Обновить();
	
	//EFSOL_Сальник К.А.  -}
	
КонецПроцедуры

Функция ЗагрузитьИзображениеНаГуглДиск(Имя, ДвоичныеДанные)
	
	//EFSOL_Сальник К.А. 2019-05-07 {+
	ТокенДоступа = ПолучитьТокенДоступаGoogleDrive();
	
	Каталог = Обработки.ES_НастройкаGoogleDrive.ПолучитьКаталогДляСохраненияНаДиске(Объект.Ссылка, ТекущаяДата());
	
	ПараметрыСоединения = Новый Структура;
	//формируем запрос к gs
	Соединение = Новый HTTPСоединение("www.googleapis.com", 443,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	Заголовки  = Новый Соответствие;
	Заголовки.Вставить("Authorization","Bearer " + ТокенДоступа);
	
	ПараметрыСоединения.Вставить("Заголовки", Заголовки);
	ПараметрыСоединения.Вставить("Соединение", Соединение);
	
	Если ПараметрыСоединения = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;	
	Расширение = ".jpg";
	ТипФайла = Прав(Расширение, СтрДлина(Расширение)-1);
	ВРегТипФайла = ВРег(ТипФайла);
	
	Разделитель = "file_for_drive";
	ЗаголовокПоТипуФайла = СоответствиеТипуФайлаЗаголовкамGoogle()[ВРегТипФайла];
	
	ПараметрыСоединения.Заголовки.Вставить("Content-Type", "multipart/related; boundary=" + Разделитель);
	
	Заголовки = Новый Массив;
	Заголовки.Добавить("Content-Type: application/json; charset=UTF-8");
	
	телозапроса = СтрЗаменить(СформироватьТелоЗапросаСозданиеФайла(ЗаголовокПоТипуФайла, Имя, ТипФайла, Каталог), "\", "");
	ДвоичныеДанныеСообщения = СоздатьСообщение_Текст(Заголовки, ТелоЗапроса);
	
	Заголовки.Очистить();
	Заголовки.Добавить("Content-Type: " + ЗаголовокПоТипуФайла);

	
	ДвоичныеДанныеФайла = СоздатьСообщение_Файл(Заголовки, ДвоичныеДанные);
	
	МассивСообщений = Новый Массив;
	МассивСообщений.Добавить(ДвоичныеДанныеСообщения);
	МассивСообщений.Добавить(ДвоичныеДанныеФайла);
	ДвоичныеДанныеТело = ПолучаемДвоичныеДанныеДляПакетныхСообщенийHTTP(Разделитель, МассивСообщений);
	
	TeamDrives = "false";
	
	ЗапросHTTP = Новый HTTPЗапрос(СтрШаблон("%1?uploadType=multipart", "/upload/drive/v2/files"), ПараметрыСоединения.Заголовки);
		
	ЗапросHTTP.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанныеТело);
	
	Ответ = ПараметрыСоединения.Соединение.ВызватьHTTPМетод("POST", ЗапросHTTP);
	
	Если Не Ответ.КодСостояния = 200 Тогда
		ТекстОшибок = СтрШаблон("Ошибка HTTP запроса %1, код ошибки %2", Ответ.ПолучитьТелоКакСтроку(), Ответ.КодСостояния);
		Возврат Неопределено;
	Иначе 
		телоОтвета = Ответ.ПолучитьтелоКакСтроку();
		ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
		ТелоОтвета =  ОбработкаJSON.UnJSON(телоОтвета);
		СсылкаНаДиск = телоОтвета.Получить("defaultOpenWithLink");
		ИД = телоОтвета.Получить("id");
		Если ЗначениеЗаполнено(СсылкаНаДиск) и ЗначениеЗаполнено(ИД) Тогда
			СтруктураОтвет = Новый Структура;
			СтруктураОтвет.Вставить("СсылкаНаДиск", СсылкаНаДиск);
			СтруктураОтвет.Вставить("ИД", ИД);
			Возврат СтруктураОтвет;	
		иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	//EFSOL_Сальник К.А.  -}
	
КонецФункции

Функция ПолучитьТокенДоступаGoogleDrive()
	//EFSOL_Сальник К.А. 2019-05-08 {+
	
	ПараметрыПодключенияGoogleDrive = Обработки.ES_НастройкаGoogleDrive.ПолучитьПараметрыПодключенияGoogleDrive();
	Если ПараметрыПодключенияGoogleDrive = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.ВремяЖизниТокена) и ТекущаяДата() <= ПараметрыПодключенияGoogleDrive.ВремяЖизниТокена и ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.ТокенДоступа) Тогда
		Возврат ПараметрыПодключенияGoogleDrive.ТокенДоступа;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.ИдентификаторКлиента) и  ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.СекретКлиента) и ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.ТокенОбновления) Тогда
		Если Обработки.ES_НастройкаGoogleDrive.ОбновитьТокенДоступа() Тогда
			ПараметрыПодключенияGoogleDrive = Обработки.ES_НастройкаGoogleDrive.ПолучитьПараметрыПодключенияGoogleDrive();
			Возврат ПараметрыПодключенияGoogleDrive.ТокенДоступа;
		Иначе
			Возврат Неопределено;
		КонецЕсли;	 
	КонецЕсли;
	
	//EFSOL_Сальник К.А.  -}

КонецФункции

Функция СоответствиеТипуФайлаЗаголовкамGoogle()
	
	//EFSOL_Сальник К.А. 2019-05-07 {+	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("GIF", "image/gif");
	Соответствие.Вставить("GPEG", "image/jpeg");
	Соответствие.Вставить("PNG", "image/png");
	Соответствие.Вставить("SVG", "image/svg+xml");
	Соответствие.Вставить("TIF", "image/tiff");
	Соответствие.Вставить("TIFF", "image/tiff");
	Соответствие.Вставить("ICO", "image/x-icon");
	Соответствие.Вставить("WBMP", "image/vnd.wap.wbmp");
	Соответствие.Вставить("WEBP", "image/webp");
	Соответствие.Вставить("JFIF", "image/jpeg");
	Соответствие.Вставить("JPE", "image/jpeg");
	Соответствие.Вставить("JPEG", "image/jpeg");
	Соответствие.Вставить("JPG", "image/jpeg");          
	Соответствие.Вставить("JPS", "image/x-jps");
	Соответствие.Вставить("PCT", "image/x-pict");
	Соответствие.Вставить("PCX", "image/x-pcx");
	Соответствие.Вставить("PIC", "image/pict");
	Соответствие.Вставить("PICT", "image/pict");
	Соответствие.Вставить("PNG", "image/png");
	Соответствие.Вставить("BM", "image/bmp");
	Соответствие.Вставить("BMP", "image/bmp");
	Соответствие.Вставить("DOC", "application/msword");
	
	Возврат	Соответствие;
	//EFSOL_Сальник К.А.  -}

КонецФункции	

Функция СоздатьСообщение_Текст(ЗаголовкиСообщения, ДвоичныеДанныеТекст)  
	
	//EFSOL_Сальник К.А. 2019-05-07 {+
	Поток = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Поток);
	
	// Заголовки.
	Для Каждого Стр Из ЗаголовкиСообщения Цикл 
		ЗаписьДанных.ЗаписатьСтроку(Стр);
	КонецЦикла;	
	ЗаписьДанных.ЗаписатьСтроку("");
	
	// Тело.
	ЗаписьДанных.ЗаписатьСтроку(ДвоичныеДанныеТекст);
	ЗаписьДанных.Закрыть();
	
	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
	//EFSOL_Сальник К.А.  -}
	
КонецФункции

Функция СформироватьТелоЗапросаСозданиеФайла(ЗаголовокПоТипуФайла, Имя, Расширение, Каталог)
	
	//EFSOL_Сальник К.А. 2019-05-07 {+
	 Структурателазапроса = Новый Структура;
	 Структурателазапроса.Вставить("kind", "drive#file");
	 Структурателазапроса.Вставить("title", Имя);
	 Структурателазапроса.Вставить("mimeType", ЗаголовокПоТипуФайла);
	//Структурателазапроса.Вставить("fileSize", Размер);
	 Структурателазапроса.Вставить("fileExtension", Расширение);
	 Если Каталог <> Неопределено Тогда
		 Родители = Новый Массив;
		 Родитель = Новый Структура;
		 Родитель.Вставить("id", Каталог);
		 Родители.Добавить(Родитель);
		 Структурателазапроса.Вставить("parents", Родители);
	 КонецЕсли;
	 ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
	 Возврат ОбработкаJSON.JSON(Структурателазапроса);
	 //EFSOL_Сальник К.А.  -}

КонецФункции

Функция СоздатьСообщение_Файл(ЗаголовкиСообщения, ДвоичныеДанныеФайла)  
	
	//EFSOL_Сальник К.А. 2019-05-07 {+
	Поток = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Поток);
	
	// Заголовки.
	Для Каждого Стр Из ЗаголовкиСообщения Цикл 
		ЗаписьДанных.ЗаписатьСтроку(Стр);
	КонецЦикла;	
	ЗаписьДанных.ЗаписатьСтроку("");

	// Тело.
	ЗаписьДанных.Записать(ДвоичныеДанныеФайла);	
	ЗаписьДанных.Закрыть();
	
	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
	//EFSOL_Сальник К.А.  -}
	
КонецФункции

Функция ПолучаемДвоичныеДанныеДляПакетныхСообщенийHTTP(Разделитель, МассивДвоичныхДанных)  
	
	//EFSOL_Сальник К.А. 2019-05-07 {+
	ПотокТело = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(ПотокТело);
	
	Для Каждого Стр Из МассивДвоичныхДанных Цикл 
		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
		ЗаписьДанных.Записать(Стр);
	КонецЦикла;	
	
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + "--");

	ЗаписьДанных.Закрыть();
	
	Возврат ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
	//EFSOL_Сальник К.А.  -}
	
КонецФункции

&НаКлиенте
Процедура ES_УдалитьФото(Команда)
	//EFSOL_Сальник К.А. 2019-06-14 {+
	
	ПараметрыПодключенияGoogleDrive = ПолучитьПараметрыНаСервере();
	Если ПараметрыПодключенияGoogleDrive = Неопределено или не ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.ИдентификаторКлиента) или не ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.СекретКлиента) или не ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.ТокенОбновления) Тогда
			Сообщить("Сервис запрещен в основной системе.");
		Возврат;
	КонецЕсли;

	МассивСтрок = Элементы.ES_ПрикрепленныеИзображения.ВыделенныеСтроки;
	
	Если  МассивСтрок.Количество() > 0 Тогда
		Парам = Новый Структура;
		Парам.Вставить("МассивСтрок", МассивСтрок);
		Оповещение = Новый ОписаниеОповещения("ОбработкаУдалениеФото",ЭтотОбъект, Парам);
		ПоказатьВопрос(Оповещение, "Вы уверены что хотите удалить фотограию?", РежимДиалогаВопрос.ДаНет); 	
	КонецЕсли;

	//EFSOL_Сальник К.А.  -}
КонецПроцедуры

&НаКлиенте 
Процедура ОбработкаУдалениеФото(Результат,Параметры) Экспорт
	//EFSOL_Сальник К.А. 2019-06-14 {+
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		МассивСтрок = Параметры.МассивСтрок;
		
		МассивИзображений = Новый Массив;
		Для каждого СтрокаСписка Из МассивСтрок Цикл
			МассивИзображений.Добавить(Элементы.ES_ПрикрепленныеИзображения.ДанныеСтроки(СтрокаСписка).ИмяФайла);
		КонецЦикла;
		
		УдалитьНаСервере(МассивИзображений);
		
		Элементы.ES_ПрикрепленныеИзображения.Обновить();
	КонецЕсли;

	//EFSOL_Сальник К.А.  -}
КонецПроцедуры

&НаСервере
Процедура УдалитьНаСервере(МассивИзображений)
	//EFSOL_Сальник К.А. 2019-06-14 {+

	Для каждого ИмяФайла Из МассивИзображений Цикл
		
		ДокументДоставки = Объект.Ссылка;
		
		ИД = Новый Массив;
		ИД.Добавить(ПолучитьИдентификаторИзображения(ДокументДоставки, ИмяФайла));
		УдалитьИзображениеНаГуглДиске(ИД);	
		
		НаборЗаписи = РегистрыСведений.ES_ПрикрепленныеИзображения.СоздатьНаборЗаписей();
		НаборЗаписи.Отбор.ДокументДоставки.Установить(ДокументДоставки);
		НаборЗаписи.Отбор.ИмяФайла.Установить(ИмяФайла);
		НаборЗаписи.Прочитать();
		НаборЗаписи.Очистить();
		НаборЗаписи.Записать();

	КонецЦикла;
	//EFSOL_Сальник К.А.  -}
КонецПроцедуры

&НаСервере
Функция ПолучитьИдентификаторИзображения(ДокументДоставки, ИмяФайла)
	//EFSOL_Сальник К.А. 2019-05-13 {+
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ES_ПрикрепленныеИзображенияСрезПоследних.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ES_ПрикрепленныеИзображения.СрезПоследних(
		|			,
		|			ДокументДоставки = &ДокументДоставки
		|				И ИмяФайла = &ИмяФайла) КАК ES_ПрикрепленныеИзображенияСрезПоследних";
	
	Запрос.УстановитьПараметр("ДокументДоставки", ДокументДоставки);
	Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() <> 1 Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезультатЗапроса[0].Идентификатор;
	КонецЕсли;
	//EFSOL_Сальник К.А.  -}
КонецФункции

Процедура УдалитьИзображениеНаГуглДиске(ИД)
	
	//EFSOL_Сальник К.А. 2019-05-07 {+
	ТокенДоступа = ПолучитьТокенДоступаGoogleDrive();

	Для Каждого Элемент из ИД Цикл
		Если ЗначениеЗаполнено(Элемент) Тогда				
			ПараметрыСоединения = Новый Структура;
			//формируем запрос к gs
			Соединение = Новый HTTPСоединение("www.googleapis.com", 443,,,,,Новый ЗащищенноеСоединениеOpenSSL);
			Заголовки  = Новый Соответствие;
			Заголовки.Вставить("Authorization","Bearer " + ТокенДоступа);
			
			ПараметрыСоединения.Вставить("Заголовки", Заголовки);
			ПараметрыСоединения.Вставить("Соединение", Соединение);
			
			Если ПараметрыСоединения = Неопределено Тогда 
				Возврат;
			КонецЕсли;	
			
			ЗапросHTTP = Новый HTTPЗапрос("/drive/v2/files/" + Элемент, ПараметрыСоединения.Заголовки);
			
			Ответ = ПараметрыСоединения.Соединение.Удалить(ЗапросHTTP);
			
			Если Не Ответ.КодСостояния = 200 или Не Ответ.КодСостояния = 204 Тогда
				ТекстОшибок = СтрШаблон("Ошибка HTTP запроса %1, код ошибки %2", Ответ.ПолучитьТелоКакСтроку(), Ответ.КодСостояния);
			Иначе 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//EFSOL_Сальник К.А.  -}
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПолейТарифногоКалькулятора(ИспользуетсяТК)
	
	//ЭР Несторук С.И. 13.06.2019 13:09:20 {
	Элементы.ГруппаНаправления.Видимость = ИспользуетсяТК;
	Элементы.ES_ЗонаДоставки.Видимость	= ИспользуетсяТК;
	Элементы.ГруппаТипКод.Видимость	= ИспользуетсяТК;
	Элементы.ГруппаТарифнаяЗона.Видимость	= ИспользуетсяТК;
	Элементы.ЗапасыПересчитатьЦены.Видимость = ИспользуетсяТК;
	//}ЭР Несторук С.И.	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаДоступностиРасчширенияРаботыСФайлами(Результат, ДополнительныеПараметры) Экспорт
	
	#Если ВебКлиент Тогда
		
		Если Результат = Истина Тогда
			ЗагрузитьФайл();
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайл()
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогВыбораФайла.Фильтр = "Все картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|" 
		+ "Формат bmp (*.bmp;*.dib;*.rle)|*.bmp;*.dib;*.rle|"
		+ "Формат JPEG (*.jpg;*.jpeg)|*.jpg;*.jpeg|"
		+ "Формат TIFF (*.tif)|*.tif|"
		+ "Формат GIF (*.gif)|*.gif|"
		+ "Формат PNG (*.png)|*.png|"
		+ "Формат icon (*.ico)|*.ico|"
		+ "Формат метафайл (*.wmf;*.emf)|*.wmf;*.emf|"; 
	ДиалогВыбораФайла.ПолноеИмяФайла = "";
	ДиалогВыбораФайла.МножественныйВыбор = Истина;
	ДиалогВыбораФайла.Заголовок = "Выберите файлы";
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПослеВыбораФайлаДляЗаписи", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);

КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ОповещениеПослеВыбораФайлаДляЗаписи(ВыбранныеФайлы, ДопПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив")	Тогда
		Для Каждого мФайл из ВыбранныеФайлы Цикл
			ОписаниеФайла = новый ОписаниеПередаваемогоФайла();
			ОписаниеФайла.Имя = мФайл;
			ПомещаемыеФайлы = новый Массив;
			ПомещаемыеФайлы.Добавить(ОписаниеФайла);
			Расширение = Прав(ОписаниеФайла.Имя,СтрДлина(ОписаниеФайла.Имя)-Найти(ОписаниеФайла.Имя,"."));
			Структура = Новый Структура;
			Структура.Вставить("Расширение", Расширение); 
			Оповещение = новый ОписаниеОповещения("ОповещениеПомещениеФайла", ЭтотОбъект, Структура);		
			НачатьПомещениеФайлов(Оповещение, ПомещаемыеФайлы,, Ложь, ЭтаФорма.УникальныйИдентификатор);
		КонецЦикла;	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПомещениеФайла(ПомещенныеФайлы, ДопПараметры)Экспорт
	
	Если ТипЗнч(ПомещенныеФайлы) = Тип("Массив")	Тогда
		Для Каждого ПутьКФото из ПомещенныеФайлы Цикл
			ОбработатьФайл(ПутьКФото.Хранение);
		КонецЦикла;	
	КонецЕсли; 
	
КонецПроцедуры 

&НаСервере
Процедура ОбработатьФайл(АдресФайлаДанных)Экспорт
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаДанных);	
	ВыполнитьЗаписьВРегистр(ДвоичныеДанные);
		
КонецПроцедуры 

