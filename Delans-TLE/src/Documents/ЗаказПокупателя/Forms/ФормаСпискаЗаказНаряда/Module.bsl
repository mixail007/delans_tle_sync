
#Область ПеременныеФормы

&НаКлиенте
Перем ДанныеВыбораСостояния;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СостоянияЗаказов.УстановитьУсловноеОформлениеОтмененногоЗаказа(
		Список.КомпоновщикНастроек.Настройки.УсловноеОформление
	);
	
	УстановитьУсловноеОформлениеПоЦветамСостоянийСервер();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Элементы.ОтборОплата.СписокВыбора.Добавить("Без оплаты", "Без оплаты");
	Элементы.ОтборОплата.СписокВыбора.Добавить("Оплачен частично", "Оплачен частично");
	Элементы.ОтборОплата.СписокВыбора.Добавить("Оплачен полностью", "Оплачен полностью");
	
	СостоянияЗаказов.ЗаполнитьСписокВыбораЗавершенияЗаказа(Элементы.ОтборЗавершениеЗаказа.СписокВыбора);
	ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список,"ВидОперации",ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд"));
	
	Список.Параметры.УстановитьЗначениеПараметра("АкутальнаяДатаСеанса", НачалоДня(ТекущаяДатаСеанса()));
	Список.Параметры.УстановитьЗначениеПараметра("АкутальнаяДатаВремяСеанса", ТекущаяДатаСеанса());
	
	УстановитьОтборТекущиеДела();
	КонтекстноеОткрытие = Параметры.Свойство("ТекущиеДела");
	
	Если Не КонтекстноеОткрытие Тогда
		// УНФ.ОтборыСписка
		РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, Список);
		// Конец УНФ.ОтборыСписка
	КонецЕсли;
	
	ОбновитьКомандыИзмененияСостояний();
	
	// Установим формат для текущей даты: ДФ=Ч:мм
	УправлениеНебольшойФирмойСервер.УстановитьОформлениеКолонкиДата(Список);
	
	// ИнтернетПоддержкаПользователей.Новости
	ОбработкаНовостей.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"УНФ.Документ.ЗаказПокупателя",
		"ФормаСпискаЗаказНаряда",
		Неопределено,
		НСтр("ru='Новости: Заказ-наряды'"),
		Ложь,
		Новый Структура("ПолучатьНовостиНаСервере, ХранитьМассивНовостейТолькоНаСервере", Истина, Истина),
		"ПриОткрытии"
	);
	// Конец ИнтернетПоддержкаПользователей.Новости
	
	// ЭДО
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка();
	ПараметрыПриСозданииНаСервере.Форма = ЭтотОбъект;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.ГруппаКомандыЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере);
	// Конец ЭДО
	
	// КомандыПечати
	ПечатьДокументовУНФ.КорректировкаРазмещениеПодчиненнойГруппыКомандПечати(ЭтаФорма, Элементы.ПодменюПечать, Элементы.ПодменюДоговорКонтрагента);
	Элементы.КомандыПечатиДоговорКонтрагента.Вид = ВидГруппыФормы.ГруппаКнопок;
	ШаблоныПечатиОфисныхДокументов.ОпределитьВидимостьКомандШаблоновПечати(Элементы.ФормаОткрытьШаблоныПечатиДоговоровКонтрагентов);
	
	УправлениеНебольшойФирмойСервер.УстановитьОтображаниеПодменюПечати(Элементы.ПодменюПечать);
	ПечатьДокументовУНФ.КорректировкаРазмещениеПодчиненнойГруппыКомандПечати(ЭтаФорма, Элементы.ПодменюПечать, Элементы.ПодменюПечатьФаксимиле);
	// Конец КомандыПечати
	
	// УНФ.ПанельКонтактнойИнформации
	КонтактнаяИнформацияПанельУНФ.ПриСозданииНаСервере(ЭтотОбъект, "КонтактнаяИнформация", "СписокКонтекстноеМеню");
	// Конец УНФ.ПанельКонтактнойИнформации
	
	// МобильныйКлиент
	РаботаСОтборами.УстановитьЗаголовокПравойПанелиМобильныйКлиент(ЭтотОбъект,,, "ОтборВидЗаказа,ОтборКонтрагент,ОтборСостояние,ОтборЗавершениеЗаказа,ОтборОплата,ОтборОтветственный,ОтборОрганизация");
	// Конец МобильныйКлиент
	
	Элементы.Список.РежимВыбора = Параметры.РежимВыбора;
	ЭтаФОрма.РежимОткрытияОкна = ?(Параметры.РежимВыбора,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца, РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости
	
	// ЭДО
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭДО
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не КонтекстноеОткрытие И Не ЗавершениеРаботы Тогда
		//УНФ.ОтборыСписка
		СохранитьНастройкиОтборов();
		//Конец УНФ.ОтборыСписка
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_РасходнаяНакладная"
	 ИЛИ ИмяСобытия = "Запись_АктВыполненныхРабот"
	 ИЛИ ИмяСобытия = "ОповещениеОбОплатеЗаказа" 
	 ИЛИ ИмяСобытия = "ОповещениеОбИзмененииДолга" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_СостоянияЗаказНарядов" Тогда
		УстановитьУсловноеОформлениеИОбновитьКомандыИзмененияСостояний();
		ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ВидыЗаказНарядов" Тогда
		ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
		ОбновитьКомандыИзмененияСостояний();
	КонецЕсли;
	
	// ЭДО
	ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСписка();
	ПараметрыОповещенияЭДО.Форма = ЭтотОбъект;
	ПараметрыОповещенияЭДО.ИмяДинамическогоСписка = "Список";
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСписка(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);
	// Конец ЭДО
	
	// УНФ.ПанельКонтактнойИнформации
	Если КонтактнаяИнформацияПанельУНФКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьПанельКонтактнойИнформацииСервер();
	КонецЕсли;
	// Конец УНФ.ПанельКонтактнойИнформации
	
	//УНФ.Интеграция с Яндекс.Кассой
	ИнтеграцияСЯндексКассойУНФКлиент.ОбработкаОповещения_ФормаСписка(Элементы.Список, ИмяСобытия, Параметр, Источник);
	//Конец УНФ.Интеграция с Яндекс.Кассой
	
	Если ИмяСобытия = "Запись_ШаблоныПечатиОфисныхДокументов" И Параметр.Свойство("Назначение") Тогда
		Если Параметр.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагента")
			ИЛИ Параметр.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаЗаказНаряд") Тогда
			ГруппаКомандПечати = Элементы.ПодменюДоговорКонтрагента;
			УправлениеНебольшойФирмойКлиент.УстановитьПризнакПоявленияНовойКомандыПечати(ГруппаКомандПечати);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если ТипЗнч(Элемент.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		КонтрагентАктивнойСтроки = ?(Элемент.ТекущиеДанные = Неопределено, Неопределено, Элемент.ТекущиеДанные.Контрагент);
		Если КонтрагентАктивнойСтроки <> ТекущийКонтрагент Тогда
		
			ТекущийКонтрагент = КонтрагентАктивнойСтроки;
			ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСписка", 0.2, Истина);
		КонецЕсли;
		
		ВидимостьКомандИзмененияСостояний(Элемент);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "СозданиеФормыЗаказНаряда");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыЗаказНаряда");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Контрагент", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ОтборВидЗаказаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	
	УстановитьМеткуИОтборСписка("ВидЗаказа", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НайденныеСтроки = ДанныеМеток.НайтиСтроки(Новый Структура("ИмяПоляОтбора", "ВидЗаказа"));
	Если НайденныеСтроки.Количество() = 1 И ТипЗнч(НайденныеСтроки[0].Метка) = Тип("СправочникСсылка.ВидыЗаказНарядов") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ВидЗаказа", НайденныеСтроки[0].Метка);
		ОткрытьФорму("Справочник.СостоянияЗаказНарядов.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СостояниеЗаказа", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния Тогда
		НайденныеСтроки = ДанныеМеток.НайтиСтроки(Новый Структура("ИмяПоляОтбора", "ВидЗаказа"));
		Если НайденныеСтроки.Количество() = 1 И ТипЗнч(НайденныеСтроки[0].Метка) = Тип("СправочникСсылка.ВидыЗаказНарядов") Тогда
			ПараметрыПолученияДанных.Вставить("ВидЗаказа", НайденныеСтроки[0].Метка);
		КонецЕсли;
		ДанныеВыбораСостояния = ПолучитьДанныеВыбора(Тип("СправочникСсылка.СостоянияЗаказНарядов"), ПараметрыПолученияДанных);
		ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Ложь;
	КонецЕсли;
	
	ДанныеВыбора = ДанныеВыбораСостояния;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗавершениеЗаказаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка(
		"ВариантЗавершения",
		Элемент.Родитель.Имя,
		ПредопределенноеЗначение("Перечисление.ВариантыЗавершенияЗаказа." + ВыбранноеЗначение),
		Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение).Представление
	);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОплатаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СтатусОплаты", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "СписокДокументовЗаказПокупателяОтборОтветственный");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	УстановитьМеткуИОтборСписка("Ответственный", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Организация", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьПоШаблону(Команда)
	
	ЗаполнениеОбъектовУНФКлиент.ПоказатьВыборШаблонаДляСозданияДокументаИзСписка(
	"Документ.ЗаказПокупателя",
	Список.КомпоновщикНастроек.Настройки.Отбор.Элементы,
	Элементы.Список.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьШаблоныПечатиДоговоровКонтрагентов(Команда)
	
	УправлениеНебольшойФирмойКлиент.ОткрытьШаблоныПечатиОфисныхДокументов(
	ПредопределенноеЗначение("Перечисление.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаЗаказНаряд"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСписка()
	
	ОбновитьПанельКонтактнойИнформацииСервер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборТекущиеДела()
	
	Если НЕ Параметры.Свойство("ТекущиеДела") Тогда
		Возврат;
	КонецЕсли;
	
	АвтоЗаголовок = Ложь;
	Заголовок = НСтр("ru='Заказ-наряды'");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Проведен", Истина);
	
	УстановитьМеткуИОтборСписка(
		"ВариантЗавершения",
		Элементы.ОтборЗавершениеЗаказа.Родитель.Имя,
		ПредопределенноеЗначение("Перечисление.ВариантыЗавершенияЗаказа.ПустаяСсылка"), // В текущих делах все заказы Не завершенные
		Элементы.ОтборЗавершениеЗаказа.СписокВыбора.НайтиПоЗначению("ПустаяСсылка").Представление
	);
	
	РаботаСОтборами.ПрикрепитьМеткиОтбораИзМассива(ЭтотОбъект, "Ответственный", "ГруппаОтборОтветственный", УправлениеНебольшойФирмойСервер.ПолучитьСотрудниковПользователя());
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, "Ответственный");
	
	Если Параметры.Свойство("ПросроченоВыполнение") Тогда
		
		Заголовок = Заголовок + ": " + НСтр("ru='просрочено выполнение'");
		Список.УстановитьОбязательноеИспользование("ПросроченоВыполнение", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПросроченоВыполнение", Истина);
		
	ИначеЕсли Параметры.Свойство("ПросроченаОплата") Тогда
		
		Заголовок = Заголовок + ": " + НСтр("ru='просрочена оплата'");
		Список.УстановитьОбязательноеИспользование("ПросроченаОплата", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПросроченаОплата", Истина);
		
	ИначеЕсли Параметры.Свойство("НаСегодня") Тогда
		
		Заголовок = Заголовок + ": " + НСтр("ru='на сегодня'");
		Список.УстановитьОбязательноеИспользование("НаСегодня", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "НаСегодня", Истина);
		
	ИначеЕсли Параметры.Свойство("НеЗавершенные") Тогда
		
		Заголовок = Заголовок + ": " + НСтр("ru='не завершенные'");
		
	КонецЕсли;
	
	ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(ОтборПериод);
	РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПоЦветамСостоянийСервер()
	
	СостоянияЗаказов.УстановитьУсловноеОформлениеПоЦветамСостояний(
		Список.КомпоновщикНастроек.Настройки.УсловноеОформление,
		Метаданные.Справочники.СостоянияЗаказНарядов.ПолноеИмя()
	);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеИОбновитьКомандыИзмененияСостояний()
	
	УстановитьУсловноеОформлениеПоЦветамСостоянийСервер();
	ОбновитьКомандыИзмененияСостояний();
	
КонецПроцедуры

#КонецОбласти

#Область МеткиОтборов

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, ИмяПоляОтбораСписка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	СтрокаМеток = ДанныеМеток.НайтиПоИдентификатору(МеткаИД);
	Если СтрокаМеток <> Неопределено И СтрокаМеток.ИмяПоляОтбора = "ВидЗаказа" Тогда
		ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	КонецЕсли;
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Список, МеткаИД);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, "Список", "Дата");
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборов(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
		
КонецПроцедуры

#КонецОбласти

#Область ПанельКонтактнойИнформации

&НаСервере
Процедура ОбновитьПанельКонтактнойИнформацииСервер()
	
	КонтактнаяИнформацияПанельУНФ.ОбновитьДанныеПанели(ЭтотОбъект, ТекущийКонтрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииВыбор(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(Элемент)
	
	КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыполнитьКоманду(Команда)
	
	КонтактнаяИнформацияПанельУНФКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, ТекущийКонтрагент);
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеСостоянийЗаказов

&НаСервере
Процедура ОбновитьКомандыИзмененияСостояний()
	
	УдаляемыеЭлементы = Новый Массив;
	УдаляемыеКоманды = Новый Массив;
	
	Если Элементы.СписокКонтекстноеМенюУстановитьСостояние.ПодчиненныеЭлементы.Количество() <> 0 Тогда
		
		Для ИндексГруппы = 0 По Элементы.СписокКонтекстноеМенюУстановитьСостояние.ПодчиненныеЭлементы.Количество() - 1 Цикл
			Если Элементы.СписокКонтекстноеМенюУстановитьСостояние.ПодчиненныеЭлементы[ИндексГруппы].Имя = "УстановитьСостояниеЗавершен"
				ИЛИ Элементы.СписокКонтекстноеМенюУстановитьСостояние.ПодчиненныеЭлементы[ИндексГруппы].Имя = "УстановитьСостояниеЗавершенУспешно"
				ИЛИ Элементы.СписокКонтекстноеМенюУстановитьСостояние.ПодчиненныеЭлементы[ИндексГруппы].Имя = "УстановитьСостояниеОтменен" Тогда
				Продолжить;
			КонецЕсли;
			УдаляемыеЭлементы.Добавить(Элементы.СписокКонтекстноеМенюУстановитьСостояние.ПодчиненныеЭлементы[ИндексГруппы]);
		КонецЦикла;
		
		Если Элементы.ФормаУстановитьСостояние.ПодчиненныеЭлементы.Количество() <> 0 Тогда
			Для ИндексГруппы = 0 По Элементы.ФормаУстановитьСостояние.ПодчиненныеЭлементы.Количество() - 1 Цикл
				Если Элементы.ФормаУстановитьСостояние.ПодчиненныеЭлементы[ИндексГруппы].Имя = "УстановитьСостояниеЗавершенФорма"
					ИЛИ Элементы.ФормаУстановитьСостояние.ПодчиненныеЭлементы[ИндексГруппы].Имя = "УстановитьСостояниеЗавершенУспешноФорма"
					ИЛИ Элементы.ФормаУстановитьСостояние.ПодчиненныеЭлементы[ИндексГруппы].Имя = "УстановитьСостояниеОтмененФорма" Тогда
					Продолжить;
				КонецЕсли;
				УдаляемыеЭлементы.Добавить(Элементы.ФормаУстановитьСостояние.ПодчиненныеЭлементы[ИндексГруппы]);
			КонецЦикла;
		КонецЕсли;
	
		Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
			Элементы.Удалить(УдаляемыйЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	СостоянияЗаказНарядов.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыЗаказНарядов.Ссылка КАК Ссылка,
	|	ВидыЗаказНарядов.Наименование КАК Наименование,
	|	ВидыЗаказНарядов.ПорядокСостояний.(
	|		Состояние КАК Состояние,
	|		НомерСтроки КАК НомерСтроки,
	|		Состояние.Цвет КАК СостояниеЦвет
	|	) КАК ПорядокСостояний
	|ИЗ
	|	Справочник.ВидыЗаказНарядов КАК ВидыЗаказНарядов
	|ГДЕ
	|	ВидыЗаказНарядов.ПорядокСостояний.Состояние.ПометкаУдаления = ЛОЖЬ";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ИндексВидаЗаказа = 0;
	
	
	Пока Выборка.Следующий() Цикл
		
		КомандыСостоянийВида = Элементы.Добавить("Вид_" + Строка(ИндексВидаЗаказа), Тип("ГруппаФормы"), Элементы.СписокКонтекстноеМенюУстановитьСостояние);
		КомандыСостоянийВида.Вид = ВидГруппыФормы.ГруппаКнопок;
		
		КомандыСостоянийВидаФорма = Элементы.Добавить("Вид_" + Строка(ИндексВидаЗаказа)+ "_Форма", Тип("ГруппаФормы"), Элементы.ФормаУстановитьСостояние);
		КомандыСостоянийВидаФорма.Вид = ВидГруппыФормы.ГруппаКнопок;
		
		НомерСостояния = 1;
		СписокСостояний = Выборка.ПорядокСостояний.Выгрузить();

		Для каждого СостояниеВида Из СписокСостояний Цикл
			
			Если СостояниеВида.Состояние = Справочники.СостоянияЗаказНарядов.Завершен Тогда
				Продолжить;
			КонецЕсли;
			
			СостояниеВТаблице = СостоянияЗаказНарядов.НайтиСтроки(Новый Структура("Состояние", Выборка.Ссылка));
			
			Если СостояниеВТаблице.Количество() = 0 Тогда
				НовоеСостояние = СостоянияЗаказНарядов.Добавить();
				НовоеСостояние.Состояние = СостояниеВида.Состояние;
				НовоеСостояние.Вид = Выборка.Ссылка;
				НовоеСостояние.ИндексВида = ИндексВидаЗаказа;
			Иначе
				НовоеСостояние = СостояниеВТаблице[0];
			КонецЕсли;
			
			КнопкаУстановитьСостояниеЗаказа = Элементы.Добавить("Состояние_" + Строка(СостоянияЗаказНарядов.Индекс(НовоеСостояние)), Тип("КнопкаФормы"),КомандыСостоянийВида);
			КнопкаУстановитьСостояниеЗаказа.Заголовок = Строка(НомерСостояния)+". "+ Строка(СостояниеВида.Состояние);
			
			КнопкаУстановитьСостояниеЗаказаФорма = Элементы.Добавить("Состояние_" + Строка(СостоянияЗаказНарядов.Индекс(НовоеСостояние)) + "Форма", Тип("КнопкаФормы"),КомандыСостоянийВидаФорма);
			КнопкаУстановитьСостояниеЗаказаФорма.Заголовок = Строка(НомерСостояния)+". "+ Строка(СостояниеВида.Состояние);
			КнопкаУстановитьСостояниеЗаказаФорма.ТолькоВоВсехДействиях = Истина;
			
			НазваниеКоманды = "Состояние_" + Строка(СостоянияЗаказНарядов.Индекс(НовоеСостояние));
			
			Если Команды.Найти(НазваниеКоманды) <> Неопределено Тогда
				КомандаУстановитьСостояниеЗаказа = Команды[НазваниеКоманды];
			Иначе
				КомандаУстановитьСостояниеЗаказа = Команды.Добавить(НазваниеКоманды);
			КонецЕсли;

			КомандаУстановитьСостояниеЗаказа.Действие = "ИзменитьСостояниеЗаказа";
			КомандаУстановитьСостояниеЗаказа.Заголовок = Строка(СостояниеВида.Состояние);
			
			КнопкаУстановитьСостояниеЗаказа.ИмяКоманды = КомандаУстановитьСостояниеЗаказа.Имя;
			КнопкаУстановитьСостояниеЗаказаФорма.ИмяКоманды = КомандаУстановитьСостояниеЗаказа.Имя;
			
			НомерСостояния = НомерСостояния + 1;
		
		КонецЦикла;
		
		ИндексВидаЗаказа = ИндексВидаЗаказа + 1;
		
	КонецЦикла;
	
	Элементы.Переместить(Элементы["УстановитьСостояниеЗавершен"],Элементы["СписокКонтекстноеМенюУстановитьСостояние"]);
	Элементы.Переместить(Элементы["УстановитьСостояниеЗавершенФорма"],Элементы["ФормаУстановитьСостояние"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеЗаказа(Команда)
	
	Если Команда.Имя = "СостояниеЗавершенУспешно" Тогда
		ВидЗаказа = Неопределено;
	Иначе
		ИндексСостояния = Число(Сред(Команда.Имя,11,СтрДлина(Команда.Имя)));
		ВидЗаказа = СостоянияЗаказНарядов[ИндексСостояния].Вид;
	КонецЕсли;
	
	ИмяКоманды = Команда.Имя;
	Заказы = Элементы.Список.ВыделенныеСтроки;
	УстановитьСостояниеЗаказа(ИмяКоманды, Заказы, ВидЗаказа);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеЗаказа(ИмяКоманды, Заказы, ВидЗаказа = Неопределено, ПричинаОтмены = Неопределено, Заметки = Неопределено)
	
	Если Тип(Заказы) <> Тип("Массив") Или Заказы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Заказы.Количество() = 1 Тогда
		
		Если Заметки = "" Тогда
			Заметки = Неопределено;
		КонецЕсли;
		
		УстановитьСостояниеЗаказаСервер(ВидЗаказа, ИмяКоманды, Заказы, ПричинаОтмены, Заметки);
		
		Если Заказы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),
			ПолучитьНавигационнуюСсылку(Заказы[0]),
			СтрШаблон(НСтр("ru='%1'"),Строка(Заказы[0])),
			БиблиотекаКартинок.Информация32);
			
		Элементы.Список.Обновить();
		Оповестить("ИзменениеСостояния_ЗаказНаряд",Заказы);
		Возврат;
		
	КонецЕсли;
	
	Если Заметки = "" Тогда
		Заметки = Неопределено;
	КонецЕсли;
	
	КоличествоЗаказов = Заказы.Количество();
	
	Состояние(НСтр("ru='Изменение состояния'"), 49);
	УстановитьСостояниеЗаказаСервер(ВидЗаказа, ИмяКоманды, Заказы, ПричинаОтмены, Заметки);
	Состояние(НСтр("ru='Изменение состояния'"), 100);
	
	Элементы.Список.Обновить();
	Оповестить("ИзменениеСостояния_ЗаказНаряд",Заказы);
	
	ПоказатьОповещениеПользователя(СтрШаблон(НСтр("ru='Изменение (%1)'"),
		КоличествоИзмененныхЗаказов),,
		НСтр("ru='Заказ-наряды'"),БиблиотекаКартинок.Информация32);
	
	Если Не ЗначениеЗаполнено(СтрокаВидЗаказа) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПредмета = "заказа, заказов, заказов";
	КоличествоВидов = СтрЧислоВхождений(СтрокаВидЗаказа, ",") + 1;
	
	Если КоличествоВидов = 1 Тогда
		СтрокаВида = НСтр("ru='Вид заказа " + СтрокаВидЗаказа + " не содержит выбранное состояние'");
	Иначе
		СтрокаВида = НСтр("ru='Виды заказов " + СтрокаВидЗаказа + " не содержат выбранное состояние'");
	КонецЕсли;
	
	ТекстВопроса = СтрШаблон(НСтр("ru='Было изменено состояние для %1 из %2'"), 
		СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоИзмененныхЗаказов, ПараметрыПредмета),
		КоличествоЗаказов) + Символы.ПС + СтрокаВида;
	Оповещение = Новый ОписаниеОповещения();
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОК);

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеЗаказаСервер(ВидЗаказа, ИмяКоманды, Заказы, ПричинаОтмены, Заметки)
	
	ВариантЗавершения = Неопределено;
	
	Если ВидЗаказа = Неопределено Тогда
		ВидЗаказа = Справочники.ВидыЗаказНарядов.Основной;
	КонецЕсли;

	Если ИмяКоманды = "СостояниеЗавершенУспешно" Тогда
		СсылкаНаСостояние = Справочники.СостоянияЗаказНарядов.Завершен;
		ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Успешно;
	ИначеЕсли ИмяКоманды = "СостояниеОтменен" Тогда
		СсылкаНаСостояние = Справочники.СостоянияЗаказНарядов.Завершен;
		ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен;
	Иначе
		ИндексСостояния = Число(Сред(ИмяКоманды,11,СтрДлина(ИмяКоманды)));
		СсылкаНаСостояние = СостоянияЗаказНарядов[ИндексСостояния].Состояние;
	КонецЕсли;
		
	КоличествоИзмененныхЗаказов = 0;
	СтрокаВидЗаказа = "";
	МассивСтрок = Новый Массив;
	НеизмененныеЗаказы = Новый Массив;
	
	Для Каждого Заказ Из Заказы Цикл
		
		Если Заказ.ВидЗаказа <> ВидЗаказа Тогда
			
			СостояниеНайдено = НайденоСостояниеДанногоВида(СсылкаНаСостояние, Заказ.ВидЗаказа);
			
			Если НЕ СостояниеНайдено Тогда
				
				Вид = МассивСтрок.Найти(Строка(Заказ.ВидЗаказа));
				
				Если Вид <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				МассивСтрок.Добавить(Строка(Заказ.ВидЗаказа));
				НеизмененныеЗаказы.Добавить(Заказ);
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Заказ.СостояниеЗаказа = СсылкаНаСостояние И СсылкаНаСостояние <> Справочники.СостоянияЗаказНарядов.Завершен Тогда
			НеизмененныеЗаказы.Добавить(Заказ);
			Продолжить;
		КонецЕсли;
		
		Если Заказ.СостояниеЗаказа = СсылкаНаСостояние И СсылкаНаСостояние = Справочники.СостоянияЗаказНарядов.Завершен
			И (ЗначениеЗаполнено(Заказ.ВариантЗавершения) И Заказ.ВариантЗавершения = ВариантЗавершения) Тогда
			НеизмененныеЗаказы.Добавить(Заказ);
			Продолжить;
		КонецЕсли;

		Попытка
			Документы.ЗаказПокупателя.ИзменитьСостояниеЗаказНаряда(Заказ, СсылкаНаСостояние, ВариантЗавершения, ПричинаОтмены, Заметки);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), Заказ);
			НеизмененныеЗаказы.Добавить(Заказ);
			Продолжить;
		КонецПопытки;
		
		КоличествоИзмененныхЗаказов = КоличествоИзмененныхЗаказов + 1;
		
	КонецЦикла;
	
	Для Каждого НеизмененныйЗаказ Из НеизмененныеЗаказы Цикл
		ИндексЗаказа = Заказы.Найти(НеизмененныйЗаказ);
		Если ИндексЗаказа = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Заказы.Удалить(ИндексЗаказа);
		
	КонецЦикла;
	
	СтрокаВидЗаказа = СтрСоединить(МассивСтрок, ", ");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьКомандИзмененияСостояний(Элемент)
	
	Если (Тип(Элемент.ВыделенныеСтроки) <> Тип("Массив") 
		ИЛИ Элемент.ВыделенныеСтроки.Количество() = 0
		ИЛИ Элемент.ТекущиеДанные = Неопределено) И ЭтотОбъект.СостоянияЗаказНарядов.Количество() = 0 Тогда
		
		Элементы.СписокКонтекстноеМенюУстановитьСостояние.Видимость = Ложь;
		Элементы.ФормаУстановитьСостояние.Видимость = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Найдено = Новый Массив;
		Найдено.Добавить(ЭтотОбъект.СостоянияЗаказНарядов[0]);
	Иначе
		Найдено = ЭтотОбъект.СостоянияЗаказНарядов.НайтиСтроки(Новый Структура("Вид", Элемент.ТекущиеДанные.ВидЗаказа));
	КонецЕсли;
	
	Для Каждого Группа Из Элементы.СписокКонтекстноеМенюУстановитьСостояние.ПодчиненныеЭлементы Цикл
		
		Если Группа.Имя = "УстановитьСостояниеЗавершен" Тогда
			Группа.Видимость = Истина;
			Продолжить;
		КонецЕсли;
		
		Если Найдено.Количество() = 0 Тогда
			Группа.Видимость = Ложь;
		Иначе
			Группа.Видимость = Группа.Имя = "Вид_"+ Строка(Найдено[0].ИндексВида);
		КонецЕсли;
		
		Для Каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
			Элемент.Видимость = Группа.Видимость;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого Группа Из Элементы.ФормаУстановитьСостояние.ПодчиненныеЭлементы Цикл
		
		Если Группа.Имя = "УстановитьСостояниеЗавершенФорма" Тогда
			Группа.Видимость = Истина;
			Продолжить;
		КонецЕсли;
		
		Если Найдено.Количество() = 0 Тогда
			Группа.Видимость = Ложь;
		Иначе
			Группа.Видимость = Группа.Имя = "Вид_"+ Строка(Найдено[0].ИндексВида) + "_Форма";
		КонецЕсли;
		
		Для Каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
			Элемент.Видимость = Группа.Видимость;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаказы(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьСостояниеОтменен",ЭтотОбъект);
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаОтменыЗаказа", , ЭтотОбъект,,,,Оповещение);
	
КонецПроцедуры

&НаСервере
Функция НайденоСостояниеДанногоВида(СсылкаНаСостояние, ВидЗаказа)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыЗаказНарядов.Ссылка КАК Ссылка,
	|	ВидыЗаказНарядов.ПорядокСостояний.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Состояние КАК Состояние
	|	) КАК ПорядокСостояний
	|ИЗ
	|	Справочник.ВидыЗаказНарядов КАК ВидыЗаказНарядов
	|ГДЕ
	|	ВидыЗаказНарядов.Ссылка = &ВидЗаказа";
	
	Запрос.УстановитьПараметр("ВидЗаказа", ВидЗаказа);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СостоянияВида = Выборка.ПорядокСостояний.Выгрузить();
		
		Отбор = Новый Структура;
		Отбор.Вставить("Состояние",СсылкаНаСостояние);
		НайденныеСтроки = СостоянияВида.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура УстановитьСостояниеОтменен(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКоманды = "СостояниеОтменен";
	Заказы = Элементы.Список.ВыделенныеСтроки;
	УстановитьСостояниеЗаказа(ИмяКоманды, Заказы, , Результат.ПричинаОтмены, Результат.Заметки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// ИнтернетПоддержкаПользователей.Новости
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, "ПриОткрытии");
	
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.Новости

// ЭДО
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры
// Конец ЭДО

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
