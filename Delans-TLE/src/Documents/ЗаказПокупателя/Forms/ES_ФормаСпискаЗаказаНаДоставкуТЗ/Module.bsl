
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	

	ОтборПериод.ДатаНачала 		= НачалоДня(ТекущаяДата() - 259200);
	ОтборПериод.ДатаОкончания 	= КонецДня(ТекущаяДата() + 259200);
	
	ЗаполнитьТаблицуЗначений(Истина);	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЗначений(Создание = Ложь)       Экспорт
	
	//Список.Очистить();
	ТаблицаЗаказов.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ES_ЗаказыНаСкладе.Период) КАК Период,
		|	ES_ЗаказыНаСкладе.Заказ КАК Заказ
		|ПОМЕСТИТЬ ВТ_МаксПериод
		|ИЗ
		|	РегистрНакопления.ES_ЗаказыНаСкладе КАК ES_ЗаказыНаСкладе
		|ГДЕ
		|	ES_ЗаказыНаСкладе.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|
		|СГРУППИРОВАТЬ ПО
		|	ES_ЗаказыНаСкладе.Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ES_ЗаказыНаСкладе.Склад КАК Склад,
		|	ВТ_МаксПериод.Заказ КАК Заказ
		|ПОМЕСТИТЬ ВТ_ПоследнийСклад
		|ИЗ
		|	ВТ_МаксПериод КАК ВТ_МаксПериод
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ES_ЗаказыНаСкладе КАК ES_ЗаказыНаСкладе
		|		ПО ВТ_МаксПериод.Заказ = ES_ЗаказыНаСкладе.Заказ
		|			И ВТ_МаксПериод.Период = ES_ЗаказыНаСкладе.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ГрафикВыполнения.Заказ ЕСТЬ NULL
		|				И ГрафикВыполненияПлан.Заказ ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК КОтгрузке,
		|	ЕСТЬNULL(ФактОплаты.Сумма, 0) - ЕСТЬNULL(ФактОплаты.СуммаОплаты, 0) - ЕСТЬNULL(ФактОплаты.СуммаАванса, 0) КАК КОплате,
		|	ДокументЗаказПокупателя.Ссылка КАК Ссылка,
		|	ДокументЗаказПокупателя.ПометкаУдаления КАК ПометкаУдаления,
		|	ДокументЗаказПокупателя.Номер КАК Номер,
		|	ДокументЗаказПокупателя.Дата КАК Дата,
		|	ДокументЗаказПокупателя.Проведен КАК Проведен,
		|	ДокументЗаказПокупателя.Автор КАК Автор,
		|	ДокументЗаказПокупателя.БанковскийСчет КАК БанковскийСчет,
		|	ДокументЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
		|	ДокументЗаказПокупателя.ВидОперации КАК ВидОперации,
		|	ДокументЗаказПокупателя.ВидРабот КАК ВидРабот,
		|	ДокументЗаказПокупателя.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
		|	ДокументЗаказПокупателя.ВидЦен КАК ВидЦен,
		|	ДокументЗаказПокупателя.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ДокументЗаказПокупателя.Договор КАК Договор,
		|	ДокументЗаказПокупателя.ЗапланироватьОплату КАК ЗапланироватьОплату,
		|	ДокументЗаказПокупателя.Касса КАК Касса,
		|	ВЫРАЗИТЬ(ДокументЗаказПокупателя.Комментарий КАК СТРОКА(300)) КАК Комментарий,
		|	ДокументЗаказПокупателя.Контрагент КАК Контрагент,
		|	ДокументЗаказПокупателя.Контрагент.КонтактноеЛицо КАК КонтактноеЛицо,
		|	ДокументЗаказПокупателя.Кратность КАК Кратность,
		|	ДокументЗаказПокупателя.Курс КАК Курс,
		|	ДокументЗаказПокупателя.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
		|	ДокументЗаказПокупателя.Организация КАК Организация,
		|	ДокументЗаказПокупателя.Ответственный КАК Ответственный,
		|	ДокументЗаказПокупателя.Проект КАК Проект,
		|	ДокументЗаказПокупателя.Событие КАК Событие,
		|	ДокументЗаказПокупателя.СостояниеЗаказа КАК СостояниеЗаказа,
		|	ДокументЗаказПокупателя.СтруктурнаяЕдиницаПродажи КАК СтруктурнаяЕдиницаПродажи,
		|	ДокументЗаказПокупателя.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиницаРезерв,
		|	ДокументЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	ДокументЗаказПокупателя.СуммаДокумента КАК СуммаДокумента,
		|	ДокументЗаказПокупателя.ТипДенежныхСредств КАК ТипДенежныхСредств,
		|	ДокументЗаказПокупателя.Ячейка КАК Ячейка,
		|	ДокументЗаказПокупателя.МоментВремени КАК МоментВремени,
		|	ВЫБОР
		|		КОГДА ДокументЗаказПокупателя.Проведен
		|				И ДокументЗаказПокупателя.СуммаДокумента > 0
		|			ТОГДА ВЫРАЗИТЬ((ЕСТЬNULL(ФактОплаты.СуммаОплаты, 0) + ЕСТЬNULL(ФактОплаты.СуммаАванса, 0)) * 100 / ДокументЗаказПокупателя.СуммаДокумента КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПроцентОплаты,
		|	ЕСТЬNULL(ФактОплаты.СуммаОплаты, 0) + ЕСТЬNULL(ФактОплаты.СуммаАванса, 0) КАК СуммаОплатыОборот,
		|	ГрафикВыполнения.Период КАК Период,
		|	ГрафикВыполнения.Заказ КАК Заказ,
		|	ГрафикВыполнения.Выполнено КАК Выполнено,
		|	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа КАК ES_СтатусЗаказа,
		|	ES_СтатусыЗаказовСрезПоследних.Регистратор КАК ES_ПоследнееДвижение,
		|	ДокументЗаказПокупателя.ES_НомерНакладной КАК ES_НомерНакладной,
		|	ДокументЗаказПокупателя.ES_ВидДоставки КАК ES_ВидДоставки,
		|	ДокументЗаказПокупателя.ES_КоличествоМест КАК ES_КоличествоМест,
		|	ДокументЗаказПокупателя.ES_СтоимостьДоставки КАК ES_СтоимостьДоставки,
		|	ДокументЗаказПокупателя.ES_Плательщик КАК ES_Плательщик,
		|	ДокументЗаказПокупателя.ES_НППлан КАК ES_НППлан,
		|	ДокументЗаказПокупателя.ES_ДатаДоставки КАК ES_ДатаДоставки,
		|	ДокументЗаказПокупателя.ES_Манифест КАК ES_Манифест,
		|	ЕСТЬNULL(ES_ИзменяемыеРеквизиты.Курьер, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК ES_Курьер,
		|	ЕСТЬNULL(ES_ИзменяемыеРеквизиты.ES_НомерТелефонаКурьера, """") КАК ES_ТелефонКурьера,
		|	ДокументЗаказПокупателя.ES_Получатель КАК ES_Получатель,
		|	ДокументЗаказПокупателя.ES_АдресДоставки КАК ES_АдресДоставки,
		|	ДокументЗаказПокупателя.ES_АдресДоставкиДолгота КАК ES_АдресДоставкиДолгота,
		|	ДокументЗаказПокупателя.ES_АдресДоставкиШирота КАК ES_АдресДоставкиШирота,
		|	ДокументЗаказПокупателя.ES_ЗаборОтправитель КАК ES_ЗаборОтправитель,
		|	ДокументЗаказПокупателя.ES_ЗаборАдрес КАК ES_ЗаборАдрес,
		|	ДокументЗаказПокупателя.ES_Подтвержден КАК ES_Подтвержден,
		|	ДокументЗаказПокупателя.ES_ОбщийВес КАК ES_ОбщийВес,
		|	ДокументЗаказПокупателя.ES_ОбщийОбъемныйВес КАК ES_ОбщийОбъемныйВес,
		|	ДокументЗаказПокупателя.ES_ВидОплаты КАК ES_ВидОплаты,
		|	ДокументЗаказПокупателя.ES_ВхНакладная КАК ES_ВхНакладная,
		|	ДокументЗаказПокупателя.ES_ВремяДоставкиС КАК ES_ВремяДоставкиС,
		|	ДокументЗаказПокупателя.ES_ВремяДоставкиПо КАК ES_ВремяДоставкиПо,
		|	ДокументЗаказПокупателя.ES_ПолучательРегион КАК ES_ПолучательРегион,
		|	ДокументЗаказПокупателя.ES_СправочноЗаказчик КАК ES_СправочноЗаказчик,
		|	ДокументЗаказПокупателя.ES_СрочностьДоставки КАК ES_СрочностьДоставки,
		|	ЕСТЬNULL(ES_ПланДоставки.ДокПланДоставки, ЗНАЧЕНИЕ(Документ.ES_ПланДоставки.ПустаяСсылка)) КАК ES_ПланДоставки,
		|	ДокументЗаказПокупателя.ES_Склад КАК ES_Склад,
		|	ВЫБОР
		|		КОГДА ДокументЗаказПокупателя.Проведен
		|			ТОГДА 1
		|		КОГДА ДокументЗаказПокупателя.ПометкаУдаления
		|			ТОГДА 3
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ES_Картинка,
		|	ВТ_ПоследнийСклад.Склад КАК ПоследнийСклад,
		|	ВЫБОР
		|		КОГДА ДокументЗаказПокупателя.ES_ВидЗабора = ЗНАЧЕНИЕ(Перечисление.ES_ВидыЗабора.Упрощенный)
		|			ТОГДА ""(У)""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ES_Аббревиатура,
		|	ЕСТЬNULL(ES_ЗаказыНаСкладеОстатки.Склад, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ТекущийСклад,
		|	ДокументЗаказПокупателя.ES_ЗонаДоставки КАК ES_ЗонаДоставки,
		|	ДокументЗаказПокупателя.ES_ЧекНаОбщуюСумму КАК ES_ЧекНаОбщуюСумму,
		|	ДокументЗаказПокупателя.ES_ЗачетНП КАК ES_ЗачетНП,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ES_ЗаказыНаСкладеОстатки.Склад, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Ячейки.ПУстаяСсылка)
		|		ИНАЧЕ ЕСТЬNULL(ES_ИзменяемыеРеквизитыЗаказовСрезПоследнихЯчейка.Значение, ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка))
		|	КОНЕЦ КАК ES_Ячейка,
		|	ДокументЗаказПокупателя.ES_ДоУточнения КАК ES_ДоУточнения,
		|	ДокументЗаказПокупателя.ES_Проблема КАК ES_Проблема,
		|	ДокументЗаказПокупателя.ES_ПВЗ КАК ES_ПВЗ,
		|	ДокументЗаказПокупателя.ES_ЗаказчикТелефон КАК ES_ЗаказчикТелефон,
		|	ДокументЗаказПокупателя.ES_ЗаборТелефон КАК ES_ЗаборТелефон,
		|	ДокументЗаказПокупателя.ES_ПолучательТелефон КАК ES_ПолучательТелефон
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ДокументЗаказПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикВыполненияЗаказов.СрезПоследних(, Период <= &АкутальнаяДатаСеанса) КАК ГрафикВыполнения
		|		ПО ДокументЗаказПокупателя.Ссылка = ГрафикВыполнения.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикВыполненияЗаказов.СрезПоследних(, Период >= &АкутальнаяДатаСеанса) КАК ГрафикВыполненияПлан
		|		ПО ДокументЗаказПокупателя.Ссылка = ГрафикВыполненияПлан.Заказ
		|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикОплатыЗаказов.СрезПоследних(, Период <= &АкутальнаяДатаСеанса) КАК ГрафикОплаты
		|		ПО ДокументЗаказПокупателя.Ссылка = ГрафикОплаты.СчетНаОплату}
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФактОплатыЗаказов КАК ФактОплаты
		|		ПО ДокументЗаказПокупателя.Ссылка = ФактОплаты.СчетНаОплату
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних КАК ES_СтатусыЗаказовСрезПоследних
		|		ПО (ES_СтатусыЗаказовСрезПоследних.Заказ = ДокументЗаказПокупателя.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ES_СведенияОЗаказахСрезПоследних.Заказ КАК ПланДокументДоставки,
		|			МАКСИМУМ(ES_СведенияОЗаказахСрезПоследних.ПланДоставки) КАК ДокПланДоставки
		|		ИЗ
		|			РегистрСведений.ES_СведенияОЗаказах.СрезПоследних КАК ES_СведенияОЗаказахСрезПоследних
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ES_СведенияОЗаказахСрезПоследних.Заказ) КАК ES_ПланДоставки
		|		ПО (ES_СтатусыЗаказовСрезПоследних.Заказ = ES_ПланДоставки.ПланДокументДоставки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ES_ИзменяемыеРеквизитыЗаказовСрезПоследнихКурьер.Заказ КАК Заказ,
		|			ES_ИзменяемыеРеквизитыЗаказовСрезПоследнихКурьер.Значение КАК Курьер,
		|			Сотрудники.ES_НомерТелефона КАК ES_НомерТелефонаКурьера
		|		ИЗ
		|			РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(, РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Курьер)) КАК ES_ИзменяемыеРеквизитыЗаказовСрезПоследнихКурьер
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|				ПО ES_ИзменяемыеРеквизитыЗаказовСрезПоследнихКурьер.Значение = Сотрудники.Ссылка) КАК ES_ИзменяемыеРеквизиты
		|		ПО (ES_СтатусыЗаказовСрезПоследних.Заказ = ES_ИзменяемыеРеквизиты.Заказ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоследнийСклад КАК ВТ_ПоследнийСклад
		|		ПО ДокументЗаказПокупателя.Ссылка = ВТ_ПоследнийСклад.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ES_ЗаказыНаСкладе.Остатки(&ТекДата, ) КАК ES_ЗаказыНаСкладеОстатки
		|		ПО ДокументЗаказПокупателя.Ссылка = ES_ЗаказыНаСкладеОстатки.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(, РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Ячейка)) КАК ES_ИзменяемыеРеквизитыЗаказовСрезПоследнихЯчейка
		|		ПО ДокументЗаказПокупателя.Ссылка = ES_ИзменяемыеРеквизитыЗаказовСрезПоследнихЯчейка.Заказ
		|ГДЕ
		|	(ДокументЗаказПокупателя.Дата МЕЖДУ &ES_ДатаДоставкиСтарт И &ES_ДатаДоставкиФиниш
		|			ИЛИ ДокументЗаказПокупателя.Дата = ДАТАВРЕМЯ(1, 1, 1))
		|	И ДокументЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ES_ЗаказНаДоставку)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
	
	АкутальнаяДатаСеанса = НачалоДня(ТекущаяДатаСеанса());
	
		
	Запрос.УстановитьПараметр("ES_ДатаДоставкиСтарт", ОтборПериод.ДатаНачала);
	Запрос.УстановитьПараметр("ES_ДатаДоставкиФиниш", ОтборПериод.ДатаОкончания);
	Запрос.УстановитьПараметр("АкутальнаяДатаСеанса", АкутальнаяДатаСеанса);
	Запрос.УстановитьПараметр("ТекДата",ТекущаяДата());	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НовСтрока = ТаблицаЗаказов.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока,Выборка);
		НовСтрока.Проведен = Выборка.Проведен;
			
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказПокупателя(Команда)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ES_ЗаказНаДоставку"));
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ВыделенныеСтр = Элементы.ТаблицаЗаказов.ТекущаяСтрока;
	Если ВыделенныеСтр <> Неопределено Тогда
		Ссылка = Элементы.ТаблицаЗаказов.ДанныеСтроки(ВыделенныеСтр).Ссылка;
	Иначе Ссылка = Неопределено;
	КонецЕсли;
		
	//Элементы.ТаблицаЗаказов.Обновить();	
	Состояние("Обновление списка заказов");
	ЗаполнитьТаблицуЗначений();
	//ЭтаФорма.ОбновитьОтображениеДанных(Элементы.ТаблицаЗаказов);
	//Элементы.ТаблицаЗаказов.Обновить();
	
	Если ЗначениеЗаполнено(Ссылка) тогда 		
		НайденнаяСтрока = ТаблицаЗаказов.НайтиСтроки(Новый Структура("Ссылка", Ссылка));   		
		Если НайденнаяСтрока.количество() >  0 тогда  			
			Индекс = НайденнаяСтрока[0].ПолучитьИдентификатор();
			ЭтаФорма.Элементы.ТаблицаЗаказов.ТекущаяСтрока = Индекс;	
		конецесли;		
	КонецЕсли;    	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	Состояние("Обновление списка заказов");
	
	ЗаполнитьТаблицуЗначений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусПриИзменении(Элемент)
	
	УстановитьОтборСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура  УстановитьОтборСтрок ()
	
	СтруктураДляОтбора = Новый Структура;
	Если ЗначениеЗаполнено(ОтборСтатус) Тогда
		Если ОтборСтатус = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.БезСтатуса") Тогда
			СтруктураДляОтбора.Вставить("ES_СтатусЗаказа", ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ПустаяСсылка"));
		Иначе
			СтруктураДляОтбора.Вставить("ES_СтатусЗаказа", ОтборСтатус);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборКонтрагент) Тогда
		СтруктураДляОтбора.Вставить("Контрагент", ОтборКонтрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборНомерНакладной) Тогда
		СтруктураДляОтбора.Вставить("ES_НомерНакладной", ОтборНомерНакладной);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборЗонаДоставки) Тогда
		СтруктураДляОтбора.Вставить("ES_ЗонаДоставки", ОтборЗонаДоставки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПодоядчик) Тогда
		СтруктураДляОтбора.Вставить("ES_Подрядчик", ОтборПодоядчик);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборВхНакладная) Тогда
		СтруктураДляОтбора.Вставить("ES_ВхНакладная", ОтборВхНакладная);
	КонецЕсли;

	Если ЗначениеЗаполнено(ОтборМанифест) Тогда
		СтруктураДляОтбора.Вставить("ES_Манифест", ОтборМанифест);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборАдресДоставки) Тогда
		СтруктураДляОтбора.Вставить("ES_АдресДоставки", ОтборАдресДоставки);
	КонецЕсли;

	Если ЗначениеЗаполнено(ОтборПоследнийСклад) Тогда
		СтруктураДляОтбора.Вставить("ПоследнийСклад", ОтборПоследнийСклад);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборОтветственный) Тогда
		СтруктураДляОтбора.Вставить("Ответственный", ОтборОтветственный);
	КонецЕсли;
	

	Если ЗначениеЗаполнено(ОтборВидДоставки) Тогда
		
		//Если ОтборВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.СкладСклад") Тогда  
		//	// поскольку вид доставки Склад-Склад больше (или пока) не используется
		//	//- использвем его в отборе для нахождения упрощенных заборов ;)
		//	СтруктураДляОтбора.Вставить("ES_Аббревиатура", "(У)");
		//Иначе
			СтруктураДляОтбора.Вставить("ES_ВидДоставки", ОтборВидДоставки);
		//КонецЕсли;
	
	КонецЕсли;

	Если ЗначениеЗаполнено(ОтборТекущийСклад) Тогда
		СтруктураДляОтбора.Вставить("ТекущийСклад", ОтборТекущийСклад);
	КонецЕсли;

	Если ЗначениеЗаполнено(ОтборПолучатель) Тогда
		СтруктураДляОтбора.Вставить("ES_Получатель", ОтборПолучатель);
	КонецЕсли;
	
	//ES_Савченко К.Р. 26.09.2017+
	Если ДоУточнения Тогда
		СтруктураДляОтбора.Вставить("ES_ДоУточнения", ДоУточнения);
	КонецЕсли;
	
	Если Проблема Тогда 
		СтруктураДляОтбора.Вставить("ES_Проблема", Проблема);
	КонецЕсли;
    //ES_Савченко К.Р. 26.09.2017-
	Если ЗначениеЗаполнено(ОтборТелефонЗаказчика) Тогда 
		СтруктураДляОтбора.Вставить("ES_ЗаказчикТелефон", ОтборТелефонЗаказчика);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборТелефонПолучателя) Тогда 
		СтруктураДляОтбора.Вставить("ES_ПолучательТелефон", ОтборТелефонПолучателя);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборТелефонОтправителя) Тогда 
		СтруктураДляОтбора.Вставить("ES_ЗаборТелефон", ОтборТелефонОтправителя);
	КонецЕсли;

	
	
	ФиксированнаяСтруктураДляОтбора = Новый ФиксированнаяСтруктура(СтруктураДляОтбора);
	 	
	Элементы.ТаблицаЗаказов.ОтборСтрок = ФиксированнаяСтруктураДляОтбора;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(,Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаказовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	 СтандартнаяОбработка = Ложь;

	 ДокСсылка = Элементы.ТаблицаЗаказов.ДанныеСтроки(ВыбраннаяСтрока).Ссылка;
	 П = Новый Структура("Ключ", ДокСсылка);
	 
	 ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ES_ФормаЗаказаНаДоставку", П);
	 
 КонецПроцедуры
 
&НаКлиенте
Процедура ОтборНомерНакладнойПриИзменении(Элемент)
	
	УстановитьОтборСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентПриИзменении(Элемент)
	УстановитьОтборСтрок();
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗонаДоставкиПриИзменении(Элемент)
	УстановитьОтборСтрок();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодоядчикПриИзменении(Элемент)
	УстановитьОтборСтрок();
КонецПроцедуры

&НаКлиенте
Процедура ОтборВхНакладнаяПриИзменении(Элемент)
	УстановитьОтборСтрок();
КонецПроцедуры

&НаКлиенте
Процедура ES_ЦветМеткиДляИзмененияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УстановитьЦвет(ВыбранноеЗначение);
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьЦвет(ВыбранноеЗначение)
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		мМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыбранноеЗначение,"#");
		RGBМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(мМассив[1],",");
		Элементы.ES_ЦветМеткиДляИзменения.ЦветФона = Новый Цвет(RGBМассив[0],RGBМассив[1],RGBМассив[2]);
	Иначе 
		Элементы.ES_ЦветМеткиДляИзменения.ЦветФона = Новый Цвет(255,255,255);
	КонецЕсли;
	ES_ЦветМеткиДляИзменения = ВыбранноеЗначение;
КонецПроцедуры

&НаКлиенте
Процедура ES_УстановитьЦветМетки(Команда)
	
	ВыделенныеСтроки = Элементы.ТаблицаЗаказов.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Сообщить("Не выделены заказы на доставку");
		Возврат;
	КонецЕсли;
	МассивЗаказов = Новый Массив;
	
	
	
	Для каждого Элемент из ВыделенныеСтроки Цикл
		МассивЗаказов.Добавить(Элементы.ТаблицаЗаказов.ДанныеСтроки(Элемент).Ссылка);
	КонецЦикла;
	
	//Если НЕ ЗначениеЗаполнено(ES_ЦветМеткиДляИзменения) Тогда
	//	Сообщить("Выберите цвет");
	//	Возврат;
	//КонецЕсли;
	
	ПоменятьЦветМеткиНаСервере(МассивЗаказов, ES_ЦветМеткиДляИзменения);
	
КонецПроцедуры

&НаСервере
Процедура ПоменятьЦветМеткиНаСервере(СписокЗаказов, Цвет) 
	
	Для каждого Заказ Из СписокЗаказов Цикл
		мОбъект = Заказ.ПолучитьОбъект();
		мОбъект.ES_ЦветМетки = Цвет;
		мОбъект.Записать()
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ПровестиДокумент(Команда)
	ВыделенныеСтроки = Элементы.ТаблицаЗаказов.ВыделенныеСтроки;
	МассивЗаказов = Новый Массив;
	Для каждого Элемент из ВыделенныеСтроки Цикл
		МассивЗаказов.Добавить(Элементы.ТаблицаЗаказов.ДанныеСтроки(Элемент).Ссылка);
	КонецЦикла;
	
	Для каждого Заказ Из МассивЗаказов Цикл
		Состояние("Проведение: " + Заказ);
		ПровестиДокументНаСервере(Заказ);
	КонецЦикла;

	
КонецПроцедуры

&НаСервере
Процедура ПровестиДокументНаСервере(Заказ)
	
	Если Заказ.ПометкаУдаления = Истина Тогда
		Сообщить("Помеченный на удаление документ не может быть проведен");
		Возврат;
	КонецЕсли;
 
	мОбъект = Заказ.ПолучитьОбъект();
	
	Попытка
		мОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить("Не удалось провести " + Заказ);
	КонецПопытки;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПроведение(Команда)
	
	ВыделенныеСтроки = Элементы.ТаблицаЗаказов.ВыделенныеСтроки;
	МассивЗаказов = Новый Массив;
	Для каждого Элемент из ВыделенныеСтроки Цикл
		МассивЗаказов.Добавить(Элементы.ТаблицаЗаказов.ДанныеСтроки(Элемент).Ссылка);
	КонецЦикла;
	
	Для каждого Заказ Из МассивЗаказов Цикл
		Состояние("Отмена проведения: " + Заказ);
		ОтменаПроведенияНаСервере(Заказ);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОтменаПроведенияНаСервере(Заказ)
	
	мОбъект = Заказ.ПолучитьОбъект();
	Попытка
		мОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Исключение
		Сообщить("Не удалось провести " + Заказ);
	КонецПопытки;
	

	
КонецПроцедуры

&НаКлиенте
Процедура ПометкаУдаления(Команда)
	
	ВыделенныеСтроки = Элементы.ТаблицаЗаказов.ВыделенныеСтроки;
	МассивЗаказов = Новый Массив;
	Для каждого Элемент из ВыделенныеСтроки Цикл
		МассивЗаказов.Добавить(Элементы.ТаблицаЗаказов.ДанныеСтроки(Элемент).Ссылка);
	КонецЦикла;

	Для каждого Заказ Из МассивЗаказов Цикл	
		Состояние("Пометка на удаление: " + Заказ);
		ПометкаУдаленияНаСервере(Заказ);
	КонецЦикла;


	
КонецПроцедуры

&НаСервере
Процедура  ПометкаУдаленияНаСервере(Заказ)
	
	мОбъект = Заказ.ПолучитьОбъект();
	
	Если мОбъект.ПометкаУдаления = Ложь Тогда
		мОбъект.ПометкаУдаления = Истина;
	ИначеЕсли мОбъект.ПометкаУдаления = Истина Тогда
		мОбъект.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	Попытка
		
		мОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Исключение
		Сообщить("Не удалось установить/снять пометку");
	КонецПопытки;
	
КонецПроцедуры


&НаКлиенте
Процедура ES_ГрупповоеПроведение(Команда)
	
	Уникальность = "ФормаГрупповогоПроведенияЗаказов";
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ES_ФормаПодбораЗаказов", , ЭтаФорма, Уникальность, , , );
		
КонецПроцедуры

&НаКлиенте
Процедура ОтборМанифестПриИзменении(Элемент)
	УстановитьОтборСтрок();
КонецПроцедуры

&НаКлиенте
Процедура ES_ГрупповойЗаборГруза(Команда)
	
	ВыделенныеСтроки = Элементы.ТаблицаЗаказов.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Сообщить("Не выделены заказы на доставку");
		Возврат;
	КонецЕсли;
	
	МассивЗаказов = Новый Массив;
	
	Для каждого Элемент из ВыделенныеСтроки Цикл
		МассивЗаказов.Добавить(Элементы.ТаблицаЗаказов.ДанныеСтроки(Элемент).Ссылка);
	КонецЦикла;
	
	ФормаНовогоДокумента = ПолучитьФорму("Документ.ES_ЗаборГруза.Форма.ФормаДокумента");
	ДанныеФормы = ФормаНовогоДокумента.Объект;
	
	ЗаполнитьТЧНазначениеНаСервере(ДанныеФормы, МассивЗаказов);
	
	КопироватьДанныеФормы(ДанныеФормы, ФормаНовогоДокумента.Объект);
	ФормаНовогоДокумента.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧНазначениеНаСервере(ДанныеФормы, МассивЗаказов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказ,
		|	ES_ДанныеПоЗаказамСрезПоследних.НомерДокумента КАК НомерДокумента,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВхНакладная
		|ИЗ
		|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(, Заказ В (&МассивЗаказов)) КАК ES_ДанныеПоЗаказамСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерДокумента";
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НовСтр = ДанныеФормы.Назначение.Добавить();
			НовСтр.Документ = Выборка.Заказ;
			НовСтр.ВхНакладная = Выборка.ВхНакладная;
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ES_КорректировкаЦен(Команда)
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ES_ФормаКорректировкиЦен",,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ES_Приемка(Команда)
	
	ВыделенныеСтроки = Элементы.ТаблицаЗаказов.ВыделенныеСтроки;
	МассивЗаказов = Новый Массив;
	Для каждого Элемент из ВыделенныеСтроки Цикл
		МассивЗаказов.Добавить(Элементы.ТаблицаЗаказов.ДанныеСтроки(Элемент).Ссылка);
	КонецЦикла;
	
	Если МассивЗаказов.Количество() = 0 Тогда
		Сообщить("Не выделены заказы на доставку");
		Возврат;
	КонецЕсли; 
	
	ФормаНовогоДокумента = ПолучитьФорму("Документ.ES_Приемка.Форма.ФормаДокумента");
	ДанныеФормы = ФормаНовогоДокумента.Объект;
	ДанныеФормы.Склад = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(ПредопределенноеЗначение("Перечисление.ES_ВидыСтартовыхНастроек.Склад")); 	
	ЗаполнитьПриемку(ДанныеФормы,МассивЗаказов);
	//ЗаполнитьТЧПриемки(ДанныеФормы, МассивЗаказов);
	КопироватьДанныеФормы(ДанныеФормы, ФормаНовогоДокумента.Объект);
	ФормаНовогоДокумента.Открыть();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПриемку(ДанныеФормы, МассивЗаказов)
	 Документы.ES_Приемка.ЗаполнитьДокументЗаказами(ДанныеФормы,МассивЗаказов);
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьТЧПриемки(ДанныеФормы, МассивЗаказов)
	
	//ЭР Несторук С.И. 02.03.2017 17:27:05 {
	ДанныеФормы.СозданНаОсновании = Истина;	
	//}ЭР Несторук С.И.
	ЯчейкаКДоставке = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ЯчейкаКВыдаче); 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказ,
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказчик,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВхНакладная,
		|	ES_ДанныеПоЗаказамСрезПоследних.НомерНакладной,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВидДоставки,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВидЗабора,
		|	ES_ДанныеПоЗаказамСрезПоследних.Возврат,
		|	ES_ДанныеПоЗаказамСрезПоследних.Комментарий,
		|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийВес,
		|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийОбъем,
		|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийОбъемныйВес,
		|	ВЫБОР
		|		КОГДА ES_ДанныеПоЗаказамСрезПоследних.ВидДоставки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыДоставки.Самовывоз)
		|			ТОГДА ES_ДанныеПоЗаказамСрезПоследних.АдресСкладаДоставки
		|		ИНАЧЕ ES_ДанныеПоЗаказамСрезПоследних.АдресДоставки
		|	КОНЕЦ КАК АдресДоставки,
		|	ЕСТЬNULL(ES_ДанныеПоЗаказамСрезПоследних.ДатаДоставки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДоставки,
		|	ES_ДанныеПоЗаказамСрезПоследних.КоличествоМест,
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказ.Высота КАК Высота,
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказ.Длина КАК Длина,
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказ.Ширина КАК Ширина
		|ПОМЕСТИТЬ ВТ_Заказ
		|ИЗ
		|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(
		|			,
		|			Заказ В (&МассивЗаказов)
		|				И ВидДоставки <> ЗНАЧЕНИЕ(Перечисление.ES_ВидыДоставки.ДвериДвери)) КАК ES_ДанныеПоЗаказамСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ES_НоменклатураВЗаказахСрезПоследних.ДокументДоставки,
		|	ES_НоменклатураВЗаказахСрезПоследних.Номенклатура,
		|	ES_НоменклатураВЗаказахСрезПоследних.Характеристика,
		|	ES_НоменклатураВЗаказахСрезПоследних.Партия,
		|	ES_НоменклатураВЗаказахСрезПоследних.ТипНоменклатурыЗапас,
		|	ES_НоменклатураВЗаказахСрезПоследних.Количество,
		|	ES_НоменклатураВЗаказахСрезПоследних.НППлан,
		|	ES_НоменклатураВЗаказахСрезПоследних.Содержание,
		|	ES_НоменклатураВЗаказахСрезПоследних.Цена,
		|	ES_НоменклатураВЗаказахСрезПоследних.ПроцентСкидкиНаценки,
		|	ES_НоменклатураВЗаказахСрезПоследних.Вес,
		|	ES_НоменклатураВЗаказахСрезПоследних.Объем,
		|	ES_НоменклатураВЗаказахСрезПоследних.ОбъемныйВес,
		|	ES_НоменклатураВЗаказахСрезПоследних.ОбьявленнаяСтоимость,
		|	ES_НоменклатураВЗаказахСрезПоследних.Опасность,
		|	ES_НоменклатураВЗаказахСрезПоследних.НомерСтроки,
		|	ES_НоменклатураВЗаказахСрезПоследних.Артикул,
		|	ES_НоменклатураВЗаказахСрезПоследних.Штрихкод
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	РегистрСведений.ES_НоменклатураВЗаказах.СрезПоследних(
		|			,
		|			ДокументДоставки В
		|				(ВЫБРАТЬ
		|					ВТ_Заказ.Заказ
		|				ИЗ
		|					ВТ_Заказ КАК ВТ_Заказ)) КАК ES_НоменклатураВЗаказахСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Значение, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Курьер,
		|	ЕСТЬNULL(ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Регистратор, ЗНАЧЕНИЕ(Документ.ES_ПланДоставки.ПустаяСсылка)) КАК ПланДоставки,
		|	ВТ_Заказ.Заказ КАК Заказ,
		|	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа КАК СтатусЗаказа,
		|	ВТ_Заказ.Заказчик КАК Заказчик,
		|	ВТ_Заказ.ВхНакладная КАК ВхНакладная,
		|	ВТ_Заказ.НомерНакладной КАК НомерНакладной,
		|	ВТ_Товары.ДокументДоставки КАК ДокументДоставки,
		|	ВТ_Товары.Номенклатура КАК Номенклатура,
		|	ВТ_Товары.Характеристика КАК Характеристика,
		|	ВТ_Товары.Партия КАК Партия,
		|	ВТ_Товары.ТипНоменклатурыЗапас КАК ТипНоменклатурыЗапас,
		|	ВТ_Товары.Количество КАК Количество,
		|	ВТ_Товары.НППлан КАК НППлан,
		|	ВТ_Товары.Цена КАК Цена,
		|	ВТ_Товары.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|	ВТ_Товары.Вес КАК Вес,
		|	ВТ_Товары.Объем КАК Объем,
		|	ВТ_Товары.ОбъемныйВес КАК ОбъемныйВес,
		|	ВТ_Товары.ОбьявленнаяСтоимость КАК ОбьявленнаяСтоимость,
		|	ВТ_Товары.Опасность КАК Опасность,
		|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
		|	ВТ_Заказ.ВидДоставки КАК ВидДоставки,
		|	ВТ_Заказ.ВидЗабора КАК ВидЗабора,
		|	ВТ_Заказ.Возврат КАК Возврат,
		|	ВТ_Заказ.Комментарий КАК Комментарий,
		|	ВТ_Заказ.ОбщийВес КАК ОбщийВес,
		|	ВТ_Заказ.ОбщийОбъем КАК ОбщийОбъем,
		|	ВТ_Заказ.ОбщийОбъемныйВес КАК ОбщийОбъемныйВес,
		|	ВТ_Заказ.АдресДоставки КАК АдресДоставки,
		|	ВТ_Товары.Артикул,
		|	ВТ_Товары.Штрихкод,
		|	ВТ_Заказ.КоличествоМест КАК КоличествоМест,
		|	ВТ_Заказ.Высота КАК Высота,
		|	ВТ_Заказ.Длина КАК Длина,
		|	ВТ_Заказ.Ширина КАК Ширина,
		|	ВТ_Заказ.ДатаДоставки КАК ДатаДоставки
		|ИЗ
		|	ВТ_Заказ КАК ВТ_Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
		|				,
		|				Регистратор ССЫЛКА Документ.ES_ПланДоставки
		|					И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Курьер)
		|					И Заказ В
		|						(ВЫБРАТЬ
		|							ВТ_Заказ.Заказ
		|						ИЗ
		|							ВТ_Заказ КАК ВТ_Заказ)) КАК ES_ИзменяемыеРеквизитыЗаказовСрезПоследних
		|		ПО ВТ_Заказ.Заказ = ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(
		|				,
		|				Заказ В
		|					(ВЫБРАТЬ
		|						ВТ_Заказ.Заказ
		|					ИЗ
		|						ВТ_Заказ КАК ВТ_Заказ)) КАК ES_СтатусыЗаказовСрезПоследних
		|		ПО ВТ_Заказ.Заказ = ES_СтатусыЗаказовСрезПоследних.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары
		|		ПО ВТ_Заказ.Заказ = ВТ_Товары.ДокументДоставки
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|ИТОГИ
		|	МАКСИМУМ(Курьер),
		|	МАКСИМУМ(ПланДоставки),
		|	МАКСИМУМ(СтатусЗаказа),
		|	МАКСИМУМ(Заказчик),
		|	МАКСИМУМ(ВхНакладная),
		|	МАКСИМУМ(НомерНакладной),
		|	МАКСИМУМ(ВидДоставки),
		|	МАКСИМУМ(ВидЗабора),
		|	МАКСИМУМ(Возврат),
		|	МАКСИМУМ(Комментарий),
		|	МАКСИМУМ(ОбщийВес),
		|	МАКСИМУМ(ОбщийОбъем),
		|	МАКСИМУМ(ОбщийОбъемныйВес),
		|	МАКСИМУМ(АдресДоставки),
		|	МАКСИМУМ(КоличествоМест),
		|	МАКСИМУМ(Высота),
		|	МАКСИМУМ(Длина),
		|	МАКСИМУМ(Ширина),
		|	МАКСИМУМ(ДатаДоставки)
		|ПО
		|	Заказ";
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗаказ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗаказ.Следующий() Цикл
		НоваяСтрокаЗаказы = ДанныеФормы.Заказы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗаказы,ВыборкаЗаказ);
		НоваяСтрокаЗаказы.ДатаВремяДобавленияЗаказа = ТекущаяДата();
		НоваяСтрокаЗаказы.Аббревиатура = ES_ОбщегоНазначения.ВернутьСокращениеВидовДоставки(
		ВыборкаЗаказ.ВидДоставки, ВыборкаЗаказ.ВидЗабора, ВыборкаЗаказ.Возврат);
		НоваяСтрокаЗаказы.ДатаДоставки = ВыборкаЗаказ.ДатаДоставки;
		НоваяСтрокаЗаказы.Мест = ВыборкаЗаказ.КоличествоМест;
		НоваяСтрокаЗаказы.Высота = ВыборкаЗаказ.Высота;
		НоваяСтрокаЗаказы.Длина = ВыборкаЗаказ.Длина;
		НоваяСтрокаЗаказы.Ширина = ВыборкаЗаказ.Ширина;
		Если КонецДня(ВыборкаЗаказ.ДатаДоставки) = КонецДня(ТекущаяДата()+24*3600) Тогда
			НоваяСтрокаЗаказы.Ячейка		= ЯчейкаКДоставке;
		КонецЕсли;

		Выборка = ВыборкаЗаказ.Выбрать();
	
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			НоваяСтрокаГрузы = ДанныеФормы.Грузы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаГрузы,Выборка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры


&НаКлиенте
Процедура Скопировать(Команда)
	ВыделеннаяСтрока = Элементы.ТаблицаЗаказов.ВыделенныеСтроки[0];
	
	ТекЗаказ = Элементы.ТаблицаЗаказов.ДанныеСтроки(ВыделеннаяСтрока).Ссылка;
	
	
	
	
	ФормаНовогоДокумента = ПолучитьФорму("Документ.ЗаказПокупателя.Форма.ES_ФормаЗаказаНаДоставку");
	ДанныеФормы = ФормаНовогоДокумента.Объект;
	
	ПолучитьДанныеФормы(ТекЗаказ,ДанныеФормы);
	
	КопироватьДанныеФормы(ДанныеФормы, ФормаНовогоДокумента.Объект);
	ФормаНовогоДокумента.Открыть();
	
КонецПроцедуры


&НаСервере
Процедура ПолучитьДанныеФормы (Заказ,ДанныеФормы)
	
	//КопияЗаказаОбъект = Заказ.Скопировать();
	Док = ДанныеФормыВЗначение(ДанныеФормы,Тип("ДокументОбъект.ЗаказПокупателя"));
	
	ЗаполнитьЗначенияСвойств(Док,Заказ);
	Док.Номер = "";
	Док.Дата = ТекущаяДата();
	Док.ES_НомерНакладной = "";
	Для каждого Стр Из Заказ.Запасы Цикл
		
		НовСтр = Док.Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр,Стр);
		
	КонецЦикла;
	
	Для каждого Стр Из Заказ.ES_Грузы Цикл
		
		НовСтр = Док.ES_Грузы.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр,Стр);
		
	КонецЦикла;

	ЗначениеВДанныеФормы(Док,ДанныеФормы);
	
КонецПроцедуры // ()

&НаКлиенте
Процедура СоздатьПеремещениеЗаказов(Команда)
	
	ОчиститьСообщения();
	
	ВыделенныеСтроки = Элементы.ТаблицаЗаказов.ВыделенныеСтроки;
	МассивЗаказов = Новый Массив;
	Для каждого Элемент из ВыделенныеСтроки Цикл
		МассивЗаказов.Добавить(Элементы.ТаблицаЗаказов.ДанныеСтроки(Элемент).Ссылка);
	КонецЦикла;

	
	Если МассивЗаказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФормаНовогоДокумента = ПолучитьФорму("Документ.ES_ПеремещениеЗаказов.Форма.ФормаДокумента");
	ДанныеФормы = ФормаНовогоДокумента.Объект;
	
	ES_ОбщегоНазначения.СоздатьПеремещениеЗаказовНаСервере(ДанныеФормы, МассивЗаказов);
	
	КопироватьДанныеФормы(ДанныеФормы, ФормаНовогоДокумента.Объект);
	ФормаНовогоДокумента.Открыть();

КонецПроцедуры

&НаСервере
Процедура СоздатьПеремещениеЗаказовНаСервере(ДанныеФормы, МассивЗаказов, Добавление = Ложь)
	
	Если Добавление = Ложь Тогда
		ДанныеФормы.Дата 			= ТекущаяДата();
		ДанныеФормы.Ответственный 	= УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
		
	Иначе 
		ДанныеФормы.Подтвержден = Ложь;
		ДанныеФормы.ДанныеПодтверждения = "";
	КонецЕсли;
	
	//ЭР Несторук С.И. 14.09.2017 21:23:14 {
	ДанныеФормы.ВидОперации		= Перечисления.ES_ВидыОперацийПеремещение.Заказы;
	//}ЭР Несторук С.И.

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказ,
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказчик,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВхНакладная,
		|	ES_ДанныеПоЗаказамСрезПоследних.НомерНакладной,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВидДоставки,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВидЗабора,
		|	ES_ДанныеПоЗаказамСрезПоследних.Возврат,
		|	ES_ДанныеПоЗаказамСрезПоследних.Комментарий,
		|	ВЫБОР
		|		КОГДА ES_ДанныеПоЗаказамСрезПоследних.ВидДоставки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыДоставки.Самовывоз)
		|			ТОГДА ES_ДанныеПоЗаказамСрезПоследних.АдресСкладаДоставки
		|		ИНАЧЕ ES_ДанныеПоЗаказамСрезПоследних.АдресДоставки
		|	КОНЕЦ КАК АдресДоставки,
		|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийВес,
		|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийОбъем,
		|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийОбъемныйВес,
		|	ЕСТЬNULL(ES_ДанныеПоЗаказамСрезПоследних.НППлан, 0) КАК НППланЗаказ
		|ПОМЕСТИТЬ ВТ_Заказы
		|ИЗ
		|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(, Заказ В (&МассивЗаказов)) КАК ES_ДанныеПоЗаказамСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Заказы.Заказ КАК Заказ,
		|	ВТ_Заказы.Заказчик КАК Заказчик,
		|	ВТ_Заказы.ВхНакладная КАК ВхНакладная,
		|	ВТ_Заказы.НомерНакладной КАК НомерНакладной,
		|	ES_НоменклатураВЗаказахСрезПоследних.НомерСтроки,
		|	ES_НоменклатураВЗаказахСрезПоследних.Номенклатура,
		|	ES_НоменклатураВЗаказахСрезПоследних.Характеристика,
		|	ES_НоменклатураВЗаказахСрезПоследних.Партия,
		|	ES_НоменклатураВЗаказахСрезПоследних.ЕдиницаИзмерения,
		|	ES_НоменклатураВЗаказахСрезПоследних.ТипНоменклатурыЗапас,
		|	ES_НоменклатураВЗаказахСрезПоследних.Количество,
		|	ES_НоменклатураВЗаказахСрезПоследних.НППлан,
		|	ES_НоменклатураВЗаказахСрезПоследних.Содержание,
		|	ES_НоменклатураВЗаказахСрезПоследних.Цена,
		|	ES_НоменклатураВЗаказахСрезПоследних.ПроцентСкидкиНаценки,
		|	ES_НоменклатураВЗаказахСрезПоследних.Вес,
		|	ES_НоменклатураВЗаказахСрезПоследних.Объем,
		|	ES_НоменклатураВЗаказахСрезПоследних.ОбъемныйВес,
		|	ES_НоменклатураВЗаказахСрезПоследних.ОбьявленнаяСтоимость,
		|	ES_НоменклатураВЗаказахСрезПоследних.Опасность,
		|	ВТ_Заказы.ВидДоставки КАК ВидДоставки,
		|	ВТ_Заказы.ВидЗабора КАК ВидЗабора,
		|	ВТ_Заказы.Возврат КАК Возврат,
		|	ВТ_Заказы.Комментарий КАК Комментарий,
		|	ВТ_Заказы.АдресДоставки КАК АдресДоставки,
		|	ВТ_Заказы.ОбщийВес КАК ОбщийВес,
		|	ВТ_Заказы.ОбщийОбъем КАК ОбщийОбъем,
		|	ВТ_Заказы.ОбщийОбъемныйВес КАК ОбщийОбъемныйВес,
		|	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа КАК СтатусЗаказа,
		|	ES_НоменклатураВЗаказахСрезПоследних.Артикул,
		|	ES_НоменклатураВЗаказахСрезПоследних.Штрихкод,
		|	ВТ_Заказы.НППланЗаказ КАК НППланЗаказ
		|ИЗ
		|	ВТ_Заказы КАК ВТ_Заказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_НоменклатураВЗаказах.СрезПоследних(
		|				,
		|				ДокументДоставки В
		|					(ВЫБРАТЬ
		|						ВТ_Заказы.Заказ
		|					ИЗ
		|						ВТ_Заказы КАК ВТ_Заказы)) КАК ES_НоменклатураВЗаказахСрезПоследних
		|		ПО ВТ_Заказы.Заказ = ES_НоменклатураВЗаказахСрезПоследних.ДокументДоставки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(
		|				,
		|				Заказ В
		|					(ВЫБРАТЬ
		|						ВТ_Заказы.Заказ
		|					ИЗ
		|						ВТ_Заказы КАК ВТ_Заказы)) КАК ES_СтатусыЗаказовСрезПоследних
		|		ПО ВТ_Заказы.Заказ = ES_СтатусыЗаказовСрезПоследних.Заказ
		|ИТОГИ
		|	МАКСИМУМ(Заказчик),
		|	МАКСИМУМ(ВхНакладная),
		|	МАКСИМУМ(НомерНакладной),
		|	МАКСИМУМ(ВидДоставки),
		|	МАКСИМУМ(ВидЗабора),
		|	МАКСИМУМ(Возврат),
		|	МАКСИМУМ(Комментарий),
		|	МАКСИМУМ(АдресДоставки),
		|	МАКСИМУМ(ОбщийВес),
		|	МАКСИМУМ(ОбщийОбъем),
		|	МАКСИМУМ(ОбщийОбъемныйВес),
		|	МАКСИМУМ(СтатусЗаказа),
		|	МАКСИМУМ(НППланЗаказ)
		|ПО
		|	Заказ";
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗаказ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗаказ.Следующий() Цикл
		
		Если Добавление Тогда
			НайденныеСтроки = ДанныеФормы.Заказы.НайтиСтроки(Новый Структура("Заказ",ВыборкаЗаказ.Заказ));
			Если НайденныеСтроки.Количество() > 0 Тогда
				Сообщить(Нстр("ru='"+ ВыборкаЗаказ.Заказ + " уже добавлен в документ "+ ДанныеФормы.Ссылка + "'"));
				Продолжить;
			КонецЕсли;
		КонецЕсли;
	
		НоваяСтрокаЗаказы = ДанныеФормы.Заказы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗаказы,ВыборкаЗаказ);
		НоваяСтрокаЗаказы.ДатаВремяДобавленияЗаказа = ТекущаяДата();
	    НоваяСтрокаЗаказы.Аббревиатура = ES_ОбщегоНазначения.ВернутьСокращениеВидовДоставки(
		ВыборкаЗаказ.ВидДоставки, ВыборкаЗаказ.ВидЗабора, ВыборкаЗаказ.Возврат);
		НоваяСтрокаЗаказы.НППлан = ВыборкаЗаказ.НППланЗаказ;
		Выборка = ВыборкаЗаказ.Выбрать();
	
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
				НоваяСтрокаГрузы = ДанныеФормы.Грузы.Добавить();
				НоваяСтрокаГрузы.НомерСтрокиВЗаказе = Выборка.НомерСтроки;
				ЗаполнитьЗначенияСвойств(НоваяСтрокаГрузы,Выборка);
			КонецЕсли;
		КонецЦикла;
					
	КонецЦикла;
	

КонецПроцедуры


&НаКлиенте
Процедура ОтборАдресДоставкиПриИзменении(Элемент)
	УстановитьОтборСтрок();
КонецПроцедуры


&НаКлиенте
Процедура ОтборПоследнийСкладПриИзменении(Элемент)
	УстановитьОтборСтрок();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВПеремещение(Команда)
	
	ОчиститьСообщения();
	
	ВыделенныеСтроки = Элементы.ТаблицаЗаказов.ВыделенныеСтроки;
	МассивЗаказов = Новый Массив;
	Для каждого Элемент из ВыделенныеСтроки Цикл
		МассивЗаказов.Добавить(Элементы.ТаблицаЗаказов.ДанныеСтроки(Элемент).Ссылка);
	КонецЦикла;
	
	
	Если МассивЗаказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Уникальность = "ФормаВыбораПеремещения";
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборДокументаПеремещение",ЭтаФорма);
	ОткрытьФорму("Документ.ES_ПеремещениеЗаказов.ФормаВыбора", , ЭтаФорма, Уникальность, , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДокументаПеремещение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) <> Тип("ДокументСсылка.ES_ПеремещениеЗаказов") Тогда
		Возврат;
	КонецЕсли;
	
	//ЭР Несторук С.И. 13.03.2017 10:03:33 {
	ЕстьПриемка = НайтиСвязныеДокументы(Результат);
	Если ЕстьПриемка Тогда
		Возврат;
	КонецЕсли;
	//}ЭР Несторук С.И.
	
	ВыделенныеСтроки = Элементы.ТаблицаЗаказов.ВыделенныеСтроки;
	МассивЗаказов = Новый Массив;
	Для каждого Элемент из ВыделенныеСтроки Цикл
		МассивЗаказов.Добавить(Элементы.ТаблицаЗаказов.ДанныеСтроки(Элемент).Ссылка);
	КонецЦикла;
	
	Если МассивЗаказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьЗаказыВПеремещение(Результат, МассивЗаказов);

КонецПроцедуры // ()

&НаСервере
Процедура ДобавитьЗаказыВПеремещение(ДокСсылка, МассивЗаказов)
	
		
	ПеремещениеОбъект = ДокСсылка.ПолучитьОбъект();
	СоздатьПеремещениеЗаказовНаСервере(ПеремещениеОбъект,МассивЗаказов,Истина);
	
	Попытка
		ПеремещениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Сообщить(НСтр("ru='Заказы успешно добавлены в документ "+ ПеремещениеОбъект.Ссылка+"'"));
	Исключение 
		ПеремещениеОбъект.Записать();
		Сообщить(НСтр("ru='Заказы добавлены в документ "+ ПеремещениеОбъект.Ссылка+". Но перепровести документ не удалось'"));
	КонецПопытки;

	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидДоставкиПриИзменении(Элемент)
	УстановитьОтборСтрок();
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиСвязныеДокументы(Ссылка)

	//ЭР Несторук С.И. 13.03.2017 9:53:15 {
	ЕстьПриемка = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_Приемка.Ссылка
	|ИЗ
	|	Документ.ES_Приемка КАК ES_Приемка
	|ГДЕ
	|	ES_Приемка.ДокументОснование = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ЕстьПриемка = Истина;
		Выборка = РезультатЗапроса.Выбрать();
		Сообщение = "На основании перемещения создан документ("+Выборка.Количество()+"): ";
		Пока Выборка.Следующий() Цикл
			 Сообщение = Сообщение + Символы.ПС+ Выборка.Ссылка;
		 КонецЦикла;
		  Сообщить(Сообщение);
	КонецЕсли;
		
	Возврат ЕстьПриемка;

	//}ЭР Несторук С.И.
	
КонецФункции // ()

&НаКлиенте
Процедура Самовывоз(Команда)
	
	ВыделеннаяСтрока = Элементы.ТаблицаЗаказов.ВыделенныеСтроки[0];
	//МассивЗаказов = Новый Массив;
	//Для каждого Элемент из ВыделенныеСтроки Цикл
	//	МассивЗаказов.Добавить(Элементы.ТаблицаЗаказов.ДанныеСтроки(Элемент).Ссылка);
	//КонецЦикла;
	Если Элементы.ТаблицаЗаказов.ДанныеСтроки(ВыделеннаяСтрока).ES_ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.Самовывоз")
		ИЛИ Элементы.ТаблицаЗаказов.ДанныеСтроки(ВыделеннаяСтрока).ES_ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.СкладСклад")Тогда
	Иначе
		Сообщить("Неправильный вид доставки заказа");
		Возврат;
	КонецЕсли;
	
	ДокСсылка = Элементы.ТаблицаЗаказов.ДанныеСтроки(ВыделеннаяСтрока).Ссылка; 
	
	Если НЕ ЗначениеЗаполнено(ДокСсылка) ТОгда
		Возврат;
	КонецЕсли;
	
	ФормаНовогоДокумента = ПолучитьФорму("Документ.ES_Самовывоз.Форма.ФормаДокумента");
	ДанныеФормы = ФормаНовогоДокумента.Объект;
	
	ЗаполнитьСамовывоз(ДанныеФормы, ДокСсылка);
	
	КопироватьДанныеФормы(ДанныеФормы, ФормаНовогоДокумента.Объект);
	ФормаНовогоДокумента.Открыть();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСамовывоз(ДанныеФормы,ДокСсылка)

	ДанныеПоЗаказу = ES_ОбщегоНазначения.ПолучитьДанныеПоЗаказам(ДокСсылка);
	
	Если НЕ ДанныеПоЗаказу.Пустой() Тогда
		
		СуммаИтого = 0;
		КассаНППоУмолчанию = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.КассаНаложенныхПлатежей);
		СчетПоУмолчанию    = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ДопКассаНП);
		
		ВыборкаЗаказДоставки = ДанныеПоЗаказу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаЗаказДоставки.Следующий() Цикл
			
			ПеремСтоимостьДоставки = 0;
			
			Если ВыборкаЗаказДоставки.Плательщик = Перечисления.ES_ТипыПлательщиков.Получатель Тогда	// плательщик = Получатель
				ПеремСтоимостьДоставки = ВыборкаЗаказДоставки.СтоимостьДоставки;
			КонецЕсли; 
			
			ДанныеФормы.СтоимостьДоставки 	= ПеремСтоимостьДоставки;
			
			ДанныеФормы.ВидДоставки 		= ВыборкаЗаказДоставки.ВидДоставки;
			ДанныеФормы.КассаНП 			= КассаНППоУмолчанию;
			ДанныеФормы.КассаСтоимость 		= КассаНППоУмолчанию;
			ДанныеФормы.Получатель 			= ВыборкаЗаказДоставки.Получатель;
			ДанныеФормы.Заказ 				= ВыборкаЗаказДоставки.ДокументДоставки;
			ДанныеФормы.Заказчик 			= ВыборкаЗаказДоставки.Заказчик;
			ДанныеФормы.Договор 			= ВыборкаЗаказДоставки.Договор;
			ДанныеФормы.СправочноЗаказчик 	= ВыборкаЗаказДоставки.СправочноЗаказчик;
			ДанныеФормы.Плательщик 			= ВыборкаЗаказДоставки.Плательщик;
			ДанныеФормы.Касса 				= КассаНППоУмолчанию;
			ДанныеФормы.Счет 				= СчетПоУмолчанию;
			//ЭР Несторук С.И. 09.02.2017 15:21:33 {
			ДанныеФормы.НомерНакладной		= ВыборкаЗаказДоставки.НомерНакладной;
			ДанныеФормы.Склад				= ПолучитьСкладПребыванияЗаказа(ДокСсылка);
			//ЭР Несторук С.И. 09.02.2017 15:21:33 }
			ДанныеФормы.НПФакт 	= ВыборкаЗаказДоставки.НППлан;
			
			ДанныеФормы.НППлан  = ВыборкаЗаказДоставки.НППлан;
			
			ДанныеФормы.НПФактНал = ВыборкаЗаказДоставки.НППлан;
			ДанныеФормы.Предоплачен = ВыборкаЗаказДоставки.Предоплачен;

			ВыборкаДетальныеЗаписи = ВыборкаЗаказДоставки.Выбрать();
					
			
			Если ВыборкаЗаказДоставки.ПредставлениеГрузов = Перечисления.ES_ПредставлениеГрузов.Места Тогда
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					// ТЧ СписокГрузов / Места
					НовыйМесто = ДанныеФормы.СписокГрузов.Добавить();
					НовыйМесто.ДокументДоставки = ВыборкаЗаказДоставки.ДокументДоставки;
					НовыйМесто.КлючСтроки 		= ВыборкаДетальныеЗаписи.МестоКлючСтроки;
					НовыйМесто.ТипГруза 		= ВыборкаДетальныеЗаписи.МестоТипГруза;
					НовыйМесто.Вес 				= ВыборкаДетальныеЗаписи.МестоВес;
					НовыйМесто.Высота 			= ВыборкаДетальныеЗаписи.МестоВысота;
					НовыйМесто.Длина 			= ВыборкаДетальныеЗаписи.МестоДлина;
					НовыйМесто.Ширина 			= ВыборкаДетальныеЗаписи.МестоШирина;
					НовыйМесто.НППлан 			= ВыборкаДетальныеЗаписи.МестоНППлан;
					НовыйМесто.НПФакт 			= ВыборкаДетальныеЗаписи.МестоНППлан;
					НовыйМесто.ОбъемныйВес 		= ВыборкаДетальныеЗаписи.МестоОбъемныйВес;
					НовыйМесто.ОписаниеГруза 	= ВыборкаДетальныеЗаписи.МестоОписаниеГруза;
					НовыйМесто.Страховка 		= ВыборкаДетальныеЗаписи.МестоСтраховка;
				КонецЦикла; 
				
			ИначеЕсли ВыборкаЗаказДоставки.ПредставлениеГрузов = Перечисления.ES_ПредставлениеГрузов.Запасы Тогда 	
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					// ТЧ Грузы / Запасы
					//ЭР Несторук С.И. 09.02.2017 17:10:45 {
					Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЗапасНоменклатура)  Тогда
						Продолжить;
					КонецЕсли;
					//ЭР Несторук С.И. 09.02.2017 17:10:45 }
					
					НовыйМесто = ДанныеФормы.Грузы.Добавить();
					НовыйМесто.ДокументДоставки 	= ВыборкаЗаказДоставки.ДокументДоставки;
					НовыйМесто.Номенклатура 		= ВыборкаДетальныеЗаписи.ЗапасНоменклатура;
					НовыйМесто.ТипНоменклатурыЗапас = ВыборкаДетальныеЗаписи.ЗапасТипНоменклатурыЗапас;
					НовыйМесто.Характеристика 		= ВыборкаДетальныеЗаписи.ЗапасХарактеристика;
					НовыйМесто.Партия 				= ВыборкаДетальныеЗаписи.ЗапасПартия;
					НовыйМесто.КоличествоПлан 		= ВыборкаДетальныеЗаписи.ЗапасКоличество;
					НовыйМесто.КоличествоФакт 		= ВыборкаДетальныеЗаписи.ЗапасКоличество;
					НовыйМесто.ЕдиницаИзмерения 	= ВыборкаДетальныеЗаписи.ЗапасЕдиницаИзмерения;
					НовыйМесто.Цена 				= ВыборкаДетальныеЗаписи.ЗапасЦена;
					НовыйМесто.ПроцентСкидкиНаценки = ВыборкаДетальныеЗаписи.ЗапасПроцентСкидкиНаценки;
					НовыйМесто.НППлан 				= ВыборкаДетальныеЗаписи.ЗапасНППлан;
					НовыйМесто.НПФакт 				= ВыборкаДетальныеЗаписи.ЗапасНППлан;
					НовыйМесто.Содержание 			= ВыборкаДетальныеЗаписи.ЗапасСодержание;
					НовыйМесто.Вес 					= ВыборкаДетальныеЗаписи.ЗапасВес;
					НовыйМесто.Объем 				= ВыборкаДетальныеЗаписи.ЗапасОбъем;
					НовыйМесто.ОбъемныйВес 			= ВыборкаДетальныеЗаписи.ЗапасОбъемныйВес;
					НовыйМесто.ОбьявленнаяСтоимость = ВыборкаДетальныеЗаписи.ЗапасОбьявленнаяСтоимость;
					НовыйМесто.Опасность 			= ВыборкаДетальныеЗаписи.ЗапасОпасность;
					НовыйМесто.Артикул				= ВыборкаДетальныеЗаписи.ЗапасАртикул;
					НовыйМесто.Штрихкод				= ВыборкаДетальныеЗаписи.ЗапасШтрихкод;

				КонецЦикла; 
				
			КонецЕсли; 
			
			СуммаИтого = СуммаИтого + ДанныеФормы.СтоимостьДоставки + ДанныеФормы.НПФакт;

		КонецЦикла;
		
		ДанныеФормы.СуммаДокумента = СуммаИтого;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере	
Функция ПолучитьСкладПребыванияЗаказа(Заказ)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ES_ЗаказыНаСкладеОстатки.Склад, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК Склад
	|ИЗ
	|	РегистрНакопления.ES_ЗаказыНаСкладе.Остатки(&МоментВремени, Заказ = &Заказ) КАК ES_ЗаказыНаСкладеОстатки";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("МоментВремени", ТекущаяДата());

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Выборка.Следующий();
		
		Возврат Выборка.Склад;
	Иначе 
		Возврат Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	КонецЕсли;
	
	

КонецФункции // ПолучитьСкладПребыванияЗаказа()

&НаКлиенте
Процедура ОтборТекущийСкладПриИзменении(Элемент)
	УстановитьОтборСтрок();
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСтикер(Команда)
	ВыделенныеСтроки = Элементы.ТаблицаЗаказов.ВыделенныеСтроки;
	МассивЗаказов = Новый Массив;
	Для каждого Элемент из ВыделенныеСтроки Цикл
		МассивЗаказов.Добавить(Элементы.ТаблицаЗаказов.ДанныеСтроки(Элемент).Ссылка);
	КонецЦикла;	
	
	Если МассивЗаказов.Количество() > 0 Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Документ.ЗаказПокупателя",
		"ПФ_MXL_ES_Стикер",
		МассивЗаказов,
		Неопределено,
		Неопределено
		);
		
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПечатьНакладнаяB2C(Команда)
	ВыделенныеСтроки = Элементы.ТаблицаЗаказов.ВыделенныеСтроки;
	МассивЗаказов = Новый Массив;
	Для каждого Элемент из ВыделенныеСтроки Цикл
		МассивЗаказов.Добавить(Элементы.ТаблицаЗаказов.ДанныеСтроки(Элемент).Ссылка);
	КонецЦикла;	
	
	Если МассивЗаказов.Количество() > 0 Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Документ.ЗаказПокупателя",
		"ПФ_MXL_ES_НакладнаяB2C",
		МассивЗаказов,
		Неопределено,
		Неопределено
		);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьНакладнаяB2B(Команда)
	ВыделенныеСтроки = Элементы.ТаблицаЗаказов.ВыделенныеСтроки;
	МассивЗаказов = Новый Массив;
	Для каждого Элемент из ВыделенныеСтроки Цикл
		МассивЗаказов.Добавить(Элементы.ТаблицаЗаказов.ДанныеСтроки(Элемент).Ссылка);
	КонецЦикла;	
	
	Если МассивЗаказов.Количество() > 0 Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Документ.ЗаказПокупателя",
		"ПФ_MXL_ES_НакладнаяB2B",
		МассивЗаказов,
		Неопределено,
		Неопределено
		);
		
	КонецЕсли;
КонецПроцедуры



&НаКлиенте
Процедура ПечатьНаклейкаЗаказа(Команда)
	
	ВыделенныеСтроки = Элементы.ТаблицаЗаказов.ВыделенныеСтроки;
	МассивЗаказов = Новый Массив;
	Для каждого Элемент из ВыделенныеСтроки Цикл
		МассивЗаказов.Добавить(Элементы.ТаблицаЗаказов.ДанныеСтроки(Элемент).Ссылка);
	КонецЦикла;	
	
	Если МассивЗаказов.Количество() > 0 Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Документ.ЗаказПокупателя",
		"ПФ_MXL_ES_НаклейкаЗаказа",
		МассивЗаказов,
		Неопределено,
		Неопределено
		);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьНакладнаяНаДоставку(Команда)
	
	ВыделенныеСтроки = Элементы.ТаблицаЗаказов.ВыделенныеСтроки;
	МассивЗаказов = Новый Массив;
	Для каждого Элемент из ВыделенныеСтроки Цикл
		МассивЗаказов.Добавить(Элементы.ТаблицаЗаказов.ДанныеСтроки(Элемент).Ссылка);
	КонецЦикла;	
	
	Если МассивЗаказов.Количество() > 0 Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Документ.ЗаказПокупателя",
		"ПФ_MXL_ES_НакладнаяНаДоставку",
		МассивЗаказов,
		Неопределено,
		Неопределено
		);
		
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОтборПолучательПриИзменении(Элемент)
	
	УстановитьОтборСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументПоставка(Команда)
	
		ВыделенныеСтроки = Элементы.ТаблицаЗаказов.ВыделенныеСтроки;
	МассивЗаказов = Новый Массив;
	Для каждого Элемент из ВыделенныеСтроки Цикл
		МассивЗаказов.Добавить(Элементы.ТаблицаЗаказов.ДанныеСтроки(Элемент).Ссылка);
	КонецЦикла;
	
	Если МассивЗаказов.Количество() = 0 Тогда
		Сообщить("Не выделены заказы на доставку");
		Возврат;
	КонецЕсли; 

	
	
	ФормаНовогоДокумента = ПолучитьФорму("Документ.ES_Поставка.Форма.ФормаДокумента");
	ДанныеФормы = ФормаНовогоДокумента.Объект;
	Отказать = Ложь;
	ЗаполнитьТЧЗаказыНаСервере(ДанныеФормы, МассивЗаказов, Отказать);
	
	Если НЕ Отказать Тогда
		КопироватьДанныеФормы(ДанныеФормы, ФормаНовогоДокумента.Объект);
		ФормаНовогоДокумента.Открыть();
	КонецЕсли;

	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧЗаказыНаСервере(ДанныеФормы,МассивЗаказов, Отказать)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ES_ДанныеПоЗаказамСрезПоследних.НомерНакладной,
		|	ES_ДанныеПоЗаказамСрезПоследних.НомерДокумента,
		|	ES_СтатусыЗаказовСрезПоследних.Заказ,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВхНакладная,
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказчик,
		|	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа,
		|	ES_СведенияОЗаказахСрезПоследних.Поставка,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВидДоставки,
		|	ES_ДанныеПоЗаказамСрезПоследних.АдресДоставки,
		|	ES_ДанныеПоЗаказамСрезПоследних.Манифест,
		|	ES_ДанныеПоЗаказамСрезПоследних.Комментарий
		|ИЗ
		|	РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(, Заказ В (&МассивЗаказов)) КАК ES_СтатусыЗаказовСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(, Заказ В (&МассивЗаказов)) КАК ES_ДанныеПоЗаказамСрезПоследних
		|		ПО ES_СтатусыЗаказовСрезПоследних.Заказ = ES_ДанныеПоЗаказамСрезПоследних.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СведенияОЗаказах.СрезПоследних(, Заказ В (&МассивЗаказов)) КАК ES_СведенияОЗаказахСрезПоследних
		|		ПО ES_СтатусыЗаказовСрезПоследних.Заказ = ES_СведенияОЗаказахСрезПоследних.Заказ";
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаЗаказ = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаЗаказ.Следующий() Цикл
							
			Если ВыборкаЗаказ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Подготовлен 
				ИЛИ ВыборкаЗаказ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Назначен
				Тогда
				
				Если ЗначениеЗаполнено(ВыборкаЗаказ.Поставка) Тогда
					Сообщить("Невозможно добавить "+ ВыборкаЗаказ.Заказ + " он уже пристутствует в документе" + ВыборкаЗаказ.Поставка);
					Отказать = Истина;
					Продолжить;
				КонецЕсли;
				
				НовСтрока = ДанныеФормы.Заказы.Добавить();
				НовСтрока.Заказ 		= ВыборкаЗаказ.Заказ;
				НовСтрока.Накладная		= ВыборкаЗаказ.НомерНакладной;
				НовСтрока.ВхНакладная 	= ВыборкаЗаказ.ВхНакладная;
				НовСтрока.Заказчик 		= ВыборкаЗаказ.Заказчик;
				//НовСтрока.ВидДоставки	= ВыборкаЗаказ.ВидДоставки;
				//НовСтрока.АдресДоставки = ВыборкаЗаказ.АдресДоставки;
				//НовСтрока.Реестр		= ВыборкаЗаказ.Манифест;
				//НовСтрока.Комментарий	= ВыборкаЗаказ.Комментарий;
				//НовСтрока.ДатаВремяДобавленияЗаказа	= ТекущаяДата();
				//Выборка = ВыборкаЗаказ.Выбрать();
				//Пока Выборка.Следующий() Цикл
				//	Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
				//	Продолжить;	
				//	КонецЕсли;
				//	
				//	СтрокаГрузы = ДанныеФормы.Грузы.Добавить();
				//	ЗаполнитьЗначенияСвойств(СтрокаГрузы, Выборка);
				//	СтрокаГрузы.Заказ = ВыборкаЗаказ.Заказ;
				//КонецЦикла;
							
			Иначе
				Сообщить("Невозможно создать документ Поставки по заказу со статусом " + ВыборкаЗаказ.СтатусЗаказа);
				Отказать = Истина;
			КонецЕсли;
						
		КонецЦикла;
		
		
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ДоУточненияПриИзменении(Элемент)
	 //ES_Савченко К.Р. 26.09.2017+
	УстановитьОтборСтрок ();
	//ES_Савченко К.Р. 26.09.2017-
КонецПроцедуры

&НаКлиенте
Процедура ПроблемаПриИзменении(Элемент)
	//ES_Савченко К.Р. 26.09.2017+
	УстановитьОтборСтрок ();
	//ES_Савченко К.Р. 26.09.2017-
КонецПроцедуры

//ES_Савченко К.Р. 04.10.2017+
&НаКлиенте
Процедура СортироватьСписокПоВозрастанию(Команда)
	ПараметрыСортировки = " Возр";
	СортироватьЗаказы(ПараметрыСортировки);

КонецПроцедуры

&НаКлиенте
Процедура СортироватьСписокПоУбыванию(Команда)
	ПараметрыСортировки = " Убыв";
	СортироватьЗаказы(ПараметрыСортировки);

КонецПроцедуры

&НаСервере
Процедура СортироватьЗаказы(ПараметрыСортировки)
	
	СтрокаПоиска = СтрЗаменить(Элементы.ТаблицаЗаказов.ТекущийЭлемент.Имя,"ТаблицаЗаказов", "");
	
	Если СтрокаПоиска = "ТаблицаЗаказов" Тогда
		СтрокаПоиска = "ДокументДоставки";
	ИначеЕсли СтрокаПоиска = "СтатусЗаказа" Тогда
		СтрокаПоиска = "СтатусДокумента";
	КонецЕсли;	
	ТаблицаЗаказов.Сортировать(""+СтрокаПоиска+ ПараметрыСортировки);
	
	//Элементы.ТаблицаЗаказов.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ES_СтруктураПодчиненостиНаСервере()
	
	ВыделенныеСтроки = Элементы.ТаблицаЗаказов.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда Возврат; КонецЕсли;
	ПараметрКоманды = Элементы.ТаблицаЗаказов.ДанныеСтроки(ВыделенныеСтроки[0]).Ссылка;
	ПараметрыВыполненияКоманды = Новый Структура;
	ПараметрыВыполненияКоманды.Вставить("Источник",ЭтаФорма);
	ПараметрыВыполненияКоманды.Вставить("Окно",Неопределено);
	ПараметрыВыполненияКоманды.Вставить("НавигационнаяСсылка","e1cib/command/ОбщаяКоманда.СтруктураПодчиненности");
	Если ЗначениеЗаполнено(ПараметрКоманды) Тогда
		
		ОткрытьФорму("ОбщаяФорма.ФормаСтруктурыПодчиненности",Новый Структура("ДокументСсылка", ПараметрКоманды),
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Источник.КлючУникальности,
		ПараметрыВыполненияКоманды.Окно);
		
		СтатистикаИспользованияФормКлиент.ПроверитьЗаписатьСтатистикуКоманды(
		"СтруктураПодчиненности",
		ПараметрыВыполненияКоманды.Источник
		);
		
	КонецЕсли;
    
	
КонецПроцедуры

&НаКлиенте
Процедура ES_СтруктураПодчинености(Команда)
	ES_СтруктураПодчиненостиНаСервере();
КонецПроцедуры
//ES_Савченко К.Р. 04.10.2017-

&НаКлиенте
Процедура ES_НайтиЗаказПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ОбработкаШтрихкодаЗавершение", ЭтаФорма),ТекШтрихкод,"Введите штрихкод");
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаШтрихкодаЗавершение(Результат, ДополинтельныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	мСсылка = НайтиЗаказПоШтрихкоду(Результат);
	
	Если НЕ ЗначениеЗаполнено(мСсылка) Тогда
		Сообщить("По штрихкоду "+ Результат + " ничего не найдено!");
	Иначе
		П = Новый Структура("Ключ", мСсылка);
		
		ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ES_ФормаЗаказаНаДоставку", П);
	КонецЕсли;
 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиЗаказПоШтрихкоду(Штрихкод)
	
	мЗаказ = Документы.ЗаказПокупателя.ПустаяСсылка();	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаказПокупателя.Ссылка
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.ES_НомерНакладной = &Штрихкод
		|	И НЕ ЗаказПокупателя.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказПокупателя.Дата";
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		мЗаказ = Выборка.Ссылка;
		
	КонецЦикла;

	Возврат мЗаказ;
	
КонецФункции

&НаКлиенте
Процедура ОтборОтветственныйПриИзменении(Элемент)
	УстановитьОтборСтрок();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//ЭР Несторук С.И. 10.04.2019 9:32:27 {
	ES_БиллингКлиент.ПроверитьДоступностьСервисаDelans(Отказ);
	//}ЭР Несторук С.И.
КонецПроцедуры


&НаКлиенте
Процедура ОтборТелефонОтправителяПриИзменении(Элемент)
	
	УстановитьОтборСтрок();
	
КонецПроцедуры


&НаКлиенте
Процедура ОтборТелефонЗаказчикаПриИзменении(Элемент)
	УстановитьОтборСтрок();

КонецПроцедуры


&НаКлиенте
Процедура ОтборТелефонПолучателяПриИзменении(Элемент)
	УстановитьОтборСтрок();

КонецПроцедуры

//Efsol Рыбалка Н.А. 04.06.2019+
&НаКлиенте
Процедура ОтправитьВТелеграм(Команда)
	ПолучитьОтветОтТелеграм();
КонецПроцедуры

&НаСервере
Процедура ПолучитьОтветОтТелеграм()
	СообщитьТекст = "Заказы на доставку отправлены";
	ES_ТелеграмAPI.ОтправитьВТелеграм(СообщитьТекст, ОтправитьВТелеграмНаСервере());	
КонецПроцедуры

&НаСервере
Функция ОтправитьВТелеграмНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ES_ЗаказыНаСкладеОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	ЗаказПокупателя.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ES_ЗаказыНаСкладе.Остатки(, Заказ В (&Заказ)) КАК ES_ЗаказыНаСкладеОстатки
	|		ПО ЗаказПокупателя.Ссылка = ES_ЗаказыНаСкладеОстатки.Заказ
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&Заказ)";
	
	МассивВыделенныхЗаказов = Новый Массив;
	Для каждого СтрокаСписка из Элементы.ТаблицаЗаказов.ВыделенныеСтроки Цикл
		МассивВыделенныхЗаказов.Добавить(ТаблицаЗаказов.НайтиПоИдентификатору(СтрокаСписка).Ссылка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Заказ", МассивВыделенныхЗаказов);
	ВыборкаВыделенныхЗаказов = Запрос.Выполнить().Выбрать();
	
	ПеремДляВыделенныхЗаказов = Истина;
	Пока ВыборкаВыделенныхЗаказов.Следующий() Цикл
		Если ВыборкаВыделенныхЗаказов.Ссылка.ES_ВидДоставки = Перечисления.ES_ВидыДоставки.ДвериДвери
			И ВыборкаВыделенныхЗаказов.Ссылка.ES_ВидЗабора = Перечисления.ES_ВидыЗабора.Упрощенный  Тогда
			//
		Иначе
			Если ВыборкаВыделенныхЗаказов.КоличествоОстаток = 0 Тогда
				Сообщить("Заказ " + ВыборкаВыделенныхЗаказов.Ссылка + "не принят на складе");
				ПеремДляВыделенныхЗаказов = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПеремДляВыделенныхЗаказов = Ложь Тогда
		Возврат неопределено;
	КонецЕсли;
	
	
	//РеквизитФормыСбор = Es_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.Es_ВидыСтартовыхНастроек.ШаблонСообщенияДляЗаказа);
	//Если Не ЗначениеЗаполнено(РеквизитФормыСбор) Тогда
	//	Сообщить("Заполните в стартовых настройках значения для шаблонов сообщений");
	//	Возврат неопределено;
	//Иначе	
	
	МасивСообщений = Новый Массив;
	
	//ОбластьДанных = ПараметрыСеанса.ОбластьДанныхЗначение;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	ШаблоныСообщений.ТекстШаблонаSMS КАК ТекстШаблонаSMS
	//|ИЗ
	//|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
	//|ГДЕ
	//|	ШаблоныСообщений.Наименование = &Наименование";
	//
	//Запрос.УстановитьПараметр("Наименование", РеквизитФормыСбор);
	//
	//ВыборкаШаблСоПланов = Запрос.Выполнить().Выбрать();
	//
	//Пока ВыборкаШаблСоПланов.Следующий() Цикл
	////СтруктураДляШабл = Новый Структура;
	////СтруктураДляШабл.Вставить("ШаблонДляСообщения", ВыборкаШаблСоПланов.ТекстШаблонаSMS);
	//ТексШаблонаДляПланаДост = ВыборкаШаблСоПланов.ТекстШаблонаSMS;
	//КонецЦикла;
	
	//ТексШаблонаДляПланаДост = РеквизитФормыСбор.ТекстШаблонаSMS;

	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ЗаказПокупателя.Номер КАК Номер,
	|	ЗаказПокупателя.Дата КАК Дата,
	|	ЗаказПокупателя.Вес КАК Вес,
	|	ЗаказПокупателя.ES_АдресДоставки КАК ES_АдресДоставки,
	|	ЗаказПокупателя.ES_ДатаДоставки КАК ES_ДатаДоставки,
	|	ЗаказПокупателя.ВремяДоставкиПо КАК ВремяДоставкиПо,
	|	ЗаказПокупателя.ВремяДоставкиС КАК ВремяДоставкиС,
	|	ЗаказПокупателя.КонтактноеЛицо КАК КонтактноеЛицо,
	|	ЗаказПокупателя.ES_НППлан КАК ES_НППлан,
	|	ЗаказПокупателя.ES_НомерНакладной КАК ES_НомерНакладной,
	|	ЗаказПокупателя.ES_ПолучательКонтактноеЛицо КАК ES_ПолучательКонтактноеЛицо,
	|	ЗаказПокупателя.ES_Объем КАК ES_Объем,
	|	ЗаказПокупателя.ES_ОбщийОбъемныйВес КАК ES_ОбщийОбъемныйВес,
	|	ЗаказПокупателя.ES_ОбщийВес КАК ES_ОбщийВес,
	|	ЗаказПокупателя.ES_ВхНакладная КАК ES_ВхНакладная,
	|	ЗаказПокупателя.ES_СрочностьДоставки КАК ES_СрочностьДоставки,
	|	ЗаказПокупателя.Контрагент КАК Контрагент,
	|	ЗаказПокупателя.СуммаДокумента КАК СуммаДокумента,
	|	ЗаказПокупателя.ES_ЗаказчикКонтактноеЛицо КАК ES_ЗаказчикКонтактноеЛицо,
	|	ЗаказПокупателя.ES_Получатель КАК ES_Получатель,
	|	ЗаказПокупателя.ВидРабот КАК ВидРабот,
	|	ЗаказПокупателя.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ЗаказПокупателя.ES_Курьер КАК ES_Курьер,
	|	ЗаказПокупателя.Ответственный КАК Ответственный,
	|	ЗаказПокупателя.ПричинаОтмены КАК ПричинаОтмены,
	|	ЗаказПокупателя.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЗаказПокупателя.СписокНоменклатуры КАК СписокНоменклатуры,
	|	ЗаказПокупателя.СписокРесурсов КАК СписокРесурсов,
	|	ЗаказПокупателя.Старт КАК Старт,
	|	ЗаказПокупателя.Финиш КАК Финиш
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя";
	ВыборкаОрганизация = Запрос.Выполнить().Выбрать();
	Префикс = "ЗаказПокупателя.";
	
	Пока ВыборкаОрганизация.Следующий() Цикл
		
		Для каждого СтрокаСписка из Элементы.ТаблицаЗаказов.ВыделенныеСтроки Цикл
			Если  ТаблицаЗаказов.НайтиПоИдентификатору(СтрокаСписка).Номер = ВыборкаОрганизация.Номер Тогда
				
				Если ТаблицаЗаказов.НайтиПоИдентификатору(СтрокаСписка).ES_СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Подготовлен Тогда
					
					Если ТаблицаЗаказов.НайтиПоИдентификатору(СтрокаСписка).ES_ВидДоставки = Перечисления.ES_ВидыДоставки.ДвериДвери Тогда
						//и ТаблицаЗаказов.НайтиПоИдентификатору(СтрокаСписка).Ссылка.ES_ВидЗабора = Перечисления.ES_ВидыЗабора.Упрощенный Тогда
						РеквизитФормыСбор = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ШаблонСообщенияДляВидаЗаказа);
					Иначе
						РеквизитФормыСбор = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ШаблонСообщенияДляЗаказа);
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(РеквизитФормыСбор) Тогда
						Сообщить("Заполните в стартовых настройках значения для шаблонов сообщений");
						Возврат неопределено;
					Иначе
						ТексШаблонаДляПланаДост = РеквизитФормыСбор.ТекстШаблонаSMS;
					КонецЕсли;
					
					СтруктураДляБота = Новый Структура;
					////////////////////////////////////////
					СтруктураДляБота.Вставить("Номер", ВыборкаОрганизация.Номер);
					СтруктураДляБота.Вставить("Дата", Формат (ВыборкаОрганизация.Дата, "ДФ=dd.MM.yyyy"));
					///////////////////////////////////////////
					
					СтруктураДляБота.Вставить("ES_АдресДоставки", ВыборкаОрганизация.ES_АдресДоставки);
					СтруктураДляБота.Вставить("ВариантЗавершения", "Нет");
					СтруктураДляБота.Вставить("ES_ОбщийВес", ВыборкаОрганизация.ES_ОбщийВес);
					СтруктураДляБота.Вставить("ВидРабот", ВыборкаОрганизация.ВидРабот);
					СтруктураДляБота.Вставить("ES_ВремяДоставкиПо", Формат(ВыборкаОрганизация.ВремяДоставкиПо, "ДЛФ=T"));
					СтруктураДляБота.Вставить("ES_ВремяДоставкиС", Формат(ВыборкаОрганизация.ВремяДоставкиС, "ДЛФ=T"));
					СтруктураДляБота.Вставить("ES_ВхНакладная", ВыборкаОрганизация.ES_ВхНакладная);
					СтруктураДляБота.Вставить("ES_ДатаДоставки", Формат(ВыборкаОрганизация.ES_ДатаДоставки, "ДФ=dd.MM.yyyy"));
					СтруктураДляБота.Вставить("ДатаОтгрузки", Формат(ВыборкаОрганизация.ДатаОтгрузки, "ДФ=dd.MM.yyyy")); 
					СтруктураДляБота.Вставить("ES_ЗаказчикКонтактноеЛицо", ВыборкаОрганизация.ES_ЗаказчикКонтактноеЛицо);
					СтруктураДляБота.Вставить("ES_ПолучательКонтактноеЛицо", ВыборкаОрганизация.ES_ПолучательКонтактноеЛицо);
					СтруктураДляБота.Вставить("КонтактноеЛицоДолжность", " ");
					СтруктураДляБота.Вставить("КонтактноеЛицоНаименование", ВыборкаОрганизация.ES_ПолучательКонтактноеЛицо);
					СтруктураДляБота.Вставить("ES_Курьер", ВыборкаОрганизация.ES_Курьер);
					СтруктураДляБота.Вставить("ES_НомерНакладной", ВыборкаОрганизация.ES_НомерНакладной);
					СтруктураДляБота.Вставить("ES_НППлан", ВыборкаОрганизация.ES_НППлан);
					СтруктураДляБота.Вставить("ES_Объем", ВыборкаОрганизация.ES_Объем);
					СтруктураДляБота.Вставить("ES_ОбщийОбъемныйВес", ВыборкаОрганизация.ES_ОбщийОбъемныйВес);
					СтруктураДляБота.Вставить("Контрагент", ВыборкаОрганизация.Контрагент);
					СтруктураДляБота.Вставить("ES_Получатель", ВыборкаОрганизация.ES_Получатель);
					СтруктураДляБота.Вставить("ES_СрочностьДоставки", ВыборкаОрганизация.ES_СрочностьДоставки);
					СтруктураДляБота.Вставить("ВнешняяСсылкаНаОбъект", ВыборкаОрганизация.Ссылка);
					СтруктураДляБота.Вставить("Обращение", "Уважаемый(ая)");
					СтруктураДляБота.Вставить("Ответственный", ВыборкаОрганизация.Ответственный);
					СтруктураДляБота.Вставить("Покупатель", " ");
					СтруктураДляБота.Вставить("ПричинаОтмены", ВыборкаОрганизация.ПричинаОтмены);
					СтруктураДляБота.Вставить("СостояниеЗаказа", ВыборкаОрганизация.СостояниеЗаказа);
					СтруктураДляБота.Вставить("СписокНоменклатуры", ВыборкаОрганизация.СписокНоменклатуры);
					СтруктураДляБота.Вставить("СписокРесурсов", ВыборкаОрганизация.СписокРесурсов);
					СтруктураДляБота.Вставить("Старт", ВыборкаОрганизация.Старт);
					СтруктураДляБота.Вставить("СтатусЗаказа", ТаблицаЗаказов.НайтиПоИдентификатору(СтрокаСписка).ES_СтатусЗаказа);
					СтруктураДляБота.Вставить("СуммаДокумента", ВыборкаОрганизация.СуммаДокумента);
					СтруктураДляБота.Вставить("Финиш", Выборкаорганизация.Финиш);
					
					
					
					
					//ВыборкаЗаказ = ВыборкаОрганизация.Выбрать();
					МассивРеквизитов = Новый Массив;
					МассивРеквизитов.Добавить(ВыборкаОрганизация);
					
					//функция Формирует текст сообщения
					Сообщение = Строка(ВыборкаОрганизация.Ссылка.УникальныйИдентификатор()) + Символы.ПС +Символы.ПС + ШаблоныСообщенийСлужебный.ВставитьПараметрыВСтрокуСогласноТаблицеПараметров(ТексШаблонаДляПланаДост, СтруктураДляБота, Префикс);
					//Создание структуры для масивов с сообщениями
					МасивСообщений.Добавить(Сообщение);
				Иначе
					Сообщить("Статус вашего заказа " + Строка(ТаблицаЗаказов.НайтиПоИдентификатору(СтрокаСписка).ES_СтатусЗаказа));
				КонецЕсли;

				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;
	//КонецЕсли;
		
		Возврат МасивСообщений;
КонецФункции

//Efsol Рыбалка Н.А.-

