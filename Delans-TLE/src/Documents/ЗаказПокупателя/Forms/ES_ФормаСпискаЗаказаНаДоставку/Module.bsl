
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Обрабатывает событие активизации строки списка документов.
//
&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСписка()
	
	ПараметрыИнфПанели = Новый Структура("РеквизитКИ, Контрагент, КонтактноеЛицо", "Контрагент");
	УправлениеНебольшойФирмойКлиент.ИнформационнаяПанельОбработатьАктивизациюСтрокиСписка(ЭтаФорма, ПараметрыИнфПанели);
	
КонецПроцедуры // ОбработатьАктивизациюСтрокиСписка()

// Процедура устанавливает отбор в таблице списка для секции Текущие дела.
//
&НаСервере
Процедура УстановитьОтборТекущиеДела()
	//
	//Если НЕ Параметры.Свойство("ТекущиеДела") Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ТекстЗаголовкаФормы = "";
	//Если Параметры.Свойство("ПросроченоВыполнение") Тогда
	//	ТекстЗаголовкаФормы = "Заказы на доставку: просрочено выполнение";
	//	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ПросроченоВыполнение", Истина);
	//КонецЕсли;
	//
	//Если Параметры.Свойство("ПросроченаОплата") Тогда
	//	ТекстЗаголовкаФормы = "Заказы на доставку: просрочена оплата";
	//	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ПросроченаОплата", Истина);
	//КонецЕсли;
	//
	//Если Параметры.Свойство("НаСегодня") Тогда
	//	ТекстЗаголовкаФормы = "Заказы на доставку: на сегодня";
	//	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "НаСегодня",Истина);
	//КонецЕсли;
	//
	//Если Параметры.Свойство("Новые") Тогда
	//	ИспользоватьСостояния = Ложь;
	//	//Константы.ИспользоватьСостоянияЗаказовПокупателей.Получить();
	//	ТекстЗаголовкаФормы = "Заказы на доставку: новые";
	//	Если ИспользоватьСостояния Тогда
	//		//УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "СтатусСостоянияЗаказа", ПредопределенноеЗначение("Перечисление.СтатусыЗаказов.Открыт"));
	//	Иначе
	//		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "СтатусЗаказа", "В работе");
	//		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Проведен", Ложь);
	//	КонецЕсли;
	//	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Закрыт", Ложь);
	//	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ПометкаУдаления", Ложь);
	//КонецЕсли;
	//
	//Если Параметры.Свойство("ВРаботе") Тогда
	//	ТекстЗаголовкаФормы = "Заказы на доставку: в работе";
	//	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ЗаказВРаботе", Истина);
	//КонецЕсли;
	//
	//Если Параметры.Свойство("Ответственный") Тогда
	//	Если Параметры.Ответственный.Список.Количество() = 1 Тогда
	//		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Ответственный", Параметры.Ответственный.Список[0].Значение);
	//	Иначе
	//		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Ответственный", Параметры.Ответственный.Список,,ВидСравненияКомпоновкиДанных.ВСписке);
	//	КонецЕсли;
	//	ТекстЗаголовкаФормы = ТекстЗаголовкаФормы + ", ответственный " + Параметры.Ответственный.ФИО;
	//КонецЕсли;
	//
	//Если НЕ ПустаяСтрока(ТекстЗаголовкаФормы) Тогда
	//	Заголовок = ТекстЗаголовкаФормы;
	//КонецЕсли;
	//
	//Элементы.ОтборОтветственный.Видимость = Ложь;
	//Элементы.ОтборСостояние.Видимость = Ложь;
	//Элементы.ОтборСтатус.Видимость = Ложь;
	//Элементы.ОтборАктуальность.Видимость = Ложь;
	
КонецПроцедуры // УстановитьОтборТекущиеДела()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтаФорма, Элементы.ИнформационныеСсылки);
	
	Элементы.ОтборАктуальность.СписокВыбора.Добавить("Все", "Все");
	Элементы.ОтборАктуальность.СписокВыбора.Добавить("Кроме закрытых", "Кроме закрытых");
	Элементы.ОтборАктуальность.СписокВыбора.Добавить("Закрытые", "Закрытые");
	
	Элементы.ОтборСтатус.СписокВыбора.Добавить("В работе", "В работе");
	Элементы.ОтборСтатус.СписокВыбора.Добавить("Выполнен", "Выполнен");
	Элементы.ОтборСтатус.СписокВыбора.Добавить("Отменен", "Отменен");
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку"));
	СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу"));
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список,"ВидОперации",ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ES_ЗаказНаДоставку"));
	
	//ИспользоватьСостояния = Константы.ИспользоватьСостоянияЗаказовПокупателей.Получить();
	
	Список.Параметры.УстановитьЗначениеПараметра("АкутальнаяДатаСеанса", НачалоДня(ТекущаяДатаСеанса()));
	
	//ЕФСОЛ Несторук 18.10.2016 +  закомментированно и добавлено
	//EFSOL_oks_kry_20.04.2015 10:26:54_BEGIN
	//ES_ОтборСтарт = НачалоДня(ТекущаяДата() - 259200);
	//ES_ОтборФиниш = КонецДня(ТекущаяДата() + 259200);
	//	
	//Список.Параметры.УстановитьЗначениеПараметра("ES_ДатаДоставкиСтарт", ?(ES_ОтборСтарт = '00010101', Неопределено, ES_ОтборСтарт));
	//Список.Параметры.УстановитьЗначениеПараметра("ES_ДатаДоставкиФиниш", ?(ES_ОтборФиниш = '00010101', Неопределено, ES_ОтборФиниш));
	//EFSOL_oks_kry_20.04.2015 10:26:54_END
	ES_ОтборПериод.ДатаНачала 		= НачалоДня(ТекущаяДата() - 604800);
	ES_ОтборПериод.ДатаОкончания	= КонецДня(ТекущаяДата());
	Список.Параметры.УстановитьЗначениеПараметра("ES_ДатаДоставкиСтарт", ?(ES_ОтборПериод.ДатаНачала = '00010101', Неопределено, ES_ОтборПериод.ДатаНачала));
	Список.Параметры.УстановитьЗначениеПараметра("ES_ДатаДоставкиФиниш", ?(ES_ОтборПериод.ДатаОкончания = '00010101', Неопределено, ES_ОтборПериод.ДатаОкончания));
	//ЕФСОЛ Несторук 18.10.2016 -
	
	// Меню функций - Маркетниг и продажи товаров.
	//Если Параметры.Свойство("МенюФункцийЭтапЗаказа") Тогда
	//	
	//	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список,"ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу"));
	//	
	//	Если Параметры.Свойство("Ответственный") Тогда
	//		ОтборОтветственный = Параметры.Ответственный;
	//	КонецЕсли;
	//	
	//	Если Параметры.МенюФункцийЭтапЗаказа = "Новый" Тогда
	//		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " (новые)";
	//		Если ИспользоватьСостояния Тогда
	//			УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "СтатусСостоянияЗаказа", ПредопределенноеЗначение("Перечисление.СтатусыЗаказов.Открыт"), Истина, ВидСравненияКомпоновкиДанных.Равно);
	//			УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Закрыт", Ложь);
	//		Иначе
	//			УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "СтатусЗаказа", "В работе");
	//			УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Проведен", Ложь);
	//		КонецЕсли;
	//		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ПометкаУдаления", Ложь);
	//		Элементы.НомерКартинкиОтгрузки.Видимость = Ложь;
	//		Элементы.НомерКартинкиОплаты.Видимость = Ложь;
	//	ИначеЕсли Параметры.МенюФункцийЭтапЗаказа = "Неотгруженные" Тогда
	//		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " (к отгрузке)";
	//		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "КОтгрузке", 0, Истина, ВидСравненияКомпоновкиДанных.Больше);
	//		Если ИспользоватьСостояния Тогда
	//			УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Закрыт", Ложь);
	//		Иначе
	//			УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "СтатусЗаказа", "В работе");
	//		КонецЕсли;
	//	ИначеЕсли Параметры.МенюФункцийЭтапЗаказа = "Неоплаченные" Тогда
	//		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " (к оплате)";
	//		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "КОплате", 0, Истина, ВидСравненияКомпоновкиДанных.Больше);
	//		Если ИспользоватьСостояния Тогда
	//			УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Закрыт", Ложь);
	//		Иначе
	//			УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "СтатусЗаказа", "В работе");
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	Элементы.ОтборАктуальность.Видимость = Ложь;
	//	Элементы.Закрыт.Видимость = Ложь;
	//	
	//	Элементы.СтатусЗаказа.Видимость = Ложь;
	//	Элементы.ОтборСтатус.Видимость = Ложь;
	//	
	//	Если НЕ ИспользоватьСостояния Тогда
	//		Элементы.ОтборСостояние.Видимость = Ложь;
	//		Элементы.СостояниеЗаказа.Видимость = Ложь;
	//	КонецЕсли;
	//	
	//// Использовать состояния заказов покупателей.
	//ИначеЕсли ИспользоватьСостояния Тогда
	//	
	//	Элементы.СтатусЗаказа.Видимость = Ложь;
	//	Элементы.ОтборСтатус.Видимость = Ложь;
	//	
	//Иначе
	//	
	//	Элементы.ОтборСостояние.Видимость = Ложь;
	//	Элементы.ОтборАктуальность.Видимость = Ложь;
	//	Элементы.СостояниеЗаказа.Видимость = Ложь;
	//	Элементы.Закрыт.Видимость = Ложь;
	//	
	//КонецЕсли;
	
	УстановитьОтборТекущиеДела();
	
	// Установим формат для текущей даты: ДФ=Ч:мм
	УправлениеНебольшойФирмойСервер.УстановитьОформлениеКолонкиДата(Список);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаВажныеКомандыЗаказПокупателя);
	// Конец СтандартныеПодсистемы.Печать
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события формы "ПриЗагрузкеДанныхИзНастроекНаСервере".
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Параметры.Свойство("ТекущиеДела") Тогда
		
		Настройки.Удалить("ОтборОрганизация");
		Настройки.Удалить("ОтборСостояние");
		Настройки.Удалить("ОтборСтатус");
		Настройки.Удалить("ОтборКонтрагент");
		Настройки.Удалить("ОтборАктуальность");
		Настройки.Удалить("ОтборОтветственный");
		
	Иначе
		
		ОтборОрганизация = Настройки.Получить("ОтборОрганизация");
		ОтборСостояние = Настройки.Получить("ОтборСостояние");
		ОтборСтатус = Настройки.Получить("ОтборСтатус");
		ОтборКонтрагент = Настройки.Получить("ОтборКонтрагент");
		ОтборАктуальность = Настройки.Получить("ОтборАктуальность");
		
		Если Не ЗначениеЗаполнено(ОтборАктуальность) Тогда
			ОтборАктуальность = "Все";
		КонецЕсли;
		
		// Исключается вызов из панели функций.
		Если НЕ Параметры.Свойство("Ответственный") Тогда
			ОтборОтветственный = Настройки.Получить("ОтборОтветственный");
		КонецЕсли;
		Настройки.Удалить("ОтборОтветственный");
		
		//ИспользоватьСостояния = Константы.ИспользоватьСостоянияЗаказовПокупателей.Получить();
		
		// Журнал.
		//Если НЕ Параметры.Свойство("МенюФункцийЭтапЗаказа") Тогда
		//	Если ОтборАктуальность = "Кроме закрытых" Тогда
		//		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Закрыт", Ложь);
		//	ИначеЕсли ОтборАктуальность = "Закрытые" Тогда
		//		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Закрыт", Истина);
		//	КонецЕсли;
		//	Если ИспользоватьСостояния Тогда
		//		ОтборСтатус = "";
		//		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "СостояниеЗаказа", ОтборСостояние, ЗначениеЗаполнено(ОтборСостояние));
		//	Иначе
		//		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "СтатусЗаказа", ОтборСтатус, ЗначениеЗаполнено(ОтборСтатус));
		//	КонецЕсли;
		//КонецЕсли;
		
		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Организация", ОтборОрганизация, ЗначениеЗаполнено(ОтборОрганизация));
		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Ответственный", ОтборОтветственный, ЗначениеЗаполнено(ОтборОтветственный));
		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Контрагент", ОтборКонтрагент, ЗначениеЗаполнено(ОтборКонтрагент));
		
	КонецЕсли;
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

// Процедура - обработчик события ОбработкаОповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПриходнаяНакладнаяВозврат"
	 ИЛИ ИмяСобытия = "Запись_РасходнаяНакладная"
	 ИЛИ ИмяСобытия = "Запись_АктВыполненныхРабот"
	 ИЛИ ИмяСобытия = "ОповещениеОбОплатеЗаказа" 
	 ИЛИ ИмяСобытия = "ОповещениеОбИзмененииДолга" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
		
КонецПроцедуры // ОбработкаОповещения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик нажатия на кнопку ОтправитьEmailКонтрагенту.
//
&НаКлиенте
Процедура ОтправитьEmailКонтрагенту(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если СписокТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Получатели = Новый Массив;
	Если ЗначениеЗаполнено(ИнформацияКонтрагентЭП) Тогда
		СтруктураПолучателя = Новый Структура;
		СтруктураПолучателя.Вставить("Представление", СписокТекущиеДанные.Контрагент);
		СтруктураПолучателя.Вставить("Адрес", ИнформацияКонтрагентЭП);
		Получатели.Добавить(СтруктураПолучателя);
	КонецЕсли;
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Получатель", Получатели);
	
	РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
	
КонецПроцедуры // ОтправитьEmailКонтрагенту()

// Процедура - обработчик нажатия на кнопку ОтправитьEmailКонтактномуЛицу.
//
&НаКлиенте
Процедура ОтправитьEmailКонтактномуЛицу(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если СписокТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Получатели = Новый Массив;
	Если ЗначениеЗаполнено(ИнформацияКонтактноеЛицоЭП) Тогда
		СтруктураПолучателя = Новый Структура;
		СтруктураПолучателя.Вставить("Представление", СписокТекущиеДанные.КонтактноеЛицо);
		СтруктураПолучателя.Вставить("Адрес", ИнформацияКонтактноеЛицоЭП);
		Получатели.Добавить(СтруктураПолучателя);
	КонецЕсли;
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Получатель", Получатели);
	
	РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
	
КонецПроцедуры // ОтправитьEmailКонтактномуЛицу()

&НаКлиенте
// Процедура - обработчик команды СоздатьЗаказПокупателя
//
Процедура СоздатьЗаказПокупателя(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения",
		УправлениеНебольшойФирмойКлиент.ПрочитатьЗначенияОтбораДинамическогоСписка(Список));
	
	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаОбъекта", ПараметрыОткрытия, Элементы.Список, "НовыйЗаказНаДоставку");
	
КонецПроцедуры //СоздатьЗаказПокупателя()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ

// Процедура - обработчик события ПриИзменении поля ввода ОтборОрганизация.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Организация", ОтборОрганизация, ЗначениеЗаполнено(ОтборОрганизация));
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтборОтветственный.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ОтборОтветственныйПриИзменении(Элемент)
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Ответственный", ОтборОтветственный, ЗначениеЗаполнено(ОтборОтветственный));
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтборСостояние.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "СостояниеЗаказа", ОтборСостояние, ЗначениеЗаполнено(ОтборСостояние));
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ОтборСтатус.
//
&НаКлиенте
Процедура ОтборСтатусПриИзменении(Элемент)
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "СтатусЗаказа", ОтборСтатус, ЗначениеЗаполнено(ОтборСтатус));
КонецПроцедуры // ОтборСтатусПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ОтборКонтрагент.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ОтборКонтрагентПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("СписокДокументовЗаказПокупателяОтборКонтрагент");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Контрагент", ОтборКонтрагент, ЗначениеЗаполнено(ОтборКонтрагент));
	
КонецПроцедуры
&НаКлиенте
Процедура ES_ОтборСкладПриИзменении(Элемент)
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ES_Склад", ES_ОтборСклад, ЗначениеЗаполнено(ES_ОтборСклад));

КонецПроцедуры


// Процедура - обработчик события ПриИзменении поля ввода ОтборАктуальность.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ОтборАктуальностьПриИзменении(Элемент)
	
	Если ОтборАктуальность = "Кроме закрытых" Тогда
		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Закрыт", Ложь, Истина);
	ИначеЕсли ОтборАктуальность = "Закрытые" Тогда
		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Закрыт", Истина, Истина);
	ИначеЕсли ОтборАктуальность = "Все" Тогда
		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Закрыт", Истина, Ложь);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ДИНАМИЧЕСКОГО СПИСКА

// Процедура - обработчик события ПриАктивизацииСтроки динамического списка Список.
//
&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСписка", 0.2, Истина);
	
КонецПроцедуры // СписокПриАктивизацииСтроки()

#Область ЗамерыПроизводительности

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	КлючеваяОперация = "СозданиеФормыЗаказПокупателя";
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	КлючеваяОперация = "ОткрытиеФормыЗаказПокупателя";
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// ТехнологияСервиса.ИнформационныйЦентр
&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец ТехнологияСервиса.ИнформационныйЦентр

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область EFSOL_СлужбаДоставки

//EFSOL_oks_kry_25.03.2015 16:21:43_BEGIN

// Быстрые отборы

&НаКлиенте
Процедура ES_ОтборСтартПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("СписокДокументовЗаказПокупателяОтборES_Старт");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	Если ES_ОтборСтарт > ES_ОтборФиниш Тогда
		ES_ОтборФиниш = ES_ОтборСтарт;
		Список.Параметры.УстановитьЗначениеПараметра("ES_ДатаДоставкиФиниш", ?(ES_ОтборФиниш = '00010101', '30000101', ES_ОтборФиниш));
	КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра("ES_ДатаДоставкиСтарт", ES_ОтборСтарт);
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ОтборФинишПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("СписокДокументовЗаказПокупателяОтборES_Финиш");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	Если ES_ОтборФиниш < ES_ОтборСтарт Тогда
		ES_ОтборСтарт = ES_ОтборФиниш;
		Список.Параметры.УстановитьЗначениеПараметра("ES_ДатаДоставкиСтарт", ES_ОтборСтарт);
	КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра("ES_ДатаДоставкиФиниш", ?(ES_ОтборФиниш = '00010101', '30000101', ES_ОтборФиниш));
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ОтборНомерНакладнойПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("СписокДокументовЗаказПокупателяОтборКонтрагент");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ES_НомерНакладной", ES_ОтборНомерНакладной, ЗначениеЗаполнено(ES_ОтборНомерНакладной), ВидСравненияКомпоновкиДанных.Содержит);
		
КонецПроцедуры

&НаКлиенте
Процедура ES_ОтборСтатусПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("СписокДокументовЗаказПокупателяОтборES_СтатусЗаказа");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	//ЕФСОЛ Несторук 14.09.2016 + добавлен отбор по непроведенным заказам (статус не установлен)
	Если ES_ОтборСтатус = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.БезСтатуса") Тогда
		
		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ES_СтатусЗаказа", ES_ОтборСтатус, Ложь);
	    НовыйОтбор = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ES_СтатусЗаказа");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		НовыйОтбор.Использование = Истина;
	Иначе
	Список.Отбор.Элементы.Очистить();
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ES_СтатусЗаказа", ES_ОтборСтатус, ЗначениеЗаполнено(ES_ОтборСтатус));
	КонецЕсли;
	//ЕФСОЛ Несторук 14.09.2016 -
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ОтборВхНакладнаяПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("СписокДокументовЗаказПокупателяОтборES_ВхНакладная");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ES_ВхНакладная", ES_ОтборВхНакладная, ЗначениеЗаполнено(ES_ОтборВхНакладная));
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ОтборКурьерПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("СписокДокументовЗаказПокупателяОтборES_Курьер");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ES_Курьер", ES_ОтборКурьер, ЗначениеЗаполнено(ES_ОтборКурьер));
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ОтборМанифестПриИзменении(Элемент)
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("СписокДокументовЗаказПокупателяОтборES_Манифест");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ES_Манифест", ES_ОтборМанифест, ЗначениеЗаполнено(ES_ОтборМанифест));
	
	
КонецПроцедуры

// Команды

&НаКлиенте
Процедура ES_УстановитьСостояние(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивЗаказов", Элементы.Список.ВыделенныеСтроки);
	
	ОткрытьФорму("ОбщаяФорма.ES_ФормаУстановкиСостояния", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры    

&НаКлиенте
Процедура ES_ГрупповойЗаборГруза(Команда)
	
	МассивЗаказов = Элементы.Список.ВыделенныеСтроки;
	Если МассивЗаказов.Количество() = 0 Тогда
		Сообщить("Не выделены заказы на доставку");
		Возврат;
	КонецЕсли; 
	
	ФормаНовогоДокумента = ПолучитьФорму("Документ.ES_ЗаборГруза.Форма.ФормаДокумента");
	ДанныеФормы = ФормаНовогоДокумента.Объект;
	
	ЗаполнитьТЧНазначениеНаСервере(ДанныеФормы, МассивЗаказов);
	
	КопироватьДанныеФормы(ДанныеФормы, ФормаНовогоДокумента.Объект);
	ФормаНовогоДокумента.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧНазначениеНаСервере(ДанныеФормы, МассивЗаказов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказ,
		|	ES_ДанныеПоЗаказамСрезПоследних.НомерДокумента КАК НомерДокумента,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВхНакладная
		|ИЗ
		|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(, Заказ В (&МассивЗаказов)) КАК ES_ДанныеПоЗаказамСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерДокумента";
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НовСтр = ДанныеФормы.Назначение.Добавить();
			НовСтр.Документ = Выборка.Заказ;
			НовСтр.ВхНакладная = Выборка.ВхНакладная;
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодрядчикПриИзменении(Элемент)
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("СписокДокументовЗаказПокупателяОтборКонтрагент");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ES_Подрядчик", ОтборПодрядчик, ЗначениеЗаполнено(ОтборПодрядчик));
	
КонецПроцедуры

//ЕФСОЛ Несторук 15.09.2016 +
&НаКлиенте
Процедура ES_ГрупповоеПроведение(Команда)
	
	Уникальность = "ФормаГрупповогоПроведенияЗаказов";
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ES_ФормаПодбораЗаказов", , ЭтаФорма, Уникальность, , , );
	
	
КонецПроцедуры

&НаКлиенте
Процедура ES_КорректировкаЦен(Команда)
	
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ES_ФормаКорректировкиЦен",,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ОтборПериодПриИзменении(Элемент)
	
	Список.Параметры.УстановитьЗначениеПараметра("ES_ДатаДоставкиСтарт", ?(ES_ОтборПериод.ДатаНачала = '00010101', Неопределено, ES_ОтборПериод.ДатаНачала));
	Список.Параметры.УстановитьЗначениеПараметра("ES_ДатаДоставкиФиниш", ?(ES_ОтборПериод.ДатаОкончания = '00010101', Неопределено, ES_ОтборПериод.ДатаОкончания));
	
КонецПроцедуры

&НаКлиенте
Процедура ES_УстановитьЦветСрочности(Команда)

МассивЗаказов = Элементы.Список.ВыделенныеСтроки;
	
	Если МассивЗаказов.Количество() = 0 Тогда
		Сообщить("Не выделены заказы на доставку");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ES_ЦветМеткиДляИзменения) Тогда
		Сообщить("Выберите цвет");
		Возврат;
	КонецЕсли;
	
	ПоменятьЦветМеткиНаСервере(МассивЗаказов, ES_ЦветМеткиДляИзменения);

	
	
	
 КонецПроцедуры
 
&НаСервере
Процедура ПоменятьЦветМеткиНаСервере(МассивЗаказов, Цвет) 
	 
	Для каждого Заказ Из МассивЗаказов Цикл
		мОбъект = Заказ.ПолучитьОбъект();
		мОбъект.ES_ЦветМетки = Цвет;
		мОбъект.Записать()
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ES_ЦветМеткиДляИзмененияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УстановитьЦвет(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦвет(ВыбранноеЗначение)
	мМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыбранноеЗначение,"#");
	RGBМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(мМассив[1],",");
	Элементы.ES_ЦветМеткиДляИзменения.ЦветФона = Новый Цвет(RGBМассив[0],RGBМассив[1],RGBМассив[2]);
	ES_ЦветМеткиДляИзменения = ВыбранноеЗначение;
КонецПроцедуры

&НаКлиенте
Процедура ES_Приемка(Команда)
	
	МассивЗаказов = Элементы.Список.ВыделенныеСтроки;
	Если МассивЗаказов.Количество() = 0 Тогда
		Сообщить("Не выделены заказы на доставку");
		Возврат;
	КонецЕсли; 
	
	ФормаНовогоДокумента = ПолучитьФорму("Документ.ES_Приемка.Форма.ФормаДокумента");
	ДанныеФормы = ФормаНовогоДокумента.Объект;
	
	ЗаполнитьТЧПриемки(ДанныеФормы, МассивЗаказов);
	
	КопироватьДанныеФормы(ДанныеФормы, ФормаНовогоДокумента.Объект);
	ФормаНовогоДокумента.Открыть();

	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧПриемки(ДанныеФормы, МассивЗаказов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказ,
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказчик,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВхНакладная,
		|	ES_ДанныеПоЗаказамСрезПоследних.НомерНакладной
		|ПОМЕСТИТЬ ВТ_Заказ
		|ИЗ
		|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(
		|			,
		|			Заказ В (&МассивЗаказов)
		|				И ВидДоставки <> ЗНАЧЕНИЕ(Перечисление.ES_ВидыДоставки.ДвериДвери)) КАК ES_ДанныеПоЗаказамСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	ES_НоменклатураВЗаказахСрезПоследних.ДокументДоставки,
		|	ES_НоменклатураВЗаказахСрезПоследних.Номенклатура,
		|	ES_НоменклатураВЗаказахСрезПоследних.Характеристика,
		|	ES_НоменклатураВЗаказахСрезПоследних.Партия,
		|	ES_НоменклатураВЗаказахСрезПоследних.ТипНоменклатурыЗапас,
		|	ES_НоменклатураВЗаказахСрезПоследних.Количество,
		|	ES_НоменклатураВЗаказахСрезПоследних.НППлан,
		|	ES_НоменклатураВЗаказахСрезПоследних.Содержание,
		|	ES_НоменклатураВЗаказахСрезПоследних.Цена,
		|	ES_НоменклатураВЗаказахСрезПоследних.ПроцентСкидкиНаценки,
		|	ES_НоменклатураВЗаказахСрезПоследних.Вес,
		|	ES_НоменклатураВЗаказахСрезПоследних.Объем,
		|	ES_НоменклатураВЗаказахСрезПоследних.ОбъемныйВес,
		|	ES_НоменклатураВЗаказахСрезПоследних.ОбьявленнаяСтоимость,
		|	ES_НоменклатураВЗаказахСрезПоследних.Опасность,
		|	ES_НоменклатураВЗаказахСрезПоследних.НомерСтроки
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	РегистрСведений.ES_НоменклатураВЗаказах.СрезПоследних(
		|			,
		|			ДокументДоставки В
		|				(ВЫБРАТЬ
		|					ВТ_Заказ.Заказ
		|				ИЗ
		|					ВТ_Заказ КАК ВТ_Заказ)) КАК ES_НоменклатураВЗаказахСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Значение, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Курьер,
		|	ЕСТЬNULL(ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Регистратор, ЗНАЧЕНИЕ(Документ.ES_ПланДоставки.ПустаяСсылка)) КАК ПланДоставки,
		|	ВТ_Заказ.Заказ КАК Заказ,
		|	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа КАК СтатусЗаказа,
		|	ВТ_Заказ.Заказчик КАК Заказчик,
		|	ВТ_Заказ.ВхНакладная КАК ВхНакладная,
		|	ВТ_Заказ.НомерНакладной КАК НомерНакладной,
		|	ВТ_Товары.ДокументДоставки КАК ДокументДоставки,
		|	ВТ_Товары.Номенклатура КАК Номенклатура,
		|	ВТ_Товары.Характеристика КАК Характеристика,
		|	ВТ_Товары.Партия КАК Партия,
		|	ВТ_Товары.ТипНоменклатурыЗапас КАК ТипНоменклатурыЗапас,
		|	ВТ_Товары.Количество КАК Количество,
		|	ВТ_Товары.НППлан КАК НППлан,
		|	ВТ_Товары.Цена КАК Цена,
		|	ВТ_Товары.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|	ВТ_Товары.Вес КАК Вес,
		|	ВТ_Товары.Объем КАК Объем,
		|	ВТ_Товары.ОбъемныйВес КАК ОбъемныйВес,
		|	ВТ_Товары.ОбьявленнаяСтоимость КАК ОбьявленнаяСтоимость,
		|	ВТ_Товары.Опасность КАК Опасность,
		|	ВТ_Товары.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТ_Заказ КАК ВТ_Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
		|				,
		|				Регистратор ССЫЛКА Документ.ES_ПланДоставки
		|					И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Курьер)
		|					И Заказ В
		|						(ВЫБРАТЬ
		|							ВТ_Заказ.Заказ
		|						ИЗ
		|							ВТ_Заказ КАК ВТ_Заказ)) КАК ES_ИзменяемыеРеквизитыЗаказовСрезПоследних
		|		ПО ВТ_Заказ.Заказ = ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(
		|				,
		|				Заказ В
		|					(ВЫБРАТЬ
		|						ВТ_Заказ.Заказ
		|					ИЗ
		|						ВТ_Заказ КАК ВТ_Заказ)) КАК ES_СтатусыЗаказовСрезПоследних
		|		ПО ВТ_Заказ.Заказ = ES_СтатусыЗаказовСрезПоследних.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары
		|		ПО ВТ_Заказ.Заказ = ВТ_Товары.ДокументДоставки
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|ИТОГИ
		|	МАКСИМУМ(Курьер),
		|	МАКСИМУМ(ПланДоставки),
		|	МАКСИМУМ(СтатусЗаказа),
		|	МАКСИМУМ(Заказчик),
		|	МАКСИМУМ(ВхНакладная),
		|	МАКСИМУМ(НомерНакладной)
		|ПО
		|	Заказ";
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗаказ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗаказ.Следующий() Цикл
		НоваяСтрокаЗаказы = ДанныеФормы.Заказы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗаказы,ВыборкаЗаказ);
		НоваяСтрокаЗаказы.ДатаВремяДобавленияЗаказа = ТекущаяДата();
				
		Выборка = ВыборкаЗаказ.Выбрать();
	
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			НоваяСтрокаГрузы = ДанныеФормы.Грузы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаГрузы,Выборка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//ЭР Несторук С.И. 10.04.2019 9:32:27 {
	ES_БиллингКлиент.ПроверитьДоступностьСервисаDelans(Отказ);
	//}ЭР Несторук С.И.
КонецПроцедуры


//ЕФСОЛ Несторук 15.09.2016 -


//EFSOL_oks_kry_25.03.2015 16:21:43_END

#КонецОбласти