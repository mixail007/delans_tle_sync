
//EFSOL_oks_kry_01.04.2015 13:55:13_BEGIN
Перем мРежимЗаписи;
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПараметрыПоискаСпособаДоставки(Знач ТекущийВариантКП) Экспорт
	
	Результат = Новый Структура;
	
	СкладВШапке = (ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	
	Результат.Вставить("Организация", Организация);
	Результат.Вставить("Магазин", СтруктурнаяЕдиницаПродажи);
	Результат.Вставить("Склад", ?(СкладВШапке, СтруктурнаяЕдиницаРезерв, Справочники.СтруктурныеЕдиницы.ПустаяСсылка()));
	Результат.Вставить("СпособДоставки", СпособДоставки);
	Если ДоставкаСервер.АдресОтправленияИзСклада() И СкладВШапке Тогда
		ПоляАдресаОтправления = ДоставкаСервер.ПоляАдресаОтправления(СтруктурнаяЕдиницаРезерв);
	Иначе
		ПоляАдресаОтправления = ДоставкаСервер.ПоляАдресаОтправления(Организация);
	КонецЕсли;
	Результат.Вставить("АдресОтправленияЗначение", ПоляАдресаОтправления.АдресОтправленияЗначение);
	Результат.Вставить("АдресДоставкиЗначение", АдресДоставкиЗначение);
	Результат.Вставить("Ширина", Ширина);
	Результат.Вставить("Высота", Высота);
	Результат.Вставить("Длина", Длина);
	Результат.Вставить("Вес", Вес);
	Результат.Вставить("ОбъявленнаяЦенность", ОбъявленнаяЦенность);
	
	ТаблицаЗапасы = Запасы.Выгрузить(Новый Структура("ТипНоменклатурыЗапас, НомерВариантаКП", Истина, ТекущийВариантКП));
	ТаблицаЗапасы.Колонки.Добавить("ЦенаДляДоставки", Новый ОписаниеТипов("Число"));
	ТаблицаЗапасы.Колонки.Добавить("КоличествоДляДоставки", Новый ОписаниеТипов("Число"));
	ТаблицаЗапасы.Колонки.Добавить("СуммаДляДоставки", Новый ОписаниеТипов("Число"));
	
	ЯндексДоставка.РассчитатьЦеныДляДоставки(ТаблицаЗапасы);
	
	Результат.Вставить("СуммаЗаказа", ТаблицаЗапасы.Итог("СуммаДляДоставки"));
	Результат.Вставить("КоличествоТоваров", ТаблицаЗапасы.Итог("КоличествоДляДоставки"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ОчиститьДатуНомерВходящегоДокумента(ЭтотОбъект);
	
	ЭтотОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.ПустаяСсылка();
	ЭтотОбъект.ПричинаОтмены = Справочники.ПричиныОтменыЗаказа.ПустаяСсылка();
	ЭтотОбъект.Заметки = "";
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		ЭтотОбъект.СостояниеЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказНаряда(ВидЗаказа);
	Иначе
		ЭтотОбъект.СостояниеЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаПокупателя(ВидЗаказа);
	КонецЕсли;
	ЭтотОбъект.УдалитьЗакрыт = Ложь;
	ЭтотОбъект.КалькуляцияРассчитана = Ложь;
	ЭтотОбъект.Событие = Документы.Событие.ПустаяСсылка();
	
	// Поведение должно быть таким же как при создании нового документа.
	// Причина:
	//   в основании печати может быть указан сам заказ,
	//   а при копировании еще не сформировалась новая ссылка
	//   и, соответственно, нет данных и для текстовое представление.
	//
	
	ОснованиеПечатиСсылка = Неопределено;
	ОснованиеПечати = Неопределено;
	Если ЗначениеЗаполнено(Договор) Тогда
		
		ОснованиеПечатиСсылка = Договор;
		ЗаголовокПредставления = "";
		Если Константы.ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати.Получить() Тогда
			
			ЗаголовокПредставления = Нстр("ru = 'Договор: '");
			
		КонецЕсли;
		
		ОснованиеПечати = ЗаголовокПредставления + Строка(Договор);
		
	КонецЕсли;
	
	Предоплата.Очистить();
	
	НомерЧекаККМ = 0;
	
	//EFSOL_oks_kry_19.03.2015 18:13:39_BEGIN
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ES_ЗаказНаДоставку Тогда
		ES_НомерНакладной 	= "";
		ES_ДатаДоставки 	= Неопределено;
		ES_ЗаборДата 		= Неопределено;
		ES_КоличествоМест 	= 1;
		ES_НППлан 			= 0;
		ES_ОбщийВес = 0;
		ES_ОбщийОбъемныйВес = 0;
		ES_Грузы.Очистить();
		ES_СписокГрузов.Очистить();
	КонецЕсли; 
	//EFSOL_oks_kry_19.03.2015 18:13:39_END
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ВидОперации")
		И ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд
		И ДанныеЗаполнения.Свойство("Номенклатура") Тогда
		
		Номенклатура = ДанныеЗаполнения.Номенклатура;
		ТабличнаяЧасть = Новый ТаблицаЗначений;
		ТабличнаяЧасть.Колонки.Добавить("Номенклатура");
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.Номенклатура = Номенклатура;
		
		Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
			ИмяТЧ = "Запасы";
		ИначеЕсли Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
			ИЛИ Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			ИмяТЧ = "Работы";
		Иначе
			ИмяТЧ = "";
		КонецЕсли;
		
		ДанныеЗаполнения = Новый Структура;
		Если ЗначениеЗаполнено(ИмяТЧ) Тогда
			ДанныеЗаполнения.Вставить(ИмяТЧ, ТабличнаяЧасть);
		КонецЕсли;
		Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ВидРабот Тогда
			ДанныеЗаполнения.Вставить("ВидРабот", Номенклатура);
		КонецЕсли;
		ДанныеЗаполнения.Вставить("ВидОперации", Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд);
		
	КонецЕсли;
	
	// Перенос количества в колонку кратности при подборе через корзину
	Если ТипЗнч(ДанныеЗаполнения)=Тип("Структура") 
		И ДанныеЗаполнения.Свойство("Работы")
		И ТипЗнч(ДанныеЗаполнения.Работы)=Тип("Массив") Тогда
		Для каждого СтрокаРабот Из ДанныеЗаполнения.Работы Цикл
			Если ТипЗнч(СтрокаРабот)<>Тип("Структура")
				ИЛИ НЕ СтрокаРабот.Свойство("Количество")
				ИЛИ СтрокаРабот.Свойство("Кратность") Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаРабот.Вставить("Кратность", СтрокаРабот.Количество);
			СтрокаРабот.Вставить("Количество", 1);
		КонецЦикла;
	КонецЕсли;
	
	//Ресурсы на соновании события "Запись"
	Если ТипЗнч(ДанныеЗаполнения)=Тип("Структура")
		И ДанныеЗаполнения.Свойство("Событие")
		И ЗначениеЗаполнено(ДанныеЗаполнения.Событие)
		И ДанныеЗаполнения.Событие.ТипСобытия = Перечисления.ТипыСобытий.Запись Тогда
		РесурсыПредприятияСобытие = ДанныеЗаполнения.Событие.РесурсыПредприятия;
		Для каждого СтрокаРесурсов Из РесурсыПредприятияСобытие Цикл
			НоваяСтрока = РесурсыПредприятия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРесурсов);
		КонецЦикла;
		Старт = ДанныеЗаполнения.Событие.НачалоСобытия;
		Финиш = ДанныеЗаполнения.Событие.ОкончаниеСобытия;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриемИПередачаВРемонт") Тогда
		ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, "ЗаполнитьПоПриемуВРемонт");
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, "ЗаполнитьПоДоговоруКонтрагента");
	ИначеЕсли ОбщегоНазначения.ЗначениеСсылочногоТипа(ДанныеЗаполнения) Тогда
		ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, "ОбработчикЗаполнения");
	Иначе
		ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, , "СостояниеЗаказа, ВариантЗавершения, ПричинаОтмены");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(УсловияСчетаЗаказа) Тогда
		УсловияСчетаЗаказа = Справочники.ДополнительныеУсловия.ПолучитьТиповыеУсловия();
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СчетНаОплату")
		И ВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд
		И ЗначениеЗаполнено(ДанныеЗаполнения.НоменклатураДоставки) Тогда
		ЗаполнитьДоставку(ДанныеЗаполнения);
	КонецЕсли; 
	
	ДозаполнитьПоУмолчанию();
	
	ПечатьДокументовУНФ.ОбработкаЗаполненияОснованияПечати(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	//ЭР Несторук С.И. 22.09.2017 13:35:41 {
	Если ES_ДоУточнения И НЕ Отказ И ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ES_ЗаказНаДоставку Тогда
		
		ДвиженияПоРегистрамДоставки();
		Возврат;
	КонецЕсли; 
	//}ЭР Несторук С.И.
	
	// Этапы производства
	ПроверитьЗаполнениеЭтаповПроизводства(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Инициализация дополнительных свойств для проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	// Взаиморасчеты
	СоответствиеТабличныхЧастейИРеквизитаЗаказ = Новый Соответствие;
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		СоответствиеТабличныхЧастейИРеквизитаЗаказ.Вставить("Запасы", "Заказ");
		СоответствиеТабличныхЧастейИРеквизитаЗаказ.Вставить("Работы", "Заказ");
		
		СоответствиеВременныхТаблицИРеквизитаЗаказ = Новый Соответствие;
		СоответствиеВременныхТаблицИРеквизитаЗаказ.Вставить("Товары", "Заказ");
		СоответствиеВременныхТаблицИРеквизитаЗаказ.Вставить("Работы", "Заказ");
		ДополнительныеСвойства.Вставить("ИмяРеквизитаЗаказ", "Ссылка");
	Иначе
		СоответствиеТабличныхЧастейИРеквизитаЗаказ.Вставить("Запасы", "Заказ");
		
		СоответствиеВременныхТаблицИРеквизитаЗаказ = Неопределено;
	КонецЕсли;
	РасчетыПроведениеДокументов.ИнициализироватьДополнительныеСвойстваДляПроведения(ЭтотОбъект, ДополнительныеСвойства, Отказ,
	Ложь, СоответствиеТабличныхЧастейИРеквизитаЗаказ, СоответствиеВременныхТаблицИРеквизитаЗаказ
	);
	// Конец Взаиморасчеты
	
	// Инициализация данных документа
	Документы.ЗаказПокупателя.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, ЭтотОбъект);
	
	// Взаиморасчеты
	// Проверим, можно ли продолжать и не было ли отказа в процедурах
	// формирования движений по взаиморасчетам.
	Отказ = ДополнительныеСвойства.Отказ;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// Конец Взаиморасчеты
	
	// Подготовка наборов записей
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета
	УправлениеНебольшойФирмойСервер.ОтразитьГрафикДвиженияЗапасов(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗаказыПокупателей(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьПотребностьВЗапасах(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьРазмещениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасы(ДополнительныеСвойства, Движения, Отказ);
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		УправлениеНебольшойФирмойСервер.ОтразитьЗапасыВРазрезеГТД(ДополнительныеСвойства, Движения, Отказ);
		
	КонецЕсли;
	
	УправлениеНебольшойФирмойСервер.ОтразитьПлатежныйКалендарь(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьОплатаСчетовИЗаказов(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьВыпускПродукции(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьРасчетыСПокупателями(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыКассовыйМетод(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыНераспределенные(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыОтложенные(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыПоЗаказамПрогноз(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыКРасходуСоСкладов(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыПринятые(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьНачисленияИУдержания(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьРасчетыСПерсоналом(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ);
	
	// СерийныеНомера
	УправлениеНебольшойФирмойСервер.ОтразитьСерийныеНомераГарантии(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьСерийныеНомераОстатки(ДополнительныеСвойства, Движения, Отказ);
	
	// Подарочные сертификаты
	УправлениеНебольшойФирмойСервер.ОтразитьПодарочныеСертификаты(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьОплатаПодарочнымиСертификатами(ДополнительныеСвойства, Движения, Отказ);
	
	// ДисконтныеКарты
	УправлениеНебольшойФирмойСервер.ОтразитьПродажиПоДисконтнойКарте(ДополнительныеСвойства, Движения, Отказ);
	// АвтоматическиеСкидки
	УправлениеНебольшойФирмойСервер.ОтразитьПредоставленныеСкидки(ДополнительныеСвойства, Движения, Отказ);
	// Эквайринг
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыКассовыйМетодЭквайринг(ДополнительныеСвойства, Движения, Отказ);
	
	УправлениеНебольшойФирмойСервер.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	
	// Биллинг
	УправлениеНебольшойФирмойСервер.ОтразитьВыполнениеДоговораОбслуживания(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Взаиморасчеты
	Если ДополнительныеСвойства.Свойство("ТаблицаДокументовДляИзменения")
		И ДополнительныеСвойства.ТаблицаДокументовДляИзменения.Количество() > 0
		Тогда
		РасчетыПроведениеДокументов.ОбработатьТаблицуДокументовДляИзмененияПриОтгрузке(ДополнительныеСвойства, Отказ);
	КонецЕсли;
	// Конец Взаиморасчеты
	
	// Этапы производства
	Если ВидОперации=Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу
		ИЛИ ВидОперации=Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		УправлениеНебольшойФирмойСервер.ОтразитьЭтапыПроизводства(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли; 
	
	// Ресурсы предприятия
	Если ПолучитьФункциональнуюОпцию("ПланироватьЗагрузкуРесурсовПредприятияРаботы") 
		и ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		Если ЭтотОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен Тогда
			ПланированиеРесурсовУНФ.СформироватьЗаписиКолендаряСотрудникаПоРесурсам(Ссылка,Неопределено,Отказ);
		Иначе
			УправлениеНебольшойФирмойСервер.ОтразитьРесурсыПредприятия(ДополнительныеСвойства, Движения, Отказ);
			ТаблицаРесурсыПредприятия = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРесурсыПредприятия;
			ПланированиеРесурсовУНФ.СформироватьЗаписиКолендаряСотрудникаПоРесурсам(Ссылка,ТаблицаРесурсыПредприятия,Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Событие) и Не Событие.ПометкаУдаления 
			и Не Событие.Состояние = Справочники.СостоянияСобытий.НайтиПоНаименованию("Отменено") Тогда
			ПланированиеРесурсовУНФ.СформироватьЗаписиКолендаряСотрудникаПоРесурсам(Событие,, Отказ);
			ПланированиеРесурсовУНФ.ЗаписатьРасписаниеЗагрузкиРесурсов(Событие,,Отказ)
		КонецЕсли;
		
	КонецЕсли;
	
	// Суммы документов для регламентированного учета
	УправлениеНебольшойФирмойСервер.ОтразитьСуммыДокументовРегламентированныйУчет(ДополнительныеСвойства, Движения, Отказ);
	
	// Контроль
	Документы.ЗаказПокупателя.ВыполнитьКонтроль(ЭтотОбъект, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
	//EFSOL_oks_kry_19.03.2015 18:39:25_BEGIN
	Если НЕ Отказ И ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ES_ЗаказНаДоставку Тогда
		ДвиженияПоРегистрамДоставки();
	КонецЕсли; 
	//EFSOL_oks_kry_19.03.2015 18:39:25_END
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Этапы производства
	ПроверитьЗаполнениеЭтаповПроизводства(Отказ, Истина);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Инициализация дополнительных свойств для удаления проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	// Взаиморасчеты
	СоответствиеТабличныхЧастейИРеквизитаЗаказ = Новый Соответствие;
	СоответствиеТабличныхЧастейИРеквизитаЗаказ.Вставить("Запасы", "Заказ");
	СоответствиеТабличныхЧастейИРеквизитаЗаказ.Вставить("Работы", "Заказ");
	РасчетыПроведениеДокументов.ИнициализироватьДополнительныеСвойстваДляПроведения(ЭтотОбъект, ДополнительныеСвойства, Отказ, Ложь, СоответствиеТабличныхЧастейИРеквизитаЗаказ);
	// Конец Взаиморасчеты
	
	// Подготовка наборов записей
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Взаиморасчеты
	Если ДополнительныеСвойства.Свойство("ТаблицаДокументовДляИзменения")
		И ДополнительныеСвойства.ТаблицаДокументовДляИзменения.Количество() > 0
		Тогда
		РасчетыПроведениеДокументов.ОбработатьТаблицуДокументовДляИзмененияПриОтгрузке(ДополнительныеСвойства, Отказ);
	КонецЕсли;
	// Конец Взаиморасчеты
	
	// Ресурсы предприятия
	Если ПолучитьФункциональнуюОпцию("ПланироватьЗагрузкуРесурсовПредприятияРаботы")
		и ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		ПланированиеРесурсовУНФ.СформироватьЗаписиКолендаряСотрудникаПоРесурсам(Ссылка,Неопределено,Отказ);
		
		Если ЗначениеЗаполнено(Событие) и Не Событие.ПометкаУдаления 
			и Не Событие.Состояние = Справочники.СостоянияСобытий.НайтиПоНаименованию("Отменено") Тогда
			ТаблицаДвиженийРесурсы = ПланированиеРесурсовУНФ.ТаблицаДвиженийДокументов(Событие);
			ПланированиеРесурсовУНФ.СформироватьЗаписиКолендаряСотрудникаПоРесурсам(Событие, ТаблицаДвиженийРесурсы, Отказ);
			ПланированиеРесурсовУНФ.ЗаписатьРасписаниеЗагрузкиРесурсов(Событие, ТаблицаДвиженийРесурсы, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	// Контроль
	Документы.ЗаказПокупателя.ВыполнитьКонтроль(ЭтотОбъект, ДополнительныеСвойства, Отказ, Истина);
	
	// Подчиненная счет-фактура
	Если НЕ Отказ Тогда
		КонтрольПодчиненнойСчетФактуры();
		
		//EFSOL_oks_kry_25.03.2015 11:13:45_BEGIN
		УдалениеЗаписейИзРСES_СостоянияЗаказов();
		//EFSOL_oks_kry_25.03.2015 11:13:45_END
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	//ЭР Несторук С.И. 22.09.2017 15:22:59 {
	Если ES_ДоУточнения Тогда
		ПроверяемыеРеквизиты.Очистить();
		ПроверяемыеРеквизиты.Добавить("Контрагент");
		Возврат;
	КонецЕсли;
	//}ЭР Несторук С.И.
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
	КонецЕсли;
	
	ЭтоЗаказНаПродажу = (ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу);
	ЭтоЗаказНаряд = (ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд);
	СкладВШапке = (ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	
	Если ЭтоЗаказНаряд Тогда
		
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ДатаОтгрузки"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("МатериалыЗаказчика.ДатаПоступления"));
		
		ПроверяемыеРеквизиты.Добавить("Старт");
		ПроверяемыеРеквизиты.Добавить("Финиш");
	//EFSOL_oks_kry_19.03.2015 18:34:18_BEGIN
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ES_ЗаказНаДоставку Тогда
		
		Если ПоложениеДатыОтгрузки = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ДатаОтгрузки"));
		Иначе
			//ЭР Несторук С.И. 29.05.2017 15:36:01 {
			//ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Запасы.ДатаОтгрузки"));
			//}ЭР Несторук С.И.
			
		КонецЕсли;
		
		ПроверяемыеРеквизиты.Добавить("ES_ВидДоставки");
		ПроверяемыеРеквизиты.Добавить("ES_ДатаДоставки");
		
		Если НЕ ES_ВидДоставки = Перечисления.ES_ВидыДоставки.Самовывоз Тогда
			
			ПроверяемыеРеквизиты.Добавить("ES_ВидДоставки");
			//ПроверяемыеРеквизиты.Добавить("ES_ВидОплаты");
			//ПроверяемыеРеквизиты.Добавить("ES_Плательщик");
			ПроверяемыеРеквизиты.Добавить("ES_Получатель");
			ПроверяемыеРеквизиты.Добавить("ES_ПолучательТелефон");
			
			//Если ES_ВидДоставки = Перечисления.ES_ВидыДоставки.СкладСклад Тогда
			//	ПроверяемыеРеквизиты.Добавить("ES_СкладДоставки");
			//	ПроверяемыеРеквизиты.Добавить("ES_АдресСкладаДоставки");
			//Иначе
			ПроверяемыеРеквизиты.Добавить("ES_АдресДоставки");
			
			//КонецЕсли;
			
			Если ES_ВидДоставки = Перечисления.ES_ВидыДоставки.ДвериДвери Тогда
				ПроверяемыеРеквизиты.Добавить("ES_ЗаборОтправитель");
				ПроверяемыеРеквизиты.Добавить("ES_ЗаборТелефон");
				ПроверяемыеРеквизиты.Добавить("ES_ЗаборАдрес");
				ПроверяемыеРеквизиты.Добавить("ES_ЗаборДата");
			КонецЕсли; 
			
			
		КонецЕсли;
		
		Если ES_Плательщик = Перечисления.ES_ТипыПлательщиков.Получатель Тогда
			//ПроверяемыеРеквизиты.Добавить("ES_СправочноЗаказчик");
		КонецЕсли; 
		//EFSOL_oks_kry_19.03.2015 18:34:18_END		
	Иначе
		
		Если ПоложениеДатыОтгрузки = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ДатаОтгрузки"));
		КонецЕсли;
		
	КонецЕсли;
	
	МетаданныеДокумента = Документы.ЗаказПокупателя.ПустаяСсылка().Метаданные();
	ТекстКолонкаНеЗаполненаШаблон = НСтр("ru='Не заполнена колонка ""%1"" в строке %2 списка ""%3""'");
	
	Для каждого Стр Из Запасы Цикл
		
		Если Стр.ЭтоРазделитель Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.НомерВариантаКП <> ОсновнойВариантКП Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЭтоЗаказНаряд Тогда
			Если НЕ ЗначениеЗаполнено(Стр.ДатаОтгрузки) И ПоложениеДатыОтгрузки = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
				ТекстСообщения = СтрШаблон(
				ТекстКолонкаНеЗаполненаШаблон,
				МетаданныеДокумента.ТабличныеЧасти.Запасы.Реквизиты.ДатаОтгрузки.Синоним,
				Стр.НомерСтроки,
				МетаданныеДокумента.ТабличныеЧасти.Запасы.Синоним,
				);
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения, "Запасы", Стр.НомерСтроки, "ДатаОтгрузки", Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Стр.Количество) Тогда
			ТекстСообщения = СтрШаблон(
			ТекстКолонкаНеЗаполненаШаблон,
			МетаданныеДокумента.ТабличныеЧасти.Запасы.Реквизиты.Количество.Синоним,
			Стр.НомерСтроки,
			МетаданныеДокумента.ТабличныеЧасти.Запасы.Синоним,
			);
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения, "Запасы", Стр.НомерСтроки, "Количество", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Стр.Цена) Тогда
			ТекстСообщения = СтрШаблон(
			ТекстКолонкаНеЗаполненаШаблон,
			МетаданныеДокумента.ТабличныеЧасти.Запасы.Реквизиты.Цена.Синоним,
			Стр.НомерСтроки,
			МетаданныеДокумента.ТабличныеЧасти.Запасы.Синоним,
			);
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения, "Запасы", Стр.НомерСтроки, "Цена", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Стр.СтавкаНДС) Тогда
			ТекстСообщения = СтрШаблон(
			ТекстКолонкаНеЗаполненаШаблон,
			МетаданныеДокумента.ТабличныеЧасти.Запасы.Реквизиты.СтавкаНДС.Синоним,
			Стр.НомерСтроки,
			МетаданныеДокумента.ТабличныеЧасти.Запасы.Синоним,
			);
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения, "Запасы", Стр.НомерСтроки, "СтавкаНДС", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	// Структурная единицы (резерв)
	Если СкладВШапке Тогда
		
		Если ЭтоЗаказНаряд И СкладВШапке И (Материалы.Количество() > 0 ИЛИ Запасы.Количество() > 0) Тогда
			ПроверяемыеРеквизиты.Добавить("СтруктурнаяЕдиницаРезерв");
		ИначеЕсли НЕ ЭтоЗаказНаряд И Запасы.Итог("Резерв") > 0 Тогда
			ПроверяемыеРеквизиты.Добавить("СтруктурнаяЕдиницаРезерв");
		КонецЕсли;
		
	Иначе
		
		Если ЭтоЗаказНаряд Тогда
			ПроверяемыеРеквизиты.Добавить("Запасы.СтруктурнаяЕдиницаРезерв");
			ПроверяемыеРеквизиты.Добавить("Материалы.СтруктурнаяЕдиницаРезерв");
		Иначе
			Для каждого Стр Из Запасы Цикл
				Если Стр.Резерв > 0 И НЕ ЗначениеЗаполнено(Стр.СтруктурнаяЕдиницаРезерв) Тогда
					ТекстСообщения = СтрШаблон(
					НСтр("ru='Не заполнена колонка ""%1"" в строке %2 списка ""%3""'"),
					МетаданныеДокумента.ТабличныеЧасти.Запасы.Реквизиты.СтруктурнаяЕдиницаРезерв.Синоним,
					Стр.НомерСтроки,
					МетаданныеДокумента.ТабличныеЧасти.Запасы.Синоним,
					);
					УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения, "Запасы", Стр.НомерСтроки, "СтруктурнаяЕдиницаРезерв", Отказ);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если ЗапланироватьОплату
		И ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
		
		Если ПроверяемыеРеквизиты.Найти("Касса") <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Касса"));
		КонецЕсли;
		
	ИначеЕсли ЗапланироватьОплату
		И ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Наличные Тогда
		
		Если ПроверяемыеРеквизиты.Найти("БанковскийСчет") <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("БанковскийСчет"));
		КонецЕсли;
		
	Иначе
		
		Если ПроверяемыеРеквизиты.Найти("Касса") <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Касса"));
		КонецЕсли;
		Если ПроверяемыеРеквизиты.Найти("БанковскийСчет") <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("БанковскийСчет"));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗапланироватьОплату
		И ПлатежныйКалендарь.Количество() = 1
		И НЕ ЗначениеЗаполнено(ПлатежныйКалендарь[0].ДатаОплаты) Тогда
		
		ТекстСообщения = НСтр("ru = 'Поле ""Дата оплаты"" не заполнено.'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения, , , "ДатаОплаты", Отказ);
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ПлатежныйКалендарь.ДатаОплаты"));
		
	КонецЕсли;
	
	Если Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить() Тогда
		
		Если ЭтоЗаказНаПродажу Тогда
			
			Для каждого СтрокаЗапасы Из Запасы Цикл
				
				Если СтрокаЗапасы.Резерв > СтрокаЗапасы.Количество Тогда
					
					ТекстСообщения = НСтр("ru = 'В строке №%1 табл. части ""Товары, услуги"" количество резервируемых позиций превышает общее количество запасов.'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаЗапасы.НомерСтроки);
					УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
					ЭтотОбъект,
					ТекстСообщения,
					"Запасы",
					СтрокаЗапасы.НомерСтроки,
					"Резерв",
					Отказ
					);
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ЭтоЗаказНаряд Тогда
			
			СтрокаСостояния = ЭтотОбъект.ВидЗаказа.ПорядокСостояний.Найти(ЭтотОбъект.СостояниеЗаказа, "Состояние");
			Если СтрокаСостояния <> Неопределено Тогда
				
				ЗаказНарядВСостоянииВыполнения = СтрокаСостояния.НомерСтроки >= ЭтотОбъект.ВидЗаказа.НомерСостоянияВыполнения;
				
				Для Каждого СтрокаЗапасы Из Запасы Цикл
					
					Если ЗаказНарядВСостоянииВыполнения
						И СтрокаЗапасы.РезервОтгрузка > СтрокаЗапасы.Количество Тогда
						
						ТекстСообщения = НСтр("ru = 'В строке №%1 табл. части ""Товары"" количество списываемых позиций из резерва превышает общее количество запасов.'");
						ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаЗапасы.НомерСтроки);
						УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
						ЭтотОбъект,
						ТекстСообщения,
						"Запасы",
						СтрокаЗапасы.НомерСтроки,
						"РезервОтгрузка",
						Отказ
						);
						
					ИначеЕсли СтрокаЗапасы.Резерв > СтрокаЗапасы.Количество Тогда	
						
						ТекстСообщения = НСтр("ru = 'В строке №%1 табл. части ""Товары"" количество резервируемых позиций превышает общее количество запасов.'");
						ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаЗапасы.НомерСтроки);
						УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
						ЭтотОбъект,
						ТекстСообщения,
						"Запасы",
						СтрокаЗапасы.НомерСтроки,
						"Резерв",
						Отказ
						);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Для Каждого СтрокаЗапасы Из Материалы Цикл
					
					Если ЗаказНарядВСостоянииВыполнения
						И СтрокаЗапасы.РезервОтгрузка > СтрокаЗапасы.Количество Тогда
						
						ТекстСообщения = НСтр("ru = 'В строке №%1 табл. части ""Материалы"" количество списываемых позиций из резерва превышает общее количество запасов.'");
						ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаЗапасы.НомерСтроки);
						УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
						ЭтотОбъект,
						ТекстСообщения,
						"Материалы",
						СтрокаЗапасы.НомерСтроки,
						"РезервОтгрузка",
						Отказ
						);
						
					ИначеЕсли СтрокаЗапасы.Резерв > СтрокаЗапасы.Количество Тогда
						
						ТекстСообщения = НСтр("ru = 'В строке №%1 табл. части ""Материалы"" количество резервируемых позиций превышает общее количество запасов.'");
						ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаЗапасы.НомерСтроки);
						УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
						ЭтотОбъект,
						ТекстСообщения,
						"Материалы",
						СтрокаЗапасы.НомерСтроки,
						"Резерв",
						Отказ
						);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Серийные номера
			РаботаССерийнымиНомерами.ПроверкаЗаполненияСерийныхНомеров(Отказ, Запасы, СерийныеНомера, СтруктурнаяЕдиницаРезерв, ЭтотОбъект, , , "СтруктурнаяЕдиницаРезерв");
			РаботаССерийнымиНомерами.ПроверкаЗаполненияСерийныхНомеров(Отказ, Материалы, СерийныеНомераМатериалы, СтруктурнаяЕдиницаРезерв, ЭтотОбъект, "КлючСвязиСерийныеНомера", , "СтруктурнаяЕдиницаРезерв");
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Скидка 100%.
	ЕстьРучныеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиНаценкиПродажи");
	ЕстьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки"); // АвтоматическиеСкидки
	Если ЕстьРучныеСкидки ИЛИ ЕстьАвтоматическиеСкидки Тогда
		Для каждого СтрокаЗапасы Из Запасы Цикл
			// АвтоматическиеСкидки
			ТекСумма = СтрокаЗапасы.Цена * СтрокаЗапасы.Количество;
			ТекСуммаРучнойСкидки = ?(ЕстьРучныеСкидки, СтрокаЗапасы.СуммаСкидкиНаценки, 0);
			ТекСуммаАвтоматическойСкидки = ?(ЕстьАвтоматическиеСкидки, СтрокаЗапасы.СуммаАвтоматическойСкидки, 0);
			ТекСуммаСкидки = ТекСуммаРучнойСкидки + ТекСуммаАвтоматическойСкидки;
			Если СтрокаЗапасы.ПроцентСкидкиНаценки <> 100 И ТекСуммаСкидки < ТекСумма
				И НЕ ЗначениеЗаполнено(СтрокаЗапасы.Сумма) Тогда
				ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Сумма"" в строке %1 списка ""Товары, работы, услуги"".'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаЗапасы.НомерСтроки);
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				"Запасы",
				СтрокаЗапасы.НомерСтроки,
				"Сумма",
				Отказ
				);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ЕстьРучныеСкидки Тогда
		Для каждого СтрокаРаботы Из Работы Цикл
			// АвтоматическиеСкидки
			ТекСумма = СтрокаРаботы.Цена * СтрокаРаботы.Количество;
			ТекСуммаРучнойСкидки = ?(ЕстьРучныеСкидки, СтрокаРаботы.СуммаСкидкиНаценки, 0);
			ТекСуммаАвтоматическойСкидки = ?(ЕстьАвтоматическиеСкидки, СтрокаРаботы.СуммаАвтоматическойСкидки, 0);
			ТекСуммаСкидки = ТекСуммаРучнойСкидки + ТекСуммаАвтоматическойСкидки;
			Если СтрокаРаботы.ПроцентСкидкиНаценки <> 100 И ТекСуммаСкидки < ТекСумма
				И НЕ ЗначениеЗаполнено(СтрокаРаботы.Сумма) Тогда
				ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Сумма"" в строке %1 списка ""Работы"".'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаРаботы.НомерСтроки);
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				"Работы",
				СтрокаРаботы.НомерСтроки,
				"Сумма",
				Отказ
				);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//Так же проверим заполнение начислений сотрудников
	Документы.ЗаказПокупателя.ЕстьИсполнителиСПустойСуммойНачисления(Исполнители);
	
	// Биллинг
	Если ЭтоЗаказНаряд
		И ПолучитьФункциональнуюОпцию("ИспользоватьБиллинг")
		И Договор.ЭтоДоговорОбслуживания Тогда
		
		Для Каждого Стр Из Работы Цикл
			Если НЕ УправлениеНебольшойФирмойСервер.РазрешенаПродажаНоменклатурыПоДоговоруОбслуживания(Договор, Стр.Номенклатура) Тогда
				ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Запрещено проводить незапланированные работы/услуги по текущему договору обслуживания!'"),
				Договор.ДоговорОбслуживанияТарифныйПлан,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Работы", Стр.НомерСтроки, "Номенклатура"),,
				Отказ
				);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Стр Из Запасы Цикл
			Если НЕ УправлениеНебольшойФирмойСервер.РазрешенаПродажаНоменклатурыПоДоговоруОбслуживания(Договор, Стр.Номенклатура, Стр.Характеристика) Тогда
				ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Запрещено проводить незапланированные товары по текущему договору обслуживания!'"),
				Договор.ДоговорОбслуживанияТарифныйПлан,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Работы", Стр.НомерСтроки, "Номенклатура"),,
				Отказ
				);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Доставка
	Если ДоставкаСервер.ИспользуетсяДоставка(СпособДоставки) Тогда
		ПроверяемыеРеквизиты.Добавить("НоменклатураДоставки");
		ПроверяемыеРеквизиты.Добавить("СлужбаДоставки");
	КонецЕсли; 
	// Конец Доставка
	
	Если Не СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен
		И Не СостояниеЗаказа = Справочники.СостоянияЗаказНарядов.Завершен Тогда
		
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ВариантЗавершения"));
	КонецЕсли;
	
	Если Не ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ПричинаОтмены"));
	КонецЕсли;
	
	// Наборы
	НаборыСервер.ПроверитьТабличнуюЧасть(ЭтотОбъект, "Запасы", Отказ);
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		НаборыСервер.ПроверитьТабличнуюЧасть(ЭтотОбъект, "Работы", Отказ);
	КонецЕсли; 
	// КонецНаборы
	
	ПроверятьЗаполнениеПартий = Истина;
	
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку
		Тогда
		ПроверятьЗаполнениеПартий = Ложь
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, Отказ, ПроверятьЗаполнениеПартий);
	
	Если ЭтоЗаказНаряд Тогда
		
		ИменаТабличныхЧастей = Новый Массив;
		ИменаТабличныхЧастей.Добавить("Запасы");
		ИменаТабличныхЧастей.Добавить("Материалы");
		
		ГрузовыеТаможенныеДекларацииСервер.ПриОбработкеПроверкиЗаполнения(Отказ, ЭтотОбъект, ИменаТабличныхЧастей);
		
	КонецЕсли;
	
	// ПодарочныеСертификаты
	Если Константы.ФункциональнаяОпцияИспользоватьПодарочныеСертификаты.Получить()
		И ЭтоЗаказНаряд Тогда
		
		Если Не РаботаСПодарочнымиСертификатами.УказанКонтрагентДляПредоплаты() Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена константа ""Служебный контрагент для подарочных сертификатов"". Необходимо указать контрагента: Продажи - Еще больше возможностей.'");
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			ТекстСообщения,
			,,,
			Отказ
			);
		КонецЕсли;
		
		// Проверка срока и области действия подарочных сертификатов
		ВыполнитьПроверкуОграниченийСертификатов(Отказ);
		
	КонецЕсли;
	// Конец ПодарочныеСертификаты
	
	РасчетыРаботаСФормамиВызовСервера.ПроверитьЗаполнениеДокументаПредоплаты(Контрагент, ПроверяемыеРеквизиты);
	
	//Ресурсы
	ЕстьОшибки = ПланированиеРесурсовУНФ.ЕстьОшибкиЗаполнения(ЭтотОбъект.РесурсыПредприятия, ЭтотОбъект);
	Отказ = ?(ЕстьОшибки = Истина, Истина, Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		ДатаОтгрузки = Дата;
	КонецЕсли;
	// Конец МобильноеПриложение
	
	Если ПоложениеДатыОтгрузки <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			Если СтрокаТабличнойЧасти.ДатаОтгрузки <> ДатаОтгрузки Тогда
				СтрокаТабличнойЧасти.ДатаОтгрузки = ДатаОтгрузки;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
			ДатаОтгрузки = Финиш;
		Иначе
			Для каждого Строка Из Запасы Цикл
				Если НЕ ЗначениеЗаполнено(Строка.ДатаОтгрузки) Тогда
					Продолжить;
				КонецЕсли;
				ДатаОтгрузки = Строка.ДатаОтгрузки;
				Прервать;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		
		ЗаполнитьСтруктурнуюЕдиницуРезерваВТЧ();
		
	Иначе
		
		Если Запасы.Количество() > 0 Тогда
			Для каждого Строка Из Запасы Цикл
				Если НЕ ЗначениеЗаполнено(Строка.СтруктурнаяЕдиницаРезерв) Тогда
					Продолжить;
				КонецЕсли;
				СтруктурнаяЕдиницаРезерв = Строка.СтруктурнаяЕдиницаРезерв;
				Ячейка = Строка.Ячейка;
				Прервать;
			КонецЦикла;
		ИначеЕсли Материалы.Количество() > 0 Тогда
			Для каждого Строка Из Материалы Цикл
				Если НЕ ЗначениеЗаполнено(Строка.СтруктурнаяЕдиницаРезерв) Тогда
					Продолжить;
				КонецЕсли;
				СтруктурнаяЕдиницаРезерв = Строка.СтруктурнаяЕдиницаРезерв;
				Ячейка = Строка.Ячейка;
				Прервать;
			КонецЦикла;
		Иначе
			СтруктурнаяЕдиницаРезерв = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
			Ячейка = Справочники.Ячейки.ПустаяСсылка();
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если ПоложениеВидаРабот = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		Для каждого СтрокаТабличнойЧасти Из Работы Цикл
			СтрокаТабличнойЧасти.ВидРабот = ВидРабот;
		КонецЦикла;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		СписокРесурсов = "";
		Для Каждого СтрокаРесурс Из РесурсыПредприятия Цикл
			СписокРесурсов = СписокРесурсов + ?(СписокРесурсов = "","","; " + Символы.ПС) + СокрЛП(СтрокаРесурс.РесурсПредприятия);
		КонецЦикла;
		
		СписокНоменклатуры = "";
		Для Каждого СтрокаНоменклатура Из Работы Цикл
			ХарактеристикаПредставление = "";
			Если Константы.ФункциональнаяОпцияИспользоватьХарактеристики.Получить() 
				И ЗначениеЗаполнено(СтрокаНоменклатура.Характеристика) Тогда
				ХарактеристикаПредставление = " (" + СокрЛП(СтрокаНоменклатура.Характеристика) + ")";
			КонецЕсли;
			КоличествоНоменклатуры = СтрокаНоменклатура.Количество * СтрокаНоменклатура.Кратность * СтрокаНоменклатура.Коэффициент;
			СписокНоменклатуры = СписокНоменклатуры + ?(СписокНоменклатуры = "","","; " + Символы.ПС) + СокрЛП(СтрокаНоменклатура.Номенклатура) + ХарактеристикаПредставление + ", " + КоличествоНоменклатуры + " " + СокрЛП(Справочники.КлассификаторЕдиницИзмерения.ч);
		КонецЦикла;
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказНарядов") Тогда
			ЭтотОбъект.ВидЗаказа = Справочники.ВидыЗаказНарядов.Основной;
		КонецЕсли;
		
	Иначе
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей") Тогда
			ЭтотОбъект.ВидЗаказа = Справочники.ВидыЗаказовПокупателей.Основной;
		КонецЕсли;
		
		Если ОснованиеПечати = ПечатьДокументовУНФ.ПараметрЭтотДокументЗаказПокупателя() Тогда
			
			Если ЗначениеЗаполнено(Ссылка) Тогда
				
				ОснованиеПечатиСсылка = Ссылка;
				
			Иначе
				
				СсылкаНового = Документы.ЗаказПокупателя.ПолучитьСсылку();
				ЭтотОбъект.УстановитьСсылкуНового(СсылкаНового);
				
				ОснованиеПечатиСсылка = СсылкаНового;
				
				ЭтотОбъект.УстановитьНовыйНомер();
				
			КонецЕсли;
			
			НомерДокумента	= ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Дата, Номер, Организация.Префикс);
			ОснованиеПечати	= СтрШаблон(НСтр("ru='Заказ покупателя %1 от %2'"), НомерДокумента, Формат(Дата, "ДЛФ=D"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент)
		И НЕ Контрагент.ВестиРасчетыПоДоговорам
		И НЕ ЗначениеЗаполнено(Договор) Тогда
		Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	ОжидаетсяВыборВариантаКП = КоличествоВариантовКП <> 0 И ОсновнойВариантКП = 0;
	РассчитатьСуммуДокумента();
	ДатаИзменения = ТекущаяДата();
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность()
		И НЕ ПометкаУдаления Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	// Конец МобильноеПриложение
	
	СостоянияЗаказов.ПередЗаписьюЗаказа(ЭтотОбъект);
	
	ПривестиДанныеКСогласованномуСостоянию();
	ДополнительныеСвойства.Вставить("ЯндексДоставкаИзмененЛокально", ЯндексДоставка.ИзмененЛокально(ЭтотОбъект));
	
	// Взаиморасчеты
	МассивДоступныхОпераций = Новый Массив;
	МассивДоступныхОпераций.Добавить(Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу);
	МассивДоступныхОпераций.Добавить(Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд);
	РасчетыПроведениеДокументов.ПередЗаписьюНакладной(ЭтотОбъект, МассивДоступныхОпераций);
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу
		И НЕ Контрагент.ВестиРасчетыПоЗаказам Тогда
		Предоплата.Очистить();
	КонецЕсли;
	// Конец Взаиморасчеты
	
	// До включения автоматических скидок будем считать, что скидки рассчитаны.
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		СкидкиРассчитаны = Истина;
	КонецЕсли;
	
	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторПлатежа) Тогда
		ИдентификаторПлатежа = РасчетыСлужебный.ПолучитьУникальныйИдентификаторПлатежа(ЭтотОбъект);
	КонецЕсли;
	
	РегистрыСведений.ОбъектыИнтеграцииCRM.ПередЗаписьюОбъекта(ЭтотОбъект);
	
	//EFSOL_oks_kry_19.03.2015 18:19:08_BEGIN
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ES_ЗаказНаДоставку Тогда
		
		мРежимЗаписи = РежимЗаписи;
		
		ОчиститьРеквизитыДоставки();
		ES_СтоимостьДоставки = Запасы.Итог("Всего");
		
		Если ПометкаУдаления ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			
			// Нельзя пометить на удаление и отменить проведение заказа, если он проходит по другим документам
			МассивСсылок = Новый Массив;
			МассивСсылок.Добавить(Ссылка);
			
			УстановитьПривилегированныйРежим(Истина);
			ТабНайденныхСсылок = НайтиПоСсылкам(МассивСсылок);
			УстановитьПривилегированныйРежим(Ложь);
			
			Для каждого Строка Из ТабНайденныхСсылок Цикл
				Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Строка.Данные)) Тогда
					//ЭР Несторук С.И. 13.10.2017 14:44:41 {
					//Смотрим ссылаются ли на документ проведенные документы, а не помеченные на удаление
					//Если НЕ Строка.Данные.ПометкаУдаления и НЕ Ссылка = Строка.Данные Тогда
					Если Строка.Данные.Проведен и НЕ Ссылка = Строка.Данные Тогда
						//}ЭР Несторук С.И.
						Сообщить("На документ ссылается " + Строка.Данные);
						Отказ = Истина;
						Возврат;
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
			
		КонецЕсли; 
		
		// Установка Номера накладной
		Если НЕ ЗначениеЗаполнено(Ссылка) И НЕ ЗначениеЗаполнено(ES_НомерНакладной) Тогда 
			УстановитьНовыйНомер();
			НомерДокБезПрефикса = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ЭтотОбъект.Номер,Истина,Истина);
			ES_НомерНакладной = СформироватьНомерДокумента(НомерДокБезПрефикса);
		КонецЕсли;
		
	КонецЕсли; 
	//EFSOL_oks_kry_19.03.2015 18:19:08_END
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДатыЗапретаИзмененияПереопределяемый.ПроверитьДатуЗапретаРедактированияОбъектаЗаказПокупателя(Неопределено, ЭтотОбъект, "", Неопределено, Отказ);
	
	СостоянияЗаказов.ПриЗаписиЗаказа(ЭтотОбъект);
	
	Если ДополнительныеСвойства.ЯндексДоставкаИзмененЛокально Тогда
		
		РегистрыСведений.ЯндексДоставка.УстановитьОтметкуИзмененЛокально(ЭтотОбъект.Ссылка);
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		УправлениеНебольшойФирмойСервер.ПриЗаписиДокументаОснованияСчетаФактуры(Ссылка, ДополнительныеСвойства, Ложь);
		
	КонецЕсли;
	
	РегистрыСведений.ОбъектыИнтеграцииCRM.ПриЗаписиОбъекта(ЭтотОбъект);
	
	//ЕФСОЛ Несторук 25.07.2016 +
	Если мРежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ES_ВидДоставки = Перечисления.ES_ВидыДоставки.ДвериДвери	
			И НЕ ES_ВидЗабора = Перечисления.ES_ВидыЗабора.Упрощенный
			Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЕСТЬNULL(ES_СтатусыЗаказовСрезПоследних.Регистратор, ЗНАЧЕНИЕ(Документ.ES_ЗаборГруза.ПустаяСсылка)) КАК Забор
			|ИЗ
			|	РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(
			|			,
			|			Заказ = &ЗаказСсылка
			|				И Регистратор ССЫЛКА Документ.ES_ЗаборГруза) КАК ES_СтатусыЗаказовСрезПоследних";
			
			Запрос.УстановитьПараметр("ЗаказСсылка", Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Если НЕ ES_ОтмененЗаказчиком Тогда
				СоздатьЗаборГрузаНаОснованииЗаказа(Выборка.Забор);
			ИначеЕсли НЕ РезультатЗапроса.Пустой() И ES_ОтмененЗаказчиком Тогда
				Если ES_ОтмененЗаказчиком Тогда
					Выборка = РезультатЗапроса.Выбрать();
					Выборка.Следующий();
					Если Выборка.Забор.ПометкаУдаления = Истина Тогда
						Возврат;
					Иначе
						мОбъект = Выборка.Забор.ПолучитьОбъект();
						мОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
						мОбъект.ПометкаУдаления = Истина;
						мОбъект.Записать();
					КонецЕсли;					
				КонецЕсли;
			КонецЕсли;				
		КонецЕсли; 		
	КонецЕсли;
	
	//ЕФСОЛ Несторук 08.08.2016 -
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыЗаполненияДокумента

Процедура ОбработчикЗаполнения(ДанныеЗаполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЗначениеСсылочногоТипа(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяТабличнойЧасти(ДанныеЗаполнения)) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = ЗапросДанныхДляЗаполнения(ДанныеЗаполнения).Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаШапка = РезультатЗапроса.Выбрать();
	ВыборкаШапка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
	ЭтотОбъект.Запасы.Очистить();
	ВыборкаТабличнаяЧасть = ВыборкаШапка[ИмяТабличнойЧасти(ДанныеЗаполнения)].Выбрать();
	Пока ВыборкаТабличнаяЧасть.Следующий() Цикл
		НовСтр = ЭтотОбъект.Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаТабличнаяЧасть);
		НовСтр.ТипНоменклатурыЗапас = ((ВыборкаТабличнаяЧасть.НоменклатураТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас)
		ИЛИ (ВыборкаТабличнаяЧасть.НоменклатураТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат));
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		ВыборкаСкидкиНаценки = ВыборкаШапка.СкидкиНаценки.Выбрать();
		Пока ВыборкаСкидкиНаценки.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ЭтотОбъект.СкидкиНаценки.Добавить(), ВыборкаСкидкиНаценки);
		КонецЦикла;
	КонецЕсли;
	
	// Наборы
	ЭтотОбъект.ДобавленныеНаборы.Очистить();
	Если ДанныеЗаполнения.Метаданные().ТабличныеЧасти.Найти("ДобавленныеНаборы")<>Неопределено Тогда
		ВыборкаДобавленныеНаборы = ВыборкаШапка.ДобавленныеНаборы.Выбрать();
		Пока ВыборкаДобавленныеНаборы.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ЭтотОбъект.ДобавленныеНаборы.Добавить(), ВыборкаДобавленныеНаборы);
		КонецЦикла;
	КонецЕсли;
	// Конец Наборы
	
	СуммаОплаты = Запасы.Итог("Всего");
	
КонецПроцедуры

Процедура ЗаполнитьПоПриемуВРемонт(ДокументСсылкаПриемВРемонт) Экспорт
	
	// Заполнение шапки документа.
	ЭтотОбъект.ДокументОснование = ДокументСсылкаПриемВРемонт.Ссылка;
	ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд;
	
	Организация = ДокументСсылкаПриемВРемонт.Организация;
	Контрагент = ДокументСсылкаПриемВРемонт.Контрагент;
	Договор = ДокументСсылкаПриемВРемонт.Договор;
	
	ВидЦен = Договор.ВидЦен;
	ВидСкидкиНаценки = Договор.ВидСкидкиНаценки;
	ВалютаДокумента = Договор.ВалютаРасчетов;
	СуммаВключаетНДС = ?(ЗначениеЗаполнено(Договор.ВидЦен), Договор.ВидЦен.ЦенаВключаетНДС, Неопределено);
	НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Организация,, Дата);
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
	Курс = СтруктураПоВалюте.Курс;
	Кратность = СтруктураПоВалюте.Кратность;
	
КонецПроцедуры

Процедура ЗаполнитьПоДоговоруКонтрагента(ДанныеЗаполнения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
	|	ДоговорыКонтрагентов.Организация КАК Организация,
	|	ДоговорыКонтрагентов.ВалютаРасчетов КАК ВалютаДокумента,
	|	ДоговорыКонтрагентов.ВидЦен КАК ВидЦен,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ВидЦен.ЦенаВключаетНДС, Ложь) КАК СуммаВключаетНДС,
	|	ДоговорыКонтрагентов.ВидСкидкиНаценки КАК ВидСкидкиНаценки
	|	
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	ВыборкаШапка = Запрос.Выполнить().Выбрать();
	
	ВыборкаШапка.Следующий();
	
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоДоговоруКонтрагента()

Функция ЗапросДанныхДляЗаполнения(ДанныеЗаполнения)
	
	Конструктор = Новый СхемаЗапроса;
	Пакет = Конструктор.ПакетЗапросов[0];
	Пакет.ВыбиратьРазрешенные = Истина;
	Оператор0 = Пакет.Операторы[0];
	Оператор0.Источники.Добавить(ДанныеЗаполнения.Метаданные().ПолноеИмя());
	Для Каждого ОписаниеПоляШапки Из ОписаниеПолейШапки(ДанныеЗаполнения) Цикл
		Оператор0.ВыбираемыеПоля.Добавить(ОписаниеПоляШапки.Ключ);
		Если ЗначениеЗаполнено(ОписаниеПоляШапки.Значение) Тогда
			Пакет.Колонки[Пакет.Колонки.Количество() - 1].Псевдоним = ОписаниеПоляШапки.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекОписаниеПоляТабличнойЧастиЗапасы Из ОписаниеПолейТабличнойЧастиЗапасы(ДанныеЗаполнения) Цикл
		Оператор0.ВыбираемыеПоля.Добавить(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1.%2",
		ИмяТабличнойЧасти(ДанныеЗаполнения),
		ТекОписаниеПоляТабличнойЧастиЗапасы.Ключ));
		Если ЗначениеЗаполнено(ТекОписаниеПоляТабличнойЧастиЗапасы.Значение) Тогда
			Пакет.Колонки[Пакет.Колонки.Количество() - 1].Псевдоним = ТекОписаниеПоляТабличнойЧастиЗапасы.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		Оператор0.ВыбираемыеПоля.Добавить("СкидкиНаценки.КлючСвязи");
		Оператор0.ВыбираемыеПоля.Добавить("СкидкиНаценки.СкидкаНаценка");
		Оператор0.ВыбираемыеПоля.Добавить("СкидкиНаценки.Сумма");
	КонецЕсли;
	
	// Наборы
	Если ДанныеЗаполнения.Метаданные().ТабличныеЧасти.Найти("ДобавленныеНаборы")<>Неопределено Тогда
		Оператор0.ВыбираемыеПоля.Добавить("ДобавленныеНаборы.НоменклатураНабора");
		Оператор0.ВыбираемыеПоля.Добавить("ДобавленныеНаборы.ХарактеристикаНабора");
		Оператор0.ВыбираемыеПоля.Добавить("ДобавленныеНаборы.Количество");
	КонецЕсли;
	// Конец Наборы
	
	Оператор0.Отбор.Добавить("Ссылка = &Параметр");
	
	Результат = Новый Запрос(Конструктор.ПолучитьТекстЗапроса());
	Результат.УстановитьПараметр("Параметр", ДанныеЗаполнения);
	
	Возврат Результат;
	
КонецФункции

Функция ИмяТабличнойЧасти(ДанныеЗаполнения)
	
	ИменаТабличныхЧастей = Новый Соответствие;
	ИменаТабличныхЧастей[Тип("ДокументСсылка.СчетНаОплату")] = "Запасы";
	
	Возврат ИменаТабличныхЧастей[ТипЗнч(ДанныеЗаполнения)];
	
КонецФункции

Функция ОписаниеПолейШапки(ДанныеЗаполнения)
	
	Результат = Новый Соответствие;
	
	ДанныеЗаполненияМетаданные = ДанныеЗаполнения.Метаданные();
	
	Результат.Вставить("Ссылка", "ДокументОснование");
	Результат.Вставить("Организация");
	Результат.Вставить("Организация.БанковскийСчетПоУмолчанию", "БанковскийСчет");
	
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "ДисконтнаяКарта");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "УсловияСчетаЗаказа");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "ПроцентСкидкиПоДисконтнойКарте");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "Курс");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "Кратность");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "СуммаВключаетНДС");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "НалогообложениеНДС");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "Договор");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "Контрагент");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "ВалютаДокумента");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		Результат.Вставить("СкидкиРассчитаны");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьРеквизитЕслиОнЕстьВДокументе(РезультатСоответствие, ДанныеЗаполненияМетаданные, ИмяРеквизита)
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, ДанныеЗаполненияМетаданные) Тогда
		РезультатСоответствие.Вставить(ИмяРеквизита);
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеПолейТабличнойЧастиЗапасы(ДанныеЗаполнения)
	
	Результат = Новый Соответствие;
	Результат.Вставить("Номенклатура");
	Результат.Вставить("Номенклатура.ТипНоменклатуры");
	Результат.Вставить("Характеристика");
	Результат.Вставить("Содержание");
	Результат.Вставить("ЕдиницаИзмерения");
	Результат.Вставить("Количество");
	Результат.Вставить("Цена");
	Результат.Вставить("ПроцентСкидкиНаценки");
	Результат.Вставить("СуммаСкидкиНаценки");
	Результат.Вставить("Сумма");
	Результат.Вставить("СтавкаНДС");
	Результат.Вставить("СуммаНДС");
	Результат.Вставить("Всего");
	Если ИмяТабличнойЧасти(ДанныеЗаполнения) <> "РаботыИУслуги" Тогда
		Результат.Вставить("Партия");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		Результат.Вставить("КлючСвязи");
		Результат.Вставить("СуммаАвтоматическойСкидки");
		Результат.Вставить("ПроцентАвтоматическойСкидки");
	КонецЕсли;
	
	// Наборы
	Если ДанныеЗаполнения.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти(ДанныеЗаполнения)].Реквизиты.Найти("НоменклатураНабора")<>Неопределено Тогда
		Результат.Вставить("НоменклатураНабора");
		Результат.Вставить("ХарактеристикаНабора");
		Результат.Вставить("ДоляСтоимости");
	КонецЕсли;
	// Конец Наборы
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьТабличнуюЧастьИсполнителиПоРесурсам(ИсполнителиКлючСвязи) Экспорт
	
	МассивСотрудников	= Новый Массив();
	МассивБригад 		= Новый Массив();
	Для каждого СтрокаТЧ Из РесурсыПредприятия Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.РесурсПредприятия) Тогда
			
			ЗначениеРесурса = СтрокаТЧ.РесурсПредприятия.ЗначениеРесурса;
			Если ТипЗнч(ЗначениеРесурса) = Тип("СправочникСсылка.Сотрудники") Тогда
				
				МассивСотрудников.Добавить(ЗначениеРесурса);
				
			ИначеЕсли ТипЗнч(ЗначениеРесурса) = Тип("СправочникСсылка.Бригады") Тогда
				
				МассивБригад.Добавить(ЗначениеРесурса);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
	|	ТаблицаСотрудников.Наименование КАК Наименование,
	|	ПлановыеНачисленияИУдержанияСрезПоследних.ВидНачисленияУдержания КАК ВидНачисленияУдержания
	|ПОМЕСТИТЬ ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний
	|ИЗ
	|	(ВЫБРАТЬ
	|		Сотрудники.Ссылка КАК Сотрудник,
	|		Сотрудники.Наименование КАК Наименование
	|	ИЗ
	|		Справочник.Сотрудники КАК Сотрудники
	|	ГДЕ
	|		Сотрудники.Ссылка В(&МассивСотрудников)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Сотрудники.Ссылка,
	|		Сотрудники.Наименование
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		БригадыСостав.Сотрудник,
	|		БригадыСостав.Сотрудник.Наименование
	|	ИЗ
	|		Справочник.Бригады.Состав КАК БригадыСостав
	|	ГДЕ
	|		БригадыСостав.Ссылка В(&МассивБригад)) КАК ТаблицаСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияИУдержания.СрезПоследних(
	|				&НаДату,
	|				Организация = &Организация
	|					И Актуальность
	|					И ВидНачисленияУдержания В (ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплата), ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплатаПроцент), ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.ФиксированнаяСумма))) КАК ПлановыеНачисленияИУдержанияСрезПоследних
	|		ПО ТаблицаСотрудников.Сотрудник = ПлановыеНачисленияИУдержанияСрезПоследних.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.Сотрудник КАК Сотрудник,
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.Наименование КАК Наименование,
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
	|	1 КАК КТУ,
	|	ПлановыеНачисленияИУдержанияСрезПоследних.Сумма * КурсВалютыНачисления.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыНачисления.Кратность) КАК РазмерНачисленияУдержания
	|ИЗ
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний КАК ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияИУдержания.СрезПоследних(
	|				&НаДату,
	|				Организация = &Организация
	|					И Актуальность) КАК ПлановыеНачисленияИУдержанияСрезПоследних
	|		ПО ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.Сотрудник = ПлановыеНачисленияИУдержанияСрезПоследних.Сотрудник
	|			И ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.ВидНачисленияУдержания = ПлановыеНачисленияИУдержанияСрезПоследних.ВидНачисленияУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&НаДату, ) КАК КурсВалютыНачисления
	|		ПО (ПлановыеНачисленияИУдержанияСрезПоследних.Валюта = КурсВалютыНачисления.Валюта),
	|	РегистрСведений.КурсыВалют.СрезПоследних(&НаДату, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("НаДату", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("МассивБригад", МассивБригад);
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаСотрудников = МассивРезультатов[1].Выгрузить();
	
	Если ИсполнителиКлючСвязи = Неопределено Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Работы Цикл
			
			Если СтрокаТабличнойЧасти.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
				
				Для каждого СтрокаТЧ Из ТаблицаСотрудников Цикл
					
					НоваяСтрока = Исполнители.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
					НоваяСтрока.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для каждого СтрокаТЧ Из ТаблицаСотрудников Цикл
			
			НоваяСтрока = Исполнители.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			НоваяСтрока.КлючСвязи = ИсполнителиКлючСвязи;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьИсполнителиПоБригадам(МассивБригад, ИсполнителиКлючСвязи) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БригадыСостав.Сотрудник КАК Сотрудник,
	|	БригадыСостав.Сотрудник.Наименование КАК Наименование,
	|	ПлановыеНачисленияИУдержанияСрезПоследних.ВидНачисленияУдержания КАК ВидНачисленияУдержания
	|ПОМЕСТИТЬ ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний
	|ИЗ
	|	Справочник.Бригады.Состав КАК БригадыСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияИУдержания.СрезПоследних(
	|				&НаДату,
	|				Организация = &Организация
	|					И Актуальность
	|					И ВидНачисленияУдержания В (ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплата), ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплатаПроцент), ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.ФиксированнаяСумма))) КАК ПлановыеНачисленияИУдержанияСрезПоследних
	|		ПО БригадыСостав.Сотрудник = ПлановыеНачисленияИУдержанияСрезПоследних.Сотрудник
	|ГДЕ
	|	БригадыСостав.Ссылка В(&МассивБригад)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.Сотрудник КАК Сотрудник,
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.Наименование КАК Наименование,
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
	|	1 КАК КТУ,
	|	ПлановыеНачисленияИУдержанияСрезПоследних.Сумма * КурсВалютыНачисления.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыНачисления.Кратность) КАК РазмерНачисленияУдержания
	|ИЗ
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний КАК ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияИУдержания.СрезПоследних(
	|				&НаДату,
	|				Организация = &Организация
	|					И Актуальность) КАК ПлановыеНачисленияИУдержанияСрезПоследних
	|		ПО ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.Сотрудник = ПлановыеНачисленияИУдержанияСрезПоследних.Сотрудник
	|			И ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.ВидНачисленияУдержания = ПлановыеНачисленияИУдержанияСрезПоследних.ВидНачисленияУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&НаДату, ) КАК КурсВалютыНачисления
	|		ПО (ПлановыеНачисленияИУдержанияСрезПоследних.Валюта = КурсВалютыНачисления.Валюта),
	|	РегистрСведений.КурсыВалют.СрезПоследних(&НаДату, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("НаДату", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("МассивБригад", МассивБригад);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаСотрудников = МассивРезультатов[1].Выгрузить();
	
	Если ИсполнителиКлючСвязи = Неопределено Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Работы Цикл
			
			Если СтрокаТабличнойЧасти.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
				
				Для каждого СтрокаТЧ Из ТаблицаСотрудников Цикл
					
					НоваяСтрока = Исполнители.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
					НоваяСтрока.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для каждого СтрокаТЧ Из ТаблицаСотрудников Цикл
			
			НоваяСтрока = Исполнители.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			НоваяСтрока.КлючСвязи = ИсполнителиКлючСвязи;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКолонкуРезервПоОстаткам(ПараметрыОтбора = Неопределено) Экспорт
	
	Если ПараметрыОтбора = Неопределено Тогда
		ПараметрыОтбора = Новый Структура;
	КонецЕсли;
	ПараметрыОтбора.Вставить("ЭтоРазделитель", Ложь);
	
	Строки = Запасы.НайтиСтроки(ПараметрыОтбора);
	Для каждого Строка Из Строки Цикл
		Строка.Резерв = 0;
	КонецЦикла;
	
	СтрокиДляВыгрузки = ЭтотОбъект.Запасы.НайтиСтроки(ПараметрыОтбора);
	ТаблицаЗапасы = ЭтотОбъект.Запасы.Выгрузить(СтрокиДляВыгрузки,"Номенклатура, Характеристика, Партия, СтруктурнаяЕдиницаРезерв");
	ТаблицаЗапасы.Свернуть("Номенклатура, Характеристика, Партия, СтруктурнаяЕдиницаРезерв");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА &СкладВТабличнойЧасти
	|			ТОГДА ТаблицаЗапасы.СтруктурнаяЕдиницаРезерв
	|		ИНАЧЕ &СтруктурнаяЕдиница
	|	КОНЕЦ КАК СтруктурнаяЕдиницаРезерв
	|ПОМЕСТИТЬ ВТНоменклатура
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТНоменклатура.Номенклатура КАК Номенклатура,
	|	ВТНоменклатура.Характеристика КАК Характеристика,
	|	ВТНоменклатура.Партия КАК Партия,
	|	ВТНоменклатура.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиницаРезерв,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ОстаткиНаСкладе
	|ИЗ
	|	ВТНоменклатура КАК ВТНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
	|				,
	|				Организация = &Организация
	|					И ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК ЗапасыОстатки
	|		ПО ВТНоменклатура.Номенклатура = ЗапасыОстатки.Номенклатура
	|			И ВТНоменклатура.Характеристика = ЗапасыОстатки.Характеристика
	|			И ВТНоменклатура.Партия = ЗапасыОстатки.Партия
	|			И ВТНоменклатура.СтруктурнаяЕдиницаРезерв = ЗапасыОстатки.СтруктурнаяЕдиница
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТНоменклатура.Номенклатура,
	|	ВТНоменклатура.Партия,
	|	ВТНоменклатура.СтруктурнаяЕдиницаРезерв,
	|	ВТНоменклатура.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТНоменклатура.Номенклатура КАК Номенклатура,
	|	ВТНоменклатура.Характеристика КАК Характеристика,
	|	ВТНоменклатура.Партия КАК Партия,
	|	ВТНоменклатура.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиницаРезерв,
	|	СУММА(ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ) КАК КоличествоДвижение
	|ПОМЕСТИТЬ ДвижениеДокумента
	|ИЗ
	|	ВТНоменклатура КАК ВТНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|		ПО ВТНоменклатура.Номенклатура = ДвиженияДокументаЗапасы.Номенклатура
	|			И ВТНоменклатура.Характеристика = ДвиженияДокументаЗапасы.Характеристика
	|			И ВТНоменклатура.Партия = ДвиженияДокументаЗапасы.Партия
	|			И ВТНоменклатура.СтруктурнаяЕдиницаРезерв = ДвиженияДокументаЗапасы.СтруктурнаяЕдиница
	|ГДЕ
	|	ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|	И ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТНоменклатура.Партия,
	|	ВТНоменклатура.Характеристика,
	|	ВТНоменклатура.СтруктурнаяЕдиницаРезерв,
	|	ВТНоменклатура.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТНоменклатура.Номенклатура КАК Номенклатура,
	|	ВТНоменклатура.Характеристика КАК Характеристика,
	|	ВТНоменклатура.Партия КАК Партия,
	|	ВТНоменклатура.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиницаРезерв,
	|	СУММА(ЕСТЬNULL(ДвижениеДокумента.КоличествоДвижение, 0) + ЕСТЬNULL(ОстаткиНаСкладе.КоличествоОстаток, 0)) КАК КоличествоОстаток
	|ИЗ
	|	ВТНоменклатура КАК ВТНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНаСкладе КАК ОстаткиНаСкладе
	|		ПО ВТНоменклатура.Номенклатура = ОстаткиНаСкладе.Номенклатура
	|			И ВТНоменклатура.Характеристика = ОстаткиНаСкладе.Характеристика
	|			И ВТНоменклатура.Партия = ОстаткиНаСкладе.Партия
	|			И ВТНоменклатура.СтруктурнаяЕдиницаРезерв = ОстаткиНаСкладе.СтруктурнаяЕдиницаРезерв
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДвижениеДокумента КАК ДвижениеДокумента
	|		ПО ВТНоменклатура.Номенклатура = ДвижениеДокумента.Номенклатура
	|			И ВТНоменклатура.Характеристика = ДвижениеДокумента.Характеристика
	|			И ВТНоменклатура.Партия = ДвижениеДокумента.Партия
	|			И ВТНоменклатура.СтруктурнаяЕдиницаРезерв = ДвижениеДокумента.СтруктурнаяЕдиницаРезерв
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТНоменклатура.Характеристика,
	|	ВТНоменклатура.СтруктурнаяЕдиницаРезерв,
	|	ВТНоменклатура.Номенклатура,
	|	ВТНоменклатура.Партия";
	
	Запрос.УстановитьПараметр("ТаблицаЗапасы", ТаблицаЗапасы);
	Запрос.УстановитьПараметр("СкладВТабличнойЧасти", ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиницаРезерв);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	
	ТаблицаПериодов = Новый ТаблицаЗначений();
	ТаблицаПериодов.Колонки.Добавить("ДатаОтгрузки");
	ТаблицаПериодов.Колонки.Добавить("СтрокаЗапасы");
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", Выборка.Партия);
		
		Для каждого КлючИЗначение Из ПараметрыОтбора Цикл
			Если СтруктураДляПоиска.Свойство(КлючИЗначение.Ключ) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураДляПоиска.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		МассивСтрокЗапасы = Запасы.НайтиСтроки(СтруктураДляПоиска);
		Для каждого СтрокаЗапасы Из МассивСтрокЗапасы Цикл
			НоваяСтрока = ТаблицаПериодов.Добавить();
			НоваяСтрока.ДатаОтгрузки = СтрокаЗапасы.ДатаОтгрузки;
			НоваяСтрока.СтрокаЗапасы = СтрокаЗапасы;
		КонецЦикла;
		
		ВсегоОстаток = Выборка.КоличествоОстаток;
		ТаблицаПериодов.Сортировать("ДатаОтгрузки");
		Для каждого СтрокаТаблицыПериодов Из ТаблицаПериодов Цикл
			СтрокаЗапасы = СтрокаТаблицыПериодов.СтрокаЗапасы;
			ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток / СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			Если СтрокаЗапасы.Количество >= ВсегоОстаток Тогда
				СтрокаЗапасы.Резерв = ВсегоОстаток;
				ВсегоОстаток = 0;
			Иначе
				СтрокаЗапасы.Резерв = СтрокаЗапасы.Количество;
				ВсегоОстаток = ВсегоОстаток - СтрокаЗапасы.Количество;
				ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток * СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаПериодов.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ТоварыЗаполнитьКолонкуРезервПоОстаткам() Экспорт
	
	Запасы.ЗагрузитьКолонку(Новый Массив(Запасы.Количество()), "Резерв");
	Запасы.ЗагрузитьКолонку(Новый Массив(Запасы.Количество()), "РезервОтгрузка");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатурыЗапас";
	
	Запрос.УстановитьПараметр("ТаблицаЗапасы", Запасы.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						&Организация,
	|						&СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.Номенклатура.СчетУчетаЗапасов,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &Период
	|		И ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Период", Финиш);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиницаРезерв);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", Выборка.Партия);
		
		ВсегоОстаток = Выборка.КоличествоОстаток;
		МассивСтрокЗапасы = Запасы.НайтиСтроки(СтруктураДляПоиска);
		Для каждого СтрокаЗапасы Из МассивСтрокЗапасы Цикл
			ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток / СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			Если СтрокаЗапасы.Количество >= ВсегоОстаток Тогда
				СтрокаЗапасы.Резерв = ВсегоОстаток;
				СтрокаЗапасы.РезервОтгрузка = СтрокаЗапасы.Резерв;
				ВсегоОстаток = 0;
			Иначе
				СтрокаЗапасы.Резерв = СтрокаЗапасы.Количество;
				СтрокаЗапасы.РезервОтгрузка = СтрокаЗапасы.Резерв;
				ВсегоОстаток = ВсегоОстаток - СтрокаЗапасы.Количество;
				ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток * СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ТоварыЗаполнитьКолонкуРезервПоРезервам() Экспорт
	
	ЗаполнитьСтруктурнуюЕдиницуРезерваВТЧ();
	
	Запасы.ЗагрузитьКолонку(Новый Массив(Запасы.Количество()), "РезервОтгрузка");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	&Заказ КАК ЗаказПокупателя
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатурыЗапас";
	
	Запрос.УстановитьПараметр("ТаблицаЗапасы", Запасы.Выгрузить());
	Запрос.УстановитьПараметр("Заказ", Ссылка);
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						&Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.Номенклатура.СчетУчетаЗапасов,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ТаблицаЗапасы.ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|					ГДЕ
	|						ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &Период
	|		И ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ДвиженияДокументаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Период", Финиш);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиницаРезерв", Выборка.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", Выборка.Партия);
		
		ВсегоОстаток = Выборка.КоличествоОстаток;
		МассивСтрокЗапасы = Запасы.НайтиСтроки(СтруктураДляПоиска);
		Для каждого СтрокаЗапасы Из МассивСтрокЗапасы Цикл
			
			ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток / СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			Если СтрокаЗапасы.Количество >= ВсегоОстаток Тогда
				
				СтрокаЗапасы.РезервОтгрузка = ВсегоОстаток;
				ВсегоОстаток = 0;
				
			Иначе
				
				СтрокаЗапасы.РезервОтгрузка = СтрокаЗапасы.Количество;
				ВсегоОстаток = ВсегоОстаток - СтрокаЗапасы.Количество;
				ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток * СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
		Если СтрокаТабличнойЧасти.РезервОтгрузка < СтрокаТабличнойЧасти.Резерв Тогда
			СтрокаТабличнойЧасти.Резерв = СтрокаТабличнойЧасти.РезервОтгрузка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура МатериалыЗаполнитьКолонкуРезервПоОстаткам(МатериалыКлючСвязи) Экспорт
	
	ЗаполнитьСтруктурнуюЕдиницуРезерваВТЧ();
	
	Если МатериалыКлючСвязи = Неопределено Тогда
		Материалы.ЗагрузитьКолонку(Новый Массив(Материалы.Количество()), "Резерв");
		Материалы.ЗагрузитьКолонку(Новый Массив(Материалы.Количество()), "РезервОтгрузка");
	Иначе
		РезультатПоиска = Материалы.НайтиСтроки(Новый Структура("КлючСвязи", МатериалыКлючСвязи));
		Для каждого СтрокаТабличнойЧасти Из РезультатПоиска Цикл
			СтрокаТабличнойЧасти.Резерв = 0;
			СтрокаТабличнойЧасти.РезервОтгрузка = 0;
		КонецЦикла;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтборПоКлючуСвязи
	|				ТОГДА ТаблицаЗапасы.КлючСвязи = &КлючСвязи
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ТаблицаЗапасы", Материалы.Выгрузить());
	Запрос.УстановитьПараметр("ОтборПоКлючуСвязи", ?(МатериалыКлючСвязи = Неопределено, Ложь, Истина));
	Запрос.УстановитьПараметр("КлючСвязи", МатериалыКлючСвязи);
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						&Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.Номенклатура.СчетУчетаЗапасов,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &Период
	|		И ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		Если МатериалыКлючСвязи <> Неопределено Тогда
			СтруктураДляПоиска.Вставить("КлючСвязи", МатериалыКлючСвязи);
		КонецЕсли;
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиницаРезерв", Выборка.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", Выборка.Партия);
		
		ВсегоОстаток = Выборка.КоличествоОстаток;
		МассивСтрокЗапасы = Материалы.НайтиСтроки(СтруктураДляПоиска);
		Для каждого СтрокаЗапасы Из МассивСтрокЗапасы Цикл
			ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток / СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			Если СтрокаЗапасы.Количество >= ВсегоОстаток Тогда
				СтрокаЗапасы.Резерв = ВсегоОстаток;
				СтрокаЗапасы.РезервОтгрузка = СтрокаЗапасы.Резерв;
				ВсегоОстаток = 0;
			Иначе
				СтрокаЗапасы.Резерв = СтрокаЗапасы.Количество;
				СтрокаЗапасы.РезервОтгрузка = СтрокаЗапасы.Резерв;
				ВсегоОстаток = ВсегоОстаток - СтрокаЗапасы.Количество;
				ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток * СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура МатериалыЗаполнитьКолонкуРезервПоРезервам(МатериалыКлючСвязи) Экспорт
	
	ЗаполнитьСтруктурнуюЕдиницуРезерваВТЧ();
	
	Если МатериалыКлючСвязи = Неопределено Тогда
		Материалы.ЗагрузитьКолонку(Новый Массив(Материалы.Количество()), "РезервОтгрузка");
	Иначе
		РезультатПоиска = Материалы.НайтиСтроки(Новый Структура("КлючСвязи", МатериалыКлючСвязи));
		Для каждого СтрокаТабличнойЧасти Из РезультатПоиска Цикл
			СтрокаТабличнойЧасти.РезервОтгрузка = 0;
		КонецЦикла;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	&Заказ КАК ЗаказПокупателя
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтборПоКлючуСвязи
	|				ТОГДА ТаблицаЗапасы.КлючСвязи = &КлючСвязи
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ТаблицаЗапасы", Материалы.Выгрузить());
	Запрос.УстановитьПараметр("ОтборПоКлючуСвязи", ?(МатериалыКлючСвязи = Неопределено, Ложь, Истина));
	Запрос.УстановитьПараметр("КлючСвязи", МатериалыКлючСвязи);
	Запрос.УстановитьПараметр("Заказ", Ссылка);
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						&Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.Номенклатура.СчетУчетаЗапасов,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ТаблицаЗапасы.ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|					ГДЕ
	|						ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &Период
	|		И ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ДвиженияДокументаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Период", Финиш);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		Если МатериалыКлючСвязи <> Неопределено Тогда
			СтруктураДляПоиска.Вставить("КлючСвязи", МатериалыКлючСвязи);
		КонецЕсли;
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиницаРезерв", Выборка.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", Выборка.Партия);
		
		ВсегоОстаток = Выборка.КоличествоОстаток;
		МассивСтрокЗапасы = Материалы.НайтиСтроки(СтруктураДляПоиска);
		Для каждого СтрокаЗапасы Из МассивСтрокЗапасы Цикл
			
			ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток / СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			Если СтрокаЗапасы.Количество >= ВсегоОстаток Тогда
				
				СтрокаЗапасы.РезервОтгрузка = ВсегоОстаток;
				ВсегоОстаток = 0;
				
			Иначе
				
				СтрокаЗапасы.РезервОтгрузка = СтрокаЗапасы.Количество;
				ВсегоОстаток = ВсегоОстаток - СтрокаЗапасы.Количество;
				ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток * СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если МатериалыКлючСвязи = Неопределено Тогда
		Для каждого СтрокаТабличнойЧасти Из Материалы Цикл
			Если СтрокаТабличнойЧасти.РезервОтгрузка < СтрокаТабличнойЧасти.Резерв Тогда
				СтрокаТабличнойЧасти.Резерв = СтрокаТабличнойЧасти.РезервОтгрузка;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для каждого СтрокаТабличнойЧасти Из РезультатПоиска Цикл
			Если СтрокаТабличнойЧасти.РезервОтгрузка < СтрокаТабличнойЧасти.Резерв Тогда
				СтрокаТабличнойЧасти.Резерв = СтрокаТабличнойЧасти.РезервОтгрузка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДоставку(ДанныеЗаполнения)
	
	ЗначенияПолей = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "НоменклатураДоставки, СтоимостьДоставки, СтавкаНДСДоставки, СуммаНДСДоставки, Вес, Объем");
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияПолей);
	СлужбаДоставки = Справочники.СлужбыДоставки.ДоставкаСобственнымиСилами;
	
	Для каждого СтрокаСпособДоставки Из СлужбаДоставки.ДоступныеСпособыДоставки Цикл
		Если СтрокаСпособДоставки.СпособДоставки=Перечисления.СпособыДоставки.Самовывоз Тогда
			Продолжить;
		КонецЕсли; 
		СпособДоставки = СтрокаСпособДоставки.СпособДоставки;
		Прервать;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПРЕДСТАВЛЕНИЕ(КонтактныеЛица.Ссылка) КАК КонтактноеЛицо,
	|	ВЫБОР
	|		КОГДА СвязиКонтрагентКонтакт.Контрагент.КонтактноеЛицо = КонтактныеЛица.Ссылка
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Порядок,
	|	ЕСТЬNULL(КонтактнаяИнформацияТелефон.НомерТелефона, """""""") КАК КонтактныйТелефон,
	|	ЕСТЬNULL(КонтактнаяИнформацияАдресЭлектроннойПочты.АдресЭП, """""""") КАК ПочтаПолучателя
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних(, Контрагент = &Владелец) КАК СвязиКонтрагентКонтакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица КАК КонтактныеЛица
	|		ПО (СвязиКонтрагентКонтакт.Контакт = КонтактныеЛица.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактнаяИнформацияТелефон
	|		ПО (КонтактнаяИнформацияТелефон.Ссылка = КонтактныеЛица.Ссылка)
	|			И (КонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактнаяИнформацияАдресЭлектроннойПочты
	|		ПО (КонтактнаяИнформацияАдресЭлектроннойПочты.Ссылка = КонтактныеЛица.Ссылка)
	|			И (КонтактнаяИнформацияАдресЭлектроннойПочты.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|ГДЕ
	|	СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка, "КонтактноеЛицо, КонтактныйТелефон, ПочтаПолучателя");
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДозаполнитьПоУмолчанию()
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		Если Не ЗначениеЗаполнено(ВидЗаказа) Тогда
			
			ВидЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьВидЗаказНаряда();
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СостояниеЗаказа) Тогда
			
			СостояниеЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказНаряда(ВидЗаказа);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктурнаяЕдиницаРезерв) И ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			
			ПодписьКладовщика = СтруктурнаяЕдиницаРезерв.ПодписьМОЛ;
			
		КонецЕсли;
		
	Иначе // Заказ покупателя
		
		Если Не ЗначениеЗаполнено(ВидЗаказа) Тогда
			
			ВидЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьВидЗаказаПокупателя();
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СостояниеЗаказа) Тогда
			
			СостояниеЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаПокупателя(ВидЗаказа);
			
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку Тогда
			
			ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМатериалыЗаказчикаПоСпецификации(СтекСпецификацийУзлов, ТаблицаУзлы = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПродукция.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПродукция.Количество КАК Количество,
	|	ТаблицаПродукция.Коэффициент КАК Коэффициент,
	|	ТаблицаПродукция.Спецификация КАК Спецификация
	|ПОМЕСТИТЬ ВременнаяТаблицаПродукция
	|ИЗ
	|	&ТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.Спецификация <> ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)";
	
	Если ТаблицаУзлы = Неопределено Тогда
		МатериалыЗаказчика.Очистить();
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЭтоРазделитель", Ложь);
		СтруктураОтбора.Вставить("НомерВариантаКП", ОсновнойВариантКП);
		ТаблицаПродукция = Запасы.Выгрузить(СтруктураОтбора);
		Массив = Новый Массив();
		Массив.Добавить(Тип("Число"));
		ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,Новый КвалификаторыЧисла(10,3));
		ТаблицаПродукция.Колонки.Добавить("Коэффициент", ОписаниеТиповЧ);
		Для каждого СтрокаПродукция Из ТаблицаПродукция Цикл
			Если ЗначениеЗаполнено(СтрокаПродукция.ЕдиницаИзмерения)
				И ТипЗнч(СтрокаПродукция.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
				СтрокаПродукция.Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПродукция.ЕдиницаИзмерения, "Коэффициент");
			Иначе
				СтрокаПродукция.Коэффициент = 1;
			КонецЕсли;
		КонецЦикла;
		ТаблицаУзлы = ТаблицаПродукция.СкопироватьКолонки("НомерСтроки,Количество,Коэффициент,Спецификация");
		Запрос.УстановитьПараметр("ТаблицаПродукция", ТаблицаПродукция);
	Иначе
		Запрос.УстановитьПараметр("ТаблицаПродукция", ТаблицаУзлы);
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МИНИМУМ(ТаблицаПродукция.НомерСтроки) КАК НомерСтрокиПродукции,
	|	ТаблицаПродукция.Спецификация КАК СпецификацияПродукции,
	|	МИНИМУМ(ТаблицаМатериалы.НомерСтроки) КАК НомерСтрокиСостава,
	|	ТаблицаМатериалы.ТипСтрокиСостава КАК ТипСтрокиСостава,
	|	ТаблицаМатериалы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ИспользоватьХарактеристики.Значение
	|			ТОГДА ТаблицаМатериалы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	СУММА(ТаблицаМатериалы.Количество / ТаблицаМатериалы.КоличествоПродукции * ТаблицаПродукция.Коэффициент * ТаблицаПродукция.Количество) КАК Количество,
	|	ТаблицаМатериалы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаМатериалы.ТипСтрокиСостава = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокСоставаСпецификации.Узел)
	|				И ТИПЗНАЧЕНИЯ(ТаблицаМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|				И ТаблицаМатериалы.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТаблицаМатериалы.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА ТаблицаМатериалы.Спецификация = ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(СпецификацииПоУмолчанию.Спецификация, ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка))
	|		ИНАЧЕ ТаблицаМатериалы.Спецификация
	|	КОНЕЦ КАК Спецификация
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Спецификации.Состав КАК ТаблицаМатериалы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПоУмолчанию КАК СпецификацииПоУмолчанию
	|			ПО ТаблицаМатериалы.Номенклатура = СпецификацииПоУмолчанию.Номенклатура
	|				И ТаблицаМатериалы.Характеристика = СпецификацииПоУмолчанию.Характеристика
	|		ПО ТаблицаПродукция.Спецификация = ТаблицаМатериалы.Ссылка,
	|	Константа.ФункциональнаяОпцияИспользоватьХарактеристики КАК ИспользоватьХарактеристики
	|ГДЕ
	|	ТаблицаМатериалы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Спецификация,
	|	ТаблицаМатериалы.ТипСтрокиСостава,
	|	ТаблицаМатериалы.Номенклатура,
	|	ТаблицаМатериалы.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаМатериалы.ТипСтрокиСостава = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокСоставаСпецификации.Узел)
	|				И ТИПЗНАЧЕНИЯ(ТаблицаМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|				И ТаблицаМатериалы.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТаблицаМатериалы.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаМатериалы.Спецификация = ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(СпецификацииПоУмолчанию.Спецификация, ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка))
	|		ИНАЧЕ ТаблицаМатериалы.Спецификация
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИспользоватьХарактеристики.Значение
	|			ТОГДА ТаблицаМатериалы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиПродукции,
	|	НомерСтрокиСостава";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипСтрокиСостава = Перечисления.ТипыСтрокСоставаСпецификации.Узел Тогда
			ТаблицаУзлы.Очистить();
			Если НЕ СтекСпецификацийУзлов.Найти(Выборка.Спецификация) = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'При попытке заполнить табличную часть ""Материалы заказчика"" по спецификации,
				|обнаружено рекурсивное вхождение элемента'")+" "+Выборка.Номенклатура+" "+НСтр("ru = 'в спецификации'")+" "+Выборка.СпецификацияПродукции+"
				|Операция не выполнена!";
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			СтекСпецификацийУзлов.Добавить(Выборка.Спецификация);
			НоваяСтрока = ТаблицаУзлы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			ЗаполнитьМатериалыЗаказчикаПоСпецификации(СтекСпецификацийУзлов, ТаблицаУзлы);
		Иначе
			НоваяСтрока = МатериалыЗаказчика.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЕсли;
	КонецЦикла;
	
	СтекСпецификацийУзлов.Очистить();
	МатериалыЗаказчика.Свернуть("Номенклатура, Характеристика, ЕдиницаИзмерения", "Количество");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура отмены проведения у подченненой счет фактуры
//
Процедура КонтрольПодчиненнойСчетФактуры()
	
	СтруктураСчетаФактуры = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(Ссылка);
	Если СтруктураСчетаФактуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СчетФактура	 = СтруктураСчетаФактуры.Ссылка;
	Если Не СчетФактура.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'В связи с отсутствием движений у документа %ПредставлениеТекущегоДокумента% распроводится счет фактура %ПредставлениеСчетФактуры%.'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТекущегоДокумента%", """Заказ-наряд  № " + Номер + " от " + Формат(Дата, "ДФ=dd.MM.yyyy") + """");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеСчетФактуры%", """Счет фактура (выданная) № " + СтруктураСчетаФактуры.Номер + " от " + СтруктураСчетаФактуры.Дата + """");
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
	СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
	СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры

Процедура ПривестиДанныеКСогласованномуСостоянию()
	
	Если СостояниеЗаказа <> Справочники.СостоянияЗаказовПокупателей.Завершен 
		И СостояниеЗаказа <> Справочники.СостоянияЗаказНарядов.Завершен Тогда
		
		ЭтотОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.ПустаяСсылка();
	КонецЕсли;
	
	Если ВариантЗавершения <> Перечисления.ВариантыЗавершенияЗаказа.Отменен Тогда
		ЭтотОбъект.ПричинаОтмены	= Справочники.ПричиныОтменыЗаказа.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьСуммуДокумента()
	
	СуммаДокумента = 0;
	
	Если ОжидаетсяВыборВариантаКП Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Стр Из Запасы Цикл
		Если Стр.ЭтоРазделитель ИЛИ Стр.НомерВариантаКП <> ОсновнойВариантКП Тогда
			Продолжить;
		КонецЕсли;
		СуммаДокумента = СуммаДокумента + Стр.Всего;
	КонецЦикла;
	
	СуммаДокумента = СуммаДокумента + Работы.Итог("Всего") + СтоимостьДоставки + ?(СуммаВключаетНДС, 0, СуммаНДСДоставки);
	
КонецПроцедуры

Процедура ВыполнитьПроверкуОграниченийСертификатов(Отказ)
	
	// Проверка срока действия
	РаботаСПодарочнымиСертификатами.ПроверитьСрокДействия(ЭтотОбъект, "Запасы", Отказ);
	РаботаСПодарочнымиСертификатами.ПроверитьСрокДействия(ЭтотОбъект, "Предоплата", Отказ);
	
	// Проверка области действия
	СтруктураДляПроверки = Новый Структура;
	ТаблицаТоварыУслуги = Запасы.Выгрузить(,"Номенклатура, Характеристика, Сумма");
	Для Каждого СтрокаТаблицы Из Работы Цикл
		НоваяСтрока = ТаблицаТоварыУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	СтруктураДляПроверки.Вставить("Запасы", ТаблицаТоварыУслуги);
	Сертификаты = Предоплата.Выгрузить(
	Новый Структура("ОплатаСертификатом", Истина),
	"Документ, СуммаРасчетов");
	Сертификаты.Колонки.Документ.Имя = "ПодарочныйСертификат";
	Сертификаты.Колонки.СуммаРасчетов.Имя = "Сумма";
	СтруктураДляПроверки.Вставить("Сертификаты", Сертификаты);
	РаботаСПодарочнымиСертификатами.ПроверитьОбластьДействияСертификатов(СтруктураДляПроверки, Отказ);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеЭтаповПроизводства(Отказ, ОтменаПроведения = Ложь)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЭтапыПроизводства") Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование таблицы продукции, использующей этапы производства
	Если ОтменаПроведения ИЛИ ОжидаетсяВыборВариантаКП Тогда
		ТаблицаПродукции = Запасы.ВыгрузитьКолонки();
	Иначе
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НомерВариантаКП", ОсновнойВариантКП);
		ТаблицаПродукции = Запасы.Выгрузить(СтруктураОтбора);
	КонецЕсли; 
	ТаблицаПродукции.Колонки.Добавить("ИмяТЧ", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТаблицаПродукции.ЗаполнитьЗначения("Запасы", "ИмяТЧ");
	Для каждого СтрокаТабличнойЧасти Из Материалы Цикл
		Если ОтменаПроведения Тогда
			Прервать;
		КонецЕсли; 
		НоваяСтрока = ТаблицаПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		НоваяСтрока.ИмяТЧ = "Материалы";
	КонецЦикла;
	ПроизводствоСервер.ДобавитьУдаленнуюПродукцию(Ссылка, ТаблицаПродукции, "Запасы");
	ПроизводствоСервер.ДобавитьУдаленнуюПродукцию(Ссылка, ТаблицаПродукции, "Материалы");
	ТаблицаПродукции.Колонки.Добавить("ЗаказНаПроизводство", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	ТаблицаПродукции.Колонки.Добавить("ЗаказПокупателя", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	ТаблицаПродукции.ЗаполнитьЗначения(Ссылка, "ЗаказПокупателя");
	ТаблицаПродукции.Колонки.Добавить("ПодразделениеЗавершающегоЭтапа", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	МассивСпецификаций = Новый Массив;
	Для каждого СтрокаТабличнойЧасти Из ТаблицаПродукции Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) Тогда
			Продолжить;
		КонецЕсли; 
		Если МассивСпецификаций.Найти(СтрокаТабличнойЧасти.Спецификация)=Неопределено Тогда
			МассивСпецификаций.Добавить(СтрокаТабличнойЧасти.Спецификация);
		КонецЕсли; 
	КонецЦикла; 
	МассивСпецификаций = ПроизводствоСервер.СпецификацииСПоэтапнымПроизводством(МассивСпецификаций);
	ПроверяемаяПродукция = ТаблицаПродукции.СкопироватьКолонки();
	Для каждого СтрокаПродукция Из ТаблицаПродукции Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаПродукция.Спецификация) ИЛИ МассивСпецификаций.Найти(СтрокаПродукция.Спецификация)=Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Если СтрокаПродукция.Резерв>=СтрокаПродукция.Количество Тогда
			Продолжить;
		КонецЕсли;
		СтрокаПродукция.Количество = СтрокаПродукция.Количество-СтрокаПродукция.Резерв;
		ЗаполнитьЗначенияСвойств(ПроверяемаяПродукция.Добавить(), СтрокаПродукция);
	КонецЦикла;
	
	// Запрет дублирования продукции
	ТаблицаКонтроляДублей = ПроверяемаяПродукция.Скопировать();
	ТаблицаКонтроляДублей.Колонки.Добавить("КоличествоСтрок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0)));
	ТаблицаКонтроляДублей.ЗаполнитьЗначения(1, "КоличествоСтрок");
	ТаблицаКонтроляДублей.Свернуть("ЗаказПокупателя, ЗаказНаПроизводство, Номенклатура, Характеристика, Партия", "КоличествоСтрок");
	Для каждого СтрокаПродукция Из ТаблицаКонтроляДублей Цикл
		Если СтрокаПродукция.КоличествоСтрок>1 Тогда
			СтруктураОтбора = Новый Структура("ЗаказПокупателя, ЗаказНаПроизводство, Номенклатура, Характеристика, Партия");
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаПродукция);
			СтрокиТЧ = ТаблицаПродукции.НайтиСтроки(СтруктураОтбора);
			Для каждого НайденнаяСтрока Из СтрокиТЧ Цикл
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				СтрШаблон(НСтр("ru = 'Дублирующаяся продукция, использующая этапы производства, в строке %1'"), НайденнаяСтрока.НомерСтроки),
				"Запасы",
				НайденнаяСтрока.НомерСтроки,
				"Номенклатура",
				Отказ);
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
	
	// Проверка уникальности завершающего подразделения и количества продукции
	ПроизводствоСервер.ПроверкаПоэтапногоПроизводства(ЭтотОбъект, ПроверяемаяПродукция, Отказ);
	
КонецПроцедуры

Процедура ЗаполнитьСтруктурнуюЕдиницуРезерваВТЧ()
	
	Если ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) 
			ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Номенклатура)<>Тип("СправочникСсылка.Номенклатура") Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ СтрокаТабличнойЧасти.ТипНоменклатурыЗапас Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = СтруктурнаяЕдиницаРезерв;
		СтрокаТабличнойЧасти.Ячейка = Ячейка;
	КонецЦикла;
	Для каждого СтрокаТабличнойЧасти Из Материалы Цикл
		СтрокаТабличнойЧасти.СтруктурнаяЕдиницаРезерв = СтруктурнаяЕдиницаРезерв;
		СтрокаТабличнойЧасти.Ячейка = Ячейка;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область  EFSOLСЛУЖБАДОСТАВКИ
///////////////////////////////////////////////////////////////////////////////
// EFSOL СЛУЖБА ДОСТАВКИ

//EFSOL_oks_kry_19.03.2015 18:20:54_BEGIN


Функция СформироватьНомерДокумента(Номер)
	
	ТекКод = СтрЗаменить(Номер,Символы.НПП,"");
	ТекКод = СтрЗаменить(ТекКод," ","");
	Если СтрДлина(ТекКод) < 13 Тогда
		Пока СтрДлина(ТекКод) < 13 Цикл
			ТекКод = "0" + ТекКод;
		КонецЦикла;		
	КонецЕсли;
	
	Возврат ТекКод;
	
КонецФункции 

Процедура ОчиститьРеквизитыДоставки()
	
	// очистить неиспользуемые адреса
	Если ES_ВидДоставки = Перечисления.ES_ВидыДоставки.СкладСклад
		//ЭР Несторук С.И. 13.02.2017 16:57:07 {
		ИЛИ ES_ВидДоставки = Перечисления.ES_ВидыДоставки.Самовывоз 
		//ЭР Несторук С.И. 13.02.2017 16:57:07 }
		Тогда
		//ES_АдресДоставки 		= "";
		//ES_ПолучательРегион 	= Неопределено;
	Иначе
		ES_СкладДоставки 		= Неопределено;
		ES_АдресСкладаДоставки 	= Неопределено;
		
	КонецЕсли; 
	
	// очистить ТЧ Грузы
	Если ES_ПредставлениеГрузов = Перечисления.ES_ПредставлениеГрузов.Запасы Тогда
		ES_СписокГрузов.Очистить();
	ИначеЕсли ES_ПредставлениеГрузов = Перечисления.ES_ПредставлениеГрузов.Места Тогда
		ES_Грузы.Очистить();
	КонецЕсли; 
	
	// очистить данные по заборам
	Если НЕ ES_ВидДоставки = Перечисления.ES_ВидыДоставки.ДвериДвери Тогда
		ES_ВидЗабора 			= Неопределено;
		ES_ЗаборАдрес 			= "";
		ES_ЗаборАдресДолгота 	= 0;
		ES_ЗаборАдресШирота 	= 0;
		ES_ЗаборДата 			= Неопределено;
		ES_ЗаборВремяС 			= Неопределено;
		ES_ЗаборВремяПо 		= Неопределено;
		ES_ЗаборОтправитель 	= "";
		ES_ЗаборКонтактноеЛицо 	= "";
		ES_ЗаборРегион 			= Неопределено;
		ES_ЗаборТелефон 		= "";
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалениеЗаписейИзРСES_СостоянияЗаказов()
	
	НаборЗаписейРегистра = РегистрыСведений.ES_СостоянияЗаказов.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Отбор.Заказ.Установить(Ссылка);
	НаборЗаписейРегистра.Записать();
	
КонецПроцедуры

Процедура СоздатьЗаборГрузаНаОснованииЗаказа(Забор)
	
	ЭтоНовыйЗабор = Истина;
	Если ЗначениеЗаполнено(Забор) Тогда
		ЭтоНовыйЗабор = Ложь;
		НовДокЗабор = Забор.ПолучитьОбъект();
	Иначе
	НовДокЗабор = Документы.ES_ЗаборГруза.СоздатьДокумент();
	НовДокЗабор.Дата = Дата + 1;//ТекущаяДатаСеанса();
	КонецЕсли;
	НовДокЗабор.ДокументОснование = Ссылка;	
		
	Если НЕ ЭтоНовыйЗабор И НовДокЗабор.Дата <= Дата Тогда
		НовДокЗабор.Дата = Дата +1;
	КонецЕсли;
	Если НовДокЗабор.Организация.Пустая() Тогда
		НовДокЗабор.Организация 	= ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Организация);
	КонецЕсли;
	
	НовДокЗабор.Адрес 				= ES_ЗаборАдрес;
	НовДокЗабор.АдресДолгота 		= ES_ЗаборАдресДолгота;
	НовДокЗабор.АдресШирота 		= ES_ЗаборАдресШирота;
	//ЭР Несторук С.И. 15.02.2017 12:18:31 {
	НовДокЗабор.ВидЗабора 			= ?(ЗначениеЗаполнено(ES_ВидЗабора), ES_ВидЗабора, Перечисления.ES_ВидыЗабора.ПодЗаказ);
	//НовДокЗабор.ВидЗабора 			= ?(ЗначениеЗаполнено(ES_ВидЗабора), ES_ВидЗабора, Перечисления.ES_ВидыЗабора.НаСклад);
	//ЭР Несторук С.И. 15.02.2017 12:18:31 }
	//ES_Савченко К.Р. 10.08.2017 +
	НовДокЗабор.ВремяЗабораС 		= ?(ЗначениеЗаполнено(ES_ЗаборВремяС),ES_ЗаборВремяС , '000101010900');
	НовДокЗабор.ВремяЗабораПо 		= ?(ЗначениеЗаполнено(ES_ЗаборВремяПо),ES_ЗаборВремяПо, '000101011800');
	//ES_Савченко К.Р. 10.08.2017 +
    НовДокЗабор.ДатаЗабора 			= ES_ЗаборДата;
	НовДокЗабор.Заказчик 			= Контрагент;
	НовДокЗабор.ES_Договор			= Договор;
	НовДокЗабор.КоличествоМест 		= ES_КоличествоМест;
	//ЕФСОЛ Несторук 28.09.2016 +
	//НовДокЗабор.Комментарий 		= "Создан автоматически" + Символы.ПС + Комментарий;
	НовДокЗабор.Комментарий 		= ES_ЗаборКомментарий;
	//ЕФСОЛ Несторук 28.09.2016 -
	НовДокЗабор.КонтактноеЛицо 		= ES_ЗаборКонтактноеЛицо;
	НовДокЗабор.Курьер 				= ES_Курьер;
	НовДокЗабор.НомерНакладной 		= ES_НомерНакладной;
	НовДокЗабор.ОбщийВес 			= ES_ОбщийВес;
	НовДокЗабор.ОбщийОбъем			= ES_Объем;
	НовДокЗабор.ОбщийОбъемныйВес 	= ES_ОбщийОбъемныйВес;
	НовДокЗабор.Отправитель 		= ES_ЗаборОтправитель;
	НовДокЗабор.ПредставлениеГрузов = ES_ПредставлениеГрузов;
	НовДокЗабор.Регион 				= ES_ЗаборРегион;
	//НовДокЗабор.СуммаДокумента 		= ES_НППлан;
	НовДокЗабор.Телефон 			= ES_ЗаборТелефон;
	НовДокЗабор.Автор				= Автор;
	НовДокЗабор.Срочность			= ES_СрочностьДоставки;
	//ЭР Несторук С.И. 24.02.2017 18:13:45 {
	НовДокЗабор.ПредставлениеГрузов	= Перечисления.ES_ПредставлениеГрузов.Запасы;
	//ЭР Несторук С.И. 21.09.2017 11:30:12 {
	НовДокЗабор.ES_Страна			= ES_ЗаборСтранаОтправитель;
	НовДокЗабор.ES_Индекс			= ES_ЗаборИндексОтправитель;
	НовДокЗабор.ES_Области			= ES_ЗаборОбластьОтправитель;
	НовДокЗабор.ES_АдресДоставки	= ES_ЗаборАдресОтправитель;
	НовДокЗабор.ES_Город			= ES_Город1;
	НовДокЗабор.ES_АдресДоставкиКорпус		= ES_АдресЗаборКорпус;
	НовДокЗабор.ES_АдресДоставкиДом			= ES_АдресЗаборДом;
	НовДокЗабор.ES_АдресДоставкиКвартира 	= ES_АдресЗаборКвартира;
	НовДокЗабор.ES_АдресДоставкиСтроение    = ES_АдресЗаборСтроение;
	НовДокЗабор.ES_ИзКЛАДР    				= ES_ЗаборИзКЛАДР;
	НовДокЗабор.ES_НомерРеестра	= ES_Манифест;
	//}ЭР Несторук С.И.
	НовДокЗабор.Грузы.Очистить();
	Для каждого СтрГруз ИЗ ES_Грузы Цикл
		НовСтрГрузы = НовДокЗабор.Грузы.Добавить();
		НовСтрГрузы.Номенклатура 		= СтрГруз.Номенклатура;
		НовСтрГрузы.Характеристика 		= СтрГруз.Характеристика;
		НовСтрГрузы.Партия 				= СтрГруз.Партия;
		НовСтрГрузы.Количество 			= СтрГруз.Количество;
		НовСтрГрузы.ЕдиницаИзмерения 	= СтрГруз.ЕдиницаИзмерения;
		НовСтрГрузы.НППлан 				= СтрГруз.НППлан;
		НовСтрГрузы.Содержание 			= СтрГруз.Содержание;
		НовСтрГрузы.Цена 				= СтрГруз.Цена;
		НовСтрГрузы.ПроцентСкидкиНаценки = СтрГруз.ПроцентСкидкиНаценки;
		//ЭР Несторук С.И. 24.02.2017 17:32:06 {
		НовСтрГрузы.Вес					= СтрГруз.Вес;
		НовСтрГрузы.Объем				= СтрГруз.Объем;
		НовСтрГрузы.ОбъемныйВес			= СтрГруз.ОбъемныйВес;
		НовСтрГрузы.ОбьявленнаяСтоимость = СтрГруз.ОбьявленнаяСтоимость;
		НовСтрГрузы.Опасность			= СтрГруз.Опасность;
		НовСтрГрузы.Артикул				= СтрГруз.Артикул;
		НовСтрГрузы.Штрихкод			= СтрГруз.Штрихкод;
		//}ЭР Несторук С.И.
	КонецЦикла; 
	
	//НайтиСроки = НовДокЗабор.заказы.НайтиСтроки(Новый Структура("Заказ", Ссылка));
	//Если НайтиСроки.Количество() = 0 Тогда
	//	ТЧСбор = НовДокЗабор.Заказы.Добавить();
	//	ТЧСбор.Заказ = Ссылка;  	
	//КонецЕсли;
	
	
	
	// Заполнение табличных частей документа
	//Если ES_ПредставлениеГрузов = Перечисления.ES_ПредставлениеГрузов.Места Тогда
	//	// Заполнение Грузами
	//	Для каждого СтрГруз ИЗ ES_СписокГрузов Цикл
	//		НовСтрСписокГрузов = НовДокЗабор.СписокГрузов.Добавить();
	//		НовСтрСписокГрузов.КлючСтроки 		= СтрГруз.КлючСтроки;
	//		НовСтрСписокГрузов.Вес 				= СтрГруз.Вес;
	//		НовСтрСписокГрузов.Высота 			= СтрГруз.Высота;
	//		НовСтрСписокГрузов.Длина 			= СтрГруз.Длина;
	//		НовСтрСписокГрузов.Ширина 			= СтрГруз.Ширина;
	//		НовСтрСписокГрузов.НППлан 			= СтрГруз.НППлан;
	//		НовСтрСписокГрузов.ОбъемныйВес 		= СтрГруз.ОбъемныйВес;
	//		НовСтрСписокГрузов.ОписаниеГруза 	= СтрГруз.ОписаниеГруза;
	//		НовСтрСписокГрузов.Страховка 		= СтрГруз.Страховка;
	//		НовСтрСписокГрузов.ТипГруза 		= СтрГруз.ТипГруза;
	//	КонецЦикла; 
	//	
	//ИначеЕсли ES_ПредставлениеГрузов = Перечисления.ES_ПредставлениеГрузов.Запасы Тогда 	
	//	// Заполнение Номенклатурой
	
		//Для каждого СтрГруз ИЗ ES_Грузы Цикл
		//	НовСтрГрузы = НовДокЗабор.Грузы.Добавить();
		//	НовСтрГрузы.Номенклатура 		= СтрГруз.Номенклатура;
		//	НовСтрГрузы.Характеристика 		= СтрГруз.Характеристика;
		//	НовСтрГрузы.Партия 				= СтрГруз.Партия;
		//	НовСтрГрузы.Количество 			= СтрГруз.Количество;
		//	НовСтрГрузы.ЕдиницаИзмерения 	= СтрГруз.ЕдиницаИзмерения;
		//	НовСтрГрузы.НППлан 				= СтрГруз.НППлан;
		//	НовСтрГрузы.Содержание 			= СтрГруз.Содержание;
		//	НовСтрГрузы.Цена 				= СтрГруз.Цена;
		//	НовСтрГрузы.ПроцентСкидкиНаценки = СтрГруз.ПроцентСкидкиНаценки;
		//	//ЭР Несторук С.И. 24.02.2017 17:32:06 {
		//	НовСтрГрузы.Вес					= СтрГруз.Вес;
		//	НовСтрГрузы.Объем				= СтрГруз.Объем;
		//	НовСтрГрузы.ОбъемныйВес			= СтрГруз.ОбъемныйВес;
		//	НовСтрГрузы.ОбьявленнаяСтоимость = СтрГруз.ОбьявленнаяСтоимость;
		//	НовСтрГрузы.Опасность			= СтрГруз.Опасность;
		//	//}ЭР Несторук С.И.
		//КонецЦикла; 
	//КонецЕсли; 
//}ЭР Несторук С.И.	
	Попытка
		Если ЭтоНовыйЗабор Тогда
			НовДокЗабор.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить("Создан новый " + НовДокЗабор);
		Иначе 
			НовДокЗабор.Записать();
		КонецЕсли;
	Исключение
		//НовДокЗабор.Записать(РежимЗаписиДокумента.Запись);
		Сообщить("Не удалось создать Забор груза на основании заказа" + Ссылка);
		//ОписаниеОшибки()
	КонецПопытки;
	
КонецПроцедуры 

Процедура ДвиженияПоРегистрамДоставки()
	
	// Движения по статусам
	ДвиженияВРегистрыСтатусов();
	
	// РС ES_СостоянияЗаказов
	ДвиженияВРССостоянияЗаказов();
	
	//// РС ES_СведенияОЗаказах
	//ДвиженияВРССведенияОЗаказах();
	
	// РС ES_ДанныеПоЗаказам
	ДвиженияВРСДанныеПоЗаказам();
	
	// РС ES_ГрузыВЗаказах
	ДвиженияВРСГрузыВЗаказах();
	
	// РС ES_НоменклатураВЗаказах
	ДвиженияВРСНоменклатураВЗаказах();
	
	// РС ES_ИзменяемыеРеквизитыЗаказов
	ДвиженияВРСИзменяемыеРеквизитыЗаказов();
	
	// РН ES_УчетДСпоЗаказамНаДоставку
	ДвиженияВРНУчетДСпоЗаказамНаДоставку();
	
	//ЭР Несторук С.И. 13.04.2017 13:44:14 {
	//РН ES_НоменклатураВЗаказах
	ДвиженияВРННоменклатураВЗаказах();
	//}ЭР Несторук С.И.

КонецПроцедуры

//Регистр наколения - для того, что бы списывать товары при проведении Чека ККМ
Процедура ДвиженияВРННоменклатураВЗаказах()
	ИспользоватьНоменклатуруДляЧеков = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ИспользоватьНоменклатуруДляЧеков);
	ИспользоватьНоменклатуруДляЧеков = ?(ИспользоватьНоменклатуруДляЧеков= Неопределено, Ложь, ИспользоватьНоменклатуруДляЧеков);
	Если ИспользоватьНоменклатуруДляЧеков Тогда
		НоменклатураДляЧеков = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.НоменклатураДляЧека);
		Если НЕ ЗначениеЗаполнено(НоменклатураДляЧеков) Тогда
			Возврат;
		КонецЕсли;
		Если Ссылка.ES_НППлан = 0 ИЛИ Ссылка.ES_Предоплачен Тогда
			Возврат;
		КонецЕсли;
		
		Движения.ES_РННоменклатураВЗаказах.Записывать = Истина;
		Движение = Движения.ES_РННоменклатураВЗаказах.ДобавитьПриход();
		Движение.Заказ = Ссылка;
		Движение.Номенклатура = НоменклатураДляЧеков;
		Движение.Содержание		= НоменклатураДляЧеков.Наименование;
		Движение.Количество = 1;
		Движение.Период = Дата;
		
	Иначе	
		Если ES_Грузы.Количество() > 0 Тогда
			Движения.ES_РННоменклатураВЗаказах.Записывать = Истина;
			Для каждого Стр ИЗ ES_Грузы Цикл
				Движение = Движения.ES_РННоменклатураВЗаказах.ДобавитьПриход();
				Движение.Заказ = Ссылка;
				Движение.Номенклатура = Стр.Номенклатура;
				Движение.Содержание		= Стр.Содержание;
				Движение.Количество = Стр.Количество;
				Движение.Период = Дата;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ДвиженияВРегистрыСтатусов()
	
	ДатаПроведения = Дата;
	
	Если ES_ВидДоставки = Перечисления.ES_ВидыДоставки.Самовывоз Тогда
		//ЭР Несторук С.И. 09.02.2017 12:57:49 {
		//СтатусЗаказаДляПроведения = Перечисления.ES_СтатусыЗаказов.ОжидаетВыдачи;
		СтатусЗаказаДляПроведения = Перечисления.ES_СтатусыЗаказов.Подготовлен;
		//ЭР Несторук С.И. 09.02.2017 12:57:49 }
	ИначеЕсли ES_ВидДоставки = Перечисления.ES_ВидыДоставки.ДвериДвери 
		//ЕФСОл Несторук 25.07.2016+
		И НЕ ES_ВидЗабора = Перечисления.ES_ВидыЗабора.Упрощенный
		//ЕФСОл Несторук 25.07.2016-
		Тогда 	
		СтатусЗаказаДляПроведения = Перечисления.ES_СтатусыЗаказов.ТребуетсяЗабор;
	Иначе
		СтатусЗаказаДляПроведения = Перечисления.ES_СтатусыЗаказов.Подготовлен;
	КонецЕсли;
	
	//ЕФСОл Несторук 21.07.2016+
	Если ES_ОтмененЗаказчиком Тогда
		//ТекСтатус = ES_ОбщегоНазначения.ПолучитьТекСтатусЗаказа(Ссылка);
		//Если ТекСтатус = Перечисления.ES_СтатусыЗаказов.ПодготовленПринят
		//	ИЛИ ТекСтатус = Перечисления.ES_СтатусыЗаказов.НазначенПринят Тогда 
		//	СтатусЗаказаДляПроведения = Перечисления.ES_СтатусыЗаказов.ОтмененПринят;
		//Иначе
			СтатусЗаказаДляПроведения = Перечисления.ES_СтатусыЗаказов.Отменен;
		//КонецЕсли;
		ДатаПроведения = ТекущаяДата();
	КонецЕсли;
	//ЕФСОл Несторук 21.07.2016-
	
	//ЕФСОЛ Савченко К.Р. 14.09.2017 +
	Если ES_НеправильныйАдрес Тогда
		СтатусЗаказаДляПроведения = Перечисления.ES_СтатусыЗаказов.НеправильныйАдрес;
		ДатаПроведения = ТекущаяДата();
	КонецЕсли;
	//ЕФСОЛ Савченко К.Р. 14.09.2017 -
		
	// РС ES_СтатусыЗаказов
	Движения.ES_СтатусыЗаказов.Записывать = Истина;
	Движение = Движения.ES_СтатусыЗаказов.Добавить();
	Движение.Период 					= ДатаПроведения;
	Движение.Заказ 						= Ссылка;
	Движение.СтатусЗаказа 				= СтатусЗаказаДляПроведения;
	Движение.Ответственный 				= Ответственный;
	//Движение.ДатаПоследнегоПроведения 	= ТекущаяДата();
	
	////
	//Если  НЕ Ссылка.Пустая()  и СтатусЗаказаДляПроведения =  Перечисления.ES_СтатусыЗаказов.Подготовлен Тогда 
	//	Запрос = Новый Запрос("ВЫБРАТЬ
	//	|	NS_СМСОповещение.ЗаказПокупателя
	//	|ИЗ
	//	|	РегистрСведений.NS_СМСОповещение КАК NS_СМСОповещение
	//	|ГДЕ
	//	|	NS_СМСОповещение.ЗаказПокупателя = &ЗаказПокупателя
	//	|	//И NS_СМСОповещение.ТипСМС = &ТипСМС
	//	|	И NS_СМСОповещение.СтатусЗаказа = &СтатусЗаказа");
	//	
	//	Запрос.УстановитьПараметр("ЗаказПокупателя",Ссылка);					  
	//	Запрос.УстановитьПараметр("СтатусЗаказа",СтатусЗаказаДляПроведения);
	//    Выборка = Запрос.Выполнить().Выгрузить();
	//	Если   Выборка.Количество()=0 Тогда 
	//		МенеджерЗаписи = РегистрыСведений.NS_СМСОповещение.СоздатьМенеджерЗаписи();
	//		
	//		МенеджерЗаписи.ЗаказПокупателя = Ссылка;
	//		МенеджерЗаписи.ТипСМС = "1";
	//		МенеджерЗаписи.СтатусЗаказа = СтатусЗаказаДляПроведения;
	//		МенеджерЗаписи.ВРаботе  = Ложь;
	//		МенеджерЗаписи.ДатаИзменения = Истина;
	//		МенеджерЗаписи.Записать();	
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;

	////
		
КонецПроцедуры

Процедура ДвиженияВРССостоянияЗаказов()
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ES_СостоянияЗаказовСрезПоследних.Заказ,
	//	|	ES_СостоянияЗаказовСрезПоследних.СостояниеЗаказа
	//	|ИЗ
	//	|	РегистрСведений.ES_СостоянияЗаказов.СрезПоследних(, Заказ = &Заказ) КАК ES_СостоянияЗаказовСрезПоследних";
	//
	//Запрос.УстановитьПараметр("Заказ", Ссылка);
	//
	//ЗаписатьВРССостояние = Истина;
	//ПериодДляЗаписи = ТекущаяДата();
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//Если НЕ РезультатЗапроса.Пустой() Тогда
	//	Выборка = РезультатЗапроса.Выбрать();
	//	Если Выборка.Следующий() И Выборка.СостояниеЗаказа = СостояниеЗаказа Тогда
	//		ЗаписатьВРССостояние = Ложь;
	//	КонецЕсли;
	//Иначе
	//	ПериодДляЗаписи = Дата;
	//КонецЕсли;
	//
	//Если ЗаписатьВРССостояние Тогда
	//	
	//	Если НЕ ЗначениеЗаполнено(СостояниеЗаказа) Тогда
	//		Если Константы.ИспользоватьСостоянияЗаказовПокупателей.Получить() Тогда
	//			СостояниеЗаказаПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "СостояниеНовогоЗаказаПокупателя");
	//		Иначе
	//			СостояниеЗаказаПоУмолчанию = Константы.СостояниеВРаботеЗаказовПокупателей.Получить();
	//		КонецЕсли;
	//	Иначе
	//		СостояниеЗаказаПоУмолчанию = СостояниеЗаказа;
	//	КонецЕсли; 

	//	НаборЗаписей = РегистрыСведений.ES_СостоянияЗаказов.СоздатьНаборЗаписей();
	//	НаборЗаписей.Отбор.Заказ.Установить(Ссылка);
	//	НаборЗаписей.Отбор.Период.Установить(ПериодДляЗаписи);
	//	НаборЗаписей.Прочитать();
	//	
	//	НоваяЗапись = НаборЗаписей.Добавить();
	//	НоваяЗапись.Период 				= ПериодДляЗаписи;
	//	НоваяЗапись.Заказ 				= Ссылка;
	//	НоваяЗапись.СостояниеЗаказа 	= СостояниеЗаказаПоУмолчанию;
	//	НоваяЗапись.Ответственный 		= УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
	//	НоваяЗапись.ИнфаОРегистраторе 	= Ссылка;
	//	
	//	НаборЗаписей.Записать();
	//	
	//КонецЕсли; 
		
КонецПроцедуры

Процедура ДвиженияВРСДанныеПоЗаказам()
	
	Движения.ES_ДанныеПоЗаказам.Записывать = Истина;
	Движение = Движения.ES_ДанныеПоЗаказам.Добавить();
	
	Движение.Период 						= Дата;
	Движение.Регистратор 					= Ссылка;
	Движение.Заказ 							= Ссылка;
	Движение.ДатаДокумента 					= Дата;
	Движение.НомерДокумента 				= Номер;
	Движение.ДатаОтгрузки 					= ДатаОтгрузки;
	Движение.Договор 						= Договор;
	Движение.Закрыт 						= УдалитьЗакрыт;
	Движение.Заказчик 						= Контрагент;
	Движение.Организация 					= Организация;
	Движение.Ответственный 					= Ответственный;
	Движение.СостояниеЗаказа 				= СостояниеЗаказа;
	Движение.СтруктурнаяЕдиницаПродажи 		= СтруктурнаяЕдиницаПродажи;
	Движение.СтруктурнаяЕдиницаРезерв 		= СтруктурнаяЕдиницаРезерв;
	Движение.СуммаДокумента 				= СуммаДокумента;
	Движение.АдресДоставки 					= ES_АдресДоставки;
	Движение.АдресДоставкиДолгота 			= ES_АдресДоставкиДолгота;
	Движение.АдресДоставкиШирота 			= ES_АдресДоставкиШирота;
	Движение.АдресСкладаДоставки 			= ES_АдресСкладаДоставки;
	Движение.ДатаДоставки 					= ES_ДатаДоставки;
	Движение.ВидДоставки 					= ES_ВидДоставки;
	Движение.ВидЗабора 						= ES_ВидЗабора;
	Движение.ВидОплаты 						= ES_ВидОплаты;
	Движение.ВремяДоставкиС 				= ES_ВремяДоставкиС;
	Движение.ВремяДоставкиПо 				= ES_ВремяДоставкиПо;
	Движение.ВхНакладная 					= ES_ВхНакладная;
	Движение.ЗаказчикИОтправительОдноЛицо 	= ES_ЗаказчикИОтправительОдноЛицо;
	Движение.ЗаказчикКонтактноеЛицо 		= ES_ЗаказчикКонтактноеЛицо;
	Движение.ЗаказчикТелефон 				= ES_ЗаказчикТелефон;
	Движение.ЗаборАдрес 					= ES_ЗаборАдрес;
	Движение.ЗаборАдресДолгота 				= ES_ЗаборАдресДолгота;
	Движение.ЗаборАдресШирота 				= ES_ЗаборАдресШирота;
	Движение.ЗаборДата 						= ES_ЗаборДата;
	Движение.ЗаборВремяС 					= ES_ЗаборВремяС;
	Движение.ЗаборВремяПо 					= ES_ЗаборВремяПо;
	Движение.ЗаборОтправитель 				= ES_ЗаборОтправитель;
	Движение.ЗаборКонтактноеЛицо 			= ES_ЗаборКонтактноеЛицо;
	Движение.ЗаборРегион 					= ES_ЗаборРегион;
	Движение.ЗаборТелефон 					= ES_ЗаборТелефон;
	Движение.КоличествоМест 				= ES_КоличествоМест;
	Движение.Манифест 						= ES_Манифест;
	Движение.НомерНакладной 				= ES_НомерНакладной;
	Движение.НППлан 						= ES_НППлан;
	Движение.ОбщийВес 						= ES_ОбщийВес;
	Движение.ОбщийОбъемныйВес 				= ES_ОбщийОбъемныйВес;
	Движение.Плательщик 					= ES_Плательщик;
	Движение.ПлательщикТретьеЛицо 			= ES_ПлательщикТретьеЛицо;
	Движение.Подтвержден 					= ES_Подтвержден;
	Движение.ДанныеПодтверждения 			= ES_ДанныеПодтверждения;
	Движение.Получатель 					= ES_Получатель;
	Движение.ПолучательКонтактноеЛицо 		= ES_ПолучательКонтактноеЛицо;
	Движение.ПолучательРегион 				= ES_ПолучательРегион;
	Движение.ПолучательТелефон 				= ES_ПолучательТелефон;
	//ЕФСОЛ Несторук 06-11-16 +
	//Движение.ПредставлениеГрузов 			= ES_ПредставлениеГрузов;
	Движение.ПредставлениеГрузов 			= Перечисления.ES_ПредставлениеГрузов.Запасы;
	//ЕФСОЛ Несторук 06-11-16 -
	Движение.СкладДоставки 					= ES_СкладДоставки;
	Движение.СтоимостьДоставки 				= ES_СтоимостьДоставки;
	Движение.СправочноАдресПолучателя 		= ES_СправочноАдресПолучателя;
	Движение.СправочноЗаказчик 				= ES_СправочноЗаказчик;
	Движение.СправочноОтправитель 			= ES_СправочноОтправитель;
	Движение.СправочноПолучатель 			= ES_СправочноПолучатель;
	Движение.СправочноТелПолучателя 		= ES_СправочноТелПолучателя;
	Движение.СрочностьДоставки 				= ES_СрочностьДоставки;
	Движение.Возврат						= ES_Возврат;
	Движение.Комментарий					= Комментарий;
	Движение.Предоплачен					= ES_Предоплачен;
	Движение.Склад							= ES_Склад;
	Движение.ОбщийОбъем						= ES_Объем;
	Движение.ЧекНаОбщуюСумму				= ES_ЧекНаОбщуюСумму;
	Движение.ЗачетНП						= ES_ЗачетНП;
	//ЕФСОЛ Савченко К.Р. 16.09.2017 +
	Движение.ДоУточнения                    = ES_ДоУточнения;
	Движение.Направление                    = ES_Направление;
	Движение.Проблема                       = ES_Проблема;
	//Движение.УслугиПартнера                 = УслугиПартнера;
    //ЕФСОЛ Савченко К.Р. 16.09.2017 -

КонецПроцедуры

Процедура ДвиженияВРСГрузыВЗаказах()
	
	Если ES_СписокГрузов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.ES_ГрузыВЗаказах.Записывать = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказПокупателяES_СписокГрузов.НомерСтроки КАК НомерСтроки,
		|	ЗаказПокупателяES_СписокГрузов.КлючСтроки КАК КлючСтроки,
		|	ЗаказПокупателяES_СписокГрузов.Вес,
		|	ЗаказПокупателяES_СписокГрузов.Высота,
		|	ЗаказПокупателяES_СписокГрузов.Длина,
		|	ЗаказПокупателяES_СписокГрузов.Ширина,
		|	ЗаказПокупателяES_СписокГрузов.НППлан,
		|	ЗаказПокупателяES_СписокГрузов.ОбъемныйВес,
		|	ЗаказПокупателяES_СписокГрузов.ОписаниеГруза,
		|	ЗаказПокупателяES_СписокГрузов.Страховка,
		|	ЗаказПокупателяES_СписокГрузов.ТипГруза
		|ИЗ
		|	Документ.ЗаказПокупателя.ES_СписокГрузов КАК ЗаказПокупателяES_СписокГрузов
		|ГДЕ
		|	ЗаказПокупателяES_СписокГрузов.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Движение = Движения.ES_ГрузыВЗаказах.Добавить();
			Движение.Период 			= Дата;
			Движение.Регистратор 		= Ссылка;
			Движение.ДокументДоставки 	= Ссылка;
			Движение.КлючСтроки 		= Выборка.КлючСтроки;
			Движение.ТипГруза 			= Выборка.ТипГруза;
			Движение.Вес 				= Выборка.Вес;
			Движение.ОбъемныйВес 		= Выборка.ОбъемныйВес;
			Движение.Высота 			= Выборка.Высота;
			Движение.Длина 				= Выборка.Длина;
			Движение.Ширина 			= Выборка.Ширина;
			Движение.НППлан 			= Выборка.НППлан;
			Движение.Страховка 			= Выборка.Страховка;
			Движение.ОписаниеГруза 		= Выборка.ОписаниеГруза;
			
		КонецЦикла;
	
	КонецЕсли; 
		
КонецПроцедуры

Процедура ДвиженияВРСНоменклатураВЗаказах()
	
	Если ES_Грузы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.ES_НоменклатураВЗаказах.Записывать = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МИНИМУМ(ЗаказПокупателяES_Грузы.НомерСтроки) КАК НомерСтроки,
		|	ЗаказПокупателяES_Грузы.Номенклатура,
		|	МАКСИМУМ(ЗаказПокупателяES_Грузы.ТипНоменклатурыЗапас) КАК ТипНоменклатурыЗапас,
		|	ЗаказПокупателяES_Грузы.Характеристика,
		|	ЗаказПокупателяES_Грузы.Партия,
		|	СУММА(ЗаказПокупателяES_Грузы.Количество) КАК Количество,
		|	ЗаказПокупателяES_Грузы.ЕдиницаИзмерения,
		|	СУММА(ЗаказПокупателяES_Грузы.НППлан) КАК НППлан,
		|	ЗаказПокупателяES_Грузы.Содержание КАК Содержание,
		|	МАКСИМУМ(ЗаказПокупателяES_Грузы.Цена) КАК Цена,
		|	МАКСИМУМ(ЗаказПокупателяES_Грузы.ПроцентСкидкиНаценки) КАК ПроцентСкидкиНаценки,
		|	СУММА(ЗаказПокупателяES_Грузы.Вес) КАК Вес,
		|	СУММА(ЗаказПокупателяES_Грузы.Объем) КАК Объем,
		|	СУММА(ЗаказПокупателяES_Грузы.ОбьявленнаяСтоимость) КАК ОбьявленнаяСтоимость,
		|	МАКСИМУМ(ЗаказПокупателяES_Грузы.Опасность) КАК Опасность,
		|	СУММА(ЗаказПокупателяES_Грузы.ОбъемныйВес) КАК ОбъемныйВес,
		|	МАКСИМУМ(ЗаказПокупателяES_Грузы.Штрихкод) КАК Штрихкод,
		|	МАКСИМУМ(ЗаказПокупателяES_Грузы.Артикул) КАК Артикул,
		|	МАКСИМУМ(ЗаказПокупателяES_Грузы.СтавкаНДС) КАК СтавкаНДС,
		|	СУММА(ЗаказПокупателяES_Грузы.СуммаНДС) КАК СуммаНДС
		|ИЗ
		|	Документ.ЗаказПокупателя.ES_Грузы КАК ЗаказПокупателяES_Грузы
		|ГДЕ
		|	ЗаказПокупателяES_Грузы.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПокупателяES_Грузы.Номенклатура,
		|	ЗаказПокупателяES_Грузы.Характеристика,
		|	ЗаказПокупателяES_Грузы.Партия,
		|	ЗаказПокупателяES_Грузы.ЕдиницаИзмерения,
		|	ЗаказПокупателяES_Грузы.Содержание
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Движение = Движения.ES_НоменклатураВЗаказах.Добавить();
			Движение.Период 				= Дата;
			Движение.Регистратор 			= Ссылка;
			Движение.ДокументДоставки 		= Ссылка;
			Движение.Номенклатура 			= Выборка.Номенклатура;
			Движение.ТипНоменклатурыЗапас 	= Выборка.ТипНоменклатурыЗапас;
			Движение.Характеристика 		= Выборка.Характеристика;
			Движение.Партия 				= Выборка.Партия;
			Движение.ЕдиницаИзмерения 		= Выборка.ЕдиницаИзмерения;
			Движение.Количество 			= Выборка.Количество; 
			Движение.НППлан 				= Выборка.НППлан;
			Движение.Содержание 			= Выборка.Содержание;
			Движение.Цена 					= Выборка.Цена;
			Движение.ПроцентСкидкиНаценки 	= Выборка.ПроцентСкидкиНаценки;
			//ЕФСОЛ Несторук 02-11-16 +
			Движение.Вес					= Выборка.Вес;
			Движение.Объем					= Выборка.Объем;
			Движение.ОбьявленнаяСтоимость	= Выборка.ОбьявленнаяСтоимость;
			Движение.Опасность				= Выборка.Опасность;
			движение.ОбъемныйВес			= Выборка.ОбъемныйВес;
			Движение.Артикул				= Выборка.Артикул;
			Движение.Штрихкод				= Выборка.Штрихкод;
			Движение.СуммаНДС				= Выборка.СуммаНДС;
			Движение.СтавкаНДС				= Выборка.СтавкаНДС;
			//ЕФСОЛ Несторук 02-11-16 -

		КонецЦикла;
	
	КонецЕсли; 
		
КонецПроцедуры

Процедура ДвиженияВРСИзменяемыеРеквизитыЗаказов()
	
	ТабИзменяемыеРеквизиты = ES_ФормированиеДвиженийПоРегистрамДоставки.СоздатьТабДляИзменяемыхРеквизитов();
	ДобавитьЗаписиВТабИзменяемыеРеквизиты(ТабИзменяемыеРеквизиты);
	Если ТабИзменяемыеРеквизиты.Количество() > 0 Тогда
		ES_ФормированиеДвиженийПоРегистрамДоставки.СделатьЗаписьВРегистрСведенийИзменяемыеРеквизитыЗаказа(ТабИзменяемыеРеквизиты, Ссылка);
	КонецЕсли; 
		
КонецПроцедуры

Процедура ДобавитьЗаписиВТабИзменяемыеРеквизиты(ТабИзменяемыеРеквизиты)

	// *НЕ ИСПОЛЬЗУЕТСЯ*
	//// ВидОплаты только для Самовывоза
	//Если ES_ВидДоставки = Перечисления.ES_ВидыДоставки.Самовывоз И ЗначениеЗаполнено(ES_ВидОплаты) Тогда
	//	// ВидОплатыНПФакт
	//	НоваяСтрока = ТабИзменяемыеРеквизиты.Добавить();
	//	НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
	//	НоваяСтрока.Период 			= Дата;
	//	НоваяСтрока.Регистратор 	= Ссылка;
	//	НоваяСтрока.Заказ 			= Ссылка;
	//	НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.ВидОплатыНПФакт;
	//	НоваяСтрока.Значение 		= ES_ВидОплаты;
	//	
	//	// ВидОплатыСтоимость
	//	НоваяСтрока = ТабИзменяемыеРеквизиты.Добавить();
	//	НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
	//	НоваяСтрока.Период 			= Дата;
	//	НоваяСтрока.Регистратор 	= Ссылка;
	//	НоваяСтрока.Заказ 			= Ссылка;
	//	НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.ВидОплатыСтоимость;
	//	НоваяСтрока.Значение 		= ES_ВидОплаты;
	//КонецЕсли; 
	//
	//// Комментарий
	//Если ЗначениеЗаполнено(Комментарий) Тогда
	//	НоваяСтрока = ТабИзменяемыеРеквизиты.Добавить();
	//	НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
	//	НоваяСтрока.Период 			= Дата;
	//	НоваяСтрока.Регистратор 	= Ссылка;
	//	НоваяСтрока.Заказ 			= Ссылка;
	//	НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.Комментарий;
	//	НоваяСтрока.Значение 		= Комментарий;
	//КонецЕсли; 
	
	// Курьер
	Если ЗначениеЗаполнено(ES_Курьер) Тогда
		НоваяСтрока = ТабИзменяемыеРеквизиты.Добавить();
		НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
		НоваяСтрока.Период 			= Дата;
		НоваяСтрока.Регистратор 	= Ссылка;
		НоваяСтрока.Заказ 			= Ссылка;
		НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.Курьер;
		НоваяСтрока.Значение 		= ES_Курьер;
	КонецЕсли; 
	
	// ВидОплаты
	Если ЗначениеЗаполнено(ES_Курьер) Тогда
		НоваяСтрока = ТабИзменяемыеРеквизиты.Добавить();
		НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
		НоваяСтрока.Период 			= Дата;
		НоваяСтрока.Регистратор 	= Ссылка;
		НоваяСтрока.Заказ 			= Ссылка;
		НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.ВидОплаты;
		НоваяСтрока.Значение 		= ES_ВидОплаты;
	КонецЕсли;
	
	// Подрядчик
	Если ЗначениеЗаполнено(ES_Подрядчик) Тогда
		НоваяСтрока = ТабИзменяемыеРеквизиты.Добавить();
		НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
		НоваяСтрока.Период 			= Дата;
		НоваяСтрока.Регистратор 	= Ссылка;
		НоваяСтрока.Заказ 			= Ссылка;
		НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.Подрядчик;
		НоваяСтрока.Значение 		= ES_Подрядчик;
	КонецЕсли;
	
	// Расходы
	Если ЗначениеЗаполнено(ES_Расходы) Тогда
		НоваяСтрока = ТабИзменяемыеРеквизиты.Добавить();
		НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
		НоваяСтрока.Период 			= Дата;
		НоваяСтрока.Регистратор 	= Ссылка;
		НоваяСтрока.Заказ 			= Ссылка;
		НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.Расходы;
		НоваяСтрока.Значение 		= ES_Расходы;
	КонецЕсли; 
	
	// ТрекНомер
	Если ЗначениеЗаполнено(ES_ТрекНомер) Тогда
		НоваяСтрока = ТабИзменяемыеРеквизиты.Добавить();
		НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
		НоваяСтрока.Период 			= Дата;
		НоваяСтрока.Регистратор 	= Ссылка;
		НоваяСтрока.Заказ 			= Ссылка;
		НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.ТрекНомер;
		НоваяСтрока.Значение 		= ES_ТрекНомер;
	КонецЕсли; 
		
КонецПроцедуры

Процедура ДвиженияВРНУчетДСпоЗаказамНаДоставку()
	
	//КонтрагентДляЗаписи = ?(ES_Плательщик = Перечисления.ES_ТипыПлательщиков.Получатель, Контрагент, Контрагент);
	КонтрагентДляЗаписи = Контрагент;
	
	// РН ES_ОплатаДоставки
	Движения.ES_УчетДСпоЗаказамНаДоставку.Записывать = Истина;
	Движение = Движения.ES_УчетДСпоЗаказамНаДоставку.Добавить();
	Движение.Период 				= Дата;
	Движение.Регистратор 			= Ссылка;
	Движение.Заказ 					= Ссылка;
	Движение.Заказчик 				= КонтрагентДляЗаписи;
	Движение.ПланСтоимостьДоставки 	= ES_СтоимостьДоставки;
	Движение.ПланируемыеНП 			= ES_НППлан;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли