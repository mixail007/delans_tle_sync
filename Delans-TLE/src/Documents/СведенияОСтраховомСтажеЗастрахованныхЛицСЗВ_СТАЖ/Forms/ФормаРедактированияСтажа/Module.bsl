#Область ОписаниеПеременных

&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолейСтаж;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ХраненияОшибокВДанныхФормыДополнитьФорму(ЭтотОбъект);
	ИндикацияОшибокДополнитьФорму(ЭтотОбъект, ОписаниеЭлементовСИндикациейОшибок());
		
	ДокументыСЗВДобавитьКонтрольИсправлений(КонтролируемыеПоля);
	
	РедактируемыйДокументСсылка = Параметры.РедактируемыйДокументСсылка;
	Организация = Параметры.Организация;
	Год = Параметры.Год;
	Сотрудник = Параметры.Сотрудник;
	ДатаВыходаНаПенсию = Параметры.ДатаВыходаНаПенсию;
	
	ИменаДополняемыхТаблиц = Новый Массив;
	ИменаДополняемыхТаблиц.Добавить("ЗаписиОСтаже");
	ДобавитьЗаголовкиКПолямТаблицФормы(ЭтаФорма, ИменаДополняемыхТаблиц, ОписаниеКолонокЗаголовковТаблицФормы());
	
	ДанныеИзВременногоХранилищаВДанныеФормы(Параметры.АдресВоВременномХранилище);
	
	УстановитьЗаголовокФормы();
	
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОтмененаИсправления" Тогда
		ДанныеИзВременногоХранилищаВДанныеФормы(Параметр.АдресХранилища);
		Активизировать();
	ИначеЕсли ИмяСобытия = "ИзменениеДанныхФизическогоЛица" И Не ТолькоПросмотр Тогда 
		ЗаполнитьИзменившиесяДанныеФизическогоЛица(Параметр);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФамилияПриИзменении(Элемент)
	
	ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Фамилия");
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяПриИзменении(Элемент)
	
	ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Имя");
	
КонецПроцедуры

&НаКлиенте
Процедура СтраховойНомерПФРПриИзменении(Элемент)
	
	ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "СтраховойНомерПФР");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоПриИзменении(Элемент)
	
	ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Отчество");
	
КонецПроцедуры

#Область ОбработчикиСобытийТаблицыФормыЗаписиОСтаже

&НаКлиенте
Процедура ЗаписиОСтажеПриАктивизацииСтроки(Элемент)
	
	СтруктураДанныхПоСотруднику = СтруктураДанныхПоСотруднику(ЭтотОбъект);
	
	ДокументыСЗВЗаписиОСтажеПриАктивацииСтроки(
		Элементы.ЗаписиОСтаже.ТекущиеДанные, 
		КонтролируемыеПоля, 
		СтарыеЗначенияКонтролируемыхПолейСтаж, 
		СтруктураДанныхПоСотруднику);	
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиОСтажеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		УстановитьЗаголовкиВСтрокеТаблицы(
			ЭтотОбъект, 
			Элементы.ЗаписиОСтаже.ТекущиеДанные,
			ОписаниеКолонокЗаголовковТаблицыЗаписиОСтаже(),
			Истина);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиОСтажеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхПоСотруднику = СтруктураДанныхПоСотруднику(ЭтотОбъект);
	
	ДокументыСЗВЗаписиОСтажеПриОкончанииРедактирования(
		Элементы.ЗаписиОСтаже.ТекущиеДанные, 
		НоваяСтрока, 
		КонтролируемыеПоля, 
		СтарыеЗначенияКонтролируемыхПолейСтаж, 
		СтруктураДанныхПоСотруднику);
			
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураДанныхПоСотруднику);	
	
	Если НоваяСтрока Тогда
		ПерсонифицированныйУчетКлиентСервер.ВыполнитьНумерациюЗаписейОСтаже(ЗаписиОСтаже);
	КонецЕсли;
	
	ПриОкончанииРедактированияСтрокиТаблицыСИндикациейОшибок(
		ЭтотОбъект,
		Элемент,
		НоваяСтрока,
		"ЗаписиОСтаже");
		
	УстановитьДоступностьКомандФормы(ЭтаФорма);	
		
КонецПроцедуры
	
&НаКлиенте
Процедура ЗаписиОСтажеПередУдалением(Элемент, Отказ)
	
	ПередУдалениемСтрокиТаблицыСИндикациейОшибок(ЭтотОбъект, Элемент, "ЗаписиОСтаже");
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаписиОСтажеПослеУдаления(Элемент)
	
	ФиксСтаж = Истина;
	УстановитьДоступностьКомандФормы(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	ВыбратьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИсправленияПоСтажу(Команда)
	
	ОтменитьИсправленияПоСтажуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДанныеФизическогоЛица(Команда)
	
	ПараметрыФормы = Новый Структура("Ключ, АктивнаяСтраница, РедактируемоеПоле", Сотрудник, "ЛичныеДанные");
	ОткрытьФорму("Справочник.Сотрудники.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция  СоответствиеДанныхОбъектаДаннымФормы()
	
	ОписаниеСвязиДанных = ОписаниеСвязиДанных();
	
	ДобавитьОписаниеСвязиДанныхСтрокТаблиц(
		ОписаниеСвязиДанных,
		"ЗаписиОСтаже",
		"*",
		"ЗаписиОСтаже",
		"");
		
	ДобавитьОписаниеСвязиРеквизитов(ОписаниеСвязиДанных, "", "Сотрудник");	
	
	Возврат ОписаниеСвязиДанных;
	
КонецФункции	

&НаКлиенте
Процедура ВыбратьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	АдресВоВременномХранилище = ДанныеСотрудникаВоВременноеХранилище();
	
	ПараметрыОповещения = Новый Структура("РедактируемыйДокументСсылка, Сотрудник, АдресВоВременномХранилище");
	ПараметрыОповещения.РедактируемыйДокументСсылка = РедактируемыйДокументСсылка;
	ПараметрыОповещения.Сотрудник = Сотрудник;
	ПараметрыОповещения.АдресВоВременномХранилище = АдресВоВременномХранилище;	
	
	Оповестить("РедактированиеДанныхСтажаПоСотруднику", ПараметрыОповещения, ЭтаФорма);
	
	Модифицированность = Ложь;

	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	
	УстановитьДоступностьКомандФормы(ЭтаФорма);
	
	ИспользоватьЗамещение = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.ПерсонифицированныйУчетРасширенная") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПерсонифицированныйУчетРасширенный");
	    ИспользоватьЗамещение = Модуль.ИспользоватьЗамещениеГосударственныхМуниципальныхДолжностей();
	КонецЕсли;                                                              
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаписиОСтажеЗамещениеГосударственныхМуниципальныхДолжностей", "Видимость", ИспользоватьЗамещение);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаписиОСтажеЗамещениеГосударственныхМуниципальныхДолжностейЗаголовок", "Видимость", ИспользоватьЗамещение);
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандФормы(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ЗаписиОСтажеОтменитьИсправленияПоСтажу", "Доступность", Форма.ФиксСтаж);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Заголовок = НСтр("ru = 'Сведения о стаже'");
	ИнфонадписьЗаголовокКарточки = НСтр("ru = 'Данные застрахованного лица'");
	
КонецПроцедуры	

&НаСервере
Процедура ДанныеИзВременногоХранилищаВДанныеФормы(АдресВоВременномХранилище)
	
	Модифицированность = Ложь;
	
	ДанныеДокументаПоСотруднику = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если ДанныеДокументаПоСотруднику = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось получить редактируемые данные.'");	
	КонецЕсли;
	
	Сотрудник = ДанныеДокументаПоСотруднику.Сотрудник;
	Фамилия = ДанныеДокументаПоСотруднику.Фамилия;
	Имя = ДанныеДокументаПоСотруднику.Имя;
	Отчество = ДанныеДокументаПоСотруднику.Отчество;
	СотрудникУволен = ДанныеДокументаПоСотруднику.СотрудникУволен;
	СтраховойНомерПФР = ДанныеДокументаПоСотруднику.СтраховойНомерПФР;
	ФиксСтаж = ДанныеДокументаПоСотруднику.ФиксСтаж;
	
	ЗаписиОСтаже.Очистить();
	
	Для Каждого СтрокаТаблицы Из ДанныеДокументаПоСотруднику.ЗаписиОСтаже Цикл
		СтрокаТаблицыФормы = ЗаписиОСтаже.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыФормы, СтрокаТаблицы);
	КонецЦикла;	
	
	УстановитьЗаголовкиВТаблице(ЭтаФорма, ЗаписиОСтаже, ОписаниеКолонокЗаголовковТаблицы("ЗаписиОСтаже"));
	
	Ошибки = Неопределено;
	ДанныеДокументаПоСотруднику.Свойство("Ошибки", Ошибки);
	
	Если Ошибки <> Неопределено Тогда 
		ПреобразоватьПутиКДаннымВСообщенияхПользователю(
			ЭтотОбъект,
			ЭтотОбъект,
			Ошибки,
			СоответствиеДанныхОбъектаДаннымФормы());
			
		ПоместитьСообщенияОбОшибкахВДанныеФормы(ЭтотОбъект, Ошибки);	
		УстановитьФлагиНаличияОшибокПоСообщениямОбОшибках(ЭтотОбъект, Ошибки, , Истина);	
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере 
Функция ДанныеСотрудникаВоВременноеХранилище()	
	
	ДанныеСотрудника = Новый Структура;
	ДанныеСотрудника.Вставить("Сотрудник", Сотрудник);
	ДанныеСотрудника.Вставить("СтраховойНомерПФР", СтраховойНомерПФР);
	ДанныеСотрудника.Вставить("Фамилия", Фамилия);
	ДанныеСотрудника.Вставить("Имя", Имя);
	ДанныеСотрудника.Вставить("Отчество", Отчество);
	ДанныеСотрудника.Вставить("ФиксСтаж", ФиксСтаж);
	ДанныеСотрудника.Вставить("Модифицированность", Модифицированность);
	ДанныеСотрудника.Вставить("ИсходныйНомерСтроки", ИсходныйНомерСтроки);
	ДанныеСотрудника.Вставить("РедактируемыйДокументСсылка", РедактируемыйДокументСсылка);
	ДанныеСотрудника.Вставить("ИзменилисьДанныеФизическогоЛица", ИзменилисьДанныеФизическогоЛица);
	ДанныеСотрудника.Вставить("СотрудникУволен", СотрудникУволен);
	
	ЗаписиОСтажеСотрудника = Новый Массив;	
	ДанныеСотрудника.Вставить("ЗаписиОСтаже", ЗаписиОСтажеСотрудника);
	
	ПорядокЗаписей = ПорядокЗаписейСтажа();
	
	Для Каждого ЭлементПорядка Из ПорядокЗаписей Цикл
		СтруктураПолейЗаписиОСтаже = СтруктураПолейЗаписиОСтаже();
		СтрокаЗаписиОСтаже = ЗаписиОСтаже[ЭлементПорядка.ИндексСтроки];
		ЗаполнитьЗначенияСвойств(СтруктураПолейЗаписиОСтаже, СтрокаЗаписиОСтаже);
		ЗаписиОСтажеСотрудника.Добавить(СтруктураПолейЗаписиОСтаже);
	КонецЦикла;	
	
	Ошибки = СообщенияОбОшибкахИзДанныхФормы(ЭтотОбъект);
	
	ДанныеСотрудника.Вставить("Ошибки", Ошибки);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеСотрудника);
	
КонецФункции	

&НаСервере 
Процедура ОтменитьИсправленияПоСтажуНаСервере()
	
	ФиксСтаж = Ложь;
	ЗаписиОСтаже.Очистить();
	
	Модифицированность = Истина;
	
	ПерсонифицированныйУчетКлиентСервер.ВыполнитьНумерациюЗаписейОСтаже(ЗаписиОСтаже);
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураПолейЗаписиОСтаже()
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерОсновнойЗаписи");
	СтруктураПолей.Вставить("НомерДополнительнойЗаписи");
	СтруктураПолей.Вставить("ДатаНачалаПериода");
	СтруктураПолей.Вставить("ДатаОкончанияПериода");
	СтруктураПолей.Вставить("ОсобыеУсловияТруда");
	СтруктураПолей.Вставить("КодПозицииСписка");
	СтруктураПолей.Вставить("ОснованиеИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ПервыйПараметрИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ВторойПараметрИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ТретийПараметрИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ОснованиеВыслугиЛет");
	СтруктураПолей.Вставить("ПервыйПараметрВыслугиЛет");
	СтруктураПолей.Вставить("ВторойПараметрВыслугиЛет");
	СтруктураПолей.Вставить("ТретийПараметрВыслугиЛет");
	СтруктураПолей.Вставить("ТерриториальныеУсловия");
	СтруктураПолей.Вставить("ПараметрТерриториальныхУсловий");
	СтруктураПолей.Вставить("ЗамещениеГосударственныхМуниципальныхДолжностей");
	СтруктураПолей.Вставить("ИдентификаторИсходнойСтроки");

	Возврат СтруктураПолей;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураДанныхПоСотруднику(Форма)
	
	СтруктураДанныхПоСотруднику = Новый Структура;
	СтруктураДанныхПоСотруднику.Вставить("ФиксСтаж", Форма.ФиксСтаж);

	ЗаполнитьЗначенияСвойств(СтруктураДанныхПоСотруднику, Форма);
	
	Возврат СтруктураДанныхПоСотруднику;
	
КонецФункции	

&НаКлиенте
Процедура ЗаполнитьИзменившиесяДанныеФизическогоЛица(ДанныеФизическогоЛица)	
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеФизическогоЛица);
	ИзменилисьДанныеФизическогоЛица = Истина;
	
КонецПроцедуры	

#Область МеханизмОтображенияОшибок

&НаКлиенте
Процедура ПоказатьОшибки(ИмяПоляИндикацииОшибки, ПоказыватьТекстОшибки) Экспорт
	
	ПоказыватьТекстОшибки = Истина;
	
КонецПроцедуры	

&НаСервере
Функция ОписаниеЭлементовСИндикациейОшибок() Экспорт
	
	КоллекцияОписанийЭлементов = Новый Массив;
	
	ОписаниеЭлемента = ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "ИнфонадписьЗаголовокКарточки";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ОтображатьНепривязанныеОшибки = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Сотрудник";
	ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
			
	ОписаниеЭлемента = ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "Фамилия";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Фамилия";
	ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "Имя";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Имя";
	ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
		
	ОписаниеЭлемента = ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "Отчество";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Отчество";
	ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "СтраховойНомерПФР";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "СтраховойНомерПФР";
	ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы();	
	ОписаниеЭлемента.ИмяЭлемента = "ЗаписиОСтаже";
	ОписаниеЭлемента.ИмяЭлементаТаблица = "ЗаписиОСтаже";	
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "ЗаписиОСтаже";	
	ДобавитьОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	Возврат КоллекцияОписанийЭлементов;
	
КонецФункции	

// Добавление полей заголовков.

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицФормы()
	
	ОписаниеКолонокЗаголовковТаблиц = Новый Соответствие;
	ОписаниеКолонокЗаголовковТаблиц.Вставить("ЗаписиОСтаже", ОписаниеКолонокЗаголовковТаблицы("ЗаписиОСтаже")); 
	
	Возврат ОписаниеКолонокЗаголовковТаблиц;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицыЗаписиОСтаже()
	
	ОписаниеЗаголовковКолонок = Новый Массив;
	
	ОписаниеЗаголовка = СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеТерриториальныеУсловия";
	ОписаниеЗаголовка.Заголовок = "Код";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеПараметрТерриториальныхУсловий";
	ОписаниеЗаголовка.Заголовок = "Ставка";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеОснованиеИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = "Основание";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеТретийПараметрИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = "Параметр";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеОснованиеВыслугиЛет";
	ОписаниеЗаголовка.Заголовок = "Основание";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеПервыйПараметрВыслугиЛет";
	ОписаниеЗаголовка.Заголовок = "Месяцы";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеВторойПараметрВыслугиЛет";
	ОписаниеЗаголовка.Заголовок = "Дни";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеТретийПараметрВыслугиЛет";
	ОписаниеЗаголовка.Заголовок = "Ставка";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеПервыйПараметрИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = "Месяцы";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеВторойПараметрИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = "Дни";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеЗамещениеГосударственныхМуниципальныхДолжностей";
	ОписаниеЗаголовка.Заголовок = "Код";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	Возврат ОписаниеЗаголовковКолонок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицы(ИмяТаблицы)
	
	Если ИмяТаблицы = "ЗаписиОСтаже" Тогда
		ОписаниеКолонок = ОписаниеКолонокЗаголовковТаблицыЗаписиОСтаже();
	КонецЕсли;	
		
	Возврат ОписаниеКолонок;
	
КонецФункции	

&НаКлиенте
Процедура Подключаемый_ЭлементИндикацииОшибкиНажатие(Элемент, СтандартнаяОбработка)
	
	ЭлементИндикацииОшибкиНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_ЭлементИндикацииПриАктивизацииЯчейки(Элемент)
	
	ЭлементИндикацииПриАктивизацииЯчейки(ЭтотОбъект, Элемент);
	
КонецПроцедуры	

&НаСервере
Функция ПорядокЗаписейСтажа()
	
	ВидыСтажаГПХ = Новый Массив;
	
	ВидыСтажаГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДОГОВОР);
	ВидыСтажаГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛАВТ);
	ВидыСтажаГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛДОГ);
	
	ПорядокЗаписейСтажа = Новый ТаблицаЗначений;
	ПорядокЗаписейСтажа.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число"));
	ПорядокЗаписейСтажа.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	
	ОбычныеЗаписиСтажа = Новый Массив;
	
	Для Каждого СтрокаСтажа Из ЗаписиОСтаже Цикл
		Если ВидыСтажаГПХ.Найти(СтрокаСтажа.ТретийПараметрИсчисляемогоСтажа) <> Неопределено Тогда
			ЭлементПорядка = ПорядокЗаписейСтажа.Добавить();
			ЭлементПорядка.ДатаНачала = СтрокаСтажа.ДатаНачалаПериода;
			ЭлементПорядка.ИндексСтроки = ЗаписиОСтаже.Индекс(СтрокаСтажа);
		Иначе
			ОбычныеЗаписиСтажа.Добавить(СтрокаСтажа);	
		КонецЕсли;	
	КонецЦикла;	
	
	ПорядокЗаписейСтажа.Сортировать("ДатаНачала");
	
	Для Каждого СтрокаСтажа Из ОбычныеЗаписиСтажа Цикл
		ЭлементПорядка = ПорядокЗаписейСтажа.Добавить();
		ЭлементПорядка.ИндексСтроки = ЗаписиОСтаже.Индекс(СтрокаСтажа);	
	КонецЦикла;
	
	Возврат ПорядокЗаписейСтажа;
	
КонецФункции	


&НаКлиенте
Процедура ЭлементИндикацииПриАктивизацииЯчейки(Форма, Элемент)
	ТекущаяЯчейка = Элемент.ТекущийЭлемент;
	
	Если ТекущаяЯчейка = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеЭлемента = Форма.ОписаниеЭлементовСИндикациейОшибок.Получить(ТекущаяЯчейка.Имя);
	
	Если ОписаниеЭлемента = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
	
	КоличествоПодчиненныхЭлементов = Элемент.ПодчиненныеЭлементы.Количество();
	
	АктивируемыйЭлемент = АктивныйЭлементВТаблицеСодержащейГиперссылку(Элемент, ТекущаяЯчейка);
		
	Если АктивируемыйЭлемент <> Неопределено Тогда
		Элемент.ТекущийЭлемент = АктивируемыйЭлемент;
	КонецЕсли;		
	
	Если Форма.ТекущийЭлемент = Элемент Тогда
		ПоказатьТекстОшибки(Форма, ОписаниеЭлемента);
	КонецЕсли;	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция АктивныйЭлементВТаблицеСодержащейГиперссылку(Таблица, ЯчейкаГиперссылка)
	КоличествоПодчиненныхЭлементов = Таблица.ПодчиненныеЭлементы.Количество();
	
	ИндексЯчейкиГиперссылки = Таблица.ПодчиненныеЭлементы.Индекс(ЯчейкаГиперссылка);
	
	АктивируемыйЭлемент = Неопределено;
	
	Если КоличествоПодчиненныхЭлементов > 1 Тогда
		ИндексТекущейЯчейки = ИндексЯчейкиГиперссылки;			
		Пока ИндексТекущейЯчейки < КоличествоПодчиненныхЭлементов - 1 Цикл 
			ИндексТекущейЯчейки = ИндексТекущейЯчейки + 1;
			
			ТекущийПодчиненныйЭлемент = Таблица.ПодчиненныеЭлементы[ИндексТекущейЯчейки];
			
			Если ТипЗнч(ТекущийПодчиненныйЭлемент) = Тип("ПолеФормы") Тогда
				АктивируемыйЭлемент = ТекущийПодчиненныйЭлемент;
				Прервать;
			Иначе
				АктивируемыйЭлемент = АктивныйЭлементВТаблицеСодержащейГиперссылку(ТекущийПодчиненныйЭлемент, ТекущийПодчиненныйЭлемент);
				Если ТипЗнч(АктивируемыйЭлемент) <> Тип("ПолеФормы") Тогда
					АктивируемыйЭлемент = ТекущийПодчиненныйЭлемент;
				Иначе	
					Прервать;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
		
		Если АктивируемыйЭлемент = Неопределено Тогда
			ИндексТекущейЯчейки = ИндексЯчейкиГиперссылки;

			Пока ИндексТекущейЯчейки >  0 Цикл 
				ИндексТекущейЯчейки = ИндексТекущейЯчейки - 1;
				
				ТекущийПодчиненныйЭлемент = Таблица.ПодчиненныеЭлементы[ИндексТекущейЯчейки];
				
				Если ТипЗнч(ТекущийПодчиненныйЭлемент) = Тип("ПолеФормы") Тогда
					АктивируемыйЭлемент = ТекущийПодчиненныйЭлемент;
					Прервать;
				Иначе
					АктивируемыйЭлемент = АктивныйЭлементВТаблицеСодержащейГиперссылку(ТекущийПодчиненныйЭлемент, ТекущийПодчиненныйЭлемент);
					Если ТипЗнч(АктивируемыйЭлемент) <> Тип("ПолеФормы") Тогда
						АктивируемыйЭлемент = Неопределено;
					Иначе	
						Прервать;
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;			
	КонецЕсли;	
	
	Возврат АктивируемыйЭлемент;
КонецФункции


&НаКлиенте
Процедура ЭлементИндикацииОшибкиНажатие(Форма, Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОписаниеЭлемента = Форма.ОписаниеЭлементовСИндикациейОшибок.Получить(Элемент.Имя);
	
	Если ОписаниеЭлемента = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
	
	ПоказатьТекстОшибки(Форма, ОписаниеЭлемента);
КонецПроцедуры

&НаКлиенте
Процедура ПередУдалениемСтрокиТаблицыСИндикациейОшибок(Форма, Элемент, ПутьКДаннымТаблицы)
	СчетчикФлаговНаСтраницах = Новый Структура(Форма.СчетчикФлаговНаСтраницах);
	
	Таблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДаннымТаблицы);
	
	Для Каждого ИдентификаторСтроки Из Элемент.ВыделенныеСтроки Цикл 
		ТекущаяСтрока = Таблица.НайтиПоИдентификатору(ИдентификаторСтроки);
	
		ИндексТекущейСтроки = Таблица.Индекс(ТекущаяСтрока);
		
		ПутьКДанным = ПутьКДаннымТаблицы + "[" + ИндексСтрокой(ИндексТекущейСтроки) + "]";
		
		УстановитьФлагНаличияОшибки(
			Форма,
			ПутьКДанным,
			Ложь,
			0,
			Истина,
			СчетчикФлаговНаСтраницах);
			
		УдалитьОшибкиИзДанныхФормыПоПутиКДанным(Форма, ПутьКДанным + ".*");	
	КонецЦикла;
		
	Форма.СчетчикФлаговНаСтраницах = Новый ФиксированнаяСтруктура(СчетчикФлаговНаСтраницах);
		
	УстановитьКартинкиДляЗаголовковСтраницФормы(Форма);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТекстОшибки(Форма, ОписаниеЭлемента)
	Если ОписаниеЭлемента.Тип = "ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы"
		Или ОписаниеЭлемента.Тип = "ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы" Тогда
		
		ДанныеСодержащиеОшибки = Форма.Элементы[ОписаниеЭлемента.ИмяЭлементаТаблица].ТекущиеДанные;
		ИмяРеквизитаСОшибкой = ОписаниеЭлемента.ИмяРеквизитаТаблицы;
	Иначе
		ДанныеСодержащиеОшибки = Форма;	
		ИмяРеквизитаСОшибкой = ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку;
	КонецЕсли;	
	
	Если ДанныеСодержащиеОшибки = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеОшибок = ОписаниеОшибокИзДанныхФормы(ДанныеСодержащиеОшибки, ИмяРеквизитаСОшибкой, ОписаниеЭлемента.ОтображатьНепривязанныеОшибки);
	
	Если ОписаниеОшибок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ТекстОшибки = "";
	
	Для Каждого Ошибка Из ОписаниеОшибок Цикл
		ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.ПС + Ошибка.Текст;	
	КонецЦикла;	
	
	ТекстОшибки = Сред(ТекстОшибки, 2);
	
	ПоказатьПредупреждение(, ТекстОшибки);
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеОшибокИзДанныхФормы(Данные, ИмяРеквизитаСодержащегоОшибку = "", ОтображатьНепривязанныеОшибки = Ложь) Экспорт 
	ОписаниеОшибок = Новый Массив;
	
	ТаблицаОшибок = Данные.ТаблицаХраненияОшибок;
	
	Если ИмяРеквизитаСодержащегоОшибку = "" Тогда
		СтрокиТаблицыХраненияОшибок = ТаблицаОшибок;
	Иначе	
		СтрокиТаблицыХраненияОшибок = ТаблицаОшибок.НайтиСтроки(Новый Структура("Поле", ИмяРеквизитаСодержащегоОшибку));
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыХраненияОшибок Цикл		
		Если Не СтрокаТаблицы.НеПривязана Тогда
		
			ОписаниеОшибки = Новый Структура("Текст, Поле", СтрокаТаблицы.Текст, СтрокаТаблицы.Поле);
			
			ОписаниеОшибок.Добавить(ОписаниеОшибки);
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл		
		Если ОтображатьНепривязанныеОшибки И 
			СтрокаТаблицы.НеПривязана Тогда
		
			ОписаниеОшибки = Новый Структура("Текст, Поле", СтрокаТаблицы.Текст, СтрокаТаблицы.Поле);
			
			ОписаниеОшибок.Добавить(ОписаниеОшибки);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ОписаниеОшибок;
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьОшибкиИзДанныхФормыПоПутиКДанным(Форма, ПутьКДанным, КлючДанных = Неопределено)
	ОписаниеПутиКДанным = ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(ПутьКДанным);
	
	Если ОписаниеПутиКДанным.Тип = "ПутьКДаннымСтрокиТаблицы" Тогда
		ДанныеТаблицы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеПутиКДанным.ПутьКДаннымТаблицы);
		СтрокаТаблицы = ДанныеТаблицы[ОписаниеПутиКДанным.ИндексСтроки];
		
		УдаляемыеСтроки = СтрокиТаблицыОшибокСтрокиТаблицыДанныхФормы(СтрокаТаблицы, ОписаниеПутиКДанным.ИмяРеквизитаСтроки, КлючДанных);
		
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			СтрокаТаблицы.ТаблицаХраненияОшибок.Удалить(УдаляемаяСтрока);			
		КонецЦикла;			
	Иначе
		УдаляемыеСтроки = СтрокиТаблицыОшибокДанныхШапкиФормы(Форма, ПутьКДанным, КлючДанных);		
		
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Форма.ТаблицаХраненияОшибок.Удалить(УдаляемаяСтрока);			
		КонецЦикла;			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокиТаблицыОшибокСтрокиТаблицыДанныхФормы(СтрокаТаблицы, ИмяРеквизитаСтроки = "", КлючДанных = Неопределено)
	ОшибкиСтрокиТаблицы = Новый Массив;
	
	Если Не СтрокаТаблицы.Свойство("ТаблицаХраненияОшибок") Тогда
		Возврат ОшибкиСтрокиТаблицы;
	КонецЕсли;	
	
	СтруктураПоиска = Новый Структура;
	
	Если ИмяРеквизитаСтроки <> "*" Тогда
		
		СтруктураПоиска.Вставить("Поле", ИмяРеквизитаСтроки);
	КонецЕсли;
	
	Если КлючДанных <> Неопределено Тогда
		СтруктураПоиска.Вставить("КлючДанных", КлючДанных);	
	КонецЕсли;	
		
	Если СтруктураПоиска.Количество() = 0 Тогда	
		Для Каждого СтрокаОшибки Из СтрокаТаблицы.ТаблицаХраненияОшибок Цикл 
			ОшибкиСтрокиТаблицы.Добавить(СтрокаОшибки);
		КонецЦикла;	
	Иначе
		ОшибкиСтрокиТаблицы = СтрокаТаблицы.ТаблицаХраненияОшибок.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;	
	
	Возврат ОшибкиСтрокиТаблицы;	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКартинкиДляЗаголовковСтраницФормы(Форма) 
	ИзмененыСвойстваЭлементовФормы = Ложь;
	
	ЦветЗаголовкаГруппыСОшибкой = Новый Цвет(255, 0, 0);
	Для Каждого СчетчикФлагов Из Форма.СчетчикФлаговНаСтраницах Цикл
		Элемент =  Форма.Элементы.Найти(СчетчикФлагов.Ключ);
		
		Если Элемент = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
		Если СчетчикФлагов.Значение = 0 Тогда
			Если Элемент.Вид = ВидГруппыФормы.Страница Тогда
				Если Элемент.Картинка.Вид <> ВидКартинки.Пустая Тогда
					Элемент.Картинка = Новый Картинка;
					ИзмененыСвойстваЭлементовФормы = Истина;
				КонецЕсли;
			Иначе
				Если Элемент.ЦветТекстаЗаголовка = ЦветЗаголовкаГруппыСОшибкой Тогда
					Цвет = Форма.ЦветаЗаголовковСворачиваемыхГрупп[Элемент.Имя];
					
					Элемент.ЦветТекстаЗаголовка = Цвет;
					ИзмененыСвойстваЭлементовФормы = Истина;
				КонецЕсли;				
			КонецЕсли;	
		Иначе
			Если Элемент.Вид = ВидГруппыФормы.Страница Тогда
				Если Элемент.Картинка.Вид = ВидКартинки.Пустая Тогда
					Элемент.Картинка = БиблиотекаКартинок.Предупреждение;
					ИзмененыСвойстваЭлементовФормы = Истина;
				КонецЕсли;	
			Иначе
				Если Элемент.ЦветТекстаЗаголовка <> ЦветЗаголовкаГруппыСОшибкой Тогда
					Элемент.ЦветТекстаЗаголовка = ЦветЗаголовкаГруппыСОшибкой;
					ИзмененыСвойстваЭлементовФормы = Истина;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого ОписаниеЭлемента Из Форма.ОписаниеЭлементовСИндикациейОшибок Цикл
		Если ОписаниеЭлемента.Значение.Тип = "ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы" Тогда
			Таблица = Форма.Элементы.Найти(ОписаниеЭлемента.Значение.ИмяЭлементаТаблица);
			ГиперссылкаТаблицы = Форма.Элементы.Найти(ОписаниеЭлемента.Ключ);
			
			Если Элемент <> Неопределено
				И ГиперссылкаТаблицы <> Неопределено Тогда
				
				ТекущаяЯчейка = АктивныйЭлементВТаблицеСодержащейГиперссылку(Элемент, ГиперссылкаТаблицы);  	
			КонецЕсли;				
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	



&НаКлиентеНаСервереБезКонтекста
Функция ИндексСтрокой(ИндексСтроки)
	Если ИндексСтроки = 0 Тогда 
		Возврат "0";
	ИначеЕсли ИндексСтроки < 1000 Тогда
		Возврат Строка(ИндексСтроки);
	Иначе 	
		ИндексСтрокой = Строка(ИндексСтроки);
		Возврат СтрЗаменить(ИндексСтрокой, Символы.НПП, "");
	КонецЕсли;	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИндексСтрокиТаблицыИзПутиКДанным(ПутьКДанным)
	НомерСимволаОткрывающейСкобки = СтрНайти(ПутьКДанным, "[");
	
	Если НомерСимволаОткрывающейСкобки = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НомерСимволаЗакрывающейСкобки = СтрНайти(Сред(ПутьКДанным, НомерСимволаОткрывающейСкобки + 1), "]") + НомерСимволаОткрывающейСкобки;
	
	Если НомерСимволаЗакрывающейСкобки = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексСтрокой = Сред(ПутьКДанным, НомерСимволаОткрывающейСкобки + 1, НомерСимволаЗакрывающейСкобки - НомерСимволаОткрывающейСкобки - 1);
	
	Если ПустаяСтрока(ИндексСтрокой) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Число(ИндексСтрокой);	
КонецФункции

&НаКлиенте
Процедура ПриОкончанииРедактированияСтрокиТаблицыСИндикациейОшибок(Форма, Элемент, НоваяСтрока, ПутьКДаннымТаблицы)
	Если НоваяСтрока Тогда
		Возврат;
	КонецЕсли;	
	
	СчетчикФлаговНаСтраницах = Новый Структура(Форма.СчетчикФлаговНаСтраницах);
	
	Таблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДаннымТаблицы);
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	
	ИндексТекущейСтроки = Таблица.Индекс(ТекущаяСтрока);
	
	ПутьКДанным = ПутьКДаннымТаблицы + "[" + ИндексСтрокой(ИндексТекущейСтроки) + "]";
	
	УстановитьФлагНаличияОшибки(
		Форма,
		ПутьКДанным,
		Ложь,
		0,
		Истина,
		СчетчикФлаговНаСтраницах);
		
	УдалитьОшибкиИзДанныхФормыПоПутиКДанным(Форма, ПутьКДанным + ".*");	
		
	Форма.СчетчикФлаговНаСтраницах = Новый ФиксированнаяСтруктура(СчетчикФлаговНаСтраницах);
		
	УстановитьКартинкиДляЗаголовковСтраницФормы(Форма);	
		
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(Форма, Элемент, ПутьКДанным) 
	СчетчикФлаговНаСтраницах = Новый Структура(Форма.СчетчикФлаговНаСтраницах);
	
	УстановитьФлагНаличияОшибки(
		Форма,
		ПутьКДанным,
		Ложь,
		0,
		Истина,
		СчетчикФлаговНаСтраницах);
		
	УдалитьОшибкиИзДанныхФормыПоПутиКДанным(Форма, ПутьКДанным);	
		
	Форма.СчетчикФлаговНаСтраницах = Новый ФиксированнаяСтруктура(СчетчикФлаговНаСтраницах);
		
	УстановитьКартинкиДляЗаголовковСтраницФормы(Форма);	
КонецПроцедуры


#КонецОбласти


#КонецОбласти


#Область МеханизмОтображенияЗаголовковКолонокТаблицы

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураОписанияКолонокЗаголовков()
	СтруктураОписания = Новый Структура;
	
	СтруктураОписания.Вставить("ПолеТаблицы");
	СтруктураОписания.Вставить("Заголовок");
	СтруктураОписания.Вставить("Ширина", 0);
	
	Возврат СтруктураОписания;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиВТаблице(Форма, ДанныеТаблицы, ОписаниеКолонокЗаголовков)
	ЗаполнитьТекстыЗаголовковКолонокПоУмолчанию(Форма, ОписаниеКолонокЗаголовков);
	
	Для Каждого СтрокТаблицы Из ДанныеТаблицы Цикл
		УстановитьЗаголовкиВСтрокеТаблицы(Форма, СтрокТаблицы, ОписаниеКолонокЗаголовков, Ложь);			
	КонецЦикла;	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УстановитьЗаголовкиВСтрокеТаблицы(Форма, СтрокаТаблицы, ОписаниеКолонокЗаголовков, ЗаполнятьЗаголовкиПоУмолчанию = Истина)
	Если ЗаполнятьЗаголовкиПоУмолчанию Тогда
		ЗаполнитьТекстыЗаголовковКолонокПоУмолчанию(Форма, ОписаниеКолонокЗаголовков);
	КонецЕсли;	

	Для Каждого ОписаниеЗаголовка Из ОписаниеКолонокЗаголовков Цикл
		СтрокаТаблицы[ОписаниеЗаголовка.ПолеТаблицы + "Заголовок"] = ОписаниеЗаголовка.Заголовок + ":";			
	КонецЦикла;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьТекстыЗаголовковКолонокПоУмолчанию(Форма, ОписаниеКолонокЗаголовков)
	Если ОписаниеКолонокЗаголовков <> Неопределено Тогда
		Для Каждого ОписаниеКолонки Из ОписаниеКолонокЗаголовков Цикл
			Если Не ЗначениеЗаполнено(ОписаниеКолонки.Заголовок) Тогда
				ПолеТаблицы = Форма.Элементы.Найти(ОписаниеКолонки.ПолеТаблицы);
				
				Если ПолеТаблицы <> Неопределено Тогда
					ОписаниеКолонки.Заголовок = ПолеТаблицы.Заголовок;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьЗаголовкиКПолямТаблицФормы(Форма, ИменаДополняемыхТаблиц, ОписаниеКолонокЗаголовковТаблицФормы)
	
	ДобавляемыеРеквизиты = Новый Массив;
		
	Для Каждого ИмяТаблицы Из ИменаДополняемыхТаблиц Цикл
		ОписаниеКолонокЗаголовков = ОписаниеКолонокЗаголовковТаблицФормы[ИмяТаблицы];
		
		Таблица = Форма.Элементы.Найти(ИмяТаблицы);
		
		Если Таблица = Неопределено
			Или ОписаниеКолонокЗаголовков = Неопределено Тогда
			
			Продолжить;
		КонецЕсли;	
		
		ЗаполнитьТекстыЗаголовковКолонокПоУмолчанию(Форма, ОписаниеКолонокЗаголовков);
		
		ПутьКДаннымТаблицы = Таблица.ПутьКДанным;
		Для Каждого ОписаниеЗаголовка Из ОписаниеКолонокЗаголовков Цикл
			КлассификаторСтроки = Новый КвалификаторыСтроки(СтрДлина(ОписаниеЗаголовка.Заголовок) + 1);
			
			ТипЗаголовка = Новый ОписаниеТипов("Строка", , КлассификаторСтроки);
			
			РеквизитЗаголовок = Новый РеквизитФормы(ОписаниеЗаголовка.ПолеТаблицы + "Заголовок", ТипЗаголовка, ПутьКДаннымТаблицы);
			
			ДобавляемыеРеквизиты.Добавить(РеквизитЗаголовок);	
		КонецЦикла;
		
	КонецЦикла;	
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	УсловноеОформлениеВидимостиПолей = Новый Соответствие;
	
	Для Каждого ЭлементОформления Из Форма.УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Видимость")).Использование Тогда
			Для Каждого ОформляемоеПоле Из ЭлементОформления.Поля.Элементы Цикл
				Если ОформляемоеПоле.Использование Тогда
					ЭлементыОформленияПоля = УсловноеОформлениеВидимостиПолей.Получить(ОформляемоеПоле.Поле);
					
					Если ЭлементыОформленияПоля = Неопределено Тогда
						ЭлементыОформленияПоля = Новый Массив;
						УсловноеОформлениеВидимостиПолей.Вставить(ОформляемоеПоле.Поле, ЭлементыОформленияПоля);
					КонецЕсли;
					
					ЭлементыОформленияПоля.Добавить(ЭлементОформления);
				КонецЕсли;
			КонецЦикла;		
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого ИмяТаблицы Из ИменаДополняемыхТаблиц Цикл
		ОписаниеКолонокЗаголовков = ОписаниеКолонокЗаголовковТаблицФормы[ИмяТаблицы];
		
		Таблица = Форма.Элементы.Найти(ИмяТаблицы);
		
		Если Таблица = Неопределено
			Или ОписаниеКолонокЗаголовков = Неопределено Тогда
			
			Продолжить;
		КонецЕсли;	
		
		ПутьКДаннымТаблицы = Таблица.ПутьКДанным;
		Для Каждого ОписаниеЗаголовка Из ОписаниеКолонокЗаголовков Цикл
			ПолеТаблицы = Форма.Элементы.Найти(ОписаниеЗаголовка.ПолеТаблицы);
			
			ПолеТаблицы.ОтображатьВШапке = Ложь;
			
			Если ПолеТаблицы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ГруппаЗаголовка = Форма.Элементы.Вставить(ПолеТаблицы.Имя + "ЗаголовокГруппа", Тип("ГруппаФормы"), ПолеТаблицы.Родитель, ПолеТаблицы);
			ГруппаЗаголовка.Вид = ВидГруппыФормы.ГруппаКолонок;
			ГруппаЗаголовка.ОтображатьВШапке = Ложь;
			ГруппаЗаголовка.Группировка = ГруппировкаКолонок.Горизонтальная;
			
			ПолеЗаголовка = Форма.Элементы.Добавить(ПолеТаблицы.Имя + "Заголовок", Тип("ПолеФормы"), ГруппаЗаголовка);
			ПолеЗаголовка.ПутьКДанным = ПутьКДаннымТаблицы + "." + ПолеТаблицы.Имя + "Заголовок";
			ПолеЗаголовка.Вид = ВидПоляФормы.ПолеНадписи;
			ПолеЗаголовка.ТолькоПросмотр = Истина;
			ПолеЗаголовка.ОтображатьВШапке = Ложь;
			ПолеЗаголовка.Шрифт = Новый Шрифт(ПолеТаблицы.Шрифт,,,,Истина);
			ПолеЗаголовка.РастягиватьПоГоризонтали = Ложь;
			
			Если ОписаниеЗаголовка.Ширина = 0 Тогда
				ПолеЗаголовка.Ширина = СтрДлина(ОписаниеЗаголовка.Заголовок) + 1;
			Иначе
				ПолеЗаголовка.Ширина = ОписаниеЗаголовка.Ширина;
			КонецЕсли;	
			
			Форма.Элементы.Переместить(ПолеТаблицы, ГруппаЗаголовка);
			
			ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ПолеТаблицы.Имя);
			
			ЭлементыОформленияПоля = УсловноеОформлениеВидимостиПолей.Получить(ПолеКомпоновки);
			
			Если ЭлементыОформленияПоля <> Неопределено Тогда
				Для Каждого ЭлементОформления Из ЭлементыОформленияПоля Цикл
					ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
					ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПолеЗаголовка.Имя);
				КонецЦикла;	
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ДокументыСЗВДобавитьКонтрольИсправлений(КонтролируемыеПоляРеквизитФормы, РазделыКонтролируемыхПолей = Неопределено) 
	
	КонтролируемыеПоляВзносыНачисленные = Новый Массив;
	КонтролируемыеПоляВзносыНачисленные.Добавить("НачисленоСтраховая");
	КонтролируемыеПоляВзносыНачисленные.Добавить("НачисленоНакопительная");
	КонтролируемыеПоляВзносыНачисленные.Добавить("ДоНачисленоСтраховая");
	КонтролируемыеПоляВзносыНачисленные.Добавить("ДоНачисленоНакопительная");
	
	КонтролируемыеПоляВзносыУплаченные = Новый Массив;
	КонтролируемыеПоляВзносыУплаченные.Добавить("УплаченоСтраховая");
	КонтролируемыеПоляВзносыУплаченные.Добавить("УплаченоНакопительная");
	КонтролируемыеПоляВзносыУплаченные.Добавить("ДоУплаченоСтраховая");
	КонтролируемыеПоляВзносыУплаченные.Добавить("ДоУплаченоНакопительная");
	
	КонтролируемыеПоляСтаж = Новый Массив;
	КонтролируемыеПоляСтаж.Добавить("НомерОсновнойЗаписи");
	КонтролируемыеПоляСтаж.Добавить("НомерДополнительнойЗаписи");
	КонтролируемыеПоляСтаж.Добавить("ДатаНачалаПериода");
	КонтролируемыеПоляСтаж.Добавить("ДатаОкончанияПериода");
	КонтролируемыеПоляСтаж.Добавить("ОсобыеУсловияТруда");
	КонтролируемыеПоляСтаж.Добавить("КодПозицииСписка");
	КонтролируемыеПоляСтаж.Добавить("ОснованиеИсчисляемогоСтажа");
	КонтролируемыеПоляСтаж.Добавить("ПервыйПараметрИсчисляемогоСтажа");
	КонтролируемыеПоляСтаж.Добавить("ВторойПараметрИсчисляемогоСтажа");
	КонтролируемыеПоляСтаж.Добавить("ТретийПараметрИсчисляемогоСтажа");
	КонтролируемыеПоляСтаж.Добавить("ОснованиеВыслугиЛет");
	КонтролируемыеПоляСтаж.Добавить("ПервыйПараметрВыслугиЛет");
	КонтролируемыеПоляСтаж.Добавить("ВторойПараметрВыслугиЛет");
	КонтролируемыеПоляСтаж.Добавить("ТретийПараметрВыслугиЛет");
	КонтролируемыеПоляСтаж.Добавить("ТерриториальныеУсловия");
	КонтролируемыеПоляСтаж.Добавить("ДатаОкончанияПериода");
	КонтролируемыеПоляСтаж.Добавить("ПараметрТерриториальныхУсловий");
	КонтролируемыеПоляСтаж.Добавить("ЗамещениеГосударственныхМуниципальныхДолжностей");
	
	КонтролируемыеПоляЗаработок = Новый Массив;
	КонтролируемыеПоляЗаработок.Добавить("ОблагаетсяВзносами");
	КонтролируемыеПоляЗаработок.Добавить("Заработок");
	КонтролируемыеПоляЗаработок.Добавить("Месяц");
	КонтролируемыеПоляЗаработок.Добавить("ОблагаетсяВзносамиДоПредельнойВеличины");
	КонтролируемыеПоляЗаработок.Добавить("ОблагаетсяВзносамиСвышеПредельнойВеличины");
	КонтролируемыеПоляЗаработок.Добавить("ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах");
	КонтролируемыеПоляЗаработок.Добавить("ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах");
	КонтролируемыеПоляЗаработок.Добавить("КатегорияЗастрахованныхЛиц");
	КонтролируемыеПоляЗаработок.Добавить("ПоДоговорамГПХДоПредельнойВеличины");
	
	КонтролируемыеПоляЗаработокВредный = Новый Массив;
	
	КонтролируемыеПоляЗаработокВредный.Добавить("КлассУсловийТруда");
	КонтролируемыеПоляЗаработокВредный.Добавить("Месяц");
	КонтролируемыеПоляЗаработокВредный.Добавить("ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах");
	КонтролируемыеПоляЗаработокВредный.Добавить("ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах");

	КонтролируемыПоля = Новый Структура;
	
	Если РазделыКонтролируемыхПолей = Неопределено
		Или РазделыКонтролируемыхПолей.Найти("НачисленныеВзносы") <> Неопределено Тогда 
		
		ОписаниеКонтролируемыхПолей = Новый Структура("ИмяПоляФиксДанных, КонтролируемыеПоля", "ФиксНачисленныеВзносы", Новый ФиксированныйМассив(КонтролируемыеПоляВзносыНачисленные));
		
		КонтролируемыПоля.Вставить("НачисленныеВзносы", Новый ФиксированнаяСтруктура(ОписаниеКонтролируемыхПолей));
	КонецЕсли;	
	
	Если РазделыКонтролируемыхПолей = Неопределено
		Или РазделыКонтролируемыхПолей.Найти("УплаченныеВзносы") <> Неопределено Тогда
		
		ОписаниеКонтролируемыхПолей = Новый Структура("ИмяПоляФиксДанных, КонтролируемыеПоля", "ФиксУплаченныеВзносы", Новый ФиксированныйМассив(КонтролируемыеПоляВзносыУплаченные));
		
		КонтролируемыПоля.Вставить("УплаченныеВзносы",  Новый ФиксированнаяСтруктура(ОписаниеКонтролируемыхПолей));
	КонецЕсли;	
	
	Если РазделыКонтролируемыхПолей = Неопределено
		Или РазделыКонтролируемыхПолей.Найти("Стаж") <> Неопределено Тогда
		
		ОписаниеКонтролируемыхПолей = Новый Структура("ИмяПоляФиксДанных, КонтролируемыеПоля", "ФиксСтаж", Новый ФиксированныйМассив(КонтролируемыеПоляСтаж));
		
		КонтролируемыПоля.Вставить("Стаж",  Новый ФиксированнаяСтруктура(ОписаниеКонтролируемыхПолей));	
	КонецЕсли;	
	
	Если РазделыКонтролируемыхПолей = Неопределено
		Или РазделыКонтролируемыхПолей.Найти("Заработок") <> Неопределено Тогда
		
		ОписаниеКонтролируемыхПолей = Новый Структура("ИмяПоляФиксДанных, КонтролируемыеПоля", "ФиксЗаработок", Новый ФиксированныйМассив(КонтролируемыеПоляЗаработок));
		
		КонтролируемыПоля.Вставить("Заработок", Новый ФиксированнаяСтруктура(ОписаниеКонтролируемыхПолей));
	КонецЕсли;	
	
	Если РазделыКонтролируемыхПолей = Неопределено
		Или РазделыКонтролируемыхПолей.Найти("ЗаработокВредный") <> Неопределено Тогда
		
		ОписаниеКонтролируемыхПолей = Новый Структура("ИмяПоляФиксДанных, КонтролируемыеПоля", "ФиксЗаработок", Новый ФиксированныйМассив(КонтролируемыеПоляЗаработокВредный));
		
		КонтролируемыПоля.Вставить("ФиксЗаработокВредный", Новый ФиксированнаяСтруктура(ОписаниеКонтролируемыхПолей));
	КонецЕсли;	
			
	КонтролируемыеПоляРеквизитФормы = Новый ФиксированнаяСтруктура(КонтролируемыПоля);

КонецПроцедуры	

&НаСервереБезКонтекста
Функция ДобавитьОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы(КоллекцияОписанийЭлементов, ОписаниеЭлемента)  		
	КоллекцияОписанийЭлементов.Добавить(ОписаниеЭлемента);
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы()
	ОписаниеЭлемента = ОписаниеЭлементаСИндикациейОшибок();	
	
	ОписаниеЭлемента.Тип = "ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы";
	
	Возврат ОписаниеЭлемента;		
КонецФункции	

&НаСервереБезКонтекста
Функция ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента)
	КоллекцияОписанийЭлементов.Добавить(ОписаниеЭлемента);
КонецФункции	

&НаСервереБезКонтекста
Функция ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки() 
	ОписаниеЭлемента = ОписаниеЭлементаСИндикациейОшибок();	
	
	ОписаниеЭлемента.Тип = "ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки";
	
	Возврат ОписаниеЭлемента;		
КонецФункции	

&НаСервереБезКонтекста
Функция СообщенияОбОшибкахИзДанныхФормы(Форма, КлючДанных = Неопределено)
	Возврат ОшибкиИзДанныхФормы(Форма, КлючДанных, Истина);		
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеЭлементаСИндикациейОшибок()
	ОписаниеЭлемента = Новый Структура;
	
	ОписаниеЭлемента.Вставить("Тип");
	ОписаниеЭлемента.Вставить("ИмяЭлемента", "");
	ОписаниеЭлемента.Вставить("ИмяЭлементаТаблица", "");
	ОписаниеЭлемента.Вставить("ОтображатьГиперссылку", Ложь);
	ОписаниеЭлемента.Вставить("ПутьКДаннымФормыСодержащимОшибку", "");
	ОписаниеЭлемента.Вставить("ИмяРеквизитаТаблицы", "");
	ОписаниеЭлемента.Вставить("ОтображатьНепривязанныеОшибки", Ложь);
	ОписаниеЭлемента.Вставить("ОформлениеДляДанныхСОшибкой", "");
	ОписаниеЭлемента.Вставить("ОформлениеДляНеЗаполненныхДанныхДанных", "");

	Возврат ОписаниеЭлемента;		
КонецФункции


&НаСервереБезКонтекста
Функция ОшибкиИзДанныхФормы(Форма, КлючДанных = Неопределено, ФормироватьСообщенияПользователю = Ложь)
	Ошибки = Новый Массив;
	
	ПутиКТаблицамФормы = ПутиКДаннымФормы(Форма, Ложь);
	
	ОшибкиИзДанныхШапкиФормыВМассив(Ошибки, Форма, "*", КлючДанных, Ложь, ФормироватьСообщенияПользователю);
		
	Для Каждого ПутьКДаннымТаблицы Из ПутиКТаблицамФормы Цикл 
		ДанныеТаблицы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДаннымТаблицы);
		
		Для Каждого СтрокаТаблицы Из ДанныеТаблицы Цикл
			ИндексСтроки = ДанныеТаблицы.Индекс(СтрокаТаблицы);
			
			ОшибкиИзСтрокиТаблицыФормыВМассив(
				Ошибки, 
				СтрокаТаблицы, 
				ПутьКДаннымТаблицы, 
				ИндексСтроки,
				"*",
				КлючДанных,
				ФормироватьСообщенияПользователю);	
		КонецЦикла;			
	КонецЦикла;	
	
	Возврат Ошибки;
КонецФункции


&НаСервереБезКонтекста
Процедура ОшибкиИзСтрокиТаблицыФормыВМассив(Ошибки, СтрокаТаблицы, ПутьКДаннымТаблицы, ИндексСтроки, ИмяРеквизитаСтроки = "", КлючДанных = Неопределено, ФормироватьСообщенияПользователю = Ложь)
	ОшибкиСтрокиТаблицы = СтрокиТаблицыОшибокСтрокиТаблицыДанныхФормы(СтрокаТаблицы, ИмяРеквизитаСтроки, КлючДанных);
	
	Для Каждого ОшибкаДанныхСтрокиТаблицы Из ОшибкиСтрокиТаблицы Цикл
		ОписаниеОшибки = ОписаниеОшибкиИзОшибкиДанныхСтрокиТаблицы(ОшибкаДанныхСтрокиТаблицы, ПутьКДаннымТаблицы, ИндексСтроки);
		
		Если ФормироватьСообщенияПользователю Тогда
			СообщениеОбОшибке = СообщениеПользователюИзОписанияОшибкиВДанных(ОписаниеОшибки);
			Ошибки.Добавить(СообщениеОбОшибке);
		Иначе
			Ошибки.Добавить(ОписаниеОшибки);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СообщениеПользователюИзОписанияОшибкиВДанных(ОписаниеОшибкиДанных)
	СообщениеОбОшибке = Новый СообщениеПользователю;
	
	Если ЗначениеЗаполнено(ОписаниеОшибкиДанных.КлючДанных) Тогда 
		СообщениеОбОшибке.УстановитьДанные(ОписаниеОшибкиДанных.КлючДанных);
	КонецЕсли;
	
	СообщениеОбОшибке.Текст = ОписаниеОшибкиДанных.Текст;
	СообщениеОбОшибке.Поле = ПутьКДаннымСтрокойПоОписаниюПути(ОписаниеОшибкиДанных.ПутьКДанным);
	
	Возврат СообщениеОбОшибке;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ОписаниеОшибкиИзОшибкиДанныхСтрокиТаблицы(ОшибкаДанныхСтрокиТаблицы, ПутьКДаннымТаблицы, ИндексСтроки)
	ОписаниеОшибки = ОписаниеОшибкиДанных();
		
	ОписаниеОшибки.Текст = ОшибкаДанныхСтрокиТаблицы.Текст;
	ОписаниеОшибки.КлючДанных = ОшибкаДанныхСтрокиТаблицы.КлючДанных;
	
	ПутьКДанным = ОписаниеПутиКДаннымСтрокиТаблицы();
	ПутьКДанным.ПутьКДаннымТаблицы = ПутьКДаннымТаблицы;
	ПутьКДанным.ИндексСтроки = ИндексСтроки;
	ПутьКДанным.ИмяРеквизитаСтроки = ОшибкаДанныхСтрокиТаблицы.Поле;
	
	ОписаниеОшибки.ПутьКДанным = ПутьКДанным;
	
	Возврат ОписаниеОшибки;	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеОшибкиДанных()
	ОписаниеОшибкиВДанных = Новый Структура;
	
	ОписаниеОшибкиВДанных.Вставить("Текст", "");
	ОписаниеОшибкиВДанных.Вставить("КлючДанных", "");
	ОписаниеОшибкиВДанных.Вставить("ПутьКДанным");
	
	Возврат ОписаниеОшибкиВДанных;
КонецФункции	

&НаСервереБезКонтекста
Процедура ОшибкиИзДанныхШапкиФормыВМассив(Ошибки, Форма, ПутьКДанным = "", КлючДанных = Неопределено, ПолучатьТолькоНепривязанныеОшибки = Ложь, ФормироватьСообщенияПользователю = Ложь)
	ОшибкиШапкиФормы = СтрокиТаблицыОшибокДанныхШапкиФормы(Форма, ПутьКДанным, КлючДанных, ПолучатьТолькоНепривязанныеОшибки);
		
	Для Каждого ОшибкаДанныхШапки Из ОшибкиШапкиФормы Цикл
		ОписаниеОшибки = ОписаниеОшибкиИзОшибкиДанныхШапки(ОшибкаДанныхШапки);
		
		Если ФормироватьСообщенияПользователю Тогда
			СообщениеОбОшибке = СообщениеПользователюИзОписанияОшибкиВДанных(ОписаниеОшибки);
			Ошибки.Добавить(СообщениеОбОшибке);
		Иначе
			Ошибки.Добавить(ОписаниеОшибки);
		КонецЕсли;	
	КонецЦикла;	

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеОшибкиИзОшибкиДанныхШапки(ОшибкаДанныхШапки)
	ОписаниеОшибки = ОписаниеОшибкиДанных();
		
	ОписаниеОшибки.Текст = ОшибкаДанныхШапки.Текст;
	ОписаниеОшибки.КлючДанных = ОшибкаДанныхШапки.КлючДанных;
	
	ПутьКДанным = ОписаниеПутиКДаннымРеквизитаОбъекта();
	ПутьКДанным.ПутьКДанным = ОшибкаДанныхШапки.Поле;
	
	ОписаниеОшибки.ПутьКДанным = ПутьКДанным;
		
	Возврат ОписаниеОшибки;	

КонецФункции

&НаСервереБезКонтекста
Функция ПутиКДаннымФормы(Форма, ЗаполнятьПутиКРеквизитамШапки = Истина)
	ПутиКДаннымФормы = Новый Массив;	
	
	ЗаполнитьПутиКДаннымФормы(ПутиКДаннымФормы, Форма, , , ЗаполнятьПутиКРеквизитамШапки);
	
	Возврат ПутиКДаннымФормы;
	
КонецФункции	

&НаСервереБезКонтекста
Процедура ЗаполнитьПутиКДаннымФормы(ПутиКДаннымФормы, Форма, ОписаниеТекущегоРеквизитаФормы = Неопределено, УровеньВложенности = 1, ЗаполнятьПутиКРеквизитамШапки = Истина)
	Если УровеньВложенности > 2 Тогда
		Возврат;
	КонецЕсли;	
	
	Если ОписаниеТекущегоРеквизитаФормы = Неопределено Тогда
		ПутьКТекущемуРеквизитуФормы = "";
		ОписаниеТипаТекущегоРеквизита = Неопределено;
	Иначе
		ПутьКТекущемуРеквизитуФормы = ОписаниеТекущегоРеквизитаФормы.Путь 
										+ ?(ОписаниеТекущегоРеквизитаФормы.Путь = "", ОписаниеТекущегоРеквизитаФормы.Имя, "." + ОписаниеТекущегоРеквизитаФормы.Имя);
										
		ОписаниеТипаТекущегоРеквизита = ОписаниеТекущегоРеквизитаФормы.ТипЗначения;									
	КонецЕсли;	
	
	Если ОписаниеТипаТекущегоРеквизита = Неопределено Тогда
		РеквизитыФормы = Форма.ПолучитьРеквизиты("");
	Иначе
		РеквизитыФормы = Форма.ПолучитьРеквизиты(ПутьКТекущемуРеквизитуФормы);
	КонецЕсли;			
	
	Для Каждого ОписаниеРеквизита Из РеквизитыФормы Цикл
		Если ОписаниеРеквизита.ТипЗначения.СодержитТип(Тип("КоллекцияДвижений")) Тогда
			Продолжить;
		КонецЕсли;	
		
		ПутьКРеквизиту = ОписаниеРеквизита.Путь + ?(ОписаниеРеквизита.Путь = "", ОписаниеРеквизита.Имя, "." + ОписаниеРеквизита.Имя);

		РеквизитФормы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКРеквизиту);
		
		Если ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыКоллекция") Тогда
			ПутиКДаннымФормы.Добавить(ПутьКРеквизиту);	
		ИначеЕсли ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыСтруктура")
			Или ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыСтруктураСКоллекцией") Тогда
			
			Если ЗаполнятьПутиКРеквизитамШапки Тогда 
				ПутиКДаннымФормы.Добавить(ПутьКРеквизиту);
			КонецЕсли;	
			
			ЗаполнитьПутиКДаннымФормы(ПутиКДаннымФормы, Форма, ОписаниеРеквизита, УровеньВложенности + 1, ЗаполнятьПутиКРеквизитамШапки);
		ИначеЕсли ЗаполнятьПутиКРеквизитамШапки Тогда 
			ПутиКДаннымФормы.Добавить(ПутьКРеквизиту);	
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УстановитьФлагНаличияОшибки(Форма, ПутьКДанным, ЗначениеФлага, КоличествоПодчиненныхЭлементовСОшибками, СбрасыватьСчетчикОшибокВПодчиненныхДанныхДляТекущегоУзла, СчетчикФлаговНаСтраницах, ПутиКДаннымФормы = Неопределено) Экспорт
	УстановленыНовыеСвойстваИндикации = Ложь;
	
	ОписаниеПутиКДанным = ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(ПутьКДанным);
	
	НепривязанныеДанные = Ложь;
	Если ОписаниеПутиКДанным.Тип = "ПутьКДаннымСтрокиТаблицы" Тогда
		Таблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеПутиКДанным.ПутьКДаннымТаблицы);
		ДанныеРеквизитовИндикации = Таблица[ОписаниеПутиКДанным.ИндексСтроки];
		ОписаниеРеквизитовИндикации = Форма.ОписаниеРеквизитовПризнаковНаличияОшибок.Получить(ОписаниеПутиКДанным.ПутьКДаннымТаблицы);
		
		Если ПутиКДаннымФормы <> Неопределено 
			И ПутиКДаннымФормы.Найти(ОписаниеПутиКДанным.ПутьКДаннымТаблицы) = Неопределено Тогда
			
			НепривязанныеДанные = Истина;		
		КонецЕсли;	
	Иначе
		ОписаниеРеквизитовИндикации = Форма.ОписаниеРеквизитовПризнаковНаличияОшибок.Получить(ОписаниеПутиКДанным.ПутьКДанным);
		ДанныеРеквизитовИндикации = Форма;
		
		Если ПутиКДаннымФормы <> Неопределено 
			И ПутиКДаннымФормы.Найти(ОписаниеПутиКДанным.ПутьКДанным) = Неопределено Тогда
			
			НепривязанныеДанные = Истина;		
		КонецЕсли;
	КонецЕсли;	
		
	Если ОписаниеРеквизитовИндикации = Неопределено Тогда	
		Если НепривязанныеДанные
			И Форма.ОписаниеФлагаСИндикациейНепривязанныхОшибок <> Неопределено Тогда
			
			Если Форма[Форма.ОписаниеФлагаСИндикациейНепривязанныхОшибок.ИмяРеквизитаФлаг] = Ложь
				И ЗначениеФлага = Истина Тогда
				
				Форма[Форма.ОписаниеФлагаСИндикациейНепривязанныхОшибок.ИмяРеквизитаФлаг] = Истина;
				
				УстановленыНовыеСвойстваИндикации = Истина;
			КонецЕсли;	
		КонецЕсли;	
		Возврат УстановленыНовыеСвойстваИндикации;	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОписаниеРеквизитовИндикации.ИмяРеквизитаФлаг) Тогда
		Если ЗначениеФлага <> Неопределено
			И ДанныеРеквизитовИндикации[ОписаниеРеквизитовИндикации.ИмяРеквизитаФлаг] <> ЗначениеФлага Тогда
			
			ДанныеРеквизитовИндикации[ОписаниеРеквизитовИндикации.ИмяРеквизитаФлаг] = ЗначениеФлага;
			УстановленыНовыеСвойстваИндикации = Истина;
			
			ПриращениеСчетчика = ?(ЗначениеФлага, 1, -1);
		КонецЕсли;	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОписаниеРеквизитовИндикации.ИмяРеквизитаСчетчик) Тогда
		ТекущиеКоличествоПодчиненныхЭлементовСОшибками = ДанныеРеквизитовИндикации[ОписаниеРеквизитовИндикации.ИмяРеквизитаСчетчик];
		
		Если СбрасыватьСчетчикОшибокВПодчиненныхДанныхДляТекущегоУзла Тогда
			ДанныеРеквизитовИндикации[ОписаниеРеквизитовИндикации.ИмяРеквизитаСчетчик] = 0;
		Иначе	
			ДанныеРеквизитовИндикации[ОписаниеРеквизитовИндикации.ИмяРеквизитаСчетчик] = ДанныеРеквизитовИндикации[ОписаниеРеквизитовИндикации.ИмяРеквизитаСчетчик] + КоличествоПодчиненныхЭлементовСОшибками;
		КонецЕсли;	
		
		Если (ТекущиеКоличествоПодчиненныхЭлементовСОшибками = 0 
			И ДанныеРеквизитовИндикации[ОписаниеРеквизитовИндикации.ИмяРеквизитаСчетчик] > 0) Тогда
			
			УстановленыНовыеСвойстваИндикации = Истина;
			ПриращениеСчетчика = 1;
		ИначеЕсли (ТекущиеКоличествоПодчиненныхЭлементовСОшибками > 0 
			И ДанныеРеквизитовИндикации[ОписаниеРеквизитовИндикации.ИмяРеквизитаСчетчик] = 0) Тогда
			
			УстановленыНовыеСвойстваИндикации = Истина;
			ПриращениеСчетчика = - 1;
		КонецЕсли;			
	КонецЕсли;	
	
	Если УстановленыНовыеСвойстваИндикации Тогда
		Для Каждого ИмяСтраницы Из ОписаниеРеквизитовИндикации.СтраницыВладельцы Цикл
			СчетчикФлаговНаСтраницах[ИмяСтраницы] = СчетчикФлаговНаСтраницах[ИмяСтраницы] + ПриращениеСчетчика;	
		КонецЦикла;			
	КонецЕсли;	
		 	
	Возврат УстановленыНовыеСвойстваИндикации;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(ПутьКДаннымСтрокой)
	Если НЕ (СтрНайти(ПутьКДаннымСтрокой, "[") = 0) Тогда
		ОписаниеПути = ОписаниеПутиКДаннымСтрокиТаблицыПоПутиКДаннымСтрокой(ПутьКДаннымСтрокой);
	Иначе
		ОписаниеПути = ОписаниеПутиКДаннымРеквизитаОбъекта();
		ОписаниеПути.ПутьКДанным = ПутьКДаннымСтрокой;
	КонецЕсли;	
	
	Возврат ОписаниеПути;
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеПутиКДаннымСтрокиТаблицыПоПутиКДаннымСтрокой(ПутьКДаннымСтрокой)
	ОписаниеПути = ОписаниеПутиКДаннымСтрокиТаблицы();
	
	ОписаниеПути.ИндексСтроки = ИндексСтрокиТаблицыИзПутиКДанным(ПутьКДаннымСтрокой);
	
	НомерПоследнегоСимволаИмениТаблицы = СтрНайти(ПутьКДаннымСтрокой, "[" + ИндексСтрокой(ОписаниеПути.ИндексСтроки) + "]");
	ОписаниеПути.ПутьКДаннымТаблицы = Лев(ПутьКДаннымСтрокой, НомерПоследнегоСимволаИмениТаблицы - 1);
	
	НомерСимволаЗакрывающейСкобки = СтрНайти(ПутьКДаннымСтрокой, "]");
	
	ОписаниеПути.ИмяРеквизитаСтроки = Сред(ПутьКДаннымСтрокой, НомерСимволаЗакрывающейСкобки + 2);
	
	Возврат ОписаниеПути;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеПутиКДаннымСтрокиТаблицы()
	ОписаниеПути = Новый Структура("Тип, ПутьКДаннымТаблицы, ИндексСтроки, ИмяРеквизитаСтроки");	
	ОписаниеПути.Тип = "ПутьКДаннымСтрокиТаблицы";
	ОписаниеПути.ПутьКДаннымТаблицы = "";
	ОписаниеПути.ИмяРеквизитаСтроки = "";
	
	Возврат ОписаниеПути;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеПутиКДаннымРеквизитаОбъекта()
	ОписаниеПути = Новый Структура("Тип, ПутьКДанным");	
	ОписаниеПути.Тип = "ПутьКДаннымРеквизита";
	ОписаниеПути.ПутьКДанным = "";
	
	Возврат ОписаниеПути;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокиТаблицыОшибокДанныхШапкиФормы(Форма, ПутьКДанным = "", КлючДанных = Неопределено, ПолучатьТолькоНепривязанныеОшибки = Ложь) Экспорт
	СтруктураПоиска = Новый Структура;
	
	Если ПутьКДанным <> "*" Тогда
		
		СтруктураПоиска.Вставить("Поле", ПутьКДанным);
	КонецЕсли;
	
	Если КлючДанных <> Неопределено Тогда
		СтруктураПоиска.Вставить("КлючДанных", КлючДанных);	
	КонецЕсли;	
	
	Если ПолучатьТолькоНепривязанныеОшибки Тогда
		СтруктураПоиска.Вставить("НеПривязана", Истина);	
	КонецЕсли;	
	
	Если СтруктураПоиска.Количество() = 0 Тогда
		ОшибкиШапкиФормы = Форма.ТаблицаХраненияОшибок;
	Иначе
		ОшибкиШапкиФормы = Форма.ТаблицаХраненияОшибок.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;	
	
	Возврат ОшибкиШапкиФормы;
КонецФункции	

&НаСервереБезКонтекста
Процедура ПоместитьСообщенияОбОшибкахВДанныеФормы(Форма, СообщенияПользователю, КлючДанных = Неопределено)
	ПутиКДаннымФормы = ПутиКДаннымФормы(Форма);
	
	Для Каждого Ошибка Из СообщенияПользователю Цикл
		ОписаниеПутиКДанным = ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(Ошибка.Поле);
		
		Если ОписаниеПутиКДанным.Тип = "ПутьКДаннымСтрокиТаблицы" Тогда
			ПутьКДанным = ОписаниеПутиКДанным.ПутьКДаннымТаблицы;
		Иначе
			ПутьКДанным = ОписаниеПутиКДанным.ПутьКДанным;
		КонецЕсли;	
		
		Если ПутиКДаннымФормы.Найти(ПутьКДанным) = Неопределено Тогда
			ХранилищеОшибок = Форма.ТаблицаХраненияОшибок;
			СтрокаХранилищаОшибок = ХранилищеОшибок.Добавить();
			СтрокаХранилищаОшибок.Текст = Ошибка.Текст;
			СтрокаХранилищаОшибок.КлючДанных = КлючДанных;
			СтрокаХранилищаОшибок.НеПривязана = Истина;
		Иначе	
			ОписаниеПутиКДанным = ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(Ошибка.Поле);
			
			Если ОписаниеПутиКДанным.Тип = "ПутьКДаннымРеквизита" Тогда
				ХранилищеОшибок = Форма.ТаблицаХраненияОшибок;
				СтрокаХранилищаОшибок = ХранилищеОшибок.Добавить();
				СтрокаХранилищаОшибок.Текст = Ошибка.Текст;
				СтрокаХранилищаОшибок.Поле = Ошибка.Поле;
				СтрокаХранилищаОшибок.КлючДанных = КлючДанных;
			Иначе	
				Таблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеПутиКДанным.ПутьКДаннымТаблицы);
				ХранилищеОшибок = Таблица[ОписаниеПутиКДанным.ИндексСтроки].ТаблицаХраненияОшибок;
				СтрокаХранилищаОшибок = ХранилищеОшибок.Добавить();
				СтрокаХранилищаОшибок.Текст = Ошибка.Текст;
				СтрокаХранилищаОшибок.Поле = ОписаниеПутиКДанным.ИмяРеквизитаСтроки;
				СтрокаХранилищаОшибок.КлючДанных = КлючДанных;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	


&НаСервереБезКонтекста
Процедура УстановитьФлагиНаличияОшибокПоСообщениямОбОшибках(Форма, Ошибки, ОписаниеПодчиненностиДанных = Неопределено, УстанавливатьФлагНаличияНепривязанныхОшибок = Истина)
	СчетчикиОшибокВПодчиненныхЭлементах = Новый Соответствие;
	
	ПутиКДанным = Новый Массив;
	
	Для Каждого Ошибка Из Ошибки Цикл
		ОписаниеПутиКДанным = ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(Ошибка.Поле);
		ПутиКДанным.Добавить(Ошибка.Поле);					
	КонецЦикла;	
		
	УстановитьФлагиНаличияДляПутиКДанным(Форма, ПутиКДанным, Истина, ОписаниеПодчиненностиДанных, Ложь);
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура УстановитьФлагиНаличияДляПутиКДанным(Форма, ПутиКДанным, ЗначениеФлага, ОписаниеПодчиненностиДанных = Неопределено, СбрасыватьСчетчикОшибокВПодчиненныхЭлементах = Ложь)
	ПутиКУзламДанныхСОшибками = Новый Массив;
	
	ОтработанныеПутиКУзламДаннымСОшибками = Новый Соответствие;
	
	Для Каждого ПутьКДанным Из ПутиКДанным Цикл 
		ОписаниеПутиКДанным = ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(ПутьКДанным);
		
		Если ОписаниеПутиКДанным.Тип = "ПутьКДаннымСтрокиТаблицы" И
			Не ПустаяСтрока(ОписаниеПутиКДанным.ИмяРеквизитаСтроки) Тогда
			
			ОписаниеПутиКДанным.ИмяРеквизитаСтроки = "";
			
			Если ОписаниеПутиКДанным.Тип = "ПутьКДаннымРеквизита" Тогда
				ПутьКДанным =  ОписаниеПутиКДанным.ПутьКДанным;
			Иначе
				ПутьКДанным =  ОписаниеПутиКДанным.ПутьКДаннымТаблицы + "[" + ИндексСтрокой(ОписаниеПутиКДанным.ИндексСтроки) + "]" + ?(ОписаниеПутиКДанным.ИмяРеквизитаСтроки = "", "", ".") + ОписаниеПутиКДанным.ИмяРеквизитаСтроки;
			КонецЕсли;	
		КонецЕсли;
		
		Если ОтработанныеПутиКУзламДаннымСОшибками.Получить(ПутиКДанным) = Неопределено Тогда
			ПутиКУзламДанныхСОшибками.Добавить(ПутьКДанным);
			ОтработанныеПутиКУзламДаннымСОшибками.Вставить(ПутьКДанным, Истина);
		КонецЕсли;	
	КонецЦикла;	
		
	ДеревоПодчиненностиДанных = ДеревоПодчиненностиДанныхПоПутямКПодчиненнымДанным(Форма, ПутиКУзламДанныхСОшибками, ОписаниеПодчиненностиДанных);
	
	ПутиКДаннымФормы = ПутиКДаннымФормы(Форма, Истина);
	
	СчетчикФлаговНаСтраницах = Новый Структура(Форма.СчетчикФлаговНаСтраницах);
	
	Для Каждого ТекущийУзел Из ДеревоПодчиненностиДанных.Строки Цикл
		УстановитьФлагНаличияОшибокДляУЗлаДанных(Форма, ТекущийУзел, ЗначениеФлага, ОтработанныеПутиКУзламДаннымСОшибками, ПутиКДаннымФормы, СчетчикФлаговНаСтраницах, СбрасыватьСчетчикОшибокВПодчиненныхЭлементах);
	КонецЦикла;	
	
	Форма.СчетчикФлаговНаСтраницах = Новый ФиксированнаяСтруктура(СчетчикФлаговНаСтраницах);
	
	УстановитьКартинкиДляЗаголовковСтраницФормы(Форма)
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ДеревоПодчиненностиДанныхПоПутямКПодчиненнымДанным(Данные, ПутиКПодчиненнымДанным, ОписаниеПодчиненностиДанных = Неопределено)
	ОтработанныеУзлыВедущихДанных = Новый Соответствие;	
	
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("ПутьКДанным", Новый ОписаниеТипов("Строка"));
	
	Для Каждого ПутьКПодчиненнымДанным Из ПутиКПодчиненнымДанным Цикл
		ДобавитьУзлыДереваПодчиненностиДанныхПоПутиКПодчиненнымДанным(Данные, Дерево, ПутьКПодчиненнымДанным, ОписаниеПодчиненностиДанных, ОтработанныеУзлыВедущихДанных);
	КонецЦикла;
	
	Возврат Дерево;
КонецФункции	

&НаСервереБезКонтекста
Функция ДобавитьУзлыДереваПодчиненностиДанныхПоПутиКПодчиненнымДанным(Данные, ДеревоПодчиненностиДанных, ПутьКПодчиненнымДанным, ОписаниеПодчиненности, ОтработанныеУзлыВедущихДанных)
	УзлыПодчиненныхДанных = ОтработанныеУзлыВедущихДанных.Получить(ПутьКПодчиненнымДанным);
	Если УзлыПодчиненныхДанных <> Неопределено Тогда
		Возврат УзлыПодчиненныхДанных;
	КонецЕсли;
	
	Если ОписаниеПодчиненности <> Неопределено Тогда
		ПутиКВедущимДанным = ПутиКВедущимДанным(Данные, ПутьКПодчиненнымДанным, ОписаниеПодчиненности, Ложь);
	Иначе
		ПутиКВедущимДанным = Новый Массив;
	КонецЕсли;	
	
	Если ПутиКВедущимДанным.Количество() = 0 Тогда
		Узел = ДеревоПодчиненностиДанных.Строки.Добавить();
		Узел.ПутьКДанным = ПутьКПодчиненнымДанным;
		
		УзлыПодчиненныхДанных = Новый Массив;
		УзлыПодчиненныхДанных.Добавить(Узел);
		
		ОтработанныеУзлыВедущихДанных.Вставить(ПутьКПодчиненнымДанным, УзлыПодчиненныхДанных);	
				
		Возврат УзлыПодчиненныхДанных;
	КонецЕсли;	
		
	УзлыПодчиненныхДанных = Новый Массив;
	
	Для Каждого ПутьКВедущимДанным Из ПутиКВедущимДанным Цикл
		УзлыВедущихДанных = ДобавитьУзлыДереваПодчиненностиДанныхПоПутиКПодчиненнымДанным(Данные, ДеревоПодчиненностиДанных, ПутьКВедущимДанным, ОписаниеПодчиненности, ОтработанныеУзлыВедущихДанных);
				
		Для Каждого УзелВедущихДанных Из УзлыВедущихДанных Цикл
			УзелПодчиненныхДанных = УзелВедущихДанных.Строки.Добавить();
			УзелПодчиненныхДанных.ПутьКДанным = ПутьКПодчиненнымДанным;
			
			УзлыПодчиненныхДанных.Добавить(УзелПодчиненныхДанных);
		КонецЦикла;		
	КонецЦикла;
		
	ОтработанныеУзлыВедущихДанных.Вставить(ПутьКПодчиненнымДанным, УзлыПодчиненныхДанных);
	
	Возврат УзлыПодчиненныхДанных;	
КонецФункции	

&НаСервереБезКонтекста
Функция ПутиКВедущимДанным(Данные, ПутьКПодчиненнымДанным, ОписаниеПодчиненностиДанных, РекурсивныйПоиск = Истина) Экспорт
	ПутиКВедущимДанным = Новый Массив;
	
	ЗаполнитьПутиКВедущимДанным(ПутиКВедущимДанным, Данные, ПутьКПодчиненнымДанным, ОписаниеПодчиненностиДанных, РекурсивныйПоиск);

	Возврат ПутиКВедущимДанным;
		
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьПутиКВедущимДанным(ПутиКВедущимДанным, Данные, ПутьКПодчиненнымДанным, ОписаниеПодчиненностиДанных, РекурсивныйПоиск = Истина)
	ОписаниеПутиКПодчиненнымДанным = ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(ПутьКПодчиненнымДанным);
	
	Если ОписаниеПутиКПодчиненнымДанным.Тип = "ПутьКДаннымСтрокиТаблицы" Тогда 
		ОписаниеПутиКПодчиненнымДанным.ИмяРеквизитаСтроки = "";
	КонецЕсли;	
	
	КлючиПоискаПравилСвязи = КлючиПоискаПравилСвязиПоОписаниюПутиКДанным(ОписаниеПутиКПодчиненнымДанным, Истина);	
		
	ДопустимыеТипыСвязиДанных = ДопустимыеТипыСвязиДанныхПоОписаниюПутиКВедущимДанным(ОписаниеПутиКПодчиненнымДанным);
	
	ПравилаСвязиДанных = ПравилаСвязиДанныхПоКлючамПоиска(ОписаниеПодчиненностиДанных, КлючиПоискаПравилСвязи, ДопустимыеТипыСвязиДанных, Истина);
	
	ОписаниеПутейКВедущимДанным = ОписаниеПутейКСвязаннымДаннымПоПравиламСвязиДанных(Данные, Данные, ОписаниеПутиКПодчиненнымДанным, ПравилаСвязиДанных);	
	
	Для Каждого ОписаниеПутиКВедущимДанным Из ОписаниеПутейКВедущимДанным Цикл
		ПутьКВедущимДанным = ПутьКДаннымСтрокойПоОписаниюПути(ОписаниеПутиКВедущимДанным);
		
		Если ПутьКВедущимДанным <> ПутьКПодчиненнымДанным 	
			И ПутиКВедущимДанным.Найти(ПутьКВедущимДанным) = Неопределено Тогда
			
			ПутиКВедущимДанным.Добавить(ПутьКВедущимДанным);
			
			Если РекурсивныйПоиск Тогда
				ЗаполнитьПутиКВедущимДанным(ПутиКВедущимДанным, Данные, ПутьКВедущимДанным, ОписаниеПодчиненностиДанных);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьФлагНаличияОшибокДляУЗлаДанных(Форма, ТекущийУзел, ЗначениеФлага, УзлыДанныхСИзменяемымЗначениемФлага, ПутиКДаннымФормы, СчетчикФлаговНаСтраницах, СбрасыватьСчетчикОшибокВПодчиненныхЭлементах = Ложь)
	КоличествоПодчиненныхУзловСОшибками = 0;
		
	Для Каждого ПодчиненныйУзел Из ТекущийУзел.Строки Цикл
		Если УстановитьФлагНаличияОшибокДляУЗлаДанных(Форма, ПодчиненныйУзел, ЗначениеФлага, УзлыДанныхСИзменяемымЗначениемФлага, ПутиКДаннымФормы, СчетчикФлаговНаСтраницах, СбрасыватьСчетчикОшибокВПодчиненныхЭлементах) Тогда
			Если ЗначениеФлага Тогда
				КоличествоПодчиненныхУзловСОшибками = КоличествоПодчиненныхУзловСОшибками + 1;
			Иначе 
				КоличествоПодчиненныхУзловСОшибками = КоличествоПодчиненныхУзловСОшибками - 1;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	СбрасыватьСчетчикОшибокВПодчиненныхДанныхДляТекущегоУзла = Ложь;
	ЕстьОшибкиВСобственныхДанных = Неопределено;
	Если УзлыДанныхСИзменяемымЗначениемФлага.Получить(ТекущийУзел.ПутьКДанным) <> Неопределено Тогда 
		ЕстьОшибкиВСобственныхДанных = ЗначениеФлага;
		СбрасыватьСчетчикОшибокВПодчиненныхДанныхДляТекущегоУзла = СбрасыватьСчетчикОшибокВПодчиненныхЭлементах
	КонецЕсли;	
		
	Возврат УстановитьФлагНаличияОшибки(
				Форма, 
				ТекущийУзел.ПутьКДанным, 
				ЕстьОшибкиВСобственныхДанных, 
				КоличествоПодчиненныхУзловСОшибками,
				СбрасыватьСчетчикОшибокВПодчиненныхДанныхДляТекущегоУзла, 
				СчетчикФлаговНаСтраницах,
				ПутиКДаннымФормы);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПреобразоватьПутиКДаннымВСообщенияхПользователю(ДанныеОбъекта, ПодчиненныеДанные, СообщенияПользователю, ОписаниеСвязиДанных, ПутьКДаннымОбъектаВФорме = "")
	Для Каждого Сообщение Из СообщенияПользователю Цикл
		ПутьКДаннымОбъекта = Сообщение.Поле;		
		
		Если ТипЗнч(ДанныеОбъекта) <> Тип("УправляемаяФорма") Тогда
			Если ВРег(Сред(ПутьКДаннымОбъекта, 1, 7)) = "ОБЪЕКТ." Тогда
				ПутьКДаннымОбъекта = Сред(ПутьКДаннымОбъекта, 8);
			Иначе
				ПутьКДаннымОбъекта = Сообщение.Поле;
			КонецЕсли;
		КонецЕсли;	
	
		ПутьКДаннымФормы = ПутьКДаннымПодчиненногоОбъекта(ДанныеОбъекта, ПодчиненныеДанные, ПутьКДаннымОбъекта, ОписаниеСвязиДанных);
		Если ПутьКДаннымФормы <> Неопределено Тогда
			Сообщение.Поле = ПутьКДаннымФормы;
			Сообщение.ПутьКДанным = "";
		Иначе			
			Если ПустаяСтрока(ПутьКДаннымОбъектаВФорме) Тогда
				Сообщение.Поле = ПутьКДаннымОбъекта;
			ИначеЕсли Не ПустаяСтрока(Сообщение.Поле) Тогда
				Сообщение.Поле = ПутьКДаннымОбъектаВФорме + "." + ПутьКДаннымОбъекта;
			КонецЕсли;				
		КонецЕсли;	
	КонецЦикла;	

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПутьКДаннымПодчиненногоОбъекта(ДанныеВедущегоОбъекта, ДанныеПодчиненногоОбъекта, ПутьКДаннымВедущегоОбъекта, ОписаниеСвязиДанных) Экспорт 
	ПутьКДаннымПодчиненногоОбъекта = Неопределено;
	
	Если ТипЗнч(ПутьКДаннымВедущегоОбъекта) = Тип("Структура") Тогда
		ОписаниеПутиКДаннымВедущегоОбъекта = ПутьКДаннымВедущегоОбъекта;
	Иначе
		ОписаниеПутиКДаннымВедущегоОбъекта = ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(ПутьКДаннымВедущегоОбъекта);
	КонецЕсли;
	
	ПравилаСвязиСДаннымиОбъекта = ПравилаСвязиПоПутиКДаннымВедущегоОбъекта(ОписаниеПутиКДаннымВедущегоОбъекта, ОписаниеСвязиДанных, Ложь);
	
	ОписаниеПутиКСвязаннымДанным = ОписаниеПутейКСвязаннымДаннымПоПравиламСвязиДанных(
										ДанныеВедущегоОбъекта, 
										ДанныеПодчиненногоОбъекта,
										ОписаниеПутиКДаннымВедущегоОбъекта,
										ПравилаСвязиСДаннымиОбъекта);
										
	Если ОписаниеПутиКСвязаннымДанным.Количество() > 0 Тогда									
		ПутьКДаннымПодчиненногоОбъекта = ПутьКДаннымСтрокойПоОписаниюПути(ОписаниеПутиКСвязаннымДанным[0]);
	КонецЕсли;
	
	Возврат ПутьКДаннымПодчиненногоОбъекта;
КонецФункции

#Область ОписаниеСвязанныхДанных

&НаКлиентеНаСервереБезКонтекста
Функция ПутьКДаннымСтрокойПоОписаниюПути(ОписаниеПути) Экспорт
	Если ОписаниеПути.Тип = "ПутьКДаннымРеквизита" Тогда
		Возврат ОписаниеПути.ПутьКДанным;
	Иначе
		Возврат ОписаниеПути.ПутьКДаннымТаблицы + "[" + ИндексСтрокой(ОписаниеПути.ИндексСтроки) + "]" + ?(ОписаниеПути.ИмяРеквизитаСтроки = "", "", ".") + ОписаниеПути.ИмяРеквизитаСтроки;
	КонецЕсли;	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеПутейКСвязаннымДаннымПоПравиламСвязиДанных(ВедущиеДанные, СвязанныеДанные, ОписаниеПутиКВедущимДанным, ПравилаСвязиСДаннымиОбъекта)	
	Если ОписаниеПутиКВедущимДанным.Тип = "ПутьКДаннымСтрокиТаблицы" Тогда
		ОписаниеПутейКСвязаннымДанным = ОписаниеПутейКДаннымСвязаннымСДаннымиСтрокиТаблицы(
											ВедущиеДанные, 
											СвязанныеДанные, 
											ОписаниеПутиКВедущимДанным, 
											ПравилаСвязиСДаннымиОбъекта);
	Иначе
		ОписаниеПутейКСвязаннымДанным = ОписаниеПутейКДаннымСвязаннымСДаннымиРеквизита(
											ВедущиеДанные, 
											СвязанныеДанные, 
											ОписаниеПутиКВедущимДанным, 
											ПравилаСвязиСДаннымиОбъекта);
	КонецЕсли;	
	
	Возврат ОписаниеПутейКСвязаннымДанным;
КонецФункции	

&НаСервереБезКонтекста
Функция ОписаниеПутейКДаннымСвязаннымСДаннымиСтрокиТаблицы(ВедущиеДанные, СвязанныеДанные, ОписаниеПутиКВедущимДанным, ПравилаСвязиСДаннымиСтрокиТаблицы)		
	ОписаниеПутейКСвязаннымДанным = Новый Массив;
		
	ТаблицаВедущихДанных = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(ВедущиеДанные, ОписаниеПутиКВедущимДанным.ПутьКДаннымТаблицы);
			
	Для Каждого ПравилоСвязи Из ПравилаСвязиСДаннымиСтрокиТаблицы Цикл
		ОписаниеПутейКСвязаннымДаннымПоПравилуСвязи = ОписаниеПутейКДаннымСвязаннымСДаннымиСтрокиТаблицыПоПравилуСвязи(ТаблицаВедущихДанных, ОписаниеПутиКВедущимДанным.ИндексСтроки, СвязанныеДанные, ПравилоСвязи);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОписаниеПутейКСвязаннымДанным, ОписаниеПутейКСвязаннымДаннымПоПравилуСвязи);
	КонецЦикла;	
		
	Возврат ОписаниеПутейКСвязаннымДанным;	
КонецФункции	

&НаСервереБезКонтекста
Функция ОписаниеПутейКДаннымСвязаннымСДаннымиСтрокиТаблицыПоПравилуСвязи(ТаблицаВедущихДанных, ИндексСтроки, СвязанныеДанные, ПравилоСвязи)
	ОписаниеПутейКСвязаннымДанным = Новый Массив;
	
	СтрокаТаблицыВедущихДанных = ТаблицаВедущихДанных[ИндексСтроки];
		
	Если Не СтрокаТаблицыСоответствуетФиксированнымЗначениямКлючаСвязи(СтрокаТаблицыВедущихДанных, ПравилоСвязи.КлючСвязи) Тогда
		Возврат ОписаниеПутейКСвязаннымДанным;
	КонецЕсли;	
	
	Если ПравилоСвязи.ТипСвязиДанных = "СвязьДанныхСтрокТаблиц" Тогда
		СвязываемаяТаблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(СвязанныеДанные, ПравилоСвязи.ПутьКРеквизитуСвязанныхДанных);
		ИндексыСвязываемыхСтрок = ИндексыСтрокСвязываемыхСоСтрокойВедущихДанных(СтрокаТаблицыВедущихДанных, ИндексСтроки, СвязываемаяТаблица, ПравилоСвязи.КлючСвязи);		
		
		Для Каждого ИндексСвязываемойСтроки Из ИндексыСвязываемыхСтрок Цикл 
			ОписаниеПутиКСвязываемымДанным = ОписаниеПутиКДаннымСтрокиТаблицы();
			
			ОписаниеПутиКСвязываемымДанным.ПутьКДаннымТаблицы = ПравилоСвязи.ПутьКРеквизитуСвязанныхДанных;
			ОписаниеПутиКСвязываемымДанным.ИндексСтроки = ИндексСвязываемойСтроки;
			ОписаниеПутиКСвязываемымДанным.ИмяРеквизитаСтроки = ПравилоСвязи.ИмяРеквизитаТаблицыСвязанныхДанных;
			
			ОписаниеПутейКСвязаннымДанным.Добавить(ОписаниеПутиКСвязываемымДанным);	
		КонецЦикла;		
		
	ИначеЕсли ПравилоСвязи.ТипСвязиДанных = "СвязьДанныхСтрокиТаблицыСРеквизитом" Тогда	
		ОписаниеПутиКСвязываемымДанным = ОписаниеПутиКДаннымРеквизитаОбъекта();

		ОписаниеПутиКСвязываемымДанным.ПутьКДанным = ПравилоСвязи.ПутьКРеквизитуСвязанныхДанных; 	
		
		ОписаниеПутейКСвязаннымДанным.Добавить(ОписаниеПутиКСвязываемымДанным);	
	КонецЕсли;	
	
	Возврат ОписаниеПутейКСвязаннымДанным;	
КонецФункции	

&НаСервереБезКонтекста
Функция ИндексыСтрокСвязываемыхСоСтрокойВедущихДанных(СтрокаТаблицыВедущихДанных, ИндексСтрокиТаблицыВедущихДанных, СвязываемаяТаблица, КлючСвязи)
	ИндексыСвязанныхСтрок = Новый Массив;
	
	СтруктураПоиска = Новый Структура;
	
	ИндексСтрокиТаблицыСвязываемыхДанных = Неопределено;
	
	Для Каждого ЭлементКлючаСвязи Из КлючСвязи Цикл
		Если ЭлементКлючаСвязи.Тип = "СвязьПоИндексуСтрокТаблиц" Тогда
			ИндексСтрокиТаблицыСвязываемыхДанных = ИндексСтрокиТаблицыВедущихДанных;	
		ИначеЕсли ЭлементКлючаСвязи.Тип = "СвязьПоПоляСтрокТаблиц" Тогда
			
			ЗначениеПоиска = СтрокаТаблицыВедущихДанных[ЭлементКлючаСвязи.ЛевоеЗначение];
			
			СтруктураПоиска.Вставить(ЭлементКлючаСвязи.ПравоеЗначение, ЗначениеПоиска);
			
		ИначеЕсли ЭлементКлючаСвязи.Тип = "СвязьПоФиксированномуЗначениюПоляПодчиненнойТаблицы" Тогда	
			 
			 СтруктураПоиска.Вставить(ЭлементКлючаСвязи.ПравоеЗначение, ЭлементКлючаСвязи.ЛевоеЗначение);
		КонецЕсли;		
	КонецЦикла;	
	
	Если ИндексСтрокиТаблицыСвязываемыхДанных <> Неопределено Тогда
		Если СтруктураПоиска.Количество() > 0 Тогда
			СтрокаТаблицыСвязываемыхДанных = СвязываемаяТаблица[ИндексСтрокиТаблицыСвязываемыхДанных];
			
			Для Каждого КлючПоискаДанныхВСтроке Из СтруктураПоиска Цикл
				Если СтрокаТаблицыСвязываемыхДанных[КлючПоискаДанныхВСтроке.Ключ] <> КлючПоискаДанныхВСтроке.Значение Тогда
					Возврат ИндексыСвязанныхСтрок;				
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;	
		
		ИндексыСвязанныхСтрок.Добавить(ИндексСтрокиТаблицыСвязываемыхДанных);	
	Иначе
		Если СтруктураПоиска.Количество() = 0 Тогда
			Для Каждого СтрокаТаблицыСвязываемыхДанных Из СвязываемаяТаблица Цикл
				ИндексыСвязанныхСтрок.Добавить(СвязываемаяТаблица.Индекс(СтрокаТаблицыСвязываемыхДанных));		
			КонецЦикла;				
		Иначе	
			НайденныеСтроки = СвязываемаяТаблица.НайтиСтроки(СтруктураПоиска);
		
			Для Каждого СвязаннаяСтрока Из НайденныеСтроки Цикл		
				ИндексыСвязанныхСтрок.Добавить(СвязываемаяТаблица.Индекс(СвязаннаяСтрока));
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат ИндексыСвязанныхСтрок;
КонецФункции

&НаСервереБезКонтекста
Функция СтрокаТаблицыСоответствуетФиксированнымЗначениямКлючаСвязи(СтрокаТаблицы, КлючСвязи)
	Если КлючСвязи = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ЭлементКлючаСвязи Из КлючСвязи Цикл
		Если ЭлементКлючаСвязи.Тип = "СвязьПоФиксированномуЗначениюПоляВедущейТаблицы"
			И СтрокаТаблицы[ЭлементКлючаСвязи.ЛевоеЗначение] <> ЭлементКлючаСвязи.ПравоеЗначение Тогда
			
			Возврат Ложь;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеПутейКДаннымСвязаннымСДаннымиРеквизита(ВедущиеДанные, СвязанныеДанные, ОписаниеПутиКВедущимДанным, ПравилаСвязиСДаннымиРеквизитаОбъекта)
	ОписаниеПутейКСвязаннымДанным = Новый Массив;
		
	Для Каждого ПравилоСвязи Из ПравилаСвязиСДаннымиРеквизитаОбъекта Цикл
		ОписаниеПутейКСвязаннымДаннымПоПравилуСвязи = ОписаниеПутейКДаннымСвязаннымСРеквизитомПоПравилуСвязи(СвязанныеДанные, ПравилоСвязи);	
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОписаниеПутейКСвязаннымДанным, ОписаниеПутейКСвязаннымДаннымПоПравилуСвязи);	
	КонецЦикла;	
			
	Возврат ОписаниеПутейКСвязаннымДанным;	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеПутейКДаннымСвязаннымСРеквизитомПоПравилуСвязи(СвязанныеДанные, ПравилоСвязи)
	ОписаниеПутей = Новый Массив;
	
	Если ПравилоСвязи.ТипСвязиДанных = "СвязьРеквизитовОбъектов" Тогда
		ОписаниеПути = ОписаниеПутиКДаннымРеквизитаОбъекта();
		
		ОписаниеПути.ПутьКДанным = ПравилоСвязи.ПутьКРеквизитуСвязанныхДанных;
		
		ОписаниеПутей.Добавить(ОписаниеПути);
	ИначеЕсли ПравилоСвязи.ТипСвязиДанных = "СвязьРеквизитаСДаннымиСтрокиТаблицы" Тогда
		СвязываемаяТаблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(СвязанныеДанные, ПравилоСвязи.ПутьКРеквизитуСвязанныхДанных);
		ИндексыСвязываемыхСтрок = ИндексыСтрокСвязываемыхСРеквизитомВедущихДанных(СвязываемаяТаблица, ПравилоСвязи.КлючСвязи);	
		
		Для Каждого ИндексСвязываемойСтроки Из ИндексыСвязываемыхСтрок Цикл 
			ОписаниеПути = ОписаниеПутиКДаннымСтрокиТаблицы();	
			
			ОписаниеПути.ПутьКДаннымТаблицы = ПравилоСвязи.ПутьКРеквизитуСвязанныхДанных;
			ОписаниеПути.ИндексСтроки = ИндексСвязываемойСтроки;
			ОписаниеПути.ИмяРеквизитаСтроки = ПравилоСвязи.ИмяРеквизитаТаблицыСвязанныхДанных;	
			
			ОписаниеПутей.Добавить(ОписаниеПути);
		КонецЦикла;	
	КонецЕсли;		
	
	Возврат ОписаниеПутей;
КонецФункции	

&НаСервереБезКонтекста
Функция ИндексыСтрокСвязываемыхСРеквизитомВедущихДанных(СвязываемаяТаблица, КлючСвязи)
	ИндексыСвязываемыхСтрок = Новый Массив;
	
	СтруктураПоиска = Новый Структура;
	
	Для Каждого ЭлементКлючаСвязи Из КлючСвязи Цикл
		Если ЭлементКлючаСвязи.Тип = "СвязьПоФиксированномуЗначениюПоляПодчиненнойТаблицы" Тогда	
			 
			 СтруктураПоиска.Вставить(ЭлементКлючаСвязи.ПравоеЗначение, ЭлементКлючаСвязи.ЛевоеЗначение);
		КонецЕсли;		
	КонецЦикла;	
	
	Если СтруктураПоиска.Количество() = 0 Тогда
		СтрокиТаблицы = СвязываемаяТаблица;	
	Иначе	
		СтрокиТаблицы = СвязываемаяТаблица.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл	
		ИндексыСвязываемыхСтрок.Добавить(СвязываемаяТаблица.Индекс(СтрокаТаблицы));		
	КонецЦикла;	

	Возврат ИндексыСвязываемыхСтрок;
	
КонецФункции


&НаСервереБезКонтекста
Функция ПравилаСвязиПоПутиКДаннымВедущегоОбъекта(ПутьКВедущимДанным, ОписаниеСвязиДанных, ОбратныйПоиск = Ложь)
	ПравилаСвязи = Новый Массив;
	
	Если ТипЗнч(ПутьКВедущимДанным) = Тип("Строка") Тогда
		ОписаниеПутиКВедущимДанным = ОписаниеПутиКДаннымОбъектаПоПутиКДаннымСтрокой(ПутьКВедущимДанным);
	Иначе
		ОписаниеПутиКВедущимДанным = ПутьКВедущимДанным;
	КонецЕсли;	
	
	ДопустимыеТипыСвязиДанных = ДопустимыеТипыСвязиДанныхПоОписаниюПутиКВедущимДанным(ОписаниеПутиКВедущимДанным);
		
	КлючиПоискаПравилСвязи = КлючиПоискаПравилСвязиПоОписаниюПутиКДанным(ОписаниеПутиКВедущимДанным, Ложь);
	
	Возврат ПравилаСвязиДанныхПоКлючамПоиска(ОписаниеСвязиДанных, КлючиПоискаПравилСвязи, ДопустимыеТипыСвязиДанных, ОбратныйПоиск);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПравилаСвязиДанныхПоКлючамПоиска(ОписаниеСвязиДанных, КлючиПоискаПравилСвязи, ДопустимыеТипыСвязиДанных, ОбратныйПоиск = Ложь)
	ПравилаСвязи = Новый Массив;
	
	Для Каждого КлючПоиска Из КлючиПоискаПравилСвязи Цикл
		
		Если ОбратныйПоиск Тогда
			СтруктураПоиска = Новый Структура("ПолныйПутьКПодчиненнымДанным", КлючПоиска);
		Иначе
			СтруктураПоиска = Новый Структура("ПолныйПутьКОсновнымДанным", КлючПоиска);
		КонецЕсли;	

		СтрокиСоответствияПутей = ОписаниеСвязиДанных.НайтиСтроки(СтруктураПоиска); 
		
		Если ОбратныйПоиск Тогда 
			ИмяПоляТипСвязиДанных = "ТипСвязиДанныхОбратный";
		Иначе
			ИмяПоляТипСвязиДанных = "ТипСвязиДанных";	
		КонецЕсли;	
		
		Для Каждого ПравилоСвязиДанных Из СтрокиСоответствияПутей Цикл
			Если ОбратныйПоиск Тогда
				ПравилоСвязиДанных = ПравилоОбратнойСвязиДанных(ПравилоСвязиДанных);
			КонецЕсли;	
			
			Если ДопустимыеТипыСвязиДанных.Найти(ПравилоСвязиДанных.ТипСвязиДанных) <> Неопределено Тогда			
				ПравилаСвязи.Добавить(ПравилоСвязиДанных);	
			КонецЕсли;
		КонецЦикла;	
		
		Если ПравилаСвязи.Количество() > 0 Тогда 
			Прервать;
		КонецЕсли;		
	КонецЦикла;	

	Возврат ПравилаСвязи;	
КонецФункции	

&НаСервереБезКонтекста
Функция ПравилоОбратнойСвязиДанных(ПравилоПрямойСвязи)
	ПравилоОбратнойСвязиДанных = Новый Структура;
	
	ПравилоОбратнойСвязиДанных.Вставить("ТипСвязиДанных", ПравилоПрямойСвязи.ТипСвязиДанныхОбратный);
	ПравилоОбратнойСвязиДанных.Вставить("ПутьКРеквизитуВедущихДанных", ПравилоПрямойСвязи.ПутьКРеквизитуСвязанныхДанных);
	ПравилоОбратнойСвязиДанных.Вставить("ИмяРеквизитаТаблицыВедущихДанных", ПравилоПрямойСвязи.ИмяРеквизитаТаблицыСвязанныхДанных);
	ПравилоОбратнойСвязиДанных.Вставить("ПутьКРеквизитуСвязанныхДанных", ПравилоПрямойСвязи.ПутьКРеквизитуВедущихДанных);
	ПравилоОбратнойСвязиДанных.Вставить("ИмяРеквизитаТаблицыСвязанныхДанных", ПравилоПрямойСвязи.ИмяРеквизитаТаблицыВедущихДанных);
	ПравилоОбратнойСвязиДанных.Вставить("ПолныйПутьКОсновнымДанным", ПравилоПрямойСвязи.ПолныйПутьКПодчиненнымДанным);
	ПравилоОбратнойСвязиДанных.Вставить("КлючСвязи", ПравилоПрямойСвязи.КлючСвязи);
	
	Возврат ПравилоОбратнойСвязиДанных;
КонецФункции	

&НаСервереБезКонтекста
Функция ДопустимыеТипыСвязиДанныхПоОписаниюПутиКВедущимДанным(ОписаниеПутиКВедущимДанным)
	ДопустимыеТипыСвязиДанных = Новый Массив;
	
	Если ОписаниеПутиКВедущимДанным.Тип = "ПутьКДаннымСтрокиТаблицы" Тогда
		ДопустимыеТипыСвязиДанных.Добавить("СвязьДанныхСтрокиТаблицыСРеквизитом");
		ДопустимыеТипыСвязиДанных.Добавить("СвязьДанныхСтрокТаблиц");	
	Иначе
		ДопустимыеТипыСвязиДанных.Добавить("СвязьРеквизитовОбъектов");
		ДопустимыеТипыСвязиДанных.Добавить("СвязьРеквизитаСДаннымиСтрокиТаблицы");
	КонецЕсли;
	
	Возврат ДопустимыеТипыСвязиДанных;
КонецФункции	

&НаСервереБезКонтекста
Функция КлючиПоискаПравилСвязиПоОписаниюПутиКДанным(ОписаниеПутиКДанным, СтрогоеСоответствие = Ложь)
	КлючиПоискаПравилСвязи = Новый Массив;
	
	Если ОписаниеПутиКДанным.Тип = "ПутьКДаннымСтрокиТаблицы" Тогда
		ПутьКВедущимДаннымБезИндекса = ОписаниеПутиКДанным.ПутьКДаннымТаблицы + ?(ОписаниеПутиКДанным.ИмяРеквизитаСтроки = "", "", ".") + ОписаниеПутиКДанным.ИмяРеквизитаСтроки;
				
		КлючиПоискаПравилСвязи.Добавить(ПутьКВедущимДаннымБезИндекса);
		Если Не СтрогоеСоответствие Тогда
			КлючиПоискаПравилСвязи.Добавить(ОписаниеПутиКДанным.ПутьКДаннымТаблицы + ".*");
		КонецЕсли;	
	Иначе
		КлючиПоискаПравилСвязи.Добавить(ОписаниеПутиКДанным.ПутьКДанным);
		
		Если Не СтрогоеСоответствие Тогда
			ЭлементыПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеПутиКДанным.ПутьКДанным, ".");

			Если ЭлементыПути.Количество() <= 1 Тогда
				КлючиПоискаПравилСвязи.Добавить("*");
			Иначе
				Путь = "";
				Для Сч = 0 По ЭлементыПути.Количество() - 2 Цикл
					Путь = Путь + "." + ЭлементыПути[Сч];
				КонецЦикла;
				КлючиПоискаПравилСвязи.Добавить(Сред(Путь, 2) + ".*");
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
		
	Возврат КлючиПоискаПравилСвязи;
КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Процедура ДобавитьОписаниеСвязиРеквизитов(ОписаниеСвязиДанных, ПутьКРеквизитуВедущихДанных, ПутьКРеквизитуСвязанныхДанных)
	
	ЭлементОписанияСвязиДанных = ОписаниеСвязиДанных.Добавить();
	
	ЭлементОписанияСвязиДанных.ТипСвязиДанных = "СвязьРеквизитовОбъектов";
	ЭлементОписанияСвязиДанных.ПутьКРеквизитуВедущихДанных = ПутьКРеквизитуВедущихДанных;
	ЭлементОписанияСвязиДанных.ПутьКРеквизитуСвязанныхДанных = ПутьКРеквизитуСвязанныхДанных;
	ЭлементОписанияСвязиДанных.ПолныйПутьКОсновнымДанным = ПутьКРеквизитуВедущихДанных;
	ЭлементОписанияСвязиДанных.ПолныйПутьКПодчиненнымДанным = ПутьКРеквизитуСвязанныхДанных;
	ЭлементОписанияСвязиДанных.ТипСвязиДанныхОбратный  = "СвязьРеквизитовОбъектов";
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьОписаниеСвязиДанныхСтрокТаблиц(ОписаниеСвязиДанных, ПутьКТаблицеВедущихДанных, ИмяРеквизитаТаблицыВедущихДанных, ПутьКТаблицеСвязанныхДанных, ИмяРеквизитаТаблицыСвязанныхДанных, КлючСвязи = Неопределено)
	
	ЭлементОписанияСвязиДанных = ОписаниеСвязиДанных.Добавить();
	
	ЭлементОписанияСвязиДанных.ТипСвязиДанных = "СвязьДанныхСтрокТаблиц";
	ЭлементОписанияСвязиДанных.ПутьКРеквизитуВедущихДанных = ПутьКТаблицеВедущихДанных;
	ЭлементОписанияСвязиДанных.ИмяРеквизитаТаблицыВедущихДанных = ИмяРеквизитаТаблицыВедущихДанных;
	ЭлементОписанияСвязиДанных.ПутьКРеквизитуСвязанныхДанных = ПутьКТаблицеСвязанныхДанных;
	ЭлементОписанияСвязиДанных.ИмяРеквизитаТаблицыСвязанныхДанных = ИмяРеквизитаТаблицыСвязанныхДанных;	
	ЭлементОписанияСвязиДанных.ПолныйПутьКОсновнымДанным = ПутьКТаблицеВедущихДанных + ?(ИмяРеквизитаТаблицыВедущихДанных = "", "", "." + ИмяРеквизитаТаблицыВедущихДанных);
	ЭлементОписанияСвязиДанных.ПолныйПутьКПодчиненнымДанным = ПутьКТаблицеСвязанныхДанных + ?(ИмяРеквизитаТаблицыСвязанныхДанных = "", "", "." + ИмяРеквизитаТаблицыСвязанныхДанных);	
	ЭлементОписанияСвязиДанных.ТипСвязиДанныхОбратный  = "СвязьДанныхСтрокТаблиц";

	Если КлючСвязи = Неопределено Тогда
		КлючСвязи = КлючСвязиДанныхСтрокТаблиц();
		ДобавитьЭлементКлючаСвязиПоИндексуСтрокТаблиц(КлючСвязи);
	КонецЕсли;	
	
	ЭлементОписанияСвязиДанных.КлючСвязи = КлючСвязи;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция КлючСвязиДанныхСтрокТаблиц() Экспорт
	Возврат Новый Массив;	
КонецФункции	


&НаСервереБезКонтекста
Процедура ДобавитьЭлементКлючаСвязиПоИндексуСтрокТаблиц(КлючСвязи) Экспорт
	ЭлементКлюча = ЭлементКлючаСвязиСтрокТаблиц();
	ЭлементКлюча.Тип = "СвязьПоИндексуСтрокТаблиц";
	
	КлючСвязи.Добавить(ЭлементКлюча);
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ЭлементКлючаСвязиСтрокТаблиц()
	ЭлементКлюча = Новый Структура;
	ЭлементКлюча.Вставить("ЛевоеЗначение");
	ЭлементКлюча.Вставить("ПравоеЗначение");
	ЭлементКлюча.Вставить("Тип");
	
	Возврат ЭлементКлюча;
КонецФункции	

&НаСервереБезКонтекста
Функция ОписаниеСвязиДанных()
	ОписаниеСвязиДанных = Новый ТаблицаЗначений;	
	ОписаниеСвязиДанных.Колонки.Добавить("ТипСвязиДанных");
	ОписаниеСвязиДанных.Колонки.Добавить("ПутьКРеквизитуВедущихДанных");
	ОписаниеСвязиДанных.Колонки.Добавить("ИмяРеквизитаТаблицыВедущихДанных");
	ОписаниеСвязиДанных.Колонки.Добавить("ПутьКРеквизитуСвязанныхДанных");
	ОписаниеСвязиДанных.Колонки.Добавить("ИмяРеквизитаТаблицыСвязанныхДанных");
	ОписаниеСвязиДанных.Колонки.Добавить("ПолныйПутьКОсновнымДанным");
	ОписаниеСвязиДанных.Колонки.Добавить("ПолныйПутьКПодчиненнымДанным");
	ОписаниеСвязиДанных.Колонки.Добавить("ТипСвязиДанныхОбратный");
	
	ОписаниеСвязиДанных.Колонки.Добавить("КлючСвязи");
		
	Возврат ОписаниеСвязиДанных;
КонецФункции

&НаСервереБезКонтекста
Процедура ИндикацияОшибокДополнитьФорму(Форма, ОписаниеЭлементовСИндикациейОшибок, ОписаниеПодчиненностиДанных = Неопределено)
	ДобавляемыеРеквизиты = Новый Массив;
	ОписаниеСозданныхРеквизитов = Новый Соответствие;
	ОписаниеСвязиЭлементовИндикацииСРеквизитами = Новый Соответствие;
		
	Для Каждого ОписаниеЭлемента Из ОписаниеЭлементовСИндикациейОшибок Цикл
		ОписаниеРеквизитаИндикации = ОписаниеРеквизитаИндикацииОшибкиИзОписанияЭлементаИндикации(ОписаниеЭлемента);
		
		ОписаниеСозданногоРеквизита = СоздатьРеквизитПризнакНаличияОшибки(ДобавляемыеРеквизиты, ОписаниеРеквизитаИндикации, ОписаниеСозданныхРеквизитов);
		
		Если ОписаниеЭлемента.ОтображатьНепривязанныеОшибки Тогда
			ОписаниеФлагаСИндикациейНепривязанныхОшибок = ОписаниеСозданногоРеквизита;
		КонецЕсли;	
		
		Если Не ПустаяСтрока(ОписаниеЭлемента.ИмяЭлемента) Тогда
			ОписаниеСозданногоРеквизита.Вставить("ОтображатьНепривязанныеОшибки", ОписаниеЭлемента.ОтображатьНепривязанныеОшибки);
			ОписаниеСвязиЭлементовИндикацииСРеквизитами.Вставить(ОписаниеЭлемента.ИмяЭлемента, ОписаниеСозданногоРеквизита);	
		КонецЕсли;	
	КонецЦикла;		
	
	Если ОписаниеПодчиненностиДанных <> Неопределено Тогда
		ОписаниеДобавляемыхРеквизитовИндикации = ОписаниеДобавляемыхРеквизитовИндикацииОшибокИзОписанияПодчиненности(ОписаниеПодчиненностиДанных);
		
		Для Каждого ОписаниеРеквизитаИндикации Из ОписаниеДобавляемыхРеквизитовИндикации Цикл
			СоздатьРеквизитПризнакНаличияОшибки(ДобавляемыеРеквизиты, ОписаниеРеквизитаИндикации, ОписаниеСозданныхРеквизитов);	
		КонецЦикла;	
		
		ОписаниеДобавляемыхРеквизитовСчетчиков = ОписаниеДобавляемыхРеквизитовСчетчиковОшибокИзОписанияПодчиненности(ОписаниеПодчиненностиДанных);
		
		Для Каждого ОписаниеРеквизитаСчетчика Из ОписаниеДобавляемыхРеквизитовСчетчиков Цикл
			СоздатьРеквизитСчетчикНаличияОшибкиВПодчиненныхДанных(ДобавляемыеРеквизиты, ОписаниеРеквизитаСчетчика, ОписаниеСозданныхРеквизитов);	
		КонецЦикла;	
	КонецЕсли;	
	
	РеквизитОписаниеФлагов = Новый РеквизитФормы("ОписаниеРеквизитовПризнаковНаличияОшибок", Новый ОписаниеТипов("Неопределено"));
	РеквизитОписаниеЭлементовСИндикацией = Новый РеквизитФормы("ОписаниеЭлементовСИндикациейОшибок", Новый ОписаниеТипов("Неопределено"));
	РеквизитОписаниеИндикатораНепривязанныхОшибок = Новый РеквизитФормы("ОписаниеФлагаСИндикациейНепривязанныхОшибок", Новый ОписаниеТипов("Неопределено"));
	РеквизитСчетчикФлаговНаСтраницах = Новый РеквизитФормы("СчетчикФлаговНаСтраницах", Новый ОписаниеТипов("Неопределено"));
	РеквизитЦветаЗаголовковСворачиваемыхГрупп = Новый РеквизитФормы("ЦветаЗаголовковСворачиваемыхГрупп", Новый ОписаниеТипов("Неопределено"));
	
	ДобавляемыеРеквизиты.Добавить(РеквизитОписаниеФлагов);
	ДобавляемыеРеквизиты.Добавить(РеквизитОписаниеЭлементовСИндикацией);
	ДобавляемыеРеквизиты.Добавить(РеквизитОписаниеИндикатораНепривязанныхОшибок);
	ДобавляемыеРеквизиты.Добавить(РеквизитСчетчикФлаговНаСтраницах);
	ДобавляемыеРеквизиты.Добавить(РеквизитЦветаЗаголовковСворачиваемыхГрупп);
		
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Форма.ОписаниеРеквизитовПризнаковНаличияОшибок = Новый ФиксированноеСоответствие(ОписаниеСозданныхРеквизитов);
		
	ОписаниеСозданныхЭлементов = Новый Соответствие;
	
	ЦветаЗаголовковСворачиваемыхГрупп = Новый Структура;
	
	СчетчикФлаговНаСтраницах = Новый Структура;
	
	Для Каждого ОписаниеЭлемента Из ОписаниеЭлементовСИндикациейОшибок Цикл
		Если ЗначениеЗаполнено(ОписаниеЭлемента.ИмяЭлемента) Тогда
			ЭлементИндикации = СоздатьЭлементИндикацииОшибки(Форма, ОписаниеЭлемента, ОписаниеСвязиЭлементовИндикацииСРеквизитами);		
			
			Если ЭлементИндикации <> Неопределено Тогда
				СтраницыВладельцы =  Новый Массив;
				ЗаполнитьСтраницыВладельцыЭлемента(ЭлементИндикации, СтраницыВладельцы);

				ОписаниеЭлемента.Вставить("СтраницыВладельцы", СтраницыВладельцы);
				
				ОписаниеСозданныхЭлементов.Вставить(ЭлементИндикации.Имя, ОписаниеЭлемента);
				
				ОписаниеРеквизитовИндикации = ОписаниеСвязиЭлементовИндикацииСРеквизитами.Получить(ОписаниеЭлемента.ИмяЭлемента);
				
				Если ОписаниеРеквизитовИндикации <> Неопределено Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОписаниеРеквизитовИндикации.СтраницыВладельцы, СтраницыВладельцы);
				КонецЕсли;	
				
				Для Каждого ИмяСтраницы Из СтраницыВладельцы Цикл
					СчетчикФлаговНаСтраницах.Вставить(ИмяСтраницы, 0);		
					Элемент = Форма.Элементы[ИмяСтраницы];
					
					Если Элемент.Вид = ВидГруппыФормы.ОбычнаяГруппа Тогда
						ЦветаЗаголовковСворачиваемыхГрупп.Вставить(Элемент.Имя, Элемент.ЦветТекстаЗаголовка);
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	Если ОписаниеФлагаСИндикациейНепривязанныхОшибок <> Неопределено Тогда
		Форма.ОписаниеФлагаСИндикациейНепривязанныхОшибок = Новый ФиксированнаяСтруктура(ОписаниеФлагаСИндикациейНепривязанныхОшибок);
	КонецЕсли;
	
	Форма.ОписаниеЭлементовСИндикациейОшибок = Новый ФиксированноеСоответствие(ОписаниеСозданныхЭлементов);
	Форма.СчетчикФлаговНаСтраницах = Новый ФиксированнаяСтруктура(СчетчикФлаговНаСтраницах);	
	Форма.ЦветаЗаголовковСворачиваемыхГрупп = Новый ФиксированнаяСтруктура(ЦветаЗаголовковСворачиваемыхГрупп);	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеДобавляемыхРеквизитовИндикацииОшибокИзОписанияПодчиненности(ОписаниеПодчиненностиДанных)
	ОписаниеРеквизитовИндикации = Новый Массив;
	
	Для Каждого ЭлементОписанияПодчиненности Из ОписаниеПодчиненностиДанных Цикл
		Если ЭлементОписанияПодчиненности.ТипСвязиДанных = "СвязьРеквизитовОбъектов"  Тогда 
			
			ОписаниеРеквизита = ОписаниеРеквизитаИндикацииОшибкиВШапке();
			ОписаниеРеквизита.ПутьКДаннымФормыСодержащимОшибку = ЭлементОписанияПодчиненности.ПутьКРеквизитуСвязанныхДанных;
			
		Иначе
			ОписаниеРеквизита = ОписаниеРеквизитаИндикацииОшибкиВСтрокеТаблицы();
			ОписаниеРеквизита.ПутьКДаннымФормыСодержащимОшибку = ЭлементОписанияПодчиненности.ПутьКРеквизитуСвязанныхДанных;	
			ОписаниеРеквизита.ИмяРеквизитаТаблицы = ЭлементОписанияПодчиненности.ИмяРеквизитаТаблицыСвязанныхДанных;
		КонецЕсли;	
		
		ОписаниеРеквизитовИндикации.Добавить(ОписаниеРеквизита);
	КонецЦикла;	
	
	Возврат ОписаниеРеквизитовИндикации;	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьРеквизитСчетчикНаличияОшибкиВПодчиненныхДанных(ДобавляемыеРеквизиты, СвойстваСоздаваемогоРеквизита, ОписаниеСозданныхРеквизитов)
	
	Если СвойстваСоздаваемогоРеквизита.Тип = "РеквизитСтрокиТаблицы" Тогда
		
		ИмяРеквизитаСчетчик = "КоличествоПодчиненныхЭлементовСОшибками"; 
		
		Путь = СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку;
	Иначе
		ЭлементыПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку, ".");
		
		Путь  = "";
		Если ЭлементыПути.Количество() = 0 Тогда
			ИмяРеквизитаСчетчик = "КоличествоПодчиненныхЭлементовСОшибками";
		Иначе
			ИмяРеквизитаСчетчик = ЭлементыПути[ЭлементыПути.Количество() - 1] + "КоличествоПодчиненныхЭлементовСОшибками";
		КонецЕсли;		
	КонецЕсли;	
	
	ПолныйПуть = Путь + ?(Путь = "", "", ".") + ИмяРеквизитаСчетчик;
	
	ОписаниеСозданногоРеквизита =  ОписаниеСозданныхРеквизитов[СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку];
	
	Если ОписаниеСозданногоРеквизита = Неопределено Тогда 
		ОписаниеСозданногоРеквизита = ОписаниеРеквизитовИндикацииСвязанныхСДаннымиФормы();
		ОписаниеСозданногоРеквизита.ПутьКДанным = Путь;
		ОписаниеСозданногоРеквизита.ИмяРеквизитаСчетчик = ИмяРеквизитаСчетчик;
		ОписаниеСозданногоРеквизита.ПутьКДаннымФормыСодержащимОшибку = СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку;
		
		ОписаниеСозданныхРеквизитов.Вставить(СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку, ОписаниеСозданногоРеквизита);

		РеквизитСчетчик = Новый РеквизитФормы(ИмяРеквизитаСчетчик, Новый ОписаниеТипов("Число"), Путь);
		ДобавляемыеРеквизиты.Добавить(РеквизитСчетчик);
	Иначе
		Если Не ЗначениеЗаполнено(ОписаниеСозданногоРеквизита.ИмяРеквизитаСчетчик) Тогда
			ОписаниеСозданногоРеквизита.ИмяРеквизитаСчетчик = ИмяРеквизитаСчетчик;
			РеквизитСчетчик = Новый РеквизитФормы(ИмяРеквизитаСчетчик, Новый ОписаниеТипов("Число"), Путь);
			ДобавляемыеРеквизиты.Добавить(РеквизитСчетчик);
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат ОписаниеСозданногоРеквизита;
КонецФункции	

&НаСервереБезКонтекста
Функция СоздатьЭлементИндикацииОшибки(Форма, ОписаниеЭлемента, ОписаниеЭлементовСРеквизитамиИндикации)
	ЭлементИндикации = Неопределено;
	
	Элементы = Форма.Элементы;
	
	ЭлементОтображенияДанныхСОшибкой = Элементы[ОписаниеЭлемента.ИмяЭлемента];
	ОписаниеРеквизитаИндикации = ОписаниеЭлементовСРеквизитамиИндикации[ОписаниеЭлемента.ИмяЭлемента];
	ПутьКДанным = ОписаниеРеквизитаИндикации.ПутьКДанным + ?(ОписаниеРеквизитаИндикации.ПутьКДанным = "", "", ".") + ОписаниеРеквизитаИндикации.ИмяРеквизитаФлаг;
	
	ПутьКДаннымСчетчика = "";
	Если ЗначениеЗаполнено(ОписаниеРеквизитаИндикации.ИмяРеквизитаСчетчик) Тогда
		ПутьКДаннымСчетчика = ОписаниеРеквизитаИндикации.ПутьКДанным + ?(ОписаниеРеквизитаИндикации.ПутьКДанным = "", "", ".") + ОписаниеРеквизитаИндикации.ИмяРеквизитаСчетчик;
	КонецЕсли;	
	
	Если ОписаниеЭлемента.ОтображатьГиперссылку Тогда
		Если ОписаниеЭлемента.Тип = "ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы" Тогда
			ЭлементИндикации = СоздатьЭлементИндикацииВТаблицеФормы(Форма, ЭлементОтображенияДанныхСОшибкой, ПутьКДанным);
		ИначеЕсли ОписаниеЭлемента.Тип = "ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки" 
			Или ОписаниеЭлемента.Тип = "ОписаниеЭлементаШапкиСИндикациейОшибокВСтрокеТаблицы" Тогда
			
			ЭлементИндикации = СоздатьЭлементИндикацииОшибкиВШапкеФормы(Форма, ЭлементОтображенияДанныхСОшибкой, ПутьКДанным);	
		КонецЕсли;	
	КонецЕсли;
	
	УстановитьУсловноеОформлениеДляЭлементаСодержащегоОшибку(Форма, ОписаниеЭлемента, ОписаниеРеквизитаИндикации);
	
	Возврат ЭлементИндикации;
КонецФункции	

&НаСервереБезКонтекста
Функция СоздатьЭлементИндикацииВТаблицеФормы(Форма, ЭлементОтображенияДанныхСОшибкой, ПутьКДанным)
	Элементы = Форма.Элементы;
	
	Если ТипЗнч(ЭлементОтображенияДанныхСОшибкой) = Тип("ТаблицаФормы") Тогда
		Родитель = ЭлементОтображенияДанныхСОшибкой;
	Иначе
		Родитель = ЭлементОтображенияДанныхСОшибкой.Родитель;
	КонецЕсли;		
	
	ЭлементИндикации = СоздатьПолеКартинкиДляИндикацииОшибок(Элементы, ЭлементОтображенияДанныхСОшибкой, Родитель, ПутьКДанным);	
	ЭлементИндикации.ГиперссылкаЯчейки = Истина;
	ЭлементИндикации.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
	ЭлементИндикации.ТолькоПросмотр = Истина;
	
	ЭлементИндикации.РастягиватьПоГоризонтали = Ложь;
		
	Если ЭлементИндикации.Родитель.ПодчиненныеЭлементы.Количество() > 0 Тогда 
		Элементы.Переместить(ЭлементИндикации, ЭлементИндикации.Родитель, ЭлементИндикации.Родитель.ПодчиненныеЭлементы[0]);			
	КонецЕсли;	
	
	ЭлементИндикации.Ширина = 1;
	
	Родитель.УстановитьДействие("ПриАктивизацииЯчейки", "Подключаемый_ЭлементИндикацииПриАктивизацииЯчейки");
	
	ЯчейкаАктивируемаяПоУмолчанию = АктивныйЭлементВТаблицеСодержащейГиперссылку(Родитель, ЭлементИндикации);
	
	Если ЯчейкаАктивируемаяПоУмолчанию <> Неопределено Тогда
		ЯчейкаАктивируемаяПоУмолчанию.АктивизироватьПоУмолчанию = Истина;
	КонецЕсли;	
	
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
			
	Отбор = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
	Отбор.ПравоеЗначение = Ложь;
	Отбор.Использование = Истина;

	ОформляемоеПоле =  ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ЭлементИндикации.Имя); 
	ОформляемоеПоле.Использование = Истина;

	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);	
	
	Возврат ЭлементИндикации;
		
КонецФункции	

&НаСервереБезКонтекста
Функция УстановитьУсловноеОформлениеДляЭлементаСодержащегоОшибку(Форма, ОписаниеЭлемента, ОписаниеРеквизитаИндикации)
	ПутьКДаннымФлага = ОписаниеРеквизитаИндикации.ПутьКДанным + ?(ОписаниеРеквизитаИндикации.ПутьКДанным = "", "", ".") + ОписаниеРеквизитаИндикации.ИмяРеквизитаФлаг;
	ПутьКДаннымСчетчика = ОписаниеРеквизитаИндикации.ПутьКДанным + ?(ОписаниеРеквизитаИндикации.ПутьКДанным = "", "", ".") + ОписаниеРеквизитаИндикации.ИмяРеквизитаСчетчик;
	
	Если ОписаниеЭлемента.Тип = "ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки" Тогда
		
		ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы  = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

		Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ОписаниеРеквизитаИндикации.ПутьКДаннымФормыСодержащимОшибку);
				
		Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымФлага);
		Отбор.ПравоеЗначение = Истина;
		Отбор.Использование = Истина;
		
		ОформляемоеПоле =  ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ОписаниеЭлемента.ИмяЭлемента); 
		ОформляемоеПоле.Использование = Истина;

		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);	
	КонецЕсли;	
	
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы  = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымФлага);
	Отбор.ПравоеЗначение = Истина;
	Отбор.Использование = Истина;

	Если Не ПустаяСтрока(ОписаниеРеквизитаИндикации.ИмяРеквизитаСчетчик) Тогда
		Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымСчетчика);
		Отбор.ПравоеЗначение = 0;
		Отбор.Использование = Истина;
	КонецЕсли;	

	ОформляемоеПоле =  ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ОписаниеЭлемента.ИмяЭлемента); 
	ОформляемоеПоле.Использование = Истина;
	
	Если ОписаниеЭлемента.Тип = "ОписаниеЭлементаШапкиСИндикациейОшибокВСтрокеТаблицы" Тогда
		ОформляемоеПоле =  ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ОписаниеЭлемента.ИмяЭлементаТаблица); 
		ОформляемоеПоле.Использование = Истина;
	КонецЕсли;	

	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
		
КонецФункции	


&НаСервереБезКонтекста
Функция СоздатьЭлементИндикацииОшибкиВШапкеФормы(Форма, ЭлементОтображенияДанныхСОшибкой, ПутьКДанным)
	Элементы = Форма.Элементы;
	
	Если ТипЗнч(ЭлементОтображенияДанныхСОшибкой.Родитель) =  Тип("ГруппаФормы")
		И ЭлементОтображенияДанныхСОшибкой.Родитель.Вид  = ВидГруппыФормы.ОбычнаяГруппа
		И ЭлементОтображенияДанныхСОшибкой.Родитель.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная Тогда
		
		Родитель = ЭлементОтображенияДанныхСОшибкой.Родитель;
	Иначе	
	                                                
		ИмяГруппы = ЭлементОтображенияДанныхСОшибкой.Имя + "ГруппаИндикацииОшибки";
				
		Родитель = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), ЭлементОтображенияДанныхСОшибкой.Родитель, ЭлементОтображенияДанныхСОшибкой);
		Родитель.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Родитель.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Родитель.ОтображатьЗаголовок  = Ложь;
		Родитель.Отображение = ОтображениеОбычнойГруппы.Нет;
	
		Элементы.Переместить(ЭлементОтображенияДанныхСОшибкой, Родитель);
	КонецЕсли;	
		
	ЭлементИндикации = СоздатьПолеКартинкиДляИндикацииОшибок(Элементы, ЭлементОтображенияДанныхСОшибкой, Родитель, ПутьКДанным);	
	
	ЭлементИндикации.УстановитьДействие("Нажатие", "Подключаемый_ЭлементИндикацииОшибкиНажатие");
		
	Возврат ЭлементИндикации;
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьПолеКартинкиДляИндикацииОшибок(ЭлементыФормы, ЭлементОтображенияДанныхСОшибкой, Родитель, ПутьКДанным)
	ИмяЭлемента = ЭлементОтображенияДанныхСОшибкой.Имя + "ЕстьОшибки";
	
	ИндексЭлемента = ЭлементОтображенияДанныхСОшибкой.Родитель.ПодчиненныеЭлементы.Индекс(ЭлементОтображенияДанныхСОшибкой); 
	
	Если ТипЗнч(Родитель) = Тип("ТаблицаФормы") 
		Или ИндексЭлемента = ЭлементОтображенияДанныхСОшибкой.Родитель.ПодчиненныеЭлементы.Количество() - 1 Тогда
		
		ЭлементИндикации = ЭлементыФормы.Вставить(ИмяЭлемента, Тип("ПолеФормы"), Родитель);	
	Иначе
		СледующийЭлемент = ЭлементОтображенияДанныхСОшибкой.Родитель.ПодчиненныеЭлементы[ИндексЭлемента + 1];
		ЭлементИндикации = ЭлементыФормы.Вставить(ИмяЭлемента, Тип("ПолеФормы"), Родитель, СледующийЭлемент);	
	КонецЕсли;	
	
	ЭлементИндикации.ПутьКДанным  = ПутьКДанным;
	ЭлементИндикации.Вид = ВидПоляФормы.ПолеКартинки;
	ЭлементИндикации.АктивизироватьПоУмолчанию = Ложь;
	ЭлементИндикации.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементИндикации.ПропускатьПриВводе = Истина;
	ЭлементИндикации.КартинкаЗначений  = БиблиотекаКартинок.Предупреждение;
	ЭлементИндикации.Видимость = ЭлементОтображенияДанныхСОшибкой.Видимость;
	ЭлементИндикации.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	ЭлементИндикации.Высота = 1;
	ЭлементИндикации.Ширина = 2;
	ЭлементИндикации.РастягиватьПоВертикали = Ложь;
	ЭлементИндикации.РастягиватьПоГоризонтали = Ложь;
	ЭлементИндикации.Гиперссылка = Истина;
	
	Возврат ЭлементИндикации;
КонецФункции	

&НаСервереБезКонтекста
Процедура ЗаполнитьСтраницыВладельцыЭлемента(Элемент, Страницы)
	Если ТипЗнч(Элемент) = Тип("УправляемаяФорма") Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Элемент) = Тип("ГруппаФормы")
		И ((Элемент.Вид = ВидГруппыФормы.Страница
			И Элемент.Родитель.ОтображениеСтраниц <> ОтображениеСтраницФормы.Нет)
		ИЛИ (Элемент.Вид = ВидГруппыФормы.ОбычнаяГруппа
			И Элемент.Поведение  = ПоведениеОбычнойГруппы.Свертываемая))Тогда 
		
		Страницы.Добавить(Элемент.Имя);
	КонецЕсли;	
	
	ЗаполнитьСтраницыВладельцыЭлемента(Элемент.Родитель, Страницы)	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ОписаниеРеквизитаИндикацииОшибкиИзОписанияЭлементаИндикации(ОписаниеЭлемента)
	Если ОписаниеЭлемента.Тип = "ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы"
		Или ОписаниеЭлемента.Тип = "ОписаниеЭлементаШапкиСИндикациейОшибокВСтрокеТаблицы" Тогда
		
		ОписаниеРеквизита = ОписаниеРеквизитаИндикацииОшибкиВСтрокеТаблицы();
		ЗаполнитьЗначенияСвойств(ОписаниеРеквизита, ОписаниеЭлемента,, "Тип");
	Иначе
		ОписаниеРеквизита = ОписаниеРеквизитаИндикацииОшибкиВШапке();
		ЗаполнитьЗначенияСвойств(ОписаниеРеквизита, ОписаниеЭлемента,, "Тип");	
	КонецЕсли;	

	Возврат ОписаниеРеквизита;
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьРеквизитПризнакНаличияОшибки(ДобавляемыеРеквизиты, СвойстваСоздаваемогоРеквизита, ОписаниеСозданныхРеквизитов)
	
	Если СвойстваСоздаваемогоРеквизита.Тип = "РеквизитСтрокиТаблицы" Тогда
		
		ИмяРеквизитаФлаг = "ЕстьОшибки"; 
		
		Путь = СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку;
	Иначе
		ЭлементыПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку, ".");
		
		Путь  = "";
		Если ЭлементыПути.Количество() = 0 Тогда
			ИмяРеквизитаФлаг = "ЕстьОшибки";
		Иначе
			ИмяРеквизитаФлаг = ЭлементыПути[ЭлементыПути.Количество() - 1] + "ЕстьОшибки";
		КонецЕсли;		
	КонецЕсли;	
	
	ПолныйПуть = Путь + ?(Путь = "", "", ".") + ИмяРеквизитаФлаг;
	
	ОписаниеСозданногоРеквизита =  ОписаниеСозданныхРеквизитов[СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку];
	
	Если ОписаниеСозданногоРеквизита = Неопределено Тогда 
		ОписаниеСозданногоРеквизита = ОписаниеРеквизитовИндикацииСвязанныхСДаннымиФормы();
		ОписаниеСозданногоРеквизита.ПутьКДанным = Путь;
		ОписаниеСозданногоРеквизита.ИмяРеквизитаФлаг = ИмяРеквизитаФлаг;
		ОписаниеСозданногоРеквизита.ПутьКДаннымФормыСодержащимОшибку = СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку; 
		
		ОписаниеСозданныхРеквизитов.Вставить(СвойстваСоздаваемогоРеквизита.ПутьКДаннымФормыСодержащимОшибку, ОписаниеСозданногоРеквизита);

		РеквизитФлаг = Новый РеквизитФормы(ИмяРеквизитаФлаг, Новый ОписаниеТипов("Булево"), Путь);
		ДобавляемыеРеквизиты.Добавить(РеквизитФлаг);
	КонецЕсли;	
		
	Возврат ОписаниеСозданногоРеквизита;
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеРеквизитовИндикацииСвязанныхСДаннымиФормы()
	Описание = Новый Структура;
	Описание.Вставить("ПутьКДанным");
	Описание.Вставить("ИмяРеквизитаФлаг");
	Описание.Вставить("ИмяРеквизитаСчетчик");
	Описание.Вставить("ПутьКДаннымФормыСодержащимОшибку");
	Описание.Вставить("СтраницыВладельцы", Новый Массив);

	Возврат Описание;	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеДобавляемыхРеквизитовСчетчиковОшибокИзОписанияПодчиненности(ОписаниеПодчиненностиДанных)
	ОписаниеРеквизитовСчетчиков = Новый Массив;
	
	Для Каждого ЭлементОписанияПодчиненности Из ОписаниеПодчиненностиДанных Цикл
		Если ЭлементОписанияПодчиненности.ТипСвязиДанных = "СвязьРеквизитовОбъектов"
			Или ЭлементОписанияПодчиненности.ТипСвязиДанных = "СвязьРеквизитаСДаннымиСтрокиТаблицы" Тогда 
			
			ОписаниеРеквизита = ОписаниеРеквизитаИндикацииОшибкиВШапке();
			ОписаниеРеквизита.ПутьКДаннымФормыСодержащимОшибку = ЭлементОписанияПодчиненности.ПутьКРеквизитуВедущихДанных;
			
		Иначе
			ОписаниеРеквизита = ОписаниеРеквизитаИндикацииОшибкиВСтрокеТаблицы();
			ОписаниеРеквизита.ПутьКДаннымФормыСодержащимОшибку = ЭлементОписанияПодчиненности.ПутьКРеквизитуВедущихДанных;	
			ОписаниеРеквизита.ИмяРеквизитаТаблицы = ЭлементОписанияПодчиненности.ИмяРеквизитаТаблицыВедущихДанных;
		КонецЕсли;	
		
		ОписаниеРеквизитовСчетчиков.Добавить(ОписаниеРеквизита);
	КонецЦикла;	
	
	Возврат ОписаниеРеквизитовСчетчиков;
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеРеквизитаИндикацииОшибкиВСтрокеТаблицы()
	Возврат Новый Структура("Тип, ПутьКДаннымФормыСодержащимОшибку, ИмяРеквизитаТаблицы", "РеквизитСтрокиТаблицы");	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеРеквизитаИндикацииОшибкиВШапке()
	Возврат Новый Структура("Тип, ПутьКДаннымФормыСодержащимОшибку", "РеквизитШапки");	
КонецФункции

&НаСервереБезКонтекста
Процедура ХраненияОшибокВДанныхФормыДополнитьФорму(Форма)
	ПутиКРеквизитамФормы = ПутиКДаннымФормы(Форма, Ложь);
	ПутиКРеквизитамФормы.Добавить("");
		
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого ПутьКРеквизиту Из ПутиКРеквизитамФормы Цикл
		РеквизитТаблицаХраненияОшибок = Новый РеквизитФормы("ТаблицаХраненияОшибок", Новый ОписаниеТипов("ТаблицаЗначений"), ПутьКРеквизиту);
		ДобавляемыеРеквизиты.Добавить(РеквизитТаблицаХраненияОшибок);
		
		ПутьКТаблице = ПутьКРеквизиту + ?(ПутьКРеквизиту = "", "ТаблицаХраненияОшибок", "." + "ТаблицаХраненияОшибок");
		
		РеквизитТекстОшибки = Новый РеквизитФормы("Текст", Новый ОписаниеТипов("Строка"), ПутьКТаблице);
		ДобавляемыеРеквизиты.Добавить(РеквизитТекстОшибки);
		
		РеквизитПолеОшибки = Новый РеквизитФормы("Поле", Новый ОписаниеТипов("Строка"), ПутьКТаблице);
		ДобавляемыеРеквизиты.Добавить(РеквизитПолеОшибки);	
		
		РеквизитКлючДанныхОшибки = Новый РеквизитФормы("КлючДанных", Новый ОписаниеТипов("Неопределено"), ПутьКТаблице);
		ДобавляемыеРеквизиты.Добавить(РеквизитКлючДанныхОшибки);
		
		РеквизитКлючДанныхОшибки = Новый РеквизитФормы("НеПривязана", Новый ОписаниеТипов("Булево"), ПутьКТаблице);
		ДобавляемыеРеквизиты.Добавить(РеквизитКлючДанныхОшибки);
	КонецЦикла;	
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
КонецПроцедуры

#КонецОбласти

#Область МеханизмОбработкиЗаписей

&НаКлиенте
Процедура ДокументыСЗВЗаписиОСтажеПриОкончанииРедактирования(ДанныеТекущейСтроки, НоваяСтрока, КонтролируемыеПоля, СтарыеЗначенияКонтролируемыхПолей, ДанныеСтрокиСПризнакамиИсправления, Форма = Неопределено)
	
	ДокументыСЗВКонтрольИсправленийПриОкончанииРедактированияСтроки(ДанныеТекущейСтроки, КонтролируемыеПоля, СтарыеЗначенияКонтролируемыхПолей, ДанныеСтрокиСПризнакамиИсправления);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыСЗВЗаписиОСтажеПриАктивацииСтроки(ДанныеТекущейСтроки, КонтролируемыеПоля = Неопределено, СтарыеЗначенияКонтролируемыхПолей = Неопределено, ДанныеТекущейСтрокиСотрудник = Неопределено, ЭлементОтменыИсправлений = Неопределено)
													 
	Если ДанныеТекущейСтроки <> Неопределено И КонтролируемыеПоля <> Неопределено Тогда
		ДокументыСЗВКонтрольИсправленийПриАктивацииСтроки(ДанныеТекущейСтроки, КонтролируемыеПоля, СтарыеЗначенияКонтролируемыхПолей, 
														  ДанныеТекущейСтрокиСотрудник);													 
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ДокументыСЗВКонтрольИсправленийПриАктивацииСтроки(ДанныеТекущейСтроки, КонтролируемыеПоля, СтарыеЗначенияКонтролируемыхПолей, ДанныеСтрокиСПризнакамиИсправлений)
	ДокументыСЗВУстановитьЗначенияКонтролируемыхПолей(
		ДанныеТекущейСтроки, 
		КонтролируемыеПоля, 
		СтарыеЗначенияКонтролируемыхПолей);
КонецПроцедуры	

&НаКлиенте
Процедура ДокументыСЗВУстановитьЗначенияКонтролируемыхПолей(ДанныеТекущейСтроки, КонтролируемыеПоля, СтарыеЗначенияКонтролируемыхПолей) Экспорт
	Для Каждого РазделКонтролируемыхПолей Из КонтролируемыеПоля Цикл 
		МассивКонтролируемыхПолей = РазделКонтролируемыхПолей.Значение.КонтролируемыеПоля; 
		Если НЕ СтарыеЗначенияКонтролируемыхПолей.Свойство(РазделКонтролируемыхПолей.Ключ) Тогда
			СтарыеЗначенияКонтролируемыхПолей.Вставить(РазделКонтролируемыхПолей.Ключ, Новый Структура);
		КонецЕсли;
		Для Каждого КонтролируемоеПоле Из МассивКонтролируемыхПолей Цикл
			НовоеЗначениеПоля = Неопределено;
			Если ДанныеТекущейСтроки.Свойство(КонтролируемоеПоле, НовоеЗначениеПоля) Тогда
				СтарыеЗначенияКонтролируемыхПолей[РазделКонтролируемыхПолей.Ключ].Вставить(КонтролируемоеПоле, НовоеЗначениеПоля);	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ДокументыСЗВКонтрольИсправленийПриОкончанииРедактированияСтроки(ДанныеТекущейСтроки, КонтролируемыеПоля, СтарыеЗначенияКонтролируемыхПолей, ДанныеСтрокиПризнаковИсправления)
	ИзмененыСуммыВзносов = Ложь;
	ИзмененСтаж = Ложь;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда 
		Для Каждого РазделКонтролируемыхПолей Из КонтролируемыеПоля Цикл
			СтрокаСИзменениямиСтажа = РазделКонтролируемыхПолей.Ключ = "Стаж" 
										И ДанныеСтрокиПризнаковИсправления.Свойство("ФиксСтаж")
										И ДанныеСтрокиПризнаковИсправления.ФиксСтаж;
										
			МассивКонтролируемыхПолей = РазделКонтролируемыхПолей.Значение.КонтролируемыеПоля;
			Для Каждого КонтролируемоеПоле Из МассивКонтролируемыхПолей Цикл
				ТекущееЗначениеПоля = Неопределено;
				Если ДанныеТекущейСтроки.Свойство(КонтролируемоеПоле, ТекущееЗначениеПоля) Тогда
					Если ТекущееЗначениеПоля <> СтарыеЗначенияКонтролируемыхПолей[РазделКонтролируемыхПолей.Ключ][КонтролируемоеПоле] Тогда
						ДанныеСтрокиПризнаковИсправления[РазделКонтролируемыхПолей.Значение.ИмяПоляФиксДанных] = Истина;
						Если РазделКонтролируемыхПолей.Ключ = "НачисленныеВзносы" Или РазделКонтролируемыхПолей.Ключ = "УплаченныеВзносы" Тогда
							ИзмененыСуммыВзносов = Истина;		
						ИначеЕсли РазделКонтролируемыхПолей.Ключ = "Стаж" Тогда
							ИзмененСтаж = Истина;
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	
				
		ДокументыСЗВУстановитьЗначенияКонтролируемыхПолей(
			ДанныеТекущейСтроки, 
			КонтролируемыеПоля, 
			СтарыеЗначенияКонтролируемыхПолей);
	КонецЕсли;	
		
	Возврат ИзмененСтаж Или ИзмененыСуммыВзносов;	
КонецФункции


#КонецОбласти


#Область Инициализация

СтарыеЗначенияКонтролируемыхПолейСтаж = Новый Структура;

#КонецОбласти
