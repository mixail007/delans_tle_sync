#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ОчиститьДатуНомерВходящегоДокумента(ЭтотОбъект);
	
	ЭтотОбъект.СостояниеЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаНаПроизводство();
	ЭтотОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.ПустаяСсылка();
	ЭтотОбъект.УдалитьЗакрыт = Ложь;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("Структура")] = "ЗаполнитьПоСтруктуре";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПокупателя")] = "ЗаполнитьПоЗаказуПокупателя";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказНаПроизводство")] = "ЗаполнитьПоЗаказуНаПроизводство";
	
	Если ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") Тогда
		ИсключаяСвойства = "";
	Иначе
		ИсключаяСвойства = "ЗаказПокупателя, ЗаказНаПроизводствоОснование";
	КонецЕсли;
	
	ИсключаяСвойства = ИсключаяСвойства + ?(ПустаяСтрока(ИсключаяСвойства), "", ",") + "СостояниеЗаказа,ВариантЗавершения";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения, ИсключаяСвойства);
	
	ДозаполнитьПоУмолчанию();
	
	Если ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") Тогда
		ДокументОснование = Неопределено;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроизводствоСервер.ЗаполнитьКлючиСвязи(Запасы);
	ПроизводствоСервер.ЗаполнитьКлючиСвязи(Продукция);
	
	СписокРесурсов = "";
	Для каждого СтрокаРесурс Из РесурсыПредприятия Цикл
		СписокРесурсов = СписокРесурсов + ?(СписокРесурсов = "","","; " + Символы.ПС) + СокрЛП(СтрокаРесурс.РесурсПредприятия);
	КонецЦикла;
	
	СписокНоменклатуры = "";
	ФОИспользоватьХарактеристики = Константы.ФункциональнаяОпцияИспользоватьХарактеристики.Получить();
	Для каждого СтрокаПродукция Из Продукция Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаПродукция.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		ХарактеристикаПредставление = "";
		Если ФОИспользоватьХарактеристики И ЗначениеЗаполнено(СтрокаПродукция.Характеристика) Тогда
			ХарактеристикаПредставление = " (" + СокрЛП(СтрокаПродукция.Характеристика) + ")";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СписокНоменклатуры) Тогда
			СписокНоменклатуры = СписокНоменклатуры + Символы.ПС;
		КонецЕсли;
		СписокНоменклатуры = СписокНоменклатуры + СокрЛП(СтрокаПродукция.Номенклатура) + ХарактеристикаПредставление + ", " + СтрокаПродукция.Количество + " " + СокрЛП(СтрокаПродукция.ЕдиницаИзмерения);
		
	КонецЦикла;
	
	СостоянияЗаказов.ПередЗаписьюЗаказа(ЭтотОбъект);
	
	ПривестиДанныеКСогласованномуСостоянию();
	
	Если ПоложениеЗаказаПокупателя=Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		ЗаказПокупателя = ЗаказПокупателяШапки(?(ВидОперации=Перечисления.ВидыОперацийЗаказНаПроизводство.Разборка, Запасы, Продукция));
	Иначе
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			СтрокаТабличнойЧасти.ЗаказПокупателя = ЗаказПокупателя;
		КонецЦикла; 
		Для каждого СтрокаТабличнойЧасти Из Продукция Цикл
			СтрокаТабличнойЧасти.ЗаказПокупателя = ЗаказПокупателя;
		КонецЦикла; 
		Для каждого СтрокаТабличнойЧасти Из Операции Цикл
			СтрокаТабличнойЧасти.ЗаказПокупателя = ЗаказПокупателя;
		КонецЦикла; 
	КонецЕсли;
	
	Если ПоложениеСклада=Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		СтруктурнаяЕдиницаРезерв = СтруктурнаяЕдиницаШапки(?(ВидОперации=Перечисления.ВидыОперацийЗаказНаПроизводство.Разборка, Продукция, Запасы));
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийЗаказНаПроизводство.Разборка Тогда
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
		КонецЦикла; 
		Для каждого СтрокаТабличнойЧасти Из Продукция Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
				СтрокаТабличнойЧасти.СтруктурнаяЕдиница = СтруктурнаяЕдиницаРезерв;
			Иначе
				СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
			КонецЕсли; 
		КонецЦикла; 
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийЗаказНаПроизводство.Сборка Тогда
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
				СтрокаТабличнойЧасти.СтруктурнаяЕдиница = СтруктурнаяЕдиницаРезерв;
			Иначе
				СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
			КонецЕсли; 
		КонецЦикла; 
		Для каждого СтрокаТабличнойЧасти Из Продукция Цикл
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
		КонецЦикла; 
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийЗаказНаПроизводство.Разборка Тогда
		Для каждого СтрокаТабличнойЧасти Из РаспределениеЗапасов Цикл
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
		КонецЦикла; 
	КонецЕсли; 
	
	Если ПоложениеСтруктурнойЕдиницыОпераций=Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		СтруктурнаяЕдиницаОпераций = СтруктурнаяЕдиницаОперацийШапки();
	Иначе
		Для каждого СтрокаТабличнойЧасти Из Операции Цикл
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = СтруктурнаяЕдиницаОпераций;
		КонецЦикла; 
		Для каждого СтрокаТабличнойЧасти Из СоставБригады Цикл
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = СтруктурнаяЕдиницаОпераций;
		КонецЦикла; 
	КонецЕсли; 
	
	Если ПоложениеИсполнителя=Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Исполнитель = ИсполнительШапки();
	Иначе
		Для каждого СтрокаТабличнойЧасти Из Операции Цикл
			СтрокаТабличнойЧасти.Исполнитель = Исполнитель;
		КонецЦикла; 
	КонецЕсли;
	
	Если НЕ РучноеРаспределение
		И РежимЗаписи=РежимЗаписиДокумента.Проведение
		И ПолучитьФункциональнуюОпцию("ИспользоватьЭтапыПроизводства") Тогда
		ПроизводствоСервер.РаспределитьМатериалы(Продукция, Запасы, РаспределениеЗапасов);
	ИначеЕсли НЕ РучноеРаспределение Тогда 
		РаспределениеЗапасов.Очистить();
	КонецЕсли;
	
	ЗапланированыОперации = (Операции.Количество()>0);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СостоянияЗаказов.ПриЗаписиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Этапы производства
	ПроверитьЗаполнениеЭтаповПроизводства(Отказ, ВариантЗавершения=Перечисления.ВариантыЗавершенияЗаказа.Отменен);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 

	// Дополнительная проверка на заполненность структурной единицы в ТЧ Операции, где это необходимо
	Если ПоложениеСтруктурнойЕдиницыОпераций = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Для каждого СтрокаТабличнойЧасти Из Операции Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Исполнитель) И ТипЗнч(СтрокаТабличнойЧасти.Исполнитель)=Тип("СправочникСсылка.Сотрудники") И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиница) Тогда
				ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не заполнена колонка ""Подразделение""'"),,
				СтрШаблон("Объект.Операции[%1].СтруктурнаяЕдиница", Операции.Индекс(СтрокаТабличнойЧасти)),,
				Отказ);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Инициализация дополнительных свойств для проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа
	Документы.ЗаказНаПроизводство.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета
	УправлениеНебольшойФирмойСервер.ОтразитьГрафикДвиженияЗапасов(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗаказыНаПроизводство(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьПотребностьВЗапасах(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьРазмещениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьВыпускПродукции(ДополнительныеСвойства, Движения, Отказ);
	
	// Этапы производства
	Если ВидОперации=Перечисления.ВидыОперацийЗаказНаПроизводство.Сборка Тогда
		УправлениеНебольшойФирмойСервер.ОтразитьЭтапыПроизводства(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли; 
	
	// Ресурсы предприятия
	Если ПолучитьФункциональнуюОпцию("ПланироватьЗагрузкуРесурсовПредприятия") Тогда
		УправлениеНебольшойФирмойСервер.ОтразитьРесурсыПредприятия(ДополнительныеСвойства, Движения, Отказ);
		ТаблицаРесурсыПредприятия = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРесурсыПредприятия;
		ПланированиеРесурсовУНФ.СформироватьЗаписиКолендаряСотрудникаПоРесурсам(Ссылка,ТаблицаРесурсыПредприятия,Отказ);
	КонецЕсли;
	
	// Запись наборов записей
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль
	Документы.ЗаказНаПроизводство.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Этапы производства
	ПроверитьЗаполнениеЭтаповПроизводства(Отказ, Истина);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 

	// Инициализация дополнительных свойств для проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Ресурсы предприятия
	Если ПолучитьФункциональнуюОпцию("ПланироватьЗагрузкуРесурсовПредприятия") Тогда
		ПланированиеРесурсовУНФ.СформироватьЗаписиКолендаряСотрудникаПоРесурсам(Ссылка,Неопределено,Отказ);
	КонецЕсли;
	
	// Контроль
	Документы.ЗаказНаПроизводство.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить() Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийЗаказНаПроизводство.Сборка Тогда
			
			Для каждого СтрокаЗапасы Из Запасы Цикл
				
				Если СтрокаЗапасы.Резерв > СтрокаЗапасы.Количество Тогда
					
					ТекстСообщения = НСтр("ru = 'В строке №%Номер% табл. части ""Материалы"" количество резервируемых позиций превышает общее количество материалов.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаЗапасы.НомерСтроки);
					УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
						ЭтотОбъект,
						ТекстСообщения,
						"Запасы",
						СтрокаЗапасы.НомерСтроки,
						"Резерв",
						Отказ
					);
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Для каждого СтрокаПродукция Из Продукция Цикл
				
				Если СтрокаПродукция.Резерв > СтрокаПродукция.Количество Тогда
					
					ТекстСообщения = НСтр("ru = 'В строке №%Номер% табл. части ""Продукция"" количество резервируемых позиций превышает общее количество продукции.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаПродукция.НомерСтроки);
					УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
						ЭтотОбъект,
						ТекстСообщения,
						"Продукция",
						СтрокаПродукция.НомерСтроки,
						"Резерв",
						Отказ
					);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Запасы.Количество() > 0 Тогда
		
		СтруктураОтбора = Новый Структура("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Услуга);
		МассивСтрокУслуги = Продукция.НайтиСтроки(СтруктураОтбора);
		Если Продукция.Количество() = МассивСтрокУслуги.Количество() Тогда
			
			ТекстСообщения = НСтр("ru = 'Планирование потребностей в материалах не выполняется для услуг!
							|В табличной части ""Продукция"" указаны только услуги. Необходимо очистить табличную часть ""Материалы"".'");
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,,, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не СостояниеЗаказа = Справочники.СостоянияЗаказовНаПроизводство.Завершен Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ВариантЗавершения"));
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, Отказ, Истина);
	
	// Склад резерва
	ИтогоРезерв = 0;
	Если ВидОперации=Перечисления.ВидыОперацийЗаказНаПроизводство.Разборка Тогда
		ИмяТЧ = "Продукция";
	Иначе
		ИмяТЧ = "Запасы";
	КонецЕсли; 
	НеПроверять = (НЕ ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") ИЛИ НЕ ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам"));
	Для каждого СтрокаТабличнойЧасти Из ЭтотОбъект[ИмяТЧ] Цикл
		Если НеПроверять Тогда
			Прервать;
		КонецЕсли; 
		Если СтрокаТабличнойЧасти.Резерв<=0 Тогда
			Продолжить;
		КонецЕсли; 
		ЗаказПокупателяСтроки = ?(ПоложениеЗаказаПокупателя=Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти, СтрокаТабличнойЧасти.ЗаказПокупателя, ЗаказПокупателя);
		Если НЕ ЗначениеЗаполнено(ЗаказПокупателяСтроки) Тогда
			Продолжить;
		КонецЕсли;
		ИтогоРезерв = ИтогоРезерв + СтрокаТабличнойЧасти.Резерв;
		Если ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти И Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиница) Тогда
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			СтрШаблон(НСтр("ru = 'Не заполнена колонка ""Склад""  в строке %1 списка ""%2""'"), СтрокаТабличнойЧасти.НомерСтроки, ИмяТЧ),
			ИмяТЧ,
			СтрокаТабличнойЧасти.НомерСтроки,
			"СтруктурнаяЕдиница",
			Отказ);
		КонецЕсли; 
	КонецЦикла;
	Если ИтогоРезерв>0 И ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		ПроверяемыеРеквизиты.Добавить("СтруктурнаяЕдиницаРезерв");
	КонецЕсли; 
	
	// Сравнение таблицы материалов и распределения
	Если РучноеРаспределение Тогда
		ПроизводствоСервер.СравнитьЗапасыИРаспределение(ЭтотОбъект, Отказ);
	Иначе
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РаспределениеЗапасов.Количество");
	КонецЕсли;
	
	Если ПоложениеЗаказаПокупателя=Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		ПроверитьЗаказыТЧ(Отказ);
	КонецЕсли; 
	
	Если Операции.Количество()>0 Тогда
		Если ПоложениеИсполнителя = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			ПроверяемыеРеквизиты.Добавить("Операции.Исполнитель");
		Иначе 
			ПроверяемыеРеквизиты.Добавить("Исполнитель");
		КонецЕсли;
			
		Если ПоложениеСтруктурнойЕдиницыОпераций = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			ПроверяемыеРеквизиты.Добавить("СоставБригады.СтруктурнаяЕдиница");
		Иначе
			ПроверяемыеРеквизиты.Добавить("СтруктурнаяЕдиницаОпераций");
		КонецЕсли;
	КонецЕсли; 
	
	// Этапы производства
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЭтапыПроизводства") 
		И ВидОперации<>Перечисления.ВидыОперацийЗаказНаПроизводство.Разборка Тогда
		МассивСпецификаций = Новый Массив;
		Для каждого СтрокаТабличнойЧасти Из Продукция Цикл
			Если МассивСпецификаций.Найти(СтрокаТабличнойЧасти.Спецификация)=Неопределено Тогда
				МассивСпецификаций.Добавить(СтрокаТабличнойЧасти.Спецификация);
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		Если МассивСпецификаций.Найти(Справочники.Спецификации.ПустаяСсылка())=Неопределено Тогда
			МассивЭтапов = ПроизводствоСервер.ЭтапыПроизводстваСпецификаций(МассивСпецификаций);
			Если МассивЭтапов.Найти(Справочники.ЭтапыПроизводства.ПустаяСсылка())=Неопределено Тогда
				ПроверяемыеРеквизиты.Добавить("Запасы.Этап");
				Если РучноеРаспределение Тогда
					ПроверяемыеРеквизиты.Добавить("РаспределениеЗапасов.Этап");
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	
	//Ресурсы
	ЕстьОшибки = ПланированиеРесурсовУНФ.ЕстьОшибкиЗаполнения(ЭтотОбъект.РесурсыПредприятия, ЭтотОбъект);
	Отказ = ?(ЕстьОшибки = Истина, Истина, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыЗаполненияДокумента

Процедура ЗаполнитьПоСтруктуре(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.Свойство("МассивЗаказовПокупателей") Тогда
		ЗаполнитьПоЗаказуПокупателя(ДанныеЗаполнения);
	КонецЕсли;
	
	Если Не ДанныеЗаполнения.Свойство("РасчетПотребностей") Тогда
		Возврат;
	КонецЕсли;
	
	СтекСпецификацийУзлов = Новый Массив;
	ЗаполнитьЗапасыПоСпецификации(СтекСпецификацийУзлов);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьТехоперации") И Константы.АвтоматическиПланироватьОперацийЗаказомНаПроизводство.Получить() Тогда
		ЗаполнитьОперацииПоСпецификации();
	КонецЕсли; 
	Если РучноеРаспределение Тогда
		ПроизводствоСервер.РаспределитьМатериалы(Продукция, Запасы, РаспределениеЗапасов);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьКолонкуРезервПоОстаткам() Экспорт
	
	Запасы.ЗагрузитьКолонку(Новый Массив(Запасы.Количество()), "Резерв");
	
	Если ПоложениеЗаказаПокупателя<>Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти 
		И НЕ ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		// Резерв возможен только под заказ покупателя 
		Возврат;
	КонецЕсли; 
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВЫРАЗИТЬ(ТаблицаЗапасы.СтруктурнаяЕдиница КАК Справочник.СтруктурныеЕдиницы) КАК СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ТабличнаяЧасть
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.Партия КАК Партия,
	|	ТабличнаяЧасть.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТабличнаяЧасть.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	ТабличнаяЧасть КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)";
	
	ТаблицаЗапасы = Запасы.Выгрузить();
	Если ПоложениеСклада<>Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Для каждого СтрокаТабличнойЧасти Из ТаблицаЗапасы Цикл
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = СтруктурнаяЕдиницаРезерв;
		КонецЦикла; 
	КонецЕсли; 
	Если ПоложениеЗаказаПокупателя<>Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Для каждого СтрокаТабличнойЧасти Из ТаблицаЗапасы Цикл
			СтрокаТабличнойЧасти.ЗаказПокупателя = ЗаказПокупателя;
		КонецЦикла; 
	КонецЕсли; 
	Запрос.УстановитьПараметр("ТаблицаЗапасы", ТаблицаЗапасы);
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						&Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ВЫБОР
	|							КОГДА ТаблицаЗапасы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|								ТОГДА ТаблицаЗапасы.Номенклатура.СчетУчетаЗатрат
	|							ИНАЧЕ ТаблицаЗапасы.Номенклатура.СчетУчетаЗапасов
	|						КОНЕЦ,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &Период
	|		И ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", Выборка.Партия);
		Если ПоложениеСклада=Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", Выборка.СтруктурнаяЕдиница);
		КонецЕсли; 
		
		ВсегоОстаток = Выборка.КоличествоОстаток;
		МассивСтрокЗапасы = Запасы.НайтиСтроки(СтруктураДляПоиска);
		Для каждого СтрокаЗапасы Из МассивСтрокЗапасы Цикл
			Если ПоложениеЗаказаПокупателя=Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти 
				И НЕ ЗначениеЗаполнено(СтрокаЗапасы.ЗаказПокупателя) Тогда
				Продолжить;
			КонецЕсли; 
			ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток / СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			Если СтрокаЗапасы.Количество >= ВсегоОстаток Тогда
				СтрокаЗапасы.Резерв = ВсегоОстаток;
				ВсегоОстаток = 0;
			Иначе
				СтрокаЗапасы.Резерв = СтрокаЗапасы.Количество;
				ВсегоОстаток = ВсегоОстаток - СтрокаЗапасы.Количество;
				ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток * СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуНаПроизводство(ДанныеЗаполнения) Экспорт
	
	РучноеРаспределение = Константы.ИспользоватьРучноеРаспределениеМатериаловПоУмолчанию.Получить()<>Перечисления.ДаНет.Нет;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказНаПроизводство.Старт КАК Старт,
	|	ЗаказНаПроизводство.Старт КАК Финиш,
	|	ЗаказНаПроизводство.ВидОперации КАК ВидОперации,
	|	ЗаказНаПроизводство.Ссылка КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ЗаказНаПроизводство.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ЗаказНаПроизводство.Организация КАК Организация,
	|	ЗаказНаПроизводство.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА (ЗаказНаПроизводство.СтруктурнаяЕдиницаРезерв = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|				ИЛИ ЗаказНаПроизводство.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					И ЗаказНаПроизводство.ПоложениеЗаказаПокупателя = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке))
	|				И (ЗаказНаПроизводство.СтруктурнаяЕдиница.ИсточникПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ИЛИ ЗаказНаПроизводство.СтруктурнаяЕдиница.ИсточникПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение))
	|			ТОГДА ЗаказНаПроизводство.СтруктурнаяЕдиница.ИсточникПеремещения
	|		ИНАЧЕ ЗаказНаПроизводство.СтруктурнаяЕдиницаРезерв
	|	КОНЕЦ КАК СтруктурнаяЕдиницаРезерв,
	|	ЗаказНаПроизводство.ПоложениеСклада КАК ПоложениеСклада,
	|	ЗаказНаПроизводство.ПоложениеЗаказаПокупателя КАК ПоложениеЗаказаПокупателя,
	|	ЗаказНаПроизводство.Запасы.(
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ЗаказНаПроизводство.Запасы.Количество - ЗаказНаПроизводство.Запасы.Резерв КАК Количество,
	|		Спецификация КАК Спецификация,
	|		Партия КАК Партия,
	|		ВЫБОР
	|			КОГДА ЗаказНаПроизводство.Запасы.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|					И ЗаказНаПроизводство.Запасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказНаПроизводство.Сборка)
	|				ТОГДА ЗаказНаПроизводство.Запасы.Ссылка.СтруктурнаяЕдиница
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|		КОНЕЦ КАК ПодразделениеЗавершающегоЭтапа,
	|		Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|		Номенклатура.СпособПополнения КАК СпособПополнения,
	|		ЗаказПокупателя КАК ЗаказПокупателя
	|	) КАК Запасы
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК ФункциональнаяОпцияРезервированиеЗапасов
	|ГДЕ
	|	ЗаказНаПроизводство.Ссылка = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	
	Продукция.Очистить();
	Запасы.Очистить();
	РаспределениеЗапасов.Очистить();
	Операции.Очистить();
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаИзРезультатаЗапроса.Следующий();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаИзРезультатаЗапроса);
		
		ТаблицаЗапасы = ВыборкаИзРезультатаЗапроса.Запасы.Выгрузить();
		ТаблицаЗапасы.Свернуть("Номенклатура, Характеристика, ЕдиницаИзмерения, Спецификация, Партия, ПодразделениеЗавершающегоЭтапа, ТипНоменклатуры, СпособПополнения, ЗаказПокупателя", "Количество");
		Для каждого СтрокаЗапасы Из ТаблицаЗапасы Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаЗапасы.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаЗапасы.Количество<=0 Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаЗапасы.Спецификация) 
				И СтрокаЗапасы.СпособПополнения=Перечисления.СпособыПополненияЗапасов.Закупка Тогда
				Продолжить;
			КонецЕсли; 
			НоваяСтрока = Продукция.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасы);
		КонецЦикла;
		
		Если Продукция.Количество() > 0 Тогда
			СтекСпецификацийУзлов = Новый Массив;
			ЗаполнитьЗапасыПоСпецификации(СтекСпецификацийУзлов);
			Если ПолучитьФункциональнуюОпцию("ИспользоватьТехоперации") И Константы.АвтоматическиПланироватьОперацийЗаказомНаПроизводство.Получить() Тогда
				ЗаполнитьОперацииПоСпецификации();
			КонецЕсли; 
			Если РучноеРаспределение Тогда
				ПроизводствоСервер.РаспределитьМатериалы(Продукция, Запасы, РаспределениеЗапасов);
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуПокупателя(ДанныеЗаполнения) Экспорт
	
	РучноеРаспределение = Константы.ИспользоватьРучноеРаспределениеМатериаловПоУмолчанию.Получить()<>Перечисления.ДаНет.Нет;
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаказНаПроизводство.Разборка Тогда
		ИмяТабличнойЧасти = "Запасы";
	Иначе
		ИмяТабличнойЧасти = "Продукция";
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("МассивЗаказовПокупателей") Тогда
		МассивЗаказов = ДанныеЗаполнения.МассивЗаказовПокупателей;
		ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	Иначе
		МассивЗаказов = Новый Массив;
		МассивЗаказов.Добавить(ДанныеЗаполнения);
		Если ЭтоНовый() ИЛИ НЕ ЗначениеЗаполнено(ПоложениеЗаказаПокупателя) Тогда
			ПоложениеЗаказаПокупателя = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ПоложениеЗаказаПокупателяВДокументахПроизводства");
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(ПоложениеЗаказаПокупателя) Тогда
			ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		КонецЕсли;
		Если ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
			ЗаказПокупателя = ДанныеЗаполнения;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение шапки.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателя.Ссылка КАК ОснованиеСсылка,
	|	ЗаказПокупателя.Проведен КАК ОснованиеПроведен,
	|	ЗаказПокупателя.СостояниеЗаказа КАК ОснованиеСостояние,
	|	ЗаказПокупателя.ВидОперации КАК ОснованиеВидОперации,
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ЗаказПокупателя.Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ЗаказПокупателя.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.СтруктурнаяЕдиницаПродажи.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|			ТОГДА ЗаказПокупателя.СтруктурнаяЕдиницаПродажи
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.СтруктурнаяЕдиницаПродажи.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|				И (ЗаказПокупателя.СтруктурнаяЕдиницаПродажи.ИсточникПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ИЛИ ЗаказПокупателя.СтруктурнаяЕдиницаПродажи.ИсточникПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение))
	|			ТОГДА ЗаказПокупателя.СтруктурнаяЕдиницаПродажи.ИсточникПеремещения
	|		ИНАЧЕ ЗаказПокупателя.СтруктурнаяЕдиницаРезерв
	|	КОНЕЦ КАК СтруктурнаяЕдиницаРезерв,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|			ТОГДА ЗаказПокупателя.Старт
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ЗаказПокупателя.ДатаОтгрузки, ДЕНЬ)
	|	КОНЕЦ КАК Старт,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|			ТОГДА ЗаказПокупателя.Финиш
	|		ИНАЧЕ КОНЕЦПЕРИОДА(ЗаказПокупателя.ДатаОтгрузки, ДЕНЬ)
	|	КОНЕЦ КАК Финиш,
	|	ЗаказПокупателя.ОжидаетсяВыборВариантаКП КАК ОжидаетсяВыборВариантаКП
	|ПОМЕСТИТЬ ЗаказыПокупателей
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя,
	|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК ФункциональнаяОпцияРезервированиеЗапасов
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&ДанныеЗаполнения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыПокупателей.ОснованиеСсылка КАК ОснованиеСсылка,
	|	ЗаказыПокупателей.ОснованиеПроведен КАК ОснованиеПроведен,
	|	ЗаказыПокупателей.ОснованиеСостояние КАК ОснованиеСостояние,
	|	ЗаказыПокупателей.ОснованиеВидОперации КАК ОснованиеВидОперации,
	|	ЗаказыПокупателей.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказыПокупателей.Организация КАК Организация,
	|	ЗаказыПокупателей.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗаказыПокупателей.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиницаРезерв,
	|	ЗаказыПокупателей.Старт КАК Старт,
	|	ЗаказыПокупателей.Финиш КАК Финиш,
	|	ЗаказыПокупателей.ОжидаетсяВыборВариантаКП КАК ОжидаетсяВыборВариантаКП
	|ИЗ
	|	ЗаказыПокупателей КАК ЗаказыПокупателей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЗаказыПокупателей.ЗаказПокупателя) КАК ЗаказПокупателя,
	|	МАКСИМУМ(ЗаказыПокупателей.Организация) КАК Организация,
	|	МАКСИМУМ(ЗаказыПокупателей.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиница,
	|	МАКСИМУМ(ЗаказыПокупателей.СтруктурнаяЕдиницаРезерв) КАК СтруктурнаяЕдиницаРезерв,
	|	МАКСИМУМ(ЗаказыПокупателей.ОснованиеВидОперации) КАК ОснованиеВидОперации,
	|	МИНИМУМ(ЗаказыПокупателей.Старт) КАК Старт,
	|	МАКСИМУМ(ЗаказыПокупателей.Финиш) КАК Финиш
	|ИЗ
	|	ЗаказыПокупателей КАК ЗаказыПокупателей";
	
	Запрос.УстановитьПараметр("ДанныеЗаполнения", МассивЗаказов);
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗначенияПроверяемыхРеквизитов = Новый Структура(
			"ВидОперации, СостояниеЗаказа, Проведен, ОжидаетсяВыборВариантаКП",
			Выборка.ОснованиеВидОперации, Выборка.ОснованиеСостояние, Выборка.ОснованиеПроведен, Выборка.ОжидаетсяВыборВариантаКП
		);
		Документы.ЗаказПокупателя.ПроверитьВозможностьВводаНаОснованииЗаказаПокупателя(Выборка.ОснованиеСсылка, ЗначенияПроверяемыхРеквизитов);
	КонецЦикла;
	
	Выборка = Результат[2].Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновноеПодразделение");
		Если НЕ ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
		КонецЕсли;
	КонецЕсли;
	
	ОснованиеВидОперации = Выборка.ОснованиеВидОперации;
	
	// Заполнение табличной части.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыОстатки.Характеристика КАК Характеристика,
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыОстатки.Характеристика КАК Характеристика,
	|		ЗаказыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя В (&ДанныеЗаполнения)) КАК ЗаказыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗапасыОстатки.ЗаказПокупателя,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		-ЗапасыОстатки.КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(, ЗаказПокупателя В (&ДанныеЗаполнения)) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РазмещениеОстатки.ЗаказПокупателя,
	|		РазмещениеОстатки.Номенклатура,
	|		РазмещениеОстатки.Характеристика,
	|		-РазмещениеОстатки.КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.РазмещениеЗаказов.Остатки(, ЗаказПокупателя В (&ДанныеЗаполнения)) КАК РазмещениеОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРазмещениеЗаказов.ЗаказПокупателя,
	|		ДвиженияДокументаРазмещениеЗаказов.Номенклатура,
	|		ДвиженияДокументаРазмещениеЗаказов.Характеристика,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРазмещениеЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРазмещениеЗаказов.Количество, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРазмещениеЗаказов.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РазмещениеЗаказов КАК ДвиженияДокументаРазмещениеЗаказов
	|	ГДЕ
	|		ДвиженияДокументаРазмещениеЗаказов.Регистратор = &Ссылка
	|		И ДвиженияДокументаРазмещениеЗаказов.ЗаказПокупателя В(&ДанныеЗаполнения)) КАК ЗаказыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыОстатки.ЗаказПокупателя,
	|	ЗаказыОстатки.Номенклатура,
	|	ЗаказыОстатки.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателяЗапасы.Ссылка КАК ЗаказПокупателя,
	|	МИНИМУМ(ЗаказПокупателяЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказПокупателяЗапасы.Спецификация КАК Спецификация,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЗаказПокупателяЗапасы.Спецификация.ВидПроизводства <> ЗНАЧЕНИЕ(Справочник.ВидыПроизводства.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ, ЛОЖЬ) КАК ИспользуютсяЭтапы,
	|	ЗаказПокупателяЗапасы.Партия КАК Партия,
	|	ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	СУММА(ВЫБОР
	|			КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка)
	|				ТОГДА ЗаказПокупателяЗапасы.Количество
	|			ИНАЧЕ ЗаказПокупателяЗапасы.Количество - ЗаказПокупателяЗапасы.Резерв
	|		КОНЕЦ) КАК Количество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВЫБОР
	|						КОГДА ЗаказПокупателяЗапасы.Спецификация.ВидПроизводства <> ЗНАЧЕНИЕ(Справочник.ВидыПроизводства.ПустаяСсылка)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ, ЛОЖЬ)
	|				И &ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка)
	|			ТОГДА ЕСТЬNULL(ЭтапыПроизводстваСтруктутрныеЕдиницы.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК ПодразделениеЗавершающегоЭтапа
	|ИЗ
	|	ВТЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства.СтруктутрныеЕдиницы КАК ЭтапыПроизводстваСтруктутрныеЕдиницы
	|		ПО (ЭтапыПроизводстваСтруктутрныеЕдиницы.Ссылка = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ЗавершениеПроизводства))
	|			И (ЭтапыПроизводстваСтруктутрныеЕдиницы.ПоУмолчанию)
	|ГДЕ
	|	(ЗаказПокупателяЗапасы.Спецификация <> ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
	|			ИЛИ ЗаказПокупателяЗапасы.Номенклатура.СпособПополнения = ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Производство)
	|			ИЛИ ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяЗапасы.Ссылка,
	|	ЗаказПокупателяЗапасы.Номенклатура,
	|	ЗаказПокупателяЗапасы.Характеристика,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения,
	|	ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ,
	|	ЗаказПокупателяЗапасы.Спецификация,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЗаказПокупателяЗапасы.Спецификация.ВидПроизводства <> ЗНАЧЕНИЕ(Справочник.ВидыПроизводства.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ, ЛОЖЬ),
	|	ЗаказПокупателяЗапасы.Партия,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВЫБОР
	|						КОГДА ЗаказПокупателяЗапасы.Спецификация.ВидПроизводства <> ЗНАЧЕНИЕ(Справочник.ВидыПроизводства.ПустаяСсылка)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ, ЛОЖЬ)
	|				И &ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка)
	|			ТОГДА ЕСТЬNULL(ЭтапыПроизводстваСтруктутрныеЕдиницы.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка)
	|				ТОГДА ЗаказПокупателяЗапасы.Количество
	|			ИНАЧЕ ЗаказПокупателяЗапасы.Количество - ЗаказПокупателяЗапасы.Резерв
	|		КОНЕЦ) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Документы.ЗаказПокупателя.ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(МассивЗаказов, Запрос.МенеджерВременныхТаблиц, Ложь);
	
	Если ОснованиеВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		Запрос.Текст = Запрос.Текст + "; " +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
		|	ЗаказыОстатки.Характеристика КАК Характеристика,
		|	СУММА(ЗаказыОстатки.КоличествоОстаток) КАК КоличествоОстаток
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
		|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
		|		ЗапасыОстатки.Характеристика КАК Характеристика,
		|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
		|	ИЗ
		|		РегистрНакопления.Запасы.Остатки(
		|				,
		|				ЗаказПокупателя В (&ДанныеЗаполнения)
		|					И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)) КАК ЗапасыОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РазмещениеОстатки.ЗаказПокупателя,
		|		РазмещениеОстатки.Номенклатура,
		|		РазмещениеОстатки.Характеристика,
		|		РазмещениеОстатки.КоличествоОстаток
		|	ИЗ
		|		РегистрНакопления.РазмещениеЗаказов.Остатки(
		|				,
		|				ЗаказПокупателя В (&ДанныеЗаполнения)
		|					И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)) КАК РазмещениеОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДвиженияДокументаРазмещениеЗаказов.ЗаказПокупателя,
		|		ДвиженияДокументаРазмещениеЗаказов.Номенклатура,
		|		ДвиженияДокументаРазмещениеЗаказов.Характеристика,
		|		ВЫБОР
		|			КОГДА ДвиженияДокументаРазмещениеЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА ЕСТЬNULL(ДвиженияДокументаРазмещениеЗаказов.Количество, 0)
		|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаРазмещениеЗаказов.Количество, 0)
		|		КОНЕЦ
		|	ИЗ
		|		РегистрНакопления.РазмещениеЗаказов КАК ДвиженияДокументаРазмещениеЗаказов
		|	ГДЕ
		|		ДвиженияДокументаРазмещениеЗаказов.Регистратор = &Ссылка
		|		И ДвиженияДокументаРазмещениеЗаказов.ЗаказПокупателя В(&ДанныеЗаполнения)) КАК ЗаказыОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыОстатки.ЗаказПокупателя,
		|	ЗаказыОстатки.Номенклатура,
		|	ЗаказыОстатки.Характеристика
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЗаказыОстатки.КоличествоОстаток) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказПокупателяМатериалы.Ссылка КАК ЗаказПокупателя,
		|	МИНИМУМ(ЗаказПокупателяМатериалы.НомерСтроки) КАК НомерСтроки,
		|	ЗаказПокупателяМатериалы.Номенклатура КАК Номенклатура,
		|	ЗаказПокупателяМатериалы.Характеристика КАК Характеристика,
		|	ЗаказПокупателяМатериалы.Партия КАК Партия,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
		|			ТОГДА 1
		|		ИНАЧЕ ЗаказПокупателяМатериалы.ЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ КАК Коэффициент,
		|	ЗаказПокупателяМатериалы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЗаказПокупателяМатериалы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	СУММА(ВЫБОР
		|			КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка)
		|				ТОГДА ЗаказПокупателяМатериалы.Количество
		|			ИНАЧЕ ЗаказПокупателяМатериалы.Количество
		|		КОНЕЦ) КАК Количество,
		|	ЕСТЬNULL(ЭтапыПроизводстваСтруктутрныеЕдиницы.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ПодразделениеЗавершающегоЭтапа
		|ИЗ
		|	Документ.ЗаказПокупателя.Материалы КАК ЗаказПокупателяМатериалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства.СтруктутрныеЕдиницы КАК ЭтапыПроизводстваСтруктутрныеЕдиницы
		|		ПО (ЭтапыПроизводстваСтруктутрныеЕдиницы.Ссылка = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ЗавершениеПроизводства))
		|			И (ЭтапыПроизводстваСтруктутрныеЕдиницы.ПоУмолчанию)
		|ГДЕ
		|	ЗаказПокупателяМатериалы.Ссылка В(&ДанныеЗаполнения)
		|	И (ЗаказПокупателяМатериалы.Номенклатура.СпособПополнения = ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Производство)
		|			ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка))
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПокупателяМатериалы.Ссылка,
		|	ЗаказПокупателяМатериалы.Номенклатура,
		|	ЗаказПокупателяМатериалы.Характеристика,
		|	ЗаказПокупателяМатериалы.Партия,
		|	ЗаказПокупателяМатериалы.ЕдиницаИзмерения,
		|	ЗаказПокупателяМатериалы.Номенклатура.ТипНоменклатуры,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
		|			ТОГДА 1
		|		ИНАЧЕ ЗаказПокупателяМатериалы.ЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ,
		|	ЕСТЬNULL(ЭтапыПроизводстваСтруктутрныеЕдиницы.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР
		|			КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка)
		|				ТОГДА ЗаказПокупателяМатериалы.Количество
		|			ИНАЧЕ ЗаказПокупателяМатериалы.Количество - ЗаказПокупателяМатериалы.Резерв
		|		КОНЕЦ) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	ИначеЕсли ОснованиеВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку Тогда
		
		Запрос.Текст = Запрос.Текст + "; " +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
		|	ЗаказыОстатки.Характеристика КАК Характеристика,
		|	СУММА(ЗаказыОстатки.КоличествоОстаток) КАК КоличествоОстаток
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
		|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
		|		ЗапасыОстатки.Характеристика КАК Характеристика,
		|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
		|	ИЗ
		|		РегистрНакопления.Запасы.Остатки(
		|				,
		|				ЗаказПокупателя В (&ДанныеЗаполнения)
		|					И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)) КАК ЗапасыОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РазмещениеОстатки.ЗаказПокупателя,
		|		РазмещениеОстатки.Номенклатура,
		|		РазмещениеОстатки.Характеристика,
		|		РазмещениеОстатки.КоличествоОстаток
		|	ИЗ
		|		РегистрНакопления.РазмещениеЗаказов.Остатки(
		|				,
		|				ЗаказПокупателя В (&ДанныеЗаполнения)
		|					И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)) КАК РазмещениеОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДвиженияДокументаПотребностьВЗапасах.ЗаказПокупателя,
		|		ДвиженияДокументаПотребностьВЗапасах.Номенклатура,
		|		ДвиженияДокументаПотребностьВЗапасах.Характеристика,
		|		ДвиженияДокументаПотребностьВЗапасах.Количество
		|	ИЗ
		|		РегистрНакопления.ПотребностьВЗапасах КАК ДвиженияДокументаПотребностьВЗапасах
		|	ГДЕ
		|		ДвиженияДокументаПотребностьВЗапасах.Регистратор = &Ссылка
		|		И ДвиженияДокументаПотребностьВЗапасах.ЗаказПокупателя В(&ДанныеЗаполнения)
		|		И ДвиженияДокументаПотребностьВЗапасах.ТипДвижения = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДвиженияДокументаПотребностьВЗапасахОбороты.ЗаказПокупателя,
		|		ДвиженияДокументаПотребностьВЗапасахОбороты.Номенклатура,
		|		ДвиженияДокументаПотребностьВЗапасахОбороты.Характеристика,
		|		-ДвиженияДокументаПотребностьВЗапасахОбороты.КоличествоПриход
		|	ИЗ
		|		РегистрНакопления.ПотребностьВЗапасах.Обороты(
		|				,
		|				,
		|				Период,
		|				ЗаказПокупателя В (&ДанныеЗаполнения)
		|					И ТипДвижения = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка)) КАК ДвиженияДокументаПотребностьВЗапасахОбороты) КАК ЗаказыОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыОстатки.ЗаказПокупателя,
		|	ЗаказыОстатки.Номенклатура,
		|	ЗаказыОстатки.Характеристика
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЗаказыОстатки.КоличествоОстаток) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказПокупателяМатериалыЗаказчика.Ссылка КАК ЗаказПокупателя,
		|	МИНИМУМ(ЗаказПокупателяМатериалыЗаказчика.НомерСтроки) КАК НомерСтроки,
		|	ЗаказПокупателяМатериалыЗаказчика.Номенклатура КАК Номенклатура,
		|	ЗаказПокупателяМатериалыЗаказчика.Характеристика КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК Партия,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяМатериалыЗаказчика.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
		|			ТОГДА 1
		|		ИНАЧЕ ЗаказПокупателяМатериалыЗаказчика.ЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ КАК Коэффициент,
		|	ЗаказПокупателяМатериалыЗаказчика.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЗаказПокупателяМатериалыЗаказчика.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	СУММА(ВЫБОР
		|			КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка)
		|				ТОГДА ЗаказПокупателяМатериалыЗаказчика.Количество
		|			ИНАЧЕ ЗаказПокупателяМатериалыЗаказчика.Количество
		|		КОНЕЦ) КАК Количество,
		|	ЕСТЬNULL(ЭтапыПроизводстваСтруктутрныеЕдиницы.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ПодразделениеЗавершающегоЭтапа,
		|	ЗаказПокупателяМатериалыЗаказчика.Номенклатура.Склад КАК СтруктурнаяЕдиница
		|ИЗ
		|	Документ.ЗаказПокупателя.МатериалыЗаказчика КАК ЗаказПокупателяМатериалыЗаказчика
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства.СтруктутрныеЕдиницы КАК ЭтапыПроизводстваСтруктутрныеЕдиницы
		|		ПО (ЭтапыПроизводстваСтруктутрныеЕдиницы.Ссылка = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ЗавершениеПроизводства))
		|			И (ЭтапыПроизводстваСтруктутрныеЕдиницы.ПоУмолчанию)
		|ГДЕ
		|	ЗаказПокупателяМатериалыЗаказчика.Ссылка В(&ДанныеЗаполнения)
		|	И ЗаказПокупателяМатериалыЗаказчика.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПокупателяМатериалыЗаказчика.Ссылка,
		|	ЗаказПокупателяМатериалыЗаказчика.Номенклатура,
		|	ЗаказПокупателяМатериалыЗаказчика.Характеристика,
		|	ЗаказПокупателяМатериалыЗаказчика.ЕдиницаИзмерения,
		|	ЗаказПокупателяМатериалыЗаказчика.Номенклатура.ТипНоменклатуры,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяМатериалыЗаказчика.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
		|			ТОГДА 1
		|		ИНАЧЕ ЗаказПокупателяМатериалыЗаказчика.ЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ,
		|	ЕСТЬNULL(ЭтапыПроизводстваСтруктутрныеЕдиницы.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)),
		|	ЗаказПокупателяМатериалыЗаказчика.Номенклатура.Склад
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЗаказПокупателяМатериалыЗаказчика.Количество) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДанныеЗаполнения", МассивЗаказов);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаОстатков = МассивРезультатов[0].Выгрузить();
	ТаблицаОстатков.Индексы.Добавить("ЗаказПокупателя, Номенклатура, Характеристика");
	
	Продукция.Очистить();
	Запасы.Очистить();
	РаспределениеЗапасов.Очистить();
	Операции.Очистить();
	СборкаВПодразделении = (ВидОперации=Перечисления.ВидыОперацийЗаказНаПроизводство.Сборка
	И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница, "ТипСтруктурнойЕдиницы")=Перечисления.ТипыСтруктурныхЕдиниц.Подразделение);
	Если ТаблицаОстатков.Количество() > 0 Тогда
		
		Выборка = МассивРезультатов[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтруктураДляПоиска = Новый Структура;
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", Выборка.ЗаказПокупателя);
			СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
			СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
			
			МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураДляПоиска);
			Если МассивСтрокОстатков.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ЭтотОбъект[ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Спецификация) Тогда
				НоваяСтрока.Спецификация = УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(НоваяСтрока.Номенклатура, НоваяСтрока.Характеристика);
			КонецЕсли;
			
			КоличествоКСписанию = Выборка.Количество * Выборка.Коэффициент;
			МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоКСписанию;
			Если МассивСтрокОстатков[0].КоличествоОстаток < 0 Тогда
				
				НоваяСтрока.Количество = (КоличествоКСписанию + МассивСтрокОстатков[0].КоличествоОстаток) / Выборка.Коэффициент;
				
			КонецЕсли;
			
			Если МассивСтрокОстатков[0].КоличествоОстаток <= 0 Тогда
				ТаблицаОстатков.Удалить(МассивСтрокОстатков[0]);
			КонецЕсли;
			
			Если ИмяТабличнойЧасти = "Продукция"
				И СборкаВПодразделении
				И Выборка.ИспользуютсяЭтапы
				И НЕ ЗначениеЗаполнено(НоваяСтрока.ПодразделениеЗавершающегоЭтапа) Тогда
				НоваяСтрока.ПодразделениеЗавершающегоЭтапа = СтруктурнаяЕдиница;
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОснованиеВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		ТаблицаОстатков = МассивРезультатов[2].Выгрузить();
		ТаблицаОстатков.Индексы.Добавить("ЗаказПокупателя, Номенклатура, Характеристика");
		
		Выборка = МассивРезультатов[3].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ИмяТабличнойЧасти = "Запасы"
				И Выборка.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураДляПоиска = Новый Структура;
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", Выборка.ЗаказПокупателя);
			СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
			СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
			
			МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураДляПоиска);
			Если МассивСтрокОстатков.Количество() = 0 Тогда
				
				НоваяСтрока = ЭтотОбъект[ИмяТабличнойЧасти].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				
				НоваяСтрока.Спецификация = УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(НоваяСтрока.Номенклатура, НоваяСтрока.Характеристика);
				
			ИначеЕсли (МассивСтрокОстатков[0].КоличествоОстаток / Выборка.Коэффициент) = Выборка.Количество Тогда
				
				Продолжить;
				
			ИначеЕсли (МассивСтрокОстатков[0].КоличествоОстаток / Выборка.Коэффициент) > Выборка.Количество Тогда
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - Выборка.Количество * Выборка.Коэффициент;
				Продолжить;
				
			ИначеЕсли (МассивСтрокОстатков[0].КоличествоОстаток / Выборка.Коэффициент) < Выборка.Количество Тогда
				
				КоличествоКСписанию = -1 * (МассивСтрокОстатков[0].КоличествоОстаток / Выборка.Коэффициент - Выборка.Количество);
				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				
				НоваяСтрока = ЭтотОбъект[ИмяТабличнойЧасти].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				
				НоваяСтрока.Количество = (КоличествоКСписанию + МассивСтрокОстатков[0].КоличествоОстаток) / Выборка.Коэффициент;
				
				НоваяСтрока.Спецификация = УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(НоваяСтрока.Номенклатура, НоваяСтрока.Характеристика);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОснованиеВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку Тогда
		
		Если ИмяТабличнойЧасти="Запасы" Тогда
			ИмяТабличнойЧастиМатериалы = "Продукция";
		Иначе
			ИмяТабличнойЧастиМатериалы = "Запасы";
		КонецЕсли; 
		
		ТаблицаОстатков = МассивРезультатов[2].Выгрузить();
		ТаблицаОстатков.Индексы.Добавить("ЗаказПокупателя, Номенклатура, Характеристика");
		
		Выборка = МассивРезультатов[3].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтруктураДляПоиска = Новый Структура;
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", Выборка.ЗаказПокупателя);
			СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
			СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
			
			МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураДляПоиска);
			Если МассивСтрокОстатков.Количество() = 0 Тогда
				Остаток = 0;
			Иначе
				Остаток = МассивСтрокОстатков[0].КоличествоОстаток / Выборка.Коэффициент;
			КонецЕсли;
			Если Остаток<=0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Остаток<Выборка.Количество Тогда
				КСписанию = Остаток;
			Иначе
				КСписанию = Выборка.Количество;
			КонецЕсли; 
			
			НоваяСтрока = ЭтотОбъект[ИмяТабличнойЧастиМатериалы].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Спецификация = УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(НоваяСтрока.Номенклатура, НоваяСтрока.Характеристика);
			НоваяСтрока.Количество = КСписанию;
			МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КСписанию * Выборка.Коэффициент;
			
		КонецЦикла;
		
		Если ИмяТабличнойЧастиМатериалы="Запасы" Тогда
			ПроизводствоСервер.ЗаполнитьЭтапыМатериалов(Продукция.Выгрузить(), Запасы);
		КонецЕсли; 
		
	ИначеЕсли Продукция.Количество() > 0 Тогда
		
		СтекСпецификацийУзлов = Новый Массив;
		ЗаполнитьЗапасыПоСпецификации(СтекСпецификацийУзлов);
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьТехоперации") И Константы.АвтоматическиПланироватьОперацийЗаказомНаПроизводство.Получить() Тогда
		ЗаполнитьОперацииПоСпецификации();
	КонецЕсли; 
	Если РучноеРаспределение И Запасы.Количество()>0 Тогда
		ПроизводствоСервер.РаспределитьМатериалы(Продукция, Запасы, РаспределениеЗапасов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДозаполнитьПоУмолчанию()
	
	Если Не ЗначениеЗаполнено(СостояниеЗаказа) Тогда
		ЭтотОбъект.СостояниеЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаНаПроизводство();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗапасыПоСпецификации(СтекСпецификацийУзлов, ТаблицаУзлы = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПродукция.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПродукция.Количество КАК Количество,
	|	ТаблицаПродукция.Коэффициент КАК Коэффициент,
	|	ТаблицаПродукция.Спецификация КАК Спецификация,
	|	ТаблицаПродукция.Этап КАК Этап,
	|	ТаблицаПродукция.ЗаказПокупателя КАК ЗаказПокупателя
	|ПОМЕСТИТЬ ВременнаяТаблицаПродукция
	|ИЗ
	|	&ТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.Спецификация <> ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)";
	
	Если ТаблицаУзлы = Неопределено Тогда
		Запасы.Очистить();
		ТаблицаПродукция = Продукция.Выгрузить();
		ОписаниеТиповЧисло = Новый ОписаниеТипов("Число", , ,Новый КвалификаторыЧисла(10,3));
		ТаблицаПродукция.Колонки.Добавить("Коэффициент", ОписаниеТиповЧисло);
		ТаблицаПродукция.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
		Для каждого СтрокаПродукция Из ТаблицаПродукция Цикл
			Если ЗначениеЗаполнено(СтрокаПродукция.ЕдиницаИзмерения)
				И ТипЗнч(СтрокаПродукция.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
				СтрокаПродукция.Коэффициент = СтрокаПродукция.ЕдиницаИзмерения.Коэффициент;
			Иначе
				СтрокаПродукция.Коэффициент = 1;
			КонецЕсли;
		КонецЦикла;
		ТаблицаУзлы = ТаблицаПродукция.СкопироватьКолонки("НомерСтроки, Количество, Коэффициент, Спецификация, ЗаказПокупателя, Этап");
		Запрос.УстановитьПараметр("ТаблицаПродукция", ТаблицаПродукция);
	Иначе
		Запрос.УстановитьПараметр("ТаблицаПродукция", ТаблицаУзлы);
	КонецЕсли;
	Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МИНИМУМ(ТаблицаПродукция.НомерСтроки) КАК НомерСтрокиПродукции,
	|	ТаблицаПродукция.Спецификация КАК СпецификацияПродукции,
	|	МИНИМУМ(ТаблицаМатериалы.НомерСтроки) КАК НомерСтрокиСостава,
	|	ТаблицаМатериалы.ТипСтрокиСостава КАК ТипСтрокиСостава,
	|	ВЫБОР
	|		КОГДА НЕ ФункциональнаяОпцияИспользоватьЭтапыПроизводства.Значение
	|				ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
	|		КОГДА ТаблицаПродукция.Этап <> ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
	|			ТОГДА ТаблицаПродукция.Этап
	|		ИНАЧЕ ТаблицаМатериалы.Этап
	|	КОНЕЦ КАК Этап,
	|	ТаблицаМатериалы.Номенклатура КАК Номенклатура,
	|	ТаблицаМатериалы.Номенклатура.Склад КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ИспользоватьХарактеристики.Значение
	|			ТОГДА ТаблицаМатериалы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	СУММА(ТаблицаМатериалы.Количество / ТаблицаМатериалы.КоличествоПродукции * ТаблицаПродукция.Коэффициент * ТаблицаПродукция.Количество) КАК Количество,
	|	ТаблицаМатериалы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаМатериалы.ТипСтрокиСостава = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокСоставаСпецификации.Узел)
	|				И ТИПЗНАЧЕНИЯ(ТаблицаМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|				И ТаблицаМатериалы.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТаблицаМатериалы.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Коэффициент,
	|	ТаблицаМатериалы.ДоляСтоимости КАК ДоляСтоимости,
	|	ВЫБОР
	|		КОГДА ТаблицаМатериалы.Спецификация = ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(СпецификацииПоУмолчанию.Спецификация, ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка))
	|		ИНАЧЕ ТаблицаМатериалы.Спецификация
	|	КОНЕЦ КАК Спецификация,
	|	ТаблицаПродукция.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Спецификации.Состав КАК ТаблицаМатериалы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПоУмолчанию КАК СпецификацииПоУмолчанию
	|			ПО ТаблицаМатериалы.Номенклатура = СпецификацииПоУмолчанию.Номенклатура
	|				И ТаблицаМатериалы.Характеристика = СпецификацииПоУмолчанию.Характеристика
	|		ПО ТаблицаПродукция.Спецификация = ТаблицаМатериалы.Ссылка,
	|	Константа.ФункциональнаяОпцияИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	|	Константа.ФункциональнаяОпцияИспользоватьЭтапыПроизводства КАК ФункциональнаяОпцияИспользоватьЭтапыПроизводства
	|ГДЕ
	|	ТаблицаМатериалы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Спецификация,
	|	ТаблицаМатериалы.ТипСтрокиСостава,
	|	ВЫБОР
	|		КОГДА НЕ ФункциональнаяОпцияИспользоватьЭтапыПроизводства.Значение
	|				ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
	|		КОГДА ТаблицаПродукция.Этап <> ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
	|			ТОГДА ТаблицаПродукция.Этап
	|		ИНАЧЕ ТаблицаМатериалы.Этап
	|	КОНЕЦ,
	|	ТаблицаМатериалы.Номенклатура,
	|	ТаблицаМатериалы.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаМатериалы.ТипСтрокиСостава = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокСоставаСпецификации.Узел)
	|				И ТИПЗНАЧЕНИЯ(ТаблицаМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|				И ТаблицаМатериалы.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТаблицаМатериалы.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ТаблицаМатериалы.ДоляСтоимости,
	|	ВЫБОР
	|		КОГДА ТаблицаМатериалы.Спецификация = ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(СпецификацииПоУмолчанию.Спецификация, ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка))
	|		ИНАЧЕ ТаблицаМатериалы.Спецификация
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИспользоватьХарактеристики.Значение
	|			ТОГДА ТаблицаМатериалы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаПродукция.ЗаказПокупателя,
	|	ТаблицаМатериалы.Номенклатура.Склад
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиПродукции,
	|	НомерСтрокиСостава";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипСтрокиСостава = Перечисления.ТипыСтрокСоставаСпецификации.Узел Тогда
			ТаблицаУзлы.Очистить();
			Если НЕ СтекСпецификацийУзлов.Найти(Выборка.Спецификация) = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'При попытке заполнить табличную часть Материалы по спецификации,
									|обнаружено рекурсивное вхождение элемента'")+" "+Выборка.Номенклатура+" "+НСтр("ru = 'в спецификации'")+" "+Выборка.СпецификацияПродукции+"
									|Операция не выполнена!";
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			СтекСпецификацийУзлов.Добавить(Выборка.Спецификация);
			НоваяСтрока = ТаблицаУзлы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			ЗаполнитьЗапасыПоСпецификации(СтекСпецификацийУзлов, ТаблицаУзлы);
		Иначе
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЕсли;
	КонецЦикла;
	
	СтекСпецификацийУзлов.Очистить();
	Запасы.Свернуть("Этап, Номенклатура, Характеристика, Партия, ЕдиницаИзмерения, Спецификация, ЗаказПокупателя", "Количество, Резерв, ДоляСтоимости");
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье"));
	
	Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
		
		СтрокаТабличнойЧасти.Партия = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура)
		, НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура,СтатусПартии)
		, Неопределено);
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиница) И ПоложениеСклада=Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = СтруктурнаяЕдиницаРезерв;
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьОперацииПоСпецификации() Экспорт  
	
	Операции.Очистить();
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьТехоперации") Тогда
		Возврат;
	КонецЕсли; 
	
	ПроизводствоСервер.ЗаполнитьКлючиСвязи(Продукция);
	
	Операции.Очистить();
	Если ПоложениеИсполнителя=Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		СоставБригады.Очистить();
	КонецЕсли; 
	
	ТаблицаПродукция = Продукция.Выгрузить();
	ИспользоватьРезервирование = Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Запасы", ТаблицаПродукция.Скопировать(, "НомерСтроки, Номенклатура, Спецификация"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.Спецификация КАК Спецификация,
	|	ТабличнаяЧасть.Спецификация КАК ВложеннаяСпецификация,
	|	ИСТИНА КАК ЭтоУзел,
	|	ТабличнаяЧасть.Номенклатура КАК Операция,
	|	1 КАК НормаВремени
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	&Запасы КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Спецификация <> ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК Уровень,
	|	МИНИМУМ(ВременнаяТаблица.НомерСтроки) КАК Порядок,
	|	0 КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка) КАК Этап,
	|	ВременнаяТаблица.Спецификация КАК Спецификация,
	|	ВременнаяТаблица.ВложеннаяСпецификация КАК ВложеннаяСпецификация,
	|	ВременнаяТаблица.ЭтоУзел КАК ЭтоУзел,
	|	ВременнаяТаблица.Операция КАК Операция,
	|	ВременнаяТаблица.НормаВремени КАК НормаВремени
	|ПОМЕСТИТЬ ТаблицаОпераций
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблица.Спецификация,
	|	ВременнаяТаблица.Операция,
	|	ВременнаяТаблица.ВложеннаяСпецификация,
	|	ВременнаяТаблица.ЭтоУзел,
	|	ВременнаяТаблица.НормаВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВременнаяТаблица";
	Запрос.Выполнить();
	ПроизводствоСервер.РазузловатьОперации(Запрос, Неопределено, "Продукция");
	
	Запрос.УстановитьПараметр("Продукция", ТаблицаПродукция);
	Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Продукция.НомерСтроки КАК НомерСтроки,
	|	Продукция.КлючСвязи КАК КлючСвязиПродукция,
	|	Продукция.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВЫРАЗИТЬ(Продукция.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	Продукция.Спецификация КАК Спецификация,
	|	Продукция.Количество КАК Количество,
	|	Продукция.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ Продукция
	|ИЗ
	|	&Продукция КАК Продукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Продукция.ЗаказПокупателя КАК ЗаказПокупателя,
	|	Продукция.НомерСтроки КАК НомерСтроки,
	|	Продукция.КлючСвязиПродукция КАК КлючСвязиПродукция,
	|	Продукция.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияИспользоватьЭтапыПроизводства.Значение
	|				И &ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка)
	|			ТОГДА ТаблицаОпераций.Этап
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
	|	КОНЕЦ КАК Этап,
	|	ТаблицаОпераций.Операция КАК Операция,
	|	ВЫБОР
	|		КОГДА ТаблицаОпераций.Операция ССЫЛКА Справочник.Номенклатура
	|			ТОГДА ТаблицаОпераций.Операция.ЕдиницаИзмерения
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаОпераций.Операция ССЫЛКА Справочник.Номенклатура
	|			ТОГДА ТаблицаОпераций.Операция.ФиксированнаяСтоимость
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ФиксированнаяСтоимость,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Продукция.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ВЫРАЗИТЬ(Продукция.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	ЕСТЬNULL(ТаблицаОпераций.НормаВремени, 0) * ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Продукция.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|				И Продукция.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(Продукция.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК НормаВремени,
	|	ТаблицаОпераций.Уровень КАК Уровень,
	|	ТаблицаОпераций.Порядок КАК Порядок,
	|	ТаблицаОпераций.НомерСтроки КАК НомерСтрокиОперации
	|ПОМЕСТИТЬ Операции
	|ИЗ
	|	Продукция КАК Продукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОпераций КАК ТаблицаОпераций
	|		ПО Продукция.Спецификация = ТаблицаОпераций.Спецификация,
	|	Константа.ФункциональнаяОпцияИспользоватьЭтапыПроизводства КАК ФункциональнаяОпцияИспользоватьЭтапыПроизводства
	|ГДЕ
	|	Продукция.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|	И НЕ ТаблицаОпераций.Операция ЕСТЬ NULL
	|	И ТаблицаОпераций.Операция <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Операции.ЗаказПокупателя КАК ЗаказПокупателя,
	|	Операции.НомерСтроки КАК НомерСтроки,
	|	Операции.КлючСвязиПродукция КАК КлючСвязиПродукция,
	|	Операции.Количество КАК КоличествоПлан,
	|	Операции.Этап КАК Этап,
	|	Операции.Операция КАК Операция,
	|	Операции.ФиксированнаяСтоимость КАК ФиксированнаяСтоимость,
	|	Операции.Коэффициент КАК Коэффициент,
	|	Операции.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Операции.НормаВремени КАК НормаВремени
	|ИЗ
	|	Операции КАК Операции
	|
	|УПОРЯДОЧИТЬ ПО
	|	Операции.НомерСтроки,
	|	Операции.Уровень,
	|	Операции.Порядок,
	|	Операции.НомерСтрокиОперации";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КлючСвязи = 0;
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Операции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если НЕ ИспользоватьРезервирование Тогда
			НоваяСтрока.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
		КонецЕсли;
		Если НЕ ПоложениеИсполнителя=Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			НоваяСтрока.Исполнитель = Исполнитель;
		КонецЕсли; 
		Если ПоложениеСтруктурнойЕдиницыОпераций=Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			НоваяСтрока.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
		Иначе
			НоваяСтрока.СтруктурнаяЕдиница = СтруктурнаяЕдиницаОпераций;
		КонецЕсли;
		НоваяСтрока.Нормочасы = НоваяСтрока.НормаВремени * НоваяСтрока.КоличествоПлан;
		КлючСвязи = КлючСвязи + 1;
		НоваяСтрока.КлючСвязи = КлючСвязи;
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПривестиДанныеКСогласованномуСостоянию()
	
	Если СостояниеЗаказа <> Справочники.СостоянияЗаказовНаПроизводство.Завершен Тогда
		ЭтотОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктурнаяЕдиницаШапки(ТабличнаяЧасть)
	
	ТекСтруктурнаяЕдиница = СтруктурнаяЕдиницаРезерв;
	
	Если ТабличнаяЧасть.Количество()=0 Тогда
		Возврат ТекСтруктурнаяЕдиница;
	КонецЕсли; 
	
	ТекСтруктурнаяЕдиница = ТабличнаяЧасть[0].СтруктурнаяЕдиница;
	
	Если ТабличнаяЧасть.Количество()=1 Тогда
		Возврат ТекСтруктурнаяЕдиница;
	КонецЕсли; 
	
	ТаблицаСтруктурныеЕдиницы = ТабличнаяЧасть.ВыгрузитьКолонки("СтруктурнаяЕдиница");
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
			Продолжить;
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(ТаблицаСтруктурныеЕдиницы.Добавить(), СтрокаТабличнойЧасти);
	КонецЦикла; 
	ТаблицаСтруктурныеЕдиницы.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаСтруктурныеЕдиницы Цикл
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЦикла;
	ТаблицаСтруктурныеЕдиницы.Свернуть("СтруктурнаяЕдиница", "Количество");
	
	Если ТаблицаСтруктурныеЕдиницы.Количество() < 2 Тогда
		Возврат ТекСтруктурнаяЕдиница;
	КонецЕсли;
	
	ТаблицаСтруктурныеЕдиницы.Сортировать("Количество Убыв");
	
	Если ТаблицаСтруктурныеЕдиницы[0].Количество = ТаблицаСтруктурныеЕдиницы[1].Количество Тогда
		Возврат ТекСтруктурнаяЕдиница;
	КонецЕсли;
	
	ТекСтруктурнаяЕдиница = ТаблицаСтруктурныеЕдиницы[0].СтруктурнаяЕдиница;
	
	Возврат ТекСтруктурнаяЕдиница;
	
КонецФункции

Функция ЗаказПокупателяШапки(ТабличнаяЧасть)
	
	ТекЗаказПокупателя = ЗаказПокупателя;
	
	Если ТабличнаяЧасть.Количество()=0 Тогда
		Возврат ТекЗаказПокупателя;
	КонецЕсли; 
	
	ТекЗаказПокупателя = ТабличнаяЧасть[0].ЗаказПокупателя;
	
	Если ТабличнаяЧасть.Количество()=1 Тогда
		Возврат ТекЗаказПокупателя;
	КонецЕсли; 
	
	ТаблицаЗаказы = ТабличнаяЧасть.Выгрузить(, "ЗаказПокупателя");
	ТаблицаЗаказы.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Для Каждого ТекСтрока Из ТаблицаЗаказы Цикл
		ТекСтрока.Количество = 1;
	КонецЦикла;
	ТаблицаЗаказы.Свернуть("ЗаказПокупателя", "Количество");
	
	Если ТаблицаЗаказы.Количество() < 2 Тогда
		Возврат ТекЗаказПокупателя;
	КонецЕсли;
	
	ТаблицаЗаказы.Сортировать("Количество Убыв");
	
	Если ТаблицаЗаказы[0].Количество = ТаблицаЗаказы[1].Количество Тогда
		Возврат ТекЗаказПокупателя;
	КонецЕсли;
	
	ТекЗаказПокупателя = ТаблицаЗаказы[0].ЗаказПокупателя;
	
	Возврат ТекЗаказПокупателя;
	
КонецФункции

Процедура ПроверитьЗаказыТЧ(Отказ)
	
	Заказы = Новый Массив;
	Для каждого СтрокаТабличнойЧасти Из Продукция Цикл
		Если Заказы.Найти(СтрокаТабличнойЧасти.ЗаказПокупателя)=Неопределено Тогда
			Заказы.Добавить(СтрокаТабличнойЧасти.ЗаказПокупателя);
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
		Если Заказы.Найти(СтрокаТабличнойЧасти.ЗаказПокупателя)=Неопределено Тогда
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			СтрШаблон(НСтр("ru = 'В строке №%1 табл. части ""Материалы"" используется заказ покупателя, отсутствующий в табл. части ""Продукция"".'"), СтрокаТабличнойЧасти.НомерСтроки),
			"Запасы",
			СтрокаТабличнойЧасти.НомерСтроки,
			"ЗаказПокупателя",
			Отказ);
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого СтрокаТабличнойЧасти Из Операции Цикл
		Если Заказы.Найти(СтрокаТабличнойЧасти.ЗаказПокупателя)=Неопределено Тогда
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			СтрШаблон(НСтр("ru = 'В строке №%1 табл. части ""Операции"" используется заказ покупателя, отсутствующий в табл. части ""Продукция"".'"), СтрокаТабличнойЧасти.НомерСтроки),
			"Операции",
			СтрокаТабличнойЧасти.НомерСтроки,
			"ЗаказПокупателя",
			Отказ);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Функция СтруктурнаяЕдиницаОперацийШапки()
	
	ТекСтруктурнаяЕдиница = СтруктурнаяЕдиницаОпераций;
	
	Если Операции.Количество()=0 Тогда
		Возврат ТекСтруктурнаяЕдиница;
	КонецЕсли; 
	
	ТекСтруктурнаяЕдиница = Операции[0].СтруктурнаяЕдиница;
	
	Если Операции.Количество()=1 Тогда
		Возврат ТекСтруктурнаяЕдиница;
	КонецЕсли; 
	
	ТаблицаСтруктурныеЕдиницы = Операции.Выгрузить(, "СтруктурнаяЕдиница");
	ТаблицаСтруктурныеЕдиницы.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Для Каждого ТекСтрока Из ТаблицаСтруктурныеЕдиницы Цикл
		ТекСтрока.Количество = 1;
	КонецЦикла;
	ТаблицаСтруктурныеЕдиницы.Свернуть("СтруктурнаяЕдиница", "Количество");
	
	Если ТаблицаСтруктурныеЕдиницы.Количество() < 2 Тогда
		Возврат ТекСтруктурнаяЕдиница;
	КонецЕсли;
	
	ТаблицаСтруктурныеЕдиницы.Сортировать("Количество Убыв");
	
	Если ТаблицаСтруктурныеЕдиницы[0].Количество = ТаблицаСтруктурныеЕдиницы[1].Количество Тогда
		Возврат ТекСтруктурнаяЕдиница;
	КонецЕсли;
	
	ТекСтруктурнаяЕдиница = ТаблицаСтруктурныеЕдиницы[0].СтруктурнаяЕдиница;
	
	Возврат ТекСтруктурнаяЕдиница;
	
КонецФункции

Функция ИсполнительШапки()
	
	ТекИсполнитель = Исполнитель;
	
	Если Операции.Количество()=0 Тогда
		Возврат ТекИсполнитель;
	КонецЕсли; 
	
	ТекИсполнитель = Операции[0].Исполнитель;
	
	Если Операции.Количество()=1 Тогда
		Возврат ТекИсполнитель;
	КонецЕсли; 
	
	ТаблицаИсполнитель = Операции.Выгрузить(, "Исполнитель");
	ТаблицаИсполнитель.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Для Каждого ТекСтрока Из ТаблицаИсполнитель Цикл
		ТекСтрока.Количество = 1;
	КонецЦикла;
	ТаблицаИсполнитель.Свернуть("Исполнитель", "Количество");
	
	Если ТаблицаИсполнитель.Количество() < 2 Тогда
		Возврат ТекИсполнитель;
	КонецЕсли;
	
	ТаблицаИсполнитель.Сортировать("Количество Убыв");
	
	Если ТаблицаИсполнитель[0].Количество = ТаблицаИсполнитель[1].Количество Тогда
		Возврат ТекИсполнитель;
	КонецЕсли;
	
	ТекИсполнитель = ТаблицаИсполнитель[0].Исполнитель;
	
	Возврат ТекИсполнитель;
	
КонецФункции

Процедура ПроверитьЗаполнениеЭтаповПроизводства(Отказ, ОтменаПроведения = Ложь)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЭтапыПроизводства") Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование таблицы продукции, использующей этапы производства
	Если ОтменаПроведения Тогда
		ТаблицаПродукции = Продукция.ВыгрузитьКолонки();
	Иначе
		ТаблицаПродукции = Продукция.Выгрузить();
	КонецЕсли; 
	ТаблицаПродукции.Колонки.Добавить("ИмяТЧ", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТаблицаПродукции.ЗаполнитьЗначения("Продукция", "ИмяТЧ");
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ВидОперации")<>Перечисления.ВидыОперацийЗаказНаПроизводство.Разборка Тогда
		ПроизводствоСервер.ДобавитьУдаленнуюПродукцию(Ссылка, ТаблицаПродукции, "Продукция");
	КонецЕсли; 
	ТаблицаПродукции.Колонки.Добавить("ЗаказНаПроизводство", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	ТаблицаПродукции.ЗаполнитьЗначения(Ссылка, "ЗаказНаПроизводство");
	Если ПоложениеЗаказаПокупателя<>Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		ТаблицаПродукции.ЗаполнитьЗначения(ЗаказПокупателя, "ЗаказПокупателя");
	КонецЕсли;
	МассивСпецификаций = Новый Массив;
	Для каждого СтрокаТабличнойЧасти Из ТаблицаПродукции Цикл
		Если ВидОперации=Перечисления.ВидыОперацийЗаказНаПроизводство.Разборка Тогда
			Прервать;
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) Тогда
			Продолжить;
		КонецЕсли; 
		Если МассивСпецификаций.Найти(СтрокаТабличнойЧасти.Спецификация)=Неопределено Тогда
			МассивСпецификаций.Добавить(СтрокаТабличнойЧасти.Спецификация);
		КонецЕсли; 
	КонецЦикла; 
	МассивСпецификаций = ПроизводствоСервер.СпецификацииСПоэтапнымПроизводством(МассивСпецификаций);
	ПроверяемаяПродукция = ТаблицаПродукции.СкопироватьКолонки();
	Для каждого СтрокаПродукция Из ТаблицаПродукции Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаПродукция.Спецификация) ИЛИ МассивСпецификаций.Найти(СтрокаПродукция.Спецификация)=Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(ПроверяемаяПродукция.Добавить(), СтрокаПродукция);
	КонецЦикла;
	
	// Поэтапное производство выполняется только на подразделениях
	Если ПроверяемаяПродукция.Количество()>0 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница, "ТипСтруктурнойЕдиницы")<>Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
		ЭтотОбъект,
		НСтр("ru = 'Изготовителем при поэтапном производстве может быть только подразделение'"),
		,
		,
		"СтруктурнаяЕдиница",
		Отказ);
	КонецЕсли; 
	
	// Запрет дублирования продукции
	ТаблицаКонтроляДублей = ПроверяемаяПродукция.Скопировать();
	ТаблицаКонтроляДублей.Колонки.Добавить("КоличествоСтрок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0)));
	ТаблицаКонтроляДублей.ЗаполнитьЗначения(1, "КоличествоСтрок");
	ТаблицаКонтроляДублей.Свернуть("ЗаказПокупателя, ЗаказНаПроизводство, Номенклатура, Характеристика, Партия", "КоличествоСтрок");
	Для каждого СтрокаПродукция Из ТаблицаКонтроляДублей Цикл
		Если СтрокаПродукция.КоличествоСтрок>1 Тогда
			СтруктураОтбора = Новый Структура("ЗаказПокупателя, ЗаказНаПроизводство, Номенклатура, Характеристика, Партия");
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаПродукция);
			СтрокиТЧ = ТаблицаПродукции.НайтиСтроки(СтруктураОтбора);
			Для каждого НайденнаяСтрока Из СтрокиТЧ Цикл
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				СтрШаблон(НСтр("ru = 'Дублирующаяся продукция, использующая этапы производства, в строке %1'"), НайденнаяСтрока.НомерСтроки),
				"Продукция",
				НайденнаяСтрока.НомерСтроки,
				"Номенклатура",
				Отказ);
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
	
	Если ПолучитьФункциональнуюОпцию("ВыполнениеЭтаповРазнымиПодразделениями") И НЕ ОтменаПроведения Тогда
		Для каждого СтрокаПродукция Из ПроверяемаяПродукция Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаПродукция.ПодразделениеЗавершающегоЭтапа) Тогда
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				СтрШаблон(НСтр("ru = 'Не заполнена колонка ""Завершающее подразделение""  в строке %1 списка ""Продукция""'"), СтрокаПродукция.НомерСтроки),
				"Продукция",
				СтрокаПродукция.НомерСтроки,
				"ПодразделениеЗавершающегоЭтапа",
				Отказ);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	// Проверка уникальности завершающего подразделения и количества продукции
	ПроизводствоСервер.ПроверкаПоэтапногоПроизводства(ЭтотОбъект, ПроверяемаяПродукция, Отказ);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли