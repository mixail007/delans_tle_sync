#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Дата");
	Поля.Добавить("ТипСобытия");
	Поля.Добавить("ВходящееИсходящееСобытие");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Данные.ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		Если Данные.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
			ПредставлениеСобытия = НСтр("ru = 'Входящее письмо'");
		Иначе
			ПредставлениеСобытия = НСтр("ru = 'Исходящее письмо'");
		КонецЕсли;
	Иначе
		ПредставлениеСобытия = Данные.ТипСобытия;
	КонецЕсли;
	
	Представление = СтрШаблон(НСтр("ru = 'Событие: %1 от %2'"), ПредставлениеСобытия, Формат(Данные.Дата, "ДФ=dd.MM.yyyy"));
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;
	
	ТипСобытия = Неопределено; 
	
	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ТипСобытия	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ТипСобытия");
	КонецЕсли;
	
	// Если документ копируется, то тип события получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ТипСобытия) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ТипСобытия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЗначениеКопирования, "ТипСобытия");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипСобытия) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			
			Если Параметры.ЗначенияЗаполнения.Свойство("ШаблонДокумента") Тогда
				ТипСобытия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначенияЗаполнения.ШаблонДокумента,
				"ТипСобытия");
			КонецЕсли;
			
			Если Параметры.ЗначенияЗаполнения.Свойство("ТипСобытия") Тогда
				ТипСобытия	= Параметры.ЗначенияЗаполнения.ТипСобытия;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ФормыСобытия = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыСобытия[ТипСобытия];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Функция - Получить как связаться
//
// Параметры:
//  Контакт				 - СправочникСсылка.Контрагенты, СправочникСсылка.КонтактныеЛица	 - ссылка на контакт
// Возвращаемое значение:
//  Строка - значение для связи с контактом.
Функция ПолучитьКакСвязаться(Контакт, ТипКИ = Неопределено) Экспорт
	
	Контакты = Новый Массив;
	Контакты.Добавить(Контакт);
	
	Если ТипКИ = Неопределено Тогда
		ТипыКИ = Новый Массив;
		ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
		ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ИначеЕсли ТипЗнч(ТипКИ) = Тип("Массив") Тогда
		ТипыКИ = ТипКИ;
	Иначе
		ТипыКИ = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипКИ);
	КонецЕсли;
	
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(Контакты, ТипыКИ);
	ТаблицаКИ.Сортировать("Тип УБЫВ");
	
	Представления = ТаблицаКИ.ВыгрузитьКолонку("Представление");
	
	Возврат СтрСоединить(Представления, "; ");
	
КонецФункции

Функция ПолучитьКакСвязатьсяКонтактов(Контакт, ТипКИ = Неопределено) Экспорт
	
	Контакты = Новый Массив;
	Контакты.Добавить(Контакт);
	
	ТипыКИ = Новый Массив;
	Если ТипКИ = Неопределено Тогда
		ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
		ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Иначе
		ТипыКИ.Добавить(ТипКИ);
	КонецЕсли;
	
	ТаблицаКИ = КонтактнаяИнформацияУНФ.КонтактнаяИнформацияОбъектов(Контакты, ТипыКИ);
	ТаблицаКИ.Сортировать("Тип УБЫВ");
	
	КонтактКакСвязаться = Новый Соответствие;
	Для каждого ДанныеКИ Из ТаблицаКИ Цикл
		СтрокаКакСвязаться = КонтактКакСвязаться.Получить(ДанныеКИ.ИдентификаторСтрокиТабличнойЧасти);
		Если СтрокаКакСвязаться = Неопределено Тогда
			СтрокаКакСвязаться = "";
		Иначе
			СтрокаКакСвязаться = СтрокаКакСвязаться + "; ";
		КонецЕсли;
		
		СтрокаКакСвязаться = СтрокаКакСвязаться + ДанныеКИ.Представление;
		КонтактКакСвязаться.Вставить(ДанныеКИ.ИдентификаторСтрокиТабличнойЧасти, СтрокаКакСвязаться);
	КонецЦикла;
	
	Возврат КонтактКакСвязаться;
	
КонецФункции

Процедура ПроверитьВозможностьВводаПоЛиду(Объект, ЗначенияЗаполнения, Отказ) Экспорт
	
	Лид = Неопределено;
	
	Если Объект.Участники.Количество() <> 0 И ТипЗнч(Объект.Участники[0].Контакт) = Тип("СправочникСсылка.Лиды") Тогда
		Лид = Объект.Участники[0].Контакт;
	КонецЕсли;
	
	Если Лид = Неопределено И ТипЗнч(ЗначенияЗаполнения) = Тип("Структура") Тогда
		Если ЗначенияЗаполнения.Свойство("Лид") И ТипЗнч(ЗначенияЗаполнения.Лид) = Тип("СправочникСсылка.Лиды") Тогда
			Лид = ЗначенияЗаполнения.Лид;
		ИначеЕсли ЗначенияЗаполнения.Свойство("Контакт") И ТипЗнч(ЗначенияЗаполнения.Контакт) = Тип("СправочникСсылка.Лиды") Тогда
			Лид = ЗначенияЗаполнения.Контакт;
		ИначеЕсли ЗначенияЗаполнения.Свойство("КонтактРодитель") И ТипЗнч(ЗначенияЗаполнения.КонтактРодитель) = Тип("СправочникСсылка.Лиды") Тогда
			Лид = ЗначенияЗаполнения.КонтактРодитель;
		КонецЕсли;
	КонецЕсли;
	
	Если Лид = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Лид) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Лид, "СостояниеЛида") = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СостоянияЛидов.Завершен");
	Если Отказ Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Нельзя создать событие по лиду, с которым завершена работа.'"));
	КонецЕсли;
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст = "";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ИнтерфейсКалендаряСотрудника

// Функция определяет пиктограмму для элемента записи календаря
//
// Параметры:
//  Событие	 - ДокументСсылка.Событие	 - событие, для записи календаря которого подбирается картинка
// 
// Возвращаемое значение:
//  Картинка - пиктограмма записи календаря
//
Функция КартинкаЗаписиКалендаря(Событие) Экспорт
	
	ТипСобытия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Событие, "ТипСобытия");
	СоответствиеТиповКартинкам = ПолучитьСоответствиеТиповСобытийКартинкам();
	Картинка = СоответствиеТиповКартинкам[ТипСобытия];
	Если Картинка = Неопределено Тогда
		Картинка = Новый Картинка;
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции

// Функция определяет цвет текста для элемента записи календаря
//
// Параметры:
//  Событие	 - ДокументСсылка.Событие	 - событие, для записи календаря которого подбирается цвет
// 
// Возвращаемое значение:
//  Цвет - цвет текста записи календаря
//
Функция ЦветТекстаЗаписиКалендаря(Событие) Экспорт
	
	ЦветСостояния = Событие.Состояние.Цвет.Получить();
	Если ЦветСостояния = Неопределено Тогда
		ЦветСостояния = Новый Цвет;
	КонецЕсли;
	
	Возврат ЦветСостояния;
	
КонецФункции

// Процедура заполняет таблицу описаний расширенного ввода записи календаря
//
// Параметры:
//  ТаблицаОписаний	 - ТаблицаЗначений	 - описание колонок см. Справочник.ЗаписиКалендаряСотрудника.ПриЗаполненииРасширенногоВводаЗаписиКалендаря()
//
Процедура ПриЗаполненииРасширенногоВводаЗаписиКалендаря(ТаблицаОписаний) Экспорт
	
	НоваяСтрока = ТаблицаОписаний.Добавить();
	НоваяСтрока.ИмяФормы = "Документ.Событие.Форма.ФормаСобытия";
	НоваяСтрока.ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("ТипСобытия", Перечисления.ТипыСобытий.ЛичнаяВстреча));
	НоваяСтрока.Представление = НСтр("ru='Событие: Личная встреча'");
	
	НоваяСтрока = ТаблицаОписаний.Добавить();
	НоваяСтрока.ИмяФормы = "Документ.Событие.Форма.ФормаСобытия";
	НоваяСтрока.ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("ТипСобытия", Перечисления.ТипыСобытий.ТелефонныйЗвонок));
	НоваяСтрока.Представление = НСтр("ru='Событие: Телефонный звонок'");
	
	НоваяСтрока = ТаблицаОписаний.Добавить();
	НоваяСтрока.ИмяФормы = "Документ.Событие.Форма.ФормаСобытия";
	НоваяСтрока.ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("ТипСобытия", Перечисления.ТипыСобытий.Прочее));
	НоваяСтрока.Представление = НСтр("ru='Событие: Прочее'");
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсРабочегоПроцесса

Процедура СоставПолейЗаполненияДляРабочегоПроцесса(ТаблицаОписанияПолей, знач ТипДействия) Экспорт
	
	Если ТипДействия = Перечисления.ТипыДействийРабочегоПроцесса.СоздатьСобытие Тогда
		
		НовоеОписание = ТаблицаОписанияПолей.Добавить();
		НовоеОписание.ИмяРеквизита				= Метаданные.Документы.Событие.Реквизиты.ТипСобытия.Имя;
		НовоеОписание.Заголовок					= Метаданные.Документы.Событие.Реквизиты.ТипСобытия.Синоним;
		НовоеОписание.ВариантЗаполнения			= "Указанный";
		НовоеОписание.ТипЗначения				= Метаданные.Документы.Событие.Реквизиты.ТипСобытия.Тип;
		НовоеОписание.Значение					= Перечисления.ТипыСобытий.ЛичнаяВстреча;
		НовоеОписание.ОбязательноеЗаполнение	= Истина;
		
		НовоеОписание = ТаблицаОписанияПолей.Добавить();
		НовоеОписание.ИмяРеквизита				= Метаданные.Документы.Событие.Реквизиты.Состояние.Имя;
		НовоеОписание.Заголовок					= Метаданные.Документы.Событие.Реквизиты.Состояние.Синоним;
		НовоеОписание.ВариантЗаполнения			= "Указанный";
		НовоеОписание.ТипЗначения				= Метаданные.Документы.Событие.Реквизиты.Состояние.Тип;
		НовоеОписание.Значение					= Метаданные.Документы.Событие.Реквизиты.Состояние.ЗначениеЗаполнения;
		НовоеОписание.ОбязательноеЗаполнение	= Истина;
		
		НовоеОписание = ТаблицаОписанияПолей.Добавить();
		НовоеОписание.ИмяРеквизита				= Метаданные.Документы.Событие.Реквизиты.Важность.Имя;
		НовоеОписание.Заголовок					= Метаданные.Документы.Событие.Реквизиты.Важность.Синоним;
		НовоеОписание.ВариантЗаполнения			= "Указанный";
		НовоеОписание.ТипЗначения				= Метаданные.Документы.Событие.Реквизиты.Важность.Тип;
		НовоеОписание.Значение					= Метаданные.Документы.Событие.Реквизиты.Важность.ЗначениеЗаполнения;
		НовоеОписание.ОбязательноеЗаполнение	= Ложь;
		
		НовоеОписание = ТаблицаОписанияПолей.Добавить();
		НовоеОписание.ИмяРеквизита				= Метаданные.Документы.Событие.Реквизиты.НачалоСобытия.Имя;
		НовоеОписание.Заголовок					= Метаданные.Документы.Событие.Реквизиты.НачалоСобытия.Синоним;
		НовоеОписание.ВариантЗаполнения			= "Смещение";
		НовоеОписание.ТипЗначения				= Метаданные.Документы.Событие.Реквизиты.НачалоСобытия.Тип;
		НовоеОписание.ОбязательноеЗаполнение	= Истина;
		
		НовоеОписание = ТаблицаОписанияПолей.Добавить();
		НовоеОписание.ИмяРеквизита				= Метаданные.Документы.Событие.Реквизиты.ОкончаниеСобытия.Имя;
		НовоеОписание.Заголовок					= Метаданные.Документы.Событие.Реквизиты.ОкончаниеСобытия.Синоним;
		НовоеОписание.ВариантЗаполнения			= "Смещение";
		НовоеОписание.ТипЗначения				= Метаданные.Документы.Событие.Реквизиты.ОкончаниеСобытия.Тип;
		НовоеОписание.ОбязательноеЗаполнение	= Истина;
		
	КонецЕсли;
	
	Если ТипДействия = Перечисления.ТипыДействийРабочегоПроцесса.ОтправитьEmail
		Или ТипДействия = Перечисления.ТипыДействийРабочегоПроцесса.ОтправитьSMS Тогда
		
		НовоеОписание = ТаблицаОписанияПолей.Добавить();
		НовоеОписание.ИмяРеквизита				= "Контакт";
		НовоеОписание.Заголовок					= НСтр("ru='Кому'");
		НовоеОписание.ВариантЗаполнения			= "ИзОснования";
		НовоеОписание.ТипЗначения				= Новый ОписаниеТипов("СправочникСсылка.Контрагенты, СправочникСсылка.КонтактныеЛица, СправочникСсылка.Пользователи");
		НовоеОписание.ОбязательноеЗаполнение	= Истина;
		
		НовоеОписание = ТаблицаОписанияПолей.Добавить();
		НовоеОписание.ИмяРеквизита				= "ВидКонтактнойИнформации";
		НовоеОписание.Заголовок					= НСтр("ru='Вид контактной информации'");
		НовоеОписание.ВариантЗаполнения			= "Указанный";
		НовоеОписание.ТипЗначения				= Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации");
		Если ТипДействия = Перечисления.ТипыДействийРабочегоПроцесса.ОтправитьEmail Тогда
			НовоеОписание.Значение				= Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
		Иначе
			НовоеОписание.Значение				= Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		КонецЕсли;
		НовоеОписание.ОбязательноеЗаполнение	= Истина;
		
		Если ТипДействия = Перечисления.ТипыДействийРабочегоПроцесса.ОтправитьEmail Тогда
			НовоеОписание = ТаблицаОписанияПолей.Добавить();
			НовоеОписание.ИмяРеквизита				= Метаданные.Документы.Событие.Реквизиты.УчетнаяЗапись.Имя;
			НовоеОписание.Заголовок					= Метаданные.Документы.Событие.Реквизиты.УчетнаяЗапись.Синоним;
			НовоеОписание.ВариантЗаполнения			= "Указанный";
			НовоеОписание.ТипЗначения				= Метаданные.Документы.Событие.Реквизиты.УчетнаяЗапись.Тип;
			НовоеОписание.ОбязательноеЗаполнение	= Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	НовоеОписание = ТаблицаОписанияПолей.Добавить();
	НовоеОписание.ИмяРеквизита				= Метаданные.Документы.Событие.Реквизиты.Ответственный.Имя;
	НовоеОписание.Заголовок					= Метаданные.Документы.Событие.Реквизиты.Ответственный.Синоним;
	НовоеОписание.ВариантЗаполнения			= "Указанный";
	НовоеОписание.ТипЗначения				= Метаданные.Документы.Событие.Реквизиты.Ответственный.Тип;
	
	Если ТипДействия = Перечисления.ТипыДействийРабочегоПроцесса.СоздатьСобытие Тогда
		
		НовоеОписание = ТаблицаОписанияПолей.Добавить();
		НовоеОписание.ИмяРеквизита				= Метаданные.Документы.Событие.Реквизиты.Содержание.Имя;
		НовоеОписание.Заголовок					= Метаданные.Документы.Событие.Реквизиты.Содержание.Синоним;
		НовоеОписание.ВариантЗаполнения			= "Указанный";
		НовоеОписание.ТипЗначения				= Метаданные.Документы.Событие.Реквизиты.Содержание.Тип;
		
		НовоеОписание = ТаблицаОписанияПолей.Добавить();
		НовоеОписание.ИмяРеквизита				= Метаданные.Документы.Событие.Реквизиты.Тема.Имя;
		НовоеОписание.Заголовок					= Метаданные.Документы.Событие.Реквизиты.Тема.Синоним;
		НовоеОписание.ВариантЗаполнения			= "Указанный";
		НовоеОписание.ТипЗначения				= Метаданные.Документы.Событие.Реквизиты.Тема.Тип;
		
		НовоеОписание = ТаблицаОписанияПолей.Добавить();
		НовоеОписание.ИмяРеквизита				= Метаданные.Документы.Событие.Реквизиты.КалендарьСотрудника.Имя;
		НовоеОписание.Заголовок					= Метаданные.Документы.Событие.Реквизиты.КалендарьСотрудника.Синоним;
		НовоеОписание.ВариантЗаполнения			= "ИзОснования";
		НовоеОписание.ТипЗначения				= Метаданные.Документы.Событие.Реквизиты.КалендарьСотрудника.Тип;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитыНедоступныеДляИсточникаРабочегоПроцесса(ТипДействия = Неопределено) Экспорт
	
	НедоступныеРеквизиты = Новый Массив;
	
	НедоступныеРеквизиты.Добавить("СодержаниеHTML");
	НедоступныеРеквизиты.Добавить("КартинкиHTML");
	НедоступныеРеквизиты.Добавить("СписокУчастников");
	
	Возврат НедоступныеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.//
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электрнной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыСобытия = Новый Соответствие;
	ФормыСобытия.Вставить(Перечисления.ТипыСобытий.ЭлектронноеПисьмо, "ФормаЭлектронногоПисьма");
	ФормыСобытия.Вставить(Перечисления.ТипыСобытий.СообщениеSMS,      "ФормаСообщенияSMS");
	ФормыСобытия.Вставить(Перечисления.ТипыСобытий.ТелефонныйЗвонок,  "ФормаСобытия");
	ФормыСобытия.Вставить(Перечисления.ТипыСобытий.ЛичнаяВстреча,     "ФормаСобытия");
	ФормыСобытия.Вставить(Перечисления.ТипыСобытий.Запись, "ФормаСобытияЗаписьКонтрагента");
	ФормыСобытия.Вставить(Перечисления.ТипыСобытий.Прочее,            "ФормаСобытия");
	
	Возврат ФормыСобытия;

КонецФункции 

Функция ПолучитьСоответствиеТиповСобытийКартинкам() Экспорт
	
	СоответствиеТиповКартинкам = Новый Соответствие;
	СоответствиеТиповКартинкам.Вставить(Перечисления.ТипыСобытий.ЛичнаяВстреча, БиблиотекаКартинок.КонтактнаяИнформацияАдрес);
	СоответствиеТиповКартинкам.Вставить(Перечисления.ТипыСобытий.Прочее, БиблиотекаКартинок.КонтактнаяИнформацияДругое);
	СоответствиеТиповКартинкам.Вставить(Перечисления.ТипыСобытий.СообщениеSMS, БиблиотекаКартинок.КонтактнаяИнформацияТелефон);
	СоответствиеТиповКартинкам.Вставить(Перечисления.ТипыСобытий.ТелефонныйЗвонок, БиблиотекаКартинок.КонтактнаяИнформацияТелефон);
	СоответствиеТиповКартинкам.Вставить(Перечисления.ТипыСобытий.ЭлектронноеПисьмо, БиблиотекаКартинок.КонтактнаяИнформацияЕмэйл);
	СоответствиеТиповКартинкам.Вставить(Перечисления.ТипыСобытий.Запись, БиблиотекаКартинок.ТипСобытияЗапись);
	
	Возврат СоответствиеТиповКартинкам;
	
КонецФункции

Функция ЗаполнитьСтруктуруОбластейМакета()
	
	СтруктураОбластей = Новый Структура;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Событие.ПФ_MXL_КарточкаСобытия");
	
	СтруктураОбластей.Вставить("Заголовок",				Макет.ПолучитьОбласть("Заголовок"));
	СтруктураОбластей.Вставить("Шапка",					Макет.ПолучитьОбласть("Шапка"));
	СтруктураОбластей.Вставить("Тема",					Макет.ПолучитьОбласть("Тема"));
	СтруктураОбластей.Вставить("Содержание",			Макет.ПолучитьОбласть("Содержание"));
	СтруктураОбластей.Вставить("ШапкаУчастники",		Макет.ПолучитьОбласть("ШапкаУчастники"));
	СтруктураОбластей.Вставить("СтрокаУчастники",		Макет.ПолучитьОбласть("СтрокаУчастники"));
	СтруктураОбластей.Вставить("Отступ",				Макет.ПолучитьОбласть("Отступ"));
	СтруктураОбластей.Вставить("ОтступСПодчеркиванием",	Макет.ПолучитьОбласть("ОтступСПодчеркиванием"));
	
	Возврат СтруктураОбластей;
	
КонецФункции

Функция ПолучитьОтветственного(Источник)
	
	Ответственный = Неопределено;
	
	РеквизитОтветственный = Источник.Метаданные().Реквизиты.Найти("Ответственный");
	Если РеквизитОтветственный <> Неопределено
		И РеквизитОтветственный.Тип.СодержитТип(Тип("СправочникСсылка.Сотрудники")) Тогда
		Ответственный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "Ответственный");
	КонецЕсли;
	
	Возврат Ответственный;
	
КонецФункции

#КонецОбласти

#Область ИнтерфейсПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

Функция ПечатнаяФормаКарточкиСобытий(События) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_КарточкиСобытий";
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КарточкиСобытий";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	СтруктураОбластей = ЗаполнитьСтруктуруОбластейМакета();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Событие.Ссылка КАК Событие,
		|	Событие.ТипСобытия КАК ТипСобытия,
		|	Событие.Тема КАК Тема,
		|	Событие.Содержание КАК Содержание,
		|	Событие.НачалоСобытия КАК НачалоСобытия,
		|	Событие.ОкончаниеСобытия КАК ОкончаниеСобытия,
		|	Событие.Ответственный КАК Ответственный,
		|	Событие.Состояние.Цвет КАК ЦветСостояния,
		|	Событие.Участники.(
		|		Контакт КАК Контакт,
		|		КакСвязаться КАК КакСвязаться,
		|		ПРЕДСТАВЛЕНИЕ(Событие.Участники.Контакт) КАК КонтактПредставление
		|	),
		|	ПРЕДСТАВЛЕНИЕ(Событие.Ссылка) КАК СобытиеПредставление,
		|	ПРЕДСТАВЛЕНИЕ(Событие.Состояние) КАК СостояниеПредставление,
		|	ПРЕДСТАВЛЕНИЕ(Событие.Тема) КАК ТемаПредставление,
		|	ПРЕДСТАВЛЕНИЕ(Событие.Ответственный) КАК ОтветственныйПредставление
		|ИЗ
		|	Документ.Событие КАК Событие
		|ГДЕ
		|	Событие.Ссылка В(&События)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НачалоСобытия,
		|	ОкончаниеСобытия";
	
	Запрос.УстановитьПараметр("События", События);
	
	ВыборкаСобытия = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаСобытия.Следующий() Цикл
		
		ТабличныйДокумент.Вывести(СтруктураОбластей.Отступ);
		
		СтруктураОбластей.Заголовок.Параметры.Заполнить(ВыборкаСобытия);
		ТабличныйДокумент.Вывести(СтруктураОбластей.Заголовок);
		
		ВыборкаУчастники = ВыборкаСобытия.Участники.Выбрать();
		
		СтруктураОбластей.Шапка.Параметры.Заполнить(ВыборкаСобытия);
		СтруктураОбластей.Шапка.Параметры.Продолжительность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'с %1 по %2'"),
			Формат(ВыборкаСобытия.НачалоСобытия, "ДЛФ=DT"),
			Формат(ВыборкаСобытия.ОкончаниеСобытия, "ДЛФ=DT"));
		
		Если ВыборкаУчастники.Следующий() Тогда
			СтруктураОбластей.Шапка.Параметры.ОсновнойКонтактПредставление = ВыборкаУчастники.КонтактПредставление;
			СтруктураОбластей.Шапка.Параметры.ОсновнойКонтакт = ВыборкаУчастники.Контакт;
		КонецЕсли;
		
		ЦветСостояния = ВыборкаСобытия.ЦветСостояния.Получить();
		Если ЦветСостояния <> Неопределено Тогда
			ОбластьСостояние = СтруктураОбластей.Шапка.Область("ОбластьСостояние");
			ОбластьСостояние.ЦветТекста = ЦветСостояния;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(СтруктураОбластей.Шапка);
		ТабличныйДокумент.Вывести(СтруктураОбластей.Отступ);
		
		СтруктураОбластей.Тема.Параметры.Заполнить(ВыборкаСобытия);
		ТабличныйДокумент.Вывести(СтруктураОбластей.Тема);
		ТабличныйДокумент.Вывести(СтруктураОбластей.Отступ);
		
		СтруктураОбластей.Содержание.Параметры.Заполнить(ВыборкаСобытия);
		ТабличныйДокумент.Вывести(СтруктураОбластей.Содержание);
		ТабличныйДокумент.Вывести(СтруктураОбластей.Отступ);
		
		ТабличныйДокумент.Вывести(СтруктураОбластей.ШапкаУчастники);
		
		Пока ВыборкаУчастники.Следующий() Цикл
			СтруктураОбластей.СтрокаУчастники.Параметры.Заполнить(ВыборкаУчастники);
			ТабличныйДокумент.Вывести(СтруктураОбластей.СтрокаУчастники);
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(СтруктураОбластей.ОтступСПодчеркиванием);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел()
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ГруппаДел	= НСтр("ru = 'События'");
	ИмяФормы	= "Документ.Событие.Форма.ФормаСписка";
	
	Если Не ПравоДоступа("Редактирование", Метаданные.Документы.Событие)
		Или ТекущиеДелаСервер.ДелоОтключено(ГруппаДел) Тогда
		
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ События.Ссылка) КАК СобытияВсегоВРаботе,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА События.НачалоСобытия <> ДАТАВРЕМЯ(1, 1, 1)
		|					И События.ОкончаниеСобытия < НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|				ТОГДА События.Ссылка
		|		КОНЕЦ) КАК СобытияПросроченоВыполнение,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА События.НачалоСобытия <= КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|					И События.ОкончаниеСобытия >= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|				ТОГДА События.Ссылка
		|		КОНЕЦ) КАК СобытияНаСегодня
		|ИЗ
		|	Документ.Событие КАК События
		|ГДЕ
		|	События.Состояние <> ЗНАЧЕНИЕ(Справочник.СостоянияСобытий.Завершено)
		|	И События.Состояние <> ЗНАЧЕНИЕ(Справочник.СостоянияСобытий.Отменено)
		|	И События.Ответственный В(&СотрудникиПользователя)
		|	И НЕ События.ПометкаУдаления";
	
	ДанныеДел = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	 = "СобытияПросроченоВыполнение";
	Дело.ЕстьДела		= ДанныеДел.СобытияПросроченоВыполнение > 0;
	Дело.Важное			= Истина;
	Дело.Представление	= НСтр("ru = 'Просроченные'");
	Дело.Количество		= ДанныеДел.СобытияПросроченоВыполнение;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("КлючНазначенияИспользования,ТекущиеДела,ПросроченоВыполнение", "ПросроченоВыполнение");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	= "СобытияНаСегодня";
	Дело.ЕстьДела		= ДанныеДел.СобытияНаСегодня > 0;
	Дело.Важное			= Ложь;
	Дело.Представление	= НСтр("ru = 'На сегодня'");
	Дело.Количество		= ДанныеДел.СобытияНаСегодня;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("КлючНазначенияИспользования,ТекущиеДела,НаСегодня", "НаСегодня");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	= "СобытияВсегоВРаботе";
	Дело.ЕстьДела		= ДанныеДел.СобытияВсегоВРаботе > 0;
	Дело.Важное			= Ложь;
	Дело.Представление	= НСтр("ru = 'В работе'");
	Дело.Количество		= ДанныеДел.СобытияВсегоВРаботе;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("КлючНазначенияИспользования,ТекущиеДела,ВРаботе", "ВРаботе");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектроннаяПочтаУНФ

Функция ТемаИСодержание(Тема, Содержание, СодержаниеHTML) Экспорт
	
	КомпонентыПредставления = Новый Массив;
	Если ЗначениеЗаполнено(Тема) Тогда
		КомпонентыПредставления.Добавить(Тема);
	КонецЕсли;
	
	СодержаниеВОднуСтроку = СодержаниеВОднуСтроку(Содержание, СодержаниеHTML, 150);
	
	Если ЗначениеЗаполнено(СодержаниеВОднуСтроку) Тогда
		КомпонентыПредставления.Добавить(СодержаниеВОднуСтроку);
	КонецЕсли;
	
	Возврат СтрСоединить(КомпонентыПредставления, " — ");
	
КонецФункции

Функция НовыеДанныеСобытия() Экспорт
	
	ДанныеСобытия = Новый Структура;
	ДанныеСобытия.Вставить("Тема");
	ДанныеСобытия.Вставить("Содержание");
	ДанныеСобытия.Вставить("СодержаниеHTML");
	
	Возврат ДанныеСобытия;
	
КонецФункции

Процедура ЗаполнитьТекстыИзПочтовогоСообщения(ДанныеСобытия, ИнтернетПочтовоеСообщение) Экспорт
	
	ДанныеСобытия.Тема = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ИнтернетПочтовоеСообщение.Тема);
	
	Для Каждого ТекТекст Из ИнтернетПочтовоеСообщение.Тексты Цикл
		
		Если ТекТекст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст Тогда
			
			Если СтрДлина(ТекТекст.Текст) > СтрДлина(ДанныеСобытия.Содержание) Тогда
				ДанныеСобытия.Содержание = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекТекст.Текст);
			КонецЕсли;
			
		ИначеЕсли ТекТекст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML Тогда
			
			Если СтрДлина(ТекТекст.Текст) > СтрДлина(ДанныеСобытия.СодержаниеHTML) Тогда
				ДанныеСобытия.СодержаниеHTML = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Гипертекст.ОбработатьТекстHTML(ТекТекст.Текст));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Заполнить вложения из почтового сообщения
//
// Параметры:
//  ДанныеСобытия				 - Структура - к этой структуре добавляется свойство "Вложения"
//                                             если в ИнтернетПочтовоеСообщение есть вложения,
//  ИнтернетПочтовоеСообщение	 - ИнтернетПочтовоеСообщение - почтовое сообщение.
//
Процедура ЗаполнитьВложенияИзПочтовогоСообщения(ДанныеСобытия, ИнтернетПочтовоеСообщение) Экспорт
	
	Если Не ЗначениеЗаполнено(ИнтернетПочтовоеСообщение.Вложения) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСобытия.Вставить("Вложения", Новый Массив);
	
	Для Каждого ИнтернетПочтовоеСообщениеВложение Из ИнтернетПочтовоеСообщение.Вложения Цикл
		НовоеВложение = Новый Структура;
		НовоеВложение.Вставить("ИмяФайла", ИнтернетПочтовоеСообщениеВложение.ИмяФайла);
		НовоеВложение.Вставить("Данные", ИнтернетПочтовоеСообщениеВложение.Данные);
		НовоеВложение.Вставить("Идентификатор", ИнтернетПочтовоеСообщениеВложение.Идентификатор);
		ДанныеСобытия.Вложения.Добавить(НовоеВложение);
	КонецЦикла;
	
КонецПроцедуры

Функция ТемаСПрефиксомОтвета(Тема, Команда) Экспорт
	
	Если Команда = ЭлектроннаяПочтаУНФКлиентСервер.КомандаОтветить() Тогда
		
		Если СтрНачинаетсяС(ВРег(Тема), "RE:") Тогда
			Возврат Тема;
		КонецЕсли;
		
		Возврат СтрШаблон("Re: %1", Тема);
		
	ИначеЕсли Команда = ЭлектроннаяПочтаУНФКлиентСервер.КомандаПереслать() Тогда
		
		Если СтрНачинаетсяС(ВРег(Тема), "Fw:") Тогда
			Возврат Тема;
		КонецЕсли;
		
		Возврат СтрШаблон("Fw: %1", Тема);
		
	Иначе
		
		Возврат Тема;
		
	КонецЕсли;
	
КонецФункции

Функция ПроизошлаОшибка(Прогресс) Экспорт
	
	Если ТипЗнч(Прогресс) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не Прогресс.Свойство("ДополнительныеПараметры") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не Прогресс.ДополнительныеПараметры.Свойство("ПроизошлаОшибка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Прогресс.ДополнительныеПараметры.ПроизошлаОшибка;
	
КонецФункции

Функция СодержаниеВОднуСтроку(Содержание, СодержаниеHTML, МаксДлина)
	
	Результат = "";
	
	Если ЗначениеЗаполнено(Содержание) Тогда
		Если СтрНайти(НРег(Содержание), "<html") Тогда
			Буфер = Гипертекст.ПолучитьТекстИзHTML(Содержание);
		Иначе
			Буфер = Содержание;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Буфер) Тогда
		Буфер = Гипертекст.ПолучитьТекстИзHTML(СодержаниеHTML);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Буфер) Тогда
		Возврат "";
	КонецЕсли;
	
	Для ИндексСтроки = 1 По СтрЧислоСтрок(Буфер) Цикл
		
		Если СтрДлина(Результат) > МаксДлина Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаПодстановки = СокрЛ(СтрПолучитьСтроку(Буфер, ИндексСтроки));
		
		Результат = СокрЛП(
		СтрШаблон("%1 %2",
		Результат,
		СтрокаПодстановки));
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область АссистентУправления

#Область АссистентУправления_Интеграция

Процедура ПриОпределенииТиповПредметовСобытий(Предметы) Экспорт
	
	Предметы.Вставить("ЭлектронноеПисьмо", НСтр("ru='Электронное письмо'"));
	
КонецПроцедуры

Процедура ПриОпределенииСобытий(События, Предмет) Экспорт
	
КонецПроцедуры

Процедура ПриОпределенииДействий(Действия) Экспорт
	
	// 1.
	Действие = Действия.Добавить();
	Действие.Идентификатор = "СоздатьОтправитьЭлектронноеПисьмо";
	Действие.Представление = НСтр("ru='Отправить email'");
	Действие.ТипыСобытий   = "ПриЗаписи,";
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(Действие);
	НовоеПоле = Действие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "УчетнаяЗапись";
	НовоеПоле.Представление = НСтр("ru='Учетная запись'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты");
	НовоеПоле.ОбязательноеЗаполнение = Истина;
	НовоеПоле.ВариантЗаполнения = "Указанный";
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(Действие);
	НовоеПоле = Действие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "Получатель";
	НовоеПоле.Представление = НСтр("ru='Кому'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("Строка");
	НовоеПоле.ОбязательноеЗаполнение = Истина;
	НовоеПоле.ВариантЗаполнения = "Указанный";
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(Действие);
	НовоеПоле = Действие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "ШаблонСообщения";
	НовоеПоле.Представление = НСтр("ru='Шаблон сообщения'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ШаблоныСообщений");
	НовоеПоле.ОбязательноеЗаполнение = Ложь;
	НовоеПоле.ВариантЗаполнения = "Указанный";
	
	// 2.
	Действие = Действия.Добавить();
	Действие.Идентификатор = "СоздатьОтправитьSMS";
	Действие.Представление = НСтр("ru='Отправить SMS'");
	Действие.ТипыСобытий   = "ПриЗаписи,";
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(Действие);
	НовоеПоле = Действие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "Получатель";
	НовоеПоле.Представление = НСтр("ru='Кому'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("Строка");
	НовоеПоле.ОбязательноеЗаполнение = Истина;
	НовоеПоле.ВариантЗаполнения = "Указанный";
	
	АссистентУправления.ДобавитьОписаниеПолейДействия(Действие);
	НовоеПоле = Действие.ОписаниеПолей.Добавить();
	НовоеПоле.Имя           = "ШаблонСообщения";
	НовоеПоле.Представление = НСтр("ru='Шаблон сообщения'");
	НовоеПоле.ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ШаблоныСообщений");
	НовоеПоле.ОбязательноеЗаполнение = Ложь;
	НовоеПоле.ВариантЗаполнения = "Указанный";
КонецПроцедуры

Процедура ПриОпределенииУсловий(Условия) Экспорт
	
	
	
КонецПроцедуры

Функция ВыполненыУсловия(Предмет, Условия) Экспорт
	
КонецФункции

Процедура ВыполнитьДействие(Предмет, Действие, ЗначенияЗаполнения, ДополнительныеПараметры, Результат) Экспорт
	
	ТипПредмета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДополнительныеПараметры.ЗадачаАссистентаУправления, "ТипПредмета");
	
	Если Действие.Идентификатор = "СоздатьОтправитьЭлектронноеПисьмо" Тогда
		
		АссистентУправления.ПроверитьНаличиеОбязательныхПараметров(ЗначенияЗаполнения, "Получатель,ШаблонСообщения,УчетнаяЗапись");
		
		Ответственный = ПолучитьОтветственного(ДополнительныеПараметры.Источник);
		Если Ответственный = Неопределено Тогда
			АссистентУправления.ПроверитьНаличиеОбязательныхПараметров(ЗначенияЗаполнения, "Ответственный");
			Ответственный = ЗначенияЗаполнения.Ответственный;
		КонецЕсли;
		
		ПараметрыСобытия = Новый Структура;
		ПараметрыСобытия.Вставить("Ответственный", Ответственный);
		ПараметрыСобытия.Вставить("УчетнаяЗапись", ЗначенияЗаполнения.УчетнаяЗапись);
		ПараметрыСобытия.Вставить("ОснованиеЗаполнения", Предмет);
		ПараметрыСобытия.Вставить("ВыбранныйПолучатель", Новый Структура);
		ПараметрыСобытия.ВыбранныйПолучатель.Вставить("ВыбранныйПолучатель", ЗначенияЗаполнения.Получатель);
		Если ЗначенияЗаполнения.Свойство("ПолучательВидКИ") Тогда
			ПараметрыСобытия.ВыбранныйПолучатель.Вставить("ВыбранныйВидКИ", ЗначенияЗаполнения.ВидКИ);
		КонецЕсли;
		
		ШаблонСообщения = Неопределено;
		ЗначенияЗаполнения.Свойство("ШаблонСообщения", ШаблонСообщения);
		
		РезультатСозданияПисьма = СоздатьОтправитьЭлектронноеПисьмо(ПараметрыСобытия, ШаблонСообщения, ДополнительныеПараметры.ДополнительныеПараметрыСобытия);
		
	ИначеЕсли Действие.Идентификатор = "СоздатьОтправитьSMS" Тогда
		
		АссистентУправления.ПроверитьНаличиеОбязательныхПараметров(ЗначенияЗаполнения, "Получатель,ШаблонСообщения");
		
		Ответственный = ПолучитьОтветственного(ДополнительныеПараметры.Источник);
		Если Ответственный = Неопределено Тогда
			АссистентУправления.ПроверитьНаличиеОбязательныхПараметров(ЗначенияЗаполнения, "Ответственный");
			Ответственный = ЗначенияЗаполнения.Ответственный;
		КонецЕсли;
		
		ПараметрыСобытия = Новый Структура;
		ПараметрыСобытия.Вставить("Ответственный", Ответственный);
		ПараметрыСобытия.Вставить("ОснованиеЗаполнения", Предмет);
		ПараметрыСобытия.Вставить("ВыбранныйПолучатель", Новый Структура);
		ПараметрыСобытия.ВыбранныйПолучатель.Вставить("ВыбранныйПолучатель", ЗначенияЗаполнения.Получатель);
		Если ЗначенияЗаполнения.Свойство("ПолучательВидКИ") Тогда
			ПараметрыСобытия.ВыбранныйПолучатель.Вставить("ВыбранныйВидКИ", ЗначенияЗаполнения.ВидКИ);
		КонецЕсли;
		
		ШаблонСообщения = Неопределено;
		ЗначенияЗаполнения.Свойство("ШаблонСообщения", ШаблонСообщения);
		
		РезультатСозданияПисьма = СоздатьОтправитьSMS(ПараметрыСобытия, ШаблонСообщения, ДополнительныеПараметры.ДополнительныеПараметрыСобытия);
		
	КонецЕсли;
	
	Результат.Успешно = Истина;
	Результат.Вставить("Документ", РезультатСозданияПисьма.Событие);
	
	Если ЗначениеЗаполнено(РезультатСозданияПисьма.Событие) И ЗначениеЗаполнено(РезультатСозданияПисьма.ТекстОшибки) Тогда
		ДанныеСообщения = ОбсужденияСервер.НовыйДанныеСообщения();
		ДанныеСообщения.Объект = РезультатСозданияПисьма.Событие;
		ДанныеСообщения.Текст = РезультатСозданияПисьма.ТекстОшибки;
		ДанныеСообщения.Дата = ТекущаяДатаСеанса();
		ДанныеСообщения.Автор = АссистентУправления.ПользовательАссистент();
		ДанныеСообщения.Получатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РезультатСозданияПисьма.Событие, "Ответственный");
		ОбсужденияСервер.СоздатьСообщениеОтложенно(ДанныеСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеОбработкиСобытия(Предмет, Событие, Действие, ЗначенияЗаполнения, ДополнительныеПараметры, Результат) Экспорт
	
КонецПроцедуры

#КонецОбласти

Функция СоздатьОтправитьЭлектронноеПисьмо(ЗначенияЗаполнения, ШаблонСообщения = Неопределено, ДополнительныеПараметры = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Событие", Документы.Событие.ПустаяСсылка());
	Результат.Вставить("ТекстОшибки", "");
	
	Если НЕ ЗначенияЗаполнения.Свойство("ТипСобытия") Тогда
		ЗначенияЗаполнения.Вставить("ТипСобытия", Перечисления.ТипыСобытий.ЭлектронноеПисьмо);
	КонецЕсли;
	
	Если НЕ ЗначенияЗаполнения.Свойство("Автор") Тогда
		ЗначенияЗаполнения.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	КонецЕсли;
	
	СобытиеОбъект = Документы.Событие.СоздатьДокумент();
	СобытиеОбъект.Заполнить(ЗначенияЗаполнения);
	СобытиеОбъект.Дата = ТекущаяДатаСеанса();
	
	Если ШаблонСообщения <> Неопределено Тогда
		Если ДополнительныеПараметры = Неопределено Тогда
			ДополнительныеПараметры = Новый Структура;
		КонецЕсли;
		
		Если ЗначенияЗаполнения.Свойство("ВыбранныйПолучатель") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДополнительныеПараметры, ЗначенияЗаполнения.ВыбранныйПолучатель, Истина);
		КонецЕсли;
		
		СобытиеОбъект.ЗаполнитьПоШаблону(ШаблонСообщения, ЗначенияЗаполнения.ОснованиеЗаполнения, ДополнительныеПараметры);
	КонецЕсли;
	
	Если Не СобытиеОбъект.ПроверитьЗаполнение() Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось создать и отправить письмо (ошибка проверки заполнения) на основании %1'"), ЗначенияЗаполнения.ОснованиеЗаполнения);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если НЕ РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
		Попытка
			СобытиеОбъект.ОтправитьЭлектронноеПисьмо(Ложь);
		Исключение
			Результат.ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось автоматически отправить электронное письмо, требуется отправка из формы События.
				|По причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		Результат.ТекстОшибки = НСтр("ru='Автоматическая отправка письма невозможна, т.к. в базе установлена блокировка работы с внешними ресурсами.
			|Для разблокирования перейдите в Еще больше возможностей - Администрирование - Регламентные операции - Разблокировать работу с внешними ресурсами.'");
	КонецЕсли;
	
	СобытиеОбъект.Записать();
	Результат.Событие = СобытиеОбъект.Ссылка;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьОтправитьSMS(ЗначенияЗаполнения, ШаблонСообщения = Неопределено, ДополнительныеПараметры = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Событие", Документы.Событие.ПустаяСсылка());
	Результат.Вставить("ТекстОшибки", "");
	
	Если НЕ ЗначенияЗаполнения.Свойство("ТипСобытия") Тогда
		ЗначенияЗаполнения.Вставить("ТипСобытия", Перечисления.ТипыСобытий.СообщениеSMS);
	КонецЕсли;
	
	Если НЕ ЗначенияЗаполнения.Свойство("Автор") Тогда
		ЗначенияЗаполнения.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	КонецЕсли;
	
	СобытиеОбъект = Документы.Событие.СоздатьДокумент();
	СобытиеОбъект.Заполнить(ЗначенияЗаполнения);
	СобытиеОбъект.Дата = ТекущаяДатаСеанса();
	
	Если ШаблонСообщения <> Неопределено Тогда
		Если ДополнительныеПараметры = Неопределено Тогда
			ДополнительныеПараметры = Новый Структура;
		КонецЕсли;
		
		Если ЗначенияЗаполнения.Свойство("ВыбранныйПолучатель") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДополнительныеПараметры, ЗначенияЗаполнения.ВыбранныйПолучатель, Истина);
		КонецЕсли;
		
		СобытиеОбъект.ЗаполнитьПоШаблону(ШаблонСообщения, ЗначенияЗаполнения.ОснованиеЗаполнения, ДополнительныеПараметры);
	КонецЕсли;
	
	Если Не СобытиеОбъект.ПроверитьЗаполнение() Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось создать и отправить сообщение SMS (ошибка проверки заполнения) на основании %1'"), ЗначенияЗаполнения.ОснованиеЗаполнения);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если НЕ РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
		Попытка
			СобытиеОбъект.ОтправитьSMS(Ложь);
		Исключение
			Результат.ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось автоматически отправить сообщение SMS, требуется отправка из формы События.
				|По причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		Результат.ТекстОшибки = НСтр("ru='Автоматическая отправка сообщения SMS невозможна, т.к. в базе установлена блокировка работы с внешними ресурсами.
			|Для разблокирования перейдите в Еще больше возможностей - Администрирование - Регламентные операции - Разблокировать работу с внешними ресурсами.'");
	КонецЕсли;
	
	СобытиеОбъект.Записать();
	Результат.Событие = СобытиеОбъект.Ссылка;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли