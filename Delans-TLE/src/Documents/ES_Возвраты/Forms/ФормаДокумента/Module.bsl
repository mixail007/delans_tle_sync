
////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//УправлениеНебольшойФирмойСервер.ЗаполнитьШапкуДокумента(
	//	Объект,
	//	,
	//	Параметры.ЗначениеКопирования,
	//	Параметры.Основание,
	//	РазрешеноПроведение,
	//	Параметры.ЗначенияЗаполнения
	//);

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда   
		// *Временно отключено*
		//УстановитьПризнакиСозданияДокументовНаОснованииВозврата();
	Иначе
		Объект.Организация 	= ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Организация);
		Объект.Касса 		= ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.КассаНаложенныхПлатежей);
		Объект.Счет 		= Объект.Организация.БанковскийСчетПоУмолчанию;
	КонецЕсли;
	
	//УправлениеНебольшойФирмойКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.ГруппаДополнительно, Объект.Комментарий);
	
	//ES_Сережко А.С. 07.02.18
	// СтандартныеПодсистемы.Печать
	//УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаВажныеКомандыВозврат);
	// Конец СтандартныеПодсистемы.Печать  	
	//ES_Сережко А.С. 07.02.18
	//ES_Сережко А.С. 07.02.18	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	//ES_Сережко А.С. 07.02.18
	
	//ЭР Несторук С.И. 07.03.2017 12:16:22 {
	Элементы.ЗаказыЯчейка.Видимость = ПолучитьФункциональнуюОпцию("УчетПоЯчейкам");
	ПоказатьСвязанныеДокументы();
	//}ЭР Несторук С.И.
	
	////ES_Савченко Е.Р. 27.09.2017 +
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");	
	КонецЕсли;
	////ES_Савченко Е.Р. 27.09.2017 -
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидЗачетаПоПлатежам) Тогда
		Объект.ВидЗачетаПоПлатежам = Перечисления.ES_ВидыЗачетаПоПлатежамВозврата.УчетРКО;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//ЭР Несторук С.И. 10.04.2019 9:32:27 {
	ES_БиллингКлиент.ПроверитьДоступностьСервисаDelans(Отказ);
	//}ЭР Несторук С.И.
	УстановитьВидимостьДоступностьЭлементовФормы();
	УстановитьВидимостьКассаСчет();   	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Если сумма документа отрицательная, не проводить
	Если Объект.СуммаДокумента < 0 Тогда
		Сообщить("Долг по оплате услуги доставки превышает сумму возвращаемой наложенной стоимости.");
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ЭЛЕМЕНТОВ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ЗаказчикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Платежи.Количество() > 0 ИЛИ Объект.Заказы.Количество() > 0 Тогда
	 
		ТекстВопроса = Нстр("ru = 'Табличные части документа будут очищены. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьВопросПоОчисткеТчЗавершение", ЭтаФорма), ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Возврат;

	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОплатыПриИзменении(Элемент)
	
	УстановитьВидимостьКассаСчет();
	//ЭР Несторук С.И. 16.08.2017 13:15:24 {
	УстановитьПроцентРКО();
	//}ЭР Несторук С.И.
КонецПроцедуры

&НаКлиенте
Процедура ПроцентУдержанияПриИзменении(Элемент)
	УчестьПроцентУдержанияВСуммахЗаказов();
	РассчетКОплате();
	ПересчетТЧПлатежиКОплате();

КонецПроцедуры

&НаКлиенте
Процедура ОбработанПриИзменении(Элемент)
	
	Если Объект.Обработан Тогда
		Объект.ДанныеОбработан = "" + ПользователиКлиентСервер.ТекущийПользователь() + ", " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ""в"" ЧЧ:мм'");
	Иначе
		Объект.ДанныеОбработан = "";
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
	
КонецПроцедуры // КомментарийПриИзменении()

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.ГруппаДополнительно, Объект.Комментарий);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ ПЛАТЕЖИ

&НаКлиенте
Процедура ПлатежиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// При двойном клике на строке открывается Заказ
	Если Поле.Имя = "ПлатежиЗаказ" Тогда
		ПоказатьЗначение(,Элемент.ТекущиеДанные.Заказ);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
		
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	// Удаление пустых строк в ТЧ Платежи
	й = Объект.Платежи.Количество() - 1;
	Пока й >= 0 Цикл
		Если НЕ ЗначениеЗаполнено(Объект.Платежи[й].Заказ) Тогда
			Объект.Платежи.Удалить(Объект.Платежи[й]);
		КонецЕсли;
		й = й - 1;
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ПлатежиСуммаУдержаноПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Платежи.ТекущиеДанные;
	ТекСтрока.СуммаКВозврату = (ТекСтрока.НПФактНал+ТекСтрока.НПФактБезнал) - ТекСтрока.СуммаУдержано;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ ЗАКАЗЫ

&НаКлиенте
Процедура ЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// При двойном клике на строке открывается Заказ
	ПоказатьЗначение(,Элемент.ТекущиеДанные.Заказ);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ КНОПОК

#Область ОбработчикиКомандФормы

// Ввод накладной заказа
&НаКлиенте
Процедура ВвестиСканеромЗаказ(Команда)
	
	ОчиститьСообщения();
	
	ТекШтрихкод = "";	
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ОбработатьШтрихкодЗаказаЗавершение", ЭтаФорма), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодЗаказаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
	Если НЕ ПустаяСтрока(Результат) Тогда
		ПоискПоВхНакладной = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(ПредопределенноеЗначение("Перечисление.ES_ВидыСтартовыхНастроек.ПоискЗаказовПоВхНакладной"));
		Если ПоискПоВхНакладной = Истина Тогда
			СтрокаПоиска = "ВхНакладная";
		Иначе
			СтрокаПоиска = "НомерНакладной";
		КонецЕсли;
		
		
		НайденныеСтроки = Объект.Заказы.НайтиСтроки(Новый Структура(СтрокаПоиска, Результат));
		Если НЕ НайденныеСтроки.Количество() = 0 Тогда
			Сообщить("Заказ с номером накладной " + Результат + " уже добавлен");
			Возврат;
		КонецЕсли;
		
        ОбработатьШтрихкодыЗаказа(Результат,СтрокаПоиска);
	КонецЕсли;


КонецПроцедуры


// Подобрать платежи
&НаКлиенте
Процедура ПодобратьПлатежи(Команда)
	
	Если Объект.Проведен Тогда
		Сообщить("Проведенный документ нельзя редактировать!");
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.Заказчик) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Поле ""Заказчик"" не заполнено!";
		Сообщение.Поле = "Объект.Заказчик";
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли;
	
	//ЕФСОЛ Несторук 17.08.2016+
	Если НЕ ЗначениеЗаполнено(Объект.ВидЗачетаПоПлатежам) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Выберите вид зачета платежей!";
		Сообщение.Поле = "Объект.ВидЗачетаПоПлатежам";
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли;
	//ЕФСОЛ Несторук 17.08.2016-
	
	//ЭР Несторук С.И. 14.08.2017 9:54:10 {
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указана организация!";
		Сообщение.Поле = "Объект.Организация";
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли;
	//}ЭР Несторук С.И.
	Если Объект.Платежи.Количество() > 0 Тогда
	 
		ТекстВопроса = Нстр("ru = 'Табличная часть ""Платежи"" будет очищена. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьВопросПоОчисткеТчПлатежиЗавершение", ЭтаФорма), ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Возврат;

	КонецЕсли;
	
	ОткрытьФормуПодбораПлатежей();

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросПоОчисткеТчПлатежиЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если НЕ Результат = КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
	
	Объект.Платежи.Очистить();
	ОткрытьФормуПодбораПлатежей();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораПлатежей()
	
	Уникальность = "ФормаПодбораПлатежей" + Объект.Ссылка;
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПлатежиПоПодобранымЗаказамЗавершение",ЭтаФорма);
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ВидПодбора", "Платежи");
	ПараметрыПодбора.Вставить("ВидЗачета", Объект.ВидЗачетаПоПлатежам);
	ПараметрыПодбора.Вставить("ВидОплаты" , Объект.ВидОплаты);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Заказчик);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
		
	ОткрытьФорму("ОбщаяФорма.ES_ФормаПодбора", ПараметрыПодбора, ЭтаФорма, Уникальность,,,Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПлатежиПоПодобранымЗаказамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		ЗаполнитьПлатежиЗаказамиДоставки(Результат);
		//ЕФСОЛ Несторук 17.08.2016 +
		//Если Объект.ВидЗачетаПоПлатежам = ПредопределенноеЗначение("Перечисление.ES_ВидыЗачетаПоПлатежамВозврата.УчетРКО") Тогда
		//УчестьПроцентУдержанияВСуммахЗаказов();
		//КонецЕсли;
	    //ЕФСОЛ Несторук 17.08.2016 -
	КонецЕсли;

	ПересчетТЧ();
	
КонецПроцедуры

// Подобрать заказы
&НаКлиенте
Процедура ПодобратьЗаказы(Команда)
	
	Если Объект.Проведен Тогда
		Сообщить("Для проведенного документа подбирать заказы нельзя");
		Возврат;
	КонецЕсли; 
		
	Если НЕ ЗначениеЗаполнено(Объект.Заказчик) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Поле ""Заказчик"" не заполнено!";
		Сообщение.Поле = "Объект.Заказчик";
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли;
	
	//ЭР Несторук С.И. 10.02.2017 12:10:46 {
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ES_ВидыОперацийВозвраты.Заказы") Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Поле ""Склад"" не заполнено!";
			Сообщение.Поле = "Объект.Склад";
			Сообщение.Сообщить(); 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//ЭР Несторук С.И. 10.02.2017 12:10:46 }

	
	//ЭР Несторук С.И. 14.08.2017 9:54:10 {
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указана организация!";
		Сообщение.Поле = "Объект.Организация";
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли;
	//}ЭР Несторук С.И.

	Если Объект.Заказы.Количество() > 0 Тогда
	 
		ТекстВопроса = Нстр("ru = 'Табличная часть ""Заказы"" будет очищена. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьВопросПоОчисткеТчЗаказыЗавершение", ЭтаФорма), ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Возврат;

	КонецЕсли;
	
	ОткрытьФормуПодбораЗаказов();

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросПоОчисткеТчЗаказыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если НЕ Результат = КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
	
	Объект.Заказы.Очистить();
	//ЭР Несторук С.И. 10.02.2017 12:47:46 {
	Объект.Грузы.Очистить();
	//ЭР Несторук С.И. 10.02.2017 12:47:46 }
	ОткрытьФормуПодбораЗаказов();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораЗаказов()
	
	Уникальность = "ФормаПодбораЗаказов" + Объект.Ссылка;
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗаказыПоПодобранымЗаказамЗавершение",ЭтаФорма);
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ВидПодбора", "Заказы");
	ПараметрыПодбора.Вставить("Контрагент", Объект.Заказчик);
	ПараметрыПодбора.Вставить("ВидОплаты", Неопределено);
	//ЭР Несторук С.И. 10.02.2017 10:58:48 {
	ПараметрыПодбора.Вставить("Склад", Объект.Склад);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	//ЭР Несторук С.И. 10.02.2017 10:58:48 }
		
	ОткрытьФорму("ОбщаяФорма.ES_ФормаПодбора", ПараметрыПодбора, ЭтаФорма, Уникальность,,,Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаказыПоПодобранымЗаказамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		ЗаполнитьТЧЗаказы(Результат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УчестьВознаграждение(Команда)
	
	Если Объект.ИтогоУдержано = 0 Тогда
		Сообщить(НСтр("ru = 'Нет удержанной суммы!'"), СтатусСообщения.Важное);
		Возврат;
	КонецЕсли; 
	
	Если НЕ Объект.Проведен Тогда
		Сообщить(НСтр("ru = 'Документ не проведен!'"), СтатусСообщения.Важное);
		Возврат;
	КонецЕсли; 
	
	Если Модифицированность Тогда
		Сообщить(НСтр("ru = 'Документ был изменен. Его необходимо провести'"), СтатусСообщения.Важное);
		Возврат;
	КонецЕсли; 
	
	ОчиститьСообщения();
	
	ОтменаСозданияРасходныхНакладных = ПроверитьДанныеПередГрупповымСозданиемРасходныхНакладных(Объект.Ссылка);
	Если ОтменаСозданияРасходныхНакладных Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Расходные накладные не созданы!'"));
		Возврат;
	КонецЕсли; 
	
	СсылкаНаНовыйДок = СоздатьРННаСервере();
	Если НЕ СсылкаНаНовыйДок = Неопределено Тогда
		ПоказатьОповещениеПользователя(
						НСтр("ru = 'Создание:'"),
						ПолучитьНавигационнуюСсылку(СсылкаНаНовыйДок),
						Строка(СсылкаНаНовыйДок),
						БиблиотекаКартинок.Информация32);
		Сообщить("Создан новый документ " + Строка(СсылкаНаНовыйДок) + ".");
	КонецЕсли; 
КонецПроцедуры


// Процедура создает документы Расходная накладная с видом операции Учесть вознаграждение
&НаСервере
Функция СоздатьРННаСервере()
	
	ДоговорПоУмолчанию = Объект.Заказчик.ДоговорПоУмолчанию;
	Склад = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойСклад");
	Если НЕ ЗначениеЗаполнено(Склад)  Тогда
		Склад = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;	
	КонецЕсли;
	ДокКомментарий = "Создан автоматически";
	
	НовыйДокумент = Документы.РасходнаяНакладная.СоздатьДокумент();
	НовыйДокумент.Дата 				 = ТекущаяДата();
	НовыйДокумент.Автор 			 = Пользователи.ТекущийПользователь();
	НовыйДокумент.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Объект.Организация, , ТекущаяДата());;
	НовыйДокумент.ДокументОснование  = Объект.Ссылка;
	НовыйДокумент.Контрагент         = Объект.Заказчик;
	НовыйДокумент.Договор            = ДоговорПоУмолчанию;
	НовыйДокумент.ВидОперации        = Перечисления.ВидыОперацийРасходнаяНакладная.ES_АгентскоеВознаграждение;
	НовыйДокумент.Организация        = Объект.Организация;	
	НовыйДокумент.СтруктурнаяЕдиница = Склад;
	
	НовыйДокумент.ВалютаДокумента 	= ДоговорПоУмолчанию.ВалютаРасчетов;
	ВалютаРасчетовКурсКратность 	= РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекущаяДата(), Новый Структура("Валюта", ДоговорПоУмолчанию.ВалютаРасчетов));
	НовыйДокумент.Курс      		= ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
	НовыйДокумент.Кратность 		= ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1, ВалютаРасчетовКурсКратность.Кратность);
	НовыйДокумент.Комментарий 		= ДокКомментарий;
	
	// Добавление услуги в ТЧ Запасы
	УслугаРКО = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.УслугаРКО);
	
	НоваяСтрока = НовыйДокумент.Запасы.Добавить();
	НоваяСтрока.Номенклатура = УслугаРКО;
	НоваяСтрока.ТипНоменклатурыЗапас = Ложь;
	НоваяСтрока.ЕдиницаИзмерения = УслугаРКО.ЕдиницаИзмерения; 
	НоваяСтрока.Количество 		= 1;
	НоваяСтрока.СтавкаНДС 		= УслугаРКО.СтавкаНДС;
	НоваяСтрока.Цена 			= Объект.ИтогоУдержано;
	НоваяСтрока.Сумма 			= НоваяСтрока.Цена * НоваяСтрока.Количество;
	НоваяСтрока.Всего 			= НоваяСтрока.Сумма;
	
	СсылкаНаНовыйДок = Неопределено;
	
	Попытка
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		// Сообщить о создании нового документа
		СсылкаНаНовыйДок = НовыйДокумент.Ссылка;
		УстановитьКартинкуКнопки(Элементы.ФормаУчестьВознаграждение, Истина);
		
	Исключение
		НовыйДокумент.Записать();
		СсылкаНаНовыйДок = НовыйДокумент.Ссылка;
		Сообщить(НСтр("ru= 'Не удалось провести Расходную накладную'"), СтатусСообщения.Важное);
	КонецПопытки;
		
	Возврат СсылкаНаНовыйДок;
	
КонецФункции

//ЕФСОЛ Несторук 17.08.2016 +
&НаКлиенте
Процедура Взаимозачет(Команда)
	
		
	Если Объект.ИтогоУдержано = 0 Тогда
		Сообщить(НСтр("ru = 'Нет удержанной суммы!'"), СтатусСообщения.Важное);
		Возврат;
	КонецЕсли; 
	
	Если НЕ Объект.Проведен Тогда
		Сообщить(НСтр("ru = 'Документ не проведен!'"), СтатусСообщения.Важное);
		Возврат;
	КонецЕсли; 
	
	Если Модифицированность Тогда
		Сообщить(НСтр("ru = 'Документ был изменен. Его необходимо провести'"), СтатусСообщения.Важное);
		Возврат;
	КонецЕсли; 
	
	ОчиститьСообщения();

	ОтменаСозданияПоступленияВКассу = ПроверитьДанныеПередСозданиемПоступленияВКассу(Объект.Ссылка);
	Если ОтменаСозданияПоступленияВКассу Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Поступление в кассу не создано!'"));
		Возврат;
	КонецЕсли; 
	
	СсылкаНаНовыйДок = СоздатьПоступлениеВКассуНаСервере(Объект.Ссылка);
	Если НЕ СсылкаНаНовыйДок = Неопределено Тогда
		ПоказатьОповещениеПользователя(
						НСтр("ru = 'Создание:'"),
						ПолучитьНавигационнуюСсылку(СсылкаНаНовыйДок),
						Строка(СсылкаНаНовыйДок),
						БиблиотекаКартинок.Информация32);
	Сообщить("Создан новый документ " + Строка(СсылкаНаНовыйДок) + ".");
	КонецЕсли;

КонецПроцедуры


Функция ПроверитьДанныеПередСозданиемПоступленияВКассу(ДокСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеВКассу.Ссылка
		|ИЗ
		|	Документ.ПоступлениеВКассу КАК ПоступлениеВКассу
		|ГДЕ
		|	ПоступлениеВКассу.ДокументОснование = &ДокументОснование
		|	И НЕ ПоступлениеВКассу.ПометкаУдаления
		|	И ПоступлениеВКассу.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВКассу.ОтПокупателя)";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции


&НаСервере
Функция СоздатьПоступлениеВКассуНаСервере(ДокСсылка)
	
	НалогообложениеНДС 	= УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Объект.Организация, , ТекущаяДата());
	НовыйДокумент = Документы.ПоступлениеВКассу.СоздатьДокумент();
	НовыйДокумент.Дата = ТекущаяДата();
	НовыйДОкумент.Контрагент = Объект.Заказчик;
	НовыйДокумент.НалогообложениеНДС = НалогообложениеНДС;
	НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя;
	НовыйДокумент.Статья = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей");
	НовыйДокумент.Организация = Объект.Организация;
	НовыйДокумент.Касса = Объект.Касса;
	НовыйДокумент.ВариантЗаполненияРасшифровки = Перечисления.ВариантыЗаполненияРасшифровкиПлатежа.Вручную;
	НовыйДокумент.ДокументОснование = Объект.Ссылка;
	Для каждого Стр Из Объект.Платежи Цикл
		//добавляем заказы в ТЧ РасшифровкаПлатежа	
		НовСтр = НовыйДокумент.РасшифровкаПлатежа.Добавить();
		НовСтр.Договор = Объект.Заказчик.ДоговорПоУмолчанию;
		НовСтр.ПризнакАванса = Истина;
		НовСтр.СуммаРасчетов = Стр.СуммаУдержано;
		НовСтр.СуммаПлатежа =  Стр.СуммаУдержано;
		НовСтр.Заказ = Стр.Заказ;
		//НовСтр.СтавкаНДС = 
		НовСтр.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию);
		НовСтр.СуммаНДС =	НовСтр.СуммаРасчетов * УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НовСтр.СтавкаНДС)/100; 
	КонецЦикла;
	НовыйДокумент.ВалютаДенежныхСредств = УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета();
	НовыйДокумент.СуммаДокумента = НовыйДокумент.РасшифровкаПлатежа.Итог("СуммаРасчетов");
	СсылкаНаНовыйДок = Неопределено;
	
	Попытка
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		// Сообщить о создании нового документа
		СсылкаНаНовыйДок = НовыйДокумент.Ссылка;
	Исключение
		НовыйДокумент.Записать();
		СсылкаНаНовыйДок = НовыйДокумент.Ссылка;
		Сообщить(НСтр("ru= 'Не удалось провести Поступление в кассу'"), СтатусСообщения.Важное);
	КонецПопытки;
	
	Возврат СсылкаНаНовыйДок;

КонецФункции
//ЕФСОЛ Несторук 17.08.2016 -

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент

//ЕФСОЛ Несторук 17.08.2016 +
&НаКлиенте
Процедура ВидЗачетаПоПлатежамПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьЭлементовФормы();
	
	ПересчетТЧ();
	
КонецПроцедуры
//ЕФСОЛ Несторук 17.08.2016 -

Процедура ПересчетТЧ()
	
	//ЭР Несторук С.И. 28.03.2019 10:46:05 {
	УчетРКО = Объект.УчетРКО;
	Взаимозачет = Объект.Взаимозачет;
	
	Для каждого Стр ИЗ Объект.Платежи Цикл
		НПФакт = Стр.НПФактНал + Стр.НПФактБезнал;
		Стр.СуммаУдержано = ?(УчетРКО И Взаимозачет, (НПФакт*Объект.ПроцентУдержания/100) + Стр.Стоимость,
		?(УчетРКО, (НПФакт*Объект.ПроцентУдержания/100),
		?(Взаимозачет, Стр.Стоимость,0)));
		Стр.СуммаКВозврату = НПФакт - Стр.СуммаУдержано;
	КонецЦикла;
	//}ЭР Несторук С.И.
	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементовФормы()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ES_ВидыОперацийВозвраты.Заказы") Тогда
		Элементы.ПроцентУдержания.Видимость 	= Ложь;
		Элементы.ПроцентУдержания.Доступность 	= Ложь;
		Элементы.ГруппаПлатежи.Видимость 	= Ложь;
		Элементы.ГруппаПлатежи.Доступность 	= Ложь;
		Элементы.ГруппаЗаказы.Видимость 	= Истина;
		Элементы.ГруппаЗаказы.Доступность 	= Истина;
		Элементы.ВидЗачетаПоПлатежам.Видимость = Ложь;
		Элементы.ВидОплаты.Видимость 			= Ложь;
		Элементы.ГруппаДС.Видимость				= Ложь;
		Элементы.Склад.Видимость 			= Истина;
		Элементы.ФормаРасходНП.Видимость	= Ложь;
		Элементы.Подвал.Видимость			= Ложь;
		//ES_Савченко К.Р. 28.09.2017 +
        Элементы.Итоги.Видимость            = Ложь;
	    //ES_Савченко К.Р. 28.09.2017 -

	Иначе
		//ЕФСОЛ Несторук 17.08.2016 +
		//Если Объект.ВидЗачетаПоПлатежам = ПредопределенноеЗначение("Перечисление.ES_ВидыЗачетаПоПлатежамВозврата.УчетРКО") Тогда
		Элементы.ПроцентУдержания.Видимость = Объект.УчетРКО;
		Элементы.ПроцентУдержания.Доступность 	= Объект.УчетРКО;
		Элементы.ПлатежиПлательщик.Видимость = Объект.Взаимозачет;
		Элементы.ПлатежиСтоимость.Видимость = Объект.Взаимозачет;
		//Элементы.ФормаУчестьВознаграждение.Видимость = Истина;
		//Элементы.ФормаУчестьВознаграждение.Доступность = Истина;
		Элементы.ФормаВзаимозачет.Видимость = Объект.Взаимозачет;
		Элементы.ФормаВзаимозачет.Доступность = Объект.Взаимозачет;
		
		Элементы.ВидОплаты.СписокВыбора.Очистить();
		
		Элементы.ВидОплаты.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Наличные"));
		Если Объект.УчетРКО Тогда
			Элементы.ВидОплаты.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные"));
		КонецЕсли;
			
		//ИначеЕсли Объект.ВидЗачетаПоПлатежам = ПредопределенноеЗначение("Перечисление.ES_ВидыЗачетаПоПлатежамВозврата.Взаимозачет") Тогда 
			//Элементы.ПроцентУдержания.Видимость = Ложь;
			//Элементы.ПроцентУдержания.Доступность 	= Ложь;
			//Элементы.ПлатежиПлательщик.Видимость = Истина;
			//Элементы.ПлатежиСтоимость.Видимость = Истина;
			////Элементы.ФормаУчестьВознаграждение.Видимость = Ложь;
			////Элементы.ФормаУчестьВознаграждение.Доступность = Ложь;
			////Элементы.ФормаВзаимозачет.Видимость = Истина;
			//Элементы.ФормаВзаимозачет.Доступность = Истина;
			//Элементы.ВидОплаты.СписокВыбора.Очистить();
			//Элементы.ВидОплаты.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Наличные"));
		//КонецЕсли;
		//ЕФСОЛ Несторук 17.08.2016 -
				
		Элементы.ГруппаПлатежи.Видимость 	= Истина;
		Элементы.ГруппаПлатежи.Доступность 	= Истина;
		Элементы.ГруппаЗаказы.Видимость 	= Ложь;
		Элементы.ГруппаЗаказы.Доступность 	= Ложь;
		//Элементы.ВидЗачетаПоПлатежам.Видимость = Истина;
		Элементы.ВидОплаты.Видимость 			= Истина;
		Элементы.ГруппаДС.Видимость				= Истина;
		Элементы.Склад.Видимость 			= Ложь;
		Элементы.ФормаРасходНП.Видимость	= Истина;
		Элементы.Подвал.Видимость			= Истина;
		//ES_Савченко К.Р. 28.09.2017 +
        Элементы.Итоги.Видимость            = Истина;
		//ES_Савченко К.Р. 28.09.2017 -

	КонецЕсли; 
		
	//Элементы.КОплате.Доступность = НЕ Объект.Проведен;
	//Элементы.ПлатежиКОплате.Видимость = Объект.КОплате;  
	//Элементы.ПлатежиИтогКОплате.Видимость = Объект.КОплате;     	 
	
	Элементы.ВвестиСканеромЗаказ.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.F7);
	Элементы.Группа1.Видимость = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ES_ВидыОперацийВозвраты.Платежи");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКассаСчет()
	
	Если Объект.ВидОплаты = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Наличные") Тогда
		
		Элементы.Касса.Видимость = Истина;
		Элементы.Касса.Доступность = Истина;
		Элементы.Счет.Видимость = Ложь;
		Элементы.Счет.Доступность = Ложь;
		
	ИначеЕсли Объект.ВидОплаты = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные") Тогда 	
		
		Элементы.Касса.Видимость = Ложь;
		Элементы.Касса.Доступность = Ложь;
		Элементы.Счет.Видимость = Истина;
		Элементы.Счет.Доступность = Истина;
		
	КонецЕсли; 
КонецПроцедуры
 
&НаКлиенте
Процедура УчестьПроцентУдержанияВСуммахЗаказов()
	
	Для каждого Стр Из Объект.Платежи Цикл
		//НПФакт = ?(Стр.НПФактНал = 0, Стр.НПФактБезнал, Стр.НПФактНал);
		НПФакт = Стр.НПФактБезнал+ Стр.НПФактНал;
		Если Объект.ПроцентУдержания = 0 Тогда
			Стр.КОплате = 0;
			Стр.СуммаУдержано = 0;
			Стр.СуммаКВозврату = НПФакт;//Стр.НПФакт;
		Иначе
			//Если Объект.КОплате Тогда
			//	Стр.КОплате = НПФакт * Объект.ПроцентУдержания / 100;//Стр.НПФакт * Объект.ПроцентУдержания / 100;
			//	Стр.СуммаКВозврату = НПФакт;//Стр.НПФакт - Стр.СуммаУдержано;
			//    Стр.СуммаУдержано = 0;
			//Иначе
			Стр.КОплате = 0;	
			Стр.СуммаУдержано = НПФакт * Объект.ПроцентУдержания / 100;//Стр.НПФакт * Объект.ПроцентУдержания / 100;
			Стр.СуммаКВозврату = НПФакт - Стр.СуммаУдержано;//Стр.НПФакт - Стр.СуммаУдержано;
			//КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 

	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

// Если кнопки "Расход из кассы" и "Расход со счета" будут сделаны отдельнымы, а не типовыми методами Создать на основании,
//  то можно установить картинку кнопкам
&НаСервере
Процедура УстановитьПризнакиСозданияДокументовНаОснованииВозврата()
	
	//СтруктураПризнаков = ES_ОбщегоНазначения.ПолучитьПризнакУчета(Объект.Ссылка);
	//РасходДенег = СтруктураПризнаков.РасходДенег;
	//
	//ЭлементФормыКнопка = ?(Объект.ВидОплаты = Перечисления.ТипыДенежныхСредств.Безналичные, Элементы.);
	//ES_ОбщегоНазначенияКлиентСервер.УстановитьКартинкуДляКнопки(ЭлементФормыКнопка, РасходДенег);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПлатежиЗаказамиДоставки(МассивЗаказов)                                                         

	ДанныеПоЗаказам = ПолучитьДанныеПоЗаказам(МассивЗаказов);
	Если ДанныеПоЗаказам.Количество() > 0 Тогда
		Для каждого ТекЗаказ Из ДанныеПоЗаказам Цикл
			НовСтр = Объект.Платежи.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ТекЗаказ);
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧЗаказы(МассивЗаказов)

//ДанныеПоЗаказам = ПолучитьДанныеПоЗаказам(МассивЗаказов);
	ДанныеПоЗаказам = ПолучитьДанныеПоЗаказамДляТЧЗаказы(МассивЗаказов);
	ВыборкаПоЗаказам = ДанныеПоЗаказам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоЗаказам.Следующий() Цикл	
	//Если ДанныеПоЗаказам.Количество() > 0 Тогда
		//Для каждого ТекЗаказ Из ДанныеПоЗаказам Цикл
			//Стр = Объект.Заказы.Добавить();
			//Стр.НомерНакладной 	= ТекЗаказ.НомерНакладной;
			//Стр.Заказ 			= ТекЗаказ.Заказ;
			//Стр.СтатусЗаказа 	= ТекЗаказ.СтатусЗаказа;
			//Стр.ВхНакладная 	= ТекЗаказ.ВхНакладная;
			//Стр.Мест 			= ТекЗаказ.КоличествоМест;
			////Стр.НПФакт 			= ТекЗаказ.НПФакт;
			//Стр.Вес 			= ТекЗаказ.Вес;
			//Стр.ОбъемныйВес 	= ТекЗаказ.ОбщийОбъемныйВес;
			//Стр.Комментарий 	= ТекЗаказ.Комментарий;
			//
			Стр = Объект.Заказы.Добавить();
			Стр.НомерНакладной 	= ВыборкаПоЗаказам.НомерНакладной;
			Стр.Заказ 			= ВыборкаПоЗаказам.Заказ;
			Стр.СтатусЗаказа 	= ВыборкаПоЗаказам.СтатусЗаказа;
			Стр.ВхНакладная 	= ВыборкаПоЗаказам.ВхНакладная;
			Стр.ВидДоставки		= ВыборкаПоЗаказам.ВидДоставки;
			Стр.Мест 			= ВыборкаПоЗаказам.КоличествоМест;
			//Стр.НПФакт 			= ТекЗаказ.НПФакт;
			Стр.Вес 			= ВыборкаПоЗаказам.Вес;
			Стр.ОбъемныйВес 	= ВыборкаПоЗаказам.ОбщийОбъемныйВес;
			Стр.Комментарий 	= ВыборкаПоЗаказам.Комментарий;
			Стр.Ячейка 			= ВыборкаПоЗаказам.Ячейка;
			ДанныеПоЗапасам = ВыборкаПоЗаказам.Выбрать();
			Пока ДанныеПоЗапасам.Следующий() Цикл
				//ЭР Несторук С.И. 10.02.2017 12:30:21 {
				Если Не ЗначениеЗаполнено(ДанныеПоЗапасам.ЗапасНоменклатура) Тогда
					Продолжить;
				КонецЕсли;
				//ЭР Несторук С.И.}
						
				НовыйГруз = Объект.Грузы.Добавить();
				НовыйГруз.ДокументДоставки 		= ДанныеПоЗапасам.ЗапасДокументДоставки;
				НовыйГруз.НомерСтрокиВЗаказе 	= ДанныеПоЗапасам.ЗапасНомерСтроки;
				НовыйГруз.Номенклатура 			= ДанныеПоЗапасам.ЗапасНоменклатура;
				НовыйГруз.ТипНоменклатурыЗапас 	= ДанныеПоЗапасам.ЗапасТипНоменклатурыЗапас;
				НовыйГруз.Характеристика 		= ДанныеПоЗапасам.ЗапасХарактеристика;
				НовыйГруз.Партия 				= ДанныеПоЗапасам.ЗапасПартия;
				НовыйГруз.КоличествоПлан 		= ДанныеПоЗапасам.ЗапасКоличество;
				НовыйГруз.КоличествоФакт 		= ДанныеПоЗапасам.ЗапасКоличествоОстаток;
				НовыйГруз.ЕдиницаИзмерения 		= ДанныеПоЗапасам.ЗапасЕдиницаИзмерения;
				НовыйГруз.Цена 					= ДанныеПоЗапасам.ЗапасЦена;
				НовыйГруз.ПроцентСкидкиНаценки 	= ДанныеПоЗапасам.ЗапасПроцентСкидкиНаценки;
				НовыйГруз.НППлан 				= ДанныеПоЗапасам.ЗапасНППлан;
				НовыйГруз.НПФакт 				= ДанныеПоЗапасам.ЗапасНПФакт;
				НовыйГруз.Содержание 			= ДанныеПоЗапасам.ЗапасСодержание;
				НовыйГруз.Вес		 			= ДанныеПоЗапасам.ЗапасВес;
				НовыйГруз.Объем 				= ДанныеПоЗапасам.ЗапасОбъем;
				НовыйГруз.ОбъемныйВес 			= ДанныеПоЗапасам.ЗапасОбьявленнаяСтоимость;
				НовыйГруз.Опасность 			= ДанныеПоЗапасам.ЗапасОпасность;
				НовыйГруз.Артикул				= ДанныеПоЗапасам.ЗапасАртикул;
				НовыйГруз.Штрихкод				= ДанныеПоЗапасам.ЗапасШтрихкод;
	          				
			КонецЦикла;
						
		КонецЦикла;  
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеПоЗаказамДляТЧЗаказы (МассивЗаказов)
	
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	
	Массив = Новый Массив();	
	Для Каждого Строка Из МассивЗаказов Цикл
		НоваястрокаТЗ = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, Строка);
		//Массив.Добавить(НоваястрокаТЗ.Заказ);
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказ КАК Заказ,
		|	ES_ДанныеПоЗаказамСрезПоследних.ДатаДокумента КАК ДатаДокумента,
		|	ES_ДанныеПоЗаказамСрезПоследних.ДатаДоставки КАК ДатаДоставки,
		|	ES_ДанныеПоЗаказамСрезПоследних.СтоимостьДоставки КАК СтоимостьДоставки,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВидДоставки КАК ВидДоставки,
		|	ES_ДанныеПоЗаказамСрезПоследних.Организация КАК Организация,
		|	ES_ДанныеПоЗаказамСрезПоследних.Плательщик КАК Плательщик,
		|	ES_ДанныеПоЗаказамСрезПоследних.Получатель КАК Получатель,
		|	ES_ДанныеПоЗаказамСрезПоследних.НомерНакладной КАК НомерНакладной,
		|	ES_ДанныеПоЗаказамСрезПоследних.КоличествоМест КАК КоличествоМест,
		|	ES_ДанныеПоЗаказамСрезПоследних.НППлан КАК НППлан,
		|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийВес КАК ОбщийВес,
		|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийОбъемныйВес КАК ОбщийОбъемныйВес,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВхНакладная КАК ВхНакладная
		|ПОМЕСТИТЬ ВТ_Док
		|ИЗ
		|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(, Заказ В (&МассивЗаказов)) КАК ES_ДанныеПоЗаказамСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ES_ИзменяемыеРеквизитыЗаказаСрезПоследних.Заказ КАК Заказ,
		|	ES_ИзменяемыеРеквизитыЗаказаСрезПоследних.Значение КАК КассаНП
		|ПОМЕСТИТЬ ВТ_Касса
		|ИЗ
		|	РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
		|			,
		|			Заказ В
		|					(ВЫБРАТЬ
		|						ВТ_Док.Заказ
		|					ИЗ
		|						ВТ_Док КАК ВТ_Док)
		|				И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Касса)) КАК ES_ИзменяемыеРеквизитыЗаказаСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ES_ИзменяемыеРеквизитыЗаказаСрезПоследних.Заказ КАК Заказ,
		|	ES_ИзменяемыеРеквизитыЗаказаСрезПоследних.Значение КАК КассаНП
		|ПОМЕСТИТЬ ВТ_Счет
		|ИЗ
		|	РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
		|			,
		|			Заказ В
		|					(ВЫБРАТЬ
		|						ВТ_Док.Заказ
		|					ИЗ
		|						ВТ_Док КАК ВТ_Док)
		|				И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Счет)) КАК ES_ИзменяемыеРеквизитыЗаказаСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ES_НоменклатураВЗаказахСрезПоследних.НомерСтроки КАК ЗапасНомерСтроки,
		|	ES_НоменклатураВЗаказахСрезПоследних.ДокументДоставки КАК ЗапасДокументДоставки,
		|	ES_НоменклатураВЗаказахСрезПоследних.Характеристика КАК ЗапасХарактеристика,
		|	ES_НоменклатураВЗаказахСрезПоследних.Номенклатура КАК ЗапасНоменклатура,
		|	ES_НоменклатураВЗаказахСрезПоследних.Партия КАК ЗапасПартия,
		|	ES_НоменклатураВЗаказахСрезПоследних.ЕдиницаИзмерения КАК ЗапасЕдиницаИзмерения,
		|	ES_НоменклатураВЗаказахСрезПоследних.ТипНоменклатурыЗапас КАК ЗапасТипНоменклатурыЗапас,
		|	ES_НоменклатураВЗаказахСрезПоследних.Количество КАК ЗапасКоличество,
		|	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Количество, 0) - ЕСТЬNULL(ES_НоменклатураВыданная.КоличествоФакт, 0) КАК ЗапасКоличествоОстаток,
		|	ES_НоменклатураВЗаказахСрезПоследних.НППлан КАК ЗапасНППлан,
		|	(ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Количество, 0) - ЕСТЬNULL(ES_НоменклатураВыданная.КоличествоФакт, 0)) * ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Цена, 0) КАК ЗапасНПФакт,
		|	ES_НоменклатураВЗаказахСрезПоследних.Содержание КАК ЗапасСодержание,
		|	ES_НоменклатураВЗаказахСрезПоследних.Цена КАК ЗапасЦена,
		|	ES_НоменклатураВЗаказахСрезПоследних.ПроцентСкидкиНаценки КАК ЗапасПроцентСкидкиНаценки,
		|	ES_НоменклатураВЗаказахСрезПоследних.Вес КАК ЗапасВес,
		|	ES_НоменклатураВЗаказахСрезПоследних.Объем КАК ЗапасОбъем,
		|	ES_НоменклатураВЗаказахСрезПоследних.ОбъемныйВес КАК ЗапасОбъемныйВес,
		|	ES_НоменклатураВЗаказахСрезПоследних.ОбьявленнаяСтоимость КАК ЗапасОбьявленнаяСтоимость,
		|	ES_НоменклатураВЗаказахСрезПоследних.Опасность КАК ЗапасОпасность,
		|	ES_НоменклатураВЗаказахСрезПоследних.Артикул КАК ЗапасАртикул,
		|	ES_НоменклатураВЗаказахСрезПоследних.Штрихкод КАК ЗапасШтрихкод
		|ПОМЕСТИТЬ ВТ_Запасы
		|ИЗ
		|	РегистрСведений.ES_НоменклатураВЗаказах.СрезПоследних(
		|			,
		|			ДокументДоставки В
		|				(ВЫБРАТЬ
		|					ВТ_Док.Заказ
		|				ИЗ
		|					ВТ_Док КАК ВТ_Док)) КАК ES_НоменклатураВЗаказахСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ES_НоменклатураВыданная КАК ES_НоменклатураВыданная
		|		ПО ES_НоменклатураВЗаказахСрезПоследних.ДокументДоставки = ES_НоменклатураВыданная.Заказ
		|			И ES_НоменклатураВЗаказахСрезПоследних.Номенклатура = ES_НоменклатураВыданная.Номенклатура
		|			И ES_НоменклатураВЗаказахСрезПоследних.Характеристика = ES_НоменклатураВыданная.Характеристика
		|			И ES_НоменклатураВЗаказахСрезПоследних.Содержание = ES_НоменклатураВыданная.Содержание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Значение КАК Ячейка,
		|	ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Заказ КАК Заказ
		|ПОМЕСТИТЬ ВТ_Ячейка
		|ИЗ
		|	РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
		|			,
		|			Заказ В
		|					(ВЫБРАТЬ
		|						ВТ_Док.Заказ
		|					ИЗ
		|						ВТ_Док КАК ВТ_Док)
		|				И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Ячейка)) КАК ES_ИзменяемыеРеквизитыЗаказовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Док.Заказ КАК Заказ,
		|	ВТ_Док.ДатаДокумента КАК ДатаДокумента,
		|	ВТ_Док.СтоимостьДоставки КАК СтоимостьДоставки,
		|	ВТ_Док.Организация КАК Организация,
		|	ВТ_Док.Плательщик КАК Плательщик,
		|	ВТ_Док.НомерНакладной КАК НомерНакладной,
		|	ВТ_Док.ДатаДоставки КАК ДатаДоставки,
		|	ВТ_Док.ВидДоставки КАК ВидДоставки,
		|	ВТ_Док.КоличествоМест КАК КоличествоМест,
		|	ВТ_Док.Получатель КАК Получатель,
		|	ВТ_Док.НППлан КАК НППлан,
		|	ВТ_Док.ОбщийВес КАК Вес,
		|	ВТ_Док.ОбщийОбъемныйВес КАК ОбщийОбъемныйВес,
		|	ВТ_Док.ВхНакладная КАК ВхНакладная,
		|	ЕСТЬNULL(ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа, НЕОПРЕДЕЛЕНО) КАК СтатусЗаказа,
		|	ЕСТЬNULL(ВТ_Касса.КассаНП, НЕОПРЕДЕЛЕНО) КАК Касса,
		|	ЕСТЬNULL(ВТ_Счет.КассаНП, НЕОПРЕДЕЛЕНО) КАК Счет,
		|	ЕСТЬNULL(ES_НаложенныеПлатежиОстаткиИОбороты.СуммаНППриход, 0) КАК НПФакт,
		|	ЕСТЬNULL(ES_НаложенныеПлатежиОстаткиИОбороты.СуммаНПКонечныйОстаток, 0) КАК НПкВозврату,
		|	ЕСТЬNULL(ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Значение, """") КАК Комментарий,
		|	ЕСТЬNULL(ES_НаложенныеПлатежиОстаткиИОбороты.СуммаНП_НалПриход, 0) КАК НПФактНал,
		|	ЕСТЬNULL(ES_НаложенныеПлатежиОстаткиИОбороты.СуммаНП_НалКонечныйОстаток, 0) КАК НПкВозвратуНал,
		|	ЕСТЬNULL(ES_НаложенныеПлатежиОстаткиИОбороты.СуммаНП_БезналПриход, 0) КАК НПФактБезнал,
		|	ЕСТЬNULL(ES_НаложенныеПлатежиОстаткиИОбороты.СуммаНП_БезналКонечныйОстаток, 0) КАК НПкВозвратуБезнал,
		|	ВТ_Запасы.ЗапасНомерСтроки КАК ЗапасНомерСтроки,
		|	ЕСТЬNULL(ВТ_Ячейка.Ячейка, ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)) КАК Ячейка,
		|	ВТ_Запасы.ЗапасДокументДоставки КАК ЗапасДокументДоставки,
		|	ВТ_Запасы.ЗапасХарактеристика КАК ЗапасХарактеристика,
		|	ВТ_Запасы.ЗапасНоменклатура КАК ЗапасНоменклатура,
		|	ВТ_Запасы.ЗапасПартия КАК ЗапасПартия,
		|	ВТ_Запасы.ЗапасЕдиницаИзмерения КАК ЗапасЕдиницаИзмерения,
		|	ВТ_Запасы.ЗапасТипНоменклатурыЗапас КАК ЗапасТипНоменклатурыЗапас,
		|	ВТ_Запасы.ЗапасНППлан КАК ЗапасНППлан,
		|	ВТ_Запасы.ЗапасКоличество КАК ЗапасКоличество,
		|	ВТ_Запасы.ЗапасСодержание КАК ЗапасСодержание,
		|	ВТ_Запасы.ЗапасЦена КАК ЗапасЦена,
		|	ВТ_Запасы.ЗапасПроцентСкидкиНаценки КАК ЗапасПроцентСкидкиНаценки,
		|	ВТ_Запасы.ЗапасВес КАК ЗапасВес,
		|	ВТ_Запасы.ЗапасОбъем КАК ЗапасОбъем,
		|	ВТ_Запасы.ЗапасОбъемныйВес КАК ЗапасОбъемныйВес,
		|	ВТ_Запасы.ЗапасОбьявленнаяСтоимость КАК ЗапасОбьявленнаяСтоимость,
		|	ВТ_Запасы.ЗапасОпасность КАК ЗапасОпасность,
		|	ВТ_Запасы.ЗапасКоличествоОстаток КАК ЗапасКоличествоОстаток,
		|	ВТ_Запасы.ЗапасНПФакт КАК ЗапасНПФакт,
		|	ВТ_Запасы.ЗапасАртикул КАК ЗапасАртикул,
		|	ВТ_Запасы.ЗапасШтрихкод КАК ЗапасШтрихкод
		|ИЗ
		|	ВТ_Док КАК ВТ_Док
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(, Заказ В (&МассивЗаказов)) КАК ES_СтатусыЗаказовСрезПоследних
		|		ПО ВТ_Док.Заказ = ES_СтатусыЗаказовСрезПоследних.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ES_НаложенныеПлатежи.ОстаткиИОбороты(
		|				,
		|				,
		|				,
		|				,
		|				Заказ В (&МассивЗаказов)
		|					И Заказчик = &Заказчик) КАК ES_НаложенныеПлатежиОстаткиИОбороты
		|		ПО ВТ_Док.Заказ = ES_НаложенныеПлатежиОстаткиИОбороты.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Касса КАК ВТ_Касса
		|		ПО ВТ_Док.Заказ = ВТ_Касса.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Счет КАК ВТ_Счет
		|		ПО ВТ_Док.Заказ = ВТ_Счет.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
		|				,
		|				Заказ В (&МассивЗаказов)
		|					И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Комментарий)) КАК ES_ИзменяемыеРеквизитыЗаказовСрезПоследних
		|		ПО ВТ_Док.Заказ = ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Запасы КАК ВТ_Запасы
		|		ПО ВТ_Док.Заказ = ВТ_Запасы.ЗапасДокументДоставки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Ячейка КАК ВТ_Ячейка
		|		ПО ВТ_Док.Заказ = ВТ_Ячейка.Заказ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерНакладной,
		|	ДатаДокумента,
		|	ЗапасНомерСтроки
		|ИТОГИ
		|	МАКСИМУМ(ДатаДокумента),
		|	МАКСИМУМ(СтоимостьДоставки),
		|	МАКСИМУМ(Организация),
		|	МАКСИМУМ(Плательщик),
		|	МАКСИМУМ(НомерНакладной),
		|	МАКСИМУМ(ДатаДоставки),
		|	МАКСИМУМ(ВидДоставки),
		|	МАКСИМУМ(КоличествоМест),
		|	МАКСИМУМ(Получатель),
		|	МАКСИМУМ(НППлан),
		|	МАКСИМУМ(Вес),
		|	МАКСИМУМ(ОбщийОбъемныйВес),
		|	МАКСИМУМ(ВхНакладная),
		|	МАКСИМУМ(СтатусЗаказа),
		|	МАКСИМУМ(Касса),
		|	МАКСИМУМ(Счет),
		|	МАКСИМУМ(НПФакт),
		|	МАКСИМУМ(НПкВозврату),
		|	МАКСИМУМ(Комментарий),
		|	МАКСИМУМ(НПФактНал),
		|	МАКСИМУМ(НПкВозвратуНал),
		|	МАКСИМУМ(НПФактБезнал),
		|	МАКСИМУМ(НПкВозвратуБезнал),
		|	МАКСИМУМ(Ячейка)
		|ПО
		|	Заказ";
	
	Запрос.УстановитьПараметр("Заказчик", Объект.Заказчик);
	Запрос.УстановитьПараметр("МассивЗаказов", ТЗ);
	
	Возврат Запрос.Выполнить();


	
КонецФункции


&НаСервере
Функция ПолучитьДанныеПоЗаказам(МассивЗаказов)
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	ТЗ.Колонки.Добавить("Касса", Новый ОписаниеТипов("СправочникСсылка.Кассы"));
	ТЗ.Колонки.Добавить("Счет", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	
	Для Каждого Строка Из МассивЗаказов Цикл
		НоваястрокаТЗ = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, Строка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказ,
		|	ES_ДанныеПоЗаказамСрезПоследних.ДатаДокумента,
		|	ES_ДанныеПоЗаказамСрезПоследних.ДатаДоставки,
		|	ES_ДанныеПоЗаказамСрезПоследних.СтоимостьДоставки,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВидДоставки,
		|	ES_ДанныеПоЗаказамСрезПоследних.Организация,
		|	ES_ДанныеПоЗаказамСрезПоследних.Плательщик,
		|	ES_ДанныеПоЗаказамСрезПоследних.Получатель,
		|	ES_ДанныеПоЗаказамСрезПоследних.НомерНакладной,
		|	ES_ДанныеПоЗаказамСрезПоследних.КоличествоМест,
		|	ES_ДанныеПоЗаказамСрезПоследних.НППлан,
		|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийВес,
		|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийОбъемныйВес,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВхНакладная,
		|	ES_ДанныеПоЗаказамСрезПоследних.СтоимостьДоставки КАК СтоимостьДоставки1,
		|	ES_ДанныеПоЗаказамСрезПоследних.ЧекНаОбщуюСумму,
		|	ES_ДанныеПоЗаказамСрезПоследних.ЗачетНП
		|ПОМЕСТИТЬ ВТ_Док
		|ИЗ
		|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(, Заказ В (&МассивЗаказов)) КАК ES_ДанныеПоЗаказамСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ES_ИзменяемыеРеквизитыЗаказаСрезПоследних.Заказ,
		|	ES_ИзменяемыеРеквизитыЗаказаСрезПоследних.Значение КАК КассаНП
		|ПОМЕСТИТЬ ВТ_Касса
		|ИЗ
		|	РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
		|			,
		|			Заказ В
		|					(ВЫБРАТЬ
		|						ВТ_Док.Заказ
		|					ИЗ
		|						ВТ_Док КАК ВТ_Док)
		|				И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Касса)) КАК ES_ИзменяемыеРеквизитыЗаказаСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ES_ИзменяемыеРеквизитыЗаказаСрезПоследних.Заказ,
		|	ES_ИзменяемыеРеквизитыЗаказаСрезПоследних.Значение КАК КассаНП
		|ПОМЕСТИТЬ ВТ_Счет
		|ИЗ
		|	РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
		|			,
		|			Заказ В
		|					(ВЫБРАТЬ
		|						ВТ_Док.Заказ
		|					ИЗ
		|						ВТ_Док КАК ВТ_Док)
		|				И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Счет)) КАК ES_ИзменяемыеРеквизитыЗаказаСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Док.Заказ КАК Заказ,
		|	ВТ_Док.ДатаДокумента КАК ДатаДокумента,
		|	ВТ_Док.СтоимостьДоставки КАК СтоимостьДоставки,
		|	ВТ_Док.Организация КАК Организация,
		|	ВТ_Док.Плательщик КАК Плательщик,
		|	ВТ_Док.НомерНакладной КАК НомерНакладной,
		|	ВТ_Док.ДатаДоставки,
		|	ВТ_Док.ВидДоставки,
		|	ВТ_Док.КоличествоМест,
		|	ВТ_Док.Получатель,
		|	ВТ_Док.НППлан,
		|	ВТ_Док.ОбщийВес КАК Вес,
		|	ВТ_Док.ОбщийОбъемныйВес,
		|	ВТ_Док.ВхНакладная,
		|	ЕСТЬNULL(ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа, НЕОПРЕДЕЛЕНО) КАК СтатусЗаказа,
		|	ЕСТЬNULL(ВТ_Касса.КассаНП, НЕОПРЕДЕЛЕНО) КАК Касса,
		|	ЕСТЬNULL(ВТ_Счет.КассаНП, НЕОПРЕДЕЛЕНО) КАК Счет,
		|	ЕСТЬNULL(ES_НаложенныеПлатежиОстаткиИОбороты.СуммаНППриход, 0) КАК НПФакт,
		|	ЕСТЬNULL(ES_НаложенныеПлатежиОстаткиИОбороты.СуммаНПКонечныйОстаток, 0) КАК НПкВозврату,
		|	ЕСТЬNULL(ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Значение, """") КАК Комментарий,
		|	ЕСТЬNULL(ES_НаложенныеПлатежиОстаткиИОбороты.СуммаНП_НалПриход, 0) КАК НПФактНал,
		|	ЕСТЬNULL(ES_НаложенныеПлатежиОстаткиИОбороты.СуммаНП_НалКонечныйОстаток, 0) КАК НПкВозвратуНал,
		|	ЕСТЬNULL(ES_НаложенныеПлатежиОстаткиИОбороты.СуммаНП_БезналПриход, 0) КАК НПФактБезнал,
		|	ЕСТЬNULL(ES_НаложенныеПлатежиОстаткиИОбороты.СуммаНП_БезналКонечныйОстаток, 0) КАК НПкВозвратуБезнал,
		|	ВТ_Док.СтоимостьДоставки КАК Стоимость,
		|	ВТ_Док.ЧекНаОбщуюСумму,
		|	ВТ_Док.ЗачетНП
		|ПОМЕСТИТЬ ВТ_Общая
		|ИЗ
		|	ВТ_Док КАК ВТ_Док
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(, Заказ В (&МассивЗаказов)) КАК ES_СтатусыЗаказовСрезПоследних
		|		ПО ВТ_Док.Заказ = ES_СтатусыЗаказовСрезПоследних.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ES_НаложенныеПлатежи.ОстаткиИОбороты(
		|				,
		|				,
		|				,
		|				,
		|				Заказ В (&МассивЗаказов)
		|					И Заказчик = &Заказчик) КАК ES_НаложенныеПлатежиОстаткиИОбороты
		|		ПО ВТ_Док.Заказ = ES_НаложенныеПлатежиОстаткиИОбороты.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Касса КАК ВТ_Касса
		|		ПО ВТ_Док.Заказ = ВТ_Касса.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Счет КАК ВТ_Счет
		|		ПО ВТ_Док.Заказ = ВТ_Счет.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
		|				,
		|				Заказ В (&МассивЗаказов)
		|					И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Комментарий)) КАК ES_ИзменяемыеРеквизитыЗаказовСрезПоследних
		|		ПО ВТ_Док.Заказ = ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Общая.Заказ,
		|	ВТ_Общая.ДатаДокумента,
		|	ВТ_Общая.СтоимостьДоставки,
		|	ВТ_Общая.Организация,
		|	ВТ_Общая.Плательщик,
		|	ВТ_Общая.НомерНакладной,
		|	ВТ_Общая.ДатаДоставки,
		|	ВТ_Общая.ВидДоставки,
		|	ВТ_Общая.КоличествоМест,
		|	ВТ_Общая.Получатель,
		|	ВТ_Общая.НППлан,
		|	ВТ_Общая.Вес,
		|	ВТ_Общая.ОбщийОбъемныйВес,
		|	ВТ_Общая.ВхНакладная,
		|	ВТ_Общая.СтатусЗаказа,
		|	ВТ_Общая.Касса,
		|	ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка) КАК Счет,
		|	ВТ_Общая.НПкВозвратуНал КАК НПкВозврату,
		|	ВТ_Общая.Комментарий,
		|	ВТ_Общая.НПФактНал,
		|	0 КАК НПФактБезнал,
		|	ВТ_Общая.Стоимость,
		|	ВТ_Общая.ЧекНаОбщуюСумму,
		|	ВТ_Общая.ЗачетНП
		|ПОМЕСТИТЬ ВТ_ОбщаяСДубСтр
		|ИЗ
		|	ВТ_Общая КАК ВТ_Общая
		|ГДЕ
		|	ВТ_Общая.НПФактНал > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Общая.Заказ,
		|	ВТ_Общая.ДатаДокумента,
		|	ВТ_Общая.СтоимостьДоставки,
		|	ВТ_Общая.Организация,
		|	ВТ_Общая.Плательщик,
		|	ВТ_Общая.НомерНакладной,
		|	ВТ_Общая.ДатаДоставки,
		|	ВТ_Общая.ВидДоставки,
		|	ВТ_Общая.КоличествоМест,
		|	ВТ_Общая.Получатель,
		|	ВТ_Общая.НППлан,
		|	ВТ_Общая.Вес,
		|	ВТ_Общая.ОбщийОбъемныйВес,
		|	ВТ_Общая.ВхНакладная,
		|	ВТ_Общая.СтатусЗаказа,
		|	ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка),
		|	ВТ_Общая.Счет,
		|	ВТ_Общая.НПкВозвратуБезнал,
		|	ВТ_Общая.Комментарий,
		|	0,
		|	ВТ_Общая.НПФактБезнал,
		|	ВТ_Общая.Стоимость,
		|	ВТ_Общая.ЧекНаОбщуюСумму,
		|	ВТ_Общая.ЗачетНП
		|ИЗ
		|	ВТ_Общая КАК ВТ_Общая
		|ГДЕ
		|	ВТ_Общая.НПФактБезнал > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ИзФормыПодбора.Заказ,
		|	ВТ_ИзФормыПодбора.Касса,
		|	ВТ_ИзФормыПодбора.Счет
		|ПОМЕСТИТЬ ВТ_ИзФормыПодбора
		|ИЗ
		|	&ВТ_Подбора КАК ВТ_ИзФормыПодбора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ИзФормыПодбора.Заказ,
		|	ВТ_ОбщаяСДубСтр.ДатаДокумента,
		|	ВТ_ОбщаяСДубСтр.СтоимостьДоставки,
		|	ВТ_ОбщаяСДубСтр.Организация,
		|	ВТ_ОбщаяСДубСтр.Плательщик,
		|	ВТ_ОбщаяСДубСтр.НомерНакладной,
		|	ВТ_ОбщаяСДубСтр.ДатаДоставки,
		|	ВТ_ОбщаяСДубСтр.ВидДоставки,
		|	ВТ_ОбщаяСДубСтр.КоличествоМест,
		|	ВТ_ОбщаяСДубСтр.Получатель,
		|	ВТ_ОбщаяСДубСтр.НППлан,
		|	ВТ_ОбщаяСДубСтр.Вес,
		|	ВТ_ОбщаяСДубСтр.ОбщийОбъемныйВес,
		|	ВТ_ОбщаяСДубСтр.ВхНакладная,
		|	ВТ_ОбщаяСДубСтр.СтатусЗаказа,
		|	ВТ_ОбщаяСДубСтр.Касса,
		|	ВТ_ОбщаяСДубСтр.Счет,
		|	ВТ_ОбщаяСДубСтр.Комментарий,
		|	ВТ_ОбщаяСДубСтр.НПФактНал,
		|	ВТ_ОбщаяСДубСтр.НПФактБезнал,
		|	ВТ_ОбщаяСДубСтр.НПкВозврату,
		|	ВТ_ОбщаяСДубСтр.Стоимость,
		|	ВТ_ОбщаяСДубСтр.ЧекНаОбщуюСумму,
		|	ВТ_ОбщаяСДубСтр.ЗачетНП
		|ИЗ
		|	ВТ_ИзФормыПодбора КАК ВТ_ИзФормыПодбора
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОбщаяСДубСтр КАК ВТ_ОбщаяСДубСтр
		|		ПО ВТ_ИзФормыПодбора.Заказ = ВТ_ОбщаяСДубСтр.Заказ
		|			И ВТ_ИзФормыПодбора.Касса = ВТ_ОбщаяСДубСтр.Касса
		|			И ВТ_ИзФормыПодбора.Счет = ВТ_ОбщаяСДубСтр.Счет";

	Запрос.УстановитьПараметр("Заказчик", Объект.Заказчик);
	Запрос.УстановитьПараметр("ВТ_Подбора", ТЗ);
	//Запрос.УстановитьПараметр("Счет", Объект.Заказчик);
	Запрос.УстановитьПараметр("МассивЗаказов", ТЗ);

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ОбработатьШтрихкодыЗаказа(ТекШтрихКод,СрокаПоиска)
	
	Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ES_ДанныеПоЗаказамСрезПоследних.Заказ,
			|	ES_ДанныеПоЗаказамСрезПоследних.НомерНакладной,
			|	ES_ДанныеПоЗаказамСрезПоследних.КоличествоМест КАК Мест,
			|	ES_ДанныеПоЗаказамСрезПоследних.НППлан,
			|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийВес КАК Вес,
			|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийОбъемныйВес КАК ОбъемныйВес,
			|	ES_ДанныеПоЗаказамСрезПоследних.Заказчик,
			|	ES_ДанныеПоЗаказамСрезПоследних.ВидДоставки,
			|	ES_ДанныеПоЗаказамСрезПоследних.ВхНакладная
			|ПОМЕСТИТЬ ВТ
			|ИЗ
			|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(, "+СрокаПоиска+" = &ТекШтрихКод) КАК ES_ДанныеПоЗаказамСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ES_НоменклатураВЗаказахСрезПоследних.НомерСтроки КАК ЗапасНомерСтроки,
			|	ES_НоменклатураВЗаказахСрезПоследних.ДокументДоставки КАК ЗапасДокументДоставки,
			|	ES_НоменклатураВЗаказахСрезПоследних.Номенклатура КАК ЗапасНоменклатура,
			|	ES_НоменклатураВЗаказахСрезПоследних.Характеристика КАК ЗапасХарактеристика,
			|	ES_НоменклатураВЗаказахСрезПоследних.Партия КАК ЗапасПартия,
			|	ES_НоменклатураВЗаказахСрезПоследних.ЕдиницаИзмерения КАК ЗапасЕдиницаИзмерения,
			|	ES_НоменклатураВЗаказахСрезПоследних.ТипНоменклатурыЗапас КАК ЗапасТипНоменклатурыЗапас,
			|	ES_НоменклатураВЗаказахСрезПоследних.Количество КАК ЗапасКоличество,
			|	ES_НоменклатураВЗаказахСрезПоследних.НППлан КАК ЗапасНППлан,
			|	ES_НоменклатураВЗаказахСрезПоследних.Содержание КАК ЗапасСодержание,
			|	ES_НоменклатураВЗаказахСрезПоследних.Цена КАК ЗапасЦена,
			|	ES_НоменклатураВЗаказахСрезПоследних.ПроцентСкидкиНаценки КАК ЗапасПроцентСкидкиНаценки,
			|	ES_НоменклатураВЗаказахСрезПоследних.Вес КАК ЗапасВес,
			|	ES_НоменклатураВЗаказахСрезПоследних.Объем КАК ЗапасОбъем,
			|	ES_НоменклатураВЗаказахСрезПоследних.ОбъемныйВес КАК ЗапасОбъемныйВес,
			|	ES_НоменклатураВЗаказахСрезПоследних.ОбьявленнаяСтоимость КАК ЗапасОбьявленнаяСтоимость,
			|	ES_НоменклатураВЗаказахСрезПоследних.Опасность КАК ЗапасОпасность,
			|	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Количество, 0) - ЕСТЬNULL(ES_НоменклатураВыданная.КоличествоФакт, 0) КАК ЗапасКоличествоОстаток,
			|	(ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Количество, 0) - ЕСТЬNULL(ES_НоменклатураВыданная.КоличествоФакт, 0)) * ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Цена, 0) КАК ЗапасНПФакт,
			|	ES_НоменклатураВЗаказахСрезПоследних.Артикул КАК ЗапасАртикул,
			|	ES_НоменклатураВЗаказахСрезПоследних.Штрихкод КАК ЗапасШтрихкод
			|ПОМЕСТИТЬ ВТ_Запасы
			|ИЗ
			|	РегистрСведений.ES_НоменклатураВЗаказах.СрезПоследних(
			|			,
			|			ДокументДоставки В
			|				(ВЫБРАТЬ
			|					ВТ.Заказ
			|				ИЗ
			|					ВТ КАК ВТ)) КАК ES_НоменклатураВЗаказахСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ES_НоменклатураВыданная КАК ES_НоменклатураВыданная
			|		ПО ES_НоменклатураВЗаказахСрезПоследних.ДокументДоставки = ES_НоменклатураВыданная.Заказ
			|			И ES_НоменклатураВЗаказахСрезПоследних.Номенклатура = ES_НоменклатураВыданная.Номенклатура
			|			И ES_НоменклатураВЗаказахСрезПоследних.Характеристика = ES_НоменклатураВыданная.Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ.Заказ КАК Заказ,
			|	ВТ.НомерНакладной КАК НомерНакладной,
			|	ВТ.Мест КАК Мест,
			|	ВТ.НППлан КАК НППлан,
			|	ВТ.Вес КАК Вес,
			|	ВТ.ОбъемныйВес КАК ОбъемныйВес,
			|	ВТ.Заказчик КАК Заказчик,
			|	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа КАК СтатусЗаказа,
			|	ВТ_Запасы.ЗапасНомерСтроки КАК ЗапасНомерСтроки,
			|	ВТ_Запасы.ЗапасДокументДоставки,
			|	ВТ_Запасы.ЗапасНоменклатура,
			|	ВТ_Запасы.ЗапасХарактеристика,
			|	ВТ_Запасы.ЗапасПартия,
			|	ВТ_Запасы.ЗапасЕдиницаИзмерения,
			|	ВТ_Запасы.ЗапасТипНоменклатурыЗапас,
			|	ВТ_Запасы.ЗапасКоличество,
			|	ВТ_Запасы.ЗапасНППлан,
			|	ВТ_Запасы.ЗапасСодержание,
			|	ВТ_Запасы.ЗапасЦена,
			|	ВТ_Запасы.ЗапасПроцентСкидкиНаценки,
			|	ВТ_Запасы.ЗапасВес,
			|	ВТ_Запасы.ЗапасОбъем,
			|	ВТ_Запасы.ЗапасОбьявленнаяСтоимость,
			|	ВТ_Запасы.ЗапасОпасность,
			|	ВТ_Запасы.ЗапасОбъемныйВес,
			|	ВТ_Запасы.ЗапасКоличествоОстаток,
			|	ВТ_Запасы.ЗапасНПФакт,
			|	ВТ_Запасы.ЗапасАртикул,
			|	ВТ_Запасы.ЗапасШтрихкод,
			|	ВТ.ВидДоставки КАК ВидДоставки,
			|	ВТ.ВхНакладная КАК ВхНакладная
			|ИЗ
			|	ВТ КАК ВТ
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(
			|				,
			|				Заказ В
			|					(ВЫБРАТЬ
			|						ВТ.Заказ
			|					ИЗ
			|						ВТ КАК ВТ)) КАК ES_СтатусыЗаказовСрезПоследних
			|		ПО ВТ.Заказ = ES_СтатусыЗаказовСрезПоследних.Заказ
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Запасы КАК ВТ_Запасы
			|		ПО ВТ.Заказ = ВТ_Запасы.ЗапасДокументДоставки
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерНакладной,
			|	ЗапасНомерСтроки
			|ИТОГИ
			|	МАКСИМУМ(НомерНакладной),
			|	МАКСИМУМ(Мест),
			|	МАКСИМУМ(НППлан),
			|	МАКСИМУМ(Вес),
			|	МАКСИМУМ(ОбъемныйВес),
			|	МАКСИМУМ(Заказчик),
			|	МАКСИМУМ(СтатусЗаказа),
			|	МАКСИМУМ(ВидДоставки),
			|	МАКСИМУМ(ВхНакладная)
			|ПО
			|	Заказ");
		
	Запрос.УстановитьПараметр("ТекШтрихКод", ТекШтрихКод);
			
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если Выборка.Следующий() Тогда
			
			Если  Выборка.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Отменен 
				ИЛИ Выборка.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Некондиция
				ИЛИ Выборка.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставлен 
				ИЛИ Выборка.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Отказ
				ИЛИ Выборка.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставленРассчитать
				ИЛИ Выборка.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ОтмененПринят
				Тогда
				
				НоваяСтрока = Объект.Заказы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				//Объект.Заказы.Добавить();
				ВыборкаЗапасы = Выборка.Выбрать();
				Пока Выборказапасы.Следующий() Цикл
					
					Если НЕ ЗначениеЗаполнено(ВыборкаЗапасы.ЗапасНоменклатура) Тогда
						Продолжить;
					КонецЕсли;
					
					НовыйГруз = Объект.Грузы.Добавить();
					НовыйГруз.ДокументДоставки 		= ВыборкаЗапасы.ЗапасДокументДоставки;
					НовыйГруз.НомерСтрокиВЗаказе 	= ВыборкаЗапасы.ЗапасНомерСтроки;
					НовыйГруз.Номенклатура 			= ВыборкаЗапасы.ЗапасНоменклатура;
					НовыйГруз.ТипНоменклатурыЗапас 	= ВыборкаЗапасы.ЗапасТипНоменклатурыЗапас;
					НовыйГруз.Характеристика 		= ВыборкаЗапасы.ЗапасХарактеристика;
					НовыйГруз.Партия 				= ВыборкаЗапасы.ЗапасПартия;
					НовыйГруз.КоличествоПлан 		= ВыборкаЗапасы.ЗапасКоличество;
					НовыйГруз.КоличествоФакт 		= ВыборкаЗапасы.ЗапасКоличествоОстаток;
					НовыйГруз.ЕдиницаИзмерения 		= ВыборкаЗапасы.ЗапасЕдиницаИзмерения;
					НовыйГруз.Цена 					= ВыборкаЗапасы.ЗапасЦена;
					НовыйГруз.ПроцентСкидкиНаценки 	= ВыборкаЗапасы.ЗапасПроцентСкидкиНаценки;
					НовыйГруз.НППлан 				= ВыборкаЗапасы.ЗапасНППлан;
					НовыйГруз.НПФакт 				= ВыборкаЗапасы.ЗапасНПФакт;
					НовыйГруз.Содержание 			= ВыборкаЗапасы.ЗапасСодержание;
				    НовыйГруз.Вес		 			= ВыборкаЗапасы.ЗапасВес;
					НовыйГруз.Объем 				= ВыборкаЗапасы.ЗапасОбъем;
					НовыйГруз.ОбъемныйВес 			= ВыборкаЗапасы.ЗапасОбъемныйВес;
					НовыйГруз.Опасность 			= ВыборкаЗапасы.ЗапасОпасность;
					НовыйГруз.Артикул				= ВыборкаЗапасы.ЗапасАртикул;
					НовыйГруз.Штрихкод				= ВыборкаЗапасы.ЗапасШтрихкод;					 				
					
				КонецЦикла;
			Иначе
	        ОбщегоНазначенияКлиентСервер.СообщитьПользователю("" + Выборка.Заказ + """ в статусе '" + Выборка.СтатусЗаказа + "'. Не может быть выбран");
			КонецЕсли;
						
		КонецЕсли; 
		
	Иначе	
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заказ с данным штрихкодом в системе не заведен");
		
	КонецЕсли;  
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПроверитьДанныеПередГрупповымСозданиемРасходныхНакладных(ДокСсылка)
	
	// Контроль: не создавать такие же РасходныеНакладные
	Запрос = Новый Запрос;	
	Запрос.Текст = 
			"ВЫБРАТЬ
			|	РасходнаяНакладная.Ссылка КАК РасходнаяНакладная
			|ИЗ
			|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
			|ГДЕ
			|	РасходнаяНакладная.ДокументОснование = &ДокументОснование
			|	И НЕ РасходнаяНакладная.ПометкаУдаления
			|	И РасходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ES_АгентскоеВознаграждение)";	
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Сообщить("На основании документа уже созданы ""Расходные накладые"".");
		Возврат Истина;
	КонецЕсли; 
	
	Возврат Ложь;

КонецФункции

// ОПОВЕЩЕНИЯ

&НаКлиенте
Процедура ОбработатьВопросПоПерезаполнениюДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если НЕ Результат = КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
	
	Объект.Платежи.Очистить();
	Объект.Заказы.Очистить();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура ПлатежиНПФактНалПриИзменении(Элемент)
	УчестьПроцентУдержанияВСуммахЗаказов();
	РассчетКОплате();
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиНПФактБезналПриИзменении(Элемент)
	УчестьПроцентУдержанияВСуммахЗаказов();
	РассчетКОплате();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПриАктивизацииСтроки(Элемент)
	ОтборСтрокВТчГрузы(Элемент.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте 
Процедура ОтборСтрокВТчГрузы(ТекСтрока)
		
	Если ТекСтрока <> Неопределено
		И ТекСтрока.Заказ <> Неопределено Тогда
		Элементы.Грузы.ОтборСтрок	= Новый ФиксированнаяСтруктура("ДокументДоставки", ТекСтрока.Заказ);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПередУдалением(Элемент, Отказ)
	
	Если Объект.Проведен Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РасходНП(Команда)
	
	Если Объект.Платежи.Итог("СуммаКВозврату") = 0 Тогда
		Сообщить(НСтр("ru = 'Нет суммы к возврату!'"), СтатусСообщения.Важное);
		Возврат;
	КонецЕсли; 
	
	Если НЕ Объект.Проведен Тогда
		Сообщить(НСтр("ru = 'Документ не проведен!'"), СтатусСообщения.Важное);
		Возврат;
	КонецЕсли; 
	
	Если Модифицированность Тогда
		Сообщить(НСтр("ru = 'Документ был изменен. Его необходимо провести'"), СтатусСообщения.Важное);
		Возврат;
	КонецЕсли; 
	
	ОчиститьСообщения();
	СоздатьРасходныеДокументы(Объект.ВидОплаты, Объект.Ссылка); 

	
КонецПроцедуры

&НаСервере
Процедура СоздатьРасходныеДокументы(ВидОплаты, Основание)
	
	мДокумент = Неопределено;
	Если ВидОплаты = Перечисления.ТипыДенежныхСредств.Наличные Тогда
		мДокумент = Документы.РасходИзКассы.СоздатьДокумент();
	ИначеЕсли ВидОплаты = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
		мДокумент = Документы.РасходСоСчета.СоздатьДокумент();
	КонецЕсли;
	
	
	
	Если мДокумент <> Неопределено Тогда
		мДокумент.ЗаполнитьПоESВозвраты(Основание);
		мДокумент.Дата = ТекущаяДата();
		Попытка
			мДокумент.Записать(РежимЗаписиДокумента.Проведение);
			УстановитьКартинкуКнопки(Элементы.ФормаРасходНП, Истина);
		Исключение
			мДокумент.Записать();
		КонецПопытки;
		Сообщить(НСтр("ru='Создан "+ мДокумент.Ссылка+ "'"));
	КонецЕсли;
	
	

КонецПроцедуры // ()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура  ПоказатьСвязанныеДокументы()

	Если Объект.Проведен Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходИзКассы.Ссылка
		|ИЗ
		|	Документ.РасходИзКассы КАК РасходИзКассы
		|ГДЕ
		|	РасходИзКассы.ДокументОснование = &ДокументОснование
		|	И РасходИзКассы.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасходСоСчета.Ссылка
		|ИЗ
		|	Документ.РасходСоСчета КАК РасходСоСчета
		|ГДЕ
		|	РасходСоСчета.ДокументОснование = &ДокументОснование
		|	И РасходСоСчета.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасходнаяНакладная.Ссылка
		|ИЗ
		|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
		|ГДЕ
		|	РасходнаяНакладная.Проведен
		|	И РасходнаяНакладная.ДокументОснование = &ДокументОснование";
		
		Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ЕстьРасходная = Ложь;
			ЕстьРасходНП = Ложь;

			
			КоличествоДокументов = 0;
			СписокДокументов = "";
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
					ЕстьРасходная = Истина;
				Иначе
					ЕстьРасходНП = Истина;
				КонецЕсли;
				
				КоличествоДокументов = КоличествоДокументов + 1;
				СписокДокументов = СписокДокументов + Символы.ПС + Выборка.Ссылка;
			КонецЦикла;
			
			ТекстСообщения = "На основании Возврата созданы документы (" + КоличествоДокументов + "):";
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения + СписокДокументов;
			Сообщение.Сообщить(); 
			Если ЕстьРасходная Тогда
				УстановитьКартинкуКнопки(Элементы.ФормаУчестьВознаграждение, Истина);
			КонецЕсли;
			
			Если ЕстьРасходНП Тогда 
				УстановитьКартинкуКнопки(Элементы.ФормаРасходНП, Истина);
			КонецЕсли;
		
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ()

&НаСервере
Процедура УстановитьКартинкуКнопки(Кнопка, Установить)
	ES_ОбщегоНазначенияКлиентСервер.УстановитьКартинкуДляКнопки(Кнопка, Установить);	
КонецПроцедуры


&НаКлиенте
Процедура ЗаказчикПриИзменении(Элемент)
	
	ПодставитьДоговорПоУмолчанию();
	
КонецПроцедуры


&НаСервере
Процедура ПодставитьДоговорПоУмолчанию ()

	Объект.Договор = ES_ОбщегоНазначения.ПолучитьОсновнойДоговорКонтрагента(Объект.Организация, Объект.Заказчик);
	
	УстановитьПроцентРКО();
КонецПроцедуры // ()

&НаСервере
Процедура УстановитьПроцентРКО()
	Если Объект.ВидОперации = Перечисления.ES_ВидыОперацийВозвраты.Заказы Тогда
		Возврат;
	КонецЕсли;
	
	мДоговор = Объект.Договор;
	
	Если НЕ ЗначениеЗаполнено(мДоговор) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОплаты = Перечисления.ТипыДенежныхСредств.Наличные Тогда
		Если мДоговор.ES_ПроцентКомиссииНал > 0 Тогда
			Объект.ПроцентУдержания = мДоговор.ES_ПроцентКомиссииНал;
		КонецЕсли;
	ИначеЕсли Объект.ВидОплаты = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
		Если мДоговор.ES_ПроцентКомиссииБезнал > 0 Тогда
			Объект.ПроцентУдержания = мДоговор.ES_ПроцентКомиссииБезнал;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	УстановитьПроцентРКО();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	 Элементы.КОплате.Доступность = НЕ Объект.Проведен;

КонецПроцедуры
 
 &НаКлиенте
 Процедура КОплатеПриИзменении()  	 
	 
	Элементы.ПлатежиКОплате.Видимость = Объект.КОплате; 
	Элементы.ПлатежиИтогКОплате.Видимость = Объект.КОплате;
	
	//СтрокаТабличнойЧасти = Элементы.Платежи.ТекущиеДанные;
	//Если СтрокаТабличнойЧасти <> Неопределено Тогда	
	//	Если Объект.КОплате Тогда
	//		СтрокаТабличнойЧасти.СуммаУдержано = 0;
	//	КонецЕсли;  
	//КонецЕсли;
	//ЭР Несторук С.И. 02.10.2017 20:26:30 {
	ПересчетТЧПлатежиКОплате();
	//}ЭР Несторук С.И.
	
		 
 КонецПроцедуры   
 
&НаКлиенте
Процедура РассчетКОплате()
	
	//СтрокаТабличнойЧасти = Элементы.Платежи.ТекущиеДанные; 
	//Если СтрокаТабличнойЧасти <> Неопределено Тогда	
	//	Если СтрокаТабличнойЧасти.НПФактБезнал <> 0 Тогда
	//		СтрокаТабличнойЧасти.КОплате = СтрокаТабличнойЧасти.НПФактБезнал * Объект.ПроцентУдержания / 100; 	
	//	Иначе	
	//		СтрокаТабличнойЧасти.КОплате = СтрокаТабличнойЧасти.НПФактНал * Объект.ПроцентУдержания / 100;
	//	КонецЕсли;
	//КонецЕсли;

КонецПроцедуры    

&НаКлиенте
Процедура ПересчетТЧПлатежиКОплате()
	//ЭР Несторук С.И. 02.10.2017 20:58:22 {
	
	//Для каждого Стр ИЗ Объект.Платежи Цикл
	//	
	//	Если Объект.КОплате Тогда
	//		
	//		Если Объект.ВидЗачетаПоПлатежам = ПредопределенноеЗначение("Перечисление.ES_ВидыЗачетаПоПлатежамВозврата.УчетРКО") Тогда
	//			Стр.КОплате = (Стр.НПФактНал+Стр.НПФактБезнал)*Объект.ПроцентУдержания/100;
	//			Стр.СуммаУдержано	= 0;
	//			Стр.СуммаКВозврату = (Стр.НПФактНал+Стр.НПФактБезнал);
	//		ИначеЕсли Объект.ВидЗачетаПоПлатежам = ПредопределенноеЗначение("Перечисление.ES_ВидыЗачетаПоПлатежамВозврата.Взаимозачет") Тогда
	//			Стр.КОплате = Стр.Стоимость;
	//			Стр.СуммаКВозврату = (Стр.НПФактНал+Стр.НПФактБезнал);
	//			Стр.СуммаУдержано	= 0;
	//		КонецЕсли;
	//	Иначе
	//		Если Объект.ВидЗачетаПоПлатежам = ПредопределенноеЗначение("Перечисление.ES_ВидыЗачетаПоПлатежамВозврата.УчетРКО") Тогда
	//			Стр.КОплате =  0;
	//			Стр.СуммаУдержано	= (Стр.НПФактНал+Стр.НПФактБезнал)*Объект.ПроцентУдержания/100;
	//			Стр.СуммаКВозврату = (Стр.НПФактНал+Стр.НПФактБезнал) - Стр.СуммаУдержано;
	//		ИначеЕсли Объект.ВидЗачетаПоПлатежам = ПредопределенноеЗначение("Перечисление.ES_ВидыЗачетаПоПлатежамВозврата.Взаимозачет") Тогда
	//			Стр.КОплате = 0;
	//			Стр.СуммаУдержано	= Стр.Стоимость;
	//			Стр.СуммаКВозврату = (Стр.НПФактНал+Стр.НПФактБезнал)-Стр.Стоимость;
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//	
	//КонецЦикла;
	//}ЭР Несторук С.И.

КонецПроцедуры


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
	// УНФ
	СтатистикаИспользованияФормКлиент.ДобавитьСтатистикуПодключаемойКоманды(ЭтотОбъект, Команда);
	// Конец УНФ
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


#КонецОбласти

