#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	
	Платежи.Очистить();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	
	Если ПометкаУдаления ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		// Нельзя пометить на удаление и отменить проведение документа, если он проходит по другим документам
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(Ссылка);
		
		УстановитьПривилегированныйРежим(Истина);
		ТабНайденныхСсылок = НайтиПоСсылкам(МассивСсылок);
		УстановитьПривилегированныйРежим(Ложь);
		
		Для каждого Строка Из ТабНайденныхСсылок Цикл
			Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Строка.Данные)) Тогда
				//ЭР Несторук С.И. 13.10.2017 14:44:41 {
				//Смотрим ссылаются ли на документ проведенные документы, а не помеченные на удаление
				//Если НЕ Строка.Данные.ПометкаУдаления и НЕ Ссылка = Строка.Данные Тогда
				Если Строка.Данные.Проведен и НЕ Ссылка = Строка.Данные Тогда
					//}ЭР Несторук С.И.
					Сообщить("На документ ссылается " + Строка.Данные);
					Отказ = Истина;
					Возврат;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли; 
	
	// Очистить неиспользуемые поля в зависимости от вида операции
	Если ВидОперации = Перечисления.ES_ВидыОперацийВозвраты.Заказы Тогда
		ПроцентУдержания = 0;
		Платежи.Очистить();
	ИначеЕсли ВидОперации = Перечисления.ES_ВидыОперацийВозвраты.Платежи Тогда 
		Заказы.Очистить();
	КонецЕсли; 	
	
	// Очистить неиспользуемые поля в зависимости от вида оплаты
	Если ВидОплаты = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
		Касса = Неопределено;
	ИначеЕсли ВидОплаты = Перечисления.ТипыДенежныхСредств.Наличные Тогда 
		Счет = Неопределено;
	КонецЕсли; 
	
	// Удаление пустых строк в ТЧ Платежи
	й = Платежи.Количество() - 1;
	Пока й >= 0 Цикл
		Если НЕ ЗначениеЗаполнено(Платежи[й].Заказ) Тогда
			Платежи.Удалить(Платежи[й]);
		КонецЕсли;
		й = й - 1;
	КонецЦикла; 
	
	// Проверка задвоения данных в табличных частях
	Если Платежи.Количество() > 0 Тогда
		НовТЗ = Платежи.Выгрузить(,"Заказ");
		Если Платежи.Количество() <> НовТЗ.Количество() Тогда
			Сообщить("В табличной части ""Платежи"" задвоение заказов");
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
	// Проверка на пустые ТЧ
	Если Платежи.Количество() = 0 И Заказы.Количество() = 0 Тогда
		Сообщить("Пустой документ не может быть записан");
		Отказ = Истина;
	КонецЕсли;
	
	//ИтогоНПФакт 	= Платежи.Итог("НПФакт");
	ИтогоНПФакт 	= Платежи.Итог("НПФактНал") + Платежи.Итог("НПФактБезнал");
	ИтогоУдержано 	= Платежи.Итог("СуммаУдержано");
	СуммаДокумента 	= Платежи.Итог("СуммаКВозврату");
	
	////ЭР Несторук С.И. 07.03.2017 12:05:15 {
	//// Нельзя пометить на удаление если на основании Возврата есть проведенные расходники в кассу/ на счет или Расходная Накладная
	//Если ПометкаУдаления Тогда
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//		|	РасходСоСчета.Ссылка
	//		|ИЗ
	//		|	Документ.РасходСоСчета КАК РасходСоСчета
	//		|ГДЕ
	//		|	РасходСоСчета.ДокументОснование = &ДокументОснование
	//		|	И РасходСоСчета.Проведен
	//		|
	//		|ОБЪЕДИНИТЬ ВСЕ
	//		|
	//		|ВЫБРАТЬ
	//		|	РасходИзКассы.Ссылка
	//		|ИЗ
	//		|	Документ.РасходИзКассы КАК РасходИзКассы
	//		|ГДЕ
	//		|	РасходИзКассы.ДокументОснование = &ДокументОснование
	//		|	И РасходИзКассы.Проведен
	//		|
	//		|ОБЪЕДИНИТЬ ВСЕ
	//		|
	//		|ВЫБРАТЬ
	//		|	РасходнаяНакладная.Ссылка
	//		|ИЗ
	//		|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	//		|ГДЕ
	//		|	РасходнаяНакладная.Проведен
	//		|	И РасходнаяНакладная.ДокументОснование = &ДокументОснование";
	//	
	//	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	Если НЕ РезультатЗапроса.Пустой() Тогда
	//		ТекстСообщения = "На основании Возврата созданы документы: ";
	//		Выборка = РезультатЗапроса.Выбрать();
	//		Пока Выборка.Следующий() Цикл
	//			ТекстСообщения = ТекстСообщения + Символы.ПС + Выборка.Ссылка;
	//		КонецЦикла;
	//		
	//		Сообщение = Новый СообщениеПользователю;
	//		Сообщение.Текст = ТекстСообщения;
	//		Сообщение.Сообщить(); 
	//		
	//		Отказ = Истина;
	//	КонецЕсли; 

	//КонецЕсли; 

	//	//}ЭР Несторук С.И.
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#КонецЕсли

Процедура ОбработкаПроведения(Отказ, Режим)

	Если Платежи.Количество() > 0 Тогда
		//ЭР Несторук С.И. 15.08.2017 15:16:40 {
		НоменклатураРКО = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.УслугаРКО);
		Если НЕ ЗначениеЗаполнено(НоменклатураРКО) Тогда
			Отказ = Истина;
			Сообщить("Не заполнена номенклатура ""Расчетно-кассовое обслуживание"" в стратовых настройка");
			Возврат;
		КонецЕсли;
		мВалюта = Справочники.Валюты.НайтиПоКоду("643"); // рубли 
		Движения.ОплатаСчетовИЗаказов.Записывать 	= Истина;
		Движения.ДоходыИРасходы.Записывать 			= Истина;
		Движения.Управленческий.Записывать 			= Истина;
		Движения.Продажи.Записывать					= Истина;
		Движения.ЗаказыПокупателей.Записывать		= Истина;
		//}ЭР Несторук С.И.
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ES_ВозвратыПлатежи.Ссылка.Заказчик КАК Заказчик,
			|	ES_ВозвратыПлатежи.Заказ КАК Заказ,
			|	СУММА(ES_ВозвратыПлатежи.НПкВозврату) КАК НПкВозврату,
			|	СУММА(ES_ВозвратыПлатежи.СуммаУдержано) КАК СуммаУдержано,
			|	СУММА(ES_ВозвратыПлатежи.СуммаКВозврату) КАК СуммаКВозврату,
			|	СУММА(ES_ВозвратыПлатежи.НПФактНал) КАК НПФактНал,
			|	СУММА(ES_ВозвратыПлатежи.НПФактБезнал) КАК НПФактБезнал,
			|	ES_ВозвратыПлатежи.Стоимость КАК Стоимость,
			|	ES_ВозвратыПлатежи.Ссылка.Взаимозачет КАК Взаимозачет
			|ПОМЕСТИТЬ ВТ_ДокСГрупировал
			|ИЗ
			|	Документ.ES_Возвраты.Платежи КАК ES_ВозвратыПлатежи
			|ГДЕ
			|	ES_ВозвратыПлатежи.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ES_ВозвратыПлатежи.Заказ,
			|	ES_ВозвратыПлатежи.Ссылка.Заказчик,
			|	ES_ВозвратыПлатежи.Стоимость,
			|	ES_ВозвратыПлатежи.Ссылка.Взаимозачет
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ДокСГрупировал.Заказ КАК Заказ,
			|	ЕСТЬNULL(ES_НаложенныеПлатежиОстатки.СуммаНПОстаток, 0) КАК СуммаНПОстаток,
			|	ВТ_ДокСГрупировал.НПкВозврату КАК НПкВозврату,
			|	ВТ_ДокСГрупировал.СуммаУдержано КАК СуммаУдержано,
			|	ВТ_ДокСГрупировал.СуммаКВозврату КАК СуммаКВозврату,
			|	ВТ_ДокСГрупировал.НПФактНал КАК НПФактНал,
			|	ВТ_ДокСГрупировал.НПФактБезнал КАК НПФактБезнал,
			|	ЕСТЬNULL(ES_НаложенныеПлатежиОстатки.СуммаНП_НалОстаток, 0) КАК СуммаНП_НалОстаток,
			|	ЕСТЬNULL(ES_НаложенныеПлатежиОстатки.СуммаНП_БезналОстаток, 0) КАК СуммаНП_БезналОстаток,
			|	ВТ_ДокСГрупировал.Заказчик КАК Заказчик,
			|	ВТ_ДокСГрупировал.Стоимость КАК Стоимость,
			|	ВТ_ДокСГрупировал.Взаимозачет КАК Взаимозачет
			|ПОМЕСТИТЬ ВТ_Док
			|ИЗ
			|	ВТ_ДокСГрупировал КАК ВТ_ДокСГрупировал
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ES_НаложенныеПлатежи.Остатки(&Период, Заказчик = &Заказчик) КАК ES_НаложенныеПлатежиОстатки
			|		ПО ВТ_ДокСГрупировал.Заказ = ES_НаложенныеПлатежиОстатки.Заказ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Док.Заказ КАК Заказ,
			|	ВТ_Док.НПкВозврату КАК НПкВозврату,
			|	ВТ_Док.СуммаУдержано КАК СуммаУдержано,
			|	ВТ_Док.СуммаКВозврату КАК СуммаКВозврату,
			|	ЕСТЬNULL(ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа, НЕОПРЕДЕЛЕНО) КАК СтатусЗаказа,
			|	ВТ_Док.НПФактНал КАК НПФактНал,
			|	ВТ_Док.НПФактБезнал КАК НПФактБезнал,
			|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
			|	ЗаказыПокупателейОстатки.Характеристика КАК Характеристика,
			|	ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
			|	ВТ_Док.СуммаНП_НалОстаток КАК СуммаНП_НалОстаток,
			|	ВТ_Док.СуммаНП_БезналОстаток КАК СуммаНП_БезналОстаток,
			|	ВТ_Док.Заказчик КАК Заказчик,
			|	ВТ_Док.Стоимость КАК Стоимость,
			|	ЕСТЬNULL(ВТ_Док.Взаимозачет, ЛОЖЬ) КАК Взаимозачет
			|ИЗ
			|	ВТ_Док КАК ВТ_Док
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(
			|				,
			|				Заказ В
			|					(ВЫБРАТЬ
			|						ВТ_Док.Заказ
			|					ИЗ
			|						ВТ_Док КАК ВТ_Док)) КАК ES_СтатусыЗаказовСрезПоследних
			|		ПО ВТ_Док.Заказ = ES_СтатусыЗаказовСрезПоследних.Заказ
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
			|				&Период,
			|				ЗаказПокупателя В
			|					(ВЫБРАТЬ
			|						ВТ_Док.Заказ
			|					ИЗ
			|						ВТ_Док КАК ВТ_Док)) КАК ЗаказыПокупателейОстатки
			|		ПО ВТ_Док.Заказ = ЗаказыПокупателейОстатки.ЗаказПокупателя
			|ИТОГИ
			|	МАКСИМУМ(НПкВозврату),
			|	МАКСИМУМ(СуммаУдержано),
			|	МАКСИМУМ(СуммаКВозврату),
			|	МАКСИМУМ(СтатусЗаказа),
			|	МАКСИМУМ(НПФактНал),
			|	МАКСИМУМ(НПФактБезнал),
			|	МАКСИМУМ(СуммаНП_НалОстаток),
			|	МАКСИМУМ(СуммаНП_БезналОстаток),
			|	МАКСИМУМ(Стоимость),
			|	МАКСИМУМ(Взаимозачет)
			|ПО
			|	Заказчик,
			|	Заказ";

		Запрос.УстановитьПараметр("Период", ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Новый МоментВремени(Дата, Ссылка), Дата));
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("Заказчик", Заказчик);

		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаПоЗаказчику = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоЗаказчику.Следующий() Цикл
				Если ВыборкаПоЗаказчику.СуммаКВозврату < 0 Тогда
					Отказ = Истина;
					Сообщить("Неправильная сумма к возврату!");
				КонецЕсли;
				
				ЭтоВзаимозачет = ВыборкаПоЗаказчику.Взаимозачет;
				ОбщаяСуммаКВозврату = 0;
								
				Выборка = ВыборкаПоЗаказчику.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока Выборка.Следующий() Цикл
					////////Если Выборка.СуммаКВозврату > Выборка.СуммаНПОстаток Тогда
					////////	Сообщить("Сумма платежа больше суммы долга контрагента");
					////////	Отказ = Истина;
					////////	Возврат;
					////////КонецЕсли; 
					
					//ЕФСОЛ Несторук 17.08.2016 +
					
					Если Выборка.СуммаКВозврату <= 0 Тогда
						Сообщить("Неправильная сумма к возврату!");
						Отказ = Истина;
					КонецЕсли;
					
					
					//ЕФСОЛ Несторук 17.08.2016 -
					ОбщаяСуммаКВозврату = ОбщаяСуммаКВозврату + Выборка.СуммаКВозврату;
					Если Выборка.СуммаКВозврату > 0 Тогда
						// РН ES_НаложенныеПлатежи
						Движения.ES_НаложенныеПлатежи.Записывать = Истина;
						Движение = Движения.ES_НаложенныеПлатежи.ДобавитьРасход();
						Движение.Период 		= Дата;
						Движение.Регистратор 	= Ссылка;
						Движение.Заказчик 		= Заказчик;
						Движение.Заказ 			= Выборка.Заказ;
						//Движение.СуммаНП 		= Выборка.СуммаКВозврату;
						
						Если ВидОплаты = Перечисления.ТипыДенежныхСредств.Наличные Тогда
							Движение.СуммаНП_Нал    = Выборка.СуммаКВозврату;
						Иначе
							Движение.СуммаНП_Безнал = Выборка.СуммаКВозврату;
						КонецЕсли;
				       			
							
							
						//Если ВидЗачетаПоПлатежам = Перечисления.ES_ВидыЗачетаПоПлатежамВозврата.УчетРКО Тогда
						//	Если Выборка.НПФактНал = 0 Тогда
						//		
						//		Если ВидОплаты = Перечисления.ТипыДенежныхСредств.Наличные Тогда
						//			Движение.СуммаНП_Нал    = Выборка.СуммаКВозврату;
						//		Иначе
						//			Движение.СуммаНП_Безнал = Выборка.СуммаКВозврату;
						//		КонецЕсли;
						//		
						//	Иначе 
						//		
						//		Если ВидОплаты = Перечисления.ТипыДенежныхСредств.Наличные Тогда
						//			Движение.СуммаНП_Нал    = Выборка.СуммаКВозврату + Выборка.СуммаУдержано;
						//		Иначе
						//			Движение.СуммаНП_Безнал = Выборка.СуммаКВозврату + Выборка.СуммаУдержано;
						//		КонецЕсли;	
						//		
						//	КонецЕсли;
						//ИначеЕсли ВидЗачетаПоПлатежам = Перечисления.ES_ВидыЗачетаПоПлатежамВозврата.Взаимозачет Тогда
						//	Движение.СуммаНП_Нал 	= Выборка.СуммаКВозврату+ Выборка.СуммаУдержано;
						//КонецЕсли;
						
						
					КонецЕсли;
					
					Если Выборка.СуммаУдержано > 0 Тогда
						//ЭР Несторук С.И. 15.08.2017 16:14:36 {
						//РН Продажи
						Движение 				= Движения.Продажи.Добавить();
						Движение.Период			= Дата;
						Движение.Документ   	= Выборка.Заказ;
						Движение.Номенклатура   = НоменклатураРКО;
						Движение.Контрагент		= Заказчик;
						Движение.СтавкаНДС		= Справочники.СтавкиНДС.СтавкаНДС(Организация.ВидСтавкиНДСПоУмолчанию, Дата);
						Движение.Организация	= Организация;
						Движение.Подразделение	= Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
						Движение.Ответственный	= Ответственный;
						Движение.Количество		= 1;
						Движение.Сумма			= Выборка.СуммаУдержано;
						Движение.СуммаНДС		= Выборка.СуммаУдержано* УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Движение.СтавкаНДС)/100;
						//Движение.ХозяйственнаяОперация = ;
						
						//РН ДоходыИРасходы
						Движение							= Движения.ДоходыИРасходы.Добавить();
						Движение.Период						= Дата;
						Движение.Организация				= Организация;
						Движение.СтруктурнаяЕдиница			= Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
						Движение.НаправлениеДеятельности	= Справочники.НаправленияДеятельности.ОсновноеНаправление;
						Движение.ЗаказПокупателя			= Выборка.Заказ;
						Движение.СчетУчета					= ПланыСчетов.Управленческий.ВыручкаОтПродаж;
						Движение.СуммаДоходов				= Выборка.СуммаУдержано;
						//Движение.ХозяйственнаяОперация = ;
						
						//}ЭР Несторук С.И.	
						
						//ЭР Несторук С.И. 14.08.2017 9:40:02 {
						Если Взаимозачет Тогда 
							
							//РН ОплатаСчетовИЗаказов
							Движение = Движения.ОплатаСчетовИЗаказов.Добавить();
							Движение.Период = Дата;
							Движение.Организация = Организация;
							Движение.СчетНаОплату = Выборка.Заказ;
							Движение.СуммаАванса = Выборка.СуммаУдержано;
							
							// Управленческий
							Движение							= Движения.Управленческий.Добавить();
							Движение.Период						= Дата;
							Движение.Организация				= Организация;
							Движение.СценарийПланирования		= Справочники.СценарииПланирования.Фактический;
							Движение.СчетДт						= ПланыСчетов.Управленческий.РасчетыСПрочимиПоставщикамиИТаможеннымиОрганами;
							Движение.СчетКт						= ПланыСчетов.Управленческий.ВыручкаОтПродаж;
							//Движение.ВалютаДт					= мВалюта;
							//Движение.ВалютаКт					= мВалюта;
							//Движение.СуммаВалДт					= Выборка.СуммаУдержано;
							Движение.Сумма						= Выборка.СуммаУдержано;
							//Движение.Содержание					=;
							
							ВыборкаЗаказ = Выборка.Выбрать();
							
							Пока ВыборкаЗаказ.Следующий() Цикл
								Если ВыборкаЗаказ.КоличествоОстаток > 0 Тогда
									Движение = Движения.ЗаказыПокупателей.ДобавитьРасход();
									Движение.Период = Дата;
									Движение.Организация = Организация;
									Движение.Номенклатура = ВыборкаЗаказ.Номенклатура;
									Движение.Характеристика = ВыборкаЗаказ.Характеристика;
									Движение.Количество		= ВыборкаЗаказ.КоличествоОстаток;
									Движение.ЗаказПокупателя = Выборка.Заказ;
									
								КонецЕсли;
								
							КонецЦикла;
						КонецЕсли;	
						Если УчетРКО Тогда 
							//Управленческий
							Движение							= Движения.Управленческий.Добавить();
							Движение.Период						= Дата;
							Движение.Организация				= Организация;
							Движение.СценарийПланирования		= Справочники.СценарииПланирования.Фактический;
							Движение.СчетДт						= ПланыСчетов.Управленческий.РасчетыСПокупателями;
							Движение.СчетКт						= ПланыСчетов.Управленческий.ВыручкаОтПродаж;
							//Движение.ВалютаДт					= мВалюта;
							//Движение.ВалютаКт					= мВалюта;
							//Движение.СуммаВалДт					= Выборка.СуммаУдержано;
							Движение.Сумма						= Выборка.СуммаУдержано;
							//Управленческий
							Движение							= Движения.Управленческий.Добавить();
							Движение.Период						= Дата;
							Движение.Организация				= Организация;
							Движение.СценарийПланирования		= Справочники.СценарииПланирования.Фактический;
							Движение.СчетДт						= ПланыСчетов.Управленческий.ES_НаложенныеПлатежи;
							Движение.СчетКт						= ПланыСчетов.Управленческий.РасчетыСПокупателями;
							//Движение.ВалютаДт					= мВалюта;
							//Движение.ВалютаКт					= мВалюта;
							//Движение.СуммаВалДт					= Выборка.СуммаУдержано;
							Движение.Сумма						= Выборка.СуммаУдержано;
						КонецЕсли;
					КонецЕсли;
					//}ЭР Несторук С.И.
					
					Если ЭтоВзаимозачет И Выборка.Стоимость > 0 Тогда
						Движения.РасчетыСПокупателями.Записывать = Истина;
						Движение = Движения.РасчетыСПокупателями.ДобавитьРасход();
						Движение.Период			= 	Дата;
						Движение.Организация	=	Организация;
						Движение.ТипРасчетов	=	Перечисления.ТипыРасчетов.Долг;
						Движение.Контрагент		= 	Заказчик;
						Движение.Договор		=	Договор;
						Движение.Заказ			=	Выборка.Заказ;
						Движение.Сумма 			=	Выборка.Стоимость;
						Движение.СуммаВал		= 	Выборка.Стоимость;
						Движение.СуммаРег		= 	Выборка.Стоимость;
						Движение.СодержаниеПроводки	=	"Списание обязательств покупателя";
						Движение.ХозяйственнаяОперация	=	Справочники.ХозяйственныеОперации.ПродажаПокупателю;
						Движение.СпособЗачета		=	Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
						Движение.Курс	= 1;
						Движение.Кратность	= 1;
					КонецЕсли;
										
					// РН ES_УчетДСпоЗаказамНаДоставку
					Движения.ES_УчетДСпоЗаказамНаДоставку.Записывать = Истина;
					Движение = Движения.ES_УчетДСпоЗаказамНаДоставку.Добавить();
					Движение.Период 			= Дата;
					Движение.Регистратор 		= Ссылка;
					Движение.Заказ 				= Выборка.Заказ;
					Движение.Заказчик 			= Заказчик;
					Движение.СуммаУдержано 		= Выборка.СуммаУдержано;
					Движение.СуммаВозвращено 	= Выборка.СуммаКВозврату;
										
					// РС ES_СтатусыЗаказов
					Движения.ES_СтатусыЗаказов.Записывать = Истина;
					Движение = Движения.ES_СтатусыЗаказов.Добавить();
					Движение.Период 		= Дата;
					Движение.Заказ 			= Выборка.Заказ;
					Если (Выборка.СуммаНП_НалОстаток+Выборка.СуммаНП_БезналОстаток) - (Выборка.СуммаКВозврату + Выборка.СуммаУдержано) > 0  Тогда
						
						Если Выборка.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставленРассчитать Тогда
							Движение.СтатусЗаказа 	=  Перечисления.ES_СтатусыЗаказов.ЧастичноДоставленРассчитать 
						Иначе
							Движение.СтатусЗаказа 	=  Перечисления.ES_СтатусыЗаказов.ДоставленРассчитать;
						КонецЕсли;
						
					Иначе
						
						//ЕФСОЛ Несторук 09-12-16 +
						//Движение.СтатусЗаказа 	= ?(Выборка.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставленРассчитать, Перечисления.ES_СтатусыЗаказов.ЧастичноДоставлен, Перечисления.ES_СтатусыЗаказов.Доставлен);
						
						Если Выборка.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставленРассчитать Тогда
							Движение.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставлен;
						ИначеЕсли Выборка.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ВозвращенРассчитать Тогда
							Движение.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ДоставленВозвращен;
						Иначе
							Движение.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Доставлен;
						КонецЕсли;
						//ЕФСОЛ Несторук 09-12-16 -
						
					КонецЕсли;
					Движение.Ответственный 	= Ответственный;
					
				КонецЦикла;
				
				Если ОбщаяСуммаКВозврату > 0 Тогда
					//ЭР Несторук С.И. 11.08.2017 17:30:11 {
					//Движения по деньгам (в связи со скрытием кнопок прихода/расхода
					//Хотелось бы придумать какую-то проверку, а может она и не нужна)
					Движение = Движения.РасчетыСПрочимиКонтрагентами.ДобавитьРасход();
					Движение.Период			= Дата;
					Движение.СчетУчета 		= ПланыСчетов.Управленческий.РасчетыСПрочимиПоставщикамиИТаможеннымиОрганами;
					Движение.Организация    = Организация;
					Движение.Контрагент		= ВыборкаПоЗаказчику.Заказчик;
					Движение.Договор		= Договор;
					Движение.Сумма			= ОбщаяСуммаКВозврату;
					Движение.СуммаВал		= ОбщаяСуммаКВозврату;
					Движение.СодержаниеПроводки = "Учет расчетов по прочим операциям";
					Движение.Комментарий		= "Уменьшение долга контрагента";
					Движение.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.ПрочиеРасчеты;
					
					//}ЭР Несторук С.И.
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли; 
	КонецЕсли;
	
	Если Заказы.Количество() > 0 Тогда
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ES_ВозвратыЗаказы.Заказ
	//	|ПОМЕСТИТЬ ВТ_Возврат
	//	|ИЗ
	//	|	Документ.ES_Возвраты.Заказы КАК ES_ВозвратыЗаказы
	//	|ГДЕ
	//	|	ES_ВозвратыЗаказы.Ссылка = &Ссылка
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ES_ВозвратыГрузы.ДокументДоставки,
	//	|	СУММА(ЕСТЬNULL(ES_ВозвратыГрузы.КоличествоФакт, 0)) КАК КоличествоФакт,
	//	|	ES_ВозвратыГрузы.Номенклатура,
	//	|	ES_ВозвратыГрузы.Ссылка
	//	|ПОМЕСТИТЬ ВТ_ЗаказыСНоменклатурой
	//	|ИЗ
	//	|	Документ.ES_Возвраты.Грузы КАК ES_ВозвратыГрузы
	//	|ГДЕ
	//	|	ES_ВозвратыГрузы.Ссылка = &Ссылка
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ES_ВозвратыГрузы.ДокументДоставки,
	//	|	ES_ВозвратыГрузы.Номенклатура,
	//	|	ES_ВозвратыГрузы.Ссылка
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_ЗаказыСНоменклатурой.КоличествоФакт,
	//	|	ВТ_ЗаказыСНоменклатурой.Номенклатура,
	//	|	ВТ_Возврат.Заказ
	//	|ПОМЕСТИТЬ ВТ_Итоговая
	//	|ИЗ
	//	|	ВТ_Возврат КАК ВТ_Возврат
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаказыСНоменклатурой КАК ВТ_ЗаказыСНоменклатурой
	//	|		ПО ВТ_Возврат.Заказ = ВТ_ЗаказыСНоменклатурой.ДокументДоставки
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ЕСТЬNULL(ES_ТоварыОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	//	|	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа КАК СтатусЗаказа,
	//	|	ЕСТЬNULL(ВТ_Итоговая.Номенклатура, ES_ТоварыОстатки.Номенклатура) КАК Номенклатура,
	//	|	ЕСТЬNULL(ВТ_Итоговая.КоличествоФакт, 0) КАК КоличествоФакт,
	//	|	ВТ_Итоговая.Заказ КАК Заказ,
	//	|	ES_ЗаказыНаСкладеОстатки.Склад КАК Склад
	//	|ИЗ
	//	|	ВТ_Итоговая КАК ВТ_Итоговая
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ES_ЗаказыНаСкладе.Остатки(
	//	|				,
	//	|				Заказ В
	//	|					(ВЫБРАТЬ
	//	|						ВТ_Итоговая.Заказ
	//	|					ИЗ
	//	|						ВТ_Итоговая КАК ВТ_Итоговая)) КАК ES_ТоварыОстатки
	//	|		ПО ВТ_Итоговая.Заказ = ES_ЗаказыНаСкладеОстатки.Заказ
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(
	//	|				,
	//	|				Заказ В
	//	|					(ВЫБРАТЬ
	//	|						ВТ_Итоговая.Заказ
	//	|					ИЗ
	//	|						ВТ_Итоговая КАК ВТ_Итоговая)) КАК ES_СтатусыЗаказовСрезПоследних
	//	|		ПО ВТ_Итоговая.Заказ = ES_СтатусыЗаказовСрезПоследних.Заказ
	//	|ИТОГИ
	//	|	СУММА(КоличествоОстаток),
	//	|	МАКСИМУМ(СтатусЗаказа),
	//	|	МАКСИМУМ(Номенклатура),
	//	|	СУММА(КоличествоФакт),
	//	|	МАКСИМУМ(Склад)
	//	|ПО
	//	|	Заказ";
	
		
	//ВыборкаЗаказ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//
	//Пока ВыборкаЗаказ.Следующий() Цикл 
	//	
	//	Если ВыборкаЗаказ.КоличествоФакт = ВыборкаЗаказ.КоличествоОстаток Тогда
	//		// РС ES_СтатусыЗаказов
	//		Движения.ES_СтатусыЗаказов.Записывать = Истина;
	//		Движение = Движения.ES_СтатусыЗаказов.Добавить();
	//		Движение.Период 		= Дата;
	//		Движение.Заказ 			= ВыборкаЗаказ.Заказ;
	//		//Движение.СтатусЗаказа 	= ?(ВыборкаЗаказ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставлен, Перечисления.ES_СтатусыЗаказов.ДоставленВозвращен, Перечисления.ES_СтатусыЗаказов.Возвращен);
	//		//ЕФСОЛ Несторук 09-11-16 +
	//		
	//		Если ВыборкаЗаказ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставлен Тогда
	//			Движение.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ДоставленВозвращен;
	//		ИначеЕсли ВыборкаЗаказ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставленРассчитать Тогда
	//			Движение.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ВозвращенРассчитать;
	//		Иначе 
	//			Движение.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Возвращен;
	//		КонецЕсли;
	//		 
	//			
	//		//ЕФСОЛ Несторук 09-11-16 - 
	//		Движение.Ответственный 	= Ответственный;
	//	КонецЕсли;
	//	//ЭР Несторук С.И. 10.02.2017 12:42:57 {
	//	Если ВыборкаЗаказ.Номенклатура = Справочники.Номенклатура.Неизвестно Тогда
	//		Движение = Движения.ES_ЗаказыНаСкладе.ДобавитьРасход();
	//		Движение.Период = Дата;
	//		Движение.Регистратор = Ссылка;
	//		Движение.Заказ = ВыборкаЗаказ.Заказ;
	//		//Движение.Номенклатура = ВыборкаЗаказ.Номенклатура;
	//		Движение.Количество  = ВыборкаЗаказ.КоличествоОстаток;
	//	ИначеЕсли  ВыборкаЗаказ.КоличествоОстаток > 0 Тогда

	//	//ЭР Несторук С.И. 10.02.2017 12:42:57 }
	//			
	//		Выборка = ВыборкаЗаказ.Выбрать();
	//		
	//		Пока Выборка.Следующий() Цикл
	//			
	//			Если Выборка.КоличествоФакт = 0 Тогда
	//				Продолжить;
	//			КонецЕсли;
	//			
	//			
	//			Если Выборка.КоличествоФакт <= Выборка.КоличествоОстаток И ЗначениеЗаполнено(Выборка.Номенклатура)  Тогда
	//				Движение = Движения.ES_Товары.ДобавитьРасход();
	//				Движение.Период = Дата;
	//				Движение.Регистратор = Ссылка;
	//				Движение.Заказ = Выборка.Заказ;
	//				Движение.Номенклатура = Выборка.Номенклатура;
	//				Движение.Количество  = Выборка.КоличествоФакт;
	//				
	//			Иначе
	//				Сообщение 	= Новый СообщениеПользователю;
	//				Сообщение.Текст	= "По документу "+ Выборка.Заказ+ ", по номенклатуре " + Выборка.Номенклатура + " доступно к возврату " 
	//				+ Выборка.КоличествоОстаток + ". Вы пытаетесь вернуть " + Выборка.КоличествоФакт;
	//				Сообщение.Сообщить();
	//				Отказ = Истина;
	//			КонецЕсли;
	//			
	//			
	//		КонецЦикла;
	//		//ЭР Несторук С.И. 10.02.2017 12:46:56 {
	//	Иначе
	//		Сообщение 	= Новый СообщениеПользователю;
	//		Сообщение.Текст	= ""+ ВыборкаЗаказ.Заказ+ " отсутствует на складе " + ВыборкаЗаказ.Склад;
	//		Сообщение.Сообщить();
	//		Отказ = Истина;
	//		
	//	КонецЕсли;
	//	 //ЭР Несторук С.И. 10.02.2017 12:46:56 }
	//	
	//КонецЦикла;

	Запрос = Новый Запрос;	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_ВозвратыЗаказы.Заказ КАК Заказ
	|ПОМЕСТИТЬ ВТ_Возврат
	|ИЗ
	|	Документ.ES_Возвраты.Заказы КАК ES_ВозвратыЗаказы
	|ГДЕ
	|	ES_ВозвратыЗаказы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Возврат.Заказ КАК Заказ,
	|	ЕСТЬNULL(ES_ЗаказыНаСкладеОстатки.Склад, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК Склад,
	|	ЕСТЬNULL(ES_ЗаказыНаСкладеОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа КАК СтатусЗаказа,
	|	ES_ДанныеПоЗаказамСрезПоследних.ВидЗабора КАК ВидЗабора
	|ИЗ
	|	ВТ_Возврат КАК ВТ_Возврат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ES_ЗаказыНаСкладе.Остатки(
	|				,
	|				Склад = &Склад
	|					И Заказ В
	|						(ВЫБРАТЬ
	|							ВТ_Возврат.Заказ
	|						ИЗ
	|							ВТ_Возврат КАК ВТ_Возврат)) КАК ES_ЗаказыНаСкладеОстатки
	|		ПО ВТ_Возврат.Заказ = ES_ЗаказыНаСкладеОстатки.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(
	|				,
	|				Заказ В
	|					(ВЫБРАТЬ
	|						ВТ_Возврат.Заказ
	|					ИЗ
	|						ВТ_Возврат КАК ВТ_Возврат)) КАК ES_СтатусыЗаказовСрезПоследних
	|		ПО ВТ_Возврат.Заказ = ES_СтатусыЗаказовСрезПоследних.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(
	|				,
	|				Заказ В
	|					(ВЫБРАТЬ
	|						ВТ_Возврат.Заказ КАК Заказ
	|					ИЗ
	|						ВТ_Возврат КАК ВТ_Возврат)) КАК ES_ДанныеПоЗаказамСрезПоследних
	|		ПО ВТ_Возврат.Заказ = ES_ДанныеПоЗаказамСрезПоследних.Заказ";
	
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Движения.ES_СтатусыЗаказов.Записывать = Истина;
	Движения.ES_ЗаказыНаСкладе.Записывать = Истина;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.КоличествоОстаток > 0 Тогда
			
			Движение = Движения.ES_ЗаказыНаСкладе.ДобавитьРасход();
			Движение.Период 		= Дата;
			Движение.Заказ			= Выборка.Заказ;
			Движение.Склад			= Склад;
			Движение.Количество		= 1;
			
			
			// РС ES_СтатусыЗаказов
			Движение = Движения.ES_СтатусыЗаказов.Добавить();
			Движение.Период 		= Дата;
			Движение.Заказ 			= Выборка.Заказ;
			//ЕФСОЛ Несторук 09-11-16 +
			
			Если Выборка.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставлен Тогда
				Движение.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ДоставленВозвращен;
			ИначеЕсли Выборка.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставленРассчитать Тогда
				Движение.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ВозвращенРассчитать;
			Иначе 
				Движение.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Возвращен;
			КонецЕсли;
			
			
			//ЕФСОЛ Несторук 09-11-16 - 
			Движение.Ответственный 	= Ответственный;
		ИначеЕсли НЕ Выборка.ВидЗабора = Перечисления.ES_ВидыЗабора.Упрощенный Тогда
			ВызватьИсключение НСтр("ru = 'Заказ " + Выборка.Заказ +" отсутствует на складе " + Склад +"'");
			Отказ = Истина;
		КонецЕсли;
		//ЭР Несторук С.И. 10.02.2017 12:42:57 {
		Если НЕ Отказ Тогда
			УбратьПроблемуВЗаказе(Выборка.Заказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецЕсли; 
	
КонецПроцедуры

Процедура  УбратьПроблемуВЗаказе(Заказ)
	
	Если Заказ.ES_Проблема Тогда
		мОбъект = Заказ.ПолучитьОбъект();
		мОбъект.ES_Проблема = Ложь;
		мОбъект.ES_ДанныеОбработанПроблема = "";
		Попытка
			
			мОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			
		Исключение
			мОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		КонецПопытки;
		
	КонецЕсли;
	
	
КонецПроцедуры


Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ВидОперации = Перечисления.ES_ВидыОперацийВозвраты.Платежи Тогда
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Склад");
	КонецЕсли;
		
КонецПроцедуры
