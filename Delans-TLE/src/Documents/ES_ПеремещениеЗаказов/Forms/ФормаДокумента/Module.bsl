
&НаКлиенте
Процедура ЗаказыЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЕстьПриемка = НайтиСвязныеДокументы(Объект.Ссылка);
	
	Если ЕстьПриемка Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Поле ""Склад отправитель"" не заполнено";
		Сообщение.Поле = "Объект.СкладОтправитель";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Уникальность = "ФормаВыбораЗаказаВДокументСамовывоз";
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьТЧДаннымиЗаказа",ЭтаФорма);
	//ПараметрыФормы = Новый Структура("ВызваноИзES_ES_ПеремещениеЗаказов, Склад", Истина,Объект.СкладОтправитель);
	ПараметрыФормы = Новый Структура("ВызваноИзES_ES_ПеремещениеЗаказов", Истина);	

	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаВыбора", ПараметрыФормы , ЭтаФорма, Уникальность, , , Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТЧДаннымиЗаказа(Заказ, Параметры) Экспорт
	
	// Запрет добавления одного заказа дважды
	НайденныеСтроки = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", Заказ));
	Если НайденныеСтроки.Количество() >= 1 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "" + Заказ + " уже есть в табличной части";
		Сообщение.Сообщить();
		
		Возврат;
	Иначе
		Элементы.Заказы.ТекущиеДанные.Заказ = Заказ;
		ЗаполнитьТЧНаСервере(Заказ);
		Элементы.ФормаУтвердитьПеремещение.Доступность = НЕ Объект.Подтвержден;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧНаСервере(Заказ)
	
	//ЭР Несторук С.И. 22.12.2016 17:15:04 {
	
	НайденнаяСтрока = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", Заказ));
	Если НайденнаяСтрока.Количество() > 0 Тогда
		НоваяСтрока = НайденнаяСтрока[0];
	Иначе
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ES_ДанныеПоЗаказамСрезПоследних.Заказ КАК Заказ,
	|	ES_ДанныеПоЗаказамСрезПоследних.Заказчик КАК Заказчик,
	|	ES_ДанныеПоЗаказамСрезПоследних.ВхНакладная КАК ВхНакладная,
	|	ES_ДанныеПоЗаказамСрезПоследних.НомерНакладной КАК НомерНакладной,
	|	ES_ДанныеПоЗаказамСрезПоследних.ВидДоставки КАК ВидДоставки,
	|	ES_ДанныеПоЗаказамСрезПоследних.ВидЗабора КАК ВидЗабора,
	|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийВес КАК ОбщийВес,
	|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийОбъем КАК ОбщийОбъем,
	|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийОбъемныйВес КАК ОбщийОбъемныйВес,
	|	ES_ДанныеПоЗаказамСрезПоследних.Комментарий КАК Комментарий,
	|	ВЫБОР
	|		КОГДА ES_ДанныеПоЗаказамСрезПоследних.ВидДоставки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыДоставки.Самовывоз)
	|			ТОГДА ES_ДанныеПоЗаказамСрезПоследних.АдресСкладаДоставки
	|		ИНАЧЕ ES_ДанныеПоЗаказамСрезПоследних.АдресДоставки
	|	КОНЕЦ КАК АдресДоставки,
	|	ES_ДанныеПоЗаказамСрезПоследних.Возврат КАК Возврат,
	|	ES_ДанныеПоЗаказамСрезПоследних.НППлан КАК НППланЗаказ,
	|	ES_ДанныеПоЗаказамСрезПоследних.ДатаДоставки КАК ДатаДоставки
	|ПОМЕСТИТЬ ВТ_Заказ
	|ИЗ
	|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(, Заказ = &Заказ) КАК ES_ДанныеПоЗаказамСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ES_НоменклатураВЗаказахСрезПоследних.ДокументДоставки КАК ДокументДоставки,
	|	ES_НоменклатураВЗаказахСрезПоследних.Номенклатура КАК Номенклатура,
	|	ES_НоменклатураВЗаказахСрезПоследних.Характеристика КАК Характеристика,
	|	ES_НоменклатураВЗаказахСрезПоследних.Партия КАК Партия,
	|	ES_НоменклатураВЗаказахСрезПоследних.ТипНоменклатурыЗапас КАК ТипНоменклатурыЗапас,
	|	ES_НоменклатураВЗаказахСрезПоследних.Количество КАК Количество,
	|	ES_НоменклатураВЗаказахСрезПоследних.НППлан КАК НППлан,
	|	ES_НоменклатураВЗаказахСрезПоследних.Содержание КАК Содержание,
	|	ES_НоменклатураВЗаказахСрезПоследних.Цена КАК Цена,
	|	ES_НоменклатураВЗаказахСрезПоследних.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ES_НоменклатураВЗаказахСрезПоследних.Вес КАК Вес,
	|	ES_НоменклатураВЗаказахСрезПоследних.Объем КАК Объем,
	|	ES_НоменклатураВЗаказахСрезПоследних.ОбъемныйВес КАК ОбъемныйВес,
	|	ES_НоменклатураВЗаказахСрезПоследних.ОбьявленнаяСтоимость КАК ОбьявленнаяСтоимость,
	|	ES_НоменклатураВЗаказахСрезПоследних.Опасность КАК Опасность,
	|	ES_НоменклатураВЗаказахСрезПоследних.НомерСтроки КАК НомерСтроки,
	|	ES_НоменклатураВЗаказахСрезПоследних.Артикул КАК Артикул,
	|	ES_НоменклатураВЗаказахСрезПоследних.Штрихкод КАК Штрихкод
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	РегистрСведений.ES_НоменклатураВЗаказах.СрезПоследних(
	|			,
	|			ДокументДоставки В
	|				(ВЫБРАТЬ
	|					ВТ_Заказ.Заказ
	|				ИЗ
	|					ВТ_Заказ КАК ВТ_Заказ)) КАК ES_НоменклатураВЗаказахСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Заказ.Заказ КАК Заказ,
	|	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа КАК СтатусЗаказа,
	|	ВТ_Заказ.Заказчик КАК Заказчик,
	|	ВТ_Заказ.ВхНакладная КАК ВхНакладная,
	|	ВТ_Заказ.НомерНакладной КАК НомерНакладной,
	|	ВТ_Товары.ДокументДоставки КАК ДокументДоставки,
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Характеристика КАК Характеристика,
	|	ВТ_Товары.Партия КАК Партия,
	|	ВТ_Товары.ТипНоменклатурыЗапас КАК ТипНоменклатурыЗапас,
	|	ВТ_Товары.Количество КАК Количество,
	|	ВТ_Товары.НППлан КАК НППлан,
	|	ВТ_Товары.Цена КАК Цена,
	|	ВТ_Товары.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ВТ_Товары.Вес КАК Вес,
	|	ВТ_Товары.Объем КАК Объем,
	|	ВТ_Товары.ОбъемныйВес КАК ОбъемныйВес,
	|	ВТ_Товары.ОбьявленнаяСтоимость КАК ОбьявленнаяСтоимость,
	|	ВТ_Товары.Опасность КАК Опасность,
	|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
	|	ВТ_Товары.Артикул КАК Артикул,
	|	ВТ_Товары.Штрихкод КАК Штрихкод,
	|	ВТ_Заказ.ВидДоставки КАК ВидДоставки,
	|	ВТ_Заказ.ВидЗабора КАК ВидЗабора,
	|	ВТ_Заказ.ОбщийВес КАК ОбщийВес,
	|	ВТ_Заказ.ОбщийОбъемныйВес КАК ОбщийОбъемныйВес,
	|	ВТ_Заказ.Комментарий КАК Комментарий,
	|	ВТ_Заказ.АдресДоставки КАК АдресДоставки,
	|	ВТ_Заказ.ОбщийОбъем КАК ОбщийОбъем,
	|	ВТ_Заказ.Возврат КАК Возврат,
	|	ВТ_Заказ.НППланЗаказ КАК НППланЗаказ,
	|	ВТ_Заказ.ДатаДоставки КАК ДатаДоставки
	|ИЗ
	|	ВТ_Заказ КАК ВТ_Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(
	|				,
	|				Заказ В
	|					(ВЫБРАТЬ
	|						ВТ_Заказ.Заказ
	|					ИЗ
	|						ВТ_Заказ КАК ВТ_Заказ)) КАК ES_СтатусыЗаказовСрезПоследних
	|		ПО ВТ_Заказ.Заказ = ES_СтатусыЗаказовСрезПоследних.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары
	|		ПО ВТ_Заказ.Заказ = ВТ_Товары.ДокументДоставки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(СтатусЗаказа),
	|	МАКСИМУМ(Заказчик),
	|	МАКСИМУМ(ВхНакладная),
	|	МАКСИМУМ(НомерНакладной),
	|	МАКСИМУМ(ВидДоставки),
	|	МАКСИМУМ(ВидЗабора),
	|	МАКСИМУМ(ОбщийВес),
	|	МАКСИМУМ(ОбщийОбъемныйВес),
	|	МАКСИМУМ(Комментарий),
	|	МАКСИМУМ(АдресДоставки),
	|	МАКСИМУМ(ОбщийОбъем),
	|	МАКСИМУМ(Возврат),
	|	МАКСИМУМ(НППланЗаказ),
	|	МАКСИМУМ(ДатаДоставки)
	|ПО
	|	Заказ";
	
	Запрос.УстановитьПараметр("Заказ", Заказ); 	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаЗаказ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаЗаказ.Следующий();
		Если ВыборкаЗаказ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ПодготовленПринят
			ИЛИ ВыборкаЗаказ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.НеДоставлен
			ИЛИ ВыборкаЗаказ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Подготовлен
			ИЛИ ВыборкаЗаказ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ОтмененПринят
			ИЛИ ВыборкаЗаказ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставлен
			ИЛИ ВыборкаЗаказ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставленРассчитать
			ИЛИ ВыборкаЗаказ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Отказ
			ИЛИ ВыборкаЗаказ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Некондиция 
			ИЛИ ВыборкаЗаказ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ОфисПолучателяЗакрыт
			ИЛИ ВыборкаЗаказ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ПолучательПереехал
			ИЛИ ВыборкаЗаказ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.НеправильныйАдрес
			ИЛИ ВыборкаЗаказ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ПолучателяНетДомаВОфисе
			Тогда
			
			//ЭР Несторук С.И. 22.03.2017 15:14:19 {
			Объект.Подтвержден = Ложь;
			Объект.ДанныеПодтверждения = "";
			//}ЭР Несторук С.И.
						
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаЗаказ);
			НоваяСтрока.ДатаВремяДобавленияЗаказа = УправлениеНебольшойФирмойВызовСервера.ДатаСеанса();
			НоваяСтрока.Аббревиатура = ES_ОбщегоНазначения.ВернутьСокращениеВидовДоставки(ВыборкаЗаказ.ВидДоставки,ВыборкаЗаказ.ВидЗабора,ВыборкаЗаказ.Возврат);
			НоваяСтрока.НППлан	= ВыборкаЗаказ.НППланЗаказ;
			Выборка = ВыборкаЗаказ.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
					СтрокаГрузы = Объект.Грузы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаГрузы,Выборка);
					СтрокаГрузы.НомерСтрокиВЗаказе = Выборка.НомерСтроки;
				КонецЕсли;

			КонецЦикла;
						
		Иначе
		Сообщить("Невозможно добавить документ + "+ ВыборкаЗаказ.Заказ + " в статусе " + ВыборкаЗаказ.СтатусЗаказа);	
		УдалитьСтрокиПоЗаказуИзДокумента(Заказ);
		Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	//ЭР Несторук С.И. 22.12.2016 17:15:04 }

КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиПоЗаказуИзДокумента(Заказ)

	//ЭР Несторук С.И. 22.12.2016 17:18:53 {
	НайденныеСтроки = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", Заказ));
	Если НайденныеСтроки.Количество() >0 Тогда
		Для каждого Стр Из НайденныеСтроки Цикл
			Объект.Заказы.Удалить(Стр);
		КонецЦикла;
	КонецЕсли;
	
	НайденныеСтроки = Объект.Грузы.НайтиСтроки(Новый Структура("Заказ", Заказ));
	Если НайденныеСтроки.Количество() >0 Тогда
		Для каждого Стр Из НайденныеСтроки Цикл
			Объект.Грузы.Удалить(Стр);
		КонецЦикла;
	КонецЕсли;
	//ЭР Несторук С.И. 22.12.2016 17:18:53 }

КонецПроцедуры


&НаКлиенте
Процедура ЗаказыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УдалитьПустыеСтрокиВТЧЗаказы();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтотОбъект.Записать();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура  УдалитьПустыеСтрокиВТЧЗаказы()
	
	й = Объект.Заказы.Количество() - 1;
	Пока й >=0 Цикл
		Если НЕ ЗначениеЗаполнено(Объект.Заказы[й].Заказ) Тогда
			Объект.Заказы.Удалить(й);
		КонецЕсли;
		й = й-1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
	КонецЕсли;
	
	Элементы.ФормаУтвердитьПеремещение.Доступность = НЕ Объект.Подтвержден;
	
	ГрузыВРазрезеЗаказов = Истина;
	
	//ЭР Несторук С.И. 22.03.2017 12:08:14 {
	 ЕстьДоки = ПроверкаСвязныхДокументов();
	//}ЭР Несторук С.И.
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаВажныеКоманды);
	// Конец СтандартныеПодсистемы.Печать

	 УстановитьСкладПартнера();
	 
КонецПроцедуры

&НаСервере
Процедура УстановитьСкладПартнера()
	
	Если РольДоступна("ES_Партнёр") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ES_НастройкаДоступаПользователей.СтруктурнаяЕдиница
		|ИЗ
		|	РегистрСведений.ES_НастройкаДоступаПользователей КАК ES_НастройкаДоступаПользователей
		|ГДЕ
		|	ES_НастройкаДоступаПользователей.Пользователь = &Пользователь";
		
		Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Сообщить("Не указан склад в настройках прав партнера");
		Иначе
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Объект.СкладОтправитель =  Выборка.СтруктурнаяЕдиница;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	

КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПриАктивизацииСтроки(Элемент)
	ТекСтрока = Элементы.Заказы.ТекущиеДанные;
	ОтборВТЧГрузы(ТекСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ОтборВТЧГрузы(ТекСтрока)
	
	ГрузыВРазрезеЗаказов = Истина;
	
	Если ГрузыВРазрезеЗаказов Тогда
		Если ТекСтрока <> Неопределено Тогда
			Элементы.Грузы.ОтборСтрок = Новый ФиксированнаяСтруктура("Заказ", ТекСтрока.Заказ);
		КонецЕсли;
	Иначе
		Элементы.Грузы.ОтборСтрок 			= Неопределено;
	КонецЕсли; 


КонецПроцедуры

&НаКлиенте
Процедура ГрузыВРазрезеЗаказовПриИзменении(Элемент)
	ОтборВТЧГрузы(Элементы.Заказы.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НЕ Поле.Имя = "ЗаказыДатаВремяДобавленияЗаказа" Тогда
		
		ПоказатьЗначение(,Элемент.ТекущиеДанные.Заказ);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПередУдалением(Элемент, Отказ)
	Заказ = Элементы.Заказы.ТекущиеДанные.Заказ;
	УдалитьСтрокиПоЗаказуИзДокумента(Заказ);
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	
	//ЭР Несторук С.И. 13.03.2017 9:52:55 {
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЕстьПриемка = НайтиСвязныеДокументы(Объект.Ссылка);
		Если ЕстьПриемка Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//}ЭР Несторук С.И.
	
	ТекШтрихкод = "";	
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ОбработатьШтрихкодЗаказаЗавершение", ЭтаФорма), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодЗаказаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
	Если НЕ ПустаяСтрока(Результат) Тогда
		мЗаказ = НайтиЗаказПоШтрихКодуНаСервере(Результат);
		Если НЕ ЗначениеЗаполнено(мЗаказ) Тогда
		
				Сообщить("Заказ не найден");
				
		Иначе
			
			НайденныеСтроки = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", мЗаказ));
			Если НайденныеСтроки.Количество() >= 1 Тогда
				
				//ЭР Несторук С.И. 14.09.2017 14:16:41 {
				Если НЕ НайденныеСтроки[0].Проверен Тогда
					НайденныеСтроки[0].МестФакт = НайденныеСтроки[0].МестФакт +1;
					Если НайденныеСтроки[0].МестФакт = НайденныеСтроки[0].Мест ИЛИ НайденныеСтроки[0].Мест = 0 Тогда
						НайденныеСтроки[0].Проверен = Истина;
						НайденныеСтроки[0].МестФакт = 0;
					КонецЕсли;
				КонецЕсли;
				//}ЭР Несторук С.И.
				
				
				Возврат;
			Иначе
				//ЭР Несторук С.И. 22.12.2016 17:31:03 {
				НоваяСтрока = Объект.Заказы.Добавить();
				НоваяСтрока.Заказ 		= мЗаказ;
				ЗаполнитьТЧНаСервере(мЗаказ);
				Элементы.ФормаУтвердитьПеремещение.Доступность = НЕ Объект.Подтвержден;
				Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
					ЭтотОбъект.Записать();
				КонецЕсли;
				//ЭР Несторук С.И.  }
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиЗаказПоШтрихКодуНаСервере(ТекШтрихКод)
	
	Заказ = Неопределено;
	
	ПоискПоВхНакладной = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ПоискЗаказовПоВхНакладной);
	
	Если ПоискПоВхНакладной = Истина Тогда
		Условие = "ВхНакладная";	
	Иначе
		Условие = "НомерНакладной";	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ES_ДанныеПоЗаказамСрезПоследних.Заказ
	|ИЗ
	|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(, "+Условие +" = &НомерНакладной) КАК ES_ДанныеПоЗаказамСрезПоследних";
	
	Запрос.УстановитьПараметр("НомерНакладной", ТекШтрихКод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Заказ = Выборка.Заказ;
		
	КонецЕсли;
	
	Возврат Заказ;
	

КонецФункции // НайтиЗаказПоШтрихКоду()

&НаКлиенте
Процедура УтвердитьПеремещение(Команда)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ES_ВидыОперацийПеремещение.Заказы") Тогда
		Если НЕ Объект.Проведен Тогда
			Сообщить(НСтр("ru='Документ не проведен'"));
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Поле ""Склад отправитель"" не заполнено";
			Сообщение.Поле = "Объект.СкладОтправитель";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.СкладПолучатель) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Поле ""Склад получатель"" не заполнено";
			Сообщение.Поле = "Объект.СкладПолучатель";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		
		Если Объект.Заказы.Количество() > 0 Тогда
			Отказать = ПроверитьЗаказыНаСервере();
			Если НЕ Отказать Тогда
				ТекДата = УправлениеНебольшойФирмойВызовСервера.ДатаСеанса();
				Объект.Подтвержден = Истина;
				Объект.ДанныеПодтверждения = "" + ПользователиКлиентСервер.ТекущийПользователь() + ", " + Формат(ТекДата, "ДФ='dd.MM.yyyy ""в"" ЧЧ:мм'");
				Объект.ДатаПодтверждения = ТекДата;
				Элементы.ФормаУтвердитьПеремещение.Доступность = Ложь;
				ЭтотОбъект.Записать();
			КонецЕсли;		
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ES_ВидыОперацийПеремещение.Курьер") Тогда
		
		Если Объект.ЗАказы.Количество() > 0 Тогда
			Успешно = Истина;
			Для каждого Стр ИЗ Объект.Заказы Цикл
				Если НЕ Стр.Проверен Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Обнаружена недостача в строке "+ Строка(Стр.НомерСтроки);
					Сообщение.Поле = "Объект.Заказы[" + Строка(Стр.НомерСтроки - 1) + "].Заказ";
					Сообщение.Сообщить();
					Успешно = Ложь;
				КонецЕсли;
				Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
					Если НЕ ЗначениеЗаполнено(Стр.ДокументОснование) Тогда
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = "Обнаружен излишек в строке "+ Строка(Стр.НомерСтроки);
						Сообщение.Поле = "Объект.Заказы[" + Строка(Стр.НомерСтроки - 1) + "].Заказ";
						Сообщение.Сообщить();
						Успешно = Ложь;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			Если Успешно Тогда
				ТекДата = УправлениеНебольшойФирмойВызовСервера.ДатаСеанса();
				Объект.Подтвержден = Истина;
				Объект.ДанныеПодтверждения = "" + ПользователиКлиентСервер.ТекущийПользователь() + ", " + Формат(ТекДата, "ДФ='dd.MM.yyyy ""в"" ЧЧ:мм'");
				Объект.ДатаПодтверждения = ТекДата;
				Элементы.ФормаУтвердитьПеремещение.Доступность = Ложь;
				ЭтотОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры


&НаСервереБезКонтекста
Функция НайтиСвязныеДокументы(Ссылка)

	//ЭР Несторук С.И. 13.03.2017 9:53:15 {
	ЕстьПриемка = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ES_Приемка.Ссылка
	|ИЗ
	|	Документ.ES_Приемка КАК ES_Приемка
	|ГДЕ
	|	ES_Приемка.ДокументОснование = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ЕстьПриемка = Истина;
		Выборка = РезультатЗапроса.Выбрать();
		Сообщение = "На основании перемещения создан документ("+Выборка.Количество()+"): ";
		Пока Выборка.Следующий() Цикл
			 Сообщение = Сообщение + Символы.ПС+ Выборка.Ссылка;
		 КонецЦикла;
		 Сообщить(Сообщение);
	КонецЕсли;
		
	Возврат ЕстьПриемка;

	//}ЭР Несторук С.И.
	
КонецФункции // ()

Функция ПроверитьЗаказыНаСервере()
	
	Отказать = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ES_ПеремещениеЗаказовЗаказы.Заказ КАК Заказ,
		|	ES_ПеремещениеЗаказовЗаказы.Проверен КАК Проверен,
		|	ES_ПеремещениеЗаказовЗаказы.НомерСтроки КАК НомерСтроки,
		|	ES_ПеремещениеЗаказовЗаказы.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВТ_Заказы
		|ИЗ
		|	Документ.ES_ПеремещениеЗаказов.Заказы КАК ES_ПеремещениеЗаказовЗаказы
		|ГДЕ
		|	ES_ПеремещениеЗаказовЗаказы.Ссылка = &Ссылка
		|	И ES_ПеремещениеЗаказовЗаказы.Заказ ССЫЛКА Документ.ЗаказПокупателя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа КАК СтатусЗаказа,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВидДоставки КАК ВидДоставки,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВидЗабора КАК ВидЗабора,
		|	ВТ_Заказы.Заказ КАК Заказ,
		|	ЕСТЬNULL(ES_ЗаказыНаСкладеОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
		|	ВТ_Заказы.Проверен КАК Проверен,
		|	ВТ_Заказы.НомерСтроки КАК НомерСтроки,
		|	ВТ_Заказы.ДокументОснование КАК ДокументОснование
		|ИЗ
		|	ВТ_Заказы КАК ВТ_Заказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ES_ЗаказыНаСкладе.Остатки(
		|				&МоментВремени,
		|				Заказ В
		|						(ВЫБРАТЬ
		|							ВТ_Заказы.Заказ
		|						ИЗ
		|							ВТ_Заказы КАК ВТ_Заказы)
		|					И Склад = &Склад) КАК ES_ЗаказыНаСкладеОстатки
		|		ПО ВТ_Заказы.Заказ = ES_ЗаказыНаСкладеОстатки.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(
		|				,
		|				Заказ В
		|					(ВЫБРАТЬ
		|						ВТ_Заказы.Заказ
		|					ИЗ
		|						ВТ_Заказы КАК ВТ_Заказы)) КАК ES_ДанныеПоЗаказамСрезПоследних
		|		ПО ВТ_Заказы.Заказ = ES_ДанныеПоЗаказамСрезПоследних.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(
		|				,
		|				Заказ В
		|					(ВЫБРАТЬ
		|						ВТ_Заказы.Заказ
		|					ИЗ
		|						ВТ_Заказы КАК ВТ_Заказы)) КАК ES_СтатусыЗаказовСрезПоследних
		|		ПО ВТ_Заказы.Заказ = ES_СтатусыЗаказовСрезПоследних.Заказ";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.УстановитьПараметр("Склад", объект.СкладОтправитель);
		//проверяем, есть ли заказы в данный момент на складе.
		Запрос.УстановитьПараметр("МоментВремени", Новый Граница(Объект.Дата,ВидГраницы.Включая));//РеквизитФормыВЗначение("Объект").МоментВремени()); 
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				//ЭР Несторук С.И. 25.10.2017 10:39:26 {
				//Пропускаем заказы ДД в статусе ожидает груз
				Если Выборка.ВидДоставки = Перечисления.ES_ВидыДоставки.ДвериДвери
					И (Выборка.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ОжидаетГруз ИЛИ
						Выборка.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ОжидаетГрузНазначен) Тогда
					Продолжить;
				КонецЕсли;
				//}ЭР Несторук С.И.
				
				Если Выборка.КоличествоОстаток = 0 Тогда
					Сообщить(НСтр("ru='На складе "+Объект.СкладОтправитель +" "+ Выборка.Заказ +" отсутствует'"));						
					Отказать = Истина;
				КонецЕсли;
					Если НЕ Выборка.Проверен Тогда
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = "Обнаружена недостача";
						Сообщение.Поле = "Объект.Заказы[" + Строка(Выборка.НомерСтроки - 1) + "].Заказ";
						Сообщение.Сообщить();
						Отказать = Истина;

					КонецЕсли;
					Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
						Если НЕ ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = "Обнаружен излишек";
							Сообщение.Поле = "Объект.Заказы[" + Строка(Выборка.НомерСтроки - 1) + "].Заказ";
							Сообщение.Сообщить();	
						КонецЕсли;
					КонецЕсли;
					
			КонецЦикла;
		КонецЕсли;
		Возврат Отказать;
	
КонецФункции

&НаКлиенте
Процедура ЗаказыПослеУдаления(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтотОбъект.Записать();
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	//ЭР Несторук С.И. 02.06.2017 13:53:14 {
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ES_ВидыОперацийПеремещение.Заказы") Тогда
		
		Оповестить("ПеремещениеПроведено",,);
		
	ИначеЕсли ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И Объект.Подтвержден Тогда
		Если НЕ ПроверкаСвязныхДокументов() Тогда
			Объект.Подтвержден = Ложь;
			Объект.ДанныеПодтверждения = "";
			Элементы.ФормаУтвердитьПеремещение.Доступность = Истина;
		КонецЕсли;
			
	КонецЕсли;
	//}ЭР Несторук С.И.	
	
КонецПроцедуры


&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если Объект.Заказы.Количество() > 0 ИЛИ Объект.Грузы.Количество() > 0 ИЛИ Объект.Платежи.Количество() > 0 Тогда
		
		ТекстВопроса = Нстр("ru = 'Табличная часть будет очищена. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьВопросПоОчисткеТчЗавершение", ЭтаФорма), ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Возврат;
		
	КонецЕсли;
	УстновитьВидимостьИДоступностьПолей();

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросПоОчисткеТчЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если НЕ Результат = КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
	Объект.Заказы.Очистить();
	Объект.Грузы.Очистить();
	Объект.Платежи.Очистить();
	УстновитьВидимостьИДоступностьПолей();
КонецПроцедуры


&НаСервере
Процедура УстновитьВидимостьИДоступностьПолей()
	
	Если Объект.ВидОперации = Перечисления.ES_ВидыОперацийПеремещение.НаложенныеПлатежи Тогда
		Элементы.ГруппаЗаказы.Видимость = Ложь;
		Элементы.ГруппаПлатежи.Видимость = Истина;
		Элементы.ФормаУтвердитьПеремещение.Видимость = Ложь;
		Элементы.ГруппаПодвал.Видимость = Истина;
		Элементы.ГруппаПодтвержден.Видимость	 = Ложь;
	Иначе
		Если Объект.ВидОперации = Перечисления.ES_ВидыОперацийПеремещение.Заказы Тогда 
			Элементы.ГруппаЗаказы.Видимость = Истина;
			Элементы.СкладОтправитель.Заголовок = "Склад отправитель";
			Элементы.СкладПолучатель.Видимость = Истина;
			Элементы.ФормаУтвердитьПеремещение.Видимость = Истина;
			Элементы.ЗаказыПроверен.Видимость = истина;
			Элементы.ГруппаПлатежи.Видимость = Ложь;
			Элементы.ФормаУтвердитьПеремещение.Видимость = Истина;
			Элементы.ГруппаПодвал.Видимость = Истина;
			Элементы.Заказы.КоманднаяПанель.Видимость = Истина;
			Элементы.ГруппаПодтвержден.Видимость		= Истина;
			Элементы.Подрядчик.Видимость = Истина;
		ИначеЕсли Объект.ВидОперации = Перечисления.ES_ВидыОперацийПеремещение.Курьер Тогда
			Элементы.СкладОтправитель.Заголовок = "Склад";
			Элементы.СкладПолучатель.Видимость = Ложь;
			Элементы.ФормаУтвердитьПеремещение.Видимость = Ложь;
			Элементы.ЗаказыПроверен.Видимость = Истина;
			Элементы.ГруппаЗаказы.Видимость = Истина;
			Элементы.ГруппаПлатежи.Видимость = Ложь;
			Элементы.ФормаУтвердитьПеремещение.Видимость = Ложь;
			Элементы.ГруппаПодвал.Видимость = Истина;
			Элементы.Заказы.КоманднаяПанель.Видимость = Истина;
			Элементы.ГруппаПодтвержден.Видимость	 = Ложь;
			Элементы.Подрядчик.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ДокументОснование.Видимость = ЗначениеЗаполнено(Объект.ДокументОснование);
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//ЭР Несторук С.И. 10.04.2019 9:32:27 {
	ES_БиллингКлиент.ПроверитьДоступностьСервисаDelans(Отказ);
	//}ЭР Несторук С.И.

	УстновитьВидимостьИДоступностьПолей();
	//ЭР Несторук С.И. 03.10.2017 10:11:23 {
	//Уведомляем Об Отсутствующих Заказах при создании на основании плана доставки
	СообщитьОбОтсутствующихЗаказах(Объект.ДокументОснование);
	//}ЭР Несторук С.И.
КонецПроцедуры

&НаСервере
Процедура СообщитьОбОтсутствующихЗаказах(ДокументОснование)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ES_ПланДоставки") Тогда
		
		МассивЗаказов = ДокументОснование.Заказы.ВыгрузитьКолонку("ДокументДоставки");
		
		ВывестиСообщение = Ложь;
		Накладные = "";
		Для каждого Заказ Из МассивЗаказов Цикл
			
			Если ТипЗнч(Заказ) <> Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				Продолжить;
			КонецЕсли;
			
			НайтиСтроки = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", Заказ));
			НайтиЗаборы = ДокументОснование.Заказы.НайтиСтроки(Новый Структура("СвязанныйДокумент",Заказ));
			Если НайтиСтроки.Количество() = 0 И НайтиЗаборы.Количество() = 0 Тогда
				ВывестиСообщение = Истина;
				Накладные = ?(ПустаяСтрока(Накладные), Накладные+Заказ.ES_НомерНакладной, Накладные+"; "+Заказ.ES_НомерНакладной);
			КонецЕсли;
			
		КонецЦикла;
		Если ВывестиСообщение Тогда
			Сообщить(НСтр("ru='Накладные "+ Накладные+" отсутствуют на складе'"));
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры


&НаКлиенте
Процедура ЗаказыПроверенПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Заказы.ТекущиеДанные;
	ТекСтрока.МестФакт = ?(ТекСтрока.Проверен, 0,ТекСтрока.МестФакт); 

КонецПроцедуры


&НаКлиенте
Процедура ЗаказыОтметитьВсе(Команда)
	
	Для каждого Стр Из Объект.Заказы Цикл
		
		Стр.Проверен = Истина;
		Стр.МестФакт = 0;
		
	КонецЦикла;
	
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаказыСнятьВсе(Команда)
	Для каждого Стр Из Объект.Заказы Цикл
		
		Стр.Проверен = Ложь;
		Стр.МестФакт = 0;
		
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ПодобратьПлатежи(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Партнер) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Поле = "Объект.Партнер";
		СообщениеПользователю.Текст	= "Не указан партнер";
		СообщениеПользователю.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		Сообщить("Отмените проведение документа");
		Возврат;
	КонецЕсли;
	
	
	Если Объект.Платежи.Количество() > 0 Тогда
		
		ТекстВопроса = Нстр("ru = 'Табличная часть ""Платежи"" будет очищена. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьВопросПоОчисткеТчПлатежиЗавершение", ЭтаФорма), ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Возврат;
		
	КонецЕсли;

	
	
	ОткрытьФормуПодбораПлатежей();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросПоОчисткеТчПлатежиЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если НЕ Результат = КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
	
	Объект.Платежи.Очистить();
	ОткрытьФормуПодбораПлатежей();

КонецПроцедуры


&НаКлиенте
Процедура ОткрытьФормуПодбораПлатежей()
	
	Уникальность = "ФормаПодбораПлатежей" + Объект.Ссылка;
	мПараметры = Новый Структура;
	мПараметры.Вставить("ВидПодбора", "ПеремещениеПлатежи");
	мПараметры.Вставить("Контрагент", Объект.Партнер);
	мПараметры.Вставить("Организация",
	ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(ПредопределенноеЗначение("Перечисление.ES_ВидыСтартовыхНастроек.Организация")));
	
	ОткрытьФорму("ОбщаяФорма.ES_ФормаПодбора",мПараметры,ЭтаФорма,Уникальность,,, Новый ОписаниеОповещения("ПодобратьПлатежиЗавершение", ЭтотОбъект), );

	
КонецПроцедуры



&НаКлиенте
Процедура ПодобратьПлатежиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(Результат) = тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗаказов = Новый Массив;
	Для каждого Элемент ИЗ Результат Цикл
	МассивЗаказов.Добавить(Элемент.Заказ);	
	КонецЦикла;
	
	Если Результат.Количество() > 0  Тогда
		ЗаполнитьТЧПлатежиНаСервере(МассивЗаказов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧПлатежиНаСервере(МассивЗаказов)
	
	ES_ОбщегоНазначения.ЗаполнитьТЧПлатежиНаСервере(Объект.Платежи, МассивЗаказов);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПересчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуДокумента()
	Объект.Платежи.Итог("КОтправке");	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиНПФактНалПриИзменении(Элемент)
	ПересчитатьСуммуПоСтроке();
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиНПФактБезналПриИзменении(Элемент)
	ПересчитатьСуммуПоСтроке();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуПоСтроке()
	ТекСтрока = Элементы.Платежи.ТекущиеДанные;
	ТекСтрока.Принято = ТекСтрока.НПФактНал + ТекСтрока.НПФактБезнал;
	ПересчитатьСуммуДокумента();
КонецПроцедуры


&НаКлиенте
Процедура ПодобратьЗаказы(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Поле = "Объект.СкладОтправитель";
		СообщениеПользователю.Текст	= "Не указан склад отравитель";
		СообщениеПользователю.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		Сообщить("Отмените проведение документа");
		Возврат;
	КонецЕсли;
	
	
	Если Объект.Заказы.Количество() > 0 Тогда
		
		ТекстВопроса = Нстр("ru = 'Табличная часть ""Заказы"" будет очищена. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьВопросПоОчисткеТчЗаказыЗавершение", ЭтаФорма), ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Возврат;
		
	КонецЕсли;
	
	
	
	ОткрытьФормуПодбораЗаказов();
	

	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросПоОчисткеТчЗаказыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если НЕ Результат = КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
	
	Объект.ЗАказы.Очистить();
	Объект.Грузы.Очистить();
	ОткрытьФормуПодбораЗаказов();

КонецПроцедуры


&НаКлиенте
Процедура ОткрытьФормуПодбораЗаказов()
	
	Уникальность = "ФормаПодбораЗаказов" + Объект.Ссылка;
	мПараметры = Новый Структура;
	мПараметры.Вставить("ВидПодбора", "ПеремещениеЗаказы");
	мПараметры.Вставить("Склад", Объект.СкладОтправитель);
	мПараметры.Вставить("Организация",
	ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(ПредопределенноеЗначение("Перечисление.ES_ВидыСтартовыхНастроек.Организация")));
	
	ОткрытьФорму("ОбщаяФорма.ES_ФормаПодбора",мПараметры,ЭтаФорма,Уникальность,,, Новый ОписаниеОповещения("ПодобратьЗаказыЗавершение", ЭтотОбъект), );
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьЗаказыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(Результат) = тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗаказов = Новый Массив;
	Для каждого Элемент ИЗ Результат Цикл
		МассивЗаказов.Добавить(Элемент.Заказ);	
	КонецЦикла;
	
	Если Результат.Количество() > 0  Тогда
		ЗаполнитьТЧПЗаказыНаСервере(МассивЗаказов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧПЗаказыНаСервере(МассивЗаказов)
	мОбъект = РеквизитФормыВЗначение("Объект");
	ES_ОбщегоНазначения.СоздатьПеремещениеЗаказовНаСервере(мОбъект,МассивЗаказов);
	ЗначениеВРеквизитФормы(мОбъект,"Объект");
	
КонецПроцедуры


&НаКлиенте
Процедура ПлатежиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Возврат;
КонецПроцедуры


&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ES_ВидыОперацийПеремещение.Курьер") 
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		СообщитьОПроверке(Отказ);			
		
	КонецЕсли;
	
	//мРежимПроведения = ПараметрыЗаписи.
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОПроверке(Отказ)
	
	ВывестиСообщение = Ложь;
	СтрокиНеПроверено = "";
	Для каждого Стр Из Объект.Заказы Цикл
		Если НЕ Стр.Проверен Тогда
			Отказ = Истина;
			ВывестиСообщение = Истина;
			СтрокиНеПроверено = ?(ПустаяСтрока(СтрокиНеПроверено), СтрокиНеПроверено+Стр.НомерСтроки, СтрокиНеПроверено+"; "+Стр.НомерСтроки);
		КонецЕсли;
		
	КонецЦикла;
	Если ВывестиСообщение Тогда
		Сообщить(НСтр("ru='В строках: "+ СтрокиНеПроверено+" непроверенные заказы'"));
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция ПроверкаСвязныхДокументов()
Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ES_Приемка.Ссылка
		|ИЗ
		|	Документ.ES_Приемка КАК ES_Приемка
		|ГДЕ
		|	ES_Приемка.ДокументОснование = &Ссылка
		|	И НЕ ES_Приемка.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Сообщение = "На основании документа созданы документы:("+Выборка.Количество()+"): ";
			Пока Выборка.Следующий() Цикл 
				Сообщение = Сообщение + Символы.ПС + Выборка.Ссылка;
			КонецЦикла;
			Сообщить(Сообщение);
			ЭтаФорма.ТолькоПросмотр = Истина;
			Возврат Истина;
			//Элементы.ПлатежиПодобратьПлатежи.Доступность = Ложь;
		Иначе 
			ЭтаФорма.ТолькоПросмотр = Ложь;
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;	
КонецФункции