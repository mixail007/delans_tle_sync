#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Контрагент)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Ограничивает видимость реквизитов объекта в отчете по версии.
//
// Параметры:
// Реквизиты - Массив - список имен реквизитов объекта.
Процедура ПриПолученииСлужебныхРеквизитов(Реквизиты) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область СлужебныйИнтерфейс

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасы(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаЗапасы.ВидДвижения КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ТаблицаЗапасы.КоррОрганизация КАК КоррОрганизация,
	|	ЕСТЬNULL(ТаблицаЗапасы.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК СтруктурнаяЕдиница,
	|	ЕСТЬNULL(ТаблицаЗапасы.КоррСтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.КоррСчетУчета КАК КоррСчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ТаблицаЗапасы.КоррНоменклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ТаблицаЗапасы.КоррХарактеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.КоррПартия КАК КоррПартия,
	|	ТаблицаЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|			ТОГДА ТаблицаЗапасы.ДокументОснование.Ответственный
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	КОНЕЦ КАК Ответственный,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Возврат,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|				И (ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ДокументОснование КАК Документ.РасходнаяНакладная).ВидОперации, ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ДокументОснование КАК Документ.ЗаказПокупателя).ВидОперации, ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд))
	|			ТОГДА ТаблицаЗапасы.ДокументОснование
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|				И ТаблицаЗапасы.ДокументОснование ССЫЛКА Документ.ЧекККМ
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаЗапасы.ДокументОснование КАК Документ.ЧекККМ).КассоваяСмена
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументПродажи,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И НЕ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|				И НЕ(ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку)
	|						И НЕ ФункциональнаяОпцияРезервированиеЗапасов.Значение)
	|			ТОГДА ТаблицаЗапасы.Заказ
	|		КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|				И ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика)
	|				И ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ТаблицаЗапасы.Заказ.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|			ТОГДА ТаблицаЗапасы.Заказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПродажи,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|			ТОГДА ТаблицаЗапасы.ПодразделениеПродажи
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|				И (ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|					ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию))
	|			ТОГДА ТаблицаЗапасы.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ИсточникОбеспечения,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.КоррЗаказ ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ТаблицаЗапасы.КоррЗаказ
	|		КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|				И ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика)
	|				И ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ТаблицаЗапасы.КоррЗаказ.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК КоррЗаказПокупателя,
	|	ТаблицаЗапасы.ФиксированнаяСтоимость КАК ФиксированнаяСтоимость,
	|	ТаблицаЗапасы.СодержаниеПроводки КАК СодержаниеПроводки,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|				ТОГДА -1 * ТаблицаЗапасы.Количество
	|			ИНАЧЕ ТаблицаЗапасы.Количество
	|		КОНЕЦ) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию)
	|					ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку)
	|					ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаОтветхранение)
	|					ИЛИ ТаблицаЗапасы.ТоварыНаКомиссии
	|					ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|						И (ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ДокументОснование КАК Документ.РасходнаяНакладная).ВидОперации, ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|							ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ДокументОснование КАК Документ.ЗаказПокупателя).ВидОперации, ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|							ИЛИ ТаблицаЗапасы.ДокументОснование ССЫЛКА Документ.ЧекККМ)
	|				ТОГДА 0
	|			КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|				ТОГДА -1 * ТаблицаЗапасы.Себестоимость
	|			КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|					И ТаблицаЗапасы.ВключатьРасходыВСебестоимость
	|				ТОГДА ТаблицаЗапасы.Сумма + ТаблицаЗапасы.СуммаРасходов
	|			ИНАЧЕ ТаблицаЗапасы.Сумма
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|					И ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ДокументОснование КАК Документ.РасходнаяНакладная).ВидОперации, ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|					И ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ДокументОснование КАК Документ.ЗаказПокупателя).ВидОперации, ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|					И НЕ (ТаблицаЗапасы.ДокументОснование ССЫЛКА Документ.ЧекККМ)
	|				ТОГДА ТаблицаЗапасы.Себестоимость
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Себестоимость
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы,
	|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК ФункциональнаяОпцияРезервированиеЗапасов
	|ГДЕ
	|	НЕ ТаблицаЗапасы.ПеремещениеВРозницуСуммовойУчет
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.КоррОрганизация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.КоррСчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.НоменклатураНабора,
	|	ТаблицаЗапасы.ХарактеристикаНабора,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.КоррНоменклатура,
	|	ТаблицаЗапасы.КоррХарактеристика,
	|	ТаблицаЗапасы.КоррПартия,
	|	ТаблицаЗапасы.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|			ТОГДА ТаблицаЗапасы.ДокументОснование.Ответственный
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ТаблицаЗапасы.ФиксированнаяСтоимость,
	|	ТаблицаЗапасы.СодержаниеПроводки,
	|	ТаблицаЗапасы.ВидДвижения,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И НЕ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|				И НЕ(ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку)
	|						И НЕ ФункциональнаяОпцияРезервированиеЗапасов.Значение)
	|			ТОГДА ТаблицаЗапасы.Заказ
	|		КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|				И ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика)
	|				И ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ТаблицаЗапасы.Заказ.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|			ТОГДА ТаблицаЗапасы.Заказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|			ТОГДА ТаблицаЗапасы.ПодразделениеПродажи
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|				И (ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|					ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию))
	|			ТОГДА ТаблицаЗапасы.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.КоррЗаказ ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ТаблицаЗапасы.КоррЗаказ
	|		КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|				И ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика)
	|				И ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ТаблицаЗапасы.КоррЗаказ.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|				И (ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ДокументОснование КАК Документ.РасходнаяНакладная).ВидОперации, ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|					ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЗапасы.ДокументОснование КАК Документ.ЗаказПокупателя).ВидОперации, ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд))
	|			ТОГДА ТаблицаЗапасы.ДокументОснование
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|				И ТаблицаЗапасы.ДокументОснование ССЫЛКА Документ.ЧекККМ
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаЗапасы.ДокументОснование КАК Документ.ЧекККМ).КассоваяСмена
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", РезультатЗапроса.Выгрузить());
	
	Если ДокументСсылкаПриходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика
	 ИЛИ ДокументСсылкаПриходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию
	 ИЛИ ДокументСсылкаПриходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаОтветхранение Тогда
		
		СформироватьТаблицаЗапасыПоступление(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
		
	ИначеЕсли ДокументСсылкаПриходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера
		ИЛИ ДокументСсылкаПриходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика
		ИЛИ ДокументСсылкаПриходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратСОтветхранения Тогда
		
		СформироватьТаблицаЗапасыВозврат(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
		
	КонецЕсли;
		
	Если ДокументСсылкаПриходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика Тогда
		
		СформироватьТаблицаЗапасыРасходы(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьТаблицаЗапасы()

Процедура СформироватьТаблицаЗапасыВРазрезеГТД(СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыНаСкладах.НомерСтроки) КАК НомерСтроки
	|	,ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения
	|	,ТаблицаЗапасыНаСкладах.Период КАК Период
	|	,ТаблицаЗапасыНаСкладах.Организация КАК Организация
	|	,ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура
	|	,ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика
	|	,ТаблицаЗапасыНаСкладах.Партия КАК Партия
	|	,ТаблицаЗапасыНаСкладах.НомерГТД КАК НомерГТД
	|	,ТаблицаЗапасыНаСкладах.СтранаПроисхождения КАК СтранаПроисхождения
	|	,СУММА(ТаблицаЗапасыНаСкладах.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыНаСкладах
	|ГДЕ
	|	ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> Значение(Справочник.СтраныМира.Россия)
	|	И ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> Значение(Справочник.СтраныМира.ПустаяССылка)
	|	И ТаблицаЗапасыНаСкладах.НомерГТД <> Значение(Справочник.НомераГТД.ПустаяССылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыНаСкладах.Период
	|	,ТаблицаЗапасыНаСкладах.Организация
	|	,ТаблицаЗапасыНаСкладах.Номенклатура
	|	,ТаблицаЗапасыНаСкладах.Характеристика
	|	,ТаблицаЗапасыНаСкладах.Партия
	|	,ТаблицаЗапасыНаСкладах.НомерГТД
	|	,ТаблицаЗапасыНаСкладах.СтранаПроисхождения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыВРазрезеГТД", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыПоступление(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства)
	
	ТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.СкопироватьКолонки();
	ТаблицаРазмещениеЗаказов = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРазмещениеЗаказов.СкопироватьКолонки();
	
	КоличествоРазмещений = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРазмещениеЗаказов.Итог("Количество");
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = ТаблицаЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицаЗапасы, СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы[н]);
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("ИсточникОбеспечения",	СтрокаТаблицаЗапасы.ИсточникОбеспечения);
		СтруктураДляПоиска.Вставить("Номенклатура",			СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика",		СтрокаТаблицаЗапасы.Характеристика);
		
		СтрокаТаблицаЗапасы.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
		
		Если КоличествоРазмещений = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		МассивРазмещенныхЗаказов = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРазмещениеЗаказов.НайтиСтроки(СтруктураДляПоиска);
		
		СтрокаТаблицаЗапасыКоличество = СтрокаТаблицаЗапасы.Количество;
		
		Если МассивРазмещенныхЗаказов.Количество() > 0 Тогда
			
			Для каждого СтрокаМассива Из МассивРазмещенныхЗаказов Цикл
				
				Если СтрокаТаблицаЗапасыКоличество > 0 И СтрокаМассива.Количество >= СтрокаТаблицаЗапасыКоличество Тогда
					
					// Размещение
					НоваяСтрокаТаблицаРазмещениеЗаказов = ТаблицаРазмещениеЗаказов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицаРазмещениеЗаказов, СтрокаМассива);
					
					НоваяСтрокаТаблицаРазмещениеЗаказов.Количество = СтрокаТаблицаЗапасыКоличество;
					
					// Запасы
					СтрокаТаблицаЗапасы.ЗаказПокупателя = СтрокаМассива.ЗаказПокупателя;
					СтрокаТаблицаЗапасыКоличество = 0;
					
				ИначеЕсли СтрокаТаблицаЗапасыКоличество > 0 И СтрокаМассива.Количество < СтрокаТаблицаЗапасыКоличество Тогда
					
					// Размещение
					НоваяСтрокаТаблицаРазмещениеЗаказов = ТаблицаРазмещениеЗаказов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицаРазмещениеЗаказов, СтрокаМассива);
					
					// Запасы
					СуммаКСписанию = Окр(СтрокаТаблицаЗапасы.Сумма * СтрокаМассива.Количество / СтрокаТаблицаЗапасыКоличество, 2, 1);
					
					НоваяСтрокаТаблицаЗапасы = ТаблицаЗапасы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицаЗапасы, СтрокаТаблицаЗапасы);
					НоваяСтрокаТаблицаЗапасы.ЗаказПокупателя = СтрокаМассива.ЗаказПокупателя;
					НоваяСтрокаТаблицаЗапасы.Количество = СтрокаМассива.Количество;
					НоваяСтрокаТаблицаЗапасы.Сумма = СуммаКСписанию;
					
					СтрокаТаблицаЗапасыКоличество = СтрокаТаблицаЗапасыКоличество - СтрокаМассива.Количество;
					
					СтрокаТаблицаЗапасы.Количество = СтрокаТаблицаЗапасыКоличество;
					СтрокаТаблицаЗапасы.Сумма = СтрокаТаблицаЗапасы.Сумма - СуммаКСписанию;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаТаблицаРазмещениеЗаказов Из СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРазмещениеЗаказов Цикл
		Если НЕ СтрокаТаблицаРазмещениеЗаказов.ЭтоУслуга Тогда
			Продолжить;
		КонецЕсли; 
		// Размещение услуг
		НоваяСтрокаТаблицаРазмещениеЗаказов = ТаблицаРазмещениеЗаказов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицаРазмещениеЗаказов, СтрокаТаблицаРазмещениеЗаказов);
	КонецЦикла; 
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы = ТаблицаЗапасы;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРазмещениеЗаказов = ТаблицаРазмещениеЗаказов;
	ТаблицаРазмещениеЗаказов = Неопределено;
	
КонецПроцедуры // СформироватьТаблицаЗапасыПоступление()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыРасходы(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаЗапасы.ВидДвижения КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ТаблицаЗапасы.Заказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	0 КАК Количество,
	|	СУММА(ТаблицаЗапасы.Сумма) КАК Сумма,
	|	ИСТИНА КАК ФиксированнаяСтоимость,
	|	&ПрочиеРасходы КАК СодержаниеПроводки
	|ИЗ
	|	ВременнаяТаблицаРасходы КАК ТаблицаЗапасы,
	|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК ФункциональнаяОпцияРезервированиеЗапасов
	|ГДЕ
	|	НЕ ТаблицаЗапасы.ВключатьРасходыВСебестоимость
	|	И (ТаблицаЗапасы.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство)
	|			ИЛИ ТаблицаЗапасы.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ТаблицаЗапасы.Заказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаЗапасы.ВидДвижения";
	
	Запрос.УстановитьПараметр("ПрочиеРасходы", НСтр("ru = 'Отражение затрат'"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Количество() = 0 Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", РезультатЗапроса.Выгрузить());		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьТаблицаЗапасыРасходы()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыВозврат(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.КоррОрганизация КАК Организация,
	|	ТаблицаЗапасы.КоррСтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.КоррСчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.КоррНоменклатура КАК Номенклатура,
	|	ТаблицаЗапасы.КоррХарактеристика КАК Характеристика,
	|	ТаблицаЗапасы.КоррПартия КАК Партия,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.КоррЗаказ ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ТаблицаЗапасы.КоррЗаказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	(НЕ ТаблицаЗапасы.ПеремещениеВРозницуСуммовойУчет)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.КоррОрганизация,
	|	ТаблицаЗапасы.КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.КоррСчетУчета,
	|	ТаблицаЗапасы.КоррНоменклатура,
	|	ТаблицаЗапасы.КоррХарактеристика,
	|	ТаблицаЗапасы.КоррПартия,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.КоррЗаказ ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ТаблицаЗапасы.КоррЗаказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|		СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.КоррОрганизация,
	|						ТаблицаЗапасы.КоррСтруктурнаяЕдиница,
	|						ТаблицаЗапасы.КоррСчетУчета,
	|						ТаблицаЗапасы.КоррНоменклатура,
	|						ТаблицаЗапасы.КоррХарактеристика,
	|						ТаблицаЗапасы.КоррПартия,
	|						ВЫБОР
	|							КОГДА ТаблицаЗапасы.КоррЗаказ ССЫЛКА Документ.ЗаказПокупателя
	|								ТОГДА ТаблицаЗапасы.КоррЗаказ
	|							ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|						КОНЕЦ
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия,
	|	ЗапасыОстатки.ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаПриходнаяНакладная);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапасыОстатки = РезультатЗапроса.Выгрузить();
	ТаблицаЗапасыОстатки.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
	
	ТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.СкопироватьКолонки();
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы[н];
				
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.КоррСчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.КоррНоменклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.КоррХарактеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.КоррПартия);

		СтруктураДляПоиска.Вставить("ЗаказПокупателя", СтрокаТаблицаЗапасы.КоррЗаказПокупателя);
		
		КоличествоТребуется = СтрокаТаблицаЗапасы.Количество;
		
		Если КоличествоТребуется > 0 Тогда
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуется Тогда
			
				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуется / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуется;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = КоличествоТребуется Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			// Расход.
			СтрокаТаблицыРасход = ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = - СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = - КоличествоТребуется;
			
			СтрокаТаблицыРасход.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
			
			СтрокаТаблицыРасход.Возврат = Истина;
			
			// Сформируем проводки.
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
				СтрокаТаблицаУправленческий.СчетДт = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицаУправленческий.ВалютаДт = Неопределено;
				СтрокаТаблицаУправленческий.СуммаВалДт = 0;
				СтрокаТаблицаУправленческий.СчетКт = СтрокаТаблицаЗапасы.КоррСчетУчета;
				СтрокаТаблицаУправленческий.ВалютаКт = Неопределено;
				СтрокаТаблицаУправленческий.СуммаВалКт = 0;
				СтрокаТаблицаУправленческий.Сумма = - СуммаКСписанию;
			КонецЕсли;
			
			// Приход.
			СтрокаТаблицыПриход = ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы,,"СтруктурнаяЕдиница, КоррСтруктурнаяЕдиница");
			
			СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
						
			СтрокаТаблицыПриход.Организация = СтрокаТаблицаЗапасы.КоррОрганизация;
			СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
			СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
			СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
			СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
			СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
			
			СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
			                                                          			
			СтрокаТаблицыПриход.КоррОрганизация = СтрокаТаблицаЗапасы.Организация;
			СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
			СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
			СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
			СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
			СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
									
			СтрокаТаблицыПриход.КоррЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
			
			СтрокаТаблицыПриход.Сумма = - СуммаКСписанию;
			СтрокаТаблицыПриход.Количество = - КоличествоТребуется;
			
			СтрокаТаблицыПриход.СодержаниеПроводки = НСтр("ru='Передача запасов'");
			
			СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
			
			СтрокаТаблицыПриход.Возврат = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы = ТаблицаЗапасы;
	
КонецПроцедуры // СформироватьТаблицаЗапасыВозврат()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходы(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	МИНИМУМ(ТаблицаДоходыИРасходы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаДоходыИРасходы.Период КАК Период,
	|	ТаблицаДоходыИРасходы.Организация КАК Организация,
	|	ТаблицаДоходыИРасходы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ТаблицаДоходыИРасходы.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ПрочиеРасходы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее)
	|		ИНАЧЕ ТаблицаДоходыИРасходы.НаправлениеДеятельности
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ТаблицаДоходыИРасходы.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ПрочиеРасходы)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаДоходыИРасходы.Заказ
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ТаблицаДоходыИРасходы.СчетУчета КАК СчетУчета,
	|	ТаблицаДоходыИРасходы.Номенклатура КАК Аналитика,
	|	ВЫРАЗИТЬ(&ПрочиеРасходы КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	0 КАК СуммаДоходов,
	|	СУММА(ТаблицаДоходыИРасходы.Сумма) КАК СуммаРасходов,
	|	СУММА(ТаблицаДоходыИРасходы.Сумма) КАК Сумма,
	|	ВЫБОР
	|		КОГДА ТаблицаДоходыИРасходы.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ПрочиеРасходы)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Распределять,
	|	ТаблицаДоходыИРасходы.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ТаблицаДоходыИРасходы.Номенклатура КАК Номенклатура,
	|	ТаблицаДоходыИРасходы.Характеристика КАК Характеристика,
	|	ТаблицаДоходыИРасходы.Количество КАК Количество
	|ИЗ
	|	ВременнаяТаблицаРасходы КАК ТаблицаДоходыИРасходы
	|ГДЕ
	|	ТаблицаДоходыИРасходы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|	И НЕ ТаблицаДоходыИРасходы.ВключатьРасходыВСебестоимость
	|	И (ТаблицаДоходыИРасходы.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.Расходы)
	|			ИЛИ ТаблицаДоходыИРасходы.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ПрочиеРасходы))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДоходыИРасходы.Период,
	|	ТаблицаДоходыИРасходы.Организация,
	|	ТаблицаДоходыИРасходы.СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ТаблицаДоходыИРасходы.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ПрочиеРасходы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее)
	|		ИНАЧЕ ТаблицаДоходыИРасходы.НаправлениеДеятельности
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДоходыИРасходы.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ПрочиеРасходы)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаДоходыИРасходы.Заказ
	|	КОНЕЦ,
	|	ТаблицаДоходыИРасходы.СчетУчета,
	|	ТаблицаДоходыИРасходы.Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаДоходыИРасходы.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ПрочиеРасходы)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ТаблицаДоходыИРасходы.ЗаказПоставщику,
	|	ТаблицаДоходыИРасходы.Характеристика,
	|	ТаблицаДоходыИРасходы.Количество,
	|	ТаблицаДоходыИРасходы.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	МИНИМУМ(ТаблицаДоходыИРасходы.НомерСтроки),
	|	ТаблицаДоходыИРасходы.Период,
	|	ТаблицаДоходыИРасходы.Организация,
	|	ТаблицаДоходыИРасходы.ПодразделениеПродажи,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельностиПродажи,
	|	ТаблицаДоходыИРасходы.Заказ,
	|	ТаблицаДоходыИРасходы.СчетУчетаПродажи,
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫРАЗИТЬ(&ОтражениеДоходов КАК СТРОКА(100)),
	|	-СУММА(ТаблицаДоходыИРасходы.Сумма),
	|	0,
	|	-СУММА(ТаблицаДоходыИРасходы.Сумма),
	|	ЛОЖЬ,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	0
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДоходыИРасходы
	|ГДЕ
	|	ТаблицаДоходыИРасходы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|	И НЕ ТаблицаДоходыИРасходы.ТоварыНаКомиссии
	|	И НЕ ТаблицаДоходыИРасходы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДоходыИРасходы.Период,
	|	ТаблицаДоходыИРасходы.Организация,
	|	ТаблицаДоходыИРасходы.ПодразделениеПродажи,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельностиПродажи,
	|	ТаблицаДоходыИРасходы.Заказ,
	|	ТаблицаДоходыИРасходы.СчетУчетаПродажи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	МИНИМУМ(ТаблицаДоходыИРасходы.НомерСтроки),
	|	ТаблицаДоходыИРасходы.Период,
	|	ТаблицаДоходыИРасходы.Организация,
	|	ТаблицаДоходыИРасходы.ПодразделениеПродажи,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельностиПродажи,
	|	ТаблицаДоходыИРасходы.Заказ,
	|	ТаблицаДоходыИРасходы.СчетУчетаСебестоимость,
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫРАЗИТЬ(&ОтражениеРасходов КАК СТРОКА(100)),
	|	0,
	|	-СУММА(ТаблицаДоходыИРасходы.Себестоимость),
	|	-СУММА(ТаблицаДоходыИРасходы.Себестоимость),
	|	ЛОЖЬ,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	0
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДоходыИРасходы
	|ГДЕ
	|	ТаблицаДоходыИРасходы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|	И ЕСТЬNULL(ТаблицаДоходыИРасходы.ДокументОснование.ВидОперации, ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|	И ЕСТЬNULL(ТаблицаДоходыИРасходы.ДокументОснование.ВидОперации, ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|	И НЕ ТаблицаДоходыИРасходы.ДокументОснование ССЫЛКА Документ.ЧекККМ
	|	И НЕ ТаблицаДоходыИРасходы.ТоварыНаКомиссии
	|	И ТаблицаДоходыИРасходы.Себестоимость > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДоходыИРасходы.Период,
	|	ТаблицаДоходыИРасходы.Организация,
	|	ТаблицаДоходыИРасходы.ПодразделениеПродажи,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельностиПродажи,
	|	ТаблицаДоходыИРасходы.Заказ,
	|	ТаблицаДоходыИРасходы.СчетУчетаСебестоимость
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4,
	|	1,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Организация,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее),
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА &ОтрицательнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ &ПоложительнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ТаблицаДокумента.Валюта,
	|	&КурсоваяРазница,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА 0
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	0
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаКурсовыхРазницРасчетыСПоставщиками.Дата КАК Дата,
	|		ТаблицаКурсовыхРазницРасчетыСПоставщиками.Организация КАК Организация,
	|		ТаблицаКурсовыхРазницРасчетыСПоставщиками.Валюта КАК Валюта,
	|		СУММА(ТаблицаКурсовыхРазницРасчетыСПоставщиками.СуммаКурсовойРазницы) КАК СуммаКурсовойРазницы
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаДокумента.Дата КАК Дата,
	|			ТаблицаДокумента.Организация КАК Организация,
	|			ТаблицаДокумента.Валюта КАК Валюта,
	|			ТаблицаДокумента.СуммаКурсовойРазницы КАК СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПоставщиками КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаДокумента.Дата,
	|			ТаблицаДокумента.Организация,
	|			ТаблицаДокумента.Валюта,
	|			ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПоставщиками КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК ТаблицаКурсовыхРазницРасчетыСПоставщиками
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаКурсовыхРазницРасчетыСПоставщиками.Дата,
	|		ТаблицаКурсовыхРазницРасчетыСПоставщиками.Организация,
	|		ТаблицаКурсовыхРазницРасчетыСПоставщиками.Валюта
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ТаблицаКурсовыхРазницРасчетыСПоставщиками.СуммаКурсовойРазницы) >= 0.005
	|			ИЛИ СУММА(ТаблицаКурсовыхРазницРасчетыСПоставщиками.СуммаКурсовойРазницы) <= -0.005)) КАК ТаблицаДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5,
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Организация,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее),
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА &ПоложительнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ &ОтрицательнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ТаблицаДокумента.Валюта,
	|	&КурсоваяРазница,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА 0
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	0
	|ИЗ
	|	ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ПрочиеРасходы", НСтр("ru = 'Отражение затрат'"));
	Запрос.УстановитьПараметр("ПоложительнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ОтрицательнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеРасходы);
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	Запрос.УстановитьПараметр("ОтражениеДоходов", НСтр("ru='Отражение доходов'"));
	Запрос.УстановитьПараметр("ОтражениеРасходов", НСтр("ru='Отражение расходов'"));
	
	ТаблицаРазмещениеЗаказов = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРазмещениеЗаказов.Скопировать();
	ТаблицаДоходыРасходы = Запрос.Выполнить().Выгрузить();
	Результат = ТаблицаДоходыРасходы.СкопироватьКолонки();
	
	Для каждого СтрокаТаблицаДоходыРасходы Из ТаблицаДоходыРасходы Цикл
		
		Если НЕ СтрокаТаблицаДоходыРасходы.Распределять
			ИЛИ ЗначениеЗаполнено(СтрокаТаблицаДоходыРасходы.ЗаказПокупателя)
			ИЛИ СтрокаТаблицаДоходыРасходы.Количество=0 Тогда
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицаДоходыРасходы);
			Продолжить;
		КонецЕсли; 
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("ИсточникОбеспечения",	СтрокаТаблицаДоходыРасходы.ЗаказПоставщику);
		СтруктураДляПоиска.Вставить("Номенклатура",			СтрокаТаблицаДоходыРасходы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика",		СтрокаТаблицаДоходыРасходы.Характеристика);
		МассивРазмещенныхЗаказов = ТаблицаРазмещениеЗаказов.НайтиСтроки(СтруктураДляПоиска);
		
		РаспределитьКоличество = СтрокаТаблицаДоходыРасходы.Количество;
		РаспределитьСумма = СтрокаТаблицаДоходыРасходы.Сумма;
		
		Для каждого СтрокаМассива Из МассивРазмещенныхЗаказов Цикл
			
			Количество = Мин(РаспределитьКоличество, СтрокаМассива.Количество);
			Если Количество<=0 Тогда
				Продолжить;
			КонецЕсли;
			Сумма = СтрокаТаблицаДоходыРасходы.Сумма * Количество / СтрокаТаблицаДоходыРасходы.Количество;
			РаспределитьКоличество = РаспределитьКоличество - Количество;
			СтрокаМассива.Количество = СтрокаМассива.Количество - Количество;
			РаспределитьСумма = РаспределитьСумма - Сумма;
			
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицаДоходыРасходы);
			НоваяСтрока.Количество = Количество;
			НоваяСтрока.Сумма = Сумма;
			НоваяСтрока.СуммаРасходов = Сумма;
			НоваяСтрока.ЗаказПокупателя = СтрокаМассива.ЗаказПокупателя;
			
		КонецЦикла;
		
		Если РаспределитьКоличество>0 Тогда
			
			Сумма = СтрокаТаблицаДоходыРасходы.Сумма * РаспределитьКоличество / СтрокаТаблицаДоходыРасходы.Количество;
			РаспределитьСумма = РаспределитьСумма - Сумма;
			
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицаДоходыРасходы);
			НоваяСтрока.Количество = РаспределитьКоличество;
			НоваяСтрока.Сумма = Сумма;
			НоваяСтрока.СуммаРасходов = Сумма;
			
		КонецЕсли;
		
		Если РаспределитьСумма<>0 Тогда
			
			НоваяСтрока.Сумма = НоваяСтрока.Сумма + РаспределитьСумма;
			НоваяСтрока.СуммаРасходов = НоваяСтрока.СуммаРасходов + РаспределитьСумма;
			
		КонецЕсли; 
			
	КонецЦикла; 
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходы", Результат);
	ТаблицаРазмещениеЗаказов = Неопределено;
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходы()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗакупки(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗакупки.Период КАК Период,
	|	ТаблицаЗакупки.Организация КАК Организация,
	|	ТаблицаЗакупки.Номенклатура КАК Номенклатура,
	|	ТаблицаЗакупки.Характеристика КАК Характеристика,
	|	ТаблицаЗакупки.Партия КАК Партия,
	|	ТаблицаЗакупки.Заказ КАК ЗаказПоставщику,
	|	ТаблицаЗакупки.Документ КАК Документ,
	|	ТаблицаЗакупки.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаЗакупки.Количество) КАК Количество,
	|	СУММА(ТаблицаЗакупки.СуммаНДСЗакупкиПродажи) КАК СуммаНДС,
	|	СУММА(ТаблицаЗакупки.Сумма) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗакупки
	|ГДЕ
	|	(ТаблицаЗакупки.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|			ИЛИ ТаблицаЗакупки.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗакупки.Период,
	|	ТаблицаЗакупки.Организация,
	|	ТаблицаЗакупки.Номенклатура,
	|	ТаблицаЗакупки.Характеристика,
	|	ТаблицаЗакупки.Партия,
	|	ТаблицаЗакупки.Заказ,
	|	ТаблицаЗакупки.Документ,
	|	ТаблицаЗакупки.СтавкаНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗакупки.Период,
	|	ТаблицаЗакупки.Организация,
	|	ТаблицаЗакупки.Номенклатура,
	|	ТаблицаЗакупки.Характеристика,
	|	ТаблицаЗакупки.Партия,
	|	ТаблицаЗакупки.ЗаказПоставщику,
	|	ТаблицаЗакупки.Документ,
	|	ТаблицаЗакупки.СтавкаНДС,
	|	СУММА(ТаблицаЗакупки.Количество),
	|	СУММА(ТаблицаЗакупки.СуммаНДСЗакупкиПродажи),
	|	СУММА(ТаблицаЗакупки.Сумма)
	|ИЗ
	|	ВременнаяТаблицаРасходы КАК ТаблицаЗакупки
	|ГДЕ
	|	ТаблицаЗакупки.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗакупки.Период,
	|	ТаблицаЗакупки.Организация,
	|	ТаблицаЗакупки.Номенклатура,
	|	ТаблицаЗакупки.Характеристика,
	|	ТаблицаЗакупки.Партия,
	|	ТаблицаЗакупки.ЗаказПоставщику,
	|	ТаблицаЗакупки.Документ,
	|	ТаблицаЗакупки.СтавкаНДС";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗакупки", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗакупки()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажи(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродажи.Период КАК Период,
	|	ТаблицаПродажи.Организация КАК Организация,
	|	ТаблицаПродажи.Номенклатура КАК Номенклатура,
	|	ТаблицаПродажи.Характеристика КАК Характеристика,
	|	ТаблицаПродажи.НоменклатураНабора КАК НоменклатураНабора,
	|	ТаблицаПродажи.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ТаблицаПродажи.Партия КАК Партия,
	|	ТаблицаПродажи.Заказ КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ТаблицаПродажи.ДокументОснование = ЗНАЧЕНИЕ(Документ.РасходнаяНакладная.ПустаяСсылка)
	|				ИЛИ ТаблицаПродажи.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				ИЛИ ТаблицаПродажи.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|				ИЛИ ТаблицаПродажи.ДокументОснование = ЗНАЧЕНИЕ(Документ.ПриходныйОрдер.ПустаяСсылка)
	|				ИЛИ ТаблицаПродажи.ДокументОснование = ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)
	|				ИЛИ ТаблицаПродажи.ДокументОснование = НЕОПРЕДЕЛЕНО
	|				ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаПродажи.ДокументОснование) = ТИП(Документ.ЧекККМ)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаПродажи.ДокументОснование) = ТИП(Документ.ТТНВходящаяЕГАИС)
	|				ИЛИ ТаблицаПродажи.ДокументОснование ССЫЛКА Документ.ПриемИПередачаВРемонт
	|			ТОГДА ТаблицаПродажи.Документ
	|		ИНАЧЕ ТаблицаПродажи.ДокументОснование
	|	КОНЕЦ КАК Документ,
	|	ТаблицаПродажи.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаПродажи.ПодразделениеПродажи КАК Подразделение,
	|	ТаблицаПродажи.ДокументОснование.Ответственный КАК Ответственный,
	|	-СУММА(ТаблицаПродажи.Количество) КАК Количество,
	|	-СУММА(ТаблицаПродажи.СуммаНДСЗакупкиПродажи) КАК СуммаНДС,
	|	-СУММА(ТаблицаПродажи.Сумма) КАК Сумма,
	|	-СУММА(ТаблицаПродажи.Сумма + ТаблицаПродажи.СуммаСкидкиНаценки) КАК СуммаБезСкидки,
	|	-СУММА(ВЫБОР
	|			КОГДА ТаблицаПродажи.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|					И ЕСТЬNULL(ТаблицаПродажи.ДокументОснование.ВидОперации, ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|					И ЕСТЬNULL(ТаблицаПродажи.ДокументОснование.ВидОперации, ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|					И НЕ ТаблицаПродажи.ДокументОснование ССЫЛКА Документ.ЧекККМ
	|				ТОГДА ТаблицаПродажи.Себестоимость
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Себестоимость
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаПродажи
	|ГДЕ
	|	ТаблицаПродажи.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|	И НЕ ТаблицаПродажи.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродажи.Период,
	|	ТаблицаПродажи.Организация,
	|	ТаблицаПродажи.Номенклатура,
	|	ТаблицаПродажи.Характеристика,
	|	ТаблицаПродажи.НоменклатураНабора,
	|	ТаблицаПродажи.ХарактеристикаНабора,
	|	ТаблицаПродажи.Партия,
	|	ТаблицаПродажи.Заказ,
	|	ВЫБОР
	|		КОГДА ТаблицаПродажи.ДокументОснование = ЗНАЧЕНИЕ(Документ.РасходнаяНакладная.ПустаяСсылка)
	|				ИЛИ ТаблицаПродажи.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				ИЛИ ТаблицаПродажи.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|				ИЛИ ТаблицаПродажи.ДокументОснование = ЗНАЧЕНИЕ(Документ.ПриходныйОрдер.ПустаяСсылка)
	|				ИЛИ ТаблицаПродажи.ДокументОснование = ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)
	|				ИЛИ ТаблицаПродажи.ДокументОснование = НЕОПРЕДЕЛЕНО
	|				ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаПродажи.ДокументОснование) = ТИП(Документ.ЧекККМ)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаПродажи.ДокументОснование) = ТИП(Документ.ТТНВходящаяЕГАИС)
	|				ИЛИ ТаблицаПродажи.ДокументОснование ССЫЛКА Документ.ПриемИПередачаВРемонт
	|			ТОГДА ТаблицаПродажи.Документ
	|		ИНАЧЕ ТаблицаПродажи.ДокументОснование
	|	КОНЕЦ,
	|	ТаблицаПродажи.СтавкаНДС,
	|	ТаблицаПродажи.ПодразделениеПродажи,
	|	ТаблицаПродажи.ДокументОснование.Ответственный";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажи", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажи()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыНаСкладах(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыНаСкладах.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасыНаСкладах.Период КАК Период,
	|	ТаблицаЗапасыНаСкладах.Организация КАК Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия КАК Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасыНаСкладах.Ячейка КАК Ячейка,
	|	СУММА(ТаблицаЗапасыНаСкладах.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыНаСкладах
	|ГДЕ
	|	(НЕ ТаблицаЗапасыНаСкладах.ПеремещениеВРозницуСуммовойУчет)
	|	И (НЕ ТаблицаЗапасыНаСкладах.ОрдерныйСклад)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыНаСкладах.Период,
	|	ТаблицаЗапасыНаСкладах.Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница,
	|	ТаблицаЗапасыНаСкладах.Ячейка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыНаСкладах", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗапасыНаСкладах()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыКПоступлениюНаСклады(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыКПоступлениюНаСклады.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасыКПоступлениюНаСклады.Период КАК Период,
	|	ТаблицаЗапасыКПоступлениюНаСклады.Организация КАК Организация,
	|	ТаблицаЗапасыКПоступлениюНаСклады.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыКПоступлениюНаСклады.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыКПоступлениюНаСклады.Партия КАК Партия,
	|	ТаблицаЗапасыКПоступлениюНаСклады.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СУММА(ТаблицаЗапасыКПоступлениюНаСклады.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыКПоступлениюНаСклады
	|ГДЕ
	|	(НЕ ТаблицаЗапасыКПоступлениюНаСклады.ПеремещениеВРозницуСуммовойУчет)
	|	И ТаблицаЗапасыКПоступлениюНаСклады.ОрдерныйСклад
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыКПоступлениюНаСклады.Период,
	|	ТаблицаЗапасыКПоступлениюНаСклады.Организация,
	|	ТаблицаЗапасыКПоступлениюНаСклады.Номенклатура,
	|	ТаблицаЗапасыКПоступлениюНаСклады.Характеристика,
	|	ТаблицаЗапасыКПоступлениюНаСклады.Партия,
	|	ТаблицаЗапасыКПоступлениюНаСклады.СтруктурнаяЕдиница";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыКПоступлениюНаСклады", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗапасыКПоступлениюНаСклады()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыПринятые(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыПринятые.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасыПринятые.Период КАК Период,
	|	ТаблицаЗапасыПринятые.Организация КАК Организация,
	|	ТаблицаЗапасыПринятые.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыПринятые.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыПринятые.Партия КАК Партия,
	|	ТаблицаЗапасыПринятые.Контрагент КАК Контрагент,
	|	ТаблицаЗапасыПринятые.Договор КАК Договор,
	|	ТаблицаЗапасыПринятые.Заказ КАК Заказ,
	|	ТаблицаЗапасыПринятые.СчетУчета КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыПринятые.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеОтКомитента)
	|		КОГДА ТаблицаЗапасыПринятые.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеВПереработку)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтветственноеХранение)
	|	КОНЕЦ КАК ТипПриемаПередачи,
	|	СУММА(ТаблицаЗапасыПринятые.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасыПринятые.СуммаРасчетовПринятыеПереданные) КАК СуммаРасчетов,
	|	СУММА(ТаблицаЗапасыПринятые.СуммаРасчетовПринятыеПереданные) КАК Сумма,
	|	0 КАК СуммаПродажи,
	|	&ВалютаУпрУчета КАК Валюта,
	|	СУММА(ТаблицаЗапасыПринятые.СуммаРасчетовПринятыеПереданные) КАК СуммаВал,
	|	ВЫРАЗИТЬ(&ПриемЗапасов КАК СТРОКА(100)) КАК СодержаниеПроводки
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыПринятые
	|ГДЕ
	|	(ТаблицаЗапасыПринятые.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию)
	|			ИЛИ ТаблицаЗапасыПринятые.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку)
	|			ИЛИ ТаблицаЗапасыПринятые.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаОтветхранение))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыПринятые.Период,
	|	ТаблицаЗапасыПринятые.Организация,
	|	ТаблицаЗапасыПринятые.Номенклатура,
	|	ТаблицаЗапасыПринятые.Характеристика,
	|	ТаблицаЗапасыПринятые.Партия,
	|	ТаблицаЗапасыПринятые.Контрагент,
	|	ТаблицаЗапасыПринятые.Договор,
	|	ТаблицаЗапасыПринятые.Заказ,
	|	ТаблицаЗапасыПринятые.СчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыПринятые.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеОтКомитента)
	|		КОГДА ТаблицаЗапасыПринятые.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеВПереработку)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтветственноеХранение)
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыПринятые.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаЗапасыПринятые.Период,
	|	ТаблицаЗапасыПринятые.Организация,
	|	ТаблицаЗапасыПринятые.Номенклатура,
	|	ТаблицаЗапасыПринятые.Характеристика,
	|	ТаблицаЗапасыПринятые.Партия,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ТаблицаЗапасыПринятые.Заказ,
	|	ТаблицаЗапасыПринятые.СчетУчетаРасчетовСПоставщиком,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтчетКомитенту),
	|	-СУММА(ТаблицаЗапасыПринятые.Количество),
	|	0,
	|	-СУММА(ТаблицаЗапасыПринятые.Сумма),
	|	-СУММА(ТаблицаЗапасыПринятые.Сумма),
	|	&ВалютаУпрУчета,
	|	СУММА(ТаблицаЗапасыПринятые.Сумма),
	|	ВЫРАЗИТЬ(&ПриемЗапасовВозврат КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыПринятые
	|ГДЕ
	|	ТаблицаЗапасыПринятые.ТоварыНаКомиссии
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыПринятые.Период,
	|	ТаблицаЗапасыПринятые.Организация,
	|	ТаблицаЗапасыПринятые.Номенклатура,
	|	ТаблицаЗапасыПринятые.Характеристика,
	|	ТаблицаЗапасыПринятые.Партия,
	|	ТаблицаЗапасыПринятые.Заказ,
	|	ТаблицаЗапасыПринятые.СчетУчетаРасчетовСПоставщиком";
		
	Запрос.УстановитьПараметр("ПриемЗапасов", "");
	Запрос.УстановитьПараметр("ПриемЗапасовВозврат", НСтр("ru = 'Прием запасов'"));
	Запрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУчета.Получить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыПринятые", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗапасыПринятые()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыПереданные(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыПереданные.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасыПереданные.Период КАК Период,
	|	ТаблицаЗапасыПереданные.Организация КАК Организация,
	|	ТаблицаЗапасыПереданные.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыПереданные.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыПереданные.Партия КАК Партия,
	|	ТаблицаЗапасыПереданные.Контрагент КАК Контрагент,
	|	ТаблицаЗапасыПереданные.Договор КАК Договор,
	|	ТаблицаЗапасыПереданные.Заказ КАК Заказ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыПереданные.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПередачаКомиссионеру)
	|		КОГДА ТаблицаЗапасыПереданные.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПередачаВПереработку)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтветственноеХранение)
	|	КОНЕЦ КАК ТипПриемаПередачи,
	|	-СУММА(ТаблицаЗапасыПереданные.Количество) КАК Количество,
	|	-СУММА(ТаблицаЗапасыПереданные.СуммаРасчетовПринятыеПереданные) КАК СуммаРасчетов
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыПереданные
	|ГДЕ
	|	(ТаблицаЗапасыПереданные.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера)
	|			ИЛИ ТаблицаЗапасыПереданные.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика)
	|			ИЛИ ТаблицаЗапасыПереданные.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратСОтветхранения))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыПереданные.Период,
	|	ТаблицаЗапасыПереданные.Организация,
	|	ТаблицаЗапасыПереданные.Номенклатура,
	|	ТаблицаЗапасыПереданные.Характеристика,
	|	ТаблицаЗапасыПереданные.Партия,
	|	ТаблицаЗапасыПереданные.Контрагент,
	|	ТаблицаЗапасыПереданные.Договор,
	|	ТаблицаЗапасыПереданные.Заказ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыПереданные.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПередачаКомиссионеру)
	|		КОГДА ТаблицаЗапасыПереданные.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПередачаВПереработку)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтветственноеХранение)
	|	КОНЕЦ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыПереданные", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗапасыПереданные()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗаказыПокупателей(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗаказыПокупателей.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗаказыПокупателей.Период КАК Период,
	|	ТаблицаЗаказыПокупателей.Организация КАК Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика КАК Характеристика,
	|	ТаблицаЗаказыПокупателей.Заказ КАК ЗаказПокупателя,
	|	-СУММА(ТаблицаЗаказыПокупателей.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗаказыПокупателей
	|ГДЕ
	|	ТаблицаЗаказыПокупателей.Заказ <> НЕОПРЕДЕЛЕНО
	|	И (НЕ ТаблицаЗаказыПокупателей.ЗаказНаряд)
	|	И (ТаблицаЗаказыПокупателей.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|			ИЛИ ТаблицаЗаказыПокупателей.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера)
	|			ИЛИ ТаблицаЗаказыПокупателей.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратСОтветхранения))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказыПокупателей.Период,
	|	ТаблицаЗаказыПокупателей.Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика,
	|	ТаблицаЗаказыПокупателей.Заказ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказыПокупателей", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗаказыПокупателей()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗаказыПоставщикам(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗаказыПоставщикам.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗаказыПоставщикам.Период КАК Период,
	|	ТаблицаЗаказыПоставщикам.Организация КАК Организация,
	|	ТаблицаЗаказыПоставщикам.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказыПоставщикам.Характеристика КАК Характеристика,
	|	ТаблицаЗаказыПоставщикам.Заказ КАК ЗаказПоставщику,
	|	СУММА(ТаблицаЗаказыПоставщикам.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗаказыПоставщикам
	|ГДЕ
	|	ТаблицаЗаказыПоставщикам.Заказ <> НЕОПРЕДЕЛЕНО
	|	И (ТаблицаЗаказыПоставщикам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|			ИЛИ ТаблицаЗаказыПоставщикам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию)
	|			ИЛИ ТаблицаЗаказыПоставщикам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаОтветхранение))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказыПоставщикам.Период,
	|	ТаблицаЗаказыПоставщикам.Организация,
	|	ТаблицаЗаказыПоставщикам.Номенклатура,
	|	ТаблицаЗаказыПоставщикам.Характеристика,
	|	ТаблицаЗаказыПоставщикам.Заказ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗаказыПоставщикам.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаЗаказыПоставщикам.Период,
	|	ТаблицаЗаказыПоставщикам.Организация,
	|	ТаблицаЗаказыПоставщикам.Номенклатура,
	|	ТаблицаЗаказыПоставщикам.Характеристика,
	|	ТаблицаЗаказыПоставщикам.ЗаказПоставщику,
	|	СУММА(ТаблицаЗаказыПоставщикам.Количество)
	|ИЗ
	|	ВременнаяТаблицаРасходы КАК ТаблицаЗаказыПоставщикам
	|ГДЕ
	|	ТаблицаЗаказыПоставщикам.ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|	И ТаблицаЗаказыПоставщикам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказыПоставщикам.Период,
	|	ТаблицаЗаказыПоставщикам.Организация,
	|	ТаблицаЗаказыПоставщикам.Номенклатура,
	|	ТаблицаЗаказыПоставщикам.Характеристика,
	|	ТаблицаЗаказыПоставщикам.ЗаказПоставщику";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказыПоставщикам", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗаказыПоставщикам()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРазмещениеЗаказов(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Размещение запасов и расходов.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРазмещение.Период КАК Период,
	|	ТаблицаРазмещение.Организация КАК Организация,
	|	ТаблицаРазмещение.Номенклатура КАК Номенклатура,
	|	ТаблицаРазмещение.Характеристика КАК Характеристика,
	|	ТаблицаРазмещение.Заказ КАК Заказ,
	|	СУММА(ТаблицаРазмещение.Количество) КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаРазмещение
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаРазмещениеЗапасы.Период КАК Период,
	|		ТаблицаРазмещениеЗапасы.Организация КАК Организация,
	|		ТаблицаРазмещениеЗапасы.Номенклатура КАК Номенклатура,
	|		ТаблицаРазмещениеЗапасы.Характеристика КАК Характеристика,
	|		ТаблицаРазмещениеЗапасы.Заказ КАК Заказ,
	|		ТаблицаРазмещениеЗапасы.Количество КАК Количество
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаРазмещениеЗапасы
	|	ГДЕ
	|		НЕ ТаблицаРазмещениеЗапасы.Заказ В (ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
	|		И (ТаблицаРазмещениеЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|				ИЛИ ТаблицаРазмещениеЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию)
	|				ИЛИ ТаблицаРазмещениеЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаРазмещениеРасходы.Период,
	|		ТаблицаРазмещениеРасходы.Организация,
	|		ТаблицаРазмещениеРасходы.Номенклатура,
	|		ТаблицаРазмещениеРасходы.Характеристика,
	|		ТаблицаРазмещениеРасходы.ЗаказПоставщику,
	|		ТаблицаРазмещениеРасходы.Количество
	|	ИЗ
	|		ВременнаяТаблицаРасходы КАК ТаблицаРазмещениеРасходы
	|	ГДЕ
	|		НЕ ТаблицаРазмещениеРасходы.ЗаказПоставщику В (ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
	|		И ТаблицаРазмещениеРасходы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)) КАК ТаблицаРазмещение
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРазмещение.Период,
	|	ТаблицаРазмещение.Организация,
	|	ТаблицаРазмещение.Номенклатура,
	|	ТаблицаРазмещение.Характеристика,
	|	ТаблицаРазмещение.Заказ";
	
	Запрос.Выполнить();
	
	// Установка исключительной блокировки контролируемых размещений заказов.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаРазмещениеЗаказов.Организация КАК Организация,
	|	ТаблицаРазмещениеЗаказов.Номенклатура КАК Номенклатура,
	|	ТаблицаРазмещениеЗаказов.Характеристика КАК Характеристика,
	|	ТаблицаРазмещениеЗаказов.Заказ КАК ИсточникОбеспечения
	|ИЗ
	|	ВременнаяТаблицаРазмещение КАК ТаблицаРазмещениеЗаказов";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РазмещениеЗаказов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаРазмещениеЗаказов.Период КАК Период,
	|	ТаблицаРазмещениеЗаказов.Организация КАК Организация,
	|	РазмещениеЗаказовОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаРазмещениеЗаказов.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаРазмещениеЗаказов.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоУслуга,
	|	ТаблицаРазмещениеЗаказов.Характеристика КАК Характеристика,
	|	ТаблицаРазмещениеЗаказов.Заказ КАК ИсточникОбеспечения,
	|	ВЫБОР
	|		КОГДА ТаблицаРазмещениеЗаказов.Количество > ЕСТЬNULL(РазмещениеЗаказовОстатки.Количество, 0)
	|			ТОГДА ЕСТЬNULL(РазмещениеЗаказовОстатки.Количество, 0)
	|		КОГДА ТаблицаРазмещениеЗаказов.Количество <= ЕСТЬNULL(РазмещениеЗаказовОстатки.Количество, 0)
	|			ТОГДА ТаблицаРазмещениеЗаказов.Количество
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	ВременнаяТаблицаРазмещение КАК ТаблицаРазмещениеЗаказов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РазмещениеЗаказовОстатки.Организация КАК Организация,
	|			РазмещениеЗаказовОстатки.Номенклатура КАК Номенклатура,
	|			РазмещениеЗаказовОстатки.Характеристика КАК Характеристика,
	|			РазмещениеЗаказовОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|			РазмещениеЗаказовОстатки.ИсточникОбеспечения КАК ИсточникОбеспечения,
	|			СУММА(РазмещениеЗаказовОстатки.КоличествоОстаток) КАК Количество
	|		ИЗ
	|			(ВЫБРАТЬ
	|				РазмещениеЗаказовОстатки.Организация КАК Организация,
	|				РазмещениеЗаказовОстатки.Номенклатура КАК Номенклатура,
	|				РазмещениеЗаказовОстатки.Характеристика КАК Характеристика,
	|				РазмещениеЗаказовОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|				РазмещениеЗаказовОстатки.ИсточникОбеспечения КАК ИсточникОбеспечения,
	|				РазмещениеЗаказовОстатки.КоличествоОстаток КАК КоличествоОстаток
	|			ИЗ
	|				РегистрНакопления.РазмещениеЗаказов.Остатки(
	|						&МоментКонтроля,
	|						(Организация, Номенклатура, Характеристика, ИсточникОбеспечения) В
	|							(ВЫБРАТЬ
	|								ТаблицаРазмещениеЗаказов.Организация КАК Организация,
	|								ТаблицаРазмещениеЗаказов.Номенклатура КАК Номенклатура,
	|								ТаблицаРазмещениеЗаказов.Характеристика КАК Характеристика,
	|								ТаблицаРазмещениеЗаказов.Заказ КАК ИсточникОбеспечения
	|							ИЗ
	|								ВременнаяТаблицаРазмещение КАК ТаблицаРазмещениеЗаказов)) КАК РазмещениеЗаказовОстатки
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ДвиженияДокументаРазмещениеЗаказов.Организация,
	|				ДвиженияДокументаРазмещениеЗаказов.Номенклатура,
	|				ДвиженияДокументаРазмещениеЗаказов.Характеристика,
	|				ДвиженияДокументаРазмещениеЗаказов.ЗаказПокупателя,
	|				ДвиженияДокументаРазмещениеЗаказов.ИсточникОбеспечения,
	|				ВЫБОР
	|					КОГДА ДвиженияДокументаРазмещениеЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|						ТОГДА ЕСТЬNULL(ДвиженияДокументаРазмещениеЗаказов.Количество, 0)
	|					ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаРазмещениеЗаказов.Количество, 0)
	|				КОНЕЦ
	|			ИЗ
	|				РегистрНакопления.РазмещениеЗаказов КАК ДвиженияДокументаРазмещениеЗаказов
	|			ГДЕ
	|				ДвиженияДокументаРазмещениеЗаказов.Регистратор = &Ссылка
	|				И ДвиженияДокументаРазмещениеЗаказов.Период <= &ПериодКонтроля) КАК РазмещениеЗаказовОстатки
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РазмещениеЗаказовОстатки.Организация,
	|			РазмещениеЗаказовОстатки.Номенклатура,
	|			РазмещениеЗаказовОстатки.Характеристика,
	|			РазмещениеЗаказовОстатки.ЗаказПокупателя,
	|			РазмещениеЗаказовОстатки.ИсточникОбеспечения) КАК РазмещениеЗаказовОстатки
	|		ПО ТаблицаРазмещениеЗаказов.Организация = РазмещениеЗаказовОстатки.Организация
	|			И ТаблицаРазмещениеЗаказов.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|			И ТаблицаРазмещениеЗаказов.Характеристика = РазмещениеЗаказовОстатки.Характеристика
	|			И ТаблицаРазмещениеЗаказов.Заказ = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|ГДЕ
	|	РазмещениеЗаказовОстатки.ЗаказПокупателя ЕСТЬ НЕ NULL 
	|	И ВЫБОР
	|			КОГДА ТаблицаРазмещениеЗаказов.Количество > ЕСТЬNULL(РазмещениеЗаказовОстатки.Количество, 0)
	|				ТОГДА ЕСТЬNULL(РазмещениеЗаказовОстатки.Количество, 0)
	|			КОГДА ТаблицаРазмещениеЗаказов.Количество <= ЕСТЬNULL(РазмещениеЗаказовОстатки.Количество, 0)
	|				ТОГДА ТаблицаРазмещениеЗаказов.Количество
	|		КОНЕЦ <> 0";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаПриходнаяНакладная);
	Запрос.УстановитьПараметр("МоментКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.ПериодКонтроля);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРазмещениеЗаказов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаРазмещениеЗаказов()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПотребностьВЗапасах(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Поступление) КАК ТипДвижения,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ТаблицаЗапасы.Заказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Заказ,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
		
	РезультатЗапроса = Запрос.Выполнить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПотребностьВЗапасах", РезультатЗапроса.Выгрузить());
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПотребностьВЗапасах.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Поступление) КАК ТипДвижения,
	|	ВЫБОР
	|		КОГДА ТаблицаПотребностьВЗапасах.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ТаблицаПотребностьВЗапасах.Заказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ТаблицаПотребностьВЗапасах.Номенклатура КАК Номенклатура,
	|	ТаблицаПотребностьВЗапасах.Характеристика КАК Характеристика
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаПотребностьВЗапасах
	|ГДЕ
	|	ТаблицаПотребностьВЗапасах.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПотребностьВЗапасах");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;

	Для каждого КолонкаРезультатЗапроса из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();

	// Получение остатков.
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ПотребностьВЗапасахОстатки.Организация КАК Организация,
	|	ПотребностьВЗапасахОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ПотребностьВЗапасахОстатки.Номенклатура КАК Номенклатура,
	|	ПотребностьВЗапасахОстатки.Характеристика КАК Характеристика,
	|	СУММА(ПотребностьВЗапасахОстатки.Количество) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПотребностьВЗапасахОстатки.Организация КАК Организация,
	|		ПотребностьВЗапасахОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ПотребностьВЗапасахОстатки.Номенклатура КАК Номенклатура,
	|		ПотребностьВЗапасахОстатки.Характеристика КАК Характеристика,
	|		СУММА(ПотребностьВЗапасахОстатки.КоличествоОстаток) КАК Количество
	|	ИЗ
	|		РегистрНакопления.ПотребностьВЗапасах.Остатки(
	|				&МоментКонтроля,
	|				(Организация, ТипДвижения, ЗаказПокупателя, Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						ВременнаяТаблицаЗапасы.Организация КАК Организация,
	|						ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Поступление) КАК ТипДвижения,
	|						ВЫБОР
	|							КОГДА ВременнаяТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|								ТОГДА ВременнаяТаблицаЗапасы.Заказ
	|							ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|						КОНЕЦ КАК ЗаказПокупателя,
	|						ВременнаяТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|						ВременнаяТаблицаЗапасы.Характеристика КАК Характеристика
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|					ГДЕ
	|						ВременнаяТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку))) КАК ПотребностьВЗапасахОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПотребностьВЗапасахОстатки.Организация,
	|		ПотребностьВЗапасахОстатки.ЗаказПокупателя,
	|		ПотребностьВЗапасахОстатки.Номенклатура,
	|		ПотребностьВЗапасахОстатки.Характеристика
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаПотребностьВЗапасах.Организация,
	|		ДвиженияДокументаПотребностьВЗапасах.ЗаказПокупателя,
	|		ДвиженияДокументаПотребностьВЗапасах.Номенклатура,
	|		ДвиженияДокументаПотребностьВЗапасах.Характеристика,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаПотребностьВЗапасах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаПотребностьВЗапасах.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаПотребностьВЗапасах.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ПотребностьВЗапасах КАК ДвиженияДокументаПотребностьВЗапасах
	|	ГДЕ
	|		ДвиженияДокументаПотребностьВЗапасах.Регистратор = &Ссылка) КАК ПотребностьВЗапасахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ПотребностьВЗапасахОстатки.Организация,
	|	ПотребностьВЗапасахОстатки.ЗаказПокупателя,
	|	ПотребностьВЗапасахОстатки.Номенклатура,
	|	ПотребностьВЗапасахОстатки.Характеристика";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаПриходнаяНакладная);
	Запрос.УстановитьПараметр("МоментКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);

	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПотребностьВЗапасахОстатки = РезультатЗапроса.Выгрузить();
	ТаблицаПотребностьВЗапасахОстатки.Индексы.Добавить("Организация,ЗаказПокупателя,Номенклатура,Характеристика");

	ВременнаяТаблицаПотребностьВЗапасах = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПотребностьВЗапасах.СкопироватьКолонки();
	
	Для каждого СтрокаТаблицыПотребностьВЗапасах Из СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПотребностьВЗапасах Цикл
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", 		СтрокаТаблицыПотребностьВЗапасах.Организация);
		СтруктураДляПоиска.Вставить("ЗаказПокупателя", 	СтрокаТаблицыПотребностьВЗапасах.ЗаказПокупателя);
		СтруктураДляПоиска.Вставить("Номенклатура", 	СтрокаТаблицыПотребностьВЗапасах.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", 	СтрокаТаблицыПотребностьВЗапасах.Характеристика);
		
		МассивСтрокОстатков = ТаблицаПотребностьВЗапасахОстатки.НайтиСтроки(СтруктураДляПоиска);
		Если МассивСтрокОстатков.Количество() > 0 Тогда
			
			Если СтрокаТаблицыПотребностьВЗапасах.Количество > МассивСтрокОстатков[0].КоличествоОстаток Тогда
				СтрокаТаблицыПотребностьВЗапасах.Количество = МассивСтрокОстатков[0].КоличествоОстаток;
			КонецЕсли;	
			
			СтрокаТаблицыРасход = ВременнаяТаблицаПотребностьВЗапасах.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицыПотребностьВЗапасах);
			
         КонецЕсли;
		
	КонецЦикла;	
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПотребностьВЗапасах = ВременнаяТаблицаПотребностьВЗапасах;
			
КонецПроцедуры // СформироватьТаблицаПотребностьВЗапасах()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРасчетыСПоставщиками(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаПриходнаяНакладная);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ВозникновениеОбязательствПередПоставщиком", НСтр("ru='Возникновение обязательств перед поставщиком'"));
	Запрос.УстановитьПараметр("ЗачетАванса", НСтр("ru='Зачет предоплаты'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	
	Если ДокументСсылкаПриходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика Тогда
		
		РасчетыПроведениеДокументов.СформироватьДвиженияПоВзаиморасчетам(СтруктураДополнительныеСвойства, ДокументСсылкаПриходнаяНакладная);
		РасчетыПроведениеДокументов.ПересчитатьТаблицыПоКурсамВалют(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
		РасчетыПроведениеДокументов.ПоместитьПересчитанныеТаблицыВМенеджерВременныхТаблиц(СтруктураДополнительныеСвойства);
		ПолучатьРеквизитыРасчетов = Истина;
		
	Иначе
		
		РасчетыПроведениеДокументов.СформироватьПустуюВременнуюТаблицуРасчетов(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства, Запрос.Параметры);
		ПолучатьРеквизитыРасчетов = Ложь;
		
	КонецЕсли;
	
	// Установка исключительной блокировки контролируемых остатков расчетов с контрагентами.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаРасчетыСПоставщиками.Организация КАК Организация,
	|	ВременнаяТаблицаРасчетыСПоставщиками.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаРасчетыСПоставщиками.Договор КАК Договор,
	|	ВременнаяТаблицаРасчетыСПоставщиками.Документ КАК Документ,
	|	ВременнаяТаблицаРасчетыСПоставщиками.Заказ КАК Заказ,
	|	ВременнаяТаблицаРасчетыСПоставщиками.ТипРасчетов КАК ТипРасчетов
	|ИЗ
	|	ВременнаяТаблицаРасчетыСПоставщиками КАК ВременнаяТаблицаРасчетыСПоставщиками";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСПоставщиками");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	НомерЗапроса = 0;
	Запрос.Текст = УправлениеНебольшойФирмойСервер.ПолучитьТекстЗапросаКурсовыеРазницыРасчетыСПоставщиками(Запрос.МенеджерВременныхТаблиц, Истина, НомерЗапроса, ПолучатьРеквизитыРасчетов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПоставщиками", МассивРезультатов[НомерЗапроса].Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРасчетыСПокупателями(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаПриходнаяНакладная);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("СторнированиеДолга", НСтр("ru='Сторнирование долга'"));
	Запрос.УстановитьПараметр("ВосстановлениеПредоплаты", НСтр("ru='Восстановление предоплаты'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	Запрос.УстановитьПараметр("СторнированиеПредоплаты", НСтр("ru='Сторнирование предоплаты'"));
	
	Для Каждого КлючИЗначение Из СтруктураДополнительныеСвойства.ДляСертификатов Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Если ДокументСсылкаПриходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя Тогда
		СформироватьТаблицуВзаиморасчетовПоОПерацииВозврата(Запрос);
	Иначе
		СтруктураДополнительныеСвойства.ПараметрыДокумента.ЭтоРасчетыСПоставщиком = НЕ СтруктураДополнительныеСвойства.ПараметрыДокумента.ЭтоРасчетыСПоставщиком;
		РасчетыПроведениеДокументов.СформироватьПустуюВременнуюТаблицуРасчетов(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства, Запрос.Параметры);
		СтруктураДополнительныеСвойства.ПараметрыДокумента.ЭтоРасчетыСПоставщиком = НЕ СтруктураДополнительныеСвойства.ПараметрыДокумента.ЭтоРасчетыСПоставщиком;
	КонецЕсли;
	
	// Установка исключительной блокировки контролируемых остатков расчетов с контрагентами.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаРасчетыСПокупателями.Организация КАК Организация,
	|	ВременнаяТаблицаРасчетыСПокупателями.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаРасчетыСПокупателями.Договор КАК Договор,
	|	ВременнаяТаблицаРасчетыСПокупателями.Документ КАК Документ,
	|	ВременнаяТаблицаРасчетыСПокупателями.Заказ КАК Заказ,
	|	ВременнаяТаблицаРасчетыСПокупателями.ТипРасчетов КАК ТипРасчетов
	|ИЗ
	|	ВременнаяТаблицаРасчетыСПокупателями";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСПокупателями");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	НомерЗапроса = 0;
	Запрос.Текст = УправлениеНебольшойФирмойСервер.ПолучитьТекстЗапросаКурсовыеРазницыРасчетыСПокупателями(Запрос.МенеджерВременныхТаблиц, Ложь, НомерЗапроса);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПокупателями", МассивРезультатов[НомерЗапроса].Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходыОтложенные(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаПриходнаяНакладная);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ТаблицаДокумента.НаправлениеДеятельностиПродажи КАК НаправлениеДеятельности,
	|	ТаблицаДокумента.Сумма КАК СуммаРасходов
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ТаблицаДокумента.НаправлениеДеятельности,
	|	ТаблицаДокумента.Сумма
	|ИЗ
	|	ВременнаяТаблицаРасходы КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Организация КАК Организация,
	|	СУММА(ТаблицаДокумента.Сумма) КАК СуммаКСписанию
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Статья КАК Статья
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаЗапасыДоходыИРасходыОтложенные = МассивРезультатов[0].Выгрузить();
	ВыборкаРезультатаЗапроса = МассивРезультатов[1].Выбрать();
	
	ТаблицаПредоплатаДоходыИРасходыОтложенные = ТаблицаЗапасыДоходыИРасходыОтложенные.Скопировать();
	ТаблицаПредоплатаДоходыИРасходыОтложенные.Очистить();
	
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		СуммаКСписанию = ВыборкаРезультатаЗапроса.СуммаКСписанию;
		Для каждого СтрокаЗапасыДоходыИРасходыОтложенные Из ТаблицаЗапасыДоходыИРасходыОтложенные Цикл
			Если СуммаКСписанию = 0 Тогда
				Продолжить
			ИначеЕсли СтрокаЗапасыДоходыИРасходыОтложенные.СуммаРасходов <= СуммаКСписанию Тогда
				СтрокаПредоплатаДоходыИРасходыОтложенные = ТаблицаПредоплатаДоходыИРасходыОтложенные.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПредоплатаДоходыИРасходыОтложенные, СтрокаЗапасыДоходыИРасходыОтложенные);
				СуммаКСписанию = СуммаКСписанию - СтрокаЗапасыДоходыИРасходыОтложенные.СуммаРасходов;
			ИначеЕсли СтрокаЗапасыДоходыИРасходыОтложенные.СуммаРасходов > СуммаКСписанию Тогда
				СтрокаПредоплатаДоходыИРасходыОтложенные = ТаблицаПредоплатаДоходыИРасходыОтложенные.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПредоплатаДоходыИРасходыОтложенные, СтрокаЗапасыДоходыИРасходыОтложенные);
				СтрокаПредоплатаДоходыИРасходыОтложенные.СуммаРасходов = СуммаКСписанию;
				СуммаКСписанию = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого СтрокаПредоплатаДоходыИРасходыОтложенные Из ТаблицаПредоплатаДоходыИРасходыОтложенные Цикл
		СтрокаЗапасыДоходыИРасходыОтложенные = ТаблицаЗапасыДоходыИРасходыОтложенные.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗапасыДоходыИРасходыОтложенные, СтрокаПредоплатаДоходыИРасходыОтложенные);
		СтрокаЗапасыДоходыИРасходыОтложенные.ВидДвижения = ВидДвиженияНакопления.Расход;
	КонецЦикла;
	
	ВыборкаРезультатаЗапроса = МассивРезультатов[2].Выбрать();
	
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		Статья = ВыборкаРезультатаЗапроса.Статья;
	Иначе
		Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Период КАК Период,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Документ КАК Документ,
	|	&Статья КАК Статья,
	|	Таблица.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Таблица.СуммаРасходов КАК СуммаРасходов
	|ПОМЕСТИТЬ ВременнаяТаблицаПредоплатаДоходыИРасходыОтложенные
	|ИЗ
	|	&Таблица КАК Таблица";
	Запрос.УстановитьПараметр("Таблица", ТаблицаПредоплатаДоходыИРасходыОтложенные);
	Запрос.УстановитьПараметр("Статья", Статья);
	
	Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыОтложенные", ТаблицаЗапасыДоходыИРасходыОтложенные);
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыОтложенные()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходыНераспределенные(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ТаблицаДокумента.Статья КАК Статья,
	|	ТаблицаДокумента.Сумма КАК СуммаРасходов
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыНераспределенные", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыНераспределенные()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходыКассовыйМетод(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаПриходнаяНакладная);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ДокументДата КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|		ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО 
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	ТаблицаДокумента.Статья КАК Статья,
	|	-ТаблицаДокумента.Сумма КАК СуммаРасходов
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Период,
	|	Таблица.Организация,
	|	Таблица.НаправлениеДеятельности,
	|	Таблица.Статья,
	|	Таблица.СуммаРасходов
	|ИЗ
	|	ВременнаяТаблицаПредоплатаДоходыИРасходыОтложенные КАК Таблица";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыКассовыйМетод", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыКассовыйМетод() 

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСуммовойУчетВРознице(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаПриходнаяНакладная);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ПоступлениеВРозницу", НСтр("ru = 'Поступление в розницу'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Период КАК Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.РозничныйВидЦен КАК РозничныйВидЦен,
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика КАК Характеристика,
	|	ТаблицаДокумента.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаДокумента.ВалютаЦены КАК Валюта,
	|	ТаблицаДокумента.СчетУчетаВРознице КАК СчетУчета,
	|	ТаблицаДокумента.СчетУчетаНаценки КАК СчетУчетаНаценки,
	|	СУММА(ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена * ТаблицаДокумента.Количество * КурсыЦенВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыЦенВалюты.Кратность) / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1) КАК ЧИСЛО(15, 2))) КАК Сумма,
	|	СУММА(ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена * ТаблицаДокумента.Количество / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1) КАК ЧИСЛО(15, 2))) КАК СуммаВал,
	|	СУММА(ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена * ТаблицаДокумента.Количество * КурсыЦенВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыЦенВалюты.Кратность) / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1) КАК ЧИСЛО(15, 2))) КАК СуммаДляОстатка,
	|	СУММА(ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена * ТаблицаДокумента.Количество / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1) КАК ЧИСЛО(15, 2))) КАК СуммаВалДляОстатка,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаДокумента.ВключатьРасходыВСебестоимость
	|				ТОГДА ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаРасходов
	|			ИНАЧЕ ТаблицаДокумента.Сумма
	|		КОНЕЦ) КАК Себестоимость,
	|	&ПоступлениеВРозницу КАК СодержаниеПроводки
	|ПОМЕСТИТЬ ВременнаяТаблицаСуммовойУчетВРознице
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&МоментВремени,
	|				(ВидЦен, Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						ВременнаяТаблицаЗапасы.РозничныйВидЦен,
	|						ВременнаяТаблицаЗапасы.Номенклатура,
	|						ВременнаяТаблицаЗапасы.Характеристика
	|					ИЗ
	|						ВременнаяТаблицаЗапасы)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ТаблицаДокумента.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И ТаблицаДокумента.РозничныйВидЦен = ЦеныНоменклатурыСрезПоследних.ВидЦен
	|			И ТаблицаДокумента.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						КонстантаВалютаУчета.Значение
	|					ИЗ
	|						Константа.ВалютаУчета КАК КонстантаВалютаУчета)) КАК КурсыУпрВалюты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыЦенВалюты
	|		ПО ТаблицаДокумента.ВалютаЦены = КурсыЦенВалюты.Валюта
	|ГДЕ
	|	ТаблицаДокумента.ПеремещениеВРозницуСуммовойУчет
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.РозничныйВидЦен,
	|	ТаблицаДокумента.Номенклатура,
	|	ТаблицаДокумента.Характеристика,
	|	ТаблицаДокумента.СтруктурнаяЕдиница,
	|	ТаблицаДокумента.ВалютаЦены,
	|	ТаблицаДокумента.СчетУчетаВРознице,
	|	ТаблицаДокумента.СчетУчетаНаценки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СтруктурнаяЕдиница,
	|	Валюта,
	|	СчетУчета";
	
	Запрос.Выполнить();
	
	// Установка исключительной блокировки контролируемых остатков денежных средств.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаСуммовойУчетВРознице.Организация КАК Организация,
	|	ВременнаяТаблицаСуммовойУчетВРознице.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВременнаяТаблицаСуммовойУчетВРознице.Валюта КАК Валюта
	|ИЗ
	|	ВременнаяТаблицаСуммовойУчетВРознице КАК ВременнаяТаблицаСуммовойУчетВРознице";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.СуммовойУчетВРознице");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	НомерЗапроса = 0;
	Запрос.Текст = УправлениеНебольшойФирмойСервер.ПолучитьТекстЗапросаКурсовыеРазницыСуммовойУчетВРознице(Запрос.МенеджерВременныхТаблиц, НомерЗапроса);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСуммовойУчетВРознице", МассивРезультатов[НомерЗапроса].Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходы()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаУправленческий(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаУправленческий.НомерСтроки КАК НомерСтроки,
	|	ТаблицаУправленческий.Период КАК Период,
	|	ТаблицаУправленческий.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ТаблицаУправленческий.СчетУчета КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаВалютный
	|			ТОГДА ТаблицаУправленческий.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаВалютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалДт,
	|	ТаблицаУправленческий.СчетУчетаРасчетовСПоставщиком КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПоставщикомВалютный
	|			ТОГДА ТаблицаУправленческий.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПоставщикомВалютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалКт,
	|	ТаблицаУправленческий.Сумма КАК Сумма,
	|	&ОприходованиеЗапасов КАК Содержание
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаУправленческий
	|ГДЕ
	|	ТаблицаУправленческий.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|	И НЕ ТаблицаУправленческий.ВключатьРасходыВСебестоимость
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Период,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаУправленческий.СчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаВалютный
	|			ТОГДА ТаблицаУправленческий.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаВалютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал + ТаблицаУправленческий.СуммаРасходовВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.СчетУчетаРасчетовСПоставщиком,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПоставщикомВалютный
	|			ТОГДА ТаблицаУправленческий.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПоставщикомВалютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал + ТаблицаУправленческий.СуммаРасходовВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.Сумма + ТаблицаУправленческий.СуммаРасходов,
	|	&ОприходованиеЗапасов
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаУправленческий
	|ГДЕ
	|	ТаблицаУправленческий.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|	И ТаблицаУправленческий.ВключатьРасходыВСебестоимость
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Период,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаУправленческий.СчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.СчетУчетаРасчетовСПоставщиком,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПоставщиком.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПоставщиком.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.Сумма,
	|	&ПрочиеРасходы
	|ИЗ
	|	ВременнаяТаблицаРасходы КАК ТаблицаУправленческий
	|ГДЕ
	|	ТаблицаУправленческий.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|	И НЕ ТаблицаУправленческий.ВключатьРасходыВСебестоимость
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Период,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем.Валютный
	|			ТОГДА -ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.СчетУчетаПродажи,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	-ТаблицаУправленческий.Сумма,
	|	&СторнированиеВыручки
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаУправленческий
	|ГДЕ
	|	ТаблицаУправленческий.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|	И НЕ ТаблицаУправленческий.ТоварыНаКомиссии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	6,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Период,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ТаблицаУправленческий.СчетУчетаЗатрат
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчетаСебестоимость
	|	КОНЕЦ,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	ТаблицаУправленческий.СчетУчета,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	-ТаблицаУправленческий.Себестоимость,
	|	&СторнированиеЗапасов
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаУправленческий
	|ГДЕ
	|	ТаблицаУправленческий.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|	И ЕСТЬNULL(ТаблицаУправленческий.ДокументОснование.ВидОперации, ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|	И ЕСТЬNULL(ТаблицаУправленческий.ДокументОснование.ВидОперации, ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|	И НЕ ТаблицаУправленческий.ДокументОснование ССЫЛКА Документ.ЧекККМ
	|	И НЕ ТаблицаУправленческий.ТоварыНаКомиссии
	|	И ТаблицаУправленческий.Себестоимость > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	7,
	|	1,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаДокумента.СчетУчетаРасчетовСПоставщиком,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаРасчетовСПоставщикомВалютный
	|			ТОГДА ТаблицаДокумента.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаРасчетовСПоставщикомВалютный
	|			ТОГДА ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаДокумента.СчетУчетаАвансовПоставщику,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаАвансовПоставщикуВалютный
	|			ТОГДА ТаблицаДокумента.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаАвансовПоставщикуВалютный
	|			ТОГДА ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаДокумента.Сумма,
	|	&ЗачетПредоплаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДокумента.Период КАК Период,
	|		ТаблицаДокумента.Организация КАК Организация,
	|		ТаблицаДокумента.СчетУчетаАвансовПоставщику КАК СчетУчетаАвансовПоставщику,
	|		ТаблицаДокумента.СчетУчетаАвансовПоставщикуВалютный КАК СчетУчетаАвансовПоставщикуВалютный,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПоставщиком КАК СчетУчетаРасчетовСПоставщиком,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПоставщикомВалютный КАК СчетУчетаРасчетовСПоставщикомВалютный,
	|		ТаблицаДокумента.ВалютаРасчетов КАК ВалютаРасчетов,
	|		СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВал,
	|		СУММА(ТаблицаДокумента.Сумма) КАК Сумма
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаДокумента.Период КАК Период,
	|			ТаблицаДокумента.Организация КАК Организация,
	|			ТаблицаДокумента.Контрагент.СчетУчетаАвансовПоставщику КАК СчетУчетаАвансовПоставщику,
	|			ТаблицаДокумента.Контрагент.СчетУчетаАвансовПоставщику.Валютный КАК СчетУчетаАвансовПоставщикуВалютный,
	|			ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПоставщиком КАК СчетУчетаРасчетовСПоставщиком,
	|			ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПоставщиком.Валютный КАК СчетУчетаРасчетовСПоставщикомВалютный,
	|			ТаблицаДокумента.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|			ТаблицаДокумента.СуммаВал КАК СуммаВал,
	|			ТаблицаДокумента.Сумма КАК Сумма
	|		ИЗ
	|			ВременнаяТаблицаРасчетыСПоставщиками КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|			И ТаблицаДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И (ТаблицаДокумента.СуммаВал <> 0 ИЛИ ТаблицаДокумента.Сумма <> 0)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаДокумента.Дата,
	|			ТаблицаДокумента.Организация,
	|			ТаблицаДокумента.Контрагент.СчетУчетаАвансовПоставщику,
	|			ТаблицаДокумента.Контрагент.СчетУчетаАвансовПоставщику.Валютный,
	|			ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПоставщиком,
	|			ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПоставщиком.Валютный,
	|			ТаблицаДокумента.Валюта,
	|			0,
	|			ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПоставщиками КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК ТаблицаДокумента
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаДокумента.Период,
	|		ТаблицаДокумента.Организация,
	|		ТаблицаДокумента.СчетУчетаАвансовПоставщику,
	|		ТаблицаДокумента.СчетУчетаАвансовПоставщикуВалютный,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПоставщиком,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПоставщикомВалютный,
	|		ТаблицаДокумента.ВалютаРасчетов
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ТаблицаДокумента.Сумма) >= 0.005
	|			ИЛИ СУММА(ТаблицаДокумента.Сумма) <= -0.005
	|			ИЛИ СУММА(ТаблицаДокумента.СуммаВал) >= 0.005
	|			ИЛИ СУММА(ТаблицаДокумента.СуммаВал) <= -0.005)) КАК ТаблицаДокумента
	|ГДЕ
	|	&ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	8,
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаДокумента.СчетУчетаАвансовПокупателя,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаАвансовПокупателя.Валютный
	|			ТОГДА ТаблицаДокумента.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаАвансовПокупателя.Валютный
	|			ТОГДА -ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаРасчетовСПокупателем.Валютный
	|			ТОГДА ТаблицаДокумента.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаРасчетовСПокупателем.Валютный
	|			ТОГДА -ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	-ТаблицаДокумента.Сумма,
	|	&СторнированиеПредоплаты
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	9,
	|	1,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА &ОтрицательнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы < 0
	|				И ТаблицаУправленческий.СчетУчетаВалютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СчетУчета
	|		ИНАЧЕ &ПоложительнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|				И ТаблицаУправленческий.СчетУчетаВалютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаУправленческий.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	&КурсоваяРазница
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаКурсовыхРазницРасчетыСПоставщиками.Дата КАК Дата,
	|		ТаблицаКурсовыхРазницРасчетыСПоставщиками.Организация КАК Организация,
	|		ТаблицаКурсовыхРазницРасчетыСПоставщиками.СчетУчета КАК СчетУчета,
	|		ТаблицаКурсовыхРазницРасчетыСПоставщиками.СчетУчетаВалютный КАК СчетУчетаВалютный,
	|		ТаблицаКурсовыхРазницРасчетыСПоставщиками.Валюта КАК Валюта,
	|		СУММА(ТаблицаКурсовыхРазницРасчетыСПоставщиками.СуммаКурсовойРазницы) КАК СуммаКурсовойРазницы
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаДокумента.Дата КАК Дата,
	|			ТаблицаДокумента.Организация КАК Организация,
	|			ТаблицаДокумента.СчетУчета КАК СчетУчета,
	|			ТаблицаДокумента.СчетУчета.Валютный КАК СчетУчетаВалютный,
	|			ТаблицаДокумента.Валюта КАК Валюта,
	|			ТаблицаДокумента.СуммаКурсовойРазницы КАК СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПоставщиками КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаДокумента.Дата,
	|			ТаблицаДокумента.Организация,
	|			ТаблицаДокумента.СчетУчета,
	|			ТаблицаДокумента.СчетУчета.Валютный,
	|			ТаблицаДокумента.Валюта,
	|			ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПоставщиками КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК ТаблицаКурсовыхРазницРасчетыСПоставщиками
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаКурсовыхРазницРасчетыСПоставщиками.Дата,
	|		ТаблицаКурсовыхРазницРасчетыСПоставщиками.Организация,
	|		ТаблицаКурсовыхРазницРасчетыСПоставщиками.СчетУчета,
	|		ТаблицаКурсовыхРазницРасчетыСПоставщиками.СчетУчетаВалютный,
	|		ТаблицаКурсовыхРазницРасчетыСПоставщиками.Валюта
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ТаблицаКурсовыхРазницРасчетыСПоставщиками.СуммаКурсовойРазницы) >= 0.005
	|			ИЛИ СУММА(ТаблицаКурсовыхРазницРасчетыСПоставщиками.СуммаКурсовойРазницы) <= -0.005)) КАК ТаблицаУправленческий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	10,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СчетУчета
	|		ИНАЧЕ &ОтрицательнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|				И ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА &ПоложительнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы < 0
	|				И ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаУправленческий.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	&КурсоваяРазница
	|ИЗ
	|	ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаУправленческий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	11,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаУправленческий.СчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ТаблицаУправленческий.СчетУчетаНаценки,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаНаценки.Валютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ТаблицаУправленческий.Сумма - ТаблицаУправленческий.Себестоимость,
	|	&Наценка
	|ИЗ
	|	ВременнаяТаблицаСуммовойУчетВРознице КАК ТаблицаУправленческий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	12,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Период,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПоставщиком
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчетаПродажи
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА -ТаблицаУправленческий.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	&СчетУчетаАвансовПокупателя,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	-ТаблицаУправленческий.Сумма,
	|	&СторнированиеАвансаПокупателя
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаУправленческий
	|ГДЕ
	|	ТаблицаУправленческий.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|	И ТаблицаУправленческий.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
		
	Запрос.УстановитьПараметр("ОприходованиеЗапасов", НСтр("ru = 'Оприходование запасов'"));
	Запрос.УстановитьПараметр("ПрочиеРасходы", НСтр("ru = 'Отражение затрат'"));
	Запрос.УстановитьПараметр("ЗачетПредоплаты", НСтр("ru = 'Зачет предоплаты'"));
	Запрос.УстановитьПараметр("СторнированиеПредоплаты", НСтр("ru = 'Сторнирование предоплаты'"));
	Запрос.УстановитьПараметр("СторнированиеЗапасов", НСтр("ru = 'Сторнирование себестоимости'"));
	Запрос.УстановитьПараметр("СторнированиеВыручки", НСтр("ru = 'Сторнирование выручки'"));
	Запрос.УстановитьПараметр("СторнированиеАвансаПокупателя", НСтр("ru = 'Сторнирование аванса покупателя'"));
	Запрос.УстановитьПараметр("Наценка", НСтр("ru = 'Наценка'"));
	Запрос.УстановитьПараметр("ПоложительнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ОтрицательнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеРасходы);
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	Запрос.УстановитьПараметр("ВидОперации", ДокументСсылкаПриходнаяНакладная.ВидОперации);
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	
	Для Каждого КлючИЗначение Из СтруктураДополнительныеСвойства.ДляСертификатов Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл  
		НоваяПроводка = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПроводка, Выборка);
	КонецЦикла;
	
КонецПроцедуры // СформироватьТаблицаУправленческий()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗакупкиПоставщиковДляКУДиР(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаПриходнаяНакладная);
	Запрос.УстановитьПараметр("ДатаДокумента", СтруктураДополнительныеСвойства.ДляПроведения.Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаРасчетыСПоставщиками.Дата КАК Период,
	|	ВременнаяТаблицаРасчетыСПоставщиками.Дата КАК ДатаДокумента,
	|	ДопРеквизитыДокумента.Организация КАК Организация,
	|	&Ссылка КАК ТоварныйДокумент,
	|	ВременнаяТаблицаРасчетыСПоставщиками.ДокументОплаты КАК ДенежныйДокумент,
	|	ВременнаяТаблицаРасчетыСПоставщиками.ДокументОплаты.УчитыватьВНУ КАК УчитыватьВНУ,
	|	ВЫБОР
	|		КОГДА ДопРеквизитыДокумента.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС)
	|			ТОГДА 18
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтавкаНДС,
	|	ЛОЖЬ КАК ЭтоТоварыКРеализации,
	|	СУММА(ВременнаяТаблицаРасчетыСПоставщиками.СуммаВал) КАК СуммаВал,
	|	ВременнаяТаблицаРасчетыСПоставщиками.ВалютаПлатежа КАК Валюта
	|ПОМЕСТИТЬ ВременнаяТаблицаЗакупкиПоставщиковДляКУДиР
	|ИЗ
	|	ВременнаяТаблицаРасчетыСПоставщиками КАК ВременнаяТаблицаРасчетыСПоставщиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная КАК ДопРеквизитыДокумента
	|		ПО (ДопРеквизитыДокумента.Ссылка = &Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПримененияЕНВД.СрезПоследних(&ДатаДокумента, ) КАК ПримененияЕНВД
	|		ПО (ДопРеквизитыДокумента.Организация = ПримененияЕНВД.Организация)
	|			И (ПримененияЕНВД.СтруктурнаяЕдиница = ДопРеквизитыДокумента.СтруктурнаяЕдиница)
	|ГДЕ
	|	ДопРеквизитыДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|	И ВременнаяТаблицаРасчетыСПоставщиками.ТипРасчетов = Значение(Перечисление.ТипыРасчетов.Аванс)
	|	И ВременнаяТаблицаРасчетыСПоставщиками.ДокументОплаты <> Неопределено
	|	И ДопРеквизитыДокумента.Контрагент.ВестиРасчетыПоДокументам
	|	И ДопРеквизитыДокумента.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|	И НЕ ЕСТЬNULL(ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД, ЛОЖЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаРасчетыСПоставщиками.Дата,
	|	ДопРеквизитыДокумента.Организация,
	|	ВременнаяТаблицаРасчетыСПоставщиками.ДокументОплаты.УчитыватьВНУ,
	|	ДопРеквизитыДокумента.НалогообложениеНДС,
	|	ВременнаяТаблицаРасчетыСПоставщиками.ВалютаПлатежа,
	|	ВременнаяТаблицаРасчетыСПоставщиками.ДокументОплаты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ТоварныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЗакупкиПоставщиковДляКУДиР.Период КАК Период,
	|	ВТЗакупкиПоставщиковДляКУДиР.ДатаДокумента КАК ДатаДокумента,
	|	ВТЗакупкиПоставщиковДляКУДиР.Организация КАК Организация,
	|	ВТЗакупкиПоставщиковДляКУДиР.ДенежныйДокумент КАК ДенежныйДокумент,
	|	ВТЗакупкиПоставщиковДляКУДиР.ТоварныйДокумент КАК ТоварныйДокумент,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	ВТЗакупкиПоставщиковДляКУДиР.УчитыватьВНУ КАК УчитыватьВНУ,
	|	ВТЗакупкиПоставщиковДляКУДиР.ЭтоТоварыКРеализации КАК ЭтоТоварыКРеализации,
	|	ВТЗакупкиПоставщиковДляКУДиР.СуммаВал КАК СуммаВал,
	|	ВТЗакупкиПоставщиковДляКУДиР.СуммаВал КАК Сумма,
	|	ВТЗакупкиПоставщиковДляКУДиР.СтавкаНДС КАК СтавкаНДС,
	|	0 КАК Количество,
	|	0 КАК СуммаНДС
	|ИЗ
	|	ВременнаяТаблицаЗакупкиПоставщиковДляКУДиР КАК ВТЗакупкиПоставщиковДляКУДиР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Ссылка КАК ТоварныйДокумент,
	|	ПриходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|	ПриходнаяНакладнаяЗапасы.Всего КАК Сумма,
	|	ЕСТЬNULL(ПриходнаяНакладнаяЗапасы.СтавкаНДС.Ставка, 0) КАК СтавкаНДС,
	|	НЕ ПриходнаяНакладнаяЗапасы.ТоварыДляПроизводства КАК ЭтоТоварыКРеализации,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ПриходнаяНакладнаяЗапасы.Количество
	|		ИНАЧЕ ПриходнаяНакладнаяЗапасы.Количество * ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
	|ГДЕ
	|	ПриходнаяНакладнаяЗапасы.Ссылка = &Ссылка
	|ИТОГИ ПО
	|	ТоварныйДокумент";
	
	Если ДокументСсылкаПриходнаяНакладная.ВидОперации <> Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДокументОплаты", "Документ");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаОплаты = РезультатЗапроса[1].Выгрузить();
	ТаблицаРезультат = ТаблицаОплаты.Скопировать(Новый Массив());
	ВыборкаДокументовСТоварами = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	УчетВалюты = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	НацВалюта = Константы.НациональнаяВалюта.Получить();
	ВалютаДокумента = ДокументСсылкаПриходнаяНакладная.ВалютаДокумента;
	
	Если УчетВалюты И ВалютаДокумента <> НацВалюта Тогда
		ТекущийКурс = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДокументСсылкаПриходнаяНакладная.Дата);
	КонецЕсли;
	
	Пока ВыборкаДокументовСТоварами.Следующий() Цикл
		СвободныеОплаты = ТаблицаОплаты.НайтиСтроки(Новый Структура("ТоварныйДокумент", ВыборкаДокументовСТоварами.ТоварныйДокумент));
		ВыборкаЗаписей = ВыборкаДокументовСТоварами.Выбрать();
		СуммаЗаписи = 0;
		Для Каждого ДокументОплаты Из СвободныеОплаты Цикл
			Если СуммаЗаписи > 0 Тогда
				НовСтр = ТаблицаРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаЗаписей);
				ЗаполнитьЗначенияСвойств(НовСтр, ДокументОплаты,,"ЭтоТоварыКРеализации");
				Если ДокументОплаты.Сумма >= СуммаЗаписи Тогда
					НовСтр.Сумма = СуммаЗаписи;
				Иначе
					НовСтр.Сумма = ДокументОплаты.Сумма;
				КонецЕсли;
				НовСтр.Количество = ?(ВыборкаЗаписей.Сумма = 0, 0, ВыборкаЗаписей.Количество*НовСтр.Сумма/ВыборкаЗаписей.Сумма);
				ДокументОплаты.Сумма = ДокументОплаты.Сумма - НовСтр.Сумма;
				НовСтр.СуммаВал = НовСтр.Сумма;
				
				Если УчетВалюты И ВалютаДокумента <> НацВалюта Тогда
					НовСтр.Сумма = НовСтр.Сумма * ТекущийКурс.Курс / ТекущийКурс.Кратность;
				КонецЕсли;
				НовСтр.СуммаНДС = НовСтр.Сумма - НовСтр.Сумма /((100+ ВыборкаЗаписей.СтавкаНДС)/100);
				НовСтр.Номенклатура = ВыборкаЗаписей.Номенклатура;
				НовСтр.Сумма = НовСтр.Сумма - НовСтр.СуммаНДС;
				СуммаЗаписи = СуммаЗаписи - НовСтр.Сумма - НовСтр.СуммаНДС;
				Если СуммаЗаписи > 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Пока ДокументОплаты.Сумма <> 0 И ВыборкаЗаписей.Следующий() Цикл
				СуммаЗаписи = ВыборкаЗаписей.Сумма;
				НовСтр = ТаблицаРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаЗаписей);
				ЗаполнитьЗначенияСвойств(НовСтр, ДокументОплаты,,"ЭтоТоварыКРеализации");
				Если ДокументОплаты.Сумма >= ВыборкаЗаписей.Сумма Тогда
					НовСтр.Сумма = ВыборкаЗаписей.Сумма;
					НовСтр.Количество =  ВыборкаЗаписей.Количество;
				Иначе
					НовСтр.Сумма = ДокументОплаты.Сумма;
					НовСтр.Количество = ?(ВыборкаЗаписей.Сумма = 0, ВыборкаЗаписей.Количество, ВыборкаЗаписей.Количество*ДокументОплаты.Сумма/ВыборкаЗаписей.Сумма);
				КонецЕсли;
				ДокументОплаты.Сумма = ДокументОплаты.Сумма - НовСтр.Сумма;
				НовСтр.СуммаВал = НовСтр.Сумма;
				
				Если УчетВалюты И ВалютаДокумента <> НацВалюта Тогда
					НовСтр.Сумма = НовСтр.Сумма * ТекущийКурс.Курс / ТекущийКурс.Кратность;
				КонецЕсли;
				НовСтр.СуммаНДС = НовСтр.Сумма - НовСтр.Сумма /((100+ ВыборкаЗаписей.СтавкаНДС)/100);
				НовСтр.Номенклатура = ВыборкаЗаписей.Номенклатура;
				НовСтр.Сумма = НовСтр.Сумма - НовСтр.СуммаНДС;
				СуммаЗаписи = СуммаЗаписи - НовСтр.Сумма - НовСтр.СуммаНДС;
			КонецЦикла;
			Если ДокументОплаты.Сумма <> 0 Тогда
				НовСтр = ТаблицаРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, ДокументОплаты);
				ДокументОплаты.Сумма = 0;
				НовСтр.СуммаВал = НовСтр.Сумма;
				Если УчетВалюты И ВалютаДокумента <> НацВалюта Тогда
					НовСтр.Сумма = НовСтр.Сумма * ТекущийКурс.Курс / ТекущийКурс.Кратность;
				КонецЕсли;
				НовСтр.СуммаНДС = НовСтр.Сумма - НовСтр.Сумма /((100+ ДокументОплаты.СтавкаНДС)/100);
				НовСтр.Сумма = НовСтр.Сумма - НовСтр.СуммаНДС;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ДокументОплаты Из ТаблицаОплаты Цикл
		Если ДокументОплаты.Сумма <> 0 Тогда
			НовСтр = ТаблицаРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ДокументОплаты);
			НовСтр.СуммаВал = НовСтр.Сумма;
			Если УчетВалюты И ВалютаДокумента <> НацВалюта Тогда
				НовСтр.Сумма = НовСтр.Сумма * ТекущийКурс.Курс / ТекущийКурс.Кратность;
			КонецЕсли;
			НовСтр.СуммаНДС = НовСтр.Сумма - НовСтр.Сумма /((100+ ДокументОплаты.СтавкаНДС)/100);
			НовСтр.Сумма = НовСтр.Сумма - НовСтр.СуммаНДС;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗакупкиДляКУДиР", ТаблицаРезультат);
	
КонецПроцедуры // СформироватьТаблицаЗакупкиПоставщиковДляКУДиР()

// Помещает в менеджер временных таблиц запроса данные для формирования взаиморасчетов по операции возврата
//
Процедура СформироватьТаблицуВзаиморасчетовПоОПерацииВозврата(Запрос)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаДокумента.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&СторнированиеДолга КАК СодержаниеПроводки,
	|	ТаблицаДокумента.Период КАК Дата,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем КАК СчетУчета,
	|	ТаблицаДокумента.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаДокумента.ДокументОснование = ЗНАЧЕНИЕ(Документ.РасходнаяНакладная.ПустаяСсылка)
	|							ИЛИ ТаблицаДокумента.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|							ИЛИ ТаблицаДокумента.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|							ИЛИ ТаблицаДокумента.ДокументОснование = ЗНАЧЕНИЕ(Документ.ПриходныйОрдер.ПустаяСсылка)
	|							ИЛИ ТаблицаДокумента.ДокументОснование = ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)
	|							ИЛИ ТаблицаДокумента.ДокументОснование = НЕОПРЕДЕЛЕНО
	|							ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.ДокументОснование) = ТИП(Документ.ЧекККМ)
	|							ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.ДокументОснование) = ТИП(Документ.ТТНВходящаяЕГАИС)
	|						ТОГДА ТаблицаДокумента.Документ
	|					ИНАЧЕ ТаблицаДокумента.ДокументОснование
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ КАК Заказ,
	|	ТаблицаДокумента.ВалютаРасчетов КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг) КАК ТипРасчетов,
	|	-СУММА(ТаблицаДокумента.Сумма) КАК Сумма,
	|	-СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВал,
	|	СУММА(0) КАК СуммаРег,
	|	-СУММА(ТаблицаДокумента.Сумма) КАК СуммаДляОстатка,
	|	-СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВалДляОстатка
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПокупателями
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаДокумента.ДокументОснование = ЗНАЧЕНИЕ(Документ.РасходнаяНакладная.ПустаяСсылка)
	|							ИЛИ ТаблицаДокумента.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|							ИЛИ ТаблицаДокумента.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|							ИЛИ ТаблицаДокумента.ДокументОснование = ЗНАЧЕНИЕ(Документ.ПриходныйОрдер.ПустаяСсылка)
	|							ИЛИ ТаблицаДокумента.ДокументОснование = ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)
	|							ИЛИ ТаблицаДокумента.ДокументОснование = НЕОПРЕДЕЛЕНО
	|							ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.ДокументОснование) = ТИП(Документ.ЧекККМ)
	|							ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.ДокументОснование) = ТИП(Документ.ТТНВходящаяЕГАИС)
	|						ТОГДА ТаблицаДокумента.Документ
	|					ИНАЧЕ ТаблицаДокумента.ДокументОснование
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаДокумента.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	&ВосстановлениеПредоплаты,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаДокумента.ДокументОснование = ЗНАЧЕНИЕ(Документ.РасходнаяНакладная.ПустаяСсылка)
	|							ИЛИ ТаблицаДокумента.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|							ИЛИ ТаблицаДокумента.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|							ИЛИ ТаблицаДокумента.ДокументОснование = ЗНАЧЕНИЕ(Документ.ПриходныйОрдер.ПустаяСсылка)
	|							ИЛИ ТаблицаДокумента.ДокументОснование = ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)
	|							ИЛИ ТаблицаДокумента.ДокументОснование = НЕОПРЕДЕЛЕНО
	|							ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.ДокументОснование) = ТИП(Документ.ЧекККМ)
	|							ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.ДокументОснование) = ТИП(Документ.ТТНВходящаяЕГАИС)
	|						ТОГДА ВЫБОР
	|								КОГДА ТаблицаДокумента.ОплатаСертификатом
	|									ТОГДА НЕОПРЕДЕЛЕНО
	|								ИНАЧЕ ТаблицаДокумента.Документ
	|							КОНЕЦ
	|					ИНАЧЕ ТаблицаДокумента.ДокументОснование
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.ТипРасчетовКуда,
	|	-СУММА(ТаблицаДокумента.Сумма),
	|	-СУММА(ТаблицаДокумента.СуммаВал),
	|	СУММА(0) КАК СуммаРег,
	|	-СУММА(ТаблицаДокумента.Сумма),
	|	-СУММА(ТаблицаДокумента.СуммаВал)
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.Договор,
	|	ТаблицаДокумента.ТипРасчетовКуда,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаДокумента.ДокументОснование = ЗНАЧЕНИЕ(Документ.РасходнаяНакладная.ПустаяСсылка)
	|							ИЛИ ТаблицаДокумента.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|							ИЛИ ТаблицаДокумента.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|							ИЛИ ТаблицаДокумента.ДокументОснование = ЗНАЧЕНИЕ(Документ.ПриходныйОрдер.ПустаяСсылка)
	|							ИЛИ ТаблицаДокумента.ДокументОснование = ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)
	|							ИЛИ ТаблицаДокумента.ДокументОснование = НЕОПРЕДЕЛЕНО
	|							ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.ДокументОснование) = ТИП(Документ.ЧекККМ)
	|							ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.ДокументОснование) = ТИП(Документ.ТТНВходящаяЕГАИС)
	|						ТОГДА ВЫБОР
	|								КОГДА ТаблицаДокумента.ОплатаСертификатом
	|									ТОГДА НЕОПРЕДЕЛЕНО
	|								ИНАЧЕ ТаблицаДокумента.Документ
	|							КОНЕЦ
	|					ИНАЧЕ ТаблицаДокумента.ДокументОснование
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаДокумента.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&ВосстановлениеПредоплаты,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ОплатаСертификатом
	|			ТОГДА &КонтрагентДляПредоплаты
	|		ИНАЧЕ ТаблицаДокумента.Контрагент
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ОплатаСертификатом
	|			ТОГДА &СчетУчетаАвансовПокупателя
	|		ИНАЧЕ ТаблицаДокумента.СчетУчетаАвансовПоставщику
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ОплатаСертификатом
	|			ТОГДА &ДоговорПоУмолчанию
	|		ИНАЧЕ ТаблицаДокумента.Договор
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ОплатаСертификатом
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ОплатаСертификатом
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.ТипРасчетов,
	|	-СУММА(ТаблицаДокумента.Сумма),
	|	-СУММА(ТаблицаДокумента.СуммаВал),
	|	СУММА(0) КАК СуммаРег,
	|	СУММА(ТаблицаДокумента.Сумма),
	|	СУММА(ТаблицаДокумента.СуммаВал)
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.ТипРасчетов,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ОплатаСертификатом
	|			ТОГДА &КонтрагентДляПредоплаты
	|		ИНАЧЕ ТаблицаДокумента.Контрагент
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ОплатаСертификатом
	|			ТОГДА &СчетУчетаАвансовПокупателя
	|		ИНАЧЕ ТаблицаДокумента.СчетУчетаАвансовПоставщику
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ОплатаСертификатом
	|			ТОГДА &ДоговорПоУмолчанию
	|		ИНАЧЕ ТаблицаДокумента.Договор
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ОплатаСертификатом
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ОплатаСертификатом
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаДокумента.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	&СторнированиеПредоплаты,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	&КонтрагентДляПредоплаты,
	|	&СчетУчетаАвансовПокупателя,
	|	&ДоговорПоУмолчанию,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка),
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс),
	|	-СУММА(ТаблицаДокумента.Сумма),
	|	-СУММА(ТаблицаДокумента.СуммаВал),
	|	СУММА(0) КАК СуммаРег,
	|	-СУММА(ТаблицаДокумента.Сумма),
	|	-СУММА(ТаблицаДокумента.СуммаВал)
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|	И ТаблицаДокумента.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.ВалютаРасчетов";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру "СуммыДокументовРегламентированныйУчет".
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСуммыДокументовРегламентированныйУчет(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Если ДокументСсылкаРасходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика
		И ДокументСсылкаРасходнаяНакладная.Договор.ВалютаРасчетов <> СтруктураДополнительныеСвойства.НациональнаяВалюта Тогда
		
		РасчетыПроведениеДокументов.СформироватьТаблицаСуммыДокументовРегламентированныйУчет(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
		
	Иначе
		
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСуммыДокументовРегламентированныйУчет", Новый ТаблицаЗначений);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру "ОплатаДокументов".
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаДокументов(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	МассивДоступныхОпераций = Новый Массив;
	МассивДоступныхОпераций.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика);
	
	РасчетыПроведениеДокументов.СформироватьТаблицаОплатаДокументовНакладные(ДокументСсылка, СтруктураДополнительныеСвойства, МассивДоступныхОпераций);
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру "ОплатаДокументов".
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	МассивДоступныхОпераций = Новый Массив;
	МассивДоступныхОпераций.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика);
	РасчетыПроведениеДокументов.СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылка, СтруктураДополнительныеСвойства, МассивДоступныхОпераций);
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаИнициализироватьДанные()
	
	ТекстЗапроса = 
	
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладная.Договор.ЭтоДоговорОбслуживания
	|				И ПриходнаяНакладная.Договор.ДоговорОбслуживанияНаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВестиУчетРасходовПоДоговорамОбслуживания,
	|	ПриходнаяНакладная.ПоложениеСклада КАК ПоложениеСклада,
	|	ПриходнаяНакладная.Договор.ДоговорОбслуживанияНаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ПриходнаяНакладная.Контрагент КАК Контрагент,
	|	ПриходнаяНакладная.ВалютаДокумента КАК ВалютаДокумента,
	|	ПриходнаяНакладная.Дата КАК Дата,
	|	ПриходнаяНакладная.Договор.ВалютаРасчетов КАК ДоговорВалютаРасчетов,
	|	ПриходнаяНакладная.Договор.РасчетыВУсловныхЕдиницах КАК ДоговорРасчетыВУсловныхЕдиницах,
	|	ПриходнаяНакладная.Ссылка КАК Ссылка,
	|	ПриходнаяНакладная.Дата КАК Период,
	|	ПриходнаяНакладная.Договор КАК Договор,
	|	ПриходнаяНакладная.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ПриходнаяНакладная.СпособЗачетаПредоплаты КАК СпособЗачетаПредоплаты,
	|	ПриходнаяНакладная.Заказ КАК Заказ,
	|	ПриходнаяНакладная.ПоложениеЗаказаПоставщику КАК ПоложениеЗаказаПоставщику,
	|	ПриходнаяНакладная.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ПриходнаяНакладная.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ПриходнаяНакладная.Кратность КАК Кратность,
	|	ПриходнаяНакладная.Курс КАК Курс
	|ПОМЕСТИТЬ ВременнаяТаблицаШапка
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|ГДЕ
	|	ПриходнаяНакладная.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВременнаяТаблицаКурсыВалютСрезПоследних
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаУчета, &ВалютаНациональная)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтроки,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации КАК ВидОперации,
	|	ПриходнаяНакладнаяЗапасы.Ссылка КАК Документ,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.ДокументОснование КАК ДокументОснование,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.ПоложениеСклада КАК ПоложениеСклада,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаШапка,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.СтруктурнаяЕдиница.ОрдерныйСклад КАК СтруктурнаяЕдиницаШапкаОрдерныйСклад,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.Контрагент КАК Контрагент,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.Договор КАК Договор,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.Ответственный КАК Ответственный,
	|	ПриходнаяНакладнаяЗапасы.СтруктурнаяЕдиница.СчетУчетаНаценки КАК СчетУчетаНаценки,
	|	ПриходнаяНакладнаяЗапасы.СтруктурнаяЕдиница.РозничныйВидЦен КАК РозничныйВидЦен,
	|	ПриходнаяНакладнаяЗапасы.СтруктурнаяЕдиница.РозничныйВидЦен.ВалютаЦены КАК ВалютаЦены,
	|	ПриходнаяНакладнаяЗапасы.СтруктурнаяЕдиница.СчетУчетаВРознице КАК СчетУчетаВРознице,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|				ИЛИ ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию)
	|				ИЛИ ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку)
	|				ИЛИ ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаОтветхранение)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладнаяЗапасы.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПеремещениеВРозницуСуммовойУчет,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера)
	|				ИЛИ ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика)
	|				ИЛИ ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратСОтветхранения)
	|			ТОГДА &Организация
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КоррОрганизация,
	|	ПриходнаяНакладнаяЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера)
	|				ИЛИ ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика)
	|				ИЛИ ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратСОтветхранения)
	|			ТОГДА ПриходнаяНакладнаяЗапасы.Ссылка.Контрагент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КоррСтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладнаяЗапасы.СтруктурнаяЕдиница.ОрдерныйСклад
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрдерныйСклад,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА ПриходнаяНакладнаяЗапасы.Ячейка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Ячейка,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладнаяЗапасы.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет)
	|			ТОГДА ПриходнаяНакладнаяЗапасы.СтруктурнаяЕдиница.СчетУчетаВРознице
	|		ИНАЧЕ ПриходнаяНакладнаяЗапасы.Номенклатура.СчетУчетаЗапасов
	|	КОНЕЦ КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладнаяЗапасы.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет)
	|			ТОГДА ПриходнаяНакладнаяЗапасы.СтруктурнаяЕдиница.СчетУчетаВРознице.Валютный
	|		ИНАЧЕ ПриходнаяНакладнаяЗапасы.Номенклатура.СчетУчетаЗапасов.Валютный
	|	КОНЕЦ КАК СчетУчетаВалютный,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера)
	|				ИЛИ ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика)
	|				ИЛИ ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратСОтветхранения)
	|			ТОГДА ПриходнаяНакладнаяЗапасы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КоррСчетУчета,
	|	ПриходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|	ПриходнаяНакладнаяЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера)
	|				ИЛИ ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика)
	|				ИЛИ ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратСОтветхранения)
	|			ТОГДА ПриходнаяНакладнаяЗапасы.Номенклатура
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КоррНоменклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ПриходнаяНакладнаяЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ПриходнаяНакладнаяЗапасы.ХарактеристикаНабора
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК ХарактеристикаНабора,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера)
	|				ИЛИ ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика)
	|				ИЛИ ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратСОтветхранения)
	|			ТОГДА ВЫБОР
	|					КОГДА &ИспользоватьХарактеристики
	|						ТОГДА ПриходнаяНакладнаяЗапасы.Характеристика
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КоррХарактеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ПриходнаяНакладнаяЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера)
	|				ИЛИ ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика)
	|				ИЛИ ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратСОтветхранения)
	|			ТОГДА ВЫБОР
	|					КОГДА &ИспользоватьПартии
	|						ТОГДА ПриходнаяНакладнаяЗапасы.Партия
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КоррПартия,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладнаяЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И ПриходнаяНакладнаяЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ПриходнаяНакладнаяЗапасы.Заказ
	|		КОГДА ПриходнаяНакладнаяЗапасы.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|				И ПриходнаяНакладнаяЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|			ТОГДА ПриходнаяНакладнаяЗапасы.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Заказ,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладнаяЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И ПриходнаяНакладнаяЗапасы.Заказ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаказНаряд,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера)
	|				ИЛИ ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика)
	|				ИЛИ ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратСОтветхранения)
	|			ТОГДА ВЫБОР
	|					КОГДА ПриходнаяНакладнаяЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|							И ПриходнаяНакладнаяЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|						ТОГДА ПриходнаяНакладнаяЗапасы.Заказ
	|					КОГДА ПриходнаяНакладнаяЗапасы.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|							И ПриходнаяНакладнаяЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|						ТОГДА ПриходнаяНакладнаяЗапасы.Заказ
	|					ИНАЧЕ НЕОПРЕДЕЛЕНО
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КоррЗаказ,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|				И ПриходнаяНакладнаяЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				И ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТоварыНаКомиссии,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ДокументОснование ССЫЛКА Документ.РасходнаяНакладная
	|				И ПриходнаяНакладнаяЗапасы.Ссылка.ДокументОснование <> ЗНАЧЕНИЕ(Документ.РасходнаяНакладная.ПустаяСсылка)
	|			ТОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ДокументОснование.Подразделение
	|		ИНАЧЕ ПриходнаяНакладнаяЗапасы.Ссылка.Подразделение
	|	КОНЕЦ КАК ПодразделениеПродажи,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|			ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности
	|		ИНАЧЕ ПриходнаяНакладнаяЗапасы.Номенклатура.НаправлениеДеятельности
	|	КОНЕЦ КАК НаправлениеДеятельностиПродажи,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|			ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж
	|		ИНАЧЕ ПриходнаяНакладнаяЗапасы.Номенклатура.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж
	|	КОНЕЦ КАК СчетУчетаПродажи,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|			ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж
	|		ИНАЧЕ ПриходнаяНакладнаяЗапасы.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж
	|	КОНЕЦ КАК СчетУчетаСебестоимость,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ПриходнаяНакладнаяЗапасы.Количество
	|		ИНАЧЕ ПриходнаяНакладнаяЗапасы.Количество * ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ПриходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА ПриходнаяНакладнаяЗапасы.СуммаНДС * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|					ИНАЧЕ ПриходнаяНакладнаяЗапасы.СуммаНДС * ПриходнаяНакладнаяЗапасы.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ПриходнаяНакладнаяЗапасы.Ссылка.Кратность)
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ПриходнаяНакладнаяЗапасы.СуммаНДС * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ПриходнаяНакладнаяЗапасы.СуммаНДС * ПриходнаяНакладнаяЗапасы.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ПриходнаяНакладнаяЗапасы.Ссылка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСЗакупкиПродажи,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ПриходнаяНакладнаяЗапасы.Всего * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ПриходнаяНакладнаяЗапасы.Всего * ПриходнаяНакладнаяЗапасы.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ПриходнаяНакладнаяЗапасы.Ссылка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ПриходнаяНакладнаяЗапасы.СуммаРасходов * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ПриходнаяНакладнаяЗапасы.СуммаРасходов * ПриходнаяНакладнаяЗапасы.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ПриходнаяНакладнаяЗапасы.Ссылка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРасходов,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ПриходнаяНакладнаяЗапасы.СуммаРасходов * КурсыРегВалюты.Курс * ПриходнаяНакладнаяЗапасы.Ссылка.Кратность / (ПриходнаяНакладнаяЗапасы.Ссылка.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ПриходнаяНакладнаяЗапасы.СуммаРасходов
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРасходовВал,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ПриходнаяНакладнаяЗапасы.Себестоимость * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ПриходнаяНакладнаяЗапасы.Себестоимость * ПриходнаяНакладнаяЗапасы.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ПриходнаяНакладнаяЗапасы.Ссылка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Себестоимость,
	|	ПриходнаяНакладнаяЗапасы.Всего КАК СуммаРасчетовПринятыеПереданные,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.ВключатьРасходыВСебестоимость КАК ВключатьРасходыВСебестоимость,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера)
	|				ИЛИ ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика)
	|				ИЛИ ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратСОтветхранения)
	|				ИЛИ ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|					И (ЕСТЬNULL(ПриходнаяНакладнаяЗапасы.Ссылка.ДокументОснование.ВидОперации, ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|						ИЛИ ЕСТЬNULL(ПриходнаяНакладнаяЗапасы.Ссылка.ДокументОснование.ВидОперации, ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|						ИЛИ ПриходнаяНакладнаяЗапасы.Ссылка.ДокументОснование ССЫЛКА Документ.ЧекККМ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ФиксированнаяСтоимость,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|				ИЛИ ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию)
	|				ИЛИ ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку)
	|				ИЛИ ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаОтветхранение)
	|			ТОГДА ВЫРАЗИТЬ(&ОприходованиеЗапасов КАК СТРОКА(100))
	|		КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|				ИЛИ ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера)
	|				ИЛИ ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика)
	|				ИЛИ ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратСОтветхранения)
	|			ТОГДА ВЫРАЗИТЬ(&СписаниеЗапасов КАК СТРОКА(100))
	|	КОНЕЦ КАК СодержаниеПроводки,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.Контрагент.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.Контрагент.СчетУчетаРасчетовСПоставщиком КАК СчетУчетаРасчетовСПоставщиком,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.Контрагент.СчетУчетаРасчетовСПоставщиком.Валютный КАК СчетУчетаРасчетовСПоставщикомВалютный,
	|	ПриходнаяНакладнаяЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ПриходнаяНакладнаяЗапасы.НомерГТД КАК НомерГТД,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ПриходнаяНакладнаяЗапасы.Всего * КурсыРегВалюты.Курс * ПриходнаяНакладнаяЗапасы.Ссылка.Кратность / (ПриходнаяНакладнаяЗапасы.Ссылка.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ПриходнаяНакладнаяЗапасы.Всего
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаВал,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ПриходнаяНакладнаяЗапасы.Всего
	|			ИНАЧЕ ПриходнаяНакладнаяЗапасы.Всего * ПриходнаяНакладнаяЗапасы.Ссылка.Курс / КурсыРегВалюты.Кратность
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРег,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА ПриходнаяНакладнаяЗапасы.СуммаНДС * КурсыРегВалюты.Курс * ПриходнаяНакладнаяЗапасы.Ссылка.Кратность / (ПриходнаяНакладнаяЗапасы.Ссылка.Курс * КурсыРегВалюты.Кратность)
	|					ИНАЧЕ ПриходнаяНакладнаяЗапасы.СуммаНДС
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСВал,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА ПриходнаяНакладнаяЗапасы.СуммаНДС
	|					ИНАЧЕ ПриходнаяНакладнаяЗапасы.СуммаНДС * ПриходнаяНакладнаяЗапасы.Ссылка.Курс / КурсыРегВалюты.Кратность
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСРег,
	|	ПриходнаяНакладнаяЗапасы.КлючСвязи КАК КлючСвязи,
	|	ПриходнаяНакладнаяЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПриходнаяНакладнаяЗапасы.Номенклатура.ПроизвольныйНоминал
	|				ТОГДА ПриходнаяНакладнаяЗапасы.Сумма / ВЫБОР
	|						КОГДА ПриходнаяНакладнаяЗапасы.Номенклатура.ИспользоватьСерийныеНомера
	|							ТОГДА ПриходнаяНакладнаяЗапасы.Количество
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			ИНАЧЕ ПриходнаяНакладнаяЗапасы.Номенклатура.Номинал / ВЫБОР
	|					КОГДА ПриходнаяНакладнаяЗапасы.Номенклатура.ИспользоватьСерийныеНомера
	|						ТОГДА 1
	|					ИНАЧЕ 1 / ПриходнаяНакладнаяЗапасы.Количество
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК НоминалСертификата,
	|	ПриходнаяНакладнаяЗапасы.Номенклатура.ПроизвольныйНоминал КАК ПроизвольныйНоминал,
	|	ПриходнаяНакладнаяЗапасы.Номенклатура.СчетУчетаЗатрат КАК СчетУчетаЗатрат,
	|	ПриходнаяНакладнаяЗапасы.Номенклатура.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера,
	|	ПриходнаяНакладнаяЗапасы.Цена КАК Цена,
	|	ПриходнаяНакладнаяЗапасы.СуммаНДС КАК СуммаНДСВалютаДокумента,
	|	ПриходнаяНакладнаяЗапасы.Всего КАК ВсегоВалютаДокумента,
	|	ПриходнаяНакладнаяЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыУпрВалюты
	|		ПО (КурсыУпрВалюты.Валюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыРегВалюты
	|		ПО (КурсыРегВалюты.Валюта = &ВалютаНациональная),
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ПриходнаяНакладнаяЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяРасходы.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ПриходнаяНакладнаяРасходы.Ссылка.Дата КАК Период,
	|	ПриходнаяНакладнаяРасходы.Ссылка КАК Документ,
	|	ПриходнаяНакладнаяРасходы.Ссылка.ВидОперации КАК ВидОперации,
	|	&Организация КАК Организация,
	|	ПриходнаяНакладнаяРасходы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ПриходнаяНакладнаяРасходы.Ссылка.ВалютаДокумента КАК Валюта,
	|	ПриходнаяНакладнаяРасходы.Номенклатура.СчетУчетаЗатрат КАК СчетУчета,
	|	ПриходнаяНакладнаяРасходы.Номенклатура КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК ЗапасыНоменклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК Партия,
	|	ПриходнаяНакладнаяРасходы.Заказ КАК Заказ,
	|	ПриходнаяНакладнаяРасходы.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ПриходнаяНакладнаяРасходы.Количество
	|		ИНАЧЕ ПриходнаяНакладнаяРасходы.Количество * ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ПриходнаяНакладнаяРасходы.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПриходнаяНакладнаяРасходы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ПриходнаяНакладнаяРасходы.Всего * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ПриходнаяНакладнаяРасходы.Всего * ПриходнаяНакладнаяРасходы.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ПриходнаяНакладнаяРасходы.Ссылка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПриходнаяНакладнаяРасходы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ПриходнаяНакладнаяРасходы.Всего * КурсыРегВалюты.Курс * ПриходнаяНакладнаяРасходы.Ссылка.Кратность / (ПриходнаяНакладнаяРасходы.Ссылка.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ПриходнаяНакладнаяРасходы.Всего
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаВал,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПриходнаяНакладнаяРасходы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ПриходнаяНакладнаяРасходы.Всего
	|			ИНАЧЕ ПриходнаяНакладнаяРасходы.Всего * ПриходнаяНакладнаяРасходы.Ссылка.Курс / ПриходнаяНакладнаяРасходы.Ссылка.Кратность
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРег,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПриходнаяНакладнаяРасходы.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ПриходнаяНакладнаяРасходы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА ПриходнаяНакладнаяРасходы.СуммаНДС * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|					ИНАЧЕ ПриходнаяНакладнаяРасходы.СуммаНДС * ПриходнаяНакладнаяРасходы.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ПриходнаяНакладнаяРасходы.Ссылка.Кратность)
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПриходнаяНакладнаяРасходы.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ПриходнаяНакладнаяРасходы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА ПриходнаяНакладнаяРасходы.СуммаНДС
	|					ИНАЧЕ ПриходнаяНакладнаяРасходы.СуммаНДС * ПриходнаяНакладнаяРасходы.Ссылка.Курс / ПриходнаяНакладнаяРасходы.Ссылка.Кратность
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСРег,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПриходнаяНакладнаяРасходы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ПриходнаяНакладнаяРасходы.СуммаНДС * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ПриходнаяНакладнаяРасходы.СуммаНДС * ПриходнаяНакладнаяРасходы.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ПриходнаяНакладнаяРасходы.Ссылка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСЗакупкиПродажи,
	|	ПриходнаяНакладнаяРасходы.Ссылка.ВключатьРасходыВСебестоимость КАК ВключатьРасходыВСебестоимость,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладнаяРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.Расходы)
	|				И НЕ ПриходнаяНакладнаяРасходы.Ссылка.ВключатьРасходыВСебестоимость
	|			ТОГДА ПриходнаяНакладнаяРасходы.НаправлениеДеятельности
	|		ИНАЧЕ ПриходнаяНакладнаяРасходы.Номенклатура.НаправлениеДеятельности
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	ПриходнаяНакладнаяРасходы.Ссылка.Контрагент КАК Контрагент,
	|	ПриходнаяНакладнаяРасходы.Ссылка.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ПриходнаяНакладнаяРасходы.Ссылка.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ПриходнаяНакладнаяРасходы.Ссылка.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ПриходнаяНакладнаяРасходы.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	ПриходнаяНакладнаяРасходы.Ссылка.Договор КАК Договор,
	|	ПриходнаяНакладнаяРасходы.Ссылка.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ПриходнаяНакладнаяРасходы.Ссылка.Контрагент.СчетУчетаРасчетовСПоставщиком КАК СчетУчетаРасчетовСПоставщиком,
	|	ПриходнаяНакладнаяРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета КАК ТипСчета,
	|	ПриходнаяНакладнаяРасходы.Всего КАК ВсегоВалютаДокумента
	|ПОМЕСТИТЬ ВременнаяТаблицаРасходы
	|ИЗ
	|	Документ.ПриходнаяНакладная.Расходы КАК ПриходнаяНакладнаяРасходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыУпрВалюты
	|		ПО (КурсыУпрВалюты.Валюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыРегВалюты
	|		ПО (КурсыРегВалюты.Валюта = &ВалютаНациональная)
	|ГДЕ
	|	ПриходнаяНакладнаяРасходы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Ссылка.ВидОперации КАК ВидОперации,
	|	ТаблицаДокумента.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаАвансовПокупателя КАК СчетУчетаАвансовПокупателя,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаРасчетовСПоставщиком КАК СчетУчетаРасчетовСПоставщиком,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаАвансовПоставщику КАК СчетУчетаАвансовПоставщику,
	|	ТаблицаДокумента.Ссылка.Организация КАК ОрганизацияВНУ,
	|	ТаблицаДокумента.Ссылка.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ТаблицаДокумента.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаДокумента.Ссылка.Договор КАК Договор,
	|	ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ТаблицаДокумента.Заказ КАК Заказ,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее) КАК НаправлениеДеятельностиПродажи,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс) КАК ТипРасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг) КАК ТипРасчетовКуда,
	|	&Ссылка КАК ДокументКуда,
	|	ТаблицаДокумента.Документ КАК Документ,
	|	ТаблицаДокумента.Ссылка.ДокументОснование КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам
	|				ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.АвансовыйОтчет)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.Взаимозачет)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходСоСчета
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходСоСчета).Статья
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеНаСчет
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеНаСчет).Статья
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеВКассу
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеВКассу).Статья
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходИзКассы
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходИзКассы).Статья
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам)
	|			КОНЕЦ
	|	КОНЕЦ КАК Статья,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходСоСчета
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходСоСчета).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеНаСчет
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеНаСчет).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеВКассу
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеВКассу).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходИзКассы
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходИзКассы).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.АвансовыйОтчет
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.АвансовыйОтчет).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.Взаимозачет
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.Взаимозачет).Дата
	|				КОНЕЦ
	|		ИНАЧЕ ТаблицаДокумента.Ссылка.Дата
	|	КОНЕЦ КАК ДокументДата,
	|	ВЫБОР
	|		КОГДА КонстантаВалютаУчета.Значение = &ВалютаРасчетов
	|			ТОГДА ТаблицаДокумента.СуммаРасчетов
	|		КОГДА КонстантаВалютаУчета.Значение = КонстантаНациональнаяВалюта.Значение
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.СуммаРасчетов * ТаблицаДокумента.Курс / ТаблицаДокумента.Кратность КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДокумента.СуммаРасчетов * ТаблицаДокумента.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * ТаблицаДокумента.Кратность) КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК Сумма,
	|	ТаблицаДокумента.СуммаРасчетов КАК СуммаВал,
	|	ТаблицаДокумента.ОплатаСертификатом КАК ОплатаСертификатом,
	|	ТаблицаДокумента.НомерСертификата КАК НомерСертификата,
	|	ЕСТЬNULL(Номенклатура.Номинал, 0) КАК НоминалСертификата,
	|	ТаблицаДокумента.СуммаПлатежа КАК СуммаСертификата,
	|	ЕСТЬNULL(Номенклатура.ЧастичноеПогашение, ЛОЖЬ) КАК ЧастичноеПогашение,
	|	ТаблицаДокумента.Ссылка.Договор.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.СуммаРасчетов * ТаблицаДокумента.Курс / ТаблицаДокумента.Кратность КАК ЧИСЛО(15, 2)) КАК СуммаРубПоКурсуАванса,
	|	ТаблицаДокумента.Курс КАК Курс,
	|	ТаблицаДокумента.Кратность КАК Кратность,
	|	ТаблицаДокумента.СуммаРасчетов КАК СуммаРасчетов,
	|	ТаблицаДокумента.СуммаПлатежа КАК СуммаПлатежа
	|ПОМЕСТИТЬ ВременнаяТаблицаПредоплата
	|ИЗ
	|	Документ.ПриходнаяНакладная.Предоплата КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыВалютУчетаСрезПоследних
	|		ПО (КурсыВалютУчетаСрезПоследних.Валюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ТаблицаДокумента.Документ = Номенклатура.Ссылка,
	|	Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта,
	|	Константа.ВалютаУчета КАК КонстантаВалютаУчета
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяСерийныеНомера.КлючСвязи КАК КлючСвязи,
	|	ПриходнаяНакладнаяСерийныеНомера.СерийныйНомер КАК СерийныйНомер
	|ПОМЕСТИТЬ ВременнаяТаблицаСерийныеНомера
	|ИЗ
	|	Документ.ПриходнаяНакладная.СерийныеНомера КАК ПриходнаяНакладнаяСерийныеНомера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ПО (ВременнаяТаблицаЗапасы.КлючСвязи = ПриходнаяНакладнаяСерийныеНомера.КлючСвязи)
	|ГДЕ
	|	&ИспользоватьСерийныеНомера
	|	И ПриходнаяНакладнаяСерийныеНомера.Ссылка = &Ссылка
	|	И НЕ ВЫБОР
	|				КОГДА ВременнаяТаблицаЗапасы.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти)
	|					ТОГДА ВременнаяТаблицаЗапасы.ОрдерныйСклад
	|				ИНАЧЕ ВременнаяТаблицаЗапасы.СтруктурнаяЕдиницаШапкаОрдерныйСклад
	|			КОНЕЦ = ИСТИНА";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = ПолучитьТекстЗапросаИнициализироватьДанные(); // (обратно через "Ctrl"+"-")
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаПриходнаяНакладная);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.Дляпроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("УчетПоЯчейкам", СтруктураДополнительныеСвойства.УчетнаяПолитика.УчетПоЯчейкам);
	Запрос.УстановитьПараметр("ИспользоватьСерийныеНомера", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерийныеНомера);
	
	Запрос.УстановитьПараметр("ОприходованиеЗапасов", НСтр("ru = 'Оприходование запасов'"));
	Запрос.УстановитьПараметр("СписаниеЗапасов", НСтр("ru = 'Списание запасов'"));
	
	Запрос.УстановитьПараметр("ВалютаУчета", СтруктураДополнительныеСвойства.ВалютаУчета);
	Запрос.УстановитьПараметр("ВалютаНациональная", СтруктураДополнительныеСвойства.НациональнаяВалюта);
	Запрос.УстановитьПараметр("ВалютаРасчетов", СтруктураДополнительныеСвойства.Договор.ВалютаРасчетов);
	
	//Перед выполнением запроса проверим, необходим ли пересчет из валюты в валюту
	РасчетыПроведениеДокументов.МодифицироватьЗапросДляПересчетаВВалюту(ДокументСсылкаПриходнаяНакладная, Запрос, СтруктураДополнительныеСвойства);
	
	Запрос.ВыполнитьПакет();
	
	Если НЕ ДокументСсылкаПриходнаяНакладная.ВидОПерации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика Тогда
		СтруктураДополнительныеСвойства.Вставить("БезУчетаАвансов", Истина);
		РасчетыПроведениеДокументов.ПересчитатьТаблицыПоКурсамВалют(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
		РасчетыПроведениеДокументов.ПоместитьПересчитанныеТаблицыВМенеджерВременныхТаблиц(СтруктураДополнительныеСвойства);
	КонецЕсли;
	
	// Формирование проводок документа.
	УправлениеНебольшойФирмойСервер.СформироватьТаблицуПроводок(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаРасчетыСПоставщиками(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаРасчетыСПокупателями(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаЗакупки(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПродажи(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыНаСкладах(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыКПоступлениюНаСклады(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыПринятые(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыПереданные(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗаказыПокупателей(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗаказыПоставщикам(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаРазмещениеЗаказов(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПотребностьВЗапасах(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасы(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыВРазрезеГТД(СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходы(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходыОтложенные(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходыНераспределенные(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходыКассовыйМетод(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаСуммовойУчетВРознице(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаУправленческий(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
	
	// ДисконтныеКарты
	СформироватьТаблицаПродажиПоДисконтнойКарте(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);

	// Серийные номера
	СформироватьТаблицаСерийныеНомера(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
	
	// Подарочные сертификаты
	СформироватьТаблицаПодарочныеСертификаты(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОплатаПодарочнымиСертификатами(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
	
	// Отчетность
	СформироватьТаблицаЗакупкиПоставщиковДляКУДиР(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
	
	// Взаиморасчеты
	СформироватьТаблицаОплатаДокументов(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаСуммыДокументовРегламентированныйУчет(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылкаПриходнаяНакладная, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если НЕ УправлениеНебольшойФирмойСервер.ВыполнитьКонтрольОстатков() Тогда
		Возврат;
	КонецЕсли;
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Возврат;
	КонецЕсли;
	// Конец МобильноеПриложение
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временные таблицы "ДвиженияЗапасыИзменение", "ДвиженияЗапасыНаСкладахИзменение", 
	// "ДвиженияЗапасыКПоступлениюНаСкладыИзменение", "ДвиженияЗапасыПереданныеИзменение",
	// "ДвиженияЗапасыПринятыеИзменение", "ДвиженияРазмещениеЗаказовИзменение",
	// "ДвиженияПотребностьВЗапасахИзменение" содержат записи, необходимо выполнить контроль 
	// реализации товаров.
	Если СтруктураВременныеТаблицы.ДвиженияЗапасыИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыНаСкладахИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыКПоступлениюНаСкладыИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыПереданныеИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыПринятыеИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияРазмещениеЗаказовИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗаказыПокупателейИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗаказыПоставщикамИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияПотребностьВЗапасахИзменение
		// Для режима зачета аванса Авто тоже выполняем контроль, т.к. может быть более поздняя оплата.
		ИЛИ СтруктураВременныеТаблицы.ДвиженияРасчетыСПоставщикамиИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияСуммовойУчетВРозницеИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыВРазрезеГТДИзменение
		Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияЗапасыНаСкладахИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗапасыНаСкладахИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.Ячейка КАК ЯчейкаПредставление,
		|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыНаСкладахИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыНаСкладах,
		|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыНаСкладах
		|ИЗ
		|	ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки(&МоментКонтроля, ) КАК ЗапасыНаСкладахОстатки
		|		ПО ДвиженияЗапасыНаСкладахИзменение.Организация = ЗапасыНаСкладахОстатки.Организация
		|			И ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница = ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыНаСкладахИзменение.Номенклатура = ЗапасыНаСкладахОстатки.Номенклатура
		|			И ДвиженияЗапасыНаСкладахИзменение.Характеристика = ЗапасыНаСкладахОстатки.Характеристика
		|			И ДвиженияЗапасыНаСкладахИзменение.Партия = ЗапасыНаСкладахОстатки.Партия
		|			И ДвиженияЗапасыНаСкладахИзменение.Ячейка = ЗапасыНаСкладахОстатки.Ячейка
		|			И (ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗапасыИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗапасыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
		|	ДвиженияЗапасыИзменение.СчетУчета КАК СчетУчетаПредставление,
		|	ДвиженияЗапасыИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗапасыИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияЗапасыИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияЗапасыИзменение.ЗаказПокупателя КАК ЗаказПокупателяПредставление,
		|	ЗапасыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) КАК СуммаОстатокЗапасы
		|ИЗ
		|	ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(&МоментКонтроля, ) КАК ЗапасыОстатки
		|		ПО ДвиженияЗапасыИзменение.Организация = ЗапасыОстатки.Организация
		|			И ДвиженияЗапасыИзменение.СтруктурнаяЕдиница = ЗапасыОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыИзменение.СчетУчета = ЗапасыОстатки.СчетУчета
		|			И ДвиженияЗапасыИзменение.Номенклатура = ЗапасыОстатки.Номенклатура
		|			И ДвиженияЗапасыИзменение.Характеристика = ЗапасыОстатки.Характеристика
		|			И ДвиженияЗапасыИзменение.Партия = ЗапасыОстатки.Партия
		|			И ДвиженияЗапасыИзменение.ЗаказПокупателя = ЗапасыОстатки.ЗаказПокупателя
		|			И (ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыПереданныеИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗапасыПереданныеИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗапасыПереданныеИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗапасыПереданныеИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияЗапасыПереданныеИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияЗапасыПереданныеИзменение.Контрагент КАК КонтрагентПредставление,
		|	ДвиженияЗапасыПереданныеИзменение.Договор КАК ДоговорПредставление,
		|	ДвиженияЗапасыПереданныеИзменение.Заказ КАК ЗаказПредставление,
		|	ДвиженияЗапасыПереданныеИзменение.ТипПриемаПередачи КАК ТипПриемаПередачиПредставление,
		|	ЗапасыПереданныеОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыПереданныеИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыПереданныеОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыПереданные,
		|	ЕСТЬNULL(ЗапасыПереданныеОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыПереданные,
		|	ЕСТЬNULL(ДвиженияЗапасыПереданныеИзменение.СуммаРасчетовИзменение, 0) + ЕСТЬNULL(ЗапасыПереданныеОстатки.СуммаРасчетовОстаток, 0) КАК СуммаРасчетовЗапасыПереданные,
		|	ЕСТЬNULL(ЗапасыПереданныеОстатки.СуммаРасчетовОстаток, 0) КАК СуммаРасчетовОстатокЗапасыПереданные
		|ИЗ
		|	ДвиженияЗапасыПереданныеИзменение КАК ДвиженияЗапасыПереданныеИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыПереданные.Остатки(&МоментКонтроля, ) КАК ЗапасыПереданныеОстатки
		|		ПО ДвиженияЗапасыПереданныеИзменение.Организация = ЗапасыПереданныеОстатки.Организация
		|			И ДвиженияЗапасыПереданныеИзменение.Номенклатура = ЗапасыПереданныеОстатки.Номенклатура
		|			И ДвиженияЗапасыПереданныеИзменение.Характеристика = ЗапасыПереданныеОстатки.Характеристика
		|			И ДвиженияЗапасыПереданныеИзменение.Партия = ЗапасыПереданныеОстатки.Партия
		|			И ДвиженияЗапасыПереданныеИзменение.Контрагент = ЗапасыПереданныеОстатки.Контрагент
		|			И ДвиженияЗапасыПереданныеИзменение.Договор = ЗапасыПереданныеОстатки.Договор
		|			И ДвиженияЗапасыПереданныеИзменение.Заказ = ЗапасыПереданныеОстатки.Заказ
		|			И ДвиженияЗапасыПереданныеИзменение.ТипПриемаПередачи = ЗапасыПереданныеОстатки.ТипПриемаПередачи
		|			И (ЕСТЬNULL(ЗапасыПереданныеОстатки.КоличествоОстаток, 0) < 0
		|				ИЛИ ЕСТЬNULL(ЗапасыПереданныеОстатки.СуммаРасчетовОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыПринятыеИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗапасыПринятыеИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Контрагент КАК КонтрагентПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Договор КАК ДоговорПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Заказ КАК ЗаказПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.ТипПриемаПередачи КАК ТипПриемаПередачиПредставление,
		|	ЗапасыПринятыеОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыПринятыеИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыПринятыеОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыПринятые,
		|	ЕСТЬNULL(ЗапасыПринятыеОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыПринятые,
		|	ЕСТЬNULL(ДвиженияЗапасыПринятыеИзменение.СуммаРасчетовИзменение, 0) + ЕСТЬNULL(ЗапасыПринятыеОстатки.СуммаРасчетовОстаток, 0) КАК СуммаРасчетовЗапасыПринятые,
		|	ЕСТЬNULL(ЗапасыПринятыеОстатки.СуммаРасчетовОстаток, 0) КАК СуммаРасчетовОстатокЗапасыПринятые
		|ИЗ
		|	ДвиженияЗапасыПринятыеИзменение КАК ДвиженияЗапасыПринятыеИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыПринятые.Остатки(&МоментКонтроля, ) КАК ЗапасыПринятыеОстатки
		|		ПО ДвиженияЗапасыПринятыеИзменение.Организация = ЗапасыПринятыеОстатки.Организация
		|			И ДвиженияЗапасыПринятыеИзменение.Номенклатура = ЗапасыПринятыеОстатки.Номенклатура
		|			И ДвиженияЗапасыПринятыеИзменение.Характеристика = ЗапасыПринятыеОстатки.Характеристика
		|			И ДвиженияЗапасыПринятыеИзменение.Партия = ЗапасыПринятыеОстатки.Партия
		|			И ДвиженияЗапасыПринятыеИзменение.Контрагент = ЗапасыПринятыеОстатки.Контрагент
		|			И ДвиженияЗапасыПринятыеИзменение.Договор = ЗапасыПринятыеОстатки.Договор
		|			И ДвиженияЗапасыПринятыеИзменение.Заказ = ЗапасыПринятыеОстатки.Заказ
		|			И ДвиженияЗапасыПринятыеИзменение.ТипПриемаПередачи = ЗапасыПринятыеОстатки.ТипПриемаПередачи
		|			И (ЕСТЬNULL(ЗапасыПринятыеОстатки.КоличествоОстаток, 0) < 0
		|				ИЛИ ЕСТЬNULL(ЗапасыПринятыеОстатки.СуммаРасчетовОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗаказыПокупателейИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗаказыПокупателейИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.ЗаказПокупателя КАК ЗаказПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ЗаказыПокупателейОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗаказыПокупателейИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК ОстатокЗаказыПокупателей,
		|	ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗаказыПокупателей
		|ИЗ
		|	ДвиженияЗаказыПокупателейИзменение КАК ДвиженияЗаказыПокупателейИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&МоментКонтроля, ) КАК ЗаказыПокупателейОстатки
		|		ПО ДвиженияЗаказыПокупателейИзменение.Организация = ЗаказыПокупателейОстатки.Организация
		|			И ДвиженияЗаказыПокупателейИзменение.ЗаказПокупателя = ЗаказыПокупателейОстатки.ЗаказПокупателя
		|			И ДвиженияЗаказыПокупателейИзменение.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
		|			И ДвиженияЗаказыПокупателейИзменение.Характеристика = ЗаказыПокупателейОстатки.Характеристика
		|			И (ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗаказыПоставщикамИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗаказыПоставщикамИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗаказыПоставщикамИзменение.ЗаказПоставщику КАК ЗаказПоставщикуПредставление,
		|	ДвиженияЗаказыПоставщикамИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗаказыПоставщикамИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ЗаказыПоставщикамОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗаказыПоставщикамИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0) КАК ОстатокЗаказыПоставщикам,
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗаказыПоставщикам
		|ИЗ
		|	ДвиженияЗаказыПоставщикамИзменение КАК ДвиженияЗаказыПоставщикамИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(&МоментКонтроля, ) КАК ЗаказыПоставщикамОстатки
		|		ПО ДвиженияЗаказыПоставщикамИзменение.Организация = ЗаказыПоставщикамОстатки.Организация
		|			И ДвиженияЗаказыПоставщикамИзменение.ЗаказПоставщику = ЗаказыПоставщикамОстатки.ЗаказПоставщику
		|			И ДвиженияЗаказыПоставщикамИзменение.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура
		|			И ДвиженияЗаказыПоставщикамИзменение.Характеристика = ЗаказыПоставщикамОстатки.Характеристика
		|			И (ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияПотребностьВЗапасахИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияПотребностьВЗапасахИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияПотребностьВЗапасахИзменение.ТипДвижения КАК ТипДвиженияПредставление,
		|	ДвиженияПотребностьВЗапасахИзменение.ЗаказПокупателя КАК ЗаказПокупателяПредставление,
		|	ДвиженияПотребностьВЗапасахИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияПотребностьВЗапасахИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ПотребностьВЗапасахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияПотребностьВЗапасахИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ПотребностьВЗапасахОстатки.КоличествоОстаток, 0) КАК ОстатокПотребностьВЗапасах,
		|	ЕСТЬNULL(ПотребностьВЗапасахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокПотребностьВЗапасах
		|ИЗ
		|	ДвиженияПотребностьВЗапасахИзменение КАК ДвиженияПотребностьВЗапасахИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПотребностьВЗапасах.Остатки(&МоментКонтроля, ) КАК ПотребностьВЗапасахОстатки
		|		ПО ДвиженияПотребностьВЗапасахИзменение.Организация = ПотребностьВЗапасахОстатки.Организация
		|			И ДвиженияПотребностьВЗапасахИзменение.ТипДвижения = ПотребностьВЗапасахОстатки.ТипДвижения
		|			И ДвиженияПотребностьВЗапасахИзменение.ЗаказПокупателя = ПотребностьВЗапасахОстатки.ЗаказПокупателя
		|			И ДвиженияПотребностьВЗапасахИзменение.Номенклатура = ПотребностьВЗапасахОстатки.Номенклатура
		|			И ДвиженияПотребностьВЗапасахИзменение.Характеристика = ПотребностьВЗапасахОстатки.Характеристика
		|			И (ЕСТЬNULL(ПотребностьВЗапасахОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияРазмещениеЗаказовИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияРазмещениеЗаказовИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияРазмещениеЗаказовИзменение.ЗаказПокупателя КАК ЗаказПокупателяПредставление,
		|	ДвиженияРазмещениеЗаказовИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияРазмещениеЗаказовИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияРазмещениеЗаказовИзменение.ИсточникОбеспечения КАК ИсточникОбеспеченияПредставление,
		|	РазмещениеЗаказовОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияРазмещениеЗаказовИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) КАК ОстатокРазмещениеЗаказов,
		|	ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокРазмещениеЗаказов
		|ИЗ
		|	ДвиженияРазмещениеЗаказовИзменение КАК ДвиженияРазмещениеЗаказовИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(&МоментКонтроля, ) КАК РазмещениеЗаказовОстатки
		|		ПО ДвиженияРазмещениеЗаказовИзменение.Организация = РазмещениеЗаказовОстатки.Организация
		|			И ДвиженияРазмещениеЗаказовИзменение.ЗаказПокупателя = РазмещениеЗаказовОстатки.ЗаказПокупателя
		|			И ДвиженияРазмещениеЗаказовИзменение.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
		|			И ДвиженияРазмещениеЗаказовИзменение.Характеристика = РазмещениеЗаказовОстатки.Характеристика
		|			И ДвиженияРазмещениеЗаказовИзменение.ИсточникОбеспечения = РазмещениеЗаказовОстатки.ИсточникОбеспечения
		|			И (ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияРасчетыСПоставщикамиИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияРасчетыСПоставщикамиИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияРасчетыСПоставщикамиИзменение.Контрагент КАК КонтрагентПредставление,
		|	ДвиженияРасчетыСПоставщикамиИзменение.Договор КАК ДоговорПредставление,
		|	ДвиженияРасчетыСПоставщикамиИзменение.Договор.ВалютаРасчетов КАК ВалютаПредставление,
		|	ДвиженияРасчетыСПоставщикамиИзменение.Документ КАК ДокументПредставление,
		|	ДвиженияРасчетыСПоставщикамиИзменение.Заказ КАК ЗаказПредставление,
		|	ДвиженияРасчетыСПоставщикамиИзменение.ТипРасчетов КАК ТипРасчетовПредставление,
		|	ЛОЖЬ КАК ДвиженияДенежныхДокументов,
		|	ДвиженияРасчетыСПоставщикамиИзменение.СуммаПередЗаписью КАК СуммаПередЗаписью,
		|	ДвиженияРасчетыСПоставщикамиИзменение.СуммаПриЗаписи КАК СуммаПриЗаписи,
		|	ДвиженияРасчетыСПоставщикамиИзменение.СуммаИзменение КАК СуммаИзменение,
		|	ДвиженияРасчетыСПоставщикамиИзменение.СуммаВалПередЗаписью КАК СуммаВалПередЗаписью,
		|	ДвиженияРасчетыСПоставщикамиИзменение.СуммаВалПриЗаписи КАК СуммаВалПриЗаписи,
		|	ДвиженияРасчетыСПоставщикамиИзменение.СуммаВалИзменение КАК СуммаВалИзменение,
		|	ДвиженияРасчетыСПоставщикамиИзменение.СуммаВалПриЗаписи - ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаВалОстаток, 0) КАК СуммаВыданныхАвансов,
		|	ДвиженияРасчетыСПоставщикамиИзменение.СуммаВалИзменение + ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаВалОстаток, 0) КАК СуммаНепогашеннойЗадолженности,
		|	ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
		|	ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток,
		|	ДвиженияРасчетыСПоставщикамиИзменение.ТипРасчетов КАК ТипРасчетов
		|ИЗ
		|	ДвиженияРасчетыСПоставщикамиИзменение КАК ДвиженияРасчетыСПоставщикамиИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.Остатки(&МоментКонтроля, ) КАК РасчетыСПоставщикамиОстатки
		|		ПО ДвиженияРасчетыСПоставщикамиИзменение.Организация = РасчетыСПоставщикамиОстатки.Организация
		|			И ДвиженияРасчетыСПоставщикамиИзменение.Контрагент = РасчетыСПоставщикамиОстатки.Контрагент
		|			И ДвиженияРасчетыСПоставщикамиИзменение.Договор = РасчетыСПоставщикамиОстатки.Договор
		|			И ДвиженияРасчетыСПоставщикамиИзменение.Документ = РасчетыСПоставщикамиОстатки.Документ
		|			И ДвиженияРасчетыСПоставщикамиИзменение.Заказ = РасчетыСПоставщикамиОстатки.Заказ
		|			И ДвиженияРасчетыСПоставщикамиИзменение.ТипРасчетов = РасчетыСПоставщикамиОстатки.ТипРасчетов
		|			И (ВЫБОР
		|				КОГДА ДвиженияРасчетыСПоставщикамиИзменение.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
		|					ТОГДА ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаВалОстаток, 0) > 0
		|				ИНАЧЕ ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаВалОстаток, 0) < 0
		|			КОНЕЦ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияСуммовойУчетВРозницеИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияСуммовойУчетВРозницеИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияСуммовойУчетВРозницеИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
		|	ДвиженияСуммовойУчетВРозницеИзменение.СтруктурнаяЕдиница.РозничныйВидЦен.ВалютаЦены КАК ВалютаПредставление,
		|	ЕСТЬNULL(СуммовойУчетВРозницеОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
		|	ДвиженияСуммовойУчетВРозницеИзменение.СуммаВалИзменение + ЕСТЬNULL(СуммовойУчетВРозницеОстатки.СуммаВалОстаток, 0) КАК ОстатокВРознице,
		|	ДвиженияСуммовойУчетВРозницеИзменение.СуммаПередЗаписью КАК СуммаПередЗаписью,
		|	ДвиженияСуммовойУчетВРозницеИзменение.СуммаПриЗаписи КАК СуммаПриЗаписи,
		|	ДвиженияСуммовойУчетВРозницеИзменение.СуммаИзменение КАК СуммаИзменение,
		|	ДвиженияСуммовойУчетВРозницеИзменение.СуммаВалПередЗаписью КАК СуммаВалПередЗаписью,
		|	ДвиженияСуммовойУчетВРозницеИзменение.СуммаВалПриЗаписи КАК СуммаВалПриЗаписи,
		|	ДвиженияСуммовойУчетВРозницеИзменение.СуммаВалИзменение КАК СуммаВалИзменение,
		|	ДвиженияСуммовойУчетВРозницеИзменение.СебестоимостьПередЗаписью КАК СебестоимостьПередЗаписью,
		|	ДвиженияСуммовойУчетВРозницеИзменение.СебестоимостьПриЗаписи КАК СебестоимостьПриЗаписи,
		|	ДвиженияСуммовойУчетВРозницеИзменение.СебестоимостьИзменение КАК СебестоимостьИзменение
		|ИЗ
		|	ДвиженияСуммовойУчетВРозницеИзменение КАК ДвиженияСуммовойУчетВРозницеИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СуммовойУчетВРознице.Остатки(&МоментКонтроля, ) КАК СуммовойУчетВРозницеОстатки
		|		ПО ДвиженияСуммовойУчетВРозницеИзменение.Организация = СуммовойУчетВРозницеОстатки.Организация
		|			И ДвиженияСуммовойУчетВРозницеИзменение.СтруктурнаяЕдиница = СуммовойУчетВРозницеОстатки.СтруктурнаяЕдиница
		|			И (ЕСТЬNULL(СуммовойУчетВРозницеОстатки.СуммаВалОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыВРазрезеГТДИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД) КАК НомерГТДПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения) КАК СтранаПроисхожденияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыВРазрезеГТДОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыВРазрезеГТДИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыВРазрезеГТД,
		|	ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыВРазрезеГТД
		|ИЗ
		|	ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыВРазрезеГТД.Остатки(
		|				&МоментКонтроля,
		|				(Организация, НомерГТД, Номенклатура, Характеристика, Партия, СтранаПроисхождения) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД КАК НомерГТД,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения КАК СтранаПроисхождения
		|					ИЗ
		|						ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение)) КАК ЗапасыВРазрезеГТДОстатки
		|		ПО ДвиженияЗапасыВРазрезеГТДИзменение.Организация = ЗапасыВРазрезеГТДОстатки.Организация
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД = ЗапасыВРазрезеГТДОстатки.НомерГТД
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура = ЗапасыВРазрезеГТДОстатки.Номенклатура
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика = ЗапасыВРазрезеГТДОстатки.Характеристика
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Партия = ЗапасыВРазрезеГТДОстатки.Партия
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения = ЗапасыВРазрезеГТДОстатки.СтранаПроисхождения
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Если НЕ МассивРезультатов[0].Пустой()
			ИЛИ НЕ МассивРезультатов[1].Пустой()
			ИЛИ НЕ МассивРезультатов[2].Пустой()
			ИЛИ НЕ МассивРезультатов[3].Пустой()
			ИЛИ НЕ МассивРезультатов[4].Пустой()
			ИЛИ НЕ МассивРезультатов[5].Пустой()
			ИЛИ НЕ МассивРезультатов[6].Пустой()
			ИЛИ НЕ МассивРезультатов[7].Пустой()
			ИЛИ НЕ МассивРезультатов[8].Пустой()
			ИЛИ НЕ МассивРезультатов[9].Пустой()
			ИЛИ НЕ МассивРезультатов[10].Пустой()
			Тогда
			
			ДокументОбъектПриходнаяНакладная = ДокументСсылкаПриходнаяНакладная.ПолучитьОбъект()
			
		КонецЕсли;
		
		// Отрицательный остаток запасов на складе.
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[0].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасыНаСкладах(ДокументОбъектПриходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток учета запасов.
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасы(ДокументОбъектПриходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток запасов переданных.
		Если НЕ МассивРезультатов[2].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасыПереданные(ДокументОбъектПриходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток запасов принятых.
		Если НЕ МассивРезультатов[3].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[3].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасыПринятые(ДокументОбъектПриходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по заказу покупателя.
		Если НЕ МассивРезультатов[4].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[4].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗаказыПокупателей(ДокументОбъектПриходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по заказу поставщику.
		Если НЕ МассивРезультатов[5].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[5].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗаказыПоставщикам(ДокументОбъектПриходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток потребностей в запасах.
		Если НЕ МассивРезультатов[6].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[6].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструПотребностьВЗапасах(ДокументОбъектПриходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток размещение заказов.
		Если НЕ МассивРезультатов[7].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[7].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструРазмещениеЗаказов(ДокументОбъектПриходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по расчетам с поставщиками.
		Если НЕ МассивРезультатов[8].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[8].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструРасчетыСПоставщиками(ДокументОбъектПриходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по суммовому учету в рознице.
		Если НЕ МассивРезультатов[9].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[9].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструСуммовойУчетВРознице(ДокументОбъектПриходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по остаткам запасов в разрезе номеров ГТД.
		Если Константы.КонтролироватьОстаткиПоНомерамГТД.Получить()
			И НЕ МассивРезультатов[10].Пустой() Тогда
			
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[10].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасыВРазрезеГТД(ДокументОбъектПриходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКонтроль()

// Делает записи в регистр сведений Цены номенклатуры контрагентов.
//
Процедура ЗарегистрироватьЦеныПоставщика(ДокументСсылкаПриходнаяНакладная, Отказ) Экспорт
	
	Если НЕ ДокументСсылкаПриходнаяНакладная.РегистрироватьЦеныПоставщика
		ИЛИ Отказ = Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ДокументСсылкаПриходнаяНакладная.Проведен Тогда
		
		УдалитьЦеныПоставщика(ДокументСсылкаПриходнаяНакладная);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылкаПриходнаяНакладная.ВидЦенКонтрагента) Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	// Две одинаковые позиции с разными ед. измерений приводят к ошибке записи регистра сведений
	// поэтому сразу выбираем уникальную номенклатуру + характеристику, а потом подтягиваем к строкам остальную информацию
	Запрос.Текст =
	"Выбрать Различные
	|	ТаблицаЦены.Ссылка.ВидЦенКонтрагента КАК ВидЦенКонтрагента
	|	,Минимум(ТаблицаЦены.НомерСтроки) КАК НомерСтроки
	|	,ТаблицаЦены.Номенклатура КАК Номенклатура
	|	,ТаблицаЦены.Характеристика КАК Характеристика
	|Поместить НоменклатураБезДублей
	|Из Документ.ПриходнаяНакладная.Запасы КАК ТаблицаЦены
	|Где 
	|	ТаблицаЦены.Ссылка = &Ссылка
	|	И ТаблицаЦены.Ссылка.РегистрироватьЦеныПоставщика
	|	И ТаблицаЦены.Цена <> 0
	|Сгруппировать по
	|	ТаблицаЦены.Ссылка.ВидЦенКонтрагента
	|	,ТаблицаЦены.Номенклатура
	|	,ТаблицаЦены.Характеристика
	|;
	|ВЫБРАТЬ
	|	ТаблицаЦены.Ссылка.Дата КАК Период
	|	,НоменклатураБезДублей.ВидЦенКонтрагента КАК ВидЦенКонтрагента
	|	,НоменклатураБезДублей.Номенклатура КАК Номенклатура
	|	,НоменклатураБезДублей.Характеристика КАК Характеристика
	|	,ВЫБОР
	|		КОГДА ТаблицаЦены.Ссылка.СуммаВключаетНДС = ТаблицаЦены.Ссылка.ВидЦенКонтрагента.ЦенаВключаетНДС
	|			ТОГДА ЕСТЬNULL(ТаблицаЦены.Цена * КурсВалютыДокумента.Курс * КурсВалютыВидЦен.Кратность / (КурсВалютыВидЦен.Курс * КурсВалютыДокумента.Кратность), 0)
	|		КОГДА ТаблицаЦены.Ссылка.СуммаВключаетНДС > ТаблицаЦены.Ссылка.ВидЦенКонтрагента.ЦенаВключаетНДС
	|			ТОГДА ЕСТЬNULL((ТаблицаЦены.Цена * КурсВалютыДокумента.Курс * КурсВалютыВидЦен.Кратность / (КурсВалютыВидЦен.Курс * КурсВалютыДокумента.Кратность)) * 100 / (100 + ТаблицаЦены.СтавкаНДС.Ставка), 0)
	|		ИНАЧЕ ЕСТЬNULL((ТаблицаЦены.Цена * КурсВалютыДокумента.Курс * КурсВалютыВидЦен.Кратность / (КурсВалютыВидЦен.Курс * КурсВалютыДокумента.Кратность)) * (100 + ТаблицаЦены.СтавкаНДС.Ставка) / 100, 0)
	|	КОНЕЦ КАК Цена
	|	,ТаблицаЦены.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	,ИСТИНА КАК Актуальность
	|	,ТаблицаЦены.Ссылка КАК ДокументРегистратор
	|	,ТаблицаЦены.Ссылка.Автор КАК Автор
	|Из
	|	НоменклатураБезДублей КАК НоменклатураБезДублей
	|		Левое соединение Документ.ПриходнаяНакладная.Запасы КАК ТаблицаЦены
	|		По НоменклатураБезДублей.НомерСтроки = ТаблицаЦены.НомерСтроки
	|		Левое соединение РегистрСведений.ЦеныНоменклатурыКонтрагентов КАК ЦеныНоменклатурыКонтрагентов
	|		По ТаблицаЦены.Ссылка.ВидЦенКонтрагента = ЦеныНоменклатурыКонтрагентов.ВидЦенКонтрагента
	|			И ТаблицаЦены.Номенклатура = ЦеныНоменклатурыКонтрагентов.Номенклатура
	|			И ТаблицаЦены.Характеристика = ЦеныНоменклатурыКонтрагентов.Характеристика
	|			И (НАЧАЛОПЕРИОДА(ТаблицаЦены.Ссылка.Дата, ДЕНЬ) = ЦеныНоменклатурыКонтрагентов.Период)
	|			И ТаблицаЦены.Ссылка.Дата <= ЦеныНоменклатурыКонтрагентов.ДокументРегистратор.Дата
	|		Левое соединение РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, ) КАК КурсВалютыВидЦен
	|		По ТаблицаЦены.Ссылка.ВидЦенКонтрагента.ВалютаЦены = КурсВалютыВидЦен.Валюта,
	|			РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|ГДЕ
	|	ТаблицаЦены.Ссылка.РегистрироватьЦеныПоставщика
	|	И ЦеныНоменклатурыКонтрагентов.ВидЦенКонтрагента ЕСТЬ NULL 
	|	И ТаблицаЦены.Ссылка = &Ссылка
	|	И ТаблицаЦены.Цена <> 0";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаПриходнаяНакладная);
	Запрос.УстановитьПараметр("ВалютаДокумента", ДокументСсылкаПриходнаяНакладная.ВалютаДокумента);
	Запрос.УстановитьПараметр("ДатаОбработки", ДокументСсылкаПриходнаяНакладная.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Запись набора РС
	НаборЗаписейРегистра = РегистрыСведений.ЦеныНоменклатурыКонтрагентов.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Отбор.Период.Установить(ДокументСсылкаПриходнаяНакладная.Дата);
	НаборЗаписейРегистра.Отбор.ВидЦенКонтрагента.Установить(ДокументСсылкаПриходнаяНакладная.ВидЦенКонтрагента);
	НаборЗаписейРегистра.Прочитать();
	
	ТаблицаНовыеЦены	= РезультатЗапроса.Выгрузить();
	ТаблицаТекущиеЦены	= НаборЗаписейРегистра.Выгрузить();
	ЦенообразованиеСервер.ОтразитьЦеныКонтрагентов(ТаблицаНовыеЦены, ТаблицаТекущиеЦены, НаборЗаписейРегистра);
	
КонецПроцедуры // ЗарегистрироватьЦеныПоставщика()

// Удаляет записи из регистра сведений Цены номенклатуры контрагентов.
//
Процедура УдалитьЦеныПоставщика(ДокументСсылкаПриходнаяНакладная) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыКонтрагентов.Период,
	|	ЦеныНоменклатурыКонтрагентов.ВидЦенКонтрагента,
	|	ЦеныНоменклатурыКонтрагентов.Номенклатура,
	|	ЦеныНоменклатурыКонтрагентов.Характеристика
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыКонтрагентов КАК ЦеныНоменклатурыКонтрагентов
	|ГДЕ
	|	ЦеныНоменклатурыКонтрагентов.ДокументРегистратор = &ДокументРегистратор";
	
	Запрос.УстановитьПараметр("ДокументРегистратор", ДокументСсылкаПриходнаяНакладная);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаЗаписей = РезультатЗапроса.Выгрузить();	
	
	Для каждого СтрокаТаблицы Из ТаблицаЗаписей Цикл
		НаборЗаписей = РегистрыСведений.ЦеныНоменклатурыКонтрагентов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(СтрокаТаблицы.Период);
		НаборЗаписей.Отбор.ВидЦенКонтрагента.Установить(СтрокаТаблицы.ВидЦенКонтрагента);
		НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТаблицы.Номенклатура);
		НаборЗаписей.Отбор.Характеристика.Установить(СтрокаТаблицы.Характеристика);
		НаборЗаписей.Записать();
	КонецЦикла;	

КонецПроцедуры // УдалитьЦеныПоставщика()

Функция СообщениеКПередачеXML(ДокументСсылка, Операция) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных Тогда
		Возврат ВозвратТоваровОтКлиентаXML(ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхПолучениеКвитанции Тогда
		Возврат ИнтеграцияГИСМВызовСервера.ЗапросКвитанцииОФиксацииПоСсылкеXML(ДокументСсылка, Перечисления.ОперацииОбменаГИСМ.ПередачаДанных);
	КонецЕсли;
	
КонецФункции

Функция ВозвратТоваровОтКлиентаXML(ДокументСсылка) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла КАК Ссылка,
	|	КОЛИЧЕСТВО(ГИСМПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	Справочник.ГИСМПрисоединенныеФайлы КАК ГИСМПрисоединенныеФайлы
	|ГДЕ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И ГИСМПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииОбменаГИСМ.ПередачаДанных)
	|	И ГИСМПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийГИСМ.Исходящее)
	|СГРУППИРОВАТЬ ПО
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровОтКлиента.Дата                       КАК Дата,
	|	ВозвратТоваровОтКлиента.Номер                      КАК Номер,
	|	ЕСТЬNULL(ВременнаяТаблица.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	ВозвратТоваровОтКлиента.Организация                КАК Организация,
	|	ВозвратТоваровОтКлиента.Подразделение              КАК Подразделение
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ВозвратТоваровОтКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ВременнаяТаблица
	|		ПО ВозвратТоваровОтКлиента.Ссылка = ВременнаяТаблица.Ссылка
	|ГДЕ
	|	ВозвратТоваровОтКлиента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяЗапасы.НомерСтроки        КАК НомерСтроки,
	|	ПриходнаяНакладнаяЗапасы.Номенклатура       КАК Номенклатура,
	|	ПриходнаяНакладнаяЗапасы.Характеристика     КАК Характеристика,
	|	Серии.СерийныйНомер.НомерКиЗГИСМ КАК НомерКиЗ,
	|	Серии.СерийныйНомер.RFIDTID      КАК TID,
	|	Серии.СерийныйНомер.RFIDEPC      КАК EPC
	|ИЗ
	|	Документ.ПриходнаяНакладная.СерийныеНомера КАК Серии
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
	|		ПО Серии.КлючСвязи = ПриходнаяНакладнаяЗапасы.КлючСвязи
	|			И  ПриходнаяНакладнаяЗапасы.Ссылка = Серии.Ссылка
	|ГДЕ
	|	Серии.Ссылка = &Ссылка
	|	И ПриходнаяНакладнаяЗапасы.Номенклатура.ВидМаркировки <> ЗНАЧЕНИЕ(Перечисление.ВидыМаркировки.НеМаркируется)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Серии.НомерСтроки");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка = Результат[1].Выбрать();
	Товары = Результат[2].Выгрузить();
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
			Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхВозвратОтРозничногоПокупателя, ДокументСсылка);
		СообщениеXML.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	РеквизитыОгранизации = ИнтеграцияГИСМВызовСервера.ИННКППGLNОрганизации(Шапка.Организация, Шапка.Подразделение);
	
	СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхВозвратОтРозничногоПокупателя, ДокументСсылка, НомерВерсии);
	
	ИмяТипа   = "query";
	ИмяПакета = "return_signs";
	
	ПередачаДанных = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа);
	
	ВозвратТоваров = ИнтеграцияГИСМ.ОбъектXDTO(ИмяПакета);
	ВозвратТоваров.action_id  = ВозвратТоваров.action_id;
	
	Попытка
		ВозвратТоваров.sender_gln = РеквизитыОгранизации.GLN;
	Исключение
		ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиНеЗаполненGLNОрганизации(СообщениеXML, РеквизитыОгранизации.GLN, Шапка);
	КонецПопытки;
	
	ВозвратТоваров.return_doc_num  = Шапка.Номер;
	ВозвратТоваров.return_doc_date = Шапка.Дата;
	
	ХранилищеВременныхДат = Новый Соответствие;
	ИнтеграцияГИСМ.УстановитьДатуСЧасовымПоясом(
		ВозвратТоваров,
		"return_date",
		Шапка.Дата,
		ХранилищеВременныхДат);
	
	ВозвратТоваров.returns = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ВозвратТоваров, "returns");
	ВозвратТоваров.returns.signs = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ВозвратТоваров.returns, "signs");
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		НоваяСтрока = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ВозвратТоваров.returns.signs, "sign");
		
		Если ЗначениеЗаполнено(СтрокаТЧ.НомерКиЗ) Тогда
			
			НоваяСтрока.sign_num = СтрокаТЧ.НомерКиЗ;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.TID) Тогда
			
			НоваяСтрока.sign_tid = СтрокаТЧ.TID;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.EPC) Тогда
			
			Попытка
				НоваяСтрока.sign_sgtin = МенеджерОборудованияКлиентСервер.ПреобразоватьHEXВБинарнуюСтроку(СтрокаТЧ.EPC);
			Исключение
				ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(
					СообщениеXML,
					СтрШаблон(НСтр("ru = 'Для номенклатуры %1 указан некорректный EPC ""%2"".'"),
						ИнтеграцияГИСМПереопределяемый.ПредставлениеНоменклатуры(СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика),
						СтрокаТЧ.EPC));
			КонецПопытки;
			
		КонецЕсли;
		
		ВозвратТоваров.returns.signs.sign.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	ПередачаДанных.version    = ПередачаДанных.version;
	ПередачаДанных[ИмяПакета] = ВозвратТоваров;
	
	ТекстСообщенияXML = ИнтеграцияГИСМ.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа);
	ТекстСообщенияXML = ИнтеграцияГИСМ.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	СообщениеXML.ТекстСообщенияXML  = ТекстСообщенияXML;
	СообщениеXML.КонвертSOAP = ИнтеграцияГИСМВызовСервера.ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML);
	
	СообщениеXML.ТипСообщения = Перечисления.ТипыСообщенийГИСМ.Исходящее;
	СообщениеXML.Организация  = Шапка.Организация;
	СообщениеXML.Операция     = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных;
	СообщениеXML.Документ     = ДокументСсылка;
	СообщениеXML.Версия       = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

#Область ДисконтныеКарты

// Формирует таблицу значений, содержащую данные для проведения по регистру ПродажиПоДисконтнойКарте.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажиПоДисконтнойКарте(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Если ДокументСсылкаПриходнаяНакладная.ВидОперации <> Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнойКарте", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	Если ДокументСсылкаПриходнаяНакладная.ДисконтнаяКарта.Пустая() Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнойКарте", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст = ДисконтныеКартыСервер.ТекстЗапросаПродажиПоДисконтнойКарте("ПриходнаяНакладная");
	Запрос.УстановитьПараметр("ПроцентСкидки", УправлениеНебольшойФирмойСервер.ВычислитьПроцентСкидкиПоДисконтнойКарте(СтруктураДополнительныеСвойства.ДляПроведения.Дата,
																													   ДокументСсылкаПриходнаяНакладная.ДисконтнаяКарта));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнойКарте", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажиПоДисконтнойКарте()

#КонецОбласти

#Область РаботаССерийнымиНомерами

// Формирует таблицу значений, содержащую данные для проведения по регистру СерийныеНомераГарантии.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСерийныеНомера(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Если ДокументСсылка.СерийныеНомера.Количество()=0 Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераОстатки", Новый ТаблицаЗначений);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераГарантии", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|				ИЛИ ВременнаяТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера)
	|				ИЛИ ВременнаяТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика)
	|				ИЛИ ВременнаяТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратСОтветхранения)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОперацииСерийныхНомеров.Возврат)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОперацииСерийныхНомеров.Приход)
	|	КОНЕЦ КАК Операция,
	|	ВременнаяТаблицаЗапасы.Период КАК ДатаСобытия,
	|	СерийныеНомера.СерийныйНомер КАК СерийныйНомер,
	|	ВременнаяТаблицаЗапасы.Организация КАК Организация,
	|	ВременнаяТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаЗапасы.Партия КАК Партия,
	|	ВременнаяТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВременнаяТаблицаЗапасы.Ячейка КАК Ячейка,
	|	ВременнаяТаблицаЗапасы.ОрдерныйСклад КАК ОрдерныйСклад,
	|	1 КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСерийныеНомера КАК СерийныеНомера
	|		ПО ВременнаяТаблицаЗапасы.КлючСвязи = СерийныеНомера.КлючСвязи";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераГарантии", РезультатЗапроса);
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ОстаткиСерийныхНомеров Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераОстатки", РезультатЗапроса);
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераОстатки", Новый ТаблицаЗначений);
	КонецЕсли; 
	
КонецПроцедуры // СформироватьТаблицаСерийныеНомера()

#КонецОбласти

#Область ДействияПриОбменеГИСМ

Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	НовыйСтатус        = Неопределено;
	ДальнейшееДействие = Неопределено;
	
	ИспользоватьАвтоматическийОбмен = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхГИСМ");
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных Тогда
		НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.КПередаче;
		Если ИспользоватьАвтоматическийОбмен Тогда
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПередачуДанныхРегламентнымЗаданием;
		Иначе
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ВыполнитеОбмен;
		КонецЕсли;
	КонецЕсли;
	
	Если НовыйСтатус = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РегистрыСведений.СтатусыИнформированияГИСМ.ОбновитьСтатус(
		ДокументСсылка,
		НовыйСтатус,
		ДальнейшееДействие);
	
	Возврат НовыйСтатус;
	
КонецФункции

Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	НовыйСтатус     = Неопределено;
	ДальнейшееДействие = Неопределено;
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных Тогда
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.Передано;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПолучениеКвитанцииОФиксации;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Отклонено
			ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Ошибка Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.ОтклоненоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхПолучениеКвитанции Тогда
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.ПринятоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Отклонено
			ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Ошибка Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.ОтклоненоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НовыйСтатус = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РегистрыСведений.СтатусыИнформированияГИСМ.ОбновитьСтатус(ДокументСсылка, НовыйСтатус, ДальнейшееДействие);
	
	Возврат НовыйСтатус;
	
КонецФункции

#КонецОбласти

#Область РаботаСПодарочнымиСертификатами

Процедура СформироватьТаблицаПодарочныеСертификаты(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВременнаяТаблицаЗапасы.Номенклатура КАК ПодарочныйСертификат,
	|	СерийныеНомера.СерийныйНомер КАК НомерСертификата,
	|	-ВременнаяТаблицаЗапасы.НоминалСертификата КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСерийныеНомера КАК СерийныеНомера
	|		ПО ВременнаяТаблицаЗапасы.КлючСвязи = СерийныеНомера.КлючСвязи
	|			И (&ИспользоватьСерийныеНомера)
	|ГДЕ
	|	ВременнаяТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И ВременнаяТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаПредоплата.Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ВременнаяТаблицаПредоплата.Документ,
	|	ВременнаяТаблицаПредоплата.НомерСертификата,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаПредоплата.ЧастичноеПогашение
	|			ТОГДА -ВременнаяТаблицаПредоплата.СуммаСертификата
	|		ИНАЧЕ -ВременнаяТаблицаПредоплата.НоминалСертификата
	|	КОНЕЦ
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ВременнаяТаблицаПредоплата
	|ГДЕ
	|	ВременнаяТаблицаПредоплата.ОплатаСертификатом";
	Запрос.УстановитьПараметр("ИспользоватьСерийныеНомера", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерийныеНомера);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПодарочныеСертификаты", РезультатЗапроса);
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру ОплатаПодарочнымиСертификатами.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаПодарочнымиСертификатами(ДокументСсылкаПриходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст = РаботаСПодарочнымиСертификатами.СформироватьТекстЗапросаПоОплатеПодарочнымиСертификатами(Истина, Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаПодарочнымиСертификатами", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаОплатаПодарочнымиСертификатами()

#Конецобласти

#Область ЗагрузкаДанныхИзВнешнегоИсточника

Процедура ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт
	
	//
	// Для группы полей действует правило: хотя бы одно поле в группе должно быть выбрано в колонках
	//
	
	ПолноеИмяОбъектаЗаполнения = НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;
	
	ОписаниеТиповСтрока25 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25));
	ОписаниеТиповСтрока30 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(30));
	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	ОписаниеТиповСтрока150 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(150));
	ОписаниеТиповСтрока200 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200));
	ОписаниеТиповСтрока1000 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000));
	ОписаниеТиповЧисло15_2 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло15_3 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	
	ЭтоЗапасы = (ПолноеИмяОбъектаЗаполнения = "Документ.ПриходнаяНакладная.ТабличнаяЧасть.Запасы");
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Штрихкод", "Штрихкод", ОписаниеТиповСтрока200, ОписаниеТиповКолонка, "Номенклатура", 1, , Истина, ЭтоЗапасы);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Артикул", "Артикул", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Номенклатура", 2, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименование", "Номенклатура (наименование)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Номенклатура", 3, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименованиеПолное","Номенклатура (полное наименование)", ОписаниеТиповСтрока1000, ОписаниеТиповКолонка, "Номенклатура", 5, , Истина);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Содержание", "Содержание", ОписаниеТиповСтрока1000, ОписаниеТиповСтрока1000, , , , , НастройкиЗагрузкиДанных.СодержаниеВидимо);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Характеристика", "Характеристика (наименование)", ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Партия", "Партия (наименование)", ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Количество", "Количество", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_3, , , Истина);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения, СправочникСсылка.ЕдиницыИзмерения");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЕдиницаИзмерения", "Ед. изм.", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, , , , , ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения"));
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Цена", "Цена", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2, , , Истина);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтавкаНДС", "Ставка НДС", ОписаниеТиповСтрока50, ОписаниеТиповКолонка);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СуммаНДС", "Сумма НДС", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов(МассивТипов);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Заказ", "Заказ (покупатель/поставщик)", ОписаниеТиповСтрока50, ОписаниеТиповКолонка);
	
	ВидимостьСклада = (ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам") И НастройкиЗагрузкиДанных.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтруктурнаяЕдиница", "Склад", ОписаниеТиповСтрока50, ОписаниеТиповКолонка, , , , , ВидимостьСклада);
	
	Если ПолучитьФункциональнуюОпцию("УчетГТД") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтраныМира");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтранаПроисхождения", "Страна происхождения", ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.НомераГТД");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НомерГТД", "Номер ГТД", ОписаниеТиповСтрока30, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОпределенииОбразцовЗагрузкиДанных(НастройкиЗагрузкиДанных, УникальныйИдентификатор) Экспорт
	
	Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанных_xlsx");
	ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
	
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанных_mxl");
	
	Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанных_csv");
	ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
	
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника(ТаблицаСопоставленияДанных, НастройкиЗагрузкиДанных) Экспорт
	
	ПолноеИмяОбъектаЗаполнения = НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;
	
	// ТаблицаСопоставленияДанных - Тип ДанныеФормыКоллекция
	Для каждого СтрокаТаблицыФормы Из ТаблицаСопоставленияДанных Цикл
		
		// Номенклатура по ШтрихКоду, Артикулу, Наименованию, НаименованиеПолное
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуру(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Артикул, СтрокаТаблицыФормы.НоменклатураНаименование, СтрокаТаблицыФормы.НоменклатураНаименованиеПолное);
		
		Если ПолноеИмяОбъектаЗаполнения = "Документ.ПриходнаяНакладная.ТабличнаяЧасть.Расходы" Тогда
			
			Если СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
				
				СтрокаТаблицыФормы.Номенклатура = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПолноеИмяОбъектаЗаполнения = "Документ.ПриходнаяНакладная.ТабличнаяЧасть.Запасы" Тогда
			
			Если СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас Тогда
				
				СтрокаТаблицыФормы.Номенклатура = Неопределено;
				
			КонецЕсли;
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
				
				Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
					
					// Характеристика по Владельцу и Наименованию
					ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьХарактеристику(СтрокаТаблицыФормы.Характеристика, СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Характеристика_ВходящиеДанные);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
				
				Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
					
					// Партия по Владельцу и Наименованию
					ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьПартию(СтрокаТаблицыФормы.Партия, СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Партия_ВходящиеДанные);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Содержание
		Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.Содержание, СтрокаТаблицыФормы.Содержание_ВходящиеДанные);
			
		КонецЕсли;
		
		// Количество
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Количество, СтрокаТаблицыФормы.Количество_ВходящиеДанные, 1);
		
		// ЕдиницыИзмерения по Наименованию (так же рассмотреть возможность прикрутить пользовательские ЕИ)
		ЗначениеПоУмолчанию = ?(ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура), СтрокаТаблицыФормы.Номенклатура.ЕдиницаИзмерения, Справочники.КлассификаторЕдиницИзмерения.шт);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЕдиницыИзмерения(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.ЕдиницаИзмерения, СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// Цена
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Цена, СтрокаТаблицыФормы.Цена_ВходящиеДанные, 1);
		
		// СтавкаНДС по наименованию
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтавкуНДС(СтрокаТаблицыФормы.СтавкаНДС, СтрокаТаблицыФормы.СтавкаНДС_ВходящиеДанные, Неопределено);
		
		// СуммаНДС
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.СуммаНДС, СтрокаТаблицыФормы.СуммаНДС_ВходящиеДанные, 0);
		
		// Заказ по номеру, дате, признаку
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЗаказ(СтрокаТаблицыФормы.Заказ, СтрокаТаблицыФормы.Заказ_ВходящиеДанные);
		
		// Склад
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтруктурнуюЕдиницу(СтрокаТаблицыФормы.СтруктурнаяЕдиница, СтрокаТаблицыФормы.СтруктурнаяЕдиница_ВходящиеДанные, Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		
		// Страна и ГТД
		Если ПолучитьФункциональнуюОпцию("УчетГТД") Тогда
			
			ЗначениеПоУмолчанию = Неопределено;
			Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
				
				ЗначениеПоУмолчанию = СтрокаТаблицыФормы.Номенклатура.СтранаПроисхождения;
				
			КонецЕсли;
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтрануПроисхождения(СтрокаТаблицыФормы.СтранаПроисхождения, СтрокаТаблицыФормы.СтранаПроисхождения_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			Если ЗначениеЗаполнено(СтрокаТаблицыФормы.СтранаПроисхождения)
				И СтрокаТаблицыФормы.СтранаПроисхождения <> Справочники.СтраныМира.Россия Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНомерГТД(СтрокаТаблицыФормы.НомерГТД, СтрокаТаблицыФормы.НомерГТД_ВходящиеДанные);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения = "") Экспорт
	
	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	
	Если ПолноеИмяОбъектаЗаполнения = "Документ.ПриходнаяНакладная.ТабличнаяЧасть.Запасы" Тогда
		
		СтрокаТаблицыФормы[ИмяСлужебногоПоля] = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура)
			И СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас
			И НЕ СтрокаТаблицыФормы.Номенклатура.ЭтоНабор // Исключая наборы
			И СтрокаТаблицыФормы.Количество <> 0
			И НЕ СтрокаТаблицыФормы.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение;
			
	ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ПриходнаяНакладная.ТабличнаяЧасть.Расходы" Тогда
			
		СтрокаТаблицыФормы[ИмяСлужебногоПоля] = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура)
			И СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
			И НЕ СтрокаТаблицыФормы.Номенклатура.ЭтоНабор // Исключая наборы
			И СтрокаТаблицыФормы.Количество <> 0;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсПечати

Функция ДанныеПолученныхДокументовРегУчет(МассивОбъектов, ИспользоватьФаксимиле, ПечатнаяФормаТолькоВРублях = Истина, Ошибки = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ИспользоватьФаксимиле", ИспользоватьФаксимиле);
	Запрос.УстановитьПараметр("ПечатнаяФормаТолькоВРублях", ПечатнаяФормаТолькоВРублях);
	Запрос.УстановитьПараметр("НациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходнаяНакладная.Ссылка КАК Ссылка
	|	,Неопределено КАК ДатаДокумента
	|	,Неопределено КАК Номер
	|	,Неопределено КАК ЦифровойИндексОбособленногоПодразделения
	|	,Неопределено КАК НомерИсправления
	|	,Неопределено КАК ДатаИсправления
	|	,Неопределено КАК ФаксимилеПустая
	|	,Значение(Перечисление.ВидыОперацийСчетФактура.Продажа) КАК ВидОперации
	|	,Выбор когда ПриходнаяНакладная.Контрагент.ГоловнойКонтрагент <> Значение(Справочник.Контрагенты.ПустаяСсылка)
	|		Тогда ПриходнаяНакладная.Контрагент.ГоловнойКонтрагент
	|		Иначе ПриходнаяНакладная.Контрагент Конец КАК Организация
	|	,ПриходнаяНакладная.Контрагент КАК ОбособленноеПодразделениеПоставщика
	|	,ПриходнаяНакладная.Контрагент КАК Грузоотправитель
	|	,Неопределено КАК Префикс
	|	,Неопределено КАК Логотип
	|	,Неопределено КАК ФаксимилеПечати
	|	,Выбор когда &ИспользоватьФаксимиле = ИСТИНА
	|		Тогда ЗНАЧЕНИЕ(Перечисление.ДаНет.Да)
	|		Иначе ЗНАЧЕНИЕ(Перечисление.ДаНет.Нет) Конец КАК ИспользоватьФаксимиле
	|	,Выбор когда ПриходнаяНакладная.Контрагент.ВидКонтрагента = Значение(Перечисление.ВидыКонтрагентов.ФизическоеЛицо)
	|		Тогда Истина
	|		Иначе Ложь Конец КАК ЭтоФизическоеЛицо
	|	,Выбор Когда ПриходнаяНакладная.НалогообложениеНДС = Значение(Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС)
	|		Тогда 2
	|		Иначе 1 Конец КАК СтатусУПД
	|	,Ложь КАК ЭтоСводныйСчетФактура
	|	,Ложь КАК ЭтоКорректировка
	|	,ПриходнаяНакладная.Контрагент.БанковскийСчетПоУмолчанию КАК БанковскийСчет
	|	,Неопределено КАК ПредставлениеПодразделения
	|	,Неопределено КАК ПредставлениеСкладаСписания
	|	,Выбор когда ПриходнаяНакладная.Организация.ГоловнаяОрганизация <> Значение(Справочник.Организации.ПустаяСсылка)
	|		Тогда ПриходнаяНакладная.Организация.ГоловнаяОрганизация
	|		Иначе ПриходнаяНакладная.Организация Конец КАК Контрагент
	|	,ПриходнаяНакладная.Организация КАК ОбособленноеПодразделениеПокупателя
	|	,ПриходнаяНакладная.Организация КАК Грузополучатель
	|	,ПриходнаяНакладная.Организация.БанковскийСчетПоУмолчанию КАК БанковскийСчетКонтрагента
	|	,Неопределено КАК АдресДоставки
	|	,ПриходнаяНакладная.ПодписьКладовщика.РасшифровкаПодписи КАК РасшифровкаПодписиКонтрагента
	|	,Неопределено КАК ДоверенностьНомер
	|	,Неопределено КАК ДоверенностьДата
	|	,Неопределено КАК ДоверенностьВыдана
	|	,Неопределено КАК ДоверенностьЛицо
	|	,ПриходнаяНакладная.Договор.Представление КАК Основание
	|	,ПриходнаяНакладная.Договор.Представление КАК ПредставлениеОснования
	|	,ПриходнаяНакладная.Договор КАК ОснованиеПечатиСсылка
	|	,Выбор когда &ПечатнаяФормаТолькоВРублях = Истина 
	|		Тогда НациональнаяВалюта.Значение
	|		Иначе ПриходнаяНакладная.ВалютаДокумента Конец КАК ВалютаДокумента
	|	,Выбор когда &ПечатнаяФормаТолькоВРублях = Истина 
	|		Тогда НациональнаяВалюта.Значение.НаименованиеПолное
	|		Иначе ПриходнаяНакладная.ВалютаДокумента.НаименованиеПолное Конец КАК ВалютаНаименование
	|	,Выбор когда &ПечатнаяФормаТолькоВРублях = Истина 
	|		Тогда НациональнаяВалюта.Значение.Код
	|		Иначе ПриходнаяНакладная.ВалютаДокумента.Код Конец КАК ВалютаКод
	|	,ПриходнаяНакладная.СуммаВключаетНДС КАК СуммаВключаетНДС
	|	,ПриходнаяНакладная.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость
	|	,ПриходнаяНакладная.Курс КАК Курс
	|	,ПриходнаяНакладная.Кратность КАК Кратность
	|	,ПриходнаяНакладная.Договор.НомерДоговора КАК ОснованиеНомер
	|	,ПриходнаяНакладная.Договор.ДатаДоговора КАК ОснованиеДата
	|	,Неопределено КАК ТранспортнаяНакладнаяНомер
	|	,Неопределено КАК ТранспортнаяНакладнаяДата
	|	,СвязиКонтрагентКонтакт.Должность КАК ДолжностьРуководителя
	|	,ПриходнаяНакладная.КонтактноеЛицоПодписант.Наименование КАК РасшифровкаПодписиРуководителя
	|	,Неопределено КАК ФаксимилеРуководителя
	|	,Неопределено КАК РасшифровкаПодписиГлавногоБухгалтера
	|	,Неопределено КАК ФаксимилеГлавногоБухгалтера
	|	,Неопределено КАК ДолжностьКладовщика
	|	,Неопределено КАК РасшифровкаПодписиКладовщика
	|	,Неопределено КАК ФаксимилеКладовщика
	|	,0 КАК Вес
	|	,0 КАК Объем
	|	,Неопределено КАК НоменклатураДоставки
	|	,Неопределено КАК ПредставлениеНоменклатурыДоставки
	|	,Неопределено КАК КодНоменклатурыДоставки
	|	,Неопределено КАК АртикулНоменклатурыДоставки
	|	,Неопределено КАК СтоимостьДоставки
	|	,Неопределено КАК СтавкаНДСДоставки
	|	,Неопределено КАК СуммаНДСДоставки
	|	,Неопределено КАК ИдентификаторГосКонтракта
	|
	//::: Табличная часть Запасы
	|	,ПриходнаяНакладная.Запасы.(
	|		НомерСтроки КАК НомерСтроки
	|		,Номенклатура КАК Номенклатура
	|		,Содержание КАК Содержание
	|		,Выбор когда Выразить(ПриходнаяНакладная.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) = """"
	|			тогда ПриходнаяНакладная.Запасы.Номенклатура.Наименование
	|			Иначе ВЫРАЗИТЬ(ПриходнаяНакладная.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) Конец КАК ПредставлениеНоменклатуры
	|		,Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	|		,Номенклатура.Код КАК ЗапасКод
	|		,Номенклатура.Код КАК Код
	|		,Номенклатура.Артикул КАК Артикул
	|		,Номенклатура.ТоварнаяНоменклатураВЭД.Код КАК КодТНВЭД
	|		,Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияПоОКЕИ_Наименование
	|		,Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияПоОКЕИ_Код
	|		,Характеристика КАК Характеристика
	|		,Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|		,Неопределено КАК ВидУпаковки
	|		,Выбор когда ПриходнаяНакладная.Запасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|			тогда ПриходнаяНакладная.Запасы.ЕдиницаИзмерения.Коэффициент
	|			Иначе 1 Конец КАК КоэффициентЕдиницыИзмерения
	|		,Количество КАК Количество
	|		,Неопределено КАК КоличествоВОдномМесте
	|		,Неопределено КАК КоличествоМест
	|		,СтавкаНДС КАК СтавкаНДС
	|		,0 КАК МассаБрутто
	|		,Выбор когда &ПечатнаяФормаТолькоВРублях = Истина
	|				ИЛИ (Ссылка.Договор.РасчетыВУсловныхЕдиницах = Истина 
	|						И Ссылка.ВалютаДокумента <> НациональнаяВалюта.Значение)
	|			Тогда Выразить(ПриходнаяНакладная.Запасы.Цена * ПриходнаяНакладная.Курс / ПриходнаяНакладная.Кратность КАК ЧИСЛО(15, 2)) 
	|			Иначе ПриходнаяНакладная.Запасы.Цена Конец КАК Цена
	|		,Выбор когда &ПечатнаяФормаТолькоВРублях = Истина
	|				ИЛИ (Ссылка.Договор.РасчетыВУсловныхЕдиницах = Истина 
	|						И Ссылка.ВалютаДокумента <> НациональнаяВалюта.Значение)
	|			Тогда Выразить(ПриходнаяНакладная.Запасы.Сумма * ПриходнаяНакладная.Курс / ПриходнаяНакладная.Кратность КАК ЧИСЛО(15, 2)) 
	|			Иначе ПриходнаяНакладная.Запасы.Сумма Конец КАК Сумма
	|		,Выбор когда &ПечатнаяФормаТолькоВРублях = Истина
	|				ИЛИ (Ссылка.Договор.РасчетыВУсловныхЕдиницах = Истина 
	|						И Ссылка.ВалютаДокумента <> НациональнаяВалюта.Значение)
	|			Тогда Выразить(ПриходнаяНакладная.Запасы.СуммаНДС * ПриходнаяНакладная.Курс / ПриходнаяНакладная.Кратность КАК ЧИСЛО(15, 2))
	|			Иначе ПриходнаяНакладная.Запасы.СуммаНДС Конец КАК СуммаНДС
	|		,Выбор когда &ПечатнаяФормаТолькоВРублях = Истина
	|				ИЛИ (Ссылка.Договор.РасчетыВУсловныхЕдиницах = Истина 
	|						И Ссылка.ВалютаДокумента <> НациональнаяВалюта.Значение)
	|			Тогда Выразить(ПриходнаяНакладная.Запасы.Всего * ПриходнаяНакладная.Курс / ПриходнаяНакладная.Кратность КАК ЧИСЛО(15, 2))
	|			Иначе ПриходнаяНакладная.Запасы.Всего Конец КАК Всего
	|		,Ссылка КАК Ссылка
	|		,НоменклатураНабора КАК НоменклатураНабора
	|		,ХарактеристикаНабора КАК ХарактеристикаНабора
	|		,ЛОЖЬ КАК ЭтоНабор
	|		,Выбор когда НоменклатураНабора <> Значение(Справочник.Номенклатура.ПустаяСсылка)
	|				И НоменклатураНабора.ВариантПечатиНабора = Значение(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|			Тогда ИСТИНА
	|			Иначе ЛОЖЬ Конец КАК НеобходимоВыделитьКакСоставНабора
	|		,СтранаПроисхождения КАК СтранаСсылка
	|		,СтранаПроисхождения.Код КАК СтранаКод
	|		,Представление(СтранаПроисхождения) КАК СтранаПредставление
	|		,НомерГТД.РегистрационныйНомер КАК ПредставлениеГТД
	|	) КАК ТаблицаЗапасы
	|
	//::: Табличная часть Услуги
	|	,ПриходнаяНакладная.Расходы.(
	|		НомерСтроки КАК НомерСтроки
	|		,Номенклатура КАК Номенклатура
	|		,Неопределено КАК Содержание
	|		,Выбор когда Выразить(ПриходнаяНакладная.Расходы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) = """"
	|			тогда ПриходнаяНакладная.Расходы.Номенклатура.Наименование
	|			Иначе ВЫРАЗИТЬ(ПриходнаяНакладная.Расходы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) Конец КАК ПредставлениеНоменклатуры
	|		,Значение(Перечисление.ТипыНоменклатуры.Услуга) КАК ТипНоменклатуры
	|		,Номенклатура.Код КАК ЗапасКод
	|		,Номенклатура.Код КАК Код
	|		,Номенклатура.Артикул КАК Артикул
	|		,Номенклатура.ТоварнаяНоменклатураВЭД.Код КАК КодТНВЭД
	|		,Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|		,Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияПоОКЕИ_Наименование
	|		,Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияПоОКЕИ_Код
	|		,Неопределено КАК Характеристика
	|		,Неопределено КАК ВидУпаковки
	|		,Выбор когда ПриходнаяНакладная.Расходы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|			тогда ПриходнаяНакладная.Расходы.ЕдиницаИзмерения.Коэффициент
	|			Иначе 1 Конец КАК КоэффициентЕдиницыИзмерения
	|		,Количество КАК Количество
	|		,Неопределено КАК КоличествоВОдномМесте
	|		,Неопределено КАК КоличествоМест
	|		,СтавкаНДС КАК СтавкаНДС
	|		,0 КАК МассаБрутто
	|		,Выбор когда &ПечатнаяФормаТолькоВРублях = Истина
	|				ИЛИ (Ссылка.Договор.РасчетыВУсловныхЕдиницах = Истина 
	|						И Ссылка.ВалютаДокумента <> НациональнаяВалюта.Значение)
	|			Тогда Выразить(ПриходнаяНакладная.Расходы.Цена * ПриходнаяНакладная.Ссылка.Курс / ПриходнаяНакладная.Ссылка.Кратность КАК ЧИСЛО(15, 2)) 
	|			Иначе ПриходнаяНакладная.Расходы.Цена Конец КАК Цена
	|		,Выбор когда &ПечатнаяФормаТолькоВРублях = Истина
	|				ИЛИ (Ссылка.Договор.РасчетыВУсловныхЕдиницах = Истина 
	|						И Ссылка.ВалютаДокумента <> НациональнаяВалюта.Значение)
	|			Тогда Выразить(ПриходнаяНакладная.Расходы.Сумма * ПриходнаяНакладная.Ссылка.Курс / ПриходнаяНакладная.Ссылка.Кратность КАК ЧИСЛО(15, 2)) 
	|			Иначе ПриходнаяНакладная.Расходы.Сумма Конец КАК Сумма
	|		,Выбор когда &ПечатнаяФормаТолькоВРублях = Истина
	|				ИЛИ (Ссылка.Договор.РасчетыВУсловныхЕдиницах = Истина 
	|						И Ссылка.ВалютаДокумента <> НациональнаяВалюта.Значение)
	|			Тогда Выразить(ПриходнаяНакладная.Расходы.СуммаНДС * ПриходнаяНакладная.Ссылка.Курс / ПриходнаяНакладная.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|			Иначе ПриходнаяНакладная.Расходы.СуммаНДС Конец КАК СуммаНДС
	|		,Выбор когда &ПечатнаяФормаТолькоВРублях = Истина
	|				ИЛИ (Ссылка.Договор.РасчетыВУсловныхЕдиницах = Истина 
	|						И Ссылка.ВалютаДокумента <> НациональнаяВалюта.Значение)
	|			Тогда Выразить(ПриходнаяНакладная.Расходы.Всего * ПриходнаяНакладная.Ссылка.Курс / ПриходнаяНакладная.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|			Иначе ПриходнаяНакладная.Расходы.Всего Конец КАК Всего
	|		,Ссылка КАК Ссылка
	|		,Неопределено КАК НоменклатураНабора
	|		,неопределено КАК ХарактеристикаНабора
	|		,ЛОЖЬ КАК ЭтоНабор
	|		,ЛОЖЬ КАК НеобходимоВыделитьКакСоставНабора
	|		,Неопределено КАК СтранаСсылка
	|		,Неопределено КАК СтранаКод
	|		,Неопределено КАК СтранаПредставление
	|		,Неопределено КАК ПредставлениеГТД
	|	) КАК ТаблицаРасходы
	|
	//::: Табличная часть Наборы
	|	,ПриходнаяНакладная.ДобавленныеНаборы.(
	|		НоменклатураНабора КАК НоменклатураНабора
	|		,ХарактеристикаНабора КАК ХарактеристикаНабора
	|		,Количество КАК Количество
	|		,Выбор когда (Выразить(НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			Тогда НоменклатураНабора.Наименование
	|			Иначе ВЫРАЗИТЬ(НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000)) конец КАК ЗапасНабора
	|		,НоменклатураНабора.ВариантПечатиНабора КАК ВариантПечатиНабора
	|		,НоменклатураНабора.ТипНоменклатуры КАК ТипНоменклатурыНабора
	|		,НоменклатураНабора.Артикул КАК АртикулНабора
	|		,НоменклатураНабора.Код КАК КодНабора
	|		,НоменклатураНабора.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНабора
	|		,НоменклатураНабора.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияНабора
	|		,Выбор когда НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.ТолькоНабор)
	|			Тогда ИСТИНА
	|			Иначе ЛОЖЬ Конец КАК ВыводитьИтоги
	|	) КАК ТаблицаДобавленныеНаборы
	|
	//::: Табличная часть Платежные документы
	|	,Неопределено КАК ПлатежныеДокументы
	|
	|Из Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтакт
	|	ПО СвязиКонтрагентКонтакт.Контакт = ПриходнаяНакладная.КонтактноеЛицоПодписант 
	|	И СвязиКонтрагентКонтакт.Контрагент = ПриходнаяНакладная.Контрагент
	|	,Константа.НациональнаяВалюта КАК НациональнаяВалюта
	|Где ПриходнаяНакладная.Ссылка В(&МассивОбъектов)
	|Упорядочить по ПриходнаяНакладная.Запасы.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(ПриходнаяНакладнаяЗапасы.Содержание КАК СТРОКА(1000)) КАК Содержание,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ПриходнаяНакладнаяЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА ПриходнаяНакладнаяЗапасы.Номенклатура.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(ПриходнаяНакладнаяЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ КАК ПредставлениеНоменклатуры,
	|	ПриходнаяНакладнаяЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ПриходнаяНакладнаяЗапасы.Номенклатура.Код КАК ЗапасКод,
	|	ПриходнаяНакладнаяЗапасы.Номенклатура.Артикул КАК Артикул,
	|	ПриходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияПоОКЕИ_Наименование,
	|	ПриходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияПоОКЕИ_Код,
	|	ПриходнаяНакладнаяЗапасы.Характеристика КАК Характеристика,
	|	ПриходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения КАК ВидУпаковки,
	|	ПриходнаяНакладнаяЗапасы.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|			ТОГДА ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоэффициентЕдиницыИзмерения,
	|	ПриходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	0 КАК Вес,
	|	ПриходнаяНакладнаяЗапасы.Цена КАК Цена,
	|	ПриходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтроки,
	|	ПриходнаяНакладнаяЗапасы.Сумма КАК Сумма,
	|	ПриходнаяНакладнаяЗапасы.СуммаНДС КАК СуммаНДС,
	|	ПриходнаяНакладнаяЗапасы.Всего КАК Всего,
	|	ПриходнаяНакладнаяЗапасы.Ссылка КАК Ссылка,
	|	ПриходнаяНакладнаяЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ПриходнаяНакладнаяЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЛОЖЬ КАК ЭтоНабор,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладнаяЗапасы.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				И ПриходнаяНакладнаяЗапасы.НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора
	|	,ПриходнаяНакладнаяЗапасы.СтранаПроисхождения КАК СтранаСсылка
	|	,Представление(ПриходнаяНакладнаяЗапасы.СтранаПроисхождения) КАК СтранаПредставление
	|	,ПриходнаяНакладнаяЗапасы.СтранаПроисхождения.Код КАК СтранаКод
	|	,ПриходнаяНакладнаяЗапасы.НомерГТД.РегистрационныйНомер КАК ПредставлениеГТД
	|ПОМЕСТИТЬ ВременнаяТаблица_ПриходнаяНакладнаяЗапасы
	|ИЗ
	|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
	|ГДЕ
	|	ПриходнаяНакладнаяЗапасы.Ссылка В(&МассивОбъектов)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура
	|	,ПриходнаяНакладнаяЗапасы.Содержание КАК Содержание
	|	,ПриходнаяНакладнаяЗапасы.ПредставлениеНоменклатуры КАК ПредставлениеНоменклатуры
	|	,ПриходнаяНакладнаяЗапасы.ТипНоменклатуры КАК ТипНоменклатуры
	|	,ПриходнаяНакладнаяЗапасы.ЗапасКод КАК ЗапасКод
	|	,ПриходнаяНакладнаяЗапасы.ЗапасКод КАК Код
	|	,ПриходнаяНакладнаяЗапасы.Артикул КАК Артикул
	|	,ПриходнаяНакладнаяЗапасы.ЕдиницаИзмеренияПоОКЕИ_Наименование КАК ЕдиницаИзмеренияПоОКЕИ_Наименование
	|	,ПриходнаяНакладнаяЗапасы.ЕдиницаИзмеренияПоОКЕИ_Код КАК ЕдиницаИзмеренияПоОКЕИ_Код
	|	,ПриходнаяНакладнаяЗапасы.Характеристика КАК Характеристика
	|	,ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	,ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения КАК ВидУпаковки
	|	,ПриходнаяНакладнаяЗапасы.Количество КАК Количество
	|	,ПриходнаяНакладнаяЗапасы.КоэффициентЕдиницыИзмерения КАК КоэффициентЕдиницыИзмерения
	|	,НЕОПРЕДЕЛЕНО КАК КоличествоВОдномМесте
	|	,НЕОПРЕДЕЛЕНО КАК КоличествоМест
	|	,ПриходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС
	|	,ПриходнаяНакладнаяЗапасы.Вес КАК МассаБрутто
	|	,ПриходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтроки
	|	,Выбор когда &ПечатнаяФормаТолькоВРублях 
	|		Тогда
	|			Выбор Когда ПриходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента = &НациональнаяВалюта
	|					Тогда ПриходнаяНакладнаяЗапасы.Цена
	|				Когда СуммыДокументовРегламентированныйУчет.Всего ЕСТЬ NULL 
	|					Тогда Выразить(ПриходнаяНакладнаяЗапасы.Цена * ПриходнаяНакладнаяЗапасы.Ссылка.Курс / ПриходнаяНакладнаяЗапасы.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|				Иначе
	|					Выбор Когда ПриходнаяНакладнаяЗапасы.Количество = 0
	|						Тогда (СуммыДокументовРегламентированныйУчет.Всего - СуммыДокументовРегламентированныйУчет.НДС)
	|						Иначе Выразить((СуммыДокументовРегламентированныйУчет.Всего - СуммыДокументовРегламентированныйУчет.НДС) / ПриходнаяНакладнаяЗапасы.Количество КАК ЧИСЛО(15, 2)) Конец
	|			Конец
	|		Иначе ПриходнаяНакладнаяЗапасы.Цена Конец КАК Цена
	|	,Выбор когда &ПечатнаяФормаТолькоВРублях 
	|		Тогда
	|			Выбор Когда ПриходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента = &НациональнаяВалюта
	|					Тогда ПриходнаяНакладнаяЗапасы.Сумма
	|				Когда СуммыДокументовРегламентированныйУчет.Всего ЕСТЬ NULL 
	|					Тогда Выразить(ПриходнаяНакладнаяЗапасы.Сумма * ПриходнаяНакладнаяЗапасы.Ссылка.Курс / ПриходнаяНакладнаяЗапасы.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|				Иначе
	|					Выбор Когда ПриходнаяНакладнаяЗапасы.Ссылка.СуммаВключаетНДС
	|						Тогда Выразить(СуммыДокументовРегламентированныйУчет.Всего КАК ЧИСЛО(15, 2))
	|						Иначе Выразить(СуммыДокументовРегламентированныйУчет.Всего - СуммыДокументовРегламентированныйУчет.НДС КАК ЧИСЛО(15, 2)) Конец
	|			Конец
	|		Иначе ПриходнаяНакладнаяЗапасы.Сумма Конец КАК Сумма
	|	,Выбор когда &ПечатнаяФормаТолькоВРублях 
	|		Тогда
	|			Выбор Когда ПриходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента = &НациональнаяВалюта
	|					Тогда ПриходнаяНакладнаяЗапасы.СуммаНДС
	|				Когда СуммыДокументовРегламентированныйУчет.Всего ЕСТЬ NULL 
	|					Тогда Выразить(ПриходнаяНакладнаяЗапасы.СуммаНДС * ПриходнаяНакладнаяЗапасы.Ссылка.Курс / ПриходнаяНакладнаяЗапасы.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|				Иначе СуммыДокументовРегламентированныйУчет.НДС
	|			Конец
	|		Иначе ПриходнаяНакладнаяЗапасы.СуммаНДС Конец КАК СуммаНДС
	|	,Выбор когда &ПечатнаяФормаТолькоВРублях 
	|		Тогда
	|			Выбор Когда ПриходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента = &НациональнаяВалюта
	|					Тогда ПриходнаяНакладнаяЗапасы.Всего
	|				Когда СуммыДокументовРегламентированныйУчет.Всего ЕСТЬ NULL 
	|					Тогда Выразить(ПриходнаяНакладнаяЗапасы.Всего * ПриходнаяНакладнаяЗапасы.Ссылка.Курс / ПриходнаяНакладнаяЗапасы.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|				Иначе СуммыДокументовРегламентированныйУчет.Всего
	|			Конец
	|		Иначе ПриходнаяНакладнаяЗапасы.Всего Конец КАК Всего
	|	,ПриходнаяНакладнаяЗапасы.Ссылка КАК Ссылка
	|	,ПриходнаяНакладнаяЗапасы.НоменклатураНабора КАК НоменклатураНабора
	|	,ПриходнаяНакладнаяЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора
	|	,ПриходнаяНакладнаяЗапасы.ЭтоНабор КАК ЭтоНабор
	|	,ПриходнаяНакладнаяЗапасы.НеобходимоВыделитьКакСоставНабора КАК НеобходимоВыделитьКакСоставНабора
	|	,ПриходнаяНакладнаяЗапасы.СтранаСсылка
	|	,ПриходнаяНакладнаяЗапасы.СтранаПредставление
	|	,ПриходнаяНакладнаяЗапасы.СтранаКод
	|	,ПриходнаяНакладнаяЗапасы.ПредставлениеГТД
	|	,Выбор когда ПриходнаяНакладнаяЗапасы.Номенклатура.ТипНоменклатуры = Значение(Перечисление.ТипыНоменклатуры.Запас)
	|		Тогда ПриходнаяНакладнаяЗапасы.Номенклатура.ТоварнаяНоменклатураВЭД.Код
	|		Иначе Неопределено Конец КАК КодТНВЭД
	|ИЗ
	|	ВременнаяТаблица_ПриходнаяНакладнаяЗапасы КАК ПриходнаяНакладнаяЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовРегламентированныйУчет КАК СуммыДокументовРегламентированныйУчет
	|		ПО ПриходнаяНакладнаяЗапасы.Ссылка = СуммыДокументовРегламентированныйУчет.Регистратор
	|			И ПриходнаяНакладнаяЗапасы.НомерСтроки = СуммыДокументовРегламентированныйУчет.НомерСтрокиДокумента
	|			И СуммыДокументовРегламентированныйУчет.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Запасы)
	|ГДЕ
	|	ПриходнаяНакладнаяЗапасы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяРасходы.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(ПриходнаяНакладнаяРасходы.Содержание КАК СТРОКА(1000)) КАК Содержание,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ПриходнаяНакладнаяРасходы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА ПриходнаяНакладнаяРасходы.Номенклатура.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(ПриходнаяНакладнаяРасходы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ КАК ПредставлениеНоменклатуры,
	|	ПриходнаяНакладнаяРасходы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ПриходнаяНакладнаяРасходы.Номенклатура.Код КАК ЗапасКод,
	|	ПриходнаяНакладнаяРасходы.Номенклатура.Артикул КАК Артикул,
	|	Неопределено КАК КодТНВЭД,
	|	1 КАК КоэффициентЕдиницыИзмерения,
	|	ПриходнаяНакладнаяРасходы.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияПоОКЕИ_Наименование,
	|	ПриходнаяНакладнаяРасходы.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияПоОКЕИ_Код,
	|	Неопределено КАК Характеристика,
	|	ПриходнаяНакладнаяРасходы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Неопределено КАК ВидУпаковки,
	|	ПриходнаяНакладнаяРасходы.Количество КАК Количество,
	|	Неопределено КАК КоличествоВОдномМесте,
	|	Неопределено КАК КоличествоМест,
	|	ПриходнаяНакладнаяРасходы.СтавкаНДС КАК СтавкаНДС,
	|	Выбор когда &ПечатнаяФормаТолькоВРублях
	|			Тогда 
	|				Выбор когда ПриходнаяНакладнаяРасходы.Ссылка.Договор.РасчетыВУсловныхЕдиницах И ПриходнаяНакладнаяРасходы.Ссылка.ВалютаДокумента <> &НациональнаяВалюта
	|					Тогда Выразить(ПриходнаяНакладнаяРасходы.Цена * ПриходнаяНакладнаяРасходы.Ссылка.Курс / ПриходнаяНакладнаяРасходы.Ссылка.Кратность КАК Число(15,2))
	|					Иначе ПриходнаяНакладнаяРасходы.Цена Конец
	|			Иначе ПриходнаяНакладнаяРасходы.Цена Конец КАК Цена,
	|	Выбор когда &ПечатнаяФормаТолькоВРублях
	|			Тогда
	|				Выбор когда ПриходнаяНакладнаяРасходы.Ссылка.Договор.РасчетыВУсловныхЕдиницах И ПриходнаяНакладнаяРасходы.Ссылка.ВалютаДокумента <> &НациональнаяВалюта
	|					Тогда Выразить(ПриходнаяНакладнаяРасходы.Сумма * ПриходнаяНакладнаяРасходы.Ссылка.Курс / ПриходнаяНакладнаяРасходы.Ссылка.Кратность КАК Число(15,2))
	|					Иначе ПриходнаяНакладнаяРасходы.Сумма Конец
	|			Иначе ПриходнаяНакладнаяРасходы.Сумма Конец КАК Сумма,
	|	Выбор когда &ПечатнаяФормаТолькоВРублях
	|			Тогда
	|				Выбор когда ПриходнаяНакладнаяРасходы.Ссылка.Договор.РасчетыВУсловныхЕдиницах И ПриходнаяНакладнаяРасходы.Ссылка.ВалютаДокумента <> &НациональнаяВалюта
	|					Тогда Выразить(ПриходнаяНакладнаяРасходы.СуммаНДС * ПриходнаяНакладнаяРасходы.Ссылка.Курс / ПриходнаяНакладнаяРасходы.Ссылка.Кратность КАК Число(15,2))
	|					Иначе ПриходнаяНакладнаяРасходы.СуммаНДС Конец
	|			Иначе ПриходнаяНакладнаяРасходы.СуммаНДС Конец КАК СуммаНДС,
	|	Выбор когда &ПечатнаяФормаТолькоВРублях
	|			Тогда
	|				Выбор когда ПриходнаяНакладнаяРасходы.Ссылка.Договор.РасчетыВУсловныхЕдиницах И ПриходнаяНакладнаяРасходы.Ссылка.ВалютаДокумента <> &НациональнаяВалюта
	|					Тогда Выразить(ПриходнаяНакладнаяРасходы.Всего * ПриходнаяНакладнаяРасходы.Ссылка.Курс / ПриходнаяНакладнаяРасходы.Ссылка.Кратность КАК Число(15,2))
	|					Иначе ПриходнаяНакладнаяРасходы.Всего Конец
	|			Иначе ПриходнаяНакладнаяРасходы.Всего Конец КАК Всего,
	|	ПриходнаяНакладнаяРасходы.НомерСтроки КАК НомерСтроки,
	|	ПриходнаяНакладнаяРасходы.Ссылка КАК Ссылка,
	|	Неопределено КАК НоменклатураНабора,
	|	Неопределено КАК ХарактеристикаНабора,
	|	ЛОЖЬ КАК ЭтоНабор,
	|	ЛОЖЬ КАК НеобходимоВыделитьКакСоставНабора
	|ПОМЕСТИТЬ ВременнаяТаблица_ПриходнаяНакладнаяРасходы
	|ИЗ
	|	Документ.ПриходнаяНакладная.Расходы КАК ПриходнаяНакладнаяРасходы
	|ГДЕ
	|	ПриходнаяНакладнаяРасходы.Ссылка В(&МассивОбъектов)
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяРасходы.Номенклатура КАК Номенклатура
	|	,ПриходнаяНакладнаяРасходы.Содержание КАК Содержание
	|	,ПриходнаяНакладнаяРасходы.ПредставлениеНоменклатуры КАК ПредставлениеНоменклатуры
	|	,ПриходнаяНакладнаяРасходы.ТипНоменклатуры КАК ТипНоменклатуры
	|	,ПриходнаяНакладнаяРасходы.ЗапасКод КАК ЗапасКод
	|	,ПриходнаяНакладнаяРасходы.ЗапасКод КАК Код
	|	,ПриходнаяНакладнаяРасходы.Артикул КАК Артикул
	|	,ПриходнаяНакладнаяРасходы.ЕдиницаИзмеренияПоОКЕИ_Наименование КАК ЕдиницаИзмеренияПоОКЕИ_Наименование
	|	,ПриходнаяНакладнаяРасходы.ЕдиницаИзмеренияПоОКЕИ_Код КАК ЕдиницаИзмеренияПоОКЕИ_Код
	|	,ПриходнаяНакладнаяРасходы.Характеристика КАК Характеристика
	|	,ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	,ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения КАК ВидУпаковки
	|	,ПриходнаяНакладнаяРасходы.Количество КАК Количество
	|	,ПриходнаяНакладнаяРасходы.КоэффициентЕдиницыИзмерения КАК КоэффициентЕдиницыИзмерения
	|	,НЕОПРЕДЕЛЕНО КАК КоличествоВОдномМесте
	|	,НЕОПРЕДЕЛЕНО КАК КоличествоМест
	|	,ПриходнаяНакладнаяРасходы.СтавкаНДС КАК СтавкаНДС
	|	,ПриходнаяНакладнаяРасходы.НомерСтроки КАК НомерСтроки
	|	,Выбор когда &ПечатнаяФормаТолькоВРублях 
	|		Тогда
	|			Выбор Когда ПриходнаяНакладнаяРасходы.Ссылка.ВалютаДокумента = &НациональнаяВалюта
	|					Тогда ПриходнаяНакладнаяРасходы.Цена
	|				Когда СуммыДокументовРегламентированныйУчет.Всего ЕСТЬ NULL 
	|					Тогда Выразить(ПриходнаяНакладнаяРасходы.Цена * ПриходнаяНакладнаяРасходы.Ссылка.Курс / ПриходнаяНакладнаяРасходы.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|				Иначе
	|					Выбор Когда ПриходнаяНакладнаяРасходы.Количество = 0
	|						Тогда (СуммыДокументовРегламентированныйУчет.Всего - СуммыДокументовРегламентированныйУчет.НДС)
	|						Иначе Выразить((СуммыДокументовРегламентированныйУчет.Всего - СуммыДокументовРегламентированныйУчет.НДС) / ПриходнаяНакладнаяРасходы.Количество КАК ЧИСЛО(15, 2)) Конец
	|			Конец
	|		Иначе ПриходнаяНакладнаяРасходы.Цена Конец КАК Цена
	|	,Выбор когда &ПечатнаяФормаТолькоВРублях 
	|		Тогда
	|			Выбор Когда ПриходнаяНакладнаяРасходы.Ссылка.ВалютаДокумента = &НациональнаяВалюта
	|					Тогда ПриходнаяНакладнаяРасходы.Сумма
	|				Когда СуммыДокументовРегламентированныйУчет.Всего ЕСТЬ NULL 
	|					Тогда Выразить(ПриходнаяНакладнаяРасходы.Сумма * ПриходнаяНакладнаяРасходы.Ссылка.Курс / ПриходнаяНакладнаяРасходы.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|				Иначе
	|					Выбор Когда ПриходнаяНакладнаяРасходы.Ссылка.СуммаВключаетНДС
	|						Тогда Выразить(СуммыДокументовРегламентированныйУчет.Всего КАК ЧИСЛО(15, 2))
	|						Иначе Выразить(СуммыДокументовРегламентированныйУчет.Всего - СуммыДокументовРегламентированныйУчет.НДС КАК ЧИСЛО(15, 2)) Конец
	|			Конец
	|		Иначе ПриходнаяНакладнаяРасходы.Сумма Конец КАК Сумма
	|	,Выбор когда &ПечатнаяФормаТолькоВРублях 
	|		Тогда
	|			Выбор Когда ПриходнаяНакладнаяРасходы.Ссылка.ВалютаДокумента = &НациональнаяВалюта
	|					Тогда ПриходнаяНакладнаяРасходы.СуммаНДС
	|				Когда СуммыДокументовРегламентированныйУчет.Всего ЕСТЬ NULL 
	|					Тогда Выразить(ПриходнаяНакладнаяРасходы.СуммаНДС * ПриходнаяНакладнаяРасходы.Ссылка.Курс / ПриходнаяНакладнаяРасходы.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|				Иначе СуммыДокументовРегламентированныйУчет.НДС
	|			Конец
	|		Иначе ПриходнаяНакладнаяРасходы.СуммаНДС Конец КАК СуммаНДС
	|	,Выбор когда &ПечатнаяФормаТолькоВРублях 
	|		Тогда
	|			Выбор Когда ПриходнаяНакладнаяРасходы.Ссылка.ВалютаДокумента = &НациональнаяВалюта
	|					Тогда ПриходнаяНакладнаяРасходы.Всего
	|				Когда СуммыДокументовРегламентированныйУчет.Всего ЕСТЬ NULL 
	|					Тогда Выразить(ПриходнаяНакладнаяРасходы.Всего * ПриходнаяНакладнаяРасходы.Ссылка.Курс / ПриходнаяНакладнаяРасходы.Ссылка.Кратность КАК ЧИСЛО(15, 2))
	|				Иначе СуммыДокументовРегламентированныйУчет.Всего
	|			Конец
	|		Иначе ПриходнаяНакладнаяРасходы.Всего Конец КАК Всего
	|	,ПриходнаяНакладнаяРасходы.Ссылка КАК Ссылка
	|	,ПриходнаяНакладнаяРасходы.НоменклатураНабора КАК НоменклатураНабора
	|	,ПриходнаяНакладнаяРасходы.ХарактеристикаНабора КАК ХарактеристикаНабора
	|	,ПриходнаяНакладнаяРасходы.ЭтоНабор КАК ЭтоНабор
	|	,Неопределено КАК СтранаСсылка
	|	,Неопределено КАК СтранаПредставление
	|	,Неопределено КАК СтранаКод
	|	,Неопределено КАК ПредставлениеГТД
	|	,ПриходнаяНакладнаяРасходы.НеобходимоВыделитьКакСоставНабора КАК НеобходимоВыделитьКакСоставНабора
	|	,Выбор когда ПриходнаяНакладнаяРасходы.Номенклатура.ТипНоменклатуры = Значение(Перечисление.ТипыНоменклатуры.Запас)
	|		Тогда ПриходнаяНакладнаяРасходы.Номенклатура.ТоварнаяНоменклатураВЭД.Код
	|		Иначе Неопределено Конец КАК КодТНВЭД
	|ИЗ
	|	ВременнаяТаблица_ПриходнаяНакладнаяРасходы КАК ПриходнаяНакладнаяРасходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовРегламентированныйУчет КАК СуммыДокументовРегламентированныйУчет
	|		ПО ПриходнаяНакладнаяРасходы.Ссылка = СуммыДокументовРегламентированныйУчет.Регистратор
	|			И ПриходнаяНакладнаяРасходы.НомерСтроки = СуммыДокументовРегламентированныйУчет.НомерСтрокиДокумента
	|			И СуммыДокументовРегламентированныйУчет.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Расходы)
	|ГДЕ
	|	ПриходнаяНакладнаяРасходы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";

	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Результат = МассивРезультатов[0].Выгрузить();
	
	ТЗСтрокЗапасы = МассивРезультатов[2].Выгрузить();
	ТЗСтрокРасходы = МассивРезультатов[4].Выгрузить();
	
	Для Каждого ТекущаяСтрока Из Результат Цикл
		
		НайденныеСтроки = ТЗСтрокЗапасы.НайтиСтроки(Новый Структура("Ссылка", ТекущаяСтрока.Ссылка));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекущаяСтрока.ТаблицаЗапасы = ТЗСтрокЗапасы.Скопировать(НайденныеСтроки);
		КонецЕсли;
		
		НайденныеСтроки = ТЗСтрокРасходы.НайтиСтроки(Новый Структура("Ссылка", ТекущаяСтрока.Ссылка));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекущаяСтрока.ТаблицаРасходы = ТЗСтрокРасходы.Скопировать(НайденныеСтроки);
		КонецЕсли;
		
		//Для приходной накладной расходы должны попасть в табличную часть запасы
		НомерДобавляемойСтроки = ТекущаяСтрока.ТаблицаЗапасы.Количество();
		Для каждого СтрокаРасходов Из ТекущаяСтрока.ТаблицаРасходы Цикл
			
			НоваяСтрока = ТекущаяСтрока.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасходов);
			
			НомерДобавляемойСтроки = НомерДобавляемойСтроки + 1;
			НоваяСтрока.НомерСтроки = НомерДобавляемойСтроки;
			
		КонецЦикла;
	КонецЦикла;
	
	// Наборы
	НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(Результат, "ТаблицаЗапасы", Ошибки);
	НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(Результат, "ТаблицаРасходы", Ошибки);
	
	Возврат Результат;
	
КонецФункции

Функция УниверсальныйЗапросПоДаннымДокумента(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст =
	"
	//:::Шапка
	|Выбрать
	|	ПриходнаяНакладная.Ссылка КАК Ссылка
	|	,""Приходная накладная"" КАК ПредставлениеРегистратора
	|	,ПриходнаяНакладная.Дата КАК ДатаДокумента
	|	,ПриходнаяНакладная.Номер
	|	,ПриходнаяНакладная.Ячейка КАК ПредставлениеЯчейки
	|	,ПриходнаяНакладная.Организация КАК Организация
	|	,ПриходнаяНакладная.Организация.КодПоОКПО КАК ОрганизацияПоОКПО
	|	,Неопределено КАК ВидДеятельностиПоОКДП
	|	,ПриходнаяНакладная.Организация.Префикс КАК Префикс
	|	,ПриходнаяНакладная.Подразделение КАК ПредставлениеПодразделения
	|	,ПриходнаяНакладная.СтруктурнаяЕдиница КАК ПредставлениеСклада
	|	,ПриходнаяНакладная.СтруктурнаяЕдиница.УсловияХранения КАК УсловияХранения
	|	,ПриходнаяНакладная.СуммаВключаетНДС КАК СуммаВключаетНДС
	|	,ПриходнаяНакладная.ВалютаДокумента КАК ВалютаДокумента
	|	,ПриходнаяНакладная.Курс КАК Курс
	|	,ПриходнаяНакладная.Кратность КАК Кратность
	|	,ПриходнаяНакладная.Контрагент КАК Контрагент
	|	,ПриходнаяНакладная.Контрагент.КодПоОКПО КАК ПоклажедательПоОКПО
	|	,ПриходнаяНакладная.СрокХранения КАК СрокХранения
	|	,Неопределено КАК ВидОперации
	|	,""Запасы"" КАК ТипНоменклатурыТаблицы
	|	,ПриходнаяНакладная.КонтактноеЛицоПодписант.Наименование КАК РасшифровкаПодписиКонтрагента
	|	,ПриходнаяНакладная.Договор.НомерДоговора КАК ДоговорНомер
	|	,ПриходнаяНакладная.Договор.ДатаДоговора КАК ДоговорДата
	|	,ПриходнаяНакладная.ПодписьКладовщика.Должность КАК ДолжностьКладовщика
	|	,ПриходнаяНакладная.ПодписьКладовщика.РасшифровкаПодписи КАК РасшифровкаПодписиКладовщика
	|
	//:::Табличная часть "Запасы"
	|	,ПриходнаяНакладная.Запасы.(
	|		НомерСтроки КАК НомерСтроки
	|		,Содержание КАК Содержание
	|		,Выбор когда Выразить(ПриходнаяНакладная.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(100)) = """"
	|			Тогда ПриходнаяНакладная.Запасы.Номенклатура.Наименование
	|			Иначе ПриходнаяНакладная.Запасы.Номенклатура.НаименованиеПолное Конец КАК ПредставлениеНоменклатуры
	|		,Номенклатура.Артикул КАК Артикул
	|		,Номенклатура.Код КАК Код
	|		,Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	|		,Номенклатура.Склад КАК Склад
	|		,Номенклатура.Ячейка КАК Ячейка
	|		,Характеристика
	|		,Партия
	|		,ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения
	|		,Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияПоОКЕИ_Наименование
	|		,Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияПоОКЕИ_Код
	|		,Цена
	|		,Сумма
	|		,СтавкаНДС
	|		,СуммаНДС
	|		,Всего
	|		,Количество
	|		,Выбор когда ЕдиницаИзмерения Ссылка Справочник.ЕдиницыИзмерения
	|			Тогда Количество * ЕдиницаИзмерения.Коэффициент
	|			Иначе Количество Конец КАК КоличествоПоКоэффициенту
	|		,0 КАК ПроцентСкидкиНаценки
	|		,0 КАК ЕстьСкидка
	|		,0 КАК СуммаАвтоматическойСкидки
	|		,Ложь КАК ЭтоРазделитель
	|		,КлючСвязи
	|		,Заказ
	|	) КАК ТаблицаЗапасы
	|
	//:::Табличная часть "СерийныеНомера"
	|	,ПриходнаяНакладная.СерийныеНомера.(
	|		СерийныйНомер
	|		,КлючСвязи
	|	) КАК ТаблицаСерийныеНомера
	|Из Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|Где ПриходнаяНакладная.Ссылка В(&МассивОбъектов)
	|Упорядочить по НомерСтроки";
	
	ДанныеДокументов = Запрос.Выполнить().Выгрузить();
	
	ИспользуемыеТЧ = Новый Соответствие;
	ИспользуемыеТЧ.Вставить("ТаблицаЗапасы", Перечисления.ТабличныеЧастиДокументов.Запасы);
	ПечатьДокументовУНФ.ДобавитьСуммовыеПоляЭквивалентовВНациональнойВалюте(ДанныеДокументов, ИспользуемыеТЧ);
	
	Возврат ДанныеДокументов;
	
КонецФункции

// Функция формирует печатную форму документа.
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент в который будет выводится печатная
//				   форма.
Функция ПечатнаяФормаНакладная(МассивОбъектов, ОбъектыПечати)
	Перем ПервыйДокумент, НомерСтрокиНачало, Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПриходнаяНакладная";
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходнаяНакладная_Накладная";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПриходнаяНакладная.ПФ_MXL_ПриходнаяНакладная");
		
	ПредставлениеСкидки = Константы.ПредставлениеСкидкиВПечатнойФорме.Получить();
	
	ПараметрыНоменклатуры = Новый Структура;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходнаяНакладная.Ссылка КАК Ссылка,
	|	ПриходнаяНакладная.Дата КАК ДатаДокумента,
	|	ПриходнаяНакладная.Контрагент КАК Организация,
	|	ПриходнаяНакладная.Организация КАК Контрагент,
	|	ПриходнаяНакладная.КонтактноеЛицоПодписант.Наименование КАК КонтактноеЛицоПодписант,
	|	ПриходнаяНакладная.ПодписьКладовщика.Должность КАК ДолжностьКладовщика,
	|	ПриходнаяНакладная.ПодписьКладовщика.РасшифровкаПодписи КАК РасшифровкаПодписиКладовщика,
	|	ПриходнаяНакладная.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ПриходнаяНакладная.Номер,
	|	ПриходнаяНакладная.Организация.Префикс КАК Префикс,
	|	ПриходнаяНакладная.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|			ТОГДА ""(Поступление от поставщика)""
	|		КОГДА ПриходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию)
	|			ТОГДА ""(Прием на комиссию)""
	|		КОГДА ПриходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку)
	|			ТОГДА ""(Прием в переработку)""
	|		КОГДА ПриходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаОтветхранение)
	|			ТОГДА ""(Прием от контрагента на ответственное хранение)""
	|		КОГДА ПриходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|			ТОГДА ""(Возврат от покупателя)""
	|		КОГДА ПриходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера)
	|			ТОГДА ""(Возврат от комиссионера)""
	|		КОГДА ПриходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика)
	|			ТОГДА ""(Возврат от переработчика)""
	|		КОГДА ПриходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратСОтветхранения)
	|			ТОГДА ""(Возврат от контрагента с ответственного хранения)""
	|	КОНЕЦ КАК ВидОперации,
	|	ПриходнаяНакладная.ВидОперации КАК ВидОперацииСсылка,
	|	ПриходнаяНакладная.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ПриходнаяНакладная.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ПриходнаяНакладная.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ПриходнаяНакладная.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК Запас,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.Артикул КАК Артикул,
	|		ЕдиницаИзмерения КАК ЕдиницаХранения,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		ПроцентСкидкиНаценки,
	|		0 КАК СуммаАвтоматическойСкидки,
	|		ВЫБОР
	|			КОГДА ПриходнаяНакладная.Запасы.ПроцентСкидкиНаценки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		Сумма КАК Сумма,
	|		СуммаНДС,
	|		Всего,
	|		Характеристика,
	|		Партия,
	|		Содержание,
	|		КлючСвязи,
	|		ЛОЖЬ КАК ЭтоНабор,
	|		ВЫБОР
	|			КОГДА НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора
	|	) КАК ТаблицаЗапасы,
	|	ПриходнаяНакладная.ДобавленныеНаборы.(
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА НоменклатураНабора.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ЗапасНабора,
	|		НоменклатураНабора.ВариантПечатиНабора КАК ВариантПечатиНабора,
	|		НоменклатураНабора.ТипНоменклатуры КАК ТипНоменклатурыНабора,
	|		НоменклатураНабора.Артикул КАК АртикулНабора,
	|		НоменклатураНабора.Код КАК КодНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияНабора,
	|		ИСТИНА КАК ВыводитьИтоги
	|	) КАК ТаблицаДобавленныеНаборы,
	|	ПриходнаяНакладная.СерийныеНомера.(
	|		СерийныйНомер,
	|		КлючСвязи
	|	) КАК ТаблицаСерийныеНомера
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|ГДЕ
	|	ПриходнаяНакладная.Ссылка В (&МассивОбъектов)
	|
	|Упорядочить по Ссылка, НомерСтроки";
		
	ДанныеДокументов = Запрос.Выполнить().Выгрузить();
	
	// Наборы
	НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(ДанныеДокументов, "ТаблицаЗапасы");
	
	Для каждого Шапка Из ДанныеДокументов Цикл
	
		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабличныйДокумент, ПервыйДокумент, НомерСтрокиНачало);
		
		СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
		СведенияОбКонтрагенте = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
		
		НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Шапка.ДатаДокумента, Шапка.Номер, Шапка.Префикс);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = "Приходная накладная № "
			+ НомерДокумента
			+ " от "
			+ Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
			
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,РегистрационныйНомер,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ЕстьСкидки = Шапка.ТаблицаЗапасы.Итог("ЕстьСкидка") <> 0;
		
		Если ЕстьСкидки Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСоСкидкой");
			
		Иначе
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			
		КонецЕсли;
		
		СтруктураИтогов = Новый Структура("Сумма, СуммаНДС, Всего, Количество, НомерСтроки, ЕстьСкидки, ПредставлениеСкидки", 0, 0, 0, 0, 0, ЕстьСкидки, ПредставлениеСкидки);
		ДанныеПечати = Новый Структура;
		
		Для каждого СтрокаЗапасы Из Шапка.ТаблицаЗапасы Цикл
			
			ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧасти(СтрокаЗапасы, ДанныеПечати, ПараметрыНоменклатуры, СтруктураИтогов, Шапка);
			
			ОбластьМакета.Параметры.Заполнить(СтрокаЗапасы);
			ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Наборы
			НаборыСервер.УчестьОформлениеСтрокиНабора(ТабличныйДокумент, ОбластьМакета, СтрокаЗапасы);
		
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = УправлениеНебольшойФирмойСервер.ФорматСумм(СтруктураИтогов.Сумма);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		Если СтруктураИтогов.СуммаНДС = 0 Тогда
			
			ОбластьМакета.Параметры.НДС = "Без налога (НДС)";
			ОбластьМакета.Параметры.ВсегоНДС = "-";
			
		Иначе
			
			ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
			ОбластьМакета.Параметры.ВсегоНДС = УправлениеНебольшойФирмойСервер.ФорматСумм(СтруктураИтогов.СуммаНДС);
			
		КонецЕсли; 
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = СтруктураИтогов.Всего;
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований "
								+ Строка(СтруктураИтогов.Количество)
								+ ", на сумму "
								+ УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		
		ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
			
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции
 
// Функция формирует печатную форму документа.
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент в который будет выводится печатная
//				   форма.
Функция ПечатнаяФормаНакладнаяСРасходами(МассивОбъектов, ОбъектыПечати)
	Перем ПервыйДокумент, НомерСтрокиНачало, Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПриходнаяНакладная";
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходнаяНакладная_Накладная";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПриходнаяНакладная.ПФ_MXL_ПриходнаяНакладная");
	
	ПредставлениеСкидки = Константы.ПредставлениеСкидкиВПечатнойФорме.Получить();
	
	ПараметрыНоменклатуры = Новый Структура;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходнаяНакладная.Ссылка КАК Ссылка,
	|	ПриходнаяНакладная.Дата КАК ДатаДокумента,
	|	ПриходнаяНакладная.Организация КАК Контрагент,
	|	ПриходнаяНакладная.Организация.Префикс КАК Префикс,
	|	ПриходнаяНакладная.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ПриходнаяНакладная.Номер,
	|	ПриходнаяНакладная.Контрагент КАК Организация,
	|	ПриходнаяНакладная.КонтактноеЛицоПодписант.Наименование КАК КонтактноеЛицоПодписант,
	|	ПриходнаяНакладная.ПодписьКладовщика.Должность КАК ДолжностьКладовщика,
	|	ПриходнаяНакладная.ПодписьКладовщика.РасшифровкаПодписи КАК РасшифровкаПодписиКладовщика,
	|	ПриходнаяНакладная.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
	|			ТОГДА ""(Поступление от поставщика)""
	|		КОГДА ПриходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию)
	|			ТОГДА ""(Прием на комиссию)""
	|		КОГДА ПриходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку)
	|			ТОГДА ""(Прием в переработку)""
	|		КОГДА ПриходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаОтветхранение)
	|			ТОГДА ""(Прием от контрагента на ответственное хранение)""
	|		КОГДА ПриходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
	|			ТОГДА ""(Возврат от покупателя)""
	|		КОГДА ПриходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера)
	|			ТОГДА ""(Возврат от комиссионера)""
	|		КОГДА ПриходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика)
	|			ТОГДА ""(Возврат от переработчика)""
	|		КОГДА ПриходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратСОтветхранения)
	|			ТОГДА ""(Возврат от контрагента с ответственного хранения)""
	|	КОНЕЦ КАК ВидОперации,
	|	ПриходнаяНакладная.ВидОперации КАК ВидОперацииСсылка,
	|	ПриходнаяНакладная.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ПриходнаяНакладная.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ПриходнаяНакладная.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ПриходнаяНакладная.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК Запас,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Код КАК Код,
	|		ЕдиницаИзмерения КАК ЕдиницаХранения,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		ПроцентСкидкиНаценки,
	|		0 КАК СуммаАвтоматическойСкидки,
	|		ВЫБОР
	|			КОГДА ПриходнаяНакладная.Запасы.ПроцентСкидкиНаценки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		Сумма КАК Сумма,
	|		СуммаНДС,
	|		Всего,
	|		Характеристика,
	|		Партия,
	|		Содержание,
	|		КлючСвязи,
	|		ЛОЖЬ КАК ЭтоНабор,
	|		ВЫБОР
	|			КОГДА НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора
	|	) КАК ТаблицаЗапасы,
	|	ПриходнаяНакладная.ДобавленныеНаборы.(
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА НоменклатураНабора.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ЗапасНабора,
	|		НоменклатураНабора.ВариантПечатиНабора КАК ВариантПечатиНабора,
	|		НоменклатураНабора.ТипНоменклатуры КАК ТипНоменклатурыНабора,
	|		НоменклатураНабора.Артикул КАК АртикулНабора,
	|		НоменклатураНабора.Код КАК КодНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияНабора,
	|		ИСТИНА КАК ВыводитьИтоги
	|	) КАК ТаблицаДобавленныеНаборы,
	|	ПриходнаяНакладная.Расходы.(
	|		НомерСтроки,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ПриходнаяНакладная.Расходы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ПриходнаяНакладная.Расходы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ПриходнаяНакладная.Расходы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК Расход,
	|		Номенклатура,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.Артикул КАК Артикул,
	|		ЕдиницаИзмерения КАК ЕдиницаХранения,
	|		Количество,
	|		Цена,
	|		ПроцентСкидкиНаценки,
	|		0 КАК СуммаАвтоматическойСкидки,
	|		Сумма,
	|		СтавкаНДС,
	|		СуммаНДС,
	|		Всего,
	|		ЗаказПоставщику,
	|		Заказ,
	|		СтруктурнаяЕдиница,
	|		НаправлениеДеятельности,
	|		Содержание
	|	) КАК ТаблицаРасходы,
	|	ПриходнаяНакладная.СерийныеНомера.(
	|		СерийныйНомер,
	|		КлючСвязи
	|	) КАК ТаблицаСерийныеНомера
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|ГДЕ
	|	ПриходнаяНакладная.Ссылка В (&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка, НомерСтроки";
	
	ДанныеДокументов = Запрос.Выполнить().Выгрузить();
	
	// Наборы
	НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(ДанныеДокументов, "ТаблицаЗапасы");
	
	Для каждого Шапка Из ДанныеДокументов Цикл
	
		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабличныйДокумент, ПервыйДокумент, НомерСтрокиНачало);
		
		СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
		СведенияОбКонтрагенте = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
		
		НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Шапка.ДатаДокумента, Шапка.Номер, Шапка.Префикс);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = "Приходная накладная № "
			+ НомерДокумента
			+ " от "
			+ Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
			
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,РегистрационныйНомер,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ЕстьСкидки = Шапка.ТаблицаЗапасы.Итог("ЕстьСкидка") <> 0;
		
		Если ЕстьСкидки Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСоСкидкой");
			
		Иначе
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			
		КонецЕсли;
		
		СтруктураИтогов = Новый Структура("Сумма, СуммаНДС, Всего, Количество, НомерСтроки, ЕстьСкидки, ПредставлениеСкидки", 0, 0, 0, 0, 0, ЕстьСкидки, ПредставлениеСкидки);
		ПараметрыНоменклатуры = Новый Структура;
		ДанныеПечати = Новый Структура;
		
		Для каждого СтрокаЗапасы Из Шапка.ТаблицаЗапасы Цикл
			
			ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧасти(СтрокаЗапасы, ДанныеПечати, ПараметрыНоменклатуры, СтруктураИтогов, Шапка);
			
			ОбластьМакета.Параметры.Заполнить(СтрокаЗапасы);
			ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Наборы
			НаборыСервер.УчестьОформлениеСтрокиНабора(ТабличныйДокумент, ОбластьМакета, СтрокаЗапасы);
				
		КонецЦикла;
		
		// Расходы
		Для каждого СтрокаРасходы Из Шапка.ТаблицаРасходы Цикл
			
			ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиРасходы(СтрокаРасходы, ДанныеПечати, ПараметрыНоменклатуры, СтруктураИтогов, Шапка);
			
			ОбластьМакета.Параметры.Заполнить(СтрокаРасходы);
			ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = УправлениеНебольшойФирмойСервер.ФорматСумм(СтруктураИтогов.Сумма);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		Если СтруктураИтогов.СуммаНДС = 0 Тогда
			
			ОбластьМакета.Параметры.НДС = "Без налога (НДС)";
			ОбластьМакета.Параметры.ВсегоНДС = "-";
			
		Иначе
			
			ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
			ОбластьМакета.Параметры.ВсегоНДС = УправлениеНебольшойФирмойСервер.ФорматСумм(СтруктураИтогов.СуммаНДС);
			
		КонецЕсли; 
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = СтруктураИтогов.Всего;
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований "
											+ Строка(СтруктураИтогов.Количество)
											+ ", на сумму "
											+ УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		
		ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формирует печатную форму документа.
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент в который будет выводится печатная
//				   форма.
Функция ПечатнаяФормаНакладнаяВРозничныхЦенах(МассивОбъектов, ОбъектыПечати)
	Перем ПервыйДокумент, НомерСтрокиНачало, Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПриходнаяНакладная";
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходнаяНакладная_Накладная";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПриходнаяНакладная.ПФ_MXL_ПриходнаяНакладная");
	
	ПараметрыНоменклатуры = Новый Структура;
	
	Для каждого ТекущийДокумент Из МассивОбъектов Цикл
	
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
			
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ШапкаДокумента.Ссылка КАК Ссылка,
		|	ШапкаДокумента.Дата КАК ДатаДокумента,
		|	ШапкаДокумента.Контрагент КАК Организация,
		|	ШапкаДокумента.Организация КАК Контрагент,
		|	ШапкаДокумента.КонтактноеЛицоПодписант.Наименование КАК КонтактноеЛицоПодписант,
		|	ШапкаДокумента.ПодписьКладовщика.Должность КАК ДолжностьКладовщика,
		|	ШапкаДокумента.ПодписьКладовщика.РасшифровкаПодписи КАК РасшифровкаПодписиКладовщика,
		|	ШапкаДокумента.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	ШапкаДокумента.ВалютаДокумента КАК ВалютаДокумента,
		|	ВЫБОР
		|		КОГДА ШапкаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)
		|			ТОГДА ""(Поступление от поставщика)""
		|		КОГДА ШапкаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию)
		|			ТОГДА ""(Прием на комиссию)""
		|		КОГДА ШапкаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку)
		|			ТОГДА ""(Прием в переработку)""
		|		КОГДА ШапкаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаОтветхранение)
		|			ТОГДА ""(Прием от контрагента на ответственное хранение)""
		|		КОГДА ШапкаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя)
		|			ТОГДА ""(Возврат от покупателя)""
		|		КОГДА ШапкаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера)
		|			ТОГДА ""(Возврат от комиссионера)""
		|		КОГДА ШапкаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика)
		|			ТОГДА ""(Возврат от переработчика)""
		|		КОГДА ШапкаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратСОтветхранения)
		|			ТОГДА ""(Возврат от контрагента с ответственного хранения)""
		|	КОНЕЦ КАК ВидОперации,
		|	ШапкаДокумента.ВидОперации КАК ВидОперацииСсылка,
		|	ШапкаДокумента.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК СтруктурнаяЕдиницаТипСтруктурнойЕдиницы,
		|	ШапкаДокумента.Номер КАК Номер,
		|	ШапкаДокумента.Организация.Префикс КАК Префикс,
		|	ШапкаДокумента.Запасы.(
		|		Ссылка КАК Ссылка
		|	) КАК ТаблицаЗапасы,
		|	ШапкаДокумента.ДобавленныеНаборы.(
		|		Ссылка КАК Ссылка
		|	) КАК ТаблицаДобавленныеНаборы,
		|	ШапкаДокумента.СерийныеНомера.(
		|		Ссылка КАК Ссылка
		|	) КАК ТаблицаСерийныеНомера
		|ИЗ
		|	Документ.ПриходнаяНакладная КАК ШапкаДокумента
		|ГДЕ
		|	ШапкаДокумента.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриходнаяНакладная.Ссылка КАК Ссылка,
		|	ПриходнаяНакладная.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(ПриходнаяНакладная.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
		|			ТОГДА ПриходнаяНакладная.Номенклатура.Наименование
		|		ИНАЧЕ ВЫРАЗИТЬ(ПриходнаяНакладная.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
		|	КОНЕЦ КАК Запас,
		|	ПриходнаяНакладная.Номенклатура.Артикул КАК Артикул,
		|	ПриходнаяНакладная.Номенклатура.Код КАК Код,
		|	ПриходнаяНакладная.ЕдиницаИзмерения КАК ЕдиницаХранения,
		|	ПриходнаяНакладная.Количество КАК Количество,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦен.ЦенаВключаетНДС = ПриходнаяНакладная.Ссылка.СуммаВключаетНДС
		|				ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
		|			КОГДА НЕ ЦеныНоменклатурыСрезПоследних.ВидЦен.ЦенаВключаетНДС
		|				ТОГДА ЦеныНоменклатурыСрезПоследних.Цена * (ПриходнаяНакладная.СтавкаНДС.Ставка + 100) / 100
		|			КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦен.ЦенаВключаетНДС
		|				ТОГДА ЦеныНоменклатурыСрезПоследних.Цена / (ПриходнаяНакладная.СтавкаНДС.Ставка + 100) * 100
		|		КОНЕЦ, 0) КАК Цена,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦен.ЦенаВключаетНДС = ПриходнаяНакладная.Ссылка.СуммаВключаетНДС
		|				ТОГДА ЦеныНоменклатурыСрезПоследних.Цена * ПриходнаяНакладная.Количество
		|			КОГДА НЕ ЦеныНоменклатурыСрезПоследних.ВидЦен.ЦенаВключаетНДС
		|				ТОГДА ЦеныНоменклатурыСрезПоследних.Цена * ПриходнаяНакладная.Количество * (ПриходнаяНакладная.СтавкаНДС.Ставка + 100) / 100
		|			КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦен.ЦенаВключаетНДС
		|				ТОГДА ЦеныНоменклатурыСрезПоследних.Цена * ПриходнаяНакладная.Количество / (ПриходнаяНакладная.СтавкаНДС.Ставка + 100) * 100
		|		КОНЕЦ, 0) КАК Сумма,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦен.ЦенаВключаетНДС
		|				ТОГДА ЦеныНоменклатурыСрезПоследних.Цена * ПриходнаяНакладная.Количество * ПриходнаяНакладная.СтавкаНДС.Ставка / (100 + ПриходнаяНакладная.СтавкаНДС.Ставка)
		|			КОГДА НЕ ЦеныНоменклатурыСрезПоследних.ВидЦен.ЦенаВключаетНДС
		|				ТОГДА ЦеныНоменклатурыСрезПоследних.Цена * ПриходнаяНакладная.Количество * ПриходнаяНакладная.СтавкаНДС.Ставка / 100
		|		КОНЕЦ, 0) КАК СуммаНДС,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦен.ЦенаВключаетНДС
		|				ТОГДА ЦеныНоменклатурыСрезПоследних.Цена * ПриходнаяНакладная.Количество
		|			КОГДА НЕ ЦеныНоменклатурыСрезПоследних.ВидЦен.ЦенаВключаетНДС
		|				ТОГДА ЦеныНоменклатурыСрезПоследних.Цена * ПриходнаяНакладная.Количество * (ПриходнаяНакладная.СтавкаНДС.Ставка + 100) / 100
		|		КОНЕЦ, 0) КАК Всего,
		|	ПриходнаяНакладная.Характеристика КАК Характеристика,
		|	ПриходнаяНакладная.Партия КАК Партия,
		|	ПриходнаяНакладная.Содержание КАК Содержание,
		|	ПриходнаяНакладная.КлючСвязи КАК КлючСвязи,
		|	ЛОЖЬ КАК ЭтоНабор,
		|	ВЫБОР
		|		КОГДА ПриходнаяНакладная.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|				И ПриходнаяНакладная.НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора,
		|	ПриходнаяНакладная.НоменклатураНабора КАК НоменклатураНабора,
		|	ПриходнаяНакладная.ХарактеристикаНабора КАК ХарактеристикаНабора
		|ИЗ
		|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладная
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДокумента, ВидЦен = &ВидЦен) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ПриходнаяНакладная.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ПриходнаяНакладная.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
		|			И ПриходнаяНакладная.Ссылка.СтруктурнаяЕдиница.РозничныйВидЦен = ЦеныНоменклатурыСрезПоследних.ВидЦен
		|ГДЕ
		|	ПриходнаяНакладная.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриходнаяНакладнаяСерийныеНомера.Ссылка КАК Ссылка,
		|	ПриходнаяНакладнаяСерийныеНомера.СерийныйНомер КАК СерийныйНомер,
		|	ПриходнаяНакладнаяСерийныеНомера.КлючСвязи КАК КлючСвязи
		|ИЗ
		|	Документ.ПриходнаяНакладная.СерийныеНомера КАК ПриходнаяНакладнаяСерийныеНомера
		|ГДЕ
		|	ПриходнаяНакладнаяСерийныеНомера.Ссылка = &ТекущийДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриходнаяНакладнаяДобавленныеНаборы.Ссылка КАК Ссылка,
		|	ПриходнаяНакладнаяДобавленныеНаборы.НоменклатураНабора КАК НоменклатураНабора,
		|	ПриходнаяНакладнаяДобавленныеНаборы.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|	ПриходнаяНакладнаяДобавленныеНаборы.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(ПриходнаяНакладнаяДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))) = """"
		|			ТОГДА ПриходнаяНакладнаяДобавленныеНаборы.НоменклатураНабора.Наименование
		|		ИНАЧЕ ВЫРАЗИТЬ(ПриходнаяНакладнаяДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))
		|	КОНЕЦ КАК ЗапасНабора,
		|	ПриходнаяНакладнаяДобавленныеНаборы.НоменклатураНабора.ВариантПечатиНабора КАК ВариантПечатиНабора,
		|	ПриходнаяНакладнаяДобавленныеНаборы.НоменклатураНабора.ТипНоменклатуры КАК ТипНоменклатурыНабора,
		|	ПриходнаяНакладнаяДобавленныеНаборы.НоменклатураНабора.Артикул КАК АртикулНабора,
		|	ПриходнаяНакладнаяДобавленныеНаборы.НоменклатураНабора.Код КАК КодНабора,
		|	ПриходнаяНакладнаяДобавленныеНаборы.НоменклатураНабора.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНабора,
		|	ПриходнаяНакладнаяДобавленныеНаборы.НоменклатураНабора.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияНабора,
		|	ИСТИНА КАК ВыводитьИтоги
		|ИЗ
		|	Документ.ПриходнаяНакладная.ДобавленныеНаборы КАК ПриходнаяНакладнаяДобавленныеНаборы
		|ГДЕ
		|	ПриходнаяНакладнаяДобавленныеНаборы.Ссылка = &ТекущийДокумент";
		
		Запрос.УстановитьПараметр("ВидЦен", ТекущийДокумент.СтруктурнаяЕдиница.РозничныйВидЦен);
		Запрос.УстановитьПараметр("ДатаДокумента", ТекущийДокумент.Дата);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		ДанныеДокументов = МассивРезультатов[0].Выгрузить();
		ТаблицаЗапасы = МассивРезультатов[1].Выгрузить();
		ТаблицаСерийныеНомера = МассивРезультатов[2].Выгрузить();
		ТаблицаДобавленныеНаборы = МассивРезультатов[3].Выгрузить();
		Для каждого Шапка Из ДанныеДокументов Цикл
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Ссылка", Шапка.Ссылка);
			Шапка.ТаблицаЗапасы = ТаблицаЗапасы.Скопировать(СтруктураОтбора);
			Шапка.ТаблицаСерийныеНомера = ТаблицаСерийныеНомера.Скопировать(СтруктураОтбора);
			Шапка.ТаблицаДобавленныеНаборы = ТаблицаДобавленныеНаборы.Скопировать(СтруктураОтбора);
		КонецЦикла;
		
		// Наборы
		НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(ДанныеДокументов, "ТаблицаЗапасы");

		Для каждого Шапка Из ДанныеДокументов Цикл
			
			ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабличныйДокумент, ПервыйДокумент, НомерСтрокиНачало);
		
			СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
			СведенияОбКонтрагенте = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
			
			НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Шапка.ДатаДокумента, Шапка.Номер, Шапка.Префикс);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			ОбластьМакета.Параметры.ТекстЗаголовка =
				"Приходная накладная № "
				+ НомерДокумента
				+ " от "
				+ Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
			
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ОбластьМакета.Параметры.ПредставлениеПоставщика = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(
				СведенияОбОрганизации,
				"ПолноеНаименование,ИНН,КПП,РегистрационныйНомер,ЮридическийАдрес,Телефоны,"
			);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
			ОбластьМакета.Параметры.ПредставлениеПолучателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(
				СведенияОбКонтрагенте,
				"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"
			);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			
			СтруктураИтогов = Новый Структура("Сумма, СуммаНДС, Всего, Количество, НомерСтроки, ЕстьСкидки", 0, 0, 0, 0, 0, Ложь);
			ПараметрыНоменклатуры = Новый Структура;
			ДанныеПечати = Новый Структура;
			
			Для каждого СтрокаЗапасы Из Шапка.ТаблицаЗапасы Цикл
				
				ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧасти(СтрокаЗапасы, ДанныеПечати, ПараметрыНоменклатуры, СтруктураИтогов, Шапка);
				
				ОбластьМакета.Параметры.Заполнить(СтрокаЗапасы);
				ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				// Наборы
				НаборыСервер.УчестьОформлениеСтрокиНабора(ТабличныйДокумент, ОбластьМакета, СтрокаЗапасы);
					
			КонецЦикла;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Итого");
			ОбластьМакета.Параметры.Всего = УправлениеНебольшойФирмойСервер.ФорматСумм(СтруктураИтогов.Сумма);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			Если СтруктураИтогов.СуммаНДС = 0 Тогда
				ОбластьМакета.Параметры.НДС = "Без налога (НДС)";
				ОбластьМакета.Параметры.ВсегоНДС = "-";
			Иначе
				ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
				ОбластьМакета.Параметры.ВсегоНДС = УправлениеНебольшойФирмойСервер.ФорматСумм(СтруктураИтогов.СуммаНДС);
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
			СуммаКПрописи = СтруктураИтогов.Всего;
			ОбластьМакета.Параметры.ИтоговаяСтрока =
				"Всего наименований "
			  + Строка(СтруктураИтогов.Количество)
			  + ", на сумму "
			  + УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
			
			ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(
				СуммаКПрописи,
				Шапка.ВалютаДокумента);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
				
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
			
		КонецЦикла; 
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Процедура ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, ДанныеПечати, ПараметрыНоменклатуры, СтруктураИтогов, Шапка)
	
	ДанныеПечати.Очистить();
	
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		НомерСтроки = 0;
	Иначе
		СтруктураИтогов.НомерСтроки = СтруктураИтогов.НомерСтроки+1;
		НомерСтроки = СтруктураИтогов.НомерСтроки;
	КонецЕсли;
	ДанныеПечати.Вставить("НомерСтроки", НомерСтроки);
	
	ПараметрыНоменклатуры.Очистить();
	ПараметрыНоменклатуры.Вставить("Содержание", СтрокаТабличнойЧасти.Содержание);
	ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", СтрокаТабличнойЧасти.Запас);
	ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", СтрокаТабличнойЧасти.Характеристика);
	ПараметрыНоменклатуры.Вставить("ПредставлениеАртикула", СтрокаТабличнойЧасти.Артикул);
	ПараметрыНоменклатуры.Вставить("ПредставлениеСерийногоНомера", РаботаССерийнымиНомерами.СтрокаСерийныеНомера(Шапка.ТаблицаСерийныеНомера, СтрокаТабличнойЧасти.КлючСвязи));
	// Наборы
	ПараметрыНоменклатуры.Вставить("НеобходимоВыделитьКакСоставНабора", СтрокаТабличнойЧасти.НеобходимоВыделитьКакСоставНабора);
	
	ДанныеПечати.Вставить("Запас", ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры));
			
	ДанныеПечати.Вставить("ПредставлениеКодаНоменклатуры", ПечатьДокументовУНФ.ПредставлениеКодаНоменклатуры(СтрокаТабличнойЧасти));
			
	Если СтруктураИтогов.ЕстьСкидки Тогда
		
		ДанныеПечати.Вставить("ПредставлениеСкидки", ПечатьДокументовУНФ.ПредставлениеСкидки(СтрокаТабличнойЧасти, СтруктураИтогов));
		
	КонецЕсли;
			
	Если НЕ СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтруктураИтогов.Сумма			= СтруктураИтогов.Сумма			+ СтрокаТабличнойЧасти.Сумма;
		СтруктураИтогов.СуммаНДС		= СтруктураИтогов.СуммаНДС		+ СтрокаТабличнойЧасти.СуммаНДС;
		СтруктураИтогов.Всего			= СтруктураИтогов.Всего			+ СтрокаТабличнойЧасти.Всего;
		СтруктураИтогов.Количество		= СтруктураИтогов.Количество	+ 1;
	КонецЕсли; 
			
КонецПроцедуры

Процедура ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиРасходы(СтрокаТабличнойЧасти, ДанныеПечати, ПараметрыНоменклатуры, СтруктураИтогов, Шапка)
	
	ДанныеПечати.Очистить();
	
	СтруктураИтогов.НомерСтроки = СтруктураИтогов.НомерСтроки+1;
	ДанныеПечати.Вставить("НомерСтроки", СтруктураИтогов.НомерСтроки);
	
	ПараметрыНоменклатуры.Очистить();
	ПараметрыНоменклатуры.Вставить("Содержание", "");
	ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", СтрокаТабличнойЧасти.Номенклатура);
	ПараметрыНоменклатуры.Вставить("ПредставлениеАртикула", СтрокаТабличнойЧасти.Артикул);
	
	ДанныеПечати.Вставить("Запас", ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры));
	
	ДанныеПечати.Вставить("ПредставлениеКодаНоменклатуры", ПечатьДокументовУНФ.ПредставлениеКодаНоменклатуры(СтрокаТабличнойЧасти));
	
	Если СтруктураИтогов.ЕстьСкидки Тогда
		
		ДанныеПечати.Вставить("ПредставлениеСкидки", ПечатьДокументовУНФ.ПредставлениеСкидки(СтрокаТабличнойЧасти, СтруктураИтогов));
		
	КонецЕсли;
	
	СтруктураИтогов.Сумма			= СтруктураИтогов.Сумма			+ СтрокаТабличнойЧасти.Сумма;
	СтруктураИтогов.СуммаНДС		= СтруктураИтогов.СуммаНДС		+ СтрокаТабличнойЧасти.СуммаНДС;
	СтруктураИтогов.Всего			= СтруктураИтогов.Всего			+ СтрокаТабличнойЧасти.Всего;
	СтруктураИтогов.Количество		= СтруктураИтогов.Количество	+ 1;
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная", "Приходная накладная", ПечатнаяФормаНакладная(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НакладнаяСРасходами") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "НакладнаяСРасходами", "Приходная накладная (с расходами)", ПечатнаяФормаНакладнаяСРасходами(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НакладнаяВРозничныхЦенах") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "НакладнаяВРозничныхЦенах", "Приходная накладная", ПечатнаяФормаНакладнаяВРозничныхЦенах(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	ОписаниеПечатнойФормы = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, Обработки.ПечатьМХ1.ИдентификаторПечатнойФормы());
	Если ОписаниеПечатнойФормы <> Неопределено Тогда
		
		ОписаниеПечатнойФормы.ТабличныйДокумент = Новый ТабличныйДокумент;
		ОписаниеПечатнойФормы.ТабличныйДокумент.КлючПараметровПечати = Обработки.ПечатьМХ1.КлючПараметровПечати();
		ОписаниеПечатнойФормы.ПолныйПутьКМакету = Обработки.ПечатьМХ1.ПолныйПутьКМакету();
		ОписаниеПечатнойФормы.СинонимМакета = Обработки.ПечатьМХ1.ПредставлениеПФ();
		
		ДанныеОбъектовПечати = УниверсальныйЗапросПоДаннымДокумента(МассивОбъектов);
		Обработки.ПечатьМХ1.СформироватьПФ(ОписаниеПечатнойФормы, ДанныеОбъектовПечати, ОбъектыПечати);
		
	КонецЕсли;
	
	ОписаниеПечатнойФормы = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "БланкТоварногоНаполнения");
	Если ОписаниеПечатнойФормы <> Неопределено Тогда
		
		ОписаниеПечатнойФормы.ТабличныйДокумент = Новый ТабличныйДокумент;
		ОписаниеПечатнойФормы.ТабличныйДокумент.КлючПараметровПечати = Обработки.ПечатьБланкТоварногоНаполнения.КлючПараметровПечати();
		ОписаниеПечатнойФормы.ПолныйПутьКМакету = Обработки.ПечатьБланкТоварногоНаполнения.ПолныйПутьКМакету();
		ОписаниеПечатнойФормы.СинонимМакета = Обработки.ПечатьБланкТоварногоНаполнения.ПредставлениеПФ();
		
		ДанныеОбъектовПечати = УниверсальныйЗапросПоДаннымДокумента(МассивОбъектов);
		Обработки.ПечатьБланкТоварногоНаполнения.СформироватьПФ(ОписаниеПечатнойФормы, ДанныеОбъектовПечати, ОбъектыПечати);
		
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяСРасходами";
	КомандаПечати.Представление = НСтр("ru = 'Приходная накладная (с услугами)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 4;
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Возврат;
	КонецЕсли;
	// Конец МобильноеПриложение

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("ru = 'Приходная накладная'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяВРозничныхЦенах";
	КомандаПечати.Представление = НСтр("ru = 'Приходная накладная (в розничных ценах)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 7;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = Обработки.ПечатьМХ1.ИдентификаторПечатнойФормы();
	КомандаПечати.Представление = Обработки.ПечатьМХ1.ПредставлениеПФ();
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ФункциональныеОпции = "ПриемЗапасовНаОтветхранение";
	КомандаПечати.Порядок = 10;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "БланкТоварногоНаполнения";
	КомандаПечати.Представление = Обработки.ПечатьБланкТоварногоНаполнения.ПредставлениеПФ();
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 14;
	
	Если ПравоДоступа("Просмотр", Метаданные.Обработки.ПечатьЭтикетокИЦенников)
		И ПолучитьФункциональнуюОпцию("ПечатьЭтикетокИЦенников")
		И НЕ УправлениеНебольшойФирмойУправлениеДоступомПовтИсп.ЕстьПрофильРабочееМестоКассира() Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПечатьЭтикетокИЦенниковИзДокументов";
		КомандаПечати.Идентификатор = "ПечатьЭтикетокИзПриходнойНакладной";
		КомандаПечати.Представление = НСтр("ru = 'Печать этикеток'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.Порядок = 17;
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПечатьЭтикетокИЦенниковИзДокументов";
		КомандаПечати.Идентификатор = "ПечатьЦенниковИзПриходнойНакладной";
		КомандаПечати.Представление = НСтр("ru = 'Печать ценников'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.Порядок = 20;
		
	КонецЕсли;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Обработка.ПечатьСчетФактура.СчетФактураПолученный";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (полученный)'");;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 23;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Конверт";
	КомандаПечати.Представление = НСтр("ru = 'Конверт'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.Обработчик = "ПечатьДокументовУНФКлиент.ПечатьКонверта";
	КомандаПечати.Порядок = 26;
	
КонецПроцедуры

#КонецОбласти

#Конецобласти

#КонецЕсли