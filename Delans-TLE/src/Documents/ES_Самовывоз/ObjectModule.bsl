#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
//ЭР Несторук С.И. 09.02.2017 15:12:43 {
//Документ "Выдача" переименован в "Самовывоз"  
//ЭР Несторук С.И. 09.02.2017 15:12:43 }
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура ЗаполнитьПоЗаказПокупателя(ДанныеЗаполнения) Экспорт 

	ДанныеПоЗаказу = ES_ОбщегоНазначения.ПолучитьДанныеПоЗаказам(ДанныеЗаполнения);
	Склад = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Склад);
	Если НЕ ДанныеПоЗаказу.Пустой() Тогда
		
		СуммаИтого = 0;
		КассаНППоУмолчанию = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.КассаНаложенныхПлатежей);
		СчетПоУмолчанию    = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ДопКассаНП);
		
		ВыборкаЗаказДоставки = ДанныеПоЗаказу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаЗаказДоставки.Следующий() Цикл
			
			ПеремСтоимостьДоставки = 0;
			
			Если ВыборкаЗаказДоставки.Плательщик = Перечисления.ES_ТипыПлательщиков.Получатель Тогда	// плательщик = Получатель
				ПеремСтоимостьДоставки = ВыборкаЗаказДоставки.СтоимостьДоставки;
			КонецЕсли; 
			
			СтоимостьДоставки 	= ПеремСтоимостьДоставки;
			
			СтоимостьПлан		= ПеремСтоимостьДоставки;
			СтоимостьФактНал	= ПеремСтоимостьДоставки;
			
			ВидДоставки 		= ВыборкаЗаказДоставки.ВидДоставки;
			КассаНП 			= КассаНППоУмолчанию;
			КассаСтоимость 		= КассаНППоУмолчанию;
			Получатель 			= ВыборкаЗаказДоставки.Получатель;
			Заказ 				= ВыборкаЗаказДоставки.ДокументДоставки;
			Заказчик 			= ВыборкаЗаказДоставки.Заказчик;
			Договор 			= ВыборкаЗаказДоставки.Договор;
			СправочноЗаказчик 	= ВыборкаЗаказДоставки.СправочноЗаказчик;
			Плательщик 			= ВыборкаЗаказДоставки.Плательщик;
			Касса 				= КассаНППоУмолчанию;
			Счет 				= СчетПоУмолчанию;
			//ЭР Несторук С.И. 09.02.2017 15:21:33 {
			НомерНакладной		= ВыборкаЗаказДоставки.НомерНакладной;
			Склад				= ПолучитьСкладПребыванияЗаказа(ДанныеЗаполнения);
			//ЭР Несторук С.И. 09.02.2017 15:21:33 }
			НПФакт 	= ВыборкаЗаказДоставки.НППлан;
			
			НППлан  = ВыборкаЗаказДоставки.НППлан;
			
			НПФактНал = ВыборкаЗаказДоставки.НППлан;
			Предоплачен = ВыборкаЗаказДоставки.Предоплачен;

			ВыборкаДетальныеЗаписи = ВыборкаЗаказДоставки.Выбрать();
					
			
			Если ВыборкаЗаказДоставки.ПредставлениеГрузов = Перечисления.ES_ПредставлениеГрузов.Места Тогда
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					// ТЧ СписокГрузов / Места
					НовыйМесто = СписокГрузов.Добавить();
					НовыйМесто.ДокументДоставки = ВыборкаЗаказДоставки.ДокументДоставки;
					НовыйМесто.КлючСтроки 		= ВыборкаДетальныеЗаписи.МестоКлючСтроки;
					НовыйМесто.ТипГруза 		= ВыборкаДетальныеЗаписи.МестоТипГруза;
					НовыйМесто.Вес 				= ВыборкаДетальныеЗаписи.МестоВес;
					НовыйМесто.Высота 			= ВыборкаДетальныеЗаписи.МестоВысота;
					НовыйМесто.Длина 			= ВыборкаДетальныеЗаписи.МестоДлина;
					НовыйМесто.Ширина 			= ВыборкаДетальныеЗаписи.МестоШирина;
					НовыйМесто.НППлан 			= ВыборкаДетальныеЗаписи.МестоНППлан;
					НовыйМесто.НПФакт 			= ВыборкаДетальныеЗаписи.МестоНППлан;
					НовыйМесто.ОбъемныйВес 		= ВыборкаДетальныеЗаписи.МестоОбъемныйВес;
					НовыйМесто.ОписаниеГруза 	= ВыборкаДетальныеЗаписи.МестоОписаниеГруза;
					НовыйМесто.Страховка 		= ВыборкаДетальныеЗаписи.МестоСтраховка;
				КонецЦикла; 
				
			ИначеЕсли ВыборкаЗаказДоставки.ПредставлениеГрузов = Перечисления.ES_ПредставлениеГрузов.Запасы Тогда 	
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					// ТЧ Грузы / Запасы
					//ЭР Несторук С.И. 09.02.2017 17:10:45 {
					Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЗапасНоменклатура)  Тогда
						Продолжить;
					КонецЕсли;
					//ЭР Несторук С.И. 09.02.2017 17:10:45 }
					
					НовыйМесто = Грузы.Добавить();
					НовыйМесто.ДокументДоставки 	= ВыборкаЗаказДоставки.ДокументДоставки;
					НовыйМесто.Номенклатура 		= ВыборкаДетальныеЗаписи.ЗапасНоменклатура;
					НовыйМесто.ТипНоменклатурыЗапас = ВыборкаДетальныеЗаписи.ЗапасТипНоменклатурыЗапас;
					НовыйМесто.Характеристика 		= ВыборкаДетальныеЗаписи.ЗапасХарактеристика;
					НовыйМесто.Партия 				= ВыборкаДетальныеЗаписи.ЗапасПартия;
					НовыйМесто.КоличествоПлан 		= ВыборкаДетальныеЗаписи.ЗапасКоличество;
					НовыйМесто.КоличествоФакт 		= ВыборкаДетальныеЗаписи.ЗапасКоличество;
					НовыйМесто.ЕдиницаИзмерения 	= ВыборкаДетальныеЗаписи.ЗапасЕдиницаИзмерения;
					НовыйМесто.Цена 				= ВыборкаДетальныеЗаписи.ЗапасЦена;
					НовыйМесто.ПроцентСкидкиНаценки = ВыборкаДетальныеЗаписи.ЗапасПроцентСкидкиНаценки;
					НовыйМесто.НППлан 				= ВыборкаДетальныеЗаписи.ЗапасНППлан;
					НовыйМесто.НПФакт 				= ВыборкаДетальныеЗаписи.ЗапасНППлан;
					НовыйМесто.Содержание 			= ВыборкаДетальныеЗаписи.ЗапасСодержание;
					НовыйМесто.Вес 					= ВыборкаДетальныеЗаписи.ЗапасВес;
					НовыйМесто.Объем 				= ВыборкаДетальныеЗаписи.ЗапасОбъем;
					НовыйМесто.ОбъемныйВес 			= ВыборкаДетальныеЗаписи.ЗапасОбъемныйВес;
					НовыйМесто.ОбьявленнаяСтоимость = ВыборкаДетальныеЗаписи.ЗапасОбьявленнаяСтоимость;
					НовыйМесто.Опасность 			= ВыборкаДетальныеЗаписи.ЗапасОпасность;
					НовыйМесто.Артикул				= ВыборкаДетальныеЗаписи.ЗапасАртикул;
					НовыйМесто.Штрихкод				= ВыборкаДетальныеЗаписи.ЗапасШтрихкод;
					НовыйМесто.СтавкаНДС			= ВыборкаДетальныеЗаписи.ЗапасСтавкаНДС;
					НовыйМесто.СуммаНДС				= ВыборкаДетальныеЗаписи.ЗапасСуммаНДС;
				КонецЦикла; 
				
			КонецЕсли; 
			
			СуммаИтого = СуммаИтого + СтоимостьДоставки + НПФакт;

		КонецЦикла;
		
		СуммаДокумента = СуммаИтого;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	// Создать на основании можно только из документа "Заказ на доставку"
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя")
	   И ДанныеЗаполнения.ВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.ES_ЗаказНаДоставку Тогда
		ВызватьИсключение НСтр("ru = 'Выдачу заказов можно ввести только на основании документа Заказ на доставку!'");
	КонецЕсли;
	
	//// Выдача заказа нужна только для заказа в статусе "Готов к выдаче" и "ОжитаетВыдачи" - изменено
	//Документ самовывоз можно создать только на основании заказа с видом доставки "Самовывоз" в статусе ПодготовленПринят
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВидДоставки
		|ИЗ
		|	РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(, Заказ = &Заказ) КАК ES_СтатусыЗаказовСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(, Заказ = &Заказ) КАК ES_ДанныеПоЗаказамСрезПоследних
		|		ПО ES_СтатусыЗаказовСрезПоследних.Заказ = ES_ДанныеПоЗаказамСрезПоследних.Заказ";
	
	Запрос.УстановитьПараметр("Заказ", ДанныеЗаполнения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		//ЭР Несторук С.И. 09.02.2017 15:18:01 { 
		Если Выборка.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Подготовлен И
			Выборка.ВидДоставки = Перечисления.ES_ВидыДоставки.Самовывоз ИЛИ 
			Выборка.ВидДоставки = Перечисления.ES_ВидыДоставки.СкладСклад Тогда
		Иначе
			ВызватьИсключение НСтр("ru = 'Самовывоз невозможен'");
			//ЭР Несторук С.И. 09.02.2017 15:18:01 }
		КонецЕсли; 
	КонецЕсли;
	
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		// Заполнение шапки.
		ЭтотОбъект.Заказ = ДанныеЗаполнения;
		
		// Заполнение табличной части.
		ЗаполнитьПоЗаказПокупателя(ДанныеЗаполнения);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	// Удаление пустых строк в ТЧ СписокГрузов и Грузы
	ПустыеСтрокиСписокГрузов = СписокГрузов.НайтиСтроки(Новый Структура("КлючСтроки", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")));
	Для каждого Стр Из ПустыеСтрокиСписокГрузов Цикл
		СписокГрузов.Удалить(Стр);
	КонецЦикла; 
	ПустыеСтрокиГрузы = Грузы.НайтиСтроки(Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка()));
	Для каждого Стр Из ПустыеСтрокиГрузы Цикл
		Грузы.Удалить(Стр);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ES_УчетДСпоЗаказамНаДоставкуОбороты.Заказ, ES_СтатусыЗаказовСрезПоследних.Заказ) КАК Заказ,
		|	ЕСТЬNULL(ES_УчетДСпоЗаказамНаДоставкуОбороты.ПланируемыеНПОборот, 0) КАК ПланируемыеНПОборот,
		|	ЕСТЬNULL(ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа, НЕОПРЕДЕЛЕНО) КАК СтатусЗаказа
		|ИЗ
		|	РегистрНакопления.ES_УчетДСпоЗаказамНаДоставку.Обороты(
		|			,
		|			,
		|			,
		|			Заказ = &Заказ
		|				И Заказчик = &Заказчик) КАК ES_УчетДСпоЗаказамНаДоставкуОбороты
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(, Заказ = &Заказ) КАК ES_СтатусыЗаказовСрезПоследних
		|		ПО ES_УчетДСпоЗаказамНаДоставкуОбороты.Заказ = ES_СтатусыЗаказовСрезПоследних.Заказ";
		
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("Заказчик", Заказчик);
	
	СтатусЗаказа = Неопределено;
	ПланируемыеНП = 0;
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			СтатусЗаказа = Выборка.СтатусЗаказа;
			ПланируемыеНП = Выборка.ПланируемыеНПОборот;
		КонецЕсли; 
	КонецЕсли;
	
	НПФакт = НПФактНал + НПФактБезнал;
	
	ЗаказчикДляЗаписи = ?(Плательщик = Перечисления.ES_ТипыПлательщиков.Получатель, СправочноЗаказчик, Заказчик);
	
	// РН ES_УчетДСпоЗаказамНаДоставку
	Движения.ES_УчетДСпоЗаказамНаДоставку.Записывать = Истина;
	Движение = Движения.ES_УчетДСпоЗаказамНаДоставку.Добавить();
	Движение.Период 		= Дата;
	Движение.Регистратор 	= Ссылка;
	Движение.Заказ 			= Заказ;
	Движение.Заказчик 		= ЗаказчикДляЗаписи;
	
	Если ВидОперации = Перечисления.ES_ВидыОперацийВыдачаЗаказа.Отказ Тогда
		Движение.УдалитьФактическиеНП 	= 0;
		
		Движение.ФактическиеНП_Нал 	= 0;
		Движение.ФактическиеНП_Безнал 	= 0;
		
		//Движение.СтоимостьУслуг = -ПланируемыеНП;
	Иначе
		Движение.УдалитьФактическиеНП 	= НПФакт;
		Движение.ФактическиеНП_Нал 	= НПФактНал;
		Движение.ФактическиеНП_Безнал 	= НПФактБезнал;

	КонецЕсли;
					
	// РН ES_НаложенныеПлатежи
	Если НПФакт > 0 Тогда
		Движения.ES_НаложенныеПлатежи.Записывать = Истина;
		Движение = Движения.ES_НаложенныеПлатежи.ДобавитьПриход();
		Движение.Период 		= Дата;
		Движение.Регистратор 	= Ссылка;
		Движение.Заказчик 		= ЗаказчикДляЗаписи;
		Движение.Заказ 			= Заказ;
		Движение.СуммаНП 		= НПФакт;
		
		Движение.СуммаНП_Нал 	= НПФактНал;
		Движение.СуммаНП_Безнал = НПФактБезнал;
	КонецЕсли; 
	
	// РС ES_СтатусыЗаказов
	Если ВидОперации = Перечисления.ES_ВидыОперацийВыдачаЗаказа.Отказ Тогда
		СтатусЗаказаДляЗаписи = Перечисления.ES_СтатусыЗаказов.Отказ;
		
	Иначе
		// Если нужно вернуть наложенный платеж
		Если НПФакт > 0 Тогда
			//Если СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставлен Тогда
			//	СтатусЗаказаДляЗаписи = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставленРассчитать;
			//Иначе
			//	СтатусЗаказаДляЗаписи = Перечисления.ES_СтатусыЗаказов.ДоставленРассчитать;
			//КонецЕсли; 
			//ЭР Несторук С.И. 10.02.2017 9:41:58 {
			Если НПФакт < НППлан Тогда
				СтатусЗаказаДляЗаписи = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставленРассчитать;
			Иначе
				СтатусЗаказаДляЗаписи = Перечисления.ES_СтатусыЗаказов.ДоставленРассчитать;
			КонецЕсли;
			
			//ЭР Несторук С.И. 10.02.2017 9:41:58 }
		Иначе 
			//Если СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставлен Тогда
			//	СтатусЗаказаДляЗаписи = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставлен;
			//Иначе
			//	СтатусЗаказаДляЗаписи = Перечисления.ES_СтатусыЗаказов.Доставлен;
			//КонецЕсли; 
			СтатусЗаказаДляЗаписи = Перечисления.ES_СтатусыЗаказов.Доставлен;
		КонецЕсли;
	КонецЕсли; 
	
	Движение = Движения.ES_СтатусыЗаказов.Добавить();
	Движение.Период 		= Дата;
	Движение.Регистратор 	= Ссылка;
	Движение.Заказ 			= Заказ;
	Движение.СтатусЗаказа 	= СтатусЗаказаДляЗаписи;
	Движение.Ответственный 	= УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
	
	// РС ES_СведенияОЗаказах
	ТабСведенияОЗаказе = ES_ФормированиеДвиженийПоРегистрамДоставки.СоздатьТаблицуСведенийОЗаказах();
	
	НоваяСтрока = ТабСведенияОЗаказе.Добавить();
	НоваяСтрока.Движения 	= Движения.ES_СведенияОЗаказах;
	НоваяСтрока.Период 		= Дата;
	НоваяСтрока.Регистратор = Ссылка;
	НоваяСтрока.Заказ 		= Заказ;
	НоваяСтрока.Выдача 		= Ссылка;
	
	ES_ФормированиеДвиженийПоРегистрамДоставки.СделатьЗаписьВРССведенияОЗаказах(ТабСведенияОЗаказе, Дата);
	
	// РС ES_ИзменяемыеРеквизитыЗаказа
	Если ЗначениеЗаполнено(Заказ) Тогда
		ТабИзменяемыеРеквизиты = ES_ФормированиеДвиженийПоРегистрамДоставки.СоздатьТабДляИзменяемыхРеквизитов();
		ДобавитьЗаписиВТабИзменяемыеРеквизиты(ТабИзменяемыеРеквизиты);
		ES_ФормированиеДвиженийПоРегистрамДоставки.СделатьЗаписьВРегистрСведенийИзменяемыеРеквизитыЗаказа(ТабИзменяемыеРеквизиты, Ссылка);
	КонецЕсли;
	
	
	//ЭР Несторук С.И. 09.02.2017 17:35:26 {
	Если НЕ ВидОперации = Перечисления.ES_ВидыОперацийВыдачаЗаказа.Отказ Тогда
		Движения.ES_ЗаказыНаСкладе.Записывать = Истина;
		Запрос = Новый Запрос;
		//Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	ES_ВыдачиГрузы.Номенклатура,
		//|	ES_ВыдачиГрузы.Характеристика,
		//|	ES_ВыдачиГрузы.КоличествоФакт,
		//|	ES_ВыдачиГрузы.КоличествоПлан,
		//|	ES_ВыдачиГрузы.НПФакт
		//|ПОМЕСТИТЬ ВТ_Грузы
		//|ИЗ
		//|	Документ.ES_Самовывоз.Грузы КАК ES_ВыдачиГрузы
		//|ГДЕ
		//|	ES_ВыдачиГрузы.Ссылка = &Ссылка
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ВТ_Грузы.Номенклатура,
		//|	ВТ_Грузы.Характеристика,
		//|	ЕСТЬNULL(ВТ_Грузы.КоличествоФакт, 0) КАК КоличествоФакт,
		//|	ЕСТЬNULL(ВТ_Грузы.КоличествоПлан, 0) КАК КоличествоПлан,
		//|	isnull(ВТ_Грузы.НПФакт,0) КАК НПФакт,
		//|	ES_ЗаказыНаСкладеОстатки.Склад,
		//|	ЕСТЬNULL(ES_ЗаказыНаСкладеОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток
		//|ИЗ
		//|	РегистрНакопления.ES_ЗаказыНаСкладе.Остатки(
		//|			,
		//|			Заказ = &Заказ
		//|				И Склад = &Склад) КАК ES_ЗаказыНаСкладеОстатки
		//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Грузы КАК ВТ_Грузы
		//|		ПО ES_ЗаказыНаСкладеОстатки.Номенклатура = ВТ_Грузы.Номенклатура";
		//
		Запрос.Текст = "ВЫБРАТЬ
		               |	ES_Самовывоз.Заказ КАК Заказ
		               |ПОМЕСТИТЬ ВТ_Заказ
		               |ИЗ
		               |	Документ.ES_Самовывоз КАК ES_Самовывоз
		               |ГДЕ
		               |	ES_Самовывоз.Ссылка = &Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_Заказ.Заказ КАК Заказ,
		               |	ЕСТЬNULL(ES_ЗаказыНаСкладеОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
		               |	ES_ЗаказыНаСкладеОстатки.Склад КАК Склад,
		               |	ES_СамовывозГрузы.Номенклатура,
		               |	ES_СамовывозГрузы.Характеристика,
		               |	ЕСТЬNULL(ES_СамовывозГрузы.КоличествоПлан, 0) КАК КоличествоПлан,
		               |	ЕСТЬNULL(ES_СамовывозГрузы.КоличествоФакт, 0) КАК КоличествоФакт,
		               |	ЕСТЬNULL(ES_СамовывозГрузы.НПФакт, 0) КАК НПФакт,
		               |	ЕСТЬNULL(ES_СамовывозГрузы.Содержание, """") КАК Содержание
		               |ИЗ
		               |	ВТ_Заказ КАК ВТ_Заказ
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ES_ЗаказыНаСкладе.Остатки(
		               |				&МоментВремени,
		               |				Заказ В
		               |						(ВЫБРАТЬ
		               |							ВТ_Заказ.Заказ
		               |						ИЗ
		               |							ВТ_Заказ КАК ВТ_Заказ)
		               |					И Склад = &Склад) КАК ES_ЗаказыНаСкладеОстатки
		               |		ПО ВТ_Заказ.Заказ = ES_ЗаказыНаСкладеОстатки.Заказ
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ES_Самовывоз.Грузы КАК ES_СамовывозГрузы
		               |		ПО ВТ_Заказ.Заказ = ES_СамовывозГрузы.ДокументДоставки
		               |ИТОГИ
		               |	МАКСИМУМ(КоличествоОстаток),
		               |	МАКСИМУМ(Склад)
		               |ПО
		               |	Заказ";
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("Склад", Склад);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаЗаказ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаЗаказ.Следующий() Цикл
			
			Если ВыборкаЗаказ.КоличествоОстаток < 1 Тогда 
				ВызватьИсключение НСтр("ru = 'На складе "+ Склад+" данный заказ отсутствует!'");
				Отказ = Истина;
			Иначе
				Если НЕ СтатусЗаказаДляЗаписи = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставленРассчитать Тогда 
					Движение = Движения.ES_ЗаказыНаСкладе.ДобавитьРасход();
					Движение.Заказ 				= ВыборкаЗаказ.Заказ;               
					Движение.Количество			= ВыборкаЗаказ.КоличествоОстаток;
					Движение.Период 			= Дата;
					Движение.Склад	 			= ВыборкаЗаказ.Склад;
				КонецЕсли;
			КонецЕсли;
			
			Выборка = ВыборкаЗаказ.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
					
					Движение = Движения.ES_НоменклатураВыданная.Добавить();
					Движение.Период 		= Дата;
					Движение.Регистратор 	= Ссылка;
					Движение.Заказ 			= Выборка.Заказ;
					Движение.Номенклатура 	= Выборка.Номенклатура;
					Движение.Содержание 	= Выборка.Содержание;
					Движение.Характеристика = Выборка.Характеристика;
					Движение.КоличествоФакт = Выборка.КоличествоФакт;
					//ЕФСОЛ Несторук 17.08.2016 +
					Движение.КоличествоПлан = Выборка.КоличествоПлан;
					//ЕФСОЛ Несторук 17.08.2016 -
					Движение.НПФакт 		= Выборка.НПФакт;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	//ЭР Несторук С.И. 09.02.2017 17:35:26 }
	
	
	// РН ES_НоменклатураВыданная
	//Если НЕ ВидОперации = Перечисления.ES_ВидыОперацийВыдачаЗаказа.Отказ И Грузы.Количество() > 0 Тогда
	//	Для каждого СтрГруз Из Грузы Цикл
	//		Если ЗначениеЗаполнено(СтрГруз.Номенклатура) И СтрГруз.КоличествоФакт > 0 Тогда
	//			Движение = Движения.ES_НоменклатураВыданная.Добавить();
	//			Движение.Период 		= Дата;
	//			Движение.Регистратор 	= Ссылка;
	//			Движение.Заказ 			= Заказ;
	//			Движение.Номенклатура 	= СтрГруз.Номенклатура;
	//			Движение.Характеристика = СтрГруз.Характеристика;
	//			Движение.КоличествоФакт = СтрГруз.КоличествоФакт;
	//			//ЕФСОЛ Несторук 17.08.2016 +
	//			Движение.КоличествоПлан = СтрГруз.КоличествоПлан;
	//			//ЕФСОЛ Несторук 17.08.2016 -
	//			Движение.НПФакт 		= СтрГруз.НПФакт;
	//		КонецЕсли; 
	//	КонецЦикла; 
	//КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ДобавитьЗаписиВТабИзменяемыеРеквизиты(ТабИзменяемыеРеквизиты)

	// ДатаВремяДоставки
	НоваяСтрока = ТабИзменяемыеРеквизиты.Добавить();
	НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
	НоваяСтрока.Период 			= Дата;
	НоваяСтрока.Регистратор 	= Ссылка;
	НоваяСтрока.Заказ 			= Заказ;
	НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.ДатаВыполненияЗаказа;
	НоваяСтрока.Значение 		= Дата;
	
	// КассаНП
	Если НПФакт > 0 И ЗначениеЗаполнено(КассаНП) Тогда
		НоваяСтрока = ТабИзменяемыеРеквизиты.Добавить();
		НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
		НоваяСтрока.Период 			= Дата;
		НоваяСтрока.Регистратор 	= Ссылка;
		НоваяСтрока.Заказ 			= Заказ;
		НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.КассаНП;
		НоваяСтрока.Значение 		= КассаНП;
	КонецЕсли; 
		
	// КассаСтоимость
	Если СтоимостьДоставки > 0 И ЗначениеЗаполнено(КассаСтоимость) Тогда
		НоваяСтрока = ТабИзменяемыеРеквизиты.Добавить();
		НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
		НоваяСтрока.Период 			= Дата;
		НоваяСтрока.Регистратор 	= Ссылка;
		НоваяСтрока.Заказ 			= Заказ;
		НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.КассаСтоимость;
		НоваяСтрока.Значение 		= КассаСтоимость;
	КонецЕсли; 
	
	// Комментарий из Выдачи
	Если ЗначениеЗаполнено(Комментарий) Тогда
		НоваяСтрока = ТабИзменяемыеРеквизиты.Добавить();
		НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
		НоваяСтрока.Период 			= Дата;
		НоваяСтрока.Регистратор 	= Ссылка;
		НоваяСтрока.Заказ 			= Заказ;
		НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.Комментарий;
		НоваяСтрока.Значение 		= Комментарий;
	КонецЕсли; 
	
	// Касса
		Если НПФактНал > 0 И ЗначениеЗаполнено(Касса) Тогда
			НоваяСтрока = ТабИзменяемыеРеквизиты.Добавить();
			НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
			НоваяСтрока.Период 			= Дата;
			НоваяСтрока.Регистратор 	= Ссылка;
			НоваяСтрока.Заказ 			= Заказ;
			НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.Касса;
			НоваяСтрока.Значение 		= Касса;
		КонецЕсли;
		
		// Счет		
		Если НПФактБезнал > 0 И ЗначениеЗаполнено(Счет) Тогда
			НоваяСтрока = ТабИзменяемыеРеквизиты.Добавить();
			НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
			НоваяСтрока.Период 			= Дата;
			НоваяСтрока.Регистратор 	= Ссылка;
			НоваяСтрока.Заказ 			= Заказ;
			НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.Счет;
			НоваяСтрока.Значение 		= Счет;
		КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьСкладПребыванияЗаказа(Заказ)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ES_ЗаказыНаСкладеОстатки.Склад, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК Склад
	|ИЗ
	|	РегистрНакопления.ES_ЗаказыНаСкладе.Остатки(&МоментВремени, Заказ = &Заказ) КАК ES_ЗаказыНаСкладеОстатки";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	Иначе
			Запрос.УстановитьПараметр("МоментВремени", ТекущаяДата());
	
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Выборка.Следующий();
		
		Возврат Выборка.Склад;
	Иначе 
		Возврат Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	КонецЕсли;
	
	

КонецФункции // ПолучитьСкладПребыванияЗаказа()

#КонецЕсли
