
////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//УправлениеНебольшойФирмойСервер.ЗаполнитьШапкуДокумента(
	//	Объект,
	//	,
	//	Параметры.ЗначениеКопирования,
	//	Параметры.Основание,
	//	РазрешеноПроведение,
	//	Параметры.ЗначенияЗаполнения
	//);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьПризнакиСозданияДокументовНаОснованииВыдачи();
	КонецЕсли; 
	
	//УправлениеНебольшойФирмойКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаВажныеКомандыВыдачи);
	// Конец СтандартныеПодсистемы.Печать
	//ЭР Несторук С.И. 10.02.2017 9:33:26 {
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = "Выдача " + ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Объект.Номер,Истина,Истина) + " от " + Формат(Объект.Дата, "ДЛФ=D");
	КонецЕсли;
	//ЭР Несторук С.И. 10.02.2017 9:33:26 }	
	
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		Объект.Склад = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Склад);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//ЭР Несторук С.И. 10.04.2019 9:32:27 {
	ES_БиллингКлиент.ПроверитьДоступностьСервисаDelans(Отказ);
	//}ЭР Несторук С.И.
	
	УстановитьВидимостьПоляЗаказчикСправочно();
	УстановитьВидимостьПоляКассаСтоимость();
	УстановитьВидимостьПоляКассаНП();
	ЗаполнитьХранениеИУстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьХранениеИУстановитьВидимость()
	
	Если ЗначениеЗаполнено(Объект.Заказ) Тогда
		ЗаполнитьХранениеЗаказа(Объект.Заказ);
	КонецЕсли;
	
	Элементы.СкладХранения.Видимость 	= ЗначениеЗаполнено(СкладХранения);
	Элементы.Ячейка.Видимость 			= ЗначениеЗаполнено(Ячейка);
	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ЭЛЕМЕНТОВ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Очистить табличные части
	Если Объект.СписокГрузов.Количество() > 0
	 ИЛИ Объект.Грузы.Количество() > 0 Тогда
	 
		ТекстВопроса = Нстр("ru = 'Документ будет очищен и повторно заполнен. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьВопросПоПерезаполнениюДокументаЗавершение", ЭтаФорма), ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Возврат;
		
	КонецЕсли;	
	
	Уникальность = "ФормаВыбораЗаказаИзВыдачи" + Объект.Ссылка;
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыбранныйЗаказЗавершение",ЭтаФорма);
	//ПараметрыОткрытия = Новый Структура("Статус", ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ГотовКВыдаче"));
	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаВыбора", Новый Структура("ВызваноИзES_Выдачи", Истина), ЭтаФорма, Уникальность,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикПриИзменении(Элемент)
	
	УстановитьВидимостьПоляЗаказчикСправочно();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработанПриИзменении(Элемент)
	
	Если Объект.Обработан Тогда
		Объект.ДанныеОбработан = "" + ПользователиКлиентСервер.ТекущийПользователь() + ", " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ""в"" ЧЧ:мм'");
	Иначе
		Объект.ДанныеОбработан = "";
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)

	ЗапретитьРедактировать = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ES_ВидыОперацийВыдачаЗаказа.Отказ");
	
	Элементы.ГруппаМеста.ТолькоПросмотр 	= ЗапретитьРедактировать;
	Элементы.ГруппаЗапасы.ТолькоПросмотр 	= ЗапретитьРедактировать;
	Если ЗапретитьРедактировать Тогда
		ОчиститьНПФакт();
	КонецЕсли;
	
	ПересчитатьДанныеПодвала();

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНПФакт ()
	
	Если Объект.Грузы.Количество() > 0 Тогда
		Для каждого Стр Из Объект.Грузы Цикл
			Стр.НПФакт = 0;
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.СписокГрузов.Количество() > 0 Тогда
		Для каждого Стр Из Объект.СписокГрузов Цикл
			Стр.НПФакт = 0;
		КонецЦикла;
	КонецЕсли;
	
	ПересчитатьНаложенныйПлатеж();

КонецПроцедуры


&НаКлиенте
Процедура ОплатаЗаДоставкуПриИзменении(Элемент)
	
	УстановитьВидимостьПоляКассаСтоимость();
	ПересчитатьДанныеПодвала();
	
КонецПроцедуры

&НаКлиенте
Процедура НаложенныйПлатежПриИзменении(Элемент)
	
	УстановитьВидимостьПоляКассаНП();
	ПересчитатьДанныеПодвала();
	
КонецПроцедуры

&НаКлиенте
Процедура КассаСтоимостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьСписокКассНПИзСтратовыхНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура КассаНПНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьСписокКассНПИзСтратовыхНастроек();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
	
КонецПроцедуры // КомментарийПриИзменении()

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНЫХ ЧАСТЕЙ

// ТЧ СписокГрузов / Места

&НаКлиенте
Процедура СписокГрузовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокГрузовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокГрузовНПФактПриИзменении(Элемент)

	ПересчитатьНаложенныйПлатеж();
	ПересчитатьДанныеПодвала();
	
КонецПроцедуры

// ТЧ Грузы / Запасы

&НаКлиенте
Процедура ГрузыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ГрузыНоменклатура" Тогда
		ПоказатьЗначение(,Элемент.ТекущиеДанные.Номенклатура); 
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ГрузыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыКоличествоФактПриИзменении(Элемент)

	ТекСтрока = Элементы.Грузы.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекСтрока.НПФакт = ТекСтрока.КоличествоФакт * ТекСтрока.Цена;
	
	ПересчитатьНаложенныйПлатеж();
	ПересчитатьДанныеПодвала();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыНПФактПриИзменении(Элемент)

	ПересчитатьНаложенныйПлатеж();
	ПересчитатьДанныеПодвала();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ КНОПОК

#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура создает документы Поступление в кассу на сумму наложенных платежей
Процедура ОО_НПФактНал(Команда)

	ОчиститьСообщения();
	
	СтруктураПризнаков = ES_ОбщегоНазначения.ПолучитьПризнакУчета(Объект.Ссылка);
	Если СтруктураПризнаков.УчтеноНП Тогда
		
		УчтеноНПФакт = Истина;
		ПоказатьПредупреждение(,НСтр("ru = 'Поступления в кассу не созданы!'"));
		
	Иначе
		УчтеноНПФакт = Ложь;
		
		МассивДокументов = СоздатьДокументыНПФакт(Объект.Ссылка);
		Если МассивДокументов.Количество() > 0 Тогда
			УчтеноНПФакт = Истина;
			Для каждого СсылкаНаДок Из МассивДокументов Цикл
				ПоказатьОповещениеПользователя(
							НСтр("ru = 'Создание:'"),
							ПолучитьНавигационнуюСсылку(СсылкаНаДок),
							Строка(СсылкаНаДок),
							БиблиотекаКартинок.Информация32);
				Сообщить("Создан новый документ " + Строка(СсылкаНаДок) + ".");
			КонецЦикла; 
		КонецЕсли;
		
	КонецЕсли; 
	
	//ES_ОбщегоНазначенияКлиентСервер.УстановитьКартинкуДляКнопки(Элементы.ФормаНПФактНал, УчтеноНПФакт);
	 УстановитьКартинкуКнопкиНПФактНал(УчтеноНПФакт);

КонецПроцедуры

&НаКлиенте
// Процедура создает документы Поступление в кассу на сумму стоимости доставки нал
Процедура ОО_СтоимостьНал(Команда)

	ОчиститьСообщения();
	
	СтруктураПризнаков = ES_ОбщегоНазначения.ПолучитьПризнакУчета(Объект.Ссылка);
	Если СтруктураПризнаков.УчтеноСтоимость Тогда
		
		УчтеноСтоимость = Истина;
		ПоказатьПредупреждение(,НСтр("ru = 'Поступления в кассу не созданы!'"));
		
	Иначе
		УчтеноСтоимость = Ложь;
		
		МассивДокументов = СоздатьДокументыСтоимость(Объект.Ссылка);
		Если МассивДокументов.Количество() > 0 Тогда
			УчтеноСтоимость = Истина;
			Для каждого СсылкаНаДок Из МассивДокументов Цикл
				ПоказатьОповещениеПользователя(
							НСтр("ru = 'Создание:'"),
							ПолучитьНавигационнуюСсылку(СсылкаНаДок),
							Строка(СсылкаНаДок),
							БиблиотекаКартинок.Информация32);
				Сообщить("Создан новый документ " + Строка(СсылкаНаДок) + ".");
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
	//ES_ОбщегоНазначенияКлиентСервер.УстановитьКартинкуДляКнопки(Элементы.ФормаСтоимостьНал, УчтеноСтоимость);
	УстановитьКартинкуКнопкиСтоимостьНал(УчтеноСтоимость);

КонецПроцедуры

&НаКлиенте
Процедура СписатьЗапасы(Команда)
	
	Если НЕ Объект.Проведен Тогда
		Сообщить(НСтр("ru = 'Документ не проведен!'"), СтатусСообщения.Важное);
		Возврат;
	КонецЕсли; 
	
	Если Модифицированность Тогда
		Сообщить(НСтр("ru = 'Документ был изменен. Его необходимо провести'"), СтатусСообщения.Важное);
		Возврат;
	КонецЕсли; 
	
	ОчиститьСообщения();
	СтруктураПризнаков = ES_ОбщегоНазначения.ПолучитьПризнакУчета(Объект.Ссылка);
	Если СтруктураПризнаков.СписаныЗапасы Тогда
		
		СписаныЗапасы = Истина;
		ПоказатьПредупреждение(,НСтр("ru = 'Расходные накладные не созданы!'"));

	Иначе
	    СписаныЗапасы = Ложь;
		
		МассивДокументов = СписатьТоварыНаСервере(Объект.Ссылка, Объект.Заказ);
		Если МассивДокументов.Количество() > 0 Тогда
			СписаныЗапасы = Истина;
			Для каждого СсылкаНаДок Из МассивДокументов Цикл
				ПоказатьОповещениеПользователя(
							НСтр("ru = 'Создание:'"),
							ПолучитьНавигационнуюСсылку(СсылкаНаДок),
							Строка(СсылкаНаДок),
							БиблиотекаКартинок.Информация32);
				Сообщить("Создан новый документ " + Строка(СсылкаНаДок) + ".");
			КонецЦикла; 
		КонецЕсли; 
		
	КонецЕсли; 
	
	ES_ОбщегоНазначенияКлиентСервер.УстановитьКартинкуДляКнопки(Элементы.ФормаСписатьЗапасы, СписаныЗапасы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Отчет_СозданыДенежныеДокументы" Тогда
		Элементы.Подвал.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура УстановитьВидимостьПоляЗаказчикСправочно()
	
	Если Объект.Плательщик = ПредопределенноеЗначение("Перечисление.ES_ТипыПлательщиков.Получатель") Тогда
		Элементы.СправочноЗаказчик.Видимость = Истина;
	Иначе
		Элементы.СправочноЗаказчик.Видимость = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПоляКассаСтоимость()
	
	Если Объект.СтоимостьДоставки = 0 Тогда
		Элементы.КассаСтоимость.Видимость = Ложь;
	Иначе
		Элементы.КассаСтоимость.Видимость = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПоляКассаНП()
	
	Если Объект.НПФакт = 0 Тогда
		Элементы.КассаНП.Видимость = Ложь;
	Иначе
		Элементы.КассаНП.Видимость = Истина;
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДанныеПодвала()
	
	// Сумма документа
	Объект.СуммаДокумента = Объект.СписокГрузов.Итог("НПФакт") +Объект.Грузы.Итог("НПФакт") + Объект.СтоимостьДоставки;
		
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНаложенныйПлатеж()
	
	Объект.НПФакт = Объект.СписокГрузов.Итог("НПФакт") + Объект.Грузы.Итог("НПФакт");
	Объект.НПФактНал = Объект.СписокГрузов.Итог("НПФакт") + Объект.Грузы.Итог("НПФакт");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
Процедура ЗаполнитьХранениеЗаказа (Заказ)
	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ES_ЗаказыНаСкладеОстатки.Склад, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Ячейки.ПУстаяССылка)
		|		ИНАЧЕ ЕСТЬNULL(ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Значение, ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяССылка))
		|	КОНЕЦ КАК Ячейка,
		|	ЕСТЬNULL(ES_ЗаказыНаСкладеОстатки.Склад, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК Склад
		|ИЗ
		|	РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(, Заказ = &Заказ) КАК ES_СтатусыЗаказовСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
		|				,
		|				Заказ = &Заказ
		|					И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Ячейка)) КАК ES_ИзменяемыеРеквизитыЗаказовСрезПоследних
		|		ПО ES_СтатусыЗаказовСрезПоследних.Заказ = ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ES_ЗаказыНаСкладе.Остатки(, Заказ = &Заказ) КАК ES_ЗаказыНаСкладеОстатки
		|		ПО ES_СтатусыЗаказовСрезПоследних.Заказ = ES_ЗаказыНаСкладеОстатки.Заказ";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Ячейка = Выборка.Ячейка;
		СкладХранения = Выборка.Склад;
	КонецЕсли;	
	

	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуКнопкиНПФактНал(УчтеноНПФакт)
	ES_ОбщегоНазначенияКлиентСервер.УстановитьКартинкуДляКнопки(Элементы.ФормаНПФактНал, УчтеноНПФакт);	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуКнопкиСтоимостьНал(УчтеноСтоимость)
	ES_ОбщегоНазначенияКлиентСервер.УстановитьКартинкуДляКнопки(Элементы.ФормаСтоимостьНал, УчтеноСтоимость);	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакиСозданияДокументовНаОснованииВыдачи()
	
	СтруктураПризнаков = ES_ОбщегоНазначения.ПолучитьПризнакУчета(Объект.Ссылка);
	УчтеноНПФакт 	= СтруктураПризнаков.УчтеноНП;
	УчтеноСтоимость = СтруктураПризнаков.УчтеноСтоимость;
	СписаныЗапасы 	= СтруктураПризнаков.СписаныЗапасы;
	
	ES_ОбщегоНазначенияКлиентСервер.УстановитьКартинкуДляКнопки(Элементы.ФормаНПФактНал, УчтеноНПФакт);
	ES_ОбщегоНазначенияКлиентСервер.УстановитьКартинкуДляКнопки(Элементы.ФормаСтоимостьНал, УчтеноСтоимость);
	ES_ОбщегоНазначенияКлиентСервер.УстановитьКартинкуДляКнопки(Элементы.ФормаСписатьЗапасы, СписаныЗапасы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВыдачуНаОснованииЗаказа(ТекЗаказ, ТекВыдача)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ES_СведенияОЗаказахСрезПоследних.Выдача
		|ИЗ
		|	РегистрСведений.ES_СведенияОЗаказах.СрезПоследних(, Заказ = &Заказ) КАК ES_СведенияОЗаказахСрезПоследних
		|ГДЕ
		|	НЕ ES_СведенияОЗаказахСрезПоследних.Выдача = &Выдача";

	Запрос.УстановитьПараметр("Заказ", ТекЗаказ);
	Запрос.УстановитьПараметр("Выдача", ТекВыдача);

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
			Возврат ВыборкаДетальныеЗаписи.Выдача;
		КонецЕсли;

	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДаннымиЗаказаДоставкиНаСервере()
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	ОбъектНаСервере.ЗаполнитьПоЗаказПокупателя(Объект.Заказ);
	ЗначениеВРеквизитФормы(ОбъектНаСервере, "Объект");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокКассНПИзСтратовыхНастроек()
	
	СписокКасс = Новый СписокЗначений;
	СписокКасс.Добавить(ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.КассаНаложенныхПлатежей));
	СписокКасс.Добавить(ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ДопКассаНП));
	
	Возврат СписокКасс;
	
КонецФункции

// Групповое создание документов Поступление в кассу:
// - один документ создается на одного контрагента (отправителя)
// - документ основание - док Отчет о доставке
// - сумма документа состоит из суммы наложенных платежей грузов (ТЧ Грузы) нал
&НаСервереБезКонтекста
Функция СоздатьДокументыНПФакт(ДокументОснование)

	МассивДокументов = Новый Массив;

	Организация 		= ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Организация);
	НалогообложениеНДС 	= УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Организация, , ТекущаяДата());
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Дата", 					ТекущаяДата());
	Запрос.УстановитьПараметр("ДокументОснование", 		ДокументОснование);
	Запрос.УстановитьПараметр("ОрганизацияДоставки", 	Организация);
	Запрос.УстановитьПараметр("КонстантаВалютаУчета", 	Константы.ВалютаУчета.Получить());
	
	Запрос.Текст = 
			"ВЫБРАТЬ
			|	ES_Самовывоз.Заказ,
			|	ВЫБОР
			|		КОГДА ES_Самовывоз.Плательщик = ЗНАЧЕНИЕ(Перечисление.ES_ТипыПлательщиков.Получатель)
			|			ТОГДА ES_Самовывоз.СправочноЗаказчик
			|		ИНАЧЕ ES_Самовывоз.Заказчик
			|	КОНЕЦ КАК Заказчик,
			|	ES_Самовывоз.НПФакт КАК НаложенныйПоГрузам,
			|	ES_Самовывоз.Касса,
			|	ES_Самовывоз.НПФактНал КАК НаложенныйПоГрузамНал,
			|	ES_Самовывоз.НПФактБезнал КАК НаложенныйПоГрузамБезнал,
			|	ES_Самовывоз.Счет
			|ПОМЕСТИТЬ ВТ_Заказы
			|ИЗ
			|	Документ.ES_Самовывоз КАК ES_Самовывоз
			|ГДЕ
			|	ES_Самовывоз.Ссылка = &ДокументОснование
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВКассу.ES_ПриемНаложенныхПлатежей) КАК ВидОперации,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВКассу.ES_ПриемНаложенныхПлатежей) КАК ВидОперацииНал,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеНаСчет.ES_ПриемНаложенныхПлатежей) КАК ВидОперацииБезнал,
			|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ES_ПоступлениеНаложенныхПлатежей) КАК Статья,
			|	&ДокументОснование КАК ДокументОснование,
			|	&ОрганизацияДоставки КАК Организация,
			|	ВТ_Заказы.Касса КАК Касса,
			|	&КонстантаВалютаУчета КАК ВалютаДенежныхСредств,
			|	КурсыВалютУчета.Курс КАК Курс,
			|	КурсыВалютУчета.Кратность КАК Кратность,
			|	ЕСТЬNULL(ВТ_Заказы.Заказчик.ДоговорПоУмолчанию, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Договор,
			|	ВТ_Заказы.Заказ,
			|	ВТ_Заказы.Заказчик,
			|	ВТ_Заказы.НаложенныйПоГрузам,
			|	ВТ_Заказы.НаложенныйПоГрузамНал,
			|	ВТ_Заказы.НаложенныйПоГрузамБезнал,
			|	ВТ_Заказы.Счет
			|ПОМЕСТИТЬ ВТ_Док
			|ИЗ
			|	ВТ_Заказы КАК ВТ_Заказы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &КонстантаВалютаУчета) КАК КурсыВалютУчета
			|		ПО (ИСТИНА)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Док.Заказ,
			|	ВТ_Док.Заказчик КАК Контрагент,
			|	ВТ_Док.Договор,
			|	ВТ_Док.ВидОперации,
			|	ВТ_Док.Статья,
			|	ВТ_Док.ДокументОснование,
			|	ВТ_Док.Организация,
			|	ВТ_Док.Касса,
			|	ВТ_Док.ВалютаДенежныхСредств,
			|	ВТ_Док.Курс,
			|	ВТ_Док.Кратность,
			|	ВТ_Док.НаложенныйПоГрузам КАК СуммаДокумента,
			|	ВТ_Док.НаложенныйПоГрузам КАК СуммаПлатежа,
			|	ВЫРАЗИТЬ(ВТ_Док.НаложенныйПоГрузам * ВТ_Док.Курс * 1 / (1 * ЕСТЬNULL(ВТ_Док.Кратность, 1)) КАК ЧИСЛО(15, 2)) КАК СуммаРасчетов,
			|	ВТ_Док.НаложенныйПоГрузамНал КАК СуммаДокументаНал,
			|	ВТ_Док.НаложенныйПоГрузамНал КАК СуммаПлатежаНал,
			|	ВЫРАЗИТЬ(ВТ_Док.НаложенныйПоГрузамНал * ВТ_Док.Курс * 1 / (1 * ЕСТЬNULL(ВТ_Док.Кратность, 1)) КАК ЧИСЛО(15, 2)) КАК СуммаРасчетовНал,
			|	ВТ_Док.НаложенныйПоГрузамБезнал КАК СуммаДокументаБезнал,
			|	ВТ_Док.НаложенныйПоГрузамБезнал КАК СуммаПлатежаБезнал,
			|	ВЫРАЗИТЬ(ВТ_Док.НаложенныйПоГрузамБезнал * ВТ_Док.Курс * 1 / (1 * ЕСТЬNULL(ВТ_Док.Кратность, 1)) КАК ЧИСЛО(15, 2)) КАК СуммаРасчетовБезнал,
			|	ВТ_Док.ВидОперацииНал,
			|	ВТ_Док.ВидОперацииБезнал,
			|	ВТ_Док.Счет
			|ПОМЕСТИТЬ ВТ_ВсеПлатежи
			|ИЗ
			|	ВТ_Док КАК ВТ_Док
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ВсеПлатежи.Заказ,
			|	ВТ_ВсеПлатежи.Контрагент,
			|	ВТ_ВсеПлатежи.Договор,
			|	ВТ_ВсеПлатежи.Статья,
			|	ВТ_ВсеПлатежи.ДокументОснование,
			|	ВТ_ВсеПлатежи.Организация,
			|	ВТ_ВсеПлатежи.Касса,
			|	ВТ_ВсеПлатежи.ВалютаДенежныхСредств,
			|	ВТ_ВсеПлатежи.Курс,
			|	ВТ_ВсеПлатежи.Кратность,
			|	ВТ_ВсеПлатежи.СуммаДокументаНал КАК СуммаДокумента,
			|	ВТ_ВсеПлатежи.СуммаПлатежаНал КАК СуммаПлатежа,
			|	ВТ_ВсеПлатежи.СуммаРасчетовНал КАК СуммаРасчетов,
			|	ВТ_ВсеПлатежи.ВидОперацииНал КАК ВидОперации
			|ИЗ
			|	ВТ_ВсеПлатежи КАК ВТ_ВсеПлатежи
			|ГДЕ
			|	ВТ_ВсеПлатежи.СуммаДокументаНал > 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ВсеПлатежи.Заказ,
			|	ВТ_ВсеПлатежи.Контрагент,
			|	ВТ_ВсеПлатежи.Договор,
			|	ВТ_ВсеПлатежи.Статья,
			|	ВТ_ВсеПлатежи.ДокументОснование,
			|	ВТ_ВсеПлатежи.Организация,
			|	ВТ_ВсеПлатежи.ВалютаДенежныхСредств,
			|	ВТ_ВсеПлатежи.Курс,
			|	ВТ_ВсеПлатежи.Кратность,
			|	ВТ_ВсеПлатежи.СуммаДокументаБезнал КАК СуммаДокумента,
			|	ВТ_ВсеПлатежи.СуммаПлатежаБезнал КАК СуммаПлатежа,
			|	ВТ_ВсеПлатежи.СуммаРасчетовБезнал КАК СуммаРасчетов,
			|	ВТ_ВсеПлатежи.ВидОперацииБезнал КАК ВидОперации,
			|	ВТ_ВсеПлатежи.Счет КАК БанковскийСчет
			|ИЗ
			|	ВТ_ВсеПлатежи КАК ВТ_ВсеПлатежи
			|ГДЕ
			|	ВТ_ВсеПлатежи.СуммаДокументаБезнал > 0";
	
	//РезультатЗапроса = Запрос.Выполнить();
	РезультатЗапроса = Запрос.ВыполнитьПакет()[3];
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			
			// Новый документ
			НовыйДокумент = Документы.ПоступлениеВКассу.СоздатьДокумент();
			
			НовыйДокумент.Дата 					= ТекущаяДата();
			НовыйДокумент.Автор 				= Пользователи.ТекущийПользователь();
			НовыйДокумент.ПринятоОт 			= ВыборкаДетальныеЗаписи.Контрагент;
			НовыйДокумент.НалогообложениеНДС 	= НалогообложениеНДС;
			НовыйДокумент.ES_Заказ 				= ВыборкаДетальныеЗаписи.Заказ;
			ЗаполнитьЗначенияСвойств(НовыйДокумент, ВыборкаДетальныеЗаписи);
			
			НоваяСтрока = НовыйДокумент.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			
			Попытка
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				НовыйДокумент.Записать();
			КонецПопытки;
			
			// Сообщить о создании нового документа
			МассивДокументов.Добавить(НовыйДокумент.Ссылка);
			
		КонецЦикла;
		
	Иначе
		Сообщить("Нет НП для поступления в кассу", СтатусСообщения.Внимание);
	КонецЕсли; 
	
	
	РезультатЗапроса = Запрос.ВыполнитьПакет()[4];//.Выгрузить()
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			
			// Новый документ
			НовыйДокумент = Документы.ПоступлениеНаСчет.СоздатьДокумент();
			
			НовыйДокумент.Дата 					= ТекущаяДата();
			НовыйДокумент.Автор 				= Пользователи.ТекущийПользователь();
			//НовыйДокумент.ПринятоОт 			= ВыборкаДетальныеЗаписи.Контрагент;
			НовыйДокумент.НалогообложениеНДС 	= НалогообложениеНДС;
			НовыйДокумент.ES_Заказ 				= ВыборкаДетальныеЗаписи.Заказ;
			ЗаполнитьЗначенияСвойств(НовыйДокумент, ВыборкаДетальныеЗаписи);
			
			НоваяСтрока = НовыйДокумент.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			
			Попытка
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				НовыйДокумент.Записать();
			КонецПопытки; 
			
			// Сообщить о создании нового документа
			МассивДокументов.Добавить(НовыйДокумент.Ссылка);
			
		КонецЦикла;
		
	Иначе
		Сообщить("Нет НП для поступления на счет", СтатусСообщения.Внимание);
	КонецЕсли; 

	Возврат МассивДокументов;
	
КонецФункции

// Групповое создание документов Поступление в кассу:
// - один документ создается на одного контрагента (отправителя)
// - документ основание - док Заказ о доставке
// - сумма документа ПКО состоит из суммы Оплаты за доставку нал
&НаСервереБезКонтекста
Функция СоздатьДокументыСтоимость(ДокументОснование)
	
	МассивДокументов = Новый Массив;

	Организация 			= ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Организация);
	НалогообложениеНДС 		= УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Организация, , ТекущаяДата());
	СтавкаНДСПоУмолчанию 	= Справочники.СтавкиНДС.СтавкаНДС(Организация.ВидСтавкиНДСПоУмолчанию);

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата", 					ТекущаяДата());
	Запрос.УстановитьПараметр("ДокументОснование", 		ДокументОснование);
	Запрос.УстановитьПараметр("ОрганизацияДоставки", 	Организация);
	Запрос.УстановитьПараметр("КонстантаВалютаУчета", 	Константы.ВалютаУчета.Получить());
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ES_Самовывоз.Заказ,
	|	ES_Самовывоз.СтоимостьДоставки КАК СуммаОплаты,
	|	ES_Самовывоз.Заказчик,
	|	ES_Самовывоз.Касса,
	|	ES_Самовывоз.Счет,
	|	ES_Самовывоз.СтоимостьФактНал,
	|	ES_Самовывоз.СтоимостьФактБезнал
	|ПОМЕСТИТЬ ВТ_ДанныеДок
	|ИЗ
	|	Документ.ES_Самовывоз КАК м
	|ГДЕ
	|	ES_Самовывоз.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВКассу.ОтПокупателя) КАК ВидОперации,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей) КАК Статья,
	|	&ОрганизацияДоставки КАК Организация,
	|	ВТ_ДанныеДок.Касса КАК Касса,
	|	&КонстантаВалютаУчета КАК ВалютаДенежныхСредств,
	|	КурсыВалютУчета.Курс КАК Курс,
	|	КурсыВалютУчета.Кратность КАК Кратность,
	|	ВТ_ДанныеДок.Заказ,
	|	ВТ_ДанныеДок.Заказчик,
	|	ЕСТЬNULL(ВТ_ДанныеДок.Заказчик.ДоговорПоУмолчанию, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Договор,
	|	ВТ_ДанныеДок.СуммаОплаты,
	|	ВТ_ДанныеДок.СтоимостьФактНал,
	|	ВТ_ДанныеДок.СтоимостьФактБезнал,
	|	ВТ_ДанныеДок.Счет
	|ПОМЕСТИТЬ ВТ_Док
	|ИЗ
	|	ВТ_ДанныеДок КАК ВТ_ДанныеДок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &КонстантаВалютаУчета) КАК КурсыВалютУчета
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Док.Заказ,
	|	ВТ_Док.Заказчик КАК Контрагент,
	|	ВТ_Док.Договор,
	|	ВТ_Док.ВидОперации,
	|	ВТ_Док.Статья,
	|	ВТ_Док.Организация,
	|	ВТ_Док.Касса,
	|	ВТ_Док.ВалютаДенежныхСредств,
	|	ВТ_Док.Курс,
	|	ВТ_Док.Кратность,
	|	ВТ_Док.СуммаОплаты КАК СуммаДокумента,
	|	ВТ_Док.СуммаОплаты КАК СуммаПлатежа,
	|	ВЫРАЗИТЬ(ВТ_Док.СуммаОплаты * ВТ_Док.Курс * 1 / (1 * ЕСТЬNULL(ВТ_Док.Кратность, 1)) КАК ЧИСЛО(15, 2)) КАК СуммаРасчетов,
	|	ВТ_Док.СтоимостьФактНал КАК СуммаДокументаНал,
	|	ВТ_Док.СтоимостьФактНал КАК СуммаПлатежаНал,
	|	ВЫРАЗИТЬ(ВТ_Док.СтоимостьФактНал * ВТ_Док.Курс * 1 / (1 * ЕСТЬNULL(ВТ_Док.Кратность, 1)) КАК ЧИСЛО(15, 2)) КАК СуммаРасчетовНал,
	|	ВТ_Док.СтоимостьФактБезнал КАК СуммаДокументаБезнал,
	|	ВТ_Док.СтоимостьФактБезнал КАК СуммаПлатежаБезнал,
	|	ВЫРАЗИТЬ(ВТ_Док.СтоимостьФактБезнал * ВТ_Док.Курс * 1 / (1 * ЕСТЬNULL(ВТ_Док.Кратность, 1)) КАК ЧИСЛО(15, 2)) КАК СуммаРасчетовБезнал,
	|	ВТ_Док.Счет
	|ПОМЕСТИТЬ ВТ_ВсеПлат
	|ИЗ
	|	ВТ_Док КАК ВТ_Док
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВсеПлат.Заказ,
	|	ВТ_ВсеПлат.Контрагент,
	|	ВТ_ВсеПлат.Договор,
	|	ВТ_ВсеПлат.ВидОперации,
	|	ВТ_ВсеПлат.Статья,
	|	ВТ_ВсеПлат.Организация,
	|	ВТ_ВсеПлат.Касса,
	|	ВТ_ВсеПлат.ВалютаДенежныхСредств,
	|	ВТ_ВсеПлат.Курс,
	|	ВТ_ВсеПлат.Кратность,
	|	ВТ_ВсеПлат.СуммаДокументаНал КАК СуммаДокумента,
	|	ВТ_ВсеПлат.СуммаПлатежаНал КАК СуммаПлатежа,
	|	ВТ_ВсеПлат.СуммаРасчетовНал КАК СуммаРасчетов
	|ИЗ
	|	ВТ_ВсеПлат КАК ВТ_ВсеПлат
	|ГДЕ
	|	ВТ_ВсеПлат.СуммаДокументаНал > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВсеПлат.Заказ,
	|	ВТ_ВсеПлат.Контрагент,
	|	ВТ_ВсеПлат.Договор,
	|	ВТ_ВсеПлат.ВидОперации,
	|	ВТ_ВсеПлат.Статья,
	|	ВТ_ВсеПлат.Организация,
	|	ВТ_ВсеПлат.ВалютаДенежныхСредств,
	|	ВТ_ВсеПлат.Курс,
	|	ВТ_ВсеПлат.Кратность,
	|	ВТ_ВсеПлат.СуммаДокументаБезнал КАК СуммаДокумента,
	|	ВТ_ВсеПлат.СуммаПлатежаБезнал КАК СуммаПлатежа,
	|	ВТ_ВсеПлат.СуммаРасчетовБезнал КАК СуммаРасчетов,
	|	ВТ_ВсеПлат.Счет КАК БанковскийСчет
	|ИЗ
	|	ВТ_ВсеПлат КАК ВТ_ВсеПлат
	|ГДЕ
	|	ВТ_ВсеПлат.СуммаДокументаБезнал > 0";
	
	//РезультатЗапроса = Запрос.Выполнить();
	РезультатЗапроса = Запрос.ВыполнитьПакет()[3];
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			
			// Новый документ
			НовыйДокумент = Документы.ПоступлениеВКассу.СоздатьДокумент();
			
			НовыйДокумент.Дата 					= ТекущаяДата();
			НовыйДокумент.ДокументОснование 	= ДокументОснование;
			НовыйДокумент.Автор 				= Пользователи.ТекущийПользователь();
			НовыйДокумент.ПринятоОт 			= ВыборкаДетальныеЗаписи.Контрагент;
			НовыйДокумент.НалогообложениеНДС 	= НалогообложениеНДС;
			НовыйДокумент.ES_Заказ 				= ВыборкаДетальныеЗаписи.Заказ;
			ЗаполнитьЗначенияСвойств(НовыйДокумент, ВыборкаДетальныеЗаписи);
			
			НоваяСтрока = НовыйДокумент.РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Заказ 			= ВыборкаДетальныеЗаписи.Заказ;
			НоваяСтрока.СтавкаНДС 		= СтавкаНДСПоУмолчанию;
			НоваяСтрока.ПризнакАванса 	= Истина;
			
			Ставка = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
			НоваяСтрока.СуммаНДС = ВыборкаДетальныеЗаписи.СуммаПлатежа - (ВыборкаДетальныеЗаписи.СуммаПлатежа) / ((Ставка + 100) / 100);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			
			Попытка
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				НовыйДокумент.Записать();
			КонецПопытки;
			
			// Сообщить о создании нового документа
			МассивДокументов.Добавить(НовыйДокумент.Ссылка);
		КонецЦикла;

	Иначе

		Сообщить("Нет суммы для поступления в кассу", СтатусСообщения.Внимание);

	КонецЕсли; 
	
	РезультатЗапроса = Запрос.ВыполнитьПакет()[4];//.Выгрузить()
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			
			// Новый документ
			НовыйДокумент = Документы.ПоступлениеНаСчет.СоздатьДокумент();
			
			НовыйДокумент.Дата 					= ТекущаяДата();
			НовыйДокумент.ДокументОснование 	= ДокументОснование;
			НовыйДокумент.Автор 				= Пользователи.ТекущийПользователь();
			//НовыйДокумент.ПринятоОт 			= ВыборкаДетальныеЗаписи.Контрагент;
			НовыйДокумент.НалогообложениеНДС 	= НалогообложениеНДС;
			НовыйДокумент.ES_Заказ 				= ВыборкаДетальныеЗаписи.Заказ;
			ЗаполнитьЗначенияСвойств(НовыйДокумент, ВыборкаДетальныеЗаписи);
			
			НоваяСтрока = НовыйДокумент.РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Заказ 			= ВыборкаДетальныеЗаписи.Заказ;
			НоваяСтрока.СтавкаНДС 		= СтавкаНДСПоУмолчанию;
			НоваяСтрока.ПризнакАванса 	= Истина;
			
			Ставка = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
			НоваяСтрока.СуммаНДС = ВыборкаДетальныеЗаписи.СуммаПлатежа - (ВыборкаДетальныеЗаписи.СуммаПлатежа) / ((Ставка + 100) / 100);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);

			Попытка
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				НовыйДокумент.Записать();
			КонецПопытки; 
			
			// Сообщить о создании нового документа
			МассивДокументов.Добавить(НовыйДокумент.Ссылка);
			
		КонецЦикла;
		
	Иначе
		Сообщить("Нет суммы для поступления на счет", СтатусСообщения.Внимание);
	КонецЕсли;
	
	Возврат МассивДокументов;

	
КонецФункции

&НаСервереБезКонтекста
// Процедура создает документы Расходная накладная
Функция СписатьТоварыНаСервере(ДокументОснование, Заказ)
	
	МассивДокументов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("Выдача", ДокументОснование);
	Запрос.Текст = 
			"ВЫБРАТЬ
			|	ES_ДанныеПоЗаказамСрезПоследних.Заказ,
			|	ES_ДанныеПоЗаказамСрезПоследних.Договор,
			|	ES_ДанныеПоЗаказамСрезПоследних.Заказчик
			|ПОМЕСТИТЬ ВТ_Заказ
			|ИЗ
			|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(, Заказ = &Заказ) КАК ES_ДанныеПоЗаказамСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Заказ.Заказчик КАК Контрагент,
			|	ВТ_Заказ.Договор КАК Договор,
			|	ES_ВыдачиГрузы.Номенклатура КАК Номенклатура,
			|	МАКСИМУМ(ES_ВыдачиГрузы.ТипНоменклатурыЗапас) КАК ТипНоменклатурыЗапас,
			|	ES_ВыдачиГрузы.Характеристика,
			|	ES_ВыдачиГрузы.Партия,
			|	СУММА(ES_ВыдачиГрузы.КоличествоФакт) КАК КоличествоФакт,
			|	ES_ВыдачиГрузы.ЕдиницаИзмерения,
			|	ES_ВыдачиГрузы.Цена,
			|	ES_ВыдачиГрузы.ПроцентСкидкиНаценки,
			|	СУММА(ES_ВыдачиГрузы.НПФакт) КАК НПФакт,
			|	ES_ВыдачиГрузы.Номенклатура.СтавкаНДС,
			|	ES_ВыдачиГрузы.Содержание
			|ИЗ
			|	ВТ_Заказ КАК ВТ_Заказ
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ES_Самовывоз.Грузы КАК ES_ВыдачиГрузы
			|		ПО ВТ_Заказ.Заказ = ES_ВыдачиГрузы.ДокументДоставки
			|ГДЕ
			|	ES_ВыдачиГрузы.КоличествоФакт > 0
			|	И ES_ВыдачиГрузы.Ссылка = &Выдача
			|
			|СГРУППИРОВАТЬ ПО
			|	ES_ВыдачиГрузы.Номенклатура,
			|	ES_ВыдачиГрузы.Характеристика,
			|	ES_ВыдачиГрузы.ЕдиницаИзмерения,
			|	ES_ВыдачиГрузы.Цена,
			|	ES_ВыдачиГрузы.Номенклатура.СтавкаНДС,
			|	ВТ_Заказ.Договор,
			|	ВТ_Заказ.Заказчик,
			|	ES_ВыдачиГрузы.Партия,
			|	ES_ВыдачиГрузы.ПроцентСкидкиНаценки,
			|	ES_ВыдачиГрузы.Содержание
			|ИТОГИ ПО
			|	Контрагент,
			|	Договор";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда	
		Склад = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойСклад");
		Если НЕ ЗначениеЗаполнено(Склад)  Тогда
			Склад = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;	
		КонецЕсли;
		
		Организация 		= ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Организация);
		НалогообложениеНДС 	= УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Организация, , ТекущаяДата());
		ДокКомментарий 		= "Создан автоматически";
		
		ВыборкаКонтрагент = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКонтрагент.Следующий() Цикл
			ВыборкаДоговор = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДоговор.Следующий() Цикл
				ВыборкаДетальныеЗаписи = ВыборкаДоговор.Выбрать();

				// Новый документ
				НовыйДокумент = Документы.РасходнаяНакладная.СоздатьДокумент();
				НовыйДокумент.Дата 				 = ТекущаяДата();
				НовыйДокумент.Автор 			 = Пользователи.ТекущийПользователь();
				НовыйДокумент.НалогообложениеНДС = НалогообложениеНДС;
				НовыйДокумент.ДокументОснование  = ДокументОснование;
				НовыйДокумент.Контрагент         = ВыборкаДоговор.Контрагент;
				НовыйДокумент.Договор            = ВыборкаДоговор.Договор;
				НовыйДокумент.ВидОперации        = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратСОтветхранения;
				НовыйДокумент.Организация        = Организация;	
				НовыйДокумент.СтруктурнаяЕдиница = Склад;
				
				НовыйДокумент.ВалютаДокумента 	= ВыборкаДоговор.Договор.ВалютаРасчетов;
				ВалютаРасчетовКурсКратность 	= РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекущаяДата(), Новый Структура("Валюта", ВыборкаДоговор.Договор.ВалютаРасчетов));
				НовыйДокумент.Курс      		= ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
				НовыйДокумент.Кратность 		= ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1, ВалютаРасчетовКурсКратность.Кратность);
				НовыйДокумент.Комментарий 		= ДокКомментарий;

				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					НоваяСтрока = НовыйДокумент.Запасы.Добавить();
					НоваяСтрока.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
					
					ТипНоменклатурыЗапас = ВыборкаДетальныеЗаписи.ТипНоменклатурыЗапас;
					Если НЕ ЗначениеЗаполнено(ТипНоменклатурыЗапас) Тогда
						ТипНоменклатурыЗапас = (НоваяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас);
					КонецЕсли; 
					НоваяСтрока.ТипНоменклатурыЗапас = ТипНоменклатурыЗапас;
					
					Если ВыборкаДетальныеЗаписи.ЕдиницаИзмерения = Неопределено  Тогда
						НоваяСтрока.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
					Иначе
						НоваяСтрока.ЕдиницаИзмерения = ВыборкаДетальныеЗаписи.ЕдиницаИзмерения; 
					КонецЕсли;
					НоваяСтрока.Характеристика 	= ВыборкаДетальныеЗаписи.Характеристика;
					НоваяСтрока.Партия 			= ВыборкаДетальныеЗаписи.Партия;
					НоваяСтрока.Количество 		= ВыборкаДетальныеЗаписи.КоличествоФакт;
					НоваяСтрока.СтавкаНДС 		= ВыборкаДетальныеЗаписи.Номенклатура.СтавкаНДС;
					НоваяСтрока.Цена 			= ВыборкаДетальныеЗаписи.Цена;
					НоваяСтрока.Сумма 			= ВыборкаДетальныеЗаписи.Цена * ВыборкаДетальныеЗаписи.КоличествоФакт;
					НоваяСтрока.Всего 			= НоваяСтрока.Сумма;
				КонецЦикла;
				
				Попытка
					НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
					// Сообщить о создании нового документа
					МассивДокументов.Добавить(НовыйДокумент.Ссылка);
				Исключение
					НовыйДокумент.Записать();
				    Сообщить(НСтр("ru= 'Не удалось провести Расходную накладную'"), СтатусСообщения.Важное);
				КонецПопытки;
			КонецЦикла;		
		КонецЦикла;

	Иначе

		Сообщить("Нет запасов для списания", СтатусСообщения.Внимание);

	КонецЕсли;
		
	Возврат МассивДокументов;

КонецФункции

// ОПОВЕЩЕНИЯ

&НаКлиенте
Процедура ОбработатьВопросПоПерезаполнениюДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если НЕ Результат = КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
	
	Объект.СписокГрузов.Очистить();
	Объект.Грузы.Очистить();
	
	Уникальность = "ФормаВыбораЗаказаИзВыдачи" + Объект.Ссылка;
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыбранныйЗаказЗавершение",ЭтаФорма);
	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаВыбора", Новый Структура("ВызваноИзES_Выдачи", Истина), ЭтаФорма, Уникальность,,,Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыбранныйЗаказЗавершение(Результат, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		Объект.Заказ = Результат;
		
		ПолученнаяВыдача = ПолучитьВыдачуНаОснованииЗаказа(Объект.Заказ, Объект.Ссылка);
		Если ПолученнаяВыдача <> Неопределено Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'На основании выбранного Заказа уже создан документ " + ПолученнаяВыдача + "'"),,"Ошибка заполнения данных");
			Объект.Заказ = Неопределено;
			Возврат;
		КонецЕсли; 
		
		ЗаполнитьДаннымиЗаказаДоставкиНаСервере();
		
	КонецЕсли; 
	
	УстановитьВидимостьПоляЗаказчикСправочно();
	ЗаполнитьХранениеИУстановитьВидимость();	
КонецПроцедуры
 
#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	АвтоЗаголовок = Ложь;
	Заголовок = "Выдача " + ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Объект.Номер,Истина,Истина) + " от " + Формат(Объект.Дата, "ДЛФ=D");

	
КонецПроцедуры

&НаКлиенте
Процедура НомерНакладнойПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Заказ) Тогда
		ТекстВопроса = Нстр("ru = 'Документ будет очищен и повторно заполнен. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьВопросПоПерезаполнениюДокументаИЗНакладнойЗавершение", ЭтаФорма), ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Возврат;
	Иначе
		//ЭР Несторук С.И. 16.03.2017 15:14:57 {
		Объект.СписокГрузов.Очистить();
		Объект.Грузы.Очистить();
		
		Заказ = НайтиЗаказПоНакладной(Объект.НомерНакладной);
		ОбработатьВыбранныйЗаказЗавершение(Заказ, Неопределено);
		//}ЭР Несторук С.И.
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросПоПерезаполнениюДокументаИЗНакладнойЗавершение(Результат, Параметры) Экспорт 
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.СписокГрузов.Очистить();
	Объект.Грузы.Очистить();
	
	 Заказ = НайтиЗаказПоНакладной(Объект.НомерНакладной);
	 ОбработатьВыбранныйЗаказЗавершение(Заказ, Неопределено);
	//Уникальность = "ФормаВыбораЗаказаИзВыдачи" + Объект.Ссылка;
	//Оповещение = Новый ОписаниеОповещения("ОбработатьВыбранныйЗаказЗавершение",ЭтаФорма);
	//ОткрытьФорму("Документ.ЗаказПокупателя.ФормаВыбора", Новый Структура("ВызваноИзES_Выдачи", Истина), ЭтаФорма, Уникальность,,,Оповещение);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиЗаказПоНакладной(Накладная)

	Заказ = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ES_ДанныеПоЗаказамСрезПоследних.Заказ
	|ИЗ
	|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(
	|			,
	|			ВидДоставки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыДоставки.Самовывоз)
	|				И НомерНакладной = &НомерНакладной) КАК ES_ДанныеПоЗаказамСрезПоследних";
	
	Запрос.УстановитьПараметр("НомерНакладной", Накладная);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Выборка.Следующий();
		
		Заказ = Выборка.Заказ;
	КонецЕсли;
	
	Возврат Заказ;
	
КонецФункции // ()



#КонецОбласти


 
