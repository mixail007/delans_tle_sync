#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Параметры:
//  * ДанныеЗаполнения - Ссылка на план доставки
//  * МассивЗаказов - заказы, которые уже добавлены в план. Массив заполнен если происходит дозаполнение отчета по плану.
Функция ЗаполнитьДаннымиИзПланаДоставки(ДанныеЗаполнения, МассивЗаказов = Неопределено) Экспорт
	
	ПланДоставки = ДанныеЗаполнения;
	Ответственный = ПланДоставки.Ответственный;
	//ЭР Несторук С.И. 25.02.2017 14:30:29 {
	РаспределениеВОтдельномОкне = Константы.ES_РаспределениеЗаявокВОтдельномОкне.Получить();
	Если РаспределениеВОтдельномОкне Тогда
		Если ПланДоставки.Подтвержден = Ложь Тогда
			ВызватьИсключение НСтр("ru='План доставки не утвержден!'");
		КонецЕсли;
	КонецЕсли;
	Склад = ДанныеЗаполнения.Склад;
	Номер = ДанныеЗаполнения.Номер;
	//}ЭР Несторук С.И.
	//Если ДанныеЗаполнения.Дата > ТекущаяДата() Тогда
		Дата = ДанныеЗаполнения.Дата + 1;
	//КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЗаказов.ДокДоставки КАК ДокДоставки
	|ПОМЕСТИТЬ ТаблицаЗаказов
	|ИЗ
	|	&ТаблицаЗаказов КАК ТаблицаЗаказов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_ПланДоставкиЗаказы.НомерСтроки КАК НомерСтроки,
	|	ES_ПланДоставкиЗаказы.Ссылка КАК Ссылка,
	|	ES_ПланДоставкиЗаказы.ДокументДоставки КАК ДокументДоставки,
	|	ES_ПланДоставкиЗаказы.СвязанныйДокумент КАК СвязанныйДокумент,
	|	ES_ПланДоставкиЗаказы.НомерНакладнойПредставление КАК НомерНакладнойПредставление,
	|	ES_ПланДоставкиЗаказы.Склад КАК Склад,
	|	ES_ПланДоставкиЗаказы.Ячейка КАК Ячейка
	|ПОМЕСТИТЬ ВТ_ЗаказыИзПлана
	|ИЗ
	|	Документ.ES_ПланДоставки.Заказы КАК ES_ПланДоставкиЗаказы
	|ГДЕ
	|	ES_ПланДоставкиЗаказы.Ссылка = &ДокПланДоставки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ЗаказыИзПлана.НомерСтроки КАК НомерСтроки,
	|	ВТ_ЗаказыИзПлана.ДокументДоставки КАК ДокументДоставки,
	|	ВТ_ЗаказыИзПлана.СвязанныйДокумент КАК СвязанныйДокумент,
	|	ВТ_ЗаказыИзПлана.НомерНакладнойПредставление КАК НомерНакладнойПредставление,
	|	ВЫБОР
	|		КОГДА ES_ДанныеПоЗаказамСрезПоследних.ВидДоставки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыДоставки.СкладСклад)
	|			ТОГДА ES_ДанныеПоЗаказамСрезПоследних.АдресСкладаДоставки
	|		ИНАЧЕ ES_ДанныеПоЗаказамСрезПоследних.АдресДоставки
	|	КОНЕЦ КАК АдресДоставки,
	|	ES_ДанныеПоЗаказамСрезПоследних.ВидДоставки КАК ВидДоставки,
	|	ES_ДанныеПоЗаказамСрезПоследних.ПредставлениеГрузов КАК ПредставлениеГрузов,
	|	ES_ДанныеПоЗаказамСрезПоследних.Заказчик КАК Заказчик,
	|	ES_ДанныеПоЗаказамСрезПоследних.Договор КАК Договор,
	|	ES_ДанныеПоЗаказамСрезПоследних.СтоимостьДоставки КАК СтоимостьДоставки,
	|	ES_ДанныеПоЗаказамСрезПоследних.НППлан КАК НППлан,
	|	ES_ДанныеПоЗаказамСрезПоследних.ВидОплаты КАК ВидОплаты,
	|	ES_ДанныеПоЗаказамСрезПоследних.Плательщик КАК Плательщик,
	|	ES_ДанныеПоЗаказамСрезПоследних.ПолучательРегион КАК Регион,
	|	ES_ДанныеПоЗаказамСрезПоследних.НомерНакладной КАК НомерНакладной,
	|	ES_ДанныеПоЗаказамСрезПоследних.Ответственный КАК Ответственный,
	|	ES_ДанныеПоЗаказамСрезПоследних.Предоплачен КАК Предоплачен,
	|	ВТ_ЗаказыИзПлана.Склад КАК Склад,
	|	ES_ДанныеПоЗаказамСрезПоследних.ВидЗабора КАК ВидЗабора,
	|	ES_ДанныеПоЗаказамСрезПоследних.ЧекНаОбщуюСумму КАК ЧекНаОбщуюСумму,
	|	ВТ_ЗаказыИзПлана.Ячейка КАК Ячейка
	|ПОМЕСТИТЬ ВТ_Заказы
	|ИЗ
	|	ВТ_ЗаказыИзПлана КАК ВТ_ЗаказыИзПлана
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(
	|				,
	|				Заказ В
	|					(ВЫБРАТЬ
	|						ВТ_ЗаказыИзПлана.ДокументДоставки
	|					ИЗ
	|						ВТ_ЗаказыИзПлана КАК ВТ_ЗаказыИзПлана)) КАК ES_ДанныеПоЗаказамСрезПоследних
	|		ПО ВТ_ЗаказыИзПлана.ДокументДоставки = ES_ДанныеПоЗаказамСрезПоследних.Заказ
	|ГДЕ
	|	ВТ_ЗаказыИзПлана.ДокументДоставки ССЫЛКА Документ.ЗаказПокупателя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ЗаказыИзПлана.НомерСтроки,
	|	ВТ_ЗаказыИзПлана.ДокументДоставки,
	|	ВТ_ЗаказыИзПлана.СвязанныйДокумент,
	|	ВТ_ЗаказыИзПлана.НомерНакладнойПредставление,
	|	ES_ДанныеПоЗаборамСрезПоследних.Адрес,
	|	ES_ДанныеПоЗаборамСрезПоследних.ВидЗабора,
	|	ES_ДанныеПоЗаборамСрезПоследних.ПредставлениеГрузов,
	|	ES_ДанныеПоЗаборамСрезПоследних.Отправитель,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка),
	|	0,
	|	0,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.ES_ТипыПлательщиков.ПустаяСсылка),
	|	ES_ДанныеПоЗаборамСрезПоследних.Регион,
	|	ES_ДанныеПоЗаборамСрезПоследних.НомерНакладной,
	|	"""",
	|	ЛОЖЬ,
	|	ES_ДанныеПоЗаборамСрезПоследних.Склад,
	|	ES_ДанныеПоЗаборамСрезПоследних.ВидЗабора,
	|	ЛОЖЬ,
	|	ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|ИЗ
	|	ВТ_ЗаказыИзПлана КАК ВТ_ЗаказыИзПлана
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ДанныеПоЗаборам.СрезПоследних(
	|				,
	|				Забор В
	|					(ВЫБРАТЬ
	|						ВТ_ЗаказыИзПлана.ДокументДоставки
	|					ИЗ
	|						ВТ_ЗаказыИзПлана КАК ВТ_ЗаказыИзПлана)) КАК ES_ДанныеПоЗаборамСрезПоследних
	|		ПО ВТ_ЗаказыИзПлана.ДокументДоставки = ES_ДанныеПоЗаборамСрезПоследних.Забор
	|ГДЕ
	|	ВТ_ЗаказыИзПлана.ДокументДоставки ССЫЛКА Документ.ES_ЗаборГруза
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_ДанныеПоЗаказамСрезПоследних.Заказ КАК ЗаказДляГрузов
	|ПОМЕСТИТЬ ВТ_СписокЗказовДляГрузов
	|ИЗ
	|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(
	|			,
	|			Заказ В
	|				(ВЫБРАТЬ
	|					ВТ_ЗаказыИзПлана.ДокументДоставки
	|				ИЗ
	|					ВТ_ЗаказыИзПлана КАК ВТ_ЗаказыИзПлана)) КАК ES_ДанныеПоЗаказамСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ES_ДанныеПоЗаборамСрезПоследних.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ES_ДанныеПоЗаборамСрезПоследних.ДокументОснование
	|		ИНАЧЕ ES_ДанныеПоЗаборамСрезПоследних.Забор
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.ES_ДанныеПоЗаборам.СрезПоследних(
	|			,
	|			Забор В
	|				(ВЫБРАТЬ
	|					ВТ_ЗаказыИзПлана.ДокументДоставки
	|				ИЗ
	|					ВТ_ЗаказыИзПлана КАК ВТ_ЗаказыИзПлана)) КАК ES_ДанныеПоЗаборамСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_ГрузыВЗаказахСрезПоследних.НомерСтроки КАК НомерСтроки,
	|	ES_ГрузыВЗаказахСрезПоследних.ДокументДоставки КАК ДокументДоставки,
	|	ES_ГрузыВЗаказахСрезПоследних.КлючСтроки КАК КлючСтроки,
	|	ES_ГрузыВЗаказахСрезПоследних.ТипГруза КАК ТипГруза,
	|	ES_ГрузыВЗаказахСрезПоследних.Вес КАК Вес,
	|	ES_ГрузыВЗаказахСрезПоследних.ОбъемныйВес КАК ОбъемныйВес,
	|	ES_ГрузыВЗаказахСрезПоследних.Высота КАК Высота,
	|	ES_ГрузыВЗаказахСрезПоследних.Длина КАК Длина,
	|	ES_ГрузыВЗаказахСрезПоследних.Ширина КАК Ширина,
	|	ES_ГрузыВЗаказахСрезПоследних.НППлан КАК НППлан,
	|	ES_ГрузыВЗаказахСрезПоследних.Страховка КАК Страховка,
	|	ES_ГрузыВЗаказахСрезПоследних.ОписаниеГруза КАК ОписаниеГруза
	|ПОМЕСТИТЬ ВТ_ГрузыМеста
	|ИЗ
	|	РегистрСведений.ES_ГрузыВЗаказах.СрезПоследних(
	|			,
	|			ДокументДоставки В
	|				(ВЫБРАТЬ
	|					ВТ_СписокЗказовДляГрузов.ЗаказДляГрузов
	|				ИЗ
	|					ВТ_СписокЗказовДляГрузов КАК ВТ_СписокЗказовДляГрузов)) КАК ES_ГрузыВЗаказахСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_НоменклатураВЗаказахСрезПоследних.НомерСтроки КАК НомерСтроки,
	|	ES_НоменклатураВЗаказахСрезПоследних.ДокументДоставки КАК ДокументДоставки,
	|	ES_НоменклатураВЗаказахСрезПоследних.Номенклатура КАК Номенклатура,
	|	ES_НоменклатураВЗаказахСрезПоследних.ТипНоменклатурыЗапас КАК ТипНоменклатурыЗапас,
	|	ES_НоменклатураВЗаказахСрезПоследних.Характеристика КАК Характеристика,
	|	ES_НоменклатураВЗаказахСрезПоследних.Партия КАК Партия,
	|	ES_НоменклатураВЗаказахСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ES_НоменклатураВЗаказахСрезПоследних.Количество КАК Количество,
	|	ES_НоменклатураВЗаказахСрезПоследних.НППлан КАК НППлан,
	|	ES_НоменклатураВЗаказахСрезПоследних.Содержание КАК Содержание,
	|	ES_НоменклатураВЗаказахСрезПоследних.Цена КАК Цена,
	|	ES_НоменклатураВЗаказахСрезПоследних.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ES_НоменклатураВЗаказахСрезПоследних.Вес КАК Вес,
	|	ES_НоменклатураВЗаказахСрезПоследних.Объем КАК Объем,
	|	ES_НоменклатураВЗаказахСрезПоследних.ОбъемныйВес КАК ОбъемныйВес,
	|	ES_НоменклатураВЗаказахСрезПоследних.ОбьявленнаяСтоимость КАК ОбьявленнаяСтоимость,
	|	ES_НоменклатураВЗаказахСрезПоследних.Опасность КАК Опасность,
	|	ES_НоменклатураВЗаказахСрезПоследних.Артикул КАК Артикул,
	|	ES_НоменклатураВЗаказахСрезПоследних.Штрихкод КАК Штрихкод,
	|	ES_НоменклатураВЗаказахСрезПоследних.СтавкаНДС КАК СтавкаНДС,
	|	ES_НоменклатураВЗаказахСрезПоследних.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ ВТ_ГрузыЗапасы
	|ИЗ
	|	РегистрСведений.ES_НоменклатураВЗаказах.СрезПоследних(
	|			,
	|			ДокументДоставки В
	|				(ВЫБРАТЬ
	|					ВТ_СписокЗказовДляГрузов.ЗаказДляГрузов
	|				ИЗ
	|					ВТ_СписокЗказовДляГрузов КАК ВТ_СписокЗказовДляГрузов)) КАК ES_НоменклатураВЗаказахСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Заказы.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ВТ_Заказы.ДокументДоставки, ТаблицаЗаказов.ДокДоставки) КАК ДокументДоставки,
	|	ВТ_Заказы.СвязанныйДокумент КАК СвязанныйДокумент,
	|	ВТ_Заказы.АдресДоставки КАК АдресДоставки,
	|	ВТ_Заказы.ВидДоставки КАК ВидДоставки,
	|	ВТ_Заказы.СтоимостьДоставки КАК СтоимостьДоставки,
	|	ВТ_Заказы.Заказчик КАК Заказчик,
	|	ВТ_Заказы.Договор КАК Договор,
	|	ВТ_Заказы.Плательщик КАК Плательщик,
	|	ВТ_Заказы.НППлан КАК НППлан,
	|	ВТ_Заказы.ВидОплаты КАК ВидОплаты,
	|	ВЫБОР
	|		КОГДА ВТ_Заказы.ДокументДоставки ЕСТЬ NULL
	|			ТОГДА ""Удалить""
	|		КОГДА ТаблицаЗаказов.ДокДоставки ЕСТЬ NULL
	|			ТОГДА ""Добавить""
	|		ИНАЧЕ ""ВсеХорошо""
	|	КОНЕЦ КАК ДействиеНадДоком,
	|	ВТ_Заказы.Регион КАК Регион,
	|	ВТ_Заказы.Ответственный КАК Ответственный,
	|	ВТ_Заказы.НомерНакладной КАК НомерНакладной,
	|	ВТ_Заказы.НомерНакладнойПредставление КАК НомерНакладнойПредставление,
	|	ВТ_Заказы.ВидЗабора КАК ВидЗабора,
	|	ВТ_Заказы.Предоплачен КАК Предоплачен,
	|	ВТ_Заказы.Склад КАК Склад,
	|	ВТ_Заказы.ПредставлениеГрузов КАК ПредставлениеГрузов,
	|	ВТ_ГрузыМеста.НомерСтроки КАК МестаНомерСтроки,
	|	ВТ_ГрузыМеста.КлючСтроки КАК МестаКлючСтроки,
	|	ВТ_ГрузыМеста.ТипГруза КАК МестаТипГруза,
	|	ВТ_ГрузыМеста.Вес КАК МестаВес,
	|	ВТ_ГрузыМеста.ОбъемныйВес КАК МестаОбъемныйВес,
	|	ВТ_ГрузыМеста.Высота КАК МестаВысота,
	|	ВТ_ГрузыМеста.Длина КАК МестаДлина,
	|	ВТ_ГрузыМеста.Ширина КАК МестаШирина,
	|	ВТ_ГрузыМеста.НППлан КАК МестаНППлан,
	|	ВТ_ГрузыМеста.Страховка КАК МестаСтраховка,
	|	ВТ_ГрузыМеста.ОписаниеГруза КАК МестаОписаниеГруза,
	|	ВТ_ГрузыЗапасы.НомерСтроки КАК ЗапасыНомерСтроки,
	|	ВТ_ГрузыЗапасы.ДокументДоставки КАК ЗапасыДокументДоставки,
	|	ВТ_ГрузыЗапасы.Номенклатура КАК ЗапасыНоменклатура,
	|	ВТ_ГрузыЗапасы.ТипНоменклатурыЗапас КАК ЗапасыТипНоменклатурыЗапас,
	|	ВТ_ГрузыЗапасы.Характеристика КАК ЗапасыХарактеристика,
	|	ВТ_ГрузыЗапасы.Партия КАК ЗапасыПартия,
	|	ВТ_ГрузыЗапасы.ЕдиницаИзмерения КАК ЗапасыЕдиницаИзмерения,
	|	ВТ_ГрузыЗапасы.Количество КАК ЗапасыКоличество,
	|	ВТ_ГрузыЗапасы.НППлан КАК ЗапасыНППлан,
	|	ВТ_ГрузыЗапасы.Содержание КАК ЗапасыСодержание,
	|	ВТ_ГрузыЗапасы.Цена КАК ЗапасыЦена,
	|	ВТ_ГрузыЗапасы.ПроцентСкидкиНаценки КАК ЗапасыПроцентСкидкиНаценки,
	|	ВТ_ГрузыЗапасы.Артикул КАК ЗапасыАртикул,
	|	ВТ_ГрузыЗапасы.Штрихкод КАК ЗапасыШтрихкод,
	|	ВТ_ГрузыЗапасы.Вес КАК ЗапасыВес,
	|	ВТ_ГрузыЗапасы.Объем КАК ЗапасыОбъем,
	|	ВТ_ГрузыЗапасы.ОбъемныйВес КАК ЗапасыОбъемныйВес,
	|	ВТ_ГрузыЗапасы.ОбьявленнаяСтоимость КАК ЗапасыОбьявленнаяСтоимость,
	|	ВТ_ГрузыЗапасы.Опасность КАК ЗапасыОпасность,
	|	ВТ_ГрузыЗапасы.СтавкаНДС КАК ЗапасыСтавкаНДС,
	|	ВТ_ГрузыЗапасы.СуммаНДС КАК ЗапасыСуммаНДС,
	|	ВТ_Заказы.ЧекНаОбщуюСумму КАК ЧекНаОбщуюСумму,
	|	ВТ_Заказы.Ячейка КАК Ячейка
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаЗаказов КАК ТаблицаЗаказов
	|		ПО ВТ_Заказы.ДокументДоставки = ТаблицаЗаказов.ДокДоставки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГрузыМеста КАК ВТ_ГрузыМеста
	|		ПО (ВЫБОР
	|				КОГДА ВТ_Заказы.ДокументДоставки ССЫЛКА Документ.ES_ЗаборГруза
	|						И НЕ ВТ_Заказы.СвязанныйДокумент = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ТОГДА ВТ_Заказы.СвязанныйДокумент = ВТ_ГрузыМеста.ДокументДоставки
	|				ИНАЧЕ ВТ_Заказы.ДокументДоставки = ВТ_ГрузыМеста.ДокументДоставки
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГрузыЗапасы КАК ВТ_ГрузыЗапасы
	|		ПО (ВЫБОР
	|				КОГДА ВТ_Заказы.ДокументДоставки ССЫЛКА Документ.ES_ЗаборГруза
	|						И НЕ ВТ_Заказы.СвязанныйДокумент = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ТОГДА ВТ_Заказы.СвязанныйДокумент = ВТ_ГрузыЗапасы.ДокументДоставки
	|				ИНАЧЕ ВТ_Заказы.ДокументДоставки = ВТ_ГрузыЗапасы.ДокументДоставки
	|			КОНЕЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	МестаНомерСтроки,
	|	ЗапасыНомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(СвязанныйДокумент),
	|	МАКСИМУМ(АдресДоставки),
	|	МАКСИМУМ(ВидДоставки),
	|	МАКСИМУМ(СтоимостьДоставки),
	|	МАКСИМУМ(Заказчик),
	|	МАКСИМУМ(Договор),
	|	МАКСИМУМ(Плательщик),
	|	МАКСИМУМ(НППлан),
	|	МАКСИМУМ(ВидОплаты),
	|	МАКСИМУМ(ДействиеНадДоком),
	|	МАКСИМУМ(Регион),
	|	МАКСИМУМ(Ответственный),
	|	МАКСИМУМ(НомерНакладной),
	|	МАКСИМУМ(НомерНакладнойПредставление),
	|	МАКСИМУМ(ВидЗабора),
	|	МАКСИМУМ(Предоплачен),
	|	МАКСИМУМ(Склад),
	|	МАКСИМУМ(ПредставлениеГрузов),
	|	МАКСИМУМ(ЧекНаОбщуюСумму),
	|	МАКСИМУМ(Ячейка)
	|ПО
	|	ДокументДоставки";
	
	Запрос.УстановитьПараметр("ДокПланДоставки", ДанныеЗаполнения);  
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ES_ЗаборГруза"));
	
	ТаблицаЗаказов = Новый ТаблицаЗначений;
	ТаблицаЗаказов.Колонки.Добавить("ДокДоставки", Новый ОписаниеТипов(МассивТипов));
	Если НЕ МассивЗаказов = Неопределено Тогда
		Для й = 1 По МассивЗаказов.Количество() Цикл
			ТаблицаЗаказов.Добавить();
		КонецЦикла; 
		ТаблицаЗаказов.ЗагрузитьКолонку(МассивЗаказов, "ДокДоставки");
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ТаблицаЗаказов", ТаблицаЗаказов);  
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Структура массивов заказов для удаления / для добавления
	СтруктураКВозврату = Новый Структура();
	
	ЗаказыНаУдаление = Новый Массив;
	ЗаказыДляДобавления = Новый Массив;
	
	ВидОплатыНаличные = Перечисления.ES_ТипыДенежныхСредствОплатаПолучателем.Наличные;
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДокументДоставки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		//ЕФСОЛ Несторук 16.11.2016 +
		//АвтоПринят = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.АвтоПринятКурьером);
		//ЕФСОЛ Несторук 16.11.2016 -
		КассаНППоУмолчанию = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.КассаНаложенныхПлатежей);
		РасчетныйСчетПоУмолчанию = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ДопКассаНП);
		
		Пока ВыборкаДокументДоставки.Следующий() Цикл  
			
			Если НЕ ЗначениеЗаполнено(Ответственный) И ЗначениеЗаполнено(ВыборкаДокументДоставки.Ответственный) Тогда
				Ответственный = ВыборкаДокументДоставки.Ответственный;
			КонецЕсли;
			
			// Если ВыборкаДокументДоставки.ДействиеНадДоком = "Удалить", удаляем заказ
			Если ВыборкаДокументДоставки.ДействиеНадДоком = "Удалить" Тогда
				
				ЗаказыНаУдаление.Добавить(ВыборкаДокументДоставки.ДокументДоставки);
				Продолжить;
			КонецЕсли;
			
			// Если ВыборкаДокументДоставки.ДействиеНадДоком = "ВсеХорошо", ничего не делаем
			Если ВыборкаДокументДоставки.ДействиеНадДоком = "ВсеХорошо" Тогда
				//ES_Савченко Е.Р. 14.08.2017 +	
				Отбор = Новый Структура();
				Отбор.Вставить("ДокументДоставки",ВыборкаДокументДоставки.ДокументДоставки);
				МассивСтрок = Заказы.НайтиСтроки(Отбор);
				Если МассивСтрок.Количество() > 0 Тогда
					НовыйЗаказ =  МассивСтрок[0];
					НовыйЗаказ.ДокументДоставки 		= ВыборкаДокументДоставки.ДокументДоставки;
					НовыйЗаказ.НомерНакладной			= ВыборкаДокументДоставки.НомерНакладной;
					НовыйЗаказ.НомерНакладнойПредставление	= ВыборкаДокументДоставки.НомерНакладнойПредставление;
					НовыйЗаказ.СвязанныйДокумент		= ВыборкаДокументДоставки.СвязанныйДокумент;
					НовыйЗаказ.АдресДоставки 			= "" + ВыборкаДокументДоставки.АдресДоставки+ ", "+ВыборкаДокументДоставки.Регион;
					НовыйЗаказ.Склад					= ВыборкаДокументДоставки.Склад;
					НовыйЗаказ.Ячейка					= ВыборкаДокументДоставки.Ячейка;
					НовыйЗаказ.ВидДоставки 				= ВыборкаДокументДоставки.ВидДоставки;
					НовыйЗаказ.ВидЗабора 				= ВыборкаДокументДоставки.ВидЗабора;
					НовыйЗаказ.Заказчик 				= ВыборкаДокументДоставки.Заказчик;
					НовыйЗаказ.Договор 					= ВыборкаДокументДоставки.Договор;
					НовыйЗаказ.ДатаФактическойДоставки 	= ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
					НовыйЗаказ.ВремяФактическойДоставки = ?(НовыйЗаказ.ВремяФактическойДоставки = Дата("00010101"), ТекущаяДатаСеанса(), НовыйЗаказ.ВремяФактическойДоставки);
					НовыйЗаказ.ES_Предоплачен			= ВыборкаДокументДоставки.Предоплачен;
					НовыйЗаказ.ES_ВидОплаты				= ВыборкаДокументДоставки.ВидОплаты;
					НовыйЗаказ.НППлан                   = ВыборкаДокументДоставки.НППлан;
					//EFSOL_Сальник К.А. 2019-05-17 {+
					//НовыйЗаказ.СтоимостьПлан            = ?(ВыборкаДокументДоставки.ЧекНаОбщуюСумму = Истина,ВыборкаДокументДоставки.СтоимостьДоставки,0);;
					НовыйЗаказ.СтоимостьПлан            = ВыборкаДокументДоставки.СтоимостьДоставки;
					//EFSOL_Сальник К.А.  -}
					
					//Отбор = Новый Структура;
					//Отбор.Вставить("ДокументДоставки",ВыборкаДокументДоставки.ДокументДоставки);
					//МассивСтрок = Грузы.НайтиСтроки(Отбор);
					
					//Для каждого НовыйГруз Из МассивСтрок Цикл
					//	Грузы.Удалить(НовыйГруз);
					//КонецЦикла;
					
					ВыборкаДетальныеЗаписи = ВыборкаДокументДоставки.Выбрать();
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЗапасыНоменклатура) Тогда
							Продолжить;
						КонецЕсли;
						
						Отбор = Новый Структура;
						Отбор.Вставить("ДокументДоставки",ВыборкаДокументДоставки.ДокументДоставки);
						Отбор.Вставить("Содержание", ВыборкаДетальныеЗаписи.ЗапасыСодержание);
						МассивСтрок = Грузы.НайтиСтроки(Отбор);
						Если МассивСтрок.Количество()= 0 Тогда
							НовыйГруз = Грузы.Добавить();
							Добавление = Истина;
						Иначе
							НовыйГруз = МассивСтрок[0];
							Добавление = Ложь;
						КонецЕсли;
						НовыйГруз.ДокументДоставки 		= ВыборкаДетальныеЗаписи.ЗапасыДокументДоставки;
						НовыйГруз.НомерСтрокиВЗаказе 	= ВыборкаДетальныеЗаписи.ЗапасыНомерСтроки;
						НовыйГруз.Номенклатура 			= ВыборкаДетальныеЗаписи.ЗапасыНоменклатура;
						НовыйГруз.ТипНоменклатурыЗапас 	= ВыборкаДетальныеЗаписи.ЗапасыТипНоменклатурыЗапас;
						НовыйГруз.Характеристика 		= ВыборкаДетальныеЗаписи.ЗапасыХарактеристика;
						НовыйГруз.Партия 				= ВыборкаДетальныеЗаписи.ЗапасыПартия;
						НовыйГруз.КоличествоПлан 		= ВыборкаДетальныеЗаписи.ЗапасыКоличество;
						НовыйГруз.КоличествоФакт 		= ?(Добавление,ВыборкаДетальныеЗаписи.ЗапасыКоличество,НовыйГруз.КоличествоФакт);
						НовыйГруз.ЕдиницаИзмерения 		= ВыборкаДетальныеЗаписи.ЗапасыЕдиницаИзмерения;
						НовыйГруз.Цена 					= ВыборкаДетальныеЗаписи.ЗапасыЦена;
						НовыйГруз.ПроцентСкидкиНаценки 	= ВыборкаДетальныеЗаписи.ЗапасыПроцентСкидкиНаценки;
						НовыйГруз.НППлан 				= ВыборкаДетальныеЗаписи.ЗапасыНППлан;
						НовыйГруз.НПФакт 				= ?(Добавление,ВыборкаДетальныеЗаписи.ЗапасыНППлан,НовыйГруз.НПФакт);
						НовыйГруз.Содержание 			= ВыборкаДетальныеЗаписи.ЗапасыСодержание;
						
						НовыйГруз.Вес		 			= ВыборкаДетальныеЗаписи.ЗапасыВес;
						НовыйГруз.Объем 				= ВыборкаДетальныеЗаписи.ЗапасыОбъем;
						НовыйГруз.ОбъемныйВес 			= ВыборкаДетальныеЗаписи.ЗапасыОбъемныйВес;
						НовыйГруз.ОбьявленнаяСтоимость 	= ВыборкаДетальныеЗаписи.ЗапасыОбьявленнаяСтоимость;
						НовыйГруз.Опасность 			= ВыборкаДетальныеЗаписи.ЗапасыОпасность;
						НовыйГруз.Артикул				= ВыборкаДетальныеЗаписи.ЗапасыАртикул;
						НовыйГруз.Штрихкод				= ВыборкаДетальныеЗаписи.ЗапасыШтрихкод;
						НовыйГруз.СтавкаНДС				= ВыборкаДетальныеЗаписи.ЗапасыСтавкаНДС;
						НовыйГруз.СуммаНДС				= ВыборкаДетальныеЗаписи.ЗапасыСуммаНДС;
					КонецЦикла;	
					//КонецЕсли;
				КонецЕсли;
				Продолжить;	
			КонецЕсли;
			//ES_Савченко Е.Р. 14.08.2017 -
			
			// Если ВыборкаДокументДоставки.ДействиеНадДоком = "Добавить", добавляем заказы
			ЗаказыДляДобавления.Добавить(ВыборкаДокументДоставки.ДокументДоставки);
			
			НовыйЗаказ = Заказы.Добавить();
			НовыйЗаказ.ДокументДоставки 		= ВыборкаДокументДоставки.ДокументДоставки;
			//ЕФСОЛ Несторук +
			НовыйЗаказ.НомерНакладной			= ВыборкаДокументДоставки.НомерНакладной;
			НовыйЗаказ.НомерНакладнойПредставление			= ВыборкаДокументДоставки.НомерНакладнойПредставление;
			//ЕФСОЛ Несторук  -
			НовыйЗаказ.СвязанныйДокумент		= ВыборкаДокументДоставки.СвязанныйДокумент;
			//ЕФСОЛ Несторук +
			НовыйЗаказ.АдресДоставки 			= "" + ВыборкаДокументДоставки.АдресДоставки+ ", "+ВыборкаДокументДоставки.Регион;
			НовыйЗаказ.Склад					= ВыборкаДокументДоставки.Склад;
			НовыйЗаказ.Ячейка					= ВыборкаДокументДоставки.Ячейка;
			
			//ЕФСОЛ Несторук -
			НовыйЗаказ.ВидДоставки 				= ВыборкаДокументДоставки.ВидДоставки;
			НовыйЗаказ.ВидЗабора 				= ВыборкаДокументДоставки.ВидЗабора;
			НовыйЗаказ.Заказчик 				= ВыборкаДокументДоставки.Заказчик;
			НовыйЗаказ.Договор 					= ВыборкаДокументДоставки.Договор;
			НовыйЗаказ.ДатаФактическойДоставки 	= ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
			НовыйЗаказ.ВремяФактическойДоставки = ТекущаяДатаСеанса();
			НовыйЗаказ.ES_Предоплачен			= ВыборкаДокументДоставки.Предоплачен;
			//ES_Коваленко М. 21.01.2016 {
			НовыйЗаказ.ES_ВидОплаты				= ВыборкаДокументДоставки.ВидОплаты;
			// } ES_Коваленко
			
			// Статус, Стоимость доставки
			Если ТипЗнч(ВыборкаДокументДоставки.ДокументДоставки) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				
				//ЕФСОЛ Несторук 06-11-16 +
				//НовыйЗаказ.СтатусЗаказа 		= Перечисления.ES_СтатусыЗаказов.Назначен;
				//Если ЗначениеЗаполнено(АвтоПринят) Тогда
				//	Если АвтоПринят Тогда 
				//НовыйЗаказ.СтатусЗаказа 		= Перечисления.ES_СтатусыЗаказов.Принят;
				//	Иначе
				СтрокаЗабор = Заказы.НайтиСтроки(Новый Структура("ДокументДоставки", ВыборкаДокументДоставки.СвязанныйДокумент));
				Если СтрокаЗабор.Количество() > 0 Тогда
					СтатусЗаказаДляЗаписи = Перечисления.ES_СтатусыЗаказов.ОжидаетГрузНазначен;
				Иначе 
					СтатусЗаказаДляЗаписи 		= Перечисления.ES_СтатусыЗаказов.Назначен;
				КонецЕсли;
				
				
				//Если ВыборкаДокументДоставки.ВидДоставки = Перечисления.ES_ВидыДоставки.ДвериДвери 
				//	И ВыборкаДокументДоставки.ВидЗабора = Перечисления.ES_ВидыЗабора.Упрощенный Тогда
				//	СтатусЗаказаДляЗаписи 		= Перечисления.ES_СтатусыЗаказов.Назначен;
				//ИначеЕсли НЕ ЗначениеЗаполнено(СтатусЗаказаДляЗаписи) Тогда
				//	СтатусЗаказаДляЗаписи 		= Перечисления.ES_СтатусыЗаказов.НазначенПринят;
				//КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтатусЗаказаДляЗаписи) Тогда
					СтатусЗаказаДляЗаписи 		= Перечисления.ES_СтатусыЗаказов.Назначен;
				КонецЕсли;
				
				НовыйЗаказ.СтатусЗаказа 		= СтатусЗаказаДляЗаписи;
				//	КонецЕсли;
				//Иначе 
				//	НовыйЗаказ.СтатусЗаказа 		= Перечисления.ES_СтатусыЗаказов.НазначенПринят;
				//КонецЕсли;
				//ЕФСОЛ Несторук 06-11-16 -
				
				
				// Для Заказов на доставку, у которых вид доставки не Получатель денежные реквизиты, Удержать и Плательщик должны быть незаполненными
				Если НЕ ВыборкаДокументДоставки.ВидДоставки = Перечисления.ES_ВидыДоставки.СкладСклад Тогда
					
					СтоимостьПлан = ВыборкаДокументДоставки.СтоимостьДоставки;
					
					// Стоимость доставки заполняется, только если Плательщик = Получатель
					//Если НЕ ВыборкаДокументДоставки.Плательщик = Перечисления.ES_ТипыПлательщиков.Получатель Тогда
					//	СтоимостьПлан = 0;
					//КонецЕсли;
					 //EFSOL_Сальник К.А. 2019-05-17 {+
					 //СтоимостьПлан = ?(ВыборкаДокументДоставки.ЧекНаОбщуюСумму = Истина,ВыборкаДокументДоставки.СтоимостьДоставки,0);
					 СтоимостьПлан = ВыборкаДокументДоставки.СтоимостьДоставки; 
					 //EFSOL_Сальник К.А.  -}
					 
					
					НовыйЗаказ.СтоимостьПлан 	= СтоимостьПлан;  
					НовыйЗаказ.ES_ВидОплаты		= ВыборкаДокументДоставки.ВидОплаты;
					НовыйЗаказ.НППлан 			= ВыборкаДокументДоставки.НППлан;
					НовыйЗаказ.Плательщик 		= ВыборкаДокументДоставки.Плательщик;
					НовыйЗаказ.КассаНП 			= КассаНППоУмолчанию;
					НовыйЗаказ.КассаСтоимость 	= КассаНППоУмолчанию;
					
					//заполняется если зачет НП
					//Если ВыборкаДокументДоставки.ВидОплаты = Перечисления.ТипыДенежныхСредств.ES_ЗачетНП Тогда 
					//	НовыйЗаказ.СтоимостьФакт	= ВыборкаДокументДоставки.СтоимостьДоставки;
					//	НовыйЗаказ.НПФакт       	= НовыйЗаказ.НППлан - СтоимостьПлан;
					//КонецЕсли;
					
					Если ВыборкаДокументДоставки.ВидОплаты = Перечисления.ТипыДенежныхСредств.Безналичные Тогда 
						НовыйЗаказ.КассаНП 			= РасчетныйСчетПоУмолчанию;
						НовыйЗаказ.КассаСтоимость 	= РасчетныйСчетПоУмолчанию;
					КонецЕсли;
					
					//// Доработка от 03-02-2016 по требованиям Начало
					НовыйЗаказ.Касса  = КассаНППоУмолчанию;
					НовыйЗаказ.Счет   = РасчетныйСчетПоУмолчанию;
					//// Доработка от 03-02-2016 по требованиям Конец
					
					
				КонецЕсли; 
				
			ИначеЕсли ТипЗнч(ВыборкаДокументДоставки.ДокументДоставки) = Тип("ДокументСсылка.ES_ЗаборГруза") Тогда
				
				НовыйЗаказ.СтатусЗаказа = Перечисления.ES_СтатусыЗаборов.Назначен;
				
			КонецЕсли;
			
			ВыборкаДетальныеЗаписи = ВыборкаДокументДоставки.Выбрать();
			
			
			Если ВыборкаДокументДоставки.ПредставлениеГрузов = Перечисления.ES_ПредставлениеГрузов.Места Тогда
				// ТЧ СписокГрузов / Места
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					НовыйГруз = СписокГрузов.Добавить();
					НовыйГруз.ДокументДоставки 	= ВыборкаДетальныеЗаписи.ДокументДоставки;
					НовыйГруз.НомерСтрокиВЗаказе= ВыборкаДетальныеЗаписи.МестаНомерСтроки;
					НовыйГруз.КлючСтроки 		= ВыборкаДетальныеЗаписи.МестаКлючСтроки;
					НовыйГруз.ТипГруза 			= ВыборкаДетальныеЗаписи.МестаТипГруза;
					НовыйГруз.ОбъемныйВес 		= ВыборкаДетальныеЗаписи.МестаОбъемныйВес;
					НовыйГруз.Вес 				= ВыборкаДетальныеЗаписи.МестаВес;
					НовыйГруз.Высота 			= ВыборкаДетальныеЗаписи.МестаВысота;
					НовыйГруз.Длина 			= ВыборкаДетальныеЗаписи.МестаДлина;
					НовыйГруз.Ширина 			= ВыборкаДетальныеЗаписи.МестаШирина;
					НовыйГруз.НППлан 			= ВыборкаДетальныеЗаписи.МестаНППлан;
					НовыйГруз.НПФакт 			= ВыборкаДетальныеЗаписи.МестаНППлан;
					НовыйГруз.ОписаниеГруза 	= ВыборкаДетальныеЗаписи.МестаОписаниеГруза;
					НовыйГруз.Страховка 		= ВыборкаДетальныеЗаписи.МестаСтраховка;
					
				КонецЦикла;
				
			ИначеЕсли ВыборкаДокументДоставки.ПредставлениеГрузов = Перечисления.ES_ПредставлениеГрузов.Запасы Тогда 	
				// ТЧ Грузы / Запасы
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЗапасыНоменклатура) Тогда 
						Продолжить;
					КонецЕсли;
					
					НовыйГруз = Грузы.Добавить();
					НовыйГруз.ДокументДоставки 		= ВыборкаДетальныеЗаписи.ДокументДоставки;
					НовыйГруз.НомерСтрокиВЗаказе 	= ВыборкаДетальныеЗаписи.ЗапасыНомерСтроки;
					НовыйГруз.Номенклатура 			= ВыборкаДетальныеЗаписи.ЗапасыНоменклатура;
					НовыйГруз.ТипНоменклатурыЗапас 	= ВыборкаДетальныеЗаписи.ЗапасыТипНоменклатурыЗапас;
					НовыйГруз.Характеристика 		= ВыборкаДетальныеЗаписи.ЗапасыХарактеристика;
					НовыйГруз.Партия 				= ВыборкаДетальныеЗаписи.ЗапасыПартия;
					НовыйГруз.КоличествоПлан 		= ВыборкаДетальныеЗаписи.ЗапасыКоличество;
					НовыйГруз.КоличествоФакт 		= ВыборкаДетальныеЗаписи.ЗапасыКоличество;
					НовыйГруз.ЕдиницаИзмерения 		= ВыборкаДетальныеЗаписи.ЗапасыЕдиницаИзмерения;
					НовыйГруз.Цена 					= ВыборкаДетальныеЗаписи.ЗапасыЦена;
					НовыйГруз.ПроцентСкидкиНаценки 	= ВыборкаДетальныеЗаписи.ЗапасыПроцентСкидкиНаценки;
					НовыйГруз.НППлан 				= ВыборкаДетальныеЗаписи.ЗапасыНППлан;
					НовыйГруз.НПФакт 				= ВыборкаДетальныеЗаписи.ЗапасыНППлан;
					НовыйГруз.Содержание 			= ВыборкаДетальныеЗаписи.ЗапасыСодержание;
					//ЕФСОЛ Несторук 07-11-16 +
					НовыйГруз.Вес		 			= ВыборкаДетальныеЗаписи.ЗапасыВес;
					НовыйГруз.Объем 				= ВыборкаДетальныеЗаписи.ЗапасыОбъем;
					НовыйГруз.ОбъемныйВес 			= ВыборкаДетальныеЗаписи.ЗапасыОбъемныйВес;
					НовыйГруз.ОбьявленнаяСтоимость 	= ВыборкаДетальныеЗаписи.ЗапасыОбьявленнаяСтоимость;
					НовыйГруз.Опасность 			= ВыборкаДетальныеЗаписи.ЗапасыОпасность;
					НовыйГруз.Артикул				= ВыборкаДетальныеЗаписи.ЗапасыАртикул;
					НовыйГруз.Штрихкод				= ВыборкаДетальныеЗаписи.ЗапасыШтрихкод;
					НовыйГруз.СтавкаНДС				= ВыборкаДетальныеЗаписи.ЗапасыСтавкаНДС;
					НовыйГруз.СуммаНДС				= ВыборкаДетальныеЗаписи.ЗапасыСуммаНДС;
					
					//ЕФСОЛ Несторук 07-11-16 
				КонецЦикла;
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураКВозврату.Вставить("ЗаказыНаУдаление", ЗаказыНаУдаление);
	СтруктураКВозврату.Вставить("ЗаказыДляДобавления", ЗаказыДляДобавления);
	
	Возврат СтруктураКВозврату;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	// Создать на основании можно только из проведенного Плана на доставку
	Если НЕ ДанныеЗаполнения.Проведен Тогда
		ВызватьИсключение НСтр("ru = 'Создать ""Отчет о доставке"" можно только на основании проведенного Плана!'");
	КонецЕсли;
	
	РаспределениеВОтдельномОкне = Константы.ES_РаспределениеЗаявокВОтдельномОкне.Получить();
	Если РаспределениеВОтдельномОкне Тогда
		
		// Создать на основании можно только по утвержденному Плану на доставку
		Если НЕ ДанныеЗаполнения.Подтвержден Тогда
			ВызватьИсключение НСтр("ru = 'Создать ""Отчет о доставке"" можно только на основании утвержденного Плана!'");
		КонецЕсли;
	
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ES_ПланДоставки") Тогда
		Курьер = ДанныеЗаполнения.Курьер;
		Подрядчик = ДанныеЗаполнения.Подрядчик;
		Перевозчик = ДанныеЗаполнения.Перевозчик;
		ЗаполнитьДаннымиИзПланаДоставки(ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Дата документа всегда 23:59:00
	//Если ЭтоНовый() И Дата <> НачалоМинуты(КонецДня(Дата)) Тогда
	//	Дата = НачалоМинуты(КонецДня(Дата));
	//КонецЕсли;
	//ЕФСОЛ Несторук 24.08.2016 +
	Если ЭтоНовый() Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	//ЕФСОЛ Несторук 24.08.2016 -
	
	// Удаление пустых строк в ТЧ СписокГрузов и Грузы
	ПустыеСтрокиСписокГрузов = СписокГрузов.НайтиСтроки(Новый Структура("КлючСтроки", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")));
	Для каждого Стр Из ПустыеСтрокиСписокГрузов Цикл
		СписокГрузов.Удалить(Стр);
	КонецЦикла; 
	ПустыеСтрокиГрузы = Грузы.НайтиСтроки(Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка()));
	Для каждого Стр Из ПустыеСтрокиГрузы Цикл
		Грузы.Удалить(Стр);
	КонецЦикла;
	
	// Подсчет итогов
	ИтогоЗапасыФакт 	= Грузы.Итог("КоличествоФакт");
	УдалитьИтогоНПФакт 		= Заказы.Итог("НПФакт");
	ИтогоСтоимостьФакт 	= Заказы.Итог("СтоимостьФакт");
	
	//// Нельзя пометить на удаление если на основании Отчета есть проведенные приходники в кассу
	//Если ПометкаУдаления Тогда
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	ПоступлениеВКассу.Ссылка
	//	|ИЗ
	//	|	Документ.ПоступлениеВКассу КАК ПоступлениеВКассу
	//	|ГДЕ
	//	|	ПоступлениеВКассу.ДокументОснование = &ДокументОснование
	//	|	И ПоступлениеВКассу.Проведен
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	ПоступлениеНаСчет.Ссылка
	//	|ИЗ
	//	|	Документ.ПоступлениеНаСчет КАК ПоступлениеНаСчет
	//	|ГДЕ
	//	|	ПоступлениеНаСчет.ДокументОснование = &ДокументОснование
	//	|	И ПоступлениеНаСчет.Проведен";
	//	
	//	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	Если НЕ РезультатЗапроса.Пустой() Тогда
	//		ТекстСообщения = "На основании Отчета созданы документы: ";
	//		Выборка = РезультатЗапроса.Выбрать();
	//		Пока Выборка.Следующий() Цикл
	//			ТекстСообщения = ТекстСообщения + Символы.ПС + Выборка.Ссылка;
	//		КонецЦикла;
	//		
	//		Сообщение = Новый СообщениеПользователю;
	//		Сообщение.Текст = ТекстСообщения;
	//		Сообщение.Сообщить(); 
	//		
	//		Отказ = Истина;
	//	КонецЕсли; 
	//	
	//КонецЕсли; 
	
	Если ПометкаУдаления ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		// Нельзя пометить на удаление и отменить проведение документа, если он проходит по другим документам
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(Ссылка);
		
		УстановитьПривилегированныйРежим(Истина);
		ТабНайденныхСсылок = НайтиПоСсылкам(МассивСсылок);
		УстановитьПривилегированныйРежим(Ложь);
		
		Для каждого Строка Из ТабНайденныхСсылок Цикл
			Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Строка.Данные)) Тогда
				//ЭР Несторук С.И. 13.10.2017 14:44:41 {
				//Смотрим ссылаются ли на документ проведенные документы, а не помеченные на удаление
				//Если НЕ Строка.Данные.ПометкаУдаления и НЕ Ссылка = Строка.Данные Тогда
				Если Строка.Данные.Проведен и НЕ Ссылка = Строка.Данные Тогда
					//}ЭР Несторук С.И.
					Сообщить("На документ ссылается " + Строка.Данные);
					Отказ = Истина;
					Возврат;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		// Контроль: Нельзя проводить Отчет, План которого не проведен
		Если НЕ ПланДоставки.Проведен Тогда
			Сообщить("" + ПланДоставки + " не проведен");
			Отказ = Истина;
			Возврат;
		КонецЕсли; 
		
		// Контроль: Нельзя проводить Отчет с планом, который уже проведен в другом отчете
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ES_СвязьПлановИОтчетовСрезПоследних.ПланДоставки,
		|	ES_СвязьПлановИОтчетовСрезПоследних.ОтчетОДоставке
		|ИЗ
		|	РегистрСведений.ES_СвязьПлановИОтчетов.СрезПоследних(, ПланДоставки = &ПланДоставки) КАК ES_СвязьПлановИОтчетовСрезПоследних
		|ГДЕ
		|	НЕ ES_СвязьПлановИОтчетовСрезПоследних.ОтчетОДоставке = &ОтчетОДоставке";
		
		Запрос.УстановитьПараметр("ПланДоставки", ПланДоставки);
		Запрос.УстановитьПараметр("ОтчетОДоставке", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ОтчетОДоставке) Тогда
					Сообщить("По выбранному Плану доставки уже был сформирован " + ВыборкаДетальныеЗаписи.ОтчетОДоставке);
					Отказ = Истина;
					Возврат;
				КонецЕсли; 
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения) Экспорт
	
	//ЭР Несторук С.И. 28.02.2017 12:05:05 {
	//Выдача курьеру пока не используется
	ИспользоватьВыдачу = Константы.ES_ИспользоватьВидачуПриемкуПоКурьерам.Получить();
	//
	ИспользоватьЯчейки = ПолучитьФункциональнуюОпцию("УчетПоЯчейкам");
	
	//КонтрольЗаполненияРеквизитовТЧЗаказы(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
		
	//}ЭР Несторук С.И.	
	
	// Движения документа
	
	ТабСведенияОЗаказе 			= ES_ФормированиеДвиженийПоРегистрамДоставки.СоздатьТаблицуСведенийОЗаказах();
	ТабСведенияОЗаборе 			= ES_ФормированиеДвиженийПоРегистрамДоставки.СоздатьТаблицуСведенийОЗаборах();
	ТабИзменяемыеРеквизитыЗаказа = ES_ФормированиеДвиженийПоРегистрамДоставки.СоздатьТабДляИзменяемыхРеквизитов();
	ТабИзменяемыеРеквизитыЗабора = ES_ФормированиеДвиженийПоРегистрамДоставки.СоздатьТабДляИзменяемыхРеквизитовЗаборов();
	
	ЗаказДоставкиВидОплаты = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_ОтчетОДоставкеЗаказы.НомерСтроки КАК НомерСтроки,
	|	ES_ОтчетОДоставкеЗаказы.ДокументДоставки КАК ДокументДоставки,
	|	ES_ОтчетОДоставкеЗаказы.СвязанныйДокумент КАК СвязанныйДокумент,
	|	ES_ОтчетОДоставкеЗаказы.ВидДоставки КАК ВидДоставки,
	|	ES_ОтчетОДоставкеЗаказы.ВремяФактическойДоставки КАК ВремяФактическойДоставки,
	|	ES_ОтчетОДоставкеЗаказы.ДатаФактическойДоставки КАК ДатаФактическойДоставки,
	|	ES_ОтчетОДоставкеЗаказы.Комментарий КАК Комментарий,
	|	ES_ОтчетОДоставкеЗаказы.НПФакт КАК НПФакт,
	|	ES_ОтчетОДоставкеЗаказы.СтоимостьФакт КАК СтоимостьФакт,
	|	ES_ОтчетОДоставкеЗаказы.КассаНП КАК КассаНП,
	|	ES_ОтчетОДоставкеЗаказы.КассаСтоимость КАК КассаСтоимость,
	|	ES_ОтчетОДоставкеЗаказы.Заказчик КАК Заказчик,
	|	ES_ОтчетОДоставкеЗаказы.СтатусЗаказа КАК СтатусЗаказа,
	|	ES_ОтчетОДоставкеЗаказы.ТрекНомер КАК ТрекНомер,
	|	ES_ОтчетОДоставкеЗаказы.Расходы КАК Расходы,
	|	ES_ОтчетОДоставкеЗаказы.ES_ВидОплаты КАК ВидОплаты,
	|	ES_ОтчетОДоставкеЗаказы.НПФактБезнал КАК НПФактБезнал,
	|	ES_ОтчетОДоставкеЗаказы.СтоимостьФактБезнал КАК СтоимостьФактБезнал,
	|	ES_ОтчетОДоставкеЗаказы.НПФактНал КАК НПФактНал,
	|	ES_ОтчетОДоставкеЗаказы.СтоимостьФактНал КАК СтоимостьФактНал,
	|	ES_ОтчетОДоставкеЗаказы.Касса КАК Касса,
	|	ES_ОтчетОДоставкеЗаказы.Счет КАК Счет,
	|	ES_ОтчетОДоставкеЗаказы.ФИОПолучателя КАК ФИОПолучателя,
	|	ES_ОтчетОДоставкеЗаказы.Склад КАК Склад,
	|	ES_ОтчетОДоставкеЗаказы.Ячейка КАК Ячейка,
	|	ES_ОтчетОДоставкеЗаказы.КомментарийКСтатусу КАК КомментарийКСтатусу,
	|	ES_ОтчетОДоставкеЗаказы.НППлан КАК НППлан,
	|	ES_ОтчетОДоставкеЗаказы.УслугиПартнера КАК УслугиПартнера,
	|	ES_ОтчетОДоставкеЗаказы.ОплаченiBox КАК ОплаченiBox,
	|	ES_ОтчетОДоставкеЗаказы.ИДТранзакции КАК ИДТранзакции,
	|	ES_ОтчетОДоставкеЗаказы.НомерЧека КАК НомерЧека,
	|	ES_ОтчетОДоставкеЗаказы.ВидЗабора КАК ВидЗабора
	|ПОМЕСТИТЬ ВТ_Док
	|ИЗ
	|	Документ.ES_ОтчетОДоставке.Заказы КАК ES_ОтчетОДоставкеЗаказы
	|ГДЕ
	|	ES_ОтчетОДоставкеЗаказы.Ссылка = &ДокОтчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ES_СтатусыЗаказовСрезПоследних.Период КАК Период,
	|	ES_СтатусыЗаказовСрезПоследних.Заказ КАК Заказ
	|ПОМЕСТИТЬ ВТ_ПериодИзРсСтатусы
	|ИЗ
	|	РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(
	|			&Период,
	|			Заказ В
	|					(ВЫБРАТЬ
	|						ВТ_Док.ДокументДоставки
	|					ИЗ
	|						ВТ_Док КАК ВТ_Док)
	|				И СтатусЗаказа В (&СтатусыЗаказов)) КАК ES_СтатусыЗаказовСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ES_СтатусыЗаборовСрезПоследних.Период,
	|	ES_СтатусыЗаборовСрезПоследних.Забор
	|ИЗ
	|	РегистрСведений.ES_СтатусыЗаборов.СрезПоследних(
	|			&Период,
	|			Забор В
	|					(ВЫБРАТЬ
	|						ВТ_Док.ДокументДоставки
	|					ИЗ
	|						ВТ_Док КАК ВТ_Док)
	|				И СтатусЗабора В (&СтатусыЗаборов)) КАК ES_СтатусыЗаборовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_ОтчетОДоставкеГрузы.ДокументДоставки КАК ДокументДоставки,
	|	ES_ОтчетОДоставкеГрузы.НомерСтроки КАК ЗапасНомерСтроки,
	|	ES_ОтчетОДоставкеГрузы.Номенклатура КАК ЗапасНоменклатура,
	|	ES_ОтчетОДоставкеГрузы.Характеристика КАК ЗапасХарактеристика,
	|	ES_ОтчетОДоставкеГрузы.КоличествоПлан КАК ЗапасКоличествоПлан,
	|	ES_ОтчетОДоставкеГрузы.КоличествоФакт КАК ЗапасКоличествоФакт,
	|	ES_ОтчетОДоставкеГрузы.НПФакт КАК ЗапасНПФакт,
	|	ES_ОтчетОДоставкеГрузы.Содержание КАК ЗапасСодержание
	|ПОМЕСТИТЬ ВТ_Грузы
	|ИЗ
	|	Документ.ES_ОтчетОДоставке.Грузы КАК ES_ОтчетОДоставкеГрузы
	|ГДЕ
	|	ES_ОтчетОДоставкеГрузы.Ссылка = &ДокОтчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Док.НомерСтроки КАК НомерСтроки,
	|	ВТ_Док.ДокументДоставки КАК ДокументДоставки,
	|	ВТ_Док.СвязанныйДокумент КАК СвязанныйДокумент,
	|	ВТ_Док.ФИОПолучателя КАК ФИОПолучателя,
	|	ВТ_Док.ВидДоставки КАК ВидДоставки,
	|	ВТ_Док.ВремяФактическойДоставки КАК ВремяДоставки,
	|	ВТ_Док.ДатаФактическойДоставки КАК ДатаДоставки,
	|	ВТ_Док.Комментарий КАК Комментарий,
	|	ВТ_Док.НПФакт КАК НПФакт,
	|	ВТ_Док.СтоимостьФакт КАК СтоимостьФакт,
	|	ВТ_Док.КассаНП КАК КассаНП,
	|	ВТ_Док.КассаСтоимость КАК КассаСтоимость,
	|	ВТ_Док.Заказчик КАК Заказчик,
	|	ВТ_Док.СтатусЗаказа КАК СтатусЗаказа,
	|	ВТ_Док.ТрекНомер КАК ТрекНомер,
	|	ВТ_Док.Расходы КАК Расходы,
	|	ЕСТЬNULL(ВТ_ПериодИзРсСтатусы.Период, &ТекДата) КАК ПериодИзРС,
	|	ВТ_Грузы.ЗапасНомерСтроки КАК ЗапасНомерСтроки,
	|	ВТ_Грузы.ЗапасНоменклатура КАК ЗапасНоменклатура,
	|	ВТ_Грузы.ЗапасХарактеристика КАК ЗапасХарактеристика,
	|	ВТ_Грузы.ЗапасКоличествоПлан КАК ЗапасКоличествоПлан,
	|	ВТ_Грузы.ЗапасКоличествоФакт КАК ЗапасКоличествоФакт,
	|	ВТ_Грузы.ЗапасНПФакт КАК ЗапасНПФакт,
	|	ВТ_Док.ВидОплаты КАК ВидОплаты,
	|	ВТ_Док.НПФактБезнал КАК НПФактБезнал,
	|	ВТ_Док.СтоимостьФактБезнал КАК СтоимостьФактБезнал,
	|	ВТ_Док.НПФактНал КАК НПФактНал,
	|	ВТ_Док.СтоимостьФактНал КАК СтоимостьФактНал,
	|	ВТ_Док.Касса КАК Касса,
	|	ВТ_Док.Счет КАК Счет,
	|	ВТ_Док.Склад КАК Склад,
	|	ЕСТЬNULL(ES_ЗаказыУКурьераОстатки.КоличествоОстаток, 0) КАК КоличествоУКурьера,
	|	ЕСТЬNULL(ES_ЗаказыНаСкладеОстатки.КоличествоОстаток, 0) КАК КоличествоНаСкладе,
	|	ВТ_Док.Ячейка КАК Ячейка,
	|	ВТ_Док.КомментарийКСтатусу КАК КомментарийСтатуса,
	|	ВТ_Док.НППлан КАК НППлан,
	|	ВТ_Док.УслугиПартнера КАК УслугиПартнера,
	|	ВТ_Грузы.ЗапасСодержание КАК ЗапасСодержание,
	|	ВТ_Док.ОплаченiBox КАК ОплаченiBox,
	|	ВТ_Док.ИДТранзакции КАК ИДТранзакции,
	|	ВТ_Док.НомерЧека КАК НомерЧека,
	|	ВТ_Док.ВидЗабора КАК ВидЗабора
	|ИЗ
	|	ВТ_Док КАК ВТ_Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодИзРсСтатусы КАК ВТ_ПериодИзРсСтатусы
	|		ПО ВТ_Док.ДокументДоставки = ВТ_ПериодИзРсСтатусы.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Грузы КАК ВТ_Грузы
	|		ПО ВТ_Док.ДокументДоставки = ВТ_Грузы.ДокументДоставки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ES_ЗаказыУКурьера.Остатки(
	|				,
	|				Заказ В
	|						(ВЫБРАТЬ
	|							ВЫБОР
	|								КОГДА ВТ_Док.ДокументДоставки ССЫЛКА Документ.ES_ЗаборГруза
	|									ТОГДА ВТ_Док.СвязанныйДокумент
	|								ИНАЧЕ ВТ_Док.ДокументДоставки
	|							КОНЕЦ КАК ДокументДоставки
	|						ИЗ
	|							ВТ_Док КАК ВТ_Док)
	|					И Курьер = &Курьер) КАК ES_ЗаказыУКурьераОстатки
	|		ПО (ВЫБОР
	|				КОГДА ВТ_Док.ДокументДоставки ССЫЛКА Документ.ES_ЗаборГруза
	|					ТОГДА ВТ_Док.СвязанныйДокумент = ES_ЗаказыУКурьераОстатки.Заказ
	|				ИНАЧЕ ВТ_Док.ДокументДоставки = ES_ЗаказыУКурьераОстатки.Заказ
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ES_ЗаказыНаСкладе.Остатки(
	|				,
	|				Заказ В
	|						(ВЫБРАТЬ
	|							ВЫБОР
	|								КОГДА ВТ_Док.ДокументДоставки ССЫЛКА Документ.ES_ЗаборГруза
	|									ТОГДА ВТ_Док.СвязанныйДокумент
	|								ИНАЧЕ ВТ_Док.ДокументДоставки
	|							КОНЕЦ КАК ДокументДоставки
	|						ИЗ
	|							ВТ_Док КАК ВТ_Док)
	|					И Склад = &Склад) КАК ES_ЗаказыНаСкладеОстатки
	|		ПО ВТ_Док.ДокументДоставки = ES_ЗаказыНаСкладеОстатки.Заказ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	ЗапасНомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(СвязанныйДокумент),
	|	МАКСИМУМ(ФИОПолучателя),
	|	МАКСИМУМ(ВидДоставки),
	|	МАКСИМУМ(ВремяДоставки),
	|	МАКСИМУМ(ДатаДоставки),
	|	МАКСИМУМ(Комментарий),
	|	МАКСИМУМ(НПФакт),
	|	МАКСИМУМ(СтоимостьФакт),
	|	МАКСИМУМ(КассаНП),
	|	МАКСИМУМ(КассаСтоимость),
	|	МАКСИМУМ(Заказчик),
	|	МАКСИМУМ(СтатусЗаказа),
	|	МАКСИМУМ(ТрекНомер),
	|	МАКСИМУМ(Расходы),
	|	МАКСИМУМ(ПериодИзРС),
	|	МАКСИМУМ(ВидОплаты),
	|	МАКСИМУМ(НПФактБезнал),
	|	МАКСИМУМ(СтоимостьФактБезнал),
	|	МАКСИМУМ(НПФактНал),
	|	МАКСИМУМ(СтоимостьФактНал),
	|	МАКСИМУМ(Касса),
	|	МАКСИМУМ(Счет),
	|	МАКСИМУМ(Склад),
	|	МАКСИМУМ(КоличествоУКурьера),
	|	МАКСИМУМ(КоличествоНаСкладе),
	|	МАКСИМУМ(Ячейка),
	|	МАКСИМУМ(КомментарийСтатуса),
	|	МАКСИМУМ(НППлан),
	|	МАКСИМУМ(УслугиПартнера),
	|	МАКСИМУМ(ОплаченiBox),
	|	МАКСИМУМ(ИДТранзакции),
	|	МАКСИМУМ(НомерЧека),
	|	МАКСИМУМ(ВидЗабора)
	|ПО
	|	ДокументДоставки";
	
	Запрос.УстановитьПараметр("ДокОтчет", Ссылка);
	Запрос.УстановитьПараметр("Период", ТекущаяДата() + 2592000); //2592000 = 86400 * 30  // дата + месяц
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	
	МассивСтатусовЗаказов = Новый Массив;
	МассивСтатусовЗаказов.Добавить(Перечисления.ES_СтатусыЗаказов.Комплектуется);
	МассивСтатусовЗаказов.Добавить(Перечисления.ES_СтатусыЗаказов.НеДоставлен);
	МассивСтатусовЗаказов.Добавить(Перечисления.ES_СтатусыЗаказов.Подготовлен);
	Запрос.УстановитьПараметр("СтатусыЗаказов", МассивСтатусовЗаказов);
	
	МассивСтатусовЗаборов = Новый Массив;
	МассивСтатусовЗаборов.Добавить(Перечисления.ES_СтатусыЗаборов.Назначен);
	МассивСтатусовЗаборов.Добавить(Перечисления.ES_СтатусыЗаборов.НеВыполнен);
	Запрос.УстановитьПараметр("СтатусыЗаборов", МассивСтатусовЗаборов);
	
	//ЭР Несторук С.И. 14.02.2017 15:21:26 {
	Запрос.УстановитьПараметр("Курьер", Курьер);
	Запрос.УстановитьПараметр("Склад",Склад);
	//ЭР Несторук С.И. 14.02.2017 15:21:26 }
	Если ЗначениеЗаполнено(ПланДоставки) Тогда
		// РС ES_СвязьПлановИОтчетов
		Движение = Движения.ES_СвязьПлановИОтчетов.Добавить();
		Движение.Период 		= Дата;
		Движение.ПланДоставки 	= ПланДоставки;
		Движение.ОтчетОДоставке = Ссылка;
		Движение.Курьер 		= Курьер;
		Движение.РасходИзОтчета = ИтогоРасходы;
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаЗаказДоставки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаЗаказДоставки.Следующий() Цикл
			
			//ПериодПроведения = ВыборкаЗаказДоставки.ПериодИзРС + 1;
			ПериодПроведения = ВыборкаЗаказДоставки.ДатаДоставки + (ВыборкаЗаказДоставки.ВремяДоставки - НачалоДня(ВыборкаЗаказДоставки.ВремяДоставки));
			Если НЕ ЗначениеЗаполнено(ПериодПроведения) Тогда
				ПериодПроведения = Дата;
			КонецЕсли;
			
			// Движения документа ЗАБОР ГРУЗА
			
			Если ТипЗнч(ВыборкаЗаказДоставки.ДокументДоставки) = Тип("ДокументСсылка.ES_ЗаборГруза") Тогда 
				
				// РС ES_СведенияОЗаборах - заполнение таблицы
				НоваяСтрока = ТабСведенияОЗаборе.Добавить();
				НоваяСтрока.Движения 		= Движения.ES_СведенияОЗаборах;
				НоваяСтрока.Период 			= ПериодПроведения;
				НоваяСтрока.Регистратор 	= Ссылка;
				НоваяСтрока.ОснованиеЗабора = ?(ЗначениеЗаполнено(ВыборкаЗаказДоставки.СвязанныйДокумент), ВыборкаЗаказДоставки.СвязанныйДокумент, ВыборкаЗаказДоставки.ДокументДоставки);
				НоваяСтрока.Забор 			= ВыборкаЗаказДоставки.ДокументДоставки;
				НоваяСтрока.ОтчетОДоставке 	= Ссылка;
				
				// РС ES_ИзменяемыеРеквизитыЗаказа
				ДатаВремяДоставки = '00010101';
				Если НЕ ВыборкаЗаказДоставки.СтатусЗаказа = Перечисления.ES_СтатусыЗаборов.ВПути Тогда
					ДатаВремяДоставки = НачалоДня(ВыборкаЗаказДоставки.ДатаДоставки) + (ВыборкаЗаказДоставки.ВремяДоставки - '00010101');
				КонецЕсли; 
				
				Если ВыборкаЗаказДоставки.СтатусЗаказа = Перечисления.ES_СтатусыЗаборов.Выполнен Тогда
					ДобавитьЗаписиВТабИзменяемыеРеквизитыЗабора(ТабИзменяемыеРеквизитыЗабора, ВыборкаЗаказДоставки, ДатаВремяДоставки);
				КонецЕсли;
				
				// РС ES_СтатусыЗаборов
				Движение = Движения.ES_СтатусыЗаборов.Добавить();
				Движение.Период 		= ПериодПроведения;
				Движение.Забор 			= ВыборкаЗаказДоставки.ДокументДоставки;
				Движение.Заказ 			= ВыборкаЗаказДоставки.СвязанныйДокумент;
				Движение.СтатусЗабора 	= ВыборкаЗаказДоставки.СтатусЗаказа;
				Движение.Ответственный 	= Ответственный;
				
				//ЭР Несторук С.И. 31.10.2017 11:15:11 {
				// РН  ES_РасходыПоЗаказам
				//учет расходов по забору
				Если ВыборкаЗаказДоставки.УслугиПартнера > 0 Тогда
					Движение = Движения.ES_РасходыПоЗаказам.Добавить();
					Движение.Заказ = ВыборкаЗаказДоставки.ДокументДоставки;
					Движение.Период = ПериодПроведения;
					Движение.Сумма = ВыборкаЗаказДоставки.УслугиПартнера;
				КонецЕсли;
				
				//учет расходов по связанному заказу
				Если  ВыборкаЗаказДоставки.УслугиПартнера > 0 И ЗначениеЗаполнено(ВыборкаЗаказДоставки.СвязанныйДокумент) Тогда
					Движение = Движения.ES_РасходыПоЗаказам.Добавить();
					Движение.Заказ = ВыборкаЗаказДоставки.СвязанныйДокумент;
					Движение.Период = ПериодПроведения;
					Движение.Сумма = ВыборкаЗаказДоставки.УслугиПартнера;
				КонецЕсли;
				
				//}ЭР Несторук С.И.
				
				//ЭР Несторук С.И. 20.02.2017 14:51:53 {
				
				// если статус Забора = ВЫПОЛНЕН и ТипЗабора = НаСклад
				//// - меняем статус ЗаказуНаДоставку на ПОДГОТОВЛЕН
				//Если ЗначениеЗаполнено(ВыборкаЗаказДоставки.СвязанныйДокумент)
				//	И ВыборкаЗаказДоставки.СтатусЗаказа = Перечисления.ES_СтатусыЗаборов.Выполнен
				//	И ВыборкаЗаказДоставки.ВидДоставки = Перечисления.ES_ВидыЗабора.НаСклад Тогда
				/////////////////////////////////////////////////////////////////////////////////////
				// если статус Забора = ВЫПОЛНЕН и ТипЗабора = ПодЗаказ
				//// - меняем статус ЗаказуНаДоставку на Подготовлен
				
				//если в отчете нет связанного заказа (Двери-Двери) и опция "выдача на курьеров" в стартовых отключена,
				//тогда связанный заказ автоматом приходуется на склад, указанный в шапке документа
				ЗаказВОтчете = Заказы.НайтиСтроки(Новый Структура("ДокументДоставки", ВыборкаЗаказДоставки.СвязанныйДокумент));
				Если ЗаказВОтчете.Количество() = 0 Тогда
					
					Если ЗначениеЗаполнено(ВыборкаЗаказДоставки.СвязанныйДокумент)
						И ВыборкаЗаказДоставки.СтатусЗаказа = Перечисления.ES_СтатусыЗаборов.Выполнен
						И ВыборкаЗаказДоставки.ВидДоставки = Перечисления.ES_ВидыЗабора.ПодЗаказ Тогда
						
						//	Если ВыборкаЗаказДоставки.КоличествоУКурьера = 0 Тогда
						//		//РН ES_ ES_ЗаказыУКурьера
						//		Движения.ES_ЗаказыУКурьера.Записывать = Истина;
						//		Движение = Движения.ES_ЗаказыУКурьера.ДобавитьПриход();
						//		Движение.Период			= ПериодПроведения;
						//		Движение.Курьер			= Курьер;
						//		Движение.Заказ			= ВыборкаЗаказДоставки.СвязанныйДокумент;
						//		Движение.Количество		= 1;
						//		Движение.Регистратор	= ВыборкаЗаказДоставки.ДокументДоставки;
						//		Движения.ES_ЗаказыУКурьера.Записать();
						//	Иначе
						//		Сообщить("" + ВыборкаЗаказДоставки.СвязанныйДокумент + " уже принят курьером " + Курьер);
						//		Отказ = Истина;
						//	КонецЕсли;
						
						
						// РС ES_СтатусыЗаказов
						Движение = Движения.ES_СтатусыЗаказов.Добавить();
						Движение.Период 		= ПериодПроведения;
						Движение.Заказ 			= ВыборкаЗаказДоставки.СвязанныйДокумент;
						
						//Если ИспользоватьВыдачу = Ложь Тогда 
						//	Движение.СтатусЗаказа 	= Перечисления.ES_СтатусыЗаказов.ПодготовленПринят;//после выполнения забора, заказ сразу становится в статус ПодготовленПринят (по нему не нужно делать приемку)
						//Иначе 
						Движение.СтатусЗаказа 	= Перечисления.ES_СтатусыЗаказов.Подготовлен;
						//КонецЕсли;
						
						Движение.Ответственный 	= Ответственный;
						
						//ЭР Несторук С.И. 13.09.2017 15:27:54 {
						//Движения по складским регистрам отменяются и переносятся на документ «Приемка», создаваемый на основании Отчета о доставке
						//Если ИспользоватьВыдачу = Ложь Тогда
						//	Движение = ДВижения.ES_ЗаказыНаСкладе.ДобавитьПриход();
						//	Движение.Период = ПериодПроведения;
						//	Движение.Заказ = ВыборкаЗаказДоставки.СвязанныйДокумент;
						//	Движение.Количество = 1;
						//	Движение.Склад	= Склад;
						//КонецЕсли;
						
						//}ЭР Несторук С.И.
										
					КонецЕсли;
					
				КонецЕсли; 
				//}ЭР Несторук С.И.
				
				// Движения документа ЗАКАЗ НА ДОСТАВКУ
				
			ИначеЕсли ТипЗнч(ВыборкаЗаказДоставки.ДокументДоставки) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				
				// РС ES_СведенияОЗаказах - заполнение таблицы
				НоваяСтрока = ТабСведенияОЗаказе.Добавить();
				НоваяСтрока.Движения 		= Движения.ES_СведенияОЗаказах;
				НоваяСтрока.Период 			= ПериодПроведения;
				НоваяСтрока.Регистратор 	= Ссылка;
				НоваяСтрока.Заказ 			= ВыборкаЗаказДоставки.ДокументДоставки;
				НоваяСтрока.ОтчетОДоставке 	= Ссылка;
				
				// РС ES_ИзменяемыеРеквизитыЗаказа
				ДатаВремяДоставки = '00010101';
				Если НЕ ВыборкаЗаказДоставки.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ВПути Тогда
					ДатаВремяДоставки = НачалоДня(ВыборкаЗаказДоставки.ДатаДоставки) + (ВыборкаЗаказДоставки.ВремяДоставки - '00010101');
				КонецЕсли; 
				
				ЗаписатьВсеИзменяемыеРеквизиты = Ложь;
				//EFSOL_Шаповал Олег Анатольевич 21 ноября 2016 г. 12:16:11 +
				ЗаписатьИзмДатыДоставки = Ложь;
				//EFSOL Шаповал О.А. -
				
				Если ВыборкаЗаказДоставки.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Доставлен
					ИЛИ ВыборкаЗаказДоставки.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставлен
					Тогда
					ЗаписатьВсеИзменяемыеРеквизиты = Истина;
					//EFSOL_Шаповал Олег Анатольевич 21 ноября 2016 г. 12:15:18 +
				ИначеЕсли ВыборкаЗаказДоставки.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Отказ Тогда
					ЗаписатьИзмДатыДоставки = Истина;
					//EFSOL Шаповал О.А. -
				КонецЕсли;
				
				//ЭР Несторук С.И. 10.05.2017 9:43:54 {
				ЗаписыватьЯчейку = Ложь;
				Если ИспользоватьЯчейки И ВыборкаЗаказДоставки.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставлен 
					ИЛИ ВыборкаЗаказДоставки.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставленРассчитать 
					ИЛИ ВыборкаЗаказДоставки.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Отказ Тогда
					ЗаписыватьЯчейку  = Истина;
				КонецЕсли;
				
				//}ЭР Несторук С.И.
				ДобавитьЗаписиВТабИзменяемыеРеквизитыЗаказа(ТабИзменяемыеРеквизитыЗаказа, ВыборкаЗаказДоставки, ДатаВремяДоставки, ЗаписатьВсеИзменяемыеРеквизиты,ЗаписатьИзмДатыДоставки, ЗаписыватьЯчейку);
				
				// Если ВидДоставки "Самовывоз", тогда движения в РН Наложенные платежи делать НЕ нужно
				Если ВыборкаЗаказДоставки.ВидДоставки = Перечисления.ES_ВидыДоставки.СкладДвери
					ИЛИ ВыборкаЗаказДоставки.ВидДоставки = Перечисления.ES_ВидыДоставки.ДвериДвери
					ИЛИ ВыборкаЗаказДоставки.ВидДоставки = Перечисления.ES_ВидыДоставки.Самовывоз Тогда
					ФактическийНП = ВыборкаЗаказДоставки.НПФакт;
					
					ФактическийНП_Нал = ВыборкаЗаказДоставки.НПФактНал;
					ФактическийНП_Безнал = ВыборкаЗаказДоставки.НПФактБезнал;
				Иначе
					ФактическийНП = 0;
					
					ФактическийНП_Нал = 0;
					ФактическийНП_Безнал = 0;
					
				КонецЕсли; 
				
				Если ВыборкаЗаказДоставки.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Доставлен
					ИЛИ ВыборкаЗаказДоставки.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставлен Тогда
					
					//Если ФактическийНП > 0 Тогда
					Если ФактическийНП_Нал > 0 или ФактическийНП_Безнал > 0 Тогда
						// РН ES_НаложенныеПлатежи
						Движения.ES_НаложенныеПлатежи.Записывать = Истина;
						Движение = Движения.ES_НаложенныеПлатежи.ДобавитьПриход();
						Движение.Период 		= ПериодПроведения;
						Движение.Регистратор 	= Ссылка;
						Движение.Заказчик 		= ВыборкаЗаказДоставки.Заказчик;
						Движение.Заказ 			= ВыборкаЗаказДоставки.ДокументДоставки;
						Движение.СуммаНП 		= ФактическийНП;
						
						Движение.СуммаНП_Нал 	= ФактическийНП_Нал;
						Движение.СуммаНП_Безнал = ФактическийНП_Безнал;
						
					КонецЕсли;
					
					Если (ВыборкаЗаказДоставки.НПФактНал > 0 или ВыборкаЗаказДоставки.НПФактБезнал > 0) И Склад.ES_Партнер.ES_Партнер Тогда
						ES_ОбщегоНазначения.СформироватьДвижения_ES_НаложенныеПлатежиПартнеров(Движения,ПериодПроведения,Ссылка,Склад.ES_Партнер,ВыборкаЗаказДоставки.ДокументДоставки,ВыборкаЗаказДоставки.НППлан,ВыборкаЗаказДоставки.НПФактНал,ВыборкаЗаказДоставки.НПФактБезнал,0,0);
					КонецЕсли;									
					//Если ФактическийНП > 0 ИЛИ ВыборкаЗаказДоставки.СтоимостьФакт > 0 Тогда
					//Если (ВыборкаЗаказДоставки.НППлан > 0 И ВыборкаЗаказДоставки.СтоимостьФактНал > 0) ИЛИ
					//	(ФактическийНП_Безнал > 0 ИЛИ ВыборкаЗаказДоставки.СтоимостьФактБезнал > 0) Тогда
					Если (ВыборкаЗаказДоставки.НППлан > 0 ИЛИ ВыборкаЗаказДоставки.СтоимостьФактНал > 0) ИЛИ
						(ВыборкаЗаказДоставки.НПФактБезнал > 0 ИЛИ ВыборкаЗаказДоставки.СтоимостьФактБезнал > 0) Тогда
	
						// ES_УчетДСпоЗаказамНаДоставку
						СуммаНаличные = ВыборкаЗаказДоставки.НПФакт + ВыборкаЗаказДоставки.СтоимостьФакт;
						
						СуммаНаличные_Нал		=  ВыборкаЗаказДоставки.НПФактНал + ВыборкаЗаказДоставки.СтоимостьФактНал;
						СуммаНаличные_Безнал	=  ВыборкаЗаказДоставки.НПФактБезнал + ВыборкаЗаказДоставки.СтоимостьФактБезнал;
						
						Движения.ES_УчетДСпоЗаказамНаДоставку.Записывать = Истина;
						Движение = Движения.ES_УчетДСпоЗаказамНаДоставку.Добавить();
						Движение.Период 				= ПериодПроведения;
						Движение.Регистратор 			= Ссылка;
						Движение.Заказ 					= ВыборкаЗаказДоставки.ДокументДоставки;
						Движение.Заказчик 				= ВыборкаЗаказДоставки.Заказчик;
						Движение.ФактСтоимостьДоставки 	= ВыборкаЗаказДоставки.СтоимостьФакт;
						Движение.УдалитьФактическиеНП 			= ФактическийНП;
						Движение.УдалитьФактСуммаНаличные 		= СуммаНаличные;
						
						Движение.ФактическиеНП_Нал 		= ФактическийНП_Нал;
						Движение.ФактСумма_Нал 			= СуммаНаличные_Нал;
						Движение.ФактическиеНП_Безнал 	= ФактическийНП_Безнал;
						Движение.ФактСумма_Безнал 		= СуммаНаличные_Безнал;
						
					КонецЕсли; 
					
				ИначеЕсли ВыборкаЗаказДоставки.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Отказ Тогда	
					//ИначеЕсли ВыборкаЗаказДоставки.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Отменен Тогда	
					// ES_УчетДСпоЗаказамНаДоставку
					Движения.ES_УчетДСпоЗаказамНаДоставку.Записывать = Истина;
					Движение = Движения.ES_УчетДСпоЗаказамНаДоставку.Добавить();
					Движение.Период 				= ПериодПроведения;
					Движение.Регистратор 			= Ссылка;
					Движение.Заказ 					= ВыборкаЗаказДоставки.ДокументДоставки;
					Движение.Заказчик 				= ВыборкаЗаказДоставки.Заказчик;
					Движение.ПланСтоимостьДоставки 	= -ВыборкаЗаказДоставки.СтоимостьФакт;
					
				КонецЕсли;
				
				// РС ES_СтатусыЗаказов
				Если ВыборкаЗаказДоставки.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Доставлен Тогда
					
					Если ВыборкаЗаказДоставки.ВидДоставки = Перечисления.ES_ВидыДоставки.СкладСклад Тогда
						// если вид доставки Самовывоз со склада
						СтатусЗаказаДляЗаписи = Перечисления.ES_СтатусыЗаказов.ГотовКВыдаче;
						//ИначеЕсли ФактическийНП > 0 Тогда
					ИначеЕсли ФактическийНП_Нал > 0 или ФактическийНП_Безнал > 0 Тогда
						// если есть Наложенный платеж
						СтатусЗаказаДляЗаписи = Перечисления.ES_СтатусыЗаказов.ДоставленРассчитать;
					Иначе
						СтатусЗаказаДляЗаписи = Перечисления.ES_СтатусыЗаказов.Доставлен;
					КонецЕсли; 
					
				ИначеЕсли ВыборкаЗаказДоставки.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставлен Тогда
					
					Если ВыборкаЗаказДоставки.ВидДоставки = Перечисления.ES_ВидыДоставки.СкладСклад Тогда
						// если вид доставки Самовывоз со склада
						СтатусЗаказаДляЗаписи = Перечисления.ES_СтатусыЗаказов.ГотовКВыдаче;
						//ИначеЕсли ФактическийНП > 0 Тогда
					ИначеЕсли ФактическийНП_Нал > 0 или ФактическийНП_Безнал > 0 Тогда
						// если есть Наложенный платеж
						СтатусЗаказаДляЗаписи = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставленРассчитать;
					Иначе
						СтатусЗаказаДляЗаписи = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставлен;
					КонецЕсли;
					
				Иначе 
					//ЕФСОЛ Несторук 20.07.2016 +
					//Если ВыборкаЗаказДоставки.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Отказ") Тогда
					//	СтатусЗаказаДляЗаписи = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Отменен");
					//Иначе
					СтатусЗаказаДляЗаписи = ВыборкаЗаказДоставки.СтатусЗаказа;
					//КонецЕсли;
					//ЕФСОЛ Несторук 20.07.2016 -
				КонецЕсли;
				
				Движение = Движения.ES_СтатусыЗаказов.Добавить();
				Движение.Период 		= ПериодПроведения;
				Движение.Заказ 			= ВыборкаЗаказДоставки.ДокументДоставки;
				Движение.СтатусЗаказа 	= СтатусЗаказаДляЗаписи;
				Движение.Ответственный 	= Ответственный;
				
				//ЭР Несторук С.И. 31.10.2017 11:34:35 {
				// РН  ES_РасходыПоЗаказам
				//учет расходов по забору
				Если ВыборкаЗаказДоставки.УслугиПартнера > 0 Тогда
					Движение = Движения.ES_РасходыПоЗаказам.Добавить();
					Движение.Заказ = ВыборкаЗаказДоставки.ДокументДоставки;
					Движение.Период = ПериодПроведения;
					Движение.Сумма = ВыборкаЗаказДоставки.УслугиПартнера;
				КонецЕсли;
				//}ЭР Несторук С.И.
							
				//ЭР Несторук С.И. 13.09.2017 15:29:57 {
				//Оптимизировал:))
				//Движения по складским регистрам отменяются и переносятся на документ «Приемка», создаваемый на основании Отчета о доставке
				//Проверка: по заказу в этом отчете есть забор
				ЕстьЗабор = Ложь;
				Если ВыборкаЗаказДоставки.ВидДоставки = Перечисления.ES_ВидыДоставки.ДвериДвери Тогда
					ЕстьЗабор = ПроверитьНаличиеЗабораПоЗаказуВОтчете(ВыборкаЗаказДоставки.ДокументДоставки);
				КонецЕсли;
				
				////ЭР Несторук С.И. 10.02.2017 15:59:33 {
				//// !!! Дальнейшеее нужно оптимизировать
				Если ВыборкаЗаказДоставки.ВидДоставки = Перечисления.ES_ВидыДоставки.СкладДвери ИЛИ
					ВыборкаЗаказДоставки.ВидДоставки = Перечисления.ES_ВидыДоставки.Самовывоз ИЛИ НЕ ЕстьЗабор 
					И НЕ ВыборкаЗаказДоставки.ВидЗабора = Перечисления.ES_ВидыЗабора.Упрощенный Тогда
										
					//ЭР Несторук С.И. 13.08.2018 16:53:23 {
					Если ВыборкаЗаказДоставки.КоличествоНаСкладе > 0 Тогда 
						//}ЭР Несторук С.И.
						
						Движение 				= Движения.ES_ЗаказыНаСкладе.ДобавитьРасход();
						Движение.Период			= ПериодПроведения;
						Движение.Заказ			= ВыборкаЗаказДоставки.ДокументДоставки;
						Движение.Регистратор    = Ссылка;
						Движение.Количество		= 1;
						Движение.Склад			= Склад;
						
						Если НЕ ВыборкаЗаказДоставки.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Доставлен Тогда
							Движение 				= Движения.ES_ЗаказыНаСкладе.ДобавитьПриход();
							Движение.Период			= ПериодПроведения;
							Движение.Заказ			= ВыборкаЗаказДоставки.ДокументДоставки;
							Движение.Регистратор    = Ссылка;
							Движение.Количество		= 1;
							Движение.Склад			= Склад;
							Движение.Курьер			= Курьер;
						КонецЕсли;
						
					Иначе
						Отказ = Истина;
						Сообщить(НСтр("ru = 'На данном складе: "+Склад+", " + ВыборкаЗаказДоставки.ДокументДоставки +" отсутствует'"));
					КонецЕсли;
					
				КонецЕсли;
				
				// РН ES_НоменклатураВыданная
				Если (ВыборкаЗаказДоставки.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Доставлен
					ИЛИ ВыборкаЗаказДоставки.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставлен)
					И НЕ ВыборкаЗаказДоставки.ВидДоставки = Перечисления.ES_ВидыДоставки.СкладСклад
					И НЕ ВыборкаЗаказДоставки.ВидЗабора = Перечисления.ES_ВидыЗабора.Упрощенный 
					Тогда
					ВыборкаГрузы = ВыборкаЗаказДоставки.Выбрать();
					Пока ВыборкаГрузы.Следующий() Цикл
						Если ЗначениеЗаполнено(ВыборкаГрузы.ЗапасНоменклатура) И ВыборкаГрузы.ЗапасКоличествоФакт > 0 Тогда
							Движение = Движения.ES_НоменклатураВыданная.Добавить();
							Движение.Период 		= Дата;
							Движение.Регистратор 	= Ссылка;
							Движение.Заказ 			= ВыборкаЗаказДоставки.ДокументДоставки;
							Движение.Номенклатура 	= ВыборкаГрузы.ЗапасНоменклатура;
							Движение.Содержание 	= ВыборкаГрузы.ЗапасСодержание;
							Движение.Характеристика = ВыборкаГрузы.ЗапасХарактеристика;
							Движение.КоличествоФакт = ВыборкаГрузы.ЗапасКоличествоФакт;
							Движение.КоличествоПлан = ВыборкаГрузы.ЗапасКоличествоПлан;
							Движение.НПФакт 		= ВыборкаГрузы.ЗапасНПФакт;
							
												
						КонецЕсли; 
					КонецЦикла; 
					//КонецЕсли;
				КонецЕсли; 
				
			КонецЕсли;  // Проверка на тип документа (Заказ по доставке или Забор груза)
			
		КонецЦикла;
		
		// РС ES_СведенияОЗаказах
		ES_ФормированиеДвиженийПоРегистрамДоставки.СделатьЗаписьВРССведенияОЗаказах(ТабСведенияОЗаказе, Дата);
		
		// РС ES_СведенияОЗаборах
		ES_ФормированиеДвиженийПоРегистрамДоставки.СделатьЗаписьВРССведенияОЗаборах(ТабСведенияОЗаборе, Дата);
		
		// РС ES_ИзменяемыеРеквизитыЗаказа
		Если ТабИзменяемыеРеквизитыЗаказа.Количество() > 0 Тогда
			ES_ФормированиеДвиженийПоРегистрамДоставки.СделатьЗаписьВРегистрСведенийИзменяемыеРеквизитыЗаказа(ТабИзменяемыеРеквизитыЗаказа, Ссылка);
		КонецЕсли; 
		
		// РС ES_ИзменяемыеРеквизитыЗабора
		Если ТабИзменяемыеРеквизитыЗабора.Количество() > 0 Тогда
			ES_ФормированиеДвиженийПоРегистрамДоставки.СделатьЗаписьВРегистрСведенийИзменяемыеРеквизитыЗабора(ТабИзменяемыеРеквизитыЗабора, Ссылка);
		КонецЕсли; 
		
	КонецЕсли;  // Проверка на пустой результат запроса
	
	УслугаРКО = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.УслугаРКО);
	
	Для каждого Зак Из Заказы Цикл
		//необходимо заполнять новую дату доставки (датаНД) или же сделать поле обязательным к заполнению и запретить ставить дату <= дате доставки в заказе
		Если (Зак.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.НеДоставлен
			ИЛИ Зак.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ОфисПолучателяЗакрыт
			ИЛИ Зак.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ПолучателяНетДомаВОфисе)
			И НЕ Зак.ДокументДоставки.ES_ДатаДоставки = Зак.ДатаНД  Тогда
			//и ЗначениеЗаполнено(Зак.ДатаНД)	
			//ДатаНД = ?(НЕ ЗначениеЗаполнено(Зак.ДатаНД), Зак.ДатаФактическойДоставки+ 24*3600, Зак.ДатаНД);
			ДатаНД = Зак.ДатаНД;
			ЗаказПолученный = Зак.ДокументДоставки.ПолучитьОбъект();
			ЗаказПолученный.ES_ДатаДоставки = ДатаНД;
			Если ЗначениеЗаполнено(Зак.ВремяНД_С) И ЗначениеЗаполнено(Зак.ВремяНД_По) Тогда
				ЗаказПолученный.ES_ВремяДоставкиС = Зак.ВремяНД_С;
				ЗаказПолученный.ES_ВремяДоставкиПо = Зак.ВремяНД_По;
			КонецЕсли;
			//ЭР Несторук С.И. 22.10.2017 15:37:28 {
			Если ДатаНД = Дата("00010101") Тогда
				ЗаказПолученный.ES_ДоУточнения = Истина;
			КонецЕсли;
			//}ЭР Несторук С.И.
			ЗаказПолученный.ES_Проблема = Зак.Проблема;
			//ES_Савченко К.Р. 02.10.2017+
            ЗаказПолученный.ES_ДанныеОбработанПроблема = ""+ Ответственный + " "+ Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ""в"" ЧЧ:мм'");
			//ES_Савченко К.Р. 02.10.2017-
            ЗаказПолученный.Записать(РежимЗаписиДокумента.Проведение);
		ИначеЕсли ТипЗнч(Зак.ДокументДоставки) = Тип("ДокументСсылка.ЗаказПокупателя") И 
			Зак.ДокументДоставки.ES_Проблема <> Зак.Проблема Тогда
			//Если Зак.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.НеправильныйАдрес
			//ИЛИ Зак.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ПолучательПереехал Тогда
			ЗаказПолученный = Зак.ДокументДоставки.ПолучитьОбъект();
			ЗаказПолученный.ES_Проблема = Зак.Проблема;
			//ES_Савченко К.Р. 02.10.2017+
			ЗаказПолученный.ES_ДанныеОбработанПроблема = "" + ПользователиКлиентСервер.ТекущийПользователь() + ", " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ""в"" ЧЧ:мм'");
			//ES_Савченко К.Р. 02.10.2017-

			//ЗаказПолученный.ES_ДанныеОбработанПроблема = Зак.ДанныеОбработанПроблема;
			ЗаказПолученный.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
		Если ТипЗнч(Зак.ДокументДоставки) = тип("ДокументСсылка.ЗаказПокупателя") И ЗначениеЗаполнено(УслугаРКО) Тогда
			
			ПоменятьВидОплатыЗаказаНаСервере(Зак.ДокументДоставки, Зак.ВидОплаты, УслугаРКО);
			
		КонецЕсли;
		
		ЗаполнитьКомментарийКурьераВЗаказе(Зак.ДокументДоставки, Зак.Комментарий);
		
	КонецЦикла;
	
	//Если НЕ Отказ Тогда
	//	УдалитьЗаказыИзПлана();
	//	СоздатьПеремещениеНаКурьера();
	//КонецЕсли;	
	
КонецПроцедуры

Процедура УдалитьЗаказыИзПлана()
	
	
	БылоУдаление = Ложь;
	мПлан = ПланДоставки.ПолучитьОбъект();
	Для каждого Стр Из мПлан.Заказы Цикл
		
		НайтиСтроки = Заказы.НайтиСтроки(Новый Структура("ДокументДоставки", Стр.ДокументДоставки));
		
		Если НайтиСтроки.Количество() = 0 Тогда
			БылоУдаление = Истина;
			НайтиГрузы = мПлан.Грузы.НайтиСтроки(Новый Структура("ДокументДоставки", Стр.ДокументДоставки));
			Для каждого СтрГрузы ИЗ НайтиГрузы Цикл
				мПлан.Грузы.Удалить(СтрГрузы);	
			КонецЦикла;
			
			мПлан.Заказы.Удалить(Стр);
		КонецЕсли;
		
	КонецЦикла;
	Если БылоУдаление Тогда
		мПлан.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура СоздатьПеремещениеНаКурьера()
	
	ДокОбъект = Документы.ES_ПеремещениеЗаказов.СоздатьДокумент();
	ДокОбъект.ДокументОснование	= Ссылка;
	ДокОбъект.ВидОперации = Перечисления.ES_ВидыОперацийПеремещение.Курьер;
	ДокОбъект.СкладОтправитель = Склад;
	ДокОбъект.Курьер			= Курьер;
	ES_ОбщегоНазначения.СоздатьПеремещениеЗаказовНаСервере(ДокОбъект,Заказы.ВыгрузитьКолонку("ДокументДоставки"),,Истина, Склад);
	Если ДокОбъект.Заказы.Количество() > 0 Тогда
		
		Для каждого Стр Из ДокОбъект.Заказы Цикл
			Стр.Проверен = Истина;
		КонецЦикла;
		
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить("Создан "+ ДокОбъект.Ссылка);
		Исключение
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			Сообщить("Записан "+ ДокОбъект.Ссылка);
			
			Сообщить(ОписаниеОшибки());
			ВсеОК = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	
КонецПроцедуры

//ЕФСОЛ Несторук 22-11-16 +
Процедура ПоменятьВидОплатыЗаказаНаСервере(Заказ, ВидОплаты, УслугаРКО)
	
	Если ЗначениеЗаполнено(ВидОплаты) Тогда
		Если НЕ Заказ.ES_ВидОплаты = ВидОплаты Тогда
			
			мОбъект = Заказ.ПолучитьОбъект();
			мОбъект.ES_ВидОплаты = ВидОплаты;
			
			НайденныеСтроки = мобъект.Запасы.НайтиСтроки(Новый Структура("Номенклатура", УслугаРКО));
			ПроцентРКО = ПолучитьПроцентРКОНаСервере(мОбъект.Договор, ВидОплаты);
			СуммаРКО = мОбъект.ES_Грузы.Итог("НППлан");
			
			Если НайденныеСтроки.Количество() > 0 и ЗначениеЗаполнено(СуммаРКО) И ЗначениеЗаполнено(ПроцентРКО) Тогда
				СтрокаРКО = НайденныеСтроки[0];
				СтрокаРКО.Цена = СуммаРКО*ПроцентРКО/100;
				РассчитатьСуммуВСтрокеТабличнойЧасти(мОбъект, СтрокаРКО);
				ПересчитатьСтоимостьДоставки(мОбъект);
			ИначеЕсли ЗначениеЗаполнено(СуммаРКО) И ЗначениеЗаполнено(ПроцентРКО) Тогда 
				ДобавитьУслугуРКОВТчТовары(мОбъект, УслугаРКО, ПроцентРКО, СуммаРКО);
			КонецЕсли;
			
			мОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ДобавитьУслугуРКОВТчТовары(НовыйДокумент,УслугаРКО, ПроцентРКО, СуммаРКО)
	
	Если НовыйДокумент.ES_Грузы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовыйДокумент.ES_ВидОплаты) Тогда
		Возврат;
	КонецЕсли;
	
	
	Если НЕ ЗначениеЗаполнено(УслугаРКО) Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СуммаРКО) Тогда 
		Возврат;
	КонецЕсли;
	
	
	Если НЕ ЗначениеЗаполнено(ПроцентРКО) Тогда
		Возврат;
	КонецЕсли;
	
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", НовыйДокумент.Организация);
	СтруктураДанные.Вставить("Номенклатура", УслугаРКО);
	//СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("НалогообложениеНДС", НовыйДокумент.НалогообложениеНДС);
	
	Если ЗначениеЗаполнено(НовыйДокумент.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки", НовыйДокумент.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", НовыйДокумент.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", НовыйДокумент.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", НовыйДокумент.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", НовыйДокумент.ВидСкидкиНаценки);
		
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	НайденнаяСтрока = НовыйДокумент.Запасы.НайтиСтроки(Новый Структура("Номенклатура", УслугаРКО));
	Если НайденнаяСтрока.Количество() > 0 Тогда
		СтрокаТабличнойЧасти = НайденнаяСтрока[0];
	Иначе
		СтрокаТабличнойЧасти = НовыйДокумент.Запасы.Добавить();
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Номенклатура = УслугаРКО;
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Цена = СуммаРКО*ПроцентРКО/100;
	СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.Содержание = "";
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
	СтрокаТабличнойЧасти.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
	
	СтрокаТабличнойЧасти.Количество 	= 1;
	СтрокаТабличнойЧасти.ДатаОтгрузки 	= НовыйДокумент.ES_ДатаДоставки;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(НовыйДокумент, СтрокаТабличнойЧасти);
	ПересчитатьСтоимостьДоставки(НовыйДокумент);
	
КонецПроцедуры

Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	
	СтруктураДанные.Вставить("ЭтоУслуга", СтруктураДанные.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	СтруктураДанные.Вставить("ЭтоЗапас", СтруктураДанные.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас);
	
	Если СтруктураДанные.Свойство("НормаВремени") Тогда		
		СтруктураДанные.НормаВремени = УправлениеНебольшойФирмойСервер.ПолучитьНормуВремениРаботы(СтруктураДанные);		
	КонецЕсли;	
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС") 
		И НЕ СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;	
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.СтавкаНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Номенклатура.СтавкаНДС);
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию));
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("Характеристика") Тогда
		СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
	Иначе
		СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура));
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда	
			СтруктураДанные.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());	
		КонецЕсли;
		
		Если СтруктураДанные.Свойство("ВидРабот") Тогда
			
			Если СтруктураДанные.Номенклатура.ФиксированнаяСтоимость Тогда		
				
				Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
				СтруктураДанные.Вставить("Цена", Цена);
				
			Иначе
				
				СтруктураДанные.Номенклатура = СтруктураДанные.ВидРабот;
				СтруктураДанные.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
				СтруктураДанные.Вставить("Цена", Цена);
				
			КонецЕсли;	
			
		Иначе
			
			Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
			СтруктураДанные.Вставить("Цена", Цена);	
			
		КонецЕсли;				
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;	
	
	Если СтруктураДанные.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	Иначе	
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(НовыйДокумент, СтрокаТабличнойЧасти)
	
	// Сумма.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	// Скидки.
	Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
		СтрокаТабличнойЧасти.Сумма = 0;
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * (1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
	КонецЕсли;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(НовыйДокумент, СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(НовыйДокумент.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()


Процедура ПересчитатьСтоимостьДоставки(НовыйДокумент)
	
	НовСтоимостьДоставки = 0;
	Для каждого Строка Из НовыйДокумент.Запасы Цикл
		Если НЕ Строка.ТипНоменклатурыЗапас Тогда
			НовСтоимостьДоставки = НовСтоимостьДоставки + Строка.Сумма;
		КонецЕсли; 
	КонецЦикла;
	
	НовыйДокумент.ES_СтоимостьДоставки = НовСтоимостьДоставки;
	
КонецПроцедуры

// Рассчитывается сумма НДС в строке табличной части.
//
Процедура РассчитатьСуммуНДС(НовыйДокумент, СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(НовыйДокумент.СуммаВключаетНДС, 
	СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
	СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // ПересчитатьСуммыДокумента() 


Функция ПолучитьПроцентРКОНаСервере(Договор, ВидОплаты)
	
	ПроцентРКО = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ES_ПроцентКомиссииНал, 0) КАК ПроцентНал,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ES_ПроцентКомиссииБезнал, 0) КАК ПроцентБезнал
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Договор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Если ВидОплаты = Перечисления.ТипыДенежныхСредств.Наличные Тогда
		ПроцентРКО = Выборка.ПроцентНал;
	ИначеЕсли ВидОплаты = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
		ПроцентРКО = Выборка.ПроцентБезнал;
	КонецЕсли;
	
	Возврат ПроцентРКО;
	
КонецФункции
//ЕФСОЛ Несторук 22-11-16 - 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ДобавитьЗаписиВТабИзменяемыеРеквизитыЗаказа(ТабИзменяемыеРеквизитыЗаказа, ДанныеЗаказа, ДатаВремяДоставки, ЗаписатьВсеИзменяемыеРеквизиты, ЗаписатьИзмДатыОтказа = Ложь, ЗаписыватьЯчейку = Ложь)
	
	// Комментарий из Отчета
	Если ЗначениеЗаполнено(ДанныеЗаказа.Комментарий) Тогда
		НоваяСтрока = ТабИзменяемыеРеквизитыЗаказа.Добавить();
		НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
		НоваяСтрока.Период 			= Дата;
		НоваяСтрока.Регистратор 	= Ссылка;
		НоваяСтрока.Заказ 			= ДанныеЗаказа.ДокументДоставки;
		НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.Комментарий;
		НоваяСтрока.Значение 		= ДанныеЗаказа.Комментарий;
	КонецЕсли;
	
	// Комментарий статуса
	Если НЕ ДанныеЗаказа.КомментарийСтатуса.Пустая() Тогда
		НоваяСтрока = ТабИзменяемыеРеквизитыЗаказа.Добавить();
		НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
		НоваяСтрока.Период 			= Дата;
		НоваяСтрока.Регистратор 	= Ссылка;
		НоваяСтрока.Заказ 			= ДанныеЗаказа.ДокументДоставки;
		НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.КомментарийСтатуса;
		НоваяСтрока.Значение 		= ДанныеЗаказа.КомментарийСтатуса;
	КонецЕсли;
	
	//// ЕФСОЛ Несторук 18.08.2016 +
	//// Курьер из Отчета
	//Если ДанныеЗаказа.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.НеДоставлен Тогда
	//	НоваяСтрока = ТабИзменяемыеРеквизитыЗаказа.Добавить();
	//	НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
	//	НоваяСтрока.Период 			= Дата;
	//	НоваяСтрока.Регистратор 	= Ссылка;
	//	НоваяСтрока.Заказ 			= ДанныеЗаказа.ДокументДоставки;
	//	НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.Курьер;
	//	НоваяСтрока.Значение 		= Курьер;
	//КонецЕсли;
	//// ЕФСОЛ Несторук 18.08.2016 -
	
	Если ЗаписыватьЯчейку = Истина Тогда
		Если ЗначениеЗаполнено(ДанныеЗаказа.Ячейка) Тогда
			НоваяСтрока = ТабИзменяемыеРеквизитыЗаказа.Добавить();
			НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
			НоваяСтрока.Период 			= Дата;
			НоваяСтрока.Регистратор 	= Ссылка;
			НоваяСтрока.Заказ 			= ДанныеЗаказа.ДокументДоставки;
			НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.Ячейка;
			НоваяСтрока.Значение 		= ДанныеЗаказа.Ячейка;
		КонецЕсли;
	КонецЕсли;
	
	//ЭР Несторук С.И. 27.09.2017 9:25:19 {
	Если НЕ ЗаписатьВсеИзменяемыеРеквизиты Тогда
		Если ДанныеЗаказа.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ВПути ИЛИ
			ДанныеЗаказа.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Назначен Тогда
		Иначе
			// ДатаВремяДоставки
			Если ЗначениеЗаполнено(ДатаВремяДоставки) Тогда
				НоваяСтрока = ТабИзменяемыеРеквизитыЗаказа.Добавить();
				НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
				НоваяСтрока.Период 			= Дата;
				НоваяСтрока.Регистратор 	= Ссылка;
				НоваяСтрока.Заказ 			= ДанныеЗаказа.ДокументДоставки;
				НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.ДатаВыполненияЗаказа;
				НоваяСтрока.Значение 		= ДатаВремяДоставки;
			КонецЕсли; 
			
		КонецЕсли;
	КонецЕсли;
	//}ЭР Несторук С.И.
		
	Если ЗаписатьВсеИзменяемыеРеквизиты Тогда
		
		// ДатаВремяДоставки
		Если ЗначениеЗаполнено(ДатаВремяДоставки) Тогда
			НоваяСтрока = ТабИзменяемыеРеквизитыЗаказа.Добавить();
			НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
			НоваяСтрока.Период 			= Дата;
			НоваяСтрока.Регистратор 	= Ссылка;
			НоваяСтрока.Заказ 			= ДанныеЗаказа.ДокументДоставки;
			НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.ДатаВыполненияЗаказа;
			НоваяСтрока.Значение 		= ДатаВремяДоставки;
		КонецЕсли; 
		
		// КассаНП
		Если ДанныеЗаказа.НПФакт > 0 И ЗначениеЗаполнено(ДанныеЗаказа.КассаНП) Тогда
			НоваяСтрока = ТабИзменяемыеРеквизитыЗаказа.Добавить();
			НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
			НоваяСтрока.Период 			= Дата;
			НоваяСтрока.Регистратор 	= Ссылка;
			НоваяСтрока.Заказ 			= ДанныеЗаказа.ДокументДоставки;
			НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.КассаНП;
			НоваяСтрока.Значение 		= ДанныеЗаказа.КассаНП;
		КонецЕсли; 
		
		// ВидОплаты
		Если ДанныеЗаказа.СтоимостьФакт > 0 И ЗначениеЗаполнено(ДанныеЗаказа.КассаСтоимость) Тогда
			НоваяСтрока = ТабИзменяемыеРеквизитыЗаказа.Добавить();
			НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
			НоваяСтрока.Период 			= Дата;
			НоваяСтрока.Регистратор 	= Ссылка;
			НоваяСтрока.Заказ 			= ДанныеЗаказа.ДокументДоставки;
			НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.ВидОплаты;
			НоваяСтрока.Значение 		= ДанныеЗаказа.ВидОплаты;
		КонецЕсли; 
		
		// КассаСтоимость
		Если ДанныеЗаказа.СтоимостьФакт > 0 И ЗначениеЗаполнено(ДанныеЗаказа.КассаСтоимость) Тогда
			НоваяСтрока = ТабИзменяемыеРеквизитыЗаказа.Добавить();
			НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
			НоваяСтрока.Период 			= Дата;
			НоваяСтрока.Регистратор 	= Ссылка;
			НоваяСтрока.Заказ 			= ДанныеЗаказа.ДокументДоставки;
			НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.КассаСтоимость;
			НоваяСтрока.Значение 		= ДанныеЗаказа.КассаСтоимость;
		КонецЕсли; 
		
		// Курьер
		Если ЗначениеЗаполнено(Курьер) Тогда
			НоваяСтрока = ТабИзменяемыеРеквизитыЗаказа.Добавить();
			НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
			НоваяСтрока.Период 			= Дата;
			НоваяСтрока.Регистратор 	= Ссылка;
			НоваяСтрока.Заказ 			= ДанныеЗаказа.ДокументДоставки;
			НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.Курьер;
			НоваяСтрока.Значение 		= Курьер;
		КонецЕсли;
		
		// Расходы
		Если ЗначениеЗаполнено(ДанныеЗаказа.Расходы) Тогда
			НоваяСтрока = ТабИзменяемыеРеквизитыЗаказа.Добавить();
			НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
			НоваяСтрока.Период 			= Дата;
			НоваяСтрока.Регистратор 	= Ссылка;
			НоваяСтрока.Заказ 			= ДанныеЗаказа.ДокументДоставки;
			НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.Расходы;
			НоваяСтрока.Значение 		= ДанныеЗаказа.Расходы;
		КонецЕсли; 
		
		// ТрекНомер
		Если ЗначениеЗаполнено(ДанныеЗаказа.ТрекНомер) Тогда
			НоваяСтрока = ТабИзменяемыеРеквизитыЗаказа.Добавить();
			НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
			НоваяСтрока.Период 			= Дата;
			НоваяСтрока.Регистратор 	= Ссылка;
			НоваяСтрока.Заказ 			= ДанныеЗаказа.ДокументДоставки;
			НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.ТрекНомер;
			НоваяСтрока.Значение 		= ДанныеЗаказа.ТрекНомер;
		КонецЕсли; 
		//ЕФСОЛ Несторук 10.08.2016 + Перенесено с Филимонова
		// Касса
		Если ДанныеЗаказа.НПФактНал > 0 И ЗначениеЗаполнено(ДанныеЗаказа.Касса) Тогда
			НоваяСтрока = ТабИзменяемыеРеквизитыЗаказа.Добавить();
			НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
			НоваяСтрока.Период 			= Дата;
			НоваяСтрока.Регистратор 	= Ссылка;
			НоваяСтрока.Заказ 			= ДанныеЗаказа.ДокументДоставки;
			НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.Касса;
			НоваяСтрока.Значение 		= ДанныеЗаказа.Касса;
		КонецЕсли;
		
		// Счет		
		Если ДанныеЗаказа.НПФактБезнал > 0 И ЗначениеЗаполнено(ДанныеЗаказа.Счет) Тогда
			НоваяСтрока = ТабИзменяемыеРеквизитыЗаказа.Добавить();
			НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
			НоваяСтрока.Период 			= Дата;
			НоваяСтрока.Регистратор 	= Ссылка;
			НоваяСтрока.Заказ 			= ДанныеЗаказа.ДокументДоставки;
			НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.Счет;
			НоваяСтрока.Значение 		= ДанныеЗаказа.Счет;
		КонецЕсли;
		
		//ЕФСОЛ Савченко К.Р. 18.09.2017 +
		//УслугиПартнера
		Если ЗначениеЗаполнено(ДанныеЗаказа.УслугиПартнера) Тогда
			НоваяСтрока = ТабИзменяемыеРеквизитыЗаказа.Добавить();
			НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
			НоваяСтрока.Период 			= Дата;
			НоваяСтрока.Регистратор 	= Ссылка;
			НоваяСтрока.Заказ 			= ДанныеЗаказа.ДокументДоставки;
			НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.УслугиПартнера;
			НоваяСтрока.Значение 		= ДанныеЗаказа.УслугиПартнера;	
		КонецЕсли; 
		//ЕФСОЛ Савченко К.Р. 18.09.2017 -

		
		// ФИОПолучателя		
		Если ЗначениеЗаполнено(ДанныеЗаказа.ФИОПолучателя) И 
			(ДанныеЗаказа.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Доставлен ИЛИ
			ДанныеЗаказа.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставлен ИЛИ
			ДанныеЗаказа.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Отказ) Тогда
			
			НоваяСтрока = ТабИзменяемыеРеквизитыЗаказа.Добавить();
			НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
			НоваяСтрока.Период 			= Дата;
			НоваяСтрока.Регистратор 	= Ссылка;
			НоваяСтрока.Заказ 			= ДанныеЗаказа.ДокументДоставки;
			НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.ФИОПолучателя;
			НоваяСтрока.Значение 		= ДанныеЗаказа.ФИОПолучателя;
		КонецЕсли;
		
		// iBox
		//Если ДанныеЗаказа.НПФакт > 0 И ЗначениеЗаполнено(ДанныеЗаказа.КассаНП) Тогда
		Если ДанныеЗаказа.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Доставлен ИЛИ
			ДанныеЗаказа.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставлен Тогда
			НоваяСтрока = ТабИзменяемыеРеквизитыЗаказа.Добавить();
			НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
			НоваяСтрока.Период 			= Дата;
			НоваяСтрока.Регистратор 	= Ссылка;
			НоваяСтрока.Заказ 			= ДанныеЗаказа.ДокументДоставки;
			НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.ОплаченIBox;
			НоваяСтрока.Значение 		= ДанныеЗаказа.ОплаченiBox;
		КонецЕсли;
		//КонецЕсли;
		
		// ИДТранзакции
		Если ДанныеЗаказа.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Доставлен ИЛИ
			ДанныеЗаказа.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставлен Тогда
			
			НоваяСтрока = ТабИзменяемыеРеквизитыЗаказа.Добавить();
			НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
			НоваяСтрока.Период 			= Дата;
			НоваяСтрока.Регистратор 	= Ссылка;
			НоваяСтрока.Заказ 			= ДанныеЗаказа.ДокументДоставки;
			НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.ИДТранзакции;
			НоваяСтрока.Значение 		= ДанныеЗаказа.ИДТранзакции;
		КонецЕсли;
		
		// НомерЧека
		Если ДанныеЗаказа.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Доставлен ИЛИ
			ДанныеЗаказа.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставлен Тогда
			
			НоваяСтрока = ТабИзменяемыеРеквизитыЗаказа.Добавить();
			НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
			НоваяСтрока.Период 			= Дата;
			НоваяСтрока.Регистратор 	= Ссылка;
			НоваяСтрока.Заказ 			= ДанныеЗаказа.ДокументДоставки;
			НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.НомерЧека;
			НоваяСтрока.Значение 		= ДанныеЗаказа.НомерЧека;
		КонецЕсли;
		
		//ЕФСОЛ Несторук 10.08.2016 -
		//EFSOL_Шаповал Олег Анатольевич 21 ноября 2016 г. 12:17:25 +
	ИначеЕсли ЗаписатьИзмДатыОтказа Тогда
		Если ЗначениеЗаполнено(ДатаВремяДоставки) Тогда
			НоваяСтрока = ТабИзменяемыеРеквизитыЗаказа.Добавить();
			НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаказов;
			НоваяСтрока.Период 			= Дата;
			НоваяСтрока.Регистратор 	= Ссылка;
			НоваяСтрока.Заказ 			= ДанныеЗаказа.ДокументДоставки;
			НоваяСтрока.РеквизитЗаказа 	= Перечисления.ES_ИзменяемыеРеквизитыЗаказа.ДатаОтменыЗаказа;
			НоваяСтрока.Значение 		= ДатаВремяДоставки;
		КонецЕсли; 
		//EFSOL Шаповал О.А. - 		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДобавитьЗаписиВТабИзменяемыеРеквизитыЗабора(ТабИзменяемыеРеквизитыЗабора, ДанныеЗаказа, ДатаВремяДоставки)
	
	// ДатаВремяДоставки
	Если ЗначениеЗаполнено(ДатаВремяДоставки) Тогда
		НоваяСтрока = ТабИзменяемыеРеквизитыЗабора.Добавить();
		НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаборов;
		НоваяСтрока.Период 			= Дата;
		НоваяСтрока.Регистратор 	= Ссылка;
		НоваяСтрока.Забор 			= ДанныеЗаказа.ДокументДоставки;
		НоваяСтрока.РеквизитЗабора 	= Перечисления.ES_ИзменяемыеРеквизитыЗабора.ДатаВыполненияЗаказа;
		НоваяСтрока.Значение 		= ДатаВремяДоставки;
	КонецЕсли; 
	
	// Комментарий из Отчета
	Если ЗначениеЗаполнено(ДанныеЗаказа.Комментарий) Тогда
		НоваяСтрока = ТабИзменяемыеРеквизитыЗабора.Добавить();
		НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаборов;
		НоваяСтрока.Период 			= Дата;
		НоваяСтрока.Регистратор 	= Ссылка;
		НоваяСтрока.Забор 			= ДанныеЗаказа.ДокументДоставки;
		НоваяСтрока.РеквизитЗабора = Перечисления.ES_ИзменяемыеРеквизитыЗабора.Комментарий;
		НоваяСтрока.Значение 		= ДанныеЗаказа.Комментарий;
	КонецЕсли; 
	
	// Курьер
	Если ЗначениеЗаполнено(ДанныеЗаказа.Комментарий) Тогда
		НоваяСтрока = ТабИзменяемыеРеквизитыЗабора.Добавить();
		НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаборов;
		НоваяСтрока.Период 			= Дата;
		НоваяСтрока.Регистратор 	= Ссылка;
		НоваяСтрока.Забор 			= ДанныеЗаказа.ДокументДоставки;
		НоваяСтрока.РеквизитЗабора 	= Перечисления.ES_ИзменяемыеРеквизитыЗабора.Курьер;
		НоваяСтрока.Значение 		= Курьер;
	КонецЕсли; 
	
	// Расходы
	Если ЗначениеЗаполнено(ДанныеЗаказа.Расходы) Тогда
		НоваяСтрока = ТабИзменяемыеРеквизитыЗабора.Добавить();
		НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаборов;
		НоваяСтрока.Период 			= Дата;
		НоваяСтрока.Регистратор 	= Ссылка;
		НоваяСтрока.Забор 			= ДанныеЗаказа.ДокументДоставки;
		НоваяСтрока.РеквизитЗабора 	= Перечисления.ES_ИзменяемыеРеквизитыЗабора.Расходы;
		НоваяСтрока.Значение 		= ДанныеЗаказа.Расходы;
	КонецЕсли; 
	
	// ТрекНомер
	Если ЗначениеЗаполнено(ДанныеЗаказа.ТрекНомер) Тогда
		НоваяСтрока = ТабИзменяемыеРеквизитыЗабора.Добавить();
		НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаборов;
		НоваяСтрока.Период 			= Дата;
		НоваяСтрока.Регистратор 	= Ссылка;
		НоваяСтрока.Забор 			= ДанныеЗаказа.ДокументДоставки;
		НоваяСтрока.РеквизитЗабора 	= Перечисления.ES_ИзменяемыеРеквизитыЗабора.ТрекНомер;
		НоваяСтрока.Значение 		= ДанныеЗаказа.ТрекНомер;
	КонецЕсли; 
	
	// iBox
	//Если ДанныеЗаказа.НПФакт > 0 И ЗначениеЗаполнено(ДанныеЗаказа.КассаНП) Тогда
	Если ДанныеЗаказа.СтатусЗаказа = Перечисления.ES_СтатусыЗаборов.Выполнен Тогда
		НоваяСтрока = ТабИзменяемыеРеквизитыЗабора.Добавить();
		НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаборов;
		НоваяСтрока.Период 			= Дата;
		НоваяСтрока.Регистратор 	= Ссылка;
		НоваяСтрока.Забор 			= ДанныеЗаказа.ДокументДоставки;
		НоваяСтрока.РеквизитЗабора 	= Перечисления.ES_ИзменяемыеРеквизитыЗабора.ОплаченIBox;
		НоваяСтрока.Значение 		= ДанныеЗаказа.ОплаченiBox;
		
		НоваяСтрока = ТабИзменяемыеРеквизитыЗабора.Добавить();
		НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаборов;
		НоваяСтрока.Период 			= Дата;
		НоваяСтрока.Регистратор 	= Ссылка;
		НоваяСтрока.Забор 			= ДанныеЗаказа.ДокументДоставки;
		НоваяСтрока.РеквизитЗабора 	= Перечисления.ES_ИзменяемыеРеквизитыЗабора.ИДТранзакции;
		НоваяСтрока.Значение 		= ДанныеЗаказа.ИДТранзакции;
		
		НоваяСтрока = ТабИзменяемыеРеквизитыЗабора.Добавить();
		НоваяСтрока.Движения 		= Движения.ES_ИзменяемыеРеквизитыЗаборов;
		НоваяСтрока.Период 			= Дата;
		НоваяСтрока.Регистратор 	= Ссылка;
		НоваяСтрока.Забор 			= ДанныеЗаказа.ДокументДоставки;
		НоваяСтрока.РеквизитЗабора 	= Перечисления.ES_ИзменяемыеРеквизитыЗабора.НомерЧека;
		НоваяСтрока.Значение 		= ДанныеЗаказа.НомерЧека;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗаполнитьКомментарийКурьераВЗаказе(Заказ, ЗакКомментарий)
	//ЕФСОЛ Несторук 25.10.2016 +

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_ИзменяемыеРеквизитыЗаказов.Значение,
	|	ES_ИзменяемыеРеквизитыЗаказов.Период
	|ИЗ
	|	РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов КАК ES_ИзменяемыеРеквизитыЗаказов
	|ГДЕ
	|	ES_ИзменяемыеРеквизитыЗаказов.Заказ = &Заказ
	|	И ES_ИзменяемыеРеквизитыЗаказов.Регистратор ССЫЛКА Документ.ES_ОтчетОДоставке
	|	И ES_ИзменяемыеРеквизитыЗаказов.РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Комментарий)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ES_ИзменяемыеРеквизитыЗаборов.Значение,
	|	ES_ИзменяемыеРеквизитыЗаборов.Период
	|ИЗ
	|	РегистрСведений.ES_ИзменяемыеРеквизитыЗаборов КАК ES_ИзменяемыеРеквизитыЗаборов
	|ГДЕ
	|	ES_ИзменяемыеРеквизитыЗаборов.Забор = &Заказ
	|	И ES_ИзменяемыеРеквизитыЗаборов.РеквизитЗабора = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗабора.Комментарий)
	|	И ES_ИзменяемыеРеквизитыЗаборов.Регистратор ССЫЛКА Документ.ES_ОтчетОДоставке";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		мОбъект = Заказ.ПолучитьОбъект();
		Выборка = РезультатЗапроса.Выбрать();
		мОбъект.ES_КомментарийКурьера = "";
		Пока Выборка.Следующий() Цикл
			Период = Формат(Выборка.Период,"ДЛФ=D");
			Если ЗначениеЗаполнено(мОбъект.ES_КомментарийКурьера) Тогда
				мОбъект.ES_КомментарийКурьера = мОбъект.ES_КомментарийКурьера + Символы.ПС +  Период + " "+ Выборка.Значение;
			Иначе 
				мОбъект.ES_КомментарийКурьера = мОбъект.ES_КомментарийКурьера + ""+  Период + " "+ Выборка.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ЗакКомментарий) Тогда
			мОбъект.ES_КомментарийКурьера = мОбъект.ES_КомментарийКурьера + Символы.ПС + Формат(Дата, "ДЛФ=D") + " "+ ЗакКомментарий;
		КонецЕсли;
		
		мОбъект.Записать();
	Иначе
		
		Если ЗначениеЗаполнено(ЗакКомментарий) Тогда
			мОбъект = Заказ.ПолучитьОбъект();
			мОбъект.ES_КомментарийКурьера = ""+Формат(Дата, "ДЛФ=D") + " "+ ЗакКомментарий;
			мОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли;
//ЕФСОЛ Несторук 25.10.2016 -
	
КонецПроцедуры

Процедура КонтрольЗаполненияРеквизитовТЧЗаказы(Отказ)
	//ЕФСОЛ Савченко 04.07.17
	
	
	Для каждого СтрокаТЧ Из Заказы Цикл
		Если ES_ЗакрытКурьером И (СтрокаТЧ.СтатусЗаказа 	= Перечисления.ES_СтатусыЗаказов.ВПути ИЛИ
			СтрокаТЧ.СтатусЗаказа   = Перечисления.ES_СтатусыЗаказов.Назначен ИЛИ
			СтрокаТЧ.СтатусЗаказа   = Перечисления.ES_СтатусыЗаказов.ОжидаетГрузНазначен ИЛИ
			СтрокаТЧ.СтатусЗаказа   = Перечисления.ES_СтатусыЗаказов.ОжидаетГруз ИЛИ
			СтрокаТЧ.СтатусЗаказа	= Перечисления.ES_СтатусыЗаборов.ВПути ИЛИ
			СтрокаТЧ.СтатусЗаказа	= Перечисления.ES_СтатусыЗаборов.ВРаботе) Тогда
			Отказ = Истина;
			Сообщить("В строке "+СтрокаТЧ.НомерСтроки+" не финальный статус.");
		КонецЕсли;
		
				
		Если СтрокаТЧ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ВПути 
			ИЛИ СтрокаТЧ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Доставлен
			ИЛИ СтрокаТЧ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Подготовлен
			ИЛИ СтрокаТЧ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Назначен
			ИЛИ СтрокаТЧ.СтатусЗаказа = Перечисления.ES_СтатусыЗаборов.Назначен
			ИЛИ СтрокаТЧ.СтатусЗаказа = Перечисления.ES_СтатусыЗаборов.ВРаботе
			ИЛИ СтрокаТЧ.СтатусЗаказа = Перечисления.ES_СтатусыЗаборов.ВПути 
			ИЛИ СтрокаТЧ.СтатусЗаказа = Перечисления.ES_СтатусыЗаборов.Выполнен
			ИЛИ СтрокаТЧ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ОжидаетГруз
			ИЛИ СтрокаТЧ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ОжидаетГрузНазначен
			ИЛИ СтрокаТЧ.СтатусЗаказа = Перечисления.ES_СтатусыЗаборов.ПустаяСсылка()
			ИЛИ СтрокаТЧ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ПустаяСсылка()Тогда
		Иначе
			
			Если СтрокаТЧ.КомментарийКСтатусу.Пустая() Тогда
				Отказ = Истина;
				Сообщить("В строке "+СтрокаТЧ.НомерСтроки+" не заполнена комментарий.");
			КонецЕсли;
		КонецЕсли;	
		
		//Если СтрокаТЧ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.НеДоставлен Тогда
		//	Если СтрокаТЧ.ДатаНД = Дата(1,1,1) Тогда
		//		Отказ = Истина;
		//		Сообщить("В строке "+СтрокаТЧ.НомерСтроки+" не заполнена новая дата.");
		//	ИначеЕсли СтрокаТЧ.ВремяНД_С = Дата(1,1,1) Тогда
		//		Отказ = Истина;
		//		Сообщить("В строке "+СтрокаТЧ.НомерСтроки+" не заполнено ""время с"".");
		//	ИначеЕсли СтрокаТЧ.ВремяНД_По = Дата(1,1,1) Тогда
		//		Отказ = Истина;
		//		Сообщить("В строке "+СтрокаТЧ.НомерСтроки+" не заполнено ""время по"".");	
		//	КонецЕсли;
		//КонецЕсли;
		
	КонецЦикла;
	
		
КонецПроцедуры

Функция ПроверитьНаличиеЗабораПоЗаказуВОтчете(Заказ)
	
	ЕстьЗабор = Ложь;
	НайтиСтроки = Заказы.НайтиСтроки(Новый Структура("СвязанныйДокумент",Заказ));
	Если НайтиСтроки.Количество() > 0 Тогда
		ЕстьЗабор = Истина;
	КонецЕсли;
	Возврат ЕстьЗабор;
	
	
КонецФункции

#КонецЕсли


