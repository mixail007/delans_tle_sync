
////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//УправлениеНебольшойФирмойСервер.ЗаполнитьШапкуДокумента(
	//	Объект,
	//	,
	//	Параметры.ЗначениеКопирования,
	//	Параметры.Основание,
	//	РазрешеноПроведение,
	//	Параметры.ЗначенияЗаполнения
	//);
	
	// Запрет редактирования данных формы, если на основании отчета есть проведенные Поступленя в кассу
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьВидимостьИДоступностьЭлементовФормы();
		УстановитьПризнакиСозданияДокументовНаОснованииОтчета();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Подрядчик) Тогда
		Элементы.Подрядчик.Видимость = Истина;
		Элементы.Перевозчик.Видимость = Истина;
	Иначе
		Элементы.Подрядчик.Видимость = Ложь;
		Элементы.Перевозчик.Видимость = Ложь;
	КонецЕсли;

	//ЭР Несторук С.И. 10.05.2017 9:17:53 {
	//ИспользоватьЯчейки 				= ПолучитьФункциональнуюОпцию("УчетПоЯчейкам");
	//Элементы.Ячейка.Видимость 		= ИспользоватьЯчейки;
	//Элементы.ЗаказыЯчейка.Видимость	= ИспользоватьЯчейки;	
	//}ЭР Несторук С.И.
	
	//УправлениеНебольшойФирмойКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	//ЭР Несторук С.И. 23.01.2017 17:42:17 {
	  //ПроверитьЗаборы()
	//ЭР Несторук С.И.}
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаВажныеКомандыОтчетаОДоставке);
	// Конец СтандартныеПодсистемы.Печать

	//ЭР Несторук С.И. 27.10.2017 15:35:07 {
	Если РольДоступна("ES_Партнёр") Тогда
		Элементы.ОткрытьФормуПодбора.Видимость = Истина;
	КонецЕсли;
	//}ЭР Несторук С.И.
	
	//EFSOL Шаповал О.А. 07.08.2018 13:26:44 {
	мЭтоНовый = Ложь;
	Если Параметры.Ключ.Пустая() Тогда
		мЭтоНовый = Истина;
	КонецЕсли;
	//}EFSOL Шаповал О.А.
	
	
КонецПроцедуры

&НаКлиенте 
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект)
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	//ЕФСОЛ Несторук 22.07.2016 + 
	Если Объект.Заказы.Количество() > 0 Тогда 
	Для каждого Стр из Объект.Заказы Цикл
		Стр.Отметка = Ложь;
	КонецЦикла;
	КонецЕсли;
	//ЕФСОЛ Несторук 22.07.2016 -
	
	ОтказПроведения = Ложь;
	Для каждого Элем Из Объект.Заказы Цикл
		Если Элем.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Отменен")
		ИЛИ Элем.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Отказ")
		 ИЛИ Элем.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.НеДоставлен")
		 ИЛИ Элем.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаборов.Отменен")
		 ИЛИ Элем.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаборов.НеВыполнен")
		Тогда
			Если НЕ ЗначениеЗаполнено(Элем.КомментарийКСтатусу) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не заполнен комментарий";
				Сообщение.Поле = "Объект.Заказы[" + Строка(Элем.НомерСтроки - 1) + "].КомментарийКСтатусу";
				Сообщение.Сообщить(); 
				
				ОтказПроведения = Истина;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 

	Отказ = ОтказПроведения;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Отчет_СозданыДенежныеДокументы" Тогда
		Элементы.ГруппаЛеваяКолонка.ТолькоПросмотр = Истина;
		Элементы.ГруппаДатаНомер.ТолькоПросмотр = Истина;
		Элементы.ЗаполнитьПоПлану.Доступность = Ложь;
		Элементы.Страницы.ТолькоПросмотр = Истина;
		Элементы.Подвал.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ИмяСобытия = "ПланЗаписан" Тогда
		Если Параметр = Объект.ПланДоставки Тогда
			ЭтаФорма.Прочитать();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ЭЛЕМЕНТОВ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПланДоставкиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПланДоставки) Тогда
		
		ПолученныйОтчетОДоставке = ПолучитьОтчетОДоставкеНаОснованииПланаДоставки(Объект.ПланДоставки);
		Если ПолученныйОтчетОДоставке <> Неопределено Тогда
			ПоказатьПредупреждение(,"На основании выбранного плана доставки уже создан " + ПолученныйОтчетОДоставке,,"Ошибка заполнения данных");
			Возврат;
		КонецЕсли; 
		
		ЗаполнитьИсполнителяПоПлануДоставки(Объект.ПланДоставки);
		
	Иначе
		Объект.Заказы.Очистить();
		Объект.СписокГрузов.Очистить();
		Объект.Грузы.Очистить();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Очистить табличные части
	Если Объект.Заказы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Табличные части будут очищены. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВопросаОчисткиТЧГрузы", ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
	КонецЕсли;	
	
	Уникальность = "ФормаВыбораПланаВОтчет_" + Объект.Ссылка;
	Оповещение = Новый ОписаниеОповещения("ОповещениеЗаполнитьКурьерИзПлана",ЭтаФорма);
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Курьер) Тогда
		ПараметрыФормы.Вставить("Курьер", Объект.Курьер);
	КонецЕсли; 
	
	ОткрытьФорму("Документ.ES_ПланДоставки.ФормаВыбора", ПараметрыФормы, ЭтаФорма, Уникальность, , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработанПриИзменении(Элемент)
	
	Если Объект.Обработан Тогда
		Объект.ДанныеОбработан = "" + ПользователиКлиентСервер.ТекущийПользователь() + ", " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ""в"" ЧЧ:мм'");
	Иначе
		Объект.ДанныеОбработан = "";
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
	
КонецПроцедуры // КомментарийПриИзменении()

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНЫХ ЧАСТЕЙ

// ТЧ Документы доставки

&НаКлиенте
Процедура ЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	// При двойном клике на строке открывается Заказ доставки
	Если Поле.Имя = "ЗаказыДокументДоставки" Тогда
		ПоказатьЗначение(,Элемент.ТекущиеДанные.ДокументДоставки);
	ИначеЕсли Поле.Имя = "ЗаказыВложения" Тогда
		мПараметры = Новый Структура;
		мПараметры.Вставить("ВладелецФайла",Элементы.Заказы.ТекущиеДанные.ДокументДоставки);
		//Заголовок = НСтр("ru = 'Присоединенные файлы'");
		//мПараметры.Вставить("ЗаголовокФормы", Заголовок);
		ОткрытьФорму("Справочник.Файлы.Форма.Файлы",мПараметры,Элементы.Заказы.ТекущиеДанные.ДокументДоставки);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПриАктивизацииСтроки(Элемент)
		
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		Элементы.СписокГрузов.ОтборСтрок 	= Новый ФиксированнаяСтруктура("ДокументДоставки", Элемент.ТекущиеДанные.ДокументДоставки);
		Элементы.Грузы.ОтборСтрок 			= Новый ФиксированнаяСтруктура("ДокументДоставки", Элемент.ТекущиеДанные.ДокументДоставки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПередУдалением(Элемент, Отказ)

	//Отказ = Истина;
	//ЭР Несторук С.И. 31.10.2017 21:59:24 {
	НайтиГрузы = Объект.Грузы.НайтиСтроки(Новый Структура("ДокументДоставки",Элемент.ТекущиеДанные.ДокументДоставки));
	
	Для каждого Стр ИЗ НайтиГрузы Цикл
		Объект.Грузы.Удалить(Стр);
	КонецЦикла;
	//}ЭР Несторук С.И.
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПроверкаСтатуса(Элементы.Заказы.ТекущиеДанные.СтатусЗаказа, Элементы.Заказы.ТекущиеДанные.ДатаНД, Элементы.Заказы.ТекущаяСтрока);
	
	й = Объект.Заказы.Количество() - 1;
	Пока й >= 0 Цикл
		Если НЕ ЗначениеЗаполнено(Объект.Заказы[й].ДокументДоставки) Тогда
			Объект.Заказы.Удалить(й);
		КонецЕсли;
		й = й - 1;
	КонецЦикла; 
	
	//ES_Коваленко М. 21.01.2016{
	ЗаказыПриОкончанииРедактированияПродолжение();
	// } ES_Коваленко
	ПересчитатьДанныеПодвала();
	
	//EFSOL_Шаповал Олег Анатольевич 4 октября 2017 г. 8:42:34 +
	Элементы.Заказы.ТекущиеДанные.Вложения = ПолучитьКартинкуВложения(Элементы.Заказы.ТекущиеДанные.ДокументДоставки);
	//EFSOL Шаповал О.А. -


КонецПроцедуры


&НаКлиенте
функция ПолучитьКартинкуВложения(ДокДоставки)
	//EFSOL_Шаповал Олег Анатольевич 4 октября 2017 г. 8:50:52 +
	Мас = Новый Массив;
	Мас.Добавить(ДокДоставки);
	СоответствиеЗаказов = ПолучитьЗаказыСВложением(Мас);
	Вложение = СоответствиеЗаказов.Получить(ДокДоставки);
	Если Не Вложение = Неопределено Тогда
		мЗначение = Вложение;
	Иначе
		мЗначение = 0;
	КонецЕсли;
	Возврат мЗначение;
	//EFSOL Шаповал О.А. -	
КонецФункции

&НаСервере
функция ПолучитьЗаказыСВложением(МасДокДоставки = Неопределено)
	//EFSOL_Шаповал Олег Анатольевич 4 октября 2017 г. 8:50:52 +
	
	Если МасДокДоставки = Неопределено Тогда
		ТЗ_ДокДоставки = Объект.Заказы.Выгрузить(,"ДокументДоставки");
		МасДокДоставки = ТЗ_ДокДоставки.ВыгрузитьКолонку("ДокументДоставки");
	КонецЕсли;
	
	СоответствиеЗаказов = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Файлы.ВладелецФайла,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Файлы.Ссылка) КАК Ссылка
	               |ИЗ
	               |	Справочник.Файлы КАК Файлы
	               |ГДЕ
	               //|	ВЫРАЗИТЬ(Файлы.ВладелецФайла КАК Документ.ЗаказПокупателя) В (&ВладелецФайла)
				   |	Файлы.ВладелецФайла В (&ВладелецФайла)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Файлы.ВладелецФайла";
	Запрос.УстановитьПараметр("ВладелецФайла",МасДокДоставки);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеЗаказов.Вставить(Выборка.ВладелецФайла,Выборка.Ссылка);	
	КонецЦикла;
	Возврат СоответствиеЗаказов;
	//EFSOL Шаповал О.А. -	
КонецФункции


&НаКлиенте
Процедура ЗаказыПриОкончанииРедактированияПродолжение()
	 	
	ПересчитатьКоличествоВозвратов();

	Объект.ES_ОплатаБезналичными = 0;
	Объект.ES_ОплатаНаличными = 0;
	
	Для каждого СтрТоваров Из Объект.Заказы Цикл
		
		Если СтрТоваров.ES_ВидОплаты = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Наличные") Тогда
			
			Объект.ES_ОплатаНаличными = Объект.ES_ОплатаНаличными + СтрТоваров.НПФакт;
			
		ИначеЕсли СтрТоваров.ES_ВидОплаты = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные") Тогда
			
			Объект.ES_ОплатаБезналичными = Объект.ES_ОплатаБезналичными + СтрТоваров.НПФакт;
			
		КонецЕсли;
		
		Если СтрТоваров.НПФактНал > 0 или СтрТоваров.СтоимостьФактНал  > 0 Тогда
		
			Объект.ES_ОплатаНаличными = Объект.ES_ОплатаНаличными + СтрТоваров.НПФактНал + СтрТоваров.СтоимостьФактНал;
		   
		КонецЕсли;
		
		Если СтрТоваров.НПФактБезнал > 0 или СтрТоваров.СтоимостьФактБезнал  > 0 Тогда 
		
			Объект.ES_ОплатаБезналичными = Объект.ES_ОплатаБезналичными + СтрТоваров.НПФактБезнал + СтрТоваров.СтоимостьФактБезнал;
			
		КонецЕсли;

		
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаказыСтатусЗаказаПриИзменении(Элемент)
	
	//ЭР Несторук С.И. 10.03.2017 16:44:35 {
	
	ОчиститьСообщения();
	
	ТекущаяСтрока = Элементы.Заказы.ТекущиеДанные;

	//ЭР Несторук С.И. 07.10.2017 23:28:25 {
	ТекДата = УправлениеНебольшойФирмойВызовСервера.ДатаСеанса();
	ТекущаяСтрока.ДатаФактическойДоставки = ТекДата;
	ТекущаяСтрока.ВремяФактическойДоставки = ТекДата;
	//}ЭР Несторук С.И.

	Если ТипЗнч(ТекущаяСтрока.ДокументДоставки) = Тип("ДокументСсылка.ЗаказПокупателя") И 
		ТекущаяСтрока.ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.ДвериДвери") Тогда
		СтрокаЗабор = Объект.Заказы.НайтиСтроки(Новый Структура("ДокументДоставки",ТекущаяСтрока.СвязанныйДокумент));
		Если СтрокаЗабор.Количество() > 0 Тогда
			Если НЕ СтрокаЗабор[0].СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаборов.Выполнен") Тогда
				//Если ТекущаяСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Доставлен") 
				//	ИЛИ ТекущаяСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ЧастичноДоставлен") Тогда
				Если ТекущаяСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.НеДоставлен") Тогда
				Иначе
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Забор еще не выполнен";
					Сообщение.Поле = "Объект.Заказы[" + Строка(СтрокаЗабор[0].НомерСтроки - 1) + "].СтатусЗаказа";
					Сообщение.Сообщить();
					ТекущаяСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ОжидаетГрузНазначен");
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущаяСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Доставлен") Тогда
			НайденныеГрузы = Объект.Грузы.НайтиСтроки(Новый Структура("ДокументДоставки", ТекущаяСтрока.ДокументДоставки));
		Если НайденныеГрузы.Количество() > 0 Тогда
			ГрузовФакт = 0;
			ГрузовПлан = 0;
			Для Каждого Стр ИЗ НайденныеГрузы Цикл
			ГрузовФакт = ГрузовФакт + Стр.КоличествоФакт;
			ГрузовПлан = ГрузовПлан + Стр.КоличествоПлан;
			КонецЦикла;
			Если ГрузовФакт <> ГрузовПлан Тогда
			ТекущаяСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ЧастичноДоставлен");
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "В заказе " + ТекущаяСтрока.ДокументДоставки + " фактическое количество доставленных товаров меньше планового";
			Сообщение.Сообщить();
			КонецЕсли;
						
		КонецЕсли;
	КонецЕсли;
	
	//EFSOL_Шаповал Олег Анатольевич 14 сентября 2017 г. 10:34:13 +
	Если ТекущаяСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.НеправильныйАдрес") 
		или ТекущаяСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ПолучательПереехал") Тогда
		ТекущаяСтрока.Проблема = Истина;	
	КонецЕсли;
	
	Если ТекущаяСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ОфисПолучателяЗакрыт") 
		или ТекущаяСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.НеДоставлен") Тогда
		мЗаказчик = ES_ОбщегоНазначения.ЭР_ПолучитьЗначениеРеквизитаНаСервере(ТекущаяСтрока.ДокументДоставки,"Контрагент").Контрагент;
		мПереноситьНеДоставленныеЗаказыНаЗавтра = ES_ОбщегоНазначения.ЭР_ПолучитьЗначениеРеквизитаНаСервере(мЗаказчик,"ES_ПереноситьНеДоставленныеЗаказыНаЗавтра").ES_ПереноситьНеДоставленныеЗаказыНаЗавтра;
		Если мПереноситьНеДоставленныеЗаказыНаЗавтра Тогда
			ТекущаяСтрока.ДатаНД = НачалоДня(Объект.Дата + 3600*24);
			ТекущаяСтрока.ВремяНД_С = ES_ОбщегоНазначения.ЭР_ПолучитьЗначениеРеквизитаНаСервере(ТекущаяСтрока.ДокументДоставки,"ES_ВремяДоставкиС").ES_ВремяДоставкиС;
			ТекущаяСтрока.ВремяНД_По = ES_ОбщегоНазначения.ЭР_ПолучитьЗначениеРеквизитаНаСервере(ТекущаяСтрока.ДокументДоставки,"ES_ВремяДоставкиПо").ES_ВремяДоставкиПо;
		КонецЕсли;
	КонецЕсли;
	
	//EFSOL Шаповал О.А. -
	//}ЭР Несторук С.И.		
	
	ПересчитатьФактСтоимостьНП();
	ОчиститьКассуСчет();
	
КонецПроцедуры

//ЕФСОЛ Несторук 25.08.2016 +
&НаКлиенте
Процедура ОчиститьКассуСчет()
	
	ТекДанные = Элементы.Заказы.ТекущиеДанные;
	
	Если ТекДанные.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Отказ") 
		ИЛИ ТекДанные.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.НеДоставлен") Тогда
		ТекДанные.Касса = "";
		ТекДанные.Счет  = "";
	ИначеЕсли ТипЗнч(ТекДанные.ДокументДоставки) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ТекДанные.Касса = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(ПредопределенноеЗначение("Перечисление.ES_ВидыСтартовыхНастроек.КассаНаложенныхПлатежей"));
		ТекДанные.Счет  = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(ПредопределенноеЗначение("Перечисление.ES_ВидыСтартовыхНастроек.ДопКассаНП"));
	КонецЕсли;
		
	
КонецПроцедуры
//ЕФСОЛ Несторук 25.08.2016 -

//&НаСервере
Процедура ПроверкаСтатуса(СтатусЗаказа, ДатаНД, Индекс)
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Перечисления.ES_СтатусыЗаказов.НеправильныйАдрес);
	МассивСтатусов.Добавить(Перечисления.ES_СтатусыЗаказов.ПолучательПереехал);
	МассивСтатусов.Добавить(Перечисления.ES_СтатусыЗаказов.ПолучателяНетДомаВОфисе);
	
	Если (СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.НеДоставлен 
			или СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ОфисПолучателяЗакрыт
			или СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ПолучателяНетДомаВОфисе) Тогда // и НЕ ЗначениеЗаполнено(ДатаНД) Тогда  
		Элементы.ГруппаДатаНД.Видимость = Истина;
		//ЕФСОЛ Несторук 27.09.2016 + Закомментированно
		//Сообщ = Новый СообщениеПользователю();
		//Сообщ.Текст = "Необходимо заполнить новую дату доставки";
		//Сообщ.Поле = "Объект.Заказы["+Индекс+"].ДатаНД";
		////Сообщ.УстановитьДанные(ЭтотОбъект);
		//Сообщ.Сообщить();
		//ЕФСОЛ Несторук 27.09.2016 - 
        Возврат;
	ИначеЕсли Объект.Заказы.НайтиСтроки(Новый Структура("СтатусЗаказа", МассивСтатусов)).Количество() = 0 Тогда
	
		Элементы.ГруппаДатаНД.Видимость = Ложь;
		
		
	КонецЕсли;


КонецПроцедуры // ПроверкаСтатуса()

&НаКлиенте
Процедура ЗаказыСтатусЗаказаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.Заказы.ТекущиеДанные;
	
	Если ТипЗнч(ТекущаяСтрока.ДокументДоставки) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ДанныеВыбора = Новый СписокЗначений;
		//ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Назначен"));
		//ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Принят"));
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ВПути"));
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ЧастичноДоставлен"));
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Доставлен"));
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.НеДоставлен"));
		//ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.НеправильныйАдрес"));
		//ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ПолучательПереехал"));
		//ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ОфисПолучателяЗакрыт"));
		//ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ПолучателяНетДомаВОфисе"));
		//ЕФСОЛ Несторук
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Отказ"));
		
		Если ТекущаяСтрока.ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.Самовывоз") Тогда
			ДанныеВыбора.Очистить();
			ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ВПути"));
			ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Доставлен"));
			ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Отказ"));
		КонецЕсли;
		
		//ЕФСОЛ Несторук
	ИначеЕсли ТипЗнч(ТекущаяСтрока.ДокументДоставки) = Тип("ДокументСсылка.ES_ЗаборГруза") Тогда
		ДанныеВыбора = Новый СписокЗначений;
		//ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаборов.Назначен"));
		//ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаборов.Принят"));
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаборов.ВПути"));
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаборов.Выполнен"));
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаборов.НеВыполнен"));
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаборов.Отменен"));
		//ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаборов.Передан"));
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыРасходыПриИзменении(Элемент)

	ПересчитатьДанныеПодвала(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСтоимостьДоставкиПриИзменении(Элемент)
	
	ПересчитатьДанныеПодвала(,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыНПФактПриИзменении(Элемент)
	
	ПересчитатьДанныеПодвала(,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКассаНПНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьСписокКассНПИзСтратовыхНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКассаСтоимостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьСписокКассНПИзСтратовыхНастроек();
	
КонецПроцедуры

// ТЧ СПИСОК ГРУЗОВ

&НаКлиенте
Процедура СписокГрузовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокГрузовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокГрузовНПФактПриИзменении(Элемент)
	
	ПересчитатьНалПлатежВТекСтрокеЗаказа();
	
КонецПроцедуры

// ТЧ ГРУЗЫ

&НаКлиенте
Процедура ГрузыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ГрузыНоменклатура" Тогда
		ПоказатьЗначение(,Элемент.ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыКоличествоФактПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Грузы.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекСтрока.НПФакт = ТекСтрока.КоличествоФакт * ТекСтрока.Цена;
		
	ПересчитатьНалПлатежВТекСтрокеЗаказа();
	ПересчитатьКоличествоВозвратов();
	РассчетСуммыНДС(ТекСтрока);
КонецПроцедуры



&НаКлиенте
Процедура ГрузыНПФактПриИзменении(Элемент)
	
	ПересчитатьНалПлатежВТекСтрокеЗаказа();
	ТекСтрока = Элементы.Грузы.ТекущиеДанные;
	РассчетСуммыНДС(ТекСтрока);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ КНОПОК

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоПлану(Команда)
	
	// Контроли
	Если НЕ ЗначениеЗаполнено(Объект.ПланДоставки) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Укажите план доставки";
		Сообщение.Поле = "Объект.ПланДоставки";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли; 
	
	Если Объект.Заказы.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличные части будут очищены. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВопросаОчисткиТЧПередЗаполнениемДаннымиПлана", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
	Иначе
	
		ЗаполнитьДаннымиИзПланаДоставкиНаСервере();
		ПересчитатьДанныеПодвала();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоПлану(Команда)
	
	ОбновитьСписокЗказовИзПланаНаСервере();
	
	ПересчитатьДанныеПодвала();
	
КонецПроцедуры

&НаКлиенте
// Процедура создает документы Поступление в кассу на сумму наложенных платежей
Процедура ОО_НПФактНал(Команда)

	ОчиститьСообщения();
	
	Если ЕстьЗаказВПути() Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураПризнаков = ES_ОбщегоНазначения.ПолучитьПризнакУчета(Объект.Ссылка);
	Если СтруктураПризнаков.УчтеноНП Тогда
		
		УчтеноНПФакт = Истина;
		ПоказатьПредупреждение(,НСтр("ru = 'Поступления в кассу не созданы!'"));
		
	Иначе
		УчтеноНПФакт = Ложь;
		
		МассивДокументов = СоздатьДокументыНПФакт(Объект.Ссылка);
		Если МассивДокументов.Количество() > 0 Тогда
			УчтеноНПФакт = Истина;
			Для каждого СсылкаНаДок Из МассивДокументов Цикл
				ПоказатьОповещениеПользователя(
							НСтр("ru = 'Создание:'"),
							ПолучитьНавигационнуюСсылку(СсылкаНаДок),
							Строка(СсылкаНаДок),
							БиблиотекаКартинок.Информация32);
				Сообщить("Создан новый документ " + Строка(СсылкаНаДок) + ".");
				
				Оповестить("Отчет_СозданыДенежныеДокументы",,ЭтаФорма);
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
	УстановитьКартинкуКнопкиНПФактНал(УчтеноНПФакт);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуКнопкиНПФактНал(УчтеноНПФакт)
	ES_ОбщегоНазначенияКлиентСервер.УстановитьКартинкуДляКнопки(Элементы.ФормаНПФактНал, УчтеноНПФакт);	
КонецПроцедуры


&НаКлиенте
// Процедура создает документы Поступление в кассу на сумму стоимости доставки нал
Процедура ОО_СтоимостьНал(Команда)

	ОчиститьСообщения();
	
	Если ЕстьЗаказВПути() Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураПризнаков = ES_ОбщегоНазначения.ПолучитьПризнакУчета(Объект.Ссылка);
	Если СтруктураПризнаков.УчтеноСтоимость Тогда
		
		УчтеноСтоимость = Истина;
		ПоказатьПредупреждение(,НСтр("ru = 'Поступления в кассу не созданы!'"));
		
	Иначе
		УчтеноСтоимость = Ложь;
		
		МассивДокументов = СоздатьДокументыСтоимость(Объект.Ссылка);
		Если МассивДокументов.Количество() > 0 Тогда
			УчтеноСтоимость = Истина;
			Для каждого СсылкаНаДок Из МассивДокументов Цикл
				ПоказатьОповещениеПользователя(
							НСтр("ru = 'Создание:'"),
							ПолучитьНавигационнуюСсылку(СсылкаНаДок),
							Строка(СсылкаНаДок),
							БиблиотекаКартинок.Информация32);
				Сообщить("Создан новый документ " + Строка(СсылкаНаДок) + ".");
				
				Оповестить("Отчет_СозданыДенежныеДокументы",,ЭтаФорма);
			КонецЦикла; 
		КонецЕсли; 

	КонецЕсли; 
	
	УстановитьКартинкуКнопкиСтоимостьНал(УчтеноСтоимость);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуКнопкиСтоимостьНал(УчтеноСтоимость)
	ES_ОбщегоНазначенияКлиентСервер.УстановитьКартинкуДляКнопки(Элементы.ФормаСтоимостьНал, УчтеноСтоимость);	
КонецПроцедуры

&НаКлиенте
Процедура СписатьЗапасы(Команда)
	
	Если НЕ Объект.Проведен Тогда
		Сообщить(НСтр("ru = 'Документ не проведен!'"), СтатусСообщения.Важное);
		Возврат;
	КонецЕсли; 
	
	Если Модифицированность Тогда
		Сообщить(НСтр("ru = 'Документ был изменен. Его необходимо провести'"), СтатусСообщения.Важное);
		Возврат;
	КонецЕсли; 
	
	ОчиститьСообщения();
	
	Если ЕстьЗаказВПути() Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураПризнаков = ES_ОбщегоНазначения.ПолучитьПризнакУчета(Объект.Ссылка);
	Если СтруктураПризнаков.СписаныЗапасы Тогда
		
		СписаныЗапасы = Истина;
		ПоказатьПредупреждение(,НСтр("ru = 'Расходные накладные не созданы!'"));
		
	Иначе
		СписаныЗапасы = Ложь;
		
		МассивДокументов = СписатьТоварыНаСервере(Объект.Ссылка);
		Если МассивДокументов.Количество() > 0 Тогда
			СписаныЗапасы = Истина;
			Для каждого СсылкаНаДок Из МассивДокументов Цикл
				ПоказатьОповещениеПользователя(
							НСтр("ru = 'Создание:'"),
							ПолучитьНавигационнуюСсылку(СсылкаНаДок),
							Строка(СсылкаНаДок),
							БиблиотекаКартинок.Информация32);
				Сообщить("Создан новый документ " + Строка(СсылкаНаДок) + ".");
			КонецЦикла; 
		КонецЕсли; 
		
	КонецЕсли; 
	
	УстановитьКартинкуКнопкиСписатьЗапасы(СписаныЗапасы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуКнопкиСписатьЗапасы(СписаныЗапасы)
	ES_ОбщегоНазначенияКлиентСервер.УстановитьКартинкуДляКнопки(Элементы.ФормаСписатьЗапасы, СписаныЗапасы);	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьСостояниеЗаказов(Команда)
	
	Если Объект.Грузы.количество() > 0 ИЛИ Объект.Заказы.Количество()>0 Тогда
		
		МассивЗаказов = УстановитьСостояниеЗаказовНаСервере();
		
		Если МассивЗаказов.количество()= 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "В плане нет заказов на доставку";
			Сообщение.Поле = "Объект.ПланыДоставкиЗаказы";
			Сообщение.Сообщить(); 
			
		Иначе
	
			Уникальность = "ФормаУстановкиСостоянияЗаказамНаДоставку_" + Объект.Ссылка;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("МассивЗаказов", МассивЗаказов);
			ПараметрыФормы.Вставить("ОтметкаПоПравилам", Истина);
			ОткрытьФорму("ОбщаяФорма.ES_ФормаУстановкиСостояния", ПараметрыФормы, ЭтаФорма, Уникальность);
			
		КонецЕсли;
	КонецЕсли;	
	 
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент
 
&НаКлиенте
Процедура ПересчитатьФактСтоимостьНП()
		
	ТекСтрока = Элементы.Заказы.ТекущиеДанные;
	//EFSOL_Сальник К.А. 2019-05-17 {+
	ТекСтрока.СтоимостьФактНал = 0;
	ТекСтрока.СтоимостьФактБезнал = 0;
	//EFSOL_Сальник К.А.  -}

	ТекСтрока.НПФактНал = 0;
	ТекСтрока.НПФактБезнал = 0;
	Если ТекСтрока.ES_Предоплачен Тогда
		Возврат;
	КонецЕсли;
	
	//ЭР Несторук С.И. 22.12.2016 11:45:31 {
	Если ТипЗнч(ТекСтрока.ДокументДоставки) = Тип("ДокументСсылка.ES_ЗаборГруза") ИЛИ
		ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ВПути") ИЛИ
		ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Принят") ИЛИ
		ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.НазначенПринят") Тогда
		Возврат;
	КонецЕсли;
	//ЭР Несторук С.И.}


	Если Объект.Грузы.Количество() = 0 //И Объект.СписокГрузов.Количество() = 0) 
		Тогда
		//ЕФСОЛ Несторук 19.07.2016+ //в Отчете о доставке проставлять стоимость факт и НП факт нал, если они были проставлены в плановых колонках
		Если ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Доставлен")
			ИЛИ ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ЧастичноДоставлен") Тогда
				Если ТекСтрока.ВидОплаты = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные") Тогда
					//EFSOL_Сальник К.А. 2019-05-17 {+
					ТекСтрока.СтоимостьФактНал = 0;
					ТекСтрока.СтоимостьФактБезнал = ТекСтрока.СтоимостьПлан;
					//EFSOL_Сальник К.А.  -}
					ТекСтрока.НПФактБезнал =ТекСтрока.НППлан;
					ТекСтрока.СтоимостьФактНал = 0;
					
				Иначе
					//EFSOL_Сальник К.А. 2019-05-17 {+
					ТекСтрока.СтоимостьФактНал = ТекСтрока.СтоимостьПлан;
					ТекСтрока.СтоимостьФактБезнал = 0;
					//EFSOL_Сальник К.А.  -}
					ТекСтрока.НПФактНал = ТекСтрока.НППлан;
					ТекСтрока.НПФактБезнал = 0;

				КонецЕсли;
		КонецЕсли;
	Иначе
		НайденныеСтроки = Объект.СписокГрузов.НайтиСтроки(Новый Структура("ДокументДоставки", ТекСтрока.ДокументДоставки));
		НПФактСписокГрузов = 0;
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для каждого Стр Из НайденныеСтроки Цикл
				
				НПФактСписокГрузов = НПФактСписокГрузов + Стр.НПФакт;
				
			КонецЦикла;
		КонецЕсли;
		НайденныеСтроки = Объект.Грузы.НайтиСтроки(Новый Структура("ДокументДоставки", ТекСтрока.ДокументДоставки));
		НПФактГрузы = 0;
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для каждого Стр Из НайденныеСтроки Цикл
				
				НПФактГрузы = НПФактГрузы + Стр.НПФакт;
				
			КонецЦикла;			
		КонецЕсли;
		Если ТекСтрока.ВидОплаты = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные") Тогда
			//EFSOL_Сальник К.А. 2019-05-17 {+
			ТекСтрока.СтоимостьФактНал = 0;
			ТекСтрока.СтоимостьФактБезнал = ТекСтрока.СтоимостьПлан;
			//EFSOL_Сальник К.А.  -}
			ТекСтрока.НПФактБезнал = НПФактСписокГрузов+ НПФактГрузы;
			ТекСтрока.НПФактНал = 0;
		Иначе 
			ТекСтрока.НПФактНал = НПФактСписокГрузов+ НПФактГрузы;
			ТекСтрока.НПФактБезнал = 0;	
			//EFSOL_Сальник К.А. 2019-05-17 {+
			ТекСтрока.СтоимостьФактНал = ТекСтрока.СтоимостьПлан;
			ТекСтрока.СтоимостьФактБезнал = 0;
			//EFSOL_Сальник К.А.  -}
		КонецЕсли;

	КонецЕсли;
	//ЕФСОЛ Несторук 19.07.2016-
	
	Если НЕ ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.НеДоставлен") Тогда
	
		ТекСтрока.ДатаНД = "01010001";
	
	КонецЕсли;
	
	Если ТипЗнч(ТекСтрока.ДокументДоставки) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		// Если вид доставки НеДоставлен или Отменен, фактические суммы очищаются
		Если ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.НеДоставлен")
		 ИЛИ ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Отменен")
		 ИЛИ ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Отказ")
		  ИЛИ ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.НеправильныйАдрес")
		   ИЛИ ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ОфисПолучателяЗакрыт")
		    ИЛИ ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ПолучателяНетДомаВОфисе")
					  
		Тогда
			ТекСтрока.НПФакт 		= 0;
			ТекСтрока.СтоимостьФакт = 0;
			
			ТекСтрока.НПФактНал 		= 0;
			ТекСтрока.СтоимостьФактНал = 0;
			ТекСтрока.НПФактБезнал 		= 0;
			ТекСтрока.СтоимостьФактБезнал = 0;
					
			// Очищаем факт суммы в ТЧ Места
			НайденныеСтроки = Объект.СписокГрузов.НайтиСтроки(Новый Структура("ДокументДоставки", ТекСтрока.ДокументДоставки));
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для каждого Стр Из НайденныеСтроки Цикл
					Стр.НПФакт = 0;
				КонецЦикла; 
			КонецЕсли; 
			
			// Очищаем факт суммы в ТЧ Запасы
			НайденныеСтроки = Объект.Грузы.НайтиСтроки(Новый Структура("ДокументДоставки", ТекСтрока.ДокументДоставки));
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для каждого Стр Из НайденныеСтроки Цикл
					Стр.КоличествоФакт = 0;
					Стр.НПФакт = 0;
					//ЭР Несторук С.И. 10.08.2017 9:22:34 {
					Стр.СуммаНДС	= 0;
					//}ЭР Несторук С.И.

				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
		Если ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Доставлен") Тогда
			НайденныеСтроки = Объект.Грузы.НайтиСтроки(Новый Структура("ДокументДоставки", ТекСтрока.ДокументДоставки));
			Если НайденныеСтроки.Количество() > 0 Тогда
				НПФактГрузы = 0;
				
				Для каждого Стр Из НайденныеСтроки Цикл
					
					Стр.КоличествоФакт = Стр.КоличествоПлан;
					Стр.НПФакт = Стр.НППлан;
					НПФактГрузы = НПФактГрузы + Стр.НПФакт;
				КонецЦикла; 
				Если ТекСтрока.ВидОплаты = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные") Тогда
					
					ТекСтрока.НПФактБезнал = НПФактГрузы;
					ТекСтрока.НПФактНал = 0;
				Иначе 
					ТекСтрока.НПФактНал = НПФактГрузы;
					ТекСтрока.НПФактБезнал = 0;			
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
//ES_Савченко Е.Р. 11.08.2017 - 		
		Если ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Доставлен") Тогда
			НайденныеСтроки = Объект.Грузы.НайтиСтроки(Новый Структура("ДокументДоставки", ТекСтрока.ДокументДоставки));
			Если НайденныеСтроки.Количество()= 0 Тогда				
				 ТекСтрока.НПФактНал = ТекСтрока.НППлан;
			КонецЕсли;
			КонецЕсли;
//ES_Савченко Е.Р. 11.08.2017 -   

	//	ИначеЕсли ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Доставлен")Тогда
	//		Если ТекСтрока.ES_ВидОплаты = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.ES_ЗачетНП")Тогда
	//			ТекСтрока.СтоимостьФакт = ПолучитьСтоимостьДоставки(ТекСтрока.ДокументДоставки);
	//			ТекСтрока.НПФакт 		= ТекСтрока.НППлан - ТекСтрока.СтоимостьФакт;
	//		Иначе
	//			ТекСтрока.СтоимостьФакт = ТекСтрока.СтоимостьПлан;
	//			ТекСтрока.НПФакт 		= ТекСтрока.НППлан;
	//		КонецЕсли;
	//	КонецЕсли; 
	//	
	//	ПересчитатьДанныеПодвала(,Ложь);
	//	
	КонецЕсли; 
		
КонецПроцедуры

&НаСервере
Функция ПолучитьСтоимостьДоставки(Заказ)
	Возврат Заказ.ES_СтоимостьДоставки;			
КонецФункции
	
&НаКлиенте
Процедура ПересчитатьНалПлатежВТекСтрокеЗаказа()
		
	ТекСтрокаЗаказа = Элементы.Заказы.ТекущиеДанные;
	Если ТекСтрокаЗаказа = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	НовЗначениеНаложПлатежа = 0;
	
	// ТЧ СписокГрузов
	НайдСписокГрузов = Объект.СписокГрузов.НайтиСтроки(Новый Структура("ДокументДоставки", ТекСтрокаЗаказа.ДокументДоставки));
	Если НайдСписокГрузов.Количество() > 0 Тогда
		Для каждого Стр Из НайдСписокГрузов Цикл
			НовЗначениеНаложПлатежа = НовЗначениеНаложПлатежа + Стр.НПФакт;
		КонецЦикла; 
	КонецЕсли;
	
	// ТЧ Грузы
	КоличествоФактГрузов = 0;
	КоличествоПланГрузов = 0;
	НайдГрузы = Объект.Грузы.НайтиСтроки(Новый Структура("ДокументДоставки", ТекСтрокаЗаказа.ДокументДоставки));
	Если НайдГрузы.Количество() > 0 Тогда
		Для каждого Стр Из НайдГрузы Цикл
			НовЗначениеНаложПлатежа = НовЗначениеНаложПлатежа + Стр.НПФакт;
			КоличествоФактГрузов = КоличествоФактГрузов + Стр.КоличествоФакт;
			КоличествоПланГрузов = КоличествоПланГрузов + Стр.КоличествоПлан;
		КонецЦикла; 
	КонецЕсли; 
	
	// Установка значения в ТЧ Заказы
	Если ТекСтрокаЗаказа.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Доставлен")
	 ИЛИ ТекСтрокаЗаказа.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ЧастичноДоставлен")
	 ИЛИ ТекСтрокаЗаказа.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ВПути")
	Тогда
		
		ТекСтрокаЗаказа.НПФактНал = НовЗначениеНаложПлатежа - ТекСтрокаЗаказа.СтоимостьФакт;
		
	КонецЕсли; 
	
	//ES_Савченко Е.Р. 11.08.2017 +
	Если ТекСтрокаЗаказа.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ЧастичноДоставлен") Тогда
		ТекСтрокаЗаказа.НПФактНал = ТекСтрокаЗаказа.НПФактНал- ТекСтрокаЗаказа.НПФактБезнал;
		 КонецЕсли;
	//ES_Савченко Е.Р. 11.08.2017 - 	
		
	//ЭР Несторук С.И. 13.03.2017 17:31:19 {
	Если ТекСтрокаЗаказа.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Доставлен") Тогда
		Если КоличествоПланГрузов > КоличествоФактГрузов Тогда
			ТекСтрокаЗаказа.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ЧастичноДоставлен");
			Сообщить("Фактическое количество товаров меньше планового, заказ не может быть полностью доставлен");
		КонецЕсли;
	КонецЕсли;
	
	//}ЭР Несторук С.И.
	
	ПересчитатьДанныеПодвала(,Ложь);
		
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДанныеПодвала(ПересчитатьПереданнуюСумму = Истина, ПересчитатьРасходы = Истина)   Экспорт
	
	Объект.ИтогоРасходы = Объект.Заказы.Итог("УслугиПартнера");
	//Объект.ИтогоПереданнаяСумма = Объект.Заказы.Итог("НПФакт") + Объект.Заказы.Итог("СтоимостьФакт");
	Объект.ИтогоПереданнаяСумма = Объект.Заказы.Итог("НПФактНал") + Объект.Заказы.Итог("СтоимостьФактНал") + Объект.Заказы.Итог("НПФактБезнал") + Объект.Заказы.Итог("СтоимостьФактБезнал");

	ДанныеПодвалаПоВидамОплаты  = ПолучитьДанныеПодвалаПоВидамОплаты();
	Объект.ИтогоБезналичные     = ДанныеПодвалаПоВидамОплаты.Безналичные;
	Объект.ИтогоНаличные        = ДанныеПодвалаПоВидамОплаты.Наличные;
	Объект.ES_НПФактБезнал     = ДанныеПодвалаПоВидамОплаты.НПФактБезналичные;
	Объект.ES_ОплатаБезналичными     = ДанныеПодвалаПоВидамОплаты.НПФактБезналичные+ДанныеПодвалаПоВидамОплаты.Безналичные;

	Объект.ES_НПФактНал        = ДанныеПодвалаПоВидамОплаты.НПФактНаличные;
	Объект.ES_ОплатаНаличными     = ДанныеПодвалаПоВидамОплаты.НПФактНаличные+ ДанныеПодвалаПоВидамОплаты.Наличные;

	
	//ЕФСОЛ Несторук 27.09.2016 +
	Если Объект.Заказы.Количество() > 0 Тогда
		Объект.ES_ИтогоНППлан 		=  Объект.Заказы.Итог("СтоимостьПлан") + Объект.Заказы.Итог("НППлан");
	КонецЕсли;
	
	ПересчитатьИтогоПланНалБезнал();
	ПересчитатьКоличествоВозвратов();
	//ЕФСОЛ Несторук 27.09.2016 -

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтогоПланНалБезнал()
	
	СуммаНал= 0 ;
	СуммаБезнал = 0;
	Для каждого Стр Из Объект.Заказы Цикл
		Если Стр.ВидОплаты = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные") Тогда
			СуммаБезнал = СуммаБезнал+ Стр.НППлан;
		Иначе
			СуммаНал = СуммаНал+ Стр.НППлан;
		КонецЕсли;
	КонецЦикла;
	
	ИтогоПланНал = СуммаНал;
	ИтогоПланБезнал = СуммаБезнал;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКоличествоВозвратов()
	
	Возвраты = 0;
	КолФактОбщ = 0;
	КолПланОбщ = 0;
	Для Каждого ТекСтрока Из Объект.Заказы Цикл
		
		НайденныеСтроки = Объект.Грузы.НайтиСтроки(Новый Структура("ДокументДоставки", ТекСтрока.ДокументДоставки));
		КолвоФактГрузы = 0;
		КолвоПланГрузы = 0;
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для каждого Стр Из НайденныеСтроки Цикл
				
				КолвоФактГрузы = КолвоФактГрузы + Стр.КоличествоФакт;
				КолвоПланГрузы = КолвоПланГрузы + Стр.КоличествоПлан;
				
			КонецЦикла;
			
		КонецЕсли;
		Если Не ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.НеДоставлен") И Не ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Доставлен") И Не ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ВПути") И Не ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Назначен") Тогда
			//Возвраты = Возвраты + (Элем.КоличествоПлан - Элем.КоличествоФакт);
			//Возвраты = Возвраты + (КолвоПланГрузы - КолвоФактГрузы);
			 Возвраты = Возвраты + 1;
		КонецЕсли;
	КонецЦикла;
	объект.ES_Возвраты = Возвраты;
	
	//объект.ES_Возвраты = Объект.Грузы.Итог("КоличествоПлан") - Объект.Грузы.Итог("КоличествоФакт");
КонецПроцедуры


&НаКлиенте
Функция ЕстьЗаказВПути()
	
	ЕстьЗаказВПути = Ложь;
	
	Для каждого СтрЗаказ Из Объект.Заказы Цикл
		Если СтрЗаказ.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ВПути")
			ИЛИ СтрЗаказ.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаборов.ВПути")
		Тогда
			Сообщить("В строке " + СтрЗаказ.НомерСтроки + " не установлен статус");
			ЕстьЗаказВПути = Истина;
		КонецЕсли; 
	КонецЦикла; 

	Возврат ЕстьЗаказВПути;
	
КонецФункции
 
////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
Функция ПолучитьДанныеПодвалаПоВидамОплаты()
	
	мСтруктура = Новый Структура;
	
	Наличные    = 0;
	Безналичные = 0;
	НПФактНаличные    = 0;
	НПФактБезналичные = 0;
	Для Каждого Элем Из Объект.Заказы Цикл
		

		//Если Элем.ВидОплаты = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
		//	Безналичные = Безналичные + Элем.НПФакт + Элем.СтоимостьФакт;
		//Иначе
		//	Наличные = Наличные + Элем.НПФакт + Элем.СтоимостьФакт;
		//КонецЕсли;
		Если Элем.НПФактНал > 0 или Элем.СтоимостьФактНал  > 0 Тогда
		
			Наличные = Наличные + Элем.СтоимостьФактНал;
			НПФактНаличные = НПФактНаличные + Элем.НПФактНал;
            		
		КонецЕсли;
		
		Если Элем.НПФактБезнал > 0 или Элем.СтоимостьФактБезнал  > 0 Тогда 
		
			Безналичные = Безналичные + Элем.СтоимостьФактБезнал;
			НПФактБезналичные = НПФактБезналичные + Элем.НПФактБезнал;
		
		КонецЕсли;

	КонецЦикла;
	
	мСтруктура.Вставить("Наличные",Наличные);
	мСтруктура.Вставить("Безналичные",Безналичные);
	мСтруктура.Вставить("НПФактНаличные",НПФактНаличные);
	мСтруктура.Вставить("НПФактБезналичные",НПФактБезналичные);
		
	Возврат мСтруктура;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьИДоступностьЭлементовФормы()
	
	Если Объект.Проведен Тогда
		
		ОграничитьДоступ = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПоступлениеВКассу.Ссылка,
			|	ПоступлениеВКассу.ВидОперации,
			|	ПоступлениеВКассу.СуммаДокумента
			|ИЗ
			|	Документ.ПоступлениеВКассу КАК ПоступлениеВКассу
			|ГДЕ
			|	ПоступлениеВКассу.ДокументОснование = &ДокументОснование
			|	И ПоступлениеВКассу.Проведен
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПоступлениеНаСчет.Ссылка,
			|	ПоступлениеНаСчет.ВидОперации,
			|	ПоступлениеНаСчет.СуммаДокумента
			|ИЗ
			|	Документ.ПоступлениеНаСчет КАК ПоступлениеНаСчет
			|ГДЕ
			|	ПоступлениеНаСчет.ДокументОснование = &ДокументОснование
			|	И ПоступлениеНаСчет.Проведен";
		
		Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			КоличествоДокументов = 0;
			ОбщаяСуммаНП = 0;
			ОбщаяСуммаСтоимость = 0;
			СписокДокументов = "";
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				КоличествоДокументов = КоличествоДокументов + 1;
				СписокДокументов = СписокДокументов + Символы.ПС + Выборка.Ссылка;
				Если Выборка.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя
				 ИЛИ Выборка.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя Тогда
					ОбщаяСуммаСтоимость = ОбщаяСуммаСтоимость + Выборка.СуммаДокумента;
				ИначеЕсли Выборка.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ES_ПриемНаложенныхПлатежей Тогда
					ОбщаяСуммаНП = ОбщаяСуммаНП + Выборка.СуммаДокумента;
				КонецЕсли; 
			КонецЦикла;
			
			ТекстСообщения = "На основании Отчета созданы документы (" + КоличествоДокументов + ") на общие суммы НП факт " + Формат(ОбщаяСуммаНП, "ЧДЦ=2; ЧН=") + " и Стоимость факт " + Формат(ОбщаяСуммаСтоимость, "ЧДЦ=2; ЧН=") + ":";
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения + СписокДокументов;
			Сообщение.Сообщить(); 
			
			ОграничитьДоступ = Истина;
		КонецЕсли; 

		Если ОграничитьДоступ Тогда
			Элементы.ГруппаЛеваяКолонка.ТолькоПросмотр = Истина;
			Элементы.ГруппаДатаНомер.ТолькоПросмотр = Истина;
			Элементы.ЗаполнитьПоПлану.Доступность = Ложь;
			Элементы.Страницы.ТолькоПросмотр = Истина;
			Элементы.Подвал.ТолькоПросмотр = Истина;
			Элементы.ФормаГрупповоеИзменениеСтатусов.Доступность = Ложь;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если Объект.Заказы.НайтиСтроки(Новый Структура("СтатусЗаказа", Перечисления.ES_СтатусыЗаказов.НеДоставлен)).Количество() > 0 Тогда
	
		Элементы.ГруппаДатаНД.Видимость = Истина;
		
	КонецЕсли;

	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакиСозданияДокументовНаОснованииОтчета()
	
	СтруктураПризнаков = ES_ОбщегоНазначения.ПолучитьПризнакУчета(Объект.Ссылка);
	УчтеноНПФакт 	= СтруктураПризнаков.УчтеноНП;
	УчтеноСтоимость = СтруктураПризнаков.УчтеноСтоимость;
	СписаныЗапасы 	= СтруктураПризнаков.СписаныЗапасы;
	
	ES_ОбщегоНазначенияКлиентСервер.УстановитьКартинкуДляКнопки(Элементы.ФормаНПФактНал, УчтеноНПФакт);
	ES_ОбщегоНазначенияКлиентСервер.УстановитьКартинкуДляКнопки(Элементы.ФормаСтоимостьНал, УчтеноСтоимость);
	ES_ОбщегоНазначенияКлиентСервер.УстановитьКартинкуДляКнопки(Элементы.ФормаСписатьЗапасы, СписаныЗапасы);
	
КонецПроцедуры
 
&НаСервере
Функция ПолучитьОтчетОДоставкеНаОснованииПланаДоставки(ТекПланДоставки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ES_ОтчетОДоставке.Ссылка
		|ИЗ
		|	Документ.ES_ОтчетОДоставке КАК ES_ОтчетОДоставке
		|ГДЕ
		|	ES_ОтчетОДоставке.ПланДоставки = &ПланДоставки
		|	И ES_ОтчетОДоставке.Проведен
		|	И НЕ ES_ОтчетОДоставке.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("ПланДоставки", ТекПланДоставки);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;

	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции
 
&НаСервере
Процедура ЗаполнитьИсполнителяПоПлануДоставки(ПланДоставки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ES_ПланДоставки.Курьер,
		|	ES_ПланДоставки.Подрядчик,
		|	ES_ПланДоставки.Перевозчик
		|ИЗ
		|	Документ.ES_ПланДоставки КАК ES_ПланДоставки
		|ГДЕ
		|	ES_ПланДоставки.Ссылка = &ПланДоставки";

	Запрос.УстановитьПараметр("ПланДоставки", ПланДоставки);

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Объект.Курьер = ВыборкаДетальныеЗаписи.Курьер;
			Объект.Подрядчик = ВыборкаДетальныеЗаписи.Подрядчик;
			Объект.Перевозчик = ВыборкаДетальныеЗаписи.Перевозчик;
		КонецЦикла;
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиИзПланаДоставкиНаСервере()
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	ОбъектНаСервере.ЗаполнитьДаннымиИзПланаДоставки(Объект.ПланДоставки);
	ЗначениеВРеквизитФормы(ОбъектНаСервере, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЗказовИзПланаНаСервере()
	
	// Формирование массива заказов, которые уже есть в Отчете
	МассивЗаказов = Новый Массив;
	Для каждого Стр Из Объект.Заказы Цикл
		МассивЗаказов.Добавить(Стр.ДокументДоставки);
	КонецЦикла; 
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	СтруктураМассивов = ОбъектНаСервере.ЗаполнитьДаннымиИзПланаДоставки(Объект.ПланДоставки, МассивЗаказов);
	ЗначениеВРеквизитФормы(ОбъектНаСервере, "Объект");
	
	// Заказы на удаление
	Для каждого СтрЗаказ Из СтруктураМассивов.ЗаказыНаУдаление Цикл
		
		// Удаление Заказа
		НайденныеЗаказы = Объект.Заказы.НайтиСтроки(Новый Структура("ДокументДоставки", СтрЗаказ));
		Если НайденныеЗаказы.Количество() > 0 Тогда
			Сообщить("" + НайденныеЗаказы[0].ДокументДоставки + " был удален из Плана. Последний статус заказа: " + НайденныеЗаказы[0].СтатусЗаказа);
			Объект.Заказы.Удалить(НайденныеЗаказы[0]);
		КонецЕсли;
		
		// Удаление груза Места
		НайденныеМеста = Объект.СписокГрузов.НайтиСтроки(Новый Структура("ДокументДоставки", СтрЗаказ));
		Если НайденныеМеста.Количество() > 0 Тогда
			Для каждого СтрОбъект Из НайденныеМеста Цикл
				Объект.СписокГрузов.Удалить(СтрОбъект);
			КонецЦикла; 
		КонецЕсли; 
		
		// Удаление груза Запасы
		НайденныеЗапасы = Объект.Грузы.НайтиСтроки(Новый Структура("ДокументДоставки", СтрЗаказ));
		Если НайденныеЗапасы.Количество() > 0 Тогда
			Для каждого СтрНом Из НайденныеЗапасы Цикл
				Объект.Грузы.Удалить(СтрНом);
			КонецЦикла; 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Групповое создание документов Поступление в кассу:
// - один документ создается на одного контрагента (отправителя)
// - документ основание - док Отчет о доставке
// - сумма документа состоит из суммы наложенных платежей грузов (ТЧ Грузы) нал
&НаСервереБезКонтекста
Функция СоздатьДокументыНПФакт(ДокументОснование)
	
	МассивДокументов = Новый Массив;

	Организация 		= ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Организация);
	НалогообложениеНДС 	= УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Организация, , ТекущаяДата());
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Дата", 					ТекущаяДата());
	Запрос.УстановитьПараметр("ДокументОснование", 		ДокументОснование);
	Запрос.УстановитьПараметр("ОрганизацияДоставки", 	Организация);
	Запрос.УстановитьПараметр("КонстантаВалютаУчета", 	Константы.ВалютаУчета.Получить());
	Запрос.УстановитьПараметр("РозничныйПолучатель", 	ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.РозничныйПокупатель));
	Запрос.УстановитьПараметр("ПлательщикПолучатель", 	Перечисления.ES_ТипыПлательщиков.Получатель);
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Перечисления.ES_СтатусыЗаказов.Доставлен);
	МассивСтатусов.Добавить(Перечисления.ES_СтатусыЗаказов.ЧастичноДоставлен);
	Запрос.УстановитьПараметр("МассивСтатусов", 		МассивСтатусов);
	
	Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ES_ОтчетОДоставкеЗаказы.ДокументДоставки КАК Заказ,
			|	ES_ОтчетОДоставкеЗаказы.НПФакт КАК НаложенныйПоГрузам,
			|	ES_ОтчетОДоставкеЗаказы.КассаНП,
			|	ES_ОтчетОДоставкеЗаказы.НПФактНал КАК НаложенныйПоГрузамНаличными,
			|	ES_ОтчетОДоставкеЗаказы.НПФактБезнал КАК НаложенныйПоГрузамБезналичный,
			|	ES_ОтчетОДоставкеЗаказы.Касса КАК КассаНаличные,
			|	ES_ОтчетОДоставкеЗаказы.Счет КАК СчетБезналичные,
			|	ES_ОтчетОДоставкеЗаказы.УслугиПартнера
			|ПОМЕСТИТЬ ВТ_Заказы
			|ИЗ
			|	Документ.ES_ОтчетОДоставке.Заказы КАК ES_ОтчетОДоставкеЗаказы
			|ГДЕ
			|	ES_ОтчетОДоставкеЗаказы.Ссылка = &ДокументОснование
			|	И ES_ОтчетОДоставкеЗаказы.ДокументДоставки ССЫЛКА Документ.ЗаказПокупателя
			|	И ES_ОтчетОДоставкеЗаказы.СтатусЗаказа В(&МассивСтатусов)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВТ_Заказы.Заказ,
			|	ВЫБОР
			|		КОГДА ES_ДанныеПоЗаказамСрезПоследних.Заказчик = &РозничныйПолучатель
			|				И ES_ДанныеПоЗаказамСрезПоследних.Плательщик = &ПлательщикПолучатель
			|			ТОГДА ES_ДанныеПоЗаказамСрезПоследних.СправочноЗаказчик
			|		ИНАЧЕ ES_ДанныеПоЗаказамСрезПоследних.Заказчик
			|	КОНЕЦ КАК Заказчик,
			|	ВТ_Заказы.НаложенныйПоГрузам,
			|	ВТ_Заказы.КассаНП,
			|	ВТ_Заказы.НаложенныйПоГрузамНаличными,
			|	ВТ_Заказы.НаложенныйПоГрузамБезналичный,
			|	ВТ_Заказы.КассаНаличные,
			|	ВТ_Заказы.СчетБезналичные,
			|	ВТ_Заказы.УслугиПартнера
			|ПОМЕСТИТЬ ВТ_Данные
			|ИЗ
			|	ВТ_Заказы КАК ВТ_Заказы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(
			|				,
			|				Заказ В
			|					(ВЫБРАТЬ
			|						ВТ_Заказы.Заказ
			|					ИЗ
			|						ВТ_Заказы КАК ВТ_Заказы)) КАК ES_ДанныеПоЗаказамСрезПоследних
			|		ПО ВТ_Заказы.Заказ = ES_ДанныеПоЗаказамСрезПоследних.Заказ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВКассу.ES_ПриемНаложенныхПлатежей) КАК ВидОперации,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеНаСчет.ES_ПриемНаложенныхПлатежей) КАК ВидОперацииБезнал,
			|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ES_ПоступлениеНаложенныхПлатежей) КАК Статья,
			|	&ДокументОснование КАК ДокументОснование,
			|	&ОрганизацияДоставки КАК Организация,
			|	ВТ_Данные.КассаНП КАК Касса,
			|	&КонстантаВалютаУчета КАК ВалютаДенежныхСредств,
			|	КурсыВалютУчета.Курс КАК Курс,
			|	КурсыВалютУчета.Кратность КАК Кратность,
			|	ЕСТЬNULL(ВТ_Данные.Заказчик.ДоговорПоУмолчанию, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Договор,
			|	ВТ_Данные.Заказ,
			|	ВТ_Данные.Заказчик,
			|	ВТ_Данные.НаложенныйПоГрузам,
			|	ВТ_Данные.НаложенныйПоГрузамНаличными,
			|	ВТ_Данные.НаложенныйПоГрузамБезналичный,
			|	ВТ_Данные.КассаНаличные,
			|	ВТ_Данные.СчетБезналичные,
			|	ВТ_Данные.УслугиПартнера
			|ПОМЕСТИТЬ ВТ_Док
			|ИЗ
			|	ВТ_Данные КАК ВТ_Данные
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &КонстантаВалютаУчета) КАК КурсыВалютУчета
			|		ПО (ИСТИНА)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВТ_Док.Заказчик КАК Контрагент,
			|	ВТ_Док.Договор,
			|	ВТ_Док.ВидОперации,
			|	ВТ_Док.Статья,
			|	ВТ_Док.ДокументОснование,
			|	ВТ_Док.Заказ,
			|	ВТ_Док.Организация,
			|	ВТ_Док.Касса,
			|	ВТ_Док.ВалютаДенежныхСредств,
			|	ВТ_Док.Курс,
			|	ВТ_Док.Кратность,
			|	ВТ_Док.НаложенныйПоГрузам КАК СуммаДокумента,
			|	ВТ_Док.НаложенныйПоГрузам КАК СуммаПлатежа,
			|	ВЫРАЗИТЬ(ВТ_Док.НаложенныйПоГрузам * ВТ_Док.Курс * 1 / (1 * ЕСТЬNULL(ВТ_Док.Кратность, 1)) КАК ЧИСЛО(15, 2)) КАК СуммаРасчетов,
			|	ВТ_Док.НаложенныйПоГрузамНаличными КАК СуммаДокументаНаличными,
			|	ВТ_Док.НаложенныйПоГрузамНаличными КАК СуммаПлатежаНаличными,
			|	ВЫРАЗИТЬ(ВТ_Док.НаложенныйПоГрузамНаличными * ВТ_Док.Курс * 1 / (1 * ЕСТЬNULL(ВТ_Док.Кратность, 1)) КАК ЧИСЛО(15, 2)) КАК СуммаРасчетовНаличными,
			|	ВТ_Док.НаложенныйПоГрузамБезналичный КАК СуммаДокументаБезналичный,
			|	ВТ_Док.НаложенныйПоГрузамБезналичный КАК СуммаПлатежаБезналичный,
			|	ВЫРАЗИТЬ(ВТ_Док.НаложенныйПоГрузамБезналичный * ВТ_Док.Курс * 1 / (1 * ЕСТЬNULL(ВТ_Док.Кратность, 1)) КАК ЧИСЛО(15, 2)) КАК СуммаРасчетовБезналичный,
			|	ВТ_Док.КассаНаличные,
			|	ВТ_Док.ВидОперацииБезнал,
			|	ВТ_Док.СчетБезналичные,
			|	ВТ_Док.УслугиПартнера
			|ПОМЕСТИТЬ ВТ_ВсеПлатежи
			|ИЗ
			|	ВТ_Док КАК ВТ_Док
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВТ_ВсеПлатежи.Контрагент,
			|	ВТ_ВсеПлатежи.Договор,
			|	ВТ_ВсеПлатежи.ВидОперации,
			|	ВТ_ВсеПлатежи.Статья,
			|	ВТ_ВсеПлатежи.ДокументОснование,
			|	ВТ_ВсеПлатежи.Заказ,
			|	ВТ_ВсеПлатежи.Организация,
			|	ВТ_ВсеПлатежи.ВалютаДенежныхСредств,
			|	ВТ_ВсеПлатежи.Курс,
			|	ВТ_ВсеПлатежи.Кратность,
			|	ВТ_ВсеПлатежи.СуммаДокументаНаличными КАК СуммаДокумента,
			|	ВТ_ВсеПлатежи.СуммаПлатежаНаличными КАК СуммаПлатежа,
			|	ВТ_ВсеПлатежи.СуммаРасчетовНаличными КАК СуммаРасчетов,
			|	ВТ_ВсеПлатежи.КассаНаличные КАК Касса,
			|	ВТ_ВсеПлатежи.УслугиПартнера
			|ИЗ
			|	ВТ_ВсеПлатежи КАК ВТ_ВсеПлатежи
			|ГДЕ
			|	ВТ_ВсеПлатежи.СуммаДокументаНаличными > 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВТ_ВсеПлатежи.Контрагент,
			|	ВТ_ВсеПлатежи.Договор,
			|	ВТ_ВсеПлатежи.Статья,
			|	ВТ_ВсеПлатежи.ДокументОснование,
			|	ВТ_ВсеПлатежи.Заказ,
			|	ВТ_ВсеПлатежи.Организация,
			|	ВТ_ВсеПлатежи.ВалютаДенежныхСредств,
			|	ВТ_ВсеПлатежи.Курс,
			|	ВТ_ВсеПлатежи.Кратность,
			|	ВТ_ВсеПлатежи.СуммаДокументаБезналичный КАК СуммаДокумента,
			|	ВТ_ВсеПлатежи.СуммаПлатежаБезналичный КАК СуммаПлатежа,
			|	ВТ_ВсеПлатежи.СуммаРасчетовБезналичный КАК СуммаРасчетов,
			|	ВТ_ВсеПлатежи.ВидОперацииБезнал КАК ВидОперации,
			|	ВТ_ВсеПлатежи.СчетБезналичные КАК БанковскийСчет,
			|	ВТ_ВсеПлатежи.УслугиПартнера
			|ИЗ
			|	ВТ_ВсеПлатежи КАК ВТ_ВсеПлатежи
			|ГДЕ
			|	ВТ_ВсеПлатежи.СуммаДокументаБезналичный > 0";
			
	//РезультатЗапроса = Запрос.Выполнить(); //
	РезультатЗапроса = Запрос.ВыполнитьПакет()[4];//.Выгрузить()
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			
			// Новый документ
			НовыйДокумент = Документы.ПоступлениеВКассу.СоздатьДокумент();
			
			НовыйДокумент.Дата 					= ТекущаяДата();
			НовыйДокумент.Автор 				= Пользователи.ТекущийПользователь();
			НовыйДокумент.ПринятоОт 			= ВыборкаДетальныеЗаписи.Контрагент;
			НовыйДокумент.НалогообложениеНДС 	= НалогообложениеНДС;
			НовыйДокумент.ES_Заказ 				= ВыборкаДетальныеЗаписи.Заказ;
			ЗаполнитьЗначенияСвойств(НовыйДокумент, ВыборкаДетальныеЗаписи);
			
			НоваяСтрока = НовыйДокумент.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			
			Попытка
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				НовыйДокумент.Записать();
			КонецПопытки; 
			
			// Сообщить о создании нового документа
			МассивДокументов.Добавить(НовыйДокумент.Ссылка);
			
		КонецЦикла;
		
	Иначе
		Сообщить("Нет НП для поступления в кассу", СтатусСообщения.Внимание);
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.ВыполнитьПакет()[5];//.Выгрузить()
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			
			// Новый документ
			НовыйДокумент = Документы.ПоступлениеНаСчет.СоздатьДокумент();
			
			НовыйДокумент.Дата 					= ТекущаяДата();
			НовыйДокумент.Автор 				= Пользователи.ТекущийПользователь();
			//НовыйДокумент.ПринятоОт 			= ВыборкаДетальныеЗаписи.Контрагент;
			НовыйДокумент.НалогообложениеНДС 	= НалогообложениеНДС;
			НовыйДокумент.ES_Заказ 				= ВыборкаДетальныеЗаписи.Заказ;
			ЗаполнитьЗначенияСвойств(НовыйДокумент, ВыборкаДетальныеЗаписи);
			
			НоваяСтрока = НовыйДокумент.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			
			Попытка
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				НовыйДокумент.Записать();
			КонецПопытки; 
			
			// Сообщить о создании нового документа
			МассивДокументов.Добавить(НовыйДокумент.Ссылка);
			
		КонецЦикла;
		
	Иначе
		Сообщить("Нет НП для поступления на счет", СтатусСообщения.Внимание);
	КонецЕсли; 

	
	Возврат МассивДокументов;
		
КонецФункции

// Групповое создание документов Поступление в кассу:
// - один документ создается на одного контрагента (отправителя)
// - документ основание - док Заказ о доставке
// - сумма документа ПКО состоит из суммы Оплаты за доставку нал
&НаСервереБезКонтекста
Функция СоздатьДокументыСтоимость(ДокументОснование)
	
	МассивДокументов = Новый Массив;

	Организация 			= ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Организация);
	НалогообложениеНДС 		= УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Организация, , ТекущаяДата());
	СтавкаНДСПоУмолчанию 	= Организация.СтавкаНДСПоУмолчанию;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата", 					ТекущаяДата());
	Запрос.УстановитьПараметр("ДокументОснование", 		ДокументОснование);
	Запрос.УстановитьПараметр("ОрганизацияДоставки", 	Организация);
	Запрос.УстановитьПараметр("КонстантаВалютаУчета", 	Константы.ВалютаУчета.Получить());
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Перечисления.ES_СтатусыЗаказов.Доставлен);
	МассивСтатусов.Добавить(Перечисления.ES_СтатусыЗаказов.ЧастичноДоставлен);
	Запрос.УстановитьПараметр("МассивСтатусов", 		МассивСтатусов);
		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_ОтчетОДоставкеЗаказы.ДокументДоставки,
	|	ES_ОтчетОДоставкеЗаказы.СтоимостьФакт КАК СуммаОплаты,
	|	ES_ОтчетОДоставкеЗаказы.КассаСтоимость,
	|	ES_ОтчетОДоставкеЗаказы.СтоимостьФактНал КАК СуммаОплатыНаличными,
	|	ES_ОтчетОДоставкеЗаказы.СтоимостьФактБезнал КАК СуммаОплатыБезналичный,
	|	ES_ОтчетОДоставкеЗаказы.Касса КАК КассаНаличные,
	|	ES_ОтчетОДоставкеЗаказы.Счет КАК СчетБезналичные
	|ПОМЕСТИТЬ ВТ_ДанныеДок
	|ИЗ
	|	Документ.ES_ОтчетОДоставке.Заказы КАК ES_ОтчетОДоставкеЗаказы
	|ГДЕ
	|	ES_ОтчетОДоставкеЗаказы.Ссылка = &ДокументОснование
	|	И ES_ОтчетОДоставкеЗаказы.ДокументДоставки ССЫЛКА Документ.ЗаказПокупателя
	|	И ES_ОтчетОДоставкеЗаказы.СтатусЗаказа В(&МассивСтатусов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_ДанныеПоЗаказамСрезПоследних.Заказ,
	|	ES_ДанныеПоЗаказамСрезПоследних.Заказчик
	|ПОМЕСТИТЬ ВТ_Заказы
	|ИЗ
	|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(
	|			,
	|			Заказ В
	|				(ВЫБРАТЬ
	|					ВТ_ДанныеДок.ДокументДоставки
	|				ИЗ
	|					ВТ_ДанныеДок КАК ВТ_ДанныеДок)) КАК ES_ДанныеПоЗаказамСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВКассу.ОтПокупателя) КАК ВидОперации,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеНаСчет.ОтПокупателя) КАК ВидОперацииНаСчет,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей) КАК Статья,
	|	&ОрганизацияДоставки КАК Организация,
	|	ВТ_ДанныеДок.КассаСтоимость КАК Касса,
	|	&КонстантаВалютаУчета КАК ВалютаДенежныхСредств,
	|	КурсыВалютУчета.Курс КАК Курс,
	|	КурсыВалютУчета.Кратность КАК Кратность,
	|	ВТ_ДанныеДок.ДокументДоставки,
	|	ВТ_Заказы.Заказчик,
	|	ЕСТЬNULL(ВТ_Заказы.Заказчик.ДоговорПоУмолчанию, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Договор,
	|	ВТ_ДанныеДок.СуммаОплаты,
	|	ВТ_ДанныеДок.СуммаОплатыНаличными,
	|	ВТ_ДанныеДок.СуммаОплатыБезналичный,
	|	ВТ_ДанныеДок.КассаНаличные,
	|	ВТ_ДанныеДок.СчетБезналичные
	|ПОМЕСТИТЬ ВТ_Док
	|ИЗ
	|	ВТ_ДанныеДок КАК ВТ_ДанныеДок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &КонстантаВалютаУчета) КАК КурсыВалютУчета
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Заказы КАК ВТ_Заказы
	|		ПО ВТ_ДанныеДок.ДокументДоставки = ВТ_Заказы.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Док.ДокументДоставки КАК Заказ,
	|	ВТ_Док.Заказчик КАК Контрагент,
	|	ВТ_Док.Договор,
	|	ВТ_Док.ВидОперации,
	|	ВТ_Док.Статья,
	|	ВТ_Док.Организация,
	|	ВТ_Док.Касса,
	|	ВТ_Док.ВалютаДенежныхСредств,
	|	ВТ_Док.Курс,
	|	ВТ_Док.Кратность,
	|	ВТ_Док.СуммаОплаты КАК СуммаДокумента,
	|	ВТ_Док.СуммаОплаты КАК СуммаПлатежа,
	|	ВЫРАЗИТЬ(ВТ_Док.СуммаОплаты * ВТ_Док.Курс * 1 / (1 * ЕСТЬNULL(ВТ_Док.Кратность, 1)) КАК ЧИСЛО(15, 2)) КАК СуммаРасчетов,
	|	ВТ_Док.ВидОперацииНаСчет,
	|	ВТ_Док.СуммаОплатыНаличными КАК СуммаДокументаНал,
	|	ВТ_Док.СуммаОплатыНаличными,
	|	ВТ_Док.СуммаОплатыНаличными КАК СуммаПлатежаНал,
	|	ВЫРАЗИТЬ(ВТ_Док.СуммаОплатыНаличными * ВТ_Док.Курс * 1 / (1 * ЕСТЬNULL(ВТ_Док.Кратность, 1)) КАК ЧИСЛО(15, 2)) КАК СуммаРасчетовНал,
	|	ВТ_Док.СуммаОплатыБезналичный КАК СуммаДокументаБезНал,
	|	ВТ_Док.СуммаОплатыБезналичный,
	|	ВТ_Док.СуммаОплатыБезналичный КАК СуммаПлатежаБезНал,
	|	ВЫРАЗИТЬ(ВТ_Док.СуммаОплатыБезналичный * ВТ_Док.Курс * 1 / (1 * ЕСТЬNULL(ВТ_Док.Кратность, 1)) КАК ЧИСЛО(15, 2)) КАК СуммаРасчетовБезНал,
	|	ВТ_Док.КассаНаличные,
	|	ВТ_Док.СчетБезналичные
	|ПОМЕСТИТЬ ВТ_ОснДанные
	|ИЗ
	|	ВТ_Док КАК ВТ_Док
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ОснДанные.Заказ,
	|	ВТ_ОснДанные.Контрагент,
	|	ВТ_ОснДанные.Договор,
	|	ВТ_ОснДанные.ВидОперации,
	|	ВТ_ОснДанные.Статья,
	|	ВТ_ОснДанные.Организация,
	|	ВТ_ОснДанные.ВалютаДенежныхСредств,
	|	ВТ_ОснДанные.Курс,
	|	ВТ_ОснДанные.Кратность,
	|	ВТ_ОснДанные.СуммаДокументаНал КАК СуммаДокумента,
	|	ВТ_ОснДанные.СуммаОплатыНаличными КАК СуммаОплаты,
	|	ВТ_ОснДанные.СуммаПлатежаНал КАК СуммаПлатежа,
	|	ВТ_ОснДанные.СуммаРасчетовНал КАК СуммаРасчетов,
	|	ВТ_ОснДанные.КассаНаличные КАК Касса
	|ИЗ
	|	ВТ_ОснДанные КАК ВТ_ОснДанные
	|ГДЕ
	|	ВТ_ОснДанные.СуммаДокументаНал > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ОснДанные.Заказ,
	|	ВТ_ОснДанные.Контрагент,
	|	ВТ_ОснДанные.Договор,
	|	ВТ_ОснДанные.Статья,
	|	ВТ_ОснДанные.Организация,
	|	ВТ_ОснДанные.ВалютаДенежныхСредств,
	|	ВТ_ОснДанные.Курс,
	|	ВТ_ОснДанные.Кратность,
	|	ВТ_ОснДанные.ВидОперацииНаСчет КАК ВидОперации,
	|	ВТ_ОснДанные.СуммаДокументаБезНал КАК СуммаДокумента,
	|	ВТ_ОснДанные.СуммаОплатыБезналичный КАК СуммаОплаты,
	|	ВТ_ОснДанные.СуммаПлатежаБезНал КАК СуммаПлатежа,
	|	ВТ_ОснДанные.СуммаРасчетовБезНал КАК СуммаРасчетов,
	|	ВТ_ОснДанные.СчетБезналичные КАК БанковскийСчет
	|ИЗ
	|	ВТ_ОснДанные КАК ВТ_ОснДанные
	|ГДЕ
	|	ВТ_ОснДанные.СуммаДокументаБезНал > 0";
	
	//РезультатЗапроса = Запрос.Выполнить();
	РезультатЗапроса = Запрос.ВыполнитьПакет()[4];
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			
			// Новый документ
			НовыйДокумент = Документы.ПоступлениеВКассу.СоздатьДокумент();
			
			НовыйДокумент.Дата 					= ТекущаяДата();
			НовыйДокумент.ДокументОснование 	= ДокументОснование;
			НовыйДокумент.Автор 				= Пользователи.ТекущийПользователь();
			НовыйДокумент.ПринятоОт 			= ВыборкаДетальныеЗаписи.Контрагент;
			НовыйДокумент.НалогообложениеНДС 	= НалогообложениеНДС;
			ЗаполнитьЗначенияСвойств(НовыйДокумент, ВыборкаДетальныеЗаписи);
			
			НоваяСтрока = НовыйДокумент.РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Заказ 			= ВыборкаДетальныеЗаписи.Заказ;
			НоваяСтрока.СтавкаНДС 		= СтавкаНДСПоУмолчанию;
			НоваяСтрока.ПризнакАванса 	= Истина;
			
			Ставка = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
			НоваяСтрока.СуммаНДС = ВыборкаДетальныеЗаписи.СуммаПлатежа - (ВыборкаДетальныеЗаписи.СуммаПлатежа) / ((Ставка + 100) / 100);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			
			Попытка
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				НовыйДокумент.Записать();
			КонецПопытки; 
			
			// Сообщить о создании нового документа
			МассивДокументов.Добавить(НовыйДокумент.Ссылка);
		КонецЦикла;

	Иначе

		Сообщить("Нет суммы для поступления в кассу", СтатусСообщения.Внимание);

	КонецЕсли; 
	
	РезультатЗапроса = Запрос.ВыполнитьПакет()[5];//.Выгрузить()
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			
			// Новый документ
			НовыйДокумент = Документы.ПоступлениеНаСчет.СоздатьДокумент();
			
			НовыйДокумент.Дата 					= ТекущаяДата();
			НовыйДокумент.ДокументОснование 	= ДокументОснование;
			НовыйДокумент.Автор 				= Пользователи.ТекущийПользователь();
			//НовыйДокумент.ПринятоОт 			= ВыборкаДетальныеЗаписи.Контрагент;
			НовыйДокумент.НалогообложениеНДС 	= НалогообложениеНДС;
			НовыйДокумент.ES_Заказ 				= ВыборкаДетальныеЗаписи.Заказ;
			ЗаполнитьЗначенияСвойств(НовыйДокумент, ВыборкаДетальныеЗаписи);
			
			НоваяСтрока = НовыйДокумент.РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Заказ 			= ВыборкаДетальныеЗаписи.Заказ;
			НоваяСтрока.СтавкаНДС 		= СтавкаНДСПоУмолчанию;
			НоваяСтрока.ПризнакАванса 	= Истина;
			
			Ставка = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
			НоваяСтрока.СуммаНДС = ВыборкаДетальныеЗаписи.СуммаПлатежа - (ВыборкаДетальныеЗаписи.СуммаПлатежа) / ((Ставка + 100) / 100);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);

			Попытка
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				НовыйДокумент.Записать();
			КонецПопытки; 
			
			// Сообщить о создании нового документа
			МассивДокументов.Добавить(НовыйДокумент.Ссылка);
			
		КонецЦикла;
		
	Иначе
		Сообщить("Нет суммы для поступления на счет", СтатусСообщения.Внимание);
	КонецЕсли; 

	
	Возврат МассивДокументов;
	

КонецФункции

//EFSOL_Прилуцкий_Владислав_18.03.2015 9:34:46_{

// Процедура создает документы Расходная накладная
&НаСервереБезКонтекста
Функция СписатьТоварыНаСервере(ДокументОснование)
	МассивДокументов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтчетОДоставке", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_ОтчетОДоставкеЗаказы.Ссылка,
	|	ES_ОтчетОДоставкеЗаказы.ДокументДоставки,
	|	ES_ОтчетОДоставкеЗаказы.Заказчик,
	|	ES_ОтчетОДоставкеЗаказы.Договор
	|ПОМЕСТИТЬ ВТ_Заказ
	|ИЗ
	|	Документ.ES_ОтчетОДоставке.Заказы КАК ES_ОтчетОДоставкеЗаказы
	|ГДЕ
	|	ES_ОтчетОДоставкеЗаказы.Ссылка = &ОтчетОДоставке
	|	И ES_ОтчетОДоставкеЗаказы.ДокументДоставки ССЫЛКА Документ.ЗаказПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Заказ.Заказчик КАК Контрагент,
	|	ВТ_Заказ.Договор КАК Договор,
	|	ES_ОтчетОДоставкеГрузы.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ES_ОтчетОДоставкеГрузы.ТипНоменклатурыЗапас) КАК ТипНоменклатурыЗапас,
	|	ES_ОтчетОДоставкеГрузы.Характеристика,
	|	ES_ОтчетОДоставкеГрузы.Партия,
	|	СУММА(ES_ОтчетОДоставкеГрузы.КоличествоФакт) КАК КоличествоФакт,
	|	ES_ОтчетОДоставкеГрузы.ЕдиницаИзмерения,
	|	ES_ОтчетОДоставкеГрузы.Цена,
	|	ES_ОтчетОДоставкеГрузы.ПроцентСкидкиНаценки,
	|	СУММА(ES_ОтчетОДоставкеГрузы.НПФакт) КАК НПФакт,
	|	ES_ОтчетОДоставкеГрузы.Номенклатура.СтавкаНДС,
	|	ES_ОтчетОДоставкеГрузы.Содержание
	|ИЗ
	|	ВТ_Заказ КАК ВТ_Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ES_ОтчетОДоставке.Грузы КАК ES_ОтчетОДоставкеГрузы
	|		ПО ВТ_Заказ.ДокументДоставки = ES_ОтчетОДоставкеГрузы.ДокументДоставки
	|ГДЕ
	|	ES_ОтчетОДоставкеГрузы.КоличествоФакт > 0
	|	И ES_ОтчетОДоставкеГрузы.Ссылка = &ОтчетОДоставке
	|	И ES_ОтчетОДоставкеГрузы.ТипНоменклатурыЗапас
	|
	|СГРУППИРОВАТЬ ПО
	|	ES_ОтчетОДоставкеГрузы.Номенклатура,
	|	ES_ОтчетОДоставкеГрузы.Характеристика,
	|	ES_ОтчетОДоставкеГрузы.ЕдиницаИзмерения,
	|	ES_ОтчетОДоставкеГрузы.Цена,
	|	ES_ОтчетОДоставкеГрузы.Номенклатура.СтавкаНДС,
	|	ВТ_Заказ.Договор,
	|	ВТ_Заказ.Заказчик,
	|	ES_ОтчетОДоставкеГрузы.Партия,
	|	ES_ОтчетОДоставкеГрузы.ПроцентСкидкиНаценки,
	|	ES_ОтчетОДоставкеГрузы.Содержание
	|ИТОГИ ПО
	|	Контрагент,
	|	Договор";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда	
		Склад = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойСклад");
		Если НЕ ЗначениеЗаполнено(Склад)  Тогда
			Склад = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;	
		КонецЕсли;
		
		Организация 		= ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Организация);
		НалогообложениеНДС 	= УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Организация, , ТекущаяДата());
		ДокКомментарий 		= "Создан автоматически";
		
		ВыборкаКонтрагент = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКонтрагент.Следующий() Цикл
			ВыборкаДоговор = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДоговор.Следующий() Цикл
				ВыборкаДетальныеЗаписи = ВыборкаДоговор.Выбрать();

				// Новый документ
				НовыйДокумент = Документы.РасходнаяНакладная.СоздатьДокумент();
				НовыйДокумент.Дата 				 = ТекущаяДата();
				НовыйДокумент.Автор 			 = Пользователи.ТекущийПользователь();
				НовыйДокумент.НалогообложениеНДС = НалогообложениеНДС;
				НовыйДокумент.ДокументОснование  = ДокументОснование;
				НовыйДокумент.Контрагент         = ВыборкаДоговор.Контрагент;
				НовыйДокумент.Договор            = ВыборкаДоговор.Договор;
				НовыйДокумент.ВидОперации        = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратСОтветхранения;
				НовыйДокумент.Организация        = Организация;	
				НовыйДокумент.СтруктурнаяЕдиница = Склад;
				
				НовыйДокумент.ВалютаДокумента 	= ВыборкаДоговор.Договор.ВалютаРасчетов;
				ВалютаРасчетовКурсКратность 	= РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекущаяДата(), Новый Структура("Валюта", ВыборкаДоговор.Договор.ВалютаРасчетов));
				НовыйДокумент.Курс      		= ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
				НовыйДокумент.Кратность 		= ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1, ВалютаРасчетовКурсКратность.Кратность);
				НовыйДокумент.Комментарий 		= ДокКомментарий;

				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					НоваяСтрока = НовыйДокумент.Запасы.Добавить();
					НоваяСтрока.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
					
					ТипНоменклатурыЗапас = ВыборкаДетальныеЗаписи.ТипНоменклатурыЗапас;
					Если НЕ ЗначениеЗаполнено(ТипНоменклатурыЗапас) Тогда
						ТипНоменклатурыЗапас = (НоваяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас);
					КонецЕсли; 
					НоваяСтрока.ТипНоменклатурыЗапас = ТипНоменклатурыЗапас;
					
					Если ВыборкаДетальныеЗаписи.ЕдиницаИзмерения = Неопределено  Тогда
						НоваяСтрока.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
					Иначе
						НоваяСтрока.ЕдиницаИзмерения = ВыборкаДетальныеЗаписи.ЕдиницаИзмерения; 
					КонецЕсли;
					НоваяСтрока.Характеристика 	= ВыборкаДетальныеЗаписи.Характеристика;
					НоваяСтрока.Партия 			= ВыборкаДетальныеЗаписи.Партия;
					НоваяСтрока.Количество 		= ВыборкаДетальныеЗаписи.КоличествоФакт;
					НоваяСтрока.СтавкаНДС 		= ВыборкаДетальныеЗаписи.Номенклатура.СтавкаНДС;
					НоваяСтрока.Цена 			= ВыборкаДетальныеЗаписи.Цена;
					НоваяСтрока.Сумма 			= ВыборкаДетальныеЗаписи.Цена * ВыборкаДетальныеЗаписи.КоличествоФакт;
					НоваяСтрока.Всего 			= НоваяСтрока.Сумма;
				КонецЦикла;
				
				Попытка
					НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
					// Сообщить о создании нового документа
					МассивДокументов.Добавить(НовыйДокумент.Ссылка);
				Исключение
					НовыйДокумент.Записать();
				    Сообщить(НСтр("ru= 'Не удалось провести Расходную накладную'"), СтатусСообщения.Важное);
				КонецПопытки;
			КонецЦикла;		
		КонецЦикла;

	Иначе

		Сообщить("Нет запасов для списания", СтатусСообщения.Внимание);

	КонецЕсли;
		
	Возврат МассивДокументов;

КонецФункции

&НаСервере
Функция УстановитьСостояниеЗаказовНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ES_ОтчетОДоставкеЗаказы.ДокументДоставки КАК ДокументДоставки
		|ИЗ
		|	Документ.ES_ОтчетОДоставке.Заказы КАК ES_ОтчетОДоставкеЗаказы
		|ГДЕ
		|	ES_ОтчетОДоставкеЗаказы.ДокументДоставки ССЫЛКА Документ.ЗаказПокупателя
		|	И ES_ОтчетОДоставкеЗаказы.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивЗаказовНаДоставку = Новый Массив;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивЗаказовНаДоставку.Добавить(ВыборкаДетальныеЗаписи.ДокументДоставки);
	КонецЦикла;
	
	Возврат МассивЗаказовНаДоставку;
	
КонецФункции
//EFSOL_Прилуцкий_Владислав_}

&НаСервереБезКонтекста
Функция ПолучитьСписокКассНПИзСтратовыхНастроек()
	
	СписокКасс = Новый СписокЗначений;
	СписокКасс.Добавить(ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.КассаНаложенныхПлатежей));
	СписокКасс.Добавить(ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ДопКассаНП));
	
	Возврат СписокКасс;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаборы()
	
	ЕстьЗабор = Ложь;
	Для каждого Стр Из Объект.Заказы Цикл
		Если ТипЗнч(Стр.ДокументДоставки) = Тип("ДокументСсылка.ES_ЗаборГруза") Тогда
			ЕстьЗабор = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьЗабор Тогда
		АвтоПриемЗаборов = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.АвтоПриемЗаборов);
		Если НЕ АвтоПриемЗаборов = Истина  Тогда
			Элементы.ФормаПринятьЗаборы.Видимость = Истина;
		Иначе 
			Элементы.ФормаПринятьЗаборы.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура РассчетСуммыНДС(СтрокаТабличнойЧасти)
	//EFSOL Сережко А.С.
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(СуммаВключаетНДС(СтрокаТабличнойЧасти.ДокументДоставки), 
	СтрокаТабличнойЧасти.НпПлан - (СтрокаТабличнойЧасти.НпПлан) / ((СтавкаНДС + 100) / 100),
	СтрокаТабличнойЧасти.НпПлан * СтавкаНДС / 100);
	
КонецПроцедуры // ПересчитатьСуммыДокумента() 

&НаСервереБезКонтекста
Функция СуммаВключаетНДС(Заказ)

	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Возврат Заказ.СуммаВключаетНДС;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // СуммаВключаетНДС()



// ОПОВЕЩЕНИЯ

&НаКлиенте
Процедура ОбработкаВопросаОчисткиТЧГрузы(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		// Ничего не делаем
	Иначе
		
		Объект.Заказы.Очистить();
		Объект.СписокГрузов.Очистить();
		Объект.Грузы.Очистить();
		
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗаполнитьКурьерИзПлана(Результат, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.ПланДоставки = Результат;
		ПланДоставкиПриИзменении(Элементы.ПланДоставки);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаОчисткиТЧПередЗаполнениемДаннымиПлана(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		// Ничего не делаем
	Иначе
		
		Объект.Заказы.Очистить();
		Объект.СписокГрузов.Очистить();
		Объект.Грузы.Очистить();
	
		ЗаполнитьДаннымиИзПланаДоставкиНаСервере();
		ПересчитатьДанныеПодвала();
		
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыВидОплатыПриИзменении(Элемент)
	ПересчитатьФактСтоимостьНП();
	УстановитьКассу();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКассу()
	
	ТекСтрока = Элементы.Заказы.ТекущиеДанные;
	Если ТипЗнч(ТекСтрока.ДокументДоставки) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		// Если вид доставки НеДоставлен или Отменен, фактические суммы очищаются
		Если ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.НеДоставлен")
		 ИЛИ ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Отменен")
		 ИЛИ ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Отказ")
		Тогда
			ТекСтрока.НПФакт 		= Неопределено;
			ТекСтрока.СтоимостьФакт = Неопределено;
			
		ИначеЕсли ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Доставлен")Тогда
			
			КассыПоУмолчанию = ПолучитьКассыПоУмолчанию(ТекСтрока.ВидОплаты);
			
			ТекСтрока.КассаСтоимость = КассыПоУмолчанию.Касса;
			ТекСтрока.КассаНП        = КассыПоУмолчанию.Касса;
		КонецЕсли; 
		
		ПересчитатьДанныеПодвала(,Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКассыПоУмолчанию (ВидОплаты)
	мСтруктура = Новый Структура;
	КассаНППоУмолчанию = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.КассаНаложенныхПлатежей);
	РасчетныйСчетПоУмолчанию = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ДопКассаНП);
	
	Если ВидОплаты = Перечисления.ТипыДенежныхСредств.Безналичные Тогда 
		Касса = РасчетныйСчетПоУмолчанию;
	Иначе
		Касса = КассаНППоУмолчанию;
	КонецЕсли;
	мСтруктура.Вставить("Касса",Касса);
	Возврат мСтруктура;
КонецФункции

//ЕФСОЛ Несторук 22.07.2016 + 
&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	Для каждого Стр из Объект.Заказы Цикл
		Стр.Отметка = Истина;
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметки(Команда)
	
	Для каждого Стр из Объект.Заказы Цикл
		Стр.Отметка = Ложь;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ГрупповоеИзменениеСтатусов(Команда)
	
	//ЕстьОтметка = Ложь;
	//Для каждого Стр из Объект.Заказы Цикл
	//	Если Стр.Отметка = Истина Тогда
	//		ЕстьОтметка = Истина;
	//		Продолжить;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//
	//Если Объект.Заказы.Количество() > 0 И ЕстьОтметка Тогда
	//	Уникальность = "ФормаУстановкиСтатусаЗаказамНаДоставку_" + Объект.Ссылка;
	//	ОткрытьФорму("Документ.ES_ОтчетОДоставке.Форма.ФормаВыбораСтатуса",,ЭтаФорма, Уникальность,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//Иначе
	//	
	//	Сообщение = Новый СообщениеПользователю;
	//	Сообщение.Текст = "Не отмечены документы доставки!";
	//	Сообщение.Поле = "Объект.Заказы";
	//	Сообщение.Сообщить();
	//КонецЕсли;
	
	
	Если Объект.Заказы.Количество() > 0 Тогда
		Уникальность = "ФормаГрупповогоИзмененияСтатусов_" + Объект.Ссылка;
		Оповещение = Новый ОписаниеОповещения("ОбработатьДанныеГрупповогоИзмененияСтатусов", ЭтаФорма);
		ОткрытьФорму("Документ.ES_ОтчетОДоставке.Форма.ФормаГрупповогоИзмененияСтатусов",,ЭтаФорма, Уникальность,ВариантОткрытияОкна.ОтдельноеОкно,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	

	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеГрупповогоИзмененияСтатусов(Результат, Параметры) Экспорт
	
	Для каждого ТекСтрока Из Объект.Заказы Цикл
		
		
		Если ТипЗнч(ТекСтрока.ДокументДоставки) = Тип("ДокументСсылка.ЗаказПокупателя") И 
			ТекСтрока.ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.ДвериДвери") Тогда
			СтрокаЗабор = Объект.Заказы.НайтиСтроки(Новый Структура("ДокументДоставки",ТекСтрока.СвязанныйДокумент));
			Если СтрокаЗабор.Количество() > 0 Тогда
				Если НЕ СтрокаЗабор[0].СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаборов.Выполнен") Тогда
					Если ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Доставлен") 
						ИЛИ ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ЧастичноДоставлен") Тогда
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = "Забор еще не выполнен";
						Сообщение.Поле = "Объект.Заказы[" + Строка(СтрокаЗабор[0].НомерСтроки - 1) + "].СтатусЗаказа";
						Сообщение.Сообщить();
						ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ОжидаетГрузНазначен");
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Доставлен") Тогда
			НайденныеГрузы = Объект.Грузы.НайтиСтроки(Новый Структура("ДокументДоставки", ТекСтрока.ДокументДоставки));
			Если НайденныеГрузы.Количество() > 0 Тогда
				ГрузовФакт = 0;
				ГрузовПлан = 0;
				Для Каждого Стр ИЗ НайденныеГрузы Цикл
					ГрузовФакт = ГрузовФакт + Стр.КоличествоФакт;
					ГрузовПлан = ГрузовПлан + Стр.КоличествоПлан;
				КонецЦикла;
				Если ГрузовФакт <> ГрузовПлан Тогда
					ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ЧастичноДоставлен");
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "В заказе " + ТекСтрока.ДокументДоставки + " фактическое количество доставленных товаров меньше планового";
					Сообщение.Сообщить();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//}ЭР Несторук С.И.		
		
		
		ТекСтрока.НПФактНал = 0;
		ТекСтрока.НПФактБезнал = 0;
		Если ТекСтрока.ES_Предоплачен Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ТекСтрока.ДокументДоставки) = Тип("ДокументСсылка.ES_ЗаборГруза") ИЛИ 
			ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ВПути") ИЛИ
			ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Принят") ИЛИ
			ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.НазначенПринят") Тогда
			Продолжить;
		КонецЕсли;
				
		Если Объект.Грузы.Количество() = 0 //И Объект.СписокГрузов.Количество() = 0
			Тогда
			//ЕФСОЛ Несторук 19.07.2016+ //в Отчете о доставке проставлять стоимость факт и НП факт нал, если они были проставлены в плановых колонках
			Если ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Доставлен")
				ИЛИ ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ЧастичноДоставлен") Тогда
				Если ТекСтрока.ВидОплаты = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные") Тогда
					
					ТекСтрока.НПФактНал = 0;
					ТекСтрока.НПФактБезнал =ТекСтрока.НППлан;
					
				Иначе
					
					ТекСтрока.НПФактНал = ТекСтрока.НППлан;
					ТекСтрока.НПФактБезнал = 0;
					
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			НайденныеСтроки = Объект.СписокГрузов.НайтиСтроки(Новый Структура("ДокументДоставки", ТекСтрока.ДокументДоставки));
			НПФактСписокГрузов = 0;
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для каждого Стр Из НайденныеСтроки Цикл
					
					НПФактСписокГрузов = НПФактСписокГрузов + Стр.НПФакт;
					
				КонецЦикла;
			КонецЕсли;
			НайденныеСтроки = Объект.Грузы.НайтиСтроки(Новый Структура("ДокументДоставки", ТекСтрока.ДокументДоставки));
			НПФактГрузы = 0;
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для каждого Стр Из НайденныеСтроки Цикл
					
					НПФактГрузы = НПФактГрузы + Стр.НПФакт;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ТекСтрока.ВидОплаты = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные") Тогда
				
				ТекСтрока.НПФактБезнал = НПФактСписокГрузов+ НПФактГрузы;
				ТекСтрока.НПФактНал = 0;
			Иначе 
				ТекСтрока.НПФактНал = НПФактСписокГрузов+ НПФактГрузы;
				ТекСтрока.НПФактБезнал = 0;			
			КонецЕсли;
		КонецЕсли;
		//ЕФСОЛ Несторук 19.07.2016-
		
		
		
		Если НЕ ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.НеДоставлен") Тогда
			
			ТекСтрока.ДатаНД = "01010001";
			
		КонецЕсли;
		
		Если ТипЗнч(ТекСтрока.ДокументДоставки) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			
			// Если вид доставки НеДоставлен или Отменен, фактические суммы очищаются
			Если ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.НеДоставлен")
				ИЛИ ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Отменен")
				ИЛИ ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Отказ")
				Тогда
				ТекСтрока.НПФакт 		= 0;
				ТекСтрока.СтоимостьФакт = 0;
				
				ТекСтрока.НПФактНал 		= 0;
				ТекСтрока.СтоимостьФактНал = 0;
				ТекСтрока.НПФактБезнал 		= 0;
				ТекСтрока.СтоимостьФактБезнал = 0;
				
				// Очищаем факт суммы в ТЧ Места
				НайденныеСтроки = Объект.СписокГрузов.НайтиСтроки(Новый Структура("ДокументДоставки", ТекСтрока.ДокументДоставки));
				Если НайденныеСтроки.Количество() > 0 Тогда
					Для каждого Стр Из НайденныеСтроки Цикл
						Стр.НПФакт = 0;
					КонецЦикла; 
				КонецЕсли; 
				
				// Очищаем факт суммы в ТЧ Запасы
				НайденныеСтроки = Объект.Грузы.НайтиСтроки(Новый Структура("ДокументДоставки", ТекСтрока.ДокументДоставки));
				Если НайденныеСтроки.Количество() > 0 Тогда
					Для каждого Стр Из НайденныеСтроки Цикл
						Стр.КоличествоФакт = 0;
						Стр.НПФакт = 0;
					КонецЦикла; 
				КонецЕсли;
			КонецЕсли;
			
			Если ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Доставлен") Тогда
				НайденныеСтроки = Объект.Грузы.НайтиСтроки(Новый Структура("ДокументДоставки", ТекСтрока.ДокументДоставки));
				Если НайденныеСтроки.Количество() > 0 Тогда
					НПФактГрузы = 0;
					Для каждого Стр Из НайденныеСтроки Цикл
						Стр.КоличествоФакт = Стр.КоличествоПлан;
						Стр.НПФакт = Стр.НППлан;
						НПФактГрузы = НПФактГрузы +Стр.НПФакт;
					КонецЦикла; 
					Если ТекСтрока.ВидОплаты = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные") Тогда
						
						ТекСтрока.НПФактБезнал = НПФактГрузы;
						ТекСтрока.НПФактНал = 0;
					Иначе 
						ТекСтрока.НПФактНал =  НПФактГрузы;
						ТекСтрока.НПФактБезнал = 0;			
					КонецЕсли;
				КонецЕсли;
								
			КонецЕсли;

			
			//ИначеЕсли ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Доставлен")Тогда
			//	Если ТекСтрока.ES_ВидОплаты = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.ES_ЗачетНП")Тогда
			//		ТекСтрока.СтоимостьФакт = ПолучитьСтоимостьДоставки(ТекСтрока.ДокументДоставки);
			//		ТекСтрока.НПФакт 		= ТекСтрока.НППлан - ТекСтрока.СтоимостьФакт;
			//	Иначе
			//		ТекСтрока.СтоимостьФакт = ТекСтрока.СтоимостьПлан;
			//		ТекСтрока.НПФакт 		= ТекСтрока.НППлан;
			//	КонецЕсли;
			//КонецЕсли; 
			ПроверкаСтатуса(ТекСтрока.Статусзаказа, ТекСтрока.ДатаНД, Неопределено); 
			
			
		КонецЕсли; 
	КонецЦикла;	
	ПересчитатьДанныеПодвала(,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыФИОПолучателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.Заказы.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекДанные.ДокументДоставки) 
		ИЛИ ТипЗнч(ТекДанные.ДокументДоставки) = Тип("ДокументСсылка.ES_ЗаборГруза")   Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Получатель = ПолучитьПолучателяНаСервере(ТекДанные.ДокументДоставки);
	
	Уникальность = "ФормаВыбораПоКонтрагентуКонтЛицо" + "_" + Объект.Ссылка;
	Оповещение = Новый ОписаниеОповещения("ОбработатьДанныеКонтактногоЛицаПолучателя",ЭтаФорма);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидФормыВыбора", "ВыборКонтактногоЛица");
	СтруктураПараметров.Вставить("Контрагент", Строка(Получатель));
	СтруктураПараметров.Вставить("ЭтоОтчет", "ЭтоОтчет");
	
	ОткрытьФорму("ОбщаяФорма.ES_ФормаВыбораПоКонтрагенту", СтруктураПараметров, ЭтаФорма, Уникальность, , , Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеКонтактногоЛицаПолучателя(Результат, Параметры) Экспорт 
	ТекДанные = Элементы.Заказы.ТекущиеДанные;
	Если НЕ Результат = КодВозвратаДиалога.Отмена И НЕ Результат = Неопределено Тогда
		ТекДанные.ФИОПолучателя = Результат;
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПолучателяНаСервере(Заказ)
	
	Получатель = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ES_ДанныеПоЗаказамСрезПоследних.Получатель
		|ИЗ
		|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(, Заказ = &Заказ) КАК ES_ДанныеПоЗаказамСрезПоследних";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Получатель = Выборка.Получатель;
	КонецЕсли;

	Возврат Получатель;
	
КонецФункции

&НаКлиенте
Процедура НайтиЗаказПоШК(Команда)
		//EFSOL_Шаповал Олег Анатольевич 21 ноября 2016 г. 17:12:31 +
	//Уникальность = "ФормаПоискаЗаказаПоШтрихкоду";
	//ОткрытьФорму("Документ.ES_ОтчетОДоставке.Форма.ФормаНайтиПоШК",,ЭтаФорма,Уникальность,ВариантОткрытияОкна.ОтдельноеОкно,,,);
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, Новый Структура("ТекШтрихкод", ТекШтрихкод)), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	//EFSOL Шаповал О.А. -
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		
		Заказ = НайтиЗаказНаСервере(ТекШтрихкод);
		
		Если ТипЗнч(Заказ) = Тип("Строка") Тогда
			Сообщить(Заказ);
			Возврат;
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("ДокументДоставки",Заказ);
		МассивСтрок = Объект.Заказы.НайтиСтроки(Отбор);
		
		Если МассивСтрок.Количество() > 0 Тогда
			Индекс = МассивСтрок[0].ПолучитьИдентификатор();
			ЭтаФорма.Элементы.Заказы.ТекущаяСтрока = Индекс;
		Иначе
			Сообщить("Не найден номер накладной - "+ТекШтрихкод);
		КонецЕсли;
	КонецЕсли;
	
	// Платежный календарь.
	//ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // ПоискПоШтрихкоду()

&НаСервере
Функция НайтиЗаказНаСервере(Накладная)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателя.Ссылка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	(ЗаказПокупателя.ES_ВхНакладная = &Накладная
	|			ИЛИ ЗаказПокупателя.ES_НомерНакладной = &Накладная)
	|	И ЗаказПокупателя.Проведен
	|	И ЗаказПокупателя.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Накладная", Накладная);
	//Запрос.УстановитьПараметр("ДатаНач", НачалоГода(ТекущаяДата()));
	//Запрос.УстановитьПараметр("ДатаКон", КонецДня(КонецГода(ТекущаяДата())));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Количество() > 1 Тогда
			Результат = "Поле Штрихкод не уникально";
		Иначе
			Выборка.Следующий();
			
			Результат = Выборка.Ссылка;
			
		КонецЕсли;
	Иначе 
		Результат = "Заказ не найден";
	КонецЕсли;
	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаказыВремяНД_СПриИзменении(Элемент)
		ТекДанные = Элементы.Заказы.ТекущиеДанные;
	
	Если ТекДанные.ВремяНД_С > ТекДанные.ВремяНД_По Тогда
		ТекДанные.ВремяНД_По = ТекДанные.ВремяНД_С + 3600;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаказыВремяНД_ПоПриИзменении(Элемент)
	ТекДанные = Элементы.Заказы.ТекущиеДанные;
	
	Если ТекДанные.ВремяНД_С > ТекДанные.ВремяНД_По Тогда
		ТекДанные.ВремяНД_С = ТекДанные.ВремяНД_По - 3600;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПринятьЗаборы(Команда)
		
	МассивЗаказов = Новый Массив;
	Для каждого Стр Из Объект.Заказы Цикл
		
		Если ТипЗнч(Стр.ДокументДоставки) = Тип("ДокументСсылка.ES_ЗаборГруза") Тогда
			Если Стр.ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.НаСклад")
				И Стр.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаборов.Выполнен") Тогда
				МассивЗаказов.Добавить(Стр.СвязанныйДокумент);
			Иначе
				Сообщить("По документу " + Стр.ДокументДоставки + " невозможно выполнить приемку заказа");
				Сообщить("Вид забора: " + Стр.ВидДоставки + ". Статус забора: " + Стр.СтатусЗаказа);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивЗаказов.Количество() > 0 Тогда
		
		СоздатьПриемкуНаСервере(МассивЗаказов);
		
	КонецЕсли;
	

КонецПроцедуры

&НаСервере
Процедура СоздатьПриемкуНаСервере(МассивЗаказов)
	
	ДокПриемка = Документы.ES_Приемка.СоздатьДокумент();
	ДокПриемка.Комментарий = "Создан автоматически из документа "+ Объект.Ссылка;
	ДокПриемка.Дата = ТекущаяДата();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказ,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВхНакладная,
		|	ES_ДанныеПоЗаказамСрезПоследних.НомерНакладной,
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказчик
		|ПОМЕСТИТЬ ВТ_Заказ
		|ИЗ
		|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(, Заказ В (&Массивзаказов)) КАК ES_ДанныеПоЗаказамСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_Заказ.Заказ,
		|	ВТ_Заказ.ВхНакладная,
		|	ВТ_Заказ.НомерНакладной,
		|	ВТ_Заказ.Заказчик,
		|	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа
		|ИЗ
		|	ВТ_Заказ КАК ВТ_Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(
		|				,
		|				Заказ В
		|					(ВЫБРАТЬ
		|						ВТ_Заказ.Заказ
		|					ИЗ
		|						ВТ_Заказ КАК ВТ_Заказ)) КАК ES_СтатусыЗаказовСрезПоследних
		|		ПО ВТ_Заказ.Заказ = ES_СтатусыЗаказовСрезПоследних.Заказ";
	
	Запрос.УстановитьПараметр("Массивзаказов", МассивЗаказов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Подготовлен Тогда
			НовСтр = ДокПриемка.Заказы.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,Выборка);
		Иначе
			Сообщить("" + Выборка.Заказ + "+ в статусе " + Выборка.СтатусЗаказа + " нельзя добавить в Приемку. Приемка не создана");
			Возврат;
		КонецЕсли;
		
		
	КонецЦикла;
	
	Если ДокПриемка.Заказы.Количество() > 0 Тогда
		Попытка 
			ДокПриемка.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить("Создан документ " + ДокПриемка.Ссылка);
		Исключение
			ДокПриемка.Записать();
			Сообщить("Создан документ " + ДокПриемка.Ссылка);
		КонецПопытки;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ЗакрытКурьеромПриИзменении(Элемент)
	
	Если Объект.ES_ЗакрытКурьером = Истина Тогда
		
		ОбновитьСписокЗказовИзПланаНаСервере();
		
		ПересчитатьДанныеПодвала();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыНПФактБезналПриИзменении(Элемент)
	//ES_Савченко Е.Р. 11.08.2017 + 
	ТекСтрока = Элементы.Заказы.ТекущиеДанные;
	Если ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.Доставлен")Тогда
		Если ТекСтрока.ВидОплаты = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные") Тогда
			ТекСтрока.СтоимостьФактБезнал = ПолучитьСтоимостьДоставки(ТекСтрока.ДокументДоставки);
			ТекСтрока.НПФактНал =  ТекСтрока.НППлан- ТекСтрока.НПФактБезнал;
			ТекСтрока.НПФактБезнал =  ТекСтрока.НПФактБезнал;
		Иначе 
			ТекСтрока.НПФактНал = ТекСтрока.НППлан- ТекСтрока.НПФактБезнал;
			ТекСтрока.НПФактБезнал = ТекСтрока.НПФактБезнал;			
		КонецЕсли;
	КонецЕсли;
		
	Если ТекСтрока.СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ЧастичноДоставлен") Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ДокументДоставки", ТекСтрока.ДокументДоставки);
		
		СтрокиПоЗаказу = Объект.Грузы.НайтиСтроки(СтруктураОтбора);
		ДеньгиПоЗАказу = 0;
		
		Для каждого Стр ИЗ СтрокиПоЗаказу Цикл
			ДеньгиПоЗАказу = ДеньгиПоЗАказу + Стр.НПФакт;	
		КонецЦикла;
		
		Если ТекСтрока.ВидОплаты = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные") Тогда
			ТекСтрока.СтоимостьФактБезнал = ПолучитьСтоимостьДоставки(ТекСтрока.ДокументДоставки);
			ТекСтрока.НПФактНал = ДеньгиПоЗАказу;
			ТекСтрока.НПФактНал = ?(ДеньгиПоЗАказу < ТекСтрока.НПФактБезнал,ДеньгиПоЗАказу,ДеньгиПоЗАказу - ТекСтрока.НПФактБезнал);
			ТекСтрока.НПФактБезнал = ?(ДеньгиПоЗАказу < ТекСтрока.НПФактБезнал,0,ТекСтрока.НПФактБезнал);
        Иначе 
			ТекСтрока.НПФактНал = ДеньгиПоЗАказу;
			ТекСтрока.НПФактНал = ?(ДеньгиПоЗАказу < ТекСтрока.НПФактБезнал,ДеньгиПоЗАказу,ДеньгиПоЗАказу - ТекСтрока.НПФактБезнал);
			ТекСтрока.НПФактБезнал = ?(ДеньгиПоЗАказу < ТекСтрока.НПФактБезнал,0,ТекСтрока.НПФактБезнал);
	
		 КонецЕсли;
	КонецЕсли;
	//ES_Савченко Е.Р. 11.08.2017 - 	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыУслугиПартнераПриИзменении(Элемент)
	 ПересчитатьДанныеПодвала();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//ЭР Несторук С.И. 10.04.2019 9:32:27 {
	ES_БиллингКлиент.ПроверитьДоступностьСервисаDelans(Отказ);
	//}ЭР Несторук С.И.
	
	ОбновитьВложенияНаКлиенте();
	
	//ЭР Несторук С.И. 05.10.2017 16:03:41 {
	ПроверитьСозданиеПриемкиНаОснованииОтчета();
	//}ЭР Несторук С.И.
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВложенияНаКлиенте()
	//EFSOL_Шаповал Олег Анатольевич 4 октября 2017 г. 9:14:15 +
	//Мас = Объект.Заказы.Выгрузить(,"ДокументДоставки");
	СоответствиеЗаказов = ПолучитьЗаказыСВложением(Неопределено);
	Для Каждого СТ_Заказы Из Объект.Заказы Цикл
		Вложение = СоответствиеЗаказов.Получить(СТ_Заказы.ДокументДоставки);
		Если Не Вложение = Неопределено Тогда
			мЗначение = Вложение;
		Иначе
			мЗначение = 0;
		КонецЕсли;
		СТ_Заказы.Вложения = мЗначение;
	КонецЦикла;
	//EFSOL Шаповал О.А. -
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСозданиеПриемкиНаОснованииОтчета()
	
	//ТолькоПросмотр = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ES_Приемка.Ссылка
	|ИЗ
	|	Документ.ES_Приемка КАК ES_Приемка
	|ГДЕ
	|	НЕ ES_Приемка.ПометкаУдаления
	|	И ES_Приемка.ДокументОснование = &ДокументОснование";
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Сообщение = "На основании документа было создано:";
		Пока Выборка.Следующий() Цикл
			Сообщение = Сообщение + Символы.ПС + Выборка.Ссылка;		
		КонецЦикла;
		Сообщить(Сообщение);
		ТолькоПросмотр = Истина;
	КонецЕсли;	
	Элементы.Заказы.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.ФормаГрупповоеИзменениеСтатусов.Доступность = НЕ ТолькоПросмотр;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбора(Команда)
	ОткрытьФормуПодбораЗаказов();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораЗаказов()
	
	Уникальность = "ФормаПодбораЗаказов" + Объект.Ссылка;
	мПараметры = Новый Структура;
	мПараметры.Вставить("ВидПодбора", "ОтчетОДоставке");
	мПараметры.Вставить("Склад", Объект.Склад);
	мПараметры.Вставить("Курьер", Объект.Курьер);
	мПараметры.Вставить("Организация",
	ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(ПредопределенноеЗначение("Перечисление.ES_ВидыСтартовыхНастроек.Организация")));
	мПараметры.Вставить("Новый", Объект.Статус = ПредопределенноеЗначение("Перечисление.ES_СтатусыОтчетов.Новый"));	
	ОткрытьФорму("Документ.ES_ОтчетОДоставке.Форма.ФормаПодбора",мПараметры,ЭтаФорма,Уникальность,,, Новый ОписаниеОповещения("ПодобратьЗаказыЗавершение", ЭтотОбъект), );
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьЗаказыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// ЕФСОЛ Сережко А.С. 25.01.18  +
	//Если НЕ ТипЗнч(Результат) = тип("Соответствие") Тогда
	//	Возврат;
	//КонецЕсли;
	//Если Результат.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	// -
	ПодобратьЗаказыЗавершениеНаСервере(Результат);
КонецПроцедуры

&НаСервере
Процедура ПодобратьЗаказыЗавершениеНаСервере(Результат)
	МассивВДок = Новый Массив;
	Массив = Новый Массив;
	МассивНаУдалениеИзПлана = Новый Массив;
	мОбъект = РеквизитФормыВЗначение("Объект");
	ЭтоНовый = Объект.Статус = Перечисления.ES_СтатусыОтчетов.Новый;
	
	Для каждого Элемент Из Результат Цикл
		
		Если Элемент.Значение Тогда
			//Если НайтиСтроки.Количество() = 0 Тогда
			МассивВДок.Добавить(Элемент.Ключ);
			//КонецЕсли;
			Если ЭтоНовый Тогда
				Массив.Добавить(Элемент.Ключ);	
			КонецЕсли;
		Иначе//Если ЭтоНовый Тогда
			УдалитьЗаказИзОтчета(мОбъект,Элемент.Ключ,МассивНаУдалениеИзПлана); 
						
		КонецЕсли;
	КонецЦикла;
	
	//ВсеОК = Истина;
	//Если ЭтоНовый Тогда
	//	СоздатьПеремещениеНаКурьера(Массив,ВсеОК);
	//Иначе
	//	
	//	СоздатьПеремещениеНаКурьера(МассивВДок, ВсеОК);
	//КонецЕсли;
	Если МассивВДок.Количество() > 0  Тогда
		ES_ОбщегоНазначения.ДобавитьЗаказыВОтчетОДоставке(мОбъект,МассивВДок);
	КонецЕсли;
	мОбъект.Статус = Перечисления.ES_СтатусыОтчетов.Исполняется;
	мОбъект.ES_ДанныеСменыСтатуса = "" + ПользователиКлиентСервер.ТекущийПользователь() + ", " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ""в"" ЧЧ:мм'");
	//Если ВсеОК Тогда
	//	мОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//КонецЕсли;
	//УдалитьЗаказыИзПлана(мОбъект.ПланДоставки, МассивНаУдалениеИзПлана);
	ЗначениеВРеквизитФормы(мОбъект,"Объект");
	
		
КонецПроцедуры

&НаСервере
Процедура УдалитьЗаказыИзПлана()
//Процедура УдалитьЗаказыИзПлана(ПланДоставки, Массив)
	
	//Если Массив.Количество() = 0 Тогда
	//	
	//	Возврат;
	//	
	//КонецЕсли;
	//мПлан = ПланДоставки.ПолучитьОбъект();
	//Для каждого Заказ Из Массив Цикл
	//	
	//	НайтиСтоки = мПлан.Заказы.НайтиСтроки(Новый Структура("ДокументДоставки", Заказ));
	//	Если НайтиСтоки.Количество() > 0 Тогда
	//		Для каждого стр Из НайтиСтоки Цикл
	//			мПлан.Заказы.Удалить(Стр);
	//		КонецЦикла;
	//	КонецЕсли;	
	//	
	//КонецЦикла;
	//
	//мПлан.Записать(РежимЗаписиДокумента.Проведение);
	
	БылоУдаление = Ложь;
	мПлан = Объект.ПланДоставки.ПолучитьОбъект();
	Для каждого Стр Из мПлан.Заказы Цикл
		
		НайтиСтроки = Объект.Заказы.НайтиСтроки(Новый Структура("ДокументДоставки", Стр.ДокументДоставки));
		
		Если НайтиСтроки.Количество() = 0 Тогда
			БылоУдаление = Истина;
			НайтиГрузы = мПлан.Грузы.НайтиСтроки(Новый Структура("Заказ", Стр.ДокументДоставки));
			Для каждого СтрГрузы ИЗ НайтиГрузы Цикл
				мПлан.Грузы.Удалить(СтрГрузы);	
			КонецЦикла;
			
			мПлан.Заказы.Удалить(Стр);
		КонецЕсли;
		
	КонецЦикла;
	Если БылоУдаление Тогда
		мПлан.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УдалитьЗаказИзОтчета(ДокОтчет, Заказ, МассивНаУдаление)
	НайтиСтроки = ДокОтчет.Заказы.НайтиСтроки(Новый Структура("ДокументДоставки",Заказ));
	НайтиГрузы = ДокОтчет.Грузы.НайтиСтроки(Новый Структура("ДокументДоставки",Заказ));
	
	Для каждого Стр Из НайтиГрузы Цикл
		ДокОтчет.Грузы.Удалить(Стр);
	КонецЦикла;
	
	Для каждого Стр ИЗ НайтиСтроки Цикл
		МассивНаУдаление.Добавить(Стр.ДокументДоставки);
		Сообщить(НСтр("ru='Заказ "+ Стр.НомерНакладной+ " удален из документа'"));
		ДокОтчет.Заказы.Удалить(Стр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПеремещениеНаКурьера()
//Процедура СоздатьПеремещениеНаКурьера(МассивЗаказов, ВсеОК)
Если Объект.Статус = Перечисления.ES_СтатусыОтчетов.Новый Тогда
	Возврат;
КонецЕсли;
	//ДокОбъект = Документы.ES_ПеремещениеЗаказов.СоздатьДокумент();
	//ДокОбъект.ДокументОснование	= Объект.Ссылка;
	//ДокОбъект.ВидОперации = Перечисления.ES_ВидыОперацийПеремещение.Курьер;
	//ДокОбъект.СкладОтправитель = Объект.Склад;
	//ДокОбъект.Курьер			= Объект.Курьер;
	//МассивЗаказов = Новый Массив;
	//Для каждого стр Из Объект.Заказы Цикл
	//МассивЗаказов.Добавить(Стр.ДокументДоставки);	
	//КонецЦикла;
	//
	//ES_ОбщегоНазначения.СоздатьПеремещениеЗаказовНаСервере(ДокОбъект,МассивЗаказов,,Истина, Объект.Склад);
	//Если ДокОбъект.Заказы.Количество() > 0 Тогда
	//	
	//	Для каждого Стр Из ДокОбъект.Заказы Цикл
	//		Стр.Проверен = Истина;
	//	КонецЦикла;
	//	
	//	Попытка
	//		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//		Сообщить("Создан "+ ДокОбъект.Ссылка);
	//	Исключение
	//		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	//		Сообщить("Записан "+ ДокОбъект.Ссылка);

	//		Сообщить(ОписаниеОшибки());
	//		ВсеОК = Ложь;
	//	КонецПопытки;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	//ЭР Несторук С.И. 01.11.2017 10:58:38 {
	//Пользотваель ставит статус исполняется путем сканирования кнопкой "подобрать" 
	//руками можно поставить только статус закрыт
	//ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ES_СтатусыОтчетов.Исполняется"));
	//}ЭР Несторук С.И.
	
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ES_СтатусыОтчетов.Закрыт"));
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Объект.ES_ДанныеСменыСтатуса = "" + ПользователиКлиентСервер.ТекущийПользователь() + ", " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ""в"" ЧЧ:мм'");
   	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОбновитьВложенияНаКлиенте();
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		УдалитьЗаказыИзПлана();
		СоздатьПеремещениеНаКурьера();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьУведомлениеКурьеру(Команда)
	//EFSOL Шаповал О.А. 07.08.2018 13:17:45 {
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Получатель", Объект.Курьер);
	ОткрытьФорму("Обработка.ES_ОтправитьПроизвольноеУведомление.Форма.Форма", ПараметрыОткрытия);
	//}EFSOL Шаповал О.А.
КонецПроцедуры

&НаКлиенте
Процедура КурьерПриИзменении(Элемент)
	КурьерПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура КурьерПриИзмененииНаСервере()
	//EFSOL Шаповал О.А. 03.08.2018 15:41:28 {
	Если Не Объект.Курьер.Пустая() Тогда
		ОтправитьУведомление = Истина;
		Уведомление = Новый ДоставляемоеУведомление();
		Уведомление.Текст = "Назначен новый маршрут";
		Уведомление.Данные = 1;
		ES_РаботаСДоставляемымиУведомлениями.ОтправитьУведомление(Уведомление,Объект.Курьер);
	КонецЕсли;
	//}EFSOL Шаповал О.А.
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	//EFSOL Шаповал О.А. 03.08.2018 15:41:28 {
	Если мЭтоНовый и Не Объект.Курьер.Пустая() Тогда
		ОтправитьУведомление = Истина;
		Уведомление = Новый ДоставляемоеУведомление();
		Уведомление.Текст = "Создан новый маршрут";
		Уведомление.Данные = 1;
		ES_РаботаСДоставляемымиУведомлениями.ОтправитьУведомление(Уведомление,Объект.Курьер);
	КонецЕсли;
	//}EFSOL Шаповал О.А.
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЭлектронноеПисьмо(Команда)
	//EFSOL_Сальник К.А. 2018-11-16 {+ 
	ГрупировкаЗаказов = ВыполнитьГрупировкуЗаказов(Объект.Ссылка); 
	
	Для каждого Элемент из ГрупировкаЗаказов Цикл 
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ОтчетОДоставке", Истина);
		ПараметрыОткрытия.Вставить("Отчет", Объект.Ссылка);
		ПараметрыОткрытия.Вставить("ДанныеОтчета", Элемент);
		ЗаполняемоеЗначение = Новый Структура;
		ЗаполняемоеЗначение.Вставить("ТипСобытия", ПредопределенноеЗначение("Перечисление.ТипыСобытий.ЭлектронноеПисьмо"));
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗаполняемоеЗначение);
		
		ОткрытьФорму("Документ.Событие.ФормаОбъекта",ПараметрыОткрытия, ЭтаФорма);
	КонецЦикла;
	//EFSOL_Сальник К.А.  -} 
КонецПроцедуры

&НаСервере
Функция ВыполнитьГрупировкуЗаказов(Отчет)
	 //EFSOL_Сальник К.А. 2018-11-19 {+
	ДанныеОтчета = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ES_ОтчетОДоставкеЗаказы.ДокументДоставки.Ссылка КАК Ссылка,
		|	ES_ОтчетОДоставкеЗаказы.Заказчик КАК Контрагент,
		|	ES_ОтчетОДоставкеЗаказы.НомерНакладной КАК НомерНакладной,
		|	ES_ОтчетОДоставкеЗаказы.АдресДоставки КАК АдресДоставки,
		|	ES_ОтчетОДоставкеЗаказы.ФИОПолучателя КАК ФИОПолучателя,
		|	ES_ОтчетОДоставкеЗаказы.ДатаФактическойДоставки КАК ДатаДоставки,
		|	ES_ОтчетОДоставкеЗаказы.ВремяФактическойДоставки КАК ВремяДоставки,
		|	ES_ОтчетОДоставкеЗаказы.СтатусЗаказа КАК Статус
		|ИЗ
		|	Документ.ES_ОтчетОДоставке.Заказы КАК ES_ОтчетОДоставкеЗаказы
		|ГДЕ
		|	ES_ОтчетОДоставкеЗаказы.Ссылка = &Отчет
		|	И ТИПЗНАЧЕНИЯ(ES_ОтчетОДоставкеЗаказы.ДокументДоставки) = ТИП(документ.заказпокупателя)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ES_ОтчетОДоставкеЗаказы.ДокументДоставки.Ссылка,
		|	ES_ОтчетОДоставкеЗаказы.ДокументДоставки.Ссылка.Заказчик,
		|	ES_ОтчетОДоставкеЗаказы.НомерНакладной,
		|	ES_ОтчетОДоставкеЗаказы.АдресДоставки,
		|	ES_ОтчетОДоставкеЗаказы.ФИОПолучателя,
		|	ES_ОтчетОДоставкеЗаказы.ДатаФактическойДоставки,
		|	ES_ОтчетОДоставкеЗаказы.ВремяФактическойДоставки,
		|	ES_ОтчетОДоставкеЗаказы.СтатусЗаказа
		|ИЗ
		|	Документ.ES_ОтчетОДоставке.Заказы КАК ES_ОтчетОДоставкеЗаказы
		|ГДЕ
		|	ES_ОтчетОДоставкеЗаказы.Ссылка = &Отчет
		|	И ТИПЗНАЧЕНИЯ(ES_ОтчетОДоставкеЗаказы.ДокументДоставки) = ТИП(документ.ES_ЗаборГруза)
		|ИТОГИ ПО
		|	Контрагент";
	
	Запрос.УстановитьПараметр("Отчет", Отчет);	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаКонтрагент = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаКонтрагент.Следующий() Цикл
		
		ГрупировкаКонтрагент = Новый Структура;
		ГрупировкаКонтрагент.Вставить("Контрагент", ВыборкаКонтрагент.Контрагент);
		
		ВыборкаДетальныеЗаписи = ВыборкаКонтрагент.Выбрать();
		Заказы = Новый Массив;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			заказ = новый структура;
			 заказ.Вставить("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
			  заказ.Вставить("НомерНакладной", ВыборкаДетальныеЗаписи.НомерНакладной);
			   заказ.Вставить("АдресДоставки", ВыборкаДетальныеЗаписи.АдресДоставки);
			    заказ.Вставить("ФИОПолучателя", ВыборкаДетальныеЗаписи.ФИОПолучателя);
				 заказ.Вставить("ДатаДоставки", ВыборкаДетальныеЗаписи.ДатаДоставки);
				  заказ.Вставить("ВремяДоставки", ВыборкаДетальныеЗаписи.ВремяДоставки); 
				   заказ.Вставить("Статус", ВыборкаДетальныеЗаписи.Статус);
				   заказы.Добавить(Заказ);
		КонецЦикла;
		 
		ГрупировкаКонтрагент.Вставить("Заказы", Заказы);
		ДанныеОтчета.Добавить(ГрупировкаКонтрагент);
	КонецЦикла;
	
	Возврат ДанныеОтчета;
	//EFSOL_Сальник К.А.  -}
КонецФункции

&НаКлиенте
Процедура ОтправитьСМС(Команда)
		
	//EFSOL_Сальник К.А. 2018-12-07 {+ 
	//ДанныеПоЗаказу = ПолучитьДанныеПоЗаказу(Объект.Ссылка);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Документ", Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.ES_ФормаОтправкиСМС", ПараметрыОткрытия, ЭтаФорма);
	//EFSOL_Сальник К.А.  -} 
	
КонецПроцедуры


#КонецОбласти

