
////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//УправлениеНебольшойФирмойСервер.ЗаполнитьШапкуДокумента(
	//	Объект,
	//	,
	//	Параметры.ЗначениеКопирования,
	//	Параметры.Основание,
	//	РазрешеноПроведение,
	//	Параметры.ЗначенияЗаполнения
	//);
	
	// заполнение реквизитов формы
	Отправитель = Объект.Отправитель;
	ГородПоУмолчанию = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ОсновнойГород);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.Организация 		= ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Организация);
		ДеньДоставкиПоУмолчанию = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ДеньДоставки);
		ДатаЗабораПоУмолчанию = ?(ДеньДоставкиПоУмолчанию = Перечисления.ES_ДниДоставки.Сегодня, ТекущаяДата(), ТекущаяДата() + 86400);
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидЗабора) Тогда
			Объект.ВидЗабора = Перечисления.ES_ВидыЗабора.Выезд;
			//ЕФСОЛ Несторук 11.10.2016 +
			ВидОперации = "Выезд";
			//ЕФСОЛ Несторук 11.10.2016 -
		КонецЕсли; 
		Объект.ДатаЗабора 		= ?(ЗначениеЗаполнено(Объект.ДатаЗабора), Объект.ДатаЗабора, НачалоДня(ДатаЗабораПоУмолчанию));
		Объект.ВремяЗабораС 	= ?(ЗначениеЗаполнено(Объект.ВремяЗабораС), Объект.ВремяЗабораС, '000101010900');
		Объект.ВремяЗабораПо 	= ?(ЗначениеЗаполнено(Объект.ВремяЗабораПо), Объект.ВремяЗабораПо, '000101011900');
		//ЭР Несторук С.И. 01.03.2017 12:55:02 {
		Объект.ПредставлениеГрузов = Перечисления.ES_ПредставлениеГрузов.Запасы;
		//}ЭР Несторук С.И.
	Иначе
		
		ВидОперации = ПолучитьВидОперации();
		// Статус документа
		ИзменитьЗначенияРеквизитовФормы();
	КонецЕсли; 
	
	
	//ЕФСОЛ Несторук 28.09.2016 + закомменитровано
	//УправлениеНебольшойФирмойКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.ГруппаДополнительно, Объект.Комментарий);
	//ЕФСОЛ Несторук 28.09.2016 -
	 ES_ПрикрепленныеИзображения.Параметры.УстановитьЗначениеПараметра("ДокументДоставки", Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	//ЭР Несторук С.И. 10.04.2019 9:32:27 {
	ES_БиллингКлиент.ПроверитьДоступностьСервисаDelans(Отказ);
	//}ЭР Несторук С.И.

	УстановитьТекущуюСтраницу();
	ИзменитьЗаголовокТЧГрузы();
	УстановитьВидимостьДоступность();
	УстановитьВидимостьВЗависимостиОтВидаЗабора();
	
	//Объект.ES_ИзКЛАДР = Истина; 		
	ES_УстановитьДоступностьФормыАдреса(Объект.ES_ИзКЛАДР);  	                                                        	

	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Статусы документа и грузов
	ИзменитьЗначенияРеквизитовФормы();
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Заголовок = "";
	АвтоЗаголовок = Истина;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ВНЕШНИМ ВИДОМ ФОРМЫ

#Область УправлениеВнешнимВидомФормы

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	Элементы.СтатусЗабора.Видимость = ЗначениеЗаполнено(СтатусЗабора);
	УстановитьВидимостьДоступностьРеквизитовОтправителя();	
	
	Если ЗначениеЗаполнено(СсылкаНаРегистратор) Тогда
		//Элементы.ВидЗабора.ТолькоПросмотр = Истина;
		Элементы.Курьер.ТолькоПросмотр 	= Истина;
	Иначе
		//Элементы.ВидЗабора.ТолькоПросмотр = Ложь;
		Элементы.Курьер.ТолькоПросмотр 	= Ложь;
	КонецЕсли;
	Элементы.ВидЗабора.ТолькоПросмотр = Объект.Проведен;
	Элементы.АктивныйЗаказ.Видимость = ЗначениеЗаполнено(АктивныйЗаказ);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьРеквизитовОтправителя()
	
	РеквизитТолькоПросмотр = Объект.ЗаказчикИОтправительОдноЛицо;
	
	Элементы.Отправитель.ТолькоПросмотр 	= РеквизитТолькоПросмотр;
	Элементы.КонтактноеЛицо.ТолькоПросмотр 	= РеквизитТолькоПросмотр;
	Элементы.Телефон.ТолькоПросмотр 		= РеквизитТолькоПросмотр;
	
КонецПроцедуры //УстановитьВидимостьДоступностьРеквизитовОтправителя

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ЭЛЕМЕНТОВ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ЗаказчикПриИзменении(Элемент)
	
	СвязатьОтправительИЗаказчик();
	ЗаказчикПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаказчикПриИзмененииНаСервере()
	
	Организация = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Организация);
	мОбъект = РеквизитФормыВЗначение("Объект");
	мОбъект.ES_Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Заказчик, Организация);
	ЗначениеВДанныеФормы(мОбъект,Объект);
	
КонецПроцедуры


// Получает договор по умолчанию в зависимости от способа ведения расчетов.
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Контрагент.ДоговорПоУмолчанию;
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговора = Новый СписокЗначений;
	СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговора);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции


&НаКлиенте
Процедура ОтправительПриИзменении(Элемент)
	
	ОчиститьДанныеОтправителя = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Отправитель) Тогда
		
		ТекОтправитель = ОпределитьКонтрагента(Объект.Отправитель);
		
		Если НЕ ТекОтправитель = Неопределено Тогда
			
			ЗаполнитьДанныеОтправителяНаСервере(ТекОтправитель);
			АдресПриИзменении("Ок");
			
		Иначе
			ОчиститьДанныеОтправителя = Истина;
		КонецЕсли; 
		
	Иначе
		ОчиститьДанныеОтправителя = Истина;
	КонецЕсли;
	
	Если ОчиститьДанныеОтправителя Тогда
		Объект.КонтактноеЛицо 	= "";
		Объект.Телефон 			= "";
		Объект.Адрес 			= "";
		Объект.АдресДолгота 	= 0;
		Объект.АдресШирота 		= 0;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПослеВводаЗначенияОтправителя",ЭтаФорма), Объект.Отправитель, "Контрагенты", Тип("СправочникСсылка.Контрагенты"));
		
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Отправитель) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Поле ""Отправитель"" не заполнено";
		Сообщение.Поле = "Объект.Отправитель";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли; 
	
	Уникальность = "ФормаВыбораПоОтправителюКонтЛицо" + "_" + Объект.Ссылка;
	Оповещение = Новый ОписаниеОповещения("ОбработатьДанныеКонтактногоЛицаОтправителя",ЭтаФорма);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидФормыВыбора", "ВыборКонтактногоЛица");
	СтруктураПараметров.Вставить("Контрагент", Объект.Отправитель);
	
	ОткрытьФорму("ОбщаяФорма.ES_ФормаВыбораПоКонтрагенту", СтруктураПараметров, ЭтаФорма, Уникальность, , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(Объект.Адрес) Тогда
		Объект.АдресДолгота = "";
		Объект.АдресШирота = "";
		Возврат;
	КонецЕсли;
	
	ЗаполнитьШиротуИДолготуПоАдресу();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//ПредставлениеАдресаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка,
	//	"Адрес", НСтр("ru = 'Адрес'"));
	
	Если Объект.ES_ИзКЛАДР Тогда
		ПредставлениеАдресаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка,"Адрес", НСтр("ru = 'Адрес '"));
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура АдресОчистка(Элемент, СтандартнаяОбработка)

	АдресXML = "";
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Отправитель) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Поле ""Отправитель"" не заполнено";
		Сообщение.Поле = "Объект.Отправитель";
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли; 
	
	Уникальность = "ФормаВыбораПоОтправителюАдресЗабора" + "_" + Объект.Ссылка;
	Оповещение = Новый ОписаниеОповещения("ОбработатьДанныеАдресаЗабора",ЭтаФорма);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидФормыВыбора", "ВыборАдреса");
	СтруктураПараметров.Вставить("Контрагент", Объект.Отправитель);
	
	ОткрытьФорму("ОбщаяФорма.ES_ФормаВыбораПоКонтрагенту", СтруктураПараметров, ЭтаФорма, Уникальность, , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПредставлениеАдресаОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, "Адрес");
	ЗаполнитьШиротуИДолготуПоАдресу();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПредупреждениеНажатие(Элемент)
	
	ПоказатьПредупреждение(, Элемент.Подсказка);
	
КонецПроцедуры

&НаКлиенте
Процедура КурьерПриИзменении(Элемент)
	
	Объект.Курьер = Курьер;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗабораПриИзменении(Элемент)
	
	УстановитьВидимостьВЗависимостиОтВидаЗабора();
	УстановитьНомерНакладной();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНомерНакладной()
	
	Если Объект.ВидЗабора = ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.Выезд") Тогда
		Если ЗначениеЗаполнено(Объект.Номер) Тогда
			Объект.НомерНакладной = Объект.Номер;
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ОчиститьПоляДокумента();
	Иначе
		ЗаполнитьДаннымиДокументаОснования();
		ИзменитьЗначенияРеквизитовФормы();
		УстановитьВидимостьДоступность();
	КонецЕсли; 
	
	Элементы.Грузы.ТолькоПросмотр = ЗначениеЗаполнено(Объект.ДокументОснование);
	
	УстановитьТекущуюСтраницу();
	ИзменитьЗаголовокТЧГрузы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяЗабораСПриИзменении(Элемент)
	
	Если Объект.ВремяЗабораС > Объект.ВремяЗабораПо Тогда
		Объект.ВремяЗабораПо = Объект.ВремяЗабораС + 3600;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяЗабораПоПриИзменении(Элемент)
	
	Если Объект.ВремяЗабораС > Объект.ВремяЗабораПо Тогда
		Объект.ВремяЗабораС = Объект.ВремяЗабораПо - 3600;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикИОтправительОдноЛицоПриИзменении(Элемент)
	
	СвязатьОтправительИЗаказчик();
	УстановитьВидимостьДоступностьРеквизитовОтправителя();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвержденПриИзменении(Элемент)
		
	Если Объект.Подтвержден Тогда
		Объект.ДанныеПодтверждения = "" + ПользователиКлиентСервер.ТекущийПользователь() + ", " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ""в"" ЧЧ:мм'");
	Иначе
		Объект.ДанныеПодтверждения = "";
	КонецЕсли; 

КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
	
КонецПроцедуры // КомментарийПриИзменении()

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.ГруппаДополнительно, Объект.Комментарий);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ ГРУЗЫ (ЗАПАСЫ)

&НаКлиенте
Процедура ГрузыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УдалитьПустыеСтрокиТЧГрузы();
	
	ПересчитатьКоличествоМест();
	ПересчитатьСуммуДокумента();
	
	ИзменитьЗаголовокТЧГрузы();
	
	ПересчитатьПодвал();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ГрузыПослеУдаления(Элемент)
	
	ПересчитатьКоличествоМест();
	ПересчитатьСуммуДокумента();
	
	ИзменитьЗаголовокТЧГрузы();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыНоменклатураПриИзменении(Элемент)
		
	СтрокаТабличнойЧасти = Элементы.Грузы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	
	//Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
	//	
	//	СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
	//	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	//	СтруктураДанные.Вставить("СуммаВключаетНДС", Ложь);
	//	СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
	//	СтруктураДанные.Вставить("Коэффициент", 1);
	//	СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	//	
	//КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
	СтрокаТабличнойЧасти.Содержание = "";
	СтрокаТабличнойЧасти.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
	//ЕФСОЛ Несторук 09-11-16 +
	ДопДанные = ПолучитьДопДанныеПоНоменклатуре(СтрокаТабличнойЧасти.Номенклатура);
	СтрокаТабличнойЧасти.Вес					= ДопДанные.Вес;
	СтрокаТабличнойЧасти.Опасность				= ДопДанные.Опасность;
	СтрокаТабличнойЧасти.Объем					= ДопДанные.Объем;
	СтрокаТабличнойЧасти.ОбъемныйВес			= ДопДанные.ОбъемныйВес;
	//ЕФСОЛ Несторук 09-11-16 -

	РассчитатьСуммыПоСтрокеТЧ(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура ГрузыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Грузы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 	СтрокаТабличнойЧасти.Характеристика);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
	
		СтруктураДанные.Вставить("ДатаОбработки", 		Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", 	Объект.ВалютаДокумента);
		//СтруктураДанные.Вставить("СуммаВключаетНДС",	Объект.СуммаВключаетНДС);
		
		//СтруктураДанные.Вставить("СтавкаНДС", 	СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("Цена", 		СтрокаТабличнойЧасти.Цена);
		
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.Содержание = "";
	СтрокаТабличнойЧасти.ТипНоменклатурыЗапас = СтрокаТабличнойЧасти.Номенклатура.ТипНоменклатурыЗапас;
	
	РассчитатьСуммыПоСтрокеТЧ(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ГрузыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Грузы.ТекущиеДанные;
	РассчитатьСуммыПоСтрокеТЧ(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Грузы.ТекущиеДанные;
	РассчитатьСуммыПоСтрокеТЧ(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Грузы.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Скидка.
	Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / ((1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100) * СтрокаТабличнойЧасти.Количество);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ СПИСОК ГРУЗОВ (МЕСТА)

&НаКлиенте
Процедура СписокГрузовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.СписокГрузов.ТекущиеДанные.КлючСтроки = Новый УникальныйИдентификатор;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокГрузовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УдалитьПустыеСтрокиТЧГрузы();
	ПересчитатьКоличествоМест();
	ПересчитатьСуммуДокумента();
	
	ИзменитьЗаголовокТЧГрузы();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокГрузовПослеУдаления(Элемент)
	
	ПересчитатьКоличествоМест();
	ПересчитатьСуммуДокумента();
	
	ИзменитьЗаголовокТЧГрузы();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокГрузовДлинаПриИзменении(Элемент)

	ПересчитатьОбъемныйВес();	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокГрузовВысотаПриИзменении(Элемент)

	ПересчитатьОбъемныйВес();	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокГрузовШиринаПриИзменении(Элемент)

	ПересчитатьОбъемныйВес();	
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ КНОПОК

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтразитьАдресНаКарте(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Адрес) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Адрес не указан";
		Сообщение.Поле = "Объект.Адрес";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли; 
	
	Уникальность = "ФормаОпределенияКоординат" + "_" + Объект.Ссылка;
	//Оповещение = Новый ОписаниеОповещения("ОбработатьКоординатыАдреса",ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ОбработатьАдресПоКоординатам",ЭтаФорма);
	
	СтруктураКоординат = Новый Структура("Долгота, Широта, Адрес, Метро", Объект.АдресДолгота, Объект.АдресШирота, Объект.Адрес, Объект.Регион);	
	
	ОткрытьФорму("ОбщаяФорма.ES_ФормаОпределенияКоординат", СтруктураКоординат, ЭтаФорма, Уникальность, , , Оповещение);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура УстановитьТекущуюСтраницу()
	
	ТекущаяСтр = Элементы.СтраницаМеста;
	Если Объект.ПредставлениеГрузов = ПредопределенноеЗначение("Перечисление.ES_ПредставлениеГрузов.Места") Тогда
		ТекущаяСтр = Элементы.СтраницаМеста;
	ИначеЕсли Объект.ПредставлениеГрузов = ПредопределенноеЗначение("Перечисление.ES_ПредставлениеГрузов.Запасы") Тогда 
		ТекущаяСтр = Элементы.СтраницаЗапасы;
	КонецЕсли; 
	
	Элементы.СтарницыПредставлениеГрузов.ТекущаяСтраница = ТекущаяСтр;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗаголовокТЧГрузы();
	
	КоличествоГрузов = 0;
	
	Если Объект.ПредставлениеГрузов = ПредопределенноеЗначение("Перечисление.ES_ПредставлениеГрузов.Места") Тогда
		КоличествоГрузов = Объект.СписокГрузов.Количество();
	ИначеЕсли Объект.ПредставлениеГрузов = ПредопределенноеЗначение("Перечисление.ES_ПредставлениеГрузов.Запасы") Тогда 	
		КоличествоГрузов = Объект.Грузы.Количество();
	КонецЕсли; 

	//ЗаголовокТЧГрузы = ?(КоличествоГрузов, "Грузы (" + КоличествоГрузов + ")", "Грузы");
	//Элементы.ГруппаГрузы.Заголовок = ЗаголовокТЧГрузы;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьОтправительИЗаказчик()
	
	Если Объект.ЗаказчикИОтправительОдноЛицо Тогда
		Если ЗначениеЗаполнено(Объект.Заказчик) Тогда
			ЗаполнитьОтправителяДаннымиЗаказчика();
			АдресПриИзменении("Ок");
		Иначе
			Объект.КонтактноеЛицо 	= "";
			Объект.Телефон 			= "";
			Объект.Адрес 			= "";
			Объект.АдресДолгота 	= "";
			Объект.АдресШирота 		= "";
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры //СвязатьОтправительИЗаказчик

&НаКлиенте
Процедура ЗаполнитьШиротуИДолготуПоАдресу()
	
	Если ES_ОбщегоНазначения.ПроверкаИнтернет() Тогда
		
		СтруктураГеокодирования = ПолучитьСтруктуруГеокодированияНаСервере();
		Объект.АдресДолгота = СтруктураГеокодирования.Долгота;
		Объект.АдресШирота 	= СтруктураГеокодирования.Широта;
		ДанныеПоМетро = ES_ОбщегоНазначения.ПолучитьДанныеПоМетро(СтруктураГеокодирования);
		Объект.РегионРасстоняние = ДанныеПоМетро.Расстояние;
		Объект.Регион = ДанныеПоМетро.Метро;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруГеокодированияНаСервере()
	Возврат ES_YandexMaps.ГеокодированияПолучитьКоординаты(Объект.Адрес); 
КонецФункции


&НаКлиенте
Процедура ОчиститьПоляДокумента()
	
	Объект.ВидЗабора 			= ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.Выезд");
	Объект.Заказчик 			= Неопределено;
	Объект.Отправитель 			= Неопределено;
	Объект.КонтактноеЛицо 		= Неопределено;
	Объект.Телефон 				= Неопределено;
	Объект.Адрес 				= Неопределено;
	Объект.Регион 				= Неопределено;
	Объект.Курьер 				= Неопределено;
	Объект.ДатаЗабора 			= Неопределено;
	Объект.ВремяЗабораС 		= Неопределено;
	Объект.ВремяЗабораПо 		= Неопределено;
	Объект.Комментарий 			= Неопределено;
	Объект.Подтвержден 			= Ложь;
	Объект.ДанныеПодтверждения 	= "";
	СсылкаНаРегистратор 		= Неопределено;
	Курьер 						= Неопределено;
	СтатусЗабора 				= Неопределено;
	
	Объект.Грузы.Очистить();
	Объект.СписокГрузов.Очистить();
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
	
		ТекстСообщения = НСтр("ru = 'Данные документа будут очищены. Продолжить?'");
		Описание = Новый ОписаниеОповещения("ОбработкаВопросаОчисткиДанныхДокумента", ЭтотОбъект);

		ПоказатьВопрос(Описание, ТекстСообщения, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
		
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;

	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ES_СтатусЗаказа", ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов.ТребуетсяЗабор")); 
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустыеСтрокиТЧГрузы()
	
	Если Объект.ПредставлениеГрузов = ПредопределенноеЗначение("Перечисление.ES_ПредставлениеГрузов.Места") Тогда
		
		Для каждого Строка Из Объект.СписокГрузов Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Вес)
			   И НЕ ЗначениеЗаполнено(Строка.Высота)
			   И НЕ ЗначениеЗаполнено(Строка.Длина)
			   И НЕ ЗначениеЗаполнено(Строка.Ширина)
			   И НЕ ЗначениеЗаполнено(Строка.НППлан)
			   И НЕ ЗначениеЗаполнено(Строка.ОбъемныйВес)
			   И НЕ ЗначениеЗаполнено(Строка.ОписаниеГруза)
			   И НЕ ЗначениеЗаполнено(Строка.Страховка)
			   И НЕ ЗначениеЗаполнено(Строка.ТипГруза)
			Тогда
				Объект.СписокГрузов.Удалить(Строка);
			КонецЕсли; 
		КонецЦикла;
		
	ИначеЕсли Объект.ПредставлениеГрузов = ПредопределенноеЗначение("Перечисление.ES_ПредставлениеГрузов.Запасы") Тогда 	
	
		Для каждого Строка Из Объект.Грузы Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
				Объект.Грузы.Удалить(Строка);
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли; 
		
КонецПроцедуры

&НаСервере
Процедура ПересчитатьКоличествоМест()
	
	КоличествоМест = 0;
	
	Если Объект.ПредставлениеГрузов = Перечисления.ES_ПредставлениеГрузов.Места Тогда
		КоличествоМест = Объект.СписокГрузов.Количество();
	ИначеЕсли Объект.ПредставлениеГрузов = Перечисления.ES_ПредставлениеГрузов.Запасы Тогда 	
		КоличествоМест = Объект.Грузы.Количество();
	КонецЕсли; 
	
	Если КоличествоМест = 0 Тогда
		КоличествоМест = 1;
	КонецЕсли; 
	
	Объект.КоличествоМест = КоличествоМест;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПересчитатьОбъемныйВес()
	
	ТекСтрока = Элементы.СписокГрузов.ТекущиеДанные;
	ТекСтрока.ОбъемныйВес = Окр(ТекСтрока.Длина * ТекСтрока.Высота * ТекСтрока.Ширина / 5000, 3);

КонецПроцедуры

// НЕ ИСПОЛЬЗУЕТСЯ
&НаКлиенте
Процедура ПересчитатьСуммуДокумента()
	
	Объект.СуммаДокумента = Объект.Грузы.Итог("НППлан") + Объект.СписокГрузов.Итог("НППлан");
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСтоимостьДокумента()
	
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	// "ВЫБРАТЬ
	// |	ES_ЗаборГрузаЗаказы.Заказ.ES_ОбщийВес КАК ОбщийВес,
	// |	ES_ЗаборГрузаЗаказы.Заказ.ES_ОбщийОбъемныйВес КАК ОбщийОбъемныйВес,
	// |	ES_ЗаборГрузаЗаказы.Ссылка КАК Ссылка
	// |ИЗ
	// |	Документ.ES_ЗаборГруза.Заказы КАК ES_ЗаборГрузаЗаказы
	// |ГДЕ
	// |	ES_ЗаборГрузаЗаказы.Ссылка = &Ссылка
	// |ИТОГИ
	// |	СУММА(ОбщийВес),
	// |	СУММА(ОбщийОбъемныйВес)
	// |ПО
	// |	Ссылка";    

	//Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка); 	
	//РезультатЗапроса = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//РезультатЗапроса.Следующий();
	//Объект.ОбщийВес = РезультатЗапроса.ОбщийВес;
	//Объект.ОбщийОбъемныйВес = РезультатЗапроса.ОбщийОбъемныйВес;	
	//Объект.ОбщийВес = 0;
	//Объект.ОбщийОбъемныйВес = 0;	
	//Для каждого Стр из Объект.Заказы Цикл
	//	   Объект.ОбщийВес = Объект.ОбщийВес + Стр.Заказ.ES_ОбщийВес;
	//	   Объект.ОбщийОбъемныйВес = Объект.ОбщийОбъемныйВес + Стр.Заказ.ES_ОбщийОбъемныйВес;
	//КонецЦикла 
	
КонецПроцедуры     
 

&НаКлиенте
Процедура РассчитатьСуммыПоСтрокеТЧ(СтрокаТабличнойЧасти)
	
	// Расчет сумм
	СтрокаТабличнойЧасти.НППлан = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
		
	// Скидки.
	Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
		СтрокаТабличнойЧасти.НППлан = 0;
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.НППлан = СтрокаТабличнойЧасти.НППлан * (1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьВЗависимостиОтВидаЗабора()
	//ЭР Несторук С.И. 24.02.2017 16:05:28 {
	//Временно убрали групповой забор груза - следовательно вкладка Назначение пока не нужна, в свойсвах вкладки убрал видимость
	//Если Объект.ВидЗабора = ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.Выезд") Тогда
	//	Элементы.ГруппаНазначение.Видимость = Истина;
	//Иначе
	//	Элементы.ГруппаНазначение.Видимость = Ложь;
	//КонецЕсли; 
	
	//}ЭР Несторук С.И.
	
	//Сережко А.С. +	
	Если Объект.ВидЗабора = ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.ПодЗаказ") Тогда
		Элементы.ЗаказыСоздатьЗаказ.Доступность = Ложь;
	КонецЕсли;
	
	//ЭР Несторук С.И. 05.10.2017 20:44:52 {
	Если Объект.ВидЗабора = ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.Реестр") Тогда
		Элементы.ES_Стоимость.Видимость = Ложь;
		Объект.ES_Стоимость = 0;
	Иначе 
		Элементы.ES_Стоимость.Видимость = Истина;
	КонецЕсли;
	//}ЭР Несторук С.И.
		
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
Процедура ИзменитьЗначенияРеквизитовФормы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ES_СтатусыЗаборовСрезПоследнихСтатус.Забор,
		|	ES_СтатусыЗаборовСрезПоследнихСтатус.СтатусЗабора,
		|	ES_СтатусыЗаборовСрезПоследнихСтатус.Регистратор
		|ПОМЕСТИТЬ ВТ_Статус
		|ИЗ
		|	РегистрСведений.ES_СтатусыЗаборов.СрезПоследних(, Забор = &Забор) КАК ES_СтатусыЗаборовСрезПоследнихСтатус
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ES_ИзменяемыеРеквизитыЗаборовСрезПоследних.Забор,
		|	ES_ИзменяемыеРеквизитыЗаборовСрезПоследних.Значение КАК Курьер,
		|	ES_ИзменяемыеРеквизитыЗаборовАктивныйЗаказ.Значение КАК АктивныйЗаказ,
		|	ES_ИзменяемыеРеквизитыЗаборовСрезПоследнихОплатаIBox.Значение КАК ОплаченIBox,
		|	ES_ИзменяемыеРеквизитыЗаборовСрезПоследнихОплатаИДТранзакции.Значение КАК ИДТранзакции,
		|	ES_ИзменяемыеРеквизитыЗаборовСрезПоследнихОплатаНомерЧека.Значение КАК НомерЧека
		|ПОМЕСТИТЬ ВТ_ИзмРеквизиты
		|ИЗ
		|	РегистрСведений.ES_ИзменяемыеРеквизитыЗаборов.СрезПоследних(
		|			,
		|			Забор В
		|					(ВЫБРАТЬ
		|						ВТ_Статус.Забор
		|					ИЗ
		|						ВТ_Статус КАК ВТ_Статус)
		|				И РеквизитЗабора = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗабора.Курьер)) КАК ES_ИзменяемыеРеквизитыЗаборовСрезПоследних,
		|	РегистрСведений.ES_ИзменяемыеРеквизитыЗаборов.СрезПоследних(
		|			,
		|			Забор = &Забор
		|				И РеквизитЗабора = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗабора.АктивныйЗаказ)) КАК ES_ИзменяемыеРеквизитыЗаборовАктивныйЗаказ,
		|	РегистрСведений.ES_ИзменяемыеРеквизитыЗаборов.СрезПоследних(
		|			,
		|			Забор В
		|					(ВЫБРАТЬ
		|						ВТ_Статус.Забор
		|					ИЗ
		|						ВТ_Статус КАК ВТ_Статус)
		|				И РеквизитЗабора = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗабора.ОплаченIBox)) КАК ES_ИзменяемыеРеквизитыЗаборовСрезПоследнихОплатаIBox,
		|	РегистрСведений.ES_ИзменяемыеРеквизитыЗаборов.СрезПоследних(
		|			,
		|			Забор В
		|					(ВЫБРАТЬ
		|						ВТ_Статус.Забор
		|					ИЗ
		|						ВТ_Статус КАК ВТ_Статус)
		|				И РеквизитЗабора = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗабора.ИДТранзакции)) КАК ES_ИзменяемыеРеквизитыЗаборовСрезПоследнихОплатаИДТранзакции,
		|	РегистрСведений.ES_ИзменяемыеРеквизитыЗаборов.СрезПоследних(
		|			,
		|			Забор В
		|					(ВЫБРАТЬ
		|						ВТ_Статус.Забор
		|					ИЗ
		|						ВТ_Статус КАК ВТ_Статус)
		|				И РеквизитЗабора = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗабора.НомерЧека)) КАК ES_ИзменяемыеРеквизитыЗаборовСрезПоследнихОплатаНомерЧека
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_Статус.СтатусЗабора,
		|	ВТ_Статус.Регистратор,
		|	ВТ_ИзмРеквизиты.Курьер,
		|	ВТ_ИзмРеквизиты.АктивныйЗаказ,
		|	ВТ_ИзмРеквизиты.ОплаченIBox КАК ОплаченIBox,
		|	ВТ_ИзмРеквизиты.ИДТранзакции КАК ИДТранзакции,
		|	ВТ_ИзмРеквизиты.НомерЧека КАК НомерЧека
		|ИЗ
		|	ВТ_Статус КАК ВТ_Статус
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИзмРеквизиты КАК ВТ_ИзмРеквизиты
		|		ПО ВТ_Статус.Забор = ВТ_ИзмРеквизиты.Забор";

	Запрос.УстановитьПараметр("Забор", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			
			СтатусЗабора = ВыборкаДетальныеЗаписи.СтатусЗабора;
			//ЕФСОЛ Несторук 11.08.2016 + 
			Если СтатусЗабора = Строка(Перечисления.ES_СтатусыЗаборов.Назначен)
			 ИЛИ СтатусЗабора = Строка(Перечисления.ES_СтатусыЗаборов.ВПути)
			 ИЛИ СтатусЗабора = Строка(Перечисления.ES_СтатусыЗаборов.Выполнен)
			 ИЛИ СтатусЗабора = Строка(Перечисления.ES_СтатусыЗаборов.Передан) Тогда
			 //ЕФСОЛ несторук 11.08.2016 - 
				СсылкаНаРегистратор = ВыборкаДетальныеЗаписи.Регистратор;
				Курьер 				= ВыборкаДетальныеЗаписи.Курьер;
				ОплаченIBox			= ВыборкаДетальныеЗаписи.ОплаченIBox;
				ИДТранзакции		= ВыборкаДетальныеЗаписи.ИДТранзакции;
				НомерЧека			= ВыборкаДетальныеЗаписи.НомерЧека;
				АктивныйЗаказ 		= ВыборкаДетальныеЗаписи.АктивныйЗаказ;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтатусЗабора 		= Неопределено;
		СсылкаНаРегистратор = Неопределено;
		Курьер 				= Неопределено;
		ОплаченIBox			= Ложь;
		ИДТранзакции		= Неопределено;
		НомерЧека			= Неопределено;
		АктивныйЗаказ 		= Неопределено;
	КонецЕсли; 
	
	// активный заказ
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ES_ИзменяемыеРеквизитыЗаборовАктивыныйЗаказ.Значение КАК АктивныйЗаказ
	               |ИЗ
	               |	РегистрСведений.ES_ИзменяемыеРеквизитыЗаборов.СрезПоследних(
	               |			,
	               |			Забор = &Забор
	               |				И РеквизитЗабора = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗабора.АктивныйЗаказ)) КАК ES_ИзменяемыеРеквизитыЗаборовАктивыныйЗаказ";
	Запрос.УстановитьПараметр("Забор", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			АктивныйЗаказ = ВыборкаДетальныеЗаписи.АктивныйЗаказ;	
		КонецЕсли;
	Иначе
		АктивныйЗаказ = Неопределено; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтправителяДаннымиЗаказчика()
	
	Объект.Отправитель 		= Объект.Заказчик;
	Объект.КонтактноеЛицо 	= ES_ОбщегоНазначения.ПолучитьКонтактноеЛицоКонтрагента(Объект.Заказчик);
	Объект.Телефон 			= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Заказчик, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	Объект.Адрес 			= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Заказчик, Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьКонтрагента(ИмяОтправителя)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Наименование ПОДОБНО &ИмяКонтрагента
		|	И НЕ Контрагенты.ЭтоГруппа
		|	И НЕ Контрагенты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ИмяКонтрагента", ИмяОтправителя);
	
	ТекОтправитель = Неопределено;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекОтправитель = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
	КонецЕсли; 
	
	Возврат ТекОтправитель;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеОтправителяНаСервере(ТекОтправитель)
	
	// Заполнить КонтЛицо и телефон отправителя
	КонтактноеЛицо 	= ES_ОбщегоНазначения.ПолучитьКонтактноеЛицоКонтрагента(ТекОтправитель);
	Телефон 		= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ТекОтправитель, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	
	Если НЕ ЗначениеЗаполнено(Телефон) И ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		Телефон = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(КонтактноеЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица);
	КонецЕсли;
	
	Объект.КонтактноеЛицо 	= КонтактноеЛицо;
	Объект.Телефон 			= Телефон;
	// Заполнить Адресом доставки
	Объект.Адрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ТекОтправитель, Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиДокументаОснования()

	Объект.СписокГрузов.Очистить();
	объект.Грузы.Очистить();
	
	ДанныйОбъект = РеквизитФормыВЗначение("Объект");
	ДанныйОбъект.ЗаполнитьДаннымиЗаказаНаДоставку(Объект.ДокументОснование);
	ЗначениеВРеквизитФормы(ДанныйОбъект, "Объект");
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	
	СтруктураДанные.Вставить("ЭтоУслуга", СтруктураДанные.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	СтруктураДанные.Вставить("ЭтоЗапас", СтруктураДанные.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас);
	
	Если СтруктураДанные.Свойство("НормаВремени") Тогда		
		СтруктураДанные.НормаВремени = УправлениеНебольшойФирмойСервер.ПолучитьНормуВремениРаботы(СтруктураДанные);		
	КонецЕсли;	
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС") 
		И НЕ СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;	
																
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.СтавкаНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Номенклатура.СтавкаНДС);
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию));
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("Характеристика") Тогда
		СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
	Иначе
		СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура));
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда	
			СтруктураДанные.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());	
		КонецЕсли;
		
		Если СтруктураДанные.Свойство("ВидРабот") Тогда
		
			Если СтруктураДанные.Номенклатура.ФиксированнаяСтоимость Тогда		
				
				Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
				СтруктураДанные.Вставить("Цена", Цена);
			
			Иначе
			
				СтруктураДанные.Номенклатура = СтруктураДанные.ВидРабот;
				СтруктураДанные.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
				СтруктураДанные.Вставить("Цена", Цена);
				
			КонецЕсли;	
		
		Иначе
		
			Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
			СтруктураДанные.Вставить("Цена", Цена);	
		
		КонецЕсли;				
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;	
	
	//Если СтруктураДанные.Свойство("ВидСкидкиНаценки") 
	//	И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
	//	СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	//Иначе	
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	//КонецЕсли;
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Получает набор данных с сервера для процедуры ХарактеристикаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", 1);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		КонецЕсли;
		
		Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
	
	Если СтруктураДанные.Свойство("НормаВремени") Тогда
		СтруктураДанные.НормаВремени = УправлениеНебольшойФирмойСервер.ПолучитьНормуВремениРаботы(СтруктураДанные);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

///////////////////////////////////////////////////////
// Обработка ввода адреса через подсистему КонтактнаяИнформация.

&НаКлиенте
Процедура ПредставлениеАдресаНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка, ИмяРеквизита, ЗаголовокФормы)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
		"УправлениеКонтактнойИнформациейКлиент");
	
	ИмяТипаКонтактнойИнформации = "Перечисление" + ".ТипыКонтактнойИнформации.Адрес";
	
	ВидКонтактнойИнформации = Новый Структура;
	ВидКонтактнойИнформации.Вставить("Тип", ПредопределенноеЗначение(ИмяТипаКонтактнойИнформации));
	ВидКонтактнойИнформации.Вставить("АдресТолькоРоссийский",        Истина);
	ВидКонтактнойИнформации.Вставить("ВключатьСтрануВПредставление", Ложь);
	ВидКонтактнойИнформации.Вставить("СкрыватьНеактуальныеАдреса",   Ложь);
	ВидКонтактнойИнформации.Вставить("Город",   					 ГородПоУмолчанию);
	
	ПараметрыФормы = МодульУправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ВидКонтактнойИнформации, Форма[ИмяРеквизита + "XML"], Объект[ИмяРеквизита]);
	
	ПараметрыФормы.Вставить("Заголовок", ЗаголовокФормы);
	ПараметрыФормы.Вставить("Страна", ПредопределенноеЗначение("Справочник.СтраныМира.Россия"));
	
	МодульУправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеАдресаОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ИмяРеквизита)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		// Данные не изменены.
		Возврат;
	КонецЕсли;
	
	Форма[ИмяРеквизита + "XML"] = ВыбранноеЗначение.КонтактнаяИнформация;
	Объект[ИмяРеквизита] = ВыбранноеЗначение.Представление;
	
	ПроверитьАдрес(ИмяРеквизита);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьАдрес(ИмяРеквизита)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	Сообщение = "";
	Попытка
		ПодробныйИтог = МодульУправлениеКонтактнойИнформацией.ПроверитьАдрес(ЭтотОбъект[ИмяРеквизита + "XML"]);
		
		Если ПодробныйИтог.Результат <> "Корректный" Тогда
			Для каждого ЭлементСписка Из ПодробныйИтог.СписокОшибок Цикл
				Сообщение = Сообщение + Символы.ПС + ЭлементСписка.Представление;
			КонецЦикла;
			Сообщение = СокрЛП(Сообщение);
			Если Не ЗначениеЗаполнено(Сообщение) Тогда
				Сообщение = НСтр("ru = 'Адрес не заполнен'");
			КонецЕсли;
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Сообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
	Если ЗначениеЗаполнено(Сообщение) Тогда
		Элементы[ИмяРеквизита + "Предупреждение"].Подсказка = Сообщение;
		Элементы[ИмяРеквизита + "Предупреждение"].Видимость = Истина;
	Иначе
		Элементы[ИмяРеквизита + "Предупреждение"].Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// ОПОВЕЩЕНИЯ

&НаКлиенте
Процедура ОбработатьДанныеКонтактногоЛицаОтправителя(Результат, Параметры) Экспорт 
	
	Если НЕ Результат = КодВозвратаДиалога.Отмена И НЕ Результат = Неопределено Тогда
		Объект.КонтактноеЛицо = Результат;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеАдресаЗабора(Результат, Параметры) Экспорт 
	
	Если НЕ Результат = КодВозвратаДиалога.Отмена И НЕ Результат = Неопределено Тогда
		Объект.Адрес = Результат;
		ЗаполнитьШиротуИДолготуПоАдресу();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаОчисткиДанныхДокумента(Результат, ES_ПредставлениеГрузовДоИзменения) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	Иначе
		ОчиститьПоляДокумента();
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКоординатыАдреса(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		Объект.Адрес = Результат["ФорматированныйАдрес"];
		Объект.АдресДолгота = Результат.Долгота;
		Объект.АдресШирота = Результат.Широта;
		Объект.Регион	= ДобавитьМетроНаСервере(Результат.Метро);
		Объект.РегионРасстоняние =""+Окр((Число(Результат.Расстояние)/1000),2)+ " км";
	КонецЕсли;
		
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьАдресПоКоординатам(Результат, Параметры) Экспорт 
	//ЭР Сальник К.А. 13.04.2018 17:45:00 {
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		Объект.Адрес = Результат.Адрес;
		Объект.АдресДолгота = Результат.Долгота;
		Объект.АдресШирота = Результат.Широта;
		Объект.Регион = ES_ОбщегоНазначения.ДобавитьМетроНаСервере(Результат.Метро, Результат.ЛинияМетро);
	КонецЕсли;
	//} ЭР Сальник К.А.
	
КонецПроцедуры


&НаКлиенте
Процедура ПослеВводаЗначенияОтправителя(ВыбрЗнач, Параметры) Экспорт
	
	ОчиститьДанныеОтправителя = Ложь;
	
	Если ЗначениеЗаполнено(ВыбрЗнач) Тогда
		
		Объект.Отправитель = ВыбрЗнач;
		
		Если ТипЗнч(ВыбрЗнач) = Тип("СправочникСсылка.Контрагенты") Тогда
			ТекОтправитель = ВыбрЗнач;
		Иначе
			ТекОтправитель = ОпределитьКонтрагента(ВыбрЗнач)
		КонецЕсли; 
		
		Если НЕ ТекОтправитель = Неопределено Тогда
			ЗаполнитьДанныеОтправителяНаСервере(ВыбрЗнач);
			АдресПриИзменении("Ок");
		Иначе
			ОчиститьДанныеОтправителя = Истина;
		КонецЕсли; 
		
	Иначе
		ОчиститьДанныеОтправителя = Истина;
	КонецЕсли; 		
	
	Если ОчиститьДанныеОтправителя Тогда
		Объект.КонтактноеЛицо 	= "";
		Объект.Телефон 			= "";
		Объект.Адрес 			= "";
		Объект.АдресДолгота 	= 0;
		Объект.АдресШирота 		= 0;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ДобавитьМетроНаСервере(Метро)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ES_Регионы.Ссылка
		|ИЗ
		|	Справочник.ES_Регионы КАК ES_Регионы
		|ГДЕ
		|	ES_Регионы.Наименование = &Наименование
		|	И ES_Регионы.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Наименование", Метро);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
	
	Иначе
		Если Метро = "..." ИЛИ НЕ ЗначениеЗаполнено(Метро) Тогда
			Возврат Справочники.ES_Регионы.ПустаяСсылка();
		Иначе
			
		НовыйЭлемент = Справочники.ES_Регионы.СоздатьЭлемент();
		НовыйЭлемент.Наименование = Метро;
		НовыйЭлемент.Записать();
		
		Возврат НовыйЭлемент.Ссылка;
		КонецЕсли;
	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеПоМетро(СтруктураГеокодирования)
	
	//ЕФСОЛ Несторук 05.08.2016 +
	Если ЗначениеЗаполнено(СтруктураГеокодирования.Долгота) И ЗначениеЗаполнено(СтруктураГеокодирования.Широта) Тогда
		PI = 3.1415926535897932; 
		СтруктураПоМетро = ES_YandexMaps.ГеокодированияПолучитьКоординатыМетро(СтруктураГеокодирования);
		
		Lt1 = СтруктураГеокодирования.Долгота;
		Lg1 = СтруктураГеокодирования.Широта;
		
		Lt2 = СтруктураПоМетро.Долгота;
		Lg2 = СтруктураПоМетро.Широта;
		Если ЗначениеЗаполнено(Lt1) И ЗначениеЗаполнено(Lg1) 
			И ЗначениеЗаполнено(Lt2) И ЗначениеЗаполнено(Lg2) И НЕ Lt1=Lt2 И НЕ Lg1 =Lg2 Тогда
			
			abs = (PI*Lg2/180- PI*Lg1/180);
			
			Если abs < 0 Тогда
				abs = abs* -1;
			КонецЕсли;
		Попытка
			dist = 6372797*acos(sin(PI*Lt1/180)*sin(PI*Lt2/180)+ cos(PI*Lt1/180)* cos(PI*Lt2/180)* cos(abs));							
			dist = ""+Окр((dist/1000),2)+" км";
			
			Возврат Новый Структура("Расстоняие, Метро",dist,ДобавитьМетроНаСервере(СтруктураПоМетро.Имя));  
		Исключение
			Возврат Новый Структура("Расстоняие, Метро",0,ПредопределенноеЗначение("Справочник.ES_Регионы.ПустаяСсылка"));
		КонецПопытки;
		
		Иначе
			Возврат Новый Структура("Расстоняие, Метро",0,ПредопределенноеЗначение("Справочник.ES_Регионы.ПустаяСсылка"));
		КонецЕсли;
	Иначе Возврат Новый Структура("Расстоняие, Метро",0,ПредопределенноеЗначение("Справочник.ES_Регионы.ПустаяСсылка"));
	КонецЕсли;
	//ЕФСОЛ Несторук 05.08.2016 -

	
КонецФункции

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если ВидОперации = "На склад" Тогда
		Объект.ВидЗабора = ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.НаСклад");
	ИначеЕсли ВидОперации = "По пути" Тогда 
		Объект.ВидЗабора = ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.ПоПути");
	ИначеЕсли ВидОперации = "Выезд" Тогда 
		Объект.ВидЗабора = ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.Выезд");
	КонецЕсли;
	ВидЗабораПриИзменении("Ок");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВидОперации ()
	
	ВидОперации = "";
	
	Если Объект.ВидЗабора = ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.НаСклад") Тогда
		ВидОперации = "На склад";
	ИначеЕсли Объект.ВидЗабора = ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.ПоПути")  Тогда 
		ВидОперации = "По пути";
	ИначеЕсли Объект.ВидЗабора = ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.Выезд")	Тогда 
		ВидОперации = "Выезд";
	КонецЕсли;
	
	Возврат ВидОперации;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДопДанныеПоНоменклатуре(ТекНоменклатура)
	
	Коэффициент = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Коэффициент);

	Структура = Новый Структура();
	Структура.Вставить("Вес", ТекНоменклатура.ЭР_Вес);
	Структура.Вставить("Опасность", ТекНоменклатура.ЭР_Опасность);
	ТекОбъем = ТекНоменклатура.ЭР_Длина/100*ТекНоменклатура.ЭР_Высота/100*ТекНоменклатура.ЭР_Ширина/100;
	Структура.Вставить("Объем", ТекОбъем);
	Структура.Вставить("ОбъемныйВес", ОКР(ТекОбъем/Коэффициент,3));

	Возврат Структура;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьПодвал()

	Объект.ОбщийВес = Объект.Грузы.Итог("Вес");
	Объект.ОбщийОбъем = Объект.Грузы.Итог("Объем");
	Объект.ОбщийОбъемныйВес	= Объект.Грузы.Итог("ОбъемныйВес");
	
КонецПроцедуры // ПересчитатьПодвал()


&НаКлиенте
Процедура ЗаказыЗаказПриИзменении(Элемент)	 
	ПересчитатьСтоимостьДокумента();
КонецПроцедуры  


&НаКлиенте
Процедура ЗаказыПослеУдаления(Элемент)
	ПересчитатьСтоимостьДокумента(); 
КонецПроцедуры

//Сбор
&НаКлиенте
Процедура ЗаполнитьРеквизитыДоставкиПоУмолчанию()
	
	Если НЕ Объект.ES_ВидДоставки = ПредопределенноеЗначение("Перечисление.ES_ВидыДоставки.Самовывоз") Тогда
		// Добавить в ТЧ "Товары" Услугу доставки
		ДанныеУслугиДоставки = ПолучитьДанныеУслугиДоставки();
		//ДанныеУслугиСтраховки = ПолучитьДанныеУслугиСтраховки();
		
		НайденныеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура", ДанныеУслугиДоставки.УслугаСбора));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТабличнойЧасти = Объект.Запасы.Добавить();
			СтрокаТабличнойЧасти.Номенклатура 	= ДанныеУслугиДоставки.УслугаСбора;
			СтрокаТабличнойЧасти.Количество = 1;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеУслугиДоставки()
	
	УслугаСбора 			= ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.УслугаСбора);
	//ХарактеристикаУслуги 	= ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Характеристика);
	
	СтруктураДляВозврата = Новый Структура;
	СтруктураДляВозврата.Вставить("УслугаСбора", УслугаСбора);
	//СтруктураДляВозврата.Вставить("ХарактеристикаУслуги", ХарактеристикаУслуги);
	
	Возврат СтруктураДляВозврата;
	
КонецФункции  	

&НаКлиенте
Процедура СоздатьЗаказ(Команда)
	
	Если Объект.ВидЗабора = ПредопределенноеЗначение("Перечисление.ES_ВидыЗабора.ПодЗаказ") Тогда
		Элементы.ЗаказыСоздатьЗаказ.Доступность = Ложь;
	КонецЕсли;    	
	
	Стр = Новый Структура;
	Стр.Вставить("Контрагент", Объект.Заказчик);
	Стр.Вставить("Договор", Объект.ES_Договор);
	Стр.Вставить("Отправитель", Объект.Отправитель);
	Стр.Вставить("Адрес",Объект.Адрес);
	Стр.Вставить("Телефон",Объект.Телефон);
	Стр.Вставить("Метро",Объект.Регион);
	Стр.Вставить("Примечание",Объект.Комментарий);
	Стр.Вставить("ДатаЗабора",Объект.ДатаЗабора);
	Стр.Вставить("ВремяЗабораС",Объект.ВремяЗабораС);
	Стр.Вставить("ВремяЗабораПо",Объект.ВремяЗабораПо);
	Стр.Вставить("КонтактноеЛицо",Объект.КонтактноеЛицо);
	Стр.Вставить("СуммаДокумента",Объект.СуммаДокумента);
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗакрытиеФормыСозданияЗаказа", ЭтотОбъект);
	ОткрытьФорму("Документ.ES_ЗаборГруза.Форма.СозданиеЗаказа",Стр,ЭтаФорма,,,ОписаниеОповещенияОЗакрытии); 	
	
КонецПроцедуры

//&НаСервере
//Процедура ES_АдресДоставкиПриИзмененииНаСервере()
//	Объект.Адрес =""+Объект.ES_Страна+" "+Объект.ES_Индекс+" "+Объект.ES_Области+" "+Объект.ES_Город+" "+Объект.ES_АдресДоставки;
//КонецПроцедуры

&НаКлиенте
Процедура ES_АдресДоставкиПриИзменении(Элемент)
	 ЗаполнитьES_АдресСбора(); 
КонецПроцедуры

&НаКлиенте
Процедура ES_ГородПриИзменении(Элемент)
	 ЗаполнитьES_АдресСбора();  
КонецПроцедуры

&НаКлиенте
Процедура ES_ОбластиПриИзменении(Элемент)
	 ЗаполнитьES_АдресСбора(); 
КонецПроцедуры

//&НаКлиенте
//Процедура ES_СтранаПриИзменении(Элемент)
//	ES_АдресДоставкиПриИзмененииНаСервере();
//КонецПроцедуры

&НаКлиенте
Процедура ES_ИндексПриИзменении(Элемент)
	 ЗаполнитьES_АдресСбора(); 
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьES_АдресСбора()
	//ЕФСОЛ Савченко К.Р. 15.09.2017 +
	
	мАдрес = "";
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_Индекс)),СокрЛП(Объект.ES_Индекс),"");
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_Области)),", "+СокрЛП(Объект.ES_Области),"");
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_Город)),", "+СокрЛП(Объект.ES_Город)+" г","");
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_АдресДоставки)),", "+СокрЛП(Объект.ES_АдресДоставки)+" ул","");
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_АдресДоставкиДом)),", дом № "+СокрЛП(Объект.ES_АдресДоставкиДом),"");
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_АдресДоставкиСтроение)),", строение "+СокрЛП(Объект.ES_АдресДоставкиСтроение),"");
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_АдресДоставкиКорпус)),", корпус "+СокрЛП(Объект.ES_АдресДоставкиКорпус),"");
	мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(Объект.ES_АдресДоставкиКвартира)),", квартира "+СокрЛП(Объект.ES_АдресДоставкиКвартира),"");
	
	Объект.Адрес = мАдрес;
	АдресXML = "";
	ЗаполнитьШиротуИДолготуПоАдресу();
	//ЕФСОЛ Савченко К.Р. 15.09.2017 -
КонецПроцедуры



&НаСервере
Процедура ES_ДоговорПриИзмененииНаСервере()
	мОбъект = РеквизитФормыВЗначение("Объект");
	//мДоговор = мОбъект.ES_Договор;
	Таб = Новый ТаблицаЗначений;   
	Таб.Колонки.Добавить("Номенклатура"); 	
	Таб.Колонки.Добавить("Цена");
	Стр = Таб.Добавить();
	//ES_Шаповал Олег 03.10.2017+
	мСбор = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.УслугаСбора);
	Если мСбор.Пустая() Тогда
		Сообщить("В стартовых настрйках не указана услуга сбора");
		Возврат;
	КонецЕсли;
	//ES_Шаповал Олег 03.10.2017-
	
	Стр.Номенклатура = мСбор;
	Стр.Цена = 0;		
	
	
	//мОбъект = РеквизитФормыВЗначение("Объект");
	Ответ = ES_ОбщегоНазначенияКлиентСервер.ЭР_ОбновитьУслугиТЧДоставки(Таб, мОбъект.Дата, мОбъект.ES_Договор,,,,Макс(мОбъект.ОбщийВес,мОбъект.ОбщийОбъемныйВес));
	//Возврат Таб;    
	Объект.ES_Стоимость = Таб.Итог("Цена");

	Если Объект.ES_Стоимость <> 0 тогда
		Элементы.АктивныйЗаказ.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ES_ДоговорПриИзменении(Элемент)
	ES_ДоговорПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбщийВесПриИзменении(Элемент)
	ES_ДоговорПриИзмененииНаСервере();
	//ПересчитатьСтоимостьДокумента(); 
КонецПроцедуры

&НаКлиенте
Процедура ОбщийОбъемныйВесПриИзменении(Элемент)
	ES_ДоговорПриИзмененииНаСервере();
	//ПересчитатьСтоимостьДокумента();    	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)	
	ES_ДоговорПриИзмененииНаСервере();
	ПересчитатьСтоимостьДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ES_СтоимостьПриИзменении(Элемент)  		

	Если ЗначениеЗаполнено(Объект.ES_Стоимость) тогда
		Элементы.АктивныйЗаказ.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ES_АдресДоставкиДомПриИзменении(Элемент)
	 ЗаполнитьES_АдресСбора(); 
КонецПроцедуры

&НаКлиенте
Процедура ES_АдресДоставкиСтроениеПриИзменении(Элемент)
	 ЗаполнитьES_АдресСбора(); 
КонецПроцедуры

&НаКлиенте
Процедура ES_АдресДоставкиКорпусПриИзменении(Элемент)
	 ЗаполнитьES_АдресСбора(); 
КонецПроцедуры

&НаКлиенте
Процедура ES_АдресДоставкиКвартираПриИзменении(Элемент)
	 ЗаполнитьES_АдресСбора(); 
КонецПроцедуры

&НаКлиенте
Процедура ES_ИзКЛАДРПриИзменении(Элемент)
	ES_УстановитьДоступностьФормыАдреса(Объект.ES_ИзКЛАДР);
КонецПроцедуры

&НаКлиенте
Процедура ES_УстановитьДоступностьФормыАдреса(Кладр)	
	Элементы.Адрес.Доступность = Кладр;
	Элементы.СборАдрес.Доступность = НЕ Кладр;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодЗаказаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
	Если НЕ ПустаяСтрока(Результат) Тогда
		ДанныеПоЗаказу = НайтиЗаказПоШтрихКодуНаСервере(Результат);
		Если НЕ ЗначениеЗаполнено(ДанныеПоЗаказу.Заказ) Тогда
			Если ДанныеПоЗаказу.Свойство("Сообщение") Тогда
				Сообщить(ДанныеПоЗаказу.Сообщение);
			Иначе
				Сообщить("Заказ не найден");
			КонецЕсли;
			
		Иначе
			
			НайденныеСтроки = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", ДанныеПоЗаказу.Заказ));
			Если НайденныеСтроки.Количество() >= 1 Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "" + ДанныеПоЗаказу.Заказ + " уже есть в табличной части";
				Сообщение.Сообщить();
				
				Возврат;
			Иначе
				НовСтр = Объект.Заказы.Добавить();
				НовСтр.Заказ = ДанныеПоЗаказу.Заказ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура НайтиЗаказПоШтрихКоду(Команда)
	ОчиститьСообщения();
	
	ТекШтрихкод = "";	
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ОбработатьШтрихкодЗаказаЗавершение", ЭтаФорма), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));

КонецПроцедуры

&НаСервере
Функция НайтиЗаказПоШтрихКодуНаСервере(Результат)
	
	Структура = Новый Структура ("Заказ", Документы.ЗаказПокупателя.ПустаяСсылка());
	ИскатьПоВхНакладной = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ПоискЗаказовПоВхНакладной);
	
	Если ЗначениеЗаполнено(ИскатьПоВхНакладной) Тогда
		Если ИскатьПоВхНакладной Тогда
			Условие = "ВхНакладная";
		Иначе
			Условие = "НомерНакладной";
		КонецЕсли;
	Иначе 
		Условие = "НомерНакладной";
	КонецЕсли;
	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказ,
		|   ES_ДанныеПоЗаказамСрезПоследних.ВидДоставки
		|ПОМЕСТИТЬ ВТ_Заказ
		|ИЗ
		|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(, "+Условие+" = &НомерНакладной И ВидДоставки <> ЗНАЧЕНИЕ(Перечисление.ES_ВидыДоставки.СкладСклад)) КАК ES_ДанныеПоЗаказамСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Заказ.Заказ,
		|	ВТ_Заказ.ВидДоставки,
		|	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа
		|ИЗ
		|	ВТ_Заказ КАК ВТ_Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(
		|				,
		|				Заказ В
		|					(ВЫБРАТЬ
		|						ВТ_Заказ.Заказ
		|					ИЗ
		|						ВТ_Заказ КАК ВТ_Заказ)) КАК ES_СтатусыЗаказовСрезПоследних
		|		ПО ВТ_Заказ.Заказ = ES_СтатусыЗаказовСрезПоследних.Заказ";
		

	Запрос.УстановитьПараметр("НомерНакладной", Результат);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗАпроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если Выборка.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Подготовлен ИЛИ
			Выборка.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Назначен	Тогда
			Структура =  Новый Структура("Заказ", Выборка.Заказ);
		Иначе
			мСообщение = ("Невозможно добавить Документ " + Выборка.Заказ + " в статусе " + Выборка.СтатусЗаказа);
			Структура.Вставить("Сообщение", мСообщение);
		КонецЕсли;
		
	Иначе
		мСообщение = ("Заказ не найден");
		Структура.Вставить("Сообщение", мСообщение);
	КонецЕсли;
	

Возврат Структура;
	
КонецФункции

&НаКлиенте
Процедура ES_ПрикрепленныеИзображенияПриАктивизацииСтроки(Элемент)
	//EFSOL_Сальник К.А. 2019-05-15 {+
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		ES_Изображение = Неопределено;
	Иначе
		Изображение = Элемент.ТекущиеДанные.ИмяФайла;
		ES_Изображение = ПоместитьВоВременноеХранилище(ПолучитьНаСервереКартинку(Изображение));
	КонецЕсли;
	//EFSOL_Сальник К.А.  -}

КонецПроцедуры

&НаСервере
Функция ПолучитьНаСервереКартинку(ИмяФайла)
	
	//EFSOL_Сальник К.А. 2019-05-15 {+	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ES_ПрикрепленныеИзображения.ХранилищеЗначения КАК ХранилищеЗначения
		|ИЗ
		|	РегистрСведений.ES_ПрикрепленныеИзображения КАК ES_ПрикрепленныеИзображения
		|ГДЕ
		|	ES_ПрикрепленныеИзображения.ДокументДоставки = &ДокументДоставки
		|	И ES_ПрикрепленныеИзображения.ИмяФайла = &ИмяФайла";
	
	Запрос.УстановитьПараметр("ДокументДоставки", Объект.Ссылка);
	Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() <> 1 Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезультатЗапроса[0].ХранилищеЗначения.Получить();
	КонецЕсли;
	//EFSOL_Сальник К.А.  -}
	
КонецФункции

&НаКлиенте
Процедура ES_ДобавитьФото(Команда)
	//EFSOL_Сальник К.А. 2019-06-14 {+
	
	ПараметрыПодключенияGoogleDrive = ПолучитьПараметрыНаСервере();
	Если ПараметрыПодключенияGoogleDrive = Неопределено или не ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.ИдентификаторКлиента) или не ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.СекретКлиента) или не ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.ТокенОбновления) Тогда
			Сообщить("Сервис запрещен в основной системе.");
		Возврат;
	КонецЕсли;

	#Если ВебКлиент Тогда
		
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаДоступностиРасчширенияРаботыСФайлами", ЭтотОбъект);
		МенеджерОборудованияКлиент.ПроверитьДоступностьРасширенияРаботыСФайлами(ОписаниеОповещения, Истина);
		
	#Иначе
		
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.Фильтр = "Все картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|" 
		+ "Формат bmp (*.bmp;*.dib;*.rle)|*.bmp;*.dib;*.rle|"
		+ "Формат JPEG (*.jpg;*.jpeg)|*.jpg;*.jpeg|"
		+ "Формат TIFF (*.tif)|*.tif|"
		+ "Формат GIF (*.gif)|*.gif|"
		+ "Формат PNG (*.png)|*.png|"
		+ "Формат icon (*.ico)|*.ico|"
		+ "Формат метафайл (*.wmf;*.emf)|*.wmf;*.emf|";
		Диалог.МножественныйВыбор = Истина;
		Если Диалог.Выбрать() Тогда
			МассивФайлов = Диалог.ВыбранныеФайлы;
			Для Каждого ПутьКФото из Массивфайлов Цикл
				ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФото);
				ВыполнитьЗаписьВРегистр(ДвоичныеДанные);
			КонецЦикла;	
		КонецЕсли;
	#КонецЕсли

	//EFSOL_Сальник К.А.  -}
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыНаСервере()
//EFSOL_Сальник К.А. 2019-05-08 {+
	
Возврат Обработки.ES_НастройкаGoogleDrive.ПолучитьПараметрыПодключенияGoogleDrive();
//EFSOL_Сальник К.А.  -}
	
КонецФункции

&НаСервере
Процедура ВыполнитьЗаписьВРегистр(ДвоичныеДанные)
	
	//EFSOL_Сальник К.А. 2019-05-06 {	
	Имя = "IMG_" + Формат(ТекущаяДата(),"ДФ=yyyyMMddHHммсс");
	СтруктураОтвет = ЗагрузитьИзображениеНаГуглДиск(Имя, ДвоичныеДанные);
	Если СтруктураОтвет <> Неопределено Тогда
		СсылкаНаДиск = СтруктураОтвет.СсылкаНаДиск;
		ИД = СтруктураОтвет.ИД;
	Иначе
		Возврат;
	КонецЕсли;
	
	ХранилищеЗначения = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	
	МенеджерЗаписи = РегистрыСведений.ES_ПрикрепленныеИзображения.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ТекущаяДата();
	МенеджерЗаписи.ДокументДоставки = Объект.Ссылка;	
	МенеджерЗаписи.Тип = "Сбор";
	МенеджерЗаписи.ХранилищеЗначения = ХранилищеЗначения;
	МенеджерЗаписи.ИмяФайла = Имя;
	МенеджерЗаписи.СсылкаНаДиск = СсылкаНаДиск;
	МенеджерЗаписи.Идентификатор = ИД;
	МенеджерЗаписи.Записать();
	
	Элементы.ES_ПрикрепленныеИзображения.Обновить();
	
	//EFSOL_Сальник К.А.  -}
	
КонецПроцедуры

Функция ЗагрузитьИзображениеНаГуглДиск(Имя, ДвоичныеДанные)
	
	//EFSOL_Сальник К.А. 2019-05-07 {+
	ТокенДоступа = ПолучитьТокенДоступаGoogleDrive();
	
	Каталог = Обработки.ES_НастройкаGoogleDrive.ПолучитьКаталогДляСохраненияНаДиске(Объект.Ссылка, ТекущаяДата());
		
	ПараметрыСоединения = Новый Структура;
	//формируем запрос к gs
	Соединение = Новый HTTPСоединение("www.googleapis.com", 443,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	Заголовки  = Новый Соответствие;
	Заголовки.Вставить("Authorization","Bearer " + ТокенДоступа);
	
	ПараметрыСоединения.Вставить("Заголовки", Заголовки);
	ПараметрыСоединения.Вставить("Соединение", Соединение);
	
	Если ПараметрыСоединения = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;	
	Расширение = ".jpg";
	ТипФайла = Прав(Расширение, СтрДлина(Расширение)-1);
	ВРегТипФайла = ВРег(ТипФайла);
	
	Разделитель = "file_for_drive";
	ЗаголовокПоТипуФайла = СоответствиеТипуФайлаЗаголовкамGoogle()[ВРегТипФайла];
	
	ПараметрыСоединения.Заголовки.Вставить("Content-Type", "multipart/related; boundary=" + Разделитель);
	
	Заголовки = Новый Массив;
	Заголовки.Добавить("Content-Type: application/json; charset=UTF-8");
	
	телозапроса = СтрЗаменить(СформироватьТелоЗапросаСозданиеФайла(ЗаголовокПоТипуФайла, Имя, ТипФайла, Каталог), "\", "");
	ДвоичныеДанныеСообщения = СоздатьСообщение_Текст(Заголовки, ТелоЗапроса);
	
	Заголовки.Очистить();
	Заголовки.Добавить("Content-Type: " + ЗаголовокПоТипуФайла);

	
	ДвоичныеДанныеФайла = СоздатьСообщение_Файл(Заголовки, ДвоичныеДанные);
	
	МассивСообщений = Новый Массив;
	МассивСообщений.Добавить(ДвоичныеДанныеСообщения);
	МассивСообщений.Добавить(ДвоичныеДанныеФайла);
	ДвоичныеДанныеТело = ПолучаемДвоичныеДанныеДляПакетныхСообщенийHTTP(Разделитель, МассивСообщений);
	
	TeamDrives = "false";
	
	ЗапросHTTP = Новый HTTPЗапрос(СтрШаблон("%1?uploadType=multipart", "/upload/drive/v2/files"), ПараметрыСоединения.Заголовки);
		
	ЗапросHTTP.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанныеТело);
	
	Ответ = ПараметрыСоединения.Соединение.ВызватьHTTPМетод("POST", ЗапросHTTP);
	
	Если Не Ответ.КодСостояния = 200 Тогда
		ТекстОшибок = СтрШаблон("Ошибка HTTP запроса %1, код ошибки %2", Ответ.ПолучитьТелоКакСтроку(), Ответ.КодСостояния);
		Возврат Неопределено;
	Иначе 
		телоОтвета = Ответ.ПолучитьтелоКакСтроку();
		ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
		ТелоОтвета =  ОбработкаJSON.UnJSON(телоОтвета);
		СсылкаНаДиск = телоОтвета.Получить("defaultOpenWithLink");
		ИД = телоОтвета.Получить("id");
		Если ЗначениеЗаполнено(СсылкаНаДиск) и ЗначениеЗаполнено(ИД) Тогда
			СтруктураОтвет = Новый Структура;
			СтруктураОтвет.Вставить("СсылкаНаДиск", СсылкаНаДиск);
			СтруктураОтвет.Вставить("ИД", ИД);
			Возврат СтруктураОтвет;	
		иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	//EFSOL_Сальник К.А.  -}
	
КонецФункции

Функция ПолучитьТокенДоступаGoogleDrive()
	//EFSOL_Сальник К.А. 2019-05-08 {+
	
	ПараметрыПодключенияGoogleDrive = Обработки.ES_НастройкаGoogleDrive.ПолучитьПараметрыПодключенияGoogleDrive();
	Если ПараметрыПодключенияGoogleDrive = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.ВремяЖизниТокена) и ТекущаяДата() <= ПараметрыПодключенияGoogleDrive.ВремяЖизниТокена и ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.ТокенДоступа) Тогда
		Возврат ПараметрыПодключенияGoogleDrive.ТокенДоступа;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.ИдентификаторКлиента) и  ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.СекретКлиента) и ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.ТокенОбновления) Тогда
		Если Обработки.ES_НастройкаGoogleDrive.ОбновитьТокенДоступа() Тогда
			ПараметрыПодключенияGoogleDrive = Обработки.ES_НастройкаGoogleDrive.ПолучитьПараметрыПодключенияGoogleDrive();
			Возврат ПараметрыПодключенияGoogleDrive.ТокенДоступа;
		Иначе
			Возврат Неопределено;
		КонецЕсли;	 
	КонецЕсли;
	
	//EFSOL_Сальник К.А.  -}

КонецФункции

Функция СоответствиеТипуФайлаЗаголовкамGoogle()
	
	//EFSOL_Сальник К.А. 2019-05-07 {+	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("GIF", "image/gif");
	Соответствие.Вставить("GPEG", "image/jpeg");
	Соответствие.Вставить("PNG", "image/png");
	Соответствие.Вставить("SVG", "image/svg+xml");
	Соответствие.Вставить("TIF", "image/tiff");
	Соответствие.Вставить("TIFF", "image/tiff");
	Соответствие.Вставить("ICO", "image/x-icon");
	Соответствие.Вставить("WBMP", "image/vnd.wap.wbmp");
	Соответствие.Вставить("WEBP", "image/webp");
	Соответствие.Вставить("JFIF", "image/jpeg");
	Соответствие.Вставить("JPE", "image/jpeg");
	Соответствие.Вставить("JPEG", "image/jpeg");
	Соответствие.Вставить("JPG", "image/jpeg");          
	Соответствие.Вставить("JPS", "image/x-jps");
	Соответствие.Вставить("PCT", "image/x-pict");
	Соответствие.Вставить("PCX", "image/x-pcx");
	Соответствие.Вставить("PIC", "image/pict");
	Соответствие.Вставить("PICT", "image/pict");
	Соответствие.Вставить("PNG", "image/png");
	Соответствие.Вставить("BM", "image/bmp");
	Соответствие.Вставить("BMP", "image/bmp");
	Соответствие.Вставить("DOC", "application/msword");
	
	Возврат	Соответствие;
	//EFSOL_Сальник К.А.  -}

КонецФункции	

Функция СоздатьСообщение_Текст(ЗаголовкиСообщения, ДвоичныеДанныеТекст)  
	
	//EFSOL_Сальник К.А. 2019-05-07 {+
	Поток = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Поток);
	
	// Заголовки.
	Для Каждого Стр Из ЗаголовкиСообщения Цикл 
		ЗаписьДанных.ЗаписатьСтроку(Стр);
	КонецЦикла;	
	ЗаписьДанных.ЗаписатьСтроку("");
	
	// Тело.
	ЗаписьДанных.ЗаписатьСтроку(ДвоичныеДанныеТекст);
	ЗаписьДанных.Закрыть();
	
	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
	//EFSOL_Сальник К.А.  -}
	
КонецФункции

Функция СформироватьТелоЗапросаСозданиеФайла(ЗаголовокПоТипуФайла, Имя, Расширение, Каталог)
	
	//EFSOL_Сальник К.А. 2019-05-07 {+
	 Структурателазапроса = Новый Структура;
	 Структурателазапроса.Вставить("kind", "drive#file");
	 Структурателазапроса.Вставить("title", Имя);
	 Структурателазапроса.Вставить("mimeType", ЗаголовокПоТипуФайла);
	//Структурателазапроса.Вставить("fileSize", Размер);
	 Структурателазапроса.Вставить("fileExtension", Расширение);
	 Если Каталог <> Неопределено Тогда
		 Родители = Новый Массив;
		 Родитель = Новый Структура;
		 Родитель.Вставить("id", Каталог);
		 Родители.Добавить(Родитель);
		 Структурателазапроса.Вставить("parents", Родители);
	 КонецЕсли;
	 ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
	 Возврат ОбработкаJSON.JSON(Структурателазапроса);
	 //EFSOL_Сальник К.А.  -}

КонецФункции

Функция СоздатьСообщение_Файл(ЗаголовкиСообщения, ДвоичныеДанныеФайла)  
	
	//EFSOL_Сальник К.А. 2019-05-07 {+
	Поток = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Поток);
	
	// Заголовки.
	Для Каждого Стр Из ЗаголовкиСообщения Цикл 
		ЗаписьДанных.ЗаписатьСтроку(Стр);
	КонецЦикла;	
	ЗаписьДанных.ЗаписатьСтроку("");

	// Тело.
	ЗаписьДанных.Записать(ДвоичныеДанныеФайла);	
	ЗаписьДанных.Закрыть();
	
	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
	//EFSOL_Сальник К.А.  -}
	
КонецФункции

Функция ПолучаемДвоичныеДанныеДляПакетныхСообщенийHTTP(Разделитель, МассивДвоичныхДанных)  
	
	//EFSOL_Сальник К.А. 2019-05-07 {+
	ПотокТело = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(ПотокТело);
	
	Для Каждого Стр Из МассивДвоичныхДанных Цикл 
		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
		ЗаписьДанных.Записать(Стр);
	КонецЦикла;	
	
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + "--");

	ЗаписьДанных.Закрыть();
	
	Возврат ПотокТело.ЗакрытьИПолучитьДвоичныеДанные();
	//EFSOL_Сальник К.А.  -}
	
КонецФункции

&НаКлиенте
Процедура ES_УдалитьФото(Команда)
	//EFSOL_Сальник К.А. 2019-06-14 {+
	
	ПараметрыПодключенияGoogleDrive = ПолучитьПараметрыНаСервере();
	Если ПараметрыПодключенияGoogleDrive = Неопределено или не ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.ИдентификаторКлиента) или не ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.СекретКлиента) или не ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.ТокенОбновления) Тогда
			Сообщить("Сервис запрещен в основной системе.");
		Возврат;
	КонецЕсли;

	МассивСтрок = Элементы.ES_ПрикрепленныеИзображения.ВыделенныеСтроки;
	
	Если  МассивСтрок.Количество() > 0 Тогда
		Парам = Новый Структура;
		Парам.Вставить("МассивСтрок", МассивСтрок);
		Оповещение = Новый ОписаниеОповещения("ОбработкаУдалениеФото",ЭтотОбъект, Парам);
		ПоказатьВопрос(Оповещение, "Вы уверены что хотите удалить фотограию?", РежимДиалогаВопрос.ДаНет); 	
	КонецЕсли;

	//EFSOL_Сальник К.А.  -}
КонецПроцедуры

&НаКлиенте 
Процедура ОбработкаУдалениеФото(Результат,Параметры) Экспорт
	//EFSOL_Сальник К.А. 2019-06-14 {+
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		МассивСтрок = Параметры.МассивСтрок;
		
		МассивИзображений = Новый Массив;
		Для каждого СтрокаСписка Из МассивСтрок Цикл
			МассивИзображений.Добавить(Элементы.ES_ПрикрепленныеИзображения.ДанныеСтроки(СтрокаСписка).ИмяФайла);
		КонецЦикла;
		
		УдалитьНаСервере(МассивИзображений);
		
		Элементы.ES_ПрикрепленныеИзображения.Обновить();
	КонецЕсли;

	//EFSOL_Сальник К.А.  -}
КонецПроцедуры

&НаСервере
Процедура УдалитьНаСервере(МассивИзображений)
	//EFSOL_Сальник К.А. 2019-06-14 {+

	Для каждого ИмяФайла Из МассивИзображений Цикл
		
		ДокументДоставки = Объект.Ссылка;
		
		ИД = Новый Массив;
		ИД.Добавить(ПолучитьИдентификаторИзображения(ДокументДоставки, ИмяФайла));
		УдалитьИзображениеНаГуглДиске(ИД);	
		
		НаборЗаписи = РегистрыСведений.ES_ПрикрепленныеИзображения.СоздатьНаборЗаписей();
		НаборЗаписи.Отбор.ДокументДоставки.Установить(ДокументДоставки);
		НаборЗаписи.Отбор.ИмяФайла.Установить(ИмяФайла);
		НаборЗаписи.Прочитать();
		НаборЗаписи.Очистить();
		НаборЗаписи.Записать();

	КонецЦикла;
	//EFSOL_Сальник К.А.  -}
КонецПроцедуры

&НаСервере
Функция ПолучитьИдентификаторИзображения(ДокументДоставки, ИмяФайла)
	//EFSOL_Сальник К.А. 2019-05-13 {+
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ES_ПрикрепленныеИзображенияСрезПоследних.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ES_ПрикрепленныеИзображения.СрезПоследних(
		|			,
		|			ДокументДоставки = &ДокументДоставки
		|				И ИмяФайла = &ИмяФайла) КАК ES_ПрикрепленныеИзображенияСрезПоследних";
	
	Запрос.УстановитьПараметр("ДокументДоставки", ДокументДоставки);
	Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() <> 1 Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезультатЗапроса[0].Идентификатор;
	КонецЕсли;
	//EFSOL_Сальник К.А.  -}
КонецФункции

Процедура УдалитьИзображениеНаГуглДиске(ИД)
	
	//EFSOL_Сальник К.А. 2019-05-07 {+
	ТокенДоступа = ПолучитьТокенДоступаGoogleDrive();

	Для Каждого Элемент из ИД Цикл
		Если ЗначениеЗаполнено(Элемент) Тогда				
			ПараметрыСоединения = Новый Структура;
			//формируем запрос к gs
			Соединение = Новый HTTPСоединение("www.googleapis.com", 443,,,,,Новый ЗащищенноеСоединениеOpenSSL);
			Заголовки  = Новый Соответствие;
			Заголовки.Вставить("Authorization","Bearer " + ТокенДоступа);
			
			ПараметрыСоединения.Вставить("Заголовки", Заголовки);
			ПараметрыСоединения.Вставить("Соединение", Соединение);
			
			Если ПараметрыСоединения = Неопределено Тогда 
				Возврат;
			КонецЕсли;	
			
			ЗапросHTTP = Новый HTTPЗапрос("/drive/v2/files/" + Элемент, ПараметрыСоединения.Заголовки);
			
			Ответ = ПараметрыСоединения.Соединение.Удалить(ЗапросHTTP);
			
			Если Не Ответ.КодСостояния = 200 или Не Ответ.КодСостояния = 204 Тогда
				ТекстОшибок = СтрШаблон("Ошибка HTTP запроса %1, код ошибки %2", Ответ.ПолучитьТелоКакСтроку(), Ответ.КодСостояния);
			Иначе 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//EFSOL_Сальник К.А.  -}
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыСозданияЗаказа(Результат, ДополниельныеПараметры) Экспорт
	
	ЭтаФорма.ОбновитьОтображениеДанных(Элементы.Заказы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаДоступностиРасчширенияРаботыСФайлами(Результат, ДополнительныеПараметры) Экспорт
	
	#Если ВебКлиент Тогда
		
		Если Результат = Истина Тогда
			ЗагрузитьФайл();
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайл()
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогВыбораФайла.Фильтр = "Все картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|" 
		+ "Формат bmp (*.bmp;*.dib;*.rle)|*.bmp;*.dib;*.rle|"
		+ "Формат JPEG (*.jpg;*.jpeg)|*.jpg;*.jpeg|"
		+ "Формат TIFF (*.tif)|*.tif|"
		+ "Формат GIF (*.gif)|*.gif|"
		+ "Формат PNG (*.png)|*.png|"
		+ "Формат icon (*.ico)|*.ico|"
		+ "Формат метафайл (*.wmf;*.emf)|*.wmf;*.emf|"; 
	ДиалогВыбораФайла.ПолноеИмяФайла = "";
	ДиалогВыбораФайла.МножественныйВыбор = Истина;
	ДиалогВыбораФайла.Заголовок = "Выберите файлы";
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПослеВыбораФайлаДляЗаписи", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);

КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ОповещениеПослеВыбораФайлаДляЗаписи(ВыбранныеФайлы, ДопПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив")	Тогда
		Для Каждого мФайл из ВыбранныеФайлы Цикл
			ОписаниеФайла = новый ОписаниеПередаваемогоФайла();
			ОписаниеФайла.Имя = мФайл;
			ПомещаемыеФайлы = новый Массив;
			ПомещаемыеФайлы.Добавить(ОписаниеФайла);
			Расширение = Прав(ОписаниеФайла.Имя,СтрДлина(ОписаниеФайла.Имя)-Найти(ОписаниеФайла.Имя,"."));
			Структура = Новый Структура;
			Структура.Вставить("Расширение", Расширение); 
			Оповещение = новый ОписаниеОповещения("ОповещениеПомещениеФайла", ЭтотОбъект, Структура);		
			НачатьПомещениеФайлов(Оповещение, ПомещаемыеФайлы,, Ложь, ЭтаФорма.УникальныйИдентификатор);
		КонецЦикла;	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПомещениеФайла(ПомещенныеФайлы, ДопПараметры)Экспорт
	
	Если ТипЗнч(ПомещенныеФайлы) = Тип("Массив")	Тогда
		Для Каждого ПутьКФото из ПомещенныеФайлы Цикл
			ОбработатьФайл(ПутьКФото.Хранение);
		КонецЦикла;	
	КонецЕсли; 
	
КонецПроцедуры 

&НаСервере
Процедура ОбработатьФайл(АдресФайлаДанных)Экспорт
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаДанных);	
	ВыполнитьЗаписьВРегистр(ДвоичныеДанные);
		
КонецПроцедуры 

#КонецОбласти      
