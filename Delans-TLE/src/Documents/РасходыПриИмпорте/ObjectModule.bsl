#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область Служебные

Функция РаспределитьЗапасыПоРазделам(ИсходнаяТаблицаЗапасов) Экспорт
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ТаблицаРазделы", Документы.РасходыПриИмпорте.ПустаяСсылка().Разделы.Выгрузить());
	СтруктураТаблиц.Вставить("ТаблицаЗапасы", Документы.РасходыПриИмпорте.ПустаяСсылка().Запасы.Выгрузить());
	
	КвалификаторыЧисла = Новый КвалификаторыЧисла(2);
	СтруктураТаблиц.ТаблицаРазделы.Колонки.Добавить("СтавкаВвознойПошлины", Новый ОписаниеТипов(КвалификаторыЧисла));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсходнаяТаблицаЗапасов", ИсходнаяТаблицаЗапасов);
	
	Запрос.Текст = 
	"Выбрать
	|	-1 																			КАК НомерРаздела
	|	,Выразить(ИсходнаяТаблицаЗапасов.Номенклатура КАК Справочник.Номенклатура)	КАК Номенклатура
	|	,ИсходнаяТаблицаЗапасов.Характеристика										КАК Характеристика
	|	,ИсходнаяТаблицаЗапасов.Партия												КАК Партия
	|	,ИсходнаяТаблицаЗапасов.Количество											КАК Количество
	|	,ИсходнаяТаблицаЗапасов.Сумма												КАК Сумма
	|	,ИсходнаяТаблицаЗапасов.Сумма												КАК ФактурнаяСтоимость
	|	,ИсходнаяТаблицаЗапасов.СтавкаНДС											КАК СтавкаНДС
	|	,ИсходнаяТаблицаЗапасов.СуммаНДС											КАК СуммаНДС
	|	,0																			КАК СуммаСбора
	|	,ИсходнаяТаблицаЗапасов.СтранаПроисхождения									КАК СтранаПроисхождения
	|	,Выразить(ИсходнаяТаблицаЗапасов.Заказ КАК Документ.ЗаказПоставщику)		КАК ЗаказПоставщика
	|Поместить врИсходнаяТаблицаЗапасов
	|Из &ИсходнаяТаблицаЗапасов КАК ИсходнаяТаблицаЗапасов
	|
	|;Выбрать 
	|	ИсходнаяТаблицаЗапасов.НомерРаздела											КАК НомерРаздела
	|	,ИсходнаяТаблицаЗапасов.Номенклатура 										КАК Номенклатура
	|	,ИсходнаяТаблицаЗапасов.Номенклатура.ТоварнаяНоменклатураВЭД.Код			КАК КодТНВЭД
	|	,ИсходнаяТаблицаЗапасов.Номенклатура.ТоварнаяНоменклатураВЭД.ВвознаяПошлина	КАК ВвознаяПошлина
	|	,ИсходнаяТаблицаЗапасов.Характеристика										КАК Характеристика
	|	,ИсходнаяТаблицаЗапасов.Партия												КАК Партия
	|	,ИсходнаяТаблицаЗапасов.Количество											КАК Количество
	|	,ИсходнаяТаблицаЗапасов.Сумма												КАК Сумма
	|	,ИсходнаяТаблицаЗапасов.Сумма												КАК ФактурнаяСтоимость
	|	,ИсходнаяТаблицаЗапасов.СтавкаНДС											КАК СтавкаНДС
	|	,ИсходнаяТаблицаЗапасов.СуммаНДС											КАК СуммаНДС
	|	,0																			КАК СуммаСбора
	|	,ИсходнаяТаблицаЗапасов.СтранаПроисхождения									КАК СтранаПроисхождения
	|	,ИсходнаяТаблицаЗапасов.ЗаказПоставщика.ЗаказПокупателя						КАК ЗаказПокупателя
	|	,Неопределено																КАК ДокументПартии
	|Из врИсходнаяТаблицаЗапасов КАК ИсходнаяТаблицаЗапасов";
	
	НоменклатураИКодыТНВЭД = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТаблицы Из НоменклатураИКодыТНВЭД Цикл
		
		Если ПустаяСтрока(СокрЛП(СтрокаТаблицы.КодТНВЭД)) Тогда
			
			СтрокаТаблицы.КодТНВЭД = "0000000000";
			
		КонецЕсли;
		
		СтрокаТаблицыРазделов = СтруктураТаблиц.ТаблицаРазделы.Найти(СтрокаТаблицы.КодТНВЭД, "КодТНВЭД");
		Если СтрокаТаблицыРазделов = Неопределено Тогда
			
			СтрокаТаблицыРазделов = СтруктураТаблиц.ТаблицаРазделы.Добавить();
			СтрокаТаблицыРазделов.КодТНВЭД = СокрЛП(СтрокаТаблицы.КодТНВЭД);
			СтрокаТаблицыРазделов.СтавкаВвознойПошлины = СтрокаТаблицы.ВвознаяПошлина;
			
		КонецЕсли;
		
		СтрокаТаблицыЗапасов = СтруктураТаблиц.ТаблицаЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗапасов, СтрокаТаблицы);
		
		СтрокаТаблицыЗапасов.НомерРаздела =  СтруктураТаблиц.ТаблицаРазделы.Индекс(СтрокаТаблицыРазделов) + 1;
		
	КонецЦикла;
	
	Возврат СтруктураТаблиц;
	
КонецФункции

Функция РаспределитьСуммыПропорционально(Знач ИсходнаяСумма, КоэффициентыСоответствие, Точность = 2)
	
	Если КоэффициентыСоответствие.Количество() = 0 
		ИЛИ ИсходнаяСумма = 0 
		ИЛИ ИсходнаяСумма = Null Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ИндексМакс = 0;
	МаксЗнач   = 0;
	РаспрСумма = 0;
	СуммаКоэф  = 0;
	
	Для каждого ЭлементСоответствия Из КоэффициентыСоответствие Цикл
		
		МодульЧисла = ?(ЭлементСоответствия.Значение > 0, ЭлементСоответствия.Значение, - ЭлементСоответствия.Значение);
		
		Если МаксЗнач < МодульЧисла Тогда
			
			МаксЗнач = МодульЧисла;
			ИндексМакс = ЭлементСоответствия.Ключ;
			
		КонецЕсли;
		
		СуммаКоэф = СуммаКоэф + ЭлементСоответствия.Значение;
		
	КонецЦикла;
	
	Если СуммаКоэф = 0 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	СоответствиеНовыхСумм = Новый Соответствие;
	Для каждого ЭлементСоответствия Из КоэффициентыСоответствие Цикл
		
		НоваяСумма = Окр(ИсходнаяСумма * ЭлементСоответствия.Значение / СуммаКоэф, Точность, 1);
		СоответствиеНовыхСумм.Вставить(ЭлементСоответствия.Ключ, НоваяСумма);
		РаспрСумма = РаспрСумма + НоваяСумма;
		
	КонецЦикла;
	
	// Погрешности округления отнесем на коэффициент с максимальным весом
	Если Не РаспрСумма = ИсходнаяСумма Тогда
		
		ЗначениеЭлемента = СоответствиеНовыхСумм.Получить(ИндексМакс);
		ЗначениеЭлемента = ЗначениеЭлемента + (ИсходнаяСумма - РаспрСумма);
		
		СоответствиеНовыхСумм.Вставить(ИндексМакс, ЗначениеЭлемента);
		
	КонецЕсли;
	
	Возврат СоответствиеНовыхСумм;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыЗаполненияДокумента

// Процедура заполнения документа на основании приходная накладной.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.ПриходнаяНакладная - приходная накладная
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоПриходнойНакладной(ДанныеЗаполнения) Экспорт
	
	Организация				= ДанныеЗаполнения.Организация;
	СтруктурнаяЕдиница		= ДанныеЗаполнения.СтруктурнаяЕдиница;
	ВалютаДокумента			= Константы.НациональнаяВалюта.Получить();
	ВалютаДокументаОснования= ДанныеЗаполнения.ВалютаДокумента;
	Курс					= 1;
	Кратность				= 1;
	КурсДокументаОснования	= ДанныеЗаполнения.Курс;
	КратностьДокументаОснования = ДанныеЗаполнения.Кратность;
	СуммаВключаетНДС		= ДанныеЗаполнения.СуммаВключаетНДС;
	НДСВключатьВСтоимость	= Истина;
	НалогообложениеНДС		= Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
	ДокументПоступления		= ДанныеЗаполнения.Ссылка;
	
	Если ДанныеЗаполнения.Запасы.Количество() > 0 Тогда
		
		НомерГТД			= ДанныеЗаполнения.Запасы[0].НомерГТД;
		
	КонецЕсли;
	
	СуммаДокумента = 0;
	
	Разделы.Очистить();
	Запасы.Очистить();
	
	ИсходнаяТаблицаЗапасов = ДанныеЗаполнения.Запасы.Выгрузить();
	
	СтруктураТаблиц = Неопределено;
	Если ИсходнаяТаблицаЗапасов.Количество() > 0 Тогда
		
		СтруктураТаблиц = РаспределитьЗапасыПоРазделам(ИсходнаяТаблицаЗапасов);
		
	КонецЕсли;
	
	Если СтруктураТаблиц <> Неопределено Тогда
		
		ОтборСтрок = Новый Структура("НомерРаздела", -1);
		
		Для каждого Раздел Из СтруктураТаблиц.ТаблицаРазделы Цикл
			
			ОтборСтрок.НомерРаздела = СтруктураТаблиц.ТаблицаРазделы.Индекс(Раздел) + 1;
			МассивСтрокЗапасов = СтруктураТаблиц.ТаблицаЗапасы.НайтиСтроки(ОтборСтрок);
			Если МассивСтрокЗапасов.Количество() < 1 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НовыйРаздел = Разделы.Добавить();
			НовыйРаздел.СтавкаНДС		= Справочники.СтавкиНДС.СтавкаНДС(Организация.ВидСтавкиНДСПоУмолчанию);
			НовыйРаздел.СтавкаПошлины	= Раздел.СтавкаВвознойПошлины;
			НовыйРаздел.КодТНВЭД		= Раздел.КодТНВЭД;
			НовыйРаздел.СчетУчетаНДС	= ПланыСчетов.Управленческий.Налоги;
			
			СтрокаСведений = НСтр("ru ='Код товаров: %1, строк в разделе: %2'");
			НовыйРаздел.СведенияОРазделеГТД = СтрШаблон(СтрокаСведений, НовыйРаздел.КодТНВЭД, МассивСтрокЗапасов.Количество());
			
			Для каждого СтрокаТабличнойЧасти Из МассивСтрокЗапасов Цикл
				
				НоваяСтрока = Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
				
				НоваяСтрока.НомерРаздела		= ОтборСтрок.НомерРаздела;
				НоваяСтрока.СуммаПошлины		= ОКР(НоваяСтрока.ФактурнаяСтоимость * НовыйРаздел.СтавкаПошлины / 100, 2);
				НоваяСтрока.ДокументПартии		= ДанныеЗаполнения.Ссылка;
				
				Если ВалютаДокумента <> ВалютаДокументаОснования Тогда
					
					НоваяСтрока.СуммаПошлины		= Окр(НоваяСтрока.СуммаПошлины * КурсДокументаОснования / КратностьДокументаОснования, 2);
					НоваяСтрока.ФактурнаяСтоимость	= Окр(НоваяСтрока.ФактурнаяСтоимость * КурсДокументаОснования / КратностьДокументаОснования, 2);
					НоваяСтрока.СуммаНДС			= Окр(НоваяСтрока.СуммаНДС * КурсДокументаОснования / КратностьДокументаОснования, 2);
					
				КонецЕсли;
				
				НовыйРаздел.ТаможеннаяСтоимость	= НовыйРаздел.ТаможеннаяСтоимость + НоваяСтрока.ФактурнаяСтоимость;
				НовыйРаздел.СуммаПошлины		= НовыйРаздел.СуммаПошлины + НоваяСтрока.СуммаПошлины;
				НовыйРаздел.СуммаНДС			= НовыйРаздел.СуммаНДС + НоваяСтрока.СуммаНДС;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СуммаДокумента = Разделы.Итог("СуммаНДС") + Разделы.Итог("СуммаПошлины") + ТаможенныйСбор + ТаможенныйШтраф;
	
	//
	// Корректное распределение суммы сбора можно произвести только после заполнения ТЧ Запасы
	//
	Если ТаможенныйСбор > 0
		И Запасы.Количество() > 1 Тогда
		
		СоответствиеСтарыхСумм = Новый Соответствие;
		Для каждого СтрокаЗапасов Из Запасы Цикл
			
			СоответствиеСтарыхСумм.Вставить(Запасы.Индекс(СтрокаЗапасов), СтрокаЗапасов.ФактурнаяСтоимость);
			
		КонецЦикла;
		
		СоответствиеНовыхСумм = РаспределитьСуммыПропорционально(ТаможенныйСбор, СоответствиеСтарыхСумм);
		
		Если ТипЗнч(СоответствиеНовыхСумм) = Тип("Соответствие") Тогда
			
			Для каждого ЭлементСоответствия Из СоответствиеНовыхСумм Цикл
				
				СтрокаТаблицы = Запасы.Получить(ЭлементСоответствия.Ключ);
				СтрокаТаблицы.СуммаСбора = ЭлементСоответствия.Значение;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоПриходнойНакладной()

#КонецОбласти

#Область ОбработчикиСобыий

// Процедура - обработчик события ОбработкаЗаполнения.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриходнаяНакладная")] = "ЗаполнитьПоПриходнойНакладной";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
		
	КонецЕсли;
		
	НоменклатураВДокументахСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, Отказ, Истина);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент)
		И НЕ Контрагент.ВестиРасчетыПоДоговорам
		И НЕ ЗначениеЗаполнено(Договор) Тогда
		
		Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.РасходыПриИмпорте.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьРасчетыСПрочимиКонтрагентами(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходы(ДополнительныеСвойства, Движения, Отказ);
	
	УправлениеНебольшойФирмойСервер.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей.
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	//Документы.РасходыПриИмпорте.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.РасходыПриИмпорте.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

#КонецОбласти

#КонецЕсли