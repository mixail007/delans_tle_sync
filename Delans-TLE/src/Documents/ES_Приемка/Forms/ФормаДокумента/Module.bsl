

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		ЗаполнитьОтветственногоНаСервере();		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Склад) Тогда
		Объект.Склад = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Склад);
	КонецЕсли;
	
	
	УстановитьСкладПартнера();
			
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаВажныеКомандыПриемки);
	// Конец СтандартныеПодсистемы.Печать
	ГрузыВРазрезеЗаказов = Истина;
	
	ИспользоватьЯчейки = ПолучитьФункциональнуюОпцию("УчетПоЯчейкам");
	
	Элементы.ЗаказыЯчейка.Видимость = ИспользоватьЯчейки;
			
КонецПроцедуры

&НаСервере
Процедура УстановитьСкладПартнера()
	
	Если РольДоступна("ES_Партнёр") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ES_НастройкаДоступаПользователей.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
		|ИЗ
		|	РегистрСведений.ES_НастройкаДоступаПользователей КАК ES_НастройкаДоступаПользователей
		|ГДЕ
		|	ES_НастройкаДоступаПользователей.Пользователь = &Пользователь";
		
		Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Сообщить("Не указан склад в настройках прав партнера");
		Иначе
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Объект.Склад =  Выборка.СтруктурнаяЕдиница;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	

КонецПроцедуры


&НаСервере
Процедура УстановитьУсловноеОформление() 
	
	УсловноеОформление.Элементы.Очистить();
	//Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
	//	ЦветФона = Новый Цвет(220, 20, 60);
	//	
	//	СписокЗаказов = Новый СписокЗначений;
	//	Для каждого Стр ИЗ Объект.Заказы Цикл
	//		Если НЕ ЗначениеЗаполнено(Стр.ДокументОснование)  Тогда
	//			СписокЗаказов.Добавить(Стр.Заказ);
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	//	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Заказы.Заказ");
	//	ЭлементОтбора.ПравоеЗначение = СписокЗаказов;
	//	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	//	ЭлементОтбора.Использование = Истина;
	//	
	//	Оформление = ЭлементОформления.Поля.Элементы.Добавить();
	//	Оформление.Использование = Истина;
	//	Оформление.Поле = Новый ПолеКомпоновкиДанных("Заказы");
	//	
	//	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);	
	//	ЭлементОформления.Использование = Истина;
	//КонецЕсли;

	//ЭР Несторук С.И. 26.10.2017 14:46:48 {
	//красим заборы и заказы со своими заборами 
	ЦветФона = Новый Цвет(215, 240, 199);
	СписокЗаказов = Новый СписокЗначений;
	
	Для каждого Стр ИЗ Объект.Заказы Цикл
		
		Если ТипЗнч(Стр.Заказ) = Тип("ДокументСсылка.ES_ЗаборГруза") Тогда
			
			СписокЗаказов.Добавить(Стр.Заказ);
		ИначеЕсли ТипЗнч(Стр.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			НайтиСтроки = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", Стр.СвязанныйДокумент));
			Если НайтиСтроки.Количество() > 0 Тогда
				СписокЗаказов.Добавить(Стр.Заказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Заказы.Заказ");
	ЭлементОтбора.ПравоеЗначение = СписокЗаказов;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование = Истина;
	
	Оформление = ЭлементОформления.Поля.Элементы.Добавить();
	Оформление.Использование = Истина;
	Оформление.Поле = Новый ПолеКомпоновкиДанных("Заказы");
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);	
	ЭлементОформления.Использование = Истина;

	//}ЭР Несторук С.И.
	
	Если Не Объект.Склад.Предопределенный Тогда
		Возврат;
	КонецЕсли;
	
	
	ЦветФона = Новый Цвет(51, 204, 204);
	// ТЧ ЗАКАЗЫ
	ЯчейкаИзСтартовых = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ЯчейкаКВыдаче);
	
	СписокЗаказов = Новый СписокЗначений;
	Для каждого Стр ИЗ Объект.Заказы Цикл
		Если Стр.Ячейка = ЯчейкаИзСтартовых ИЛИ КонецДня(Стр.ДатаДоставки) = КонецДня(ТекущаяДата()+24*3600)  Тогда
			СписокЗаказов.Добавить(Стр.Заказ);
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Заказы.Заказ");
	ЭлементОтбора.ПравоеЗначение = СписокЗаказов;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование = Истина;
	
	Оформление = ЭлементОформления.Поля.Элементы.Добавить();
	Оформление.Использование = Истина;
	Оформление.Поле = Новый ПолеКомпоновкиДанных("Заказы");
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);	
	ЭлементОформления.Использование = Истина;
	

	


	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьВЗависимостиОтВидаОперации()
	
	Если Объект.ВидОперации = Перечисления.ES_ВидыОперацийПриемки.НаложенныеПлатежи Тогда
		Элементы.ГруппаЗаказы.Видимость = Ложь;
		Элементы.ГруппаПлатежи.Видимость = Истина;
		Элементы.ГруппаПлатежиПодвал.Видимость = Истина;
		УстановитьВидимостьКассыСчета();
	Иначе
		Элементы.ГруппаЗаказы.Видимость = Истина;
		Элементы.ГруппаПлатежи.Видимость = Ложь;
		Элементы.ГруппаПлатежиПодвал.Видимость = Ложь;
		//Элементы.ЗаказыНедостача.Видимость = ЗначениеЗаполнено(Объект.ДокументОснование);
	КонецЕсли;
	
	
		
КонецПроцедуры


&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	Элементы.ДокументОснование.Видимость = ЗначениеЗаполнено(Объект.ДокументОснование);
	
	//ЭР Несторук С.И. 14.09.2017 21:55:07 {
	УстановитьВидимостьВЗависимостиОтВидаОперации();	
	//}ЭР Несторук С.И.
	
	
	Если Объект.СозданНаОсновании Тогда
		Элементы.ЗаказыПроверен.Видимость = Истина;
		Элементы.ЗаказыИзлишек.Видимость = Истина;
		Элементы.ЗаказыКонтекстноеМенюОтметитьВсе.Видимость = Истина;
		Элементы.ЗаказыКонтекстноеМенюСнятьОтметки.Видимость = Истина;
	Иначе
		Элементы.ЗаказыПроверен.Видимость = Ложь;
		Элементы.ЗаказыИзлишек.Видимость = Ложь;
		Элементы.ЗаказыКонтекстноеМенюОтметитьВсе.Видимость = Ложь;
		Элементы.ЗаказыКонтекстноеМенюСнятьОтметки.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьЭлементов()


//&НаКлиенте 
//Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
//	
//	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект)
//	
//КонецПроцедуры 

&НаКлиенте
Процедура ЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя =  "ЗаказыДатаВремяДобавленияЗаказа"  		 
		ИЛИ Поле.Имя = "ЗаказыЯчейка" 
		ИЛИ Поле.Имя = "ЗаказыОбщийВес"
		ИЛИ Поле.Имя = "ЗаказыДлина"
		ИЛИ Поле.Имя = "ЗаказыВысота"
		ИЛИ Поле.Имя = "ЗаказыШирина"
		ИЛИ Поле.Имя = "ЗаказыПримечание"
		Тогда

	Иначе
		
		Если НЕ Поле.Имя = "ЗаказыЗаказ" 
			И НЕ Поле.Имя = "ЗаказыПланДоставки" Тогда
			ПоказатьЗначение(,Элемент.ТекущиеДанные.Заказ);
		КонецЕсли;
		
		Если  Поле.Имя =  "ЗаказыЗаказ" Тогда
			ПоказатьЗначение(,Элемент.ТекущиеДанные.Заказ);
		КонецЕсли;
		
		Если  Поле.Имя =  "ЗаказыПланДоставки" Тогда
			ПоказатьЗначение(,Элемент.ТекущиеДанные.ПланДоставки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаказыЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	
	СтандартнаяОбработка = Ложь;
	
	Уникальность = "ФормаВыбораЗаказаВДокументПриемка";
	ПараметрыОповещения = Новый Структура("ВидОперации", Объект.ВидОперации);
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьТЧДаннымиЗаказа",ЭтаФорма,ПараметрыОповещения);
	ПараметрыФормы = Новый Структура("ВызваноИзES_Приемка", Истина);	
	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаВыбора", ПараметрыФормы , ЭтаФорма, Уникальность, , , Оповещение);

	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТЧДаннымиЗаказа(Заказ, Параметры) Экспорт
	
	ВидОперации = Параметры.ВидОперации;
	// Запрет добавления одного заказа дважды
	НайденныеСтроки = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", Заказ));
	Если НайденныеСтроки.Количество() >= 1 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "" + Заказ + " уже есть в табличной части";
		Сообщение.Сообщить();
		
		Возврат;
	Иначе
		Элементы.Заказы.ТекущиеДанные.Заказ = Заказ;
		ЗаполнитьТЧНаСервере(Заказ,Истина,ВидОперации);
		//ДанныеЗаполнения = ПолучитьДанныеДляТЧЗаказыНаСервере(Заказ);
		//Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда Тогда
		//	Сообщить(ДанныеЗаполнения.Сообщение)
		//ИначеЕсли ТипЗнч(ДанныеЗаполнения) + Тип("Массив") Тогда
		//	ДанныеПоЗаказу = ДанныеЗаполнения.СтруктураПоЗаказу;
		//	ДанныеПоТоварам = ДанныеЗаполнения.СтруктураПоТовару;
		//	
		//	Элементы.Заказы.ТекущиеДанные.Заказ 			= Заказ;
		//	Элементы.Заказы.ТекущиеДанные.ПланДоставки 		= ДанныеПоЗаказу.ПланДоставки;
		//	Элементы.Заказы.ТекущиеДанные.Курьер			= ДанныеПоЗаказу.Курьер;
		//	Элементы.Заказы.ТекущиеДанные.Заказчик 			= ДанныеПоЗаказу.Заказчик;
		//	Элементы.Заказы.ТекущиеДанные.НомерНакладной 	= ДанныеПоЗаказу.НомерНакладной;
		//	Элементы.Заказы.ТекущиеДанные.ВхНакладная 		= ДанныеПоЗаказу.ВхНакладная;
		//	
		//КонецЕсли;
	КонецЕсли;
	
	ПересчитатьСуммуДокумента();
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧНаСервере(Заказ, Сканер = Ложь, ВидОперации = Неопределено)
	
	//ЭР Несторук С.И. 22.12.2016 17:15:04 {
	
	НайденнаяСтрока = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", Заказ));
	Если НайденнаяСтрока.Количество() > 0 Тогда
		НоваяСтрока = НайденнаяСтрока[0];
	Иначе
		Возврат;
	КонецЕсли;
	
	ЯчейкаКДоставке = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ЯчейкаКВыдаче);
	ЯчейкаОсновная = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ЯчейкаОсновная);
	ЯчейкаПроблема = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ЯчейкаПроблема);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_ДанныеПоЗаказамСрезПоследних.Заказ КАК Заказ,
	|	ES_ДанныеПоЗаказамСрезПоследних.Заказчик КАК Заказчик,
	|	ES_ДанныеПоЗаказамСрезПоследних.ВхНакладная КАК ВхНакладная,
	|	ES_ДанныеПоЗаказамСрезПоследних.НомерНакладной КАК НомерНакладной,
	|	ES_ДанныеПоЗаказамСрезПоследних.Манифест КАК Манифест,
	|	ES_ДанныеПоЗаказамСрезПоследних.Комментарий КАК Комментарий,
	|	ES_ДанныеПоЗаказамСрезПоследних.Возврат КАК Возврат,
	|	ES_ДанныеПоЗаказамСрезПоследних.ВидДоставки КАК ВидДоставки,
	|	ES_ДанныеПоЗаказамСрезПоследних.ВидЗабора КАК ВидЗабора,
	|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийВес КАК ОбщийВес,
	|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийОбъем КАК ОбщийОбъем,
	|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийОбъемныйВес КАК ОбщийОбъемныйВес,
	|	ES_ДанныеПоЗаказамСрезПоследних.АдресДоставки КАК АдресДоставки,
	|	ES_ДанныеПоЗаказамСрезПоследних.ДатаДоставки КАК ДатаДоставки,
	|	ES_ДанныеПоЗаказамСрезПоследних.КоличествоМест КАК КоличествоМест,
	|	ЗаказПокупателя.Длина КАК Длина,
	|	ЗаказПокупателя.Высота КАК Высота,
	|	ЗаказПокупателя.Ширина КАК Ширина,
	|	ES_ДанныеПоЗаказамСрезПоследних.Проблема КАК Проблема
	|ПОМЕСТИТЬ ВТ_Заказ
	|ИЗ
	|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(, Заказ = &Заказ) КАК ES_ДанныеПоЗаказамСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		ПО ES_ДанныеПоЗаказамСрезПоследних.Заказ = ЗаказПокупателя.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_НоменклатураВЗаказахСрезПоследних.ДокументДоставки КАК ДокументДоставки,
	|	ES_НоменклатураВЗаказахСрезПоследних.Номенклатура КАК Номенклатура,
	|	ES_НоменклатураВЗаказахСрезПоследних.Характеристика КАК Характеристика,
	|	ES_НоменклатураВЗаказахСрезПоследних.Партия КАК Партия,
	|	ES_НоменклатураВЗаказахСрезПоследних.ТипНоменклатурыЗапас КАК ТипНоменклатурыЗапас,
	|	ES_НоменклатураВЗаказахСрезПоследних.Количество КАК Количество,
	|	ES_НоменклатураВЗаказахСрезПоследних.НППлан КАК НППлан,
	|	ES_НоменклатураВЗаказахСрезПоследних.Содержание КАК Содержание,
	|	ES_НоменклатураВЗаказахСрезПоследних.Цена КАК Цена,
	|	ES_НоменклатураВЗаказахСрезПоследних.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ES_НоменклатураВЗаказахСрезПоследних.Вес КАК Вес,
	|	ES_НоменклатураВЗаказахСрезПоследних.Объем КАК Объем,
	|	ES_НоменклатураВЗаказахСрезПоследних.ОбъемныйВес КАК ОбъемныйВес,
	|	ES_НоменклатураВЗаказахСрезПоследних.ОбьявленнаяСтоимость КАК ОбьявленнаяСтоимость,
	|	ES_НоменклатураВЗаказахСрезПоследних.Опасность КАК Опасность,
	|	ES_НоменклатураВЗаказахСрезПоследних.НомерСтроки КАК НомерСтроки,
	|	ES_НоменклатураВЗаказахСрезПоследних.Артикул КАК Артикул,
	|	ES_НоменклатураВЗаказахСрезПоследних.Штрихкод КАК Штрихкод
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	РегистрСведений.ES_НоменклатураВЗаказах.СрезПоследних(
	|			,
	|			ДокументДоставки В
	|				(ВЫБРАТЬ
	|					ВТ_Заказ.Заказ
	|				ИЗ
	|					ВТ_Заказ КАК ВТ_Заказ)) КАК ES_НоменклатураВЗаказахСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Значение, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Курьер,
	|	ЕСТЬNULL(ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Регистратор, ЗНАЧЕНИЕ(Документ.ES_ПланДоставки.ПустаяСсылка)) КАК ПланДоставки,
	|	ВТ_Заказ.Заказ КАК Заказ,
	|	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа КАК СтатусЗаказа,
	|	ВТ_Заказ.Заказчик КАК Заказчик,
	|	ВТ_Заказ.ВхНакладная КАК ВхНакладная,
	|	ВТ_Заказ.НомерНакладной КАК НомерНакладной,
	|	ВТ_Товары.ДокументДоставки КАК ДокументДоставки,
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Характеристика КАК Характеристика,
	|	ВТ_Товары.Партия КАК Партия,
	|	ВТ_Товары.ТипНоменклатурыЗапас КАК ТипНоменклатурыЗапас,
	|	ВТ_Товары.Количество КАК Количество,
	|	ВТ_Товары.НППлан КАК НППлан,
	|	ВТ_Товары.Цена КАК Цена,
	|	ВТ_Товары.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ВТ_Товары.Вес КАК Вес,
	|	ВТ_Товары.Объем КАК Объем,
	|	ВТ_Товары.ОбъемныйВес КАК ОбъемныйВес,
	|	ВТ_Товары.ОбьявленнаяСтоимость КАК ОбьявленнаяСтоимость,
	|	ВТ_Товары.Опасность КАК Опасность,
	|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
	|	ВТ_Заказ.Манифест КАК Реестр,
	|	ВТ_Заказ.Возврат КАК Возврат,
	|	ВТ_Заказ.Комментарий КАК Комментарий,
	|	ВТ_Заказ.ВидДоставки КАК ВидДоставки,
	|	ВТ_Заказ.ВидЗабора КАК ВидЗабора,
	|	ВТ_Заказ.ОбщийВес КАК ОбщийВес,
	|	ВТ_Заказ.ОбщийОбъем КАК ОбщийОбъем,
	|	ВТ_Заказ.ОбщийОбъемныйВес КАК ОбщийОбъемныйВес,
	|	ВТ_Заказ.АдресДоставки КАК АдресДоставки,
	|	ВТ_Товары.Артикул КАК Артикул,
	|	ВТ_Товары.Штрихкод КАК Штрихкод,
	|	ВЫРАЗИТЬ(ES_ИзменяемыеРеквизитыЗаказовЯчейка.Значение КАК Справочник.Ячейки) КАК Ячейка,
	|	ВТ_Заказ.Длина КАК Длина,
	|	ВТ_Заказ.Высота КАК Высота,
	|	ВТ_Заказ.Ширина КАК Ширина,
	|	ВТ_Заказ.КоличествоМест КАК Мест,
	|	ВТ_Заказ.ДатаДоставки КАК ДатаДоставки,
	|	ИСТИНА КАК Недостача,
	|	ЕСТЬNULL(ВТ_Заказ.Проблема, ЛОЖЬ) КАК Проблема
	|ИЗ
	|	ВТ_Заказ КАК ВТ_Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
	|				,
	|				Регистратор ССЫЛКА Документ.ES_ПланДоставки
	|					И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Курьер)
	|					И Заказ В
	|						(ВЫБРАТЬ
	|							ВТ_Заказ.Заказ
	|						ИЗ
	|							ВТ_Заказ КАК ВТ_Заказ)) КАК ES_ИзменяемыеРеквизитыЗаказовСрезПоследних
	|		ПО ВТ_Заказ.Заказ = ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(
	|				,
	|				Заказ В
	|					(ВЫБРАТЬ
	|						ВТ_Заказ.Заказ
	|					ИЗ
	|						ВТ_Заказ КАК ВТ_Заказ)) КАК ES_СтатусыЗаказовСрезПоследних
	|		ПО ВТ_Заказ.Заказ = ES_СтатусыЗаказовСрезПоследних.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары
	|		ПО ВТ_Заказ.Заказ = ВТ_Товары.ДокументДоставки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
	|				,
	|				Заказ В
	|						(ВЫБРАТЬ
	|							ВТ_Заказ.Заказ
	|						ИЗ
	|							ВТ_Заказ КАК ВТ_Заказ)
	|					И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Ячейка)) КАК ES_ИзменяемыеРеквизитыЗаказовЯчейка
	|		ПО ВТ_Заказ.Заказ = ES_ИзменяемыеРеквизитыЗаказовЯчейка.Заказ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(Курьер),
	|	МАКСИМУМ(ПланДоставки),
	|	МАКСИМУМ(СтатусЗаказа),
	|	МАКСИМУМ(Заказчик),
	|	МАКСИМУМ(ВхНакладная),
	|	МАКСИМУМ(НомерНакладной),
	|	МАКСИМУМ(Реестр),
	|	МАКСИМУМ(Возврат),
	|	МАКСИМУМ(Комментарий),
	|	МАКСИМУМ(ВидДоставки),
	|	МАКСИМУМ(ВидЗабора),
	|	МАКСИМУМ(ОбщийВес),
	|	МАКСИМУМ(ОбщийОбъем),
	|	МАКСИМУМ(ОбщийОбъемныйВес),
	|	МАКСИМУМ(АдресДоставки),
	|	МАКСИМУМ(Ячейка),
	|	МАКСИМУМ(Длина),
	|	МАКСИМУМ(Высота),
	|	МАКСИМУМ(Ширина),
	|	МАКСИМУМ(Мест),
	|	МАКСИМУМ(ДатаДоставки),
	|	МАКСИМУМ(Недостача),
	|	МАКСИМУМ(Проблема)
	|ПО
	|	Заказ";
	
	Запрос.УстановитьПараметр("Заказ", Заказ); 	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаЗаказ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаЗаказ.Следующий();
		Если ВыборкаЗаказ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Подготовлен 
			ИЛИ ВыборкаЗаказ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Назначен
			ИЛИ ВыборкаЗаказ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.МеждуСкладами Тогда
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаЗаказ);
			НоваяСтрока.ДатаВремяДобавленияЗаказа = УправлениеНебольшойФирмойВызовСервера.ДатаСеанса();
			//ЭР Несторук С.И. 27.09.2017 11:17:06 {
			Если Сканер Тогда
				НоваяСтрока.Проверен = Истина;
			КонецЕсли;
			НоваяСтрока.Недостача = ?(НоваяСтрока.Проверен, Ложь, Истина);
			//}ЭР Несторук С.И.
			НоваяСтрока.Излишек			= Истина;
			НоваяСтрока.Аббревиатура = ES_ОбщегоНазначения.ВернутьСокращениеВидовДоставки(ВыборкаЗаказ.ВидДоставки, ВыборкаЗаказ.ВидЗабора, ВыборкаЗаказ.Возврат);  
			Если Объект.Склад.Предопределенный Тогда
				Если КонецДня(ВыборкаЗаказ.ДатаДоставки) = КонецДня(ТекущаяДата()+24*3600) Тогда
					НоваяСтрока.Ячейка		= ЯчейкаКДоставке;
				Иначе
					НоваяСтрока.Ячейка						= ЯчейкаОсновная;
				КонецЕсли;
				Если ВыборкаЗаказ.Проблема Тогда
					НоваяСтрока.Ячейка						= ЯчейкаПроблема;
				КонецЕсли;
			КонецЕсли;
			
			Выборка = ВыборкаЗаказ.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
					СтрокаГрузы = Объект.Грузы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаГрузы,Выборка);
				КонецЕсли;

			КонецЦикла;
			
			
		Иначе
		Сообщить("Невозможно добавить документ + "+ ВыборкаЗаказ.Заказ + " в статусе " + ВыборкаЗаказ.СтатусЗаказа);	
		УдалитьСтрокиПоЗаказуИзДокумента(Заказ);
		Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	//ЭР Несторук С.И. 22.12.2016 17:15:04 }

КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиПоЗаказуИзДокумента(Заказ)

	//ЭР Несторук С.И. 22.12.2016 17:18:53 {
	НайденныеСтроки = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", Заказ));
	Если НайденныеСтроки.Количество() >0 Тогда
		Для каждого Стр Из НайденныеСтроки Цикл
			Объект.Заказы.Удалить(Стр);
		КонецЦикла;
	КонецЕсли;
	
	НайденныеСтроки = Объект.Грузы.НайтиСтроки(Новый Структура("Заказ", Заказ));
	Если НайденныеСтроки.Количество() >0 Тогда
		Для каждого Стр Из НайденныеСтроки Цикл
			Объект.Грузы.Удалить(Стр);
		КонецЦикла;
	КонецЕсли;
	//ЭР Несторук С.И. 22.12.2016 17:18:53 }

КонецПроцедуры



&НаКлиенте
Процедура НайтиЗаказПоШтрихКоду(Команда)
	
	ОчиститьСообщения();
	
	ТекШтрихкод = "";
	мПараметры = Новый Структура;
	мПараметры.Вставить("Сканер", Истина);
	мПараметры.Вставить("ВидОперации", Объект.ВидОперации);
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ОбработатьШтрихкодЗаказаЗавершение", ЭтаФорма, мПараметры), ТекШтрихкод, НСтр("ru = 'Введите штрихкод заказа'"));
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодЗаказаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	//ЭР Несторук С.И. 02.03.2017 17:15:51 {
	Если ПустаяСтрока(Результат) Тогда
		Возврат;
	КонецЕсли;
	Если ИспользоватьЯчейки И НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Нстр("ru='Укажите склад'");
		Сообщение.Поле = "Объект.Склад";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Сканер = ДополнительныеПараметры.Свойство("Сканер");
	ВидОперации = ДополнительныеПараметры.ВидОперации;
	КритерийПоиска = ПолучитьКритерийПоиска();
	Успешно = Истина;
	//Если Объект.СозданНаОсновании Тогда
	
	НайденныеСтроки = Объект.Заказы.НайтиСтроки(Новый Структура(КритерийПоиска, Результат));
	Если НайденныеСтроки.Количество() = 0 Тогда
		//Сообщить(НСтр("ru='Заказ с номером накладной "+ Результат + " не найден'"));
		//Возврат;
		//ЭР Несторук С.И. 22.12.2016 17:31:03 {
		ДанныеПоЗаказу = НайтиЗаказПоШтрихКодуНаСервере(Результат);
		Если НЕ ЗначениеЗаполнено(ДанныеПоЗаказу.Заказ) Тогда
			Если ДанныеПоЗаказу.Свойство("Сообщение") Тогда
				Сообщить(ДанныеПоЗаказу.Сообщение);
			Иначе
				Сообщить("Заказ не найден");
			КонецЕсли;
			Успешно = Ложь;
			Возврат;
		КонецЕсли;
		
		НоваяСтрока = Объект.Заказы.Добавить();
		НоваяСтрока.Заказ 		= ДанныеПоЗаказу.Заказ;
		ЗаполнитьТЧНаСервере(ДанныеПоЗаказу.Заказ, Сканер, ВидОперации);
		
		//ЭР Несторук С.И.}
		
	Иначе
		//ЭР Несторук С.И. 14.09.2017 14:16:41 {
		Если НЕ НайденныеСтроки[0].Проверен Тогда
			НайденныеСтроки[0].МестФакт = НайденныеСтроки[0].МестФакт +1;
			Если НайденныеСтроки[0].МестФакт = НайденныеСтроки[0].Мест ИЛИ НайденныеСтроки[0].Мест = 0 Тогда
				НайденныеСтроки[0].Проверен = Истина;
				НайденныеСтроки[0].Недостача = Ложь;
				НайденныеСтроки[0].МестФакт = 0;
				НапечататьНакладнуюПоЗаказу(НайденныеСтроки[0].Заказ, НайденныеСтроки[0].Заказчик);
			КонецЕсли;
		КонецЕсли;
	
		//}ЭР Несторук С.И.
		
		//НайденныеСтроки[0].Проверен = Истина;
		Индекс = НайденныеСтроки[0].ПолучитьИдентификатор();
		ЭтаФорма.Элементы.Заказы.ТекущаяСтрока = Индекс;
	КонецЕсли;
	
	//Если Успешно И ИспользоватьЯчейки Тогда
	//	ТекШтрихкод= "";
	//ПоказатьВводЗначения(Новый ОписаниеОповещения("ОбработатьШтрихкодЯчейкиЗавершение", ЭтаФорма), ТекШтрихкод, НСтр("ru = 'Введите штрихкод ячейки'"));
	//КонецЕсли;
	//}ЭР Несторук С.И.	
	УстановитьУсловноеОформление();		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодЯчейкиЗавершение (Результат, ДополнительныеПараметры) Экспорт
	
	Если ПустаяСтрока(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Ячейка = НайтиЯчейкуНаСервере(Результат,Объект.Склад);
	
	Если НЕ ЗначениеЗаполнено(Ячейка) Тогда 
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.Заказы.ТекущиеДанные;
	ТекСтрока.Ячейка = Ячейка;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиЯчейкуНаСервере(Наименование, Склад)
	
	Ячейка = Справочники.Ячейки.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ячейки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Ячейки КАК Ячейки
	|ГДЕ
	|	Ячейки.Наименование = &Наименование
	|	И Ячейки.Владелец = &Склад";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Ячейка = Выборка.Ссылка;
	Иначе
		Сообщить(Нстр("ru='Ячейка с Наименованием: "+Наименование+" на складе " + Склад+ " не найдена'"));
	КонецЕсли;
	
	Возврат Ячейка;
	
КонецФункции


&НаСервереБезКонтекста
Функция НайтиЗаказПоШтрихКодуНаСервере(ТекШтрихКод)
	
	ИскатьПоВхНакладной = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ПоискЗаказовПоВхНакладной);
	
	Если ЗначениеЗаполнено(ИскатьПоВхНакладной) Тогда
		Если ИскатьПоВхНакладной Тогда
			Условие = "ES_ВхНакладная";
		Иначе
			Условие = "ES_НомерНакладной";
		КонецЕсли;
	Иначе 
		Условие = "ES_НомерНакладной";
	КонецЕсли;

	
	
	Структура = Новый Структура ("Заказ, Заказчик, ПланДоставки, Курьер,  НомерНакладной, ВхНакладная", Неопределено, Неопределено, Неопределено,Неопределено, "", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ЗаказПокупателя.Ссылка КАК Заказ,
	|	ЗаказПокупателя.Контрагент КАК Заказчик,
	|	ЗаказПокупателя.ES_ВхНакладная КАК ВхНакладная,
	|	ЗаказПокупателя.ES_НомерНакладной КАК НомерНакладной
	|ПОМЕСТИТЬ ВТ_Заказы
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя."+Условие+" = &ТекШтрихКод
	|	И ЗаказПокупателя.ПометкаУдаления = ЛОЖЬ
	|;
	|////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Значение, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Курьер,
	|	ЕСТЬNULL(ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Регистратор, ЗНАЧЕНИЕ(Документ.ES_ПланДоставки.ПустаяСсылка)) КАК ПланДоставки,
	|	ВТ_Заказы.Заказ,
	|	ВТ_Заказы.ВхНакладная,
	|	ВТ_Заказы.НомерНакладной,
	|	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа,
	|	ВТ_Заказы.Заказчик
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
	|				,
	|				Заказ В
	|						(ВЫБРАТЬ
	|							ВТ_Заказы.Заказ
	|						ИЗ
	|							ВТ_Заказы КАК ВТ_Заказы)
	|					И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Курьер)
	|					И Регистратор ССЫЛКА Документ.ES_ПланДоставки) КАК ES_ИзменяемыеРеквизитыЗаказовСрезПоследних
	|		ПО ВТ_Заказы.Заказ = ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(
	|				,
	|				Заказ В
	|					(ВЫБРАТЬ
	|						ВТ_Заказы.Заказ
	|					ИЗ
	|						ВТ_Заказы КАК ВТ_Заказы)) КАК ES_СтатусыЗаказовСрезПоследних
	|		ПО ВТ_Заказы.Заказ = ES_СтатусыЗаказовСрезПоследних.Заказ";
	
	Запрос.УстановитьПараметр("ТекШтрихКод", ТекШтрихКод);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если Выборка.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Подготовлен 
			ИЛИ Выборка.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Назначен 
			ИЛИ Выборка.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.МеждуСкладами Тогда
			
			Структура = Новый Структура ("Заказ, Заказчик, ПланДоставки, Курьер, НомерНакладной, ВхНакладная" , Выборка.Заказ, Выборка.Заказчик, Выборка.ПланДоставки,Выборка.Курьер, Выборка.НомерНакладной, Выборка.ВхНакладная);
		Иначе 	
			мСообщение = ("Невозможно добавить Документ " + Выборка.Заказ + " в статусе " + Выборка.СтатусЗаказа);
			Структура.Вставить("Сообщение", мСообщение);
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат Структура;
	
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//ЭР Несторук С.И. 10.04.2019 9:32:27 {
	ES_БиллингКлиент.ПроверитьДоступностьСервисаDelans(Отказ);
	//}ЭР Несторук С.И.
	
	//ЭР Несторук С.И. 02.03.2017 21:36:34 {
	УстановитьВидимостьЭлементов();
	//}ЭР Несторук С.И.
	
	//ЭР Несторук С.И. 13.09.2017 22:05:29 {
	Если Объект.Ссылка.Пустая()
		
		И ЗначениеЗаполнено(Объект.ДокументОснование)
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ES_ОтчетОДоставке") Тогда
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить(0,"Приемка сборов");
		СписокВыбора.Добавить(1,"Приемка недоставленных заказов");
		СписокВыбора.Добавить(2,"Полная приемка");
		мПараметры = Новый Структура;
		мПараметры.Вставить("ОтчетОДоставке", Объект.ДокументОснование);
		СписокВыбора.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект,мПараметры));
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	//}ЭР Несторук С.И.
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	//ЭР Несторук С.И. 13.09.2017 22:05:42 {
	ДокОтчет = ДополнительныеПараметры.ОтчетОДоставке;
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = ВыбранныйЭлемент.Значение; 
	Если ВыбранноеЗначение = 0
		ИЛИ ВыбранноеЗначение = 1
		ИЛИ ВыбранноеЗначение = 2 Тогда
		ЗаполнитьПоОтчетуОДоставке(ДокОтчет, ВыбранноеЗначение);
		УстановитьУсловноеОформление();
		
	Иначе
		ЭтаФорма.Закрыть();
	КонецЕсли;
	//}ЭР Несторук С.И.
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УдалитьПустыеСтрокиВТЧЗаказы();
	ПересчитатьСуммуДокумента();
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура  УдалитьПустыеСтрокиВТЧЗаказы()
	
	й = Объект.Заказы.Количество() - 1;
	Пока й >=0 Цикл
		Если НЕ ЗначениеЗаполнено(Объект.Заказы[й].Заказ) Тогда
			Объект.Заказы.Удалить(й);
		КонецЕсли;
		й = й-1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПередУдалением(Элемент, Отказ)
	Заказ = Элементы.Заказы.ТекущиеДанные.Заказ;
	УдалитьСтрокиПоЗаказуИзДокумента(Заказ);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПриАктивизацииСтроки(Элемент)
	
	ТекСтрока = Элементы.Заказы.ТекущиеДанные;
	ОтборВТЧГрузы(ТекСтрока);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВТЧГрузы(ТекСтрока)
	
	ГрузыВРазрезеЗаказов = Истина;
	Если ГрузыВРазрезеЗаказов Тогда
		Если ТекСтрока <> Неопределено Тогда
			Элементы.Грузы.ОтборСтрок = Новый ФиксированнаяСтруктура("Заказ", ТекСтрока.Заказ);
		КонецЕсли;
	Иначе
		Элементы.Грузы.ОтборСтрок 			= Неопределено;
	КонецЕсли; 


КонецПроцедуры

&НаКлиенте
Процедура ГрузыВРазрезеЗаказовПриИзменении(Элемент)
	ОтборВТЧГрузы(Элементы.Заказы.ТекущиеДанные);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКритерийПоиска()

	Критерий = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ПоискЗаказовПоВхНакладной);
	
	Если Не ЗначениеЗаполнено(Критерий) Тогда
		Возврат "НомерНакладной";
	ИначеЕсли Критерий = Истина Тогда
		Возврат "ВхНакладная";
	Иначе
		Возврат "НомерНакладной";
	КонецЕсли;
	 


КонецФункции // ПолучитьКритерийПоиска()

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	Для каждого Стр Из Объект.Заказы Цикл
		
		Стр.Проверен = Истина;
		Стр.Недостача = Ложь;
		Стр.МестФакт = 0;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметки(Команда)
	
	Для каждого Стр Из Объект.Заказы Цикл
		
		Стр.Проверен = Ложь;
		Стр.Недостача = Истина;
		Стр.МестФакт = 0;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	
	Если ПараметрыЗаписи.Свойство("РежимЗаписи") Тогда
		Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			Если ИспользоватьЯчейки Тогда
			ПроверритьЗаполненниеЯчеек();	
			КонецЕсли;
	
			ПроверитьНедостачуИзлишек();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ЗаполнитьОтветственногоНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтветственногоНаСервере()
	
	Объект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
	
КонецПроцедуры


&НаКлиенте
Процедура ПроверитьНедостачуИзлишек()
	
	ЕстНедостача 	= Ложь;
	ЕстИзлишек 		= Ложь;
	ЕстПроверен     = Ложь;
	НомераСтрокНедостача = "";
	НомераСтрокИзлишек = "";
	НомераСтрокПроверен = "";
	Для каждого Стр ИЗ Объект.Заказы Цикл
		Если ТипЗнч(Стр.Заказ) = Тип("ДокументСсылка.ES_ЗаборГруза") Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ стр.Проверен Тогда
			ЕстНедостача = Истина;
			НомераСтрокНедостача = ?(ЗначениеЗаполнено(НомераСтрокНедостача), НомераСтрокНедостача+", "+ Стр.НомерНакладной, НомераСтрокНедостача+Стр.НомерНакладной);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			Если стр.Излишек Тогда
				ЕстИзлишек = Истина;
				НомераСтрокИзлишек = ?(ЗначениеЗаполнено(НомераСтрокИзлишек), НомераСтрокИзлишек+", "+ Стр.НомерНакладной, НомераСтрокИзлишек+Стр.НомерНакладной);
			КонецЕсли;
			//ES_Савченко К.Р.12.10.2017+		
			Если (Не стр.Проверен ИЛИ Стр.Излишек) И Не ЗначениеЗаполнено(Стр.Примечание) Тогда
				ЕстПроверен = Истина;
				НомераСтрокПроверен = ?(ЗначениеЗаполнено(НомераСтрокПроверен), НомераСтрокПроверен+", "+ Стр.НомерНакладной, НомераСтрокПроверен+Стр.НомерНакладной);
			КонецЕсли;
			//ES_Савченко К.Р.12.10.2017-		
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстНедостача Тогда
		Сообщить(НСтр("ru='Недостача по накладным: "+НомераСтрокНедостача+"'"));
	КонецЕсли;
	Если ЕстИзлишек Тогда
		Сообщить(НСтр("ru='Излишек по накладным: "+НомераСтрокИзлишек+"'"));
	КонецЕсли;
	//ES_Савченко К.Р.12.10.2017+
	Если ЕстПроверен Тогда
		Сообщить(НСтр("ru='Примечание не заполнено по накладным: "+НомераСтрокПроверен+"'"));
	КонецЕсли;
	//ES_Савченко К.Р.12.10.2017-
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверритьЗаполненниеЯчеек()
	
	//ЭР Несторук С.И. 21.09.2017 21:29:33 {
	Если ЭтоПартнерскийСклад(Объект.Склад) Тогда
		Возврат;
	КонецЕсли;
	
	//}ЭР Несторук С.И.
	
	Отказ = Ложь;
	ЗадатьВопрос = Ложь;
	КоличествоНезаполненыхЯчеек = 0;
	Для каждого Стр ИЗ Объект.Заказы Цикл
		Если НЕ ЗначениеЗаполнено(Стр.Ячейка) Тогда
			ЗадатьВопрос = Истина;
			КоличествоНезаполненыхЯчеек = КоличествоНезаполненыхЯчеек + 1;
			Сообщить(НСтр("ru='Не указана ячейка хранения в строке "+Стр.НомерСтроки+" накладная " + Стр.НомерНакладной + "'"));
		КонецЕсли;
	КонецЦикла;
	//Если ЗадатьВопрос Тогда
	//	ТексВопроса = НСтр("ru='Не все ячейки были заполнены("+КоличествоНезаполненыхЯчеек +"). Продолжить?'");
	//	
	//	ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьОтветНаВопрос",ЭтаФорма),ТексВопроса,РежимДиалогаВопрос.ДаНет,,,"Перудпреждение");
	//
	//КонецЕсли;
	
	 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоПартнерскийСклад(Склад)
	
	Если ЗначениеЗаполнено(Склад.ES_Партнер) Тогда
		Возврат Истина;
	ИначеЕсли НЕ Склад.Предопределенный Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
		
	КонецЕсли;
	
	
КонецФункции


//&НаКлиенте 
//Процедура ОбработатьОтветНаВопрос(Результат, Параметры) Экспорт
//	
//	Если Результат = КодВозвратаДиалога.Да Тогда 
//		НеПроводить = Истина;
//	КонецЕсли;
//	
//	
//КонецПроцедуры

// <Описание процедуры>
//Заполняет документ по Отчету о доставке
//ВидПриемки: 	0 - Приемка сборов
//				1 - Приемка недоставленных заказов
//				2 - Полная приемка
&НаСервере
Процедура ЗаполнитьПоОтчетуОДоставке(ОтчетОДоставке, ВидПриемки)
	
	//ЭР Несторук С.И. 13.09.2017 22:11:37 {
	МассивЗаказов = Новый Массив;
	МассивЗаборов = Новый Массив;
	
	Если ВидПриемки = 0 Тогда
		Для каждого Стр Из ОтчетОДоставке.Заказы Цикл
			Если ТипЗнч(Стр.ДокументДоставки) = Тип("ДокументСсылка.ES_ЗаборГруза")
				И Стр.СтатусЗаказа = Перечисления.ES_СтатусыЗаборов.Выполнен Тогда
				НайтиСтроки = ОтчетОДоставке.Заказы.НайтиСтроки(Новый Структура("СвязанныйДокумент",Стр.ДокументДоставки));
				Если НайтиСтроки.Количество() > 0 Тогда
					Если НайтиСтроки[0].СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Доставлен ИЛИ
						НайтиСтроки[0].СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ВПути ИЛИ
						НайтиСтроки[0].СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Назначен ИЛИ
						НайтиСтроки[0].СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставлен ИЛИ
						НайтиСтроки[0].СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ОжидаетГруз ИЛИ
						НайтиСтроки[0].СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ОжидаетГрузНазначен ИЛИ
						НайтиСтроки[0].СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ПустаяСсылка() Тогда
					Иначе 
						
						МассивЗаборов.Добавить(Стр.ДокументДоставки);
					КонецЕсли;
				Иначе 
					МассивЗаборов.Добавить(Стр.ДокументДоставки);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивЗаборов.Количество() > 0 Тогда
			Документы.ES_Приемка.ЗаполнитьМассивЗаказовИзЗаборов(МассивЗаказов,МассивЗаборов);
		КонецЕсли;
		
	ИначеЕсли ВидПриемки = 1 Тогда
		Для каждого Стр Из ОтчетОДоставке.Заказы Цикл
			Если ТипЗнч(Стр.ДокументДоставки) = Тип("ДокументСсылка.ЗаказПокупателя") И 
				(Стр.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.НеДоставлен 
				ИЛИ Стр.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставлен 
				ИЛИ Стр.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Отказ
				ИЛИ Стр.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.НеправильныйАдрес
				ИЛИ Стр.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ОфисПолучателяЗакрыт
				ИЛИ Стр.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ПолучательПереехал
				ИЛИ Стр.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ПолучателяНетДомаВОфисе) Тогда
				//Если НЕ ES_ОбщегоНазначения.ЗаказДоставлен(Стр.СтатусЗаказа) Тогда
					МассивЗаказов.Добавить(Стр.ДокументДоставки);
				//КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;	
	Иначе //Видприемки = 2
		Для каждого Стр Из ОтчетОДоставке.Заказы Цикл
			Если ТипЗнч(Стр.ДокументДоставки) = Тип("ДокументСсылка.ES_ЗаборГруза")
				И Стр.СтатусЗаказа = Перечисления.ES_СтатусыЗаборов.Выполнен Тогда
				НайтиСтроки = ОтчетОДоставке.Заказы.НайтиСтроки(Новый Структура("СвязанныйДокумент",Стр.ДокументДоставки));
				Если НайтиСтроки.Количество() > 0 Тогда
					Если НайтиСтроки[0].СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Доставлен ИЛИ
						НайтиСтроки[0].СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ВПути ИЛИ
						НайтиСтроки[0].СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Назначен ИЛИ
						НайтиСтроки[0].СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ОжидаетГруз ИЛИ
						НайтиСтроки[0].СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ОжидаетГрузНазначен ИЛИ
						НайтиСтроки[0].СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ПустаяСсылка() Тогда
					Иначе 
						
						МассивЗаборов.Добавить(Стр.ДокументДоставки);
					КонецЕсли;
				Иначе 
					МассивЗаборов.Добавить(Стр.ДокументДоставки);
					
				КонецЕсли;
			ИначеЕсли ТипЗнч(Стр.ДокументДоставки) = Тип("ДокументСсылка.ЗаказПокупателя")
				И (Стр.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.НеДоставлен 
				ИЛИ Стр.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставлен 
				ИЛИ Стр.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Отказ
				ИЛИ Стр.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.НеправильныйАдрес
				ИЛИ Стр.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ОфисПолучателяЗакрыт
				ИЛИ Стр.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ПолучательПереехал
				ИЛИ Стр.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ПолучателяНетДомаВОфисе) Тогда
				МассивЗаказов.Добавить(Стр.ДокументДоставки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивЗаборов.Количество() > 0 Тогда
			Документы.ES_Приемка.ЗаполнитьМассивЗаказовИзЗаборов(МассивЗаказов,МассивЗаборов);
		КонецЕсли;
		
	КонецЕсли;
	
	//МассивЗаказов = СформироватьМассивЗаказовГотовыхКПриемке(МассивЗаказов);
	
	Если МассивЗаказов.Количество() > 0 Тогда
		мОбъект = РеквизитФормыВЗначение("Объект");
		Документы.ES_Приемка.ЗаполнитьДокументЗаказами(мОбъект,МассивЗаказов,ОтчетОДоставке);
		ЗначениеВРеквизитФормы(мОбъект,"Объект");
	КонецЕсли;
	
	
	//}ЭР Несторук С.И.

КонецПроцедуры // ЗаполнитьПоОтчетуОДоставке()

Функция СформироватьМассивЗаказовГотовыхКПриемке(МассивЗаказов) 
	
	НовыйМассив = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказ КАК Заказ
		|ПОМЕСТИТЬ ВТ_Заказы
		|ИЗ
		|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(, Заказ В (&МассивЗаказов)) КАК ES_ДанныеПоЗаказамСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_Заказы.Заказ КАК Заказ,
		|	ES_ЗаказыНаСкладеОстатки.Склад КАК Склад,
		|	ES_ЗаказыНаСкладеОстатки.Курьер КАК Курьер
		|ИЗ
		|	ВТ_Заказы КАК ВТ_Заказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ES_ЗаказыНаСкладе.Остатки(
		|				,
		|				Заказ В
		|					(ВЫБРАТЬ
		|						ВТ_Заказы.Заказ КАК Заказ
		|					ИЗ
		|						ВТ_Заказы КАК ВТ_Заказы)) КАК ES_ЗаказыНаСкладеОстатки
		|		ПО ВТ_Заказы.Заказ = ES_ЗаказыНаСкладеОстатки.Заказ";
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Склад) Тогда
			НовыйМассив.Добавить(Выборка.Заказ);
		ИначеЕсли ЗначениеЗаполнено(Выборка.Склад) И  ЗначениеЗаполнено(Выборка.Курьер) Тогда
			НовыйМассив.Добавить(Выборка.Заказ);
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат НовыйМассив;
	
КонецФункции


&НаКлиенте
Процедура ЗаказыПроверенПриИзменении(Элемент)
	
	ТекСтрока =Элементы.Заказы.ТекущиеДанные;
	ТекСтрока.Недостача = НЕ ТекСтрока.Проверен;
	ТекСтрока.МестФакт = ?(ТекСтрока.Проверен, 0,ТекСтрока.МестФакт); 
	
КонецПроцедуры


&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	УстановитьВидимостьВЗависимостиОтВидаОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ПлатежиПринято" Тогда
	Иначе ПоказатьЗначение(,Элемент.ТекущиеДанные.Заказ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидОплатыПриИзменении(Элемент)
	
	УстановитьВидимостьКассыСчета();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКассыСчета()
	
	Если Объект.ВидОплаты = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
		Элементы.Касса.Видимость = Ложь;
		Элементы.Счет.Видимость = Истина;
	Иначе
		Элементы.Касса.Видимость = Истина;
		Элементы.Счет.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиПринятоПриИзменении(Элемент)
	
	ПересчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуДокумента()
	  Объект.СуммаДокумента = Объект.Платежи.Итог("Принято");
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиНПФактНалПриИзменении(Элемент)
	
	ПересчитатьСуммуПоСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиНПФактБезналПриИзменении(Элемент)
	ПересчитатьСуммуПоСтроке();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуПоСтроке()
	ТекСтрока = Элементы.Платежи.ТекущиеДанные;
	ТекСтрока.Принято = ТекСтрока.НПФактНал + ТекСтрока.НПФактБезнал;
	ПересчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура НапечататьНакладнуюПоЗаказу(Заказ, Заказчик)
	
	Если НЕ ЗначениеЗАполнено(ES_ОбщегоНазначения.ЭР_ПолучитьЗначениеРеквизитаНаСервере(Объект.Склад,"ES_Партнер").ES_Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	Если ES_ОбщегоНазначения.ЭР_ПолучитьЗначениеРеквизитаНаСервере(Заказчик,"ES_ПечатьНакладной").ES_ПечатьНакладной Тогда
		
		МассивЗаказов = Новый Массив;
		МассивЗаказов.Добавить(Заказ);
		
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер(
		"Документ.ЗаказПокупателя",
		"ПФ_MXL_ES_НакладнаяНаДоставку",
		МассивЗаказов,
		Неопределено
		);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ПроставитьЯчейкиВТЧ();	
	УстановитьУсловноеОформление();
		
КонецПроцедуры

&НаСервере
Процедура ПроставитьЯчейкиВТЧ()
	
	//ЭР Несторук С.И. 24.09.2017 19:51:35 {
	
	Если НЕ Объект.Склад.Предопределенный Тогда
		Возврат;
	КонецЕсли;
	
	ЯчейкаКДоставке = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ЯчейкаКВыдаче);
	ЯчейкаОсновная = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ЯчейкаОсновная);
	ЯчейкаПроблема = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ЯчейкаПроблема);
	
	Для каждого Стр ИЗ Объект.Заказы Цикл
		Если КонецДня(Стр.ДатаДоставки) = КонецДня(ТекущаяДата()+24*3600) Тогда
			Стр.Ячейка		= ЯчейкаКДоставке;
		Иначе
			Стр.Ячейка						= ЯчейкаОсновная;
		КонецЕсли;
		Если Стр.Некондиция Тогда
			Стр.Ячейка						= ЯчейкаПроблема;
		КонецЕсли;
		
	КонецЦикла;
	
	//}ЭР Несторук С.И.

	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыЗаказПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

//EFSOL Тушинский ГЛ 08.08.18 +
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
	// УНФ
	СтатистикаИспользованияФормКлиент.ДобавитьСтатистикуПодключаемойКоманды(ЭтотОбъект, Команда);
	// Конец УНФ
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
//EFSOL -

