#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Контрагент)
	|	ИЛИ ВЫБОР КОГДА Контрагент = Значение(Справочник.Контрагенты.ПустаяСсылка) ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ ";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверка склада в заказе и в чеке.
// Если склады не совпадают и есть резерв по заказу, то резерв может зависнуть.
// Сообщим об этом пользователю.
Функция ПроверитьСтруктурнуюЕдиницуВЗаказе(Заказ, СтруктурнаяЕдиницаВЧеке) Экспорт
	
	Если Заказ.СтруктурнаяЕдиницаРезерв <> СтруктурнаяЕдиницаВЧеке
		И Заказ.Запасы.Итог("Резерв") > 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Обратите внимение, что склад резерва в заказе покупателя и розничная точка в чеке не совпадают. Это может привести к зависанию резерва.'");
		ТекстСообщения = ТекстСообщения + Символы.ПС
		+ НСтр("ru = 'Для снятия резерва с заказа используйте документ ""Резервирование запасов"". В карточке заказа покупателя выберите команду ""Создать на основании - Резервирование (снять резерв)"".'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПлатежныйКалендарь(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("ТоварЗарезервирован", СтруктураДополнительныеСвойства.ДляПроведения.ТоварЗарезервирован);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ИспользоватьЗаказыВРозничнойТорговле", ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Заказ КАК СчетНаОплату,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей) КАК Статья,
	|	ТаблицаДокумента.КассаККМ КАК БанковскийСчетКасса,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыУтвержденияПлатежей.Утвержден) КАК СтатусУтвержденияПлатежа,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные) КАК ТипДенежныхСредств,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ.Договор.РасчетыВУсловныхЕдиницах
	|			ТОГДА ТаблицаДокумента.Заказ.Договор.ВалютаРасчетов
	|		ИНАЧЕ ТаблицаДокумента.ВалютаДокумента
	|	КОНЕЦ КАК Валюта,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаДокумента.Заказ.Договор.РасчетыВУсловныхЕдиницах
	|				ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.СуммаВал * ВЫБОР
	|							КОГДА КурсыВалютРасчетов.Курс <> 0
	|									И КурсыВалютКассы.Кратность <> 0
	|								ТОГДА КурсыВалютКассы.Курс * КурсыВалютРасчетов.Кратность / (ЕСТЬNULL(КурсыВалютРасчетов.Курс, 1) * ЕСТЬNULL(КурсыВалютКассы.Кратность, 1))
	|							ИНАЧЕ 1
	|						КОНЕЦ КАК ЧИСЛО(15, 2))
	|			ИНАЧЕ ТаблицаДокумента.СуммаВал
	|		КОНЕЦ) КАК СуммаОплаты
	|ИЗ
	|	ВременнаяТаблицаРасшифровкаПлатежа КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютСчета
	|		ПО ТаблицаДокумента.Заказ.ВалютаДокумента = КурсыВалютСчета.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютКассы
	|		ПО ТаблицаДокумента.ВалютаДокумента = КурсыВалютКассы.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютРасчетов
	|		ПО ТаблицаДокумента.Заказ.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|ГДЕ
	|	ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|	И ТаблицаДокумента.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	И ТаблицаДокумента.Заказ <> НЕОПРЕДЕЛЕНО
	|	И ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Заказ) = ТИП(Документ.ЗаказПокупателя)
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И &ИспользоватьЗаказыВРозничнойТорговле
	////ЭР Несторук С.И. 08.12.2017 15:18:05 {
	//|	И НЕ ТаблицаДокумента.ES_ЭтоГруз
	////}ЭР Несторук С.И.
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Заказ,
	|	ТаблицаДокумента.КассаККМ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ.Договор.РасчетыВУсловныхЕдиницах
	|			ТОГДА ТаблицаДокумента.Заказ.Договор.ВалютаРасчетов
	|		ИНАЧЕ ТаблицаДокумента.ВалютаДокумента
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПлатежныйКалендарь", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаОплатаСчетовИЗаказов()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("ТоварЗарезервирован", СтруктураДополнительныеСвойства.ДляПроведения.ТоварЗарезервирован);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	Запрос.УстановитьПараметр("ИспользоватьЗаказыВРозничнойТорговле", ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле"));
	Запрос.УстановитьПараметр("СуммаПредоплаты", ДокументСсылкаЧекККМ.Предоплата.Итог("СуммаРасчетов"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.ЗаказПокупателя КАК СчетНаОплату,
	|	0 КАК СуммаАванса,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаДокумента.ВалютаДокумента = ТаблицаДокумента.ЗаказПокупателя.ВалютаДокумента
	|				ТОГДА ТаблицаДокумента.СуммаВал
	|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДокумента.СуммаВал * КурсыВалютКассы.Курс * КурсыВалютСчета.Кратность / (КурсыВалютСчета.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) КАК СуммаОплаты
	|ПОМЕСТИТЬ ВременнаяТаблицаОплатыСчетов
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютСчета
	|		ПО ТаблицаДокумента.ЗаказПокупателя.ВалютаДокумента = КурсыВалютСчета.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютКассы
	|		ПО ТаблицаДокумента.ВалютаДокумента = КурсыВалютКассы.Валюта
	|ГДЕ
	|	ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|	И ТаблицаДокумента.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	И ТаблицаДокумента.ЗаказПокупателя <> НЕОПРЕДЕЛЕНО
	|	И ТИПЗНАЧЕНИЯ(ТаблицаДокумента.ЗаказПокупателя) = ТИП(Документ.ЗаказПокупателя)
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И &ИспользоватьЗаказыВРозничнойТорговле
	//ЭР Несторук С.И. 08.12.2017 15:55:06 {
	|	И НЕ  ТаблицаДокумента.ES_ЭтоГруз
	//}ЭР Несторук С.И.
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.ЗаказПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаОплатыСчетов.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаОплатыСчетов.Период КАК Период,
	|	ВременнаяТаблицаОплатыСчетов.Организация КАК Организация,
	|	ВременнаяТаблицаОплатыСчетов.СчетНаОплату КАК СчетНаОплату,
	|	ВременнаяТаблицаОплатыСчетов.СуммаАванса КАК СуммаАванса,
	|	ВременнаяТаблицаОплатыСчетов.СуммаОплаты - &СуммаПредоплаты КАК СуммаОплаты
	|ИЗ
	|	ВременнаяТаблицаОплатыСчетов КАК ВременнаяТаблицаОплатыСчетов";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаСчетовИЗаказов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаОплатаСчетовИЗаказов()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗаказыПокупателей(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("ТоварЗарезервирован", СтруктураДополнительныеСвойства.ДляПроведения.ТоварЗарезервирован);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	Запрос.УстановитьПараметр("ИспользоватьЗаказыВРозничнойТорговле", ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗаказыПокупателей.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗаказыПокупателей.Дата КАК Период,
	|	ТаблицаЗаказыПокупателей.Организация КАК Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика КАК Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ТаблицаЗаказыПокупателей.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗаказыПокупателей
	|ГДЕ
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя <> НЕОПРЕДЕЛЕНО
	|	И ТаблицаЗаказыПокупателей.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	И (&ЧекПробит
	|			ИЛИ &ТоварЗарезервирован)
	|	И НЕ &Архивный
	|	И &ИспользоватьЗаказыВРозничнойТорговле
	|	И НЕ &ОперацияСДенежнымиСредствами
	//ЭР Несторук С.И. 08.12.2017 15:54:28 {
	|	И НЕ ТаблицаЗаказыПокупателей.ES_ЭтоГруз
	//}ЭР Несторук С.И.
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказыПокупателей.Дата,
	|	ТаблицаЗаказыПокупателей.Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказыПокупателей", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗаказыПокупателей()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасы(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	// Ставим в резерв только то количество, которое ещё не поставлено в резерв заказом покупателя на складе розничной точки!
	// Окончательное снятие резерва с заказа происходит в документе "Отчет о розничных продажах".
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаЗапасы.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.Документ КАК Документ,
	|	ТаблицаЗапасы.Документ КАК ДокументПродажи,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПродажи,
	|	ТаблицаЗапасы.Подразделение КАК Подразделение,
	|	ТаблицаЗапасы.Ответственный КАК Ответственный,
	|	ТаблицаЗапасы.Подразделение КАК ПодразделениеПродажи,
	|	ТаблицаЗапасы.ТоварыНаКомиссии КАК ТоварыНаКомиссии,
	|	ЕСТЬNULL(ТаблицаЗапасы.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК СтруктурнаяЕдиница,
	|	ЕСТЬNULL(ТаблицаЗапасы.КоррСтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|	ТаблицаЗапасы.КоррСчетУчетаЗапасов КАК КоррСчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ТаблицаЗапасы.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаЗапасы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаЗапасы.КоррНоменклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ТаблицаЗапасы.КоррХарактеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.КоррПартия КАК КоррПартия,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	НЕОПРЕДЕЛЕНО КАК КоррЗаказПокупателя,
	|	ТаблицаЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Резерв) КАК Резерв,
	|	СУММА(ТаблицаЗапасы.СуммаНДС) КАК СуммаНДС,
	|	0 КАК Сумма,
	|	0 КАК Себестоимость,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ТаблицаЗапасы.СчетУчетаЗатрат
	|		ИНАЧЕ ТаблицаЗапасы.СчетУчетаСебестоимость
	|	КОНЕЦ КАК СчетДт,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетКт,
	|	ВЫРАЗИТЬ(&СписаниеЗапасов КАК СТРОКА(100)) КАК Содержание,
	|	ВЫРАЗИТЬ(&СписаниеЗапасов КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость КАК СчетУчетаСебестоимость,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы,
	|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК ФункциональнаяОпцияРезервированиеЗапасов
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|	И (&ЧекПробит
	|			ИЛИ &ТоварЗарезервирован)
	|	И НЕ &Архивный
	|	И НЕ &ДвиженияПоЗапасамУдалять
	|	И НЕ &ОперацияСДенежнымиСредствами
	//ЭР Несторук С.И. 08.12.2017 15:34:09 {
	|	И НЕ ТаблицаЗапасы.ES_ЭтоГруз
	//}ЭР Несторук С.И.
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Дата,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Документ,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.Подразделение,
	|	ТаблицаЗапасы.Ответственный,
	|	ТаблицаЗапасы.НаправлениеДеятельности,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчетаЗапасов,
	|	ТаблицаЗапасы.КоррСчетУчетаЗапасов,
	|	ТаблицаЗапасы.ТоварыНаКомиссии,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.НоменклатураНабора,
	|	ТаблицаЗапасы.ТипНоменклатуры,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.ХарактеристикаНабора,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.КоррНоменклатура,
	|	ТаблицаЗапасы.КоррХарактеристика,
	|	ТаблицаЗапасы.КоррПартия,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаЗапасы.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ТаблицаЗапасы.СчетУчетаЗатрат
	|		ИНАЧЕ ТаблицаЗапасы.СчетУчетаСебестоимость
	|	КОНЕЦ,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.Документ,
	|	ТаблицаЗапасы.Подразделение,
	|	ТаблицаЗапасы.СчетУчетаЗапасов";
	
	Запрос.УстановитьПараметр("ОприходованиеЗапасов", НСтр("ru = 'Оприходование запасов'"));
	Запрос.УстановитьПараметр("СписаниеЗапасов", НСтр("ru = 'Списание запасов'"));
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("ТоварЗарезервирован", СтруктураДополнительныеСвойства.ДляПроведения.ТоварЗарезервирован);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	Запрос.УстановитьПараметр("ДвиженияПоЗапасамУдалять", СтруктураДополнительныеСвойства.ДляПроведения.ДвиженияПоЗапасамУдалять);
	Запрос.УстановитьПараметр("ИспользоватьЗаказыВРозничнойТорговле", ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", РезультатЗапроса.Выгрузить());
	
	СформироватьТаблицаЗапасыПродажа(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // СформироватьТаблицаЗапасы()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыПродажа(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация КАК Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|		ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|		ТаблицаЗапасы.Характеристика КАК Характеристика,
	|		ТаблицаЗапасы.Партия КАК Партия,
	|		ВЫБОР
	|			КОГДА ТаблицаЗапасы.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	|				ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|			ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		КОНЕЦ КАК ЗаказПокупателя
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|	ГДЕ
	|		ТаблицаЗапасы.ЗаказПокупателя <> НЕОПРЕДЕЛЕНО
	//ЭР Несторук С.И. 08.12.2017 15:11:37 {
	|		И НЕ ТаблицаЗапасы.ES_ЭтоГруз 
	//}ЭР Несторук С.И.
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчетаЗапасов,
	|		ТаблицаЗапасы.Номенклатура,
	|		ТаблицаЗапасы.Характеристика,
	|		ТаблицаЗапасы.Партия,
	|		ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	//ЭР Несторук С.И. 08.12.2017 15:11:37 {
	|		ГДЕ НЕ ТаблицаЗапасы.ES_ЭтоГруз 
	//}ЭР Несторук С.И.
	|		) КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ЗаказПокупателя <> НЕОПРЕДЕЛЕНО
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаЗапасы.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	|						ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|					ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя
	|ПОМЕСТИТЬ втЗапасыОстатки
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ТаблицаЗапасы.ЗаказПокупателя <> НЕОПРЕДЕЛЕНО
	|				ТОГДА ВЫБОР
	|						КОГДА ТаблицаЗапасы.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	|							ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|						ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					КОНЕЦ
	|			ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчетаЗапасов,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗапасыОстатки.Организация КАК Организация,
	|	втЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	втЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	втЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	втЗапасыОстатки.Характеристика КАК Характеристика,
	|	втЗапасыОстатки.Партия КАК Партия,
	|	втЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя
	|ПОМЕСТИТЬ втЗапасыОстаткиГруппировка
	|ИЗ
	|	втЗапасыОстатки КАК втЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗапасыОстатки.Организация,
	|	втЗапасыОстатки.СчетУчета,
	|	втЗапасыОстатки.Номенклатура,
	|	втЗапасыОстатки.Характеристика,
	|	втЗапасыОстатки.Партия,
	|	втЗапасыОстатки.СтруктурнаяЕдиница,
	|	втЗапасыОстатки.ЗаказПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|		ЗапасыОстатки.СуммаОстаток КАК СуммаОстаток
	|	ИЗ
	|		втЗапасыОстаткиГруппировка КАК ВременнаяТаблицаЗапасы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(&МоментКонтроля, ) КАК ЗапасыОстатки
	|			ПО ЗапасыОстатки.Организация = ВременнаяТаблицаЗапасы.Организация
	|				И ЗапасыОстатки.СтруктурнаяЕдиница = ВременнаяТаблицаЗапасы.СтруктурнаяЕдиница
	|				И ЗапасыОстатки.СчетУчета = ВременнаяТаблицаЗапасы.СчетУчета
	|				И ЗапасыОстатки.Номенклатура = ВременнаяТаблицаЗапасы.Номенклатура
	|				И ЗапасыОстатки.Характеристика = ВременнаяТаблицаЗапасы.Характеристика
	|				И ЗапасыОстатки.Партия = ВременнаяТаблицаЗапасы.Партия
	|				И ЗапасыОстатки.ЗаказПокупателя = ВременнаяТаблицаЗапасы.ЗаказПокупателя
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ДвиженияДокументаЗапасы.Количество
	|			ИНАЧЕ -ДвиженияДокументаЗапасы.Количество
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ДвиженияДокументаЗапасы.Сумма
	|			ИНАЧЕ -ДвиженияДокументаЗапасы.Сумма
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия,
	|	ЗапасыОстатки.ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМ);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапасыОстатки = РезультатЗапроса.Выгрузить();
	ТаблицаЗапасыОстатки.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
	
	ВременнаяТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.СкопироватьКолонки();
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы[н];
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
		
		КоличествоТребуетсяРезерв = ?(ЗначениеЗаполнено(СтрокаТаблицаЗапасы.Резерв), СтрокаТаблицаЗапасы.Резерв, 0);
		КоличествоТребуетсяСвободныйОстаток = ?(ЗначениеЗаполнено(СтрокаТаблицаЗапасы.Количество), СтрокаТаблицаЗапасы.Количество, 0);
		
		Если КоличествоТребуетсяРезерв > 0 Тогда
			
			КоличествоТребуетсяСвободныйОстаток = КоличествоТребуетсяСвободныйОстаток - КоличествоТребуетсяРезерв;
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", СтрокаТаблицаЗапасы.ЗаказПокупателя);
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяРезерв Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяРезерв / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяРезерв;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяРезерв Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			// Расход. Запасы.
			СтрокаТаблицыРасход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяРезерв;
			
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				// Продажи.
				СтрокаПродажи = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПродажи, СтрокаТаблицаЗапасы);
				СтрокаПродажи.Количество = 0;
				СтрокаПродажи.Сумма = 0;
				СтрокаПродажи.СуммаНДС = 0;
				СтрокаПродажи.Себестоимость = СуммаКСписанию;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоТребуетсяСвободныйОстаток > 0 Тогда
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяСвободныйОстаток Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяСвободныйОстаток / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяСвободныйОстаток;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяСвободныйОстаток Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			// Расход. Запасы.
			СтрокаТаблицыРасход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяСвободныйОстаток;
			СтрокаТаблицыРасход.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
			
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				// Продажи.
				СтрокаПродажи = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПродажи, СтрокаТаблицаЗапасы);
				СтрокаПродажи.Количество = 0;
				СтрокаПродажи.Сумма = 0;
				СтрокаПродажи.СуммаНДС = 0;
				СтрокаПродажи.Себестоимость = СуммаКСписанию;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы = ВременнаяТаблицаЗапасы;
	
КонецПроцедуры // СформироватьТаблицаЗапасыПродажа()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыНаСкладах(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекККМЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ЧекККМЗапасы.Дата КАК Период,
	|	ЧекККМЗапасы.Организация КАК Организация,
	|	ЧекККМЗапасы.Номенклатура КАК Номенклатура,
	|	ЧекККМЗапасы.Характеристика КАК Характеристика,
	|	ЧекККМЗапасы.Партия КАК Партия,
	|	ЧекККМЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СУММА(ЧекККМЗапасы.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ЧекККМЗапасы
	|ГДЕ
	|	(ЧекККМЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ИЛИ ЧекККМЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|	И (&ЧекПробит
	|			ИЛИ &ТоварЗарезервирован)
	|	И НЕ &Архивный
	|	И НЕ &ОперацияСДенежнымиСредствами
	//ЭР Несторук С.И. 08.12.2017 12:26:47 {
	|   И НЕ ЧекККМЗапасы.ES_ЭтоГруз 
	//}ЭР Несторук С.И.
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМЗапасы.НомерСтроки,
	|	ЧекККМЗапасы.Дата,
	|	ЧекККМЗапасы.Организация,
	|	ЧекККМЗапасы.Номенклатура,
	|	ЧекККМЗапасы.Характеристика,
	|	ЧекККМЗапасы.Партия,
	|	ЧекККМЗапасы.СтруктурнаяЕдиница
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМ);
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	Запрос.УстановитьПараметр("ТоварЗарезервирован", СтруктураДополнительныеСвойства.ДляПроведения.ТоварЗарезервирован);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыНаСкладах", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗапасыНаСкладах()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДенежныеСредстваВКассахККМ(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК НомерСтроки,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.КассаККМ КАК КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета КАК СчетУчета,
	|	ДанныеДокумента.ВалютаДокумента КАК Валюта,
	|	СУММА(ДанныеДокумента.Сумма) КАК Сумма,
	|	СУММА(ДанныеДокумента.СуммаВал) КАК СуммаВал,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаДляОстатка,
	|	СУММА(ДанныеДокумента.СуммаВал) КАК СуммаВалДляОстатка,
	|	ВЫРАЗИТЬ(&ПоступлениеДенежныхСредств КАК СТРОКА(100)) КАК СодержаниеПроводки
	|ПОМЕСТИТЬ ВременнаяТаблицаДенежныеСредстваВКассахККМ
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ДанныеДокумента
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ДанныеДокумента.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента,
	|	СУММА(ДанныеДокумента.Сумма),
	|	СУММА(ДанныеДокумента.СуммаВал),
	|	СУММА(ДанныеДокумента.Сумма),
	|	СУММА(ДанныеДокумента.СуммаВал),
	|	ВЫРАЗИТЬ(&ПоступлениеДенежныхСредств КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаРасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И &ОперацияСДенежнымиСредствами
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ДанныеДокумента.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента,
	|	СУММА(ДанныеДокумента.Сумма),
	|	СУММА(ДанныеДокумента.СуммаВал),
	|	-СУММА(ДанныеДокумента.Сумма),
	|	-СУММА(ДанныеДокумента.СуммаВал),
	|	ВЫРАЗИТЬ(&ОплатаПлатежнымиКартами КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ДанныеДокумента
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ДанныеДокумента.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента,
	|	СУММА(ДанныеДокумента.Сумма),
	|	СУММА(ДанныеДокумента.СуммаВал),
	|	-СУММА(ДанныеДокумента.Сумма),
	|	-СУММА(ДанныеДокумента.СуммаВал),
	|	ВЫРАЗИТЬ(&ЗачетПредоплаты КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ДанныеДокумента
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	КассаККМ,
	|	Валюта,
	|	СчетУчета";
	
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМ);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	Запрос.УстановитьПараметр("ПоступлениеДенежныхСредств", НСтр("ru = 'Поступление денежных средств в кассу ККМ'"));
	Запрос.УстановитьПараметр("ОплатаПлатежнымиКартами", НСтр("ru = 'Оплата платежными картами'"));
	Запрос.УстановитьПараметр("ЗачетПредоплаты", НСтр("ru = 'Зачет предоплаты'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	
	Запрос.Выполнить();
	
	// Установка исключительной блокировки контролируемых остатков денежных средств.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаДенежныеСредстваВКассахККМ.Организация КАК Организация,
	|	ВременнаяТаблицаДенежныеСредстваВКассахККМ.КассаККМ КАК КассаККМ
	|ИЗ
	|	ВременнаяТаблицаДенежныеСредстваВКассахККМ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ДенежныеСредстваВКассахККМ");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	НомерЗапроса = 0;
	Запрос.Текст = УправлениеНебольшойФирмойСервер.ПолучитьТекстЗапросаКурсовыеРазницыДенежныеСредстваВКассахККМ(Запрос.МенеджерВременныхТаблиц, НомерЗапроса);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДенежныеСредстваВКассахККМ", МассивРезультатов[НомерЗапроса].Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДенежныеСредстваВКассахККМ()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходы(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	// Установка исключительной блокировки остатков подарочных сертификатов и создание временной таблицы
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПодарочныеСертификаты Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	ТаблицаДокумента.НомерСертификата КАК НомерСертификата
		|ИЗ
		|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ТаблицаДокумента
		|ГДЕ
		|	НЕ ТаблицаДокумента.ЧастичноеПогашение
		|	И ТаблицаДокумента.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.НомерСертификата,
		|	ТаблицаДокумента.ПодарочныйСертификат";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			// Создадим пустую временную таблицу, чтобы избежать
			// ошибок при обращениях к ней в других процедурах
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НЕОПРЕДЕЛЕНО КАК ПодарочныйСертификат,
			|	НЕОПРЕДЕЛЕНО КАК НомерСертификата,
			|	0 КАК СуммаОстаток
			|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиСертификатов";
			Запрос.Выполнить();
			
		Иначе
		
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПодарочныеСертификаты");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
			
			Для Каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
			КонецЦикла;
			Блокировка.Заблокировать();
			
			Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерийныеНомера Тогда
				
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
				Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМ);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВложенныйЗапрос.ПодарочныйСертификат КАК ПодарочныйСертификат,
				|	ВложенныйЗапрос.НомерСертификата КАК НомерСертификата,
				|	СУММА(ВложенныйЗапрос.СуммаОстаток) КАК СуммаОстаток
				|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиСертификатов
				|ИЗ
				|	(ВЫБРАТЬ
				|		ПодарочныеСертификатыОстатки.ПодарочныйСертификат КАК ПодарочныйСертификат,
				|		ПодарочныеСертификатыОстатки.НомерСертификата КАК НомерСертификата,
				|		ПодарочныеСертификатыОстатки.СуммаОстаток КАК СуммаОстаток
				|	ИЗ
				|		РегистрНакопления.ПодарочныеСертификаты.Остатки(, ) КАК ПодарочныеСертификатыОстатки
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОплатаПлатежнымиКартами КАК ВременнаяТаблицаОплатаПлатежнымиКартами
				|			ПО ПодарочныеСертификатыОстатки.ПодарочныйСертификат = ВременнаяТаблицаОплатаПлатежнымиКартами.ПодарочныйСертификат
				|				И ПодарочныеСертификатыОстатки.НомерСертификата = ВременнаяТаблицаОплатаПлатежнымиКартами.НомерСертификата
				|				И (ВременнаяТаблицаОплатаПлатежнымиКартами.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат))
				|				И (НЕ ВременнаяТаблицаОплатаПлатежнымиКартами.ЧастичноеПогашение)
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		ПодарочныеСертификаты.ПодарочныйСертификат,
				|		ПодарочныеСертификаты.НомерСертификата,
				|		ВЫБОР
				|			КОГДА ПодарочныеСертификаты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
				|				ТОГДА ПодарочныеСертификаты.Сумма
				|			ИНАЧЕ -ПодарочныеСертификаты.Сумма
				|		КОНЕЦ
				|	ИЗ
				|		РегистрНакопления.ПодарочныеСертификаты КАК ПодарочныеСертификаты
				|	ГДЕ
				|		ПодарочныеСертификаты.Регистратор = &Ссылка) КАК ВложенныйЗапрос
				|
				|СГРУППИРОВАТЬ ПО
				|	ВложенныйЗапрос.ПодарочныйСертификат,
				|	ВложенныйЗапрос.НомерСертификата";
				
				Запрос.Выполнить();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	0 КАК НомерСтроки,
	|	ТаблицаДоходыИРасходы.Дата КАК Период,
	|	ТаблицаДоходыИРасходы.Организация КАК Организация,
	|	ТаблицаДоходыИРасходы.Подразделение КАК СтруктурнаяЕдиница,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаДоходыИРасходы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаДоходыИРасходы.СчетУчетаВыручкиОтПродаж КАК СчетУчета,
	|	НЕОПРЕДЕЛЕНО КАК Аналитика,
	|	ВЫРАЗИТЬ(&ОтражениеДоходов КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	СУММА(ТаблицаДоходыИРасходы.Сумма) КАК СуммаДоходов,
	|	0 КАК СуммаРасходов,
	|	СУММА(ТаблицаДоходыИРасходы.Сумма) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДоходыИРасходы
	|ГДЕ
	|	НЕ ТаблицаДоходыИРасходы.ТоварыНаКомиссии
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ ТаблицаДоходыИРасходы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И НЕ &ОперацияСДенежнымиСредствами
	//ЭР Несторук С.И. 08.12.2017 12:30:20 {
	|	И НЕ ТаблицаДоходыИРасходы.ES_ЭтоГруз
	//}ЭР Несторук С.И.
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДоходыИРасходы.Дата,
	|	ТаблицаДоходыИРасходы.Организация,
	|	ТаблицаДоходыИРасходы.Подразделение,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельности,
	|	ТаблицаДоходыИРасходы.ЗаказПокупателя,
	|	ТаблицаДоходыИРасходы.СчетУчетаВыручкиОтПродаж
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Организация,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее),
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА &ПоложительнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ &ОтрицательнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ТаблицаДокумента.Валюта,
	|	&КурсоваяРазница,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА 0
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ
	|ИЗ
	|	ВременнаяТаблицаКурсовыхРазницДенежныеСредстваВКассахККМ КАК ТаблицаДокумента
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный";
	
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПодарочныеСертификаты Тогда
		Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерийныеНомера Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	3,
			|	0,
			|	ТаблицаДоходыИРасходы.Дата,
			|	ТаблицаДоходыИРасходы.Организация,
			|	ТаблицаДоходыИРасходы.Подразделение,
			|	НЕОПРЕДЕЛЕНО,
			|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка),
			|	ТаблицаДоходыИРасходы.СчетУчетаДоходов,
			|	НЕОПРЕДЕЛЕНО,
			|	ВЫРАЗИТЬ(&ОтражениеДоходов КАК СТРОКА(100)),
			|	СУММА(ВЫБОР
			|			КОГДА ТаблицаДоходыИРасходы.ИспользоватьСерийныеНомера
			|				ТОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) - ТаблицаДоходыИРасходы.Сумма
			|			ИНАЧЕ ТаблицаДоходыИРасходы.Номинал - ТаблицаДоходыИРасходы.Сумма
			|		КОНЕЦ),
			|	0,
			|	СУММА(ВЫБОР
			|			КОГДА ТаблицаДоходыИРасходы.ИспользоватьСерийныеНомера
			|				ТОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) - ТаблицаДоходыИРасходы.Сумма
			|			ИНАЧЕ ТаблицаДоходыИРасходы.Номинал - ТаблицаДоходыИРасходы.Сумма
			|		КОНЕЦ)
			|ИЗ
			|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ТаблицаДоходыИРасходы
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиСертификатов КАК ПодарочныеСертификатыОстатки
			|		ПО ТаблицаДоходыИРасходы.ПодарочныйСертификат = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
			|			И ТаблицаДоходыИРасходы.НомерСертификата = ПодарочныеСертификатыОстатки.НомерСертификата
			|ГДЕ
			|	&ЧекПробит
			|	И НЕ &Архивный
			|	И ТаблицаДоходыИРасходы.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат)
			|	И НЕ ТаблицаДоходыИРасходы.ЧастичноеПогашение
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаДоходыИРасходы.Дата,
			|	ТаблицаДоходыИРасходы.Организация,
			|	ТаблицаДоходыИРасходы.Подразделение,
			|	ТаблицаДоходыИРасходы.СчетУчетаДоходов
			|
			|ИМЕЮЩИЕ
			|	СУММА(ВЫБОР
			|			КОГДА ТаблицаДоходыИРасходы.ИспользоватьСерийныеНомера
			|				ТОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) - ТаблицаДоходыИРасходы.Сумма
			|			ИНАЧЕ ТаблицаДоходыИРасходы.Номинал - ТаблицаДоходыИРасходы.Сумма
			|		КОНЕЦ) <> 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок,
			|	НомерСтроки";
			
		Иначе
			
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	3,
			|	0,
			|	ТаблицаДоходыИРасходы.Дата,
			|	ТаблицаДоходыИРасходы.Организация,
			|	ТаблицаДоходыИРасходы.Подразделение,
			|	НЕОПРЕДЕЛЕНО,
			|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка),
			|	ТаблицаДоходыИРасходы.СчетУчетаДоходов,
			|	НЕОПРЕДЕЛЕНО,
			|	ВЫРАЗИТЬ(&ОтражениеДоходов КАК СТРОКА(100)),
			|	СУММА(ТаблицаДоходыИРасходы.Номинал - ТаблицаДоходыИРасходы.Сумма),
			|	0,
			|	СУММА(ТаблицаДоходыИРасходы.Номинал - ТаблицаДоходыИРасходы.Сумма)
			|ИЗ
			|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ТаблицаДоходыИРасходы
			|ГДЕ
			|	&ЧекПробит
			|	И НЕ &Архивный
			|	И ТаблицаДоходыИРасходы.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат)
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаДоходыИРасходы.Дата,
			|	ТаблицаДоходыИРасходы.Организация,
			|	ТаблицаДоходыИРасходы.Подразделение,
			|	ТаблицаДоходыИРасходы.СчетУчетаДоходов
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок,
			|	НомерСтроки";
			
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПоложительнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ОтрицательнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеРасходы);
	Запрос.УстановитьПараметр("ОтражениеДоходов", НСтр("ru='Отражение доходов'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Исключая));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходы", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходы()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажи(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродажи.Дата КАК Период,
	|	ТаблицаПродажи.Организация КАК Организация,
	|	ТаблицаПродажи.Номенклатура КАК Номенклатура,
	|	ТаблицаПродажи.Характеристика КАК Характеристика,
	|	ТаблицаПродажи.НоменклатураНабора КАК НоменклатураНабора,
	|	ТаблицаПродажи.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ТаблицаПродажи.Партия КАК Партия,
	|	ТаблицаПродажи.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаПродажи.Документ КАК Документ,
	|	ТаблицаПродажи.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаПродажи.Подразделение КАК Подразделение,
	|	ТаблицаПродажи.Ответственный КАК Ответственный,
	|	СУММА(ТаблицаПродажи.Количество) КАК Количество,
	|	СУММА(ТаблицаПродажи.СуммаНДСЗакупкиПродажи) КАК СуммаНДС,
	|	СУММА(ТаблицаПродажи.Сумма) КАК Сумма,
	|	0 КАК Себестоимость,
	|	СУММА(ТаблицаПродажи.Сумма + ТаблицаПродажи.СуммаСкидкиНаценки + ТаблицаПродажи.СуммаАвтоматическойСкидки + ТаблицаПродажи.СуммаСкидкиОплатыБонусом) КАК СуммаБезСкидки
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаПродажи
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ ТаблицаПродажи.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродажи.Дата,
	|	ТаблицаПродажи.Организация,
	|	ТаблицаПродажи.Номенклатура,
	|	ТаблицаПродажи.Характеристика,
	|	ТаблицаПродажи.НоменклатураНабора,
	|	ТаблицаПродажи.ХарактеристикаНабора,
	|	ТаблицаПродажи.Партия,
	|	ТаблицаПродажи.ЗаказПокупателя,
	|	ТаблицаПродажи.Документ,
	|	ТаблицаПродажи.СтавкаНДС,
	|	ТаблицаПродажи.Подразделение,
	|	ТаблицаПродажи.Ответственный";
	
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.Дляпроведения.ОперацияСДенежнымиСредствами);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажи", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажи()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаУправленческий(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаУправленческий.НомерСтроки КАК НомерСтроки,
	|	ТаблицаУправленческий.Дата КАК Период,
	|	ТаблицаУправленческий.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ТаблицаУправленческий.КассаККМСчетУчета КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалДт,
//ЭР Несторук С.И. 08.12.2017 12:34:52 {
	|    ВЫБОР 
	|		КОГДА  ТаблицаУправленческий.ES_ЭтоГруз ТОГДА
	|		&СчетНП
	|		ИНАЧЕ
	//}ЭР Несторук С.И.
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Управленческий.РасчетыСПоставщиками)
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчетаВыручкиОтПродаж
	|	КОНЕЦ 
	//ЭР Несторук С.И. 08.12.2017 12:36:08 {
	|    КОНЕЦ
	//}ЭР Несторук С.И.
	|	КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА ТаблицаУправленческий.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалКт,
	|	ТаблицаУправленческий.Сумма КАК Сумма,
	//ЭР Несторук С.И. 08.12.2017 18:39:50 {
	|	ВЫБОР КОГДА ТаблицаУправленческий.ES_ЭтоГруз ТОГДА ""Прием наложенных платежей"" ИНАЧЕ 
	//}ЭР Несторук С.И.
	|	&ОтражениеВыручки 
	//ЭР Несторук С.И. 08.12.2017 18:40:49 {
	|	КОНЕЦ
	//}ЭР Несторук С.И.
	|	КАК Содержание
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаУправленческий
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ОперацияСДенежнымиСредствами
	|	И НЕ ТаблицаУправленческий.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаУправленческий.Ссылка.Контрагент.СчетУчетаАвансовПокупателя,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.Ссылка.Контрагент.СчетУчетаАвансовПокупателя.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.Ссылка.Контрагент.СчетУчетаАвансовПокупателя.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.КассаККМСчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.Сумма,
	|	&ЗачетАванса
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаУправленческий
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаУправленческий.КассаККМСчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	&СчетУчетаАвансовПокупателя,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	ТаблицаУправленческий.Сумма,
	|	&ВозникновениеАвансаПокупателя
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаУправленческий
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ОперацияСДенежнымиСредствами
	|	И ТаблицаУправленческий.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаУправленческий.КассаККМ.СчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМ.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМ.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.СчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.Сумма,
	|	&ВозникновениеАвансаПокупателя
	|ИЗ
	|	ВременнаяТаблицаРасчетыСПокупателями КАК ТаблицаУправленческий
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И &ОперацияСДенежнымиСредствами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаУправленческий.ЭквайринговыйТерминалСчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ЭквайринговыйТерминалСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ЭквайринговыйТерминалСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
		//ЭР Несторук С.И. 08.12.2017 14:45:09 {
	//|	ТаблицаУправленческий.КассаККМСчетУчета,
	|    ВЫБОР 
	|		КОГДА  ТаблицаУправленческий.ЕстьГрузы ТОГДА
	|		&СчетНП
	|		ИНАЧЕ
	|		ТаблицаУправленческий.КассаККМСчетУчета 
	|	КОНЕЦ,
	|    ВЫБОР 
	|		КОГДА  ТаблицаУправленческий.ЕстьГрузы ТОГДА
	|		НЕОПРЕДЕЛЕНО ИНАЧЕ		
	//}ЭР Несторук С.И. 
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	//ЭР Несторук С.И. 08.12.2017 15:45:53 {
	|	КОНЕЦ,
	|    ВЫБОР 
	|		КОГДА  ТаблицаУправленческий.ЕстьГрузы ТОГДА
	|		0 ИНАЧЕ	
	//}ЭР Несторук С.И.
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	//ЭР Несторук С.И. 08.12.2017 15:49:34 {
	|	КОНЕЦ
	//}ЭР Несторук С.И. 
	|	КОНЕЦ,
	|	ТаблицаУправленческий.Сумма,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.БанковскаяКарта)
	|			ТОГДА &ОтражениеОплатыПлатежнымиКартами
	|		КОГДА ТаблицаУправленческий.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.Кредит)
	|			ТОГДА &ОтражениеОплатыКредитом
	|		ИНАЧЕ """"
	|	КОНЕЦ
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ТаблицаУправленческий
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И ТаблицаУправленческий.ВидОплаты В (ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.БанковскаяКарта), ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.Кредит))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	6,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	&СчетУчетаАвансовПокупателя,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	ТаблицаУправленческий.КассаККМСчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	//ЭР Несторук С.И. 08.12.2017 15:45:53 {
	|	КОНЕЦ,
	|    ВЫБОР 
	|		КОГДА  ТаблицаУправленческий.ЕстьГрузы ТОГДА
	|		0 ИНАЧЕ	
	//}ЭР Несторук С.И.
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	//ЭР Несторук С.И. 08.12.2017 15:49:34 {
	|	КОНЕЦ
	//}ЭР Несторук С.И.
	|	КОНЕЦ,
	|	ТаблицаУправленческий.Сумма,
	|	&ЗачетАванса
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ТаблицаУправленческий
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И ТаблицаУправленческий.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	7,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СчетУчета
	|		ИНАЧЕ &ОтрицательнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|				И ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА &ПоложительнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы < 0
	|				И ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаУправленческий.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	&КурсоваяРазница
	|ИЗ
	|	ВременнаяТаблицаКурсовыхРазницДенежныеСредстваВКассахККМ КАК ТаблицаУправленческий
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ОтражениеВыручки", НСтр("ru = 'Выручка от продажи'"));
	Запрос.УстановитьПараметр("ВозникновениеАвансаПокупателя", НСтр("ru = 'Возникновение аванса покупателя'"));
	Запрос.УстановитьПараметр("ОтражениеОплатыПлатежнымиКартами", НСтр("ru = 'Оплата платежными картами'"));
	Запрос.УстановитьПараметр("ЗачетАванса", НСтр("ru='Зачет предоплаты'"));
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Запрос.УстановитьПараметр("ПоложительнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ОтрицательнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеРасходы);
	Запрос.УстановитьПараметр("ОтражениеОплатыКредитом", НСтр("ru = 'Оплата кредитом'"));
	Запрос.УстановитьПараметр("СчетУчетаРасчетовСБанком", ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторами);
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	
	//ЭР Несторук С.И. 08.12.2017 14:47:41 {
	Запрос.УстановитьПараметр("СчетНП", ПланыСчетов.Управленческий.ES_НаложенныеПлатежи);
	//}ЭР Несторук С.И.
	
	Для Каждого КлючИЗначение Из СтруктураДополнительныеСвойства.ДляСертификатов Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл  
		НоваяПроводка = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПроводка, Выборка);
	КонецЦикла;
	
КонецПроцедуры // СформироватьТаблицаУправленческий()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
Процедура ИнициализироватьДанныеДокумента(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	Если НЕ СтруктураДополнительныеСвойства.Свойство("УчетнаяПолитика") Тогда // ЕГАИС
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОстаткиАлкогольнойПродукцииЕГАИС", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.Дата КАК Дата,
	|	ЧекККМ.Дата КАК Период,
	|	ЧекККМ.Организация КАК Организация,
	|	ЧекККМ.Контрагент КАК Контрагент,
	|	ЧекККМ.Договор КАК Договор,
	|	ЧекККМ.Заказ КАК Заказ,
	|	ВЫБОР
	|		КОГДА ЧекККМ.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ЧекККМ.Ссылка
	|		ИНАЧЕ ЧекККМ.Заказ
	|	КОНЕЦ КАК Документ,
	|	ЧекККМ.КассаККМ КАК КассаККМ,
	|	ЧекККМ.КассаККМ.СчетУчета КАК КассаККМСчетУчета,
	|	ЧекККМ.ВалютаДокумента КАК ВалютаДокумента,
	|	ЧекККМ.ВалютаДокумента КАК ВалютаДенежныхСредств,
	|	ЧекККМ.Договор.ВалютаРасчетов КАК ДоговорВалютаРасчетов,
	|	ЧекККМ.СуммаДокумента КАК Сумма,
	|	ЧекККМ.СуммаДокумента КАК СуммаВал,
	|	ЗНАЧЕНИЕ(Справочник.ХозяйственныеОперации.ОтПокупателя) КАК ХозяйственнаяОперация,
	|	ЧекККМ.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ЧекККМ.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ЧекККМ.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ЧекККМ.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	ЧекККМ.СпособЗачетаПредоплаты КАК СпособЗачетаПредоплаты,
	|	ЧекККМ.Курс КАК Курс,
	|	ЧекККМ.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВременнаяТаблицаШапка
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК НомерСтроки,
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.Дата КАК Дата,
	|	ЧекККМ.Организация КАК Организация,
	|	ЧекККМ.Контрагент КАК Контрагент,
	|	ЧекККМ.Договор КАК Договор,
	|	ЧекККМ.Заказ КАК Заказ,
	|	ВЫБОР
	|		КОГДА ЧекККМ.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ЧекККМ.Ссылка
	|		ИНАЧЕ ЧекККМ.Заказ
	|	КОНЕЦ КАК Документ,
	|	ЧекККМ.КассаККМ КАК КассаККМ,
	|	ЧекККМ.КассаККМ.СчетУчета КАК КассаККМСчетУчета,
	|	ЧекККМ.ВалютаДокумента КАК ВалютаДокумента,
	|	ЧекККМ.ВалютаДокумента КАК ВалютаДенежныхСредств,
	|	ЧекККМ.ВалютаДокумента КАК ВалютаРасчетов,
	|	ЧекККМ.СуммаДокумента КАК СуммаПлатежа,
	|	ЧекККМ.СуммаДокумента КАК СуммаРасчетов,
	|	ЧекККМ.СуммаДокумента КАК СуммаУчета,
	|	ЧекККМ.СуммаДокумента КАК Сумма,
	|	ЧекККМ.СуммаДокумента КАК СуммаВал,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаИРаспределенияПлатежей.Вручную) КАК СпособЗачета,
	|	ЧекККМ.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ЧекККМ.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ЧекККМ.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ЧекККМ.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	ИСТИНА КАК ПризнакАванса,
	|	1 КАК Курс,
	|	1 КАК Кратность,
	|	&СтавкаБезНДС КАК СтавкаНДС,
	|	0 КАК СуммаНДС,
	|	ЗНАЧЕНИЕ(Документ.СчетНаОплату.ПустаяСсылка) КАК СчетНаОплату,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВКассу.ОтПокупателя) КАК ВидОперации
	|ПОМЕСТИТЬ ВременнаяТаблицаРасшифровкаПлатежа
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЧекККМЗапасы.Ссылка КАК Ссылка,
	|	ЧекККМЗапасы.Ссылка КАК Документ,
	|	ЧекККМЗапасы.Ссылка.Дата КАК Дата,
	|	ЧекККМЗапасы.Заказ КАК ЗаказПокупателя,
	|	ЧекККМЗапасы.Ссылка.КассаККМ КАК КассаККМ,
	|	ЧекККМЗапасы.Ссылка.Ответственный КАК Ответственный,
	|	ЧекККМЗапасы.Ссылка.КассаККМ.Владелец КАК КассаККМВладелец,
	|	ЧекККМЗапасы.Ссылка.КассаККМ.СчетУчета КАК КассаККМСчетУчета,
	|	ЧекККМЗапасы.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	&Организация КАК Организация,
	|	ЧекККМЗапасы.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЧекККМЗапасы.Ссылка.Подразделение КАК Подразделение,
	|	ЧекККМЗапасы.Номенклатура.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЧекККМЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЧекККМЗапасы.Номенклатура.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж КАК СчетУчетаВыручкиОтПродаж,
	|	ЧекККМЗапасы.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж КАК СчетУчетаСебестоимость,
	|	НЕОПРЕДЕЛЕНО КАК Ячейка,
	|	ЧекККМЗапасы.Номенклатура.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|				И ЧекККМЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТоварыНаКомиссии,
	|	ЧекККМЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЧекККМЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ЧекККМЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЧекККМЗапасы.ХарактеристикаНабора
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК ХарактеристикаНабора,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ЧекККМЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЧекККМЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЧекККМЗапасы.Количество
	|		ИНАЧЕ ЧекККМЗапасы.Количество * ЧекККМЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ЧекККМЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЧекККМЗапасы.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ЧекККМЗапасы.СуммаНДС * КурсыДокВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыДокВалюты.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ЧекККМЗапасы.СуммаНДС * КурсыДокВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыДокВалюты.Кратность) КАК ЧИСЛО(15, 2)) КАК СуммаНДСЗакупкиПродажи,
	|	ВЫРАЗИТЬ(ЧекККМЗапасы.Всего * КурсыДокВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыДокВалюты.Кратность) КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ(ЧекККМЗапасы.СуммаНДС КАК ЧИСЛО(15, 2)) КАК СуммаНДСВал,
	|	ВЫРАЗИТЬ(ЧекККМЗапасы.Всего КАК ЧИСЛО(15, 2)) КАК СуммаВал,
	|	ВЫРАЗИТЬ(ЧекККМЗапасы.Всего КАК ЧИСЛО(15, 2)) КАК ВсегоВалютаДокумента,
	|	ЧекККМЗапасы.КлючСвязи КАК КлючСвязи,
	|	НЕОПРЕДЕЛЕНО КАК КоррСтруктурнаяЕдиница,
	|	НЕОПРЕДЕЛЕНО КАК КоррНоменклатура,
	|	НЕОПРЕДЕЛЕНО КАК КоррСчетУчетаЗапасов,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЧекККМЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК КоррХарактеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ЧекККМЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК КоррПартия,
	|	ЧекККМЗапасы.Ссылка.КассоваяСмена КАК КассоваяСмена,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЧекККМЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЧекККМЗапасы.Резерв
	|		ИНАЧЕ ЧекККМЗапасы.Резерв * ЧекККМЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Резерв,
	|	ЧекККМЗапасы.Ссылка.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	//ЭР Несторук С.И. 08.12.2017 12:24:22 {
	|	ЧекККМЗапасы.ES_ЭтоГруз КАК ES_ЭтоГруз,
	//}ЭР Несторук С.И.
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЧекККМЗапасы.Номенклатура.ПроизвольныйНоминал
	|				ТОГДА ЧекККМЗапасы.Сумма / ВЫБОР
	|						КОГДА ЧекККМЗапасы.Номенклатура.ИспользоватьСерийныеНомера
	|							ТОГДА ЧекККМЗапасы.Количество
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			ИНАЧЕ ЧекККМЗапасы.Номенклатура.Номинал / ВЫБОР
	|					КОГДА ЧекККМЗапасы.Номенклатура.ИспользоватьСерийныеНомера
	|						ТОГДА 1
	|					ИНАЧЕ 1 / ЧекККМЗапасы.Количество
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК НоминалСертификата,
	|	ЧекККМЗапасы.Номенклатура.ЧастичноеПогашение КАК ЧастичноеПогашениеСертификата,
	|	ЧекККМЗапасы.Номенклатура.ПроизвольныйНоминал КАК ПроизвольныйНоминал,
	|	ЧекККМЗапасы.Номенклатура.СчетУчетаЗатрат КАК СчетУчетаЗатрат,
	|	ЧекККМЗапасы.Номенклатура.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера,
	|	ЧекККМЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ЧекККМЗапасы.Цена КАК Цена,
	|	ЧекККМЗапасы.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
	|	ЧекККМЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						Константы.ВалютаУчета
	|					ИЗ
	|						Константы КАК Константы)) КАК КурсыУпрВалюты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыДокВалюты
	|		ПО ЧекККМЗапасы.Ссылка.ВалютаДокумента = КурсыДокВалюты.Валюта
	|ГДЕ
	|	ЧекККМЗапасы.Ссылка = &Ссылка
	|;
	|
	// ЕФСОЛ Сережко А.С. + 
	|ВЫБРАТЬ
	|	ЧекККМЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЧекККМЗапасы.Ссылка КАК Ссылка,
	|	ЧекККМЗапасы.Ссылка КАК Документ,
	|	ЧекККМЗапасы.Ссылка.Дата КАК Дата,
	|	ЧекККМЗапасы.Заказ КАК ЗаказПокупателя,
	|	ЧекККМЗапасы.Ссылка.КассаККМ КАК КассаККМ,
	|	ЧекККМЗапасы.Ссылка.Ответственный КАК Ответственный,
	|	ЧекККМЗапасы.Ссылка.КассаККМ.Владелец КАК КассаККМВладелец,
	|	ЧекККМЗапасы.Ссылка.КассаККМ.СчетУчета КАК КассаККМСчетУчета,
	|	ЧекККМЗапасы.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	&Организация КАК Организация,
	|	ЧекККМЗапасы.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЧекККМЗапасы.Ссылка.Подразделение КАК Подразделение,
	|	ЧекККМЗапасы.Номенклатура.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЧекККМЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЧекККМЗапасы.Номенклатура.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж КАК СчетУчетаВыручкиОтПродаж,
	|	ЧекККМЗапасы.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж КАК СчетУчетаСебестоимость,
	|	НЕОПРЕДЕЛЕНО КАК Ячейка,
	|	ЧекККМЗапасы.Номенклатура.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|				И ЧекККМЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТоварыНаКомиссии,
	|	ЧекККМЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЧекККМЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ЧекККМЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЧекККМЗапасы.ХарактеристикаНабора
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК ХарактеристикаНабора,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ЧекККМЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЧекККМЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЧекККМЗапасы.Количество
	|		ИНАЧЕ ЧекККМЗапасы.Количество * ЧекККМЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ЧекККМЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЧекККМЗапасы.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ЧекККМЗапасы.СуммаНДС * КурсыДокВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыДокВалюты.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ЧекККМЗапасы.СуммаНДС * КурсыДокВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыДокВалюты.Кратность) КАК ЧИСЛО(15, 2)) КАК СуммаНДСЗакупкиПродажи,
	|	ВЫРАЗИТЬ(ЧекККМЗапасы.Всего * КурсыДокВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыДокВалюты.Кратность) КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ(ЧекККМЗапасы.СуммаНДС КАК ЧИСЛО(15, 2)) КАК СуммаНДСВал,
	|	ВЫРАЗИТЬ(ЧекККМЗапасы.Всего КАК ЧИСЛО(15, 2)) КАК СуммаВал,
	|	ВЫРАЗИТЬ(ЧекККМЗапасы.Всего КАК ЧИСЛО(15, 2)) КАК ВсегоВалютаДокумента,
	|	ЧекККМЗапасы.КлючСвязи КАК КлючСвязи,
	|	НЕОПРЕДЕЛЕНО КАК КоррСтруктурнаяЕдиница,
	|	НЕОПРЕДЕЛЕНО КАК КоррНоменклатура,
	|	НЕОПРЕДЕЛЕНО КАК КоррСчетУчетаЗапасов,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЧекККМЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК КоррХарактеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ЧекККМЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК КоррПартия,
	|	ЧекККМЗапасы.Ссылка.КассоваяСмена КАК КассоваяСмена,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЧекККМЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЧекККМЗапасы.Резерв
	|		ИНАЧЕ ЧекККМЗапасы.Резерв * ЧекККМЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Резерв,
	|	ЧекККМЗапасы.Ссылка.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,




	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЧекККМЗапасы.Номенклатура.ПроизвольныйНоминал
	|				ТОГДА ЧекККМЗапасы.Сумма / ВЫБОР
	|						КОГДА ЧекККМЗапасы.Номенклатура.ИспользоватьСерийныеНомера
	|							ТОГДА ЧекККМЗапасы.Количество
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			ИНАЧЕ ЧекККМЗапасы.Номенклатура.Номинал / ВЫБОР
	|					КОГДА ЧекККМЗапасы.Номенклатура.ИспользоватьСерийныеНомера
	|						ТОГДА 1
	|					ИНАЧЕ 1 / ЧекККМЗапасы.Количество
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК НоминалСертификата,
	|	ЧекККМЗапасы.Номенклатура.ЧастичноеПогашение КАК ЧастичноеПогашениеСертификата,
	|	ЧекККМЗапасы.Номенклатура.ПроизвольныйНоминал КАК ПроизвольныйНоминал,
	|	ЧекККМЗапасы.Номенклатура.СчетУчетаЗатрат КАК СчетУчетаЗатрат,
	|	ЧекККМЗапасы.Номенклатура.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера,
	|	ЧекККМЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ЧекККМЗапасы.Цена КАК Цена,
	|	ЧекККМЗапасы.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
	|	ЧекККМЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки
	|ПОМЕСТИТЬ ЭР_ВременнаяТаблицаЗапасы
	|ИЗ
	|	Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						Константы.ВалютаУчета
	|					ИЗ
	|						Константы КАК Константы)) КАК КурсыУпрВалюты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыДокВалюты
	|		ПО ЧекККМЗапасы.Ссылка.ВалютаДокумента = КурсыДокВалюты.Валюта
	|ГДЕ
	|	ЧекККМЗапасы.Ссылка = &Ссылка
	// ЕФСОЛ -
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.Ссылка.Дата КАК Дата,
	|	&Ссылка КАК Документ,
	|	&Организация КАК Организация,
	|	ТабличнаяЧасть.Ссылка.КассаККМ КАК КассаККМ,
	|	ТабличнаяЧасть.Ссылка.КассаККМ.СчетУчета КАК КассаККМСчетУчета,
	|	ТабличнаяЧасть.ЭквайринговыйТерминал.СчетУчета КАК ЭквайринговыйТерминалСчетУчета,
	|	ТабличнаяЧасть.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * КурсыВалютКассы.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ТабличнаяЧасть.Сумма КАК СуммаВал,
	|	ТабличнаяЧасть.ВидОплаты КАК ВидОплаты,
	|	ТабличнаяЧасть.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
	|	ТабличнаяЧасть.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
	|	ТабличнаяЧасть.ЭквайринговыйТерминал.Эквайрер КАК Эквайрер,
	|	ТабличнаяЧасть.ЭквайринговыйТерминал.Договор КАК Договор,
	|	ТабличнаяЧасть.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	ТабличнаяЧасть.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	ТабличнаяЧасть.НомерСертификата КАК НомерСертификата,
	|	ТабличнаяЧасть.ПодарочныйСертификат.ЧастичноеПогашение КАК ЧастичноеПогашение,
	|	ТабличнаяЧасть.ПодарочныйСертификат.Номинал КАК Номинал,
	|	ТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
	|	ТабличнаяЧасть.ПодарочныйСертификат.СчетУчетаДоходов КАК СчетУчетаДоходов,
	|	ТабличнаяЧасть.ПодарочныйСертификат.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера,
	|	ТабличнаяЧасть.Сумма КАК СуммаСертификата,
	|	ТабличнаяЧасть.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТабличнаяЧасть.Ссылка.Заказ КАК Заказ,
	|	ТабличнаяЧасть.Ссылка.Контрагент КАК Контрагент
	//ЭР Несторук С.И. 08.12.2017 14:32:27 {
	|	,
	|	&ЕстьГрузы
	//}ЭР Несторук С.И.
	|ПОМЕСТИТЬ ВременнаяТаблицаОплатаПлатежнымиКартами
	|ИЗ
	|	Документ.ЧекККМ.БезналичнаяОплата КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						Константы.ВалютаУчета
	|					ИЗ
	|						Константы КАК Константы)) КАК КурсыВалютУчетаСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютКассы
	|		ПО ТабличнаяЧасть.Ссылка.ВалютаДокумента = КурсыВалютКассы.Валюта
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМПредоплата.НомерСтроки КАК НомерСтроки,
	|	ЧекККМПредоплата.Ссылка.Дата КАК Дата,
	|	ЧекККМПредоплата.Документ КАК Документ,
	|	ЧекККМПредоплата.Заказ КАК Заказ,
	|	ЧекККМПредоплата.Курс КАК Курс,
	|	ЧекККМПредоплата.Кратность КАК Кратность,
	|	ЧекККМПредоплата.Ссылка.КассаККМ КАК КассаККМ,
	|	ЧекККМПредоплата.Ссылка.КассаККМ.СчетУчета КАК КассаККМСчетУчета,
	|	ЧекККМПредоплата.Ссылка.Организация КАК Организация,
	|	ЧекККМПредоплата.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЧекККМПредоплата.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ЧекККМПредоплата.СуммаРасчетов КАК Сумма,
	|	ЧекККМПредоплата.СуммаРасчетов КАК СуммаВал,
	|	ЧекККМПредоплата.СуммаРасчетов КАК СуммаРасчетов,
	|	ЧекККМПредоплата.СуммаПлатежа КАК СуммаПлатежа,
	|	ЧекККМПредоплата.Ссылка КАК Ссылка,
	|	ЧекККМПредоплата.Ссылка.Контрагент КАК Контрагент,
	|	ЧекККМПредоплата.Ссылка.Договор КАК Договор,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс) КАК ТипРасчетов,
	|	ЛОЖЬ КАК ОплатаСертификатом,
	|	ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка) КАК НомерСертификата
	|ПОМЕСТИТЬ ВременнаяТаблицаПредоплата
	|ИЗ
	|	Документ.ЧекККМ.Предоплата КАК ЧекККМПредоплата
	|ГДЕ
	|	ЧекККМПредоплата.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМСкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	ЧекККМСкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЧекККМСкидкиНаценки.Ссылка.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|				ТОГДА ЧекККМСкидкиНаценки.Сумма * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ЧекККМСкидкиНаценки.Сумма * КурсыУпрВалюты.Кратность / КурсыУпрВалюты.Курс
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ЧекККМСкидкиНаценки.Ссылка.Дата КАК Период,
	|	ЧекККМСкидкиНаценки.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВременнаяТаблицаАвтоСкидкиНаценки
	|ИЗ
	|	Документ.ЧекККМ.СкидкиНаценки КАК ЧекККМСкидкиНаценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						КонстантаВалютаУчета.Значение
	|					ИЗ
	|						Константа.ВалютаУчета КАК КонстантаВалютаУчета)) КАК КурсыУпрВалюты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						КонстантаНациональнаяВалюта.Значение
	|					ИЗ
	|						Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта)) КАК КурсыРегВалюты
	|		ПО (ИСТИНА),
	|	Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта
	|ГДЕ
	|	ЧекККМСкидкиНаценки.Ссылка = &Ссылка
	|	И ЧекККМСкидкиНаценки.Сумма <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
	|	МАКСИМУМ(ЭквайринговыеТерминалыВидыПлатежныхКарт.ПроцентКомиссии) КАК ПроцентКомиссии
	|ПОМЕСТИТЬ ВременнаяТаблицаПроцентыКомиссии
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы.ВидыПлатежныхКарт КАК ЭквайринговыеТерминалыВидыПлатежныхКарт
	|ГДЕ
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.Ссылка = &ЭквайринговыйТерминал
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.ВидПлатежнойКарты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяСерийныеНомера.КлючСвязи КАК КлючСвязи,
	|	РасходнаяНакладнаяСерийныеНомера.СерийныйНомер КАК СерийныйНомер
	|ПОМЕСТИТЬ ВременнаяТаблицаСерийныеНомера
	|ИЗ
	|	Документ.ЧекККМ.СерийныеНомера КАК РасходнаяНакладнаяСерийныеНомера
	|ГДЕ
	|	РасходнаяНакладнаяСерийныеНомера.Ссылка = &Ссылка
	|	И &ИспользоватьСерийныеНомера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаАкцизныеМарки.Ссылка.Дата КАК Период,
	|	ТаблицаАкцизныеМарки.Ссылка КАК Ссылка,
	|	&ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ТаблицаАкцизныеМарки.Справка2 КАК Справка2,
	|	Справки2ЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаАкцизныеМарки.АкцизнаяМарка) КАК Количество,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаАкцизныеМарки.АкцизнаяМарка) КАК СвободныйОстаток
	|ПОМЕСТИТЬ ВременнаяТаблицаАкцизныеМарки
	|ИЗ
	|	Документ.ЧекККМ.АкцизныеМарки КАК ТаблицаАкцизныеМарки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Справки2ЕГАИС КАК Справки2ЕГАИС
	|		ПО (Справки2ЕГАИС.Ссылка = ТаблицаАкцизныеМарки.Справка2)
	|ГДЕ
	|	ТаблицаАкцизныеМарки.Ссылка = &Ссылка
	|	И ТаблицаАкцизныеМарки.Справка2 <> ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаАкцизныеМарки.Ссылка,
	|	ТаблицаАкцизныеМарки.Справка2,
	|	Справки2ЕГАИС.АлкогольнаяПродукция,
	|	ТаблицаАкцизныеМарки.Ссылка.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМБонусныеБаллыКНачислению.НомерСтроки КАК НомерСтроки,
	|	ЧекККМБонусныеБаллыКНачислению.Ссылка.Дата КАК Период,
	|	ЧекККМБонусныеБаллыКНачислению.Ссылка.ДисконтнаяКарта КАК БонуснаяКарта,
	|	ЧекККМЗапасы.Номенклатура КАК Номенклатура,
	|	ЧекККМЗапасы.Характеристика КАК Характеристика,
	|	ЧекККМБонусныеБаллыКНачислению.КоличествоБонусныхБаллов КАК Количество,
	|	ЧекККМБонусныеБаллыКНачислению.ДатаНачисления КАК ДатаНачисления,
	|	ЧекККМБонусныеБаллыКНачислению.ДатаСписания КАК ДатаСгорания,
	|	ЧекККМБонусныеБаллыКНачислению.Ссылка КАК Ссылка,
	|	ЧекККМБонусныеБаллыКНачислению.СкидкаНаценка КАК АналитикаНачисленияБонусов
	|ПОМЕСТИТЬ ВременнаяТаблицаНачисленияБонусов
	|ИЗ
	|	Документ.ЧекККМ.БонусныеБаллыКНачислению КАК ЧекККМБонусныеБаллыКНачислению
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
	|		ПО ЧекККМБонусныеБаллыКНачислению.Ссылка = ЧекККМЗапасы.Ссылка
	|			И ЧекККМБонусныеБаллыКНачислению.КлючСвязи = ЧекККМЗапасы.КлючСвязи
	|ГДЕ
	|	ЧекККМБонусныеБаллыКНачислению.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМБезналичнаяОплата.НомерСтроки КАК НомерСтроки,
	|	НАЧАЛОПЕРИОДА(ЧекККМБезналичнаяОплата.Ссылка.Дата, ДЕНЬ) КАК Период,
	|	ЧекККМБезналичнаяОплата.БонуснаяКарта КАК БонуснаяКарта,
	|	ЧекККМБезналичнаяОплата.СуммаБонусов КАК Количество,
	|	0 КАК КСписанию,
	|	ЧекККМБезналичнаяОплата.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВременнаяТаблицаСписанияБонусов
	|ИЗ
	|	Документ.ЧекККМ.БезналичнаяОплата КАК ЧекККМБезналичнаяОплата
	|ГДЕ
	|	ЧекККМБезналичнаяОплата.Ссылка = &Ссылка
	|	И ЧекККМБезналичнаяОплата.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.Бонусы)";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМ);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылкаЧекККМ, "Организация,СтруктурнаяЕдиница,ЭквайринговыйТерминал");
	
	Запрос.УстановитьПараметр("ЭквайринговыйТерминал", СтруктураРеквизитов.ЭквайринговыйТерминал);
	Запрос.УстановитьПараметр("ИспользоватьСерийныеНомера", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерийныеНомера);
	
	ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(СтруктураРеквизитов.Организация, СтруктураРеквизитов.СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("СтавкаБезНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());

	//ЭР Несторук С.И. 08.12.2017 14:34:08 {
	ЕстьГрузы = ДокументСсылкаЧекККМ.Запасы.Найти(Истина, "ES_ЭтоГруз") <> Неопределено;
	Запрос.УстановитьПараметр("ЕстьГрузы", ЕстьГрузы);
	//}ЭР Несторук С.И.
	
	Запрос.ВыполнитьПакет();
	
	// Формирование проводок документа.
	УправлениеНебольшойФирмойСервер.СформироватьТаблицуПроводок(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаЗапасыНаСкладах(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДенежныеСредстваВКассахККМ(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходы(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходыНераспределенные(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходыКассовыйМетод(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПродажи(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
		
	// ДисконтныеКарты
	СформироватьТаблицаПродажиПоДисконтнойКарте(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	// АвтоматическиеСкидки
	СформироватьТаблицаПродажиПоПредоставленнымСкидкам(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	// Эквайринг
	СформироватьТаблицаОплатаПлатежнымиКартами(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	
	// Серийные номера
	СформироватьТаблицаСерийныеНомера(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	
	// Подарочные сертификаты
	СформироватьТаблицаПодарочныеСертификаты(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОплатаПодарочнымиСертификатами(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	СформироватьТаблицаРасчетыСПокупателями(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	
	// Бонусы
	СформироватьТаблицаБонусныеБаллы(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	СформироватьТаблицаНачисленияБонусныхБаллов(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	
	// Заказы покупателей в розничной торговле
	СформироватьТаблицаЗаказыПокупателей(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПлатежныйКалендарь(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	Если СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами
		И СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит
		И Не СтруктураДополнительныеСвойства.ДляПроведения.Архивный Тогда
		РасчетыПроведениеДокументов.СформироватьТаблицаОплатаСчетовИЗаказовДенежныеДокументы(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	Иначе
		СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	КонецЕсли;
	
	СформироватьТаблицаЗапасы(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаОстаткиАлкогольнойПродукцииЕГАИС(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаУправленческий(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства);

КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Функция возвращает шаблон пакетного запроса.
//
Функция СформироватьШаблонПакетногоЗапроса()
	
	ТекстЗапроса =
	Символы.ПС +
	";
	|
	|////////////////////////////////////////////////////////////////////////////////"
	+ Символы.ПС;
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьШаблонПакетногоЗапроса()

// Функция возвращает текст запроса по остаткам регистра Запасы.
//
Функция СформироватьТекстЗапросаОстаткиЗапасы()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДвиженияЗапасыИзменение.НомерСтроки КАК НомерСтроки,
	|	ДвиженияЗапасыИзменение.Организация КАК ОрганизацияПредставление,
	|	ДвиженияЗапасыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
	|	ДвиженияЗапасыИзменение.СчетУчета КАК СчетУчетаПредставление,
	|	ДвиженияЗапасыИзменение.Номенклатура КАК НоменклатураПредставление,
	|	ДвиженияЗапасыИзменение.Характеристика КАК ХарактеристикаПредставление,
	|	ДвиженияЗапасыИзменение.Партия КАК ПартияПредставление,
	|	ДвиженияЗапасыИзменение.ЗаказПокупателя КАК ЗаказПокупателяПредставление,
	|	ЗапасыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
	|	ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
	|	ЕСТЬNULL(ДвиженияЗапасыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасы,
	|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасы,
	|	ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) КАК СуммаОстатокЗапасы
	|ИЗ
	|	ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(&МоментКонтроля, ) КАК ЗапасыОстатки
	|		ПО ДвиженияЗапасыИзменение.Организация = ЗапасыОстатки.Организация
	|			И ДвиженияЗапасыИзменение.СтруктурнаяЕдиница = ЗапасыОстатки.СтруктурнаяЕдиница
	|			И ДвиженияЗапасыИзменение.СчетУчета = ЗапасыОстатки.СчетУчета
	|			И ДвиженияЗапасыИзменение.Номенклатура = ЗапасыОстатки.Номенклатура
	|			И ДвиженияЗапасыИзменение.Характеристика = ЗапасыОстатки.Характеристика
	|			И ДвиженияЗапасыИзменение.Партия = ЗапасыОстатки.Партия
	|			И ДвиженияЗапасыИзменение.ЗаказПокупателя = ЗапасыОстатки.ЗаказПокупателя
	|			И (ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) < 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + СформироватьШаблонПакетногоЗапроса();
	
КонецФункции // СформироватьТекстЗапросаОстаткиЗапасы()

// Функция возвращает текст запроса по остаткам регистра СерийныеНомера.
//
Функция СформироватьТекстЗапросаОстаткиСерийныеНомера()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДвиженияСерийныеНомераИзменение.НомерСтроки КАК НомерСтроки,
	|	ДвиженияСерийныеНомераИзменение.СерийныйНомер КАК СерийныйНомерПредставление,
	|	ДвиженияСерийныеНомераИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
	|	ДвиженияСерийныеНомераИзменение.Номенклатура КАК НоменклатураПредставление,
	|	ДвиженияСерийныеНомераИзменение.Характеристика КАК ХарактеристикаПредставление,
	|	ДвиженияСерийныеНомераИзменение.Партия КАК ПартияПредставление,
	|	ДвиженияСерийныеНомераИзменение.Ячейка КАК ЯчейкаПредставление,
	|	СерийныеНомераОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
	|	СерийныеНомераОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
	|	ЕСТЬNULL(ДвиженияСерийныеНомераИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(СерийныеНомераОстатки.КоличествоОстаток, 0) КАК ОстатокСерийныеНомера,
	|	ЕСТЬNULL(СерийныеНомераОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокСерийныеНомера
	|ИЗ
	|	ДвиженияСерийныеНомераИзменение КАК ДвиженияСерийныеНомераИзменение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СерийныеНомера.Остатки(&МоментКонтроля, ) КАК СерийныеНомераОстатки
	|		ПО ДвиженияСерийныеНомераИзменение.СтруктурнаяЕдиница = СерийныеНомераОстатки.СтруктурнаяЕдиница
	|			И ДвиженияСерийныеНомераИзменение.Номенклатура = СерийныеНомераОстатки.Номенклатура
	|			И ДвиженияСерийныеНомераИзменение.Характеристика = СерийныеНомераОстатки.Характеристика
	|			И ДвиженияСерийныеНомераИзменение.Партия = СерийныеНомераОстатки.Партия
	|			И ДвиженияСерийныеНомераИзменение.СерийныйНомер = СерийныеНомераОстатки.СерийныйНомер
	|			И ДвиженияСерийныеНомераИзменение.Ячейка = СерийныеНомераОстатки.Ячейка
	|			И (ЕСТЬNULL(СерийныеНомераОстатки.КоличествоОстаток, 0) < 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + СформироватьШаблонПакетногоЗапроса();
	
КонецФункции // СформироватьТекстЗапросаОстаткиСерийныеНомера()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылкаЧекККМ, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если НЕ УправлениеНебольшойФирмойСервер.ВыполнитьКонтрольОстатков()
	 ИЛИ НЕ Константы.КонтролироватьОстаткиПриПробитииЧековККМ.Получить()
	    ИЛИ ДокументСсылкаЧекККМ.Архивный Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временные таблицы "ДвиженияЗапасыИзменение", необходимо выполнить контроль реализации товаров.
	Если СтруктураВременныеТаблицы.ДвиженияЗапасыНаСкладахИзменение
	 ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыИзменение
	 ИЛИ СтруктураВременныеТаблицы.ДвиженияЗаказыПокупателейИзменение
	 ИЛИ СтруктураВременныеТаблицы.ДвиженияДенежныеСредстваВКассахККМИзменение
	 ИЛИ СтруктураВременныеТаблицы.ДвиженияСерийныеНомераИзменение
	 ИЛИ СтруктураВременныеТаблицы.ДвиженияПодарочныеСертификатыИзменение
	 ИЛИ СтруктураВременныеТаблицы.ДвиженияРасчетыСПокупателямиИзменение Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияЗапасыНаСкладахИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиницаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Ячейка) КАК ЯчейкаПредставление,
		|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыНаСкладахИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыНаСкладах,
		|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыНаСкладах
		|ИЗ
		|	ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки(
		|				&МоментКонтроля,
		|				(Организация, СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, Ячейка) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыНаСкладахИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|						ДвиженияЗапасыНаСкладахИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыНаСкладахИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыНаСкладахИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыНаСкладахИзменение.Ячейка КАК Ячейка
		|					ИЗ
		|						ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение)) КАК ЗапасыНаСкладахОстатки
		|		ПО ДвиженияЗапасыНаСкладахИзменение.Организация = ЗапасыНаСкладахОстатки.Организация
		|			И ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница = ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыНаСкладахИзменение.Номенклатура = ЗапасыНаСкладахОстатки.Номенклатура
		|			И ДвиженияЗапасыНаСкладахИзменение.Характеристика = ЗапасыНаСкладахОстатки.Характеристика
		|			И ДвиженияЗапасыНаСкладахИзменение.Партия = ЗапасыНаСкладахОстатки.Партия
		|			И ДвиженияЗапасыНаСкладахИзменение.Ячейка = ЗапасыНаСкладахОстатки.Ячейка
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияДенежныеСредстваВКассахККМИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияДенежныеСредстваВКассахККМИзменение.КассаККМ) КАК КассаККМПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияДенежныеСредстваВКассахККМИзменение.КассаККМ.ВалютаДенежныхСредств) КАК ВалютаПредставление,
		|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
		|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток,
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.СуммаВалИзменение + ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаВалОстаток, 0) КАК ОстатокДенежныхСредств,
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.СуммаПередЗаписью КАК СуммаПередЗаписью,
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.СуммаПриЗаписи КАК СуммаПриЗаписи,
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.СуммаИзменение КАК СуммаИзменение,
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.СуммаВалПередЗаписью КАК СуммаВалПередЗаписью,
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.СуммаВалПриЗаписи КАК СуммаВалПриЗаписи,
		|	ДвиженияДенежныеСредстваВКассахККМИзменение.СуммаВалИзменение КАК СуммаВалИзменение
		|ИЗ
		|	ДвиженияДенежныеСредстваВКассахККМИзменение КАК ДвиженияДенежныеСредстваВКассахККМИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(
		|				&МоментКонтроля,
		|				(Организация, КассаККМ) В
		|					(ВЫБРАТЬ
		|						ДвиженияДенежныеСредстваВКассахККМИзменение.Организация КАК Организация,
		|						ДвиженияДенежныеСредстваВКассахККМИзменение.КассаККМ КАК ТипДенежныхСредств
		|					ИЗ
		|						ДвиженияДенежныеСредстваВКассахККМИзменение КАК ДвиженияДенежныеСредстваВКассахККМИзменение)) КАК ДенежныеСредстваВКассахККМОстатки
		|		ПО ДвиженияДенежныеСредстваВКассахККМИзменение.Организация = ДенежныеСредстваВКассахККМОстатки.Организация
		|			И ДвиженияДенежныеСредстваВКассахККМИзменение.КассаККМ = ДенежныеСредстваВКассахККМОстатки.КассаККМ
		|ГДЕ
		|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаВалОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗаказыПокупателейИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗаказыПокупателейИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.ЗаказПокупателя КАК ЗаказПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ЗаказыПокупателейОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗаказыПокупателейИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК ОстатокЗаказыПокупателей,
		|	ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗаказыПокупателей
		|ИЗ
		|	ДвиженияЗаказыПокупателейИзменение КАК ДвиженияЗаказыПокупателейИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&МоментКонтроля, ) КАК ЗаказыПокупателейОстатки
		|		ПО ДвиженияЗаказыПокупателейИзменение.Организация = ЗаказыПокупателейОстатки.Организация
		|			И ДвиженияЗаказыПокупателейИзменение.ЗаказПокупателя = ЗаказыПокупателейОстатки.ЗаказПокупателя
		|			И ДвиженияЗаказыПокупателейИзменение.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
		|			И ДвиженияЗаказыПокупателейИзменение.Характеристика = ЗаказыПокупателейОстатки.Характеристика
		|			И (ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияПодарочныеСертификатыИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияПодарочныеСертификатыИзменение.ПодарочныйСертификат КАК Подарочныйсертификат,
		|	ДвиженияПодарочныеСертификатыИзменение.НомерСертификата КАК НомерСертификата,
		|	ЕСТЬNULL(ДвиженияПодарочныеСертификатыИзменение.СуммаИзменение, 0) + ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) КАК ОстатокПодарочныеСертификаты,
		|	ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) КАК СуммаОстатокПодарочныеСертификаты
		|ИЗ
		|	ДвиженияПодарочныеСертификатыИзменение КАК ДвиженияПодарочныеСертификатыИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты.Остатки(&МоментКонтроля, ) КАК ПодарочныеСертификатыОстатки
		|		ПО ДвиженияПодарочныеСертификатыИзменение.ПодарочныйСертификат = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
		|			И ДвиженияПодарочныеСертификатыИзменение.НомерСертификата = ПодарочныеСертификатыОстатки.НомерСертификата
		|			И (ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияРасчетыСПокупателямиИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияРасчетыСПокупателямиИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Контрагент КАК КонтрагентПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Договор КАК ДоговорПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Договор.ВалютаРасчетов КАК ВалютаПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Документ КАК ДокументПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Заказ КАК ЗаказПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов КАК ТипРасчетовПредставление,
		|	ЛОЖЬ КАК ДвиженияДенежныхДокументов,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаПередЗаписью КАК СуммаПередЗаписью,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаПриЗаписи КАК СуммаПриЗаписи,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаИзменение КАК СуммаИзменение,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПередЗаписью КАК СуммаВалПередЗаписью,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПриЗаписи КАК СуммаВалПриЗаписи,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалИзменение КАК СуммаВалИзменение,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПриЗаписи - ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаПолученныхАвансов,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалИзменение + ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаНепогашеннойЗадолженности,
		|	ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
		|	ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток,
		|	ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов КАК ТипРасчетов
		|ИЗ
		|	ДвиженияРасчетыСПокупателямиИзменение КАК ДвиженияРасчетыСПокупателямиИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПокупателями.Остатки(&МоментКонтроля, ) КАК РасчетыСПокупателямиОстатки
		|		ПО ДвиженияРасчетыСПокупателямиИзменение.Организация = РасчетыСПокупателямиОстатки.Организация
		|			И ДвиженияРасчетыСПокупателямиИзменение.Контрагент = РасчетыСПокупателямиОстатки.Контрагент
		|			И ДвиженияРасчетыСПокупателямиИзменение.Договор = РасчетыСПокупателямиОстатки.Договор
		|			И ДвиженияРасчетыСПокупателямиИзменение.Документ = РасчетыСПокупателямиОстатки.Документ
		|			И ДвиженияРасчетыСПокупателямиИзменение.Заказ = РасчетыСПокупателямиОстатки.Заказ
		|			И ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов = РасчетыСПокупателямиОстатки.ТипРасчетов
		|			И (ВЫБОР
		|				КОГДА ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
		|					ТОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) > 0
		|				ИНАЧЕ ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) < 0
		|			КОНЕЦ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
		Если Не ДокументСсылкаЧекККМ.ДвиженияПоЗапасамУдалять Тогда
			Запрос.Текст = Запрос.Текст // [0, 1, 2, 3, 4]
			+ СформироватьШаблонПакетногоЗапроса()
			+ СформироватьТекстЗапросаОстаткиЗапасы() // [5]
			+ СформироватьТекстЗапросаОстаткиСерийныеНомера() // [6]
		КонецЕсли;
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Если НЕ МассивРезультатов[0].Пустой()
		 ИЛИ НЕ МассивРезультатов[1].Пустой()
		 ИЛИ НЕ МассивРезультатов[2].Пустой()
		 ИЛИ НЕ МассивРезультатов[3].Пустой()
		 ИЛИ НЕ МассивРезультатов[4].Пустой() Тогда
			ДокументОбъектЧекККМ = ДокументСсылкаЧекККМ.ПолучитьОбъект()
		КонецЕсли;
		
		// Отрицательный остаток запасов на складе.
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[0].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасыНаСкладах(ДокументОбъектЧекККМ, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по кассе ККМ.
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредстваВКассахККМ(ДокументОбъектЧекККМ, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по заказу покупателя.
		Если НЕ МассивРезультатов[2].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗаказыПокупателей(ДокументОбъектЧекККМ, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по подарочным сертификатам
		Если Не МассивРезультатов[3].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[3].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструПодарочныеСертификаты(ДокументОбъектЧекККМ, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по расчетам с покупателями.
		Если НЕ МассивРезультатов[4].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[4].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструРасчетыСПокупателями(ДокументОбъектЧекККМ, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток учета запасов.
		Если Не ДокументСсылкаЧекККМ.ДвиженияПоЗапасамУдалять Тогда
			Если НЕ МассивРезультатов[5].Пустой() Тогда
				ВыборкаИзРезультатаЗапроса = МассивРезультатов[5].Выбрать();
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасы(ДокументОбъектЧекККМ, ВыборкаИзРезультатаЗапроса, Отказ);
			КонецЕсли;
		КонецЕсли;
		
		// Отрицательный остаток учета серийных номеров.
		Если Не ДокументСсылкаЧекККМ.ДвиженияПоЗапасамУдалять Тогда
			Если НЕ МассивРезультатов[6].Пустой() Тогда
				ВыборкаИзРезультатаЗапроса = МассивРезультатов[6].Выбрать();
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструСерийныеНомера(ДокументОбъектЧекККМ, ВыборкаИзРезультатаЗапроса, Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКонтроль()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходыНераспределенные(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМ);
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	0 КАК НомерСтроки,
	|	ТаблицаДокумента.Дата КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей) КАК Статья,
	|	ТаблицаДокумента.Сумма КАК СуммаДоходов,
	|	0 КАК СуммаРасходов
	|ИЗ
	|	ВременнаяТаблицаРасшифровкаПлатежа КАК ТаблицаДокумента
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И &ОперацияСДенежнымиСредствами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	0,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей),
	|	ТаблицаДокумента.Сумма,
	|	0
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыНераспределенные", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыНераспределенные()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходыКассовыйМетод(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМ);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаДС", ДокументСсылкаЧекККМ.ВалютаДокумента);
	
	Запрос.УстановитьПараметр("ПлатежныйКалендарь", ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь"));
	Запрос.УстановитьПараметр("УчетВалютныхОпераций", ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций"));
	
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Дата КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей) КАК Статья,
	|	ТаблицаДокумента.Сумма КАК СуммаДоходов,
	|	0 КАК СуммаРасходов
	|ИЗ
	|	ВременнаяТаблицаРасшифровкаПлатежа КАК ТаблицаДокумента
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И &ОперацияСДенежнымиСредствами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Организация,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей),
	|	-ТаблицаДокумента.Сумма,
	|	0
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ОперацияСДенежнымиСредствами";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыКассовыйМетод", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыКассовыйМетод()

Процедура ДополнитьТоварамиПараметрыПриПробитииЧека(ДокументОбъект, ОбщиеПараметры, ТаблицаТоваровЧека, ПризнакСпособаРасчета)
	
	ЭтоАванс = ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс
			ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная
			ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;
	
	Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс Тогда
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
		Если ОбщиеПараметры.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств Тогда
			СтрокаПозицииЧека.Наименование = НСтр("ru = 'Возврат от:'") + " " + ДокументОбъект.Контрагент;
		Иначе
			СтрокаПозицииЧека.Наименование = НСтр("ru = 'Оплата от:'") + " " + ДокументОбъект.Контрагент;
		КонецЕсли;
		СтрокаПозицииЧека.Количество     = 1;
		СтрокаПозицииЧека.Цена           = ДокументОбъект.СуммаДокумента;
		СтрокаПозицииЧека.ЦенаСоСкидками = ДокументОбъект.СуммаДокумента;
		СтрокаПозицииЧека.Сумма          = ДокументОбъект.СуммаДокумента;
		СтрокаПозицииЧека.НомерСекции    = 2;
		Если ОбщиеПараметры.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ОСН Тогда
			
			Если ДокументОбъект.Дата > '20190101' Тогда
				Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда 
					ЧекПродажи = ДокументОбъект.ЧекККМ;
					Если ЗначениеЗаполнено(ЧекПродажи) И ЧекПродажи.Дата < '20190101' Тогда  //Возврат аванса за 2018 год.
						СтрокаПозицииЧека.СтавкаНДС = 118;
					Иначе 
						СтрокаПозицииЧека.СтавкаНДС = 120;		
					КонецЕсли;
				Иначе 
					СтрокаПозицииЧека.СтавкаНДС = 120;
				КонецЕсли;
			Иначе 
				СтрокаПозицииЧека.СтавкаНДС = 118;
			КонецЕсли;
			
		Иначе
			СтрокаПозицииЧека.СтавкаНДС      = Неопределено;
		КонецЕсли;
		СтрокаПозицииЧека.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
		СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
		
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		
	Иначе
		
		Для Каждого СтрокаТЧ Из ТаблицаТоваровЧека Цикл
			
			СтрокаТаблицыТоваров = Новый СписокЗначений();
			РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТЧ.Номенклатура, "НаименованиеПолное,ТипНоменклатуры,ЭтоНабор,ВидМаркировки,АлкогольнаяПродукция");
			
			//ЭР Несторук С.И. 11.10.2018 13:41:52 {
			Если СтрокаТЧ.ES_ЭтоГруз Тогда
				НаименованиеТовара = СтрокаТЧ.ES_Содержание;
			Иначе
				//}ЭР Несторук С.И.
				НаименованиеТовара = РеквизитыНоменклатуры.НаименованиеПолное + ?(ЗначениеЗаполнено(СтрокаТЧ.Характеристика), " (" + Строка(СтрокаТЧ.Характеристика) + ")", "");
				//ЭР Несторук С.И. 11.10.2018 13:42:53 {
			КонецЕсли;
			//}ЭР Несторук С.И.
		
			ДанныеАлкогольнойПродукции = Новый Структура;
			ДанныеАлкогольнойПродукции.Вставить("АлкогольнаяПродукция", СтрокаТЧ.АлкогольнаяПродукция);
			ДанныеАлкогольнойПродукции.Вставить("Маркируемый", СтрокаТЧ.Маркируемый);
			ДанныеАлкогольнойПродукции.Вставить("КодАкцизнойМарки", Новый Массив);
			ДанныеАлкогольнойПродукции.КодАкцизнойМарки.Добавить(СтрокаТЧ.КодАкцизнойМарки);
			ДанныеАлкогольнойПродукции.Вставить("ОбъемДАЛ", СтрокаТЧ.ОбъемДАЛ);
			ДанныеАлкогольнойПродукции.Вставить("Крепость", СтрокаТЧ.Крепость);
			ДанныеАлкогольнойПродукции.Вставить("КодВидаПродукции", СтрокаТЧ.КодВидаПродукции);
			ДанныеАлкогольнойПродукции.Вставить("Штрихкод", СтрокаТЧ.Штрихкод);
			
			ПараметрыАлкогольнойПродукции = ИнтеграцияЕГАИСУНФ.ПараметрыАлкогольнойПродукции(ДанныеАлкогольнойПродукции);
			
			СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
			СтрокаПозицииЧека.Наименование = НаименованиеТовара;
			СтрокаПозицииЧека.Количество   = СтрокаТЧ.Количество;
			СтрокаПозицииЧека.Цена         = СтрокаТЧ.Цена + ?(ДокументОбъект.СуммаВключаетНДС, 0, СтрокаТЧ.СуммаНДС / ?(СтрокаТЧ.Количество = 0, 1, СтрокаТЧ.Количество)); //  5 - Цена за позицию без скидки;
			СуммаСкидки = СтрокаПозицииЧека.Цена * СтрокаПозицииЧека.Количество - (СтрокаТЧ.Сумма + ?(ДокументОбъект.СуммаВключаетНДС, 0, СтрокаТЧ.СуммаНДС));
			СтрокаПозицииЧека.ЦенаСоСкидками = Окр(СтрокаПозицииЧека.Цена - СуммаСкидки / ?(СтрокаТЧ.Количество = 0, 1, СтрокаТЧ.Количество), 2);
			СтрокаПозицииЧека.Сумма        = СтрокаТЧ.Всего;
			СтрокаПозицииЧека.СуммаСкидок = СуммаСкидки;
			СтрокаПозицииЧека.НомерСекции  = 1;
			СтрокаПозицииЧека.СуммаНДС = СтрокаТЧ.СуммаНДС;
			СтрокаПозицииЧека.Штрихкод     = СтрокаТЧ.Штрихкод;
			СтрокаПозицииЧека.ПризнакПредметаРасчета = РозничныеПродажиСервер.ПолучитьПризнакПредметаРасчета(РеквизитыНоменклатуры);
			Если ЗначениеЗаполнено(СтрокаТЧ.Партия) Тогда
				СтруктураРеквизитов = Новый Структура();
				СтруктураРеквизитов.Вставить("НаименованиеПолное", "ВладелецПартии.НаименованиеПолное");
				СтруктураРеквизитов.Вставить("ИНН", "ВладелецПартии.ИНН");
				СтруктураРеквизитов.Вставить("ВладелецПартии", "ВладелецПартии");
				РеквизитыВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТЧ.Партия, СтруктураРеквизитов);
				СтрокаПозицииЧека.ДанныеПоставщика.Наименование = РеквизитыВладельца.НаименованиеПолное;
				СтрокаПозицииЧека.ДанныеПоставщика.ИНН = РеквизитыВладельца.ИНН;
				СтрокаПозицииЧека.ДанныеПоставщика.Телефон = Справочники.Контрагенты.ПолучитьТелефонКонтрагента(РеквизитыВладельца.ВладелецПартии);
			КонецЕсли;
			
			СтрокаПозицииЧека.Вставить("ПараметрыАлкогольнойПродукции", ПараметрыАлкогольнойПродукции);
			СтрокаПозицииЧека.НомерСтрокиТовара = СтрокаТЧ.НомерСтроки;
			
			Если СтрокаТЧ.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
				СтрокаПозицииЧека.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс;
				СтрокаПозицииЧека.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДСДляККТ(СтрокаТЧ.СтавкаНДС, Истина);
			Иначе
				СтрокаПозицииЧека.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
				СтрокаПозицииЧека.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДСДляККТ(СтрокаТЧ.СтавкаНДС, ЭтоАванс);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.КодМаркировки) Тогда
				ДанныеМаркировки = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьКодМаркировки(СтрокаТЧ.КодМаркировки);
				Если ДанныеМаркировки.Разобран Тогда
					СтрокаПозицииЧека.Штрихкод = ДанныеМаркировки.EAN;
					СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ТипМаркировки = Перечисления.ТипыМаркировкиККТ.ТабачнаяПродукция;
					СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы = ДанныеМаркировки.ГлобальныйИдентификаторТорговойЕдиницы;
					СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.СерийныйНомер = ДанныеМаркировки.СерийныйНомер;
				КонецЕсли;
			КонецЕсли;
			
			ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОплатуПриПробитииЧекаККМ(ДокументОбъект, ОбщиеПараметры)
	
	// Подготовка таблицы оплат
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Оплата.ВидОплаты КАК ВидОплаты,
	|	Оплата.Сумма КАК Сумма
	|ПОМЕСТИТЬ Оплаты
	|ИЗ
	|	&Оплата КАК Оплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Оплаты.ВидОплаты КАК ВидОплаты,
	|	СУММА(Оплаты.Сумма) КАК Сумма
	|ИЗ
	|	Оплаты КАК Оплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	Оплаты.ВидОплаты
	|
	|ИМЕЮЩИЕ
	|	СУММА(Оплаты.Сумма) > 0";
	
	Запрос.УстановитьПараметр("Оплата", ДокументОбъект.БезналичнаяОплата.Выгрузить());
	
	Результат = Запрос.Выполнить();
	ТаблицаПоВидамОплат = Результат.Выгрузить();
	
	СуммаЭлектронно = 0;
	
	// Платежная карта
	СтрокаТаблицы = ТаблицаПоВидамОплат.Найти(Перечисления.ВидыБезналичныхОплат.БанковскаяКарта, "ВидОплаты");
	Если Не СтрокаТаблицы = Неопределено Тогда
		СуммаЭлектронно = СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	// Кредит
	СтрокаТаблицы = ТаблицаПоВидамОплат.Найти(Перечисления.ВидыБезналичныхОплат.Кредит, "ВидОплаты");
	Если Не СтрокаТаблицы = Неопределено Тогда
		СуммаЭлектронно = СуммаЭлектронно + СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	Если СуммаЭлектронно <> 0 Тогда
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Электронно);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Электронно'"));
		СтрокаОплаты.Вставить("Сумма", СуммаЭлектронно);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	// Подарочный сертификат
	СтрокаТаблицы = ТаблицаПоВидамОплат.Найти(Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат, "ВидОплаты");
	Если Не СтрокаТаблицы = Неопределено Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Предоплата);
		СтрокаОплаты.Вставить("Сумма", СтрокаТаблицы.Сумма);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	// Наличные
	Если ДокументОбъект.Свойство("ПолученоНаличными") 
		И ДокументОбъект.ПолученоНаличными > 0 Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Наличные);
		СтрокаОплаты.Вставить("Сумма", ДокументОбъект.ПолученоНаличными);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	ИначеЕсли ДокументОбъект.СуммаДокумента - ДокументОбъект.БезналичнаяОплата.Итог("Сумма") > 0 Тогда 
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Наличные);
		СтрокаОплаты.Вставить("Сумма", ДокументОбъект.СуммаДокумента - ДокументОбъект.БезналичнаяОплата.Итог("Сумма"));
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	Если ОбщиеПараметры.ТаблицаОплат.Количество() = 0 Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Наличные);
		СтрокаОплаты.Вставить("Сумма", 0);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьОплатуПриПробитииЧекаККМ()

Процедура ЗаполнитьОплатуПриПробитииЧекаККМНаККТ(ДокументОбъект, ОбщиеПараметры)
	
	// Подготовка таблицы оплат
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Оплата.ВидОплаты КАК ВидОплаты,
	|	Оплата.Сумма КАК Сумма
	|ПОМЕСТИТЬ Оплата
	|ИЗ
	|	&Оплата КАК Оплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Зачет аванса"" КАК ВидОплаты,
	|	Предоплата.СуммаРасчетов КАК Сумма
	|ПОМЕСТИТЬ Предоплата
	|ИЗ
	|	&Предоплата КАК Предоплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Оплата.ВидОплаты КАК ВидОплаты,
	|	Оплата.Сумма КАК Сумма
	|ПОМЕСТИТЬ Оплаты
	|ИЗ
	|	Оплата КАК Оплата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Предоплата.ВидОплаты,
	|	Предоплата.Сумма
	|ИЗ
	|	Предоплата КАК Предоплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Оплаты.ВидОплаты КАК ВидОплаты,
	|	СУММА(Оплаты.Сумма) КАК Сумма
	|ИЗ
	|	Оплаты КАК Оплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	Оплаты.ВидОплаты
	|
	|ИМЕЮЩИЕ
	|	СУММА(Оплаты.Сумма) > 0";
	
	Запрос.УстановитьПараметр("Оплата", ДокументОбъект.БезналичнаяОплата.Выгрузить());
	Запрос.УстановитьПараметр("Предоплата", ДокументОбъект.Предоплата.Выгрузить());
	
	Результат = Запрос.Выполнить();
	ТаблицаПоВидамОплат = Результат.Выгрузить();
	
	СуммаЭлектронно = 0;
	
	// Платежная карта
	СтрокаТаблицы = ТаблицаПоВидамОплат.Найти(Перечисления.ВидыБезналичныхОплат.БанковскаяКарта, "ВидОплаты");
	Если Не СтрокаТаблицы = Неопределено Тогда
		СуммаЭлектронно = СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	// Кредит
	СтрокаТаблицы = ТаблицаПоВидамОплат.Найти(Перечисления.ВидыБезналичныхОплат.Кредит, "ВидОплаты");
	Если Не СтрокаТаблицы = Неопределено Тогда
		СуммаЭлектронно = СуммаЭлектронно + СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	Если СуммаЭлектронно <> 0 Тогда
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Электронно);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Электронно'"));
		СтрокаОплаты.Вставить("Сумма", СуммаЭлектронно);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	ЗачетАванса = 0;
	
	// Подарочный сертификат
	СтрокаТаблицы = ТаблицаПоВидамОплат.Найти(Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат, "ВидОплаты");
	Если Не СтрокаТаблицы = Неопределено Тогда
		ЗачетАванса = СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	// Зачет аванса
	СтрокаТаблицы = ТаблицаПоВидамОплат.Найти("Зачет аванса", "ВидОплаты");
	Если Не СтрокаТаблицы = Неопределено Тогда
		ЗачетАванса = ЗачетАванса + СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	Если ЗачетАванса > 0 Тогда
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Предоплата);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Зачет аванс'"));
		СтрокаОплаты.Вставить("Сумма", ЗачетАванса);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	// Наличные
	Если ДокументОбъект.Свойство("ПолученоНаличными") 
		И ДокументОбъект.ПолученоНаличными > 0 Тогда
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Наличные);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Наличные'"));
		СтрокаОплаты.Вставить("Сумма", ДокументОбъект.ПолученоНаличными);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	ИначеЕсли ДокументОбъект.СуммаДокумента
			- ДокументОбъект.БезналичнаяОплата.Итог("Сумма")
			- ДокументОбъект.Предоплата.Итог("СуммаРасчетов") > 0 Тогда 
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Наличные);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Наличные'"));
		СтрокаОплаты.Вставить("Сумма", ДокументОбъект.СуммаДокумента
									 - ДокументОбъект.БезналичнаяОплата.Итог("Сумма")
									 - ДокументОбъект.Предоплата.Итог("СуммаРасчетов"));
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	Если ОбщиеПараметры.ТаблицаОплат.Количество() = 0 Тогда
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Наличные);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Наличные'"));
		СтрокаОплаты.Вставить("Сумма", 0);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьОплатуПриПробитииЧекаККМНаККТ()

Функция ПодготовитьДанныеДляПробитияЧека(ДокументОбъект, ДокументСсылка, ТранспортныйМодуль, ДанныеЕГАИСДостаточны, ЕстьАлкогольнаяПродукцияЕГАИС, ЭтоВозврат = Ложь) Экспорт
	
	ТаблицаТоваровЧека = УправлениеНебольшойФирмойСервер.ПодготовкаДанныхДляПробитияЧекаККМ(ДокументОбъект, ДанныеЕГАИСДостаточны, ЕстьАлкогольнаяПродукцияЕГАИС);
	
	// Подготовка таблицы товаров
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	ДополнитьТоварамиПараметрыПриПробитииЧека(ДокументОбъект, ОбщиеПараметры, ТаблицаТоваровЧека, ПризнакСпособаРасчета(ДокументОбъект));
	
	// Общие параметры чека
	
	РеквизитыОрганизация = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.Организация, "НаименованиеПолное,ИНН,КПП");
	
	СтруктураРеквизитов = Новый Структура("ЭлектронныйЧекSMSПередаютсяПрограммой1С,ЭлектронныйЧекEmailПередаютсяПрограммой1С,СерийныйНомер,Код,ПодключаемоеОборудование");
	СтруктураРеквизитов.Вставить("СпособФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.СпособФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ДопустимоеРасхождениеФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.ДопустимоеРасхождениеФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ТипОборудования", "ПодключаемоеОборудование.ТипОборудования");
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.КассаККМ, СтруктураРеквизитов);
	
	РеквизитыКассира = РозничныеПродажиСервер.ПолучитьРеквизитыКассира(ДокументОбъект.Автор);
	
	ОбщиеПараметры.ТипРасчета = ?(ЭтоВозврат,
		Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств,
		Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств);
	
	ОбщиеПараметры.Электронно = Ложь;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Телефон) Тогда
		Если РеквизитыКассыККМ.ЭлектронныйЧекSMSПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СSMS = Истина;
		КонецЕсли;
		ОбщиеПараметры.ПокупательНомер = РозничныеПродажиСервер.УбратьРазделителиВНомереТелефона(ДокументОбъект.Телефон);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.АдресЭП) Тогда
		Если РеквизитыКассыККМ.ЭлектронныйЧекEmailПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СEmail = Истина;
		КонецЕсли;
		ОбщиеПараметры.ПокупательEmail = ДокументОбъект.АдресЭП;
	КонецЕсли;
	
	ОбщиеПараметры.ДокументОснование = ДокументСсылка;
	
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ОбщиеПараметры.Кассир          = РеквизитыКассира.ИмяКассираИДолжность;
	ОбщиеПараметры.Вставить("ИмяКассира", РеквизитыКассира.ИмяКассира);
	ОбщиеПараметры.КассирИНН       = РеквизитыКассира.КассирИНН;
	
	ОбщиеПараметры.ОрганизацияНазвание = РеквизитыОрганизация.НаименованиеПолное;
	ОбщиеПараметры.ОрганизацияИНН = РеквизитыОрганизация.ИНН;
	ОбщиеПараметры.ОрганизацияКПП = РеквизитыОрганизация.КПП;
	ОбщиеПараметры.НомерКассы     = "00001";
	ОбщиеПараметры.НомерЧека      = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(ДокументСсылка.Дата,
		ДокументСсылка.Номер,
		ДокументСсылка.Организация.Префикс);
	ОбщиеПараметры.НомерСмены     = "1";
	
	СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(ДокументОбъект.Организация, ДокументОбъект.Дата);
	АдресМагазина = УправлениеНебольшойФирмойСервер.ПолучитьКонтактнуюИнформацию(ДокументОбъект.СтруктурнаяЕдиница, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы"));
		
	СерийныйНомер = РеквизитыКассыККМ.СерийныйНомер;
	Если НЕ ЗначениеЗаполнено(СерийныйНомер) Тогда
		СерийныйНомер = "1";
	КонецЕсли;
	
	ОбщиеПараметры.АдресМагазина = АдресМагазина;
	ОбщиеПараметры.НаименованиеМагазина = Строка(ДокументОбъект.СтруктурнаяЕдиница);
	ОбщиеПараметры.СерийныйНомер = СерийныйНомер;
	ОбщиеПараметры.СистемаНалогообложения = РозничныеПродажиСервер.ПолучитьТипСистемыНалогообложенияККТ(
		ДокументОбъект.Организация,
		ДокументОбъект.СтруктурнаяЕдиница,
		ДокументОбъект.Дата,
		ДокументОбъект.СпециальныйНалоговыйРежим);
		
	Если РеквизитыКассыККМ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
		ОбщиеПараметры.СпособФорматноЛогическогоКонтроля = РеквизитыКассыККМ.СпособФорматноЛогическогоКонтроля;
		ОбщиеПараметры.ДопустимоеРасхождениеФорматноЛогическогоКонтроля = РеквизитыКассыККМ.ДопустимоеРасхождениеФорматноЛогическогоКонтроля;
		Если ФорматноЛогическийКонтрольКлиентСервер.НуженФорматноЛогическийКонтроль(ОбщиеПараметры) Тогда
			ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ОбщиеПараметры);
		КонецЕсли;
		ЗаполнитьОплатуПриПробитииЧекаККМНаККТ(ДокументОбъект, ОбщиеПараметры);
	Иначе
		ЗаполнитьОплатуПриПробитииЧекаККМ(ДокументОбъект, ОбщиеПараметры);
	КонецЕсли;
	
	РазницаСумм = ДокументОбъект.Запасы.Итог("Сумма") - ДокументОбъект.СуммаДокумента;
	Если РазницаСумм > 0 Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты",Перечисления.ТипыОплатыККТ.Постоплата);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Постоплата'"));
		СтрокаОплаты.Вставить("Сумма", РазницаСумм);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты") Тогда
		РаботаСПодарочнымиСертификатами.ДобавитьВнереализационнуюПрибыль(ДокументОбъект, ОбщиеПараметры);
	КонецЕсли;
	
	Возврат ОбщиеПараметры;
	
КонецФункции // ПодготовитьДанныеДляПробитияЧека()

Функция ПризнакСпособаРасчета(ДокументОбъект) Экспорт
	
	СтруктураСумм = СтурктураСуммТаблицыТоваровИОплат(ДокументОбъект);
	
	Если ДокументОбъект.ОперацияСДенежнымиСредствами Тогда
		
		Если ДокументОбъект.Запасы.Количество() = 0 Тогда
			Возврат Перечисления.ПризнакиСпособаРасчета.Аванс;
		ИначеЕсли СтруктураСумм.СуммаТоваров > СтруктураСумм.СуммаОплат Тогда
			Возврат Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;
		ИначеЕсли СтруктураСумм.СуммаТоваров <= СтруктураСумм.СуммаОплат Тогда
			Возврат Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная;
		КонецЕсли;
		
	Иначе
		
		Возврат Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
		
	КонецЕсли;
	
КонецФункции

Функция СтурктураСуммТаблицыТоваровИОплат(ДокументОбъект)
	
	СтруктураСумм = Новый Структура;
	СтруктураСумм.Вставить("СуммаТоваров", 0);
	СтруктураСумм.Вставить("СуммаОплат", 0);
	
	СтруктураСумм.СуммаТоваров = ДокументОбъект.Запасы.Итог("Сумма");
	СтруктураСумм.СуммаОплат = ДокументОбъект.СуммаДокумента;;
	
	Возврат СтруктураСумм;
	
КонецФункции

#КонецОбласти

#Область ДисконтныеКарты

// Формирует таблицу значений, содержащую данные для проведения по регистру ПродажиПоДисконтнымКартам.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажиПоДисконтнойКарте(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Если ДокументСсылкаЧекККМ.ДисконтнаяКарта.Пустая() Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнойКарте", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Если СтруктураДополнительныеСвойства.ДляПроведения.Архивный
		Или СтруктураДополнительныеСвойства.ДляПроведения.ДвиженияПоЗапасамУдалять
		Или Не СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит 
		Или Не СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнойКарте", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = ДисконтныеКартыСервер.ТекстЗапросаПродажиПоДисконтнойКарте("ЧекККМ");
	
	Запрос.УстановитьПараметр("ПроцентСкидки",УправлениеНебольшойФирмойСервер.ВычислитьПроцентСкидкиПоДисконтнойКарте(СтруктураДополнительныеСвойства.ДляПроведения.Дата,
																													  ДокументСсылкаЧекККМ.ДисконтнаяКарта));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнойКарте", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажиПоДисконтнойКарте()

#КонецОбласти

#Область АвтоматическиеСкидки

// Формирует таблицу значений, содержащую данные для проведения по регистру ПредоставленныеСкидки.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажиПоПредоставленнымСкидкам(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Период КАК Период,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.СкидкаНаценка КАК ВидСкидкиНаценки,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Сумма КАК СуммаСкидки,
	|	ВременнаяТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаЗапасы.Документ КАК ДокументСкидки,
	|	ВременнаяТаблицаЗапасы.СтруктурнаяЕдиница КАК ПолучательСкидки,
	|	ВременнаяТаблицаЗапасы.Ответственный КАК Ответственный
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаАвтоСкидкиНаценки КАК ВременнаяТаблицаАвтоСкидкиНаценки
	|		ПО ВременнаяТаблицаЗапасы.КлючСвязи = ВременнаяТаблицаАвтоСкидкиНаценки.КлючСвязи
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ДвиженияПоЗапасамУдалять
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.Дата,
	|	&ВидСкидкиНаценки,
	|	ВременнаяТаблицаЗапасы.СуммаСкидкиНаценки,
	|	ВременнаяТаблицаЗапасы.Номенклатура,
	|	ВременнаяТаблицаЗапасы.Характеристика,
	|	ВременнаяТаблицаЗапасы.Документ,
	|	ВременнаяТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ВременнаяТаблицаЗапасы.Ответственный
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|ГДЕ
	|	ВременнаяТаблицаЗапасы.СуммаСкидкиНаценки <> 0
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ДвиженияПоЗапасамУдалять
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.Дата,
	|	&БонуснаяПрограмма,
	|	ВременнаяТаблицаЗапасы.СуммаСкидкиОплатыБонусом,
	|	ВременнаяТаблицаЗапасы.Номенклатура,
	|	ВременнаяТаблицаЗапасы.Характеристика,
	|	ВременнаяТаблицаЗапасы.Документ,
	|	ВременнаяТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ВременнаяТаблицаЗапасы.Ответственный
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ДвиженияПоЗапасамУдалять
	|	И ВременнаяТаблицаЗапасы.СуммаСкидкиОплатыБонусом <> 0
	|	И НЕ &ОперацияСДенежнымиСредствами";
	
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	Запрос.УстановитьПараметр("ВидСкидкиНаценки", ДокументСсылкаЧекККМ.ВидСкидкиНаценки);
	Запрос.УстановитьПараметр("БонуснаяПрограмма", ДокументСсылкаЧекККМ.ДисконтнаяКарта.Владелец.БонуснаяПрограмма);
	Запрос.УстановитьПараметр("ДвиженияПоЗапасамУдалять", СтруктураДополнительныеСвойства.ДляПроведения.ДвиженияПоЗапасамУдалять);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПредоставленныеСкидки", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажиПоПредоставленнымСкидкам()

#КонецОбласти

#Область Эквайринг

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаПлатежнымиКартами(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМ);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ДанныеДокумента.ВалютаДокумента КАК Валюта,
	|	ТаблицаРасшифровкаПлатежа.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	ТаблицаРасшифровкаПлатежа.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
	|	ТаблицаРасшифровкаПлатежа.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
	|	ТаблицаРасшифровкаПлатежа.Сумма КАК Сумма,
	|	ТаблицаРасшифровкаПлатежа.СуммаВал КАК СуммаВал,
	|	ДанныеДокумента.ЭквайринговыйТерминал.Договор КАК ДоговорЭквайринга,
	|	ТаблицаРасшифровкаПлатежа.Сумма * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссии, 0) / 100 КАК СуммаКомиссииПоДоговору,
	|	ТаблицаРасшифровкаПлатежа.СуммаВал * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссии, 0) / 100 КАК СуммаКомиссииПоДоговоруВал,
	|	ДанныеДокумента.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ДанныеДокумента.Заказ КАК Заказ,
	|	ДанныеДокумента.Контрагент КАК Контрагент
	|ИЗ
	|	Документ.ЧекККМ КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаОплатаПлатежнымиКартами КАК ТаблицаРасшифровкаПлатежа
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаПроцентыКомиссии КАК ВременнаяТаблицаПроцентыКомиссии
	|			ПО ТаблицаРасшифровкаПлатежа.ВидПлатежнойКарты = ВременнаяТаблицаПроцентыКомиссии.ВидПлатежнойКарты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И ТаблицаРасшифровкаПлатежа.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.БанковскаяКарта)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаПлатежнымиКартами", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаОплатаПлатежнымиКартами()

#КонецОбласти

#Область РаботаССерийнымиНомерами

// Формирует таблицу значений, содержащую данные для проведения по регистру СерийныеНомераГарантии.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСерийныеНомера(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Если ДокументСсылка.СерийныеНомера.Количество()=0 Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераОстатки", Новый ТаблицаЗначений);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераГарантии", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ВременнаяТаблицаЗапасы.Дата КАК ДатаСобытия,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииСерийныхНомеров.Расход) КАК Операция,
	|	СерийныеНомера.СерийныйНомер КАК СерийныйНомер,
	|	ВременнаяТаблицаЗапасы.Организация КАК Организация,
	|	ВременнаяТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаЗапасы.Партия КАК Партия,
	|	ВременнаяТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВременнаяТаблицаЗапасы.Ячейка КАК Ячейка,
	|	1 КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСерийныеНомера КАК СерийныеНомера
	|		ПО ВременнаяТаблицаЗапасы.КлючСвязи = СерийныеНомера.КлючСвязи
	|			И (&ЧекПробит)
	|			И (НЕ &Архивный)
	|			И (НЕ &ОперацияСДенежнымиСредствами)";
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераГарантии", РезультатЗапроса);
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ОстаткиСерийныхНомеров Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераОстатки", РезультатЗапроса);
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераОстатки", Новый ТаблицаЗначений);
	КонецЕсли; 
	
КонецПроцедуры // СформироватьТаблицаСерийныеНомера()

#КонецОбласти

#Область АкцизныеМарки

Процедура СформироватьТаблицаОстаткиАлкогольнойПродукцииЕГАИС(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВременнаяТаблицаАкцизныеМарки.ВидДвижения КАК ВидДвижения,
	|	ВременнаяТаблицаАкцизныеМарки.Период КАК Период,
	|	ВременнаяТаблицаАкцизныеМарки.Ссылка КАК Ссылка,
	|	ВременнаяТаблицаАкцизныеМарки.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ВременнаяТаблицаАкцизныеМарки.Справка2 КАК Справка2,
	|	ВременнаяТаблицаАкцизныеМарки.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ВременнаяТаблицаАкцизныеМарки.Количество КАК Количество,
	|	ВременнаяТаблицаАкцизныеМарки.СвободныйОстаток КАК СвободныйОстаток
	|ИЗ
	|	ВременнаяТаблицаАкцизныеМарки КАК ВременнаяТаблицаАкцизныеМарки
	|ГДЕ
	|	&ЧекПробит
	|	И НЕ &Архивный
	|	И НЕ &ОперацияСДенежнымиСредствами";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОстаткиАлкогольнойПродукцииЕГАИС", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсПечати

Функция ОписатьПравилаЗаполненияПодписей() Экспорт
	
	РеквизитыОбъекта = Новый Соответствие;
	РеквизитыОбъекта.Вставить("ПодписьКассира", "СтруктурнаяЕдиница.ПодписьМОЛ");
	РеквизитыОбъекта.Вставить("КонтактноеЛицоПодписант", "Контрагент.КонтактноеЛицоПодписант");
	
	Возврат РеквизитыОбъекта;
	
КонецФункции

// Функция формирует табличный документ обложки кассовой книги
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	Перем ПервыйДокумент, НомерСтрокиНачало, Ошибки;
	
	ПараметрыНоменклатуры = Новый Структура;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЧекККМ_ТоварныйЧек";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЧекККМ.ПФ_MXL_ТоварныйЧек");
	ДанныеПечати = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументЧекККМ.Ссылка КАК Ссылка,
	|	ДокументЧекККМ.Номер КАК Номер,
	|	ДокументЧекККМ.Дата КАК Дата,
	|	ДокументЧекККМ.КассаККМ КАК КассаККМ,
	|	ДокументЧекККМ.ВалютаДокумента КАК Валюта,
	|	ДокументЧекККМ.Контрагент.Представление КАК ПредставлениеПолучателя,
	|	ДокументЧекККМ.Организация КАК Организация,
	|	ДокументЧекККМ.Организация.Префикс КАК Префикс,
	|	ДокументЧекККМ.Организация.Представление КАК Поставщик,
	|	ДокументЧекККМ.СтруктурнаяЕдиница КАК РозничнаяТочкаСсылка,
	|	ДокументЧекККМ.СтруктурнаяЕдиница.Наименование КАК РозничнаяТочкаНаименование,
	|	ДокументЧекККМ.СуммаДокумента КАК СуммаДокумента,
	|	ДокументЧекККМ.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ДокументЧекККМ.ПодписьКассира.Должность КАК ДолжностьКассира,
	|	ДокументЧекККМ.ПодписьКассира.РасшифровкаПодписи КАК РасшифровкаПодписиКассира,
	|	ДокументЧекККМ.КонтактноеЛицоПодписант.Наименование КАК РасшифровкаПодписиКонтрагента,
	|	ДокументЧекККМ.Заказ КАК Заказ,
	|	ДокументЧекККМ.ПоложениеЗаказаПокупателя КАК ПоложениеЗаказаПокупателя,
	|	ДокументЧекККМ.ЕстьЗаказы КАК ЕстьЗаказы,
	|	ДокументЧекККМ.Контрагент КАК Контрагент,
	|	ДокументЧекККМ.Заказ.Номер КАК ЗаказНомер,
	|	ДокументЧекККМ.Заказ.Дата КАК ЗаказДата,
	|	ДокументЧекККМ.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(100))) = """"
	|				ТОГДА Номенклатура.Наименование
	|			ИНАЧЕ Номенклатура.НаименованиеПолное
	|		КОНЕЦ КАК Запас,
	|		Номенклатура.НаименованиеПолное КАК ЗапасПолноеНаименование,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.Артикул КАК Артикул,
	|		Характеристика КАК Характеристика,
	|		Количество КАК Количество,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА ПроцентСкидкиНаценки <> 0
	|					ИЛИ СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|		Партия КАК Партия,
	|		ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|		Заказ КАК Заказ,
	|		Заказ.Номер КАК ЗаказНомер,
	|		Заказ.Дата КАК ЗаказДата,
	|		КлючСвязи КАК КлючСвязи,
	|		ЛОЖЬ КАК ЭтоНабор,
	|		ВЫБОР
	|			КОГДА НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора
	|	) КАК ТаблицаЗапасы,
	|	ДокументЧекККМ.ДобавленныеНаборы.(
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА НоменклатураНабора.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ЗапасНабора,
	|		НоменклатураНабора.ВариантПечатиНабора КАК ВариантПечатиНабора,
	|		НоменклатураНабора.ТипНоменклатуры КАК ТипНоменклатурыНабора,
	|		НоменклатураНабора.Артикул КАК АртикулНабора,
	|		НоменклатураНабора.Код КАК КодНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияНабора,
	|		ИСТИНА КАК ВыводитьИтоги
	|	) КАК ТаблицаДобавленныеНаборы,
	|	ДокументЧекККМ.СерийныеНомера.(
	|		СерийныйНомер КАК СерийныйНомер,
	|		КлючСвязи КАК КлючСвязи
	|	) КАК ТаблицаСерийныеНомера
	|ИЗ
	|	Документ.ЧекККМ КАК ДокументЧекККМ
	|ГДЕ
	|	ДокументЧекККМ.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	ДанныеДокументов = Запрос.Выполнить().Выгрузить();
	
	// Наборы
	НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(ДанныеДокументов, "ТаблицаЗапасы");
	
	Для Каждого Шапка Из ДанныеДокументов Цикл
		
		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабличныйДокумент, ПервыйДокумент, НомерСтрокиНачало, ДанныеПечати);
		
		ИспользоватьЗаказыВРозничнойТорговле = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле");
		Если ИспользоватьЗаказыВРозничнойТорговле И Шапка.ПоложениеЗаказаПокупателя = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
			ЗаказВШапке = Истина;
			ЗаказВТЧ = Ложь;
		Иначе
			ЗаказВШапке = Ложь;
			ЗаказВТЧ = ИспользоватьЗаказыВРозничнойТорговле И Шапка.ЕстьЗаказы;
		КонецЕсли;
		
		СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата, ,);
		НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Шапка.Дата, Шапка.Номер, Шапка.Префикс);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок|ОсновныеДанные");
		ДанныеПечати.Очистить();
		
		ДанныеПечати.Вставить("ТекстЗаголовка", НСтр("ru ='Товарный чек № '") + НомерДокумента + НСтр("ru =' от '") + Формат(Шапка.Дата, "ДЛФ=DD"));
		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если ЗаказВТЧ Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок|Заказ");
			ТабличныйДокумент.Присоединить(ОбластьМакета);
		КонецЕсли;
		
		ДанныеПечати.Очистить();
		
		КонтактнаяИнформацияТоварногоЧека = Константы.КонтактнаяИнформацияТоварногоЧека.Получить();
		Если КонтактнаяИнформацияТоварногоЧека <> Перечисления.КонтактнаяИнформацияТоварногоЧека.СтруктурнаяЕдиница Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
			
			ПредставлениеПоставщика = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
			ДанныеПечати.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
			ДанныеПечати.Вставить("Поставщик", Шапка.Организация);
			
			ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		Если КонтактнаяИнформацияТоварногоЧека <> Перечисления.КонтактнаяИнформацияТоварногоЧека.Организация Тогда
			
			ОбластьМакета = ПечатьДокументовУНФ.ПолучитьОбластьБезопасно(Макет, "СтруктурнаяЕдиница", , Ошибки);
			Если ОбластьМакета <> Неопределено Тогда
				
				ПредставлениеСтруктурнойЕдиницы = Шапка.РозничнаяТочкаНаименование;
				
				ФактАдресСтруктурнойЕдиницы = УправлениеНебольшойФирмойСервер.ПолучитьКонтактнуюИнформацию(Шапка.РозничнаяТочкаСсылка, Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы);
				Если НЕ ПустаяСтрока(ФактАдресСтруктурнойЕдиницы) Тогда
					
					ПредставлениеСтруктурнойЕдиницы = ПредставлениеСтруктурнойЕдиницы + ", " + ФактАдресСтруктурнойЕдиницы;
					
				КонецЕсли;
				
				ТелефонСтруктурнойЕдиницы = УправлениеНебольшойФирмойСервер.ПолучитьКонтактнуюИнформацию(Шапка.РозничнаяТочкаСсылка, Справочники.ВидыКонтактнойИнформации.ТелефонСтруктурнойЕдиницы);
				Если НЕ ПустаяСтрока(ТелефонСтруктурнойЕдиницы) Тогда
					
					ПредставлениеСтруктурнойЕдиницы = ПредставлениеСтруктурнойЕдиницы + ", " + ТелефонСтруктурнойЕдиницы;
					
				КонецЕсли;
				
				ДанныеПечати.Вставить("ПредставлениеСтруктурнойЕдиницы", ПредставлениеСтруктурнойЕдиницы);
				
				Если КонтактнаяИнформацияТоварногоЧека = Перечисления.КонтактнаяИнформацияТоварногоЧека.СтруктурнаяЕдиница Тогда
					
					ДанныеПечати.Вставить("ЗаголовокСтруктурнойЕдиницы", НСтр("ru ='Поставщик:'"));
					
				КонецЕсли;
				
				ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИспользоватьЗаказыВРозничнойТорговле И ЗначениеЗаполнено(Шапка.Контрагент) Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
			
			СведенияОПокупателе = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата, ,);
			
			ДанныеПечати.Очистить();
			ПредставлениеПолучателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
			ДанныеПечати.Вставить("ПредставлениеПолучателя", ПредставлениеПолучателя);
			ДанныеПечати.Вставить("Получатель", Шапка.Контрагент);
			
			ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		Если ЗаказВШапке Тогда
			
			Если ЗначениеЗаполнено(Шапка.Контрагент) ИЛИ ЗначениеЗаполнено(Шапка.Заказ) Тогда
				
				ОбластьМакета = Макет.ПолучитьОбласть("ЗаказШапка");
				ОбластьМакета.Параметры.ПредставлениеЗаказа = ?(ЗначениеЗаполнено(Шапка.Заказ), 
				"№ "+ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.ЗаказНомер, Истина, Истина)+" от "+Формат(Шапка.ЗаказДата, "ДЛФ=D"),
				"");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЕстьСкидки = Шапка.ТаблицаЗапасы.Итог("ЕстьСкидка") <> 0;
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
			ТабличныйДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
		Если ЗаказВТЧ Тогда
			ОбластьЗаказа = Макет.ПолучитьОбласть("ШапкаТаблицы|ЗаказТЧ");
			ТабличныйДокумент.Присоединить(ОбластьЗаказа);
		КонецЕсли;
		
		ОбластьКолонкаЗапас = Макет.Область("Запас");
		
		Если Не ЕстьСкидки Тогда
			ОбластьКолонкаЗапас.ШиринаКолонки =
			ОбластьКолонкаЗапас.ШиринаКолонки
			+ Макет.Область("СуммаБезСкидки").ШиринаКолонки
			+ Макет.Область("СуммаСкидки").ШиринаКолонки;
		КонецЕсли;
		
		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
		Если ЕстьСкидки Тогда
			ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
		КонецЕсли; 
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
		Если ЗаказВТЧ Тогда
			ОбластьЗаказВТЧ = Макет.ПолучитьОбласть("Строка|ЗаказТЧ");
		КонецЕсли;
		
		СтруктураИтогов = Новый Структура("Сумма, СуммаНДС, Всего, Количество, НомерСтроки, ВсегоСкидок, ВсегоБезСкидок, ЕстьСкидки, ЗаказВТЧ", 0, 0, 0, 0, 0, 0, 0, ЕстьСкидки, ЗаказВТЧ);
		ПараметрыНоменклатуры = Новый Структура;
		СтруктураЗаполненияСекции = Новый Структура;
		
		Для каждого СтрокаЗапасы Из Шапка.ТаблицаЗапасы Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаЗапасы.Номенклатура) Тогда
				
				ТекстОшибки = НСтр("ru ='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена!'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, СтруктураЗаполненияСекции, ТекстОшибки, "");
				
				Продолжить;
				
			КонецЕсли;
			
			ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиТоварныйЧек(СтрокаЗапасы, СтруктураЗаполненияСекции, ПараметрыНоменклатуры, СтруктураИтогов, Шапка);
			
			ОбластьНомера.Параметры.Заполнить(СтрокаЗапасы);
			ОбластьНомера.Параметры.Заполнить(СтруктураЗаполненияСекции);
			ОбластьДанных.Параметры.Заполнить(СтрокаЗапасы);
			ОбластьДанных.Параметры.Заполнить(СтруктураЗаполненияСекции);
			Если ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.Заполнить(СтрокаЗапасы);
				ОбластьСкидок.Параметры.Заполнить(СтруктураЗаполненияСекции);
			КонецЕсли; 
			ОбластьСуммы.Параметры.Заполнить(СтрокаЗапасы);
			ОбластьСуммы.Параметры.Заполнить(СтруктураЗаполненияСекции);
			Если ЗаказВТЧ Тогда
				ОбластьЗаказВТЧ.Параметры.Заполнить(СтрокаЗапасы);
				ОбластьЗаказВТЧ.Параметры.Заполнить(СтруктураЗаполненияСекции);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьНомера);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабличныйДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли; 
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			Если ЗаказВТЧ Тогда
				ТабличныйДокумент.Присоединить(ОбластьЗаказВТЧ);
			КонецЕсли;
			
			// Наборы
			НаборыСервер.УчестьОформлениеСтрокиНабора(ТабличныйДокумент, ОбластьДанных, СтрокаЗапасы);
				
		КонецЦикла;
		
		// Вывести Итого.
		СтруктураЗаполненияСекции.Вставить("ЗаголовокНДС", ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:"));
		
		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		ОбластьДанных.Параметры.Заполнить(СтруктураЗаполненияСекции);
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		Если ЕстьСкидки Тогда
			
			СтруктураЗаполненияСекции.Вставить("ВсегоСкидок", СтруктураИтогов.ВсегоСкидок);
			СтруктураЗаполненияСекции.Вставить("ВсегоБезСкидок", СтруктураИтогов.ВсегоБезСкидок);
			
			ОбластьСкидок.Параметры.Заполнить(СтруктураЗаполненияСекции);
			ТабличныйДокумент.Присоединить(ОбластьСкидок);
			
		КонецЕсли;
		
		СтруктураЗаполненияСекции.Вставить("Сумма", СтруктураИтогов.Сумма);
		СтруктураЗаполненияСекции.Вставить("СуммаНДС", СтруктураИтогов.СуммаНДС);
		СтруктураЗаполненияСекции.Вставить("Всего", СтруктураИтогов.Всего);
		
		ОбластьСуммы.Параметры.Заполнить(СтруктураЗаполненияСекции);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
		
		Если ЗаказВТЧ Тогда
			ОбластьЗаказВТЧ  = Макет.ПолучитьОбласть("Итого|ЗаказТЧ");
			ТабличныйДокумент.Присоединить(ОбластьЗаказВТЧ);
		КонецЕсли;
		
		// Вывести Сумму прописью.
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = СтруктураИтогов.Всего;
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований "
		+ Строка(СтруктураИтогов.Количество)
		+ ", на сумму "
		+ УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаКПрописи, Шапка.Валюта);
		
		ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.Валюта);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи.
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи|ОсновныеДанные");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если ЗаказВТЧ Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Подписи|Заказ");
			ТабличныйДокумент.Присоединить(ОбластьМакета);
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Если Ошибки <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // СформироватьПечатнуюФормуОбложкиИПоследнегоЛистаКассовойКниги()

Процедура ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиТоварныйЧек(СтрокаТабличнойЧасти, ДанныеПечати, ПараметрыНоменклатуры, СтруктураИтогов, Шапка)
	
	ДанныеПечати.Очистить();
	
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		НомерСтроки = 0;
	Иначе
		СтруктураИтогов.НомерСтроки = СтруктураИтогов.НомерСтроки+1;
		НомерСтроки = СтруктураИтогов.НомерСтроки;
	КонецЕсли;
	ДанныеПечати.Вставить("НомерСтроки", НомерСтроки);
	
	ПараметрыНоменклатуры.Очистить();
	ПараметрыНоменклатуры.Вставить("Содержание", "");
	ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", СтрокаТабличнойЧасти.Запас);
	ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", СтрокаТабличнойЧасти.Характеристика);
	ПараметрыНоменклатуры.Вставить("ПредставлениеАртикула", СтрокаТабличнойЧасти.Артикул);
	ПараметрыНоменклатуры.Вставить("ПредставлениеСерийногоНомера", РаботаССерийнымиНомерами.СтрокаСерийныеНомера(Шапка.ТаблицаСерийныеНомера, СтрокаТабличнойЧасти.КлючСвязи));
	// Наборы
	ПараметрыНоменклатуры.Вставить("НеобходимоВыделитьКакСоставНабора", СтрокаТабличнойЧасти.НеобходимоВыделитьКакСоставНабора);
	
	ДанныеПечати.Вставить("Запас", ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры));
			
	ДанныеПечати.Вставить("ПредставлениеКодаНоменклатуры", ПечатьДокументовУНФ.ПредставлениеКодаНоменклатуры(СтрокаТабличнойЧасти));
			
	Скидка = 0;
	Если СтруктураИтогов.ЕстьСкидки Тогда
		
		Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
			
			Скидка = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
			ДанныеПечати.Вставить("Скидка", Скидка);
			ДанныеПечати.Вставить("СуммаБезСкидки", Скидка);
			
		ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0 И СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0 Тогда
			
			ДанныеПечати.Вставить("Скидка", 0);
			ДанныеПечати.Вставить("СуммаБезСкидки", СтрокаТабличнойЧасти.Сумма);
			
		Иначе
			
			Скидка = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена - СтрокаТабличнойЧасти.Сумма; // АвтоматическиеСкидки
			ДанныеПечати.Вставить("Скидка", Скидка);
			ДанныеПечати.Вставить("СуммаБезСкидки", СтрокаТабличнойЧасти.Сумма + Скидка);
			
		КонецЕсли;
		
	КонецЕсли;
			
	Если СтруктураИтогов.ЗаказВТЧ Тогда
		ДанныеПечати.Вставить("Заказ", ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Заказ), 
		"№ "+ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаТабличнойЧасти.ЗаказНомер, Истина, Истина)+" от "+Формат(СтрокаТабличнойЧасти.ЗаказДата, "ДЛФ=D"),
		""));
	КонецЕсли;
	
	Если НЕ СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтруктураИтогов.Сумма			= СтруктураИтогов.Сумма			+ СтрокаТабличнойЧасти.Сумма;
		СтруктураИтогов.СуммаНДС		= СтруктураИтогов.СуммаНДС		+ СтрокаТабличнойЧасти.СуммаНДС;
		СтруктураИтогов.Всего			= СтруктураИтогов.Всего			+ СтрокаТабличнойЧасти.Всего;
		СтруктураИтогов.ВсегоСкидок		= СтруктураИтогов.ВсегоСкидок	+ Скидка;
		СтруктураИтогов.ВсегоБезСкидок	= СтруктураИтогов.Сумма			+ СтруктураИтогов.ВсегоСкидок;
		СтруктураИтогов.Количество		= СтруктураИтогов.Количество	+ 1;
	КонецЕсли; 
			
КонецПроцедуры

// Процедура печати документа.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТоварныйЧек") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТоварныйЧек", "Товарный чек", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "Товарный чек"));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ГарантийныйТалон") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ГарантийныйТалон", "Гарантийный талон", 
			НоменклатураВДокументахСервер.ПечатьГарантийныйТалон(МассивОбъектов, ОбъектыПечати)
			);
		
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры // Печать()

// Заполняет список команд печати Заказа покупателя
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТоварныйЧек";
	КомандаПечати.Представление = НСтр("ru = 'Товарный чек'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 1;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерийныеНомера") Тогда
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ГарантийныйТалон";
		КомандаПечати.Представление = НСтр("ru = 'Гарантийный талон'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Порядок = 4;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПодарочнымиСертификатами

// Формирует таблицу значение, содержащую данные для проведения по регистру.
// Таблицу значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПодарочныеСертификаты(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПодарочныеСертификаты Тогда
	
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		
		Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерийныеНомера Тогда
		
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ВременнаяТаблицаЗапасы.Дата КАК Период,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
			|	ВременнаяТаблицаЗапасы.Номенклатура КАК ПодарочныйСертификат,
			|	СерийныеНомера.СерийныйНомер КАК НомерСертификата,
			|	ВременнаяТаблицаЗапасы.НоминалСертификата КАК Сумма
			|ИЗ
			|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСерийныеНомера КАК СерийныеНомера
			|		ПО ВременнаяТаблицаЗапасы.КлючСвязи = СерийныеНомера.КлючСвязи
			|ГДЕ
			|	&ЧекПробит
			|	И НЕ &Архивный
			|	И ВременнаяТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
			|	И НЕ &ОперацияСДенежнымиСредствами
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВременнаяТаблицаОплатаПлатежнымиКартами.Дата,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
			|	ВременнаяТаблицаОплатаПлатежнымиКартами.ПодарочныйСертификат,
			|	ВременнаяТаблицаОплатаПлатежнымиКартами.НомерСертификата,
			|	ВЫБОР
			|		КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.ЧастичноеПогашение
			|			ТОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаСертификата
			|		КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.ИспользоватьСерийныеНомера
			|			ТОГДА ВЫБОР
			|					КОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) > ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаСертификата
			|						ТОГДА ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0)
			|					ИНАЧЕ ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаСертификата
			|				КОНЕЦ
			|		ИНАЧЕ ВременнаяТаблицаОплатаПлатежнымиКартами.Номинал
			|	КОНЕЦ
			|ИЗ
			|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ВременнаяТаблицаОплатаПлатежнымиКартами
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОстаткиСертификатов КАК ПодарочныеСертификатыОстатки
			|		ПО ВременнаяТаблицаОплатаПлатежнымиКартами.ПодарочныйСертификат = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
			|			И ВременнаяТаблицаОплатаПлатежнымиКартами.НомерСертификата = ПодарочныеСертификатыОстатки.НомерСертификата
			|ГДЕ
			|	&ЧекПробит
			|	И НЕ &Архивный
			|	И ВременнаяТаблицаОплатаПлатежнымиКартами.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат)";
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ВременнаяТаблицаЗапасы.Дата КАК Период,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
			|	ВременнаяТаблицаЗапасы.Номенклатура КАК ПодарочныйСертификат,
			|	ВременнаяТаблицаЗапасы.НоминалСертификата КАК Сумма
			|ИЗ
			|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
			|ГДЕ
			|	&ЧекПробит
			|	И НЕ &Архивный
			|	И ВременнаяТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
			|	И НЕ &ОперацияСДенежнымиСредствами
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВременнаяТаблицаОплатаПлатежнымиКартами.Дата,
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
			|	ВременнаяТаблицаОплатаПлатежнымиКартами.ПодарочныйСертификат,
			|	ВременнаяТаблицаОплатаПлатежнымиКартами.Номинал
			|ИЗ
			|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ВременнаяТаблицаОплатаПлатежнымиКартами
			|ГДЕ
			|	&ЧекПробит
			|	И НЕ &Архивный
			|	И ВременнаяТаблицаОплатаПлатежнымиКартами.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат)";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
		Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
		Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
		
		Результат = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Результат = Новый ТаблицаЗначений;
		
	КонецЕсли;
		
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПодарочныеСертификаты", Результат);
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру ОплатаПодарочнымиСертификатами.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаПодарочнымиСертификатами(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПодарочныеСертификаты Тогда
	
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
		Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
		
		Запрос.Текст = РаботаСПодарочнымиСертификатами.СформироватьТекстЗапросаПоОплатеПодарочнымиСертификатами();
		
		Результат = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Результат = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаПодарочнымиСертификатами", Результат);
	
КонецПроцедуры // СформироватьТаблицаОплатаПодарочнымиСертификатами()

// Формирует таблицу значений, содержащую данные для проведения по регистру РасчетыСПокупателями.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРасчетыСПокупателями(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	СтруктураДополнительныеСвойства.Вставить("НеобходимПересчет", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.Дляпроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМ);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ЧекПробит", СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит);
	Запрос.УстановитьПараметр("Архивный", СтруктураДополнительныеСвойства.ДляПроведения.Архивный);
	Запрос.УстановитьПараметр("ОперацияСДенежнымиСредствами", СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	Запрос.УстановитьПараметр("ВозникновениеАвансаПокупателя", НСтр("ru='Возникновение аванса покупателя'"));
	Запрос.УстановитьПараметр("ЗачетАванса", НСтр("ru='Зачет предоплаты'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	
	Для Каждого КлючИЗначение Из СтруктураДополнительныеСвойства.ДляСертификатов Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	// Подготовка таблицы по сертификатам
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	&КонтрагентДляПредоплаты КАК Контрагент,
	|	&ДоговорПоУмолчанию КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК Документ,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК Заказ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс) КАК ТипРасчетов,
	|	СУММА(ВременнаяТаблицаЗапасы.Сумма) КАК Сумма,
	|	СУММА(ВременнаяТаблицаЗапасы.СуммаВал) КАК СуммаВал,
	|	&СчетУчетаАвансовПокупателя КАК СчетУчета,
	|	ВременнаяТаблицаЗапасы.ВалютаДокумента КАК Валюта,
	|	&ВозникновениеАвансаПокупателя КАК СодержаниеПроводки
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВременнаяТаблицаЗапасы.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ВременнаяТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И НЕ &Архивный
	|	И &ЧекПробит
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаЗапасы.ВалютаДокумента,
	|	ВременнаяТаблицаЗапасы.Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&Организация,
	|	&КонтрагентДляПредоплаты,
	|	&ДоговорПоУмолчанию,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс),
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма,
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаВал,
	|	&СчетУчетаАвансовПокупателя,
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.ВалютаДокумента,
	|	&ЗачетАванса
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ВременнаяТаблицаОплатаПлатежнымиКартами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВременнаяТаблицаОплатаПлатежнымиКартами.ПодарочныйСертификат = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат)
	|	И НЕ &Архивный
	|	И &ЧекПробит";
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаПоСертификатам = РезультатЗапроса.Выгрузить();
	
	// Подготовка таблицы по предоплате
	РасчетыПроведениеДокументов.СформироватьДвиженияПоВзаиморасчетам(СтруктураДополнительныеСвойства, ДокументСсылкаЧекККМ, ,"КассаККМ, ВалютаДокумента");
	ПолучатьРеквизитыРасчетов = Истина;
	
	// Установка исключительной блокировки контролируемых остатков расчетов с контрагентами.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаРасчетыСПокупателями.Организация КАК Организация,
	|	ВременнаяТаблицаРасчетыСПокупателями.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаРасчетыСПокупателями.Договор КАК Договор,
	|	ВременнаяТаблицаРасчетыСПокупателями.Документ КАК Документ,
	|	ВременнаяТаблицаРасчетыСПокупателями.Заказ КАК Заказ,
	|	ВременнаяТаблицаРасчетыСПокупателями.ТипРасчетов КАК ТипРасчетов
	|ИЗ
	|	ВременнаяТаблицаРасчетыСПокупателями";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСПокупателями");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	НомерЗапроса = 0;
	Запрос.Текст = УправлениеНебольшойФирмойСервер.ПолучитьТекстЗапросаКурсовыеРазницыРасчетыСПокупателями(Запрос.МенеджерВременныхТаблиц, Ложь, НомерЗапроса, ПолучатьРеквизитыРасчетов);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаПоПредоплате = МассивРезультатов[НомерЗапроса].Выгрузить();
	
	// Объединение таблиц
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПоСертификатам, ТаблицаПоПредоплате);
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПокупателями", ТаблицаПоПредоплате);
	
КонецПроцедуры // СформироватьТаблицаРасчетыСПокупателями()

#КонецОбласти

#Область ЕГАИС

#Область СообщенияЕГАИС

// Сообщение к передаче XML
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС.
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеКПередачеXML(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные Тогда
		
		Возврат ЧекЕГАИСXML(ДокументСсылка, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию Тогда
		
		Возврат ЧекЕГАИСОтменаXML(ДокументСсылка, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

Функция ЧекЕГАИСXML(ДокументСсылка, ДополнительныеПараметры)
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ЕГАИСПрисоединенныеФайлы.Документ      КАК Ссылка,
		|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
		|ПОМЕСТИТЬ Версии
		|ИЗ
		|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
		|ГДЕ
		|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
		|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
		|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
		|СГРУППИРОВАТЬ ПО
		|	ЕГАИСПрисоединенныеФайлы.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Шапка.Номер                          КАК Номер,
		|	Шапка.Дата                           КАК Дата,
		|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)   КАК ПоследнийНомерВерсии,
		|	Шапка.Ссылка                         КАК ДокументОснование,
		|	КлассификаторОрганизацийЕГАИС.Ссылка КАК ОрганизацияЕГАИС,
		|	КлассификаторОрганизацийЕГАИС.Код            КАК ИдентификаторФСРАР,
		|	КлассификаторОрганизацийЕГАИС.ФорматОбмена   КАК ФорматОбмена,
		|	КлассификаторОрганизацийЕГАИС.ИНН            КАК ИНН,
		|	КлассификаторОрганизацийЕГАИС.КПП            КАК КПП,
		|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект,
		|	&АдресТорговогоОбъекта                       КАК АдресТорговогоОбъекта,
		|	Шапка.Ответственный                          КАК Ответственный,
		|	&НомерСмены                                  КАК НомерСмены,
		|	&НомерЧека                                   КАК НомерЧекаККМ,
		|	&СерийныйНомер                               КАК СерийныйНомерККМ
		|ПОМЕСТИТЬ Шапка
		|ИЗ
		|	Документ.ЧекККМ КАК Шапка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
		|		ПО Шапка.Ссылка = Версии.Ссылка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|		ПО Шапка.СтруктурнаяЕдиница = КлассификаторОрганизацийЕГАИС.ТорговыйОбъект
		|		 И Шапка.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
		|ГДЕ
		|	Шапка.Ссылка = &Ссылка
		|;
		|
		|//#РезультатЗапроса#////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	Шапка
		|",
		"Шапка");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Товары.КлючСвязи               КАК ИдентификаторСтроки,
		|	Товары.НомерСтроки             КАК НомерСтроки,
		|	Товары.Количество              КАК Количество,
		|	Товары.Цена                    КАК Цена,
		|	Товары.Штрихкод                КАК Штрихкод,
		|	Товары.НоменклатураЕГАИС       КАК АлкогольнаяПродукция,
		|	Товары.НоменклатураЕГАИС.Объем КАК Объем
		|ИЗ
		|	Документ.ЧекККМ.Запасы КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.Номенклатура.АлкогольнаяПродукция
		|	И Товары.Номенклатура.ВидАлкогольнойПродукции.Маркируемый
		|",
		"Товары");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Шапка.ОрганизацияЕГАИС             КАК ОрганизацияЕГАИС,
		|	ТабличнаяЧасть.КлючСвязи           КАК ИдентификаторСтроки,
		|	ЕСТЬNULL(ТабличнаяЧастьТовары.НоменклатураЕГАИС, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)) КАК АлкогольнаяПродукция,
		|	ТабличнаяЧасть.Справка2            КАК Справка2,
		|	ТабличнаяЧасть.АкцизнаяМарка       КАК ШтрихкодУпаковки,
		|	ТабличнаяЧасть.ШтрихкодУпаковки    КАК ШтрихкодРодительскойУпаковки
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	Документ.ЧекККМ.АкцизныеМарки КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Запасы КАК ТабличнаяЧастьТовары
		|		ПО ТабличнаяЧастьТовары.КлючСвязи = ТабличнаяЧасть.КлючСвязи
		|		И ТабличнаяЧастьТовары.КлючСвязи <> """"
		|		ЛЕВОЕ СОЕДИНЕНИЕ Шапка КАК Шапка
		|		ПО ИСТИНА
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|ИНДЕКСИРОВАТЬ ПО
		|	ШтрихкодУпаковки,
		|	ШтрихкодРодительскойУпаковки
		|");
	
	ПараметрыФормированияТекстаЗапроса = Справочники.ШтрихкодыУпаковокТоваров.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Истина;
	ПараметрыФормированияТекстаЗапроса.ИмяПоляАлкогольнаяПродукция     = "НоменклатураЕГАИС";
	ТекстыЗапроса.Добавить(
		Справочники.ШтрихкодыУпаковокТоваров.ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
		"ВложенныеШтрихкоды");
	
	МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Перечисления.ВидыДокументовЕГАИС.ЧекККМ);
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось отправить чек в ЕГАИС'");
	Иначе
		НомерЧека     = ДополнительныеПараметры.НомерЧека;
		НомерСмены    = ДополнительныеПараметры.НомерСмены;
		СерийныйНомер = ДополнительныеПараметры.СерийныйНомер;
		АдресТорговогоОбъекта = ДополнительныеПараметры.АдресТорговогоОбъекта;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НомерЧека",     НомерЧека);
	Запрос.УстановитьПараметр("НомерСмены",    НомерСмены);
	Запрос.УстановитьПараметр("СерийныйНомер", СерийныйНомер);
	Запрос.УстановитьПараметр("АдресТорговогоОбъекта", АдресТорговогоОбъекта);
	
	РезультатыЗапроса = ГосударственныеИнформационныеСистемы.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	Возврат ЧекиЕГАИС.ЧекЕГАИСXML(ДокументСсылка, РезультатыЗапроса, МенеджерВременныхТаблиц);
	
КонецФункции

Функция ЧекЕГАИСОтменаXML(ДокументСсылка, ДополнительныеПараметры)
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ЕГАИСПрисоединенныеФайлы.Документ      КАК Ссылка,
		|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
		|ПОМЕСТИТЬ Версии
		|ИЗ
		|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
		|ГДЕ
		|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
		|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
		|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
		|СГРУППИРОВАТЬ ПО
		|	ЕГАИСПрисоединенныеФайлы.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Шапка.Номер                           КАК Номер,
		|	Шапка.Дата                            КАК Дата,
		|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)    КАК ПоследнийНомерВерсии,
		|	Шапка.Ссылка                          КАК ДокументОснование,
		|	КлассификаторОрганизацийЕГАИС.Ссылка  КАК ОрганизацияЕГАИС,
		|	КлассификаторОрганизацийЕГАИС.Код            КАК ИдентификаторФСРАР,
		|	КлассификаторОрганизацийЕГАИС.ФорматОбмена   КАК ФорматОбмена,
		|	КлассификаторОрганизацийЕГАИС.ИНН            КАК ИНН,
		|	КлассификаторОрганизацийЕГАИС.КПП            КАК КПП,
		|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект,
		|	&АдресТорговогоОбъекта                       КАК АдресТорговогоОбъекта,
		|	Шапка.Ответственный                          КАК Ответственный,
		|	&НомерСмены                                  КАК НомерСмены,
		|	&НомерЧека                                   КАК НомерЧекаККМ,
		|	&СерийныйНомер                               КАК СерийныйНомерККМ
		|ПОМЕСТИТЬ Шапка
		|ИЗ
		|	Документ.ЧекККМ КАК Шапка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
		|		ПО Шапка.Ссылка = Версии.Ссылка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|		ПО Шапка.СтруктурнаяЕдиница = КлассификаторОрганизацийЕГАИС.ТорговыйОбъект
		|		 И Шапка.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
		|ГДЕ
		|	Шапка.Ссылка = &Ссылка
		|;
		|
		|//#РезультатЗапроса#////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	Шапка
		|",
		"Шапка");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Товары.КлючСвязи               КАК ИдентификаторСтроки,
		|	Товары.НомерСтроки             КАК НомерСтроки,
		|	Товары.Количество              КАК Количество,
		|	-Товары.Цена                   КАК Цена,
		|	Товары.Штрихкод                КАК Штрихкод,
		|	Товары.НоменклатураЕГАИС       КАК АлкогольнаяПродукция,
		|	Товары.НоменклатураЕГАИС.Объем КАК Объем
		|ИЗ
		|	Документ.ЧекККМ.Запасы КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.Номенклатура.АлкогольнаяПродукция
		|	И Товары.Номенклатура.ВидАлкогольнойПродукции.Маркируемый
		|",
		"Товары");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Шапка.ОрганизацияЕГАИС                    КАК ОрганизацияЕГАИС,
		|	ТабличнаяЧасть.КлючСвязи                  КАК ИдентификаторСтроки,
		|	ЕСТЬNULL(ТабличнаяЧастьТовары.НоменклатураЕГАИС, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)) КАК АлкогольнаяПродукция,
		|	ТабличнаяЧасть.Справка2                   КАК Справка2,
		|	ТабличнаяЧасть.АкцизнаяМарка              КАК ШтрихкодУпаковки,
		|	ТабличнаяЧасть.ШтрихкодУпаковки           КАК ШтрихкодРодительскойУпаковки
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	Документ.ЧекККМ.АкцизныеМарки КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Запасы КАК ТабличнаяЧастьТовары
		|		ПО ТабличнаяЧастьТовары.КлючСвязи = ТабличнаяЧасть.КлючСвязи
		|		И ТабличнаяЧастьТовары.КлючСвязи <> """"
		|		ЛЕВОЕ СОЕДИНЕНИЕ Шапка КАК Шапка
		|		ПО ИСТИНА
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|ИНДЕКСИРОВАТЬ ПО
		|	ШтрихкодУпаковки,
		|	ШтрихкодРодительскойУпаковки
		|");
	
	ПараметрыФормированияТекстаЗапроса = Справочники.ШтрихкодыУпаковокТоваров.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Истина;
	ПараметрыФормированияТекстаЗапроса.ИмяПоляАлкогольнаяПродукция     = "НоменклатураЕГАИС";
	ТекстыЗапроса.Добавить(
		Справочники.ШтрихкодыУпаковокТоваров.ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
		"ВложенныеШтрихкоды");
	
	МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Перечисления.ВидыДокументовЕГАИС.ЧекККМ);
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось отправить чек в ЕГАИС'");
	Иначе
		НомерЧека     = ДополнительныеПараметры.НомерЧека;
		НомерСмены    = ДополнительныеПараметры.НомерСмены;
		СерийныйНомер = ДополнительныеПараметры.СерийныйНомер;
		АдресТорговогоОбъекта = ДополнительныеПараметры.АдресТорговогоОбъекта;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НомерЧека",     НомерЧека);
	Запрос.УстановитьПараметр("НомерСмены",    НомерСмены);
	Запрос.УстановитьПараметр("СерийныйНомер", СерийныйНомер);
	Запрос.УстановитьПараметр("АдресТорговогоОбъекта", АдресТорговогоОбъекта);
	
	РезультатыЗапроса = ГосударственныеИнформационныеСистемы.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	Возврат ЧекиЕГАИС.ЧекЕГАИСXML(ДокументСсылка, РезультатыЗапроса, МенеджерВременныхТаблиц);
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеЕГАИС

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
КонецФункции

// Статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции


// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры);
	
КонецФункции

// Обновить статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции


// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Возврат ЧекиЕГАИС.ПоследовательностьОпераций(ДокументСсылка);
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктПостановкиНаБалансЕГАИС - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	Если НЕ ТипЗнч(ПараметрыОбновленияСтатуса) = Тип("Структура") Тогда
		ПараметрыОбновленияСтатуса = Новый Структура;
	КонецЕсли;
	ПараметрыОбновленияСтатуса.Вставить("ОбновлятьДвижения", Ложь);
	
	ЧекиЕГАИС.ПриИзмененииСтатусаЧека(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус);
	
КонецПроцедуры

// Опеределить необходимость перерасчета статуса оформления документов.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Предыдущий статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перерасчета статуса оформления.
//
Функция РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПоУмолчанию();
	
КонецФункции

// Возвращает статусы движений.
//
// Возвращаемое значение:
//  Массив - Статусы.
//
Функция СтатусыДвиженийАкцизныхМарокСвободныйОстаток() Экспорт
	
	Возврат ЧекиЕГАИС.СтатусыДвиженийАкцизныхМарокСвободныйОстаток();
	
КонецФункции

// Возвращает статусы движений.
//
// Возвращаемое значение:
//  Массив - Статусы.
//
Функция СтатусыДвиженийАкцизныхМарокКоличество() Экспорт
	
	Возврат ЧекиЕГАИС.СтатусыДвиженийАкцизныхМарокКоличество();
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат ЧекиЕГАИС.ДальнейшееДействиеПоУмолчанию();
	
КонецФункции

#КонецОбласти

#Область СканированиеАлкогольнойПродукции

Функция ТаблицаАлкогольнойПродукцииКОпределениюСправок2(ДокументСсылка) Экспорт
	
	Возврат Новый ТаблицаЗначений;
	
КонецФункции

Функция НаличиеМаркируемойПродукции(Ссылка) Экспорт 
	
	СтруктураВозврата = Новый Структура;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ОбработатьШтрихкодАкцизнойМарки(Форма, ДанныеШтрихкода, ПараметрыСканированияАкцизныхМарок) Экспорт
	
КонецФункции

Функция ОбработатьШтрихкодУпаковки(Форма, ДанныеШтрихкода, ВложенныеШтрихкоды, ПараметрыСканированияАкцизныхМарок) Экспорт
	
КонецФункции

Функция ОбработатьШтрихкодDataMatrix(Форма, ДанныеШтрихкода, ПараметрыСканированияАкцизныхМарок) Экспорт
	
КонецФункции


Функция ШтрихкодыУпаковок(ДокументСсылка, ЗаполнитьСправки2ИзРегистра = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМЗапасы.Ссылка.Организация КАК Организация,
	|	ЧекККМАкцизныеМарки.АкцизнаяМарка КАК АкцизнаяМарка,
	|	ЧекККМАкцизныеМарки.Справка2 КАК Справка2,
	|	ЧекККМАкцизныеМарки.ШтрихкодУпаковки КАК ШтрихкодУпаковки
	|ПОМЕСТИТЬ Вт_Документ
	|ИЗ
	|	Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.АкцизныеМарки КАК ЧекККМАкцизныеМарки
	|		ПО ЧекККМЗапасы.Ссылка = ЧекККМАкцизныеМарки.Ссылка
	|			И ЧекККМЗапасы.КлючСвязи = ЧекККМАкцизныеМарки.КлючСвязи
	|ГДЕ
	|	ЧекККМЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	АкцизныеМаркиЕГАИС.АкцизнаяМарка КАК ШтрихкодУпаковки,
	|	ВЫБОР
	|		КОГДА АкцизныеМаркиЕГАИС.Справка2 = РозничнаяПродажаТовары.Справка2
	|			ТОГДА АкцизныеМаркиЕГАИС.Справка2
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ОшибкаЧтенияСтатуса)
	|	КОНЕЦ КАК Статус,
	|	АкцизныеМаркиЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	РозничнаяПродажаТовары.Справка2 КАК Справка2
	|ИЗ
	|	Вт_Документ КАК РозничнаяПродажаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО РозничнаяПродажаТовары.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|		ПО РозничнаяПродажаТовары.АкцизнаяМарка = АкцизныеМаркиЕГАИС.АкцизнаяМарка";

	
	Если ЗаполнитьСправки2ИзРегистра Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РозничнаяПродажаТовары.Справка2", "АкцизныеМаркиЕГАИС.Справка2");
	КонецЕсли; 
	
	Возврат Новый Структура("МаркированныеТовары", Запрос.Выполнить().Выгрузить());
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Бонусы

// Формирует таблицу значение, содержащую данные для проведения по регистру.
// Таблицу значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаБонусныеБаллы(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Если СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит
		И Не СтруктураДополнительныеСвойства.ДляПроведения.Архивный
		И Не СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Текст = РаботаСБонусами.СформироватьТекстЗапросаПоБонуснымБаллам();
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		ТаблицаБонусныеБаллы = РезультатЗапроса[0].Выгрузить();
		ТаблицаОплатаБонусами = РезультатЗапроса[1].Выгрузить();
		
		Если ТаблицаОплатаБонусами.Количество() > 0 Тогда
			
			РаботаСБонусами.ОбъединитьТаблицыБонусов(
				ТаблицаБонусныеБаллы,
				ТаблицаОплатаБонусами,
				ДокументСсылкаЧекККМ);
			
		КонецЕсли;
		
	Иначе
		
		ТаблицаБонусныеБаллы = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаБонусныеБаллы", ТаблицаБонусныеБаллы);
	
КонецПроцедуры

Процедура СформироватьТаблицаНачисленияБонусныхБаллов(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Если СтруктураДополнительныеСвойства.ДляПроведения.ЧекПробит
		И Не СтруктураДополнительныеСвойства.ДляПроведения.Архивный
		И Не СтруктураДополнительныеСвойства.ДляПроведения.ОперацияСДенежнымиСредствами Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Текст = РаботаСБонусами.СформироватьТекстЗапросаПоНачислениямБонусныхБаллов();
		ТаблицаНачисленияБонусныхБаллов = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		ТаблицаНачисленияБонусныхБаллов = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаНачисленияБонусныхБаллов", ТаблицаНачисленияБонусныхБаллов);
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.//
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электрнной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
