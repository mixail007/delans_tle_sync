#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыЗаполненияДокумента

// Инициализирует документ чек ККМ.
//
Процедура ИнициализироватьДокумент()
	
	ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.ПолучитьЭквайринговыйТерминалПоУмолчанию(КассаККМ);
	
КонецПроцедуры // ИнициализироватьДокумент()

// Заполняет документ чек ККМ по кассе ККМ.
//
// Параметры
//  КассаККМ - СправочникСсылка.КассыККМ
//
Процедура ЗаполнитьДокументПоКассеККМ(КассаККМ) Экспорт
	
	СостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СостояниеКассовойСмены);
	Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
	ЭтотОбъект.КассоваяСмена = СостояниеКассовойСмены.ОтчетОРозничныхПродажах;
	
КонецПроцедуры // ЗаполнитьДокументПоКассеККМ()

Процедура ОбойтиВыборкуКассККМ(Выборка, ЗаказОснование)
	
	Если Выборка.Количество() = 1 Тогда
		
		Выборка.Следующий();
		КассаККМ = Выборка.Ссылка;
		
		СостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СостояниеКассовойСмены);
		ЭтотОбъект.КассоваяСмена = СостояниеКассовойСмены.ОтчетОРозничныхПродажах;
		
		Если НЕ СостояниеКассовойСмены.СменаОткрыта Тогда
			
			ТекстСообщения = НСтр("ru = 'Не открыта кассовая смена для кассы ККМ ""%1"". Открыть смену можно в журнале ""Чеки ККМ"". Также можно оформить чек в рабочем месте кассира (РМК).'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", КассаККМ);
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
	ИначеЕсли Выборка.Количество() Тогда
		
		ЕстьОткрытаяСмена = Ложь;
		Пока Выборка.Следующий() Цикл
			
			ТекКассаККМ = Выборка.Ссылка;
		
			СостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(ТекКассаККМ);
			
			Если СостояниеКассовойСмены.СменаОткрыта Тогда
				ЕстьОткрытаяСмена = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЕстьОткрытаяСмена Тогда
			ИспользуетсяРезервированиеЗапасов = ПолучитьФункциональнуюОпцию("РезервированиеЗапасов");
			Если ЗаказОснование.СтруктурнаяЕдиницаРезерв.Пустая() Тогда
				Если ИспользуетсяРезервированиеЗапасов Тогда
					ТекстСообщения = НСтр("ru = 'Не открыта ни одна кассовая смена для основного склада (склад можно выбрать в заказе - закладка ""Дополнительно""). Открыть смену можно в журнале ""Чеки ККМ"". Также можно оформить чек в рабочем месте кассира (РМК).'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Не открыта ни одна кассовая смена для основного склада. Открыть смену можно в журнале ""Чеки ККМ"". Также можно оформить чек в рабочем месте кассира (РМК).'");
				КонецЕсли;
			ИначеЕсли ИспользуетсяРезервированиеЗапасов Тогда
				ТекстСообщения = НСтр("ru = 'Не открыта ни одна кассовая смена для склада, который выбран в заказе. Открыть смену можно в журнале ""Чеки ККМ"". Также можно оформить чек в рабочем месте кассира (РМК).'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Не открыта ни одна кассовая смена для основного склада. Открыть смену можно в журнале ""Чеки ККМ"". Также можно оформить чек в рабочем месте кассира (РМК).'");
			КонецЕсли;
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик заполнения на основании Заказа покупателя.
//
// Параметры:
//  ДанныеЗаполнения - Структура, ДокументСсылка.ПриходнаяНакладная - Основание для заполнения документа.
//
Процедура ЗаполнитьПоЗаказуПокупателя(ДанныеЗаполнения) Экспорт
	
	ТекущаяКассаККМ = КассаККМ;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаказОснование = ДанныеЗаполнения.Основание;
	Иначе
		ЗаказОснование = ДанныеЗаполнения;
	КонецЕсли;
	
	Если НЕ ЭтоВводНаОснованииЗаказНаПродажу(ЗаказОснование) Тогда
		ВызватьИсключение НСтр("ru = 'Чек ККМ ввести только на основании заказа покупателя (на продажу) или независимо!'");
	КонецЕсли;
	
	// Основание и настройка документа.
	МассивЗаказов = Новый Массив;
	МассивЗаказов.Добавить(ЗаказОснование.Ссылка);
	ПоложениеЗаказаПокупателя = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ПоложениеЗаказаПокупателяВДокументахОтгрузки");
	Если НЕ ЗначениеЗаполнено(ПоложениеЗаказаПокупателя) Тогда
		ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	КонецЕсли;
	Если ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		Заказ = ЗаказОснование;
	КонецЕсли;
	
	// Заполнение шапки.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК ОснованиеСсылка,
	|	ЗаказПокупателя.Проведен КАК ОснованиеПроведен,
	|	ЗаказПокупателя.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЗаказПокупателя.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.БанковскийСчет = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателя.Организация.БанковскийСчетПоУмолчанию
	|		ИНАЧЕ ЗаказПокупателя.БанковскийСчет
	|	КОНЕЦ КАК БанковскийСчет,
	|	ВЫБОР
	|		КОГДА РезервированиеЗапасов.Значение
	|			ТОГДА ЗаказПокупателя.СтруктурнаяЕдиницаРезерв
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	ЗаказПокупателя.Контрагент КАК Контрагент,
	|	ЗаказПокупателя.Договор КАК Договор,
	|	ЗаказПокупателя.ВидЦен КАК ВидЦен,
	|	ЗаказПокупателя.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|	ЗаказПокупателя.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ЗаказПокупателя.ПроцентСкидкиПоДисконтнойКарте КАК ПроцентСкидкиПоДисконтнойКарте,
	|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗаказПокупателя.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказПокупателя.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ВалютаДокумента = НациональнаяВалюта.Значение
	|			ТОГДА ЗаказПокупателя.Курс
	|		ИНАЧЕ КурсыВалютСрезПоследних.Курс
	|	КОНЕЦ КАК Курс,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ВалютаДокумента = НациональнаяВалюта.Значение
	|			ТОГДА ЗаказПокупателя.Кратность
	|		ИНАЧЕ КурсыВалютСрезПоследних.Кратность
	|	КОНЕЦ КАК Кратность,
	|	ЗаказПокупателя.ОжидаетсяВыборВариантаКП
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	|		ПО ЗаказПокупателя.Договор.ВалютаРасчетов = КурсыВалютСрезПоследних.Валюта},
	|	Константа.НациональнаяВалюта КАК НациональнаяВалюта,
	|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК РезервированиеЗапасов
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&МассивЗаказов)";
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Запрос.УстановитьПараметр("ДатаДокумента", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗначенияПроверяемыхРеквизитов = Новый Структура("СостояниеЗаказа, Проведен, ОжидаетсяВыборВариантаКП", Выборка.СостояниеЗаказа, Выборка.ОснованиеПроведен, Выборка.ОжидаетсяВыборВариантаКП);
		Документы.ЗаказПокупателя.ПроверитьВозможностьВводаНаОснованииЗаказаПокупателя(Выборка.ОснованиеСсылка, ЗначенияПроверяемыхРеквизитов);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущаяКассаККМ) Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка,, "ВалютаДокумента, СтруктурнаяЕдиница");
	Иначе
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка,, "ВалютаДокумента");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнойСклад");
		Если НЕ ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
			СпециальныйНалоговыйРежим = УправлениеНебольшойФирмойСервер.СпециальныйНалоговыйРежим(Организация, СтруктурнаяЕдиница, Дата);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("РМК") И ЗначениеЗаполнено(ДанныеЗаполнения.КассаККМ) Тогда
		
		// Чек оформляется из РМК на основании заказа покупателя, который в нем выбран.
		КассаККМ = ДанныеЗаполнения.КассаККМ;
		СостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СостояниеКассовойСмены);
		ЭтотОбъект.КассоваяСмена = СостояниеКассовойСмены.ОтчетОРозничныхПродажах;
		
		Если НЕ СостояниеКассовойСмены.СменаОткрыта Тогда
			
			ТекстСообщения = НСтр("ru = 'Не открыта кассовая смена для кассы ККМ ""%1"". Открыть смену можно в журнале ""Чеки ККМ"". Также можно оформить чек в рабочем месте кассира (РМК).'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", КассаККМ);
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
	ИначеЕсли ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") И ЗначениеЗаполнено(СтруктурнаяЕдиница) И НЕ ЗначениеЗаполнено(ТекущаяКассаККМ) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КассыККМ.Ссылка
			|ИЗ
			|	Справочник.КассыККМ КАК КассыККМ
			|ГДЕ
			|	КассыККМ.ТипКассы = &ТипКассы
			|	И НЕ КассыККМ.ПометкаУдаления
			|	И КассыККМ.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
			|	И КассыККМ.Владелец = &Организация";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
		Запрос.УстановитьПараметр("ТипКассы", Перечисления.ТипыКассККМ.ФискальныйРегистратор);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ОбойтиВыборкуКассККМ(Выборка, ЗаказОснование);
		
	ИначеЕсли НЕ ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") И НЕ ЗначениеЗаполнено(ТекущаяКассаККМ) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КассыККМ.Ссылка
			|ИЗ
			|	Справочник.КассыККМ КАК КассыККМ
			|ГДЕ
			|	КассыККМ.ТипКассы = &ТипКассы
			|	И НЕ КассыККМ.ПометкаУдаления
			|	И КассыККМ.Владелец = &Организация";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ТипКассы", Перечисления.ТипыКассККМ.ФискальныйРегистратор);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		ОбойтиВыборкуКассККМ(Выборка, ЗаказОснование);
		
	КонецЕсли;
	
	// Заполнение табличной части.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыОстатки.Характеристика КАК Характеристика,
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыОстатки.Характеристика КАК Характеристика,
	|		ЗаказыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(
	|				,
	|				ЗаказПокупателя В (&МассивЗаказов)
	|					И (Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|						ИЛИ Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|						ИЛИ Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))) КАК ЗаказыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗаказыПокупателей.ЗаказПокупателя,
	|		ДвиженияДокументаЗаказыПокупателей.Номенклатура,
	|		ДвиженияДокументаЗаказыПокупателей.Характеристика,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗаказыПокупателей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗаказыПокупателей.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗаказыПокупателей.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей КАК ДвиженияДокументаЗаказыПокупателей
	|	ГДЕ
	|		ДвиженияДокументаЗаказыПокупателей.Регистратор = &Ссылка
	//ЭР Несторук С.И. 13.04.2017 13:36:03 {
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ES_НоменклатураВЗаказахОстатки.Заказ,
	|		ES_НоменклатураВЗаказахОстатки.Номенклатура,
	|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|		ЕСТЬNULL(ES_НоменклатураВЗаказахОстатки.КоличествоОстаток, 0)
	|	ИЗ
	|		РегистрНакопления.ES_РННоменклатураВЗаказах.Остатки(, Заказ В (&МассивЗаказов)) КАК ES_НоменклатураВЗаказахОстатки
	|
	//}ЭР Несторук С.И.
	|	) КАК ЗаказыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыОстатки.ЗаказПокупателя,
	|	ЗаказыОстатки.Номенклатура,
	|	ЗаказыОстатки.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|				ИЛИ ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТипНоменклатурыЗапас,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	ЗаказПокупателяЗапасы.Количество КАК Количество,
	|	ЗаказПокупателяЗапасы.Партия КАК Партия,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказПокупателяЗапасы.Цена КАК Цена,
	|	ЗаказПокупателяЗапасы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ЗаказПокупателяЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ЗаказПокупателяЗапасы.Сумма КАК Сумма,
	|	ЗаказПокупателяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателяЗапасы.СуммаНДС КАК СуммаНДС,
	|	ЗаказПокупателяЗапасы.Всего КАК Всего,
	|	ЗаказПокупателяЗапасы.Ссылка КАК Заказ,
	|	ЗаказПокупателяЗапасы.Содержание КАК Содержание,
	|	ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки,
	|	ЗаказПокупателяЗапасы.СуммаАвтоматическойСкидки,
	|	ЗаказПокупателяЗапасы.КлючСвязи,
	|	ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки1,
	|	ЗаказПокупателяЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки1,
	|	ЗаказПокупателяЗапасы.Ссылка.ВалютаДокумента,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность,
	|	ЗаказПокупателяЗапасы.Номенклатура.ВидАлкогольнойПродукции.Маркируемый КАК МаркируемыйПродукция,
	|	ЗаказПокупателяЗапасы.Номенклатура.ТабачнаяПродукция КАК ТабачнаяПродукция,
	|	ЗаказПокупателяЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ЗаказПокупателяЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЗаказПокупателяЗапасы.ДоляСтоимости КАК ДоляСтоимости
	|ИЗ
	|	ВТЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	|		ПО ЗаказПокупателяЗапасы.Ссылка.ВалютаДокумента = КурсыВалютСрезПоследних.Валюта
	|ГДЕ
	|	(ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ИЛИ ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ИЛИ ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка КАК Заказ,
	|	СкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СкидкиНаценки.Сумма КАК Сумма,
	|	СкидкиНаценки.ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки,
	|	СкидкиНаценки.СкидкаНаценка.СпособПредоставления КАК СпособПредоставления
	|ИЗ
	|	Документ.ЗаказПокупателя.СкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Ссылка В(&МассивЗаказов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДобавленныеНаборы.Ссылка КАК Заказ,
	|	ДобавленныеНаборы.НоменклатураНабора КАК НоменклатураНабора,
	|	ДобавленныеНаборы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ДобавленныеНаборы.Количество КАК Количество
	|ИЗ
	|	Документ.ЗаказПокупателя.ДобавленныеНаборы КАК ДобавленныеНаборы
	|ГДЕ
	|	ДобавленныеНаборы.Ссылка В(&МассивЗаказов) 
	|		И ДобавленныеНаборы.НомерВариантаКП = ДобавленныеНаборы.Ссылка.ОсновнойВариантКП";
	
	Документы.ЗаказПокупателя.ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(МассивЗаказов, Запрос.МенеджерВременныхТаблиц, Истина);
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаОстатков = МассивРезультатов[0].Выгрузить();
	ТаблицаОстатков.Индексы.Добавить("ЗаказПокупателя,Номенклатура,Характеристика");
	
	// АвтоматическиеСкидки.
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки");
	Если ИспользоватьАвтоматическиеСкидки Тогда
		СкидкиНаценкиЗаказа = МассивРезультатов[2].Выгрузить();
		СкидкиНаценки.Очистить();
	КонецЕсли;
	// Конец АвтоматическиеСкидки.
	
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	
	ЕстьМаркируемыйПродукция = Ложь;
	
	Запасы.Очистить();
	// Наборы
	ПропускаемыеНаборы = Новый Массив;
	// Конец Наборы
	Если ТаблицаОстатков.Количество() > 0 Тогда
		
		//ЭР Несторук С.И. 30.03.2017 20:03:36 {
		Если ЗаказОснование.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ES_ЗаказНаДоставку Тогда
			ИспользоватьНоменклатуруДляЧеков = Ложь;
			НоменклатураДляЧека = Справочники.Номенклатура.ПустаяСсылка();
			РезультатЗапроса = ЭР_ДанныеИзЗаказаНаДоставку(МассивЗаказов,Дата, ИспользоватьНоменклатуруДляЧеков, НоменклатураДляЧека);
			Выборка = РезультатЗапроса.Выбрать();
		Иначе
			//}ЭР Несторук С.И.
			Выборка = МассивРезультатов[1].Выбрать();
			//ЭР Несторук С.И. 30.03.2017 20:05:51 {
		КонецЕсли;	
		//}ЭР Несторук С.И.
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.МаркируемыйПродукция = Истина ИЛИ Выборка.ТабачнаяПродукция Тогда
				ЕстьМаркируемыйПродукция = Истина;
				Продолжить;
			КонецЕсли;
			
			СтруктураДляПоиска = Новый Структура;
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", Выборка.Заказ);
			СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
			СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
			
			МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураДляПоиска);
			Если МассивСтрокОстатков.Количество() = 0 Тогда
				// Наборы
				Если ЗначениеЗаполнено(Выборка.НоменклатураНабора) Тогда
					ДобавитьОписаниеНабора(ПропускаемыеНаборы, Выборка.НоменклатураНабора, Выборка.ХарактеристикаНабора);
				КонецЕсли;
				// Конец Наборы
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			КоличествоКСписанию = Выборка.Количество * Выборка.Коэффициент;
			МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоКСписанию;
			Если МассивСтрокОстатков[0].КоличествоОстаток < 0 Тогда
				
				// Наборы
				Если ЗначениеЗаполнено(Выборка.НоменклатураНабора) Тогда
					ДобавитьОписаниеНабора(ПропускаемыеНаборы, Выборка.НоменклатураНабора, Выборка.ХарактеристикаНабора);
				КонецЕсли;
				// Конец Наборы
				
				КоличествоКСписанию = (КоличествоКСписанию + МассивСтрокОстатков[0].КоличествоОстаток) / Выборка.Коэффициент;
				
				СтруктураДанных = УправлениеНебольшойФирмойСервер.ПолучитьСуммуСтрокиТабличнойЧасти(
					Новый Структура("Количество, Цена, Сумма, ПроцентСкидкиНаценки, СуммаСкидкиНаценки, СтавкаНДС, СуммаНДС, СуммаВключаетНДС, Всего",
						КоличествоКСписанию, Выборка.Цена, 0, Выборка.ПроцентСкидкиНаценки, 0, Выборка.СтавкаНДС, 0, СуммаВключаетНДС, 0));
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанных);
				
			КонецЕсли;
			
			// АвтоматическиеСкидки
			Если ИспользоватьАвтоматическиеСкидки Тогда
				КоличествоВДокументе = Выборка.Количество * Выборка.Коэффициент;
				ПересчитатьСуммы = КоличествоВДокументе <> КоличествоКСписанию;
				КоэффициентПересчетаСкидки = ?(ПересчитатьСуммы, КоличествоКСписанию / КоличествоВДокументе, 1);
				Если КоэффициентПересчетаСкидки <> 1 Тогда
					НоваяСтрока.СуммаАвтоматическойСкидки = ОКР(Выборка.СуммаАвтоматическойСкидки * КоэффициентПересчетаСкидки,2);
				КонецЕсли;
				
				// Формирование табличной части скидок
				
				СуммаАвтоматическойСкидки = 0;
				ЕстьСтрокаСкидки = Ложь;
				Если Выборка.КлючСвязи <> 0 Тогда
					Для Каждого СтрокаСкидкиЗаказа ИЗ СкидкиНаценкиЗаказа.НайтиСтроки(Новый Структура("Заказ,КлючСвязи", Выборка.Заказ, Выборка.КлючСвязи)) Цикл
						
						СтрокаСкидки = СкидкиНаценки.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаСкидки, СтрокаСкидкиЗаказа);
						Если ЗначениеЗаполнено(СтрокаСкидкиЗаказа.ЗначениеСкидкиНаценки) И СтрокаСкидкиЗаказа.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Процент Тогда
							СтрокаСкидки.Сумма = ОКР(НоваяСтрока.Цена * НоваяСтрока.Количество * СтрокаСкидкиЗаказа.ЗначениеСкидкиНаценки / 100, 2);
						Иначе
							СтрокаСкидки.Сумма = КоэффициентПересчетаСкидки * СтрокаСкидки.Сумма;
						КонецЕсли;
						СуммаАвтоматическойСкидки = СуммаАвтоматическойСкидки + СтрокаСкидки.Сумма;
						ЕстьСтрокаСкидки = Истина;
						
					КонецЦикла;
				КонецЕсли;
				
				НоваяСтрока.СуммаАвтоматическойСкидки = СуммаАвтоматическойСкидки;
				
			КонецЕсли;
			// Конец АвтоматическиеСкидки
			
			Если МассивСтрокОстатков[0].КоличествоОстаток <= 0 Тогда
				ТаблицаОстатков.Удалить(МассивСтрокОстатков[0]);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЕстьМаркируемыйПродукция Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "В заказе присутствует маркируемая продукция. Ее необходимо добавить в чек вручную.";
		Сообщение.Сообщить();
	КонецЕсли;
	
	// Наборы
	
	// Удаление неполных наборов
	Для каждого ОписаниеНабора Из ПропускаемыеНаборы Цикл
		УдаляемыеСтроки = Запасы.НайтиСтроки(ОписаниеНабора);
		Для каждого СтрокаЗапаса Из УдаляемыеСтроки Цикл
			Для Каждого СтрокаСкидки ИЗ СкидкиНаценки.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаЗапаса.КлючСвязи)) Цикл
				СкидкиНаценки.Удалить(СтрокаСкидки);
			КонецЦикла;
			Запасы.Удалить(СтрокаЗапаса);
		КонецЦикла; 
	КонецЦикла;
	
	// Добавленные наборы
	ДобавленныеНаборы.Очистить();
	ДобавленныеНаборыЗаказа = МассивРезультатов[3].Выгрузить();
	Для каждого СтрокаНабора Из ДобавленныеНаборыЗаказа Цикл
		Пропустить = Ложь;
		Для каждого ОписаниеНабора Из ПропускаемыеНаборы Цикл
			Если ОписаниеНабора.НоменклатураНабора=СтрокаНабора.НоменклатураНабора И
				ОписаниеНабора.ХарактеристикаНабора=СтрокаНабора.ХарактеристикаНабора Тогда
				Пропустить = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		Если Пропустить Тогда
			Продолжить;
		КонецЕсли; 
		НоваяСтрока = ДобавленныеНаборы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНабора);
	КонецЦикла;
	
	// Конец Наборы
	
	// Заполнение резервов.
	Если Запасы.Количество() > 0
		И Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить()
		И ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		ЗаполнитьКолонкуРезервПоРезервам();
		Документы.ЧекККМ.ПроверитьСтруктурнуюЕдиницуВЗаказе(ЗаказОснование, СтруктурнаяЕдиница);
	КонецЕсли;
	
	// АвтоматическиеСкидки.
	Если ИспользоватьАвтоматическиеСкидки Тогда
		РезультатРасчетаСкидокНаценок = СкидкиНаценки.Выгрузить();
		СкидкиРассчитаны = Истина;
	КонецЕсли;
	
	// Предоплата
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПредоплатуВЧекахККМ") И Контрагент.ВестиРасчетыПоЗаказам Тогда
		
		Если ЗначениеЗаполнено(Заказ) Тогда
			ТаблицаАвансов = ПолучитьТаблицуАвансовПоЗаказу(Заказ);
			Предоплата.Загрузить(ТаблицаАвансов);
		ИначеЕсли Запасы.Количество() > 0 И ЗначениеЗаполнено(Запасы[0].Заказ) Тогда
			ТаблицаАвансов = ПолучитьТаблицуАвансовПоЗаказу(Запасы[0].Заказ);
			Предоплата.Загрузить(ТаблицаАвансов);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказПокупателя()

// Процедура заполняет клонку Количество по резервам под заказ.
//
Процедура ЗаполнитьКолонкуРезервПоРезервам() Экспорт
	
	Запасы.ЗагрузитьКолонку(Новый Массив(Запасы.Количество()), "Резерв");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА &ЗаказВШапке
	|			ТОГДА &Заказ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|						И ТаблицаЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ТОГДА ТаблицаЗапасы.Заказ
	|				ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК ЗаказПокупателя
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатурыЗапас";
	
	ТаблицаЗапасы = Запасы.Выгрузить();
	ТаблицаЗапасы.Колонки.Добавить("ТипНоменклатурыЗапас", Новый ОписаниеТипов("Булево"));
	Для Каждого ТекущаяСтрока Из ТаблицаЗапасы Цикл
		ТекущаяСтрока.ТипНоменклатурыЗапас = (ТекущаяСтрока.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
			Или ТекущаяСтрока.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
	КонецЦикла;
	Запрос.УстановитьПараметр("ТаблицаЗапасы", ТаблицаЗапасы);
	ЗаказВШапке = ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	Запрос.УстановитьПараметр("ЗаказВШапке", ЗаказВШапке);
	Запрос.УстановитьПараметр("Заказ", ?(ЗначениеЗаполнено(Заказ), Заказ, Документы.ЗаказПокупателя.ПустаяСсылка()));
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						&Организация,
	|						&СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.Номенклатура.СчетУчетаЗапасов,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ТаблицаЗапасы.ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|					ГДЕ
	|						ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &Период
	|		И ДвиженияДокументаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		Если НЕ ЗаказВШапке Тогда
			СтруктураДляПоиска.Вставить("Заказ", Выборка.ЗаказПокупателя);
		КонецЕсли;
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", Выборка.Партия);
		
		ВсегоОстаток = Выборка.КоличествоОстаток;
		МассивСтрокЗапасы = Запасы.НайтиСтроки(СтруктураДляПоиска);
		Для каждого СтрокаЗапасы Из МассивСтрокЗапасы Цикл
			
			ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток / СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			Если СтрокаЗапасы.Количество >= ВсегоОстаток Тогда
				СтрокаЗапасы.Резерв = ВсегоОстаток;
				ВсегоОстаток = 0;
			Иначе
				СтрокаЗапасы.Резерв = СтрокаЗапасы.Количество;
				ВсегоОстаток = ВсегоОстаток - СтрокаЗапасы.Количество;
				ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток * СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКолонкуРезервПоРезервам()

// Заполняет документ чек ККМ в соответствии с отбором.
//
// Параметры
//  ДанныеЗаполнения - Структура со значениями отбора
//
Процедура ЗаполнитьДокументПоОтбору(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.Свойство("РМК") Тогда
		
		ЗаполнитьПоЗаказуПокупателя(ДанныеЗаполнения);
		
	ИначеЕсли ДанныеЗаполнения.Свойство("КассаККМ") Тогда
		
		ЗаполнитьДокументПоКассеККМ(ДанныеЗаполнения.КассаККМ);
		ДанныеЗаполнения.Вставить("СуммаВключаетНДС", ЭтотОбъект.СуммаВключаетНДС);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокументПоОтбору()

// Добавляет дополнительные реквизиты, необходимые для проведения документа в
// переданную структуру.
//
// Параметры:
//  СтруктураДополнительныеСвойства - Структура дополнительных свойств документа.
//
Процедура ДобавитьРеквизитыВДополнительныеСвойстваДляПроведения(СтруктураДополнительныеСвойства)
	
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ЧекПробит", Статус = Перечисления.СтатусыЧековККМ.Пробит);
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ТоварЗарезервирован", Статус = Перечисления.СтатусыЧековККМ.ТоварЗарезервирован);
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("Архивный", Архивный);
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ОперацияСДенежнымиСредствами", ОперацияСДенежнымиСредствами);
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ДвиженияПоЗапасамУдалять", ДвиженияПоЗапасамУдалять);
	
КонецПроцедуры // ДобавитьРеквизитыВДополнительныеСвойстваДляПроведения()

// Наборы
Процедура ДобавитьОписаниеНабора(ПропускаемыеНаборы, НоменклатураНабора, ХарактеристикаНабора)
	
	Для каждого ОписаниеНабора Из ПропускаемыеНаборы Цикл
		Если ОписаниеНабора.НоменклатураНабора=НоменклатураНабора И ОписаниеНабора.ХарактеристикаНабора=ХарактеристикаНабора Тогда
			// Уже добавлено
			Возврат;
		КонецЕсли; 
	КонецЦикла; 	
	СтруктураНабора = Новый Структура;
	СтруктураНабора.Вставить("НоменклатураНабора", НоменклатураНабора);
	СтруктураНабора.Вставить("ХарактеристикаНабора", ХарактеристикаНабора);
	ПропускаемыеНаборы.Добавить(СтруктураНабора);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события При копировании.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	НомерЧекаККМ = "";
	Телефон = "";
	АдресЭП = "";
	Архивный = Ложь;
	Статус = Перечисления.СтатусыЧековККМ.ЧекНеПробит;
	ДвиженияПоЗапасамУдалять = Ложь;
	
	// Очистим информацию о заказе покупателя.
	Заказ = Документы.ЗаказПокупателя.ПустаяСсылка();
	Для Каждого ТекущаяСтрока Из Запасы Цикл
		ТекущаяСтрока.Заказ = Заказ;
	КонецЦикла;
	
	ПолученоНаличными = 0;
	БезналичнаяОплата.Очистить();
	
	СостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СостояниеКассовойСмены);
	ЭтотОбъект.КассоваяСмена = СостояниеКассовойСмены.ОтчетОРозничныхПродажах;
	
	ИнициализироватьДокумент();
	
КонецПроцедуры // ПриКопировании()

// Процедура - обработчик события ОбработкаПроверкиЗаполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если БезналичнаяОплата.Итог("Сумма") > СуммаДокумента Тогда
		
		ТекстСообщения = НСтр("ru='Сумма безналичной оплаты превышает сумму документа'");
		
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			ТекстСообщения,
			,
			,
			"БезналичнаяОплата",
			Отказ
		);
	
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru='Кассовая смена не открыта'");
	
	Если НЕ РозничныеПродажиСервер.СменаОткрыта(КассоваяСмена, Дата, ТекстСообщения) Тогда
		
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			ТекстСообщения,
			,
			,
			"КассоваяСмена",
			Отказ
		);

	КонецЕсли;
	
	// Серийные номера
	РаботаССерийнымиНомерами.ПроверкаЗаполненияСерийныхНомеров(Отказ, Запасы, СерийныеНомера, СтруктурнаяЕдиница, ЭтотОбъект);
	
	// Наборы
	НаборыСервер.ПроверитьТабличнуюЧасть(ЭтотОбъект, "Запасы", Отказ);
	// КонецНаборы
	
	НоменклатураВДокументахСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, Отказ, Истина);
	
	// ПодарочныеCертификаты
	Если Константы.ФункциональнаяОпцияИспользоватьПодарочныеСертификаты.Получить() Тогда
		
		Если Не РаботаСПодарочнымиСертификатами.УказанКонтрагентДляПредоплаты() Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена константа ""Служебный контрагент для подарочных сертификатов"". Необходимо указать контрагента: Продажи - Еще больше возможностей.'");
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				,,,
				Отказ
			);
		КонецЕсли;
		
		// Проверка срока и области действия подарочных сертификатов
		ВыполнитьПроверкуОграниченийСертификатов(Отказ);
		
	КонецЕсли;
	// Конец ПодарочыеСертификаты
	
	// Бонусы
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммы") Тогда
		Если Не БезналичнаяОплата.Найти(Перечисления.ВидыБезналичныхОплат.Бонусы, "ВидОплаты") = Неопределено Тогда
			
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("БезналичнаяОплата.Сумма"));
			
			Для Каждого СтрокаОплаты Из БезналичнаяОплата Цикл
				
				Если СтрокаОплаты.ВидОплаты = Перечисления.ВидыБезналичныхОплат.Бонусы Тогда
					Если Не ЗначениеЗаполнено(СтрокаОплаты.СуммаБонусов) Тогда
						
						ТекстСообщения = НСтр("ru = 'В строке №%1 не указана сумма оплаты.'");
						ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаОплаты.НомерСтроки);
						УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
							ЭтотОбъект,
							ТекстСообщения,
							"БезналичнаяОплата",
							СтрокаОплаты.НомерСтроки,
							"СуммаБонусов",
							Отказ
						);
						
					КонецЕсли;
				Иначе
					Если Не ЗначениеЗаполнено(СтрокаОплаты.Сумма) Тогда
						
						ТекстСообщения = НСтр("ru = 'В строке №%1 не указана сумма оплаты.'");
						ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаОплаты.НомерСтроки);
						УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
							ЭтотОбъект,
							ТекстСообщения,
							"БезналичнаяОплата",
							СтрокаОплаты.НомерСтроки,
							"Сумма",
							Отказ
						);
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	// Конец Бонусы
	
	Если Предоплата.Количество() > 0 И Не ОперацияСДенежнымиСредствами Тогда
		ПроверитьТоварныйСоставПредоплаты(Отказ);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ОбработкаЗаполнения.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	//ЭР Несторук С.И. 30.03.2017 21:54:18 {
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ES_Самовывоз") Тогда
		ДанныеЗаполнения = ДанныеЗаполнения.Заказ;
	КонецЕсли;
	//}ЭР Несторук С.И.
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") И
		ТипЗнч(ДанныеЗаполнения) <> Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ДанныеЗаполнения = Справочники.КассыККМ.ПолучитьКассуККМПоУмолчанию();
	КонецЕсли;
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("Структура")] = "ЗаполнитьДокументПоОтбору";
	СтратегияЗаполнения[Тип("СправочникСсылка.КассыККМ")] = "ЗаполнитьДокументПоКассеККМ";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПокупателя")] = "ЗаполнитьПоЗаказуПокупателя";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения, "Контрагент, КассаККМ");
	
	ИнициализироватьДокумент();
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события ПередЗаписью.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыЧековККМ.Пробит
	   И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
	   И НЕ КассаККМ.ИспользоватьБезПодключенияОборудования Тогда
		
		ТекстСообщения = НСтр("ru='Чек ККМ пробит на фискальном регистраторе. Отмена проведения невозможна'");
		
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				,
				,
				,
				Отказ
			);
		
		Возврат;
		
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
	   И КассаККМ.ИспользоватьБезПодключенияОборудования
	   И КассоваяСмена.Проведен
	   И КассоваяСмена.КассоваяСмена.Статус = Перечисления.СтатусыКассовойСмены.Закрыта 
	   И (НомерЧекаККМ > 0 ИЛИ БезналичнаяОплата.Количество() > 0)
	   Тогда
		
		ТекстСообщения = НСтр("ru='Кассовая смена закрыта. Отмена проведения невозможна'");
		
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				,
				,
				,
				Отказ
			);
		
		Возврат;
		
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		НомерЧекаККМ = 0;
		Статус = Неопределено;
	КонецЕсли;
	
	Если ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		ЕстьЗаказы = НЕ Заказ.Пустая();
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			СтрокаТабличнойЧасти.Заказ = ?(ЗначениеЗаполнено(Заказ), Заказ, Неопределено);
			Если НЕ ЕстьЗаказы Тогда
				СтрокаТабличнойЧасти.Резерв = 0;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Заказ = Документы.ЗаказПокупателя.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ ЕстьЗаказы Тогда
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			Если НЕ СтрокаТабличнойЧасти.Заказ.Пустая() Тогда
				ЕстьЗаказы = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Заполнение безналичной оплаты для старых документов
	Если БезналичнаяОплата.Количество() > 0 Тогда
		РаботаСПодарочнымиСертификатами.ПроверитьЗаполнитьБезналичнуюОплатуДокумента(ЭтотОбъект);
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	// До включения автоматических скидок будем считать, что скидки рассчитаны.
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		СкидкиРассчитаны = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ОбработкаПроведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	// Взаиморасчеты
	РасчетыПроведениеДокументов.ИнициализироватьДополнительныеСвойстваДляПроведения(ЭтотОбъект, ДополнительныеСвойства, Отказ, Ложь);
	
	ДобавитьРеквизитыВДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Инициализация данных документа.
	Документы.ЧекККМ.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	УправлениеНебольшойФирмойСервер.ОтразитьЗапасы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДенежныеСредстваВКассахККМ(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыКассовыйМетод(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыНераспределенные(ДополнительныеСвойства, Движения, Отказ);
	
	УправлениеНебольшойФирмойСервер.ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ);
	
	УправлениеНебольшойФирмойСервер.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	
	// ДисконтныеКарты
	УправлениеНебольшойФирмойСервер.ОтразитьПродажиПоДисконтнойКарте(ДополнительныеСвойства, Движения, Отказ);
	// АвтоматическиеСкидки
	УправлениеНебольшойФирмойСервер.ОтразитьПредоставленныеСкидки(ДополнительныеСвойства, Движения, Отказ);
	// Эквайринг
	УправлениеНебольшойФирмойСервер.ОтразитьОплатаПлатежнымиКартами(ДополнительныеСвойства, Движения, Отказ);
	// Заказ покупателя в розничной торговле
	УправлениеНебольшойФирмойСервер.ОтразитьЗаказыПокупателей(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьПлатежныйКалендарь(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьОплатаСчетовИЗаказов(ДополнительныеСвойства, Движения, Отказ);
	
	// СерийныеНомера
	УправлениеНебольшойФирмойСервер.ОтразитьСерийныеНомераГарантии(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьСерийныеНомераОстатки(ДополнительныеСвойства, Движения, Отказ);
	
	// Подарочные сертификаты
	УправлениеНебольшойФирмойСервер.ОтразитьПодарочныеСертификаты(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьОплатаПодарочнымиСертификатами(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьРасчетыСПокупателями(ДополнительныеСвойства, Движения, Отказ);
	
	// Бонусы
	УправлениеНебольшойФирмойСервер.ОтразитьБонусныеБаллы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьНачисленияБонусныхБаллов(ДополнительныеСвойства, Движения, Отказ);
	
	АссистентУправленияПриСрабатыванииСобытия();
	
	// Акцизные марки
	УправлениеНебольшойФирмойСервер.ОтразитьОстаткиАлкогольнойПродукцииЕГАИС(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей.
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.ЧекККМ.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
	//ЭР Несторук С.И. 13.04.2017 14:08:17 {
	Если Заказ.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ES_ЗаказНаДоставку Тогда
		Если ДополнительныеСвойства.ДляПроведения.Свойство("ЧекПробит") Тогда
			Если ДополнительныеСвойства.ДляПроведения.ЧекПробит 
				И НЕ ДополнительныеСвойства.ДляПроведения.Архивный Тогда
				ДвижениеПоES_НоменклатураВЗаказах(Отказ);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	//}ЭР Несторук С.И.
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.ЧекККМ.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭтоВводНаОснованииЗаказНаПродажу(ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ВидОперацииЗаказаПокупателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "ВидОперации");
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("Основание")
		И ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
		Тогда
		ВидОперацииЗаказаПокупателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Основание, "ВидОперации");
	КонецЕсли;
	//ЭР Несторук С.И. 26.12.2018 14:58:57 {
	ИспользоватьСлужбуДоставки = Константы.ES_СлужбаДоставки.Получить();
	Если ИспользоватьСлужбуДоставки Тогда
		Возврат ВидОперацииЗаказаПокупателя = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу ИЛИ
		ВидОперацииЗаказаПокупателя = Перечисления.ВидыОперацийЗаказПокупателя.ES_ЗаказНаДоставку;
	Иначе
	//}ЭР Несторук С.И.
	Возврат ВидОперацииЗаказаПокупателя = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
	//ЭР Несторук С.И. 26.12.2018 15:00:32 {
	КонецЕсли;
	//}ЭР Несторук С.И.
КонецФункции

Процедура ВыполнитьПроверкуОграниченийСертификатов(Отказ)
	
	// Проверка срока действия
	РаботаСПодарочнымиСертификатами.ПроверитьСрокДействия(ЭтотОбъект, "Запасы", Отказ);
	РаботаСПодарочнымиСертификатами.ПроверитьСрокДействия(ЭтотОбъект, "БезналичнаяОплата", Отказ);
	
	// Проверка области действия
	СтруктураДляПроверки = Новый Структура;
	СтруктураДляПроверки.Вставить("Запасы", ЭтотОбъект.Запасы.Выгрузить(,"Номенклатура, Характеристика, Сумма"));
	СтруктураДляПроверки.Вставить("Сертификаты", ЭтотОбъект.БезналичнаяОплата.Выгрузить(
		Новый Структура("ВидОплаты", Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат),
		"ПодарочныйСертификат, Сумма"));
	РаботаСПодарочнымиСертификатами.ПроверитьОбластьДействияСертификатов(СтруктураДляПроверки, Отказ);
	
КонецПроцедуры

Процедура АссистентУправленияПриСрабатыванииСобытия()
	
	Если Не ДополнительныеСвойства.ДляПроведения.ЧекПробит Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
		Возврат;
	КонецЕсли;
	
	Начислено = БонусныеБаллыКНачислению.Итог("КоличествоБонусныхБаллов");
	Списано   = БезналичнаяОплата.Итог("СуммаБонусов");
	
	ЕстьНачисление = Начислено <> 0;
	ЕстьСписание = Списано <> 0;
	
	Событие = Неопределено;
	Если ЕстьНачисление И ЕстьСписание Тогда
		Событие = "СписаниеНачислениеБонусовПриПродаже";
	ИначеЕсли ЕстьНачисление Тогда
		Событие = "НачислениеБонусовПриПродаже";
	ИначеЕсли ЕстьСписание Тогда
		Событие = "СписаниеБонусовПриПродаже";
	КонецЕсли;
	
	Если Событие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("Начислено", Начислено);
	ПараметрыСообщения.Вставить("Списано", Списано);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыСообщения", ПараметрыСообщения);
	
	АссистентУправления.ПриСрабатыванииСобытия(ДисконтнаяКарта, Событие, Ссылка, ДополнительныеПараметры);
	
КонецПроцедуры

Функция ПолучитьТаблицуАвансовПоЗаказу(ПараметрЗаказ)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаРегОстаток) КАК СуммаРегОстаток,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПокупателямиОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.Договор КАК Договор,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.Документ.Дата КАК ДокументДата,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРегОстаток, 0) КАК СуммаРегОстаток,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями.Остатки(
	|				,
	|				Организация = &Организация
	|					И Контрагент = &Контрагент
	|					И Договор = &Договор
	|					И Заказ = &Заказ
	|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПокупателямиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРасчетыСПокупателями.Договор,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ.Дата,
	|		ДвиженияДокументаРасчетыСПокупателями.Заказ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаРег, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаРег, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями КАК ДвиженияДокументаРасчетыСПокупателями
	|	ГДЕ
	|		ДвиженияДокументаРасчетыСПокупателями.Регистратор = &Ссылка
	|		И ДвиженияДокументаРасчетыСПокупателями.Период <= &Период
	|		И ДвиженияДокументаРасчетыСПокупателями.Организация = &Организация
	|		И ДвиженияДокументаРасчетыСПокупателями.Контрагент = &Контрагент
	|		И ДвиженияДокументаРасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|		И ДвиженияДокументаРасчетыСПокупателями.Заказ = &Заказ) КАК РасчетыСПокупателямиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата,
	|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаУчета) КАК СуммаУчета,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) КАК СуммаРасчетов,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаПлатежа) КАК СуммаПлатежа,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРег) КАК СуммаРег,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРег, 0) = 0
	|				ТОГДА РасчетыСПокупателямиОстатки.СуммаУчета / ВЫБОР
	|						КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРасчетов, 0) <> 0
	|							ТОГДА РасчетыСПокупателямиОстатки.СуммаРасчетов
	|						ИНАЧЕ 1
	|					КОНЕЦ * (КурсыВалютыУчета.Курс / КурсыВалютыУчета.Кратность)
	|			ИНАЧЕ РасчетыСПокупателямиОстатки.СуммаРег / ВЫБОР
	|					КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРасчетов, 0) <> 0
	|						ТОГДА РасчетыСПокупателямиОстатки.СуммаРасчетов
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК Курс,
	|	1 КАК Кратность
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаУчета,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаРасчетов,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) * КурсыВалютыУчета.Курс * КурсыВалютыДокумента.Кратность / (КурсыВалютыДокумента.Курс * КурсыВалютыУчета.Кратность) КАК СуммаПлатежа,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРегОстаток, 0) КАК СуммаРег
	|	ИЗ
	|		ВременнаяТаблицаРасчетыСПокупателямиОстатки КАК РасчетыСПокупателямиОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаДокумента) КАК КурсыВалютыДокумента
	|			ПО (ИСТИНА)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУчета) КАК КурсыВалютыУчета
	|			ПО (ИСТИНА)) КАК РасчетыСПокупателямиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУчета) КАК КурсыВалютыУчета
	|		ПО (ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата,
	|	РасчетыСПокупателямиОстатки.ВалютаРасчетов,
	|	КурсыВалютыУчета.Курс,
	|	КурсыВалютыУчета.Кратность
	|
	|ИМЕЮЩИЕ
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата";
	
	Запрос.УстановитьПараметр("Организация", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Заказ", ПараметрЗаказ);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("ВалютаРасчетов", ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	РезультатТЗ = Результат.Выгрузить();
	
	Возврат РезультатТЗ;
	
КонецФункции

Процедура ПроверитьТоварныйСоставПредоплаты(Отказ)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Запасы.Номенклатура КАК Номенклатура,
	|	Запасы.Характеристика КАК Характеристика,
	|	Запасы.Количество КАК Количество,
	|	Запасы.Всего КАК Всего
	|ПОМЕСТИТЬ ВТ_Запасы
	|ИЗ
	|	&Запасы КАК Запасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Запасы.Номенклатура КАК Номенклатура,
	|	ВТ_Запасы.Характеристика КАК Характеристика,
	|	-ВТ_Запасы.Количество КАК Количество,
	|	-ВТ_Запасы.Всего КАК Всего
	|ИЗ
	|	ВТ_Запасы КАК ВТ_Запасы");
	Запрос.УстановитьПараметр("Запасы", Запасы);
	ТаблицаЗапасы = Запрос.Выполнить().Выгрузить();
	
	МассивОтличающихсяЧеков = Новый Массив;
	Для Каждого СтрокаПредоплаты Из Предоплата Цикл
		
		Если ТипЗнч(СтрокаПредоплаты.Документ) <> Тип("ДокументСсылка.ЧекККМ") Тогда
			Продолжить;
		КонецЕсли;
			
		Если СтрокаПредоплаты.Документ.Запасы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
			
		ТаблицаЧекаПредоплаты = СтрокаПредоплаты.Документ.Запасы.Выгрузить(, "Номенклатура, Характеристика, Количество, Всего");
		
		ТаблицаСравнения = ТаблицаЗапасы.Скопировать();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаЧекаПредоплаты, ТаблицаСравнения);
		
		ТаблицаСравнения.Свернуть("Номенклатура, Характеристика", "Количество, Всего");
		
		Если ТаблицаСравнения.Итог("Количество") <> 0
			ИЛИ ТаблицаСравнения.Итог("Всего") <> 0 Тогда
			
			МассивОтличающихсяЧеков.Добавить(СтрокаПредоплаты.Документ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из МассивОтличающихсяЧеков Цикл
		
		ТекстСообщения = НСтр("ru = 'Товарный состав документа предоплаты %1 отличается от текущего'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ЭлементМассива);
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			ТекстСообщения,
			,,,
			Отказ
		);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭР_ДанныеИзЗаказаНаДоставку(МассивЗаказов, ДатаДокумента, ИспользоватьНоменклатуруДляЧеков = Ложь, НоменклатураДляЧека)
	//ЭР Несторук С.И. 30.03.2017 18:49:19 {
	ДопТекст =" ВЫБРАТЬ 
					|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтроки,
	               |	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	               |	ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	               |	ВЫБОР
	               |		КОГДА ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ТипНоменклатурыЗапас,
	               |	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	               |			ТОГДА 1
	               |		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	               |	КОНЕЦ КАК Коэффициент,
	               |	ЗаказПокупателяЗапасы.Количество КАК Количество,
	               |	ЗаказПокупателяЗапасы.Партия КАК Партия,
	               |	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ЗаказПокупателяЗапасы.Цена КАК Цена,
	               |	ЗаказПокупателяЗапасы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	               |	ЗаказПокупателяЗапасы.Сумма КАК Сумма,
	               |	ЗаказПокупателяЗапасы.СтавкаНДС КАК СтавкаНДС,
	               |	ЗаказПокупателяЗапасы.СуммаНДС КАК СуммаНДС,
	               |	ЗаказПокупателяЗапасы.Всего КАК Всего,
	               |	ЗаказПокупателяЗапасы.Ссылка КАК Заказ,
	               |	ЗаказПокупателяЗапасы.Содержание КАК ES_Содержание,
	               |	ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки,
	               |	ЗаказПокупателяЗапасы.СуммаАвтоматическойСкидки,
	               |	ЗаказПокупателяЗапасы.КлючСвязи,
	               |	ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки1,
	               |	ЗаказПокупателяЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки1,
	               |	ЗаказПокупателяЗапасы.Ссылка.ВалютаДокумента,
	               |	ЗаказПокупателяЗапасы.Ссылка.ES_НомерНакладной,
				   |	ЛОЖЬ КАК ES_ЭтоГруз,
				   |	ЛОЖЬ КАК МаркируемыйПродукция,
	               |	КурсыВалютСрезПоследних.Курс,
	               |	КурсыВалютСрезПоследних.Кратность
				   
	               |ИЗ
	               |	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	               |		ПО ЗаказПокупателяЗапасы.Ссылка.ВалютаДокумента = КурсыВалютСрезПоследних.Валюта
	               |ГДЕ
	               |	ЗаказПокупателяЗапасы.Ссылка В(&МассивЗаказов)
	               |	И (ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	               |			ИЛИ ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |";
	Если НЕ МассивЗаказов[0].ES_ЧекНаОбщуюСумму Тогда
		ДопТекст = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;   // "+ДопУсловие+"
	Если ИспользоватьНоменклатуруДляЧеков = Ложь Тогда
		ТекстЗапроса = ""+ДопТекст+"ВЫБРАТЬ
		                           |	0 КАК НомерСтроки,
		                           |	ES_НоменклатураВЗаказахСрезПоследних.Номенклатура КАК Номенклатура,
		                           |	ES_НоменклатураВЗаказахСрезПоследних.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		                           |	ВЫБОР
		                           |		КОГДА ES_НоменклатураВЗаказахСрезПоследних.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		                           |			ТОГДА ИСТИНА
		                           |		ИНАЧЕ ЛОЖЬ
		                           |	КОНЕЦ КАК ТипНоменклатурыЗапас,
		                           |	ES_НоменклатураВЗаказахСрезПоследних.Характеристика КАК Характеристика,
		                           |	1 КАК Коэффициент,
		                           |	ЕСТЬNULL(ES_НоменклатураВыданная.КоличествоФакт, 0) КАК Количество,
		                           |	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяССылка) КАК Партия,
		                           |	ES_НоменклатураВЗаказахСрезПоследних.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		                           |	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Цена, 0) КАК Цена,
		                           |	0 КАК ПроцентСкидкиНаценки,
		                           |	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Цена, 0) * ВЫБОР
		                           |		КОГДА ЕСТЬNULL(ES_НоменклатураВыданная.КоличествоФакт, 0) = 0
		                           |			ТОГДА ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Количество, 0)
		                           |		ИНАЧЕ ЕСТЬNULL(ES_НоменклатураВыданная.КоличествоФакт, 0)
		                           |	КОНЕЦ КАК Сумма,
		                           |	ВЫБОР
		                           |		КОГДА ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.СтавкаНДС, ЗНАЧЕНИЕ(справочник.СтавкиНДС.ПустаяСсылка)) = ЗНАЧЕНИЕ(справочник.СтавкиНДС.ПустаяСсылка)
		                           |			ТОГДА СтавкиНДС.Ссылка
		                           |		ИНАЧЕ ES_НоменклатураВЗаказахСрезПоследних.СтавкаНДС
		                           |	КОНЕЦ КАК СтавкаНДС,
		                           |	0 КАК СуммаНДС,
		                           |	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Цена, 0) * ЕСТЬNULL(ES_НоменклатураВыданная.КоличествоФакт, 0) КАК Всего,
		                           |	ES_НоменклатураВЗаказахСрезПоследних.ДокументДоставки КАК Заказ,
		                           |	ES_НоменклатураВЗаказахСрезПоследних.Содержание КАК ES_Содержание,
		                           |	0 КАК ПроцентАвтоматическойСкидки,
		                           |	0 КАК СуммаАвтоматическойСкидки,
		                           |	0 КАК КлючСвязи,
		                           |	0 КАК ПроцентАвтоматическойСкидки1,
		                           |	0 КАК СуммаАвтоматическойСкидки1,
		                           |	ES_НоменклатураВЗаказахСрезПоследних.ДокументДоставки.ВалютаДокумента КАК ВалютаДокумента,
		                           |	ES_НоменклатураВЗаказахСрезПоследних.ДокументДоставки.ES_НомерНакладной КАК ES_НомерНакладной,
		                           |	ИСТИНА КАК ES_ЭтоГруз,
		                           |	ЛОЖЬ КАК МаркируемыйПродукция,
		                           |	КурсыВалютСрезПоследних.Курс КАК Курс,
		                           |	КурсыВалютСрезПоследних.Кратность КАК Кратность,
		                           |	ЛОЖЬ КАК ТабачнаяПродукция,
		                           |	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК НоменклатураНабора
		                           |ИЗ
		                           |	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних,
		                           |	РегистрСведений.ES_НоменклатураВЗаказах.СрезПоследних(, ДокументДоставки В (&МассивЗаказов)) КАК ES_НоменклатураВЗаказахСрезПоследних
		                           |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ES_НоменклатураВыданная КАК ES_НоменклатураВыданная
		                           |		ПО (ES_НоменклатураВыданная.Заказ = ES_НоменклатураВЗаказахСрезПоследних.ДокументДоставки)
		                           |			И (ES_НоменклатураВыданная.Номенклатура = ES_НоменклатураВЗаказахСрезПоследних.Номенклатура)
		                           |			И ES_НоменклатураВЗаказахСрезПоследних.Содержание = ES_НоменклатураВыданная.Содержание
		                           |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтавкиНДС КАК СтавкиНДС
		                           |		ПО ES_НоменклатураВЗаказахСрезПоследних.Номенклатура.ВидСтавкиНДС = СтавкиНДС.ВидСтавкиНДС
		                           |ГДЕ
		                           |	ЕСТЬNULL(ES_НоменклатураВыданная.КоличествоФакт, 0) > 0
		                           |
		                           |УПОРЯДОЧИТЬ ПО
		                           |	НомерСтроки";
	Иначе
		ТекстЗапроса = 
		""+ДопТекст+ "ВЫБРАТЬ
		             |	0 КАК НомерСтроки,
		             |	&НоменклатураДляЧека КАК Номенклатура,
		             |	ВЫРАЗИТЬ(&НоменклатураДляЧека КАК Справочник.Номенклатура).ТипНоменклатуры КАК ТипНоменклатуры,
		             |	ВЫБОР
		             |		КОГДА ВЫРАЗИТЬ(&НоменклатураДляЧека КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		             |			ТОГДА ИСТИНА
		             |		ИНАЧЕ ЛОЖЬ
		             |	КОНЕЦ КАК ТипНоменклатурыЗапас,
		             |	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
		             |	1 КАК Коэффициент,
		             |	1 КАК Количество,
		             |	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяССылка) КАК Партия,
		             |	ВЫРАЗИТЬ(&НоменклатураДляЧека КАК Справочник.Номенклатура).ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		             |	ВЫБОР
		             |		КОГДА ЕСТЬNULL(ES_НоменклатураВыданнаяОбороты.НПФактОборот, 0) = 0
		             |			ТОГДА ЕСТЬNULL(ЗаказПокупателя.ES_НППлан, 0)
		             |		ИНАЧЕ ЕСТЬNULL(ES_НоменклатураВыданнаяОбороты.НПФактОборот, 0)
		             |	КОНЕЦ КАК Цена,
		             |	0 КАК ПроцентСкидкиНаценки,
		             |	ВЫБОР
		             |		КОГДА ЕСТЬNULL(ES_НоменклатураВыданнаяОбороты.НПФактОборот, 0) = 0
		             |			ТОГДА ЕСТЬNULL(ЗаказПокупателя.ES_НППлан, 0)
		             |		ИНАЧЕ ЕСТЬNULL(ES_НоменклатураВыданнаяОбороты.НПФактОборот, 0)
		             |	КОНЕЦ КАК Сумма,
		             |	ВЫРАЗИТЬ(&НоменклатураДляЧека КАК Справочник.Номенклатура) КАК СтавкаНДС,
		             |	0 КАК СуммаНДС,
		             |	ВЫБОР
		             |		КОГДА ЕСТЬNULL(ES_НоменклатураВыданнаяОбороты.НПФактОборот, 0) = 0
		             |			ТОГДА ЕСТЬNULL(ЗаказПокупателя.ES_НППлан, 0)
		             |		ИНАЧЕ ЕСТЬNULL(ES_НоменклатураВыданнаяОбороты.НПФактОборот, 0)
		             |	КОНЕЦ КАК Всего,
		             |	ЗаказПокупателя.Ссылка КАК Заказ,
		             |	"""" КАК ES_Содержание,
		             |	0 КАК ПроцентАвтоматическойСкидки,
		             |	0 КАК СуммаАвтоматическойСкидки,
		             |	0 КАК КлючСвязи,
		             |	0 КАК ПроцентАвтоматическойСкидки1,
		             |	0 КАК СуммаАвтоматическойСкидки1,
		             |	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
		             |	ЗаказПокупателя.ES_НомерНакладной КАК ES_НомерНакладной,
		             |	ИСТИНА КАК ES_ЭтоГруз,
		             |	ЛОЖЬ КАК МаркируемыйПродукция,
		             |	КурсыВалютСрезПоследних.Курс КАК Курс,
		             |	КурсыВалютСрезПоследних.Кратность КАК Кратность
		             |ИЗ
		             |	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних,
		             |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ES_НоменклатураВыданная.Обороты КАК ES_НоменклатураВыданнаяОбороты
		             |		ПО ЗаказПокупателя.Ссылка = ES_НоменклатураВыданнаяОбороты.Заказ
		             |ГДЕ
		             |	ЗаказПокупателя.Ссылка В(&МассивЗаказов)
		             |
		             |УПОРЯДОЧИТЬ ПО
		             |	НомерСтроки";
	КонецЕсли;
 
	//НоменклатураДляЧека = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.НоменклатураДляЧека);
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НоменклатураДляЧека",НоменклатураДляЧека);
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Запрос.УстановитьПараметр("ДатаДокумента", ?(ЗначениеЗаполнено(ДатаДокумента), ДатаДокумента, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("СтавкаНДС", Справочники.СтавкиНДС.НайтиПоНаименованию("0%"));

	Возврат Запрос.Выполнить();
	
	//}ЭР Несторук С.И.	
КонецФункции

Процедура ДвижениеПоES_НоменклатураВЗаказах(Отказ)
	//ЭР Несторук С.И. 13.04.2017 14:09:35 {
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМЗапасы.Номенклатура КАК Номенклатура,
	|	СУММА(ЧекККМЗапасы.Количество) КАК Количество,
	|	ЧекККМЗапасы.Заказ КАК Заказ,
	|	ЧекККМЗапасы.ES_Содержание КАК ES_Содержание
	|ПОМЕСТИТЬ ВТ_Грузы
	|ИЗ
	|	Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
	|ГДЕ
	|	ЧекККМЗапасы.Ссылка = &Ссылка
	|	И ЧекККМЗапасы.ES_ЭтоГруз = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМЗапасы.Заказ,
	|	ЧекККМЗапасы.Номенклатура,
	|	ЧекККМЗапасы.ES_Содержание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Грузы.Номенклатура КАК Номенклатура,
	|	ВТ_Грузы.Заказ КАК Заказ,
	|	ЕСТЬNULL(ВТ_Грузы.Количество, 0) КАК Количество,
	|	ЕСТЬNULL(ES_РННоменклатураВЗаказахОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	ВТ_Грузы.ES_Содержание КАК Содержание
	|ИЗ
	|	ВТ_Грузы КАК ВТ_Грузы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ES_РННоменклатураВЗаказах.Остатки(
	|				,
	|				Заказ В
	|					(ВЫБРАТЬ
	|						ВТ_Грузы.Заказ
	|					ИЗ
	|						ВТ_Грузы КАК ВТ_Грузы)) КАК ES_РННоменклатураВЗаказахОстатки
	|		ПО ВТ_Грузы.Заказ = ES_РННоменклатураВЗаказахОстатки.Заказ
	|			И ВТ_Грузы.Номенклатура = ES_РННоменклатураВЗаказахОстатки.Номенклатура
	|			И ВТ_Грузы.ES_Содержание = ES_РННоменклатураВЗаказахОстатки.Содержание";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Движения.ES_РННоменклатураВЗаказах.Записывать = Истина;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Количество > Выборка.КоличествоОстаток Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ""+ Выборка.Номенклатура +" "+ выборка.Содержание+ " доступно к списанию: " + Выборка.КоличествоОстаток;
			Сообщение.Сообщить();
			Продолжить;
		Иначе
			
			Движение = Движения.ES_РННоменклатураВЗаказах.ДобавитьРасход();
			
			Движение.Период = Дата;
			Движение.Заказ = Выборка.Заказ;
			Движение.Номенклатура = Выборка.Номенклатура;
			Движение.Содержание	= Выборка.Содержание;
			Движение.Количество = Выборка.Количество;
		КонецЕсли;		
	КонецЦикла;
	//}ЭР Несторук С.И.	
КонецПроцедуры

#КонецОбласти

#КонецЕсли