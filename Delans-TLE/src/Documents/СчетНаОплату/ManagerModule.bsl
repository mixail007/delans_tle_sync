#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Контрагент)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ПрограммныйИнтефейс

// Перезаполняет ТЧ Запасы на основании ТЧ РасшифровкаБиллинга.
//
// Параметры:
//  СчетНаОплату - Структура, СправочникОбъект - Объект документа СчетНаОплату.
//
Процедура ПерезаполнитьЗапасыПоРасшифровкеБиллинга(СчетНаОплату) Экспорт
	
	СчетНаОплату.Запасы.Очистить();
	
	РасшифровкаЗапасов = СчетНаОплату.РасшифровкаБиллинга.Выгрузить();
	РасшифровкаЗапасов.Колонки.Добавить("ПредставлениеВСчетеЕдиницаИзмерения", 
		Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения,СправочникСсылка.КлассификаторЕдиницИзмерения")
	);
	
	ЕстьНезаполненныеСтрокиВРасшифровке = Ложь;
	Для каждого Стр Из РасшифровкаЗапасов Цикл
		
		Если Стр.Количество = 0
			ИЛИ Стр.Цена = 0
			ИЛИ Стр.Сумма = 0
			ИЛИ ТипЗнч(Стр.ОбъектДоговораОбслуживания) = Тип("ПланСчетовСсылка.Управленческий") 
				И НЕ ЗначениеЗаполнено(Стр.ПредставлениеВСчете) Тогда
			
			ЕстьНезаполненныеСтрокиВРасшифровке = Истина;
			Прервать;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Стр.ПредставлениеВСчете) Тогда
			Стр.ПредставлениеВСчете = Стр.ОбъектДоговораОбслуживания;
			Стр.ПредставлениеВСчетеЕдиницаИзмерения = Стр.ЕдиницаИзмерения;
		Иначе
			Стр.ПредставлениеВСчетеЕдиницаИзмерения = Стр.ПредставлениеВСчете.ЕдиницаИзмерения;
			Стр.Характеристика = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьНезаполненныеСтрокиВРасшифровке Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаЗапасов.Свернуть("ПредставлениеВСчете,ПредставлениеВСчетеЕдиницаИзмерения,Характеристика,Содержание", "Количество,Сумма");
	
	Для каждого Стр Из РасшифровкаЗапасов Цикл
		
		НоваяСтрока = СчетНаОплату.Запасы.Добавить();
		НоваяСтрока.Номенклатура     = Стр.ПредставлениеВСчете;
		НоваяСтрока.Характеристика   = Стр.Характеристика;
		НоваяСтрока.Содержание       = Стр.Содержание;
		НоваяСтрока.ЕдиницаИзмерения = Стр.ПредставлениеВСчетеЕдиницаИзмерения;
		НоваяСтрока.Количество       = Стр.Количество;
		НоваяСтрока.Цена             = Стр.Сумма / Стр.Количество;
		НоваяСтрока.Сумма            = Стр.Сумма;
		
		СтруктураДанные = Новый Структура();
		
		СтруктураДанные.Вставить("Организация",      СчетНаОплату.Организация);
		СтруктураДанные.Вставить("ДатаОбработки",    СчетНаОплату.Дата);
		СтруктураДанные.Вставить("ВидЦен",           СчетНаОплату.ВидЦен);
		СтруктураДанные.Вставить("ВалютаДокумента",  СчетНаОплату.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", СчетНаОплату.СуммаВключаетНДС);
		СтруктураДанные.Вставить("Номенклатура",     НоваяСтрока.Номенклатура);
		СтруктураДанные.Вставить("Характеристика",   Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		СтруктураДанные.Вставить("Коэффициент",      1);
		СтруктураДанные.Вставить("НалогообложениеНДС", СчетНаОплату.НалогообложениеНДС);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", СчетНаОплату.ВидСкидкиНаценки);
		
		// ДисконтныеКарты
		СтруктураДанные.Вставить("ДисконтнаяКарта", СчетНаОплату.ДисконтнаяКарта);
		СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", СчетНаОплату.ПроцентСкидкиПоДисконтнойКарте);		
		// Конец ДисконтныеКарты
		
		СтруктураДанные = РаботаСФормойДокумента.ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		НоваяСтрока.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
		НоваяСтрока.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		
		Если НоваяСтрока.ПроцентСкидкиНаценки = 100 Тогда
			НоваяСтрока.Сумма = 0;
		ИначеЕсли НоваяСтрока.ПроцентСкидкиНаценки <> 0
				И НоваяСтрока.Количество <> 0 Тогда
			НоваяСтрока.Сумма = НоваяСтрока.Сумма * (1 - НоваяСтрока.ПроцентСкидкиНаценки / 100);
		КонецЕсли;
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
		
		НоваяСтрока.СуммаНДС = ?(СчетНаОплату.СуммаВключаетНДС, 
										  НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100),
										  НоваяСтрока.Сумма * СтавкаНДС / 100);
		
		НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(СчетНаОплату.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
		
		// АвтоматическиеСкидки.
		НоваяСтрока.ПроцентАвтоматическойСкидки = 0;
		НоваяСтрока.СуммаАвтоматическойСкидки = 0;
		// Конец АвтоматическиеСкидки
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет ТЧ РасшифровкаБиллинга на основании ТЧ Запасы.
// Используется при вводе на основании.
//
Процедура ЗаполнитьРасшифровкуБиллинга(СчетНаОплату) Экспорт
	
	СчетНаОплату.РасшифровкаБиллинга.Очистить();
	Для каждого Стр Из СчетНаОплату.Запасы Цикл
		
		НоваяСтрока = СчетНаОплату.РасшифровкаБиллинга.Добавить();
		НоваяСтрока.ОбъектДоговораОбслуживания = Стр.Номенклатура;
		НоваяСтрока.Характеристика             = Стр.Характеристика;
		НоваяСтрока.ЕдиницаИзмерения = Стр.ЕдиницаИзмерения;
		НоваяСтрока.Количество       = Стр.Количество;
		НоваяСтрока.Цена             = Стр.Цена;
		НоваяСтрока.Сумма            = Стр.Цена * Стр.Количество;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет во временную таблицу все позиции таблицы "Запасы"
//
// Параметры:
//  СчетаНаОплату                  - ДокументСсылка.СчетНаОплату, Массив
// 
// Возвращаемое значение:
//   - МенеджерВременныхТаблиц
//
Функция ВТСчетНаОплатуЗапасы(Знач СчетаНаОплату) Экспорт
	
	Если ТипЗнч(СчетаНаОплату) <> Тип("Массив") Тогда
		СчетаНаОплату = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СчетаНаОплату);
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"Выбрать разрешенные
	|	СчетНаОплатуЗапасы.Ссылка,
	|	СчетНаОплатуЗапасы.Номенклатура,
	|	СчетНаОплатуЗапасы.СтавкаНДС,
	|	СчетНаОплатуЗапасы.СуммаНДС,
	|	СчетНаОплатуЗапасы.Всего
	|ПОМЕСТИТЬ ВТСчетНаОплатуЗапасы
	|ИЗ
	|	Документ.СчетНаОплату.Запасы КАК СчетНаОплатуЗапасы
	|ГДЕ
	|	СчетНаОплатуЗапасы.Ссылка В(&СчетаНаОплату)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетНаОплату.Ссылка,
	|	СчетНаОплату.НоменклатураДоставки,
	|	СчетНаОплату.СтавкаНДСДоставки,
	|	СчетНаОплату.СуммаНДСДоставки,
	|	СчетНаОплату.СтоимостьДоставки
	|ИЗ
	|	Документ.СчетНаОплату КАК СчетНаОплату
	|ГДЕ
	|	СчетНаОплату.Ссылка В(&СчетаНаОплату)
	|	И СчетНаОплату.НоменклатураДоставки <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)");
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СчетаНаОплату", СчетаНаОплату);
	Запрос.Выполнить();
	
	Возврат Запрос.МенеджерВременныхТаблиц;
	
КонецФункции

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

// Добавляет во временную таблицу все позиции таблицы "Запасы".
//
// Параметры:
//  Счета                       - ДокументСсылка.СчетНаОплату, Массив,
//  ВключитьНоменклатуруДоставки - Булево - включать в выборку позицию с номенклатурой доставки.
// 
Процедура ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(Знач Счета, МенеджерВременныхТаблиц, ВключитьНоменклатуруДоставки) Экспорт
	
	Если ТипЗнч(Счета) <> Тип("Массив") Тогда
		Счета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Счета);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетНаОплатуЗапасы.Ссылка КАК Ссылка,
	|	МАКСИМУМ(СчетНаОплатуЗапасы.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТМаксНомерСтрокиЗапасы
	|ИЗ
	|	Документ.СчетНаОплату.Запасы КАК СчетНаОплатуЗапасы
	|ГДЕ
	|	СчетНаОплатуЗапасы.Ссылка В(&Ссылки)
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетНаОплатуЗапасы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетНаОплатуЗапасы.Ссылка КАК Ссылка,
	|	СчетНаОплатуЗапасы.НомерСтроки КАК НомерСтроки,
	|	СчетНаОплатуЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА СчетНаОплатуЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|				ИЛИ СчетНаОплатуЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТипНоменклатурыЗапас,
	|	СчетНаОплатуЗапасы.Характеристика КАК Характеристика,
	|	СчетНаОплатуЗапасы.Партия КАК Партия,
	|	СчетНаОплатуЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СчетНаОплатуЗапасы.Цена КАК Цена,
	|	СчетНаОплатуЗапасы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	СчетНаОплатуЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	СчетНаОплатуЗапасы.Сумма КАК Сумма,
	|	СчетНаОплатуЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	СчетНаОплатуЗапасы.СуммаНДС КАК СуммаНДС,
	|	СчетНаОплатуЗапасы.Всего КАК Всего,
	|	ВЫБОР
	|		КОГДА СчетНаОплатуЗапасы.Ссылка.ДокументОснование ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА СчетНаОплатуЗапасы.Ссылка.ДокументОснование
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК Заказ,
	|	СчетНаОплатуЗапасы.Содержание КАК Содержание,
	|	СчетНаОплатуЗапасы.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	СчетНаОплатуЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	СчетНаОплатуЗапасы.Количество КАК Количество,
	|	СчетНаОплатуЗапасы.КлючСвязи КАК КлючСвязи,
	|	СчетНаОплатуЗапасы.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СчетНаОплатуЗапасы.Вес КАК Вес,
	|	СчетНаОплатуЗапасы.Объем КАК Объем,
	|	СчетНаОплатуЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	СчетНаОплатуЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	СчетНаОплатуЗапасы.ДоляСтоимости КАК ДоляСтоимости
	|ПОМЕСТИТЬ ВТСчетНаОплатуЗапасы
	|ИЗ
	|	Документ.СчетНаОплату.Запасы КАК СчетНаОплатуЗапасы
	|ГДЕ
	|	СчетНаОплатуЗапасы.Ссылка В(&Ссылки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетНаОплату.Ссылка,
	|	ЕСТЬNULL(ВТМаксНомерСтрокиЗапасы.НомерСтроки, 0) + 1,
	|	СчетНаОплату.НоменклатураДоставки,
	|	ЛОЖЬ,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка),
	|	СчетНаОплату.НоменклатураДоставки.ЕдиницаИзмерения,
	|	СчетНаОплату.СтоимостьДоставки,
	|	0,
	|	0,
	|	СчетНаОплату.СтоимостьДоставки,
	|	СчетНаОплату.СтавкаНДСДоставки,
	|	СчетНаОплату.СуммаНДСДоставки,
	|	СчетНаОплату.СтоимостьДоставки,
	|	ВЫБОР
	|		КОГДА СчетНаОплату.ДокументОснование ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА СчетНаОплату.ДокументОснование
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	"""",
	|	0,
	|	0,
	|	1,
	|	0,
	|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка),
	|	0,
	|	0,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	0
	|ИЗ
	|	Документ.СчетНаОплату КАК СчетНаОплату
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМаксНомерСтрокиЗапасы КАК ВТМаксНомерСтрокиЗапасы
	|		ПО (ВТМаксНомерСтрокиЗапасы.Ссылка = СчетНаОплату.Ссылка)
	|ГДЕ
	|	СчетНаОплату.Ссылка В(&Ссылки)
	|	И &ВключитьНоменклатуруДоставки
	|	И СчетНаОплату.НоменклатураДоставки <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Ссылки", Счета);
	Запрос.УстановитьПараметр("ВключитьНоменклатуруДоставки", ВключитьНоменклатуруДоставки);
	РезультатЗапроса = Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура формирования таблицы платежного календаря.
//
// Параметры:
//	ДокументСсылка - ДокументСсылка.ПриходДенежныхСредствПлан - Текущий документ
//	ДополнительныеСвойства - ДополнительныеСвойства - Дополнительные свойства документа
//
Процедура СформироватьТаблицаПлатежныйКалендарь(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	
	Запрос.Текст =
	"Выбрать разрешенные
	|	ТаблицаДокумента.ДатаОплаты КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Ссылка.ТипДенежныхСредств,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыУтвержденияПлатежей.Утвержден) КАК СтатусУтвержденияПлатежа,
	|	ТаблицаДокумента.Ссылка КАК СчетНаОплату,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей) КАК Статья,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные)
	|			ТОГДА ТаблицаДокумента.Ссылка.Касса
	|		КОГДА ТаблицаДокумента.Ссылка.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
	|			ТОГДА ТаблицаДокумента.Ссылка.БанковскийСчет
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК БанковскийСчетКасса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|			ТОГДА ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов
	|		ИНАЧЕ ТаблицаДокумента.Ссылка.ВалютаДокумента
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.СуммаОплаты * ВЫБОР
	|						КОГДА КурсыВалютРасчетов.Курс <> 0
	|								И КурсыВалютДокумента.Кратность <> 0
	|							ТОГДА КурсыВалютДокумента.Курс * КурсыВалютРасчетов.Кратность / (ЕСТЬNULL(КурсыВалютРасчетов.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1))
	|						ИНАЧЕ 1
	|					КОНЕЦ КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ТаблицаДокумента.СуммаОплаты
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	Документ.СчетНаОплату.ПлатежныйКалендарь КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютРасчетов
	|		ПО ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютДокумента
	|		ПО ТаблицаДокумента.Ссылка.ВалютаДокумента = КурсыВалютДокумента.Валюта
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПлатежныйКалендарь", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПлатежныйКалендарь()

// Процедура формирования таблицы счетов на оплату.
//
// Параметры:
//	ДокументСсылка - ДокументСсылка.ПриходДенежныхСредствПлан - Текущий документ
//	ДополнительныеСвойства - ДополнительныеСвойства - Дополнительные свойства документа
//
Процедура СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	
	Запрос.Текст =
	"Выбрать разрешенные
	|	ТаблицаДокумента.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка КАК СчетНаОплату,
	|	ТаблицаДокумента.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.СчетНаОплату КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Контрагент.ВестиУчетОплатыПоСчетам
	|	И ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.СуммаДокумента <> 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаСчетовИЗаказов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаОплатаСчетовИЗаказов()

// Формирует таблицу данных документа.
//
// Параметры:
//	ДокументСсылка - ДокументСсылка.ПриходДенежныхСредствПлан - Текущий документ
//	СтруктураДополнительныеСвойства - ДополнительныеСвойства - Дополнительные свойства документа
//	
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	СформироватьТаблицаПлатежныйКалендарь(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылка, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

#КонецОбласти

#Область ЗагрузкаДанныхИзВнешнегоИсточника

Процедура ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт
	
	//
	// Для группы полей действует правило: хотя бы одно поле в группе должно быть выбрано в колонках
	//
	
	ОписаниеТиповСтрока25 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25));
	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	ОписаниеТиповСтрока150 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(150));
	ОписаниеТиповСтрока200 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200));
	ОписаниеТиповСтрока1000 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000));
	ОписаниеТиповЧисло15_2 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло15_3 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Штрихкод", "Штрихкод", ОписаниеТиповСтрока200, ОписаниеТиповКолонка, "Номенклатура", 1, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Артикул", "Артикул", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Номенклатура", 2, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименование", "Номенклатура (наименование)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Номенклатура", 3, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименованиеПолное","Номенклатура (полное наименование)", ОписаниеТиповСтрока1000, ОписаниеТиповКолонка, "Номенклатура", 5, , Истина);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Содержание", "Содержание", ОписаниеТиповСтрока1000, ОписаниеТиповСтрока1000, , , , , НастройкиЗагрузкиДанных.СодержаниеВидимо);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Характеристика", "Характеристика (наименование)", ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Партия", "Партия (наименование)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Количество", "Количество", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_3, , , Истина);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения, СправочникСсылка.ЕдиницыИзмерения");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЕдиницаИзмерения", "Ед. изм.", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, , , , , ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения"));
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Цена", "Цена", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2, , , Истина);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтавкаНДС", "Ставка НДС", ОписаниеТиповСтрока50, ОписаниеТиповКолонка);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СуммаНДС", "Сумма НДС", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2);
	
КонецПроцедуры

Процедура ПриОпределенииОбразцовЗагрузкиДанных(НастройкиЗагрузкиДанных, УникальныйИдентификатор) Экспорт
	
	Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанных_xlsx");
	ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
	
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанных_mxl");
	
	Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанных_csv");
	ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
	
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника(ТаблицаСопоставленияДанных, НастройкиЗагрузкиДанных) Экспорт
	
	ПолноеИмяОбъектаЗаполнения = НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;
	
	// ТаблицаСопоставленияДанных - Тип ДанныеФормыКоллекция
	Для каждого СтрокаТаблицыФормы Из ТаблицаСопоставленияДанных Цикл
		
		// Номенклатура по ШтрихКоду, Артикулу, Наименованию, НаименованиеПолное
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуру(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Артикул, СтрокаТаблицыФормы.НоменклатураНаименование, СтрокаТаблицыФормы.НоменклатураНаименованиеПолное);
		
		// Содержание
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.Содержание, СтрокаТаблицыФормы.Содержание_ВходящиеДанные);
		
		// Характеристика по Владельцу и Наименованию
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьХарактеристику(СтрокаТаблицыФормы.Характеристика, СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Характеристика_ВходящиеДанные);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Партия по Владельцу и Наименованию
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьПартию(СтрокаТаблицыФормы.Партия, СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Партия_ВходящиеДанные);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Количество
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Количество, СтрокаТаблицыФормы.Количество_ВходящиеДанные, 1);
		
		// ЕдиницыИзмерения по Наименованию (так же рассмотреть возможность прикрутить пользовательские ЕИ)
		ЗначениеПоУмолчанию = ?(ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура), СтрокаТаблицыФормы.Номенклатура.ЕдиницаИзмерения, Справочники.КлассификаторЕдиницИзмерения.шт);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЕдиницыИзмерения(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.ЕдиницаИзмерения, СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// Цена
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Цена, СтрокаТаблицыФормы.Цена_ВходящиеДанные, 1);
		
		// СтавкаНДС по наименованию
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтавкуНДС(СтрокаТаблицыФормы.СтавкаНДС, СтрокаТаблицыФормы.СтавкаНДС_ВходящиеДанные, Неопределено);
		
		// СуммаНДС
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.СуммаНДС, СтрокаТаблицыФормы.СуммаНДС_ВходящиеДанные, 0);
		
		ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения = "") Экспорт
	
	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	
	СтрокаТаблицыФормы[ИмяСлужебногоПоля] = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура)
		И НЕ СтрокаТаблицыФормы.Номенклатура.ЭтоНабор // Исключая наборы 
		И (СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас 
			ИЛИ СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга)
		И СтрокаТаблицыФормы.Количество <> 0;
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

Функция УниверсальныйЗапросПоДаннымДокумента(МассивОбъектов, ИспользоватьФаксимиле)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ИспользоватьФаксимиле", ИспользоватьФаксимиле);
	
	Запрос.Текст = 
	"
	//:::Шапка
	|Выбрать разрешенные
	|	СчетНаОплату.Ссылка КАК Ссылка
	|	,СчетНаОплату.Дата КАК ДатаДокумента
	|	,СчетНаОплату.Номер КАК Номер
	|	,СчетНаОплату.Организация КАК Организация
	|	,СчетНаОплату.Организация.ЮридическоеФизическоеЛицо КАК ОрганизацияЮридическоеФизическоеЛицо
	|	,СчетНаОплату.Организация.Префикс КАК Префикс
	|	,СчетНаОплату.Организация.ФайлЛоготип КАК ФайлЛоготип
	|	,СчетНаОплату.Организация.ФайлФаксимильнаяПечать КАК ФаксимилеПечати
	|	,СчетНаОплату.Подразделение
	|	,Выбор когда &ИспользоватьФаксимиле = Истина 
	|		Тогда Значение(Перечисление.ДаНет.Да)
	|		Иначе Значение(Перечисление.ДаНет.Нет) Конец КАК ИспользоватьФаксимиле
	|	,СчетНаОплату.ПодписьРуководителя.Должность КАК ДолжностьРуководителя
	|	,СчетНаОплату.ПодписьРуководителя.РасшифровкаПодписи КАК РасшифровкаПодписиРуководителя
	|	,СчетНаОплату.ПодписьРуководителя.РасшифровкаПодписи КАК РасшифровкаПодписиВыполнилРаботыУслуги
	|	,СчетНаОплату.ПодписьРуководителя.Факсимиле КАК ФаксимилеРуководителя
	|	,СчетНаОплату.ПодписьГлавногоБухгалтера.Должность КАК ДолжностьГлавногоБухгалтера
	|	,СчетНаОплату.ПодписьГлавногоБухгалтера.РасшифровкаПодписи КАК РасшифровкаПодписиГлавногоБухгалтера
	|	,СчетНаОплату.ПодписьГлавногоБухгалтера.Факсимиле КАК ФаксимилеГлавногоБухгалтера
	|	,СчетНаОплату.БанковскийСчет КАК БанковскийСчет
	|	,СчетНаОплату.СуммаВключаетНДС КАК СуммаВключаетНДС
	|	,СчетНаОплату.ВалютаДокумента КАК ВалютаДокумента
	|	,СчетНаОплату.Контрагент КАК Контрагент
	|	,СчетНаОплату.Договор
	|	,СчетНаОплату.УсловияСчетаЗаказа КАК ДополнительныеУсловия
	|	,СчетНаОплату.ДокументОснование
	|	,СчетНаОплату.Ответственный
	|	,СчетНаОплату.Ответственный.Физлицо КАК ФизическоеЛицоОтветсвенного
	|	,СчетНаОплату.Автор
	|	,СчетНаОплату.ДисконтнаяКарта
	|	,СчетНаОплату.ПроцентСкидкиПоДисконтнойКарте
	|	,СчетНаОплату.Комментарий КАК Комментарий
	|	,СчетНаОплату.ОснованиеПечати КАК ОснованиеПечати
	|	,СчетНаОплату.ОснованиеПечатиСсылка КАК ОснованиеПечатиСсылка
	|	,ЛОЖЬ КАК ОжидаетсяВыборВариантаКП
	|	,СчетНаОплату.Вес
	|	,СчетНаОплату.Объем
	|	,СчетНаОплату.НоменклатураДоставки
	|	,ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(СчетНаОплату.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА СчетНаОплату.НоменклатураДоставки.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(СчетНаОплату.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ КАК ПредставлениеНоменклатурыДоставки
	|	,СчетНаОплату.НоменклатураДоставки.Артикул КАК АртикулДоставки
	|	,СчетНаОплату.НоменклатураДоставки.Код КАК КодДоставки
	|	,СчетНаОплату.НоменклатураДоставки.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДоставки
	|	,СчетНаОплату.СтоимостьДоставки
	|	,СчетНаОплату.СуммаНДСДоставки
	|
	//:::Табличная часть "Запасы"
	|	,СчетНаОплату.Запасы.(
	|		НомерСтроки КАК НомерСтроки
	|		,Содержание
	|		,Выбор когда (Выразить(СчетНаОплату.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			Тогда СчетНаОплату.Запасы.Номенклатура.Наименование
	|			Иначе Выразить(СчетНаОплату.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) Конец КАК ПредставлениеНоменклатуры
	|		,Номенклатура.Код КАК Код
	|		,Номенклатура.Артикул КАК Артикул
	|		,ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|		,Характеристика
	|		,Цена КАК Цена
	|		,Сумма КАК Сумма
	|		,СтавкаНДС КАК СтавкаНДС
	|		,СуммаНДС КАК СуммаНДС
	|		,Всего КАК Всего
	|		,Количество КАК Количество
	|		,Вес КАК Вес
	|		,Объем КАК Объем
	|		,ПроцентСкидкиНаценки
	|		,Выбор когда СчетНаОплату.Запасы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ СчетНаОплату.Запасы.СуммаАвтоматическойСкидки <> 0
	|			Тогда 1
	|			Иначе 0 Конец КАК ЕстьСкидка
	|		,СуммаАвтоматическойСкидки
	|		,Ложь КАК ЭтоРазделитель
	|		,Ложь КАК ЭтоНабор
	|		,Выбор когда НоменклатураНабора <> Значение(Справочник.Номенклатура.ПустаяСсылка) 
	|			И НоменклатураНабора.ВариантПечатиНабора = Значение(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|			Тогда Истина
	|			Иначе Ложь Конец КАК НеобходимоВыделитьКакСоставНабора
	|		,НоменклатураНабора КАК НоменклатураНабора
	|		,ХарактеристикаНабора КАК ХарактеристикаНабора
	|	) КАК ТаблицаЗапасы
	|
	//:::Табличная часть "Добавленные наборы"
	|	,СчетНаОплату.ДобавленныеНаборы.(
	|		НоменклатураНабора КАК НоменклатураНабора
	|		,ХарактеристикаНабора КАК ХарактеристикаНабора
	|		,Количество КАК Количество
	|		,ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА НоменклатураНабора.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ЗапасНабора
	|		,НоменклатураНабора.ВариантПечатиНабора КАК ВариантПечатиНабора
	|		,НоменклатураНабора.ТипНоменклатуры КАК ТипНоменклатурыНабора
	|		,НоменклатураНабора.Артикул КАК АртикулНабора
	|		,НоменклатураНабора.Код КАК КодНабора
	|		,НоменклатураНабора.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНабора
	|		,НоменклатураНабора.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияНабора
	|		,ИСТИНА КАК ВыводитьИтоги
	|	) КАК ТаблицаДобавленныеНаборы
	|
	//:::Табличная часть "Платежный календарь"
	|	,СчетНаОплату.ПлатежныйКалендарь.(
	|		ДатаОплаты
	|		,Постфикс
	|		,ПроцентОплаты
	|		,СуммаОплаты
	|		,СуммаНДСОплаты
	|	) КАК ТаблицаПланаОплат
	|
	|Из Документ.СчетНаОплату КАК СчетНаОплату
	|Где СчетНаОплату.Ссылка В(&МассивОбъектов)
	|Упорядочить по Ссылка, НомерСтроки";
	
	ДанныеДокументов = Запрос.Выполнить().Выгрузить();
	ДоставкаСервер.ДобавитьСтрокуДоставкиУниверсальныеДанные(ДанныеДокументов);
	
	// Наборы
	НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(ДанныеДокументов, "ТаблицаЗапасы");
	
	Возврат ДанныеДокументов;
	
КонецФункции

Функция ПечатьПриложениеКДоговору(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	Перем ПервыйДокумент, НомерСтрокиНачало, Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ИмяМакета + "_" + ИмяМакета;
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетНаОплату.ПФ_MXL_" + ИмяМакета);
	
	ПредставлениеСкидки = Константы.ПредставлениеСкидкиВПечатнойФорме.Получить();
		
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"Выбрать разрешенные
	|	СчетНаОплату.Ссылка КАК Ссылка,
	|	СчетНаОплату.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	СчетНаОплату.ВалютаДокумента КАК ВалютаДокумента,
	|	СчетНаОплату.Дата КАК ДатаДокумента,
	|	СчетНаОплату.Номер КАК Номер,
	|	СчетНаОплату.БанковскийСчет КАК БанковскийСчет,
	|	СчетНаОплату.Контрагент КАК Контрагент,
	|	СчетНаОплату.Организация КАК Организация,
	|	СчетНаОплату.Организация.Префикс КАК Префикс,
	|	СчетНаОплату.НоменклатураДоставки,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(СчетНаОплату.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА СчетНаОплату.НоменклатураДоставки.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(СчетНаОплату.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ КАК ПредставлениеНоменклатурыДоставки,
	|	СчетНаОплату.НоменклатураДоставки.Код КАК КодДоставки,
	|	СчетНаОплату.НоменклатураДоставки.Артикул КАК АртикулДоставки,
	|	СчетНаОплату.НоменклатураДоставки.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДоставки,
	|	СчетНаОплату.СтоимостьДоставки,
	|	СчетНаОплату.СуммаНДСДоставки,
	|	СчетНаОплату.Запасы.(
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(СчетНаОплату.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА СчетНаОплату.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(СчетНаОплату.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК Запас,
	|		Номенклатура.Артикул КАК Артикул,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		Количество КАК Количество,
	|		Характеристика,
	|		Содержание,
	|		ПроцентСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА СчетНаОплату.Запасы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ СчетНаОплату.Запасы.СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		НомерСтроки КАК НомерСтроки,
	|		СуммаАвтоматическойСкидки,
	|		ЛОЖЬ КАК ЭтоНабор,
	|		ВЫБОР
	|			КОГДА НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора
	|	) КАК ТаблицаЗапасы,
	|	СчетНаОплату.ДобавленныеНаборы.(
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА НоменклатураНабора.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ЗапасНабора,
	|		НоменклатураНабора.ВариантПечатиНабора КАК ВариантПечатиНабора,
	|		НоменклатураНабора.ТипНоменклатуры КАК ТипНоменклатурыНабора,
	|		НоменклатураНабора.Артикул КАК АртикулНабора,
	|		НоменклатураНабора.Код КАК КодНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияНабора,
	|		ИСТИНА КАК ВыводитьИтоги
	|	) КАК ТаблицаДобавленныеНаборы,
	|	СчетНаОплату.ПлатежныйКалендарь.(
	|		ПроцентОплаты,
	|		СуммаОплаты,
	|		СуммаНДСОплаты
	|	) КАК ТаблицаПлатежныйКалендарь,
	|	ДоговорыКонтрагентов.Ссылка КАК СсылкаДоговора,
	|	ДоговорыКонтрагентов.ДатаДоговора КАК ДатаДоговора,
	|	ДоговорыКонтрагентов.НомерДоговора КАК НомерДоговора
	|ИЗ
	|	Документ.СчетНаОплату КАК СчетНаОплату
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО СчетНаОплату.Договор = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	СчетНаОплату.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ДанныеДокументов = Запрос.Выполнить().Выгрузить();
	ДоставкаСервер.ДобавитьСтрокуДоставкиУниверсальныеДанные(ДанныеДокументов, "ТаблицаЗапасы");
	// Наборы
	НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(ДанныеДокументов, "ТаблицаЗапасы");
	
	Для каждого Шапка Из ДанныеДокументов Цикл
		
		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабличныйДокумент, ПервыйДокумент, НомерСтрокиНачало);
		
		СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
		СведенияОбКонтрагенте = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = "к договору № "
												+ Шапка.НомерДоговора
												+ " от "
												+ Формат(Шапка.ДатаДоговора, "ДЛФ=DD");
												
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ИНН,КПП,РегистрационныйНомер,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ЕстьСкидки = Шапка.ТаблицаЗапасы.Итог("ЕстьСкидка") <> 0;
		
		Если ЕстьСкидки Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСоСкидкой");
			
		Иначе
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			
		КонецЕсли;
		
		СтруктураИтогов = Новый Структура("Сумма, СуммаНДС, Всего, Количество, НомерСтроки, ЕстьСкидки, ПредставлениеСкидки", 0, 0, 0, 0, 0, ЕстьСкидки, ПредставлениеСкидки);
		ПараметрыНоменклатуры = Новый Структура;
		ДанныеПечати = Новый Структура;
		
		Для каждого СтрокаЗапасы Из Шапка.ТаблицаЗапасы Цикл
			
			ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧасти(СтрокаЗапасы, ДанныеПечати, ПараметрыНоменклатуры, СтруктураИтогов, Шапка);
			
			ОбластьМакета.Параметры.Заполнить(СтрокаЗапасы);
			ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Наборы
			НаборыСервер.УчестьОформлениеСтрокиНабора(ТабличныйДокумент, ОбластьМакета, СтрокаЗапасы);
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = УправлениеНебольшойФирмойСервер.ФорматСумм(СтруктураИтогов.Сумма);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		Если СтруктураИтогов.СуммаНДС = 0 Тогда
			
			ОбластьМакета.Параметры.НДС = "Без налога (НДС)";
			ОбластьМакета.Параметры.ВсегоНДС = "-";
			
		Иначе
			
			ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
			ОбластьМакета.Параметры.ВсегоНДС = УправлениеНебольшойФирмойСервер.ФорматСумм(СтруктураИтогов.СуммаНДС);
			
		КонецЕсли; 
		
		Если ИмяМакета = "СчетНаЧастичнуюОплату" Тогда
			
			Если СтруктураИтогов.СуммаНДС = 0 Тогда
				ОбластьМакета.Параметры.НДСкОплате = "Без налога (НДС)";
				ОбластьМакета.Параметры.ВсегоНДСкОплате = "-";
			Иначе
				ОбластьМакета.Параметры.НДСкОплате = ?(Шапка.СуммаВключаетНДС, "В том числе НДС оплаты:", "Сумма НДС оплаты:");
				Если Шапка.ПлатежныйКалендарь.Итог("ПроцентОплаты") > 0 Тогда
					ОбластьМакета.Параметры.ВсегоНДСкОплате = УправлениеНебольшойФирмойСервер.ФорматСумм(Шапка.ПлатежныйКалендарь.Итог("СуммаНДСОплаты"));
				Иначе
					ОбластьМакета.Параметры.ВсегоНДСкОплате = "-";
				КонецЕсли;
			КонецЕсли; 
			
			Если Шапка.ПлатежныйКалендарь.Итог("ПроцентОплаты") > 0 Тогда
				ОбластьМакета.Параметры.ВсегоКОплате = УправлениеНебольшойФирмойСервер.ФорматСумм(Шапка.ПлатежныйКалендарь.Итог("СуммаОплаты"));
				ОбластьМакета.Параметры.ПроцентОплаты = Шапка.ПлатежныйКалендарь.Итог("ПроцентОплаты");
			Иначе
				ОбластьМакета.Параметры.ВсегоКОплате = "-";
				ОбластьМакета.Параметры.ПроцентОплаты = "-";
			КонецЕсли;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Макет.Области.Найти("ИтогоКОплате") = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Не обнаружена область макета ""Итог к оплате"". Возможно используется пользовательский макет.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
			
		Иначе
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоКОплате");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогоКОплате", УправлениеНебольшойФирмойСервер.ФорматСумм(СтруктураИтогов.Всего)));
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = СтруктураИтогов.Всего;
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований "
												+ Строка(СтруктураИтогов.Количество)
												+ ", на сумму "
												+ УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		
		ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции

Функция ПечатьПоШаблонуОфисногоДокумента(МассивОбъектов, ШаблонПечати)
	
	ОфисныеДокументы = Новый Соответствие;
	
	Для каждого ОбъектПечати Из МассивОбъектов Цикл
		ДанныеФайла = ШаблоныПечатиОфисныхДокументов.СФормироватьДокумент(ОбъектПечати, ШаблонПечати, Новый УникальныйИдентификатор);
		ОфисныеДокументы.Вставить(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла);
	КонецЦикла;
	
	Возврат ОфисныеДокументы;
	
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ВозможныеВарианты = Обработки.ПечатьСчетНаОплату.МатрицаВозможныхВариантов();
	Для каждого СтрокаТаблицы Из ВозможныеВарианты Цикл
		
		ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, Обработки.ПечатьСчетНаОплату.ИдентификаторПечатнойФормы(СтрокаТаблицы.ЧастичнаяОплата, СтрокаТаблицы.ИспользоватьФаксимиле));
		Если ПечатнаяФорма <> Неопределено Тогда
			
			ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
			ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = Обработки.ПечатьСчетНаОплату.КлючПараметровПечати();
			ПечатнаяФорма.ПолныйПутьКМакету = Обработки.ПечатьСчетНаОплату.ПолныйПутьКМакету();
			ПечатнаяФорма.СинонимМакета = Обработки.ПечатьСчетНаОплату.ПредставлениеПФ(СтрокаТаблицы.ЧастичнаяОплата, СтрокаТаблицы.ИспользоватьФаксимиле);
			
			ДанныеОбъектовПечати = УниверсальныйЗапросПоДаннымДокумента(МассивОбъектов, СтрокаТаблицы.ИспользоватьФаксимиле);
			Если СтрокаТаблицы.ЧастичнаяОплата Тогда
				
				Обработки.ПечатьСчетНаОплату.УчестьОсобенностиЧастичнойОплаты(ДанныеОбъектовПечати);
				
			КонецЕсли;
			
			Обработки.ПечатьСчетНаОплату.СформироватьПФ(ПечатнаяФорма, ДанныеОбъектовПечати, ОбъектыПечати, СтрокаТаблицы.ЧастичнаяОплата);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыПечати.Свойство("ШаблонПечатиОфисныхДокументов") И ЗначениеЗаполнено(ПараметрыПечати.ШаблонПечатиОфисныхДокументов) Тогда
		
		Для каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
			Если СтрНачинаетсяС(ПечатнаяФорма.ИмяВРЕГ, ВРег("ПечатьПоШаблонуОфисногоДокумента")) Тогда
				ПечатнаяФорма.ОФисныеДокументы = ПечатьПоШаблонуОфисногоДокумента(МассивОбъектов, ПараметрыПечати.ШаблонПечатиОфисныхДокументов);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
	// Приложение к договору
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПриложениеКДоговору") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПриложениеКДоговору", "Приложение к договору", ПечатьПриложениеКДоговору(МассивОбъектов, ОбъектыПечати, "ПриложениеКДоговору"));
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати Заказа покупателя
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	ВозможныеВарианты = Обработки.ПечатьСчетНаОплату.МатрицаВозможныхВариантов();
	Для каждого СтрокаТаблицы Из ВозможныеВарианты Цикл
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = Обработки.ПечатьСчетНаОплату.ИдентификаторПечатнойФормы(СтрокаТаблицы.ЧастичнаяОплата, СтрокаТаблицы.ИспользоватьФаксимиле);
		КомандаПечати.Представление = Обработки.ПечатьСчетНаОплату.ПредставлениеПФ(СтрокаТаблицы.ЧастичнаяОплата, СтрокаТаблицы.ИспользоватьФаксимиле);
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.Обработчик = "ПечатьДокументовУНФКлиент.ПредложитьЗаполнитьРеквизитыОрганизации";
		КомандаПечати.Порядок = 1;
		
		Если СтрокаТаблицы.ЧастичнаяОплата Тогда
			
			КомандаПечати.ФункциональныеОпции = "ПлатежныйКалендарь";
			
		КонецЕсли;
		
		Если СтрокаТаблицы.ИспользоватьФаксимиле Тогда
			
			КомандаПечати.МестоРазмещения = "ПодменюПечатьФаксимиле";
			КомандаПечати.Порядок = 4;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.СформироватьБланкиДоговоров";
	КомандаПечати.Идентификатор = "БланкДоговора";
	КомандаПечати.Представление = НСтр("ru = 'Форма договора (устарела)'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаСпискаДокументов";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ФункциональныеОпции = "ИспользоватьБланкиДоговоров";
	КомандаПечати.МестоРазмещения = "КомандыПечатиДоговорКонтрагента";
	КомандаПечати.Порядок = 7;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПриложениеКДоговору";
	КомандаПечати.Представление = НСтр("ru = 'Приложение к договору (устарела)'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаСпискаДокументов";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ФункциональныеОпции = "ИспользоватьБланкиДоговоров";
	КомандаПечати.МестоРазмещения = "КомандыПечатиДоговорКонтрагента";
	КомандаПечати.Порядок = 10;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Конверт";
	КомандаПечати.Представление = НСтр("ru = 'Конверт'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаСпискаДокументов";
	КомандаПечати.Обработчик = "ПечатьДокументовУНФКлиент.ПечатьКонверта";
	КомандаПечати.Порядок = 14;
	
	НазначенияШаблонов = Новый Массив;
	НазначенияШаблонов.Добавить(Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагента);
	НазначенияШаблонов.Добавить(Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаСчет);
	ШаблоныПечатиОфисныхДокументов.ДобавитьКомандыПечати(НазначенияШаблонов, КомандыПечати, "ФормаДокумента,ФормаСписка", "КомандыПечатиДоговорКонтрагента", 99);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, ДанныеПечати, ПараметрыНоменклатуры, СтруктураИтогов, Шапка)
	
	ДанныеПечати.Очистить();
	
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		НомерСтроки = 0;
	Иначе
		СтруктураИтогов.НомерСтроки = СтруктураИтогов.НомерСтроки+1;
		НомерСтроки = СтруктураИтогов.НомерСтроки;
	КонецЕсли;
	ДанныеПечати.Вставить("НомерСтроки", НомерСтроки);
	
	ПараметрыНоменклатуры.Очистить();
	ПараметрыНоменклатуры.Вставить("Содержание", СтрокаТабличнойЧасти.Содержание);
	ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", СтрокаТабличнойЧасти.Запас);
	ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", СтрокаТабличнойЧасти.Характеристика);
	ПараметрыНоменклатуры.Вставить("ПредставлениеАртикула", СтрокаТабличнойЧасти.Артикул);
	// Наборы
	ПараметрыНоменклатуры.Вставить("НеобходимоВыделитьКакСоставНабора", СтрокаТабличнойЧасти.НеобходимоВыделитьКакСоставНабора);
	
	ДанныеПечати.Вставить("Запас", ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры));
			
	ДанныеПечати.Вставить("ПредставлениеКодаНоменклатуры", ПечатьДокументовУНФ.ПредставлениеКодаНоменклатуры(СтрокаТабличнойЧасти));
			
	Если СтруктураИтогов.ЕстьСкидки Тогда
		
		ДанныеПечати.Вставить("ПредставлениеСкидки", ПечатьДокументовУНФ.ПредставлениеСкидки(СтрокаТабличнойЧасти, СтруктураИтогов));
		
	КонецЕсли;
			
	Если НЕ СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтруктураИтогов.Сумма			= СтруктураИтогов.Сумма			+ СтрокаТабличнойЧасти.Сумма;
		СтруктураИтогов.СуммаНДС		= СтруктураИтогов.СуммаНДС		+ СтрокаТабличнойЧасти.СуммаНДС;
		СтруктураИтогов.Всего			= СтруктураИтогов.Всего			+ СтрокаТабличнойЧасти.Всего;
		СтруктураИтогов.Количество		= СтруктураИтогов.Количество	+ 1;
	КонецЕсли; 
			
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.//
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электрнной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныПечатиОфисныхДокументов

Процедура ПриДобавленииПараметровШаблона(НазначениеШаблона, ПараметрыШаблона) Экспорт
	
	Если НазначениеШаблона = Перечисления.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагентаСчет Тогда
		
		ДобавитьПараметрыСчетаВШаблон(ПараметрыШаблона);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриПолученииЗначенийПараметровШаблона(ОбъектПечати, НазначениеШаблона, ОписаниеПараметров, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьЗначенияПараметровСчета(ОбъектПечати, ОписаниеПараметров, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПриВыводеТаблицыПараметровШаблона(ПараметрыПечати, ИмяТаблицы, ОписаниеПараметров, ПараметрыВывода = Неопределено) Экспорт
	
	ЭтоВыводВФайл = ПараметрыВывода <> Неопределено;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетНаОплату.Ссылка КАК Ссылка,
	|	СчетНаОплату.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	СчетНаОплату.ВалютаДокумента КАК ВалютаДокумента,
	|	СчетНаОплату.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(СчетНаОплату.Запасы.Номенклатура) = ТИП(СТРОКА)
	|				ТОГДА СчетНаОплату.Запасы.Номенклатура
	|			КОГДА (ВЫРАЗИТЬ(СчетНаОплату.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА СчетНаОплату.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(СчетНаОплату.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ПредставлениеНоменклатуры,
	|		Номенклатура.Артикул КАК Артикул,
	|		ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		Вес КАК Вес,
	|		Характеристика КАК Характеристика,
	|		Содержание КАК Содержание,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА СчетНаОплату.Запасы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ СчетНаОплату.Запасы.СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|		Партия КАК Партия,
	|		ЛОЖЬ КАК ЭтоНабор,
	|		ВЫБОР
	|			КОГДА СчетНаОплату.Запасы.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И СчетНаОплату.Запасы.НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		Номенклатура.ФайлКартинки КАК НоменклатураФайлКартинки
	|	) КАК ТаблицаЗапасы,
	|	СчетНаОплату.ДобавленныеНаборы.(
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(СчетНаОплату.ДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА СчетНаОплату.ДобавленныеНаборы.НоменклатураНабора.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(СчетНаОплату.ДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ЗапасНабора,
	|		НоменклатураНабора.ВариантПечатиНабора КАК ВариантПечатиНабора,
	|		НоменклатураНабора.ТипНоменклатуры КАК ТипНоменклатурыНабора,
	|		НоменклатураНабора.Артикул КАК АртикулНабора,
	|		НоменклатураНабора.Код КАК КодНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияНабора,
	|		ИСТИНА КАК ВыводитьИтоги
	|	) КАК ТаблицаДобавленныеНаборы
	|ИЗ
	|	Документ.СчетНаОплату КАК СчетНаОплату
	|ГДЕ
	|	СчетНаОплату.Ссылка = &СчетНаОплату
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("СчетНаОплату", ПараметрыПечати.СчетНаОплату);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСчета = Результат[0];
	
	Префикс = "СчетНаОплату.";
	
	СтруктураИтогов = Новый Структура("Сумма, СуммаНДС, Всего, Количество, НомерСтроки, Вес", 0, 0, 0, 0, 0, 0);
	
	Если ЭтоВыводВФайл Тогда
		ШаблоныПечатиОфисныхДокументов.НачатьВыводТаблицыДокумента(ОписаниеПараметров, ПараметрыВывода);
	КонецЕсли;
	
	Для каждого СтрокаЗапасы Из ДанныеСчета.ТаблицаЗапасы Цикл
		ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиДокумента(СтрокаЗапасы, ОписаниеПараметров, СтруктураИтогов, ИмяТаблицы + ".", ПараметрыВывода);
		Если ЭтоВыводВФайл Тогда
			ШаблоныПечатиОфисныхДокументов.ВывестиСтрокуТаблицыДокумента(ОписаниеПараметров, ПараметрыВывода);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеПечати = Новый Соответствие;
	ДанныеПечати.Вставить(Префикс + "СуммаДокумента", УправлениеНебольшойФирмойСервер.ФорматСумм(СтруктураИтогов.Сумма));
	ДанныеПечати.Вставить(Префикс + "СуммаДокументаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(СтруктураИтогов.Всего, ДанныеСчета.ВалютаДокумента));
	ДанныеПечати.Вставить(Префикс + "СуммаНДС", ?(СтруктураИтогов.СуммаНДС = 0, "-", УправлениеНебольшойФирмойСервер.ФорматСумм(СтруктураИтогов.СуммаНДС)));
	ДанныеПечати.Вставить(Префикс + "НДС", ПечатьДокументовУНФ.ПредставлениеЗаголовкаНДС(СтруктураИтогов.СуммаНДС, ДанныеСчета.СуммаВключаетНДС, Ложь));
	ДанныеПечати.Вставить(Префикс + "ИтоговаяСтрока", ПечатьДокументовУНФ.ИтоговаяСтрока(СтруктураИтогов.Количество, СтруктураИтогов.Всего, ДанныеСчета.ВалютаДокумента));
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтруктуры(ОписаниеПараметров, ДанныеПечати);
	
	Если ЭтоВыводВФайл Тогда
		ШаблоныПечатиОфисныхДокументов.ЗакончитьВыводТаблицыДокумента(ОписаниеПараметров, ПараметрыВывода);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПараметрыСчетаВШаблон(ПараметрыШаблона)
	
	МетаданныеСчета = Метаданные.Документы.СчетНаОплату;
	МетаданныеНоменклатуры = Справочники.Номенклатура.ПустаяСсылка().Метаданные();
	
	ФорматЦены = ШаблоныПечатиОфисныхДокументов.ФорматЦены();
	ФорматСкидки = ФорматСкидки = "ЧН = '-'; ЧФ = '-Ч%'";
	
	ТипЦены = ШаблоныПечатиОфисныхДокументов.ОписаниеТипаЦена();
	ТипСкидки = ШаблоныПечатиОфисныхДокументов.ОписаниеТипаСкидка();
	ТипКоличество = ШаблоныПечатиОфисныхДокументов.ОписаниеТипаКоличество();
	
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "СчетНаОплату.ПредставлениеСчета", НСтр("ru='Наименование счета (полное)'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "СчетНаОплату.ДатаЗаказа", НСтр("ru='Дата'"), "ДЛФ=Д", ШаблоныПечатиОфисныхДокументов.ДопустимыеФорматыДаты(), МетаданныеСчета.СтандартныеРеквизиты.Дата.Тип);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "СчетНаОплату.НомерЗаказа", НСтр("ru='Номер'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "СчетНаОплату.УсловияЗаказа", МетаданныеСчета.Реквизиты.УсловияСчетаЗаказа.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "СчетНаОплату.Комментарий", МетаданныеСчета.Реквизиты.Комментарий.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "СчетНаОплату.СуммаДокумента", НСтр("ru='Сумма документа'"), ФорматЦены,, ТипЦены);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "СчетНаОплату.СуммаДокументаПрописью", НСтр("ru='Сумма документа (прописью)'"), ФорматЦены,, ТипЦены);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "СчетНаОплату.СуммаНДС", НСтр("ru='Сумма НДС'"), ФорматЦены,, ТипЦены);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "СчетНаОплату.НДС", НСтр("ru='НДС'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыШаблона, "СчетНаОплату.ИтоговаяСтрока", НСтр("ru='Итоговая строка'"));
	
	ДобавитьПараметрыОрганизацииВШаблон(ПараметрыШаблона, "СчетНаОплату.");
	
	ПараметрыДопРеквизитовСчета = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыДополнительныеРеквизиты());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыДополнительныхРеквизитовОбъекта(ПараметрыДопРеквизитовСчета, Документы.СчетНаОплату.ПустаяСсылка(), "СчетНаОплату.ДополнительныеРеквизиты.");
	
	ПараметрыОтветственногоСчета = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона, НСтр("ru='Ответственный'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыОтветственногоСчета, "СчетНаОплату.ОтветственныйФИО", МетаданныеСчета.Реквизиты.Ответственный);
	
	ПараметрыКИОтветственногоСчета = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыОтветственногоСчета, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыКонтактнаяИнформация());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыКонтактнойИнформацииОбъекта(ПараметрыКИОтветственногоСчета, Справочники.ФизическиеЛица.ПустаяСсылка(), "СчетНаОплату.Ответственный.КонтактнаяИнформация.");
	
	ПараметрыДопРеквизитовОтветственногоСчета = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыОтветственногоСчета, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыДополнительныеРеквизиты());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыДополнительныхРеквизитовОбъекта(ПараметрыДопРеквизитовОтветственногоСчета, Справочники.Сотрудники.ПустаяСсылка(), "СчетНаОплату.Ответственный.ДополнительныеРеквизиты.");
	
	ПараметрыТаблицыЗапасы = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона, НСтр("ru='Товары, услуги'"));
	
	ПрефиксТаблицаВладелец = "СчетНаОплату.Запасы";
	
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыТаблицыЗапасы, "СчетНаОплату.Запасы.НомерСтроки", НСтр("ru='Номер строки'"), ПрефиксТаблицаВладелец,,, ТипКоличество);
	
	ПараметрыНоменклатурыТаблицыЗапасы = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыТаблицыЗапасы, НСтр("ru='Товар, услуга'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыНоменклатурыТаблицыЗапасы, "СчетНаОплату.Запасы.Номенклатура.Изображение", НСтр("ru='Изображение'"), ПрефиксТаблицаВладелец,,,, ШаблоныПечатиОфисныхДокументов.ВидПараметраИзображение());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыНоменклатурыТаблицыЗапасы, "СчетНаОплату.Запасы.Номенклатура", НСтр("ru='Товар, услуга (представление)'"), ПрефиксТаблицаВладелец);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыНоменклатурыТаблицыЗапасы, "СчетНаОплату.Запасы.Номенклатура.Код", НСтр("ru='Код'"), ПрефиксТаблицаВладелец);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыНоменклатурыТаблицыЗапасы, "СчетНаОплату.Запасы.Номенклатура.НоменклатураАртикул", НСтр("ru='Артикул'"), ПрефиксТаблицаВладелец);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыНоменклатурыТаблицыЗапасы, "СчетНаОплату.Запасы.Номенклатура.Поставщик", НСтр("ru='Поставщик'"), ПрефиксТаблицаВладелец);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыНоменклатурыТаблицыЗапасы, "СчетНаОплату.Запасы.Номенклатура.СтранаПроисхождения", НСтр("ru='Страна происхождения'"), ПрефиксТаблицаВладелец);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыНоменклатурыТаблицыЗапасы, "СчетНаОплату.Запасы.Номенклатура.Комментарий", НСтр("ru='Описание'"), ПрефиксТаблицаВладелец);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыНоменклатурыТаблицыЗапасы, "СчетНаОплату.Запасы.Номенклатура.Объем", НСтр("ru='Объем'"), ПрефиксТаблицаВладелец,,, МетаданныеНоменклатуры.Реквизиты.Объем.Тип);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыНоменклатурыТаблицыЗапасы, "СчетНаОплату.Запасы.Номенклатура.Вес", НСтр("ru='Вес'"), ПрефиксТаблицаВладелец,,, МетаданныеНоменклатуры.Реквизиты.Вес.Тип);
	
	ПараметрыДопРеквизитовНоменклатуры = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыНоменклатурыТаблицыЗапасы, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыДополнительныеРеквизиты());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыДополнительныхРеквизитовОбъекта(ПараметрыДопРеквизитовНоменклатуры, Справочники.Номенклатура.ПустаяСсылка(), "СчетНаОплату.Запасы.Номенклатура.ДополнительныеРеквизиты.", ПрефиксТаблицаВладелец);
	
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыТаблицыЗапасы, "СчетНаОплату.Запасы.Количество", НСтр("ru='Количество'"), ПрефиксТаблицаВладелец,,, ТипКоличество);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыТаблицыЗапасы, "СчетНаОплату.Запасы.ЕдиницаИзмерения", НСтр("ru='Единица измерения'"), ПрефиксТаблицаВладелец);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыТаблицыЗапасы, "СчетНаОплату.Запасы.Цена", НСтр("ru='Цена'"), ПрефиксТаблицаВладелец, ФорматЦены,, ТипЦены);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыТаблицыЗапасы, "СчетНаОплату.Запасы.Сумма", НСтр("ru='Сумма'"), ПрефиксТаблицаВладелец, ФорматЦены,, ТипЦены);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыТаблицыЗапасы, "СчетНаОплату.Запасы.СуммаБезСкидки", НСтр("ru='Сумма без скидки'"), ПрефиксТаблицаВладелец, ФорматЦены,, ТипЦены);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыТаблицыЗапасы, "СчетНаОплату.Запасы.СтавкаНДС", НСтр("ru='Ставка НДС'"), ПрефиксТаблицаВладелец);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыТаблицыЗапасы, "СчетНаОплату.Запасы.СуммаНДС", НСтр("ru='Сумма НДС'"), ПрефиксТаблицаВладелец, ФорматЦены,, ТипЦены);
	
	ПараметрыСкидки = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыТаблицыЗапасы, НСтр("ru='Скидки'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыСкидки, "СчетНаОплату.Запасы.ПроцентАвтоматическойСкидки", НСтр("ru='% авт. скидки'"), ПрефиксТаблицаВладелец, ФорматСкидки,, ТипСкидки);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыСкидки, "СчетНаОплату.Запасы.СуммаАвтоматическойСкидки", НСтр("ru='Сумма авт. скидки'"), ПрефиксТаблицаВладелец, ФорматЦены,, ТипЦены);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыСкидки, "СчетНаОплату.Запасы.ПроцентСкидкиНаценки", НСтр("ru='% ручной скидки'"), ПрефиксТаблицаВладелец, ФорматСкидки,, ТипСкидки);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыСкидки, "СчетНаОплату.Запасы.СуммаСкидкиНаценки", НСтр("ru='Сумма ручной скидки'"), ПрефиксТаблицаВладелец, ФорматЦены,, ТипЦены);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыСкидки, "СчетНаОплату.Запасы.СуммаОбщейСкидки", НСтр("ru='Сумма общей скидки'"), ПрефиксТаблицаВладелец, ФорматЦены,, ТипЦены);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыТаблицыЗапасы, "СчетНаОплату.Запасы.Всего", НСтр("ru='Всего'"), ПрефиксТаблицаВладелец, ФорматЦены,, ТипЦены);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрТаблицыШаблона(ПараметрыТаблицыЗапасы, "СчетНаОплату.Запасы.Партия", НСтр("ru='Партия'"), ПрефиксТаблицаВладелец);
	
КонецПроцедуры

Процедура ДобавитьПараметрыОрганизацииВШаблон(ПараметрыШаблона, Префикс)
	
	МетаданныеОрганизации = Метаданные.Справочники.Организации;
	
	ПараметрыОрганизации = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыШаблона, НСтр("ru='Организация'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыОрганизации, Префикс + "Организация.ОрганизацияНаименование", НСтр("ru='Юридическое наименование'"));
	
	ПараметрыКодыОрганизацииДоговора = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыОрганизации, НСтр("ru='Коды'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКодыОрганизацииДоговора, Префикс + "Организация.ОрганизацияИНН", МетаданныеОрганизации.Реквизиты.ИНН.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКодыОрганизацииДоговора, Префикс + "Организация.ОрганизацияКодОКВЭД", МетаданныеОрганизации.Реквизиты.КодОКВЭД.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКодыОрганизацииДоговора, Префикс + "Организация.ОрганизацияКПП", МетаданныеОрганизации.Реквизиты.КПП.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКодыОрганизацииДоговора, Префикс + "Организация.ОрганизацияОГРН", МетаданныеОрганизации.Реквизиты.ОГРН.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКодыОрганизацииДоговора, Префикс + "Организация.ОрганизацияКодПоОКАТО", МетаданныеОрганизации.Реквизиты.КодПоОКАТО.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКодыОрганизацииДоговора, Префикс + "Организация.ОрганизацияКодПоОКПО", МетаданныеОрганизации.Реквизиты.КодПоОКПО.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыКодыОрганизацииДоговора, Префикс + "Организация.ОрганизацияКодПоОКТМО", МетаданныеОрганизации.Реквизиты.КодПоОКТМО.Синоним);
	
	ПараметрыПодписьРуководителяОрганизацииДоговора = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыОрганизации, МетаданныеОрганизации.Реквизиты.ПодписьРуководителя.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыПодписьРуководителяОрганизацииДоговора, Префикс + "Организация.ПодписьРуководителя.ПодписьРуководителяДействуетНаОсновании", НСтр("ru='Действует на основании'"));
	
	ПараметрыДолжности = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыПодписьРуководителяОрганизацииДоговора, НСтр("ru='Должность'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыДолжности, Префикс + "Организация.ПодписьРуководителя.ПодписьРуководителяДолжность", НСтр("ru='Должность'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыСклоненияПараметра(ПараметрыДолжности, Префикс + "Организация.ПодписьРуководителя.ПодписьРуководителяДолжность", НСтр("ru='Должность'"));
	
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыПодписьРуководителяОрганизацииДоговора, Префикс + "Организация.ПодписьРуководителя.ПодписьРуководителяРасшифровкаПодписи", НСтр("ru='Расшифровка подписи'"));
	
	ПараметрыФизЛица = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыПодписьРуководителяОрганизацииДоговора, НСтр("ru='Физическое лицо'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыФизЛица, Префикс + "Организация.ПодписьРуководителя.ПодписьРуководителяФизическоеЛицоНаименование", НСтр("ru='Физическое лицо'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыСклоненияПараметра(ПараметрыФизЛица, Префикс + "Организация.ПодписьРуководителя.ПодписьРуководителяФизическоеЛицоНаименование", НСтр("ru='Физическое лицо'"));
	
	ПараметрыПодписьПодписьГлавногоБухгалтераОрганизацииДоговора = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыОрганизации, МетаданныеОрганизации.Реквизиты.ПодписьГлавногоБухгалтера.Синоним);
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыПодписьПодписьГлавногоБухгалтераОрганизацииДоговора, Префикс + "Организация.ПодписьГлавногоБухгалтера.ПодписьГлавногоБухгалтераДействуетНаОсновании", НСтр("ru='Действует на основании'"));
	
	ПараметрыДолжности = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыПодписьПодписьГлавногоБухгалтераОрганизацииДоговора, НСтр("ru='Должность'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыДолжности, Префикс + "Организация.ПодписьГлавногоБухгалтера.ПодписьГлавногоБухгалтераДолжность", НСтр("ru='Должность'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыСклоненияПараметра(ПараметрыДолжности, Префикс + "Организация.ПодписьГлавногоБухгалтера.ПодписьГлавногоБухгалтераДолжность", НСтр("ru='Должность'"));
	
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыПодписьПодписьГлавногоБухгалтераОрганизацииДоговора, Префикс + "Организация.ПодписьГлавногоБухгалтера.ПодписьГлавногоБухгалтераРасшифровкаПодписи", НСтр("ru='Расшифровка подписи'"));
	
	ПараметрыФизЛица = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыПодписьПодписьГлавногоБухгалтераОрганизацииДоговора, НСтр("ru='Физическое лицо'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыФизЛица, Префикс + "Организация.ПодписьГлавногоБухгалтера.ПодписьГлавногоБухгалтераФизическоеЛицоНаименование", НСтр("ru='Физическое лицо'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыСклоненияПараметра(ПараметрыФизЛица, Префикс + "Организация.ПодписьГлавногоБухгалтера.ПодписьГлавногоБухгалтераФизическоеЛицоНаименование", НСтр("ru='Физическое лицо'"));
	
	ПараметрыКИОрганизации = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыОрганизации, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыКонтактнаяИнформация());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыКонтактнойИнформацииОбъекта(ПараметрыКИОрганизации, Справочники.Организации.ПустаяСсылка(), Префикс + "Организация.КонтактнаяИнформация.");
	
	ПараметрыДопРеквизитовОрганизации = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыОрганизации, ШаблоныПечатиОфисныхДокументов.ПредставлениеГруппыДополнительныеРеквизиты());
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрыДополнительныхРеквизитовОбъекта(ПараметрыДопРеквизитовОрганизации, Справочники.Организации.ПустаяСсылка(), Префикс + "Организация.ДополнительныеРеквизиты.");
	
	ПараметрыСчетаОрганизации = ШаблоныПечатиОфисныхДокументов.ДобавитьГруппуПараметровШаблона(ПараметрыОрганизации, НСтр("ru='Банковский счет'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаОрганизации, Префикс + "Организация.ОрганизацияБанковскийСчетПоУмолчанию", НСтр("ru='Банковский счет (полное представление)'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаОрганизации, Префикс + "Организация.ОрганизацияБанковскийСчетПоУмолчаниюПодробно.ОрганизацияБанковскийСчетПоУмолчаниюБанкСВИФТБИК", НСтр("ru='SWIFT'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаОрганизации, Префикс + "Организация.ОрганизацияБанковскийСчетПоУмолчаниюПодробно.ОрганизацияБанковскийСчетПоУмолчаниюБанкНаименование", НСтр("ru='Банк'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаОрганизации, Префикс + "Организация.ОрганизацияБанковскийСчетПоУмолчаниюПодробно.ОрганизацияБанковскийСчетПоУмолчаниюБанкКод", НСтр("ru='БИК'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаОрганизации, Префикс + "Организация.ОрганизацияБанковскийСчетПоУмолчаниюПодробно.ОрганизацияБанковскийСчетПоУмолчаниюБанкКоррСчет", НСтр("ru='Корр. счет'"));
	ШаблоныПечатиОфисныхДокументов.ДобавитьПараметрШаблона(ПараметрыСчетаОрганизации, Префикс + "Организация.ОрганизацияБанковскийСчетПоУмолчаниюПодробно.ОрганизацияБанковскийСчетПоУмолчаниюНомерСчета", НСтр("ru='Номер счета'"));
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПараметровСчета(ОбъектПечати, ОписаниеПараметров, ДополнительныеПараметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетНаОплату.Ссылка КАК СчетНаОплатуСсылка,
	|	СчетНаОплату.Ссылка КАК ПредставлениеСчета,
	|	СчетНаОплату.Номер КАК НомерЗаказа,
	|	СчетНаОплату.Дата КАК ДатаЗаказа,
	|	СчетНаОплату.СуммаДокумента КАК СуммаДокумента,
	|	СчетНаОплату.ВалютаДокумента КАК ВалютаДокумента,
	|	СчетНаОплату.УсловияСчетаЗаказа.ТекстУсловий КАК УсловияЗаказа,
	|	СчетНаОплату.Организация КАК СчетНаОплатуОрганизация,
	|	СчетНаОплату.Ответственный КАК СчетНаОплатуОтветственный,
	|	СчетНаОплату.Ответственный.Физлицо КАК СчетНаОплатуОтветственныйФизЛицо,
	|	СчетНаОплату.Ответственный.Наименование КАК ОтветственныйФИО,
	|	СчетНаОплату.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(СчетНаОплату.Запасы.Содержание КАК СТРОКА(1000))) <> """"
	|				ТОГДА ВЫРАЗИТЬ(СчетНаОплату.Запасы.Содержание КАК СТРОКА(1000))
	|			КОГДА ТИПЗНАЧЕНИЯ(СчетНаОплату.Запасы.Номенклатура) = ТИП(СТРОКА)
	|				ТОГДА СчетНаОплату.Запасы.Номенклатура
	|			КОГДА (ВЫРАЗИТЬ(СчетНаОплату.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА СчетНаОплату.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(СчетНаОплату.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК НоменклатураНаименование,
	|		Номенклатура.Артикул КАК НоменклатураАртикул,
	|		Номенклатура.Комментарий КАК ОписаниеНоменклатуры,
	|		Номенклатура КАК НоменклатураСсылка,
	|		Характеристика.Наименование КАК ХарактеристикаНаименование,
	|		Характеристика КАК ХарактеристикаСсылка,
	|		Партия КАК Партия,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Цена КАК Цена,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		Сумма КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		Содержание КАК Содержание,
	|		ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|		Количество КАК Количество,
	|		ЛОЖЬ КАК ЭтоНабор,
	|		ВЫБОР
	|			КОГДА СчетНаОплату.Запасы.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И СчетНаОплату.Запасы.НоменклатураНабора.ВариантПечатиНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора,
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора
	|	) КАК Запасы,
	|	СчетНаОплату.Комментарий КАК Комментарий,
	|	СчетНаОплату.ДобавленныеНаборы.(
	|		НоменклатураНабора КАК НоменклатураНабора,
	|		ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(СчетНаОплату.ДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА СчетНаОплату.ДобавленныеНаборы.НоменклатураНабора.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(СчетНаОплату.ДобавленныеНаборы.НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ЗапасНабора,
	|		НоменклатураНабора.ВариантПечатиНабора КАК ВариантПечатиНабора,
	|		НоменклатураНабора.ТипНоменклатуры КАК ТипНоменклатурыНабора,
	|		НоменклатураНабора.Артикул КАК АртикулНабора,
	|		НоменклатураНабора.Код КАК КодНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНабора,
	|		НоменклатураНабора.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияНабора,
	|		ИСТИНА КАК ВыводитьИтоги
	|	) КАК ТаблицаДобавленныеНаборы
	|ИЗ
	|	Документ.СчетНаОплату КАК СчетНаОплату
	|ГДЕ
	|	СчетНаОплату.Ссылка = &СчетНаОплату";
	
	Запрос.УстановитьПараметр("СчетНаОплату", ОбъектПечати);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСчета = Результат[0];
	
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеСчета, "СчетНаОплату.");
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеСчета, "СчетНаОплату.Ответственный.");
	
	ЗаполнитьЗначенияПараметровОрганизации(ОписаниеПараметров, "СчетНаОплату.Организация.", ДанныеСчета.СчетНаОплатуОрганизация, ОбъектПечати);
	
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияДополнительныхРеквизитов(ОписаниеПараметров, "СчетНаОплату.", ДанныеСчета.СчетНаОплатуСсылка);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияДополнительныхРеквизитов(ОписаниеПараметров, "СчетНаОплату.Ответственный.", ДанныеСчета.СчетНаОплатуОтветственный);
	
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияКонтактнойИнформации(ОписаниеПараметров, "СчетНаОплату.Ответственный.", ДанныеСчета.СчетНаОплатуОтветственныйФизЛицо);
	
	ПриВыводеТаблицыПараметровШаблона(ДополнительныеПараметры, "Запасы", ОписаниеПараметров);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПараметровКонтрагента(Контрагент, ОписаниеПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.Ответственный КАК КонтрагентОтветственный,
	|	Контрагенты.Ответственный.Физлицо КАК КонтрагентОтветственныйФизлицо,
	|	Контрагенты.Ответственный.Наименование КАК ОтветственныйФИО,
	|	Контрагенты.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	|	Контрагенты.БанковскийСчетПоУмолчанию КАК КонтрагентБанковскийСчетПоУмолчанию,
	|	Контрагенты.БанковскийСчетПоУмолчанию.НомерСчета КАК КонтрагентБанковскийСчетПоУмолчаниюНомерСчета,
	|	Контрагенты.БанковскийСчетПоУмолчанию.Банк.Наименование КАК КонтрагентБанковскийСчетПоУмолчаниюБанкНаименование,
	|	Контрагенты.БанковскийСчетПоУмолчанию.Банк.КоррСчет КАК КонтрагентБанковскийСчетПоУмолчаниюБанкКоррСчет,
	|	Контрагенты.БанковскийСчетПоУмолчанию.Банк.СВИФТБИК КАК КонтрагентБанковскийСчетПоУмолчаниюБанкСВИФТБИК,
	|	Контрагенты.БанковскийСчетПоУмолчанию.Банк.Код КАК КонтрагентБанковскийСчетПоУмолчаниюБанкКод,
	|	Контрагенты.ИНН КАК КонтрагентИНН,
	|	Контрагенты.КПП КАК КонтрагентКПП,
	|	Контрагенты.КодПоОКПО КАК КонтрагентКодПоОКПО,
	|	Контрагенты.РегистрационныйНомер КАК КонтрагентРегистрационныйНомер,
	|	Контрагенты.СвидетельствоСерияНомер КАК КонтрагентСвидетельствоСерияНомер,
	|	Контрагенты.СвидетельствоДатаВыдачи КАК КонтрагентСвидетельствоДатаВыдачи,
	|	Контрагенты.ДатаРождения КАК КонтрагентДатаРождения,
	|	Контрагенты.ДокументУдостоверяющийЛичность КАК КонтрагентДокументУдостоверяющийЛичность,
	|	Контрагенты.ФИО КАК КонтрагентФИОФизЛица,
	|	Контрагенты.КонтактноеЛицоПодписант КАК КонтрагентКонтактноеЛицоПодписантСсылка,
	|	Контрагенты.КонтактноеЛицоПодписант.Наименование КАК КонтрагентКонтактноеЛицоПодписантНаименование,
	|	Контрагенты.КонтактноеЛицоПодписант.ДатаРождения КАК КонтрагентКонтактноеЛицоПодписантДатаРождения,
	|	СвязиКонтрагентКонтактПодписант.Должность КАК КонтрагентКонтактноеЛицоПодписантДолжность,
	|	Контрагенты.КонтактноеЛицоПодписант.ДокументУдостоверяющийЛичность КАК КонтрагентКонтактноеЛицоПодписантДокументУдостоверяющийЛичность,
	|	Контрагенты.КонтактноеЛицо КАК КонтрагентКонтактноеЛицоСсылка,
	|	Контрагенты.КонтактноеЛицо.Наименование КАК КонтрагентКонтактноеЛицоНаименование,
	|	Контрагенты.КонтактноеЛицо.ДатаРождения КАК КонтрагентКонтактноеЛицоДатаРождения,
	|	СвязиКонтрагентКонтактКонтактноеЛицо.Должность КАК КонтрагентКонтактноеЛицоДолжность,
	|	Контрагенты.КонтактноеЛицо.ДокументУдостоверяющийЛичность КАК КонтрагентКонтактноеЛицоДокументУдостоверяющийЛичность
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтактКонтактноеЛицо
	|		ПО Контрагенты.Ссылка = СвязиКонтрагентКонтактКонтактноеЛицо.Контрагент
	|			И (СвязиКонтрагентКонтактКонтактноеЛицо.Контакт = Контрагенты.Ссылка.КонтактноеЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтактПодписант
	|		ПО Контрагенты.Ссылка = СвязиКонтрагентКонтактПодписант.Контрагент
	|			И (СвязиКонтрагентКонтактПодписант.Контакт = Контрагенты.Ссылка.КонтактноеЛицоПодписант)
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКонтрагента = Результат[0];
	
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеКонтрагента, "СчетНаОплату.Контрагент.");
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеКонтрагента, "СчетНаОплату.Контрагент.КонтрагентБанковскийСчетПоУмолчаниюПодробно.");
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеКонтрагента, "СчетНаОплату.Контрагент.Ответственный.");
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеКонтрагента, "СчетНаОплату.Контрагент.КонтактноеЛицо.");
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеКонтрагента, "СчетНаОплату.Контрагент.КонтактноеЛицоПодписант.");
	
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияДополнительныхРеквизитов(ОписаниеПараметров, "СчетНаОплату.Контрагент.", ДанныеКонтрагента.Ссылка);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияДополнительныхРеквизитов(ОписаниеПараметров, "СчетНаОплату.Контрагент.Ответственный.", ДанныеКонтрагента.КонтрагентОтветственный);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияДополнительныхРеквизитов(ОписаниеПараметров, "СчетНаОплату.Контрагент.КонтактноеЛицо.", ДанныеКонтрагента.КонтрагентКонтактноеЛицоСсылка);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияДополнительныхРеквизитов(ОписаниеПараметров, "СчетНаОплату.Контрагент.КонтактноеЛицоПодписант.", ДанныеКонтрагента.КонтрагентКонтактноеЛицоПодписантСсылка);
	
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияКонтактнойИнформации(ОписаниеПараметров, "СчетНаОплату.Контрагент.", ДанныеКонтрагента.Ссылка);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияКонтактнойИнформации(ОписаниеПараметров, "СчетНаОплату.Контрагент.Ответственный.", ДанныеКонтрагента.КонтрагентОтветственныйФизлицо);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияКонтактнойИнформации(ОписаниеПараметров, "СчетНаОплату.Контрагент.КонтактноеЛицо.", ДанныеКонтрагента.КонтрагентКонтактноеЛицоСсылка);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияКонтактнойИнформации(ОписаниеПараметров, "СчетНаОплату.Контрагент.КонтактноеЛицоПодписант.", ДанныеКонтрагента.КонтрагентКонтактноеЛицоПодписантСсылка);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПараметровОрганизации(ОписаниеПараметров, Префикс, Организация, Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Документ.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|			ТОГДА Документ.БанковскийСчет
	|		ИНАЧЕ Организации.БанковскийСчетПоУмолчанию
	|	КОНЕЦ КАК БанковскийСчет,
	|	ВЫБОР
	|		КОГДА Документ.ПодписьГлавногоБухгалтера <> ЗНАЧЕНИЕ(Справочник.Подписи.ПустаяСсылка)
	|			ТОГДА Документ.ПодписьГлавногоБухгалтера
	|		ИНАЧЕ Организации.ПодписьГлавногоБухгалтера
	|	КОНЕЦ КАК ПодписьГлавногоБухгалтера,
	|	ВЫБОР
	|		КОГДА Документ.ПодписьРуководителя <> ЗНАЧЕНИЕ(Справочник.Подписи.ПустаяСсылка)
	|			ТОГДА Документ.ПодписьРуководителя
	|		ИНАЧЕ Организации.ПодписьРуководителя
	|	КОНЕЦ КАК ПодписьРуководителя
	|ПОМЕСТИТЬ ДанныеПечати
	|ИЗ
	|	Документ.СчетНаОплату КАК Документ,
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Документ.Ссылка = &Документ
	|	И Организации.Ссылка = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.НаименованиеПолное КАК ОрганизацияНаименование,
	|	Организации.ИНН КАК ОрганизацияИНН,
	|	Организации.КПП КАК ОрганизацияКПП,
	|	Организации.ОГРН КАК ОрганизацияОГРН,
	|	Организации.КодПоОКАТО КАК ОрганизацияКодПоОКАТО,
	|	Организации.КодОКВЭД КАК ОрганизацияКодОКВЭД,
	|	Организации.КодПоОКПО КАК ОрганизацияКодПоОКПО,
	|	Организации.КодПоОКТМО КАК ОрганизацияКодПоОКТМО,
	|	ДанныеПечати.ПодписьРуководителя.ДействуетНаОсновании КАК ПодписьРуководителяДействуетНаОсновании,
	|	ДанныеПечати.ПодписьРуководителя.Должность КАК ПодписьРуководителяДолжность,
	|	ДанныеПечати.ПодписьРуководителя.РасшифровкаПодписи КАК ПодписьРуководителяРасшифровкаПодписи,
	|	ДанныеПечати.ПодписьРуководителя.ФизическоеЛицо.Наименование КАК ПодписьРуководителяФизическоеЛицоНаименование,
	|	ДанныеПечати.ПодписьГлавногоБухгалтера.ДействуетНаОсновании КАК ПодписьГлавногоБухгалтераДействуетНаОсновании,
	|	ДанныеПечати.ПодписьГлавногоБухгалтера.Должность КАК ПодписьГлавногоБухгалтераДолжность,
	|	ДанныеПечати.ПодписьГлавногоБухгалтера.РасшифровкаПодписи КАК ПодписьГлавногоБухгалтераРасшифровкаПодписи,
	|	ДанныеПечати.ПодписьГлавногоБухгалтера.ФизическоеЛицо.Наименование КАК ПодписьГлавногоБухгалтераФизическоеЛицоНаименование,
	|	ДанныеПечати.БанковскийСчет КАК ОрганизацияБанковскийСчетПоУмолчанию,
	|	ДанныеПечати.БанковскийСчет.Банк.СВИФТБИК КАК ОрганизацияБанковскийСчетПоУмолчаниюБанкСВИФТБИК,
	|	ДанныеПечати.БанковскийСчет.Банк.Наименование КАК ОрганизацияБанковскийСчетПоУмолчаниюБанкНаименование,
	|	ДанныеПечати.БанковскийСчет.Банк.Код КАК ОрганизацияБанковскийСчетПоУмолчаниюБанкКод,
	|	ДанныеПечати.БанковскийСчет.Банк.КоррСчет КАК ОрганизацияБанковскийСчетПоУмолчаниюБанкКоррСчет,
	|	ДанныеПечати.БанковскийСчет.НомерСчета КАК ОрганизацияБанковскийСчетПоУмолчаниюНомерСчета
	|ИЗ
	|	Справочник.Организации КАК Организации,
	|	ДанныеПечати КАК ДанныеПечати
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОрганизации = Результат[0];
	
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеОрганизации, Префикс);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеОрганизации, Префикс + "ПодписьРуководителя.");
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеОрганизации, Префикс + "ПодписьГлавногоБухгалтера.");
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтрокиТаблицыЗначения(ОписаниеПараметров, Результат.Колонки, ДанныеОрганизации, Префикс + "ОрганизацияБанковскийСчетПоУмолчаниюПодробно.");
	
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияДополнительныхРеквизитов(ОписаниеПараметров, Префикс, Организация);
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияКонтактнойИнформации(ОписаниеПараметров, Префикс, Организация);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧастиДокумента(СтрокаТабличнойЧасти, ОписаниеПараметров, СтруктураИтогов, ПрефиксПараметраСтроки, ПараметрыВывода)
	
	Если СтрокаТабличнойЧасти.ЭтоНабор Тогда
		НомерСтроки = 0;
	Иначе
		СтруктураИтогов.НомерСтроки = СтруктураИтогов.НомерСтроки+1;
		НомерСтроки = СтруктураИтогов.НомерСтроки;
	КонецЕсли;
	
	ЭтоВыводВФайл = ПараметрыВывода <> Неопределено;
	
	Если ЭтоВыводВФайл Тогда
		ПараметрыНоменклатуры = Новый Структура;
		ПараметрыНоменклатуры.Вставить("Содержание", СтрокаТабличнойЧасти.Содержание);
		ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", СтрокаТабличнойЧасти.ПредставлениеНоменклатуры);
		ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", СтрокаТабличнойЧасти.Характеристика);
		ПараметрыНоменклатуры.Вставить("ПредставлениеАртикула", СтрокаТабличнойЧасти.Артикул);
		ПараметрыНоменклатуры.Вставить("НеобходимоВыделитьКакСоставНабора", СтрокаТабличнойЧасти.НеобходимоВыделитьКакСоставНабора);
		
		Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
			Скидка         = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
			СуммаБезСкидки = Скидка;
		ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0 И СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0 Тогда
			Скидка         = 0;
			СуммаБезСкидки = СтрокаТабличнойЧасти.Сумма;
		Иначе
			Скидка         = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена - СтрокаТабличнойЧасти.Сумма; // АвтоматическиеСкидки;
			СуммаБезСкидки = СтрокаТабличнойЧасти.Сумма + Скидка;
		КонецЕсли;
		
		ДанныеПечати = Новый Соответствие;
		ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "НомерСтроки",  НомерСтроки);
		ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "Номенклатура", ПечатьДокументовУНФ.ПредставлениеНоменклатуры(ПараметрыНоменклатуры));
		ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "Количество",   СтрокаТабличнойЧасти.Количество);
		ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "Цена",         СтрокаТабличнойЧасти.Цена);
		ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "Сумма",   СтрокаТабличнойЧасти.Сумма);
		ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "СтавкаНДС",   СтрокаТабличнойЧасти.СтавкаНДС);
		ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "СуммаНДС",   СтрокаТабличнойЧасти.СуммаНДС);
		ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "ПроцентАвтоматическойСкидки",   СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки);
		ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "СуммаАвтоматическойСкидки",   СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки);
		ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "ПроцентСкидкиНаценки",   СтрокаТабличнойЧасти.ПроцентСкидкиНаценки);
		ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "СуммаСкидкиНаценки",   СтрокаТабличнойЧасти.СуммаСкидкиНаценки);
		ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "Всего",   СтрокаТабличнойЧасти.Всего);
		ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "Партия",   СтрокаТабличнойЧасти.Партия);
		ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "СуммаОбщейСкидки", Скидка);
		ДанныеПечати.Вставить(ПрефиксПараметраСтроки + "СуммаБезСкидки", СуммаБезСкидки);
		
		ПрефиксПараметраНоменклатура = ПрефиксПараметраСтроки + "Номенклатура.";
		
		ЗаполнитьДанныеПечатиНоменклатуры(ДанныеПечати, ПрефиксПараметраНоменклатура, СтрокаТабличнойЧасти.Номенклатура);
		ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияДополнительныхРеквизитов(ОписаниеПараметров, ПрефиксПараметраНоменклатура, СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьДанныеПечатиИзображениеНоменклатуры(ОписаниеПараметров, СтрокаТабличнойЧасти.НоменклатураФайлКартинки, ПрефиксПараметраНоменклатура + "Изображение", ДанныеПечати, ПараметрыВывода);
		
		ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияИзСтруктуры(ОписаниеПараметров, ДанныеПечати);
	КонецЕсли;
	
	Если НЕ СтрокаТабличнойЧасти.ЭтоНабор Тогда
		СтруктураИтогов.Сумма      = СтруктураИтогов.Сумма      + СтрокаТабличнойЧасти.Сумма;
		СтруктураИтогов.СуммаНДС   = СтруктураИтогов.СуммаНДС   + СтрокаТабличнойЧасти.СуммаНДС;
		СтруктураИтогов.Всего      = СтруктураИтогов.Всего      + СтрокаТабличнойЧасти.Всего;
		СтруктураИтогов.Количество = СтруктураИтогов.Количество + 1;
		СтруктураИтогов.Вес        = СтруктураИтогов.Вес + СтрокаТабличнойЧасти.Вес;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПечатиНоменклатуры(ДанныеПечати, Префикс, Номенклатура)
	
	РеквизитыНоменклатуры = "Код,Артикул,Поставщик,СтранаПроисхождения,Комментарий,Объем,Вес";
	
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, РеквизитыНоменклатуры);
	Иначе
		ДанныеНоменклатуры = Новый Структура(РеквизитыНоменклатуры);
	КонецЕсли;
	
	ДанныеПечати.Вставить(Префикс + "Код", ДанныеНоменклатуры.Код);
	ДанныеПечати.Вставить(Префикс + "НоменклатураАртикул", ДанныеНоменклатуры.Артикул);
	ДанныеПечати.Вставить(Префикс + "Поставщик", ДанныеНоменклатуры.Поставщик);
	ДанныеПечати.Вставить(Префикс + "СтранаПроисхождения", ДанныеНоменклатуры.СтранаПроисхождения);
	ДанныеПечати.Вставить(Префикс + "Комментарий", ДанныеНоменклатуры.Комментарий);
	ДанныеПечати.Вставить(Префикс + "Объем", ДанныеНоменклатуры.Объем);
	ДанныеПечати.Вставить(Префикс + "Вес", ДанныеНоменклатуры.Вес);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПечатиИзображениеНоменклатуры(ОписаниеПараметров, ФайлКартинки, ИмяПараметра, ДанныеПечати, ПараметрыВывода)
	
	ПараметрИзображениеНоменклатуры = ШаблоныПечатиОфисныхДокументов.ОписаниеПараметра(ОписаниеПараметров, ИмяПараметра);
	
	Если ПараметрИзображениеНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШаблоныПечатиОфисныхДокументов.ЗаполнитьЗначенияПараметраИзображение(ПараметрИзображениеНоменклатуры, ФайлКартинки, ПараметрыВывода);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли