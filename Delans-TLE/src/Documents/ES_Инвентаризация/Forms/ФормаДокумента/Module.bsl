&НаКлиенте
Перем ВыполняетсяПроведение;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда //это новый документ
		Объект.Ответственный 	= Пользователи.ТекущийПользователь();
		Объект.Дата				= ТекущаяДата();
		Объект.Склад 			= ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Склад);
		Объект.Ячейка 			= ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ЯчейкаОсновная);
	КонецЕсли;

	ГрузыВРазрезеЗаказов = Истина;
	ИспользоватьЯчейки = ПолучитьФункциональнуюОпцию("УчетПоЯчейкам");
	УстановитьУсловноеОформление();

	//Лохоня Ю.А.
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаВажныеКомандыИнвентаризации);
	// Конец СтандартныеПодсистемы.Печать
			
КонецПроцедуры

//&НаКлиенте 
//Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
//	
//	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект)
//	
//КонецПроцедуры

//EFSOL Тушинский ГЛ 08.08.18 +
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
	// УНФ
	СтатистикаИспользованияФормКлиент.ДобавитьСтатистикуПодключаемойКоманды(ЭтотОбъект, Команда);
	// Конец УНФ
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
//EFSOL -

&НаКлиенте
Процедура НайтиЗаказПоШтрихКоду(Команда)
	ОчиститьСообщения();	
	ТекШтрихкод = "";	
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ОбработатьШтрихкодЗаказаЗавершение", ЭтаФорма), ТекШтрихкод, НСтр("ru = 'Введите штрихкод заказа'"));
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	Для каждого Стр Из Объект.Заказы Цикл	
		Стр.Проверен = Истина;
		//Стр.Недостача = Ложь;
		Стр.МестФакт = 0;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметки(Команда)
	Для каждого Стр Из Объект.Заказы Цикл		
		Стр.Проверен = Ложь;
		//Стр.Недостача = Истина;
		Стр.МестФакт = 0;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодЗаказаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ПустаяСтрока(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьЯчейки И НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Нстр("ru='Укажите склад'");
		Сообщение.Поле = "Объект.Склад";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	КритерийПоиска = ПолучитьКритерийПоиска();
	Успешно = Истина;
	
	НайденныеСтроки = Объект.Заказы.НайтиСтроки(Новый Структура(КритерийПоиска, Результат));
	Если НайденныеСтроки.Количество() = 0 Тогда
		ДанныеПоЗаказу = НайтиЗаказПоШтрихКодуНаСервере(Результат);
		Если НЕ ЗначениеЗаполнено(ДанныеПоЗаказу.Заказ) Тогда
			Если ДанныеПоЗаказу.Свойство("Сообщение") Тогда
				Сообщить(ДанныеПоЗаказу.Сообщение);
			Иначе
				Сообщить("Заказ не найден");
			КонецЕсли;
			Успешно = Ложь;
			Возврат;
		КонецЕсли;
		
		НоваяСтрока 		= Объект.Заказы.Добавить();
		НоваяСтрока.Заказ 	= ДанныеПоЗаказу.Заказ;
		НоваяСтрока.Излишек = Истина;
		ЗаполнитьТЧНаСервере(ДанныеПоЗаказу.Заказ);
		НоваяСтрока.МестФакт = НоваяСтрока.МестФакт +1;
		//ЭР Несторук С.И. 26.10.2017 15:50:33 {
		НоваяСтрока.Проверен = Истина; //когда добавляю излишек, то должен ставиться сразу как проверен.
		//}ЭР Несторук С.И.
		
		Если НоваяСтрока.МестФакт = НоваяСтрока.Мест ИЛИ НоваяСтрока.Мест = 0 Тогда
			НоваяСтрока.Проверен = Истина;
			//НоваяСтрока.Недостача = Ложь;
			НоваяСтрока.МестФакт = 0;
		КонецЕсли;
		
	Иначе
		Если НЕ НайденныеСтроки[0].Проверен Тогда
			НайденныеСтроки[0].МестФакт = НайденныеСтроки[0].МестФакт +1;
			Если НайденныеСтроки[0].МестФакт = НайденныеСтроки[0].Мест ИЛИ НайденныеСтроки[0].Мест = 0 Тогда
				НайденныеСтроки[0].Проверен = Истина;
				//НайденныеСтроки[0].Недостача = Ложь;
				НайденныеСтроки[0].МестФакт = 0;
			КонецЕсли;
		КонецЕсли;
		
		Индекс = НайденныеСтроки[0].ПолучитьИдентификатор();
		ЭтаФорма.Элементы.Заказы.ТекущаяСтрока = Индекс;
	КонецЕсли;
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКритерийПоиска()

	Критерий = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ПоискЗаказовПоВхНакладной);
	
	Если Не ЗначениеЗаполнено(Критерий) Тогда
		Возврат "НомерНакладной";
	ИначеЕсли Критерий = Истина Тогда
		Возврат "ВхНакладная";
	Иначе
		Возврат "НомерНакладной";
	КонецЕсли;
	 


КонецФункции // ПолучитьКритерийПоиска()

&НаСервереБезКонтекста
Функция НайтиЗаказПоШтрихКодуНаСервере(ТекШтрихКод)
	
	ИскатьПоВхНакладной = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ПоискЗаказовПоВхНакладной);
	
	Если ЗначениеЗаполнено(ИскатьПоВхНакладной) Тогда
		Если ИскатьПоВхНакладной Тогда
			Условие = "ES_ВхНакладная";
		Иначе
			Условие = "ES_НомерНакладной";
		КонецЕсли;
	Иначе 
		Условие = "ES_НомерНакладной";
	КонецЕсли;

	
	
	Структура = Новый Структура ("Заказ, ДатаДоставки, НомерНакладной, ВхНакладная", Неопределено, Дата(1, 1, 1), "", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Заказ,
	|	ЗаказПокупателя.ES_ВхНакладная КАК ВхНакладная,
	|	ЗаказПокупателя.ES_НомерНакладной КАК НомерНакладной,
	|	ЗаказПокупателя.ES_ДатаДоставки КАК ДатаДоставки
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя."+Условие+" = &ТекШтрихКод
	|	И ЗаказПокупателя.ПометкаУдаления = ЛОЖЬ";

	
	Запрос.УстановитьПараметр("ТекШтрихКод", ТекШтрихКод);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
					
		Структура = Новый Структура ("Заказ, ДатаДоставки, НомерНакладной, ВхНакладная" , Выборка.Заказ, Выборка.ДатаДоставки, Выборка.НомерНакладной, Выборка.ВхНакладная);
	КонецЕсли;	
	
	Возврат Структура;
		
КонецФункции

&НаСервере
Процедура ЗаполнитьТЧНаСервере(Заказ)
	
	
	НайденнаяСтрока = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", Заказ));
	Если НайденнаяСтрока.Количество() > 0 Тогда
		НоваяСтрока = НайденнаяСтрока[0];
	Иначе
		Возврат;
	КонецЕсли;
	
	НоваяСтрока.НомерНакладной 	= Заказ.ES_НомерНакладной;
	НоваяСтрока.ВхНакладная 	= Заказ.ES_ВхНакладная;
	НоваяСтрока.ДатаДоставки 	= Заказ.ES_ДатаДоставки;
	
	//МассивЗаказов = Новый Массив;
	//МассивЗаказов.Добавить(Заказ);	
	//Данные = ES_ОбщегоНазначения.ПолучитьДанныеПоЗаказам(МассивЗаказов);
	//ВыборкаЗаказ = Данные.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЯчейкаКДоставке = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ЯчейкаКВыдаче);
	ЯчейкаОсновная = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ЯчейкаОсновная);
	ЯчейкаПроблема = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ЯчейкаПроблема);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ES_ДанныеПоЗаказамСрезПоследних.Заказ,
	|	ES_ДанныеПоЗаказамСрезПоследних.ВхНакладная,
	|	ES_ДанныеПоЗаказамСрезПоследних.НомерНакладной,
	|	ES_ДанныеПоЗаказамСрезПоследних.ДатаДоставки,
	|	ES_ДанныеПоЗаказамСрезПоследних.КоличествоМест,
	|	ES_ДанныеПоЗаказамСрезПоследних.Проблема
	|ПОМЕСТИТЬ ВТ_Заказ
	|ИЗ
	|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(, Заказ = &Заказ) КАК ES_ДанныеПоЗаказамСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Значение, ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)) КАК Ячейка,
	|	ВТ_Заказ.Заказ КАК Заказ,
	|	ВТ_Заказ.ВхНакладная КАК ВхНакладная,
	|	ВТ_Заказ.НомерНакладной КАК НомерНакладной,
	|	ВТ_Заказ.ДатаДоставки КАК ДатаДоставки,
	|	ВТ_Заказ.КоличествоМест КАК КоличествоМест,
	|	ES_НоменклатураВЗаказахСрезПоследних.Период,
	|	ES_НоменклатураВЗаказахСрезПоследних.Регистратор,
	|	ES_НоменклатураВЗаказахСрезПоследних.НомерСтроки,
	|	ES_НоменклатураВЗаказахСрезПоследних.Активность,
	|	ES_НоменклатураВЗаказахСрезПоследних.Номенклатура,
	|	ES_НоменклатураВЗаказахСрезПоследних.Характеристика,
	|	ES_НоменклатураВЗаказахСрезПоследних.Партия,
	|	ES_НоменклатураВЗаказахСрезПоследних.ЕдиницаИзмерения,
	|	ES_НоменклатураВЗаказахСрезПоследних.ТипНоменклатурыЗапас,
	|	ES_НоменклатураВЗаказахСрезПоследних.Количество,
	|	ES_НоменклатураВЗаказахСрезПоследних.НППлан,
	|	ES_НоменклатураВЗаказахСрезПоследних.Содержание,
	|	ES_НоменклатураВЗаказахСрезПоследних.Цена,
	|	ES_НоменклатураВЗаказахСрезПоследних.ПроцентСкидкиНаценки,
	|	ES_НоменклатураВЗаказахСрезПоследних.Вес,
	|	ES_НоменклатураВЗаказахСрезПоследних.Объем,
	|	ES_НоменклатураВЗаказахСрезПоследних.ОбъемныйВес,
	|	ES_НоменклатураВЗаказахСрезПоследних.ОбьявленнаяСтоимость,
	|	ES_НоменклатураВЗаказахСрезПоследних.Опасность,
	|	ES_НоменклатураВЗаказахСрезПоследних.Артикул,
	|	ES_НоменклатураВЗаказахСрезПоследних.Штрихкод,
	|	ES_НоменклатураВЗаказахСрезПоследних.СтавкаНДС,
	|	ES_НоменклатураВЗаказахСрезПоследних.СуммаНДС,
	|	ЕСТЬNULL(ВТ_Заказ.Проблема, ЛОЖЬ) КАК Проблема
	|ИЗ
	|	ВТ_Заказ КАК ВТ_Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
	|				,
	|				РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Ячейка)
	|					И Заказ В
	|						(ВЫБРАТЬ
	|							ВТ_Заказ.Заказ
	|						ИЗ
	|							ВТ_Заказ КАК ВТ_Заказ)) КАК ES_ИзменяемыеРеквизитыЗаказовСрезПоследних
	|		ПО ВТ_Заказ.Заказ = ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_НоменклатураВЗаказах.СрезПоследних(
	|				,
	|				ДокументДоставки В
	|					(ВЫБРАТЬ
	|						ВТ_Заказ.Заказ
	|					ИЗ
	|						ВТ_Заказ КАК ВТ_Заказ)) КАК ES_НоменклатураВЗаказахСрезПоследних
	|		ПО ВТ_Заказ.Заказ = ES_НоменклатураВЗаказахСрезПоследних.ДокументДоставки
	|ИТОГИ
	|	МАКСИМУМ(Ячейка),
	|	МАКСИМУМ(ВхНакладная),
	|	МАКСИМУМ(НомерНакладной),
	|	МАКСИМУМ(ДатаДоставки),
	|	МАКСИМУМ(КоличествоМест),
	|	МАКСИМУМ(Проблема)
	|ПО
	|	Заказ";
		
	
	Запрос.УстановитьПараметр("Заказ", Заказ); 	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗаказ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
		
	Если ВыборкаЗаказ.Следующий() Тогда
		
		НоваяСтрока.НомерНакладной 	= ВыборкаЗаказ.НомерНакладной;
		НоваяСтрока.ВхНакладная 	= ВыборкаЗаказ.ВхНакладная;
		НоваяСтрока.ДатаДоставки 	= ВыборкаЗаказ.ДатаДоставки;
		НоваяСтрока.Мест 			= ВыборкаЗаказ.КоличествоМест;
		НоваяСтрока.ЯчейкаТекущая	= ВыборкаЗаказ.Ячейка;
		НоваяСтрока.Заказ 			= ВыборкаЗаказ.Заказ;

		
		Выборка = ВыборкаЗаказ.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
				СтрокаГрузы = Объект.Грузы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаГрузы,Выборка);				
			КонецЕсли;
			
		КонецЦикла;

		
	КонецЕсли;
	
	Если КонецДня(ВыборкаЗаказ.ДатаДоставки) = КонецДня(Объект.Дата+24*3600) Тогда
		НоваяСтрока.ЯчейкаПолучатель		= ЯчейкаКДоставке;
	Иначе
		НоваяСтрока.ЯчейкаПолучатель		= ЯчейкаОсновная;
	КонецЕсли;
	
	Если ВыборкаЗаказ.Проблема Тогда
		НоваяСтрока.ЯчейкаПолучатель		= ЯчейкаПроблема;
	КонецЕсли;
				
	
	//Если КонецДня(НоваяСтрока.ДатаДоставки) = КонецДня(Объект.Дата + 24*60*60) Тогда
	//	НоваяСтрока.ЯчейкаПолучатель = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ЯчейкаКВыдаче);
	//Иначе
	//	Если ЗначениеЗаполнено(Объект.Ячейка) Тогда
	//		НоваяСтрока.ЯчейкаПолучатель = Объект.Ячейка;
	//	Иначе
	//		НоваяСтрока.ЯчейкаПолучатель = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ЯчейкаОсновная);	
	//	КонецЕсли;
	//КонецЕсли;
	
	//НоваяСтрока.Недостача = Истина;	

	УстановитьУсловноеОформление();

КонецПроцедуры

&НаКлиенте
Процедура ЗаказыЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Уникальность = "ФормаВыбораЗаказаВДокументИнвентаризация";
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьТЧДаннымиЗаказа",ЭтаФорма);
	//ПараметрыФормы = Новый Структура("ВызваноИзES_Приемка", Истина);
	ПараметрыФормы = Новый Структура();	
	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаВыбора", ПараметрыФормы , ЭтаФорма, Уникальность, , , Оповещение);

КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьТЧДаннымиЗаказа(Заказ, Параметры) Экспорт
	
	
	// Запрет добавления одного заказа дважды
	НайденныеСтроки = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", Заказ));
	Если НайденныеСтроки.Количество() >= 1 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "" + Заказ + " уже есть в табличной части";
		Сообщение.Сообщить();
		
		Возврат;
	Иначе
		Элементы.Заказы.ТекущиеДанные.Заказ = Заказ;
		//Элементы.Заказы.ТекущиеДанные.Излишек = Истина;
		ЗаполнитьТЧНаСервере(Заказ);		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)
	Если Объект.Заказы.Количество() > 0 Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("КомандаЗаполнитьПоОстаткамНаСкладеЗавершение", ЭтотОбъект), НСтр("ru = 'Табличная часть будет очищена! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
        Возврат; 
	КонецЕсли;

	ЗаполнитьПоОстаткамНаСкладе();
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоОстаткамНаСкладеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли; 
    
    ЗаполнитьПоОстаткамНаСкладе();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамНаСкладе()
	
	Объект.Заказы.Очистить();
	Объект.Грузы.Очистить();
	
	Запрос = Новый Запрос;

	Если ЗначениеЗаполнено(Объект.Ячейка) Тогда
		Запрос.Текст = CформироватьТекстЗапросаПоОстаткамВЯчейкеНаСкладе();
		Запрос.УстановитьПараметр("Ячейка", Объект.Ячейка);
	Иначе
		Запрос.Текст = CформироватьТекстЗапросаПоОстаткамНаСкладе();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Период", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Склад", 	Объект.Склад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.Заказы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ЗаполнитьТЧНаСервере(Выборка.Заказ);	

	КонецЦикла;
		
КонецПроцедуры // ЗаполнитьПоОстаткамНаСкладе()

Функция CформироватьТекстЗапросаПоОстаткамВЯчейкеНаСкладе()
	
	ТекстЗапроса =	
	"ВЫБРАТЬ
	|	ИСТИНА КАК ПризнакВЯчейке,
	|	ES_ЗаказыНаСкладеОстатки.Заказ КАК Заказ,
	|	ES_ЗаказыНаСкладеОстатки.Склад КАК Склад,
	|	СУММА(ES_ЗаказыНаСкладеОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_Заказы
	|ИЗ
	|	РегистрНакопления.ES_ЗаказыНаСкладе.Остатки(&Период, Склад = &Склад) КАК ES_ЗаказыНаСкладеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ES_ЗаказыНаСкладеОстатки.Склад,
	|	ES_ЗаказыНаСкладеОстатки.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Заказы.ПризнакВЯчейке КАК ПризнакВЯчейке,
	|	ВТ_Заказы.Заказ КАК Заказ,
	|	ВТ_Заказы.Склад КАК Склад,
	|	ВТ_Заказы.КоличествоОстаток КАК КоличествоОстаток,
	|	ЕСТЬNULL(ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Значение, ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)) КАК Ячейка
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
	|				,
	|				Заказ В
	|						(ВЫБРАТЬ
	|							ВТ_Заказы.Заказ
	|						ИЗ
	|							ВТ_Заказы КАК ВТ_Заказы)
	|					И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Ячейка)) КАК ES_ИзменяемыеРеквизитыЗаказовСрезПоследних
	|		ПО ВТ_Заказы.Заказ = ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Заказ
	|ГДЕ
	|	ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Значение = &Ячейка";
	
	Возврат ТекстЗапроса;
	
КонецФункции // CформироватьТекстЗапросаПоОстаткамНаСкладе()


Функция CформироватьТекстЗапросаПоОстаткамНаСкладе()
	
	ТекстЗапроса =	
	"ВЫБРАТЬ
	|	ЛОЖЬ КАК ПризнакВЯчейке,
	|	ES_ЗаказыНаСкладеОстатки.Заказ,
	|	ES_ЗаказыНаСкладеОстатки.Склад,
	|	СУММА(ES_ЗаказыНаСкладеОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ES_ЗаказыНаСкладе.Остатки(&Период, Склад = &Склад) КАК ES_ЗаказыНаСкладеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ES_ЗаказыНаСкладеОстатки.Склад,
	|	ES_ЗаказыНаСкладеОстатки.Заказ";
	
	Возврат ТекстЗапроса;
	
КонецФункции // CформироватьТекстЗапросаПоОстаткамНаСкладе()


&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("РежимЗаписи") Тогда
		Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда		
			Отказ = ПроверитьЗаполненниеПричиныНедостачи();
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			Если Не ВыполняетсяПроведение Тогда	
				
				КоличествоИзлишковНедостач =0;
				НужноЗадаватьВопрос = Ложь;
				//ТекстВопроса = "";
				
				Для каждого Стр ИЗ Объект.Заказы Цикл
					Если (НЕ Стр.Проверен) Тогда
						//ТекстВопроса = ТекстВопроса + "По строке " + Стр.НомерСтроки + " обнаружена недостача." + Символы.ПС;
						Сообщить(НСтр("ru='По строке " + Стр.НомерСтроки + " обнаружена недостача'"));
						НужноЗадаватьВопрос = Истина;
						КоличествоИзлишковНедостач = КоличествоИзлишковНедостач + 1;
					ИначеЕсли Стр.Излишек Тогда
						//ТекстВопроса = ТекстВопроса + "По строке " + Стр.НомерСтроки + " обнаружен излишек." + Символы.ПС;
						Сообщить(НСтр("ru='По строке " + Стр.НомерСтроки + " обнаружен излишек'"));
						НужноЗадаватьВопрос = Истина;
						КоличествоИзлишковНедостач = КоличествоИзлишковНедостач + 1;
					КонецЕсли;
				КонецЦикла;
	
				Если НужноЗадаватьВопрос Тогда
					Отказ = Истина;
					Оповещение = Новый ОписаниеОповещения("ПровестиДокументВопросЗавершение", ЭтотОбъект); 
					//ТекстВопроса = ТекстВопроса + "Провести документ?";
					ТекстВопроса = НСтр("ru='По документу обнаружены недостачи/излишки ("+КоличествоИзлишковНедостач +"). Продолжить?'");
					ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокументВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполняетсяПроведение = Истина;
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		ЭтаФорма.Записать(ПараметрыЗаписи);
	КонецЕсли;
КонецПроцедуры	


&НаКлиенте
Функция ПроверитьЗаполненниеПричиныНедостачи()
	
	Отказ = Ложь;
	Для каждого Стр ИЗ Объект.Заказы Цикл
		Если (НЕ Стр.Проверен) И (НЕ ЗначениеЗаполнено(Стр.ПричинаНедостачи)) Тогда
			Сообщить(НСтр("ru='Не указана причина недостачи в строке " + Стр.НомерСтроки + "'"));
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Отказ;
	 
КонецФункции

&НаКлиенте
Процедура ЗаказыПроверенПриИзменении(Элемент)
	ТекСтрока =Элементы.Заказы.ТекущиеДанные;
	//ТекСтрока.Недостача = НЕ ТекСтрока.Проверен;
	ТекСтрока.МестФакт = ?(ТекСтрока.Проверен, 0,ТекСтрока.МестФакт); 	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление() 
		
	УсловноеОформление.Элементы.Очистить();
	ЦветФона = Новый Цвет(51, 204, 204);
	
	ЯчейкаКВыдаче = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.ЯчейкаКВыдаче);
	
	СписокЗаказов = Новый СписокЗначений;
	Для каждого Стр ИЗ Объект.Заказы Цикл
		Если Стр.ЯчейкаПолучатель = ЯчейкаКВыдаче ИЛИ КонецДня(Стр.ДатаДоставки) = КонецДня(ТекущаяДата()+24*3600) Тогда
			СписокЗаказов.Добавить(Стр.Заказ);
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Заказы.Заказ");
	ЭлементОтбора.ПравоеЗначение = СписокЗаказов;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование = Истина;
	
	Оформление = ЭлементОформления.Поля.Элементы.Добавить();
	Оформление.Использование = Истина;
	Оформление.Поле = Новый ПолеКомпоновкиДанных("Заказы");
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);	
	
	ЦветФона = Новый Цвет(220, 20, 60);
	
	СписокЗаказов = Новый СписокЗначений;
	Для каждого Стр ИЗ Объект.Заказы Цикл
		Если НЕ((Стр.ЯчейкаПолучатель = ЯчейкаКВыдаче И Стр.ЯчейкаТекущая = Объект.Ячейка) ИЛИ (Стр.ЯчейкаТекущая = Стр.ЯчейкаПолучатель))  Тогда
			СписокЗаказов.Добавить(Стр.Заказ);
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Заказы.Заказ");
	ЭлементОтбора.ПравоеЗначение = СписокЗаказов;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование = Истина;
	
	Оформление = ЭлементОформления.Поля.Элементы.Добавить();
	Оформление.Использование = Истина;
	Оформление.Поле = Новый ПолеКомпоновкиДанных("Заказы");
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);	
	ЭлементОформления.Использование = Истина;

	
КонецПроцедуры


&НаКлиенте
Процедура ЗаказыЯчейкаПолучательПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры


&НаКлиенте
Процедура ЗаказыПриАктивизацииСтроки(Элемент)
	ТекСтрока = Элементы.Заказы.ТекущиеДанные;
	ОтборВТЧГрузы(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ОтборВТЧГрузы(ТекСтрока)
	
	ГрузыВРазрезеЗаказов = Истина;
	Если ГрузыВРазрезеЗаказов Тогда
		Если ТекСтрока <> Неопределено Тогда
			Элементы.Грузы.ОтборСтрок = Новый ФиксированнаяСтруктура("Заказ", ТекСтрока.Заказ);
		КонецЕсли;
	Иначе
		Элементы.Грузы.ОтборСтрок 			= Неопределено;
	КонецЕсли; 

КонецПроцедуры


&НаСервере
Процедура УдалитьСтрокиПоЗаказуИзДокумента(Заказ)

	//ЭР Несторук С.И. 22.12.2016 17:18:53 {
	НайденныеСтроки = Объект.Заказы.НайтиСтроки(Новый Структура("Заказ", Заказ));
	Если НайденныеСтроки.Количество() >0 Тогда
		Для каждого Стр Из НайденныеСтроки Цикл
			Объект.Заказы.Удалить(Стр);
		КонецЦикла;
	КонецЕсли;
	
	НайденныеСтроки = Объект.Грузы.НайтиСтроки(Новый Структура("Заказ", Заказ));
	Если НайденныеСтроки.Количество() >0 Тогда
		Для каждого Стр Из НайденныеСтроки Цикл
			Объект.Грузы.Удалить(Стр);
		КонецЦикла;
	КонецЕсли;
	//ЭР Несторук С.И. 22.12.2016 17:18:53 }

КонецПроцедуры


&НаКлиенте
Процедура ЗаказыПередУдалением(Элемент, Отказ)
	Заказ = Элементы.Заказы.ТекущиеДанные.Заказ;
	УдалитьСтрокиПоЗаказуИзДокумента(Заказ);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//ЭР Несторук С.И. 10.04.2019 9:32:27 {
	ES_БиллингКлиент.ПроверитьДоступностьСервисаDelans(Отказ);
	//}ЭР Несторук С.И.
КонецПроцедуры


ВыполняетсяПроведение = Ложь;
