
#Область ОписаниеПеременных

&НаКлиенте
Перем СтароеКоличествоПродукции;

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	Если Объект.Ссылка.Пустая() Тогда
		ЗаполнитьПараметрыФормы();
	КонецЕсли; 
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиПереопределяемый.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	УправлениеНебольшойФирмойСервер.УстановитьОтображаниеПодменюПечати(Элементы.ПодменюПечать);
	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	ЭтотОбъект.ОснованиеСоздания = Параметры.Основание;
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	ОбновитьСпособРаспределенияПоУмолчанию();
	ФОРезервированиеЗапасов = ПолучитьФункциональнуюОпцию("РезервированиеЗапасов");
	ФОРозница = ПолучитьФункциональнуюОпцию("УчетРозничныхПродаж");
	
	ИменаТЧ = Новый Массив;
	ИменаТЧ.Добавить(Новый Структура("ИмяПоляПроверки, ИмяПоляОформления", "Объект.Продукция.СтранаПроисхождения", "ПродукцияНомерГТД"));
	ИменаТЧ.Добавить(Новый Структура("ИмяПоляПроверки, ИмяПоляОформления", "Объект.Запасы.СтранаПроисхождения", "ЗапасыНомерГТД"));
	
	ГрузовыеТаможенныеДекларацииСервер.ПриСозданииНаСервере(ЭтаФорма, ИменаТЧ, КэшЗначений);
	КэшЗначений.Вставить("ВОРазборка", Перечисления.ВидыОперацийСборкаЗапасов.Разборка);
	КэшЗначений.Вставить("ВОСборка", Перечисления.ВидыОперацийСборкаЗапасов.Сборка);
	
	// Ячейки
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		КэшЗначений.Вставить("УчетПоЯчейкам", ПолучитьФункциональнуюОпцию("УчетПоЯчейкам"));
		ОбновитьДоступностьЯчеек();
		ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	КонецЕсли; 
	// Конец Ячейки
	
	// Установка видимости реквизитов от пользовательских настроек
	УстановитьВидимостьОтПользовательскихНастроек(ЭтотОбъект); 
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// ПодключаемоеОборудование.
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ЭлектронныеВесы", , МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	Элементы.ПродукцияЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
	
	УстановитьВидимостьИДоступностьМобильноеПриложение();
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		ЗначениеЗаполненияПодразделениеПоУмолчанию = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
	Иначе
		ЗначениеЗаполненияПодразделениеПоУмолчанию = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаПродукции) И НЕ ТолькоПросмотр Тогда
		Объект.СтруктурнаяЕдиницаПродукции = ЗначениеЗаполненияПодразделениеПоУмолчанию;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаЗапасов) И НЕ ТолькоПросмотр Тогда
		Объект.СтруктурнаяЕдиницаЗапасов = ЗначениеЗаполненияПодразделениеПоУмолчанию;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаОтходов) И НЕ ТолькоПросмотр Тогда
		Объект.СтруктурнаяЕдиницаОтходов = ЗначениеЗаполненияПодразделениеПоУмолчанию;
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Продукция");
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Запасы");
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Отходы");
	
	// Серийные номера
	ИспользоватьСерийныеНомераОстатки = РаботаССерийнымиНомерами.ИспользоватьСерийныеНомераОстатки();
	
	// Характеристики
	НоменклатураВДокументахСервер.ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик(ЭтаФорма);
	Если Параметры.Ключ.Пустая() 
		Тогда
		НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект, Истина);
		ЗаполнитьПризнакиИспользованияЭтапов();
	КонецЕсли;
	
	ТекущаяПродукция = -1;
	УстановитьКартинкиЗакладок(ЭтотОбъект);
	
	РучноеРаспределение = Объект.РучноеРаспределение;

	Если Объект.РучноеРаспределение Тогда
		ПроизводствоСервер.ЗаполнитьКэшКонтроляРаспределения(Объект, КэшКонтроляРаспределения);
	КонецЕсли; 
	
	ОбновитьЭтапыНаФорме(ЭтотОбъект);
	
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование);	
	
	УправлениеФормой(ЭтотОбъект);
	УстановитьРежимИСписокВыбора();
	
	// ИнтеграцияИС
	ФОВестиУчетПодконтрольныхТоваровВЕТИС = ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС");
	Если ФОВестиУчетПодконтрольныхТоваровВЕТИС Тогда
		ИнтеграцияИС.ПриСозданииНаСервереВФормеДокументаОснования(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец ИнтеграцияИС
	
	// МобильныйКлиент
	УстановитьВидимостьЭлементовДляМобильногоКлиента();
	// Конец МобильныйКлиент	
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьПараметрыФормы();
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтеграцияИС
	ФОВестиУчетПодконтрольныхТоваровВЕТИС = ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС");
	Если ФОВестиУчетПодконтрольныхТоваровВЕТИС Тогда
		ИнтеграцияИС.ПриЧтенииНаСервереВФормеДокументаОснования(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец ИнтеграцияИС
	
	// Ячейки
	Если ТипЗнч(КэшЗначений) <> Тип("Структура") Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	КэшЗначений.Вставить("УчетПоЯчейкам", ПолучитьФункциональнуюОпцию("УчетПоЯчейкам"));
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	// Конец Ячейки
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ЗаполнитьПризнакиИспользованияЭтапов();
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	СтатистикаИспользованияФормКлиент.ПроверитьЗаписатьСтатистикуКоманды(
		"СоздатьНаОсновании.СборкаЗапасов",
		ЭтотОбъект.ВладелецФормы,
		ЭтотОбъект.ОснованиеСоздания
	);
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	ОбновитьСпискиВыбораРаспределение();
	ОбновитьПодсказкуРаспределение();
	
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Проведение"+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры // ПередЗаписью()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
	//Характеристики и Партии таб. часть "РаспределениеЗапасов"
	ПроверитьЗаполнениеХарактеристикРаспределениеЗапасов(Отказ);
	
	//ВЕТИС
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС") Тогда
		Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Отказ = ПроверитьСоответствиеРеквизитовДокументаВЕТИС();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюНаСервере()

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ОповеститьОбИзменении(Объект.ДокументОснование);
	КонецЕсли;
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ЗаполнитьПризнакиИспользованияЭтапов();
	ОбновитьЭтапыНаФорме(ЭтотОбъект);
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	
	//Обсуждения
	ОбсужденияСервер.ПослеЗаписиНаСервере(ТекущийОбъект);	
	// Конец Обсуждения
	
	// ИнтеграцияИС
	Если ФОВестиУчетПодконтрольныхТоваровВЕТИС Тогда
		ИнтеграцияИС.ПослеЗаписиНаСервереВФормеДокументаОснования(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец ИнтеграцияИС
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			//Преобразуем предварительно к ожидаемому формату
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Данные.Добавить(Новый Структура("Штрихкод, Количество, ДоляСтоимости", Параметр[0], 1, 1)); // Достаем штрихкод из основных данных
			Иначе
				Данные.Добавить(Новый Структура("Штрихкод, Количество, ДоляСтоимости", Параметр[1][1], 1, 1)); // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		//Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище	= Параметр;
		
		Если МаркерПодбора = "Продукция" Тогда
			
			ИмяТабличнойЧасти = "Продукция";
			
		ИначеЕсли МаркерПодбора = "Запасы" Тогда
			
			ИмяТабличнойЧасти = "Запасы";
			
		ИначеЕсли МаркерПодбора = "Отходы" Тогда
			
			ИмяТабличнойЧасти = "Отходы";
			
		КонецЕсли;
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, Истина, Истина);
		
		Если ИмяТабличнойЧасти="Продукция" Тогда
			УстановитьКартинкиЗакладок(ЭтотОбъект, Ложь);
			ОбновитьСпискиВыбораРаспределение();
		ИначеЕсли ИмяТабличнойЧасти="Запасы" Тогда
			ВывестиОтметкиКонтроля(ЭтотОбъект);
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		//Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.ТЧПродукция Тогда
			ПолучитьСерийныеНомераПродукцииИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки);
		Иначе
			ПолучитьСерийныеНомераЗапасыИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки);
		КонецЕсли;
		
		
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Продукция");
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Запасы");
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Отходы");
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// ИнтеграцияИС
	Если ФОВестиУчетПодконтрольныхТоваровВЕТИС Тогда
		ИнтеграцияИСКлиент.ОбработкаОповещенияВФормеДокументаОснования(
			ЭтотОбъект,
			Объект,
			ИмяСобытия,
			Параметр,
			Источник);
	КонецЕсли;
	// Конец ИнтеграцияИС

КонецПроцедуры // ОбработкаОповещения()

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры // ПриЗакрытии()

&НаСервере
Процедура УстановитьВидимостьИДоступностьМобильноеПриложение()
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Элементы.ТЧОтходы.Видимость = Ложь;
		Элементы.ЛеваяКолонка.Видимость = Ложь;
		Элементы.ВидОперации.Видимость = Ложь;
		Элементы.Организация.Видимость = Ложь;
		Элементы.ГруппаСкладПродукцияСборка.Видимость = Ложь;
		Элементы.ГруппаСкладПродукцияРазборка.Видимость = Ложь;
		Элементы.ПродукцияПродукцияПодбор.Видимость = Ложь;
		Элементы.ПродукцияГруппаКопированиеСтрок.Видимость = Ложь;
		Элементы.ПродукцияХарактеристика.Видимость = Ложь;
		Элементы.ГруппаСкладЗапасыСборка.Видимость = Ложь;
		Элементы.ГруппаСкладЗапасыРазборка.Видимость = Ложь;
		Элементы.ГруппаТорговоеОборудование.Видимость = Ложь;
		Элементы.ЗапасыГруппаКопированиеСтрок.Видимость = Ложь;
		Элементы.ЗапасыПодбор.Видимость = Ложь;
		Элементы.ЗапасыЗаполнитьПоСпецификации.Видимость = Ложь;
		Элементы.ЗапасыИзменитьРезерв.Видимость = Ложь;
		Элементы.ЗапасыХарактеристика.Видимость = Ложь;
		Элементы.ФормаЗаписать.Видимость = Ложь;
		Элементы.ФормаПровести.Видимость = Ложь;
		Элементы.ФормаОтменаПроведения.Видимость = Ложь;
		Элементы.ФормаПоказатьВСписке.Видимость = Ложь;
		Элементы.ГруппаГлобальныеКоманды.Видимость = Ложь;
		Элементы.ДокументОснованиеНадпись.Видимость = Ложь;
		Элементы.ФормаПровестиИЗакрыть.Заголовок = "Готово";
		Элементы.ФормаШапкаТабличнаяЧасть.Видимость = Ложь;
	КонецЕсли;
	// Конец МобильноеПриложение
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Организация.
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
	Компания = СтруктураДанные.Компания;
	
	Объект.ПодписьРуководителя = СтруктураДанные.ПодписьРуководителя;
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ДокументОснование.
//
&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры // ДокументОснованиеПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ЗаказПокупателя.
//
&НаКлиенте
Процедура ЗаказПокупателяПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Разборка") Тогда
		
		Элементы.ПродукцияРезерв.Видимость = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
		
		Для каждого СтрокаПродукция Из Объект.Продукция Цикл
			СтрокаПродукция.Резерв = 0;
		КонецЦикла;
		
	Иначе
		
		Элементы.ЗапасыРезерв.Видимость = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
		Элементы.ЗапасыИзменитьРезерв.Видимость = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
		
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			СтрокаЗапасы.Резерв = 0;
		КонецЦикла;
		
		ИспользуетсяРезервирование = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
		
	КонецЕсли;
	
	УправлениеВидимостьюЭтапов(ЭтотОбъект);
	ОбновитьЗаголовокКомандыЗаполнитьПоОстаткам(ЭтотОбъект);
	
КонецПроцедуры // ЗаказПокупателяПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ВидОперации.
//
&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ВидОперацииПриИзмененииСервер();
	
	УправлениеФормой(ЭтотОбъект);
	
	ИмяТабличнойЧасти = ?(Объект.ВидОперации = КэшЗначений.ВОСборка, "Продукция", "Запасы");
	Для каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
		
		СтрокаТабличнойЧасти["СтранаПроисхождения"] = Неопределено;
		СтрокаТабличнойЧасти["НомерГТД"] = Неопределено;
		СтрокаТабличнойЧасти["Резерв"] = 0;
		
	КонецЦикла;
	
	Если Объект.ВидОперации<>ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Сборка") Тогда
		Если ПараметрыФормы.ИспользоватьЭтапыПроизводства Тогда
			УстановитьКартинкиЗакладок(ЭтотОбъект, Ложь);
			Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
				СтрокаТабличнойЧасти.Этап = ПредопределенноеЗначение("Справочник.ЭтапыПроизводства.ПустаяСсылка");
			КонецЦикла; 
			Для каждого СтрокаТабличнойЧасти Из Объект.РаспределениеЗапасов Цикл
				СтрокаТабличнойЧасти.Этап = ПредопределенноеЗначение("Справочник.ЭтапыПроизводства.ПустаяСсылка");
			КонецЦикла; 
		КонецЕсли; 
		Объект.ВыполненныеЭтапы.Очистить();
	КонецЕсли;
	
	УстановитьВидимостьОтПользовательскихНастроек(ЭтотОбъект);
	
	ОбновитьСкладВТЧ();
	
КонецПроцедуры // ВидОперацииПриИзменении()

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()
	
	Если Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Разборка") Тогда
		ИмяТЧ = "Запасы";
	Иначе
		ИмяТЧ = "Продукция";
	КонецЕсли;
	Для каждого СтрокаПродукция Из Объект[ИмяТЧ] Цикл
		Если ЗначениеЗаполнено(СтрокаПродукция.Партия)
			И СтрокаПродукция.Партия.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье") Тогда
			СтрокаПродукция.Партия = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	
КонецПроцедуры

#Область СтруктурнаяЕдиницаИзготовитель

// Процедура - обработчик события ПриИзменении поля ввода СтруктурнаяЕдиница.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
	
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Подразделение", Объект.СтруктурнаяЕдиница);
		СтруктураДанные.Вставить("ВидОперации", Объект.ВидОперации);
		
		СтруктураДанные = ПолучитьДанныеСтруктурнаяЕдиницаПриИзменении(СтруктураДанные);
		
		Объект.ПодписьКонтролера = СтруктураДанные.ПодписьКонтролера;
		
		Элементы.Ячейка.Доступность = НЕ СтруктураДанные.ОрдерныйСклад И ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница);
		
		Если ЗначениеЗаполнено(СтруктураДанные.СтруктурнаяЕдиницаПродукции) Тогда
			
			Объект.СтруктурнаяЕдиницаПродукции = СтруктураДанные.СтруктурнаяЕдиницаПродукции;
			Объект.ЯчейкаПродукции = СтруктураДанные.ЯчейкаПродукции;
			Элементы.ЯчейкаПродукцииСборка.Доступность = НЕ СтруктураДанные.ОрдерныйСкладПродукции И ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаПродукции);
			Элементы.ЯчейкаПродукцииРазборка.Доступность = НЕ СтруктураДанные.ОрдерныйСкладПродукции И ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаПродукции);
			
		Иначе
			
			Объект.СтруктурнаяЕдиницаПродукции = Объект.СтруктурнаяЕдиница;
			Объект.ЯчейкаПродукции = Объект.Ячейка;
			Элементы.ЯчейкаПродукцииСборка.Доступность = НЕ СтруктураДанные.ОрдерныйСклад И ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница);
			Элементы.ЯчейкаПродукцииРазборка.Доступность = НЕ СтруктураДанные.ОрдерныйСклад И ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураДанные.СтруктурнаяЕдиницаЗапасов) Тогда
			
			СтруктурнаяЕдиницаЗапасов = СтруктураДанные.СтруктурнаяЕдиницаЗапасов;
			ЯчейкаЗапасов = СтруктураДанные.ЯчейкаЗапасов;
			Элементы.ЯчейкаЗапасовСборка.Доступность = НЕ СтруктураДанные.ОрдерныйСкладЗапасов И ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаЗапасов);
			Элементы.ЯчейкаЗапасовРазборка.Доступность = НЕ СтруктураДанные.ОрдерныйСкладЗапасов И ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаЗапасов);
			
		Иначе
			
			СтруктурнаяЕдиницаЗапасов = Объект.СтруктурнаяЕдиница;
			ЯчейкаЗапасов = Объект.Ячейка;
			Элементы.ЯчейкаЗапасовСборка.Доступность = НЕ СтруктураДанные.ОрдерныйСклад И ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница);
			Элементы.ЯчейкаЗапасовРазборка.Доступность = НЕ СтруктураДанные.ОрдерныйСклад И ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница);
			
		КонецЕсли;
		
		Объект.СтруктурнаяЕдиницаЗапасов = СтруктурнаяЕдиницаЗапасов;
		Объект.ЯчейкаЗапасов = ЯчейкаЗапасов;
		ОбновитьСкладВТЧ(); 
		
		Если ЗначениеЗаполнено(СтруктураДанные.СтруктурнаяЕдиницаОтходов) Тогда
			
			Объект.СтруктурнаяЕдиницаОтходов = СтруктураДанные.СтруктурнаяЕдиницаОтходов;
			Объект.ЯчейкаОтходов = СтруктураДанные.ЯчейкаОтходов;
			Элементы.ЯчейкаОтходов.Доступность = НЕ СтруктураДанные.ОрдерныйСкладОтходов И ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаОтходов);
			
		Иначе
			
			Объект.СтруктурнаяЕдиницаОтходов = Объект.СтруктурнаяЕдиница;
			Объект.ЯчейкаОтходов = Объект.Ячейка;
			Элементы.ЯчейкаОтходов.Доступность = НЕ СтруктураДанные.ОрдерныйСклад И ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница);
			
		КонецЕсли;
		
		Объект.ПодписьКладовщикаОтправил = ?(СтруктураДанные.ЭтоСборка, СтруктураДанные.СтруктурнаяЕдиницаЗапасовПодписьМОЛ, СтруктураДанные.СтруктурнаяЕдиницаПродукцииПодписьМОЛ);
		Объект.ПодписьКладовщикаПолучил = ?(СтруктураДанные.ЭтоСборка, СтруктураДанные.СтруктурнаяЕдиницаПродукцииПодписьМОЛ, СтруктураДанные.СтруктурнаяЕдиницаЗапасовПодписьМОЛ);
		
	Иначе
		
		Элементы.Ячейка.Доступность = Ложь;
		
		Объект.ПодписьКонтролера = Неопределено;
		Объект.ПодписьКладовщикаОтправил = Неопределено;
		Объект.ПодписьКладовщикаПолучил = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаПриИзменении()

// Процедура - обработчик события Открытие поля СтруктурнаяЕдиница.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.СтруктурнаяЕдиница.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаОткрытие()

// Процедура - обработчик события ПриИзменении поля ввода Ячейка.
//
&НаКлиенте
Процедура ЯчейкаПриИзменении(Элемент)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница);
	СтруктураДанные.Вставить("Ячейка", Объект.Ячейка);
	СтруктураДанные.Вставить("СтруктурнаяЕдиницаПродукции", Объект.СтруктурнаяЕдиницаПродукции);
	СтруктураДанные.Вставить("ЯчейкаПродукции", Объект.ЯчейкаПродукции);
	СтруктураДанные.Вставить("СтруктурнаяЕдиницаЗапасов", Объект.СтруктурнаяЕдиницаЗапасов);
	СтруктураДанные.Вставить("ЯчейкаЗапасов", Объект.ЯчейкаЗапасов);
	СтруктураДанные.Вставить("СтруктурнаяЕдиницаОтходов", Объект.СтруктурнаяЕдиницаОтходов);
	СтруктураДанные.Вставить("ЯчейкаОтходов", Объект.ЯчейкаОтходов);
	
	СтруктураДанные = ПолучитьДанныеЯчейкаПриИзменении(СтруктураДанные);
	
	Если СтруктураДанные.Свойство("НоваяЯчейкаПродукции") Тогда
		Объект.ЯчейкаПродукции = СтруктураДанные.НоваяЯчейкаПродукции;
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("НоваяЯчейкаЗапасов") Тогда
		Объект.ЯчейкаЗапасов = СтруктураДанные.НоваяЯчейкаЗапасов;
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("НоваяЯчейкаОтходов") Тогда
		Объект.ЯчейкаОтходов = СтруктураДанные.НоваяЯчейкаОтходов;
	КонецЕсли;
	
КонецПроцедуры // ЯчейкаПриИзменении()

#КонецОбласти

&НаКлиенте
Процедура РучноеРаспределениеПриИзменении(Элемент)
	
	Объект.РучноеРаспределение = РучноеРаспределение;
	Модифицированность = Истина;
	
	УправлениеФормой(ЭтотОбъект);
	Если Объект.РучноеРаспределение Тогда
		РаспределитьФрагмент();
		ОбновитьСпискиВыбораРаспределение();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПодвалаФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Модифицированность = Истина;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		ЗаполнитьПоОснованиюНачало();		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		
		СписокВыбора = Новый СписокЗначений;
		Если НЕ ФОРезервированиеЗапасов Тогда
			СписокВыбора.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"), НСтр("ru = 'Заказ покупателя'"));
		КонецЕсли;
		СписокВыбора.Добавить(Тип("ДокументСсылка.СборкаЗапасов"), НСтр("ru = 'Производство'"));
		Если ФОРозница Тогда
			СписокВыбора.Добавить(Тип("ДокументСсылка.ОтчетОРозничныхПродажах"), НСтр("ru = 'Отчет о розничных продажах'"));
		КонецЕсли;
		
		Если СписокВыбора.Количество()=1 Тогда
			ДокументОснованиеВыборТипаДокумента(СписокВыбора[0]);
		Иначе
			Оповещение = Новый ОписаниеОповещения("ДокументОснованиеВыборТипаДокумента", ЭтотОбъект);
			ПоказатьВыборИзМеню(Оповещение, СписокВыбора, Элемент);
		КонецЕсли; 
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) тогда
			возврат;
		КонецЕсли;
		
		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоТипу(Объект.ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеВыборТипаДокумента(ВыбранноеЗначение, ДополнительныеДаные = Неопределено) Экспорт
	
	Если ВыбранноеЗначение=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	//Выбрать основание
	Если ВыбранноеЗначение.Значение=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		СтруктураПараметровОтбора = Новый Структура();
		_ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ОткрытьФорму("Документ.ЗаказПокупателя.ФормаВыбора", СтруктураПараметровОтбора, ЭтотОбъект, ,,,_ОповещениеОЗакрытии);
	ИначеЕсли ВыбранноеЗначение.Значение=Тип("ДокументСсылка.СборкаЗапасов") Тогда
		СтруктураПараметровОтбора = Новый Структура();
		_ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ОткрытьФорму("Документ.СборкаЗапасов.ФормаВыбора", СтруктураПараметровОтбора, ЭтотОбъект, ,,,_ОповещениеОЗакрытии);
	ИначеЕсли ВыбранноеЗначение.Значение=Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		СтруктураПараметровОтбора = Новый Структура();
		_ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ОткрытьФорму("Документ.ОтчетОРозничныхПродажах.ФормаВыбора", СтруктураПараметровОтбора, ЭтотОбъект, ,,,_ОповещениеОЗакрытии);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбЗначение, Параметры) Экспорт

	Если ВыбЗначение<>Неопределено Тогда
		Если Объект.ДокументОснование<>ВыбЗначение
			И (ТипЗнч(ВыбЗначение)=Тип("ДокументСсылка.СборкаЗапасов")
			ИЛИ ТипЗнч(ВыбЗначение)=Тип("ДокументСсылка.ОтчетОРозничныхПродажах")) Тогда
			Объект.ЗаказНаПроизводство = ПредопределенноеЗначение("Документ.ЗаказНаПроизводство.ПустаяСсылка");
		КонецЕсли; 
		Объект.ДокументОснование = ВыбЗначение;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбЗначение);
		Модифицированность = Истина;
		
		ЗаполнитьПоОснованиюНачало();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало() Экспорт

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоДокументОснованиеЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения, 
		НСтр("ru = 'Заполнить документ по выбранному основанию?'"), 
		РежимДиалогаВопрос.ДаНет, 0);		

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументОснованиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ЗаполнитьПоДокументу("ДокументОснование");
		ОбновитьСпискиВыбораРаспределение();
    КонецЕсли;

КонецПроцедуры // ЗаполнитьПоДокументОснование()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПродукция

&НаКлиенте
Процедура ПродукцияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока И Копирование Тогда
		ТекущаяСтрока.КлючСвязи = 0;
		ТекущаяСтрока.СерийныеНомера = "";
	КонецЕсли;	
	
	Если Элемент.ТекущийЭлемент.Имя = "ПродукцияСерийныеНомера" Тогда
		ОткрытьПодборСерийныеНомера("Продукция","СерийныеНомераПродукция");
	КонецЕсли;
	
	ИмяТабличнойЧасти = "Продукция";
	
	Если НоваяСтрока ИЛИ ТекущаяСтрока.КлючСвязи=0 Тогда
		УправлениеНебольшойФирмойКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект);
	КонецЕсли;
	
	СтароеКоличествоПродукции = ТекущаяСтрока.Количество;
	
	Если НоваяСтрока Тогда
		ТекущаяСтрока.Этапы = "";
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПередУдалением(Элемент, Отказ)
	
	Для каждого ВыделеннаяСтрока Из Элементы.Продукция.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Продукция.ДанныеСтроки(ВыделеннаяСтрока);
		РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомераПродукция, ТекущиеДанныеСтроки,,ИспользоватьСерийныеНомераОстатки);
	КонецЦикла;
	
	ЕстьСпецификации = Ложь;
	Для каждого ВыделеннаяСтрока Из Элемент.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элемент.ДанныеСтроки(ВыделеннаяСтрока);
		Если ЗначениеЗаполнено(ДанныеСтроки.Спецификация) Тогда
			ЕстьСпецификации = Истина;
		КонецЕсли;
		Если Объект.РучноеРаспределение Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("КлючСвязиПродукция", ДанныеСтроки.КлючСвязи);
			Строки = Объект.РаспределениеЗапасов.НайтиСтроки(СтруктураОтбора);
			Если Строки.Количество()>0 Тогда
				ЗапасыНеРаспределены = Истина;
			КонецЕсли;
			Для каждого СтрокаРаспределения Из Строки Цикл
				СтрокаРаспределения.КлючСвязиПродукция = 0;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	
	Если Объект.Запасы.Количество()>0 И ЕстьСпецификации Тогда
		УстановитьКартинкиЗакладок(ЭтотОбъект, Ложь);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПослеУдаления(Элемент)
	
	ОбновитьСпискиВыбораРаспределение();
	ОбновитьЗаголовокКомандыЗаполнитьПоОстаткам(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	
	СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	
	Если Объект.ВидОперации = КэшЗначений.ВОРазборка Тогда
		
		СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
		СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	СтрокаТабличнойЧасти.ИспользоватьЭтапыПроизводства = СтруктураДанные.ИспользоватьЭтапыПроизводства;
	
	Если Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Разборка") Тогда
		Если НЕ СкладВШапке Тогда
			ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСкладВСтрокеТЧЗапасы(СтрокаТабличнойЧасти, Объект, СтруктураДанные);
		Иначе
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаЗапасов;
			СтрокаТабличнойЧасти.Ячейка = Объект.ЯчейкаЗапасов;
		КонецЕсли;
		СтрокаТабличнойЧасти.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
	КонецЕсли; 
	
	//Серийные номера
	РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомераПродукция, СтрокаТабличнойЧасти,,ИспользоватьСерийныеНомераОстатки);
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики
		Тогда
		СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
	КонецЕсли;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии
		Тогда
		СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
	КонецЕсли;
	// Конец Партии
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) И Объект.Запасы.Количество()>0 Тогда
		УстановитьКартинкиЗакладок(ЭтотОбъект, Ложь);
	КонецЕсли; 
	ОбновитьСпискиВыбораРаспределение();
	
	ОчиститьВыполненныеЭтапы(СтрокаТабличнойЧасти);
	УправлениеВидимостьюЭтапов(ЭтотОбъект);

КонецПроцедуры // ПродукцияНоменклатураПриИзменении()

&НаКлиенте
Процедура ПродукцияХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	СтрокаТабличнойЧасти.ИспользоватьЭтапыПроизводства = СтруктураДанные.ИспользоватьЭтапыПроизводства;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) И Объект.Запасы.Количество()>0 Тогда
		УстановитьКартинкиЗакладок(ЭтотОбъект, Ложь);
	КонецЕсли; 
	ОбновитьСпискиВыбораРаспределение();
	
	ОчиститьВыполненныеЭтапы(СтрокаТабличнойЧасти);
	УправлениеВидимостьюЭтапов(ЭтотОбъект);

КонецПроцедуры // ПродукцияХарактеристикаПриИзменении()

&НаКлиенте
Процедура ПродукцияКоличествоПриИзменении(Элемент)
	
	// Серийные номера
	Если ИспользоватьСерийныеНомераОстатки<>Неопределено Тогда
		РаботаССерийнымиНомерамиКлиентСервер.ОбновитьСерийныеНомераКоличество(Объект, Элементы.Продукция.ТекущиеДанные, "СерийныеНомераПродукция");
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Элементы.Продукция.ТекущиеДанные.Спецификация) Тогда
		УстановитьКартинкиЗакладок(ЭтотОбъект, Ложь);
	КонецЕсли; 
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияНомерГТДПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
		
		ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
		Если ДатаГТД > КонецДня(Объект.Дата) Тогда
			
			ТекстСообщения = НСтр("ru ='Внимание! Выбранная ГТД датирована более поздней датой, чем текущий документ'");
			Прилипалка = СтрШаблон("Объект.Продукция[%1].НомерГТД", СтрокаТабличнойЧасти.ПолучитьИдентификатор());
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Прилипалка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСтранаПроисхожденияПриИзменении(Элемент)
	
	Если КэшЗначений.УчетГТД Тогда
		
		СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения)
			ИЛИ СтрокаТабличнойЧасти.СтранаПроисхождения = КэшЗначений.Россия Тогда
			
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область СтруктурнаяЕдиницаПродукцияПолучательСборка

// Процедура - обработчик события ПриИзменении поля ввода СтруктурнаяЕдиницаПродукцииСборка.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаПродукцииСборкаПриИзменении(Элемент)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация",	Объект.Организация);
	СтруктураДанные.Вставить("Склад",		Объект.СтруктурнаяЕдиницаПродукции);
	
	СтруктураДанные = ПолучитьДанныеСтруктурнаяЕдиницаПродукцияЗапасыОтходыПриИзменении(СтруктураДанные);
	Объект.ПодписьКладовщикаПолучил = СтруктураДанные.ПодписьМОЛ;
	
	Элементы.ЯчейкаПродукцииСборка.Доступность = (НЕ СтруктураДанные.ОрдерныйСклад И ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаПродукции));
	
КонецПроцедуры // СтруктурнаяЕдиницаПродукцииСборкаПриИзменении()

// Процедура - обработчик события Открытие поля СтруктурнаяЕдиницаПродукцииСборка.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаПродукцииСборкаОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.СтруктурнаяЕдиницаПродукцииСборка.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаПродукции) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаПродукцииСборкаОткрытие()

#КонецОбласти

#Область СтруктурнаяЕдиницаПродукцияСписатьИзРазборка

// Процедура - обработчик события ПриИзменении поля ввода СтруктурнаяЕдиницаПродукцииРазборка.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаПродукцииРазборкаПриИзменении(Элемент)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Склад",		Объект.СтруктурнаяЕдиницаЗапасов);
	
	СтруктураДанные = ПолучитьДанныеСтруктурнаяЕдиницаПродукцияЗапасыОтходыПриИзменении(СтруктураДанные);
	Объект.ПодписьКладовщикаОтправил = СтруктураДанные.ПодписьМОЛ;
	
	Элементы.ЯчейкаПродукцииРазборка.Доступность = (НЕ СтруктураДанные.ОрдерныйСклад И ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаЗапасов));
	
	ОбновитьСкладВТЧ();
	
КонецПроцедуры // СтруктурнаяЕдиницаПродукцииРазборкаПриИзменении()

// Процедура - обработчик события Открытие поля СтруктурнаяЕдиницаПродукцииРазборка.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаПродукцииРазборкаОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.СтруктурнаяЕдиницаПродукцииРазборка.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаЗапасов) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаПродукцииРазборкаОткрытие()

#КонецОбласти

&НаКлиенте
Процедура ПродукцияЗаказПокупателяПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
		СтрокаТабличнойЧасти.Резерв = 0;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) И Объект.Запасы.Количество()>0 Тогда
		УстановитьКартинкиЗакладок(ЭтотОбъект, Ложь);
	КонецЕсли; 
	ОбновитьСпискиВыбораРаспределение();
	
	Если ПараметрыФормы.ИспользоватьЭтапыПроизводства 
		И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
		И НЕ ЗначениеЗаполнено(Объект.ЗаказНаПроизводство) Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
		СтрокиВыполненныеЭтапы = Объект.ВыполненныеЭтапы.НайтиСтроки(СтруктураОтбора);
		Если СтрокиВыполненныеЭтапы.Количество()>0 Тогда
			Для каждого СтрокаВыполненныйЭтап Из СтрокиВыполненныеЭтапы Цикл
				Объект.ВыполненныеЭтапы.Удалить(СтрокаВыполненныйЭтап);
			КонецЦикла; 
			УстановитьКартинкиЗакладок(ЭтотОбъект, Ложь);
			ОбновитьЭтапыНаФорме(ЭтотОбъект);
		КонецЕсли; 
	КонецЕсли; 
	
	УправлениеВидимостьюЭтапов(ЭтотОбъект);
	ОбновитьЗаголовокКомандыЗаполнитьПоОстаткам(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЕдиницаИзмеренияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.Продукция.ТекущиеДанные.Спецификация) Тогда
		УстановитьКартинкиЗакладок(ЭтотОбъект, Ложь);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСпецификацияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Спецификация", СтрокаТабличнойЧасти.Спецификация);
	СтруктураДанные = ПолучитьДанныеСпецификацияПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ИспользоватьЭтапыПроизводства = СтруктураДанные.ИспользоватьЭтапыПроизводства;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) И Объект.Запасы.Количество()>0 Тогда
		УстановитьКартинкиЗакладок(ЭтотОбъект, Ложь);
	КонецЕсли; 
	ОбновитьСпискиВыбораРаспределение();
	
	ОчиститьВыполненныеЭтапы(СтрокаТабличнойЧасти);
	УправлениеВидимостьюЭтапов(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЭтапыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Спецификация)
		ИЛИ (НЕ ЗначениеЗаполнено(Объект.ЗаказНаПроизводство) И НЕ ПроизводствоПодЗаказ(ТекущаяСтрока)) Тогда
		ТекстСообщения = НСтр("ru = 'При изготовлении %1 не используются этапы производства!'");
	    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ТекстСообщения, ТекущаяСтрока.Номенклатура));
		Возврат;
	КонецЕсли;
	
	КлючСвязи = ТекущаяСтрока.КлючСвязи;
	Если КлючСвязи=0 Тогда
		ИмяТабличнойЧасти = "Продукция";
		УправлениеНебольшойФирмойКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект, ТекущаяСтрока);
		КлючСвязи = ТекущаяСтрока.КлючСвязи;
	КонецЕсли; 
	
	МассивЭтапов = Новый Массив;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязи", КлючСвязи);
	Строки = Объект.ВыполненныеЭтапы.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаТабличнойЧасти Из Строки Цикл
		МассивЭтапов.Добавить(СтрокаТабличнойЧасти.Этап);
	КонецЦикла;
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("КлючСвязи", КлючСвязи);
	СтруктураОткрытия.Вставить("ВыполненныеЭтапы", МассивЭтапов);
	СтруктураОткрытия.Вставить("Спецификация", ТекущаяСтрока.Спецификация);
	ОткрытьФорму("Документ.СборкаЗапасов.Форма.ВыполненныеЭтапы", СтруктураОткрытия, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЭтапыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение)<>Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ВыбранноеЗначение.Свойство("КлючСвязи")
		ИЛИ НЕ ВыбранноеЗначение.Свойство("ВыполненныеЭтапы") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязи", ВыбранноеЗначение.КлючСвязи);
	Строки = Объект.ВыполненныеЭтапы.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаТабличнойЧасти Из Строки Цикл
		Объект.ВыполненныеЭтапы.Удалить(СтрокаТабличнойЧасти);
	КонецЦикла; 
	
	Для каждого Этап Из ВыбранноеЗначение.ВыполненныеЭтапы Цикл
		НоваяСтрока = Объект.ВыполненныеЭтапы.Добавить();
		НоваяСтрока.КлючСвязи = ВыбранноеЗначение.КлючСвязи;
		НоваяСтрока.Этап = Этап;
	КонецЦикла;
	
	ОбновитьЭтапыНаФорме(ЭтотОбъект);
	УстановитьКартинкиЗакладок(ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСтруктурнаяЕдиницаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
	СтрокаТабличнойЧасти.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока И Копирование Тогда
		ТекущаяСтрока.КлючСвязи = 0;
		ТекущаяСтрока.СерийныеНомера = "";
	КонецЕсли;	
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗапасыСерийныеНомера" Тогда
		ОткрытьПодборСерийныеНомера("Запасы", "СерийныеНомера");
	КонецЕсли;
	
	ИмяТабличнойЧасти = "Запасы";
	
	Если НоваяСтрока ИЛИ ТекущаяСтрока.КлючСвязи=0 Тогда
		УправлениеНебольшойФирмойКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект);
	КонецЕсли; 
	
	Если НоваяСтрока Тогда
		СтарыеДанныеСтроки = Неопределено;
		ЗаполнитьДанныеШапки(ТекущаяСтрока);
	Иначе
		СтроктураПолей = Новый Структура(ИменаКолонокЗапасов(Объект));
		ЗаполнитьЗначенияСвойств(СтроктураПолей, ТекущаяСтрока);
		СтарыеДанныеСтроки = Новый ФиксированнаяСтруктура(СтроктураПолей);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьКэшКонтроляПриИзмененииДанныхСтроки(Элемент.ТекущиеДанные);
	Если НЕ ОтменаРедактирования Тогда
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	// Серийные номера
	Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомера, ТекущиеДанныеСтроки,,ИспользоватьСерийныеНомераОстатки);
	КонецЦикла;
	
	Если Отказ ИЛИ НЕ Объект.РучноеРаспределение Тогда
		СтарыеДанныеСтроки = Неопределено;
	ИначеЕсли Элементы.Запасы.ВыделенныеСтроки.Количество()>1 Тогда
		СохраняемыеДанные = Новый Массив;
		Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
			СтруктураПолей = Новый Структура(ИменаКолонокЗапасов(Объект));
			ЗаполнитьЗначенияСвойств(СтруктураПолей, ТекущиеДанныеСтроки);
			СохраняемыеДанные.Добавить(Новый ФиксированнаяСтруктура(СтруктураПолей));
		КонецЦикла;
		СтарыеДанныеСтроки = Новый ФиксированныйМассив(СохраняемыеДанные);
	ИначеЕсли Элементы.Запасы.ВыделенныеСтроки.Количество()=1 Тогда
		СтруктураПолей = Новый Структура(ИменаКолонокЗапасов(Объект));
		ЗаполнитьЗначенияСвойств(СтруктураПолей, Элемент.ТекущиеДанные);
		СтарыеДанныеСтроки = Новый ФиксированнаяСтруктура(СтруктураПолей);
	Иначе
		СтарыеДанныеСтроки = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПослеУдаления(Элемент)
	
	Если НЕ Объект.РучноеРаспределение Тогда
		УстановитьКартинкиЗакладок(ЭтотОбъект);
	КонецЕсли;
	Если ТипЗнч(СтарыеДанныеСтроки)=Тип("ФиксированныйМассив") Тогда
		Значения = Новый Массив(СтарыеДанныеСтроки);
		Для каждого Значение Из Значения Цикл
			СтарыеДанныеСтроки = Значение;
			ОбновитьКэшКонтроляПриИзмененииДанныхСтроки();
		КонецЦикла; 
	Иначе
		ОбновитьКэшКонтроляПриИзмененииДанныхСтроки();
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье"));
	
	СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	
	Если Объект.ВидОперации = КэшЗначений.ВОСборка Тогда
		
		СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
		СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.ДоляСтоимости = 1;
	
	Если Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Сборка") Тогда
		Если НЕ СкладВШапке Тогда
			ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСкладВСтрокеТЧЗапасы(СтрокаТабличнойЧасти, Объект, СтруктураДанные);
		Иначе
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаЗапасов;
			СтрокаТабличнойЧасти.Ячейка = Объект.ЯчейкаЗапасов;
		КонецЕсли;
		СтрокаТабличнойЧасти.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
	КонецЕсли; 
	
	//Серийные номера
	РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомера, СтрокаТабличнойЧасти,,ИспользоватьСерийныеНомераОстатки);
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики
		Тогда
		СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
	КонецЕсли;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии
		Тогда
		СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
	КонецЕсли;
	// Конец Партии   
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
КонецПроцедуры // ЗапасыХарактеристикаПриИзменении()

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	// Серийные номера
	Если ИспользоватьСерийныеНомераОстатки<>Неопределено Тогда
		РаботаССерийнымиНомерамиКлиентСервер.ОбновитьСерийныеНомераКоличество(Объект, Элементы.Запасы.ТекущиеДанные);
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНомерГТДПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
		
		ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
		Если ДатаГТД > КонецДня(Объект.Дата) Тогда
			
			ТекстСообщения = НСтр("ru ='Внимание! Выбранная ГТД датирована более поздней датой, чем текущий документ'");
			Прилипалка = СтрШаблон("Объект.Запасы[%1].НомерГТД", СтрокаТабличнойЧасти.ПолучитьИдентификатор());
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Прилипалка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтранаПроисхожденияПриИзменении(Элемент)
	
	Если КэшЗначений.УчетГТД Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения)
			ИЛИ СтрокаТабличнойЧасти.СтранаПроисхождения = КэшЗначений.Россия Тогда
			
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область СтруктурнаяЕдиницаЗапасыСписатьИзСборка

&НаКлиенте
Процедура СтруктурнаяЕдиницаЗапасовСборкаПриИзменении(Элемент)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Склад",		Объект.СтруктурнаяЕдиницаЗапасов);
	
	СтруктураДанные = ПолучитьДанныеСтруктурнаяЕдиницаПродукцияЗапасыОтходыПриИзменении(СтруктураДанные);
	Объект.ПодписьКладовщикаОтправил = СтруктураДанные.ПодписьМОЛ;
	
	Элементы.ЯчейкаЗапасовСборка.Доступность = (НЕ СтруктураДанные.ОрдерныйСклад И ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаЗапасов));
	
	ОбновитьСкладВТЧ();
	УстановитьВидимостьОтПользовательскихНастроек(ЭтотОбъект);
	
КонецПроцедуры // СтруктурнаяЕдиницаЗапасовСборкаПриИзменении()

&НаКлиенте
Процедура СтруктурнаяЕдиницаЗапасовСборкаОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.СтруктурнаяЕдиницаЗапасовСборка.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаЗапасов) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаЗапасовСборкаОткрытие()

#КонецОбласти

#Область СтруктурнаяЕдиницаЗапасыПолучательРазборка

// Процедура - обработчик события ПриИзменении поля ввода СтруктурнаяЕдиницаЗапасовРазборка.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаЗапасовРазборкаПриИзменении(Элемент)
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Склад",		Объект.СтруктурнаяЕдиницаПродукции);
	
	СтруктураДанные = ПолучитьДанныеСтруктурнаяЕдиницаПродукцияЗапасыОтходыПриИзменении(СтруктураДанные);
	Объект.ПодписьКладовщикаПолучил = СтруктураДанные.ПодписьМОЛ;
	
	Элементы.ЯчейкаЗапасовРазборка.Доступность = (НЕ СтруктураДанные.ОрдерныйСклад И ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаПродукции));
	
КонецПроцедуры // СтруктурнаяЕдиницаЗапасовРазборкаПриИзменении()

// Процедура - обработчик события Открытие поля СтруктурнаяЕдиницаЗапасовРазборка.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаЗапасовРазборкаОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.СтруктурнаяЕдиницаЗапасовРазборка.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаПродукции) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаЗапасовРазборкаОткрытие()

#КонецОбласти

&НаКлиенте
Процедура ЗапасыЗаказПокупателяПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
		СтрокаТабличнойЧасти.Резерв = 0;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПредупреждениеЗапасыЗакрытьНажатие(Элемент)
	
	УстановитьКартинкиЗакладок(ЭтотОбъект, Истина);		
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЭтапНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЭтапАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивЭтапов = Новый Массив;
	Для каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
		Если НЕ СтрокаТабличнойЧасти.ИспользоватьЭтапыПроизводства Тогда
			МассивЭтапов.Добавить(ПредопределенноеЗначение("Справочник.ЭтапыПроизводства.ПустаяСсылка"));
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	Для каждого СтрокаТабличнойЧасти Из Объект.ВыполненныеЭтапы Цикл
		Если МассивЭтапов.Найти(СтрокаТабличнойЧасти.Этап)=Неопределено Тогда
			МассивЭтапов.Добавить(СтрокаТабличнойЧасти.Этап);
		КонецЕсли; 
	КонецЦикла; 
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(МассивЭтапов);
	ОбновитьПредставлениеПустогоЭтапа(ДанныеВыбора);

КонецПроцедуры
 
&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СтрокаТабличнойЧасти.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтходы

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ОтходыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Отходы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье"));
	
	СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики
		Тогда
		СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
	КонецЕсли;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии
		Тогда
		СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
	КонецЕсли;
	// Конец Партии
	
КонецПроцедуры // ОтходыНоменклатураПриИзменении()

#Область СтруктурнаяЕдиницаПолучательОтходов

// Процедура - обработчик события ПриИзменении поля ввода СтруктурнаяЕдиницаОтходов.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаОтходовПриИзменении(Элемент)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Склад", Объект.СтруктурнаяЕдиницаОтходов);
	
	СтруктураДанные = ПолучитьДанныеСтруктурнаяЕдиницаПродукцияЗапасыОтходыПриИзменении(СтруктураДанные);
	
	Элементы.ЯчейкаОтходов.Доступность = (НЕ СтруктураДанные.ОрдерныйСклад И ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаОтходов));
	
КонецПроцедуры // СтруктурнаяЕдиницаОтходовПриИзменении()

// Процедура - обработчик события Открытие поля СтруктурнаяЕдиницаОтходов.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаОтходовОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.СтруктурнаяЕдиницаОтходов.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаОтходов) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаОтходовОткрытие()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДекорацияПечатьНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияРеквизитовПечати", ЭтотОбъект);
	ОткрытьФорму("Обработка.РеквизитыПечати.Форма.РеквизитыПечатиПроизводство", Новый Структура("КонтекстПечати", Объект), ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку ЗаполнитьПоОснованию.
//
&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект), НСтр("ru = 'Документ будет полностью перезаполнен по ""Основанию""! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьПоДокументу("ЗаказНаПроизводство");
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Разборка") Тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.ЗаказПокупателя) 
				И Объект.ПоложениеЗаказаПокупателя<>ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
				
				Для Каждого СтрокаЗапасы Из Объект.Продукция Цикл
					СтрокаЗапасы.Резерв = 0;
				КонецЦикла;
				Элементы.ПродукцияРезерв.Видимость = Ложь;
				
			Иначе
				
				Если Элементы.ПродукцияРезерв.Видимость = Ложь Тогда
					Элементы.ПродукцияРезерв.Видимость = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(Объект.ЗаказПокупателя) 
				И Объект.ПоложениеЗаказаПокупателя<>ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
				
				Для Каждого СтрокаЗапасы Из Объект.Запасы Цикл
					СтрокаЗапасы.Резерв = 0;
				КонецЦикла;
				Элементы.ЗапасыРезерв.Видимость = Ложь;
				Элементы.ЗапасыИзменитьРезерв.Видимость = Ложь;
				ИспользуетсяРезервирование = Ложь;
				
			Иначе
				
				Если Элементы.ЗапасыРезерв.Видимость = Ложь Тогда
					Элементы.ЗапасыРезерв.Видимость = Истина;
					Элементы.ЗапасыИзменитьРезерв.Видимость = Истина;
					ИспользуетсяРезервирование = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбновитьСпискиВыбораРаспределение();
		ЗапасыНеЗаполнены = Ложь;
		ВывестиОтметкиКонтроля(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры  // ЗаполнитьПоОснованию()

// Процедура - обработчик нажатия на кнопку ЗаполнитьПоЗаказуПокупателя.
//
&НаКлиенте
Процедура ЗаполнитьПоЗаказуПокупателя(Команда)
	
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоЗаказуПокупателяЗавершение", ЭтотОбъект), НСтр("ru = 'Документ будет полностью перезаполнен по ""Заказу покупателя""! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказуПокупателяЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
        ЗаполнитьПоДокументу("ЗаказПокупателя");
		
		ОбновитьСпискиВыбораРаспределение();
		ЗапасыНеЗаполнены = Ложь;
		ВывестиОтметкиКонтроля(ЭтотОбъект);
	
    КонецЕсли;

КонецПроцедуры // ЗаполнитьПоЗаказуПокупателя()

// Процедура - обработчик команды ЗаполнитьПоРезервам подменю ИзменитьРезерв.
//
&НаКлиенте
Процедура ИзменитьРезервЗаполнитьПоРезервам(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Запасы и услуги"" не заполнена!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКолонкуРезервПоРезервамНаСервере();
	
КонецПроцедуры // ИзменитьРезервЗаполнитьПоРезервам()

// Процедура - обработчик команды ОчиститьРезерв подменю ИзменитьРезерв.
//
&НаКлиенте
Процедура ИзменитьРезервОчиститьРезерв(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Запасы и услуги"" не заполнена!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		СтрокаТабличнойЧасти.Резерв = 0;
	КонецЦикла;
	
КонецПроцедуры // ИзменитьРезервЗаполнитьПоОстаткам()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПечатьТТН.Форма.ДанныеПечати" Тогда
		
		Для каждого ЗначенияРеквизита Из ВыбранноеЗначение Цикл
			Если Объект.Свойство(ЗначенияРеквизита.Ключ) Тогда
				Объект[ЗначенияРеквизита.Ключ] = ЗначенияРеквизита.Значение;
				Модифицированность = Истина;
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШапкаТабличнаяЧасть(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПоложениеСклада) Тогда
		Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке");
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(Объект.ПоложениеЗаказаПокупателя) Тогда
		Объект.ПоложениеЗаказаПокупателя = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке");
	КонецЕсли;
	
	ПараметрыДиалога = Новый Структура;
	ПараметрыДиалога.Вставить("ПоложениеСкладаВДокументахПроизводства", Объект.ПоложениеСклада);
	ПараметрыДиалога.Вставить("ПоложениеЗаказаПокупателяВДокументахПроизводства", Объект.ПоложениеЗаказаПокупателя);
	ПараметрыДиалога.Вставить("БылиВнесеныИзменения", Ложь);
	
	ОткрытьФорму(
	"ОбщаяФорма.ШапкаТабличнаяЧасть",
	ПараметрыДиалога,,,,,
	Новый ОписаниеОповещения("ШапкаТабличнаяЧастьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ШапкаТабличнаяЧастьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.БылиВнесеныИзменения Тогда
		ШапкаТабличнаяЧастьЗавершениеНаСервере(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ШапкаТабличнаяЧастьЗавершениеНаСервере(Знач Результат)
	
	Если Объект.ПоложениеСклада <> Результат.ПоложениеСкладаВДокументахПроизводства Тогда
		Объект.ПоложениеСклада = Результат.ПоложениеСкладаВДокументахПроизводства;
		Если Объект.ВидОперации=Перечисления.ВидыОперацийСборкаЗапасов.Разборка Тогда
			ИмяТЧ = "Продукция";
		Иначе
			ИмяТЧ = "Запасы";
		КонецЕсли;
		ОрдерныйСклад = Объект.СтруктурнаяЕдиницаЗапасов.ОрдерныйСклад;
		Для каждого СтрокаТабличнойЧасти Из Объект[ИмяТЧ] Цикл
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаЗапасов;
			СтрокаТабличнойЧасти.Ячейка = Объект.ЯчейкаЗапасов;
			СтрокаТабличнойЧасти.ЯчейкаДоступна = НЕ ОрдерныйСклад И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
		КонецЦикла;
	КонецЕсли; 
	
	Если Объект.ПоложениеЗаказаПокупателя <> Результат.ПоложениеЗаказаПокупателяВДокументахПроизводства Тогда
		Объект.ПоложениеЗаказаПокупателя = Результат.ПоложениеЗаказаПокупателяВДокументахПроизводства;
		Для каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
			СтрокаТабличнойЧасти.ЗаказПокупателя = Объект.ЗаказПокупателя;
		КонецЦикла; 
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			СтрокаТабличнойЧасти.ЗаказПокупателя = Объект.ЗаказПокупателя;
		КонецЦикла; 
	КонецЕсли; 
	
	УстановитьВидимостьОтПользовательскихНастроек(ЭтотОбъект);
	
	Если Объект.РучноеРаспределение Тогда
		ПроизводствоСервер.ЗаполнитьКэшКонтроляРаспределения(Объект, КэшКонтроляРаспределения);
		ВывестиОтметкиКонтроля(ЭтотОбъект);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Распределить(Команда)
	
	Если Объект.РаспределениеЗапасов.Количество() <> 0 Тогда
		
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("РаспределитьЗавершение", ЭтотОбъект), НСтр("ru = 'Табличная часть ""Распределение"" будет перезаполнена! Продолжить выполнение операции?'"), 
							РежимДиалогаВопрос.ДаНет, 0);
        Возврат;
		
	КонецЕсли;
	
	РаспределитьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    
    РаспределитьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура РаспределитьФрагмент()

	РаспределитьСервер();
	
	ОбновитьРаспределениеЗапасовНаФорме();

КонецПроцедуры

// Процедура - обработчик команды командной панели табличной части.
//
&НаКлиенте
Процедура ЗаполнитьПоСпецификации(Команда)
	
	Если Объект.Запасы.Количество() <> 0 Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоСпецификацииЗавершение", ЭтотОбъект), НСтр("ru = 'Табличная часть ""Материалы"" будет перезаполнена! Продолжить выполнение операции?'"), 
		РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоСпецификацииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСпецификацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоСпецификацииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСпецификацииФрагмент()
	
	ЗаполнитьПоСпецификацииНаСервере();
	
КонецПроцедуры // КомандаЗаполнитьПоСпецификации()

&НаКлиенте
Процедура ЗаполнитьПоРаспределению(Команда)
	
	Если Объект.Запасы.Количество() <> 0 Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоРаспределениюЗавершение", ЭтотОбъект), НСтр("ru = 'Табличная часть ""Материалы"" будет перезаполнена! Продолжить выполнение операции?'"), 
							РежимДиалогаВопрос.ДаНет, 0);
        Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоРаспределениюФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРаспределениюЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьПоРаспределениюФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРаспределениюФрагмент()
    
    ЗаполнитьПоРаспределениюСервер();
	
КонецПроцедуры // ЗаполнитьПоРаспределению()

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)
	
	Если Объект.Запасы.Количество() <> 0 Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОстаткамЗавершение", ЭтотОбъект), НСтр("ru = 'Табличная часть ""Материалы"" будет перезаполнена! Продолжить выполнение операции?'"), 
							РежимДиалогаВопрос.ДаНет, 0);
        Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоОстаткамФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьПоОстаткамФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамФрагмент()
    
    ЗаполнитьПоОстаткамСервер();
	
КонецПроцедуры // ЗаполнитьПоРаспределению()

&НаКлиенте
Процедура ДобавитьИзЗаказов(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьИзЗаказовЗавершение", ЭтотОбъект);
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("РежимВыбора", Истина);
	СтруктураОткрытия.Вставить("МножественныйВыбор", Истина);
	СтруктураОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаВыбора", СтруктураОткрытия, ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзЗаказовЗавершение(Заказы, ДополнительныеДанные) Экспорт
	
	Если Заказы=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТабличнойЧасти = "Продукция";
	
	КоличествоСтрок = Объект.Продукция.Количество();
	
	ДобавитьПродукциюИзЗаказов(Заказы);
	
	ЕстьСпецификации = Ложь;
	Для ии = КоличествоСтрок + 1 По Объект.Продукция.Количество() Цикл
		СтрокаТабличнойЧасти = Объект.Продукция[ии - 1];
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) Тогда
			ЕстьСпецификации = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;  
	
	Если ЕстьСпецификации Тогда
		УстановитьКартинкиЗакладок(ЭтотОбъект, Ложь);
	КонецЕсли; 
	ОбновитьСпискиВыбораРаспределение();
	ОбновитьЗаголовокКомандыЗаполнитьПоОстаткам(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура РежимГТД(Команда)
	
	ЭтоРазборка	= (Объект.ВидОперации = КэшЗначений.ВОРазборка);
	ЭтоСборка	= (Объект.ВидОперации = КэшЗначений.ВОСборка);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТДПродукция", "Пометка", НЕ Элементы.РежимГТДПродукция.Пометка И ЭтоРазборка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТДМатериалы", "Пометка", НЕ Элементы.РежимГТДМатериалы.Пометка И ЭтоСборка);
	
	ВключитьРежимГТД = ?(ЭтоРазборка, Элементы.РежимГТДПродукция.Пометка, Элементы.РежимГТДМатериалы.Пометка);
	ИзменитьРежимРаботаГТД(ВключитьРежимГТД, ЭтоРазборка, ЭтоСборка);
	
КонецПроцедуры

&НаКлиенте
Процедура НомераГТДЗаполнитьПоФактическимОстаткам(Команда)
	
	ЭтоРазборка	= (Объект.ВидОперации = КэшЗначений.ВОРазборка);
	ЭтоСборка	= (Объект.ВидОперации = КэшЗначений.ВОСборка);
	
	НомераГТДЗаполнитьПоФактическимОстаткамНаСервере(ЭтоРазборка, ЭтоСборка);
	
КонецПроцедуры

&НаКлиенте
Процедура НомераГТДПодобрать(Команда)
	
	ЭтоРазборка	= (Объект.ВидОперации = КэшЗначений.ВОРазборка);
	ЭтоСборка	= (Объект.ВидОперации = КэшЗначений.ВОСборка);
	
	НомераГТДПодобратьНаСервере(ЭтоРазборка, ЭтоСборка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНомераГТДИСтраныПроисхождения(Команда)
	
	ИмяТЧ = ?(Объект.ВидОперации = КэшЗначений.ВОСборка, "Запасы", "Продукция");
	НомераГТДОчиститьНомераИСтраныПроисхожденияНаСервере(ИмяТЧ);
	
КонецПроцедуры

#Область ИнтеграцияИС

// ИнтеграцияИС

&НаКлиенте
Процедура Подключаемый_ПолеИнтеграцииИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОбработкаНавигационнойСсылкиВФормеДокументаОснования(
		ЭтотОбъект,
		Объект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьПолеИнтеграцииИСВФормеДокументаОснования(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьПолеИнтеграцииИСВФормеДокументаОснования(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПолеИнтеграцииИСВФормеДокументаОснования(ДополнительныеПараметры)
	
	ИнтеграцияИС.ОбновитьПолеИнтеграцииВФормеДокументаОснования(ЭтотОбъект, Объект, ДополнительныеПараметры);
	
КонецПроцедуры

// Конец ИнтеграцияИС

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьИзмененияРеквизитовПечати(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ПечатьДокументовУНФКлиент.ОбновитьЗначенияРеквизитовПечати(ЭтотОбъект, Результат.ИзмененныеРеквизиты);
		
		Если Результат.Свойство("Команда") Тогда
			
			Подключаемый_ВыполнитьКоманду(Результат.Команда);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет Запасы по спецификации.
//
&НаСервере
Процедура ЗаполнитьПоСпецификацииНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьТабличнуюЧастьПоСпецификации();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	ПроизводствоСервер.ЗаполнитьКэшКонтроляРаспределения(Объект, КэшКонтроляРаспределения);
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ЗаполнитьПризнакиИспользованияЭтапов();
	
	ЗапасыНеЗаполнены = Ложь;
	ВывестиОтметкиКонтроля(ЭтотОбъект);
	ОбновитьЭтапыНаФорме(ЭтотОбъект);
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

// Процедура заполняет Запасы по остаткам.
//
&НаСервере
Процедура ЗаполнитьПоОстаткамСервер()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьТабличнуюЧастьПоОстаткам();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	ПроизводствоСервер.ЗаполнитьКэшКонтроляРаспределения(Объект, КэшКонтроляРаспределения);
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ЗаполнитьПризнакиИспользованияЭтапов();
	
	ЗапасыНеЗаполнены = Ложь;
	ВывестиОтметкиКонтроля(ЭтотОбъект);
	ОбновитьЭтапыНаФорме(ЭтотОбъект);
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Получает набор данных с сервера.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	СтруктураДанные.Вставить("ПодписьРуководителя", Организация.ПодписьРуководителя);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	// Наборы
	СтруктураДанные.Вставить("ЭтоНабор", СтруктураДанные.Номенклатура.ЭтоНабор);
	
	СтруктураДанные.Вставить("Склад", СтруктураДанные.Номенклатура.Склад);
	СтруктураДанные.Вставить("Ячейка", СтруктураДанные.Номенклатура.Ячейка);

	// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",Ложь);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) 
		и СтруктураДанные.Номенклатура.ИспользоватьХарактеристики Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура);
		
		Если Не ЗначенияПоУмолчанию = Неопределено Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика",ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика), СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
		
		СтруктураДанные.Вставить("ИспользоватьХарактеристики",Истина);
		СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",СтруктураДанные.Номенклатура.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли; 
	// Конец Характеристики
	
	//Партии
	СтруктураДанные.Вставить("ИспользоватьПартии",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеПартий",Ложь);
	
	Если НЕ СтруктураДанные.Свойство("Партия") Тогда
		СтруктураДанные.Вставить("Партия", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) 
		и СтруктураДанные.Номенклатура.ИспользоватьПартии Тогда
		
		Если СтруктураДанные.Свойство("СтатусПартии") Тогда
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтруктураДанные.СтатусПартии);
		Иначе
			Если Не СтруктураДанные.Свойство("ВидОперации") Тогда
				ВидОперации = Неопределено
			Иначе
				ВидОперации = СтруктураДанные.ВидОперации
			КонецЕсли;
			
			СтатусПартии = НоменклатураВДокументахСервер.СоответствиеВидаОпреацииИлиХозОперацииСтатусуПартии(, ВидОперации);
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтатусПартии);
		КонецЕсли;
		
		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		
		Если Не ЗначенияПартииПоУмолчанию = Неопределено Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;
		
		СтруктураДанные.Партия = ?(ЗначениеЗаполнено(СтруктураДанные.Партия), СтруктураДанные.Партия, ПартияПоУмолчанию);
		
		СтруктураДанные.ПроверятьЗаполнениеПартий = СтруктураДанные.Номенклатура.ПроверятьЗаполнениеПартий;
		СтруктураДанные.ИспользоватьПартии = Истина;
		
	КонецЕсли;
	// Конец Партии
	
	Если СтруктураДанные.Свойство("Характеристика") Тогда
		СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
	Иначе
		СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура));
	КонецЕсли;
	СтруктураДанные = ПолучитьДанныеСпецификацияПриИзменении(СтруктураДанные);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Получает набор данных с сервера для процедуры ХарактеристикаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
	СтруктураДанные = ПолучитьДанныеСпецификацияПриИзменении(СтруктураДанные);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

// Получает набор данных с сервера для процедуры СтруктурнаяЕдиницаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеСтруктурнаяЕдиницаПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.Подразделение.ПолучательПеремещения.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад
		ИЛИ СтруктураДанные.Подразделение.ПолучательПеремещения.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
		
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаПродукции", СтруктураДанные.Подразделение.ПолучательПеремещения);
		СтруктураДанные.Вставить("ЯчейкаПродукции", СтруктураДанные.Подразделение.ЯчейкаПолучателяПеремещения);
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаПродукцииПодписьМОЛ", СтруктураДанные.Подразделение.ПолучательПеремещения.ПодписьМОЛ);
		
	Иначе
		
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаПродукции", Неопределено);
		СтруктураДанные.Вставить("ЯчейкаПродукции", Неопределено);
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаПродукцииПодписьМОЛ", СтруктураДанные.Подразделение.ПодписьМОЛ);
		
	КонецЕсли;
	
	Если СтруктураДанные.Подразделение.ИсточникПеремещения.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад
		ИЛИ СтруктураДанные.Подразделение.ИсточникПеремещения.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
		
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаЗапасов", СтруктураДанные.Подразделение.ИсточникПеремещения);
		СтруктураДанные.Вставить("ЯчейкаЗапасов", СтруктураДанные.Подразделение.ЯчейкаИсточникаПеремещения);
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаЗапасовПодписьМОЛ", СтруктураДанные.Подразделение.ИсточникПеремещения.ПодписьМОЛ);
		
	Иначе
		
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаЗапасов", Неопределено);
		СтруктураДанные.Вставить("ЯчейкаЗапасов", Неопределено);
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаЗапасовПодписьМОЛ", СтруктураДанные.Подразделение.ПодписьМОЛ);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("СтруктурнаяЕдиницаОтходов", СтруктураДанные.Подразделение.ПолучательОтходов);
	СтруктураДанные.Вставить("ЯчейкаОтходов", СтруктураДанные.Подразделение.ЯчейкаПолучателяОтходов);
	
	СтруктураДанные.Вставить("ОрдерныйСклад", СтруктураДанные.Подразделение.ОрдерныйСклад 
	И СтруктураДанные.Подразделение.ТипСтруктурнойЕдиницы=Перечисления.ТипыСтруктурныхЕдиниц.Склад);
	СтруктураДанные.Вставить("ОрдерныйСкладПродукции", СтруктураДанные.Подразделение.ПолучательПеремещения.ОрдерныйСклад 
	И СтруктураДанные.Подразделение.ПолучательПеремещения.ТипСтруктурнойЕдиницы=Перечисления.ТипыСтруктурныхЕдиниц.Склад);
	СтруктураДанные.Вставить("ОрдерныйСкладОтходов", СтруктураДанные.Подразделение.ПолучательОтходов.ОрдерныйСклад 
	И СтруктураДанные.Подразделение.ПолучательОтходов.ТипСтруктурнойЕдиницы=Перечисления.ТипыСтруктурныхЕдиниц.Склад);
	СтруктураДанные.Вставить("ОрдерныйСкладЗапасов", СтруктураДанные.Подразделение.ИсточникПеремещения.ОрдерныйСклад 
	И СтруктураДанные.Подразделение.ИсточникПеремещения.ТипСтруктурнойЕдиницы=Перечисления.ТипыСтруктурныхЕдиниц.Склад);
	СтруктураДанные.Вставить("ЭтоСборка", (СтруктураДанные.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Сборка));
	СтруктураДанные.Вставить("ПодписьКонтролера", СтруктураДанные.Подразделение.ПодписьМОЛ);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеСтруктурнаяЕдиницаПриИзменении()

// Получает набор данных с сервера для процедуры ЯчейкаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеЯчейкаПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.СтруктурнаяЕдиница = СтруктураДанные.СтруктурнаяЕдиницаПродукции Тогда
		
		Если СтруктураДанные.СтруктурнаяЕдиница.ПолучательПеремещения <> СтруктураДанные.СтруктурнаяЕдиницаПродукции
			ИЛИ СтруктураДанные.СтруктурнаяЕдиница.ЯчейкаПолучателяПеремещения <> СтруктураДанные.ЯчейкаПродукции Тогда
			
			СтруктураДанные.Вставить("НоваяЯчейкаПродукции", СтруктураДанные.Ячейка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДанные.СтруктурнаяЕдиница = СтруктураДанные.СтруктурнаяЕдиницаЗапасов Тогда
		
		Если СтруктураДанные.СтруктурнаяЕдиница.ИсточникПеремещения <> СтруктураДанные.СтруктурнаяЕдиницаЗапасов
			ИЛИ СтруктураДанные.СтруктурнаяЕдиница.ЯчейкаИсточникаПеремещения <> СтруктураДанные.ЯчейкаЗапасов Тогда
			
			СтруктураДанные.Вставить("НоваяЯчейкаЗапасов", СтруктураДанные.Ячейка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДанные.СтруктурнаяЕдиница = СтруктураДанные.СтруктурнаяЕдиницаОтходов Тогда
		
		Если СтруктураДанные.СтруктурнаяЕдиница.ПолучательОтходов <> СтруктураДанные.СтруктурнаяЕдиницаОтходов
			ИЛИ СтруктураДанные.СтруктурнаяЕдиница.ЯчейкаПолучателяОтходов <> СтруктураДанные.ЯчейкаОтходов Тогда
			
			СтруктураДанные.Вставить("НоваяЯчейкаОтходов", СтруктураДанные.Ячейка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЯчейкаПриИзменении()

// Получает набор данных с сервера для процедуры СтруктурнаяЕдиницаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеСтруктурнаяЕдиницаПродукцияЗапасыОтходыПриИзменении(СтруктураДанные)
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураДанные.Склад, "ОрдерныйСклад, ТипСтруктурнойЕдиницы, ПодписьМОЛ");
	
	СтруктураДанные.Вставить("ОрдерныйСклад", ЗначенияРеквизитов.ОрдерныйСклад = Истина 
	И ЗначенияРеквизитов.ТипСтруктурнойЕдиницы=Перечисления.ТипыСтруктурныхЕдиниц.Склад);
	СтруктураДанные.Вставить("ПодписьМОЛ", ЗначенияРеквизитов.ПодписьМОЛ);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеСтруктурнаяЕдиницаПродукцияЗапасыОтходыПриИзменении()

// Процедура вызывает обработку заполнения документа по основанию.
//
&НаСервере
Процедура ЗаполнитьПоДокументу(РеквизитОснование = "ДокументОснование")
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(Объект[РеквизитОснование]);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	РучноеРаспределение = Объект.РучноеРаспределение;

	УправлениеФормой(ЭтотОбъект);
	
	УстановитьВидимостьОтПользовательскихНастроек(ЭтотОбъект);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ЗаполнитьПризнакиИспользованияЭтапов();
	
	Если Объект.РучноеРаспределение Тогда
		ПроизводствоСервер.ЗаполнитьКэшКонтроляРаспределения(Объект, КэшКонтроляРаспределения);
	КонецЕсли; 
	ОбновитьЭтапыНаФорме(ЭтотОбъект);
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	
КонецПроцедуры // ЗаполнитьПоДокументу()

// ПодключаемоеОборудование
// Процедура получает данные по штрихкодам.
//
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		ДанныеШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() <> 0 Тогда
			
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
			СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
			
			Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
				ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из Метаданные.Документы.СборкаЗапасов.ТабличныеЧасти.Запасы.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов)
	
	ИмяТекущейСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	Если ИмяТекущейСтраницы = "ТЧПродукция" Тогда
		ИмяТабличнойЧасти = "Продукция";
		ИмяТабличнойЧастиСерийныеНомера = "СерийныеНомераПродукция";
	ИначеЕсли ИмяТекущейСтраницы = "ТЧЗапасы" Тогда
		ИмяТабличнойЧасти = "Запасы";
		ИмяТабличнойЧастиСерийныеНомера = "СерийныеНомера";
	Иначе
		Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа", Новый Массив, Новый Массив);
	КонецЕсли;
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрикодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрикодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрикодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено ИЛИ ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры,ЭтоНабор", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор));
		Иначе
			МассивСтрокТЧ = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.ЕдиницаИзмерения));
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				Если НоваяСтрока.Свойство("Спецификация") Тогда
					НоваяСтрока.Спецификация = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Спецификация;
				КонецЕсли;
				Если НоваяСтрока.Свойство("ИспользоватьЭтапыПроизводства") Тогда
					НоваяСтрока.ИспользоватьЭтапыПроизводства = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ИспользоватьЭтапыПроизводства;
				КонецЕсли; 
				УправлениеНебольшойФирмойКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект, НоваяСтрока);
				Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				Если ИмяТабличнойЧасти = "Запасы" Тогда
					НоваяСтрока.ДоляСтоимости = 1;
				КонецЕсли; 
			Иначе
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
			Если ДанныеШтрихкода.Свойство("СерийныйНомер") И ЗначениеЗаполнено(ДанныеШтрихкода.СерийныйНомер) Тогда
				РаботаССерийнымиНомерамиКлиентСервер.ДобавитьСерийныйНомерВСтроку(НоваяСтрока, ДанныеШтрихкода.СерийныйНомер, Объект, ИмяТабличнойЧастиСерийныеНомера, ИмяТабличнойЧасти);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрикодов) Экспорт
	
	Модифицированность = Истина;
	
	НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов);
	НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект,,,,Оповещение
		);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
	ЗаполнитьПризнакиИспользованияХарактеристикСервер();

	Если ИмяТабличнойЧасти="Продукция" Тогда
		УстановитьКартинкиЗакладок(ЭтотОбъект, Ложь);
		ОбновитьСпискиВыбораРаспределение();
	ИначеЕсли ИмяТабличнойЧасти="Запасы" Тогда
		ВывестиОтметкиКонтроля(ЭтотОбъект);
	КонецЕсли; 
	
КонецПроцедуры

//Проверяет,в зависимости от использования, заполнение характеристик номенклатуры
//
&НаСервере
Процедура ПроверитьЗаполнениеХарактеристикРаспределениеЗапасов(Отказ)
	
ТаблицаНоменклатуры = РаспределениеЗапасов.Выгрузить(,"Номенклатура");
ТаблицаНоменклатуры.Свернуть("Номенклатура");

СписокНоменклатуры = СписокНоменклатурыСХарактеристикамиРаспределениеЗапасов(ТаблицаНоменклатуры);
СписокНоменклатурыСПартями = СписокНоменклатурыСПартиямиРаспределениеЗапасов(ТаблицаНоменклатуры);

Для Каждого СтрокаЗапасы из РаспределениеЗапасов Цикл
	
	Если Не СписокНоменклатуры.НайтиПоЗначению(СтрокаЗапасы.Номенклатура) = Неопределено и Не ЗначениеЗаполнено(СтрокаЗапасы.Характеристика)
		Тогда
		ТекстСообщения = НСтр("ru = 'В таблице %Таблица%, для номенклатуры %1% в строке %Номер%, заполнение поля ""характеристика"" является обязательным. '");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1%", Строка(СтрокаЗапасы.Номенклатура));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаЗапасы.НомерСтроки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Таблица%", "РаспределениеЗапасов");
		
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
		Объект,
		ТекстСообщения,
		"РаспределениеЗапасов",
		СтрокаЗапасы.НомерСтроки,
		"Характеристика",
		Отказ
		);
	КонецЕсли;
	
	Если Не СписокНоменклатурыСПартями.НайтиПоЗначению(СтрокаЗапасы.Номенклатура) = Неопределено
		и Не ЗначениеЗаполнено(СтрокаЗапасы.Партия)
		Тогда
		ТекстСообщения = НСтр("ru = 'В таблице %Таблица%, для номенклатуры %1% в строке %Номер%, заполнение поля ""партия"" является обязательным. '");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1%", Строка(СтрокаЗапасы.Номенклатура));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаЗапасы.НомерСтроки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Таблица%", "РаспределениеЗапасов");
		
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
		Объект,
		ТекстСообщения,
		"РаспределениеЗапасов",
		СтрокаЗапасы.НомерСтроки,
		"Партия",
		Отказ
		);
	КонецЕсли;
	
КонецЦикла;
	
КонецПроцедуры

//Получает список номенклатуры для которой ведется учет по характеристикам таб. части "РаспределениеЗапасов"
//
&НаСервере
Функция СписокНоменклатурыСХарактеристикамиРаспределениеЗапасов(ТаблицаНоменклатуры)
	
	СписокНоменклатуры = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ТаблицаНоменклатуры.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|ГДЕ
	|	ТаблицаНоменклатуры.Номенклатура.ИспользоватьХарактеристики
	|	И ТаблицаНоменклатуры.Номенклатура.ПроверятьЗаполнениеХарактеристики";
	
	МассивНоменклатуры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	СписокНоменклатуры.ЗагрузитьЗначения(МассивНоменклатуры);
	
	Возврат СписокНоменклатуры;
	
КонецФункции

//Получает список номенклатуры для которой ведется учет по партиям таб. части "РаспределениеЗапасов"
//
&НаСервере
Функция СписокНоменклатурыСПартиямиРаспределениеЗапасов(ТаблицаНоменклатуры)
	
	СписокНоменклатуры = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ТаблицаНоменклатуры.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|ГДЕ
	|	ТаблицаНоменклатуры.Номенклатура.ИспользоватьПартии 
	|	И ТаблицаНоменклатуры.Номенклатура.ПроверятьЗаполнениеПартий";
	
	МассивНоменклатуры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	СписокНоменклатуры.ЗагрузитьЗначения(МассивНоменклатуры);
	
	Возврат СписокНоменклатуры;

КонецФункции

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		Если ТекНекорректныйШтрихкод.Свойство("ЭтоНабор") И ТекНекорректныйШтрихкод.ЭтоНабор Тогда
			// Наборы
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", НСтр("ru = 'Набор'"));
		Иначе
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		КонецЕсли; 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

// Конец ПодключаемоеОборудование

// Процедура заполняет колонку Резерв по резервам под заказ.
//
&НаСервере
Процедура ЗаполнитьКолонкуРезервПоРезервамНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьКолонкуРезервПоРезервам();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ЗаполнитьПризнакиИспользованияЭтапов();
	
	Если Объект.РучноеРаспределение Тогда
		ПроизводствоСервер.ЗаполнитьКэшКонтроляРаспределения(Объект, КэшКонтроляРаспределения);
	КонецЕсли; 
	ОбновитьЭтапыНаФорме(ЭтотОбъект);
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	
КонецПроцедуры // ЗаполнитьКолонкуРезервПоРезервамНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыТЧПоШапке(Объект)

	// Заполнение склада
	Если Объект.ПоложениеСклада<>ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		ТЧ = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Разборка"), Объект.Продукция, Объект.Запасы);
		Для каждого СтрокаТабличнойЧасти Из ТЧ Цикл
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаЗапасов;
			СтрокаТабличнойЧасти.Ячейка = Объект.ЯчейкаЗапасов;
		КонецЦикла; 
		ТЧ = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Разборка"), Объект.Запасы, Объект.Продукция);
		Для каждого СтрокаТабличнойЧасти Из ТЧ Цикл
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаПродукции;
			СтрокаТабличнойЧасти.Ячейка = Объект.ЯчейкаПродукции;
		КонецЦикла; 
	КонецЕсли;
	// Заполнение заказа покупателя
	Если Объект.ПоложениеЗаказаПокупателя<>ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			СтрокаТабличнойЧасти.ЗаказПокупателя = Объект.ЗаказПокупателя;
		КонецЦикла; 
		Для каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
			СтрокаТабличнойЧасти.ЗаказПокупателя = Объект.ЗаказПокупателя;
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаПоКлючу(Таблица, КлючСвязи, ИмяПоля = "КлючСвязи")
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить(ИмяПоля, КлючСвязи);
	Строки = Таблица.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()=0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Строки[0];
	КонецЕсли; 
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияХарактеристикСервер()
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	Если Объект.РучноеРаспределение Тогда
		ПроизводствоСервер.ЗаполнитьКэшКонтроляРаспределения(Объект, КэшКонтроляРаспределения);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеШапки(СтрокаТЧ, ИмяТЧ = "Запасы")
	
	СтруктураПолей = Новый Структура;
	Если Объект.ПоложениеЗаказаПокупателя=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
		СтруктураПолей.Вставить("ЗаказПокупателя", Объект.ЗаказПокупателя);
	КонецЕсли;
	Если Объект.ПоложениеСклада=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") 
		И Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Сборка") Тогда
		Если ИмяТЧ="Продукция" Тогда
			СтруктураПолей.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаПродукции);
			СтруктураПолей.Вставить("Ячейка", Объект.ЯчейкаПродукции);
		Иначе
			СтруктураПолей.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаЗапасов);
			СтруктураПолей.Вставить("Ячейка", Объект.ЯчейкаЗапасов);
		КонецЕсли; 
	КонецЕсли; 
	Если Объект.ПоложениеСклада=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") 
		И Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Разборка") Тогда
		Если ИмяТЧ="Продукция" Тогда
			СтруктураПолей.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаЗапасов);
			СтруктураПолей.Вставить("Ячейка", Объект.ЯчейкаЗапасов);
		Иначе
			СтруктураПолей.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаПродукции);
			СтруктураПолей.Вставить("Ячейка", Объект.ЯчейкаПродукции);
		КонецЕсли; 
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураПолей);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПродукциюИзЗаказов(Заказы)
	
	ИмяТабличнойЧасти = "Продукция";
	СоответствиеКлючейЗапасы = Новый Соответствие;
	СоответствиеКлючейМатериалы = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказы", Заказы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ЗаказПокупателяЗапасы.СерийныеНомера КАК СерийныеНомера,
	|	ЗаказПокупателяЗапасы.Количество - ЗаказПокупателяЗапасы.Резерв КАК Количество,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказПокупателяЗапасы.Спецификация КАК Спецификация,
	|	ЗаказПокупателяЗапасы.Партия КАК Партия,
	|	ЗаказПокупателяЗапасы.Ссылка КАК ЗаказПокупателя,
	|	ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЗаказПокупателяЗапасы.КлючСвязи КАК КлючСвязи,
	|	ИСТИНА КАК ЭтоЗапасы
	|ПОМЕСТИТЬ Запасы
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Количество - ЗаказПокупателяЗапасы.Резерв > 0
	|	И (ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ИЛИ ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|	И (ЗаказПокупателяЗапасы.Спецификация <> ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
	|			ИЛИ ЗаказПокупателяЗапасы.Номенклатура.СпособПополнения = ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Производство))
	|	И ЗаказПокупателяЗапасы.Ссылка В(&Заказы)
	|	И ЗаказПокупателяЗапасы.Ссылка.ОсновнойВариантКП = ЗаказПокупателяЗапасы.НомерВариантаКП
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателяМатериалы.Номенклатура,
	|	ЗаказПокупателяМатериалы.Характеристика,
	|	ЗаказПокупателяМатериалы.СерийныеНомера,
	|	ЗаказПокупателяМатериалы.Количество - ЗаказПокупателяМатериалы.Резерв,
	|	ЗаказПокупателяМатериалы.ЕдиницаИзмерения,
	|	ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка),
	|	ЗаказПокупателяМатериалы.Партия,
	|	ЗаказПокупателяМатериалы.Ссылка,
	|	ЗаказПокупателяМатериалы.Номенклатура.ТипНоменклатуры,
	|	ЗаказПокупателяМатериалы.КлючСвязи,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ЗаказПокупателя.Материалы КАК ЗаказПокупателяМатериалы
	|ГДЕ
	|	ЗаказПокупателяМатериалы.Количество - ЗаказПокупателяМатериалы.Резерв > 0
	|	И (ЗаказПокупателяМатериалы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ИЛИ ЗаказПокупателяМатериалы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|	И ЗаказПокупателяМатериалы.Номенклатура.СпособПополнения = ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Производство)
	|	И ЗаказПокупателяМатериалы.Ссылка В(&Заказы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Запасы.Номенклатура КАК Номенклатура,
	|	Запасы.Характеристика КАК Характеристика,
	|	Запасы.СерийныеНомера КАК СерийныеНомера,
	|	Запасы.Количество КАК Количество,
	|	Запасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Запасы.Спецификация КАК Спецификация,
	|	Запасы.Партия КАК Партия,
	|	Запасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	Запасы.ТипНоменклатуры КАК ТипНоменклатуры,
	|	Запасы.КлючСвязи КАК КлючСвязи,
	|	Запасы.ЭтоЗапасы КАК ЭтоЗапасы
	|ИЗ
	|	Запасы КАК Запасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяСерийныеНомера.СерийныйНомер КАК СерийныйНомер,
	|	ЗаказПокупателяСерийныеНомера.КлючСвязи КАК КлючСвязи
	|ИЗ
	|	Документ.ЗаказПокупателя.СерийныеНомера КАК ЗаказПокупателяСерийныеНомера
	|ГДЕ
	|	ЗаказПокупателяСерийныеНомера.КлючСвязи В
	|			(ВЫБРАТЬ
	|				Запасы.КлючСвязи
	|			ИЗ
	|				Запасы
	|			ГДЕ
	|				Запасы.ЭтоЗапасы)
	|	И ЗаказПокупателяСерийныеНомера.Ссылка В(&Заказы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяСерийныеНомераМатериалы.СерийныйНомер КАК СерийныйНомер,
	|	ЗаказПокупателяСерийныеНомераМатериалы.КлючСвязи КАК КлючСвязи
	|ИЗ
	|	Документ.ЗаказПокупателя.СерийныеНомераМатериалы КАК ЗаказПокупателяСерийныеНомераМатериалы
	|ГДЕ
	|	ЗаказПокупателяСерийныеНомераМатериалы.КлючСвязи В
	|			(ВЫБРАТЬ
	|				Запасы.КлючСвязи
	|			ИЗ
	|				Запасы
	|			ГДЕ
	|				НЕ Запасы.ЭтоЗапасы)
	|	И ЗаказПокупателяСерийныеНомераМатериалы.Ссылка В(&Заказы)";
	Результат = Запрос.ВыполнитьПакет();
	
	МаксимумКлючСвязи = 0;
	Для каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
		МаксимумКлючСвязи = Макс(МаксимумКлючСвязи, СтрокаТабличнойЧасти.КлючСвязи);
	КонецЦикла; 
	
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Продукция.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, , "КлючСвязи");
		МаксимумКлючСвязи = МаксимумКлючСвязи + 1;
		НоваяСтрока.КлючСвязи = МаксимумКлючСвязи;
		Если Выборка.ЭтоЗапасы Тогда
			СоответствиеКлючейЗапасы.Вставить(Выборка.КлючСвязи, НоваяСтрока.КлючСвязи);
		Иначе
			СоответствиеКлючейМатериалы.Вставить(Выборка.КлючСвязи, НоваяСтрока.КлючСвязи);
		КонецЕсли; 
	КонецЦикла;
	
	// Серийный номера
	Выборка = Результат[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.СерийныеНомераПродукция.Добавить();
		НоваяСтрока.СерийныйНомер = Выборка.СерийныйНомер;
		НоваяСтрока.КлючСвязи = СоответствиеКлючейЗапасы.Получить(Выборка.КлючСвязи);
	КонецЦикла; 
	Выборка = Результат[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.СерийныеНомераПродукция.Добавить();
		НоваяСтрока.СерийныйНомер = Выборка.СерийныйНомер;
		НоваяСтрока.КлючСвязи = СоответствиеКлючейМатериалы.Получить(Выборка.КлючСвязи);
	КонецЦикла; 
	
	ЗаполнитьПризнакиИспользованияХарактеристикСервер();
	ЗаполнитьПризнакиИспользованияЭтапов();

КонецПроцедуры

&НаСервере
Функция ПроверитьСоответствиеРеквизитовДокументаВЕТИС()
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	СоответствиеПроверяемыхРеквизитов = Новый Соответствие;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Сборка
		Тогда
		СоответствиеПроверяемыхРеквизитов.Вставить("Продукция", "СтруктурнаяЕдиницаПродукции" );
		СоответствиеПроверяемыхРеквизитов.Вставить("ПредставлениеПоляПродукция", "Получатель");
		СоответствиеПроверяемыхРеквизитов.Вставить("Запасы", "СтруктурнаяЕдиницаЗапасов");
		СоответствиеПроверяемыхРеквизитов.Вставить("ПредставлениеПоляЗапасы", "Списать из");
	Иначе
		СоответствиеПроверяемыхРеквизитов.Вставить("Продукция", "СтруктурнаяЕдиницаЗапасов");
		СоответствиеПроверяемыхРеквизитов.Вставить("ПредставлениеПоляПродукция", "Списать из");
		СоответствиеПроверяемыхРеквизитов.Вставить("Запасы", "СтруктурнаяЕдиницаПродукции");
		СоответствиеПроверяемыхРеквизитов.Вставить("ПредставлениеПоляЗапасы", "Списать из");
	КонецЕсли;
	
	СоответствиеПроверяемыхРеквизитов.Вставить("Отходы", "СтруктурнаяЕдиницаОтходов");
	СоответствиеПроверяемыхРеквизитов.Вставить("ПредставлениеПоляОтходы", "Получатель отходов");
	
	Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		
		ИмяТЧ = ТабличнаяЧасть.Имя;
		
		Если НЕ Объект[ИмяТЧ].Количество()
			Или ТабличнаяЧасть.Реквизиты.Найти("Номенклатура") = Неопределено
			Или ИмяТЧ = "РаспределениеЗапасов" Тогда
			Продолжить
		КонецЕсли;
		
		ЕстьНоменклатураВЕТИС = Ложь;
		
		Для Каждого СтрокаТЧ из Объект[ИмяТЧ] Цикл
			
			ЕстьНоменклатураВЕТИС = СтрокаТЧ.Номенклатура.ПодконтрольнаяПродукцияВЕТИС;
			
			Если ЕстьНоменклатураВЕТИС Тогда 
				
				ИмяПроверяемогоРеквизита = СоответствиеПроверяемыхРеквизитов.Получить(ИмяТЧ);
				
				Если Не Объект.СтруктурнаяЕдиница = Объект[ИмяПроверяемогоРеквизита] Тогда
					
				ПредставлениеПоля = СоответствиеПроверяемыхРеквизитов.Получить("ПредставлениеПоля"+ИмяТЧ);
					
				ТекстСообщения = НСтр("ru = '(ВЕТИС)В шапке табличного поля %Таблица%, значение поля %ИмяПоля% должно совпадать с значением поля ""Изготовитель"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Таблица%", ИмяТЧ);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяПоля%", ПредставлениеПоля);
				
				СообщениеОбОшибке = Новый СообщениеПользователю;
				
								
				СообщениеОбОшибке.Текст = ТекстСообщения;
				СообщениеОбОшибке.Поле = "Объект."+ИмяПроверяемогоРеквизита;
				
				СообщениеОбОшибке.УстановитьДанные(Объект);
				
				СообщениеОбОшибке.Сообщить();
				
				Возврат Истина;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыФормы()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИспользоватьЭтапыПроизводства", ПолучитьФункциональнуюОпцию("ИспользоватьЭтапыПроизводства"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеСпецификацияПриИзменении(СтруктураДанные)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЭтапыПроизводства")
		И ЗначениеЗаполнено(СтруктураДанные.Спецификация)
		И ТипЗнч(СтруктураДанные.Спецификация)=Тип("СправочникСсылка.Спецификации") Тогда
		ВидПроизводства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураДанные.Спецификация, "ВидПроизводства");
		СтруктураДанные.Вставить("ИспользоватьЭтапыПроизводства", ЗначениеЗаполнено(ВидПроизводства));
	Иначе
		СтруктураДанные.Вставить("ИспользоватьЭтапыПроизводства", Ложь);
	КонецЕсли; 
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

&НаКлиенте
Функция ПроизводствоПодЗаказ(СтрокаТабличнойЧасти)
	
	Если Объект.ПоложениеЗаказаПокупателя=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
		Возврат Истина;
	ИначеЕсли Объект.ПоложениеЗаказаПокупателя<>ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") И ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте 
Процедура ИзменитьРежимРаботаГТД(ВключитьРежимГТД, ЭтоРазборка, ЭтоСборка)
	
	Если НЕ КэшЗначений.Свойство("ОбрабатываемыеРеквизиты") Тогда
		
		КэшЗначений.Вставить("ОбрабатываемыеРеквизиты", Новый Массив);
		
	КонецЕсли;
	
	Если ВключитьРежимГТД Тогда
		
		ВключитьРежимРаботаГТД(ЭтоРазборка, ЭтоСборка);
		
	Иначе
		
		ВыключитьРежимРаботаГТД(ЭтоРазборка, ЭтоСборка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРежимРаботаГТД(ЭтоРазборка, ЭтоСборка)
	
	ИмяТЧ = "Запасы";
	Если ЭтоРазборка Тогда
		
		ИмяТЧ = "Продукция";
		
	КонецЕсли;
	
	НеизменяемыеРеквизиты = Новый Массив;
	НеизменяемыеРеквизиты.Добавить(ИмяТЧ + "Пометка");
	НеизменяемыеРеквизиты.Добавить(ИмяТЧ + "НомерСтроки");
	НеизменяемыеРеквизиты.Добавить(ИмяТЧ + "Номенклатура");
	НеизменяемыеРеквизиты.Добавить(ИмяТЧ + "Характеристика");
	НеизменяемыеРеквизиты.Добавить(ИмяТЧ + "Партия");
	НеизменяемыеРеквизиты.Добавить(ИмяТЧ + "Количество");
	НеизменяемыеРеквизиты.Добавить(ИмяТЧ + "ЕдиницаИзмерения");
	НеизменяемыеРеквизиты.Добавить(ИмяТЧ + "СтранаПроисхождения");
	НеизменяемыеРеквизиты.Добавить(ИмяТЧ + "НомерГТД");
	
	Для каждого ЭлементФормы Из Элементы[ИмяТЧ].ПодчиненныеЭлементы Цикл
		
		Если НеизменяемыеРеквизиты.Найти(ЭлементФормы.Имя) = Неопределено
			И ЭлементФормы.Видимость = Истина Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементФормы.Имя, "Видимость", Ложь);
			КэшЗначений.ОбрабатываемыеРеквизиты.Добавить(ЭлементФормы.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяТЧ + "ЕдиницаИзмерения", "Доступность", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьРежимРаботаГТД(ЭтоРазборка, ЭтоСборка)
	
	ИмяТЧ = "Запасы";
	Если ЭтоРазборка Тогда
		
		ИмяТЧ = "Продукция";
		
	КонецЕсли;
	
	Для каждого ИмяЭлементаФормы Из КэшЗначений.ОбрабатываемыеРеквизиты Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлементаФормы, "Видимость", Истина);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяТЧ + "ЕдиницаИзмерения", "Доступность", Истина);
	
	КэшЗначений.ОбрабатываемыеРеквизиты = Новый Массив;
	
КонецПроцедуры

&НаСервере
Процедура НомераГТДЗаполнитьПоФактическимОстаткамНаСервере(ЭтоРазборка, ЭтоСборка)
	
	ИмяТЧ = "Запасы";
	Если ЭтоРазборка Тогда
		
		ИмяТЧ = "Продукция";
		
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ТаблицаЗапасы", Неопределено);
	ПараметрыПодбора.Вставить("ОстаткиПоГТД", Неопределено);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("ИндексТекущейСтроки", ?(ЗначениеЗаполнено(Элементы[ИмяТЧ].ТекущаяСтрока), Объект[ИмяТЧ].Индекс(Объект[ИмяТЧ].НайтиПоИдентификатору(Элементы[ИмяТЧ].ТекущаяСтрока)), 0));
	ПараметрыПодбора.Вставить("ЕстьКлючСвязиАвтоматическихСкидок", Неопределено);
	
	МассивИменПолей = Новый Массив;
	МассивИменПолей.Добавить("Резерв");
	ПараметрыПодбора.Вставить("ИменаПолей", МассивИменПолей);
	
	ГрузовыеТаможенныеДекларацииСервер.ПодготовитьТаблицуЗапасовИзТаблицыФормы(ПараметрыПодбора, Объект[ИмяТЧ]);
	ГрузовыеТаможенныеДекларацииСервер.СформироватьОстаткиНомеровГТД(ПараметрыПодбора);
	ГрузовыеТаможенныеДекларацииСервер.ПеренестиОстаткиНомеровГТДВТаблицуФормы(Объект[ИмяТЧ], ПараметрыПодбора);
	
	Если ПараметрыПодбора.ИндексТекущейСтроки <> -1 Тогда
		
		СтрокаКоллекции = Объект[ИмяТЧ].Получить(ПараметрыПодбора.ИндексТекущейСтроки);
		Элементы[ИмяТЧ].ТекущаяСтрока = СтрокаКоллекции.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НомераГТДПодобратьНаСервере(ЭтоРазборка, ЭтоСборка)
	
	ИмяТЧ = "Запасы";
	Если ЭтоРазборка Тогда
		
		ИмяТЧ = "Продукция";
		
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ТаблицаЗапасы", Неопределено);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	
	ГрузовыеТаможенныеДекларацииСервер.ПодготовитьТаблицуЗапасовИзТаблицыФормы(ПараметрыПодбора, Объект[ИмяТЧ]);
	ГрузовыеТаможенныеДекларацииСервер.ПодобратьНомераГТДПоПредыдущимПоступлениям(ПараметрыПодбора);
	ГрузовыеТаможенныеДекларацииСервер.ПеренестиНомераГТДВТаблицуФормы(Объект[ИмяТЧ], ПараметрыПодбора);
	
КонецПроцедуры

&НаСервере
Процедура НомераГТДОчиститьНомераИСтраныПроисхожденияНаСервере(ИмяТЧ)
	
	ГрузовыеТаможенныеДекларацииСервер.ОчиститьНомераГТДИСтраныПроисхождения(Объект[ИмяТЧ], -1, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСкладВТЧ()
	
	Если Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Разборка") Тогда
		ИмяТЧ = "Продукция";
		ИмяТЧОчистка = "Запасы";
	Иначе
		ИмяТЧ = "Запасы";
		ИмяТЧОчистка = "Продукция";
	КонецЕсли;
	Для каждого СтрокаТабличнойЧасти Из Объект[ИмяТЧОчистка] Цикл
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
		СтрокаТабличнойЧасти.Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
		СтрокаТабличнойЧасти.ЯчейкаДоступна = Ложь;
	КонецЦикла; 
	Для каждого СтрокаТабличнойЧасти Из Объект[ИмяТЧ] Цикл
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаЗапасов;
		СтрокаТабличнойЧасти.Ячейка = Объект.ЯчейкаЗапасов;
		СтрокаТабличнойЧасти.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
	КонецЦикла; 
	Если Объект.РучноеРаспределение Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.РаспределениеЗапасов Цикл
			Если Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Разборка") Тогда
				СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
				СтрокаТабличнойЧасти.Ячейка = ПредопределенноеЗначение("Справочник.Ячейки.ПустаяСсылка");
			Иначе
				СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаЗапасов;
				СтрокаТабличнойЧасти.Ячейка = Объект.ЯчейкаЗапасов;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПодбором

// Процедура - обработчик события Действие команды Подбор
//
&НаКлиенте
Процедура Подбор(Команда)
	
	ИмяТабличнойЧасти 	= "Запасы";
	МаркерПодбора = "Запасы";
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период", 		Объект.Дата);
	ПараметрыПодбора.Вставить("Организация", 	Компания);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Сборка") Тогда
		ПараметрыПодбора.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаЗапасов);
	Иначе
		ПараметрыПодбора.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаПродукции);
	КонецЕсли;
	
	ПараметрыПодбора.Вставить("ИспользуютсяСпецификации", Истина);
	ПараметрыПодбора.Вставить("ИспользуетсяРезервирование", ИспользуетсяРезервирование);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Сборка") Тогда
		ПараметрыПодбора.Вставить("ЭтоПриходныйДокумент", Ложь);
		ПараметрыПодбора.Вставить("ДоступноРедактированиеСтруктурнойЕдиницы", Истина);
	Иначе
		ПараметрыПодбора.Вставить("ЭтоПриходныйДокумент", Истина);
		ПараметрыПодбора.Вставить("ДоступноРедактированиеСтруктурнойЕдиницы", Ложь);
	КонецЕсли;
	
	ТипНоменклатуры = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Номенклатура"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					ТипНоменклатуры.Добавить(ЭлементФиксМассива);
				КонецЦикла; 
			Иначе
				ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	// Наборы
	ПараметрыПодбора.Вставить("ЭтоНабор", Ложь);
	
	СтатусПартии = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Партия"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.Статус" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					СтатусПартии.Добавить(ЭлементФиксМассива);
				КонецЦикла;
			Иначе
				СтатусПартии.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПодбора.Вставить("СтатусПартии", СтатусПартии);
	
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтотОбъект);
	
КонецПроцедуры // Подбор()

// Процедура - обработчик события Действие команды Подбор ТЧ Продукция.
//
&НаКлиенте
Процедура ПодборПродукция(Команда)
	
	ИмяТабличнойЧасти = "Продукция";
	МаркерПодбора = "Продукция";
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период", 		Объект.Дата);
	ПараметрыПодбора.Вставить("Организация",	Компания);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Сборка") Тогда
		ПараметрыПодбора.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаПродукции);
	Иначе
		ПараметрыПодбора.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаЗапасов);
	КонецЕсли;
	
	ПараметрыПодбора.Вставить("ИспользуютсяСпецификации", Истина);
	ПараметрыПодбора.Вставить("ИспользуетсяРезервирование", ИспользуетсяРезервирование);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Сборка") Тогда
		ПараметрыПодбора.Вставить("ЭтоПриходныйДокумент", Истина);
		ПараметрыПодбора.Вставить("ДоступноРедактированиеСтруктурнойЕдиницы", Ложь);
	Иначе
		ПараметрыПодбора.Вставить("ЭтоПриходныйДокумент", Ложь);
		ПараметрыПодбора.Вставить("ДоступноРедактированиеСтруктурнойЕдиницы", Истина);
	КонецЕсли;
	
	ТипНоменклатуры = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Номенклатура"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					ТипНоменклатуры.Добавить(ЭлементФиксМассива);
				КонецЦикла;
			Иначе
				ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	// Наборы
	ПараметрыПодбора.Вставить("ЭтоНабор", Ложь);
	
	СтатусПартии = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Партия"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.Статус" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					СтатусПартии.Добавить(ЭлементФиксМассива);
				КонецЦикла;
			Иначе
				СтатусПартии.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПодбора.Вставить("СтатусПартии", СтатусПартии);
	
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтотОбъект);
	
КонецПроцедуры // ПодборПродукция()

// Процедура - обработчик события Действие команды Подбор
//
&НаКлиенте
Процедура ОтходыПодбор(Команда)
	
	ИмяТабличнойЧасти 	= "Отходы";
	МаркерПодбора = "Отходы";
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период", 				Объект.Дата);
	ПараметрыПодбора.Вставить("Организация", 			Компания);
	ПараметрыПодбора.Вставить("ЭтоПриходныйДокумент",	Истина);
	
	ТипНоменклатуры = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Номенклатура"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					ТипНоменклатуры.Добавить(ЭлементФиксМассива);
				КонецЦикла; 
			Иначе
				ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	// Наборы
	ПараметрыПодбора.Вставить("ЭтоНабор", Ложь);
	
	СтатусПартии = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Партия"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.Статус" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					СтатусПартии.Добавить(ЭлементФиксМассива);
				КонецЦикла;
			Иначе
				СтатусПартии.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПодбора.Вставить("СтатусПартии", СтатусПартии);
	
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтотОбъект);
	
КонецПроцедуры // ПодборВыполнить()

// Функция получает список товаров из временного хранилища
//
&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТЧ, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТЧ].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		// Характеристики
		СтруктураДанныеНоменклатуры = Новый Структура();
		СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
		СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
		
		Если ИмяТабличнойЧасти = "Продукция"
			Тогда
			СтатусПартии = Новый СписокЗначений;
			СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
			СтруктураДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии)
		ИначеЕсли ИмяТабличнойЧасти = "Запасы" Или ИмяТабличнойЧасти = "Отходы"
			Тогда
			СтатусПартии = Новый СписокЗначений;
			СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
			СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье"));
			СтруктураДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии)
		КонецЕсли;
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
		
		НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
		
		Если СтруктураДанные.ИспользоватьХарактеристики
			Тогда
			НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
		// Конец Характеристики
		
		//Партии
		НоваяСтрока.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
		НоваяСтрока.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
		
		НоваяСтрока.Партия = ?(ЗначениеЗаполнено(СтрокаЗагрузки.Партия), СтрокаЗагрузки.Партия, СтруктураДанные.Партия);
		// Конец Партии
		
		Если НоваяСтрока.Свойство("Спецификация") Тогда
			НоваяСтрока.Спецификация = СтруктураДанные.Спецификация;
		КонецЕсли;
		Если НоваяСтрока.Свойство("ИспользоватьЭтапыПроизводства") Тогда
			НоваяСтрока.ИспользоватьЭтапыПроизводства = СтруктураДанные.ИспользоватьЭтапыПроизводства;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "КлючСвязи") Тогда
			НоваяСтрока.КлючСвязи = УправлениеНебольшойФирмойСервер.СоздатьНовыйКлючСвязи(ЭтотОбъект);
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ИмяТабличнойЧасти="Запасы" Тогда
		ПроизводствоСервер.ЗаполнитьКэшКонтроляРаспределения(Объект, КэшКонтроляРаспределения);
	КонецЕсли;
	ОбновитьДоступностьЯчеек();
	ЗаполнитьПризнакиДоступностиЯчеек(ЭтотОбъект);
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

// ПодключаемоеОборудование
// Процедура - обработчик команды командной панели табличной части.
//
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, Новый Структура("ТекШтрихкод", ТекШтрихкод)), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
    
    
    Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
        ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество, ДоляСтоимости", ТекШтрихкод, 1, 1));
    КонецЕсли;

КонецПроцедуры // ПоискПоШтрихкоду()

// Процедура - обработчик события Действие команды ПолучитьВес
//
&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, "Запасы", Ложь);
	
КонецПроцедуры // ПолучитьВес()

// Процедура - обработчик команды ЗагрузитьДанныеИзТСД.
//
&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

// Конец ПодключаемоеОборудование

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

// Процедура устанавливает режим выбора и список выбора для элементов формы.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьРежимИСписокВыбора()
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница)
		ИЛИ Объект.СтруктурнаяЕдиница.ОрдерныйСклад
		ИЛИ Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы<>Перечисления.ТипыСтруктурныхЕдиниц.Склад Тогда
		Элементы.Ячейка.Доступность = Ложь;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаПродукции)
		ИЛИ Объект.СтруктурнаяЕдиницаПродукции.ОрдерныйСклад
		ИЛИ Объект.СтруктурнаяЕдиницаПродукции.ТипСтруктурнойЕдиницы<>Перечисления.ТипыСтруктурныхЕдиниц.Склад Тогда
		Элементы.ЯчейкаПродукцииСборка.Доступность = Ложь;
		Элементы.ЯчейкаЗапасовРазборка.Доступность = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаЗапасов)
		ИЛИ Объект.СтруктурнаяЕдиницаЗапасов.ОрдерныйСклад
		ИЛИ Объект.СтруктурнаяЕдиницаЗапасов.ТипСтруктурнойЕдиницы<>Перечисления.ТипыСтруктурныхЕдиниц.Склад Тогда
		Элементы.ЯчейкаЗапасовСборка.Доступность = Ложь;
		Элементы.ЯчейкаПродукцииРазборка.Доступность = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаОтходов)
		ИЛИ Объект.СтруктурнаяЕдиницаОтходов.ОрдерныйСклад
		ИЛИ Объект.СтруктурнаяЕдиницаОтходов.ТипСтруктурнойЕдиницы<>Перечисления.ТипыСтруктурныхЕдиниц.Склад Тогда
		Элементы.ЯчейкаОтходов.Доступность = Ложь;
	КонецЕсли;
	
	Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить()
		И НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
		
		Элементы.СтруктурнаяЕдиница.РежимВыбораИзСписка = Истина;
		Элементы.СтруктурнаяЕдиница.КнопкаСоздания = Ложь;
		Элементы.СтруктурнаяЕдиница.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		Элементы.СтруктурнаяЕдиница.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		
		Элементы.СтруктурнаяЕдиницаПродукцииСборка.РежимВыбораИзСписка = Истина;
		Элементы.СтруктурнаяЕдиницаПродукцииСборка.КнопкаСоздания = Ложь;
		Элементы.СтруктурнаяЕдиницаПродукцииСборка.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		Элементы.СтруктурнаяЕдиницаПродукцииСборка.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		
		Элементы.СтруктурнаяЕдиницаПродукцииРазборка.РежимВыбораИзСписка = Истина;
		Элементы.СтруктурнаяЕдиницаПродукцииРазборка.КнопкаСоздания = Ложь;
		Элементы.СтруктурнаяЕдиницаПродукцииРазборка.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		Элементы.СтруктурнаяЕдиницаПродукцииРазборка.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		
		Элементы.СтруктурнаяЕдиницаЗапасовСборка.РежимВыбораИзСписка = Истина;
		Элементы.СтруктурнаяЕдиницаЗапасовСборка.КнопкаСоздания = Ложь;
		Элементы.СтруктурнаяЕдиницаЗапасовСборка.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		Элементы.СтруктурнаяЕдиницаЗапасовСборка.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		
		Элементы.СтруктурнаяЕдиницаЗапасовРазборка.РежимВыбораИзСписка = Истина;
		Элементы.СтруктурнаяЕдиницаЗапасовРазборка.КнопкаСоздания = Ложь;
		Элементы.СтруктурнаяЕдиницаЗапасовРазборка.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		Элементы.СтруктурнаяЕдиницаЗапасовРазборка.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		
		Элементы.СтруктурнаяЕдиницаОтходов.РежимВыбораИзСписка = Истина;
		Элементы.СтруктурнаяЕдиницаОтходов.КнопкаСоздания = Ложь;
		Элементы.СтруктурнаяЕдиницаОтходов.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		Элементы.СтруктурнаяЕдиницаОтходов.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		
		Элементы.ПродукцияСтруктурнаяЕдиница.РежимВыбораИзСписка = Истина;
		Элементы.ПродукцияСтруктурнаяЕдиница.КнопкаСоздания = Ложь;
		Элементы.ПродукцияСтруктурнаяЕдиница.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		Элементы.ПродукцияСтруктурнаяЕдиница.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		
		Элементы.ЗапасыСтруктурнаяЕдиница.РежимВыбораИзСписка = Истина;
		Элементы.ЗапасыСтруктурнаяЕдиница.КнопкаСоздания = Ложь;
		Элементы.ЗапасыСтруктурнаяЕдиница.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		Элементы.ЗапасыСтруктурнаяЕдиница.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьРежимИСписокВыбора()

&НаКлиентеНаСервереБезКонтекста
Функция ЗаказПокупателяЗаполнен(Объект)
	
	Возврат ЗначениеЗаполнено(Объект.ЗаказПокупателя) 
	ИЛИ Объект.ПоложениеЗаказаПокупателя=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти");	
	
КонецФункции 

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Колонка "Резерв" ТЧ "Продукция"
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Продукция.ЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПоложениеЗаказаПокупателя", Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ПродукцияРезерв.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	
	// Колонка "Резерв" ТЧ "Запасы"
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПоложениеЗаказаПокупателя", Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗапасыРезерв.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	
	// Этапы производства
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Продукция.ИспользоватьЭтапыПроизводства", Ложь);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПродукцияПодразделениеЗавершающегоЭтапа");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПродукцияЭтапы");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Продукция.ИспользоватьЭтапыПроизводства", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Продукция.ПродукцияПодразделениеЗавершающегоЭтапа", Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПродукцияПодразделениеЗавершающегоЭтапа");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Продукция.ИспользоватьЭтапыПроизводства", Истина);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Продукция.Этапы", "");
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПродукцияЭтапы");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ОтметкаНезаполненного", Истина);
	
	// Ячейки
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Продукция.ЯчейкаДоступна", Ложь);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПродукцияЯчейка");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.Запасы.ЯчейкаДоступна", Ложь);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЗапасыЯчейка");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "РаспределениеЗапасов.ЯчейкаДоступна", Ложь);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "РаспределениеЗапасовЯчейка");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьОтПользовательскихНастроек(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	ЭтоРазборка	= (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Разборка"));
	СкладВТЧ = (Объект.ПоложениеСклада=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти"));
	ЗаказВТЧ = (Объект.ПоложениеЗаказаПокупателя=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти"));
	
	// Склад
	Если СкладВТЧ Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСкладПродукцияСборка", "Видимость", НЕ ЭтоРазборка);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСкладПродукцияРазборка", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСкладЗапасыСборка", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСкладЗапасыРазборка", "Видимость", ЭтоРазборка);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродукцияСтруктурнаяЕдиница", "Видимость", ЭтоРазборка);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродукцияЯчейка", "Видимость", ЭтоРазборка);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтруктурнаяЕдиница", "Видимость", НЕ ЭтоРазборка);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЯчейка", "Видимость", НЕ ЭтоРазборка);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РаспределениеЗапасовСтруктурнаяЕдиница", "Видимость", НЕ ЭтоРазборка);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РаспределениеЗапасовЯчейка", "Видимость", НЕ ЭтоРазборка);
		Форма.СкладВШапке = Ложь;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСкладПродукцияСборка", "Видимость", НЕ ЭтоРазборка);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСкладПродукцияРазборка", "Видимость", ЭтоРазборка);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСкладЗапасыСборка", "Видимость", НЕ ЭтоРазборка);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСкладЗапасыРазборка", "Видимость", ЭтоРазборка);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродукцияСтруктурнаяЕдиница", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродукцияЯчейка", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтруктурнаяЕдиница", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЯчейка", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РаспределениеЗапасовСтруктурнаяЕдиница", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РаспределениеЗапасовЯчейка", "Видимость", Ложь);
		Форма.СкладВШапке = Истина;
	КонецЕсли;
	
	// Заполнение по остаткам
	СкладЗаполнен = (НЕ СкладВТЧ И ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаЗапасов));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЗаполнитьПоОстаткам", "Доступность", СкладЗаполнен);
	ОбновитьЗаголовокКомандыЗаполнитьПоОстаткам(Форма);
	
	// Заказ покупателя
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродукцияЗаказПокупателя", "Видимость", ЗаказВТЧ);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЗаказПокупателя", "Видимость", ЗаказВТЧ);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РаспределениеЗапасовЗаказПокупателя", "Видимость", ЗаказВТЧ);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЗаказПокупателя", "Видимость", НЕ ЗаказВТЧ);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродукцияДобавитьИзЗаказов", "Видимость", НЕ ЭтоРазборка И ЗаказВТЧ);
	
КонецПроцедуры // УстановитьВидимостьОтПользовательскихНастроек()

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭтоРазборка	= (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Разборка"));
	ЭтоСборка	= (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Сборка"));
	ЗаказПокупателяЗаполнен = ЗаказПокупателяЗаполнен(Объект);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРаботаСНомерамиГТДПродукция", "Видимость", ЭтоРазборка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРаботаСНомерамиГТДМатериалы", "Видимость", ЭтоСборка);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЗаполнитьПоОстаткам", "Видимость", НЕ ЭтоРазборка);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиницаЗапасовСборка", "АвтоОтметкаНезаполненного", Объект.Запасы.Количество()>0);
	Если Объект.Запасы.Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурнаяЕдиницаЗапасовСборка", "ОтметкаНезаполненного", Ложь);
	КонецЕсли; 
	
	// Резерв.
	ИспользуетсяРезервирование = ЗаказПокупателяЗаполнен И ЭтоСборка;
	Элементы.ЗапасыРезерв.Видимость = ЗаказПокупателяЗаполнен И ЭтоСборка;
	Элементы.ЗапасыИзменитьРезерв.Видимость = ЗаказПокупателяЗаполнен И ЭтоСборка;
	Элементы.ПродукцияРезерв.Видимость = ЗаказПокупателяЗаполнен И ЭтоРазборка;
	Элементы.ЗапасыДоляСтоимости.Видимость = ЭтоРазборка;
	
	Элементы.ЗаказПокупателя.ТолькоПросмотр = ЗначениеЗаполнено(Объект.ЗаказНаПроизводство);
	Элементы.ПродукцияЗаказПокупателя.ТолькоПросмотр = ЗначениеЗаполнено(Объект.ЗаказНаПроизводство);
	Элементы.ЗапасыЗаказПокупателя.ТолькоПросмотр = ЗначениеЗаполнено(Объект.ЗаказНаПроизводство);
	
	Элементы.РаспределениеЗапасов.ТолькоПросмотр = Форма.ТолькоПросмотр;
	Элементы.РучноеРаспределение.ТолькоПросмотр = Форма.ТолькоПросмотр;
	
	// Статус партии.
	Если ЭтоРазборка Тогда
		
		ДоступныеСтатусы = Новый Массив;
		ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье"));
		МассивЗапасРабота = Новый ФиксированныйМассив(ДоступныеСтатусы);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Статус", МассивЗапасРабота));
		НовыйМассив.Добавить(Новый ПараметрВыбора("Дополнительно.ОграничениеСтатуса", МассивЗапасРабота));
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ПродукцияПартия.ПараметрыВыбора = НовыеПараметры;
		
		НовыйМассив = Новый Массив;
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы")));
		НовыйМассив.Добавить(Новый ПараметрВыбора("Дополнительно.ОграничениеСтатуса", ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы")));
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ЗапасыПартия.ПараметрыВыбора = НовыеПараметры;
		Элементы.РаспределениеЗапасовПартия.ПараметрыВыбора = НовыеПараметры;
		
	Иначе
		
		НовыйМассив = Новый Массив;
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы")));
		НовыйМассив.Добавить(Новый ПараметрВыбора("Дополнительно.ОграничениеСтатуса", ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы")));
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ПродукцияПартия.ПараметрыВыбора = НовыеПараметры;
		
		ДоступныеСтатусы = Новый Массив;
		ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье"));
		МассивЗапасРабота = Новый ФиксированныйМассив(ДоступныеСтатусы);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Статус", МассивЗапасРабота));
		НовыйМассив.Добавить(Новый ПараметрВыбора("Дополнительно.ОграничениеСтатуса", МассивЗапасРабота));
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ЗапасыПартия.ПараметрыВыбора = НовыеПараметры;
		Элементы.РаспределениеЗапасовПартия.ПараметрыВыбора = НовыеПараметры;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродукцияСтранаПроисхождения",	    "Видимость", ЭтоРазборка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродукцияНомерГТД",				    "Видимость", ЭтоРазборка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтранаПроисхождения",		    "Видимость", ЭтоСборка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыНомерГТД", 				    "Видимость", ЭтоСборка);
	
	// Распределение запасов
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧРаспределениеЗапасов", 		    "Видимость", Объект.РучноеРаспределение);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЗаполнитьПоРаспределению",    "Видимость", Объект.РучноеРаспределение);
	
	УправлениеВидимостьюЭтапов(Форма);
	
КонецПроцедуры // УстановитьВидимостьИДоступность()

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗаголовокКомандыЗаполнитьПоОстаткам(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	ЗаказВТЧ = (Объект.ПоложениеЗаказаПокупателя=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти"));
	Если ЗаказВТЧ Тогда
		ЗаказЗаполнен = Ложь;
		Для каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
				ЗаказЗаполнен = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	Иначе
		ЗаказЗаполнен = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
	КонецЕсли; 
	ЗаголовокКоманды = ?(ЗаказЗаполнен И Форма.ФОРезервированиеЗапасов, НСтр("ru = 'По остаткам и резервам'"), НСтр("ru = 'По остаткам'"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЗаполнитьПоОстаткам", "Заголовок", ЗаголовокКоманды);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовДляМобильногоКлиента()
	
	Если Не ОбщегоНазначенияКлиентСервер.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	ЭтоМобильныйКлиент = Истина;
	РаботаСОтборами.НастроитьПанельОтборовМобильныйКлиент(ЭтотОбъект);
	УправлениеНебольшойФирмойСервер.НастроитьФормуОбъектаМобильныйКлиент(Элементы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостьюЭтапов(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ОтображатьЭтапы = ПроизводствоСЭтапами(Форма);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродукцияЭтапы", 				    		"Видимость", ОтображатьЭтапы);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЭтап", 		    					"Видимость", ОтображатьЭтапы);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РаспределениеЗапасовЭтап", 		    		"Видимость", ОтображатьЭтапы);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродукцияПодразделениеЗавершающегоЭтапа",	"Видимость", ОтображатьЭтапы);
	
	Если НЕ ОтображатьЭтапы И НЕ Форма.ТолькоПросмотр Тогда
		Объект.ВыполненныеЭтапы.Очистить();
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			СтрокаТабличнойЧасти.Этап = ПредопределенноеЗначение("Справочник.ЭтапыПроизводства.ПустаяСсылка");
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция ЯчейкаДоступна(СтруктурнаяЕдиница)
	
	Если НЕ КэшЗначений.УчетПоЯчейкам Тогда
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) ИЛИ ТипЗнч(СтруктурнаяЕдиница)<>Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		Возврат Ложь;
	КонецЕсли; 
	Если НЕ КэшЗначений.Свойство("ДоступностьЯчеек") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтруктурнаяЕдиница);
	Если Результат = Неопределено Тогда
		МассивСтруктурныхЕдиниц = Новый Массив;
		МассивСтруктурныхЕдиниц.Добавить(СтруктурнаяЕдиница);
		ДополнитьДоступностьЯчеек(МассивСтруктурныхЕдиниц, КэшЗначений.ДоступностьЯчеек);
		Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтруктурнаяЕдиница);
		Если Результат=Неопределено Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьДоступностьЯчеек()
	
	Если НЕ КэшЗначений.УчетПоЯчейкам Тогда
		Возврат;
	КонецЕсли; 	
	
	Если НЕ КэшЗначений.Свойство("ДоступностьЯчеек") Тогда
		КэшЗначений.Вставить("ДоступностьЯчеек", Новый ФиксированноеСоответствие(Новый Соответствие));
	КонецЕсли; 
	
	МассивСтруктурныхЕдиниц = Новый Массив;
	МассивСтруктурныхЕдиниц.Добавить(Объект.СтруктурнаяЕдиница);
	МассивСтруктурныхЕдиниц.Добавить(Объект.СтруктурнаяЕдиницаПродукции);
	Если Объект.ПоложениеСклада=Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Если Объект.ВидОперации=Перечисления.ВидыОперацийСборкаЗапасов.Разборка Тогда
			ИмяТЧ = "Продукция";
		Иначе
			ИмяТЧ = "Запасы";
		КонецЕсли; 
		Для каждого СтрокаТабличнойЧасти Из Объект[ИмяТч] Цикл
			МассивСтруктурныхЕдиниц.Добавить(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
		КонецЦикла; 
	Иначе
		МассивСтруктурныхЕдиниц.Добавить(Объект.СтруктурнаяЕдиницаЗапасов);
	КонецЕсли;
	МассивСтруктурныхЕдиниц = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСтруктурныхЕдиниц);
	ДополнитьДоступностьЯчеек(МассивСтруктурныхЕдиниц, КэшЗначений.ДоступностьЯчеек);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьДоступностьЯчеек(СтруктурныеЕдиницы, СоответствиеСтруктурныхЕдиниц)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурныеЕдиницы", СтруктурныеЕдиницы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Ссылка,
	|	СтруктурныеЕдиницы.ОрдерныйСклад КАК ОрдерныйСклад,
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.Ссылка В(&СтруктурныеЕдиницы)";
	Выборка = Запрос.Выполнить().Выбрать();
	Соответствие = Новый Соответствие(СоответствиеСтруктурныхЕдиниц);
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.Ссылка, НЕ Выборка.ОрдерныйСклад И Выборка.ТипСтруктурнойЕдиницы=Перечисления.ТипыСтруктурныхЕдиниц.Склад);	
	КонецЦикла; 
	СоответствиеСтруктурныхЕдиниц = Новый ФиксированноеСоответствие(Соответствие);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПризнакиДоступностиЯчеек(Форма)

	Объект = Форма.Объект;
	КэшЗначений = Форма.КэшЗначений;
	Если НЕ КэшЗначений.УчетПоЯчейкам Тогда
		Возврат;
	КонецЕсли;
	Если Объект.ПоложениеСклада<>ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		Возврат;
	КонецЕсли; 
	 
	Если Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Разборка") Тогда
		ИмяТЧ = "Продукция";
	Иначе
		ИмяТЧ = "Запасы";
	КонецЕсли;
	Для каждого СтрокаТабличнойЧасти Из Объект[ИмяТч] Цикл
		Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
		Если Результат=Неопределено Тогда
			Результат = Ложь;
		КонецЕсли; 
		СтрокаТабличнойЧасти.ЯчейкаДоступна = Результат И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
	КонецЦикла; 
	Для каждого СтрокаТабличнойЧасти Из Форма.РаспределениеЗапасов Цикл
		Результат = КэшЗначений.ДоступностьЯчеек.Получить(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
		Если Результат=Неопределено Тогда
			Результат = Ложь;
		КонецЕсли; 
		СтрокаТабличнойЧасти.ЯчейкаДоступна = Результат И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
	КонецЦикла; 
	
КонецПроцедуры 

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

// Процедура - обработчик нажатия кнопки Копировать строки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Запасы");
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Вставить строки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	
	ИмяТабличнойЧасти = "Запасы";
	ВставитьСтроки(ИмяТабличнойЧасти);
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Копировать строки в ТЧ Продукция.
//
&НаКлиенте
Процедура ПродукцияКопироватьСтроки(Команда)
	
	КопироватьСтроки("Продукция");
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Вставить строки в ТЧ Продукция.
//
&НаКлиенте
Процедура ПродукцияВставитьСтроки(Команда)
	
	ИмяТабличнойЧасти = "Продукция";
	ВставитьСтроки(ИмяТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтходыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Отходы");
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Вставить строки в ТЧ Отходы.
//
&НаКлиенте
Процедура ОтходыВставитьСтроки(Команда)
	
	ВставитьСтроки("Отходы");
	
КонецПроцедуры

// Вызывает процедуру копирования строк и оповещает пользователя о количестве скопированных.
//
&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуру вставки строк и оповещает пользователя о количетсве вставленных.
//
&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

// Выполняет копирование выделенных строк в буфер обмена.
//
&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

// Вставляет скопированные строки из буфера обмена в выбранную табличную часть.
//
&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	ЗаполнитьПризнакиИспользованияЭтапов();
	
	Если Объект.РучноеРаспределение И ИмяТЧ="Запасы" Тогда
		ПроизводствоСервер.ЗаполнитьКэшКонтроляРаспределения(Объект, КэшКонтроляРаспределения);
	КонецЕсли; 
	
КонецПроцедуры

// Обрабатывает вставленные строки.
//
&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	Для Итератор = 1 По КоличествоВставленных Цикл
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", Строка.Характеристика);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		Если ИмяТЧ = "Продукция" ИЛИ ИмяТЧ = "Запасы" Тогда
			Если НЕ ЗначениеЗаполнено(Строка.Спецификация) Тогда
				Строка.Спецификация = СтруктураДанные.Спецификация;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Если ИмяТЧ="Продукция" ИЛИ ИмяТЧ="Запасы" Тогда
		
		ЕстьСпецификации = Ложь;
		Для Итератор = 1 По КоличествоВставленных Цикл
			Строка = Объект[ИмяТЧ][Количество - Итератор];
			УправлениеНебольшойФирмойКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект, Строка);
			Если ЗначениеЗаполнено(Строка.Спецификация) Тогда
				ЕстьСпецификации = Истина;
			КонецЕсли; 
		КонецЦикла;
		
		Если ИмяТЧ="Продукция" Тогда
			Если ЕстьСпецификации Тогда
				ЗапасыНеЗаполнены = Истина;
			КонецЕсли; 
			УстановитьКартинкиЗакладок(ЭтотОбъект);
			ОбновитьСпискиВыбораРаспределение();
		ИначеЕсли ИмяТЧ="Запасы" Тогда
			ВывестиОтметкиКонтроля(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССерийнымиНомерами

&НаКлиенте
Процедура ЗапасыСерийныеНомераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерийныеНомера("Запасы", "СерийныеНомера");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийныеНомера(ИмяТЧЗапасы, ИмяТЧСерийныеНомера)
		
	ТекущиеДанныеИдентификатор = Элементы[ИмяТЧЗапасы].ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийныхНомеров = ПараметрыПодбораСерийныхНомеров(ТекущиеДанныеИдентификатор, ИмяТЧЗапасы, ИмяТЧСерийныеНомера);
	// Для подбора СН используем поле СтруктурнаяЕдиницаЗапасов
	Если Объект.ПоложениеСклада = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		ПараметрыСерийныхНомеров.Вставить("СтруктурнаяЕдиница", Элементы[ИмяТЧЗапасы].ТекущиеДанные.СтруктурнаяЕдиница);
	Иначе
		ПараметрыСерийныхНомеров.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаЗапасов);
	КонецЕсли;
	ПараметрыСерийныхНомеров.Вставить("Ячейка", Объект.ЯчейкаЗапасов);
	ОткрытьФорму("Обработка.ПодборСерийныхНомеров.Форма", ПараметрыСерийныхНомеров, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСерийныеНомераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерийныеНомера("Продукция","СерийныеНомераПродукция");
	
КонецПроцедуры

Функция ПолучитьСерийныеНомераЗапасыИзХранилища(АдресВоВременномХранилище, КлючСтроки)
	
	ПараметрыИменаПолей = Новый Структура;
	ПараметрыИменаПолей.Вставить("ИмяТЧЗапасы", "Запасы");
	ПараметрыИменаПолей.Вставить("ИмяТЧСерийныеНомера", "СерийныеНомера");
	
	Возврат РаботаСФормойДокумента.ПолучитьСерийныеНомераИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки, ПараметрыИменаПолей);
	
КонецФункции

Функция ПолучитьСерийныеНомераПродукцииИзХранилища(АдресВоВременномХранилище, КлючСтроки)
	
	ПараметрыИменаПолей = Новый Структура;
	ПараметрыИменаПолей.Вставить("ИмяТЧЗапасы", "Продукция");
	ПараметрыИменаПолей.Вставить("ИмяТЧСерийныеНомера", "СерийныеНомераПродукция");
	
	Возврат РаботаСФормойДокумента.ПолучитьСерийныеНомераИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки, ПараметрыИменаПолей);
	
КонецФункции

Функция ПараметрыПодбораСерийныхНомеров(ТекущиеДанныеИдентификатор, ИмяТЧ, ИмяТЧСерийныеНомера)
	
	Если ИмяТЧ = "Запасы" И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Сборка") Тогда
	    РежимПодбора = Истина;
	ИначеЕсли ИмяТЧ = "Продукция" И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Разборка") Тогда
		РежимПодбора = Истина;
	Иначе
		РежимПодбора = Ложь;
	КонецЕсли;
	
	Возврат РаботаСФормойДокумента.ПараметрыПодбораСерийныхНомеров(Объект, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор, РежимПодбора, ИмяТЧ, ИмяТЧСерийныеНомера);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаспределениеЗапасов

&НаКлиенте
Процедура РаспределениеЗапасовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗапасовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущаяСтрока = Элемент.ТекущиеДанные;
		ТекущаяСтрока.НомерСтроки = РаспределениеЗапасов.Количество();
		СтарыеДанныеСтроки = Неопределено;
		Если ЗначениеЗаполнено(ТекущаяПродукция) Тогда
			ТекущаяСтрока.КлючСвязиПродукция = ТекущаяПродукция;
			СтрокаПродукции = СтрокаПоКлючу(Объект.Продукция, ТекущаяПродукция);
			ЗаполнитьДанныеПродукцииВСтрокеРаспределения(ТекущаяСтрока, СтрокаПродукции);
		КонецЕсли; 
		ЗаполнитьДанныеШапки(Элемент.ТекущиеДанные);
	Иначе
		СтроктураПолей = Новый Структура(ИменаКолонокЗапасов(Объект));
		ЗаполнитьЗначенияСвойств(СтроктураПолей, Элемент.ТекущиеДанные);
		СтарыеДанныеСтроки = Новый ФиксированнаяСтруктура(СтроктураПолей);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗапасовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьДанныеТЧРаспределениеЗапасов(ЭтотОбъект);
	ОбновитьКэшКонтроляПриИзмененииДанныхСтроки(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗапасовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ДанныеПеретаскивания = Новый Структура;
	ДанныеПеретаскивания.Вставить("Событие", "ПерераспределениеМатериалов");
	ДанныеПеретаскивания.Вставить("Строка", Элемент.ТекущаяСтрока);
	
	ПараметрыПеретаскивания.Значение = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеПеретаскивания);
	
КонецПроцедуры                                                                                                                           

&НаКлиенте
Процедура РаспределениеЗапасовПередУдалением(Элемент, Отказ)
	
	Если Отказ Тогда
		СтарыеДанныеСтроки = Неопределено;
	Иначе
		СтроктураПолей = Новый Структура(ИменаКолонокЗапасов(Объект));
		ЗаполнитьЗначенияСвойств(СтроктураПолей, Элемент.ТекущиеДанные);
		СтарыеДанныеСтроки = Новый ФиксированнаяСтруктура(СтроктураПолей);
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПродукцииПриАктивизацииСтроки(Элемент)
	
	ЭлементСписка = Элементы.СписокПродукции.ТекущиеДанные;
	Если ЭлементСписка=Неопределено ИЛИ ЭлементСписка.Значение=ТекущаяПродукция Тогда
		Возврат;
	КонецЕсли; 
	
	ОбновитьРаспределениеЗапасовНаФорме(); 
	
	// МобильныйКлиент
	Если ЭтоМобильныйКлиент Тогда
		Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
			Элементы.ПраваяПанель.Заголовок = НСтр("ru = 'Отборы (установлены)'");
		Иначе
			Элементы.ПраваяПанель.Заголовок = НСтр("ru = 'Отборы'");
		КонецЕсли;
	КонецЕсли; 
	// Конец МобильныйКлиент	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПродукцииПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли; 
	
	Если Строка=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение)<>Тип("Массив") ИЛИ ПараметрыПеретаскивания.Значение.Количество()<>1 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеСобытия = ПараметрыПеретаскивания.Значение[0];
	
	Если ТипЗнч(ОписаниеСобытия)<>Тип("Структура") ИЛИ НЕ ОписаниеСобытия.Свойство("Событие") ИЛИ ОписаниеСобытия.Событие<>"ПерераспределениеМатериалов" Тогда
		Возврат;
	КонецЕсли; 
	
	ЭлементСписка = СписокПродукции.НайтиПоИдентификатору(Строка);
	СтрокаРаспределения = РаспределениеЗапасов.НайтиПоИдентификатору(ОписаниеСобытия.Строка);
	Если ЭлементСписка=Неопределено ИЛИ ЭлементСписка.Значение=0 ИЛИ СтрокаРаспределения.КлючСвязиПродукция=ЭлементСписка.Значение Тогда
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПродукцииПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли; 
	
	ЭлементСписка = СписокПродукции.НайтиПоИдентификатору(Строка);
	Если ЭлементСписка=Неопределено ИЛИ ЭлементСписка.Значение=0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение)<>Тип("Массив") ИЛИ ПараметрыПеретаскивания.Значение.Количество()<>1 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеСобытия = ПараметрыПеретаскивания.Значение[0];
	
	СтрокаРаспределения = РаспределениеЗапасов.НайтиПоИдентификатору(ОписаниеСобытия.Строка);
	Если СтрокаРаспределения=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПродукции = СтрокаПоКлючу(Объект.Продукция, ЭлементСписка.Значение);
	Если СтрокаПродукции=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтрокаПродукции", СтрокаПродукции);
	СтруктураПараметров.Вставить("СтрокаРаспределения", СтрокаРаспределения);
	Оповещение = Новый ОписаниеОповещения("СписокПродукцииПеретаскиваниеЗавершение", ЭтотОбъект, СтруктураПараметров);
	ПоказатьВводЧисла(Оповещение, СтрокаРаспределения.Количество, НСтр("ru = 'Количество'"), 15, 3);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПродукцииПеретаскиваниеЗавершение(Количество, СтруктураПараметров) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Количество) ИЛИ ТипЗнч(Количество)<>Тип("Число") Тогда
		Возврат;
	КонецЕсли; 	
	
	СтрокаПродукции = СтруктураПараметров.СтрокаПродукции;
	СтрокаРаспределения = СтруктураПараметров.СтрокаРаспределения;
	
	Если СтрокаПродукции.ЗаказПокупателя<>СтрокаРаспределения.ЗаказПокупателя Тогда
		// Предварительно требуется замена идентификатора запасов
		СтрокаРаспределения.ЗаказПокупателя = СтрокаПродукции.ЗаказПокупателя;
	КонецЕсли; 
	
	Если Количество>СтрокаРаспределения.Количество Тогда
		Количество = СтрокаРаспределения.Количество;
	КонецЕсли;
	
	Если ТекущаяПродукция=0 Тогда
		// Отображается полный список распределенных запасов
		НоваяСтрока = НайтиСуществующуюСтрокуРаспределения(РаспределениеЗапасов, СтрокаПродукции.КлючСвязи, СтрокаРаспределения);
		Если Количество=СтрокаРаспределения.Количество Тогда
			// Переносятся все материалы из строки распределения
			Если НоваяСтрока=Неопределено Тогда
				ЗаполнитьДанныеПродукцииВСтрокеРаспределения(СтрокаРаспределения, СтрокаПродукции);
			Иначе
				НоваяСтрока.Количество = НоваяСтрока.Количество+Количество;
				РаспределениеЗапасов.Удалить(СтрокаРаспределения);
			КонецЕсли; 
		Иначе
			// Переносится часть материалов
			Если НоваяСтрока=Неопределено Тогда
				НоваяСтрока = РаспределениеЗапасов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
				НоваяСтрока.Количество = Количество;
				ЗаполнитьДанныеПродукцииВСтрокеРаспределения(НоваяСтрока, СтрокаПродукции);
				НоваяСтрока.ЯчейкаДоступна = ЯчейкаДоступна(НоваяСтрока.СтруктурнаяЕдиница);
			Иначе
				НоваяСтрока.Количество = НоваяСтрока.Количество+Количество;
			КонецЕсли; 
			СтрокаРаспределения.Количество = СтрокаРаспределения.Количество-Количество;
		КонецЕсли;
		ОбновитьДанныеТЧРаспределениеЗапасов(ЭтотОбъект);
	Иначе
		// Отображается список распределенных запасов с отбором по изделию
		СтараяСтрока = НайтиСуществующуюСтрокуРаспределения(Объект.РаспределениеЗапасов, СтрокаРаспределения.КлючСвязиПродукция, СтрокаРаспределения);
		НоваяСтрока = НайтиСуществующуюСтрокуРаспределения(Объект.РаспределениеЗапасов, СтрокаПродукции.КлючСвязи, СтараяСтрока);
		Если Количество=СтрокаРаспределения.Количество Тогда
			// Переносятся все материалы из строки распределения
			Если НоваяСтрока=Неопределено Тогда
				СтараяСтрока.КлючСвязиПродукция = СтрокаПродукции.КлючСвязи;
			Иначе
				НоваяСтрока.Количество = НоваяСтрока.Количество+Количество;
				Объект.РаспределениеЗапасов.Удалить(СтараяСтрока);
			КонецЕсли; 
			РаспределениеЗапасов.Удалить(СтрокаРаспределения);
		Иначе
			// Переносится часть материалов
			Если НоваяСтрока=Неопределено Тогда
				НоваяСтрока = Объект.РаспределениеЗапасов.Добавить();
				ЗаполнитьДанныеЗапасовВСтрокеРаспределения(Объект, НоваяСтрока, СтрокаРаспределения);
				НоваяСтрока.КлючСвязиПродукция = СтрокаПродукции.КлючСвязи;
				НоваяСтрока.Количество = Количество;
			Иначе
				НоваяСтрока.Количество = НоваяСтрока.Количество+Количество;
			КонецЕсли;
			СтараяСтрока.Количество = СтараяСтрока.Количество-Количество;
			СтрокаРаспределения.Количество = СтрокаРаспределения.Количество-Количество;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗапасовНоменклатураПродукцияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение)<>Тип("Число") Тогда
		Возврат;
	КонецЕсли; 	
	
	СтрокаПродукция = СтрокаПоКлючу(Объект.Продукция, ВыбранноеЗначение);
	Если СтрокаПродукция=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущаяСтрока = Элементы.РаспределениеЗапасов.ТекущиеДанные;
	
	ЗаполнитьДанныеПродукцииВСтрокеРаспределения(ТекущаяСтрока, СтрокаПродукция);
	Если Элементы.Найти("РаспределениеЗапасовНоменклатура")<>Неопределено Тогда
		Элементы.РаспределениеЗапасов.ТекущийЭлемент = Элементы.РаспределениеЗапасовНоменклатура;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗапасовНоменклатураПриИзменении(Элемент)
	
	ТекСтр = Элементы.РаспределениеЗапасов.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", ТекСтр.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	ТекСтр.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	ТекСтр.Количество = 1;
	ТекСтр.Спецификация = СтруктураДанные.Спецификация;
	
	//Характеристики
	ТекСтр.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	ТекСтр.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	ТекСтр.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики
		Тогда
		ТекСтр.Характеристика = СтруктураДанные.Характеристика;
	КонецЕсли;
	//Конец Характеристики
	
	//Партии
	ТекСтр.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	ТекСтр.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии
		Тогда
		ТекСтр.Партия = СтруктураДанные.Партия;
	КонецЕсли;
	// Конец Партии
	
	Если Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Сборка") Тогда
		Если НЕ СкладВШапке Тогда
			ЗаполнениеОбъектовУНФКлиент.ЗаполнитьСкладВСтрокеТЧЗапасы(ТекСтр, Объект, СтруктураДанные);
		Иначе
			ТекСтр.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаЗапасов;
			ТекСтр.Ячейка = Объект.ЯчейкаЗапасов;
			ТекСтр.ЯчейкаДоступна = ЯчейкаДоступна(ТекСтр.СтруктурнаяЕдиница);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗапасовХарактеристикаПриИзменении(Элемент)
	
	ТекСтр = Элементы.РаспределениеЗапасов.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", ТекСтр.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", ТекСтр.Характеристика);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	ТекСтр.Спецификация = СтруктураДанные.Спецификация;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанель(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);

КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗапасовПриАктивизацииСтроки(Элемент)
	
	ОбновитьТекстПодсказкиРаспределения();	
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗапасовПослеУдаления(Элемент)
	
	ОбновитьДанныеТЧРаспределениеЗапасов(ЭтотОбъект);
	ОбновитьКэшКонтроляПриИзмененииДанныхСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура РучноеРаспределениеРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("РазделПоУмолчанию", "Производство");
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриИзмененииСпособаРаспределенияПоУмолчанию", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.НастройкаПрограммы.Форма",
			ПараметрыОткрытияФормы,
			ЭтотОбъект,
			Ложь,,,
			ОписаниеОповещения
	);
	
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗапасовЭтапНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗапасовЭтапАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТабличнойЧасти = Элементы.РаспределениеЗапасов.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СпецификацияПродукция) ИЛИ СтрокаТабличнойЧасти.КлючСвязиПродукция=0 Тогда
		Возврат;
	КонецЕсли; 
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязиПродукция);
	СтрокиЭтапы = Объект.ВыполненныеЭтапы.НайтиСтроки(СтруктураОтбора);
	СтрокиПродукция = Объект.Продукция.НайтиСтроки(СтруктураОтбора);
	Если СтрокиПродукция.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	СтрокаПродукция = СтрокиПродукция[0];
	ДанныеВыбора = Новый СписокЗначений;
	Если НЕ СтрокаПродукция.ИспользоватьЭтапыПроизводства Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Справочник.ЭтапыПроизводства.ПустаяСсылка"));
	Иначе
		Для каждого СтрокаЭтап Из СтрокиЭтапы Цикл
			ДанныеВыбора.Добавить(СтрокаЭтап.Этап);
		КонецЦикла; 
	КонецЕсли; 
	ОбновитьПредставлениеПустогоЭтапа(ДанныеВыбора); 
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗапасовСтруктурнаяЕдиницаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РаспределениеЗапасов.ТекущиеДанные;
	СтрокаТабличнойЧасти.ЯчейкаДоступна = ЯчейкаДоступна(СтрокаТабличнойЧасти.СтруктурнаяЕдиница);
	
КонецПроцедуры

#КонецОбласти

#Область РаспределениеЗапасов

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКартинкиЗакладок(Форма, Заполнено = Неопределено, Распределено = Неопределено)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Заполнено <> (НЕ Форма.ЗапасыНеЗаполнены) Тогда
		Если Заполнено <> Неопределено Тогда
			Форма.ЗапасыНеЗаполнены = НЕ Заполнено;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧЗапасы", "Картинка", ?(Форма.ЗапасыНеЗаполнены, БиблиотекаКартинок.ВниманиеВВидеТреугольника, Новый Картинка));
	КонецЕсли; 	
	
	Если НЕ Объект.РучноеРаспределение Тогда
		Форма.ЗапасыНеРаспределены = Ложь;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧРаспределениеЗапасов", "Картинка", Новый Картинка);
	ИначеЕсли Распределено <> (НЕ Форма.ЗапасыНеРаспределены) Тогда
		Если Распределено <> Неопределено Тогда
			Форма.ЗапасыНеРаспределены = НЕ Распределено;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТЧРаспределениеЗапасов", "Картинка", ?(Форма.ЗапасыНеРаспределены, БиблиотекаКартинок.ВниманиеВВидеТреугольника, Новый Картинка));
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПредупрежденияЗапасы", "Видимость", Форма.ЗапасыНеЗаполнены);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПредупрежденияРаспределение", "Видимость", Форма.ЗапасыНеРаспределены);
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьСервер()
	
	Если НЕ Объект.РучноеРаспределение Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьРеквизитыТЧПоШапке(Объект);
	ПроизводствоСервер.РаспределитьМатериалы(Объект.Продукция, Объект.Запасы, Объект.РаспределениеЗапасов, Объект.ВыполненныеЭтапы, Объект.ЗаказНаПроизводство);
	ПроизводствоСервер.ЗаполнитьКэшКонтроляРаспределения(Объект, КэшКонтроляРаспределения);
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	УстановитьКартинкиЗакладок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпискиВыбораРаспределение()
	
	ТекущаяСтрока = Элементы.СписокПродукции.ТекущиеДанные;
	Если ТекущаяСтрока=Неопределено Тогда
		КлючСвязи = 0;
	Иначе
		КлючСвязи = ТекущаяСтрока.Значение;
	КонецЕсли;
	
	ИмяТабличнойЧасти = "Продукция";
	
	СписокПродукции.Очистить();
	Элементы.РаспределениеЗапасовНоменклатураПродукция.СписокВыбора.Очистить();
	Элементы.ЗапасыЗаказПокупателя.СписокВыбора.Очистить();
	
	СписокПродукции.Добавить(0, НСтр("ru = 'Вся продукция'"));
	Для каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
		Если Объект.РучноеРаспределение Тогда
			Если СтрокаТабличнойЧасти.КлючСвязи=0 И НЕ ТолькоПросмотр Тогда
				СтрокаТабличнойЧасти.КлючСвязи = УправлениеНебольшойФирмойКлиент.СоздатьНовыйКлючСвязи(ЭтотОбъект);
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			ПредставлениеПродукции = Представление(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика, СтрокаТабличнойЧасти.Спецификация);
			СписокПродукции.Добавить(СтрокаТабличнойЧасти.КлючСвязи, ПредставлениеПродукции);
			Элементы.РаспределениеЗапасовНоменклатураПродукция.СписокВыбора.Добавить(СтрокаТабличнойЧасти.КлючСвязи, ПредставлениеПродукции);
		КонецЕсли;
		Если Элементы.ЗапасыЗаказПокупателя.СписокВыбора.НайтиПоЗначению(СтрокаТабличнойЧасти.ЗаказПокупателя)=Неопределено Тогда
			ПредставлениеЗаказа = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя), Строка(СтрокаТабличнойЧасти.ЗаказПокупателя), НСтр("ru = '<Не указан>'"));
			Элементы.ЗапасыЗаказПокупателя.СписокВыбора.Добавить(СтрокаТабличнойЧасти.ЗаказПокупателя, ПредставлениеЗаказа);
		КонецЕсли; 
	КонецЦикла;
	
	Элементы.ЗапасыЗаказПокупателя.СписокВыбора.СортироватьПоПредставлению();
	
	ТекущаяСтрока = СписокПродукции.НайтиПоЗначению(КлючСвязи);
	Если ТекущаяСтрока=Неопределено Тогда
		ТекущаяСтрока = СписокПродукции[0];
	КонецЕсли; 
	Элементы.СписокПродукции.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
			
	Если Объект.РучноеРаспределение Тогда
		ОбновитьРаспределениеЗапасовНаФорме();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРаспределениеЗапасовНаФорме()
	
	Если НЕ Объект.РучноеРаспределение Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущаяСтрока = Элементы.СписокПродукции.ТекущиеДанные;
	БезОтбора = (ТекущаяСтрока=Неопределено ИЛИ ТекущаяСтрока.Значение=0);
	Элементы.РаспределениеЗапасовГруппаПродукция.Видимость = БезОтбора;
	
	Если БезОтбора Тогда
		Строки = Объект.РаспределениеЗапасов;
		ТекущаяПродукция = 0;
	Иначе
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("КлючСвязиПродукция", ТекущаяСтрока.Значение);
		Строки = Объект.РаспределениеЗапасов.НайтиСтроки(СтруктураОтбора);
		ТекущаяПродукция = ТекущаяСтрока.Значение;
	КонецЕсли; 
	
	СоответствияПродукции = Новый Соответствие;
	ИмяТабличнойЧасти = "Продукция";
	Для каждого СтрокаПродукция Из Объект.Продукция Цикл
		Если СтрокаПродукция.КлючСвязи=0 Тогда
			СтрокаПродукция.КлючСвязи = УправлениеНебольшойФирмойКлиент.СоздатьНовыйКлючСвязи(ЭтотОбъект);
		КонецЕсли; 
		СоответствияПродукции.Вставить(СтрокаПродукция.КлючСвязи, СтрокаПродукция);
	КонецЦикла; 
	
	РаспределениеЗапасов.Очистить();
	Для каждого СтрокаТабличнойЧасти Из Строки Цикл
		Если НЕ БезОтбора И ТекущаяСтрока.Значение<>СтрокаТабличнойЧасти.КлючСвязиПродукция Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаПродукция = СоответствияПродукции.Получить(СтрокаТабличнойЧасти.КлючСвязиПродукция);
		НоваяСтрока = РаспределениеЗапасов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		ЗаполнитьДанныеПродукцииВСтрокеРаспределения(НоваяСтрока, СтрокаПродукция);
		НоваяСтрока.ЯчейкаДоступна = ЯчейкаДоступна(НоваяСтрока.СтруктурнаяЕдиница);
	КонецЦикла; 
	
	ПеренумероватьРаспределение(РаспределениеЗапасов);
	ВывестиОтметкиКонтроля(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция Представление(Значение1 = Неопределено, Значение2 = Неопределено, Значение3 = Неопределено)
	
	Результат = "";
	МассивЗначенией = Новый Массив;
	МассивЗначенией.Добавить(Значение1);
	МассивЗначенией.Добавить(Значение2);
	МассивЗначенией.Добавить(Значение3);
	
	Для каждого Значение Из МассивЗначенией Цикл
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Продолжить;
		КонецЕсли;
		Результат = Результат + ?(ПустаяСтрока(Результат), "", ", ")+Строка(Значение);
	КонецЦикла; 
	
	Возврат Результат; 
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДанныеТЧРаспределениеЗапасов(Форма)
	
	Если НЕ Форма.Объект.РучноеРаспределение Тогда
		Возврат;
	КонецЕсли; 
	
	РаспределениеНаФорме = Форма.РаспределениеЗапасов;
	РаспределениеТЧ = Форма.Объект.РаспределениеЗапасов;
	ТекущаяПродукция = Форма.ТекущаяПродукция;
	
	Если ТекущаяПродукция>0 Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("КлючСвязиПродукция", ТекущаяПродукция);
		Строки = РаспределениеТЧ.НайтиСтроки(СтруктураОтбора);
		Если Строки.Количество()=0 Тогда
			ИндексВставки = РаспределениеТЧ.Количество();
		Иначе
			ИндексВставки = РаспределениеТЧ.Индекс(Строки[0]);
		КонецЕсли; 
	Иначе
		Строки = Новый Массив;
		РаспределениеТЧ.Очистить();
		ИндексВставки = 0;
	КонецЕсли; 
	Для каждого СтрокаФормы Из РаспределениеНаФорме Цикл
		Если СтрокаФормы.Количество=0 Тогда
			Продолжить;
		КонецЕсли; 
		Если ИндексВставки>=РаспределениеТЧ.Количество() Тогда
			НоваяСтрока = РаспределениеТЧ.Добавить();
		Иначе
			НоваяСтрока = РаспределениеТЧ.Вставить(ИндексВставки);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаФормы);
		ИндексВставки = ИндексВставки + 1;
	КонецЦикла; 
	Для каждого СтрокаТабличнойЧасти Из Строки Цикл
		РаспределениеТЧ.Удалить(СтрокаТабличнойЧасти);
	КонецЦикла; 
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеПродукцииВСтрокеРаспределения(СтрокаРаспределения, СтрокаПродукции)
	
	Если СтрокаПродукции=Неопределено Тогда
		СтрокаРаспределения.НоменклатураПродукция = Неопределено;
		СтрокаРаспределения.ХарактеристикаПродукция = Неопределено;
		СтрокаРаспределения.СпецификацияПродукция = Неопределено;
		СтрокаРаспределения.ЕдиницаИзмеренияПродукция = Неопределено;
		СтрокаРаспределения.КоличествоПродукция = 0;
		СтрокаРаспределения.РезервПродукция = 0;
		СтрокаРаспределения.ПартияПродукция = Неопределено;
		СтрокаРаспределения.СтруктурнаяЕдиницаПродукция = Неопределено;
		СтрокаРаспределения.ЯчейкаПродукция = Неопределено;
		СтрокаРаспределения.КлючСвязиПродукция = 0;
		СтрокаРаспределения.ЗаказПокупателя = Неопределено; 
	Иначе
		СтрокаРаспределения.НоменклатураПродукция = СтрокаПродукции.Номенклатура;
		СтрокаРаспределения.ХарактеристикаПродукция = СтрокаПродукции.Характеристика;
		СтрокаРаспределения.СпецификацияПродукция = СтрокаПродукции.Спецификация;
		СтрокаРаспределения.ЕдиницаИзмеренияПродукция = СтрокаПродукции.ЕдиницаИзмерения;
		СтрокаРаспределения.КоличествоПродукция = СтрокаПродукции.Количество;
		СтрокаРаспределения.РезервПродукция = СтрокаПродукции.Резерв;
		СтрокаРаспределения.ПартияПродукция = СтрокаПродукции.Партия;
		СтрокаРаспределения.СтруктурнаяЕдиницаПродукция = СтрокаПродукции.СтруктурнаяЕдиница;
		СтрокаРаспределения.ЯчейкаПродукция = СтрокаПродукции.Ячейка;
		СтрокаРаспределения.КлючСвязиПродукция = СтрокаПродукции.КлючСвязи;
		СтрокаРаспределения.ЗаказПокупателя = СтрокаПродукции.ЗаказПокупателя; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НайтиСуществующуюСтрокуРаспределения(Таблица, КлючСвязиПродукция, ДанныеЗапасов)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязиПродукция", КлючСвязиПродукция);
	СтруктураОтбора.Вставить("Номенклатура", ДанныеЗапасов.Номенклатура);
	СтруктураОтбора.Вставить("Характеристика", ДанныеЗапасов.Характеристика);
	СтруктураОтбора.Вставить("Партия", ДанныеЗапасов.Партия);
	СтруктураОтбора.Вставить("Спецификация", ДанныеЗапасов.Спецификация);
	СтруктураОтбора.Вставить("ЕдиницаИзмерения", ДанныеЗапасов.ЕдиницаИзмерения);
	СтруктураОтбора.Вставить("СтруктурнаяЕдиница", ДанныеЗапасов.СтруктурнаяЕдиница);
	СтруктураОтбора.Вставить("Ячейка", ДанныеЗапасов.Ячейка);
	СтруктураОтбора.Вставить("ЗаказПокупателя", ДанныеЗапасов.ЗаказПокупателя);
	Строки = Таблица.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()=0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Строки[0];
	КонецЕсли; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПеренумероватьРаспределение(РаспределениеЗапасов)
	
	Ном = 1;
	Для каждого СтрокаТабличнойЧасти Из РаспределениеЗапасов Цикл
		СтрокаТабличнойЧасти.НомерСтроки = Ном;
		Ном = Ном+1;
	КонецЦикла; 	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоРаспределениюСервер()
	
	Если НЕ Объект.РучноеРаспределение Тогда
		Возврат;
	КонецЕсли; 
	
	ПроизводствоСервер.ЗаполнитьПоРаспределению(Объект.Запасы, Объект.РаспределениеЗапасов);
	ПроизводствоСервер.ЗаполнитьКэшКонтроляРаспределения(Объект, КэшКонтроляРаспределения);
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	ЗапасыНеЗаполнены = Ложь;
	ВывестиОтметкиКонтроля(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеЗапасовВСтрокеРаспределения(Объект, СтрокаРаспределения, СтрокаЗапасов)
	
	ЗаполнитьЗначенияСвойств(СтрокаРаспределения, СтрокаЗапасов, ИменаКолонокЗапасов(Объект))
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиОтметкиКонтроля(Форма)
	
	Объект = Форма.Объект;
	Если НЕ Объект.РучноеРаспределение Тогда
		УстановитьКартинкиЗакладок(Форма);
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаРаспределения Из Форма.РаспределениеЗапасов Цикл
		СтрокаРаспределения.ОшибкаКоличество = Ложь;
	КонецЦикла;
	
	ЕстьОшибкиРаспределения = Ложь;
	Для каждого СтрокаКонтроля Из Форма.КэшКонтроляРаспределения Цикл
		Если СтрокаКонтроля.КоличествоЗапасы=СтрокаКонтроля.КоличествоРаспределение Тогда
			Продолжить;
		КонецЕсли;
		ЕстьОшибкиРаспределения = Истина;
		СтруктураОтбора = Новый Структура(ИменаКолонокЗапасов(Форма.Объект));
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаКонтроля);
		СтрокиРаспределения = Форма.РаспределениеЗапасов.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
			Если (СтрокаКонтроля.КоличествоЗапасы<>СтрокаКонтроля.КоличествоРаспределение) Тогда
				СтрокаРаспределения.ОшибкаКоличество = Истина;
			КонецЕсли; 
		КонецЦикла;  
	КонецЦикла;
	
	УстановитьКартинкиЗакладок(Форма, , НЕ ЕстьОшибкиРаспределения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКэшКонтроляПриИзмененииДанныхСтроки(НовыеДанныеСтроки = Неопределено)
	
	Если НЕ Объект.РучноеРаспределение Тогда
		Возврат;
	КонецЕсли; 
	
	Для ии = 1 По 2 Цикл
		Если ии=1 Тогда
			Если ТипЗнч(СтарыеДанныеСтроки)<>Тип("ФиксированнаяСтруктура") Тогда
				Продолжить;
			КонецЕсли; 
			СтруктураОтбора = Новый Структура(СтарыеДанныеСтроки);
			СтарыеДанныеСтроки = Неопределено;
		Иначе
			Если НовыеДанныеСтроки=Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			СтруктураОтбора = Новый Структура(ИменаКолонокЗапасов(Объект));
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, НовыеДанныеСтроки);
		КонецЕсли;
		СтруктураИтогов = ИтогиПоЗапасам(СтруктураОтбора);
		СтрокиКонтроля = КэшКонтроляРаспределения.НайтиСтроки(СтруктураОтбора);
		Если СтрокиКонтроля.Количество()=0 Тогда
			СтрокаКонтроля = КэшКонтроляРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКонтроля, СтруктураОтбора);
		Иначе
			СтрокаКонтроля = СтрокиКонтроля[0];
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаКонтроля, СтруктураИтогов);
		ЕстьОшибки = (СтрокаКонтроля.КоличествоЗапасы<>СтрокаКонтроля.КоличествоРаспределение);
		СтрокиНаФорме = РаспределениеЗапасов.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаНаФорме Из СтрокиНаФорме Цикл
			СтрокаНаФорме.ОшибкаКоличество = ЕстьОшибки;
		КонецЦикла; 
	КонецЦикла;
	
	ЕстьОшибкиРаспределения = Ложь;
	Для каждого СтрокаКонтроля Из КэшКонтроляРаспределения Цикл
		Если СтрокаКонтроля.КоличествоЗапасы<>СтрокаКонтроля.КоличествоРаспределение Тогда
			ЕстьОшибкиРаспределения = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	УстановитьКартинкиЗакладок(ЭтотОбъект, , НЕ ЕстьОшибкиРаспределения);
	ОбновитьТекстПодсказкиРаспределения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекстПодсказкиРаспределения()
	
	ПоясняющийТекстОшибкиРаспределение = "";
	
	ТекущаяСтрока = Элементы.РаспределениеЗапасов.ТекущиеДанные;
	Если ТекущаяСтрока=Неопределено Тогда
		ПоясняющийТекстОшибкиРаспределение = НСтр("ru = 'Результат распределения не соответствует данным о материалах и/или продукции.'");
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураПродукция) И НЕ ТекущаяСтрока.ОшибкаКоличество Тогда
		ПоясняющийТекстОшибкиРаспределение = НСтр("ru = 'Результат распределения не соответствует данным о материалах и/или продукции. Для подробной информации выделите строку с предупреждением.'");
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура(ИменаКолонокЗапасов(Объект));
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущаяСтрока);
	СтруктураИтогов = ИтогиПоЗапасам(СтруктураОтбора);
	ЕдиницаИзмерения = Строка(СтруктураОтбора.ЕдиницаИзмерения);
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураПродукция) Тогда
		ПоясняющийТекстОшибкиРаспределение = ПоясняющийТекстОшибкиРаспределение 
		+ НСтр("ru = 'Не указана продукция распределения. '"); 
	КонецЕсли; 
	
	Если ТекущаяСтрока.ОшибкаКоличество Тогда
		ПоясняющийТекстОшибкиРаспределение = ПоясняющийТекстОшибкиРаспределение 
		+ СтрШаблон(НСтр("ru = 'Отличается количество материалов (%1 %2) и распределения (%3 %4). '"), СтруктураИтогов.КоличествоЗапасы, ЕдиницаИзмерения, СтруктураИтогов.КоличествоРаспределение, ЕдиницаИзмерения); 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция ИтогиПоЗапасам(СтруктураОтбора)
	
	СтруктураИтогов = Новый Структура("КоличествоЗапасы, КоличествоРаспределение", 0, 0, 0, 0);
	СтрокиЗапасы = Объект.Запасы.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаЗапасы Из СтрокиЗапасы Цикл
		СтруктураИтогов.КоличествоЗапасы = СтруктураИтогов.КоличествоЗапасы + СтрокаЗапасы.Количество;
	КонецЦикла; 
	СтрокиРаспределения = Объект.РаспределениеЗапасов.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
		СтруктураИтогов.КоличествоРаспределение = СтруктураИтогов.КоличествоРаспределение + СтрокаРаспределения.Количество;
	КонецЦикла;
	Возврат СтруктураИтогов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИменаКолонокЗапасов(Объект)
	
	Возврат "Этап, Номенклатура, Характеристика, Партия, Спецификация, ЕдиницаИзмерения"
	+?(Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Сборка") 
	И Объект.ПоложениеСклада=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти"), ", СтруктурнаяЕдиница, Ячейка", "")
	+?(Объект.ПоложениеЗаказаПокупателя=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти"), ", ЗаказПокупателя", "");	
	
КонецФункции 

&НаКлиенте
Процедура ОбновитьПодсказкуРаспределение(ПрочитатьЗначение = Ложь)
	
	Если ПрочитатьЗначение Тогда
		ОбновитьСпособРаспределенияПоУмолчанию();
	КонецЕсли; 
	
	ЭлементыЗаголовка = Новый Массив;
	ЭлементыЗаголовка.Добавить(
	СтрШаблон(НСтр("ru = 'Правила автоматического распределения материалов: по спецификациям и (или) 
	|пропорционально количеству выпускаемой продукции. Для ручного режима первичное 
	|распределение выполняется по тем же правилам, но есть возможность откорректировать
	|результат. Режим по умолчанию: %1 '"),
	?(РучноеРаспределениеПоУмолчанию, НСтр("ru = 'ручное распределение'"), НСтр("ru = 'автоматическое распределение'"))));
	ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока("изменить", , , , "ИзменитьРежимПоУмолчанию"));
	Элементы.РучноеРаспределениеРасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(ЭлементыЗаголовка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСпособРаспределенияПоУмолчанию()
	
	РучноеРаспределениеПоУмолчанию = (Константы.ИспользоватьРучноеРаспределениеМатериаловПоУмолчанию.Получить()=Перечисления.ДаНет.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСпособаРаспределенияПоУмолчанию(Значение, ДополнительныеПараметры) Экспорт
	
	ОбновитьПодсказкуРаспределение(Истина);	
	
КонецПроцедуры

#КонецОбласти

#Область ЭтапыПроизводства

&НаКлиентеНаСервереБезКонтекста
Функция ПроизводствоСЭтапами(Форма)
	
	Объект = Форма.Объект;
	ПараметрыФормы = Форма.ПараметрыФормы;
	
	Если НЕ ПараметрыФормы.ИспользоватьЭтапыПроизводства Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Разборка") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если Объект.ПоложениеЗаказаПокупателя=ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		ПодЗаказ = Ложь;
		Для каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
				ПодЗаказ = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
	Иначе
		ПодЗаказ = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
	КонецЕсли;
	
	Если НЕ ПодЗаказ И НЕ ЗначениеЗаполнено(Объект.ЗаказНаПроизводство) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если Объект.ВыполненныеЭтапы.Количество()>0 Тогда
		Возврат Истина;
	КонецЕсли; 
	
	ЕстьЭтапы = Ложь;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
		Если СтрокаТабличнойЧасти.ИспользоватьЭтапыПроизводства Тогда
			ЕстьЭтапы = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ЕстьЭтапы;		
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭтапыНаФорме(Форма)
	
	ПараметрыФормы = Форма.ПараметрыФормы;
	Если НЕ ПараметрыФормы.ИспользоватьЭтапыПроизводства Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Если Объект.ВидОперации<>ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Сборка") Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
		СтрукутраОтбора = Новый Структура;
		СтрукутраОтбора.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
		СтрокиЭтапы = Объект.ВыполненныеЭтапы.НайтиСтроки(СтрукутраОтбора);
		СтрокаТабличнойЧасти.Этапы = "";
		Для каждого СтрокаЭтап Из СтрокиЭтапы Цикл
			СтрокаТабличнойЧасти.Этапы = СтрокаТабличнойЧасти.Этапы + ?(ПустаяСтрока(СтрокаТабличнойЧасти.Этапы), "", "; ") + Строка(СтрокаЭтап.Этап);
		КонецЦикла;
	КонецЦикла; 	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеПустогоЭтапа(Список)
	
	Если Список.Количество()>0 И НЕ ЗначениеЗаполнено(Список[0].Значение) Тогда
		Список[0].Представление = НСтр("ru = '<Без этапов>'");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВыполненныеЭтапы(СтрокаТабличнойЧасти)
	
	Если НЕ ПараметрыФормы.ИспользоватьЭтапыПроизводства Тогда
		Возврат;
	КонецЕсли; 	
	
	Если СтрокаТабличнойЧасти.КлючСвязи=0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
	СтрокиВыполненныеЭтапы = Объект.ВыполненныеЭтапы.НайтиСтроки(СтруктураОтбора);
	
	ЕстьЭтапы = СтрокиВыполненныеЭтапы.Количество()>0;
	
	Для каждого СтрокаЭтап Из СтрокиВыполненныеЭтапы Цикл
		Объект.ВыполненныеЭтапы.Удалить(СтрокаЭтап);
	КонецЦикла; 
	
	Если ЕстьЭтапы Тогда
		УстановитьКартинкиЗакладок(ЭтотОбъект, Ложь);
		ОбновитьЭтапыНаФорме(ЭтотОбъект);
	КонецЕсли; 
	
	Если НЕ СтрокаТабличнойЧасти.ИспользоватьЭтапыПроизводства
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПодразделениеЗавершающегоЭтапа) Тогда
		СтрокаТабличнойЧасти.ПодразделениеЗавершающегоЭтапа = Неопределено;
	КонецЕсли;
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьПризнакиИспользованияЭтапов()
	
	Если НЕ ПараметрыФормы.ИспользоватьЭтапыПроизводства Тогда
		Возврат;
	КонецЕсли;
	Если Объект.ВидОперации=Перечисления.ВидыОперацийЗаказНаПроизводство.Разборка Тогда
		Возврат;
	КонецЕсли;
	
	МассивСпецификаций = Новый Массив;
	Для каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
		СтрокаТабличнойЧасти.ИспользоватьЭтапыПроизводства = Ложь;
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) И МассивСпецификаций.Найти(СтрокаТабличнойЧасти.Спецификация)=Неопределено Тогда
			МассивСпецификаций.Добавить(СтрокаТабличнойЧасти.Спецификация);
		КонецЕсли; 
	КонецЦикла;
	
	Если МассивСпецификаций.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	СпецификацииСПоэтапнымПроизводством = ПроизводствоСервер.СпецификацииСПоэтапнымПроизводством(МассивСпецификаций);
	Для каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТабличнойЧасти.ИспользоватьЭтапыПроизводства = (СпецификацииСПоэтапнымПроизводством.Найти(СтрокаТабличнойЧасти.Спецификация)<>Неопределено);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 
