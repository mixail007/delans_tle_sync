#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ИнтерфейсПечати

Процедура ВызватьИсходныйМетодПечати(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, СоздаватьСчетаФактуры = Ложь)
	
	МассивОбъектовИзмененный = МассивРасходныхНакладных(МассивОбъектов);
	
	Если СоздаватьСчетаФактуры Тогда
		
		СообщенияПользователю = Новый Массив;
		ИсточникиПечати = Новый Структура("ИмяИсточника, СчетФактура, ДокументыРеализации, СозданныеСчетаФактуры", Неопределено, Новый Массив, Неопределено, Неопределено);
		УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыПечатиУПД(МассивОбъектовИзмененный, ИсточникиПечати, СообщенияПользователю);
		МассивОбъектовИзмененный = ОбщегоНазначения.СкопироватьРекурсивно(ИсточникиПечати.СчетФактура);
		Если ТипЗнч(ИсточникиПечати.ДокументыРеализации)=Тип("Массив") Тогда
			// Реализации, для которых не требуется формирование счета-фактуры
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОбъектовИзмененный, ИсточникиПечати.ДокументыРеализации);
		КонецЕсли; 
		Для каждого Сообщение Из СообщенияПользователю Цикл
			ОбщегоНазначения.СообщитьПользователю(Сообщение);
		КонецЦикла;
		
	КонецЕсли; 
	
	Если МассивОбъектовИзмененный.Количество() = 0 Тогда
		
		ТекстСообщенияОбОшибке = НСтр("ru = 'По маршрутному листу нет сформированных расходных документов. Данные для печати отсутствуют.'");
		ВызватьИсключение ТекстСообщенияОбОшибке;
		
	КонецЕсли;
	
	Обработки.ПечатьСчетФактура.Печать(МассивОбъектовИзмененный, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МаршрутныйЛистСчетФактура") Тогда
		
		ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "МаршрутныйЛистСчетФактура");
		ПечатнаяФорма.ИмяВРЕГ = ВРег("СчетФактура");
		ПечатнаяФорма.ИмяМакета = "СчетФактура";
		
		ВызватьИсходныйМетодПечати(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Истина);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МаршрутныйЛистУниверсальныйПередаточныйДокумент") Тогда
		
		ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "МаршрутныйЛистУниверсальныйПередаточныйДокумент");
		ПечатнаяФорма.ИмяВРЕГ = ВРег("УниверсальныйПередаточныйДокумент");
		ПечатнаяФорма.ИмяМакета = "УниверсальныйПередаточныйДокумент";
		
		ВызватьИсходныйМетодПечати(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Истина);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МаршрутныйЛистУниверсальныйПередаточныйДокументФаксимиле") Тогда
		
		ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "МаршрутныйЛистУниверсальныйПередаточныйДокументФаксимиле");
		ПечатнаяФорма.ИмяВРЕГ = ВРег("УниверсальныйПередаточныйДокументФаксимиле");
		ПечатнаяФорма.ИмяМакета = "УниверсальныйПередаточныйДокументФаксимиле";
		
		ВызватьИсходныйМетодПечати(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, Истина);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МаршрутныйЛист") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "МаршрутныйЛист", "Маршрутный лист", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "МаршрутныйЛист"));
		
	Иначе
		
		МассивДокументов = МассивРасходныхНакладных(МассивОбъектов);
		
		Если МассивДокументов.Количество()=0 Тогда
			ТекстСообщенияОбОшибке = НСтр("ru = 'По маршрутному листу нет сформированных расходных документов. Данные для печати отсутствуют.'");
			ВызватьИсключение ТекстСообщенияОбОшибке;
		КонецЕсли;
		
		Документы.РасходнаяНакладная.Печать(МассивДокументов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода); 
		
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "МаршрутныйЛист";
	КомандаПечати.Представление = НСтр("ru = 'Маршрутный лист'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 2;
	
	Документы.РасходнаяНакладная.ДобавитьКомандыПечати(КомандыПечати);
	
	// Отключаем печать ТН и конверта для маршрутных листов (по поддерживается массовая печать)
	ОтключаемыеИдентификаторы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ТН,Конверт");
	Для каждого Идентификатор Из ОтключаемыеИдентификаторы Цикл
		КомандаПечати = КомандыПечати.Найти(Идентификатор, "Идентификатор");
		Если КомандаПечати<>Неопределено Тогда
			КомандыПечати.Удалить(КомандаПечати);
		КонецЕсли; 
	КонецЦикла;
	
	ЗаменяемыеИдентификаторы = Новый Соответствие;
	ЗаменяемыеИдентификаторы.Вставить("Обработка.ПечатьСчетФактура.СчетФактура", "МаршрутныйЛистСчетФактура");
	ЗаменяемыеИдентификаторы.Вставить("Обработка.ПечатьСчетФактура.УниверсальныйПередаточныйДокумент", "МаршрутныйЛистУниверсальныйПередаточныйДокумент");
	ЗаменяемыеИдентификаторы.Вставить("Обработка.ПечатьСчетФактура.УниверсальныйПередаточныйДокументФаксимиле", "МаршрутныйЛистУниверсальныйПередаточныйДокументФаксимиле");
	
	Для каждого КомандаПечати Из КомандыПечати Цикл
		Для каждого КлючИЗначение Из ЗаменяемыеИдентификаторы Цикл
			КомандаПечати.Идентификатор = СтрЗаменить(КомандаПечати.Идентификатор, КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

// Функция формирует печатную форму документа по указанному макету.
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент в который будет выводится печатная
//				   форма.
//  ИмяМакета    - Строка, имя макета печатной формы.
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если ИмяМакета="МаршрутныйЛист" Тогда
		
		ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_МаршрутныйЛист";
		
		ПервыйДокумент = Истина;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.МаршрутныйЛист.ПФ_MXL_МаршрутныйЛист");
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МаршрутныйЛист.Ссылка КАК Ссылка,
		|	МаршрутныйЛист.Дата КАК ДатаДокумента,
		|	МаршрутныйЛист.Номер КАК Номер,
		|	МаршрутныйЛист.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
		|	МаршрутныйЛист.СлужбаДоставки.Наименование КАК СлужбаДоставки,
		|	МаршрутныйЛист.Курьер.Наименование КАК Курьер
		|ИЗ
		|	Документ.МаршрутныйЛист КАК МаршрутныйЛист
		|ГДЕ
		|	МаршрутныйЛист.Ссылка В(&МассивОбъектов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутныйЛистЗаказы.Ссылка КАК Ссылка,
		|	МаршрутныйЛистЗаказы.НомерСтроки КАК НомерСтроки,
		|	МаршрутныйЛистЗаказы.Заказ.Дата КАК ДатаЗаказа,
		|	МаршрутныйЛистЗаказы.Заказ.Номер КАК НомерЗаказа,
		|	МаршрутныйЛистЗаказы.Заказ.ОжидаемаяДатаВручения КАК ДатаДоставки,
		|	МаршрутныйЛистЗаказы.Заказ.ВремяДоставкиС КАК ВремяС,
		|	МаршрутныйЛистЗаказы.Заказ.ВремяДоставкиПо КАК ВремяПо,
		|	МаршрутныйЛистЗаказы.Заказ.АдресДоставки КАК Адрес,
		|	МаршрутныйЛистЗаказы.Заказ.КонтактноеЛицо КАК Получатель,
		|	МаршрутныйЛистЗаказы.Заказ.КонтактныйТелефон КАК Телефон,
		|	МаршрутныйЛистЗаказы.Заказ.ЗапаснойТелефон КАК ЗапаснойТелефон,
		|	МаршрутныйЛистЗаказы.Заказ.ДополнительнаяИнформацияПоДоставке КАК ДополнительнаяИнформация,
		|	МаршрутныйЛистЗаказы.Заказ.СтоимостьДоставки КАК СтоимостьДоставки,
		|	МаршрутныйЛистЗаказы.Заказ.Вес КАК ЗаказВес,
		|	МаршрутныйЛистЗаказы.Заказ.Объем КАК ЗаказОбъем,
		|	ВЫБОР
		|		КОГДА МаршрутныйЛистЗаказы.Заказ.ВалютаДокумента.СимвольноеПредставление = """"
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(МаршрутныйЛистЗаказы.Заказ.ВалютаДокумента)
		|		ИНАЧЕ МаршрутныйЛистЗаказы.Заказ.ВалютаДокумента.СимвольноеПредставление
		|	КОНЕЦ КАК ВалютаПредставление,
		|	МаршрутныйЛистЗаказы.РасходнаяНакладная КАК РасходнаяНакладная,
		|	МаршрутныйЛистЗаказы.Заказ.СуммаДокумента - ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот + ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот, 0) КАК КОплате
		|ИЗ
		|	Документ.МаршрутныйЛист.Заказы КАК МаршрутныйЛистЗаказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОплатаСчетовИЗаказов.Обороты КАК ОплатаСчетовИЗаказовОбороты
		|		ПО МаршрутныйЛистЗаказы.Заказ = ОплатаСчетовИЗаказовОбороты.СчетНаОплату
		|ГДЕ
		|	МаршрутныйЛистЗаказы.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки";
		
		Результат = Запрос.ВыполнитьПакет();
		ВыборкаДокументов = Результат[0].Выбрать();
		ТаблицаЗаказов = Результат[1].Выгрузить();
		Пока ВыборкаДокументов.Следующий() Цикл
			ТекущийДокумент = ВыборкаДокументов.Ссылка;
			
			Если НЕ ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;
			
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДокументов.Номер, Истина, Истина);
			
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокДокумента");
			ОбластьМакета.Параметры.ЗаголовокДокумента = "Маршрутный лист № "
				+ НомерДокумента
				+ " от "
				+ Формат(ВыборкаДокументов.ДатаДокумента, "ДЛФ=DD");
				
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Если ЗначениеЗаполнено(ВыборкаДокументов.СлужбаДоставки) Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("СлужбаДоставки");
				ОбластьМакета.Параметры.ПредставлениеЭкспедитора = ВыборкаДокументов.СлужбаДоставки;
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть("Курьер");
				ОбластьМакета.Параметры.ПредставлениеЭкспедитора = ВыборкаДокументов.Курьер;
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Ссылка", ВыборкаДокументов.Ссылка);
			СтрокиЗаказы = ТаблицаЗаказов.НайтиСтроки(СтруктураОтбора);
			Вес = 0;
			Объем = 0;
			Для каждого СтрокаЗаказ Из СтрокиЗаказы Цикл
				КОплатеПоЗаказу = ?(СтрокаЗаказ.КОплате<0, 0, СтрокаЗаказ.КОплате);
				ОбластьМакета.Параметры.Заполнить(СтрокаЗаказ);
				ОбластьМакета.Параметры.ДатаЗаказа = Формат(ОбластьМакета.Параметры.ДатаЗаказа, "ДЛФ=DD");
				ОбластьМакета.Параметры.НомерЗаказа = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ОбластьМакета.Параметры.НомерЗаказа, Истина, Истина);
				Если КОплатеПоЗаказу=0 Тогда
					ОбластьМакета.Параметры.СуммаКОплате = НСтр("ru = 'Оплачен'");
				Иначе
					ОбластьМакета.Параметры.СуммаКОплате = Формат(КОплатеПоЗаказу, "ЧДЦ=2") + " " + СтрокаЗаказ.ВалютаПредставление;
				КонецЕсли; 
				ТекстКонтактноеЛицо = "";
				Если ЗначениеЗаполнено(СтрокаЗаказ.Получатель) Тогда
					ТекстКонтактноеЛицо = СтрокаЗаказ.Получатель;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаЗаказ.Телефон) Тогда
					ТекстКонтактноеЛицо = ТекстКонтактноеЛицо+?(ПустаяСтрока(ТекстКонтактноеЛицо), НСтр("ru = 'Тел. '"), НСтр("ru = ', тел. '"))+СтрокаЗаказ.Телефон;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаЗаказ.ЗапаснойТелефон) Тогда
					ТекстКонтактноеЛицо = ТекстКонтактноеЛицо+
					?(НЕ ЗначениеЗаполнено(СтрокаЗаказ.Телефон) И ПустаяСтрока(ТекстКонтактноеЛицо), НСтр("ru = 'Тел. '"), 
					?(НЕ ЗначениеЗаполнено(СтрокаЗаказ.Телефон), НСтр("ru = ', тел. '"), НСтр("ru = ', '")))+СтрокаЗаказ.ЗапаснойТелефон;
				КонецЕсли;
				Если ПустаяСтрока(ТекстКонтактноеЛицо) Тогда
					ТекстКонтактноеЛицо = НСтр("ru = 'Не указано'");
				КонецЕсли; 
				ОбластьМакета.Параметры.ТекстКонтактноеЛицо = ТекстКонтактноеЛицо;
				Если НЕ ЗначениеЗаполнено(СтрокаЗаказ.ДатаДоставки)
					И НЕ ЗначениеЗаполнено(СтрокаЗаказ.ВремяС)
					И НЕ ЗначениеЗаполнено(СтрокаЗаказ.ВремяПо) Тогда
					ТекстДатаИВремяДоставки = НСтр("ru = 'Не указаны'");
				Иначе
					ТекстДатаИВремяДоставки = "";
					Если ЗначениеЗаполнено(СтрокаЗаказ.ДатаДоставки) Тогда
						ТекстДатаИВремяДоставки = Формат(СтрокаЗаказ.ДатаДоставки, "ДЛФ=DD");
					КонецЕсли;
					Если ЗначениеЗаполнено(СтрокаЗаказ.ВремяС) Тогда
						ТекстДатаИВремяДоставки = ТекстДатаИВремяДоставки+?(ПустаяСтрока(ТекстДатаИВремяДоставки), "", ", ")+НСтр("ru = 'с '")+Формат(СтрокаЗаказ.ВремяС, "ДФ=ЧЧ:мм");
					КонецЕсли;
					Если ЗначениеЗаполнено(СтрокаЗаказ.ВремяПо) Тогда
						ТекстДатаИВремяДоставки = ТекстДатаИВремяДоставки+?(ПустаяСтрока(ТекстДатаИВремяДоставки), "", " ")+НСтр("ru = 'по '")+Формат(СтрокаЗаказ.ВремяПо, "ДФ=ЧЧ:мм");
					КонецЕсли;
				КонецЕсли; 
				ОбластьМакета.Параметры.ТекстДатаИВремяДоставки = ТекстДатаИВремяДоставки;
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				Вес = Вес + СтрокаЗаказ.ЗаказВес;
				Объем = Объем + СтрокаЗаказ.ЗаказОбъем;
			КонецЦикла;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Итоги");
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
			ОбластьМакета.Параметры.ДопИнформация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru =  'Вес (всего):   %1 кг
							|Объем (всего): %2 м3'"),
				Вес,
				Объем);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		КонецЦикла;
		
	КонецЕсли; 
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция МассивРасходныхНакладных(МассивМаршрутныхЛистов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивМаршрутныхЛистов", МассивМаршрутныхЛистов);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МаршрутныйЛистЗаказы.Заказ КАК Заказ
	|ПОМЕСТИТЬ Заказы
	|ИЗ
	|	Документ.МаршрутныйЛист.Заказы КАК МаршрутныйЛистЗаказы
	|ГДЕ
	|	МаршрутныйЛистЗаказы.Ссылка В(&МассивМаршрутныхЛистов)
	|	И МаршрутныйЛистЗаказы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходнаяНакладная.Ссылка
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|ГДЕ
	|	РасходнаяНакладная.Заказ В
	|			(ВЫБРАТЬ
	|				Заказы.Заказ
	|			ИЗ
	|				Заказы)
	|	И РасходнаяНакладная.Проведен";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции
 
#КонецОбласти

#Область ФоновоеЗадание

Процедура ВыполнитьОтгрузку(Параметры, ВременноеХранилищеРезультата) Экспорт
	
	Результат = Новый Структура;
	Ошибки = Новый СписокЗначений;
	
	Если НЕ Параметры.Свойство("МаршрутныйЛист") ИЛИ НЕ ЗначениеЗаполнено(Параметры.МаршрутныйЛист) Тогда
		Ошибка = НСтр("ru = 'Не указан маршрутный лист для выполнения отгрузки'");
		Ошибки.Добавить(, Ошибка);
		Результат.Вставить("Ошибки", Ошибки);
		ПоместитьВоВременноеХранилище(Результат, ВременноеХранилищеРезультата);
		Возврат;
	КонецЕсли;
	
	МаршрутныйЛист = Параметры.МаршрутныйЛист;
	МаршрутныйЛистОбъект = МаршрутныйЛист.ПолучитьОбъект();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МаршрутныйЛист", МаршрутныйЛист);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МаршрутныйЛистЗаказы.Заказ КАК Заказ,
	|	МаршрутныйЛистЗаказы.Заказ.Проведен КАК ЗаказПроведен,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ДокументРасходнаяНакладная.Ссылка ЕСТЬ NULL
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК Сформирован,
	|	МАКСИМУМ(ДокументРасходнаяНакладная.Ссылка) КАК РасходнаяНакладная,
	|	МаршрутныйЛистЗаказы.Ссылка.Автомобиль КАК Автомобиль,
	|	МаршрутныйЛистЗаказы.Ссылка.Курьер КАК Курьер,
	|	ЕСТЬNULL(ВидыЗаказовПокупателей.СостояниеОжидаетОтгрузки, ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.ПустаяСсылка)) КАК СостояниеОжидаетОтгрузки,
	|	ЕСТЬNULL(ВидыЗаказовПокупателей.СостояниеОтгружен, ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.ПустаяСсылка)) КАК СостояниеОтгружен
	|ИЗ
	|	Документ.МаршрутныйЛист.Заказы КАК МаршрутныйЛистЗаказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная КАК ДокументРасходнаяНакладная
	|		ПО МаршрутныйЛистЗаказы.Заказ = ДокументРасходнаяНакладная.Заказ
	|			И (ДокументРасходнаяНакладная.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЗаказовПокупателей КАК ВидыЗаказовПокупателей
	|		ПО МаршрутныйЛистЗаказы.Заказ.ВидЗаказа = ВидыЗаказовПокупателей.Ссылка
	|ГДЕ
	|	МаршрутныйЛистЗаказы.Ссылка = &МаршрутныйЛист
	|
	|СГРУППИРОВАТЬ ПО
	|	МаршрутныйЛистЗаказы.Заказ,
	|	МаршрутныйЛистЗаказы.Ссылка.Автомобиль,
	|	МаршрутныйЛистЗаказы.Ссылка.Курьер,
	|	ЕСТЬNULL(ВидыЗаказовПокупателей.СостояниеОжидаетОтгрузки, ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.ПустаяСсылка)),
	|	ЕСТЬNULL(ВидыЗаказовПокупателей.СостояниеОтгружен, ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.ПустаяСсылка)),
	|	МаршрутныйЛистЗаказы.Заказ.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоСтрок = Выборка.Количество();
	НомерСтроки = 0;
	Пока Выборка.Следующий() Цикл
		СтрокаЗаказы = МаршрутныйЛистОбъект.Заказы.Найти(Выборка.Заказ, "Заказ");
		Если СтрокаЗаказы=Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Если Выборка.Сформирован Тогда
			СтрокаЗаказы.РасходнаяНакладная = Выборка.РасходнаяНакладная;
		Иначе
			НачатьТранзакцию();
			ПовторноЗавершитьЗаказ = Ложь;
			Если ЗначениеЗаполнено(Выборка.СостояниеОжидаетОтгрузки) И ЗначениеЗаполнено(Выборка.СостояниеОтгружен) И Выборка.СостояниеОтгружен=Справочники.СостоянияЗаказовПокупателей.Завершен Тогда
				ПовторноЗавершитьЗаказ = Истина;
				ДокЗаказ = Выборка.Заказ.ПолучитьОбъект();
				ДокЗаказ.СостояниеЗаказа = Выборка.СостояниеОжидаетОтгрузки;
				ТекстОшибки = НСтр("ru = 'Не удалось изменить состояние заказа заказа %1: %2'");
				Попытка
					Если Выборка.ЗаказПроведен И НЕ ДокЗаказ.ПроверитьЗаполнение() Тогда
						ОтменитьТранзакцию();
						Информация = ИнформацияОбОшибке();
						Ошибка = СтрШаблон(ТекстОшибки, Выборка.Заказ, РекурсивноеОписаниеОшибки(Информация));
						ДобавитьОписаниеОшибки(Выборка.Заказ, Ошибки, Ошибка);
						Продолжить;
					КонецЕсли; 
					ДокЗаказ.Записать(?(Выборка.ЗаказПроведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				Исключение
					ОтменитьТранзакцию();
					Информация = ИнформацияОбОшибке();
					Ошибка = СтрШаблон(ТекстОшибки, Выборка.Заказ, РекурсивноеОписаниеОшибки(Информация));
					ДобавитьОписаниеОшибки(Выборка.Заказ, Ошибки, Ошибка);
					Продолжить;
				КонецПопытки; 
			КонецЕсли; 
			Док = Документы.РасходнаяНакладная.СоздатьДокумент();
			Док.Заполнить(Выборка.Заказ);
			Если Док.Запасы.Количество()=0 Тогда
				// Не формируем пустые документы
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли; 
			Док.Дата = ТекущаяДатаСеанса();
			Если ЗначениеЗаполнено(Выборка.Автомобиль) Тогда
				Док.Автомобиль = Выборка.Автомобиль;
			КонецЕсли; 
			Если ЗначениеЗаполнено(Выборка.Курьер) Тогда
				Док.Водитель = Выборка.Курьер;
			КонецЕсли;
			Док.Заказ = Выборка.Заказ;
			Док.ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
			ТекстОшибки = НСтр("ru = 'Не удалось сформировать отгрузку для заказа %1: %2'");
			Попытка
				Если НЕ Док.ПроверитьЗаполнение() Тогда
					ОтменитьТранзакцию();
					Информация = ИнформацияОбОшибке();
					Ошибка = СтрШаблон(ТекстОшибки, Выборка.Заказ, РекурсивноеОписаниеОшибки(Информация));
					ДобавитьОписаниеОшибки(Выборка.Заказ, Ошибки, Ошибка);
					Продолжить;
				КонецЕсли; 
				Док.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ОтменитьТранзакцию();
				Информация = ИнформацияОбОшибке();
				Ошибка = СтрШаблон(ТекстОшибки, Выборка.Заказ, РекурсивноеОписаниеОшибки(Информация));
				ДобавитьОписаниеОшибки(Выборка.Заказ, Ошибки, Ошибка);
				Продолжить;
			КонецПопытки;
			Если ПовторноЗавершитьЗаказ Тогда
				ДокЗаказ = Выборка.Заказ.ПолучитьОбъект();
				ДокЗаказ.СостояниеЗаказа = Выборка.СостояниеОтгружен;
				Попытка
					ДокЗаказ.Записать(?(Выборка.ЗаказПроведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				Исключение
					ОтменитьТранзакцию();
					Информация = ИнформацияОбОшибке();
					Ошибка = СтрШаблон(НСтр("ru = 'Не удалось изменить состояние заказа заказа %1: %2'"), Выборка.Заказ, РекурсивноеОписаниеОшибки(Информация));
					ДобавитьОписаниеОшибки(Выборка.Заказ, Ошибки, Ошибка);
					Продолжить;
				КонецПопытки; 
			КонецЕсли; 
			ЗафиксироватьТранзакцию();
			СтрокаЗаказы.РасходнаяНакладная = Док.Ссылка;
		КонецЕсли;
		НомерСтроки = НомерСтроки+1;
		ДлительныеОперации.СообщитьПрогресс(Окр(НомерСтроки/КоличествоСтрок*100), СтрокаЗаказы.РасходнаяНакладная);
	КонецЦикла;
	
	Если Ошибки.Количество()>0 Тогда
		Результат.Вставить("Ошибки", Ошибки);
	Иначе
		МаршрутныйЛистОбъект.Записать(?(МаршрутныйЛистОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	КонецЕсли; 
	
	ПоместитьВоВременноеХранилище(Результат, ВременноеХранилищеРезультата);
	
КонецПроцедуры

Процедура ДобавитьОписаниеОшибки(Заказ, Ошибки, Текст)
	
	Ошибка = Текст;
	СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
	Для каждого Сообщение Из СообщенияПользователю Цикл
		Если Найти(Сообщение.Текст, ДлительныеОперации.СообщениеПрогресса()) > 0 Тогда
			Продолжить;
		КонецЕсли;
		Ошибка = Ошибка+Символы.ПС+Сообщение.Текст;
	КонецЦикла; 
	Ошибки.Добавить(Заказ, Ошибка);
	
КонецПроцедуры

Функция РекурсивноеОписаниеОшибки(Информация)
	
	Возврат КраткоеПредставлениеОшибки(Информация)+?(Информация.Причина=Неопределено, "", Символы.ПС+РекурсивноеОписаниеОшибки(Информация.Причина));	
	
КонецФункции
 
#КонецОбласти 

#Область ПрограммныйИнтерфейс

Функция ПроверитьДоступностьЗаказов(Объект) Экспорт
	
	Если РольДоступна("ПолныеПрава") ИЛИ НЕ УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		Возврат Истина;
	КонецЕсли; 
	
	МассивЗаказов = Новый Массив;
	Для каждого Стр Из Объект.Заказы Цикл
		Если ЗначениеЗаполнено(Стр.Заказ) И МассивЗаказов.Найти(Стр.Заказ)=Неопределено Тогда
			МассивЗаказов.Добавить(Стр.Заказ);
		КонецЕсли; 
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказы", МассивЗаказов);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПокупателя.Ссылка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&Заказы)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество()<>МассивЗаказов.Количество() Тогда
		// Часть заказов недоступна
		Возврат Ложь;
	КонецЕсли; 
	Возврат Истина;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти 

#КонецЕсли