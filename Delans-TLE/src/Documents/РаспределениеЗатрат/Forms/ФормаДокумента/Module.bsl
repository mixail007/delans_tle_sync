
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	ЭтотОбъект.ОснованиеСоздания = Параметры.Основание;
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	
	ОбновитьРеквизитыВидимостиФормы();
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ЭлектронныеВесы", , МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Продукция");
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Запасы");
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "РаспределениеЗапасов");
	
	// Характеристики
	НоменклатураВДокументахСервер.ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик(ЭтаФорма);
	Если Параметры.Ключ.Пустая()
		Тогда
		НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект, Истина)
	КонецЕсли;
	
	// МобильныйКлиент
	УстановитьВидимостьЭлементовДляМобильногоКлиента();
	// Конец МобильныйКлиент	
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтатистикаИспользованияФормКлиент.ПроверитьЗаписатьСтатистикуКоманды(
		"СоздатьНаОсновании.РаспределениеЗатрат",
		ЭтотОбъект.ВладелецФормы,
		ЭтотОбъект.ОснованиеСоздания
	);
	
	УправлениеФормой();
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры // ПриЗакрытии()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	//Обсуждения
	ОбсужденияСервер.ПослеЗаписиНаСервере(ТекущийОбъект);	
	// Конец Обсуждения
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			//Преобразуем предварительно к ожидаемому формату
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[0], 1)); // Достаем штрихкод из основных данных
			Иначе
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1)); // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		//Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище = Параметр;
		ИмяТабличнойЧасти 	= ?(Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаПродукция, "Продукция", "Запасы");
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, Истина, Истина);
		
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Продукция");
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Запасы");
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "РаспределениеЗапасов");
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект.Ссылка);
	// Конец Обсуждения

КонецПроцедуры // ОбработкаОповещения()

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

#Область ШапкаИПодвал

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Организация.
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
	Компания = СтруктураДанные.Компания;
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	// Наборы
	СтруктураДанные.Вставить("ЭтоНабор", СтруктураДанные.Номенклатура.ЭтоНабор);
	
	Если СтруктураДанные.Свойство("Характеристика") Тогда
		СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
	Иначе
		СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура));
	КонецЕсли;
	
	// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",Ложь);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) 
		и СтруктураДанные.Номенклатура.ИспользоватьХарактеристики Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура);
		
		Если Не ЗначенияПоУмолчанию = Неопределено Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика",ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика), СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
		
		Если Не СтруктураДанные.Свойство("Спецификация") Тогда
			СтруктураДанные.Вставить("Спецификация",Неопределено);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураДанные.Характеристика) Тогда

			СтруктураДанные.Спецификация = УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика);
			
		КонецЕсли;
		
		СтруктураДанные.Вставить("ИспользоватьХарактеристики",Истина);
		СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",СтруктураДанные.Номенклатура.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли; 
	// Конец Характеристики
	
	//Партии
	СтруктураДанные.Вставить("ИспользоватьПартии",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеПартий",Ложь);
	
	Если НЕ СтруктураДанные.Свойство("Партия") Тогда
		СтруктураДанные.Вставить("Партия", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) 
		и СтруктураДанные.Номенклатура.ИспользоватьПартии Тогда
		
		Если СтруктураДанные.Свойство("СтатусПартии")
			Тогда
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтруктураДанные.СтатусПартии);
		Иначе
			Если Не СтруктураДанные.Свойство("ВидОперации") Тогда
				ВидОперации = Неопределено
			Иначе
				ВидОперации = СтруктураДанные.ВидОперации
			КонецЕсли;
			
			СтатусПартии = НоменклатураВДокументахСервер.СоответствиеВидаОпреацииИлиХозОперацииСтатусуПартии(, ВидОперации);
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтатусПартии);
		КонецЕсли;
		
		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		
		Если Не ЗначенияПартииПоУмолчанию = Неопределено Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;
		
		СтруктураДанные.Партия = ?(ЗначениеЗаполнено(СтруктураДанные.Партия), СтруктураДанные.Партия, ПартияПоУмолчанию);
		
		СтруктураДанные.ПроверятьЗаполнениеПартий = СтруктураДанные.Номенклатура.ПроверятьЗаполнениеПартий;
		СтруктураДанные.ИспользоватьПартии = Истина;
		
	КонецЕсли;
	// Конец Партии
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Получает набор данных с сервера для процедуры ХарактеристикаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтруктурнаяЕдиница.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	ОбновитьРеквизитыВидимостиФормы();
	УправлениеФормой();
	
КонецПроцедуры // СтруктурнаяЕдиницаПриИзменении()

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");

КонецПроцедуры

#КонецОбласти

#Область Продукция

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	
	СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики
		Тогда
		СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
		СтрокаТабличнойЧасти.Спецификация =  СтруктураДанные.Спецификация;
	КонецЕсли;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии
		Тогда
		СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
	КонецЕсли;
	// Конец Партии
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Характеристика.
//
&НаКлиенте
Процедура ПродукцияХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
КонецПроцедуры // ПродукцияХарактеристикаПриИзменении()

#КонецОбласти 

#Область Запасы

// Процедура - обработчик события ПриАктивизации строки табличной части Запасы.
//
&НаКлиенте
Процедура ЗапасыПриАктивизацииСтроки(Элемент)
	
	ИмяТабличнойЧасти = "Запасы";
	УправлениеНебольшойФирмойКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "РаспределениеЗапасов");
	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования табличной части Запасы.
//
&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИмяТабличнойЧасти = "Запасы";
	Если НоваяСтрока Тогда

		УправлениеНебольшойФирмойКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтаФорма);
		УправлениеНебольшойФирмойКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "РаспределениеЗапасов");
		
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события ПередУдалением табличной части Запасы.
//
&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)

	ИмяТабличнойЧасти = "Запасы";
	УправлениеНебольшойФирмойКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтаФорма, "РаспределениеЗапасов");

КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье"));
	
	СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики
		Тогда
		СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
	КонецЕсли;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии
		Тогда
		СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
	КонецЕсли;
	// Конец Партии
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Характеристика.
//
&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
КонецПроцедуры // ЗапасыХарактеристикаПриИзменении()

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти);
КонецПроцедуры


#КонецОбласти

#Область РаспределениеЗапасов

// Процедура - обработчик события ПриНачалеРедактирования табличной части РаспределениеЗапасов.
//
&НаКлиенте
Процедура РаспределениеЗапасовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИмяТабличнойЧасти = "Запасы";
	Если НоваяСтрока Тогда
		УправлениеНебольшойФирмойКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтаФорма, Элемент.Имя);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события ПередНачаломДобавления табличной части РаспределениеЗапасов.
//
&НаКлиенте
Процедура РаспределениеЗапасовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ИмяТабличнойЧасти = "Запасы";
	Отказ = УправлениеНебольшойФирмойКлиент.ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ЭтаФорма, Элемент.Имя);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура РаспределениеЗапасовНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РаспределениеЗапасов.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	
	СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики
		Тогда
		СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
	КонецЕсли;
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии
		Тогда
		СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
	КонецЕсли;
	// Конец Партии
	
КонецПроцедуры // РаспределениеЗапасовНоменклатураПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Характеристика.
//
&НаКлиенте
Процедура РаспределениеЗапасовХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РаспределениеЗапасов.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
КонецПроцедуры // РаспределениеЗапасовХарактеристикаПриИзменении()

&НаКлиенте
Процедура РаспределениеЗапасовКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.РаспределениеЗапасов.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда Возврат КонецЕсли;
	НоменклатураВДокументахКлиент.КонтрольЗначенияРезерваВТекущейСтроке(СтрокаТабличнойЧасти);
КонецПроцедуры

#КонецОбласти

#Область Затраты

// Процедура - обработчик события ПриАктивизации строки табличной части Затраты.
//
&НаКлиенте
Процедура ЗатратыПриАктивизацииСтроки(Элемент)
	
	ИмяТабличнойЧасти = "Затраты";
	УправлениеНебольшойФирмойКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "РаспределениеЗатрат");
	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования табличной части Затраты.
//
&НаКлиенте
Процедура ЗатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИмяТабличнойЧасти = "Затраты";
	Если НоваяСтрока Тогда

		УправлениеНебольшойФирмойКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтаФорма);
		УправлениеНебольшойФирмойКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "РаспределениеЗатрат");
		
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события ПередУдалением табличной части Затраты.
//
&НаКлиенте
Процедура ЗатратыПередУдалением(Элемент, Отказ)

	ИмяТабличнойЧасти = "Затраты";
	УправлениеНебольшойФирмойКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтаФорма, "РаспределениеЗатрат");

КонецПроцедуры

#КонецОбласти

#Область РаспределениеЗатрат

// Процедура - обработчик события ПриНачалеРедактирования табличной части РаспределениеЗатрат.
//
&НаКлиенте
Процедура РаспределениеЗатратПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИмяТабличнойЧасти = "Затраты";
	Если НоваяСтрока Тогда
		УправлениеНебольшойФирмойКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтаФорма, Элемент.Имя);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события ПередНачаломДобавления табличной части РаспределениеЗатрат.
//
&НаКлиенте
Процедура РаспределениеЗатратПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ИмяТабличнойЧасти = "Затраты";
	Отказ = УправлениеНебольшойФирмойКлиент.ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ЭтаФорма, Элемент.Имя);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура РаспределениеЗатратНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РаспределениеЗатрат.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;       	
	
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики
		Тогда
		СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
	КонецЕсли;	
	
КонецПроцедуры // РаспределениеЗатратНоменклатураПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Характеристика.
//
&НаКлиенте
Процедура РаспределениеЗатратХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РаспределениеЗатрат.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
КонецПроцедуры // РаспределениеЗатратХарактеристикаПриИзменении()

#КонецОбласти 

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗапасыЗаполнитьПоНормативам(Команда)
	
	Если Объект.Запасы.Количество() <> 0 Тогда

		ТекстВопроса = НСтр("ru = 'Табличная часть ""Запасы"" будет перезаполнена!'") + Символы.ПС;
		Если Объект.РаспределениеЗапасов.Количество() <> 0 Тогда
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Табличная часть ""Распределение запасов"" будет очищена!'") + Символы.ПС;
		КонецЕсли;	
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Продолжить выполнение операции?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗапасыЗаполнитьПоНормативамЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
        Возврат;
 
	КонецЕсли;
	
	ЗапасыЗаполнитьПоНормативамФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЗаполнитьПоНормативамЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    
    ЗапасыЗаполнитьПоНормативамФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЗаполнитьПоНормативамФрагмент()
    
    ЗаполнитьТабличнуюЧастьЗапасыПоНормативам();

КонецПроцедуры // ЗапасыЗаполнитьПоНормативам()

&НаКлиенте
Процедура ЗапасыЗаполнитьПоОстаткам(Команда)
	
	Если Объект.Запасы.Количество() <> 0 Тогда

		ТекстВопроса = НСтр("ru = 'Табличная часть ""Запасы"" будет перезаполнена!'") + Символы.ПС;
		Если Объект.РаспределениеЗапасов.Количество() <> 0 Тогда
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Табличная часть ""Распределение запасов"" будет очищена!'") + Символы.ПС;
		КонецЕсли;	
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Продолжить выполнение операции?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗапасыЗаполнитьПоОстаткамЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
        Возврат;
 
	КонецЕсли;
	
	ЗапасыЗаполнитьПоОстаткамФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЗаполнитьПоОстаткамЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    
    ЗапасыЗаполнитьПоОстаткамФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЗаполнитьПоОстаткамФрагмент()
    
    ЗаполнитьТабличнуюЧастьЗапасыПоОстаткам();

КонецПроцедуры // ЗапасыЗаполнитьПоОстаткам()

&НаКлиенте
Процедура ЗапасыРаспределитьПоНормативам(Команда)
	
	Если Объект.РаспределениеЗапасов.Количество() <> 0 Тогда

		Ответ = Неопределено;


		ПоказатьВопрос(Новый ОписаниеОповещения("ЗапасыРаспределитьПоНормативамЗавершение", ЭтотОбъект), НСтр("ru = 'Табличная часть ""Распределение запасов"" будет перезаполнена! Продолжить выполнение операции?'"), 
							РежимДиалогаВопрос.ДаНет, 0);
        Возврат;
 
	КонецЕсли;
	
	ЗапасыРаспределитьПоНормативамФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРаспределитьПоНормативамЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    
    ЗапасыРаспределитьПоНормативамФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРаспределитьПоНормативамФрагмент()
    
    ЗаполнитьТабличнуюЧастьРаспределениеЗапасовПоНормативам();
    
    Если Объект.Запасы.Количество() <> 0 Тогда
        
        Если Элементы.Запасы.ТекущаяСтрока = Неопределено Тогда
            Элементы.Запасы.ТекущаяСтрока = 0;
        КонецЕсли;	
        
        ИмяТабличнойЧасти = "Запасы";
        УправлениеНебольшойФирмойКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "РаспределениеЗапасов");
        
    КонецЕсли;

КонецПроцедуры // ЗапасыРаспределитьПоНормативам()

&НаКлиенте
Процедура ЗапасыРаспределитьПоКоличеству(Команда)
	
	Если Объект.РаспределениеЗапасов.Количество() <> 0 Тогда

		Ответ = Неопределено;


		ПоказатьВопрос(Новый ОписаниеОповещения("ЗапасыРаспределитьПоКоличествуЗавершение", ЭтотОбъект), НСтр("ru = 'Табличная часть ""Распределение запасов"" будет перезаполнена! Продолжить выполнение операции?'"), 
							РежимДиалогаВопрос.ДаНет, 0);
        Возврат;
 
	КонецЕсли;
	
	ЗапасыРаспределитьПоКоличествуФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРаспределитьПоКоличествуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    
    ЗапасыРаспределитьПоКоличествуФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыРаспределитьПоКоличествуФрагмент()
    
    ЗаполнитьТабличнуюЧастьРаспределениеЗапасовПоКоличеству();
    
    Если Объект.Запасы.Количество() <> 0 Тогда
        
        Если Элементы.Запасы.ТекущаяСтрока = Неопределено Тогда
            Элементы.Запасы.ТекущаяСтрока = 0;
        КонецЕсли;
        
        ИмяТабличнойЧасти = "Запасы";
        УправлениеНебольшойФирмойКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "РаспределениеЗапасов");
        
    КонецЕсли;

КонецПроцедуры // ЗапасыРаспределитьПоКоличеству()

&НаКлиенте
Процедура ЗатратыЗаполнитьПоОстаткам(Команда)
	
	Если Объект.Затраты.Количество() <> 0 Тогда

		ТекстВопроса = НСтр("ru = 'Табличная часть ""Затраты"" будет перезаполнена!'") + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Табличная часть ""Распределение расходов"" будет очищена!'") + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Продолжить выполнение операции?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗатратыЗаполнитьПоОстаткамЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
        Возврат;
 
	КонецЕсли;
	
	ЗатратыЗаполнитьПоОстаткамФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыЗаполнитьПоОстаткамЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    
    ЗатратыЗаполнитьПоОстаткамФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗатратыЗаполнитьПоОстаткамФрагмент()
    
    ЗаполнитьТабличнуюЧастьЗатратыПоОстаткам();

КонецПроцедуры // ЗатратыЗаполнитьПоОстаткам()

&НаКлиенте
Процедура ЗатратыРаспределитьПоКоличеству(Команда)
	                  
	Если Объект.РаспределениеЗатрат.Количество() <> 0 Тогда

		Ответ = Неопределено;


		ПоказатьВопрос(Новый ОписаниеОповещения("ЗатратыРаспределитьПоКоличествуЗавершение", ЭтотОбъект), НСтр("ru = 'Табличная часть ""Распределение расходов"" будет перезаполнена! Продолжить выполнение операции?'"), 
							РежимДиалогаВопрос.ДаНет, 0);
        Возврат;
 
	КонецЕсли;
	
	ЗатратыРаспределитьПоКоличествуФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыРаспределитьПоКоличествуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    
    ЗатратыРаспределитьПоКоличествуФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗатратыРаспределитьПоКоличествуФрагмент()
    
    ЗаполнитьТабличнуюЧастьРаспределениеЗатратПоКоличеству();
    
    Если Объект.Затраты.Количество() <> 0 Тогда
        
        Если Элементы.Затраты.ТекущаяСтрока = Неопределено Тогда
            Элементы.Затраты.ТекущаяСтрока = 0;
        КонецЕсли;
        
        ИмяТабличнойЧасти = "Затраты";
        УправлениеНебольшойФирмойКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "РаспределениеЗатрат");
        
    КонецЕсли;

КонецПроцедуры // РаспределитьКоличеству()

&НаКлиенте
Процедура ПродукцияЗаполнитьПоВыпуску(Команда)
	
	Если Объект.Продукция.Количество() <> 0 Тогда

		Ответ = Неопределено;


		ПоказатьВопрос(Новый ОписаниеОповещения("ПродукцияЗаполнитьПоВыпускуЗавершение", ЭтотОбъект), НСтр("ru = 'Табличная часть ""Продукция"" будет перезаполнена! Продолжить выполнение операции?'"), 
							РежимДиалогаВопрос.ДаНет, 0);
        Возврат;
 
	КонецЕсли;
	
	ПродукцияЗаполнитьПоВыпускуФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаполнитьПоВыпускуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    
    ПродукцияЗаполнитьПоВыпускуФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаполнитьПоВыпускуФрагмент()
    
    ЗаполнитьТабличнуюЧастьПродукцияПоВыпуску();

КонецПроцедуры // ПродукцияЗаполнитьПоВыпуску()

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УправлениеФормой()
	
	Элементы.Ячейка.Видимость = НЕ ОрдерныйСклад;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовДляМобильногоКлиента()
	
	Если Не ОбщегоНазначенияКлиентСервер.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	УправлениеНебольшойФирмойСервер.НастроитьФормуОбъектаМобильныйКлиент(Элементы);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаНачалаПериода", "МаксимальнаяШирина", 6);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаОкончанияПериода", "МаксимальнаяШирина", 6);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыИтогКоличество", "Ширина", 6);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РаспределениеЗапасовИтогКоличество", "Ширина", 6);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗатратыИтогСумма", "Ширина", 6);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РаспределениеРасходовИтогСумма", "Ширина", 6);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыВидимостиФормы()
	
	СтрокаРеквизитов = "ОрдерныйСклад";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СтруктурнаяЕдиница, СтрокаРеквизитов);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначенияРеквизитов, СтрокаРеквизитов);
	
КонецПроцедуры

// Процедура заполняет табличну часть Запасы по номартивам.
//
Процедура ЗаполнитьТабличнуюЧастьЗапасыПоНормативам()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ВыполнитьЗаполнениеЗапасовПоНормативам();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьЗапасыПоНормативам()	

// Процедура заполняет табличну часть Запасы по остаткам.
//
Процедура ЗаполнитьТабличнуюЧастьЗапасыПоОстаткам()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ВыполнитьЗаполнениеЗапасовПоОстаткам();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьЗапасыПоОстаткам()

// Процедура заполняет табличну часть РаспределениеЗапасов по нормативам.
//
Процедура ЗаполнитьТабличнуюЧастьРаспределениеЗапасовПоНормативам()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ВыполнитьРаспределениеЗапасовПоНормативам();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьРаспределениеЗапасовПоНормативам()

// Процедура заполняет табличну часть РаспределениеЗапасов по количеству.
//
Процедура ЗаполнитьТабличнуюЧастьРаспределениеЗапасовПоКоличеству()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ВыполнитьРаспределениеЗапасовПоКоличеству();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьРаспределениеЗатратПоКоличеству()

// Процедура заполняет табличну часть Затраты.
//
Процедура ЗаполнитьТабличнуюЧастьЗатратыПоОстаткам()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ВыполнитьЗаполнениеРасходовПоОстаткам();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьЗатратыПоОстаткам()

// Процедура заполняет табличну часть РаспределениеЗатрат.
//
Процедура ЗаполнитьТабличнуюЧастьРаспределениеЗатратПоКоличеству()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ВыполнитьРаспределениеЗатратПоКоличеству();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьРаспределениеЗатратПоКоличеству()

// Процедура заполняет табличну часть Продукция.
//
Процедура ЗаполнитьТабличнуюЧастьПродукцияПоВыпуску()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ВыполнитьЗаполнениеПродукцииПоВыпуску();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПродукцияПоВыпуску()	

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Получает набор данных с сервера.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

// Процедура получает данные по штрихкодам.
//
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		ДанныеШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() <> 0 Тогда
			
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("Организация", СтруктураДанные.Организация);
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
			СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
			
			Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
				ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из Метаданные.Документы.РаспределениеЗатрат.ТабличныеЧасти.Запасы.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрикодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрикодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрикодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено ИЛИ ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры,ЭтоНабор", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор));
		Иначе
			МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.ЕдиницаИзмерения));
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				НоваяСтрока = Объект.Запасы.Добавить();
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.Спецификация = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Спецификация;
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Иначе
				НайденнаяСтрока = МассивСтрокТЧ[0];
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + ТекШтрихкод.Количество;
				Элементы.Запасы.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрикодов) Экспорт
	
	Модифицированность = Истина;
	
	НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов);
	НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтаФорма, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтаФорма,,,,Оповещение
		);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияХарактеристик()
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		Если ТекНекорректныйШтрихкод.Свойство("ЭтоНабор") И ТекНекорректныйШтрихкод.ЭтоНабор Тогда
			// Наборы
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", НСтр("ru = 'Набор'"));
		Иначе
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		КонецЕсли; 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПодбором

&НаКлиенте
Процедура ПродукцияПодбор(Команда)
	
	ИмяТабличнойЧасти 	= "Продукция";
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период", 				Объект.Дата);
	ПараметрыПодбора.Вставить("Организация", 			Компания);
	ПараметрыПодбора.Вставить("СтруктурнаяЕдиница", 	Объект.СтруктурнаяЕдиница);
	
	ПараметрыПодбора.Вставить("ИспользуютсяСпецификации", Истина);
	
	ПараметрыПодбора.Вставить("ОтображатьКолонкуЦена",	Ложь);
	ПараметрыПодбора.Вставить("ЭтоПриходныйДокумент", 	Истина);
	
	ТипНоменклатуры = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Номенклатура"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					ТипНоменклатуры.Добавить(ЭлементФиксМассива);
				КонецЦикла; 
			Иначе
				ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	// Наборы
	ПараметрыПодбора.Вставить("ЭтоНабор", Ложь);
	
	СтатусПартии = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Партия"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.Статус" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					СтатусПартии.Добавить(ЭлементФиксМассива);
				КонецЦикла;
			Иначе
				СтатусПартии.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПодбора.Вставить("СтатусПартии", СтатусПартии);
	
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтаФорма);
	
КонецПроцедуры // ПодборВыполнить()

&НаКлиенте
Процедура ЗапасыПодбор(Команда)
	
	ИмяТабличнойЧасти 	= "Запасы";
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период", 				Объект.Дата);
	ПараметрыПодбора.Вставить("Организация", 			Компания);
	ПараметрыПодбора.Вставить("СтруктурнаяЕдиница", 	Объект.СтруктурнаяЕдиница);
	
	ПараметрыПодбора.Вставить("ИспользуютсяСпецификации", Истина);	
	ПараметрыПодбора.Вставить("ИспользуетсяРезервирование", Истина);
	
	ТипНоменклатуры = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Номенклатура"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					ТипНоменклатуры.Добавить(ЭлементФиксМассива);
				КонецЦикла; 
			Иначе
				ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПараметрыПодбора.Вставить("ТипНоменклатуры",	   ТипНоменклатуры);
	// Наборы
	ПараметрыПодбора.Вставить("ЭтоНабор", Ложь);
		
	СтатусПартии = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Партия"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.Статус" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					СтатусПартии.Добавить(ЭлементФиксМассива);
				КонецЦикла;
			Иначе
				СтатусПартии.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПодбора.Вставить("СтатусПартии", СтатусПартии);
	
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтаФорма);
	
КонецПроцедуры // ПодборВыполнить()

&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		
		Если ИмяТабличнойЧасти = "Запасы" Тогда
			НоваяСтрока.КлючСвязи = УправлениеНебольшойФирмойСервер.СоздатьНовыйКлючСвязи(ЭтаФорма);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		// Характеристики
		СтруктураДанныеНоменклатуры = Новый Структура();
		СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
		СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
		
		СтатусПартии = Новый СписокЗначений;
		СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		
		СтруктураДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
		
		НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
		
		Если СтруктураДанные.ИспользоватьХарактеристики
			Тогда
			НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
			Если НоваяСтрока.Свойство("Спецификация") Тогда
				НоваяСтрока.Спецификация =  СтруктураДанные.Спецификация;
			КонецЕсли;;
		КонецЕсли;
		// Конец Характеристики
		
		//Партии
		НоваяСтрока.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
		НоваяСтрока.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
		
		НоваяСтрока.Партия = ?(ЗначениеЗаполнено(СтрокаЗагрузки.Партия), СтрокаЗагрузки.Партия, СтруктураДанные.Партия);
		// Конец Партии
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, Новый Структура("ТекШтрихкод", ТекШтрихкод)), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
    
    
    Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
        ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
    КонецЕсли;

КонецПроцедуры // ПоискПоШтрихкоду()

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтаФорма, "Запасы", Ложь);
	
КонецПроцедуры // ПолучитьВес()

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтаФорма);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

#КонецОбласти 
 
#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

// Процедура - обработчик нажатия кнопки Копировать строки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Запасы");
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Копировать строки в ТЧ РаспределениеЗапасов.
//
&НаКлиенте
Процедура РаспределениеЗапасовКопироватьСтроки(Команда)
	
	КопироватьСтроки("РаспределениеЗапасов");
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Копировать строки в ТЧ Продукция.
//
&НаКлиенте
Процедура ПродукцияКопироватьСтроки(Команда)
	
	КопироватьСтроки("Продукция");
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Вставить строки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	
	ВставитьСтроки("Запасы");
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Вставить строки в ТЧ РаспределениеЗапасов.
//
&НаКлиенте
Процедура РаспределениеЗапасовВставитьСтроки(Команда)
	
	Отказ = УправлениеНебольшойФирмойКлиент.ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ЭтаФорма, "РаспределениеЗапасов");
	Если НЕ Отказ Тогда
		ВставитьСтроки("РаспределениеЗапасов");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Вставить строки в ТЧ Продукция.
//
&НаКлиенте
Процедура ПродукцияВставитьСтроки(Команда)
	
	ВставитьСтроки("Продукция");
	
КонецПроцедуры

// Вызывает процедуру копирования строк и оповещает пользователя о количестве скопированных.
//
&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуру вставки строк и оповещает пользователя о количетсве вставленных.
//
&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

// Выполняет копирование выделенных строк в буфер обмена.
//
&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

// Вставляет скопированные строки из буфера обмена в выбранную табличную часть.
//
&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры

// Обрабатывает вставленные строки.
//
&НаКлиенте
Процедура ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных)
	
	Если ИмяТЧ = "Запасы" Тогда
		
		Количество = Объект[ИмяТЧ].Количество();
		
		Для Итератор = 1 По КоличествоВставленных Цикл
			
			Строка = Объект[ИмяТЧ][Количество - Итератор];
			
			УправлениеНебольшойФирмойКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтаФорма, Строка);
			УправлениеНебольшойФирмойКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "РаспределениеЗапасов", Строка);
			
			Элементы[ИмяТЧ].ВыделенныеСтроки.Добавить(Строка.ПолучитьИдентификатор());
			
		КонецЦикла;
		
	ИначеЕсли ИмяТЧ = "РаспределениеЗапасов" Тогда
		
		Количество = Объект[ИмяТЧ].Количество();
		
		Для Итератор = 1 По КоличествоВставленных Цикл
			
			Строка = Объект[ИмяТЧ][Количество - Итератор];
			
			УправлениеНебольшойФирмойКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтаФорма, "РаспределениеЗапасов", Строка);
			Элементы[ИмяТЧ].ВыделенныеСтроки.Добавить(Строка.ПолучитьИдентификатор());
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает вставленные строки.
//
&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	Для Итератор = 1 По КоличествоВставленных Цикл
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", Строка.Характеристика);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		Если НЕ ЗначениеЗаполнено(Строка.Спецификация) Тогда
			Строка.Спецификация = СтруктураДанные.Спецификация;
		КонецЕсли;
		
		Если ИмяТЧ = "Продукция" ИЛИ ИмяТЧ = "Запасы" Тогда
			Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
				Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
