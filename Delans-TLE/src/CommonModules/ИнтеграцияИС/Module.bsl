////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Универсальные механизмы библиотек интеграции с государственными информационными системами:
//  * ЕГАИС,
//  * ГИСМ,
//  * ВетИС.
//
// Состав модуля:
//
//  * Функции работы с прикладными документами (вывод привязки библиотечных документов, оповещений итп).
//  * Общие функции проведения документов.
//  * Общие функции для работы с протоколом обмена (Присоединенные файлы)
//  * Функции общего назначения.
//

#Область ПрограммныйИнтерфейс

#Область ФормыДокументовОснований

//Вывод гиперссылок на документы ИС в форме документа-основания.
//
// Для подключения документа-основания ВЕТИС к этому механизму нужно в модуле формы документа-основания добавить вызовы
//	- ИнтеграцияИС.ПриСозданииНаСервереВФормеДокументаОснования
//	- ИнтеграцияИС.ПриЧтенииНаСервереВФормеДокументаОснования
//	- ИнтеграцияИС.ПослеЗаписиНаСервереВФормеДокументаОснования
//	- ИнтеграцияИСКлиент.ОбработкаОповещенияВФормеДокументаОснования
// Также нужно добавить в модуле формы процедуры
//	- Подключаемый_ПолеИнтеграцииИСОбработкаНавигационнойСсылки
//	- Подключаемый_ОбновитьПолеИнтеграцииИСВФормеДокументаОснования
//	- ОбновитьПолеИнтеграцииИСВФормеДокументаОснования

// Параметры вывода гиперссылок на документы ИС в форме документа-основания.
//
// Параметры:
//  ИменаПодсистем           - Строка - имена подсистем (через запятую), на объекты которых нужны гипессылки
//  ИмяЭлементаДляРазмещения - Строка - имя реквизита формы, для размещения гиперссылок
// 
// Возвращаемое значение:
//  Структура - согласно параметрам
//
Функция ПараметрыИнтеграцииВФорме(ИменаПодсистем = "", ИмяЭлементаДляРазмещения = "") Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИменаПодсистем",           ИменаПодсистем);
	Результат.Вставить("ИмяЭлементаДляРазмещения", ИмяЭлементаДляРазмещения);
	Возврат Результат;
	
КонецФункции

Функция ИмяЭлементаДляРазмещения() Экспорт
	
	Возврат "ГруппаИнтеграция";
	
КонецФункции

// Процедура - При создании на сервере в форме документа основания
//
// Параметры:
//  Форма                  - УправляемаяФорма        - форма прикладного объекта для встраивания библиотечной гиперссылки
//  Объект                 - ДанныеФормыСтруктура    - данные прикладного объекта
//  УстановленныеПараметры - Структура, Неопределено - см ПараметрыИнтеграцииВФорме()
//
Процедура ПриСозданииНаСервереВФормеДокументаОснования(Форма, Объект, УстановленныеПараметры = Неопределено) Экспорт
	
	ПараметрыИнтеграции = ПараметрыИнтеграцииВФорме();
	
	Если ЗначениеЗаполнено(УстановленныеПараметры) Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыИнтеграции, УстановленныеПараметры);
	Иначе 
		ЗаполнитьЗначенияСвойств(ПараметрыИнтеграции, ИнтеграцияИСПереопределяемый.ПараметрыИнтеграцииВФормеПоОбъекту(Объект));
	КонецЕсли;
	
	ИнтегрируемыеПодсистемы = Новый Структура;
	Реквизиты = Новый Массив;
	
	Для Каждого КлючИЗначение Из Новый Структура(ПараметрыИнтеграции.ИменаПодсистем) Цикл
		
		// Проверим использование подсистемы.
		ИмяПодсистемы = КлючИЗначение.Ключ;
		
		ИспользованиеПодсистемы = Ложь;
		Если ПодсистемаСуществует(ИмяПодсистемы) Тогда
			
			МодульИнтеграции = ОбщийМодуль(ИмяПодсистемы);
			ИспользованиеПодсистемы = МодульИнтеграции.ИспользуетсяИнтеграцияВФормеДокументаОснования(Форма, Объект);
			
		КонецЕсли;
		
		Если НЕ ИспользованиеПодсистемы Тогда
			Продолжить;
		КонецЕсли;
		
		ИнтегрируемыеПодсистемы.Вставить(ИмяПодсистемы);
		
		// Добавим реквизит формы для подсистемы.
		Реквизиты.Добавить(Новый РеквизитФормы(
			ИнтеграцияИСКлиентСервер.ИмяПоляИнтеграцииВФормеДокументаОснования(ИмяПодсистемы),
			Новый ОписаниеТипов("ФорматированнаяСтрока")));
		
	КонецЦикла;
	
	Если ИнтегрируемыеПодсистемы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Добавим служебный реквизит описания всех используемых подсистем.
	Реквизиты.Добавить(Новый РеквизитФормы(
		ИнтеграцияИСКлиентСервер.ИмяПоляОписанияИнтеграцийВФормеДокументаОснования(),
		Новый ОписаниеТипов()));
	
	// Создадим реквизиты формы.
	Форма.ИзменитьРеквизиты(Реквизиты);
	
	Форма[ИнтеграцияИСКлиентСервер.ИмяПоляОписанияИнтеграцийВФормеДокументаОснования()] =
		Новый ФиксированнаяСтруктура(ИнтегрируемыеПодсистемы);
	
	ЭлементРодитель = Форма.Элементы.Найти(ПараметрыИнтеграции.ИмяЭлементаДляРазмещения);
		
	Для Каждого КлючИЗначение Из ИнтегрируемыеПодсистемы Цикл
		
		ИмяПодсистемы = КлючИЗначение.Ключ;
		
		// Создадим элемент формы для подсистемы.
		ПолеНадписи = Форма.Элементы.Добавить(
			ИнтеграцияИСКлиентСервер.ИмяПоляИнтеграцииВФормеДокументаОснования(ИмяПодсистемы),
			Тип("ПолеФормы"),
			ЭлементРодитель);
			
		ПолеНадписи.Вид 					= ВидПоляФормы.ПолеНадписи;
		ПолеНадписи.ПутьКДанным 			= ИнтеграцияИСКлиентСервер.ИмяПоляИнтеграцииВФормеДокументаОснования(ИмяПодсистемы);
		ПолеНадписи.ПоложениеЗаголовка 		= ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеНадписи.АвтоМаксимальнаяШирина 	= Ложь;
		ПолеНадписи.АвтоМаксимальнаяВысота 	= Ложь;
		ПолеНадписи.МаксимальнаяВысота 		= 2;
			
		ПолеНадписи.УстановитьДействие(
			"ОбработкаНавигационнойСсылки",
			"Подключаемый_ПолеИнтеграцииИСОбработкаНавигационнойСсылки");
		
	КонецЦикла;
	
	ОбновитьПолеИнтеграцииВФормеДокументаОснования(Форма, Объект);
	
КонецПроцедуры

Процедура ПриЧтенииНаСервереВФормеДокументаОснования(Форма, Объект) Экспорт
	
	ОбновитьПолеИнтеграцииВФормеДокументаОснования(Форма, Объект);
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервереВФормеДокументаОснования(Форма, Объект) Экспорт
	
	ОбновитьПолеИнтеграцииВФормеДокументаОснования(Форма, Объект);
	
КонецПроцедуры

Процедура ОбновитьПолеИнтеграцииВФормеДокументаОснования(Форма, Объект, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
	 И ДополнительныеПараметры.Свойство("АвтоТест") Тогда
		Возврат; // проверка встраивания поля интеграции в форму
	КонецЕсли;
	
	ИнтегрируемыеПодсистемы = ИнтеграцияИСКлиентСервер.ИнтегрируемыеПодсистемыВФормеДокументаОснования(Форма);
	
	Если НЕ ЗначениеЗаполнено(ИнтегрируемыеПодсистемы) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ИмяПодсистемы") Тогда
		ИмяПодсистемыИзПараметров = ДополнительныеПараметры.ИмяПодсистемы;
	Иначе
		ИмяПодсистемыИзПараметров = Неопределено;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ИнтегрируемыеПодсистемы Цикл
		
		ИмяПодсистемы = КлючИЗначение.Ключ;
		
		Если ЗначениеЗаполнено(ИмяПодсистемыИзПараметров) И ИмяПодсистемыИзПараметров <> ИмяПодсистемы Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоляФормы = ИнтеграцияИСКлиентСервер.ИмяПоляИнтеграцииВФормеДокументаОснования(ИмяПодсистемы);
		
		Если Форма.Элементы.Найти(ИмяПоляФормы) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Получим текст надписи на форме.
		ТекстНадписи = "";
		Если ПодсистемаСуществует(ИмяПодсистемы) Тогда
			
			МодульИнтеграции = ОбщийМодуль(ИмяПодсистемы);
			ТекстНадписи = МодульИнтеграции.ТекстНадписиПоляИнтеграцииВФормеДокументаОснования(Форма, Объект);
			
		КонецЕсли;
		
		Форма[ИмяПоляФормы] = ТекстНадписи;
		Форма.Элементы[ИмяПоляФормы].Видимость = ЗначениеЗаполнено(ТекстНадписи);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФормыДокументовИС

Процедура ПослеЗаписиНаСервереВФормеОбъектаДокументаИС(Форма, Объект, ИмяПодсистемы, ПараметрыЗаписи) Экспорт
	
	Если Объект.ДополнительныеСвойства.Свойство("ПредыдущийДокументОснование") Тогда
		
		// Заполняется в подписке РассчитатьСтатусОформленияВЕТИСПередЗаписьюДокумента
		ПараметрыЗаписи.Вставить(
			"ПредыдущийДокументОснование",
			Объект.ДополнительныеСвойства.ПредыдущийДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДокументыИС

// Функция возвращает оформленные документы по документу-основанию
//   * в документе должен быть реквизит "ДокументОснование"
//   * допустимый тип документа определяется из регистра статусов
// Параметры:
//  ДокументОснование					 - ДокументСсылка   - значение реквизита "ДокументОснование"
//  МетаданныеРегистраСтатусовДокументов - ОбъектМетаданных - используемый регистр статусов документов
//   * Должен содержать измерение "Документ"
//   * Должен содержать поле "Статус"
// Возвращаемое значение:
//  Структура - описание документов по основанию с полями
//   * [ИмяДокумента] - имя метаданных оформленного документа - массив структур с полями:
//     ** Ссылка - [ИмяДокумента]Ссылка - ссылка на оформленный документ
//     ** Дата   - Дата                 - дата документа
//     ** Статус - Произвольный         - статус документа по регистру
//
Функция ДокументыИСПоДокументуОснованию(ДокументОснование, МетаданныеРегистраСтатусовДокументов) Экспорт
	
	ДокументыИС = Новый Структура;
	
	ИмяРегистра = МетаданныеРегистраСтатусовДокументов.Имя;
	МассивТекстов = Новый Массив;
	
	ШаблонВыборки =
	"ВЫБРАТЬ
	|	""%1""									КАК ИмяДокумента,
	|	Таблица.Ссылка							КАК Ссылка,
	|	Таблица.Дата							КАК Дата,
	|	ЕСТЬNULL(Статусы.Статус, НЕОПРЕДЕЛЕНО) 	КАК Статус
	|ИЗ
	|	Документ.%1 КАК Таблица
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.%2 КАК Статусы
	|		ПО Статусы.Документ = Таблица.Ссылка
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|	И НЕ Таблица.ПометкаУдаления";
	
	ШаблонОбъединения = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	Для Каждого ТипДокумента Из МетаданныеРегистраСтатусовДокументов.Измерения.Документ.Тип.Типы() Цикл
		
		МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипДокумента);
		
		Если РеквизитДокументОснованиеДокументаИС(МетаданныеДокумента) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументыИС.Вставить(МетаданныеДокумента.Имя, Новый Массив);
		МассивТекстов.Добавить(СтрШаблон(ШаблонВыборки,МетаданныеДокумента.Имя,ИмяРегистра));
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат ДокументыИС;
	ИначеЕсли ДокументыИС.Количество() = 0 Тогда 
		Возврат ДокументыИС;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(МассивТекстов,ШаблонОбъединения);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		ОписаниеДокумента = Новый Структура("Ссылка, Дата, Статус");
		ЗаполнитьЗначенияСвойств(ОписаниеДокумента, Выборка);
		
		ДокументыИС[Выборка.ИмяДокумента].Добавить(ОписаниеДокумента);
		
	КонецЦикла;
	
	Возврат ДокументыИС;
	
КонецФункции

#КонецОбласти

#Область МетаданныеИС

Функция РеквизитДокументОснованиеДокументаИС(МетаданныеДокумента) Экспорт
	
	Возврат МетаданныеДокумента.Реквизиты.Найти("ДокументОснование");
	
КонецФункции

// Возвращает значение по умолчанию переданного определяемого типа.
//
Функция ПустоеЗначениеОпределяемогоТипа(ИмяТипа) Экспорт
	
	Возврат Метаданные.ОпределяемыеТипы[ИмяТипа].Тип.ПривестиЗначение();
	
КонецФункции

Функция ПодсистемаСуществует(КраткоеИмяПодсистемы)
	
	ПолноеИмяПодсистемы = ИнтеграцияИСКлиентСервер.ПолноеИмяПодсистемы(КраткоеИмяПодсистемы);
	Возврат ОбщегоНазначения.ПодсистемаСуществует(ПолноеИмяПодсистемы);
	
КонецФункции

Функция ОбщийМодуль(КраткоеИмяПодсистемы)
	
	ИмяМодуля = ИнтеграцияИСКлиентСервер.МодульСервер(КраткоеИмяПодсистемы);
	Возврат ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
	
КонецФункции

#КонецОбласти

#Область ПодготовкаИЗаписьДвиженийДокумента

// Процедура инициализирует общие структуры, используемые при проведении документов.
// Вызывается из модуля документов при проведении.
//
Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДополнительныеСвойства, РежимПроведения = Неопределено) Экспорт

	// В структуре "ДополнительныеСвойства" создаются свойства с ключами "ТаблицыДляДвижений", "ДляПроведения".

	// "ТаблицыДляДвижений" - структура, которая будет содержать таблицы значений с данными для выполнения движений.
	ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);

	// "ДляПроведения" - структура, содержащая свойства и реквизиты документа, необходимые для проведения.
	ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
	
	// Структура, содержащая ключ с именем "МенеджерВременныхТаблиц", в значении которого хранится менеджер временных таблиц.
	// Содержит для каждой временной таблицы ключ (имя временной таблицы) и значение (признак наличия записей во временной таблице).
	ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	ДополнительныеСвойства.ДляПроведения.Вставить("РежимПроведения",           РежимПроведения);
	ДополнительныеСвойства.ДляПроведения.Вставить("МетаданныеДокумента",       ДокументСсылка.Метаданные());
	ДополнительныеСвойства.ДляПроведения.Вставить("Ссылка",                    ДокументСсылка);
	
КонецПроцедуры

// Процедура выполняет подготовку наборов записей документа к записи движений.
// 1. Очищает наборы записей от "старых записей" (ситуация возможна только в толстом клиенте)
// 2. Взводит флаг записи у наборов, по которым документ имеет движения
// Вызывается из модуля документов при проведении.
//
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект, ЭтоНовый = Ложь) Экспорт
	Перем ЭтоНовыйДокумент, МетаданныеДвижения;
	
	Для Каждого НаборЗаписей Из Объект.Движения Цикл

		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;

	КонецЦикла;
	
	Если НЕ Объект.ДополнительныеСвойства.Свойство("ЭтоНовый", ЭтоНовыйДокумент) Тогда
		ЭтоНовыйДокумент = ЭтоНовый;
	КонецЕсли;
	
	Если НЕ ЭтоНовыйДокумент Тогда

		Если Объект.ДополнительныеСвойства.Свойство("ДляПроведения")
		 И Объект.ДополнительныеСвойства.ДляПроведения.Свойство("МетаданныеДокумента") Тогда
			МетаданныеДвижения = Объект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Движения;
		Иначе
			МетаданныеДвижения = Объект.Метаданные().Движения;
		КонецЕсли;
		
		МассивИменРегистров = ПолучитьИспользуемыеРегистры(Объект.Ссылка, МетаданныеДвижения);

		Для Каждого ИмяРегистра Из МассивИменРегистров Цикл
			Объект.Движения[ИмяРегистра].Записывать = Истина;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Функция формирует массив имен регистров, по которым документ имеет движения.
// Вызывается при подготовке записей к регистрации движений.
//
Функция ПолучитьИспользуемыеРегистры(Регистратор, Движения, МассивИсключаемыхРегистров = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);

	Результат = Новый Массив;
	МаксимумТаблицВЗапросе = 256;

	СчетчикТаблиц   = 0;
	СчетчикДвижений = 0;

	ВсегоДвижений = Движения.Количество();
	МассивТекстаЗапроса = Новый Массив;
	
	Разделитель = 
	"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	Для Каждого Движение Из Движения Цикл

		СчетчикДвижений = СчетчикДвижений + 1;

		ПропуститьРегистр = МассивИсключаемыхРегистров <> Неопределено
							И МассивИсключаемыхРегистров.Найти(Движение.Имя) <> Неопределено;

		Если Не ПропуститьРегистр Тогда

			СчетчикТаблиц = СчетчикТаблиц + 1;

			МассивТекстаЗапроса.Добавить(
			"
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|""" + Движение.Имя + """ КАК ИмяРегистра
			|
			|ИЗ " + Движение.ПолноеИмя() + "
			|
			|ГДЕ Регистратор = &Регистратор
			|");

		КонецЕсли;

		Если СчетчикТаблиц = МаксимумТаблицВЗапросе Или СчетчикДвижений = ВсегоДвижений Тогда

			Запрос.Текст = СтрСоединить(МассивТекстаЗапроса, Разделитель);
			МассивТекстаЗапроса.Очистить();
			
			СчетчикТаблиц = 0;

			Если Результат.Количество() = 0 Тогда

				Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");

			Иначе

				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Результат.Добавить(Выборка.ИмяРегистра);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Процедура записывает движения документа. Дополнительно происходит копирование параметров
// в модули наборов записей для выполнения регистрации изменений в движениях.
// Процедура вызывается из модуля документов при проведении.
//
Процедура ЗаписатьНаборыЗаписей(Объект) Экспорт
	Перем РегистрыДляКонтроля, РассчитыватьИзменения, ПараметрыКонтроля;
	
	Для Каждого Движение Из Объект.Движения Цикл
		
		Движение.ДополнительныеСвойства.Вставить("ЭтоНовый", Объект.ДополнительныеСвойства.ЭтоНовый);
		Движение.ДополнительныеСвойства.Вставить("РежимЗаписи", Объект.ДополнительныеСвойства.РежимЗаписи);
		Движение.ДополнительныеСвойства.Вставить("ДатаРегистратора", Объект.Дата);
		
		Движение.ДополнительныеСвойства.Вставить("ДляПроведения", 
			Новый Структура("СтруктураВременныеТаблицы",
				// Структура для передачи данных в модули наборов записей.
				Объект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы));
		
	КонецЦикла;
	
	// Регистры, для которых будут рассчитаны таблицы изменений движений.
	Если Объект.ДополнительныеСвойства.ДляПроведения.Свойство("РегистрыДляКонтроля", РегистрыДляКонтроля) Тогда
		
		// Установка флага регистрации изменений в наборе записей.
		Если НЕ Объект.ДополнительныеСвойства.Свойство("РассчитыватьИзменения", РассчитыватьИзменения) Тогда
			РассчитыватьИзменения = Истина;
		КонецЕсли;
		
		Для Каждого НаборЗаписей Из РегистрыДляКонтроля Цикл
			Если НаборЗаписей.Записывать Тогда
				
				НаборЗаписей.ДополнительныеСвойства.Вставить("РассчитыватьИзменения", РассчитыватьИзменения);
				
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
	Объект.Движения.Записать();
	
КонецПроцедуры

// Выполняет закрытие менеджера временных таблиц в структуре дополнительных свойств документа, используемых 
// при проведении.
//
// Параметры:
//	ДополнительныеСвойства - Структура - структура с дополнительными свойствами документа, используемыми
//		при проведении.
//
Процедура ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства) Экспорт

	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();

КонецПроцедуры

#КонецОбласти

#Область ПрисоединенныеФайлы

// Вызывает исключение при открытии формы протокола обмена с незаполненным параметром "Документ"
//  (форма предназначается для просмотра протокола обмена по конкретному объекту)
// Параметры:
//  Форма - УправляемаяФорма - форма протокола обмена
//
Процедура ОтработатьВходящийДокументПротоколаОбмена(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.Параметры.Документ) Тогда
		Форма.Документ = Форма.Параметры.Документ;
	Иначе
		ВызватьИсключение НСтр("ru = 'Протокол обмена может быть открыт только в контексте документа.'");
	КонецЕсли;
	
КонецПроцедуры

// Устаннавливает типовое условное оформление протокола обмена
//
// Параметры:
//  Форма	 - УправляемаяФорма - форма протокола обмена
//
Процедура УстановитьУсловноеОформлениеПротоколаОбмена(Форма) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	УсловноеОформление.Элементы.Очистить();
	
#Область ДеревоЗачеркнутый
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоФайловПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоФайлов.УсловноеОформление");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "УсловноеОформлениеЗачеркнутый";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,,,,Истина));
	
#КонецОбласти

#Область ДеревоСерый

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоФайловПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоФайлов.УсловноеОформление");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "УсловноеОформлениеСерый";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГИСМ);
	
#КонецОбласти

#Область ДеревоЖирный

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоФайловПредставление.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоФайлов.УсловноеОформление");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "УсловноеОформлениеЖирный";

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
#КонецОбласти

#Область ДеревоОтказ
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоФайловПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоФайлов.УсловноеОформление");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "УсловноеОформлениеОшибка";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЕГАИССтатусОбработкиОшибкаПередачи);
	
#КонецОбласти

#Область ДатаНеПередана
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(Форма, "ДеревоФайлов.Дата", Элементы.ДеревоФайловДата.Имя);
	
	// Представление даты "<не передано>"
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоФайловДата");
	
	ПредставлениеЭлемента = НСтр("ru = 'Представление даты ""<не передано>""'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоФайлов.Дата");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = '00010101';
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не передано>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГИСМ);
	
#КонецОбласти

КонецПроцедуры

// Возвращает индекс картинки запроса в коллекции "ПротоколОбменаГИСМ"
//
// Параметры:
//  СтрокаПоследовательности - Произвольный - коллекция с типом запроса (входящий, исходящий)
//  НеВыполнен				 - Булево - серые стрелки (по умолчанию Ложь)
// 
// Возвращаемое значение:
//  Число - индекс соответствующей картинки запроса
//
Функция ИндексКартинкиЗапроса(СтрокаПоследовательности, НеВыполнен = Ложь) Экспорт
	
	ИндексКартинки = 0;
	
	Смещение = 0;
	Если НеВыполнен Тогда
		Смещение = 6;
	КонецЕсли;
	
	Если СтрокаПоследовательности = Неопределено Тогда
	ИначеЕсли СтрокаПоследовательности.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий Тогда
		ИндексКартинки = 1 + Смещение;
	ИначеЕсли СтрокаПоследовательности.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий Тогда
		ИндексКартинки = 2 + Смещение;
	КонецЕсли;
	
	Возврат ИндексКартинки;
	
КонецФункции

#КонецОбласти


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область РаботаСЧасовымиПоясами

// Формирует представление даты с часовым поясом.
//
// Параметры:
//  Дата        - ДатаВремя - дата, для которой нужно вывести представление.
//  ЧасовойПояс - Строка - идентификатор часового пояса.
// 
// Возвращаемое значение:
//  Строка - представление даты с часовым поясом.
//
Функция ДатаСЧасовымПоясом(Дата, Знач ЧасовойПояс = Неопределено) Экспорт
	
	Если ЧасовойПояс = Неопределено Тогда
		ЧасовойПояс = ЧасовойПоясСеанса();
	КонецЕсли;
	
	Смещение = (Дата - УниверсальноеВремя(Дата, ЧасовойПояс)) / 3600;
	Если Смещение > 0 Тогда
		Результат = Формат(Дата, "ДФ=yyyy-MM-ddTЧЧ:мм:сс") + "+" + Формат(+Смещение, "ЧЦ=2; ЧН=; ЧВН=") + ":00";
	Иначе
		Результат = Формат(Дата, "ДФ=yyyy-MM-ddTЧЧ:мм:сс") + "-" + Формат(-Смещение, "ЧЦ=2; ЧН=; ЧВН=") + ":00";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует представление даты в формате Coordinated Universal Time
//
// Параметры:
//  Дата - ДатаВремя - дата, представление которой необходимо получить.
// 
// Возвращаемое значение:
//  Строка - представление даты в формате Coordinated Universal Time(UTC).
//
Функция ДатаUTC(Дата) Экспорт
	
	Результат = Формат(Дата, "ДФ=yyyy-MM-ddTЧЧ:мм:сс") + "Z";
	
	Возврат Результат;
	
КонецФункции

// Возвращает временную дату, которая будет в дальнейшем преобразована в дату с часовым поясом.
//
// Параметры:
//  Дата - Дата - Дата для преобразования.
// 
// Возвращаемое значение:
//  Дата - Временная дата
//
Функция ВременнаяДата(Дата) Экспорт
	
	Возврат ДобавитьМесяц(Дата, -12 * 1000);
	
КонецФункции

// Устанавливает в ОбъектXDTO вместо даты со смещением временную дату. В дальнейшем временная дата будет заменена датой
// со смещением в результирующем ХМL. Тем самым обходится ограничение ОбъектXDTO, который не позволяет устанавливать в
// свойство дату со смещением.
//
// Параметры:
//  ОбъектXDTO            - ОбъектXDTO - в свойство данного объекта помещается дата.
//  ИмяСвойства           - ИмяСвойства - имя свойства, в которое устанавливается дата.
//  Дата                  - ДатаВремя - дата, которая устанавливается в свойство.
//  ХранилищеВременныхДат - Соответствие - в нем хранится соответствие временных дат и дат со смещением.
//
Процедура УстановитьДатуСЧасовымПоясом(ОбъектXDTO, ИмяСвойства, Дата, ХранилищеВременныхДат) Экспорт
	
	ДатаСЧасовымПоясом = ДатаСЧасовымПоясом(Дата);
	
	ВременнаяДатаUTC = ДатаUTC(ВременнаяДата(Дата));
	
	ОбъектXDTO[ИмяСвойства] = ВременнаяДатаUTC;
	ЛексическоеЗначениеВременнойДаты = ОбъектXDTO.ПолучитьXDTO(ИмяСвойства).ЛексическоеЗначение;
	
	ХранилищеВременныхДат.Вставить(ЛексическоеЗначениеВременнойДаты, ДатаСЧасовымПоясом);
	
КонецПроцедуры

// Заменяет временные даты в тексте сообщения в формате XML на даты со смещением, согласно соответствию.
//
// Параметры:
//  ХранилищеВременныхДат - Соответствие - хранит временные даты, которые нужно заменить на даты со смещением
//  ТекстСообщенияXML     - Строка - текст сообщения, в котором выполняется замена.
// 
// Возвращаемое значение:
//  Строка - ТекстСообщенияXML, в котором выполнена замена.
//
Функция ПреобразоватьВременныеДаты(ХранилищеВременныхДат, Знач ТекстСообщенияXML) Экспорт
	
	Текст = ТекстСообщенияXML;
	
	Для Каждого КлючИЗначение Из ХранилищеВременныхДат Цикл
		
		ВременнаяДата = КлючИЗначение.Ключ;
		Дата = КлючИЗначение.Значение;
		
		Текст = СтрЗаменить(Текст, ВременнаяДата, Дата);
		
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляПечати

// Функция раскладывает переданный массив ссылок в соответствие по типам этих ссылок.
//
//	Параметры:
//		МассивСсылок - Массив - массив ссылок на объекты информационной базы
//  Возвращаемое значение:
//		Соответствие:
//			Ключ - полное имя типа ссылки
//	        Значение - массив ссылок этого типа.
//
Функция СоответствиеМассивовПоТипамОбъектов(МассивСсылок) Экспорт
	
	СоответствиеТипов = Новый Соответствие;
	
	Для Каждого Объект Из МассивСсылок Цикл
		
		ТипОбъекта = Объект.Метаданные().ПолноеИмя();
		ТекущийТипОбъекта = СоответствиеТипов.Получить(ТипОбъекта);
		
		Если ТекущийТипОбъекта = Неопределено Тогда
			СоответствиеТипов.Вставить(ТипОбъекта, Новый Массив);
			ТекущийТипОбъекта = СоответствиеТипов.Получить(ТипОбъекта);
		КонецЕсли;
		ТекущийТипОбъекта.Добавить(Объект);
		
	КонецЦикла;
	
	Возврат СоответствиеТипов;
	
КонецФункции

#КонецОбласти

#Область ОбщиеПредставления

// Заполняет представление регламентного задания (реквизиты ЗаданиеАктивно, ТекстРасписания)
//
// Параметры:
//  Задание				 - РегламентноеЗадание, Неопределено - регламентное задание представление которого необходимо получить
//  ТекстРасписания		 - Строка - представление расписания (выходной)
//  РасписаниеАктивно	 - Булево - использование задания (выходной)
//
Процедура ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройки(Задание, ТекстРасписания, РасписаниеАктивно) Экспорт
	
	РасписаниеАктивно = Ложь;
	
	Если Задание = Неопределено Тогда
		
		ТекстРасписания = НСтр("ru = '<Расписание не задано>'");
		
	Иначе
		
		Если Задание.Использование Тогда
			РасписаниеАктивно = Истина;
			ТекстРасписания = СтрШаблон(НСтр("ru = 'Расписание: %1'"), Строка(Задание.Расписание));
		Иначе
			ТекстРасписания = СтрШаблон(НСтр("ru = 'Расписание (НЕ АКТИВНО): %1'"), Строка(Задание.Расписание));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

