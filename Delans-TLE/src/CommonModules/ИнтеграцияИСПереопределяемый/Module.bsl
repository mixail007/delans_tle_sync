// Универсальные механизмы интеграции ИС (ЕГАИС, ГИСМ, ВЕТИС, ...)

#Область ПрограммныйИнтерфейс

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой необходимо настроить подключаемое оборудование,
//  ПрефиксыЭлементовФормы - Строка - строка имен табличных частей, разделенных запятыми, в которых нужно настроить видимость команд.
//
Процедура НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы = "Товары") Экспорт
	
	
	Возврат;
	
КонецПроцедуры

#Область ФормыДокументовОснований

// Получает параметры интеграции с библиотеками ГосИС по входящему объекту
//
Функция ПараметрыИнтеграцииВФормеПоОбъекту(Объект) Экспорт
	
	Результат = ИнтеграцияИС.ПараметрыИнтеграцииВФорме();
	Возврат Результат;
	
КонецФункции

// Вызывается при формировании текста гиперссылки ГОСИС в форме документа-основания.
// В данной процедуре можно переопределить текст гиперссылки ГОСИС (например ВетИС), формируемый механикой подсистемы.
// Для переопределения текста гиперссылки необходимо поместить этот текст в параметр ТекстНадписи.
//
Процедура ПриОбновленииПоляИнтеграцииВФормеДокументаОснования(Форма, Объект, ТекстНадписи) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ФормированиеПечатныхФорм

// Заполняет структуру параметров возможных получателей печатных форм при отправке по электронной почте.
//
// Параметры:
// 		ПараметрыОтправки - Структура - содержит параметры отправки сформированных печатных форм
// 		ДанныеОбъектовПечати - Массив,Соответствие - данные о печатаемых объектах
// 		КоллекцияПечатныхФорм - ТаблицаЗначений - содержит информацию о формируемых печатных формах.
//
Процедура ЗаполнитьПараметрыОтправки(ПараметрыОтправки, ДанныеОбъектовПечати, КоллекцияПечатныхФорм)  Экспорт
	
	УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыОтправки(ПараметрыОтправки, ДанныеОбъектовПечати, КоллекцияПечатныхФорм);
	
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначенияУТ

// см ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании.
//
Процедура ПроверитьВозможностьВводаНаОсновании(Документ,
	                                           Статус = Неопределено,
	                                           ЕстьОшибкиПроведен = Ложь,
	                                           ЕстьОшибкиСтатус = Ложь,
	                                           МассивДопустимыхСтатусов = Неопределено,
	                                           СоглашениеДоступноВнешнемуПользователю = Неопределено) Экспорт
	
	Если ЕстьОшибкиПроведен Тогда
		
		ТекстОшибки = НСтр("ru='Документ %Документ% не проведен. Ввод на основании непроведенного документа запрещен.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", Документ);
	
		ВызватьИсключение ТекстОшибки;
		
	ИначеЕсли ЕстьОшибкиСтатус Тогда
		
		Если Не ЗначениеЗаполнено(МассивДопустимыхСтатусов) Тогда
			ТекстОшибки = НСтр("ru='Документ %Документ% находится в статусе ""%Статус%"". Ввод на основании запрещен.'");
		ИначеЕсли ТипЗнч(МассивДопустимыхСтатусов) = Тип("Массив") Тогда
			
			Если МассивДопустимыхСтатусов.Количество() = 1 Тогда
				ТекстОшибки = НСтр("ru='Документ %Документ% находится в статусе ""%Статус%"". Ввод на основании разрешен только в статусе ""%СтрокаДопустимыхСтатусов%"".'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СтрокаДопустимыхСтатусов%", МассивДопустимыхСтатусов[0]);
			Иначе
				ТекстОшибки = НСтр("ru='Документ %Документ% находится в статусе ""%Статус%"". Ввод на основании разрешен только в статусах ""%СтрокаДопустимыхСтатусов%"".'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СтрокаДопустимыхСтатусов%", СтрСоединить(МассивДопустимыхСтатусов, """, """));
			КонецЕсли;
			
		КонецЕсли;
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", Документ);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%",   Статус);
	
		ВызватьИсключение ТекстОшибки;
		
	ИначеЕсли Пользователи.ЭтоСеансВнешнегоПользователя() И НЕ СоглашениеДоступноВнешнемуПользователю = Истина Тогда
		
		ТекстОшибки = НСтр("ru='Соглашение документа %Документ% недоступно для работы при самообслуживании. Ввод на основании запрещен.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", Документ);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПраваДоступа

// Проверяет наличие права создания котрагента у текущего пользователя.
//
// Возвращаемое значение:
//  Булево - Истина, если есть право создания контрагента, Ложь в обратном случае.
//
Функция ЕстьПравоСозданияКонтрагента() Экспорт
	
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ВызовыИзБСП

// См. ОбщийМодуль.ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту()
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
