Функция ПолучитьИПодключить() Экспорт
	
	ErrorDescription = "";

	УстановитьПривилегированныйРежим(Истина);

	ДвоичныеДанныеИмяФайлЗагрузкаДокументовФормы = EfsolADLКлиентСервер.DocLoaderFiles_GetTheUpdateFile(ErrorDescription);
	
	Если НЕ ErrorDescription = "" Тогда  
		Возврат Ложь;
	КонецЕсли;	
	
	Попытка	
		ИмяФайлЗагрузкаДокументовФормы = ПолучитьИмяВременногоФайла("epf");
		ДвоичныеДанныеИмяФайлЗагрузкаДокументовФормы.Записать(ИмяФайлЗагрузкаДокументовФормы);
		ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяФайлЗагрузкаДокументовФормы, Ложь);
	Исключение
		УстановитьПривилегированныйРежим(Ложь);
		Возврат Ложь;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Истина;	

КонецФункции

Процедура ПолучитьСписокДокументовКЗагрузке() Экспорт
	
	Попытка 
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрСведенийОбластиДанных.ОбластьДанныхВспомогательныеДанные
		|ИЗ
		|	РегистрСведений.ОбластиДанных КАК РегистрСведенийОбластиДанных";
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Выборка.ОбластьДанныхВспомогательныеДанные);
			ErrorDescription = "";
			AccountID = Константы.EFSOL_AccountID.Получить();
			Если AccountID <> "" Тогда
				
				ПараметрыСеанса.EfsolТокен = "4BA62CD2-DF5F-4283-A7E6-6B741F8F4AC6";
				МассивИД = EfsolADLКлиентСервер.AccountEDocuments_GetListForАutoloadingDelans(AccountID, ErrorDescription);
				Если ErrorDescription <> "" Тогда
					Возврат;
				КонецЕсли;
				Если МассивИД.Количество() > 0 Тогда
					ПолучитьДокументы(МассивИД);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	     ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь)
	
	Исключение
		ЗаписьЖурналаРегистрации("EFSOL_Автозагрузка", УровеньЖурналаРегистрации.Ошибка, , ,ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ПолучитьДокументы(МассивИД)
	
	ИмяШаблона = "БухгалтерияПредприятия 3.0";	
	
	//Если СтрокаСоединенияИнформационнойБазы() = "Srvr=""delans-iis-dev"";Ref=""delansbp"";" Тогда
	//	ИДБазыДанныхПользователя = "d2ba505c-8812-46fb-920e-fa3b3deb9d73"; //сервер
	//Иначе
	//	ИДБазыДанныхПользователя = "f6d4a7a5-f30a-4579-acfb-9dbfb07337f5"; //локалка
	//КонецЕсли;
	
	ИДБазыДанныхПользователя = Константы.EFSOL_ИДБазыДанных.Получить();
	
	СтруктураТиповДокументов = ЗаполнитьСтруктуруТиповДокументов();
	
	ТаблицаВходящихДокументов = ЗаполнитьТаблицаВходящихДокументов(СтруктураТиповДокументов, ИмяШаблона);
	
	ТаблицаНастроек = ТаблицаНастроекЗаполнить(ИмяШаблона); 	
	
	СтруктураОписанийДокументов = СоздатьСтруктуруОписанийДокументов(ИмяШаблона);
	
	ESDLСтруктураОПФ = ЗаполнитьТаблицуОПФ();
	
	Для Каждого ИД Из МассивИД Цикл
		
		Попытка
			
			Документ = Новый Структура("ДокументИД, СсылкаДокумент, СсылкаИД, СсылкаТип, Шапка, ТЧ, ДатаПолучения, ВидДокумента, ТипРаспознан, ЗначениеНастроек, Номер, Дата, Контрагент, Организация, Сумма, Исходящий, Атрибутирован, Статус");
			
			Документ.ДокументИД = ИД;
			ПараметрыСеанса.EfsolТокен = "4BA62CD2-DF5F-4283-A7E6-6B741F8F4AC6";
			ErrorDescription = "";
			СтруктураИзменяемыхПараметров = Новый Структура("DocumentID, АutoloadingDelans", ИД, XMLСтрока(Ложь));
			Если ПолучитьДокумент(Документ, СтруктураТиповДокументов, ТаблицаВходящихДокументов, ТаблицаНастроек, СтруктураОписанийДокументов, ИмяШаблона, ESDLСтруктураОПФ) Тогда
				СтруктураСообщений = Новый Структура();
				СтруктураСообщений.Вставить("ИмяШаблона", ИмяШаблона); 
				РабочиеПараметры = Новый Структура("СоответствиеСтатусовДокументов, НовыеЭлементы", Новый Соответствие(), Неопределено);
				Результат = ПроверкаГотовностиКЗагрузкеИПоискДублей(Документ, СтруктураСообщений);
				Если Результат.Готов Тогда
					СоздатьНовыеЭлементыСправочников(Документ, ESDLСтруктураОПФ, ИмяШаблона, СтруктураОписанийДокументов);
					Загружен = ЗагрузитьДокументШаблон(Документ, РабочиеПараметры, СтруктураСообщений, ИмяШаблона);
					Если Загружен Тогда
						ErrorDescription = "";
						ПараметрыСеанса.EfsolТокен = "4BA62CD2-DF5F-4283-A7E6-6B741F8F4AC6";
						Если НЕ EfsolADLКлиентСервер.AccountEDocumentLinks_Аdd(ИД, Документ.СсылкаИД, Документ.СсылкаТип, ИДБазыДанныхПользователя, Строка(Документ.СсылкаДокумент), ErrorDescription) Тогда
							ЗаписьЖурналаРегистрации("EFSOL_Автозагрузка", УровеньЖурналаРегистрации.Ошибка, , ,"AccountEDocumentLinks_Аdd_" + ErrorDescription);
						КонецЕсли;
					Иначе
						Рез = EfsolADLКлиентСервер.AccountEDocuments_SetDocumentProperties(СтруктураИзменяемыхПараметров, ErrorDescription);
					КонецЕсли;
				Иначе
					Рез = EfsolADLКлиентСервер.AccountEDocuments_SetDocumentProperties(СтруктураИзменяемыхПараметров, ErrorDescription);
				КонецЕсли;	
			Иначе
				Рез = EfsolADLКлиентСервер.AccountEDocuments_SetDocumentProperties(СтруктураИзменяемыхПараметров, ErrorDescription);
			КонецЕсли;
			
		Исключение
			ЗаписьЖурналаРегистрации("EFSOL_Автозагрузка", УровеньЖурналаРегистрации.Ошибка, , ,ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
		
КонецПроцедуры

// Функция выполняет создание  и заполнение нового документа (загрузку документа)
//
// Параметры:
//  ИД - Строка, уникальный идентификатор документа из контейнера данных,
//	Ссылка - ссылка на существующий документ контрагента с заданными входящими датой и номером 
//					(если определена, документ будет перезаписан)
//	СтруктураСообщений - тип "Структура", служит для сохранения сообщений пользователю 
//
// Возвращаемое значение:
//	булево
//
Функция ЗагрузитьДокументШаблон(Документ, РабочиеПараметры, СтруктураСообщений, ИмяШаблона) Экспорт
	
	Ссылка = Документ.СсылкаДокумент;
	
	СтрокаШапки = Документ.Шапка;
	
	СтрокаШапки.Комментарий.ИтоговоеЗначение = "EFSOL: Загрузка документов (автоматический режим)";

	Если Документ.ВидДокумента = "ПТУ" ИЛИ Документ.ВидДокумента = "РТУ" ИЛИ Документ.ВидДокумента = "ЗП" ИЛИ Документ.ВидДокумента = "ПН" ИЛИ Документ.ВидДокумента = "РН" ИЛИ Документ.ВидДокумента = "ПП"  ИЛИ Документ.ВидДокумента = "АВР" ИЛИ Документ.ВидДокумента = "СП" ИЛИ Документ.ВидДокумента = "ПТ" ИЛИ Документ.ВидДокумента = "РТ" Тогда
		
		Если Документ.ВидДокумента = "ПТУ" Тогда
			ВидДокумента = "ПоступлениеТоваровУслуг";
		ИначеЕсли Документ.ВидДокумента = "РТУ" тогда
			ВидДокумента = "РеализацияТоваровУслуг";
		ИначеЕсли Документ.ВидДокумента = "ЗП" Тогда 
			ВидДокумента = "ЗаказПоставщику";
		ИначеЕсли Документ.ВидДокумента = "ПН" Тогда 
			ВидДокумента = "ПриходнаяНакладная";
		ИначеЕсли Документ.ВидДокумента = "РН" Тогда 
			ВидДокумента = "РасходнаяНакладная";
		ИначеЕсли Документ.ВидДокумента = "ПП" Тогда 
			ВидДокумента = "ПлатежноеПоручение";
		ИначеЕсли Документ.ВидДокумента = "АВР" Тогда
			ВидДокумента = "АктВыполненныхРабот"
		ИначеЕсли Документ.ВидДокумента = "СП" Тогда
			ВидДокумента = "СчетНаОплатуПоставщика"
		ИначеЕсли Документ.ВидДокумента = "ПТ" Тогда
			ВидДокумента = "ПоступлениеТоваров"
		ИначеЕсли Документ.ВидДокумента = "РТ" Тогда
			ВидДокумента = "РеализацияТоваров"
		КонецЕсли;
		
		Если Ссылка = Неопределено Тогда
			НовыйДокументОбъект = Документы[ВидДокумента].СоздатьДокумент();
		Иначе
			НовыйДокументОбъект = Ссылка.ПолучитьОбъект() ;
		КонецЕсли;
		
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			
			ПараметрыЗаполнения = Новый Массив;
			ПараметрыЗаполнения.Добавить(НовыйДокументОбъект);
			Попытка
				//Выполнить("ЗаполнениеДокументов.Заполнить(ДокументОбъект)");		
				РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации("ЗаполнениеДокументов.Заполнить", ПараметрыЗаполнения);
			Исключение
				//Выполнить("ЗаполнениеДокументовВызовСервера.Заполнить(ДокументОбъект)");		
				РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации("ЗаполнениеДокументовВызовСервера.Заполнить", ПараметрыЗаполнения);
			КонецПопытки;
			
			Если Документ.ВидДокумента = "РТУ" Тогда
				//Если Метаданные.Документы["РеализацияТоваровУслуг"].СтандартныеРеквизиты["Номер"] <> неопределено И СтрокаШапки["НомерВходящегоДокумента"] <> неопределено Тогда
				//	НовыйДокументОбъект["Номер"] = СтрокаШапки["НомерВходящегоДокумента"].ИтоговоеЗначение;
				//КонецЕсли;
				НовыйДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
				НовыйДокументОбъект.ДокументБезНДС = НЕ Документ.Шапка.УчитыватьНДС.ИтоговоеЗначение;
			ИначеЕсли Документ.ВидДокумента = "ПП" Тогда	
				НовыйДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
			Иначе
				Если НЕ Документ.ВидДокумента = "СП" Тогда
					НовыйДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
				КонецЕсли;
				Попытка
					НовыйДокументОбъект.НДСНеВыделять = НЕ Документ.Шапка.УчитыватьНДС.ИтоговоеЗначение; 
					НовыйДокументОбъект.НДСВключенВСтоимость = Документ.Шапка.СуммаВключаетНДС.ИтоговоеЗначение;
				Исключение
				КонецПопытки;
			КонецЕсли;
			Если НЕ Документ.ВидДокумента = "ПП" И НЕ Документ.ВидДокумента = "СП" Тогда
				Попытка
					ОсновнойСклад = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме("БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(""ОсновнойСклад"", Параметры)", Пользователи.ТекущийПользователь());
					НовыйДокументОбъект.Склад = ОсновнойСклад;
				Исключение
				КонецПопытки;
			КонецЕсли;
		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			
			//Заполнение реквизитов по умолчанию
			НовыйДокументОбъект.Менеджер = Пользователи.ТекущийПользователь();
			Если ЗначениеЗаполнено(НовыйДокументОбъект.Менеджер) Тогда
				Если Лев(Метаданные.Версия, 4) = "11.2" ИЛИ Лев(Метаданные.Версия, 4) = "11.3" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
					НовыйДокументОбъект.Подразделение = НовыйДокументОбъект.Менеджер.Подразделение;
				Иначе 
					НовыйДокументОбъект.Подразделение = НовыйДокументОбъект.Менеджер.ТекущееПодразделение;
				КонецЕсли;
			КонецЕсли;
			НовыйДокументОбъект.ФормаОплаты = Перечисления.ФормыОплаты.ПустаяСсылка();
			
			ОсновнойСклад = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме("БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(""ОсновнойСклад"", Параметры)", НовыйДокументОбъект.Менеджер);
			НовыйДокументОбъект.Склад = ОсновнойСклад; 
			НовыйДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
			Если Документ.ВидДокумента = "ПТУ" Тогда
				НовыйДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
				//НовыйДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
				НовыйДокументОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;			
			ИначеЕсли Документ.ВидДокумента = "РТУ" Тогда
				НовыйДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
				НовыйДокументОбъект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.КПредоплате;			
			ИначеЕсли Документ.ВидДокумента = "ЗП" Тогда
				НовыйДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
				//НовыйДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
				НовыйДокументОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
				НовыйДокументОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Согласован;
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Приоритеты.Ссылка                                     
				|ИЗ
				|	Справочник.Приоритеты КАК Приоритеты
				|ГДЕ
				|	НЕ Приоритеты.ПометкаУдаления
				|
				|УПОРЯДОЧИТЬ ПО
				|	Приоритеты.Наименование";
				РезультатЗапроса = Запрос.Выполнить();
				Выборка = РезультатЗапроса.Выбрать();
				Если Выборка.Следующий() Тогда
					НовыйДокументОбъект.Приоритет = Выборка.Ссылка;
				КонецЕсли;
				СтрокаШапки.СуммаДокумента.ИтоговоеЗначение = СтрокаШапки.Всего.ИтоговоеЗначение;
				Если СтрокаШапки.Свойство("СуммаВзаиморасчетов") Тогда
					СтрокаШапки.СуммаВзаиморасчетов.ИтоговоеЗначение = СтрокаШапки.Всего.ИтоговоеЗначение;
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
			
			Если Документ.ВидДокумента = "ПН" ИЛИ Документ.ВидДокумента = "РН" Тогда
				Если Документ.ВидДокумента = "ПН" Тогда
					СтратегияЗаполнения = Новый Соответствие;
					СтратегияЗаполнения[Тип("Структура")] = "ЗаполнитьПоСтруктуре";
					//СтратегияЗаполнения[Тип("ДокументСсылка.РасходнаяНакладная")] = "ЗаполнитьПоРасходнойНакладной";
					//СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПокупателя")] = "ЗаполнитьПоЗаказуПокупателя";
					//СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПоставщику")] = "ЗаполнитьПоЗаказуПоставщику";
					//СтратегияЗаполнения[Тип("ДокументСсылка.ПриходныйОрдер")] = "ЗаполнитьПоПриходномуОрдеру";
					//СтратегияЗаполнения[Тип("ДокументСсылка.СчетНаОплатуПоставщика")] = "ЗаполнитьПоСчетуНаОплатуПоставщика";
					//СтратегияЗаполнения[Тип("ДокументСсылка.СчетНаОплату")] = "ЗаполнитьПоСчетуНаОплатуВозврат";
					//СтратегияЗаполнения[Тип("ДокументСсылка.ЧекККМ")] = "ЗаполнитьПоЧекуККМ";
					//СтратегияЗаполнения[Тип("ДокументСсылка.ТоварноТранспортнаяНакладнаяЕГАИС")] = "ЗаполнитьПоНакладнойЕГАИС";
					ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика;
				ИначеЕсли Документ.ВидДокумента = "РН" Тогда
					СтратегияЗаполнения = Новый Соответствие;
					СтратегияЗаполнения[Тип("Структура")] = "ЗаполнитьПоСтруктуре";
					//СтратегияЗаполнения[Тип("ДокументСсылка.ПриходнаяНакладная")] = "ЗаполнитьПоПриходнойНакладной";
					//СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПокупателя")] = "ЗаполнитьПоЗаказуПокупателя";
					//СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПоставщику")] = "ЗаполнитьПоЗаказуПоставщику";
					//СтратегияЗаполнения[Тип("ДокументСсылка.СчетНаОплату")] = "ЗаполнитьПоСчетуНаОплату";
					//СтратегияЗаполнения[Тип("ДокументСсылка.ПеремещениеЗапасов")] = "ЗаполнитьПоПеремещениюЗапасов";
					//СтратегияЗаполнения[Тип("ДокументСсылка.СборкаЗапасов")] = "ЗаполнитьПоСборкеЗапасов";
					ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю;
				КонецЕсли;
				ДанныеЗаполнения = Неопределено;
				ПараметрыЗаполнения = Новый Массив;
				ПараметрыЗаполнения.Добавить(НовыйДокументОбъект);
				ПараметрыЗаполнения.Добавить(ДанныеЗаполнения);
				ПараметрыЗаполнения.Добавить(СтратегияЗаполнения);
				Попытка
					РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации("ЗаполнениеОбъектов.ЗаполнитьДокумент", ПараметрыЗаполнения);
				Исключение
					РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации("ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент", ПараметрыЗаполнения);
				КонецПопытки;
				НовыйДокументОбъект.ВидОперации = ВидОперации;
			КонецЕсли;
			//ЗначениеНастройки = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме("УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), ""ОсновнойСклад"")");
			//ОсновнойСклад = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
			//НовыйДокументОбъект.Склад = ОсновнойСклад;
		КонецЕсли;
		
		Если ИмяШаблона = "Розница 2.2" И (Документ.Шапка.УчитыватьНДС.ИтоговоеЗначение=Истина)  Тогда
			НовыйДокументОбъект.УчитыватьНДС=Истина;	
		КонецЕсли;
		
		
		// Заполнение шапки
		НовыйДокументОбъект.Дата = СтрокаШапки.Дата.ИтоговоеЗначение;
		Для Каждого СтруктураРеквизита Из Документ.Шапка Цикл
			Если Метаданные.Документы[ВидДокумента].Реквизиты.Найти(СтруктураРеквизита.Ключ) <> неопределено Тогда
				Если (ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0") И СтруктураРеквизита.Ключ = "Контрагент" Тогда 
					Если НЕ СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение.пустая() И НЕ СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение.Партнер.Пустая() Тогда
						Если НЕ Документ.ВидДокумента = "РТУ" И НЕ СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение.Партнер.Поставщик Тогда
							ПартнерОбъект = СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение.Партнер.ПолучитьОбъект();
							ПартнерОбъект.Поставщик = Истина;
							ЗаписатьОбъект(ПартнерОбъект);
						ИначеЕсли Документ.ВидДокумента = "РТУ" И НЕ СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение.Партнер.Клиент Тогда
							ПартнерОбъект = СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение.Партнер.ПолучитьОбъект();
							ПартнерОбъект.Клиент = Истина;
							ЗаписатьОбъект(ПартнерОбъект);
						КонецЕсли;
					КонецЕсли;
					НовыйДокументОбъект[СтруктураРеквизита.Ключ] = СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение; 					
					НовыйДокументОбъект.Партнер = СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение.Партнер;
					
					
					Если Лев(Метаданные.Версия, 4) = "11.3" И НЕ Документ.ВидДокумента = "ЗП" Тогда
						
						Курс = 0;
						Кратность = 0;
						ПараметрыЗаполнения = Новый Массив;
						ПараметрыЗаполнения.Добавить(Курс);
						ПараметрыЗаполнения.Добавить(Кратность);
						ПараметрыЗаполнения.Добавить(СтрокаШапки.Валюта.ИтоговоеЗначение);
						ПараметрыЗаполнения.Добавить(СтрокаШапки.ВалютаВзаиморасчетов.ИтоговоеЗначение);
						
						РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации("РаботаСКурсамиВалютУТ.ЗаполнитьКурсКратностьПоУмолчанию", ПараметрыЗаполнения);
						
						НовыйДокументОбъект.Курс = ПараметрыЗаполнения.Получить(0);
						НовыйДокументОбъект.Кратность = ПараметрыЗаполнения.Получить(1);
						
					КонецЕсли;
					
				ИначеЕсли СтруктураРеквизита.Ключ = "НалогообложениеНДС" Тогда
					Если СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение = "Закупка не облагается НДС"
						ИЛИ СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение = "Продажа не облагается НДС" Тогда
						НовыйДокументОбъект[СтруктураРеквизита.Ключ] = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
					ИначеЕсли СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение = "Закупка облагается НДС"
						ИЛИ СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение = "Продажа облагается НДС" Тогда
						НовыйДокументОбъект[СтруктураРеквизита.Ключ] = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
					ИначеЕсли СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение = "Налоговый агент по НДС" Тогда
						НовыйДокументОбъект[СтруктураРеквизита.Ключ] = Перечисления.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС;
					ИначеЕсли СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение = "Продажа на экспорт (ставка 0%)" Тогда
						НовыйДокументОбъект[СтруктураРеквизита.Ключ] = Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт;
					ИначеЕсли СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение = "Продажа облагается ЕНВД" Тогда
						НовыйДокументОбъект[СтруктураРеквизита.Ключ] = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД;
					КонецЕсли;
				ИначеЕсли (ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0") И СтруктураРеквизита.Ключ = "Договор" Тогда
					Если НЕ СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение.Пустая() Тогда
						ДоговорКонтрагентаОбъект = СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение.ПолучитьОбъект();
						ДоговорКонтрагентаОбъект.Партнер = НовыйДокументОбъект.Партнер;
						ДоговорКонтрагентаОбъект.Записать();
					КонецЕсли;
					НовыйДокументОбъект[СтруктураРеквизита.Ключ] = СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение;
				Иначе 					
					НовыйДокументОбъект[СтруктураРеквизита.Ключ] = СтрокаШапки[СтруктураРеквизита.Ключ].ИтоговоеЗначение; 					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		//Заполнение банковских счетов
		Если (ИмяШаблона = "УправлениеНебольшойФирмой 1.6" И Документ.ВидДокумента = "ПП") ИЛИ ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			Если Документ.ВидДокумента = "ПП" Тогда	
				НовыйДокументОбъект.СчетКонтрагента = СтрокаШапки.СчетКонтрагента.ИтоговоеЗначение;
				Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
					НовыйДокументОбъект.СчетОрганизации = СтрокаШапки.БанковскийСчет.ИтоговоеЗначение;        
				ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
					НовыйДокументОбъект.БанковскийСчет  = СтрокаШапки.БанковскийСчет.ИтоговоеЗначение;
				КонецЕсли;
			ИначеЕсли Документ.ВидДокумента = "СП" Тогда
				НовыйДокументОбъект.БанковскийСчетКонтрагента= СтрокаШапки.СчетКонтрагента.ИтоговоеЗначение;
			КонецЕсли;
			
		КонецЕсли;
		
		// Заполнение табличных частей
		Если Документ.ТЧ.Количество() > 0 Тогда
			Если НЕ ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
				НовыйДокументОбъект.Товары.Очистить();
				Если ИмяШаблона = "БухгалтерияПредприятия 3.0" И НЕ Документ.ВидДокумента = "СП" Тогда
					НовыйДокументОбъект.Услуги.Очистить();
				КонецЕсли;
			Иначе
				Если Документ.ВидДокумента = "АВР" Тогда
					НовыйДокументОбъект.РаботыИУслуги.Очистить();
				Иначе
					НовыйДокументОбъект.Запасы.Очистить();
					Если Документ.ВидДокумента = "ПН" Тогда
						НовыйДокументОбъект.Расходы.Очистить();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			К = 1;
			Для каждого СтруктураСтрокиТЧ Из Документ.ТЧ Цикл
				СтрокаТЧ = СтруктураСтрокиТЧ.Значение; 
				Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
					Если Документ.ВидДокумента = "СП" Тогда
						ИмяТабличнойЧасти = "Товары";
					Иначе
						ИмяТабличнойЧасти = ?(СтрокаТЧ.Услуга.ИтоговоеЗначение, "Услуги", "Товары");
					КонецЕсли;
				ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
					ИмяТабличнойЧасти = "Товары";
					СтрокаТЧ.СуммаСНДС.ИтоговоеЗначение = СтрокаТЧ.Всего.ИтоговоеЗначение;
				ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
					Если Документ.ВидДокумента = "ПН" Тогда
						ИмяТабличнойЧасти = ?(СтрокаТЧ.Услуга.ИтоговоеЗначение, "Расходы", "Запасы");
					ИначеЕсли Документ.ВидДокумента = "АВР" Тогда
						ИмяТабличнойЧасти = "РаботыИУслуги";
					Иначе
						ИмяТабличнойЧасти = "Запасы";	
					КонецЕсли;		
				КонецЕсли;
				НовСтрокаДокумента = НовыйДокументОбъект[ИмяТабличнойЧасти].Добавить();
				//Если ИмяШаблона = "УправлениеТорговлей 11.1" И Документ.ВидДокумента = "ПТУ" Тогда
				//	Если Лев(Метаданные.Версия, 4) = "11.2" ИЛИ Лев(Метаданные.Версия, 3) = "2.0" Тогда
				//		НовСтрокаДокумента.УдалитьНомерСтрокиДокументаПоставщика = К;
				//	Иначе
				//		НовСтрокаДокумента.НомерСтрокиДокументаПоставщика = К;
				//	КонецЕсли;
				//	НовСтрокаДокумента.Количество = НовСтрокаДокумента.КоличествоУпаковок;
				//	К = К + 1;
				//КонецЕсли;
				Для Каждого Элемент Из СтруктураСтрокиТЧ.Значение Цикл
					Если Метаданные.Документы[ВидДокумента].ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти(Элемент.Ключ) <> неопределено Тогда
						НовСтрокаДокумента[Элемент.Ключ] = СтрокаТЧ[Элемент.Ключ].ИтоговоеЗначение;
					КонецЕсли;
				КонецЦикла;
				Если ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
					НовСтрокаДокумента.Количество = НовСтрокаДокумента.КоличествоУпаковок;
					Если ИмяШаблона = "УправлениеТорговлей 11.1" Тогда
						НовСтрокаДокумента.Склад = Документ.Шапка.Склад.ИтоговоеЗначение;	
					КонецЕсли;
				КонецЕсли;
				Если ИмяТабличнойЧасти = "Услуги" Тогда
					НовСтрокаДокумента.Содержание = НовСтрокаДокумента.Номенклатура.НаименованиеПолное;
					Если Документ.ВидДокумента = "ПТУ" Тогда
						НовСтрокаДокумента.СчетЗатрат = СтрокаТЧ.СчетУчета.ИтоговоеЗначение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Заполнение тип цен
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" И Документ.ВидДокумента = "ПТУ" Тогда
			НовыйДокументОбъект.ТипЦен =  Документ.Шапка.ДоговорКонтрагента.ИтоговоеЗначение.ТипЦен;
		КонецЕсли;
	  
		ДокументОбъектПередЗаписью(НовыйДокументОбъект);
		
		Попытка
			НовыйДокументОбъект.Записать(); 	
		Исключение
			//О = ОписаниеОшибки();
			Попытка
				НовыйДокументОбъект.УстановитьНовыйНомер(""); 
				НовыйДокументОбъект.Записать();
			Исключение
				ТекстСообщения = "Ошибка при записи документа:" + ОписаниеОшибки();
				СтруктураСообщений.Вставить("ТекстСообщения", ТекстСообщения );
				Возврат Ложь;
			КонецПопытки;		
		КонеЦПопытки;
		
		СоздаватьСФ = Неопределено;
		Документ.ЗначениеНастроек.Свойство("СоздаватьСФ", СоздаватьСФ);
		Если Не СоздаватьСФ = Неопределено И СоздаватьСФ.Значение Тогда
			Попытка
				Если Документ.ВидДокумента = "ПТУ" ИЛИ Документ.ВидДокумента = "ПН" ИЛИ Документ.ВидДокумента = "ПТ" Тогда
					СчетФактураВид = "СчетФактураПолученный";
				ИначеЕсли Документ.ВидДокумента = "РН" Тогда
					СчетФактураВид = "СчетФактура";
				Иначе
					СчетФактураВид = "СчетФактураВыданный";
				КонецЕсли;
				Если СчетФактураВид = "СчетФактураВыданный" Тогда
					Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
						ВидыСчетовФактур = Новый Массив;
						ВидыСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
						ВидыСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
						Запрос = Новый Запрос;
						Запрос.УстановитьПараметр("ВидыСчетовФактур",  ВидыСчетовФактур);
						Запрос.УстановитьПараметр("ДокументОснование", НовыйДокументОбъект.Ссылка);
						Запрос.Текст = 
						"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						|	ДокументыОснования.Ссылка КАК СчетФактура
						|ИЗ
						|	Документ.СчетФактураВыданный.ДокументыОснования КАК ДокументыОснования
						|ГДЕ
						|	(ДокументыОснования.ДокументОснование = &ДокументОснование
						|			ИЛИ ДокументыОснования.Ссылка = &ДокументОснование)
						|	И НЕ ДокументыОснования.Ссылка.ПометкаУдаления
						|	И ДокументыОснования.Ссылка.ВидСчетаФактуры В(&ВидыСчетовФактур)";
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() Тогда
							СчетФактураПодч = Выборка.СчетФактура;
						КонецЕсли;
					ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
						Запрос = Новый Запрос("
						|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						|	СчетФактураВыданный.Ссылка КАК Ссылка
						|ИЗ
						|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
						|ГДЕ
						|	СчетФактураВыданный.ДокументОснование = &Основание
						|	И (НЕ СчетФактураВыданный.ПометкаУдаления)
						|	И (СчетФактураВыданный.Организация = &Организация
						|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
						|
						|УПОРЯДОЧИТЬ ПО
						|	СчетФактураВыданный.НомерИсправления УБЫВ
						|");
						Запрос.УстановитьПараметр("Основание",   НовыйДокументОбъект.Ссылка);
						Запрос.УстановитьПараметр("Организация", НовыйДокументОбъект.Организация);
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() Тогда
							СчетФактураПодч = Выборка.Ссылка;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
						ВидыСчетовФактур = Новый Массив;
						ВидыСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыПолученного.НаПоступление);
						ВидыСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыПолученного.Корректировочный);
						Запрос = Новый Запрос;
						Запрос.УстановитьПараметр("ВидыСчетовФактур",  ВидыСчетовФактур);
						Запрос.УстановитьПараметр("ДокументОснование", НовыйДокументОбъект.Ссылка);
						Запрос.Текст = 
						"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						|	ДокументыОснования.Ссылка КАК СчетФактура
						|ИЗ
						|	Документ.СчетФактураПолученный.ДокументыОснования КАК ДокументыОснования
						|ГДЕ
						|	(ДокументыОснования.ДокументОснование = &ДокументОснование
						|			ИЛИ ДокументыОснования.Ссылка = &ДокументОснование)
						|	И НЕ ДокументыОснования.Ссылка.ПометкаУдаления
						|	И ДокументыОснования.Ссылка.ВидСчетаФактуры В(&ВидыСчетовФактур)";
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() Тогда
							СчетФактураПодч = Выборка.СчетФактура;
						КонецЕсли;
					ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
						Запрос = Новый Запрос("
						|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						|	ТаблицаОснований.Ссылка КАК Ссылка
						|ИЗ
						|	Документ.СчетФактураПолученный.ДокументыОснования КАК ТаблицаОснований
						|ГДЕ
						|	ТаблицаОснований.Ссылка.ПометкаУдаления = ЛОЖЬ
						|	И ТаблицаОснований.ДокументОснование = &Основание
						|	И (ТаблицаОснований.Ссылка.Организация = &Организация
						|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
						|
						|УПОРЯДОЧИТЬ ПО
						|	ТаблицаОснований.Ссылка.НомерИсправления УБЫВ
						|");
						Запрос.УстановитьПараметр("Основание",   НовыйДокументОбъект.Ссылка);
						Запрос.УстановитьПараметр("Организация", НовыйДокументОбъект.Организация); 
						РезультатЗапроса = Запрос.Выполнить(); 	
						ТаблицаСчетовФактур = РезультатЗапроса.Выгрузить();
						Для Каждого Элемент из ТаблицаСчетовФактур Цикл
							СчетФактураПодч = Элемент.Ссылка;
						КонецЦикла;
					ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
						Полученный = (СчетФактураВид = "СчетФактураПолученный");
						ПараметрыЗаполнения = Новый Структура("ДокументОснование, Полученный", НовыйДокументОбъект.Ссылка, Полученный);
						СчетФактураПодчСтруктура = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме("УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(Параметры.ДокументОснование, Параметры.Полученный)", ПараметрыЗаполнения);
						Если СчетФактураПодчСтруктура = Неопределено Тогда
							СчетФактураПодч = Неопределено;
						Иначе 
							СчетФактураПодч = СчетФактураПодчСтруктура.Ссылка;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если СчетФактураПодч = Неопределено Тогда
					СчетФактураОбъект = Документы[СчетФактураВид].СоздатьДокумент();
				Иначе
					СчетФактураОбъект = СчетФактураПодч.ПолучитьОбъект(); 
				КонецЕсли;
				Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
					СчетФактураОбъект.Заполнить(НовыйДокументОбъект.Ссылка); 
					Если СчетФактураВид = "СчетФактураПолученный" Тогда
						СчетФактураОбъект.НомерВходящегоДокумента = НовыйДокументОбъект.НомерВходящегоДокумента;
						СчетФактураОбъект.ДатаВходящегоДокумента = НовыйДокументОбъект.ДатаВходящегоДокумента;
					КонецЕсли;
					СчетФактураОбъект.Дата = НовыйДокументОбъект.Дата + 1;
					СчетФактураОбъект.Записать();
				ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
					Если СчетФактураВид = "СчетФактураВыданный" Тогда
						СтруктураЗаполнения = Новый Структура("Дата, ДокументОснование, Исправление, Корректировочный, Организация", 
						(ТекущаяДата() + 1),
						НовыйДокументОбъект.Ссылка,
						Ложь,
						Ложь,
						НовыйДокументОбъект.Организация);
						СчетФактураОбъект.Заполнить(СтруктураЗаполнения);
					Иначе
						СчетФактураОбъект.Заполнить(НовыйДокументОбъект.Ссылка);
					КонецЕсли;
					
					Если СчетФактураВид = "СчетФактураПолученный" Тогда
						СчетФактураОбъект.Номер = НовыйДокументОбъект.НомерВходящегоДокумента;
						СчетФактураОбъект.ДатаСоставления = НовыйДокументОбъект.ДатаВходящегоДокумента;
					КонецЕсли;
					СчетФактураОбъект.Дата = НовыйДокументОбъект.Дата + 1;
					СчетФактураОбъект.Записать();
				ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
					Если СчетФактураВид = "СчетФактураПолученный" Тогда
						СчетФактураОбъект.ЗаполнитьНаОснованииПриходнойНакладной(НовыйДокументОбъект.Ссылка);
						СчетФактураОбъект.НомерВходящегоДокумента = НовыйДокументОбъект.НомерВходящегоДокумента;
						СчетФактураОбъект.ДатаВходящегоДокумента = НовыйДокументОбъект.ДатаВходящегоДокумента;
					Иначе
						ПараметрыЗаполнения = Новый Массив;
						ПараметрыЗаполнения.Добавить(СчетФактураОбъект);
						ПараметрыЗаполнения.Добавить(НовыйДокументОбъект.Ссылка);
						ПараметрыЗаполнения.Добавить("ОбработчикЗаполнения");
						РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации("ЗаполнениеОбъектов.ЗаполнитьДокумент", ПараметрыЗаполнения);
					КонецЕсли;
					СчетФактураОбъект.Дата = НовыйДокументОбъект.Дата + 1;
					СчетФактураОбъект.Записать();
				КонецЕсли;
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				//СообщениеПользователю = Новый СообщениеПользователю;
				//СообщениеПользователю.Текст = "Не создана счетФактура!";
				//СообщениеПользователю.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
				//СообщениеПользователю.Сообщить();

			КонецПопытки;
		КонецЕсли;
		
		Документ.СсылкаДокумент = НовыйДокументОбъект.Ссылка;
		
	ИначеЕсли Документ.ВидДокумента = "КФЛ" Тогда
		
		Фамилия = СтрокаШапки.Фамилия.ИтоговоеЗначение;
		Имя = СтрокаШапки.Имя.ИтоговоеЗначение;
		Отчество = СтрокаШапки.Отчество.ИтоговоеЗначение;
		Наименование = "" + Фамилия + " " + Имя + " " + Отчество; 

		Если Ссылка = Неопределено Тогда
			КарточкаОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
		Иначе
			КарточкаОбъект = Ссылка.ПолучитьОбъект();
		КонецЕсли;
		
		КарточкаОбъект.Наименование = Наименование;
		КарточкаОбъект.ДатаРождения = СтрокаШапки.ДатаРождения.ИтоговоеЗначение;
		КарточкаОбъект.Пол = СтрокаШапки.Пол.ИтоговоеЗначение;
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			КарточкаОбъект.ФИО = Наименование;
			КарточкаОбъект.МестоРождения = "0," + СтрокаШапки.МестоРождения.ИтоговоеЗначение;
		КонецЕсли;
		
		Попытка
			КарточкаОбъект.Записать();
		Исключение
			ТекстСообщения = "Ошибка при записи документа:" + ОписаниеОшибки();
			СтруктураСообщений.Вставить("ТекстСообщения", ТекстСообщения );
			Возврат Ложь;
		КонецПопытки;
		
		// запись в регистр паспортных данных
		ЗаписьПаспорт = РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи();
		ЗаписьПаспорт.Физлицо = КарточкаОбъект.Ссылка;
		ЗаписьПаспорт.Период = '19000101';
		ЗаписьПаспорт.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ;
		ЗаписьПаспорт.ДатаВыдачи = СтрокаШапки.ДатаВыдачи.ИтоговоеЗначение;
		ЗаписьПаспорт.КемВыдан = СтрокаШапки.КемВыдан.ИтоговоеЗначение;
		ЗаписьПаспорт.КодПодразделения = СтрокаШапки.КодПодразделения.ИтоговоеЗначение;
		ЗаписьПаспорт.Номер = СтрокаШапки.НомерПаспорта.ИтоговоеЗначение;
		ЗаписьПаспорт.Серия = СтрокаШапки.СерияПаспорта.ИтоговоеЗначение;
		ЗаписьПаспорт.Записать(Истина);
		
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			
			// запись в регистр гражданство
			ЗаписьРоссия = РегистрыСведений.ГражданствоФизическихЛиц.СоздатьМенеджерЗаписи();
			ЗаписьРоссия.ФизическоеЛицо = КарточкаОбъект.Ссылка;
			ЗаписьРоссия.Период = '19000101';
			ЗаписьРоссия.Страна = Справочники.СтраныМира.Россия;
			ЗаписьРоссия.Записать(Истина);
			
			// запись в регистр ФИО
			ЗаписьФИО = РегистрыСведений.ФИОФизическихЛиц.СоздатьМенеджерЗаписи();
			ЗаписьФИО.ФизическоеЛицо = КарточкаОбъект.Ссылка;
			ЗаписьФИО.Период = '19000101';
			ЗаписьФИО.Фамилия = Фамилия;
			ЗаписьФИО.Имя = Имя;
			ЗаписьФИО.Отчество = Отчество;
			ЗаписьФИО.Записать(Истина);
			
		КонецЕсли;
		
		Документ.СсылкаДокумент = КарточкаОбъект.Ссылка;

	КонецЕсли;
	
	Ссылка = Документ.СсылкаДокумент;
	
	СтруктураСсылки = ТипСсылки(Ссылка);
	Документ.СсылкаИД = СтруктураСсылки.СсылкаИД;
	Документ.СсылкаТип = СтруктураСсылки.СсылкаТип;

	Документ.Статус = 0;
	РабочиеПараметры.СоответствиеСтатусовДокументов.Вставить(Документ.ДокументИД, Документ.Статус);
	
	Наименование =  СформироватьНаименованиеЭлементаАрхива(Документ.Организация, Документ.ТипРаспознан, Документ.Номер, Документ.Дата, Документ.Контрагент, Документ.Сумма);
	СохранитьФайлДокумента(Документ.ДокументИД, Наименование, Ссылка); 
	
	Возврат Истина;	
	
КонецФункции

// Процедура выполняет создание новых элементов справочников перед загрузкой документа
//
// Параметры:
//    Документ, тип "Строка таблицы значений" - строка из ТаблицаДанных
//
Процедура СоздатьНовыеЭлементыСправочников(Документ, ESDLСтруктураОПФ, ИмяШаблона, СтруктураОписанийДокументов) Экспорт  
	
	СтруктураОписанияДокумента = Неопределено;
	СтруктураОписанийДокументов.Свойство(Документ.ВидДокумента, СтруктураОписанияДокумента);

	// создание новых элементов справочников шапки
	Для Каждого ОписаниеРеквизита Из СтруктураОписанияДокумента.Шапка Цикл
		СопоставлениеРеквизита(ОписаниеРеквизита, Документ,, Истина, ESDLСтруктураОПФ, ИмяШаблона);
	КонецЦикла;
	
	// создание новых элементов справочников табличной части
	Если СтруктураОписанияДокумента.ТЧ <> Неопределено Тогда
		Для Каждого СтрокаТЧ Из Документ.ТЧ Цикл
			Для Каждого ОписаниеРеквизита Из СтруктураОписанияДокумента.ТЧ Цикл	
				СопоставлениеРеквизита(ОписаниеРеквизита, Документ, СтрокаТЧ.Значение, Истина, ESDLСтруктураОПФ, ИмяШаблона);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДокумент(Документ, СтруктураТиповДокументов, ТаблицаВходящихДокументов, ТаблицаНастроек, СтруктураОписанийДокументов, ИмяШаблона, ESDLСтруктураОПФ)
	
	ИД = Документ.ДокументИД;
	
	ErrorDescription = "";
	ТекстXML = EfsolADLКлиентСервер.AccountEDocuments_GetDocumentXML(ИД, ErrorDescription);
	Если ErrorDescription <> "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СвойстваДокумента = EfsolADLКлиентСервер.AccountEDocuments_GetDocumentProperties(ИД, ErrorDescription);
	Если ErrorDescription <> "" Тогда
		Возврат Ложь;
	КонецЕсли;

	Документ.ТипРаспознан = СвойстваДокумента.RecognitionType;
	Документ.Номер = СвойстваДокумента.DocumentNumber;
	Документ.Дата = СвойстваДокумента.DocumentDate;
	Документ.Контрагент = СвойстваДокумента.Contractor;
	Документ.Организация = СвойстваДокумента.Organization;
	Документ.Сумма = СвойстваДокумента.Sum;
	Документ.Атрибутирован = Ложь;
	Документ.Статус = 0;
	
	СтруктураТипа = Неопределено;
	Если Документ.ТипРаспознан <> "" Тогда
		СтруктураТиповДокументов.Свойство(Документ.ТипРаспознан, СтруктураТипа);
	КонецЕсли;
	Если СтруктураТипа = Неопределено Тогда
		ТекстОшибки = "Не найдено описание типа документа";
		Возврат Ложь;
	КонецЕсли;	
	
	МассивСтрок = ТаблицаВходящихДокументов.НайтиСтроки(Новый Структура("ТипРаспознан", Документ.ТипРаспознан));
	Если МассивСтрок.Количество() = 0 Тогда
		Если СтруктураТипа.ОтображениеКраткоe <> "-" Тогда
			ТекстОшибки = "Не найден тип документа " + СтруктураТипа.ОтображениеПолное + " (Идентификатор документа " + ИД +")";
		Иначе
			ТекстОшибки = "Тип документа не определен (Идентификатор документа " + ИД +")";
		КонецЕсли;
	    Возврат Ложь;
	Иначе
		СтрокаТипаДокумента = МассивСтрок[0];
	КонецЕсли;
	
	ОписаниеДокумента = "" + СтруктураТипа.ОтображениеКраткоe + " №"+ Документ.Номер + " от "+ Документ.Дата + ?(ПустаяСтрока(Документ.Контрагент), "", "(контрагент " + Документ.Контрагент + ")"); 
	
	СтруктураДанныхXML = ПарсерДокументаXML(ТекстXML, Ложь, Документ.ТипРаспознан);
	Если СтруктураДанныхXML.Шапка = Неопределено ИЛИ СтруктураДанныхXML.Шапка.Количество() = 0 Тогда
		ТекстОшибки = "Ошибка обработки документа " +  ОписаниеДокумента;
	    Возврат Ложь;
	КонецЕсли;
	
	ДатаПолучения = ТекущаяДата();
	
	//Если Документ.ВидПовторно <> "" Тогда
	//	ВидДокумента = Документ.ВидПовторно;
	//Иначе
	//	Если НЕ Документ.Атрибутирован Тогда
	//		Если СоздаватьДокументВида = "Входящий" Тогда   
				Документ.Исходящий = Ложь;
			//ИначеЕсли СоздаватьДокументВида = "Исходящий" Тогда
			//	Документ.Исходящий = Истина;
			//Иначе
			//	Документ.Исходящий = АвтоопределениеСценарияСозданияДокумента(СтруктураДанныхXML.Шапка, ESDLСтруктураОПФ);
			//КонецЕсли;
		//КонецЕсли;
		//Если Документ.Исходящий Тогда 
		//	ВидДокумента = СтрокаТипаДокумента.ИсходящийДокумент;
		//Иначе
			ВидДокумента = СтрокаТипаДокумента.ВходящийДокумент;
	//	КонецЕсли;
	//КонецЕсли;

	СтруктураОписанияДокумента = Неопределено;
	СтруктураОписанийДокументов.Свойство(ВидДокумента, СтруктураОписанияДокумента);
	Если СтруктураОписанияДокумента = Неопределено Тогда
		ТекстОшибки = "Ошибка обработки документа " +  ОписаниеДокумента;
	    Возврат Ложь;
	КонецЕсли;

	МассивСтрокВидаСоздаваемогоДокумента = ТаблицаНастроек.НайтиСтроки(Новый Структура("СоздаваемыйДокумент", ВидДокумента));
	ЗначениеНастроекДокумента = ТаблицаНастроек.Скопировать(МассивСтрокВидаСоздаваемогоДокумента, "Синоним, Значение, Идентификатор");
	Документ.ДатаПолучения = ДатаПолучения;
	Документ.ВидДокумента = ВидДокумента;
	Документ.ЗначениеНастроек = Новый Структура();
	Для Каждого СтрокаНастройки Из ЗначениеНастроекДокумента Цикл
		Документ.ЗначениеНастроек.Вставить(СтрокаНастройки.Идентификатор, Новый Структура("Значение, Синоним", СтрокаНастройки.Значение, СтрокаНастройки.Синоним));
	КонецЦикла;
	 	
	Если СтруктураДанныхXML.Шапка <> Неопределено Тогда
		ЗаполнитьСтруктуруДокумента(СтруктураДанныхXML, СтруктураОписанияДокумента, Документ, ESDLСтруктураОПФ, ИмяШаблона);	
	КонецЕсли;
	Если Документ.Шапка = Неопределено ИЛИ Документ.Шапка.Количество() = 0 Тогда
		ТекстОшибки = "Ошибка обработки распознанных данных " +  ОписаниеДокумента;
	    Возврат Ложь;
	КонецЕсли;
	
	Если Документ.ТЧ.Количество() = 0 И СтруктураОписанияДокумента.ТЧ <> Неопределено Тогда
		РеквизитыТЧДобавитьПозицию(Документ, , СтруктураОписанияДокумента, ESDLСтруктураОПФ, ИмяШаблона);
	КонецЕсли;
	
	ДополнительнаяОбработкаДанных(Документ,,ИмяШаблона);

    Возврат Истина;
	
КонецФункции

Функция ЗаполнитьСтруктуруТиповДокументов()
	
	СтруктураТиповДокументов = Новый Структура;
	СтруктураТиповДокументов.Вставить("UNDEF", Новый Структура("ОтображениеКраткоe, ОтображениеПолное, Описание", "-", "Не определен"));
	СтруктураТиповДокументов.Вставить("ERROR", Новый Структура("ОтображениеКраткоe, ОтображениеПолное, Описание", "-", "Не определен"));
	СтруктураТиповДокументов.Вставить("SF", Новый Структура("ОтображениеКраткоe, ОтображениеПолное, Описание", "СФ", "Счет-фактура", "Поступления \ Счет-фактура"));
	СтруктураТиповДокументов.Вставить("TN", Новый Структура("ОтображениеКраткоe, ОтображениеПолное, Описание", "ТН", "Товарная накладная", "Поступления \ Товарная накладная (ТОРГ-12)"));
	СтруктураТиповДокументов.Вставить("PASS", Новый Структура("ОтображениеКраткоe, ОтображениеПолное, Описание", "ПаспортРФ", "Паспорт РФ", "Кадровые \ Паспорт"));
	СтруктураТиповДокументов.Вставить("AT", Новый Структура("ОтображениеКраткоe, ОтображениеПолное, Описание", "Акт", "Акт выполненых работ", "Поступления \ Акт выполненных работ"));
	СтруктураТиповДокументов.Вставить("SC", Новый Структура("ОтображениеКраткоe, ОтображениеПолное, Описание", "Счет", "Счет на оплату", "Поступления \ Счет на оплату"));
	СтруктураТиповДокументов.Вставить("UD", Новый Структура("ОтображениеКраткоe, ОтображениеПолное, Описание", "УПД", "Универсальный передаточный документ", "Поступления \ УПД"));
	
	Возврат СтруктураТиповДокументов;
		
КонецФункции

// Функция создает таблицу определяющую связь входящих и загружаемых в базу документов
//
// Параметры:
//
// Возвращаемое значение:
//		ВозможныеВидыДокументовДляСценариев, тип "Структура",
//
Функция ЗаполнитьВозможныеВидыДокументовДляСценариев(ИмяШаблона) Экспорт
	
	ВозможныеВидыДокументовДляСценариев = Новый Структура;
	
	//Обработка входящих документов
	ВидыДокументовДляТиповДокументов = Новый Структура;
	ВидыДокументов = Новый СписокЗначений;
	Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
		ВидыДокументов.Добавить("ПТУ", "Поступление товаров и услуг");
	ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
		ВидыДокументов.Добавить("ПН", "Приходная накладная");
	ИначеЕсли ИмяШаблона = "Розница 2.2" Тогда
		ВидыДокументов.Добавить("ПТ", "Поступление товаров");
	КонецЕсли;	
	ВидыДокументовДляТиповДокументов.Вставить("SF", ВидыДокументов);
	ВидыДокументовДляТиповДокументов.Вставить("TN", ВидыДокументов);
	ВидыДокументовДляТиповДокументов.Вставить("AT", ВидыДокументов);
	ВидыДокументовДляТиповДокументов.Вставить("UD", ВидыДокументов);
	
	ВидыДокументов = Новый СписокЗначений;;
	ВидыДокументов.Добавить("КФЛ", "Карточка физического лица");
	ВидыДокументовДляТиповДокументов.Вставить("PASS", ВидыДокументов);
	
	ВидыДокументов = Новый СписокЗначений;
	Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
		ВидыДокументов.Добавить("ПП", "Платёжное поручение");
		ВидыДокументов.Добавить("СП", "Счет от поставщика");
	ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
		ВидыДокументов.Добавить("ЗП", "Заказ поставщику");
	ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
		ВидыДокументов.Добавить("ПП", "Платёжное поручение");
		ВидыДокументов.Добавить("ЗП", "Заказ поставщику");
	КонецЕсли;
	ВидыДокументовДляТиповДокументов.Вставить("SC", ВидыДокументов);
	ВозможныеВидыДокументовДляСценариев.Вставить("Входящий", ВидыДокументовДляТиповДокументов);
	
	//Обработка исходящих документов
	ВидыДокументовДляТиповДокументов = Новый Структура;
	ВидыДокументов = Новый СписокЗначений;
	Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
		ВидыДокументов.Добавить("РТУ", "Реализация товаров и услуг");
	ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
		ВидыДокументов.Добавить("РН", "Расходная накладная");
	ИначеЕсли ИмяШаблона = "Розница 2.2" Тогда
		ВидыДокументов.Добавить("РТ", "Реализация товаров");
	КонецЕсли;	
	ВидыДокументовДляТиповДокументов.Вставить("SF", ВидыДокументов);
	ВидыДокументовДляТиповДокументов.Вставить("TN", ВидыДокументов);
	ВидыДокументовДляТиповДокументов.Вставить("UD", ВидыДокументов);
	
	Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
		ВидыДокументовДляТиповДокументов.Вставить("AT", ВидыДокументов);
	ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
		ВидыДокументов = Новый СписокЗначений;
		ВидыДокументов.Добавить("АВР", "АктВыполненныхРабот");
		ВидыДокументовДляТиповДокументов.Вставить("AT", ВидыДокументов);
	КонецЕсли;	
	
	ВидыДокументов = Новый СписокЗначений;;                                                          
	ВидыДокументов.Добавить("КФЛ", "Карточка физического лица");
	ВидыДокументовДляТиповДокументов.Вставить("PASS", ВидыДокументов);
	
	ВидыДокументов = Новый СписокЗначений;
	Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
		ВидыДокументов.Добавить("ПП", "Платёжное поручение");	
	ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
		ВидыДокументов.Добавить("ЗП", "Заказ поставщику");
	ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
		ВидыДокументов.Добавить("ПП", "Платёжное поручение");
		ВидыДокументов.Добавить("ЗП", "Заказ поставщику");
	КонецЕсли;
	ВидыДокументовДляТиповДокументов.Вставить("SC", ВидыДокументов);
	ВозможныеВидыДокументовДляСценариев.Вставить("Исходящий", ВидыДокументовДляТиповДокументов);

	Возврат ВозможныеВидыДокументовДляСценариев;
	
КонецФункции


// Функция создает таблицу определяющую связь входящих и загружаемых в базу документов
//
// Параметры:
//
// Возвращаемое значение:
//		ТаблицаВходящихДокументов, тип "ТаблицаЗначений"
//
Функция ЗаполнитьТаблицаВходящихДокументов(СтруктураТиповДокументов, ИмяШаблона)
	
	//// ТипРаспознан - числовой идентификатор типа документа, 
	//// полный перечень распознаваемых документов задан в переменной общего модуля ТаблицаТиповДокументов
	//ТаблицаВходящихДокументов.Колонки.Добавить("ТипРаспознан");
	//// ВходящийДокумент - вид документа, создаваемый в случае если первичный документ является входящим 
	//ТаблицаВходящихДокументов.Колонки.Добавить("ВходящийДокумент");
	//// ИсходящийДокумент - вид документа, создаваемый в случае если первичный документ является исходящим 
	//ТаблицаВходящихДокументов.Колонки.Добавить("ИсходящийДокумент");
	
	// Например:
	// 		Идентификатор первичного документа
	//				"SF" - "Счет-фактура"
	//				"TN" - "Товарная накладная"
	//				"PASS" - "Паспорт РФ"                                                      
	//				"AT" - "Акт выполненых работ"
	//				"SC" - "Счет на оплату"
	//				"UD" - "Универсальный передаточный документ"
	
	//      На основании счета-фактуры входящего создается документ конфигурации "ПоступлениеТоваровУслуг" 
	//			(обозначение вида документа в структуре описаний документов "ПТУ")
	//      На основании счета-фактуры исходящего создается документ конфигурации "РеализацияТоваровУслуг" 
	//			(обозначение вида документа в структуре описаний документов "РТУ")
	//
	//		Добавляем связь счета-фактуры с создаваемыми документами:
	// 			СтрокаТипаДокумента = ТаблицаВходящихДокументов.Добавить();
	//			СтрокаТипаДокумента.ТипРаспознан = "1";
	//			СтрокаТипаДокумента.Входящий = "ПТУ";
	//			СтрокаТипаДокумента.Исходящий = "РТУ";
	
	////Удаление неподдерживаемых типов
	//МассивСтрокДляУдаления = Новый Массив;
	//Для Каждого СтрокаТаблицаВходящихДокументов Из ТаблицаВходящихДокументов Цикл
	//	Если Не СтруктураТиповДокументов.Свойство(СтрокаТаблицаВходящихДокументов.ТипРаспознан) Тогда
	//		МассивСтрокДляУдаления.Добавить(СтрокаТаблицаВходящихДокументов);
	//	КонецЕсли;
	//КонецЦикла;
	//Для Каждого СтрокаТаблицаВходящихДокументов Из МассивСтрокДляУдаления Цикл
	//	ТаблицаВходящихДокументов.Удалить(СтрокаТаблицаВходящихДокументов);
	//КонецЦикла;
	
	ВозможныеВидыДокументовДляСценариев = ЗаполнитьВозможныеВидыДокументовДляСценариев(ИмяШаблона);
     
	ТаблицаВходящихДокументов = Новый ТаблицаЗначений;
	ТаблицаВходящихДокументов.Колонки.Добавить("ТипРаспознан");	
	ТаблицаВходящихДокументов.Колонки.Добавить("ВходящийДокумент");	
	ТаблицаВходящихДокументов.Колонки.Добавить("ИсходящийДокумент");	
	
	//Добавление новых и проверка заполнения для старых типов
	Для Каждого ОписаниеТипа Из СтруктураТиповДокументов Цикл
		Если ОписаниеТипа.Значение.ОтображениеКраткоe <> "-" Тогда
			Если ВозможныеВидыДокументовДляСценариев.Входящий.Свойство(ОписаниеТипа.Ключ) Тогда
				МассивСтрокТипа = ТаблицаВходящихДокументов.НайтиСтроки(Новый Структура("ТипРаспознан", ОписаниеТипа.Ключ));
				Если МассивСтрокТипа.Количество() > 0 Тогда
					СтрокаТипаДокумента = МассивСтрокТипа[0];
					Если ВозможныеВидыДокументовДляСценариев.Входящий[ОписаниеТипа.Ключ].НайтиПоЗначению(СтрокаТипаДокумента.ВходящийДокумент) = Неопределено Тогда
						СтрокаТипаДокумента.ВходящийДокумент = ВозможныеВидыДокументовДляСценариев.Входящий[ОписаниеТипа.Ключ][0].Значение;
					КонецЕсли;
					Если ВозможныеВидыДокументовДляСценариев.Исходящий[ОписаниеТипа.Ключ].НайтиПоЗначению(СтрокаТипаДокумента.ИсходящийДокумент) = Неопределено Тогда
						СтрокаТипаДокумента.ИсходящийДокумент = ВозможныеВидыДокументовДляСценариев.Исходящий[ОписаниеТипа.Ключ][0].Значение;
					КонецЕсли;
				Иначе
					СтрокаТипаДокумента = ТаблицаВходящихДокументов.Добавить();
					СтрокаТипаДокумента.ТипРаспознан = ОписаниеТипа.Ключ;
					СтрокаТипаДокумента.ВходящийДокумент = ВозможныеВидыДокументовДляСценариев.Входящий[ОписаниеТипа.Ключ][0].Значение;
					СтрокаТипаДокумента.ИсходящийДокумент = ВозможныеВидыДокументовДляСценариев.Исходящий[ОписаниеТипа.Ключ][0].Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаВходящихДокументов;
	
КонецФункции

// Функция создает структуру, содержащую описания всех видов создаваемых документов
//
// Параметры:
//
// Возвращаемое значение:
//		СтруктураОписанийДокументов, тип "Структура"
//
Функция СоздатьСтруктуруОписанийДокументов(ИмяШаблона)  Экспорт
	
	СтруктураОписанийДокументов = Новый Структура;
	
	// В структуру описаний документов добавляются элементы, где ключ - обозначение вида документа, 
	// а значение  - структура описания данного вида документа, создаваемая функцией "СтруктураОписанияДокументаЗаполнить"
	// Для каждого вида создаваемого в функцию "СтруктураОписанияДокументаЗаполнить" добавляем раздел с описание структуры данного вида документа
	//
	// Пример: 
	// 		Для создания документа ПоступлениеТоваровУслуг вводим обозначение "ПТУ", 
	//		добавляем в функцию "СтруктураОписанияДокументаЗаполнить" заполнение структуры документа для "ПТУ",
	//		выполняем команду:
	//		СтруктураОписанийДокументов.Вставить("ПТУ", СтруктураОписанияДокументаЗаполнить("ПТУ");
	
	Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
	
		СтруктураОписанийДокументов.Вставить("ПТУ", СтруктураОписанияДокументаЗаполнить("ПТУ"));
		СтруктураОписанийДокументов.Вставить("РТУ", СтруктураОписанияДокументаЗаполнить("РТУ"));
		СтруктураОписанийДокументов.Вставить("КФЛ", СтруктураОписанияДокументаЗаполнить("КФЛ"));	
	ИначеЕсли ИмяШаблона = "Розница 2.2" Тогда
		СтруктураОписанийДокументов.Вставить("ПТ", СтруктураОписанияДокументаЗаполнить("ПТ"));
		СтруктураОписанийДокументов.Вставить("РТ", СтруктураОписанияДокументаЗаполнить("РТ"));	
	ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
		СтруктураОписанийДокументов.Вставить("ПН", СтруктураОписанияДокументаЗаполнить("ПН"));
		СтруктураОписанийДокументов.Вставить("РН", СтруктураОписанияДокументаЗаполнить("РН"));
		СтруктураОписанийДокументов.Вставить("АВР", СтруктураОписанияДокументаЗаполнить("АВР"));
		СтруктураОписанийДокументов.Вставить("КФЛ", СтруктураОписанияДокументаЗаполнить("КФЛ"));
	КонецЕсли;
	Если НЕ ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
		СтруктураОписанийДокументов.Вставить("ЗП", СтруктураОписанияДокументаЗаполнить("ЗП"));
	КонецЕсли;
	Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
		СтруктураОписанийДокументов.Вставить("СП", СтруктураОписанияДокументаЗаполнить("СП"));
	КонецЕсли;
	Если НЕ ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ НЕ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
		СтруктураОписанийДокументов.Вставить("ПП", СтруктураОписанияДокументаЗаполнить("ПП"));
	КонецЕсли;
	
	Возврат СтруктураОписанийДокументов;
	
КонецФункции

// Функция создает структуру, содержащую описание заданного вида документа
//
// Параметры:
// 		ВидДокумента - вид загружаемого в базу документа
//
// Возвращаемое значение:
//		СтруктураОписанияДокумента, тип "Структура", содержит следующие элементы:
//			ключ "МетаданныеИмя", значение - имя создаваемого объекта метаданных
//			ключ "СинонимДокумента", значение - синоним документа, отображаемый пользователю
//			ключ "Шапка", значение - таблица описания шапки документа
//			ключ "ТЧ", значение - таблица описания табличной части документа (если документ не содержит табличной части, Неопределено)
//
Функция СтруктураОписанияДокументаЗаполнить(ВидДокумента)
	
	ИмяШаблона = "БухгалтерияПредприятия 3.0";
	
	// Внимание!
	// Добавлять реквизиты шапки и табличной части в таблицу описаний следует в том порядке, 
	// в котором должно выполняться их сопоставление
	// Например:
	// 		Для сопоставления реквизита "ДоговорКонтрагента" должны быть определены реквизиты "Контрагент" и "ВидДоговора",
	//		поэтому сперва добавляются реквизиты "Контрагент" и "ВидДоговора", а затем "ДоговорКонтрагента"
	
	МетаданныеИмяОбъекта = "";
	СинонимДокумента = "";
	Шапка = Неопределено;
	ТЧ = Неопределено;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТипаСтрока = Новый ОписаниеТипов(МассивТипов);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Булево"));
	ОписаниеТипаБулево = Новый ОписаниеТипов(МассивТипов);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТипаЧисло = Новый ОписаниеТипов(МассивТипов);

	
	ШаблонТаблицаОписанияДокументаЗначение = Новый ТаблицаЗначений;
	ШаблонТаблицаОписанияДокументаЗначение.Колонки.Добавить("Идентификатор", ОписаниеТипаСтрока);
	ШаблонТаблицаОписанияДокументаЗначение.Колонки.Добавить("Синоним", ОписаниеТипаСтрока);
	ШаблонТаблицаОписанияДокументаЗначение.Колонки.Добавить("Тип", ОписаниеТипаСтрока);
	ШаблонТаблицаОписанияДокументаЗначение.Колонки.Добавить("ОписаниеТипаРеквизита");
	ШаблонТаблицаОписанияДокументаЗначение.Колонки.Добавить("Вид", ОписаниеТипаСтрока);
	ШаблонТаблицаОписанияДокументаЗначение.Колонки.Добавить("Владелец", ОписаниеТипаСтрока);
	ШаблонТаблицаОписанияДокументаЗначение.Колонки.Добавить("Отображать", ОписаниеТипаБулево);
	ШаблонТаблицаОписанияДокументаЗначение.Колонки.Добавить("Выражение", ОписаниеТипаСтрока);
	ШаблонТаблицаОписанияДокументаЗначение.Колонки.Добавить("Родитель", ОписаниеТипаСтрока);
	ШаблонТаблицаОписанияДокументаЗначение.Колонки.Добавить("ПорядокОтображения", ОписаниеТипаЧисло);
	ШаблонТаблицаОписанияДокументаЗначение.Колонки.Добавить("Развернуть", ОписаниеТипаБулево);
	ШаблонТаблицаОписанияДокументаЗначение.Колонки.Добавить("ОтображатьВИсходном", ОписаниеТипаБулево);
	
	Если ВидДокумента = "ПТУ" Тогда
		
		МетаданныеИмяОбъекта = "Документ.ПоступлениеТоваровУслуг";
		СинонимДокумента = "Поступление товаров и услуг";
		
		//Описание шапки документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Основные", "Основные", , , , , , , 1, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Организация", , "СправочникСсылка", "Организации", , , "DesCompany", "Основные", 3);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НомерВходящегоДокументаДокумент", "Входящий номер", "Строка", , , Ложь, "DocNum", "Основные");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НомерВходящегоДокумента", "Входящий номер", "Строка", , , , "[СтрЗаменить(Параметры.Шапка.НомерВходящегоДокументаДокумент.ИтоговоеЗначение, ""№"", """")]", "Основные", 4);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ДатаВходящегоДокумента", "Входящая дата", "Дата", , , , "DocDate", "Основные", 5);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Дата", , "Дата", , , ,"[?(Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение <> Неопределено, Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение, ТекущаяДата())]", "Основные", 2);	
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВалютаДокумента", "Валюта документа", "СправочникСсылка", "Валюты", , Ложь, "DocCur", "ЦеныИВалюты", 23);	
		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0"  Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Валюта", "Валюта документа", "СправочникСсылка", "Валюты", , Ложь, "DocCur", "ЦеныИВалюты", 23);
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВалютаВзаиморасчетов", "Валюта взаиморасчетов", "СправочникСсылка", "Валюты", , Ложь, "[Константы.ВалютаРегламентированногоУчета.Получить()]", "ЦеныИВалюты", 24);
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ИНН", , "Строка", , , , "IssINN", "Контрагент", 7);                                
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "КПП", , "Строка", , , , "IssKPP", "Контрагент", 8);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "АдресКонтрагента", "Адрес контрагента", "Строка", , , , "IssAddres", "Контрагент", 9);                                                                          
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Контрагент", , "СправочникСсылка", "Контрагенты", , , "IssCompany", "Основные", 6, Истина);
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВидДоговора", , "ПеречислениеСсылка", "ВидыДоговоровКонтрагентов", , Ложь, "[Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком]");
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ДоговорКонтрагента", "Договор контрагента", "СправочникСсылка", "ДоговорыКонтрагентов", "Контрагент", , "[""Основной договор""]", "Основные", 10);		
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Склад", , "СправочникСсылка", "Склады", , ,  "[ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию(""ОсновнойСклад"")]", "Основные", 11);	
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СпособЗачетаАвансов", "Способ зачета авансов", "ПеречислениеСсылка", "СпособыЗачетаАвансов", , ,"[?(не ЗначениеЗаполнено(Параметры.СтрокаТЧ), Перечисления.СпособыЗачетаАвансов.Автоматически, Параметры.СтрокаТЧ)]", "Основные", 12);	
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Счета", "Счета", , , , , , , 13);
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СчетаУчета", "Счета учета", "Структура", , , Ложь, "[БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Справочники.Организации.ПустаяСсылка(), Справочники.Контрагенты.ПустаяСсылка(),Справочники.ДоговорыКонтрагентов.ПустаяСсылка())]", "Счета");
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СчетУчетаРасчетовПоАвансам", "Счет учета расчетов по авансам", "ПланСчетовСсылка", "Хозрасчетный", , , "[?(Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетАвансов = Неопределено,ПланыСчетов.Хозрасчетный.ПустаяСсылка(),Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетАвансов)]", "Счета", 14);
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СчетУчетаРасчетовПоТаре", "Счет учета расчетов по таре", "ПланСчетовСсылка", "Хозрасчетный", , , "[?(Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетУчетаТары = Неопределено,ПланыСчетов.Хозрасчетный.ПустаяСсылка(),Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетУчетаТары)]", "Счета", 15);
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СчетУчетаРасчетовСКонтрагентом", "Счет учета расчетов с контрагентом", "ПланСчетовСсылка", "Хозрасчетный", , , "[?(Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетРасчетов = Неопределено,ПланыСчетов.Хозрасчетный.ПустаяСсылка(),Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетРасчетов)]", "Счета", 16);
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Дополнительно", "Дополнительно", , , , , , , 17);
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Ответственный", , "СправочникСсылка", "Пользователи", , , "[Пользователи.ТекущийПользователь()]", "Дополнительно", 18);
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ГрузополучательДокумент", , "Строка", , , Ложь, "DesCompany", "Дополнительно");
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Грузополучатель", , "СправочникСсылка", "Контрагенты", , , "[?(ВРег(Параметры.Шапка.ГрузополучательДокумент.ИтоговоеЗначение) = ""ОНЖЕ"" ИЛИ ВРег(Параметры.Шапка.ГрузополучательДокумент.ИтоговоеЗначение) = ""ОН ЖЕ"", Лев(Параметры.Шапка.Организация.ИтоговоеЗначение, 100), Лев(Параметры.Шапка.ГрузополучательДокумент.ИтоговоеЗначение, 100))]", "Дополнительно", 20);
		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ТипДоговора", , "ПеречислениеСсылка", "ТипыДоговоров", , Ложь, "[Перечисления.ТипыДоговоров.СПоставщиком]");
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Договор", "Договор контрагента", "СправочникСсылка", "ДоговорыКонтрагентов", "Контрагент", , "[""Основной договор""]", "Основные", 10);		
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Склад", , "СправочникСсылка", "Склады", , ,  "[БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(""ОсновнойСклад"")]", "Основные", 11);	
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Дополнительно", "Дополнительно", , , , , , , 17);
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Комментарий", , "Строка", , , , "[""EFSOL: Загрузка документов /"" + Формат(ТекущаяДата(), ""ДФ='дд.ММ.гггг ЧЧ:мм:сс'"")+ ""/"" +ИмяПользователя()]", "Дополнительно", 21);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЦеныИВалюты", "Цены и валюты", , , , Ложь, , , 22);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ГрузоотправительДокумент", , "Строка", , , Ложь, "Consignor", "Дополнительно");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Грузоотправитель", , "СправочникСсылка", "Контрагенты", , , "[?(ВРег(Параметры.Шапка.ГрузоотправительДокумент.ИтоговоеЗначение) = ""ОНЖЕ"" ИЛИ ВРег(Параметры.Шапка.ГрузоотправительДокумент.ИтоговоеЗначение) = ""ОН ЖЕ"", Лев(Параметры.Шапка.Контрагент.ИтоговоеЗначение, 100), Лев(Параметры.Шапка.ГрузоотправительДокумент.ИтоговоеЗначение, 100))]", "Дополнительно", 19);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтруктураКурсаВзаиморасчетов", , "Структура", , , Ложь, "[?(ЗначениеНеЗаполнено(Параметры.Шапка.ВалютаДокумента.ИтоговоеЗначение),Неопределено,МодульВалютногоУчета.ПолучитьКурсВалюты(Параметры.Шапка.ВалютаДокумента.ИтоговоеЗначение, ТекущаяДата()))]", "ЦеныИВалюты");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "КурсВзаиморасчетов", "Курс взаиморасчетов", "Число", , , Ложь, "[?(ЗначениеНеЗаполнено(Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение), 1, Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение.Курс)]");	
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "КратностьВзаиморасчетов", "Кратность взаиморасчетов", "Число", , , Ложь, "[?(ЗначениеНеЗаполнено(Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение),1 , Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение.Кратность)]", "ЦеныИВалюты");	
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "РегистрироватьЦеныПоставщика", "Регистрировать цены поставщика", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "УчитыватьНДС", "Учитывать НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");                                      
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаВключаетНДС", "Сумма включает НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НалогообложениеНДС", "Налогообложение", "Строка",, , Ложь, "[Закупка  не облагается НДС]", "ЦеныИВалюты");                                      
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЦенаВключаетНДС", "Цена Включает НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаДокумента", , "Число", , , Ложь, "Sum");
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаВзаиморасчетов", , "Число", , , Ложь, "[Параметры.Шапка.СуммаДокумента.ИтоговоеЗначение]");
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Всего", , "Число", , , Ложь, "Sum");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВсегоНДС", "НДС (в т.ч.)", "Число", , , Ложь, "SumOfTaxes");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Итого", , "Число", , , Ложь, "TotalSum");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ПометитьУслуги", , "Булево", , , Ложь, "[Истина]");
		Шапка = ТаблицаОписанияДокумента.Скопировать();
		
		//Описание табличной части документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Услуга", "Усл.", "Булево", , , , "[Ложь]", , 1, , Ложь);
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НомерГТД", "Номер ГТД", "СправочникСсылка", "НомераГТД", , , "Decl", , 10);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Номенклатура", "Номенклатура", "СправочникСсылка", "Номенклатура", , , "Descript", , 2);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЕдиницаИзмеренияКод", , "Строка", , , Ложь, "UnitCode");
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЕдиницаИзмерения", "Ед.изм.", "СправочникСсылка", "КлассификаторЕдиницИзмерения", , , "Unit", , 3);
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Количество", "К-во", "Число", , , , "Qty", , 4);
		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			Если (Лев(Метаданные.Версия, 4) = "11.2" ИЛИ Лев(Метаданные.Версия, 4) = "11.3" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0") Тогда
				ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЕдиницаИзмерения", "Ед.изм.", "СправочникСсылка", "УпаковкиЕдиницыИзмерения", , , "Unit", , 3);
			Иначе
				ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЕдиницаИзмерения", "Ед.изм.", "СправочникСсылка", "ЕдиницыИзмерения", , , "Unit", , 3);
			КонецЕсли;
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "КоличествоУпаковок", "Количество", "Число", , , , "Qty", , 4);
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Цена", , "Число", , , , "Price", , 5);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Сумма", , "Число", , , , "Cost", , 6);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтавкаНДС", "% НДС", "ПеречислениеСсылка", "СтавкиНДС", , , "TaxRate", , 7, , Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаНДС", "НДС", "Число", , , , "TaxSum", , 8);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Всего", , "Число", , , , "SumWithTax", , 9);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтранаПроисхожденияКод", , "Строка", , , Ложь, "CountryCode");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтранаПроисхождения", "Страна пр.", "СправочникСсылка", "СтраныМира", , , "Country", , 11);
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СчетУчета", "Счет учета", "ПланСчетовСсылка", "Хозрасчетный", , , "[ПланыСчетов.Хозрасчетный.НайтиПоКоду(""41.01"")]", , 12);
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СчетУчетаНДС", "Счет учета НДС", "ПланСчетовСсылка", "Хозрасчетный", , , "[ПланыСчетов.Хозрасчетный.НайтиПоКоду(""19.03"")]", , 13);
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ГруппаНоменклатуры", "Группа номенклатуры", "СправочникСсылка", "Номенклатура", , , , , 15, , Ложь);
		Если ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаСНДС", , "Число", , , Ложь, "SumWithTax");
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВидНоменклатуры", "Вид номенклатуры", "СправочникСсылка", "ВидыНоменклатуры", , , , , 14, , Ложь);
		КонецЕсли;	
		
		ТЧ = ТаблицаОписанияДокумента.Скопировать();
	/////////////////////////////////////////////////////////////////
	ИначеЕсли ВидДокумента = "ПТ" Тогда
		
		МетаданныеИмяОбъекта = "Документ.ПоступлениеТоваров";
		СинонимДокумента = "Поступление товаров";
		
		//Описание шапки документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Основные", "Основные", , , , , , , 1, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Организация", , "СправочникСсылка", "Организации", , , "DesCompany", "Основные", 3);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НомерВходящегоДокументаДокумент", "Входящий номер", "Строка", , , Ложь, "DocNum", "Основные");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НомерВходящегоДокумента", "Входящий номер", "Строка", , , , "[СтрЗаменить(Параметры.Шапка.НомерВходящегоДокументаДокумент.ИтоговоеЗначение, ""№"", """")]", "Основные", 4);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ДатаВходящегоДокумента", "Входящая дата", "Дата", , , , "DocDate", "Основные", 5);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Дата", , "Дата", , , ,"[?(Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение <> Неопределено, Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение, ТекущаяДата())]", "Основные", 2);	
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ИНН", , "Строка", , , , "IssINN", "Контрагент", 7);                                
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "КПП", , "Строка", , , , "IssKPP", "Контрагент", 8);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "АдресКонтрагента", "Адрес контрагента", "Строка", , , , "IssAddres", "Контрагент", 9);                                                                          
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Контрагент", , "СправочникСсылка", "Контрагенты", , , "IssCompany", "Основные", 6, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Склад", , "СправочникСсылка", "Склады", , ,  "[БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(""ОсновнойСклад"")]", "Основные", 11);	
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Дополнительно", "Дополнительно", , , , , , , 17);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Комментарий", , "Строка", , , , "[""EFSOL: Загрузка документов /"" + Формат(ТекущаяДата(), ""ДФ='дд.ММ.гггг ЧЧ:мм:сс'"")+ ""/"" +ИмяПользователя()]", "Дополнительно", 21);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЦеныИВалюты", "Цены и валюты", , , , Ложь, , , 22);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "УчитыватьНДС", "Учитывать НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");   
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЦенаВключаетНДС", "Цена Включает НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаДокумента", , "Число", , , Ложь, "Sum");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Всего", , "Число", , , Ложь, "Sum");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВсегоНДС", "НДС (в т.ч.)", "Число", , , Ложь, "SumOfTaxes");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Итого", , "Число", , , Ложь, "TotalSum");
		Шапка = ТаблицаОписанияДокумента.Скопировать();
		
		//Описание табличной части документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Номенклатура", "Номенклатура", "СправочникСсылка", "Номенклатура", , , "Descript", , 2);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЕдиницаИзмеренияКод", , "Строка", , , Ложь, "UnitCode");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЕдиницаИзмерения", "Ед.изм.", "СправочникСсылка", "БазовыеЕдиницыИзмерения", , , "Unit", , 3);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "КоличествоУпаковок", "Количество", "Число", , , , "Qty", , 4);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Цена", , "Число", , , , "Price", , 5);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Сумма", , "Число", , , , "Cost", , 6);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтавкаНДС", "% НДС", "ПеречислениеСсылка", "СтавкиНДС", , , "TaxRate", , 7, , Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаНДС", "НДС", "Число", , , , "TaxSum", , 8);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Всего", , "Число", , , , "SumWithTax", , 9);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтранаПроисхожденияКод", , "Строка", , , Ложь, "CountryCode");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтранаПроисхождения", "Страна пр.", "СправочникСсылка", "СтраныМира", , , "Country", , 11);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ГруппаНоменклатуры", "Группа номенклатуры", "СправочникСсылка", "Номенклатура", , , , , 15, , Ложь);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаСНДС", , "Число", , , Ложь, "SumWithTax");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВидНоменклатуры", "Вид номенклатуры", "СправочникСсылка", "ВидыНоменклатуры", , , , , 14, , Ложь);	
		
		ТЧ = ТаблицаОписанияДокумента.Скопировать();
	/////////////////////////////////////////////////////////////////
	ИначеЕсли ВидДокумента = "СП" Тогда
		
		МетаданныеИмяОбъекта = "Документ.СчетНаОплатуПоставщика";
		СинонимДокумента = "Счет от поставщика";

		//Описание шапки документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Основные", "Основные", , , , , , , 1, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Организация", , "СправочникСсылка", "Организации", , , "DesCompany", "Основные", 3);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НомерВходящегоДокументаДокумент", "Входящий номер", "Строка", , , Ложь, "DocNum", "Основные");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НомерВходящегоДокумента", "Входящий номер", "Строка", , , , "[СтрЗаменить(Параметры.Шапка.НомерВходящегоДокументаДокумент.ИтоговоеЗначение, ""№"", """")]", "Основные", 4);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ДатаВходящегоДокумента", "Входящая дата", "Дата", , , , "DocDate", "Основные", 5);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Дата", , "Дата", , , ,"[?(Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение <> Неопределено, Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение, ТекущаяДата())]", "Основные", 2);				//ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВалютаДокумента", "Валюта документа", "СправочникСсылка", "Валюты", , Ложь, "DocCur", "ЦеныИВалюты", 23);	
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ИНН", , "Строка", , , , "IssINN", "Контрагент", 7);                                
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "КПП", , "Строка", , , , "IssKPP", "Контрагент", 8);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "АдресКонтрагента", "Адрес контрагента", "Строка", , , , "IssAddres", "Контрагент", 11);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Контрагент", , "СправочникСсылка", "Контрагенты", , , "IssCompany", "Основные", 6, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СчетКонтрагентаДокумент", "Номер счета контрагента", "Строка", , , , "DestCurrentAccount", "Контрагент",9);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СчетБанка", "Счет банка", "Строка", , , Ложь, "CorrAccount", "Основные");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "БикБанка", "Бик банка", "Строка", , , , "BIC", "Контрагент",10);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СчетКонтрагента", "Счет контрагента", "СправочникСсылка", "БанковскиеСчета", "Контрагент", , , "Основные", 12);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "БанковскийСчет", "Счет организации", "СправочникСсылка", "БанковскиеСчета", "Организация", , , "Основные", 3);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВидДоговора", , "ПеречислениеСсылка", "ВидыДоговоровКонтрагентов", , Ложь, "[Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком]");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ДоговорКонтрагента", "Договор контрагента", "СправочникСсылка", "ДоговорыКонтрагентов", "Контрагент", , "[""Основной договор""]", "Основные", 13);			
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВидДоговора", , "ПеречислениеСсылка", "ВидыДоговоровКонтрагентов", , Ложь, "[Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком]");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВалютаДокумента", "Валюта документа", "СправочникСсылка", "Валюты", , Ложь, "DocCur", "ЦеныИВалюты", 23);	
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Дополнительно", "Дополнительно", , , , , , , 17);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Ответственный", , "СправочникСсылка", "Пользователи", , , "[Пользователи.ТекущийПользователь()]", "Дополнительно", 18);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Комментарий", , "Строка", , , , "[""EFSOL: Загрузка документов /"" + Формат(ТекущаяДата(), ""ДФ='дд.ММ.гггг ЧЧ:мм:сс'"")+ ""/"" +ИмяПользователя()]", "Дополнительно", 21);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "КурсВзаиморасчетов", "Курс взаиморасчетов", "Число", , , Ложь, "[?(ЗначениеНеЗаполнено(Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение), 1, Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение.Курс)]");	
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "КратностьВзаиморасчетов", "Кратность взаиморасчетов", "Число", , , Ложь, "[?(ЗначениеНеЗаполнено(Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение),1 , Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение.Кратность)]", "ЦеныИВалюты");	
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЦеныИВалюты", "Цены и валюты", , , , Ложь, , , 22);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтруктураКурсаВзаиморасчетов", , "Структура", , , Ложь, "[?(ЗначениеНеЗаполнено(Параметры.Шапка.ВалютаДокумента.ИтоговоеЗначение),Неопределено,МодульВалютногоУчета.ПолучитьКурсВалюты(Параметры.Шапка.ВалютаДокумента.ИтоговоеЗначение, ТекущаяДата()))]", "ЦеныИВалюты");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "РегистрироватьЦеныПоставщика", "Регистрировать цены поставщика", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "УчитыватьНДС", "Учитывать НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");                                      
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаВключаетНДС", "Сумма включает НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Всего", , "Число", , , Ложь, "Sum");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВсегоНДС", "НДС (в т.ч.)", "Число", , , Ложь, "SumOfTaxes");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Итого", , "Число", , , Ложь, "TotalSum");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ПометитьУслуги", , "Булево", , , Ложь, "[Истина]");
		Шапка = ТаблицаОписанияДокумента.Скопировать();
		 
		//Описание табличной части документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Услуга", "Усл.", "Булево", , , , "[Ложь]", , 1, , Ложь);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Номенклатура", "Номенклатура", "СправочникСсылка", "Номенклатура", , , "Descript", , 2);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЕдиницаИзмеренияКод", , "Строка", , , Ложь, "UnitCode");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЕдиницаИзмерения", "Ед.изм.", "СправочникСсылка", "КлассификаторЕдиницИзмерения", , , "Unit", , 3);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Количество", "К-во", "Число", , , , "Qty", , 4);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Цена", , "Число", , , , "Price", , 5);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Сумма", , "Число", , , , "Cost", , 6);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтавкаНДС", "% НДС", "ПеречислениеСсылка", "СтавкиНДС", , , "TaxRate", , 7, , Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаНДС", "НДС", "Число", , , , "TaxSum", , 8);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Всего", , "Число", , , , "SumWithTax", , 9);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ГруппаНоменклатуры", "Группа номенклатуры", "СправочникСсылка", "Номенклатура", , , , , 15, , Ложь);
		//
		
		ТЧ = ТаблицаОписанияДокумента.Скопировать();	
		
	/////////////////////////////////////////////////////////////////
	
	ИначеЕсли ВидДокумента = "РТУ" Тогда
		
		МетаданныеИмяОбъекта = "Документ.РеализацияТоваровУслуг";             
		СинонимДокумента = "Реализация товаров и услуг";
	
		//Описание шапки документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Основные", "Основные", , , , , , , 1, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Организация", , "СправочникСсылка", "Организации", , , "IssCompany", "Основные", 3);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НомерВходящегоДокументаДокумент", "Входящий номер", "Строка", , , Ложь, "DocNum", "Основные");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НомерВходящегоДокумента", "Входящий номер", "Строка", , , , "[СтрЗаменить(Параметры.Шапка.НомерВходящегоДокументаДокумент.ИтоговоеЗначение, ""№"", """")]", "Основные", 4);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ДатаВходящегоДокумента", "Входящая дата", "Дата", , , , "DocDate", "Основные", 5);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Дата", , "Дата", , , ,"[?(Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение <> Неопределено, Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение, ТекущаяДата())]", "Основные", 2);
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВалютаДокумента", "Валюта документа", "СправочникСсылка", "Валюты", , Ложь, "DocCur", "ЦеныИВалюты", 23);	
		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Валюта", "Валюта документа", "СправочникСсылка", "Валюты", , Ложь, "DocCur", "ЦеныИВалюты", 23);
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВалютаВзаиморасчетов", "Валюта взаиморасчетов", "СправочникСсылка", "Валюты", , Ложь, "[Константы.ВалютаРегламентированногоУчета.Получить()]", "ЦеныИВалюты", 24);
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ИНН", , "Строка", , , , "DestINN", "Контрагент", 7);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "КПП", , "Строка", , , , "DestKPP", "Контрагент", 8);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "АдресКонтрагента", "Адрес контрагента", "Строка", , , , "DestAddres", "Контрагент", 9);                                                                          
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Контрагент", , "СправочникСсылка", "Контрагенты", , , "DesCompany", "Основные", 6, Истина);
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВидДоговора", , "ПеречислениеСсылка", "ВидыДоговоровКонтрагентов", , Ложь, "[Перечисления.ВидыДоговоровКонтрагентов.СПокупателем]");
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ДоговорКонтрагента", "Договор контрагента", "СправочникСсылка", "ДоговорыКонтрагентов", "Контрагент", , "[""Основной договор""]", "Основные", 10);		
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Склад", , "СправочникСсылка", "Склады", , ,  "[ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию(""ОсновнойСклад"")]", "Основные", 11);	
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СпособЗачетаАвансов", "Способ зачета авансов", "ПеречислениеСсылка", "СпособыЗачетаАвансов", , , "[?(не ЗначениеЗаполнено(Параметры.СтрокаТЧ), Перечисления.СпособыЗачетаАвансов.Автоматически, Параметры.СтрокаТЧ)]", "Основные", 12);		
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Счета", "Счета", , , , , , , 13);
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СчетаУчета", "Счета учета", "Структура", , , Ложь, "[БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Справочники.Организации.ПустаяСсылка(), Справочники.Контрагенты.ПустаяСсылка(),Справочники.ДоговорыКонтрагентов.ПустаяСсылка())]", "Счета");
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СчетУчетаРасчетовПоАвансам", "Счет учета расчетов по авансам", "ПланСчетовСсылка", "Хозрасчетный", , , "[?(Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетАвансовПокупателя = Неопределено,ПланыСчетов.Хозрасчетный.ПустаяСсылка(),Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетАвансовПокупателя)]", "Счета", 14);
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СчетУчетаРасчетовПоТаре", "Счет учета расчетов по таре", "ПланСчетовСсылка", "Хозрасчетный", , , "[?(Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетУчетаТарыПокупателя = Неопределено,ПланыСчетов.Хозрасчетный.ПустаяСсылка(),Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетУчетаТарыПокупателя)]", "Счета", 15);
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СчетУчетаРасчетовСКонтрагентом", "Счет учета расчетов с контрагентом", "ПланСчетовСсылка", "Хозрасчетный", , , "[?(Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетРасчетовПокупателя = Неопределено,ПланыСчетов.Хозрасчетный.ПустаяСсылка(),Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетРасчетовПокупателя)]", "Счета", 16);
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Дополнительно", "Дополнительно", , , , , , , 17);
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Ответственный", , "СправочникСсылка", "Пользователи", , , "[Пользователи.ТекущийПользователь()]", "Дополнительно", 18);
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ГрузоотправительДокумент", , "Строка", , , Ложь, "Consignor", "Дополнительно");
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Грузоотправитель", , "СправочникСсылка", "Контрагенты", , , "[?(ВРег(Параметры.Шапка.ГрузоотправительДокумент.ИтоговоеЗначение) = ""ОНЖЕ"" ИЛИ ВРег(Параметры.Шапка.ГрузоотправительДокумент.ИтоговоеЗначение) = ""ОН ЖЕ"", Лев(Параметры.Шапка.Организация.ИтоговоеЗначение, 100), Лев(Параметры.Шапка.ГрузоотправительДокумент.ИтоговоеЗначение, 100))]", "Дополнительно", 19);
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ГрузополучательДокумент", , "Строка", , , Ложь, "DesCompany", "Дополнительно");
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Грузополучатель", , "СправочникСсылка", "Контрагенты", , , "[?(ВРег(Параметры.Шапка.ГрузополучательДокумент.ИтоговоеЗначение) = ""ОНЖЕ"" ИЛИ ВРег(Параметры.Шапка.ГрузополучательДокумент.ИтоговоеЗначение) = ""ОН ЖЕ"", Лев(Параметры.Шапка.Контрагент.ИтоговоеЗначение, 100), Лев(Параметры.Шапка.ГрузополучательДокумент.ИтоговоеЗначение, 100))]", "Дополнительно", 20);
		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Соглашение", , "СправочникСсылка", "СоглашенияСКлиентами", , , "[""Основное соглашение""]", "Основные", 10);		
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Склад", , "СправочникСсылка", "Склады", , ,  "[БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(""ОсновнойСклад"")]", "Основные", 11);	
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Дополнительно", "Дополнительно", , , , , , , 17);
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Комментарий", , "Строка", , , , "[""EFSOL: Загрузка документов /"" + Формат(ТекущаяДата(), ""ДФ='дд.ММ.гггг ЧЧ:мм:сс'"")+ ""/"" +ИмяПользователя()]", "Дополнительно", 21);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЦеныИВалюты", "Цены и валюты", , , , Ложь, , , 22);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтруктураКурсаВзаиморасчетов", , "Структура", , , Ложь, "[?(ЗначениеНеЗаполнено(Параметры.Шапка.ВалютаДокумента.ИтоговоеЗначение),Неопределено,МодульВалютногоУчета.ПолучитьКурсВалюты(Параметры.Шапка.ВалютаДокумента.ИтоговоеЗначение, ТекущаяДата()))]", "ЦеныИВалюты");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "КурсВзаиморасчетов", "Курс взаиморасчетов", "Число", , , Ложь, "[?(ЗначениеНеЗаполнено(Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение), 1, Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение.Курс)]");	
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "КратностьВзаиморасчетов", "Кратность взаиморасчетов", "Число", , , Ложь, "[?(ЗначениеНеЗаполнено(Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение),1 , Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение.Кратность)]", "ЦеныИВалюты");	
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "РегистрироватьЦеныПоставщика", "Регистрировать цены поставщика", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "УчитыватьНДС", "Учитывать НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");                                      
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаВключаетНДС", "Сумма включает НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НалогообложениеНДС", "Налогообложение", "Строка",, , Ложь, "[Продажа  не облагается НДС]", "ЦеныИВалюты");                                      
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЦенаВключаетНДС", "Цена Включает НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаДокумента", , "Число", , , Ложь, "Sum");
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаВзаиморасчетов", , "Число", , , Ложь, "[Параметры.Шапка.СуммаДокумента.ИтоговоеЗначение]");	
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Всего", , "Число", , , Ложь, "Sum");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВсегоНДС", "НДС (в т.ч.)", "Число", , , Ложь, "SumOfTaxes");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Итого", , "Число", , , Ложь, "TotalSum");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ПометитьУслуги", , "Булево", , , Ложь, "[Истина]");
		
		Шапка = ТаблицаОписанияДокумента.Скопировать();
		
		//Описание табличной части документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Услуга", "Усл.", "Булево", , , , "[Ложь]", , 1, , Ложь);
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НомерГТД", "Номер ГТД", "СправочникСсылка", "НомераГТД", , , "Decl", , 10);
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Номенклатура", , "СправочникСсылка", "Номенклатура", , , "Descript", , 2);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЕдиницаИзмеренияКод", , "Строка", , , Ложь, "UnitCode");
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЕдиницаИзмерения", "Ед.изм.", "СправочникСсылка", "КлассификаторЕдиницИзмерения", , , "Unit", , 3);
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Количество", "К-во", "Число", , , , "Qty", , 4);
		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			Если (Лев(Метаданные.Версия, 4) = "11.2" ИЛИ Лев(Метаданные.Версия, 4) = "11.3" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0") Тогда
				ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЕдиницаИзмерения", "Ед.изм.", "СправочникСсылка", "УпаковкиЕдиницыИзмерения", , , "Unit", , 2);	
			Иначе
				ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЕдиницаИзмерения", "Ед.изм.", "СправочникСсылка", "ЕдиницыИзмерения", , , "Unit", , 2);
			КонецЕсли;
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "КоличествоУпаковок", "Количество", "Число", , , , "Qty", , 3);
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Цена", , "Число", , , , "Price", , 5);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Сумма", , "Число", , , , "Cost", , 6);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтавкаНДС", "% НДС", "ПеречислениеСсылка", "СтавкиНДС", , , "TaxRate", , 7, , Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаНДС", "НДС", "Число", , , , "TaxSum", , 8);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Всего", , "Число", , , , "SumWithTax", , 9);
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтранаПроисхожденияКод", , "Строка", , , Ложь, "CountryCode");
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтранаПроисхождения", "Страна происхождения", "СправочникСсылка", "СтраныМира", , , "Country", , 11);
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СчетУчета", "Счет учета", "ПланСчетовСсылка", "Хозрасчетный", , , "[Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетУчета]", , 12);
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СчетДоходов", "Счет доходов", "ПланСчетовСсылка", "Хозрасчетный", , , "[Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетДоходов]", , 13);
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СчетРасходов", "Счет расходов", "ПланСчетовСсылка", "Хозрасчетный", , , "[Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетРасходов]", , 14);								
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СчетУчетаНДСПоРеализации", "Счет учета НДС по реализации", "ПланСчетовСсылка", "Хозрасчетный", , , "[Параметры.Шапка.СчетаУчета.ИтоговоеЗначение.СчетУчетаНДСПоРеализации]", , 15);
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ГруппаНоменклатуры", "Группа номенклатуры", "СправочникСсылка", "Номенклатура", , , , , 17, , Ложь);
		Если ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаСНДС", , "Число", , , Ложь, "SumWithTax");
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВидНоменклатуры", "Вид номенклатуры", "СправочникСсылка", "ВидыНоменклатуры", , , , , 11, , Ложь);
		КонецЕсли;
		ТЧ = ТаблицаОписанияДокумента.Скопировать();
		
	ИначеЕсли ВидДокумента = "РТ" Тогда
		
		МетаданныеИмяОбъекта = "Документ.РеализацияТоваров";
		СинонимДокумента = "Реализация товаров";
	
		//Описание шапки документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Основные", "Основные", , , , , , , 1, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Организация", , "СправочникСсылка", "Организации", , , "IssCompany", "Основные", 3);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НомерВходящегоДокументаДокумент", "Входящий номер", "Строка", , , Ложь, "DocNum", "Основные");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НомерВходящегоДокумента", "Входящий номер", "Строка", , , , "[СтрЗаменить(Параметры.Шапка.НомерВходящегоДокументаДокумент.ИтоговоеЗначение, ""№"", """")]", "Основные", 4);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ДатаВходящегоДокумента", "Входящая дата", "Дата", , , , "DocDate", "Основные", 5);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Дата", , "Дата", , , ,"[?(Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение <> Неопределено, Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение, ТекущаяДата())]", "Основные", 2);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ИНН", , "Строка", , , , "DestINN", "Контрагент", 7);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "КПП", , "Строка", , , , "DestKPP", "Контрагент", 8);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "АдресКонтрагента", "Адрес контрагента", "Строка", , , , "DestAddres", "Контрагент", 9);                                                                          
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Контрагент", , "СправочникСсылка", "Контрагенты", , , "DesCompany", "Основные", 6, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Склад", , "СправочникСсылка", "Склады", , ,  "[БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(""ОсновнойСклад"")]", "Основные", 11);	
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Дополнительно", "Дополнительно", , , , , , , 17);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Комментарий", , "Строка", , , , "[""EFSOL: Загрузка документов /"" + Формат(ТекущаяДата(), ""ДФ='дд.ММ.гггг ЧЧ:мм:сс'"")+ ""/"" +ИмяПользователя()]", "Дополнительно", 21);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЦеныИВалюты", "Цены и валюты", , , , Ложь, , , 22);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "УчитыватьНДС", "Учитывать НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");   
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЦенаВключаетНДС", "Цена Включает НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаДокумента", , "Число", , , Ложь, "Sum");	
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Всего", , "Число", , , Ложь, "Sum");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВсегоНДС", "НДС (в т.ч.)", "Число", , , Ложь, "SumOfTaxes");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Итого", , "Число", , , Ложь, "TotalSum");
		Шапка = ТаблицаОписанияДокумента.Скопировать();

		//Описание табличной части документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Номенклатура", , "СправочникСсылка", "Номенклатура", , , "Descript", , 2);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЕдиницаИзмеренияКод", , "Строка", , , Ложь, "UnitCode");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЕдиницаИзмерения", "Ед.изм.", "СправочникСсылка", "БазовыеЕдиницыИзмерения", , , "Unit", , 2);	
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "КоличествоУпаковок", "Количество", "Число", , , , "Qty", , 3);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Цена", , "Число", , , , "Price", , 5);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Сумма", , "Число", , , , "Cost", , 6);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтавкаНДС", "% НДС", "ПеречислениеСсылка", "СтавкиНДС", , , "TaxRate", , 7, , Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаНДС", "НДС", "Число", , , , "TaxSum", , 8);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Всего", , "Число", , , , "SumWithTax", , 9);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ГруппаНоменклатуры", "Группа номенклатуры", "СправочникСсылка", "Номенклатура", , , , , 17, , Ложь);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаСНДС", , "Число", , , Ложь, "SumWithTax");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВидНоменклатуры", "Вид номенклатуры", "СправочникСсылка", "ВидыНоменклатуры", , , , , 11, , Ложь);
		ТЧ = ТаблицаОписанияДокумента.Скопировать();

	ИначеЕсли ВидДокумента = "КФЛ" Тогда
		
		МетаданныеИмяОбъекта = "Справочник.ФизическиеЛица";
		СинонимДокумента = "Карточка физического лица";
		
		//Описание шапки документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтараяДата", , "Булево", , ,Ложь,"[Истина]", , 0);	
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Фамилия", , "Строка", , , ,"PP_SurName", , 1);	
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Имя", , "Строка", , , , "PP_Name", , 2);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Отчество", , "Строка", , , , "PP_SecName", , 3);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ДатаРождения", "Дата рождения", "Дата", , , , "PP_BirthDate", , 5);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "МестоРождения", , "Строка", , , , "PP_BirthPlace", , 6);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Пол", , "ПеречислениеСсылка", "ПолФизическогоЛица", , , "PP_Sex", , 7);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ИНН", , "Строка", , , , "PP_INN", , 8);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СерияПаспорта", "Серия паспорта", "Строка", , , ,"PP_Ser", , 9);	
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НомерПаспорта", "Номер паспорта", "Строка", , , ,"PP_Num", , 10);	
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "КемВыдан", "Кем выдан", "Строка", , , , "PP_Kem", , 11);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ДатаВыдачи", "Дата выдачи", "Дата", , , , "PP_Date", , 12);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "КодПодразделения", "Код подразделения", "Строка", , , , "PP_Podr", , 13);
		//ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Фото", , "Строка", , , Ложь, "Photo");
		Шапка = ТаблицаОписанияДокумента.Скопировать(); 
		
		//Описание табличной части документа
		ТЧ = Неопределено;
		
	ИначеЕсли ВидДокумента = "ЗП" Тогда
		
		МетаданныеИмяОбъекта = "Документ.ЗаказПоставщику";
		СинонимДокумента = "Заказ поставщику";                                                              
		                                         
		//Описание шапки документа              
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Основные", "Основные", , , , , , , 1, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Организация", , "СправочникСсылка", "Организации", , , "DesCompany", "Основные", 3);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НомерВходящегоДокументаДокумент", "Входящий номер", "Строка", , , Ложь, "DocNum", "Основные");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НомерВходящегоДокумента", "Входящий номер", "Строка", , , , "[СтрЗаменить(Параметры.Шапка.НомерВходящегоДокументаДокумент.ИтоговоеЗначение, ""№"", """")]", "Основные", 4);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ДатаВходящегоДокумента", "Входящая дата", "Дата", , , , "DocDate", "Основные", 5);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Дата", , "Дата", , , ,"[?(Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение <> Неопределено, Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение, ТекущаяДата())]", "Основные", 2);	
		ЕСЛИ НЕ ИмяШаблона = "Розница 2.2" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Валюта", "Валюта документа", "СправочникСсылка", "Валюты", , Ложь, "DocCur", "ЦеныИВалюты", 23);
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВалютаВзаиморасчетов", "Валюта взаиморасчетов", "СправочникСсылка", "Валюты", , Ложь, "[Константы.ВалютаРегламентированногоУчета.Получить()]", "ЦеныИВалюты", 24);
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ИНН", , "Строка", , , , "IssINN", "Контрагент", 7);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "КПП", , "Строка", , , , "IssKPP", "Контрагент", 8);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "АдресКонтрагента", "Адрес контрагента", "Строка", , , , "IssAddres", "Контрагент", 9);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Контрагент", , "СправочникСсылка", "Контрагенты", , , "IssCompany", "Основные", 6, Истина);
		Если ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВидДоговора", , "ПеречислениеСсылка", "ВидыДоговоров", , Ложь, "[Перечисления.ВидыДоговоров.СПоставщиком]");
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Договор", "Договор контрагента", "СправочникСсылка", "ДоговорыКонтрагентов", "Контрагент", , "[""Основной договор""]", "Основные", 10);		
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтруктурнаяЕдиница", "Склад" , "СправочникСсылка", "СтруктурныеЕдиницы", , ,  "[УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), ""ОсновнойСклад"")]", "Основные", 11);	
		Иначе
			Если НЕ ИмяШаблона = "Розница 2.2" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ТипДоговора", , "ПеречислениеСсылка", "ТипыДоговоров", , Ложь, "[Перечисления.ТипыДоговоров.СПоставщиком]");
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Договор", "Договор контрагента", "СправочникСсылка", "ДоговорыКонтрагентов", "Контрагент", , "[""Основной договор""]", "Основные", 10);		
			КонецЕсли;
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Склад", , "СправочникСсылка", "Склады", , ,  "[БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(""ОсновнойСклад"")]", "Основные", 11);	
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Дополнительно", "Дополнительно", , , , , , , 16);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Комментарий", , "Строка", , , , "[""EFSOL: Загрузка документов /"" + Формат(ТекущаяДата(), ""ДФ='дд.ММ.гггг ЧЧ:мм:сс'"")+ ""/"" +ИмяПользователя()]", "Дополнительно", 21);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЦеныИВалюты", "Цены и валюты", , , , Ложь, , , 22);
		Если ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НалогообложениеНДС", "Налогообложение", "ПеречислениеСсылка", "ТипыНалогообложенияНДС", , Ложь, "[Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС]", "ЦеныИВалюты");                                      
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаВключаетНДС", "Сумма включает НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
		Иначе
			Если ИмяШаблона = "Розница 2.2" Тогда
				ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "УчитыватьНДС", "Учитывать НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");   
				ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЦенаВключаетНДС", "Цена Включает НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
				ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаДокумента", , "Число", , , Ложь, "Sum");
			Иначе
				ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтруктураКурсаВзаиморасчетов", , "Структура", , , Ложь, "[?(ЗначениеНеЗаполнено(Параметры.Шапка.Валюта.ИтоговоеЗначение),Неопределено,МодульВалютногоУчета.ПолучитьКурсВалюты(Параметры.Шапка.Валюта.ИтоговоеЗначение, ТекущаяДата()))]", "ЦеныИВалюты");
				ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "КурсВзаиморасчетов", "Курс взаиморасчетов", "Число", , , Ложь, "[?(ЗначениеНеЗаполнено(Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение), 1, Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение.Курс)]");	
				ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "КратностьВзаиморасчетов", "Кратность взаиморасчетов", "Число", , , Ложь, "[?(ЗначениеНеЗаполнено(Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение),1 , Параметры.Шапка.СтруктураКурсаВзаиморасчетов.ИтоговоеЗначение.Кратность)]", "ЦеныИВалюты");	
				ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НалогообложениеНДС", "Налогообложение", "Строка",, , Ложь, "[Закупка  не облагается НДС]", "ЦеныИВалюты");                                      
				ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЦенаВключаетНДС", "Цена Включает НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
		КонецЕсли;
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаДокумента", , "Число", , , Ложь, "Sum");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Всего", , "Число", , , Ложь, "Sum");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВсегоНДС", "НДС (в т.ч.)", "Число", , , Ложь, "SumOfTaxes");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Итого", , "Число", , , Ложь, "TotalSum");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ПометитьУслуги", , "Булево", , , Ложь, "[Истина]");
		Шапка = ТаблицаОписанияДокумента.Скопировать();
		
		//Описание табличной части документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		Если ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Услуга", "Усл.", "Булево", , , , "[Ложь]", , 1, , Ложь);
		ИначеЕсли НЕ ИмяШаблона = "Розница 2.2" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НомерГТД", "Номер ГТД", "СправочникСсылка", "НомераГТД", , , "Decl", , 9);
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Номенклатура", , "СправочникСсылка", "Номенклатура", , , "Descript", , 1);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЕдиницаИзмеренияКод", , "Строка", , , Ложь, "UnitCode");
		Если ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЕдиницаИзмерения", "Ед.изм.", "СправочникСсылка", "КлассификаторЕдиницИзмерения", , , "Unit", , 3);
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Количество", "К-во", "Число", , , , "Qty", , 4);
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтавкаНДС", "% НДС", "СправочникСсылка", "СтавкиНДС", , , "TaxRate", , 7, , Истина);
		Иначе
			Если Лев(Метаданные.Версия, 4) = "11.2" ИЛИ Лев(Метаданные.Версия, 4) = "11.3" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
				ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЕдиницаИзмерения", "Единица измерения", "СправочникСсылка", "УпаковкиЕдиницыИзмерения", , , "Unit", , 2);
			ИначеЕсли  ИмяШаблона = "Розница 2.2" Тогда
				ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЕдиницаИзмерения", "Ед.изм.", "СправочникСсылка", "БазовыеЕдиницыИзмерения", , , "Unit", , 2);	
			Иначе 
				ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЕдиницаИзмерения", "Единица измерения", "СправочникСсылка", "ЕдиницыИзмерения", , , "Unit", , 2);
			КонецЕсли;
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "КоличествоУпаковок", "Количество", "Число", , , , "Qty", , 3);
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтавкаНДС", "Ставка НДС", "ПеречислениеСсылка", "СтавкиНДС", , , "TaxRate", , 6, , Истина);
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВидНоменклатуры", "Вид номенклатуры", "СправочникСсылка", "ВидыНоменклатуры", , , , , 11, , Ложь);
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Цена", , "Число", , , , "Price", , 4);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Сумма", , "Число", , , ,  "Cost", , 5);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаНДС", "Сумма НДС", "Число", , , , "TaxSum", , 7);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Всего", , "Число", , , , "SumWithTax", , 8);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаСНДС", , "Число", , , Ложь, "SumWithTax", , 8);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтранаПроисхожденияКод", , "Строка", , , Ложь, "CountryCode");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтранаПроисхождения", "Страна происхождения", "СправочникСсылка", "СтраныМира", , , "Country", , 10);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ГруппаНоменклатуры", "Группа номенклатуры", "СправочникСсылка", "Номенклатура", , , , , 12, , Ложь);
		ТЧ = ТаблицаОписанияДокумента.Скопировать();
		
	ИначеЕсли ВидДокумента = "ПП" Тогда
		
		МетаданныеИмяОбъекта = "Документ.ПлатежноеПоручение";
		СинонимДокумента = "Платежное поручение";
		                                         
		//Описание шапки документа              
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Основные", "Основные", , , , , , , 1, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Организация", , "СправочникСсылка", "Организации", , , "DesCompany", "Основные", 3);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НомерВходящегоДокументаДокумент", "Входящий номер", "Строка", , , Ложь, "DocNum", "Основные");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НомерВходящегоДокумента", "Входящий номер", "Строка", , , , "[СтрЗаменить(Параметры.Шапка.НомерВходящегоДокументаДокумент.ИтоговоеЗначение, ""№"", """")]", "Основные", 4);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ДатаВходящегоДокумента", "Входящая дата", "Дата", , , , "DocDate", "Основные", 5);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Дата", , "Дата", , , ,"[ТекущаяДата()]", "Основные", 2);	
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВалютаДокумента", "Валюта документа", "СправочникСсылка", "Валюты", , Ложь, "DocCur", "ЦеныИВалюты", 23);	
		ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Валюта", "Валюта документа", "СправочникСсылка", "Валюты", , Ложь, "DocCur", "ЦеныИВалюты", 23);
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВалютаВзаиморасчетов", "Валюта взаиморасчетов", "СправочникСсылка", "Валюты", , Ложь, "[Константы.ВалютаУправленческогоУчета.Получить()]", "ЦеныИВалюты", 24);
	    КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВалютаВзаиморасчетов", "Валюта взаиморасчетов", "СправочникСсылка", "Валюты", , Ложь, "[Константы.ВалютаУправленческогоУчета.Получить()]", "ЦеныИВалюты", 24);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ИНН", , "Строка", , , , "IssINN", "Контрагент", 7);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "КПП", , "Строка", , , , "IssKPP", "Контрагент", 8);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "АдресКонтрагента", "Адрес контрагента", "Строка", , , , "IssAddres", "Контрагент", 11);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Контрагент", , "СправочникСсылка", "Контрагенты", , , "IssCompany", "Основные", 6, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СчетКонтрагентаДокумент", "Номер счета контрагента", "Строка", , , , "DestCurrentAccount", "Контрагент",9);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СчетБанка", "Счет банка", "Строка", , , Ложь, "CorrAccount", "Основные");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "БикБанка", "Бик банка", "Строка", , , , "BIC", "Контрагент",10);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СчетКонтрагента", "Счет контрагента", "СправочникСсылка", "БанковскиеСчета", "Контрагент", , , "Основные", 12);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "БанковскийСчет", "Счет организации", "СправочникСсылка", "БанковскиеСчета", "Организация", , , "Основные", 3);
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВидДоговора", , "ПеречислениеСсылка", "ВидыДоговоровКонтрагентов", , Ложь, "[Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком]");
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ДоговорКонтрагента", "Договор контрагента", "СправочникСсылка", "ДоговорыКонтрагентов", "Контрагент", , "[""Основной договор""]", "Основные", 13);		
		КонецЕсли;	
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Дополнительно", "Дополнительно", , , , , , , 16);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Комментарий", , "Строка", , , , "[""EFSOL: Загрузка документов /"" + Формат(ТекущаяДата(), ""ДФ='дд.ММ.гггг ЧЧ:мм:сс'"")+ ""/"" +ИмяПользователя()]", "Дополнительно", 21);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаДокумента", "Всего", "Число", , , , "Sum", "Основные",22);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Всего", , "Число", , , Ложь, "Sum");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВсегоНДС", "НДС (в т.ч.)", "Число", , , Ложь, "SumOfTaxes");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаНДС", "Сумма НДС", "Число", , , , "SumOfTaxes", "Основные",23);
		Если ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтавкаНДС", "% НДС", "СправочникСсылка", "СтавкиНДС", , , ,"Основные",24);
		ИначеЕсли ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтавкаНДС", "% НДС", "ПеречислениеСсылка", "СтавкиНДС", , , ,"Основные",24);
		КонецЕсли;
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Итого", , "Число", , , Ложь, "TotalSum");
		Шапка = ТаблицаОписанияДокумента.Скопировать();
		
		//Описание табличной части документа
		ТЧ = Неопределено;
		
	ИначеЕсли ВидДокумента = "ПН" Тогда
		
		МетаданныеИмяОбъекта = "Документ.ПриходнаяНакладная";
		СинонимДокумента = "Приходная накладная";

		//Описание шапки документа              
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Основные", "Основные", , , , , , , 1, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Организация", , "СправочникСсылка", "Организации", , , "DesCompany", "Основные", 3);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НомерВходящегоДокументаДокумент", "Входящий номер", "Строка", , , Ложь, "DocNum", "Основные");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НомерВходящегоДокумента", "Входящий номер", "Строка", , , , "[СтрЗаменить(Параметры.Шапка.НомерВходящегоДокументаДокумент.ИтоговоеЗначение, ""№"", """")]", "Основные", 4);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ДатаВходящегоДокумента", "Входящая дата", "Дата", , , , "DocDate", "Основные", 5);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Дата", , "Дата", , , ,"[?(Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение <> Неопределено,Параметры. Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение, ТекущаяДата())]", "Основные", 2);	
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВалютаДокумента", "Валюта документа", "СправочникСсылка", "Валюты", , Ложь, "DocCur", "ЦеныИВалюты", 23);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ИНН", , "Строка", , , , "IssINN", "Контрагент", 7);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "КПП", , "Строка", , , , "IssKPP", "Контрагент", 8);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "АдресКонтрагента", "Адрес контрагента", "Строка", , , , "IssAddres", "Контрагент", 9);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Контрагент", , "СправочникСсылка", "Контрагенты", , , "IssCompany", "Основные", 6, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВидДоговора", , "ПеречислениеСсылка", "ВидыДоговоров", , Ложь, "[Перечисления.ВидыДоговоров.СПоставщиком]");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Договор", "Договор контрагента", "СправочникСсылка", "ДоговорыКонтрагентов", "Контрагент", , "[""Основной договор""]", "Основные", 10);		
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтруктурнаяЕдиница", "Склад" , "СправочникСсылка", "СтруктурныеЕдиницы", , ,  "[УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), ""ОсновнойСклад"")]", "Основные", 11);	
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Дополнительно", "Дополнительно", , , , , , , 16);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Комментарий", , "Строка", , , , "[""EFSOL: Загрузка документов /"" + Формат(ТекущаяДата(), ""ДФ='дд.ММ.гггг ЧЧ:мм:сс'"")+ ""/"" +ИмяПользователя()]", "Дополнительно", 21);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЦеныИВалюты", "Цены и валюты", , , , Ложь, , , 22);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НалогообложениеНДС", "Налогообложение", "ПеречислениеСсылка", "ТипыНалогообложенияНДС", , Ложь, "[Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС]", "ЦеныИВалюты");                                      
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаВключаетНДС", "Сумма включает НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Всего", , "Число", , , Ложь, "Sum");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВсегоНДС", "НДС (в т.ч.)", "Число", , , Ложь, "SumOfTaxes");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Итого", , "Число", , , Ложь, "TotalSum");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ПометитьУслуги", , "Булево", , , Ложь, "[Истина]");
		Шапка = ТаблицаОписанияДокумента.Скопировать();

		//Описание табличной части документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Услуга", "Усл.", "Булево", , , , "[Ложь]", , 1, , Ложь);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НомерГТД", "Номер ГТД", "СправочникСсылка", "НомераГТД", , , "Decl", , 10);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Номенклатура", , "СправочникСсылка", "Номенклатура", , , "Descript", , 2);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЕдиницаИзмеренияКод", , "Строка", , , Ложь, "UnitCode");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЕдиницаИзмерения", "Ед.изм.", "СправочникСсылка", "КлассификаторЕдиницИзмерения", , , "Unit", , 3);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Количество", "К-во", "Число", , , , "Qty", , 4);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Цена", , "Число", , , , "Price", , 5);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Сумма", , "Число", , , , "Cost", , 6);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтавкаНДС", "% НДС", "СправочникСсылка", "СтавкиНДС", , , "TaxRate", , 7, , Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаНДС", "НДС", "Число", , , , "TaxSum", , 8);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Всего", , "Число", , , , "SumWithTax", , 9);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ГруппаНоменклатуры", "Группа номенклатуры", "СправочникСсылка", "Номенклатура", , , , , 17, , Ложь);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтранаПроисхожденияКод", , "Строка", , , Ложь, "CountryCode");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтранаПроисхождения", "Страна происхождения", "СправочникСсылка", "СтраныМира", , , "Country", , 10);
		ТЧ = ТаблицаОписанияДокумента.Скопировать();
		
	ИначеЕсли ВидДокумента = "РН" Тогда
		
		МетаданныеИмяОбъекта = "Документ.РасходнаяНакладная";
		СинонимДокумента = "Расходная накладная";
		
		//Описание шапки документа              
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Основные", "Основные", , , , , , , 1, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Организация", , "СправочникСсылка", "Организации", , , "IssCompany", "Основные", 3);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НомерВходящегоДокументаДокумент", "Входящий номер", "Строка", , , Ложь, "DocNum", "Основные");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НомерВходящегоДокумента", "Входящий номер", "Строка", , , , "[СтрЗаменить(Параметры.Шапка.НомерВходящегоДокументаДокумент.ИтоговоеЗначение, ""№"", """")]", "Основные", 4);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ДатаВходящегоДокумента", "Входящая дата", "Дата", , , , "DocDate", "Основные", 5);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Дата", , "Дата", , , ,"[?(Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение <> Неопределено,Параметры. Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение, ТекущаяДата())]", "Основные", 2);	
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВалютаДокумента", "Валюта документа", "СправочникСсылка", "Валюты", , Ложь, "DocCur", "ЦеныИВалюты", 23);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ИНН", , "Строка", , , , "DestINN", "Контрагент", 7);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "КПП", , "Строка", , , , "DestKPP", "Контрагент", 8);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "АдресКонтрагента", "Адрес контрагента", "Строка", , , , "DestAddres", "Контрагент", 9);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Контрагент", , "СправочникСсылка", "Контрагенты", , , "DesCompany", "Основные", 6, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВидДоговора", , "ПеречислениеСсылка", "ВидыДоговоров", , Ложь, "[Перечисления.ВидыДоговоров.СПокупателем]");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Договор", "Договор контрагента", "СправочникСсылка", "ДоговорыКонтрагентов", "Контрагент", , "[""Основной договор""]", "Основные", 10);		
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтруктурнаяЕдиница", "Склад" , "СправочникСсылка", "СтруктурныеЕдиницы", , ,  "[УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), ""ОсновнойСклад"")]", "Основные", 11);	
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Дополнительно", "Дополнительно", , , , , , , 16);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Комментарий", , "Строка", , , , "[""EFSOL: Загрузка документов /"" + Формат(ТекущаяДата(), ""ДФ='дд.ММ.гггг ЧЧ:мм:сс'"")+ ""/"" +ИмяПользователя()]", "Дополнительно", 21);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЦеныИВалюты", "Цены и валюты", , , , Ложь, , , 22);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НалогообложениеНДС", "Налогообложение", "ПеречислениеСсылка", "ТипыНалогообложенияНДС", , Ложь, "[Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС]", "ЦеныИВалюты");                                      
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаВключаетНДС", "Сумма включает НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Всего", , "Число", , , Ложь, "Sum");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВсегоНДС", "НДС (в т.ч.)", "Число", , , Ложь, "SumOfTaxes");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Итого", , "Число", , , Ложь, "TotalSum");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ПометитьУслуги", , "Булево", , , Ложь, "[Истина]");
		Шапка = ТаблицаОписанияДокумента.Скопировать();

		//Описание табличной части документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Услуга", "Усл.", "Булево", , , , "[Ложь]", , 1, , Ложь);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НомерГТД", "Номер ГТД", "СправочникСсылка", "НомераГТД", , , "Decl", , 10);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Номенклатура", , "СправочникСсылка", "Номенклатура", , , "Descript", , 2);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЕдиницаИзмеренияКод", , "Строка", , , Ложь, "UnitCode");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЕдиницаИзмерения", "Ед.изм.", "СправочникСсылка", "КлассификаторЕдиницИзмерения", , , "Unit", , 3);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Количество", "К-во", "Число", , , , "Qty", , 4);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Цена", , "Число", , , , "Price", , 5);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Сумма", , "Число", , , , "Cost", , 6);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтавкаНДС", "% НДС", "СправочникСсылка", "СтавкиНДС", , , "TaxRate", , 7, , Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаНДС", "НДС", "Число", , , , "TaxSum", , 8);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Всего", , "Число", , , , "SumWithTax", , 9);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ГруппаНоменклатуры", "Группа номенклатуры", "СправочникСсылка", "Номенклатура", , , , , 17, , Ложь);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтранаПроисхожденияКод", , "Строка", , , Ложь, "CountryCode");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтранаПроисхождения", "Страна происхождения", "СправочникСсылка", "СтраныМира", , , "Country", , 10);
		ТЧ = ТаблицаОписанияДокумента.Скопировать();
		
	ИначеЕсли ВидДокумента = "АВР" Тогда
		
		МетаданныеИмяОбъекта = "Документ.АктВыполненныхРабот";
		СинонимДокумента = "Акт выполненных работ";
		
		//Описание шапки документа              
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Основные", "Основные", , , , , , , 1, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Организация", , "СправочникСсылка", "Организации", , , "IssCompany", "Основные", 3);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НомерВходящегоДокументаДокумент", "Входящий номер", "Строка", , , Ложь, "DocNum", "Основные");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НомерВходящегоДокумента", "Входящий номер", "Строка", , , , "[СтрЗаменить(Параметры.Шапка.НомерВходящегоДокументаДокумент.ИтоговоеЗначение, ""№"", """")]", "Основные", 4);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ДатаВходящегоДокумента", "Входящая дата", "Дата", , , , "DocDate", "Основные", 5);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Дата", , "Дата", , , ,"[?(Параметры.Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение <> Неопределено,Параметры. Шапка.ДатаВходящегоДокумента.ИтоговоеЗначение, ТекущаяДата())]", "Основные", 2);	
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВалютаДокумента", "Валюта документа", "СправочникСсылка", "Валюты", , Ложь, "DocCur", "ЦеныИВалюты", 23);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ИНН", , "Строка", , , , "DestINN", "Контрагент", 7);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "КПП", , "Строка", , , , "DestKPP", "Контрагент", 8);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "АдресКонтрагента", "Адрес контрагента", "Строка", , , , "DestAddres", "Контрагент", 9);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Контрагент", , "СправочникСсылка", "Контрагенты", , , "DesCompany", "Основные", 6, Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВидДоговора", , "ПеречислениеСсылка", "ВидыДоговоров", , Ложь, "[Перечисления.ВидыДоговоров.СПокупателем]");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Договор", "Договор контрагента", "СправочникСсылка", "ДоговорыКонтрагентов", "Контрагент", , "[""Основной договор""]", "Основные", 10);		
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Дополнительно", "Дополнительно", , , , , , , 16);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Комментарий", , "Строка", , , , "[""EFSOL: Загрузка документов /"" + Формат(ТекущаяДата(), ""ДФ='дд.ММ.гггг ЧЧ:мм:сс'"")+ ""/"" +ИмяПользователя()]", "Дополнительно", 21);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЦеныИВалюты", "Цены и валюты", , , , Ложь, , , 22);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "НалогообложениеНДС", "Налогообложение", "ПеречислениеСсылка", "ТипыНалогообложенияНДС", , Ложь, "[Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС]", "ЦеныИВалюты");                                      
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаВключаетНДС", "Сумма включает НДС", "Булево", , , Ложь, "[Ложь]", "ЦеныИВалюты");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Всего", , "Число", , , Ложь, "Sum");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ВсегоНДС", "НДС (в т.ч.)", "Число", , , Ложь, "SumOfTaxes");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Итого", , "Число", , , Ложь, "TotalSum");
		//ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ПометитьУслуги", , "Булево", , , Ложь, "[Ложь]");
		Шапка = ТаблицаОписанияДокумента.Скопировать();
		
		//Описание табличной части документа
		ТаблицаОписанияДокумента = ШаблонТаблицаОписанияДокументаЗначение.Скопировать();
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Услуга", "Усл.", "Булево", , , , "[Истина]", , 1, , Ложь);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Номенклатура", , "СправочникСсылка", "Номенклатура", , , "Descript", , 2);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЕдиницаИзмеренияКод", , "Строка", , , Ложь, "UnitCode");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ЕдиницаИзмерения", "Ед.изм.", "СправочникСсылка", "КлассификаторЕдиницИзмерения", , , "Unit", , 3);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Количество", "К-во", "Число", , , , "Qty", , 4);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Цена", , "Число", , , , "Price", , 5);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Сумма", , "Число", , , , "Cost", , 6);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтавкаНДС", "% НДС", "СправочникСсылка", "СтавкиНДС", , , "TaxRate", , 7, , Истина);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СуммаНДС", "НДС", "Число", , , , "TaxSum", , 8);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "Всего", , "Число", , , , "SumWithTax", , 9);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "ГруппаНоменклатуры", "Группа номенклатуры", "СправочникСсылка", "Номенклатура", , , , , 17, , Ложь);
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтранаПроисхожденияКод", , "Строка", , , Ложь, "CountryCode");
		ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, "СтранаПроисхождения", "Страна происхождения", "СправочникСсылка", "СтраныМира", , , "Country", , 10);
		ТЧ = ТаблицаОписанияДокумента.Скопировать();
		
		
	КонецЕсли;

	СтруктураОписанияДокумента = Новый Структура("Шапка, ТЧ, МетаданныеИмяОбъекта, СинонимДокумента", Шапка, ТЧ, МетаданныеИмяОбъекта, СинонимДокумента);
	
	Возврат СтруктураОписанияДокумента;
	
КонецФункции

// Процедура добавляет строку реквизита в таблицу описания шапки или табличной части документа
//
// Параметры:
// 		Идентификатор - идентификатор реквизита
//      Синоним - синоним реквизита, отображаемый пользователю
//      Тип - итоговый тип значения реквизита 
//      Вид - итоговый вид значения реквизита (задается только для ссылочных типов, т.е это имя справочника или перечисления и т.п.)
//      Владелец - наименование реквизита-владельца
//      Отображать - признак отображения реквизита в форме
//      Выражение - имя раздела xml или формула для вычисления значения реквизита (формулы указываются в квадратных скобках, например "[Ложь]")
//      Родитель - значение родителя строки реквизита при отображении в дереве шапки формы (позволяет создавать многоуровневое дерево значений шапки)
//      ПорядокОтображения - число, на основании которого определяется последовательность расположения элементов в шапке
//      Развернуть - признак свернутого или развернутого состояния реквизита при отображении в дереве
//      ОтображатьВИсходном - признак отображения исходного значения в форме
//		
Процедура ДобавитьРеквизитТаблицыОписанияДокумента(ТаблицаОписанияДокумента, Идентификатор, Синоним = "", Тип = "", Вид = "", Владелец = "", Отображать = Истина, Выражение = "", Родитель = "", ПорядокОтображения = Неопределено, Развернуть = Ложь, ОтображатьВИсходном = Истина)
	
	// Если данные есть в реквизитах xml, то указываем имя реквизита последним параметром
	// иначе выражение для вычисления данных
	
	СтрокаРеквизита = ТаблицаОписанияДокумента.Добавить();
	СтрокаРеквизита.Идентификатор = Идентификатор;
	СтрокаРеквизита.Синоним = ?(Синоним = "", Идентификатор, Синоним);
	СтрокаРеквизита.Тип = Тип;
	СтрокаРеквизита.ОписаниеТипаРеквизита = СоздатьОписаниеТипа(Идентификатор, Тип);
	СтрокаРеквизита.Вид = Вид;
	СтрокаРеквизита.Владелец = Владелец;
	СтрокаРеквизита.Отображать = Отображать;
	СтрокаРеквизита.Выражение = Выражение;
	СтрокаРеквизита.Родитель = Родитель;
	СтрокаРеквизита.ПорядокОтображения = ПорядокОтображения;
	СтрокаРеквизита.Развернуть = Развернуть;
	СтрокаРеквизита.ОтображатьВИсходном = ОтображатьВИсходном;
	
КонецПроцедуры

// Предназначена для получения пустого значения заданного типа
//
// Параметры:
//		ЗаданныйТип - тип, пустое значение которого нужно получить
//
// Возвращаемое значение:
//		Пустое значение заданного типа
//
Функция ПустоеЗначениеТипа(ЗаданныйТип) Экспорт
	
	Если ЗаданныйТип = Тип("Число") Тогда
		Возврат 0;
	ИначеЕсли ЗаданныйТип = Тип("Строка") Тогда
		Возврат "";
	ИначеЕсли ЗаданныйТип = Тип("Дата") Тогда
		Возврат '00010101000000';
	ИначеЕсли ЗаданныйТип = Тип("Булево") Тогда
		Возврат Ложь;
	Иначе
		Возврат Новый (ЗаданныйТип);
	КонецЕсли;
	
КонецФункции 

Функция ПарсерДокументаXML(ТекстXML, СтараяВерсия, Тип="") Экспорт
	
	Перем ТЧ;
	
	СтруктураДанныхXML = Новый Структура();
	ЧтениеXML = Новый ЧтениеXML;
	
	ТекстXML = СтрЗаменить(ТекстXML, "<_", "<");
	ТекстXML = СтрЗаменить(ТекстXML, "</_", "</");
	// исправляем глюкнутую xml, созданную Recognition42!!!
	ПозицияНачалаНеверногоТега = Найти(ТекстXML, "<form:Documents");	
	Если ПозицияНачалаНеверногоТега > 0 Тогда
		ПозицияКонцаНеверногоТега = Найти(ТекстXML, """>") + 2;
		ТекстДляЗамены = Сред(ТекстXML, ПозицияНачалаНеверногоТега, ПозицияКонцаНеверногоТега - ПозицияНачалаНеверногоТега);
		ТекстXML = СтрЗаменить(ТекстXML, ТекстДляЗамены, "");
		ТекстXML = СтрЗаменить(ТекстXML, "</form:Documents>", "");
	КонецЕсли;
	ТекстТипа = Тип + ":_" + Тип;
	ПозицияНачалаНеверногоТега = Найти(ТекстXML, "<" + ТекстТипа);	
	Если ПозицияНачалаНеверногоТега > 0 Тогда 
		ПозицияКонцаНеверногоТега = Найти(ТекстXML, """>") + 2;
		ТекстДляЗамены = Сред(ТекстXML, ПозицияНачалаНеверногоТега, ПозицияКонцаНеверногоТега - ПозицияНачалаНеверногоТега);
		ТекстXML = СтрЗаменить(ТекстXML, ТекстДляЗамены, "");
		ТекстXML = СтрЗаменить(ТекстXML, "</" + ТекстТипа + ">", "");
	КонецЕсли;
	Пока Найти(ТекстXML, Символы.ПС + Символы.ПС)> 0 Цикл
    	ТекстXML = СтрЗаменить(ТекстXML, Символы.ПС + Символы.ПС,  "");
	КонецЦикла;
	
	Если Тип = "SC" И Найти(ТекстXML, "Рayer>")>0 Тогда
		ТекстXML = СтрЗаменить(ТекстXML, "Рayer>", "IssCompany>");	
		ТекстXML = СтрЗаменить(ТекстXML, "Sum>", "SumWithTax>");	
		ТекстXML = СтрЗаменить(ТекстXML, "TaxTotal>", "SumOfTaxes>");	
		ТекстXML = СтрЗаменить(ТекстXML, "TotalPayment>", "Sum>");	
		ТекстXML = СтрЗаменить(ТекстXML, "SumTax>", "TaxSum>");	
	КонецЕсли;
	
	Попытка
		
		// создание колонок ТЧ
		ЧтениеXML.УстановитьСтроку(ТекстXML);
		Пока ЧтениеXML.Прочитать() Цикл 
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И (ЧтениеXML.Имя = "tabrow" ИЛИ ЧтениеXML.Имя = "Table1") Тогда	
				ТЧ = Новый ТаблицаЗначений();
				Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И (ЧтениеXML.Имя = "tabrow" ИЛИ ЧтениеXML.Имя = "Table1")) Цикл 
					Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						ТЧ.Колонки.Добавить(ЧтениеXML.Имя);
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТЧ <> Неопределено И ТЧ.Колонки.Количество() > 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ЧтениеXML.Закрыть();
		
		// заполнение шапки, табличной части
		//ЧтениеXML.ОткрытьФайл(ИмяФайла);

		Если НЕ СтараяВерсия Тогда
			ЧтениеXML.УстановитьСтроку(ТекстXML);
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И (ЧтениеXML.Имя = "document" 
					ИЛИ ЧтениеXML.Имя = "Товарная_накладная" ИЛИ ЧтениеXML.Имя = "Акт" ИЛИ ЧтениеXML.Имя = "Паспорт_РФ"
					ИЛИ ЧтениеXML.Имя = "Счет-Фактура" ИЛИ ЧтениеXML.Имя = "УПД" ИЛИ ЧтениеXML.Имя = "Счет" ИЛИ ЧтениеXML.Имя = "Раздел_документа_1") Тогда
					ИмяДокумента = ЧтениеXML.Имя;
					Шапка = Новый Структура();
					Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = ИмяДокумента) Цикл 
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Table1" Тогда
							СтрокаТЧ = ТЧ.Добавить();
							Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "Table1") Цикл 
								Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
									ИмяРеквизита = ЧтениеXML.Имя;
									ЧтениеXML.Прочитать();
									Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
										СтрокаТЧ[ИмяРеквизита] = ЧтениеXML.Значение;
									Иначе
										СтрокаТЧ[ИмяРеквизита] = "";
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
								ИмяРеквизита = ЧтениеXML.Имя;
								Шапка.Вставить(ИмяРеквизита);
								Шапка[ИмяРеквизита] = "";
								Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = ИмяРеквизита) Цикл 
									Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
										Шапка[ИмяРеквизита] = ЧтениеXML.Значение;
									КонецЕсли;
								КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;	
			КонецЦикла;
			ЧтениеXML.Закрыть();
			
			Если Шапка <> Неопределено И Шапка.Свойство("TaxSum") Тогда
				Шапка.Вставить("SumOfTaxes", Шапка.TaxSum); 
			КонецЕсли;
		
		Иначе
			
			ЧтениеXML.УстановитьСтроку(ТекстXML);
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "tabpart" И  ТЧ <> Неопределено И ТЧ.Колонки.Количество() > 0 Тогда
					Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "tabpart") Цикл 
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "tabrow" Тогда
							СтрокаТЧ = ТЧ.Добавить();
							Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "tabrow") Цикл 
								Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
									ИмяРеквизита = ЧтениеXML.Имя;
									ЧтениеXML.Прочитать();
									Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
										СтрокаТЧ[ИмяРеквизита] = ЧтениеXML.Значение;
									Иначе
										СтрокаТЧ[ИмяРеквизита] = "";
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "head"  Тогда
					Шапка = Новый Структура();
					Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "head") Цикл 
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
							ИмяРеквизита = ЧтениеXML.Имя;
							Шапка.Вставить(ИмяРеквизита);
							ЧтениеXML.Прочитать();
							Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
								Шапка[ИмяРеквизита] = ЧтениеXML.Значение;
							Иначе
								Шапка[ИмяРеквизита] = "";
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			ЧтениеXML.Закрыть();
			
			
		КонецЕсли;

	Исключение
	КонецПопытки;
			
	СтруктураДанныхXML.Вставить("ТЧ", ТЧ);
    СтруктураДанныхXML.Вставить("Шапка", Шапка);
	
	Возврат СтруктураДанныхXML;
	
КонецФункции

Процедура ЗаполнитьСтруктуруДокумента(СтруктураДанныхXML, СтруктураОписанияДокумента, Документ, ESDLСтруктураОПФ, ИмяШаблона)
	
	Документ.ТЧ = Новый Структура;
	Документ.Шапка = Новый Структура;
	
	////Настройки данных для сценария
	//Если Документ.Исходящий И (Документ.ВидДокумента = "ЗП" ИЛИ Документ.ВидДокумента = "ПП") Тогда
	//	IssCompany = СтруктураДанныхXML.Шапка.IssCompany;
	//	IssINN = СтруктураДанныхXML.Шапка.IssINN;
	//	IssKPP = СтруктураДанныхXML.Шапка.IssKPP;
	//	IssAddres = СтруктураДанныхXML.Шапка.IssAddres;
	//	СтруктураДанныхXML.Шапка.IssCompany = СтруктураДанныхXML.Шапка.DesCompany;
	//	СтруктураДанныхXML.Шапка.IssINN = СтруктураДанныхXML.Шапка.DestINN;
	//	СтруктураДанныхXML.Шапка.IssKPP = СтруктураДанныхXML.Шапка.DestKPP;
	//	СтруктураДанныхXML.Шапка.IssAddres = СтруктураДанныхXML.Шапка.DestAddres;
	//	СтруктураДанныхXML.Шапка.DesCompany = IssCompany;
	//	СтруктураДанныхXML.Шапка.DestINN = IssINN;
	//	СтруктураДанныхXML.Шапка.DestKPP = IssKPP;
	//	СтруктураДанныхXML.Шапка.DestAddres = IssAddres;
	//КонецЕсли;
	
	// заполнение шапки
	Для Каждого ОписаниеРеквизита Из СтруктураОписанияДокумента.Шапка Цикл
		Если ОписаниеРеквизита.Тип <> "" Тогда
			Документ.Шапка.Вставить(ОписаниеРеквизита.Идентификатор, Новый Структура("ИсходноеЗначение, СопоставленноеЗначение, ИтоговоеЗначение, СпособСопоставления, ВариантыПодбора, ДопИнфо, Равен"));
			ТекущееЗначение = Неопределено;
			Если Документ.Атрибутирован Тогда
				Если ОписаниеРеквизита.Идентификатор = "ДатаВходящегоДокумента" Тогда
					ТекущееЗначение = Документ.Дата;
				ИначеЕсли ОписаниеРеквизита.Идентификатор = "НомерВходящегоДокумента" Тогда
					ТекущееЗначение = Документ.Номер;
				ИначеЕсли ОписаниеРеквизита.Идентификатор = "Организация" Тогда     
					//Если Документ.Исходящий Тогда
					//	ТекущееЗначение = Документ.Контрагент;
					//Иначе
						ТекущееЗначение = Документ.Организация;
					//КонецЕсли;
				ИначеЕсли ОписаниеРеквизита.Идентификатор = "Контрагент" Тогда
					//Если Документ.Исходящий Тогда
					//	ТекущееЗначение = Документ.Организация;
					//Иначе
						ТекущееЗначение = Документ.Контрагент;
					//КонецЕсли;
				ИначеЕсли ОписаниеРеквизита.Идентификатор = "Всего" Тогда
					ТекущееЗначение = Документ.Сумма;
				КонецЕсли;	
			КонецЕсли;
			Если ТекущееЗначение = Неопределено Тогда
				Если ОписаниеРеквизита.Выражение <> "" И Найти(ОписаниеРеквизита.Выражение, "[") = 0 Тогда
					ИмяСтолбца = ОписаниеРеквизита.Выражение;
					СтруктураДанныхXML.Шапка.Свойство(ИмяСтолбца, ТекущееЗначение);
				КонецЕсли;
				Если ОписаниеРеквизита.Идентификатор = "СпособЗачетаАвансов" Тогда
					Результат = ЗаполнениеРеквизита(ОписаниеРеквизита, ТекущееЗначение, Документ.Шапка, Документ.ЗначениеНастроек.СпособЗачетаАвансов.Значение);
				Иначе
					Результат = ЗаполнениеРеквизита(ОписаниеРеквизита, ТекущееЗначение, Документ.Шапка);
				КонецЕсли;
				Если Результат Тогда
					Документ.Шапка[ОписаниеРеквизита.Идентификатор].СпособСопоставления = "1";	
				КонецЕсли;
			КонецЕсли;
			Документ.Шапка[ОписаниеРеквизита.Идентификатор].Вставить("ИсходноеЗначение", ТекущееЗначение);
			СопоставлениеРеквизита(ОписаниеРеквизита, Документ,,,ESDLСтруктураОПФ, ИмяШаблона);
		КонецЕсли;
	КонецЦикла;
	
	// заполнение табличной части
	Если СтруктураОписанияДокумента.ТЧ <> Неопределено Тогда
		Если СтруктураДанныхXML.ТЧ <> Неопределено Тогда
			Счетчик = 0;
			Для Каждого Строка Из СтруктураДанныхXML.ТЧ Цикл
				СтруктураНоменклатуры = Новый Структура;
				Для Каждого ОписаниеРеквизита Из СтруктураОписанияДокумента.ТЧ Цикл					
					ТекущееЗначение = "";
					СтруктураНоменклатуры.Вставить(ОписаниеРеквизита.Идентификатор, Новый Структура("ИсходноеЗначение, СопоставленноеЗначение, ИтоговоеЗначение, СпособСопоставления, ВариантыПодбора, ДопИнфо, Равен"));
					Если ОписаниеРеквизита.Выражение <> "" И Найти(ОписаниеРеквизита.Выражение, "[") = 0 Тогда
						ИмяСтолбца = ОписаниеРеквизита.Выражение; 
						Если СтруктураДанныхXML.ТЧ.Колонки.Найти(ИмяСтолбца) <> Неопределено Тогда
							ТекущееЗначение = Строка[ИмяСтолбца]
						КонецЕсли;
					КонецЕсли;
					Если ЗаполнениеРеквизита(ОписаниеРеквизита, ТекущееЗначение, Документ.Шапка, Строка) Тогда
						СтруктураНоменклатуры[ОписаниеРеквизита.Идентификатор].СпособСопоставления = "1";
					КонецЕсли;
					СтруктураНоменклатуры[ОписаниеРеквизита.Идентификатор].Вставить("ИсходноеЗначение", ТекущееЗначение);
					СопоставлениеРеквизита(ОписаниеРеквизита, Документ, СтруктураНоменклатуры,,ESDLСтруктураОПФ, ИмяШаблона);
				КонецЦикла;
				Документ.ТЧ.Вставить(?(Счетчик = 0 ,"Стр0",("Стр" + Формат(Счетчик, "ЧГ=0"))), СтруктураНоменклатуры);
				Счетчик = Счетчик + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитыТЧДобавитьПозицию(Документ, Индекс = 0, СтруктураОписанияДокумента, ESDLСтруктураОПФ, ИмяШаблона) 

	ТЧ = Документ.ТЧ;
	СтрокаШапки = Документ.Шапка;
	
	Для Каждого СтруктураСтроки Из ТЧ Цикл
		ИндексСтроки =  Число(СтрЗаменить(СтруктураСтроки.Ключ, "Стр", ""));
		Если ИндексСтроки > Индекс Тогда
			Индекс = ИндексСтроки;	
		КонецЕсли;
	КонецЦикла;
	Индекс = Индекс + 1;
	ТЧ.Вставить(?(Индекс = 0 ,"Стр0",("Стр" + Формат(Индекс, "ЧГ=0"))), Новый Структура());
	НоваяСтрока = ТЧ[?(Индекс = 0 ,"Стр0",("Стр" + Формат(Индекс, "ЧГ=0")))];

	Для Каждого ОписаниеРеквизита Из СтруктураОписанияДокумента.ТЧ Цикл					
		ТекущееЗначение = "";
		НоваяСтрока.Вставить(ОписаниеРеквизита.Идентификатор, Новый Структура("ИсходноеЗначение, СопоставленноеЗначение, ИтоговоеЗначение, СпособСопоставления, ВариантыПодбора, ДопИнфо, Равен"));
		Если ОписаниеРеквизита.Выражение <> "" И Найти(ОписаниеРеквизита.Выражение, "[") = 0 Тогда
			ИмяСтолбца = ОписаниеРеквизита.Выражение; 
		КонецЕсли;
		ЗаполнениеРеквизита(ОписаниеРеквизита, ТекущееЗначение, СтрокаШапки, НоваяСтрока);
		НоваяСтрока[ОписаниеРеквизита.Идентификатор].Вставить("ИсходноеЗначение", ТекущееЗначение);
		СопоставлениеРеквизита(ОписаниеРеквизита, Документ, НоваяСтрока,,ESDLСтруктураОПФ, ИмяШаблона);	
	КонецЦикла;
	
	Возврат НоваяСтрока;
	
КонецФункции

Процедура ДополнительнаяОбработкаДанных(Документ, ПараметрыОбработки = Неопределено, ИмяШаблона) Экспорт
	
	СчетчикНезаполненныхЕдИзм = 0;
	СтрокаШапки = Документ.Шапка;
	
	// Выполняем для указанного вида документа нужную обработку полученных из первичного документа данных
	// Выполняем вычисление расчетных значений (вызов функции "ВычислениеРасчетныхЗначений")
	// Выполняем проверку контрольных сумм и присваиваем документу начальный статус:
	// 		Статусы:
	// 		0 - Загружен
	// 		1 - Готов к загрузке
	// 		2 - Сопоставлен и суммы совпадают
	// 		3 - Сопоставлен, но суммы не совпадают
	
	
	Если  Документ.ВидДокумента = "КФЛ" ИЛИ Документ.ВидДокумента = "ПП" Тогда
		
		Документ.Статус = 2;
		Если Документ.ВидДокумента = "ПП" Тогда
			Попытка
				Если СтрокаШапки.СтавкаНДС.ИтоговоеЗначение = перечисления.СтавкиНДС.БезНДС тогда
					СтавкаНДСЧисло = Окр((СтрокаШапки.ВсегоНДС.ИтоговоеЗначение/(СтрокаШапки.Всего.ИтоговоеЗначение - СтрокаШапки.ВсегоНДС.ИтоговоеЗначение))*100);					
					СтрокаШапки.СтавкаНДС.ИтоговоеЗначение = ПолучитьСтавкуНДС(Строка(СтавкаНДСЧисло), ИмяШаблона);
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	Иначе
		
		ДатаДокументаИзВходящего = Неопределено;
		Документ.ЗначениеНастроек.Свойство("БратьДатуВходящего", ДатаДокументаИзВходящего);
		Если ДатаДокументаИзВходящего <> Неопределено Тогда
			Если ДатаДокументаИзВходящего.Значение И ЗначениеЗаполнено(СтрокаШапки.ДатаВходящегоДокумента.СопоставленноеЗначение) Тогда
				СтрокаШапки.Дата.СопоставленноеЗначение = СтрокаШапки.ДатаВходящегоДокумента.СопоставленноеЗначение;
				СтрокаШапки.Дата.ИтоговоеЗначение = СтрокаШапки.Дата.СопоставленноеЗначение;
			ИначеЕсли НЕ ДатаДокументаИзВходящего.Значение ИЛИ НЕ ЗначениеЗаполнено(СтрокаШапки.ДатаВходящегоДокумента.СопоставленноеЗначение) Тогда
				СтрокаШапки.Дата.ИтоговоеЗначение = ТекущаяДата();
			КонецЕсли;
		КонецЕсли;

		//Удаляем строки с названиями колонок ТЧ
		МассивУдаляемыхСтрок = Новый Массив;
		Для каждого СтруктураСтрокиТЧ Из Документ.ТЧ Цикл
			СтрокаТЧ = СтруктураСтрокиТЧ.Значение; 
			Если СтрокаТЧ.Номенклатура.ИсходноеЗначение = "Товар" 
				И (Найти(СтрокаТЧ.ЕдиницаИзмерения.ИсходноеЗначение,"Единиц") <> Неопределено ИЛИ Найти(СтрокаТЧ.ЕдиницаИзмерения.ИсходноеЗначение,"Ед.") <> Неопределено) Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
			ИначеЕсли СтрокаТЧ.Номенклатура.ИсходноеЗначение = "" Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТЧ Из МассивУдаляемыхСтрок Цикл
			Документ.ТЧ.Удалить(СтрокаТЧ);
		КонецЦикла;
		
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" И НЕ Документ.ВидДокумента = "СП" И 
			(НЕ ЗначениеЗаполнено(СтрокаШапки.СчетУчетаРасчетовПоАвансам.ИтоговоеЗначение) И НЕ  ЗначениеЗаполнено(СтрокаШапки.СчетУчетаРасчетовПоТаре.ИтоговоеЗначение) И НЕ  ЗначениеЗаполнено(СтрокаШапки.СчетУчетаРасчетовСКонтрагентом.ИтоговоеЗначение)) Тогда
			
			ПараметрыВыполнения = Новый Структура("Организация, Контрагент, Договор", СтрокаШапки.Организация.ИтоговоеЗначение, Справочники.Контрагенты.ПустаяСсылка(),Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
			СтрокаШапки.СчетаУчета.ИтоговоеЗначение = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме("БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Параметры.Организация, Параметры.Контрагент, Параметры.Договор)", ПараметрыВыполнения);
			СтрокаШапки.СчетУчетаРасчетовПоАвансам.СопоставленноеЗначение = ?(СтрокаШапки.СчетаУчета.ИтоговоеЗначение.СчетАвансов = Неопределено,ПланыСчетов.Хозрасчетный.ПустаяСсылка(),СтрокаШапки.СчетаУчета.ИтоговоеЗначение.СчетАвансов);	
			СтрокаШапки.СчетУчетаРасчетовПоАвансам.ИтоговоеЗначение = СтрокаШапки.СчетУчетаРасчетовПоАвансам.СопоставленноеЗначение;
			СтрокаШапки.СчетУчетаРасчетовПоТаре.СопоставленноеЗначение = ?(СтрокаШапки.СчетаУчета.ИтоговоеЗначение.СчетУчетаТары = Неопределено,ПланыСчетов.Хозрасчетный.ПустаяСсылка(),СтрокаШапки.СчетаУчета.ИтоговоеЗначение.СчетУчетаТары);
			СтрокаШапки.СчетУчетаРасчетовПоТаре.ИтоговоеЗначение = СтрокаШапки.СчетУчетаРасчетовПоТаре.СопоставленноеЗначение;
			СтрокаШапки.СчетУчетаРасчетовСКонтрагентом.СопоставленноеЗначение = ?(СтрокаШапки.СчетаУчета.ИтоговоеЗначение.СчетРасчетов = Неопределено,ПланыСчетов.Хозрасчетный.ПустаяСсылка(),СтрокаШапки.СчетаУчета.ИтоговоеЗначение.СчетРасчетов);
			СтрокаШапки.СчетУчетаРасчетовСКонтрагентом.ИтоговоеЗначение = СтрокаШапки.СчетУчетаРасчетовСКонтрагентом.СопоставленноеЗначение;	
		КонецЕсли;
		
		//Заполняем флаги "УчитыватьНДС" И "СуммаВключаетНДС", вычисляем количество строк с услугами 
		                                              		
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
					
			СчетчикУслуг = 0;
			СчетчикРавныхСумм = 0;	
			УчитыватьНДС = СтрокаШапки.ВсегоНДС.ИтоговоеЗначение <> 0;
			Для каждого СтруктураСтрокиТЧ Из Документ.ТЧ Цикл
				СтрокаТЧ = СтруктураСтрокиТЧ.Значение; 
				Если ТипЗнч(СтрокаТЧ.Номенклатура.ИтоговоеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда
					Если СтрокаТЧ.Услуга.ИтоговоеЗначение = Истина Тогда
						СчетчикУслуг = СчетчикУслуг + 1;
					КонецЕсли;
				ИначеЕсли ПустаяСтрока(СтрокаТЧ.ЕдиницаИзмерения.ИтоговоеЗначение) И ТипЗнч(СтрокаТЧ.Номенклатура.ИтоговоеЗначение) <> Тип("СправочникСсылка.Номенклатура") Тогда 
					СчетчикУслуг = СчетчикУслуг + 1;	
				КонецЕсли;
				
				Если СтрокаТЧ.СуммаНДС.ИтоговоеЗначение <> 0 Тогда
					УчитыватьНДС = Истина;
					Попытка 
						СтавкаНДС = Число(СтрокаТЧ.СтавкаНДС.ИсходноеЗначение);
					Исключение
						СтавкаНДС = 0;
					КонецПопытки;
					Если СтавкаНДС > 0 И СтрокаТЧ.Всего.ИтоговоеЗначение <> 0 И СтрокаТЧ.Сумма.ИтоговоеЗначение = СтрокаТЧ.Всего.ИтоговоеЗначение Тогда
						СчетчикРавныхСумм = СчетчикРавныхСумм + 1;	
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			СуммаВключаетНДС = ?(СчетчикРавныхСумм/Документ.ТЧ.Количество() > 0.5,	Истина, Ложь);
			
			//Присваиваем значение флага "Услуга" для новых номенклатур, заполняем реквизиты номенклатуры, заполняем счета
			Услуги = ?(СчетчикУслуг/Документ.ТЧ.Количество() > 0.5, Истина, Ложь);
			ГруппаНовыхНоменклатур = Неопределено;
			Документ.ЗначениеНастроек.Свойство("ГруппаНовыхНоменклатур", ГруппаНовыхНоменклатур);
			ГруппаНоменклатурыПоУмолчанию = ГруппаНовыхНоменклатур.Значение;
			Для каждого СтруктураСтрокиТЧ Из Документ.ТЧ Цикл
				СтрокаТЧ = СтруктураСтрокиТЧ.Значение; 
				
				Если ТипЗнч(СтрокаТЧ.Номенклатура.ИтоговоеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда
					Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
						Услуга = СтрокаТЧ.Номенклатура.ИтоговоеЗначение.Услуга;
					Иначе
						Услуга = (СтрокаТЧ.Номенклатура.ИтоговоеЗначение.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
					КонецЕсли;
					ГруппаНоменклатуры = СтрокаТЧ.Номенклатура.ИтоговоеЗначение.Родитель;
				Иначе
					Услуга = Услуги;
					ГруппаНоменклатуры = ГруппаНоменклатурыПоУмолчанию; 
				КонецЕсли;
				
				СтрокаТЧ.Услуга.СопоставленноеЗначение = Услуга;
				СтрокаТЧ.Услуга.ИтоговоеЗначение = СтрокаТЧ.Услуга.СопоставленноеЗначение;
				СтрокаТЧ.ГруппаНоменклатуры.СопоставленноеЗначение = ГруппаНоменклатуры;
				СтрокаТЧ.ГруппаНоменклатуры.ИтоговоеЗначение = СтрокаТЧ.ГруппаНоменклатуры.СопоставленноеЗначение;
				
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ГруппаНоменклатуры.ИтоговоеЗначение) Тогда
					СтруктураГруппаНовыхНоменклатур = Неопределено;
					Документ.ЗначениеНастроек.Свойство("ГруппаНовыхНоменклатур", СтруктураГруппаНовыхНоменклатур);
					ГруппаНоменклатуры = СтруктураГруппаНовыхНоменклатур.Значение
				Иначе
					ГруппаНоменклатуры = СтрокаТЧ.ГруппаНоменклатуры.ИтоговоеЗначение;	
				КонецЕсли;
				Если ИмяШаблона = "БухгалтерияПредприятия 3.0" И НЕ Документ.ВидДокумента = "СП" Тогда
					РекСчУчета = ЗаполнитьСчета(СтрокаТЧ.Номенклатура.ИтоговоеЗначение, СтрокаШапки.Организация.ИтоговоеЗначение, СтрокаШапки.Склад.ИтоговоеЗначение, ГруппаНоменклатуры);
					ЗаполнитьСчетаВСтроке(СтрокаТЧ, РекСчУчета, Документ.ВидДокумента);
				КонецЕсли;
			КонецЦикла;

		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда

			НалогообложениеНДС = СтрокаШапки.НалогообложениеНДС.СопоставленноеЗначение;
			СуммаВключаетНДС = Ложь;
			Если СтрокаШапки.ВсегоНДС.ИтоговоеЗначение = 0 Тогда
				УчитыватьНДС = Ложь;
			Иначе
				УчитыватьНДС = Истина;
			КонецЕсли;
			
			Для каждого СтруктураСтрокиТЧ Из Документ.ТЧ Цикл
				СтрокаТЧ = СтруктураСтрокиТЧ.Значение; 
				Если ТипЗнч(СтрокаТЧ.Номенклатура.ИтоговоеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда
					ГруппаНоменклатуры = СтрокаТЧ.Номенклатура.ИтоговоеЗначение.Родитель;
				Иначе
					ГруппаНовыхНоменклатур = Неопределено;
					Документ.ЗначениеНастроек.Свойство("ГруппаНовыхНоменклатур", ГруппаНовыхНоменклатур);
					ГруппаНоменклатуры = ГруппаНовыхНоменклатур.Значение;
				КонецЕсли;
				СтрокаТЧ.ГруппаНоменклатуры.СопоставленноеЗначение = ГруппаНоменклатуры;
				СтрокаТЧ.ГруппаНоменклатуры.ИтоговоеЗначение = СтрокаТЧ.ГруппаНоменклатуры.СопоставленноеЗначение;
			КонецЦикла;
		ИначеЕсли ИмяШаблона = "Розница 2.2" Тогда
			
			СуммаВключаетНДС = Ложь;
			УчитыватьНДС = СтрокаШапки.ВсегоНДС.ИтоговоеЗначение <> 0;
			Если СтрокаШапки.ВсегоНДС.ИтоговоеЗначение = 0 Тогда
				УчитыватьНДС = Ложь;
			Иначе
				УчитыватьНДС = Истина;
			КонецЕсли;
			
			Для каждого СтруктураСтрокиТЧ Из Документ.ТЧ Цикл
				СтрокаТЧ = СтруктураСтрокиТЧ.Значение; 
				Если ТипЗнч(СтрокаТЧ.Номенклатура.ИтоговоеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда
					ГруппаНоменклатуры = СтрокаТЧ.Номенклатура.ИтоговоеЗначение.Родитель;
				Иначе
					ГруппаНовыхНоменклатур = Неопределено;
					Документ.ЗначениеНастроек.Свойство("ГруппаНовыхНоменклатур", ГруппаНовыхНоменклатур);
					ГруппаНоменклатуры = ГруппаНовыхНоменклатур.Значение;
				КонецЕсли;
				СтрокаТЧ.ГруппаНоменклатуры.СопоставленноеЗначение = ГруппаНоменклатуры;
				СтрокаТЧ.ГруппаНоменклатуры.ИтоговоеЗначение = СтрокаТЧ.ГруппаНоменклатуры.СопоставленноеЗначение;
			КонецЦикла;
		КонецЕсли;
		
		// Обработка акта на услуги по умолчанию
		Если Документ.ТипРаспознан = "AT" ИЛИ Документ.ТипРаспознан = "SC" Тогда
			ВычислениеСтавкиНДСПоИтогу = Истина;
			КолонкаВсегоЗаполнена = Ложь;
			Для каждого СтруктураСтрокиТЧ Из Документ.ТЧ Цикл
				СтрокаТЧ = СтруктураСтрокиТЧ.Значение; 
				Если Документ.ТипРаспознан = "AT" И НЕ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" И НЕ ИмяШаблона = "УправлениеТорговлей 11.1" И НЕ ИмяШаблона = "Розница 2.2" И ТипЗнч(СтрокаТЧ.Номенклатура.ИтоговоеЗначение) <> Тип("СправочникСсылка.Номенклатура") Тогда
					СтрокаТЧ.Услуга.ИтоговоеЗначение = Истина;	
				КонецЕсли;
				Если СтрокаТЧ.СтавкаНДС.ИсходноеЗначение <> "" ИЛИ (СтрокаТЧ.СуммаНДС.ИсходноеЗначение <> 0 И СтрокаТЧ.Всего.ИсходноеЗначение <> 0) Тогда
					ВычислениеСтавкиНДСПоИтогу = Ложь;
					Если СтрокаТЧ.СтавкаНДС.ИсходноеЗначение = "" Тогда
						СтавкаНДСЧисло = Окр((СтрокаТЧ.СуммаНДС.ИсходноеЗначение/(СтрокаТЧ.Всего.ИсходноеЗначение - СтрокаТЧ.СуммаНДС.ИсходноеЗначение))*100);					
						СтавкаНДС = ПолучитьСтавкуНДС(Строка(СтавкаНДСЧисло), ИмяШаблона);
						СтрокаТЧ.СтавкаНДС.ИтоговоеЗначение = СтавкаНДС;
					КонецЕсли;
				КонецЕсли;
				Если СтрокаТЧ.Всего.ИтоговоеЗначение <> 0 Тогда
					КолонкаВсегоЗаполнена = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если ВычислениеСтавкиНДСПоИтогу Тогда
				Если СтрокаШапки.Всего.ИтоговоеЗначение = 0 ИЛИ СтрокаШапки.ВсегоНДС.ИтоговоеЗначение = 0 Тогда
					СтавкаНДС = ПолучитьСтавкуНДС("", ИмяШаблона);
				Иначе
					Попытка
						СтавкаНДСЧисло = Окр((СтрокаШапки.ВсегоНДС.ИтоговоеЗначение/(СтрокаШапки.Всего.ИтоговоеЗначение - СтрокаШапки.ВсегоНДС.ИтоговоеЗначение))*100);					
						СтавкаНДС = ПолучитьСтавкуНДС(Строка(СтавкаНДСЧисло), ИмяШаблона);
					Исключение
					КонецПопытки;
				КонецЕсли;
				Если (Строка(ТипЗнч(СтавкаНДС)) = "Ставки НДС" И СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС) ИЛИ (Строка(ТипЗнч(СтавкаНДС)) = "Ставка НДС" И Найти(Строка(СтавкаНДС), "БезНДС") <> 0) Тогда
					УчитыватьНДС = Истина;
				КонецЕсли;
				Для каждого СтруктураСтрокиТЧ Из Документ.ТЧ Цикл
					СтрокаТЧ = СтруктураСтрокиТЧ.Значение; 
					СтрокаТЧ.СтавкаНДС.ИтоговоеЗначение = СтавкаНДС;
				КонецЦикла;
			КонецЕсли;	
			Если НЕ КолонкаВсегоЗаполнена И СтрокаШапки.ВсегоНДС.ИтоговоеЗначение <> 0 И СтрокаШапки.Всего.ИтоговоеЗначение = СтрокаШапки.ВсегоНДС.ИтоговоеЗначение + СтрокаШапки.Итого.ИтоговоеЗначение Тогда
				СуммаВключаетНДС = Ложь;
			ИначеЕсли НЕ КолонкаВсегоЗаполнена Тогда
				СуммаВключаетНДС = Истина;
			КонецЕсли;
		КонецЕсли;
				
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			СтрокаШапки.УчитыватьНДС.СопоставленноеЗначение = УчитыватьНДС;
			СтрокаШапки.УчитыватьНДС.ИтоговоеЗначение = УчитыватьНДС;
			СтрокаШапки.СуммаВключаетНДС.СопоставленноеЗначение = СуммаВключаетНДС;
			СтрокаШапки.СуммаВключаетНДС.ИтоговоеЗначение = СуммаВключаетНДС;
		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			СтрокаШапки.ЦенаВключаетНДС.СопоставленноеЗначение = СуммаВключаетНДС;
			СтрокаШапки.ЦенаВключаетНДС.ИтоговоеЗначение = СуммаВключаетНДС;
			Если УчитыватьНДС Тогда
				Если Документ.ВидДокумента = "ПТУ" ИЛИ Документ.ВидДокумента = "ЗП" ИЛИ Документ.ВидДокумента = "ПТ" Тогда
					СтрокаШапки.НалогообложениеНДС.ИтоговоеЗначение = "Закупка облагается НДС";
				Иначе
					СтрокаШапки.НалогообложениеНДС.ИтоговоеЗначение = "Продажа облагается НДС";
				КонецЕсли;
			Иначе
				Если Документ.ВидДокумента = "ПТУ" ИЛИ Документ.ВидДокумента = "ЗП" ИЛИ Документ.ВидДокумента = "ПТ" Тогда
					СтрокаШапки.НалогообложениеНДС.ИтоговоеЗначение = "Закупка не облагается НДС";
				Иначе
					СтрокаШапки.НалогообложениеНДС.ИтоговоеЗначение = "Продажа не облагается НДС";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
			СтрокаШапки.НалогообложениеНДС.СопоставленноеЗначение = ?(УчитыватьНДС, Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС, Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС);
			СтрокаШапки.НалогообложениеНДС.ИтоговоеЗначение = СтрокаШапки.НалогообложениеНДС.СопоставленноеЗначение;
			СтрокаШапки.СуммаВключаетНДС.СопоставленноеЗначение = СуммаВключаетНДС;
			СтрокаШапки.СуммаВключаетНДС.ИтоговоеЗначение = СуммаВключаетНДС;
		ИначеЕсли ИмяШаблона = "Розница 2.2" Тогда
			СтрокаШапки.ЦенаВключаетНДС.СопоставленноеЗначение = СуммаВключаетНДС;
			СтрокаШапки.ЦенаВключаетНДС.ИтоговоеЗначение = СуммаВключаетНДС;
			СтрокаШапки.УчитыватьНДС.СопоставленноеЗначение = УчитыватьНДС;
			СтрокаШапки.УчитыватьНДС.ИтоговоеЗначение = УчитыватьНДС;
		КонецЕсли;
		
		// Вычисление расчетных значений, проверка контрольных сумм и присвоение статусов
		ВычислениеРасчетныхЗначений(Документ, Истина, ИмяШаблона);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнениеРеквизита(ОписаниеРеквизита, ТекущееЗначение, Шапка, СтрокаТЧ = Неопределено)
	
	Если ТипЗнч(ТекущееЗначение) = Тип("Строка") Тогда
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "E", "Е");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "e", "е");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "O", "О");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "o", "о");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "H", "Н");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "K", "К");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "T", "Т");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "P", "Р");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "p", "р");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "A", "А");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "a", "а");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "X", "Х");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "x", "х");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "C", "С");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "c", "с");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "B", "В");
		ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "M", "М");
	КонецЕсли;
	
	Если ОписаниеРеквизита.Выражение <> "" И Найти(ОписаниеРеквизита.Выражение, "[") = 0 Тогда
		ТипКолонки = ОписаниеРеквизита.Тип;
		Если ТипКолонки = "Булево" Тогда
			Если ТекущееЗначение <> Неопределено И ВРЕГ(ТекущееЗначение) = ВРЕГ("Истина") Тогда
				ТекущееЗначение = Истина;
			Иначе
				ТекущееЗначение = Ложь;
			КонецЕсли;
		ИначеЕсли ТипКолонки = "Число" Тогда 
			Если ТекущееЗначение = Неопределено Или ТекущееЗначение = "" Тогда
				ТекущееЗначение = 0
			Иначе
				Попытка
					ТекущееЗначение = ПодготовитьСтрокуКПереводуВТип(ТекущееЗначение, ТипКолонки);
					ТекущееЗначение = Число(ТекущееЗначение);
				Исключение
					ТекущееЗначение = 0;
				КонецПопытки;
			КонецЕсли;
		ИначеЕсли ТипКолонки = "Дата" Тогда
			Если ТекущееЗначение = Неопределено Или ТекущееЗначение = "" Тогда
				ТекущееЗначение = Дата('00010101');
			Иначе
				Дата = СтрокаДатыВДату(ТекущееЗначение);
				СтараяДата = Шапка.Свойство("СтараяДата");
				Если Дата <> Неопределено И ТипЗнч(Дата) = Тип("Дата") Тогда
					Если ОписаниеРеквизита.Идентификатор = "ДатаРождения" ИЛИ ОписаниеРеквизита.Идентификатор = "ДатаВыдачи" ИЛИ (Дата > (ТекущаяДата() - 100000000) И Дата < (ТекущаяДата() + 100000000)) Тогда   // Если дата не попадает в интервал +- около трех лет, то считаем нераспознанной
						ТекущееЗначение = Дата;
					Иначе
						ТекущееЗначение = '00010101';
					КонецЕсли;
				Иначе
					ТекущееЗначение = Дата('00010101');
				КонецЕсли;
			КонецЕсли;
		//ИначеЕсли ТипКолонки = "Строка" Тогда
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "E", "Е");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "e", "е");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "O", "О");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "o", "о");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "H", "Н");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "K", "К");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "T", "Т");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "P", "Р");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "p", "р");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "A", "А");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "a", "а");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "X", "Х");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "x", "х");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "C", "С");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "c", "с");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "B", "В");
		//	ТекущееЗначение = СтрЗаменить(ТекущееЗначение, "M", "М");
		КонецЕсли;
	Иначе 
		Выражение = ОписаниеРеквизита.Выражение;
		Выражение = Сред(Выражение, 2, СтрДлина(Выражение) - 2); 
		Если Выражение = "" Тогда
			ТекущееЗначение = Неопределено;
			Возврат Ложь;
		КонецЕсли;
		Попытка                                                   
			//ТекущееЗначение = Вычислить(Выражение);
			Параметры = Новый Структура("Шапка, СтрокаТЧ", Шапка, СтрокаТЧ);
			ТекущееЗначение = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме(Выражение, Параметры);
		Исключение
			ОписОшибки = ОписаниеОшибки();         
			ТекущееЗначение = Неопределено;
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции

Функция СоздатьОписаниеТипа(ИдентификаторРеквизита, ТипРеквизита)

	ОписаниеТипаРеквизита = "";
	МассивТипов = Новый Массив();	
	
	Если ТипРеквизита = "Число" Тогда
		МассивТипов.Добавить(Тип("Число"));
		Если ИдентификаторРеквизита = "Количество" ИЛИ ИдентификаторРеквизита = "КоличествоУпаковок" Тогда
			
			ОписаниеТипаРеквизита = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
			
		ИначеЕсли ИдентификаторРеквизита = "Цена" 
			ИЛИ ИдентификаторРеквизита = "Сумма"  
			ИЛИ ИдентификаторРеквизита = "СуммаНДС" 
			ИЛИ ИдентификаторРеквизита = "Всего"
			ИЛИ ИдентификаторРеквизита = "СуммаДокумента" 
			ИЛИ ИдентификаторРеквизита = "СуммаСНДС" Тогда
			
			ОписаниеТипаРеквизита = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));	
			
		КонецЕсли;
	ИначеЕсли ТипРеквизита = "Булево" Тогда 
		
		ОписаниеТипаРеквизита = Новый ОписаниеТипов("Булево");
		
	ИначеЕсли ТипРеквизита = "Строка" Тогда // по условиям необходимое описание типов
		
	КонецЕсли;
	
	Возврат ОписаниеТипаРеквизита;
		
КонецФункции


Процедура СопоставлениеРеквизита(ОписаниеРеквизита, Документ, СтруктураНоменклатуры = Неопределено, СозданиеЭлемента = Ложь, ESDLСтруктураОПФ, ИмяШаблона)
		
	//Описание СпособСопоставление, строковые значения ////////////////////////////////////////////
	// 0 -не сопоставлялся
	// 1 -значение из ТЗ правил
	// 2 -простой поиск 
	// 3 -нечеткий поиск                                         
	// 4 -создан новый
	// 5 -словарь
	// 6 -элемент найден по коду
	// 7 -ссылка удалена и задано наименование нового элемента
	// 8 -изменили вручную
	// 9 -прошел все и не сопоставился
	// А -элемент найден по артикулу
	// = -элемент связан с контрагентом/огранизацией
	////////////////////////////////////////////////////////////////////////////////////////////////

	ТипЗнач = ОписаниеРеквизита.Тип;
	Если ПустаяСтрока(ТипЗнач) Тогда
		Возврат;
	КонецЕсли;
	
	ВидЗнач = ОписаниеРеквизита.Вид;
	ТипИВидЗначения = Тип(Строка(ТипЗнач) + ?(ПустаяСтрока(ВидЗнач), "", "." + Строка(ВидЗнач)));
	
	Если СтруктураНоменклатуры = Неопределено Тогда
		Данные = Документ.Шапка;
	Иначе
		Данные = СтруктураНоменклатуры;
	КонецЕсли;
	СтруктураРеквизита = Данные[ОписаниеРеквизита.Идентификатор];
	
	Владелец = ?(ОписаниеРеквизита.Владелец <> "", Данные[ОписаниеРеквизита.Владелец].ИтоговоеЗначение, "");
	Владелец = ?(ТипЗнч(Владелец) = Тип("Строка"), "", Владелец);
	Равен = ?(СтруктураРеквизита.Равен = Неопределено, Ложь, СтруктураРеквизита.Равен);
	ПараметрыСопоставления = Новый Структура("Равен, Владелец, Родитель, СопоставляемоеЗначение, СопоставленноеЗначение, СпособСопоставления, ", Равен, Владелец, "");
	
	//Если СозданиеЭлемента И Документ.Загрузить Тогда
	//	Если ТипЗнач = "СправочникСсылка" И НЕ ТипЗнч(СтруктураРеквизита.ИтоговоеЗначение) = ТипИВидЗначения Тогда
	//		Если НЕ СтруктураРеквизита.ИтоговоеЗначение = "" Тогда
	//			Ссылка = СозданиеШаблон(ОписаниеРеквизита, Документ, Данные, ,НовыеЭлементыСправочников);
	//			Если Ссылка = Неопределено Тогда
	//				СтруктураРеквизита.ИтоговоеЗначение = СозданиеЭлементСправочникаОбщее(ОписаниеРеквизита, Данные); 
	//			Иначе
	//				СтруктураРеквизита.ИтоговоеЗначение = Ссылка;
	//			КонецЕсли;
	//		Иначе
	//			СтруктураРеквизита.ИтоговоеЗначение = Справочники[ВидЗнач].ПустаяСсылка();
	//		КонецЕсли;
	//		СтруктураРеквизита.СпособСопоставления = "4";
	//		Если НЕ СтруктураРеквизита.ИтоговоеЗначение.Пустая() Тогда
	//			СтрокаНовогоЭлемента = НовыеЭлементыСправочников.Добавить();
	//			СтрокаНовогоЭлемента.ВидСправочника = ВидЗнач;
	//			СтрокаНовогоЭлемента.Ссылка = СтруктураРеквизита.ИтоговоеЗначение;
	//			СтрокаНовогоЭлемента.ДокументИД = Документ.ДокументИД;
	//		КонецЕсли;
	//	КонецЕсли;
	//ИначеЕсли СозданиеЭлемента Тогда 
	Если СозданиеЭлемента Тогда 

		// Условие выполняется при загрузке документа в базу
		ПараметрыСопоставления.Вставить("СозданиеЭлемента");
		Сопоставить = Истина;
		Если ТипЗнч(СтруктураРеквизита.ИтоговоеЗначение) = ТипИВидЗначения Тогда
			Если ТипЗнач = "СправочникСсылка" И ТипЗнч(СтруктураРеквизита.ИсходноеЗначение) <> ТипИВидЗначения
			И (СтруктураРеквизита.ИтоговоеЗначение.Пустая() ИЛИ (НЕ СтруктураРеквизита.ИтоговоеЗначение.Пустая() И СтруктураРеквизита.ИтоговоеЗначение.ПолучитьОбъект() = Неопределено)) Тогда
				// В случае битой ссылки создается элемент с исходным значением
				СтруктураРеквизита.ИтоговоеЗначение = СтруктураРеквизита.ИсходноеЗначение;
			Иначе
				// Элемент сопоставлен
				Сопоставить = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если Сопоставить Тогда
			Если СтруктураРеквизита.ИтоговоеЗначение <> "" Тогда
				ПараметрыСопоставления.СопоставляемоеЗначение = СокрЛП(СтруктураРеквизита.ИтоговоеЗначение); 
				СопоставлениеПроизведено = СопоставлениеШаблон(ОписаниеРеквизита, Документ, Данные, ПараметрыСопоставления, ESDLСтруктураОПФ, ИмяШаблона);
				Если СопоставлениеПроизведено <> Истина Тогда
					СопоставлениеОбщее(ОписаниеРеквизита, ПараметрыСопоставления);
				КонецЕсли;
				Если ТипЗнач = "СправочникСсылка" И ТипЗнч(ПараметрыСопоставления.СопоставленноеЗначение) = ТипИВидЗначения И НЕ ПараметрыСопоставления.СопоставленноеЗначение.Пустая() Тогда
					СтруктураРеквизита.ИсходноеЗначение = ПараметрыСопоставления.СопоставленноеЗначение;
					СтруктураРеквизита.ИтоговоеЗначение = ПараметрыСопоставления.СопоставленноеЗначение;
					СтруктураРеквизита.СпособСопоставления = ПараметрыСопоставления.СпособСопоставления;
				ИначеЕсли ТипЗнач = "СправочникСсылка" Тогда
					
					Ссылка = СозданиеШаблон(ОписаниеРеквизита, Документ, Данные, ИмяШаблона);
					Если Ссылка = Неопределено Тогда
						СтруктураРеквизита.ИтоговоеЗначение = СозданиеЭлементСправочникаОбщее(ОписаниеРеквизита, Данные); 
					Иначе
						СтруктураРеквизита.ИтоговоеЗначение = Ссылка;
					КонецЕсли;
					СтруктураРеквизита.СпособСопоставления = "4";
					
					//Если НЕ СтруктураРеквизита.ИтоговоеЗначение.Пустая() Тогда
					//	СтрокаНовогоЭлемента = НовыеЭлементыСправочников.Добавить();
					//	СтрокаНовогоЭлемента.ВидСправочника = ВидЗнач;
					//	СтрокаНовогоЭлемента.Ссылка = СтруктураРеквизита.ИтоговоеЗначение;
					//	СтрокаНовогоЭлемента.ДокументИД = Документ.ДокументИД;
					//КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТипЗнач = "СправочникСсылка" И СтруктураРеквизита.ИтоговоеЗначение = "" Тогда
				СтруктураРеквизита.ИтоговоеЗначение = Справочники[ВидЗнач].ПустаяСсылка();
				СтруктураРеквизита.СпособСопоставления = "4";
			КонецЕсли;
			СтруктураРеквизита.Равен = ПараметрыСопоставления.Равен;
		КонецЕсли;
		//Если ИспользоватьСловарь И СписокЗначенийСправочникиСловаряСоответствий.НайтиПоЗначению(ВидЗнач) <> Неопределено И ТипЗнач = "СправочникСсылка" 
		//	И НЕ СтруктураРеквизита.ИтоговоеЗначение.Пустая() И ЗначениеЗаполнено(СтруктураРеквизита.ИсходноеЗначение)  
		//	И ВРег(СтруктураРеквизита.ИтоговоеЗначение.Наименование) <> ВРег(СтруктураРеквизита.ИсходноеЗначение)
		//	И  (Метаданные.Справочники[ВидЗнач].Реквизиты.Найти("НаименованиеПолное") <> Неопределено И ВРег(СтруктураРеквизита.ИтоговоеЗначение.НаименованиеПолное) <> ВРег(СтруктураРеквизита.ИсходноеЗначение)) Тогда
		//	
		//	СоответствиеПолноеНаименование = ?(Метаданные.Справочники[ВидЗнач].Реквизиты.Найти("НаименованиеПолное") <> Неопределено, СтруктураРеквизита.ИтоговоеЗначение.НаименованиеПолное, СтруктураРеквизита.ИтоговоеЗначение.Наименование);
		//	МассивСтрок = ТаблицаСловаря.НайтиСтроки(Новый Структура("ИмяСправочника, НаименованиеИзДокумента", ВидЗнач, СтруктураРеквизита.ИсходноеЗначение));
		//	Если МассивСтрок.Количество() > 0 Тогда
		//		СтрокаНовогоЭлемента = МассивСтрок[0];
		//		СтрокаНовогоЭлемента.СоответствиеИД = "";
		//	Иначе
		//		СтрокаНовогоЭлемента = ТаблицаСловаря.Добавить();
		//	КонецЕсли;
		//	СтрокаНовогоЭлемента.ИмяСправочника = ВидЗнач;
		//	СтрокаНовогоЭлемента.СоответствиеСсылка = СтруктураРеквизита.ИтоговоеЗначение;
		//	СтрокаНовогоЭлемента.НаименованиеИзДокумента = СтруктураРеквизита.ИсходноеЗначение;
		//	СтрокаНовогоЭлемента.СоответствиеПолноеНаименование = СоответствиеПолноеНаименование;
		//	СтруктураСсылки = ТипСсылки(СтруктураРеквизита.ИтоговоеЗначение);
		//	СтрокаНовогоЭлемента.СоответствиеСсылкаИД = СтруктураСсылки.СсылкаИД;
		//	
		//КонецЕсли;
		
	Иначе
		Если ТипЗнч(СтруктураРеквизита.ИсходноеЗначение) = ТипИВидЗначения Тогда
			Если ЗначениеНеЗаполнено(СтруктураРеквизита.ИсходноеЗначение) Тогда
				СтруктураРеквизита.СопоставленноеЗначение = ПустоеЗначениеТипа(ТипИВидЗначения);
				СтруктураРеквизита.СпособСопоставления = "0";
			Иначе
				СтруктураРеквизита.СопоставленноеЗначение = СтруктураРеквизита.ИсходноеЗначение;
				Если ТипЗнач = "Строка" ИЛИ ТипЗнач = "Число" ИЛИ ТипЗнач = "Дата" Тогда
					СтруктураРеквизита.СпособСопоставления = "0";
				Иначе
					СтруктураРеквизита.СпособСопоставления = "1";	
				КонецЕсли;
			КонецЕсли;
		Иначе
			ПараметрыСопоставления.СопоставляемоеЗначение = СокрЛП(СтруктураРеквизита.ИсходноеЗначение);
			//Если ОписаниеРеквизита.Идентификатор = "Организация" Тогда
			//	ПоискВСловареСоответствий(ПараметрыСопоставления, ВидЗнач);
			//КонецЕсли;
			Если НЕ ПараметрыСопоставления.СпособСопоставления = "5" Тогда
				СопоставлениеПроизведено = СопоставлениеШаблон(ОписаниеРеквизита, Документ, Данные, ПараметрыСопоставления, ESDLСтруктураОПФ, ИмяШаблона);
				Если СопоставлениеПроизведено <> Истина Тогда
					СопоставлениеОбщее(ОписаниеРеквизита, ПараметрыСопоставления);
				//ИначеЕсли ПараметрыСопоставления.СпособСопоставления = "9" И ТипЗнач = "СправочникСсылка" Тогда
				//	//поиск в словаре соответствий	
				//	ПоискВСловареСоответствий(ПараметрыСопоставления, ВидЗнач);
				КонецЕсли;
			КонецЕсли;		
			Если (ОписаниеРеквизита.Идентификатор = "Контрагент" ИЛИ ОписаниеРеквизита.Идентификатор = "Номенклатура") И (ТипЗнч(ПараметрыСопоставления.СопоставленноеЗначение) <> ТипИВидЗначения ИЛИ (ТипЗнч(ПараметрыСопоставления.СопоставленноеЗначение) = ТипИВидЗначения И ПараметрыСопоставления.СопоставленноеЗначение.Пустая())) Тогда
				ПоискПоПолномуНаименованию = Истина;
				Если ОписаниеРеквизита.Идентификатор = "Номенклатура" Тогда
					ПроизводитьНечеткийПоиск = Документ.ЗначениеНастроек.НечеткийПоискНоменклатуры.Значение;
					ПоискТолькоВПриоритетныхГруппах = Документ.ЗначениеНастроек.ПоискТолькоВПриоритетныхГруппах.Значение;	
					Если ПоискТолькоВПриоритетныхГруппах Тогда 
						СписокГруппДляСопоставления = Документ.ЗначениеНастроек.ГруппаНоменклатурДляСопоставления.Значение;	
					Иначе
						СписокГруппДляСопоставления = Неопределено;
						//ПоискПоПолномуНаименованию = (КоличестоЭлементовСправочникаНоменклатура < 5000);
						ПоискПоПолномуНаименованию = Истина;
					КонецЕсли;
				КонецЕсли;
				//Если (ОписаниеРеквизита.Идентификатор = "Контрагент" ИЛИ (ОписаниеРеквизита.Идентификатор = "Номенклатура" И ПроизводитьНечеткийПоиск = Истина)) Тогда
				//	ВероятностьНСС = 70;
				//	СписокВыбораДляЭлемента = ЗаполнитьСписокВыбора(ESDLТаблицаВариантовНечеткогоПоиска, ОписаниеРеквизита, ПараметрыСопоставления.СопоставляемоеЗначение, "", Истина, СписокГруппДляСопоставления, ПоискПоПолномуНаименованию, ESDLСтруктураОПФ);
				//	Если СписокВыбораДляЭлемента.Количество() > 2 Тогда
				//		Вариант = ?(СписокВыбораДляЭлемента[2].Представление = "Обновить список вариантов", 3, 2);
				//		Если СписокВыбораДляЭлемента.Количество() > Вариант Тогда
				//			НаибольшаяВероятность = Число(СокрЛП(Лев(СписокВыбораДляЭлемента[Вариант].Представление, 3)));
				//			Если НаибольшаяВероятность > ВероятностьНСС Тогда
				//				ЭлементПоиска = СписокВыбораДляЭлемента[Вариант].Значение;
				//				ПараметрыСопоставления.СпособСопоставления = "3";
				//				ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
				//			КонецЕсли;
				//		КонецЕсли;
				//	КонецЕсли;
				//КонецЕсли;
			КонецЕсли;
			
			СтруктураРеквизита.СопоставленноеЗначение = ПараметрыСопоставления.СопоставленноеЗначение;
			СтруктураРеквизита.СпособСопоставления = ПараметрыСопоставления.СпособСопоставления;
		КонецЕсли;	
		
		//Если ОписаниеРеквизита.Идентификатор = "ДоговорКонтрагента" Тогда 
		//	ДоговорСсылка = ПодборДоговораКонтрагента(Документ.ДокументИД, ТипИВидЗначения);
		//	Если ДоговорСсылка <> Неопределено Тогда
		//		СтруктураРеквизита.СопоставленноеЗначение =  ДоговорСсылка;
		//		СтруктураРеквизита.СпособСопоставления = "2";
		//	КонецЕсли;
		//КонецЕсли;

		Если (СтруктураРеквизита.СпособСопоставления = "9" ИЛИ СтруктураРеквизита.СпособСопоставления = "1") И НЕ ЗначениеЗаполнено(СтруктураРеквизита.СопоставленноеЗначение) Тогда
			Если СтруктураРеквизита.ИсходноеЗначение <> Неопределено Тогда
				Если НЕ ЗначениеЗаполнено(СтруктураРеквизита.СопоставленноеЗначение) Тогда
					СтруктураРеквизита.СопоставленноеЗначение = СтруктураРеквизита.ИсходноеЗначение;
				КонецЕсли;
			Иначе
				СтруктураРеквизита.СопоставленноеЗначение = "";
			КонецЕсли;
		КонецЕсли;
		
		СтруктураРеквизита.ИтоговоеЗначение = СтруктураРеквизита.СопоставленноеЗначение;
		СтруктураРеквизита.Равен = ПараметрыСопоставления.Равен;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтавкуНДС(ЗначениеСтавки, ИмяШаблона)
	
	СтавкаНДС = Неопределено; 
	
	Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда

		Попытка
			Если ПустаяСтрока(ЗначениеСтавки) Тогда
				СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			ИначеЕсли Найти(ЗначениеСтавки, "10") > 0 Тогда
				СтавкаНДС = Перечисления.СтавкиНДС.НДС10;				
			ИначеЕсли Найти(ЗначениеСтавки, "18") > 0 Тогда
				СтавкаНДС = Перечисления.СтавкиНДС.НДС18;		
			ИначеЕсли Найти(ЗначениеСтавки, "20") > 0 Тогда
				СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
			Иначе
				СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли;
		Исключение
			СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецПопытки;
		
	ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
		
		Если Найти(ЗначениеСтавки, "10") > 0 Тогда
			Наименование = "10%";				
		ИначеЕсли Найти(ЗначениеСтавки, "18") > 0 Тогда
			Наименование = "18%";				
		ИначеЕсли Найти(ЗначениеСтавки, "20") > 0 Тогда
			Наименование = "20%";
		Иначе
			Наименование = "Без НДС";
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтавкиНДС.Ссылка
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", Наименование);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			СтавкаНДС = Выборка.Ссылка;
		Иначе
			Наименование = "Без НДС";
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СтавкиНДС.Ссылка
			|ИЗ
			|	Справочник.СтавкиНДС КАК СтавкиНДС
			|ГДЕ
			|	СтавкиНДС.Наименование = &Наименование";
			Запрос.УстановитьПараметр("Наименование", "Без НДС");
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				СтавкаНДС = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	Возврат СтавкаНДС;
	
КонецФункции


Функция ЗаполнитьСчета(Номенклатура, Организация, Склад, ГруппаНоменклатуры) Экспорт
	
	Параметры = Новый Структура("Номенклатура, Организация, Склад", Номенклатура, Организация, Склад);
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Параметры.Вставить("Номенклатура", Номенклатура);
	Иначе
		Параметры.Вставить("Номенклатура", ГруппаНоменклатуры);
	КонецЕсли;
	
	РекСчУчета = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме("БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Параметры.Организация, Параметры.Номенклатура, Параметры.Склад)", Параметры);
	
	Если НЕ ЗначениеЗаполнено(РекСчУчета.СчетУчета) Тогда
		РекСчУчета.СчетУчета = ПланыСчетов.Хозрасчетный.НайтиПоКоду("41.01");	
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(РекСчУчета.СчетУчетаНДС) Тогда
		РекСчУчета.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НайтиПоКоду("19.03");	
	КонецЕсли;
		
	Возврат  РекСчУчета;
	
	
КонецФункции


Функция ЗаполнитьСчетаВСтроке(СтрокаТЧДокумента, РекСчУчета, ВидДокумента)
	
	Если ВидДокумента = "ПТУ" ИЛИ ВидДокумента = "ПТ" Тогда
		
		СчетУчета = РекСчУчета.СчетУчета;
		Если ЗначениеЗаполнено(СчетУчета) Тогда
			СтрокаТЧДокумента.СчетУчета.ИтоговоеЗначение = СчетУчета;
		КонецЕсли;
		
		СчетУчетаНДС = РекСчУчета.СчетУчетаНДС;
		Если ЗначениеЗаполнено(СчетУчетаНДС) Тогда
			СтрокаТЧДокумента.СчетУчетаНДС.ИтоговоеЗначение = СчетУчетаНДС;
		КонецЕсли;
		СтрокаТЧДокумента.СчетУчета.СопоставленноеЗначение = СтрокаТЧДокумента.СчетУчета.ИтоговоеЗначение;
		СтрокаТЧДокумента.СчетУчетаНДС.СопоставленноеЗначение = СтрокаТЧДокумента.СчетУчетаНДС.ИтоговоеЗначение;
		
	ИначеЕсли ВидДокумента = "РТУ" ИЛИ ВидДокумента = "РТ" Тогда
		
		СчетДоходов  = РекСчУчета.СчетДоходов;
		Если ЗначениеЗаполнено(СчетДоходов) Тогда
			СтрокаТЧДокумента.СчетДоходов.ИтоговоеЗначение = СчетДоходов;
		КонецЕсли;
		
		СчетРасходов = РекСчУчета.СчетРасходов;
		Если ЗначениеЗаполнено(СчетРасходов) Тогда
			СтрокаТЧДокумента.СчетРасходов.ИтоговоеЗначение = СчетРасходов;
		КонецЕсли;
		СчетУчетаНДСПоРеализации = РекСчУчета.СчетУчетаНДСПродажи;
		Если ЗначениеЗаполнено(СчетУчетаНДСПоРеализации) Тогда
			СтрокаТЧДокумента.СчетУчетаНДСПоРеализации.ИтоговоеЗначение = СчетУчетаНДСПоРеализации;
		КонецЕсли;
		
		СчетУчета = РекСчУчета.СчетУчета;
		Если ЗначениеЗаполнено(СчетУчета) Тогда
			СтрокаТЧДокумента.СчетУчета.ИтоговоеЗначение = СчетУчета;
		КонецЕсли;
		СтрокаТЧДокумента.СчетУчета.СопоставленноеЗначение = СтрокаТЧДокумента.СчетУчета.ИтоговоеЗначение;
		СтрокаТЧДокумента.СчетДоходов.СопоставленноеЗначение = СтрокаТЧДокумента.СчетДоходов.ИтоговоеЗначение;
		СтрокаТЧДокумента.СчетРасходов.СопоставленноеЗначение = СтрокаТЧДокумента.СчетРасходов.ИтоговоеЗначение;
		СтрокаТЧДокумента.СчетУчетаНДСПоРеализации.СопоставленноеЗначение = СтрокаТЧДокумента.СчетУчетаНДСПоРеализации.ИтоговоеЗначение;
		
	КонецЕсли;

КонецФункции

Функция СтрокаДатыВДату(Знач СтрокаДаты) Экспорт                                 	
	
	СтрокаДаты = СтрЗаменить(СтрокаДаты,"/",".");
	СтрокаДаты = СтрЗаменить(СтрокаДаты,"'"," ");
	СтрокаДаты = СтрЗаменить(СтрокаДаты,"""","");                            
	СтрокаДаты = СтрЗаменить(СтрокаДаты,"«"," ");
	СтрокаДаты = СтрЗаменить(СтрокаДаты,"»"," ");
	СтрокаДаты = СтрЗаменить(СтрокаДаты,"  ","");
	СтрокаДаты = СтрЗаменить(СтрокаДаты,"  ","");   
	
	Попытка
		ДатаЗнч = Дата(СтрокаДаты + " 00:00:00");
		Возврат ДатаЗнч;
	Исключение
		
		Попытка
			ДатаЗнч = XMLЗначение(Тип("Дата"), СтрокаДаты);
			Возврат ДатаЗнч;
		Исключение
		КонецПопытки;
		
		Попытка

			// The formats are as follows. Exactly the components shown here must be present, with exactly this punctuation.
			//Note that the "T" appears literally in the string, to indicate the beginning of the time element, as specified in ISO 8601.
			// Year:
			// YYYY (eg 1997)
			// Year and month:
			// YYYY-MM (eg 1997-07)
			// Complete date:
			// YYYY-MM-DD (eg 1997-07-16)
			// Complete date plus hours and minutes:
			// YYYY-MM-DDThh:mmTZD (eg 1997-07-16T19:20+01:00)
			// Complete date plus hours, minutes and seconds:
			// YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)
			// Complete date plus hours, minutes, seconds and a decimal fraction of a
			//second
			// YYYY-MM-DDThh:mm:ss.sTZD (eg 1997-07-16T19:20:30.45+01:00)
			Если СтрДлина(СтрокаДаты) = 4 и ТолькоЦифры(СтрокаДаты) Тогда
				// Year:
				// YYYY (eg 1997)
				Возврат Дата(СтрокаДаты,1,1);
			ИначеЕсли СтрДлина(СтрокаДаты) = 7 и ТолькоЦифры(СтрЗаменить(СтрокаДаты,"-","")) И ТолькоЦифры(Лев(СтрокаДаты,4)) Тогда
				// Year and month:
				// YYYY-MM (eg 1997-07)
				СтрокаДаты = СтрЗаменить(СтрокаДаты,"-","");
				СтрокаДаты = СтрокаДаты+"01";
				Возврат Дата(СтрокаДаты);
			ИначеЕсли СтрДлина(СтрокаДаты) = 8 и ТолькоЦифры(СтрокаДаты) Тогда
				// YYYYMMDD
				Возврат Дата(СтрокаДаты);
			ИначеЕсли СтрДлина(СтрокаДаты) = 10 и ТолькоЦифры(СтрЗаменить(СтрокаДаты,"-","")) И ТолькоЦифры(лев(СтрокаДаты,4)) И ТолькоЦифры(Сред(СтрокаДаты,6,2)) И ТолькоЦифры(Сред(СтрокаДаты,9,2)) Тогда
				// Complete date:
				// YYYY-MM-DD (eg 1997-07-16)
				СтрокаДаты = СтрЗаменить(СтрокаДаты,"-","");
				Возврат Дата(СтрокаДаты);
			ИначеЕсли СтрДлина(СтрокаДаты) > 10 и ТолькоЦифры(СтрЗаменить(Лев(СтрокаДаты,10),"-",""))// первая часть предположительно дата
				И (Сред(СтрокаДаты,11,1) = "T") // Разделитель даты и времени на своем месте
				И (Найти(СтрокаДаты,"Z") > 0 или Найти(СтрокаДаты,"+") > 0 или Найти(СтрокаДаты,"-") > 0) // присутствует TZD
				Тогда
				// Complete date plus hours and minutes:
				// YYYY-MM-DDThh:mmTZD (eg 1997-07-16T19:20+01:00)
				// Complete date plus hours, minutes and seconds:
				// YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)
				// Complete date plus hours, minutes, seconds and a decimal fraction of a
				//second
				// YYYY-MM-DDThh:mm:ss.sTZD (eg 1997-07-16T19:20:30.45+01:00)
				// Выделим Дату в формат YYYYMMDD
				ТолькоДата = СтрЗаменить(Лев(СтрокаДаты,10),"-","");
				// Выделим Время в форматы hh:mm или hh:mm:ss или hh:mm:ss.s
				СимвZ = Найти(Сред(СтрокаДаты,12,20),"Z");
				СимвПлюс = Найти(Сред(СтрокаДаты,12,20),"+");
				СимвМинус = Найти(Сред(СтрокаДаты,12,20),"-");
				ДлинаВремени = ?(СимвZ > 0,СимвZ, ?(СимвПлюс > 0, СимвПлюс, СимвМинус))-1;
				ТолькоВремя = Сред(СтрокаДаты,12, ДлинаВремени);
				Часы = Лев(ТолькоВремя,2);
				Минуты = Сред(ТолькоВремя,4,2);
				Секунды = Сред(ТолькоВремя,7,2);
				
				// Дыделим добавку часового пояса
				Если СимвZ > 0 Тогда
					ДобавкаЧасов = 0;
					ДобавкаМинут = 0;
				ИначеЕсли СимвПлюс > 0 Тогда
					ДобавкаЧасов = ?(ТолькоЦифры(Сред(СтрокаДаты,СимвПлюс+12,2)), Число(Сред(СтрокаДаты,СимвПлюс+12,2)), 0);
					ДобавкаЧасов = ?(ТолькоЦифры(Сред(СтрокаДаты,СимвПлюс+15,2)), Число(Сред(СтрокаДаты,СимвПлюс+15,2)), 0);
				Иначе
					ДобавкаЧасов = ?(ТолькоЦифры(Сред(СтрокаДаты,СимвПлюс+12,2)), Число(Сред(СтрокаДаты,СимвПлюс+12,2))*(-1), 0);
					ДобавкаЧасов = ?(ТолькоЦифры(Сред(СтрокаДаты,СимвПлюс+15,2)), Число(Сред(СтрокаДаты,СимвПлюс+15,2))*(-1), 0);
				КонецЕсли;
				
				ДатаЗнч = Дата(ТолькоДата+Часы+Минуты+Секунды);
				ДатаЗнч = ДатаЗнч + (ДобавкаМинут*60 + ДобавкаЧасов*60*60);
				Возврат ДатаЗнч;
				
			Иначе
				// Пробуем формат GNU
				// Сначала разобъем на блоки по пробелу
				МассивБлоков = новый Массив;
				ИщемНачало = Истина;
				ТекБлок = "";
				СтрокаДаты = нрег(СтрокаДаты);
				Для НомерСимволаСтроки = 1 по СтрДлина(СтрокаДаты) цикл
					ТекСимвол = Сред(СтрокаДаты,НомерСимволаСтроки,1);
					Если Не (ТекСимвол = " " или ТекСимвол = ",") Тогда
						ТекБлок = ТекБлок + ТекСимвол;
						ИщемНачало = Ложь;
						продолжить;
					ИначеЕсли ИщемНачало Тогда
						продолжить;
					Иначе
						МассивБлоков.Добавить(ТекБлок);
						ТекБлок = "";
						ИщемНачало = Истина;
					КонецЕсли;
				конеццикла;
				Если Не ИщемНачало Тогда
					МассивБлоков.Добавить(ТекБлок);
				КонецЕсли;
				// Теперь МассивБлоков содержит блоки строки даты
				
				// Добавим литералы днейнедели и месяце (можно добавлять еще языки)
				Мес = новый Соответствие;
				Мес.Вставить("jan",1);
				Мес.Вставить("feb",2);
				Мес.Вставить("mar",3);
				Мес.Вставить("apr",4);
				Мес.Вставить("may",5);
				Мес.Вставить("jun",6);
				Мес.Вставить("jul",7);
				Мес.Вставить("aug",8);
				Мес.Вставить("sep",9);
				Мес.Вставить("sept",9);
				Мес.Вставить("oct",10);
				Мес.Вставить("nov",11);
				Мес.Вставить("dec",12);
				
				Мес.Вставить("jan.",1);
				Мес.Вставить("feb.",2);
				Мес.Вставить("mar.",3);
				Мес.Вставить("apr.",4);
				Мес.Вставить("may.",5);
				Мес.Вставить("jun.",6);
				Мес.Вставить("jul.",7);
				Мес.Вставить("aug.",8);
				Мес.Вставить("sep.",9);
				Мес.Вставить("sept.",9);
				Мес.Вставить("oct.",10);
				Мес.Вставить("nov.",11);
				Мес.Вставить("dec.",12);
				
				Мес.Вставить("january",1);
				Мес.Вставить("february",2);
				Мес.Вставить("febr",2);
				Мес.Вставить("march",3);
				Мес.Вставить("april",4);
				Мес.Вставить("may",5);
				Мес.Вставить("june",6);
				Мес.Вставить("july",7);
				Мес.Вставить("august",8);
				Мес.Вставить("september",9);
				Мес.Вставить("sept",9);
				Мес.Вставить("october",10);
				Мес.Вставить("november",11);
				Мес.Вставить("december",12);
				
				Мес.Вставить("январь",1);
				Мес.Вставить("февраль",2);
				Мес.Вставить("март",3);
				Мес.Вставить("апрель",4);
				Мес.Вставить("май",5);
				Мес.Вставить("июнь",6);
				Мес.Вставить("июль",7);
				Мес.Вставить("август",8);
				Мес.Вставить("сентябрь",9);
				Мес.Вставить("октябрь",10);
				Мес.Вставить("ноябрь",11);
				Мес.Вставить("декабрь",12);
								
				Мес.Вставить("января",1);
				Мес.Вставить("февраля",2);
				Мес.Вставить("марта",3);
				Мес.Вставить("апреля",4);
				Мес.Вставить("мая",5);
				Мес.Вставить("июня",6);
				Мес.Вставить("июля",7);
				Мес.Вставить("августа",8);
				Мес.Вставить("сентября",9);
				Мес.Вставить("октября",10);
				Мес.Вставить("ноября",11);
				Мес.Вставить("декабря",12);
				
				Мес.Вставить("янв",1);
				Мес.Вставить("фев",2);
				Мес.Вставить("мар",3);
				Мес.Вставить("апр",4);
				Мес.Вставить("май",5);
				Мес.Вставить("июн",6);
				Мес.Вставить("июл",7);
				Мес.Вставить("авг",8);
				Мес.Вставить("сен",9);
				Мес.Вставить("окт",10);
				Мес.Вставить("ноя",11);
				Мес.Вставить("дек",12);
				
				Мес.Вставить("янв.",1);
				Мес.Вставить("фев.",2);
				Мес.Вставить("мар.",3);
				Мес.Вставить("апр.",4);
				Мес.Вставить("май.",5);
				Мес.Вставить("июн.",6);
				Мес.Вставить("июл.",7);
				Мес.Вставить("авг.",8);
				Мес.Вставить("сен.",9);
				Мес.Вставить("окт.",10);
				Мес.Вставить("ноя.",11);
				Мес.Вставить("дек.",12);
				
				
				ДНед = новый Массив;
				ДНед.Добавить("monday");
				ДНед.Добавить("tuesday");
				ДНед.Добавить("wednesday");
				ДНед.Добавить("thursday");
				ДНед.Добавить("friday");
				ДНед.Добавить("saturday");
				ДНед.Добавить("sunday");
				ДНед.Добавить("mon");
				ДНед.Добавить("tue");
				ДНед.Добавить("wed");
				ДНед.Добавить("thu");
				ДНед.Добавить("fri");
				ДНед.Добавить("sat");
				ДНед.Добавить("sun");
				
				
				ДНед.Добавить("понедельник");
				ДНед.Добавить("вторник");
				ДНед.Добавить("среда");
				ДНед.Добавить("четверг");
				ДНед.Добавить("пятница");
				ДНед.Добавить("суббота");
				ДНед.Добавить("воскресенье");
				ДНед.Добавить("пн");
				ДНед.Добавить("вт");
				ДНед.Добавить("ср");
				ДНед.Добавить("чт");
				ДНед.Добавить("пт");
				ДНед.Добавить("сб");
				ДНед.Добавить("вс");
				
				// Текущие данные
				День = Неопределено;
				Месяц = Неопределено;
				Год = Неопределено;
				Часов = Неопределено;
				Минут = Неопределено;
				Секунд = Неопределено;
				
				ЗнакДобавки = 1;
				ДобавкаЧасов = Неопределено;
				ДобавкаМинут = Неопределено;
				ЧасовойПояс = Неопределено;
				
				БлокВремени = Неопределено;
				
				БлокВремениСЧасовымПоясом = Неопределено;
				БлокДатыСРазделителем = Неопределено;
				
				ЧислаХ = новый массив; // для неопределенных числовых значений
				
				Для каждого Блок из МассивБлоков цикл
					Если Найти(Блок,":") > 0 и Найти(Блок,"+") = 0 и Найти(Блок,"-") = 0 Тогда
						// Это блок времени (исключили часовой пояс вида +hh:mm и -hh:mm)
						// 20:02:00.000000
						// 20:02
						// 8:02pm
						БлокВремени = Блок;
					ИначеЕсли ДНед.Найти(Блок) <> Неопределено Тогда
						// Это блок дня недели - просто опускаем (его необходимо исключить, чтобы не мешал)
						//продолжить;
					ИначеЕсли НЕ Мес[Блок] = Неопределено Тогда
						// Нашли месяц
						Месяц = Мес[Блок];
						// продолжить;
					ИначеЕсли Найти(Блок, "gmt") > 0 или Найти(Блок, "z") > 0 или Найти(Блок, "utc") > 0 Тогда
						// Нашли блок часового пояса для варианто UTC, UTC+hhmm, UTC-hh:mm
						ЧасовойПояс = Блок;
					ИначеЕсли Лев(Блок,1) = "-" или Лев(Блок,1) = "+" И ТолькоЦифры(СтрЗаменить(Блок,":","")) Тогда
						// Это должен быть только часовой пояс вида +hhmm, -hhmm, +hh:mm, -hh:mm
						ЧасовойПояс = "" + ЧасовойПояс + Блок;
					ИначеЕсли Найти(Блок,":") > 0 и (Найти(Блок, "-") > 0 или Найти(Блок, "+") > 0) Тогда
						// Это время вместе с добавкой вида 20:02-0500 # In EST (U.S. Eastern Standard Time).
						БлокВремениСЧасовымПоясом = Блок;
						Если Найти(БлокВремениСЧасовымПоясом,"-") Тогда
							ЗнакДобавки = -1;
						КонецЕсли;
						МассивВремениИДобавки = РазбитьСтроку("+-",БлокВремениСЧасовымПоясом);
						БлокВремени = МассивВремениИДобавки[0];
						ЧасовойПояс = "" + ?(ЗнакДобавки > 0,"+","-")+МассивВремениИДобавки[1];
						
					ИначеЕсли (Найти(Блок,"-") > 0 И ТолькоЦифры(СтрЗаменить(Блок,"-",""))) 
						Или (Найти(Блок,"/") > 0 И ТолькоЦифры(СтрЗаменить(Блок,"/",""))) 
						Или (Найти(Блок,"\") > 0 и ТолькоЦифры(СтрЗаменить(Блок,"\","")))
						или (Найти(Блок,".") > 0 и ТолькоЦифры(СтрЗаменить(Блок,".",""))) Тогда
						// Это дата формата
						//   1972-09-24 # ISO 8601.
						//72-9-24 # Assume 19xx for 69 through 99,
						//  # 20xx for 00 through 68.
						//72-09-24 # Leading zeros are ignored.
						//9/24/72 # Common U.S. writing.
						// 01.05.02 - тоже возможно проверить
						// 9/24 - без года - день в конце, но с разделителем
						
						
						БлокДатыСРазделителем = Блок;
					ИначеЕсли ТолькоЦифры(Блок) Тогда
						// остались день месц год - день должен быть первым при этом
						// Если месяц числовой то порядок следования год-месяц-день или месяц-день
						// а Если прописью то допустимы
						// day month year
						// day month
						// month day year
						// day-month-year
						//
						//Or, omitting the year:
						// month day
						// С этим разберемся потом
						ЧислаХ.Добавить(Число(Блок));
					ИначеЕсли (Найти(Блок,"-") > 0)
						или (Найти(Блок,"/") > 0)
						или (Найти(Блок,"\") > 0)
						или (Найти(Блок,".") > 0) Тогда
						// может такое 24-sep-72 24/sep/72 24\sep\72 24.sep.72
						БлокДатыСРазделителем = Блок;
					КонецЕсли;
				КонецЦикла;
				// Теперь можно смотреть что есть.
				
				// Сначала дата
				Если БлокДатыСРазделителем <> Неопределено Тогда
					Если (Найти(Блок,"/") > 0 и ТолькоЦифры(СтрЗаменить(Блок,"/",""))) Тогда
						// Амеркианский стандарт 9/24/72 # Common U.S. writing.
						
						МассивДаты = РазбитьСтроку("/.\", БлокДатыСРазделителем);
						КвоЭл = МассивДаты.Количество();
						Если КвоЭл > 2 Тогда
							Год = МассивДаты[2];
							Месяц = МассивДаты[0];
							День = МассивДаты[1];
						Иначе
							Год = Год(ТекущаяДата());
							Месяц = МассивДаты[0];
							День = МассивДаты[1];
						КонецЕсли;
					Иначе
						МассивДаты = РазбитьСтроку("-.", БлокДатыСРазделителем);
						Если МассивДаты.Количество() > 2 Тогда
							// Дата с годом
							Если НЕ ТолькоЦифры(МассивДаты[1]) Тогда
								//месяц прописью -формат день-месц-год
								Месяц = Мес[МассивДаты[1]];
								Год = МассивДаты[2];
								День = МассивДаты[0];
							Иначе
								// месяц числом - формат год-месяц-день
								Год = МассивДаты[0];
								Месяц = МассивДаты[1];
								День = МассивДаты[2];
							КонецЕсли;
						Иначе
							// Дата без года
							Если НЕ Мес[МассивДаты[1]] = Неопределено Тогда
								// месяц прописью на втором месте - на первом день
								Месяц = Мес[МассивДаты[1]];
								День = МассивДаты[0];
								Год = Год(ТекущаяДата());
							ИначеЕсли НЕ Мес[МассивДаты[0]] = Неопределено Тогда
								Месяц = Мес[МассивДаты[0]];
								День = МассивДаты[1];
								Год = Год(ТекущаяДата());
							Иначе // месяц числом без года
								Год = Год(ТекущаяДата());
								Месяц = МассивДаты[0];
								День = МассивДаты[1];
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли Месяц <> Неопределено Тогда
					// Месяц прописью - ищем день и год в ЧислаХ
					День = ЧислаХ[0];
					Если ЧислаХ.Количество() > 1 Тогда
						Год = ЧислаХ[1];
					Иначе
						Год = Год(ТекущаяДата());
					КонецЕсли;
				Иначе // День месяц и годв числаХ
					КвоЧисел = ЧислаХ.Количество();
					Если КвоЧисел > 2 Тогда
						// Год месяц день - хотя такого недолжно быть
						Год = ЧислаХ[0];
						Месяц = ЧислаХ[1];
						День = ЧислаХ[2];
					ИначеЕсли КвоЧисел > 1 Тогда
						// Год опущен Месяц - день
						Год = Год(ТекущаяДата());
						Месяц = ЧислаХ[0];
						День = ЧислаХ[1];
					ИначеЕсли КвоЧисел > 0 Тогда
						// Опущен год и месяц - тоже не должно быть
						День = ЧислаХ[0];
						Год = Год(ТекущаяДата());
						Месяц = Месяц(ТекущаяДата());
					Иначе
						// Опущена вся дата
						День = День(ТекущаяДата());
						Год = Год(ТекущаяДата());
						Месяц = Месяц(ТекущаяДата());
					КонецЕсли;
				КонецЕсли;
				
				// Теперь время
				Если БлокВремени <> Неопределено Тогда
					БлокВремени = СтрЗаменить(БлокВремени, "z", "");
					БлокВремени = СтрЗаменить(БлокВремени, "gmt", "");
					БлокВремени = СтрЗаменить(БлокВремени, "utc", "");
					
					МассивВремени = РазбитьСтроку(":",БлокВремени,3);
					КвоЭлементов = МассивВремени.Количество();
					Если КвоЭлементов > 2 Тогда
						// часы минуты секунды
						Часов = МассивВремени[0];
						СекТекст = Сред(МассивВремени[2],3,4);
						Если Найти(СекТекст,"am") > 0 или Найти(СекТекст,"a.m.") > 0 Тогда
							Часов = ?(Число(Часов) = 12, 0, Число(Часов));
						ИначеЕсли Найти(СекТекст,"pm") > 0 или Найти(СекТекст,"p.m.") > 0 Тогда
							Часов = ?(Число(Часов) = 12, 12, Число(Часов)+12);
						КонецЕсли;
						Минут = МассивВремени[1];
						Секунд = Лев(МассивВремени[2],2);
						
					ИначеЕсли КвоЭлементов > 1 Тогда
						Часов = МассивВремени[0];
						СекТекст = Сред(МассивВремени[1],3,4);
						Если Найти(СекТекст,"am") > 0 или Найти(СекТекст,"a.m.") > 0 Тогда
							Часов = ?(Число(Часов) = 12, 0, Число(Часов));
						ИначеЕсли Найти(СекТекст,"pm") > 0 или Найти(СекТекст,"p.m.") > 0 Тогда
							Часов = ?(Число(Часов) = 12, 12, Число(Часов)+12);
						КонецЕсли;
						Минут = Лев(МассивВремени[1],2);
						Секунд = 0;
					Иначе
						// только часы - не может быть, но пробуем
						Часов = МассивВремени[0];
						Минут = 0;
						Секунд = 0;
					КонецЕсли;
				Иначе
					// время опущено - ставим 0
					Часов = 0;
					Минут = 0;
					Секунд = 0;
					
				КонецЕсли;
				
				// Теперь часовой пояс
				ЧасовойПояс = СтрЗаменить(ЧасовойПояс,"gmt","");
				ЧасовойПояс = СтрЗаменить(ЧасовойПояс,"utc","");
				ЧасовойПояс = СтрЗаменить(ЧасовойПояс,"z","");
				ЧасовойПояс = СтрЗаменить(ЧасовойПояс,":","");
				Если СтрДлина(ЧасовойПояс)<5 Тогда
					// неизвестный формат пояса
					ДобавкаЧасов = 0;
					ДобавкаМинут = 0;
				Иначе
					Если Лев(ЧасовойПояс,1) = "+" Тогда
						ЗнакДобавки = 1;
					ИначеЕсли Лев(ЧасовойПояс,1) = "-" Тогда
						ЗнакДобавки = -1;
					Иначе
						// неверный формат добавки
						ДобавкаЧасов = 0;
						ДобавкаМинут = 0;
					КонецЕсли;
					ДобавкаЧасов = Число(Сред(ЧасовойПояс,2,2))*ЗнакДобавки;
					ДобавкаМинут = Число(Сред(ЧасовойПояс,4,2))*ЗнакДобавки;
				КонецЕсли;
				
				Если Число(год) <= 68 Тогда
					Год = Число(Год) + 2000;
				ИначеЕсли Число(год) < 100 Тогда
					Год = Число(Год) + 1900;
				КонецЕсли;
				ДатаЗнч = Дата(Год,Месяц,День,Часов,Минут,Секунд);
				ДатаЗнч = ДатаЗнч + (ДобавкаМинут*60 + ДобавкаЧасов*60*60);
				Возврат ДатаЗнч;
				
				//where:
				// YYYY = four-digit year
				// MM = two-digit month (01 = January, etc.)
				// DD = two-digit day of month (01 through 31)
				// hh = two digits of hour (00 through 23) (am/pm NOT allowed)
				// mm = two digits of minute (00 through 59)
				// ss = two digits of second (00 through 59)
				// s = one or more digits representing a decimal fraction of a second
				// TZD = time zone designator (Z or +hh:mm or -hh:mm)
				
				//This profile does not specify how many digits may be used to represent the decimal fraction of a second. An adopting standard that permits fractions of a second must specify both the minimum number of digits (a number greater than or equal to one) and the maximum number of digits (the maximum may be stated to be "unlimited").
				
				//This profile defines two ways of handling time zone offsets:
				//Times are expressed in UTC (Coordinated Universal Time), with a special UTC designator ("Z").
				//Times are expressed in local time, together with a time zone offset in hours and minutes. A time zone offset of "+hh:mm" indicates that the date/time uses a local time zone which is "hh" hours and "mm" minutes ahead of UTC. A time zone offset of "-hh:mm" indicates that the date/time uses a local time zone which is "hh" hours and "mm" minutes behind UTC.
				
				//A standard referencing this profile should permit one or both of these ways of handling time zone offsets.
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецПопытки;

	Возврат Неопределено;
	
КонецФункции

Функция ТолькоЦифры(КОД) Экспорт 
	
	Цифры = "0123456789";
	Для НомСимвола = 1 По СтрДлина(КОД) Цикл
		ТекСимвол = Сред(КОД, НомСимвола, 1);
		Если Найти(Цифры, ТекСимвол) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

Функция ПодготовитьСтрокуКПереводуВТип(СтрокаДляПодготовки, БудущийТип) Экспорт
	
	ДлинаСтроки = СтрДлина(СтрокаДляПодготовки);
	Пока Истина Цикл
		СтрокаДляПодготовки = СтрЗаменить(СтрокаДляПодготовки, " ", "");
		СтрокаДляПодготовки = СтрЗаменить(СтрокаДляПодготовки, "^", "");
		СтрокаДляПодготовки = СтрЗаменить(СтрокаДляПодготовки, Символы.НПП, "");
		СтрокаДляПодготовки = СтрЗаменить(СтрокаДляПодготовки, Символы.ПС, "");
		СтрокаДляПодготовки = СтрЗаменить(СтрокаДляПодготовки, Символы.Таб, "");
		Если ДлинаСтроки = СтрДлина(СтрокаДляПодготовки) Тогда
			Прервать;	
		КонецЕсли;
		ДлинаСтроки = СтрДлина(СтрокаДляПодготовки);
	КонецЦикла;
	
	ЗаменаПроизвелась = Ложь;
	Если БудущийТип = "Число" Тогда
		Пока Истина Цикл
			Если Найти(СтрокаДляПодготовки, ",") <> 0 Тогда
				СтрокаДляПодготовки = СтрЗаменить(СтрокаДляПодготовки, ",", ".");
				ЗаменаПроизвелась = Истина;
			КонецЕсли;
			СтрокаДляПодготовки = СтрЗаменить(СтрокаДляПодготовки, ",,", ".");
			СтрокаДляПодготовки = СтрЗаменить(СтрокаДляПодготовки, "..", ".");

			Если ДлинаСтроки = СтрДлина(СтрокаДляПодготовки) И НЕ ЗаменаПроизвелась Тогда
				Прервать;	
			КонецЕсли;
			ЗаменаПроизвелась = Ложь;
			ДлинаСтроки = СтрДлина(СтрокаДляПодготовки);
		КонецЦикла;
		
	ИначеЕсли БудущийТип = "Дата" Тогда
		Пока Истина Цикл
			Если Найти(СтрокаДляПодготовки, ",") <> 0 Тогда
				СтрокаДляПодготовки = СтрЗаменить(СтрокаДляПодготовки, ",", ".");
				ЗаменаПроизвелась = Истина;
			КонецЕсли;
			Если НЕ ЗаменаПроизвелась Тогда
				Прервать;	
			КонецЕсли;
			ДлинаСтроки = СтрДлина(СтрокаДляПодготовки);
			ЗаменаПроизвелась = Ложь;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтрокаДляПодготовки;
	
КонецФункции

Функция РазбитьСтроку(СимволыРазделители, Строка, Лимит = Неопределено) Экспорт
	
	НоваяСтрока = Строка;
	МассивСлов = Новый Массив;
	ИщемНачало = Истина;
	ТекСлово = "";
	Если Найти(Строка,СимволыРазделители) = 1 Тогда
		Строка = Сред(Строка,2);
	КонецЕсли;		
	Для НомерСимволаСтроки = 1 по СтрДлина(Строка) цикл
		ТекСимвол = Сред(Строка,НомерСимволаСтроки,1);
		Если Найти(СимволыРазделители, ТекСимвол) = 0 Тогда
			ТекСлово = ТекСлово + ТекСимвол;
			ИщемНачало = Ложь;
			продолжить;
		ИначеЕсли ИщемНачало Тогда
			МассивСлов.Добавить("");
			Если МассивСлов.Количество() = Лимит Тогда
				Возврат МассивСлов;
			КонецЕсли;
			продолжить;
		Иначе
			МассивСлов.Добавить(ТекСлово);
			Если МассивСлов.Количество() = Лимит Тогда
				Возврат МассивСлов;
			КонецЕсли;
			ТекСлово = "";
			ИщемНачало = Истина;
		КонецЕсли;
	конеццикла;
	Если Не ИщемНачало Тогда
		МассивСлов.Добавить(СокрЛП(ТекСлово));
	КонецЕсли;
	
	Возврат МассивСлов;
	
конецфункции

Процедура ВычислениеРасчетныхЗначений(Документ, Сопоставление = Ложь, ИмяШаблона)
	
	//МассивДокументов = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументИД, ЭтоСделка", ИД, 1)) ;
	//Если МассивДокументов.Количество() > 0 Тогда
	//	Документ = МассивДокументов[0];
	//КонецЕсли;

	Шапка = Документ.Шапка;
	ТЧ = Документ.ТЧ;
	Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда	
		УчитыватьНДС = Шапка.УчитыватьНДС.ИтоговоеЗначение;
		СуммаВключаетНДС = Шапка.СуммаВключаетНДС.ИтоговоеЗначение;
		ИмяКоличество = "Количество";
	ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
		НалогообложениеНДС = Шапка.НалогообложениеНДС.ИтоговоеЗначение;
		УчитыватьНДС = (НалогообложениеНДС = "Закупка облагается НДС" ИЛИ НалогообложениеНДС = "Продажа облагается НДС");
		СуммаВключаетНДС = Шапка.ЦенаВключаетНДС.ИтоговоеЗначение;
		ИмяКоличество = "КоличествоУпаковок";
	ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
		УчитыватьНДС = (Шапка.НалогообложениеНДС.ИтоговоеЗначение = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС);
		СуммаВключаетНДС = Шапка.СуммаВключаетНДС.ИтоговоеЗначение;
		ИмяКоличество = "Количество";
	ИначеЕсли ИмяШаблона = "Розница 2.2" Тогда
		УчитыватьНДС = Шапка.УчитыватьНДС.ИтоговоеЗначение;
		СуммаВключаетНДС = Шапка.ЦенаВключаетНДС.ИтоговоеЗначение;
		ИмяКоличество = "КоличествоУпаковок";
	КонецЕсли;
	СуммаПоДокументу = 0;
	СуммаНДСПоДокументу = 0;
	
	Для каждого СтруктураСтрокиТЧ Из ТЧ Цикл
		
		СтрокаТЧ = СтруктураСтрокиТЧ.Значение;
		СтавкаНДС = СтрокаТЧ.СтавкаНДС.ИтоговоеЗначение;
		СтавкаНДСЧисло = 0;
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0"  Тогда
			СтавкаНДСЧисло = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме("УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Параметры)", СтавкаНДС);
		ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
			СтавкаНДСЧисло = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме("ОбменСКонтрагентамиПереопределяемый.ПолучитьСтавкуНДСЧислом(Параметры)", СтавкаНДС);
		ИначеЕсли ИмяШаблона = "Розница 2.2" Тогда
			СтавкаНДСЧисло = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме("ОбработкаТабличнойЧастиТоварыКлиентСерверПовтИсп.ПолучитьСтавкуНДСЧислом(Параметры)", СтавкаНДС);
		КонецЕсли;
		
		ОбратныйПорядокРасчетаНДС = УчитыватьНДС И НЕ СуммаВключаетНДС И (СтрокаТЧ.Всего.ИсходноеЗначение <> 0);
		Множитель = 100;
		
		//КОЛИЧЕСТВО
		Если СтрокаТЧ[ИмяКоличество].ИтоговоеЗначение = 0 Тогда
			Если СтрокаТЧ.Сумма.ИтоговоеЗначение <> 0 И СтрокаТЧ.Цена.ИтоговоеЗначение <> 0 Тогда
				Количество = СтрокаТЧ.Сумма.ИтоговоеЗначение/СтрокаТЧ.Цена.ИтоговоеЗначение;
				Если Количество - Окр(Количество) < 0.01 Тогда
					Количество = Окр(Количество);
					Если Количество = 0 Тогда
						Количество = 1;	
					КонецЕсли;
				КонецЕсли;
			Иначе
				Количество = 1;
			КонецЕсли;
			СтрокаТЧ[ИмяКоличество].ИтоговоеЗначение = Количество;
			Если Сопоставление Тогда
				СтрокаТЧ[ИмяКоличество].СопоставленноеЗначение = СтрокаТЧ[ИмяКоличество].ИтоговоеЗначение;
				СтрокаТЧ[ИмяКоличество].СпособСопоставления = "8";
			КонецЕсли;
		Иначе
			Количество = СтрокаТЧ[ИмяКоличество].ИтоговоеЗначение;
		КонецЕсли;
		
		Если ОбратныйПорядокРасчетаНДС Тогда
			//От общего к частному
			//Сумма
			
			СтрокаТЧ.Всего.ИтоговоеЗначение = СтрокаТЧ.Всего.ИсходноеЗначение;
			Если СуммаВключаетНДС Тогда
				Сумма = СтрокаТЧ.Всего.ИтоговоеЗначение;
			Иначе
				Если ИмяШаблона= "Розница 2.2" Тогда
					Сумма = Окр(СтрокаТЧ.Всего.ИтоговоеЗначение / (1 + СтавкаНДСЧисло), 2);
				Иначе
					Сумма = Окр(СтрокаТЧ.Всего.ИтоговоеЗначение / (1 + СтавкаНДСЧисло / Множитель), 2);
				КонецЕсли;
			КонецЕсли;
			РазницаСумма = СтрокаТЧ.Сумма.ИсходноеЗначение - Сумма;
			Если (РазницаСумма > 0 И РазницаСумма < 0.03) ИЛИ (РазницаСумма < 0 И РазницаСумма > -0.03) Тогда
				Сумма = СтрокаТЧ.Сумма.ИсходноеЗначение;
			КонецЕсли;
			СтрокаТЧ.Сумма.ИтоговоеЗначение = Сумма;
			
			//Цена
			Цена = Сумма/Количество;
			Цена = Окр(Цена, 2);
			РазницаЦена = СтрокаТЧ.Цена.ИсходноеЗначение - Цена;
			Если (РазницаЦена > 0 И РазницаЦена < 0.03) ИЛИ (РазницаЦена < 0 И РазницаЦена > -0.03) Тогда
				Цена = СтрокаТЧ.Цена.ИсходноеЗначение;
			КонецЕсли;
			СтрокаТЧ.Цена.ИтоговоеЗначение = Цена;
			
			//НДС
			Если ИмяШаблона= "Розница 2.2" Тогда
				СуммаНДС = СтрокаТЧ.Всего.ИтоговоеЗначение * (1 - 1 / (1 + СтавкаНДСЧисло));
			Иначе
				СуммаНДС = СтрокаТЧ.Всего.ИтоговоеЗначение * (1 - 1 / (1 + СтавкаНДСЧисло/Множитель));
			КонецЕсли;
			СуммаНДС = Окр(СуммаНДС, 2);
			РазницаСуммаНДС = СтрокаТЧ.СуммаНДС.ИсходноеЗначение - СуммаНДС;
			Если (РазницаСуммаНДС > 0 И РазницаСуммаНДС < 0.03) ИЛИ (РазницаСуммаНДС < 0 И РазницаСуммаНДС > -0.03) Тогда
				СуммаНДС = СтрокаТЧ.СуммаНДС.ИсходноеЗначение;
			КонецЕсли;
			СтрокаТЧ.СуммаНДС.ИтоговоеЗначение = СуммаНДС;
			
			
		Иначе
			//От частного к общему
			Сумма = СтрокаТЧ.Сумма.ИтоговоеЗначение;
			//Цена
			Если Сумма <> 0 Тогда
				Цена = Сумма/Количество;
				Цена = Окр(Цена, 2);
				РазницаЦена = СтрокаТЧ.Цена.ИсходноеЗначение - Цена;
				Если (РазницаЦена > 0 И РазницаЦена < 0.03) ИЛИ (РазницаЦена < 0 И РазницаЦена > -0.03) Тогда
					Цена = СтрокаТЧ.Цена.ИсходноеЗначение;
				КонецЕсли;
				СтрокаТЧ.Цена.ИтоговоеЗначение = Цена;
			Иначе
				Цена = Окр(СтрокаТЧ.Цена.ИтоговоеЗначение, 2);
				РазницаЦена = СтрокаТЧ.Цена.ИсходноеЗначение - Цена;
				Если (РазницаЦена > 0 И РазницаЦена < 0.03) ИЛИ (РазницаЦена < 0 И РазницаЦена > -0.03) Тогда
					Цена = СтрокаТЧ.Цена.ИсходноеЗначение;
				КонецЕсли;
				СтрокаТЧ.Цена.ИтоговоеЗначение = Цена;
				Сумма = Окр(СтрокаТЧ.Цена.ИтоговоеЗначение * Количество, 2);
				РазницаСумма = СтрокаТЧ.Сумма.ИсходноеЗначение - Сумма;
				Если (РазницаСумма > 0 И РазницаСумма < 0.03) ИЛИ (РазницаСумма < 0 И РазницаСумма > -0.03) Тогда
					Сумма = СтрокаТЧ.Сумма.ИсходноеЗначение;
				КонецЕсли;
				СтрокаТЧ.Сумма.ИтоговоеЗначение = Сумма;
			КонецЕсли;
			//НДС
			Если УчитыватьНДС Тогда
				СуммаНДС = Сумма * СтавкаНДСЧисло / 100;
				СуммаНДС = Окр(СуммаНДС, 2);
			Иначе
				СуммаНДС = 0;
			КонецЕсли;
			//Сумма, Всего
			СтрокаТЧ.Сумма.ИтоговоеЗначение = Сумма;
			Если СуммаВключаетНДС Тогда
				Всего = Сумма;
				Если ИмяШаблона="Розница 2.2" Тогда
					СуммаНДС = Сумма * (1 - 1 / (1 + СтавкаНДСЧисло));
				Иначе
					СуммаНДС = Сумма * (1 - 1 / (1 + СтавкаНДСЧисло/Множитель));
				КонецЕсли;
				РазницаСуммаНДС = СтрокаТЧ.СуммаНДС.ИсходноеЗначение - СуммаНДС;
				Если (РазницаСуммаНДС > 0 И РазницаСуммаНДС < 0.03) ИЛИ (РазницаСуммаНДС < 0 И РазницаСуммаНДС > -0.03) Тогда
					СуммаНДС = СтрокаТЧ.СуммаНДС.ИсходноеЗначение;
				КонецЕсли;
			Иначе
				РазницаСуммаНДС = СтрокаТЧ.СуммаНДС.ИсходноеЗначение - СуммаНДС;
				Если (РазницаСуммаНДС > 0 И РазницаСуммаНДС < 0.03) ИЛИ (РазницаСуммаНДС < 0 И РазницаСуммаНДС > -0.03) Тогда
					СуммаНДС = СтрокаТЧ.СуммаНДС.ИсходноеЗначение;
				КонецЕсли;
				СтрокаТЧ.СуммаНДС.ИтоговоеЗначение = СуммаНДС;

				Всего = Сумма + СуммаНДС;

			КонецЕсли;
			СтрокаТЧ.СуммаНДС.ИтоговоеЗначение = СуммаНДС;
			
			РазницаВсего = СтрокаТЧ.Всего.ИсходноеЗначение - Всего;
			Если (РазницаВсего > 0 И РазницаВсего < 0.03) ИЛИ (РазницаВсего < 0 И РазницаВсего > -0.03) Тогда
				Всего = СтрокаТЧ.Всего.ИсходноеЗначение;
			КонецЕсли;
			СтрокаТЧ.Всего.ИтоговоеЗначение = Всего;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//СУММА ПО ДОКУМЕНТУ
	Для каждого СтруктураСтрокиТЧ Из ТЧ Цикл
		
		СтрокаТЧ = СтруктураСтрокиТЧ.Значение;
		
		СуммаПоДокументу = СуммаПоДокументу + СтрокаТЧ.Всего.ИтоговоеЗначение;
		Если УчитыватьНДС Тогда
			СуммаНДСПоДокументу = СуммаНДСПоДокументу + СтрокаТЧ.СуммаНДС.ИтоговоеЗначение;
		КонецЕсли;
		
		//СОПОСТАВЛЕНИЕ			
		Если Сопоставление Тогда
			СтрокаТЧ.Сумма.СопоставленноеЗначение = СтрокаТЧ.Сумма.ИтоговоеЗначение;
			СтрокаТЧ.СуммаНДС.СопоставленноеЗначение = СтрокаТЧ.СуммаНДС.ИтоговоеЗначение;
			СтрокаТЧ.Цена.СопоставленноеЗначение = СтрокаТЧ.Цена.ИтоговоеЗначение;
		КонецЕсли;

	КонецЦикла;	

	
	ИстинностьВсего = Ложь;
	ИстинностНДСВсего = Ложь;
	Если Окр(СуммаПоДокументу, 2) = Окр(Шапка.Всего.ИтоговоеЗначение, 2) Тогда
		ИстинностьВсего = Истина;	
	КонецЕсли;
	
	Если Окр(СуммаНДСПоДокументу, 2) = Окр(Шапка.ВсегоНДС.ИтоговоеЗначение, 2) ИЛИ НЕ УчитыватьНДС Тогда
		ИстинностНДСВсего = Истина;	
	КонецЕсли;
	
	Если ИстинностьВсего И ИстинностНДСВсего Тогда
		Документ.Статус = 2;
	Иначе
		Документ.Статус = 3;
	КонецЕсли;
	
КонецПроцедуры

                                                                                                                       
// Функция создает таблицу настроек сопоставления и загрузки документов
// 		Для каждого вида документа добавляется свой перечень настроек
//
// Параметры:
//
// Возвращаемое значение:
//		ТаблицаНастроек, тип "ТаблицаЗначений"
//
Функция ТаблицаНастроекЗаполнить(ИмяШаблона) Экспорт
	                                       
	ТаблицаНастроекПоУмолчанию = Новый ТаблицаЗначений;
	ТаблицаНастроекПоУмолчанию.Колонки.Добавить("Идентификатор");	
	ТаблицаНастроекПоУмолчанию.Колонки.Добавить("Значение");	
	ТаблицаНастроекПоУмолчанию.Колонки.Добавить("Синоним");	
	ТаблицаНастроекПоУмолчанию.Колонки.Добавить("СоздаваемыйДокумент");	

	Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
		//ПТУ
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ГруппаНоменклатурДляСопоставления";
		СтрокаНастройки.Синоним = "Приоритетные группы для поиска номенклатуры";
		СтрокаНастройки.Значение = Новый СписокЗначений();
		СтрокаНастройки.СоздаваемыйДокумент = "ПТУ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ПоискТолькоВПриоритетныхГруппах";
		СтрокаНастройки.Синоним = "Искать только в приоритетных группах";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "ПТУ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();         
		СтрокаНастройки.Идентификатор = "НечеткийПоискНоменклатуры";
		СтрокаНастройки.Синоним = "Производить нечеткий поиск номенклатуры";
		СтрокаНастройки.Значение = Истина;
		СтрокаНастройки.СоздаваемыйДокумент = "ПТУ";
		
		//СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		//СтрокаНастройки.Идентификатор = "ПоискПоАртикулу";
		//СтрокаНастройки.Синоним = "Поиск по артикулу";
		//СтрокаНастройки.Значение = Ложь;
		//СтрокаНастройки.СоздаваемыйДокумент = "ПТУ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ГруппаНовыхНоменклатур";
		СтрокаНастройки.Синоним = "Группа для новых номенклатур";
		СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.Номенклатура");
		СтрокаНастройки.СоздаваемыйДокумент = "ПТУ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "БратьДатуВходящего";
		СтрокаНастройки.Синоним = "Создавать документ с датой исходного документа";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "ПТУ";
		
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
			СтрокаНастройки.Идентификатор = "СоздаватьСФ";
			СтрокаНастройки.Синоним = "Создавать счет-фактуру полученный";
			СтрокаНастройки.Значение = Ложь;
			СтрокаНастройки.СоздаваемыйДокумент = "ПТУ";
			
			СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
			СтрокаНастройки.Идентификатор = "СпособЗачетаАвансов";
			СтрокаНастройки.Синоним = "Способ зачета авансов";
			СтрокаНастройки.Значение = ПустоеЗначениеТипа("ПеречислениеСсылка.СпособыЗачетаАвансов");
			СтрокаНастройки.СоздаваемыйДокумент = "ПТУ";
			
		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда 	
			//
			//Если Лев(Метаданные.Версия, 4) = "11.2" ИЛИ Лев(Метаданные.Версия, 3) = "2.0" Тогда
			//	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
			//	СтрокаНастройки.Идентификатор = "СоздаватьСФ";
			//	СтрокаНастройки.Синоним = "Создавать счет-фактуру полученный";
			//	СтрокаНастройки.Значение = Ложь;
			//	СтрокаНастройки.СоздаваемыйДокумент = "ПТУ";
			//КонецЕсли;
			
			СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
			СтрокаНастройки.Идентификатор = "ВидНоменклатурТовар";
			СтрокаНастройки.Синоним = "Вид номенклатур для новых номенклатур(Товары)";
			СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.ВидыНоменклатуры");
			СтрокаНастройки.СоздаваемыйДокумент = "ПТУ";
			
			Если НЕ ИмяШаблона = "Розница 2.2" Тогда
			СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
			СтрокаНастройки.Идентификатор = "ВидНоменклатурУслуга";
			СтрокаНастройки.Синоним = "Вид номенклатур для новых номенклатур(Услуги)";
			СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.ВидыНоменклатуры");
			СтрокаНастройки.СоздаваемыйДокумент = "ПТУ";
			КонецЕсли;
		КонецЕсли;
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "КонтрагентГрузо";
		СтрокаНастройки.Синоним = "Контрагент является грузоотправителем";
		СтрокаНастройки.Значение = Истина;
		СтрокаНастройки.СоздаваемыйДокумент = "ПТУ";
		
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
			СтрокаНастройки.Идентификатор = "ОрганизацияГрузо";
			СтрокаНастройки.Синоним = "Организация является грузополучателем";
			СтрокаНастройки.Значение = Истина;
			СтрокаНастройки.СоздаваемыйДокумент = "ПТУ";
			
		КонецЕсли;
		
		//ПТ
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ГруппаНоменклатурДляСопоставления";
		СтрокаНастройки.Синоним = "Приоритетные группы для поиска номенклатуры";
		СтрокаНастройки.Значение = Новый СписокЗначений();
		СтрокаНастройки.СоздаваемыйДокумент = "ПТ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ПоискТолькоВПриоритетныхГруппах";
		СтрокаНастройки.Синоним = "Искать только в приоритетных группах";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "ПТ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();         
		СтрокаНастройки.Идентификатор = "НечеткийПоискНоменклатуры";
		СтрокаНастройки.Синоним = "Производить нечеткий поиск номенклатуры";
		СтрокаНастройки.Значение = Истина;
		СтрокаНастройки.СоздаваемыйДокумент = "ПТ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ГруппаНовыхНоменклатур";
		СтрокаНастройки.Синоним = "Группа для новых номенклатур";
		СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.Номенклатура");
		СтрокаНастройки.СоздаваемыйДокумент = "ПТ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "БратьДатуВходящего";
		СтрокаНастройки.Синоним = "Создавать документ с датой исходного документа";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "ПТ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ВидНоменклатурТовар";
		СтрокаНастройки.Синоним = "Вид номенклатур для новых номенклатур(Товары)";
		СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.ВидыНоменклатуры");
		СтрокаНастройки.СоздаваемыйДокумент = "ПТ";
		
		//СП
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ГруппаНоменклатурДляСопоставления";
		СтрокаНастройки.Синоним = "Приоритетные группы для поиска номенклатуры";
		СтрокаНастройки.Значение = Новый СписокЗначений();
		СтрокаНастройки.СоздаваемыйДокумент = "СП";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ПоискТолькоВПриоритетныхГруппах";
		СтрокаНастройки.Синоним = "Искать только в приоритетных группах";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "СП";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();         
		СтрокаНастройки.Идентификатор = "НечеткийПоискНоменклатуры";
		СтрокаНастройки.Синоним = "Производить нечеткий поиск номенклатуры";
		СтрокаНастройки.Значение = Истина;
		СтрокаНастройки.СоздаваемыйДокумент = "СП";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ГруппаНовыхНоменклатур";
		СтрокаНастройки.Синоним = "Группа для новых номенклатур";
		СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.Номенклатура");
		СтрокаНастройки.СоздаваемыйДокумент = "СП";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "БратьДатуВходящего";
		СтрокаНастройки.Синоним = "Создавать документ с датой исходного документа";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "СП";
		
		
		//РТУ
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ГруппаНоменклатурДляСопоставления";
		СтрокаНастройки.Синоним = "Приоритетные группы для поиска номенклатуры";
		СтрокаНастройки.Значение = Новый СписокЗначений;
		СтрокаНастройки.СоздаваемыйДокумент = "РТУ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ПоискТолькоВПриоритетныхГруппах";
		СтрокаНастройки.Синоним = "Искать только в приоритетных группах";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "РТУ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "НечеткийПоискНоменклатуры";
		СтрокаНастройки.Синоним = "Производить нечеткий поиск номенклатуры";
		СтрокаНастройки.Значение = Истина;
		СтрокаНастройки.СоздаваемыйДокумент = "РТУ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ГруппаНовыхНоменклатур";
		СтрокаНастройки.Синоним = "Группа для новых номенклатур";
		СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.Номенклатура");
		СтрокаНастройки.СоздаваемыйДокумент = "РТУ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "БратьДатуВходящего";
		СтрокаНастройки.Синоним = "Создавать документ с датой исходного документа";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "РТУ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "СоздаватьСФ";
		СтрокаНастройки.Синоним = "Создавать счет-фактуру выданный";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "РТУ";
		
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
			СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
			СтрокаНастройки.Идентификатор = "СпособЗачетаАвансов";
			СтрокаНастройки.Синоним = "Способ зачета авансов";
			СтрокаНастройки.Значение = ПустоеЗначениеТипа("ПеречислениеСсылка.СпособыЗачетаАвансов");
			СтрокаНастройки.СоздаваемыйДокумент = "РТУ";
			
		ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда 
			
			СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
			СтрокаНастройки.Идентификатор = "ВидНоменклатурТовар";
			СтрокаНастройки.Синоним = "Вид номенклатур для новых номенклатур(Товары)";
			СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.ВидыНоменклатуры");
			СтрокаНастройки.СоздаваемыйДокумент = "РТУ";
			
			СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
			СтрокаНастройки.Идентификатор = "ВидНоменклатурУслуга";
			СтрокаНастройки.Синоним = "Вид номенклатур для новых номенклатур(Услуги)";
			СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.ВидыНоменклатуры");
			СтрокаНастройки.СоздаваемыйДокумент = "РТУ";
			
		КонецЕсли;
		
		Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ (ИмяШаблона = "УправлениеТорговлей 11.1" И НЕ (Лев(Метаданные.Версия, 4) = "11.2" ИЛИ Лев(Метаданные.Версия, 4) = "11.3")) Тогда
			СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
			СтрокаНастройки.Идентификатор = "КонтрагентГрузо";
			СтрокаНастройки.Синоним = "Контрагент является грузополучателем";
			СтрокаНастройки.Значение = Истина;
			СтрокаНастройки.СоздаваемыйДокумент = "РТУ";
			
			СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
			СтрокаНастройки.Идентификатор = "ОрганизацияГрузо";
			СтрокаНастройки.Синоним = "Организация является грузоотправителем";
			СтрокаНастройки.Значение = Истина;
			СтрокаНастройки.СоздаваемыйДокумент = "РТУ";
			
		КонецЕсли;
		
		//РТ
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ГруппаНоменклатурДляСопоставления";
		СтрокаНастройки.Синоним = "Приоритетные группы для поиска номенклатуры";
		СтрокаНастройки.Значение = Новый СписокЗначений;
		СтрокаНастройки.СоздаваемыйДокумент = "РТ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ПоискТолькоВПриоритетныхГруппах";
		СтрокаНастройки.Синоним = "Искать только в приоритетных группах";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "РТ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "НечеткийПоискНоменклатуры";
		СтрокаНастройки.Синоним = "Производить нечеткий поиск номенклатуры";
		СтрокаНастройки.Значение = Истина;
		СтрокаНастройки.СоздаваемыйДокумент = "РТ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ГруппаНовыхНоменклатур";
		СтрокаНастройки.Синоним = "Группа для новых номенклатур";
		СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.Номенклатура");
		СтрокаНастройки.СоздаваемыйДокумент = "РТ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "БратьДатуВходящего";
		СтрокаНастройки.Синоним = "Создавать документ с датой исходного документа";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "РТ";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "СоздаватьСФ";
		СтрокаНастройки.Синоним = "Создавать счет-фактуру выданный";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "РТ";
			
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ВидНоменклатурТовар";
		СтрокаНастройки.Синоним = "Вид номенклатур для новых номенклатур(Товары)";
		СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.ВидыНоменклатуры");
		СтрокаНастройки.СоздаваемыйДокумент = "РТ";

		
	КонецЕсли;

	//КФЛ
	//пока нет настроек
	
	//ПП
	//пока нет настроек

	Если НЕ ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
	
		//ЗП
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ГруппаНоменклатурДляСопоставления";
		СтрокаНастройки.Синоним = "Приоритетные группы для поиска номенклатуры";
		СтрокаНастройки.Значение = Новый СписокЗначений;
		СтрокаНастройки.СоздаваемыйДокумент = "ЗП";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ПоискТолькоВПриоритетныхГруппах";
		СтрокаНастройки.Синоним = "Искать только в приоритетных группах";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "ЗП";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "НечеткийПоискНоменклатуры";
		СтрокаНастройки.Синоним = "Производить нечеткий поиск номенклатуры";
		СтрокаНастройки.Значение = Истина;
		СтрокаНастройки.СоздаваемыйДокумент = "ЗП";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "БратьДатуВходящего";
		СтрокаНастройки.Синоним = "Создавать документ с датой исходного документа";
		СтрокаНастройки.Значение = Ложь;
		СтрокаНастройки.СоздаваемыйДокумент = "ЗП";
		
		СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
		СтрокаНастройки.Идентификатор = "ГруппаНовыхНоменклатур";
		СтрокаНастройки.Синоним = "Группа для новых номенклатур";
		СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.Номенклатура");
		СтрокаНастройки.СоздаваемыйДокумент = "ЗП";
		
		Если ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
			СтрокаНастройки.Идентификатор = "ВидНоменклатурТовар";
			СтрокаНастройки.Синоним = "Вид номенклатур для новых номенклатур(Товары)";
			СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.ВидыНоменклатуры");
			СтрокаНастройки.СоздаваемыйДокумент = "ЗП";
			
			СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
			СтрокаНастройки.Идентификатор = "ВидНоменклатурУслуга";
			СтрокаНастройки.Синоним = "Вид номенклатур для новых номенклатур(Услуги)";
			СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.ВидыНоменклатуры");
			СтрокаНастройки.СоздаваемыйДокумент = "ЗП";
		КонецЕсли;

	КонецЕсли;

	//ПН
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "ГруппаНоменклатурДляСопоставления";
	СтрокаНастройки.Синоним = "Приоритетные группы для поиска номенклатуры";
	СтрокаНастройки.Значение = Новый СписокЗначений();
	СтрокаНастройки.СоздаваемыйДокумент = "ПН";
	
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "ПоискТолькоВПриоритетныхГруппах";
	СтрокаНастройки.Синоним = "Искать только в приоритетных группах";
	СтрокаНастройки.Значение = Ложь;
	СтрокаНастройки.СоздаваемыйДокумент = "ПН";
	
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();         
	СтрокаНастройки.Идентификатор = "НечеткийПоискНоменклатуры";
	СтрокаНастройки.Синоним = "Производить нечеткий поиск номенклатуры";
	СтрокаНастройки.Значение = Истина;
	СтрокаНастройки.СоздаваемыйДокумент = "ПН";
		
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "ГруппаНовыхНоменклатур";
	СтрокаНастройки.Синоним = "Группа для новых номенклатур";
	СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.Номенклатура");
	СтрокаНастройки.СоздаваемыйДокумент = "ПН";

	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "БратьДатуВходящего";
	СтрокаНастройки.Синоним = "Создавать документ с датой исходного документа";
	СтрокаНастройки.Значение = Ложь;
	СтрокаНастройки.СоздаваемыйДокумент = "ПН";
	
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "СоздаватьСФ";
	СтрокаНастройки.Синоним = "Создавать счет-фактуру полученный";
	СтрокаНастройки.Значение = Ложь;
	СтрокаНастройки.СоздаваемыйДокумент = "ПН";
	
	//РН
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "ГруппаНоменклатурДляСопоставления";
	СтрокаНастройки.Синоним = "Приоритетные группы для поиска номенклатуры";
	СтрокаНастройки.Значение = Новый СписокЗначений();
	СтрокаНастройки.СоздаваемыйДокумент = "РН";
	
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "ПоискТолькоВПриоритетныхГруппах";
	СтрокаНастройки.Синоним = "Искать только в приоритетных группах";
	СтрокаНастройки.Значение = Ложь;
	СтрокаНастройки.СоздаваемыйДокумент = "РН";
	
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();         
	СтрокаНастройки.Идентификатор = "НечеткийПоискНоменклатуры";
	СтрокаНастройки.Синоним = "Производить нечеткий поиск номенклатуры";
	СтрокаНастройки.Значение = Истина;
	СтрокаНастройки.СоздаваемыйДокумент = "РН";
		
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "ГруппаНовыхНоменклатур";
	СтрокаНастройки.Синоним = "Группа для новых номенклатур";
	СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.Номенклатура");
	СтрокаНастройки.СоздаваемыйДокумент = "РН";

	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "БратьДатуВходящего";
	СтрокаНастройки.Синоним = "Создавать документ с датой исходного документа";
	СтрокаНастройки.Значение = Ложь;
	СтрокаНастройки.СоздаваемыйДокумент = "РН";
	
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "СоздаватьСФ";
	СтрокаНастройки.Синоним = "Создавать счет-фактуру выданный";
	СтрокаНастройки.Значение = Ложь;
	СтрокаНастройки.СоздаваемыйДокумент = "РН";
	
	//АВР
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "ГруппаНоменклатурДляСопоставления";
	СтрокаНастройки.Синоним = "Приоритетные группы для поиска номенклатуры";
	СтрокаНастройки.Значение = Новый СписокЗначений();
	СтрокаНастройки.СоздаваемыйДокумент = "АВР";
	
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "ПоискТолькоВПриоритетныхГруппах";
	СтрокаНастройки.Синоним = "Искать только в приоритетных группах";
	СтрокаНастройки.Значение = Ложь;
	СтрокаНастройки.СоздаваемыйДокумент = "АВР";
	
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();         
	СтрокаНастройки.Идентификатор = "НечеткийПоискНоменклатуры";
	СтрокаНастройки.Синоним = "Производить нечеткий поиск номенклатуры";
	СтрокаНастройки.Значение = Истина;
	СтрокаНастройки.СоздаваемыйДокумент = "АВР";
		
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "ГруппаНовыхНоменклатур";
	СтрокаНастройки.Синоним = "Группа для новых номенклатур";
	СтрокаНастройки.Значение = ПустоеЗначениеТипа("СправочникСсылка.Номенклатура");
	СтрокаНастройки.СоздаваемыйДокумент = "АВР";

	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "БратьДатуВходящего";
	СтрокаНастройки.Синоним = "Создавать документ с датой исходного документа";
	СтрокаНастройки.Значение = Истина;
	СтрокаНастройки.СоздаваемыйДокумент = "АВР";
	
	СтрокаНастройки = ТаблицаНастроекПоУмолчанию.Добавить();
	СтрокаНастройки.Идентификатор = "СоздаватьСФ";
	СтрокаНастройки.Синоним = "Создавать счет-фактуру выданный";
	СтрокаНастройки.Значение = Ложь;
	СтрокаНастройки.СоздаваемыйДокумент = "АВР";
	
	Возврат ТаблицаНастроекПоУмолчанию;
	
КонецФункции

// Функция реализует создание нового элемента справочника, индивидуальна для конкретной конфигурации.
// 		Параметры:
//			ОписаниеРеквизита - структура описания реквизита
//			Данные - строка таблицы с данными шапки или строки табличной части документа
//			ИД - идентификатор документа
//			ПараметрыСоздания - структура дополнительных параметров создания, необязательный
//
//		Возвращаемое значение:
//   	    Ссылка на новый элемент справочника
//
&НаСервере
Функция СозданиеШаблон(ОписаниеРеквизита, Документ, Данные, ИмяШаблона) Экспорт
	
	ТипЗнач = ОписаниеРеквизита.Тип;
	ВидЗнач = ОписаниеРеквизита.Вид;		
	ТипИВидЗначения = Строка(ТипЗнач) + ?(ПустаяСтрока(ВидЗнач), "", "." + Строка(ВидЗнач));
	
	СтруктураРеквизита = Данные[ОписаниеРеквизита.Идентификатор];
	
	Если ВидЗнач = "Контрагенты" Тогда
		// создание элементов справочника "Контрагенты"	
		
		Наименование = СтруктураРеквизита.ИтоговоеЗначение;
		Если Найти(ОписаниеРеквизита.Идентификатор, "Грузо") = 0 Тогда
			ИНН = Данные.ИНН.ИтоговоеЗначение;
			КПП = Данные.КПП.ИтоговоеЗначение;
			АдресКонтрагента = Данные.АдресКонтрагента.ИтоговоеЗначение;
		Иначе
			ИНН = "";
			КПП = "";
			АдресКонтрагента = ""
		КонецЕсли;
		ВалютаВзаиморасчетов = Неопределено;
		Если НЕ Данные.Свойство("ВалютаДокумента", ВалютаВзаиморасчетов) Тогда
			Данные.Свойство("Валюта", ВалютаВзаиморасчетов);
		КонецЕсли;
		//Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
		//	ВалютаВзаиморасчетов = Данные.ВалютаДокумента.ИтоговоеЗначение;
		//ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
		//	ВалютаВзаиморасчетов = Данные.Валюта.ИтоговоеЗначение;
		//КонецЕсли;
		Если ЗначениеНеЗаполнено(ВалютаВзаиморасчетов) ИЛИ ТипЗнч(ВалютаВзаиморасчетов) <> Тип("СправочникСсылка.Валюты") Тогда
			 Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
				 ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
			 ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда	
				 ВалютаВзаиморасчетов = Константы.ВалютаУчета.Получить(); 
			 КонецЕсли;
		КонецЕсли;
		ДанныеКонтрагента = Новый Структура("КраткоеНаименование, ПолноеНаименование, ИНН, КПП, АдресКонтрагента, ТелефонКонтрагента, Родитель, ВалютаВзаиморасчетов",
		Наименование, Наименование, ИНН, КПП, АдресКонтрагента, "", , ВалютаВзаиморасчетов);
		Если ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
			ДанныеКонтрагента.Вставить("АдресПартнера", АдресКонтрагента);
		КонецЕсли;
		ДанныеКонтрагента.Вставить("ВидДокумента", Документ.ВидДокумента);
		Если Документ.ВидДокумента="ПП" ИЛИ Документ.ВидДокумента="СП" Тогда
			ДанныеКонтрагента.Вставить("БикБанка", Документ.Шапка.БикБанка.ИтоговоеЗначение);
			ДанныеКонтрагента.Вставить("СчетБанка", Документ.Шапка.СчетБанка.ИтоговоеЗначение);
			ДанныеКонтрагента.Вставить("СчетКонтрагентаДокумент", Документ.Шапка.СчетКонтрагентаДокумент.ИтоговоеЗначение);
		КонецЕсли;
		Сообщение = "";
		КонтрагентСсылка = СоздатьКонтрагента(ДанныеКонтрагента, Сообщение);
		//Если ДанныеКонтрагента.Свойство("Партнер") И НЕ ИмяШаблона = "Розница 2.2" Тогда
		//	СтрокаНовогоЭлемента = НовыеЭлементыСправочников.Добавить();
		//	СтрокаНовогоЭлемента.ВидСправочника = "Партнеры";
		//	СтрокаНовогоЭлемента.Ссылка = ДанныеКонтрагента.Партнер;
		//	СтрокаНовогоЭлемента.ДокументИД = Документ.ДокументИД;
		//КонецЕсли;

		Возврат КонтрагентСсылка;
		
	ИначеЕсли ВидЗнач = "БанковскиеСчета" Тогда
		
		СчетСсылка = Справочники.БанковскиеСчета.ПустаяСсылка();
		Если ТипЗнч(Данные.Контрагент.ИтоговоеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
			СчетКонтрагентаДокумент = Данные.СчетКонтрагентаДокумент.ИтоговоеЗначение;
			БикБанка = Данные.БикБанка.ИтоговоеЗначение;
			СчетБанка = Данные.СчетБанка.ИтоговоеЗначение;
			Если СтрДлина(БикБанка) = 9 И СтрДлина(СчетКонтрагентаДокумент) = 20 Тогда
				СпрБанк = Справочники.Банки.НайтиПоКоду(БикБанка);				
				Если СпрБанк = Справочники.Банки.ПустаяСсылка() Тогда
					БанкКонтрагента = Справочники.Банки.СоздатьЭлемент();
					БанкКонтрагента.Наименование = БикБанка;
					БанкКонтрагента.КоррСчет = СчетБанка;
					БанкКонтрагента.Код = БикБанка;
					ЗаписатьОбъект(БанкКонтрагента);
					СпрБанк = БанкКонтрагента.Ссылка
				КонецЕсли;
				БС =Справочники.БанковскиеСчета.СоздатьЭлемент();
				БС.Владелец =  Данные.Контрагент.ИтоговоеЗначение;
				БС.НомерСчета = СчетКонтрагентаДокумент;
				БС.Банк = СпрБанк;
				Если Данные.Свойство("ВалютаВзаиморасчетов") Тогда    
					ВалютаВзаиморасчетов = Данные.ВалютаВзаиморасчетов.ИтоговоеЗначение;
				ИначеЕсли Данные.Свойство("ВалютаДокумента") Тогда 
					ВалютаВзаиморасчетов = Данные.ВалютаДокумента.ИтоговоеЗначение;
				ИначеЕсли Данные.Свойство("Валюта") Тогда 
					ВалютаВзаиморасчетов = Данные.Валюта.ИтоговоеЗначение;
				КонецЕсли;
				БС.ВалютаДенежныхСредств =  ВалютаВзаиморасчетов; 
				БС.Наименование = БС.НомерСчета + ", "+ БС.Банк;
				ЗаписатьОбъект(БС);
				СчетСсылка = БС.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Возврат СчетСсылка;

	ИначеЕсли ВидЗнач = "СоглашенияСКлиентами" Тогда
		// создание элементов справочника "СоглашенияСКлиентами"
		Если ТипЗнч(Данные.Соглашение.ИтоговоеЗначение) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
			СоглашениеСсылка = Данные.Соглашение.ИтоговоеЗначение;
		Иначе
			СоглашениеСсылка = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
		КонецЕсли;	
		Возврат СоглашениеСсылка;
		
	ИначеЕсли ВидЗнач = "ДоговорыКонтрагентов" Тогда
		// создание элементов справочника "ДоговорыКонтрагентов"
		
		Организация = Данные.Организация.ИтоговоеЗначение;
		Контрагент = Данные.Контрагент.ИтоговоеЗначение;
		Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты")
			И НЕ Организация.Пустая() И НЕ Контрагент.Пустая() Тогда
			
			ДоговорОбъект  = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();

			Если ЗначениеЗаполнено(СтруктураРеквизита.ИтоговоеЗначение) Тогда
				ДоговорОбъект.Наименование = СтруктураРеквизита.ИтоговоеЗначение;
			ИначеЕсли ЗначениеЗаполнено(СтруктураРеквизита.ИсходноеЗначение) Тогда
				ДоговорОбъект.Наименование = СтруктураРеквизита.ИтоговоеЗначение;
			Иначе
				ДоговорОбъект.Наименование = "Основной договор";
			КонецЕсли;
			ДоговорОбъект.Организация = Организация;
				
			Если ИмяШаблона = "БухгалтерияПредприятия 3.0"ИЛИ ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
				ДоговорОбъект.Владелец = Контрагент;
				ВалютаВзаиморасчетов = Данные.ВалютаДокумента.ИтоговоеЗначение;
				Если ЗначениеНеЗаполнено(Данные.ВидДоговора.ИтоговоеЗначение) Тогда
					Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
						ДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
					Иначе
						ДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоров.СПоставщиком;
					КонецЕсли;
				Иначе
					ДоговорОбъект.ВидДоговора = Данные.ВидДоговора.ИтоговоеЗначение;
				КонецЕсли;

			ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
				ВалютаВзаиморасчетов = Данные.Валюта.ИтоговоеЗначение;
				ДоговорОбъект.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Действует;
				Если ЗначениеНеЗаполнено(Данные.ТипДоговора.ИтоговоеЗначение) Тогда
					ДоговорОбъект.ТипДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
				Иначе
					ДоговорОбъект.ТипДоговора = Данные.ТипДоговора.ИтоговоеЗначение;
				КонецЕсли;

			КонецЕсли;
			
			Если ЗначениеНеЗаполнено(ВалютаВзаиморасчетов) ИЛИ ТипЗнч(ВалютаВзаиморасчетов) <> Тип("СправочникСсылка.Валюты") Тогда
				Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
					ЗначениеВалюты = Константы.ВалютаРегламентированногоУчета.Получить();
				ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда	
					ЗначениеВалюты = Константы.ВалютаУчета.Получить(); 
				КонецЕсли;
			Иначе
				ЗначениеВалюты = ВалютаВзаиморасчетов;
			КонецЕсли;
			Если ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
				ДоговорОбъект.ВалютаРасчетов = ЗначениеВалюты;
			Иначе
				ДоговорОбъект.ВалютаВзаиморасчетов = ЗначениеВалюты;
			КонецЕсли;
			
			Если (ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" ИЛИ ИмяШаблона = "Розница 2.2") И ЗаписатьОбъект(ДоговорОбъект) Тогда
				ПартнерСсылка = Неопределено;
				Попытка
					ПартнерСсылка = Данные.Партнер.ИтоговоеЗначение.ПолучитьОбъект();
				Исключение
				КонецПопытки;
				Если ПартнерСсылка <> Неопределено Тогда
					ДоговорОбъект.Партнер = ПартнерСсылка.Ссылка;	
				КонецЕсли;
			КонецЕсли;
			
			Если ЗаписатьОбъект(ДоговорОбъект) Тогда
				Попытка
					КонтрагентОбъект = Данные.Контрагент.ИтоговоеЗначение.ПолучитьОбъект();
					КонтрагентОбъект.ОсновнойДоговорКонтрагента = ДоговорОбъект.Ссылка;
					КонтрагентОбъект.Записать();

				Исключение
				КонецПопытки;
				Возврат ДоговорОбъект.Ссылка;	
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		
	ИначеЕсли ВидЗнач = "СтраныМира" Тогда
		// создание элементов справочника "СтраныМира"
		// если элемент не найден ни по наименованию, ни по коду и не подобран из ОКСМ при сопоставлении, то новый элемент в класификаторе не создается
		
		Возврат Справочники.СтраныМира.ПустаяСсылка();
		
	ИначеЕсли ВидЗнач = "КлассификаторЕдиницИзмерения" Тогда
		// создание элементов справочника "КлассификаторЕдиницИзмерения"
		// если элемент не найден ни по наименованию, ни по коду и не подобран из ОКСМ при сопоставлении, то новый элемент в класификаторе не создается
		
		Возврат Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
		
	ИначеЕсли ВидЗнач = "ЕдиницыИзмерения" Тогда
		// создание элементов справочника "КлассификаторЕдиницИзмерения"
		// если элемент не найден ни по наименованию, ни по коду и не подобран из ОКСМ при сопоставлении, то новый элемент в класификаторе не создается
		
		Возврат Справочники.ЕдиницыИзмерения.ПустаяСсылка();
		
	ИначеЕсли ВидЗнач = "УпаковкиЕдиницыИзмерения" Тогда
		// создание элементов справочника "УпаковкиЕдиницыИзмерения"
		// если элемент не найден ни по наименованию, ни по коду и не подобран из ОКСМ при сопоставлении, то новый элемент в класификаторе не создается
		
		Возврат Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		
	ИначеЕсли ВидЗнач = "БазовыеЕдиницыИзмерения" Тогда
				
	     Возврат Справочники.БазовыеЕдиницыИзмерения.ПустаяСсылка();
		 
	ИначеЕсли ВидЗнач = "Номенклатура" Тогда
		
		Если ЗначениеЗаполнено(СтруктураРеквизита.ИтоговоеЗначение) Тогда
			Наименование = СтруктураРеквизита.ИтоговоеЗначение;
		ИначеЕсли ЗначениеЗаполнено(СтруктураРеквизита.ИсходноеЗначение) Тогда
			Наименование = СтруктураРеквизита.ИтоговоеЗначение;
		КонецЕсли;
		Если Наименование <> Неопределено Тогда
			НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
			НоменклатураОбъект.Наименование = Наименование;
			НоменклатураОбъект.НаименованиеПолное = Наименование;
			Если Данные.ГруппаНоменклатуры.ИтоговоеЗначение = "" Тогда
				ГруппаНовыхНоменклатур = Неопределено;
				Документ.ЗначениеНастроек.Свойство("ГруппаНовыхНоменклатур", ГруппаНовыхНоменклатур);
				Данные.ГруппаНоменклатуры.ИтоговоеЗначение = ГруппаНовыхНоменклатур.Значение;
			КонецЕсли;
			НоменклатураОбъект.Родитель = Данные.ГруппаНоменклатуры.ИтоговоеЗначение;
			НоменклатураОбъект.ЕдиницаИзмерения = Данные.ЕдиницаИзмерения.ИтоговоеЗначение;
			НоменклатураОбъект.СтавкаНДС = Данные.СтавкаНДС.ИтоговоеЗначение;
			Если ИмяШаблона = "БухгалтерияПредприятия 3.0" И НЕ Документ.ВидДокумента = "СП" Тогда
				НоменклатураОбъект.Услуга = Данные.Услуга.ИтоговоеЗначение;
				НоменклатураОбъект.НомерГТД = Данные.НомерГТД.ИтоговоеЗначение;
				НоменклатураОбъект.СтранаПроисхождения = Данные.СтранаПроисхождения.ИтоговоеЗначение;
				НоменклатураОбъект.ВидНоменклатуры = Данные.ГруппаНоменклатуры.ИтоговоеЗначение.ВидНоменклатуры;
			ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
				
				НоменклатураОбъект.ВидНоменклатуры = Данные.ВидНоменклатуры.ИтоговоеЗначение;
			  	НоменклатураОбъект.ТипНоменклатуры = Данные.ВидНоменклатуры.ИтоговоеЗначение.ТипНоменклатуры;
				Если ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
				НоменклатураОбъект.Качество = Перечисления.ГрадацииКачества.Новый;
				НоменклатураОбъект.ГруппаДоступа = Данные.ВидНоменклатуры.ИтоговоеЗначение.ГруппаДоступа;
				НоменклатураОбъект.ИспользованиеХарактеристик = Данные.ВидНоменклатуры.ИтоговоеЗначение.ИспользованиеХарактеристик;
				НоменклатураОбъект.ВариантОформленияПродажи = Данные.ВидНоменклатуры.ИтоговоеЗначение.ВариантОформленияПродажи;
				НоменклатураОбъект.ВестиУчетПоГТД = Данные.Свойство("НомерГТД") И ТипЗнч(Данные.НомерГТД.ИтоговоеЗначение)= Тип("СправочникСсылка.НомераГТД") И НЕ Данные.НомерГТД.ИтоговоеЗначение.Пустая();
				КонецЕсли;
			ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
				Если Данные.Услуга.ИтоговоеЗначение Тогда
					НоменклатураОбъект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
				Иначе
					НоменклатураОбъект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас;
				КонецЕсли;
				НоменклатураОбъект.СтранаПроисхождения = Данные.СтранаПроисхождения.ИтоговоеЗначение;
			КонецЕсли;
			Если ЗаписатьОбъект(НоменклатураОбъект) Тогда	
				Если ИмяШаблона = "БухгалтерияПредприятия 3.0" И НЕ Документ.ВидДокумента = "СП" Тогда
					Если Данные.СчетУчета.СпособСопоставления="8" ИЛИ ((Документ.ВидДокумента = "ПТУ" ИЛИ Документ.ВидДокумента = "ПТ") И Данные.СчетУчетаНДС.СпособСопоставления="8")
						ИЛИ (Документ.ВидДокумента = "РТУ" И (Данные.СчетДоходов.СпособСопоставления="8" ИЛИ Данные.СчетРасходов.СпособСопоставления="8" ИЛИ Данные.СчетУчетаНДСПоРеализации.СпособСопоставления="8")) Тогда
						МенеджерЗаписи = РегистрыСведений.СчетаУчетаНоменклатуры.СоздатьМенеджерЗаписи(); 
						МенеджерЗаписи.Номенклатура = НоменклатураОбъект.Ссылка; 
						МенеджерЗаписи.СчетУчета = Данные.СчетУчета.ИтоговоеЗначение; 
						Если (Документ.ВидДокумента = "ПТУ" ИЛИ Документ.ВидДокумента = "ПТ") Тогда
							МенеджерЗаписи.СчетУчетаНДСПоПриобретеннымЦенностям = Данные.СчетУчетаНДС.ИтоговоеЗначение; 
						ИначеЕсли Документ.ВидДокумента = "РТУ" Тогда
							МенеджерЗаписи.СчетУчетаНДСПоРеализации = Данные.СчетДоходов.ИтоговоеЗначение;
							МенеджерЗаписи.СчетДоходовОтРеализации = Данные.СчетРасходов.ИтоговоеЗначение;  
							МенеджерЗаписи.СчетРасходовОтРеализации = Данные.СчетУчетаНДСПоРеализации.ИтоговоеЗначение;
						КонецЕсли;
						МенеджерЗаписи.Записать(Истина); 
					КонецЕсли;
				КонецЕсли;
				Возврат НоменклатураОбъект.Ссылка;
			КонецЕсли;	
		КонецЕсли;
		
		Возврат Справочники.Номенклатура.ПустаяСсылка();
		
	ИначеЕсли ВидЗнач = "НомераГТД" Тогда
		
		НомерГТД = Строка(СтруктураРеквизита.ИтоговоеЗначение);
		К = 0;
		Пока Найти(НомерГТД, "/")<> 0 Цикл
			К = К + 1;
			НомерГТД = Прав(НомерГТД, СтрДлина(НомерГТД) - Найти(НомерГТД, "/"));
		КонецЦикла;
		
		Если НЕ ( К > 1 И К < 4 ) Тогда
			Возврат Справочники.НомераГТД.ПустаяСсылка();
		Иначе
			НомерГТДОбъект = Справочники.НомераГТД.СоздатьЭлемент(); 		
			НомерГТДОбъект.Код =  СтруктураРеквизита.ИтоговоеЗначение;	
			Если ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда  
				НомерГТДОбъект.СтранаПроисхождения = Данные.СтранаПроисхождения.ИтоговоеЗначение;
			КонецЕсли;
			Попытка
				НомерГТДОбъект.Записать();
			Исключение
				Возврат Справочники.НомераГТД.ПустаяСсылка();
			КонецПопытки;
			Возврат НомерГТДОбъект.Ссылка;	 			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция реализует преобразование строки в ссылку, индивидуальна для конкретной конфигурации
//
// Параметры:
//		ОписаниеРеквизита - структура описания реквизита
//		Данные - строка таблицы с данными шапки или строки табличной части документа
//		ИД - идентификатор документа
//		ПараметрыСопоставления - тип "Структура", содержит следующие ключи:
//			СопоставляемоеЗначение - строка для сопоставления
//			СопоставленноеЗначение - в результате выполнения функции будет содержать сопоставленное значение
//			СпособСопоставления - в результате выполнения функции будет содержать способ сопоставления
//			Владелец - данные о владельце реквизита для сопоставления
//
// Возвращаемое значение:   		
//		Истина или Ложь, в зависимости от того выполнялось ли сопоставление строки
//
Функция СопоставлениеШаблон(ОписаниеРеквизита, Документ, Данные, ПараметрыСопоставления, СтруктураОПФ = Неопределено, ИмяШаблона = "") Экспорт
	
	//Описание СпособСопоставление, строковые значения ////////////////////////////////////////////
	// 0 -не сопоставлялся
	// 1 -значение из ТЗ правил
	// 2 -простой поиск 
	// 3 -нечеткий поиск                                         
	// 4 -создан новый
	// 5 -словарь
	// 6 -элемент найден по коду
	// 7 -ссылка удалена и задано наименование нового элемента
	// 8 -изменили вручную
	// 9 -прошел все и не сопоставился
	// А -элемент найден по артикулу
	////////////////////////////////////////////////////////////////////////////////////////////////
	
	ТипЗнач = ОписаниеРеквизита.Тип;
	ВидЗнач = ОписаниеРеквизита.Вид;		
	ТипИВидЗначения = Строка(ТипЗнач) + ?(ПустаяСтрока(ВидЗнач), "", "." + Строка(ВидЗнач));
	
	Если ТипЗнач = "ПеречислениеСсылка" Тогда	
		
		Если ВидЗнач = "СтавкиНДС" Тогда
			
			ПараметрыСопоставления.СопоставленноеЗначение = ПолучитьСтавкуНДС(ПараметрыСопоставления.СопоставляемоеЗначение, ИмяШаблона);
			ПараметрыСопоставления.СпособСопоставления = "2";
			
		ИначеЕсли ВРег(ВидЗнач) = ВРег("ПолФизическогоЛица") Тогда
			Если Найти(ВРег(ПараметрыСопоставления.СопоставляемоеЗначение), "МУЖ") > 0 Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = Перечисления.ПолФизическогоЛица.Мужской;
			Иначе
				ПараметрыСопоставления.СопоставленноеЗначение = Перечисления.ПолФизическогоЛица.Женский;
			КонецЕсли;
			ПараметрыСопоставления.СпособСопоставления = "2";
		Иначе	
			// значение перечисления			
			МетПеречисление = Метаданные.Перечисления.Найти(ВидЗнач);
			Если МетПеречисление = Неопределено Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = Неопределено;
				ПараметрыСопоставления.СпособСопоставления = "9";
			ИначеЕсли МетПеречисление.ЗначенияПеречисления.Найти(ПараметрыСопоставления.СопоставляемоеЗначение) <> Неопределено Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = Перечисления[ВидЗнач][ПараметрыСопоставления.СопоставляемоеЗначение];
				ПараметрыСопоставления.СпособСопоставления = "2";
			Иначе 
				ПараметрыСопоставления.СопоставленноеЗначение = Перечисления[ВидЗнач].ПустаяСсылка();
				ПараметрыСопоставления.СпособСопоставления = "9";
			КонецЕсли;		
		КонецЕсли;
		
	ИначеЕсли ТипЗнач = "СправочникСсылка" Тогда
		
		Если ВидЗнач = "Организации" Тогда
			ОбработанноеНаименование = ОбработкаНаименованияЭлемента(СтруктураОПФ, ПараметрыСопоставления.СопоставляемоеЗначение);
			МассивНаименований = Новый Массив;
			МассивНаименований.Добавить(ПараметрыСопоставления.СопоставляемоеЗначение);
			МассивНаименований.Добавить(ОбработанноеНаименование.КраткоеНаименование);
			МассивНаименований.Добавить(ОбработанноеНаименование.ПолноеНаименование);
			МассивНаименований.Добавить(ОбработанноеНаименование.НаименованиеБезОПФ);
			МассивНаименований.Добавить(ОбработанноеНаименование.КраткоеНаименованиеВариант2);
			МассивНаименований.Добавить(ОбработанноеНаименование.КраткоеНаименованиеВариант3);
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	НЕ Организации.ПометкаУдаления";
			Если ИмяШаблона = "УправлениеНебольшойФирмой 1.6" ИЛИ ИмяШаблона = "Розница 2.2" Тогда
				Запрос.Текст = Запрос.Текст + "
				| И	(Организации.Наименование В (&МассивНаименований)";
				Для Каждого ВариантНаименования Из МассивНаименований Цикл
					Если ВариантНаименования <> "" Тогда
						ВариантНаименования = СтрЗаменить(ВариантНаименования, """", """"""); 
						Запрос.Текст = Запрос.Текст + "
						|	ИЛИ Организации.НаименованиеПолное Подобно """ + ВариантНаименования + """";
					КонецЕсли;
				КонецЦикла;
				Запрос.Текст = Запрос.Текст + ")";
			Иначе
				Запрос.Текст = Запрос.Текст + "
				| И	(Организации.НаименованиеСокращенное В (&МассивНаименований)
				|			ИЛИ Организации.НаименованиеПолное В (&МассивНаименований))";
			КонецЕсли;
		
			Запрос.УстановитьПараметр("МассивНаименований", МассивНаименований);
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Организация = Выборка.Ссылка;
			Иначе
				Организация = Неопределено;
				Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
					Организация = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме("БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(""ОсновнаяОрганизация"")");
				ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
					Организация = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме("УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), ""ОсновнаяОрганизация"")");
				КонецЕсли;
				Если ЗначениеНеЗаполнено(Организация) Тогда
					Выборка = Справочники.Организации.Выбрать();
					Пока Выборка.Следующий() Цикл
						Организация = Выборка.Ссылка;
						Если Метаданные.Справочники["Организации"].Иерархический И Организация.ЭтоГруппа Тогда
							Продолжить;
						Иначе
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;

			ПараметрыСопоставления.СопоставленноеЗначение = Организация;
			Если НЕ ЗначениеЗаполнено(ПараметрыСопоставления.СпособСопоставления) Тогда
				ПараметрыСопоставления.СпособСопоставления = "2";	
			КонецЕсли;
			
			Возврат Истина;
			
		ИначеЕсли ВидЗнач = "Контрагенты" Тогда
			
			ЗначениеНастроекДокумента = Документ.ЗначениеНастроек;
			СтруктураКонтрагентГрузо = Неопределено;
			ЗначениеНастроекДокумента.Свойство("КонтрагентГрузо", СтруктураКонтрагентГрузо);
			Если СтруктураКонтрагентГрузо <> Неопределено Тогда 
				КонтрагентГрузо = СтруктураКонтрагентГрузо.Значение;	
				Если НЕ КонтрагентГрузо Тогда
					Если (ОписаниеРеквизита.Идентификатор = "Грузоотправитель" И (Документ.ВидДокумента = "ПТУ" ИЛИ Документ.ВидДокумента = "ПТ") И 
						((ВРег(Данные.ГрузоотправительДокумент.ИтоговоеЗначение) = "ОНЖЕ" ИЛИ ВРег(Данные.ГрузоотправительДокумент.ИтоговоеЗначение) = "ОН ЖЕ") ИЛИ 
						(Данные.Контрагент.ИсходноеЗначение <> "" И Данные.Контрагент.ИсходноеЗначение = Данные.ГрузоотправительДокумент.ИтоговоеЗначение))) 
						ИЛИ 
						(ОписаниеРеквизита.Идентификатор = "Грузополучатель" И (Документ.ВидДокумента = "РТУ" ИЛИ Документ.ВидДокумента = "РТ") И
						((ВРег(Данные.ГрузополучательДокумент.ИтоговоеЗначение) = "ОНЖЕ" ИЛИ ВРег(Данные.ГрузополучательДокумент.ИтоговоеЗначение) = "ОН ЖЕ") ИЛИ 
						(Данные.Контрагент.ИсходноеЗначение <> "" И Данные.Контрагент.ИсходноеЗначение = Данные.ГрузополучательДокумент.ИтоговоеЗначение))) 
						Тогда
						КонтрагентГрузо = Истина;
						СтруктураКонтрагентГрузо.Значение = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			СтруктураОрганизацияГрузо = Неопределено;
			ЗначениеНастроекДокумента.Свойство("ОрганизацияГрузо", СтруктураОрганизацияГрузо);
			Если СтруктураОрганизацияГрузо <> Неопределено Тогда
				ОрганизацияГрузо = СтруктураОрганизацияГрузо.Значение;	
				Если НЕ ОрганизацияГрузо Тогда
					Если (ОписаниеРеквизита.Идентификатор = "Грузоотправитель" И (Документ.ВидДокумента = "РТУ" ИЛИ Документ.ВидДокумента = "РТ") И
						((ВРег(Данные.ГрузоотправительДокумент.ИтоговоеЗначение) = "ОНЖЕ" ИЛИ ВРег(Данные.ГрузоотправительДокумент.ИтоговоеЗначение) = "ОН ЖЕ") ИЛИ
						(Данные.Организация.ИсходноеЗначение <> "" И Данные.Организация.ИсходноеЗначение = Данные.ГрузоотправительДокумент.ИтоговоеЗначение))) 
						Тогда
						ОрганизацияГрузо = Истина;
						СтруктураОрганизацияГрузо.Значение = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ЭлементПоиска = Справочники.Контрагенты.ПустаяСсылка();
			Если ОписаниеРеквизита.Идентификатор = "Контрагент" Тогда
				ИННКонтрагента = Данные.ИНН.ИтоговоеЗначение;
				КППКонтрагента = Данные.КПП.ИтоговоеЗначение;
				ВалидностьИНН = ВерныйИНН(ИННКонтрагента);    				
				СписокКонтрагентов = Новый СписокЗначений();
				Если ВалидностьИНН Тогда
					СписокКонтрагентов = НайтиКонтрагентаПоИННиКППНовый(ИННКонтрагента, КППКонтрагента);
					Если СписокКонтрагентов <> Неопределено Тогда
						Для Каждого СтрокаКонтрагент Из СписокКонтрагентов Цикл
							ЭлементПоиска = СтрокаКонтрагент.Значение;
							Прервать;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если КонтрагентГрузо = Истина 
					И (ОписаниеРеквизита.Идентификатор = "Грузополучатель" И (Документ.ВидДокумента = "РТУ" ИЛИ Документ.ВидДокумента = "РТ"))
					ИЛИ (ОписаниеРеквизита.Идентификатор = "Грузоотправитель" И (Документ.ВидДокумента = "ПТУ" ИЛИ Документ.ВидДокумента = "ПТ")) Тогда   
					Если Данные.Контрагент.ИтоговоеЗначение <> "" Тогда
						ПараметрыСопоставления.СопоставленноеЗначение =  Данные.Контрагент.ИтоговоеЗначение;
					Иначе	
						ПараметрыСопоставления.СопоставленноеЗначение =  Данные.Контрагент.СопоставленноеЗначение;
					КонецЕсли;
					ПараметрыСопоставления.Равен = Истина;	
					Если ТипЗнч(ПараметрыСопоставления.СопоставленноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда  
						Данные[ОписаниеРеквизита.Идентификатор].ИсходноеЗначение = ПараметрыСопоставления.СопоставленноеЗначение.Наименование;
						ПараметрыСопоставления.СпособСопоставления = "2";
						ЭлементПоиска =  ПараметрыСопоставления.СопоставленноеЗначение;
					Иначе
						Данные[ОписаниеРеквизита.Идентификатор].ИсходноеЗначение = ПараметрыСопоставления.СопоставленноеЗначение;
						ПараметрыСопоставления.СопоставляемоеЗначение = ПараметрыСопоставления.СопоставленноеЗначение;
					КонецЕсли;
				КонецЕсли;
				Если ОрганизацияГрузо = Истина 
					И (ОписаниеРеквизита.Идентификатор = "Грузополучатель" И (Документ.ВидДокумента = "ПТУ" ИЛИ Документ.ВидДокумента = "ПТ"))
					ИЛИ (ОписаниеРеквизита.Идентификатор = "Грузоотправитель" И (Документ.ВидДокумента = "РТУ" ИЛИ Документ.ВидДокумента = "РТ")) Тогда    
					Если ТипЗнч(Данные.Организация.СопоставленноеЗначение) = Тип("СправочникСсылка.Организации") Тогда
						Данные[ОписаниеРеквизита.Идентификатор].ИсходноеЗначение = Данные.Организация.ИтоговоеЗначение.Наименование;
						ПараметрыСопоставления.СопоставляемоеЗначение = Данные.Организация.ИтоговоеЗначение.Наименование;
						ПараметрыСопоставления.Равен = Истина;	
						ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "Контрагенты");
						Если ЭлементПоиска.Пустая() Тогда
							ПараметрыСопоставления.СопоставляемоеЗначение = Данные.Организация.ИтоговоеЗначение.НаименованиеСокращенное;
							ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "Контрагенты");
							Если ЭлементПоиска.Пустая() Тогда
								ПараметрыСопоставления.СопоставляемоеЗначение = Данные.Организация.ИтоговоеЗначение.НаименованиеПолное;
								ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "Контрагенты");
							КонецЕсли;
						КонецЕсли;
						Если НЕ ЭлементПоиска.Пустая() Тогда
							ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
							Если НЕ ЗначениеЗаполнено(ПараметрыСопоставления.СпособСопоставления) Тогда
								ПараметрыСопоставления.СпособСопоставления = "2";	
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Если НЕ ПараметрыСопоставления.Свойство("ПоискТолькоПоИНН") Тогда  
				Если ЭлементПоиска.Пустая() И СтрокаНеИмеетСмысла(ПараметрыСопоставления.СопоставляемоеЗначение) Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = Справочники.Контрагенты.ПустаяСсылка();
					ПараметрыСопоставления.СпособСопоставления = "9";
					Возврат Истина;
				КонецЕсли;
				
				Если ЭлементПоиска.Пустая() Тогда
					Если СтруктураОПФ <> Неопределено Тогда
						ОбработанноеНаименование = ОбработкаНаименованияЭлемента(СтруктураОПФ, ПараметрыСопоставления.СопоставляемоеЗначение);
						МассивНаименований = Новый Массив;
						Если ПараметрыСопоставления.СопоставляемоеЗначение <> "" И МассивНаименований.Найти(ПараметрыСопоставления.СопоставляемоеЗначение)= Неопределено Тогда
							МассивНаименований.Добавить(ПараметрыСопоставления.СопоставляемоеЗначение);
						КонецЕсли;
						Если ОбработанноеНаименование.КраткоеНаименование <> "" И МассивНаименований.Найти(ОбработанноеНаименование.КраткоеНаименование)= Неопределено Тогда
							МассивНаименований.Добавить(ОбработанноеНаименование.КраткоеНаименование);
						КонецЕсли;
						Если ОбработанноеНаименование.ПолноеНаименование <> "" И МассивНаименований.Найти(ОбработанноеНаименование.ПолноеНаименование)= Неопределено Тогда
							МассивНаименований.Добавить(ОбработанноеНаименование.ПолноеНаименование);
						КонецЕсли;
						Если ОбработанноеНаименование.НаименованиеБезОПФ <> "" И МассивНаименований.Найти(ОбработанноеНаименование.НаименованиеБезОПФ)= Неопределено Тогда
							МассивНаименований.Добавить(ОбработанноеНаименование.НаименованиеБезОПФ);
						КонецЕсли;
						Если ОбработанноеНаименование.КраткоеНаименованиеВариант2 <> "" И МассивНаименований.Найти(ОбработанноеНаименование.КраткоеНаименованиеВариант2)= Неопределено Тогда
							МассивНаименований.Добавить(ОбработанноеНаименование.КраткоеНаименованиеВариант2);
						КонецЕсли;
						Если ОбработанноеНаименование.КраткоеНаименованиеВариант3 <> "" И МассивНаименований.Найти(ОбработанноеНаименование.КраткоеНаименованиеВариант3)= Неопределено Тогда
							МассивНаименований.Добавить(ОбработанноеНаименование.КраткоеНаименованиеВариант3);
						КонецЕсли;
						
						Иерархический = ?(Метаданные.Справочники.Контрагенты.Иерархический И Метаданные.Справочники.Контрагенты.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов, Истина, Ложь);
						Если Иерархический Тогда
							НЕГруппа = " И НЕ Контрагенты.ЭтоГруппа";
						Иначе
							НЕГруппа = "";
						КонецЕсли;
						Запрос = Новый Запрос;
						Запрос.Текст = 
						"ВЫБРАТЬ ПЕРВЫЕ 1
						|	Контрагенты.Ссылка
						|ИЗ
						|	Справочник.Контрагенты КАК Контрагенты
						|ГДЕ
						|	НЕ Контрагенты.ПометкаУдаления" + НЕГруппа;
						//Если ИмяШаблона = "УправлениеНебольшойФирмой 1.6" ИЛИ ИмяШаблона = "Розница 2.2" Тогда
							к = 0;
							Для Каждого ВариантНаименования Из МассивНаименований Цикл
								Если ВариантНаименования <> "" Тогда
									ВариантНаименования = СтрЗаменить(ВариантНаименования, """", """"""); 
									Если к = 0 Тогда
										Запрос.Текст = Запрос.Текст + "
										|			И (Контрагенты.НаименованиеПолное Подобно """ + ВариантНаименования + """";
										к = к + 1;
									Иначе
										Запрос.Текст = Запрос.Текст + "
										|			ИЛИ Контрагенты.НаименованиеПолное Подобно """ + ВариантНаименования + """";
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							Если к > 0 тогда
								Запрос.Текст = Запрос.Текст + ")";
							КонецЕсли;
						//Иначе
						//	Запрос.Текст = Запрос.Текст + "
						//	| И	(Контрагенты.НаименованиеПолное В (&МассивНаименований) ИЛИ	Контрагенты.Наименование В (&МассивНаименований))";
						//КонецЕсли;
												
						//Запрос.УстановитьПараметр("МассивНаименований", МассивНаименований);
						РезультатЗапроса = Запрос.Выполнить();
						Выборка = РезультатЗапроса.Выбрать();
						Если Выборка.Следующий() Тогда
							ЭлементПоиска = Выборка.Ссылка;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЭлементПоиска.Пустая() Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
				Если НЕ ЗначениеЗаполнено(ПараметрыСопоставления.СпособСопоставления) Тогда
					ПараметрыСопоставления.СпособСопоставления = "2";	
				КонецЕсли;
				Если ОписаниеРеквизита.Идентификатор = "Контрагент" Тогда				
					Данные.ИНН.ИтоговоеЗначение = ЭлементПоиска.ИНН;
					Данные.КПП.ИтоговоеЗначение = ЭлементПоиска.КПП;
					Данные.АдресКонтрагента.ИтоговоеЗначение = ПолучитьКонтактнуюИнформациюКонтрагента(ЭлементПоиска, "Юридический");
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(ПараметрыСопоставления.СопоставляемоеЗначение) Тогда
				Если ОбработанноеНаименование <> Неопределено Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = ОбработанноеНаименование.КраткоеНаименование;
				Иначе
					ПараметрыСопоставления.СопоставленноеЗначение = ПараметрыСопоставления.СопоставляемоеЗначение;
				КонецЕсли;
			Иначе
				ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
			КонецЕсли;

			Если ЭлементПоиска.Пустая() Тогда
				ПараметрыСопоставления.СпособСопоставления = "9";
			Иначе
				Если НЕ ЗначениеЗаполнено(ПараметрыСопоставления.СпособСопоставления) Тогда
					ПараметрыСопоставления.СпособСопоставления = "2";	
				КонецЕсли;
			КонецЕсли;
			
			Возврат Истина;
			
		ИначеЕсли ВидЗнач = "Валюты" Тогда
			
			Валюта = НайтиВСправочнике(ПараметрыСопоставления, ВидЗнач);
			Если Валюта.Пустая() Тогда
				Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
					Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
				ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда	
					Валюта = Константы.ВалютаУчета.Получить(); 
				КонецЕсли;

			КонецЕсли;
			ПараметрыСопоставления.СопоставленноеЗначение = Валюта;
			ПараметрыСопоставления.СпособСопоставления = "2";
			
			Возврат Истина;
						
		ИначеЕсли ВидЗнач = "БанковскиеСчета" Тогда	                  
			ЭлементПоиска = Справочники.БанковскиеСчета.ПустаяСсылка();           
			Если НЕ ТипЗнч(ПараметрыСопоставления.Владелец) = Тип("Строка") Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	БанковскиеСчета.Ссылка
				|ИЗ
				|	Справочник.БанковскиеСчета КАК БанковскиеСчета
				|ГДЕ
				|	БанковскиеСчета.Владелец = &Владелец
				|	И НЕ БанковскиеСчета.ПометкаУдаления";
				Запрос.УстановитьПараметр("Владелец", ПараметрыСопоставления.Владелец);
				
				Если (Документ.Исходящий И ТипЗнч(ПараметрыСопоставления.Владелец) = Тип("СправочникСсылка.Организации")) ИЛИ 
					(НЕ Документ.Исходящий И ТипЗнч(ПараметрыСопоставления.Владелец) = Тип("СправочникСсылка.Контрагенты")) Тогда
					Запрос.Текст = Запрос.Текст + " 
					|	И БанковскиеСчета.НомерСчета = &НомерСчета
					|	И БанковскиеСчета.Банк.Код = &БИК";
					Запрос.УстановитьПараметр("НомерСчета", Данные.СчетКонтрагентаДокумент.ИсходноеЗначение);
					Запрос.УстановитьПараметр("БИК", Данные.БикБанка.ИсходноеЗначение);
				КонецЕсли;
				РезультатЗапроса = Запрос.Выполнить();
				Выборка = РезультатЗапроса.Выбрать();
				Если Выборка.Следующий() Тогда
					ЭлементПоиска = Выборка.Ссылка;
				КонецЕсли;
				
				Если ЭлементПоиска.Пустая() Тогда  
					Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
						ЭлементПоиска = ПараметрыСопоставления.Владелец.ОсновнойБанковскийСчет;
					ИначеЕсли  ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
						ЭлементПоиска = ПараметрыСопоставления.Владелец.БанковскийСчетПоУмолчанию;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ПараметрыСопоставления.СопоставленноеЗначение = Неопределено Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
				ПараметрыСопоставления.СпособСопоставления = "2";
			КонецЕсли;
			
			Возврат Истина;


		ИначеЕсли ВидЗнач = "ДоговорыКонтрагентов" Тогда
			
			Если ПараметрыСопоставления.Владелец = "" Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = "Основной договор";
				ПараметрыСопоставления.СпособСопоставления = "9";
				Возврат Истина;
			КонецЕсли;
			
			Если ЗначениеНеЗаполнено(ПараметрыСопоставления.Владелец) Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				ПараметрыСопоставления.СпособСопоставления = "9";
				Возврат Истина;
			КонецЕсли;
			
			Организация = Данные.Организация.ИтоговоеЗначение;
			
			Если Данные.Свойство("ВалютаДокумента") Тогда
				ВалютаВзаиморасчетов = Данные.ВалютаДокумента.ИтоговоеЗначение;
			ИначеЕсли Данные.Свойство("Валюта") Тогда
				ВалютаВзаиморасчетов = Данные.Валюта.ИтоговоеЗначение;
			КонецЕсли;
			Если ЗначениеНеЗаполнено(ВалютаВзаиморасчетов) ИЛИ (ТипЗнч(ВалютаВзаиморасчетов) <> "СправочникСсылка.Валюты") Тогда
				Если ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
					ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
				ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда	
					ВалютаВзаиморасчетов = Константы.ВалютаУчета.Получить(); 
				КонецЕсли;
			КонецЕсли;
			
			ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			Если Данные.Свойство("ВидДоговора") Тогда
				ОтборВидДоговора = Данные.ВидДоговора.ИтоговоеЗначение;
				Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
					Параметры = Новый Массив;
					Параметры.Добавить(ДоговорКонтрагента);
					Параметры.Добавить(ПараметрыСопоставления.Владелец);
					Параметры.Добавить(Организация);
					Попытка
						РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации("РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента", Параметры);
					Исключение
						РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации("БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента", Параметры);
					КонецПопытки;
				ИначеЕсли ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
					Если Не ПараметрыСопоставления.Владелец.ВестиРасчетыПоДоговорам Тогда
						ДоговорКонтрагента = ПараметрыСопоставления.Владелец.ДоговорПоУмолчанию;
					Иначе
						СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ, Данные.ВидДоговора.ИтоговоеЗначение);
						ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(ПараметрыСопоставления.Владелец, Организация, СписокВидовДоговоров);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Данные.Свойство("ТипДоговора") Тогда
				ОтборВидДоговора = Данные.ТипДоговора.ИтоговоеЗначение;
			КонецЕсли;
			
			Если НЕ ДоговорКонтрагента.Пустая() Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = ДоговорКонтрагента;
				ПараметрыСопоставления.СпособСопоставления = "2";	
			Иначе
				
				Запрос = Новый Запрос();
				Запрос.УстановитьПараметр("Контрагент", ПараметрыСопоставления.Владелец);
				Запрос.УстановитьПараметр("Организация",Организация);
				Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
				Запрос.УстановитьПараметр("Наименование", ПараметрыСопоставления.СопоставляемоеЗначение);
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|ГДЕ
				|	ДоговорыКонтрагентов.Наименование = &Наименование
				|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
				|	И ДоговорыКонтрагентов.Организация = &Организация";						   
				
				Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
					
					Запрос.Текст = Запрос.Текст + "
					|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
					|	И ДоговорыКонтрагентов.Владелец = &Контрагент";
					Если НЕ ЗначениеНеЗаполнено(ОтборВидДоговора) Тогда
						Запрос.Текст = Запрос.Текст+"
						|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора";  
						Запрос.УстановитьПараметр("ВидДоговора", ОтборВидДоговора);
					КонецЕсли;
					Запрос.Текст = Запрос.Текст + " 
					|	УПОРЯДОЧИТЬ ПО
					|	ДоговорыКонтрагентов.Дата УБЫВ";
					
				ИначеЕсли  ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
					
					Запрос.Текст = Запрос.Текст + "
					|	И ДоговорыКонтрагентов.ВалютаРасчетов = &ВалютаВзаиморасчетов
					|	И ДоговорыКонтрагентов.Владелец = &Контрагент";
					Если НЕ ЗначениеНеЗаполнено(ОтборВидДоговора) Тогда
						Запрос.Текст = Запрос.Текст+"
						|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора";  
						Запрос.УстановитьПараметр("ВидДоговора", ОтборВидДоговора);
					КонецЕсли;
					Запрос.Текст = Запрос.Текст + " 
					|	УПОРЯДОЧИТЬ ПО
					|	ДоговорыКонтрагентов.ДатаДоговора УБЫВ";

				ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
					Запрос.Текст = Запрос.Текст + "
					|	И ДоговорыКонтрагентов.Контрагент = &Контрагент";
					Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует);
					Запрос.Текст = Запрос.Текст + "
					|	И ДоговорыКонтрагентов.Статус = &Статус";
					Если НЕ ЗначениеНеЗаполнено(ОтборВидДоговора) Тогда
						Запрос.Текст = Запрос.Текст+"
						|	И ДоговорыКонтрагентов.ТипДоговора = &ТипДоговора";  
						Запрос.УстановитьПараметр("ТипДоговора", ОтборВидДоговора);
					КонецЕсли;
				КонецЕсли;
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = Выборка.Ссылка;
					ПараметрыСопоставления.СпособСопоставления = "2";
					Возврат Истина;
				Иначе
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("Контрагент",  ПараметрыСопоставления.Владелец);
					Запрос.УстановитьПараметр("Организация", Организация);
					Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
					Запрос.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
					|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
					|ГДЕ
					|	ДоговорыКонтрагентов.Организация = &Организация
					|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления";
					
					Если ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
						Запрос.Текст = Запрос.Текст + "
						|	И ДоговорыКонтрагентов.Владелец = &Контрагент";
						Если НЕ ЗначениеНеЗаполнено(ОтборВидДоговора) Тогда
							Запрос.Текст = Запрос.Текст+"
							|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора";  
							Запрос.УстановитьПараметр("ВидДоговора", ОтборВидДоговора);
						КонецЕсли;
						Запрос.Текст = Запрос.Текст + " 
						|	УПОРЯДОЧИТЬ ПО
						|	ДоговорыКонтрагентов.Дата УБЫВ";
					ИначеЕсли  ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
						Запрос.Текст = Запрос.Текст + "
						|	И ДоговорыКонтрагентов.ВалютаРасчетов = &ВалютаВзаиморасчетов
						|	И ДоговорыКонтрагентов.Владелец = &Контрагент";
						Если НЕ ЗначениеНеЗаполнено(ОтборВидДоговора) Тогда
							Запрос.Текст = Запрос.Текст+"
							|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора";  
							Запрос.УстановитьПараметр("ВидДоговора", ОтборВидДоговора);
						КонецЕсли;
						Запрос.Текст = Запрос.Текст + " 
						|	УПОРЯДОЧИТЬ ПО
						|	ДоговорыКонтрагентов.ДатаДоговора УБЫВ";
					ИначеЕсли ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ ИмяШаблона = "Розница 2.2" ИЛИ ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
						Запрос.Текст = Запрос.Текст + "
						|	И ДоговорыКонтрагентов.Контрагент = &Контрагент";
						Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует);
						Запрос.Текст = Запрос.Текст + "
						|	И ДоговорыКонтрагентов.Статус = &Статус";
						Если НЕ ЗначениеНеЗаполнено(ОтборВидДоговора) Тогда
							Запрос.Текст = Запрос.Текст+"
							|	И ДоговорыКонтрагентов.ТипДоговора = &ТипДоговора";  
							Запрос.УстановитьПараметр("ТипДоговора", ОтборВидДоговора);
						КонецЕсли;
					КонецЕсли;
					
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						ПараметрыСопоставления.СопоставленноеЗначение = Выборка.Ссылка;
						ПараметрыСопоставления.СпособСопоставления = "2";	
					Иначе
						ПараметрыСопоставления.СопоставленноеЗначение = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
						ПараметрыСопоставления.СпособСопоставления = "9";	
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Возврат Истина;		
			
		ИначеЕсли ВидЗнач = "СтраныМира" Тогда
			
			Если СтрокаНеИмеетСмысла(ПараметрыСопоставления.СопоставляемоеЗначение) Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = Справочники.СтраныМира.ПустаяСсылка();
				ПараметрыСопоставления.СпособСопоставления = "2";
				Возврат Истина;
			КонецЕсли;
			
			ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "СтраныМира");
			
			Если ЭлементПоиска.Пустая() Тогда
				ПараметрыСопоставления.СопоставляемоеЗначение = СтрЗаменить(ПараметрыСопоставления.СопоставляемоеЗначение, "ё", "е");
				ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "СтраныМира");
			КонецЕсли;
			
			Если ЭлементПоиска.Пустая() Тогда
				ПараметрыСопоставления.СопоставляемоеЗначение = СтрЗаменить(ПараметрыСопоставления.СопоставляемоеЗначение, "й", "и");
				ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "СтраныМира");
			КонецЕсли;
			
			Если НЕ ЭлементПоиска.Пустая() Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
				Если НЕ ЗначениеЗаполнено(ПараметрыСопоставления.СпособСопоставления) Тогда
					ПараметрыСопоставления.СпособСопоставления = "2";	
				КонецЕсли;
				Возврат Истина;
			КонецЕсли;
			
			ЗначениеКодаСтраны = Данные.СтранаПроисхожденияКод.ИтоговоеЗначение;
			Если ЭлементПоиска.Пустая() И ЗначениеКодаСтраны <> "" Тогда	
				ПараметрыСопоставления.СопоставляемоеЗначение = ЗначениеКодаСтраны;
				ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "СтраныМира", "ПоКоду");
				Если НЕ ЭлементПоиска.Пустая() Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
					ПараметрыСопоставления.СпособСопоставления = "6";
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;	
			
			СтранаНайдена = "";
			Макет = Справочники.СтраныМира.ПолучитьМакет("Классификатор");
			
			Чтение = Новый ЧтениеXML;
			Чтение.УстановитьСтроку(Макет.ПолучитьТекст());
			
			ТаблицаСтран = СериализаторXDTO.ПрочитатьXML(Чтение);
			
			НайденнаяСтрока = ТаблицаСтран.Найти(ПараметрыСопоставления.СопоставляемоеЗначение);
			Если НайденнаяСтрока <> Неопределено Тогда
				КодЧисловой         = НайденнаяСтрока.Код;
				НаименованиеКраткое = НайденнаяСтрока.Наименование;
				НаименованиеПолное  = НайденнаяСтрока.НаименованиеПолное;
				КодАльфа2           = НайденнаяСтрока.КодАльфа2;
				КодАльфа3			= НайденнаяСтрока.КодАльфа3;
				
				СтранаНайдена = "ПоНаименованию";
				
				ПараметрыСопоставления.СопоставляемоеЗначение = КодЧисловой;
				ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "СтраныМира", "ПоКоду");
				Если НЕ ЭлементПоиска.Пустая() Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
					ПараметрыСопоставления.СпособСопоставления = "6";
					Возврат Истина;
				КонецЕсли;	
			КонецЕсли;
			
			Если СтранаНайдена <> "" И ЗначениеКодаСтраны <> "" Тогда
				НайденнаяСтрока = ТаблицаСтран.Найти(ЗначениеКодаСтраны);
				Если НайденнаяСтрока <> Неопределено Тогда
					КодЧисловой         = НайденнаяСтрока.Код;
					НаименованиеКраткое = НайденнаяСтрока.Наименование;
					НаименованиеПолное  = НайденнаяСтрока.НаименованиеПолное;
					КодАльфа2           = НайденнаяСтрока.КодАльфа2;
					КодАльфа3			= НайденнаяСтрока.КодАльфа3;
					
					СтранаНайдена = "ПоКоду";
				КонецЕсли;
			КонецЕсли;	
		
			Если СтранаНайдена <> "" Тогда
				СтранаОбъект = Справочники.СтраныМира.СоздатьЭлемент();
				СтранаОбъект.Наименование = НаименованиеКраткое;
				СтранаОбъект.НаименованиеПолное = НаименованиеПолное;
				СтранаОбъект.Код = КодЧисловой;
				СтранаОбъект.КодАльфа2 = КодАльфа2;
				СтранаОбъект.КодАльфа3 = КодАльфа3;
				
				Если ЗаписатьОбъект(СтранаОбъект) Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = СтранаОбъект.Ссылка;
					Если СтранаНайдена = "ПоКоду" Тогда
						ПараметрыСопоставления.СпособСопоставления = "6";
					Иначе
						ПараметрыСопоставления.СпособСопоставления = "2";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыСопоставления.СопоставленноеЗначение = Неопределено Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = Справочники.СтраныМира.ПустаяСсылка();
				ПараметрыСопоставления.СпособСопоставления = "2";
			КонецЕсли;
			
			Возврат Истина;
			
		ИначеЕсли ВидЗнач = "НомераГТД" Тогда
			НомерГТД = Строка(Данные.НомерГТД.ИсходноеЗначение);
			К = 0;
			Пока Найти(НомерГТД, "/")<> 0 Цикл
				К = К + 1;
				НомерГТД = Прав(НомерГТД, СтрДлина(НомерГТД) - Найти(НомерГТД, "/"));
			КонецЦикла;
			
			Если СтрокаНеИмеетСмысла(ПараметрыСопоставления.СопоставляемоеЗначение) ИЛИ НЕ ( К > 1 И К < 4 ) Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = "";
				ПараметрыСопоставления.СпособСопоставления = "2";
				Возврат Истина;			
			КонецЕсли;
			
			ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "НомераГТД");
			
			ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
			Если НЕ ЭлементПоиска.Пустая() Тогда
				Если НЕ ЗначениеЗаполнено(ПараметрыСопоставления.СпособСопоставления) Тогда
					ПараметрыСопоставления.СпособСопоставления = "2";	
				КонецЕсли;
			Иначе
				ПараметрыСопоставления.СпособСопоставления = "9";	
			КонецЕсли;			
			
			Возврат Истина;	
			
		ИначеЕсли ВидЗнач = "Номенклатура" Тогда
			
			Если ОписаниеРеквизита.Идентификатор = "Номенклатура" Тогда
				ЭлементПоиска = Справочники.Номенклатура.ПустаяСсылка();
				
				ПараметрыСопоставления.СопоставляемоеЗначение = СокрЛП(ПараметрыСопоставления.СопоставляемоеЗначение);
				
				Если СтрокаНеИмеетСмысла(ПараметрыСопоставления.СопоставляемоеЗначение) Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = Справочники.Номенклатура.ПустаяСсылка();
					ПараметрыСопоставления.СпособСопоставления = "9";
					Возврат Истина;				
				КонецЕсли;
				
				Если НЕ ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
					ЗначениеНастроекДокумента = Документ.ЗначениеНастроек;
					ГруппаНоменклатурДляСопоставления = Неопределено;
					ЗначениеНастроекДокумента.Свойство("ГруппаНоменклатурДляСопоставления", ГруппаНоменклатурДляСопоставления);
					СписокГруппДляСопоставления = ГруппаНоменклатурДляСопоставления.Значение;	
					СтруктураПоискТолькоВПриоритетныхГруппах = Неопределено;
					ЗначениеНастроекДокумента.Свойство("ПоискТолькоВПриоритетныхГруппах", СтруктураПоискТолькоВПриоритетныхГруппах);
					ПоискТолькоВПриоритетныхГруппах = СтруктураПоискТолькоВПриоритетныхГруппах.Значение И СписокГруппДляСопоставления.Количество() > 0;
					
					Если СписокГруппДляСопоставления.Количество() > 0 Тогда
						ПараметрыСопоставления.Родитель = СписокГруппДляСопоставления;
						ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "Номенклатура");
					КонецЕсли;
				Иначе
					ПоискТолькоВПриоритетныхГруппах = Ложь;
				КонецЕсли;

				Если (ЭлементПоиска = Неопределено ИЛИ ЭлементПоиска.Пустая()) И НЕ ПоискТолькоВПриоритетныхГруппах Тогда
					ПараметрыСопоставления.Родитель = "";
					ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "Номенклатура");
				КонецЕсли;
				
				ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
				
				Если НЕ ЭлементПоиска.Пустая() Тогда
					Если НЕ ЗначениеЗаполнено(ПараметрыСопоставления.СпособСопоставления) Тогда
						ПараметрыСопоставления.СпособСопоставления = "2";	
					КонецЕсли;
				Иначе
					ПараметрыСопоставления.СпособСопоставления = "9";	
				КонецЕсли;
				
			ИначеЕсли ОписаниеРеквизита.Идентификатор = "ГруппаНоменклатуры" Тогда
				
				РеквизитНоменклатура = Данные.Номенклатура.ИтоговоеЗначение;
				Если ТипЗнч(РеквизитНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = РеквизитНоменклатура.Родитель;
					ПараметрыСопоставления.СпособСопоставления = "2";
				Иначе
					ПараметрыСопоставления.СопоставленноеЗначение = Справочники.Номенклатура.ПустаяСсылка();
					ПараметрыСопоставления.СпособСопоставления = "1";
				КонецЕсли;
				
			КонецЕсли;
			
			Возврат Истина;	
			
		ИначеЕсли ВидЗнач = "СтавкиНДС" Тогда
			
			Если Документ.ВидДокумента = "ПП" Тогда
				
				Если Документ.Шапка.Всего.ИтоговоеЗначение = 0 ИЛИ Документ.Шапка.ВсегоНДС.ИтоговоеЗначение = 0 Тогда
					СтавкаНДС = ПолучитьСтавкуНДС("", ИмяШаблона);
				Иначе
					СтавкаНДСЧисло = Окр((Документ.Шапка.ВсегоНДС.ИтоговоеЗначение/(Документ.Шапка.Всего.ИтоговоеЗначение - Документ.Шапка.ВсегоНДС.ИтоговоеЗначение))*100);					
					ПараметрыСопоставления.СопоставляемоеЗначение = Строка(СтавкаНДСЧисло);
				КонецЕсли;

			КонецЕсли;
			
			ПараметрыСопоставления.СопоставленноеЗначение = ПолучитьСтавкуНДС(ПараметрыСопоставления.СопоставляемоеЗначение, ИмяШаблона);

			ПараметрыСопоставления.СпособСопоставления = "2";
			
			Возврат Истина;
			
		ИначеЕсли ВидЗнач = "ВидыНоменклатуры" Тогда
				
				ЗначениеНастроекДокумента = Документ.ЗначениеНастроек;
				РеквизитНоменклатура = Данные.Номенклатура.ИтоговоеЗначение;
				ПараметрыСопоставления.СпособСопоставления = "2";

				Если ТипЗнч(РеквизитНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = РеквизитНоменклатура.ВидНоменклатуры;
				Иначе
					Если Документ.ТипРаспознан = "AT" И НЕ ИмяШаблона = "Розница 2.2" Тогда
						ВидНоменклатуры = Документ.ЗначениеНастроек.ВидНоменклатурУслуга.Значение;
					Иначе
						ВидНоменклатуры = Документ.ЗначениеНастроек.ВидНоменклатурТовар.Значение;
					КонецЕсли;
					Если ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка() Тогда
						Если Документ.ТипРаспознан = "AT" И НЕ ИмяШаблона = "Розница 2.2" Тогда
							ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуга", Истина);
						Иначе
							ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар", Истина);
						КонецЕсли;
					КонецЕсли;
					ПараметрыСопоставления.СопоставленноеЗначение = ВидНоменклатуры;
				КонецЕсли;
				
				Возврат Истина;

		ИначеЕсли ВидЗнач = "КлассификаторЕдиницИзмерения" Тогда
			
			ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "КлассификаторЕдиницИзмерения");
			Если ЗначениеЗаполнено(ЭлементПоиска) Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
				Возврат Истина;
			КонецЕсли;
			
			Если Прав(ПараметрыСопоставления.СопоставляемоеЗначение, 1) = "." ИЛИ Прав(ПараметрыСопоставления.СопоставляемоеЗначение, 1) = "," Тогда
				ДлинаНаименования = СтрДлина(ПараметрыСопоставления.СопоставляемоеЗначение);
				Если ДлинаНаименования > 1 Тогда
					ПараметрыСопоставления.СопоставляемоеЗначение = Лев(ПараметрыСопоставления.СопоставляемоеЗначение, ДлинаНаименования - 1);
				КонецЕсли;
			КонецЕсли;
			
			ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "КлассификаторЕдиницИзмерения");
			Если ЗначениеЗаполнено(ЭлементПоиска) Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
				Возврат Истина;
			Иначе
				//Поиск по полному наименованию
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СправочникПоиска.Ссылка
				|ИЗ
				|	Справочник.КлассификаторЕдиницИзмерения КАК СправочникПоиска
				|ГДЕ	
				|	ПОДСТРОКА(СправочникПоиска.НаименованиеПолное,0,200) = &СтрокаПоиска
				|	И НЕ СправочникПоиска.ПометкаУдаления";
				Запрос.УстановитьПараметр("СтрокаПоиска", ПараметрыСопоставления.СопоставляемоеЗначение);
				Результат = Запрос.Выполнить().Выбрать();
				Если Результат.Следующий() Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = Результат.Ссылка;
					Возврат Истина;
				КонецЕсли;	
			КонецЕсли;
			
			КодЗначения = Данные.ЕдиницаИзмеренияКод.ИтоговоеЗначение;
			Если КодЗначения <> "" Тогда
				ПараметрыСопоставленияПоКоду = Новый Структура;
				Для Каждого ЭлементСтруктуры Из ПараметрыСопоставления Цикл
					ПараметрыСопоставленияПоКоду.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
				КонецЦикла;
				ПараметрыСопоставленияПоКоду.СопоставляемоеЗначение = КодЗначения;
				ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставленияПоКоду, "КлассификаторЕдиницИзмерения", "ПоКоду");
				Если ЗначениеЗаполнено(ЭлементПоиска) Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
					ПараметрыСопоставления.СпособСопоставления = "6";
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
			
			ЕдиницаНайдена = "";
			ТабличныйДокумент = Справочники.КлассификаторЕдиницИзмерения.ПолучитьМакет("КлассификаторЕдиницИзмерения");
			ОбластьНаименованиеКраткое = ТабличныйДокумент.Области.НаименованиеКраткое;
			ТекущаяОбласть = ТабличныйДокумент.НайтиТекст(ПараметрыСопоставления.СопоставляемоеЗначение, , ОбластьНаименованиеКраткое, , Истина, , Истина);
			Если ТекущаяОбласть <> Неопределено Тогда
				ТабличныйДокумент.ТекущаяОбласть = ТекущаяОбласть;
				
				ОбластьКодЧисловой         = ТабличныйДокумент.Области.КодЧисловой;
				ОбластьНаименованиеПолное  = ТабличныйДокумент.Области.НаименованиеПолное;
				
				КодЧисловой         = ТабличныйДокумент.Область(ТекущаяОбласть.Верх, ОбластьКодЧисловой.        Лево, ТекущаяОбласть.Низ, ОбластьКодЧисловой.        Право).Текст;
				НаименованиеКраткое = ТабличныйДокумент.Область(ТекущаяОбласть.Верх, ОбластьНаименованиеКраткое.Лево, ТекущаяОбласть.Низ, ОбластьНаименованиеКраткое.Право).Текст;
				НаименованиеПолное  = ТабличныйДокумент.Область(ТекущаяОбласть.Верх, ОбластьНаименованиеПолное. Лево, ТекущаяОбласть.Низ, ОбластьНаименованиеПолное. Право).Текст;
				
				ЕдиницаНайдена = "ПоНаименованию";
				
				ПараметрыСопоставления.СопоставляемоеЗначение = КодЧисловой;
				ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "КлассификаторЕдиницИзмерения", "ПоКоду");
				Если НЕ ЭлементПоиска.Пустая() Тогда
					ПараметрыСопоставления.СопоставленноеЗначение =ЭлементПоиска;
					ПараметрыСопоставления.СпособСопоставления = "6";
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ЕдиницаНайдена = "" И КодЗначения <> "" Тогда
				ОбластьКодЧисловой = ТабличныйДокумент.Области.КодЧисловой;
				ТекущаяОбласть = ТабличныйДокумент.НайтиТекст(КодЗначения, , ОбластьКодЧисловой, , Истина, , Истина);
				Если ТекущаяОбласть <> Неопределено Тогда
					ТабличныйДокумент.ТекущаяОбласть = ТекущаяОбласть;
					
					ОбластьНаименованиеКраткое = ТабличныйДокумент.Области.НаименованиеКраткое;
					ОбластьНаименованиеПолное  = ТабличныйДокумент.Области.НаименованиеПолное;
					
					КодЧисловой         = ТабличныйДокумент.Область(ТекущаяОбласть.Верх, ОбластьКодЧисловой.        Лево, ТекущаяОбласть.Низ, ОбластьКодЧисловой.        Право).Текст;
					НаименованиеКраткое = ТабличныйДокумент.Область(ТекущаяОбласть.Верх, ОбластьНаименованиеКраткое.Лево, ТекущаяОбласть.Низ, ОбластьНаименованиеКраткое.Право).Текст;
					НаименованиеПолное  = ТабличныйДокумент.Область(ТекущаяОбласть.Верх, ОбластьНаименованиеПолное. Лево, ТекущаяОбласть.Низ, ОбластьНаименованиеПолное. Право).Текст;
					
					ЕдиницаНайдена = "ПоКоду";
				КонецЕсли;
			КонецЕсли;			
			
			Если ЕдиницаНайдена <> "" Тогда
				ЕдиницаОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
				ЕдиницаОбъект.Наименование = НаименованиеКраткое;
				ЕдиницаОбъект.НаименованиеПолное = НаименованиеПолное;
				ЕдиницаОбъект.Код = КодЧисловой;
				Если ЗаписатьОбъект(ЕдиницаОбъект) Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = ЕдиницаОбъект.Ссылка;
					Если ЕдиницаНайдена = "ПоКоду" Тогда
						ПараметрыСопоставления.СпособСопоставления = "6";
					Иначе
						ПараметрыСопоставления.СпособСопоставления = "2";
					КонецЕсли;
				КонецЕсли;
			Иначе
				ПараметрыСопоставления.СопоставляемоеЗначение = "796";
				ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "КлассификаторЕдиницИзмерения", "ПоКоду");
				Если НЕ ЭлементПоиска.Пустая() Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
					ПараметрыСопоставления.СпособСопоставления = "2";
				КонецЕсли;	
			КонецЕсли;
			Если ПараметрыСопоставления.СопоставленноеЗначение = Неопределено Тогда
				ЕдиницаОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
				ЕдиницаОбъект.Наименование = "шт";
				ЕдиницаОбъект.НаименованиеПолное = "Штука";
				ЕдиницаОбъект.Код = 796;
				НаименованиеКраткое = "шт";
				ЗаписатьОбъект(ЕдиницаОбъект);
				ПараметрыСопоставления.СопоставленноеЗначение = ЕдиницаОбъект.Ссылка;
				ПараметрыСопоставления.СпособСопоставления = "2";
			КонецЕсли;
			
			Возврат Истина;
			
		ИначеЕсли ВидЗнач = "ЕдиницыИзмерения" Тогда
			
			ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "ЕдиницыИзмерения");
			Если ЗначениеЗаполнено(ЭлементПоиска) Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
				Возврат Истина;
			КонецЕсли;
			
			Если Прав(ПараметрыСопоставления.СопоставляемоеЗначение, 1) = "." ИЛИ Прав(ПараметрыСопоставления.СопоставляемоеЗначение, 1) = "," Тогда
				ДлинаНаименования = СтрДлина(ПараметрыСопоставления.СопоставляемоеЗначение);
				Если ДлинаНаименования > 1 Тогда
					ПараметрыСопоставления.СопоставляемоеЗначение = Лев(ПараметрыСопоставления.СопоставляемоеЗначение, ДлинаНаименования - 1);
				КонецЕсли;
			КонецЕсли;
			
			ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "ЕдиницыИзмерения");
			Если ЗначениеЗаполнено(ЭлементПоиска) Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
				Возврат Истина;
			КонецЕсли;
			
			КодЗначения = Данные.ЕдиницаИзмеренияКод.ИтоговоеЗначение;
			Если КодЗначения <> "" Тогда
				ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "ЕдиницыИзмерения", "ПоКоду");
				Если ЗначениеЗаполнено(ЭлементПоиска) Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
					ПараметрыСопоставления.СпособСопоставления = "6";
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыСопоставления.СопоставленноеЗначение = Неопределено Тогда
				ПараметрыСопоставления.СопоставляемоеЗначение = "796";
				ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "ЕдиницыИзмерения", "ПоКоду");
				Если НЕ ЭлементПоиска.Пустая() Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
					ПараметрыСопоставления.СпособСопоставления = "2";
				КонецЕсли;	
			КонецЕсли;
			
			Если ПараметрыСопоставления.СопоставленноеЗначение = Неопределено Тогда
				ЕдиницаОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
				ЕдиницаОбъект.Наименование = "шт";
				ЕдиницаОбъект.НаименованиеПолное = "Штука";
				ЕдиницаОбъект.Код = 796;
				НаименованиеКраткое = "шт";
				ЗаписатьОбъект(ЕдиницаОбъект);
				ПараметрыСопоставления.СопоставленноеЗначение = ЕдиницаОбъект.Ссылка;
				ПараметрыСопоставления.СпособСопоставления = "2";
			КонецЕсли;
			
			Возврат Истина;
			
		ИначеЕсли ВидЗнач = "УпаковкиЕдиницыИзмерения" Тогда
			
			ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "УпаковкиЕдиницыИзмерения");
			Если ЗначениеЗаполнено(ЭлементПоиска) Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
				Возврат Истина;
			КонецЕсли;
			
			Если Прав(ПараметрыСопоставления.СопоставляемоеЗначение, 1) = "." ИЛИ Прав(ПараметрыСопоставления.СопоставляемоеЗначение, 1) = "," Тогда
				ДлинаНаименования = СтрДлина(ПараметрыСопоставления.СопоставляемоеЗначение);
				Если ДлинаНаименования > 1 Тогда
					ПараметрыСопоставления.СопоставляемоеЗначение = Лев(ПараметрыСопоставления.СопоставляемоеЗначение, ДлинаНаименования - 1);
				КонецЕсли;
			КонецЕсли;
			
			ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "УпаковкиЕдиницыИзмерения");
			Если ЗначениеЗаполнено(ЭлементПоиска) Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
				Возврат Истина;
			КонецЕсли;
			
			КодЗначения = Данные.ЕдиницаИзмеренияКод.ИтоговоеЗначение;
			Если КодЗначения <> "" Тогда
				ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "УпаковкиЕдиницыИзмерения", "ПоКоду");
				Если ЗначениеЗаполнено(ЭлементПоиска) Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
					ПараметрыСопоставления.СпособСопоставления = "6";
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыСопоставления.СопоставленноеЗначение = Неопределено Тогда
				ПараметрыСопоставления.СопоставляемоеЗначение = "796";
				ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "УпаковкиЕдиницыИзмерения", "ПоКоду");
				Если НЕ ЭлементПоиска.Пустая() Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
					ПараметрыСопоставления.СпособСопоставления = "2";
				КонецЕсли;	
			КонецЕсли;
			
			Если ПараметрыСопоставления.СопоставленноеЗначение = Неопределено Тогда
				ЕдиницаОбъект = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
				ЕдиницаОбъект.Наименование = "шт";
				ЕдиницаОбъект.НаименованиеПолное = "Штука";
				ЕдиницаОбъект.Код = 796;
				НаименованиеКраткое = "шт";
				ЗаписатьОбъект(ЕдиницаОбъект);
				ПараметрыСопоставления.СопоставленноеЗначение = ЕдиницаОбъект.Ссылка;
				ПараметрыСопоставления.СпособСопоставления = "2";
			КонецЕсли;
			
			Возврат Истина;
			
		ИначеЕсли ВидЗнач = "БазовыеЕдиницыИзмерения" Тогда
			
			ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "БазовыеЕдиницыИзмерения");
			Если ЗначениеЗаполнено(ЭлементПоиска) Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
				Возврат Истина;
			КонецЕсли;
			
			Если Прав(ПараметрыСопоставления.СопоставляемоеЗначение, 1) = "." ИЛИ Прав(ПараметрыСопоставления.СопоставляемоеЗначение, 1) = "," Тогда
				ДлинаНаименования = СтрДлина(ПараметрыСопоставления.СопоставляемоеЗначение);
				Если ДлинаНаименования > 1 Тогда
					ПараметрыСопоставления.СопоставляемоеЗначение = Лев(ПараметрыСопоставления.СопоставляемоеЗначение, ДлинаНаименования - 1);
				КонецЕсли;
			КонецЕсли;
			
			ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "БазовыеЕдиницыИзмерения");
			Если ЗначениеЗаполнено(ЭлементПоиска) Тогда
				ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
				Возврат Истина;
			КонецЕсли;
			
			КодЗначения = Данные.ЕдиницаИзмеренияКод.ИтоговоеЗначение;
			Если КодЗначения <> "" Тогда
				ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "БазовыеЕдиницыИзмерения", "ПоКоду");
				Если ЗначениеЗаполнено(ЭлементПоиска) Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
					ПараметрыСопоставления.СпособСопоставления = "6";
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыСопоставления.СопоставленноеЗначение = Неопределено Тогда
				ПараметрыСопоставления.СопоставляемоеЗначение = "796";
				ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "БазовыеЕдиницыИзмерения", "ПоКоду");
				Если НЕ ЭлементПоиска.Пустая() Тогда
					ПараметрыСопоставления.СопоставленноеЗначение = ЭлементПоиска;
					ПараметрыСопоставления.СпособСопоставления = "2";
				КонецЕсли;	
			КонецЕсли;
			
			Если ПараметрыСопоставления.СопоставленноеЗначение = Неопределено Тогда
				ЕдиницаОбъект = Справочники.БазовыеЕдиницыИзмерения.СоздатьЭлемент();
				ЕдиницаОбъект.Наименование = "шт";
				ЕдиницаОбъект.НаименованиеПолное = "Штука";
				ЕдиницаОбъект.Код = 796;
				НаименованиеКраткое = "шт";
				ЗаписатьОбъект(ЕдиницаОбъект);
				ПараметрыСопоставления.СопоставленноеЗначение = ЕдиницаОбъект.Ссылка;
				ПараметрыСопоставления.СпособСопоставления = "2";
			КонецЕсли;
			
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ПараметрыСопоставления.СопоставленноеЗначение <> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Процедура выполняет заполнение таблицы организационно-правовых форм предприятий
//
фУНКЦИЯ ЗаполнитьТаблицуОПФ()
	    
	ESDLСтруктураОПФ =  Новый ТаблицаЗначений;
	ESDLСтруктураОПФ.Колонки.Добавить("КраткоОПФ");	
	ESDLСтруктураОПФ.Колонки.Добавить("ПолностьюОПФ");	
	
	НоваяСтрока = ESDLСтруктураОПФ.Добавить();
	НоваяСтрока.КраткоОПФ = "ООО";
	НоваяСтрока.ПолностьюОПФ = "ОБЩЕСТВО С ОГРАНИЧЕННОЙ ОТВЕТСТВЕННОСТЬЮ";
	
	НоваяСтрока = ESDLСтруктураОПФ.Добавить();
	НоваяСтрока.КраткоОПФ = "ОАО";
	НоваяСтрока.ПолностьюОПФ = "ОТКРЫТОЕ АКЦИОНЕРНОЕ ОБЩЕСТВО";
	
	НоваяСтрока = ESDLСтруктураОПФ.Добавить();
	НоваяСтрока.КраткоОПФ = "ЗАО";
	НоваяСтрока.ПолностьюОПФ = "ЗАКРЫТОЕ АКЦИОНЕРНОЕ ОБЩЕСТВО";
	
	НоваяСтрока = ESDLСтруктураОПФ.Добавить();
	НоваяСтрока.КраткоОПФ = "ПК";
	НоваяСтрока.ПолностьюОПФ = "ПРОИЗВОДСТВЕННЫЙ КООПЕРАТИВ";
	
	НоваяСтрока = ESDLСтруктураОПФ.Добавить();
	НоваяСтрока.КраткоОПФ = "ИП";
	НоваяСтрока.ПолностьюОПФ = "ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ";
	
	НоваяСтрока = ESDLСтруктураОПФ.Добавить();
	НоваяСтрока.КраткоОПФ = "ГК";
	НоваяСтрока.ПолностьюОПФ = "ГРУППА КОМПАНИЙ";

	НоваяСтрока = ESDLСтруктураОПФ.Добавить();
	НоваяСтрока.КраткоОПФ = "ТОС";
	НоваяСтрока.ПолностьюОПФ = "ТЕРРИТОРИАЛЬНОЕ ОБЩЕСТВЕННОЕ САМОУПРАВЛЕНИЕ";
	
	НоваяСтрока = ESDLСтруктураОПФ.Добавить();
	НоваяСтрока.КраткоОПФ = "ТСЖ";
	НоваяСтрока.ПолностьюОПФ = "ТОВАРИЩЕСТВО СОБСТВЕННИКОВ ЖИЛЬЯ";
	
	НоваяСтрока = ESDLСтруктураОПФ.Добавить();
	НоваяСтрока.КраткоОПФ = "ПИФ";
	НоваяСтрока.ПолностьюОПФ = "ПАЕВОЙ ИНВЕСТИЦИОННЫЙ ФОНД";
	
	НоваяСтрока = ESDLСтруктураОПФ.Добавить();
	НоваяСтрока.КраткоОПФ = "КФХ";
	НоваяСтрока.ПолностьюОПФ = "КРЕСТЬЯНСКОЕ (ФЕРМЕРСКОЕ) ХОЗЯЙСТВО";
	
	НоваяСтрока = ESDLСтруктураОПФ.Добавить();
	НоваяСтрока.КраткоОПФ = "АОЗТ";
	НоваяСтрока.ПолностьюОПФ = "АКЦИОНЕРНОЕ ОБЩЕСТВО ЗАКРЫТОГО ТИПА";
	
	НоваяСтрока = ESDLСтруктураОПФ.Добавить();
	НоваяСтрока.КраткоОПФ = "АООТ";
	НоваяСтрока.ПолностьюОПФ = "АКЦИОНЕРНОЕ ОБЩЕСТВО ОТКРЫТОГО ТИПА";

	НоваяСтрока = ESDLСтруктураОПФ.Добавить();
	НоваяСтрока.КраткоОПФ = "ТОО";
	НоваяСтрока.ПолностьюОПФ = "ТОВАРИЩЕСТВО С ОГРАНИЧЕННОЙ ОТВЕТСТВЕННОСТЬЮ";
	
	НоваяСтрока = ESDLСтруктураОПФ.Добавить();
	НоваяСтрока.КраткоОПФ = "АКБ";
	НоваяСтрока.ПолностьюОПФ = "АКЦИОНЕРНЫЙ КОММЕРЧЕСКИЙ БАНК";
	
	НоваяСтрока = ESDLСтруктураОПФ.Добавить();
	НоваяСтрока.КраткоОПФ = "ПБОЮЛ";
	НоваяСтрока.ПолностьюОПФ = "ПРЕДПРИНИМАТЕЛЬ БЕЗ ОБРАЗОВАНИЯ ЮРИДИЧЕСКОГО ЛИЦА";
	
	НоваяСтрока = ESDLСтруктураОПФ.Добавить();
	НоваяСтрока.КраткоОПФ = "НПО";
	НоваяСтрока.ПолностьюОПФ = "НАУЧНО-ПРОИЗВОДСТВЕННОЕ ОБЪЕДИНЕНИЕ";

	НоваяСтрока = ESDLСтруктураОПФ.Добавить();
	НоваяСтрока.КраткоОПФ = "НТЦ";
	НоваяСтрока.ПолностьюОПФ = "НАУЧНО-ТЕХНИЧЕСКИЙ ЦЕНТР";
	
	НоваяСтрока = ESDLСтруктураОПФ.Добавить();
	НоваяСтрока.КраткоОПФ = "ТД";
	НоваяСтрока.ПолностьюОПФ = "ТОРГОВЫЙ ДОМ";
	
	НоваяСтрока = ESDLСтруктураОПФ.Добавить();
	НоваяСтрока.КраткоОПФ = "КОО";
	НоваяСтрока.ПолностьюОПФ = "КОМПАНИЯ С ОГРАНИЧЕННОЙ ОТВЕТСТВЕННОСТЬЮ";

	Возврат ESDLСтруктураОПФ;
	
КонецФункции

// Определяет заполнено ли переданное значение
//
// Параметры: 
// Значение - значение, заполенение которого надо проверить
//
// Возвращаемое значение:
// 		Признак заполненности значения, тип "Булево"
//
Функция ЗначениеНеЗаполнено(Значение) Экспорт
	
	Результат   = Ложь;
	ТипЗначения = ТипЗнч(Значение);
	
	// Сначала примитивные типы
	Если Значение = Неопределено Тогда
		Результат = Истина;
		
	ИначеЕсли Значение = NULL Тогда
		Результат = Истина;
		
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Если СокрЛП(Значение) = "" Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		Если Значение = 0 Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Если Значение = Дата('00010101') Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Ложь; // Булево будем считать не пустым
		
		//Отдельное определение, так как конструкторов данного типа не существует	
	ИначеЕсли ТипЗначения = Тип("РежимПроведенияДокумента") Тогда
		
		Если Значение = РежимПроведенияДокумента.Неоперативный или Значение = РежимПроведенияДокумента.Оперативный тогда
			Результат = Ложь;
		КонецЕсли;
		
		// Для остальных будем считать значение пустым, если оно равно дефолтному значению своего типа
		
	Иначе
		
		Если Значение = Новый(ТипЗначения) Тогда
			Результат = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Функция записывает объект, обрабатывая исключительные ситуации
//
// Параметры:
// Объект - объект для записи
// 
// Возвращаемое значение:
// 		Булево, признак успешной записи
//
Функция ЗаписатьОбъект(Объект) Экспорт
	
	Попытка 
		Объект.Записать(); 	
		Возврат Истина;
	Исключение 
		Если Найти(Врег(ОписаниеОшибки()),Врег("не уникал")) > 0 Тогда
			Объект.УстановитьНовыйКод("");			
		КонецЕсли;
	КонеЦПопытки;
	
	Попытка 
		Объект.Записать(); 	
		Возврат Истина;
	Исключение 
		Если Найти(Врег(ОписаниеОшибки()),Врег("не уникал")) > 0 Тогда
			Объект.УстановитьНовыйКод("Н");			
		КонецЕсли;
	КонеЦПопытки;
	
	Попытка	
		Объект.Записать();
		Возврат Истина;
	Исключение		
		//СообщениеПользователю = Новый СообщениеПользователю;
		//СообщениеПользователю.Текст ="Не удается записать "+Строка(ТипЗнч(Объект))+" "+Строка(Объект)+", ошибка: "+ОписаниеОшибки();
		//СообщениеПользователю.Сообщить();

	КонецПопытки;
	
	Возврат Ложь;	   
	
КонецФункции


// Процедура выполняет сопоставление реквизита
//
// параметры:
// 		ОписаниеРеквизита, структура - структура описания реквизита
//		ПараметрыСопоставления, структура - параметры сопоставления
//
Процедура СопоставлениеОбщее(ОписаниеРеквизита, ПараметрыСопоставления)
		
	Если ОписаниеРеквизита.Тип = "ПеречислениеСсылка" Тогда
		// значение перечисления			
		МетПеречисление = Метаданные.Перечисления.Найти(ОписаниеРеквизита.Вид);
		Если МетПеречисление = Неопределено Тогда
			ПараметрыСопоставления.СопоставленноеЗначение = Неопределено;
			ПараметрыСопоставления.СпособСопоставления = "0";
			Возврат;				
		КонецЕсли;
		
		НайденноеЗначение = МетПеречисление.ЗначенияПеречисления.Найти(ПараметрыСопоставления.СопоставляемоеЗначение);
		Если НайденноеЗначение = Неопределено Тогда
			ПараметрыСопоставления.СопоставленноеЗначение = Перечисления[ОписаниеРеквизита.Вид].ПустаяСсылка();
			ПараметрыСопоставления.СпособСопоставления = "9";
		Иначе
			ПараметрыСопоставления.СопоставленноеЗначение = НайденноеЗначение;
			ПараметрыСопоставления.СпособСопоставления = "2";
		КонецЕсли;			
		
	ИначеЕсли ОписаниеРеквизита.Тип = "СправочникСсылка" Тогда
		
		Если Метаданные.Справочники.Найти(ОписаниеРеквизита.Вид) = Неопределено ИЛИ СтрокаНеИмеетСмысла(ПараметрыСопоставления.СопоставляемоеЗначение) Тогда
			ПараметрыСопоставления.СопоставленноеЗначение = Неопределено;	
			ПараметрыСопоставления.СпособСопоставления = "0";
			Возврат;
		КонецЕсли;
		
		НайденноеЗначение = ВыполнитьПоискЭлемента(ПараметрыСопоставления, ОписаниеРеквизита.Вид);

		Если НЕ НайденноеЗначение.Пустая() Тогда
			ПараметрыСопоставления.СопоставленноеЗначение = НайденноеЗначение;
			Если НЕ ЗначениеЗаполнено(ПараметрыСопоставления.СпособСопоставления) Тогда
				ПараметрыСопоставления.СпособСопоставления = "2";
			КонецЕсли;
		Иначе
			ПараметрыСопоставления.СопоставленноеЗначение = Неопределено;
			ПараметрыСопоставления.СпособСопоставления = "0";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


// Функция создания элементов справочников
//
// Параметры:
//      ОписаниеРеквизита - структура описания реквизита
//		Данные - данные сопоставления
//
// Возвращаемое значение:
//     Ссылка нового элемента
//
Функция СозданиеЭлементСправочникаОбщее(ОписаниеРеквизита, Данные) 
	
	ВидЗнач = ОписаниеРеквизита.Вид;
	
	Объект = Справочники[ВидЗнач].СоздатьЭлемент();
	ДлинаНаименования = Метаданные.Справочники[ВидЗнач].ДлинаНаименования;
	Если ДлинаНаименования > 0 Тогда
		Объект.Наименование = Лев(СокрЛП(Данные[ОписаниеРеквизита.Идентификатор].ИтоговоеЗначение), ДлинаНаименования);			
	Иначе
		ДлинаКода = Метаданные.Справочники[ВидЗнач].ДлинаКода;
		ТипКода = Метаданные.Справочники[ВидЗнач].ТипКода;
		Если (ДлинаКода > 0) И (ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка) Тогда
			Объект.Код = Лев(СокрЛП(Данные[ОписаниеРеквизита.Идентификатор].ИтоговоеЗначение), ДлинаКода);
		КонецЕсли;
	КонецЕсли;
	Если ЗаписатьОбъект(Объект) Тогда
		Ссылка = Объект.Ссылка;
	Иначе
		Ссылка = Справочники[ВидЗнач].ПустаяСсылка();
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

// Функция создает новый элемент в справочнике "Контрагенты"
//
// Прараметры:
//		СтруктураДанных - структура данных контрагента
//
// Возвращаемое значение
//		Ссылка на созданный элемент справочника, в случае ошибки при создании пустая ссылка
//
Функция СоздатьКонтрагента(СтруктураДанных, Сообщение) 
	
	Перем КраткоеНаименование, ПолноеНаименование, ИНН, КПП, АдресКонтрагента, АдресПартнера, ТелефонКонтрагента, Родитель, ВалютаВзаиморасчетов, ВидДокумента, БикБанка, СчетБанка, СчетКонтрагентаДокумент;
	
	СтруктураДанных.Свойство("КраткоеНаименование", КраткоеНаименование);
	СтруктураДанных.Свойство("ПолноеНаименование", ПолноеНаименование);
	СтруктураДанных.Свойство("ИНН", ИНН);
	СтруктураДанных.Свойство("КПП", КПП);
	СтруктураДанных.Свойство("АдресКонтрагента", АдресКонтрагента);
	СтруктураДанных.Свойство("АдресПартнера", АдресПартнера);
	СтруктураДанных.Свойство("ТелефонКонтрагента", ТелефонКонтрагента);
	СтруктураДанных.Свойство("Родитель", Родитель);
	СтруктураДанных.Свойство("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	СтруктураДанных.Свойство("ВидДокумента", ВидДокумента);
	
	Если ИНН <> "" Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И НЕ Контрагенты.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ИНН", СтруктураДанных.ИНН);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Сообщение = "Контрагент с заданным ИНН уже есть в справочнике ""Контрагенты""";
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

	КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
	КонтрагентОбъект.Наименование = КраткоеНаименование;
	КонтрагентОбъект.НаименованиеПолное = ПолноеНаименование;
	Если ЗначениеЗаполнено(Родитель) Тогда
		КонтрагентОбъект.Родитель = Родитель;
	КонецЕсли;
	
	
	ФизЛицо = ?(Найти(ВРег(ПолноеНаименование), ", ИП") > 0 ИЛИ Найти(ВРег(ПолноеНаименование), ", ПБОЮЛ") > 0, Истина, Ложь);
	Если Не ПустаяСтрока(ИНН) Тогда
		КонтрагентОбъект.ИНН = ИНН;
		Если НЕ ФизЛицо И СтрДлина(ИНН) = 12 Тогда
			ФизЛицо	= Истина;
		КонецЕсли;
	КонецЕсли;	
	
	Если Не ПустаяСтрока(КПП) Тогда
		КонтрагентОбъект.КПП = КПП;
	КонецЕсли;	
	
	Если  Метаданные.Справочники.Контрагенты.Реквизиты.Найти("ЮрФизЛицо") <> Неопределено Тогда 
		Если Найти(ВРег(ПолноеНаименование), ", ИП") > 0 Тогда
			КонтрагентОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
		ИначеЕсли ФизЛицо Тогда	
			КонтрагентОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		Иначе
			КонтрагентОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		КонецЕсли;
	ИначеЕсли Метаданные.Справочники.Контрагенты.Реквизиты.Найти("ЮридическоеФизическоеЛицо") <> Неопределено Тогда
		Если ФизЛицо Тогда
			КонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Иначе
			КонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		КонецЕсли;
	Иначе
		Если Найти(ВРег(ПолноеНаименование), ", ИП") > 0 Тогда
			КонтрагентОбъект.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель;
		ИначеЕсли ФизЛицо Тогда	
			КонтрагентОбъект.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо;
		Иначе
			КонтрагентОбъект.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗаписатьОбъект(КонтрагентОбъект) Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Если Метаданные.Справочники.Контрагенты.Реквизиты.Найти("ГоловнойКонтрагент") <> Неопределено Тогда
		КонтрагентОбъект.ГоловнойКонтрагент = КонтрагентОбъект.Ссылка;
		Если НЕ ЗаписатьОбъект(КонтрагентОбъект) Тогда
			Возврат Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

	//Если АдресПартнера <> Неопределено Тогда
	//	КонтрагентОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;	
	//КонецЕсли;
	
	КонтрагентСсылка = ЗаполнитьКонтактнуюИнформацию(КонтрагентОбъект, АдресКонтрагента, АдресПартнера, ТелефонКонтрагента);
	
	Если ЗначениеЗаполнено(КонтрагентСсылка) И АдресПартнера <> Неопределено И ВидДокумента <> Неопределено И НЕ Метаданные.Имя="Розница" Тогда
		//Заполнение реквизита Партнер
		ПараметрыСопоставления = Новый Структура("Владелец, Равен,Родитель,СопоставленноеЗначение,СопоставляемоеЗначение,СпособСопоставления,","",Ложь,"",Неопределено, КонтрагентОбъект.Наименование,Неопределено);
		ЭлементПоиска = НайтиВСправочнике(ПараметрыСопоставления, "Партнеры");
		Если ЭлементПоиска.Пустая() Тогда
			НовыйПартнер = Справочники.Партнеры.СоздатьЭлемент();
			НовыйПартнер.Наименование = КонтрагентОбъект.Наименование;
			НовыйПартнер.НаименованиеПолное = КонтрагентОбъект.НаименованиеПолное;
			НовыйПартнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
			Для Каждого СтрокаКИ Из КонтрагентОбъект.КонтактнаяИнформация Цикл
				ПартнерСтрокаКИ = НовыйПартнер.КонтактнаяИнформация.Добавить();
				Для Каждого РеквизитКИ Из Метаданные.Справочники.Партнеры.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты Цикл
					ПартнерСтрокаКИ[РеквизитКИ.Имя] = СтрокаКИ[РеквизитКИ.Имя];
				КонецЦикла;
			КонецЦикла;
			ИскомыеГруппы = Новый Массив;
			Если НЕ (ВидДокумента = "РТУ" ИЛИ ВидДокумента = "РТ") Тогда
				НовыйПартнер.Поставщик = Истина;
				ИскомыеГруппы.Добавить("поставщики");
				ИскомыеГруппы.Добавить("поставщик");
				ИскомыеГруппы.Добавить("прочие");
			Иначе
				НовыйПартнер.Клиент = Истина;
				ИскомыеГруппы.Добавить("клиенты");
				ИскомыеГруппы.Добавить("клиент");
				ИскомыеГруппы.Добавить("покупатели");
				ИскомыеГруппы.Добавить("покупатель");
				ИскомыеГруппы.Добавить("прочие");
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ГруппыДоступаПартнеров.Ссылка
			|ИЗ
			|	Справочник.ГруппыДоступаПартнеров КАК ГруппыДоступаПартнеров
			|ГДЕ
			|	НЕ ГруппыДоступаПартнеров.ПометкаУдаления
			|	И ГруппыДоступаПартнеров.Наименование В(&ИскомыеГруппы)";
			Запрос.УстановитьПараметр("ИскомыеГруппы", ИскомыеГруппы);
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				НовыйПартнер.ГруппаДоступа = Выборка.Ссылка;
			КонецЕсли;
			
			Если ЗаписатьОбъект(НовыйПартнер) Тогда
				КонтрагентОбъект.Партнер = НовыйПартнер.Ссылка;
				ЗаписатьОбъект(КонтрагентОбъект);
				СтруктураДанных.Вставить("Партнер", НовыйПартнер.Ссылка);
			КонецЕсли;
		Иначе
			КонтрагентОбъект.Партнер = ЭлементПоиска;
			КонтрагентОбъект = КонтрагентСсылка.ПолучитьОбъект();
			Если НЕ (НЕ (ВидДокумента = "РТУ" ИЛИ ВидДокумента = "РТ") И ЭлементПоиска.Поставщик) Тогда
				ПартнерОбъект = ЭлементПоиска.ПолучитьОбъект();
				ПартнерОбъект.Поставщик = Истина;
				ЗаписатьОбъект(ПартнерОбъект);
			ИначеЕсли НЕ ЭлементПоиска.Клиент Тогда
				ПартнерОбъект = ЭлементПоиска.ПолучитьОбъект();
				ПартнерОбъект.Клиент = Истина;
				ЗаписатьОбъект(ПартнерОбъект);
			КонецЕсли;
			ЗаписатьОбъект(КонтрагентОбъект);
		КонецЕсли;
	КонецЕсли;
	
	Возврат КонтрагентСсылка;	

КонецФункции

Функция СтрокаНеИмеетСмысла(Знач ИсходнаяСтрока) Экспорт
	
	СимволыНесущиеСмысл = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZЁАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ";
	ИсходнаяСтрока = ВРег(ИсходнаяСтрока);
	Для НомСимвола = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		ТекСимвол = Сред(ИсходнаяСтрока, НомСимвола, 1);
		Если Найти(СимволыНесущиеСмысл, ТекСимвол) > 0 Тогда
			Возврат Ложь;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Истина;	
	
КонецФункции 


// Функция выполняет поиск элемента в базе данных
//
// Параметры:
//     ПараметрыСопоставления - структура параметров сопоставления
//     ИмяСправочника - имя справочника
//     МетодПоиска - поиск по коду или по наименованию
//
// Возвращаемое значение: 
//     ссылка на найденный элемент
//
Функция НайтиВСправочнике(ПараметрыСопоставления, ИмяСправочника, МетодПоиска = "ПоНаименованию")
	
	СтрокаПоиска = ПараметрыСопоставления.СопоставляемоеЗначение;
	Родитель = ПараметрыСопоставления.Родитель;
	Владелец = ПараметрыСопоставления.Владелец;
	
	Если МетодПоиска = "ПоНаименованию" Тогда
		ДлинаСтроки = Метаданные.Справочники[ИмяСправочника].ДлинаНаименования;
		Если ДлинаСтроки = 0 Тогда
			ДлинаКода = Метаданные.Справочники[ИмяСправочника].ДлинаКода;
			ТипКода = Метаданные.Справочники[ИмяСправочника].ТипКода;
			Если (ДлинаКода > 0) И (ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка) Тогда
				МетодПоиска = "ПоКоду";
				ДлинаСтроки = ДлинаКода;
			Иначе
				Возврат Справочники[ИмяСправочника].ПустаяСсылка();
			КонецЕсли;		
		КонецЕсли;
	Иначе
		ДлинаСтроки = Метаданные.Справочники[ИмяСправочника].ДлинаКода;
	КонецЕсли;
	
	Если СтрДлина(СтрокаПоиска) > ДлинаСтроки Тогда
		СтрокаПоиска = Лев(СтрокаПоиска, ДлинаСтроки);	
	КонецЕсли;

	
	Иерархический = ?(Метаданные.Справочники[ИмяСправочника].Иерархический И Метаданные.Справочники[ИмяСправочника].ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов, Истина, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникПоиска.Ссылка
	|ИЗ
	|	Справочник."+ИмяСправочника+" КАК СправочникПоиска
	|ГДЕ	
	|	СправочникПоиска." + ?(МетодПоиска = "ПоНаименованию", "Наименование", "Код") + " = &СтрокаПоиска
	|	" + ?(Иерархический, "И НЕ СправочникПоиска.ЭтоГруппа","") + "
	|	И НЕ СправочникПоиска.ПометкаУдаления";
	
	Если НЕ ЗначениеНеЗаполнено(Родитель) Тогда		
		Запрос.Текст = Запрос.Текст + "
		|	И СправочникПоиска.Родитель В ИЕРАРХИИ(&Родитель)";
		Запрос.УстановитьПараметр("Родитель", Родитель);
	КонецЕсли;
	
	//Проверка на наличие реквизита "Владелец" у справочника
	Если Метаданные.Справочники[ИмяСправочника].Владельцы.Количество() > 0 И НЕ ЗначениеНеЗаполнено(Владелец) Тогда		
		Запрос.Текст = Запрос.Текст + "
		|	И СправочникПоиска.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", Владелец);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	КонецЕсли;	
	
	Если Найти(ИмяСправочника,"Номенклатура") > 0 ИЛИ Найти(ИмяСправочника,"Контрагенты") > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникПоиска.Ссылка
		|ИЗ
		|	Справочник." + ИмяСправочника + " КАК СправочникПоиска
		|ГДЕ	
		|	ПОДСТРОКА(СправочникПоиска.НаименованиеПолное,0,200) = &СтрокаПоиска
		|	" + ?(Иерархический, "И НЕ СправочникПоиска.ЭтоГруппа", "") + "
		|	И НЕ СправочникПоиска.ПометкаУдаления";
		
		Если НЕ ЗначениеНеЗаполнено(Родитель) Тогда		
			Запрос.Текст = Запрос.Текст + "
			|	И СправочникПоиска.Родитель В ИЕРАРХИИ(&Родитель)";
			Запрос.УстановитьПараметр("Родитель", Родитель);
		КонецЕсли;
		
		//Проверка на наличие реквизита "Владелец" у справочника
		Если Метаданные.Справочники[ИмяСправочника].Владельцы.Количество() > 0 И НЕ ЗначениеНеЗаполнено(Владелец) Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И СправочникПоиска.Владелец = &Владелец";
			Запрос.УстановитьПараметр("Владелец", Владелец);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			Возврат Результат.Ссылка;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Справочники[ИмяСправочника].ПустаяСсылка();
	
КонецФункции	


// Функция выполняет поиск элемента в базе данных и в словаре соответствий
//
// Параметры:
//     ПараметрыСопоставления - структура параметров сопоставления
//     ИмяСправочника - имя справочника
//     МетодПоиска - поиск по коду или по наименованию
//
// Возвращаемое значение: 
//     ссылка на найденный элемент
//
Функция ВыполнитьПоискЭлемента(ПараметрыСопоставления, ИмяСправочника, МетодПоиска = "ПоНаименованию") Экспорт
		
	//поиск в справочнике
	Рез = НайтиВСправочнике(ПараметрыСопоставления, ИмяСправочника, МетодПоиска); 
	Если НЕ Рез.Пустая() Тогда
		ПараметрыСопоставления.СпособСопоставления = "2"; 
	//Иначе
	//	//поиск в словаре соответствий	
	//	Рез = ПоискВСловареСоответствий(ПараметрыСопоставления, ИмяСправочника);
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции 


// Процедура выполняет заполнение контактной информации (адреса и телефона) контрагента
//
// Параметры:
//		КонтрагентОбъект - объект справочника "Контрагенты"
//      АдресКонтрагента - строка с адресом контрагента
//      ТелефонКонтрагента - строка с телефоном контрагента 
//
Функция  ЗаполнитьКонтактнуюИнформацию(КонтрагентОбъект, АдресКонтрагента, АдресПартнера, ТелефонКонтрагента)
	
	Если НЕ ПустаяСтрока(АдресКонтрагента) Тогда
		// Юр адрес контрагента
		КонтактнаяИнформация = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
		КонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		КонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		КонтактнаяИнформация.Представление = АдресКонтрагента;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(АдресПартнера) И НЕ Метаданные.Имя="Розница" Тогда	
		// Адрес партнера
		КонтактнаяИнформация = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
		КонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		КонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
		КонтактнаяИнформация.Представление = АдресПартнера;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТелефонКонтрагента) Тогда
		// Телефон контрагента
		КонтактнаяИнформация = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
		КонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		КонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		КонтактнаяИнформация.Представление = ТелефонКонтрагента;
	КонецЕсли;

	Если НЕ ЗаписатьОбъект(КонтрагентОбъект) Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	Иначе
		Возврат КонтрагентОбъект.Ссылка;
	КонецЕсли;

КонецФункции


// Функция выполняет обработку наименований контрагентов с учетом ОПФ
//
// Параметы:
//      СтруктураОПФ - структура ОПФ
//      НаименованиеЭлемента - наименование контрагента или организации
//
// Возвращаемое значение:
// 		Структура, содержащая  КраткоеНаименование, ПолноеНаименование, НаименованиеБезОПФ, КраткоеНаименованиеВариант2, КраткоеНаименованиеВариант3  
//
Функция ОбработкаНаименованияЭлемента(Знач СтруктураОПФ, Знач НаименованиеЭлемента) Экспорт
	
	НаименованиеЭлемента = СокрЛП(НаименованиеЭлемента); // убираем правые и левые незначащие символы
	
	// Замена символов неразрывного пробела
	Пока Истина Цикл
		Если Найти(НаименованиеЭлемента, Символы.НПП) <> 0 Тогда
			НаименованиеЭлемента = СтрЗаменить(НаименованиеЭлемента, Символы.НПП, " ");
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Пока Истина Цикл
		ДлинаСтроки = СтрДлина(НаименованиеЭлемента);
		НаименованиеЭлемента = СтрЗаменить(НаименованиеЭлемента, "  ", " ");
		НоваяДлинаСтроки = СтрДлина(НаименованиеЭлемента);
		Если ДлинаСтроки = НоваяДлинаСтроки Тогда
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Пока Истина Цикл
		ДлинаСтроки = СтрДлина(НаименованиеЭлемента);
		НаименованиеЭлемента = СтрЗаменить(НаименованиеЭлемента, """""", """");
		НоваяДлинаСтроки = СтрДлина(НаименованиеЭлемента);
		Если ДлинаСтроки = НоваяДлинаСтроки Тогда
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	НаименованиеЭлементаВРег = ВРег(НаименованиеЭлемента);	
	ВхождениеНенужногоСлова = Найти(НаименованиеЭлементаВРег, "АДРЕС");
	Если ВхождениеНенужногоСлова <> 0 Тогда
		НаименованиеЭлемента = Лев(НаименованиеЭлемента, ВхождениеНенужногоСлова - 1);
	КонецЕсли;
	ВхождениеНенужногоСлова = Найти(НаименованиеЭлементаВРег, "ИНН");
	Если ВхождениеНенужногоСлова <> 0 Тогда
		ЭтоИНН = Ложь;
		
		СледЭлемПослеИНН = Сред(НаименованиеЭлементаВРег, ВхождениеНенужногоСлова + 3, 1);
		Если СледЭлемПослеИНН = " " Тогда
			СледЭлемПослеИНН = Сред(НаименованиеЭлементаВРег, ВхождениеНенужногоСлова + 4, 1);	
		КонецЕсли;
		Для к = 0 По 9 Цикл
			Если СледЭлемПослеИНН = к Тогда
				ЭтоИНН = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЭтоИНН Тогда
			НаименованиеЭлемента = Лев(НаименованиеЭлемента, ВхождениеНенужногоСлова - 1);
		КонецЕсли;
	КонецЕсли;
	ВхождениеНенужногоСлова = Найти(НаименованиеЭлементаВРег, "ТЕЛ.");
	Если ВхождениеНенужногоСлова <> 0 Тогда
		НаименованиеЭлемента = Лев(НаименованиеЭлемента, ВхождениеНенужногоСлова - 1);
	КонецЕсли;
	ВхождениеНенужногоСлова = Найти(НаименованиеЭлементаВРег, "ГРУЗООТПРАВИТЕЛЬ");
	Если ВхождениеНенужногоСлова <> 0 Тогда
		НаименованиеЭлемента = Лев(НаименованиеЭлемента, ВхождениеНенужногоСлова - 1);
	КонецЕсли;
	ВхождениеНенужногоСлова = Найти(НаименованиеЭлементаВРег, "ГРУЗОПОЛУЧАТЕЛЬ");
	Если ВхождениеНенужногоСлова <> 0 Тогда
		НаименованиеЭлемента = Лев(НаименованиеЭлемента, ВхождениеНенужногоСлова - 1);
	КонецЕсли;
	
	ДлинаСтроки = СтрДлина(НаименованиеЭлемента);
	ПодрядЦифр = 0;
	ИндексПервогоВхожденияЦифры = 0;
	Для к = 1 По ДлинаСтроки Цикл
		ЭтоЦифра = Ложь;
		ТекущийСимвол = Сред(НаименованиеЭлемента, к, 1);
		Для н = 0 По 9 Цикл
			Если ТекущийСимвол = Строка(н) ИЛИ ТекущийСимвол = " " ИЛИ ТекущийСимвол = "/" ИЛИ ТекущийСимвол = "\" Тогда
				Если ИндексПервогоВхожденияЦифры = 0 Тогда
					ИндексПервогоВхожденияЦифры = к;
				КонецЕсли;
				ПодрядЦифр = ПодрядЦифр + 1;
				ЭтоЦифра = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		Если ПодрядЦифр >= 6 Тогда
			Прервать;
		КонецЕсли;	
		Если НЕ ЭтоЦифра Тогда
			ПодрядЦифр = 0;
			ИндексПервогоВхожденияЦифры = 0;
		КонецЕсли;	
	КонецЦикла;	
	
	Если ИндексПервогоВхожденияЦифры <> 0 Тогда
		НаименованиеЭлемента = Лев(НаименованиеЭлемента, ИндексПервогоВхожденияЦифры - 1);
	КонецЕсли;
	
	ДлинаСтроки = СтрДлина(НаименованиеЭлемента);
	
	НаименованиеЭлементаВРег = ВРег(НаименованиеЭлемента);
	НомерСтрокиВхождения = 0;
	НомерСтрокиВхожденияКраткоОПФ = 0;
	
	Для каждого Строка Из СтруктураОПФ Цикл
		КраткоОПФ = Строка.КраткоОПФ;
		ПолностьюОПФ = Строка.ПолностьюОПФ;
		Если ПолностьюОПФ = Неопределено ИЛИ ПолностьюОПФ = "" Тогда
			Прервать;
		КонецЕсли;	
		
		НомерСтрокиВхождения = Найти(НаименованиеЭлементаВРег, ПолностьюОПФ);
		Если НомерСтрокиВхождения <> 0 Тогда
			Если НомерСтрокиВхождения <= 3 Тогда
				НомерСтрокиВхождения = 1;
				НаименованиеЭлементаВРег = Прав(НаименованиеЭлементаВРег, ДлинаСтроки - НомерСтрокиВхождения);
				НаименованиеЭлемента = Прав(НаименованиеЭлемента, ДлинаСтроки - НомерСтрокиВхождения);
				ДлинаСтроки = СтрДлина(НаименованиеЭлемента);
			КонецЕсли;
			ДлинаОПФ = СтрДлина(ПолностьюОПФ);
			Если СтрДлина(СтрЗаменить(НаименованиеЭлементаВРег, ПолностьюОПФ, "")) = ДлинаСтроки - (СтрДлина(ПолностьюОПФ) * 2) Тогда
				// создаём СтрокуЗамены длиной ПолностьюОПФ
				СтрокаЗамены = "";
				Для к = 1 По ДлинаОПФ Цикл
					СтрокаЗамены = СтрокаЗамены + "*";
				КонецЦикла;
				НаименованиеЭлементаВРегСЗаменойПервогоВхождения = Лев(НаименованиеЭлементаВРег, НомерСтрокиВхождения - 1) + СтрокаЗамены + Прав(НаименованиеЭлементаВРег, ДлинаСтроки - (ДлинаОПФ + НомерСтрокиВхождения - 1));
				НомерВторойСтрокиВхождения = Найти(НаименованиеЭлементаВРегСЗаменойПервогоВхождения, ПолностьюОПФ);
				НаименованиеЭлемента = Лев(НаименованиеЭлемента, НомерВторойСтрокиВхождения - 2);
				ДлинаСтроки = СтрДлина(НаименованиеЭлемента);
			КонецЕсли;
			
			НаименованиеЭлементаВРег = ВРег(НаименованиеЭлемента);
			ВхождениеКраткоОПФ = Найти(НаименованиеЭлементаВРег, КраткоОПФ);
			Если ВхождениеКраткоОПФ <> 0 Тогда
				Если Сред(НаименованиеЭлемента, ВхождениеКраткоОПФ - 2, 1) = "," ИЛИ Сред(НаименованиеЭлемента, ВхождениеКраткоОПФ - 2, 1) = " " Тогда
					ЧислоЗабираемыхЛевыхСимволов = ВхождениеКраткоОПФ - 3;
				Иначе
					ЧислоЗабираемыхЛевыхСимволов = ВхождениеКраткоОПФ - 2;
				КонецЕсли;
				НаименованиеЭлемента = Лев(НаименованиеЭлемента, ЧислоЗабираемыхЛевыхСимволов);
				ДлинаСтроки = СтрДлина(НаименованиеЭлемента);
			КонецЕсли;
			Прервать;	
		КонецЕсли;	
	КонецЦикла;
	
	Если НомерСтрокиВхождения = 0 Тогда
		Для каждого Строка Из СтруктураОПФ Цикл
			КраткоОПФ = Строка.КраткоОПФ;
			ПолностьюОПФ = Строка.ПолностьюОПФ;
			Если ПолностьюОПФ = Неопределено ИЛИ ПолностьюОПФ = "" Тогда
				Прервать;
			КонецЕсли;	
			
			НомерСтрокиВхожденияКраткоОПФ = Найти(НаименованиеЭлементаВРег, КраткоОПФ);
			Если НомерСтрокиВхожденияКраткоОПФ <> 0 Тогда
				ДлинаОПФ = СтрДлина(КраткоОПФ);
				
				МассивВозможныхСимволов = Новый Массив();
				МассивВозможныхСимволов.Добавить(" ");
				МассивВозможныхСимволов.Добавить("""");
				МассивВозможныхСимволов.Добавить("*");
				МассивВозможныхСимволов.Добавить(".");
				МассивВозможныхСимволов.Добавить(",");
				
				СимволПередКраткоОПФ = Сред(НаименованиеЭлементаВРег, НомерСтрокиВхожденияКраткоОПФ - 1, 1);
				СимволПослеКраткоОПФ = Сред(НаименованиеЭлементаВРег, НомерСтрокиВхожденияКраткоОПФ + ДлинаОПФ, 1);
				
				СимволыПрисутствуют = Ложь;
				Если НомерСтрокиВхожденияКраткоОПФ = 1 Тогда
					Для каждого СимволИзМассива Из МассивВозможныхСимволов Цикл
						Если СимволИзМассива = СимволПослеКраткоОПФ Тогда
							СимволыПрисутствуют = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли (НомерСтрокиВхожденияКраткоОПФ + ДлинаОПФ) > ДлинаСтроки Тогда
					Для каждого СимволИзМассива Из МассивВозможныхСимволов Цикл
						Если СимволИзМассива = СимволПередКраткоОПФ Тогда
							СимволыПрисутствуют = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;		
				Иначе
					ПервыйСимволПрисутствует = Ложь;
					ПоследнийСимволПрисутствует = Ложь;
					Для каждого СимволИзМассива Из МассивВозможныхСимволов Цикл
						Если СимволИзМассива = СимволПередКраткоОПФ Тогда
							ПервыйСимволПрисутствует = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Для каждого СимволИзМассива Из МассивВозможныхСимволов Цикл
						Если СимволИзМассива = СимволПослеКраткоОПФ Тогда
							ПоследнийСимволПрисутствует = Истина;	
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если ПервыйСимволПрисутствует И ПоследнийСимволПрисутствует Тогда
						СимволыПрисутствуют = Истина;	
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ СимволыПрисутствуют Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрДлина(СтрЗаменить(НаименованиеЭлементаВРег, КраткоОПФ, "")) = ДлинаСтроки - (СтрДлина(КраткоОПФ) * 2) Тогда
					// создаём СтрокуЗамены длиной ПолностьюОПФ
					СтрокаЗамены = "";
					Для к = 1 По ДлинаОПФ Цикл
						СтрокаЗамены = СтрокаЗамены + "*";
					КонецЦикла;
					НаименованиеЭлементаВРегСЗаменойПервогоВхождения = Лев(НаименованиеЭлементаВРег, НомерСтрокиВхожденияКраткоОПФ - 1) + СтрокаЗамены + Прав(НаименованиеЭлементаВРег, ДлинаСтроки - (ДлинаОПФ + НомерСтрокиВхожденияКраткоОПФ - 1));
					НомерВторойСтрокиВхождения = Найти(НаименованиеЭлементаВРегСЗаменойПервогоВхождения, КраткоОПФ);
					НаименованиеЭлемента = Лев(НаименованиеЭлемента, НомерВторойСтрокиВхождения - 2);
					ДлинаСтроки = СтрДлина(НаименованиеЭлемента);
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НомерСтрокиВхожденияКраткоОПФ <> 0 Тогда
		Если Сред(НаименованиеЭлемента, НомерСтрокиВхожденияКраткоОПФ - 1, 1) = "(" И Сред(НаименованиеЭлемента, НомерСтрокиВхожденияКраткоОПФ + СтрДлина(КраткоОПФ), 1) = ")" Тогда
			НаименованиеЭлементаПреобраз = Лев(НаименованиеЭлемента, НомерСтрокиВхожденияКраткоОПФ - 2) + Прав(НаименованиеЭлемента, ДлинаСтроки - НомерСтрокиВхожденияКраткоОПФ + 1);
			ДлинаСтроки = ДлинаСтроки - 1;
			НомерСтрокиВхожденияКраткоОПФ = НомерСтрокиВхожденияКраткоОПФ - 1;
			НаименованиеЭлемента = Лев(НаименованиеЭлементаПреобраз, НомерСтрокиВхожденияКраткоОПФ + СтрДлина(КраткоОПФ) - 1) + Прав(НаименованиеЭлементаПреобраз, ДлинаСтроки - НомерСтрокиВхожденияКраткоОПФ - СтрДлина(КраткоОПФ) - 1);
			ДлинаСтроки = ДлинаСтроки - 1;
		КонецЕсли;
	КонецЕсли;
	//ДлинаСтроки = СтрДлина(НаименованиеЭлемента);
	НаименованиеЭлемента = СтрЗаменить(НаименованиеЭлемента, "«", """");
	НаименованиеЭлемента = СтрЗаменить(НаименованиеЭлемента, "»", """");
	НаименованиеЭлементаТест = НаименованиеЭлемента;
	ДлинаСтрокиТест = ДлинаСтроки;
	УтерянноеЧислоСимволов = 0;
	МассивИндексовКавычек = Новый Массив();
	Пока Истина Цикл
		ИндексКавычки = Найти(НаименованиеЭлементаТест, """");
		Если ИндексКавычки = 0 Тогда
			Прервать;
		КонецЕсли;
		МассивИндексовКавычек.Добавить(УтерянноеЧислоСимволов + ИндексКавычки);
		НаименованиеЭлементаТест = Прав(НаименованиеЭлементаТест, ДлинаСтрокиТест - ИндексКавычки);
		ДлинаСтрокиТест = ДлинаСтрокиТест - ИндексКавычки;
		УтерянноеЧислоСимволов = УтерянноеЧислоСимволов + ИндексКавычки;
	КонецЦикла;
	
	ОчищенноеНаименованиеЭлемента = НаименованиеЭлемента;
	
	// Убираем кавычки, если кавычек 2,  первую кавычку если кавычек 3, первую и последнюю если кавычек больше 3
	Если МассивИндексовКавычек.Количество() = 1 Тогда // удаляем эту кавычку
		НаименованиеЭлемента = Лев(НаименованиеЭлемента, МассивИндексовКавычек[0] - 1) + Прав(НаименованиеЭлемента, ДлинаСтроки - МассивИндексовКавычек[0]);
		МассивИндексовКавычек.Очистить();
		ДлинаСтроки = ДлинаСтроки - 1;	
	ИначеЕсли МассивИндексовКавычек.Количество() = 2 Тогда // удаляем обе кавычки
		НаименованиеЭлемента = Лев(НаименованиеЭлемента, МассивИндексовКавычек[0] - 1) + Прав(НаименованиеЭлемента, ДлинаСтроки - МассивИндексовКавычек[0]);
		НаименованиеЭлемента = Лев(НаименованиеЭлемента, МассивИндексовКавычек[1] - 2) + Прав(НаименованиеЭлемента, ДлинаСтроки - МассивИндексовКавычек[1]);
		МассивИндексовКавычек.Очистить();
		ДлинаСтроки = ДлинаСтроки - 2;
	ИначеЕсли МассивИндексовКавычек.Количество() = 3 Тогда // удаляем первую кавычку
		НаименованиеЭлемента = Лев(НаименованиеЭлемента, МассивИндексовКавычек[0] - 1) + Прав(НаименованиеЭлемента, ДлинаСтроки - МассивИндексовКавычек[0]);
		Для к = 1 По МассивИндексовКавычек.Количество() - 1 Цикл // для первой кавычки индекс не нужно уменьшать
			МассивИндексовКавычек[к] = МассивИндексовКавычек[к] - 1;
		КонецЦикла;
		МассивИндексовКавычек.Удалить(0);
		ДлинаСтроки = ДлинаСтроки - 1;
	ИначеЕсли МассивИндексовКавычек.Количество() > 3 Тогда // удаляем первую и последнюю кавычки
		НаименованиеЭлемента = Лев(НаименованиеЭлемента, МассивИндексовКавычек[0] - 1) + Прав(НаименованиеЭлемента, ДлинаСтроки - МассивИндексовКавычек[0]);
		НаименованиеЭлемента = Лев(НаименованиеЭлемента, МассивИндексовКавычек[МассивИндексовКавычек.Количество() - 1] - 2) + Прав(НаименованиеЭлемента, ДлинаСтроки - МассивИндексовКавычек[МассивИндексовКавычек.Количество() - 1]);
		МассивИндексовКавычек.Удалить(0);
		МассивИндексовКавычек.Удалить(МассивИндексовКавычек.Количество() - 1);
		Для к = 0 По МассивИндексовКавычек.Количество() - 1 Цикл
			МассивИндексовКавычек[к] = МассивИндексовКавычек[к] - 1;
		КонецЦикла;
		ДлинаСтроки = ДлинаСтроки - 2;		
	КонецЕсли;
	
	Если МассивИндексовКавычек.Количество() >= 2 Тогда
		// Убираем пробелы после первой кавычки и перед последней
		СимволПослеКавычки = Сред(НаименованиеЭлемента, МассивИндексовКавычек[0] + 1, 1);
		Если СимволПослеКавычки = " " Тогда
			НаименованиеЭлемента = Лев(НаименованиеЭлемента, МассивИндексовКавычек[0]) + Прав(НаименованиеЭлемента, ДлинаСтроки - (МассивИндексовКавычек[0] + 1));
			ДлинаСтроки = ДлинаСтроки - 1;
			Для к = 1 По МассивИндексовКавычек.Количество() - 1 Цикл // для первой кавычки индекс не нужно уменьшать
				МассивИндексовКавычек[к] = МассивИндексовКавычек[к] - 1;
			КонецЦикла;	
		КонецЕсли;
		
		СимволПослеКавычки = Сред(НаименованиеЭлемента, МассивИндексовКавычек[МассивИндексовКавычек.Количество() - 1] - 1, 1);
		Если СимволПослеКавычки = " " Тогда
			НаименованиеЭлемента = Лев(НаименованиеЭлемента, МассивИндексовКавычек[МассивИндексовКавычек.Количество() - 1] - 2) + Прав(НаименованиеЭлемента, ДлинаСтроки - МассивИндексовКавычек[МассивИндексовКавычек.Количество() - 1] + 1);
			ДлинаСтроки = ДлинаСтроки - 1;
			МассивИндексовКавычек[МассивИндексовКавычек.Количество() - 1] = МассивИндексовКавычек[МассивИндексовКавычек.Количество() - 1] - 1;
		КонецЕсли;
	КонецЕсли;			
	
	СтруктураНаименований = Новый Структура("КраткоеНаименование, ПолноеНаименование", "", "");
	СтруктураНаименований.Вставить("ПолноеНаименование", ОчищенноеНаименованиеЭлемента);
	
	Если НомерСтрокиВхождения <> 0 И МассивИндексовКавычек.Количество() > 0 Тогда
		НомерСтрокиВхождения = НомерСтрокиВхождения - 2;
	ИначеЕсли НомерСтрокиВхожденияКраткоОПФ <> 0 И МассивИндексовКавычек.Количество() > 0 Тогда
		НомерСтрокиВхожденияКраткоОПФ = НомерСтрокиВхожденияКраткоОПФ - 2;
	КонецЕсли;
	
	КраткоеНаименованиеЭлемента = "";
	
	Если НомерСтрокиВхождения <> 0 Тогда
		НомерСтрокиВхождения = Найти(ВРег(НаименованиеЭлемента), ПолностьюОПФ);
		КраткоеНаименованиеЭлемента = Лев(НаименованиеЭлемента, НомерСтрокиВхождения - 1) + Прав(НаименованиеЭлемента, ДлинаСтроки - НомерСтрокиВхождения + 1 - ДлинаОПФ) + ", " + КраткоОПФ;	
		КраткоеНаименованиеЭлемента = СокрЛП(КраткоеНаименованиеЭлемента);
	ИначеЕсли НомерСтрокиВхожденияКраткоОПФ <> 0 Тогда
		НомерСтрокиВхожденияКраткоОПФ = Найти(ВРег(НаименованиеЭлемента), КраткоОПФ);
		КраткоеНаименованиеЭлемента = СтрЗаменить(НаименованиеЭлемента, КраткоОПФ, "") + ", " + КраткоОПФ;
		КраткоеНаименованиеЭлемента = СокрЛП(КраткоеНаименованиеЭлемента);
	КонецЕсли;
	
	КраткоеНаименованиеЭлемента = СокрЛП(КраткоеНаименованиеЭлемента);
	
	Если КраткоеНаименованиеЭлемента <> "" Тогда
		Пока Истина Цикл // убираем все лишние пробелы и запятые после всех преобразований
			ДлинаСтроки = СтрДлина(КраткоеНаименованиеЭлемента);
			КраткоеНаименованиеЭлемента = СтрЗаменить(КраткоеНаименованиеЭлемента, " ,", ", ");
			КраткоеНаименованиеЭлемента = СтрЗаменить(КраткоеНаименованиеЭлемента, "  ", " ");
			КраткоеНаименованиеЭлемента = СтрЗаменить(КраткоеНаименованиеЭлемента, ",,", ",");
			КраткоеНаименованиеЭлемента = СтрЗаменить(КраткоеНаименованиеЭлемента, ".,", ",");
			КраткоеНаименованиеЭлемента = СтрЗаменить(КраткоеНаименованиеЭлемента, ",.", ",");
			НоваяДлинаСтроки = СтрДлина(КраткоеНаименованиеЭлемента);
			Если ДлинаСтроки = НоваяДлинаСтроки Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		Если Лев(КраткоеНаименованиеЭлемента, 1) = """" Тогда
			КраткоеНаименованиеЭлемента = Прав(КраткоеНаименованиеЭлемента, ДлинаСтроки - 1);
		КонецЕсли;	
	КонецЕсли;
	
	Если КраткоеНаименованиеЭлемента <> "" И Лев(КраткоеНаименованиеЭлемента, СтрДлина(КраткоеНаименованиеЭлемента) - (СтрДлина(КраткоОПФ) + 2)) = "" Тогда
		КраткоеНаименованиеЭлемента = "";
		ОчищенноеНаименованиеЭлемента = "";
	КонецЕсли;	
	
	НаименованиеКраткоеЭлементаВРег = ВРег(КраткоеНаименованиеЭлемента);
	ДлинаСтроки = СтрДлина(КраткоеНаименованиеЭлемента);
	Для каждого Строка Из СтруктураОПФ Цикл
		КраткоОПФ = Строка.КраткоОПФ;
		ПолностьюОПФ = Строка.ПолностьюОПФ;
		ДлинаКраткоОПФ = СтрДлина(КраткоОПФ);
		Если КраткоОПФ = Неопределено ИЛИ КраткоОПФ = "" Тогда
			Прервать;
		КонецЕсли;	
		
		НомерСтрокиВхождения = Найти(НаименованиеКраткоеЭлементаВРег, КраткоОПФ);
		Если НомерСтрокиВхождения <> 0 Тогда
			Если Сред(НаименованиеКраткоеЭлементаВРег, НомерСтрокиВхождения - 1, 1) <> " " И Сред(НаименованиеКраткоеЭлементаВРег, НомерСтрокиВхождения + ДлинаКраткоОПФ, 1) <> " " Тогда
				Продолжить;
			КонецЕсли;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	НаименованиеПолноеЭлемента = "";
	НаименованиеБезОПФ = "";
	КраткоеНаименованиеВариант2 = "";
	КраткоеНаименованиеВариант3 = "";
	Если НомерСтрокиВхождения <> 0 Тогда
		//Если Прав(НаименованиеКраткоеЭлементаВРег, ДлинаКраткоОПФ + 2) = ", " + КраткоОПФ Тогда
		ПолностьюОПФ = НРег(ПолностьюОПФ);
		ДлинаПолностьюОПФ = СтрДлина(ПолностьюОПФ);
		ПервыйСимвол = Лев(ПолностьюОПФ, 1);
		ПервыйСимвол = ВРег(ПервыйСимвол);
		ПреобразованнаяЧастьПолностьюОПФ = ПервыйСимвол + Прав(ПолностьюОПФ, ДлинаПолностьюОПФ - 1);
		НаименованиеБезОПФ = Лев(КраткоеНаименованиеЭлемента, НомерСтрокиВхождения - 3);
		//НаименованиеПолноеЭлемента = ПреобразованнаяЧастьПолностьюОПФ + " """ + Лев(КраткоеНаименованиеЭлемента, ДлинаСтроки - ДлинаКраткоОПФ - 2) + """";
		НаименованиеПолноеЭлемента = ПреобразованнаяЧастьПолностьюОПФ + " """ + НаименованиеБезОПФ + """";
		//КонецЕсли;	
		КраткоеНаименованиеВариант2 = КраткоОПФ + " """ + НаименованиеБезОПФ + """";
		КраткоеНаименованиеВариант3 = КраткоОПФ + " " + НаименованиеБезОПФ;
		Пока Истина Цикл // убираем все лишние пробелы и запятые после всех преобразований
			ДлинаСтроки = СтрДлина(НаименованиеПолноеЭлемента);
			НаименованиеПолноеЭлемента = СтрЗаменить(НаименованиеПолноеЭлемента, " ,", ", ");
			НаименованиеПолноеЭлемента = СтрЗаменить(НаименованиеПолноеЭлемента, "  ", " ");
			НаименованиеПолноеЭлемента = СтрЗаменить(НаименованиеПолноеЭлемента, ",,", ",");
			НаименованиеПолноеЭлемента = СтрЗаменить(НаименованиеПолноеЭлемента, ".,", ",");
			НаименованиеПолноеЭлемента = СтрЗаменить(НаименованиеПолноеЭлемента, ",.", ",");
			НаименованиеПолноеЭлемента = СтрЗаменить(НаименованиеПолноеЭлемента, """""", """");
			НоваяДлинаСтроки = СтрДлина(НаименованиеПолноеЭлемента);
			Если ДлинаСтроки = НоваяДлинаСтроки Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	Если КраткоеНаименованиеЭлемента = "" И НаименованиеПолноеЭлемента = "" Тогда
		КраткоеНаименованиеЭлемента = НаименованиеЭлемента;	
		НаименованиеПолноеЭлемента = НаименованиеЭлемента;
	КонецЕсли;
	СтруктураНаименований.Вставить("КраткоеНаименование", СокрЛП(КраткоеНаименованиеЭлемента));
	СтруктураНаименований.Вставить("ПолноеНаименование", СокрЛП(НаименованиеПолноеЭлемента));
	СтруктураНаименований.Вставить("НаименованиеБезОПФ", СокрЛП(НаименованиеБезОПФ));
	СтруктураНаименований.Вставить("КраткоеНаименованиеВариант2", СокрЛП(КраткоеНаименованиеВариант2));
	СтруктураНаименований.Вставить("КраткоеНаименованиеВариант3", СокрЛП(КраткоеНаименованиеВариант3));
	
	Возврат СтруктураНаименований;
	
КонецФункции



// Функция для проверки ИНН на сервере
//
// Параметры:
//     ИНН, тип Строка - ИНН
//     СтруктураСообщений, тип "Структура" - структура для записи сообщений пользователю
//
// Возвращаемое значение:
// Тип Булево, признак валидности ИНН
// 
Функция ВерныйИНН(Знач ИНН, СтруктураСообщений = Неопределено) Экспорт
	
	ИНН = СокрЛП(ИНН);
	
	Если НЕ ТолькоЦифры(ИНН) Тогда
		Если СтруктураСообщений <> Неопределено Тогда
			СтруктураСообщений.Вставить("ВерныйИНН", "ИНН контрагента должен содержать только цифры");
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	Если СтрДлина(ИНН)<>10 И СтрДлина(ИНН)<>12 Тогда
		Если СтруктураСообщений <> Неопределено Тогда
			СтруктураСообщений.Вставить("ВерныйИНН", "ИНН контрагента должен содержать 10 или 12 цифр");
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	Если СтрДлина(ИНН)=12 Тогда
		Сумма1 = 7*Сред(ИНН, 1, 1) + 2*Сред(ИНН, 2, 1) + 4*Сред(ИНН, 3, 1) + 10*Сред(ИНН, 4, 1) + 3*Сред(ИНН, 5, 1) + 5*Сред(ИНН, 6, 1) + 9*Сред(ИНН, 7, 1) + 4*Сред(ИНН, 8, 1) + 6*Сред(ИНН, 9, 1) + 8*Сред(ИНН, 10, 1);
		КонтрольноеЧисло1 = Сумма1 - Цел(Сумма1/11)*11;
		КонтрольнаяЦифра1 = ?(КонтрольноеЧисло1=10, "0", "" + КонтрольноеЧисло1);
		Сумма2 = 3*Сред(ИНН, 1, 1) + 7*Сред(ИНН, 2, 1) + 2*Сред(ИНН, 3, 1) + 4*Сред(ИНН, 4, 1) + 10*Сред(ИНН, 5, 1) + 3*Сред(ИНН, 6, 1) + 5*Сред(ИНН, 7, 1) + 9*Сред(ИНН, 8, 1) + 4*Сред(ИНН, 9, 1) + 6*Сред(ИНН, 10, 1) + 8*Сред(ИНН, 11, 1);
		КонтрольноеЧисло2 = Сумма2 - Цел(Сумма2/11)*11;
		КонтрольнаяЦифра2 = ?(КонтрольноеЧисло2=10, "0", "" + КонтрольноеЧисло2);
		Если Сред(ИНН, 11, 1)<>КонтрольнаяЦифра1 ИЛИ Сред(ИНН, 12, 1)<>КонтрольнаяЦифра2 Тогда
			Если СтруктураСообщений <> Неопределено Тогда
				СтруктураСообщений.Вставить("ВерныйИНН", "ИНН контрагента не прошел проверку на контрольную сумму");
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Сумма2 = 2*Сред(ИНН, 1, 1) + 4*Сред(ИНН, 2, 1) + 10*Сред(ИНН, 3, 1) + 3*Сред(ИНН, 4, 1) + 5*Сред(ИНН, 5, 1) + 9*Сред(ИНН, 6, 1) + 4*Сред(ИНН, 7, 1) + 6*Сред(ИНН, 8, 1) + 8*Сред(ИНН, 9, 1);
		КонтрольноеЧисло2 = Сумма2 - Цел(Сумма2/11)*11;
		КонтрольнаяЦифра2 = ?(КонтрольноеЧисло2=10, "0", "" + КонтрольноеЧисло2);
		Если Сред(ИНН, 10, 1)<>КонтрольнаяЦифра2 Тогда
			Если СтруктураСообщений <> Неопределено Тогда
				СтруктураСообщений.Вставить("ВерныйИНН", "ИНН контрагента не прошел проверку на контрольную сумму");
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции


// Функция выполняет получение контактной информации контрагента из регистра сведений "КонтактнаяИнформация"
//
// Параметры:
//		КонтрагентСсылка - ссылка справочника "Контрагенты"
//		ВидКонтактнойИнформации - значение перечисления "ТипыКонтактнойИнформации"
// 
// Возвращаемое значение:
// 		Результат - набор или представление конактной информации в зависимости от запрашиваемого вида контактной информации
//		
Функция ПолучитьКонтактнуюИнформациюКонтрагента(КонтрагентСсылка, ВидКонтактнойИнформации)
	
	КонтактнаяИнфаИзТЧКонтрагентаСтрока = КонтрагентСсылка.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, "Вид");
	Если КонтактнаяИнфаИзТЧКонтрагентаСтрока <> Неопределено Тогда
		Результат = КонтактнаяИнфаИзТЧКонтрагентаСтрока.Представление;
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Выполняет множественный поиск по ИИН и КПП
Функция НайтиКонтрагентаПоИННиКППНовый(ИННКонтрагента, КППКонтрагента) Экспорт
	
	СписокКонтрагентов = Новый СписокЗначений();
	Если ЗначениеЗаполнено(ИННКонтрагента) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И НЕ Контрагенты.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ИНН", ИННКонтрагента);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокКонтрагентов.Добавить(Выборка.Контрагент);
		КонецЦикла;
		//проверим по КПП если нашли много
		Если ЗначениеЗаполнено(КППКонтрагента) Тогда
			Если СписокКонтрагентов.Количество() > 1 Тогда				
				КвоЭлСписка = СписокКонтрагентов.Количество();
				Для к = 1 по КвоЭлСписка Цикл
					ЭлСписокКонтрагентов = СписокКонтрагентов[КвоЭлСписка-к];				
					Если СокрЛП(ЭлСписокКонтрагентов.Значение.КПП) = СокрЛП(КППКонтрагента) Тогда
						СписокКонтрагентов.Вставить(0, ЭлСписокКонтрагентов.Значение);
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	Если СписокКонтрагентов.Количество() > 0 Тогда
		Возврат СписокКонтрагентов;
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


// Функция для проверки возможности создания и заполнения документа в базе данных
//
// Параметры:
//  ИД - Строка, уникальный идентификатор документа из контейнера данных,
//	СтруктураСообщений - тип "Структура", служит для сохранения сообщений пользователю 
//
// Возвращаемое значение:
//	ДокументГотов - признак готовности документа к загрузке
//
Функция ПроверкаГотовностиКЗагрузкеИПоискДублей(Знач Документ, СтруктураСообщений) Экспорт
	
	ДокументГотов = Истина;
	СтрокаШапки = Документ.Шапка;
	Если НЕ Документ.ВидДокумента = "КФЛ" Тогда
		Если Не ЗначениеЗаполнено(СтрокаШапки.Организация.ИтоговоеЗначение) Тогда
			//ТекстСообщения = "Документ " + Документ.Наименование + " не готов к загрузке: Не указана организация!";
			//СтруктураСообщений.Вставить("ТекстСообщения", ТекстСообщения);
			ДокументГотов = Ложь;
		КонецЕсли;
		Если СтруктураСообщений.ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ СтруктураСообщений.ИмяШаблона = "КомплекснаяАвтоматизация 2.0" ИЛИ СтруктураСообщений.ИмяШаблона = "Розница 2.2" Тогда 
			Для Каждого Строка ИЗ Документ.ТЧ Цикл 
				Если ТипЗнч(Строка.Значение.Номенклатура.ИтоговоеЗначение) <> Тип("СправочникСсылка.Номенклатура") 
					И Строка.Значение.ВидНоменклатуры.ИтоговоеЗначение = Справочники.ВидыНоменклатуры.ПустаяСсылка() Тогда
					//ТекстСообщения = "Документ " + Документ.Наименование + " не готов к загрузке: в табличной части документа не заполнен вид номеклатуры." + Символы.ПС + "Для автоматического заполнения вида номенклатуры заполните соответствующие настройки в меню настроек. ";
					//СтруктураСообщений.Вставить("ТекстСообщения", ТекстСообщения);
					ДокументГотов = Ложь;
					Прервать;
				КонецЕсли;			
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументГотов Тогда
		СтараяСсылка = ПоискДублей(Документ, СтруктураСообщений);
		Документ.СсылкаДокумент = СтараяСсылка;
	Иначе
		СтараяСсылка = Неопределено;
	КонецЕсли;

	Возврат Новый Структура("Готов, СтараяСсылка", ДокументГотов, СтараяСсылка);
	
КонецФункции


// Функция для проверки существования документов контрагента с заданными входящими датой и номером
//
// Параметры:
//  ИД - Строка, уникальный идентификатор документа из контейнера данных,
//	СтруктураСообщений - тип "Структура", служит для сохранения сообщений пользователю 
//
// Возвращаемое значение:
//	СтараяСсылка - ссылка на найденный документ, если дублей нет то Неопределено
//
Функция ПоискДублей(Документ, СтруктураСообщений) Экспорт
	
	СтараяСсылка = Неопределено;
	СтрокаШапки = Документ.Шапка;
	
	Если ЗначениеЗаполнено(Документ.СсылкаДокумент) И Не Документ.СсылкаДокумент.Пустая() И Документ.СсылкаДокумент.ПолучитьОбъект() <> Неопределено Тогда
		
		СтараяСсылка = Документ.СсылкаДокумент;
		
	КонецЕсли;
	
	Если Документ.ВидДокумента = "ПТУ" ИЛИ Документ.ВидДокумента = "РТУ" ИЛИ Документ.ВидДокумента = "ПН" ИЛИ Документ.ВидДокумента = "РН" ИЛИ Документ.ВидДокумента = "ПТ" ИЛИ Документ.ВидДокумента = "РТ" Тогда
		
		Если СтараяСсылка = Неопределено Тогда
			//Поиск документов с равными датой и номером вх.док-та для контрагента
			Если  Документ.ВидДокумента = "ПТУ" Тогда
				ВидДокумента = "ПоступлениеТоваровУслуг";
			ИначеЕсли Документ.ВидДокумента = "СП" Тогда
				ВидДокумента = "СчетНаОплатуПоставщика";
			ИначеЕсли  Документ.ВидДокумента = "РТУ" Тогда
				ВидДокумента = "РеализацияТоваровУслуг";
			ИначеЕсли  Документ.ВидДокумента = "ПН" Тогда
				ВидДокумента = "ПриходнаяНакладная";
			ИначеЕсли  Документ.ВидДокумента = "РН" Тогда
				ВидДокумента = "РасходнаяНакладная";
			ИначеЕсли Документ.ВидДокумента = "ПТ" Тогда
				ВидДокумента = "ПоступлениеТоваров";
			ИначеЕсли Документ.ВидДокумента = "РТ" Тогда
				ВидДокумента = "РеализацияТоваров";
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	" + ВидДокумента + ".Ссылка
			|ИЗ
			|	Документ." + ВидДокумента + " КАК " + ВидДокумента + "
			|ГДЕ
			|	" + ВидДокумента + ".Контрагент = &Контрагент
			|	И НЕ " + ВидДокумента + ".Проведен
			|	И НЕ " + ВидДокумента + ".ПометкаУдаления";
			Запрос.УстановитьПараметр("Контрагент",  СтрокаШапки.Контрагент.ИтоговоеЗначение);
			Если СтруктураСообщений.ИмяШаблона = "БухгалтерияПредприятия 3.0" ИЛИ СтруктураСообщений.ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
				Запрос.УстановитьПараметр("ДатаВходящегоДокумента", НачалоДня(СтрокаШапки.ДатаВходящегоДокумента.ИтоговоеЗначение));
				Запрос.УстановитьПараметр("НомерВходящегоДокумента",  СтрокаШапки.НомерВходящегоДокумента.ИтоговоеЗначение);
				Запрос.Текст = Запрос.Текст +"
				|	И " + ВидДокумента + ".ВидОперации В (&ВидыОперации)";
				ВидыОперации = Новый Массив;
				Если Документ.ВидДокумента = "ПТУ" Тогда
					Запрос.Текст = Запрос.Текст +"
					|	И " + ВидДокумента + ".ДатаВходящегоДокумента = &ДатаВходящегоДокумента 
					|	И " + ВидДокумента + ".НомерВходящегоДокумента = &НомерВходящегоДокумента";    
					ВидыОперации.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия);
				ИначеЕсли Документ.ВидДокумента = "РТУ" Тогда
					ВидыОперации.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия);
					ВидыОперации.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.Товары);
					Запрос.Текст = Запрос.Текст +"
					|	И " + ВидДокумента + ".Дата МЕЖДУ &ДатаНачало И &ДатаКонец 
					|	И " + ВидДокумента + ".СуммаДокумента = &Всего";    
					Запрос.УстановитьПараметр("ДатаНачало", НачалоДня(СтрокаШапки.Дата.ИтоговоеЗначение));
					Запрос.УстановитьПараметр("ДатаКонец", КонецДня(СтрокаШапки.Дата.ИтоговоеЗначение));
					Запрос.УстановитьПараметр("Всего",  СтрокаШапки.Всего.ИтоговоеЗначение);
				ИначеЕсли Документ.ВидДокумента = "ПН" Тогда
					ВидыОперации.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика);
				ИначеЕсли Документ.ВидДокумента = "РН" Тогда
					ВидыОперации.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю);
				КонецЕсли;
				Запрос.УстановитьПараметр("ВидыОперации", ВидыОперации);
			ИначеЕсли СтруктураСообщений.ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ СтруктураСообщений.ИмяШаблона = "КомплекснаяАвтоматизация 2.0" ИЛИ СтруктураСообщений.ИмяШаблона = "Розница 2.2" Тогда 
				Если Документ.ВидДокумента = "ПТУ" Тогда
					Запрос.Текст = Запрос.Текст +"
					|	И " + ВидДокумента + ".ХозяйственнаяОперация = &ХозяйственнаяОперация";
					Запрос.УстановитьПараметр("ХозяйственнаяОперация",  Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
				ИначеЕсли Документ.ВидДокумента = "ПТ" Тогда
					Запрос.Текст = Запрос.Текст +"
					|	И " + ВидДокумента + ".ХозяйственнаяОперация = &ХозяйственнаяОперация";
					Запрос.УстановитьПараметр("ХозяйственнаяОперация",  Перечисления.ХозяйственныеОперации.ПоступлениеТоваров);
				КонецЕсли;
			КонецЕсли;
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Если Выборка.Следующий() Тогда
				СтараяСсылка = Выборка.Ссылка;
			КонецЕсли;

		КонецЕсли;
		
		СсылкаНаДокСтрока = Строка(СтараяСсылка);
		СсылкаНаДокПреобразованная = СтрЗаменить(СсылкаНаДокСтрока, " 0:00:00", "");
		ТекстВопроса = "Найден документ с указанным номером и датой входящего документа для указанного контрагента: " + СсылкаНаДокПреобразованная;
		
	ИначеЕсли Документ.ВидДокумента = "КФЛ" Тогда
		
		// Поиск карточек физического лица с указанными паспортными данными
		
		Фамилия =СтрокаШапки.Фамилия.ИтоговоеЗначение;
		Имя = СтрокаШапки.Имя.ИтоговоеЗначение;
		Отчество = СтрокаШапки.Отчество.ИтоговоеЗначение;
		Наименование = "" + Фамилия + " " + Имя + " " + Отчество; 
		
		Если СтараяСсылка = Неопределено Тогда
			
			// Проверка на дубли
			ЗапросПоДублям = Новый Запрос;
			ЗапросПоДублям.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ДокументыФизическихЛиц.Физлицо КАК ФизЛицо
			|ИЗ
			|	РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
			|ГДЕ
			|	ДокументыФизическихЛиц.Физлицо.Наименование = &Наименование
			|	И ДокументыФизическихЛиц.ВидДокумента = &ВидДокумента
			|	И ДокументыФизическихЛиц.Серия = &Серия
			|	И ДокументыФизическихЛиц.Номер = &Номер
			|	И ДокументыФизическихЛиц.ДатаВыдачи = &ДатаВыдачи
			|	И ДокументыФизическихЛиц.КодПодразделения = &КодПодразделения";
			
			ЗапросПоДублям.УстановитьПараметр("Наименование",						Наименование);
			ЗапросПоДублям.УстановитьПараметр("ВидДокумента",				Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ);
			ЗапросПоДублям.УстановитьПараметр("Серия",				СтрокаШапки.СерияПаспорта.ИтоговоеЗначение);
			ЗапросПоДублям.УстановитьПараметр("Номер",				СтрокаШапки.НомерПаспорта.ИтоговоеЗначение);
			ЗапросПоДублям.УстановитьПараметр("ДатаВыдачи",			СтрокаШапки.ДатаВыдачи.ИтоговоеЗначение);
			ЗапросПоДублям.УстановитьПараметр("КодПодразделения",	СтрокаШапки.КодПодразделения.ИтоговоеЗначение);
			
			Выборка = ЗапросПоДублям.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СтараяСсылка = Выборка.ФизЛицо;
			КонецЕсли;
			
		КонецЕсли; 
		
		ТекстВопроса = "Найдено физ. лицо, которое имеет такие же ФИО и паспортные данные как у " + Наименование;
		
	ИначеЕсли Документ.ВидДокумента = "ЗП" Тогда
		
		Если СтараяСсылка = Неопределено Тогда
			//Поиск документов с равными датой и номером вх.док-та для контрагента
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЗаказПоставщику.Ссылка
			|ИЗ
			|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
			|ГДЕ
			|	ЗаказПоставщику.ДатаПоступления = &ДатаПоступления
			|	И НЕ ЗаказПоставщику.Проведен
			|	И НЕ ЗаказПоставщику.ПометкаУдаления
			|	И ЗаказПоставщику.Контрагент = &Контрагент";
			Запрос.УстановитьПараметр("Контрагент",  СтрокаШапки.Контрагент.ИтоговоеЗначение);
			Запрос.УстановитьПараметр("ДатаПоступления", НачалоДня(СтрокаШапки.ДатаВходящегоДокумента.ИтоговоеЗначение));
			Если СтруктураСообщений.ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
				Запрос.Текст = Запрос.Текст  + " И ЗаказПоставщику.ХозяйственнаяОперация = &ХозяйственнаяОперация";
				Запрос.УстановитьПараметр("ХозяйственнаяОперация", Справочники.ХозяйственныеОперации.ЗаказНаЗакупку);
			ИначеЕсли СтруктураСообщений.ИмяШаблона = "УправлениеТорговлей 11.1" ИЛИ СтруктураСообщений.ИмяШаблона = "КомплекснаяАвтоматизация 2.0" Тогда
				Запрос.Текст = Запрос.Текст + " И ЗаказПоставщику.ХозяйственнаяОперация = &ХозяйственнаяОперация";
				Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
			КонецЕсли;
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Если Выборка.Следующий() Тогда
				СтараяСсылка = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		СсылкаНаДокСтрока = Строка(СтараяСсылка);
		СсылкаНаДокПреобразованная = СтрЗаменить(СсылкаНаДокСтрока, " 0:00:00", "");
		ТекстВопроса = "Найден документ с указанным номером и датой входящего документа для указанного контрагента: " + СсылкаНаДокПреобразованная;
		
	ИначеЕсли Документ.ВидДокумента = "АВР" Тогда
		
		Если СтараяСсылка = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	АктВыполненныхРабот.Ссылка
			|ИЗ
			|	Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
			|ГДЕ
			|	АктВыполненныхРабот.Контрагент = &Контрагент
			|	И НЕ АктВыполненныхРабот.ПометкаУдаления
			|	И АктВыполненныхРабот.Дата МЕЖДУ &ДатаНачало И &ДатаКонец
			|	И АктВыполненныхРабот.ХозяйственнаяОперация = &ХозяйственнаяОперация";
			Запрос.УстановитьПараметр("ДатаНачало", НачалоДня(СтрокаШапки.Дата.ИтоговоеЗначение));
			Запрос.УстановитьПараметр("ДатаКонец", КонецДня(СтрокаШапки.Дата.ИтоговоеЗначение));
			Запрос.УстановитьПараметр("Контрагент", СтрокаШапки.Контрагент.ИтоговоеЗначение);
			Запрос.УстановитьПараметр("ХозяйственнаяОперация", Справочники.ХозяйственныеОперации.АктВыполненныхРабот);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Если Выборка.Следующий() Тогда
				СтараяСсылка = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		СсылкаНаДокСтрока = Строка(СтараяСсылка);
		СсылкаНаДокПреобразованная = СтрЗаменить(СсылкаНаДокСтрока, " 0:00:00", "");
		ТекстВопроса = "Найден документ с указаной датой документа для указанного контрагента: " + СсылкаНаДокПреобразованная;
		
	ИначеЕсли Документ.ВидДокумента = "ПП" Тогда
		
		Если СтараяСсылка = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПлатежноеПоручение.Ссылка
			|ИЗ
			|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
			|ГДЕ
			|	ПлатежноеПоручение.Контрагент = &Контрагент
			|	И НЕ ПлатежноеПоручение.ПометкаУдаления
			|	И ПлатежноеПоручение.Дата МЕЖДУ &ДатаНачало И &ДатаКонец";
			Запрос.УстановитьПараметр("ДатаНачало", НачалоДня(СтрокаШапки.Дата.ИтоговоеЗначение));
			Запрос.УстановитьПараметр("ДатаКонец", КонецДня(СтрокаШапки.Дата.ИтоговоеЗначение));
			Запрос.УстановитьПараметр("Контрагент", СтрокаШапки.Контрагент.ИтоговоеЗначение);
			Если СтруктураСообщений.ИмяШаблона = "БухгалтерияПредприятия 3.0" Тогда
				Запрос.Текст = Запрос.Текст +"
				|	И ПлатежноеПоручение.Организация = &Организация
				|	И ПлатежноеПоручение.ВидОперации = &ВидОперации";
				Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику);
				Запрос.УстановитьПараметр("Организация", СтрокаШапки.Организация.ИтоговоеЗначение);
				
			ИначеЕсли СтруктураСообщений.ИмяШаблона = "УправлениеНебольшойФирмой 1.6" Тогда
				Запрос.Текст = Запрос.Текст +"
				|	И ПлатежноеПоручение.ХозяйственнаяОперация = &ХозяйственнаяОперация";
				Запрос.УстановитьПараметр("ХозяйственнаяОперация",  Справочники.ХозяйственныеОперации.Оплата);
			КонецЕсли;
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Если Выборка.Следующий() Тогда
				СтараяСсылка = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		СсылкаНаДокСтрока = Строка(СтараяСсылка);
		СсылкаНаДокПреобразованная = СтрЗаменить(СсылкаНаДокСтрока, " 0:00:00", "");
		ТекстВопроса = "Найден документ с указаной датой документа для указанного контрагента: " + СсылкаНаДокПреобразованная;
	КонецЕсли;
	
	ТекстВопроса = ?(СтараяСсылка <> Неопределено, ТекстВопроса, Неопределено);
	СтруктураСообщений.Вставить("ТекстВопроса", ТекстВопроса);
	
	Возврат СтараяСсылка;
	
КонецФункции


// Процедура вызывается каждый раз перед записью документа,
// выполняет заполнение счетов учета 
//
// Параметры:
//		ДокументОбъект - документ (тип "ДокументОбъект")
//		Отказ - если присвоить этой переменной значение Истина, формирование документа будет прервано
//
Процедура ДокументОбъектПередЗаписью(ДокументОбъект)
	
	Если ДокументОбъект.Номер = "" Тогда
		ДокументОбъект.УстановитьНовыйНомер("");
	КонецЕсли;
	
КонецПроцедуры


// Функция для определоения ИД ссылки и её типа
//
// Параметры:
//    Ссылка - любая ссылка на объект базы данных
//
// Возвращаемое значение:
//    Структура, сождержащая СсылкаИД и СсылкаТип
//
Функция ТипСсылки(Ссылка)
	
	Если Ссылка <> Неопределено Тогда
		ИмяМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка)).ПолноеИмя();
		Если Найти(ИмяМетаданных, "Документ.") = 1 Тогда
			СсылкаТип = СтрЗаменить(ИмяМетаданных, "Документ.", "ДокументСсылка.");
		ИначеЕсли Найти(ИмяМетаданных, "Справочник.") = 1 Тогда
			СсылкаТип = СтрЗаменить(ИмяМетаданных, "Справочник.", "СправочникСсылка.");
		ИначеЕсли Найти(ИмяМетаданных, "Перечисление.") = 1 Тогда
			СсылкаТип = СтрЗаменить(ИмяМетаданных, "Перечисление.", "ПеречислениеСсылка.");
		ИначеЕсли Найти(ИмяМетаданных, "ПланВидовХарактеристик.") = 1 Тогда
			СсылкаТип = СтрЗаменить(ИмяМетаданных, "ПланВидовХарактеристик.", "ПланВидовХарактеристикСсылка.");
		Иначе 
			СсылкаТип = ИмяМетаданных;
		КонецЕсли;
	Иначе
		СсылкаТип = Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("СсылкаИД, СсылкаТип", XMLСтрока(Ссылка), СсылкаТип) 
	
КонецФункции


// Помещает файлы с диска в хранилище присоединенных файлов.
// 
// Параметры:
//  ВыбранныеФайлы                 - Массив - пути к файлам на диске.
//  ВладелецФайла                  - Ссылка на владельца файла.
//  НастройкиРаботыСФайлами        - Структура.
//  ПрисоединенныеФайлыМассив      - Массив (возвращаемое значение) - заполняется ссылками
//                                   на добавленные файлы.
//  ИдентификаторФормы             - УникальныйИдентификатор формы.
//
Процедура СохранитьФайлДокумента(DocumentID, ИмяБезРасширения, Знач ВладелецФайла) Экспорт
	
	ErrorDescription = "";
	
	Если ПараметрыСеанса.EfsolТокен = "" Тогда
		ПараметрыСеанса.EfsolТокен = "4BA62CD2-DF5F-4283-A7E6-6B741F8F4AC6";
	КонецЕсли;
	
	Результатат = EfsolADLКлиентСервер.AccountEDocuments_GetDocumentFile(DocumentID, ErrorDescription);
	Если ErrorDescription = "" Тогда
		
		АдресВременногоХранилищаТекста = "";
		АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(Результатат.ДвоичныеДанные);
		
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("ВладелецФайлов",              ВладелецФайла);
		ПараметрыФайла.Вставить("Автор");
		ПараметрыФайла.Вставить("ИмяБезРасширения",            ИмяБезРасширения);
		ПараметрыФайла.Вставить("РасширениеБезТочки",          Результатат.РасширениеФайла);
		ПараметрыФайла.Вставить("ГруппаФайлов");
		ПараметрыФайла.Вставить("ВремяИзменения");
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");

		// Создание карточки Файла в базе данных.
		ПрисоединенныйФайл = РаботаСФайламиСлужебныйВызовСервера.ДобавитьФайл(
			ПараметрыФайла,
			АдресВременногоХранилищаФайла,
			АдресВременногоХранилищаТекста);

	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьНаименованиеЭлементаАрхива(знач ЭлементОрганизация = "", знач ЭлементВид = "", знач ЭлементНомер = "", знач ЭлементДата = "", знач ЭлементКонтрагент = "", знач ЭлементСумма = "") //Дубль
	
	Разделитель = ",_";
	
	ЭлементОрганизация = Лев(ЭлементОрганизация, 30) + Разделитель;
	ЭлементВид         = ЭлементВид                                 + Разделитель;
	ЭлементНомер 		= ?(ПустаяСтрока(ЭлементНомер), "", "№_" + Лев(ЭлементНомер, 15)   + Разделитель); // от сделки номер приходит как пустая строка
	ЭлементДата        = ?(ЭлементДата <> '00010101', Лев(ЭлементДата, 10), "")  + Разделитель;
	ЭлементКонтрагент  = Лев(ЭлементКонтрагент, 30) + Разделитель;
	ЭлементСумма       = Формат(ЭлементСумма, "ЧДЦ=2; ЧГ=0");
		
	Наименование = ЭлементОрганизация + ЭлементВид + ЭлементНомер + ЭлементДата + ЭлементКонтрагент + ЭлементСумма;
	
	Наименование = СтрЗаменить(Наименование, ":", "");
	Наименование = СтрЗаменить(Наименование, "|", ""); 
	Наименование = СтрЗаменить(Наименование, "/", ""); 
	Наименование = СтрЗаменить(Наименование, "\", ""); 
	Наименование = СтрЗаменить(Наименование, "?", ""); 
	Наименование = СтрЗаменить(Наименование, "<", ""); 
	Наименование = СтрЗаменить(Наименование, ">", ""); 
	Наименование = СтрЗаменить(Наименование, "*", ""); 
	Наименование = СтрЗаменить(Наименование, """", ""); 

	Возврат Наименование;
	
КонецФункции	
