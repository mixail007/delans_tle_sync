
///////////////////////////////////////////////////////
// Работа со стартовыми настройками

# Область СтартовыеНастройки

Функция ПолучитьВсеСтартовыеНастройки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""Организация"" КАК ВидСтартовойНастройки,
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""ОсновнойГород"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.ОсновнойГород)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""УслугаДоставки"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.УслугаДоставки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""Характеристика"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Характеристика)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""УслугаСтраховки"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.УслугаСтраховки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""УслугаСамовывоза"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.УслугаСамовывоза)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""УслугаРКО"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.УслугаРКО)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""РозничныйПокупатель"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.РозничныйПокупатель)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""Плательщик"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Плательщик)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""ВидОплаты"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.ВидОплаты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""ДеньДоставки"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.ДеньДоставки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""КассаНаложенныхПлатежей"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.КассаНаложенныхПлатежей)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""ДопКассаНП"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.ДопКассаНП)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""ВидЗабора"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.ВидЗабора)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""СмсСервисЛогин"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.СмсСервисЛогин)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""СмсСервисПароль"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.СмсСервисПароль)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""СмсСервисСервер"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.СмсСервисСервер)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""Метка1ВремяС"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Метка1ВремяС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""Метка1ВремяПо"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Метка1ВремяПо)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""Метка1Цвет"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Метка1Цвет)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""Метка2ВремяС"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Метка2ВремяС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""Метка2ВремяПо"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Метка2ВремяПо)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""Метка2Цвет"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Метка2Цвет)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""Метка3ВремяС"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Метка3ВремяС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""Метка3ВремяПо"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Метка3ВремяПо)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""Метка3Цвет"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Метка3Цвет)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""ОтражатьВремяНаКарте"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.ОтражатьВремяНаКарте)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""СистемаОпределенияКоординат"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.СистемаОпределенияКоординат)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""ПроцентСтраховки"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.ПроцентСтраховки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""АвтоПринятКурьером"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.АвтоПринятКурьером)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""ПоискЗаказовПоВхНакладной"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.ПоискЗаказовПоВхНакладной)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""АвтоПриемЗаборов"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.АвтоПриемЗаборов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""Склад"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Склад)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""ОсновнаяЯчейка"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.ЯчейкаОсновная)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""ЯчейкаКВыдаче"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.ЯчейкаКВыдаче)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""ЯчейкаПроблема"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.ЯчейкаПроблема)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""ГруппаДляГрузов"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.ГруппаДляГрузов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""Метка1Код"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Метка1Код)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""Метка2Код"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Метка2Код)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""Метка3Код"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Метка3Код)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""КодСкладДвери"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.КодСкладДвери)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""КодДвериДвери"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.КодДвериДвери)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""КодДвериДвериУпрощенный"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.КодДвериДвериУпрощенный)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""КодСамовывоз"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.КодСамовывоз)
	//EFSOL_Шаповал Олег Анатольевич 26 сентября 2017 г. 15:18:27 +
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""КодТерминалТерминал"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.КодТерминалТерминал)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""КодТерминалПВЗ"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.КодТерминалПВЗ)
	//EFSOL Шаповал О.А. -
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""Коэффициент"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.Коэффициент)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""ИспользоватьНоменклатуруДляЧеков"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.ИспользоватьНоменклатуруДляЧеков)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""ВидДоставки"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.ВидДоставки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""ОтражатьДДуНаКарте"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.ОтражатьДДуНаКарте)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""НоменклатураДляЧека"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.НоменклатураДляЧека)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""УслугаСбора"",
	|	ES_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
	|ГДЕ
	|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхНастроек.УслугаСбора)
	//Efsol Рыбалка Н.А. 24.12.2018 +
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""ТокенБотаДляТелеграм"",
	|	Es_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.Es_СтартовыеНастройки КАК Es_СтартовыеНастройки
	|ГДЕ
	|	Es_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И Es_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.Es_ВидыСтартовыхНастроек.ТокенБотаДляТелеграм)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""ШаблонСообщенияДляЗаказа"",
	|	Es_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.Es_СтартовыеНастройки КАК Es_СтартовыеНастройки
	|ГДЕ
	|	Es_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И Es_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.Es_ВидыСтартовыхНастроек.ШаблонСообщенияДляЗаказа)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""ШаблонСообщенияДляСбора"",
	|	Es_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.Es_СтартовыеНастройки КАК Es_СтартовыеНастройки
	|ГДЕ
	|	Es_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И Es_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.Es_ВидыСтартовыхНастроек.ШаблонСообщенияДляСбора)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""ШаблонСообщенияДляВидаЗаказа"",
	|	Es_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.Es_СтартовыеНастройки КАК Es_СтартовыеНастройки
	|ГДЕ
	|	Es_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И Es_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.Es_ВидыСтартовыхНастроек.ШаблонСообщенияДляВидаЗаказа)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""ИДЧатаДляТелеграм"",
	|	Es_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.Es_СтартовыеНастройки КАК Es_СтартовыеНастройки
	|ГДЕ
	|	Es_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И Es_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.Es_ВидыСтартовыхНастроек.ИдЧатаДляТелеграм)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""ЛогинПользователяИБ"",
	|	Es_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.Es_СтартовыеНастройки КАК Es_СтартовыеНастройки
	|ГДЕ
	|	Es_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И Es_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.Es_ВидыСтартовыхНастроек.ЛогинПользователяИБ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""ПарольПользователяИБ"",
	|	Es_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.Es_СтартовыеНастройки КАК Es_СтартовыеНастройки
	|ГДЕ
	|	Es_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И Es_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.Es_ВидыСтартовыхНастроек.ПарольПользователяИБ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""АдресСклада"",
	|	Es_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.Es_СтартовыеНастройки КАК Es_СтартовыеНастройки
	|ГДЕ
	|	Es_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И Es_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.Es_ВидыСтартовыхНастроек.АдресСклада)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""АдресСкладаДолгота"",
	|	Es_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.Es_СтартовыеНастройки КАК Es_СтартовыеНастройки
	|ГДЕ
	|	Es_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И Es_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.Es_ВидыСтартовыхНастроек.АдресСкладаДолгота)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	""АдресСкладаШирота"",
	|	Es_СтартовыеНастройки.Значение
	|ИЗ
	|	РегистрСведений.Es_СтартовыеНастройки КАК Es_СтартовыеНастройки
	|ГДЕ
	|	Es_СтартовыеНастройки.Пользователь В(&Пользователь)
	|	И Es_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.Es_ВидыСтартовыхНастроек.АдресСкладаШирота)";
	//Efsol Рыбалка Н.А. -
	
	ЗначенияПользователя = Новый Массив;
	ЗначенияПользователя.Добавить(Справочники.Пользователи.ПустаяСсылка());
	ЗначенияПользователя.Добавить(Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("Пользователь", ЗначенияПользователя);
	
	ВозвращаемаяСтруктура = Новый Структура();
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВозвращаемаяСтруктура.Вставить(ВыборкаДетальныеЗаписи.ВидСтартовойНастройки, ВыборкаДетальныеЗаписи.Значение);
	КонецЦикла;
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

// Параметры:
//   * ВидСтартовойНастройки - Перечисления.ES_ВидыСтартовыхНастроек
Функция ПолучитьСтартовуюНастройку(ВидСтартовойНастройки) Экспорт
	
	ЗначениеНастройки = Неопределено;
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	ES_СтартовыеНастройки.Значение
		|ИЗ
		|	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
		|ГДЕ
		|	ES_СтартовыеНастройки.Пользователь В(&Пользователь)
		|	И ES_СтартовыеНастройки.ВидСтартовойНастройки = &ВидСтартовойНастройки";
		
		ЗначенияПользователя = Новый Массив;
		ЗначенияПользователя.Добавить(Справочники.Пользователи.ПустаяСсылка());
		ЗначенияПользователя.Добавить(Пользователи.ТекущийПользователь());
		Запрос.УстановитьПараметр("Пользователь", ЗначенияПользователя);
		Запрос.УстановитьПараметр("ВидСтартовойНастройки", ВидСтартовойНастройки);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ЗначениеНастройки = ВыборкаДетальныеЗаписи.Значение;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат ЗначениеНастройки;
	
КонецФункции

#КонецОбласти


///////////////////////////////////////////////////////
// Получение данных

// Параметры:
//  * Контрагент - ссылка на контрагента
//  * ТипКонтЛица - принимает значения "Ссылка" или "Представление", тип Строка. влияет на тип возвращаемого значения
Функция ПолучитьКонтактноеЛицоКонтрагента(Контрагент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.КонтактноеЛицо
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Контрагент);
	
	КонтЛицоКонтрагента = Справочники.КонтактныеЛица.ПустаяСсылка();
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			КонтЛицоКонтрагента = Выборка.КонтактноеЛицо;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат КонтЛицоКонтрагента;
	
КонецФункции


///////////////////////////////////////////////////////
// Заполнение документов доставки

// Параметры:
//  * ТипДокумента - по параметру определяется список реквизитов, которые нужно заполнять
//  * ДокОбъект - 
Процедура ПолучитьДанныеПоЗаказамДляЗаполненияПланаДоставки(ТипДокумента, ДокОбъект, ДокументыДоставки, ИспользоватьТекущиеДанные = Ложь, ПоПути = Ложь) Экспорт
	
	ДанныеПоЗаказам = ПолучитьДанныеПоЗаказам(ДокументыДоставки, ИспользоватьТекущиеДанные);
	
	Если НЕ ДанныеПоЗаказам.Пустой() Тогда
		
		ПерваяЗапись = Истина;
		
		ВыборкаСсылка = ДанныеПоЗаказам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Счетчик = 0;
		
		Пока ВыборкаСсылка.Следующий() Цикл
			//ЕФСОЛ Несторук 22.09.2016 +
			Счетчик = Счетчик+1;
			Если ПоПути Тогда
				Если Счетчик >1 Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
			//ЕФСОЛ Несторук 22.09.2016 -
			//ЕФСОЛ Несторук 10.10.2016 +
			СокращениеВидаДоставки = " (" + ВернутьСокращениеВидовДоставки(ВыборкаСсылка.ВидДоставки, ВыборкаСсылка.ВидЗабора, ВыборкаСсылка.Возврат)+ ")";
			//ЕФСОЛ Несторук 10.10.2016 -
			
			Если ИспользоватьТекущиеДанные Тогда
				// Если первая запись - изменяем текущую строку, иначе добавляем новую
				Если ПерваяЗапись Тогда
					ЗаказДляОтбора = ?(ТипЗнч(ДокументыДоставки) = Тип("Массив"), ДокументыДоставки[0], ДокументыДоставки);
					ПараметрыОтбораЗаказа = Новый Структура("ДокументДоставки", ЗаказДляОтбора);
					НоваяСтрока = ДокОбъект.Заказы.НайтиСтроки(ПараметрыОтбораЗаказа)[0];
					//ЕФСОЛ Несторук 
					НоваяСтрока.НомерНакладной = ВыборкаСсылка.НомерНакладной;
					НоваяСтрока.НомерНакладнойПредставление =ВыборкаСсылка.НомерНакладной + СокращениеВидаДоставки;
					//ЕФСОЛ Несторук 
					
					ИндексТекущейСтроки = НоваяСтрока.НомерСтроки - 1;
					
					ПерваяЗапись = Ложь;
				Иначе
					НоваяСтрока = ДокОбъект.Заказы.Вставить(ИндексТекущейСтроки);
					НоваяСтрока.ДокументДоставки = ВыборкаСсылка.ДокументДоставки;
					//ЕФСОЛ Несторук 
					НоваяСтрока.НомерНакладной = ВыборкаСсылка.НомерНакладной;
					НоваяСтрока.НомерНакладнойПредставление =ВыборкаСсылка.НомерНакладной + СокращениеВидаДоставки;
					//ЕФСОЛ Несторук 
					ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
				КонецЕсли;
				
			Иначе
				НоваяСтрока = ДокОбъект.Заказы.Добавить();
				НоваяСтрока.ДокументДоставки = ВыборкаСсылка.ДокументДоставки;
				//ЕФСОЛ Несторук 
				НоваяСтрока.НомерНакладной = ВыборкаСсылка.НомерНакладной;
				НоваяСтрока.НомерНакладнойПредставление = ВыборкаСсылка.НомерНакладной + СокращениеВидаДоставки;
				//ЕФСОЛ Несторук
				
			КонецЕсли; 
			
			// Заполенение реквизитов с учетом типа документа доставки
			ПеремСвязкаЗаказЗабор 	= Документы.ЗаказПокупателя.ПустаяСсылка();
			ПеремСтоимостьДоставки 	= ВыборкаСсылка.СтоимостьДоставки;
			ПеремНаложенныйПлатеж 	= ВыборкаСсылка.НППлан;
			ПеремСтатусДокумента 	= Неопределено;
			
			Если ТипЗнч(ВыборкаСсылка.ДокументДоставки) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				
				ПеремСвязкаЗаказЗабор 	= ВыборкаСсылка.ДокументДоставки;
				ПеремСтатусДокумента 	= ВыборкаСсылка.СтатусДокумента;
				
				// Наложенный платеж и Стоимость доставки
				//Если ВыборкаСсылка.ВидДоставки = Перечисления.ES_ВидыДоставки.СкладСклад Тогда
				//
				//	ПеремНаложенныйПлатеж 	= 0;
				//	ПеремСтоимостьДоставки 	= 0;
				//	
				//ИначеЕсли НЕ ВыборкаСсылка.Плательщик = Перечисления.ES_ТипыПлательщиков.Получатель Тогда	// Плательщик НЕ Получатель
				//
				//	ПеремСтоимостьДоставки 	= 0;
				//
				//КонецЕсли;
				//ЭР Несторук С.И. 02.05.2017 20:37:17 {
				//EFSOL_Сальник К.А. 2019-05-17 {+
				//Если НЕ ВыборкаСсылка.ЧекНаОбщуюСумму Тогда
				//	ПеремСтоимостьДоставки 	= 0;
				//КонецЕсли;
				//EFSOL_Сальник К.А.  -}
				//}ЭР Несторук С.И.
				
				
			ИначеЕсли ТипЗнч(ВыборкаСсылка.ДокументДоставки) = Тип("ДокументСсылка.ES_ЗаборГруза") Тогда 
				
				ПеремСвязкаЗаказЗабор 	= ВыборкаСсылка.СвязанныйДокумент;
				ПеремСтатусДокумента 	= ВыборкаСсылка.СтатусДокумента;
				
			КонецЕсли;
			//ЕФСОЛ Несторук 08-11-16 +
			НоваяСтрока.ВидОплаты 			= ВыборкаСсылка.ВидОплаты;
			НоваяСтрока.Склад				= ВыборкаСсылка.Склад;
			//ЕФСОЛ Несторук 08-11-16 -
			НоваяСтрока.НППлан 				= ПеремНаложенныйПлатеж;
			НоваяСтрока.СвязанныйДокумент 	= ВыборкаСсылка.СвязанныйДокумент;
			НоваяСтрока.Комментарий 		= ВыборкаСсылка.Комментарий + Символы.ПС + ВыборкаСсылка.КомментарийКурьера;
			// Заполнение реквизитов в зависимости от типа документа
			Если ТипДокумента = Тип("ДокументСсылка.ES_ПланДоставки") Тогда
				НоваяСтрока.СвязкаЗаказЗабор 	= ПеремСвязкаЗаказЗабор;
				НоваяСтрока.СтоимостьДоставки 	= ПеремСтоимостьДоставки;
				
				НоваяСтрока.ВидДоставки 		= ВыборкаСсылка.ВидДоставки;
				НоваяСтрока.ДатаЗаказа 			= ВыборкаСсылка.Дата;
				НоваяСтрока.КоличествоМест 		= ВыборкаСсылка.КоличествоМест;
				НоваяСтрока.ОбщийВес 			= ВыборкаСсылка.ОбщийВес;
				НоваяСтрока.ДатаВремяДобавленияЗаказа = ?(НоваяСтрока.ДатаВремяДобавленияЗаказа = Дата("00010101"),ТекущаяДатаСеанса(),НоваяСтрока.ДатаВремяДобавленияЗаказа);
				//ЕФСОЛ Несторук 10.10.2016 +
				НоваяСтрока.Заказчик = ВыборкаСсылка.Заказчик;
				НоваяСтрока.СтатусЗаказа = ВыборкаСсылка.СтатусДокумента;
				НоваяСтрока.Ячейка = ВыборкаСсылка.Ячейка;
				//ЕФСОЛ Несторук 10.10.2016 -
				
				Если ТипЗнч(ВыборкаСсылка.ДокументДоставки) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
					
					НоваяСтрока.ВидСвязанногоДокЗабора = ВыборкаСсылка.ВидЗабора;
					
					НоваяСтрока.Получатель 			= ВыборкаСсылка.Получатель;
					//ЕФСОЛ Несторук 09.08.2016 + Добавлен регон (метро)
					НоваяСтрока.ПолучательАдрес 	= "" + ВыборкаСсылка.ПолучательАдрес+ " "+ ВыборкаСсылка.Регион;
					//ЕФСОЛ Несторук 09.08.2016 -
					НоваяСтрока.ПолучательКонтЛицо 	= ВыборкаСсылка.ПолучательКонтактноеЛицо;
					НоваяСтрока.ПолучательТелефон 	= ВыборкаСсылка.ПолучательТелефон;
					
					// Время доставки
					НоваяСтрока.ВремяДоставкиС 		= ВыборкаСсылка.ВремяДоставкиС;
					НоваяСтрока.ВремяДоставкиПо 	= ВыборкаСсылка.ВремяДоставкиПо;
					Если ЗначениеЗаполнено(ВыборкаСсылка.ВремяДоставкиС)
						И ЗначениеЗаполнено(ВыборкаСсылка.ВремяДоставкиПо) Тогда
						НоваяСтрока.ВремяДоставки = "" + Формат(ВыборкаСсылка.ВремяДоставкиС, "ДФ=ЧЧ:мм") + " - " + Формат(ВыборкаСсылка.ВремяДоставкиПо,  "ДФ=ЧЧ:мм");
					Иначе
						НоваяСтрока.ВремяДоставки = "" + Формат(ВыборкаСсылка.ВремяДоставкиС, "ДФ=ЧЧ:мм") + Формат(ВыборкаСсылка.ВремяДоставкиПо,  "ДФ=ЧЧ:мм");
					КонецЕсли;
					
					НоваяСтрока.ВидЗабора = ВыборкаСсылка.ВидЗабора;
					
					//ЕФСОЛ Несторук 25.07.2016 + Упрощенный забор груза (Документ забор не создается, данные по отправителю пишутся в плане)
					
					Если ВыборкаСсылка.ВидДоставки = Перечисления.ES_ВидыДоставки.ДвериДвери И ВыборкаСсылка.ВидЗабора = Перечисления.ES_ВидыЗабора.Упрощенный Тогда
						НоваяСтрока.ЗаборОтправитель = ВыборкаСсылка.ЗаборОтправитель;
						НоваяСтрока.ЗаборКонтактноеЛицо = ВыборкаСсылка.ЗаборКонтактноеЛицо;
						НоваяСтрока.ЗаборАдрес = "" + ВыборкаСсылка.ЗаборАдрес+ " " +  ВыборкаСсылка.ЗаборРегион;
						НоваяСтрока.ЗаборТелефон = ВыборкаСсылка.ЗаборТелефон;
						НоваяСтрока.ЗаборВремяС = ВыборкаСсылка.ЗаборВремяС;
						НоваяСтрока.ЗаборВремяПо = ВыборкаСсылка.ЗаборВремяПо;
						Если ЗначениеЗаполнено(ВыборкаСсылка.ЗаборВремяС)
							И ЗначениеЗаполнено(ВыборкаСсылка.ЗаборВремяПо) Тогда
							НоваяСтрока.ЗаборВремя = "" + Формат(ВыборкаСсылка.ЗаборВремяС, "ДФ=ЧЧ:мм") + " - " + Формат(ВыборкаСсылка.ЗаборВремяПо,  "ДФ=ЧЧ:мм");
						Иначе
							НоваяСтрока.ЗаборВремя = "" + Формат(ВыборкаСсылка.ЗаборВремяС, "ДФ=ЧЧ:мм") + Формат(ВыборкаСсылка.ЗаборВремяПо,  "ДФ=ЧЧ:мм");
						КонецЕсли;
						Если ЗначениеЗаполнено(ВыборкаСсылка.ПримечаниеКЗаборуИзЗаказа) Тогда
							НоваяСтрока.Комментарий 		= ВыборкаСсылка.Комментарий + " / "+  ВыборкаСсылка.ПримечаниеКЗаборуИзЗаказа;
						КонецЕсли;
						
					КонецЕсли;
					//ЕФСОЛ Несторук 25.07.2016 -					
					
				КонецЕсли; 
				
				Если ТипЗнч(ВыборкаСсылка.ДокументДоставки) = Тип("ДокументСсылка.ES_ЗаборГруза") Тогда
					
					//ЕФСОЛ Несторук 18.08.2016 +
					НоваяСтрока.ЗаборОтправитель 			= ВыборкаСсылка.ЗаборОтправитель;
					НоваяСтрока.ЗаборКонтактноеЛицо 	= ВыборкаСсылка.ЗаборКонтактноеЛицо;
					НоваяСтрока.ЗаборТелефон 	= ВыборкаСсылка.ЗаборТелефон;
					НоваяСтрока.ЗаборАдрес 	= "" + ВыборкаСсылка.ЗаборАдрес+ " " + ВыборкаСсылка.Регион;
					
					// Время доставки
					НоваяСтрока.ЗаборВремяС 		= ВыборкаСсылка.ЗаборВремяС;
					НоваяСтрока.ЗаборВремяПо 	= ВыборкаСсылка.ЗаборВремяПо;
					Если ЗначениеЗаполнено(ВыборкаСсылка.ЗаборВремяС)
						И ЗначениеЗаполнено(ВыборкаСсылка.ЗаборВремяПо)
						Тогда
						НоваяСтрока.ЗаборВремя = "" + Формат(ВыборкаСсылка.ЗаборВремяС, "ДФ=ЧЧ:мм") + " - " + Формат(ВыборкаСсылка.ЗаборВремяПо, "ДФ=ЧЧ:мм");
					Иначе
						НоваяСтрока.ЗаборВремя = "" + Формат(ВыборкаСсылка.ЗаборВремяС, "ДФ=ЧЧ:мм") + Формат(ВыборкаСсылка.ЗаборВремяПо, "ДФ=ЧЧ:мм");
					КонецЕсли
					//ЕФСОЛ Несторук 18.08.2016 -
					
					//НоваяСтрока.Получатель 			= ВыборкаСсылка.ЗаборОтправитель;
					//НоваяСтрока.ПолучательКонтЛицо 	= ВыборкаСсылка.ЗаборКонтактноеЛицо;
					//НоваяСтрока.ПолучательТелефон 	= ВыборкаСсылка.ЗаборТелефон;
					//НоваяСтрока.ПолучательАдрес 	= "" + ВыборкаСсылка.ЗаборАдрес+ ", " + ВыборкаСсылка.Регион;
					//
					//// Время доставки
					//НоваяСтрока.ВремяДоставкиС 		= ВыборкаСсылка.ЗаборВремяС;
					//НоваяСтрока.ВремяДоставкиПо 	= ВыборкаСсылка.ЗаборВремяПо;
					//Если ЗначениеЗаполнено(ВыборкаСсылка.ЗаборВремяС)
					//   И ЗначениеЗаполнено(ВыборкаСсылка.ЗаборВремяПо)
					//Тогда
					//	НоваяСтрока.ВремяДоставки = "" + Формат(ВыборкаСсылка.ЗаборВремяС, "ДФ=ЧЧ:мм") + " - " + Формат(ВыборкаСсылка.ЗаборВремяПо, "ДФ=ЧЧ:мм");
					//Иначе
					//	НоваяСтрока.ВремяДоставки = "" + Формат(ВыборкаСсылка.ЗаборВремяС, "ДФ=ЧЧ:мм") + Формат(ВыборкаСсылка.ЗаборВремяПо, "ДФ=ЧЧ:мм");
					//КонецЕсли; 
				КонецЕсли; 
				
			КонецЕсли; 
			
			
			
			Выборка = ВыборкаСсылка.Выбрать();
			
			Если ВыборкаСсылка.ПредставлениеГрузов = Перечисления.ES_ПредставлениеГрузов.Места Тогда
				
				// Заполнение ТЧ СписокГрузов (Места)
				Пока Выборка.Следующий() Цикл
					
					Если НЕ ЗначениеЗаполнено(Выборка.МестоКлючСтроки) Тогда
						Продолжить;
					КонецЕсли; 
					
					НоваяСтрокаТЧ = ДокОбъект.СписокГрузов.Добавить();
					Если ТипДокумента = Тип("ДокументСсылка.ES_ПланДоставки") Тогда
						НоваяСтрокаТЧ.СвязкаЗаказЗабор = ПеремСвязкаЗаказЗабор;
					КонецЕсли;
					НоваяСтрокаТЧ.Заказ 				= ВыборкаСсылка.ДокументДоставки;
					НоваяСтрокаТЧ.НомерНакладной 		= Выборка.МестоНомерНакладной;
					НоваяСтрокаТЧ.КлючСтроки 			= Выборка.МестоКлючСтроки;
					НоваяСтрокаТЧ.НомерСтрокиВЗаказе 	= Выборка.МестоНомерСтроки;
					НоваяСтрокаТЧ.Вес 					= Выборка.МестоВес;
					НоваяСтрокаТЧ.Высота 				= Выборка.МестоВысота;
					НоваяСтрокаТЧ.Длина 				= Выборка.МестоДлина;
					НоваяСтрокаТЧ.Ширина 				= Выборка.МестоШирина;
					НоваяСтрокаТЧ.НППлан 				= Выборка.МестоНППлан;
					НоваяСтрокаТЧ.ОбъемныйВес 			= Выборка.МестоОбъемныйВес;
					НоваяСтрокаТЧ.ОписаниеГруза 		= Выборка.МестоОписаниеГруза;
					НоваяСтрокаТЧ.Страховка 			= Выборка.МестоСтраховка;
					НоваяСтрокаТЧ.ТипГруза 				= Выборка.МестоТипГруза;
				КонецЦикла; 
				
			ИначеЕсли ВыборкаСсылка.ПредставлениеГрузов = Перечисления.ES_ПредставлениеГрузов.Запасы Тогда
				// Заполнение ТЧ Грузы (Запасы)
				Пока Выборка.Следующий() Цикл
					
					Если НЕ ЗначениеЗаполнено(Выборка.ЗапасНоменклатура) Тогда
						Продолжить;
					КонецЕсли;
					
					////ЭР Несторук С.И. 09.02.2017 16:57:58 {
					//Если Выборка.ЗапасНоменклатура = Справочники.Номенклатура.Неизвестно Тогда
					//	Продолжить;
					//КонецЕсли;
					////ЭР Несторук С.И. 09.02.2017 16:57:58 }
					
					НоваяСтрокаТЧ = ДокОбъект.Грузы.Добавить();
					Если ТипДокумента = Тип("ДокументСсылка.ES_ПланДоставки") Тогда
						НоваяСтрокаТЧ.СвязкаЗаказЗабор = ПеремСвязкаЗаказЗабор;
					КонецЕсли;
					НоваяСтрокаТЧ.Заказ 				= ВыборкаСсылка.ДокументДоставки;
					НоваяСтрокаТЧ.НомерНакладной 		= Выборка.ЗапасНомерНакладной;
					НоваяСтрокаТЧ.НомерСтрокиВЗаказе 	= Выборка.ЗапасНомерСтроки;
					НоваяСтрокаТЧ.Номенклатура 			= Выборка.ЗапасНоменклатура;
					НоваяСтрокаТЧ.ТипНоменклатурыЗапас 	= Выборка.ЗапасТипНоменклатурыЗапас;
					НоваяСтрокаТЧ.Характеристика 		= Выборка.ЗапасХарактеристика;
					НоваяСтрокаТЧ.Партия 				= Выборка.ЗапасПартия;
					НоваяСтрокаТЧ.Количество 			= Выборка.ЗапасКоличество;
					НоваяСтрокаТЧ.ЕдиницаИзмерения 		= Выборка.ЗапасЕдиницаИзмерения;
					НоваяСтрокаТЧ.Цена 					= Выборка.ЗапасЦена;
					НоваяСтрокаТЧ.ПроцентСкидкиНаценки 	= Выборка.ЗапасПроцентСкидкиНаценки;
					НоваяСтрокаТЧ.НППлан 				= Выборка.ЗапасНППлан;
					НоваяСтрокаТЧ.Содержание 			= Выборка.ЗапасСодержание;
					//EFSOL Несторук 07-11-2016 +
					НоваяСтрокаТЧ.Вес		 			= Выборка.ЗапасВес;
					НоваяСтрокаТЧ.Объем		 			= Выборка.ЗапасОбъем;
					НоваяСтрокаТЧ.ОбъемныйВес 			= Выборка.ЗапасОбъемныйВес;
					НоваяСтрокаТЧ.ОбьявленнаяСтоимость 	= Выборка.ЗапасОбьявленнаяСтоимость;
					НоваяСтрокаТЧ.Опасность 			= Выборка.ЗапасОпасность;
					НоваяСтрокаТЧ.Артикул 				= Выборка.ЗапасАртикул;
					НоваяСтрокаТЧ.Штрихкод 				= Выборка.ЗапасШтрихкод;
					НоваяСтрокаТЧ.СтавкаНДС				= Выборка.ЗапасСтавкаНДС;
					НоваяСтрокаТЧ.СуммаНДС				= Выборка.ЗапасСуммаНДС;
					//EFSOL Несторук 07-11-2016 +
					
				КонецЦикла; 
			КонецЕсли; // Заполнение грузами
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьДанныеПоЗаказам(ДокументыДоставки, ИспользоватьТекущиеДанные = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_СведенияОЗаборахСрезПоследних.ОснованиеЗабора КАК ОснованиеЗабора,
	|	ES_СведенияОЗаборахСрезПоследних.Забор КАК СвязанныйДокумент
	|ПОМЕСТИТЬ ВТ_ЗаборЗаказа
	|ИЗ
	|	РегистрСведений.ES_СведенияОЗаборах.СрезПоследних(, ОснованиеЗабора В (&ДокументыДоставки)) КАК ES_СведенияОЗаборахСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_ДанныеПоЗаказамСрезПоследних.Заказ КАК ДокументДоставки,
	|	ЕСТЬNULL(ВТ_ЗаборЗаказа.СвязанныйДокумент, НЕОПРЕДЕЛЕНО) КАК СвязанныйДокумент,
	|	ES_ДанныеПоЗаказамСрезПоследних.ДатаДокумента КАК ДатаДокумента,
	|	ES_ДанныеПоЗаказамСрезПоследних.НомерДокумента КАК НомерДокумента,
	|	ES_ДанныеПоЗаказамСрезПоследних.ВидДоставки КАК ВидДоставки,
	|	ES_ДанныеПоЗаказамСрезПоследних.ВидЗабора КАК ВидЗабора,
	|	ES_ДанныеПоЗаказамСрезПоследних.ВидОплаты КАК ВидОплаты,
	|	ES_ДанныеПоЗаказамСрезПоследних.КоличествоМест КАК КоличествоМест,
	|	ES_ДанныеПоЗаказамСрезПоследних.НППлан КАК НППлан,
	|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийВес КАК ОбщийВес,
	|	ES_ДанныеПоЗаказамСрезПоследних.Плательщик КАК Плательщик,
	//EFSOL_Сальник К.А. 2019-05-17 {+															  
	//|	ВЫБОР
	//|		КОГДА ES_ДанныеПоЗаказамСрезПоследних.ЧекНаОбщуюСумму
	//|			ТОГДА ES_ДанныеПоЗаказамСрезПоследних.СтоимостьДоставки
	//|		ИНАЧЕ 0
	//|	КОНЕЦ КАК СтоимостьДоставки,
	|	ES_ДанныеПоЗаказамСрезПоследних.СтоимостьДоставки КАК СтоимостьДоставки,
	//EFSOL_Сальник К.А.  -}
	|	ES_ДанныеПоЗаказамСрезПоследних.Заказчик КАК Заказчик,
	|	ES_ДанныеПоЗаказамСрезПоследних.СправочноЗаказчик,
	//Шаповал + 25072018
	//|	ВЫБОР
	//|		КОГДА ES_ДанныеПоЗаказамСрезПоследних.Плательщик = ЗНАЧЕНИЕ(Перечисление.ES_ТипыПлательщиков.Получатель)
	//|			ТОГДА ES_ДанныеПоЗаказамСрезПоследних.СправочноЗаказчик.ДоговорПоУмолчанию
	//|		ИНАЧЕ ES_ДанныеПоЗаказамСрезПоследних.Договор
	//|	КОНЕЦ КАК Договор,
	|	ES_ДанныеПоЗаказамСрезПоследних.Договор КАК Договор,
	//-
	|	ES_ДанныеПоЗаказамСрезПоследних.Получатель КАК Получатель,
	|	ES_ДанныеПоЗаказамСрезПоследних.АдресДоставки КАК ПолучательАдрес,
	|	ES_ДанныеПоЗаказамСрезПоследних.ВремяДоставкиС КАК ВремяДоставкиС,
	|	ES_ДанныеПоЗаказамСрезПоследних.ВремяДоставкиПо КАК ВремяДоставкиПо,
	|	ES_ДанныеПоЗаказамСрезПоследних.ПолучательКонтактноеЛицо КАК ПолучательКонтактноеЛицо,
	|	ES_ДанныеПоЗаказамСрезПоследних.ПолучательТелефон КАК ПолучательТелефон,
	|	ES_ДанныеПоЗаказамСрезПоследних.ЗаборОтправитель КАК ЗаборОтправитель,
	|	ES_ДанныеПоЗаказамСрезПоследних.ЗаборАдрес КАК ЗаборАдрес,
	|	ES_ДанныеПоЗаказамСрезПоследних.ЗаборВремяС КАК ЗаборВремяС,
	|	ES_ДанныеПоЗаказамСрезПоследних.ЗаборВремяПо КАК ЗаборВремяПо,
	|	ES_ДанныеПоЗаказамСрезПоследних.ЗаборКонтактноеЛицо КАК ЗаборКонтактноеЛицо,
	|	ES_ДанныеПоЗаказамСрезПоследних.ЗаборТелефон КАК ЗаборТелефон,
	|	ES_ДанныеПоЗаказамСрезПоследних.ПредставлениеГрузов КАК ПредставлениеГрузов,
	|	ЕСТЬNULL(ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа, НЕОПРЕДЕЛЕНО) КАК СтатусЗаказа,
	|	ES_ДанныеПоЗаказамСрезПоследних.НомерНакладной,
	|	ES_ДанныеПоЗаказамСрезПоследних.ЗаборРегион,
	|	ES_ДанныеПоЗаказамСрезПоследних.ПолучательРегион,
	|	ЗаказПокупателя.ES_ЗаборКомментарий,
	|	ES_ДанныеПоЗаказамСрезПоследних.Возврат,
	|	ЗаказПокупателя.ES_КомментарийКурьера КАК КомментарийКурьера,
	|	ES_ДанныеПоЗаказамСрезПоследних.Комментарий КАК Комментарий,
	|	ЕСТЬNULL(ES_ЗаказыНаСкладеОстатки.Склад, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК Склад,
	|	ES_ДанныеПоЗаказамСрезПоследних.Предоплачен,
	|	ES_ДанныеПоЗаказамСрезПоследних.ЧекНаОбщуюСумму,
	|	ВЫБОР
	|		КОГДА ES_ЗаказыНаСкладеОстатки.Склад = NULL
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(ES_ИзменяемыеРеквизитыЗаказовСрезПоследнихЯчейка.Значение, ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка))
	|	КОНЕЦ КАК Ячейка,
	|	ЕСТЬNULL(ES_ДанныеПоЗаказамСрезПоследних.ДатаДоставки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДоставки,
	|	ЕСТЬNULL(ЗаказПокупателя.Длина, 0) КАК Длина,
	|	ЕСТЬNULL(ЗаказПокупателя.Высота, 0) КАК Высота,
	|	ЕСТЬNULL(ЗаказПокупателя.Ширина, 0) КАК Ширина,
	|	ES_ДанныеПоЗаказамСрезПоследних.ВхНакладная,
	|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийОбъем,
	|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийОбъемныйВес,
	|	ES_ДанныеПоЗаказамСрезПоследних.Проблема,
	|	ES_ДанныеПоЗаказамСрезПоследних.Манифест,
	|	ВЫРАЗИТЬ(ES_ИзменяемыеРеквизитыЗаказовКурьер.Регистратор КАК Документ.ES_ПланДоставки) КАК ПланДоставки,
	|	ВЫРАЗИТЬ(ES_ИзменяемыеРеквизитыЗаказовКурьер.Значение КАК Справочник.Сотрудники) КАК Курьер
	|ПОМЕСТИТЬ ВТ_ДокЗаказы
	|ИЗ
	|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(, Заказ В (&ДокументыДоставки)) КАК ES_ДанныеПоЗаказамСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаборЗаказа КАК ВТ_ЗаборЗаказа
	|		ПО ES_ДанныеПоЗаказамСрезПоследних.Заказ = ВТ_ЗаборЗаказа.ОснованиеЗабора
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(, Заказ В (&ДокументыДоставки)) КАК ES_СтатусыЗаказовСрезПоследних
	|		ПО ES_ДанныеПоЗаказамСрезПоследних.Заказ = ES_СтатусыЗаказовСрезПоследних.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
	|				,
	|				Заказ В (&ДокументыДоставки)
	|					И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Комментарий)) КАК ES_ИзменяемыеРеквизитыЗаказовСрезПоследних
	|		ПО ES_ДанныеПоЗаказамСрезПоследних.Заказ = ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		ПО ES_ДанныеПоЗаказамСрезПоследних.Заказ = ЗаказПокупателя.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ES_ЗаказыНаСкладе.Остатки(, Заказ В (&ДокументыДоставки)) КАК ES_ЗаказыНаСкладеОстатки
	|		ПО ES_ДанныеПоЗаказамСрезПоследних.Заказ = ES_ЗаказыНаСкладеОстатки.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
	|				,
	|				Заказ В (&ДокументыДоставки)
	|					И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Ячейка)) КАК ES_ИзменяемыеРеквизитыЗаказовСрезПоследнихЯчейка
	|		ПО ES_ДанныеПоЗаказамСрезПоследних.Заказ = ES_ИзменяемыеРеквизитыЗаказовСрезПоследнихЯчейка.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
	|				,
	|				Регистратор ССЫЛКА Документ.ES_ПланДоставки
	|					И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Курьер)
	|					И Заказ В (&ДокументыДоставки)) КАК ES_ИзменяемыеРеквизитыЗаказовКурьер
	|		ПО ES_ДанныеПоЗаказамСрезПоследних.Заказ = ES_ИзменяемыеРеквизитыЗаказовКурьер.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДокЗаказы.СвязанныйДокумент КАК СвязанныйДокумент
	|ПОМЕСТИТЬ ВТ_СписокЗаборов
	|ИЗ
	|	ВТ_ДокЗаказы КАК ВТ_ДокЗаказы
	|ГДЕ
	|	ВТ_ДокЗаказы.ВидЗабора = &ВидЗабораПоПути
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_ДанныеПоЗаборамСрезПоследних.Забор КАК ДокументДоставки,
	|	ES_ДанныеПоЗаборамСрезПоследних.ДокументОснование КАК СвязанныйДокумент,
	|	ES_ДанныеПоЗаборамСрезПоследних.ДатаДокумента КАК ДатаДокумента,
	|	ES_ДанныеПоЗаборамСрезПоследних.НомерДокумента КАК НомерДокумента,
	|	ES_ДанныеПоЗаборамСрезПоследних.ВидЗабора КАК ВидЗабора,
	|	ES_ДанныеПоЗаборамСрезПоследних.КоличествоМест КАК КоличествоМест,
	|	ES_ДанныеПоЗаборамСрезПоследних.ОбщийВес КАК ОбщийВес,
	|	ES_ДанныеПоЗаборамСрезПоследних.Заказчик КАК Заказчик,
	|	ES_ДанныеПоЗаборамСрезПоследних.Отправитель КАК Отправитель,
	|	ES_ДанныеПоЗаборамСрезПоследних.Адрес КАК Адрес,
	|	ES_ДанныеПоЗаборамСрезПоследних.ВремяЗабораС КАК ВремяЗабораС,
	|	ES_ДанныеПоЗаборамСрезПоследних.ВремяЗабораПо КАК ВремяЗабораПо,
	|	ES_ДанныеПоЗаборамСрезПоследних.КонтактноеЛицо КАК КонтактноеЛицо,
	|	ES_ДанныеПоЗаборамСрезПоследних.Телефон КАК Телефон,
	|	ES_ДанныеПоЗаборамСрезПоследних.ПредставлениеГрузов КАК ПредставлениеГрузов,
	|	ЕСТЬNULL(ES_СтатусыЗаборовСрезПоследних.СтатусЗабора, ЗНАЧЕНИЕ(Перечисление.ES_СтатусыЗаборов.ПустаяСсылка)) КАК СтатусЗабора,
	|	ЕСТЬNULL(ES_ИзменяемыеРеквизитыЗаборовСрезПоследних.Значение, """") КАК Комментарий,
	|	ES_ДанныеПоЗаборамСрезПоследних.НомерНакладной,
	|	ES_ДанныеПоЗаборамСрезПоследних.Регион,
	|	ES_ЗаборГруза.ES_КомментарийКурьера,
	|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка) КАК Склад
	|ПОМЕСТИТЬ ВТ_ДокЗаборы
	|ИЗ
	|	РегистрСведений.ES_ДанныеПоЗаборам.СрезПоследних(
	|			,
	|			Забор В (&ДокументыДоставки)
	|				ИЛИ Забор В
	|					(ВЫБРАТЬ
	|						ВТ_СписокЗаборов.СвязанныйДокумент
	|					ИЗ
	|						ВТ_СписокЗаборов КАК ВТ_СписокЗаборов)) КАК ES_ДанныеПоЗаборамСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаборов.СрезПоследних(, Забор В (&ДокументыДоставки)) КАК ES_СтатусыЗаборовСрезПоследних
	|		ПО ES_ДанныеПоЗаборамСрезПоследних.Забор = ES_СтатусыЗаборовСрезПоследних.Забор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаборов.СрезПоследних(
	|				,
	|				Забор В (&ДокументыДоставки)
	|					И РеквизитЗабора = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗабора.Комментарий)) КАК ES_ИзменяемыеРеквизитыЗаборовСрезПоследних
	|		ПО ES_ДанныеПоЗаборамСрезПоследних.Забор = ES_ИзменяемыеРеквизитыЗаборовСрезПоследних.Забор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ES_ЗаборГруза КАК ES_ЗаборГруза
	|		ПО ES_ДанныеПоЗаборамСрезПоследних.Забор = ES_ЗаборГруза.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК Порядок,
	|	ВТ_ДокЗаказы.ДокументДоставки КАК ДокументДоставки,
	|	ВТ_ДокЗаказы.СвязанныйДокумент,
	|	ВТ_ДокЗаказы.ДатаДокумента,
	|	ВТ_ДокЗаказы.НомерДокумента,
	|	ВТ_ДокЗаказы.ВидДоставки,
	|	ВТ_ДокЗаказы.ВидЗабора,
	|	ВТ_ДокЗаказы.ВидОплаты,
	|	ВТ_ДокЗаказы.КоличествоМест,
	|	ВТ_ДокЗаказы.Комментарий,
	|	ВТ_ДокЗаказы.НППлан,
	|	ВТ_ДокЗаказы.ОбщийВес,
	|	ВТ_ДокЗаказы.Плательщик,
	|	ВТ_ДокЗаказы.СтатусЗаказа,
	|	ВТ_ДокЗаказы.СтоимостьДоставки,
	|	ВТ_ДокЗаказы.Заказчик,
	|	ВТ_ДокЗаказы.СправочноЗаказчик,
	|	ВТ_ДокЗаказы.Договор,
	|	ВТ_ДокЗаказы.Получатель,
	|	ВТ_ДокЗаказы.ПолучательАдрес,
	|	ВТ_ДокЗаказы.ВремяДоставкиС,
	|	ВТ_ДокЗаказы.ВремяДоставкиПо,
	|	ВТ_ДокЗаказы.ПолучательКонтактноеЛицо,
	|	ВТ_ДокЗаказы.ПолучательТелефон,
	|	ВТ_ДокЗаказы.ЗаборОтправитель,
	|	ВТ_ДокЗаказы.ЗаборАдрес,
	|	ВТ_ДокЗаказы.ЗаборВремяС,
	|	ВТ_ДокЗаказы.ЗаборВремяПо,
	|	ВТ_ДокЗаказы.ЗаборКонтактноеЛицо,
	|	ВТ_ДокЗаказы.ЗаборТелефон,
	|	ВТ_ДокЗаказы.ПредставлениеГрузов,
	|	ВТ_ДокЗаказы.НомерНакладной,
	|	ВТ_ДокЗаказы.ПолучательРегион КАК Регион,
	|	ВТ_ДокЗаказы.ЗаборРегион,
	|	ВТ_ДокЗаказы.ES_ЗаборКомментарий,
	|	ВТ_ДокЗаказы.Возврат,
	|	ВТ_ДокЗаказы.КомментарийКурьера,
	|	ВТ_ДокЗаказы.Склад,
	|	ВТ_ДокЗаказы.Предоплачен,
	|	ВТ_ДокЗаказы.ЧекНаОбщуюСумму,
	|	ВТ_ДокЗаказы.Ячейка,
	|	ВТ_ДокЗаказы.ДатаДоставки,
	|	ВТ_ДокЗаказы.Длина,
	|	ВТ_ДокЗаказы.Высота,
	|	ВТ_ДокЗаказы.Ширина,
	|	ВТ_ДокЗаказы.ВхНакладная,
	|	ВТ_ДокЗаказы.ОбщийОбъем,
	|	ВТ_ДокЗаказы.ОбщийОбъемныйВес,
	|	ВТ_ДокЗаказы.Проблема,
	|	ВТ_ДокЗаказы.Манифест КАК Реестр,
	|	ВТ_ДокЗаказы.ПланДоставки,
	|	ВТ_ДокЗаказы.Курьер
	|ПОМЕСТИТЬ ВТ_ДокументыДоставки
	|ИЗ
	|	ВТ_ДокЗаказы КАК ВТ_ДокЗаказы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ВТ_ДокЗаборы.ДокументДоставки,
	|	ВТ_ДокЗаборы.СвязанныйДокумент,
	|	ВТ_ДокЗаборы.ДатаДокумента,
	|	ВТ_ДокЗаборы.НомерДокумента,
	|	ВТ_ДокЗаборы.ВидЗабора,
	|	ЗНАЧЕНИЕ(Перечисление.ES_ВидыЗабора.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.ПустаяСсылка),
	|	ВТ_ДокЗаборы.КоличествоМест,
	|	ВТ_ДокЗаборы.Комментарий,
	|	0,
	|	ВТ_ДокЗаборы.ОбщийВес,
	|	ЗНАЧЕНИЕ(Перечисление.ES_ТипыПлательщиков.ПустаяСсылка),
	|	ВТ_ДокЗаборы.СтатусЗабора,
	|	0,
	|	ВТ_ДокЗаборы.Заказчик,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка),
	|	"""",
	|	"""",
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	"""",
	|	"""",
	|	ВТ_ДокЗаборы.Отправитель,
	|	ВТ_ДокЗаборы.Адрес,
	|	ВТ_ДокЗаборы.ВремяЗабораС,
	|	ВТ_ДокЗаборы.ВремяЗабораПо,
	|	ВТ_ДокЗаборы.КонтактноеЛицо,
	|	ВТ_ДокЗаборы.Телефон,
	|	ВТ_ДокЗаборы.ПредставлениеГрузов,
	|	ВТ_ДокЗаборы.НомерНакладной,
	|	ВТ_ДокЗаборы.Регион,
	|	ЗНАЧЕНИЕ(Справочник.ES_Регионы.ПустаяСсылка),
	|	"""",
	|	ЛОЖЬ,
	|	ВТ_ДокЗаборы.ES_КомментарийКурьера,
	|	ВТ_ДокЗаборы.Склад,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка),
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	0,
	|	0,
	|	0,
	|	"""",
	|	0,
	|	0,
	|	ЛОЖЬ,
	|	ЗНАЧЕНИЕ(Справочник.ES_Реестры.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Документ.ES_ПланДоставки.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|ИЗ
	|	ВТ_ДокЗаборы КАК ВТ_ДокЗаборы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_ДанныеПоЗаказамСрезПоследних.Заказ КАК ЗаказДляГрузов
	|ПОМЕСТИТЬ ВТ_СписокЗказовДляГрузов
	|ИЗ
	|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(, Заказ В (&ДокументыДоставки)) КАК ES_ДанныеПоЗаказамСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ES_ДанныеПоЗаборамСрезПоследних.ДокументОснование = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ES_ДанныеПоЗаборамСрезПоследних.ДокументОснование
	|		ИНАЧЕ ES_ДанныеПоЗаборамСрезПоследних.Забор
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.ES_ДанныеПоЗаборам.СрезПоследних(, Забор В (&ДокументыДоставки)) КАК ES_ДанныеПоЗаборамСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_НоменклатураВЗаказахСрезПоследних.НомерСтроки,
	|	ES_НоменклатураВЗаказахСрезПоследних.ДокументДоставки КАК ДокументДоставки,
	|	ВЫБОР
	|		КОГДА ES_НоменклатураВЗаказахСрезПоследних.ДокументДоставки ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ES_НоменклатураВЗаказахСрезПоследних.ДокументДоставки.ES_НомерНакладной
	|		КОГДА ES_НоменклатураВЗаказахСрезПоследних.ДокументДоставки ССЫЛКА Документ.ES_ЗаборГруза
	|			ТОГДА ES_НоменклатураВЗаказахСрезПоследних.ДокументДоставки.НомерНакладной
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК НомерНакладной,
	|	ES_НоменклатураВЗаказахСрезПоследних.ТипНоменклатурыЗапас,
	|	ES_НоменклатураВЗаказахСрезПоследних.Характеристика,
	|	ES_НоменклатураВЗаказахСрезПоследних.Партия,
	|	ES_НоменклатураВЗаказахСрезПоследних.ЕдиницаИзмерения,
	|	ES_НоменклатураВЗаказахСрезПоследних.Количество,
	|	ES_НоменклатураВЗаказахСрезПоследних.НППлан,
	|	ES_НоменклатураВЗаказахСрезПоследних.Содержание,
	|	ES_НоменклатураВЗаказахСрезПоследних.Цена,
	|	ES_НоменклатураВЗаказахСрезПоследних.ПроцентСкидкиНаценки,
	|	ES_НоменклатураВЗаказахСрезПоследних.Вес,
	|	ES_НоменклатураВЗаказахСрезПоследних.Объем,
	|	ES_НоменклатураВЗаказахСрезПоследних.ОбьявленнаяСтоимость,
	|	ES_НоменклатураВЗаказахСрезПоследних.Опасность,
	|	ES_НоменклатураВЗаказахСрезПоследних.ОбъемныйВес,
	|	ES_НоменклатураВЗаказахСрезПоследних.Номенклатура,
	|	ES_НоменклатураВЗаказахСрезПоследних.Артикул,
	|	ES_НоменклатураВЗаказахСрезПоследних.Штрихкод,
	|	ES_НоменклатураВЗаказахСрезПоследних.СтавкаНДС,
	|	ES_НоменклатураВЗаказахСрезПоследних.СуммаНДС,
	|	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Количество, 0) - ЕСТЬNULL(ES_НоменклатураВыданнаяОбороты.КоличествоФактОборот, 0) КАК КоличествоОстаток,
	|	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.НППлан, 0) - ЕСТЬNULL(ES_НоменклатураВыданнаяОбороты.НПФактОборот, 0) КАК НПОстаток
	|ПОМЕСТИТЬ ВТ_ГрузыЗапасы
	|ИЗ
	|	РегистрСведений.ES_НоменклатураВЗаказах.СрезПоследних(
	|			,
	|			ДокументДоставки В
	|				(ВЫБРАТЬ
	|					ВТ_СписокЗказовДляГрузов.ЗаказДляГрузов
	|				ИЗ
	|					ВТ_СписокЗказовДляГрузов КАК ВТ_СписокЗказовДляГрузов)) КАК ES_НоменклатураВЗаказахСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ES_НоменклатураВыданная.Обороты(
	|				,
	|				,
	|				,
	|				Заказ В
	|					(ВЫБРАТЬ
	|						ВТ_СписокЗказовДляГрузов.ЗаказДляГрузов
	|					ИЗ
	|						ВТ_СписокЗказовДляГрузов КАК ВТ_СписокЗказовДляГрузов)) КАК ES_НоменклатураВыданнаяОбороты
	|		ПО ES_НоменклатураВЗаказахСрезПоследних.Номенклатура = ES_НоменклатураВыданнаяОбороты.Номенклатура
	|			И ES_НоменклатураВЗаказахСрезПоследних.Характеристика = ES_НоменклатураВыданнаяОбороты.Характеристика
	|			И ES_НоменклатураВЗаказахСрезПоследних.Содержание = ES_НоменклатураВыданнаяОбороты.Содержание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_ГрузыВЗаказахСрезПоследних.НомерСтроки,
	|	ES_ГрузыВЗаказахСрезПоследних.ДокументДоставки,
	|	ВЫБОР
	|		КОГДА ES_ГрузыВЗаказахСрезПоследних.ДокументДоставки ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ES_ГрузыВЗаказахСрезПоследних.ДокументДоставки.ES_НомерНакладной
	|		КОГДА ES_ГрузыВЗаказахСрезПоследних.ДокументДоставки ССЫЛКА Документ.ES_ЗаборГруза
	|			ТОГДА ES_ГрузыВЗаказахСрезПоследних.ДокументДоставки.НомерНакладной
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК НомерНакладной,
	|	ES_ГрузыВЗаказахСрезПоследних.КлючСтроки,
	|	ES_ГрузыВЗаказахСрезПоследних.ТипГруза,
	|	ES_ГрузыВЗаказахСрезПоследних.Вес,
	|	ES_ГрузыВЗаказахСрезПоследних.ОбъемныйВес,
	|	ES_ГрузыВЗаказахСрезПоследних.Высота,
	|	ES_ГрузыВЗаказахСрезПоследних.Длина,
	|	ES_ГрузыВЗаказахСрезПоследних.Ширина,
	|	ES_ГрузыВЗаказахСрезПоследних.НППлан,
	|	ES_ГрузыВЗаказахСрезПоследних.Страховка,
	|	ES_ГрузыВЗаказахСрезПоследних.ОписаниеГруза
	|ПОМЕСТИТЬ ВТ_ГрузыМеста
	|ИЗ
	|	РегистрСведений.ES_ГрузыВЗаказах.СрезПоследних(
	|			,
	|			ДокументДоставки В
	|				(ВЫБРАТЬ
	|					ВТ_СписокЗказовДляГрузов.ЗаказДляГрузов
	|				ИЗ
	|					ВТ_СписокЗказовДляГрузов КАК ВТ_СписокЗказовДляГрузов)) КАК ES_ГрузыВЗаказахСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДокументыДоставки.Порядок КАК Порядок,
	|	ВТ_ДокументыДоставки.ДокументДоставки КАК ДокументДоставки,
	|	ВТ_ДокументыДоставки.СвязанныйДокумент КАК СвязанныйДокумент,
	|	ВТ_ДокументыДоставки.ДатаДокумента КАК Дата,
	|	ВТ_ДокументыДоставки.НомерДокумента КАК Номер,
	|	ВТ_ДокументыДоставки.НомерНакладной КАК НомерНакладной,
	|	ВТ_ДокументыДоставки.ВидДоставки КАК ВидДоставки,
	|	ВТ_ДокументыДоставки.ВидЗабора КАК ВидЗабора,
	|	ВТ_ДокументыДоставки.ВидОплаты КАК ВидОплаты,
	|	ВТ_ДокументыДоставки.КоличествоМест КАК КоличествоМест,
	|	ВТ_ДокументыДоставки.Комментарий КАК Комментарий,
	|	ВТ_ДокументыДоставки.НППлан КАК НППлан,
	|	ВТ_ДокументыДоставки.ОбщийВес КАК ОбщийВес,
	|	ВТ_ДокументыДоставки.Плательщик КАК Плательщик,
	|	ВТ_ДокументыДоставки.СтатусЗаказа КАК СтатусДокумента,
	|	ВТ_ДокументыДоставки.СтоимостьДоставки КАК СтоимостьДоставки,
	|	ВТ_ДокументыДоставки.Заказчик КАК Заказчик,
	|	ВТ_ДокументыДоставки.СправочноЗаказчик КАК СправочноЗаказчик,
	|	ВТ_ДокументыДоставки.Договор КАК Договор,
	|	ВТ_ДокументыДоставки.Получатель КАК Получатель,
	|	ВТ_ДокументыДоставки.ПолучательАдрес КАК ПолучательАдрес,
	|	ВТ_ДокументыДоставки.ВремяДоставкиС КАК ВремяДоставкиС,
	|	ВТ_ДокументыДоставки.ВремяДоставкиПо КАК ВремяДоставкиПо,
	|	ВТ_ДокументыДоставки.ПолучательКонтактноеЛицо КАК ПолучательКонтактноеЛицо,
	|	ВТ_ДокументыДоставки.ПолучательТелефон КАК ПолучательТелефон,
	|	ВТ_ДокументыДоставки.ЗаборОтправитель КАК ЗаборОтправитель,
	|	ВТ_ДокументыДоставки.ЗаборАдрес КАК ЗаборАдрес,
	|	ВТ_ДокументыДоставки.ЗаборВремяС КАК ЗаборВремяС,
	|	ВТ_ДокументыДоставки.ЗаборВремяПо КАК ЗаборВремяПо,
	|	ВТ_ДокументыДоставки.ЗаборКонтактноеЛицо КАК ЗаборКонтактноеЛицо,
	|	ВТ_ДокументыДоставки.ЗаборТелефон КАК ЗаборТелефон,
	|	ВТ_ДокументыДоставки.ПредставлениеГрузов КАК ПредставлениеГрузов,
	|	ЕСТЬNULL(ВТ_ГрузыМеста.НомерСтроки, """") КАК МестоНомерСтроки,
	|	ЕСТЬNULL(ВТ_ГрузыМеста.НомерНакладной, """") КАК МестоНомерНакладной,
	|	ЕСТЬNULL(ВТ_ГрузыМеста.КлючСтроки, """") КАК МестоКлючСтроки,
	|	ЕСТЬNULL(ВТ_ГрузыМеста.ТипГруза, ЗНАЧЕНИЕ(Справочник.ES_ТипыГрузов.ПустаяСсылка)) КАК МестоТипГруза,
	|	ЕСТЬNULL(ВТ_ГрузыМеста.Вес, 0) КАК МестоВес,
	|	ЕСТЬNULL(ВТ_ГрузыМеста.ОбъемныйВес, 0) КАК МестоОбъемныйВес,
	|	ЕСТЬNULL(ВТ_ГрузыМеста.Высота, 0) КАК МестоВысота,
	|	ЕСТЬNULL(ВТ_ГрузыМеста.Длина, 0) КАК МестоДлина,
	|	ЕСТЬNULL(ВТ_ГрузыМеста.Ширина, 0) КАК МестоШирина,
	|	ЕСТЬNULL(ВТ_ГрузыМеста.НППлан, 0) КАК МестоНППлан,
	|	ЕСТЬNULL(ВТ_ГрузыМеста.Страховка, 0) КАК МестоСтраховка,
	|	ЕСТЬNULL(ВТ_ГрузыМеста.ОписаниеГруза, """") КАК МестоОписаниеГруза,
	|	ЕСТЬNULL(ВТ_ГрузыЗапасы.НомерСтроки, """") КАК ЗапасНомерСтроки,
	|	ЕСТЬNULL(ВТ_ГрузыЗапасы.НомерНакладной, """") КАК ЗапасНомерНакладной,
	|	ЕСТЬNULL(ВТ_ГрузыЗапасы.ТипНоменклатурыЗапас, ЛОЖЬ) КАК ЗапасТипНоменклатурыЗапас,
	|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ЗапасНоменклатура,
	|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЗапасХарактеристика,
	|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Партия, ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)) КАК ЗапасПартия,
	|	ЕСТЬNULL(ВТ_ГрузыЗапасы.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЗапасЕдиницаИзмерения,
	|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Количество, 0) КАК ЗапасКоличество,
	|	ВТ_ГрузыЗапасы.КоличествоОстаток КАК ЗапасКоличествоОстаток,
	|	ЕСТЬNULL(ВТ_ГрузыЗапасы.НППлан, 0) КАК ЗапасНППлан,
	|	ВТ_ГрузыЗапасы.НПОстаток КАК ЗапасНПОстаток,
	|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Содержание, """") КАК ЗапасСодержание,
	|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Цена, 0) КАК ЗапасЦена,
	|	ЕСТЬNULL(ВТ_ГрузыЗапасы.ПроцентСкидкиНаценки, 0) КАК ЗапасПроцентСкидкиНаценки,
	|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Вес, 0) КАК ЗапасВес,
	|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Объем, 0) КАК ЗапасОбъем,
	|	ЕСТЬNULL(ВТ_ГрузыЗапасы.ОбьявленнаяСтоимость, 0) КАК ЗапасОбьявленнаяСтоимость,
	|	ЕСТЬNULL(ВТ_ГрузыЗапасы.ОбъемныйВес, 0) КАК ЗапасОбъемныйВес,
	|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Опасность, ЛОЖЬ) КАК ЗапасОпасность,
	|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Артикул, """") КАК ЗапасАртикул,
	|	ЕСТЬNULL(ВТ_ГрузыЗапасы.Штрихкод, """") КАК ЗапасШтрихкод,
	|	ВТ_ГрузыЗапасы.СтавкаНДС КАК ЗапасСтавкаНДС,
	|	ВТ_ГрузыЗапасы.СуммаНДС КАК ЗапасСуммаНДС,
	|	ВТ_ДокументыДоставки.Регион КАК Регион,
	|	ВТ_ДокументыДоставки.ЗаборРегион КАК ЗаборРегион,
	|	ВТ_ДокументыДоставки.ES_ЗаборКомментарий КАК ПримечаниеКЗаборуИзЗаказа,
	|	ВТ_ДокументыДоставки.Возврат КАК Возврат,
	|	ВТ_ДокументыДоставки.КомментарийКурьера КАК КомментарийКурьера,
	|	ВТ_ДокументыДоставки.Склад КАК Склад,
	|	ВТ_ДокументыДоставки.Предоплачен КАК Предоплачен,
	|	ВТ_ДокументыДоставки.ЧекНаОбщуюСумму КАК ЧекНаОбщуюСумму,
	|	ВТ_ДокументыДоставки.Ячейка КАК Ячейка,
	|	ВТ_ДокументыДоставки.ДатаДоставки КАК ДатаДоставки,
	|	ВТ_ДокументыДоставки.Длина КАК Длина,
	|	ВТ_ДокументыДоставки.Ширина КАК Ширина,
	|	ВТ_ДокументыДоставки.ВхНакладная КАК ВхНакладная,
	|	ВТ_ДокументыДоставки.ОбщийОбъем КАК ОбщийОбъем,
	|	ВТ_ДокументыДоставки.ОбщийОбъемныйВес КАК ОбщийОбъемныйВес,
	|	ВТ_ДокументыДоставки.Высота КАК Высота,
	|	ЕСТЬNULL(ВТ_ДокументыДоставки.Проблема, ЛОЖЬ) КАК Проблема,
	|	ВТ_ДокументыДоставки.Реестр КАК Реестр,
	|	ВТ_ДокументыДоставки.ПланДоставки КАК ПланДоставки,
	|	ВТ_ДокументыДоставки.Курьер КАК Курьер
	|ИЗ
	|	ВТ_ДокументыДоставки КАК ВТ_ДокументыДоставки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГрузыМеста КАК ВТ_ГрузыМеста
	|		ПО (ВЫБОР
	|				КОГДА ВТ_ДокументыДоставки.ДокументДоставки ССЫЛКА Документ.ES_ЗаборГруза
	|						И НЕ ВТ_ДокументыДоставки.СвязанныйДокумент = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ТОГДА ВТ_ДокументыДоставки.СвязанныйДокумент = ВТ_ГрузыМеста.ДокументДоставки
	|				ИНАЧЕ ВТ_ДокументыДоставки.ДокументДоставки = ВТ_ГрузыМеста.ДокументДоставки
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГрузыЗапасы КАК ВТ_ГрузыЗапасы
	|		ПО (ВЫБОР
	|				КОГДА ВТ_ДокументыДоставки.ДокументДоставки ССЫЛКА Документ.ES_ЗаборГруза
	|						И НЕ ВТ_ДокументыДоставки.СвязанныйДокумент = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ТОГДА ВТ_ДокументыДоставки.СвязанныйДокумент = ВТ_ГрузыЗапасы.ДокументДоставки
	|				ИНАЧЕ ВТ_ДокументыДоставки.ДокументДоставки = ВТ_ГрузыЗапасы.ДокументДоставки
	|			КОНЕЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Дата,
	|	Номер,
	|	МестоНомерСтроки,
	|	ЗапасНомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(Порядок),
	|	МАКСИМУМ(СвязанныйДокумент),
	|	МАКСИМУМ(Дата),
	|	МАКСИМУМ(Номер),
	|	МАКСИМУМ(НомерНакладной),
	|	МАКСИМУМ(ВидДоставки),
	|	МАКСИМУМ(ВидЗабора),
	|	МАКСИМУМ(ВидОплаты),
	|	МАКСИМУМ(КоличествоМест),
	|	МАКСИМУМ(Комментарий),
	|	МАКСИМУМ(НППлан),
	|	МАКСИМУМ(ОбщийВес),
	|	МАКСИМУМ(Плательщик),
	|	МАКСИМУМ(СтатусДокумента),
	|	МАКСИМУМ(СтоимостьДоставки),
	|	МАКСИМУМ(Заказчик),
	|	МАКСИМУМ(СправочноЗаказчик),
	|	МАКСИМУМ(Договор),
	|	МАКСИМУМ(Получатель),
	|	МАКСИМУМ(ПолучательАдрес),
	|	МАКСИМУМ(ВремяДоставкиС),
	|	МАКСИМУМ(ВремяДоставкиПо),
	|	МАКСИМУМ(ПолучательКонтактноеЛицо),
	|	МАКСИМУМ(ПолучательТелефон),
	|	МАКСИМУМ(ЗаборОтправитель),
	|	МАКСИМУМ(ЗаборАдрес),
	|	МАКСИМУМ(ЗаборВремяС),
	|	МАКСИМУМ(ЗаборВремяПо),
	|	МАКСИМУМ(ЗаборКонтактноеЛицо),
	|	МАКСИМУМ(ЗаборТелефон),
	|	МАКСИМУМ(ПредставлениеГрузов),
	|	МАКСИМУМ(Регион),
	|	МАКСИМУМ(ЗаборРегион),
	|	МАКСИМУМ(ПримечаниеКЗаборуИзЗаказа),
	|	МАКСИМУМ(Возврат),
	|	МАКСИМУМ(КомментарийКурьера),
	|	МАКСИМУМ(Склад),
	|	МАКСИМУМ(Предоплачен),
	|	МАКСИМУМ(ЧекНаОбщуюСумму),
	|	МАКСИМУМ(Ячейка),
	|	МАКСИМУМ(ДатаДоставки),
	|	МАКСИМУМ(Длина),
	|	МАКСИМУМ(Ширина),
	|	МАКСИМУМ(ВхНакладная),
	|	МАКСИМУМ(ОбщийОбъем),
	|	МАКСИМУМ(ОбщийОбъемныйВес),
	|	МАКСИМУМ(Высота),
	|	МАКСИМУМ(Проблема),
	|	МАКСИМУМ(Реестр),
	|	МАКСИМУМ(ПланДоставки),
	|	МАКСИМУМ(Курьер)
	|ПО
	|	ДокументДоставки";
	
	Запрос.УстановитьПараметр("ДокументыДоставки", ДокументыДоставки);
	Запрос.УстановитьПараметр("ВидЗабораПоПути", Перечисления.ES_ВидыЗабора.ПоПути);
	
	Если НЕ ИспользоватьТекущиеДанные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"УПОРЯДОЧИТЬ ПО" + Символы.ПС + "	Порядок,",
		"УПОРЯДОЧИТЬ ПО" + Символы.ПС + "	Порядок Убыв,");
	КонецЕсли; 
	
	Возврат Запрос.Выполнить();
	
КонецФункции

///////////////////////////////////////////////////////
// Проверка данных перед групповым созданием документов

Функция ПолучитьПризнакУчета(Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_ПризнакиУчетаДСиЗапасовСрезПоследних.Документ,
	|	ES_ПризнакиУчетаДСиЗапасовСрезПоследних.УчтеноНП,
	|	ЛОЖЬ КАК УчтеноСтоимость,
	|	ЛОЖЬ КАК СписаныЗапасы,
	|	ЛОЖЬ КАК РасходДенег
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	РегистрСведений.ES_ПризнакиУчетаДСиЗапасов.СрезПоследних(
	|			,
	|			Документ = &Документ
	|				И УчтеноНП) КАК ES_ПризнакиУчетаДСиЗапасовСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ES_ПризнакиУчетаДСиЗапасовСрезПоследних.Документ,
	|	ЛОЖЬ,
	|	ES_ПризнакиУчетаДСиЗапасовСрезПоследних.УчтеноСтоимость,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрСведений.ES_ПризнакиУчетаДСиЗапасов.СрезПоследних(
	|			,
	|			Документ = &Документ
	|				И УчтеноСтоимость) КАК ES_ПризнакиУчетаДСиЗапасовСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	ES_ПризнакиУчетаДСиЗапасовСрезПоследних.Документ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ES_ПризнакиУчетаДСиЗапасовСрезПоследних.СписаныЗапасы,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрСведений.ES_ПризнакиУчетаДСиЗапасов.СрезПоследних(
	|			,
	|			Документ = &Документ
	|				И СписаныЗапасы) КАК ES_ПризнакиУчетаДСиЗапасовСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	ES_ПризнакиУчетаДСиЗапасовСрезПоследних.Документ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ES_ПризнакиУчетаДСиЗапасовСрезПоследних.РасходДенег
	|ИЗ
	|	РегистрСведений.ES_ПризнакиУчетаДСиЗапасов.СрезПоследних(
	|			,
	|			Документ = &Документ
	|				И РасходДенег) КАК ES_ПризнакиУчетаДСиЗапасовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ.Документ,
	|	МАКСИМУМ(ВТ.УчтеноНП) КАК УчтеноНП,
	|	МАКСИМУМ(ВТ.УчтеноСтоимость) КАК УчтеноСтоимость,
	|	МАКСИМУМ(ВТ.СписаныЗапасы) КАК СписаныЗапасы,
	|	МАКСИМУМ(ВТ.РасходДенег) КАК РасходДенег
	|ИЗ
	|	ВТ КАК ВТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.Документ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	СтруктураВозврата = Новый Структура("УчтеноНП, УчтеноСтоимость, СписаныЗапасы, РасходДенег", Ложь, Ложь, Ложь, Ложь);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураВозврата.УчтеноНП = Выборка.УчтеноНП;
			СтруктураВозврата.УчтеноСтоимость = Выборка.УчтеноСтоимость;
			СтруктураВозврата.СписаныЗапасы = Выборка.СписаныЗапасы;
			СтруктураВозврата.РасходДенег = Выборка.РасходДенег;
		КонецЦикла;
		
	КонецЕсли; 	
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Функция  ПроверитьНаДоступностьРоли() Экспорт 
	
	Если РольДоступна("ES_АРМ_Курьера") и не РольДоступна("ПолныеПрава") Тогда
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// НЕ ИСПОЛЬЗУЕТСЯ
Функция ПроверитьДанныеПередГрупповымСозданиемРасходныхНакладных(ДокСсылка) Экспорт
	
	//Если НЕ ПолучитьФункциональнуюОпцию("ПриемЗапасовНаОтветхранение") Тогда
	//	Сообщить(НСтр("ru = 'Не включена опция ""Прием запасов на ответхранение""!'"), СтатусСообщения.Важное);
	//	Возврат Истина;
	//КонецЕсли; 	
	//
	//// Контроль: не создавать такие же РасходныеНакладные
	//Запрос = Новый Запрос;	
	//Запрос.Текст = 
	//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//		|	РасходнаяНакладная.Ссылка КАК РасходнаяНакладная
	//		|ИЗ
	//		|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	//		|ГДЕ
	//		|	РасходнаяНакладная.ДокументОснование = &ДокументОснование
	//		|	И НЕ РасходнаяНакладная.ПометкаУдаления
	//		|	И РасходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветхранения)";	
	//
	//Запрос.УстановитьПараметр("ДокументОснование", ДокСсылка);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//Если НЕ РезультатЗапроса.Пустой() Тогда
	//	Сообщить("На основании документа уже созданы ""Расходные накладые"".");
	//	Возврат Истина;
	//КонецЕсли; 
	//
	//Возврат Ложь;
	
КонецФункции

// НЕ ИСПОЛЬЗУЕТСЯ
Функция ПроверитьДанныеПередГрупповымСозданиемПКО(ВидГрупповогоСоздания, ДокументСсылка, Модифицированность) Экспорт
	
	//Если НЕ ДокументСсылка.Проведен Тогда
	//	Сообщить("Документ должен быть проведенным!");
	//	Возврат Истина;
	//КонецЕсли;
	//
	//Если Модифицированность Тогда
	//	Сообщить("Документ был изменен. Его необходимо провести");
	//	Возврат Истина;
	//КонецЕсли; 
	//
	//// Контроль: не создавать такие же ПКО
	//Запрос = Новый Запрос;
	//
	//Если ВидГрупповогоСоздания = "НПФактНал" Тогда
	//	
	//	ТекстЗапроса = 
	//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//		|	ПоступлениеВКассу.Ссылка
	//		|ИЗ
	//		|	Документ.ПоступлениеВКассу КАК ПоступлениеВКассу
	//		|ГДЕ
	//		|	ПоступлениеВКассу.ДокументОснование = &ДокументОснование
	//		|	И НЕ ПоступлениеВКассу.ПометкаУдаления
	//		|	И ПоступлениеВКассу.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВКассу.ES_ПриемНаложенныхПлатежей)";
	//		//|	И НЕ ПоступлениеВКассу.ES_Эквайринг";
	//
	//// *НЕ ИСПОЛЬЗУЕТСЯ*
	////ИначеЕсли ВидГрупповогоСоздания = "НПФактЭквайринг" Тогда
	////	
	////	ТекстЗапроса = 
	////		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	////		|	ПоступлениеВКассу.Ссылка
	////		|ИЗ
	////		|	Документ.ПоступлениеВКассу КАК ПоступлениеВКассу
	////		|ГДЕ
	////		|	ПоступлениеВКассу.ДокументОснование = &ДокументОснование
	////		|	И НЕ ПоступлениеВКассу.ПометкаУдаления
	////		|	И ПоступлениеВКассу.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВКассу.ES_ПриемНаложенныхПлатежей)
	////		|	И ПоступлениеВКассу.ES_Эквайринг";
	//	
	//ИначеЕсли ВидГрупповогоСоздания = "СтоимостьНал" Тогда 		
	//	
	//	ТекстЗапроса = 
	//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//		|	ПоступлениеВКассу.Ссылка
	//		|ИЗ
	//		|	Документ.ПоступлениеВКассу КАК ПоступлениеВКассу
	//		|ГДЕ
	//		|	ПоступлениеВКассу.ДокументОснование = &ДокументОснование
	//		|	И НЕ ПоступлениеВКассу.ПометкаУдаления
	//		|	И ПоступлениеВКассу.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВКассу.ОтПокупателя)";
	//		//|	И НЕ ПоступлениеВКассу.ES_Эквайринг";
	//	
	//// *НЕ ИСПОЛЬЗУЕТСЯ*
	////ИначеЕсли ВидГрупповогоСоздания = "СтоимостьЭквайринг" Тогда 		
	////	
	////	ТекстЗапроса = 
	////		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	////		|	ПоступлениеВКассу.Ссылка
	////		|ИЗ
	////		|	Документ.ПоступлениеВКассу КАК ПоступлениеВКассу
	////		|ГДЕ
	////		|	ПоступлениеВКассу.ДокументОснование = &ДокументОснование
	////		|	И НЕ ПоступлениеВКассу.ПометкаУдаления
	////		|	И ПоступлениеВКассу.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВКассу.ОтПокупателя)
	////		|	И ПоступлениеВКассу.ES_Эквайринг";
	//	
	//КонецЕсли; 
	
	//Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
	//	Запрос.Текст = ТекстЗапроса;
	//	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылка);
	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	Если НЕ РезультатЗапроса.Пустой() Тогда
	//		Сообщить("На основании данного документа уже созданы поступления");
	//		Возврат Истина;
	//	КонецЕсли; 
	//	
	//КонецЕсли; 
	
	//Возврат Ложь;
	
КонецФункции

Функция СоздатьКонтрагентаПоКоду(Код)  Экспорт
	
	Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
	Контрагент.Наименование = Код;
	Контрагент.Код = Код;
	Контрагент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
	Контрагент.СчетУчетаАвансовПокупателя = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
	Контрагент.СчетУчетаАвансовПоставщику = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
	Контрагент.СчетУчетаРасчетовСПокупателем = ПланыСчетов.Управленческий.РасчетыСПокупателями;
	Контрагент.СчетУчетаРасчетовСПоставщиком = ПланыСчетов.Управленческий.РасчетыСПоставщиками;
	Контрагент.Покупатель = Истина;
	Контрагент.Записать();
	
	Возврат Контрагент.Ссылка;
	
КонецФункции	

Функция ВернутьСокращениеВидовДоставки (ВидДоставки, ВидЗабора, ПризнакВозврата)  Экспорт
	
	Сокращение = Неопределено;
	
	Если ВидДоставки = Перечисления.ES_ВидыДоставки.СкладДвери Тогда 
		Сокращение = "ТД"
	КонецЕсли;
	Если ВидДоставки = Перечисления.ES_ВидыЗабора.Выезд Тогда
		Сокращение = "П";
	КонецЕсли;
	Если ВидДоставки = Перечисления.ES_ВидыЗабора.ПодЗаказ Тогда
		Сокращение = "ДД";
	КонецЕсли;
	Если ВидДоставки = Перечисления.ES_ВидыЗабора.ПоПути Тогда
		Сокращение = "П";
	КонецЕсли;
	Если ВидДоставки = Перечисления.ES_ВидыЗабора.НаСклад Тогда
		Сокращение = "С";
	КонецЕсли;
	
	Если ВидДоставки = Перечисления.ES_ВидыДоставки.Самовывоз Тогда
		Сокращение = "ТПВЗ";
	КонецЕсли;
	
	Если ВидДоставки = Перечисления.ES_ВидыДоставки.СкладСклад Тогда
		Сокращение = "ТТ";
	КонецЕсли;

	
	Если ВидДоставки = Перечисления.ES_ВидыДоставки.ДвериДвери Тогда
		Сокращение = "ДД";
		Если ЗначениеЗаполнено(ВидЗабора) Тогда
			
			Если ВидЗабора = Перечисления.ES_ВидыЗабора.ПоПути Тогда
				Сокращение = "ДД-П";
			КонецЕсли;
			Если ВидЗабора = Перечисления.ES_ВидыЗабора.НаСклад Тогда
				Сокращение = "ДД-С";
			КонецЕсли;
			Если ВидЗабора = Перечисления.ES_ВидыЗабора.Упрощенный Тогда
				Если ПризнакВозврата Тогда
					Сокращение = "ДД (Ув)";
				Иначе
					Сокращение = "ДД (У)";
				КонецЕсли;
			КонецЕсли;
			Если ВидЗабора = Перечисления.ES_ВидыЗабора.ПодЗаказ Тогда
				//Сокращение = "ДД-З";
				Сокращение = "ДД";
			КонецЕсли;
			
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Сокращение;
	
КонецФункции

Функция ШтрихКодУдалитьЛишниеСимволы(ШтрихКод) Экспорт
	
	СтрокаСтравнения ="-1234567890ЙЦУКЕНГШЩЗХЪЭЖДЛОРПАВЫФЯЧСМИТЬБЮQWERTYUIOPASDFGHJKLZXCVBNM";
	Результат = "";
	
	Для й = 1 По СтрДлина(ШтрихКод) Цикл
		Если НЕ СтрНайти(СтрокаСтравнения,ВРег(Сред(ШтрихКод,й,1)))= 0 Тогда
			Результат = Результат+Сред(ШтрихКод,й,1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
	
КонецФункции

// Шаблон формирования списка заказов на карте
Функция Я_ПолучитьТекстФормированияТочекМестонахожденияКурьеров() Экспорт
	
	Текст = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",ТекущаяДата());
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_КоординатыКурьеровСрезПоследних.Курьер,
	|	ES_КоординатыКурьеровСрезПоследних.Долгота,
	|	ES_КоординатыКурьеровСрезПоследних.Широта
	|ИЗ
	|	РегистрСведений.ES_КоординатыКурьеров.СрезПоследних(&Период, НАЧАЛОПЕРИОДА(Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)) КАК ES_КоординатыКурьеровСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ES_КоординатыКурьеровСрезПоследних.Курьер,
	|	ES_КоординатыКурьеровСрезПоследних.Долгота,
	|	ES_КоординатыКурьеровСрезПоследних.Широта";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Текст = Текст + "
		|			order = {
		|				coordinates: [" + СокрЛП(Выборка.Долгота) + ", " + СокрЛП(Выборка.Широта) + "],
		|				address: '" + "" + "',
		|				balloonBody: '" + Выборка.Курьер + "',		
		|				hintContent: '" + Выборка.Курьер + "',
		|				iconContent: '" + Выборка.Курьер + "',		
		|				doc1cCode: '" + "" + "',
		|				doc1cFlag: false,
		|				pressHandle: false,
		|        		routeUse: false,
		|				orderInfo: '" + "" + "',
		|        		colorSet: true,
		|				colorLabel: 'twirl#truckIcon',
		|				linked: false	
		|			};
		|			provider.addOrder(order);";
		
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции

Функция ПолучитьДанныеПоМетро(СтруктураГеокодирования) Экспорт
	
	//ЕФСОЛ Несторук 05.08.2016 +
	Если ЗначениеЗаполнено(СтруктураГеокодирования.Долгота) И ЗначениеЗаполнено(СтруктураГеокодирования.Широта) Тогда
		PI = 3.1415926535897932; 
		СтруктураПоМетро = ES_YandexMaps.ГеокодированияПолучитьКоординатыМетро(СтруктураГеокодирования);
		
		Lt1 = СтруктураГеокодирования.Долгота;
		Lg1 = СтруктураГеокодирования.Широта;
		
		Lt2 = СтруктураПоМетро.Долгота;
		Lg2 = СтруктураПоМетро.Широта;
		Если ЗначениеЗаполнено(Lt1) И ЗначениеЗаполнено(Lg1) 
			И ЗначениеЗаполнено(Lt2) И ЗначениеЗаполнено(Lg2) И НЕ Lt1=Lt2 И НЕ Lg1 =Lg2 Тогда
			
			abs = (PI*Lg2/180- PI*Lg1/180);
			
			Если abs < 0 Тогда
				abs = abs* -1;
			КонецЕсли;
			Попытка
				dist = 6372797*acos(sin(PI*Lt1/180)*sin(PI*Lt2/180)+ cos(PI*Lt1/180)* cos(PI*Lt2/180)* cos(abs));							
				dist = ""+Окр((dist/1000),2)+" км";
				
				Возврат Новый Структура("Расстояние, Метро",dist,ДобавитьМетроНаСервере(СтруктураПоМетро.Имя,СтруктураПоМетро.ЛинияМетро));  
			Исключение
				Возврат Новый Структура("Расстояние, Метро",0,ПредопределенноеЗначение("Справочник.ES_Регионы.ПустаяСсылка"));
			КонецПопытки;
			
		Иначе
			Возврат Новый Структура("Расстояние, Метро",0,ПредопределенноеЗначение("Справочник.ES_Регионы.ПустаяСсылка"));
		КонецЕсли;
	Иначе Возврат Новый Структура("Расстояние, Метро",0,ПредопределенноеЗначение("Справочник.ES_Регионы.ПустаяСсылка"));
	КонецЕсли;
	//ЕФСОЛ Несторук 05.08.2016 -
	
	
КонецФункции

&НаСервере
Функция ДобавитьМетроНаСервере(Метро,ЛинияМетро=Неопределено)   Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_Регионы.Ссылка КАК Метро,
	|	ES_Регионы.ЛинияМетро,
	|	ES_Регионы.ЛинияМетро.Наименование  КАК НаименованиеМетро
	|ИЗ
	|	Справочник.ES_Регионы КАК ES_Регионы
	|ГДЕ
	|	ES_Регионы.Наименование = &Наименование
	|	И ES_Регионы.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Наименование", Метро);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(ЛинияМетро) И ЛинияМетро <> Выборка.НаименованиеМетро Тогда
			мМетро = Выборка.Метро.ПолучитьОбъект();
			мМетро.ЛинияМетро = ПолучитьЛиниюМетро(ЛинияМетро);
			мМетро.Записать();
		КонецЕсли;
		
		Возврат Выборка.Метро;
		
	Иначе
		Если Метро = "..." ИЛИ НЕ ЗначениеЗаполнено(Метро) Тогда
			Возврат Справочники.ES_Регионы.ПустаяСсылка();
		Иначе
			
			НовыйЭлемент = Справочники.ES_Регионы.СоздатьЭлемент();
			НовыйЭлемент.Наименование = Метро;
			Если ЛинияМетро <> Неопределено Тогда
				НовыйЭлемент.ЛинияМетро = ПолучитьЛиниюМетро(ЛинияМетро);
			КонецЕсли;
			НовыйЭлемент.Записать();
			
			Возврат НовыйЭлемент.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьЛиниюМетро(НаименованиеЛинии)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_ЛинииМетро.Ссылка
	|ИЗ
	|	Справочник.ES_ЛинииМетро КАК ES_ЛинииМетро
	|ГДЕ
	|	ES_ЛинииМетро.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", НаименованиеЛинии);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
		
	Иначе
		мЛинияМетро = Справочники.ES_ЛинииМетро.СоздатьЭлемент();
		мЛинияМетро.Наименование = НаименованиеЛинии;
		мЛинияМетро.Записать();
		
		Возврат мЛинияМетро.Ссылка;
		
	КонецЕсли;
	
	
КонецФункции // ПолучитьЛиниюМетро()

Функция ПолучитьПредставлениеЗаказа (Заказ, Накладная) Экспорт
	
	//ЭР Несторук С.И. 27.02.2017 12:27:15 {
	Возврат ""+ Заказ+ " / " + Накладная;
	//}ЭР Несторук С.И.              	
	
КонецФункции

Функция ПолучитьСписокТоваровВЗаказе(Заказ) Экспорт
	
	//ЭР Несторук С.И. 10.03.2017 12:53:05 {
	СписокТоваров = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаказПокупателяES_Грузы.Номенклатура,
	|	ЗаказПокупателяES_Грузы.Содержание
	|ИЗ
	|	Документ.ЗаказПокупателя.ES_Грузы КАК ЗаказПокупателяES_Грузы
	|ГДЕ
	|	ЗаказПокупателяES_Грузы.Ссылка = &Заказ
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяES_Грузы.Номенклатура,
	|	ЗаказПокупателяES_Грузы.Содержание";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокТоваров = СписокТоваров + ВыборкаДетальныеЗаписи.Содержание + " ";
	КонецЦикла;
	
	Возврат СписокТоваров;
	//}ЭР Несторук С.И.
КонецФункции

Функция ПолучитьСписокУслугВЗаказе(Заказ) Экспорт
	
	//ЭР Несторук С.И. 10.03.2017 12:52:42 {
	СписокУслуг = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаказПокупателяЗапасы.Номенклатура,
	|	ЗаказПокупателяЗапасы.Всего
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Заказ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокУслуг = СписокУслуг + ВыборкаДетальныеЗаписи.Номенклатура + " " +ВыборкаДетальныеЗаписи.Всего +" ";
		
	КонецЦикла;
	
	Возврат СписокУслуг; 
	//}ЭР Несторук С.И.
	
	
КонецФункции

Функция ПолучитьТекСтатусЗаказа (Заказ) Экспорт
	
	ТекСтатус = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа
	|ИЗ
	|	РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(, Заказ = &Заказ) КАК ES_СтатусыЗаказовСрезПоследних";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ТекСтатус = Выборка.СтатусЗаказа;	
	КонецЕсли;
	
	Возврат ТекСтатус;
	
КонецФункции

Функция ПолучитьНачислениеПоСотрудику(Документ, Сотрудник, СтоимостьДоставки) Экспорт
	
	Результат = 0;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда 
		Если СтоимостьДоставки = 0 Тогда
			Возврат Результат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СотрудникиES_Начисления.Порог, 0) КАК Порог,
		|	СотрудникиES_Начисления.Признак,
		|	ЕСТЬNULL(СотрудникиES_Начисления.Ставка, 0) КАК Ставка,
		|	СотрудникиES_Начисления.НомерСтроки
		|ИЗ
		|	Справочник.Сотрудники.ES_Начисления КАК СотрудникиES_Начисления
		|ГДЕ
		|	СотрудникиES_Начисления.Ссылка = &Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	СотрудникиES_Начисления.НомерСтроки";
		
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ТаблицаНачислений = РезультатЗапроса.Выгрузить();
			Для каждого Стр Из ТаблицаНачислений Цикл
				Если ТаблицаНачислений.Количество() = 1 И Стр.Порог = 0 Тогда
					Результат = ?(Стр.Признак = Перечисления.ES_ВидыСтавокНачисленийСотрудников.Коэффициент, СтоимостьДоставки*Стр.Ставка, Стр.Ставка); 
					Прервать;
				КонецЕсли;
				
				Если Стр.НомерСтроки = 1 Тогда
					Если СтоимостьДоставки <= Стр.Порог Тогда
						Результат = ?(Стр.Признак = Перечисления.ES_ВидыСтавокНачисленийСотрудников.Коэффициент, СтоимостьДоставки*Стр.Ставка, Стр.Ставка); 
						Прервать;
					КонецЕсли;
				Иначе
					ПредыдущаяСтрока = ТаблицаНачислений[Стр.НомерСтроки - 2];
					Если СтоимостьДоставки > ПредыдущаяСтрока.Порог И СтоимостьДоставки <= Стр.Порог Тогда
						Результат = ?(Стр.Признак = Перечисления.ES_ВидыСтавокНачисленийСотрудников.Коэффициент, СтоимостьДоставки*Стр.Ставка, Стр.Ставка); 
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ES_ЗаборГруза") Тогда
		Результат = Сотрудник.ES_НачислениеЗаборГруза;
	КонецЕсли;
	
	
	Возврат Результат;	
	
КонецФункции

Процедура СоздатьПеремещениеЗаказовНаСервере(ДанныеФормы, МассивЗаказов, Добавление = Ложь, ПеремещениеНаКурьера = Ложь, Склад = Неопределено) Экспорт
	
	Если Добавление = Ложь Тогда
		ДанныеФормы.Дата 			= ТекущаяДатаСеанса();
		ДанныеФормы.Ответственный 	= УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
		
	Иначе 
		ДанныеФормы.Подтвержден = Ложь;
		ДанныеФормы.ДанныеПодтверждения = "";
	КонецЕсли;
	
	//ЭР Несторук С.И. 14.09.2017 21:23:14 {
	Если НЕ ЗначениеЗаполнено(ДанныеФормы.ВидОперации) Тогда
		ДанныеФормы.ВидОперации		= Перечисления.ES_ВидыОперацийПеремещение.Заказы;
	КонецЕсли;
	//}ЭР Несторук С.И.
	
	Если ПеремещениеНаКурьера Тогда
		Начало = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ES_ЗаказыНаСкладеОстатки.Заказ КАК Заказ
		|ПОМЕСТИТЬ ВТ_ТекОстатки
		|ИЗ
		|	РегистрНакопления.ES_ЗаказыНаСкладе.Остатки(
		|			,
		|			Заказ В (&МассивЗаказов)
		|				И Склад = &Склад
		|				И ЕСТЬNULL(Курьер, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК ES_ЗаказыНаСкладеОстатки
		|ГДЕ
		|	ES_ЗаказыНаСкладеОстатки.КоличествоОстаток > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(ES_СведенияОЗаборахСрезПоследних.ОснованиеЗабора КАК Документ.ЗаказПокупателя) КАК Заказ,
		|	ES_СведенияОЗаборахСрезПоследних.Забор КАК Забор
		|ПОМЕСТИТЬ ВТ_СведенияОЗаборах
		|ИЗ
		|	РегистрСведений.ES_СведенияОЗаборах.СрезПоследних(, ОснованиеЗабора В (&МассивЗаказов)) КАК ES_СведенияОЗаборахСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказ КАК Заказ,
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказчик КАК Заказчик,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВхНакладная КАК ВхНакладная,
		|	ES_ДанныеПоЗаказамСрезПоследних.НомерНакладной КАК НомерНакладной,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВидДоставки КАК ВидДоставки,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВидЗабора КАК ВидЗабора,
		|	ES_ДанныеПоЗаказамСрезПоследних.Возврат КАК Возврат,
		|	ES_ДанныеПоЗаказамСрезПоследних.Комментарий КАК Комментарий,
		|	ES_ДанныеПоЗаказамСрезПоследних.АдресДоставки КАК АдресДоставки,
		|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийВес КАК ОбщийВес,
		|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийОбъем КАК ОбщийОбъем,
		|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийОбъемныйВес КАК ОбщийОбъемныйВес,
		|	ES_ДанныеПоЗаказамСрезПоследних.КоличествоМест КАК КоличествоМест,
		|	ES_ДанныеПоЗаказамСрезПоследних.ДатаДоставки КАК ДатаДоставки,
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказ.Вес КАК ЗаказВес,
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказ.Длина КАК ЗаказДлина,
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказ.Ширина КАК ЗаказШирина,
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказ.Высота КАК ЗаказВысота,
		|	ВТ_СведенияОЗаборах.Забор КАК СвязанныйДокумент
		|ПОМЕСТИТЬ ВТ_Заказы
		|ИЗ
		|	ВТ_ТекОстатки КАК ВТ_ТекОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(, Заказ В (&МассивЗаказов)) КАК ES_ДанныеПоЗаказамСрезПоследних
		|		ПО ВТ_ТекОстатки.Заказ = ES_ДанныеПоЗаказамСрезПоследних.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СведенияОЗаборах КАК ВТ_СведенияОЗаборах
		|		ПО ВТ_ТекОстатки.Заказ = ВТ_СведенияОЗаборах.Заказ
		|;
		|";
	Иначе 
		Начало = "ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ES_СведенияОЗаборахСрезПоследних.ОснованиеЗабора КАК Документ.ЗаказПокупателя) КАК Заказ,
		|	ES_СведенияОЗаборахСрезПоследних.Забор КАК Забор
		|ПОМЕСТИТЬ ВТ_СведенияОЗаборах
		|ИЗ
		|	РегистрСведений.ES_СведенияОЗаборах.СрезПоследних(, ОснованиеЗабора В (&МассивЗаказов)) КАК ES_СведенияОЗаборахСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказ КАК Заказ,
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказчик КАК Заказчик,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВхНакладная КАК ВхНакладная,
		|	ES_ДанныеПоЗаказамСрезПоследних.НомерНакладной КАК НомерНакладной,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВидДоставки КАК ВидДоставки,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВидЗабора КАК ВидЗабора,
		|	ES_ДанныеПоЗаказамСрезПоследних.Возврат КАК Возврат,
		|	ES_ДанныеПоЗаказамСрезПоследних.Комментарий КАК Комментарий,
		|	ES_ДанныеПоЗаказамСрезПоследних.АдресДоставки КАК АдресДоставки,
		|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийВес КАК ОбщийВес,
		|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийОбъем КАК ОбщийОбъем,
		|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийОбъемныйВес КАК ОбщийОбъемныйВес,
		|	ES_ДанныеПоЗаказамСрезПоследних.КоличествоМест КАК КоличествоМест,
		|	ES_ДанныеПоЗаказамСрезПоследних.ДатаДоставки КАК ДатаДоставки,
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказ.Вес КАК ЗаказВес,
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказ.Длина КАК ЗаказДлина,
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказ.Ширина КАК ЗаказШирина,
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказ.Высота КАК ЗаказВысота,
		|	ВТ_СведенияОЗаборах.Забор КАК СвязанныйДокумент
		|ПОМЕСТИТЬ ВТ_Заказы
		|ИЗ
		|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(, Заказ В (&МассивЗаказов)) КАК ES_ДанныеПоЗаказамСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СведенияОЗаборах КАК ВТ_СведенияОЗаборах
		|		ПО ES_ДанныеПоЗаказамСрезПоследних.Заказ = ВТ_СведенияОЗаборах.Заказ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ES_ДанныеПоЗаборамСрезПоследних.Забор,
		|	ES_ДанныеПоЗаборамСрезПоследних.Заказчик,
		|	"""",
		|	ES_ДанныеПоЗаборамСрезПоследних.НомерДокумента,
		|	ES_ДанныеПоЗаборамСрезПоследних.ВидЗабора,
		|	NULL,
		|	ЛОЖЬ,
		|	ES_ДанныеПоЗаборамСрезПоследних.Комментарий,
		|	ES_ДанныеПоЗаборамСрезПоследних.Адрес,
		|	ES_ДанныеПоЗаборамСрезПоследних.ОбщийВес,
		|	ES_ДанныеПоЗаборамСрезПоследних.ОбщийОбъем,
		|	ES_ДанныеПоЗаборамСрезПоследних.ОбщийОбъемныйВес,
		|	ES_ДанныеПоЗаборамСрезПоследних.КоличествоМест,
		|	ES_ДанныеПоЗаборамСрезПоследних.ДатаЗабора,
		|	0,
		|	0,
		|	0,
		|	0,
		|	ES_ДанныеПоЗаборамСрезПоследних.ДокументОснование
		|ИЗ
		|	РегистрСведений.ES_ДанныеПоЗаборам.СрезПоследних(, Забор В (&МассивЗаказов)) КАК ES_ДанныеПоЗаборамСрезПоследних
		|;
		|";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Продолжение = 
	"ВЫБРАТЬ
	|	ES_СтатусыЗаказовСрезПоследних.Заказ КАК Заказ,
	|	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа КАК СтатусЗаказа
	|ПОМЕСТИТЬ ВТ_Статусы
	|ИЗ
	|	РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(
	|			,
	|			Заказ В
	|				(ВЫБРАТЬ
	|					ВТ_Заказы.Заказ
	|				ИЗ
	|					ВТ_Заказы КАК ВТ_Заказы)) КАК ES_СтатусыЗаказовСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ES_СтатусыЗаборовСрезПоследних.Забор,
	|	ES_СтатусыЗаборовСрезПоследних.СтатусЗабора
	|ИЗ
	|	РегистрСведений.ES_СтатусыЗаборов.СрезПоследних(
	|			,
	|			Забор В
	|				(ВЫБРАТЬ
	|					ВТ_Заказы.Заказ КАК Заказ
	|				ИЗ
	|					ВТ_Заказы КАК ВТ_Заказы)) КАК ES_СтатусыЗаборовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Заказы.Заказ КАК Заказ,
	|	ВТ_Заказы.Заказчик КАК Заказчик,
	|	ВТ_Заказы.ВхНакладная КАК ВхНакладная,
	|	ВТ_Заказы.НомерНакладной КАК НомерНакладной,
	|	ES_НоменклатураВЗаказахСрезПоследних.Номенклатура КАК Номенклатура,
	|	ES_НоменклатураВЗаказахСрезПоследних.Характеристика КАК Характеристика,
	|	ES_НоменклатураВЗаказахСрезПоследних.Партия КАК Партия,
	|	ES_НоменклатураВЗаказахСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ES_НоменклатураВЗаказахСрезПоследних.ТипНоменклатурыЗапас КАК ТипНоменклатурыЗапас,
	|	ES_НоменклатураВЗаказахСрезПоследних.Количество КАК Количество,
	|	ES_НоменклатураВЗаказахСрезПоследних.НППлан КАК НППлан,
	|	ES_НоменклатураВЗаказахСрезПоследних.Содержание КАК Содержание,
	|	ES_НоменклатураВЗаказахСрезПоследних.Цена КАК Цена,
	|	ES_НоменклатураВЗаказахСрезПоследних.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ES_НоменклатураВЗаказахСрезПоследних.Вес КАК Вес,
	|	ES_НоменклатураВЗаказахСрезПоследних.Объем КАК Объем,
	|	ES_НоменклатураВЗаказахСрезПоследних.ОбъемныйВес КАК ОбъемныйВес,
	|	ES_НоменклатураВЗаказахСрезПоследних.ОбьявленнаяСтоимость КАК ОбьявленнаяСтоимость,
	|	ES_НоменклатураВЗаказахСрезПоследних.Опасность КАК Опасность,
	|	ВТ_Заказы.ВидДоставки КАК ВидДоставки,
	|	ВТ_Заказы.ВидЗабора КАК ВидЗабора,
	|	ВТ_Заказы.Возврат КАК Возврат,
	|	ВТ_Заказы.Комментарий КАК Комментарий,
	|	ВТ_Заказы.АдресДоставки КАК АдресДоставки,
	|	ВТ_Заказы.ОбщийВес КАК ОбщийВес,
	|	ВТ_Заказы.ОбщийОбъем КАК ОбщийОбъем,
	|	ВТ_Заказы.ОбщийОбъемныйВес КАК ОбщийОбъемныйВес,
	|	ВТ_Заказы.КоличествоМест КАК КоличествоМест,
	|	ВТ_Статусы.СтатусЗаказа КАК СтатусЗаказа,
	|	ВТ_Заказы.ЗаказВес КАК ЗаказВес,
	|	ВТ_Заказы.ЗаказДлина КАК ЗаказДлина,
	|	ВТ_Заказы.ЗаказШирина КАК ЗаказШирина,
	|	ВТ_Заказы.ЗаказВысота КАК ЗаказВысота,
	|	ВТ_Заказы.ДатаДоставки КАК ДатаДоставки,
	|	ВТ_Заказы.СвязанныйДокумент КАК СвязанныйДокумент,
	|	ES_НоменклатураВЗаказахСрезПоследних.Артикул КАК Артикул,
	|	ES_НоменклатураВЗаказахСрезПоследних.Штрихкод КАК Штрихкод
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_НоменклатураВЗаказах.СрезПоследних(
	|				,
	|				ДокументДоставки В
	|					(ВЫБРАТЬ
	|						ВТ_Заказы.Заказ
	|					ИЗ
	|						ВТ_Заказы КАК ВТ_Заказы)) КАК ES_НоменклатураВЗаказахСрезПоследних
	|		ПО ВТ_Заказы.Заказ = ES_НоменклатураВЗаказахСрезПоследних.ДокументДоставки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Статусы КАК ВТ_Статусы
	|		ПО ВТ_Заказы.Заказ = ВТ_Статусы.Заказ
	|ИТОГИ
	|	МАКСИМУМ(Заказчик),
	|	МАКСИМУМ(ВхНакладная),
	|	МАКСИМУМ(НомерНакладной),
	|	МАКСИМУМ(ВидДоставки),
	|	МАКСИМУМ(ВидЗабора),
	|	МАКСИМУМ(Возврат),
	|	МАКСИМУМ(Комментарий),
	|	МАКСИМУМ(АдресДоставки),
	|	МАКСИМУМ(ОбщийВес),
	|	МАКСИМУМ(ОбщийОбъем),
	|	МАКСИМУМ(ОбщийОбъемныйВес),
	|	МАКСИМУМ(КоличествоМест),
	|	МАКСИМУМ(СтатусЗаказа),
	|	МАКСИМУМ(ЗаказВес),
	|	МАКСИМУМ(ЗаказДлина),
	|	МАКСИМУМ(ЗаказШирина),
	|	МАКСИМУМ(ЗаказВысота),
	|	МАКСИМУМ(ДатаДоставки),
	|	МАКСИМУМ(СвязанныйДокумент)
	|ПО
	|	Заказ";
	
	Запрос.Текст = Начало+ Продолжение;
	
	Если ПеремещениеНаКурьера Тогда
		Запрос.УстановитьПараметр("Склад", Склад);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗаказ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗаказ.Следующий() Цикл
		
		Если Добавление Тогда
			НайденныеСтроки = ДанныеФормы.Заказы.НайтиСтроки(Новый Структура("Заказ",ВыборкаЗаказ.Заказ));
			Если НайденныеСтроки.Количество() > 0 Тогда
				Сообщить(Нстр("ru='"+ ВыборкаЗаказ.Заказ + " уже добавлен в документ "+ ДанныеФормы.Ссылка + "'"));
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрокаЗаказы = ДанныеФормы.Заказы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗаказы,ВыборкаЗаказ);
		НоваяСтрокаЗаказы.ДатаВремяДобавленияЗаказа 			= ТекущаяДатаСеанса();
		НоваяСтрокаЗаказы.Мест 									= ВыборкаЗаказ.КоличествоМест;
		НоваяСтрокаЗаказы.МестФакт 								= 0;
		НоваяСтрокаЗаказы.Длина									= ВыборкаЗаказ.ЗаказДлина;
		НоваяСтрокаЗаказы.Высота								= ВыборкаЗаказ.ЗаказВысота;
		НоваяСтрокаЗаказы.Ширина								= ВыборкаЗаказ.ЗаказШирина;
		НоваяСтрокаЗаказы.ДатаДоставки							= ВыборкаЗаказ.ДатаДоставки;
		НоваяСтрокаЗаказы.Аббревиатура 							= ES_ОбщегоНазначения.ВернутьСокращениеВидовДоставки(
		ВыборкаЗаказ.ВидДоставки, ВыборкаЗаказ.ВидЗабора, ВыборкаЗаказ.Возврат);
		НоваяСтрокаЗаказы.ДокументОснование 					= ДанныеФормы.ДокументОснование;
		Выборка = ВыборкаЗаказ.Выбрать();
		
		НомерСтроки = 1;
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
				НоваяСтрокаГрузы = ДанныеФормы.Грузы.Добавить();
				НоваяСтрокаГрузы.НомерСтрокиВЗаказе = НомерСтроки;
				ЗаполнитьЗначенияСвойств(НоваяСтрокаГрузы,Выборка);
				НомерСтроки = НомерСтроки +1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	
КонецПроцедуры

Функция ПолучитьСрочностьДоставки(Код) Экспорт
	
	//EFSOL_Шаповал Олег Анатольевич 18 августа 2017 г. 8:56:43 +
	Попытка
		Срочность = Перечисления.ES_СрочностьДоставки.Получить(Код);
	Исключение
		Срочность = Перечисления.ES_СрочностьДоставки.Стандартная;
	КонецПопытки;
	
	Возврат Срочность;
	//EFSOL Шаповал О.А. -
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруКодовВидовДоставки() Экспорт
	
	КодСкладДвери		= ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.КодСкладДвери);
	КодДвериДвериПодЗаказ		= ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.КодДвериДвери);
	КодДвериДвериУпрощенный		= ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.КодДвериДвериУпрощенный);
	КодТерминалПВЗ				= ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.КодТерминалПВЗ);
	КодСамовывоз		 = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.КодСамовывоз);
	КодДвериТерминал = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.КодДвериТерминал); 	
	КодТерминалТерминал = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.КодТерминалТерминал); 
	Структура = Новый Структура;
	
	Структура.Вставить("СкладДвери", 			КодСкладДвери);
	Структура.Вставить("ДвериДвериПодЗаказ",	КодДвериДвериПодЗаказ);
	Структура.Вставить("ДвериДвериУпрощенный", 	КодДвериДвериУпрощенный);
	Структура.Вставить("Самовывоз", 			КодТерминалПВЗ);
	Структура.Вставить("ДвериТерминал", 		КодДвериТерминал);  
	Структура.Вставить("ТерминалТерминал", 		КодТерминалТерминал);  
	Возврат Структура;                        	
КонецФункции

&НаСервере
Функция ОпределитьВидДоставки(СтруктураКодовВидовДоставки, КодВидаДоставки, УточнитьВидЗабора = Ложь) Экспорт
	
	Если УточнитьВидЗабора = Ложь Тогда
		
		мВидДоставки = Неопределено;
		
		Если КодВидаДоставки = СтруктураКодовВидовДоставки.СкладДвери Тогда
			мВидДоставки = Перечисления.ES_ВидыДоставки.СкладДвери;
		ИначеЕсли КодВидаДоставки = СтруктураКодовВидовДоставки.ДвериДвериПодЗаказ 
			ИЛИ КодВидаДоставки = СтруктураКодовВидовДоставки.ДвериДвериУпрощенный Тогда
			мВидДоставки = Перечисления.ES_ВидыДоставки.ДвериДвери;
		ИначеЕсли КодВидаДоставки = СтруктураКодовВидовДоставки.Самовывоз Тогда
			мВидДоставки = Перечисления.ES_ВидыДоставки.Самовывоз;
		ИначеЕсли КодВидаДоставки = СтруктураКодовВидовДоставки.ДвериТерминал Тогда
			мВидДоставки = Перечисления.ES_ВидыДоставки.ДвериТерминал;
		ИначеЕсли КодВидаДоставки = СтруктураКодовВидовДоставки.ТерминалТерминал Тогда
			мВидДоставки = Перечисления.ES_ВидыДоставки.СкладСклад;
		КонецЕсли;
		
		Возврат мВидДоставки;
		
	Иначе
		
		мВидЗабора = Перечисления.ES_ВидыЗабора.ПодЗаказ;
		Если КодВидаДоставки = СтруктураКодовВидовДоставки.ДвериДвериУпрощенный  Тогда
			мВидЗабора = Перечисления.ES_ВидыЗабора.Упрощенный;
		КонецЕсли;
		
		Возврат мВидЗабора;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНаправление(Отправитель,Получатель,РегионОтправитель = "", РегионПолучатель = "") Экспорт
	
	//EFSOL_Шаповал Олег Анатольевич 4 сентября 2017 г. 14:30:11 +
	
	мСтруктура = Новый Структура;
	Коэффициент = 0;
	ГлобальныйТерминалОтправителя = Отправитель;
	ГлобальныйТерминалПолучателя = Получатель;
	
	// получим глобальный терминал отправителя
	Если ЗначениеЗаполнено(РегионОтправитель) Тогда
		ДанныеОтправитель = НайтиГлобальныйТерминал(Отправитель,РегионОтправитель);
		Если ЗначениеЗаполнено(ДанныеОтправитель.Город) Тогда
			ГлобальныйТерминалОтправителя = ДанныеОтправитель.Город;
			Коэффициент = Коэффициент + ДанныеОтправитель.Коэффициент;
		КонецЕсли;
	КонецЕсли;
	
	// получим глобальный терминал получателя
	Если ЗначениеЗаполнено(РегионПолучатель) Тогда
		ДанныеПолучатель = НайтиГлобальныйТерминал(Получатель,РегионПолучатель);
		Если ЗначениеЗаполнено(ДанныеПолучатель.Город) Тогда
			ГлобальныйТерминалПолучателя = ДанныеПолучатель.Город;
			Коэффициент = Коэффициент + ДанныеПолучатель.Коэффициент;
		КонецЕсли;
	КонецЕсли;
				
	//сначала смотрим может это отправление по глобальным терминалам
	Направление = ПолучитьНаправлениеГлобальныхТерминалов(ГлобальныйТерминалОтправителя,ГлобальныйТерминалПолучателя);
	
	Если Коэффициент = 0 Тогда
		Коэффициент = 1;
	КонецЕсли;
		
	
	мСтруктура.Вставить("Направление",Направление);
	мСтруктура.Вставить("Коэффициент",Коэффициент);

	
	Возврат мСтруктура;     
	
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Направление = Выборка.Ссылка;
	//КонецЦикла;  	//
	//Возврат Направление;
	
	//EFSOL Шаповал О.А. -
КонецФункции

Функция ПолучитьНаправлениеГлобальныхТерминалов(Отправитель,Получатель) Экспорт
	
	//EFSOL_Шаповал Олег Анатольевич 4 сентября 2017 г. 14:30:11 +
	
	Направление = Справочники.ES_Направления.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_Направления.Ссылка
	|ИЗ
	|	Справочник.ES_Направления КАК ES_Направления
	|ГДЕ
	|	ES_Направления.Город1 = &Город1
	|	И ES_Направления.Город2 = &Город2";
	Запрос.УстановитьПараметр("Город1",Отправитель);
	Запрос.УстановитьПараметр("Город2",Получатель);
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Направление = ВыборкаДетальныеЗаписи.Ссылка;
		Прервать;
	КонецЦикла;
	
	Возврат Направление;     
	
	//EFSOL Шаповал О.А. -
КонецФункции

Функция НайтиГлобальныйТерминал(НаселенныйПункт,Регион) Экспорт
	
	//EFSOL_Шаповал Олег Анатольевич 4 сентября 2017 г. 14:30:11 +
	ГТ_Отправитель = Новый Структура;
	ГТ_Отправитель.Вставить("Город","");
	ГТ_Отправитель.Вставить("Коэффициент",1);
	
	Если НаселенныйПункт = "" ИЛИ Регион = "" Тогда
		Возврат ГТ_Отправитель;
	КонецЕсли;
	
	Регион = СтрЗаменить(Регион,".","");
	Регион = СтрЗаменить(Регион,",","");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ES_ГородаОбслуживания.НасленныйПункт,
	               |	ES_ГородаОбслуживания.Регион,
	               |	ES_ГородаОбслуживания.Терминал,
	               |	ЕСТЬNULL(ES_ГородаОбслуживания.Зона.Коэффициент, 1) КАК Коэффициент
	               |ИЗ
	               |	РегистрСведений.ES_ГородаОбслуживания КАК ES_ГородаОбслуживания
	               |ГДЕ
	               |	ES_ГородаОбслуживания.НасленныйПункт = &НасленныйПункт
	               |	И ES_ГородаОбслуживания.Регион ПОДОБНО ""%"" + &Регион + ""%""";
	Запрос.УстановитьПараметр("НасленныйПункт",НаселенныйПункт);
	Запрос.УстановитьПараметр("Регион",Регион);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ГТ_Отправитель.Город = Выборка.Терминал;
		ГТ_Отправитель.Коэффициент = Выборка.Коэффициент;
	КонецЦикла;
	
		
	Возврат ГТ_Отправитель;     
	
	//EFSOL Шаповал О.А. -
КонецФункции


&НаСервере
Процедура ЭР_ЗаполнитьДопУслугиПоДоговору (Объект) Экспорт
	
	//EFSOL_Шаповал Олег Анатольевич 15 сентября 2017 г. 8:48:07 +
	мУслуги = Объект.Договор.Услуги;
	Если мУслуги.Количество() > 0 Тогда
		Для Каждого СТ_Услуги Из мУслуги Цикл
			СТ_Найдена = Объект.Запасы.Найти(СТ_Услуги.Номенклатура,"Номенклатура");
			Если СТ_Найдена = Неопределено Тогда
				СТ_Новая = Объект.Запасы.Добавить();
				СТ_Новая.Номенклатура = СТ_Услуги.Номенклатура;
				СТ_Новая.СтавкаНДС = ПолучитьСтавкуНДСНоменклатуры(СТ_Услуги.Номенклатура);
				СТ_Новая.ЕдиницаИзмерения =	СТ_Услуги.Номенклатура.ЕдиницаИзмерения;
				СТ_Новая.Количество = 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//EFSOL Шаповал О.А. -
	
КонецПроцедуры


&НаСервере
// Оприделяет зону доставки
// Направление Москва-Москва
// Вид клиента В2В/В2С
// Срочность Стандарт/Экспресс
Функция ОпределитьЗонуДоставки(Направление, ВидКлиента, Срочность) Экспорт
	//EFSOL Сережко А.С.+
	СтруктураВозврата = Новый Структура;
	Зона = Справочники.ES_ЗоныДоставки.ПустаяСсылка();
	СрокДоставки = "нет данных";
	//ЭР Несторук С.И. 24.09.2017 14:29:43 {
	Если НЕ ЗначениеЗаполнено(Направление) ИЛИ
		НЕ ЗначениеЗаполнено(ВидКлиента) ИЛИ
		НЕ ЗначениеЗаполнено(Срочность) Тогда
		СтруктураВозврата.Вставить("Зона",Зона);
		СтруктураВозврата.Вставить("СрокДоставки", СрокДоставки);
		Возврат СтруктураВозврата;
	КонецЕсли;	
	//}ЭР Несторук С.И.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_МатрицаЗонСрезПоследних.Зона,
	|	ES_МатрицаЗонСрезПоследних.СрокДоставки
	|ИЗ
	|	РегистрСведений.ES_МатрицаЗон.СрезПоследних(
	|			,
	|			Направление = &Направление
	|				И Продукт = &Срочность
	|				И ВидКонтрагента = &ВидКонтрагента) КАК ES_МатрицаЗонСрезПоследних";
	
	Запрос.УстановитьПараметр("Направление", Направление);
	Запрос.УстановитьПараметр("ВидКонтрагента", ВидКлиента);	
	Запрос.УстановитьПараметр("Срочность", Срочность);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Зона = ВыборкаДетальныеЗаписи.Зона;
		СрокДоставки = ВыборкаДетальныеЗаписи.СрокДоставки;
	КонецЦикла;
	
	СтруктураВозврата.Вставить("Зона",Зона);
	СтруктураВозврата.Вставить("СрокДоставки", СрокДоставки);
	Возврат СтруктураВозврата;
	//EFSOL Сережко А.С. -
КонецФункции

&НаСервере
Функция ЭР_ПолучитьЗначениеРеквизитаНаСервере(Объект,ИмяРеквизита) Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	Попытка
		Значение = Объект[ИмяРеквизита];
	Исключение
		Значение = Неопределено;
	КонецПопытки;
	
	СтруктураВозврата.Вставить(ИмяРеквизита,Значение);
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура СформироватьДвижения_ES_НаложенныеПлатежиПартнеров(Движения,ПериодПроведения,Регистратор,Заказчик,ДокументДоставки,ФактическийНП,ФактическийНП_Нал,ФактическийНП_Безнал,Отправлено,Принято) Экспорт
	//Если (ФактическийНП_Нал > 0 или ФактическийНП_Безнал > 0) И Заказчик.ES_Партнер Тогда
	// РН ES_НаложенныеПлатежиПартнеров
	Движения.ES_НаложенныеПлатежиПартнеров.Записывать = Истина;
	Движение = Движения.ES_НаложенныеПлатежиПартнеров.Добавить();
	Движение.Период   = ПериодПроведения;
	Движение.Регистратор  = Регистратор;
	Движение.Партнер   = Заказчик;
	Движение.Заказ    = ДокументДоставки;
	Движение.НППлан   = ФактическийНП;      
	Движение.НПФактНал   = ФактическийНП_Нал;
	Движение.НПФактБезнал  = ФактическийНП_Безнал;
	Движение.Отправлено  = Отправлено;
	Движение.Принято   = Принято;
	
	//КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПоступлениеВКассуПоПриемке(ПоступлениеВКассу, Приемка) Экспорт
	
	Если Приемка.ВидОперации <> Перечисления.ES_ВидыОперацийПриемки.НаложенныеПлатежи Тогда
		ВызватьИсключение НСтр("ru='Поступление в кассу можно создать только на основании документа с видом операции ""Наложенные платежи""'");
	КонецЕсли;
	
	Если Приемка.ВидОплаты <> Перечисления.ТипыДенежныхСредств.Наличные Тогда
		ВызватьИсключение НСтр("ru='Поступление в кассу можно создать только на основании документа с видом оплаты ""Наличные""'");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Приемка.Касса) Тогда
		ВызватьИсключение НСтр("ru='Укажите кассу'");
	КонецЕсли;
	ПоступлениеВКассу.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПрочиеРасчеты;
	ПоступлениеВКассу.Корреспонденция 	= ПланыСчетов.Управленческий.РасчетыСПрочимиПоставщикамиИТаможеннымиОрганами;
	ПоступлениеВКассу.СуммаДокумента = Приемка.СуммаДокумента;
	ПоступлениеВКассу.Контрагент = Приемка.Партнер;
	ПоступлениеВКассу.Касса 		= Приемка.Касса;
	ПоступлениеВКассу.Организация = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Организация);
	ПоступлениеВКассу.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(ПоступлениеВКассу.Организация,,ПоступлениеВКассу.Дата);
	
	
	Если ПоступлениеВКассу.РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = ПоступлениеВКассу.РасшифровкаПлатежа.Добавить();
		НоваяСтрока.СуммаРасчетов 	= Приемка.СуммаДокумента;
		НоваяСтрока.СуммаПлатежа	= Приемка.СуммаДокумента;
		НоваяСтрока.СтавкаНДС		= Справочники.СтавкиНДС.СтавкаНДС(ПоступлениеВКассу.Организация.ВидСтавкиНДСПоУмолчанию);
		НоваяСтрока.СуммаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
	Иначе
		ПоступлениеВКассу.РасшифровкаПлатежа[0].СуммаРасчетов 	= Приемка.СуммаДокумента;
		ПоступлениеВКассу.РасшифровкаПлатежа[0].СуммаПлатежа 	= Приемка.СуммаДокумента;
		ПоступлениеВКассу.РасшифровкаПлатежа[0].СтавкаНДС		= Справочники.СтавкиНДС.СтавкаНДС(ПоступлениеВКассу.Организация.ВидСтавкиНДСПоУмолчанию);
		ПоступлениеВКассу.РасшифровкаПлатежа[0].СуммаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(ПоступлениеВКассу.РасшифровкаПлатежа[0].СтавкаНДС);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоступлениеНаСчетПоПриемке (ПоступлениеНаСчет, Приемка) Экспорт
	
	Если Приемка.ВидОперации <> Перечисления.ES_ВидыОперацийПриемки.НаложенныеПлатежи Тогда
		ВызватьИсключение НСтр("ru='Поступление в кассу можно создать только на основании документа с видом операции ""Наложенные платежи""'");
	КонецЕсли;
	
	Если Приемка.ВидОплаты <> Перечисления.ТипыДенежныхСредств.Безналичные Тогда
		ВызватьИсключение НСтр("ru='Поступление в кассу можно создать только на основании документа с видом оплаты ""Безналичные""'");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Приемка.Счет) Тогда
		ВызватьИсключение НСтр("ru='Укажите банковский счет'");
	КонецЕсли;
	
	ПоступлениеНаСчет.ВидОперации 			= Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты;
	ПоступлениеНаСчет.Корреспонденция 		= ПланыСчетов.Управленческий.РасчетыСПрочимиПоставщикамиИТаможеннымиОрганами;
	ПоступлениеНаСчет.СуммаДокумента 			= Приемка.СуммаДокумента;
	ПоступлениеНаСчет.Контрагент 				= Приемка.Партнер;
	ПоступлениеНаСчет.БанковскийСчет 			= Приемка.Счет;
	ПоступлениеНаСчет.Организация 			= ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Организация);
	ПоступлениеНаСчет.НалогообложениеНДС 		= УправлениеНебольшойФирмойСервер.НалогообложениеНДС(ПоступлениеНаСчет.Организация,,ПоступлениеНаСчет.Дата);
	
	
	Если ПоступлениеНаСчет.РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = ПоступлениеНаСчет.РасшифровкаПлатежа.Добавить();
		НоваяСтрока.СуммаРасчетов 	= Приемка.СуммаДокумента;
		НоваяСтрока.СуммаПлатежа	= Приемка.СуммаДокумента;
		НоваяСтрока.СтавкаНДС		= Справочники.СтавкиНДС.СтавкаНДС(ПоступлениеНаСчет.Организация.ВидСтавкиНДСПоУмолчанию);
		НоваяСтрока.СуммаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
	Иначе
		ПоступлениеНаСчет.РасшифровкаПлатежа[0].СуммаРасчетов 	= Приемка.СуммаДокумента;
		ПоступлениеНаСчет.РасшифровкаПлатежа[0].СуммаПлатежа 	= Приемка.СуммаДокумента;
		ПоступлениеНаСчет.РасшифровкаПлатежа[0].СтавкаНДС		= Справочники.СтавкиНДС.СтавкаНДС(ПоступлениеНаСчет.Организация.ВидСтавкиНДСПоУмолчанию);
		ПоступлениеНаСчет.РасшифровкаПлатежа[0].СуммаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(ПоступлениеНаСчет.РасшифровкаПлатежа[0].СтавкаНДС);
		
	КонецЕсли
	
КонецПроцедуры

Процедура ЗаполнитьТЧПлатежиНаСервере(ТЧ, МассивЗаказов) Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_НаложенныеПлатежиПартнеровОбороты.Заказ,
	|	ЕСТЬNULL(ES_НаложенныеПлатежиПартнеровОбороты.НПФактНалОборот, 0) КАК НПФактНал,
	|	ЕСТЬNULL(ES_НаложенныеПлатежиПартнеровОбороты.НПФактБезналОборот, 0) КАК НПФактБезнал,
	|	ЕСТЬNULL(ES_НаложенныеПлатежиПартнеровОбороты.ОтправленоОборот, 0) КАК Отправлено,
	|	ЕСТЬNULL(ES_НаложенныеПлатежиПартнеровОбороты.ПринятоОборот, 0) КАК Принято
	|ПОМЕСТИТЬ ВТ_НПОбороты
	|ИЗ
	|	РегистрНакопления.ES_НаложенныеПлатежиПартнеров.Обороты(, , , Заказ В (&МассивЗаказов)) КАК ES_НаложенныеПлатежиПартнеровОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НПОбороты.Заказ,
	|	ВТ_НПОбороты.НПФактНал,
	|	ВТ_НПОбороты.НПФактБезнал,
	|	ВТ_НПОбороты.Отправлено
	|ПОМЕСТИТЬ ВТ_Заказы
	|ИЗ
	|	ВТ_НПОбороты КАК ВТ_НПОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_ДанныеПоЗаказамСрезПоследних.Заказ,
	|	ES_ДанныеПоЗаказамСрезПоследних.НомерНакладной,
	|	ES_ДанныеПоЗаказамСрезПоследних.НомерДокумента,
	|	ES_ДанныеПоЗаказамСрезПоследних.ДатаДоставки,
	|	ES_ДанныеПоЗаказамСрезПоследних.ДатаДокумента,
	|	ES_ДанныеПоЗаказамСрезПоследних.ВидДоставки,
	|	ES_ДанныеПоЗаказамСрезПоследних.Получатель,
	|	ES_ДанныеПоЗаказамСрезПоследних.Организация,
	|	ES_ДанныеПоЗаказамСрезПоследних.ОбщийВес,
	|	ES_ДанныеПоЗаказамСрезПоследних.Комментарий,
	|	ES_ДанныеПоЗаказамСрезПоследних.СтоимостьДоставки
	|ПОМЕСТИТЬ ВТ_ДанныеПоЗаказу
	|ИЗ
	|	РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(
	|			,
	|			Заказ В
	|				(ВЫБРАТЬ
	|					ВТ_Заказы.Заказ
	|				ИЗ
	|					ВТ_Заказы КАК ВТ_Заказы)) КАК ES_ДанныеПоЗаказамСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ES_СтатусыЗаказовСрезПоследних.Заказ,
	|	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа
	|ПОМЕСТИТЬ ВТ_СтатусыЗаказов
	|ИЗ
	|	РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(
	|			,
	|			Заказ В
	|				(ВЫБРАТЬ
	|					ВТ_Заказы.Заказ
	|				ИЗ
	|					ВТ_Заказы КАК ВТ_Заказы)) КАК ES_СтатусыЗаказовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Значение КАК Справочник.Ячейки) КАК Ячейка,
	|	ES_ИзменяемыеРеквизитыЗаказовСрезПоследних.Заказ
	|ПОМЕСТИТЬ ВТ_Ячейка
	|ИЗ
	|	РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(
	|			,
	|			Заказ В
	|					(ВЫБРАТЬ
	|						ВТ_Заказы.Заказ
	|					ИЗ
	|						ВТ_Заказы КАК ВТ_Заказы)
	|				И РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.Ячейка)) КАК ES_ИзменяемыеРеквизитыЗаказовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Заказы.Заказ,
	|	ВТ_Заказы.НПФактНал,
	|	ВТ_Заказы.НПФактБезнал,
	|	ВТ_ДанныеПоЗаказу.НомерНакладной,
	|	ВТ_ДанныеПоЗаказу.НомерДокумента,
	|	ВТ_ДанныеПоЗаказу.ДатаДоставки,
	|	ВТ_ДанныеПоЗаказу.ДатаДокумента,
	|	ВТ_ДанныеПоЗаказу.ВидДоставки,
	|	ВТ_ДанныеПоЗаказу.Получатель,
	|	ВТ_ДанныеПоЗаказу.ОбщийВес КАК Вес,
	|	ВТ_ДанныеПоЗаказу.Комментарий,
	|	ВТ_СтатусыЗаказов.СтатусЗаказа,
	|	ВТ_Ячейка.Ячейка,
	|	ВТ_ДанныеПоЗаказу.СтоимостьДоставки,
	|	ВТ_ДанныеПоЗаказу.СтоимостьДоставки КАК Стоимость,
	|	ВТ_Заказы.Отправлено,
	|	ВТ_Заказы.НПФактНал + ВТ_Заказы.НПФактБезнал КАК КОтправке
	|ИЗ
	|	ВТ_Заказы КАК ВТ_Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеПоЗаказу КАК ВТ_ДанныеПоЗаказу
	|		ПО ВТ_Заказы.Заказ = ВТ_ДанныеПоЗаказу.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатусыЗаказов КАК ВТ_СтатусыЗаказов
	|		ПО ВТ_Заказы.Заказ = ВТ_СтатусыЗаказов.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Ячейка КАК ВТ_Ячейка
	|		ПО ВТ_Заказы.Заказ = ВТ_Ячейка.Заказ";
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТЧ.Добавить(),ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаказДоставлен(Статус) Экспорт
	
	Доставлен = Ложь;
	Если Статус = Перечисления.ES_СтатусыЗаказов.Доставлен 
		ИЛИ Статус = Перечисления.ES_СтатусыЗаказов.ДоставленРассчитать Тогда
		Доставлен = Истина;
	КонецЕсли;
	
	Возврат Доставлен;
	
КонецФункции

//Мажаренко С.А. 18.09.2017
Процедура РегЗадание() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ES_СборГрузов.Контрагент,
	|	ES_СборГрузов.Адрес,
	|	ES_СборГрузов.ДеньНедели,
	|	ES_СборГрузов.ВремяПо,
	|	ES_СборГрузов.НачальнаяДата,
	|	ES_СборГрузов.КонечнаяДата,
	|	ES_СборГрузов.ВремяС,
	|	ES_СборГрузов.Отправитель,
	|	ES_СборГрузов.Договор
	|ИЗ
	|	РегистрСведений.ES_СборГрузов КАК ES_СборГрузов
	|ГДЕ
	|	&МоментВремени МЕЖДУ ES_СборГрузов.НачальнаяДата И ES_СборГрузов.КонечнаяДата";
	
	Запрос.УстановитьПараметр("МоментВремени", ТекущаяДата());	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ДатаЗабора");
	ТЗ.Колонки.Добавить("Контрагент");
	ТЗ.Колонки.Добавить("Отправитель");
	ТЗ.Колонки.Добавить("Адрес");
	ТЗ.Колонки.Добавить("ДеньНедели");
	ТЗ.Колонки.Добавить("ВремяС");
	ТЗ.Колонки.Добавить("ВремяПО");
	ТЗ.Колонки.Добавить("Договор");
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДеньНедели = 0;
		Если ВыборкаДетальныеЗаписи.ДеньНедели = Перечисления.ДниНедели.Понедельник Тогда
			ДеньНедели = 1;
		ИначеЕсли ВыборкаДетальныеЗаписи.ДеньНедели = Перечисления.ДниНедели.Вторник Тогда
			ДеньНедели = 2;
		ИначеЕсли ВыборкаДетальныеЗаписи.ДеньНедели = Перечисления.ДниНедели.Среда Тогда
			ДеньНедели = 3;
		ИначеЕсли ВыборкаДетальныеЗаписи.ДеньНедели = Перечисления.ДниНедели.Четверг Тогда
			ДеньНедели = 4;
		ИначеЕсли ВыборкаДетальныеЗаписи.ДеньНедели = Перечисления.ДниНедели.Пятница Тогда
			ДеньНедели = 5;
		ИначеЕсли ВыборкаДетальныеЗаписи.ДеньНедели = Перечисления.ДниНедели.Суббота Тогда
			ДеньНедели = 6;
		ИначеЕсли ВыборкаДетальныеЗаписи.ДеньНедели = Перечисления.ДниНедели.Воскресенье Тогда
			ДеньНедели = 7;
		КонецЕсли;
		
		НачДата = ТекущаяДата();
		КонДата = ВыборкаДетальныеЗаписи.КонечнаяДата;
		
		счДата = НачалоДня(НачДата);		
		ДатыЗабора = Новый ТаблицаЗначений;
		ДатыЗабора.Колонки.Добавить("Дата");
		Пока счДата <= КонДата Цикл
			Если ДеньНедели(счДата) = ДеньНедели Тогда
				ДатыЗабора.Добавить().Дата = НачалоДня(счДата);
			КонецЕсли;	
			счДата = счДата + 86400;
		КонецЦикла;				
		
		НачДата = НачалоДня(НачДата);
		Пока НачДата <= КонДата Цикл
			ДатаЗабора = ДатыЗабора.Найти(НачДата,"Дата");
			Если ЗначениеЗаполнено(ДатаЗабора) Тогда
				СтрокаТаблицы = ТЗ.Добавить();
				СтрокаТаблицы.ДатаЗабора = ДатаЗабора.Дата;
				СтрокаТаблицы.Контрагент = ВыборкаДетальныеЗаписи.Контрагент;
				СтрокаТаблицы.Отправитель = ВыборкаДетальныеЗаписи.Отправитель;
				СтрокаТаблицы.Адрес = ВыборкаДетальныеЗаписи.Адрес;
				СтрокаТаблицы.ДеньНедели = ВыборкаДетальныеЗаписи.ДеньНедели;
				СтрокаТаблицы.ВремяС = ВыборкаДетальныеЗаписи.ВремяС;
				СтрокаТаблицы.ВремяПО = ВыборкаДетальныеЗаписи.ВремяПО;
				СтрокаТаблицы.Договор = ВыборкаДетальныеЗаписи.Договор;
			КонецЕсли;
			НачДата = НачДата + 86400;
		КонецЦикла;		
	КонецЦикла;
	
	
	Запрос2 = Новый Запрос;
	Запрос2.Текст = 
	"ВЫБРАТЬ
	|	ES_ЗаборГруза.Ссылка КАК Ссылка,
	|	ES_ЗаборГруза.ES_СозданРегЗаданием КАК СозданРегЗаданием,
	|	ES_ЗаборГруза.Отправитель КАК Отправитель,
	|	ES_ЗаборГруза.Заказчик КАК Заказчик,
	|	ES_ЗаборГруза.ДатаЗабора КАК ДатаЗабора
	|ИЗ
	|	Документ.ES_ЗаборГруза КАК ES_ЗаборГруза
	|ГДЕ
	|	ES_ЗаборГруза.ES_СозданРегЗаданием = &ES_СозданРегЗаданием
	|	И ES_ЗаборГруза.Заказчик = &Заказчик
	|	И ES_ЗаборГруза.Отправитель = &Отправитель
	|	И ES_ЗаборГруза.ДатаЗабора = &ДатаЗабора";
	
	Для каждого Текстр ИЗ ТЗ Цикл
		Запрос2.УстановитьПараметр("ES_СозданРегЗаданием", Истина);
		Запрос2.УстановитьПараметр("ДатаЗабора", Текстр.ДатаЗабора);
		Запрос2.УстановитьПараметр("Заказчик", Текстр.Контрагент);
		Запрос2.УстановитьПараметр("Отправитель", Строка(Текстр.Отправитель));
		
		РезультатЗапроса2 = Запрос2.Выполнить();
		ТЗФИН = РезультатЗапроса2.Выгрузить();
		Если ТЗФИН.Количество() = 0 Тогда
			НовыйДокумент = Документы.ES_ЗаборГруза.СоздатьДокумент();
			НовыйДокумент.Дата = ТекущаяДата();
			НовыйДокумент.Заказчик = Текстр.Контрагент;
			НовыйДокумент.Отправитель = Текстр.Отправитель;
			НовыйДокумент.Адрес = Текстр.Адрес;
			НовыйДокумент.ВремяЗабораС = Текстр.ВремяС;
			НовыйДокумент.ВремяЗабораПо = Текстр.ВремяПО;
			НовыйДокумент.ВидЗабора = Перечисления.ES_ВидыЗабора.Выезд;
			НовыйДокумент.ДатаЗабора = Текстр.ДатаЗабора;
			НовыйДокумент.ES_СозданРегЗаданием = Истина;
			НовыйДокумент.ES_Договор = Текстр.Договор;
			НовыйДокумент.Записать();
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;		
	КонецЦикла;
		
КонецПроцедуры
//Мажаренко С.А. 18.09.2017

//функция создана для отчета "Отчет агента"
Функция ВернутьЗаказчика (Заказчик0, Заказчик1, Заказчик2, Заказчик3, Заказчик4) Экспорт
	
	//ЭР Несторук С.И. 20.09.2017 22:35:03 {
	Если ЗначениеЗаполнено(Заказчик0) Тогда
		мЗаказчик = Заказчик0;
	ИначеЕсли ЗначениеЗаполнено(Заказчик1) Тогда
		мЗаказчик = Заказчик1;
	ИначеЕсли ЗначениеЗаполнено(Заказчик2) Тогда
		мЗаказчик = Заказчик2;
	ИначеЕсли ЗначениеЗаполнено(Заказчик3) Тогда
		мЗаказчик = Заказчик3;
	Иначе 
		мЗаказчик = Заказчик4;
	КонецЕсли;
	
	Возврат мЗаказчик;
	
	//}ЭР Несторук С.И.	
	
КонецФункции

//( ЭР Мажаренко С.А 22.09.2017
Процедура ПроведениеПриемкиОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Пользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	Если Отказ = Ложь Тогда
		Источник.Движения.Записать();
		Если (РольДоступна("ES_Партнёр") ИЛИ ЗначениеЗаполнено(Источник.Склад.ES_Партнер)) 
			И Источник.ВидОперации = Перечисления.ES_ВидыОперацийПриемки.Заказы Тогда
			//ЭР Несторук С.И. 25.09.2017 13:23:42 {
			//Проверим, есть ли уже план по этой приемке
			
			Если ПроверитьСуществованиеДокументовПоПриемке(Источник, Отказ) Тогда
				Возврат;
			КонецЕсли;
							
			//}ЭР Несторук С.И.
			НачатьТранзакцию();
			ПланДоставки = Документы.ES_ПланДоставки.СоздатьДокумент();	
			ПланДоставки.Курьер = ПолучитьКурьераПоПарнерскомуСкладу(Источник.Склад);//Справочники.Сотрудники.НайтиПоНаименованию(Пользователь.Имя);
			ПланДоставки.Подтвержден = Истина;
			ПланДоставки.Дата = Источник.Дата;
			ПланДоставки.Склад = Источник.Склад;
			ПланДоставки.ДокументОснование = Источник.Ссылка;
			ПланДоставки.Ответственный	= Источник.Ответственный;
			//ПланДоставки.Записать();	
			СписокЗаказов = Новый Массив;
			Для каждого СтрокаПриемки ИЗ Источник.Заказы Цикл
				Если (Типзнч(СтрокаПриемки.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") И СтрокаПриемки.Проверен)
					ИЛИ Типзнч(СтрокаПриемки.Заказ) = Тип("ДокументСсылка.ES_ЗаборГруза") Тогда
					СписокЗаказов.Добавить(СтрокаПриемки.Заказ);
				КонецЕсли;
			КонецЦикла;	
			
			ES_ОбщегоНазначения.ПолучитьДанныеПоЗаказамДляЗаполненияПланаДоставки(Тип("ДокументСсылка.ES_ПланДоставки"), ПланДоставки, СписокЗаказов);
			Попытка
				
				ПланДоставки.Записать(РежимЗаписиДокумента.Проведение);	
				
			Исключение
				ПланДоставки.Записать(РежимЗаписиДокумента.Запись);
				
			КонецПопытки;
						
			
			ЗафиксироватьТранзакцию();
			
	//		НачатьТранзакцию();
	//		НовыйОтчет = Документы.ES_ОтчетОДоставке.СоздатьДокумент();
	//		НовыйОтчет.Заполнить(ПланДоставки.Ссылка);

	//		Попытка
	//		
	//		НовыйОтчет.Записать(РежимЗаписиДокумента.Проведение);
	//
	//		
	//		Исключение
	//		 НовыйОтчет.Записать(РежимЗаписиДокумента.Запись);

	//		КонецПопытки;
			
			//ЗафиксироватьТранзакцию();
			Сообщить("Был создан " + ПланДоставки.Ссылка); //+ " и  " + НовыйОтчет.Ссылка);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//) ЭР Мажаренко С.А 22.09.2017

Функция ПроверитьСуществованиеДокументовПоПриемке(Источник, Отказ)
	ЕстьДоки = Ложь;
	СозданныеДокументы = "На соновании уже документа был создан:";
	СущПлан = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ES_ПланДоставки.Ссылка
	|ИЗ
	|	Документ.ES_ПланДоставки КАК ES_ПланДоставки
	|ГДЕ
	|	НЕ ES_ПланДоставки.ПометкаУдаления
	|	И ES_ПланДоставки.ДокументОснование = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ЕстьДоки = Истина;
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СущПлан = Выборка.Ссылка;
			СозданныеДокументы = СозданныеДокументы+Символы.ПС+ СущПлан;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СущПлан) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ES_ОтчетОДоставке.Ссылка
		|ИЗ
		|	Документ.ES_ОтчетОДоставке КАК ES_ОтчетОДоставке
		|ГДЕ
		|	НЕ ES_ОтчетОДоставке.ПометкаУдаления
		|	И ES_ОтчетОДоставке.ПланДоставки = &ПланДоставки";
		
		Запрос.УстановитьПараметр("ПланДоставки", СущПлан);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЕстьДоки = Истина;
			
			СущОтчет = Выборка.Ссылка;
			//Если отчет проведен, то при проведении приемки - отказ
			Если СущОтчет.Проведен Тогда
				Отказ = Истина;
			КонецЕсли;
			
			СозданныеДокументы = СозданныеДокументы+Символы.ПС+ СущОтчет;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЕстьДоки Тогда
		Сообщить(СозданныеДокументы);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	
КонецФункции

Функция ВернутьПредставлениеДопИнформации(ФИОПолучателя, КомментарийКСтатусу, ДопИнформация) Экспорт
	
	//ЭР Несторук С.И. 05.10.2017 9:14:31 {
	СтрокаРезультат = "";
	СтрокаРезультат = ?(ЗначениеЗаполнено(ФИОПолучателя), СтрокаРезультат+ФИОПолучателя+ " ", СтрокаРезультат);
	СтрокаРезультат = ?(ЗначениеЗаполнено(КомментарийКСтатусу), СтрокаРезультат+КомментарийКСтатусу+ " ", СтрокаРезультат);
	СтрокаРезультат = ?(ЗначениеЗаполнено(ДопИнформация), СтрокаРезультат+ДопИнформация, СтрокаРезультат);
	Возврат СтрокаРезультат;
	//}ЭР Несторук С.И.
	
КонецФункции

Процедура ES_ПриПроведенииПланаДоставкиОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	//ЭР Несторук С.И. 26.09.2017 20:39:18 {
	//Склеиваем План доставки и отчет о доставке
	
	//Когда выключена опция "Распределения заказов в отдельном окне, создается отчет сразу после проведения плана
	РаспределениеВОтдельномОкне = Константы.ES_РаспределениеЗаявокВОтдельномОкне.Получить();
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ES_ОтчетОДоставке.Ссылка
	|ИЗ
	|	Документ.ES_ОтчетОДоставке КАК ES_ОтчетОДоставке
	|ГДЕ
	|	ES_ОтчетОДоставке.ПланДоставки = &ПланДоставки
	|	И НЕ ES_ОтчетОДоставке.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ПланДоставки", Источник.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();			
		ОтчетОДоставке = Выборка.Ссылка.ПолучитьОбъект();;
		
		// Формирование массива заказов, которые уже есть в Отчете
		МассивЗаказов = Новый Массив;
		Для каждого Стр Из ОтчетОДоставке.Заказы Цикл
			МассивЗаказов.Добавить(Стр.ДокументДоставки);
		КонецЦикла; 
		
		СтруктураМассивов = ОтчетОДоставке.ЗаполнитьДаннымиИзПланаДоставки(Источник.Ссылка, МассивЗаказов);
		ЗаказовУдалено =  СтруктураМассивов.ЗаказыНаУдаление.Количество();
		ЗаказовДобавлено	= СтруктураМассивов.ЗаказыДляДобавления.Количество();	
		
		Если НЕ ОтчетОДоставке.Статус = Перечисления.ES_СтатусыОтчетов.Закрыт Тогда
			// Заказы на удаление
			Для каждого СтрЗаказ Из СтруктураМассивов.ЗаказыНаУдаление Цикл
				
				// Удаление Заказа
				НайденныеЗаказы = ОтчетОДоставке.Заказы.НайтиСтроки(Новый Структура("ДокументДоставки", СтрЗаказ));
				Если НайденныеЗаказы.Количество() > 0 Тогда
					Сообщить("" + НайденныеЗаказы[0].ДокументДоставки + " был удален из Плана. Последний статус заказа: " + НайденныеЗаказы[0].СтатусЗаказа);
					ОтчетОДоставке.Заказы.Удалить(НайденныеЗаказы[0]);
				КонецЕсли;
				
				// Удаление груза Места
				НайденныеМеста = ОтчетОДоставке.СписокГрузов.НайтиСтроки(Новый Структура("ДокументДоставки", СтрЗаказ));
				Если НайденныеМеста.Количество() > 0 Тогда
					Для каждого СтрОбъект Из НайденныеМеста Цикл
						ОтчетОДоставке.СписокГрузов.Удалить(СтрОбъект);
					КонецЦикла; 
				КонецЕсли; 
				
				// Удаление груза Запасы
				НайденныеЗапасы = ОтчетОДоставке.Грузы.НайтиСтроки(Новый Структура("ДокументДоставки", СтрЗаказ));
				Если НайденныеЗапасы.Количество() > 0 Тогда
					Для каждого СтрНом Из НайденныеЗапасы Цикл
						ОтчетОДоставке.Грузы.Удалить(СтрНом);
					КонецЦикла; 
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		ОтчетОДоставке.Записать(РежимЗаписиДокумента.Проведение);
		
		ПараметрыВыполнения = Новый Массив;
		ПараметрыВыполнения.Добавить(ЗаказовУдалено);
		ПараметрыВыполнения.Добавить(ЗаказовДобавлено);
		ПараметрыВыполнения.Добавить(Источник.Курьер);
		ФоновыеЗадания.Выполнить("ES_ОбщегоНазначения.СформироватьИОтправитьУведомлениеКурьеру", ПараметрыВыполнения);

		
	ИначеЕсли НЕ РаспределениеВОтдельномОкне Тогда
		ОтчетОДоставке = Документы.ES_ОтчетОДоставке.СоздатьДокумент();
		ОтчетОДоставке.Статус = Перечисления.ES_СтатусыОтчетов.Новый;
		ОтчетОДоставке.Заполнить(Источник.Ссылка);
		ОтчетОДоставке.Записать(РежимЗаписиДокумента.Проведение);
		Сообщить("Был создан " + ОтчетОДоставке.Ссылка);
	КонецЕсли;
	
	//}ЭР Несторук С.И.
КонецПроцедуры

Процедура СформироватьИОтправитьУведомлениеКурьеру(ЗаказовУдалено, ЗаказовДобавлено, Курьер) Экспорт
	
	ТекстУведомления = "";
	Если ЗаказовДобавлено > 0 Тогда
		ТекстУведомления  = ?(ПустаяСтрока(ТекстУведомления), ""+ "Добавлено новые заказы в маршрут: "+ ЗаказовДобавлено, 
		ТекстУведомления + Символы.ПС + "Добавлено новые заказы в маршрут: "+ ЗаказовДобавлено);
	КонецЕсли;
	
	Если ЗаказовУдалено > 0 Тогда
		ТекстУведомления  = ?(ПустаяСтрока(ТекстУведомления), ""+ "Удалены заказы из маршрута: "+ ЗаказовУдалено, 
		ТекстУведомления + Символы.ПС + "Удалены заказы из маршрута: "+ ЗаказовУдалено);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстУведомления) Тогда
		Уведомление = Новый ДоставляемоеУведомление();
		Уведомление.Данные = "1";
		Уведомление.Текст = ТекстУведомления;
		Уведомление.Заголовок = "Уведомление";

		ES_РаботаСДоставляемымиУведомлениями.ОтправитьУведомление(Уведомление, Курьер);	
	КонецЕсли;
	
КонецПроцедуры


Функция ПолучитьСписокЗаказовВСборе(Сбор) Экспорт
	
	//ЭР Несторук С.И. 29.09.2017 11:29:02 {
		СписокЗаказов = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ES_ЗаборГрузаЗаказы.Заказ.ES_НомерНакладной КАК НомерНакладной
		|ИЗ
		|	Документ.ES_ЗаборГруза.Заказы КАК ES_ЗаборГрузаЗаказы
		|ГДЕ
		|	ES_ЗаборГрузаЗаказы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Сбор);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат СписокЗаказов;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
		
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.НомерНакладной) Тогда
		СписокЗаказов = ?(ПустаяСтрока(СписокЗаказов), СписокЗаказов+Выборка.НомерНакладной, СписокЗаказов+" "+Выборка.НомерНакладной);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокЗаказов;
	//}ЭР Несторук С.И.

КонецФункции

Функция ПолучитьКурьераПоПарнерскомуСкладу(ПартнерскийСклад)
	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ES_НастройкаДоступаПользователей.Сотрудник) КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ES_НастройкаДоступаПользователей КАК ES_НастройкаДоступаПользователей
		|ГДЕ
		|	ES_НастройкаДоступаПользователей.СтруктурнаяЕдиница = &Склад";
	
	Запрос.УстановитьПараметр("Склад", ПартнерскийСклад);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.Сотрудники.ПустаяСсылка();
	Иначе
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Возврат ВыборкаДетальныеЗаписи.Сотрудник;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

//Заполнение Заказа покупателя данными Закзачика(Контрагента)
Процедура ЗаполнитьДокДаннымиКонтрагента(НовыйДокумент) Экспорт
	
	//НовыйДокумент = НовДокСсылка.ПолучитьОбъект();
	Контрагент = НовыйДокумент.Контрагент;
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(НовыйДокумент.Ссылка, Контрагент, НовыйДокумент.Организация,НовыйДокумент.Договор);
	
	НовыйДокумент.Договор = СтруктураДанные.Договор;
	НовыйДокумент.ВалютаДокумента = ?(ЗначениеЗаполнено(СтруктураДанные.ВалютаРасчетов), СтруктураДанные.ВалютаРасчетов, Константы.НациональнаяВалюта.Получить());
	
	Если ЗначениеЗаполнено(НовыйДокумент.Договор) Тогда 
		НовыйДокумент.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
		НовыйДокумент.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
		НовыйДокумент.ВидЦен = СтруктураДанные.ВидЦен;
		НовыйДокумент.ВидСкидкиНаценки = СтруктураДанные.ВидСкидкиНаценки;
		НовыйДокумент.СуммаВключаетНДС = СтруктураДанные.СуммаВключаетНДС;
		////ЭР Несторук С.И. 19.04.2017 9:34:50 {
		//Если СтруктураДанные.СуммаВключаетНДС <> Неопределено Тогда
		//	НовыйДокумент.НДСВключатьВСтоимость = ?(СтруктураДанные.СуммаВключаетНДС, Истина, Ложь);
		//КонецЕсли;
		////}ЭР Несторук С.И.

	КонецЕсли;
	

КонецПроцедуры // КонтрагентПриИзменении()

Функция ПолучитьДанныеКонтрагентПриИзменении(НовДокСсылка, Контрагент, Организация, Договор)
	
	//ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(НовДокСсылка, Контрагент, Организация, Перечисления.ВидыОперацийЗаказПокупателя.ES_ЗаказНаДоставку);
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"Договор",
		Договор
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		Договор.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(НовДокСсылка.Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
		"РасчетыВУсловныхЕдиницах",
		Договор.РасчетыВУсловныхЕдиницах
	);
	
	СтруктураДанные.Вставить(
		"ВидСкидкиНаценки",
		Договор.ВидСкидкиНаценки
	);
	
	СтруктураДанные.Вставить(
		"ВидЦен",
		Договор.ВидЦен
	);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНДС",
		?(ЗначениеЗаполнено(Договор.ВидЦен), Договор.ВидЦен.ЦенаВключаетНДС, Неопределено)
	);
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

Процедура ДобавитьЗаказыВОтчетОДоставке(Отчет, МассивЗаказов) Экспорт
	
	РезультатЗапроса = ES_ОбщегоНазначения.ПолучитьДанныеПоЗаказам(МассивЗаказов);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	Иначе
		СтартНастройки = ES_ОбщегоНазначения.ПолучитьВсеСтартовыеНастройки();
		Счет = СтартНастройки.ДопКассаНП;
		Касса = СтартНастройки.КассаНаложенныхПлатежей;
		
		ВыборкаЗаказ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗаказ.Следующий() Цикл
			НайтиСтроки = Отчет.Заказы.НайтиСтроки(Новый Структура("ДокументДоставки",ВыборкаЗаказ.ДокументДоставки));
			Если НайтиСтроки.Количество() > 0 Тогда Продолжить; КонецЕсли;
			НовСтр = Отчет.Заказы.Добавить();
			НовСтр.ДокументДоставки 				= ВыборкаЗаказ.ДокументДоставки;
			НовСтр.НомерНакладной   				= ВыборкаЗаказ.НомерНакладной;
			НовСтр.НомерНакладнойПредставление   	= ВыборкаЗаказ.НомерНакладной 
			+ " " +ES_ОбщегоНазначения.ВернутьСокращениеВидовДоставки(ВыборкаЗаказ.ВидДоставки,
			Неопределено, Ложь);
			;
			//НовСтр.ВхНакладная						= ВыборкаЗаказ.ВхНакладная;
			НовСтр.Заказчик							= ВыборкаЗаказ.Заказчик;
			//НовСтр.ДатаВремяДобавленияЗаказа		= ТекущаяДата();
			НовСтр.АдресДоставки					= ВыборкаЗаказ.ПолучательАдрес;
			НовСтр.СтатусЗаказа						= ?(ТипЗнч(ВыборкаЗаказ.ДокументДоставки) = Тип("ДокументСсылка.ES_ЗаборГруза"),
			Перечисления.ES_СтатусыЗаборов.Назначен,Перечисления.ES_СтатусыЗаказов.Назначен);
			НовСтр.ВидДоставки						= ВыборкаЗаказ.ВидДоставки;
			//НовСтр.ДатаДоставки 					= ВыборкаЗаказ.ДатаДоставки;
			НовСтр.НППлан 							= ВыборкаЗаказ.НППлан;
			НовСтр.СтоимостьПлан 					= ВыборкаЗаказ.СтоимостьДоставки;
			НовСтр.СвязанныйДокумент                = ВыборкаЗаказ.СвязанныйДокумент;
			НовСтр.Касса 							= Касса;
			НовСтр.Счет 							= Счет;
			НовСтр.ДатаФактическойДоставки 			= ТекущаяДатаСеанса();
			НовСтр.ВремяФактическойДоставки 		= ТекущаяДатаСеанса();

			//НовСтр.ОбщийВес							= ВыборкаЗаказ.ОбщийВес;
			//НовСтр.ОбщийОбъемныйВес					= ВыборкаЗаказ.ОбщийОбъемныйВес;
			//НовСтр.ОбщийОбъем						= ВыборкаЗаказ.ОбщийОбъем;
			//НовСтр.Длина							= ВыборкаЗаказ.Длина;
			//НовСтр.Высота							= ВыборкаЗаказ.Высота;
			//НовСтр.Ширина							= ВыборкаЗаказ.Ширина;
			//НовСтр.Мест								= ВыборкаЗаказ.КоличествоМест;
			//НовСтр.Реестр							= ВыборкаЗаказ.Реестр;
			//НовСтр.Комментарий						= ВыборкаЗаказ.Комментарий;
			//НовСтр.ПланДоставки						= ВыборкаЗаказ.ПланДоставки;
			//НовСтр.Курьер                           = ВыборкаЗаказ.Курьер;
			
			
			ВыборкаНоменклатура = ВыборкаЗаказ.Выбрать();
			
			Пока ВыборкаНоменклатура.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(ВыборкаНоменклатура.ЗапасНоменклатура) Тогда 
					Продолжить;
				КонецЕсли;
				НоваяСтрокаГрузы = Отчет.Грузы.Добавить();
				НоваяСтрокаГрузы.НомерСтрокиВЗаказе = ВыборкаНоменклатура.ЗапасНомерСтроки;
				НоваяСтрокаГрузы.Номенклатура		= ВыборкаНоменклатура.ЗапасНоменклатура;
				НоваяСтрокаГрузы.ТипНоменклатурыЗапас = ВыборкаНоменклатура.ЗапасТипНоменклатурыЗапас;
				НоваяСтрокаГрузы.Характеристика			= ВыборкаНоменклатура.ЗапасХарактеристика;
				НоваяСтрокаГрузы.Партия					= ВыборкаНоменклатура.ЗапасПартия;
				
				НоваяСтрокаГрузы.ЕдиницаИзмерения				=  ВыборкаНоменклатура.ЗапасЕдиницаИзмерения;
				НоваяСтрокаГрузы.Цена				=  ВыборкаНоменклатура.ЗапасЦена;
				
				НоваяСтрокаГрузы.ПроцентСкидкиНаценки				=  ВыборкаНоменклатура.ЗапасПроцентСкидкиНаценки;
				НоваяСтрокаГрузы.НППлан				=  ВыборкаНоменклатура.ЗапасНППлан;
				НоваяСтрокаГрузы.Содержание				=  ВыборкаНоменклатура.ЗапасСодержание;
				НоваяСтрокаГрузы.Вес				=  ВыборкаНоменклатура.ЗапасВес;
				НоваяСтрокаГрузы.Объем				=  ВыборкаНоменклатура.ЗапасОбъем;
				НоваяСтрокаГрузы.ОбъемныйВес				=  ВыборкаНоменклатура.ЗапасОбъемныйВес;
				НоваяСтрокаГрузы.ОбьявленнаяСтоимость				=  ВыборкаНоменклатура.ЗапасОбьявленнаяСтоимость;
				НоваяСтрокаГрузы.Опасность				=  ВыборкаНоменклатура.ЗапасОпасность;
				НоваяСтрокаГрузы.Артикул				=  ВыборкаНоменклатура.ЗапасАртикул;
				НоваяСтрокаГрузы.Штрихкод				=  ВыборкаНоменклатура.ЗапасШтрихкод;
				
				НоваяСтрокаГрузы.ДокументДоставки = ВыборкаНоменклатура.ДокументДоставки;
				
			КонецЦикла;
			Сообщить(НСтр("ru='Заказ "+ НовСтр.НомерНакладной+ " добавлен в документ'"));
		КонецЦикла;
		
		
	КонецЕсли;

	
КонецПроцедуры

Функция ПолучитьОсновнойДоговорКонтрагента(Организация, Контрагент, ВидДоговора = Неопределено) Экспорт
	//ЭР Несторук С.И. 14.08.2018 9:59:30 {
	
	ДоговорПоУмолчнию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ОсновныеДоговорыКонтрагента.Договор КАК Договор
	|ИЗ
	|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|ГДЕ
	|	ОсновныеДоговорыКонтрагента.Организация = &Организация
	|	И ОсновныеДоговорыКонтрагента.Контрагент = &Контрагент
	|	%УсловиеВидДоговора";
	
	Если ВидДоговора <> Неопределено Тогда
		Запрос.УстановитьПараметр("ВидДоговора", ВидДоговора);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеВидДоговора", "И ОсновныеДоговорыКонтрагента.ВидДоговора = &ВидДоговора");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеВидДоговора","");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗ = РезультатЗапроса.Выгрузить();
	
	Если ТЗ.Количество() > 0 Тогда
		
		ДоговорПоУмолчнию = ТЗ[0].Договор;
		
	КонецЕсли;
	
	Возврат ДоговорПоУмолчнию;
	
	//}ЭР Несторук С.И.	
КонецФункции

Функция ПолучитьКонтактноеЛицоКонтрагентаПоНаименованиям(ИмяКонтрагента, ИмяКонтакта) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СвязиКонтрагентКонтактСрезПоследних.Контакт КАК Контакт
		|ИЗ
		|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних(
		|			,
		|			Контакт.Наименование = &ИмяКонтакта
		|				И Контрагент.Наименование = &ИмяКонтрагента) КАК СвязиКонтрагентКонтактСрезПоследних";
	
	Запрос.УстановитьПараметр("ИмяКонтакта", ИмяКонтакта);
	Запрос.УстановитьПараметр("ИмяКонтрагента", ИмяКонтрагента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Контакт;
	КонецЦикла;
	
КонецФункции

Функция ДанныеИзБезопасногоХранилища(Владелец, ИмяБезопасноеХранилищеДанных, Ключ) Экспорт
	
	Результат = Новый Структура(Ключ);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БезопасноеХранилищеДанных.Данные КАК Данные
	|ИЗ
	|	РегистрСведений." + ИмяБезопасноеХранилищеДанных + " КАК БезопасноеХранилищеДанных
	|ГДЕ
	|	БезопасноеХранилищеДанных.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Если ЗначениеЗаполнено(РезультатЗапроса.Данные) Тогда
			СохраненныеДанные = РезультатЗапроса.Данные.Получить();
			Если ЗначениеЗаполнено(СохраненныеДанные) Тогда
				ЗаполнитьЗначенияСвойств(Результат, СохраненныеДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура СправочникНоменклатураФормаЭлементаПриСозданииНаСервере(ЭтаФорма) Экспорт
	
		/////   ЭЛЕМЕНТЫ   //////////
		
	// ******   Группа формы "ЭР_Группа"    ***********
	
	НовыйЭлемент = Этаформа.Элементы.Вставить("ES_Группа",Тип("ГруппаФормы"), ЭтаФорма.Элементы.ЛеваяКолонка);
	НовыйЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НовыйЭлемент.Заголовок = "Прочее";
	НовыйЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	НовыйЭлемент.Подсказка = "";
	НовыйЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НовыйЭлемент.ОтображатьЗаголовок = Истина;
	НовыйЭлемент.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;

	НовыйЭлемент = Этаформа.Элементы.Вставить("ES_ГруппаВес",Тип("ГруппаФормы"),Этаформа.Элементы.ES_Группа);
	НовыйЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НовыйЭлемент.Заголовок = "Группа вес";
	НовыйЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	НовыйЭлемент.Подсказка = "";
	НовыйЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	НовыйЭлемент.ОтображатьЗаголовок = Ложь;
	НовыйЭлемент.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
	
	НовыйЭлемент = Этаформа.Элементы.Вставить("ES_ВесОт",Тип("ПолеФормы"),Этаформа.Элементы.ES_ГруппаВес);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.Заголовок = "Вес от";
	НовыйЭлемент.ПутьКДанным	 = "Объект.ES_ВесОт";
	
	НовыйЭлемент = Этаформа.Элементы.Вставить("ES_ВесДо",Тип("ПолеФормы"),Этаформа.Элементы.ES_ГруппаВес);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.Заголовок = "до";
	НовыйЭлемент.ПутьКДанным	 = "Объект.ES_ВесДо";

	НовыйЭлемент = Этаформа.Элементы.Вставить("ES_Коэффициент",Тип("ПолеФормы"),Этаформа.Элементы.ES_Группа);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеПереключателя;
	НовыйЭлемент.Заголовок = "Стоимость указывается коэффициентом";
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "ES_КоэффициентПриИзменении");
	НовыйЭлемент.ПутьКДанным	 = "Объект.ES_Коэффициент";
	
	НовыйЭлемент = Этаформа.Элементы.Вставить("ES_ИспользоватьИнтервалыВеса",Тип("ПолеФормы"),Этаформа.Элементы.ES_Группа);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеПереключателя;
	НовыйЭлемент.Заголовок = "Использовать интервалы веса";
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "ES_ИспользоватьИнтервалыВесаПриИзменении");
	НовыйЭлемент.ПутьКДанным = "Объект.ES_ИспользоватьИНтервалыВеса";

	
КонецПроцедуры

Функция ПолучитьСтавкуНДСНоменклатуры(Номенклатура) Экспорт
	
	Возврат Справочники.СтавкиНДС.СтавкаНДС(Номенклатура.ВидСтавкиНДС);
	
КонецФункции

Процедура ВключитьСлужбуДоставки() Экспорт
	
	Константы.ES_СлужбаДоставки.Установить(Истина);
	
КонецПроцедуры

Функция ЗакодироватьСтрокуВДД(ИскомаяСтрока) Экспорт
		
	КодировкаФайла = "UTF8";
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	
	Запись = Новый ЗаписьТекста(ВременныйФайл, КодировкаФайла);
	Запись.Записать(ИскомаяСтрока);
	Запись.Закрыть();
	
	ДвДанные = Новый ДвоичныеДанные(ВременныйФайл);
	СтрокаHex = ПолучитьHexСтрокуИзДвоичныхДанных(ДвДанные);
	УдалитьФайлы(ВременныйФайл);
	
	Возврат СтрокаHex; 
	
КонецФункции

Функция ПроверкаИнтернет() ЭКСПОРТ
	
	Попытка
		Соединение = Новый HTTPСоединение("ya.ru");
		Данные = Соединение.Получить("/", ПолучитьИмяВременногоФайла());
		Возврат Истина;
	Исключение
		
		Возврат Ложь;
	КонецПопытки; 
	
КонецФункции

Функция	РазрешеноРедактированиеЗаказаНаДоставку() Экспорт
	
	Возврат РольДоступна("ES_РедактированиеЗаказаСбора") ИЛИ РольДоступна("ПолныеПрава");
	
КонецФункции

Функция	РазрешеноРедактированиеСтартовыхНастроек() Экспорт
	
	Возврат РольДоступна("ES_ЧтениеИзменениеОбщихОбъектовДоставки") ИЛИ РольДоступна("ПолныеПрава");
	
КонецФункции

Процедура ОбновитьПоставляемыПрофилиСлужбыДоставки(ОписанияПрофилей) Экспорт
	
	//ЭР Несторук С.И. 14.06.2019 8:56:33 {
	//ES_СлужбаДоставкиТолькоПросмотр
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "ES_СлужбаДоставкиТолькоПросмотр";
	ОписаниеПрофиля.Идентификатор = "466e7c6f-8608-4548-b505-810c2a5dec9e";//это уид профиля ES_СлужбаДоставкиТолькоПросмотр, не менять														
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'ES: Служба доставки только просмотр'");
	ОписаниеПрофиля.Роли.Добавить("ES_ДиспетчерПросмотр");
	ОписаниеПрофиля.Роли.Добавить("ES_ПросмотрВозвратов");
	ОписаниеПрофиля.Роли.Добавить("ES_ПросмотрЗаказаСбора");
	ОписаниеПрофиля.Роли.Добавить("ES_ПросмотрОбщихОбъектовДоставки");
	ОписаниеПрофиля.Роли.Добавить("ES_ПросмотрСкладскихДокументов");
	ОписаниеПрофиля.Роли.Добавить("ES_ПросмотрЦенообразования");
	ОписаниеПрофиля.Роли.Добавить("ES_ЧтениеПросмотрОбщихОбъектов");

	ОписаниеПрофиля.Описание =
	НСтр("ru = 'Профиль предназначен для просмотра объектов относящихся к подсистеме ""Служба доставки"". 
	|Профиль работает только в связке с профилем ""Продажи"".'");
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
	//ES_СлужбаДоставкиПолныеПрава
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "ES_СлужбаДоставкиПолныеПрава";
	ОписаниеПрофиля.Идентификатор = "b04d37ae-d125-4999-be54-5138dfd1a01a";//это уид профиля ES_СлужбаДоставкиПолныеПрава, не менять														
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'ES: Служба доставки полные права'");
	ОписаниеПрофиля.Роли.Добавить("ES_ДиспетчерРедактирование");
	ОписаниеПрофиля.Роли.Добавить("ES_ПрочиеОбьекты");
	ОписаниеПрофиля.Роли.Добавить("ES_РедактированиеВозвратов");
	ОписаниеПрофиля.Роли.Добавить("ES_РедактированиеЗаказаСбора");
	ОписаниеПрофиля.Роли.Добавить("ES_РедактированиеСкладскихДокументов");
	ОписаниеПрофиля.Роли.Добавить("ES_РедактированиеЦенообразования");
	ОписаниеПрофиля.Роли.Добавить("ES_ЧтениеИзменениеОбщихОбъектовДоставки");

	ОписаниеПрофиля.Описание =
	НСтр("ru = 'Профиль предназначен для работы со всеми объектами подсистемы ""Служба доставки"". 
	|Профиль работает только в связке с профилем ""Продажи"".'");
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
	//ES_РаботаСЗаказами
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "ES_РаботаСЗаказами";
	ОписаниеПрофиля.Идентификатор = "c9e3deb7-aeae-41f1-ac2d-18cc0b82e655";//это уид профиля ES_РаботаСЗаказами, не менять														
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'ES: Работа с заказами'");
	ОписаниеПрофиля.Роли.Добавить("ES_РедактированиеЗаказаСбора");
	ОписаниеПрофиля.Роли.Добавить("РедактированиеЦенДокументов");
	ОписаниеПрофиля.Роли.Добавить("ES_ЧтениеИзменениеОбщихОбъектовДоставки");

	ОписаниеПрофиля.Описание =
	НСтр("ru = 'Профиль предназначен для создания заказов на доставку и сборов в подсистеме ""Служба доставки"". 
	|Профиль работает только в связке с профилем ""Продажи"".'");
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
	//ES_Логист
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "ES_Логист";
	ОписаниеПрофиля.Идентификатор = "d5ed9ea0-241d-4438-a02a-18f8612038ce";//это уид профиля ES_Логист, не менять														
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'ES: Логист'");
	ОписаниеПрофиля.Роли.Добавить("ES_ПросмотрЗаказаСбора");
	ОписаниеПрофиля.Роли.Добавить("ES_ДиспетчерРедактирование");
	ОписаниеПрофиля.Роли.Добавить("ES_ЧтениеИзменениеОбщихОбъектовДоставки");
	ОписаниеПрофиля.Роли.Добавить("ES_ПросмотрСкладскихДокументов");
	
	ОписаниеПрофиля.Описание =
	НСтр("ru = 'Профиль предназначен для маршрутизации в подсистеме ""Служба доставки"".
	|Позволяет работать с документами ""План доставки"" и ""Отчет о доставке"".
	|Профиль работает только в связке с профилем ""Продажи"".'");
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);

	//ES_Склад
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "ES_Склад";
	ОписаниеПрофиля.Идентификатор = "c6bdb7ed-4920-4394-8ef6-156565d66065";//это уид профиля ES_Склад, не менять														
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'ES: Складской контур'");
	ОписаниеПрофиля.Роли.Добавить("ES_ПросмотрЗаказаСбора");
	ОписаниеПрофиля.Роли.Добавить("ES_ДиспетчерПросмотр");
	ОписаниеПрофиля.Роли.Добавить("ES_ЧтениеИзменениеОбщихОбъектовДоставки");
	ОписаниеПрофиля.Роли.Добавить("ES_РедактированиеСкладскихДокументов");
	
	ОписаниеПрофиля.Описание =
	НСтр("ru = 'Профиль предназначен для работы со складскими документами в подсистеме ""Служба доставки"".
	|Позволяет работать с документами ""Приемка"" и ""Перемещение"" и ""Инвентаризация"".
	|Профиль работает только в связке с профилем ""Продажи"".'");
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
	//ES_Возвраты
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "ES_Возвраты";
	ОписаниеПрофиля.Идентификатор = "45f147c3-0a1d-48f8-8b0b-2887759bf1aa"; //это уид профиля ES_Возвраты, не менять														
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'ES: Возвраты'");
	ОписаниеПрофиля.Роли.Добавить("ES_ПросмотрЗаказаСбора");
	ОписаниеПрофиля.Роли.Добавить("ES_ДиспетчерПросмотр");
	ОписаниеПрофиля.Роли.Добавить("ES_ЧтениеИзменениеОбщихОбъектовДоставки");
	ОписаниеПрофиля.Роли.Добавить("ES_РедактированиеВозвратов");
	
	ОписаниеПрофиля.Описание =
	НСтр("ru = 'Профиль предназначен для работы с возвратами заказов и платежей в подсистеме ""Служба доставки"".
	|Позволяет работать с документами ""Приемка"" и ""Перемещение"" и ""Инвентаризация"".
	|Профиль работает только в связке с профилем ""Продажи"".'");
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);

	//}ЭР Несторук С.И.
	
КонецПроцедуры
