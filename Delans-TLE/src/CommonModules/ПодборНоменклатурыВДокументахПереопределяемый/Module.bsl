
// Пользовательские настройки. Начальное заполнение.

// Процедура позволяет переопределить начальное заполнение пользовательских настроек
//
Процедура ПереопределитьНачальноеЗаполнениеНастроекПодбора(Пользователь, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры // ПереопределитьНачальноеЗаполнениеНастроекПодбора()

// Конец Пользовательские настройки. Начальное заполнение.

// Таблица использования

// Процедура описывает таблицу использований форм подбора под документам и табличным частям
//
// Форма таблицы ТаблицаИспользования:
//
// - "ИмяДокумента",		Строка (100), Имя документа;
// - "ИмяТабличнойЧасти",	Строка (100), Имя табличной части документа;
// - "ФормаПодбора", 		Строка (100), Полное имя формы подбора, которую необходимо использовать в качестве формы подбора;
//
Процедура ТаблицаИспользованияФормПодбора(ТаблицаИспользования) Экспорт
	
	// Реализация
	ПолноеИмяФормыПодбора = Обработки.ПодборРеализация.ПолноеИмяФормыПодбора();
	
	ДобавитьСтрокуИспользованияПодбора(ТаблицаИспользования, Метаданные.Документы.СчетНаОплату.Имя, Метаданные.Документы.СчетНаОплату.ТабличныеЧасти.Запасы.Имя, ПолноеИмяФормыПодбора);
	ДобавитьСтрокуИспользованияПодбора(ТаблицаИспользования, Метаданные.Документы.ЗаказПокупателя.Имя, Метаданные.Документы.ЗаказПокупателя.ТабличныеЧасти.Запасы.Имя, ПолноеИмяФормыПодбора);
	ДобавитьСтрокуИспользованияПодбора(ТаблицаИспользования, Метаданные.Документы.АктВыполненныхРабот.Имя, Метаданные.Документы.АктВыполненныхРабот.ТабличныеЧасти.РаботыИУслуги.Имя, ПолноеИмяФормыПодбора);
	ДобавитьСтрокуИспользованияПодбора(ТаблицаИспользования, Метаданные.Документы.РасходнаяНакладная.Имя, Метаданные.Документы.РасходнаяНакладная.ТабличныеЧасти.Запасы.Имя, ПолноеИмяФормыПодбора);
	ДобавитьСтрокуИспользованияПодбора(ТаблицаИспользования, Метаданные.Документы.СчетФактура.Имя, Метаданные.Документы.СчетФактура.ТабличныеЧасти.УдалитьЗапасы.Имя, ПолноеИмяФормыПодбора);
	ДобавитьСтрокуИспользованияПодбора(ТаблицаИспользования, Метаданные.Документы.ЧекККМ.Имя, Метаданные.Документы.ЧекККМ.ТабличныеЧасти.Запасы.Имя, ПолноеИмяФормыПодбора);
	
	// Поступление
	ПолноеИмяФормыПодбора = Обработки.ПодборПоступление.ПолноеИмяФормыПодбора();
	
	ДобавитьСтрокуИспользованияПодбора(ТаблицаИспользования, Метаданные.Документы.СчетНаОплатуПоставщика.Имя, Метаданные.Документы.СчетНаОплатуПоставщика.ТабличныеЧасти.Запасы.Имя, ПолноеИмяФормыПодбора);
	ДобавитьСтрокуИспользованияПодбора(ТаблицаИспользования, Метаданные.Документы.ЗаказПоставщику.Имя, Метаданные.Документы.ЗаказПоставщику.ТабличныеЧасти.Запасы.Имя, ПолноеИмяФормыПодбора);
	ДобавитьСтрокуИспользованияПодбора(ТаблицаИспользования, Метаданные.Документы.ПриходнаяНакладная.Имя, Метаданные.Документы.ПриходнаяНакладная.ТабличныеЧасти.Запасы.Имя, ПолноеИмяФормыПодбора);
	ДобавитьСтрокуИспользованияПодбора(ТаблицаИспользования, Метаданные.Документы.ПриходнаяНакладная.Имя, Метаданные.Документы.ПриходнаяНакладная.ТабличныеЧасти.Расходы.Имя, ПолноеИмяФормыПодбора);
	ДобавитьСтрокуИспользованияПодбора(ТаблицаИспользования, Метаданные.Документы.СчетФактураПолученный.Имя, Метаданные.Документы.СчетФактураПолученный.ТабличныеЧасти.УдалитьЗапасы.Имя, ПолноеИмяФормыПодбора);
	
	// Прочее
	ПолноеИмяФормыПодбора = Обработки.ПодборПеремещение.ПолноеИмяФормыПодбора();
	
	ДобавитьСтрокуИспользованияПодбора(ТаблицаИспользования, Метаданные.Документы.ПеремещениеЗапасов.Имя, Метаданные.Документы.ПеремещениеЗапасов.ТабличныеЧасти.Запасы.Имя, ПолноеИмяФормыПодбора);
	ДобавитьСтрокуИспользованияПодбора(ТаблицаИспользования, Метаданные.Документы.ПеремещениеЗапасов.Имя, Метаданные.Документы.ПеремещениеЗапасов.ТабличныеЧасти.Спецоснастка.Имя, ПолноеИмяФормыПодбора);
	ДобавитьСтрокуИспользованияПодбора(ТаблицаИспользования, Метаданные.Документы.ПеремещениеЗапасов.Имя, Метаданные.Документы.ПеремещениеЗапасов.ТабличныеЧасти.ИнвентарьИХозяйственныеПринадлежности.Имя, ПолноеИмяФормыПодбора);
	
	// Склад
	ПолноеИмяФормыПодбора = Обработки.ПодборРеализация.ПолноеИмяФормыПодбора();
	
	ДобавитьСтрокуИспользованияПодбора(ТаблицаИспользования, Метаданные.Документы.ПересортицаЗапасов.Имя, Метаданные.Документы.ПересортицаЗапасов.ТабличныеЧасти.Запасы.Имя, ПолноеИмяФормыПодбора);
	
КонецПроцедуры // ТаблицаИспользованияФормПодбора()

// Процедура добавляет в таблицу использования новую строку
//
Процедура ДобавитьСтрокуИспользованияПодбора(ТаблицаИспользования, ИмяДокумента, ИмяТабличнойЧасти, ПолноеИмяФормыПодбора)
	
	НоваяСтрока = ТаблицаИспользования.Добавить();
	
	НоваяСтрока.ИмяДокумента 		= ИмяДокумента;
	НоваяСтрока.ИмяТабличнойЧасти	= ИмяТабличнойЧасти;
	НоваяСтрока.ФормаПодбора		= ПолноеИмяФормыПодбора;
	
КонецПроцедуры // ДобавитьСтрокуИспользованияПодбора()

// Конец Таблица использования


// Полнотекстовый поиск

Функция ПоискТоваров(СтрокаПоиска, ОписаниеОшибки) Экспорт
	
	РезультатПоиска = Новый Структура;
	РезультатПоиска.Вставить("Номенклатура", Новый Массив);
	РезультатПоиска.Вставить("ХарактеристикиНоменклатуры", Новый Массив);
	
	Результат = ПолнотекстовыйПоискТоваров(СтрокаПоиска, РезультатПоиска);
	
	Если Результат = "ВыполненоУспешно" Тогда
		
		Возврат РезультатПоиска;
		
	ИначеЕсли Результат = "СлишкомМногоРезультатов" Тогда
		
		ОписаниеОшибки = НСтр("ru = 'Слишком много результатов. Уточните запрос.'");
		Возврат РезультатПоиска;
		
	ИначеЕсли Результат = "НичегоНеНайдено" Тогда
		
		ОписаниеОшибки = НСтр("ru = 'Ничего не найдено'");
		Возврат РезультатПоиска;
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Неизвестная ошибка'");
		
	КонецЕсли;
	
КонецФункции

Функция ПолнотекстовыйПоискТоваров(СтрокаПоиска, РезультатПоиска)
	
	МассивШтрихкодов = Новый Массив;
	
	// Поиск данных
	РазмерПорции = 200;
	ОбластьПоиска = Новый Массив;
	ОбластьПоиска.Добавить(Метаданные.Справочники.Номенклатура);
	ОбластьПоиска.Добавить(Метаданные.Справочники.ХарактеристикиНоменклатуры);
	ОбластьПоиска.Добавить(Метаданные.РегистрыСведений.ДополнительныеСведения);
	ОбластьПоиска.Добавить(Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры);
	
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоиска, РазмерПорции);
	СписокПоиска.ПолучатьОписание = Ложь;
	СписокПоиска.ОбластьПоиска = ОбластьПоиска;
	СписокПоиска.ПерваяЧасть();
	
	Если СписокПоиска.СлишкомМногоРезультатов() Тогда
		
		Возврат "СлишкомМногоРезультатов";
		
	КонецЕсли;
	
	Если СписокПоиска.ПолноеКоличество() = 0 Тогда
		
		Возврат "НичегоНеНайдено";
		
	КонецЕсли;
	
	Пока Истина Цикл
		
		Для Каждого Элемент Из СписокПоиска Цикл
			
			Если Элемент.Метаданные = Метаданные.Справочники.Номенклатура Тогда
				
				РезультатПоиска.Номенклатура.Добавить(Элемент.Значение);
				
			ИначеЕсли Элемент.Метаданные = Метаданные.Справочники.ХарактеристикиНоменклатуры Тогда
				
				РезультатПоиска.ХарактеристикиНоменклатуры.Добавить(Элемент.Значение);
				
			ИначеЕсли Элемент.Метаданные = Метаданные.РегистрыСведений.ДополнительныеСведения Тогда
				
				Если ТипЗнч(Элемент.Значение.Объект) = Тип("СправочникСсылка.Номенклатура") Тогда
					
					РезультатПоиска.Номенклатура.Добавить(Элемент.Значение.Объект);
					
				КонецЕсли;
				
			ИначеЕсли Элемент.Метаданные = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры Тогда
				
				МассивШтрихкодов.Добавить(Элемент.Значение.Штрихкод);
				
			Иначе
				
				ВызватьИсключение НСтр("ru = 'Неизвестная ошибка'");
				
			КонецЕсли;
			
		КонецЦикла;
		
		Попытка
			
			// Работать с общим размером выборки нельзя, так как он динамичен:
			// - пока мы обрабатываем результат может пройти операция обновления индекса
			//   поэтому работаем до первого исключения, после выходим с полученными данными.
			СписокПоиска.СледующаяЧасть();
			
		Исключение
			
			Прервать;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если МассивШтрихкодов.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод В(&МассивШтрихкодов)
		|	И ШтрихкодыНоменклатуры.Номенклатура ССЫЛКА Справочник.Номенклатура";
		
		Запрос.УстановитьПараметр("МассивШтрихкодов", МассивШтрихкодов);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			РезультатПоиска.Номенклатура.Добавить(Выборка.Номенклатура);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат "ВыполненоУспешно";
	
КонецФункции

// Конец Полнотекстовый поиск

// Контекстный поиск

Функция МассивыОтборовНоменклатурыИХарактеристик(ТекстПоиска) Экспорт
	
	СтруктураМассивов = Новый Структура;
	
	СтруктураМассивов.Вставить("Номенклатура", СформироватьМассивОтбораПоНоменклатуре(ТекстПоиска));
	СтруктураМассивов.Вставить("ХарактеристикиНоменклатуры", СформироватьМассивОтбораПоХарактеристикам(ТекстПоиска));
	
	Возврат СтруктураМассивов;
	
КонецФункции

Функция СформироватьМассивОтбораПоНоменклатуре(ТекстПоиска)
	
	ТекстЗапроса = 
	"Выбрать СпрНоменклатура.Ссылка КАК НоменклатураСсылка
	|Из Справочник.Номенклатура КАК СпрНоменклатура
	|Где СпрНоменклатура.Наименование ПОДОБНО &ТекстПоиска
	|Объединить
	|Выбрать СпрНоменклатура.Ссылка КАК НоменклатураСсылка
	|Из Справочник.Номенклатура КАК СпрНоменклатура
	|Где СпрНоменклатура.НаименованиеПолное ПОДОБНО &ТекстПоиска
	|Объединить
	|Выбрать СпрНоменклатура.Ссылка КАК НоменклатураСсылка
	|Из Справочник.Номенклатура КАК СпрНоменклатура
	|Где СпрНоменклатура.Артикул ПОДОБНО &ТекстПоиска
	|Объединить
	|Выбрать СпрНоменклатура.Ссылка КАК НоменклатураСсылка
	|Из Справочник.Номенклатура КАК СпрНоменклатура
	|Где СпрНоменклатура.Комментарий ПОДОБНО &ТекстПоиска
	|Объединить
	|Выбрать СпрНоменклатура.Ссылка КАК НоменклатураСсылка
	|Из Справочник.Номенклатура КАК СпрНоменклатура
	|Где СпрНоменклатура.ЦеноваяГруппа.Наименование ПОДОБНО &ТекстПоиска";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТекстПоиска", "%" + ТекстПоиска + "%");
	ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаНоменклатуры.ВыгрузитьКолонку("НоменклатураСсылка");
	
КонецФункции

Функция СформироватьМассивОтбораПоХарактеристикам(ТекстПоиска)
	
	ТекстЗапроса = 
	"Выбрать СпрХарактеристики.Ссылка КАК ХарактеристикаСсылка
	|Из Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
	|Где СпрХарактеристики.Наименование ПОДОБНО &ТекстПоиска";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТекстПоиска", "%" + ТекстПоиска + "%");
	ТаблицаХарактеристик = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаХарактеристик.ВыгрузитьКолонку("ХарактеристикаСсылка");
	
КонецФункции

// Конец Контекстный поиск

Функция ВидЦенСчетФактуры(Контрагент, ДоговорКонтрагента, Входящий = Истина) Экспорт
	
	ВидЦен = Неопределено;
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		
		ВидЦен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, ?(Входящий, "ВидЦенКонтрагента", "ВидЦен"));
		
	ИначеЕсли ЗначениеЗаполнено(Контрагент) Тогда
		
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			
			ВидЦен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, ?(Входящий, "ВидЦенКонтрагента", "ВидЦен"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидЦен
	
КонецФункции
