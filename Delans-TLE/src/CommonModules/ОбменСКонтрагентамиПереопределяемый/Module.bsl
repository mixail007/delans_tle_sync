
// Проверка выполнения условия для утверждения документа.
//
// Параметры:
//  ЭлектронныйДокумент - Ссылка - ссылка на электронный документ.
//  Готов - Булево - заполняемый процедурой признак.
//
Процедура ЭлектронныйДокументГотовКУтверждению(ЭлектронныйДокумент, Готов) Экспорт
	
КонецПроцедуры

// Определение имен связей параметров выбора для полей форм библиотеки, в которые выбирается договор контрагента.
//
// Параметры:
//  ИмяСвязиПоОрганизации  - Строка - Имя связи параметров выбора для связанного поля "Организация",
//                                    если значение не будет установлено, то связь параметров выбора не будет установлена.
//  ИмяСвязиПоКонтрагенту  - Строка - Имя связи параметров выбора для связанного поля "Контрагент",
//                                    если значение не будет установлено, то связь параметров выбора не будет установлена.
//
Процедура УстановитьИменаСвязейПараметровВыбораДоговорКонтрагента(ИмяСвязиПоОрганизации, ИмяСвязиПоКонтрагенту) Экспорт

КонецПроцедуры

// Заполнение состояния ЭДО.
//
// Параметры:
//  Форма - Форма - текущая форма.
//
Процедура ЗаполнитьСостояниеЭДО(Форма) Экспорт
	
КонецПроцедуры

// Процедура - Переопределяет заполнение таблицы соответствия видов ЭД и способов обработки по имени профиля,
//			   который используется в форме настройки ЭДО на закладке "Входящие электронные документы".
//
// Параметры:
//  ТаблицаПрофиля	 - ТаблицаЗначений - таблица, содержащая соответствие видов электронных документов и способов обработки
//  Профиль			 - Строка - имя профиля настроек: "Автоматически", "Вручную", "Поставщик", "Покупатель".
//
Процедура ТаблицаПредопределенногоПрофиля(ТаблицаПрофиля,Профиль) Экспорт 
	
КонецПроцедуры 

// Ищет документ владелец электронного документа, который мог быть получен через ЕГАИС.
//
// Параметры:
//  Документ - ДокументСсылка - Ссылка на документ, полученный через ЕГАИС.
//  ИдентификаторДокумента - Строка - Идентификатор документа отправителя.
//
Процедура НайтиРанееПолученныйДокумент(Документ, ИдентификаторДокумента) Экспорт
	
	
	
КонецПроцедуры

#Область Права

// Выполняется при проверке прав пользователя на операции чтения электронных документов.
//
// Параметры:
//  ЕстьПраво - Булево - признак наличия права чтения данных. Для изменения. По умолчанию Истина.
//
Процедура ПриПроверкеПраваЧтенияЭлектронныхДокументов(ЕстьПраво) Экспорт
	
КонецПроцедуры

// Выполняется при проверке прав пользователя на операции добавления и изменения электронных документов.
//
// Параметры:
//  ЕстьПраво - Булево - признак наличия права добавления и изменения данных. Для изменения. По умолчанию Истина.
//
Процедура ПриПроверкеПраваОбработкиЭлектронныхДокументов(ЕстьПраво) Экспорт
	
КонецПроцедуры

#КонецОбласти

// Описывает действия, которые нужно выполнить после формирования электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент	 - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ.
//
Процедура ЭлектронныйДокументСформирован(ЭлектронныйДокумент) Экспорт
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентамиПереопределяемый: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Заполняет массив актуальными видами электронных документов для прикладного решения.
//
// Параметры:
//  Массив - виды актуальных ЭД.
//
Процедура ПолучитьАктуальныеВидыЭД(Массив) Экспорт
	
	Массив.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	Массив.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
	Массив.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	Массив.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
	Массив.Добавить(Перечисления.ВидыЭД.ЗаказТовара);
	Массив.Добавить(Перечисления.ВидыЭД.ОтветНаЗаказ);
	Массив.Добавить(Перечисления.ВидыЭД.КаталогТоваров);
	Массив.Добавить(Перечисления.ВидыЭД.СчетФактура);
	Массив.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	Массив.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	Массив.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	Массив.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
	Массив.Добавить(Перечисления.ВидыЭД.СчетНаОплату);
	
КонецПроцедуры

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - объекта либо ссылка документа/справочника-источника.
//  ПараметрыЭД - структура параметров источника, необходимых для определения
//                настроек обмена ЭД. Обязательные параметры: НаправлениеЭД, ВидЭД,
//                Контрагент, СоглашениеЭД или Организация.
//  ФорматCML - булево, если истина, то для формирования ЭД будут использоваться схемы CML (не ФНС),
//    в параметрах должны быть указаны соответствующие виды ЭД.
//
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД, ФорматCML = Ложь) Экспорт
	
	ТипИсточника = ТипЗнч(Источник);
	
	Если ТипИсточника = Тип("ДокументСсылка.РасходнаяНакладная") 
		ИЛИ ТипИсточника = Тип("ДокументОбъект.РасходнаяНакладная") Тогда
		
		Если ФорматCML Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
		Иначе
			ПараметрыЭД.ВидЭД = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ВидЭлектронногоДокументаРеализации(Источник);
		КонецЕсли;
		
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПриходнаяНакладная")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПриходнаяНакладная") Тогда
		
		Если НЕ ЗначениеЗаполнено(ПараметрыЭД.ВидЭД) Тогда
			Если ФорматCML Тогда
				Если Источник.Запасы.Количество() > 0 Тогда
					ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
				Иначе
					ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот;
				КонецЕсли;
			Иначе
				Если Источник.Запасы.Количество() > 0 Тогда
					ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
				Иначе
					ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
			ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Иначе
			ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		КонецЕсли;
		
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КорректировкаРеализации")
		 ИЛИ ТипИсточника = Тип("ДокументОбъект.КорректировкаРеализации") Тогда
		
		ПараметрыЭД.ВидЭД = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ВидЭлектронногоДокументаКорректировки(Источник);
		
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КорректировкаПоступления") 
		 ИЛИ ТипИсточника = Тип("ДокументОбъект.КорректировкаПоступления") Тогда
		 
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетНаОплату")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетНаОплату") Тогда
		
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетНаОплатуПоставщика")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетНаОплатуПоставщика") Тогда
		
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЗаказПоставщику")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЗаказПоставщику") Тогда 
		
		ПараметрыЭД.ВидЭД =  Перечисления.ВидыЭД.ЗаказТовара;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
		
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ВидОперации");
		Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
			ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ВидЭлектронногоДокумента");
			Если Не ЗначениеЗаполнено(ВидЭД) Тогда
				ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
			КонецЕсли;
			ПараметрыЭД.ВидЭД = ВидЭД;
		Иначе
			ПараметрыЭД.ВидЭД =  Перечисления.ВидыЭД.ОтветНаЗаказ;
		КонецЕсли;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
	
	ИначеЕсли ТипИсточника = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД")
		ИЛИ ТипИсточника = Тип("СправочникОбъект.СоглашенияОбИспользованииЭД") Тогда
		
		ПараметрыЭД.ВидЭД =  Перечисления.ВидыЭД.КаталогТоваров;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактура") 
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактура") Тогда
		
		Если УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЭтоКорректировочныйДокумент(Источник) Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		Иначе
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
		
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураПолученный") 
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
		
		Если УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЭтоКорректировочныйДокумент(Источник) Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		Иначе
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
		
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.АктВыполненныхРабот") 
		ИЛИ ТипИсточника = Тип("ДокументОбъект.АктВыполненныхРабот") Тогда
		
		ПараметрыЭД.ВидЭД =  Перечисления.ВидыЭД.АктИсполнитель;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.Договор;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Определение соответствий объектов библиотеки ЭД и прикладного решения

// Определяет имя реквизита владельца справочника НоменклатураПоставщика.
//
// Параметры:
//  ИмяРеквизитаВладельца - строка - имя реквизита владельца.
//
Процедура ОпределитьИмяРеквизитаВладельцаНоменклатурыПоставщиков(ИмяРеквизитаВладельца) Экспорт
	
	ИмяРеквизитаВладельца = "Контрагент";
	
КонецПроцедуры

// Получает значение перечисления по имени объектов метаданных.
// 
// Параметры:
//  СоответствиеПеречислений - соответствие библиотечных и прикладных перечислений.
//
Процедура ПолучитьСоответствиеПеречислений(СоответствиеПеречислений) Экспорт
	
	СоответствиеПеречислений.Вставить("ЮридическоеФизическоеЛицо", "ЮридическоеФизическоеЛицо");
	
КонецПроцедуры

// Возвращает список имен документов доступных для создания при загрузке электронного документа.
//
// Параметры:
//  ВидЭД			 - Перечисление.ВидыЭД - вид электронного документа
//  СписокСпособовОбработки - Строка - список для добавления операций по отражению электронного документа.
//
Процедура СписокОперацийВидаЭД(ВидЭД,СписокСпособовОбработки) Экспорт 
	
	Если ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		
		СписокСпособовОбработки.Добавить("ПриходнаяНакладная", НСтр("ru = 'Приходная накладная'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
		
		СписокСпособовОбработки.Добавить("ПриходнаяНакладная", НСтр("ru = 'Приходная накладная'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		
		СписокСпособовОбработки.Добавить("КорректировкаПоступления", НСтр("ru = 'Корректировка поступления'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		
		СписокСпособовОбработки.Добавить("ПриходнаяНакладная", НСтр("ru = 'Приходная накладная'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		
		СписокСпособовОбработки.Добавить("НоменклатураПоставщиков", НСтр("ru = 'Номенклатура поставщиков'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		
		СписокСпособовОбработки.Добавить("ЗаказПоставщику", НСтр("ru = 'Заказ поставщику'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда	
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		
		СписокСпособовОбработки.Добавить("ЗаказПокупателя", НСтр("ru = 'Заказ покупателя'"),Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		
		СписокСпособовОбработки.Добавить("СчетФактураПолученный", НСтр("ru = 'Счет-фактура (полученный)'"),Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		
		СписокСпособовОбработки.Добавить("СчетФактураПолученный", НСтр("ru = 'Счет-фактура (полученный)'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		
		СписокСпособовОбработки.Добавить("СчетНаОплатуПоставщика", НСтр("ru = 'Счет на оплату (полученный)'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12 Тогда
		
		СписокСпособовОбработки.Добавить("ПриходнаяНакладная", НСтр("ru = 'Приходная накладная'"), Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - переопределяет имя объекта метаданных для способа обработки входящего электронного документа,
//			   по-умолчанию совпадает с именем способа обработки.
//
// Параметры:
//  СпособОбработки - Строка - один из доступных способов обработки входящего документа
//  ИмяДокумента - Строка - переменная в которую будет помещено имя объекта метаданных, соответствующее переданному способу обработки.
//
Процедура ИмяДокументаПоСпособуОбработки(СпособОбработки,ИмяДокумента) Экспорт 
	
	
	
КонецПроцедуры

// Заполняет соответствие исходящих видов электронных документов и представлений документов информационной базы,
// на основании которых они формируются.
//
// Параметры:
//  СоответствиеВидовЭДДокументамИБ - Соответствие - перечень видов электронных документов.
//    - Соответствие - с свойствами:
//    * Ключ             - Перечисление.ВидыЭД - вид электронного документа.
//    * Значение         - Строка - представление документа информациионной базы (хоз. операции).
//
Процедура СоответствиеИсходящихВидовЭДДокументамИБ(СоответствиеВидовЭДДокументамИБ) Экспорт 
	
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ТОРГ12Продавец,         НСтр("ru = 'Реализация товаров'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.АктИсполнитель,         НСтр("ru = 'Реализация услуг'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.АктНаПередачуПрав,      НСтр("ru = 'Акт на передачу прав'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.СчетФактура,            НСтр("ru = 'Счет-фактура'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель, НСтр("ru = 'Корректировка реализации'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.КорректировочныйСчетФактура, НСтр("ru = 'Счет-фактура (корректировка)'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.КаталогТоваров,         НСтр("ru = 'Справочник Настройка ЭДО'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ОтветНаЗаказ,           НСтр("ru = 'Заказ поставщику'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ЗаказТовара,            НСтр("ru = 'Заказ покупателя'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ПрайсЛист,              НСтр("ru = 'Справочник Настройка ЭДО'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.СчетНаОплату,           НСтр("ru = 'Счет на оплату'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара, "");
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара, "");
	
КонецПроцедуры

Процедура УстановленоСостояниеОбменЗавершен(ОснованияЭлектронногоДокумента) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Настройка обмена

Процедура ДополнительнаяАналитикаКонтрагентовСправочникПартнеры(ИспользуетсяСправочникПартнеры) Экспорт
	
	ИспользуетсяСправочникПартнеры = Ложь;
	
КонецПроцедуры

// Процедура возвращает признак использования справочника "Характеристики номенклатуры" в качестве
// дополнительной аналитики к справочнику Номенклатура.
//
// Параметры:
//  ИспользуетсяСправочникХарактеристикиНоменклатуры - Булево - флаг использования в библиотеке справочника "Характеристики номенклатуры".
//
Процедура ДополнительнаяАналитикаСправочникХарактеристикиНоменклатуры(ИспользуетсяСправочникХарактеристикиНоменклатуры) Экспорт
	
	ИспользуетсяСправочникХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	
КонецПроцедуры

// Процедура возвращает признак использования справочника "Упаковка номенклатуры" в качестве
// дополнительной аналитики к справочнику Номенклатура.
//
// Параметры:
//  ИспользуетсяСправочникУпаковкиНоменклатуры - Булево - флаг использования справочника "Упаковки номенклатуры".
//
Процедура ДополнительнаяАналитикаСправочникУпаковкиНоменклатуры(ИспользуетсяСправочникУпаковкиНоменклатуры) Экспорт
	
	ИспользуетсяСправочникУпаковкиНоменклатуры = Ложь;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Формирование данных для электронных документов

// Работа с деревом

// Подготавливает данные для электронного документа типа КаталогТоваров формата CML 2.
//
// Параметры:
//  Организация - СправочникСсылка - ссылка на объект информационной базы, по которому необходимо
//                                   создать электронный документ.
//  ТоварыКаталога - Массив - список товаров для заполнения каталога.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоКаталогуТоваровCML(Организация, ТоварыКаталога, ДеревоДанных, Отказ) Экспорт
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержитТолькоИзменения", Истина);
	
	СведенияОбОрганизации = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЮрФизЛица(Организация);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбОрганизации, "Владелец", "Произвольный");
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТоварыКаталога, "Товары");
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа СоглашениеОбИзмененииСтоимостиПолучатель.
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоКорректировочномуДокументуПолучатель(СсылкаНаЭД, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияГруза", ТекущаяДатаСеанса());
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПередачаТоваровПродавец.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПередачаТоваровПродавец(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	Если СсылкаНаОбъект.ВидОперации <> Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю
		И СсылкаНаОбъект.ВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд
		И СсылкаНаОбъект.ВидОперации <> Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя создать электронный документ для вида операции ""%1""!'"), СсылкаНаОбъект.ВидОперации);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	ДанныеДляПечати = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеДляТОРГ12(СсылкаНаОбъект);
	
	Если ТипЗнч(СсылкаНаОбъект)=Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ВидОперации = Перечисления.ВидыОперацийЭД.Исправление;
	Иначе
		ВидОперации = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
	КонецЕсли;
	
	РеквизитыШапки = ДанныеДляПечати.ДанныеШапки;
	ТабличнаяЧасть = ДанныеДляПечати.ТаблицаДокумента;
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной", ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(РеквизитыШапки.НомерДокумента));
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной",  РеквизитыШапки.ДатаДокумента);
	
	Если ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",	РеквизитыШапки.НомерИсправления);
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",	РеквизитыШапки.ДатаИсправления);
	КонецЕсли;
	
	// Вывод общих реквизитов шапки
	СведенияОПоставщике       = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.ДатаДокумента, РеквизитыШапки.БанковскийСчет);
	СведенияОГрузоотправителе = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузоотправитель, РеквизитыШапки.ДатаДокумента);
	СведенияОПокупателе       = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.ДатаДокумента);
	СведенияОГрузополучателе  = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузополучатель,  РеквизитыШапки.ДатаДокумента);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике,       "Поставщик");
	Если РеквизитыШапки.Организация <> РеквизитыШапки.Грузоотправитель Тогда
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОГрузоотправителе, "Грузоотправитель");
	КонецЕсли;
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе,       "Плательщик");
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОГрузополучателе,  "Грузополучатель");
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", РеквизитыШапки.ВалютаКод);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", ВидОперации);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьОснования(ДеревоДанных, РеквизитыШапки);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьТранспортнуюНакладную(ДеревоДанных, РеквизитыШапки);
	
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики");
	ТаблицаТоваров.Колонки.Добавить("Описание");
	ТаблицаТоваров.Колонки.Добавить("Сорт");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("КодТовара");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("ВидУпаковки");
	ТаблицаТоваров.Колонки.Добавить("КоличествоВОдномМесте");
	ТаблицаТоваров.Колонки.Добавить("КоличествоМест");
	ТаблицаТоваров.Колонки.Добавить("МассаБрутто");
	ТаблицаТоваров.Колонки.Добавить("МассаНетто");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.ЕдиницаИзмеренияНаименование = Строка.ЕдиницаИзмерения;
		
		НоваяСтрока.Описание = Строка.Содержание;
		
		Коэффициент = 1;
		Если ТипЗнч(Строка.ЕдиницаИзмеренияДокумент) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			Коэффициент = Строка.ЕдиницаИзмеренияДокумент.Коэффициент;
		КонецЕсли;
		
		НоваяСтрока.МассаНетто = Окр(Строка.Количество * Коэффициент, 3);
		НоваяСтрока.Цена = Окр(Строка.Сумма / ?(НоваяСтрока.МассаНетто = 0, 1, НоваяСтрока.МассаНетто), 2);
		НоваяСтрока.СуммаБезНДС = Строка.Сумма - ?(РеквизитыШапки.СуммаВключаетНДС, Строка.СуммаНДС, 0);
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров, "ЕдиницаИзмеренияНаименование",,,
		НСтр("ru = 'Не заполнена наименование единицы измерения в справочнике ""Номенклатура"".'"));
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров, "БазоваяЕдиницаКод",,,
		НСтр("ru = 'Не заполнен код единицы измерения в справочнике ""Номенклатура"".'"));
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
	
	// Инициализация итогов по документу.
	ИтоговыеСуммы = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.РассчитатьИтоговыеСуммыДокумента(ТаблицаТоваров);
			
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ДатаОтпуска",
			РеквизитыШапки.ДатаДокумента);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписей",
			ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.ВсегоМест",
			ИтоговыеСуммы.ИтогоМест);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.МассаГрузаНетто",
			ИтоговыеСуммы.ИтогоМассаНетто);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.МассаГрузаБрутто",
			ИтоговыеСуммы.ИтогоМассаБрутто);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.КоличествоМест",
			ИтоговыеСуммы.ИтогоМест);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.МассаБрутто",
			ИтоговыеСуммы.ИтогоМассаБрутто);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.МассаНетто",
			ИтоговыеСуммы.ИтогоМассаНетто);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.СуммаБезНДС",
			ИтоговыеСуммы.ИтогоСуммаБезНДС);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.СуммаНДС",
			ИтоговыеСуммы.ИтогоНДС);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.СуммаСНДС",
			ИтоговыеСуммы.ИтогоСуммаСНДС);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПередачаРаботИсполнитель.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПередачаРаботИсполнитель(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	ДанныеДокумента = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеАктВыполненныхРабот(СсылкаНаОбъект);
	
	РеквизитыШапки  = ДанныеДокумента.РеквизитыШапки;
	ТабличнаяЧасть = ДанныеДокумента.ТаблицаРабот;
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Документ не содержит данных для формирования ЭД ""%1""'"),
			СтруктураЭД.ВидЭД);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерАкта",   РеквизитыШапки.НомерДокумента);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаАкта",    РеквизитыШапки.ДатаДокумента);
	
	Если ТипЗнч(СсылкаНаОбъект)=Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ВидОперации = Перечисления.ВидыОперацийЭД.Исправление;
	Иначе
		ВидОперации = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",	РеквизитыШапки.НомерИсправления);
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",	РеквизитыШапки.ДатаИсправления);
	КонецЕсли;
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", ВидОперации);
	Если ЗначениеЗаполнено(РеквизитыШапки.ВалютаКод) Тогда
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", РеквизитыШапки.ВалютаКод);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыШапки.ВалютаНаименование) Тогда
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаНаименование", РеквизитыШапки.ВалютаНаименование);
	КонецЕсли;
	
	ТекстЗаголовка = "Мы, нижеподписавшиеся, представитель ИСПОЛНИТЕЛЯ, с одной стороны и представитель ЗАКАЗЧИКА с другой"
		+ " стороны, составили настоящий акт в том, что ИСПОЛНИТЕЛЬ выполнил, а ЗАКАЗЧИК принял следующие работы (услуги).";
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Заголовок", ТекстЗаголовка);
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация,  РеквизитыШапки.ДатаДокумента);
	СведенияОПокупателе       = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.ДатаДокумента);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "Исполнитель");
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе, "Заказчик");
	
	Если ЗначениеЗаполнено(РеквизитыШапки.ДокументОснование) Тогда
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ДокументыОснования",
									РеквизитыШапки.ДокументОснование);
	КонецЕсли;
								
	// Данные договора
	ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СсылкаНаОбъект,
		"Договор.НомерДоговора, Договор.ДатаДоговора, Договор.Наименование");
	Основания = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПодготовитьТаблицуДанныхДоговора(
		НСтр("ru = 'Договор'"),
		ДанныеОснования.ДоговорНомерДоговора,
		ДанныеОснования.ДоговорДатаДоговора);
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(Основания, "ДокОснованиеДата",,,
		НСтр("ru = 'Необходимо указать дату договора.'"));
	Если Основания.Количество() > 0 Тогда
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, Основания, "Основание");
	КонецЕсли;
	
	ТаблицаУслуг = Новый ТаблицаЗначений();
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаУслуг.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаУслуг.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Цена");
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС");
	ТаблицаУслуг.Колонки.Добавить("СтавкаНДС");
	ТаблицаУслуг.Колонки.Добавить("СуммаНДС");
	ТаблицаУслуг.Колонки.Добавить("СуммаСНДС");
	ТаблицаУслуг.Колонки.Добавить("Описание");
	ТаблицаУслуг.Колонки.Добавить("ДокументОснование");
	ТаблицаУслуг.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаУслуг.Колонки.Добавить("ДопДанныеНеПодписанные");
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			ТекстСообщения = НСтр("ru='В строке %1 табличной части %2 не заполнена номенклатура. Для передачи электронного документа заполнение номенклатуры обязательно.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.НомерСтроки, Строка.ИмяТабличнойЧасти);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СсылкаНаОбъект);
			Продолжить;
		КонецЕсли;
		
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.Сумма + Строка.СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Коэффициент = 1;
		Если ТипЗнч(Строка.ЕдиницаИзмеренияДокумент) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			Коэффициент = Строка.ЕдиницаИзмеренияДокумент.Коэффициент;
		КонецЕсли;
		
		СтрокаТаблицыДокумента = ТаблицаУслуг.Добавить();
	
		СтрокаТаблицыДокумента.Номенклатура                 = Строка.Номенклатура;
		СтрокаТаблицыДокумента.НаименованиеНоменклатуры = Строка.НаименованиеНоменклатуры;
		СтрокаТаблицыДокумента.Описание                 = Строка.Содержание;
		СтрокаТаблицыДокумента.ЕдиницаИзмеренияКод          = ?(ЗначениеЗаполнено(Строка.ЕдиницаИзмерения), СокрЛП(Строка.ЕдиницаИзмеренияКод), "796");
		СтрокаТаблицыДокумента.ЕдиницаИзмеренияНаименование = Строка.ЕдиницаИзмеренияНаименование;
		СтрокаТаблицыДокумента.Количество                   = Строка.Количество * Коэффициент;
		
		СтрокаТаблицыДокумента.СуммаБезНДС     = Строка.Сумма - ?(РеквизитыШапки.СуммаВключаетНДС, Строка.СуммаНДС, 0);
		СтрокаТаблицыДокумента.СуммаСНДС       = Строка.Всего;
		СтрокаТаблицыДокумента.СтавкаНДС       = Строка.СтавкаНДС;
		СтрокаТаблицыДокумента.СуммаНДС        = Строка.СуммаНДС;
		СтрокаТаблицыДокумента.Цена            = ?(СтрокаТаблицыДокумента.Количество = 0, СтрокаТаблицыДокумента.СуммаБезНДС, Окр(Строка.Сумма/СтрокаТаблицыДокумента.Количество,2));
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаУслуг, "ЕдиницаИзмеренияНаименование",,,
		НСтр("ru = 'Не заполнена наименование единицы измерения в справочнике ""Номенклатура"".'"));
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаУслуг, "ЕдиницаИзмеренияКод",,,
		НСтр("ru = 'Не заполнен код единицы измерения в справочнике ""Номенклатура"".'"));
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаУслуг, "Количество",,,
		НСтр("ru = 'Не заполнено количество в табличной части документа.'"));
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаУслуг, "ТаблицаУслуг");
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.НачалоРабот", РеквизитыШапки.ДатаДокумента);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.КонецРабот",  РеквизитыШапки.ДатаДокумента);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаБезНДСИтого",
		ТаблицаУслуг.Итог("СуммаБезНДС"));
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаНДСИтого",
		ТаблицаУслуг.Итог("СуммаНДС"));
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаСНДСИтого",
		ТаблицаУслуг.Итог("СуммаСНДС"));
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоВыполнениюУслуг.ДатаИсполнения",
		РеквизитыШапки.ДатаДокумента);
	
КонецПроцедуры

// Работа со структурой данных ФНС

// Подготавливает данные для электронного документа типа УПД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляУПДИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактура") Тогда
		СчетФактура = СсылкаНаОбъект;
	Иначе
		СтруктураРезультат = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(СсылкаНаОбъект, Ложь);
		Если СтруктураРезультат <> Неопределено Тогда
			СчетФактура = СтруктураРезультат.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СчетФактура) Тогда
		ТекстСообщения = НСтр("ru = 'Для формирования универсального передаточного документа счет-фактура должна быть заполнена.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ДанныеДляФормированияЭД = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеСчетФактуры(СчетФактура);
	
	ЭтоКомиссионнаяТорговля = Ложь;
	Если ДанныеДляФормированияЭД.Свойство("ДокументыОснования") И ДанныеДляФормированияЭД.ДокументыОснования.Количество() > 0 Тогда
		ЭтоКомиссионнаяТорговля = (ТипЗнч(ДанныеДляФормированияЭД.ДокументыОснования[0]) = Тип("ДокументСсылка.ОтчетКомитенту")
			ИЛИ ТипЗнч(ДанныеДляФормированияЭД.ДокументыОснования[0]) = Тип("ДокументСсылка.ОтчетКомиссионера"));
	КонецЕсли;
	
	Если ЭтоКомиссионнаяТорговля Тогда
		СтруктураЭД.Функция = "СЧФ";
	КонецЕсли;
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеСчетаФактурыУПД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	
	ВидСчетаФактуры = ДанныеДляФормированияЭД.РеквизитыШапки.ВидОперации;
	Если ВидСчетаФактуры <> Перечисления.ВидыОперацийСчетФактура.Аванс
		И ВидСчетаФактуры <> Перечисления.ВидыОперацийСчетФактура.НаАвансКомитента
		И Не ЭтоКомиссионнаяТорговля Тогда
		
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеПервичногоДокументаУПД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
		
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УПД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляДОПИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		ДанныеДляФормированияЭД = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеРеализацииТоваровИУслуг(СсылкаНаОбъект);
	Иначе
		ДанныеДляФормированияЭД = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеАктВыполненныхРабот(СсылкаНаОбъект);
		ДанныеДляФормированияЭД.Вставить("ТаблицаТоваров", ДанныеДляФормированияЭД.ТаблицаРабот);
	КонецЕсли;
	
	ДокументыОснования = Новый Массив;
	ДокументыОснования.Добавить(СсылкаНаОбъект);
	ДанныеДляФормированияЭД.Вставить("ДокументыОснования", ДокументыОснования);
	
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеПервичногоДокументаУПД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УПД (информация покупателя).
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляУПДИнформацииПокупателяФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецЭД", СтруктураЭД.ВладелецЭД);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование) = ТИП(Документ.ПриходнаяНакладная)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Порядок
	|ПОМЕСТИТЬ ВТОснование
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
	|ГДЕ
	|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка = &ВладелецЭД
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Дата КАК Дата,
	|	ПоступлениеТоваровУслуг.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	ПоступлениеТоваровУслуг.Запасы.(
	|		НомерСтроки КАК НомерСтроки
	|	) КАК Запасы,
	|	ПоступлениеТоваровУслуг.Расходы.(
	|		НомерСтроки КАК НомерСтроки
	|	) КАК Расходы
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ПоступлениеТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОснование КАК ВТОснование
	|		ПО ПоступлениеТоваровУслуг.Ссылка = ВТОснование.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураПолученный.Дата КАК Дата,
	|	СчетФактураПолученный.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОснование КАК ВТОснование
	|		ПО СчетФактураПолученный.Ссылка = ВТОснование.ДокументОснование";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	СодержаниеОперации =			 "-";
	ДатаПолученияТоваров =			 ТекущаяДатаСеанса();
	ОрганизацияНаименованиеПолное =	 "-";
	Если Не РезультатЗапроса[1].Пустой() Тогда // В основаниях есть документ поступления
		
		Выборка = РезультатЗапроса[1].Выбрать();
		Выборка.Следующий();
		СоставСодержания = Новый Массив;
		Если Не Выборка.Запасы.Пустой() Тогда
			СоставСодержания.Добавить(НСтр("ru = 'Товары принял без претензий.'"));
		КонецЕсли;
		Если Не Выборка.Расходы.Пустой() > 0 Тогда
			СоставСодержания.Добавить(НСтр("ru = 'Услуги получены, претензий нет.'"));
		КонецЕсли;
		
		СодержаниеОперации =			 СтрСоединить(СоставСодержания, " ");
		ДатаПолученияТоваров =			 Выборка.Дата;
		ОрганизацияНаименованиеПолное =	 Выборка.ОрганизацияНаименованиеПолное;
		
	ИначеЕсли Не РезультатЗапроса[2].Пустой() Тогда // основание - СФ
		
		Выборка = РезультатЗапроса[2].Выбрать();
		Выборка.Следующий();
		ДатаПолученияТоваров =			 Выборка.Дата;
		ОрганизацияНаименованиеПолное =	 Выборка.ОрганизацияНаименованиеПолное;
		
	КонецЕсли;
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", ОрганизацияНаименованиеПолное);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияТоваров", ДатаПолученияТоваров);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации",   СодержаниеОперации);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УПД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляСЧФИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	ДанныеДляФормированияЭД = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеСчетФактуры(СсылкаНаОбъект);
	Если ДанныеДляФормированияЭД.РеквизитыШапки.ВидОперации <> Перечисления.ВидыОперацийСчетФактура.Продажа Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя создать электронный документ для СФ с видом операции ""%1""!'"), ДанныеДляФормированияЭД.РеквизитыШапки.ВидОперации);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеСчетаФактурыУПД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляУКДИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактура") Тогда
		СчетФактура = СсылкаНаОбъект;
	Иначе
		СтруктураРезультат = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(СсылкаНаОбъект, Ложь);
		Если СтруктураРезультат <> Неопределено Тогда
			СчетФактура = СтруктураРезультат.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СчетФактура) Тогда
		ТекстСообщения = НСтр("ru = 'Для формирования универсального корректировочного документа счет-фактура должна быть заполнена.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	МассивСчетовФактур = Новый Массив();
	МассивСчетовФактур.Добавить(СчетФактура);
	ТаблицаСчетовФактур = Документы.СчетФактура.ПолучитьДанныеДляПечатиКорректировочныхСчетовФактур(
		МассивСчетовФактур, Документы.СчетФактура.ТекстЗапросаПечатьКорректировочныхСчетовФактур(Истина), Истина);
			
	Если ТаблицаСчетовФактур = Неопределено ИЛИ ТаблицаСчетовФактур.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляФормированияЭД = ТаблицаСчетовФактур[0];
	
	ДанныеДляФормированияЭД.ДанныеШапки.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеКорректировочногоСчетаФактурыУКД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеПервичногоДокументаУКД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляДИСИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактура") Тогда
		СчетФактура = СсылкаНаОбъект;
	Иначе
		СтруктураРезультат = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(СсылкаНаОбъект, Ложь);
		Если СтруктураРезультат <> Неопределено Тогда
			СчетФактура = СтруктураРезультат.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СчетФактура) Тогда
		ТекстСообщения = НСтр("ru = 'Для формирования универсального корректировочного документа счет-фактура должна быть заполнена.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	МассивСчетовФактур = Новый Массив();
	МассивСчетовФактур.Добавить(СчетФактура);
	ТаблицаСчетовФактур = Документы.СчетФактура.ПолучитьДанныеДляПечатиКорректировочныхСчетовФактур(
		МассивСчетовФактур, Документы.СчетФактура.ТекстЗапросаПечатьКорректировочныхСчетовФактур(Истина), Истина);
			
	Если ТаблицаСчетовФактур = Неопределено ИЛИ ТаблицаСчетовФактур.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляФормированияЭД = ТаблицаСчетовФактур[0];
	
	ДанныеДляФормированияЭД.ДанныеШапки.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеПервичногоДокументаУКД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация покупателя).
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляУКДИнформацииПокупателяФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	СчетФактураПолученный = СсылкаНаЭД.ВладелецФайла;
	РеквизитыСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетФактураПолученный, "Дата, Организация");
	
	СведенияОПокупателе = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЮрФизЛица(РеквизитыСчетаФактуры.Организация);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СведенияОПокупателе.ПолноеНаименование);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаСогласования", РеквизитыСчетаФактуры.Дата);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", НСтр("ru = 'С изменением стоимости согласен.'"));
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляКСЧФИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	МассивСчетовФактур = Новый Массив();
	МассивСчетовФактур.Добавить(СсылкаНаОбъект);
	ТаблицаСчетовФактур = Документы.СчетФактура.ПолучитьДанныеДляПечатиКорректировочныхСчетовФактур(
		МассивСчетовФактур, Документы.СчетФактура.ТекстЗапросаПечатьКорректировочныхСчетовФактур(Истина), Истина);
			
	Если ТаблицаСчетовФактур = Неопределено ИЛИ ТаблицаСчетовФактур.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	ДанныеДляФормированияЭД = ТаблицаСчетовФактур[0];
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеКорректировочногоСчетаФактурыУКД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	
КонецПроцедуры


// Подготавливает данные для электронного документа типа Торг12 титул покупателя.
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоТорг12ПокупательФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияГруза", ТекущаяДатаСеанса());
	
КонецПроцедуры

// Подготавливает данные титула заказчика для электронного документа типа Акт выполненных работ формата 5.01.
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоАкт501ЗаказчикФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоВыполнениюУслуг.ДатаЗаказа",
		ТекущаяДатаСеанса());
	
КонецПроцедуры


// Работа со структурой данных CML

// Подготавливает данные для электронного документа типа ПередачаТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
Процедура ПодготовитьДанныеПоПередачеТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД, ДеревоЭД) Экспорт
	
	
		
КонецПроцедуры

// Подготавливает данные для электронного документа типа ВозвратТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
Процедура ПодготовитьДанныеПоВозвратуТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД, ДеревоЭД) Экспорт
	
	
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поиск и создание документов

// Сохраняет данные из электронного документа в объект ИБ.
//
// Параметры:
//  СтрокаДляЗагрузки - Строка - параметры для загрузки.
//  ДеревоРазбора     - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - ДокументСсылка - владелец электронного документа.
//  Записывать - Булево - если Истина, то объект будет записан.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//  НайденныйОбъект - Произвольный - созданный объект.
//
// Возвращаемое значение:
//  НайденныйОбъект - ссылка на объект.
//
Процедура СохранитьДанныеОбъектаВБД(СтрокаДляЗагрузки, ДеревоРазбора,
			СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "", НайденныйОбъект = Неопределено) Экспорт
	
	НайденныйОбъект = СсылкаНаВладельца;
	
	Если СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ТОРГ12 
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		
		ВидОперации = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ВидОперации", Истина, ДеревоРазбора);
		Если ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
			НайденныйОбъект = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
		Иначе
			ЭтоАкт = СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
			НайденныйОбъект = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьПоступлениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, ЭтоАкт);
		КонецЕсли;
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда

		НайденныйОбъект = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		
		НайденныйОбъект = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьСчетНаОплатуПоставщика(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		
		НайденныйОбъект = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьЗаказПокупателя(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		
		НайденныйОбъект = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьЗаказПоставщику(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		
		НайденныйОбъект = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьСчетФактуру(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СохранитьДанныеКаталогаТоваров(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкиНаВладельцев - Массив - документы информационной базы, созданные ранее по входящему электронному документу.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Структура - способы сохранения данных в информационной базе.
//     * ПервичныйДокумент - Строка - способ сохранения первичного документа.
//     * СчетФактура       - Строка - способ сохранения счета-фактуры.
//
Процедура НайтиСоздатьУниверсальныйПередаточныйДокумент(ДеревоДанных, СсылкиНаВладельцев = Неопределено,
	Записывать = Истина, СпособОбработки = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПервичныйДокумент = Неопределено;
	СчетФактура = Неопределено;
	
	НачатьТранзакцию();
	Попытка
		Если СсылкиНаВладельцев <> Неопределено Тогда
			Для каждого Строка Из СсылкиНаВладельцев Цикл
				Если ТипЗнч(Строка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
					СчетФактура = Строка;
				Иначе
					ПервичныйДокумент = Строка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДокументыУчета = Новый Массив;
		НайтиСоздатьУПДДокументОПередаче(ДеревоДанных, ПервичныйДокумент, Записывать);
		ДокументыУчета.Добавить(ПервичныйДокумент);
		
		// Заполним основание в СФ
		ДокументыОснованияСчетаФактуры = Новый Массив();
		ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснованияСчетаФактуры);
		
		НайтиСоздатьУПДСчетФактуру(ДеревоДанных, СчетФактура, Записывать);
		ДокументыУчета.Добавить(СчетФактура);
		
		СсылкиНаВладельцев = ДокументыУчета;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУПДДокументОПередаче(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеУПД = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПодготовитьСтруктуруДляУПД(ДеревоДанных);
	
	Если ДанныеУПД.Шапка.Исправление Тогда
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеУПД);
	Иначе
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДокументПоступленияТоваровУслуг(СсылкаНаВладельца, ДанныеУПД);
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУПДСчетФактуру(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеУПД = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПодготовитьСтруктуруДляСчетаФактурыУПД(ДеревоДанных);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДокументСчетФактураПолученный(СсылкаНаВладельца, ДанныеУПД);
	
КонецПроцедуры

// Определяет является ли документ информационной базы счет-фактурой.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ информационной базы.
//  Результат - Булево - является ли документ счет-фактурой.
//
Процедура ОпределитьДокументЯвляетсяСчетомФактурой(ДокументСсылка, Результат) Экспорт
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	Если ТипДокумента = Тип("ДокументСсылка.СчетФактура")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		
		Результат = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкиНаВладельцев - Массив - документы информационной базы, созданные ранее по входящему электронному документу.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Структура - способы сохранения данных в информационной базе.
//     * ПервичныйДокумент - Строка - способ сохранения первичного документа.
//     * СчетФактура       - Строка - способ сохранения счета-фактуры.
//
Процедура НайтиСоздатьУниверсальныйКорректировочныйДокумент(ДеревоДанных, СсылкиНаВладельцев = Неопределено,
	Записывать = Истина, СпособОбработки  = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПервичныйДокумент = Неопределено;
	СчетФактура = Неопределено;
	
	НачатьТранзакцию();
	Попытка
		Если СсылкиНаВладельцев <> Неопределено Тогда
			Для каждого Строка Из СсылкиНаВладельцев Цикл
				Если ТипЗнч(Строка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
					СчетФактура = Строка;
				Иначе
					ПервичныйДокумент = Строка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДокументыУчета = Новый Массив;
		
		НайтиСоздатьУКДДокументОбИзмененииСтоимости(ДеревоДанных, ПервичныйДокумент, Записывать);
		ДокументыУчета.Добавить(ПервичныйДокумент);
		
		ДокументыОснованияСчетаФактуры = Новый Массив;
		ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснованияСчетаФактуры);
		
		НайтиСоздатьУКДСчетФактуру(ДеревоДанных, СчетФактура, Записывать);
		ДокументыУчета.Добавить(СчетФактура);
		
		СсылкиНаВладельцев = ДокументыУчета;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУКДДокументОбИзмененииСтоимости(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеУКД = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПодготовитьСтруктуруДляУКД(ДеревоДанных);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеУКД);
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначени - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУКДСчетФактуру(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеУКД = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПодготовитьСтруктуруДляСчетаФактурыУКД(ДеревоДанных);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДокументСчетФактураПолученный(СсылкаНаВладельца, ДанныеУКД);
	
КонецПроцедуры

// Поиск и создание документа передачи товаров.
//
// Параметры:
//  ДеревоДанных		 - ДеревоЗначений - дерево данных электронного документа.
//  СсылкаНаВладельца	 - ДокументСсылка - ссылка на документ учета.
//  Записывать			 - Булево - признак записи документа.
//  СпособОбработки		 - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьДокументПередачаТоваров(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина, СпособОбработки = "") Экспорт
	
	НачатьТранзакцию();
	Попытка

		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьПоступлениеТоваровУслугДляПередачаТоваров(ДеревоДанных, СсылкаНаВладельца);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Поиск и создание документа передачи результатов работ.
//
// Параметры:
//  ДеревоДанных		 - ДеревоЗначений - дерево данных электронного документа.
//  СсылкаНаВладельца	 - ДокументСсылка - ссылка на документ учета.
//  Записывать			 - Булево - признак записи документа.
//  СпособОбработки		 - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьДокументПередачаРезультатовРабот(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина, СпособОбработки = "") Экспорт
	
	НачатьТранзакцию();
	Попытка

		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСоздатьПоступлениеТоваровУслугДляПередачаРабот(ДеревоДанных, СсылкаНаВладельца);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Создание элементов справочников

// Создает объект в ИБ по дереву параметров и помещает ссылку на него в "НовыйЭлемент".
//
// Параметры:
//  СтрокаОбъекта - Структура - параметры записываемого объекта.
//  ДеревоРазбора - ДеревоЗначений - результат разбора электронного документа.
//  НовыйЭлемент - СправочникСсылка - в этот параметр необходимо вернуть ссылку на созданный элемент справочника.
//
Процедура СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора, НовыйЭлемент) Экспорт
	
	НовыйЭлемент = Неопределено;
	Если СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.НоменклатураПоставщиков" Тогда
		НовыйЭлемент = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СоздатьПерезаполнитьНоменклатуруПоставщика(СтрокаОбъекта, ДеревоРазбора);
	КонецЕсли;
	
КонецПроцедуры

// Поиска элемента справочника по реквизитам ИНН и КПП.
//
// Параметры:
//  ТипОбъекта - Строка - имя справочника в метаданных.
//  ИНН - Строка - ИНН.
//  КПП - Строка - КПП.
//  Организация - СправочникСсылка - ссылка на элемент справочника организации.
//  Ссылка - СправочникСсылка - Ссылка на найденный объект.
//
Процедура СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП, Ссылка, Организация = Неопределено) Экспорт
	
	Если ПустаяСтрока(ИНН) И ПустаяСтрока(КПП) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Справочник.Ссылка КАК Ссылка
	|ИЗ
	|	&ТипСправочника КАК Справочник
	|ГДЕ
	|	&УсловиеПоискаПоИНН И &УсловиеПоискаПоКПП";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТипСправочника", "Справочник." + ТипОбъекта); 
	
	Если НЕ ПустаяСтрока(ИНН) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоискаПоИНН", "Справочник.ИНН ПОДОБНО (&ИНН)");
		Запрос.УстановитьПараметр("ИНН", ИНН);
		
	Иначе
		
		Запрос.УстановитьПараметр("УсловиеПоискаПоИНН", Истина);
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(КПП) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоискаПоКПП", "Справочник.КПП ПОДОБНО &КПП");
		Запрос.УстановитьПараметр("КПП", КПП);
		
	Иначе
		
		Запрос.УстановитьПараметр("УсловиеПоискаПоКПП", Истина);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Ссылка = Выборка.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты объекта данными из структуры реквизитов.
//
// Параметры:
//  СтруктураРеквизитов - структура - перечень значений реквизитов.
//  КонтрагентСсылка    - СправочникСсылка.Контрагенты - ссылка на контрагента, которого нужно заполнить.
//
Процедура ЗаполнитьРеквизитыКонтрагента(СтруктураРеквизитов, КонтрагентСсылка) Экспорт
	
	НачатьТранзакцию();
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.Контрагент) Тогда
		
		Контрагент = СтруктураРеквизитов.Контрагент.ПолучитьОбъект();
		СсылкаНового = Неопределено;
		
	Иначе
		
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		СсылкаНового = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СсылкаОбъекта(Контрагент);
		
	КонецЕсли;
	
	ИНН_КПП = СтруктураРеквизитов.ИНН_КПП;
	
	Контрагент.Наименование = СтруктураРеквизитов.Наименование;
	Контрагент.ИНН = Сред(ИНН_КПП, 1, СтрНайти(ИНН_КПП,"/")-1);
	Контрагент.КПП = Сред(ИНН_КПП, СтрНайти(ИНН_КПП,"/")+1);
	Контрагент.КодПоОКПО = СтруктураРеквизитов.ОКПО;
	
	// Контактная информация
	
	Если НЕ ПустаяСтрока(СтруктураРеквизитов.ФактАдресПредставление) Тогда
		
		КИВид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		КИФактическийАдрес = Контрагент.КонтактнаяИнформация.Найти(КИВид, "Вид");
		
		Если КИФактическийАдрес = Неопределено Тогда
			
			КИФактическийАдрес = Контрагент.КонтактнаяИнформация.Добавить();
			КИФактическийАдрес.Вид = КИВид;
			КИФактическийАдрес.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			
		КонецЕсли;
			
		КИФактическийАдрес.Представление = СтруктураРеквизитов.ФактАдресПредставление;
		КИФактическийАдрес.ЗначенияПолей = СтруктураРеквизитов.ФактАдресЗначенияПолей;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтруктураРеквизитов.ЮрАдресПредставление) Тогда
		
		КИВид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		КИЮридическийАдрес = Контрагент.КонтактнаяИнформация.Найти(КИВид, "Вид");
		
		Если КИЮридическийАдрес = Неопределено Тогда
			
			КИЮридическийАдрес = Контрагент.КонтактнаяИнформация.Добавить();
			КИЮридическийАдрес.Вид = КИВид;
			КИЮридическийАдрес.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			
		КонецЕсли;
		
		КИЮридическийАдрес.Представление = СтруктураРеквизитов.ЮрАдресПредставление;
		КИЮридическийАдрес.ЗначенияПолей = СтруктураРеквизитов.ЮрАдресЗначенияПолей;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтруктураРеквизитов.Телефон) Тогда
		
		КИВид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		КИТелефоны = Контрагент.КонтактнаяИнформация.Найти(КИВид, "Вид");
		
		Если КИТелефоны = Неопределено Тогда
			
			КИТелефоны = Контрагент.КонтактнаяИнформация.Добавить();
			КИТелефоны.Вид = КИВид;
			КИТелефоны.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
			
		КонецЕсли;
		
		КИТелефоны.Представление = СтруктураРеквизитов.Телефон;
		КИТелефоны.ЗначенияПолей = "НомерТелефона=" + СокрЛП(СтруктураРеквизитов.Телефон);
		
	КонецЕсли;
	
	// БАНКОВСКИЙ СЧЕТ
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.БИК)
		И ЗначениеЗаполнено(СтруктураРеквизитов.РасчетныйСчет) Тогда
		
		Банки = Справочники.Банки.ПолучитьТаблицуБанковПоРеквизитам("Код", СтруктураРеквизитов.БИК);
		
		Если Банки.Количество() = 0 Тогда
				
			БанкКонтрагента = Справочники.Банки.СоздатьЭлемент();
			БанкКонтрагента.Код = СтруктураРеквизитов.БИК;
			БанкКонтрагента.КоррСчет = СтруктураРеквизитов.КорреспондентскийСчет;
			БанкКонтрагента.Наименование = СтруктураРеквизитов.Банк;
			БанкКонтрагента.Записать();
			
		Иначе
			
			БанкКонтрагента = Банки[0].Ссылка;
			
		КонецЕсли;
		
		БанковскийСчетКонтрагента = Справочники.БанковскиеСчета.НайтиПоКоду(СтруктураРеквизитов.РасчетныйСчет);
		Если НЕ ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
			
			БанковскийСчетКонтрагента = Справочники.БанковскиеСчета.СоздатьЭлемент();
			
			Если СсылкаНового = Неопределено Тогда
				БанковскийСчетКонтрагента.Владелец = Контрагент.Ссылка;
			Иначе
				БанковскийСчетКонтрагента.Владелец = СсылкаНового;
			КонецЕсли;
			
			БанковскийСчетКонтрагента.Банк = БанкКонтрагента;
			БанковскийСчетКонтрагента.ВалютаДенежныхСредств = Константы.НациональнаяВалюта.Получить();
			БанковскийСчетКонтрагента.НомерСчета = СтруктураРеквизитов.РасчетныйСчет;
			БанковскийСчетКонтрагента.Наименование = СтруктураРеквизитов.РасчетныйСчет + ", в " + БанкКонтрагента.Наименование;
			БанковскийСчетКонтрагента.ОбменДанными.Загрузка = Истина;
			БанковскийСчетКонтрагента.Записать();
			
		КонецЕсли;
		
		Контрагент.БанковскийСчетПоУмолчанию = БанковскийСчетКонтрагента;
		
	КонецЕсли;
	
	Попытка
		
		Контрагент.Записать();
		ЗафиксироватьТранзакцию();
		
		Сообщение = Новый СообщениеПользователю();
		
		Если СсылкаНового <> Неопределено Тогда
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Новый контрагент ""%1"" был успешно создан.'"),
				Контрагент.Наименование);
		Иначе
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Данные контрагента ""%1"" перезаполнены.'"),
				Контрагент.Наименование);
		КонецЕсли;
		
		Сообщение.Сообщить();
		
		КонтрагентСсылка = Контрагент.Ссылка;
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка реквизитов контрагента'"), УровеньЖурналаРегистрации.Ошибка,,ТекстОшибки,ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

// Заполняет структуру реквизитов товара
//
// Параметры:
//  РеквизитыНоменклатуры - Структура, содержащая параметры поиска 
//  СтруктураВозврата -Структура содержащая ссылки на номенклатуру, характеристику, упаковку
//  ИД - идентификатор обмена ЭД
//
Процедура ПолучитьРеквизитыТовара(РеквизитыНоменклатуры, СтруктураВозврата, ИД = Неопределено) Экспорт
	
	ПараметрПоиска = "";
	НоменклатураПоставщика = Неопределено;
	Если РеквизитыНоменклатуры.Свойство("НоменклатураПоставщика", НоменклатураПоставщика) Тогда
		СтруктураВозврата.Номенклатура = НоменклатураПоставщика.Номенклатура;
		СтруктураВозврата.Характеристика = НоменклатураПоставщика.Характеристика;
	Иначе
		СтруктураВозврата.Номенклатура = Неопределено;
		СтруктураВозврата.Характеристика = Неопределено;
	КонецЕсли;
	
	СтруктураВозврата.Упаковка = Неопределено;
	
КонецПроцедуры

// Заполняет ИД контрагента.
//
// Параметры:
//  Контрагент - ОпределяемыйТип.Контрагент - ссылка на контрагента (Организация или Контрагент).
//  ВидКонтрагента - Строка - вид контрагента.
//  ИдКонтрагента - Строка - значение ИдКонтрагента.
//
Процедура ПолучитьИДКонтрагента(Контрагент, ВидКонтрагента, ИдКонтрагента) Экспорт
	
	ИдКонтрагента = "";
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент.ИНН) Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось сформировать идентификатор организации. Проверьте заполнение ИНН.'");
		Если ВРег(ВидКонтрагента) = ВРег("Контрагент") Тогда
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "организации", "контрагента");
		КонецЕсли;
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если ВРег(ВидКонтрагента) = ВРег("Организация") Тогда
		ИдКонтрагента = Контрагент.ИНН + "_" + Контрагент.КПП;
	ИначеЕсли ВРег(ВидКонтрагента) = ВРег("Контрагент") Тогда
		ИдКонтрагента = Контрагент.ИНН + "_" + Контрагент.КПП;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сопоставление номенклатуры

// Формирует тест запроса для получения таблицы сопоставления номенклатуры
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса
//
Процедура ТекстЗапросаСопоставленияНоменклатуры(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаИнформацияОТоваре.Ид КАК Идентификатор,
	|	ТаблицаИнформацияОТоваре.Артикул КАК АртикулНоменклатурыКонтрагента,
	|	ТаблицаИнформацияОТоваре.Наименование КАК НаименованиеНоменклатурыКонтрагента,
	|	ТаблицаИнформацияОТоваре.БазоваяЕдиницаКод КАК БазоваяЕдиницаКод,
	|	ТаблицаИнформацияОТоваре.Описание КАК Описание
	|ПОМЕСТИТЬ ТаблицаИнформацияОТоваре
	|ИЗ
	|	&ТаблицаИнформацияОТоваре КАК ТаблицаИнформацияОТоваре
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИнформацияОТоваре.Идентификатор,
	|	ТаблицаИнформацияОТоваре.АртикулНоменклатурыКонтрагента,
	|	ТаблицаИнформацияОТоваре.НаименованиеНоменклатурыКонтрагента,
	|	ЕСТЬNULL(ЕдиницыИзмерения.Ссылка, НЕОПРЕДЕЛЕНО) КАК ЕдиницаНоменклатурыКонтрагента,
	|	ТаблицаИнформацияОТоваре.Описание,
	|	НоменклатураПоставщиков.Ссылка КАК НоменклатураПоставщика
	|ИЗ
	|	ТаблицаИнформацияОТоваре КАК ТаблицаИнформацияОТоваре
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|		ПО ТаблицаИнформацияОТоваре.Идентификатор = НоменклатураПоставщиков.Идентификатор
	|			И (НоменклатураПоставщиков.Владелец = &Контрагент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК ЕдиницыИзмерения
	|		ПО ТаблицаИнформацияОТоваре.БазоваяЕдиницаКод = ЕдиницыИзмерения.Код
	|ГДЕ
	|	(НоменклатураПоставщиков.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ИЛИ НоменклатураПоставщиков.Номенклатура ЕСТЬ NULL )";
	
КонецПроцедуры

// Сохраняет результат ручного сопоставления Номенклатуры в БД
//
// Параметры:
//  ТаблицаСопоставления -таблицаЗначений, содержащая данные сопоставления
//  Контрагент - СправочникСсылка.Контрагенты
//  Отказ - Булево, признак ошибки
//
Процедура ЗаписатьСопоставлениеНоменклатуры(ТаблицаСопоставления, Контрагент, Отказ) Экспорт
	
	Для Каждого Запись из ТаблицаСопоставления Цикл
		Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
			СпрСсылка = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСсылкуНаНоменклатуруПоставщикаПоИдентификатору(Запись.Идентификатор, Контрагент, "НоменклатураПоставщика");
			//Если Не ЗначениеЗаполнено(СпрСсылка) Тогда
			//	СпрСсылка = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСсылкуНаНоменклатуруПоставщикаПоИдентификатору(Запись.Идентификатор, Неопределено, "НоменклатураПоставщика");
			//КонецЕсли;
			Если ЗначениеЗаполнено(СпрСсылка) Тогда
				СпрОбъект = СпрСсылка.ПолучитьОбъект();
			Иначе
				СпрОбъект = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
				СпрОбъект.Наименование  = Запись.НаименованиеНоменклатурыКонтрагента;
				СпрОбъект.Артикул       = Запись.АртикулНоменклатурыКонтрагента;
				СпрОбъект.Идентификатор = Запись.Идентификатор;
			КонецЕсли;
			СпрОбъект.Владелец      = Контрагент;
			СпрОбъект.Номенклатура   = Запись.Номенклатура;
			СпрОбъект.Характеристика = Запись.ХарактеристикаНоменклатуры;
			Попытка
				СпрОбъект.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),,,,Отказ);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру для открытия формы сопоставления номенклатуры.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ.
//  СтруктураПараметров - Структура - содержит следующие ключи:
//    * ИмяФормы - Строка - полное имя формы, которую нужно открыть для сопоставления номенклатуры.
//    * ПараметрыОткрытияФормы - Структура - см. функцию ОткрытьФорму, параметр "Параметры".
//
Процедура ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД, СтруктураПараметров) Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ИмяФормы", "ОбщаяФорма.СопоставлениеДанныхПоНоменклатуре");
	ПараметрыОткрытияФормы = Новый Структура("ЭлектронныйДокумент, НеОткрыватьФормуПриОтсутствииНесопоставленнойНоменклатуры",
		СсылкаНаЭД, Истина);
	СтруктураПараметров.Вставить("ПараметрыОткрытияФормы", ПараметрыОткрытияФормы);
	
КонецПроцедуры

// Производит заполнение реквизитов формы переданными значениями 
//
// Параметры:
//  ДанныеФормы - Данные управляемой формы;
//  ЗначениеЗаполнения - ссылка данные во временном хранилище.
//
Процедура ЗаполнитьИсточник(ДанныеФормы, ЗначениеЗаполнения) Экспорт
	
	ДанныеФормы.ЗаполнитьТоварыИзВременногоХранилищаСервер(ЗначениеЗаполнения);
	ДанныеФормы.ОбновитьОтображениеДанных();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение данных для формирования электронных документов

// Получает значение перечисления по имени перечисления и представлению в библиотеке.
// 
// Параметры:
//  ИмяПеречисления - Строка, наименование перечисления.
//  ПредставлениеПеречисления - Строка, наименование значения перечисления.
//  НайденноеЗначение - значение искомого перечисления.
//
Процедура ПолучитьЗначениеПеречисления(ИмяПеречисления, ПредставлениеПеречисления, НайденноеЗначение) Экспорт
	
	Если Метаданные.Перечисления.Найти(ИмяПеречисления) = Неопределено Тогда
		НайденноеЗначение = ПредставлениеПеречисления;
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлПеречисления Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		Если СтрНайти(ВРег(ЭлПеречисления.Синоним), ВРег(ПредставлениеПеречисления)) > 0
			ИЛИ СтрНайти(ВРег(ЭлПеречисления.Имя), ВРег(ПредставлениеПеречисления)) > 0 Тогда
			
			НайденноеЗначение = Перечисления[ИмяПеречисления][ЭлПеречисления.Имя];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает данные свидетельства о регистрации ИП по ссылке.
//
// Параметры:
//  ИП - Ссылка на элемент справочника - по которому нужно получить данные;
//  Сведения - Строка - сведения о регистрации индивидуального предпринимателя.
//
Процедура ДанныеСвидетельстваОРегистрацииИП(ИП, Сведения) Экспорт
	
	Если ТипЗнч(ИП) = Тип("СправочникСсылка.Организации") Тогда
		
		Сведения = "Свидетельство № " + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИП, "СвидетельствоСерияНомер") 
								+ " от " + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИП, "СвидетельствоДатаВыдачи");
		
	КонецЕсли;
	
КонецПроцедуры

// Получение контактной информации организации по ссылке.
//
// Параметры:
//  Организация - Ссылка - элемент справочника Организации, по которому нужно получить данные.
//  ТаблицаКонтактов - ТаблицаЗначений - контактная информация по организации.
//
Процедура ПолучитьКонтактнуюИнформацию(Организация, ТаблицаКонтактов) Экспорт
	
	//В запросе реквизит Представление присваивается полю Значение, т.к в схеме XDTO поле Значение обязательно к заполнению,
	//а для адреса электронной почты реквизит Значение пустой
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОрганизацииКонтакнтаяИнформация.Вид,
	|	ВЫРАЗИТЬ(ОрганизацииКонтакнтаяИнформация.Представление КАК СТРОКА(1000)) КАК Значение,
	|	ВЫРАЗИТЬ(ОрганизацииКонтакнтаяИнформация.Представление КАК СТРОКА(1000)) КАК Комментарий
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтакнтаяИнформация
	|ГДЕ
	|	ОрганизацииКонтакнтаяИнформация.Ссылка = &Объект
	|	И (ОрганизацииКонтакнтаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailОрганизации)
	|			ИЛИ ОрганизацииКонтакнтаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации)
	|			ИЛИ ОрганизацииКонтакнтаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФаксОрганизации))";
	
	Запрос.УстановитьПараметр("Объект", Организация);
	
	ТаблицаКонтактов = Запрос.Выполнить().Выгрузить();
	Для Каждого стр Из ТаблицаКонтактов Цикл
		стр.Значение    = СокрП(стр.Значение);
		стр.Комментарий = СокрП(стр.Комментарий);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет "НазваниеРегиона" по "КодРегиона".
//
// Параметры:
//  КодРегиона - Строка - строка, содержащая двухсимвольный код региона.
//  НазваниеРегиона - Строка - наименование региона.
//
Процедура НазваниеРегиона(КодРегиона, НазваниеРегиона) Экспорт
	
	Если ПустаяСтрока(КодРегиона) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КодРегионаЧисло = Число(КодРегиона);
	НазваниеРегиона = АдресныйКлассификатор.НаименованиеРегионаПоКоду(КодРегионаЧисло);
	
КонецПроцедуры

// Получает структуру, содержащую информацию о юридическом адресе контрагента.
//
// Параметры:
//  СтруктураАдреса     - структура - содержит ссылки на элементы справочника;
//  СтруктураПараметров - структура - содержит ссылки на элементы справочника;
//  ВидКонтрагента      - строка - имя метаданных справочника;
//  ВидАдреса           - Строка - "Факт" или "Юр";
//  ТекстОшибки         - Строка - описание ошибки;
//
Процедура ПолучитьАдресСтруктурой(СтруктураАдреса, СтруктураПараметров, ВидКонтрагента, ВидАдреса, ТекстОшибки) Экспорт
	
	СтруктураАдреса.Вставить("АдресРФ", Истина);
	СтруктураАдреса.Вставить("КодСтр", "");
	СтруктураАдреса.Вставить("КодСтраны", "");
	СтруктураАдреса.Вставить("Индекс", "");
	СтруктураАдреса.Вставить("КодРегион", "");
	СтруктураАдреса.Вставить("КодРегиона", "");
	СтруктураАдреса.Вставить("Район", "");
	СтруктураАдреса.Вставить("Город", "");
	СтруктураАдреса.Вставить("НаселПункт", "");
	СтруктураАдреса.Вставить("НаселенныйПункт", "");
	СтруктураАдреса.Вставить("Улица", "");
	СтруктураАдреса.Вставить("Дом", "");
	СтруктураАдреса.Вставить("Корпус", "");
	СтруктураАдреса.Вставить("Квартира", "");
	СтруктураАдреса.Вставить("Кварт", "");
	СтруктураАдреса.Вставить("АдрТекст", "");
	СтруктураАдреса.Вставить("АдресТекст", "");
	СтруктураАдреса.Вставить("КодГАР", "");
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров[ВидКонтрагента]) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураПараметров[ВидКонтрагента]) = Тип("СправочникСсылка.Организации") Тогда
		ВидКонтактнойИнформации = ?(ВидАдреса = "Юр", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	Иначе
		ВидКонтактнойИнформации = ?(ВидАдреса = "Юр", Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	КонецЕсли;
	
	СведенияОбАдресе = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.АдресСтруктурой(СтруктураПараметров[ВидКонтрагента], ВидКонтактнойИнформации);
	
	СтруктураАдреса.АдрТекст   = СведенияОбАдресе.Представление;
	СтруктураАдреса.АдресТекст = СведенияОбАдресе.Представление;
	
	СтруктураАдреса.КодСтраны  = СведенияОбАдресе.КодСтраны;
	СтруктураАдреса.КодСтр     = СведенияОбАдресе.КодСтраны;
	СтруктураАдреса.АдресРФ    = СведенияОбАдресе.АдресРФ;
	СтруктураАдреса.КодРегион  = СведенияОбАдресе.КодРегиона;
	СтруктураАдреса.КодРегиона = СведенияОбАдресе.КодРегиона;
	СтруктураАдреса.Индекс     = СведенияОбАдресе.Индекс;
	СтруктураАдреса.Район      = СведенияОбАдресе.Район;
	СтруктураАдреса.Город      = СведенияОбАдресе.Город;
	СтруктураАдреса.НаселПункт = СведенияОбАдресе.НаселенныйПункт;
	СтруктураАдреса.НаселенныйПункт = СведенияОбАдресе.НаселенныйПункт;
	СтруктураАдреса.Улица      = СведенияОбАдресе.Улица;
	СтруктураАдреса.Дом        = СведенияОбАдресе.Дом;
	СтруктураАдреса.Корпус     = СведенияОбАдресе.Корпус;
	СтруктураАдреса.Кварт      = СведенияОбАдресе.Квартира;
	СтруктураАдреса.Квартира   = СведенияОбАдресе.Квартира;
	
КонецПроцедуры

// Получает адрес электронной почты контрагента.
//
// Параметры:
//  Контрагент - СправочникСсылка - ссылка на элемент справочника контрагенты, адрес которого надо получить.
//  АдресЭП - Строка - адрес электронной почты.
//
Процедура АдресЭлектроннойПочтыКонтрагента(Контрагент, АдресЭП) Экспорт
	
	АдресЭП = "";
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		Получатели = Новый СписокЗначений;
		Получатели.Добавить(Контрагент);
		
		ЭлектронныеАдресаПолучателей = УправлениеНебольшойФирмойКонтактнаяИнформацияСервер.ПодготовитьЭлектронныеАдресаПолучателей(Получатели, Ложь);
		
		Если ЭлектронныеАдресаПолучателей.Количество() > 0 Тогда
			
			АдресЭП = ЭлектронныеАдресаПолучателей[0].Адрес;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает банковские счета.
//
// Параметры:
//  Организация - СправочникСсылка.Организация - ссылка на организацию.
//  Банк - СправочникСсылка - ссылка на элемент справочника с банками.
//  Таблица - ТаблицаЗначений - таблица значений с перечнем банковских счетов.
//
Процедура ПолучитьБанковскиеСчета(Организация, Таблица, Банк = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Организация
	|	И &УсловияОтбораПоБанку";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если ЗначениеЗаполнено(Банк) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияОтбораПоБанку", "БанковскиеСчета.Банк = &Банк");
		Запрос.УстановитьПараметр("Банк", Банк);
		
	Иначе
		
		Запрос.УстановитьПараметр("УсловияОтбораПоБанку", Истина);
		
	КонецЕсли;
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Получает банковские реквизиты.
//
// Параметры:
//  МассивСчетов - массив - список банковских счетов.
//  Таблица - ТаблицаЗначений - перечень банковских реквизитов. Должна содержать следующие колонки:
//    * Ссылка - Ссылка - ссылка на банковский счет.
//    * РасчетныйСчет - Строка - номер расчетного счета.
//    * КорреспондентскийСчет - Строка - номер корреспондентского счета.
//    * БИК - Строка - БИК банка.
//    * Банк - Ссылка - ссылка на банк.
//    * БанкДляРасчетов - Ссылка - ссылка на банк для расчетов.
//    * БанкДляРасчетовБИК - БИК банка для расчетов.
//    * БанкДляРасчетовКоррСчет - Строка - корреспондентский счет банка для расчетов.
//
Процедура ПолучитьБанковскиеРеквизиты(МассивСчетов, Таблица) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.НомерСчета КАК РасчетныйСчет,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.КоррСчет, """") КАК КорреспондентскийСчет,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Код, """") КАК БИК,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Наименование, """") КАК Банк,
	|	ЕСТЬNULL(БанковскиеСчета.БанкРасчетов.Наименование, """") КАК БанкДляРасчетов,
	|	ЕСТЬNULL(БанковскиеСчета.БанкРасчетов.Код, """") КАК БанкДляРасчетовБИК,
	|	ЕСТЬNULL(БанковскиеСчета.БанкРасчетов.КоррСчет, """") КАК БанкДляРасчетовКоррСчет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Ссылка В(&МассивСчетов)";
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// В процедуре выполняется заполнение реквизитов (дата выставления, признак выставления,
// дата получения, признак получения) документов счета-фактуры, по ключевым событиям,
// описанным в приказе от 25 апреля 2011 г. N 50н.: получение ПДО, ПДП, ИП, ПДОИП.
//
// Параметры:
//  ВладелецЭД - документ-ссылка, ссылка на документ ИБ счет-фактура выданный/полученный.
//  ЭД - справочник-ссылка, ссылка на элемент справочника ЭДПрисоединенныеФайлы.
//
Процедура ЗаполнитьРеквизитыЭСФ(ВладелецЭД, ЭД) Экспорт
	
	Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
		
		//  Датой выставления покупателю счета-фактуры в электронном виде по телекоммуникационным
		// каналам связи считается дата поступления файла счета-фактуры Оператору ЭДО от продавца, 
		// указанная в подтверждении (ПДПЭСФ) этого Оператора ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ЭСФ = ВладелецЭД.ПолучитьОбъект();
		ЭСФ.ОбменДанными.Загрузка = Истина; 
		ЭСФ.ДатаВыставления = ЭД.ВладелецФайла.ДатаДокументаОтправителя;
		ЭСФ.Записать();
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
		
		//  Датой получения покупателем счета-фактуры в электронном виде по телекоммуникационным 
		// каналам связи считается дата направления покупателю Оператором ЭДО файла счета-фактуры продавца, 
		// указанная в подтверждении (ПДОЭСФ) Оператора ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ЭСФ = ВладелецЭД.ПолучитьОбъект();
		ЭСФ.ОбменДанными.Загрузка = Истина; 
		ЭСФ.Дата = ЭД.ВладелецФайла.ДатаДокументаОтправителя;
		ЭСФ.Записать();
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
		
		//  Счет-фактура в электронном виде считается выставленным, если продавцу поступило 
		// соответствующее подтверждение (ПДПЭСФ) Оператора ЭДО, при наличии у продавца извещения покупателя 
		// о получении счета-фактуры (ИПЭСФ), подписанного ЭП покупателя и полученного через Оператора ЭДО.
		// ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ЭСФ = ВладелецЭД.ПолучитьОбъект();
		ЭСФ.ОбменДанными.Загрузка = Истина; 
		// Реквизиты Выставлен И КодСпособаВыставления решено не добавлять в конфигурацию
		// с целью упрощения интерфейса.
		ЭСФ.Записать();
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
		
		//  Счет-фактура в электронном виде считается полученным покупателем, если ему поступило 
		// соответствующее подтверждение (ПДОЭСФ) Оператора ЭДО, при наличии извещения покупателя 
		// о получении счета-фактуры (ИПЭСФ), подписанного ЭП покупателя и подтвержденного (ПДОИПЭСФ)
		// Оператором ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ЭСФ = ВладелецЭД.ПолучитьОбъект();
		ЭСФ.ОбменДанными.Загрузка = Истина; 
		// Реквизит КодСпособаПолучения решено не добавлять в конфигурацию
		// с целью упрощения интерфейса.
		ЭСФ.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Просмотр электронных документов

// Формирует текст НДС по этапу оплаты.
//
// Параметры:
//  СоответствиеСтавокНДС - Соответствие - соответствие, полученное с помощью функции ПолучитьСоответствиеСтавокНДС().
//  ПроцентПлатежа - Число - Процент платежа по этапу.
//  ТекстНДС - Строка - описание ставки НДС.
//
Процедура СформироватьТекстНДСЭтапаОплаты(СоответствиеСтавокНДС, ПроцентПлатежа, ТекстНДС) Экспорт
	
	ТекстНДС = "";
	
	Если СоответствиеСтавокНДС.Количество() > 0 Тогда
		
		Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
			
			Если ТекСтавкаНДС.Значение <> 0 Тогда
				
				ТекстНДС = ТекстНДС + ?(ПустаяСтрока(ТекстНДС), НСтр("ru='НДС(%СтавкаНДС%) %СуммаНДС%'"), НСтр("ru=', НДС(%СтавкаНДС%) %СуммаНДС%'"));
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СтавкаНДС%", ТекСтавкаНДС.Ключ);
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СуммаНДС%",  Формат(ТекСтавкаНДС.Значение / 100 * ПроцентПлатежа, "ЧЦ=15; ЧДЦ=2"));
			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстНДС) Тогда
		ТекстНДС = НСтр("ru='В т.ч. '") + ТекстНДС;
	Иначе
		ТекстНДС = НСтр("ru='Без налога (НДС)'");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет текстовое представление суммы.
//
// Параметры:
//  СуммаКПрописи - Число - сумма, по которой надо получить представление.
//  КодВалюты - Число - код используемой валюты.
//  ЧН - Строка - параметр нулевого значения числа.
//  ЧРГ - Строка - разделитель групп целой части числа.
//  Результат - Строка - текстовое представление суммы, которое будет заполнено. 
//
Процедура ФорматСумм(СуммаКПрописи, Результат, КодВалюты = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
	Валюта = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСсылкуНаОбъект("Валюты",КодВалюты);
	
	Результат = УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаКПрописи, Валюта,  ЧН, ЧРГ);
	
КонецПроцедуры

// Заполняет сумму прописью.
//
// Параметры:
//  СуммаЧислом - Число - преобразуемая сумма.
//  КодВалюты - Число - код используемой валюты.
//  Результат - Строка - сумма прописью.
//
Процедура СуммаПрописью(СуммаЧислом, КодВалюты, Результат) Экспорт
	
	Валюта = ?(ПустаяСтрока(КодВалюты), Константы.НациональнаяВалюта.Получить(), УправлениеНебольшойФирмойЭлектронныеДокументыСервер.НайтиСсылкуНаОбъект("Валюты", КодВалюты));
	
	Результат = УправлениеНебольшойФирмойСервер.СформироватьСуммуПрописью(СуммаЧислом, Валюта);
	
КонецПроцедуры

// Формирует текст НДС по ставке для печатной формы счета и заказа.
//
// Параметры:
//  СтавкаНДС       - ПеречислениеСсылка.СтавкиНДС - ставка НДС, для которой необходимо сформировать текст.
//  ЦенаВключаетНДС - Булево - Признак включения НДС в цену.
//  Результат       - Строка - текстовое представление ставки НДС.
//
Процедура ТекстНДСПоСтавке(СтавкаНДС, ЦенаВключаетНДС, Результат) Экспорт
	
	ТекстНДСПоСтавке = ?(ЦенаВключаетНДС, НСтр("ru='В т.ч. НДС (%СтавкаНДС%):'"), НСтр("ru='НДС (%СтавкаНДС%):'"));
	ТекстНДСПоСтавке = СтрЗаменить(ТекстНДСПоСтавке, "%СтавкаНДС%", СтавкаНДС);
	
	Результат = ТекстНДСПоСтавке;
	
КонецПроцедуры


// Используется для простановки ответственного при создании электронного документа.
//
// Параметры:
//  Контрагент - СправочникСсылка - ссылка на контрагента, по которому надо получить ответственного.
//  Соглашение - СправочникСсылка.СоглашениеОбИспользованииЭД - соглашение, по которому надо найти ответственного.
//  ОтветственныйПоЭД - СправочникСсылка.Пользователи - ответственное лицо.
//
Процедура ПолучитьОтветственногоПоЭД(Контрагент, Соглашение, ОтветственныйПоЭД) Экспорт
	
	ОтветственныйПоЭД = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

// Возврат признака физического лица.
//
// Параметры:
//  ДанныеКонтрагента - СправочникСсылка - ссылка на элемент справочника.
//  ПризнакФизЛица - Булево - Истина если физическое лицо.
//
Процедура ЭтоФизЛицо(ДанныеКонтрагента, ПризнакФизЛица) Экспорт
	
	ПризнакФизЛица = Ложь;
	Если ДанныеКонтрагента.Метаданные().Реквизиты.Найти("ВидКонтрагента") <> Неопределено Тогда
		
		ПризнакФизЛица = ДанныеКонтрагента.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо
			ИЛИ ДанныеКонтрагента.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель;
		
	ИначеЕсли ДанныеКонтрагента.Метаданные().Реквизиты.Найти("ЮридическоеФизическоеЛицо") <> Неопределено Тогда
		
		ПризнакФизЛица = ДанныеКонтрагента.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		
	КонецЕсли;
	
КонецПроцедуры

// Вывод данных о скидках в печатную форму документа.
//
// Параметры:
//  Товары - ТаблицаЗначений, ВыборкаИзРезультатаЗапроса - список товаров.
//  ИспользоватьСкидки - Булево - используются скидки.
//  ВыводитьСкидки - Булево - заполняемый процедурой признак.
//
Процедура НужноВыводитьСкидки(Знач Товары, ИспользоватьСкидки, ВыводитьСкидки) Экспорт
	
	
	
КонецПроцедуры

// Определяет имя дополнительной колонки, которая выводится в печатных формах электронных документов Счет на оплату,
// Заказ клиента, Заказ поставщику, Отчет о списании комиссионного товара, Отчет о продажах комиссионного товара.
// В качестве дополнительной колонки могут выступать "Код", "Артикул".
//
// Параметры:
//  Результат - Строка - доступные значения: "Код", "Артикул".
//
Процедура ИмяДополнительнойКолонки(Результат) Экспорт
	
	Результат = "Артикул";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Переопределение поведения электронных документов

// Данное событие возникает при изменении элемента справочника ЭДПрисоединенныеФайлы
// Предназначено для переопределения или добавления изменяемых реквизитов электронного документа
//
// Параметры:
//  Объект - СправочникСсылка.ЭДПрисоединенныеФайлы - изменяемый объект
//  СтруктураПараметров - Структура, содержит структуру изменяемых реквизитов
//
Процедура ПриИзмененииПрисоединенногоФайла(Объект, СтруктураПараметров) Экспорт
	
	Если НЕ СтруктураПараметров.Свойство("Ответственный") Тогда
		СтруктураПараметров.Вставить("Ответственный", Пользователи.АвторизованныйПользователь());
	КонецЕсли;
	
КонецПроцедуры

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Утвержден".
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Процедура НазначенСтатусУтвержден(ЭлектронныйДокумент) Экспорт
	
	Попытка
		ФайлОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		ФайлОбъект.Изменил = ПараметрыСеанса.ТекущийПользователь;
		ФайлОбъект.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru = 'утверждение ЭД'"), УровеньЖурналаРегистрации.Ошибка,,ТекстОшибки,ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Подписан".
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Процедура НазначенСтатусПодписан(ЭлектронныйДокумент) Экспорт
	
КонецПроцедуры

// Выполняется при получении описания основания электронного документа,
// которое используется для представления данных прикладного объекта в подсистеме.
//
// Параметры:
//  ОснованиеОбъект - ОпределяемыйТип.ОснованияЭлектронныхДокументов - объект или ссылка на основание электронного документа.
//  Описание - Структура - данные, описывающие основание электронного документа:
//   * Вид - Строка - представление вида объекта. По умолчанию синоним объекта метаданных.
//   * Организация - ОпределяемыйТип.Организация - организация основания.
//   * Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент основания.
//   * Дата - Дата - дата основания.
//   * Номер - Строка - номер основания.
//   * СуммаДокумента - Число - сумма основания.
//  СтандартнаяОбработка - Булево - признак формирования описания по умолчанию. 
//                                  Если Ложь, то используются данные из параметра Описание. По умолчанию Истина.
//
Процедура ПриПолученииОписанияОснованияЭлектронногоДокумента(ОснованиеОбъект, Описание, СтандартнаяОбработка) Экспорт
	
	ТипОснования = ТипЗнч(ОснованиеОбъект);
	Если ТипОснования = Тип("ДокументОбъект.РасходнаяНакладная") 
		ИЛИ ТипОснования = Тип("ДокументОбъект.СчетФактура") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Описание.Организация = ОснованиеОбъект.Организация;
		Описание.Контрагент  = ОснованиеОбъект.Контрагент;
		Описание.Дата  = ОснованиеОбъект.Дата;
		Описание.Номер = ОснованиеОбъект.Номер;
		Описание.СуммаДокумента = ОснованиеОбъект.СуммаДокумента;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет возможно ли редактировать объект информационной базы.
//
// Параметры:
//  Источник - ДокументОбъект - проверяемый объект
//  Отказ - Булево - в случае запрета изменения, устанавливается Истина
//
Процедура ПроверитьВозможностьРедактированияОбъекта(Источник, Отказ) Экспорт
	
	
КонецПроцедуры

// Выполняется проверка возможности корректного чтения Пакета ЭД.
// Необходимость данной проверки возникает при работе с данными внешней информационной базы (через com-соединение).
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов.
//  ЧтениеПакетаВозможно - булево/неопределено - Ложь - чтение пакета не будет выполняться, во всех остальных случаях,
//    (включая пустое значение) пакет будет прочитан.
//
Процедура ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД, ЧтениеПакетаВозможно) Экспорт
	
	
	
КонецПроцедуры

// Проверяет на корректность заполнения параметров электронного документа.
//
// Параметры:
//  ПараметрыЭД - структура - перечень параметров ЭД.
//  Результат - Булево - Истина если правильно заполнен объект выгрузки.
//
Процедура ПроверитьПравильностьЗаполненияОбъекта(ПараметрыЭД, Результат) Экспорт
	
	
	
КонецПроцедуры

// Заполняет список команд ЭДО в прикладном решении.
// 
// Параметры:
//  СоставКоманд - Структура - структура состава команд ЭДО
//    Исходящие - Массив - состав объектов, например "Документ.РеализацияТоваровУслуг".
//    Входящие - Массив - состав объектов.
//    БезПодписи - Массив - состав объектов для обмена без ЭП.
//    Интеркампани - Массив - состав объектов Интеркампани.
//
Процедура ПодготовитьСтруктуруОбъектовКомандЭДО(СоставКомандЭДО) Экспорт
	
	СоставКомандЭДО.Исходящие.Добавить("Документ.ЗаказПокупателя");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ЗаказПоставщику");
	СоставКомандЭДО.Исходящие.Добавить("Документ.СчетНаОплату");
	СоставКомандЭДО.Исходящие.Добавить("Документ.АктВыполненныхРабот");
	СоставКомандЭДО.Исходящие.Добавить("Документ.РасходнаяНакладная");
	СоставКомандЭДО.Исходящие.Добавить("Документ.КорректировкаРеализации");
	СоставКомандЭДО.Исходящие.Добавить("Документ.СчетФактура");
	
	СоставКомандЭДО.Входящие.Добавить("Документ.ЗаказПокупателя");
	СоставКомандЭДО.Входящие.Добавить("Документ.ЗаказПоставщику");
	СоставКомандЭДО.Входящие.Добавить("Документ.СчетНаОплатуПоставщика");
	СоставКомандЭДО.Входящие.Добавить("Документ.ПриходнаяНакладная");
	СоставКомандЭДО.Входящие.Добавить("Документ.КорректировкаПоступления");
	СоставКомандЭДО.Входящие.Добавить("Документ.СчетФактураПолученный");
	
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ЗаказПокупателя");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ЗаказПоставщику");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.СчетНаОплату");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.СчетНаОплатуПоставщика");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.АктВыполненныхРабот");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ПриходнаяНакладная");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.РасходнаяНакладная");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.КорректировкаПоступления");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.КорректировкаРеализации");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм однократной сделки

// Выполняет заполнение списка документов по виду электронного документа.
//
// Параметры:
//  ВидЭД           - Перечисления   - вид электронного документа;
//  СписокВозврата  - СписокЗначений - список ссылок на документы информационной базы.
//
Процедура СписокТиповДокументовПоВидуЭД(ВидЭД, СписокВозврата) Экспорт
	
	Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12 
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец 
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		
		СписокВозврата.Добавить(
			Документы.ПриходнаяНакладная.ПустаяСсылка(),
			Метаданные.Документы.ПриходнаяНакладная.Представление());
			
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот 
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		
		СписокВозврата.Добавить(
			Документы.ПриходнаяНакладная.ПустаяСсылка(),
			Метаданные.Документы.ПриходнаяНакладная.Представление());
			
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		
		СписокВозврата.Добавить(
			Документы.СчетФактураПолученный.ПустаяСсылка(),
			Метаданные.Документы.СчетФактураПолученный.Представление());
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		
		СписокВозврата.Добавить(
			Документы.СчетНаОплатуПоставщика.ПустаяСсылка(), 
			Метаданные.Документы.СчетНаОплатуПоставщика.Представление());
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		
		СписокВозврата.Добавить(
			Документы.ЗаказПокупателя.ПустаяСсылка(),
			Метаданные.Документы.ЗаказПокупателя.Представление());
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		
		СписокВозврата.Добавить(
			Документы.ЗаказПоставщику.ПустаяСсылка(),
			Метаданные.Документы.ЗаказПоставщику.Представление());
			
	ИначеЕсли ВРег(ВидЭД) = ВРег("РеквизитыОрганизации") Тогда
		
		СписокВозврата.Добавить(
			Справочники.Контрагенты.ПустаяСсылка(),
			Метаданные.Справочники.Контрагенты.Представление());
			
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		
		СписокВозврата.Добавить(
			Документы.КорректировкаПоступления.ПустаяСсылка(),
			Метаданные.Документы.КорректировкаПоступления.Представление());

	КонецЕсли;
	
КонецПроцедуры

// Задает имя файла "по умолчанию", с которым будет предложено пользователю сохранить
// ЭД при выгрузке по сценарию "Однократной сделки".
//
// Параметры:
//  ВладелецЭД - ссылка на документ ИБ, на основании которого формируется и выгружается ЭД,
//  НаименованиеФайла - Строка - имя файла.
//
Процедура ЗадатьИмяСохраняемогоФайлаПриБыстромОбмене(ВладелецЭД, НаименованиеФайла) Экспорт
	
КонецПроцедуры

// Получает реквизиты элемнта справочника "Организации", для выгрузки в xml-файл.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - элемент справочника организации;
//  СтруктураВозврата - структура - перечень параметров организации.
//
Процедура ПолучитьРеквизитыОрганизацииДляВыгрузкиВФайл(Организация, СтруктураВозврата) Экспорт
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, 
		"Наименование, НаименованиеПолное, ИНН, КПП, КодПоОКПО, ЮридическоеФизическоеЛицо, СвидетельствоСерияНомер, СвидетельствоДатаВыдачи");
		
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, РеквизитыОрганизации);
	СтруктураВозврата.ОКПО = РеквизитыОрганизации.КодПоОКПО;
	
	ЮрАдресОрганизации = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьАдресИзКонтактнойИнформации(Организация, "Юр");
	СтруктураВозврата.ЮридическийАдрес     = ЮрАдресОрганизации.Представление;
	СтруктураВозврата.ЗначенияПолейЮрАдрес = ЮрАдресОрганизации.ЗначенияПолей;
	
	ФактАдресОрганизации = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьАдресИзКонтактнойИнформации(Организация, "Факт");
	СтруктураВозврата.ФактическийАдрес       = ФактАдресОрганизации.Представление;
	СтруктураВозврата.ЗначенияПолейФактАдрес = ФактАдресОрганизации.ЗначенияПолей;
	
	СтруктураВозврата.Телефон = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьТелефонИзКонтактнойИнформации(Организация);
	
	Если СтруктураВозврата.ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		СтруктураОтветственных = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ОтветственныеЛицаОрганизационнойЕдиницы(Организация);
		СтруктураВозврата.Руководитель          = СтруктураОтветственных.РасшифровкаПодписиРуководителя;
		СтруктураВозврата.ДолжностьРуководителя = СтруктураОтветственных.ДолжностьРуководителя;
	Иначе
		СтруктураВозврата.СвидетельствоНомер = РеквизитыОрганизации.СвидетельствоСерияНомер;
		СтруктураВозврата.СвидетельствоДата  = РеквизитыОрганизации.СвидетельствоДатаВыдачи;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции

// Позволяет переопределить порядок создания типов объектов в дереве. Это может быть необходимо, когда одни типы
// зависимы от других, например, номенклатура поставщика, как правило, зависима от номенклатуры. Используется при
// заполнении в дереве электронного документа ссылок на объекты информационной базы.
//
// Параметры:
//  Таблица	 - ТаблицаЗначений - содержит колонки:
//    * ТипОбъекта - Строка - строковый идентификатор библиотечного типа.
//    * Порядок - Число - порядок создания типа в дереве (нумеруется с 1).
//
Процедура ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов(Таблица) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ТипОбъекта");
	Таблица.Колонки.Добавить("Порядок");
	
	НовСтрока = Таблица.Добавить();
	НовСтрока.ТипОбъекта = "НоменклатураПоставщиков";
	НовСтрока.Порядок    = 2;
	
КонецПроцедуры

// Получает имя временного файла.
//
// Параметры:
//  ИмяВременногоФайла - Строка - имя временного файла;
//  Расширение - Строка - расширение для временного файла.
//
Процедура ТекущееИмяВременногоФайла(ИмяВременногоФайла, Расширение = "") Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	
КонецПроцедуры

// Осуществляет разбор файла с реквизитами контрагента
// в ней можно внести изменения в структуру возвращаемых данных
//
// Параметры:
//  СсылкаНаФайл - адрес хранилища файла с реквизитами контрагента;
//  СтруктураВозврата - Структура - перечень параметров;
//  ОшибкаРазбора - текст, описание ошибки.
//
// Возвращаемое значение:
//  РезультатРазбора - Булево - Истина - разбор файла выполнен; Ложь - разбор файла не выполнялся.
//
Процедура РазобратьФайлРеквизитовКонтрагента(СсылкаНаФайл, СтруктураВозврата, РезультатРазбора, ОшибкаРазбора) Экспорт
	
	
КонецПроцедуры

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
// Если не задан альтернативный алгоритм получения значений реквизитов (процедура пуста), то используется функция БСП:
// ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов).
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИменаРеквизитов - Строка или Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то имя поля берется из ключа.
//  СтруктураДанных - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Процедура ПолучитьСтруктуруЗначенийРеквизитов(Ссылка, ИменаРеквизитов, СтруктураДанных) Экспорт
	
	
КонецПроцедуры

// В процедуре указывается соответствие строковых представлений ставок НДС (используемые в БЭД)
// с прикладными значениями этих ставок.
//
// Параметры:
//   Соответствие - Соответствие - заполняемое соответствие ставок НДС.
//
// Пример:
//   Соответствие.Вставить("0",       Перечисления.СтавкиНДС.НДС0);
//   Соответствие.Вставить("10",      Перечисления.СтавкиНДС.НДС10);
//   Соответствие.Вставить("18",      Перечисления.СтавкиНДС.НДС18);
//   Соответствие.Вставить("10/110",  Перечисления.СтавкиНДС.НДС10_110);
//   Соответствие.Вставить("18/118",  Перечисления.СтавкиНДС.НДС18_118);
//   Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
//
Процедура ЗаполнитьСоответствиеСтавокНДС(Соответствие) Экспорт
	
	Соответствие.Вставить("0",       Справочники.СтавкиНДС.ПустаяСсылка());
	Соответствие.Вставить("10",      Справочники.СтавкиНДС.ПустаяСсылка());
	Соответствие.Вставить("18",      Справочники.СтавкиНДС.ПустаяСсылка());
	Соответствие.Вставить("20",      Справочники.СтавкиНДС.ПустаяСсылка());
	Соответствие.Вставить("10/110",  Справочники.СтавкиНДС.ПустаяСсылка());
	Соответствие.Вставить("18/118",  Справочники.СтавкиНДС.ПустаяСсылка());
	Соответствие.Вставить("20/120",  Справочники.СтавкиНДС.ПустаяСсылка());
	Соответствие.Вставить("без НДС", Справочники.СтавкиНДС.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	""0"" КАК Ставка,
	|	СтавкиНДС.Ссылка КАК Значение
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.Ставка = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""10"",
	|	СтавкиНДС.Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.Ставка = 10
	|	И НЕ СтавкиНДС.Расчетная
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""18"",
	|	СтавкиНДС.Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.Ставка = 18
	|	И НЕ СтавкиНДС.Расчетная
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""20"",
	|	СтавкиНДС.Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.Ставка = 20
	|	И НЕ СтавкиНДС.Расчетная
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""10/110"",
	|	СтавкиНДС.Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.Ставка = 10
	|	И СтавкиНДС.Расчетная
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""18/118"",
	|	СтавкиНДС.Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.Ставка = 18
	|	И СтавкиНДС.Расчетная
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""20/120"",
	|	СтавкиНДС.Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.Ставка = 20
	|	И СтавкиНДС.Расчетная
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	""без НДС"",
	|	СтавкиНДС.Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.Ставка = 0
	|	И СтавкиНДС.НеОблагается";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.Ставка, Выборка.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Определяет Счета-Фактуры по документам основаниям.
// 
// Параметры:
//  МассивОснований - Массив - массив ссылок на документы основания.
//  МассивСФ - Массив - массив для заполнения ссылками на счета-фактуры.
//  НаправлениеЭД - ПеречислениеСсылка.НаправленияЭД - направление электронного документа.
// 
Процедура ЗаполнитьСчетаФактурыПоДокументамОснования(МассивОснований, МассивСФ, НаправлениеЭД) Экспорт
	
	Если НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СчетФактура.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактура
		|ГДЕ
		|	СчетФактура.ДокументОснование В(&МассивОснований)
		|	И НЕ СчетФактура.ПометкаУдаления";
		
	Иначе
		
		// Для исходящих СФ документы основания хранятся в ТЧ ДокументыОснования
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СчетФактураДокументыОснования.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетФактура.ДокументыОснования КАК СчетФактураДокументыОснования
		|ГДЕ
		|	СчетФактураДокументыОснования.ДокументОснование В(&МассивОснований)";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОснований", МассивОснований);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСФ.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Переопределяет разрешение использовать механизм прямого обмена между организациями.
//
// Параметры:
//  Отказ - Булево - Истина, если использование обмена между организациями запрещено;
//    Ложь - в противном случае;
//    Значение по умолчанию - Ложь;
//
// Пример:
//	Если <Выражение> Тогда
//		Отказ = Истина;
//	КонецЕсли;
//
Процедура ИспользоватьОбменЭДМеждуОрганизациями(Отказ) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Реквизиты организации формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - СправочникСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево значений, соответствующее макету РеквизитыОрганизации обработки ОбменСКонтрагентами.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеРеквизитыОрганизации(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт


КонецПроцедуры

// Подготавливает данные для электронного документа типа ПрайсЛист формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - Дерево значений, соответствующее макету ПрайсЛист обработки ОбменСКонтрагентами.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента, Отказ) Экспорт
		
КонецПроцедуры

// Подготавливает данные для электронного документа типа Счет формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету СчетНаОплату обработки ОбменСКонтрагентами.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента, Отказ) Экспорт
	
	ДанныеДокумента = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеСчетНаОплату(СсылкаНаОбъект);
	
	РеквизитыШапки  = ДанныеДокумента.РеквизитыШапки;
	ТабличнаяЧасть = ДанныеДокумента.ТаблицаРабот;
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Документ не содержит данных для формирования ЭД ""%1""'"),
			СтруктураЭД.ВидЭД);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ШтрихКод");
	ТаблицаТоваров.Колонки.Добавить("ИдТовараУКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("Описание");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаСсылка");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("НДСУчтеноВСумме");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	ТаблицаТоваров.Колонки.Добавить("ПроцентСкидки");
	
	Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		
		СтрокаТаблицыТоваров = ТаблицаТоваров.Добавить();
		
		СтрокаТаблицыТоваров.НомерСтроки 						   = ДанныеСтроки.НомерСтроки;
		СтрокаТаблицыТоваров.Артикул 							   = ДанныеСтроки.Артикул;
		СтрокаТаблицыТоваров.Наименование 						   = ДанныеСтроки.НаименованиеНоменклатуры;
		СтрокаТаблицыТоваров.Описание 							   = ДанныеСтроки.Содержание;
		СтрокаТаблицыТоваров.Номенклатура 						   = ДанныеСтроки.Номенклатура;
		СтрокаТаблицыТоваров.БазоваяЕдиницаСсылка 				   = ДанныеСтроки.ЕдиницаИзмеренияДокумент;
		СтрокаТаблицыТоваров.БазоваяЕдиницаКод 					   = СокрЛП(ДанныеСтроки.ЕдиницаИзмеренияКод);
		СтрокаТаблицыТоваров.БазоваяЕдиницаНаименование 		   = ДанныеСтроки.ЕдиницаИзмеренияНаименование;
		СтрокаТаблицыТоваров.БазоваяЕдиницаНаименованиеПолное 	   = ДанныеСтроки.ЕдиницаИзмеренияНаименованиеПолное;
		СтрокаТаблицыТоваров.БазоваяЕдиницаМеждународноеСокращение = ДанныеСтроки.ЕдиницаИзмеренияМеждународноеСокращение;
		СтрокаТаблицыТоваров.ЕдиницаИзмерения			 		   = ДанныеСтроки.ЕдиницаИзмерения;
		СтрокаТаблицыТоваров.ЕдиницаИзмеренияКодПоОКЕИ			   = СокрЛП(ДанныеСтроки.ЕдиницаИзмеренияКод);
		СтрокаТаблицыТоваров.Цена 								   = ДанныеСтроки.Цена;
		СтрокаТаблицыТоваров.Количество 						   = ДанныеСтроки.Количество;
		СтрокаТаблицыТоваров.Сумма 								   = ДанныеСтроки.Сумма;
		СтрокаТаблицыТоваров.НДСУчтеноВСумме 					   = РеквизитыШапки.СуммаВключаетНДС;
		
		СтрокаТаблицыТоваров.СуммаНДС = ДанныеСтроки.СуммаНДС;
		СтрокаТаблицыТоваров.СтавкаНДС = ДанныеСтроки.СтавкаНДС;
		
		СтрокаТаблицыТоваров.СуммаСкидки = ДанныеСтроки.СуммаСкидки;
		СтрокаТаблицыТоваров.ПроцентСкидки = ДанныеСтроки.ПроцентСкидки;
		
	КонецЦикла;
	
	СведенияОПоставщике = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.ДатаДокумента);
	СведенияОПокупателе = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.ДатаДокумента);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Продавец",   "Юр");
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Покупатель", "Юр");
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта", РеквизитыШапки.ВалютаКод);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс",   РеквизитыШапки.КурсВзаиморасчетов);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "НазначениеПлатежа", "");   
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "СрокПлатежа", '00010101'); 
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров, СсылкаНаОбъект);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	// Расчетный счет
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.НомерСчета", РеквизитыШапки.НомерСчета);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.Наименование", РеквизитыШапки.БанкНаименование);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.БИК", РеквизитыШапки.БИК);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.СчетКорреспондентский", РеквизитыШапки.КоррСчет);
	
	Если ЗначениеЗаполнено(РеквизитыШапки.БанкДляРасчетов) Тогда
		
		РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыШапки.БанкДляРасчетов, "Наименование,КоррСчет,Код");
		
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.Наименование", РеквизитыБанка.Наименование);
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.БИК", РеквизитыБанка.Код);
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский", РеквизитыБанка.КоррСчет);
	
	КонецЕсли;
	
	// Итоги по документу
	СуммаСкидки = ТаблицаТоваров.Итог("СуммаСкидки");
	
	ТекстОшибки = НСтр("ru = 'Не удалось итоговые стоимостные показатели. Возможные причины:
		|	- не заполнена табличная часть ""Товары""
		|	- не заполнена колонка ""Сумма""'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма", 
		РеквизитыШапки.СуммаДокумента, ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.Сумма",
		РеквизитыШапки.СуммаДокумента, ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС",
		РеквизитыШапки.СуммаВключаетНДС, ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНДС",
		ТаблицаТоваров.Итог("СуммаНДС"), ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаСкидки", 
		СуммаСкидки, ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаБезСкидки",
		РеквизитыШапки.СуммаДокумента + СуммаСкидки, ТекстОшибки);
	
	// Итоговая строка
	СуммаКПрописи = РеквизитыШапки.СуммаДокумента;
	
	ШаблонСтроки =	НСтр("ru = 'Всего наименований %1, на сумму %2'");
	
	ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТоваров.Количество());
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",		 УправлениеНебольшойФирмойСервер.ФорматСумм(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента));
	СуммаПрописью  = УправлениеНебольшойФирмойСервер.СформироватьСуммуПрописью(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ЗаказТоваров формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету ЗаказТовара обработки ОбменСКонтрагентами.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента, Отказ) Экспорт
	
	Если СсылкаНаОбъект.ВидОперации <> Перечисления.ВидыОперацийЗаказПоставщику.ЗаказНаЗакупку Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя создать электронный документ для вида операции ""%1""!'"), СсылкаНаОбъект.ВидОперации);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	ДанныеДокумента = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЗаказПоставщику(СсылкаНаОбъект);
	
	РеквизитыШапки  = ДанныеДокумента.РеквизитыШапки;
	ТабличнаяЧасть = ДанныеДокумента.ТаблицаТоваров;
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Документ не содержит данных для формирования ЭД ""%1""'"),
			СтруктураЭД.ВидЭД);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НоменклатураПоставщика");
	ТаблицаТоваров.Колонки.Добавить("ИдТовараУКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Описание");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКоэффициент");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("НДСУчтеноВСумме");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	ТаблицаТоваров.Колонки.Добавить("ПроцентСкидки");
	
	НеУдалосьСопоставитьНоменклатуру = Ложь;
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		
		Если СтрокаТаблицы.ИдТовараУКонтрагента = Неопределено Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось сопоставить номенклатуру ""%1"" с номенклатурой поставщика'"),
					Строка(СтрокаТаблицы.Номенклатура) + ?(ЗначениеЗаполнено(СтрокаТаблицы.Характеристика), "(" + СтрокаТаблицы.Характеристика + ")", "") 
																		)
				);
				
			НеУдалосьСопоставитьНоменклатуру = Истина;
		КонецЕсли;
			
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		НоваяСтрока.Описание = СтрокаТаблицы.Содержание;
		
	КонецЦикла;
	
	Если НеУдалосьСопоставитьНоменклатуру Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Формирование электронного документа отменено.'"));
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		СведенияОПоставщике = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.ДатаДокумента);
		СведенияОПокупателе = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.ДатаДокумента);
	Иначе
		СведенияОПоставщике = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.ДатаДокумента);
		СведенияОПокупателе = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.ДатаДокумента);
	КонецЕсли;
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Продавец",   "Юр");
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Покупатель", "Юр");
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Получатель", "Юр");
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта", РеквизитыШапки.ВалютаКод);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс",   РеквизитыШапки.КурсВзаиморасчетов);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма",  ТаблицаТоваров.Итог("Сумма"));
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Комментарий", РеквизитыШапки.Комментарий);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДокументыОснования", РеквизитыШапки.ДокументОснование);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДокументыСделки(ДеревоДокумента, РеквизитыШапки);
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	// Расчетный счет
	Если ЗначениеЗаполнено(РеквизитыШапки.НомерСчета) Тогда
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.НомерСчета", РеквизитыШапки.НомерСчета);
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.Наименование", РеквизитыШапки.БанкНаименование);
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.БИК", РеквизитыШапки.БИК);
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.СчетКорреспондентский", РеквизитыШапки.КоррСчет);
		
		Если ЗначениеЗаполнено(РеквизитыШапки.БанкДляРасчетов) Тогда
			
			РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыШапки.БанкДляРасчетов, "Наименование,КоррСчет,Код");
			
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.Наименование", РеквизитыБанка.Наименование);
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.БИК", РеквизитыБанка.Код);
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский", РеквизитыБанка.КоррСчет);
		
		КонецЕсли;
	КонецЕсли;
	
	// Итоги по документу
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаИтог", ТаблицаТоваров.Итог("Сумма"));
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНалогаИтог", ТаблицаТоваров.Итог("СуммаНДС"));
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", РеквизитыШапки.СуммаВключаетНДС);
	
	// Итоговая строка
	СуммаКПрописи = ТаблицаТоваров.Итог("Сумма");
	
	ШаблонСтроки =	НСтр("ru = 'Всего наименований %1, на сумму %2'");
	
	ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТоваров.Количество());
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",		 УправлениеНебольшойФирмойСервер.ФорматСумм(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента));
	СуммаПрописью  = УправлениеНебольшойФирмойСервер.СформироватьСуммуПрописью(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтветНаЗаказ формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету ОтветНаЗаказ обработки ОбменСКонтрагентами.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента, Отказ) Экспорт
	
	Если СсылкаНаОбъект.ВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя создать электронный документ для вида операции ""%1""!'"), СсылкаНаОбъект.ВидОперации);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	ДанныеДокумента = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЗаказПокупателя(СсылкаНаОбъект);
	
	РеквизитыШапки  = ДанныеДокумента.РеквизитыШапки;
	ТабличнаяЧасть = ДанныеДокумента.ТаблицаТоваров;
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Документ не содержит данных для формирования ЭД ""%1""'"),
			СтруктураЭД.ВидЭД);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Описание");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаСсылка");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКоэффициент");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("НДСУчтеноВСумме");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	ТаблицаТоваров.Колонки.Добавить("ПроцентСкидки");
	
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		НоваяСтрока.БазоваяЕдиницаСсылка = СтрокаТаблицы.БазоваяЕдиница;
		НоваяСтрока.Описание = СтрокаТаблицы.Содержание;
		
		
	КонецЦикла;
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "НомерДокументаОснования", РеквизитыШапки.НомерПоДаннымКлиента);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДатаДокументаОснования", РеквизитыШапки.ДатаПоДаннымКлиента);
	
	СведенияОПоставщике = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.ДатаДокумента);
	СведенияОПокупателе = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.ДатаДокумента);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Продавец",   "Юр");
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Покупатель", "Юр");
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Получатель", "Юр");
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта", РеквизитыШапки.ВалютаКод);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс",   РеквизитыШапки.КурсВзаиморасчетов);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма",  ТаблицаТоваров.Итог("Сумма"));
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Комментарий", РеквизитыШапки.Комментарий);
	
	СуммаСкидки = ТаблицаТоваров.Итог("СуммаСкидки");
	
	ТекстОшибки = НСтр("ru = 'Не удалось итоговые стоимостные показатели. Возможные причины:
		|	- не заполнена табличная часть ""Товары""
		|	- не заполнена колонка ""Сумма""'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС",
		РеквизитыШапки.СуммаВключаетНДС, ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаИтог",
		РеквизитыШапки.СуммаДокумента, ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНалогаИтог",
		ТаблицаТоваров.Итог("СуммаНДС"), ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаБезСкидкиИтог",
		РеквизитыШапки.СуммаДокумента + СуммаСкидки, ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаСкидкиИтог", 
		СуммаСкидки, ТекстОшибки);
		
	// Документ основание.
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(СсылкаНаОбъект, 
		"Объект.ДокументОснование");
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДокументыОснования", РеквизитыШапки.ДокументОснование, ПараметрыОбработкиОшибок);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДокументыСделки(ДеревоДокумента, РеквизитыШапки);
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров, СсылкаНаОбъект);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	// Расчетный счет
	Если ЗначениеЗаполнено(РеквизитыШапки.НомерСчета) Тогда
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.НомерСчета", РеквизитыШапки.НомерСчета);
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.Наименование", РеквизитыШапки.БанкНаименование);
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.БИК", РеквизитыШапки.БИК);
		УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.СчетКорреспондентский", РеквизитыШапки.КоррСчет);
		
		Если ЗначениеЗаполнено(РеквизитыШапки.БанкДляРасчетов) Тогда
			
			РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыШапки.БанкДляРасчетов, "Наименование,КоррСчет,Код");
			
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.Наименование", РеквизитыБанка.Наименование);
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.БИК", РеквизитыБанка.Код);
			УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский", РеквизитыБанка.КоррСчет);
		
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение данных о доставке.
	АдресДоставки = Новый Структура("АдресДоставки", РеквизитыШапки.АдресДоставки);
	АдресДоставкиЗначенияПолей = Новый Структура("АдресДоставкиЗначенияПолей", РеквизитыШапки.АдресДоставкиЗначенияПолей);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.СпособДоставки",
		?(РеквизитыШапки.СпособДоставки = Перечисления.СпособыДоставки.Курьер, "Доставка", "Самовывоз"));
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.АдресДоставки", РеквизитыШапки.АдресДоставки);
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.АдресДоставкиЗначенияПолей",
		РеквизитыШапки.АдресДоставкиЗначенияПолей);
	
	// Итоги по документу
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаИтог", ТаблицаТоваров.Итог("Сумма"));
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНалогаИтог", ТаблицаТоваров.Итог("СуммаНДС"));
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", РеквизитыШапки.СуммаВключаетНДС);
	
	// Итоговая строка
	СуммаКПрописи = РеквизитыШапки.СуммаДокумента;
	
	ШаблонСтроки =	НСтр("ru = 'Всего наименований %1, на сумму %2'");
	
	ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТоваров.Количество());
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",		 УправлениеНебольшойФирмойСервер.ФорматСумм(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента));
	СуммаПрописью  = УправлениеНебольшойФирмойСервер.СформироватьСуммуПрописью(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитенту формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//    Параметр ДополнительныеРеквизитыДляТаблицыТоваров в общей структуре параметров предназначен для заполнения
//    колонки ДополнительныеРеквизиты в таблице товаров.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету ОтчетКомиссионераОПродажах обработки ОбменСКонтрагентами.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента, Отказ) Экспорт
		
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитентуОСписании формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету ОтчетКомиссионераОСписании обработки ОбменСКонтрагентами.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоОтчетуОСписанииКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента, Отказ) Экспорт
 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм выгрузки электронных документов в файлы для отправки в ФНС через сервис 1С-Отчетность

// Функция должна возвращать дату и номер документов оснований (договоров) по массиву ссылок.
// Параметры функции:
// Парам 1 -  массив ссылок на документы ИБ
// (в качестве возможных значений следует принимать те типы документов,
// на основании которых в данном прикладном решении формируется электронный документ вида «Акт приемки-сдачи работ (услуг)»)
//
// Параметры:
//  МассивСсылок - массив ссылок на документы ИБ;
//  ВозвращаемоеСоответствие - Соответствие со следующими свойствами:
//    ключ соответствия - ссылка на выгружаемый документ ИБ, взятая из входящего параметра
//    значение соответствия - Структура, с полями:
//    НомерДоговора, тип: Строка
//    ДатаДоговора, тип: Дата
// В случае, если требуемые реквизиты у договора не заполнены или при невозможности получения данных реквизитов, помещать пустые значения указанных типов.
//
Процедура ПолучитьНомерДатаДоговораДокументов(МассивСсылок, ВозвращаемоеСоответствие) Экспорт
	
	
КонецПроцедуры

Функция ПолучитьТипОбъектаCML(Тип, ВерсияСхемы)
	
	МассивПути = СтрРазделить_Локальная(Тип, ".");
	
	ПервыйЭлемент = МассивПути[0];
	Если Лев(ПервыйЭлемент,1) = "{" И Прав(ПервыйЭлемент,1) = "}" Тогда
		ИмяПакета = Сред(ПервыйЭлемент, 2, СтрДлина(ПервыйЭлемент) - 2);
		Коллекция = ФабрикаXDTO.Пакеты.Получить(ИмяПакета).КорневыеСвойства;
	ИначеЕсли ВерсияСхемы <> "4.02" Тогда
		ТипОбъекта = ФабрикаXDTO.Тип(ВерсияСхемы, ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	Иначе
		ТипОбъекта = ФабрикаXDTO.Тип("http://v8.1c.ru/edi/edi_stnd", ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	КонецЕсли;
	
	МассивПути.Удалить(0);
	Пока МассивПути.Количество() > 0 Цикл
		
		Если Коллекция = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Свойство = Коллекция.Получить(МассивПути[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТипОбъекта = Свойство.Тип;
		МассивПути.Удалить(0);
		Попытка
			Коллекция = ТипОбъекта.Свойства;
		Исключение
			Коллекция = Неопределено;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТипОбъекта;
	
КонецФункции

Функция СтрРазделить_Локальная(Знач Строка, Разделитель)
	
	Результат = Новый Массив;
	Если ПустаяСтрока(Строка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	НачПозицияПервогоЭлемента = СтрНайти(Строка, "{");
	КонПозицияПервогоЭлемента = СтрНайти(Строка, "}");
	Если НачПозицияПервогоЭлемента > 0 И КонПозицияПервогоЭлемента > 0 Тогда
		ПервыйЭлемент = Сред(Строка, НачПозицияПервогоЭлемента, КонПозицияПервогоЭлемента);
		Результат.Добавить(СокрЛП(ПервыйЭлемент));
		Строка = СокрЛП(Сред(Строка,КонПозицияПервогоЭлемента + 2));
	КонецЕсли;
	
	Пока Истина Цикл
		Позиция = СтрНайти(Строка,Разделитель);
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Результат.Добавить(СокрЛП(Лев(Строка,Позиция - 1)));
		Строка = СокрЛП(Сред(Строка,Позиция + 1));
	КонецЦикла;
	
	Результат.Добавить(СокрЛП(Строка));
	
	Возврат Результат;
	
КонецФункции 

