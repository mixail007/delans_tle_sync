
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ СВЕДЕНИЙ ОБ ОРГАНИЗАЦИИ
//

// Функция возвращает сведения об организации.
//
// Параметры:
//  Организация       - ссылка на элемент справочника "Организации";
//  ДатаЗначения      - дата, на которую нужно получить сведения;
//  СписокПоказателей - список показателей, значения которых нужно вернуть.
//  
// Возвращаемое значение:
//  Структура с ключами из списка показателей и возвращаемыми значениями.
//
// Пример:
//	ОргСведения = Новый Структура;
//  Для Каждого Показатель Из СписокПоказателей Цикл
//  	ИмяПоказателя = Показатель.Представление;
//      Если Имяпоказателя = "КодНО" Тогда
//      	Значение = Организация.КодНалоговогоОргана;
//      ИначеЕсли ИмяПоказателя = "ОГРН" Тогда
//      	Значение = Организация.ОГРН;
//      Иначе
//      	Значение = "";
//      КонецЕсли;
//      ОргСведения.Вставить(ИмяПоказателя, Значение);
//  КонецЦикла;
//  Возврат ОргСведения;
//
Функция ПолучитьСведенияОбОрганизации(Знач Организация, Знач ДатаЗначения = Неопределено, Знач СписокПоказателей = Неопределено) Экспорт
	Перем ОргСведения;
	Перем Значение;

	// Структура, в которой будут возвращаться найденные значения
	ОргСведения = Новый Структура;
	
	Если ДатаЗначения = Неопределено Тогда
		ДатаЗначения = ТекущаяДатаСеанса();
	КонецЕсли;
	ДатаЗначения = КонецДня(ДатаЗначения);
	
	ПустаяДата = '00010101000000';
	ПустойАдрес = ",,,,,,,,,";
	
	Организация = Организация.ПолучитьОбъект();
	Организация.Прочитать();
	
	Кэш = Новый Структура;
	Кэш.Вставить("Организация", Организация);
	Кэш.Вставить("ДатаЗначения", ДатаЗначения);
	
	ПБОЮЛ = НЕ ЭтоЮридическоеЛицо(Организация.Ссылка);
	Кэш.Вставить("ПБОЮЛ", ПБОЮЛ);
	
	ДомашнийТелефонФизЛица = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица;
	
	Если СписокПоказателей = Неопределено Тогда
		
		СписокПоказателей = Новый Массив;
		СписокПоказателей.Добавить("СтавкаПрибФед");
		СписокПоказателей.Добавить("СтавкаПрибРесп");
		СписокПоказателей.Добавить("СтавкаПрибМест");
		СписокПоказателей.Добавить("ТипНП");
		СписокПоказателей.Добавить("КатНП");
		СписокПоказателей.Добавить("НаимНО");
		СписокПоказателей.Добавить("КодНО");
		СписокПоказателей.Добавить("ОснВидДеят");
		СписокПоказателей.Добавить("ОКВЭД");
		СписокПоказателей.Добавить("ОКВЭД2");
		СписокПоказателей.Добавить("ОГРН");
		СписокПоказателей.Добавить("ОКАТО");
		СписокПоказателей.Добавить("ОКТМО");
		СписокПоказателей.Добавить("РегНомПФР");
		СписокПоказателей.Добавить("ИПРегНомПФР");
		СписокПоказателей.Добавить("НаимОргПФР");
		СписокПоказателей.Добавить("ОКПО");
		СписокПоказателей.Добавить("ОргПравФорм");
		СписокПоказателей.Добавить("ОКОПФ");
		СписокПоказателей.Добавить("ФормСобств");
		СписокПоказателей.Добавить("ОКФС");
		СписокПоказателей.Добавить("ДатаРегистрации");
		СписокПоказателей.Добавить("АдрПочт");
		СписокПоказателей.Добавить("АдрПочт_XML");
		СписокПоказателей.Добавить("АдрПочт_JSON");
		СписокПоказателей.Добавить("АдрФакт");
		СписокПоказателей.Добавить("АдрФакт_XML");
		СписокПоказателей.Добавить("АдрФакт_JSON");
		СписокПоказателей.Добавить("СвидСН");
		СписокПоказателей.Добавить("СвидДВ");
		СписокПоказателей.Добавить("СвидНО");
		СписокПоказателей.Добавить("СвидНОКод");
		СписокПоказателей.Добавить("НаимЮЛПол");
		СписокПоказателей.Добавить("ИННЮЛ");
		СписокПоказателей.Добавить("КППЮЛ");
		СписокПоказателей.Добавить("АдрЮР");
		СписокПоказателей.Добавить("АдрЮР_XML");
		СписокПоказателей.Добавить("АдрЮР_JSON");
		СписокПоказателей.Добавить("ОргИндекс");
		СписокПоказателей.Добавить("ОргСубъект");
		СписокПоказателей.Добавить("ОргКодСубъект");
		СписокПоказателей.Добавить("ОргРайон");
		СписокПоказателей.Добавить("ОргГород");
		СписокПоказателей.Добавить("ОргНПункт");
		СписокПоказателей.Добавить("ОргУлица");
		СписокПоказателей.Добавить("ОргДом");
		СписокПоказателей.Добавить("ОргКорпус");
		СписокПоказателей.Добавить("ОргКвартира");
		СписокПоказателей.Добавить("НаимОППол");
		СписокПоказателей.Добавить("КППОП");
		СписокПоказателей.Добавить("АдрОП");
		СписокПоказателей.Добавить("АдрОП_XML");
		СписокПоказателей.Добавить("АдрОП_JSON");
		СписокПоказателей.Добавить("ИндексОП");
		СписокПоказателей.Добавить("СубъектОП");
		СписокПоказателей.Добавить("КодСубъектОП");
		СписокПоказателей.Добавить("РайонОП");
		СписокПоказателей.Добавить("ГородОП");
		СписокПоказателей.Добавить("НПунктОП");
		СписокПоказателей.Добавить("УлицаОП");
		СписокПоказателей.Добавить("ДомОП");
		СписокПоказателей.Добавить("КорпусОП");
		СписокПоказателей.Добавить("КвартираОП");
		СписокПоказателей.Добавить("НаимОИОПол");
		СписокПоказателей.Добавить("ИННИО");
		СписокПоказателей.Добавить("КППИО");
		СписокПоказателей.Добавить("АдрОтдИОРФ");
		СписокПоказателей.Добавить("АдрОтдИОРФ_XML");
		СписокПоказателей.Добавить("АдрОтдИОРФ_JSON");
		СписокПоказателей.Добавить("ИндексОИО");
		СписокПоказателей.Добавить("СубъектОИО");
		СписокПоказателей.Добавить("КодСубъектОИО");
		СписокПоказателей.Добавить("РайонОИО");
		СписокПоказателей.Добавить("ГородОИО");
		СписокПоказателей.Добавить("НПунктОИО");
		СписокПоказателей.Добавить("УлицаОИО");
		СписокПоказателей.Добавить("ДомОИО");
		СписокПоказателей.Добавить("КорпусОИО");
		СписокПоказателей.Добавить("КвартираОИО");
		СписокПоказателей.Добавить("КодИОСтрРег");
		СписокПоказателей.Добавить("НаимИОПол");
		СписокПоказателей.Добавить("СтрИО");
		СписокПоказателей.Добавить("КодСтрИО");
		СписокПоказателей.Добавить("СтрПостИО");
		СписокПоказателей.Добавить("КодСтрПостИО");
		СписокПоказателей.Добавить("АдрИО");
		СписокПоказателей.Добавить("АдрИО_XML");
		СписокПоказателей.Добавить("АдрИО_JSON");
		СписокПоказателей.Добавить("ФИО");
		СписокПоказателей.Добавить("ФИООтпрФЛ");
		СписокПоказателей.Добавить("ФамилияИП");
		СписокПоказателей.Добавить("ИмяИП");
		СписокПоказателей.Добавить("ОтчествоИП");
		СписокПоказателей.Добавить("ИННФЛ");
		СписокПоказателей.Добавить("СНИЛС");
		СписокПоказателей.Добавить("ДатаРожд");
		СписокПоказателей.Добавить("МестоРожд");
		СписокПоказателей.Добавить("Пол");
		СписокПоказателей.Добавить("Гражд");
		СписокПоказателей.Добавить("ГраждСтрана");
		СписокПоказателей.Добавить("КодУдЛичн");
		СписокПоказателей.Добавить("ВидУдЛичн");
		СписокПоказателей.Добавить("ОрганВыданУдЛичн");
		СписокПоказателей.Добавить("СерияУдЛичн");
		СписокПоказателей.Добавить("НомерУдЛичн");
		СписокПоказателей.Добавить("ДатаУдЛичн");
		СписокПоказателей.Добавить("АдрПрописки");
		СписокПоказателей.Добавить("АдрПрописки_XML");
		СписокПоказателей.Добавить("АдрПрописки_JSON");
		СписокПоказателей.Добавить("АдрМЖ");
		СписокПоказателей.Добавить("АдрМЖ_XML");
		СписокПоказателей.Добавить("АдрМЖ_JSON");
		СписокПоказателей.Добавить("ИндексМЖ");
		СписокПоказателей.Добавить("СубъектМЖ");
		СписокПоказателей.Добавить("КодСубъектМЖ");
		СписокПоказателей.Добавить("РайонМЖ");
		СписокПоказателей.Добавить("ГородМЖ");
		СписокПоказателей.Добавить("НПунктМЖ");
		СписокПоказателей.Добавить("УлицаМЖ");
		СписокПоказателей.Добавить("ДомМЖ");
		СписокПоказателей.Добавить("КорпусМЖ");
		СписокПоказателей.Добавить("КвартираМЖ");
		СписокПоказателей.Добавить("ТелСлуж");
		СписокПоказателей.Добавить("ТелДом");
		СписокПоказателей.Добавить("ФИОРук");
		СписокПоказателей.Добавить("ДолжнРук");
		СписокПоказателей.Добавить("ФамилияРук");
		СписокПоказателей.Добавить("ИмяРук");
		СписокПоказателей.Добавить("ОтчествоРук");
		СписокПоказателей.Добавить("ИННРук");
		СписокПоказателей.Добавить("ДатаРождРук");
		СписокПоказателей.Добавить("МестоРождРук");
		СписокПоказателей.Добавить("ПолРук");
		СписокПоказателей.Добавить("ГраждРук");
		СписокПоказателей.Добавить("ГраждСтранаРук");
		СписокПоказателей.Добавить("ТелРук");
		СписокПоказателей.Добавить("КодУдЛичнРук");
		СписокПоказателей.Добавить("ВидУдЛичнРук");
		СписокПоказателей.Добавить("ОрганВыданУдЛичнРук");
		СписокПоказателей.Добавить("СерияУдЛичнРук");
		СписокПоказателей.Добавить("НомерУдЛичнРук");
		СписокПоказателей.Добавить("ДатаУдЛичнРук");
		СписокПоказателей.Добавить("АдрМЖРукРФ");
		СписокПоказателей.Добавить("АдрМЖРукРФ_XML");
		СписокПоказателей.Добавить("АдрМЖРукРФ_JSON");
		СписокПоказателей.Добавить("ИндексМЖРук");
		СписокПоказателей.Добавить("СубъектМЖРук");
		СписокПоказателей.Добавить("КодСубъектМЖРук");
		СписокПоказателей.Добавить("РайонМЖРук");
		СписокПоказателей.Добавить("ГородМЖРук");
		СписокПоказателей.Добавить("НПунктМЖРук");
		СписокПоказателей.Добавить("УлицаМЖРук");
		СписокПоказателей.Добавить("ДомМЖРук");
		СписокПоказателей.Добавить("КорпусМЖРук");
		СписокПоказателей.Добавить("КвартираМЖРук");
		СписокПоказателей.Добавить("ФИОБух");
		СписокПоказателей.Добавить("ФИООтпр");
		СписокПоказателей.Добавить("ФамилияБух");
		СписокПоказателей.Добавить("ИмяБух");
		СписокПоказателей.Добавить("ОтчествоБух");
		СписокПоказателей.Добавить("ИННБух");
		СписокПоказателей.Добавить("ДатаРождРук");
		СписокПоказателей.Добавить("МестоРождБух");
		СписокПоказателей.Добавить("ПолБух");
		СписокПоказателей.Добавить("ПолУпПред");
		СписокПоказателей.Добавить("ГраждБух");
		СписокПоказателей.Добавить("ГраждУпПред");
		СписокПоказателей.Добавить("ГраждСтранаБух");
		СписокПоказателей.Добавить("ГраждСтранаУпПред");
		СписокПоказателей.Добавить("ТелБух");
		СписокПоказателей.Добавить("ТелОтпр");
		СписокПоказателей.Добавить("КодУдЛичнБух");
		СписокПоказателей.Добавить("ВидУдЛичнБух");
		СписокПоказателей.Добавить("ОрганВыданУдЛичнБух");
		СписокПоказателей.Добавить("СерияУдЛичнБух");
		СписокПоказателей.Добавить("НомерУдЛичнБух");
		СписокПоказателей.Добавить("ДатаУдЛичнБух");
		СписокПоказателей.Добавить("АдрМЖБухРФ");
		СписокПоказателей.Добавить("АдрМЖБухРФ_XML");
		СписокПоказателей.Добавить("АдрМЖБухРФ_JSON");
		СписокПоказателей.Добавить("ИндексМЖБух");
		СписокПоказателей.Добавить("СубъектМЖБух");
		СписокПоказателей.Добавить("КодСубъектМЖБух");
		СписокПоказателей.Добавить("РайонМЖБух");
		СписокПоказателей.Добавить("ГородМЖБух");
		СписокПоказателей.Добавить("НПунктМЖБух");
		СписокПоказателей.Добавить("УлицаМЖБух");
		СписокПоказателей.Добавить("ДомМЖБух");
		СписокПоказателей.Добавить("КорпусМЖБух");
		СписокПоказателей.Добавить("КвартираМЖБух");
		СписокПоказателей.Добавить("ФИОУпПред");
		СписокПоказателей.Добавить("ИННУпПред");
		СписокПоказателей.Добавить("ТелУпПред");
		СписокПоказателей.Добавить("КодУдЛичнУпПред");
		СписокПоказателей.Добавить("ВидУдЛичнУпПред");
		СписокПоказателей.Добавить("ОрганВыданУдЛичнУпПред");
		СписокПоказателей.Добавить("СерияУдЛичнУпПред");
		СписокПоказателей.Добавить("НомерУдЛичнУпПред");
		СписокПоказателей.Добавить("ДатаУдЛичнУпПред");
		СписокПоказателей.Добавить("ДатаРождУпПред");
		СписокПоказателей.Добавить("АдрМЖУпПредРФ");
		СписокПоказателей.Добавить("АдрМЖУпПредРФ_XML");
		СписокПоказателей.Добавить("АдрМЖУпПредРФ_JSON");
		СписокПоказателей.Добавить("МестоРождУпПред");
		СписокПоказателей.Добавить("ИндексМЖУпПред");
		СписокПоказателей.Добавить("СубъектМЖУпПред");
		СписокПоказателей.Добавить("КодСубъектМЖУпПред");
		СписокПоказателей.Добавить("РайонМЖУпПред");
		СписокПоказателей.Добавить("ГородМЖУпПред");
		СписокПоказателей.Добавить("НПунктМЖУпПред");
		СписокПоказателей.Добавить("УлицаМЖУпПред");
		СписокПоказателей.Добавить("ДомМЖУпПред");
		СписокПоказателей.Добавить("КорпусМЖУпПред");
		СписокПоказателей.Добавить("КвартираМЖУпПред");
		СписокПоказателей.Добавить("ФаксИсп");
		СписокПоказателей.Добавить("ДолжнОтпр");
		СписокПоказателей.Добавить("СтавкаРефинансирования");
		СписокПоказателей.Добавить("ДатаПереходаНаУСН");
		СписокПоказателей.Добавить("БанкСчетНомер");
		СписокПоказателей.Добавить("БанкСчетНаимБанка");
		СписокПоказателей.Добавить("БанкСчетКоррСчетБанка");
		СписокПоказателей.Добавить("БанкСчетБИКБанка");
		СписокПоказателей.Добавить("РегистрационныйНомерФСС");
		СписокПоказателей.Добавить("НаименованиеТерриториальногоОрганаФСС");
		СписокПоказателей.Добавить("КодПодчиненностиФСС");
		СписокПоказателей.Добавить("КодОКОНХ");
		СписокПоказателей.Добавить("СтраховойТариф");
		СписокПоказателей.Добавить("ТелОрганизации");
		СписокПоказателей.Добавить("ФаксОрганизации");
		СписокПоказателей.Добавить("ОбъектНалогообложенияУСН");
		СписокПоказателей.Добавить("СтавкаНалогаУСН");
		СписокПоказателей.Добавить("НаимГоловнОрг");
		СписокПоказателей.Добавить("КППГоловнОрг");
		СписокПоказателей.Добавить("ФИОИсп");
		СписокПоказателей.Добавить("ДолжнИсп");
		СписокПоказателей.Добавить("ТелИсп");
		СписокПоказателей.Добавить("КодОрганаПФР");
		СписокПоказателей.Добавить("АдресЭлектроннойПочтыОрганизации");
		СписокПоказателей.Добавить("РегНомТФОМС");
		СписокПоказателей.Добавить("КодПодчФССДобрСтрах");
		СписокПоказателей.Добавить("КодОрганаФСГС");
		СписокПоказателей.Добавить("ШифрСтрахователяФСС");
		СписокПоказателей.Добавить("СистемыНалогообложения");
		СписокПоказателей.Добавить("ВидПлательщикаСтраховыхВзносов");
		СписокПоказателей.Добавить("КодПодрУдЛичнРук");
		СписокПоказателей.Добавить("КодПодрУдЛичнБух");
		СписокПоказателей.Добавить("КодПодрУдЛичн");
		
	КонецЕсли;
	ЭтоМассив = (ТипЗнч(СписокПоказателей) = Тип("Массив"));
	
	РоссийскийАдрес = Новый Соответствие;
	РоссийскийАдрес.Вставить("Индекс",          "");
	РоссийскийАдрес.Вставить("Регион",          "");
	РоссийскийАдрес.Вставить("КодРегиона",      "");
	РоссийскийАдрес.Вставить("Район",           "");
	РоссийскийАдрес.Вставить("Город",           "");
	РоссийскийАдрес.Вставить("НаселенныйПункт", "");
	РоссийскийАдрес.Вставить("Улица",           "");
	РоссийскийАдрес.Вставить("Дом",             "");
	РоссийскийАдрес.Вставить("Корпус",          "");
	РоссийскийАдрес.Вставить("Квартира",        "");
	
	Для Каждого Показатель Из СписокПоказателей Цикл
	
		ИмяПоказателя = ?(ЭтоМассив, Показатель, Показатель.Представление);
		
		Если ИмяПоказателя = "СтавкаПрибФед" Тогда
			Значение = 0;
		ИначеЕсли ИмяПоказателя = "СтавкаПрибРесп" Тогда
			Значение = 0;
		ИначеЕсли ИмяПоказателя = "СтавкаПрибМест" Тогда
			Значение = 0;
		ИначеЕсли ИмяПоказателя = "ТипНП" Тогда
			Если Организация.ИностраннаяОрганизация Тогда
				Значение = 5;
			Иначе
				Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка()
				 ИЛИ Организация.ГоловнаяОрганизация = Организация.Ссылка Тогда
					Если ПБОЮЛ Тогда
						Значение = 3;
					Иначе
						Значение = 1;
					КонецЕсли;
				Иначе
					Значение = 2;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КатНП" Тогда
			
			Значение = "01";
		ИначеЕсли Имяпоказателя = "НаимНО" Тогда
			
			Значение = "";
			Если НЕ Организация.РегистрацияВНалоговомОргане.Пустая() Тогда
				Значение = СокрЛП(Организация.РегистрацияВНалоговомОргане.НаименованиеИФНС);
			КонецЕсли;
			
		ИначеЕсли Имяпоказателя = "КодНО" Тогда
			
			Значение = "";
			Если НЕ Организация.РегистрацияВНалоговомОргане.Пустая() Тогда
				Значение = СокрЛП(Организация.РегистрацияВНалоговомОргане.Код);
			Иначе
				Значение = Организация.КодНалоговогоОрганаПолучателя;
			КонецЕсли;
			
		ИначеЕсли Имяпоказателя = "ОснВидДеят" ИЛИ
			Имяпоказателя ="ОснВидДеят2" Тогда
			
			Значение = Организация.НаименованиеОКВЭД;
			
		ИначеЕсли Имяпоказателя = "ОКВЭД" Тогда
			
			Значение = Организация.КодОКВЭД;
			
		ИначеЕсли Имяпоказателя = "ОКВЭД2" Тогда
			
			Значение = Организация.КодОКВЭД;
			
		ИначеЕсли ИмяПоказателя	= "ОГРН" Тогда
			
			Значение = Организация.ОГРН;
			
		ИначеЕсли ИмяПоказателя = "ОКАТО" Тогда
			
			Значение = СокрЛП(Организация.КодПоОКАТО);
			
		ИначеЕсли ИмяПоказателя = "ОКТМО" Тогда
			
			Значение = "";
			Если ЗначениеЗаполнено(Организация.РегистрацияВНалоговомОргане) Тогда
				Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация.РегистрацияВНалоговомОргане, "КодПоОКТМО");
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "РегНомПФР" Тогда
			
			Значение = Организация.РегистрационныйНомерПФР;
			
		ИначеЕсли ИмяПоказателя = "КодОрганаПФР" Тогда
			
			Значение = Организация.КодОрганаПФР;
			
			
		ИначеЕсли ИмяПоказателя = "ИПРегНомПФР" Тогда
			
			Значение = Организация.РегистрационныйНомерПФР;
			
		ИначеЕсли ИмяПоказателя = "ОКПО" Тогда
			
			Значение = Организация.КодПоОКПО;
			
		ИначеЕсли ИмяПоказателя = "ОргПравФорм" Тогда
			
			Значение  = "";
			
		ИначеЕсли ИмяПоказателя = "ОКОПФ" Тогда
			
			Значение  = Организация.КодОКОПФ;
			
		ИначеЕсли ИмяПоказателя = "ФормСобств" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "ОКФС" Тогда
			
			Значение = Организация.КодОКФС;
			
		ИначеЕсли ИмяПоказателя = "РегНомПФРЗаСебя" Тогда	
			
			Значение = Организация.РегистрационныйНомерПФР_ИП;
			
		ИначеЕсли ИмяПоказателя = "РегистрационныйНомерФСС" Тогда
			
			Значение = Организация.РегистрационныйНомерФСС;
			
		ИначеЕсли ИмяПоказателя = "РегистрационныйНомерФССДобрСтрах" Тогда
			
			Значение = Организация.РегистрационныйНомерФСС;
			
		ИначеЕсли ИмяПоказателя = "КодОрганаФСГС" Тогда
			
			Значение = Организация.КодОрганаФСГС;
			
		ИначеЕсли ИмяПоказателя = "НаименованиеТерриториальногоОрганаФСС" Тогда
			
			Значение = Организация.НаименованиеТерриториальногоОрганаФСС;
			
		ИначеЕсли ИмяПоказателя = "КодПодчиненностиФСС" Тогда
			
			Значение = СокрЛП(Организация.КодОрганаФСС);
			Если ПБОЮЛ Тогда
				Значение =Значение + "3";
			Иначе
				Значение = Значение + "1";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДатаРегистрации" Тогда
			
			Значение = Организация.ДатаРегистрации;
			
		ИначеЕсли ИмяПоказателя = "СтраховойТариф" Тогда
			
			Значение = Организация.ТарифНаТравматизм;
			
		ИначеЕсли ИмяПоказателя = "АдрПочт" Тогда
			
			ИмяПредопределенного = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
			Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ИмяПредопределенного);

			Результат = Организация.КонтактнаяИнформация.НайтиСтроки(Данные);

			Если Результат.Количество() > 0 Тогда
				Значение = РегламентированнаяОтчетность.АдресВФормате9Запятых(Результат[0]);
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрПочт_XML" Тогда
			
			Значение = АдресВXML(Организация.КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
		ИначеЕсли ИмяПоказателя = "АдрПочт_JSON" Тогда
			
			Значение = АдресВJSON(Организация.КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
		ИначеЕсли ИмяПоказателя = "ПолныйАдрПочт" Тогда
			
			ИмяПредопределенного = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
			Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ИмяПредопределенного);

			Результат = Организация.КонтактнаяИнформация.НайтиСтроки(Данные);

			Если Результат.Количество() > 0 Тогда
				Значение = Результат[0].Представление;
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СвидСН" Тогда
			
			Если Метаданные.Справочники.Организации.Реквизиты.Найти("СвидетельствоСерияНомер") <> Неопределено Тогда
				Значение = Организация.СвидетельствоСерияНомер;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СвидДВ" Тогда
			
			Если Метаданные.Справочники.Организации.Реквизиты.Найти("СвидетельствоДатаВыдачи") <> Неопределено Тогда
				Значение = Организация.СвидетельствоДатаВыдачи;
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СвидНО" Тогда
			
			Если Метаданные.Справочники.Организации.Реквизиты.Найти("СвидетельствоНаименованиеОргана") <> Неопределено Тогда
				Значение = Организация.СвидетельствоНаименованиеОргана;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СвидНОКод" Тогда
			
			Если Метаданные.Справочники.Организации.Реквизиты.Найти("СвидетельствоКодОргана") <> Неопределено Тогда
				Значение = Организация.СвидетельствоКодОргана;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НаимЮЛПол" Тогда
			
			Значение = Организация.НаименованиеПолное;
			
		ИначеЕсли ИмяПоказателя = "ИННЮЛ" Тогда
			
			Значение = СокрЛП(Организация.ИНН);
			
		ИначеЕсли ИмяПоказателя = "КППЮЛ" Тогда
			
			Значение = Организация.КПП;
			
		ИначеЕсли ИмяПоказателя = "АдрЮР" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				Значение = РегламентированнаяОтчетность.АдресВФормате9Запятых(Результат);
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "АдрЮР_XML" Тогда
			
			Значение = АдресВXML(Организация.КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
			
		ИначеЕсли ИмяПоказателя = "АдрЮР_JSON" Тогда
			
			Значение = АдресВJSON(Организация.КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
			
		ИначеЕсли ИмяПоказателя = "ПолныйАдрЮР" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				Значение = Результат.Представление;
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "АдрФакт" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ФактАдресОрганизации");
			Если Результат <> Неопределено Тогда
				Значение = РегламентированнаяОтчетность.АдресВФормате9Запятых(Результат);
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрФакт_XML" Тогда
			
			Значение = АдресВXML(Организация.КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
			
		ИначеЕсли ИмяПоказателя = "АдрФакт_JSON" Тогда
			
			Значение = АдресВJSON(Организация.КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
			
		ИначеЕсли ИмяПоказателя = "ТелОрганизации" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ТелефонОрганизации");

			Если Результат <> Неопределено Тогда
				Значение = Результат.Представление;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ФаксОрганизации" Тогда
			
			Если Кэш.ПБОЮЛ Тогда
				Значение = "";
			Иначе
				ИмяПредопределенного = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
				Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Факс, ИмяПредопределенного);
				Результат = Кэш.Организация.КонтактнаяИнформация.НайтиСтроки(Данные);
				Если Результат.Количество() > 0 Тогда
					Значение = Результат[0].Представление;
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргИндекс" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["Индекс"];
								
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргСубъект" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
								
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["Регион"];				
					
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргКодСубъект" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["КодРегиона"];
					
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргРайон" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["Район"];
					
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргГород" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["Город"];
					
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргНПункт" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["НаселенныйПункт"];
					
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргУлица" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["Улица"];
					
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргДом" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["Дом"];
					
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргКорпус" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["Корпус"];
					
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргКвартира" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["Квартира"];
					
			Иначе
				Значение = "";
			КонецЕсли;
			
		//*************************************************************для обособленного подразделения
		ИначеЕсли ИмяПоказателя = "НаимОППол" Тогда
		
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "КППОП" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "АдрОП" Тогда
			
			Значение = ПустойАдрес;
			
		ИначеЕсли ИмяПоказателя = "АдрОП_XML" Тогда
			Значение = Неопределено;
			
		ИначеЕсли ИмяПоказателя = "АдрОП_JSON" Тогда
			Значение = Неопределено;
			
		ИначеЕсли ИмяПоказателя = "ИндексОП" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "СубъектОП" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "КодСубъектОП" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "РайонОП" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "ГородОП" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "НПунктОП" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "УлицаОП" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "ДомОП" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "КорпусОП" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "КвартираОП" Тогда
			
			Значение = "";
			
		//********************************************************сведения об иностранной организации
		ИначеЕсли ИмяПоказателя = "НаимОИОПол" Тогда
		
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				Значение = Организация.НаименованиеПолное;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИННИО" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				Значение = СокрЛП(Организация.ИНН);
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КППИО" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				Значение = Организация.КПП;				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрОтдИОРФ" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = ПустойАдрес;
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = РегламентированнаяОтчетность.АдресВФормате9Запятых(Результат);
				Иначе
					Значение = ПустойАдрес;
				КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрОтдИОРФ_XML" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = Неопределено;
			Иначе
				Значение = АдресВXML(Организация.КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрОтдИОРФ_JSON" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = Неопределено;
			Иначе
				Значение = АдресВJSON(Организация.КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "ИндексОИО" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["Индекс"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СубъектОИО" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["Регион"];
						
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодСубъектОИО" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["КодРегиона"];
						
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РайонОИО" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["Район"];
						
				Иначе
					Значение = "";
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ГородОИО" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе

				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["Город"];
						
				Иначе
					Значение = "";
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НПунктОИО" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["НаселенныйПункт"];
						
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "УлицаОИО" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["Улица"];
						
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДомОИО" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["Дом"];
						
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КорпусОИО" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["Корпус"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КвартираОИО" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["Квартира"];
						
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодИОСтрРег" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "НаимИОПол" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "СтрИО" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "КодСтрИО" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "СтрПостИО" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "КодСтрПостИО" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "АдрИО" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "АдрИО_XML" Тогда
			
			Значение = Неопределено;
			
		ИначеЕсли ИмяПоказателя = "АдрИО_JSON" Тогда
			
			Значение = Неопределено;
			
		ИначеЕсли ИмяПоказателя = "ФамилияИП" Тогда
			Если ПБОЮЛ Тогда
				
				ФЛ = Организация.ФизическоеЛицо;
				ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо", ФЛ));
				Если ДанныеФЛ.Количество() > 0 Тогда
					Значение = СокрЛП(ДанныеФЛ[0].Фамилия);
				Иначе
					Значение = "";
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "ИмяИП" Тогда
			Если ПБОЮЛ Тогда
				
				ФЛ = Организация.ФизическоеЛицо;
				ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо", ФЛ));
				Если ДанныеФЛ.Количество() > 0 Тогда
					Значение = СокрЛП(ДанныеФЛ[0].Имя);
				Иначе
					Значение = "";
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОтчествоИП" Тогда
			Если ПБОЮЛ Тогда
				
				ФЛ = Организация.ФизическоеЛицо;
				ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо", ФЛ));
				Если ДанныеФЛ.Количество() > 0 Тогда
					Значение = СокрЛП(ДанныеФЛ[0].Отчество);
				Иначе
					Значение = "";
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "ФИО" ИЛИ ИмяПоказателя = "ФИООтпрФЛ" Тогда
			
			Если ПБОЮЛ Тогда
				ФЛ = Организация.ФизическоеЛицо;
				ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо", ФЛ));
				Если ДанныеФЛ.Количество() > 0 Тогда
					Значение = СокрЛП(СокрЛП(ДанныеФЛ[0].Фамилия) + " " + СокрЛП(ДанныеФЛ[0].Имя) + " " + СокрЛП(ДанныеФЛ[0].Отчество));
				Иначе
					Значение = СокрЛП(ФЛ.Наименование);
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИННФЛ" Тогда
			
			Если ПБОЮЛ Тогда
				Значение = СокрЛП(Организация.ИНН); 
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СНИЛС" Тогда
			
			Если ПБОЮЛ Тогда
				Значение = Организация.СтраховойНомерПФР;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДатаРожд" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");
				Если Результат <> Неопределено Тогда
					Значение = Результат.ДатаРождения;
				Иначе
					Значение = ПустаяДата;
				КонецЕсли;
				
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "МестоРожд" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "Пол" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");
				Значение = Результат.Пол;
				
			Иначе
				Значение = 0;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "Гражд" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");
				
				Значение = Результат.Гражданство;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ГраждСтрана" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");
				Гражданство = Результат.Гражданство;
				Значение = ?(ПустаяСтрока(Гражданство.НаименованиеПолное), Гражданство.Наименование, Гражданство.НаименованиеПолное);
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодУдЛичн" Тогда
			
			Если ПБОЮЛ Тогда
				УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные");
				Если УдЛичн = Неопределено Тогда
					Значение = Неопределено;
				Иначе
					Если УдЛичн.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.ВидДокумента.КодМВД;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ВидУдЛичн" Тогда
			
			Если ПБОЮЛ Тогда
				УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные");
				Если УдЛичн = Неопределено Тогда
					Значение = Неопределено;
				Иначе
					Если УдЛичн.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.ВидДокумента.Наименование;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОрганВыданУдЛичн" Тогда
			
			Если ПБОЮЛ Тогда
				
				УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные");
				Если УдЛичн = Неопределено Тогда
					Значение = Неопределено;
				Иначе
					Значение = УдЛичн.КемВыдан;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СерияУдЛичн" Тогда
			
			Если ПБОЮЛ Тогда
				
				УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные");
				Если УдЛичн = Неопределено Тогда
					Значение = Неопределено;
				Иначе
					Значение = УдЛичн.Серия;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НомерУдЛичн" Тогда
			
			Если ПБОЮЛ Тогда
				
				УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные");
				Если УдЛичн = Неопределено Тогда
					Значение = Неопределено;
				Иначе
					Значение = УдЛичн.Номер;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДатаУдЛичн" Тогда
			
			Если ПБОЮЛ Тогда
				
				УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные");
				Если УдЛичн = Неопределено Тогда
					Значение = Неопределено;
				Иначе
					Значение = УдЛичн.ДатаВыдачи;
				КонецЕсли;
				
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрПрописки" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдресПрописки", Организация);
				Если Результат <> Неопределено Тогда
					Значение = РегламентированнаяОтчетность.АдресВФормате9Запятых(Результат);
				Иначе
					Значение = ПустойАдрес;
				КонецЕсли;
				
				
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрПрописки_XML"
			ИЛИ ИмяПоказателя = "АдрМЖ_XML" Тогда
			
			Если ПБОЮЛ Тогда
				Значение = АдресВXML(Организация.КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
			Иначе
				Значение = Неопределено;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрПрописки_JSON"
			ИЛИ ИмяПоказателя = "АдрМЖ_JSON" Тогда
			
			Если ПБОЮЛ Тогда
				Значение = АдресВJSON(Организация.КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
			Иначе
				Значение = Неопределено;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрМЖ" Тогда
			
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Организация);
				Если Результат <> Неопределено Тогда
					Значение = РегламентированнаяОтчетность.АдресВФормате9Запятых(Результат);
				Иначе
					Значение = ПустойАдрес;
				КонецЕсли;
				
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИндексМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Организация);
			
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
					
					Значение = РоссийскийАдрес["Индекс"];
					
				Иначе
					Значение = "";
				КонецЕсли;
				
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СубъектМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Организация);
			
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
					
					Значение = РоссийскийАдрес["Регион"];
					
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КодСубъектМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Организация);
			
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
					
					Значение = РоссийскийАдрес["КодРегиона"];
					
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "РайонМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Организация);
			
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
					
					Значение = РоссийскийАдрес["Район"];
					
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ГородМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Организация);
			
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
					
					Значение = РоссийскийАдрес["Город"];
					
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "НПунктМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Организация);
			
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
					
					Значение = РоссийскийАдрес["НаселенныйПункт"];
					
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "УлицаМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Организация);
			
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
					
					Значение = РоссийскийАдрес["Улица"];
					
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ДомМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Организация);
			
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
					
					Значение = РоссийскийАдрес["Дом"];
					
				Иначе
					Значение = "";
				КонецЕсли;
				
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КорпусМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Организация);
			
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
					
					Значение = РоссийскийАдрес["Корпус"];
					
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КвартираМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Организация);
				
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
					
					Значение = РоссийскийАдрес["Квартира"];
					
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ТелСлуж" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ТелефонОрганизации");
				
				Если Результат <> Неопределено Тогда
					Значение = Результат.Представление;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ТелДом" Тогда
			
			Если ПБОЮЛ Тогда
				
				Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, ДомашнийТелефонФизЛица);
				Результат2 = Организация.КонтактнаяИнформация.НайтиСтроки(Данные);
				Если Результат2.Количество() > 0 Тогда
					Значение = Результат2[0].Представление;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
		//******************************************************************сведения о руководителе организации
		ИначеЕсли ИмяПоказателя = "ФИОРук" Тогда
			ФЛ = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
				Значение = "";
			Иначе
				ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо",ФЛ));
				Если ДанныеФЛ.Количество() > 0 Тогда
					Значение = СокрЛП(СокрЛП(ДанныеФЛ[0].Фамилия) + " " + СокрЛП(ДанныеФЛ[0].Имя) + " " + СокрЛП(ДанныеФЛ[0].Отчество));
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "ФамилияРук" Тогда
			ФЛ = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
				Значение = "";
			Иначе
				ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо",ФЛ));
				Если ДанныеФЛ.Количество() > 0 Тогда
					Значение = СокрЛП(ДанныеФЛ[0].Фамилия);
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "ИмяРук" Тогда
			ФЛ = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
				Значение = "";
			Иначе
				ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо",ФЛ));
				Если ДанныеФЛ.Количество() > 0 Тогда
					Значение = СокрЛП(ДанныеФЛ[0].Имя);
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "ОтчествоРук" Тогда
			ФЛ = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
				Значение = "";
			Иначе
				ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо",ФЛ));
				Если ДанныеФЛ.Количество() > 0 Тогда
					Значение = СокрЛП(ДанныеФЛ[0].Отчество);
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "ДолжнРук" Тогда
			ПодписьРуководителя = Организация.ПодписьРуководителя;
			Если ЗначениеЗаполнено(ПодписьРуководителя) Тогда
				Значение = ПодписьРуководителя.Должность;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИННРук" Тогда
			
			Если ПБОЮЛ Тогда
				Значение = Организация.ИНН;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДатаРождРук" Тогда
			
			ФЛ = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
				Значение = ПустаяДата;
			Иначе
				Значение = ФЛ.ДатаРождения;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "МестоРождРук" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "ПолРук" Тогда
			
			ФЛ = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
				Значение = 0;
			Иначе
				Если ФЛ.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
					Значение = 2;
				ИначеЕсли ФЛ.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
					Значение = 1;
				Иначе
					Значение = 0;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ГраждРук" Тогда
			
			ФЛ = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
				Значение = "";
			Иначе
				Значение = ФЛ.Гражданство.Код;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ГраждСтранаРук" Тогда
			
			ФЛ = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
				Значение = "";
			Иначе
				Значение = ?(ПустаяСтрока(ФЛ.Гражданство.НаименованиеПолное), ФЛ.Гражданство.Наименование, ФЛ.Гражданство.НаименованиеПолное);
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ТелРук" Тогда
			
			ФЛ = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
				Значение = "";
			Иначе
				Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, ДомашнийТелефонФизЛица);
				Результат2 = ФЛ.КонтактнаяИнформация.НайтиСтроки(Данные);
				Если Результат2.Количество() > 0 Тогда
					Значение = Результат2[0].Представление;
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодУдЛичнРук" 
			ИЛИ ИмяПоказателя =  "КодПодрУдЛичнРук"
			ИЛИ ИмяПоказателя =  "КодПодрУдЛичн"  Тогда
			
				ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
				Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", ФизЛицо);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Если УдЛичн.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка() Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.ВидДокумента.КодМВД;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ВидУдЛичнРук" Тогда
			
				ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
				Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", ФизЛицо);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Если УдЛичн.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка() Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.ВидДокумента.Наименование;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			
		ИначеЕсли ИмяПоказателя = "ОрганВыданУдЛичнРук" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", ФизЛицо);
				Если УдЛичн = Неопределено Тогда
					Значение = "";
				Иначе
					Значение = УдЛичн.КемВыдан;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СерияУдЛичнРук" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", ФизЛицо);
				Если УдЛичн = Неопределено Тогда
					Значение = "";
				Иначе
					Значение = УдЛичн.Серия;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "НомерУдЛичнРук" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", ФизЛицо);
				Если УдЛичн = Неопределено Тогда
					Значение = "";
				Иначе
					Значение = УдЛичн.Номер;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДатаУдЛичнРук" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", ФизЛицо);
				Если УдЛичн = Неопределено Тогда
					Значение = "";
				Иначе
					Значение = УдЛичн.ДатаВыдачи;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрМЖРукРФ" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = ПустойАдрес;
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес",ФизЛицо);
				Если Результат <> Неопределено Тогда
					Значение = РегламентированнаяОтчетность.АдресВФормате9Запятых(Результат);
				Иначе
					Значение = ПустойАдрес;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрМЖРукРФ_XML" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = ПустойАдрес;
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", ФизЛицо);
				Если Результат <> Неопределено Тогда
					Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(Результат.ЗначенияПолей, Результат.Представление, Результат.Вид);
				Иначе
					Значение = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрМЖРукРФ_JSON" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = ПустойАдрес;
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", ФизЛицо);
				Если Результат <> Неопределено Тогда
					Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(Результат.Значение, Результат.Вид);
				Иначе
					Значение = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИндексМЖРук" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", ФизЛицо);
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
					Значение = РоссийскийАдрес["Индекс"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СубъектМЖРук" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес",ФизЛицо);
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
			
					Значение = РоссийскийАдрес["Регион"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		
		ИначеЕсли ИмяПоказателя = "КодСубъектМЖРук" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", ФизЛицо);
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
			
					Значение = РоссийскийАдрес["КодРегиона"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РайонМЖРук" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес",ФизЛицо);
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
			
					Значение = РоссийскийАдрес["Район"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ГородМЖРук" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", ФизЛицо);
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
			
					Значение = РоссийскийАдрес["Город"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НПунктМЖРук" Тогда
				
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", ФизЛицо);
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
			
					Значение = РоссийскийАдрес["НаселенныйПункт"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "УлицаМЖРук" Тогда
				
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", ФизЛицо);
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
			
					Значение = РоссийскийАдрес["Улица"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДомМЖРук" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес",ФизЛицо);
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
			
					Значение = РоссийскийАдрес["Дом"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КорпусМЖРук" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", ФизЛицо);
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
			
					Значение = РоссийскийАдрес["Корпус"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КвартираМЖРук" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", ФизЛицо);
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
			
					Значение = РоссийскийАдрес["Квартира"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		//*******************************************************************Сведения о главном бухгалтере
		ИначеЕсли ИмяПоказателя = "ФИОБух" ИЛИ ИмяПоказателя = "ФИООтпр" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо",ФизЛицо));
				Если ДанныеФЛ.Количество() > 0 Тогда
					Значение = СокрЛП(СокрЛП(ДанныеФЛ[0].Фамилия) + " " + СокрЛП(ДанныеФЛ[0].Имя) + " " + СокрЛП(ДанныеФЛ[0].Отчество));
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
			
		ИначеЕсли ИмяПоказателя = "ФамилияБух" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо",ФизЛицо));
				Если ДанныеФЛ.Количество() > 0 Тогда
					Значение = СокрЛП(СокрЛП(ДанныеФЛ[0].Фамилия));
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИмяБух" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо",ФизЛицо));
				Если ДанныеФЛ.Количество() > 0 Тогда
					Значение = СокрЛП(СокрЛП(ДанныеФЛ[0].Имя));
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОтчествоБух" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо",ФизЛицо));
				Если ДанныеФЛ.Количество() > 0 Тогда
					Значение = СокрЛП(СокрЛП(ДанныеФЛ[0].Отчество));
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИННБух" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "ДатаРождБух" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = ПустаяДата;
			Иначе
				Значение = ФизЛицо.ДатаРождения;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДатаРождУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");
			
			Если Результат <> Неопределено Тогда
				Если Результат = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = ПустаяДата;
				Иначе
					Значение = Результат.ДатаРождения;
				КонецЕсли;
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "МестоРождБух" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "МестоРождУпПред" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "ПолБух" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = 0;
			Иначе
				Если ФизЛицо.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
					Значение = 2;
				ИначеЕсли ФизЛицо.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
					Значение = 1;
				Иначе
					Значение = 0;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ПолУпПред" Тогда

			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");
			ФЛ = Результат;
			Если Результат <> Неопределено Тогда
				Если ФЛ = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = 0;
				Иначе
					Если ФЛ.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
						Значение = 2;
					ИначеЕсли ФЛ.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
						Значение = 1;
					Иначе
						Значение = 0;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = 0;
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "ГраждБух" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереГражданство", ФизЛицо);
				Если Гражданство = Неопределено Тогда
					Значение = "";
				Иначе
					Значение = Гражданство.Код;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ГраждСтранаБух" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереГражданство", ФизЛицо);
				Если Гражданство = Неопределено Тогда
					Значение = "";
				Иначе
					Значение = ?(ПустаяСтрока(Гражданство.НаименованиеПолное), Гражданство.Наименование, Гражданство.НаименованиеПолное);
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "ГраждУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено Тогда
				Если Результат = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеГражданство", Результат);
					Если Гражданство = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = Гражданство.Код;
					КонецЕсли;

				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "ГраждСтранаУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено Тогда
				Если Результат = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеГражданство", Результат);
					Если Гражданство = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = ?(ПустаяСтрока(Гражданство.НаименованиеПолное), Гражданство.Наименование, Гражданство.НаименованиеПолное);
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ТелБух" ИЛИ ИмяПоказателя = "ТелОтпр" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, ДомашнийТелефонФизЛица);
				Результат2 = ФизЛицо.КонтактнаяИнформация.НайтиСтроки(Данные);
				Если Результат2.Количество() > 0 Тогда
					Значение = Результат2[0].Представление;
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодУдЛичнБух"
			ИЛИ ИмяПоказателя = "КодПодрУдЛичнБух" Тогда

			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", ФизЛицо);
				Если УдЛичн = Неопределено Тогда
					Значение = "";
				Иначе
					Если УдЛичн.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.ВидДокумента.КодМВД;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ВидУдЛичнБух" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", ФизЛицо);
				Если УдЛичн = Неопределено Тогда
					Значение = "";
				Иначе
					Если УдЛичн.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка() Тогда
						Значение = "";								
					Иначе
						Значение = УдЛичн.ВидДокумента.Наименование;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОрганВыданУдЛичнБух" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", ФизЛицо);
				Если УдЛичн = Неопределено Тогда
					Значение = "";
				Иначе
					Значение = УдЛичн.КемВыдан;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СерияУдЛичнБух" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", ФизЛицо);
				Если УдЛичн = Неопределено Тогда
					Значение = "";
				Иначе
					Значение = УдЛичн.Серия;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НомерУдЛичнБух" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", ФизЛицо);
				Если УдЛичн = Неопределено Тогда
					Значение = "";
				Иначе
					Значение = УдЛичн.Номер;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДатаУдЛичнБух" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", ФизЛицо);
				Если УдЛичн = Неопределено Тогда
					Значение = "";
				Иначе
					Значение = УдЛичн.ДатаВыдачи;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрМЖБухРФ" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = ПустойАдрес;
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", ФизЛицо);
				Если Результат <> Неопределено Тогда
					Значение = РегламентированнаяОтчетность.АдресВФормате9Запятых(Результат);
				Иначе
					Значение = ПустойАдрес;
				КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрМЖБухРФ_XML" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = ПустойАдрес;
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес",ФизЛицо);
				Если Результат <> Неопределено Тогда
					Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(Результат.ЗначенияПолей, Результат.Представление, Результат.Вид);
				Иначе
					Значение = Неопределено;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "АдрМЖБухРФ_JSON" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = ПустойАдрес;
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес",ФизЛицо);
				Если Результат <> Неопределено Тогда
					Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(Результат.Значение, Результат.Вид);
				Иначе
					Значение = Неопределено;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "ИндексМЖБух" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", ФизЛицо);
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
			
					Значение = РоссийскийАдрес["Индекс"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СубъектМЖБух" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", ФизЛицо);
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
			
					Значение = РоссийскийАдрес["Регион"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КодСубъектМЖБух" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", ФизЛицо);
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
			
					Значение = РоссийскийАдрес["КодРегиона"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РайонМЖБух" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", ФизЛицо);
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
			
					Значение = РоссийскийАдрес["Район"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ГородМЖБух" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", ФизЛицо);
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
			
					Значение = РоссийскийАдрес["Город"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НПунктМЖБух" Тогда
				
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", ФизЛицо);
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
			
					Значение = РоссийскийАдрес["НаселенныйПункт"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "УлицаМЖБух" Тогда
				
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", ФизЛицо);
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
					Значение = РоссийскийАдрес["Улица"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДомМЖБух" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", ФизЛицо);
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
					Значение = РоссийскийАдрес["Дом"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КорпусМЖБух" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", ФизЛицо);
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
			
					Значение = РоссийскийАдрес["Корпус"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КвартираМЖБух" Тогда
			
			ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", ФизЛицо);
				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
			
					Значение = РоссийскийАдрес["Квартира"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		//**********************************************Сведения об уполномоченном представителе
		ИначеЕсли ИмяПоказателя = "ФИОУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено  Тогда
				Если Результат = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					ФЛ = Результат;
					Если ФЛ = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо",ФЛ));
						Если ДанныеФЛ.Количество() > 0 Тогда
							Значение = СокрЛП(СокрЛП(ДанныеФЛ[0].Фамилия) + " " + СокрЛП(ДанныеФЛ[0].Имя) + " " + СокрЛП(ДанныеФЛ[0].Отчество));
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИННУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено Тогда
				Если Результат = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					Значение = Результат.ИНН;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ТелУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено  Тогда
				
				Если Результат = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					
					Значение = "";
					
				Иначе
					
					Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, ДомашнийТелефонФизЛица);

					Результат2 = Результат.КонтактнаяИнформация.НайтиСтроки(Данные);

					Если Результат2.Количество() > 0 Тогда
						Значение = Результат2[0].Представление;
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
				
		ИначеЕсли ИмяПоказателя = "КодУдЛичнУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено Тогда
				Если Результат = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеПаспортныеДанные", Результат);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Если УдЛичн.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка() Тогда
							Значение = "";								
						Иначе
							Значение = УдЛичн.ВидДокумента.КодМВД;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ВидУдЛичнУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено Тогда
				Если Результат = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеПаспортныеДанные", Результат);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Если УдЛичн.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка() Тогда
							Значение = "";								
						Иначе
							Значение = УдЛичн.ВидДокумента.Наименование;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОрганВыданУдЛичнУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено Тогда
				Если Результат = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеПаспортныеДанные", Результат);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.КемВыдан;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СерияУдЛичнУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено Тогда
				Если Результат = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеПаспортныеДанные", Результат);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.Серия;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НомерУдЛичнУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено Тогда
				Если Результат = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеПаспортныеДанные", Результат);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.Номер;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДатаУдЛичнУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено Тогда
				Если Результат = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = ПустаяДата;
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеПаспортныеДанные", Результат);
					Если УдЛичн = Неопределено Тогда
						Значение = ПустаяДата;
					Иначе
						Значение = УдЛичн.ДатаВыдачи;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрМЖУпПредРФ" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено Тогда
				Если Результат = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = ПустойАдрес;
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат);

					Если Результат2 <> Неопределено Тогда
						Значение = РегламентированнаяОтчетность.АдресВФормате9Запятых(Результат2);
					Иначе
						Значение = ПустойАдрес;
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "АдрМЖУпПредРФ_XML" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");
			Если Результат <> Неопределено И  Результат <> Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
				
				Адрес = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат);
				Если Адрес <> Неопределено Тогда
					Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(Адрес.ЗначенияПолей, Адрес.Представление, Адрес.Вид);
				Иначе
					Значение = Неопределено;
				КонецЕсли;
			Иначе
				Значение = Неопределено;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрМЖУпПредРФ_JSON" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");
			Если Результат <> Неопределено И  Результат <> Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
				
				Адрес = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат);
				Если Адрес <> Неопределено Тогда
					Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(Адрес.Значение, Адрес.Вид);
				Иначе
					Значение = Неопределено;
				КонецЕсли;
			Иначе
				Значение = Неопределено;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИндексМЖУпПред" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "СубъектМЖУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено Тогда
				Если Результат = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат);

					Если Результат2 <> Неопределено Тогда
						
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Регион"];
						
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КодСубъектМЖУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено Тогда
				Если Результат = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат);

					Если Результат2 <> Неопределено Тогда
												
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["КодРегиона"];
						
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "РайонМЖУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено Тогда
				Если Результат = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат);

					Если Результат2 <> Неопределено Тогда
						
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Район"];
					
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ГородМЖУпПред" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено Тогда
				Если Результат = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат);

					Если Результат2 <> Неопределено Тогда
												
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Город"];
					
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "НПунктМЖУпПред" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено Тогда
				Если Результат = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат);

					Если Результат2 <> Неопределено Тогда
											
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["НаселенныйПункт"];
					
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "УлицаМЖУпПред" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено Тогда
				Если Результат = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат);

					Если Результат2 <> Неопределено Тогда
												
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Улица"];
					
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ДомМЖУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено Тогда
				Если Результат = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат);

					Если Результат2 <> Неопределено Тогда
												
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Дом"];
					
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КорпусМЖУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено Тогда
				Если Результат = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат);

					Если Результат2 <> Неопределено Тогда
												
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Корпус"];
					
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КвартираМЖУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено Тогда
				Если Результат = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат);

					Если Результат2 <> Неопределено Тогда
												
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Квартира"];
					
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДолжнОтпр" Тогда
			
			Значение = "ГЛАВНЫЙ БУХГАЛТЕР"
			
		ИначеЕсли ИмяПоказателя = "СтавкаРефинансирования" Тогда
			
			Значение = 0;
		ИначеЕсли ИмяПоказателя = "ПрименяетсяУСН" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "УчетнаяПолитикаНалоговыйУчет");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				ПромежуточноеЗначение = ?(ТипЗнч(Результат) = Тип("Структура"), Результат.ПлательщикУСН, Результат[0].ПлательщикУСН);
				Если ПромежуточноеЗначение Тогда
					Значение = 1;
				Иначе
					Значение = 0;
				КонецЕсли;
			Иначе
				Значение = 0;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДатаПереходаНаУСН" Тогда
			
			Значение = ПустаяДата;
			
		ИначеЕсли ИмяПоказателя = "ОбъектНалогообложенияУСН" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "УчетнаяПолитикаНалоговыйУчет");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				ПромежуточноеЗначение = ?(ТипЗнч(Результат) = Тип("Структура"), Результат.ОбъектНалогообложенияУСН, Результат[0].ОбъектНалогообложения);
				Если ПромежуточноеЗначение = Перечисления.ВидыОбъектовНалогообложения.Доходы Тогда
					Значение = 1;
				ИначеЕсли ПромежуточноеЗначение = Перечисления.ВидыОбъектовНалогообложения.ДоходыМинусРасходы Тогда
					Значение = 2;
				Иначе
					Значение = 0;
				КонецЕсли;
			Иначе
				Значение = 0;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СтавкаНалогаУСН" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "УчетнаяПолитикаНалоговыйУчет");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				ПромежуточноеЗначение = ?(ТипЗнч(Результат) = Тип("Структура"), Результат.ОбъектНалогообложенияУСН, Результат[0].ОбъектНалогообложения);
				Если ПромежуточноеЗначение = Перечисления.ВидыОбъектовНалогообложения.Доходы Тогда
					Значение = ?(ТипЗнч(Результат) = Тип("Структура"), Результат.СтавкаНалога, Результат[0].СтавкаНалога);
				ИначеЕсли ПромежуточноеЗначение = Перечисления.ВидыОбъектовНалогообложения.ДоходыМинусРасходы Тогда
					Значение = ?(ТипЗнч(Результат) = Тип("Структура"), Результат.СтавкаНалога, Результат[0].СтавкаНалога);
				Иначе
					Значение = 0;
				КонецЕсли;
			Иначе
				Значение = 0;
			КонецЕсли;
			
		//сведения о банковском счете организации
		ИначеЕсли ИмяПоказателя = "БанкСчетНомер" Тогда
			
			БанкСчет = Организация.БанковскийСчетПоУмолчанию;
			Если БанкСчет = Справочники.БанковскиеСчета.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				Значение = БанкСчет.НомерСчета;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "БанкСчетНаимБанка" Тогда
			
			БанкСчет = Организация.БанковскийСчетПоУмолчанию;
			Если БанкСчет = Справочники.БанковскиеСчета.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				Банк = БанкСчет.Банк;
				Если Банк = Справочники.Банки.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					Значение = Банк.Наименование;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "БанкСчетКоррСчетБанка" Тогда
			
			БанкСчет = Организация.БанковскийСчетПоУмолчанию;
			Если БанкСчет = Справочники.БанковскиеСчета.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				Банк = БанкСчет.Банк;
				Если Банк = Справочники.Банки.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					Значение = Банк.КоррСчет;
				КонецЕсли;
			КонецЕсли;
			
			
		ИначеЕсли ИмяПоказателя = "БанкСчетБИКБанка" Тогда
			
			БанкСчет = Организация.БанковскийСчетПоУмолчанию;
			Если БанкСчет = Справочники.БанковскиеСчета.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				Банк = БанкСчет.Банк;
				Если Банк = Справочники.Банки.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					Значение = Банк.Код;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодОКОНХ" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "НаимГоловнОрг" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				Значение = Организация.ГоловнаяОрганизация.НаименованиеПолное;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КППГоловнОрг" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				Значение = Организация.ГоловнаяОрганизация.КПП;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ФИОИсп" Тогда
			
			Если ПБОЮЛ Тогда
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");
				Если НЕ ЗначениеЗаполнено(Результат) Тогда
					Значение = "";
				Иначе
					ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо",Результат));
					Если ДанныеФЛ.Количество() > 0 Тогда
						Значение = СокрЛП(СокрЛП(ДанныеФЛ[0].Фамилия) + " " + СокрЛП(ДанныеФЛ[0].Имя) + " " + СокрЛП(ДанныеФЛ[0].Отчество));
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
			Иначе
				ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОбИсполнителе");
				Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
					Значение = "";
				Иначе
					ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо",ФизЛицо));
					Если ДанныеФЛ.Количество() > 0 Тогда
						Значение = СокрЛП(СокрЛП(ДанныеФЛ[0].Фамилия) + " " + СокрЛП(ДанныеФЛ[0].Имя) + " " + СокрЛП(ДанныеФЛ[0].Отчество));
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли
		ИначеЕсли ИмяПоказателя = "ДолжнИсп" Тогда
			Если ПБОЮЛ Тогда
				Значение = НСтр("'Руководитель'");
			Иначе
				ПодписьИсполнителя = Организация.ПодписьГлавногоБухгалтера;
				Если ЗначениеЗаполнено(ПодписьИсполнителя) И ЗначениеЗаполнено(ПодписьИсполнителя.Должность) Тогда
					Значение = СокрЛП(ПодписьИсполнителя.Должность.Наименование);
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "ТелИсп" Тогда
			
			Если ПБОЮЛ Тогда
				Результат = ПолучитьСУчетомКэша(Кэш, "ТелефонОрганизации");
				Если Результат = Неопределено Тогда
					Значение = "";
				Иначе
					Значение = Результат.Представление;
				КонецЕсли;
			Иначе
				ФизЛицо = ПолучитьСУчетомКэша(Кэш, "СведенияОбИсполнителе");
				Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
					Значение = "";
				Иначе
					Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, ДомашнийТелефонФизЛица);
					Результат2 = ФизЛицо.КонтактнаяИнформация.НайтиСтроки(Данные);
					Если Результат2.Количество() > 0 Тогда
						Значение = Результат2[0].Представление;
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "АдресЭлПочтыИсп" Тогда
			Если ПБОЮЛ Тогда
				Результат = ПолучитьСУчетомКэша(Кэш, "EmailОрганизации");
				Если Результат = Неопределено Тогда
					Значение = "";
				Иначе
					Значение = Результат.Представление;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "ШифрСтрахователяФСС" Тогда
			
			Тарифы = РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов.СрезПоследних(ДатаЗначения, Новый Структура("Организация", Организация.Ссылка));
			
			Если Тарифы.Количество() > 0 Тогда
				Значение = СокрЛП(Тарифы[0].ВидТарифа.КодФСС2012);
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресЭлектроннойПочтыОрганизации" Тогда
			
			Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
	
			Результат = Организация.КонтактнаяИнформация.НайтиСтроки(Данные);
			
			Если Результат.Количество() > 0 Тогда
				Значение = Результат[0].Представление;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ФИООтвСтатистика" Тогда
			Значение = "";
		ИначеЕсли ИмяПоказателя = "ДолжнОтвСтатистика" Тогда
			Значение = "";
		ИначеЕсли ИмяПоказателя = "ТелОтвСтатистика" Тогда
			Значение = "";
		ИначеЕсли ИмяПоказателя = "АдресЭлПочтыОтвСтатистика" Тогда
			Значение = "";
		ИначеЕсли ИмяПоказателя = "АдресЭлПочтыБух" Тогда
			Значение = "";
		ИначеЕсли ИмяПоказателя = "АдресЭлПочтыРук" Тогда
			Значение = "";
		ИначеЕсли ИмяПоказателя = "АдресЭлПочтыИП" Тогда
			Результат = ПолучитьСУчетомКэша(Кэш, "EmailОрганизации");
			Если Результат = Неопределено Тогда
				Значение = "";
			Иначе
				Значение = Результат.Представление;
			КонецЕсли;
		КонецЕсли;
		
		ОргСведения.Вставить(ИмяПоказателя, Значение);
		
	КонецЦикла;
	
	Возврат ОргСведения;
	
КонецФункции

// Функция возвращает информацию об организации с учетом предыдущих обращений к сведениям.
// Параметры:
//		Кэш - структура, содержащая информацию с данными об организации, которые запрашивались ранее (кэш сведений);
//		Параметр - строка, имя запрашиваемого параметра;
//		ФизЛицо - переменная типа СправочникСсылка.ФизическиеЛица. Параметр необязателен, необходим 
//			для получения лишь некоторых параметров (сведений об ответственных лицах организации).
// Возвращаемое значение:
//		Значение запрашиваемого параметра, полученное с учетом кэша.
Функция ПолучитьСУчетомКэша(Кэш, Параметр, ФизЛицо = Неопределено)
	Перем ЗначениеПараметра;
	Перем Ставки;
	
	Если Кэш.Свойство(Параметр, ЗначениеПараметра) Тогда
		Результат = Новый Структура("СтавкаФБ, СтавкаСубъектРФ, СтавкаМестный", 0, 0, 0);
	КонецЕсли;
	
	Если Параметр = "СтавкаНалогаНаПрибыль" Тогда
			Возврат Неопределено;
	ИначеЕсли Параметр = "ЮрАдресОрганизации" ИЛИ Параметр = "ФактАдресОрганизации"  Тогда
		
		Если Кэш.ПБОЮЛ Тогда
			
			ЭлементАдрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
			Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ЭлементАдрес);
			Результат = Кэш.Организация.КонтактнаяИнформация.НайтиСтроки(Данные);
			Если Результат.Количество() > 0 Тогда
				Результат = Результат[0];
			Иначе
				Результат = Неопределено;
			КонецЕсли;
			
		Иначе
			
			ЭлементАдрес = ?(Параметр = "ЮрАдресОрганизации",Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации , Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
			Результат = Неопределено;
			Для Каждого Элемент Из Кэш.Организация.КонтактнаяИнформация Цикл
				Если Элемент.Вид.Наименование = ЭлементАдрес.Наименование Тогда
					Результат = Элемент;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли Параметр = "СведенияОбИндивидуальномПредпринимателе" Тогда
		Результат = Кэш.Организация.ФизическоеЛицо;
	ИначеЕсли Параметр = "СведенияОРуководителе" Тогда
		Если Кэш.ПБОЮЛ Тогда
			Результат = Кэш.Организация.ФизическоеЛицо;
		Иначе
			ПодписьРуководителя = Кэш.Организация.ПодписьРуководителя;
			Если ЗначениеЗаполнено(ПодписьРуководителя) Тогда
				Результат = ПодписьРуководителя.ФизическоеЛицо;
			Иначе
				Результат = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Параметр = "СведенияОБухгалтере" Тогда
		ПодписьГлавногоБухгалтера = Кэш.Организация.ПодписьГлавногоБухгалтера;
		Если ЗначениеЗаполнено(ПодписьГлавногоБухгалтера) Тогда
			Результат = ПодписьГлавногоБухгалтера.ФизическоеЛицо;
		Иначе
			Результат = Неопределено;
		КонецЕсли;
	ИначеЕсли Параметр = "СведенияОбИсполнителе" Тогда
		Если Кэш.ПБОЮЛ Тогда
			Результат = Кэш.Организация.ФизическоеЛицо;
		Иначе
			ПодписьГлавногоБухгалтера = Кэш.Организация.ПодписьГлавногоБухгалтера;
			Если ЗначениеЗаполнено(ПодписьГлавногоБухгалтера) Тогда
				Результат = ПодписьГлавногоБухгалтера.ФизическоеЛицо;
			Иначе
				Результат = Неопределено;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Параметр = "СведенияОУполномоченномПредставителе" Тогда
		Результат = Кэш.Организация.ФизическоеЛицо;
	ИначеЕсли Параметр = "ТелефонОрганизации" Тогда
		ЭлементТелефон = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
		Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, ЭлементТелефон);
		Результат = Кэш.Организация.КонтактнаяИнформация.НайтиСтроки(Данные);
		Если Результат.Количество() > 0 Тогда
			Результат = Результат[0];
		Иначе
			Результат = Неопределено;
		КонецЕсли;
	ИначеЕсли Параметр = "EmailОрганизации" Тогда
		ЭлементEmail = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
		Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, ЭлементEmail);
		Результат = Кэш.Организация.КонтактнаяИнформация.НайтиСтроки(Данные);
		Если Результат.Количество() > 0 Тогда
			Результат = Результат[0];
		Иначе
			Результат = Неопределено;
		КонецЕсли;
	ИначеЕсли Параметр = "УчетнаяПолитикаНалоговыйУчет" Тогда
		Результат = РегистрыСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(Кэш.ДатаЗначения, Новый Структура("Организация", Кэш.Организация.Ссылка));
	ИначеЕсли Параметр = "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные" Тогда
		Результат = РегламентированнаяОтчетность.ПолучитьДокФизЛица(Кэш.Организация.ФизическоеЛицо, Кэш.ДатаЗначения);
	ИначеЕсли Параметр = "СведенияОРуководителеПаспортныеДанные" 
		ИЛИ Параметр = "СведенияОБухгалтереПаспортныеДанные" 
		ИЛИ Параметр = "СведенияОУполномоченномПредставителеПаспортныеДанные" Тогда
		
		Результат = РегламентированнаяОтчетность.ПолучитьДокФизЛица(ФизЛицо, Кэш.ДатаЗначения);
		
	ИначеЕсли Параметр = "СведенияОбИндивидуальномПредпринимателеАдрес" 
		ИЛИ Параметр = "СведенияОРуководителеАдрес" 
		ИЛИ Параметр = "СведенияОБухгалтереАдрес" 
		ИЛИ Параметр = "СведенияОУполномоченномПредставителеАдрес" Тогда
			Если ЭтоЮридическоеЛицо(Кэш.Организация.Ссылка) Тогда
				Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.АдресФизЛицаПоПрописке);
				Результат = ФизЛицо.КонтактнаяИнформация.НайтиСтроки(Данные);
				Если Результат.Количество() > 0 Тогда
					Результат = Результат[0];
				Иначе
					Результат = Неопределено;
				КонецЕсли;
			Иначе
				Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
				Результат = Кэш.Организация.КонтактнаяИнформация.НайтиСтроки(Данные);
				
				Если Результат.Количество() > 0 Тогда
					Результат = Результат[0];
				Иначе
					Результат = Неопределено;
				КонецЕсли;
			КонецЕсли;
	ИначеЕсли Параметр = "СведенияОбИндивидуальномПредпринимателеАдресПрописки" Тогда
		
		Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		Результат = Кэш.Организация.КонтактнаяИнформация.НайтиСтроки(Данные);
		
		Если Результат.Количество() > 0 Тогда
			Результат = Результат[0];
		Иначе
			Результат = Неопределено;
		КонецЕсли;
		
	ИначеЕсли Параметр = "СведенияОбИндивидуальномПредпринимателеГражданство" 
		ИЛИ Параметр = "СведенияОРуководителеГражданство" 
		ИЛИ Параметр = "СведенияОБухгалтереГражданство" 
		ИЛИ Параметр = "СведенияОУполномоченномПредставителеГражданство" Тогда
		
		Результат = Справочники.СтраныМира.Россия;
		
	КонецЕсли;
				
	Кэш.Вставить(Параметр, Результат);
	Возврат Результат;
	
КонецФункции

// Функция возвращает сведения о физлице.
//
// Параметры:
//  ФизЛицо           - ссылка на элемент справочника "ФизическиеЛица";
//  ДатаЗначения      - дата, на которую нужно получить сведения;
//  МассивПоказателей - массив показателей, значения которых нужно вернуть.
//  
// Возвращаемое значение:
//  Структура с ключами из массива показателей и возвращаемыми значениями.
//
// Пример:
//	Если МассивПоказателей = Неопределено Тогда
//		МассивПоказателей = Новый Массив;
//		МассивПоказателей.Добавить("ИНН");
//		МассивПоказателей.Добавить("Фамилия");
//		МассивПоказателей.Добавить("Имя");
//		МассивПоказателей.Добавить("Отчество");
//	КонецЕсли;
//	ФЛСведения = Новый Структура;
//	Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
//		Если ИмяПоказателя = "ИНН" Тогда
//			Значение = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ФизЛицо, "ИНН");
//		ИначеЕсли ИмяПоказателя = "Фамилия"
//			  ИЛИ ИмяПоказателя = "Имя"
//			  ИЛИ ИмяПоказателя = "Отчество" Тогда
//			ТаблицаСрезПоследних = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо", ФизЛицо));
//			Если ТаблицаСрезПоследних.Количество() > 0 Тогда
//				Значение = ТаблицаСрезПоследних[0][ИмяПоказателя];
//			Иначе
//				Значение = "";
//			КонецЕсли;
//		Иначе
//			Значение = "";
//		КонецЕсли;
//		ФЛСведения.Вставить(ИмяПоказателя, Значение);
//	КонецЦикла;
//	Возврат ФЛСведения;
//
Функция ПолучитьСведенияОФизЛице(Знач ФизЛицо, Знач МассивПоказателей = Неопределено, Знач ДатаЗначения = Неопределено) Экспорт
	
	Если МассивПоказателей = Неопределено Тогда
		МассивПоказателей = Новый Массив;
		МассивПоказателей.Добавить("ИНН");
		МассивПоказателей.Добавить("Фамилия");
		МассивПоказателей.Добавить("Имя");
		МассивПоказателей.Добавить("Отчество");
	КонецЕсли;
	
	Если  ТипЗнч(ФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
		ЭтоОрганизация = Истина;
		Организация = ФизЛицо;
		ФизЛицо = ФизЛицо.ФизическоеЛицо;
	Иначе
		ЭтоОрганизация = Ложь;
	КонецЕсли;
	
	ФЛСведения = Новый Структура;
	ТаблицаСрезПоследних = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо", ФизЛицо));
	Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
		Если ИмяПоказателя = "ИНН" Тогда
			Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(?(ЭтоОрганизация, Организация, ФизЛицо), "ИНН");
		ИначеЕсли ИмяПоказателя = "Фамилия"
			  ИЛИ ИмяПоказателя = "Имя"
			  ИЛИ ИмяПоказателя = "Отчество" Тогда
				
				Если ТаблицаСрезПоследних.Количество() > 0 Тогда
					Значение = ТаблицаСрезПоследних[0][ИмяПоказателя];
				Иначе
					Значение = "";
				КонецЕсли;
		Иначе
			Значение = "";
		КонецЕсли;
		ФЛСведения.Вставить(ИмяПоказателя, Значение);
	КонецЦикла;
	Возврат ФЛСведения;
	
КонецФункции

// Возвращает результат проверки актуализации данных учета.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - ссылка на элемент справочника "Организации".
//  Период      - Дата - отчетный период.
//  РезультатПроверки - Структура - возвращаемая структура параметров актуализации.
//
// Пример реализации:
//  АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
//  ПараметрыПроверки = Новый Структура;
//  ПараметрыПроверки.Вставить("Организация", Организация);
//  ПараметрыПроверки.Вставить("Период",      Период);
//  ПараметрыПроверки.Вставить("УИДЗамера",   Новый УникальныйИдентификатор);
//  ПараметрыПроверки.Вставить("АктуализироватьВесьПериод", Истина);
//  Обработки.ЗакрытиеМесяца.ПроверитьАктуальностьВФоне(ПараметрыПроверки, АдресХранилища);
//  РезультатПроверки = ПолучитьИзВременногоХранилища(АдресХранилища);
//
Процедура ПолучитьРезультатПроверкиАктуализацииДанныхУчета(Организация, Период, РезультатПроверки) Экспорт
					
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Процедуры получения сведений об обособленном подразделении.

// Процедура возвращает признак того, что в конфигурации используется механизм отправки
// по различным направлениям в Росстат (для обособленных подразделений).
//
// Параметры:
//  ПризнакИспользования - Булево - Истина, если реализована отправка по различным направлениям
//
Процедура ИспользуетсяОтправкаВРосстатПоРазнымНаправлениям(ПризнакИспользования) Экспорт 
	
КонецПроцедуры

// Получает код ОКПО обособленного подразделения.
// 
// Параметры:
//  Подразделение - СправочникСсылка.ПодразделенияОрганизаций
//  КодОКПО       - Строка(14) - код ОКПО обособленного подразделения
//
Процедура ПолучитьКодОКПОПодразделения(Знач Подразделение, КодОКПО) Экспорт 
	
КонецПроцедуры

// Получает код органа ФСГС обособленного подразделения.
// 
// Параметры:
//  Подразделение - СправочникСсылка.ПодразделенияОрганизаций
//  КодФСГС       - Строка(5) - код органа ФСГС для подразделения (например, "23-45")
//
Процедура ПолучитьКодОрганаФСГСПодразделения(Знач Подразделение, КодФСГС) Экспорт 
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОМАТИЧЕСКОГО ЗАПОЛНЕНИЯ
//

// Функция возвращает структуру показателей.
// Ключ структуры – идентификатор показателя.
// Значение структуры – массив из двух элементов:
// 	- признак автозаполнения показателя;
//	- признак расшифровки показателя.
//
// Параметры:
// 	ИДОтчета         - идентификатор отчета;
//	ИДРедакцииОтчета - идентификатор редакции формы отчета;
//  ПараметрыОтчета  - структура параметров отчета.
//
// Пример:
//	ПоказателиОтчета = Новый Структура;
//	Если ИДОтчета = "РегламентированныйОтчетРСВ1" Тогда
//		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв1" Тогда
//			РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100010003", Истина, Истина);
//		КонецЕсли;
//	КонецЕсли;
//	Возврат ПоказателиОтчета;
//
Функция ПолучитьСведенияОПоказателяхОтчета(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета = Неопределено) Экспорт
	
	ПоказателиОтчета = Новый Структура;
	
	Если ИДОтчета = "РегламентированныйОтчетСведенияОСреднесписочнойЧисленностиРаботников" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2007Кв1" Тогда
			
			ОписаниеПоказателей_СреднесписочнаяЧисленностьРаботников_2007Кв1(ПоказателиОтчета);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетРСВ1" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв1" Тогда
			
			ОписаниеПоказателей_РСВ1_2012Кв1(ПоказателиОтчета);
			ОписаниеПоказателей_СреднесписочнаяЧисленностьРаботающих_РСВ1_2011Кв1(ПоказателиОтчета);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПоказателиОтчета;
	
КонецФункции

// Функция возвращает признак реализации настройки автозаполняемых показателей регл. отчета.
//
// Параметры:
// 	ИДОтчета         - идентификатор отчета;
//	ИДРедакцииОтчета - идентификатор редакции формы отчета;
//
// Пример:
//  Если ИДОтчета = "РегламентированныйОтчетСтатистикаФормаП1" Тогда
//		Если ИДРедакцииОтчета = "ФормаОтчета2010Кв1" Тогда	
//			Возврат Истина;
//		КонецЕсли;
//	КонецЕсли;
//	Возврат Ложь;
//
Функция РеализованаНастройкаАвтозаполняемыхПоказателейРеглОтчета(ИДОтчета, ИДРедакцииОтчета) Экспорт
	    	
КонецФункции

// Процедура заполняет переданную в виде контейнера структуру данных отчета.
//
// Пример:
//	Если ИДОтчета = "РегламентированныйОтчетРСВ1" Тогда
//		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв1" Тогда	
//			Контейнер.Раздел30.П000300030103 = 100;
//			Контейнер.Раздел41.Добавить();
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ЗаполнитьОтчет(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер) Экспорт
	
	
	Если ИДОтчета = "РегламентированныйОтчетУСН" Тогда
		Если ИДРедакцииОтчета = "ФормаОтчета2009Кв1" Тогда
			ЗаполнитьОтчетУСНФормаОтчета2009Кв1(ПараметрыОтчета, Контейнер);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2014Кв1" Тогда
			ЗаполнитьОтчетУСНФормаОтчета2014Кв1(ПараметрыОтчета, Контейнер);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2015Кв1" Тогда
			ЗаполнитьОтчетУСНФормаОтчета2015Кв1(ПараметрыОтчета, Контейнер);
		КонецЕсли;
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСведенияОСреднесписочнойЧисленностиРаботников" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2007Кв1" Тогда
			
			ЗначенияПоказателей_СреднесписочнаяЧисленностьРаботников_2007Кв1(ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетРСВ1" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2012Кв1" Тогда	
			
			ЗначенияПоказателей_РСВ1_2012Кв1(ПараметрыОтчета, Контейнер);	
			ЗначенияПоказателей_СреднесписочнаяЧисленностьРаботников_РСВ1_2012Кв1(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2013Кв1" Тогда	
			
			ЗначенияПоказателей_РСВ1_2013Кв1(ПараметрыОтчета, Контейнер);	
			ЗначенияПоказателей_СреднесписочнаяЧисленностьРаботников_РСВ1_2013Кв1(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2014Кв1" Тогда	
			
			ЗначенияПоказателей_РСВ1_2014Кв1(ПараметрыОтчета, Контейнер);	
			ЗначенияПоказателей_СреднесписочнаяЧисленностьРаботников_РСВ1_2014Кв1(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2015Кв1" Тогда	
			
			ЗначенияПоказателей_РСВ1_2015Кв1(ПараметрыОтчета, Контейнер);	
			ЗначенияПоказателей_СреднесписочнаяЧисленностьРаботников_РСВ1_2014Кв1(ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
	ИначеЕсли ИДОтчета = "РегламентированныйОтчет4ФСС" Тогда
		Если ИДРедакцииОтчета = "ФормаОтчета2012Кв1" Тогда
			ЗначенияПоказателей_4ФСС_2012Кв1(ПараметрыОтчета, Контейнер);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2013Кв2" Тогда
			ЗначенияПоказателей_4ФСС_2013Кв2(ПараметрыОтчета, Контейнер);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2014Кв1" Тогда
			ЗначенияПоказателей_4ФСС_2013Кв2(ПараметрыОтчета, Контейнер);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2015Кв1" Тогда
			ЗначенияПоказателей_4ФСС_2015Кв1(ПараметрыОтчета, Контейнер);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2016Кв1" 
			Или ИДРедакцииОтчета = "ФормаОтчета2016Кв3" Тогда
			ЗначенияПоказателей_4ФСС_2016Кв1(ПараметрыОтчета, Контейнер);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2017Кв1"
			ИЛИ ИДРедакцииОтчета = "ФормаОтчета2017Кв3" Тогда
			ЗначенияПоказателей_4ФСС_2017Кв1(ПараметрыОтчета, Контейнер);
		КонецЕсли;
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетЕдиныйНалогНаВмененныйДоход" Тогда
		Если ИДРедакцииОтчета = "ФормаОтчета2012Кв1" Тогда
			ЗначенияПоказателей_ЕНВД_2012Кв1(ПараметрыОтчета, Контейнер);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2013Кв4" Тогда
			ЗначенияПоказателей_ЕНВД_2013Кв4(ПараметрыОтчета, Контейнер);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2015Кв1" Тогда
			ЗначенияПоказателей_ЕНВД_2015Кв1(ПараметрыОтчета, Контейнер);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2016Кв1" 
			ИЛИ ИДРедакцииОтчета = "ФормаОтчета2017Кв1" Тогда
			ЗначенияПоказателей_ЕНВД_2016Кв1(ПараметрыОтчета, Контейнер);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2018Кв1" 
			ИЛИ ИДРедакцииОтчета = "ФормаОтчета2018Кв3"
			ИЛИ ИДРедакцииОтчета = "ФормаОтчета2018Кв4" Тогда
			ЗначенияПоказателей_ЕНВД_2018Кв1(ПараметрыОтчета, Контейнер);
		КонецЕсли;
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФорма1ИПсвед"
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФорма1Предприниматель" Тогда
		ЗаполнитьФормуСтатистики(Контейнер, ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета);
	ИначеЕсли ИДОтчета = "РегламентированныйОтчет6НДФЛ" Тогда
		Если ИДРедакцииОтчета = "ФормаОтчета2016Кв1" Или ИДРедакцииОтчета = "ФормаОтчета2017Кв4" Тогда
			Заполнить6НДФЛ(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер);
		КонецЕсли;
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетАлкоПриложение12" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2012Кв3" Тогда
			
			ЗаполнитьРегламентированныйОтчетАлкоПриложение12ФормаОтчета2012Кв3(ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетРасчетПоСтраховымВзносам" Тогда
		Если ИДРедакцииОтчета = "ФормаОтчета2017Кв1" Тогда
			ЗначенияПоказателей_РСВ_2017Кв1(ПараметрыОтчета, Контейнер);
			ЗначенияПоказателей_РСВ_2017Кв1_СоцСтрах(ПараметрыОтчета, Контейнер);
			ПоместитьВоВременноеХранилище(Новый Структура("Контейнер", Контейнер), ПараметрыОтчета.АдресВоВременномХранилище);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ПроцедурыФормСтатистики

// Процедура заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//	- Контейнер         - Структура - модифицируемый параметр; данные отчета которые нужно заполнить
//	- ИмяОтчета         - Строка    - идентификатор отчета (имя отчета в метаданных)
//	- ИмяРедакцииОтчета - Строка    - идентификатор редакции отчета (имя формы в метаданных)
// 	- ПараметрыОтчета   - Структура - структура параметров отчета, должна содержать ключи:
//		- Организация 						  - СправочникСсылка.Организации
//		- мДатаНачалаПериодаОтчета 			  - Дата
//		- мДатаКонцаПериодаОтчета 			  - Дата
//		- Периодичность			 			  - ПеречислениеСсылка.Периодичность
// 
Процедура ЗаполнитьФормуСтатистики(Контейнер, Знач ИмяОтчета, Знач ИмяРедакцииОтчета, ПараметрыОтчета) Экспорт
	
	Перем ТаблицаРасшифровки;
	
	Если ИмяОтчета = "РегламентированныйОтчетСтатистикаФорма1Предприниматель" Тогда
		// Заполняем виды налогообложения налогоплательщика
		//
		Налогообложение = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета);
		
		Поля = Контейнер.ПолеТабличногоДокументаФормаОтчета;
		Поля.П31 = ?(Налогообложение.ПлательщикЕНВД, "X", ""); // ЕНВД
		Поля.П32 = ?(Налогообложение.ПлательщикУСН, "X", ""); // УСН
		Поля.П35 = ?(Налогообложение.ПрименяетсяПатент, "X", ""); // Патент
		
		Поля.П43 = Сотрудники.СреднесписочнаяЧисленностьРаботающих(ПараметрыОтчета.Организация,  ПараметрыОтчета.мДатаНачалаПериодаОтчета,  ПараметрыОтчета.мДатаКонцаПериодаОтчета); // Количество наемных работников
	КонецЕсли;
	
	// Сохраняем таблицу расшифровок во временном хранилище в привязке к уникальному идентификатору формы
	ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ЗапросВФНСНаПроверкуСведенийРаботников

// Процедура формирует сведения, необходимые для представления в налоговую инспекцию
// запроса работодателя на проверку ИНН, ФИО, СНИЛС работающих лиц в электронной форме.
//
// Параметры:
//  СтруктураПараметров - Структура - свойства:
//     * Организация - СправочникСсылка.Организации - организация, по работникам
//                     которой будут формироваться сведения для файла;
//     * ДатаПодписи - Дата - дата, на которую будут формироваться сведения для файла.
//     * ИНН - Строка - возвращается ИНН организации;
//     * КПП - Строка - возвращается КПП организации (пустая строка в случае ИП);
//     * КодНалоговогоОргана - Строка - возвращается четырехзначный код налогового органа;
//     * СведенияОРаботниках - ТаблицаЗначений - возвращается таблица с колонками:
//        ** Фамилия - Строка - фамилия физического лица;
//        ** Имя - Строка - имя физического лица;
//        ** Отчество - Строка - отчество физического лица;
//        ** ИНН - Строка - ИНН физического лица;
//        ** СтраховойНомерПФР - Строка - СНИЛС физического лица;
//        ** ДатаРождения - Дата - дата рождения физического лица;
//        ** ВидДокумента - Строка - двузначный код вида документа, удостоверяющего личность физического лица;
//        ** СерияДокумента - Строка - серия документа, удостоверяющего личность физического лица;
//        ** НомерДокумента - Строка - номер документа, удостоверяющего личность физического лица.
//
Процедура ПолучитьДанныеДляЗапросаВФНСНаПроверкуСведенийРаботников(СтруктураПараметров) Экспорт
	
КонецПроцедуры

#КонецОбласти



Процедура ЗаполнитьОтчетУСНФормаОтчета2009Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
		ВызватьИсключение НСтр("ru='Не заполнен реквизит отчета Организация при авторасчете декларации по УСН'");
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетности.ПоказательОтчетности.Код КАК КодПоказателя,
	|	ЗначенияПоказателейОтчетности.ЗначениеПоказателя
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетности КАК ЗначенияПоказателейОтчетности
	|ГДЕ
	|	 ЗначенияПоказателейОтчетности.Организация = &Организация
	|	И ЗначенияПоказателейОтчетности.ПериодОтчетности = &ПериодОтчетности
	|	И ЗначенияПоказателейОтчетности.ПоказательОтчетности.Родитель = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ПоказателиОтчетности.ЕдиныйНалог)");
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ПериодОтчетности", НачалоДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПоказателей = Новый Структура;
	
	Пока Выборка.Следующий() Цикл
		СтруктураПоказателей.Вставить(Выборка.КодПоказателя, Выборка.ЗначениеПоказателя);
	КонецЦикла;
	
	Доходы = СтруктураПоказателей.СуммаДоходовЗаГодЕН;
	Расходы = СтруктураПоказателей.СуммаРасходовЗаГодЕН;
	
	ОН =  Контейнер.Раздел1.П000010000103;
	Если ОН = "1" Тогда // Объект налогообложения "Доходы"
		
		Контейнер.Раздел2.П000020021003 = Доходы;
		Контейнер.Раздел2.П000020022003 = 0;
		Контейнер.Раздел2.П000020022003 = 0;
		
		Контейнер.Раздел2.П000020028003 = СтруктураПоказателей.СуммаСтраховыхВзносовКУплатеЕН;
		
	ИначеЕсли ОН = "2" Тогда // Объект налогообложения "Расходы"
		Контейнер.Раздел2.П000020021003 = Доходы;
		Контейнер.Раздел2.П000020022003 = Расходы;
		Контейнер.Раздел2.П000020028003 = 0;
	Иначе
		Контейнер.Раздел2.П000020021003 = 0;
		Контейнер.Раздел2.П000020022003 = 0;
		Контейнер.Раздел2.П000020028003 = 0;
	КонецЕсли;

	// проплаченные авансы
	Если СтруктураПоказателей.Свойство("Авансы1квЕН") Тогда
		Контейнер.Раздел1.П000010003003 = СтруктураПоказателей.Авансы1квЕН;
	КонецЕсли;
	Если СтруктураПоказателей.Свойство("Авансы2квЕН") Тогда
		Контейнер.Раздел1.П000010004003 = СтруктураПоказателей.Авансы2квЕН;
	КонецЕсли;
	Если СтруктураПоказателей.Свойство("Авансы3квЕН") Тогда
		Контейнер.Раздел1.П000010005003 = СтруктураПоказателей.Авансы3квЕН;
	КонецЕсли;

	Если СтруктураПоказателей.РасчетМинимальнойСуммыЕН Тогда
		// КБК Минимального налога
		Если Год(ПараметрыОтчета.мДатаКонцаПериодаОтчета) = 2010 Тогда
			Контейнер.Раздел1.П000010008003 = "18210501030011000110";
		Иначе
			Контейнер.Раздел1.П000010008003 = "18210501050011000110";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗаполнитьОтчетУСНФормаОтчета2014Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
		ВызватьИсключение НСтр("ru='Не заполнен реквизит отчета Организация при авторасчете декларации по УСН'");
	КонецЕсли;
	
	НачалоПериода       = НачалоГода(ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	КонецПериода        = КонецГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	КонецПериодаГраница = Новый Граница(КонецПериода, ВидГраницы.Включая);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетности.ПоказательОтчетности.Код КАК КодПоказателя,
	|	ЗначенияПоказателейОтчетности.ЗначениеПоказателя
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетности КАК ЗначенияПоказателейОтчетности
	|ГДЕ
	|	 ЗначенияПоказателейОтчетности.Организация = &Организация
	|	И ЗначенияПоказателейОтчетности.ПериодОтчетности = &ПериодОтчетности
	|	И ЗначенияПоказателейОтчетности.ПоказательОтчетности.Родитель = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ПоказателиОтчетности.ЕдиныйНалог)");
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ПериодОтчетности", НачалоДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПоказателей = Новый Структура;
	
	Пока Выборка.Следующий() Цикл
		СтруктураПоказателей.Вставить(Выборка.КодПоказателя, Выборка.ЗначениеПоказателя);
	КонецЦикла;
	
	Доходы = СтруктураПоказателей.СуммаДоходовЗаГодЕН;
	Расходы = СтруктураПоказателей.СуммаРасходовЗаГодЕН;
	ПараметрыУчета = РегламентированнаяОтчетностьУСН.ПолучитьПараметрыУчетаОрганизации(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	ПрименяетсяУСНДоходы = Ложь;
	
	Если ПараметрыУчета <> Неопределено Тогда
		ПрименяетсяУСНДоходы = ПараметрыУчета.ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.Доходы;
	КонецЕсли;
	
	ЭтоИПБезВыплатФизлицам = СтруктураПоказателей.Зачет100ПроцСтрахВзносовЕН;
	
	// периоды и ставки налога для поквартальных расчетов
	ДанныеПериодов = Новый ТаблицаЗначений;
	ДанныеПериодов.Колонки.Добавить("НомерКвартала", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0, ДопустимыйЗнак.Неотрицательный));
	ДанныеПериодов.Колонки.Добавить("Период",        ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ДанныеПериодов.Колонки.Добавить("СтавкаНалога",  ОбщегоНазначения.ОписаниеТипаЧисло(5, 2, ДопустимыйЗнак.Неотрицательный));
	
	Для НомерКвартала = 1 По 4 Цикл
		
		ДатаНачалаКвартала = НачалоКвартала(ДобавитьМесяц(НачалоПериода, (НомерКвартала-1)*3));
		СтрокаПериода = ДанныеПериодов.Добавить();
		СтрокаПериода.НомерКвартала = НомерКвартала;
		СтрокаПериода.Период        = ДатаНачалаКвартала;
		
		ДатаОкончанияКвартала = КонецКвартала(ДобавитьМесяц(НачалоПериода, (НомерКвартала-1)*3));
		Если ПрименяетсяУСНДоходы Тогда
			ПараметрыУчетаКвартал = РегламентированнаяОтчетностьУСН.ПолучитьПараметрыУчетаОрганизации(ПараметрыОтчета.Организация, ДатаОкончанияКвартала);
			Если ПараметрыУчетаКвартал = Неопределено Тогда
				СтрокаПериода.СтавкаНалога = 6;
			Иначе
				СтрокаПериода.СтавкаНалога = ПараметрыУчетаКвартал.СтавкаНалога;
			КонецЕсли;
		Иначе
			ИмяЯчейки = "П000220026" + (НомерКвартала - 1) + "03";
			СтавкаИзДекларации = Контейнер.Раздел22[ИмяЯчейки];
			Если ЗначениеЗаполнено(СтавкаИзДекларации) Тогда
				СтрокаПериода.СтавкаНалога = СтавкаИзДекларации;
			Иначе
				ПараметрыУчетаКвартал = РегламентированнаяОтчетностьУСН.ПолучитьПараметрыУчетаОрганизации(ПараметрыОтчета.Организация, ДатаОкончанияКвартала);
				Если ПараметрыУчетаКвартал = Неопределено Тогда
					СтавкаИзУП = 15;
				Иначе
					СтавкаИзУП = ПараметрыУчетаКвартал.СтавкаНалога;
				КонецЕсли;
				Контейнер.Раздел22[ИмяЯчейки] = СтавкаИзУП;
				СтрокаПериода.СтавкаНалога = СтавкаИзУП;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ИтогоДоходы  = 0;
	ИтогоРасходы = 0;
	ИтогоРасходыУменьшающиеНалог = 0;
	
	// показатели налоговой базы по данным ИБ
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",        КонецПериода);
	Запрос.УстановитьПараметр("КонецПериодаГраница", КонецПериодаГраница);
	Запрос.УстановитьПараметр("Организация",         ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ДанныеПериодов",      ДанныеПериодов);

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеПериодов.Период КАК Период,
	|	ДанныеПериодов.НомерКвартала
	|ПОМЕСТИТЬ ВТ_Периоды
	|ИЗ
	|	&ДанныеПериодов КАК ДанныеПериодов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Периоды.НомерКвартала,
	|	ВТ_Периоды.Период КАК Период,
	|	ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.ДоходБазаОборот, 0) КАК Доходы,
	|	ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.РасходБазаОборот, 0) КАК Расходы
	|ИЗ
	|	ВТ_Периоды КАК ВТ_Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериодаГраница, Квартал, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
	|		ПО (ВТ_Периоды.Период = НАЧАЛОПЕРИОДА(КнигаУчетаДоходовИРасходовОбороты.Период, КВАРТАЛ))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерКвартала;
	|";
	
	Если ПрименяетсяУСНДоходы Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВТ_Периоды.НомерКвартала КАК НомерКвартала,
		|	ВТ_Периоды.Период,
		|	ЕСТЬNULL(ВложенныйЗапрос.СуммаУплачено, 0) КАК СуммаУплачено
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			НАЧАЛОПЕРИОДА(РасчетыПоНалогамОбороты.Период, КВАРТАЛ) КАК Период,
		|			РасчетыПоНалогамОбороты.СуммаРасход КАК СуммаУплачено
		|		ИЗ
		|			РегистрНакопления.РасчетыПоНалогам.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			КВАРТАЛ,
		|			Организация = &Организация
		|				И ВидНалога В (&ВидыВзаиморасчетовВзносыВПФРИФСС)) КАК РасчетыПоНалогамОбороты
		|		
		|		) КАК ВложенныйЗапрос
		|		ПО ВТ_Периоды.Период = ВложенныйЗапрос.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерКвартала
		|;";
		ВидыВзаиморасчетовВзносыВПФРИФСС = Новый Массив;
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительная);
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховая);
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСвыше300тр);
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ТФОМС);
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФФОМС);
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники);
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховаяСотрудники);
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФСССотрудники);
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФССТравматизмСотрудники);
		
		Запрос.УстановитьПараметр("ВидыВзаиморасчетовВзносыВПФРИФСС", ВидыВзаиморасчетовВзносыВПФРИФСС);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапросаНалоговаяБаза = Запрос.ВыполнитьПакет();
	
	ТаблицаДоходыРасходы = РезультатЗапросаНалоговаяБаза[1].Выгрузить();
	Если ПрименяетсяУСНДоходы Тогда // Объект налогообложения "Доходы"
		
		ЗаполняемыйРаздел = Контейнер.Раздел21;
		
		ЗаполняемыйРаздел["П000210010203"] = ?(ЭтоИПБезВыплатФизлицам, "2", "1");
		КоэффМаксУменьшенияНалога = ?(ЭтоИПБезВыплатФизлицам, 1, 0.5);
		
		СистемаНалогообложения = РегистрыСведений.СистемыНалогообложенияОрганизаций.ПолучитьПоследнее(КонецДня(КонецПериода), Новый Структура("Организация", ПараметрыОтчета.Организация));
		УчитыватьСтраховыеВзносыВУСН = НЕ (СистемаНалогообложения.ПлательщикЕНВД И СистемаНалогообложения.ПлательщикУСН И ПараметрыОтчета.Организация.ВидУчетаСтраховыхВзносов = Перечисления.ВидыУчетаСтраховыхВзносов.УчитыватьВЕНВД);
		
		ТаблицаРасходыУменьшающиеНалог = РезультатЗапросаНалоговаяБаза[2].Выгрузить();
	
		Для каждого СтрокаПериода Из ДанныеПериодов Цикл
			
			ИдКвартала = Строка(СтрокаПериода.НомерКвартала - 1);
			
			СтрокаДоходов = ТаблицаДоходыРасходы[СтрокаПериода.НомерКвартала-1];
			ИтогоДоходы   = ИтогоДоходы + СтрокаДоходов.Доходы;
			
			СтрокаРасходовУменьшающихНалог = ТаблицаРасходыУменьшающиеНалог[СтрокаПериода.НомерКвартала-1];
			ИтогоРасходыУменьшающиеНалог   = ИтогоРасходыУменьшающиеНалог +?(УчитыватьСтраховыеВзносыВУСН, СтрокаРасходовУменьшающихНалог.СуммаУплачено, 0);
				
			НалогОтБазы = ИтогоДоходы*СтрокаПериода.СтавкаНалога/100;
			УменьшениеНалога = Мин(НалогОтБазы*КоэффМаксУменьшенияНалога, ИтогоРасходыУменьшающиеНалог);
				
			ЗаполняемыйРаздел["П000210011" + ИдКвартала + "03"] = ИтогоДоходы;
			ЗаполняемыйРаздел["П000210014" + ИдКвартала + "03"] = УменьшениеНалога;
			
		КонецЦикла;
		
		
	Иначе // Объект налогообложения "Расходы"
		
		ЗаполняемыйРаздел = Контейнер.Раздел22;
		
		Для каждого СтрокаПериода Из ДанныеПериодов Цикл
			
			ИдКвартала = Строка(СтрокаПериода.НомерКвартала - 1);
			
			СтрокаДоходовРасходов = ТаблицаДоходыРасходы[СтрокаПериода.НомерКвартала-1];
		
			ИтогоДоходы  = ИтогоДоходы + СтрокаДоходовРасходов.Доходы;
			ИтогоРасходы = ИтогоРасходы + СтрокаДоходовРасходов.Расходы;
			
			Если СтрокаПериода.НомерКвартала = 4 Тогда
				ИтогоРасходы = ИтогоРасходы ;
				НалоговаяБаза  = ИтогоДоходы - ИтогоРасходы;
				ЗаполняемыйРаздел["П000220023003"] = 0;
			КонецЕсли;
			
			ЗаполняемыйРаздел["П000220021" + ИдКвартала + "03"] = ИтогоДоходы;
			ЗаполняемыйРаздел["П000220022" + ИдКвартала + "03"] = ИтогоРасходы;
			
		КонецЦикла;
		
	КонецЕсли;

	
КонецПроцедуры

Процедура ЗаполнитьОтчетУСНФормаОтчета2015Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
		ВызватьИсключение НСтр("ru='Не заполнен реквизит отчета Организация при авторасчете декларации по УСН'");
	КонецЕсли;
	
	НачалоПериода       = НачалоГода(ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	КонецПериода        = КонецГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	КонецПериодаГраница = Новый Граница(КонецПериода, ВидГраницы.Включая);
	
	Если ПараметрыОтчета.Свойство("ДатаНачалаРасширенногоПериодаОтчета") Тогда
		// Для зарегистрированных в декабре при подаче декларации за следующий год начало налогового периода - дата регистрации.
		НачалоПериода = ПараметрыОтчета.ДатаНачалаРасширенногоПериодаОтчета;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетности.ПоказательОтчетности.Код КАК КодПоказателя,
	|	ЗначенияПоказателейОтчетности.ЗначениеПоказателя
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетности КАК ЗначенияПоказателейОтчетности
	|ГДЕ
	|	 ЗначенияПоказателейОтчетности.Организация = &Организация
	|	И ЗначенияПоказателейОтчетности.ПериодОтчетности = &ПериодОтчетности
	|	И ЗначенияПоказателейОтчетности.ПоказательОтчетности.Родитель = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ПоказателиОтчетности.ЕдиныйНалог)");
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ПериодОтчетности", НачалоДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПоказателей = Новый Структура;
	
	Пока Выборка.Следующий() Цикл
		СтруктураПоказателей.Вставить(Выборка.КодПоказателя, Выборка.ЗначениеПоказателя);
	КонецЦикла;
	
	Доходы = СтруктураПоказателей.СуммаДоходовЗаГодЕН;
	Расходы = СтруктураПоказателей.СуммаРасходовЗаГодЕН;
	ПараметрыУчета = РегламентированнаяОтчетностьУСН.ПолучитьПараметрыУчетаОрганизации(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	ПрименяетсяУСНДоходы = Ложь;
	
	Если ПараметрыУчета <> Неопределено Тогда
		ПрименяетсяУСНДоходы = ПараметрыУчета.ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.Доходы;
	КонецЕсли;
	
	ЭтоИПБезВыплатФизлицам = СтруктураПоказателей.Зачет100ПроцСтрахВзносовЕН;
	
	// периоды и ставки налога для поквартальных расчетов
	ДанныеПериодов = Новый ТаблицаЗначений;
	ДанныеПериодов.Колонки.Добавить("НомерКвартала", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0, ДопустимыйЗнак.Неотрицательный));
	ДанныеПериодов.Колонки.Добавить("Период",        ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ДанныеПериодов.Колонки.Добавить("СтавкаНалога",  ОбщегоНазначения.ОписаниеТипаЧисло(5, 2, ДопустимыйЗнак.Неотрицательный));
	
	Для НомерКвартала = 1 По 4 Цикл
		
		ДатаНачалаКвартала = НачалоКвартала(ДобавитьМесяц(НачалоПериода, (НомерКвартала-1)*3));
		СтрокаПериода = ДанныеПериодов.Добавить();
		СтрокаПериода.НомерКвартала = НомерКвартала;
		СтрокаПериода.Период        = ДатаНачалаКвартала;
		
		ДатаОкончанияКвартала = КонецКвартала(ДобавитьМесяц(НачалоПериода, (НомерКвартала-1)*3));
		ПараметрыУчетаКвартал = РегламентированнаяОтчетностьУСН.ПолучитьПараметрыУчетаОрганизации(ПараметрыОтчета.Организация, ДатаОкончанияКвартала);
		Если ПрименяетсяУСНДоходы Тогда
			ИмяЯчейки = "П002110013" + (НомерКвартала - 1) + "03";
			Если ПараметрыУчетаКвартал = Неопределено Тогда
				СтавкаИзУП = 6;
			Иначе
				СтавкаИзУП = ПараметрыУчетаКвартал.СтавкаНалога;
			КонецЕсли;
			Контейнер.Раздел21[ИмяЯчейки] = СтавкаИзУП;
		Иначе
			ИмяЯчейки = "П000220026" + (НомерКвартала - 1) + "03";
			Если ПараметрыУчетаКвартал = Неопределено Тогда
				СтавкаИзУП = 15;
			Иначе
				СтавкаИзУП = ПараметрыУчетаКвартал.СтавкаНалога;
			КонецЕсли;
			Контейнер.Раздел22[ИмяЯчейки] = СтавкаИзУП;
		КонецЕсли;
		СтрокаПериода.СтавкаНалога = СтавкаИзУП;
	КонецЦикла;
	
	ИтогоДоходы  = 0;
	ИтогоРасходы = 0;
	ИтогоРасходыУменьшающиеНалог = 0;
	
	// показатели налоговой базы по данным ИБ
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",        КонецПериода);
	Запрос.УстановитьПараметр("КонецПериодаГраница", КонецПериодаГраница);
	Запрос.УстановитьПараметр("Организация",         ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ДанныеПериодов",      ДанныеПериодов);

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеПериодов.Период КАК Период,
	|	ДанныеПериодов.НомерКвартала
	|ПОМЕСТИТЬ ВТ_Периоды
	|ИЗ
	|	&ДанныеПериодов КАК ДанныеПериодов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Периоды.НомерКвартала,
	|	ВТ_Периоды.Период КАК Период,
	|	ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.ДоходБазаОборот, 0) КАК Доходы,
	|	ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.РасходБазаОборот, 0) КАК Расходы
	|ИЗ
	|	ВТ_Периоды КАК ВТ_Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериодаГраница, Квартал, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
	|		ПО (ВТ_Периоды.Период = НАЧАЛОПЕРИОДА(КнигаУчетаДоходовИРасходовОбороты.Период, КВАРТАЛ))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерКвартала;
	|";
	
	Если ПрименяетсяУСНДоходы Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВТ_Периоды.НомерКвартала КАК НомерКвартала,
		|	ВТ_Периоды.Период,
		|	ЕСТЬNULL(ВложенныйЗапрос.СуммаУплачено, 0) КАК СуммаУплачено
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			НАЧАЛОПЕРИОДА(РасчетыПоНалогамОбороты.Период, КВАРТАЛ) КАК Период,
		|			РасчетыПоНалогамОбороты.СуммаРасход КАК СуммаУплачено
		|		ИЗ
		|			РегистрНакопления.РасчетыПоНалогам.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			КВАРТАЛ,
		|			Организация = &Организация
		|				И ВидНалога В (&ВидыВзаиморасчетовВзносыВПФРИФСС)) КАК РасчетыПоНалогамОбороты
		|		
		|		) КАК ВложенныйЗапрос
		|		ПО ВТ_Периоды.Период = ВложенныйЗапрос.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерКвартала
		|;";
		ВидыВзаиморасчетовВзносыВПФРИФСС = Новый Массив;
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительная);
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховая);
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСвыше300тр);
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ТФОМС);
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФФОМС);
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники);
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховаяСотрудники);
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФСССотрудники);
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФССТравматизмСотрудники);
		
		Запрос.УстановитьПараметр("ВидыВзаиморасчетовВзносыВПФРИФСС", ВидыВзаиморасчетовВзносыВПФРИФСС);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапросаНалоговаяБаза = Запрос.ВыполнитьПакет();
	
	ТаблицаДоходыРасходы = РезультатЗапросаНалоговаяБаза[1].Выгрузить();
	Если ПрименяетсяУСНДоходы Тогда // Объект налогообложения "Доходы"
		
		ЗаполняемыйРаздел = Контейнер.Раздел21;
		
		ЗаполняемыйРаздел["П002110010203"] = ?(ЭтоИПБезВыплатФизлицам, "2", "1");
		КоэффМаксУменьшенияНалога = ?(ЭтоИПБезВыплатФизлицам, 1, 0.5);
		
		СистемаНалогообложения = РегистрыСведений.СистемыНалогообложенияОрганизаций.ПолучитьПоследнее(КонецДня(КонецПериода), Новый Структура("Организация", ПараметрыОтчета.Организация));
		УчитыватьСтраховыеВзносыВУСН = НЕ (СистемаНалогообложения.ПлательщикЕНВД И СистемаНалогообложения.ПлательщикУСН И ПараметрыОтчета.Организация.ВидУчетаСтраховыхВзносов = Перечисления.ВидыУчетаСтраховыхВзносов.УчитыватьВЕНВД);
		
		ТаблицаРасходыУменьшающиеНалог = РезультатЗапросаНалоговаяБаза[2].Выгрузить();
	
		Для каждого СтрокаПериода Из ДанныеПериодов Цикл
			
			ИдКвартала = Строка(СтрокаПериода.НомерКвартала - 1);
			
			СтрокаДоходов = ТаблицаДоходыРасходы[СтрокаПериода.НомерКвартала-1];
			ИтогоДоходы   = ИтогоДоходы + СтрокаДоходов.Доходы;
			
			СтрокаРасходовУменьшающихНалог = ТаблицаРасходыУменьшающиеНалог[СтрокаПериода.НомерКвартала-1];
			ИтогоРасходыУменьшающиеНалог   = ИтогоРасходыУменьшающиеНалог +?(УчитыватьСтраховыеВзносыВУСН, СтрокаРасходовУменьшающихНалог.СуммаУплачено, 0);
				
			НалогОтБазы = ИтогоДоходы*СтрокаПериода.СтавкаНалога/100;
			УменьшениеНалога = Мин(НалогОтБазы*КоэффМаксУменьшенияНалога, ИтогоРасходыУменьшающиеНалог);
			
			ЗаполняемыйРаздел["П002110011" + ИдКвартала + "03"] = ИтогоДоходы;
			ЗаполняемыйРаздел["П002110014" + ИдКвартала + "03"] = УменьшениеНалога;
		КонецЦикла;
		
		
	Иначе // Объект налогообложения "Расходы"
		
		ЗаполняемыйРаздел = Контейнер.Раздел22;
		
		Для каждого СтрокаПериода Из ДанныеПериодов Цикл
			
			ИдКвартала = Строка(СтрокаПериода.НомерКвартала - 1);
			
			СтрокаДоходовРасходов = ТаблицаДоходыРасходы[СтрокаПериода.НомерКвартала-1];
		
			ИтогоДоходы  = ИтогоДоходы + СтрокаДоходовРасходов.Доходы;
			ИтогоРасходы = ИтогоРасходы + СтрокаДоходовРасходов.Расходы;
			
			Если СтрокаПериода.НомерКвартала = 4 Тогда
				ИтогоРасходы = ИтогоРасходы ;
				НалоговаяБаза  = ИтогоДоходы - ИтогоРасходы;
				ЗаполняемыйРаздел["П000220023003"] = 0;
			КонецЕсли;
			
			ЗаполняемыйРаздел["П000220021" + ИдКвартала + "03"] = ИтогоДоходы;
			ЗаполняемыйРаздел["П000220022" + ИдКвартала + "03"] = ИтогоРасходы;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Заполнить6НДФЛ(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер) 
	РегламентированнаяОтчетностьУСН.Заполнить6НДФЛ(ПараметрыОтчета, Контейнер);
КонецПроцедуры

Процедура ЗначенияПоказателей_ЕНВД_2012Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ИПИспользуетТрудНаемныхРаботников =РегламентированнаяОтчетность.ИПИспользуетТрудНаемныхРаботников(ПараметрыОтчета.Организация);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ВидПредпринимательскойДеятельности.Код КАК КодВидаПредпринимательскойДеятельности,
	|	АдресОсуществленияДеятельности.ЗначенияПолей КАК АдресОсуществленияДеятельности,
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.КодПоОКАТО КАК КодОКАТО,
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ВидПредпринимательскойДеятельности.БазоваяДоходность КАК БазоваяДоходность,
	|	ПоказателиЕНВДПоказателиЕНВД.ЗначениеФизическогоПоказателя1,
	|	ПоказателиЕНВДПоказателиЕНВД.ЗначениеФизическогоПоказателя2,
	|	ПоказателиЕНВДПоказателиЕНВД.ЗначениеФизическогоПоказателя3,
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.КоэффициентК2 КАК КоэффициентК2,
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.КодНалоговогоОрганаПолучателя КАК КодИФНС,
	|	ПоказателиЕНВДПоказателиЕНВД.ВыработкаДней1 КАК ВыработкаДней1,
	|	ПоказателиЕНВДПоказателиЕНВД.ВыработкаДней2 КАК ВыработкаДней2,
	|	ПоказателиЕНВДПоказателиЕНВД.ВыработкаДней3 КАК ВыработкаДней3,
	|	ПоказателиЕНВДПоказателиЕНВД.Ссылка.ДнейВсего1 КАК ДнейВсего1,
	|	ПоказателиЕНВДПоказателиЕНВД.Ссылка.ДнейВсего2 КАК ДнейВсего2,
	|	ПоказателиЕНВДПоказателиЕНВД.Ссылка.ДнейВсего3 КАК ДнейВсего3,
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ОКУНСтрокой КАК ОКУНСтрокой,
	|	ВЫБОР
	|		КОГДА ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ДатаНачала
	|		ИНАЧЕ ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ДатаНачала
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.Актуально
	|			ТОГДА &ДатаОкончания
	|		ИНАЧЕ ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.ПоказателиЕНВД.ПоказателиЕНВД КАК ПоказателиЕНВДПоказателиЕНВД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДеятельностиЕНВД.КонтактнаяИнформация КАК АдресОсуществленияДеятельности
	|		ПО ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД = АдресОсуществленияДеятельности.Ссылка
	|			И (АдресОсуществленияДеятельности.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресДеятельностиЕНВД))
	|ГДЕ
	|	НЕ ПоказателиЕНВДПоказателиЕНВД.Ссылка.ПометкаУдаления
	|	И ПоказателиЕНВДПоказателиЕНВД.Ссылка.Организация = &Организация
	|	И ПоказателиЕНВДПоказателиЕНВД.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоэффициентДефляторСрезПоследних.Значение
	|ИЗ
	|	РегистрСведений.КоэффициентДефлятор.СрезПоследних(&ДатаОкончания, ) КАК КоэффициентДефляторСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоНалогамОбороты.СуммаРасход КАК СуммаУплачено
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогам.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			,
	|			Организация = &Организация
	|				И ВидНалога В (&ВидыВзаиморасчетовВзносыВПФРИФСС)) КАК РасчетыПоНалогамОбороты");
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоКвартала(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецКвартала(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	ВидыВзаиморасчетовВзносыВПФРИФСС = Новый Массив;
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительная);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховая);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСвыше300тр);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ТФОМС);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФФОМС);
	Запрос.УстановитьПараметр("ВидыВзаиморасчетовВзносыВПФРИФСС", ВидыВзаиморасчетовВзносыВПФРИФСС);
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	// получение значение коэффициента дефлятора
	Выборка = РезультатПакета[1].Выбрать();
	Выборка.Следующий();
	КоэффДефлятор = Выборка.Значение;
	
	СистемаНалогообложения = РегистрыСведений.СистемыНалогообложенияОрганизаций.ПолучитьПоследнее(КонецДня(ПараметрыОтчета.ДатаКонцаПериодаОтчета), Новый Структура("Организация", ПараметрыОтчета.Организация));
	
	СуммаСтраховыхВзносовЕНВД = 0;
	// получение значения страховых взносов
	Если НЕ (СистемаНалогообложения.ПлательщикЕНВД И СистемаНалогообложения.ПлательщикУСН И ПараметрыОтчета.Организация.ВидУчетаСтраховыхВзносов = Перечисления.ВидыУчетаСтраховыхВзносов.УчитыватьВУСН) Тогда
		// получение значения страховых взносов
		Выборка = РезультатПакета[2].Выбрать();
		Если Выборка.Следующий() Тогда
			СуммаСтраховыхВзносовЕНВД = Выборка.СуммаУплачено;
		КонецЕсли;
	КонецЕсли;
	
	// общая выборка
	Выборка = РезультатПакета[0].Выбрать(); 
	
	ПерваяСтраница = Истина; 
	Итератор = 0;
	КодИФНС = "";
	ТекущаяСтраница = Контейнер.Раздел2[0];
	ТекущаяСтраница.Представление = "Раздел2";
	
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ПерваяСтраница Тогда
			ТекущаяСтраница = Контейнер.Раздел2.Добавить();
		Иначе
			ПерваяСтраница = Ложь;
		КонецЕсли;
		
		Данные = ТекущаяСтраница.Данные[0].Значение;
		
		КодИФНС = Выборка.КодИФНС;
		
		СведенияОбАдресе = УправлениеКонтактнойИнформацией.СведенияОбАдресе(Выборка.АдресОсуществленияДеятельности);
		
		Данные.П000020001000 = Выборка.КодВидаПредпринимательскойДеятельности;
		
		Данные.П000020002001 = СведенияОбАдресе.Индекс;
		Данные.П000020002002 = СведенияОбАдресе.КодРегиона;
		Данные.П000020002003 = СведенияОбАдресе.Район;
		Данные.П000020002004 = СведенияОбАдресе.Город;
		Данные.П000020002005 = СведенияОбАдресе.НаселенныйПункт;
		Данные.П000020002006 = СведенияОбАдресе.Улица;
		Данные.П000020002007 = СведенияОбАдресе.Здание.Номер;
		Данные.П000020002008 = ?(СведенияОбАдресе.Корпуса.Количество() > 0, СведенияОбАдресе.Корпуса[0].Номер, "");
		Данные.П000020002009 = ?(СведенияОбАдресе.Помещения.Количество() > 0, СведенияОбАдресе.Помещения[0].Номер, "");
		
		Данные.П000020003000 = Выборка.КодОКАТО;
		
		Данные.П000020004003 = Выборка.БазоваяДоходность;
		
		Данные.П000020005003 = Выборка.ЗначениеФизическогоПоказателя1;
		Данные.П000020006003 = Выборка.ЗначениеФизическогоПоказателя2;
		Данные.П000020007003 = Выборка.ЗначениеФизическогоПоказателя3;
		
		Данные.П000020008003 = КоэффДефлятор;
		
		// Расчет коэффициента к2
		ДатаНачала = НачалоДня(Выборка.ДатаНачала);
		ДатаОкончания = КонецДня(Выборка.ДатаОкончания);
		КоличествоДнейКВычету = 0;
		КоличествоДнейКВычетуНачало = 0;
		КоличествоДнейКВычетуКонец = 0;
		
		Если ДатаНачала >  НачалоКвартала(ПараметрыОтчета.ДатаКонцаПериодаОтчета) Тогда
			КоличествоДнейКВычетуНачало = (ДатаНачала - НачалоКвартала(ПараметрыОтчета.ДатаКонцаПериодаОтчета))/ 86400;
		КонецЕсли;
		
		Если ДатаОкончания < КонецДня(ПараметрыОтчета.ДатаКонцаПериодаОтчета) Тогда
			КоличествоДнейКВычетуКонец = (КонецДня(ПараметрыОтчета.ДатаКонцаПериодаОтчета) - ДатаОкончания)/ 86400;
		КонецЕсли;
		
		ДнейВсегоПервыйМесяц = Выборка.ДнейВсего1;
		Если ДнейВсегоПервыйМесяц >= КоличествоДнейКВычетуНачало Тогда
			ДнейВсегоПервыйМесяц = ДнейВсегоПервыйМесяц - КоличествоДнейКВычетуНачало;
			КоличествоДнейКВычетуНачало = 0;
		Иначе
			КоличествоДнейКВычетуНачало = КоличествоДнейКВычетуНачало - ДнейВсегоПервыйМесяц;
			ДнейВсегоПервыйМесяц = 0;
		КонецЕсли;
		
		ДнейВсегоВторойМесяц = Выборка.ДнейВсего2;
		Если ДнейВсегоВторойМесяц >= КоличествоДнейКВычетуНачало Тогда
			ДнейВсегоВторойМесяц = ДнейВсегоВторойМесяц - КоличествоДнейКВычетуНачало;
			КоличествоДнейКВычетуНачало = 0;
		Иначе
			КоличествоДнейКВычетуНачало = КоличествоДнейКВычетуНачало - ДнейВсегоВторойМесяц;
			ДнейВсегоВторойМесяц = 0;
		КонецЕсли;
		
		ДнейВсегоТретийМесяц = Выборка.ДнейВсего3;
		Если ДнейВсегоТретийМесяц >= КоличествоДнейКВычетуНачало Тогда
			ДнейВсегоТретийМесяц = ДнейВсегоТретийМесяц - КоличествоДнейКВычетуНачало;
			КоличествоДнейКВычетуНачало = 0;
		Иначе
			КоличествоДнейКВычетуНачало = КоличествоДнейКВычетуНачало - ДнейВсегоТретийМесяц;
			ДнейВсегоТретийМесяц = 0;
		КонецЕсли;
		
		Если ДнейВсегоТретийМесяц >= КоличествоДнейКВычетуКонец Тогда
			ДнейВсегоТретийМесяц = ДнейВсегоТретийМесяц - КоличествоДнейКВычетуКонец;
			КоличествоДнейКВычетуКонец = 0;
		Иначе
			КоличествоДнейКВычетуКонец = КоличествоДнейКВычетуКонец - ДнейВсегоТретийМесяц;
			ДнейВсегоТретийМесяц = 0;
		КонецЕсли;
		
		Если ДнейВсегоВторойМесяц >= КоличествоДнейКВычетуКонец Тогда
			ДнейВсегоВторойМесяц = ДнейВсегоВторойМесяц - КоличествоДнейКВычетуКонец;
			КоличествоДнейКВычетуКонец = 0;
		Иначе
			КоличествоДнейКВычетуКонец = КоличествоДнейКВычетуКонец - ДнейВсегоВторойМесяц;
			ДнейВсегоВторойМесяц = 0;
		КонецЕсли;
		
		Если ДнейВсегоПервыйМесяц >= КоличествоДнейКВычетуКонец Тогда
			ДнейВсегоПервыйМесяц = ДнейВсегоПервыйМесяц - КоличествоДнейКВычетуКонец;
			КоличествоДнейКВычетуКонец = 0;
		Иначе
			КоличествоДнейКВычетуКонец = КоличествоДнейКВычетуКонец - ДнейВсегоПервыйМесяц;
			ДнейВсегоПервыйМесяц = 0;
		КонецЕсли;
		
		ДнейВсего = ДнейВсегоПервыйМесяц + ДнейВсегоВторойМесяц + ДнейВсегоТретийМесяц;
		Данные.П000020009003 = 
			Выборка.КоэффициентК2
			*(Выборка.ВыработкаДней1+Выборка.ВыработкаДней2+Выборка.ВыработкаДней3)
			/ДнейВсего;
		
		// Добавляем данные по выработанным дням
		Данные.П000020005004 = Выборка.ВыработкаДней1;
		Данные.П000020006004 = Выборка.ВыработкаДней2;
		Данные.П000020007004 = Выборка.ВыработкаДней3;
		
		Строка050Графа2 = Окр(Данные.П000020004003 * Данные.П000020008003 * Данные.П000020009003 * Данные.П000020005003 * Данные.П000020005004 / ДнейВсегоПервыйМесяц, 2);
		Строка060Графа2 = Окр(Данные.П000020004003 * Данные.П000020008003 * Данные.П000020009003 * Данные.П000020006003 * Данные.П000020006004 / ДнейВсегоВторойМесяц, 2);
		Строка070Графа2 = Окр(Данные.П000020004003 * Данные.П000020008003 * Данные.П000020009003 * Данные.П000020007003 * Данные.П000020007004 / ДнейВсегоТретийМесяц, 2);
		
		Данные.П000020010003 = Число(Формат(Строка050Графа2 + Строка060Графа2 + Строка070Графа2, "ЧЦ=12;ЧДЦ=2;ЧН="));
		Данные.П000020010503 = 15;
		Данные.П000020011003 = Окр(Данные.П000020010003 * 15 / 100, 2);
		
		// обработка ОКУН
		Если Выборка.КодВидаПредпринимательскойДеятельности = "01"
			ИЛИ Выборка.КодВидаПредпринимательскойДеятельности = "02"
			ИЛИ Выборка.КодВидаПредпринимательскойДеятельности = "03" Тогда
			
			МассивОКУНОВ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Выборка.ОКУНСтрокой,";");
			
			Для К = 0 По Мин(МассивОКУНОВ.Количество()-1,35) Цикл
				
				КодЯчейки = "П00002000150"+ Число(к%6 + 1) + "_" + Число(Цел(к/6)+1);
				
				Данные[КодЯчейки] = МассивОКУНОВ[к];
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// заполняем данные 3 раздела
	Раздел3 = Контейнер.Раздел3;
	Раздел3.П000030002003  = 0;
	Раздел3.П000030003003  = 0;
	Если ИПИспользуетТрудНаемныхРаботников Тогда
		Раздел3.П000030002003 = СуммаСтраховыхВзносовЕНВД;
	Иначе
		Раздел3.П000030003003 = СуммаСтраховыхВзносовЕНВД;
	КонецЕсли;
	
	Контейнер.Титульный.КодИМНС = КодИФНС;
	
	ЭтоИП = НЕ РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(ПараметрыОтчета.Организация);
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОтчета.Организация, "КодНалоговогоОрганаПолучателя") = КодИФНС Тогда
		Контейнер.Титульный.ПоМесту = ?(ЭтоИП,120,214);
	Иначе
		Контейнер.Титульный.ПоМесту = ?(ЭтоИП,320,310);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияПоказателей_ЕНВД_2013Кв4(ПараметрыОтчета, Контейнер) Экспорт
	
	ИПИспользуетТрудНаемныхРаботников =РегламентированнаяОтчетность.ИПИспользуетТрудНаемныхРаботников(ПараметрыОтчета.Организация);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ВидПредпринимательскойДеятельности.Код КАК КодВидаПредпринимательскойДеятельности,
	|	АдресОсуществленияДеятельности.ЗначенияПолей КАК АдресОсуществленияДеятельности,
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.КодПоОКАТО КАК КодОКАТО,
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ВидПредпринимательскойДеятельности.БазоваяДоходность КАК БазоваяДоходность,
	|	ПоказателиЕНВДПоказателиЕНВД.ЗначениеФизическогоПоказателя1,
	|	ПоказателиЕНВДПоказателиЕНВД.ЗначениеФизическогоПоказателя2,
	|	ПоказателиЕНВДПоказателиЕНВД.ЗначениеФизическогоПоказателя3,
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.КоэффициентК2 КАК КоэффициентК2,
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.КодНалоговогоОрганаПолучателя КАК КодИФНС,
	|	ПоказателиЕНВДПоказателиЕНВД.ВыработкаДней1 КАК ВыработкаДней1,
	|	ПоказателиЕНВДПоказателиЕНВД.ВыработкаДней2 КАК ВыработкаДней2,
	|	ПоказателиЕНВДПоказателиЕНВД.ВыработкаДней3 КАК ВыработкаДней3,
	|	ПоказателиЕНВДПоказателиЕНВД.Ссылка.ДнейВсего1 КАК ДнейВсего1,
	|	ПоказателиЕНВДПоказателиЕНВД.Ссылка.ДнейВсего2 КАК ДнейВсего2,
	|	ПоказателиЕНВДПоказателиЕНВД.Ссылка.ДнейВсего3 КАК ДнейВсего3,
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ОКУНСтрокой КАК ОКУНСтрокой,
	|	ВЫБОР
	|		КОГДА ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ДатаНачала
	|		ИНАЧЕ ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ДатаНачала
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.Актуально
	|			ТОГДА &ДатаОкончания
	|		ИНАЧЕ ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.ПоказателиЕНВД.ПоказателиЕНВД КАК ПоказателиЕНВДПоказателиЕНВД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДеятельностиЕНВД.КонтактнаяИнформация КАК АдресОсуществленияДеятельности
	|		ПО ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД = АдресОсуществленияДеятельности.Ссылка
	|			И (АдресОсуществленияДеятельности.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресДеятельностиЕНВД))
	|ГДЕ
	|	НЕ ПоказателиЕНВДПоказателиЕНВД.Ссылка.ПометкаУдаления
	|	И ПоказателиЕНВДПоказателиЕНВД.Ссылка.Организация = &Организация
	|	И ПоказателиЕНВДПоказателиЕНВД.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоэффициентДефляторСрезПоследних.Значение
	|ИЗ
	|	РегистрСведений.КоэффициентДефлятор.СрезПоследних(&ДатаОкончания, ) КАК КоэффициентДефляторСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоНалогамОбороты.СуммаРасход КАК СуммаУплачено
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогам.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			,
	|			Организация = &Организация
	|				И ВидНалога В (&ВидыВзаиморасчетовВзносыВПФРИФСС)) КАК РасчетыПоНалогамОбороты");
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоКвартала(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецКвартала(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	ВидыВзаиморасчетовВзносыВПФРИФСС = Новый Массив;
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительная);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховая);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСвыше300тр);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ТФОМС);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФФОМС);
	Запрос.УстановитьПараметр("ВидыВзаиморасчетовВзносыВПФРИФСС", ВидыВзаиморасчетовВзносыВПФРИФСС);
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	// получение значение коэффициента дефлятора
	Выборка = РезультатПакета[1].Выбрать();
	Выборка.Следующий();
	КоэффДефлятор = Выборка.Значение;
	
	// получение значения страховых взносов
	Выборка = РезультатПакета[2].Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаСтраховыхВзносовЕНВД = Выборка.СуммаУплачено;
	КонецЕсли;
	
	СистемаНалогообложения = РегистрыСведений.СистемыНалогообложенияОрганизаций.ПолучитьПоследнее(КонецДня(ПараметрыОтчета.ДатаКонцаПериодаОтчета), Новый Структура("Организация", ПараметрыОтчета.Организация));
	
	СуммаСтраховыхВзносовЕНВД = 0;
	Если НЕ (СистемаНалогообложения.ПлательщикЕНВД И СистемаНалогообложения.ПлательщикУСН И ПараметрыОтчета.Организация.ВидУчетаСтраховыхВзносов = Перечисления.ВидыУчетаСтраховыхВзносов.УчитыватьВУСН) Тогда
		// получение значения страховых взносов
		Выборка = РезультатПакета[2].Выбрать();
		Если Выборка.Следующий() Тогда
			СуммаСтраховыхВзносовЕНВД = Выборка.СуммаУплачено;
		КонецЕсли;
	КонецЕсли;
	
	// общая выборка
	Выборка = РезультатПакета[0].Выбрать(); 
	
	ПерваяСтраница = Истина; 
	Итератор = 0;
	КодИФНС = "";
	ТекущаяСтраница = Контейнер.Раздел2[0];
	ТекущаяСтраница.Представление = "Раздел2";
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ПерваяСтраница Тогда
			ТекущаяСтраница = Контейнер.Раздел2.Добавить();
		Иначе
			ПерваяСтраница = Ложь;
		КонецЕсли;
		
		Данные = ТекущаяСтраница.Данные[0].Значение;
		
		КодИФНС = Выборка.КодИФНС;
		
		СведенияОбАдресе = УправлениеКонтактнойИнформацией.СведенияОбАдресе(Выборка.АдресОсуществленияДеятельности);
		
		Данные.П000020001000 = Выборка.КодВидаПредпринимательскойДеятельности;
		
		Данные.П000020002001 = СведенияОбАдресе.Индекс;
		Данные.П000020002002 = СведенияОбАдресе.КодРегиона;
		Данные.П000020002003 = СведенияОбАдресе.Район;
		Данные.П000020002004 = СведенияОбАдресе.Город;
		Данные.П000020002005 = СведенияОбАдресе.НаселенныйПункт;
		Данные.П000020002006 = СведенияОбАдресе.Улица;
		Данные.П000020002007 = СведенияОбАдресе.Здание.Номер;
		Данные.П000020002008 = ?(СведенияОбАдресе.Корпуса.Количество() > 0, СведенияОбАдресе.Корпуса[0].Номер, "");
		Данные.П000020002009 = ?(СведенияОбАдресе.Помещения.Количество() > 0, СведенияОбАдресе.Помещения[0].Номер, "");
		
		Данные.П000020003000 = Выборка.КодОКАТО;
		
		Данные.П000020004003 = Выборка.БазоваяДоходность;
		
		Данные.П000020005003 = Выборка.ЗначениеФизическогоПоказателя1;
		Данные.П000020006003 = Выборка.ЗначениеФизическогоПоказателя2;
		Данные.П000020007003 = Выборка.ЗначениеФизическогоПоказателя3;
		
		Данные.П000020008003 = КоэффДефлятор;
		
		// Расчет коэффициента к2
		ДатаНачала = НачалоДня(Выборка.ДатаНачала);
		ДатаОкончания = КонецДня(Выборка.ДатаОкончания);
		КоличествоДнейКВычету = 0;
		КоличествоДнейКВычетуНачало = 0;
		КоличествоДнейКВычетуКонец = 0;
			
		Если ДатаНачала >  НачалоКвартала(ПараметрыОтчета.ДатаКонцаПериодаОтчета) Тогда
			КоличествоДнейКВычетуНачало = (ДатаНачала - НачалоКвартала(ПараметрыОтчета.ДатаКонцаПериодаОтчета))/ 86400;
		КонецЕсли;
		
		Если ДатаОкончания < КонецДня(ПараметрыОтчета.ДатаКонцаПериодаОтчета) Тогда
			КоличествоДнейКВычетуКонец = (КонецДня(ПараметрыОтчета.ДатаКонцаПериодаОтчета) - ДатаОкончания)/ 86400;
		КонецЕсли;
		
		ДнейВсегоПервыйМесяц = Выборка.ДнейВсего1;
		Если ДнейВсегоПервыйМесяц >= КоличествоДнейКВычетуНачало Тогда
			ДнейВсегоПервыйМесяц = ДнейВсегоПервыйМесяц - КоличествоДнейКВычетуНачало;
			КоличествоДнейКВычетуНачало = 0;
		Иначе
			КоличествоДнейКВычетуНачало = КоличествоДнейКВычетуНачало - ДнейВсегоПервыйМесяц;
			ДнейВсегоПервыйМесяц = 0;
		КонецЕсли;
		
		ДнейВсегоВторойМесяц = Выборка.ДнейВсего2;
		Если ДнейВсегоВторойМесяц >= КоличествоДнейКВычетуНачало Тогда
			ДнейВсегоВторойМесяц = ДнейВсегоВторойМесяц - КоличествоДнейКВычетуНачало;
			КоличествоДнейКВычетуНачало = 0;
		Иначе
			КоличествоДнейКВычетуНачало = КоличествоДнейКВычетуНачало - ДнейВсегоВторойМесяц;
			ДнейВсегоВторойМесяц = 0;
		КонецЕсли;
		
		ДнейВсегоТретийМесяц = Выборка.ДнейВсего3;
		Если ДнейВсегоТретийМесяц >= КоличествоДнейКВычетуНачало Тогда
			ДнейВсегоТретийМесяц = ДнейВсегоТретийМесяц - КоличествоДнейКВычетуНачало;
			КоличествоДнейКВычетуНачало = 0;
		Иначе
			КоличествоДнейКВычетуНачало = КоличествоДнейКВычетуНачало - ДнейВсегоТретийМесяц;
			ДнейВсегоТретийМесяц = 0;
		КонецЕсли;
		
		Если ДнейВсегоТретийМесяц >= КоличествоДнейКВычетуКонец Тогда
			ДнейВсегоТретийМесяц = ДнейВсегоТретийМесяц - КоличествоДнейКВычетуКонец;
			КоличествоДнейКВычетуКонец = 0;
		Иначе
			КоличествоДнейКВычетуКонец = КоличествоДнейКВычетуКонец - ДнейВсегоТретийМесяц;
			ДнейВсегоТретийМесяц = 0;
		КонецЕсли;
		
		Если ДнейВсегоВторойМесяц >= КоличествоДнейКВычетуКонец Тогда
			ДнейВсегоВторойМесяц = ДнейВсегоВторойМесяц - КоличествоДнейКВычетуКонец;
			КоличествоДнейКВычетуКонец = 0;
		Иначе
			КоличествоДнейКВычетуКонец = КоличествоДнейКВычетуКонец - ДнейВсегоВторойМесяц;
			ДнейВсегоВторойМесяц = 0;
		КонецЕсли;
		
		Если ДнейВсегоПервыйМесяц >= КоличествоДнейКВычетуКонец Тогда
			ДнейВсегоПервыйМесяц = ДнейВсегоПервыйМесяц - КоличествоДнейКВычетуКонец;
			КоличествоДнейКВычетуКонец = 0;
		Иначе
			КоличествоДнейКВычетуКонец = КоличествоДнейКВычетуКонец - ДнейВсегоПервыйМесяц;
			ДнейВсегоПервыйМесяц = 0;
		КонецЕсли;
		
		ДнейВсего = ДнейВсегоПервыйМесяц + ДнейВсегоВторойМесяц + ДнейВсегоТретийМесяц;
		
		Данные.П000020009003 = 
			Выборка.КоэффициентК2
			*(Выборка.ВыработкаДней1+Выборка.ВыработкаДней2+Выборка.ВыработкаДней3)
			/ДнейВсего;
		
		// обработка ОКУН
		Если Выборка.КодВидаПредпринимательскойДеятельности = "01"
			ИЛИ Выборка.КодВидаПредпринимательскойДеятельности = "02"
			ИЛИ Выборка.КодВидаПредпринимательскойДеятельности = "03" Тогда
			
			МассивОКУНОВ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Выборка.ОКУНСтрокой,";");
			
			Для К = 0 По Мин(МассивОКУНОВ.Количество()-1,35) Цикл
				
				КодЯчейки = "П00002000150"+ Число(к%6 + 1) + "_" + Число(Цел(к/6)+1);
				
				Данные[КодЯчейки] = МассивОКУНОВ[к];
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Добавляем данные по выработанным дням
		Данные.П000020005004 = Выборка.ВыработкаДней1;
		Данные.П000020006004 = Выборка.ВыработкаДней2;
		Данные.П000020007004 = Выборка.ВыработкаДней3;
		
		Строка050Графа2 = Окр(Данные.П000020004003 * Данные.П000020008003 * Данные.П000020009003 * Данные.П000020005003 * Данные.П000020005004 / ДнейВсегоПервыйМесяц, 2);
		Строка060Графа2 = Окр(Данные.П000020004003 * Данные.П000020008003 * Данные.П000020009003 * Данные.П000020006003 * Данные.П000020006004 / ДнейВсегоВторойМесяц, 2);
		Строка070Графа2 = Окр(Данные.П000020004003 * Данные.П000020008003 * Данные.П000020009003 * Данные.П000020007003 * Данные.П000020007004 / ДнейВсегоТретийМесяц, 2);
		
		Данные.П000020010003 = Число(Формат(Строка050Графа2 + Строка060Графа2 + Строка070Графа2, "ЧЦ=12;ЧДЦ=2;ЧН="));
		Данные.П000020010503 = 15;
		Данные.П000020011003 = Окр(Данные.П000020010003 * 15 / 100, 2);
		
	КонецЦикла;
	
	// заполняем данные 3 раздела
	Раздел3 = Контейнер.Раздел3;
	Раздел3.П000030002003  = 0;
	Раздел3.П000030003003  = 0;
	Если ИПИспользуетТрудНаемныхРаботников Тогда
		Раздел3.П000030002003 = СуммаСтраховыхВзносовЕНВД;
	Иначе
		Раздел3.П000030003003 = СуммаСтраховыхВзносовЕНВД;
	КонецЕсли;
	
	Контейнер.Титульный.КодИМНС = КодИФНС;
	
	ЭтоИП = НЕ РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(ПараметрыОтчета.Организация);
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОтчета.Организация, "КодНалоговогоОрганаПолучателя") = КодИФНС Тогда
		Контейнер.Титульный.ПоМесту = ?(ЭтоИП,120,214);
	Иначе
		Контейнер.Титульный.ПоМесту = ?(ЭтоИП,320,310);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияПоказателей_ЕНВД_2015Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ИПИспользуетТрудНаемныхРаботников =РегламентированнаяОтчетность.ИПИспользуетТрудНаемныхРаботников(ПараметрыОтчета.Организация);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ВидПредпринимательскойДеятельности.Код КАК КодВидаПредпринимательскойДеятельности,
	|	АдресОсуществленияДеятельности.ЗначенияПолей КАК АдресОсуществленияДеятельности,
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.КодПоОКАТО КАК КодОКАТО,
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ВидПредпринимательскойДеятельности.БазоваяДоходность КАК БазоваяДоходность,
	|	ПоказателиЕНВДПоказателиЕНВД.ЗначениеФизическогоПоказателя1,
	|	ПоказателиЕНВДПоказателиЕНВД.ЗначениеФизическогоПоказателя2,
	|	ПоказателиЕНВДПоказателиЕНВД.ЗначениеФизическогоПоказателя3,
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.КоэффициентК2 КАК КоэффициентК2,
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.СтавкаЕНВД КАК СтавкаЕНВД,
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.КодНалоговогоОрганаПолучателя КАК КодИФНС,
	|	ПоказателиЕНВДПоказателиЕНВД.ВыработкаДней1 КАК ВыработкаДней1,
	|	ПоказателиЕНВДПоказателиЕНВД.ВыработкаДней2 КАК ВыработкаДней2,
	|	ПоказателиЕНВДПоказателиЕНВД.ВыработкаДней3 КАК ВыработкаДней3,
	|	ПоказателиЕНВДПоказателиЕНВД.Ссылка.ДнейВсего1 КАК ДнейВсего1,
	|	ПоказателиЕНВДПоказателиЕНВД.Ссылка.ДнейВсего2 КАК ДнейВсего2,
	|	ПоказателиЕНВДПоказателиЕНВД.Ссылка.ДнейВсего3 КАК ДнейВсего3,
	|	ВЫБОР
	|		КОГДА ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ДатаНачала
	|		ИНАЧЕ ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ДатаНачала
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.Актуально
	|			ТОГДА &ДатаОкончания
	|		ИНАЧЕ ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.ПоказателиЕНВД.ПоказателиЕНВД КАК ПоказателиЕНВДПоказателиЕНВД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДеятельностиЕНВД.КонтактнаяИнформация КАК АдресОсуществленияДеятельности
	|		ПО ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД = АдресОсуществленияДеятельности.Ссылка
	|			И (АдресОсуществленияДеятельности.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресДеятельностиЕНВД))
	|ГДЕ
	|	НЕ ПоказателиЕНВДПоказателиЕНВД.Ссылка.ПометкаУдаления
	|	И ПоказателиЕНВДПоказателиЕНВД.Ссылка.Организация = &Организация
	|	И ПоказателиЕНВДПоказателиЕНВД.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоэффициентДефляторСрезПоследних.Значение
	|ИЗ
	|	РегистрСведений.КоэффициентДефлятор.СрезПоследних(&ДатаОкончания, ) КАК КоэффициентДефляторСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоНалогамОбороты.СуммаРасход КАК СуммаУплачено
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогам.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			,
	|			Организация = &Организация
	|				И ВидНалога В (&ВидыВзаиморасчетовВзносыВПФРИФСС)) КАК РасчетыПоНалогамОбороты");
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоКвартала(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецКвартала(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	ВидыВзаиморасчетовВзносыВПФРИФСС = Новый Массив;
	
	Если ИПИспользуетТрудНаемныхРаботников Тогда
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники);
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховаяСотрудники);
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФОМССотрудники);
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФСССотрудники);
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФССТравматизмСотрудники);
	Иначе
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительная);
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховая);
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСвыше300тр);
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ТФОМС);
		ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФФОМС);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидыВзаиморасчетовВзносыВПФРИФСС", ВидыВзаиморасчетовВзносыВПФРИФСС);
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	// получение значение коэффициента дефлятора
	Выборка = РезультатПакета[1].Выбрать();
	Выборка.Следующий();
	КоэффДефлятор = Выборка.Значение;
	
	// получение значения страховых взносов
	СистемаНалогообложения = РегистрыСведений.СистемыНалогообложенияОрганизаций.ПолучитьПоследнее(КонецДня(ПараметрыОтчета.ДатаКонцаПериодаОтчета), Новый Структура("Организация", ПараметрыОтчета.Организация));
	
	СуммаСтраховыхВзносовЕНВД = 0;
	Если НЕ (СистемаНалогообложения.ПлательщикЕНВД И СистемаНалогообложения.ПлательщикУСН И ПараметрыОтчета.Организация.ВидУчетаСтраховыхВзносов = Перечисления.ВидыУчетаСтраховыхВзносов.УчитыватьВУСН) Тогда
		// получение значения страховых взносов
		Выборка = РезультатПакета[2].Выбрать();
		Если Выборка.Следующий() Тогда
			СуммаСтраховыхВзносовЕНВД = Выборка.СуммаУплачено;
		КонецЕсли;
	КонецЕсли;
	
	// общая выборка
	Выборка = РезультатПакета[0].Выбрать(); 
	
	ПерваяСтраница = Истина; 
	Итератор = 0;
	КодИФНС = "";
	ТекущаяСтраница = Контейнер.Раздел2[0];
	ТекущаяСтраница.Представление = "Раздел2";
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ПерваяСтраница Тогда
			ТекущаяСтраница = Контейнер.Раздел2.Добавить();
		Иначе
			ПерваяСтраница = Ложь;
		КонецЕсли;
		
		Данные = ТекущаяСтраница.Данные;
		
		КодИФНС = Выборка.КодИФНС;
		
		СведенияОбАдресе = УправлениеКонтактнойИнформацией.СведенияОбАдресе(Выборка.АдресОсуществленияДеятельности);
		
		Данные.П000020001000 = Выборка.КодВидаПредпринимательскойДеятельности;
		
		Данные.П000020002001 = СведенияОбАдресе.Индекс;
		Данные.П000020002002 = СведенияОбАдресе.КодРегиона;
		Данные.П000020002003 = СведенияОбАдресе.Район;
		Данные.П000020002004 = СведенияОбАдресе.Город;
		Данные.П000020002005 = СведенияОбАдресе.НаселенныйПункт;
		Данные.П000020002006 = СведенияОбАдресе.Улица;
		Данные.П000020002007 = СведенияОбАдресе.Здание.Номер;
		Данные.П000020002008 = ?(СведенияОбАдресе.Корпуса.Количество() > 0, СведенияОбАдресе.Корпуса[0].Номер, "");
		Данные.П000020002009 = ?(СведенияОбАдресе.Помещения.Количество() > 0, СведенияОбАдресе.Помещения[0].Номер, "");
		
		Данные.П000020003000 = Выборка.КодОКАТО;
		
		Данные.П000020004003 = Выборка.БазоваяДоходность;
		
		Данные.П000020007002 = Выборка.ЗначениеФизическогоПоказателя1;
		Данные.П000020008002 = Выборка.ЗначениеФизическогоПоказателя2;
		Данные.П000020009002 = Выборка.ЗначениеФизическогоПоказателя3;
		
		Данные.П000020005003 = КоэффДефлятор;
		
		// Расчет коэффициента к2
		ДатаНачала = НачалоДня(Выборка.ДатаНачала);
		ДатаОкончания = КонецДня(Выборка.ДатаОкончания);
		КоличествоДнейКВычету = 0;
		КоличествоДнейКВычетуНачало = 0;
		КоличествоДнейКВычетуКонец = 0;
		
		Если ДатаНачала >  НачалоКвартала(ПараметрыОтчета.ДатаКонцаПериодаОтчета) Тогда
			КоличествоДнейКВычетуНачало = (ДатаНачала - НачалоКвартала(ПараметрыОтчета.ДатаКонцаПериодаОтчета))/ 86400;
		КонецЕсли;
		
		Если ДатаОкончания < КонецДня(ПараметрыОтчета.ДатаКонцаПериодаОтчета) Тогда
			КоличествоДнейКВычетуКонец = (КонецДня(ПараметрыОтчета.ДатаКонцаПериодаОтчета) - ДатаОкончания)/ 86400;
		КонецЕсли;
		
		ДнейВсегоПервыйМесяц = Выборка.ДнейВсего1;
		Если ДнейВсегоПервыйМесяц >= КоличествоДнейКВычетуНачало Тогда
			ДнейВсегоПервыйМесяц = ДнейВсегоПервыйМесяц - КоличествоДнейКВычетуНачало;
			КоличествоДнейКВычетуНачало = 0;
		Иначе
			КоличествоДнейКВычетуНачало = КоличествоДнейКВычетуНачало - ДнейВсегоПервыйМесяц;
			ДнейВсегоПервыйМесяц = 0;
		КонецЕсли;
		
		ДнейВсегоВторойМесяц = Выборка.ДнейВсего2;
		Если ДнейВсегоВторойМесяц >= КоличествоДнейКВычетуНачало Тогда
			ДнейВсегоВторойМесяц = ДнейВсегоВторойМесяц - КоличествоДнейКВычетуНачало;
			КоличествоДнейКВычетуНачало = 0;
		Иначе
			КоличествоДнейКВычетуНачало = КоличествоДнейКВычетуНачало - ДнейВсегоВторойМесяц;
			ДнейВсегоВторойМесяц = 0;
		КонецЕсли;
		
		ДнейВсегоТретийМесяц = Выборка.ДнейВсего3;
		Если ДнейВсегоТретийМесяц >= КоличествоДнейКВычетуНачало Тогда
			ДнейВсегоТретийМесяц = ДнейВсегоТретийМесяц - КоличествоДнейКВычетуНачало;
			КоличествоДнейКВычетуНачало = 0;
		Иначе
			КоличествоДнейКВычетуНачало = КоличествоДнейКВычетуНачало - ДнейВсегоТретийМесяц;
			ДнейВсегоТретийМесяц = 0;
		КонецЕсли;
		
		Если ДнейВсегоТретийМесяц >= КоличествоДнейКВычетуКонец Тогда
			ДнейВсегоТретийМесяц = ДнейВсегоТретийМесяц - КоличествоДнейКВычетуКонец;
			КоличествоДнейКВычетуКонец = 0;
		Иначе
			КоличествоДнейКВычетуКонец = КоличествоДнейКВычетуКонец - ДнейВсегоТретийМесяц;
			ДнейВсегоТретийМесяц = 0;
		КонецЕсли;
		
		Если ДнейВсегоВторойМесяц >= КоличествоДнейКВычетуКонец Тогда
			ДнейВсегоВторойМесяц = ДнейВсегоВторойМесяц - КоличествоДнейКВычетуКонец;
			КоличествоДнейКВычетуКонец = 0;
		Иначе
			КоличествоДнейКВычетуКонец = КоличествоДнейКВычетуКонец - ДнейВсегоВторойМесяц;
			ДнейВсегоВторойМесяц = 0;
		КонецЕсли;
		
		Если ДнейВсегоПервыйМесяц >= КоличествоДнейКВычетуКонец Тогда
			ДнейВсегоПервыйМесяц = ДнейВсегоПервыйМесяц - КоличествоДнейКВычетуКонец;
			КоличествоДнейКВычетуКонец = 0;
		Иначе
			КоличествоДнейКВычетуКонец = КоличествоДнейКВычетуКонец - ДнейВсегоПервыйМесяц;
			ДнейВсегоПервыйМесяц = 0;
		КонецЕсли;
		
		ДнейВсего = ДнейВсегоПервыйМесяц + ДнейВсегоВторойМесяц + ДнейВсегоТретийМесяц;
		
		Данные.П000020006003 = 
			Выборка.КоэффициентК2
			*(Выборка.ВыработкаДней1+Выборка.ВыработкаДней2+Выборка.ВыработкаДней3)
			/ДнейВсего;
			
		// Добавляем данные по выработанным дням
		Данные.П000020007003 = Выборка.ВыработкаДней1;
		Данные.П000020008003 = Выборка.ВыработкаДней2;
		Данные.П000020009003 = Выборка.ВыработкаДней3;
		
		Данные.П000020007004 = Окр(Данные.П000020004003 * Данные.П000020005003 * Данные.П000020006003 * Данные.П000020007002 * Данные.П000020007003 / ДнейВсегоПервыйМесяц, 2);
		Данные.П000020008004 = Окр(Данные.П000020004003 * Данные.П000020005003 * Данные.П000020006003 * Данные.П000020008002 * Данные.П000020008003 / ДнейВсегоВторойМесяц, 2);
		Данные.П000020009004 = Окр(Данные.П000020004003 * Данные.П000020005003 * Данные.П000020006003 * Данные.П000020009002 * Данные.П000020009003 / ДнейВсегоТретийМесяц, 2);
		
		Данные.П000020010003 = Число(Формат(Данные.П000020007004 + Данные.П000020008004 + Данные.П000020009004, "ЧЦ=12;ЧДЦ=2;ЧН="));
		Данные.П000020010503 = 15;
		Данные.П000020011003 = Окр(Данные.П000020010003 * 15 / 100, 0);
	КонецЦикла;
	//
	// заполняем данные 3 раздела
	Раздел3 = Контейнер.Раздел3;
	Раздел3.П000030002003  = 0;
	Раздел3.П000030003003  = 0;
	Если ИПИспользуетТрудНаемныхРаботников Тогда
		Раздел3.П000030002003 = СуммаСтраховыхВзносовЕНВД;
	Иначе
		Раздел3.П000030003003 = СуммаСтраховыхВзносовЕНВД;
	КонецЕсли;
	
	Контейнер.Титульный.КодИМНС = КодИФНС;
	
	ЭтоИП = НЕ РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(ПараметрыОтчета.Организация);
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОтчета.Организация, "КодНалоговогоОрганаПолучателя") = КодИФНС Тогда
		Контейнер.Титульный.ПоМесту = ?(ЭтоИП,120,214);
	Иначе
		Контейнер.Титульный.ПоМесту = ?(ЭтоИП,320,310);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗначенияПоказателей_ЕНВД_2016Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ИПИспользуетТрудНаемныхРаботников =РегламентированнаяОтчетность.ИПИспользуетТрудНаемныхРаботников(ПараметрыОтчета.Организация);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ВидПредпринимательскойДеятельности.Код КАК КодВидаПредпринимательскойДеятельности,
	|	АдресОсуществленияДеятельности.ЗначенияПолей КАК АдресОсуществленияДеятельности,
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.КодПоОКАТО КАК КодОКАТО,
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ВидПредпринимательскойДеятельности.БазоваяДоходность КАК БазоваяДоходность,
	|	ПоказателиЕНВДПоказателиЕНВД.ЗначениеФизическогоПоказателя1,
	|	ПоказателиЕНВДПоказателиЕНВД.ЗначениеФизическогоПоказателя2,
	|	ПоказателиЕНВДПоказателиЕНВД.ЗначениеФизическогоПоказателя3,
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.КоэффициентК2 КАК КоэффициентК2,
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.СтавкаЕНВД КАК СтавкаЕНВД,
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.КодНалоговогоОрганаПолучателя КАК КодИФНС,
	|	ПоказателиЕНВДПоказателиЕНВД.ВыработкаДней1 КАК ВыработкаДней1,
	|	ПоказателиЕНВДПоказателиЕНВД.ВыработкаДней2 КАК ВыработкаДней2,
	|	ПоказателиЕНВДПоказателиЕНВД.ВыработкаДней3 КАК ВыработкаДней3,
	|	ПоказателиЕНВДПоказателиЕНВД.Ссылка.ДнейВсего1 КАК ДнейВсего1,
	|	ПоказателиЕНВДПоказателиЕНВД.Ссылка.ДнейВсего2 КАК ДнейВсего2,
	|	ПоказателиЕНВДПоказателиЕНВД.Ссылка.ДнейВсего3 КАК ДнейВсего3,
	|	ВЫБОР
	|		КОГДА ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ДатаНачала
	|		ИНАЧЕ ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ДатаНачала
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.Актуально
	|			ТОГДА &ДатаОкончания
	|		ИНАЧЕ ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.ПоказателиЕНВД.ПоказателиЕНВД КАК ПоказателиЕНВДПоказателиЕНВД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДеятельностиЕНВД.КонтактнаяИнформация КАК АдресОсуществленияДеятельности
	|		ПО ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД = АдресОсуществленияДеятельности.Ссылка
	|			И (АдресОсуществленияДеятельности.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресДеятельностиЕНВД))
	|ГДЕ
	|	НЕ ПоказателиЕНВДПоказателиЕНВД.Ссылка.ПометкаУдаления
	|	И ПоказателиЕНВДПоказателиЕНВД.Ссылка.Организация = &Организация
	|	И ПоказателиЕНВДПоказателиЕНВД.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоэффициентДефляторСрезПоследних.Значение
	|ИЗ
	|	РегистрСведений.КоэффициентДефлятор.СрезПоследних(&ДатаОкончания, ) КАК КоэффициентДефляторСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоНалогамОбороты.СуммаРасход КАК СуммаУплачено
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогам.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			,
	|			Организация = &Организация
	|				И ВидНалога В (&ВидыВзаиморасчетовВзносыВПФРИФСС)) КАК РасчетыПоНалогамОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоНалогамОбороты.СуммаРасход КАК СуммаУплачено
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогам.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			,
	|			Организация = &Организация
	|				И ВидНалога В (&ВидыФиксированныхВзаиморасчетовВзносыВПФРИФСС)) КАК РасчетыПоНалогамОбороты");
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоКвартала(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецКвартала(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	ВидыВзаиморасчетовВзносыВПФРИФСС = Новый Массив;
	
	ВидыВзаиморасчетовВзносыВПФРИФСС = Новый Массив;
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховаяСотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФОМССотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФСССотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФССТравматизмСотрудники);
	
	ВидыФиксированныхВзаиморасчетовВзносыВПФРИФСС = Новый Массив;
	ВидыФиксированныхВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительная);
	ВидыФиксированныхВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховая);
	ВидыФиксированныхВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСвыше300тр);
	ВидыФиксированныхВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ТФОМС);
	ВидыФиксированныхВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФФОМС);
	
	
	Запрос.УстановитьПараметр("ВидыВзаиморасчетовВзносыВПФРИФСС", ВидыВзаиморасчетовВзносыВПФРИФСС);
	Запрос.УстановитьПараметр("ВидыФиксированныхВзаиморасчетовВзносыВПФРИФСС", ВидыФиксированныхВзаиморасчетовВзносыВПФРИФСС);
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	// получение значение коэффициента дефлятора
	Выборка = РезультатПакета[1].Выбрать();
	Выборка.Следующий();
	КоэффДефлятор = Выборка.Значение;
	
	// получение значения страховых взносов
	СистемаНалогообложения = РегистрыСведений.СистемыНалогообложенияОрганизаций.ПолучитьПоследнее(КонецДня(ПараметрыОтчета.ДатаКонцаПериодаОтчета), Новый Структура("Организация", ПараметрыОтчета.Организация));
	
	СуммаСтраховыхВзносовЕНВД = 0;
	СуммаФиксированныхСтраховыхВзносовЕНВД = 0;
	Если НЕ (СистемаНалогообложения.ПлательщикЕНВД И СистемаНалогообложения.ПлательщикУСН И ПараметрыОтчета.Организация.ВидУчетаСтраховыхВзносов = Перечисления.ВидыУчетаСтраховыхВзносов.УчитыватьВУСН) Тогда
		// получение значения страховых взносов
		Выборка = РезультатПакета[2].Выбрать();
		Если Выборка.Следующий() Тогда
			СуммаСтраховыхВзносовЕНВД = Выборка.СуммаУплачено;
		Иначе
			СуммаСтраховыхВзносовЕНВД = 0;
		КонецЕсли;
		Выборка = РезультатПакета[3].Выбрать();
		Если Выборка.Следующий() Тогда
			СуммаФиксированныхСтраховыхВзносовЕНВД = Выборка.СуммаУплачено;
		Иначе
			СуммаФиксированныхСтраховыхВзносовЕНВД = 0;
		КонецЕсли;
	КонецЕсли;
	
	// общая выборка
	Выборка = РезультатПакета[0].Выбрать(); 
	
	ПерваяСтраница = Истина; 
	Итератор = 0;
	КодИФНС = "";
	ТекущаяСтраница = Контейнер.Раздел2[0];
	ТекущаяСтраница.Представление = "Раздел2";
	ДанныеОбразец = ОбщегоНазначения.СкопироватьРекурсивно(ТекущаяСтраница.Данные);
	ДанныеДопСтрокОбразец = ОбщегоНазначения.СкопироватьРекурсивно(ТекущаяСтраница.ДанныеДопСтрок);
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ПерваяСтраница Тогда
			ТекущаяСтраница = Контейнер.Раздел2.Добавить();
			ТекущаяСтраница.Данные = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеОбразец);
			ТекущаяСтраница.ДанныеДопСтрок = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеДопСтрокОбразец);
		Иначе
			ПерваяСтраница = Ложь;
		КонецЕсли;
		
		Данные = ТекущаяСтраница.Данные;
		ДанныеДопСтрокРаздела2 = ТекущаяСтраница.ДанныеДопСтрок;
		
		КодИФНС = Выборка.КодИФНС;
		
		СведенияОбАдресе = УправлениеКонтактнойИнформацией.СведенияОбАдресе(Выборка.АдресОсуществленияДеятельности);
		
		Данные.П000020001000 = Выборка.КодВидаПредпринимательскойДеятельности;
		
		Данные.П000020002001 = СведенияОбАдресе.Индекс;
		Данные.П000020002002 = СведенияОбАдресе.КодРегиона;
		Данные.П000020002003 = СведенияОбАдресе.Район;
		Данные.П000020002004 = СведенияОбАдресе.Город;
		Данные.П000020002005 = СведенияОбАдресе.НаселенныйПункт;
		Данные.П000020002006 = СведенияОбАдресе.Улица;
		Данные.П000020002007 = СведенияОбАдресе.Здание.Номер;
		Данные.П000020002008 = ?(СведенияОбАдресе.Корпуса.Количество() > 0, СведенияОбАдресе.Корпуса[0].Номер, "");
		Данные.П000020002009 = ?(СведенияОбАдресе.Помещения.Количество() > 0, СведенияОбАдресе.Помещения[0].Номер, "");
		
		Данные.П000020003000 = Выборка.КодОКАТО;
		
		Данные.П000020004003 = Выборка.БазоваяДоходность;
		
		Данные.П000020007002 = Выборка.ЗначениеФизическогоПоказателя1;
		Данные.П000020008002 = Выборка.ЗначениеФизическогоПоказателя2;
		Данные.П000020009002 = Выборка.ЗначениеФизическогоПоказателя3;
		
		Данные.П000020005003 = КоэффДефлятор;
		
		// Расчет коэффициента к2
		ДатаНачала = НачалоДня(Выборка.ДатаНачала);
		ДатаОкончания = КонецДня(Выборка.ДатаОкончания);
		КоличествоДнейКВычету = 0;
		Если ДатаНачала > НачалоКвартала(ПараметрыОтчета.ДатаКонцаПериодаОтчета) Тогда
			Данные.П000020006201_1 = ДатаНачала;
			Данные.П000020006101 = "V";
			Данные.П000020006102 = "";
			ВставитьЗначениеДопСтроки(ДанныеДопСтрокРаздела2, "П000020006201_1", ДатаНачала);
		КонецЕсли;
	
		Если ДатаОкончания < ПараметрыОтчета.ДатаКонцаПериодаОтчета Тогда
			Данные.П000020006501_1 = ДатаОкончания;
			Данные.П000020006401 = "V";
			Данные.П000020006402 = "";
			ВставитьЗначениеДопСтроки(ДанныеДопСтрокРаздела2, "П000020006501_1", ДатаОкончания);
		КонецЕсли;
		
		
		Данные.П000020006003 = 
			Выборка.КоэффициентК2;
		
		// Добавляем данные по выработанным дням
		Данные.П000020007003 = Выборка.ВыработкаДней1;
		Данные.П000020008003 = Выборка.ВыработкаДней2;
		Данные.П000020009003 = Выборка.ВыработкаДней3;
		
		Данные.П000020007004 = Окр(Данные.П000020004003 * Данные.П000020005003 * Данные.П000020006003 * Данные.П000020007002 * Данные.П000020007003 / Выборка.ДнейВсего1, 2);
		Данные.П000020008004 = Окр(Данные.П000020004003 * Данные.П000020005003 * Данные.П000020006003 * Данные.П000020008002 * Данные.П000020008003 / Выборка.ДнейВсего2, 2);
		Данные.П000020009004 = Окр(Данные.П000020004003 * Данные.П000020005003 * Данные.П000020006003 * Данные.П000020009002 * Данные.П000020009003 / Выборка.ДнейВсего3, 2);
		
		Данные.П000020010003 = Число(Формат(Данные.П000020007004 + Данные.П000020008004 + Данные.П000020009004, "ЧЦ=12;ЧДЦ=2;ЧН="));
		Данные.П000020010503 = Выборка.СтавкаЕНВД;
		Данные.П000020011003 = Окр(Данные.П000020010003 * Выборка.СтавкаЕНВД / 100, 0);
	КонецЦикла;
	//
	// заполняем данные 3 раздела
	Раздел3 = Контейнер.Раздел3;
	Раздел3.П000030002003  = 0;
	Раздел3.П000030003003  = 0;
	
	ЭтоИП = НЕ РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(ПараметрыОтчета.Организация);
	
	УменьшатьНалогНаВзносыИПРаботодателя = ЭтоИП И НалогУменьшаетсяНаФиксированныеВзносыИПРаботодателей(ПараметрыОтчета.ДатаКонцаПериодаОтчета);
	
	Если ИПИспользуетТрудНаемныхРаботников Тогда
		Раздел3.П000030002003 = СуммаСтраховыхВзносовЕНВД;
		Если УменьшатьНалогНаВзносыИПРаботодателя Тогда
			Раздел3.П000030003003 = СуммаФиксированныхСтраховыхВзносовЕНВД;
		Иначе
			Раздел3.П000030003003 = 0;
		КонецЕсли;
	Иначе
		Раздел3.П000030002003 =0;
		Раздел3.П000030003003 = СуммаФиксированныхСтраховыхВзносовЕНВД;
	КонецЕсли;
	
	Контейнер.Титульный.КодИМНС = КодИФНС;
	
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОтчета.Организация, "КодНалоговогоОрганаПолучателя") = КодИФНС Тогда
		Контейнер.Титульный.ПоМесту = ?(ЭтоИП,120,214);
	Иначе
		Контейнер.Титульный.ПоМесту = ?(ЭтоИП,320,310);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗначенияПоказателей_ЕНВД_2018Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ИПИспользуетТрудНаемныхРаботников =РегламентированнаяОтчетность.ИПИспользуетТрудНаемныхРаботников(ПараметрыОтчета.Организация);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ВидПредпринимательскойДеятельности.Код КАК КодВидаПредпринимательскойДеятельности,
	|	АдресОсуществленияДеятельности.ЗначенияПолей КАК АдресОсуществленияДеятельности,
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.КодПоОКАТО КАК КодОКАТО,
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ВидПредпринимательскойДеятельности.БазоваяДоходность КАК БазоваяДоходность,
	|	ПоказателиЕНВДПоказателиЕНВД.ЗначениеФизическогоПоказателя1,
	|	ПоказателиЕНВДПоказателиЕНВД.ЗначениеФизическогоПоказателя2,
	|	ПоказателиЕНВДПоказателиЕНВД.ЗначениеФизическогоПоказателя3,
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.КоэффициентК2 КАК КоэффициентК2,
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.СтавкаЕНВД КАК СтавкаЕНВД,
	|	ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.КодНалоговогоОрганаПолучателя КАК КодИФНС,
	|	ПоказателиЕНВДПоказателиЕНВД.ВыработкаДней1 КАК ВыработкаДней1,
	|	ПоказателиЕНВДПоказателиЕНВД.ВыработкаДней2 КАК ВыработкаДней2,
	|	ПоказателиЕНВДПоказателиЕНВД.ВыработкаДней3 КАК ВыработкаДней3,
	|	ПоказателиЕНВДПоказателиЕНВД.Ссылка.ДнейВсего1 КАК ДнейВсего1,
	|	ПоказателиЕНВДПоказателиЕНВД.Ссылка.ДнейВсего2 КАК ДнейВсего2,
	|	ПоказателиЕНВДПоказателиЕНВД.Ссылка.ДнейВсего3 КАК ДнейВсего3,
	|	ВЫБОР
	|		КОГДА ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ДатаНачала
	|		ИНАЧЕ ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ДатаНачала
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.Актуально
	|			ТОГДА &ДатаОкончания
	|		ИНАЧЕ ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.ПоказателиЕНВД.ПоказателиЕНВД КАК ПоказателиЕНВДПоказателиЕНВД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДеятельностиЕНВД.КонтактнаяИнформация КАК АдресОсуществленияДеятельности
	|		ПО ПоказателиЕНВДПоказателиЕНВД.ВидДеятельностиЕНВД = АдресОсуществленияДеятельности.Ссылка
	|			И (АдресОсуществленияДеятельности.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресДеятельностиЕНВД))
	|ГДЕ
	|	НЕ ПоказателиЕНВДПоказателиЕНВД.Ссылка.ПометкаУдаления
	|	И ПоказателиЕНВДПоказателиЕНВД.Ссылка.Организация = &Организация
	|	И ПоказателиЕНВДПоказателиЕНВД.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоэффициентДефляторСрезПоследних.Значение
	|ИЗ
	|	РегистрСведений.КоэффициентДефлятор.СрезПоследних(&ДатаОкончания, ) КАК КоэффициентДефляторСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоНалогамОбороты.СуммаРасход КАК СуммаУплачено
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогам.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			,
	|			Организация = &Организация
	|				И ВидНалога В (&ВидыВзаиморасчетовВзносыВПФРИФСС)) КАК РасчетыПоНалогамОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоНалогамОбороты.СуммаРасход КАК СуммаУплачено
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогам.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			,
	|			Организация = &Организация
	|				И ВидНалога В (&ВидыФиксированныхВзаиморасчетовВзносыВПФРИФСС)) КАК РасчетыПоНалогамОбороты");
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоКвартала(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецКвартала(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	ВидыВзаиморасчетовВзносыВПФРИФСС = Новый Массив;
	
	ВидыВзаиморасчетовВзносыВПФРИФСС = Новый Массив;
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховаяСотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФОМССотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФСССотрудники);
	ВидыВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФССТравматизмСотрудники);
	
	ВидыФиксированныхВзаиморасчетовВзносыВПФРИФСС = Новый Массив;
	ВидыФиксированныхВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРНакопительная);
	ВидыФиксированныхВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСтраховая);
	ВидыФиксированныхВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ПФРСвыше300тр);
	ВидыФиксированныхВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ТФОМС);
	ВидыФиксированныхВзаиморасчетовВзносыВПФРИФСС.Добавить(Справочники.ВидыНалогов.ФФОМС);
	
	
	Запрос.УстановитьПараметр("ВидыВзаиморасчетовВзносыВПФРИФСС", ВидыВзаиморасчетовВзносыВПФРИФСС);
	Запрос.УстановитьПараметр("ВидыФиксированныхВзаиморасчетовВзносыВПФРИФСС", ВидыФиксированныхВзаиморасчетовВзносыВПФРИФСС);
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	// получение значение коэффициента дефлятора
	Выборка = РезультатПакета[1].Выбрать();
	Выборка.Следующий();
	КоэффДефлятор = Выборка.Значение;
	
	// получение значения страховых взносов
	СистемаНалогообложения = РегистрыСведений.СистемыНалогообложенияОрганизаций.ПолучитьПоследнее(КонецДня(ПараметрыОтчета.ДатаКонцаПериодаОтчета), Новый Структура("Организация", ПараметрыОтчета.Организация));
	
	СуммаСтраховыхВзносовЕНВД = 0;
	СуммаФиксированныхСтраховыхВзносовЕНВД = 0;
	Если НЕ (СистемаНалогообложения.ПлательщикЕНВД И СистемаНалогообложения.ПлательщикУСН И ПараметрыОтчета.Организация.ВидУчетаСтраховыхВзносов = Перечисления.ВидыУчетаСтраховыхВзносов.УчитыватьВУСН) Тогда
		// получение значения страховых взносов
		Выборка = РезультатПакета[2].Выбрать();
		Если Выборка.Следующий() Тогда
			СуммаСтраховыхВзносовЕНВД = Выборка.СуммаУплачено;
		Иначе
			СуммаСтраховыхВзносовЕНВД = 0;
		КонецЕсли;
		Выборка = РезультатПакета[3].Выбрать();
		Если Выборка.Следующий() Тогда
			СуммаФиксированныхСтраховыхВзносовЕНВД = Выборка.СуммаУплачено;
		Иначе
			СуммаФиксированныхСтраховыхВзносовЕНВД = 0;
		КонецЕсли;
	КонецЕсли;
	
	// общая выборка
	Выборка = РезультатПакета[0].Выбрать(); 
	
	ПерваяСтраница = Истина; 
	Итератор = 0;
	КодИФНС = "";
	КодПООКТМО = "";
	ТекущаяСтраница = Контейнер.Раздел2[0];
	ТекущаяСтраница.Представление = "Раздел2";
	ДанныеОбразец = ОбщегоНазначения.СкопироватьРекурсивно(ТекущаяСтраница.Данные);
	ДанныеДопСтрокОбразец = ОбщегоНазначения.СкопироватьРекурсивно(ТекущаяСтраница.ДанныеДопСтрок);
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ПерваяСтраница Тогда
			ТекущаяСтраница = Контейнер.Раздел2.Добавить();
			ТекущаяСтраница.Данные = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеОбразец);
			ТекущаяСтраница.ДанныеДопСтрок = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеДопСтрокОбразец);
		Иначе
			ПерваяСтраница = Ложь;
		КонецЕсли;
		
		Данные = ТекущаяСтраница.Данные;
		ДанныеДопСтрокРаздела2 = ТекущаяСтраница.ДанныеДопСтрок;
		
		КодИФНС = Выборка.КодИФНС;
		
		СведенияОбАдресе = УправлениеКонтактнойИнформацией.СведенияОбАдресе(Выборка.АдресОсуществленияДеятельности);
		
		Данные.П000020001000 = Выборка.КодВидаПредпринимательскойДеятельности;
		
		Данные.П000020002001 = СведенияОбАдресе.Индекс;
		Данные.П000020002002 = СведенияОбАдресе.КодРегиона;
		Данные.П000020002003 = СведенияОбАдресе.Район;
		Данные.П000020002004 = СведенияОбАдресе.Город;
		Данные.П000020002005 = СведенияОбАдресе.НаселенныйПункт;
		Данные.П000020002006 = СведенияОбАдресе.Улица;
		Данные.П000020002007 = СведенияОбАдресе.Здание.Номер;
		Данные.П000020002008 = ?(СведенияОбАдресе.Корпуса.Количество() > 0, СведенияОбАдресе.Корпуса[0].Номер, "");
		Данные.П000020002009 = ?(СведенияОбАдресе.Помещения.Количество() > 0, СведенияОбАдресе.Помещения[0].Номер, "");
		
		Данные.П000020003000 = Выборка.КодОКАТО;
		КодПООКТМО			 = Выборка.КодОКАТО;
		Данные.П000020004003 = Выборка.БазоваяДоходность;
		
		Данные.П000020007002 = Выборка.ЗначениеФизическогоПоказателя1;
		Данные.П000020008002 = Выборка.ЗначениеФизическогоПоказателя2;
		Данные.П000020009002 = Выборка.ЗначениеФизическогоПоказателя3;
		
		Данные.П000020005003 = КоэффДефлятор;
		
		// Расчет коэффициента к2
		ДатаНачала = НачалоДня(Выборка.ДатаНачала);
		ДатаОкончания = КонецДня(Выборка.ДатаОкончания);
		КоличествоДнейКВычету = 0;
		Если ДатаНачала > НачалоКвартала(ПараметрыОтчета.ДатаКонцаПериодаОтчета) Тогда
			Данные.П000020006201_1 = ДатаНачала;
			Данные.П000020006101 = "V";
			Данные.П000020006102 = "";
			ВставитьЗначениеДопСтроки(ДанныеДопСтрокРаздела2, "П000020006201_1", ДатаНачала);
		КонецЕсли;
	
		Если ДатаОкончания < ПараметрыОтчета.ДатаКонцаПериодаОтчета Тогда
			Данные.П000020006501_1 = ДатаОкончания;
			Данные.П000020006401 = "V";
			Данные.П000020006402 = "";
			ВставитьЗначениеДопСтроки(ДанныеДопСтрокРаздела2, "П000020006501_1", ДатаОкончания);
		КонецЕсли;
		
		
		Данные.П000020006003 = 
			Выборка.КоэффициентК2;
		
		// Добавляем данные по выработанным дням
		Данные.П000020007003 = Выборка.ВыработкаДней1;
		Данные.П000020008003 = Выборка.ВыработкаДней2;
		Данные.П000020009003 = Выборка.ВыработкаДней3;
		
		Данные.П000020007004 = Окр(Данные.П000020004003 * Данные.П000020005003 * Данные.П000020006003 * Данные.П000020007002 * Данные.П000020007003 / Выборка.ДнейВсего1, 2);
		Данные.П000020008004 = Окр(Данные.П000020004003 * Данные.П000020005003 * Данные.П000020006003 * Данные.П000020008002 * Данные.П000020008003 / Выборка.ДнейВсего2, 2);
		Данные.П000020009004 = Окр(Данные.П000020004003 * Данные.П000020005003 * Данные.П000020006003 * Данные.П000020009002 * Данные.П000020009003 / Выборка.ДнейВсего3, 2);
		
		Данные.П000020010003 = Число(Формат(Данные.П000020007004 + Данные.П000020008004 + Данные.П000020009004, "ЧЦ=12;ЧДЦ=2;ЧН="));
		Данные.П000020010503 = Выборка.СтавкаЕНВД;
		Данные.П000020011003 = Окр(Данные.П000020010003 * Выборка.СтавкаЕНВД / 100, 0);
	КонецЦикла;
	//
	// заполняем данные 3 раздела
	Раздел3 = Контейнер.Раздел3;
	Раздел3.П000030002003  = 0;
	Раздел3.П000030003003  = 0;
	// Получаем данные по  вычету на покупку онлайн-касс
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходыНаККТУменьшающиеНалог.РасходыУменьшающиеНалог КАК РасходыУменьшающиеНалог,
	|	РасходыНаККТУменьшающиеНалог.ЗаводскойНомерККТ КАК ЗаводскойНомерККТ,
	|	РасходыНаККТУменьшающиеНалог.РегистрационныйНомерККТ КАК РегистрационныйНомерККТ,
	|	РасходыНаККТУменьшающиеНалог.НаименованиеККТ КАК НаименованиеККТ,
	|	РасходыНаККТУменьшающиеНалог.ДатаРегистрации КАК ДатаРегистрации
	|ИЗ
	|	РегистрСведений.РасходыНаККТУменьшающиеНалог КАК РасходыНаККТУменьшающиеНалог
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗаписиКалендаряПодготовкиОтчетности КАК ЗаписиКалендаряОтчетности
	|		ПО РасходыНаККТУменьшающиеНалог.ЗаписьКалендаря = ЗаписиКалендаряОтчетности.Ссылка
	|			И (ЗаписиКалендаряОтчетности.Организация = &Организация)
	|			И (РасходыНаККТУменьшающиеНалог.КодПООКТМО = &КодПООКТМО)
	|			И (РасходыНаККТУменьшающиеНалог.КодИФНС = &КодИФНС)
	|			И (ЗаписиКалендаряОтчетности.СобытиеКалендаря.Задача = ЗНАЧЕНИЕ(Справочник.ЗадачиКалендаряПодготовкиОтчетности.ЕдиныйНалогЕНВД))
	|			И (ЗаписиКалендаряОтчетности.СобытиеКалендаря.ДатаОкончанияДокументов = &ОкончаниеПериода)";
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("КодПООКТМО",  СокрЛП(КодПООКТМО));
	Запрос.УстановитьПараметр("КодИФНС",     КодИФНС);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ПараметрыОтчета.ДатаКонцаПериодаОтчета);
	
	ПерваяСтраница = Истина; 
	ТекущаяСтраница = Контейнер.Раздел4_ДанныеДопСтрок[0];
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ ПерваяСтраница Тогда
			ТекущаяСтраница = Контейнер.Раздел4_ДанныеДопСтрок.Добавить();
		Иначе
			ПерваяСтраница = Ложь;
		КонецЕсли;
		ТекущаяСтраница.П000040005003 = Выборка.РасходыУменьшающиеНалог;
		ТекущаяСтраница.П000040004003 = Выборка.ДатаРегистрации;
		ТекущаяСтраница.П000040003003 = Выборка.РегистрационныйНомерККТ;
		ТекущаяСтраница.П000040002003 = Выборка.ЗаводскойНомерККТ;
		ТекущаяСтраница.П000040001003 = Выборка.НаименованиеККТ;
	КонецЦикла;
	
	ЭтоИП = НЕ РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(ПараметрыОтчета.Организация);
	
	УменьшатьНалогНаВзносыИПРаботодателя = ЭтоИП И НалогУменьшаетсяНаФиксированныеВзносыИПРаботодателей(ПараметрыОтчета.ДатаКонцаПериодаОтчета);
	
	Если ИПИспользуетТрудНаемныхРаботников Тогда
		Раздел3.П000030000503 = "1";
		Раздел3.П000030002003 = СуммаСтраховыхВзносовЕНВД;
		Если УменьшатьНалогНаВзносыИПРаботодателя Тогда
			Раздел3.П000030003003 = СуммаФиксированныхСтраховыхВзносовЕНВД;
		Иначе
			Раздел3.П000030003003 = 0;
		КонецЕсли;
	Иначе
		Раздел3.П000030000503 = "2";
		Раздел3.П000030002003 =0;
		Раздел3.П000030003003 = СуммаФиксированныхСтраховыхВзносовЕНВД;
	КонецЕсли;
	
	Контейнер.Титульный.КодИМНС = КодИФНС;
	
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОтчета.Организация, "КодНалоговогоОрганаПолучателя") = КодИФНС Тогда
		Контейнер.Титульный.ПоМесту = ?(ЭтоИП,120,214);
	Иначе
		Контейнер.Титульный.ПоМесту = ?(ЭтоИП,320,310);
	КонецЕсли;
	
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТАТИСТИКИ
//

Процедура ЗаполнитьОтчетВФоне(ПараметрыОтчета, АдресХранилища) Экспорт
	
	ЗаполнитьОтчет(ПараметрыОтчета.ИДОтчета, ПараметрыОтчета.ИДРедакцииОтчета, ПараметрыОтчета.ПараметрыОтчета, ПараметрыОтчета.Контейнер);
	Попытка
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(ПараметрыОтчета.ПараметрыОтчета.АдресВременногоХранилищаРасшифровки);
	Исключение
		ТаблицаРасшифровки = Неопределено;
	КонецПопытки;
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("Контейнер", ПараметрыОтчета.Контейнер);
	СтруктураДанных.Вставить("ТаблицаРасшифровки", ТаблицаРасшифровки);
	
	ПоместитьВоВременноеХранилище(СтруктураДанных, АдресХранилища);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ИНТЕГРАЦИИ СО СПИСКОМ ЗАДАЧ БУХГАЛТЕРА 

// Процедура изменят заголовки кнопок.
//
Процедура НастроитьКнопкиКалендаряБухгалтера(КнопкаСправочникОтчетов = Неопределено, КнопкаКалендарь = Неопределено) Экспорт
			
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ИНТЕРФЕЙСА ВЗАИМОДЕЙСТВИЯ С КОНФИГУРАЦИЯМИ (БИБЛИОТЕКАМИ) - ПОТРЕБИТЕЛЯМИ
//

// Процедура возвращает структуру с табличными документами разделов 2.5 и 6 формы РСВ-1.
//
// Параметры:
//  СсылкаНаСохрРеглОтчет - ссылка на регламентированный отчет;
//  СтруктураРазделов     - структура:
//    ключ                - имя раздела;
//    значение            - массив структур с полями:
//     Описание           - строка;
//     ТабличныйДокумент  -  табличный документ.
//
Процедура ПолучитьРаздел25иРаздел6ФормыРСВ1(СсылкаНаСохрРеглОтчет, СтруктураРазделов,
	                                        НумероватьСтраницы,
											НомерПервойстраницыРаздела25,
											НомерПоследнейстраницыРаздела25,
											НомерПервойстраницыРаздела6,
											ОбщееКоличествоСтраницРаздела6) Экспорт
	ПерсонифицированныйУчет.ЗаполнитьПечатныеФормыРазделовРСВ1(
		СсылкаНаСохрРеглОтчет,
		СтруктураРазделов,
		НумероватьСтраницы,
		НомерПервойстраницыРаздела25,
		НомерПоследнейстраницыРаздела25,
		НомерПервойстраницыРаздела6,
		ОбщееКоличествоСтраницРаздела6);
КонецПроцедуры

// Процедура заполняет данные для выгрузки раздела 2.5 формы РСВ-1
//
// Параметры:
//  СсылкаНаСохрРеглОтчет – ссылка на регламентированный отчет;
//  ДанныеРаздела25       – структура с ключами "Таблица_2_5_1" и "Таблица_2_5_2":
//    "Таблица_2_5_1"     - таблица значений - заполняется данными многострочной
//                          части подраздела 2.5.1 по колонкам 2 - 5:
//      "П000251000102"   - Число (15, 2);
//      "П000251000103"   - Число (15, 2);
//      "П000251000104"   - Число ( 3, 0);
//      "П000251000105"   - Строка  (100);
//    "Таблица_2_5_2"     - таблица значений - заполняется данными многострочной
//                          части подраздела 2.5.2 по колонкам 2 - 8:
//      "П000252000102"   - Число ( 1, 0);
//      "П000252000103"   - Число ( 4, 0);
//      "П000252000104"   - Число (15, 2);
//      "П000252000105"   - Число (15, 2);
//      "П000252000106"   - Число (15, 2);
//      "П000252000107"   - Число ( 3, 0);
//      "П000252000108"   - Строка  (100).
//
Процедура ЗаполнитьДанныеДляВыгрузкиРаздела25РСВ_1(СсылкаНаСохрРеглОтчет, ДанныеРаздела25) Экспорт
	Справочники.КомплектыОтчетностиПерсучета.ЗаполнитьДанныеДляВыгрузкиРаздела25РСВ_1(СсылкаНаСохрРеглОтчет, ДанныеРаздела25);	
КонецПроцедуры

// Процедура вызывается при создании на сервере формы регламентированного отчета.
//
// Параметры:
//  ИмяОтчета - Строка - имя отчета в дереве объектов метаданных;
//  ИмяФормы  - Строка - имя формы отчета;
//  Форма     - УправляемаФорма - форма, из которой вызывается процедура.
//
Процедура ПриСозданииФормыРеглОтчета(ИмяОтчета, ИмяФормы, Форма) Экспорт
			
КонецПроцедуры

#Область ПроцедурыИФункцииСпискаЗадачБухгалтера

// Вызывается при изменении ручных статусов.
// См. также ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПриИзмененииСтатусаОтправкиДокумента
//
// Параметры:
//	Ссылка - ДокументСсылка - ссылка на документ.
//	Статус - Строка         - актуальный статус; предполагает сравнение с СтатусСданоСтрокой().
//
// Пример реализации:
//  ВыполнениеЗадачБухгалтера.ЗарегистрироватьИзменениеСтатусаЗадачиПодготовкиОтчета(Ссылка, Статус);
//
Процедура ИзменитьРучнойСтатус(Ссылка, Статус) Экспорт
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает идентификатор конфигурации.
// Длина идентификатора не должна превышать 8 символов.
//
// Пример:
//  Возврат "БПКОРП";
//
Функция ИДКонфигурации() Экспорт
	Возврат "УНФ";
КонецФункции

// Функция возвращает краткое название конфигурации.
// Длина возвращаемого значения не должна превышать 30 символов.
//
// Пример:
//  Возврат "1С:Бухгалтерия";
//
Функция КраткоеНазваниеПрограммы() Экспорт
	Возврат "1С:УНФ";
КонецФункции

// Функция возвращает список используемых в конфигурации регламентированных отчетов.
//
// Пример:
// 	СписокРегламентированныхОтчетов = Новый СписокЗначений;
//	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетНДС");
//	Возврат СписокРегламентированныхОтчетов;
//
Функция ПолучитьСписокРегламентированныхОтчетов() Экспорт
	
	СписокРегламентированныхОтчетов = Новый СписокЗначений;
	
	// Бухгалтерская отчетность
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетБухОтчетностьМП");
	
	// Налоговая отчетность
	СписокРегламентированныхОтчетов = Новый СписокЗначений;
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетУСН");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетЕдиныйНалогНаВмененныйДоход");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСведенияОСреднесписочнойЧисленностиРаботников");
	СписокРегламентированныхОтчетов.Добавить("СправкиНДФЛДляПередачиВНалоговыйОрган");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРСВ1");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетНДС");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчет6НДФЛ");
	СписокРегламентированныхОтчетов.Добавить("СЗВ-М");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРасчетПоСтраховымВзносам");
	
	// Статистика
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ИПсвед");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Предприниматель");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаПрочиеФормы");
	
	// Декларирование производства и оборота алкогольной продукции
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение12");
	
	// Служебные отчеты
	СписокРегламентированныхОтчетов.Добавить("КомплектыОтчетностиПерсучета");
	
	// Отчетность в фонды
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчет4ФСС");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетПодтверждениеВидаДеятельности");
	
	Возврат СписокРегламентированныхОтчетов;
	
КонецФункции

// Функция возвращает признак - является ли организация физ. или юр. лицом.
//
// Параметры:
//  Организация - ссылка на элемент справочника "Организации".
//
// Возвращаемое значение:
//  Истина - организация является юр. лицом;
//  Ложь   - организация является физ. лицом.
//
// Пример:
//  Если Организация.ИностраннаяОрганизация Тогда
//		Возврат Истина;
//	Иначе
//		Возврат (Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
//	КонецЕсли;
//
Функция ЭтоЮридическоеЛицо(Организация) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо", Истина) = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
КонецФункции

// Функция возвращает признак - уплачивает ли налогоплательщик единый налог на вмененный доход (ЕНВД).
//
// Параметры:
//  Организация - ссылка на элемент справочника "Организации".
//  Период      - дата, на которую нужно получить признак.
//
// Возвращаемое значение:
//  Истина - налогоплательщик уплачивает ЕНВД.
//  Ложь   - налогоплательщик не уплачивает ЕНВД.
//
// Пример:
//  Возврат УчетнаяПолитика.ПлательщикЕНВД(Организация, Период);
//
Функция ПлательщикЕНВД(Организация, Период, НачалоПериода = Неопределено) Экспорт
	
КонецФункции

// Функция возвращает систему налогообложения организации.
//
// Параметры:
//  Организация - ссылка на элемент справочника "Организации".
//  Период      - дата, на которую нужно получить систему налогообложения.
//
// Возвращаемое значение:
//  Общая      - общая система налогообложения.
//  Упрощенная - упрощенная система налогообложения.
//
// Пример:
//  УчетнаяПолитикаОрганизации = УчетнаяПолитика.СистемаНалогообложения(Организация, Период);
//	Если УчетнаяПолитикаОрганизации = Перечисления.СистемыНалогообложения.Общая Тогда
//		Возврат "Общая";
//	Иначе
//		Возврат "Упрощенная";
//	КонецЕсли;
//
Функция СистемаНалогообложения(Организация, Период) Экспорт
	
КонецФункции

// Функция возвращает признак применения ПБУ 18/02.
//
// Параметры:
//  Организация - ссылка на элемент справочника "Организации".
//  Период      - дата, на которую нужно получить признак.
//
// Возвращаемое значение:
//  Истина - ПБУ 18/02 применяется.
//  Ложь   - ПБУ 18/02 не применяется.
//
// Пример:
//  Возврат УчетнаяПолитика.ПоддержкаПБУ18(Организация, Период);
//
Функция ПрименяетсяПБУ18(Организация, Период) Экспорт
	
КонецФункции 

// Функция возвращает признак - является ли организация иностранной.
//
// Параметры:
//  Организация - ссылка на элемент справочника "Организации".
//
// Возвращаемое значение:
//  Истина - организация является иностранной;
//  Ложь   - организация не является иностранной.
//
// Пример:
//  Если Организация.Метаданные().Реквизиты.Найти("ИностраннаяОрганизация") <> Неопределено Тогда
//		Возврат Организация.ИностраннаяОрганизация;
//	Иначе
//		Возврат Ложь;
//	КонецЕсли;
//
Функция ЭтоИностраннаяОрганизация(Организация) Экспорт
	Если Организация.Метаданные().Реквизиты.Найти("ИностраннаяОрганизация") <> Неопределено Тогда
		Возврат Организация.ИностраннаяОрганизация;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

// Функция возвращает сведения о сотрудниках (застрахованных лицах) организации по состоянию на указанную дату.
//
// Параметры:
//  Организация - ссылка на элемент справочника Организации, по которому требуется получить сведения.
//  ДатаЗапроса - дата, по состоянию на которую требуется получить сведения
//
// Возвращаемое значение:
//  ТаблицаЗначений с колонками "Фамилия", "Имя", "Отчество" и "СтраховойНомерПФР", в которых
//  содержится информация о фамилии, имени, отчестве и страховом номере (СНИЛС) каждого
//  из сотрудников (застрахованных лиц) организации соответственно.
//
// Пример:
//
//  СтруктураПараметров = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизаций();
//  СтруктураПараметров.Организация = Организация;
//  СтруктураПараметров.ОкончаниеПериода = ДатаЗапроса;
//
//  Сотрудники = КадровыйУчет.СотрудникиОрганизации(Истина, СтруктураПараметров);
//
//  Возврат КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудники.ВыгрузитьКолонку("Сотрудник"), "Фамилия,Имя,Отчество,СтраховойНомерПФР", ДатаЗапроса);
//
Функция ПолучитьСписокЗастрахованныхЛицОрганизации(Организация, ДатаЗапроса) Экспорт
	
КонецФункции

// Процедура добавляет в форму назначаемую команду.
//
// Параметры:
//   Форма - форма, в которую добавляется команда.
//   ГруппаФормы - группа формы, в которой будет располагаться команда.
//
Процедура ДобавитьНазначаемуюКоманду(Форма, ГруппаФормы) Экспорт
	
КонецПроцедуры

// Функция возвращает заголовок формы "УправлениеОтчетностью" обработки "ОбщиеОбъектыРегламентированнойОтчетности".
// Если функция возвращает пустую строку, то используется заголовок формы, указанный по умолчанию.
//
// Пример:
//  Возврат "";
//
Функция ЗаголовокФормыУправлениеОтчетностью() Экспорт
	
КонецФункции

// Процедура возвращает признак - является ли индивидуальный предприниматель работодателем для наемных сотрудников.
//
// Параметры:
//  Организация - ссылка на элемент справочника "Организации".
//  ИПИспользуетТрудНаемныхРаботников - булево - признак - является ли индивидуальный предприниматель
//  работодателем для наемных сотрудников.
//    Истина - ИП является работодателем;
//    Ложь   - ИП не является работодателем.
//
// Пример:
//	ИПИспользуетТрудНаемныхРаботников = НЕ ЭтоЮридическоеЛицо(Организация)
//		И (ЗначениеЗаполнено(Организация.РегистрационныйНомерПФР)
//		ИЛИ ЗначениеЗаполнено(Организация.КодОрганаПФР)
//		ИЛИ ЗначениеЗаполнено(Организация.НаименованиеТерриториальногоОрганаПФР)
//		ИЛИ ЗначениеЗаполнено(Организация.РегистрационныйНомерТФОМС)
//		ИЛИ ЗначениеЗаполнено(Организация.РегистрационныйНомерФСС)
//		ИЛИ ЗначениеЗаполнено(Организация.КодПодчиненностиФСС)
//		ИЛИ ЗначениеЗаполнено(Организация.НаименованиеТерриториальногоОрганаФСС));
//
Процедура ПолучитьПризнакИспользованияИПТрудаНаемныхРаботников(Организация,
															   ИПИспользуетТрудНаемныхРаботников,
															   ДатаНачалаПериодаОтчета = Неопределено,
										  					   ДатаКонцаПериодаОтчета  = Неопределено) Экспорт
	ИПИспользуетТрудНаемныхРаботников = НЕ ЭтоЮридическоеЛицо(Организация)
		И Организация.ИПИспользуетТрудНаемныхРаботников;
КонецПроцедуры

// Функция возвращает имя справочника обособленных подразделений,
// используемого для автоматического заполнения статистической отчетности.
//
// Пример:
//  Возврат "ПодразделенияОрганизаций";
//
Функция ИмяСправочникаОбособленныхПодразделений(ИмяОтчета = "") Экспорт
	Возврат "Организации";
КонецФункции

// Функция возвращает имя реквизита справочника подразделений, который
// определяет, является ли подразделение обособленным (в трактовке Росстата).
// Используется для автоматического заполнения статистической отчетности.
//
// Тип реквизита - Булево.
// Если значение реквизита равно Истина - подразделение является обособленным.
// Если значение реквизита равно Ложь - подразделение не является обособленным.
//
// Пример:
//  Возврат "ИмеетНомерТерриториальногоОрганаРосстата";
//
Функция ИмяРеквизитаПризнакаОбособленногоПодразделения(ИмяОтчета = "") Экспорт
	
КонецФункции

// Функция возвращает значение Раздела 3 Строки 130 Книги учета доходов и расходов.
// Параметры:
//   Организация - Организация по которой построен рег.отчет.
//   ДатаОкончанияПериода - Дата окончания периода отчета (СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета).
Функция СуммаФактическогоУменьшенияНалоговойБазы(Организация, ДатаОкончанияПериода) Экспорт 
	
КонецФункции

// Функция возвращает код вида документа физического лица.
//
// Параметры:
//  ВидДокументаФизическогоЛица - ссылка на элемент справочника "ВидыДокументовФизическихЛиц".
//
// Тип возвращаемого значения:
//  Строка(2).
//
// Пример:
//	Возврат ВидДокументаФизическогоЛица.КодМВД;
//
Функция ПолучитьКодВидаДокументаФизическогоЛица(ВидДокументаФизическогоЛица) Экспорт
	
КонецФункции

// Процедура возвращает ссылку на предопределенный элемент из справочника "ВидыКонтактнойИнформации".
//
// Параметры:
//  ВидКИ      - ссылка на предопределенный элемент справочника "ВидыКонтактнойИнформации".
//  НаимВидаКИ - Строка - наименование предопределенного элемента справочника "ВидыКонтактнойИнформации".
//
// Пример:
//  ВидКИ = Справочники.ВидыКонтактнойИнформации[НаимВидаКИ];
//
Процедура ПолучитьВидКонтактнойИнформации(ВидКИ, НаимВидаКИ) Экспорт
		
КонецПроцедуры

// Процедура возвращает признак ведения персонифицированного учета во внешней программе.
//
// Параметры:
//  ПризнакПерсУчета - булево - признак ведения персонифицированного учета во внешней программе.
//                     Истина - персонифицированный учет ведется во внешней программе;
//                     Ложь   - персонифицированный учет ведется в конфигурации.
//
Процедура ПолучитьПризнакВеденияПерсонифицированногоУчетаВоВнешнейПрограмме(ПризнакПерсУчета) Экспорт
	
КонецПроцедуры

// Процедура возвращает признак учета расходов по элементам затрат.
//
// Параметры:
//  НачалоПериода        - Дата - начало периода отчета (СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета).
//  КонецПериода         - Дата - окончание периода отчета (СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета).
//  Организация          - СправочникСсылка - ссылка на элемент справочника "Организации".
//  ПризнакУчетаРасходов - Булево - признак учета расходов по элементам затрат.
//                           Истина - расходы учитываются по элементам затрат;
//                           Ложь   - расходы не учитываются по элементам затрат.
// Пример:
//  ПризнакУчетаРасходов = ЭлементыЗатратНастройкаПараметровУчета.РасходыУчитываютсяПоЭлементамЗатрат(
//  	НачалоПериода, КонецПериода, Организация);
//
Процедура ПолучитьПризнакУчетаРасходовПоЭлементамЗатрат(НачалоПериода, КонецПериода, Организация, ПризнакУчетаРасходов) Экспорт
	
КонецПроцедуры

// Процедура возвращает признак учета расходов по элементам затрат.
//
// Параметры:
//  НачалоПериода        - Дата - начало года, предшествовавшему периоду отчета
//                               (НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, - 12))).
//  КонецПериода         - Дата - окончание периода отчета (СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета).
//  Организация          - СправочникСсылка - ссылка на элемент справочника "Организации".
//  ПризнакПлательщикаТС - Булево - признак плательщика торгового сбора.
//                           Истина - организация является плательщиком торгового сбора;
//                           Ложь   - организация не является плательщиком торгового сбора.
// Пример:
//  ПризнакПлательщикаТС = УчетнаяПолитика.ПлательщикТорговогоСбораЗаПериод(Организация, НачалоПериода, КонецПериода);
//
Процедура ПолучитьПризнакПлательщикаТорговогоСбораЗаПериод(Организация, НачалоПериода, КонецПериода, ПризнакПлательщикаТС) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Организация);
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецПериода);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТорговыеТочки.Ссылка
	|ПОМЕСТИТЬ ВТТорговыеТочки
	|ИЗ
	|	Справочник.ТорговыеТочки КАК ТорговыеТочки
	|ГДЕ
	|	ТорговыеТочки.Владелец = &Владелец
	|	И ТорговыеТочки.ДатаНачалаОсуществленияДеятельности <= &ОкончаниеПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТорговыеТочки.Ссылка
	|ИЗ
	|	ВТТорговыеТочки КАК ТорговыеТочки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТорговыеТочки.История КАК ИсторияТорговыеТочки
	|		ПО ТорговыеТочки.Ссылка = ИсторияТорговыеТочки.Ссылка
	|			И (ИсторияТорговыеТочки.ПричинаИзменения = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСтатусовТорговыхТочек.ПрекращениеДеятельности))
	|			И (ИсторияТорговыеТочки.ДатаИзменения <= &НачалоПериода)
	|ГДЕ
	|	ИсторияТорговыеТочки.Ссылка ЕСТЬ NULL ";
	
	ПризнакПлательщикаТС = Не Запрос.Выполнить().Пустой();
	
КонецПроцедуры


// Процедура возвращает объект налогообложения УСН.
//
// Параметры:
//  НачалоПериода - Дата - начало периода отчета (СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета).
//  КонецПериода  - Дата - окончание периода отчета (СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета).
//  Организация   - СправочникСсылка - ссылка на элемент справочника "Организации".
//  ОбъектНалУСН  - Число или Неопределено - объект налогообложения УСН.
//                    1 - объект налогообложения - доходы;
//                    2 - объект налогообложения - доходы, уменьшенные на величину расходов;
//                    Неопределено - не применялась УСН за период или в конфигурации не реализован
//                                   функционал получения объекта налогообложения УСН за период.
//
Процедура ПолучитьОбъектНалогообложенияУСНЗаПериод(Организация, НачалоПериода, КонецПериода, ОбъектНалУСН) Экспорт
	Налогообложение = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(Организация, КонецПериода);
	Если Налогообложение.ПлательщикУСН Тогда
		Если Налогообложение.ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.Доходы Тогда
			ОбъектНалУСН = 1;
		ИначеЕсли Налогообложение.ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.ДоходыМинусРасходы Тогда
			ОбъектНалУСН = 2;
		Иначе
			ОбъектНалУСН = Неопределено;
		КонецЕсли;
	Иначе
		ОбъектНалУСН = Неопределено;
	КонецЕсли;
КонецПроцедуры

// Процедура возвращает УИД конфигурации для целей регламентированной отчетности.
//
// Параметры:
// 	УИДКонфигурации - Строка - Уникальный идентификатор конфигурации 
//							   для целей регламентированной отчетности.
//
// Пример:
//  УИДКонфигурации = "e54b72a0-171f-11df-85fa-001b24e002fe";
//
Процедура ПолучитьУИДКонфигурации(УИДКонфигурации) Экспорт

КонецПроцедуры

// Возвращает массив ссылок на элементы справочника "РегистрацииВНалоговомОргане".
//
// Параметры:
//   Организация            - СправочникСсылка.Организации - ссылка на элемент справочника "Организации".
//   ДатаКонцаПериодаОтчета - Дата - дата конца периода отчета.
//   НалоговыеОрганы        - Массив - ссылки на элементы справочника "РегистрацииВНалоговомОргане".
//   НаименованиеРеглОтчета - Строка - наименование регламентированного отчета.
//
// Пример реализации:
//   Если НаименованиеРеглОтчета = "РегламентированныйОтчетПрибыль" Тогда
//		...
//	 ИначеЕсли НаименованиеРеглОтчета = "РегламентированныйОтчет6НДФЛ" Тогда	
//	 	...
//	 КонецЕсли;	
//
Процедура ПолучитьНалоговыеОрганы(Организация, ДатаКонцаПериодаОтчета, НалоговыеОрганы, НаименованиеРеглОтчета = "") Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане"));
	
КонецПроцедуры

// Устанавливает флаг того, что конфигурация дает возможность интерактивно задать подписантов непосредственно
// из формы отчетности.
//
// Параметры:
//   ПризнакИспользования - Булево - флаг, который необходимо установить, если конфигурация будет давать
//									 возможность настроить подписанта прямо из формы отчетности.
//
// Пример реализации:
//   ПризнакИспользования = Истина;
//
Процедура ИспользоватьКонтекстнуюНастройкуПодписантовСтатистики(ПризнакИспользования) Экспорт 
	ПризнакИспользования = Истина;
КонецПроцедуры

Функция НалогУменьшаетсяНаФиксированныеВзносыИПРаботодателей(Период) Экспорт
	
	Возврат Период >= Дата('20170101'); // Действует статья 346.32 НК РФ в редакции федерального закона от 2 июня 2016 г. N 178-ФЗ.
	
КонецФункции

Функция ФИОИндивидуальногоПредпринимателя(Организация) Экспорт
	
	ЗапросФИО = Новый Запрос("ВЫБРАТЬ
	                         |	ФИОФизЛиц.Фамилия,
	                         |	ФИОФизЛиц.Имя,
	                         |	ФИОФизЛиц.Отчество
	                         |ИЗ
	                         |	РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &ФизическоеЛицо) КАК ФИОФизЛиц");
	ЗапросФИО.УстановитьПараметр("ФизическоеЛицо", Организация.ФизическоеЛицо);
	Выборка = ЗапросФИО.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Фамилия, Имя, Отчество", Выборка.Фамилия, Выборка.Имя, Выборка.Отчество);
	Иначе
		Возврат Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	КонецЕсли;
	
КонецФункции

#Область НоваяФормаРегламентированнойОтчетности

// Процедура переопределяет обработчик подписки на событие "ЗаписьОбъектовРегламентированнойОтчетности*"
//
// Параметры:
//	Ссылка - СправочникСсылка, ДокументСсылка - Ссылка на объект - источник события
//	Отказ  - Булево - Управляет значением параметра "Отказ" вызывающего обработчика подписки на событие
//	СтандартнаяОбработка - Булево - Если СтандартнаяОбработка = Истина, то будут выполнены действия вызывающего обработчика подписки на событие
//
Процедура ЗаписьОбъектовРегламентированнойОтчетности(Ссылка, Отказ, СтандартнаяОбработка) Экспорт
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.КомплектыОтчетностиПерсучета") Тогда
		ОтчетныйПериод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ОтчетныйПериод");
		
		Если ОтчетныйПериод >= '20140101' Тогда
			СтандартнаяОбработка = Ложь;
			РСВ_1 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "РСВ_1");
			Если ЗначениеЗаполнено(РСВ_1) Тогда
				ПараметрыОтчета = РегламентированнаяОтчетность.СвойстваРегламентированногоОтчета(РСВ_1);
				РегламентированнаяОтчетностьВызовСервера.ОтразитьВЖурналеОтчетов(ПараметрыОтчета);
			КонецЕсли;	
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

// Процедура переопределяет свойства объекта, с которыми он будет отображен в форме Отчетность
// Параметры:
//  СвойстваОбъектов  - ТаблицаЗначений - Таблица, содержащая в себе описания ссылок, переданных в закладке Ссылка таблицы
//		Каждая колонка таблицы соотвествует свойству объекта.
//		Таблица содержит следующие колонки:
//			- ДатаСоздания - Дата - Дата создания объекта
//			- Наименование - Строка - Наименование объекта, с которым он будет отображаться в форме Отчетность
//			- КодКонтролирующегоОргана - Строка - Код контролирующего органа, в который отправляется отчетности по ТКС
//			- ДатаНачала - Дата - Дата начала периода. Пустая, если дата начала периода отсуствует
//			- ДатаОкончания - Дата - Дата окончания периода. Пустая, если дата окончания периода отсуствует 
//			- ВариантОтчета - Строка - Если первичный, то указываем "П", если нет признака первичный/корректирующий - "-", иначе - "К/" + <номер корректировки>
//			- ПометкаУдаления - Булево - Истина, если объект помечен на удаление 
//			- Организация - СправочникСсылка.Организации - Организация, которой принадлежит объект
//			- Комментарий - Строка - Комментарий из объекта
//
Процедура ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов) Экспорт
	ТипыДокументовПерсУчета = Новый Массив;
	ТипыДокументовПерсУчета.Добавить(Тип("ДокументСсылка.СведенияОЗастрахованныхЛицахСЗВ_М"));
	ТипыДокументовПерсУчета.Добавить(Тип("СправочникСсылка.КомплектыОтчетностиПерсучета"));
	ТипыДокументовПерсУчета.Добавить(Тип("ДокументСсылка.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ"));
	ТипыДокументовПерсУчета.Добавить(Тип("ДокументСсылка.ОписьОДВ_1"));
	
	ДокументыПерсУчета = Новый Массив;
	СоответствиеСсылокСвойствам = Новый Соответствие;
	
	Для Каждого ЗапрашиваемыеДанные Из СвойстваОбъектов Цикл
		Если ТипыДокументовПерсУчета.Найти(ТипЗнч(ЗапрашиваемыеДанные.Ссылка)) <> Неопределено Тогда
			СоответствиеСсылокСвойствам.Вставить(ЗапрашиваемыеДанные.Ссылка, ЗапрашиваемыеДанные);
			ДокументыПерсУчета.Добавить(ЗапрашиваемыеДанные.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Если ДокументыПерсУчета.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ДокументыПерсУчета", ДокументыПерсУчета);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОЗастрахованныхЛицахСЗВ_М.Ссылка КАК Ссылка,
		|	СведенияОЗастрахованныхЛицахСЗВ_М.Дата КАК ДатаСоздания,
		|	СведенияОЗастрахованныхЛицахСЗВ_М.Организация КАК Организация,
		|	СведенияОЗастрахованныхЛицахСЗВ_М.Организация.КодОрганаПФР КАК КодКонтролирующегоОргана,
		|	СведенияОЗастрахованныхЛицахСЗВ_М.ПометкаУдаления КАК ПометкаУдаления,
		|	СведенияОЗастрахованныхЛицахСЗВ_М.ОтчетныйПериод КАК ДатаНачала,
		|	СведенияОЗастрахованныхЛицахСЗВ_М.ОкончаниеОтчетногоПериода КАК ДатаОкончания,
		|	СведенияОЗастрахованныхЛицахСЗВ_М.Комментарий КАК Комментарий,
		|	ВЫБОР
		|		КОГДА СведенияОЗастрахованныхЛицахСЗВ_М.ТипФормы = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ_М.Исходная)
		|			ТОГДА ""П""
		|		ИНАЧЕ ""К""
		|	КОНЕЦ КАК ВариантОтчета
		|ИЗ
		|	Документ.СведенияОЗастрахованныхЛицахСЗВ_М КАК СведенияОЗастрахованныхЛицахСЗВ_М
		|ГДЕ
		|	СведенияОЗастрахованныхЛицахСЗВ_М.Ссылка В(&ДокументыПерсУчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КомплектыОтчетностиПерсучета.Ссылка,
		|	ВЫБОР
		|		КОГДА НЕ КомплектыОтчетностиПерсучета.РСВ_1 = ЗНАЧЕНИЕ(Документ.РегламентированныйОтчет.ПустаяСсылка)
		|			ТОГДА КомплектыОтчетностиПерсучета.РСВ_1.ДатаПодписи
		|		КОГДА НЕ КомплектыОтчетностиПерсучета.ОписьПачекСЗВ = ЗНАЧЕНИЕ(Документ.ОписьПачекСЗВ_6.ПустаяСсылка)
		|			ТОГДА КомплектыОтчетностиПерсучета.ОписьПачекСЗВ.Дата
		|		ИНАЧЕ КомплектыОтчетностиПерсучета.ОтчетныйПериод
		|	КОНЕЦ,
		|	КомплектыОтчетностиПерсучета.Организация,
		|	КомплектыОтчетностиПерсучета.Организация.КодОрганаПФР,
		|	КомплектыОтчетностиПерсучета.ПометкаУдаления,
		|	КомплектыОтчетностиПерсучета.ОтчетныйПериод,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	"""",
		|	""П""
		|ИЗ
		|	Справочник.КомплектыОтчетностиПерсучета КАК КомплектыОтчетностиПерсучета
		|ГДЕ
		|	КомплектыОтчетностиПерсучета.Ссылка В(&ДокументыПерсУчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОписьОДВ_1.Ссылка,
		|	ОписьОДВ_1.Дата,
		|	ОписьОДВ_1.Организация,
		|	ОписьОДВ_1.Организация.КодОрганаПФР,
		|	ОписьОДВ_1.ПометкаУдаления,
		|	ОписьОДВ_1.ОтчетныйПериод,
		|	ОписьОДВ_1.ОкончаниеОтчетногоПериода,
		|	ОписьОДВ_1.Комментарий,
		|	""К""
		|ИЗ
		|	Документ.ОписьОДВ_1 КАК ОписьОДВ_1
		|ГДЕ
		|	ОписьОДВ_1.Ссылка В(&ДокументыПерсУчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Ссылка,
		|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Дата,
		|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Организация,
		|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Организация.КодОрганаПФР,
		|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ПометкаУдаления,
		|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ОтчетныйПериод,
		|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ОкончаниеОтчетногоПериода,
		|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Комментарий,
		|	ВЫБОР
		|		КОГДА СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ТипСведений = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ_СТАЖ.Исходная)
		|			ТОГДА ""П""
		|		ИНАЧЕ ""К""
		|	КОНЕЦ
		|ИЗ
		|	Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ КАК СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ
		|ГДЕ
		|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Ссылка В(&ДокументыПерсУчета)";

		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗапрашиваемыеДанные = СоответствиеСсылокСвойствам[Выборка.Ссылка];
			
			ЗаполнитьЗначенияСвойств(ЗапрашиваемыеДанные, Выборка);
			
			Если ТипЗнч(ЗапрашиваемыеДанные.Ссылка) = Тип("СправочникСсылка.КомплектыОтчетностиПерсучета") Тогда
				ЗапрашиваемыеДанные.ДатаОкончания = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ЗапрашиваемыеДанные.ДатаНачала);
				ЗапрашиваемыеДанные.Наименование = НСтр("ru = 'Комплект форм квартальной отчетности в ПФР'");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СправкиПоНДФЛ.ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов);
КонецПроцедуры

// Определяет свойства, касающиеся общих свойств объектов конфигураций-потребителей для отображения в форме Отчетность
// и возможности содания новый объектов из формы Отчетность
//
// Параметры:
//  ТаблицаОписания  - ТаблицаЗначений - Таблица, содержащая в себе описания объектов конфигураций-потребителей
//		Каждая колонка таблицы соотвествует свойству объекта.
//		Таблица содержит следующие колонки:
//			- Наименование - Строка - Наименование вида отчета, как оно должно отображаться в форме создания отчета
//			- ТипОбъекта - Тип - Тип описываемого объекта
//			- ВидКонтролирующегоОргана - Перечисления.ТипыКонтролирующихОрганов - контролирующий орган, в который сдается отчетности
//			- ГруппаВДереве - Строка - Определяет имя группы, в которой будет отображаться объект в случае иерархическкого отображения списка объектов
//			- ВидДокумента - Перечисления.СтраницыЖурналаОтчетность - Определяет страницу формы Отчетность, на которой будет отображаться объект
//				Может принимать одно из следующих значений:
//						Перечисления.СтраницыЖурналаОтчетность.Уведомления
//						Перечисления.СтраницыЖурналаОтчетность.Отчеты
//			- НеОтправляетсяВКонтролирующийОрган - Булево - Истина, если объект не отправляется в контролирующий орган по ТКС
//			- ЯвляетсяАктуальным - Булево - Определяет, можно ли создавать новые объекты данного вида
//			- ИмяОсновногоМакетаДляПечати - Строка - имя макета, который будет использоваться для печати по умолчанию
//			- ВидЭлектронногоПредставления - СправочникСсылка.ВидыОтправляемыхДокументов - вид электронного представления (справочник 
// ЭлектронныеПредставленияРегламентированныхОтчетов), соответствующий данному типу объекта. Неопределено, если такого вида отправляемого документа не существует
//
Процедура ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания) Экспорт
	
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.СправкиНДФЛДляПередачиВНалоговыйОрган");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФНС;
	ОписаниеДокументаОтчетности.ГруппаВДереве = НСтр("ru = 'Отчетность по физлицам'");
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ИмяОсновногоМакетаДляПечати = "Форма2НДФЛ";
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.СправкаПоНДФЛВНалоговыйОрган;
	
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.СведенияОЗастрахованныхЛицахСЗВ_М");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	ОписаниеДокументаОтчетности.ГруппаВДереве = "Отчетность по физлицам";
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ИмяОсновногоМакетаДляПечати = "ФормаСВЗ_М";
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.СведенияОЗастрахованныхЛицахСЗВ_М;
	
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	ОписаниеДокументаОтчетности.ГруппаВДереве = "Отчетность по физлицам";
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ИмяОсновногоМакетаДляПечати = "ПФ_MXL_ФормаСЗВ_СТАЖ,ПФ_MXL_ФормаОДВ_1";
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ;
	
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.ОписьОДВ_1");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	ОписаниеДокументаОтчетности.ГруппаВДереве = "Отчетность в фонды";
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ИмяОсновногоМакетаДляПечати = "ПФ_MXL_ФормаОДВ_1";
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.ОписьОДВ_1;
	
КонецПроцедуры

// Дополняет дерево регламентированных отчетов для использования в форме выбора видов отчетов,
// которая вызывается из формы "Отчетность" при нажатии на кнопку "Создать" на вкладке "Отчеты"
//
// Параметры:
//  ДеревоОтчетов - ДеревоЗначений - Дерево содержит описания видов отчетов, дополняемые из конфигураций-потребителей
//		Деревоз значений содержит следующие колонки:
//			- Наименование - Строка - Наименование вида отчета, как оно должно отображаться в форме
//			- ПолноеИмя - Строка - Полное имя (как в метаданных) документа или справочник для хранения данных отчета,
//				например: "Документ.РегламентированныйОтчет" или "Документ.УниверсальныйРегламентированныйОтчет" (для БГУ)
//			- Ссылка - СправочникСсылка - Ссылка на элемент справочника, содержащий описание вида отчета (если существует),
//				например, ссылка на элемент справочника "ВидыОтчетов" в БГУ
//			- ТипПолучателя - Перечисления.ТипыКонтролирующихОрганов - контролирующий орган, в который сдается отчетность
//			- Категория - Строка - Наименование категории отчета или название группы, в которую входит отчет (для группировки в форме)
//			- ЭтоГруппа - Булево - Если элемент дерева должен отображаться в форме как группа
//
Процедура ДобавитьВДеревоРегламентированныхОтчетовДругиеОтчеты(ДеревоОтчетов) Экспорт
	
КонецПроцедуры

// Процедура переопределяет параметры отчета
//
// Параметры:
//  Отчет                      – Структура("Наименование,ПолноеИмя,Ссылка").
//  ОрганизацияОтчета          – Ссылка или Неопределено, организация отчета.
//  ДатаНачалаПериодаОтчета    – Дата или Неопределено, дата начала периода отчета.
//  ДатаОкончанияПериодаОтчета – Дата или Неопределено, дата окончания периода отчета.
//  ПараметрыОткрытия          - Структура, переопределяемые параметры открытия формы отчета.
//
Процедура ПереопределитьПараметрыОтчета(Отчет, ОрганизацияОтчета, ДатаНачалаПериодаОтчета, ДатаОкончанияПериодаОтчета, ПараметрыОткрытия) Экспорт
			
КонецПроцедуры

// Дополняет функционал обработчика "ПриСозданииНаСервере" общей формы "Регламентированная отчетность",
// здесь можно добавлять новые конопки в командные панели, расширять возможности интерфейса.
//
// Параметры:
//  Форма - УправляемаяФорма, общая форма "Регламентированная отчетность".
//
// Пример:
//  ГруппаКоманды = Форма.Элементы["ОтчетыГруппа3"];
//  
//  ИмяКоманды = "ОтчетыПоказатьДополнительнуюИнформацию";
//  Команда = Форма.Команды.Добавить(ИмяКоманды);
//  Команда.Подсказка = НСтр("ru = 'Показать дополнительную информацию'");
//  Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
//  Команда.Картинка = БиблиотекаКартинок.Лупа;
//  Команда.Действие = "Подключаемый_ВыполнитьНазначаемуюКоманду";
//  
//  Кнопка = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаКоманды);
//  Кнопка.Заголовок = НСтр("ru = 'Инфо'");
//  Команда.ИзменяетСохраняемыеДанные = Ложь;
//  Кнопка.ИмяКоманды = ИмяКоманды;
//
Процедура ФормаРегламентированнойОтчетности_ПриСозданииНаСервере(Форма) Экспорт
	Элементы = Форма.Элементы;
	Если НЕ РегламентированнаяОтчетностьПереопределяемый.ДоступнаОтправкаРегламентированногоОтчета() Тогда
		Элементы.ГруппаЗаявленияИСписка.Видимость = Ложь;
		Элементы.ОтчетыОтправитьОтчет.Видимость = Ложь;
		Элементы.УведомленияКнопкаОтправить.Видимость = Ложь;
		Элементы.ПисьмаКнопкаОтправить.Видимость = Ложь;
		Элементы.СверкиКнопкаОтправить.Видимость = Ложь;
		Элементы.ЕГРЮЛКнопкаОтправить.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ФильтрацияОрганизацийВСтартовойФормеРегламентированногоОтчета

// Процедура возвращает текст запроса для получения организаций - юридических лиц.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса для получения организаций, являющихся юридическими лицами.
//
// Пример:
//	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//				   |	Организации.Ссылка,
//				   |	Организации.Наименование
//				   |ИЗ
//				   |	Справочник.Организации КАК Организации
//				   |ГДЕ
//				   |	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
//				   |	И НЕ Организации.ПометкаУдаления";
//
Процедура СформироватьТекстЗапросаДляПолученияДоступныхЮридическихЛиц(ТекстЗапроса) Экспорт
	
КонецПроцедуры

// Процедура возвращает текст запроса для получения организаций - индивидуальных предпринимателей.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса для получения организаций, являющихся индивидуальными предпринимателями.
//
// Пример:
//	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//				   |	Организации.Ссылка,
//				   |	Организации.Наименование
//				   |ИЗ
//				   |	Справочник.Организации КАК Организации
//				   |ГДЕ
//				   |	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
//				   |	И НЕ Организации.ПометкаУдаления";
//
Процедура СформироватьТекстЗапросаДляПолученияДоступныхИндивидуальныхПредпринимателей(ТекстЗапроса) Экспорт
	
КонецПроцедуры

// Процедура возвращает текст запроса для получения организаций -
// юридических лиц и индивидуальных предпринимателей.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса для получения организаций -
//                          юридических лиц и индивидуальных предпринимателей.
//
// Пример:
//	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//				   |	Организации.Ссылка,
//				   |	Организации.Наименование
//				   |ИЗ
//				   |	Справочник.Организации КАК Организации
//				   |ГДЕ
//				   |	НЕ Организации.ПометкаУдаления
//				   |
//				   |УПОРЯДОЧИТЬ ПО
//				   |	Наименование";
//
Процедура СформироватьТекстЗапросаДляПолученияДоступныхОрганизаций(ТекстЗапроса) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

Функция ЭтоСтрокаXML(Текст) Экспорт
	
	Возврат ТипЗнч(Текст) = Тип("Строка") И Лев(СокрЛ(Текст),1) = "<";
	
КонецФункции

// Функция возвращает признак - является ли организация работодателем для наемных сотрудников.
//
// Параметры:
//  Организация - ссылка на элемент справочника "Организации".
//  НачалоПериода - дата начала анализа.
//  ОкончаниеПериода - дата окончания анализа.
//
// Возвращаемое значение:
//  Истина - ИП является работодателем;
//  Ложь   - ИП не является работодателем.
Функция ИспользуетсяТрудНаемныхРаботниковЗаПериод(Организация, НачалоПериода, ОкончаниеПериода) Экспорт
	
	Если ЭтоЮридическоеЛицо(Организация) Тогда
		Возврат Истина;
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВзаиморасчетыССотрудникамиОбороты.СуммаРасход
		|ИЗ
		|	РегистрНакопления.РасчетыСПерсоналом.Обороты(&НачалоПериода, &ОкончаниеПериода, , Организация = &Организация) КАК ВзаиморасчетыССотрудникамиОбороты");
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
		Запрос.УстановитьПараметр("Организация", Организация );
		
		Возврат  НЕ Запрос.Выполнить().Пустой();
	КонецЕсли;
		
КонецФункции

Процедура ОписаниеПоказателей_СреднесписочнаяЧисленностьРаботающих_РСВ1_2011Кв1(ПоказателиОтчета)
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "СрСписЧисл", Истина, Ложь);
КонецПроцедуры

Процедура ЗначенияПоказателей_СреднесписочнаяЧисленностьРаботников_РСВ1_2012Кв1(ПараметрыОтчета, Контейнер)
	Контейнер.Титульный.СрСписЧисл = Сотрудники.СреднесписочнаяЧисленностьРаботающих(ПараметрыОтчета.Организация, ПараметрыОтчета.ДатаНачалаПериодаОтчета, ПараметрыОтчета.ДатаКонцаПериодаОтчета);
КонецПроцедуры

Процедура ЗначенияПоказателей_СреднесписочнаяЧисленностьРаботников_РСВ1_2013Кв1(ПараметрыОтчета, Контейнер)
	Контейнер.Титульный.СрСписЧисл = Сотрудники.СреднесписочнаяЧисленностьРаботающих(ПараметрыОтчета.Организация, ПараметрыОтчета.ДатаНачалаПериодаОтчета, ПараметрыОтчета.ДатаКонцаПериодаОтчета);
КонецПроцедуры

Процедура ЗначенияПоказателей_СреднесписочнаяЧисленностьРаботников_РСВ1_2014Кв1(ПараметрыОтчета, Контейнер)
	Контейнер.Титульный.СрСписЧисл = Сотрудники.СреднесписочнаяЧисленностьРаботающих(ПараметрыОтчета.Организация, ПараметрыОтчета.ДатаНачалаПериодаОтчета, ПараметрыОтчета.ДатаКонцаПериодаОтчета);
КонецПроцедуры


Процедура ОписаниеПоказателей_СреднесписочнаяЧисленностьРаботников_2007Кв1(ПоказателиОтчета)
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "Численность", Истина, Ложь);
КонецПроцедуры

Процедура ЗначенияПоказателей_СреднесписочнаяЧисленностьРаботников_2007Кв1(ПараметрыОтчета, Контейнер)
	
	ПоСостояниюНаДату = НачалоГода(ДобавитьМесяц(ПараметрыОтчета.ДатаКонцаПериодаОтчета, 1));
	
	// Проводим расчет среднесписочной численности
	Если ПоСостояниюНаДату = НачалоГода(ПоСостояниюНаДату) Тогда
		НачалоПериода = НачалоГода(ПоСостояниюНаДату - 1);
	Иначе 
		НачалоПериода = НачалоГода(ПоСостояниюНаДату)
	КонецЕсли;
	КонецПериода = НачалоДня(ПоСостояниюНаДату) - 1;
	
	Контейнер.Титульный.Численность =  Сотрудники.СреднесписочнаяЧисленностьРаботающих(ПараметрыОтчета.Организация, НачалоПериода, КонецПериода);
	
КонецПроцедуры

Процедура ОписаниеПоказателей_РСВ1_2012Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "КолЗастрахованных", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100010003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100010004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014204", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100010005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014205", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100010006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014206", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200001001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200020103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200020203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200020303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200021103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200021203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200021303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200022103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200022203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200022303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200023103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200023203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200023303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200025003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200025103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200025203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200026003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200027103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200027203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200027303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200027403", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200027603", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200020104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200020204", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200020304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200021104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200021204", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200021304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200022104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200022204", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200022304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200023104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200023204", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200023304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200025004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200025104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200025204", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200026004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200027104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200027204", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200027304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200027404", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200027604", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200020105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200020205", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200020305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200021105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200021205", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200021305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200022105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200022205", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200022305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200023105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200023205", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200023305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200025005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200025105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200025205", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200026005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200027105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200027205", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200027305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200027405", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200027605", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200020106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200020206", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200020306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200021106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200021206", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200021306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200022106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200022206", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200022306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200023106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200023206", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200023306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200025006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200025106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200025206", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200026006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200027106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200027206", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200027306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200027406", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200027606", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001007", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001008", Истина, Ложь);
	
КонецПроцедуры

Процедура ЗначенияПоказателей_РСВ1_2012Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ДатаКонцаПериодаОтчета = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
	Организация = ПараметрыОтчета.Организация;
	
	НачалоПериода = НачалоГода(ДатаКонцаПериодаОтчета);
	ОкончаниеПериода = НачалоМесяца(ДатаКонцаПериодаОтчета);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода", КонецДня(ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецГода", КонецГода(ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ДалекаяДата", ДобавитьМесяц(НачалоГода(ДатаКонцаПериодаОтчета), 1200));
	Запрос.УстановитьПараметр("ГодОтчетногоПериода", Год(ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Месяц1", Месяц(ДатаКонцаПериодаОтчета) - 2);
	Запрос.УстановитьПараметр("Месяц2", Месяц(ДатаКонцаПериодаОтчета) - 1);
	Запрос.УстановитьПараметр("Месяц3", Месяц(ДатаКонцаПериодаОтчета));
	// Все данные отчета берутся по обособленному подразделению (указанной организации)
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОбщийНалоговыйРежим", СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "ОбщийНалоговыйРежим")); 
	Запрос.УстановитьПараметр("УпрощенныйНалоговыйРежим", СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "УпрощенныйНалоговыйРежим")); 
	Запрос.УстановитьПараметр("ОрганизацияИнвалидов", СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "ОрганизацияИнвалидов"));
	
	// ----------------------------------------------------------------------------------
	// ТЕКСТЫ ЗАПРОСОВ
	
	
	УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОДоходахИВзносах(НачалоПериода, КонецДня(ДатаКонцаПериодаОтчета), Организация, Запрос.МенеджерВременныхТаблиц);
	
	
	ОсновнойТекст =
	"ВЫБРАТЬ
	|	СведенияОДоходах.Период КАК Период,
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СведенияОДоходах.ФизическоеЛицоНаименование,
	|	ГОД(Сотрудники.ДатаРождения) КАК ГодРождения,
	|	СведенияОДоходах.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
	|	ЕСТЬNULL(КодыВидовТарифаСтраховыхВзносов.КодПФР, """") КАК КодТарифа,
	|	СУММА(СведенияОДоходах.БазаПФР) КАК ОблагаемаяБазаПФР,
	|	СУММА(СведенияОДоходах.БазаФОМС) КАК ОблагаемаяБазаФОМС,
	|	СУММА(СведенияОДоходах.НачисленоВсего) КАК НачисленоВсего,
	|	СУММА(СведенияОДоходах.СуммаПревысившаяПределПФР) КАК СуммаПревысившаяПределПФР,
	|	СУММА(СведенияОДоходах.СуммаПревысившаяПределФОМС) КАК СуммаПревысившаяПределФОМС,
	|	СУММА(СведенияОДоходах.НеОблагаетсяПФР - СведенияОДоходах.РасходыПоАвторскимПФР) КАК НеОблагается,
	|	СУММА(СведенияОДоходах.НеОблагаетсяФОМС - СведенияОДоходах.РасходыПоАвторскимФОМС) КАК НеОблагаетсяФОМС,
	|	СУММА(СведенияОДоходах.ИсчисленоПФРССуммПревышения) КАК ИсчисленоПФРССуммПревышения,
	|	СУММА(СведенияОДоходах.РасходыПоАвторскимПФР) КАК РасходыПоАвторскимПФР,
	|	СУММА(СведенияОДоходах.РасходыПоАвторскимФОМС) КАК РасходыПоАвторскимФОМС
	|ПОМЕСТИТЬ ВТДоходыВзносов
	|ИЗ
	|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО СведенияОДоходах.ФизическоеЛицо = Сотрудники.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКодыВидовТарифаСтраховыхВзносов КАК КодыВидовТарифаСтраховыхВзносов
	|		ПО (СведенияОДоходах.ВидТарифаСтраховыхВзносов = КодыВидовТарифаСтраховыхВзносов.ВидТарифаСтраховыхВзносов)
	|			И (ГОД(СведенияОДоходах.Период) МЕЖДУ КодыВидовТарифаСтраховыхВзносов.ГодС И КодыВидовТарифаСтраховыхВзносов.ГодПо)
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И СведенияОДоходах.ФизическоеЛицо В
	|			(ВЫБРАТЬ
	|				Организации.ФизическоеЛицо
	|			ИЗ
	|				ВТФизЛицаСОблагаемойБазой КАК Организации)
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СведенияОДоходах.ФизическоеЛицоНаименование,
	|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
	|	ГОД(Сотрудники.ДатаРождения),
	|	ЕСТЬNULL(КодыВидовТарифаСтраховыхВзносов.КодПФР, """")
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ВидТарифаСтраховыхВзносов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Доходы.Период,
	|	Доходы.ФизическоеЛицо,
	|	Доходы.ВидТарифаСтраховыхВзносов
	|ПОМЕСТИТЬ ВТЛицаСПревышениемБазы
	|ИЗ
	|	ВТДоходыВзносов КАК Доходы
	|ГДЕ
	|	Доходы.СуммаПревысившаяПределПФР > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЛицаСПревышениемБазы.ФизическоеЛицо) КАК ВсегоФизлиц,
	|	ЛицаСПревышениемБазы.ВидТарифаСтраховыхВзносов
	|ПОМЕСТИТЬ ВТЛицаСПревышениемБазыЗаВсеМесяцы
	|ИЗ
	|	ВТЛицаСПревышениемБазы КАК ЛицаСПревышениемБазы
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛицаСПревышениемБазы.ВидТарифаСтраховыхВзносов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛицаСПревышениемБазы.Период,
	|	ЛицаСПревышениемБазы.ВидТарифаСтраховыхВзносов,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЛицаСПревышениемБазы.ФизическоеЛицо) КАК ВсегоФизлиц
	|ПОМЕСТИТЬ ВТЛицаСПревышениемБазыЗаОтдельныеМесяцы
	|ИЗ
	|	ВТЛицаСПревышениемБазы КАК ЛицаСПревышениемБазы
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛицаСПревышениемБазы.ВидТарифаСтраховыхВзносов,
	|	ЛицаСПревышениемБазы.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Доходы.ФизическоеЛицо,
	|	Доходы.ФизическоеЛицоНаименование КАК П000310001002,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК П000310001003,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК П000310001004,
	|	ЕСТЬNULL(СУММА(Доходы.НачисленоВсего), 0) КАК П000310001005,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
	|					ТОГДА Доходы.НачисленоВсего
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000310001006,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
	|					ТОГДА Доходы.НачисленоВсего
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000310001007,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
	|					ТОГДА Доходы.НачисленоВсего
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000310001008
	|ИЗ
	|	ВТДоходыВзносов КАК Доходы
	|ГДЕ
	|	Доходы.ВидТарифаСтраховыхВзносов = &ОрганизацияИнвалидов
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.ФизическоеЛицо,
	|	Доходы.ФизическоеЛицоНаименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	П000310001002
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Доходы.КодТарифа,
	|	Доходы.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов
	|ИЗ
	|	ВТДоходыВзносов КАК Доходы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Доходы.КодТарифа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Доходы.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения < 1967
	|					ТОГДА Доходы.НачисленоВсего
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200020103,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения > 1966
	|					ТОГДА Доходы.НачисленоВсего
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200020203,
	|	0 КАК П000200020303,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения < 1967
	|						И МЕСЯЦ(Доходы.Период) = &Месяц1
	|					ТОГДА Доходы.НачисленоВсего
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200020104,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения > 1966
	|						И МЕСЯЦ(Доходы.Период) = &Месяц1
	|					ТОГДА Доходы.НачисленоВсего
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200020204,
	|	0 КАК П000200020304,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения < 1967
	|						И МЕСЯЦ(Доходы.Период) = &Месяц2
	|					ТОГДА Доходы.НачисленоВсего
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200020105,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения > 1966
	|						И МЕСЯЦ(Доходы.Период) = &Месяц2
	|					ТОГДА Доходы.НачисленоВсего
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200020205,
	|	0 КАК П000200020305,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения < 1967
	|						И МЕСЯЦ(Доходы.Период) = &Месяц3
	|					ТОГДА Доходы.НачисленоВсего
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200020106,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения > 1966
	|						И МЕСЯЦ(Доходы.Период) = &Месяц3
	|					ТОГДА Доходы.НачисленоВсего
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200020206,
	|	0 КАК П000200020306,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения < 1967
	|					ТОГДА Доходы.НеОблагается
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200021103,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения > 1966
	|					ТОГДА Доходы.НеОблагается
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200021203,
	|	0 КАК П000200021303,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения < 1967
	|						И МЕСЯЦ(Доходы.Период) = &Месяц1
	|					ТОГДА Доходы.НеОблагается
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200021104,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения > 1966
	|						И МЕСЯЦ(Доходы.Период) = &Месяц1
	|					ТОГДА Доходы.НеОблагается
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200021204,
	|	0 КАК П000200021304,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения < 1967
	|						И МЕСЯЦ(Доходы.Период) = &Месяц2
	|					ТОГДА Доходы.НеОблагается
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200021105,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения > 1966
	|						И МЕСЯЦ(Доходы.Период) = &Месяц2
	|					ТОГДА Доходы.НеОблагается
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200021205,
	|	0 КАК П000200021305,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения < 1967
	|						И МЕСЯЦ(Доходы.Период) = &Месяц3
	|					ТОГДА Доходы.НеОблагается
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200021106,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения > 1966
	|						И МЕСЯЦ(Доходы.Период) = &Месяц3
	|					ТОГДА Доходы.НеОблагается
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200021206,
	|	0 КАК П000200021306,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения < 1967
	|					ТОГДА Доходы.РасходыПоАвторскимПФР
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200022103,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения > 1966
	|					ТОГДА Доходы.РасходыПоАвторскимПФР
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200022203,
	|	0 КАК П000200022303,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения < 1967
	|						И МЕСЯЦ(Доходы.Период) = &Месяц1
	|					ТОГДА Доходы.РасходыПоАвторскимПФР
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200022104,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения > 1966
	|						И МЕСЯЦ(Доходы.Период) = &Месяц1
	|					ТОГДА Доходы.РасходыПоАвторскимПФР
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200022204,
	|	0 КАК П000200022304,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения < 1967
	|						И МЕСЯЦ(Доходы.Период) = &Месяц2
	|					ТОГДА Доходы.РасходыПоАвторскимПФР
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200022105,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения > 1966
	|						И МЕСЯЦ(Доходы.Период) = &Месяц2
	|					ТОГДА Доходы.РасходыПоАвторскимПФР
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200022205,
	|	0 КАК П000200022305,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения < 1967
	|						И МЕСЯЦ(Доходы.Период) = &Месяц3
	|					ТОГДА Доходы.РасходыПоАвторскимПФР
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200022106,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения > 1966
	|						И МЕСЯЦ(Доходы.Период) = &Месяц3
	|					ТОГДА Доходы.РасходыПоАвторскимПФР
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200022206,
	|	0 КАК П000200022306,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения < 1967
	|					ТОГДА Доходы.СуммаПревысившаяПределПФР
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200023103,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения > 1966
	|					ТОГДА Доходы.СуммаПревысившаяПределПФР
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200023203,
	|	0 КАК П000200023303,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения < 1967
	|						И МЕСЯЦ(Доходы.Период) = &Месяц1
	|					ТОГДА Доходы.СуммаПревысившаяПределПФР
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200023104,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения > 1966
	|						И МЕСЯЦ(Доходы.Период) = &Месяц1
	|					ТОГДА Доходы.СуммаПревысившаяПределПФР
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200023204,
	|	0 КАК П000200023304,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения < 1967
	|						И МЕСЯЦ(Доходы.Период) = &Месяц2
	|					ТОГДА Доходы.СуммаПревысившаяПределПФР
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200023105,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения > 1966
	|						И МЕСЯЦ(Доходы.Период) = &Месяц2
	|					ТОГДА Доходы.СуммаПревысившаяПределПФР
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200023205,
	|	0 КАК П000200023305,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения < 1967
	|						И МЕСЯЦ(Доходы.Период) = &Месяц3
	|					ТОГДА Доходы.СуммаПревысившаяПределПФР
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200023106,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.ГодРождения > 1966
	|						И МЕСЯЦ(Доходы.Период) = &Месяц3
	|					ТОГДА Доходы.СуммаПревысившаяПределПФР
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200023206,
	|	0 КАК П000200023306,
	|	ЕСТЬNULL(СУММА(Доходы.ИсчисленоПФРССуммПревышения), 0) КАК П000200025203,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
	|					ТОГДА Доходы.ИсчисленоПФРССуммПревышения
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200025204,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
	|					ТОГДА Доходы.ИсчисленоПФРССуммПревышения
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200025205,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
	|					ТОГДА Доходы.ИсчисленоПФРССуммПревышения
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200025206,
	|	ЕСТЬNULL(СУММА(Доходы.НачисленоВсего), 0) КАК П000200027103,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
	|					ТОГДА Доходы.НачисленоВсего
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200027104,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
	|					ТОГДА Доходы.НачисленоВсего
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200027105,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
	|					ТОГДА Доходы.НачисленоВсего
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200027106,
	|	ЕСТЬNULL(СУММА(Доходы.НеОблагаетсяФОМС), 0) КАК П000200027203,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
	|					ТОГДА Доходы.НеОблагаетсяФОМС
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200027204,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
	|					ТОГДА Доходы.НеОблагаетсяФОМС
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200027205,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
	|					ТОГДА Доходы.НеОблагаетсяФОМС
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200027206,
	|	ЕСТЬNULL(СУММА(Доходы.РасходыПоАвторскимФОМС), 0) КАК П000200027303,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
	|					ТОГДА Доходы.РасходыПоАвторскимФОМС
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200027304,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
	|					ТОГДА Доходы.РасходыПоАвторскимФОМС
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200027305,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
	|					ТОГДА Доходы.РасходыПоАвторскимФОМС
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200027306,
	|	ЕСТЬNULL(СУММА(Доходы.СуммаПревысившаяПределФОМС), 0) КАК П000200027403,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
	|					ТОГДА Доходы.СуммаПревысившаяПределФОМС
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200027404,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
	|					ТОГДА Доходы.СуммаПревысившаяПределФОМС
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200027405,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
	|					ТОГДА Доходы.СуммаПревысившаяПределФОМС
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200027406,
	|	МАКСИМУМ(ЕСТЬNULL(ЛицаСПревышениемБазыЗаВсеМесяцы.ВсегоФизлиц, 0)) КАК П000200026003,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
	|				ТОГДА ЕСТЬNULL(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000200026004,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
	|				ТОГДА ЕСТЬNULL(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000200026005,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
	|				ТОГДА ЕСТЬNULL(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000200026006
	|ИЗ
	|	ВТДоходыВзносов КАК Доходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСПревышениемБазыЗаВсеМесяцы КАК ЛицаСПревышениемБазыЗаВсеМесяцы
	|		ПО Доходы.ВидТарифаСтраховыхВзносов = ЛицаСПревышениемБазыЗаВсеМесяцы.ВидТарифаСтраховыхВзносов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСПревышениемБазыЗаОтдельныеМесяцы КАК ЛицаСПревышениемБазыЗаОтдельныеМесяцы
	|		ПО Доходы.ВидТарифаСтраховыхВзносов = ЛицаСПревышениемБазыЗаОтдельныеМесяцы.ВидТарифаСтраховыхВзносов
	|			И Доходы.Период = ЛицаСПревышениемБазыЗаОтдельныеМесяцы.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.ВидТарифаСтраховыхВзносов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидТарифаСтраховыхВзносов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВзносыФизлиц.ПФРСтраховая), 0) КАК П000200025003,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц1
	|					ТОГДА ВзносыФизлиц.ПФРСтраховая
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200025004,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц2
	|					ТОГДА ВзносыФизлиц.ПФРСтраховая
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200025005,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц3
	|					ТОГДА ВзносыФизлиц.ПФРСтраховая
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200025006,
	|	ЕСТЬNULL(СУММА(ВзносыФизлиц.ПФРНакопительная), 0) КАК П000200025103,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц1
	|					ТОГДА ВзносыФизлиц.ПФРНакопительная
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200025104,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц2
	|					ТОГДА ВзносыФизлиц.ПФРНакопительная
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200025105,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц3
	|					ТОГДА ВзносыФизлиц.ПФРНакопительная
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200025106,
	|	ЕСТЬNULL(СУММА(ВзносыФизлиц.ФФОМС), 0) КАК П000200027603,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц1
	|					ТОГДА ВзносыФизлиц.ФФОМС
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200027604,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц2
	|					ТОГДА ВзносыФизлиц.ФФОМС
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200027605,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц3
	|					ТОГДА ВзносыФизлиц.ФФОМС
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000200027606,
	|	ВзносыФизлиц.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов
	|ИЗ
	|	ВТРасширенныеСведенияОДоходахИВзносах КАК ВзносыФизлиц
	|ГДЕ
	|	ВзносыФизлиц.ФизическоеЛицо В
	|			(ВЫБРАТЬ
	|				Организации.ФизическоеЛицо
	|			ИЗ
	|				ВТФизЛицаСОблагаемойБазой КАК Организации)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзносыФизлиц.ВидТарифаСтраховыхВзносов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидТарифаСтраховыхВзносов
	|";

	РасчетыСФондамиТекст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(РасчетыПоСтраховымВзносамОбороты.Период, МЕСЯЦ) КАК Период,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРСтраховая)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПФРСтраховаяРасход,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРНакопительная)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПФРНакопительнаяРасход,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРСтраховая)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПФРСтраховаяПриход,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРНакопительная)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПФРНакопительнаяПриход,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФФОМС)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФФОМСПриход,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФФОМС)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ТФОМС)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФФОМСРасход
	|ПОМЕСТИТЬ ВТРасчетыСФондом
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам КАК РасчетыПоСтраховымВзносамОбороты
	|ГДЕ
	|	РасчетыПоСтраховымВзносамОбороты.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
	|	И РасчетыПоСтраховымВзносамОбороты.ЭтоСтраховыеВзносы
	|	И РасчетыПоСтраховымВзносамОбороты.Организация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ПФРСтраховаяРасход), 0) КАК П000100014003,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц1
	|						ТОГДА РасчетыСФондом.ПФРСтраховаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)) - (СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|						ТОГДА РасчетыСФондом.ПФРСтраховаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014103,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц2
	|						ТОГДА РасчетыСФондом.ПФРСтраховаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)) - (СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц1
	|						ТОГДА РасчетыСФондом.ПФРСтраховаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014203,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц3
	|						ТОГДА РасчетыСФондом.ПФРСтраховаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)) - (СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц2
	|						ТОГДА РасчетыСФондом.ПФРСтраховаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014303,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ПФРНакопительнаяРасход), 0) КАК П000100014004,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц1
	|						ТОГДА РасчетыСФондом.ПФРНакопительнаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)) - (СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|						ТОГДА РасчетыСФондом.ПФРНакопительнаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014104,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц2
	|						ТОГДА РасчетыСФондом.ПФРНакопительнаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)) - (СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц1
	|						ТОГДА РасчетыСФондом.ПФРНакопительнаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014204,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц3
	|						ТОГДА РасчетыСФондом.ПФРНакопительнаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)) - (СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц2
	|						ТОГДА РасчетыСФондом.ПФРНакопительнаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014304,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ФФОМСРасход), 0) КАК П000100014005,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц1
	|						ТОГДА РасчетыСФондом.ФФОМСРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)) - (СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|						ТОГДА РасчетыСФондом.ФФОМСРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014105,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц2
	|						ТОГДА РасчетыСФондом.ФФОМСРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)) - (СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц1
	|						ТОГДА РасчетыСФондом.ФФОМСРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014205,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц3
	|						ТОГДА РасчетыСФондом.ФФОМСРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)) - (СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц2
	|						ТОГДА РасчетыСФондом.ФФОМСРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014305
	|ИЗ
	|	ВТРасчетыСФондом КАК РасчетыСФондом";
	
	ОстаткиНаНачалоПериодаТекст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Остатки.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРСтраховая)
	|					ТОГДА Остатки.СуммаОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000100010003,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Остатки.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРНакопительная)
	|					ТОГДА Остатки.СуммаОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000100010004,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Остатки.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФФОМС)
	|					ТОГДА Остатки.СуммаОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) + ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Остатки.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ТФОМС)
	|					ТОГДА Остатки.СуммаОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000100010005
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам.Остатки(
	|			&НачалоОтчетногоПериода,
	|			Организация = &Организация
	|				И ЭтоСтраховыеВзносы) КАК Остатки";

	ЗастрахованныеЛицаТекст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Организации.ФизическоеЛицо), 0) КАК КолЗастрахованных
	|ИЗ
	|	ВТФизЛицаСОблагаемойБазой КАК Организации";
	
	
	// -------------------------------------------------------------------------------
	// Вывод данных в отчет
	
	// очищаем разделы
	ПоказателиОтчета = Новый Структура;
	ОписаниеПоказателей_РСВ1_2012Кв1(ПоказателиОтчета);
	ДанныеРаздела2 = Контейнер.Раздел2[0].Данные[0].Значение;
	Значение = Неопределено;
	Для каждого КлючИЗначение Из ДанныеРаздела2 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			ДанныеРаздела2[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	СтруктураПолейРаздела2 = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеРаздела2); // копия для создания других страниц
	
	Контейнер.Раздел2.Очистить();	
	СтраницаРаздела2 = Контейнер.Раздел2.Добавить(); // первая страница
	СтраницаРаздела2.Данные.Добавить(ДанныеРаздела2);
	
	// Титульный лист
	
	Запрос.Текст = ЗастрахованныеЛицаТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Титульный,Выборка);
	КонецЕсли;
	
	// Раздел 1 
	
	Запрос.Текст = РасчетыСФондамиТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел1, Выборка);
	КонецЕсли;
	
	Запрос.Текст = ОстаткиНаНачалоПериодаТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел1, Выборка);
	КонецЕсли;
	
	// Разделы 2 и 3.1
	
	Запрос.Текст = ОсновнойТекст;
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ВсегоЗапросов = МассивРезультатов.Количество();
	
	// Раздел 2 
	
	ВсеТарифы = МассивРезультатов[ВсегоЗапросов-3].Выгрузить();
	ТаблицаДоходов = МассивРезультатов[ВсегоЗапросов-2].Выгрузить();
	ТаблицаВзносов = МассивРезультатов[ВсегоЗапросов-1].Выгрузить();
	КоличествоТарифов = ВсеТарифы.Количество();
	ИндексПоследнейСтроки = КоличествоТарифов - 1;
	
	УпрощенныйНалоговыйРежимПроизводство = СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "УпрощенныйНалоговыйРежимПроизводство");
	ДанныеРаздела2.П000210001001 = "01";
	
	ЗаполнятьРаздел36 = Ложь;
	
	Для каждого СтрокаРезультата Из ВсеТарифы Цикл
		
		Если СтрокаРезультата.ВидТарифаСтраховыхВзносов = УпрощенныйНалоговыйРежимПроизводство Тогда
			ЗаполнятьРаздел36 = Истина;
		КонецЕсли;
			
		СтрокаДоходов = ТаблицаДоходов.Найти(СтрокаРезультата.ВидТарифаСтраховыхВзносов,"ВидТарифаСтраховыхВзносов");
		СтрокаВзносов = ТаблицаВзносов.Найти(СтрокаРезультата.ВидТарифаСтраховыхВзносов,"ВидТарифаСтраховыхВзносов");
		
		ДанныеРаздела2.П000200001001 = СтрокаРезультата.КодТарифа;
		
		Если СтрокаДоходов = Неопределено и СтрокаВзносов = Неопределено Тогда // по текущему тарифу нет данных
			Если КоличествоТарифов > 1 И ВсеТарифы.Индекс(СтрокаРезультата) = ИндексПоследнейСтроки Тогда
				Контейнер.Раздел21.Удалить(СтраницаРаздела2);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДоходов <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеРаздела2,СтрокаДоходов);
		КонецЕсли;
		Если СтрокаВзносов <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеРаздела2,СтрокаВзносов);
		КонецЕсли;
		
		// если применяемых в орг. тарифов больше 1, тогда создадим еще одну страницу для раздела 2
		Если ВсеТарифы.Индекс(СтрокаРезультата) < ИндексПоследнейСтроки Тогда  
			ДанныеРаздела2 = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейРаздела2);
			СтраницаРаздела2 = Контейнер.Раздел2.Добавить();
			СтраницаРаздела2.Данные.Добавить(ДанныеРаздела2);
		КонецЕсли;
		
	КонецЦикла;
	
	// Раздел 3.1
	
	ВременнаяТаблица = МассивРезультатов[ВсегоЗапросов-4].Выгрузить();
	Контейнер.Раздел31_ДанныеДопСтрок.Очистить();
	НомерСтроки = 1;
	Для каждого СтрокаДанных Из ВременнаяТаблица Цикл
		СтрокаКонтейнера = Контейнер.Раздел31_ДанныеДопСтрок.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКонтейнера, СтрокаДанных);
		СтрокаКонтейнера.П000310001001 = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Если ЗаполнятьРаздел36 Тогда
		// Раздел 3.6
		Доход = 0;
		// Определяем, необходимо ли формировать доходы
		ЗапросПоДоходам = Новый Запрос;
		
		// Добавляем периода для анализа заполненности доходов
		Квартал = НачалоКвартала(НачалоПериода);
		// первый месяц
		ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(Квартал,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период ПОМЕСТИТЬ ВТПериодыКварталов";
		Квартал = НачалоКвартала(ДобавитьМесяц(Квартал,3));
		// прибавим остальные месяцы
		Пока КонецДня(Квартал) < КонецМесяца(ДатаКонцаПериодаОтчета) Цикл
			ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(Квартал,"ДФ=гггг,М,д,Ч,м,с") + ")";
			Квартал = НачалоКвартала(ДобавитьМесяц(Квартал,3));
		КонецЦикла;
		ЗапросПоДоходам.Текст = ПериодыТекст;
		
		
		ОсновнойТекстЗапросаПоДоходам = "ВЫБРАТЬ
		|	ПериодыКварталов.Период КАК Период,
		|	ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.ДоходБазаОборот, 0) КАК Сумма
		|ИЗ
		|	ВТПериодыКварталов КАК ПериодыКварталов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, Квартал, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
		|		ПО (КнигаУчетаДоходовИРасходовОбороты.Период = ПериодыКварталов.Период)";
		
		ЗапросПоДоходам.Текст =ПериодыТекст +"; "+ ОсновнойТекстЗапросаПоДоходам;
		ЗапросПоДоходам.УстановитьПараметр("Организация", Организация);
		ЗапросПоДоходам.УстановитьПараметр("НачалоПериода", НачалоПериода);
		ЗапросПоДоходам.УстановитьПараметр("КонецПериода", КонецДня(ДатаКонцаПериодаОтчета));
		ВыборкаПоДоходу = ЗапросПоДоходам.Выполнить().Выбрать();
		
		НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
		УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
		МенеджерВТДляДоходов = Новый МенеджерВременныхТаблиц;
		РегламентированнаяОтчетностьУСН.ПолучитьВТТаблицуКурсовВалютЗаПериод(МенеджерВТДляДоходов, НачалоКвартала(ДатаКонцаПериодаОтчета),КонецКвартала(ДатаКонцаПериодаОтчета), НациональнаяВалюта, УчетВалютныхОпераций);
		Пока ВыборкаПоДоходу.Следующий() Цикл
			Если ВыборкаПоДоходу.Сумма = 0 Тогда
				// Формируем доход за отчетный период
				// 
				Результат = Новый Структура;
				Результат.Вставить("ДокументФормирования", Документы.ЗаписиУСН.ПустаяСсылка());
				Результат.Вставить("ЕстьОшибки", Ложь);
				Результат.Вставить("ЕстьПредупреждения", Ложь);
				Результат.Вставить("ДополнительнаяИнформация", "");
				
				Результат.ДокументФормирования = РегламентированнаяОтчетностьУСН.ПолучитьДокументЗаписейУСНВПериодеПоВиду(
					Организация,
					КонецКвартала(ДатаКонцаПериодаОтчета),
					Перечисления.ВидыЗаписейФормированийКУДиР.ДоходыПрочие);
				
				РегламентированнаяОтчетностьУСН.ВыполнитьФормированиеПоДоходам(
					Организация,
					КонецКвартала(ДатаКонцаПериодаОтчета),
					Результат,
					МенеджерВТДляДоходов);
			КонецЕсли;
		КонецЦикла;
		
		ВыборкаПоДоходу = ЗапросПоДоходам.Выполнить().Выбрать();
		Пока ВыборкаПоДоходу.Следующий() Цикл
			Доход = Доход + ВыборкаПоДоходу.Сумма;
		КонецЦикла;
		Контейнер.Раздел36.П000360036103 = Доход;
		Контейнер.Раздел36.П000360036203 = Доход;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОписаниеПоказателей_РСВ1_2013Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100010003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100010004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014204", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100010005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014205", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100010006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014206", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100010007", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014007", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014107", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014207", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014307", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200001001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200001002", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210022103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210022203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210022303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210023103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210023203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210023303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210025003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210025103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210025203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210026003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210026103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210027103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210027203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210027303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210027403", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210027603", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020204", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021204", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210022104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210022204", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210022304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210023104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210023204", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210023304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210025004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210025104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210025204", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210026004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210026104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210027104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210027204", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210027304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210027404", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210027604", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020205", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021205", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210022105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210022205", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210022305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210023105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210023205", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210023305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210025005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210025105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210025205", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210026005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210026105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210027105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210027205", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210027305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210027405", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210027605", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020206", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021206", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210022106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210022206", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210022306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210023106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210023206", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210023306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210025006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210025106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210025206", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210026006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210026106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210027106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210027206", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210027306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210027406", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210027606", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220028003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220028103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220028203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220028403", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220028503", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220028004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220028104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220028204", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220028404", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220028504", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220028005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220028105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220028205", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220028405", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220028505", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220028006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220028106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220028206", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220028406", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220028506", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230029003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230029103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230029203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230029403", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230029503", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230029004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230029104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230029204", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230029404", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230029504", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230029005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230029105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230029205", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230029405", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230029505", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230029006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230029106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230029206", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230029406", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230029506", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310000101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310000102", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310000131", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310000141", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310000132", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310000142", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310000133", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310000143", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310000134", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310000144", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310000135", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310000145", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310000105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310000106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310000107", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310000108", Истина, Ложь);

КонецПроцедуры

Процедура ЗначенияПоказателей_РСВ1_2013Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ДатаКонцаПериодаОтчета = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
	Организация = ПараметрыОтчета.Организация;
	
	НачалоПериода = НачалоГода(ДатаКонцаПериодаОтчета);
	ОкончаниеПериода = КонецМесяца(ДатаКонцаПериодаОтчета);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода", КонецДня(ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецГода", КонецГода(ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ДалекаяДата", ДобавитьМесяц(НачалоГода(ДатаКонцаПериодаОтчета), 1200));
	Запрос.УстановитьПараметр("ГодОтчетногоПериода", Год(ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Месяц1", Месяц(ДатаКонцаПериодаОтчета) - 2);
	Запрос.УстановитьПараметр("Месяц2", Месяц(ДатаКонцаПериодаОтчета) - 1);
	Запрос.УстановитьПараметр("Месяц3", Месяц(ДатаКонцаПериодаОтчета));
	// Все данные отчета берутся по обособленному подразделению (указанной организации)
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОбщийНалоговыйРежим", СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "ОбщийНалоговыйРежим")); 
	Запрос.УстановитьПараметр("УпрощенныйНалоговыйРежим", СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "УпрощенныйНалоговыйРежим")); 
	Запрос.УстановитьПараметр("ОрганизацияИнвалидов", СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "ОрганизацияИнвалидов"));
	
	// ----------------------------------------------------------------------------------
	// ТЕКСТЫ ЗАПРОСОВ
	
	
	УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОДоходахИВзносах(НачалоПериода, КонецДня(ДатаКонцаПериодаОтчета), Организация, Запрос.МенеджерВременныхТаблиц);
	
	
	РасчетыСФондамиТекст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(РасчетыПоСтраховымВзносамОбороты.Период, МЕСЯЦ) КАК Период,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРСтраховая)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПФРСтраховаяРасход,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРНакопительная)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПФРНакопительнаяРасход,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРСтраховая)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПФРСтраховаяПриход,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРНакопительная)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПФРНакопительнаяПриход,
	|	0 КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахРасход,
	|	0 КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахРасход,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФФОМС)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФФОМСПриход,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФФОМС)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ТФОМС)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФФОМСРасход
	|ПОМЕСТИТЬ ВТРасчетыСФондом
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам КАК РасчетыПоСтраховымВзносамОбороты
	|ГДЕ
	|	РасчетыПоСтраховымВзносамОбороты.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
	|	И РасчетыПоСтраховымВзносамОбороты.ЭтоСтраховыеВзносы
	|	И РасчетыПоСтраховымВзносамОбороты.Организация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ПФРСтраховаяРасход), 0) КАК П000100014003,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц1
	|						ТОГДА РасчетыСФондом.ПФРСтраховаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)) - (СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|						ТОГДА РасчетыСФондом.ПФРСтраховаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014103,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц2
	|						ТОГДА РасчетыСФондом.ПФРСтраховаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)) - (СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц1
	|						ТОГДА РасчетыСФондом.ПФРСтраховаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014203,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц3
	|						ТОГДА РасчетыСФондом.ПФРСтраховаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)) - (СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц2
	|						ТОГДА РасчетыСФондом.ПФРСтраховаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014303,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ПФРНакопительнаяРасход), 0) КАК П000100014004,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц1
	|						ТОГДА РасчетыСФондом.ПФРНакопительнаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)) - (СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|						ТОГДА РасчетыСФондом.ПФРНакопительнаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014104,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц2
	|						ТОГДА РасчетыСФондом.ПФРНакопительнаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)) - (СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц1
	|						ТОГДА РасчетыСФондом.ПФРНакопительнаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014204,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц3
	|						ТОГДА РасчетыСФондом.ПФРНакопительнаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)) - (СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц2
	|						ТОГДА РасчетыСФондом.ПФРНакопительнаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014304,
	|	0 КАК П000100014005,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000100014105,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000100014205,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000100014305,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахРасход), 0) КАК П000100014006,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000100014106,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000100014206,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000100014306,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ФФОМСРасход), 0) КАК П000100014007,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц1
	|						ТОГДА РасчетыСФондом.ФФОМСРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)) - (СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|						ТОГДА РасчетыСФондом.ФФОМСРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014107,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц2
	|						ТОГДА РасчетыСФондом.ФФОМСРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)) - (СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц1
	|						ТОГДА РасчетыСФондом.ФФОМСРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014207,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц3
	|						ТОГДА РасчетыСФондом.ФФОМСРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)) - (СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц2
	|						ТОГДА РасчетыСФондом.ФФОМСРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014307
	|ИЗ
	|	ВТРасчетыСФондом КАК РасчетыСФондом";
	
	ОстаткиНаНачалоПериодаТекст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Остатки.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРСтраховая)
	|					ТОГДА Остатки.СуммаОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000100010003,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Остатки.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРНакопительная)
	|					ТОГДА Остатки.СуммаОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000100010004,
	|	0 КАК П000100010005,
	|	0 КАК П000100010006,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Остатки.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФФОМС)
	|					ТОГДА Остатки.СуммаОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) + ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Остатки.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ТФОМС)
	|					ТОГДА Остатки.СуммаОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000100010007
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам.Остатки(
	|			&НачалоОтчетногоПериода,
	|			Организация = &Организация
	|				И ЭтоСтраховыеВзносы) КАК Остатки";

	ЗастрахованныеЛицаТекст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Организации.ФизическоеЛицо), 0) КАК КолЗастрахованных
	|ИЗ
	|	ВТФизЛицаСОблагаемойБазой КАК Организации";
	
	
	// -------------------------------------------------------------------------------
	// Вывод данных в отчет
	
	// очищаем разделы
	ПоказателиОтчета = Новый Структура;
	ОписаниеПоказателей_РСВ1_2013Кв1(ПоказателиОтчета);
	ДанныеРаздела2 = Контейнер.Раздел2[0].Данные[0].Значение;
	Значение = Неопределено;
	Для каждого КлючИЗначение Из ДанныеРаздела2 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			ДанныеРаздела2[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	СтруктураПолейРаздела2 = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеРаздела2); // копия для создания других страниц
	
	Контейнер.Раздел2.Очистить();	
	СтраницаРаздела2 = Контейнер.Раздел2.Добавить(); // первая страница
	СтраницаРаздела2.Данные.Добавить(ДанныеРаздела2);
	
	ОписаниеТаблиц = Новый Структура("Раздел21Доходы2013,Раздел21Численность2013,Раздел21Взносы2013,Раздел21Тарифы2013,Раздел22Доходы2013,Раздел22Численность2013,Раздел22Взносы2013,Раздел312013,ВсегоЗастрахованных");
	РасчетПоказателей_РСВ1_2013Кв1(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц);
	
	// Титульный лист
	
	Результат = ОписаниеТаблиц.ВсегоЗастрахованных;
	Если Результат.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Титульный,Результат[0]);
	КонецЕсли;
	
	// Раздел 1 
	
	Запрос.Текст = РасчетыСФондамиТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел1, Выборка);
	КонецЕсли;
	
	Запрос.Текст = ОстаткиНаНачалоПериодаТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел1, Выборка);
	КонецЕсли;
	
	// Разделы 2 и 3.1
	
	
	// Раздел 2.1 
	
	
	ВсеТарифы = ОписаниеТаблиц.Раздел21Тарифы2013;
	ТаблицаДоходов = ОписаниеТаблиц.Раздел21Доходы2013;
	ТаблицаКоличеств = ОписаниеТаблиц.Раздел21Численность2013;
	ТаблицаВзносов = ОписаниеТаблиц.Раздел21Взносы2013;
	КоличествоТарифов = ВсеТарифы.Количество();
	ИндексПоследнейСтроки = КоличествоТарифов - 1;
	
	УпрощенныйНалоговыйРежимПроизводство = СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "УпрощенныйНалоговыйРежимПроизводство");
	
	ЗаполнятьРаздел36 = Ложь;
	
	Для каждого СтрокаРезультата Из ВсеТарифы Цикл
		
		Если СтрокаРезультата.ВидТарифаСтраховыхВзносов = УпрощенныйНалоговыйРежимПроизводство Тогда
			ЗаполнятьРаздел36 = Истина;
		КонецЕсли;
			
		СтрокаДоходов = ТаблицаДоходов.Найти(СтрокаРезультата.ВидТарифаСтраховыхВзносов,"ВидТарифаСтраховыхВзносов");
		СтрокаКоличеств = ТаблицаКоличеств.Найти(СтрокаРезультата.ВидТарифаСтраховыхВзносов,"ВидТарифаСтраховыхВзносов");
		СтрокаВзносов = ТаблицаВзносов.Найти(СтрокаРезультата.ВидТарифаСтраховыхВзносов,"ВидТарифаСтраховыхВзносов");
		
		ДанныеРаздела2.П000200001001 = СтрокаРезультата.КодТарифа;
		
		Если СтрокаДоходов = Неопределено и СтрокаВзносов = Неопределено Тогда // по текущему тарифу нет данных
			Если КоличествоТарифов > 1 И ВсеТарифы.Индекс(СтрокаРезультата) = ИндексПоследнейСтроки Тогда
				Контейнер.Раздел2.Удалить(СтраницаРаздела2);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДоходов <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеРаздела2,СтрокаДоходов);
		КонецЕсли;
		Если СтрокаКоличеств <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеРаздела2,СтрокаКоличеств);
		КонецЕсли;
		Если СтрокаВзносов <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеРаздела2,СтрокаВзносов);
		КонецЕсли;
		
		// если применяемых в орг. тарифов больше 1, тогда создадим еще одну страницу для раздела 2
		Если ВсеТарифы.Индекс(СтрокаРезультата) < ИндексПоследнейСтроки Тогда  
			ДанныеРаздела2 = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейРаздела2);
			СтраницаРаздела2 = Контейнер.Раздел2.Добавить();
			СтраницаРаздела2.Данные.Добавить(ДанныеРаздела2);
		КонецЕсли;
		
	КонецЦикла;
	
	// Разделы 2.2 и 2.3 
	
	Результат = ОписаниеТаблиц.Раздел22Доходы2013;
	Если Результат.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел22, Результат[0]);
	КонецЕсли;
	
	Результат = ОписаниеТаблиц.Раздел22Численность2013;
	Если Результат.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел22, Результат[0]);
	КонецЕсли;
	
	Результат = ОписаниеТаблиц.Раздел22Взносы2013;
	Если Результат.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел22, Результат[0]);
	КонецЕсли;
	
	// Раздел 3.1
	
	ВременнаяТаблица = ОписаниеТаблиц.Раздел312013;
	Контейнер.Раздел31_ДанныеДопСтрок.Очистить();
	НомерСтроки = 1;
	Для каждого СтрокаДанных Из ВременнаяТаблица Цикл
		СтрокаКонтейнера = Контейнер.Раздел31_ДанныеДопСтрок.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКонтейнера, СтрокаДанных);
		СтрокаКонтейнера.П000310000101 = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Если ЗаполнятьРаздел36 Тогда
		// Раздел 3.6
		Доход = 0;
		// Определяем, необходимо ли формировать доходы
		ЗапросПоДоходам = Новый Запрос;
		
		// Добавляем периода для анализа заполненности доходов
		Квартал = НачалоКвартала(НачалоПериода);
		// первый месяц
		ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(Квартал,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период ПОМЕСТИТЬ ВТПериодыКварталов";
		Квартал = НачалоКвартала(ДобавитьМесяц(Квартал,3));
		// прибавим остальные месяцы
		Пока КонецДня(Квартал) < КонецМесяца(ДатаКонцаПериодаОтчета) Цикл
			ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(Квартал,"ДФ=гггг,М,д,Ч,м,с") + ")";
			Квартал = НачалоКвартала(ДобавитьМесяц(Квартал,3));
		КонецЦикла;
		ЗапросПоДоходам.Текст = ПериодыТекст;
		
		
		ОсновнойТекстЗапросаПоДоходам = "ВЫБРАТЬ
		|	ПериодыКварталов.Период КАК Период,
		|	ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.ДоходБазаОборот, 0) КАК Сумма
		|ИЗ
		|	ВТПериодыКварталов КАК ПериодыКварталов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, Квартал, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
		|		ПО (КнигаУчетаДоходовИРасходовОбороты.Период = ПериодыКварталов.Период)";
		
		ЗапросПоДоходам.Текст =ПериодыТекст +"; "+ ОсновнойТекстЗапросаПоДоходам;
		ЗапросПоДоходам.УстановитьПараметр("Организация", Организация);
		ЗапросПоДоходам.УстановитьПараметр("НачалоПериода", НачалоПериода);
		ЗапросПоДоходам.УстановитьПараметр("КонецПериода", КонецДня(ДатаКонцаПериодаОтчета));
		ВыборкаПоДоходу = ЗапросПоДоходам.Выполнить().Выбрать();
		
		НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
		УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
		МенеджерВТДляДоходов = Новый МенеджерВременныхТаблиц;
		РегламентированнаяОтчетностьУСН.ПолучитьВТТаблицуКурсовВалютЗаПериод(МенеджерВТДляДоходов, НачалоКвартала(ДатаКонцаПериодаОтчета),КонецКвартала(ДатаКонцаПериодаОтчета), НациональнаяВалюта, УчетВалютныхОпераций);
		Пока ВыборкаПоДоходу.Следующий() Цикл
			Если ВыборкаПоДоходу.Сумма = 0 Тогда
				// Формируем доход за отчетный период
				// 
				Результат = Новый Структура;
				Результат.Вставить("ДокументФормирования", Документы.ЗаписиУСН.ПустаяСсылка());
				Результат.Вставить("ЕстьОшибки", Ложь);
				Результат.Вставить("ЕстьПредупреждения", Ложь);
				Результат.Вставить("ДополнительнаяИнформация", "");
				
				Результат.ДокументФормирования = РегламентированнаяОтчетностьУСН.ПолучитьДокументЗаписейУСНВПериодеПоВиду(
					Организация,
					КонецКвартала(ДатаКонцаПериодаОтчета),
					Перечисления.ВидыЗаписейФормированийКУДиР.ДоходыПрочие);
				
				РегламентированнаяОтчетностьУСН.ВыполнитьФормированиеПоДоходам(
					Организация,
					КонецКвартала(ДатаКонцаПериодаОтчета),
					Результат,
					МенеджерВТДляДоходов);
			КонецЕсли;
		КонецЦикла;
		
		ВыборкаПоДоходу = ЗапросПоДоходам.Выполнить().Выбрать();
		Пока ВыборкаПоДоходу.Следующий() Цикл
			Доход = Доход + ВыборкаПоДоходу.Сумма;
		КонецЦикла;
		Контейнер.Раздел36.П000360036103 = Доход;
		Контейнер.Раздел36.П000360036203 = Доход;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетПоказателей_РСВ1_2013Кв1(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные = Ложь)
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода", КонецДня(ОкончаниеПериода));
	Запрос.УстановитьПараметр("КонецГода", КонецГода(ОкончаниеПериода));
	Запрос.УстановитьПараметр("ДалекаяДата", ДобавитьМесяц(НачалоГода(ОкончаниеПериода), 1200));
	Запрос.УстановитьПараметр("ГодОтчетногоПериода", Год(ОкончаниеПериода));
	Запрос.УстановитьПараметр("Месяц1", Месяц(ОкончаниеПериода) - 2);
	Запрос.УстановитьПараметр("Месяц2", Месяц(ОкончаниеПериода) - 1);
	Запрос.УстановитьПараметр("Месяц3", Месяц(ОкончаниеПериода));
	// Все данные отчета берутся по обособленному подразделению (указанной организации)
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОбщийНалоговыйРежим", СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "ОбщийНалоговыйРежим")); 
	Запрос.УстановитьПараметр("УпрощенныйНалоговыйРежим", СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "УпрощенныйНалоговыйРежим")); 
	Запрос.УстановитьПараметр("ОрганизацияИнвалидов", СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "ОрганизацияИнвалидов"));
	
	// ----------------------------------------------------------------------------------
	// ТЕКСТЫ ЗАПРОСОВ
	
	
	УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОДоходахИВзносах(НачалоПериода, КонецДня(ОкончаниеПериода), Организация, Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Месяц1 КАК МесяцПериода
	|ПОМЕСТИТЬ ВТМесяцыОтчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Месяц2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Месяц3";
	Запрос.Выполнить();
	
	// Титульный лист
	
	Если ОписаниеТаблиц.Свойство("ВсегоЗастрахованных") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Организации.ФизическоеЛицо), 0) КАК КолЗастрахованных
		|ИЗ
		|	ВТФизЛицаСОблагаемойБазой КАК Организации";
		ОписаниеТаблиц.ВсегоЗастрахованных = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	
	// Раздел 2.1 
	
	Если ОписаниеТаблиц.Свойство("Раздел21Тарифы2013") Или ОписаниеТаблиц.Свойство("Раздел21Доходы2013") Или ОписаниеТаблиц.Свойство("Раздел21Численность2013") Или ОписаниеТаблиц.Свойство("Раздел312013") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОДоходах.Период КАК Период,
		|	СведенияОДоходах.ФизическоеЛицо,
		|	СведенияОДоходах.ФизическоеЛицоНаименование,
		|	ГОД(Сотрудники.ДатаРождения) КАК ГодРождения,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
		|	ЕСТЬNULL(КодыВидовТарифаСтраховыхВзносов.КодПФР, """") КАК КодТарифа,
		|	СУММА(СведенияОДоходах.БазаПФР) КАК ОблагаемаяБазаПФР,
		|	СУММА(СведенияОДоходах.БазаФОМС) КАК ОблагаемаяБазаФОМС,
		|	СУММА(СведенияОДоходах.НачисленоВсего) КАК НачисленоВсего,
		|	СУММА(СведенияОДоходах.СуммаПревысившаяПределПФР) КАК СуммаПревысившаяПределПФР,
		|	СУММА(СведенияОДоходах.СуммаПревысившаяПределФОМС) КАК СуммаПревысившаяПределФОМС,
		|	СУММА(СведенияОДоходах.НеОблагаетсяПФР - СведенияОДоходах.РасходыПоАвторскимПФР) КАК НеОблагается,
		|	СУММА(СведенияОДоходах.НеОблагаетсяФОМС - СведенияОДоходах.РасходыПоАвторскимФОМС) КАК НеОблагаетсяФОМС,
		|	СУММА(СведенияОДоходах.ИсчисленоПФРССуммПревышения) КАК ИсчисленоПФРССуммПревышения,
		|	СУММА(СведенияОДоходах.РасходыПоАвторскимПФР) КАК РасходыПоАвторскимПФР,
		|	СУММА(СведенияОДоходах.РасходыПоАвторскимФОМС) КАК РасходыПоАвторскимФОМС
		|ПОМЕСТИТЬ ВТДоходыВзносов
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО СведенияОДоходах.ФизическоеЛицо = Сотрудники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКодыВидовТарифаСтраховыхВзносов КАК КодыВидовТарифаСтраховыхВзносов
		|		ПО (СведенияОДоходах.ВидТарифаСтраховыхВзносов = КодыВидовТарифаСтраховыхВзносов.ВидТарифаСтраховыхВзносов)
		|			И (ГОД(СведенияОДоходах.Период) МЕЖДУ КодыВидовТарифаСтраховыхВзносов.ГодС И КодыВидовТарифаСтраховыхВзносов.ГодПо)
		|ГДЕ
		|	СведенияОДоходах.Организация = &Организация
		|	И СведенияОДоходах.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				Организации.ФизическоеЛицо
		|			ИЗ
		|				ВТФизЛицаСОблагаемойБазой КАК Организации)
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ФизическоеЛицо,
		|	СведенияОДоходах.ФизическоеЛицоНаименование,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	ГОД(Сотрудники.ДатаРождения),
		|	ЕСТЬNULL(КодыВидовТарифаСтраховыхВзносов.КодПФР, """")
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	ВидТарифаСтраховыхВзносов
		|;";
		
		Запрос.Выполнить();
	КонецЕсли;
	
	Если ОписаниеТаблиц.Свойство("Раздел21Тарифы2013") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Доходы.КодТарифа,
		|	Доходы.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов
		|ИЗ
		|	ВТДоходыВзносов КАК Доходы
		|
		|УПОРЯДОЧИТЬ ПО
		|	Доходы.КодТарифа";
		ОписаниеТаблиц.Раздел21Тарифы2013 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	Если ОписаниеТаблиц.Свойство("Раздел21Доходы2013") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Доходы.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
		|	Доходы.КодТарифа КАК КодТарифа,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения < 1967
		|					ТОГДА Доходы.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020103,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения > 1966
		|					ТОГДА Доходы.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020203,
		|	0 КАК П000210020303,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения < 1967
		|						И МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020104,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения > 1966
		|						И МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020204,
		|	0 КАК П000210020304,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения < 1967
		|						И МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020105,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения > 1966
		|						И МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020205,
		|	0 КАК П000210020305,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения < 1967
		|						И МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020106,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения > 1966
		|						И МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020206,
		|	0 КАК П000210020306,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения < 1967
		|					ТОГДА Доходы.НеОблагается
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021103,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения > 1966
		|					ТОГДА Доходы.НеОблагается
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021203,
		|	0 КАК П000210021303,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения < 1967
		|						И МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.НеОблагается
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021104,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения > 1966
		|						И МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.НеОблагается
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021204,
		|	0 КАК П000210021304,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения < 1967
		|						И МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.НеОблагается
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021105,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения > 1966
		|						И МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.НеОблагается
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021205,
		|	0 КАК П000210021305,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения < 1967
		|						И МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.НеОблагается
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021106,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения > 1966
		|						И МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.НеОблагается
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021206,
		|	0 КАК П000210021306,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения < 1967
		|					ТОГДА Доходы.РасходыПоАвторскимПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210022103,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения > 1966
		|					ТОГДА Доходы.РасходыПоАвторскимПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210022203,
		|	0 КАК П000210022303,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения < 1967
		|						И МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.РасходыПоАвторскимПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210022104,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения > 1966
		|						И МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.РасходыПоАвторскимПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210022204,
		|	0 КАК П000210022304,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения < 1967
		|						И МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.РасходыПоАвторскимПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210022105,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения > 1966
		|						И МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.РасходыПоАвторскимПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210022205,
		|	0 КАК П000210022305,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения < 1967
		|						И МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.РасходыПоАвторскимПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210022106,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения > 1966
		|						И МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.РасходыПоАвторскимПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210022206,
		|	0 КАК П000210022306,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения < 1967
		|					ТОГДА Доходы.СуммаПревысившаяПределПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210023103,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения > 1966
		|					ТОГДА Доходы.СуммаПревысившаяПределПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210023203,
		|	0 КАК П000210023303,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения < 1967
		|						И МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.СуммаПревысившаяПределПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210023104,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения > 1966
		|						И МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.СуммаПревысившаяПределПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210023204,
		|	0 КАК П000210023304,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения < 1967
		|						И МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.СуммаПревысившаяПределПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210023105,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения > 1966
		|						И МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.СуммаПревысившаяПределПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210023205,
		|	0 КАК П000210023305,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения < 1967
		|						И МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.СуммаПревысившаяПределПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210023106,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Доходы.ГодРождения > 1966
		|						И МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.СуммаПревысившаяПределПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210023206,
		|	0 КАК П000210023306,
		|	ЕСТЬNULL(СУММА(Доходы.ИсчисленоПФРССуммПревышения), 0) КАК П000210025203,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.ИсчисленоПФРССуммПревышения
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210025204,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.ИсчисленоПФРССуммПревышения
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210025205,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.ИсчисленоПФРССуммПревышения
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210025206,
		|	ЕСТЬNULL(СУММА(Доходы.НачисленоВсего), 0) КАК П000210027103,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210027104,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210027105,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210027106,
		|	ЕСТЬNULL(СУММА(Доходы.НеОблагаетсяФОМС), 0) КАК П000210027203,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.НеОблагаетсяФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210027204,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.НеОблагаетсяФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210027205,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.НеОблагаетсяФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210027206,
		|	ЕСТЬNULL(СУММА(Доходы.РасходыПоАвторскимФОМС), 0) КАК П000210027303,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.РасходыПоАвторскимФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210027304,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.РасходыПоАвторскимФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210027305,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.РасходыПоАвторскимФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210027306,
		|	ЕСТЬNULL(СУММА(Доходы.СуммаПревысившаяПределФОМС), 0) КАК П000210027403,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.СуммаПревысившаяПределФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210027404,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.СуммаПревысившаяПределФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210027405,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.СуммаПревысившаяПределФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210027406
		|ИЗ
		|	ВТДоходыВзносов КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.ВидТарифаСтраховыхВзносов,
		|	Доходы.КодТарифа
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидТарифаСтраховыхВзносов
		|;";
		ОписаниеТаблиц.Раздел21Доходы2013 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	
	Если ОписаниеТаблиц.Свойство("Раздел21Численность2013") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Доходы.Период,
		|	Доходы.ФизическоеЛицо,
		|	Доходы.ВидТарифаСтраховыхВзносов
		|ПОМЕСТИТЬ ВТЛицаСПревышениемБазы
		|ИЗ
		|	ВТДоходыВзносов КАК Доходы
		|ГДЕ
		|	Доходы.СуммаПревысившаяПределПФР > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЛицаСПревышениемБазы.ФизическоеЛицо) КАК ВсегоФизлиц,
		|	ЛицаСПревышениемБазы.ВидТарифаСтраховыхВзносов
		|ПОМЕСТИТЬ ВТЛицаСПревышениемБазыЗаВсеМесяцы
		|ИЗ
		|	ВТЛицаСПревышениемБазы КАК ЛицаСПревышениемБазы
		|
		|СГРУППИРОВАТЬ ПО
		|	ЛицаСПревышениемБазы.ВидТарифаСтраховыхВзносов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЛицаСПревышениемБазы.Период,
		|	ЛицаСПревышениемБазы.ВидТарифаСтраховыхВзносов,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЛицаСПревышениемБазы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЛицаСПревышениемБазыЗаОтдельныеМесяцы
		|ИЗ
		|	ВТЛицаСПревышениемБазы КАК ЛицаСПревышениемБазы
		|
		|СГРУППИРОВАТЬ ПО
		|	ЛицаСПревышениемБазы.ВидТарифаСтраховыхВзносов,
		|	ЛицаСПревышениемБазы.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Доходы.Период,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доходы.ФизическоеЛицо) КАК ВсегоФизлиц,
		|	Доходы.ВидТарифаСтраховыхВзносов
		|ПОМЕСТИТЬ ВТЛицаСВзносамиЗаОтдельныеМесяцы
		|ИЗ
		|	ВТДоходыВзносов КАК Доходы
		|ГДЕ
		|	Доходы.ОблагаемаяБазаПФР <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.Период,
		|	Доходы.ВидТарифаСтраховыхВзносов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доходы.ФизическоеЛицо) КАК ВсегоФизлиц,
		|	Доходы.ВидТарифаСтраховыхВзносов
		|ПОМЕСТИТЬ ВТЛицаСВзносамиЗаВсеМесяцы
		|ИЗ
		|	ВТДоходыВзносов КАК Доходы
		|ГДЕ
		|	Доходы.ОблагаемаяБазаПФР <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.ВидТарифаСтраховыхВзносов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Тарифы.ВидТарифаСтраховыхВзносов,
		|	МАКСИМУМ(ЕСТЬNULL(ЛицаСВзносамиЗаВсеМесяцы.ВсегоФизлиц, 0)) КАК П000210026003,
		|	МАКСИМУМ(ЕСТЬNULL(ЛицаСПревышениемБазыЗаВсеМесяцы.ВсегоФизлиц, 0)) КАК П000210026103,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВзносамиЗаОтдельныеМесяцы.Период) = &Месяц1
		|				ТОГДА ЕСТЬNULL(ЛицаСВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000210026004,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВзносамиЗаОтдельныеМесяцы.Период) = &Месяц2
		|				ТОГДА ЕСТЬNULL(ЛицаСВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000210026005,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВзносамиЗаОтдельныеМесяцы.Период) = &Месяц3
		|				ТОГДА ЕСТЬNULL(ЛицаСВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000210026006,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.Период) = &Месяц1
		|				ТОГДА ЕСТЬNULL(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000210026104,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.Период) = &Месяц2
		|				ТОГДА ЕСТЬNULL(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000210026105,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.Период) = &Месяц3
		|				ТОГДА ЕСТЬNULL(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000210026106
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Доходы.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов
		|	ИЗ
		|		ВТДоходыВзносов КАК Доходы) КАК Тарифы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМесяцыОтчета КАК МесяцыОтчета
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСВзносамиЗаВсеМесяцы КАК ЛицаСВзносамиЗаВсеМесяцы
		|		ПО Тарифы.ВидТарифаСтраховыхВзносов = ЛицаСВзносамиЗаВсеМесяцы.ВидТарифаСтраховыхВзносов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСПревышениемБазыЗаВсеМесяцы КАК ЛицаСПревышениемБазыЗаВсеМесяцы
		|		ПО Тарифы.ВидТарифаСтраховыхВзносов = ЛицаСПревышениемБазыЗаВсеМесяцы.ВидТарифаСтраховыхВзносов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСВзносамиЗаОтдельныеМесяцы КАК ЛицаСВзносамиЗаОтдельныеМесяцы
		|		ПО Тарифы.ВидТарифаСтраховыхВзносов = ЛицаСВзносамиЗаОтдельныеМесяцы.ВидТарифаСтраховыхВзносов
		|			И (МесяцыОтчета.МесяцПериода = МЕСЯЦ(ЛицаСВзносамиЗаОтдельныеМесяцы.Период))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСПревышениемБазыЗаОтдельныеМесяцы КАК ЛицаСПревышениемБазыЗаОтдельныеМесяцы
		|		ПО Тарифы.ВидТарифаСтраховыхВзносов = ЛицаСПревышениемБазыЗаОтдельныеМесяцы.ВидТарифаСтраховыхВзносов
		|			И (МесяцыОтчета.МесяцПериода = МЕСЯЦ(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.Период))
		|
		|СГРУППИРОВАТЬ ПО
		|	Тарифы.ВидТарифаСтраховыхВзносов
		|
		|УПОРЯДОЧИТЬ ПО
		|	Тарифы.ВидТарифаСтраховыхВзносов";
		
		ОписаниеТаблиц.Раздел21Численность2013 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	Если ОписаниеТаблиц.Свойство("Раздел21Взносы2013") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВзносыФизлиц.ПФРСтраховая), 0) КАК П000210025003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц1
		|					ТОГДА ВзносыФизлиц.ПФРСтраховая
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210025004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц2
		|					ТОГДА ВзносыФизлиц.ПФРСтраховая
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210025005,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц3
		|					ТОГДА ВзносыФизлиц.ПФРСтраховая
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210025006,
		|	ЕСТЬNULL(СУММА(ВзносыФизлиц.ПФРНакопительная), 0) КАК П000210025103,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц1
		|					ТОГДА ВзносыФизлиц.ПФРНакопительная
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210025104,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц2
		|					ТОГДА ВзносыФизлиц.ПФРНакопительная
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210025105,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц3
		|					ТОГДА ВзносыФизлиц.ПФРНакопительная
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210025106,
		|	ЕСТЬNULL(СУММА(ВзносыФизлиц.ФФОМС), 0) КАК П000210027603,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц1
		|					ТОГДА ВзносыФизлиц.ФФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210027604,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц2
		|					ТОГДА ВзносыФизлиц.ФФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210027605,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц3
		|					ТОГДА ВзносыФизлиц.ФФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210027606,
		|	ВзносыФизлиц.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК ВзносыФизлиц
		|ГДЕ
		|	ВзносыФизлиц.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				Организации.ФизическоеЛицо
		|			ИЗ
		|				ВТФизЛицаСОблагаемойБазой КАК Организации)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзносыФизлиц.ВидТарифаСтраховыхВзносов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидТарифаСтраховыхВзносов";
		ОписаниеТаблиц.Раздел21Взносы2013 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	
	// Разделы 2.2 и 2.3 
	Если ОписаниеТаблиц.Свойство("Раздел22Доходы2013") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОДоходах.Период КАК Период,
		|	СведенияОДоходах.ФизическоеЛицо,
		|	0 КАК НачисленоВсегоЗаЗанятыхНаПодземныхИВредныхРаботах,
		|	0 КАК НачисленоВсегоЗаЗанятыхНаТяжелыхИПрочихРаботах,
		|	0 КАК НеОблагаетсяЗаЗанятыхНаПодземныхИВредныхРаботах,
		|	0 КАК НеОблагаетсяЗаЗанятыхНаТяжелыхИПрочихРаботах,
		|	0 КАК РасходыПоАвторскимЗаЗанятыхНаПодземныхИВредныхРаботах,
		|	0 КАК РасходыПоАвторскимЗаЗанятыхНаТяжелыхИПрочихРаботах,
		|	0 КАК ОблагаемаяБазаПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
		|	0 КАК ОблагаемаяБазаПФРЗаЗанятыхНаТяжелыхИПрочихРаботах
		|ПОМЕСТИТЬ ВТДоходыВредныхВзносов
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
		|ГДЕ
		|	СведенияОДоходах.Организация = &Организация
		|	И СведенияОДоходах.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				Организации.ФизическоеЛицо
		|			ИЗ
		|				ВТФизЛицаСОблагаемойБазой КАК Организации)
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ФизическоеЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(Доходы.НачисленоВсегоЗаЗанятыхНаПодземныхИВредныхРаботах), 0) КАК П000220028003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.НачисленоВсегоЗаЗанятыхНаПодземныхИВредныхРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000220028004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.НачисленоВсегоЗаЗанятыхНаПодземныхИВредныхРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000220028005,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.НачисленоВсегоЗаЗанятыхНаПодземныхИВредныхРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000220028006,
		|	ЕСТЬNULL(СУММА(Доходы.НеОблагаетсяЗаЗанятыхНаПодземныхИВредныхРаботах), 0) КАК П000220028103,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.НеОблагаетсяЗаЗанятыхНаПодземныхИВредныхРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000220028104,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.НеОблагаетсяЗаЗанятыхНаПодземныхИВредныхРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000220028105,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.НеОблагаетсяЗаЗанятыхНаПодземныхИВредныхРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000220028106,
		|	ЕСТЬNULL(СУММА(Доходы.РасходыПоАвторскимЗаЗанятыхНаПодземныхИВредныхРаботах), 0) КАК П000220028203,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.РасходыПоАвторскимЗаЗанятыхНаПодземныхИВредныхРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000220028204,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.РасходыПоАвторскимЗаЗанятыхНаПодземныхИВредныхРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000220028205,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.РасходыПоАвторскимЗаЗанятыхНаПодземныхИВредныхРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000220028206,
		|	ЕСТЬNULL(СУММА(Доходы.НачисленоВсегоЗаЗанятыхНаТяжелыхИПрочихРаботах), 0) КАК П000230029003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.НачисленоВсегоЗаЗанятыхНаТяжелыхИПрочихРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000230029004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.НачисленоВсегоЗаЗанятыхНаТяжелыхИПрочихРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000230029005,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.НачисленоВсегоЗаЗанятыхНаТяжелыхИПрочихРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000230029006,
		|	ЕСТЬNULL(СУММА(Доходы.НеОблагаетсяЗаЗанятыхНаТяжелыхИПрочихРаботах), 0) КАК П000230029103,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.НеОблагаетсяЗаЗанятыхНаТяжелыхИПрочихРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000230029104,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.НеОблагаетсяЗаЗанятыхНаТяжелыхИПрочихРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000230029105,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.НеОблагаетсяЗаЗанятыхНаТяжелыхИПрочихРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000230029106,
		|	ЕСТЬNULL(СУММА(Доходы.РасходыПоАвторскимЗаЗанятыхНаТяжелыхИПрочихРаботах), 0) КАК П000230029203,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.РасходыПоАвторскимЗаЗанятыхНаТяжелыхИПрочихРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000230029204,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.РасходыПоАвторскимЗаЗанятыхНаТяжелыхИПрочихРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000230029205,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.РасходыПоАвторскимЗаЗанятыхНаТяжелыхИПрочихРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000230029206
		|ИЗ
		|	ВТДоходыВредныхВзносов КАК Доходы
		|;";
		ОписаниеТаблиц.Раздел22Доходы2013 = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	Если ОписаниеТаблиц.Свойство("Раздел22Численность2013") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Взносы.Период,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взносы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЛицаСВреднымиВзносамиЗаОтдельныеМесяцы
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК Взносы
		|ГДЕ
		|	Ложь
		|
		|СГРУППИРОВАТЬ ПО
		|	Взносы.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Взносы.Период,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взносы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК Взносы
		|ГДЕ
		|	Ложь
		|
		|СГРУППИРОВАТЬ ПО
		|	Взносы.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взносы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЛицаСВреднымиВзносамиЗаВсеМесяцы
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК Взносы
		|ГДЕ
		|	Ложь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взносы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЛицаСТяжелымиВзносамиЗаВсеМесяцы
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК Взносы
		|ГДЕ
		|	Ложь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЕСТЬNULL(ЛицаСВреднымиВзносамиЗаВсеМесяцы.ВсегоФизлиц, 0)) КАК П000220028503,
		|	МАКСИМУМ(ЕСТЬNULL(ЛицаСТяжелымиВзносамиЗаВсеМесяцы.ВсегоФизлиц, 0)) КАК П000230029503,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц1
		|				ТОГДА ЕСТЬNULL(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000220028504,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц2
		|				ТОГДА ЕСТЬNULL(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000220028505,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц3
		|				ТОГДА ЕСТЬNULL(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000220028506,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц1
		|				ТОГДА ЕСТЬNULL(ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000230029504,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц2
		|				ТОГДА ЕСТЬNULL(ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000230029505,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц3
		|				ТОГДА ЕСТЬNULL(ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000230029506
		|ИЗ
		|	ВТМесяцыОтчета КАК МесяцыОтчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСВреднымиВзносамиЗаВсеМесяцы КАК ЛицаСВреднымиВзносамиЗаВсеМесяцы
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСТяжелымиВзносамиЗаВсеМесяцы КАК ЛицаСТяжелымиВзносамиЗаВсеМесяцы
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСВреднымиВзносамиЗаОтдельныеМесяцы КАК ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы
		|		ПО МесяцыОтчета.МесяцПериода = ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы КАК ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы
		|		ПО МесяцыОтчета.МесяцПериода = ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.Период
		|;";
		ОписаниеТаблиц.Раздел22Численность2013 = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	Если ОписаниеТаблиц.Свойство("Раздел22Взносы2013") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	0 КАК П000220028403,
		|	0 КАК П000220028404,
		|	0 КАК П000220028405,
		|	0 КАК П000220028406,
		|	0 КАК П000230029403,
		|	0 КАК П000230029404,
		|	0 КАК П000230029405,
		|	0 КАК П000230029406
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК ВзносыФизлиц
		|ГДЕ
		|	ВзносыФизлиц.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				Организации.ФизическоеЛицо
		|			ИЗ
		|				ВТФизЛицаСОблагаемойБазой КАК Организации)
		|;";
		ОписаниеТаблиц.Раздел22Взносы2013 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	
	// Раздел 3.1
	Если ОписаниеТаблиц.Свойство("Раздел312013") Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОДоходах.ФизическоеЛицо,
		|	"""" КАК П000310000102,
		|	"""" КАК ФИО,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК П000310000131,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК П000310000132,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК П000310000141,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК П000310000142,
		|	ЕСТЬNULL(СУММА(СведенияОДоходах.НачисленоВсего), 0) КАК П000310000105,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц1
		|					ТОГДА СведенияОДоходах.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000310000106,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц2
		|					ТОГДА СведенияОДоходах.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000310000107,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц3
		|					ТОГДА СведенияОДоходах.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000310000108
		|ИЗ
		|	ВТДоходыВзносов КАК СведенияОДоходах
		|ГДЕ
		|	Ложь
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.ФизическоеЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	П000310000102";
		ОписаниеТаблиц.Раздел312013 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОписаниеПоказателей_РСВ1_2014Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100010003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100010004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014204", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100010005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014205", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100010006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014206", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100010007", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014007", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014107", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014207", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014307", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100010008", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014008", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014108", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014208", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014308", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210001001", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020303", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020603", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020703", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020803", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021303", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021503", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020104", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020204", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020304", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020504", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020604", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020704", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020804", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021104", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021204", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021304", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021504", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020105", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020205", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020305", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020505", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020605", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020705", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020805", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021105", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021205", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021305", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021505", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020006", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020106", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020206", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020306", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020506", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020606", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020706", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020806", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021106", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021006", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021206", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021306", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021506", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022104", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022404", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022504", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022105", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022405", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022505", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022006", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022106", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022406", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022506", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023104", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023404", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023504", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023105", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023405", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023505", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023006", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023106", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023406", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023506", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024104", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024404", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024504", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024105", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024405", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024505", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024006", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024106", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024406", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024506", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024603", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024703", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025303", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025603", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025703", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025803", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025903", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026303", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026803", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026903", Истина, Истина);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024604", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024704", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025104", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025204", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025304", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025604", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025704", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025804", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025904", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026204", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026304", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026404", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026504", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026804", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026904", Истина, Истина);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024605", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024705", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025105", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025205", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025305", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025605", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025705", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025805", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025905", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026205", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026305", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026405", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026505", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026805", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026905", Истина, Истина);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024606", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024706", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025006", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025106", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025206", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025306", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025606", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025706", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025806", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025906", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026206", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026306", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026406", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026506", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026806", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026906", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400000101", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400000102", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400000103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400000104", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400000105", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400000106", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400000107", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400000108", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400000109", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400000110", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400000111", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400000112", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400000113", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400000114", Истина, Истина);
	
КонецПроцедуры

Процедура ЗначенияПоказателей_РСВ1_2014Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ДатаКонцаПериодаОтчета = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
	Организация = ПараметрыОтчета.Организация;
	
	НачалоПериода = НачалоГода(ДатаКонцаПериодаОтчета);
	ОкончаниеПериода = КонецМесяца(ДатаКонцаПериодаОтчета);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаОбъединенияСтраховойИНакопительнойЧастейВзносовПФР", УчетСтраховыхВзносов.ДатаОбъединенияСтраховойИНакопительнойЧастейВзносовПФР());
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода", КонецДня(ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецГода", КонецГода(ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ДалекаяДата", ДобавитьМесяц(НачалоГода(ДатаКонцаПериодаОтчета), 1200));
	Запрос.УстановитьПараметр("ГодОтчетногоПериода", Год(ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Месяц1", Месяц(ДатаКонцаПериодаОтчета) - 2);
	Запрос.УстановитьПараметр("Месяц2", Месяц(ДатаКонцаПериодаОтчета) - 1);
	Запрос.УстановитьПараметр("Месяц3", Месяц(ДатаКонцаПериодаОтчета));
	// Все данные отчета берутся по обособленному подразделению (указанной организации)
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОбщийНалоговыйРежим", СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "ОбщийНалоговыйРежим")); 
	Запрос.УстановитьПараметр("УпрощенныйНалоговыйРежим", СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "УпрощенныйНалоговыйРежим")); 
	Запрос.УстановитьПараметр("ОрганизацияИнвалидов", СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "ОрганизацияИнвалидов"));
	
	// ----------------------------------------------------------------------------------
	// ТЕКСТЫ ЗАПРОСОВ
	
	
	УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОДоходахИВзносах(НачалоПериода, КонецДня(ДатаКонцаПериодаОтчета), Организация, Запрос.МенеджерВременныхТаблиц);
	
	
	
	РасчетыСФондамиТекст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(РасчетыПоСтраховымВзносамОбороты.Период, МЕСЯЦ) КАК Период,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРПоСуммарномуТарифу)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПФРПоСуммарномуТарифуРасход,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРСтраховая)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПФРСтраховаяРасход,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРНакопительная)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПФРНакопительнаяРасход,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРСтраховая)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПФРСтраховаяПриход,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРНакопительная)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПФРНакопительнаяПриход,
	|	0 КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахРасход,
	|	0 КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахРасход,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФФОМС)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФФОМСПриход,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФФОМС)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ТФОМС)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФФОМСРасход
	|ПОМЕСТИТЬ ВТРасчетыСФондом
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам КАК РасчетыПоСтраховымВзносамОбороты
	|ГДЕ
	|	РасчетыПоСтраховымВзносамОбороты.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
	|	И РасчетыПоСтраховымВзносамОбороты.ЭтоСтраховыеВзносы
	|	И РасчетыПоСтраховымВзносамОбороты.Организация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ПФРПоСуммарномуТарифуРасход), 0) КАК П000100014003,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|					ТОГДА РасчетыСФондом.ПФРПоСуммарномуТарифуРасход
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000100014103,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|					ТОГДА РасчетыСФондом.ПФРПоСуммарномуТарифуРасход
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000100014203,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|					ТОГДА РасчетыСФондом.ПФРПоСуммарномуТарифуРасход
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000100014303,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ПФРСтраховаяРасход), 0) КАК П000100014004,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц1
	|						ТОГДА РасчетыСФондом.ПФРСтраховаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014104,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц2
	|						ТОГДА РасчетыСФондом.ПФРСтраховаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014204,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц3
	|						ТОГДА РасчетыСФондом.ПФРСтраховаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014304,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ПФРНакопительнаяРасход), 0) КАК П000100014005,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц1
	|						ТОГДА РасчетыСФондом.ПФРНакопительнаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014105,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц2
	|						ТОГДА РасчетыСФондом.ПФРНакопительнаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014205,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) <= &Месяц3
	|						ТОГДА РасчетыСФондом.ПФРНакопительнаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014305,
	|	0 КАК П000100014006,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000100014106,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000100014206,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000100014306,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахРасход), 0) КАК П000100014007,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000100014107,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000100014207,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000100014307,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ФФОМСРасход), 0) КАК П000100014008,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|						ТОГДА РасчетыСФондом.ФФОМСРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014108,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|						ТОГДА РасчетыСФондом.ФФОМСРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014208,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|						ТОГДА РасчетыСФондом.ФФОМСРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014308
	|ИЗ
	|	ВТРасчетыСФондом КАК РасчетыСФондом";
	
	ОстаткиНаНачалоПериодаТекст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Остатки.СуммаОстаток), 0) КАК Остаток
	|ПОМЕСТИТЬ ВТОстаткиПоСтраховойЧастиНаДатуОбъединения
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам.Остатки(
	|			&ДатаОбъединенияСтраховойИНакопительнойЧастейВзносовПФР,
	|			Организация = &Организация
	|				И ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРСтраховая)
	|				И ЭтоСтраховыеВзносы) КАК Остатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Остатки.П000100010003), 0) КАК П000100010003,
	|	ЕСТЬNULL(СУММА(Остатки.П000100010004), 0) КАК П000100010004,
	|	ЕСТЬNULL(СУММА(Остатки.П000100010005), 0) КАК П000100010005,
	|	ЕСТЬNULL(СУММА(Остатки.П000100010006), 0) КАК П000100010006,
	|	ЕСТЬNULL(СУММА(Остатки.П000100010007), 0) КАК П000100010007,
	|	ЕСТЬNULL(СУММА(Остатки.П000100010008), 0) КАК П000100010008
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА Остатки.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРПоСуммарномуТарифу)
	|				ТОГДА Остатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000100010003,
	|		ВЫБОР
	|			КОГДА Остатки.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРСтраховая)
	|				ТОГДА Остатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000100010004,
	|		ВЫБОР
	|			КОГДА Остатки.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРНакопительная)
	|				ТОГДА Остатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000100010005,
	|		0 КАК П000100010006,
	|		0 КАК П000100010007,
	|		ВЫБОР
	|			КОГДА Остатки.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФФОМС)
	|				ТОГДА Остатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА Остатки.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ТФОМС)
	|			ТОГДА Остатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000100010008
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам.Остатки(
	|			&НачалоОтчетногоПериода,
	|			Организация = &Организация
	|				И ЭтоСтраховыеВзносы) КАК Остатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ОстаткиПоСтраховойЧастиНаДатуОбъединения.Остаток < 0
	|				ТОГДА ОстаткиПоСтраховойЧастиНаДатуОбъединения.Остаток
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ОстаткиПоСтраховойЧастиНаДатуОбъединения.Остаток < 0
	|				ТОГДА -ОстаткиПоСтраховойЧастиНаДатуОбъединения.Остаток
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		0,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		ВТОстаткиПоСтраховойЧастиНаДатуОбъединения КАК ОстаткиПоСтраховойЧастиНаДатуОбъединения) КАК Остатки";

	ЗастрахованныеЛицаТекст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Организации.ФизическоеЛицо), 0) КАК КолЗастрахованных
	|ИЗ
	|	ВТФизЛицаСОблагаемойБазой КАК Организации";
	
	
	// -------------------------------------------------------------------------------
	// Вывод данных в отчет
	
	// очищаем разделы
	ПоказателиОтчета = Новый Структура;
	ОписаниеПоказателей_РСВ1_2014Кв1(ПоказателиОтчета);
	ДанныеРаздела2 = Контейнер.Раздел21[0].Данные[0].Значение;
	Значение = Неопределено;
	Для каждого КлючИЗначение Из ДанныеРаздела2 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			ДанныеРаздела2[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	СтруктураПолейРаздела2 = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеРаздела2); // копия для создания других страниц
	
	Контейнер.Раздел21.Очистить();	
	СтраницаРаздела2 = Контейнер.Раздел21.Добавить(); // первая страница
	СтраницаРаздела2.Данные.Добавить(ДанныеРаздела2);
	
	ДанныеРаздела24 = Контейнер.Раздел24[0].Данные[0].Значение;
	Значение = Неопределено;
	Для каждого КлючИЗначение Из ДанныеРаздела24 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			ДанныеРаздела24[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	СтруктураПолейРаздела24 = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеРаздела24); // копия для создания других страниц
	
	Контейнер.Раздел24.Очистить();	
	СтраницаРаздела24 = Контейнер.Раздел24.Добавить(); // первая страница
	СтраницаРаздела24.Данные.Добавить(ДанныеРаздела24);
	
	ОписаниеТаблиц = Новый Структура("Раздел21Доходы2014,Раздел21Численность2014,Раздел21Взносы2014,Раздел21Тарифы2014,Раздел22Доходы2014,Раздел22Численность2014,Раздел22Взносы2014,Раздел24Основания2014,Раздел24Доходы2014,Раздел24Численность2014,Раздел24Взносы2014,ВсегоЗастрахованных");
	РасчетПоказателей_РСВ1_2014(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ,Запрос.МенеджерВременныхТаблиц);
	
	
	// Титульный лист
	
	Результат = ОписаниеТаблиц.ВсегоЗастрахованных;
	Если Результат.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Титульный,Результат[0]);
	КонецЕсли;
	
	// Раздел 1 
	
	Запрос.Текст = РасчетыСФондамиТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел1, Выборка);
	КонецЕсли;
	
	Запрос.Текст = ОстаткиНаНачалоПериодаТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел1, Выборка);
	КонецЕсли;
	
	// Разделы 2 и 3.1
	
	// Раздел 2.1 
	
	ВсеТарифы = ОписаниеТаблиц.Раздел21Тарифы2014;
	ТаблицаДоходов = ОписаниеТаблиц.Раздел21Доходы2014;
	ТаблицаКоличеств = ОписаниеТаблиц.Раздел21Численность2014;
	ТаблицаВзносов = ОписаниеТаблиц.Раздел21Взносы2014;
	КоличествоТарифов = ВсеТарифы.Количество();
	ИндексПоследнейСтроки = КоличествоТарифов - 1;
	
	УпрощенныйНалоговыйРежимПроизводство = СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "УпрощенныйНалоговыйРежимПроизводство");
	
	ЗаполнятьРаздел35 = Ложь;
	
	Для каждого СтрокаРезультата Из ВсеТарифы Цикл
		
		Если СтрокаРезультата.ВидТарифаСтраховыхВзносов = УпрощенныйНалоговыйРежимПроизводство Тогда
			ЗаполнятьРаздел35 = Истина;
		КонецЕсли;
			
		СтрокаДоходов = ТаблицаДоходов.Найти(СтрокаРезультата.ВидТарифаСтраховыхВзносов,"ВидТарифаСтраховыхВзносов");
		СтрокаКоличеств = ТаблицаКоличеств.Найти(СтрокаРезультата.ВидТарифаСтраховыхВзносов,"ВидТарифаСтраховыхВзносов");
		СтрокаВзносов = ТаблицаВзносов.Найти(СтрокаРезультата.ВидТарифаСтраховыхВзносов,"ВидТарифаСтраховыхВзносов");
		
		ДанныеРаздела2.П000210001001 = СтрокаРезультата.КодТарифа;
		
		Если СтрокаДоходов = Неопределено и СтрокаВзносов = Неопределено Тогда // по текущему тарифу нет данных
			Если КоличествоТарифов > 1 И ВсеТарифы.Индекс(СтрокаРезультата) = ИндексПоследнейСтроки Тогда
				Контейнер.Раздел2.Удалить(СтраницаРаздела2);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДоходов <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеРаздела2,СтрокаДоходов);
		КонецЕсли;
		Если СтрокаКоличеств <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеРаздела2,СтрокаКоличеств);
		КонецЕсли;
		Если СтрокаВзносов <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеРаздела2,СтрокаВзносов);
		КонецЕсли;
		
		// если применяемых в орг. тарифов больше 1, тогда создадим еще одну страницу для раздела 2
		Если ВсеТарифы.Индекс(СтрокаРезультата) < ИндексПоследнейСтроки Тогда  
			ДанныеРаздела2 = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейРаздела2);
			СтраницаРаздела2 = Контейнер.Раздел21.Добавить();
			СтраницаРаздела2.Данные.Добавить(ДанныеРаздела2);
		КонецЕсли;
		
	КонецЦикла;
	
	// Разделы 2.2 и 2.3 
	
	Результат = ОписаниеТаблиц.Раздел22Доходы2014;
	Если Результат.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел22, Результат[0]);
	КонецЕсли;
	
	Результат = ОписаниеТаблиц.Раздел22Численность2014;
	Если Результат.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел22, Результат[0]);
	КонецЕсли;
	
	Результат = ОписаниеТаблиц.Раздел22Взносы2014;
	Если Результат.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел22, Результат[0]);
	КонецЕсли;
	
	Если ЗаполнятьРаздел35 Тогда
		// Раздел 3.5
		Доход = 0;
		// Определяем, необходимо ли формировать доходы
		ЗапросПоДоходам = Новый Запрос;
		
		// Добавляем периода для анализа заполненности доходов
		Квартал = НачалоКвартала(НачалоПериода);
		// первый месяц
		ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(Квартал,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период ПОМЕСТИТЬ ВТПериодыКварталов";
		Квартал = НачалоКвартала(ДобавитьМесяц(Квартал,3));
		// прибавим остальные месяцы
		Пока КонецДня(Квартал) < КонецМесяца(ДатаКонцаПериодаОтчета) Цикл
			ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(Квартал,"ДФ=гггг,М,д,Ч,м,с") + ")";
			Квартал = НачалоКвартала(ДобавитьМесяц(Квартал,3));
		КонецЦикла;
		ЗапросПоДоходам.Текст = ПериодыТекст;
		
		
		ОсновнойТекстЗапросаПоДоходам = "ВЫБРАТЬ
		|	ПериодыКварталов.Период КАК Период,
		|	ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.ДоходБазаОборот, 0) КАК Сумма
		|ИЗ
		|	ВТПериодыКварталов КАК ПериодыКварталов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, Квартал, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
		|		ПО (КнигаУчетаДоходовИРасходовОбороты.Период = ПериодыКварталов.Период)";
		
		ЗапросПоДоходам.Текст =ПериодыТекст +"; "+ ОсновнойТекстЗапросаПоДоходам;
		ЗапросПоДоходам.УстановитьПараметр("Организация", Организация);
		ЗапросПоДоходам.УстановитьПараметр("НачалоПериода", НачалоПериода);
		ЗапросПоДоходам.УстановитьПараметр("КонецПериода", КонецДня(ДатаКонцаПериодаОтчета));
		ВыборкаПоДоходу = ЗапросПоДоходам.Выполнить().Выбрать();
		
		НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
		УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
		МенеджерВТДляДоходов = Новый МенеджерВременныхТаблиц;
		РегламентированнаяОтчетностьУСН.ПолучитьВТТаблицуКурсовВалютЗаПериод(МенеджерВТДляДоходов, НачалоКвартала(ДатаКонцаПериодаОтчета),КонецКвартала(ДатаКонцаПериодаОтчета), НациональнаяВалюта, УчетВалютныхОпераций);
		Пока ВыборкаПоДоходу.Следующий() Цикл
			Если ВыборкаПоДоходу.Сумма = 0 Тогда
				// Формируем доход за отчетный период
				// 
				Результат = Новый Структура;
				Результат.Вставить("ДокументФормирования", Документы.ЗаписиУСН.ПустаяСсылка());
				Результат.Вставить("ЕстьОшибки", Ложь);
				Результат.Вставить("ЕстьПредупреждения", Ложь);
				Результат.Вставить("ДополнительнаяИнформация", "");
				
				Результат.ДокументФормирования = РегламентированнаяОтчетностьУСН.ПолучитьДокументЗаписейУСНВПериодеПоВиду(
					Организация,
					КонецКвартала(ДатаКонцаПериодаОтчета),
					Перечисления.ВидыЗаписейФормированийКУДиР.ДоходыПрочие);
				
				РегламентированнаяОтчетностьУСН.ВыполнитьФормированиеПоДоходам(
					Организация,
					КонецКвартала(ДатаКонцаПериодаОтчета),
					Результат,
					МенеджерВТДляДоходов);
			КонецЕсли;
		КонецЦикла;
		
		ВыборкаПоДоходу = ЗапросПоДоходам.Выполнить().Выбрать();
		Пока ВыборкаПоДоходу.Следующий() Цикл
			Доход = Доход + ВыборкаПоДоходу.Сумма;
		КонецЦикла;
		Контейнер.Раздел35.П000360036103 = Доход;
		Контейнер.Раздел35.П000360036203 = Доход;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетПоказателей_РСВ1_2014(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные = Ложь, МенеджерВТ)
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода", КонецДня(ОкончаниеПериода));
	Запрос.УстановитьПараметр("КонецГода", КонецГода(ОкончаниеПериода));
	Запрос.УстановитьПараметр("ДалекаяДата", ДобавитьМесяц(НачалоГода(ОкончаниеПериода), 1200));
	Запрос.УстановитьПараметр("ГодОтчетногоПериода", Год(ОкончаниеПериода));
	Запрос.УстановитьПараметр("Месяц1", Месяц(ОкончаниеПериода) - 2);
	Запрос.УстановитьПараметр("Месяц2", Месяц(ОкончаниеПериода) - 1);
	Запрос.УстановитьПараметр("Месяц3", Месяц(ОкончаниеПериода));
	// Все данные отчета берутся по обособленному подразделению (указанной организации)
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОбщийНалоговыйРежим", СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "ОбщийНалоговыйРежим")); 
	Запрос.УстановитьПараметр("УпрощенныйНалоговыйРежим", СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "УпрощенныйНалоговыйРежим")); 
	Запрос.УстановитьПараметр("ОрганизацияИнвалидов", СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "ОрганизацияИнвалидов"));
	
	// ----------------------------------------------------------------------------------
	// ТЕКСТЫ ЗАПРОСОВ
	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Месяц1 КАК МесяцПериода
	|ПОМЕСТИТЬ ВТМесяцыОтчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Месяц2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Месяц3";
	Запрос.Выполнить();
	
	// Титульный лист
	
	Если ОписаниеТаблиц.Свойство("ВсегоЗастрахованных") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Организации.ФизическоеЛицо), 0) КАК КолЗастрахованных
		|ИЗ
		|	ВТФизЛицаСОблагаемойБазой КАК Организации";
		ОписаниеТаблиц.ВсегоЗастрахованных = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	
	// Раздел 2.1 
	
	Если ОписаниеТаблиц.Свойство("Раздел21Тарифы2014") Или ОписаниеТаблиц.Свойство("Раздел21Доходы2014") Или ОписаниеТаблиц.Свойство("Раздел21Численность2014") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОДоходах.Период КАК Период,
		|	СведенияОДоходах.ФизическоеЛицо,
		|	СведенияОДоходах.ФизическоеЛицоНаименование,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
		|	ЕСТЬNULL(КодыВидовТарифаСтраховыхВзносов.КодПФР, """") КАК КодТарифа,
		|	СУММА(СведенияОДоходах.БазаПФР) КАК ОблагаемаяБазаПФР,
		|	СУММА(СведенияОДоходах.БазаФОМС) КАК ОблагаемаяБазаФОМС,
		|	СУММА(СведенияОДоходах.НачисленоВсего) КАК НачисленоВсего,
		|	СУММА(СведенияОДоходах.СуммаПревысившаяПределПФР) КАК СуммаПревысившаяПределПФР,
		|	СУММА(СведенияОДоходах.СуммаПревысившаяПределФОМС) КАК СуммаПревысившаяПределФОМС,
		|	СУММА(СведенияОДоходах.НеОблагаетсяПФР - СведенияОДоходах.РасходыПоАвторскимПФР) КАК НеОблагается,
		|	СУММА(СведенияОДоходах.НеОблагаетсяФОМС - СведенияОДоходах.РасходыПоАвторскимФОМС) КАК НеОблагаетсяФОМС,
		|	СУММА(СведенияОДоходах.ИсчисленоПФРССуммПревышения) КАК ИсчисленоПФРССуммПревышения,
		|	СУММА(СведенияОДоходах.РасходыПоАвторскимПФР) КАК РасходыПоАвторскимПФР,
		|	СУММА(СведенияОДоходах.РасходыПоАвторскимФОМС) КАК РасходыПоАвторскимФОМС
		|ПОМЕСТИТЬ ВТДоходыВзносов
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО СведенияОДоходах.ФизическоеЛицо = Сотрудники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКодыВидовТарифаСтраховыхВзносов КАК КодыВидовТарифаСтраховыхВзносов
		|		ПО (СведенияОДоходах.ВидТарифаСтраховыхВзносов = КодыВидовТарифаСтраховыхВзносов.ВидТарифаСтраховыхВзносов)
		|			И (ГОД(СведенияОДоходах.Период) МЕЖДУ КодыВидовТарифаСтраховыхВзносов.ГодС И КодыВидовТарифаСтраховыхВзносов.ГодПо)
		|ГДЕ
		|	СведенияОДоходах.Организация = &Организация
		|	И СведенияОДоходах.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				Организации.ФизическоеЛицо
		|			ИЗ
		|				ВТФизЛицаСОблагаемойБазой КАК Организации)
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ФизическоеЛицо,
		|	СведенияОДоходах.ФизическоеЛицоНаименование,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	ЕСТЬNULL(КодыВидовТарифаСтраховыхВзносов.КодПФР, """")
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	ВидТарифаСтраховыхВзносов
		|;";
		
		Запрос.Выполнить();
	КонецЕсли;
	
	Если ОписаниеТаблиц.Свойство("Раздел21Тарифы2014") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Доходы.КодТарифа,
		|	Доходы.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов
		|ИЗ
		|	ВТДоходыВзносов КАК Доходы
		|
		|УПОРЯДОЧИТЬ ПО
		|	Доходы.КодТарифа";
		ОписаниеТаблиц.Раздел21Тарифы2014 = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	Если ОписаниеТаблиц.Свойство("Раздел21Доходы2014") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Доходы.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
		|	Доходы.КодТарифа КАК КодТарифа,
		|	ЕСТЬNULL(СУММА(Доходы.НачисленоВсего), 0) КАК П000210020003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020005,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020006,
		|	ЕСТЬNULL(СУММА(Доходы.НеОблагается), 0) КАК П000210020103,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.НеОблагается
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020104,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.НеОблагается
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020105,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.НеОблагается
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020106,
		|	ЕСТЬNULL(СУММА(Доходы.РасходыПоАвторскимПФР), 0) КАК П000210020203,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.РасходыПоАвторскимПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020204,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.РасходыПоАвторскимПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020205,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.РасходыПоАвторскимПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020206,
		|	ЕСТЬNULL(СУММА(Доходы.СуммаПревысившаяПределПФР), 0) КАК П000210020303,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.СуммаПревысившаяПределПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020304,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.СуммаПревысившаяПределПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020305,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.СуммаПревысившаяПределПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020306,
		|	ЕСТЬNULL(СУММА(Доходы.ИсчисленоПФРССуммПревышения), 0) КАК П000210020603,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.ИсчисленоПФРССуммПревышения
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020604,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.ИсчисленоПФРССуммПревышения
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020605,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.ИсчисленоПФРССуммПревышения
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020606,
		|	ЕСТЬNULL(СУММА(Доходы.НачисленоВсего), 0) КАК П000210021003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021005,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021006,
		|	ЕСТЬNULL(СУММА(Доходы.НеОблагаетсяФОМС), 0) КАК П000210021103,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.НеОблагаетсяФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021104,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.НеОблагаетсяФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021105,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.НеОблагаетсяФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021106,
		|	ЕСТЬNULL(СУММА(Доходы.РасходыПоАвторскимФОМС), 0) КАК П000210021203,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.РасходыПоАвторскимФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021204,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.РасходыПоАвторскимФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021205,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.РасходыПоАвторскимФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021206,
		|	ЕСТЬNULL(СУММА(Доходы.СуммаПревысившаяПределФОМС), 0) КАК П000210021303,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.СуммаПревысившаяПределФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021304,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.СуммаПревысившаяПределФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021305,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.СуммаПревысившаяПределФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021306
		|ИЗ
		|	ВТДоходыВзносов КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.ВидТарифаСтраховыхВзносов,
		|	Доходы.КодТарифа
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидТарифаСтраховыхВзносов
		|;";
		ОписаниеТаблиц.Раздел21Доходы2014 = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	Если ОписаниеТаблиц.Свойство("Раздел21Численность2014") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Доходы.Период,
		|	Доходы.ФизическоеЛицо,
		|	Доходы.ВидТарифаСтраховыхВзносов
		|ПОМЕСТИТЬ ВТЛицаСПревышениемБазы
		|ИЗ
		|	ВТДоходыВзносов КАК Доходы
		|ГДЕ
		|	Доходы.СуммаПревысившаяПределПФР > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЛицаСПревышениемБазы.ФизическоеЛицо) КАК ВсегоФизлиц,
		|	ЛицаСПревышениемБазы.ВидТарифаСтраховыхВзносов
		|ПОМЕСТИТЬ ВТЛицаСПревышениемБазыЗаВсеМесяцы
		|ИЗ
		|	ВТЛицаСПревышениемБазы КАК ЛицаСПревышениемБазы
		|
		|СГРУППИРОВАТЬ ПО
		|	ЛицаСПревышениемБазы.ВидТарифаСтраховыхВзносов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЛицаСПревышениемБазы.Период,
		|	ЛицаСПревышениемБазы.ВидТарифаСтраховыхВзносов,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЛицаСПревышениемБазы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЛицаСПревышениемБазыЗаОтдельныеМесяцы
		|ИЗ
		|	ВТЛицаСПревышениемБазы КАК ЛицаСПревышениемБазы
		|
		|СГРУППИРОВАТЬ ПО
		|	ЛицаСПревышениемБазы.ВидТарифаСтраховыхВзносов,
		|	ЛицаСПревышениемБазы.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Доходы.Период,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доходы.ФизическоеЛицо) КАК ВсегоФизлиц,
		|	Доходы.ВидТарифаСтраховыхВзносов
		|ПОМЕСТИТЬ ВТЛицаСВзносамиЗаОтдельныеМесяцы
		|ИЗ
		|	ВТДоходыВзносов КАК Доходы
		|ГДЕ
		|	Доходы.ОблагаемаяБазаПФР <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.Период,
		|	Доходы.ВидТарифаСтраховыхВзносов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доходы.ФизическоеЛицо) КАК ВсегоФизлиц,
		|	Доходы.ВидТарифаСтраховыхВзносов
		|ПОМЕСТИТЬ ВТЛицаСВзносамиЗаВсеМесяцы
		|ИЗ
		|	ВТДоходыВзносов КАК Доходы
		|ГДЕ
		|	Доходы.ОблагаемаяБазаПФР <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.ВидТарифаСтраховыхВзносов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Тарифы.ВидТарифаСтраховыхВзносов,
		|	МАКСИМУМ(ЕСТЬNULL(ЛицаСВзносамиЗаВсеМесяцы.ВсегоФизлиц, 0)) КАК П000210020703,
		|	МАКСИМУМ(ЕСТЬNULL(ЛицаСПревышениемБазыЗаВсеМесяцы.ВсегоФизлиц, 0)) КАК П000210020803,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВзносамиЗаОтдельныеМесяцы.Период) = &Месяц1
		|				ТОГДА ЕСТЬNULL(ЛицаСВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000210020704,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВзносамиЗаОтдельныеМесяцы.Период) = &Месяц2
		|				ТОГДА ЕСТЬNULL(ЛицаСВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000210020705,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВзносамиЗаОтдельныеМесяцы.Период) = &Месяц3
		|				ТОГДА ЕСТЬNULL(ЛицаСВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000210020706,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.Период) = &Месяц1
		|				ТОГДА ЕСТЬNULL(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000210020804,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.Период) = &Месяц2
		|				ТОГДА ЕСТЬNULL(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000210020805,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.Период) = &Месяц3
		|				ТОГДА ЕСТЬNULL(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000210020806
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Доходы.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов
		|	ИЗ
		|		ВТДоходыВзносов КАК Доходы) КАК Тарифы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМесяцыОтчета КАК МесяцыОтчета
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСВзносамиЗаВсеМесяцы КАК ЛицаСВзносамиЗаВсеМесяцы
		|		ПО Тарифы.ВидТарифаСтраховыхВзносов = ЛицаСВзносамиЗаВсеМесяцы.ВидТарифаСтраховыхВзносов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСПревышениемБазыЗаВсеМесяцы КАК ЛицаСПревышениемБазыЗаВсеМесяцы
		|		ПО Тарифы.ВидТарифаСтраховыхВзносов = ЛицаСПревышениемБазыЗаВсеМесяцы.ВидТарифаСтраховыхВзносов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСВзносамиЗаОтдельныеМесяцы КАК ЛицаСВзносамиЗаОтдельныеМесяцы
		|		ПО Тарифы.ВидТарифаСтраховыхВзносов = ЛицаСВзносамиЗаОтдельныеМесяцы.ВидТарифаСтраховыхВзносов
		|			И (МесяцыОтчета.МесяцПериода = МЕСЯЦ(ЛицаСВзносамиЗаОтдельныеМесяцы.Период))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСПревышениемБазыЗаОтдельныеМесяцы КАК ЛицаСПревышениемБазыЗаОтдельныеМесяцы
		|		ПО Тарифы.ВидТарифаСтраховыхВзносов = ЛицаСПревышениемБазыЗаОтдельныеМесяцы.ВидТарифаСтраховыхВзносов
		|			И (МесяцыОтчета.МесяцПериода = МЕСЯЦ(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.Период))
		|
		|СГРУППИРОВАТЬ ПО
		|	Тарифы.ВидТарифаСтраховыхВзносов
		|
		|УПОРЯДОЧИТЬ ПО
		|	Тарифы.ВидТарифаСтраховыхВзносов";
		
		ОписаниеТаблиц.Раздел21Численность2014 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	Если ОписаниеТаблиц.Свойство("Раздел21Взносы2014") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВзносыФизлиц.ПФРПоСуммарномуТарифу), 0) КАК П000210020503,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц1
		|					ТОГДА ВзносыФизлиц.ПФРПоСуммарномуТарифу
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020504,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц2
		|					ТОГДА ВзносыФизлиц.ПФРПоСуммарномуТарифу
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020505,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц3
		|					ТОГДА ВзносыФизлиц.ПФРПоСуммарномуТарифу
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020506,
		|	ЕСТЬNULL(СУММА(ВзносыФизлиц.ФФОМС), 0) КАК П000210021503,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц1
		|					ТОГДА ВзносыФизлиц.ФФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021504,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц2
		|					ТОГДА ВзносыФизлиц.ФФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021505,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц3
		|					ТОГДА ВзносыФизлиц.ФФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021506,
		|	ВзносыФизлиц.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК ВзносыФизлиц
		|ГДЕ
		|	ВзносыФизлиц.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				Организации.ФизическоеЛицо
		|			ИЗ
		|				ВТФизЛицаСОблагаемойБазой КАК Организации)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзносыФизлиц.ВидТарифаСтраховыхВзносов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидТарифаСтраховыхВзносов";
		ОписаниеТаблиц.Раздел21Взносы2014 = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	// Разделы 2.2 и 2.3 
	Если ОписаниеТаблиц.Свойство("Раздел22Доходы2014") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОДоходах.Период КАК Период,
		|	СведенияОДоходах.ФизическоеЛицо,
		|	0 КАК НачисленоВсегоЗаЗанятыхНаПодземныхИВредныхРаботах,
		|	0 КАК НачисленоВсегоЗаЗанятыхНаТяжелыхИПрочихРаботах,
		|	0 КАК НеОблагаетсяЗаЗанятыхНаПодземныхИВредныхРаботах,
		|	0 КАК НеОблагаетсяЗаЗанятыхНаТяжелыхИПрочихРаботах,
		|	0 КАК ОблагаемаяБазаПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
		|	0 КАК ОблагаемаяБазаПФРЗаЗанятыхНаТяжелыхИПрочихРаботах
		|ПОМЕСТИТЬ ВТДоходыВредныхВзносов
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
		|ГДЕ
		|	СведенияОДоходах.Организация = &Организация
		|	И СведенияОДоходах.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				Организации.ФизическоеЛицо
		|			ИЗ
		|				ВТФизЛицаСОблагаемойБазой КАК Организации)
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ФизическоеЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(Доходы.НачисленоВсегоЗаЗанятыхНаПодземныхИВредныхРаботах), 0) КАК П000220022003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.НачисленоВсегоЗаЗанятыхНаПодземныхИВредныхРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000220022004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.НачисленоВсегоЗаЗанятыхНаПодземныхИВредныхРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000220022005,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.НачисленоВсегоЗаЗанятыхНаПодземныхИВредныхРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000220022006,
		|	ЕСТЬNULL(СУММА(Доходы.НеОблагаетсяЗаЗанятыхНаПодземныхИВредныхРаботах), 0) КАК П000220022103,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.НеОблагаетсяЗаЗанятыхНаПодземныхИВредныхРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000220022104,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.НеОблагаетсяЗаЗанятыхНаПодземныхИВредныхРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000220022105,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.НеОблагаетсяЗаЗанятыхНаПодземныхИВредныхРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000220022106,
		|	ЕСТЬNULL(СУММА(Доходы.НачисленоВсегоЗаЗанятыхНаТяжелыхИПрочихРаботах), 0) КАК П000230023003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.НачисленоВсегоЗаЗанятыхНаТяжелыхИПрочихРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000230023004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.НачисленоВсегоЗаЗанятыхНаТяжелыхИПрочихРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000230023005,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.НачисленоВсегоЗаЗанятыхНаТяжелыхИПрочихРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000230023006,
		|	ЕСТЬNULL(СУММА(Доходы.НеОблагаетсяЗаЗанятыхНаТяжелыхИПрочихРаботах), 0) КАК П000230023103,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.НеОблагаетсяЗаЗанятыхНаТяжелыхИПрочихРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000230023104,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.НеОблагаетсяЗаЗанятыхНаТяжелыхИПрочихРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000230023105,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.НеОблагаетсяЗаЗанятыхНаТяжелыхИПрочихРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000230023106
		|ИЗ
		|	ВТДоходыВредныхВзносов КАК Доходы
		|;";
		ОписаниеТаблиц.Раздел22Доходы2014 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	Если ОписаниеТаблиц.Свойство("Раздел22Численность2014") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Взносы.Период,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взносы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЛицаСВреднымиВзносамиЗаОтдельныеМесяцы
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК Взносы
		|ГДЕ
		|	Ложь
		|
		|СГРУППИРОВАТЬ ПО
		|	Взносы.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Взносы.Период,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взносы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК Взносы
		|ГДЕ
		|	Ложь
		|
		|СГРУППИРОВАТЬ ПО
		|	Взносы.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взносы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЛицаСВреднымиВзносамиЗаВсеМесяцы
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК Взносы
		|ГДЕ
		|	Ложь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взносы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЛицаСТяжелымиВзносамиЗаВсеМесяцы
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК Взносы
		|ГДЕ
		|	Ложь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЕСТЬNULL(ЛицаСВреднымиВзносамиЗаВсеМесяцы.ВсегоФизлиц, 0)) КАК П000220022503,
		|	МАКСИМУМ(ЕСТЬNULL(ЛицаСТяжелымиВзносамиЗаВсеМесяцы.ВсегоФизлиц, 0)) КАК П000230023503,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц1
		|				ТОГДА ЕСТЬNULL(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000220022504,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц2
		|				ТОГДА ЕСТЬNULL(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000220022505,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц3
		|				ТОГДА ЕСТЬNULL(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000220022506,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц1
		|				ТОГДА ЕСТЬNULL(ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000230023504,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц2
		|				ТОГДА ЕСТЬNULL(ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000230023505,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц3
		|				ТОГДА ЕСТЬNULL(ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000230023506
		|ИЗ
		|	ВТМесяцыОтчета КАК МесяцыОтчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСВреднымиВзносамиЗаВсеМесяцы КАК ЛицаСВреднымиВзносамиЗаВсеМесяцы
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСТяжелымиВзносамиЗаВсеМесяцы КАК ЛицаСТяжелымиВзносамиЗаВсеМесяцы
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСВреднымиВзносамиЗаОтдельныеМесяцы КАК ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы
		|		ПО МесяцыОтчета.МесяцПериода = ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы КАК ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы
		|		ПО МесяцыОтчета.МесяцПериода = ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.Период
		|;";
		ОписаниеТаблиц.Раздел22Численность2014 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	Если ОписаниеТаблиц.Свойство("Раздел22Взносы2014") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	0 КАК П000220022403,
		|	0 КАК П000220022404,
		|	0 КАК П000220022405,
		|	0 КАК П000220022406,
		|	0 КАК П000230023403,
		|	0 КАК П000230023404,
		|	0 КАК П000230023405,
		|	0 КАК П000230023406
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК ВзносыФизлиц
		|ГДЕ
		|	ВзносыФизлиц.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				Организации.ФизическоеЛицо
		|			ИЗ
		|				ВТФизЛицаСОблагаемойБазой КАК Организации)
		|;";
		ОписаниеТаблиц.Раздел22Взносы2014 = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ОписаниеПоказателей_РСВ1_2015Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100010003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100010004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014204", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100010005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014205", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100010006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014206", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100010007", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014007", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014107", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014207", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014307", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100010008", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014008", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014108", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014208", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100014308", Истина, Ложь);
	
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210001001", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020303", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020603", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020703", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020803", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021503", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020104", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020204", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020304", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020504", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020604", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020704", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020804", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021104", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021204", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021404", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021504", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020105", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020205", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020305", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020505", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020605", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020705", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020805", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021105", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021205", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021405", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021505", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020006", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020106", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020206", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020306", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020506", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020606", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020706", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210020806", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021106", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021006", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021206", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021406", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210021506", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022104", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022404", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022504", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022105", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022405", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022505", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022006", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022106", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022406", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022506", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023104", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023404", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023504", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023105", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023405", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023505", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023006", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023106", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023406", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000230023506", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024104", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024404", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024504", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024105", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024405", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024505", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024006", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024106", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024406", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024506", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024603", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024703", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025303", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025603", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025703", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025803", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025903", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026303", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026803", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026903", Истина, Истина);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024604", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024704", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025104", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025204", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025304", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025604", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025704", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025804", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025904", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026204", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026304", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026404", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026504", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026804", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026904", Истина, Истина);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024605", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024705", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025105", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025205", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025305", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025605", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025705", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025805", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025905", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026205", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026305", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026405", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026505", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026805", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026905", Истина, Истина);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024606", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240024706", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025006", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025106", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025206", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025306", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025606", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025706", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025806", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240025906", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026206", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026306", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026406", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026506", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026806", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240026906", Истина, Истина);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400000101", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400000102", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400000103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400000104", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400000105", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400000106", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400000107", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400000108", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400000109", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400000110", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400000111", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400000112", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400000113", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000400000114", Истина, Истина);
	
КонецПроцедуры

Процедура ЗначенияПоказателей_РСВ1_2015Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ДатаКонцаПериодаОтчета = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
	Организация = ПараметрыОтчета.Организация;
	
	НачалоПериода = НачалоГода(ДатаКонцаПериодаОтчета);
	ОкончаниеПериода = КонецМесяца(ДатаКонцаПериодаОтчета);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаОбъединенияСтраховойИНакопительнойЧастейВзносовПФР", УчетСтраховыхВзносов.ДатаОбъединенияСтраховойИНакопительнойЧастейВзносовПФР());
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода", КонецДня(ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецГода", КонецГода(ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ДалекаяДата", ДобавитьМесяц(НачалоГода(ДатаКонцаПериодаОтчета), 1200));
	Запрос.УстановитьПараметр("ГодОтчетногоПериода", Год(ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Месяц1", Месяц(ДатаКонцаПериодаОтчета) - 2);
	Запрос.УстановитьПараметр("Месяц2", Месяц(ДатаКонцаПериодаОтчета) - 1);
	Запрос.УстановитьПараметр("Месяц3", Месяц(ДатаКонцаПериодаОтчета));
	// Все данные отчета берутся по обособленному подразделению (указанной организации)
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОбщийНалоговыйРежим", СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "ОбщийНалоговыйРежим")); 
	Запрос.УстановитьПараметр("УпрощенныйНалоговыйРежим", СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "УпрощенныйНалоговыйРежим")); 
	Запрос.УстановитьПараметр("ОрганизацияИнвалидов", СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "ОрганизацияИнвалидов"));
	
	// ----------------------------------------------------------------------------------
	// ТЕКСТЫ ЗАПРОСОВ
	
	
	УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОДоходахИВзносах(НачалоПериода, КонецДня(ДатаКонцаПериодаОтчета), Организация, Запрос.МенеджерВременныхТаблиц);
	
	
	
	РасчетыСФондамиТекст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(РасчетыПоСтраховымВзносамОбороты.Период, МЕСЯЦ) КАК Период,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРПоСуммарномуТарифу)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПФРПоСуммарномуТарифуРасход,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРСтраховая)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПФРСтраховаяРасход,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРНакопительная)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПФРНакопительнаяРасход,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРСтраховая)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПФРСтраховаяПриход,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРНакопительная)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПФРНакопительнаяПриход,
	|	0 КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахРасход,
	|	0 КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахРасход,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФФОМС)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФФОМСПриход,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФФОМС)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ТФОМС)
	|				И РасчетыПоСтраховымВзносамОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА РасчетыПоСтраховымВзносамОбороты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФФОМСРасход
	|ПОМЕСТИТЬ ВТРасчетыСФондом
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам КАК РасчетыПоСтраховымВзносамОбороты
	|ГДЕ
	|	РасчетыПоСтраховымВзносамОбороты.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
	|	И РасчетыПоСтраховымВзносамОбороты.ЭтоСтраховыеВзносы
	|	И РасчетыПоСтраховымВзносамОбороты.Организация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ПФРПоСуммарномуТарифуРасход), 0) КАК П000100014003,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|					ТОГДА РасчетыСФондом.ПФРПоСуммарномуТарифуРасход
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000100014103,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|					ТОГДА РасчетыСФондом.ПФРПоСуммарномуТарифуРасход
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000100014203,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|					ТОГДА РасчетыСФондом.ПФРПоСуммарномуТарифуРасход
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000100014303,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ПФРСтраховаяРасход), 0) КАК П000100014004,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|						ТОГДА РасчетыСФондом.ПФРСтраховаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014104,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|						ТОГДА РасчетыСФондом.ПФРСтраховаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014204,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|						ТОГДА РасчетыСФондом.ПФРСтраховаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014304,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ПФРНакопительнаяРасход), 0) КАК П000100014005,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|						ТОГДА РасчетыСФондом.ПФРНакопительнаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014105,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|						ТОГДА РасчетыСФондом.ПФРНакопительнаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014205,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|						ТОГДА РасчетыСФондом.ПФРНакопительнаяРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014305,
	|	0 КАК П000100014006,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000100014106,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000100014206,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000100014306,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахРасход), 0) КАК П000100014007,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000100014107,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000100014207,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000100014307,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ФФОМСРасход), 0) КАК П000100014008,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|						ТОГДА РасчетыСФондом.ФФОМСРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)) , 0) КАК П000100014108,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|						ТОГДА РасчетыСФондом.ФФОМСРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014208,
	|	ЕСТЬNULL((СУММА(ВЫБОР
	|					КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|						ТОГДА РасчетыСФондом.ФФОМСРасход
	|					ИНАЧЕ 0
	|				КОНЕЦ)), 0) КАК П000100014308
	|ИЗ
	|	ВТРасчетыСФондом КАК РасчетыСФондом";
	
	ОстаткиНаНачалоПериодаТекст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Остатки.СуммаОстаток), 0) КАК Остаток
	|ПОМЕСТИТЬ ВТОстаткиПоСтраховойЧастиНаДатуОбъединения
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам.Остатки(
	|			&НачалоОтчетногоПериода,
	|			Организация = &Организация
	|				И ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРСтраховая)
	|				И ЭтоСтраховыеВзносы) КАК Остатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Остатки.П000100010003), 0) КАК П000100010003,
	|	ЕСТЬNULL(СУММА(Остатки.П000100010004), 0) КАК П000100010004,
	|	ЕСТЬNULL(СУММА(Остатки.П000100010005), 0) КАК П000100010005,
	|	ЕСТЬNULL(СУММА(Остатки.П000100010006), 0) КАК П000100010006,
	|	ЕСТЬNULL(СУММА(Остатки.П000100010007), 0) КАК П000100010007,
	|	ЕСТЬNULL(СУММА(Остатки.П000100010008), 0) КАК П000100010008
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА Остатки.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРПоСуммарномуТарифу)
	|				ТОГДА Остатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000100010003,
	|		ВЫБОР
	|			КОГДА Остатки.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРСтраховая)
	|				ТОГДА Остатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000100010004,
	|		ВЫБОР
	|			КОГДА Остатки.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРНакопительная)
	|				ТОГДА Остатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000100010005,
	|		0 КАК П000100010006,
	|		0 КАК П000100010007,
	|		ВЫБОР
	|			КОГДА Остатки.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФФОМС)
	|				ТОГДА Остатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА Остатки.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ТФОМС)
	|			ТОГДА Остатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000100010008
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам.Остатки(
	|			&НачалоОтчетногоПериода,
	|			Организация = &Организация
	|				И ЭтоСтраховыеВзносы) КАК Остатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ОстаткиПоСтраховойЧастиНаДатуОбъединения.Остаток < 0
	|				ТОГДА ОстаткиПоСтраховойЧастиНаДатуОбъединения.Остаток
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ОстаткиПоСтраховойЧастиНаДатуОбъединения.Остаток < 0
	|				ТОГДА -ОстаткиПоСтраховойЧастиНаДатуОбъединения.Остаток
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		0,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		ВТОстаткиПоСтраховойЧастиНаДатуОбъединения КАК ОстаткиПоСтраховойЧастиНаДатуОбъединения) КАК Остатки";

	ЗастрахованныеЛицаТекст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Организации.ФизическоеЛицо), 0) КАК КолЗастрахованных
	|ИЗ
	|	ВТФизЛицаСОблагаемойБазой КАК Организации";
	
	
	// -------------------------------------------------------------------------------
	// Вывод данных в отчет
	
	// очищаем разделы
	ПоказателиОтчета = Новый Структура;
	ОписаниеПоказателей_РСВ1_2015Кв1(ПоказателиОтчета);
	ДанныеРаздела2 = Контейнер.Раздел21[0].Данные[0].Значение;
	Значение = Неопределено;
	Для каждого КлючИЗначение Из ДанныеРаздела2 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			ДанныеРаздела2[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	СтруктураПолейРаздела2 = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеРаздела2); // копия для создания других страниц
	
	Контейнер.Раздел21.Очистить();	
	СтраницаРаздела2 = Контейнер.Раздел21.Добавить(); // первая страница
	СтраницаРаздела2.Данные.Добавить(ДанныеРаздела2);
	
	ДанныеРаздела24 = Контейнер.Раздел24[0].Данные[0].Значение;
	Значение = Неопределено;
	Для каждого КлючИЗначение Из ДанныеРаздела24 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			ДанныеРаздела24[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	СтруктураПолейРаздела24 = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеРаздела24); // копия для создания других страниц
	
	Контейнер.Раздел24.Очистить();	
	СтраницаРаздела24 = Контейнер.Раздел24.Добавить(); // первая страница
	СтраницаРаздела24.Данные.Добавить(ДанныеРаздела24);
	
	ОписаниеТаблиц = Новый Структура("Раздел21Доходы2014,Раздел21Численность2014,Раздел21Взносы2014,Раздел21Тарифы2014,Раздел22Доходы2014,Раздел22Численность2014,Раздел22Взносы2014,Раздел24Основания2014,Раздел24Доходы2014,Раздел24Численность2014,Раздел24Взносы2014,ВсегоЗастрахованных");
	РасчетПоказателей_РСВ1_2015(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ,Запрос.МенеджерВременныхТаблиц);
	
	
	// Титульный лист
	
	Результат = ОписаниеТаблиц.ВсегоЗастрахованных;
	Если Результат.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Титульный,Результат[0]);
	КонецЕсли;
	
	// Раздел 1 
	
	Запрос.Текст = РасчетыСФондамиТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел1, Выборка);
	КонецЕсли;
	
	Запрос.Текст = ОстаткиНаНачалоПериодаТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел1, Выборка);
	КонецЕсли;
	
	// Разделы 2 и 3.1
	
	// Раздел 2.1 
	
	ВсеТарифы = ОписаниеТаблиц.Раздел21Тарифы2014;
	ТаблицаДоходов = ОписаниеТаблиц.Раздел21Доходы2014;
	ТаблицаКоличеств = ОписаниеТаблиц.Раздел21Численность2014;
	ТаблицаВзносов = ОписаниеТаблиц.Раздел21Взносы2014;
	КоличествоТарифов = ВсеТарифы.Количество();
	ИндексПоследнейСтроки = КоличествоТарифов - 1;
	
	УпрощенныйНалоговыйРежимПроизводство = СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "УпрощенныйНалоговыйРежимПроизводство");
	
	ЗаполнятьРаздел32 = Ложь;
	ДанныеРаздела2.П000210001001 = "01"; // В случае отсутствия данных останется "основной" тариф.
	
	Для каждого СтрокаРезультата Из ВсеТарифы Цикл
		
		Если СтрокаРезультата.ВидТарифаСтраховыхВзносов = УпрощенныйНалоговыйРежимПроизводство Тогда
			ЗаполнятьРаздел35 = Истина;
		КонецЕсли;
			
		СтрокаДоходов = ТаблицаДоходов.Найти(СтрокаРезультата.ВидТарифаСтраховыхВзносов,"ВидТарифаСтраховыхВзносов");
		СтрокаКоличеств = ТаблицаКоличеств.Найти(СтрокаРезультата.ВидТарифаСтраховыхВзносов,"ВидТарифаСтраховыхВзносов");
		СтрокаВзносов = ТаблицаВзносов.Найти(СтрокаРезультата.ВидТарифаСтраховыхВзносов,"ВидТарифаСтраховыхВзносов");
		
		ДанныеРаздела2.П000210001001 = СтрокаРезультата.КодТарифа;
		
		Если СтрокаДоходов = Неопределено и СтрокаВзносов = Неопределено Тогда // по текущему тарифу нет данных
			Если КоличествоТарифов > 1 И ВсеТарифы.Индекс(СтрокаРезультата) = ИндексПоследнейСтроки Тогда
				Контейнер.Раздел21.Удалить(СтраницаРаздела2);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДоходов <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеРаздела2,СтрокаДоходов);
		КонецЕсли;
		Если СтрокаКоличеств <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеРаздела2,СтрокаКоличеств);
		КонецЕсли;
		Если СтрокаВзносов <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеРаздела2,СтрокаВзносов);
		КонецЕсли;
		
		// если применяемых в орг. тарифов больше 1, тогда создадим еще одну страницу для раздела 2
		Если ВсеТарифы.Индекс(СтрокаРезультата) < ИндексПоследнейСтроки Тогда  
			ДанныеРаздела2 = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейРаздела2);
			СтраницаРаздела2 = Контейнер.Раздел21.Добавить();
			СтраницаРаздела2.Данные.Добавить(ДанныеРаздела2);
		КонецЕсли;
		
	КонецЦикла;
	
	// Разделы 2.2 и 2.3 
	
	Результат = ОписаниеТаблиц.Раздел22Доходы2014;
	Если Результат.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел22, Результат[0]);
	КонецЕсли;
	
	Результат = ОписаниеТаблиц.Раздел22Численность2014;
	Если Результат.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел22, Результат[0]);
	КонецЕсли;
	
	Результат = ОписаниеТаблиц.Раздел22Взносы2014;
	Если Результат.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел22, Результат[0]);
	КонецЕсли;
	
	Если ЗаполнятьРаздел32 Тогда
		// Раздел 3.2
		Доход = 0;
		// Определяем, необходимо ли формировать доходы
		ЗапросПоДоходам = Новый Запрос;
		
		// Добавляем периода для анализа заполненности доходов
		Квартал = НачалоКвартала(НачалоПериода);
		// первый месяц
		ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(Квартал,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период ПОМЕСТИТЬ ВТПериодыКварталов";
		Квартал = НачалоКвартала(ДобавитьМесяц(Квартал,3));
		// прибавим остальные месяцы
		Пока КонецДня(Квартал) < КонецМесяца(ДатаКонцаПериодаОтчета) Цикл
			ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(Квартал,"ДФ=гггг,М,д,Ч,м,с") + ")";
			Квартал = НачалоКвартала(ДобавитьМесяц(Квартал,3));
		КонецЦикла;
		ЗапросПоДоходам.Текст = ПериодыТекст;
		
		
		ОсновнойТекстЗапросаПоДоходам = "ВЫБРАТЬ
		|	ПериодыКварталов.Период КАК Период,
		|	ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.ДоходБазаОборот, 0) КАК Сумма
		|ИЗ
		|	ВТПериодыКварталов КАК ПериодыКварталов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, Квартал, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
		|		ПО (КнигаУчетаДоходовИРасходовОбороты.Период = ПериодыКварталов.Период)";
		
		ЗапросПоДоходам.Текст =ПериодыТекст +"; "+ ОсновнойТекстЗапросаПоДоходам;
		ЗапросПоДоходам.УстановитьПараметр("Организация", Организация);
		ЗапросПоДоходам.УстановитьПараметр("НачалоПериода", НачалоПериода);
		ЗапросПоДоходам.УстановитьПараметр("КонецПериода", КонецДня(ДатаКонцаПериодаОтчета));
		ВыборкаПоДоходу = ЗапросПоДоходам.Выполнить().Выбрать();
		
		НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
		УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
		МенеджерВТДляДоходов = Новый МенеджерВременныхТаблиц;
		РегламентированнаяОтчетностьУСН.ПолучитьВТТаблицуКурсовВалютЗаПериод(МенеджерВТДляДоходов, НачалоКвартала(ДатаКонцаПериодаОтчета),КонецКвартала(ДатаКонцаПериодаОтчета), НациональнаяВалюта, УчетВалютныхОпераций);
		Пока ВыборкаПоДоходу.Следующий() Цикл
			Если ВыборкаПоДоходу.Сумма = 0 Тогда
				// Формируем доход за отчетный период
				// 
				Результат = Новый Структура;
				Результат.Вставить("ДокументФормирования", Документы.ЗаписиУСН.ПустаяСсылка());
				Результат.Вставить("ЕстьОшибки", Ложь);
				Результат.Вставить("ЕстьПредупреждения", Ложь);
				Результат.Вставить("ДополнительнаяИнформация", "");
				
				Результат.ДокументФормирования = РегламентированнаяОтчетностьУСН.ПолучитьДокументЗаписейУСНВПериодеПоВиду(
					Организация,
					КонецКвартала(ДатаКонцаПериодаОтчета),
					Перечисления.ВидыЗаписейФормированийКУДиР.ДоходыПрочие);
				
				РегламентированнаяОтчетностьУСН.ВыполнитьФормированиеПоДоходам(
					Организация,
					КонецКвартала(ДатаКонцаПериодаОтчета),
					Результат,
					МенеджерВТДляДоходов);
			КонецЕсли;
		КонецЦикла;
		
		ВыборкаПоДоходу = ЗапросПоДоходам.Выполнить().Выбрать();
		Пока ВыборкаПоДоходу.Следующий() Цикл
			Доход = Доход + ВыборкаПоДоходу.Сумма;
		КонецЦикла;
		Контейнер.Раздел32.П000360036103 = Доход;
		Контейнер.Раздел32.П000360036203 = Доход;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетПоказателей_РСВ1_2015(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные = Ложь, МенеджерВТ)
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода", КонецДня(ОкончаниеПериода));
	Запрос.УстановитьПараметр("КонецГода", КонецГода(ОкончаниеПериода));
	Запрос.УстановитьПараметр("ДалекаяДата", ДобавитьМесяц(НачалоГода(ОкончаниеПериода), 1200));
	Запрос.УстановитьПараметр("ГодОтчетногоПериода", Год(ОкончаниеПериода));
	Запрос.УстановитьПараметр("Месяц1", Месяц(ОкончаниеПериода) - 2);
	Запрос.УстановитьПараметр("Месяц2", Месяц(ОкончаниеПериода) - 1);
	Запрос.УстановитьПараметр("Месяц3", Месяц(ОкончаниеПериода));
	// Все данные отчета берутся по обособленному подразделению (указанной организации)
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОбщийНалоговыйРежим", СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "ОбщийНалоговыйРежим")); 
	Запрос.УстановитьПараметр("УпрощенныйНалоговыйРежим", СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "УпрощенныйНалоговыйРежим")); 
	Запрос.УстановитьПараметр("ОрганизацияИнвалидов", СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "ОрганизацияИнвалидов"));
	
	// ----------------------------------------------------------------------------------
	// ТЕКСТЫ ЗАПРОСОВ
	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Месяц1 КАК МесяцПериода
	|ПОМЕСТИТЬ ВТМесяцыОтчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Месяц2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Месяц3";
	Запрос.Выполнить();
	
	// Титульный лист
	
	Если ОписаниеТаблиц.Свойство("ВсегоЗастрахованных") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Организации.ФизическоеЛицо), 0) КАК КолЗастрахованных
		|ИЗ
		|	ВТФизЛицаСОблагаемойБазой КАК Организации";
		ОписаниеТаблиц.ВсегоЗастрахованных = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	
	// Раздел 2.1 
	
	Если ОписаниеТаблиц.Свойство("Раздел21Тарифы2014") Или ОписаниеТаблиц.Свойство("Раздел21Доходы2014") Или ОписаниеТаблиц.Свойство("Раздел21Численность2014") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОДоходах.Период КАК Период,
		|	СведенияОДоходах.ФизическоеЛицо,
		|	СведенияОДоходах.ФизическоеЛицоНаименование,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
		|	ЕСТЬNULL(КодыВидовТарифаСтраховыхВзносов.КодПФР, """") КАК КодТарифа,
		|	СУММА(СведенияОДоходах.БазаПФР) КАК ОблагаемаяБазаПФР,
		|	СУММА(СведенияОДоходах.БазаФОМС) КАК ОблагаемаяБазаФОМС,
		|	СУММА(СведенияОДоходах.НачисленоВсего) КАК НачисленоВсего,
		|	СУММА(СведенияОДоходах.СуммаПревысившаяПределПФР) КАК СуммаПревысившаяПределПФР,
		|	СУММА(СведенияОДоходах.СуммаПревысившаяПределФОМС) КАК СуммаПревысившаяПределФОМС,
		|	СУММА(СведенияОДоходах.НеОблагаетсяПФР - СведенияОДоходах.РасходыПоАвторскимПФР) КАК НеОблагается,
		|	СУММА(СведенияОДоходах.НеОблагаетсяФОМС - СведенияОДоходах.РасходыПоАвторскимФОМС) КАК НеОблагаетсяФОМС,
		|	СУММА(СведенияОДоходах.ИсчисленоПФРССуммПревышения) КАК ИсчисленоПФРССуммПревышения,
		|	СУММА(СведенияОДоходах.РасходыПоАвторскимПФР) КАК РасходыПоАвторскимПФР,
		|	СУММА(СведенияОДоходах.РасходыПоАвторскимФОМС) КАК РасходыПоАвторскимФОМС
		|ПОМЕСТИТЬ ВТДоходыВзносов
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО СведенияОДоходах.ФизическоеЛицо = Сотрудники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКодыВидовТарифаСтраховыхВзносов КАК КодыВидовТарифаСтраховыхВзносов
		|		ПО (СведенияОДоходах.ВидТарифаСтраховыхВзносов = КодыВидовТарифаСтраховыхВзносов.ВидТарифаСтраховыхВзносов)
		|			И (ГОД(СведенияОДоходах.Период) МЕЖДУ КодыВидовТарифаСтраховыхВзносов.ГодС И КодыВидовТарифаСтраховыхВзносов.ГодПо)
		|ГДЕ
		|	СведенияОДоходах.Организация = &Организация
		|	И СведенияОДоходах.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				Организации.ФизическоеЛицо
		|			ИЗ
		|				ВТФизЛицаСОблагаемойБазой КАК Организации)
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ФизическоеЛицо,
		|	СведенияОДоходах.ФизическоеЛицоНаименование,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	ЕСТЬNULL(КодыВидовТарифаСтраховыхВзносов.КодПФР, """")
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	ВидТарифаСтраховыхВзносов
		|;";
		
		Запрос.Выполнить();
	КонецЕсли;
	
	Если ОписаниеТаблиц.Свойство("Раздел21Тарифы2014") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Доходы.КодТарифа,
		|	Доходы.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов
		|ИЗ
		|	ВТДоходыВзносов КАК Доходы
		|
		|УПОРЯДОЧИТЬ ПО
		|	Доходы.КодТарифа";
		ОписаниеТаблиц.Раздел21Тарифы2014 = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	Если ОписаниеТаблиц.Свойство("Раздел21Доходы2014") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Доходы.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
		|	Доходы.КодТарифа КАК КодТарифа,
		|	ЕСТЬNULL(СУММА(Доходы.НачисленоВсего), 0) КАК П000210020003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020005,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020006,
		|	ЕСТЬNULL(СУММА(Доходы.НеОблагается), 0) КАК П000210020103,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.НеОблагается
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020104,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.НеОблагается
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020105,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.НеОблагается
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020106,
		|	ЕСТЬNULL(СУММА(Доходы.РасходыПоАвторскимПФР), 0) КАК П000210020203,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.РасходыПоАвторскимПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020204,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.РасходыПоАвторскимПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020205,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.РасходыПоАвторскимПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020206,
		|	ЕСТЬNULL(СУММА(Доходы.СуммаПревысившаяПределПФР), 0) КАК П000210020303,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.СуммаПревысившаяПределПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020304,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.СуммаПревысившаяПределПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020305,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.СуммаПревысившаяПределПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020306,
		|	ЕСТЬNULL(СУММА(Доходы.ИсчисленоПФРССуммПревышения), 0) КАК П000210020603,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.ИсчисленоПФРССуммПревышения
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020604,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.ИсчисленоПФРССуммПревышения
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020605,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.ИсчисленоПФРССуммПревышения
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020606,
		|	ЕСТЬNULL(СУММА(Доходы.НачисленоВсего), 0) КАК П000210021003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021005,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021006,
		|	ЕСТЬNULL(СУММА(Доходы.НеОблагаетсяФОМС), 0) КАК П000210021103,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.НеОблагаетсяФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021104,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.НеОблагаетсяФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021105,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.НеОблагаетсяФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021106,
		|	ЕСТЬNULL(СУММА(Доходы.РасходыПоАвторскимФОМС), 0) КАК П000210021203,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.РасходыПоАвторскимФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021204,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.РасходыПоАвторскимФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021205,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.РасходыПоАвторскимФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021206,
		|	ЕСТЬNULL(СУММА(Доходы.СуммаПревысившаяПределФОМС), 0) КАК П000210021303,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.СуммаПревысившаяПределФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021304,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.СуммаПревысившаяПределФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021305,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.СуммаПревысившаяПределФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021306
		|ИЗ
		|	ВТДоходыВзносов КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.ВидТарифаСтраховыхВзносов,
		|	Доходы.КодТарифа
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидТарифаСтраховыхВзносов
		|;";
		ОписаниеТаблиц.Раздел21Доходы2014 = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	Если ОписаниеТаблиц.Свойство("Раздел21Численность2014") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Доходы.Период,
		|	Доходы.ФизическоеЛицо,
		|	Доходы.ВидТарифаСтраховыхВзносов
		|ПОМЕСТИТЬ ВТЛицаСПревышениемБазы
		|ИЗ
		|	ВТДоходыВзносов КАК Доходы
		|ГДЕ
		|	Доходы.СуммаПревысившаяПределПФР > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЛицаСПревышениемБазы.ФизическоеЛицо) КАК ВсегоФизлиц,
		|	ЛицаСПревышениемБазы.ВидТарифаСтраховыхВзносов
		|ПОМЕСТИТЬ ВТЛицаСПревышениемБазыЗаВсеМесяцы
		|ИЗ
		|	ВТЛицаСПревышениемБазы КАК ЛицаСПревышениемБазы
		|
		|СГРУППИРОВАТЬ ПО
		|	ЛицаСПревышениемБазы.ВидТарифаСтраховыхВзносов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЛицаСПревышениемБазы.Период,
		|	ЛицаСПревышениемБазы.ВидТарифаСтраховыхВзносов,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЛицаСПревышениемБазы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЛицаСПревышениемБазыЗаОтдельныеМесяцы
		|ИЗ
		|	ВТЛицаСПревышениемБазы КАК ЛицаСПревышениемБазы
		|
		|СГРУППИРОВАТЬ ПО
		|	ЛицаСПревышениемБазы.ВидТарифаСтраховыхВзносов,
		|	ЛицаСПревышениемБазы.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Доходы.Период,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доходы.ФизическоеЛицо) КАК ВсегоФизлиц,
		|	Доходы.ВидТарифаСтраховыхВзносов
		|ПОМЕСТИТЬ ВТЛицаСВзносамиЗаОтдельныеМесяцы
		|ИЗ
		|	ВТДоходыВзносов КАК Доходы
		|ГДЕ
		|	Доходы.ОблагаемаяБазаПФР <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.Период,
		|	Доходы.ВидТарифаСтраховыхВзносов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доходы.ФизическоеЛицо) КАК ВсегоФизлиц,
		|	Доходы.ВидТарифаСтраховыхВзносов
		|ПОМЕСТИТЬ ВТЛицаСВзносамиЗаВсеМесяцы
		|ИЗ
		|	ВТДоходыВзносов КАК Доходы
		|ГДЕ
		|	Доходы.ОблагаемаяБазаПФР <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.ВидТарифаСтраховыхВзносов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Тарифы.ВидТарифаСтраховыхВзносов,
		|	МАКСИМУМ(ЕСТЬNULL(ЛицаСВзносамиЗаВсеМесяцы.ВсегоФизлиц, 0)) КАК П000210020703,
		|	МАКСИМУМ(ЕСТЬNULL(ЛицаСПревышениемБазыЗаВсеМесяцы.ВсегоФизлиц, 0)) КАК П000210020803,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВзносамиЗаОтдельныеМесяцы.Период) = &Месяц1
		|				ТОГДА ЕСТЬNULL(ЛицаСВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000210020704,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВзносамиЗаОтдельныеМесяцы.Период) = &Месяц2
		|				ТОГДА ЕСТЬNULL(ЛицаСВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000210020705,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВзносамиЗаОтдельныеМесяцы.Период) = &Месяц3
		|				ТОГДА ЕСТЬNULL(ЛицаСВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000210020706,
		|	МАКСИМУМ(ЕСТЬNULL(ЛицаСВзносамиЗаВсеМесяцы.ВсегоФизлиц, 0)) КАК П000210021503,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВзносамиЗаОтдельныеМесяцы.Период) = &Месяц1
		|				ТОГДА ЕСТЬNULL(ЛицаСВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000210021504,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВзносамиЗаОтдельныеМесяцы.Период) = &Месяц2
		|				ТОГДА ЕСТЬNULL(ЛицаСВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000210021505,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВзносамиЗаОтдельныеМесяцы.Период) = &Месяц3
		|				ТОГДА ЕСТЬNULL(ЛицаСВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000210021506,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.Период) = &Месяц1
		|				ТОГДА ЕСТЬNULL(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000210020804,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.Период) = &Месяц2
		|				ТОГДА ЕСТЬNULL(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000210020805,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.Период) = &Месяц3
		|				ТОГДА ЕСТЬNULL(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000210020806
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Доходы.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов
		|	ИЗ
		|		ВТДоходыВзносов КАК Доходы) КАК Тарифы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМесяцыОтчета КАК МесяцыОтчета
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСВзносамиЗаВсеМесяцы КАК ЛицаСВзносамиЗаВсеМесяцы
		|		ПО Тарифы.ВидТарифаСтраховыхВзносов = ЛицаСВзносамиЗаВсеМесяцы.ВидТарифаСтраховыхВзносов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСПревышениемБазыЗаВсеМесяцы КАК ЛицаСПревышениемБазыЗаВсеМесяцы
		|		ПО Тарифы.ВидТарифаСтраховыхВзносов = ЛицаСПревышениемБазыЗаВсеМесяцы.ВидТарифаСтраховыхВзносов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСВзносамиЗаОтдельныеМесяцы КАК ЛицаСВзносамиЗаОтдельныеМесяцы
		|		ПО Тарифы.ВидТарифаСтраховыхВзносов = ЛицаСВзносамиЗаОтдельныеМесяцы.ВидТарифаСтраховыхВзносов
		|			И (МесяцыОтчета.МесяцПериода = МЕСЯЦ(ЛицаСВзносамиЗаОтдельныеМесяцы.Период))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСПревышениемБазыЗаОтдельныеМесяцы КАК ЛицаСПревышениемБазыЗаОтдельныеМесяцы
		|		ПО Тарифы.ВидТарифаСтраховыхВзносов = ЛицаСПревышениемБазыЗаОтдельныеМесяцы.ВидТарифаСтраховыхВзносов
		|			И (МесяцыОтчета.МесяцПериода = МЕСЯЦ(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.Период))
		|
		|СГРУППИРОВАТЬ ПО
		|	Тарифы.ВидТарифаСтраховыхВзносов
		|
		|УПОРЯДОЧИТЬ ПО
		|	Тарифы.ВидТарифаСтраховыхВзносов";
		
		ОписаниеТаблиц.Раздел21Численность2014 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	Если ОписаниеТаблиц.Свойство("Раздел21Взносы2014") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВзносыФизлиц.ПФРПоСуммарномуТарифу), 0) КАК П000210020503,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц1
		|					ТОГДА ВзносыФизлиц.ПФРПоСуммарномуТарифу
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020504,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц2
		|					ТОГДА ВзносыФизлиц.ПФРПоСуммарномуТарифу
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020505,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц3
		|					ТОГДА ВзносыФизлиц.ПФРПоСуммарномуТарифу
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210020506,
		|	ЕСТЬNULL(СУММА(ВзносыФизлиц.ФФОМС), 0) КАК П000210021403,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц1
		|					ТОГДА ВзносыФизлиц.ФФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021404,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц2
		|					ТОГДА ВзносыФизлиц.ФФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021405,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц3
		|					ТОГДА ВзносыФизлиц.ФФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000210021406,
		|	ВзносыФизлиц.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК ВзносыФизлиц
		|ГДЕ
		|	ВзносыФизлиц.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				Организации.ФизическоеЛицо
		|			ИЗ
		|				ВТФизЛицаСОблагаемойБазой КАК Организации)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзносыФизлиц.ВидТарифаСтраховыхВзносов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидТарифаСтраховыхВзносов";
		ОписаниеТаблиц.Раздел21Взносы2014 = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	// Разделы 2.2 и 2.3 
	Если ОписаниеТаблиц.Свойство("Раздел22Доходы2014") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОДоходах.Период КАК Период,
		|	СведенияОДоходах.ФизическоеЛицо,
		|	0 КАК НачисленоВсегоЗаЗанятыхНаПодземныхИВредныхРаботах,
		|	0 КАК НачисленоВсегоЗаЗанятыхНаТяжелыхИПрочихРаботах,
		|	0 КАК НеОблагаетсяЗаЗанятыхНаПодземныхИВредныхРаботах,
		|	0 КАК НеОблагаетсяЗаЗанятыхНаТяжелыхИПрочихРаботах,
		|	0 КАК ОблагаемаяБазаПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
		|	0 КАК ОблагаемаяБазаПФРЗаЗанятыхНаТяжелыхИПрочихРаботах
		|ПОМЕСТИТЬ ВТДоходыВредныхВзносов
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
		|ГДЕ
		|	СведенияОДоходах.Организация = &Организация
		|	И СведенияОДоходах.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				Организации.ФизическоеЛицо
		|			ИЗ
		|				ВТФизЛицаСОблагаемойБазой КАК Организации)
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ФизическоеЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(Доходы.НачисленоВсегоЗаЗанятыхНаПодземныхИВредныхРаботах), 0) КАК П000220022003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.НачисленоВсегоЗаЗанятыхНаПодземныхИВредныхРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000220022004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.НачисленоВсегоЗаЗанятыхНаПодземныхИВредныхРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000220022005,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.НачисленоВсегоЗаЗанятыхНаПодземныхИВредныхРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000220022006,
		|	ЕСТЬNULL(СУММА(Доходы.НеОблагаетсяЗаЗанятыхНаПодземныхИВредныхРаботах), 0) КАК П000220022103,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.НеОблагаетсяЗаЗанятыхНаПодземныхИВредныхРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000220022104,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.НеОблагаетсяЗаЗанятыхНаПодземныхИВредныхРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000220022105,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.НеОблагаетсяЗаЗанятыхНаПодземныхИВредныхРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000220022106,
		|	ЕСТЬNULL(СУММА(Доходы.НачисленоВсегоЗаЗанятыхНаТяжелыхИПрочихРаботах), 0) КАК П000230023003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.НачисленоВсегоЗаЗанятыхНаТяжелыхИПрочихРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000230023004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.НачисленоВсегоЗаЗанятыхНаТяжелыхИПрочихРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000230023005,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.НачисленоВсегоЗаЗанятыхНаТяжелыхИПрочихРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000230023006,
		|	ЕСТЬNULL(СУММА(Доходы.НеОблагаетсяЗаЗанятыхНаТяжелыхИПрочихРаботах), 0) КАК П000230023103,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
		|					ТОГДА Доходы.НеОблагаетсяЗаЗанятыхНаТяжелыхИПрочихРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000230023104,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
		|					ТОГДА Доходы.НеОблагаетсяЗаЗанятыхНаТяжелыхИПрочихРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000230023105,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
		|					ТОГДА Доходы.НеОблагаетсяЗаЗанятыхНаТяжелыхИПрочихРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000230023106
		|ИЗ
		|	ВТДоходыВредныхВзносов КАК Доходы
		|;";
		ОписаниеТаблиц.Раздел22Доходы2014 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	Если ОписаниеТаблиц.Свойство("Раздел22Численность2014") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Взносы.Период,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взносы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЛицаСВреднымиВзносамиЗаОтдельныеМесяцы
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК Взносы
		|ГДЕ
		|	Ложь
		|
		|СГРУППИРОВАТЬ ПО
		|	Взносы.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Взносы.Период,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взносы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК Взносы
		|ГДЕ
		|	Ложь
		|
		|СГРУППИРОВАТЬ ПО
		|	Взносы.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взносы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЛицаСВреднымиВзносамиЗаВсеМесяцы
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК Взносы
		|ГДЕ
		|	Ложь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взносы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЛицаСТяжелымиВзносамиЗаВсеМесяцы
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК Взносы
		|ГДЕ
		|	Ложь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЕСТЬNULL(ЛицаСВреднымиВзносамиЗаВсеМесяцы.ВсегоФизлиц, 0)) КАК П000220022503,
		|	МАКСИМУМ(ЕСТЬNULL(ЛицаСТяжелымиВзносамиЗаВсеМесяцы.ВсегоФизлиц, 0)) КАК П000230023503,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц1
		|				ТОГДА ЕСТЬNULL(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000220022504,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц2
		|				ТОГДА ЕСТЬNULL(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000220022505,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц3
		|				ТОГДА ЕСТЬNULL(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000220022506,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц1
		|				ТОГДА ЕСТЬNULL(ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000230023504,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц2
		|				ТОГДА ЕСТЬNULL(ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000230023505,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц3
		|				ТОГДА ЕСТЬNULL(ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000230023506
		|ИЗ
		|	ВТМесяцыОтчета КАК МесяцыОтчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСВреднымиВзносамиЗаВсеМесяцы КАК ЛицаСВреднымиВзносамиЗаВсеМесяцы
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСТяжелымиВзносамиЗаВсеМесяцы КАК ЛицаСТяжелымиВзносамиЗаВсеМесяцы
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСВреднымиВзносамиЗаОтдельныеМесяцы КАК ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы
		|		ПО МесяцыОтчета.МесяцПериода = ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы КАК ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы
		|		ПО МесяцыОтчета.МесяцПериода = ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.Период
		|;";
		ОписаниеТаблиц.Раздел22Численность2014 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	Если ОписаниеТаблиц.Свойство("Раздел22Взносы2014") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	0 КАК П000220022403,
		|	0 КАК П000220022404,
		|	0 КАК П000220022405,
		|	0 КАК П000220022406,
		|	0 КАК П000230023403,
		|	0 КАК П000230023404,
		|	0 КАК П000230023405,
		|	0 КАК П000230023406
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК ВзносыФизлиц
		|ГДЕ
		|	ВзносыФизлиц.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				Организации.ФизическоеЛицо
		|			ИЗ
		|				ВТФизЛицаСОблагаемойБазой КАК Организации)
		|;";
		ОписаниеТаблиц.Раздел22Взносы2014 = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	
КонецПроцедуры



Процедура ОписаниеПоказателей_РСВ_2017Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000110000101", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110001001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110001002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110001003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110001004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110001005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110002001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110002002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110002003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110002004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110002005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110002101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110002102", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110002103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110002104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110002105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110003001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110003004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110003005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110004001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110004004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110004005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110005101", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110005103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110005104", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110005105", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110006101", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110006103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110006104", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110006105", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110006201", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110006203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110006204", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011110006205", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011120001001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011120001002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011120001003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011120001004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011120001005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011120002001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011120002002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011120002003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011120002004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011120002005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011120003001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011120003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011120003004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011120003005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011120004001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011120004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011120004004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011120004005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011120006001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011120006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011120006004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П011120006005", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11131М100101", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11131М101001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11131М101002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11131М101003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11131М101004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11131М101005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11131М102001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11131М102003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11131М102004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11131М102005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11131М103001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11131М103003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11131М103004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11131М103005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11131М105001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11131М105003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11131М105004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11131М105005", Истина, Истина);
		
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11132М100101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11132М100301", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11132М101001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11132М101002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11132М101003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11132М101004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11132М101005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11132М102001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11132М102003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11132М102004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11132М102005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11132М103001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11132М103003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11132М103004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11132М103005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11132М105001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11132М105003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11132М105004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П11132М105005", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П01114М100101", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П01114М101001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П01114М101002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П01114М101003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П01114М101004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П01114М101005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П01114М102001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П01114М102003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П01114М102004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П01114М102005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П01114М103001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П01114М103003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П01114М103004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П01114М103005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П01114М105001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П01114М105003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П01114М105004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П01114М105005", Истина, Истина);
		
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120000101", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120001001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120001002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120001003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120001004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120001005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120002001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120002004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120002005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120003001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120003004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120003005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120004001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120004004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120004005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120005101", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120005103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120005104", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120005105", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120005201", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120005203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120005204", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120005205", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120005301", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120005303", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120005304", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120005305", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120005401", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120005403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120005404", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120005405", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120006001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120006004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120006005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120007001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120007004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120007005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120008001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120008004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000120008005", Истина, Истина);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00019М102001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00019М103001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00019М104001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00019М105001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00019М106001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00019М107001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00019М107002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00019М108001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00019М108003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00019М108004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00019М108005", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001001", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310006001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310007001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310008001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310009001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310010001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310011001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310012001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310013001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310014001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310015001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310015002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310016001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310017001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310018001", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00321М119001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00321М120001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00321М121001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00321М122001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00321М123001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00321М124001", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00322М126001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00322М127001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00322М128001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00322М129001", Истина, Истина);
	
КонецПроцедуры


Процедура ОписаниеПоказателей_РСВ_2017Кв1_СоцСтрах(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130001001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130001002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130001004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130001101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130001102", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130001103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130001104", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130002001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130002002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130002101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130002102", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130002103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130003001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130003002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130003004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130003101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130003102", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130003103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130003104", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130004002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130005002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130005003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130006001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130006101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130006102", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130006103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130006104", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130006201", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130006202", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130006203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130006204", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130007002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130007004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130008004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130009001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130009002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000130009003", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140002002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140002003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140002004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140003002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140003004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140004002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140005002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140005003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140005004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140006002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140006003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140006004", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140008002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140008003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140008004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140009002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140009003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140009004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140010002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140011002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140011003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140011004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140012002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140012003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140012004", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140014002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140014003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140014004", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140016002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140016003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140016004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140017002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140017003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140017004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140018002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140019002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140019003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140019004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140020002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140020003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140020004", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140022002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140022003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140022004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140023002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140023003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140023004", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140030003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140030004", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000140031004", Истина, Истина);
	
КонецПроцедуры

Процедура ЗначенияПоказателей_РСВ_2017Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ДатаКонцаПериодаОтчета = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
	Организация = ПараметрыОтчета.Организация;
	
	НачалоПериода = НачалоГода(ДатаКонцаПериодаОтчета);
	ОкончаниеПериода = КонецМесяца(ДатаКонцаПериодаОтчета);
	ДатаАктуальности = Макс(ОкончаниеПериода, КонецДня(ПараметрыОтчета.ДатаПодписи));
	
	// очищаем разделы
	ПоказателиОтчета = Новый Структура;
	ОписаниеПоказателей_РСВ_2017Кв1(ПоказателиОтчета);
	
	Раздел1Прил1 = Контейнер.Раздел1Прил1.Строки;
	СтруктураПолейПрил1Подразделы1и2 = ОбщегоНазначения.СкопироватьРекурсивно(Раздел1Прил1[0].Строки[0].Строки[0].Данные);
	СтруктураПолейПрил1Подраздел3_1 = ОбщегоНазначения.СкопироватьРекурсивно(Раздел1Прил1[0].Строки[1].Строки[0].ДанныеМногострочныхЧастей.П11131М1.Строки[0].Данные);
	СтруктураПолейПрил1Подраздел3_2 = ОбщегоНазначения.СкопироватьРекурсивно(Раздел1Прил1[0].Строки[2].Строки[0].ДанныеМногострочныхЧастей.П11132М1.Строки[0].Данные);
	СтруктураПолейПрил1Подраздел4 = ОбщегоНазначения.СкопироватьРекурсивно(Раздел1Прил1[0].Строки[3].Строки[0].ДанныеМногострочныхЧастей.П01114М1.Строки[0].Данные);
	
	Раздел1Прил1.Очистить();
	ОчиститьПоляСтруктурыПоказателей(ПоказателиОтчета, СтруктураПолейПрил1Подразделы1и2);
	ОчиститьПоляСтруктурыПоказателей(ПоказателиОтчета, СтруктураПолейПрил1Подраздел3_1);
	ОчиститьПоляСтруктурыПоказателей(ПоказателиОтчета, СтруктураПолейПрил1Подраздел3_2);
	ОчиститьПоляСтруктурыПоказателей(ПоказателиОтчета, СтруктураПолейПрил1Подраздел4);
	
	Раздел1Прил2 = Контейнер.Раздел1Прил2.Строки[0].Данные;
	ОчиститьПоляСтруктурыПоказателей(ПоказателиОтчета, Раздел1Прил2);
	
	Раздел1Прил8 = Контейнер.Раздел1Прил8.Строки[0].ДанныеМногострочныхЧастей.П00018М1.Строки;
	СтруктураПолейПрил8 = ОбщегоНазначения.СкопироватьРекурсивно(Раздел1Прил8[0].Данные);
	Раздел1Прил8.Очистить();
	ОчиститьПоляСтруктурыПоказателей(ПоказателиОтчета, СтруктураПолейПрил8);
	СтрокаПрил8 = Раздел1Прил8.Добавить();
	СтрокаПрил8.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейПрил8);
	СтрокаПрил8.ДанныеМногострочныхЧастей = Новый Структура;
	
	Раздел1Прил9 = Контейнер.Раздел1Прил9.Строки[0].ДанныеМногострочныхЧастей.П00019М1.Строки;
	СтруктураПолейПрил9 = ОбщегоНазначения.СкопироватьРекурсивно(Раздел1Прил9[0].Данные);
	Раздел1Прил9.Очистить();
	ОчиститьПоляСтруктурыПоказателей(ПоказателиОтчета, СтруктураПолейПрил9);
	
	Раздел3 = Контейнер.Раздел3.Строки;
	СтруктураПолейРаздел3 = ОбщегоНазначения.СкопироватьРекурсивно(Раздел3[0].Данные);
	СтруктураПолейПодраздел321 = ОбщегоНазначения.СкопироватьРекурсивно(Раздел3[0].ДанныеМногострочныхЧастей.П00321М1.Строки[0].Данные);
	СтруктураПолейПодраздел322 = ОбщегоНазначения.СкопироватьРекурсивно(Раздел3[0].ДанныеМногострочныхЧастей.П00322М1.Строки[0].Данные);
	Раздел3.Очистить();
	ОчиститьПоляСтруктурыПоказателей(ПоказателиОтчета, СтруктураПолейРаздел3);
	ОчиститьПоляСтруктурыПоказателей(ПоказателиОтчета, СтруктураПолейПодраздел321);
	ОчиститьПоляСтруктурыПоказателей(ПоказателиОтчета, СтруктураПолейПодраздел322);
	
	ОписаниеТаблиц = Новый Структура("Подразделы12Доходы2017,Подразделы12Численность2017,Подразделы12Взносы2017,Подразделы12Тарифы2017,Подраздел31Доходы2017,Подраздел31Численность2017,Подраздел31Взносы2017,Подраздел32Основания2017,Подраздел32Численность2017,Подраздел32Доходы2017,Подраздел32Взносы2017,ВсегоЗастрахованных,ДоходыФСС2017,Иностранцы,Подраздел3Физлица2017,Подраздел321Доходы2017,Подраздел322Доходы2017,Подраздел4Доходы2017,Подраздел4Численность2017,Подраздел4Взносы2017");
	РасчетПоказателей_РСВ_2017(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, Ложь, ДатаАктуальности);
	
	// Вывод данных в отчет
	
	КоличествоЗастрахованных = Новый Структура;
	Если ОписаниеТаблиц.ВсегоЗастрахованных.Количество() > 0 Тогда
		КоличествоЗастрахованных = ОписаниеТаблиц.ВсегоЗастрахованных[0];
	КонецЕсли;
	
	// Приложение 1 Раздела 1 
	ВсеТарифы = ОписаниеТаблиц.Подразделы12Тарифы2017;
	ТаблицаДоходов = ОписаниеТаблиц.Подразделы12Доходы2017;
	ТаблицаКоличеств = ОписаниеТаблиц.Подразделы12Численность2017;
	ТаблицаВзносов = ОписаниеТаблиц.Подразделы12Взносы2017;
	ТаблицаДоходовБезСпецОценки = ОписаниеТаблиц.Подраздел31Доходы2017;
	ТаблицаКоличествБезСпецОценки = ОписаниеТаблиц.Подраздел31Численность2017;
	ТаблицаВзносовБезСпецОценки = ОписаниеТаблиц.Подраздел31Взносы2017;
	ВсеОснованияСпецОценки = ОписаниеТаблиц.Подраздел32Основания2017;
	ТаблицаДоходовСоСпецОценкой = ОписаниеТаблиц.Подраздел32Доходы2017;
	ТаблицаКоличествСоСпецОценкой = ОписаниеТаблиц.Подраздел32Численность2017;
	ТаблицаВзносовСоСпецОценкой = ОписаниеТаблиц.Подраздел32Взносы2017;
	ТаблицаДоходовАвиаторовГорняков = ОписаниеТаблиц.Подраздел4Доходы2017;
	ТаблицаКоличествАвиаторовГорняков = ОписаниеТаблиц.Подраздел4Численность2017;
	ТаблицаВзносовАвиаторовГорняков = ОписаниеТаблиц.Подраздел4Взносы2017;
	Для каждого СтрокаРезультата Из ВсеТарифы Цикл
		
		СтрокаДоходов = ТаблицаДоходов.Найти(СтрокаРезультата.ВидТарифаСтраховыхВзносов,"ВидТарифаСтраховыхВзносов");
		СтрокаКоличеств = ТаблицаКоличеств.Найти(СтрокаРезультата.ВидТарифаСтраховыхВзносов,"ВидТарифаСтраховыхВзносов");
		СтрокаВзносов = ТаблицаВзносов.Найти(СтрокаРезультата.ВидТарифаСтраховыхВзносов,"ВидТарифаСтраховыхВзносов");
		
		Если СтрокаДоходов = Неопределено И СтрокаВзносов = Неопределено Тогда // По текущему тарифу нет данных.
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Раздел1Прил1.Добавить();
		НоваяСтрока.Данные = Новый Структура("П000110000101",СтрокаРезультата.КодТарифа);
		НоваяСтрока.ДанныеМногострочныхЧастей = Новый Структура();
		СтрокаПодразделов1и2 = НоваяСтрока.Строки.Добавить().Строки.Добавить(); 
		СтрокаПодразделов1и2.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейПрил1Подразделы1и2); 
		СтрокаПодразделов1и2.ДанныеМногострочныхЧастей = Новый Структура();
		
		// Подразделы 1 и 2
		
		ЗаполнитьЗначенияСвойств(СтрокаПодразделов1и2.Данные, КоличествоЗастрахованных);
		Если СтрокаДоходов <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаПодразделов1и2.Данные,СтрокаДоходов);
		КонецЕсли;
		Если СтрокаКоличеств <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаПодразделов1и2.Данные,СтрокаКоличеств);
		КонецЕсли;
		Если СтрокаВзносов <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаПодразделов1и2.Данные,СтрокаВзносов);
		КонецЕсли;
		
		СтруктураПоискаПоТарифу = Новый Структура("ВидТарифаСтраховыхВзносов", СтрокаРезультата.ВидТарифаСтраховыхВзносов);
		
		// Подраздел 3.1
		
		Результат = ТаблицаДоходовБезСпецОценки.НайтиСтроки(СтруктураПоискаПоТарифу);
		Если Результат.Количество() > 0 Тогда
			
			Подраздел3_1 = НоваяСтрока.Строки.Добавить().Строки;
			СтрокаПодраздела3_1 = Подраздел3_1.Добавить(); 
			СтрокаПодраздела3_1.Данные = Новый Структура(); 
			СтрокаПодраздела3_1.ДанныеМногострочныхЧастей = Новый Структура("П11131М1", НовоеПустоеДерево());
			
			ДанныеПодземныеИВредныеРаботы = Неопределено;
			ДанныеТяжелыеИПрочиеРаботы = Неопределено;
			Для каждого СтрокаДанных Из Результат Цикл
				НоваяСтрокаПодраздела = СтрокаПодраздела3_1.ДанныеМногострочныхЧастей.П11131М1.Строки.Добавить();
				НоваяСтрокаПодраздела.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейПрил1Подраздел3_1);
				НоваяСтрокаПодраздела.ДанныеМногострочныхЧастей = Новый Структура();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПодраздела.Данные, СтрокаДанных);
				Если СтрокаДанных.П11131М100101 = "1" Тогда
					ДанныеПодземныеИВредныеРаботы = НоваяСтрокаПодраздела.Данные
				Иначе
					ДанныеТяжелыеИПрочиеРаботы = НоваяСтрокаПодраздела.Данные
				КонецЕсли;
			КонецЦикла;
			
			Для каждого СтрокаДанных Из ТаблицаВзносовБезСпецОценки.НайтиСтроки(СтруктураПоискаПоТарифу) Цикл
				Если СтрокаДанных.П11131М100101 = "1" И ДанныеПодземныеИВредныеРаботы = Неопределено 
					Или СтрокаДанных.П11131М100101 <> "1" И ДанныеТяжелыеИПрочиеРаботы = Неопределено Тогда
					СтрокаПодраздела3_1 = Подраздел3_1.Добавить(); 
					СтрокаПодраздела3_1.Данные = Новый Структура(); 
					СтрокаПодраздела3_1.ДанныеМногострочныхЧастей = Новый Структура("П11131М1", НовоеПустоеДерево());
					НоваяСтрокаПодраздела = СтрокаПодраздела3_1.ДанныеМногострочныхЧастей.П11131М1.Строки.Добавить();
					НоваяСтрокаПодраздела.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейПрил1Подраздел3_1);
					НоваяСтрокаПодраздела.ДанныеМногострочныхЧастей = Новый Структура();
					Если СтрокаДанных.П11131М100101 = "1" Тогда
						ДанныеПодземныеИВредныеРаботы = НоваяСтрокаПодраздела.Данные
					Иначе
						ДанныеТяжелыеИПрочиеРаботы = НоваяСтрокаПодраздела.Данные
					КонецЕсли;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(?(СтрокаДанных.П11131М100101 = "1", ДанныеПодземныеИВредныеРаботы, ДанныеТяжелыеИПрочиеРаботы), СтрокаДанных);
			КонецЦикла;
			
			Для каждого СтрокаДанных Из ТаблицаКоличествБезСпецОценки.НайтиСтроки(СтруктураПоискаПоТарифу) Цикл
				ЗаполнитьЗначенияСвойств(?(СтрокаДанных.П11131М100101 = "1", ДанныеПодземныеИВредныеРаботы, ДанныеТяжелыеИПрочиеРаботы), СтрокаДанных);
			КонецЦикла;
			
		Иначе	
			СтрокаПодраздела3_1 = НоваяСтрока.Строки.Добавить().Строки.Добавить(); 
			СтрокаПодраздела3_1.Данные = Новый Структура(); 
			СтрокаПодраздела3_1.ДанныеМногострочныхЧастей = Новый Структура("П11131М1", НовоеПустоеДерево());
			НоваяСтрокаПодраздела = СтрокаПодраздела3_1.ДанныеМногострочныхЧастей.П11131М1.Строки.Добавить();
			НоваяСтрокаПодраздела.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейПрил1Подраздел3_1);
			НоваяСтрокаПодраздела.ДанныеМногострочныхЧастей = Новый Структура();
		КонецЕсли;
		
		// Подраздел 3.2
		
		СтруктураПоискаРаздела = Новый Структура("ВидТарифаСтраховыхВзносов, П11132М100101, П11132М100301", СтрокаРезультата.ВидТарифаСтраховыхВзносов);
		Результат = ВсеОснованияСпецОценки.НайтиСтроки(СтруктураПоискаПоТарифу);
		Если Результат.Количество() > 0 Тогда
			Подраздел3_2 = НоваяСтрока.Строки.Добавить().Строки;
			СтрокаПодраздела3_2 = Подраздел3_2.Добавить(); 
			СтрокаПодраздела3_2.Данные = Новый Структура(); 
			СтрокаПодраздела3_2.ДанныеМногострочныхЧастей = Новый Структура("П11132М1", НовоеПустоеДерево());
			Для каждого СтрокаДанных Из Результат Цикл
				
				ЗаполнитьЗначенияСвойств(СтруктураПоискаРаздела, СтрокаДанных);
								
				НоваяСтрокаПодраздела = СтрокаПодраздела3_2.ДанныеМногострочныхЧастей.П11132М1.Строки.Добавить();
				НоваяСтрокаПодраздела.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейПрил1Подраздел3_2);
				НоваяСтрокаПодраздела.ДанныеМногострочныхЧастей = Новый Структура();
				
				СтрокиДоходов = ТаблицаДоходовСоСпецОценкой.НайтиСтроки(СтруктураПоискаРаздела);
				СтрокиКоличеств = ТаблицаКоличествСоСпецОценкой.НайтиСтроки(СтруктураПоискаРаздела);
				СтрокиВзносов = ТаблицаВзносовСоСпецОценкой.НайтиСтроки(СтруктураПоискаРаздела);
				Если СтрокиДоходов.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПодраздела.Данные,СтрокиДоходов[0]);
				КонецЕсли;
				Если СтрокиКоличеств.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПодраздела.Данные,СтрокиКоличеств[0]);
				КонецЕсли;
				Если СтрокиВзносов.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПодраздела.Данные,СтрокиВзносов[0]);
				КонецЕсли;
				
			КонецЦикла;
		Иначе	
			СтрокаПодраздела3_2 = НоваяСтрока.Строки.Добавить().Строки.Добавить();
			СтрокаПодраздела3_2.Данные = Новый Структура(); 
			СтрокаПодраздела3_2.ДанныеМногострочныхЧастей = Новый Структура("П11132М1", НовоеПустоеДерево());
			НоваяСтрокаПодраздела = СтрокаПодраздела3_2.ДанныеМногострочныхЧастей.П11132М1.Строки.Добавить();
			НоваяСтрокаПодраздела.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейПрил1Подраздел3_2);
			НоваяСтрокаПодраздела.ДанныеМногострочныхЧастей = Новый Структура();
		КонецЕсли;
		
		// Подраздел 4
		СтруктураПоискаРаздела = Новый Структура("ВидТарифаСтраховыхВзносов, П01114М100101", СтрокаРезультата.ВидТарифаСтраховыхВзносов);
		Подраздел4 = НоваяСтрока.Строки.Добавить().Строки;
		Для Сч = 1 По 2 Цикл
			
			СтруктураПоискаРаздела.П01114М100101 = Строка(Сч);
			
			СтрокиДоходов = ТаблицаДоходовАвиаторовГорняков.НайтиСтроки(СтруктураПоискаРаздела);
			СтрокиКоличеств = ТаблицаКоличествАвиаторовГорняков.НайтиСтроки(СтруктураПоискаРаздела);
			СтрокиВзносов = ТаблицаВзносовАвиаторовГорняков.НайтиСтроки(СтруктураПоискаРаздела);
			
			Если СтрокиДоходов.Количество() = 0 И СтрокиВзносов.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаПодраздела4 = Подраздел4.Добавить(); 
			СтрокаПодраздела4.Данные = Новый Структура(); 
			СтрокаПодраздела4.ДанныеМногострочныхЧастей = Новый Структура("П01114М1", НовоеПустоеДерево());
			НоваяСтрокаПодраздела = СтрокаПодраздела4.ДанныеМногострочныхЧастей.П01114М1.Строки.Добавить();
			НоваяСтрокаПодраздела.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейПрил1Подраздел4);
			НоваяСтрокаПодраздела.ДанныеМногострочныхЧастей = Новый Структура();
			
			Если СтрокиДоходов.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПодраздела.Данные,СтрокиДоходов[0]);
			КонецЕсли;
			Если СтрокиКоличеств.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПодраздела.Данные,СтрокиКоличеств[0]);
			КонецЕсли;
			Если СтрокиВзносов.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПодраздела.Данные,СтрокиВзносов[0]);
			КонецЕсли;
			
		КонецЦикла;
		Если Подраздел4.Количество() = 0 Тогда
			СтрокаПодраздела4 = Подраздел4.Добавить();
			СтрокаПодраздела4.Данные = Новый Структура(); 
			СтрокаПодраздела4.ДанныеМногострочныхЧастей = Новый Структура("П01114М1", НовоеПустоеДерево());
			НоваяСтрокаПодраздела = СтрокаПодраздела4.ДанныеМногострочныхЧастей.П01114М1.Строки.Добавить();
			НоваяСтрокаПодраздела.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейПрил1Подраздел4);
			НоваяСтрокаПодраздела.ДанныеМногострочныхЧастей = Новый Структура();
		КонецЕсли;
		
	КонецЦикла;
	Если Раздел1Прил1.Количество() = 0 Тогда
		НоваяСтрока = Раздел1Прил1.Добавить();
		НоваяСтрока.Данные = Новый Структура("П000110000101","01");
		НоваяСтрока.ДанныеМногострочныхЧастей = Новый Структура();
		СтрокаПодразделов1и2 = НоваяСтрока.Строки.Добавить().Строки.Добавить(); 
		СтрокаПодразделов1и2.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейПрил1Подразделы1и2); 
		СтрокаПодразделов1и2.ДанныеМногострочныхЧастей = Новый Структура();
		ЗаполнитьЗначенияСвойств(СтрокаПодразделов1и2.Данные, КоличествоЗастрахованных);
		СтрокаПодраздела3_1 = НоваяСтрока.Строки.Добавить().Строки.Добавить(); 
		СтрокаПодраздела3_1.Данные = Новый Структура(); 
		СтрокаПодраздела3_1.ДанныеМногострочныхЧастей = Новый Структура("П11131М1", НовоеПустоеДерево());
		НоваяСтрокаПодраздела = СтрокаПодраздела3_1.ДанныеМногострочныхЧастей.П11131М1.Строки.Добавить();
		НоваяСтрокаПодраздела.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейПрил1Подраздел3_1);
		НоваяСтрокаПодраздела.ДанныеМногострочныхЧастей = Новый Структура();
		СтрокаПодраздела3_2 = НоваяСтрока.Строки.Добавить().Строки.Добавить();
		СтрокаПодраздела3_2.Данные = Новый Структура(); 
		СтрокаПодраздела3_2.ДанныеМногострочныхЧастей = Новый Структура("П11132М1", НовоеПустоеДерево());
		НоваяСтрокаПодраздела = СтрокаПодраздела3_2.ДанныеМногострочныхЧастей.П11132М1.Строки.Добавить();
		НоваяСтрокаПодраздела.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейПрил1Подраздел3_2);
		НоваяСтрокаПодраздела.ДанныеМногострочныхЧастей = Новый Структура();
		СтрокаПодраздела4 = НоваяСтрока.Строки.Добавить().Строки.Добавить();
		СтрокаПодраздела4.Данные = Новый Структура(); 
		СтрокаПодраздела4.ДанныеМногострочныхЧастей = Новый Структура("П01114М1", НовоеПустоеДерево());
		НоваяСтрокаПодраздела = СтрокаПодраздела4.ДанныеМногострочныхЧастей.П01114М1.Строки.Добавить();
		НоваяСтрокаПодраздела.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейПрил1Подраздел4);
		НоваяСтрокаПодраздела.ДанныеМногострочныхЧастей = Новый Структура();
	КонецЕсли;
	
	// Приложения 2 и 8 Раздела 1 
	Результат = ОписаниеТаблиц.ДоходыФСС2017;
	Если Результат.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Раздел1Прил2, Результат[0]);
		ЗаполнитьЗначенияСвойств(СтрокаПрил8.Данные, Результат[0]);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Раздел1Прил2, КоличествоЗастрахованных);
	
	// Приложение 9 Раздела 1
	НоваяСтрока = Раздел1Прил9.Добавить();
	НоваяСтрока.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейПрил9);
	НоваяСтрока.ДанныеМногострочныхЧастей = Новый Структура;
	
	// Раздел 3
	ВсеФизлица = ОписаниеТаблиц.Подраздел3Физлица2017;
	ТаблицаДоходовФизлиц = ОписаниеТаблиц.Подраздел321Доходы2017;
	ТаблицаВредныхДоходовФизлиц = ОписаниеТаблиц.Подраздел322Доходы2017;
	ТаблицаДоходовФизлиц.Индексы.Добавить("ФизическоеЛицо");
	ТаблицаВредныхДоходовФизлиц.Индексы.Добавить("ФизическоеЛицо");
	
	СтруктураПоискаПоФизлицу = Новый Структура("ФизическоеЛицо");
	Для каждого СтрокаРезультата Из ВсеФизлица Цикл
		
		НоваяСтрока = Раздел3.Добавить();
		НоваяСтрока.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейРаздел3);
		НоваяСтрока.ДанныеМногострочныхЧастей = Новый Структура("П00321М1,П00322М1", НовоеПустоеДерево(), НовоеПустоеДерево());
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока.Данные, СтрокаРезультата);
		
		СтруктураПоискаПоФизлицу.ФизическоеЛицо = СтрокаРезультата.ФизическоеЛицо;
		СтрокиДоходов = ТаблицаДоходовФизлиц.НайтиСтроки(СтруктураПоискаПоФизлицу);
		СтрокиВредныхДоходов = ТаблицаВредныхДоходовФизлиц.НайтиСтроки(СтруктураПоискаПоФизлицу);
		
		Для каждого СтрокаДанных Из СтрокиДоходов Цикл
			СтрокаДохода = НоваяСтрока.ДанныеМногострочныхЧастей.П00321М1.Строки.Добавить();
			СтрокаДохода.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейПодраздел321);
			ЗаполнитьЗначенияСвойств(СтрокаДохода.Данные, СтрокаДанных);
			СтрокаДохода.Данные.П00321М119001 = Формат(СтрокаДохода.Данные.П00321М119001,"ЧЦ=2; ЧВН=");
			СтрокаДохода.Данные.П00321М120001 = ОбщегоНазначения.ИмяЗначенияПеречисления(СтрокаДохода.Данные.П00321М120001);
		    СтрокаДохода.ДанныеМногострочныхЧастей = Новый Структура();
		КонецЦикла;
		Если НоваяСтрока.ДанныеМногострочныхЧастей.П00321М1.Строки.Количество() = 0 Тогда
			СтрокаДохода = НоваяСтрока.ДанныеМногострочныхЧастей.П00321М1.Строки.Добавить();
			СтрокаДохода.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейПодраздел321);
		    СтрокаДохода.ДанныеМногострочныхЧастей = Новый Структура();
		КонецЕсли;
		
		Для каждого СтрокаДанных Из СтрокиВредныхДоходов Цикл
			СтрокаДохода = НоваяСтрока.ДанныеМногострочныхЧастей.П00322М1.Строки.Добавить();
			СтрокаДохода.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейПодраздел322);
			ЗаполнитьЗначенияСвойств(СтрокаДохода.Данные, СтрокаДанных);
			СтрокаДохода.Данные.П00322М126001 = Формат(СтрокаДохода.Данные.П00322М126001,"ЧЦ=2; ЧВН=");
		    СтрокаДохода.ДанныеМногострочныхЧастей = Новый Структура();
		КонецЦикла;
		Если НоваяСтрока.ДанныеМногострочныхЧастей.П00322М1.Строки.Количество() = 0 Тогда
			СтрокаДохода = НоваяСтрока.ДанныеМногострочныхЧастей.П00322М1.Строки.Добавить();
			СтрокаДохода.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейПодраздел322);
		    СтрокаДохода.ДанныеМногострочныхЧастей = Новый Структура();
		КонецЕсли;
		
	КонецЦикла;
	
	Если Раздел3.Количество() = 0 Тогда
		НоваяСтрока = Раздел3.Добавить();
		НоваяСтрока.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейРаздел3);
		НоваяСтрока.ДанныеМногострочныхЧастей = Новый Структура("П00321М1,П00322М1", НовоеПустоеДерево(), НовоеПустоеДерево());
		СтрокаДохода = НоваяСтрока.ДанныеМногострочныхЧастей.П00321М1.Строки.Добавить();
		СтрокаДохода.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейПодраздел321);
		СтрокаДохода.ДанныеМногострочныхЧастей = Новый Структура();
		СтрокаДохода = НоваяСтрока.ДанныеМногострочныхЧастей.П00322М1.Строки.Добавить();
		СтрокаДохода.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолейПодраздел322);
		СтрокаДохода.ДанныеМногострочныхЧастей = Новый Структура();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗначенияПоказателей_РСВ_2017Кв1_СоцСтрах(ПараметрыОтчета, Контейнер) Экспорт
	
	ДатаКонцаПериодаОтчета = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
	Организация = ПараметрыОтчета.Организация;
	
	НачалоПериода = НачалоГода(ДатаКонцаПериодаОтчета);
	ОкончаниеПериода = КонецМесяца(ДатаКонцаПериодаОтчета);
	ДатаАктуальности = Макс(ОкончаниеПериода, КонецДня(ПараметрыОтчета.ДатаПодписи));
	
	ОписаниеТаблиц = Новый Структура("ПособияПоНетрудоспособности2017,ПособияПоУходу2017,ПолучателейПособияПоУходу2017,ПособияПоНетрудоспособностиСверхНорм2017,ПолучателейПособийСверхНорм2017,ПособияПоУходуСверхНорм2017,ПолучателейПособияПоУходуЗаПервымРебенкомСверхНорм2017,ПолучателейПособияПоУходуЗаВторымРебенкомСверхНорм2017,ПолучателейПособияПоУходуСверхНорм2017");
	
	// -------------------------------------------------------------------------------
	// Вывод данных в отчет
	
	ПоказателиОтчета = Новый Структура;
	ОписаниеПоказателей_РСВ_2017Кв1_СоцСтрах(ПоказателиОтчета);
	Значение = Неопределено;
	Раздел1Прил3 = Контейнер.Раздел1Прил3.Строки[0].Данные;
	Для каждого КлючИЗначение Из Раздел1Прил3 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Раздел1Прил3[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	Раздел1Прил4 = Контейнер.Раздел1Прил4.Строки[0].Данные;
	Для каждого КлючИЗначение Из Раздел1Прил4 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Раздел1Прил4[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	
	// Приложение 2 Раздела 1
	
	Контейнер.Раздел1Прил2.Строки[0].Данные.П000120000101 = ?(ДатаКонцаПериодаОтчета > УчетСтраховыхВзносов.ДатаПередачиФССВыплатыПособий(Организация),"1","2");
	
КонецПроцедуры


Процедура РасчетПоказателей_РСВ_2017(НачалоПериода, ОкончаниеПериода, Организация, ОписаниеТаблиц, ПодробныеДанные, ДатаАктуальности)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода", НачалоГода(ОкончаниеПериода));
	Запрос.УстановитьПараметр("НачалоОтчетногоКвартала", НачалоКвартала(ОкончаниеПериода));
	Запрос.УстановитьПараметр("КонецОтчетногоПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("Месяц1", Месяц(ОкончаниеПериода) - 2);
	Запрос.УстановитьПараметр("Месяц2", Месяц(ОкончаниеПериода) - 1);
	Запрос.УстановитьПараметр("Месяц3", Месяц(ОкончаниеПериода));
	// Все данные отчета берутся по обособленному подразделению (указанной организации).
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", Организация);
	
	// Получаем временные таблицы, используя общие алгоритмы.
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОДоходахИВзносах(НачалоПериода, ОкончаниеПериода, Организация, Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Месяц1 КАК МесяцПериода
	|ПОМЕСТИТЬ ВТМесяцыОтчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Месяц2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Месяц3";
	Запрос.Выполнить();
	
	// Подразделы 1 и 2 Приложения 1 Раздела 1
	
	Если ОписаниеТаблиц.Свойство("ВсегоЗастрахованных") Или ОписаниеТаблиц.Свойство("Подраздел3Физлица2017") Тогда
		
		УчетСтраховыхВзносов.СформироватьВТДанныеОПравахНаСтрахование(Запрос.МенеджерВременныхТаблиц, "ВТПериодыФизЛицОрганизаций", Ложь, ДатаАктуальности);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ФизЛица.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеОПравахНаСтрахование.Период,
		|	ДанныеОПравахНаСтрахование.ЗастрахованПФР,
		|	ДанныеОПравахНаСтрахование.ЗастрахованФОМС,
		|	ДанныеОПравахНаСтрахование.ЗастрахованФСС
		|		ИЛИ ДанныеОПравахНаСтрахование.ЗастрахованФССкакИностранец КАК ЗастрахованФСС
		|ПОМЕСТИТЬ ВТЗастрахованныеЛицаОрганизации
		|ИЗ
		|	ВТПериодыФизЛицОрганизаций КАК ФизЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОПравахНаСтрахование КАК ДанныеОПравахНаСтрахование
		|		ПО ФизЛица.ФизическоеЛицо = ДанныеОПравахНаСтрахование.ФизическоеЛицо
		|			И НАЧАЛОПЕРИОДА(ФизЛица.Период, МЕСЯЦ) = ДанныеОПравахНаСтрахование.Период
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизЛица.ФизическоеЛицо,
		|	ДанныеОПравахНаСтрахование.Период,
		|	ДанныеОПравахНаСтрахование.ЗастрахованПФР,
		|	ДанныеОПравахНаСтрахование.ЗастрахованФОМС,
		|	ДанныеОПравахНаСтрахование.ЗастрахованФСС
		|		ИЛИ ДанныеОПравахНаСтрахование.ЗастрахованФССкакИностранец
		|ИЗ
		|	ВТФизЛицаСОблагаемойБазой КАК ФизЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОПравахНаСтрахование КАК ДанныеОПравахНаСтрахование
		|		ПО ФизЛица.ФизическоеЛицо = ДанныеОПравахНаСтрахование.ФизическоеЛицо
		|			И НАЧАЛОПЕРИОДА(ФизЛица.Период, МЕСЯЦ) = ДанныеОПравахНаСтрахование.Период
		|ГДЕ
		|	ФизЛица.Период МЕЖДУ &НачалоОтчетногоКвартала И &КонецОтчетногоПериода
		|	И ФизЛица.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом)
		|	И ФизЛица.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Доходы.Период,
		|	Доходы.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТЗастрахованныеНаОПС
		|ИЗ
		|	ВТЗастрахованныеЛицаОрганизации КАК Доходы
		|ГДЕ
		|	Доходы.ЗастрахованПФР
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.Период,
		|	Доходы.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Доходы.Период,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доходы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЗастрахованныеНаОПСЗаОтдельныеМесяцы
		|ИЗ
		|	ВТЗастрахованныеНаОПС КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доходы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЗастрахованныеНаОПСЗаВсеМесяцы
		|ИЗ
		|	ВТЗастрахованныеНаОПС КАК Доходы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доходы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЗастрахованныеНаОПСЗаКвартал
		|ИЗ
		|	ВТЗастрахованныеНаОПС КАК Доходы
		|ГДЕ
		|	Доходы.Период МЕЖДУ &НачалоОтчетногоКвартала И &КонецОтчетногоПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Доходы.Период,
		|	Доходы.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТЗастрахованныеНаОМС
		|ИЗ
		|	ВТЗастрахованныеЛицаОрганизации КАК Доходы
		|ГДЕ
		|	Доходы.ЗастрахованФОМС
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.Период,
		|	Доходы.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Доходы.Период,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доходы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЗастрахованныеНаОМСЗаОтдельныеМесяцы
		|ИЗ
		|	ВТЗастрахованныеНаОМС КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доходы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЗастрахованныеНаОМСЗаВсеМесяцы
		|ИЗ
		|	ВТЗастрахованныеНаОМС КАК Доходы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доходы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЗастрахованныеНаОМСЗаКвартал
		|ИЗ
		|	ВТЗастрахованныеНаОМС КАК Доходы
		|ГДЕ
		|	Доходы.Период МЕЖДУ &НачалоОтчетногоКвартала И &КонецОтчетногоПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Доходы.Период,
		|	Доходы.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТЗастрахованныеНаФСС
		|ИЗ
		|	ВТЗастрахованныеЛицаОрганизации КАК Доходы
		|ГДЕ
		|	Доходы.ЗастрахованФСС
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.Период,
		|	Доходы.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Доходы.Период,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доходы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЗастрахованныеНаФССЗаОтдельныеМесяцы
		|ИЗ
		|	ВТЗастрахованныеНаФСС КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доходы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЗастрахованныеНаФССЗаВсеМесяцы
		|ИЗ
		|	ВТЗастрахованныеНаФСС КАК Доходы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доходы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЗастрахованныеНаФССЗаКвартал
		|ИЗ
		|	ВТЗастрахованныеНаФСС КАК Доходы
		|ГДЕ
		|	Доходы.Период МЕЖДУ &НачалоОтчетногоКвартала И &КонецОтчетногоПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЕСТЬNULL(ЗастрахованныеНаОПСЗаВсеМесяцы.ВсегоФизлиц, 0)) КАК П011110001001,
		|	МАКСИМУМ(ЕСТЬNULL(ЗастрахованныеНаОМСЗаВсеМесяцы.ВсегоФизлиц, 0)) КАК П011120001001,
		|	МАКСИМУМ(ЕСТЬNULL(ЗастрахованныеНаФССЗаВсеМесяцы.ВсегоФизлиц, 0)) КАК П000120001001,
		|	МАКСИМУМ(ЕСТЬNULL(ЗастрахованныеНаОПСЗаКвартал.ВсегоФизлиц, 0)) КАК П011110001002,
		|	МАКСИМУМ(ЕСТЬNULL(ЗастрахованныеНаОМСЗаКвартал.ВсегоФизлиц, 0)) КАК П011120001002,
		|	МАКСИМУМ(ЕСТЬNULL(ЗастрахованныеНаФССЗаКвартал.ВсегоФизлиц, 0)) КАК П000120001002,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЗастрахованныеНаОПСЗаОтдельныеМесяцы.Период) = &Месяц1
		|				ТОГДА ЕСТЬNULL(ЗастрахованныеНаОПСЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П011110001003,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЗастрахованныеНаОПСЗаОтдельныеМесяцы.Период) = &Месяц2
		|				ТОГДА ЕСТЬNULL(ЗастрахованныеНаОПСЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П011110001004,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЗастрахованныеНаОПСЗаОтдельныеМесяцы.Период) = &Месяц3
		|				ТОГДА ЕСТЬNULL(ЗастрахованныеНаОПСЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П011110001005,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЗастрахованныеНаОМСЗаОтдельныеМесяцы.Период) = &Месяц1
		|				ТОГДА ЕСТЬNULL(ЗастрахованныеНаОМСЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П011120001003,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЗастрахованныеНаОМСЗаОтдельныеМесяцы.Период) = &Месяц2
		|				ТОГДА ЕСТЬNULL(ЗастрахованныеНаОМСЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П011120001004,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЗастрахованныеНаОМСЗаОтдельныеМесяцы.Период) = &Месяц3
		|				ТОГДА ЕСТЬNULL(ЗастрахованныеНаОМСЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П011120001005,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЗастрахованныеНаФССЗаОтдельныеМесяцы.Период) = &Месяц1
		|				ТОГДА ЕСТЬNULL(ЗастрахованныеНаФССЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000120001003,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЗастрахованныеНаФССЗаОтдельныеМесяцы.Период) = &Месяц2
		|				ТОГДА ЕСТЬNULL(ЗастрахованныеНаФССЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000120001004,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЗастрахованныеНаФССЗаОтдельныеМесяцы.Период) = &Месяц3
		|				ТОГДА ЕСТЬNULL(ЗастрахованныеНаФССЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П000120001005
		|ИЗ
		|	ВТМесяцыОтчета КАК МесяцыОтчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗастрахованныеНаОПСЗаВсеМесяцы КАК ЗастрахованныеНаОПСЗаВсеМесяцы
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗастрахованныеНаОПСЗаКвартал КАК ЗастрахованныеНаОПСЗаКвартал
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗастрахованныеНаОПСЗаОтдельныеМесяцы КАК ЗастрахованныеНаОПСЗаОтдельныеМесяцы
		|		ПО (МесяцыОтчета.МесяцПериода = МЕСЯЦ(ЗастрахованныеНаОПСЗаОтдельныеМесяцы.Период))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗастрахованныеНаОМСЗаВсеМесяцы КАК ЗастрахованныеНаОМСЗаВсеМесяцы
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗастрахованныеНаОМСЗаКвартал КАК ЗастрахованныеНаОМСЗаКвартал
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗастрахованныеНаОМСЗаОтдельныеМесяцы КАК ЗастрахованныеНаОМСЗаОтдельныеМесяцы
		|		ПО (МесяцыОтчета.МесяцПериода = МЕСЯЦ(ЗастрахованныеНаОМСЗаОтдельныеМесяцы.Период))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗастрахованныеНаФССЗаВсеМесяцы КАК ЗастрахованныеНаФССЗаВсеМесяцы
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗастрахованныеНаФССЗаКвартал КАК ЗастрахованныеНаФССЗаКвартал
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗастрахованныеНаФССЗаОтдельныеМесяцы КАК ЗастрахованныеНаФССЗаОтдельныеМесяцы
		|		ПО (МесяцыОтчета.МесяцПериода = МЕСЯЦ(ЗастрахованныеНаФССЗаОтдельныеМесяцы.Период))";
		
		ОписаниеТаблиц.ВсегоЗастрахованных = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	Если ОписаниеТаблиц.Свойство("Подразделы12Тарифы2017") Или ОписаниеТаблиц.Свойство("Подразделы12Доходы2017") Или ОписаниеТаблиц.Свойство("Подразделы12Численность2017") Или ОписаниеТаблиц.Свойство("Подразделы12Взносы2017") Или ОписаниеТаблиц.Свойство("Подраздел321Доходы2017") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОДоходах.Период КАК Период,
		|	СведенияОДоходах.ФизическоеЛицо,
		|	СведенияОДоходах.ЗастрахованПФР,
		|	СведенияОДоходах.ЗастрахованФОМС,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
		|	ЕСТЬNULL(КодыВидовТарифаСтраховыхВзносов.КодФНС, """") КАК КодТарифа,
		|	СУММА(СведенияОДоходах.ИсчисленоПФРССуммПревышения) КАК ИсчисленоПФРССуммПревышения,
		|	СУММА(СведенияОДоходах.ПФРПоСуммарномуТарифу) КАК ПФРПоСуммарномуТарифу,
		|	СУММА(СведенияОДоходах.ФФОМС) КАК ФФОМС,
		|	СУММА(СведенияОДоходах.Сумма) КАК НачисленоВсего,
		|	СУММА(СведенияОДоходах.НеОблагаетсяПФР) КАК НеОблагается,
		|	СУММА(СведенияОДоходах.НеОблагаетсяФОМС) КАК НеОблагаетсяФОМС,
		|	СУММА(СведенияОДоходах.БазаПФР) КАК ОблагаемаяБазаПФР,
		|	СУММА(СведенияОДоходах.БазаФОМС) КАК ОблагаемаяБазаФОМС,
		|	СУММА(СведенияОДоходах.БазаПФР - СведенияОДоходах.СуммаПревысившаяПределПФР) КАК СуммаНеПревысившаяПределПФР,
		|	СУММА(СведенияОДоходах.БазаПФР - СведенияОДоходах.СуммаПревысившаяПределПФР - (СведенияОДоходах.БазаПФРПоТрудовомуДоговору - СведенияОДоходах.СуммаПревысившаяПределПФРПоТрудовомуДоговору)) КАК СуммаНеПревысившаяПределПФРпоГПХ,
		|	СУММА(СведенияОДоходах.СуммаПревысившаяПределПФР) КАК СуммаПревысившаяПределПФР
		|ПОМЕСТИТЬ ВТДоходыВзносов
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКодыВидовТарифаСтраховыхВзносов КАК КодыВидовТарифаСтраховыхВзносов
		|		ПО (ГОД(СведенияОДоходах.Период) МЕЖДУ КодыВидовТарифаСтраховыхВзносов.ГОДС И КодыВидовТарифаСтраховыхВзносов.ГодПо)
		|			И СведенияОДоходах.ВидТарифаСтраховыхВзносов = КодыВидовТарифаСтраховыхВзносов.ВидТарифаСтраховыхВзносов
		|ГДЕ
		|	СведенияОДоходах.Организация = &ОбособленноеПодразделение
		|	И СведенияОДоходах.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|	И СведенияОДоходах.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				Организации.ФизическоеЛицо
		|			ИЗ
		|				ВТФизЛицаСОблагаемойБазой КАК Организации)
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ФизическоеЛицо,
		|	СведенияОДоходах.ЗастрахованПФР,
		|	СведенияОДоходах.ЗастрахованФОМС,
		|	ЕСТЬNULL(КодыВидовТарифаСтраховыхВзносов.КодФНС, """"),
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидТарифаСтраховыхВзносов,
		|	Период";
		Запрос.Выполнить();
	КонецЕсли;
	
	Если ОписаниеТаблиц.Свойство("Подразделы12Тарифы2017") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Доходы.КодТарифа,
		|	Доходы.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов
		|ИЗ
		|	ВТДоходыВзносов КАК Доходы
		|
		|УПОРЯДОЧИТЬ ПО
		|	Доходы.КодТарифа";
		ОписаниеТаблиц.Подразделы12Тарифы2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	Если ОписаниеТаблиц.Свойство("Подразделы12Доходы2017") Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА СведенияОДоходах.ЗастрахованПФР
		|					ТОГДА СведенияОДоходах.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П011110003001,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц1
		|						И СведенияОДоходах.ЗастрахованПФР
		|					ТОГДА СведенияОДоходах.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П011110003003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц2
		|						И СведенияОДоходах.ЗастрахованПФР
		|					ТОГДА СведенияОДоходах.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П011110003004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц3
		|						И СведенияОДоходах.ЗастрахованПФР
		|					ТОГДА СведенияОДоходах.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П011110003005,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА СведенияОДоходах.ЗастрахованПФР
		|					ТОГДА СведенияОДоходах.НеОблагается
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П011110004001,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц1
		|						И СведенияОДоходах.ЗастрахованПФР
		|					ТОГДА СведенияОДоходах.НеОблагается
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П011110004003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц2
		|						И СведенияОДоходах.ЗастрахованПФР
		|					ТОГДА СведенияОДоходах.НеОблагается
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П011110004004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц3
		|						И СведенияОДоходах.ЗастрахованПФР
		|					ТОГДА СведенияОДоходах.НеОблагается
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П011110004005,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА СведенияОДоходах.ЗастрахованПФР
		|					ТОГДА СведенияОДоходах.СуммаПревысившаяПределПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П011110005101,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц1
		|						И СведенияОДоходах.ЗастрахованПФР
		|					ТОГДА СведенияОДоходах.СуммаПревысившаяПределПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П011110005103,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц2
		|						И СведенияОДоходах.ЗастрахованПФР
		|					ТОГДА СведенияОДоходах.СуммаПревысившаяПределПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П011110005104,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц3
		|						И СведенияОДоходах.ЗастрахованПФР
		|					ТОГДА СведенияОДоходах.СуммаПревысившаяПределПФР
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П011110005105,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА НЕ СведенияОДоходах.ЗастрахованФОМС
		|					ТОГДА 0
		|				ИНАЧЕ СведенияОДоходах.НачисленоВсего
		|			КОНЕЦ), 0) КАК П011120003001,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА НЕ СведенияОДоходах.ЗастрахованФОМС
		|					ТОГДА 0
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц1
		|					ТОГДА СведенияОДоходах.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П011120003003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА НЕ СведенияОДоходах.ЗастрахованФОМС
		|					ТОГДА 0
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц2
		|					ТОГДА СведенияОДоходах.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П011120003004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА НЕ СведенияОДоходах.ЗастрахованФОМС
		|					ТОГДА 0
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц3
		|					ТОГДА СведенияОДоходах.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П011120003005,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА НЕ СведенияОДоходах.ЗастрахованФОМС
		|					ТОГДА 0
		|				ИНАЧЕ СведенияОДоходах.НеОблагаетсяФОМС
		|			КОНЕЦ), 0) КАК П011120004001,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА НЕ СведенияОДоходах.ЗастрахованФОМС
		|					ТОГДА 0
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц1
		|					ТОГДА СведенияОДоходах.НеОблагаетсяФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П011120004003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА НЕ СведенияОДоходах.ЗастрахованФОМС
		|					ТОГДА 0
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц2
		|					ТОГДА СведенияОДоходах.НеОблагаетсяФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П011120004004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА НЕ СведенияОДоходах.ЗастрахованФОМС
		|					ТОГДА 0
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц3
		|					ТОГДА СведенияОДоходах.НеОблагаетсяФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П011120004005,
		|	СведенияОДоходах.ФизическоеЛицо
		|ИЗ
		|	ВТДоходыВзносов КАК СведенияОДоходах
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	СведенияОДоходах.ФизическоеЛицо
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР
		|			КОГДА СведенияОДоходах.ЗастрахованПФР
		|					ИЛИ СведенияОДоходах.ЗастрахованФОМС
		|				ТОГДА СведенияОДоходах.НачисленоВсего
		|			ИНАЧЕ 0
		|		КОНЕЦ) <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидТарифаСтраховыхВзносов";
		МассивПолей = Новый Массив;
		Если Не ПодробныеДанные Тогда
			МассивПолей.Добавить("ФизическоеЛицо");
		КонецЕсли;
		Запрос.Текст = УдалитьПоляРасшифровкиИзЗапроса(ТекстЗапроса, МассивПолей);
		ОписаниеТаблиц.Подразделы12Доходы2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	Если ОписаниеТаблиц.Свойство("Подразделы12Численность2017") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Доходы.Период,
		|	Доходы.ФизическоеЛицо,
		|	Доходы.ВидТарифаСтраховыхВзносов
		|ПОМЕСТИТЬ ВТЛицаСПревышениемБазы
		|ИЗ
		|	ВТДоходыВзносов КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.Период,
		|	Доходы.ФизическоеЛицо,
		|	Доходы.ВидТарифаСтраховыхВзносов
		|
		|ИМЕЮЩИЕ
		|	СУММА(Доходы.СуммаПревысившаяПределПФР) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЛицаСПревышениемБазы.ФизическоеЛицо) КАК ВсегоФизлиц,
		|	ЛицаСПревышениемБазы.ВидТарифаСтраховыхВзносов
		|ПОМЕСТИТЬ ВТЛицаСПревышениемБазыЗаВсеМесяцы
		|ИЗ
		|	ВТЛицаСПревышениемБазы КАК ЛицаСПревышениемБазы
		|
		|СГРУППИРОВАТЬ ПО
		|	ЛицаСПревышениемБазы.ВидТарифаСтраховыхВзносов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЛицаСПревышениемБазы.ФизическоеЛицо) КАК ВсегоФизлиц,
		|	ЛицаСПревышениемБазы.ВидТарифаСтраховыхВзносов
		|ПОМЕСТИТЬ ВТЛицаСПревышениемБазыЗаКвартал
		|ИЗ
		|	ВТЛицаСПревышениемБазы КАК ЛицаСПревышениемБазы
		|ГДЕ
		|	ЛицаСПревышениемБазы.Период МЕЖДУ &НачалоОтчетногоКвартала И &КонецОтчетногоПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	ЛицаСПревышениемБазы.ВидТарифаСтраховыхВзносов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЛицаСПревышениемБазы.Период,
		|	ЛицаСПревышениемБазы.ВидТарифаСтраховыхВзносов,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЛицаСПревышениемБазы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЛицаСПревышениемБазыЗаОтдельныеМесяцы
		|ИЗ
		|	ВТЛицаСПревышениемБазы КАК ЛицаСПревышениемБазы
		|
		|СГРУППИРОВАТЬ ПО
		|	ЛицаСПревышениемБазы.ВидТарифаСтраховыхВзносов,
		|	ЛицаСПревышениемБазы.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Доходы.Период,
		|	Доходы.ФизическоеЛицо,
		|	Доходы.ВидТарифаСтраховыхВзносов
		|ПОМЕСТИТЬ ВТЛицаСВзносами
		|ИЗ
		|	ВТДоходыВзносов КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.Период,
		|	Доходы.ФизическоеЛицо,
		|	Доходы.ВидТарифаСтраховыхВзносов
		|
		|ИМЕЮЩИЕ
		|	СУММА(Доходы.ОблагаемаяБазаПФР) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Доходы.Период,
		|	Доходы.ФизическоеЛицо,
		|	Доходы.ВидТарифаСтраховыхВзносов
		|ПОМЕСТИТЬ ВТЛицаСВзносамиФОМС
		|ИЗ
		|	ВТДоходыВзносов КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.Период,
		|	Доходы.ФизическоеЛицо,
		|	Доходы.ВидТарифаСтраховыхВзносов
		|
		|ИМЕЮЩИЕ
		|	СУММА(Доходы.ОблагаемаяБазаФОМС) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Доходы.Период,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доходы.ФизическоеЛицо) КАК ВсегоФизлиц,
		|	Доходы.ВидТарифаСтраховыхВзносов
		|ПОМЕСТИТЬ ВТЛицаСВзносамиЗаОтдельныеМесяцы
		|ИЗ
		|	ВТЛицаСВзносами КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.Период,
		|	Доходы.ВидТарифаСтраховыхВзносов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доходы.ФизическоеЛицо) КАК ВсегоФизлиц,
		|	Доходы.ВидТарифаСтраховыхВзносов
		|ПОМЕСТИТЬ ВТЛицаСВзносамиЗаВсеМесяцы
		|ИЗ
		|	ВТЛицаСВзносами КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.ВидТарифаСтраховыхВзносов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доходы.ФизическоеЛицо) КАК ВсегоФизлиц,
		|	Доходы.ВидТарифаСтраховыхВзносов
		|ПОМЕСТИТЬ ВТЛицаСВзносамиЗаКвартал
		|ИЗ
		|	ВТЛицаСВзносами КАК Доходы
		|ГДЕ
		|	Доходы.Период МЕЖДУ &НачалоОтчетногоКвартала И &КонецОтчетногоПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.ВидТарифаСтраховыхВзносов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Доходы.Период,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доходы.ФизическоеЛицо) КАК ВсегоФизлиц,
		|	Доходы.ВидТарифаСтраховыхВзносов
		|ПОМЕСТИТЬ ВТЛицаСВзносамиФОМСЗаОтдельныеМесяцы
		|ИЗ
		|	ВТЛицаСВзносамиФОМС КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.Период,
		|	Доходы.ВидТарифаСтраховыхВзносов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доходы.ФизическоеЛицо) КАК ВсегоФизлиц,
		|	Доходы.ВидТарифаСтраховыхВзносов
		|ПОМЕСТИТЬ ВТЛицаСВзносамиФОМСЗаВсеМесяцы
		|ИЗ
		|	ВТЛицаСВзносамиФОМС КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.ВидТарифаСтраховыхВзносов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Доходы.ФизическоеЛицо) КАК ВсегоФизлиц,
		|	Доходы.ВидТарифаСтраховыхВзносов
		|ПОМЕСТИТЬ ВТЛицаСВзносамиФОМСЗаКвартал
		|ИЗ
		|	ВТЛицаСВзносамиФОМС КАК Доходы
		|ГДЕ
		|	Доходы.Период МЕЖДУ &НачалоОтчетногоКвартала И &КонецОтчетногоПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.ВидТарифаСтраховыхВзносов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Тарифы.ВидТарифаСтраховыхВзносов,
		|	МАКСИМУМ(ЕСТЬNULL(ЛицаСВзносамиЗаВсеМесяцы.ВсегоФизлиц, 0)) КАК П011110002001,
		|	МАКСИМУМ(ЕСТЬNULL(ЛицаСВзносамиЗаКвартал.ВсегоФизлиц, 0)) КАК П011110002002,
		|	МАКСИМУМ(ЕСТЬNULL(ЛицаСПревышениемБазыЗаВсеМесяцы.ВсегоФизлиц, 0)) КАК П011110002101,
		|	МАКСИМУМ(ЕСТЬNULL(ЛицаСПревышениемБазыЗаКвартал.ВсегоФизлиц, 0)) КАК П011110002102,
		|	МАКСИМУМ(ЕСТЬNULL(ЛицаСВзносамиФОМСЗаВсеМесяцы.ВсегоФизлиц, 0)) КАК П011120002001,
		|	МАКСИМУМ(ЕСТЬNULL(ЛицаСВзносамиФОМСЗаКвартал.ВсегоФизлиц, 0)) КАК П011120002002,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВзносамиЗаОтдельныеМесяцы.Период) = &Месяц1
		|				ТОГДА ЕСТЬNULL(ЛицаСВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П011110002003,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВзносамиЗаОтдельныеМесяцы.Период) = &Месяц2
		|				ТОГДА ЕСТЬNULL(ЛицаСВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П011110002004,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВзносамиЗаОтдельныеМесяцы.Период) = &Месяц3
		|				ТОГДА ЕСТЬNULL(ЛицаСВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П011110002005,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВзносамиФОМСЗаОтдельныеМесяцы.Период) = &Месяц1
		|				ТОГДА ЕСТЬNULL(ЛицаСВзносамиФОМСЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П011120002003,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВзносамиФОМСЗаОтдельныеМесяцы.Период) = &Месяц2
		|				ТОГДА ЕСТЬNULL(ЛицаСВзносамиФОМСЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П011120002004,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВзносамиФОМСЗаОтдельныеМесяцы.Период) = &Месяц3
		|				ТОГДА ЕСТЬNULL(ЛицаСВзносамиФОМСЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П011120002005,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.Период) = &Месяц1
		|				ТОГДА ЕСТЬNULL(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П011110002103,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.Период) = &Месяц2
		|				ТОГДА ЕСТЬNULL(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П011110002104,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.Период) = &Месяц3
		|				ТОГДА ЕСТЬNULL(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П011110002105
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Доходы.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов
		|	ИЗ
		|		ВТДоходыВзносов КАК Доходы) КАК Тарифы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМесяцыОтчета КАК МесяцыОтчета
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСВзносамиЗаВсеМесяцы КАК ЛицаСВзносамиЗаВсеМесяцы
		|		ПО Тарифы.ВидТарифаСтраховыхВзносов = ЛицаСВзносамиЗаВсеМесяцы.ВидТарифаСтраховыхВзносов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСВзносамиЗаКвартал КАК ЛицаСВзносамиЗаКвартал
		|		ПО Тарифы.ВидТарифаСтраховыхВзносов = ЛицаСВзносамиЗаКвартал.ВидТарифаСтраховыхВзносов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСВзносамиЗаОтдельныеМесяцы КАК ЛицаСВзносамиЗаОтдельныеМесяцы
		|		ПО Тарифы.ВидТарифаСтраховыхВзносов = ЛицаСВзносамиЗаОтдельныеМесяцы.ВидТарифаСтраховыхВзносов
		|			И (МесяцыОтчета.МесяцПериода = МЕСЯЦ(ЛицаСВзносамиЗаОтдельныеМесяцы.Период))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСВзносамиФОМСЗаВсеМесяцы КАК ЛицаСВзносамиФОМСЗаВсеМесяцы
		|		ПО Тарифы.ВидТарифаСтраховыхВзносов = ЛицаСВзносамиФОМСЗаВсеМесяцы.ВидТарифаСтраховыхВзносов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСВзносамиФОМСЗаКвартал КАК ЛицаСВзносамиФОМСЗаКвартал
		|		ПО Тарифы.ВидТарифаСтраховыхВзносов = ЛицаСВзносамиФОМСЗаКвартал.ВидТарифаСтраховыхВзносов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСВзносамиФОМСЗаОтдельныеМесяцы КАК ЛицаСВзносамиФОМСЗаОтдельныеМесяцы
		|		ПО Тарифы.ВидТарифаСтраховыхВзносов = ЛицаСВзносамиФОМСЗаОтдельныеМесяцы.ВидТарифаСтраховыхВзносов
		|			И (МесяцыОтчета.МесяцПериода = МЕСЯЦ(ЛицаСВзносамиФОМСЗаОтдельныеМесяцы.Период))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСПревышениемБазыЗаВсеМесяцы КАК ЛицаСПревышениемБазыЗаВсеМесяцы
		|		ПО Тарифы.ВидТарифаСтраховыхВзносов = ЛицаСПревышениемБазыЗаВсеМесяцы.ВидТарифаСтраховыхВзносов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСПревышениемБазыЗаКвартал КАК ЛицаСПревышениемБазыЗаКвартал
		|		ПО Тарифы.ВидТарифаСтраховыхВзносов = ЛицаСПревышениемБазыЗаКвартал.ВидТарифаСтраховыхВзносов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСПревышениемБазыЗаОтдельныеМесяцы КАК ЛицаСПревышениемБазыЗаОтдельныеМесяцы
		|		ПО Тарифы.ВидТарифаСтраховыхВзносов = ЛицаСПревышениемБазыЗаОтдельныеМесяцы.ВидТарифаСтраховыхВзносов
		|			И (МесяцыОтчета.МесяцПериода = МЕСЯЦ(ЛицаСПревышениемБазыЗаОтдельныеМесяцы.Период))
		|
		|СГРУППИРОВАТЬ ПО
		|	Тарифы.ВидТарифаСтраховыхВзносов";
		ОписаниеТаблиц.Подразделы12Численность2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	Если ОписаниеТаблиц.Свойство("Подразделы12Взносы2017") Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВзносыФизлиц.ПФРПоСуммарномуТарифу), 0) КАК П011110006101,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц1
		|					ТОГДА ВзносыФизлиц.ПФРПоСуммарномуТарифу
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П011110006103,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц2
		|					ТОГДА ВзносыФизлиц.ПФРПоСуммарномуТарифу
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П011110006104,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц3
		|					ТОГДА ВзносыФизлиц.ПФРПоСуммарномуТарифу
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П011110006105,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ВзносыФизлиц.ЗастрахованПФР
		|					ТОГДА ВзносыФизлиц.ИсчисленоПФРССуммПревышения
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П011110006201,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц1
		|						И ВзносыФизлиц.ЗастрахованПФР
		|					ТОГДА ВзносыФизлиц.ИсчисленоПФРССуммПревышения
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П011110006203,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц2
		|						И ВзносыФизлиц.ЗастрахованПФР
		|					ТОГДА ВзносыФизлиц.ИсчисленоПФРССуммПревышения
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П011110006204,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц3
		|						И ВзносыФизлиц.ЗастрахованПФР
		|					ТОГДА ВзносыФизлиц.ИсчисленоПФРССуммПревышения
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П011110006205,
		|	ЕСТЬNULL(СУММА(ВзносыФизлиц.ФФОМС), 0) КАК П011120006001,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц1
		|					ТОГДА ВзносыФизлиц.ФФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П011120006003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц2
		|					ТОГДА ВзносыФизлиц.ФФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П011120006004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц3
		|					ТОГДА ВзносыФизлиц.ФФОМС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П011120006005,
		|	ВзносыФизлиц.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
		|	ВзносыФизлиц.КодТарифа,
		|	ВзносыФизлиц.ФизическоеЛицо
		|ИЗ
		|	ВТДоходыВзносов КАК ВзносыФизлиц
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзносыФизлиц.ФизическоеЛицо,
		|	ВзносыФизлиц.КодТарифа,
		|	ВзносыФизлиц.ВидТарифаСтраховыхВзносов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидТарифаСтраховыхВзносов";
		МассивПолей = Новый Массив;
		Если Не ПодробныеДанные Тогда
			МассивПолей.Добавить("ФизическоеЛицо");
		КонецЕсли;
		Запрос.Текст = УдалитьПоляРасшифровкиИзЗапроса(ТекстЗапроса, МассивПолей, "ВзносыФизлиц");
		ОписаниеТаблиц.Подразделы12Взносы2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	
	// Подраздел 3.1 Приложения 1 Раздела 1
	
	Если ОписаниеТаблиц.Свойство("Подраздел31Доходы2017") Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
		|	СведенияОДоходах.Период КАК Период,
		|	0 КАК НачисленоВсегоЗаЗанятыхНаПодземныхИВредныхРаботах,
		|	0 КАК НачисленоВсегоЗаЗанятыхНаТяжелыхИПрочихРаботах,
		|	0 КАК НеОблагаетсяЗаЗанятыхНаПодземныхИВредныхРаботах,
		|	0 КАК НеОблагаетсяЗаЗанятыхНаТяжелыхИПрочихРаботах,
		|	0 КАК ОблагаемаяБазаПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
		|	0 КАК ОблагаемаяБазаПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
		|	СведенияОДоходах.ФизическоеЛицо КАК ПолеФизическоеЛицо
		|ПОМЕСТИТЬ ВТДоходыВредныхВзносов
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
		|ГДЕ
		|	СведенияОДоходах.Организация = &ОбособленноеПодразделение
		|	И СведенияОДоходах.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|	И СведенияОДоходах.ЗастрахованПФР
		|	И СведенияОДоходах.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				Организации.ФизическоеЛицо
		|			ИЗ
		|				ВТФизЛицаСОблагаемойБазой КАК Организации)
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ФизическоеЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	""1"" КАК П11131М100101,
		|	ЕСТЬNULL(СУММА(СведенияОДоходах.НачисленоВсегоЗаЗанятыхНаПодземныхИВредныхРаботах), 0) КАК П11131М102001,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц1
		|					ТОГДА СведенияОДоходах.НачисленоВсегоЗаЗанятыхНаПодземныхИВредныхРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П11131М102003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц2
		|					ТОГДА СведенияОДоходах.НачисленоВсегоЗаЗанятыхНаПодземныхИВредныхРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П11131М102004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц3
		|					ТОГДА СведенияОДоходах.НачисленоВсегоЗаЗанятыхНаПодземныхИВредныхРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П11131М102005,
		|	ЕСТЬNULL(СУММА(СведенияОДоходах.НеОблагаетсяЗаЗанятыхНаПодземныхИВредныхРаботах), 0) КАК П11131М103001,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц1
		|					ТОГДА СведенияОДоходах.НеОблагаетсяЗаЗанятыхНаПодземныхИВредныхРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П11131М103003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц2
		|					ТОГДА СведенияОДоходах.НеОблагаетсяЗаЗанятыхНаПодземныхИВредныхРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П11131М103004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц3
		|					ТОГДА СведенияОДоходах.НеОблагаетсяЗаЗанятыхНаПодземныхИВредныхРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П11131М103005,
		|	СведенияОДоходах.ПолеФизическоеЛицо
		|ИЗ
		|	ВТДоходыВредныхВзносов КАК СведенияОДоходах
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.ПолеФизическоеЛицо,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов
		|
		|ИМЕЮЩИЕ
		|	СУММА(СведенияОДоходах.НачисленоВсегоЗаЗанятыхНаПодземныхИВредныхРаботах) <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	""2"",
		|	ЕСТЬNULL(СУММА(СведенияОДоходах.НачисленоВсегоЗаЗанятыхНаТяжелыхИПрочихРаботах), 0),
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц1
		|					ТОГДА СведенияОДоходах.НачисленоВсегоЗаЗанятыхНаТяжелыхИПрочихРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0),
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц2
		|					ТОГДА СведенияОДоходах.НачисленоВсегоЗаЗанятыхНаТяжелыхИПрочихРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0),
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц3
		|					ТОГДА СведенияОДоходах.НачисленоВсегоЗаЗанятыхНаТяжелыхИПрочихРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0),
		|	ЕСТЬNULL(СУММА(СведенияОДоходах.НеОблагаетсяЗаЗанятыхНаТяжелыхИПрочихРаботах), 0),
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц1
		|					ТОГДА СведенияОДоходах.НеОблагаетсяЗаЗанятыхНаТяжелыхИПрочихРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0),
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц2
		|					ТОГДА СведенияОДоходах.НеОблагаетсяЗаЗанятыхНаТяжелыхИПрочихРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0),
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц3
		|					ТОГДА СведенияОДоходах.НеОблагаетсяЗаЗанятыхНаТяжелыхИПрочихРаботах
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0),
		|	СведенияОДоходах.ПолеФизическоеЛицо
		|ИЗ
		|	ВТДоходыВредныхВзносов КАК СведенияОДоходах
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.ПолеФизическоеЛицо,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов
		|
		|ИМЕЮЩИЕ
		|	СУММА(СведенияОДоходах.НачисленоВсегоЗаЗанятыхНаТяжелыхИПрочихРаботах) <> 0";
		МассивПолей = Новый Массив;
		Если ПодробныеДанные Тогда
			Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ПолеФизическоеЛицо", "ФизическоеЛицо");
		Иначе 
			МассивПолей = Новый Массив;
			МассивПолей.Добавить("ПолеФизическоеЛицо");
			Запрос.Текст = УдалитьПоляРасшифровкиИзЗапроса(ТекстЗапроса, МассивПолей);
		КонецЕсли;
		ОписаниеТаблиц.Подраздел31Доходы2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	Если ОписаниеТаблиц.Свойство("Подраздел31Численность2017") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Взносы.Период,
		|	Взносы.ВидТарифаСтраховыхВзносов,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взносы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЛицаСВреднымиВзносамиЗаОтдельныеМесяцы
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК Взносы
		|ГДЕ
		|	Ложь
		|	И Взносы.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	Взносы.ВидТарифаСтраховыхВзносов,
		|	Взносы.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Взносы.ВидТарифаСтраховыхВзносов,
		|	Взносы.Период,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взносы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК Взносы
		|ГДЕ
		|	Ложь
		|	И Взносы.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	Взносы.ВидТарифаСтраховыхВзносов,
		|	Взносы.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Взносы.ВидТарифаСтраховыхВзносов,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взносы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЛицаСВреднымиВзносамиЗаВсеМесяцы
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК Взносы
		|ГДЕ
		|	Ложь
		|	И Взносы.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	Взносы.ВидТарифаСтраховыхВзносов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Взносы.ВидТарифаСтраховыхВзносов,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взносы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЛицаСТяжелымиВзносамиЗаВсеМесяцы
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК Взносы
		|ГДЕ
		|	Ложь
		|	И Взносы.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	Взносы.ВидТарифаСтраховыхВзносов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Взносы.ВидТарифаСтраховыхВзносов,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взносы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЛицаСВреднымиВзносамиЗаКвартал
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК Взносы
		|ГДЕ
		|	Ложь
		|	И Взносы.Период МЕЖДУ &НачалоОтчетногоКвартала И &КонецОтчетногоПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	Взносы.ВидТарифаСтраховыхВзносов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Взносы.ВидТарифаСтраховыхВзносов,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взносы.ФизическоеЛицо) КАК ВсегоФизлиц
		|ПОМЕСТИТЬ ВТЛицаСТяжелымиВзносамиЗаКвартал
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК Взносы
		|ГДЕ
		|	Ложь
		|	И Взносы.Период МЕЖДУ &НачалоОтчетногоКвартала И &КонецОтчетногоПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	Взносы.ВидТарифаСтраховыхВзносов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЛицаСВреднымиВзносамиЗаВсеМесяцы.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
		|	""1"" КАК П11131М100101,
		|	МАКСИМУМ(ЕСТЬNULL(ЛицаСВреднымиВзносамиЗаВсеМесяцы.ВсегоФизлиц, 0)) КАК П11131М101001,
		|	МАКСИМУМ(ЕСТЬNULL(ЛицаСВреднымиВзносамиЗаКвартал.ВсегоФизлиц, 0)) КАК П11131М101002,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц1
		|				ТОГДА ЕСТЬNULL(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П11131М101003,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц2
		|				ТОГДА ЕСТЬNULL(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П11131М101004,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц3
		|				ТОГДА ЕСТЬNULL(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П11131М101005
		|ИЗ
		|	ВТМесяцыОтчета КАК МесяцыОтчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСВреднымиВзносамиЗаВсеМесяцы КАК ЛицаСВреднымиВзносамиЗаВсеМесяцы
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСВреднымиВзносамиЗаКвартал КАК ЛицаСВреднымиВзносамиЗаКвартал
		|			ПО ЛицаСВреднымиВзносамиЗаВсеМесяцы.ВидТарифаСтраховыхВзносов = ЛицаСВреднымиВзносамиЗаКвартал.ВидТарифаСтраховыхВзносов
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСВреднымиВзносамиЗаОтдельныеМесяцы КАК ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы
		|		ПО (МесяцыОтчета.МесяцПериода = МЕСЯЦ(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.Период))
		|			И (ЛицаСВреднымиВзносамиЗаВсеМесяцы.ВидТарифаСтраховыхВзносов = ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.ВидТарифаСтраховыхВзносов)
		|ГДЕ
		|	ЛицаСВреднымиВзносамиЗаВсеМесяцы.ВидТарифаСтраховыхВзносов ЕСТЬ НЕ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ЛицаСВреднымиВзносамиЗаВсеМесяцы.ВидТарифаСтраховыхВзносов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЛицаСТяжелымиВзносамиЗаВсеМесяцы.ВидТарифаСтраховыхВзносов,
		|	""2"",
		|	МАКСИМУМ(ЕСТЬNULL(ЛицаСТяжелымиВзносамиЗаВсеМесяцы.ВсегоФизлиц, 0)),
		|	МАКСИМУМ(ЕСТЬNULL(ЛицаСТяжелымиВзносамиЗаКвартал.ВсегоФизлиц, 0)),
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц1
		|				ТОГДА ЕСТЬNULL(ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц2
		|				ТОГДА ЕСТЬNULL(ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц3
		|				ТОГДА ЕСТЬNULL(ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ)
		|ИЗ
		|	ВТМесяцыОтчета КАК МесяцыОтчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСТяжелымиВзносамиЗаВсеМесяцы КАК ЛицаСТяжелымиВзносамиЗаВсеМесяцы
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСТяжелымиВзносамиЗаКвартал КАК ЛицаСТяжелымиВзносамиЗаКвартал
		|			ПО ЛицаСТяжелымиВзносамиЗаВсеМесяцы.ВидТарифаСтраховыхВзносов = ЛицаСТяжелымиВзносамиЗаКвартал.ВидТарифаСтраховыхВзносов
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы КАК ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы
		|		ПО (МесяцыОтчета.МесяцПериода = МЕСЯЦ(ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.Период))
		|			И (ЛицаСТяжелымиВзносамиЗаВсеМесяцы.ВидТарифаСтраховыхВзносов = ЛицаСТяжелымиВзносамиЗаОтдельныеМесяцы.ВидТарифаСтраховыхВзносов)
		|ГДЕ
		|	ЛицаСТяжелымиВзносамиЗаВсеМесяцы.ВидТарифаСтраховыхВзносов ЕСТЬ НЕ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ЛицаСТяжелымиВзносамиЗаВсеМесяцы.ВидТарифаСтраховыхВзносов";
		ОписаниеТаблиц.Подраздел31Численность2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
		
	// Подраздел 3.2 Приложения 1 Раздела 1
	
	Если ОписаниеТаблиц.Свойство("Подраздел32Основания2017") Или ОписаниеТаблиц.Свойство("Подраздел32Доходы2017") Или ОписаниеТаблиц.Свойство("Подраздел322Доходы2017") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОДоходах.Период КАК Период,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
		|	""1"" КАК Основание,
		|	""1"" КАК КлассУсловийТруда,
		|	0 КАК НачисленоВсего,
		|	0 КАК НеОблагается,
		|	0 КАК ОблагаемаяБаза,
		|	СведенияОДоходах.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТДоходыПоКлассамУсловий
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
		|ГДЕ
		|	СведенияОДоходах.Организация = &ОбособленноеПодразделение
		|	И СведенияОДоходах.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|	И СведенияОДоходах.ЗастрахованПФР
		|	И СведенияОДоходах.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				Организации.ФизическоеЛицо
		|			ИЗ
		|				ВТФизЛицаСОблагаемойБазой КАК Организации)
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	СведенияОДоходах.ФизическоеЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	""1"",
		|	""2"",
		|	0,
		|	0,
		|	0,
		|	СведенияОДоходах.ФизическоеЛицо
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
		|ГДЕ
		|	СведенияОДоходах.Организация = &ОбособленноеПодразделение
		|	И СведенияОДоходах.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|	И СведенияОДоходах.ЗастрахованПФР
		|	И СведенияОДоходах.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				Организации.ФизическоеЛицо
		|			ИЗ
		|				ВТФизЛицаСОблагаемойБазой КАК Организации)
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	СведенияОДоходах.ФизическоеЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	""1"",
		|	""3"",
		|	0,
		|	0,
		|	0,
		|	СведенияОДоходах.ФизическоеЛицо
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
		|ГДЕ
		|	СведенияОДоходах.Организация = &ОбособленноеПодразделение
		|	И СведенияОДоходах.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|	И СведенияОДоходах.ЗастрахованПФР
		|	И СведенияОДоходах.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				Организации.ФизическоеЛицо
		|			ИЗ
		|				ВТФизЛицаСОблагаемойБазой КАК Организации)
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	СведенияОДоходах.ФизическоеЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	""1"",
		|	""4"",
		|	0,
		|	0,
		|	0,
		|	СведенияОДоходах.ФизическоеЛицо
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
		|ГДЕ
		|	СведенияОДоходах.Организация = &ОбособленноеПодразделение
		|	И СведенияОДоходах.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|	И СведенияОДоходах.ЗастрахованПФР
		|	И СведенияОДоходах.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				Организации.ФизическоеЛицо
		|			ИЗ
		|				ВТФизЛицаСОблагаемойБазой КАК Организации)
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	СведенияОДоходах.ФизическоеЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	""1"",
		|	""5"",
		|	0,
		|	0,
		|	0,
		|	СведенияОДоходах.ФизическоеЛицо
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
		|ГДЕ
		|	СведенияОДоходах.Организация = &ОбособленноеПодразделение
		|	И СведенияОДоходах.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|	И СведенияОДоходах.ЗастрахованПФР
		|	И СведенияОДоходах.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				Организации.ФизическоеЛицо
		|			ИЗ
		|				ВТФизЛицаСОблагаемойБазой КАК Организации)
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	СведенияОДоходах.ФизическоеЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	""2"",
		|	""1"",
		|	0,
		|	0,
		|	0,
		|	СведенияОДоходах.ФизическоеЛицо
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
		|ГДЕ
		|	СведенияОДоходах.Организация = &ОбособленноеПодразделение
		|	И СведенияОДоходах.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|	И СведенияОДоходах.ЗастрахованПФР
		|	И СведенияОДоходах.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				Организации.ФизическоеЛицо
		|			ИЗ
		|				ВТФизЛицаСОблагаемойБазой КАК Организации)
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	СведенияОДоходах.ФизическоеЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	""2"",
		|	""2"",
		|	0,
		|	0,
		|	0,
		|	СведенияОДоходах.ФизическоеЛицо
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
		|ГДЕ
		|	СведенияОДоходах.Организация = &ОбособленноеПодразделение
		|	И СведенияОДоходах.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|	И СведенияОДоходах.ЗастрахованПФР
		|	И СведенияОДоходах.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				Организации.ФизическоеЛицо
		|			ИЗ
		|				ВТФизЛицаСОблагаемойБазой КАК Организации)
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	СведенияОДоходах.ФизическоеЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	""2"",
		|	""3"",
		|	0,
		|	0,
		|	0,
		|	СведенияОДоходах.ФизическоеЛицо
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
		|ГДЕ
		|	СведенияОДоходах.Организация = &ОбособленноеПодразделение
		|	И СведенияОДоходах.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|	И СведенияОДоходах.ЗастрахованПФР
		|	И СведенияОДоходах.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				Организации.ФизическоеЛицо
		|			ИЗ
		|				ВТФизЛицаСОблагаемойБазой КАК Организации)
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	СведенияОДоходах.ФизическоеЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	""2"",
		|	""4"",
		|	0,
		|	0,
		|	0,
		|	СведенияОДоходах.ФизическоеЛицо
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
		|ГДЕ
		|	СведенияОДоходах.Организация = &ОбособленноеПодразделение
		|	И СведенияОДоходах.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|	И СведенияОДоходах.ЗастрахованПФР
		|	И СведенияОДоходах.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				Организации.ФизическоеЛицо
		|			ИЗ
		|				ВТФизЛицаСОблагаемойБазой КАК Организации)
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	СведенияОДоходах.ФизическоеЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	""2"",
		|	""5"",
		|	0,
		|	0,
		|	0,
		|	СведенияОДоходах.ФизическоеЛицо
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
		|ГДЕ
		|	СведенияОДоходах.Организация = &ОбособленноеПодразделение
		|	И СведенияОДоходах.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|	И СведенияОДоходах.ЗастрахованПФР
		|	И СведенияОДоходах.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				Организации.ФизическоеЛицо
		|			ИЗ
		|				ВТФизЛицаСОблагаемойБазой КАК Организации)
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	СведенияОДоходах.ФизическоеЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период";
		Запрос.Выполнить()
	КонецЕсли;
	Если ОписаниеТаблиц.Свойство("Подраздел32Основания2017") Или ОписаниеТаблиц.Свойство("Подраздел32Численность2017") Или ОписаниеТаблиц.Свойство("Подраздел32Взносы2017") Или ОписаниеТаблиц.Свойство("Подраздел322Доходы2017") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Взносы.ВидТарифаСтраховыхВзносов,
		|	Взносы.Основание,
		|	Взносы.КлассУсловийТруда,
		|	Взносы.Период,
		|	СУММА(Взносы.Сумма) КАК Взносы,
		|	Взносы.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТВзносыПоКлассамУсловий
		|ИЗ
		|	(ВЫБРАТЬ
		|		""1"" КАК Основание,
		|		""1"" КАК КлассУсловийТруда,
		|		ВзносыФизлиц.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
		|		ВзносыФизлиц.Период КАК Период,
		|		0 КАК Сумма,
		|		ВзносыФизлиц.ФизическоеЛицо КАК ФизическоеЛицо
		|	ИЗ
		|		ВТРасширенныеСведенияОДоходахИВзносах КАК ВзносыФизлиц
		|	ГДЕ
		|		ВзносыФизлиц.ФизическоеЛицо В
		|				(ВЫБРАТЬ
		|					Организации.ФизическоеЛицо
		|				ИЗ
		|					ВТФизЛицаСОблагаемойБазой КАК Организации)
		|		И ВзносыФизлиц.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		""1"",
		|		""2"",
		|		ВзносыФизлиц.ВидТарифаСтраховыхВзносов,
		|		ВзносыФизлиц.Период,
		|		0,
		|		ВзносыФизлиц.ФизическоеЛицо
		|	ИЗ
		|		ВТРасширенныеСведенияОДоходахИВзносах КАК ВзносыФизлиц
		|	ГДЕ
		|		ВзносыФизлиц.ФизическоеЛицо В
		|				(ВЫБРАТЬ
		|					Организации.ФизическоеЛицо
		|				ИЗ
		|					ВТФизЛицаСОблагаемойБазой КАК Организации)
		|		И ВзносыФизлиц.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		""1"",
		|		""3"",
		|		ВзносыФизлиц.ВидТарифаСтраховыхВзносов,
		|		ВзносыФизлиц.Период,
		|		0,
		|		ВзносыФизлиц.ФизическоеЛицо
		|	ИЗ
		|		ВТРасширенныеСведенияОДоходахИВзносах КАК ВзносыФизлиц
		|	ГДЕ
		|		ВзносыФизлиц.ФизическоеЛицо В
		|				(ВЫБРАТЬ
		|					Организации.ФизическоеЛицо
		|				ИЗ
		|					ВТФизЛицаСОблагаемойБазой КАК Организации)
		|		И ВзносыФизлиц.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		""1"",
		|		""4"",
		|		ВзносыФизлиц.ВидТарифаСтраховыхВзносов,
		|		ВзносыФизлиц.Период,
		|		0,
		|		ВзносыФизлиц.ФизическоеЛицо
		|	ИЗ
		|		ВТРасширенныеСведенияОДоходахИВзносах КАК ВзносыФизлиц
		|	ГДЕ
		|		ВзносыФизлиц.ФизическоеЛицо В
		|				(ВЫБРАТЬ
		|					Организации.ФизическоеЛицо
		|				ИЗ
		|					ВТФизЛицаСОблагаемойБазой КАК Организации)
		|		И ВзносыФизлиц.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		""1"",
		|		""5"",
		|		ВзносыФизлиц.ВидТарифаСтраховыхВзносов,
		|		ВзносыФизлиц.Период,
		|		0,
		|		ВзносыФизлиц.ФизическоеЛицо
		|	ИЗ
		|		ВТРасширенныеСведенияОДоходахИВзносах КАК ВзносыФизлиц
		|	ГДЕ
		|		ВзносыФизлиц.ФизическоеЛицо В
		|				(ВЫБРАТЬ
		|					Организации.ФизическоеЛицо
		|				ИЗ
		|					ВТФизЛицаСОблагаемойБазой КАК Организации)
		|		И ВзносыФизлиц.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		""2"",
		|		""1"",
		|		ВзносыФизлиц.ВидТарифаСтраховыхВзносов,
		|		ВзносыФизлиц.Период,
		|		0,
		|		ВзносыФизлиц.ФизическоеЛицо
		|	ИЗ
		|		ВТРасширенныеСведенияОДоходахИВзносах КАК ВзносыФизлиц
		|	ГДЕ
		|		ВзносыФизлиц.ФизическоеЛицо В
		|				(ВЫБРАТЬ
		|					Организации.ФизическоеЛицо
		|				ИЗ
		|					ВТФизЛицаСОблагаемойБазой КАК Организации)
		|		И ВзносыФизлиц.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		""2"",
		|		""2"",
		|		ВзносыФизлиц.ВидТарифаСтраховыхВзносов,
		|		ВзносыФизлиц.Период,
		|		0,
		|		ВзносыФизлиц.ФизическоеЛицо
		|	ИЗ
		|		ВТРасширенныеСведенияОДоходахИВзносах КАК ВзносыФизлиц
		|	ГДЕ
		|		ВзносыФизлиц.ФизическоеЛицо В
		|				(ВЫБРАТЬ
		|					Организации.ФизическоеЛицо
		|				ИЗ
		|					ВТФизЛицаСОблагаемойБазой КАК Организации)
		|		И ВзносыФизлиц.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		""2"",
		|		""3"",
		|		ВзносыФизлиц.ВидТарифаСтраховыхВзносов,
		|		ВзносыФизлиц.Период,
		|		0,
		|		ВзносыФизлиц.ФизическоеЛицо
		|	ИЗ
		|		ВТРасширенныеСведенияОДоходахИВзносах КАК ВзносыФизлиц
		|	ГДЕ
		|		ВзносыФизлиц.ФизическоеЛицо В
		|				(ВЫБРАТЬ
		|					Организации.ФизическоеЛицо
		|				ИЗ
		|					ВТФизЛицаСОблагаемойБазой КАК Организации)
		|		И ВзносыФизлиц.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		""2"",
		|		""4"",
		|		ВзносыФизлиц.ВидТарифаСтраховыхВзносов,
		|		ВзносыФизлиц.Период,
		|		0,
		|		ВзносыФизлиц.ФизическоеЛицо
		|	ИЗ
		|		ВТРасширенныеСведенияОДоходахИВзносах КАК ВзносыФизлиц
		|	ГДЕ
		|		ВзносыФизлиц.ФизическоеЛицо В
		|				(ВЫБРАТЬ
		|					Организации.ФизическоеЛицо
		|				ИЗ
		|					ВТФизЛицаСОблагаемойБазой КАК Организации)
		|		И ВзносыФизлиц.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		""2"",
		|		""5"",
		|		ВзносыФизлиц.ВидТарифаСтраховыхВзносов,
		|		ВзносыФизлиц.Период,
		|		0,
		|		ВзносыФизлиц.ФизическоеЛицо
		|	ИЗ
		|		ВТРасширенныеСведенияОДоходахИВзносах КАК ВзносыФизлиц
		|	ГДЕ
		|		ВзносыФизлиц.ФизическоеЛицо В
		|				(ВЫБРАТЬ
		|					Организации.ФизическоеЛицо
		|				ИЗ
		|					ВТФизЛицаСОблагаемойБазой КАК Организации)
		|		И ВзносыФизлиц.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода) КАК Взносы
		|
		|СГРУППИРОВАТЬ ПО
		|	Взносы.Основание,
		|	Взносы.Период,
		|	Взносы.ФизическоеЛицо,
		|	Взносы.КлассУсловийТруда,
		|	Взносы.ВидТарифаСтраховыхВзносов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Взносы.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВзносыФизлиц.Основание,
		|	ВзносыФизлиц.ВидТарифаСтраховыхВзносов,
		|	ВзносыФизлиц.КлассУсловийТруда
		|ПОМЕСТИТЬ ВТОснованияВзносов
		|ИЗ
		|	ВТВзносыПоКлассамУсловий КАК ВзносыФизлиц
		|ГДЕ
		|	ВзносыФизлиц.Взносы > 0";
		Запрос.Выполнить()
	КонецЕсли;
	
	Если ОписаниеТаблиц.Свойство("Подраздел32Основания2017") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Доходы.ВидТарифаСтраховыхВзносов,
		|	Доходы.Основание КАК П11132М100101,
		|	Доходы.КлассУсловийТруда КАК П11132М100301
		|ИЗ
		|	ВТДоходыПоКлассамУсловий КАК Доходы
		|ГДЕ
		|	Доходы.НачисленоВсего > 0
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Взносы.ВидТарифаСтраховыхВзносов,
		|	Взносы.Основание,
		|	Взносы.КлассУсловийТруда
		|ИЗ
		|	ВТОснованияВзносов КАК Взносы";
		ОписаниеТаблиц.Подраздел32Основания2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	Если ОписаниеТаблиц.Свойство("Подраздел32Доходы2017") Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	СведенияОДоходах.Основание КАК П11132М100101,
		|	СведенияОДоходах.КлассУсловийТруда КАК П11132М100301,
		|	ЕСТЬNULL(СУММА(СведенияОДоходах.НачисленоВсего), 0) КАК П11132М102001,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц1
		|					ТОГДА СведенияОДоходах.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П11132М102003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц2
		|					ТОГДА СведенияОДоходах.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П11132М102004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц3
		|					ТОГДА СведенияОДоходах.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П11132М102005,
		|	ЕСТЬNULL(СУММА(СведенияОДоходах.НеОблагается), 0) КАК П11132М103001,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц1
		|					ТОГДА СведенияОДоходах.НеОблагается
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П11132М103003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц2
		|					ТОГДА СведенияОДоходах.НеОблагается
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П11132М103004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц3
		|					ТОГДА СведенияОДоходах.НеОблагается
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П11132М103005,
		|	СведенияОДоходах.ПолеФизическоеЛицо
		|ИЗ
		|	ВТДоходыПоКлассамУсловий КАК СведенияОДоходах
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.ПолеФизическоеЛицо,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	СведенияОДоходах.КлассУсловийТруда,
		|	СведенияОДоходах.Основание";
		МассивПолей = Новый Массив;
		Если ПодробныеДанные Тогда
			Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ПолеФизическоеЛицо", "ФизическоеЛицо");
		Иначе 
			МассивПолей = Новый Массив;
			МассивПолей.Добавить("ПолеФизическоеЛицо");
			Запрос.Текст = УдалитьПоляРасшифровкиИзЗапроса(ТекстЗапроса, МассивПолей);
		КонецЕсли;
		ОписаниеТаблиц.Подраздел32Доходы2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	Если ОписаниеТаблиц.Свойство("Подраздел32Численность2017") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВзносыПоКлассамУсловий.Основание,
		|	ВзносыПоКлассамУсловий.ВидТарифаСтраховыхВзносов,
		|	ВзносыПоКлассамУсловий.КлассУсловийТруда,
		|	СУММА(ВЫБОР
		|			КОГДА ВзносыПоКлассамУсловий.Взносы > 0
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВсегоФизлиц,
		|	ВзносыПоКлассамУсловий.Период
		|ПОМЕСТИТЬ ВТЛицаСВзносамиПоКлассамУсловийТрудаЗаОтдельныеМесяцы
		|ИЗ
		|	ВТВзносыПоКлассамУсловий КАК ВзносыПоКлассамУсловий
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзносыПоКлассамУсловий.Период,
		|	ВзносыПоКлассамУсловий.ВидТарифаСтраховыхВзносов,
		|	ВзносыПоКлассамУсловий.КлассУсловийТруда,
		|	ВзносыПоКлассамУсловий.Основание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВзносыЗаВесьПериод.ВидТарифаСтраховыхВзносов,
		|	ВзносыЗаВесьПериод.КлассУсловийТруда,
		|	СУММА(ВЫБОР
		|			КОГДА ВзносыЗаВесьПериод.Взносы > 0
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВсегоФизлиц,
		|	ВзносыЗаВесьПериод.Основание
		|ПОМЕСТИТЬ ВТЛицаСВзносамиПоКлассамУсловийТрудаЗаВсеМесяцы
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВзносыПоКлассамУсловий.Основание КАК Основание,
		|		ВзносыПоКлассамУсловий.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
		|		ВзносыПоКлассамУсловий.КлассУсловийТруда КАК КлассУсловийТруда,
		|		ВзносыПоКлассамУсловий.ФизическоеЛицо КАК ФизическоеЛицо,
		|		СУММА(ВзносыПоКлассамУсловий.Взносы) КАК Взносы
		|	ИЗ
		|		ВТВзносыПоКлассамУсловий КАК ВзносыПоКлассамУсловий
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВзносыПоКлассамУсловий.Основание,
		|		ВзносыПоКлассамУсловий.ВидТарифаСтраховыхВзносов,
		|		ВзносыПоКлассамУсловий.КлассУсловийТруда,
		|		ВзносыПоКлассамУсловий.ФизическоеЛицо) КАК ВзносыЗаВесьПериод
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзносыЗаВесьПериод.ВидТарифаСтраховыхВзносов,
		|	ВзносыЗаВесьПериод.КлассУсловийТруда,
		|	ВзносыЗаВесьПериод.Основание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВзносыЗаВесьПериод.ВидТарифаСтраховыхВзносов,
		|	ВзносыЗаВесьПериод.КлассУсловийТруда,
		|	СУММА(ВЫБОР
		|			КОГДА ВзносыЗаВесьПериод.Взносы > 0
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВсегоФизлиц,
		|	ВзносыЗаВесьПериод.Основание
		|ПОМЕСТИТЬ ВТЛицаСВзносамиПоКлассамУсловийТрудаЗаКвартал
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВзносыПоКлассамУсловий.Основание КАК Основание,
		|		ВзносыПоКлассамУсловий.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
		|		ВзносыПоКлассамУсловий.КлассУсловийТруда КАК КлассУсловийТруда,
		|		ВзносыПоКлассамУсловий.ФизическоеЛицо КАК ФизическоеЛицо,
		|		СУММА(ВзносыПоКлассамУсловий.Взносы) КАК Взносы
		|	ИЗ
		|		ВТВзносыПоКлассамУсловий КАК ВзносыПоКлассамУсловий
		|	ГДЕ
		|		ВзносыПоКлассамУсловий.Период МЕЖДУ &НачалоОтчетногоКвартала И &КонецОтчетногоПериода
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВзносыПоКлассамУсловий.Основание,
		|		ВзносыПоКлассамУсловий.ВидТарифаСтраховыхВзносов,
		|		ВзносыПоКлассамУсловий.КлассУсловийТруда,
		|		ВзносыПоКлассамУсловий.ФизическоеЛицо) КАК ВзносыЗаВесьПериод
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзносыЗаВесьПериод.ВидТарифаСтраховыхВзносов,
		|	ВзносыЗаВесьПериод.КлассУсловийТруда,
		|	ВзносыЗаВесьПериод.Основание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЕСТЬNULL(ЛицаСВреднымиВзносамиЗаВсеМесяцы.ВсегоФизлиц, 0)) КАК П11132М101001,
		|	МАКСИМУМ(ЕСТЬNULL(ЛицаСВреднымиВзносамиЗаКвартал.ВсегоФизлиц, 0)) КАК П11132М101002,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц1
		|				ТОГДА ЕСТЬNULL(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П11132М101003,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц2
		|				ТОГДА ЕСТЬNULL(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П11132М101004,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц3
		|				ТОГДА ЕСТЬNULL(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П11132М101005,
		|	ОснованияВзносов.ВидТарифаСтраховыхВзносов,
		|	ОснованияВзносов.КлассУсловийТруда КАК П11132М100301,
		|	ОснованияВзносов.Основание КАК П11132М100101
		|ИЗ
		|	ВТМесяцыОтчета КАК МесяцыОтчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОснованияВзносов КАК ОснованияВзносов
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСВзносамиПоКлассамУсловийТрудаЗаВсеМесяцы КАК ЛицаСВреднымиВзносамиЗаВсеМесяцы
		|		ПО (ОснованияВзносов.Основание = ЛицаСВреднымиВзносамиЗаВсеМесяцы.Основание)
		|			И (ОснованияВзносов.ВидТарифаСтраховыхВзносов = ЛицаСВреднымиВзносамиЗаВсеМесяцы.ВидТарифаСтраховыхВзносов)
		|			И (ОснованияВзносов.КлассУсловийТруда = ЛицаСВреднымиВзносамиЗаВсеМесяцы.КлассУсловийТруда)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСВзносамиПоКлассамУсловийТрудаЗаКвартал КАК ЛицаСВреднымиВзносамиЗаКвартал
		|		ПО (ОснованияВзносов.Основание = ЛицаСВреднымиВзносамиЗаКвартал.Основание)
		|			И (ОснованияВзносов.ВидТарифаСтраховыхВзносов = ЛицаСВреднымиВзносамиЗаКвартал.ВидТарифаСтраховыхВзносов)
		|			И (ОснованияВзносов.КлассУсловийТруда = ЛицаСВреднымиВзносамиЗаКвартал.КлассУсловийТруда)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСВзносамиПоКлассамУсловийТрудаЗаОтдельныеМесяцы КАК ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы
		|		ПО (МесяцыОтчета.МесяцПериода = МЕСЯЦ(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.Период))
		|			И (ОснованияВзносов.Основание = ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.Основание)
		|			И (ОснованияВзносов.ВидТарифаСтраховыхВзносов = ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.ВидТарифаСтраховыхВзносов)
		|			И (ОснованияВзносов.КлассУсловийТруда = ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.КлассУсловийТруда)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОснованияВзносов.ВидТарифаСтраховыхВзносов,
		|	ОснованияВзносов.КлассУсловийТруда,
		|	ОснованияВзносов.Основание";
		ОписаниеТаблиц.Подраздел32Численность2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	Если ОписаниеТаблиц.Свойство("Подраздел32Взносы2017") Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВзносыФизлиц.ВидТарифаСтраховыхВзносов,
		|	ВзносыФизлиц.КлассУсловийТруда КАК П11132М100301,
		|	ВзносыФизлиц.Основание КАК П11132М100101,
		|	ЕСТЬNULL(СУММА(ВзносыФизлиц.Взносы), 0) КАК П11132М105001,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц1
		|					ТОГДА ВзносыФизлиц.Взносы
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П11132М105003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц2
		|					ТОГДА ВзносыФизлиц.Взносы
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П11132М105004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц3
		|					ТОГДА ВзносыФизлиц.Взносы
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П11132М105005,
		|	ВзносыФизлиц.ПолеФизическоеЛицо
		|ИЗ
		|	ВТВзносыПоКлассамУсловий КАК ВзносыФизлиц
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзносыФизлиц.Основание,
		|	ВзносыФизлиц.ВидТарифаСтраховыхВзносов,
		|	ВзносыФизлиц.КлассУсловийТруда,
		|	ВзносыФизлиц.ПолеФизическоеЛицо";
		Если ПодробныеДанные Тогда
			Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ПолеФизическоеЛицо", "ФизическоеЛицо");
		Иначе 
			МассивПолей = Новый Массив;
			МассивПолей.Добавить("ПолеФизическоеЛицо");
			Запрос.Текст = УдалитьПоляРасшифровкиИзЗапроса(ТекстЗапроса, МассивПолей, "ВзносыФизлиц");
		КонецЕсли;
		ОписаниеТаблиц.Подраздел32Взносы2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	
	// Подраздел 4 Приложения 1 Раздела 1
	
	Если ОписаниеТаблиц.Свойство("Подраздел4Доходы2017") Или ОписаниеТаблиц.Свойство("Подраздел4Численность2017") Или ОписаниеТаблиц.Свойство("Подраздел4Взносы2017") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОДоходах.Период КАК Период,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
		|	""1"" КАК Основание,
		|	0 КАК НачисленоВсего,
		|	0 КАК НеОблагается,
		|	0 КАК ОблагаемаяБаза,
		|	0 КАК Взносы,
		|	СведенияОДоходах.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТДоходыВзносыАвиаторовГорняков
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
		|ГДЕ
		|	СведенияОДоходах.Организация = &ОбособленноеПодразделение
		|	И СведенияОДоходах.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|	И СведенияОДоходах.ЗастрахованПФР
		|	И СведенияОДоходах.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				Организации.ФизическоеЛицо
		|			ИЗ
		|				ВТФизЛицаСОблагаемойБазой КАК Организации)
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	СведенияОДоходах.ФизическоеЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	""2"",
		|	0,
		|	0,
		|	0,
		|	0,
		|	СведенияОДоходах.ФизическоеЛицо
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
		|ГДЕ
		|	СведенияОДоходах.Организация = &ОбособленноеПодразделение
		|	И СведенияОДоходах.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|	И СведенияОДоходах.ЗастрахованПФР
		|	И СведенияОДоходах.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				Организации.ФизическоеЛицо
		|			ИЗ
		|				ВТФизЛицаСОблагаемойБазой КАК Организации)
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.Период,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	СведенияОДоходах.ФизическоеЛицо";
		Запрос.Выполнить()
	КонецЕсли;
	Если ОписаниеТаблиц.Свойство("Подраздел4Доходы2017") Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	СведенияОДоходах.Основание КАК П01114М100101,
		|	ЕСТЬNULL(СУММА(СведенияОДоходах.НачисленоВсего), 0) КАК П01114М102001,
		|	ЕСТЬNULL(СУММА(ВЫБОР                                    
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц1
		|					ТОГДА СведенияОДоходах.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П01114М102003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц2
		|					ТОГДА СведенияОДоходах.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П01114М102004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц3
		|					ТОГДА СведенияОДоходах.НачисленоВсего
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П01114М102005,
		|	ЕСТЬNULL(СУММА(СведенияОДоходах.НеОблагается), 0) КАК П01114М103001,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц1
		|					ТОГДА СведенияОДоходах.НеОблагается
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П01114М103003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц2
		|					ТОГДА СведенияОДоходах.НеОблагается
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П01114М103004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц3
		|					ТОГДА СведенияОДоходах.НеОблагается
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П01114М103005,
		|	СведенияОДоходах.ПолеФизическоеЛицо
		|ИЗ
		|	ВТДоходыВзносыАвиаторовГорняков КАК СведенияОДоходах
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.ПолеФизическоеЛицо,
		|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
		|	СведенияОДоходах.Основание";
		МассивПолей = Новый Массив;
		Если ПодробныеДанные Тогда
			Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ПолеФизическоеЛицо", "ФизическоеЛицо");
		Иначе 
			МассивПолей = Новый Массив;
			МассивПолей.Добавить("ПолеФизическоеЛицо");
			Запрос.Текст = УдалитьПоляРасшифровкиИзЗапроса(ТекстЗапроса, МассивПолей);
		КонецЕсли;
		ОписаниеТаблиц.Подраздел4Доходы2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	Если ОписаниеТаблиц.Свойство("Подраздел4Численность2017") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВзносыФизлиц.Основание,
		|	ВзносыФизлиц.ВидТарифаСтраховыхВзносов,
		|	СУММА(ВЫБОР
		|			КОГДА ВзносыФизлиц.Взносы > 0
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВсегоФизлиц,
		|	ВзносыФизлиц.Период
		|ПОМЕСТИТЬ ВТЛицаСВзносамиАвиаторовГорняковЗаОтдельныеМесяцы
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВзносыФизлиц.Основание КАК Основание,
		|		ВзносыФизлиц.Период КАК Период,
		|		ВзносыФизлиц.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
		|		ВзносыФизлиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|		СУММА(ВзносыФизлиц.Взносы) КАК Взносы
		|	ИЗ
		|		ВТДоходыВзносыАвиаторовГорняков КАК ВзносыФизлиц
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВзносыФизлиц.Основание,
		|		ВзносыФизлиц.Период,
		|		ВзносыФизлиц.ВидТарифаСтраховыхВзносов,
		|		ВзносыФизлиц.ФизическоеЛицо) КАК ВзносыФизлиц
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзносыФизлиц.Период,
		|	ВзносыФизлиц.ВидТарифаСтраховыхВзносов,
		|	ВзносыФизлиц.Основание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВзносыФизлиц.Основание,
		|	ВзносыФизлиц.ВидТарифаСтраховыхВзносов
		|ПОМЕСТИТЬ ВТОснованияВзносовАвиаторовГорняков
		|ИЗ
		|	ВТДоходыВзносыАвиаторовГорняков КАК ВзносыФизлиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВзносыЗаВесьПериод.ВидТарифаСтраховыхВзносов,
		|	СУММА(ВЫБОР
		|			КОГДА ВзносыЗаВесьПериод.Взносы > 0
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВсегоФизлиц,
		|	ВзносыЗаВесьПериод.Основание
		|ПОМЕСТИТЬ ВТЛицаСВзносамиАвиаторовГорняковЗаВсеМесяцы
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВзносыФизлиц.Основание КАК Основание,
		|		ВзносыФизлиц.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
		|		ВзносыФизлиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|		СУММА(ВзносыФизлиц.Взносы) КАК Взносы
		|	ИЗ
		|		ВТДоходыВзносыАвиаторовГорняков КАК ВзносыФизлиц
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВзносыФизлиц.Основание,
		|		ВзносыФизлиц.ВидТарифаСтраховыхВзносов,
		|		ВзносыФизлиц.ФизическоеЛицо) КАК ВзносыЗаВесьПериод
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзносыЗаВесьПериод.ВидТарифаСтраховыхВзносов,
		|	ВзносыЗаВесьПериод.Основание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВзносыЗаВесьПериод.ВидТарифаСтраховыхВзносов,
		|	СУММА(ВЫБОР
		|			КОГДА ВзносыЗаВесьПериод.Взносы > 0
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВсегоФизлиц,
		|	ВзносыЗаВесьПериод.Основание
		|ПОМЕСТИТЬ ВТЛицаСВзносамиАвиаторовГорняковЗаКвартал
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВзносыФизлиц.Основание КАК Основание,
		|		ВзносыФизлиц.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
		|		ВзносыФизлиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|		СУММА(ВзносыФизлиц.Взносы) КАК Взносы
		|	ИЗ
		|		ВТДоходыВзносыАвиаторовГорняков КАК ВзносыФизлиц
		|	ГДЕ
		|		ВзносыФизлиц.Период МЕЖДУ &НачалоОтчетногоКвартала И &КонецОтчетногоПериода
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВзносыФизлиц.Основание,
		|		ВзносыФизлиц.ВидТарифаСтраховыхВзносов,
		|		ВзносыФизлиц.ФизическоеЛицо) КАК ВзносыЗаВесьПериод
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзносыЗаВесьПериод.ВидТарифаСтраховыхВзносов,
		|	ВзносыЗаВесьПериод.Основание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЕСТЬNULL(ЛицаСВреднымиВзносамиЗаВсеМесяцы.ВсегоФизлиц, 0)) КАК П01114М101001,
		|	МАКСИМУМ(ЕСТЬNULL(ЛицаСВреднымиВзносамиЗаКвартал.ВсегоФизлиц, 0)) КАК П01114М101002,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц1
		|				ТОГДА ЕСТЬNULL(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П01114М101003,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц2
		|				ТОГДА ЕСТЬNULL(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П01114М101004,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА МЕСЯЦ(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.Период) = &Месяц3
		|				ТОГДА ЕСТЬNULL(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.ВсегоФизлиц, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК П01114М101005,
		|	ОснованияВзносов.ВидТарифаСтраховыхВзносов,
		|	ОснованияВзносов.Основание КАК П01114М100101
		|ИЗ
		|	ВТМесяцыОтчета КАК МесяцыОтчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОснованияВзносовАвиаторовГорняков КАК ОснованияВзносов
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСВзносамиАвиаторовГорняковЗаВсеМесяцы КАК ЛицаСВреднымиВзносамиЗаВсеМесяцы
		|			ПО ОснованияВзносов.Основание = ЛицаСВреднымиВзносамиЗаВсеМесяцы.Основание
		|				И ОснованияВзносов.ВидТарифаСтраховыхВзносов = ЛицаСВреднымиВзносамиЗаВсеМесяцы.ВидТарифаСтраховыхВзносов
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСВзносамиАвиаторовГорняковЗаКвартал КАК ЛицаСВреднымиВзносамиЗаКвартал
		|			ПО ОснованияВзносов.Основание = ЛицаСВреднымиВзносамиЗаКвартал.Основание
		|				И ОснованияВзносов.ВидТарифаСтраховыхВзносов = ЛицаСВреднымиВзносамиЗаКвартал.ВидТарифаСтраховыхВзносов
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицаСВзносамиАвиаторовГорняковЗаОтдельныеМесяцы КАК ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы
		|		ПО (МесяцыОтчета.МесяцПериода = МЕСЯЦ(ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.Период))
		|			И (ОснованияВзносов.Основание = ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.Основание)
		|			И (ОснованияВзносов.ВидТарифаСтраховыхВзносов = ЛицаСВреднымиВзносамиЗаОтдельныеМесяцы.ВидТарифаСтраховыхВзносов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОснованияВзносов.ВидТарифаСтраховыхВзносов,
		|	ОснованияВзносов.Основание";
		ОписаниеТаблиц.Подраздел4Численность2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	Если ОписаниеТаблиц.Свойство("Подраздел4Взносы2017") Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВзносыФизлиц.ВидТарифаСтраховыхВзносов,
		|	ВзносыФизлиц.Основание КАК П01114М100101,
		|	ЕСТЬNULL(СУММА(ВзносыФизлиц.Взносы), 0) КАК П01114М105001,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц1
		|					ТОГДА ВзносыФизлиц.Взносы
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П01114М105003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц2
		|					ТОГДА ВзносыФизлиц.Взносы
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П01114М105004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(ВзносыФизлиц.Период) = &Месяц3
		|					ТОГДА ВзносыФизлиц.Взносы
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П01114М105005,
		|	ВзносыФизлиц.ПолеФизическоеЛицо
		|ИЗ
		|	ВТДоходыВзносыАвиаторовГорняков КАК ВзносыФизлиц
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзносыФизлиц.Основание,
		|	ВзносыФизлиц.ВидТарифаСтраховыхВзносов,
		|	ВзносыФизлиц.ПолеФизическоеЛицо";
		Если ПодробныеДанные Тогда
			Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ПолеФизическоеЛицо", "ФизическоеЛицо");
		Иначе 
			МассивПолей = Новый Массив;
			МассивПолей.Добавить("ПолеФизическоеЛицо");
			Запрос.Текст = УдалитьПоляРасшифровкиИзЗапроса(ТекстЗапроса, МассивПолей, "ВзносыФизлиц");
		КонецЕсли;
		ОписаниеТаблиц.Подраздел4Взносы2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	
	// Приложение 2 Раздела 1 
	Если ОписаниеТаблиц.Свойство("ДоходыФСС2017") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОДоходах.Период КАК Период,
		|	СведенияОДоходах.ФизическоеЛицо,
		|	СУММА(СведенияОДоходах.ФСС) КАК ИсчисленоВзносов,
		|	СУММА(СведенияОДоходах.Сумма) КАК Начислено,
		|	СУММА(СведенияОДоходах.НеОблагаетсяФСС) КАК НеОблагается,
		|	СУММА(СведенияОДоходах.СуммаПревысившаяПределФСС) КАК СуммаПревысившаяПределФСС,
		|	0 КАК БазаФССсИностранцев,
		|	СУММА(ВЫБОР
		|			КОГДА СведенияОДоходах.ВидТарифаСтраховыхВзносов.ИдентификаторОбъекта = ""ДляФармацевтовАптек""
		|				ТОГДА СведенияОДоходах.БазаФСС - СведенияОДоходах.СуммаПревысившаяПределФСС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК БазаФармацевта,
		
		|	СУММА(ВЫБОР
		|			КОГДА СведенияОДоходах.ВидТарифаСтраховыхВзносов.ИдентификаторОбъекта = ""ДляЧленовЭкипажейМорскихСудовПодФлагомРФ""
		|				ТОГДА СведенияОДоходах.БазаФСС - СведенияОДоходах.СуммаПревысившаяПределФСС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК БазаМоряка,
		|	СУММА(ВЫБОР
		|			КОГДА СведенияОДоходах.ВидТарифаСтраховыхВзносов.ИдентификаторОбъекта = ""ИндивидуальныйПредпринимательПрименяющийПатент""
		|				ТОГДА СведенияОДоходах.БазаФСС - СведенияОДоходах.СуммаПревысившаяПределФСС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК БазаПоПатенту,
		|	СУММА(ВЫБОР
		|			КОГДА СведенияОДоходах.ВидТарифаСтраховыхВзносов.ИдентификаторОбъекта = ""ИндивидуальныйПредпринимательПрименяющийПатент""
		|				ТОГДА СведенияОДоходах.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачисленоПоПатенту,
		|	0 КАК ПолученоИзФонда,
		|	0 КАК РасходыПоСтрахованию
		|ПОМЕСТИТЬ ВТОблагаемыеБазыПоМесяцам
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
		|ГДЕ
		|	СведенияОДоходах.Организация = &ОбособленноеПодразделение
		|	И СведенияОДоходах.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|	И СведенияОДоходах.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				ФизлицаБезБазы.ФизическоеЛицо
		|			ИЗ
		|				ВТФизЛицаСОблагаемойБазой КАК ФизлицаБезБазы)
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.ФизическоеЛицо,
		|	СведенияОДоходах.Период
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(Расчеты.Период, МЕСЯЦ),
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0
		|ИЗ
		|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам КАК Расчеты
		|ГДЕ
		|	Расчеты.ЭтоСтраховыеВзносы
		|	И Расчеты.Организация = &ОбособленноеПодразделение
		|	И Расчеты.ВидОбязательногоСтрахованияСотрудников В (ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС), ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи))
		|	И Расчеты.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(Расчеты.Период, МЕСЯЦ)";
		Запрос.Выполнить();
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СведенияОДоходах.ФизическоеЛицо,
		|	ЕСТЬNULL(СУММА(СведенияОДоходах.Начислено), 0) КАК П000120002001,
		|	ЕСТЬNULL(СУММА(СведенияОДоходах.НеОблагается), 0) КАК П000120003001,
		|	ЕСТЬNULL(СУММА(СведенияОДоходах.СуммаПревысившаяПределФСС), 0) КАК П000120004001,
		|	ЕСТЬNULL(СУММА(СведенияОДоходах.БазаФармацевта), 0) КАК П000120005101,
		|	ЕСТЬNULL(СУММА(СведенияОДоходах.БазаМоряка), 0) КАК П000120005201,
		|	ЕСТЬNULL(СУММА(СведенияОДоходах.НачисленоПоПатенту), 0) КАК П00018М106001,
		|	ЕСТЬNULL(СУММА(СведенияОДоходах.БазаПоПатенту), 0) КАК П000120005301,
		|	ЕСТЬNULL(СУММА(СведенияОДоходах.БазаФССсИностранцев), 0) КАК П000120005401,
		|	ЕСТЬNULL(СУММА(СведенияОДоходах.ИсчисленоВзносов), 0) КАК П000120006001,
		|	ЕСТЬNULL(СУММА(СведенияОДоходах.РасходыПоСтрахованию), 0) КАК П000120007001,
		|	ЕСТЬNULL(СУММА(СведенияОДоходах.ПолученоИзФонда), 0) КАК П000120008001,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц1
		|					ТОГДА СведенияОДоходах.Начислено
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120002003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц2
		|					ТОГДА СведенияОДоходах.Начислено
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120002004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц3
		|					ТОГДА СведенияОДоходах.Начислено
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120002005,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц1
		|					ТОГДА СведенияОДоходах.НеОблагается
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120003003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц2
		|					ТОГДА СведенияОДоходах.НеОблагается
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120003004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц3
		|					ТОГДА СведенияОДоходах.НеОблагается
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120003005,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц1
		|					ТОГДА СведенияОДоходах.СуммаПревысившаяПределФСС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120004003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц2
		|					ТОГДА СведенияОДоходах.СуммаПревысившаяПределФСС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120004004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц3
		|					ТОГДА СведенияОДоходах.СуммаПревысившаяПределФСС
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120004005,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц1
		|					ТОГДА СведенияОДоходах.БазаФармацевта
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120005103,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц2
		|					ТОГДА СведенияОДоходах.БазаФармацевта
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120005104,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц3
		|					ТОГДА СведенияОДоходах.БазаФармацевта
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120005105,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц1
		|					ТОГДА СведенияОДоходах.БазаМоряка
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120005203,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц2
		|					ТОГДА СведенияОДоходах.БазаМоряка
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120005204,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц3
		|					ТОГДА СведенияОДоходах.БазаМоряка
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120005205,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц1
		|					ТОГДА СведенияОДоходах.БазаПоПатенту
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120005303,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц2
		|					ТОГДА СведенияОДоходах.БазаПоПатенту
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120005304,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц3
		|					ТОГДА СведенияОДоходах.БазаПоПатенту
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120005305,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц1
		|					ТОГДА СведенияОДоходах.НачисленоПоПатенту
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П00018М106003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц2
		|					ТОГДА СведенияОДоходах.НачисленоПоПатенту
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П00018М106004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц3
		|					ТОГДА СведенияОДоходах.НачисленоПоПатенту
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П00018М106005,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц1
		|					ТОГДА СведенияОДоходах.БазаФССсИностранцев
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120005403,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц2
		|					ТОГДА СведенияОДоходах.БазаФССсИностранцев
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120005404,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц3
		|					ТОГДА СведенияОДоходах.БазаФССсИностранцев
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120005405,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц1
		|					ТОГДА СведенияОДоходах.ИсчисленоВзносов
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120006003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц2
		|					ТОГДА СведенияОДоходах.ИсчисленоВзносов
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120006004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц3
		|					ТОГДА СведенияОДоходах.ИсчисленоВзносов
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120006005,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц1
		|					ТОГДА СведенияОДоходах.РасходыПоСтрахованию
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120007003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц2
		|					ТОГДА СведенияОДоходах.РасходыПоСтрахованию
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120007004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц3
		|					ТОГДА СведенияОДоходах.РасходыПоСтрахованию
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120007005,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц1
		|					ТОГДА СведенияОДоходах.ПолученоИзФонда
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120008003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц2
		|					ТОГДА СведенияОДоходах.ПолученоИзФонда
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120008004,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА МЕСЯЦ(СведенияОДоходах.Период) = &Месяц3
		|					ТОГДА СведенияОДоходах.ПолученоИзФонда
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000120008005
		|ИЗ
		|	ВТОблагаемыеБазыПоМесяцам КАК СведенияОДоходах
		|
		|СГРУППИРОВАТЬ ПО СведенияОДоходах.ФизическоеЛицо";

		Если Не ПодробныеДанные Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СГРУППИРОВАТЬ ПО СведенияОДоходах.ФизическоеЛицо", "");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СведенияОДоходах.ФизическоеЛицо,", "");
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
		ОписаниеТаблиц.ДоходыФСС2017 = Запрос.Выполнить().Выгрузить()
	КонецЕсли;
	
	// Физлица и их кадровые данные
	Если ОписаниеТаблиц.Свойство("Подраздел3Физлица2017") Или ОписаниеТаблиц.Свойство("Иностранцы") Тогда
		
		Запрос.УстановитьПараметр("НачалоПоследнегоМесяца", НачалоМесяца(ОкончаниеПериода));
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&КонецОтчетногоПериода КАК Период,
		|	СведенияОДоходах.ФизическоеЛицо,
		|	МИНИМУМ(СведенияОДоходах.ЗастрахованПФР) КАК ЗастрахованПФР,
		|	МАКСИМУМ(СведенияОДоходах.ЗастрахованФСС) КАК ЗастрахованФСС,
		|	МАКСИМУМ(СведенияОДоходах.ЗастрахованФОМС) КАК ЗастрахованФОМС
		|ПОМЕСТИТЬ ВТФизлица
		|ИЗ
		|	ВТЗастрахованныеЛицаОрганизации КАК СведенияОДоходах
		|ГДЕ
		|	(СведенияОДоходах.ЗастрахованПФР
		|			ИЛИ СведенияОДоходах.ЗастрахованФОМС
		|			ИЛИ СведенияОДоходах.ЗастрахованФСС)
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.ФизическоеЛицо";
		Запрос.Выполнить();
		
		УчетСтраховыхВзносов.СформироватьТаблицуВТКадровыеДанныеФизическихЛицСПериодом(Запрос.МенеджерВременныхТаблиц, "ВТФизлица", Ложь, ОкончаниеПериода);
		
	КонецЕсли;
		
		
	// Раздел 3
	Если ОписаниеТаблиц.Свойство("Подраздел3Физлица2017") Тогда
		Запрос.УстановитьПараметр("НестрахуемыеВидыДохода", ПерсонифицированныйУчет.СписокНестрахуемыхВидовДохода());
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОДоходах.ФизическоеЛицо,
		|	СУММА(СведенияОДоходах.Сумма) КАК ОбщаяСумма,
		|	СУММА(ВЫБОР
		|			КОГДА СведенияОДоходах.ВидДохода В (&НестрахуемыеВидыДохода)
		|				ТОГДА СведенияОДоходах.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НестрахуемыеДоходы
		|ПОМЕСТИТЬ ВТНестрахуемыеДоходы
		|ИЗ
		|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
		|ГДЕ
		|	СведенияОДоходах.Организация = &ОбособленноеПодразделение
		|	И СведенияОДоходах.Период МЕЖДУ &НачалоОтчетногоКвартала И &КонецОтчетногоПериода
		|	И СведенияОДоходах.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом)
		|	И СведенияОДоходах.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Физлица.ФизическоеЛицо,
		|	ЕСТЬNULL(ФИОФизлиц.Наименование, """") КАК ФИО,
		|	ЕСТЬNULL(ФИОФизлиц.ИНН, """") КАК П000310006001,
		|	ЕСТЬNULL(ФИОФизлиц.СтраховойНомерПФР, """") КАК П000310007001,
		|	ЕСТЬNULL(ФИОФизлиц.Фамилия, """") КАК П000310008001,
		|	ЕСТЬNULL(ФИОФизлиц.Имя, """") КАК П000310009001,
		|	ЕСТЬNULL(ФИОФизлиц.Отчество, """") КАК П000310010001,
		|	ЕСТЬNULL(ФИОФизлиц.ДатаРождения, """") КАК П000310011001,
		|	ЕСТЬNULL(ФИОФизлиц.Страна.Код, """") КАК П000310012001,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ФИОФизлиц.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
		|				ТОГДА ""1""
		|			ИНАЧЕ ""2""
		|		КОНЕЦ, """") КАК П000310013001,
		|	ЕСТЬNULL(ФИОФизлиц.ДокументВид.КодМВД, """") КАК П000310014001,
		|	ЕСТЬNULL(ФИОФизлиц.ДокументСерия, """") КАК П000310015001,
		|	ЕСТЬNULL(ФИОФизлиц.ДокументНомер, """") КАК П000310015002,
		|	ВЫБОР
		|		КОГДА Физлица.ЗастрахованПФР
		|			ТОГДА ""1""
		|		ИНАЧЕ ""2""
		|	КОНЕЦ КАК П000310016001,
		|	ВЫБОР
		|		КОГДА Физлица.ЗастрахованФОМС
		|			ТОГДА ""1""
		|		ИНАЧЕ ""2""
		|	КОНЕЦ КАК П000310017001,
		|	ВЫБОР
		|		КОГДА Физлица.ЗастрахованФСС
		|			ТОГДА ""1""
		|		ИНАЧЕ ""2""
		|	КОНЕЦ КАК П000310018001
		|ИЗ
		|	ВТФизлица КАК Физлица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК ФИОФизлиц
		|		ПО Физлица.ФизическоеЛицо = ФИОФизлиц.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНестрахуемыеДоходы КАК НестрахуемыеДоходыФизлиц
		|		ПО Физлица.ФизическоеЛицо = НестрахуемыеДоходыФизлиц.ФизическоеЛицо
		|ГДЕ
		|	(НестрахуемыеДоходыФизлиц.ФизическоеЛицо ЕСТЬ NULL 
		|			ИЛИ НестрахуемыеДоходыФизлиц.ОбщаяСумма = 0
		|			ИЛИ НестрахуемыеДоходыФизлиц.ОбщаяСумма <> НестрахуемыеДоходыФизлиц.НестрахуемыеДоходы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФИО";
		
		ОписаниеТаблиц.Подраздел3Физлица2017 = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	Если ОписаниеТаблиц.Свойство("Подраздел321Доходы2017") Тогда
		Запрос.УстановитьПараметр("ОтчетныйГод", Год(ОкончаниеПериода));
		УчетСтраховыхВзносов.СформироватьВТСоответствиеТарифаИВидаЗЛКатегории(Запрос.МенеджерВременныхТаблиц);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОДоходах.ФизическоеЛицо,
		|	МЕСЯЦ(СведенияОДоходах.Период) КАК П00321М119001,
		|	СоответствиеТарифаИВидаЗЛКатегории.КатегорияЗастрахованныхЛиц КАК П00321М120001,
		|	СУММА(СведенияОДоходах.НачисленоВсего) КАК П00321М121001,
		|	СУММА(СведенияОДоходах.СуммаНеПревысившаяПределПФР) КАК П00321М122001,
		|	СУММА(СведенияОДоходах.СуммаНеПревысившаяПределПФРпоГПХ) КАК П00321М123001,
		|	СУММА(СведенияОДоходах.ПФРПоСуммарномуТарифу) КАК П00321М124001
		|ИЗ
		|	ВТДоходыВзносов КАК СведенияОДоходах
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеТарифаИВидаЗЛКатегории КАК СоответствиеТарифаИВидаЗЛКатегории
		|		ПО СведенияОДоходах.ВидТарифаСтраховыхВзносов = СоответствиеТарифаИВидаЗЛКатегории.ВидТарифаСтраховыхВзносов
		|			И (&ОтчетныйГод МЕЖДУ СоответствиеТарифаИВидаЗЛКатегории.ГодС И СоответствиеТарифаИВидаЗЛКатегории.ГодПо)
		|ГДЕ
		|	СведенияОДоходах.ЗастрахованПФР
		|	И СведенияОДоходах.Период МЕЖДУ &НачалоОтчетногоКвартала И &КонецОтчетногоПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	СоответствиеТарифаИВидаЗЛКатегории.КатегорияЗастрахованныхЛиц,
		|	СведенияОДоходах.ФизическоеЛицо,
		|	МЕСЯЦ(СведенияОДоходах.Период)
		|
		|ИМЕЮЩИЕ
		|	СУММА(СведенияОДоходах.НачисленоВсего) <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	СведенияОДоходах.ФизическоеЛицо,
		|	П00321М119001,
		|	П00321М120001";
		ОписаниеТаблиц.Подраздел321Доходы2017 = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	Если ОписаниеТаблиц.Свойство("Подраздел322Доходы2017") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Данные.ФизическоеЛицо,
		|	Данные.П00322М126001,
		|	Данные.П00322М127001,
		|	СУММА(Данные.П00322М128001) КАК П00322М128001,
		|	СУММА(Данные.П00322М129001) КАК П00322М129001
		|ИЗ
		|	(ВЫБРАТЬ
		|		СведенияОДоходах.ФизическоеЛицо КАК ФизическоеЛицо,
		|		МЕСЯЦ(СведенияОДоходах.Период) КАК П00322М126001,
		|		ВЫБОР
		|			КОГДА СведенияОДоходах.КлассУсловийТруда = ""1""
		|				ТОГДА ""23""
		|			КОГДА СведенияОДоходах.КлассУсловийТруда = ""2""
		|				ТОГДА ""24""
		|			КОГДА СведенияОДоходах.КлассУсловийТруда = ""3""
		|				ТОГДА ""25""
		|			КОГДА СведенияОДоходах.КлассУсловийТруда = ""4""
		|				ТОГДА ""26""
		|			КОГДА СведенияОДоходах.КлассУсловийТруда = ""5""
		|				ТОГДА ""27""
		|			ИНАЧЕ """"
		|		КОНЕЦ КАК П00322М127001,
		|		СУММА(СведенияОДоходах.ОблагаемаяБаза) КАК П00322М128001,
		|		0 КАК П00322М129001
		|	ИЗ
		|		ВТДоходыПоКлассамУсловий КАК СведенияОДоходах
		|	ГДЕ
		|		СведенияОДоходах.Период МЕЖДУ &НачалоОтчетногоКвартала И &КонецОтчетногоПериода
		|	
		|	СГРУППИРОВАТЬ ПО
		|		СведенияОДоходах.ФизическоеЛицо,
		|		МЕСЯЦ(СведенияОДоходах.Период),
		|		ВЫБОР
		|			КОГДА СведенияОДоходах.КлассУсловийТруда = ""1""
		|				ТОГДА ""23""
		|			КОГДА СведенияОДоходах.КлассУсловийТруда = ""2""
		|				ТОГДА ""24""
		|			КОГДА СведенияОДоходах.КлассУсловийТруда = ""3""
		|				ТОГДА ""25""
		|			КОГДА СведенияОДоходах.КлассУсловийТруда = ""4""
		|				ТОГДА ""26""
		|			КОГДА СведенияОДоходах.КлассУсловийТруда = ""5""
		|				ТОГДА ""27""
		|			ИНАЧЕ """"
		|		КОНЕЦ
		|	
		|	ИМЕЮЩИЕ
		|		СУММА(СведенияОДоходах.ОблагаемаяБаза) <> 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВзносыПоКлассамУсловий.ФизическоеЛицо,
		|		МЕСЯЦ(ВзносыПоКлассамУсловий.Период),
		|		ВЫБОР
		|			КОГДА ВзносыПоКлассамУсловий.КлассУсловийТруда = ""1""
		|				ТОГДА ""23""
		|			КОГДА ВзносыПоКлассамУсловий.КлассУсловийТруда = ""2""
		|				ТОГДА ""24""
		|			КОГДА ВзносыПоКлассамУсловий.КлассУсловийТруда = ""3""
		|				ТОГДА ""25""
		|			КОГДА ВзносыПоКлассамУсловий.КлассУсловийТруда = ""4""
		|				ТОГДА ""26""
		|			КОГДА ВзносыПоКлассамУсловий.КлассУсловийТруда = ""5""
		|				ТОГДА ""27""
		|			ИНАЧЕ """"
		|		КОНЕЦ,
		|		0,
		|		ВзносыПоКлассамУсловий.Взносы
		|	ИЗ
		|		ВТВзносыПоКлассамУсловий КАК ВзносыПоКлассамУсловий
		|	ГДЕ
		|		ВзносыПоКлассамУсловий.Период МЕЖДУ &НачалоОтчетногоКвартала И &КонецОтчетногоПериода
		|		И ВзносыПоКлассамУсловий.Взносы <> 0) КАК Данные
		|
		|СГРУППИРОВАТЬ ПО
		|	Данные.ФизическоеЛицо,
		|	Данные.П00322М126001,
		|	Данные.П00322М127001
		|
		|УПОРЯДОЧИТЬ ПО
		|	Данные.ФизическоеЛицо,
		|	Данные.П00322М126001,
		|	Данные.П00322М127001";

		ОписаниеТаблиц.Подраздел322Доходы2017 = Запрос.Выполнить().Выгрузить();
	КонецЕсли;

КонецПроцедуры

Процедура ЗначенияПоказателей_4ФСС_2012Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Организация = ПараметрыОтчета.Организация;
	ДатаКонцаПериодаОтчета = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
	НачалоТекущегоКвартала = НачалоКвартала(ДатаКонцаПериодаОтчета);
	ЭтоЮридическоеЛицо = РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	НачалоПериода = НачалоГода(ДатаКонцаПериодаОтчета);
	ОкончаниеПериода = КонецМесяца(ДатаКонцаПериодаОтчета);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода",		НачалоПериода);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода",		КонецДня(ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаПередачиФССВыплатыПособий", УчетСтраховыхВзносов.ДатаПередачиФССВыплатыПособий(Организация));
	Запрос.УстановитьПараметр("ДалекаяДата", 				ДобавитьМесяц(НачалоПериода, 1200));
	Запрос.УстановитьПараметр("Месяц1",						Месяц(НачалоТекущегоКвартала));
	Запрос.УстановитьПараметр("Месяц2",						Месяц(НачалоТекущегоКвартала) + 1);
	Запрос.УстановитьПараметр("Месяц3",						Месяц(НачалоТекущегоКвартала) + 2);
	Запрос.УстановитьПараметр("ЭтоЮрЛицо",					ЭтоЮридическоеЛицо);
	Запрос.УстановитьПараметр("ОрганизацияИнвалидов",		СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "ОрганизацияИнвалидов"));
	
	// ----------------------------------------------------------------------------------
	// ФОРМИРОВАНИЕ ВРЕМЕННЫХ ТАБЛИЦ
	
	// получаем временные таблицы, используя общие алгоритмы
	УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОДоходахИВзносах(НачалоПериода, ОкончаниеПериода, Организация, Запрос.МенеджерВременныхТаблиц);
	
	
	УчетСтраховыхВзносов.СформироватьТаблицуВТКадровыеДанныеФизическихЛицСПериодом(Запрос.МенеджерВременныхТаблиц, "ВТФизЛицаСОблагаемойБазой", Ложь, ДатаКонцаПериодаОтчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СУММА(СведенияОДоходах.Сумма) КАК Начислено,
	|	СУММА(СведенияОДоходах.НеОблагаетсяФСС) КАК НеОблагается,
	|	СУММА(СведенияОДоходах.СуммаПревысившаяПределФСС) КАК СуммаПревысившаяПределФСС,
	|	СУММА(СведенияОДоходах.НеОблагаетсяФСС) КАК НеОблагаетсяНС_ПЗ,
	|	СУММА(СведенияОДоходах.БазаФСС_НС) КАК БазаНС_ПЗ,
	|	0 КАК БазаФармацевта,
	|	0 КАК БазаМоряка,
	|	СУММА(ВЫБОР
	|			КОГДА (СведенияОДоходах.ВидТарифаСтраховыхВзносов = &ОрганизацияИнвалидов)
	|					И &ЭтоЮрЛицо
	|				ТОГДА СведенияОДоходах.БазаФСС_НС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК БазаИнвалидаНС_ПЗ
	|ПОМЕСТИТЬ ВТОблагаемыеБазыПоМесяцам
	|ИЗ
	|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И НЕ СведенияОДоходах.ФизическоеЛицо В
	|				(ВЫБРАТЬ
	|					ФизлицаБезБазы.ФизическоеЛицо
	|				ИЗ
	|					ВТФизлицаБезОблагаемойБазы КАК ФизлицаБезБазы)
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)
	|					И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА Расчеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ФССНачислено,
	|	0 КАК ФССДоНачислено,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)
	|					И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА Расчеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ФССУплачено,
	|	0 КАК ФССНеПринятоРасходов,
	|	0 КАК ФССВозмещеноРасходов,
	|	0 КАК ФССПроизведеноРасходов,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)
	|					И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА Расчеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ФССНесчастныеСлучаиНачислено,
	|	0 КАК ФССНесчастныеСлучаиДоНачислено,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)
	|					И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА Расчеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ФССНесчастныеСлучаиУплачено,
	|	0 КАК ФССНесчастныеСлучаиНеПринятоРасходов,
	|	0 КАК ФССНесчастныеСлучаиВозмещеноРасходов,
	|	0 КАК ФССНесчастныеСлучаиПроизведеноРасходов,
	|	НАЧАЛОПЕРИОДА(Расчеты.Период, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ВТРасчетыСФондом
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам КАК Расчеты
	|ГДЕ
	|	Расчеты.ЭтоСтраховыеВзносы
	|	И Расчеты.Организация = &Организация
	|	И Расчеты.ВидОбязательногоСтрахованияСотрудников В (ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС), ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи))
	|	И Расчеты.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(Расчеты.Период, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расчеты.СуммаОстаток,
	|	Расчеты.ЭтоРасчетыПоНачислениюУплатеВзносовВФСС
	|ПОМЕСТИТЬ ВТОстаткиНаКонец
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам.Остатки(
	|			&КонецОтчетногоПериода,
	|			Организация = &Организация
	|				И ЭтоСтраховыеВзносы
	|				И ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)) КАК Расчеты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)
	|					ТОГДА Расчеты.СуммаОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ФССНачальныйОстаток,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)
	|					ТОГДА Расчеты.СуммаОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ФССНесчастныеСлучаиНачальныйОстаток,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)
	|						И Расчеты.ЭтоРасчетыПоНачислениюУплатеВзносовВФСС
	|					ТОГДА Расчеты.СуммаОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ФССНачальныйОстатокПоВзносам
	|ПОМЕСТИТЬ ВТОстаткиНаНачало
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам.Остатки(
	|			&НачалоОтчетногоПериода,
	|			Организация = &Организация
	|				И ЭтоСтраховыеВзносы
	|				И ВидОбязательногоСтрахованияСотрудников В (ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС), ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи))) КАК Расчеты";

	Запрос.Выполнить();
	
	// ----------------------------------------------------------------------------------
	// ТЕКСТЫ ЗАПРОСОВ
	
	// БазаДляНачисленияВзносов
	// Это показатели Раздела I, Таблица 3
	// Поля:
	//		П000030001003,
	//		П000030001004 
	// Описание:	
	//	Выбираем из ВТОблагаемыеБазыПоМесяцам (таблица с данными о доходах ) 
	//	данные за соответствующий месяц
	
	БазаДляНачисленияВзносовТекст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.Начислено), 0) КАК П000030001003,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.НеОблагается), 0) КАК П000030002003,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.СуммаПревысившаяПределФСС), 0) КАК П000030003003,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.БазаФармацевта), 0) КАК П000030006003,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.БазаМоряка), 0) КАК П000030007003,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.БазаНС_ПЗ), 0) КАК П000060001103,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.БазаИнвалидаНС_ПЗ), 0) КАК П000060001104,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.НеОблагаетсяНС_ПЗ), 0) КАК П000060001105,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.Начислено
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030001004,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.Начислено
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030001005,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.Начислено
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030001006,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.НеОблагается
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030002004,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.НеОблагается
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030002005,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.НеОблагается
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030002006,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.СуммаПревысившаяПределФСС
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030003004,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.СуммаПревысившаяПределФСС
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030003005,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.СуммаПревысившаяПределФСС
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030003006,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.БазаФармацевта
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030006004,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.БазаФармацевта
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030006005,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.БазаФармацевта
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030006006,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.БазаМоряка
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030007004,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.БазаМоряка
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030007005,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.БазаМоряка
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030007006,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.БазаНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060001303,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.БазаНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060001403,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.БазаНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060001503,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.БазаИнвалидаНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060001304,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.БазаИнвалидаНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060001404,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.БазаИнвалидаНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060001504,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.НеОблагаетсяНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060001305,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.НеОблагаетсяНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060001405,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.НеОблагаетсяНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060001505
	|ИЗ
	|	ВТОблагаемыеБазыПоМесяцам КАК ДоходыПоФЛ";
	
	РасчетыСФондомОстаткиТекст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РасчетыСФондом.ФССНачальныйОстаток > 0
	|			ТОГДА РасчетыСФондом.ФССНачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000010001003,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА РасчетыСФондом.ФССНачальныйОстаток < 0
	|					ТОГДА -РасчетыСФондом.ФССНачальныйОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ > ВЫБОР
	|				КОГДА РасчетыСФондом.ФССНачальныйОстатокПоВзносам < 0
	|					ТОГДА -РасчетыСФондом.ФССНачальныйОстатокПоВзносам
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетыСФондом.ФССНачальныйОстаток < 0
	|						ТОГДА -РасчетыСФондом.ФССНачальныйОстаток
	|					ИНАЧЕ 0
	|				КОНЕЦ - ВЫБОР
	|					КОГДА РасчетыСФондом.ФССНачальныйОстатокПоВзносам < 0
	|						ТОГДА -РасчетыСФондом.ФССНачальныйОстатокПоВзносам
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000010013003,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА РасчетыСФондом.ФССНачальныйОстаток < 0
	|					ТОГДА -РасчетыСФондом.ФССНачальныйОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ > ВЫБОР
	|				КОГДА РасчетыСФондом.ФССНачальныйОстатокПоВзносам < 0
	|					ТОГДА -РасчетыСФондом.ФССНачальныйОстатокПоВзносам
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетыСФондом.ФССНачальныйОстатокПоВзносам < 0
	|						ТОГДА -РасчетыСФондом.ФССНачальныйОстатокПоВзносам
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РасчетыСФондом.ФССНачальныйОстаток < 0
	|					ТОГДА -РасчетыСФондом.ФССНачальныйОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК П000010014003,
	|	ВЫБОР
	|		КОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачальныйОстаток > 0
	|			ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000070001003,
	|	ВЫБОР
	|		КОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачальныйОстаток < 0
	|			ТОГДА -РасчетыСФондом.ФССНесчастныеСлучаиНачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000070010003
	|ИЗ
	|	ВТОстаткиНаНачало КАК РасчетыСФондом";
	
	КонечныйОстатокТекст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА СУММА(Расчеты.СуммаОстаток) < 0
	|					ТОГДА -СУММА(Расчеты.СуммаОстаток)
	|				ИНАЧЕ 0
	|			КОНЕЦ > СУММА(ВЫБОР
	|					КОГДА Расчеты.СуммаОстаток < 0
	|							И Расчеты.ЭтоРасчетыПоНачислениюУплатеВзносовВФСС
	|						ТОГДА -Расчеты.СуммаОстаток
	|					ИНАЧЕ 0
	|				КОНЕЦ)
	|			ТОГДА СУММА(ВЫБОР
	|						КОГДА Расчеты.СуммаОстаток < 0
	|								И Расчеты.ЭтоРасчетыПоНачислениюУплатеВзносовВФСС
	|							ТОГДА -Расчеты.СуммаОстаток
	|						ИНАЧЕ 0
	|					КОНЕЦ)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СУММА(Расчеты.СуммаОстаток) < 0
	|					ТОГДА -СУММА(Расчеты.СуммаОстаток)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК П000010011003
	|ИЗ
	|	ВТОстаткиНаКонец КАК Расчеты";
	
	РасчетыСФондомОборотыТекст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070002001,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070002101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070002201,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070002301,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ФССНесчастныеСлучаиДоНачислено), 0) КАК П000070003003,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ФССНесчастныеСлучаиНеПринятоРасходов), 0) КАК П000070004003,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ФССНесчастныеСлучаиВозмещеноРасходов), 0) КАК П000070006003,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070011001,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070011101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070011201,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070011301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070012001,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070012101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070012201,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070012301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000010002101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0)  КАК П000010002301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0)  КАК П000010002401,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0)  КАК П000010002501,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССДоНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010003101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССДоНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0)  КАК П000010003301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССДоНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0)  КАК П000010003401,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССДоНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000010003501,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНеПринятоРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0)  КАК П000010005101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНеПринятоРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010005301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССНеПринятоРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010005401,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССНеПринятоРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010005501,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССВозмещеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010006101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССВозмещеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010006301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССВозмещеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010006401,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССВозмещеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010006501,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010015101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010015301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010015401,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010015501,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010016101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010016301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010016401,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010016501
	|ИЗ
	|	ВТРасчетыСФондом КАК РасчетыСФондом";
	
	ДокументыОплаты = 
	"ВЫБРАТЬ
	|	Расчеты.Регистратор.Дата КАК Дата,
	|	Расчеты.Регистратор.Номер КАК Номер,
	|	ВЫБОР
	|		КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФСС,
	|	ВЫБОР
	|		КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФССНесчастныеСлучаи,
	|	ВЫБОР
	|		КОГДА МЕСЯЦ(Расчеты.Период) = &Месяц1
	|			ТОГДА 1
	|		КОГДА МЕСЯЦ(Расчеты.Период) = &Месяц2
	|			ТОГДА 2
	|		КОГДА МЕСЯЦ(Расчеты.Период) = &Месяц3
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК МесяцОплаты,
	|	Расчеты.Сумма КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам КАК Расчеты
	|ГДЕ
	|	Расчеты.ЭтоСтраховыеВзносы
	|	И Расчеты.Организация = &Организация
	|	И Расчеты.ВидОбязательногоСтрахованияСотрудников В (ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС), ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи))
	|	И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Расчеты.Период МЕЖДУ &Месяц1 И &КонецОтчетногоПериода";
	
	ЧисленностьРаботающихТекст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ФизЛица.ФизическоеЛицо) КАК ЧисленностьРаботников,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ФизЛица.ФизическоеЛицо.Физлицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ЧисленностьЖенщин,
	|	0 КАК ЧисленностьИнвалидов
	|ИЗ
	|	ВТФизЛицаСОблагаемойБазой КАК ФизЛица";

	ДоходыИнвалидовТекст =
	"ВЫБРАТЬ
	|	Доходы.ФизическоеЛицо,
	|	ФИОФизлиц.Наименование КАК П000310001002,
	|	"""" КАК П000310001003,
	|	"""" КАК П000310001004,
	|	СУММА(Доходы.БазаФСС - Доходы.СуммаПревысившаяПределФСС) КАК П000310001005,
	|	СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
	|				ТОГДА Доходы.БазаФСС - Доходы.СуммаПревысившаяПределФСС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000310001006,
	|	СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
	|				ТОГДА Доходы.БазаФСС - Доходы.СуммаПревысившаяПределФСС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000310001007,
	|	СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
	|				ТОГДА Доходы.БазаФСС - Доходы.СуммаПревысившаяПределФСС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000310001008
	|ИЗ
	|	ВТРасширенныеСведенияОДоходахИВзносах КАК Доходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК ФИОФизлиц
	|		ПО Доходы.ФизическоеЛицо = ФИОФизлиц.ФизическоеЛицо
	|ГДЕ
	|	Доходы.ВидТарифаСтраховыхВзносов = &ОрганизацияИнвалидов
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.ФизическоеЛицо,
	|	ФИОФизлиц.Наименование
	|
	|ИМЕЮЩИЕ
	|	СУММА(Доходы.БазаФСС - Доходы.СуммаПревысившаяПределФСС) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	П000310001002";

	// -------------------------------------------------------------------------------
	// Вывод данных в отчет
	
	// расчет численности (титульный лист)
	
	ЧисленностьИнвалидов = 0;
	Если ЭтоЮридическоеЛицо Тогда
		Контейнер.Титульный.ЧислРаботников = Сотрудники.СреднесписочнаяЧисленностьРаботающих(Организация, ПараметрыОтчета.ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	Иначе 	
		Запрос.Текст = ЧисленностьРаботающихТекст;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЧисленностьИнвалидов = Выборка.ЧисленностьИнвалидов;
			Контейнер.Титульный.ЧислРаботников = Выборка.ЧисленностьРаботников;
			Контейнер.Титульный.ЧислЖенщин = Выборка.ЧисленностьЖенщин;
		Иначе
			Контейнер.Титульный.ЧислРаботников = 0;
			Контейнер.Титульный.ЧислЖенщин = 0;
		КонецЕсли;
	КонецЕсли;
	
	// Раздел I (табл. 3), Раздел II (табл. 6)
	
	ПоказателиОтчета = Новый Структура;
	ОписаниеПоказателей_4ФСС_2012Кв1(ПоказателиОтчета);
	Контейнер.Раздел1_31_ДанныеДопСтрок.Очистить();
	Значение = Неопределено;
	Для каждого КлючИЗначение Из Контейнер.Раздел1_1 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Раздел1_1[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	Для каждого КлючИЗначение Из Контейнер.Раздел1_2 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Раздел1_2[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	Для каждого КлючИЗначение Из Контейнер.Раздел1_3 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Раздел1_3[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	Для каждого КлючИЗначение Из Контейнер.Раздел1_5 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Раздел1_5[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	Для каждого КлючИЗначение Из Контейнер.Раздел2_6_7 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Раздел2_6_7[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	Для каждого КлючИЗначение Из Контейнер.Раздел2_8_9 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Раздел2_8_9[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = БазаДляНачисленияВзносовТекст;
	ТаблицаДоходов = Запрос.Выполнить().Выгрузить();
	СтрокаДоходов = ТаблицаДоходов[0];
	
	ЗаполнитьЗначенияСвойств(Контейнер.Раздел1_3, СтрокаДоходов);
	ЗаполнитьЗначенияСвойств(Контейнер.Раздел2_6_7, СтрокаДоходов);
	
	// Раздел I (табл 3.1)
	
	Запрос.Текст = ДоходыИнвалидовТекст;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда // не было инвалидов совсем
		
		ВременнаяТаблица = Результат.Выгрузить();
		ЧисленностьИнвалидов = ВременнаяТаблица.Количество();  // контрольное соотношение №5 по разделу "Таблица 3.1 «Сведения, необходимые для применения плательщиками страховых взносов пониженного тарифа страховых взносов, установленного частью 2 статьи 58 Федерального закона от 24 июля 2009 г. № 212-ФЗ»"
		
		НомерСтроки = 1;
		Для каждого СтрокаДанных Из ВременнаяТаблица Цикл
			СтрокаКонтейнера = Контейнер.Раздел1_31_ДанныеДопСтрок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКонтейнера, СтрокаДанных);
			СтрокаКонтейнера.П000310001001 = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Контейнер.Титульный.ЧислИнвалидов = ЧисленностьИнвалидов;
	
	// Раздел I (табл 4.3)
	
	УпрощенныйНалоговыйРежимПроизводство = СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "УпрощенныйНалоговыйРежимПроизводство");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОДоходах.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
	|	СведенияОДоходах.ВидТарифаСтраховыхВзносов.КодФСС2012 КАК Шифр
	|ИЗ
	|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И НЕ СведенияОДоходах.ФизическоеЛицо В
	|				(ВЫБРАТЬ
	|					ФизлицаБезБазы.ФизическоеЛицо
	|				ИЗ
	|					ВТФизлицаБезОблагаемойБазы КАК ФизлицаБезБазы)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	УСНПроизводство = Ложь;
	Шифр ="";
	Пока Выборка.Следующий() Цикл
		Шифр = Выборка.Шифр;
		Если Выборка.ВидТарифаСтраховыхВзносов = УпрощенныйНалоговыйРежимПроизводство Тогда
			УСНПроизводство = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Отражаем доходы по организации
	Если УСНПроизводство Тогда
		// Раздел 3.6
		Доход = 0;
		// Определяем, необходимо ли формировать доходы
		ЗапросПоДоходам = Новый Запрос;
		
		// Добавляем периода для анализа заполненности доходов
		Квартал = НачалоКвартала(НачалоПериода);
		// первый месяц
		ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(Квартал,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период ПОМЕСТИТЬ ВТПериодыКварталов";
		Квартал = НачалоКвартала(ДобавитьМесяц(Квартал,3));
		// прибавим остальные месяцы
		Пока КонецДня(Квартал) < КонецМесяца(ДатаКонцаПериодаОтчета) Цикл
			ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(Квартал,"ДФ=гггг,М,д,Ч,м,с") + ")";
			Квартал = НачалоКвартала(ДобавитьМесяц(Квартал,3));
		КонецЦикла;
		ЗапросПоДоходам.Текст = ПериодыТекст;
		
		
		ОсновнойТекстЗапросаПоДоходам = "ВЫБРАТЬ
		|	ПериодыКварталов.Период КАК Период,
		|	ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.ДоходБазаОборот, 0) КАК Сумма
		|ИЗ
		|	ВТПериодыКварталов КАК ПериодыКварталов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, Квартал, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
		|		ПО (КнигаУчетаДоходовИРасходовОбороты.Период = ПериодыКварталов.Период)";
		
		ЗапросПоДоходам.Текст =ПериодыТекст +"; "+ ОсновнойТекстЗапросаПоДоходам;
		ЗапросПоДоходам.УстановитьПараметр("Организация", Организация);
		ЗапросПоДоходам.УстановитьПараметр("НачалоПериода", НачалоПериода);
		ЗапросПоДоходам.УстановитьПараметр("КонецПериода", КонецДня(ДатаКонцаПериодаОтчета));
		ВыборкаПоДоходу = ЗапросПоДоходам.Выполнить().Выбрать();
		
		НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
		УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
		МенеджерВТДляДоходов = Новый МенеджерВременныхТаблиц;
		РегламентированнаяОтчетностьУСН.ПолучитьВТТаблицуКурсовВалютЗаПериод(МенеджерВТДляДоходов, НачалоКвартала(ДатаКонцаПериодаОтчета),КонецКвартала(ДатаКонцаПериодаОтчета), НациональнаяВалюта, УчетВалютныхОпераций);
		Пока ВыборкаПоДоходу.Следующий() Цикл
			Если ВыборкаПоДоходу.Сумма = 0 Тогда
				// Формируем доход за отчетный период
				// 
				Результат = Новый Структура;
				Результат.Вставить("ДокументФормирования", Документы.ЗаписиУСН.ПустаяСсылка());
				Результат.Вставить("ЕстьОшибки", Ложь);
				Результат.Вставить("ЕстьПредупреждения", Ложь);
				Результат.Вставить("ДополнительнаяИнформация", "");
				
				Результат.ДокументФормирования = РегламентированнаяОтчетностьУСН.ПолучитьДокументЗаписейУСНВПериодеПоВиду(
					Организация,
					КонецКвартала(ДатаКонцаПериодаОтчета),
					Перечисления.ВидыЗаписейФормированийКУДиР.ДоходыПрочие);
				
				РегламентированнаяОтчетностьУСН.ВыполнитьФормированиеПоДоходам(
					Организация,
					КонецКвартала(ДатаКонцаПериодаОтчета),
					Результат,
					МенеджерВТДляДоходов);
			КонецЕсли;
		КонецЦикла;
		
		ВыборкаПоДоходу = ЗапросПоДоходам.Выполнить().Выбрать();
		Пока ВыборкаПоДоходу.Следующий() Цикл
			Доход = Доход + ВыборкаПоДоходу.Сумма;
		КонецЦикла;
		Контейнер.Раздел1_43.П000430000103 = Доход;
		Контейнер.Раздел1_43.П000430000203 = Доход;
		
	КонецЕсли;
	
	Контейнер.Титульный.ШифрСтрах1Часть = ?(ПустаяСтрока(Шифр),"071", Шифр);
	СистемаНалогообложения = РегистрыСведений.СистемыНалогообложенияОрганизаций.ПолучитьПоследнее(КонецДня(ДатаКонцаПериодаОтчета), Новый Структура("Организация", Организация));
	
	Если Контейнер.Титульный.ШифрСтрах1Часть = "121"
		ИЛИ Контейнер.Титульный.ШифрСтрах1Часть = "151"
		ИЛИ Контейнер.Титульный.ШифрСтрах1Часть = "161" Тогда
		Контейнер.Титульный.ШифрСтрах2Часть = "01";
	ИначеЕсли Контейнер.Титульный.ШифрСтрах1Часть = "141" Тогда
		Контейнер.Титульный.ШифрСтрах2Часть = "02";
	Иначе
		Если СистемаНалогообложения.ПлательщикЕНВД Тогда
			Контейнер.Титульный.ШифрСтрах2Часть = "02";
		ИначеЕсли СистемаНалогообложения.ПлательщикУСН Тогда
			Контейнер.Титульный.ШифрСтрах2Часть = "01";
		Иначе
			Контейнер.Титульный.ШифрСтрах2Часть = "00";
		КонецЕсли;
	КонецЕсли;
	
	Контейнер.Титульный.ШифрСтрах3Часть = "00";
	Контейнер.Титульный.КодОрганаФСС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация,"КодОрганаФСС");
	
	// Тариф страховых взносов
	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "СтраховойТариф");
	СтраховойТариф = Неопределено;
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаКонцаПериодаОтчета, Сведения);
	ОргСведения.Свойство("СтраховойТариф", СтраховойТариф);
	
	Контейнер.Раздел2_6_7.П000060001006 = ?(СтраховойТариф = Неопределено, 0, СтраховойТариф);
	Контейнер.Раздел2_6_7.П000060001010 = Контейнер.Раздел2_6_7.П000060001006;
	
	// РАСЧЕТЫ ПО СРЕДСТВАМ ОБЯЗАТЕЛЬНОГО СОЦИАЛЬНОГО СТРАХОВАНИЯ 
	
	// Раздел I (табл. 1) и Раздел II (табл 7)
	
	// Заполняем по данным учета расчетов с фондом
	
	Запрос.Текст = РасчетыСФондомОстаткиТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел1_1, Выборка);
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел2_6_7, Выборка);
	КонецЕсли;
	
	Запрос.Текст = РасчетыСФондомОборотыТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел1_1, Выборка);
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел2_6_7, Выборка);
	КонецЕсли;
	
	Контейнер.Раздел11_1_ДанныеДопСтрок.Очистить();
	Контейнер.Раздел11_2_ДанныеДопСтрок.Очистить();
	Контейнер.Раздел11_3_ДанныеДопСтрок.Очистить();
	Контейнер.Раздел2_6_7_1_ДанныеДопСтрок.Очистить();
	Контейнер.Раздел2_6_7_2_ДанныеДопСтрок.Очистить();
	Контейнер.Раздел2_6_7_3_ДанныеДопСтрок.Очистить();
	н1_Раздел11 = 1;
	н2_Раздел11 = 1;
	н3_Раздел11 = 1;
	
	н1_Раздел67 = 1;
	н2_Раздел67 = 1;
	н3_Раздел67 = 1;
	
	Запрос.Текст = ДокументыОплаты;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ФСС Тогда
			Если Выборка.МесяцОплаты = 1 Тогда
				НоваяСтрока = Контейнер.Раздел11_1_ДанныеДопСтрок.Добавить();
				НоваяСтрока.П000010016311 = Выборка.Дата;
				НоваяСтрока.П000010016321 = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина);
				НоваяСтрока.П000010016301 = Выборка.Сумма;
				
				Контейнер.Раздел1_1.Вставить("П000010016311_"+н1_Раздел11, Выборка.Дата);
				Контейнер.Раздел1_1.Вставить("П000010016321_"+н1_Раздел11, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина));
				Контейнер.Раздел1_1.Вставить("П000010016301_"+н1_Раздел11, Выборка.Сумма);
				н1_Раздел11 = н1_Раздел11+1;
				
			ИначеЕсли Выборка.МесяцОплаты = 2 Тогда
				НоваяСтрока = Контейнер.Раздел11_2_ДанныеДопСтрок.Добавить();
				НоваяСтрока.П000010016411 = Выборка.Дата;
				НоваяСтрока.П000010016421 = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина);
				НоваяСтрока.П000010016401 = Выборка.Сумма;
				
				Контейнер.Раздел1_1.Вставить("П000010016411_"+н2_Раздел11, Выборка.Дата);
				Контейнер.Раздел1_1.Вставить("П000010016421_"+н2_Раздел11, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина));
				Контейнер.Раздел1_1.Вставить("П000010016401_"+н2_Раздел11, Выборка.Сумма);
				н2_Раздел11 = н2_Раздел11+1;
				
			ИначеЕсли Выборка.МесяцОплаты = 3 Тогда
				НоваяСтрока = Контейнер.Раздел11_3_ДанныеДопСтрок.Добавить();
				НоваяСтрока.П000010016511 = Выборка.Дата;
				НоваяСтрока.П000010016521 = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина);
				НоваяСтрока.П000010016501 = Выборка.Сумма;
				
				Контейнер.Раздел1_1.Вставить("П000010016511_"+н3_Раздел11, Выборка.Дата);
				Контейнер.Раздел1_1.Вставить("П000010016521_"+н3_Раздел11, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина));
				Контейнер.Раздел1_1.Вставить("П000010016501_"+н3_Раздел11, Выборка.Сумма);
				н3_Раздел11 = н3_Раздел11+1;
				
			КонецЕсли;
		ИначеЕсли Выборка.ФССНесчастныеСлучаи Тогда
			Если Выборка.МесяцОплаты = 1 Тогда
				НоваяСтрока = Контейнер.Раздел2_6_7_1_ДанныеДопСтрок.Добавить();
				НоваяСтрока.П000070012104 = Выборка.Дата;
				НоваяСтрока.П000070012105 = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина);
				НоваяСтрока.П000070012101 = Выборка.Сумма;
				
				Контейнер.Раздел2_6_7.Вставить("П000070012104_"+н1_Раздел67, Выборка.Дата);
				Контейнер.Раздел2_6_7.Вставить("П000070012105_"+н1_Раздел67, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина));
				Контейнер.Раздел2_6_7.Вставить("П000070012101_"+н1_Раздел67, Выборка.Сумма);
				н1_Раздел67 = н1_Раздел67+1;
				
			ИначеЕсли Выборка.МесяцОплаты = 2 Тогда
				НоваяСтрока = Контейнер.Раздел2_6_7_2_ДанныеДопСтрок.Добавить();
				НоваяСтрока.П000070012204 = Выборка.Дата;
				НоваяСтрока.П000070012205 = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина);
				НоваяСтрока.П000070012201 = Выборка.Сумма;
				
				Контейнер.Раздел2_6_7.Вставить("П000070012204_"+н2_Раздел67, Выборка.Дата);
				Контейнер.Раздел2_6_7.Вставить("П000070012205_"+н2_Раздел67, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина));
				Контейнер.Раздел2_6_7.Вставить("П000070012201_"+н2_Раздел67, Выборка.Сумма);
				н2_Раздел67 = н2_Раздел67+1;
			ИначеЕсли Выборка.МесяцОплаты = 3 Тогда
				НоваяСтрока = Контейнер.Раздел2_6_7_3_ДанныеДопСтрок.Добавить();
				НоваяСтрока.П000070012304 = Выборка.Дата;
				НоваяСтрока.П000070012305 = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина);
				НоваяСтрока.П000070012301 = Выборка.Сумма;
				
				Контейнер.Раздел2_6_7.Вставить("П000070012204_"+н3_Раздел67, Выборка.Дата);
				Контейнер.Раздел2_6_7.Вставить("П000070012205_"+н3_Раздел67, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина));
				Контейнер.Раздел2_6_7.Вставить("П000070012201_"+н3_Раздел67, Выборка.Сумма);
				н3_Раздел67 = н3_Раздел67+1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = КонечныйОстатокТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел2_6_7, Выборка);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ОписаниеПоказателей_4ФСС_2012Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ЧислРаботников",  Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ЧислЖенщин",	  Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ЧислИнвалидов",   Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ШифрСтрах1Часть", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ШифрСтрах2Часть", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ШифрСтрах3Часть", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "КодОрганаФСС",    Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010001003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002401", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002501", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010003101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010003301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010003401", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010003501", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010005101", Истина, Ложь); 
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010005301", Истина, Ложь); 
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010005401", Истина, Ложь); 
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010005501", Истина, Ложь); 
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010006101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010006301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010006401", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010006501", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010011003", Истина, Ложь); 
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010013003", Истина, Ложь); 
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010014003", Истина, Ложь); 
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010015101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010015301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010015401", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010015501", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010016101", Истина, Ложь); 
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010016301", Истина, Ложь); 
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010016401", Истина, Ложь); 
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010016501", Истина, Ложь); 
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020001001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020001003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020001004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020001005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030002003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030002004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030002005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030002006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030006003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030006004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030006005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030006006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030007003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030007004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030007005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030007006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001007", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001008", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001007", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001008", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001009", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001010", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001011", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001012", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001013", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001014", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001015", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001016", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001017", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001018", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001019", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001020", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050002006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050002007", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050002008", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050002009", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050002010", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050002011", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050002015", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050002016", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050002017", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050002018", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050002019", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050002020", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050003006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050003009", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050003015", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050004006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050004007", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050004008", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050004009", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050004010", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050004011", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050004015", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050004016", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050004017", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050005006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050005007", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050005008", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050005009", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050005010", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050005011", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050005015", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050005016", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050005017", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050006006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050006007", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050006008", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050006009", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050006010", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050006011", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050006015", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050006016", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050006017", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000060001103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000060001104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000060001105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000060001303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000060001304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000060001305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000060001403", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000060001404", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000060001405", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000060001503", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000060001504", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000060001505", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070001003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070002001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070002101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070002201", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070002301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070004003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070006003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070010003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070011001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070011101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070011201", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070011301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070012001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070012101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070012201", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070012301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070016001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000080001003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000080001004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000080002003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000080002004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000080004003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000080004004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000080005003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000080005004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000080007003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000080007004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000060001006", Истина, Ложь);
	
КонецПроцедуры

Процедура ОписаниеПоказателей_4ФСС_2016Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ЧислРаботников",  Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ЧислЖенщин",	  Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ЧислИнвалидов",   Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ШифрСтрах1Часть", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ШифрСтрах2Часть", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ШифрСтрах3Часть", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "КодОрганаФСС",    Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010001003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002401", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002501", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010003101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010003301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010003401", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010003501", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010005101", Истина, Ложь); 
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010005301", Истина, Ложь); 
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010005401", Истина, Ложь); 
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010005501", Истина, Ложь); 
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010006101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010006301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010006401", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010006501", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010011003", Истина, Ложь); 
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010013003", Истина, Ложь); 
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010014003", Истина, Ложь); 
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010015101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010015301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010015401", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010015501", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010016101", Истина, Ложь); 
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010016301", Истина, Ложь); 
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010016401", Истина, Ложь); 
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010016501", Истина, Ложь); 
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020001001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020001003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020001004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020001005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030002003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030002004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030002005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030002006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030006003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030006004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030006005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030006006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030007003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030007004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030007005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030007006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001007", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001008", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001007", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001008", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001009", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001010", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001011", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001012", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001013", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001014", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001015", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001016", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001017", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001018", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001019", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050001020", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050002006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050002007", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050002008", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050002009", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050002010", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050002011", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050002015", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050002016", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050002017", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050002018", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050002019", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050002020", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050003006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050003009", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050003015", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050004006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050004007", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050004008", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050004009", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050004010", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050004011", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050004015", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050004016", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050004017", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050005006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050005007", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050005008", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050005009", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050005010", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050005011", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050005015", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050005016", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050005017", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050006006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050006007", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050006008", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050006009", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050006010", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050006011", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050006015", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050006016", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000050006017", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000060000103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000060000104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000060000105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000060000106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000060000203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000060000204", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000060000205", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000060000206", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000060000403", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000060000404", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000060000405", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000060000406", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070001003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070002001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070002101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070002201", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070002301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070004003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070006003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070010003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070011001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070011101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070011201", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070011301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070012001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070012101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070012201", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070012301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000070016001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000080001003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000080001004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000080002003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000080002004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000080004003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000080004004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000080005003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000080005004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000080007003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000080007004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000060001006", Истина, Ложь);
	
КонецПроцедуры

Процедура ОписаниеПоказателей_4ФСС_2017Кв1(ПоказателиОтчета, ПараметрыОтчета = Неопределено) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ЧислРаботников",Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ЧислИнвалидов", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000104", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000105", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000106", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000204", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000205", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000206", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000404", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000405", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000406", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002101", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002201", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002301", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020015001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020015101", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020015201", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020015301", Истина, Истина);
	
	ДобавлятьПоказателиЗадолженности = Истина;
	ДобавлятьПоказателиУплатыВзносов = Истина;
	
	Если ТипЗнч(ПараметрыОтчета) = Тип("Структура") Тогда
		Организация = Неопределено;
		ДатаКонцаПериодаОтчета = Неопределено;
		Если ПараметрыОтчета.Свойство("Организация", Организация) И ПараметрыОтчета.Свойство("ДатаКонцаПериодаОтчета", ДатаКонцаПериодаОтчета) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	РасчетыСФондамиПоСтраховымВзносамОбороты.СуммаПриход КАК СуммаПриход,
			|	РасчетыСФондамиПоСтраховымВзносамОбороты.СуммаРасход КАК СуммаРасход
			|ИЗ
			|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам.Обороты(
			|			&НачалоПериода,
			|			&КонецПериода,
			|			,
			|			ЭтоСтраховыеВзносы
			|				И ЭтоРасчетыПоНачислениюУплатеВзносовВФСС
			|				И Организация = &Организация
			|				И ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)) КАК РасчетыСФондамиПоСтраховымВзносамОбороты";

			Запрос.УстановитьПараметр("НачалоПериода",	ДобавитьМесяц(НачалоГода(ДатаКонцаПериодаОтчета), -12));
			Запрос.УстановитьПараметр("КонецПериода",	НачалоГода(ДатаКонцаПериодаОтчета) - 1);
			Результат = Запрос.Выполнить();
			ДобавлятьПоказателиЗадолженности = Результат.Пустой();
			Если Не ДобавлятьПоказателиЗадолженности Тогда
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				ДобавлятьПоказателиЗадолженности = ЗначениеЗаполнено(Выборка.СуммаРасход) Или Не ЗначениеЗаполнено(Выборка.СуммаПриход)
			КонецЕсли;
	
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Сотрудник
			|ИЗ
			|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам КАК Расчеты
			|ГДЕ
			|	Расчеты.ЭтоСтраховыеВзносы
			|	И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|	И Расчеты.ЭтоРасчетыПоНачислениюУплатеВзносовВФСС
			|	И Расчеты.Организация = &Организация
			|	И Расчеты.Сумма <> 0
			|	И Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)
			|	И Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода";

			Запрос.УстановитьПараметр("НачалоПериода",	НачалоКвартала(ДатаКонцаПериодаОтчета));
			Запрос.УстановитьПараметр("КонецПериода",	КонецМесяца(ДатаКонцаПериодаОтчета));
			ДобавлятьПоказателиУплатыВзносов = Не Запрос.Выполнить().Пустой();
			
		КонецЕсли;
	КонецЕсли;
	
	Если ДобавлятьПоказателиЗадолженности Тогда
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020001003", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011003", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020013003", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020014003", Истина, Истина);
	КонецЕсли;
	Если ДобавлятьПоказателиУплатыВзносов Тогда
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016001", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016104", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016105", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016101", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016204", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016205", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016201", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016304", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016305", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016301", Истина, Истина);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗначенияПоказателей_4ФСС_2013Кв2(ПараметрыОтчета, Контейнер) Экспорт
	
	Организация = ПараметрыОтчета.Организация;
	ДатаКонцаПериодаОтчета = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
	НачалоТекущегоКвартала = НачалоКвартала(ДатаКонцаПериодаОтчета);
	ЭтоЮридическоеЛицо = РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	НачалоПериода = НачалоГода(ДатаКонцаПериодаОтчета);
	ОкончаниеПериода = КонецМесяца(ДатаКонцаПериодаОтчета);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода",		НачалоПериода);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода",		КонецДня(ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаПередачиФССВыплатыПособий", УчетСтраховыхВзносов.ДатаПередачиФССВыплатыПособий(Организация));
	Запрос.УстановитьПараметр("ДалекаяДата", 				ДобавитьМесяц(НачалоПериода, 1200));
	Запрос.УстановитьПараметр("Месяц1",						Месяц(НачалоТекущегоКвартала));
	Запрос.УстановитьПараметр("Месяц2",						Месяц(НачалоТекущегоКвартала) + 1);
	Запрос.УстановитьПараметр("Месяц3",						Месяц(НачалоТекущегоКвартала) + 2);
	Запрос.УстановитьПараметр("ЭтоЮрЛицо",					ЭтоЮридическоеЛицо);
	Запрос.УстановитьПараметр("ОрганизацияИнвалидов",		СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "ОрганизацияИнвалидов"));
	
	// ----------------------------------------------------------------------------------
	// ФОРМИРОВАНИЕ ВРЕМЕННЫХ ТАБЛИЦ
	
	// получаем временные таблицы, используя общие алгоритмы
	УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОДоходахИВзносах(НачалоПериода, ОкончаниеПериода, Организация, Запрос.МенеджерВременныхТаблиц);
	
	
	УчетСтраховыхВзносов.СформироватьТаблицуВТКадровыеДанныеФизическихЛицСПериодом(Запрос.МенеджерВременныхТаблиц, "ВТФизЛицаСОблагаемойБазой", Ложь, ДатаКонцаПериодаОтчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СУММА(СведенияОДоходах.Сумма) КАК Начислено,
	|	СУММА(СведенияОДоходах.НеОблагаетсяФСС) КАК НеОблагается,
	|	СУММА(СведенияОДоходах.СуммаПревысившаяПределФСС) КАК СуммаПревысившаяПределФСС,
	|	СУММА(СведенияОДоходах.НеОблагаетсяФСС) КАК НеОблагаетсяНС_ПЗ,
	|	СУММА(СведенияОДоходах.БазаФСС_НС) КАК БазаНС_ПЗ,
	|	0 КАК БазаФармацевта,
	|	0 КАК БазаМоряка,
	|	СУММА(ВЫБОР
	|			КОГДА (СведенияОДоходах.ВидТарифаСтраховыхВзносов = &ОрганизацияИнвалидов)
	|					И &ЭтоЮрЛицо
	|				ТОГДА СведенияОДоходах.БазаФСС_НС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК БазаИнвалидаНС_ПЗ
	|ПОМЕСТИТЬ ВТОблагаемыеБазыПоМесяцам
	|ИЗ
	|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И НЕ СведенияОДоходах.ФизическоеЛицо В
	|				(ВЫБРАТЬ
	|					ФизлицаБезБазы.ФизическоеЛицо
	|				ИЗ
	|					ВТФизлицаБезОблагаемойБазы КАК ФизлицаБезБазы)
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)
	|					И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА Расчеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ФССНачислено,
	|	0 КАК ФССДоНачислено,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)
	|					И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА Расчеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ФССУплачено,
	|	0 КАК ФССНеПринятоРасходов,
	|	0 КАК ФССВозмещеноРасходов,
	|	0 КАК ФССПроизведеноРасходов,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)
	|					И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА Расчеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ФССНесчастныеСлучаиНачислено,
	|	0 КАК ФССНесчастныеСлучаиДоНачислено,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)
	|					И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА Расчеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ФССНесчастныеСлучаиУплачено,
	|	0 КАК ФССНесчастныеСлучаиНеПринятоРасходов,
	|	0 КАК ФССНесчастныеСлучаиВозмещеноРасходов,
	|	0 КАК ФССНесчастныеСлучаиПроизведеноРасходов,
	|	НАЧАЛОПЕРИОДА(Расчеты.Период, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ВТРасчетыСФондом
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам КАК Расчеты
	|ГДЕ
	|	Расчеты.ЭтоСтраховыеВзносы
	|	И Расчеты.Организация = &Организация
	|	И Расчеты.ВидОбязательногоСтрахованияСотрудников В (ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС), ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи))
	|	И Расчеты.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(Расчеты.Период, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расчеты.СуммаОстаток,
	|	Расчеты.ЭтоРасчетыПоНачислениюУплатеВзносовВФСС
	|ПОМЕСТИТЬ ВТОстаткиНаКонец
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам.Остатки(
	|			&КонецОтчетногоПериода,
	|			Организация = &Организация
	|				И ЭтоСтраховыеВзносы
	|				И ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)) КАК Расчеты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)
	|					ТОГДА Расчеты.СуммаОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ФССНачальныйОстаток,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)
	|					ТОГДА Расчеты.СуммаОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ФССНесчастныеСлучаиНачальныйОстаток,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)
	|						И Расчеты.ЭтоРасчетыПоНачислениюУплатеВзносовВФСС
	|					ТОГДА Расчеты.СуммаОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ФССНачальныйОстатокПоВзносам
	|ПОМЕСТИТЬ ВТОстаткиНаНачало
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам.Остатки(
	|			&НачалоОтчетногоПериода,
	|			Организация = &Организация
	|				И ЭтоСтраховыеВзносы
	|				И ВидОбязательногоСтрахованияСотрудников В (ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС), ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи))) КАК Расчеты";

	Запрос.Выполнить();
	
	// ----------------------------------------------------------------------------------
	// ТЕКСТЫ ЗАПРОСОВ
	
	// БазаДляНачисленияВзносов
	// Это показатели Раздела I, Таблица 3
	// Поля:
	//		П000030001003,
	//		П000030001004 
	// Описание:	
	//	Выбираем из ВТОблагаемыеБазыПоМесяцам (таблица с данными о доходах ) 
	//	данные за соответствующий месяц
	
	БазаДляНачисленияВзносовТекст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.Начислено), 0) КАК П000030001003,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.НеОблагается), 0) КАК П000030002003,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.СуммаПревысившаяПределФСС), 0) КАК П000030003003,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.БазаФармацевта), 0) КАК П000030006003,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.БазаМоряка), 0) КАК П000030007003,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.БазаНС_ПЗ), 0) КАК П000060001103,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.БазаИнвалидаНС_ПЗ), 0) КАК П000060001104,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.НеОблагаетсяНС_ПЗ), 0) КАК П000060001105,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.Начислено
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030001004,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.Начислено
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030001005,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.Начислено
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030001006,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.НеОблагается
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030002004,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.НеОблагается
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030002005,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.НеОблагается
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030002006,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.СуммаПревысившаяПределФСС
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030003004,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.СуммаПревысившаяПределФСС
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030003005,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.СуммаПревысившаяПределФСС
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030003006,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.БазаФармацевта
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030006004,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.БазаФармацевта
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030006005,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.БазаФармацевта
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030006006,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.БазаМоряка
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030007004,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.БазаМоряка
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030007005,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.БазаМоряка
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030007006,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.БазаНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060001303,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.БазаНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060001403,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.БазаНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060001503,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.БазаИнвалидаНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060001304,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.БазаИнвалидаНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060001404,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.БазаИнвалидаНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060001504,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.НеОблагаетсяНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060001305,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.НеОблагаетсяНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060001405,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.НеОблагаетсяНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060001505
	|ИЗ
	|	ВТОблагаемыеБазыПоМесяцам КАК ДоходыПоФЛ";
	
	РасчетыСФондомОстаткиТекст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РасчетыСФондом.ФССНачальныйОстаток > 0
	|			ТОГДА РасчетыСФондом.ФССНачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000010001003,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА РасчетыСФондом.ФССНачальныйОстаток < 0
	|					ТОГДА -РасчетыСФондом.ФССНачальныйОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ > ВЫБОР
	|				КОГДА РасчетыСФондом.ФССНачальныйОстатокПоВзносам < 0
	|					ТОГДА -РасчетыСФондом.ФССНачальныйОстатокПоВзносам
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетыСФондом.ФССНачальныйОстаток < 0
	|						ТОГДА -РасчетыСФондом.ФССНачальныйОстаток
	|					ИНАЧЕ 0
	|				КОНЕЦ - ВЫБОР
	|					КОГДА РасчетыСФондом.ФССНачальныйОстатокПоВзносам < 0
	|						ТОГДА -РасчетыСФондом.ФССНачальныйОстатокПоВзносам
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000010013003,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА РасчетыСФондом.ФССНачальныйОстаток < 0
	|					ТОГДА -РасчетыСФондом.ФССНачальныйОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ > ВЫБОР
	|				КОГДА РасчетыСФондом.ФССНачальныйОстатокПоВзносам < 0
	|					ТОГДА -РасчетыСФондом.ФССНачальныйОстатокПоВзносам
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетыСФондом.ФССНачальныйОстатокПоВзносам < 0
	|						ТОГДА -РасчетыСФондом.ФССНачальныйОстатокПоВзносам
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РасчетыСФондом.ФССНачальныйОстаток < 0
	|					ТОГДА -РасчетыСФондом.ФССНачальныйОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК П000010014003,
	|	ВЫБОР
	|		КОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачальныйОстаток > 0
	|			ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000070001003,
	|	ВЫБОР
	|		КОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачальныйОстаток < 0
	|			ТОГДА -РасчетыСФондом.ФССНесчастныеСлучаиНачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000070010003
	|ИЗ
	|	ВТОстаткиНаНачало КАК РасчетыСФондом";
	
	КонечныйОстатокТекст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА СУММА(Расчеты.СуммаОстаток) < 0
	|					ТОГДА -СУММА(Расчеты.СуммаОстаток)
	|				ИНАЧЕ 0
	|			КОНЕЦ > СУММА(ВЫБОР
	|					КОГДА Расчеты.СуммаОстаток < 0
	|							И Расчеты.ЭтоРасчетыПоНачислениюУплатеВзносовВФСС
	|						ТОГДА -Расчеты.СуммаОстаток
	|					ИНАЧЕ 0
	|				КОНЕЦ)
	|			ТОГДА СУММА(ВЫБОР
	|						КОГДА Расчеты.СуммаОстаток < 0
	|								И Расчеты.ЭтоРасчетыПоНачислениюУплатеВзносовВФСС
	|							ТОГДА -Расчеты.СуммаОстаток
	|						ИНАЧЕ 0
	|					КОНЕЦ)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СУММА(Расчеты.СуммаОстаток) < 0
	|					ТОГДА -СУММА(Расчеты.СуммаОстаток)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК П000010011003
	|ИЗ
	|	ВТОстаткиНаКонец КАК Расчеты";
	
	РасчетыСФондомОборотыТекст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070002001,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070002101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070002201,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070002301,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ФССНесчастныеСлучаиДоНачислено), 0) КАК П000070003003,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ФССНесчастныеСлучаиНеПринятоРасходов), 0) КАК П000070004003,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ФССНесчастныеСлучаиВозмещеноРасходов), 0) КАК П000070006003,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070011001,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070011101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070011201,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070011301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070012001,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070012101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070012201,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070012301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000010002101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0)  КАК П000010002301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0)  КАК П000010002401,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0)  КАК П000010002501,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССДоНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010003101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССДоНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0)  КАК П000010003301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССДоНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0)  КАК П000010003401,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССДоНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000010003501,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНеПринятоРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0)  КАК П000010005101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНеПринятоРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010005301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССНеПринятоРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010005401,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССНеПринятоРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010005501,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССВозмещеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010006101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССВозмещеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010006301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССВозмещеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010006401,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССВозмещеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010006501,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010015101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010015301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010015401,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010015501,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010016101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010016301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010016401,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010016501
	|ИЗ
	|	ВТРасчетыСФондом КАК РасчетыСФондом";
	
	ДокументыОплаты = 
	"ВЫБРАТЬ
	|	Расчеты.Регистратор.Дата КАК Дата,
	|	Расчеты.Регистратор.Номер КАК Номер,
	|	ВЫБОР
	|		КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФСС,
	|	ВЫБОР
	|		КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФССНесчастныеСлучаи,
	|	ВЫБОР
	|		КОГДА МЕСЯЦ(Расчеты.Период) = &Месяц1
	|			ТОГДА 1
	|		КОГДА МЕСЯЦ(Расчеты.Период) = &Месяц2
	|			ТОГДА 2
	|		КОГДА МЕСЯЦ(Расчеты.Период) = &Месяц3
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК МесяцОплаты,
	|	Расчеты.Сумма КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам КАК Расчеты
	|ГДЕ
	|	Расчеты.ЭтоСтраховыеВзносы
	|	И Расчеты.Организация = &Организация
	|	И Расчеты.ВидОбязательногоСтрахованияСотрудников В (ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС), ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи))
	|	И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Расчеты.Период МЕЖДУ &Месяц1 И &КонецОтчетногоПериода";
	
	ЧисленностьРаботающихТекст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ФизЛица.ФизическоеЛицо) КАК ЧисленностьРаботников,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ФизЛица.ФизическоеЛицо.Физлицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ЧисленностьЖенщин,
	|	0 КАК ЧисленностьИнвалидов
	|ИЗ
	|	ВТФизЛицаСОблагаемойБазой КАК ФизЛица";

	ДоходыИнвалидовТекст =
	"ВЫБРАТЬ
	|	Доходы.ФизическоеЛицо,
	|	ФИОФизлиц.Наименование КАК П000310001002,
	|	"""" КАК П000310001003,
	|	"""" КАК П000310001004,
	|	СУММА(Доходы.БазаФСС - Доходы.СуммаПревысившаяПределФСС) КАК П000310001005,
	|	СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
	|				ТОГДА Доходы.БазаФСС - Доходы.СуммаПревысившаяПределФСС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000310001006,
	|	СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
	|				ТОГДА Доходы.БазаФСС - Доходы.СуммаПревысившаяПределФСС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000310001007,
	|	СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
	|				ТОГДА Доходы.БазаФСС - Доходы.СуммаПревысившаяПределФСС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000310001008
	|ИЗ
	|	ВТРасширенныеСведенияОДоходахИВзносах КАК Доходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК ФИОФизлиц
	|		ПО Доходы.ФизическоеЛицо = ФИОФизлиц.ФизическоеЛицо
	|ГДЕ
	|	Доходы.ВидТарифаСтраховыхВзносов = &ОрганизацияИнвалидов
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.ФизическоеЛицо,
	|	ФИОФизлиц.Наименование
	|
	|ИМЕЮЩИЕ
	|	СУММА(Доходы.БазаФСС - Доходы.СуммаПревысившаяПределФСС) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	П000310001002";

	// -------------------------------------------------------------------------------
	// Вывод данных в отчет
	
	// расчет численности (титульный лист)
	
	ЧисленностьИнвалидов = 0;
	Если ЭтоЮридическоеЛицо Тогда
		Контейнер.Титульный.ЧислРаботников = Сотрудники.СреднесписочнаяЧисленностьРаботающих(Организация, ПараметрыОтчета.ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	Иначе 	
		Запрос.Текст = ЧисленностьРаботающихТекст;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЧисленностьИнвалидов = Выборка.ЧисленностьИнвалидов;
			Контейнер.Титульный.ЧислРаботников = Выборка.ЧисленностьРаботников;
			Контейнер.Титульный.ЧислЖенщин = Выборка.ЧисленностьЖенщин;
		Иначе
			Контейнер.Титульный.ЧислРаботников = 0;
			Контейнер.Титульный.ЧислЖенщин = 0;
		КонецЕсли;
	КонецЕсли;
	
	// Раздел I (табл. 3), Раздел II (табл. 6)
	
	ПоказателиОтчета = Новый Структура;
	ОписаниеПоказателей_4ФСС_2012Кв1(ПоказателиОтчета);
	Контейнер.Раздел1_31_ДанныеДопСтрок.Очистить();
	Значение = Неопределено;
	Для каждого КлючИЗначение Из Контейнер.Раздел1_1 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Раздел1_1[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	Для каждого КлючИЗначение Из Контейнер.Раздел1_2 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Раздел1_2[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	Для каждого КлючИЗначение Из Контейнер.Раздел1_3 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Раздел1_3[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	Для каждого КлючИЗначение Из Контейнер.Раздел1_5 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Раздел1_5[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	Для каждого КлючИЗначение Из Контейнер.Раздел2_6_7 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Раздел2_6_7[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	Для каждого КлючИЗначение Из Контейнер.Раздел2_8_9 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Раздел2_8_9[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = БазаДляНачисленияВзносовТекст;
	ТаблицаДоходов = Запрос.Выполнить().Выгрузить();
	СтрокаДоходов = ТаблицаДоходов[0];
	
	ЗаполнитьЗначенияСвойств(Контейнер.Раздел1_3, СтрокаДоходов);
	ЗаполнитьЗначенияСвойств(Контейнер.Раздел2_6_7, СтрокаДоходов);
	
	// Раздел I (табл 3.1)
	
	Запрос.Текст = ДоходыИнвалидовТекст;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда // не было инвалидов совсем
		
		ВременнаяТаблица = Результат.Выгрузить();
		ЧисленностьИнвалидов = ВременнаяТаблица.Количество();  // контрольное соотношение №5 по разделу "Таблица 3.1 «Сведения, необходимые для применения плательщиками страховых взносов пониженного тарифа страховых взносов, установленного частью 2 статьи 58 Федерального закона от 24 июля 2009 г. № 212-ФЗ»"
		
		НомерСтроки = 1;
		Для каждого СтрокаДанных Из ВременнаяТаблица Цикл
			СтрокаКонтейнера = Контейнер.Раздел1_31_ДанныеДопСтрок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКонтейнера, СтрокаДанных);
			СтрокаКонтейнера.П000310001001 = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Контейнер.Титульный.ЧислИнвалидов = ЧисленностьИнвалидов;
	
	// Раздел I (табл 4.3)
	
	УпрощенныйНалоговыйРежимПроизводство = СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "УпрощенныйНалоговыйРежимПроизводство");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОДоходах.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
	|	СведенияОДоходах.ВидТарифаСтраховыхВзносов.КодФСС2012 КАК Шифр
	|ИЗ
	|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И НЕ СведенияОДоходах.ФизическоеЛицо В
	|				(ВЫБРАТЬ
	|					ФизлицаБезБазы.ФизическоеЛицо
	|				ИЗ
	|					ВТФизлицаБезОблагаемойБазы КАК ФизлицаБезБазы)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	УСНПроизводство = Ложь;
	Шифр ="";
	Пока Выборка.Следующий() Цикл
		Шифр = Выборка.Шифр;
		Если Выборка.ВидТарифаСтраховыхВзносов = УпрощенныйНалоговыйРежимПроизводство Тогда
			УСНПроизводство = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Отражаем доходы по организации
	Если УСНПроизводство Тогда
		// Раздел 3.6
		Доход = 0;
		// Определяем, необходимо ли формировать доходы
		ЗапросПоДоходам = Новый Запрос;
		
		// Добавляем периода для анализа заполненности доходов
		Квартал = НачалоКвартала(НачалоПериода);
		// первый месяц
		ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(Квартал,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период ПОМЕСТИТЬ ВТПериодыКварталов";
		Квартал = НачалоКвартала(ДобавитьМесяц(Квартал,3));
		// прибавим остальные месяцы
		Пока КонецДня(Квартал) < КонецМесяца(ДатаКонцаПериодаОтчета) Цикл
			ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(Квартал,"ДФ=гггг,М,д,Ч,м,с") + ")";
			Квартал = НачалоКвартала(ДобавитьМесяц(Квартал,3));
		КонецЦикла;
		ЗапросПоДоходам.Текст = ПериодыТекст;
		
		
		ОсновнойТекстЗапросаПоДоходам = "ВЫБРАТЬ
		|	ПериодыКварталов.Период КАК Период,
		|	ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.ДоходБазаОборот, 0) КАК Сумма
		|ИЗ
		|	ВТПериодыКварталов КАК ПериодыКварталов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, Квартал, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
		|		ПО (КнигаУчетаДоходовИРасходовОбороты.Период = ПериодыКварталов.Период)";
		
		ЗапросПоДоходам.Текст =ПериодыТекст +"; "+ ОсновнойТекстЗапросаПоДоходам;
		ЗапросПоДоходам.УстановитьПараметр("Организация", Организация);
		ЗапросПоДоходам.УстановитьПараметр("НачалоПериода", НачалоПериода);
		ЗапросПоДоходам.УстановитьПараметр("КонецПериода", КонецДня(ДатаКонцаПериодаОтчета));
		ВыборкаПоДоходу = ЗапросПоДоходам.Выполнить().Выбрать();
		
		НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
		УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
		МенеджерВТДляДоходов = Новый МенеджерВременныхТаблиц;
		РегламентированнаяОтчетностьУСН.ПолучитьВТТаблицуКурсовВалютЗаПериод(МенеджерВТДляДоходов, НачалоКвартала(ДатаКонцаПериодаОтчета),КонецКвартала(ДатаКонцаПериодаОтчета), НациональнаяВалюта, УчетВалютныхОпераций);
		Пока ВыборкаПоДоходу.Следующий() Цикл
			Если ВыборкаПоДоходу.Сумма = 0 Тогда
				// Формируем доход за отчетный период
				// 
				Результат = Новый Структура;
				Результат.Вставить("ДокументФормирования", Документы.ЗаписиУСН.ПустаяСсылка());
				Результат.Вставить("ЕстьОшибки", Ложь);
				Результат.Вставить("ЕстьПредупреждения", Ложь);
				Результат.Вставить("ДополнительнаяИнформация", "");
				
				Результат.ДокументФормирования = РегламентированнаяОтчетностьУСН.ПолучитьДокументЗаписейУСНВПериодеПоВиду(
					Организация,
					КонецКвартала(ДатаКонцаПериодаОтчета),
					Перечисления.ВидыЗаписейФормированийКУДиР.ДоходыПрочие);
				
				РегламентированнаяОтчетностьУСН.ВыполнитьФормированиеПоДоходам(
					Организация,
					КонецКвартала(ДатаКонцаПериодаОтчета),
					Результат,
					МенеджерВТДляДоходов);
			КонецЕсли;
		КонецЦикла;
		
		ВыборкаПоДоходу = ЗапросПоДоходам.Выполнить().Выбрать();
		Пока ВыборкаПоДоходу.Следующий() Цикл
			Доход = Доход + ВыборкаПоДоходу.Сумма;
		КонецЦикла;
		Контейнер.Раздел1_43.П000430000103 = Доход;
		Контейнер.Раздел1_43.П000430000203 = Доход;
		
	КонецЕсли;
	
	Контейнер.Титульный.ШифрСтрах1Часть = ?(ПустаяСтрока(Шифр),"071", Шифр);
	СистемаНалогообложения = РегистрыСведений.СистемыНалогообложенияОрганизаций.ПолучитьПоследнее(КонецДня(ДатаКонцаПериодаОтчета), Новый Структура("Организация", Организация));
	
	Если Контейнер.Титульный.ШифрСтрах1Часть = "121"
		ИЛИ Контейнер.Титульный.ШифрСтрах1Часть = "151"
		ИЛИ Контейнер.Титульный.ШифрСтрах1Часть = "161" Тогда
		Контейнер.Титульный.ШифрСтрах2Часть = "01";
	ИначеЕсли Контейнер.Титульный.ШифрСтрах1Часть = "141" Тогда
		Контейнер.Титульный.ШифрСтрах2Часть = "02";
	Иначе
		Если СистемаНалогообложения.ПлательщикЕНВД Тогда
			Контейнер.Титульный.ШифрСтрах2Часть = "02";
		ИначеЕсли СистемаНалогообложения.ПлательщикУСН Тогда
			Контейнер.Титульный.ШифрСтрах2Часть = "01";
		Иначе
			Контейнер.Титульный.ШифрСтрах2Часть = "00";
		КонецЕсли;
	КонецЕсли;
	
	Контейнер.Титульный.ШифрСтрах3Часть = "00";
	
	// Тариф страховых взносов
	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "СтраховойТариф");
	СтраховойТариф = Неопределено;
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаКонцаПериодаОтчета, Сведения);
	ОргСведения.Свойство("СтраховойТариф", СтраховойТариф);
	
	Контейнер.Раздел2_6_7.П000060001006 = ?(СтраховойТариф = Неопределено, 0, СтраховойТариф);
	Контейнер.Раздел2_6_7.П000060001010 = Контейнер.Раздел2_6_7.П000060001006;
	
	// РАСЧЕТЫ ПО СРЕДСТВАМ ОБЯЗАТЕЛЬНОГО СОЦИАЛЬНОГО СТРАХОВАНИЯ 
	
	// Раздел I (табл. 1) и Раздел II (табл 7)
	
	// Заполняем по данным учета расчетов с фондом
	
	Запрос.Текст = РасчетыСФондомОстаткиТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел1_1, Выборка);
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел2_6_7, Выборка);
	КонецЕсли;
	
	Запрос.Текст = РасчетыСФондомОборотыТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел1_1, Выборка);
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел2_6_7, Выборка);
	КонецЕсли;
	
	Контейнер.Раздел11_1_ДанныеДопСтрок.Очистить();
	Контейнер.Раздел11_2_ДанныеДопСтрок.Очистить();
	Контейнер.Раздел11_3_ДанныеДопСтрок.Очистить();
	Контейнер.Раздел2_6_7_1_ДанныеДопСтрок.Очистить();
	Контейнер.Раздел2_6_7_2_ДанныеДопСтрок.Очистить();
	Контейнер.Раздел2_6_7_3_ДанныеДопСтрок.Очистить();
	н1_Раздел11 = 1;
	н2_Раздел11 = 1;
	н3_Раздел11 = 1;
	
	н1_Раздел67 = 1;
	н2_Раздел67 = 1;
	н3_Раздел67 = 1;
	
	Запрос.Текст = ДокументыОплаты;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ФСС Тогда
			Если Выборка.МесяцОплаты = 1 Тогда
				НоваяСтрока = Контейнер.Раздел11_1_ДанныеДопСтрок.Добавить();
				НоваяСтрока.П000010016311 = Выборка.Дата;
				НоваяСтрока.П000010016321 = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина);
				НоваяСтрока.П000010016301 = Выборка.Сумма;
				
				Контейнер.Раздел1_1.Вставить("П000010016311_"+н1_Раздел11, Выборка.Дата);
				Контейнер.Раздел1_1.Вставить("П000010016321_"+н1_Раздел11, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина));
				Контейнер.Раздел1_1.Вставить("П000010016301_"+н1_Раздел11, Выборка.Сумма);
				н1_Раздел11 = н1_Раздел11+1;
				
			ИначеЕсли Выборка.МесяцОплаты = 2 Тогда
				НоваяСтрока = Контейнер.Раздел11_2_ДанныеДопСтрок.Добавить();
				НоваяСтрока.П000010016411 = Выборка.Дата;
				НоваяСтрока.П000010016421 = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина);
				НоваяСтрока.П000010016401 = Выборка.Сумма;
				
				Контейнер.Раздел1_1.Вставить("П000010016411_"+н2_Раздел11, Выборка.Дата);
				Контейнер.Раздел1_1.Вставить("П000010016421_"+н2_Раздел11, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина));
				Контейнер.Раздел1_1.Вставить("П000010016401_"+н2_Раздел11, Выборка.Сумма);
				н2_Раздел11 = н2_Раздел11+1;
				
			ИначеЕсли Выборка.МесяцОплаты = 3 Тогда
				НоваяСтрока = Контейнер.Раздел11_3_ДанныеДопСтрок.Добавить();
				НоваяСтрока.П000010016511 = Выборка.Дата;
				НоваяСтрока.П000010016521 = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина);
				НоваяСтрока.П000010016501 = Выборка.Сумма;
				
				Контейнер.Раздел1_1.Вставить("П000010016511_"+н3_Раздел11, Выборка.Дата);
				Контейнер.Раздел1_1.Вставить("П000010016521_"+н3_Раздел11, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина));
				Контейнер.Раздел1_1.Вставить("П000010016501_"+н3_Раздел11, Выборка.Сумма);
				н3_Раздел11 = н3_Раздел11+1;
				
			КонецЕсли;
		ИначеЕсли Выборка.ФССНесчастныеСлучаи Тогда
			Если Выборка.МесяцОплаты = 1 Тогда
				НоваяСтрока = Контейнер.Раздел2_6_7_1_ДанныеДопСтрок.Добавить();
				НоваяСтрока.П000070012104 = Выборка.Дата;
				НоваяСтрока.П000070012105 = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина);
				НоваяСтрока.П000070012101 = Выборка.Сумма;
				
				Контейнер.Раздел2_6_7.Вставить("П000070012104_"+н1_Раздел67, Выборка.Дата);
				Контейнер.Раздел2_6_7.Вставить("П000070012105_"+н1_Раздел67, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина));
				Контейнер.Раздел2_6_7.Вставить("П000070012101_"+н1_Раздел67, Выборка.Сумма);
				н1_Раздел67 = н1_Раздел67+1;
				
			ИначеЕсли Выборка.МесяцОплаты = 2 Тогда
				НоваяСтрока = Контейнер.Раздел2_6_7_2_ДанныеДопСтрок.Добавить();
				НоваяСтрока.П000070012204 = Выборка.Дата;
				НоваяСтрока.П000070012205 = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина);
				НоваяСтрока.П000070012201 = Выборка.Сумма;
				
				Контейнер.Раздел2_6_7.Вставить("П000070012204_"+н2_Раздел67, Выборка.Дата);
				Контейнер.Раздел2_6_7.Вставить("П000070012205_"+н2_Раздел67, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина));
				Контейнер.Раздел2_6_7.Вставить("П000070012201_"+н2_Раздел67, Выборка.Сумма);
				н2_Раздел67 = н2_Раздел67+1;
			ИначеЕсли Выборка.МесяцОплаты = 3 Тогда
				НоваяСтрока = Контейнер.Раздел2_6_7_3_ДанныеДопСтрок.Добавить();
				НоваяСтрока.П000070012304 = Выборка.Дата;
				НоваяСтрока.П000070012305 = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина);
				НоваяСтрока.П000070012301 = Выборка.Сумма;
				
				Контейнер.Раздел2_6_7.Вставить("П000070012204_"+н3_Раздел67, Выборка.Дата);
				Контейнер.Раздел2_6_7.Вставить("П000070012205_"+н3_Раздел67, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина));
				Контейнер.Раздел2_6_7.Вставить("П000070012201_"+н3_Раздел67, Выборка.Сумма);
				н3_Раздел67 = н3_Раздел67+1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = КонечныйОстатокТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел2_6_7, Выборка);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗначенияПоказателей_4ФСС_2015Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Организация = ПараметрыОтчета.Организация;
	ДатаКонцаПериодаОтчета = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
	НачалоТекущегоКвартала = НачалоКвартала(ДатаКонцаПериодаОтчета);
	ЭтоЮридическоеЛицо = РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	НачалоПериода = НачалоГода(ДатаКонцаПериодаОтчета);
	ОкончаниеПериода = КонецМесяца(ДатаКонцаПериодаОтчета);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода",		НачалоПериода);
	Запрос.УстановитьПараметр("НачалоТекущегоКвартала",		НачалоТекущегоКвартала);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода",		КонецДня(ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаПередачиФССВыплатыПособий", УчетСтраховыхВзносов.ДатаПередачиФССВыплатыПособий(Организация));
	Запрос.УстановитьПараметр("ДалекаяДата", 				ДобавитьМесяц(НачалоПериода, 1200));
	Запрос.УстановитьПараметр("Месяц1",						Месяц(НачалоТекущегоКвартала));
	Запрос.УстановитьПараметр("Месяц2",						Месяц(НачалоТекущегоКвартала) + 1);
	Запрос.УстановитьПараметр("Месяц3",						Месяц(НачалоТекущегоКвартала) + 2);
	Запрос.УстановитьПараметр("ЭтоЮрЛицо",					ЭтоЮридическоеЛицо);
	Запрос.УстановитьПараметр("ОрганизацияИнвалидов",		СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "ОрганизацияИнвалидов"));
	
	// ----------------------------------------------------------------------------------
	// ФОРМИРОВАНИЕ ВРЕМЕННЫХ ТАБЛИЦ
	
	// получаем временные таблицы, используя общие алгоритмы
	УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОДоходахИВзносах(НачалоПериода, ОкончаниеПериода, Организация, Запрос.МенеджерВременныхТаблиц);
	
	
	УчетСтраховыхВзносов.СформироватьТаблицуВТКадровыеДанныеФизическихЛицСПериодом(Запрос.МенеджерВременныхТаблиц, "ВТФизЛицаСОблагаемойБазой", Ложь, ДатаКонцаПериодаОтчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СУММА(СведенияОДоходах.Сумма) КАК Начислено,
	|	СУММА(СведенияОДоходах.НеОблагаетсяФСС) КАК НеОблагается,
	|	СУММА(СведенияОДоходах.СуммаПревысившаяПределФСС) КАК СуммаПревысившаяПределФСС,
	|	СУММА(СведенияОДоходах.НеОблагаетсяФСС) КАК НеОблагаетсяНС_ПЗ,
	|	СУММА(СведенияОДоходах.БазаФСС_НС) КАК БазаНС_ПЗ,
	|	0 КАК БазаФармацевта,
	|	0 КАК БазаМоряка,
	|	СУММА(ВЫБОР
	|			КОГДА (СведенияОДоходах.ВидТарифаСтраховыхВзносов = &ОрганизацияИнвалидов)
	|					И &ЭтоЮрЛицо
	|				ТОГДА СведенияОДоходах.БазаФСС_НС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК БазаИнвалидаНС_ПЗ
	|ПОМЕСТИТЬ ВТОблагаемыеБазыПоМесяцам
	|ИЗ
	|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И НЕ СведенияОДоходах.ФизическоеЛицо В
	|				(ВЫБРАТЬ
	|					ФизлицаБезБазы.ФизическоеЛицо
	|				ИЗ
	|					ВТФизлицаБезОблагаемойБазы КАК ФизлицаБезБазы)
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)
	|					И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА Расчеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ФССНачислено,
	|	0 КАК ФССДоНачислено,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)
	|					И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА Расчеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ФССУплачено,
	|	0 КАК ФССНеПринятоРасходов,
	|	0 КАК ФССВозмещеноРасходов,
	|	0 КАК ФССПроизведеноРасходов,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)
	|					И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА Расчеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ФССНесчастныеСлучаиНачислено,
	|	0 КАК ФССНесчастныеСлучаиДоНачислено,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)
	|					И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА Расчеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ФССНесчастныеСлучаиУплачено,
	|	0 КАК ФССНесчастныеСлучаиНеПринятоРасходов,
	|	0 КАК ФССНесчастныеСлучаиВозмещеноРасходов,
	|	0 КАК ФССНесчастныеСлучаиПроизведеноРасходов,
	|	НАЧАЛОПЕРИОДА(Расчеты.Период, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ВТРасчетыСФондом
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам КАК Расчеты
	|ГДЕ
	|	Расчеты.ЭтоСтраховыеВзносы
	|	И Расчеты.Организация = &Организация
	|	И Расчеты.ВидОбязательногоСтрахованияСотрудников В (ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС), ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи))
	|	И Расчеты.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(Расчеты.Период, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расчеты.СуммаОстаток,
	|	Расчеты.ЭтоРасчетыПоНачислениюУплатеВзносовВФСС
	|ПОМЕСТИТЬ ВТОстаткиНаКонец
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам.Остатки(
	|			&КонецОтчетногоПериода,
	|			Организация = &Организация
	|				И ЭтоСтраховыеВзносы
	|				И ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)) КАК Расчеты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)
	|					ТОГДА Расчеты.СуммаОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ФССНачальныйОстаток,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)
	|					ТОГДА Расчеты.СуммаОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ФССНесчастныеСлучаиНачальныйОстаток,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)
	|						И Расчеты.ЭтоРасчетыПоНачислениюУплатеВзносовВФСС
	|					ТОГДА Расчеты.СуммаОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ФССНачальныйОстатокПоВзносам
	|ПОМЕСТИТЬ ВТОстаткиНаНачало
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам.Остатки(
	|			&НачалоОтчетногоПериода,
	|			Организация = &Организация
	|				И ЭтоСтраховыеВзносы
	|				И ВидОбязательногоСтрахованияСотрудников В (ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС), ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи))) КАК Расчеты";

	Запрос.Выполнить();
	
	// ----------------------------------------------------------------------------------
	// ТЕКСТЫ ЗАПРОСОВ
	
	// БазаДляНачисленияВзносов
	// Это показатели Раздела I, Таблица 3
	// Поля:
	//		П000030001003,
	//		П000030001004 
	// Описание:	
	//	Выбираем из ВТОблагаемыеБазыПоМесяцам (таблица с данными о доходах ) 
	//	данные за соответствующий месяц
	
	БазаДляНачисленияВзносовТекст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.Начислено), 0) КАК П000030001003,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.НеОблагается), 0) КАК П000030002003,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.СуммаПревысившаяПределФСС), 0) КАК П000030003003,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.БазаФармацевта), 0) КАК П000030006003,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.БазаМоряка), 0) КАК П000030007003,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.БазаНС_ПЗ), 0) КАК П000060001103,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.БазаИнвалидаНС_ПЗ), 0) КАК П000060001104,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.НеОблагаетсяНС_ПЗ), 0) КАК П000060001105,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.Начислено
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030001004,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.Начислено
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030001005,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.Начислено
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030001006,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.НеОблагается
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030002004,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.НеОблагается
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030002005,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.НеОблагается
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030002006,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.СуммаПревысившаяПределФСС
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030003004,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.СуммаПревысившаяПределФСС
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030003005,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.СуммаПревысившаяПределФСС
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030003006,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.БазаФармацевта
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030006004,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.БазаФармацевта
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030006005,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.БазаФармацевта
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030006006,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.БазаМоряка
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030007004,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.БазаМоряка
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030007005,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.БазаМоряка
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030007006,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.БазаНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060001303,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.БазаНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060001403,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.БазаНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060001503,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.БазаИнвалидаНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060001304,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.БазаИнвалидаНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060001404,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.БазаИнвалидаНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060001504,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.НеОблагаетсяНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060001305,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.НеОблагаетсяНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060001405,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.НеОблагаетсяНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060001505
	|ИЗ
	|	ВТОблагаемыеБазыПоМесяцам КАК ДоходыПоФЛ";
	
	РасчетыСФондомОстаткиТекст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РасчетыСФондом.ФССНачальныйОстаток > 0
	|			ТОГДА РасчетыСФондом.ФССНачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000010001003,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА РасчетыСФондом.ФССНачальныйОстаток < 0
	|					ТОГДА -РасчетыСФондом.ФССНачальныйОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ > ВЫБОР
	|				КОГДА РасчетыСФондом.ФССНачальныйОстатокПоВзносам < 0
	|					ТОГДА -РасчетыСФондом.ФССНачальныйОстатокПоВзносам
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетыСФондом.ФССНачальныйОстаток < 0
	|						ТОГДА -РасчетыСФондом.ФССНачальныйОстаток
	|					ИНАЧЕ 0
	|				КОНЕЦ - ВЫБОР
	|					КОГДА РасчетыСФондом.ФССНачальныйОстатокПоВзносам < 0
	|						ТОГДА -РасчетыСФондом.ФССНачальныйОстатокПоВзносам
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000010013003,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА РасчетыСФондом.ФССНачальныйОстаток < 0
	|					ТОГДА -РасчетыСФондом.ФССНачальныйОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ > ВЫБОР
	|				КОГДА РасчетыСФондом.ФССНачальныйОстатокПоВзносам < 0
	|					ТОГДА -РасчетыСФондом.ФССНачальныйОстатокПоВзносам
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетыСФондом.ФССНачальныйОстатокПоВзносам < 0
	|						ТОГДА -РасчетыСФондом.ФССНачальныйОстатокПоВзносам
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РасчетыСФондом.ФССНачальныйОстаток < 0
	|					ТОГДА -РасчетыСФондом.ФССНачальныйОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК П000010014003,
	|	ВЫБОР
	|		КОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачальныйОстаток > 0
	|			ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000070001003,
	|	ВЫБОР
	|		КОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачальныйОстаток < 0
	|			ТОГДА -РасчетыСФондом.ФССНесчастныеСлучаиНачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000070010003
	|ИЗ
	|	ВТОстаткиНаНачало КАК РасчетыСФондом";
	
	КонечныйОстатокТекст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА СУММА(Расчеты.СуммаОстаток) < 0
	|					ТОГДА -СУММА(Расчеты.СуммаОстаток)
	|				ИНАЧЕ 0
	|			КОНЕЦ > СУММА(ВЫБОР
	|					КОГДА Расчеты.СуммаОстаток < 0
	|							И Расчеты.ЭтоРасчетыПоНачислениюУплатеВзносовВФСС
	|						ТОГДА -Расчеты.СуммаОстаток
	|					ИНАЧЕ 0
	|				КОНЕЦ)
	|			ТОГДА СУММА(ВЫБОР
	|						КОГДА Расчеты.СуммаОстаток < 0
	|								И Расчеты.ЭтоРасчетыПоНачислениюУплатеВзносовВФСС
	|							ТОГДА -Расчеты.СуммаОстаток
	|						ИНАЧЕ 0
	|					КОНЕЦ)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СУММА(Расчеты.СуммаОстаток) < 0
	|					ТОГДА -СУММА(Расчеты.СуммаОстаток)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК П000010011003
	|ИЗ
	|	ВТОстаткиНаКонец КАК Расчеты";
	
	РасчетыСФондомОборотыТекст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070002001,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070002101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070002201,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070002301,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ФССНесчастныеСлучаиДоНачислено), 0) КАК П000070003003,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ФССНесчастныеСлучаиНеПринятоРасходов), 0) КАК П000070004003,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ФССНесчастныеСлучаиВозмещеноРасходов), 0) КАК П000070006003,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070011001,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070011101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070011201,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070011301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070012001,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070012101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070012201,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070012301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000010002101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0)  КАК П000010002301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0)  КАК П000010002401,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0)  КАК П000010002501,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССДоНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010003101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССДоНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0)  КАК П000010003301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССДоНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0)  КАК П000010003401,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССДоНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000010003501,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНеПринятоРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0)  КАК П000010005101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНеПринятоРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010005301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССНеПринятоРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010005401,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССНеПринятоРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010005501,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССВозмещеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010006101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССВозмещеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010006301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССВозмещеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010006401,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССВозмещеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010006501,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010015101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010015301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010015401,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010015501,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010016101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010016301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010016401,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010016501,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|					ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиУплачено
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000070016001
	|ИЗ
	|	ВТРасчетыСФондом КАК РасчетыСФондом";
	
	ДокументыОплаты = 
	"ВЫБРАТЬ  Различные
	|	Расчеты.Регистратор.Дата КАК Дата,
	|	Расчеты.Регистратор.Номер КАК Номер,
	|	ВЫБОР
	|		КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФСС,
	|	ВЫБОР
	|		КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФССНесчастныеСлучаи,
	|	ВЫБОР
	|		КОГДА МЕСЯЦ(Расчеты.Период) = &Месяц1
	|			ТОГДА 1
	|		КОГДА МЕСЯЦ(Расчеты.Период) = &Месяц2
	|			ТОГДА 2
	|		КОГДА МЕСЯЦ(Расчеты.Период) = &Месяц3
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК МесяцОплаты,
	|	Расчеты.Сумма КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам КАК Расчеты
	|ГДЕ
	|	Расчеты.ЭтоСтраховыеВзносы
	|	И Расчеты.Организация = &Организация
	|	И Расчеты.ВидОбязательногоСтрахованияСотрудников В (ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС), ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи))
	|	И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Расчеты.Период МЕЖДУ &НачалоТекущегоКвартала И &КонецОтчетногоПериода";
	
	ЧисленностьРаботающихТекст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ФизЛица.ФизическоеЛицо) КАК ЧисленностьРаботников,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ФизЛица.ФизическоеЛицо.Физлицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ЧисленностьЖенщин,
	|	0 КАК ЧисленностьИнвалидов
	|ИЗ
	|	ВТФизЛицаСОблагаемойБазой КАК ФизЛица";

	ДоходыИнвалидовТекст =
	"ВЫБРАТЬ
	|	Доходы.ФизическоеЛицо,
	|	ФИОФизлиц.Наименование КАК П000310001002,
	|	"""" КАК П000310001003,
	|	"""" КАК П000310001004,
	|	СУММА(Доходы.БазаФСС - Доходы.СуммаПревысившаяПределФСС) КАК П000310001005,
	|	СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
	|				ТОГДА Доходы.БазаФСС - Доходы.СуммаПревысившаяПределФСС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000310001006,
	|	СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
	|				ТОГДА Доходы.БазаФСС - Доходы.СуммаПревысившаяПределФСС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000310001007,
	|	СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
	|				ТОГДА Доходы.БазаФСС - Доходы.СуммаПревысившаяПределФСС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000310001008
	|ИЗ
	|	ВТРасширенныеСведенияОДоходахИВзносах КАК Доходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК ФИОФизлиц
	|		ПО Доходы.ФизическоеЛицо = ФИОФизлиц.ФизическоеЛицо
	|ГДЕ
	|	Доходы.ВидТарифаСтраховыхВзносов = &ОрганизацияИнвалидов
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.ФизическоеЛицо,
	|	ФИОФизлиц.Наименование
	|
	|ИМЕЮЩИЕ
	|	СУММА(Доходы.БазаФСС - Доходы.СуммаПревысившаяПределФСС) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	П000310001002";

	// -------------------------------------------------------------------------------
	// Вывод данных в отчет
	
	// расчет численности (титульный лист)
	
	ЧисленностьИнвалидов = 0;
	Если ЭтоЮридическоеЛицо Тогда
		Контейнер.Титульный.ЧислРаботников = Сотрудники.СреднесписочнаяЧисленностьРаботающих(Организация, ПараметрыОтчета.ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	Иначе 	
		Запрос.Текст = ЧисленностьРаботающихТекст;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЧисленностьИнвалидов = Выборка.ЧисленностьИнвалидов;
			Контейнер.Титульный.ЧислРаботников = Выборка.ЧисленностьРаботников;
			Контейнер.Титульный.ЧислЖенщин = Выборка.ЧисленностьЖенщин;
		Иначе
			Контейнер.Титульный.ЧислРаботников = 0;
			Контейнер.Титульный.ЧислЖенщин = 0;
		КонецЕсли;
	КонецЕсли;
	
	// Раздел I (табл. 3), Раздел II (табл. 6)
	
	ПоказателиОтчета = Новый Структура;
	ОписаниеПоказателей_4ФСС_2012Кв1(ПоказателиОтчета);
	Контейнер.Раздел1_31_ДанныеДопСтрок.Очистить();
	Значение = Неопределено;
	Для каждого КлючИЗначение Из Контейнер.Раздел1_1 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Раздел1_1[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	Для каждого КлючИЗначение Из Контейнер.Раздел1_2 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Раздел1_2[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	Для каждого КлючИЗначение Из Контейнер.Раздел1_3 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Раздел1_3[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	Для каждого КлючИЗначение Из Контейнер.Раздел1_5 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Раздел1_5[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	Для каждого КлючИЗначение Из Контейнер.Раздел2_6 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Раздел2_6[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	
	Для каждого КлючИЗначение Из Контейнер.Раздел2_7 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Раздел2_7[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	
	Для каждого КлючИЗначение Из Контейнер.Раздел2_8_9 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Раздел2_8_9[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = БазаДляНачисленияВзносовТекст;
	ТаблицаДоходов = Запрос.Выполнить().Выгрузить();
	СтрокаДоходов = ТаблицаДоходов[0];
	
	ЗаполнитьЗначенияСвойств(Контейнер.Раздел1_3, СтрокаДоходов);
	ЗаполнитьЗначенияСвойств(Контейнер.Раздел2_6, СтрокаДоходов);
	ЗаполнитьЗначенияСвойств(Контейнер.Раздел2_7, СтрокаДоходов);
	
	// Раздел I (табл 3.1)
	
	Запрос.Текст = ДоходыИнвалидовТекст;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда // не было инвалидов совсем
		
		ВременнаяТаблица = Результат.Выгрузить();
		ЧисленностьИнвалидов = ВременнаяТаблица.Количество();  // контрольное соотношение №5 по разделу "Таблица 3.1 «Сведения, необходимые для применения плательщиками страховых взносов пониженного тарифа страховых взносов, установленного частью 2 статьи 58 Федерального закона от 24 июля 2009 г. № 212-ФЗ»"
		
		НомерСтроки = 1;
		Для каждого СтрокаДанных Из ВременнаяТаблица Цикл
			СтрокаКонтейнера = Контейнер.Раздел1_31_ДанныеДопСтрок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКонтейнера, СтрокаДанных);
			СтрокаКонтейнера.П000310001001 = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Контейнер.Титульный.ЧислИнвалидов = ЧисленностьИнвалидов;
	
	// Раздел I (табл 4.3)
	
	УпрощенныйНалоговыйРежимПроизводство = СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "УпрощенныйНалоговыйРежимПроизводство");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОДоходах.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
	|	СведенияОДоходах.ВидТарифаСтраховыхВзносов.КодФСС2012 КАК Шифр
	|ИЗ
	|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И НЕ СведенияОДоходах.ФизическоеЛицо В
	|				(ВЫБРАТЬ
	|					ФизлицаБезБазы.ФизическоеЛицо
	|				ИЗ
	|					ВТФизлицаБезОблагаемойБазы КАК ФизлицаБезБазы)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	УСНПроизводство = Ложь;
	Шифр ="";
	Пока Выборка.Следующий() Цикл
		Шифр = Выборка.Шифр;
		Если Выборка.ВидТарифаСтраховыхВзносов = УпрощенныйНалоговыйРежимПроизводство Тогда
			УСНПроизводство = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Отражаем доходы по организации
	Если УСНПроизводство Тогда
		// Раздел 3.6
		Доход = 0;
		// Определяем, необходимо ли формировать доходы
		ЗапросПоДоходам = Новый Запрос;
		
		// Добавляем периода для анализа заполненности доходов
		Квартал = НачалоКвартала(НачалоПериода);
		// первый месяц
		ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(Квартал,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период ПОМЕСТИТЬ ВТПериодыКварталов";
		Квартал = НачалоКвартала(ДобавитьМесяц(Квартал,3));
		// прибавим остальные месяцы
		Пока КонецДня(Квартал) < КонецМесяца(ДатаКонцаПериодаОтчета) Цикл
			ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(Квартал,"ДФ=гггг,М,д,Ч,м,с") + ")";
			Квартал = НачалоКвартала(ДобавитьМесяц(Квартал,3));
		КонецЦикла;
		ЗапросПоДоходам.Текст = ПериодыТекст;
		
		
		ОсновнойТекстЗапросаПоДоходам = "ВЫБРАТЬ
		|	ПериодыКварталов.Период КАК Период,
		|	ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.ДоходБазаОборот, 0) КАК Сумма
		|ИЗ
		|	ВТПериодыКварталов КАК ПериодыКварталов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, Квартал, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
		|		ПО (КнигаУчетаДоходовИРасходовОбороты.Период = ПериодыКварталов.Период)";
		
		ЗапросПоДоходам.Текст =ПериодыТекст +"; "+ ОсновнойТекстЗапросаПоДоходам;
		ЗапросПоДоходам.УстановитьПараметр("Организация", Организация);
		ЗапросПоДоходам.УстановитьПараметр("НачалоПериода", НачалоПериода);
		ЗапросПоДоходам.УстановитьПараметр("КонецПериода", КонецДня(ДатаКонцаПериодаОтчета));
		ВыборкаПоДоходу = ЗапросПоДоходам.Выполнить().Выбрать();
		
		НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
		УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
		МенеджерВТДляДоходов = Новый МенеджерВременныхТаблиц;
		РегламентированнаяОтчетностьУСН.ПолучитьВТТаблицуКурсовВалютЗаПериод(МенеджерВТДляДоходов, НачалоКвартала(ДатаКонцаПериодаОтчета),КонецКвартала(ДатаКонцаПериодаОтчета), НациональнаяВалюта, УчетВалютныхОпераций);
		Пока ВыборкаПоДоходу.Следующий() Цикл
			Если ВыборкаПоДоходу.Сумма = 0 Тогда
				// Формируем доход за отчетный период
				// 
				Результат = Новый Структура;
				Результат.Вставить("ДокументФормирования", Документы.ЗаписиУСН.ПустаяСсылка());
				Результат.Вставить("ЕстьОшибки", Ложь);
				Результат.Вставить("ЕстьПредупреждения", Ложь);
				Результат.Вставить("ДополнительнаяИнформация", "");
				
				Результат.ДокументФормирования = РегламентированнаяОтчетностьУСН.ПолучитьДокументЗаписейУСНВПериодеПоВиду(
					Организация,
					КонецКвартала(ДатаКонцаПериодаОтчета),
					Перечисления.ВидыЗаписейФормированийКУДиР.ДоходыПрочие);
				
				РегламентированнаяОтчетностьУСН.ВыполнитьФормированиеПоДоходам(
					Организация,
					КонецКвартала(ДатаКонцаПериодаОтчета),
					Результат,
					МенеджерВТДляДоходов);
			КонецЕсли;
		КонецЦикла;
		
		ВыборкаПоДоходу = ЗапросПоДоходам.Выполнить().Выбрать();
		Пока ВыборкаПоДоходу.Следующий() Цикл
			Доход = Доход + ВыборкаПоДоходу.Сумма;
		КонецЦикла;
		Контейнер.Раздел1_41.П000410000103 = Доход;
		Контейнер.Раздел1_41.П000410000203 = Доход;
		
	КонецЕсли;
	
	Контейнер.Титульный.ШифрСтрах1Часть = ?(ПустаяСтрока(Шифр),"071", Шифр);
	СистемаНалогообложения = РегистрыСведений.СистемыНалогообложенияОрганизаций.ПолучитьПоследнее(КонецДня(ДатаКонцаПериодаОтчета), Новый Структура("Организация", Организация));
	
	Если Контейнер.Титульный.ШифрСтрах1Часть = "121"
		ИЛИ Контейнер.Титульный.ШифрСтрах1Часть = "151"
		ИЛИ Контейнер.Титульный.ШифрСтрах1Часть = "161" Тогда
		Контейнер.Титульный.ШифрСтрах2Часть = "01";
	ИначеЕсли Контейнер.Титульный.ШифрСтрах1Часть = "141" Тогда
		Контейнер.Титульный.ШифрСтрах2Часть = "02";
	Иначе
		Если СистемаНалогообложения.ПлательщикЕНВД И Не СистемаНалогообложения.ПлательщикУСН Тогда
			Контейнер.Титульный.ШифрСтрах2Часть = "02";
		ИначеЕсли СистемаНалогообложения.ПлательщикУСН И НЕ СистемаНалогообложения.ПлательщикЕНВД Тогда
			Контейнер.Титульный.ШифрСтрах2Часть = "01";
		Иначе
			Контейнер.Титульный.ШифрСтрах2Часть = "00";
		КонецЕсли;
	КонецЕсли;
	
	Контейнер.Титульный.ШифрСтрах3Часть = "00";
	
	// Тариф страховых взносов
	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "СтраховойТариф");
	СтраховойТариф = Неопределено;
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаКонцаПериодаОтчета, Сведения);
	ОргСведения.Свойство("СтраховойТариф", СтраховойТариф);
	
	Контейнер.Раздел2_6.П000060001006 = ?(СтраховойТариф = Неопределено, 0, СтраховойТариф);
	Контейнер.Раздел2_6.П000060001010 = Контейнер.Раздел2_6.П000060001006;
	
	// РАСЧЕТЫ ПО СРЕДСТВАМ ОБЯЗАТЕЛЬНОГО СОЦИАЛЬНОГО СТРАХОВАНИЯ 
	
	// Раздел I (табл. 1) и Раздел II (табл 7)
	
	// Заполняем по данным учета расчетов с фондом
	
	Запрос.Текст = РасчетыСФондомОстаткиТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел1_1, Выборка);
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел2_6, Выборка);
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел2_7, Выборка);
	КонецЕсли;
	
	Запрос.Текст = РасчетыСФондомОборотыТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел1_1, Выборка);
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел2_6, Выборка);
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел2_7, Выборка);
	КонецЕсли;
	
	Контейнер.Раздел11_1_ДанныеДопСтрок.Очистить();
	Контейнер.Раздел11_2_ДанныеДопСтрок.Очистить();
	Контейнер.Раздел11_3_ДанныеДопСтрок.Очистить();
	Контейнер.Раздел2_7_1_ДанныеДопСтрок.Очистить();
	Контейнер.Раздел2_7_2_ДанныеДопСтрок.Очистить();
	Контейнер.Раздел2_7_3_ДанныеДопСтрок.Очистить();
	н1_Раздел11 = 1;
	н2_Раздел11 = 1;
	н3_Раздел11 = 1;
	
	н1_Раздел67 = 1;
	н2_Раздел67 = 1;
	н3_Раздел67 = 1;
	
	Запрос.Текст = ДокументыОплаты;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ФСС Тогда
			Если Выборка.МесяцОплаты = 1 Тогда
				НоваяСтрока = Контейнер.Раздел11_1_ДанныеДопСтрок.Добавить();
				НоваяСтрока.П000010016311 = Выборка.Дата;
				НоваяСтрока.П000010016321 = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина);
				НоваяСтрока.П000010016301 = Выборка.Сумма;
				
				Контейнер.Раздел1_1.Вставить("П000010016311_"+н1_Раздел11, Выборка.Дата);
				Контейнер.Раздел1_1.Вставить("П000010016321_"+н1_Раздел11, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина));
				Контейнер.Раздел1_1.Вставить("П000010016301_"+н1_Раздел11, Выборка.Сумма);
				н1_Раздел11 = н1_Раздел11+1;
				
			ИначеЕсли Выборка.МесяцОплаты = 2 Тогда
				НоваяСтрока = Контейнер.Раздел11_2_ДанныеДопСтрок.Добавить();
				НоваяСтрока.П000010016411 = Выборка.Дата;
				НоваяСтрока.П000010016421 = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина);
				НоваяСтрока.П000010016401 = Выборка.Сумма;
				
				Контейнер.Раздел1_1.Вставить("П000010016411_"+н2_Раздел11, Выборка.Дата);
				Контейнер.Раздел1_1.Вставить("П000010016421_"+н2_Раздел11, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина));
				Контейнер.Раздел1_1.Вставить("П000010016401_"+н2_Раздел11, Выборка.Сумма);
				н2_Раздел11 = н2_Раздел11+1;
				
			ИначеЕсли Выборка.МесяцОплаты = 3 Тогда
				НоваяСтрока = Контейнер.Раздел11_3_ДанныеДопСтрок.Добавить();
				НоваяСтрока.П000010016511 = Выборка.Дата;
				НоваяСтрока.П000010016521 = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина);
				НоваяСтрока.П000010016501 = Выборка.Сумма;
				
				Контейнер.Раздел1_1.Вставить("П000010016511_"+н3_Раздел11, Выборка.Дата);
				Контейнер.Раздел1_1.Вставить("П000010016521_"+н3_Раздел11, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина));
				Контейнер.Раздел1_1.Вставить("П000010016501_"+н3_Раздел11, Выборка.Сумма);
				н3_Раздел11 = н3_Раздел11+1;
				
			КонецЕсли;
		ИначеЕсли Выборка.ФССНесчастныеСлучаи Тогда
			Если Выборка.МесяцОплаты = 1 Тогда
				НоваяСтрока = Контейнер.Раздел2_7_1_ДанныеДопСтрок.Добавить();
				НоваяСтрока.П000070016104 = Выборка.Дата;
				НоваяСтрока.П000070016105 = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина);
				НоваяСтрока.П000070016101 = Выборка.Сумма;
				
				Контейнер.Раздел2_7.Вставить("П000070016104_"+н1_Раздел67, Выборка.Дата);
				Контейнер.Раздел2_7.Вставить("П000070016105_"+н1_Раздел67, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина));
				Контейнер.Раздел2_7.Вставить("П000070016101_"+н1_Раздел67, Выборка.Сумма);
				н1_Раздел67 = н1_Раздел67+1;
				
			ИначеЕсли Выборка.МесяцОплаты = 2 Тогда
				НоваяСтрока = Контейнер.Раздел2_7_2_ДанныеДопСтрок.Добавить();
				НоваяСтрока.П000070016204 = Выборка.Дата;
				НоваяСтрока.П000070016205 = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина);
				НоваяСтрока.П000070016201 = Выборка.Сумма;
				
				Контейнер.Раздел2_7.Вставить("П000070016204_"+н2_Раздел67, Выборка.Дата);
				Контейнер.Раздел2_7.Вставить("П000070016205_"+н2_Раздел67, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина));
				Контейнер.Раздел2_7.Вставить("П000070016201_"+н2_Раздел67, Выборка.Сумма);
				н2_Раздел67 = н2_Раздел67+1;
			ИначеЕсли Выборка.МесяцОплаты = 3 Тогда
				НоваяСтрока = Контейнер.Раздел2_7_3_ДанныеДопСтрок.Добавить();
				НоваяСтрока.П000070016304 = Выборка.Дата;
				НоваяСтрока.П000070016305 = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина);
				НоваяСтрока.П000070016301 = Выборка.Сумма;
				
				Контейнер.Раздел2_7.Вставить("П000070016304_"+н3_Раздел67, Выборка.Дата);
				Контейнер.Раздел2_7.Вставить("П000070016305_"+н3_Раздел67, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина));
				Контейнер.Раздел2_7.Вставить("П000070016301_"+н3_Раздел67, Выборка.Сумма);
				н3_Раздел67 = н3_Раздел67+1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = КонечныйОстатокТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел2_6, Выборка);
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел2_7, Выборка);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗначенияПоказателей_4ФСС_2016Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Организация = ПараметрыОтчета.Организация;
	ДатаКонцаПериодаОтчета = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
	НачалоТекущегоКвартала = НачалоКвартала(ДатаКонцаПериодаОтчета);
	ЭтоЮридическоеЛицо = РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	НачалоПериода = НачалоГода(ДатаКонцаПериодаОтчета);
	ОкончаниеПериода = КонецМесяца(ДатаКонцаПериодаОтчета);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода",		НачалоПериода);
	Запрос.УстановитьПараметр("НачалоТекущегоКвартала",		НачалоТекущегоКвартала);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода",		КонецДня(ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаПередачиФССВыплатыПособий", УчетСтраховыхВзносов.ДатаПередачиФССВыплатыПособий(Организация));
	Запрос.УстановитьПараметр("ДалекаяДата", 				ДобавитьМесяц(НачалоПериода, 1200));
	Запрос.УстановитьПараметр("Месяц1",						Месяц(НачалоТекущегоКвартала));
	Запрос.УстановитьПараметр("Месяц2",						Месяц(НачалоТекущегоКвартала) + 1);
	Запрос.УстановитьПараметр("Месяц3",						Месяц(НачалоТекущегоКвартала) + 2);
	Запрос.УстановитьПараметр("ЭтоЮрЛицо",					ЭтоЮридическоеЛицо);
	Запрос.УстановитьПараметр("ОрганизацияИнвалидов",		СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "ОрганизацияИнвалидов"));
	
	// ----------------------------------------------------------------------------------
	// ФОРМИРОВАНИЕ ВРЕМЕННЫХ ТАБЛИЦ
	
	// получаем временные таблицы, используя общие алгоритмы
	УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОДоходахИВзносах(НачалоПериода, ОкончаниеПериода, Организация, Запрос.МенеджерВременныхТаблиц);
	
	
	УчетСтраховыхВзносов.СформироватьТаблицуВТКадровыеДанныеФизическихЛицСПериодом(Запрос.МенеджерВременныхТаблиц, "ВТФизЛицаСОблагаемойБазой", Ложь, ДатаКонцаПериодаОтчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СУММА(СведенияОДоходах.Сумма) КАК Начислено,
	|	СУММА(СведенияОДоходах.НеОблагаетсяФСС) КАК НеОблагается,
	|	СУММА(СведенияОДоходах.СуммаПревысившаяПределФСС) КАК СуммаПревысившаяПределФСС,
	|	СУММА(СведенияОДоходах.НеОблагаетсяФСС) КАК НеОблагаетсяНС_ПЗ,
	|	СУММА(СведенияОДоходах.БазаФСС_НС) КАК БазаНС_ПЗ,
	|	0 КАК БазаФармацевта,
	|	0 КАК БазаМоряка,
	|	СУММА(ВЫБОР
	|			КОГДА (СведенияОДоходах.ВидТарифаСтраховыхВзносов = &ОрганизацияИнвалидов)
	|					И &ЭтоЮрЛицо
	|				ТОГДА СведенияОДоходах.БазаФСС_НС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК БазаИнвалидаНС_ПЗ
	|ПОМЕСТИТЬ ВТОблагаемыеБазыПоМесяцам
	|ИЗ
	|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И НЕ СведенияОДоходах.ФизическоеЛицо В
	|				(ВЫБРАТЬ
	|					ФизлицаБезБазы.ФизическоеЛицо
	|				ИЗ
	|					ВТФизлицаБезОблагаемойБазы КАК ФизлицаБезБазы)
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)
	|					И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА Расчеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ФССНачислено,
	|	0 КАК ФССДоНачислено,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)
	|					И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА Расчеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ФССУплачено,
	|	0 КАК ФССНеПринятоРасходов,
	|	0 КАК ФССВозмещеноРасходов,
	|	0 КАК ФССПроизведеноРасходов,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)
	|					И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА Расчеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ФССНесчастныеСлучаиНачислено,
	|	0 КАК ФССНесчастныеСлучаиДоНачислено,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)
	|					И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА Расчеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ФССНесчастныеСлучаиУплачено,
	|	0 КАК ФССНесчастныеСлучаиНеПринятоРасходов,
	|	0 КАК ФССНесчастныеСлучаиВозмещеноРасходов,
	|	0 КАК ФССНесчастныеСлучаиПроизведеноРасходов,
	|	НАЧАЛОПЕРИОДА(Расчеты.Период, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ВТРасчетыСФондом
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам КАК Расчеты
	|ГДЕ
	|	Расчеты.ЭтоСтраховыеВзносы
	|	И Расчеты.Организация = &Организация
	|	И Расчеты.ВидОбязательногоСтрахованияСотрудников В (ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС), ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи))
	|	И Расчеты.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(Расчеты.Период, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расчеты.СуммаОстаток,
	|	Расчеты.ЭтоРасчетыПоНачислениюУплатеВзносовВФСС
	|ПОМЕСТИТЬ ВТОстаткиНаКонец
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам.Остатки(
	|			&КонецОтчетногоПериода,
	|			Организация = &Организация
	|				И ЭтоСтраховыеВзносы
	|				И ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)) КАК Расчеты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)
	|					ТОГДА Расчеты.СуммаОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ФССНачальныйОстаток,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)
	|					ТОГДА Расчеты.СуммаОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ФССНесчастныеСлучаиНачальныйОстаток,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)
	|						И Расчеты.ЭтоРасчетыПоНачислениюУплатеВзносовВФСС
	|					ТОГДА Расчеты.СуммаОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ФССНачальныйОстатокПоВзносам
	|ПОМЕСТИТЬ ВТОстаткиНаНачало
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам.Остатки(
	|			&НачалоОтчетногоПериода,
	|			Организация = &Организация
	|				И ЭтоСтраховыеВзносы
	|				И ВидОбязательногоСтрахованияСотрудников В (ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС), ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи))) КАК Расчеты";

	Запрос.Выполнить();
	
	
	БазаДляНачисленияВзносовТекст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.Начислено), 0) КАК П000030001003,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.НеОблагается), 0) КАК П000030002003,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.СуммаПревысившаяПределФСС), 0) КАК П000030003003,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.БазаФармацевта), 0) КАК П000030006003,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.БазаМоряка), 0) КАК П000030007003,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.БазаНС_ПЗ + ДоходыПоФЛ.НеОблагаетсяНС_ПЗ), 0) КАК П000060000103,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.БазаИнвалидаНС_ПЗ), 0) КАК П000060000403,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.НеОблагаетсяНС_ПЗ), 0) КАК П000060000203,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.Начислено
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030001004,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.Начислено
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030001005,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.Начислено
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030001006,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.НеОблагается
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030002004,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.НеОблагается
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030002005,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.НеОблагается
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030002006,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.СуммаПревысившаяПределФСС
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030003004,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.СуммаПревысившаяПределФСС
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030003005,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.СуммаПревысившаяПределФСС
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030003006,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.БазаФармацевта
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030006004,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.БазаФармацевта
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030006005,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.БазаФармацевта
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030006006,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.БазаМоряка
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030007004,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.БазаМоряка
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030007005,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.БазаМоряка
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000030007006,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.БазаНС_ПЗ + ДоходыПоФЛ.НеОблагаетсяНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060000104,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.БазаНС_ПЗ + ДоходыПоФЛ.НеОблагаетсяНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060000105,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.БазаНС_ПЗ + ДоходыПоФЛ.НеОблагаетсяНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060000106,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.БазаИнвалидаНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060000404,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.БазаИнвалидаНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060000405,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.БазаИнвалидаНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060000406,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.НеОблагаетсяНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060000204,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.НеОблагаетсяНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060000205,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.НеОблагаетсяНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000060000206
	|ИЗ
	|	ВТОблагаемыеБазыПоМесяцам КАК ДоходыПоФЛ";
	
	РасчетыСФондомОстаткиТекст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РасчетыСФондом.ФССНачальныйОстаток > 0
	|			ТОГДА РасчетыСФондом.ФССНачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000010001003,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА РасчетыСФондом.ФССНачальныйОстаток < 0
	|					ТОГДА -РасчетыСФондом.ФССНачальныйОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ > ВЫБОР
	|				КОГДА РасчетыСФондом.ФССНачальныйОстатокПоВзносам < 0
	|					ТОГДА -РасчетыСФондом.ФССНачальныйОстатокПоВзносам
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетыСФондом.ФССНачальныйОстаток < 0
	|						ТОГДА -РасчетыСФондом.ФССНачальныйОстаток
	|					ИНАЧЕ 0
	|				КОНЕЦ - ВЫБОР
	|					КОГДА РасчетыСФондом.ФССНачальныйОстатокПоВзносам < 0
	|						ТОГДА -РасчетыСФондом.ФССНачальныйОстатокПоВзносам
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000010013003,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА РасчетыСФондом.ФССНачальныйОстаток < 0
	|					ТОГДА -РасчетыСФондом.ФССНачальныйОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ > ВЫБОР
	|				КОГДА РасчетыСФондом.ФССНачальныйОстатокПоВзносам < 0
	|					ТОГДА -РасчетыСФондом.ФССНачальныйОстатокПоВзносам
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетыСФондом.ФССНачальныйОстатокПоВзносам < 0
	|						ТОГДА -РасчетыСФондом.ФССНачальныйОстатокПоВзносам
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РасчетыСФондом.ФССНачальныйОстаток < 0
	|					ТОГДА -РасчетыСФондом.ФССНачальныйОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК П000010014003,
	|	ВЫБОР
	|		КОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачальныйОстаток > 0
	|			ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000070001003,
	|	ВЫБОР
	|		КОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачальныйОстаток < 0
	|			ТОГДА -РасчетыСФондом.ФССНесчастныеСлучаиНачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000070010003
	|ИЗ
	|	ВТОстаткиНаНачало КАК РасчетыСФондом";
	
	КонечныйОстатокТекст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА СУММА(Расчеты.СуммаОстаток) < 0
	|					ТОГДА -СУММА(Расчеты.СуммаОстаток)
	|				ИНАЧЕ 0
	|			КОНЕЦ > СУММА(ВЫБОР
	|					КОГДА Расчеты.СуммаОстаток < 0
	|							И Расчеты.ЭтоРасчетыПоНачислениюУплатеВзносовВФСС
	|						ТОГДА -Расчеты.СуммаОстаток
	|					ИНАЧЕ 0
	|				КОНЕЦ)
	|			ТОГДА СУММА(ВЫБОР
	|						КОГДА Расчеты.СуммаОстаток < 0
	|								И Расчеты.ЭтоРасчетыПоНачислениюУплатеВзносовВФСС
	|							ТОГДА -Расчеты.СуммаОстаток
	|						ИНАЧЕ 0
	|					КОНЕЦ)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СУММА(Расчеты.СуммаОстаток) < 0
	|					ТОГДА -СУММА(Расчеты.СуммаОстаток)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК П000010011003
	|ИЗ
	|	ВТОстаткиНаКонец КАК Расчеты";
	
	РасчетыСФондомОборотыТекст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070002001,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070002101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070002201,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070002301,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ФССНесчастныеСлучаиДоНачислено), 0) КАК П000070003003,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ФССНесчастныеСлучаиНеПринятоРасходов), 0) КАК П000070004003,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ФССНесчастныеСлучаиВозмещеноРасходов), 0) КАК П000070006003,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070011001,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070011101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070011201,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070011301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070012001,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070012101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070012201,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070012301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000010002101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0)  КАК П000010002301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0)  КАК П000010002401,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0)  КАК П000010002501,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССДоНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010003101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССДоНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0)  КАК П000010003301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССДоНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0)  КАК П000010003401,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССДоНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000010003501,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНеПринятоРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0)  КАК П000010005101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНеПринятоРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010005301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССНеПринятоРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010005401,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССНеПринятоРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010005501,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССВозмещеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010006101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССВозмещеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010006301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССВозмещеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010006401,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССВозмещеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010006501,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010015101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010015301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010015401,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010015501,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010016101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010016301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010016401,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ) , 0) КАК П000010016501,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|					ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиУплачено
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000070016001
	|ИЗ
	|	ВТРасчетыСФондом КАК РасчетыСФондом";
	
	ДокументыОплаты = 
	"ВЫБРАТЬ  Различные
	|	Расчеты.Регистратор.Дата КАК Дата,
	|	Расчеты.Регистратор.Номер КАК Номер,
	|	ВЫБОР
	|		КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФСС,
	|	ВЫБОР
	|		КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФССНесчастныеСлучаи,
	|	ВЫБОР
	|		КОГДА МЕСЯЦ(Расчеты.Период) = &Месяц1
	|			ТОГДА 1
	|		КОГДА МЕСЯЦ(Расчеты.Период) = &Месяц2
	|			ТОГДА 2
	|		КОГДА МЕСЯЦ(Расчеты.Период) = &Месяц3
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК МесяцОплаты,
	|	Расчеты.Сумма КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам КАК Расчеты
	|ГДЕ
	|	Расчеты.ЭтоСтраховыеВзносы
	|	И Расчеты.Организация = &Организация
	|	И Расчеты.ВидОбязательногоСтрахованияСотрудников В (ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС), ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи))
	|	И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Расчеты.Период МЕЖДУ &НачалоТекущегоКвартала И &КонецОтчетногоПериода";
	
	ЧисленностьРаботающихТекст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ФизЛица.ФизическоеЛицо) КАК ЧисленностьРаботников,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ФизЛица.ФизическоеЛицо.Физлицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ЧисленностьЖенщин,
	|	0 КАК ЧисленностьИнвалидов
	|ИЗ
	|	ВТФизЛицаСОблагаемойБазой КАК ФизЛица";

	ДоходыИнвалидовТекст =
	"ВЫБРАТЬ
	|	Доходы.ФизическоеЛицо,
	|	ФИОФизлиц.Наименование КАК П000310001002,
	|	"""" КАК П000310001003,
	|	"""" КАК П000310001004,
	|	СУММА(Доходы.БазаФСС - Доходы.СуммаПревысившаяПределФСС) КАК П000310001005,
	|	СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(Доходы.Период) = &Месяц1
	|				ТОГДА Доходы.БазаФСС - Доходы.СуммаПревысившаяПределФСС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000310001006,
	|	СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(Доходы.Период) = &Месяц2
	|				ТОГДА Доходы.БазаФСС - Доходы.СуммаПревысившаяПределФСС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000310001007,
	|	СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(Доходы.Период) = &Месяц3
	|				ТОГДА Доходы.БазаФСС - Доходы.СуммаПревысившаяПределФСС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000310001008
	|ИЗ
	|	ВТРасширенныеСведенияОДоходахИВзносах КАК Доходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК ФИОФизлиц
	|		ПО Доходы.ФизическоеЛицо = ФИОФизлиц.ФизическоеЛицо
	|ГДЕ
	|	Доходы.ВидТарифаСтраховыхВзносов = &ОрганизацияИнвалидов
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.ФизическоеЛицо,
	|	ФИОФизлиц.Наименование
	|
	|ИМЕЮЩИЕ
	|	СУММА(Доходы.БазаФСС - Доходы.СуммаПревысившаяПределФСС) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	П000310001002";

	// -------------------------------------------------------------------------------
	// Вывод данных в отчет
	
	// расчет численности (титульный лист)
	
	ЧисленностьИнвалидов = 0;
	Запрос.Текст = ЧисленностьРаботающихТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЧисленностьИнвалидов = Выборка.ЧисленностьИнвалидов;
		Контейнер.Титульный.ЧислРаботников = Выборка.ЧисленностьРаботников;
		Контейнер.Титульный.ЧислЖенщин = Выборка.ЧисленностьЖенщин;
	Иначе
		Контейнер.Титульный.ЧислРаботников = 0;
		Контейнер.Титульный.ЧислЖенщин = 0;
	КонецЕсли;
	
	
	// Раздел I (табл. 3), Раздел II (табл. 6)
	
	ПоказателиОтчета = Новый Структура;
	ОписаниеПоказателей_4ФСС_2016Кв1(ПоказателиОтчета);
	Контейнер.Раздел1_31_ДанныеДопСтрок.Очистить();
	Значение = Неопределено;
	Для каждого КлючИЗначение Из Контейнер.Раздел1_1 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Раздел1_1[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	Для каждого КлючИЗначение Из Контейнер.Раздел1_2 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Раздел1_2[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	Для каждого КлючИЗначение Из Контейнер.Раздел1_3 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Раздел1_3[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	Для каждого КлючИЗначение Из Контейнер.Раздел1_5 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Раздел1_5[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	Для каждого КлючИЗначение Из Контейнер.Раздел2_6 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Раздел2_6[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	
	Для каждого КлючИЗначение Из Контейнер.Раздел2_7 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Раздел2_7[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	
	Для каждого КлючИЗначение Из Контейнер.Раздел2_8_9 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Раздел2_8_9[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = БазаДляНачисленияВзносовТекст;
	ТаблицаДоходов = Запрос.Выполнить().Выгрузить();
	СтрокаДоходов = ТаблицаДоходов[0];
	
	ЗаполнитьЗначенияСвойств(Контейнер.Раздел1_3, СтрокаДоходов);
	ЗаполнитьЗначенияСвойств(Контейнер.Раздел2_6, СтрокаДоходов);
	ЗаполнитьЗначенияСвойств(Контейнер.Раздел2_7, СтрокаДоходов);
	
	// Раздел I (табл 3.1)
	
	Запрос.Текст = ДоходыИнвалидовТекст;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда // не было инвалидов совсем
		
		ВременнаяТаблица = Результат.Выгрузить();
		ЧисленностьИнвалидов = ВременнаяТаблица.Количество();  // контрольное соотношение №5 по разделу "Таблица 3.1 «Сведения, необходимые для применения плательщиками страховых взносов пониженного тарифа страховых взносов, установленного частью 2 статьи 58 Федерального закона от 24 июля 2009 г. № 212-ФЗ»"
		
		НомерСтроки = 1;
		Для каждого СтрокаДанных Из ВременнаяТаблица Цикл
			СтрокаКонтейнера = Контейнер.Раздел1_31_ДанныеДопСтрок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКонтейнера, СтрокаДанных);
			СтрокаКонтейнера.П000310001001 = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Контейнер.Раздел2_6.ЧислИнвалидов = ЧисленностьИнвалидов;
	
	// Раздел I (табл 4.3)
	
	УпрощенныйНалоговыйРежимПроизводство = СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "УпрощенныйНалоговыйРежимПроизводство");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОДоходах.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
	|	СведенияОДоходах.ВидТарифаСтраховыхВзносов.КодФСС2012 КАК Шифр
	|ИЗ
	|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И НЕ СведенияОДоходах.ФизическоеЛицо В
	|				(ВЫБРАТЬ
	|					ФизлицаБезБазы.ФизическоеЛицо
	|				ИЗ
	|					ВТФизлицаБезОблагаемойБазы КАК ФизлицаБезБазы)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	УСНПроизводство = Ложь;
	Шифр ="";
	Пока Выборка.Следующий() Цикл
		Шифр = Выборка.Шифр;
		Если Выборка.ВидТарифаСтраховыхВзносов = УпрощенныйНалоговыйРежимПроизводство Тогда
			УСНПроизводство = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Отражаем доходы по организации
	Если УСНПроизводство Тогда
		// Раздел 3.6
		Доход = 0;
		// Определяем, необходимо ли формировать доходы
		ЗапросПоДоходам = Новый Запрос;
		
		// Добавляем периода для анализа заполненности доходов
		Квартал = НачалоКвартала(НачалоПериода);
		// первый месяц
		ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(Квартал,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период ПОМЕСТИТЬ ВТПериодыКварталов";
		Квартал = НачалоКвартала(ДобавитьМесяц(Квартал,3));
		// прибавим остальные месяцы
		Пока КонецДня(Квартал) < КонецМесяца(ДатаКонцаПериодаОтчета) Цикл
			ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(Квартал,"ДФ=гггг,М,д,Ч,м,с") + ")";
			Квартал = НачалоКвартала(ДобавитьМесяц(Квартал,3));
		КонецЦикла;
		ЗапросПоДоходам.Текст = ПериодыТекст;
		
		
		ОсновнойТекстЗапросаПоДоходам = "ВЫБРАТЬ
		|	ПериодыКварталов.Период КАК Период,
		|	ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.ДоходБазаОборот, 0) КАК Сумма
		|ИЗ
		|	ВТПериодыКварталов КАК ПериодыКварталов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, Квартал, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
		|		ПО (КнигаУчетаДоходовИРасходовОбороты.Период = ПериодыКварталов.Период)";
		
		ЗапросПоДоходам.Текст =ПериодыТекст +"; "+ ОсновнойТекстЗапросаПоДоходам;
		ЗапросПоДоходам.УстановитьПараметр("Организация", Организация);
		ЗапросПоДоходам.УстановитьПараметр("НачалоПериода", НачалоПериода);
		ЗапросПоДоходам.УстановитьПараметр("КонецПериода", КонецДня(ДатаКонцаПериодаОтчета));
		ВыборкаПоДоходу = ЗапросПоДоходам.Выполнить().Выбрать();
		
		НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
		УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
		МенеджерВТДляДоходов = Новый МенеджерВременныхТаблиц;
		РегламентированнаяОтчетностьУСН.ПолучитьВТТаблицуКурсовВалютЗаПериод(МенеджерВТДляДоходов, НачалоКвартала(ДатаКонцаПериодаОтчета),КонецКвартала(ДатаКонцаПериодаОтчета), НациональнаяВалюта, УчетВалютныхОпераций);
		Пока ВыборкаПоДоходу.Следующий() Цикл
			Если ВыборкаПоДоходу.Сумма = 0 Тогда
				// Формируем доход за отчетный период
				// 
				Результат = Новый Структура;
				Результат.Вставить("ДокументФормирования", Документы.ЗаписиУСН.ПустаяСсылка());
				Результат.Вставить("ЕстьОшибки", Ложь);
				Результат.Вставить("ЕстьПредупреждения", Ложь);
				Результат.Вставить("ДополнительнаяИнформация", "");
				
				Результат.ДокументФормирования = РегламентированнаяОтчетностьУСН.ПолучитьДокументЗаписейУСНВПериодеПоВиду(
					Организация,
					КонецКвартала(ДатаКонцаПериодаОтчета),
					Перечисления.ВидыЗаписейФормированийКУДиР.ДоходыПрочие);
				
				РегламентированнаяОтчетностьУСН.ВыполнитьФормированиеПоДоходам(
					Организация,
					КонецКвартала(ДатаКонцаПериодаОтчета),
					Результат,
					МенеджерВТДляДоходов);
			КонецЕсли;
		КонецЦикла;
		
		ВыборкаПоДоходу = ЗапросПоДоходам.Выполнить().Выбрать();
		Пока ВыборкаПоДоходу.Следующий() Цикл
			Доход = Доход + ВыборкаПоДоходу.Сумма;
		КонецЦикла;
		Контейнер.Раздел1_41.П000410000103 = Доход;
		Контейнер.Раздел1_41.П000410000203 = Доход;
		
	КонецЕсли;
	
	Контейнер.Титульный.ШифрСтрах1Часть = ?(ПустаяСтрока(Шифр),"071", Шифр);
	СистемаНалогообложения = РегистрыСведений.СистемыНалогообложенияОрганизаций.ПолучитьПоследнее(КонецДня(ДатаКонцаПериодаОтчета), Новый Структура("Организация", Организация));
	
	Если Контейнер.Титульный.ШифрСтрах1Часть = "121"
		ИЛИ Контейнер.Титульный.ШифрСтрах1Часть = "151"
		ИЛИ Контейнер.Титульный.ШифрСтрах1Часть = "161" Тогда
		Контейнер.Титульный.ШифрСтрах2Часть = "01";
	ИначеЕсли Контейнер.Титульный.ШифрСтрах1Часть = "141" Тогда
		Контейнер.Титульный.ШифрСтрах2Часть = "02";
	Иначе
		Если СистемаНалогообложения.ПлательщикЕНВД И Не СистемаНалогообложения.ПлательщикУСН Тогда
			Контейнер.Титульный.ШифрСтрах2Часть = "02";
		ИначеЕсли СистемаНалогообложения.ПлательщикУСН И НЕ СистемаНалогообложения.ПлательщикЕНВД Тогда
			Контейнер.Титульный.ШифрСтрах2Часть = "01";
		Иначе
			Контейнер.Титульный.ШифрСтрах2Часть = "00";
		КонецЕсли;
	КонецЕсли;
	
	Контейнер.Титульный.ШифрСтрах3Часть = "00";
	
	// Тариф страховых взносов
	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "СтраховойТариф");
	СтраховойТариф = Неопределено;
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаКонцаПериодаОтчета, Сведения);
	ОргСведения.Свойство("СтраховойТариф", СтраховойТариф);
	
	Контейнер.Раздел2_6.П000060000503 = ?(СтраховойТариф = Неопределено, 0, СтраховойТариф);
	Контейнер.Раздел2_6.П000060000903 = Контейнер.Раздел2_6.П000060000503;
	
	// РАСЧЕТЫ ПО СРЕДСТВАМ ОБЯЗАТЕЛЬНОГО СОЦИАЛЬНОГО СТРАХОВАНИЯ 
	
	// Раздел I (табл. 1) и Раздел II (табл 7)
	
	// Заполняем по данным учета расчетов с фондом
	
	Запрос.Текст = РасчетыСФондомОстаткиТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел1_1, Выборка);
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел2_6, Выборка);
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел2_7, Выборка);
	КонецЕсли;
	
	Запрос.Текст = РасчетыСФондомОборотыТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел1_1, Выборка);
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел2_6, Выборка);
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел2_7, Выборка);
	КонецЕсли;
	
	Контейнер.Раздел11_1_ДанныеДопСтрок.Очистить();
	Контейнер.Раздел11_2_ДанныеДопСтрок.Очистить();
	Контейнер.Раздел11_3_ДанныеДопСтрок.Очистить();
	Контейнер.Раздел2_7_1_ДанныеДопСтрок.Очистить();
	Контейнер.Раздел2_7_2_ДанныеДопСтрок.Очистить();
	Контейнер.Раздел2_7_3_ДанныеДопСтрок.Очистить();
	н1_Раздел11 = 1;
	н2_Раздел11 = 1;
	н3_Раздел11 = 1;
	
	н1_Раздел67 = 1;
	н2_Раздел67 = 1;
	н3_Раздел67 = 1;
	
	Запрос.Текст = ДокументыОплаты;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ФСС Тогда
			Если Выборка.МесяцОплаты = 1 Тогда
				НоваяСтрока = Контейнер.Раздел11_1_ДанныеДопСтрок.Добавить();
				НоваяСтрока.П000010016311 = Выборка.Дата;
				НоваяСтрока.П000010016321 = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина);
				НоваяСтрока.П000010016301 = Выборка.Сумма;
				
				Контейнер.Раздел1_1.Вставить("П000010016311_"+н1_Раздел11, Выборка.Дата);
				Контейнер.Раздел1_1.Вставить("П000010016321_"+н1_Раздел11, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина));
				Контейнер.Раздел1_1.Вставить("П000010016301_"+н1_Раздел11, Выборка.Сумма);
				н1_Раздел11 = н1_Раздел11+1;
				
			ИначеЕсли Выборка.МесяцОплаты = 2 Тогда
				НоваяСтрока = Контейнер.Раздел11_2_ДанныеДопСтрок.Добавить();
				НоваяСтрока.П000010016411 = Выборка.Дата;
				НоваяСтрока.П000010016421 = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина);
				НоваяСтрока.П000010016401 = Выборка.Сумма;
				
				Контейнер.Раздел1_1.Вставить("П000010016411_"+н2_Раздел11, Выборка.Дата);
				Контейнер.Раздел1_1.Вставить("П000010016421_"+н2_Раздел11, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина));
				Контейнер.Раздел1_1.Вставить("П000010016401_"+н2_Раздел11, Выборка.Сумма);
				н2_Раздел11 = н2_Раздел11+1;
				
			ИначеЕсли Выборка.МесяцОплаты = 3 Тогда
				НоваяСтрока = Контейнер.Раздел11_3_ДанныеДопСтрок.Добавить();
				НоваяСтрока.П000010016511 = Выборка.Дата;
				НоваяСтрока.П000010016521 = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина);
				НоваяСтрока.П000010016501 = Выборка.Сумма;
				
				Контейнер.Раздел1_1.Вставить("П000010016511_"+н3_Раздел11, Выборка.Дата);
				Контейнер.Раздел1_1.Вставить("П000010016521_"+н3_Раздел11, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина));
				Контейнер.Раздел1_1.Вставить("П000010016501_"+н3_Раздел11, Выборка.Сумма);
				н3_Раздел11 = н3_Раздел11+1;
				
			КонецЕсли;
		ИначеЕсли Выборка.ФССНесчастныеСлучаи Тогда
			Если Выборка.МесяцОплаты = 1 Тогда
				НоваяСтрока = Контейнер.Раздел2_7_1_ДанныеДопСтрок.Добавить();
				НоваяСтрока.П000070016104 = Выборка.Дата;
				НоваяСтрока.П000070016105 = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина);
				НоваяСтрока.П000070016101 = Выборка.Сумма;
				
				Контейнер.Раздел2_7.Вставить("П000070016104_"+н1_Раздел67, Выборка.Дата);
				Контейнер.Раздел2_7.Вставить("П000070016105_"+н1_Раздел67, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина));
				Контейнер.Раздел2_7.Вставить("П000070016101_"+н1_Раздел67, Выборка.Сумма);
				н1_Раздел67 = н1_Раздел67+1;
				
			ИначеЕсли Выборка.МесяцОплаты = 2 Тогда
				НоваяСтрока = Контейнер.Раздел2_7_2_ДанныеДопСтрок.Добавить();
				НоваяСтрока.П000070016204 = Выборка.Дата;
				НоваяСтрока.П000070016205 = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина);
				НоваяСтрока.П000070016201 = Выборка.Сумма;
				
				Контейнер.Раздел2_7.Вставить("П000070016204_"+н2_Раздел67, Выборка.Дата);
				Контейнер.Раздел2_7.Вставить("П000070016205_"+н2_Раздел67, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина));
				Контейнер.Раздел2_7.Вставить("П000070016201_"+н2_Раздел67, Выборка.Сумма);
				н2_Раздел67 = н2_Раздел67+1;
			ИначеЕсли Выборка.МесяцОплаты = 3 Тогда
				НоваяСтрока = Контейнер.Раздел2_7_3_ДанныеДопСтрок.Добавить();
				НоваяСтрока.П000070016304 = Выборка.Дата;
				НоваяСтрока.П000070016305 = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина);
				НоваяСтрока.П000070016301 = Выборка.Сумма;
				
				Контейнер.Раздел2_7.Вставить("П000070016304_"+н3_Раздел67, Выборка.Дата);
				Контейнер.Раздел2_7.Вставить("П000070016305_"+н3_Раздел67, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, 
					Истина));
				Контейнер.Раздел2_7.Вставить("П000070016301_"+н3_Раздел67, Выборка.Сумма);
				н3_Раздел67 = н3_Раздел67+1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = КонечныйОстатокТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел2_6, Выборка);
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел2_7, Выборка);
	КонецЕсли;
	Контейнер.Раздел2_10.П000100000103 = Контейнер.Титульный.ЧислРаботников;
	
КонецПроцедуры

Процедура ЗначенияПоказателей_4ФСС_2017Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Организация = ПараметрыОтчета.Организация;
	ДатаКонцаПериодаОтчета = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
	НачалоТекущегоКвартала = НачалоКвартала(ДатаКонцаПериодаОтчета);
	ЭтоЮридическоеЛицо = РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	НачалоПериода = НачалоГода(ДатаКонцаПериодаОтчета);
	ОкончаниеПериода = КонецМесяца(ДатаКонцаПериодаОтчета);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода",		НачалоПериода);
	Запрос.УстановитьПараметр("НачалоТекущегоКвартала",		НачалоТекущегоКвартала);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода",		КонецДня(ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаПередачиФССВыплатыПособий", УчетСтраховыхВзносов.ДатаПередачиФССВыплатыПособий(Организация));
	Запрос.УстановитьПараметр("ДалекаяДата", 				ДобавитьМесяц(НачалоПериода, 1200));
	Запрос.УстановитьПараметр("Месяц1",						Месяц(НачалоТекущегоКвартала));
	Запрос.УстановитьПараметр("Месяц2",						Месяц(НачалоТекущегоКвартала) + 1);
	Запрос.УстановитьПараметр("Месяц3",						Месяц(НачалоТекущегоКвартала) + 2);
	Запрос.УстановитьПараметр("ЭтоЮрЛицо",					ЭтоЮридическоеЛицо);
	Запрос.УстановитьПараметр("ОрганизацияИнвалидов",		СсылкаНаОбъектПоИдентификатору("Справочник.ВидыТарифовСтраховыхВзносов", "ОрганизацияИнвалидов"));
	
	// ----------------------------------------------------------------------------------
	// ФОРМИРОВАНИЕ ВРЕМЕННЫХ ТАБЛИЦ
	
	// получаем временные таблицы, используя общие алгоритмы
	УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОДоходахИВзносах(НачалоПериода, ОкончаниеПериода, Организация, Запрос.МенеджерВременныхТаблиц);
	
	
	УчетСтраховыхВзносов.СформироватьТаблицуВТКадровыеДанныеФизическихЛицСПериодом(Запрос.МенеджерВременныхТаблиц, "ВТФизЛицаСОблагаемойБазой", Ложь, ДатаКонцаПериодаОтчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СУММА(СведенияОДоходах.Сумма) КАК Начислено,
	|	СУММА(СведенияОДоходах.НеОблагаетсяФСС) КАК НеОблагается,
	|	СУММА(СведенияОДоходах.СуммаПревысившаяПределФСС) КАК СуммаПревысившаяПределФСС,
	|	СУММА(СведенияОДоходах.НеОблагаетсяФСС) КАК НеОблагаетсяНС_ПЗ,
	|	СУММА(СведенияОДоходах.БазаФСС_НС) КАК БазаНС_ПЗ,
	|	0 КАК БазаФармацевта,
	|	0 КАК БазаМоряка,
	|	СУММА(ВЫБОР
	|			КОГДА (СведенияОДоходах.ВидТарифаСтраховыхВзносов = &ОрганизацияИнвалидов)
	|					И &ЭтоЮрЛицо
	|				ТОГДА СведенияОДоходах.БазаФСС_НС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК БазаИнвалидаНС_ПЗ
	|ПОМЕСТИТЬ ВТОблагаемыеБазыПоМесяцам
	|ИЗ
	|	ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И НЕ СведенияОДоходах.ФизическоеЛицо В
	|				(ВЫБРАТЬ
	|					ФизлицаБезБазы.ФизическоеЛицо
	|				ИЗ
	|					ВТФизлицаБезОблагаемойБазы КАК ФизлицаБезБазы)
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)
	|					И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА Расчеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ФССНесчастныеСлучаиНачислено,
	|	0 КАК ФССНесчастныеСлучаиДоНачислено,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)
	|					И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА Расчеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ФССНесчастныеСлучаиУплачено,
	|	0 КАК ФССНесчастныеСлучаиНеПринятоРасходов,
	|	0 КАК ФССНесчастныеСлучаиВозмещеноРасходов,
	|	0 КАК ФССНесчастныеСлучаиПроизведеноРасходов,
	|	НАЧАЛОПЕРИОДА(Расчеты.Период, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ВТРасчетыСФондом
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам КАК Расчеты
	|ГДЕ
	|	Расчеты.ЭтоСтраховыеВзносы
	|	И Расчеты.Организация = &Организация
	|	И Расчеты.ВидОбязательногоСтрахованияСотрудников =  ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)
	|	И Расчеты.Период МЕЖДУ &НачалоОтчетногоПериода И &КонецОтчетногоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(Расчеты.Период, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расчеты.СуммаОстаток,
	|	Расчеты.ЭтоРасчетыПоНачислениюУплатеВзносовВФСС,
	|	0 КАК СуммаОстатокФССНесчастныеСлучаи
	|ПОМЕСТИТЬ ВТОстаткиНаКонец
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам.Остатки(
	|			&КонецОтчетногоПериода,
	|			Организация = &Организация
	|				И ЭтоСтраховыеВзносы
	|				И ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)) КАК Расчеты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	Расчеты.ЭтоРасчетыПоНачислениюУплатеВзносовВФСС,
	|	Расчеты.СуммаОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам.Остатки(
	|			&КонецОтчетногоПериода,
	|			Организация = &Организация
	|				И ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)) КАК Расчеты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Расчеты.СуммаОстаток), 0) КАК ФССНесчастныеСлучаиНачальныйОстаток,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Расчеты.ЭтоРасчетыПоНачислениюУплатеВзносовВФСС
	|					ТОГДА Расчеты.СуммаОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ФССНесчастныеСлучаиНачальныйОстатокПоВзносам
	|ПОМЕСТИТЬ ВТОстаткиНаНачало
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам.Остатки(
	|			&НачалоОтчетногоПериода,
	|			Организация = &Организация
	|				И ЭтоСтраховыеВзносы
	|				И ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)) КАК Расчеты";

	Запрос.Выполнить();
	
	
	БазаДляНачисленияВзносовТекст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.БазаНС_ПЗ + ДоходыПоФЛ.НеОблагаетсяНС_ПЗ), 0) КАК П000010000103,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.БазаИнвалидаНС_ПЗ), 0) КАК П000010000403,
	|	ЕСТЬNULL(СУММА(ДоходыПоФЛ.НеОблагаетсяНС_ПЗ), 0) КАК П000010000203,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.БазаНС_ПЗ + ДоходыПоФЛ.НеОблагаетсяНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000010000104,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.БазаНС_ПЗ + ДоходыПоФЛ.НеОблагаетсяНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000010000105,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.БазаНС_ПЗ + ДоходыПоФЛ.НеОблагаетсяНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000010000106,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.БазаИнвалидаНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000010000404,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.БазаИнвалидаНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000010000405,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.БазаИнвалидаНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000010000406,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц1
	|					ТОГДА ДоходыПоФЛ.НеОблагаетсяНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000010000204,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц2
	|					ТОГДА ДоходыПоФЛ.НеОблагаетсяНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000010000205,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(ДоходыПоФЛ.Период) = &Месяц3
	|					ТОГДА ДоходыПоФЛ.НеОблагаетсяНС_ПЗ
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000010000206
	|ИЗ
	|	ВТОблагаемыеБазыПоМесяцам КАК ДоходыПоФЛ";
	
	РасчетыСФондомОстаткиТекст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачальныйОстаток > 0
	|			ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000020001003,
	|	ВЫБОР
	|		КОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачальныйОстаток < 0
	|			ТОГДА -РасчетыСФондом.ФССНесчастныеСлучаиНачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000020014003
	|ИЗ
	|	ВТОстаткиНаНачало КАК РасчетыСФондом";
	
	РасчетыСФондомОборотыТекст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000020002001,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000020002101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000020002201,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиНачислено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000020002301,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ФССНесчастныеСлучаиДоНачислено), 0) КАК П000020003003,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ФССНесчастныеСлучаиНеПринятоРасходов), 0) КАК П000020004003,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ФССНесчастныеСлучаиВозмещеноРасходов), 0) КАК П000020006003,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000020015001,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000020015101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000020015201,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиПроизведеноРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000020015301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000020016101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000020016201,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|				ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиУплачено
	|			ИНАЧЕ 0
	|		КОНЕЦ), 0) КАК П000070012301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(РасчетыСФондом.Период) < &Месяц1
	|					ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиУплачено
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000020016001
	|ИЗ
	|	ВТРасчетыСФондом КАК РасчетыСФондом";
	
	ДокументыОплаты = 
	"ВЫБРАТЬ
	|	Расчеты.Регистратор.Дата КАК Дата,
	|	Расчеты.Регистратор.Номер КАК Номер,
	|	ИСТИНА КАК ФССНесчастныеСлучаи,
	|	ВЫБОР
	|		КОГДА МЕСЯЦ(Расчеты.Период) = &Месяц1
	|			ТОГДА 1
	|		КОГДА МЕСЯЦ(Расчеты.Период) = &Месяц2
	|			ТОГДА 2
	|		КОГДА МЕСЯЦ(Расчеты.Период) = &Месяц3
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК МесяцОплаты,
	|	СУММА(Расчеты.Сумма) КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам КАК Расчеты
	|ГДЕ
	|	Расчеты.ЭтоСтраховыеВзносы
	|	И Расчеты.Организация = &Организация
	|	И Расчеты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)
	|	И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Расчеты.Период МЕЖДУ &НачалоТекущегоКвартала И &КонецОтчетногоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Регистратор,
	|	Расчеты.Период,
	|	Расчеты.Регистратор.Дата,
	|	Расчеты.Регистратор.Номер";
	
	ЧисленностьРаботающихТекст =
	"ВЫБРАТЬ 
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ФизЛица.ФизическоеЛицо) КАК ЧисленностьРаботников,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ФизЛица.ФизическоеЛицо.Физлицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ЧисленностьЖенщин,
	|	0 КАК ЧисленностьИнвалидов
	|ИЗ
	|	ВТФизЛицаСОблагаемойБазой КАК ФизЛица";
	
	
	// -------------------------------------------------------------------------------
	// Вывод данных в отчет
	
	// расчет численности (титульный лист)
	
	ЧисленностьИнвалидов = 0;
	Запрос.Текст = ЧисленностьРаботающихТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЧисленностьИнвалидов = Выборка.ЧисленностьИнвалидов;
		Контейнер.Титульный.ЧислРаботников = Выборка.ЧисленностьРаботников;
	Иначе
		Контейнер.Титульный.ЧислРаботников = 0;
		Контейнер.Титульный.ЧислЖенщин = 0;
	КонецЕсли;
	Контейнер.Титульный.ЧислИнвалидов = ЧисленностьИнвалидов;
	//Контейнер.Таблица2.Очистить();
	Контейнер.Таблица2_1_ДанныеДопСтрок.Очистить();
	Контейнер.Таблица2_2_ДанныеДопСтрок.Очистить();
	Контейнер.Таблица2_3_ДанныеДопСтрок.Очистить();
	
	ПоказателиОтчета = Новый Структура;
	ОписаниеПоказателей_4ФСС_2017Кв1(ПоказателиОтчета, ПараметрыОтчета);
	
	Значение = Неопределено;
	Для каждого КлючИЗначение Из Контейнер.Таблица1 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Таблица1[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	
	Для каждого КлючИЗначение Из Контейнер.Таблица2 Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			Контейнер.Таблица2[КлючИЗначение.Ключ] = 0
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = БазаДляНачисленияВзносовТекст;
	ТаблицаДоходов = Запрос.Выполнить().Выгрузить();
	СтрокаДоходов = ТаблицаДоходов[0];
	ЗаполнитьЗначенияСвойств(Контейнер.Таблица1, СтрокаДоходов);
	
	// Таблица 2
	// Заполняем по данным учета расчетов с фондом
	
	Запрос.Текст = РасчетыСФондомОстаткиТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Таблица2, Выборка);
	КонецЕсли;
	
	Запрос.Текст = РасчетыСФондомОборотыТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Таблица2, Выборка);
	КонецЕсли;
	
	н1_Раздел11 = 1;
	н2_Раздел11 = 1;
	н3_Раздел11 = 1;
	
	н1_Раздел67 = 1;
	н2_Раздел67 = 1;
	н3_Раздел67 = 1;
	
	Запрос.Текст = ДокументыОплаты;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.МесяцОплаты = 1 Тогда
			НоваяСтрока = Контейнер.Таблица2_1_ДанныеДопСтрок.Добавить();
			НоваяСтрока.П000020016104 = Выборка.Дата;
			НоваяСтрока.П000020016105 = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
				Выборка.Номер,
				Истина, 
				Истина);
			НоваяСтрока.П000020016101 = Выборка.Сумма;
			
			
		ИначеЕсли Выборка.МесяцОплаты = 2 Тогда
			НоваяСтрока = Контейнер.Таблица2_2_ДанныеДопСтрок.Добавить();
			НоваяСтрока.П000020016204 = Выборка.Дата;
			НоваяСтрока.П000020016205 = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
				Выборка.Номер,
				Истина, 
				Истина);
			НоваяСтрока.П000020016201 = Выборка.Сумма;
			
		ИначеЕсли Выборка.МесяцОплаты = 3 Тогда
			НоваяСтрока = Контейнер.Таблица2_3_ДанныеДопСтрок.Добавить();
			НоваяСтрока.П000020016304 = Выборка.Дата;
			НоваяСтрока.П000020016305 = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
				Выборка.Номер,
				Истина, 
				Истина);
			НоваяСтрока.П000020016301 = Выборка.Сумма;
			
		КонецЕсли;
	КонецЦикла;
	
	Контейнер.Таблица5.П000050000103 = Контейнер.Титульный.ЧислРаботников;
	
КонецПроцедуры

Процедура ЗаполнитьРегламентированныйОтчетАлкоПриложение12ФормаОтчета2012Кв3(ПараметрыОтчета, Контейнер) Экспорт

	СписокСкладов = РегламентированнаяОтчетностьУСН.ПолучитьТорговыеТочкиРозничнойПродажиАлкоголяПоОрганизации(ПараметрыОтчета.Организация);
	
	ДокументСсылкаАлкоОтчет					= ПараметрыОтчета.ДокументСсылка;
	ВспомогательныйАдрес 					= ПараметрыОтчета.ВспомогательныйАдрес;
	
	// индикация начала работы фоновой операции
	РегламентированнаяОтчетностьАЛКО.СообщитьПроцентВыполнения( , 0, 100);

	СтруктураИдГруппИменРегистровСведений 	= ПараметрыОтчета.СтруктураИдГруппИменРегистровСведений;
	
	// Определим объект Отчета
	ИмяФормыОбъекта							= ПараметрыОтчета.ИмяФормыОбъекта;
	ОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормыОбъекта);
	
	СтруктураИдГруппБуферИтогов 			= ПараметрыОтчета.СтруктураИдГруппБуферИтогов;
	СтруктураИтогов = Новый Структура;
	КолВБлокеЗаписей = 3000;
	
	МаксИндексСтраницы						= Контейнер.МаксИндексСтраницы;
	МаксИндексСтраницы = МаксИндексСтраницы + 1;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСкладов", РегламентированнаяОтчетностьУСН.ПолучитьТорговыеТочкиРозничнойПродажиАлкоголяПоОрганизации(ПараметрыОтчета.Организация));
	Запрос.УстановитьПараметр("ДатаНач", 		НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКон", 		Новый Граница(КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаОкончания", 		КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ВозвратОтПокупателя", 	Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя);
	Запрос.УстановитьПараметр("Приход", 	ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("Расход", 	ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ВозвратПоставщику", 	Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику);
	Запрос.УстановитьПараметр("ПродажаПокупателю", 	Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю);
	
	//Заполнение Раздел 1
	
	// Получаем данные по алкогольной продукции.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА Номенклатура.Производитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Номенклатура.ПроизводительИмпортерАлкогольнойПродукции
	|		ИНАЧЕ Номенклатура.Производитель
	|	КОНЕЦ КАК Производитель,
	|	Номенклатура.ВидАлкогольнойПродукции КАК П000010000301,
	|	Номенклатура.ВидАлкогольнойПродукции.Код КАК П000010000302,
	|	ВЫБОР
	|		КОГДА Номенклатура.Производитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(Номенклатура.ПроизводительИмпортерАлкогольнойПродукции.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ ВЫРАЗИТЬ(Номенклатура.Производитель.НаименованиеПолное КАК СТРОКА(200))
	|	КОНЕЦ КАК П000010000303,
	|	ВЫБОР
	|		КОГДА Номенклатура.Производитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Номенклатура.ПроизводительИмпортерАлкогольнойПродукции.ИНН
	|		ИНАЧЕ Номенклатура.Производитель.ИНН
	|	КОНЕЦ КАК П000010000304,
	|	ВЫБОР
	|		КОГДА Номенклатура.Производитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Номенклатура.ПроизводительИмпортерАлкогольнойПродукции.КПП
	|		ИНАЧЕ Номенклатура.Производитель.КПП
	|	КОНЕЦ КАК П000010000305
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.АлкогольнаяПродукция
	|	И Номенклатура.ВидАлкогольнойПродукции.ВидЛицензии = ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.Пиво)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сводный.СсылкаПодразделение КАК СсылкаПодразделение,
	|	Сводный.П000010000301 КАК П000010000301,
	|	Сводный.П000010000302 КАК П000010000302,
	|	Сводный.П000010000303 КАК П000010000303,
	|	Сводный.П000010000304 КАК П000010000304,
	|	Сводный.П000010000305 КАК П000010000305,
	|	МАКСИМУМ(Сводный.ПроизводительИмпортер) КАК ПроизводительИмпортер,
	|	СУММА(Сводный.П000010000306) КАК П000010000306,
	|	СУММА(Сводный.П000010000307) КАК П000010000307,
	|	СУММА(Сводный.П000010000308) КАК П000010000308,
	|	СУММА(Сводный.П000010000311) КАК П000010000311,
	|	СУММА(Сводный.П000010000312) КАК П000010000312,
	|	СУММА(Сводный.П000010000314) КАК П000010000314,
	|	СУММА(Сводный.П000010000315) КАК П000010000315,
	|	СУММА(Сводный.П000010000316) КАК П000010000316
	|ИЗ
	|	(ВЫБРАТЬ
	|		АлкогольнаяПродукция.П000010000301 КАК П000010000301,
	|		АлкогольнаяПродукция.П000010000302 КАК П000010000302,
	|		АлкогольнаяПродукция.П000010000303 КАК П000010000303,
	|		АлкогольнаяПродукция.П000010000304 КАК П000010000304,
	|		АлкогольнаяПродукция.П000010000305 КАК П000010000305,
	|		ДвиженияТоваров.СтруктурнаяЕдиница КАК СсылкаПодразделение,
	|		АлкогольнаяПродукция.Производитель КАК ПроизводительИмпортер,
	|		0 КАК П000010000306,
	|		ВЫБОР
	|			КОГДА ПриходнаяНакладная.Ссылка ЕСТЬ НЕ NULL 
	|					И ПриходнаяНакладная.Контрагент = АлкогольнаяПродукция.Производитель
	|					И ПриходнаяНакладная.ВидОперации <> &ВозвратОтПокупателя
	|				ТОГДА ЕСТЬNULL(ДвиженияТоваров.Номенклатура.ОбъемДАЛ, 0) * ДвиженияТоваров.КоличествоПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000307,
	|		ВЫБОР
	|			КОГДА ПриходнаяНакладная.Ссылка ЕСТЬ НЕ NULL 
	|					И ПриходнаяНакладная.Контрагент <> АлкогольнаяПродукция.Производитель
	|					И ПриходнаяНакладная.ВидОперации <> &ВозвратОтПокупателя
	|				ТОГДА ЕСТЬNULL(ДвиженияТоваров.Номенклатура.ОбъемДАЛ, 0) * ДвиженияТоваров.КоличествоПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000308,
	|		ВЫБОР
	|			КОГДА ПриходнаяНакладная.Ссылка ЕСТЬ НЕ NULL 
	|					И ПриходнаяНакладная.ВидОперации = &ВозвратОтПокупателя
	|				ТОГДА -ЕСТЬNULL(ДвиженияТоваров.Номенклатура.ОбъемДАЛ, 0) * ДвиженияТоваров.КоличествоРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000311,
	|		ВЫБОР
	|			КОГДА ПриходнаяНакладная.Ссылка ЕСТЬ NULL
	|					И РасходнаяНакладная.ВидОперации <> &ВозвратПоставщику
	|				ТОГДА ЕСТЬNULL(ДвиженияТоваров.Номенклатура.ОбъемДАЛ, 0) * ДвиженияТоваров.КоличествоПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000312,
	|		ВЫБОР
	|			КОГДА ПриходнаяНакладная.Ссылка ЕСТЬ NULL
	|					И РасходнаяНакладная.ВидОперации <> &ВозвратПоставщику
	|				ТОГДА ЕСТЬNULL(ДвиженияТоваров.Номенклатура.ОбъемДАЛ, 0) * ДвиженияТоваров.КоличествоПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000312ПоОрганизации,
	|		ВЫБОР
	|			КОГДА ДвиженияТоваров.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|					ИЛИ РасходнаяНакладная.Ссылка ЕСТЬ НЕ NULL 
	|						И РасходнаяНакладная.ВидОперации = &ПродажаПокупателю
	|				ТОГДА ЕСТЬNULL(ДвиженияТоваров.Номенклатура.ОбъемДАЛ, 0) * ДвиженияТоваров.КоличествоРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000314,
	|		ВЫБОР
	|			КОГДА РасходнаяНакладная.Ссылка ЕСТЬ НЕ NULL 
	|					И РасходнаяНакладная.ВидОперации = &ВозвратПоставщику
	|				ТОГДА -ЕСТЬNULL(ДвиженияТоваров.Номенклатура.ОбъемДАЛ, 0) * ДвиженияТоваров.КоличествоПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000316,
	|		ВЫБОР
	|			КОГДА НЕ ДвиженияТоваров.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|					И РасходнаяНакладная.ВидОперации <> &ВозвратПоставщику
	|					И РасходнаяНакладная.ВидОперации <> &ПродажаПокупателю
	|					И ПриходнаяНакладная.ВидОперации <> &ВозвратОтПокупателя
	|				ТОГДА ЕСТЬNULL(ДвиженияТоваров.Номенклатура.ОбъемДАЛ, 0) * ДвиженияТоваров.КоличествоРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000315,
	|		ВЫБОР
	|			КОГДА НЕ ДвиженияТоваров.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|					И РасходнаяНакладная.ВидОперации <> &ВозвратПоставщику
	|					И РасходнаяНакладная.ВидОперации <> &ПродажаПокупателю
	|					И ПриходнаяНакладная.ВидОперации <> &ВозвратОтПокупателя
	|				ТОГДА ЕСТЬNULL(ДвиженияТоваров.Номенклатура.ОбъемДАЛ, 0) * ДвиженияТоваров.КоличествоРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000315ПоОрганизации
	|	ИЗ
	|		АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Обороты(&ДатаНач, &ДатаКон, Регистратор, СтруктурнаяЕдиница В (&МассивСкладов)) КАК ДвиженияТоваров
	|			ПО АлкогольнаяПродукция.Номенклатура = ДвиженияТоваров.Номенклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|			ПО (ПриходнаяНакладная.Ссылка = ДвиженияТоваров.Регистратор)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|			ПО (РасходнаяНакладная.Ссылка = ДвиженияТоваров.Регистратор)
	|	ГДЕ
	|		(ДвиженияТоваров.КоличествоПриход <> 0
	|				ИЛИ ДвиженияТоваров.КоличествоРасход <> 0)
	|		И НЕ(ТИПЗНАЧЕНИЯ(ДвиженияТоваров.Регистратор) = ТИП(Документ.ЗаказПокупателя)
	|						И ДвиженияТоваров.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу)
	|					ИЛИ ТИПЗНАЧЕНИЯ(ДвиженияТоваров.Регистратор) = ТИП(Документ.РезервированиеЗапасов))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АлкогольнаяПродукция.П000010000301,
	|		АлкогольнаяПродукция.П000010000302,
	|		АлкогольнаяПродукция.П000010000303,
	|		АлкогольнаяПродукция.П000010000304,
	|		АлкогольнаяПродукция.П000010000305,
	|		ДвиженияТоваров.СтруктурнаяЕдиница,
	|		АлкогольнаяПродукция.Производитель,
	|		ЕСТЬNULL(ДвиженияТоваров.Номенклатура.ОбъемДАЛ, 0) * ДвиженияТоваров.КоличествоОстаток,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
	|					&ДатаНач,
	|					СтруктурнаяЕдиница В (&МассивСкладов)
	|						И Номенклатура В
	|							(ВЫБРАТЬ
	|								АлкогольнаяПродукция.Номенклатура
	|							ИЗ
	|								АлкогольнаяПродукция)) КАК ДвиженияТоваров
	|			ПО АлкогольнаяПродукция.Номенклатура = ДвиженияТоваров.Номенклатура
	|	ГДЕ
	|		ДвиженияТоваров.КоличествоОстаток <> 0
	|	
	|) КАК Сводный
	|
	|СГРУППИРОВАТЬ ПО
	|	Сводный.СсылкаПодразделение,
	|	Сводный.П000010000301,
	|	Сводный.П000010000302,
	|	Сводный.П000010000303,
	|	Сводный.П000010000304,
	|	Сводный.П000010000305
	|ИТОГИ ПО
	|	СсылкаПодразделение";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	ВыборкаПоПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Раздел_ИмяРабочегоРегистра 	= СтруктураИдГруппИменРегистровСведений["Раздел1"];
	
	Раздел                          = Контейнер.Раздел1;
	Раздел_ТЗ_Хранилище             = Контейнер.Раздел1_ТЗ_Хранилище;
	Раздел_СервисРегистров          = Контейнер.Раздел1_СервисРегистров;
	Раздел_СервисРегистровУдаленные = Контейнер.Раздел1_СервисРегистровУдаленные;
	
	// Удаляем все страницы текущего отчета
	Для Каждого СтрокаСервисРегистровГруппы Из Раздел_СервисРегистров Цикл
		
		НоваяСтрокаСервисРегистровГруппыУдаленные = Раздел_СервисРегистровУдаленные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСервисРегистровГруппыУдаленные, СтрокаСервисРегистровГруппы);
		
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", НоваяСтрокаСервисРегистровГруппыУдаленные.КоличествоСтрок);		
		// Индекс строки 0 используем для обозначения операций над страницами в целом.
		// В норме индекс строки не меньше 1.	
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, Раздел_ИмяРабочегоРегистра,
					НоваяСтрокаСервисРегистровГруппыУдаленные.ИндексСтраницыРегистра, 0, "УдалениеСтраницы", Ресурсы);
									
	КонецЦикла;
				
	Раздел_СервисРегистров.Очистить();
	ИндексСтраницы = -1;
	ИдГруппы = "П0000100003";
	
	СписокБуфферИтоговГруппы = СтруктураИдГруппБуферИтогов[ИдГруппы];
	МассивРезультатов = Новый Массив;
	
	Пока ВыборкаПоПодразделениям.Следующий() Цикл
		
		ИндексСтраницы = ИндексСтраницы + 1;
		
		РазделТекущий = Раздел.Добавить();
		Раздел_СервисРегистровТекущий = Раздел_СервисРегистров.Добавить();
		
		МаксИндексСтраницы = МаксИндексСтраницы + 1;
		
		Если РазделТекущий.Данные.Количество() = 0 Тогда
			РазделТекущий.Данные.Добавить(Новый Структура);
		КонецЕсли;
		СтраницаРаздел = РазделТекущий.Данные[0].Значение;

		ПредставлениеПодразделения = СведенияОПодразделенииXML(ВыборкаПоПодразделениям.СсылкаПодразделение, ПараметрыОтчета.Организация.ИНН);
		Если РазделТекущий.ДополнительныеДанные.Количество() = 0 Тогда
			РазделТекущий.ДополнительныеДанные.Добавить(Новый Структура); 
		КонецЕсли;
		РазделТекущий.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", ПредставлениеПодразделения);

		Раздел_ДанныеДопСтрокТекущий = Раздел_ТЗ_Хранилище.Скопировать();

		МассивРезультатов.Добавить(Новый СписокЗначений);
		Для Каждого ЭлементСписка Из СписокБуфферИтоговГруппы Цикл
		    // в массиве будут храниться итоги по страницам по данному полю - представлению
			МассивРезультатов[ИндексСтраницы].Добавить(0, ЭлементСписка.Представление);	
		КонецЦикла;
	
		КоличествоТекСтрок = 0;

		КоличествоВТекущемБлокеЗаписей = 0; // Номер строки
		Выборка = ВыборкаПоПодразделениям.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КоличествоВТекущемБлокеЗаписей = КоличествоВТекущемБлокеЗаписей + 1;
			
			НоваяСтрокаДопСтрок = Раздел_ДанныеДопСтрокТекущий.Добавить();		
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДопСтрок, Выборка);
			ОбъектОтчета.Расчет(ИдГруппы, НоваяСтрокаДопСтрок); // расчет по строке
			
			// Суммируем итоги.
			Для Каждого КонтролируемоеПоле Из МассивРезультатов[ИндексСтраницы] Цикл
				
				ИмяКонтролируемогоПоля = КонтролируемоеПоле.Представление;
				
				НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = ?(НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = Неопределено, 
																0, НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля]);
				
				КонтролируемоеПоле.Значение = КонтролируемоеПоле.Значение + НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля];

			КонецЦикла;
		
			// Каждые 3000 строк пишем в регистр.
			Если КоличествоВТекущемБлокеЗаписей >= КолВБлокеЗаписей Тогда
				
				КоличествоВТекущемБлокеЗаписей = 0;
				РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет, ИмяФормыОбъекта, Раздел_ИмяРабочегоРегистра, 
											МаксИндексСтраницы, Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
			    			
			    Раздел_ДанныеДопСтрокТекущий.Очистить();

			КонецЕсли;
			
		КонецЦикла;
		
		// Заносим в регистр сведений, если остались незаписанные строки
		Если Раздел_ДанныеДопСтрокТекущий.Количество() > 0 Тогда
		    			
			РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет, ИмяФормыОбъекта, Раздел_ИмяРабочегоРегистра, 
											МаксИндексСтраницы, Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
						
		    Раздел_ДанныеДопСтрокТекущий.Очистить();
		
		КонецЕсли; 
				
		// Занесем в регистр Журнал	
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрок);	
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, Раздел_ИмяРабочегоРегистра,	
												МаксИндексСтраницы, 0, "Автозаполнение", Ресурсы);
										
		// занесем в СервисРегистров данные по количеству строк и номеру страницы регистра
		Раздел_СервисРегистровТекущий.КоличествоСтрок = КоличествоТекСтрок;
		Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра = МаксИндексСтраницы;
		Раздел_СервисРегистровТекущий.КолвоСтрокПомНаУдаление = 0;
	    		
	КонецЦикла;
	СтруктураИтогов.Вставить(ИдГруппы, МассивРезультатов);

	
	//Заполнение Раздел 2
	
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000010000301 КАК П000020000301,
	|	АлкогольнаяПродукция.П000010000302 КАК П000020000302,
	|	АлкогольнаяПродукция.П000010000303 КАК П000020000303,
	|	АлкогольнаяПродукция.П000010000304 КАК П000020000304,
	|	АлкогольнаяПродукция.П000010000305 КАК П000020000305,
	|	ВЫБОР
	|		КОГДА ДвиженияТоваров.Регистратор ССЫЛКА Документ.ПриходнаяНакладная
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(Контрагенты.НаименованиеПолное, &ПустаяСтрока) КАК СТРОКА(200))
	|		ИНАЧЕ &ПустаяСтрока
	|	КОНЕЦ КАК П000020000306,
	|	ВЫБОР
	|		КОГДА ДвиженияТоваров.Регистратор ССЫЛКА Документ.ПриходнаяНакладная
	|			ТОГДА ЕСТЬNULL(Контрагенты.ИНН, &ПустаяСтрока)
	|		ИНАЧЕ &ПустаяСтрока
	|	КОНЕЦ КАК П000020000307,
	|	ВЫБОР
	|		КОГДА ДвиженияТоваров.Регистратор ССЫЛКА Документ.ПриходнаяНакладная
	|			ТОГДА ЕСТЬNULL(Контрагенты.КПП, &ПустаяСтрока)
	|		ИНАЧЕ &ПустаяСтрока
	|	КОНЕЦ КАК П000020000308,
	|	ВЫБОР
	|		КОГДА ДвиженияТоваров.Регистратор ССЫЛКА Документ.ПриходнаяНакладная
	|			ТОГДА ПриходнаяНакладная.ДатаВходящегоДокумента
	|		ИНАЧЕ &ПустаяДата
	|	КОНЕЦ КАК П000020000309,
	|	ВЫБОР
	|		КОГДА ДвиженияТоваров.Регистратор ССЫЛКА Документ.ПриходнаяНакладная
	|			ТОГДА ПриходнаяНакладная.НомерВходящегоДокумента
	|		ИНАЧЕ &ПустаяСтрока
	|	КОНЕЦ КАК П000020000310,
	|	""""  КАК П000020000311,
	|	Максимум(АлкогольнаяПродукция.Производитель) КАК ПроизводительИмпортер,
	|	ДвиженияТоваров.СтруктурнаяЕдиница КАК Подразделение,
	|	ДвиженияТоваров.СтруктурнаяЕдиница КАК СсылкаПодразделение,
	|	ДвиженияТоваров.Организация КАК Организация,
	|	СУММА(ЕСТЬNULL(ДвиженияТоваров.Номенклатура.ОбъемДАЛ, 0) * ДвиженияТоваров.КоличествоПриход) КАК П000020000312
	|ИЗ
	|	АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Обороты(&ДатаНач, &ДатаКон, Регистратор, СтруктурнаяЕдиница В (&МассивСкладов)) КАК ДвиженияТоваров
	|		ПО АлкогольнаяПродукция.Номенклатура = ДвиженияТоваров.Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|		ПО (ПриходнаяНакладная.Ссылка = ДвиженияТоваров.Регистратор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (Контрагенты.Ссылка = ПриходнаяНакладная.Контрагент)
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000010000301,
	|	АлкогольнаяПродукция.П000010000302,
	|	АлкогольнаяПродукция.П000010000303,
	|	АлкогольнаяПродукция.П000010000304,
	|	АлкогольнаяПродукция.П000010000305,
	|	ВЫБОР
	|		КОГДА ДвиженияТоваров.Регистратор ССЫЛКА Документ.ПриходнаяНакладная
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(Контрагенты.НаименованиеПолное, &ПустаяСтрока) КАК СТРОКА(200))
	|		ИНАЧЕ &ПустаяСтрока
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДвиженияТоваров.Регистратор ССЫЛКА Документ.ПриходнаяНакладная
	|			ТОГДА ПриходнаяНакладная.НомерВходящегоДокумента
	|		ИНАЧЕ &ПустаяСтрока
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДвиженияТоваров.Регистратор ССЫЛКА Документ.ПриходнаяНакладная
	|			ТОГДА ПриходнаяНакладная.ДатаВходящегоДокумента
	|		ИНАЧЕ &ПустаяДата
	|	КОНЕЦ,
	|	ДвиженияТоваров.СтруктурнаяЕдиница,
	|	ДвиженияТоваров.Организация,
	|	ВЫБОР
	|		КОГДА ДвиженияТоваров.Регистратор ССЫЛКА Документ.ПриходнаяНакладная
	|			ТОГДА ЕСТЬNULL(Контрагенты.ИНН, &ПустаяСтрока)
	|		ИНАЧЕ &ПустаяСтрока
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДвиженияТоваров.Регистратор ССЫЛКА Документ.ПриходнаяНакладная
	|			ТОГДА ЕСТЬNULL(Контрагенты.КПП, &ПустаяСтрока)
	|		ИНАЧЕ &ПустаяСтрока
	|	КОНЕЦ
	|
	|ИТОГИ ПО
	|	СсылкаПодразделение";
	
	Результат = Запрос.Выполнить();
	ВыборкаПоПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	Раздел_ИмяРабочегоРегистра 	= СтруктураИдГруппИменРегистровСведений["Раздел2"];
		
	Раздел	 							= Контейнер.Раздел2;
	Раздел_ТЗ_Хранилище     			= Контейнер.Раздел2_ТЗ_Хранилище;
	Раздел_СервисРегистров        		= Контейнер.Раздел2_СервисРегистров;
	Раздел_СервисРегистровУдаленные  	= Контейнер.Раздел2_СервисРегистровУдаленные;
	
	// Удаляем все страницы текущего отчета
	Для Каждого СтрокаСервисРегистровГруппы Из Раздел_СервисРегистров Цикл

		НоваяСтрокаСервисРегистровГруппыУдаленные = Раздел_СервисРегистровУдаленные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСервисРегистровГруппыУдаленные, СтрокаСервисРегистровГруппы);
		
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", НоваяСтрокаСервисРегистровГруппыУдаленные.КоличествоСтрок);		
		// Индекс строки 0 используем для обозначения операций над страницами в целом.
		// В норме индекс строки не меньше 1.	
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, Раздел_ИмяРабочегоРегистра,
					НоваяСтрокаСервисРегистровГруппыУдаленные.ИндексСтраницыРегистра, 0, "УдалениеСтраницы", Ресурсы);
									
	КонецЦикла;
	
	Раздел_СервисРегистров.Очистить();
	
	ИндексСтраницы = -1;
	ИдГруппы = "П0000200003";

	
	СписокБуфферИтоговГруппы = СтруктураИдГруппБуферИтогов[ИдГруппы];
	
	МассивРезультатов = Новый Массив;
	
	Пока ВыборкаПоПодразделениям.Следующий() Цикл
		
		ИндексСтраницы = ИндексСтраницы + 1;
		
		РазделТекущий = Раздел.Добавить();
		Раздел_СервисРегистровТекущий = Раздел_СервисРегистров.Добавить();
		
		МаксИндексСтраницы = МаксИндексСтраницы + 1;
		
		Если РазделТекущий.Данные.Количество() = 0 Тогда
			РазделТекущий.Данные.Добавить(Новый Структура);
		КонецЕсли;
		СтраницаРаздел = РазделТекущий.Данные[0].Значение;

		ПредставлениеПодразделения = СведенияОПодразделенииXML(ВыборкаПоПодразделениям.СсылкаПодразделение, ПараметрыОтчета.Организация.ИНН);
		Если РазделТекущий.ДополнительныеДанные.Количество() = 0 Тогда
			РазделТекущий.ДополнительныеДанные.Добавить(Новый Структура); 
		КонецЕсли;
		РазделТекущий.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", ПредставлениеПодразделения);
		
		Раздел_ДанныеДопСтрокТекущий = Раздел_ТЗ_Хранилище.Скопировать();

		МассивРезультатов.Добавить(Новый СписокЗначений);
		Для Каждого ЭлементСписка Из СписокБуфферИтоговГруппы Цикл
		    // в массиве будут храниться итоги по страницам по данному полю - представлению
			МассивРезультатов[ИндексСтраницы].Добавить(0, ЭлементСписка.Представление);	

		КонецЦикла;
		
		КоличествоТекСтрок = 0;
				
		КоличествоВТекущемБлокеЗаписей = 0; // Номер строки
		Выборка = ВыборкаПоПодразделениям.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КоличествоВТекущемБлокеЗаписей = КоличествоВТекущемБлокеЗаписей + 1;
		    
			НоваяСтрокаДопСтрок = Раздел_ДанныеДопСтрокТекущий.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДопСтрок, Выборка);
			
			// Расчета по строке в разделе 2 нет.
			// Суммируем итоги.
			Для Каждого КонтролируемоеПоле Из МассивРезультатов[ИндексСтраницы] Цикл
																				
				ИмяКонтролируемогоПоля = КонтролируемоеПоле.Представление;
				
				НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = ?(НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = Неопределено, 
																0, НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля]);
				
				КонтролируемоеПоле.Значение = КонтролируемоеПоле.Значение + НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля];
				
			КонецЦикла;		

			// Каждые 3000 строк пишем в регистр.
			Если КоличествоВТекущемБлокеЗаписей >= КолВБлокеЗаписей Тогда
							    
				КоличествоВТекущемБлокеЗаписей = 0;
				РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет, ИмяФормыОбъекта, Раздел_ИмяРабочегоРегистра, 
											МаксИндексСтраницы, Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
							
			    Раздел_ДанныеДопСтрокТекущий.Очистить();
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Заносим в регистр сведений, если остались незаписанные строки
		Если Раздел_ДанныеДопСтрокТекущий.Количество() > 0 Тогда
		    			
			РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет, ИмяФормыОбъекта, Раздел_ИмяРабочегоРегистра, 
											МаксИндексСтраницы, Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
						
		    Раздел_ДанныеДопСтрокТекущий.Очистить();
		
		КонецЕсли; 
		
		// Занесем в регистр Журнал	
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрок);	
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, Раздел_ИмяРабочегоРегистра,	
												МаксИндексСтраницы, 0, "Автозаполнение", Ресурсы);
										
		// занесем в СервисРегистров данные по количеству строк и номеру страницы регистра
		Раздел_СервисРегистровТекущий.КоличествоСтрок = КоличествоТекСтрок;
		Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра = МаксИндексСтраницы;
		Раздел_СервисРегистровТекущий.КолвоСтрокПомНаУдаление = 0;
		
	КонецЦикла;
	СтруктураИтогов.Вставить(ИдГруппы, МассивРезультатов);
	
	Контейнер.МаксИндексСтраницы = МаксИндексСтраницы;
	Контейнер.Вставить("СтруктураИтогов", СтруктураИтогов);
	УстановитьПривилегированныйРежим(Ложь);
	
	// Помещаем во временное хранилище Контейнер для механизма длительных операций.
	АдресХранилища = Неопределено;
	Если ПараметрыОтчета.Свойство("АдресХранилища", АдресХранилища) Тогда	
		ПоместитьВоВременноеХранилище(Контейнер, АдресХранилища);	
	КонецЕсли;
	
КонецПроцедуры

Функция СведенияОПодразделенииXML(Подразделение, ИНН)
	
	СтруктураСведенияОбОП = РегламентированнаяОтчетностьАЛКО.ПолучитьПустуюСтруктуруСведенийОбОП();
	    
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		
		Возврат СтруктураСведенияОбОП;
		
	ИначеЕсли ТипЗнч(Подразделение) = Тип("СправочникСсылка.Организации") Тогда
		
		СтруктураСведенияОбОП.Наименование = Подразделение.Наименование;
		СтруктураСведенияОбОП.КПП = Подразделение.КПП;
		
	ИначеЕсли ТипЗнч(Подразделение) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		
		СтруктураСведенияОбОП.Наименование = Подразделение.Наименование;
		СтруктураСведенияОбОП.КПП = "";
		
	Иначе
		
		Возврат СтруктураСведенияОбОП;
		
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;	
	МассивОбъектов.Добавить(Подразделение);
	
	ТаблицаКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов);
		
	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	
	Если ТаблицаКонтактнойИнформации.Количество() > 1 Тогда
											  
		СтрокаТаблицаКонтактнойИнформации = ТаблицаКонтактнойИнформации.Найти(ВидКонтактнойИнформации);
		Если НЕ СтрокаТаблицаКонтактнойИнформации = Неопределено Тогда
			СтрокаТаблицаКонтактнойИнформации = ТаблицаКонтактнойИнформации[0];
		КонецЕсли;
		
	ИначеЕсли ТаблицаКонтактнойИнформации.Количество() = 1 Тогда
		СтрокаТаблицаКонтактнойИнформации = ТаблицаКонтактнойИнформации[0];
	Иначе
		СтрокаТаблицаКонтактнойИнформации = Неопределено;
	КонецЕсли;
	
	Если НЕ СтрокаТаблицаКонтактнойИнформации = Неопределено Тогда	
		Если Не ЗначениеЗаполнено(СтрокаТаблицаКонтактнойИнформации.ЗначенияПолей) Тогда
		    СтрокаТаблицаКонтактнойИнформации = Неопределено;		
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаТаблицаКонтактнойИнформации = Неопределено Тогда
	    Возврат СтруктураСведенияОбОП;
	КонецЕсли; 
	
	СтрокаXML = СтрокаТаблицаКонтактнойИнформации.ЗначенияПолей;
	АдресОрганизации = РегламентированнаяОтчетностьАЛКО.ПолучитьСтруктуруАдресаИзСтандартногоПредставленияИлиXML(СтрокаXML);
	ЗаполнитьЗначенияСвойств(СтруктураСведенияОбОП, АдресОрганизации);
	
	Возврат СтруктураСведенияОбОП;
	
КонецФункции

// Возвращает ссылку на объект по полному имени метаданных и заданному идентификатору
// Объекты, которые предполагают идентификацию должны содержать реквизит "ИдентификаторОбъекта"
// Если объекта с заданным идентификатором нет, возвращает пустую ссылку соответствующего типа
Функция СсылкаНаОбъектПоИдентификатору(ПолноеИмяОбъекта, ИдентификаторОбъекта) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Объекты.Ссылка КАК Ссылка
	|ИЗ
	|	#ПолноеИмяОбъекта КАК Объекты
	|ГДЕ
	|	Объекты.ИдентификаторОбъекта = &ИдентификаторОбъекта");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	Запрос.УстановитьПараметр("ИдентификаторОбъекта", ИдентификаторОбъекта);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта).ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Возвращает новый объект по полному имени метаданных и заданному идентификатору
// Вызывается при создании новых объектов с идентификатором вместо 
// вызова <МенеджерОбъекта>.НовыйЭлемент и т.п.
// Объекты, которые предполагают идентификацию должны содержать реквизит "ИдентификаторОбъекта"
Функция ОбъектСИдентификатором(ПолноеИмяОбъекта, ИдентификаторОбъекта) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта);
	ВидОбъекта = ОбщегоНазначения.ВидОбъектаПоСсылке(МенеджерОбъекта.ПустаяСсылка());
	Если ВРег(ВидОбъекта) = ВРег("Справочник") ИЛИ ВидОбъекта = ВРег("ПланВидовХарактеристик") Тогда
		Объект = МенеджерОбъекта.СоздатьЭлемент();
	ИначеЕсли ВРег(ВидОбъекта) = ВРег("Документ") Тогда
		Объект = МенеджерОбъекта.СоздатьДокумент();
	ИначеЕсли ВРег(ВидОбъекта) = ВРег("БизнесПроцесс") Тогда
		Объект = МенеджерОбъекта.СоздатьБизнесПроцесс();
	ИначеЕсли ВРег(ВидОбъекта) = ВРег("ПланСчетов") Тогда
		Объект = МенеджерОбъекта.СоздатьСчет();
	ИначеЕсли ВРег(ВидОбъекта) = ВРег("ПланВидовРасчета") Тогда
		Объект = МенеджерОбъекта.СоздатьВидРасчета();
	ИначеЕсли ВРег(ВидОбъекта) = ВРег("Задача") Тогда
		Объект = МенеджерОбъекта.СоздатьЗадачу();
	ИначеЕсли ВРег(ВидОбъекта) = ВРег("ПланОбмена") Тогда
		Объект = МенеджерОбъекта.СоздатьУзел();
	КонецЕсли;
	Объект.ИдентификаторОбъекта = ИдентификаторОбъекта;
	Объект.ДополнительныеСвойства.Вставить("ЗаписьУдалениеОбъектаСИдентификатором", Истина);
	
	Возврат Объект;
	
КонецФункции

// Функция возвращает для формы РСВ-1 пустую структуру с ключами:
//   "Описание", "ТабличныйДокумент", "Идентификатор".
//
Функция ПустаяСтруктураДляРазделовФормыРСВ_1() Экспорт
	
	ПустаяСтруктура = Новый Структура;
	
	ПустаяСтруктура.Вставить("Описание");
	ПустаяСтруктура.Вставить("ТабличныйДокумент");
	ПустаяСтруктура.Вставить("Идентификатор");
	
	Возврат ПустаяСтруктура;
	
КонецФункции

// Функция возвращает для формы РСВ-1 структуру с ключами:
//   "СтраницыРаздела", "ПолучатьСтруктуруРаздела", "ПолучатьТабличныеДокументыРаздела".
//
Функция ОписаниеЗапрашиваемыхДанныхРазделаРСВ_1() Экспорт
	
	СтруктураОписание = Новый Структура;
	
	СтруктураОписание.Вставить("СтраницыРаздела",                   Новый Массив);
	СтруктураОписание.Вставить("ПолучатьСтруктуруРаздела",          Истина);
	СтруктураОписание.Вставить("ПолучатьТабличныеДокументыРаздела", Истина);
	
	Возврат СтруктураОписание;
	
КонецФункции

#Область ПолучениеПредставленияУведомления
// Процедура используется для переопределения представления документа УведомлениеОСпецрежимахНалогообложения
// В случае, если такое переопределение произошло, необходимо установить флаг СтандартнаяОбработка в Ложь
// Параметры аналогичны событию ОбработкаПолученияПолейПредставления в модуле менеджера документа УведомлениеОСпецрежимахНалогообложения
Процедура ОбработкаПолученияПолейПредставления_УведомлениеОСпецрежимахНалогообложения(Поля, СтандартнаяОбработка) Экспорт
КонецПроцедуры

// Процедура используется для переопределения представления документа УведомлениеОСпецрежимахНалогообложения
// В случае, если такое переопределение произошло, необходимо установить флаг СтандартнаяОбработка в Ложь
// Параметры аналогичны событию ОбработкаПолученияПредставления в модуле менеджера документа УведомлениеОСпецрежимахНалогообложения
Процедура ОбработкаПолученияПредставления_УведомлениеОСпецрежимахНалогообложения(Данные, Представление, СтандартнаяОбработка) Экспорт
КонецПроцедуры
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет таблицу действующими льготами по кадастровым номерам замельных участков.
// Параметры:
//   ТаблицаЗемельныхУчастков - пустая таблица земельных участков с колонками:
//     * КадастровыйНомер - Строка - кадастровый номер земельного участка.
//     * ПроцентУменьшенияСуммыНалога - Число - значение льготы в виде уменьшения суммы налога.
//     * СниженнаяНалоговаяСтавка - Число - значение льготы в виде понижения налоговой ставки.
//   ОрганизацияВладелец - СправочникСсылка.Организации - ссылка на элемент справочника Организации.
//   ДатаСреза - Дата - дата, на момент которой определяются льготы.
//
// Пример:
//
//  Запрос = Новый Запрос;
//  Запрос.Текст = "ВЫБРАТЬ
//                 |	РегистрацияЗемельныхУчастковСрезПоследних.КадастровыйНомер КАК КадастровыйНомер,
//                 |	РегистрацияЗемельныхУчастковСрезПоследних.ПроцентУменьшенияСуммыНалога КАК ПроцентУменьшенияСуммыНалога,
//                 |	РегистрацияЗемельныхУчастковСрезПоследних.СниженнаяНалоговаяСтавка КАК СниженнаяНалоговаяСтавка
//                 |ИЗ
//                 |	РегистрСведений.РегистрацияЗемельныхУчастков.СрезПоследних(&ДатаСреза, Организация = &Организация) КАК РегистрацияЗемельныхУчастковСрезПоследних";
//  Запрос.УстановитьПараметр("Организация", ОрганизацияВладелец);
//  Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
//
//  ТаблицаЗемельныхУчастков = Запрос.Выполнить().Выгрузить();
//  ТаблицаЗемельныхУчастков.Индексы.Добавить("КадастровыйНомер");
//
// Пример:
//
//  Запрос = Новый Запрос;
//  Запрос.Текст = "ВЫБРАТЬ
//                 |	СведенияКадастровогоУчетаСрезПоследних.КадастровыйНомер КАК КадастровыйНомер,
//                 |	РегистрацияЗемельныхУчастковСрезПоследних.ПроцентУменьшенияСуммыНалога КАК ПроцентУменьшенияСуммыНалога,
//                 |	РегистрацияЗемельныхУчастковСрезПоследних.СниженнаяНалоговаяСтавка КАК СниженнаяНалоговаяСтавка
//                 |ИЗ
//                 |	РегистрСведений.СведенияКадастровогоУчета.СрезПоследних(&ДатаСреза, Учреждение = &Организация) КАК СведенияКадастровогоУчетаСрезПоследних
//                 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацияЗемельныхУчастков.СрезПоследних(&ДатаСреза, Организация = &Организация) КАК РегистрацияЗемельныхУчастковСрезПоследних
//                 |		ПО СведенияКадастровогоУчетаСрезПоследних.ОсновноеСредство = РегистрацияЗемельныхУчастковСрезПоследних.ОсновноеСредство
//                 |			И СведенияКадастровогоУчетаСрезПоследних.Учреждение = РегистрацияЗемельныхУчастковСрезПоследних.Организация";
//  Запрос.УстановитьПараметр("Организация", ОрганизацияВладелец);
//  Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
//
//  ТаблицаЗемельныхУчастков = Запрос.Выполнить().Выгрузить();
//  ТаблицаЗемельныхУчастков.Индексы.Добавить("КадастровыйНомер");
//
Процедура ПолучитьЛьготыПоКадастровымНомерам(ТаблицаЗемельныхУчастков, ОрганизацияВладелец, ДатаСреза) Экспорт
	
КонецПроцедуры

// Заполняет контейнер данными бухгалтерской отчетности и помещает его во временное хранилище.
Процедура ПолучитьПоказателиАвтозаполненияБухгалтерскойОтчетности(ПараметрыОтчета, Контейнер) Экспорт
	
КонецПроцедуры

Функция АдресВXML(КонтактнаяИнформация, ВидАдреса)
	
	Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса);
	
	Результат = КонтактнаяИнформация.НайтиСтроки(Данные);
	
	Если Результат.Количество() > 0 Тогда
		Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(Результат[0].ЗначенияПолей, Результат[0].Представление, ВидАдреса);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция АдресВJSON(КонтактнаяИнформация, ВидАдреса)
	
	Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса);
	
	Результат = КонтактнаяИнформация.НайтиСтроки(Данные);
	
	Если Результат.Количество() > 0 Тогда
		Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(Результат[0].Значение, ВидАдреса);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


Функция НовоеПустоеДерево()
	
	ПустоеДерево = Новый ДеревоЗначений;
	ПустоеДерево.Колонки.Добавить("Данные");
	ПустоеДерево.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	Возврат ПустоеДерево
	
КонецФункции

Процедура ОчиститьПоляСтруктурыПоказателей(ПоказателиОтчета, СтруктураПолей)

	Значение = Неопределено;
	
	Для каждого КлючИЗначение Из СтруктураПолей Цикл
		Если ПоказателиОтчета.Свойство(КлючИЗначение.Ключ, Значение) Тогда
			СтруктураПолей[КлючИЗначение.Ключ] = ?(ТипЗнч(СтруктураПолей[КлючИЗначение.Ключ])= Тип("Строка"), "", 0)
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция УдалитьПоляРасшифровкиИзЗапроса(ТекстЗапроса, МассивПолей, ИмяТаблицы = "СведенияОДоходах")
	
	Для каждого ПолеРасшифровки Из МассивПолей Цикл
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,ИмяТаблицы + "." + ПолеРасшифровки,"Неопределено");
	КонецЦикла;
	
	Возврат ТекстЗапроса
	
КонецФункции


Процедура ВставитьЗначениеДопСтроки(ДанныеДопСтрок, КлючПоказателя, Значение)
	
	Перем ТаблицаПоказателя;
	
	СоставКлюча = СтрРазделить(КлючПоказателя, "_");
	Если СоставКлюча.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = СоставКлюча[0];
	ИмяТаблицы = Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - 2);
	
	ДанныеДопСтрок.Свойство(ИмяТаблицы, ТаблицаПоказателя);
	Если ТаблицаПоказателя = Неопределено Тогда
		ТаблицаПоказателя = Новый ТаблицаЗначений;
		ТаблицаПоказателя.Колонки.Добавить(ИмяКолонки);
	КонецЕсли;
	
	ТаблицаПоказателя.Очистить();
	НоваяСтрока = ТаблицаПоказателя.Добавить();
	НоваяСтрока[ИмяКолонки] = Значение;
	
	ДанныеДопСтрок.Вставить(ИмяТаблицы, ТаблицаПоказателя);
	
КонецПроцедуры

// Процедура возращает код тарифа или размер тарифа страховых взносов в процентах по коду категории и отчетному году.
//
// Параметры:
//  КодКатегории - Строка - код из приложения № 8 Приказ ФНС России от 10.10.2016 N ММВ-7-11/551@
//                          "Об утверждении формы расчета по страховым взносам, порядка его заполнения,
//                          а также формата представления расчета по страховым взносам в электронной форме".
//  ОтчетныйГод - Число - четырехзначное число, соответствующее отчетному году.
//  КодИлиРазмерТарифа  - Строка, Число, Неопределено - код тарифа("Строка"), размер тарифа ("Число"),
//                                      "Неопределено" - в случае, если соответствие коду категории не найдено.
//  ВернутьРазмерТарифа - Булево - если "Истина", то возвращается размер тарифа в процентах, иначе - код тарифа.
//
// Пример реализации:
//  ОтчетныйПериод = Дата(ОтчетныйГод, 1, 1);
//  КатегорияЗастрахованногоЛица = Перечисления.КатегорииЗастрахованныхЛицДляПФР[КодКатегории];
//  
//  Если ВернутьРазмерТарифа Тогда
//  	
//  	ЗначенияТарифов = 
//  		ПерсонифицированныйУчет.ТарифыПоКатегориям(ОтчетныйПериод).Получить(КатегорияЗастрахованногоЛица);
//  	Если ЗначенияТарифов = Неопределено Тогда
//  		КодИлиРазмерТарифа = Неопределено;
//  	Иначе
//  		КодИлиРазмерТарифа = ЗначенияТарифов.ПФРСтраховая;
//  	КонецЕсли;
//  	
//  Иначе
//  	
//  	Запрос = Новый Запрос;
//  	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
//  	Запрос.УстановитьПараметр("ОтчетныйГод", ОтчетныйГод);
//  	Запрос.УстановитьПараметр("КатегорияЗастрахованногоЛица", КатегорияЗастрахованногоЛица);
//  	
//  	ПерсонифицированныйУчет.СформироватьВТСоответствиеТарифаИВидаЗЛКатегории(
//  		Запрос.МенеджерВременныхТаблиц, ОтчетныйГод);
//  	УчетСтраховыхВзносов.СоздатьВТКодыВидовТарифаСтраховыхВзносов(
//  		ОтчетныйПериод, ОтчетныйПериод, Запрос.МенеджерВременныхТаблиц);
//  	
//  	ТекстЗапроса =
//  		"ВЫБРАТЬ
//  		|	СоответствиеТарифаИВидаЗЛКатегории.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
//  		|	МИНИМУМ(СоответствиеТарифаИВидаЗЛКатегории.ВидТарифаСтраховыхВзносов) КАК ВидТарифаСтраховыхВзносов
//  		|ПОМЕСТИТЬ ВТТарифыПоКатегориям
//  		|ИЗ
//  		|	ВТСоответствиеТарифаИВидаЗЛКатегории КАК СоответствиеТарифаИВидаЗЛКатегории
//  		|ГДЕ
//  		|	&ОтчетныйГод МЕЖДУ СоответствиеТарифаИВидаЗЛКатегории.ГодС И СоответствиеТарифаИВидаЗЛКатегории.ГодПо
//  		|
//  		|СГРУППИРОВАТЬ ПО
//  		|	СоответствиеТарифаИВидаЗЛКатегории.КатегорияЗастрахованныхЛиц
//  		|;
//  		|
//  		|////////////////////////////////////////////////////////////////////////////////
//  		|ВЫБРАТЬ
//  		|	СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
//  		|	КодыВидовТарифаСтраховыхВзносов.ИмяПоля КАК КодТарифа
//  		|ИЗ
//  		|	ВТТарифыПоКатегориям КАК СоответствиеТарифаКатегории
//  		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодыВидовТарифаСтраховыхВзносов КАК КодыВидовТарифаСтраховыхВзносов
//  		|		ПО СоответствиеТарифаКатегории.ВидТарифаСтраховыхВзносов =
//  		|			КодыВидовТарифаСтраховыхВзносов.ВидТарифаСтраховыхВзносов
//  		|			И (&ОтчетныйГод = КодыВидовТарифаСтраховыхВзносов.РасчетныйПериод)
//  		|			И (&КатегорияЗастрахованногоЛица = СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц) ";
//  	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ИмяПоля", ?(ОтчетныйГод < 2017, "КодПФР", "КодФНС"));
//  	
//  	КодИлиРазмерТарифа = Неопределено;
//  	
//  	Выборка = Запрос.Выполнить().Выбрать();
//  	Пока Выборка.Следующий() Цикл
//  		Если ЗначениеЗаполнено(Выборка.КатегорияЗастрахованныхЛиц) Тогда
//  			КодИлиРазмерТарифа = Выборка.КодТарифа;
//  			Прервать;
//  		КонецЕсли;
//  	КонецЦикла;
//  	
//  КонецЕсли;
//
Процедура ПолучитьКодИлиРазмерТарифаПоКодуКатегории(КодКатегории,
													ОтчетныйГод,
													КодИлиРазмерТарифа,
													ВернутьРазмерТарифа) Экспорт
КонецПроцедуры

Функция ДоступнаОтправкаРегламентированногоОтчета() Экспорт
	Возврат НЕ ОбщегоНазначенияКлиентСервер.ЭтоМобильныйКлиент() ИЛИ ОбщегоНазначенияПовтИсп.РазделениеВключено();
КонецФункции

#КонецОбласти


#Область ФильтрацияИзбранного

// Заполняется таблица избранного по правилам, определяемым в самом потребителе.
//
// Параметры:
// ПараметрыОтбора - структура, содержащая значения:
//   Организация - СправочникСсылка.Организации - ссылка на элемент справочника Организации.
//   РанееСозданныеОтчеты - пустая таблица избранного с колонками:
//     * Наименование - Строка - наименование отчета.
//     * ПолноеИмя    - Строка - имя объекта отчета.
//     * Ссылка       - ДокументСсылка.РегламентированныйОтчет или иной документ, который приравнен к отчетам.
//     * ЭтоГруппа    - Булево.
//
Процедура ЗаполнитьИзбранноеДоступнымиОтчетами(ПараметрыОтбора) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОтчетностиПоАлкогольнойПродукции

// Возвращает в параметре "СтрокаИмениОбъекта" имя объекта, 
// соответствующего "РегистрСведений.СведенияОбАлкогольнойПродукции" в БП.
// Если такого объекта нет - пустая строка.
//
// Параметры:
//  СтрокаИмениОбъекта - Строка - имя объекта, соответствующего "РегистрСведений.СведенияОбАлкогольнойПродукции" в БП. 
//
// Пример реализации:
//  СтрокаИмениОбъекта = "РегистрСведений.СведенияОбАлкогольнойПродукции";
//
Процедура СтрокаРегистрСведенийСведенияОбАлкогольнойПродукции(СтрокаИмениОбъекта) Экспорт
	СтрокаИмениОбъекта = "";
КонецПроцедуры

// Возвращает в параметре "СтрокаИмениОбъекта" имя объекта,
// соответствующего "Перечисление.ВидыЛицензийНаПродажуАлкоголя.Пиво" в БП.
// Если такого объекта нет - пустая строка.
//
// Параметры:
//	СтрокаИмениОбъекта - Строка - имя объекта, соответствующего "Перечисление.ВидыЛицензийНаПродажуАлкоголя.Пиво" в БП.
//
// Пример реализации:
//  СтрокаИмениОбъекта = "Перечисление.ВидыЛицензийНаПродажуАлкоголя.Пиво";
//
Процедура СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво(СтрокаИмениОбъекта) Экспорт
	СтрокаИмениОбъекта = "Перечисление.ВидыЛицензийАлкогольнойПродукции.Пиво";
КонецПроцедуры

// Возвращает в параметре "СтрокаИмениОбъекта" имя объекта,
// соответствующего "РегистрСведений.ЛицензииПоставщиковАлкогольнойПродукции" в БП.
// Если такого объекта нет - пустая строка.
//
// Параметры:
//	СтрокаИмениОбъекта - Строка - имя объекта, соответствующего "РегистрСведений.ЛицензииПоставщиковАлкогольнойПродукции" в БП.
//
// Пример реализации:
//  СтрокаИмениОбъекта = "РегистрСведений.ЛицензииПоставщиковАлкогольнойПродукции";
//
Процедура СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции(СтрокаИмениОбъекта) Экспорт
	СтрокаИмениОбъекта = "Справочник.ЛицензииПоставщиковАлкогольнойПродукции";
КонецПроцедуры

#КонецОбласти

#Область Используется1СОтчетность

// Процедура возвращает признак использования отправки регламентированной отчетности.
//
// Параметры:
//  ПризнакИспользования - Булево - признак использования отправки регламентированной отчетности.
//                         Истина - отправка регл. отчетности выполняется в стандартном режиме
//                                  (при подключенном сервисе "1С-Отчетность");
//                         Ложь   - отправка регл. отчетности выполняется через DataTransfer БТС.
// Пример реализации:
//
//  ПризнакИспользования = РегламентированнаяОтчетностьБП.Используется1СОтчетность();
//
//
Процедура ПолучитьПризнакИспользования1СОтчетности(ПризнакИспользования) Экспорт
	
	ПризнакИспользования = Истина;
	
КонецПроцедуры

// Процедура возвращает признак отправки объекта РО без использования "1С-Отчетность", состояние (если отправлялся).
//
// Параметры:
//  ОбъектРеглОтчетности - Документ  - Документ регламентированного отчета.
//  ОбъектОтправлялся    - Булево    - признак использования отправки объекта регламентированной отчетности.
//                         Истина    - отправка РО выполнялась без использования "1С-Отчетность" (через DataTransfer БТС);
//                         Ложь      - отправка РО не выполнялась или выполнялась в стандартном режиме.
//  Состояние - Строка, Неопределено - Содержит имя значения перечисления состояния отправленного объекта РО.
// 
//  Пример реализации:
//
//  	ОбъектОтправлялся = Ложь;
//  	
//  	Запрос = Новый Запрос();
//  	Запрос.Параметры.Вставить("Документ", ОбъектРеглОтчетности);
//  	
//  	Запрос.Текст = "ВЫБРАТЬ
//  	|	ДокументыИнтеграцииСБанком.Состояние КАК Состояние
//  	|ИЗ
//  	|	РегистрСведений.ДокументыИнтеграцииСБанком КАК ДокументыИнтеграцииСБанком
//  	|ГДЕ
//  	|	ДокументыИнтеграцииСБанком.Документ = &Документ";
//  	
//  	Выборка = Запрос.Выполнить().Выбрать();
//  	Если Выборка.Следующий() Тогда
//  		
//  		ОбъектОтправлялся = Истина;
//  		
//  		Если ЗначениеЗаполнено(Выборка.Состояние) Тогда
//  			Состояние = ОбщегоНазначения.ИмяЗначенияПеречисления(Выборка.Состояние);
//  		Иначе
//  			Состояние = "";
//  		КонецЕсли;
//  		
//  	КонецЕсли;
//
Процедура ПолучитьПризнакОбъектРеглОтчетностиОтправлялсяБезИспользования1СОтчетности(ОбъектРеглОтчетности, ОбъектОтправлялся, Состояние) Экспорт
	
КонецПроцедуры

// Процедура возвращает результат выполнения фонового задания для получения данных баннера состояния интеграции с банком.
//
//  Пример реализации:
//
//  	ПараметрыПроцедуры = Новый Структура;
//  	
//  	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
//  	ПараметрыВыполнения.ОжидатьЗавершение = 0;
//  	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка состояния интеграции с банками.'");
//  	
//  	Результат = ДлительныеОперации.ВыполнитьВФоне(
//  		"РегистрыСведений.ДокументыИнтеграцииСБанком.ДанныеБаннераИнтеграцииСБанкомВФоне",
//  		ПараметрыПроцедуры,
//  		ПараметрыВыполнения);
//
Процедура ПолучитьСостояниеИнтеграцииСБанкомВФоне(УникальныйИдентификатор, Результат) Экспорт
	
КонецПроцедуры

// Показывает баннер по предварительно полученным данным баннера.
//
// Параметры:
//  Форма            - УправляемаяФорма - Форма "1С-Отчетность".
//                     Форма должна иметь группу ГруппаБаннерСостоянияОтправки с 2 элементами: БаннерСостоянияОтправкиТекст и ДекорацияБаннерСостоянияОтправкиКартинка.
//                     Также форма должна иметь реквизиты формы ИнтервалПроверкиСостоянияИнтеграцииСБанком (Число) и ХешДанныхБаннера (Число).
//  ДанныеБаннера    - Структура - Структура с данными баннера.
//                     См. РегистрыСведений.ДокументыИнтеграцииСБанком.ДанныеБаннераИнтеграцииСБанкомДляПомощников.
//  Пример реализации:
//
//  	ИнтеграцияСБанкамиФормы.ПоказатьБаннерСостоянияОтправки(ЭтотОбъект, ДанныеБаннера);
//
Процедура ПоказатьБаннерСостоянияОтправки(ЭтотОбъект, ДанныеБаннера) Экспорт
	
КонецПроцедуры

// Процедура возвращает данные интеграции для баннера в регламентированных отчетах.
//
// Параметры:
//  СсылкаНаОтчет - ДокументСсылка.РегламентированныйОтчет - Ссылка на регламентированный отчет.
//  ДанныеБаннера - Структура - Текст баннера, картинка и т.д.
//                  См. РегистрыСведений.ДокументыИнтеграцииСБанком.ДанныеБаннераИнтеграцииСБанкомДляПомощников.
//  Пример реализации:
//
//  	СостоянияИнтеграцииДокументов = РегистрыСведений.ДокументыИнтеграцииСБанком.СостоянияИнтеграцииДокументов(
//  		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкаНаОтчет));
//  		
//  	Если СостоянияИнтеграцииДокументов <> Неопределено 
//  		И ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена() Тогда
//  		
//  		ДанныеБаннера = РегистрыСведений.ДокументыИнтеграцииСБанком.ДанныеБаннераИнтеграцииСБанкомДляПомощников(
//  			СостоянияИнтеграцииДокументов);
//  	КонецЕсли;
//
Процедура ПолучитьДанныеБаннераИнтеграцииСБанком(СсылкаНаОтчет, ДанныеБаннера) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область РасширенныйФункционал

// Дополняет функционал обработчика "ПриСозданииНаСервере" формы списка справочника "Регламентированные отчеты",
// здесь можно инициализировать переменные, расширять возможности интерфейса.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма списка справочника "Регламентированные отчеты".
//
// Пример реализации:
//
//  ОтчетыВходяшиеВРасширенныйФункционал = Новый СписокЗначений;
//  ПолучитьСписокОтчетовИУведомленийВходяшихВРасширенныйФункционал(ОтчетыВходяшиеВРасширенныйФункционал);
//  
//  Для Каждого ЭлементСписка Из ОтчетыВходяшиеВРасширенныйФункционал Цикл
//  	Если ТипЗнч(ЭлементСписка.Значение) = Тип("Строка") Тогда
//  		
//  		Форма.Ограничения.Добавить(ЭлементСписка.Представление);
//  		
//  	КонецЕсли;
//  КонецЦикла;
//
Процедура СправочникРегламентированныеОтчеты_ПриСозданииНаСервере(Форма) Экспорт
КонецПроцедуры

// Процедура удаляет из исходного дерева отчеты, которые отключатся функциональной опцией "Расширенный функционал".
//
// Параметры:
//  ДеревоОтчетов - Дерево значений - Содержит исходное дерево используемых в конфигурации регламентированных отчетов.
//
// Пример реализации:
//  РасширенныйФункционалФО = ПолучитьФункциональнуюОпцию("РасширенныйФункционал");
//
//  Если НЕ РасширенныйФункционалФО Тогда // удаляем отчеты входящие в расширенный функционал
//  	
//  	ОтчетыВходяшиеВРасширенныйФункционал = Новый СписокЗначений;
//  	ПолучитьСписокОтчетовИУведомленийВходяшихВРасширенныйФункционал(ОтчетыВходяшиеВРасширенныйФункционал);
//  	
//  	Для Каждого ЭлементСписка Из ОтчетыВходяшиеВРасширенныйФункционал Цикл
//  		Если СтрНачинаетсяС(ЭлементСписка.Значение, "РегламентированныйОтчет") Тогда
//  			
//  			НаименованиеОтчета = ЭлементСписка.Представление;
//  			
//  			УдаляемыеОтчеты = ДеревоОтчетов.Строки.НайтиСтроки(
//  				Новый Структура("Наименование,ЭтоГруппа", НаименованиеОтчета, Ложь), Истина);
//  				
//  			Для Каждого ЭлементОтчет Из УдаляемыеОтчеты Цикл
//  				РодительЭлемента = ЭлементОтчет.Родитель;
//  				Если РодительЭлемента = Неопределено Тогда
//  					РодительЭлемента = ЭлементОтчет.Владелец();
//  				КонецЕсли;
//  				
//  				КоличествоЭлементовВДеревеОтчетов = КоличествоЭлементовВДеревеОтчетов - 1;
//  				
//  				РодительЭлемента.Строки.Удалить(ЭлементОтчет);
//  			КонецЦикла;
//  			
//  		КонецЕсли;
//  	КонецЦикла;
//  	
//  	ВсеГруппыОтчетов = ДеревоОтчетов.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа", Истина), Истина);
//  	
//  	КоличествоГрупп = ВсеГруппыОтчетов.Количество();
//  	Для НомГруппы = 1 По КоличествоГрупп Цикл // просматриваем группы в обратном порядке
//  		
//  		ГруппаОтчетов = ВсеГруппыОтчетов[КоличествоГрупп - НомГруппы];
//  		Если ГруппаОтчетов.Строки.Количество() = 0 Тогда
//  			РодительГруппы = ГруппаОтчетов.Родитель;
//  			Если РодительГруппы = Неопределено Тогда
//  				РодительГруппы = ГруппаОтчетов.Владелец();
//  			КонецЕсли;
//  			
//  			РодительГруппы.Строки.Удалить(ГруппаОтчетов);
//  		КонецЕсли;
//  		
//  	КонецЦикла;
//  	
//  КонецЕсли;
//
Процедура УдалитьОтчетыВходяшиеВРасширенныйФункционал(ДеревоОтчетов, КоличествоЭлементовВДеревеОтчетов) Экспорт
КонецПроцедуры

// Процедура возвращает в параметре список регламентированных отчетов и регламентированных уведомлений, входящих в расширенный функционал,
// который определяется функциональной опцией "Расширенный функционал".
//
// Параметры:
//  СписокОтчетовИУведомлений - СписокЗначений - Список регламентированных отчетов и регламентированных уведомлений:
//   Значение      - источник регламентированного отчета или вид уведомления,
//   Представление - синоним основной формы регламентированного отчета или синоним объекта метаданных регламентированного уведомления.
//
// Пример реализации:
//  Если ТипЗнч(СписокОтчетовИУведомлений) <> Тип("СписокЗначений") Тогда
//  	СписокОтчетовИУведомлений = Новый СписокЗначений;
//  КонецЕсли;
//  
//  Если ПолучитьФункциональнуюОпцию("РасширенныйФункционал") Тогда
//  	Возврат; // возвращаем пустой список при включенной ФО
//  КонецЕсли;
//  	
//  СписокОтчетовИУведомлений.Добавить("РегламентированныйОтчетОперацииСДенежнымиСредствамиНФО",
//  	"Информация об операциях с денежными средствами НФО");
//  
//  СписокОтчетовИУведомлений.Добавить(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаКИК,
//  	"Уведомление о контролируемых иностранных компаниях");
//
Процедура ПолучитьСписокОтчетовИУведомленийВходяшихВРасширенныйФункционал(СписокОтчетовИУведомлений) Экспорт
КонецПроцедуры

#КонецОбласти

