Процедура ЗагрузитьОбластьДанныхИзАрхива(НомерОбласти, ИмяФайлаВыгрузки) Экспорт
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, НомерОбласти);
		ВыгрузкаЗагрузкаОбластейДанных.ЗагрузитьТекущуюОбластьДанныхИзАрхива(ИмяФайлаВыгрузки);
	Исключение
		ЗаписьЖурналаРегистрации("DownloadDataArea", УровеньЖурналаРегистрации.Ошибка, ,, ОписаниеОшибки());
	КонецПопытки; 

КонецПроцедуры

Процедура ВыгрузитьОбластьДанныхВАрхив(НомерОбласти, ПутьКПапке) Экспорт
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, НомерОбласти);
		ИмяФайлаВыгрузки = ВыгрузкаЗагрузкаОбластейДанных.ВыгрузитьТекущуюОбластьДанныхВАрхив();
		КопироватьФайл(ИмяФайлаВыгрузки, ПутьКПапке + "\data_dump.zip") 
	Исключение
		ЗаписьЖурналаРегистрации("UploadingDataArea", УровеньЖурналаРегистрации.Ошибка, ,, ОписаниеОшибки());
	КонецПопытки; 
	
КонецПроцедуры

Процедура УстановитьИспользоватьИнструментыБухгалтера() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ЭтоВебКлиент = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ЭтоВебКлиент");
	Попытка
		Константы.EFSOL_ИспользоватьИнструментыБухгалтера.Установить(НЕ ЭтоВебКлиент);
		ОбновитьПовторноИспользуемыеЗначения();
	Исключение
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ДобавитьПользователяПриложения(СтруктураПараметров) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Число(СтруктураПараметров.Zone));

	Попытка
		
		Roles = "";
		СтруктураПараметров.Свойство("Roles", Roles);
		Roles = СтрЗаменить(Roles,";","");
		Если НЕ (Roles = "" ИЛИ Roles = Неопределено) Тогда
			СоздатьАдминистратораОбласти();
		Иначе
			Если Roles = "" ИЛИ Roles = Неопределено Тогда
				Roles = "Администратор,";
			КонецЕсли;
		КонецЕсли;
		
		//НачатьТранзакцию();
		ЯзыкПользователя = ЯзыкПоКоду(СтруктураПараметров.Language);
		Почта = СтруктураПараметров.EMail;
		Телефон = СтруктураПараметров.Phone;
		//ПолныеПрава = XMLЗначение(Тип("Булево"), СтруктураПараметров.FullRights);
		ПолныеПрава = СтруктураПараметров.FullRights = "true";
		СтруктураАдресаЭП = СоставПочтовогоАдреса(Почта);
		ИдентификаторПользователяСервиса = Новый УникальныйИдентификатор(СтруктураПараметров.UserServiceID);
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(СтруктураПараметров.Name);
		Если НЕ ПользовательИБ = Неопределено Тогда
			//ЗаписьЖурналаРегистрации("ДобПольз", УровеньЖурналаРегистрации.Ошибка,,,"0");  
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Пользователи.Наименование,
			|	Пользователи.Ссылка,
			|	Пользователи.ИдентификаторПользователяИБ
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ
			|	И НЕ Пользователи.ПометкаУдаления";
			Запрос.УстановитьПараметр("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			
			Если Выборка.Следующий() Тогда
				ПользовательОбластиДанных = Выборка.Ссылка;
				ЗаписьЖурналаРегистрации("ДобавитьПользователяПриложения", УровеньЖурналаРегистрации.Ошибка,,, "Пользователь для пользователя ИБ существует: " + ПользовательИБ.Имя);
				//ОтменитьТранзакцию();
				//Возврат;
			КонецЕсли;
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Пользователи.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.ИдентификаторПользователяСервиса = &ИдентификаторПользователяСервиса
			|	И НЕ Пользователи.ПометкаУдаления";
			Запрос.УстановитьПараметр("ИдентификаторПользователяСервиса", ИдентификаторПользователяСервиса);
			//
			//Блокировка = Новый БлокировкаДанных;
			//ЭлементБлокировки = Блокировка.Добавить("Справочник.Пользователи");
			//Блокировка.Заблокировать();
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				//ЗаписьЖурналаРегистрации("ДобПольз", УровеньЖурналаРегистрации.Ошибка,,,"3");
				ПользовательОбластиДанных = Неопределено;
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Пользователи.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	Пользователи.Наименование = &Наименование
				|	И НЕ Пользователи.ПометкаУдаления";
				Запрос.УстановитьПараметр("Наименование", СтруктураПараметров.FullName);
				РезультатСтарые = Запрос.Выполнить();
				ВыборкаСтарые = РезультатСтарые.Выбрать();
				Пока ВыборкаСтарые.Следующий() Цикл
					//ЗаписьЖурналаРегистрации("ДобПольз", УровеньЖурналаРегистрации.Ошибка,,,"4");
					СтарыйПользователь = ВыборкаСтарые.Ссылка.ПолучитьОбъект();
					СтарыйПользователь.УстановитьПометкуУдаления(Истина);
					ЗаписьЖурналаРегистрации("ДобавитьПользователяПриложения", УровеньЖурналаРегистрации.Ошибка,,, "УстановитьПометкуУдаления_" + СтарыйПользователь.ПометкаУдаления);
				КонецЦикла;
			Иначе
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				ПользовательОбластиДанных = Выборка.Ссылка;
				ЗаписьЖурналаРегистрации("ДобавитьПользователяПриложения", УровеньЖурналаРегистрации.Ошибка,,, "Пользователь с ИД пользователя сервиса" + ИдентификаторПользователяСервиса + " существует: " + СтруктураПараметров.Name);
				//ОтменитьТранзакцию();
				//Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ПользовательОбъект = "";
		Если НЕ ЗначениеЗаполнено(ПользовательОбластиДанных) Тогда
			ПользовательОбъект = Справочники.Пользователи.СоздатьЭлемент();
			ПользовательОбъект.ИдентификаторПользователяСервиса = ИдентификаторПользователяСервиса;
		Иначе
			ПользовательОбъект = ПользовательОбластиДанных.ПолучитьОбъект();
		КонецЕсли;

		ПользовательОбъект.Наименование = СтруктураПараметров.FullName;
		
		ОбновитьАдресЭлектроннойПочты(ПользовательОбъект, Почта, СтруктураАдресаЭП);
		
		ОбновитьТелефон(ПользовательОбъект, Телефон);
		
		ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
		
		ОписаниеПользователяИБ.Имя = СтруктураПараметров.Name;
		
		ОписаниеПользователяИБ.АутентификацияСтандартная = Истина;
		ОписаниеПользователяИБ.АутентификацияOpenID = Ложь;
		ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
		OSUser = Неопределено;
		Если СтруктураПараметров.Свойство("OSUser", OSUser) И OSUser <> "" Тогда
			ОписаниеПользователяИБ.АутентификацияОС = Истина; 
			ОписаниеПользователяИБ.ПользовательОС = "\\AD\" + СтруктураПараметров.OSUser;
			//ЗащитаОтОпасныхДействий = Новый ОписаниеЗащитыОтОпасныхДействий;
			//ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
			//ОписаниеПользователяИБ.Вставить("ЗащитаОтОпасныхДействий", ЗащитаОтОпасныхДействий);
		КонецЕсли;
		
		//ОписаниеПользователяИБ.ПарольУстановлен = Истина;
		ОписаниеПользователяИБ.Пароль = СтруктураПараметров.StoredPasswordValue;
		ОписаниеПользователяИБ.ПарольУстановлен = Истина;
		//ОписаниеПользователяИБ.СохраняемоеЗначениеПароля = СтруктураПараметров.StoredPasswordValue;
		
		ОписаниеПользователяИБ.Язык = ЯзыкПользователя;
		
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ОбработкаСообщенияКаналаУдаленногоАдминистрирования");
		
		Попытка
			ПользовательОбъект.Записать();
			//ЗаписьЖурналаРегистрации("ДобПольз", УровеньЖурналаРегистрации.Ошибка,,,"8");
			//ЗафиксироватьТранзакцию();
		Исключение
			ЗаписьЖурналаРегистрации("ДобПольз", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
			//ОтменитьТранзакцию();
			//ВызватьИсключение;
			Возврат Ложь;
		КонецПопытки;

		Если OSUser <> "" Тогда
			ОтключитьЗащиту(ПользовательОбъект.Ссылка);
		КонецЕсли;
		
		//ЗафиксироватьТранзакцию();
		
		//НачатьТранзакцию();

		МассивПрофилей = Новый Массив;
		//ПрофилиЗаданы = Ложь;
		//Если СтруктураПараметров.Свойство("Roles", Roles) Тогда 
			СписокПрофилей = СтрРазделить(Roles, ",", Ложь);

			Для Каждого Профиль Из СписокПрофилей Цикл
				ПрофильДоступа = Справочники.ПрофилиГруппДоступа.НайтиПоНаименованию(Профиль);
				//ЗаписьЖурналаРегистрации("НЕ ПрофилиЗаданы", УровеньЖурналаРегистрации.Ошибка, ,, "10"+ПрофильДоступа);

				Если ПрофильДоступа <> Справочники.ПрофилиГруппДоступа.ПустаяСсылка() Тогда
									//ЗаписьЖурналаРегистрации("НЕ ПрофилиЗаданы", УровеньЖурналаРегистрации.Ошибка, ,, "100");

					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ГруппыДоступа.Ссылка
					|ИЗ
					|	Справочник.ГруппыДоступа КАК ГруппыДоступа
					|ГДЕ
					|	ГруппыДоступа.Профиль = &Профиль
					|	И ГруппыДоступа.Родитель = &Родитель";
					Запрос.УстановитьПараметр("Профиль", ПрофильДоступа);
					Запрос.УстановитьПараметр("Родитель", Справочники.ГруппыДоступа.ПустаяСсылка());			
					РезультатЗапроса = Запрос.Выполнить();
					Выборка = РезультатЗапроса.Выгрузить();
					Если Выборка.Количество()= 1 Тогда 
						ПрофильДоступаПользователя = Выборка[0].Ссылка.ПолучитьОбъект();				
						ПрофильДоступаПользователя.Пользователи.Добавить().Пользователь = ПользовательОбъект.Ссылка;
						ПрофильДоступаПользователя.Записать();
						//ЗаписьЖурналаРегистрации("НЕ ПрофилиЗаданы", УровеньЖурналаРегистрации.Ошибка, ,, "1000");
					Иначе
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	ГруппыДоступа.Ссылка КАК Ссылка
						|ИЗ
						|	Справочник.ГруппыДоступа КАК ГруппыДоступа
						|ГДЕ
						|	ГруппыДоступа.Профиль = &Профиль
						|	И ГруппыДоступа.Пользователь = &Пользователь";
						Запрос.УстановитьПараметр("Профиль", ПрофильДоступа);
						Запрос.УстановитьПараметр("Пользователь", ПользовательОбъект.Ссылка);			
						РезультатЗапроса = Запрос.Выполнить();
						Выборка = РезультатЗапроса.Выгрузить();
						Если Выборка.Количество()= 0 Тогда 
							ПрофильДоступаПользователя = Справочники.ГруппыДоступа.СоздатьЭлемент();
							ПрофильДоступаПользователя.Наименование = ПрофильДоступа.Наименование;
							ПрофильДоступаПользователя.Пользователь = ПользовательОбъект.Ссылка;
							ПрофильДоступаПользователяТЧ = ПрофильДоступаПользователя.Пользователи.Добавить();
							ПрофильДоступаПользователяТЧ.Пользователь = ПользовательОбъект.Ссылка;
							ПрофильДоступаПользователя.Профиль = ПрофильДоступа;
							Попытка
								ПрофильДоступаПользователя.Записать();
								//ЗаписьЖурналаРегистрации("НЕ ПрофилиЗаданы", УровеньЖурналаРегистрации.Ошибка, ,, "11");
								
							Исключение
								//ОтправитьПисьмоОбОшибке(ОписаниеОшибки());
								ЗаписьЖурналаРегистрации("НЕ ПрофилиЗаданы", УровеньЖурналаРегистрации.Ошибка, ,, ОписаниеОшибки());
								
							КонецПопытки;
						КонецЕсли;	
					КонецЕсли;
					//ПрофилиЗаданы = Истина;
				КонецЕсли;
			КонецЦикла;
		////КонецЕсли;
		//Если НЕ ПрофилиЗаданы Тогда
		//	СообщенияУдаленногоАдминистрированияРеализация.УстановитьПолныеПраваОбластиДанных(ИдентификаторПользователяСервиса, ПолныеПрава);	
		//	ЗаписьЖурналаРегистрации("НЕ ПрофилиЗаданы", УровеньЖурналаРегистрации.Ошибка, ,, "0");
		//КонецЕсли;
		//ЗафиксироватьТранзакцию();
		
	Исключение
		ЗаписьЖурналаРегистрации("ДобавитьПользователяПриложения", УровеньЖурналаРегистрации.Ошибка, , , "OSUser_" + OSUser + "_" + ОписаниеОшибки());
		//ОтменитьТранзакцию();
	КонецПопытки;
	
	
	Попытка
		AccountID = "";
		Если СтруктураПараметров.Свойство("AccountID", AccountID) И AccountID <> "" Тогда
			
			EFSOL_AccountID = Константы.EFSOL_AccountID.Получить();
			Если EFSOL_AccountID <> AccountID Тогда
				Константы.EFSOL_AccountID.Установить(AccountID);

				ErrorDescription = "";
				Если НЕ EfsolADLКлиентСервер.АutoloadingDelansAccounts_AddAccountID(AccountID, ErrorDescription) Тогда
					ЗаписьЖурналаРегистрации("ДобПольз", УровеньЖурналаРегистрации.Ошибка,,, ErrorDescription);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации("ДобПольз", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;

	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(СтруктураПараметров.Name);
	Если ПользовательИБ = Неопределено Тогда
		ЗаписьЖурналаРегистрации("ДобавитьПользователяПриложения", УровеньЖурналаРегистрации.Ошибка, , , "Всё прошло но пользователь ИБ не создан");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция УдалитьПользователяПриложения(СтруктураПараметров) Экспорт
	
	Zone = Число(СтруктураПараметров.Zone);
	Name = СтруктураПараметров.Name;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Число(СтруктураПараметров.Zone));
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Name);
	Если НЕ ПользовательИБ = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Наименование,
		|	Пользователи.Ссылка,
		|	Пользователи.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
		Запрос.УстановитьПараметр("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ПользовательОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПользовательОбъект.Удалить();
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

Функция УстановитьДоступностьПользователяПриложения(СтруктураПараметров) Экспорт
	
	Zone = Число(СтруктураПараметров.Zone);
	Name = СтруктураПараметров.Name;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Число(СтруктураПараметров.Zone));
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Name);
	Если НЕ ПользовательИБ = Неопределено Тогда
		
		ПользовательИБ.АутентификацияОС = Ложь;
		ПользовательИБ.АутентификацияOpenID = Ложь;
		ПользовательИБ.АутентификацияСтандартная = Ложь;
		ПользовательИБ.Записать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Наименование,
		|	Пользователи.Ссылка,
		|	Пользователи.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
		Запрос.УстановитьПараметр("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ПользовательОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
			
			ОписаниеПользователяИБ.Имя = СтруктураПараметров.Name;
			
			ОписаниеПользователяИБ.АутентификацияСтандартная = Ложь;
			ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
			ОписаниеПользователяИБ.АутентификацияОС = Ложь; 
			ОписаниеПользователяИБ.АутентификацияOpenID = Ложь;
						
			ОписаниеПользователяИБ.Вставить("Действие", "Записать");
			ПользовательОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
			
			ПользовательОбъект.ДополнительныеСвойства.Вставить("ОбработкаСообщенияКаналаУдаленногоАдминистрирования");
			ПользовательОбъект.Записать();

			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

//СтруктураПередаваемыхПараметров
//Zone, Presentation, TimeZone
Процедура ПрикрепитьОбластьДанных(СтруктураПередаваемыхПараметров) Экспорт
	
	ЗаписьЖурналаРегистрации("ПрикрепитьОбластьДанных_", УровеньЖурналаРегистрации.Ошибка);

	Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(
	СообщенияУдаленногоАдминистрированияИнтерфейс.СообщениеПрикрепитьОбластьДанных());
	Zone = Число(СтруктураПередаваемыхПараметров.Zone);
	Presentation = СтруктураПередаваемыхПараметров.Presentation;
	TimeZone = СтруктураПередаваемыхПараметров.TimeZone;
	Сообщение.Body.Zone = Zone;
	Сообщение.Body.Presentation = Presentation;
	Сообщение.Body.TimeZone = TimeZone;
	ТелоСообщения = Сообщение.Body;
	СообщенияУдаленногоАдминистрированияРеализация.ПрикрепитьОбластьДанных(ТелоСообщения); 
	СообщенияУдаленногоАдминистрированияРеализация.УстановитьПараметрыОбластиДанных(Zone, Presentation, TimeZone);

КонецПроцедуры

Функция СоставПочтовогоАдреса(Знач АдресЭП)
	
	Если ЗначениеЗаполнено(АдресЭП) Тогда
		
		Попытка
			СтруктураАдресаЭП = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(АдресЭП);
		Исключение
			ШаблонСообщения = НСтр("ru = 'Указан некорректный адрес электронной почты: %1
				|Ошибка: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, АдресЭП, ИнформацияОбОшибке().Описание);
			ВызватьИсключение(ТекстСообщения);
		КонецПопытки;
		
		Возврат СтруктураАдресаЭП;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ОбновитьАдресЭлектроннойПочты(Знач ПользовательОбъект, Знач Адрес, Знач СтруктураАдресаЭП)
	
	ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailПользователя;
	
	СтрокаТабличнойЧасти = ПользовательОбъект.КонтактнаяИнформация.Найти(ВидКИ, "Вид");
	Если СтруктураАдресаЭП = Неопределено Тогда
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			ПользовательОбъект.КонтактнаяИнформация.Удалить(СтрокаТабличнойЧасти);
		КонецЕсли;
	Иначе
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			СтрокаТабличнойЧасти = ПользовательОбъект.КонтактнаяИнформация.Добавить();
			СтрокаТабличнойЧасти.Вид = ВидКИ;
		КонецЕсли;
		СтрокаТабличнойЧасти.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтрокаТабличнойЧасти.Представление = Адрес;
		
		Если СтруктураАдресаЭП.Количество() > 0 Тогда
			СтрокаТабличнойЧасти.АдресЭП = СтруктураАдресаЭП[0].Адрес;
			
			Поз = СтрНайти(СтрокаТабличнойЧасти.АдресЭП, "@");
			Если Поз <> 0 Тогда
				СтрокаТабличнойЧасти.ДоменноеИмяСервера = Сред(СтрокаТабличнойЧасти.АдресЭП, Поз + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьТелефон(Знач ПользовательОбъект, Знач Телефон)
	
	ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
	
	СтрокаТабличнойЧасти = ПользовательОбъект.КонтактнаяИнформация.Найти(ВидКИ, "Вид");
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = ПользовательОбъект.КонтактнаяИнформация.Добавить();
		СтрокаТабличнойЧасти.Вид = ВидКИ;
	КонецЕсли;
	СтрокаТабличнойЧасти.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	СтрокаТабличнойЧасти.Представление = Телефон;
	
КонецПроцедуры

Функция ЯзыкПоКоду(Знач КодЯзыка)
	
	Если ЗначениеЗаполнено(КодЯзыка) Тогда
		
		Для каждого Язык Из Метаданные.Языки Цикл
			Если Язык.КодЯзыка = КодЯзыка Тогда
				Возврат Язык.Имя;
			КонецЕсли;
		КонецЦикла;
		
		ШаблонСообщения = НСтр("ru = 'Неподдерживаемый код языка: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Язык);
		ВызватьИсключение(ТекстСообщения);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Процедура ОтправитьСообщениеООшибкеРаботыСервиса(ID, ИмяСервиса, ИмяМетода, ТекстОшибки, Тайминги, ВремяНачалаЗапроса = Неопределено, ВремяОкончанияЗапроса = Неопределено, ОтветОшибка = "", КоличествоЭлементовXML = 0, ИПАдрес = "") Экспорт
	
	ErrorDescription = "";
	СтрокаТаймингов = EfsolУниверсальныеФункцииСервер.СформироватьTimings(Тайминги);
	СтруктураПараметров = Новый Структура("ID, ServiceName, MethodName, ErrorText, Timings, StringDebugInfo, IP", ID, ИмяСервиса, ИмяМетода, ТекстОшибки, СтрокаТаймингов, ОтветОшибка, ИмяКомпьютера());
	DelansMS_ОтправитьПисьмо(СтруктураПараметров, ErrorDescription);
		
КонецПроцедуры

//Коллекция файлов Загрузки документов
         
// Метод возвращает признак работы сервера
//
// параметры:
//	 ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: истина/ложь или неопределено
//
Функция DelansMS_ОтправитьПисьмо(СтруктураПараметров, ErrorDescription) Экспорт 
	
	EfsolDelansMSHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("DelansMS");
	
	СтрокаЗапроса = "1cfresh/int/sm/hs/Delans/SendLetter";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolDelansMSHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);
	
	Если НЕ ПараметрыОтвета.КодОтвета = 200 Тогда
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
	КонецЕсли;
	
КонецФункции

//Процедура УстановитьИспользоватьИнструментыБухгалтера() Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	ЭтоВебКлиент = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ЭтоВебКлиент");
//	Попытка
//		Константы.EFSOL_ИспользоватьИнструментыБухгалтера.Установить(НЕ ЭтоВебКлиент);
//		ОбновитьПовторноИспользуемыеЗначения();
//	Исключение
//	КонецПопытки;
//	УстановитьПривилегированныйРежим(Ложь);
//	
//КонецПроцедуры

Процедура СоздатьАдминистратораОбласти()
	
	//НачатьТранзакцию();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Наименование = &Наименование
	|	И НЕ Пользователи.ПометкаУдаления";
	Запрос.УстановитьПараметр("Наименование", "Администратор");
	//Блокировка = Новый БлокировкаДанных;
	//ЭлементБлокировки = Блокировка.Добавить("Справочник.Пользователи");
	//Блокировка.Заблокировать();
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ПользовательАдминистраторОбъект = Справочники.Пользователи.СоздатьЭлемент();
		ПользовательАдминистраторОбъект.ИдентификаторПользователяСервиса = Новый УникальныйИдентификатор("a59d8d7e-33d6-11e7-80e0-00155d0a2ee9");
	Иначе
		Возврат;
	КонецЕсли;		
	
	ПользовательАдминистраторОбъект.Наименование = "Администратор";
	//
	//ОбновитьАдресЭлектроннойПочты(ПользовательОбъект, Почта, СтруктураАдресаЭП);
	//
	//ОбновитьТелефон(ПользовательОбъект, Телефон);
	
	ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
	
	ОписаниеПользователяИБ.Имя = "Администратор";
	
	ОписаниеПользователяИБ.АутентификацияСтандартная = Истина;
	ОписаниеПользователяИБ.АутентификацияOpenID = Ложь;
	ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
	ОписаниеПользователяИБ.АутентификацияОС = Ложь; 
	ОписаниеПользователяИБ.СохраняемоеЗначениеПароля = "8S7hJleumvenopAMkOoY9gcVgYk=,1AOJ6uPisznuYTes4K0mS7znt40=";

	//ОписаниеПользователяИБ.Пароль = "admcob";
	
	ОписаниеПользователяИБ.Язык = ЯзыкПоКоду("ru");
	
	ОписаниеПользователяИБ.Вставить("Действие", "Записать");
	ПользовательАдминистраторОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
	ПользовательАдминистраторОбъект.ДополнительныеСвойства.Вставить("ОбработкаСообщенияКаналаУдаленногоАдминистрирования");
	ПользовательАдминистраторОбъект.Записать();
	
	ОтключитьЗащиту(ПользовательАдминистраторОбъект.Ссылка);
	//ЗафиксироватьТранзакцию();
	
	ПрофильДоступа = Справочники.ПрофилиГруппДоступа.НайтиПоНаименованию("Администратор");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыДоступа.Ссылка
	|ИЗ
	|	Справочник.ГруппыДоступа КАК ГруппыДоступа
	|ГДЕ
	|	ГруппыДоступа.Профиль = &Профиль
	|	И ГруппыДоступа.Родитель = &Родитель";
	Запрос.УстановитьПараметр("Профиль", ПрофильДоступа);
	Запрос.УстановитьПараметр("Родитель", Справочники.ГруппыДоступа.ПустаяСсылка());			
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выгрузить();
	Если Выборка.Количество()= 1 Тогда 
		ПрофильДоступаПользователя = Выборка[0].Ссылка.ПолучитьОбъект();				
		ПрофильДоступаПользователя.Пользователи.Добавить().Пользователь = ПользовательАдминистраторОбъект.Ссылка;
		ПрофильДоступаПользователя.Записать();
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьОбластьНаименование(НаименованиеОбасти) Экспорт
	
	СтруктураПараметров = Новый Структура("Область, НаименованиеОбласти", Строка(ПараметрыСеанса.ОбластьДанныхЗначение), НаименованиеОбасти);
	
	EfsolDelansMSHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("DelansMS");
	
	СтрокаЗапроса = "/DelansDelivery/hs/Delans/UpdateArea";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolDelansMSHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);
	
	Если НЕ ПараметрыОтвета.КодОтвета = 200 Тогда
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
	КонецЕсли;
	
КонецПроцедуры

//Процедура ОбновитьПользователя(Знач Сообщение, Знач Отправитель)
//	
//	ТелоСообщения = Сообщение.Body;
//	СообщенияУдаленногоАдминистрированияРеализация.ОбновитьПользователя(
//		ТелоСообщения.Name,
//		ТелоСообщения.FullName,
//		ТелоСообщения.StoredPasswordValue,
//		ТелоСообщения.UserApplicationID,
//		ТелоСообщения.UserServiceID,
//		ТелоСообщения.Phone,
//		ТелоСообщения.EMail,
//		ТелоСообщения.Language);
//	
//КонецПроцедуры

Функция СохранитьТокенМодульбанк(СтруктураПараметров) Экспорт
	
	Попытка	
		УстановитьПривилегированныйРежим(Истина);
		
		ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Число(СтруктураПараметров.Zone));
		Если СтруктураПараметров.Свойство("INN") И ЗначениеЗаполнено(СтруктураПараметров.INN) Тогда
			Организация = Справочники.Организации.НайтиПоИНН(СтруктураПараметров.INN);
			Если Не Организация.Пустая() Тогда
				ОбъектОрганизация = Организация.ПолучитьОбъект();
				ОбъектОрганизация.ModulbankToken = СтруктураПараметров.ModulbankToken;
				ОбъектОрганизация.Записать();
				Результат = Истина;
			Иначе
				Результат = "Не найдена организация с ИНН " + СтруктураПараметров.INN; 
			КонецЕсли;
		Иначе
			Результат = "Не указан ИНН";
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
	Исключение
		Результат = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("СохранитьТокенМодульбанк", УровеньЖурналаРегистрации.Ошибка,,,Результат); 
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ОтключитьЗащиту(Пользователь)
	
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") И НЕ Пользователь.Пустая() Тогда
		Попытка
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
			ПользовательИБ.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
			ПользовательИБ.Записать();      
		Исключение
			ЗаписьЖурналаРегистрации("ЗащитаОтОпасныхДействий",,,ОписаниеОшибки()); 
		КонецПопытки;
	КонецЕсли; 	
	
КонецПроцедуры



Процедура ЗагрузитьКурсыВалют() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрСведенийОбластиДанных.ОбластьДанныхВспомогательныеДанные
	|ИЗ
	|	РегистрСведений.ОбластиДанных КАК РегистрСведенийОбластиДанных";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Область = Выборка.ОбластьДанныхВспомогательныеДанные;
		ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Область);
		ЗагрузитьАктуальныйКурс();
	КонецЦикла;
	ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
	
	УстановитьПривилегированныйРежим(ложь);

КонецПроцедуры

Процедура ЗагрузитьАктуальныйКурс(ПараметрыЗагрузки = Неопределено, АдресРезультата = Неопределено) 
	
	ИмяСобытия = ИмяСобытияЖурналаРегистрации();
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начата регламентная загрузка курсов валют'"));
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	СостояниеЗагрузки = Неопределено;
	ПриЗагрузкеВозниклиОшибки = Ложь;
	
	Если ПараметрыЗагрузки = Неопределено Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	КурсыВалют.Валюта КАК Валюта,
		|	КурсыВалют.Валюта.Код КАК КодВалюты,
		|	МАКСИМУМ(КурсыВалют.Период) КАК ДатаКурса
		|ИЗ
		|	РегистрСведений.КурсыВалют КАК КурсыВалют
		|ГДЕ
		|	КурсыВалют.Валюта.СпособУстановкиКурса = ЗНАЧЕНИЕ(Перечисление.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета)
		|	И НЕ КурсыВалют.Валюта.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	КурсыВалют.Валюта,
		|	КурсыВалют.Валюта.Код";
		Запрос = Новый Запрос(ТекстЗапроса);
		Выборка = Запрос.Выполнить().Выбрать();
		
		КонецПериода = ТекущаяДата;
		Пока Выборка.Следующий() Цикл
			НачалоПериода = ?(Выборка.ДатаКурса = '198001010000', НачалоГода(ДобавитьМесяц(ТекущаяДата, -12)), Выборка.ДатаКурса + 60*60*24);
			СписокВалют = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка);
			ЗагрузитьКурсыВалютПоПараметрам(СписокВалют, НачалоПериода, КонецПериода, ПриЗагрузкеВозниклиОшибки);
		КонецЦикла;
	Иначе
		Результат = ЗагрузитьКурсыВалютПоПараметрам(ПараметрыЗагрузки.СписокВалют,
			ПараметрыЗагрузки.НачалоПериода, ПараметрыЗагрузки.КонецПериода, ПриЗагрузкеВозниклиОшибки);
	КонецЕсли;
		
	Если АдресРезультата <> Неопределено Тогда
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	КонецЕсли;

	Если ПриЗагрузкеВозниклиОшибки Тогда
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,
			, 
			,
			НСтр("ru = 'Во время регламентного задания загрузки курсов валют возникли ошибки'"));
		//ВызватьИсключение НСтр("ru = 'Загрузка курсов не выполнена.'");
	Иначе
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Информация,
			,
			,
			НСтр("ru = 'Завершена регламентная загрузка курсов валют.'"));
	КонецЕсли;
	
КонецПроцедуры

// Процедура для загрузки курсов валют по определенному периоду.
//
// Параметры:
// Валюты		- Любая коллекция - со следующими полями:
//					КодВалюты - числовой код валюты.
//					Валюта - ссылка на валюту.
// НачалоПериодаЗагрузки	- Дата - начало периода загрузки курсов.
// ОкончаниеПериодаЗагрузки	- Дата - окончание периода загрузки курсов.
//
// Возвращаемое значение:
// Массив состояния загрузки  - каждый элемент - структура с полями.
//		Валюта - загружаемая валюта.
//		СтатусОперации - завершилась ли загрузка успешно.
//		Сообщение - пояснение о загрузке (текст сообщения об ошибке или поясняющее сообщение).
//
Функция ЗагрузитьКурсыВалютПоПараметрам(Знач Валюты, Знач НачалоПериодаЗагрузки, Знач ОкончаниеПериодаЗагрузки, ПриЗагрузкеВозниклиОшибки = Ложь)
	
	СостояниеЗагрузки = Новый Массив;
	
	ПараметрыПолучения = Неопределено;
	ИмяФайлаДневногоКурса = Формат(ОкончаниеПериодаЗагрузки, "ДФ=/yyyy/MM/dd");
	
	ИспользоватьАльтернативныйСервер = Константы.ИспользоватьАльтернативныйСерверДляЗагрузкиКурсовВалют.Получить();
	
	Если ИспользоватьАльтернативныйСервер Тогда
		СерверИсточник = "http://cbrates.rbc.ru";
		Если НачалоПериодаЗагрузки = ОкончаниеПериодаЗагрузки Тогда
			ШаблонИмениФайла = СерверИсточник + "/tsv/%1" + ИмяФайлаДневногоКурса + ".tsv";
		Иначе
			ШаблонИмениФайла = СерверИсточник + "/tsv/cb/%1.tsv";
		КонецЕсли;
	Иначе
		СерверИсточник = "https://currencyrates.1c.ru/exchangerate/v1";
		Если НачалоПериодаЗагрузки = ОкончаниеПериодаЗагрузки Тогда
			ШаблонИмениФайла = СерверИсточник + "/%1" + ИмяФайлаДневногоКурса + ".tsv";
		Иначе
			ШаблонИмениФайла = СерверИсточник + "/%1.tsv";
		КонецЕсли;
		
		ПараметрыПолучения = ПараметрыАутентификацииНаСайте();
	КонецЕсли;
	
	ВалютыЗагружаемыеИзИнтернета = ВалютыЗагружаемыеИзИнтернета();
	
	Для Каждого Валюта Из Валюты Цикл
		Если ВалютыЗагружаемыеИзИнтернета.Найти(Валюта.Валюта) = Неопределено Тогда
			ПриЗагрузкеВозниклиОшибки = Истина;
			СтатусОперации = Ложь;
			ПоясняющееСообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Невозможно получить файл данных с курсами валюты (%1 - %2):
					|Курсы данной валюты не предоставляются.'"),
				Валюта.КодВалюты,
				Валюта.Валюта);
				
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ПоясняющееСообщение);
		Иначе
			ФайлНаВебСервере = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла, Валюта.КодВалюты);
			Результат = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(ФайлНаВебСервере, ПараметрыПолучения);
			
			Если Результат.Статус Тогда
				ПоясняющееСообщение = ЗагрузитьКурсВалютыИзФайла(Валюта.Валюта, Результат.Путь, НачалоПериодаЗагрузки, ОкончаниеПериодаЗагрузки) + Символы.ПС;
				УдалитьФайлы(Результат.Путь);
				СтатусОперации = ПустаяСтрока(ПоясняющееСообщение);
			Иначе
				ПоясняющееСообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Невозможно получить файл данных с курсами валюты (%1 - %2):
						|%3
						|Возможно, нет доступа к веб сайту с курсами валют, либо указана несуществующая валюта.'"),
					Валюта.КодВалюты,
					Валюта.Валюта,
					Результат.СообщениеОбОшибке);
				СтатусОперации = Ложь;
				ПриЗагрузкеВозниклиОшибки = Истина;
			КонецЕсли;
		КонецЕсли;
		СостояниеЗагрузки.Добавить(Новый Структура("Валюта,СтатусОперации,Сообщение", Валюта.Валюта, СтатусОперации, ПоясняющееСообщение));
		
	КонецЦикла;
	
	Возврат СостояниеЗагрузки;
	
КонецФункции

Функция ИмяСобытияЖурналаРегистрации()
	Возврат НСтр("ru = 'Валюты.Загрузка курсов валют'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
КонецФункции

Функция ПараметрыАутентификацииНаСайте()
	Результат = Новый Структура;
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		ДанныеАутентификации = МодульИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		Если ДанныеАутентификации <> Неопределено Тогда
			Результат.Вставить("Пользователь", ДанныеАутентификации.Логин);
			Результат.Вставить("Пароль", ДанныеАутентификации.Пароль);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ВалютыЗагружаемыеИзИнтернета()
	
	КлассификаторXML = Обработки.ЗагрузкаКурсовВалют.ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст();
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	НайденныеСтроки = КлассификаторТаблица.НайтиСтроки(Новый Структура("RBCLoading", "истина"));
	ЗагружаемыеПоКлассификатору = КлассификаторТаблица.Скопировать(НайденныеСтроки, "Code").ВыгрузитьКолонку("Code");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Валюты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	НЕ Валюты.ПометкаУдаления
	|	И Валюты.СпособУстановкиКурса = ЗНАЧЕНИЕ(Перечисление.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета)
	|	И Валюты.Код В(&ЗагружаемыеПоКлассификатору)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ЗагружаемыеПоКлассификатору", ЗагружаемыеПоКлассификатору);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
КонецФункции

// Загружает информацию о курсе валюты Валюта из файла ПутьКФайлу в регистр
// сведений курсов валют. При этом файл с курсами разбирается, и записываются
// только те данные, которые удовлетворяют периоду (НачалоПериодаЗагрузки, ОкончаниеПериодаЗагрузки).
//
Функция ЗагрузитьКурсВалютыИзФайла(Знач Валюта, Знач ПутьКФайлу, Знач НачалоПериодаЗагрузки, Знач ОкончаниеПериодаЗагрузки)
	
	СтатусЗагрузки = 1;
	
	ЧислоЗагружаемыхДнейВсего = 1 + (ОкончаниеПериодаЗагрузки - НачалоПериодаЗагрузки) / ( 24 * 60 * 60);
	
	ЧислоЗагруженныхДней = 0;
	
	Если ЭтоАдресВременногоХранилища(ПутьКФайлу) Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла();
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПутьКФайлу);
		ДвоичныеДанные.Записать(ИмяФайла);
	Иначе
		ИмяФайла = ПутьКФайлу;
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент();
	
	
	Текст.Прочитать(ИмяФайла, КодировкаТекста.ANSI);
	
	ДатаЗапрета = Неопределено;
	Для НомерСтроки = 1 По Текст.КоличествоСтрок() Цикл
		
		Стр = Текст.ПолучитьСтроку(НомерСтроки);
		Если (Стр = "") ИЛИ (СтрНайти(Стр, Символы.Таб) = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		ЧастиСтроки = СтрРазделить(Стр, Символы.Таб, Истина);
		
		Если НачалоПериодаЗагрузки = ОкончаниеПериодаЗагрузки Тогда
			ДатаКурса = ОкончаниеПериодаЗагрузки;
			Кратность = Число(ЧастиСтроки[0]);
			Курс = Число(ЧастиСтроки[1]);
		Иначе
			ДатаКурсаСтр = ЧастиСтроки[0];
			ДатаКурса = Дата(Лев(ДатаКурсаСтр,4), Сред(ДатаКурсаСтр,5,2), Сред(ДатаКурсаСтр,7,2));
			Кратность = Число(ЧастиСтроки[1]);
			Курс = Число(ЧастиСтроки[2]);
		КонецЕсли;
		
		Если ДатаКурса > ОкончаниеПериодаЗагрузки Тогда
			Прервать;
		КонецЕсли;
		
		Если ДатаКурса < НачалоПериодаЗагрузки Тогда 
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Валюта.Установить(Валюта);
		НаборЗаписей.Отбор.Период.Установить(ДатаКурса);
		Запись = НаборЗаписей.Добавить();
		Запись.Валюта = Валюта;
		Запись.Период = ДатаКурса;
		Запись.Курс = Курс;
		Запись.Кратность = Кратность;
		
		Записывать = Истина;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДатыЗапретаИзменения") Тогда
			МодульДатыЗапретаИзмененияСлужебный = ОбщегоНазначения.ОбщийМодуль("ДатыЗапретаИзмененияСлужебный");
			Если МодульДатыЗапретаИзмененияСлужебный.ЗапретИзмененияПроверяется(Метаданные.РегистрыСведений.КурсыВалют) Тогда
				МодульДатыЗапретаИзменения = ОбщегоНазначения.ОбщийМодуль("ДатыЗапретаИзменения");
				Записывать = Не МодульДатыЗапретаИзменения.ИзменениеЗапрещено(НаборЗаписей);
				Если Не Записывать Тогда
					Если ДатаЗапрета = Неопределено Тогда
						ДатаЗапрета = ДатаКурса;
					Иначе
						ДатаЗапрета = Макс(ДатаЗапрета, ДатаКурса);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Записывать Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		
		ЧислоЗагруженныхДней = ЧислоЗагруженныхДней + 1;
	КонецЦикла;
	
	Если ЭтоАдресВременногоХранилища(ПутьКФайлу) Тогда
		УдалитьФайлы(ИмяФайла);
		УдалитьИзВременногоХранилища(ПутьКФайлу);
	КонецЕсли;
	
	ПояснениеОЗагрузке = "";
	Если ЧислоЗагружаемыхДнейВсего <> ЧислоЗагруженныхДней Тогда
		Если ЧислоЗагруженныхДней = 0 Тогда
			ПояснениеОЗагрузке = НСтр("ru = 'Курсы валюты %1 (%2) не загружены.
				|Нет сведение о курсе за указанный период.'");
		Иначе
			ПояснениеОЗагрузке = НСтр("ru = 'Загружены не все курсы по валюте %1 (%2).'");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПояснениеОЗагрузке) Тогда
		ПояснениеОЗагрузке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПояснениеОЗагрузке, Валюта.Наименование, Валюта.Код);
	КонецЕсли;
	
	Если ДатаЗапрета <> Неопределено Тогда
		ПояснениеОЗагрузке = ПояснениеОЗагрузке + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Загрузка курсов валюты %1(%2) ограничена датой запрета изменений %3.
			|Курсы запрещенного периода были пропущены при загрузке.'"), Валюта.Наименование, Валюта.Код, Формат(ДатаЗапрета, "ДЛФ=D"));
	КонецЕсли;
	
	ПояснениеОЗагрузке = СокрЛП(ПояснениеОЗагрузке);
	
	СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
	СписокОшибок = Новый Массив;
	Для Каждого СообщениеПользователю Из СообщенияПользователю Цикл
		СписокОшибок.Добавить(СообщениеПользователю.Текст);
	КонецЦикла;
	СписокОшибок = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокОшибок);
	ПояснениеОЗагрузке = ПояснениеОЗагрузке + ?(ПустаяСтрока(ПояснениеОЗагрузке), "", Символы.ПС) + СтрСоединить(СписокОшибок, Символы.ПС);
	
	Возврат ПояснениеОЗагрузке;
	
КонецФункции

Процедура ДобавитьAccountIDВОбласть(СтруктураПараметров) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Число(СтруктураПараметров.Zone));	
	
	AccountID = "";
	Если СтруктураПараметров.Свойство("AccountID", AccountID) И AccountID <> "" Тогда
		
		EFSOL_AccountID = Константы.EFSOL_AccountID.Получить();
		Если EFSOL_AccountID <> AccountID Тогда
			Константы.EFSOL_AccountID.Установить(AccountID);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

