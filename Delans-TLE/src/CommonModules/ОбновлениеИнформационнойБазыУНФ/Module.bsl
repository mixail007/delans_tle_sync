////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы (УНФ)
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                  Обработчики обновления таких библиотек должны быть вызваны ранее
//                                  обработчиков обновления данной библиотеки.
//                                  При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                  порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                  в процедуре ПриДобавленииПодсистем общего модуля ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Версия = "1.6.17.161";
	
	УправлениеНебольшойФирмойСервер.ПередДобавлениемПодсистемы(Описание);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - описание полей 
//                                  см. в процедуре ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.0.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//  Обработчик.Опциональный        = Истина;
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	#Область ПервыйЗапуск
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПервыйЗапуск_РазделенныеДанные";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПервыйЗапуск_ОбщиеДанные";
	Обработчик.ОбщиеДанные = Истина;
	
	#КонецОбласти
	
	#Область _1_6_17_ххх
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.17.2";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ПульсБизнесаРазделитьЧистыеАктивы";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4dc0ac06-b510-48e1-b066-ff6a4005ddee");
	Обработчик.Комментарий = НСтр("ru = 'Разделение диаграммы чистых активов монитора ""Пульс бизнеса"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.17.30";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьРегламентныеЗаданияОчередьРасчетаЦен";
	Обработчик.Комментарий = НСтр("ru = 'Обновление регламентного задания расчета очереди цен'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.17.44";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f40ea12a-02a6-4cd4-a23e-897bcb61538f");
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ЗаполнитьСтатусыПлатежногоПорученияВДокументахПланирования";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение статусов платежных поручений в документах планирования'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.17.52";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f40ea12a-02a6-4cd4-a23e-898bcb71558a");
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ЗаполнитьРеквизитыВыгрузкиНСИСинхронизацияДанныхЧерезУниверсальныйФормат";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизитов в узлах плана обмена Синхронизация данных через универсальный формат'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.17.92";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("af2fad91-295a-4d7c-8b21-751d0deb465b");
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ВакантныйНомерОчередиРасчетаЦен";
	Обработчик.Комментарий = НСтр("ru = 'Начальное значение номера очереди расчета цен.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.17.142";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьШаблоныСообщений";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e40f757f-3095-43d4-a426-b792877c4751");
	Обработчик.Комментарий = НСтр("ru = 'Обновление справочника Шаблоны сообщений.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              =  "1.6.17.147";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыУНФ.ОбновитьПоказателиНа2019Год";
	Обработчик.Комментарий = НСтр("ru='Заполнение показателей отчетности на 2019 год.'");
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.6.17.161";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУНФ.ОбновитьОтчеты_1_6_17";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b8c9cfc0-9a60-42df-8ccf-7d1f3ddc1bf5");
	Обработчик.Комментарий = НСтр("ru = 'Обновление настроек вариантов отчетов.'");
	
	#КонецОбласти
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ИтерацииОбновления, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	
	
КонецПроцедуры // ПриДобавленииОбработчиковПереходаСДругойПрограммы()

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПервыйЗапуск_ОбщиеДанные

//(5.Общий) Заполняем справочник ОКУН
Процедура ЗагрузитьОКУН() Экспорт
	
	Справочники.ОКУН.ЗагрузитьКлассификатор();
	Справочники.ОКУН.ПроставитьВидДеятельностиОКУН();
	
КонецПроцедуры

//(6.Общий) Заполняет РС КоэффициентДефлятор
//
Процедура ЗаполнитьКоэффициентДефлятор() Экспорт
	
	// переписываем сразу весь набор
	Набор = РегистрыСведений.КоэффициентДефлятор.СоздатьНаборЗаписей();
	
	Запись = Набор.Добавить();
	Запись.Период = '20030101';
	Запись.Значение = 1;
	
	Запись = Набор.Добавить();
	Запись.Период = '20040101';
	Запись.Значение = 1.133;
	
	Запись = Набор.Добавить();
	Запись.Период = '20050101';
	Запись.Значение = 1.104;
	
	Запись = Набор.Добавить();
	Запись.Период = '20060101';
	Запись.Значение = 1.132;
	
	Запись = Набор.Добавить();
	Запись.Период = '20070101';
	Запись.Значение = 1.096;
	
	Запись = Набор.Добавить();
	Запись.Период = '20080101';
	Запись.Значение = 1.081;
	
	Запись = Набор.Добавить();
	Запись.Период = '20090101';
	Запись.Значение = 1.148;
	
	Запись = Набор.Добавить();
	Запись.Период = '20100101';
	Запись.Значение = 1.295;
	
	Запись = Набор.Добавить();
	Запись.Период = '20110101';
	Запись.Значение = 1.372;
	
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.Значение = 1.4942;
	
	Запись = Набор.Добавить();
	Запись.Период = '20130101';
	Запись.Значение = 1.569;
	
	Запись = Набор.Добавить();
	Запись.Период = '20140101';
	Запись.Значение = 1.672;
	
	Запись = Набор.Добавить();
	Запись.Период = '20150101';
	Запись.Значение = 1.798;
	
	Запись = Набор.Добавить();
	Запись.Период = '20160101';
	Запись.Значение = 1.798;
	
	Запись = Набор.Добавить();
	Запись.Период = '20180101';
	Запись.Значение = 1.868;
	
	Запись = Набор.Добавить();
	Запись.Период = '20190101';
	Запись.Значение = 1.915;
	
	Набор.Записать();
	
КонецПроцедуры

//(7.Общий) Заполнять РС МРОТ
//
Процедура ЗагрузитьМРОТ() Экспорт
	
	Набор = РегистрыСведений.МРОТ.СоздатьНаборЗаписей();
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20000701';
	Запись.Значение = 132;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20010101';
	Запись.Значение = 200;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20010701';
	Запись.Значение = 300;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20020501';
	Запись.Значение = 450;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20031001';
	Запись.Значение = 600;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20050101';
	Запись.Значение = 720;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20050901';
	Запись.Значение = 800;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20060501';
	Запись.Значение = 1100;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20070901';
	Запись.Значение = 2300;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20090101';
	Запись.Значение = 4330;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20110601';
	Запись.Значение = 4611;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20130101';
	Запись.Значение = 5205;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20140101';
	Запись.Значение = 5554;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20150101';
	Запись.Значение = 5965;
	
	Запись = Набор.Добавить();
	
	Запись.Период = '20160101';
	Запись.Значение = 6204;
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.Значение = 7500;
	
	Запись = Набор.Добавить();
	Запись.Период = '20180101';
	Запись.Значение = 7800;
	
	Запись = Набор.Добавить();
	Запись.Период = '20190101';
	Запись.Значение = 11280;
	
	Набор.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПервыйЗапуск_РазделенныеДанные

//(1) Процедура загружает управленческий план счетов из макета.
//
Процедура ЗагрузитьУправленческийПланСчетовПервыйЗапуск()
	
	// 00.
	Счет = ПланыСчетов.Управленческий.Служебный.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 01.
	Счет = ПланыСчетов.Управленческий.ВнеоборотныеАктивы.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ВнеоборотныеАктивы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 02.
	Счет = ПланыСчетов.Управленческий.АмортизацияВнеоборотныхАктивов.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.АмортизацияВнеоборотныхАктивов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 08.
	Счет = ПланыСчетов.Управленческий.ВложенияВоВнеоборотныеАктивы.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ПрочиеВнеоборотныеАктивы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 10.
	Счет = ПланыСчетов.Управленческий.СырьеИМатериалы.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.Запасы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 20.
	Счет = ПланыСчетов.Управленческий.НезавершенноеПроизводство.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.НезавершенноеПроизводство;
	Счет.СчетЗакрытия = ПланыСчетов.Управленческий.ТоварыПродукция;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 25.
	Счет = ПланыСчетов.Управленческий.КосвенныеЗатраты.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.КосвенныеЗатраты;
	Счет.СчетЗакрытия = ПланыСчетов.Управленческий.НезавершенноеПроизводство;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемВыпуска;
	Счет.Записать();
	
	// 41.
	Счет = ПланыСчетов.Управленческий.ТоварыПродукция.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.Запасы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 42.
	Счет = ПланыСчетов.Управленческий.ТорговаяНаценка.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ТорговаяНаценка;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 50.
	Счет = ПланыСчетов.Управленческий.Касса.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ДенежныеСредства;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 51.
	Счет = ПланыСчетов.Управленческий.Банк.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ДенежныеСредства;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 57.
	Счет = ПланыСчетов.Управленческий.ПереводыВПути.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ДенежныеСредства;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 58.
	Счет = ПланыСчетов.Управленческий.ФинансовыеВложения.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ДенежныеСредства;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 60.
	Счет = ПланыСчетов.Управленческий.РасчетыСПоставщикамиИПодрядчиками.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 60.01
		Счет = ПланыСчетов.Управленческий.РасчетыСПоставщиками.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПоставщикамиИПодрядчиками;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 60.02
		Счет = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПоставщикамиИПодрядчиками;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
	// 62.
	Счет = ПланыСчетов.Управленческий.РасчетыСПокупателямиИЗаказчиками.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 62.01
		Счет = ПланыСчетов.Управленческий.РасчетыСПокупателями.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПокупателямиИЗаказчиками;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 62.02
		Счет = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПокупателямиИЗаказчиками;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
	// 66.
	Счет = ПланыСчетов.Управленческий.РасчетыПоКраткосрочнымКредитамИЗаймам.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.КредитыИЗаймы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 67.
	Счет = ПланыСчетов.Управленческий.РасчетыПоДолгосрочнымКредитамИЗаймам.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ДолгосрочныеОбязательства;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 68.
	Счет = ПланыСчетов.Управленческий.РасчетыПоНалогам.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 68.01
		Счет = ПланыСчетов.Управленческий.Налоги.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыПоНалогам;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 68.02
		Счет = ПланыСчетов.Управленческий.НалогиКВозмещению.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыПоНалогам;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
	
	// 70.
	Счет = ПланыСчетов.Управленческий.РасчетыСПерсоналомПоОплатеТруда.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 71.
	Счет = ПланыСчетов.Управленческий.РасчетыСПодотчетнымиЛицами.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 71.01
		Счет = ПланыСчетов.Управленческий.РасчетыСПодотчетниками.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПодотчетнымиЛицами;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 71.02
		Счет = ПланыСчетов.Управленческий.ПерерасходПодотчетников.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПодотчетнымиЛицами;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
	// Прочие расчеты
	// 73
	Счет = ПланыСчетов.Управленческий.РасчетыСПерсоналомПоПрочимОперациям.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 73.01
		Счет = ПланыСчетов.Управленческий.РасчетыПоПредоставленнымЗаймам.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПерсоналомПоПрочимОперациям;
		Счет.ТипСчета = Перечисления.ТипыСчетов.КредитыИЗаймы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 73.02
		Счет = ПланыСчетов.Управленческий.РасчетыПоВозмещениюМатериальногоУщерба.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСПерсоналомПоПрочимОперациям;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
	
	// 75
	Счет = ПланыСчетов.Управленческий.РасчетыСУчредителями.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 75.01
		Счет = ПланыСчетов.Управленческий.РасчетыПоВкладамВУставныйКапитал.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСУчредителями;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 75.02
		Счет = ПланыСчетов.Управленческий.РасчетыПоВыплатеДоходов.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСУчредителями;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
	
	// 76
	Счет = ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторамиИКредиторами.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 76.01
		Счет = ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторами.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторамиИКредиторами;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Дебиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 76.02
		Счет = ПланыСчетов.Управленческий.РасчетыСРазнымиКредиторами.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторамиИКредиторами;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		//76.05
		Счет = ПланыСчетов.Управленческий.РасчетыСПрочимиПоставщикамиИТаможеннымиОрганами.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторамиИКредиторами;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Кредиторы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
	// Конец Прочие расчеты
	
	// 80.
	Счет = ПланыСчетов.Управленческий.УставныйКапитал.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.Капитал;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 82.
	Счет = ПланыСчетов.Управленческий.РезервныйИДобавочныйКапитал.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.РезервныйИДобавочныйКапитал;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 84.
	Счет = ПланыСчетов.Управленческий.НераспределеннаяПрибыль.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.НераспределеннаяПрибыль;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();

	// 90.
	Счет = ПланыСчетов.Управленческий.Продажи.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 90.01
		Счет = ПланыСчетов.Управленческий.ВыручкаОтПродаж.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.Продажи;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Доходы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 90.02
		Счет = ПланыСчетов.Управленческий.СебестоимостьПродаж.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.Продажи;
		Счет.ТипСчета = Перечисления.ТипыСчетов.СебестоимостьПродаж;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 90.07
		Счет = ПланыСчетов.Управленческий.КоммерческиеРасходы.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.Продажи;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Расходы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемПродаж;
		Счет.Записать();
		
		// 90.08
		Счет = ПланыСчетов.Управленческий.УправленческиеРасходы.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.Продажи;
		Счет.ТипСчета = Перечисления.ТипыСчетов.Расходы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемПродаж;
		Счет.Записать();
		
	// 91.
	Счет = ПланыСчетов.Управленческий.ПрочиеДоходыИРасходы.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 91.01
		Счет = ПланыСчетов.Управленческий.ПрочиеДоходы.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.ПрочиеДоходыИРасходы;
		Счет.ТипСчета = Перечисления.ТипыСчетов.ПрочиеДоходы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемПродаж;
		Счет.Записать();
		
		// 91.02
		Счет = ПланыСчетов.Управленческий.ПрочиеРасходы.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.ПрочиеДоходыИРасходы;
		Счет.ТипСчета = Перечисления.ТипыСчетов.ПрочиеРасходы;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемПродаж;
		Счет.Записать();
		
		// 91.03
		Счет = ПланыСчетов.Управленческий.ПроцентыПоКредитам.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.ПрочиеДоходыИРасходы;
		Счет.ТипСчета = Перечисления.ТипыСчетов.ПроцентыПоКредитам;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемПродаж;
		Счет.Записать();
		
	// 94.
	Счет = ПланыСчетов.Управленческий.НедостачиИПотериОтПорчиЦенностей.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ПрочиеОборотныеАктивы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 97.
	Счет = ПланыСчетов.Управленческий.РасходыБудущихПериодов.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ПрочиеОборотныеАктивы;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
	// 99.
	Счет = ПланыСчетов.Управленческий.ПрибылиИУбытки.ПолучитьОбъект();
	Счет.ТипСчета = Перечисления.ТипыСчетов.ГруппаСчетов;
	Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
	Счет.Записать();
	
		// 99.01
		Счет = ПланыСчетов.Управленческий.ПрибылиИУбыткиБезНалогаНаПрибыль.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.ПрибылиИУбытки;
		Счет.ТипСчета = Перечисления.ТипыСчетов.ПрибылиУбытки;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();
		
		// 99.02
		Счет = ПланыСчетов.Управленческий.ПрибылиИУбытки_НалогНаПрибыль.ПолучитьОбъект();
		Счет.Родитель = ПланыСчетов.Управленческий.ПрибылиИУбытки;
		Счет.ТипСчета = Перечисления.ТипыСчетов.НалогНаПрибыль;
		Счет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять;
		Счет.Записать();		
		
КонецПроцедуры // ЗагрузитьУправленческийПланСчетовПервыйЗапуск()

//(3) Процедура заполняет в ИБ справочник "Виды налогов".
//
Процедура ЗаполнитьВидыНалоговПервыйЗапуск()
	
	// 1. НДС.
	ВидНалога = Справочники.ВидыНалогов.СоздатьЭлемент();
	ВидНалога.Наименование = "НДС";
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.Записать();
	
	// 2. Налог на прибыль.
	ВидНалога = Справочники.ВидыНалогов.СоздатьЭлемент();
	ВидНалога.Наименование = "Налог на прибыль";
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.АвансовыйПлатежПриУСН.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ЕдиныйНалогПриУСН.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ПФРНакопительная.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_НакопительнаяЧасть;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ПФРСтраховая.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ТФОМС.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ФФОМС.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ЕНВД.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.ЕНВД;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.НДФЛСотрудники.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.НДФЛ;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_НакопительнаяЧасть;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ФСССотрудники.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ФССТравматизмСотрудники.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ФОМССотрудники.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФФОМС;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ПФРСвыше300тр.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.Патент.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.Записать();
	
	ВидНалога = Справочники.ВидыНалогов.ТорговыйСбор.ПолучитьОбъект();
	ВидНалога.СчетУчета = ПланыСчетов.Управленческий.Налоги;
	ВидНалога.СчетУчетаКВозмещению = ПланыСчетов.Управленческий.НалогиКВозмещению;
	ВидНалога.ВидНалога = Перечисления.ВидыНалогов.ТорговыйСбор;
	ДанныеПоНалогу = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога.ВидНалога, Неопределено, Неопределено);
	Если ДанныеПоНалогу <> Неопределено Тогда
		ВидНалога.КодБК = ДанныеПоНалогу.КодБК;
	КонецЕсли;
	ВидНалога.Записать();
	
КонецПроцедуры // ЗаполнитьВидыНалоговПервыйЗапуск()

//(5) Функция заполняет в ИБ спрвочник "Ставки НДС" и возвращает
// ссылку на ставку НДС 18% для дальнейшего использования.
//
Функция ЗаполнитьСтавкиНДСПервыйЗапуск()
	
	// 10%
	СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
	СтавкаНДС.Наименование = "10%";
	СтавкаНДС.Ставка = 10;
	СтавкаНДС.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.Пониженная;
	СтавкаНДС.Записать();
	
	// 18% / 118%
	СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
	СтавкаНДС.Наименование = "18% / 118%";
	СтавкаНДС.Расчетная = Истина;
	СтавкаНДС.Ставка = 18;
	СтавкаНДС.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.ОбщаяРасчетная;
	СтавкаНДС.Записать();
	
	// 10% / 110%
	СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
	СтавкаНДС.Наименование = "10% / 110%";
	СтавкаНДС.Расчетная = Истина;
	СтавкаНДС.Ставка = 10;
	СтавкаНДС.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.ПониженнаяРасчетная;
	СтавкаНДС.Записать();
	
	// 0%
	СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
	СтавкаНДС.Наименование = "0%";
	СтавкаНДС.Ставка = 0;
	СтавкаНДС.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.Нулевая;
	СтавкаНДС.Записать();
	
	// Без НДС
	СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
	СтавкаНДС.Наименование = "Без НДС";
	СтавкаНДС.НеОблагается = Истина;
	СтавкаНДС.Ставка = 0;
	СтавкаНДС.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.БезНДС;
	СтавкаНДС.Записать();
	
	// 20% / 120%
	СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
	СтавкаНДС.Наименование = "20% / 120%";
	СтавкаНДС.Расчетная = Истина;
	СтавкаНДС.Ставка = 20;
	СтавкаНДС.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.ОбщаяРасчетная;
	СтавкаНДС.Записать();
	
	// 20%
	СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
	СтавкаНДС.Наименование = "20%";
	СтавкаНДС.Ставка = 20;	
	СтавкаНДС.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.Общая;
	СтавкаНДС.Записать();
	
	// 18%
	СтавкаНДС = Справочники.СтавкиНДС.СоздатьЭлемент();
	СтавкаНДС.Наименование = "18%";
	СтавкаНДС.Ставка = 18;	
	СтавкаНДС.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.Общая;
	СтавкаНДС.Записать();
	
	Возврат СтавкаНДС.Ссылка;
	
КонецФункции // ЗаполнитьСтавкиНДСПервыйЗапуск()

//(7) Процедура создает график работы на основе производственного календаря 
// Российской Федерации по шаблону "Пятидневка"
//
Процедура СоздатьКалендарьПятидневкаРоссийскойФедерации() Экспорт
	
	ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	Если ПроизводственныйКалендарь = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не Справочники.Календари.НайтиПоРеквизиту("ПроизводственныйКалендарь", ПроизводственныйКалендарь).Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйГрафикРаботы = Справочники.Календари.СоздатьЭлемент();
	НовыйГрафикРаботы.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроизводственныйКалендарь, "Наименование");
	НовыйГрафикРаботы.ПроизводственныйКалендарь = ПроизводственныйКалендарь;
	НовыйГрафикРаботы.СпособЗаполнения = Перечисления.СпособыЗаполненияГрафикаРаботы.ПоНеделям;
	НовыйГрафикРаботы.ДатаНачала = НачалоГода(ТекущаяДатаСеанса());
	НовыйГрафикРаботы.УчитыватьПраздники = Истина;
	
	// Заполняем недельный цикл как пятидневку
	Для НомерДня = 1 По 7 Цикл
		НовыйГрафикРаботы.ШаблонЗаполнения.Добавить().ДеньВключенВГрафик = НомерДня <= 5;
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйГрафикРаботы, Истина, Истина);
	
КонецПроцедуры // СоздатьКалендарьПятидневкаРоссийскойФедерации()

//(15) Процедура заполняет справочники "Параметры расчетов" и "Виды начислений и удержаний".
//
Процедура ЗаполнитьПараметрыРасчетовИВидыНачислений()
	
	// Параметры расчетов.
	
	// Сумму продаж по ответственному (СПО)
	Если НЕ УправлениеНебольшойФирмойСервер.ПараметрРасчетаСуществует("СуммуПродажПоОтветственному") Тогда
		
		ПараметрРасчетовСПО = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		
		ПараметрРасчетовСПО.Наименование 		 = "Сумму продаж по ответственному";
		ПараметрРасчетовСПО.Идентификатор 	 = "СуммуПродажПоОтветственному"; 
		ПараметрРасчетовСПО.ПроизвольныйЗапрос = Истина;
		ПараметрРасчетовСПО.ЗадаватьЗначениеПриРасчетеЗП = Ложь;
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ВалютаУчетаКурс";
		НовыйПараметрЗапроса.Представление 			 = "ВалютаУчетаКурс";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ВалютаДокументаКратность";
		НовыйПараметрЗапроса.Представление 			 = "ВалютаДокументаКратность";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ВалютаДокументаКурс";
		НовыйПараметрЗапроса.Представление 			 = "ВалютаДокументаКурс";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ВалютаУчетаКратность";
		НовыйПараметрЗапроса.Представление 			 = "ВалютаУчетаКратность";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "НачалоПериода";
		НовыйПараметрЗапроса.Представление 			 = "НачалоПериода";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "КонецПериода";
		НовыйПараметрЗапроса.Представление 			 = "КонецПериода";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Организация";
		НовыйПараметрЗапроса.Представление 			 = "Организация";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Подразделение";
		НовыйПараметрЗапроса.Представление 			 = "Подразделение";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетовСПО.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Сотрудник";
		НовыйПараметрЗапроса.Представление 			 = "Сотрудник";
		
		ПараметрРасчетовСПО.Запрос = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ЕСТЬNULL(Продажи.Сумма * &ВалютаУчетаКурс * &ВалютаДокументаКратность / (&ВалютаДокументаКурс * &ВалютаУчетаКратность), 0)) КАК СуммаПродаж
		|ИЗ
		|	РегистрНакопления.Продажи КАК Продажи
		|ГДЕ
		|	Продажи.Сумма >= 0
		|	И Продажи.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Продажи.Организация = &Организация
		|	И Продажи.Подразделение = &Подразделение
		|	И Продажи.Ответственный = &Сотрудник
		|	И (ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.АктВыполненныхРабот) ССЫЛКА Документ.АктВыполненныхРабот
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ЗаказПокупателя) ССЫЛКА Документ.ЗаказПокупателя
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ОтчетОПереработке) ССЫЛКА Документ.ОтчетОПереработке
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ОтчетОРозничныхПродажах) ССЫЛКА Документ.ОтчетОРозничныхПродажах
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.РасходнаяНакладная) ССЫЛКА Документ.РасходнаяНакладная
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ЧекККМ) ССЫЛКА Документ.ЧекККМ)
		|
		|СГРУППИРОВАТЬ ПО
		|	Продажи.Ответственный";
		
		ПараметрРасчетовСПО.Записать();
		
	КонецЕсли;
	
	// Фиксированная сумма
	Если НЕ УправлениеНебольшойФирмойСервер.ПараметрРасчетаСуществует("ФиксированнаяСумма") Тогда
		
		ПараметрРасчетовФиксированнаяСумма = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовФиксированнаяСумма.Наименование 				= "Фиксированная сумма";
		ПараметрРасчетовФиксированнаяСумма.Идентификатор 	 			= "ФиксированнаяСумма";
		ПараметрРасчетовФиксированнаяСумма.ПроизвольныйЗапрос 			= Ложь;
		ПараметрРасчетовФиксированнаяСумма.ЗадаватьЗначениеПриРасчетеЗП = Истина;
		ПараметрРасчетовФиксированнаяСумма.Записать();
		
	КонецЕсли;
	
	// Норма дней
	Если НЕ УправлениеНебольшойФирмойСервер.ПараметрРасчетаСуществует("НормаДней") Тогда
		
		ПараметрРасчетовНормаДней = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовНормаДней.Наименование 		 = "Норма дней (производственный календарь)";
		ПараметрРасчетовНормаДней.Идентификатор 	 = "НормаДней";
		ПараметрРасчетовНормаДней.ПроизвольныйЗапрос = Истина;
		ПараметрРасчетовНормаДней.ЗадаватьЗначениеПриРасчетеЗП = Ложь;
		НовыйПараметрЗапроса 						 = ПараметрРасчетовНормаДней.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Организация";
		НовыйПараметрЗапроса.Представление 			 = "Организация";
		НовыйПараметрЗапроса 						 = ПараметрРасчетовНормаДней.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ПериодРегистрации";
		НовыйПараметрЗапроса.Представление 			 = "Период регистрации";
		ПараметрРасчетовНормаДней.Запрос 			 = 
		"ВЫБРАТЬ
		|	СУММА(1) КАК НормаДней
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО КалендарныеГрафики.Календарь = Организации.ПроизводственныйКалендарь
		|			И (Организации.Ссылка = &Организация)
		|ГДЕ
		|	КалендарныеГрафики.Год = ГОД(&ПериодРегистрации)
		|	И КалендарныеГрафики.ДатаГрафика МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И КалендарныеГрафики.ДеньВключенВГрафик";
		
		ПараметрРасчетовНормаДней.Записать();
		
	КонецЕсли;
	
	// Норма часов
	Если НЕ УправлениеНебольшойФирмойСервер.ПараметрРасчетаСуществует("НормаЧасов") Тогда
		
		ПараметрРасчетовНормаЧасов = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовНормаЧасов.Наименование 	  = "Норма часов (производственный календарь)";
		ПараметрРасчетовНормаЧасов.Идентификатор 	  = "НормаЧасов";
		ПараметрРасчетовНормаЧасов.ПроизвольныйЗапрос = Истина;
		ПараметрРасчетовНормаЧасов.ЗадаватьЗначениеПриРасчетеЗП = Ложь;
		НовыйПараметрЗапроса 						 = ПараметрРасчетовНормаЧасов.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Организация";
		НовыйПараметрЗапроса.Представление 			 = "Организация";
		НовыйПараметрЗапроса 						 = ПараметрРасчетовНормаЧасов.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ПериодРегистрации";
		НовыйПараметрЗапроса.Представление 			 = "Период регистрации";
		ПараметрРасчетовНормаЧасов.Запрос 			 = 
		"ВЫБРАТЬ
		|	СУММА(8) КАК НормаЧасов
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО КалендарныеГрафики.Календарь = Организации.ПроизводственныйКалендарь
		|			И (Организации.Ссылка = &Организация)
		|ГДЕ
		|	КалендарныеГрафики.Год = ГОД(&ПериодРегистрации)
		|	И КалендарныеГрафики.ДатаГрафика МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И КалендарныеГрафики.ДеньВключенВГрафик";
		ПараметрРасчетовНормаЧасов.Записать();
		
	КонецЕсли;
	
	// Норма дней по графику
	Если НЕ УправлениеНебольшойФирмойСервер.ПараметрРасчетаСуществует("НормаДнейГрафикСотрудника") Тогда
		
		ПараметрРасчетовНормаДней = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовНормаДней.Наименование 		 = "Норма дней (график работы сотрудника)";
		ПараметрРасчетовНормаДней.Идентификатор 	 = "НормаДнейГрафикСотрудника";
		ПараметрРасчетовНормаДней.ПроизвольныйЗапрос = Истина;
		ПараметрРасчетовНормаДней.ЗадаватьЗначениеПриРасчетеЗП = Ложь;
		НовыйПараметрЗапроса 						 = ПараметрРасчетовНормаДней.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ПериодРегистрации";
		НовыйПараметрЗапроса.Представление 			 = "Период регистрации";
		НовыйПараметрЗапроса 						 = ПараметрРасчетовНормаДней.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ГрафикРаботы";
		НовыйПараметрЗапроса.Представление 			 = "График работы";
		
		ПараметрРасчетовНормаДней.Запрос 			 = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДЕНЬ(ГрафикиРаботы.ВремяНачала)) КАК НормаДней
		|ИЗ
		|	РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
		|ГДЕ
		|	ГрафикиРаботы.ГрафикРаботы = &ГрафикРаботы
		|	И ГрафикиРаботы.ВремяНачала МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И ГрафикиРаботы.Год = ГОД(&ПериодРегистрации)";
		
		ПараметрРасчетовНормаДней.Записать();
		
	КонецЕсли;
	
	// Норма часов по графику
	Если НЕ УправлениеНебольшойФирмойСервер.ПараметрРасчетаСуществует("НормаЧасовГрафикСотрудника") Тогда
		
		ПараметрРасчетовНормаЧасов = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовНормаЧасов.Наименование 	  = "Норма часов (график работы сотрудника)";
		ПараметрРасчетовНормаЧасов.Идентификатор 	  = "НормаЧасовГрафикСотрудника";
		ПараметрРасчетовНормаЧасов.ПроизвольныйЗапрос = Истина;
		ПараметрРасчетовНормаЧасов.ЗадаватьЗначениеПриРасчетеЗП = Ложь;
		НовыйПараметрЗапроса 						 = ПараметрРасчетовНормаЧасов.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ПериодРегистрации";
		НовыйПараметрЗапроса.Представление 			 = "Период регистрации";
		НовыйПараметрЗапроса 						 = ПараметрРасчетовНормаЧасов.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ГрафикРаботы";
		НовыйПараметрЗапроса.Представление 			 = "График работы";
		
		ПараметрРасчетовНормаЧасов.Запрос 			 = 
		"ВЫБРАТЬ
		|	СУММА(ГрафикиРаботы.ЧасыРаботы) КАК НормаЧасов
		|ИЗ
		|	РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
		|ГДЕ
		|	ГрафикиРаботы.ГрафикРаботы = &ГрафикРаботы
		|	И ГрафикиРаботы.ВремяНачала МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И ГрафикиРаботы.Год = ГОД(&ПериодРегистрации)";
		ПараметрРасчетовНормаЧасов.Записать();
		
	КонецЕсли;
	
	// Отработано дней
	Если НЕ УправлениеНебольшойФирмойСервер.ПараметрРасчетаСуществует("ОтработаноДней") Тогда
		
		ПараметрРасчетовОтработаноДней = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовОтработаноДней.Наименование 	  = "Отработано дней";
		ПараметрРасчетовОтработаноДней.Идентификатор	  = "ОтработаноДней";
		ПараметрРасчетовОтработаноДней.ПроизвольныйЗапрос = Ложь;
		ПараметрРасчетовОтработаноДней.ЗадаватьЗначениеПриРасчетеЗП = Истина;
		ПараметрРасчетовОтработаноДней.Записать();
		
	КонецЕсли;
	
	// Отработано часов
	Если НЕ УправлениеНебольшойФирмойСервер.ПараметрРасчетаСуществует("ОтработаноЧасов") Тогда
		
		ПараметрРасчетовОтработаноЧасов = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовОтработаноЧасов.Наименование 	   = "Отработано часов";
		ПараметрРасчетовОтработаноЧасов.Идентификатор 	   = "ОтработаноЧасов";
		ПараметрРасчетовОтработаноЧасов.ПроизвольныйЗапрос = Ложь;
		ПараметрРасчетовОтработаноЧасов.ЗадаватьЗначениеПриРасчетеЗП = Истина;
		ПараметрРасчетовОтработаноЧасов.Записать();
		
	КонецЕсли;
	
	// Тарифная ставка
	Если НЕ УправлениеНебольшойФирмойСервер.ПараметрРасчетаСуществует("ТарифнаяСтавка") Тогда
		
		ПараметрРасчетовТарифнаяСтавка = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовТарифнаяСтавка.Наименование 	  = "Тарифная ставка";
		ПараметрРасчетовТарифнаяСтавка.Идентификатор 	  = "ТарифнаяСтавка";
		ПараметрРасчетовТарифнаяСтавка.ПроизвольныйЗапрос = Ложь;
		ПараметрРасчетовТарифнаяСтавка.ЗадаватьЗначениеПриРасчетеЗП = Истина;
		ПараметрРасчетовТарифнаяСтавка.Записать();
		
	КонецЕсли;
	
	// Отработано по заданиям
	Если НЕ УправлениеНебольшойФирмойСервер.ПараметрРасчетаСуществует("ОтработаноЧасовПоЗаданиям") Тогда
		
		ПараметрРасчетовСдельнаяВыработка = Справочники.ПараметрыРасчетов.СоздатьЭлемент();
		ПараметрРасчетовСдельнаяВыработка.Наименование 	= "Отработано часов по заданиям";
		ПараметрРасчетовСдельнаяВыработка.Идентификатор = "ОтработаноЧасовПоЗаданиям";
		ПараметрРасчетовСдельнаяВыработка.ПроизвольныйЗапрос = Истина;
		ПараметрРасчетовСдельнаяВыработка.ЗадаватьЗначениеПриРасчетеЗП = Ложь;
		
		НовыйПараметрЗапроса = ПараметрРасчетовСдельнаяВыработка.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя = "НачалоПериода"; 
		НовыйПараметрЗапроса.Представление = "Начало периода"; 
		
		НовыйПараметрЗапроса = ПараметрРасчетовСдельнаяВыработка.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя = "КонецПериода";
		НовыйПараметрЗапроса.Представление = "Конец периода";
		
		НовыйПараметрЗапроса = ПараметрРасчетовСдельнаяВыработка.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя = "Сотрудник";
		НовыйПараметрЗапроса.Представление = "Сотрудник";
		
		НовыйПараметрЗапроса = ПараметрРасчетовСдельнаяВыработка.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя = "Организация"; 
		НовыйПараметрЗапроса.Представление = "Организация"; 
		
		НовыйПараметрЗапроса = ПараметрРасчетовСдельнаяВыработка.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя = "Подразделение";
		НовыйПараметрЗапроса.Представление = "Подразделение";
		
		ПараметрРасчетовСдельнаяВыработка.Запрос =
		"ВЫБРАТЬ
		|	Источник.ЗагрузкаФактОборот
		|ИЗ
		|	РегистрНакопления.ЗаданияНаРаботу.Обороты(&НачалоПериода, &КонецПериода, Авто, ) КАК Источник
		|ГДЕ
		|	Источник.Сотрудник = &Сотрудник
		|	И Источник.СтруктурнаяЕдиница = &Подразделение
		|	И Источник.Организация = &Организация";
		
		ПараметрРасчетовСдельнаяВыработка.Записать();
		
	КонецЕсли;
	
	// Виды начислений
	Если НЕ УправлениеНебольшойФирмойСервер.НачальноеЗаполнениеВидовНачисленийУдержанийПроизводилось() Тогда
		
		// Группы
		НовоеНачисление 			 = Справочники.ВидыНачисленийИУдержаний.СоздатьГруппу();
		НовоеНачисление.Наименование = "Начисления";
		НовоеНачисление.Записать(); 
		
		ГруппаНачисление 			 = НовоеНачисление.Ссылка;
		
		НовоеНачисление 			 = Справочники.ВидыНачисленийИУдержаний.СоздатьГруппу();
		НовоеНачисление.Наименование = "Удержания";
		НовоеНачисление.Записать();
		ГруппаУдержание 			 = НовоеНачисление.Ссылка;
		
		// Оклад по дням
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Оклад по дням (производственный календарь)";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовоеНачисление.Формула				= "[ТарифнаяСтавка] * [ОтработаноДней] / [НормаДней]";
		НовоеНачисление.КодДоходаНДФЛ		= Справочники.КодыДоходовНДФЛ.Код2000;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
		НовоеНачисление.Записать();
		
		// Оклад по часам
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Оклад по часам (производственный календарь)";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.КосвенныеЗатраты;
		НовоеНачисление.Формула 			= "[ТарифнаяСтавка] * [ОтработаноЧасов] / [НормаЧасов]";
		НовоеНачисление.КодДоходаНДФЛ		= Справочники.КодыДоходовНДФЛ.Код2000;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
		НовоеНачисление.Записать();
		
		// Оклад по дням Графики
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Оклад по дням (график работы сотрудника)";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовоеНачисление.Формула				= "[ТарифнаяСтавка] * [ОтработаноДней] / [НормаДнейГрафикСотрудника]";
		НовоеНачисление.КодДоходаНДФЛ		= Справочники.КодыДоходовНДФЛ.Код2000;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
		НовоеНачисление.Записать();
		
		// Оклад по часам Графики
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Оклад по часам (график работы сотрудника)";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.КосвенныеЗатраты;
		НовоеНачисление.Формула 			= "[ТарифнаяСтавка] * [ОтработаноЧасов] / [НормаЧасовГрафикСотрудника]";
		НовоеНачисление.КодДоходаНДФЛ		= Справочники.КодыДоходовНДФЛ.Код2000;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
		НовоеНачисление.Записать();
		
		// Оплата по заданиям
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Оплата по заданиям";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.НезавершенноеПроизводство;
		НовоеНачисление.Формула 			= "[ТарифнаяСтавка] * [ОтработаноЧасовПоЗаданиям]";
		НовоеНачисление.КодДоходаНДФЛ		= Справочники.КодыДоходовНДФЛ.Код2000;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
		НовоеНачисление.Записать();
		
		// Процент от продаж по ответственному
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Процент от продаж по ответственному";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.НезавершенноеПроизводство;
		НовоеНачисление.Формула 			= "[СуммуПродажПоОтветственному]  / 100 *  [ТарифнаяСтавка]";
		НовоеНачисление.КодДоходаНДФЛ		= Справочники.КодыДоходовНДФЛ.Код2000;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
		НовоеНачисление.Записать();
		
		// Оплата по сдельным нарядам
		НовоеНачислениеСсылка				= Справочники.ВидыНачисленийИУдержаний.СдельнаяОплата;
		НовоеНачисление						= НовоеНачислениеСсылка.ПолучитьОбъект();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Сдельная оплата (тариф)";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.НезавершенноеПроизводство;
		НовоеНачисление.Формула 			= "";
		НовоеНачисление.КодДоходаНДФЛ		= Справочники.КодыДоходовНДФЛ.Код2010;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ДоговорыГПХ;
		НовоеНачисление.Записать();
		
		// Сдельная оплата процентом
		НовоеНачислениеСсылка				= Справочники.ВидыНачисленийИУдержаний.СдельнаяОплатаПроцент;
		НовоеНачисление						= НовоеНачислениеСсылка.ПолучитьОбъект();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Сдельная оплата (% от суммы)";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.НезавершенноеПроизводство;
		НовоеНачисление.Формула 			= "";
		НовоеНачисление.КодДоходаНДФЛ = Справочники.КодыДоходовНДФЛ.Код2010;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ДоговорыГПХ;
		НовоеНачисление.Записать();
		
		//Фиксированная сумма
		НовоеНачислениеСсылка				= Справочники.ВидыНачисленийИУдержаний.ФиксированнаяСумма;
		НовоеНачисление						= НовоеНачислениеСсылка.ПолучитьОбъект();
		НовоеНачисление.Код					= "";
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Сдельная оплата (фиксированная сумма)";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.НезавершенноеПроизводство;
		НовоеНачисление.Формула 			= "[ФиксированнаяСумма]";
		НовоеНачисление.УстановитьНовыйКод();
		НовоеНачисление.КодДоходаНДФЛ = Справочники.КодыДоходовНДФЛ.Код2010;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ДоговорыГПХ;
		НовоеНачисление.Записать();
		
		// Отпускные
		НовоеНачисление 					= Справочники.ВидыНачисленийИУдержаний.СоздатьЭлемент();
		НовоеНачисление.Родитель 			= ГруппаНачисление;
		НовоеНачисление.Наименование 		= "Отпускные";
		НовоеНачисление.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Начисление;
		НовоеНачисление.СчетЗатрат			= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовоеНачисление.Формула				= "";
		НовоеНачисление.КодДоходаНДФЛ = Справочники.КодыДоходовНДФЛ.Код2012;
		НовоеНачисление.ВидДоходаПоСтраховымВзносам = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
		НовоеНачисление.Записать();
		
		// Налог на доходы
		НовыйНалогСсылка				= Справочники.ВидыНачисленийИУдержаний.НалогНаДоходы;
		НовыйНалог						= НовыйНалогСсылка.ПолучитьОбъект();
		НовыйНалог.Родитель 			= ГруппаУдержание;
		НовыйНалог.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовыйНалог.СчетЗатрат			= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйНалог.Формула 			= "";
		НовыйНалог.ВидНалога = Справочники.ВидыНалогов.НДФЛСотрудники;
		НовыйНалог.Записать();
		
		// ПФР по суммарному тарифу
		НовыйНалогСсылка				= Справочники.ВидыНачисленийИУдержаний.ПФРПоСуммарномуТарифу;
		НовыйНалог						= НовыйНалогСсылка.ПолучитьОбъект();
		НовыйНалог.Родитель 			= ГруппаУдержание;
		НовыйНалог.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовыйНалог.СчетЗатрат	= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйНалог.Формула 			= "";
		НовыйНалог.ВидНалога = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники;
		НовыйНалог.Записать();
		
		// ПФР накопительная
		НовыйНалогСсылка				= Справочники.ВидыНачисленийИУдержаний.ПФРНакопительная;
		НовыйНалог						= НовыйНалогСсылка.ПолучитьОбъект();
		НовыйНалог.Родитель 			= ГруппаУдержание;
		НовыйНалог.Тип 				= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовыйНалог.СчетЗатрат	= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйНалог.Формула 			= "";
		НовыйНалог.ВидНалога = Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники;
		НовыйНалог.Записать();
		
		// ПФР страховая
		НовыйНалогСсылка				= Справочники.ВидыНачисленийИУдержаний.ПФРСтраховая;
		НовыйНалог						= НовыйНалогСсылка.ПолучитьОбъект();
		НовыйНалог.Родитель				= ГруппаУдержание;
		НовыйНалог.Тип					= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовыйНалог.СчетЗатрат	= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйНалог.Формула				= "";
		НовыйНалог.ВидНалога = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники;
		НовыйНалог.Записать();
		
		// ФСС
		НовыйНалогСсылка				= Справочники.ВидыНачисленийИУдержаний.ФСС;
		НовыйНалог						= НовыйНалогСсылка.ПолучитьОбъект();
		НовыйНалог.Родитель				= ГруппаУдержание;
		НовыйНалог.Тип					= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовыйНалог.СчетЗатрат	= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйНалог.Формула				= "";
		НовыйНалог.ВидНалога = Справочники.ВидыНалогов.ФСССотрудники;
		НовыйНалог.Записать();
		
		// ФСС несчастные случаи
		НовыйНалогСсылка				= Справочники.ВидыНачисленийИУдержаний.ФССНесчастныеСлучаи;
		НовыйНалог						= НовыйНалогСсылка.ПолучитьОбъект();
		НовыйНалог.Родитель				= ГруппаУдержание;
		НовыйНалог.Тип					= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовыйНалог.СчетЗатрат	= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйНалог.Формула				= "";
		НовыйНалог.ВидНалога = Справочники.ВидыНалогов.ФССТравматизмСотрудники;
		НовыйНалог.Записать();
		
		// ФФОМС
		НовыйНалогСсылка				= Справочники.ВидыНачисленийИУдержаний.ФФОМС;
		НовыйНалог						= НовыйНалогСсылка.ПолучитьОбъект();
		НовыйНалог.Родитель				= ГруппаУдержание;
		НовыйНалог.Тип					= Перечисления.ТипыНачисленийИУдержаний.Налог;
		НовыйНалог.СчетЗатрат	= ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйНалог.Формула				= "";
		НовыйНалог.ВидНалога = Справочники.ВидыНалогов.ФОМССотрудники;
		НовыйНалог.Записать();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПараметрыРасчетовИВидыНачислений()

//(24) Процедура заполняет в настройки подбора при первом запуске
//
Процедура ЗаполнитьПользовательскиеНастройкиПодбора()
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	УправлениеНебольшойФирмойСервер.УстановитьСтандартныеНастройкиПодбора(ТекущийПользователь);
	
КонецПроцедуры // ЗаполнитьПользовательскиеНастройкиПодбора()

//(27) Процедура удаляет регистрацию изменений базовых классификаторов, которые должны выгружаться
// только при наличии на них ссылок в других выгружаемых объектах.
//
Процедура УдалитьРегистрациюИзмененийБазовыхКлассификаторов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбменУправлениеНебольшойФирмойБухгалтерия20.Ссылка КАК УзелОбмена
	|ИЗ
	|	ПланОбмена.ОбменУправлениеНебольшойФирмойБухгалтерия20 КАК ОбменУправлениеНебольшойФирмойБухгалтерия20
	|ГДЕ
	|	ОбменУправлениеНебольшойФирмойБухгалтерия20.Ссылка <> &ЭтотУзелБП20
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбменУправлениеНебольшойФирмойБухгалтерия30.Ссылка КАК УзелОбмена
	|ИЗ
	|	ПланОбмена.ОбменУправлениеНебольшойФирмойБухгалтерия30 КАК ОбменУправлениеНебольшойФирмойБухгалтерия30
	|ГДЕ
	|	ОбменУправлениеНебольшойФирмойБухгалтерия30.Ссылка <> &ЭтотУзелБП30";
	
	Запрос.УстановитьПараметр("ЭтотУзелБП20", ПланыОбмена.ОбменУправлениеНебольшойФирмойБухгалтерия20.ЭтотУзел());
	Запрос.УстановитьПараметр("ЭтотУзелБП30", ПланыОбмена.ОбменУправлениеНебольшойФирмойБухгалтерия30.ЭтотУзел());
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УзлыОбменаСБП20 = МассивРезультатов[0].Выгрузить().ВыгрузитьКолонку("УзелОбмена");
	УзлыОбменаСБП30 = МассивРезультатов[1].Выгрузить().ВыгрузитьКолонку("УзелОбмена");
	
	Попытка
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП20, Метаданные.Справочники.Банки);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП20, Метаданные.Справочники.Валюты);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП20, Метаданные.Справочники.КлассификаторЕдиницИзмерения);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП20, Метаданные.Справочники.СтраныМира);
	Исключение
	КонецПопытки;
	
	Попытка
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП30, Метаданные.Справочники.Банки);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП30, Метаданные.Справочники.Валюты);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП30, Метаданные.Справочники.КлассификаторЕдиницИзмерения);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзлыОбменаСБП30, Метаданные.Справочники.СтраныМира);
	Исключение
	КонецПопытки;
	
КонецПроцедуры // УдалитьРегистрациюИзмененийБазовыхКлассификаторов()

//(29) Процедура заполняет бланки договоров из макета.
//
Процедура ЗаполнитьБланкиДоговоров()
	
	НачатьТранзакцию();
	Попытка
		МакетДоговорАренды 			= Справочники.БланкиДоговоров.ПолучитьМакет("МакетДоговорАренды");
		МакетДоговорКуплиПродажи 	= Справочники.БланкиДоговоров.ПолучитьМакет("МакетДоговорКуплиПродажи");
		МакетДоговорОказанияУслуг 	= Справочники.БланкиДоговоров.ПолучитьМакет("МакетДоговорОказанияУслуг");
		МакетДоговорПоставки 		= Справочники.БланкиДоговоров.ПолучитьМакет("МакетДоговорПоставки");
		
		Макеты = Новый Массив(4);
		Макеты[0] = МакетДоговорАренды;
		Макеты[1] = МакетДоговорКуплиПродажи;
		Макеты[2] = МакетДоговорОказанияУслуг;
		Макеты[3] = МакетДоговорПоставки;
		
		НаименованияМакетов = Новый Массив(4);
		НаименованияМакетов[0] = "МакетДоговорАренды";
		НаименованияМакетов[1] = "МакетДоговорКуплиПродажи";
		НаименованияМакетов[2] = "МакетДоговорОказанияУслуг";
		НаименованияМакетов[3] = "МакетДоговорПоставки";
		
		Бланки = Новый Массив(4);
		Бланки[0] = Справочники.БланкиДоговоров.ДоговорАренды.Ссылка.ПолучитьОбъект();
		Бланки[1] = Справочники.БланкиДоговоров.ДоговорКуплиПродажи.Ссылка.ПолучитьОбъект();
		Бланки[2] = Справочники.БланкиДоговоров.ДоговорОказанияУслуг.Ссылка.ПолучитьОбъект();
		Бланки[3] = Справочники.БланкиДоговоров.ДоговорПоставки.Ссылка.ПолучитьОбъект();
		
		Итератор = 0;
		Пока Итератор < Макеты.Количество() Цикл 
			
			МакетДоговора = Справочники.БланкиДоговоров.ПолучитьМакет(НаименованияМакетов[Итератор]);
			
			ТекстХТМЛ = МакетДоговора.ПолучитьТекст();
			Вложения = Новый Структура;
			
			КоличествоРедактируемыхПараметров = СтрЧислоВхождений(ТекстХТМЛ, "{ЗаполняемоеПоле");
			
			Бланки[Итератор].РедактируемыеПараметры.Очистить();
			НомерПараметра = 1;
			Пока НомерПараметра <= КоличествоРедактируемыхПараметров Цикл 
				НоваяСтрока = Бланки[Итератор].РедактируемыеПараметры.Добавить();
				НоваяСтрока.Представление = "{ЗаполняемоеПоле" + НомерПараметра + "}";
				НоваяСтрока.Идентификатор = "parameter" + НомерПараметра;
				
				НомерПараметра = НомерПараметра + 1;
			КонецЦикла;
			
			Падежи = Новый Массив;
			Падежи.Добавить(Неопределено);
			Падежи.Добавить("именительный");
			Падежи.Добавить("родительный");
			Падежи.Добавить("дательный");
			Падежи.Добавить("винительный");
			Падежи.Добавить("творительный");
			Падежи.Добавить("предложный");
			
			Для каждого ПараметрПеречисление Из Перечисления.ПараметрыБланковДоговоровСКонтрагентами Цикл
				
				Для каждого Падеж Из Падежи Цикл
					Если Падеж = Неопределено Тогда
						ПредставлениеПадежа = "";
					Иначе
						ПредставлениеПадежа = " (" + Падеж + ")";
					КонецЕсли;
					
					Параметр = "{" + Строка(ПараметрПеречисление) + ПредставлениеПадежа + "}";
					ЧислоВхождений = СтрЧислоВхождений(ТекстХТМЛ, Параметр);
					Для НомерПараметра = 1 По ЧислоВхождений Цикл
						Если НомерПараметра = 1 Тогда
							Представление = "{" + Строка(ПараметрПеречисление) + ПредставлениеПадежа + "%deleteSymbols%" + "}";
							Идентификатор = "infoParameter" + Строка(ПараметрПеречисление) + НомерПараметра;
						Иначе
							Представление = "{" + Строка(ПараметрПеречисление) + НомерПараметра + ПредставлениеПадежа + "}";
							Идентификатор = "infoParameter" + Строка(ПараметрПеречисление) + НомерПараметра;
						КонецЕсли;
						
						ПервоеВхождение = Найти(ТекстХТМЛ, Параметр);
						
						ТекстХТМЛ = Лев(ТекстХТМЛ, ПервоеВхождение - 1) + Представление + Сред(ТекстХТМЛ, ПервоеВхождение + СтрДлина(Параметр));
						
						НоваяСтрока = Бланки[Итератор].ПараметрыИнфобазы.Добавить();
						НоваяСтрока.Представление = СтрЗаменить(Представление, "%deleteSymbols%", "");
						НоваяСтрока.Идентификатор = Идентификатор;
						НоваяСтрока.Параметр = ПараметрПеречисление;
						
					КонецЦикла;
					ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ, "%deleteSymbols%", "");
				КонецЦикла;
			КонецЦикла;
			
			СтруктураФорматированногоДокумента = Новый Структура;
			СтруктураФорматированногоДокумента.Вставить("ТекстHTML", ТекстХТМЛ);
			СтруктураФорматированногоДокумента.Вставить("Вложения", Вложения);
			
			Бланки[Итератор].Бланк = Новый ХранилищеЗначения(СтруктураФорматированногоДокумента);
			Бланки[Итератор].МакетПредопределенногоБланка = НаименованияМакетов[Итератор];
			Бланки[Итератор].КоличествоРедактируемыхПараметров = КоличествоРедактируемыхПараметров;
			Бланки[Итератор].Записать();
			
			Итератор = Итератор + 1;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("ru='Заполнение бланков договоров.'", УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

//(35) Заполняем регистр сведений ЗначенияКБК
Процедура ЗагрузитьЗначенияКБК()
	
	Набор = РегистрыСведений.ЗначенияКБК.СоздатьНаборЗаписей();
	
	Запись = Набор.Добавить();
	Запись.Период = '20000101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРНакопительная;
	Запись.Значение = "39210202100061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20110101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРНакопительная;
	Запись.Значение = "39210202110061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20000101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховая;
	Запись.Значение = "39210202100061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20110101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховая;
	Запись.Значение = "39210202100061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20000101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ТФОМС;
	Запись.Значение = "39210202110091000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20110101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ТФОМС;
	Запись.Значение = "39210202101081012160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20000101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФФОМС;
	Запись.Значение = "39210202100081000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20110101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФФОМС;
	Запись.Значение = "39210202101081011160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20110101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ЕНВД;
	Запись.Значение = "18210502010021000110";
	
	// 2012 год
	
	// начисление зп
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники;
	Запись.Значение = "39210202020061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники;
	Запись.Значение = "39210202010061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФСССотрудники;
	Запись.Значение = "39310202090071000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФССТравматизмСотрудники;
	Запись.Значение = "39310202050071000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.НДФЛСотрудники;
	Запись.Значение = "18210102010011000110";
	
	Запись = Набор.Добавить();
	Запись.Период = '20120101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФОМССотрудники;
	Запись.Значение = "39210202101081011160";
	
	// 2013 год
	
	Запись = Набор.Добавить();
	Запись.Период = '20130101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРНакопительная;
	Запись.Значение = "39210202150061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20130101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховая;
	Запись.Значение = "39210202140061000160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20130101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСвыше300тр;
	Запись.Значение = "39210202140061000160";
	
	
	
	// 2015 год
	
	Запись = Набор.Добавить();
	Запись.Период = '20150101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ТорговыйСбор;
	Запись.Значение = "18210505010020000110";
	
	// 2017 год
	Запись = Набор.Добавить();
	Запись.Период = '20160101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховая;
	Запись.Значение = "18210202140061100160";
	// Было 39210202140061100160
	
	Запись = Набор.Добавить();
	Запись.Период = '20160101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСвыше300тр;
	Запись.Значение = "18210202140061200160";
	// Было 39210202140061200160
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСвыше300тр;
	Запись.Значение = "18210202140061110160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховая;
	Запись.Значение = "18210202140061110160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20150101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники;
	Запись.Значение = "18210202010061000160";
	// Было 39210202010061000160
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники;
	Запись.Значение = "18210202010061010160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20150101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФСССотрудники;
	Запись.Значение = "18210202090071000160";
	// Было 39310202090071000160
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФСССотрудники;
	Запись.Значение = "18210202090071010160";
	// Было 39310202090071000160
	
	Запись = Набор.Добавить();
	Запись.Период = '20150101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФОМССотрудники;
	Запись.Значение = "18210202101081011160";
	// Было 39210202101081011160
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФОМССотрудники;
	Запись.Значение = "18210202101081013160";
	// Было 39210202101081011160
	
	Запись = Набор.Добавить();
	Запись.Период = '20150101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФФОМС;
	Запись.Значение = "18210202103081011160";
	// Было 39210202103081011160
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ФФОМС;
	Запись.Значение = "18210202103081013160";
	
	Запись = Набор.Добавить();
	Запись.Период = '20170101';
	Запись.ВидВзаиморасчета = Справочники.ВидыНалогов.ТорговыйСбор;
	Запись.Значение = "18210505010021000110";
	
	Набор.Записать();
	
КонецПроцедуры

//(39) Заполняет справочник КодыДоходовНДФЛ
//
Процедура ЗаполнитьКодыНДФЛ()
	
	Код2000 = Справочники.КодыДоходовНДФЛ.Код2000.ПолучитьОбъект();
	Код2000.СтавкаНДФЛ = 13;
	Код2000.Записать();
	
	Код2010 = Справочники.КодыДоходовНДФЛ.Код2010.ПолучитьОбъект();
	Код2010.СтавкаНДФЛ = 13;
	Код2010.Записать();
	
	Код2012 = Справочники.КодыДоходовНДФЛ.Код2012.ПолучитьОбъект();
	Код2012.СтавкаНДФЛ = 13;
	Код2012.Записать();
	
КонецПроцедуры

//(40) Процедура заполняет справочник ДокументыФизическихЛиц по классификатору МВД.
// Для тех конфигураций, в которых в справочнике "Виды документов физических лиц" нет реквизитов.
//
Процедура ЗаполнитьДокументыФизическихЛицПоКлассификаторуМВД(СтруктураПараметров = Неопределено) Экспорт
	
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ПаспортСССР,			"", 	"01", "ПАСПОРТ");						// R-ББ 999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортСССР,		"", 	"02", "ЗГПАСПОРТ");						// 99 0999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.СвидетельствоОРождении,	"", 	"03", "СВИД О РОЖД");					// R-ББ 999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.УдостоверениеОфицера,	"", 	"04", "УДОСТ ОФИЦЕРА");					// ББ 9999990
	ОписатьДокумент(,"Справка об освобождении из места лишения свободы",					"05", "СПРАВКА ОБ ОСВ");				// -
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ПаспортМинморфлота, 	"",		"06", "ПАСПОРТ МОРФЛТ");				// ББ 999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ВоенныйБилет, "Военный билет солдата (матроса, сержанта, старшины)", "07", "ВОЕННЫЙ БИЛЕТ"); // ББ 0999999
	ОписатьДокумент(, "Временное удостоверение, выданное взамен военного билета",			"08", "ПРОЧЕЕ");						// -
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ДипломатическийПаспорт, "",		"09", "ДИППАСПОРТ РФ"); 				// 99 9999999
	ОписатьДокумент(, "Паспорт иностранного гражданина",									"10", "ИНПАСПОРТ");						// -
	ОписатьДокумент(, "Свидетельство о рассмотрении ходатайства о признании беженцем на территории Российской Федерации по существу", "11", "СВИД БЕЖЕНЦА"); // -
	ОписатьДокумент(, "Вид на жительство в Российской Федерации",							"12", "ВИД НА ЖИТЕЛЬ");					// -
	ОписатьДокумент(, "Удостоверение беженца",												"13", "УДОСТ БЕЖЕНЦА");					// -
	ОписатьДокумент(, "Временное удостоверение личности гражданина Российской Федерации",	"14", "ВРЕМ УДОСТ");					// -
	ОписатьДокумент(, "Разрешение на временное проживание в Российской Федерации",			"15", "ПРОЧЕЕ");						// -
	ОписатьДокумент(, "Свидетельство о предоставлении временного убежища на территории Российской Федерации", "18", "ПРОЧЕЕ");		// ББ-999 9999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ,				"",		"21", "ПАСПОРТ РОССИИ");				// 99 99 9999990
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортРФ,		"",		"22", "ЗГПАСПОРТ РФ");					// 99 9999999
	ОписатьДокумент(, "Свидетельство о рождении, выданное уполномоченным органом иностранного государства", "23", "ПРОЧЕЕ");		// -
	ОписатьДокумент(, "Удостоверение личности военнослужащего Российской Федерации",		"24", "ПРОЧЕЕ");						// ББ 9999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ПаспортМоряка,			"",		"26", "ПАСПОРТ МОРЯКА");				// ББ 0999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ВоенныйБилетОфицераЗапаса, "",	"27", "БИЛЕТ ОЗ");						// ББ 0999999
	ОписатьДокумент(, "Иные документы, выдаваемые ОВД",										"91", "ПРОЧЕЕ");						// -
	
	Если СтруктураПараметров <> Неопределено Тогда
		СтруктураПараметров.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОписатьДокумент(СсылкаНаЭлемент = Неопределено, Наименование = "", КодМВД = "", КодПФР = "")

	Если Не ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
		Если Наименование = "" Тогда
			Возврат
		КонецЕсли;
		СсылкаНаЭлемент = Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию(Наименование);
	КонецЕсли;

	Если ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
		ДанныеИБ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭлемент, "КодМВД, КодПФР");
		Если ДанныеИБ.КодМВД = КодМВД И ДанныеИБ.КодПФР = КодПФР Тогда
			Возврат
		КонецЕсли;
		Элемент = СсылкаНаЭлемент.ПолучитьОбъект();
	Иначе
		Элемент = Справочники.ВидыДокументовФизическихЛиц.СоздатьЭлемент();
	КонецЕсли;

	Если ЗначениеЗаполнено(Наименование) Тогда
		Элемент.Наименование = Наименование;
	КонецЕсли;
	Элемент.КодМВД = КодМВД;
	Элемент.КодПФР = КодПФР;
	
	Элемент.ОбменДанными.Загрузка = Истина;
	Элемент.Записать();

КонецПроцедуры

//(43) Создание шаблонов условий печати в счетах на оплату
Процедура ЗаполнитьДополнительныеУсловияДляПечати() Экспорт
	
	Справочники.ДополнительныеУсловия.ЗаполнениеТиповыхДополнительныхУсловий();
	
КонецПроцедуры

//(45) Идентификаторы формул и типы видов цен
Процедура ОбновитьПредопределенныеВидыЦен() Экспорт
	
	// Наличие видов цен контрагентов в новой ИБ не предполагается, но такую возможность поддержим...
	
	Запрос = Новый Запрос(
	"Выбрать Справочник.ВидыЦен.Ссылка КАК ВидЦен, Истина КАК ЭтоЦеныНоменклатуры 
	|	Где Справочник.ВидыЦен.ИдентификаторФормул = """" ИЛИ Справочник.ВидыЦен.ТипВидаЦен = Значение(Перечисление.ТипыВидовЦен.ПустаяСсылка)
	|
	|Объединить Все
	|
	|Выбрать Справочник.ВидыЦенКонтрагентов.Ссылка, Ложь Где Справочник.ВидыЦенКонтрагентов.ИдентификаторФормул = """"");
	
	РезультатЗапроса = Запрос.Выполнить();
	Попытка
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ВидЦенОбъект = Выборка.ВидЦен.ПолучитьОбъект();
			
			ОписаниеВладельца = "";
			Если Выборка.ЭтоЦеныНоменклатуры Тогда
				
				ВидЦенОбъект.ТипВидаЦен = Перечисления.ТипыВидовЦен.Статический;
				
			Иначе
				
				ОписаниеВладельца = Строка(Выборка.ВидЦен.Владелец);
				
			конецЕсли;
			
			ЦенообразованиеФормулыСервер.СформироватьНовыйИдентификаторВидаЦен(ВидЦенОбъект.ИдентификаторФормул, Выборка.ВидЦен.Наименование, ОписаниеВладельца);
			
			ВидЦенОбъект.Записать();
			
		КонецЦикла;
		
	Исключение
		
		ЗаписьЖурналаРегистрации("Идентификаторы.ВидыЦен", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

//(47) Устанавливает константу ФункциональнаяОпцияОпросНалоги
Процедура УстановитьКонстантуУчастияВОпросеПоНалогам()
	
	Константы.ФункциональнаяОпцияОпросНалоги.Установить(Истина);
	
КонецПроцедуры

//(49) Заполняет справочник ключевых операций, устанавливает целевое время
Процедура ЗаполнитьРеквизитыКлючевыхОпераций() Экспорт
	
	Попытка
		ОценкаПроизводительностиПереопределяемый.ЗаполнитьЦелевоеВремяОперацийПроизводительности();
	Исключение
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("ru='Заполнение ключевых операций.'", УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

//(4) Возвращает объект по коду.
//    Если объект не найден в справочнике, создаёт новый объет и заполняет его из классификатора.
Функция СправочникОбъектВалютыПоКоду(Знач КодВалюты)
	
	ВалютаСсылка = Справочники.Валюты.НайтиПоКоду(КодВалюты);
	Если ЗначениеЗаполнено(ВалютаСсылка) Тогда
		Возврат ВалютаСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	Результат = Справочники.Валюты.СоздатьЭлемент();
	
	КлассификаторXML = Обработки.ЗагрузкаКурсовВалют.ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст();
	
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	ЗаписьОКВ = КлассификаторТаблица.Найти(КодВалюты, "Code"); 
	Если ЗаписьОКВ = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Код = ЗаписьОКВ.Code;
	Результат.Наименование = ЗаписьОКВ.CodeSymbol;
	Результат.НаименованиеПолное = ЗаписьОКВ.Name;
	Если ЗаписьОКВ.RBCLoading Тогда
		Результат.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета;
	Иначе
		Результат.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
	КонецЕсли;
	Результат.ПараметрыПрописи = ЗаписьОКВ.NumerationItemOptions;
	
	Возврат Результат;
	
КонецФункции

//(50) МобильноеПриложение
Процедура УстановитьКонстантуЭтоОбычноеПриложение() Экспорт
	
	Если НЕ Константы.ЭтоМобильноеПриложение.Получить() Тогда
		Константы.ЭтоОбычноеПриложение.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

//(51) Процедура заполняет справочники "Параметры расчетов доставки".
Процедура ЗаполнитьПараметрыРасчетовДоставки()
	
	// Параметры расчетов.
	
	// Цена
	Если НЕ ДоставкаСервер.ПараметрРасчетаСуществует("Цена") Тогда
		
		ПараметрРасчетов = Справочники.ПараметрыРасчетовДоставки.СоздатьЭлемент();
		
		ПараметрРасчетов.Наименование 	 = "Цена";
		ПараметрРасчетов.Идентификатор 	 = "Цена"; 
		ПараметрРасчетов.ПроизвольныйЗапрос = Истина;
		ПараметрРасчетов.ЗадаватьЗначениеПриРасчете = Ложь;
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетов.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Заказ.ВидЦен";
		НовыйПараметрЗапроса.Представление 			 = "Вид цен";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетов.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Заказ.Дата";
		НовыйПараметрЗапроса.Представление 			 = "Дата заказа";
		
		НовыйПараметрЗапроса 						 = ПараметрРасчетов.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "Заказ.НоменклатураДоставки";
		НовыйПараметрЗапроса.Представление 			 = "Услуга";
		
		ПараметрРасчетов.Запрос = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЦеныНоменклатурыСрезПоследних.Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&ЗаказДата,
		|			ВидЦен = &ЗаказВидЦен
		|				И Номенклатура = &ЗаказНоменклатураДоставки) КАК ЦеныНоменклатурыСрезПоследних";
		
		ПараметрРасчетов.Записать();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПараметрыРасчетовДоставки()

//(52) Процедура заполняет реквизиты собственной службы доставки.
//
Процедура ЗаполнитьРеквизитыСобственнойСлужбыДоставки() Экспорт
	
	СсылкаНаОбъект = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СлужбыДоставки.ДоставкаСобственнымиСилами");
	Если СсылкаНаОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект = СсылкаНаОбъект.ПолучитьОбъект();
	Объект.ВариантУчета = Перечисления.ВариантыУчетаДоставки.ДоставкаСОплатой;
	Объект.ПараметрыРасчетов.Очистить();
	Объект.ЗначенияФормулы.Очистить();
	Объект.ДоступныеСпособыДоставки.Очистить();
	Объект.ДоступныеСпособыДоставки.Добавить().СпособДоставки = Перечисления.СпособыДоставки.Курьер;
	Объект.ДоступныеСпособыДоставки.Добавить().СпособДоставки = Перечисления.СпособыДоставки.Почта;
	Объект.ДоступныеСпособыОтгрузки.Очистить();
	Объект.ФормулаСтоимости = "0";
	Объект.ФормулаСебестоимости = "0";
	Объект.Записать();
	
КонецПроцедуры

//(55) Настройки представлений кодов в печатных формах
//
Процедура ЗаполнитьНастройкиПредставленийВПечатныхФормахПриНачалеРаботы()
	
	Если Константы.УдалитьАртикулНоменклатурыВСодержание.Получить() = Истина Тогда
		
		Константы.ПредставлениеКодовВПечатныхФормах.Установить(Перечисления.КодыНоменклатурыВДокументах.Артикул);
		
	Иначе
		
		Константы.ПредставлениеКодовВПечатныхФормах.Установить(Перечисления.КодыНоменклатурыВДокументах.Код);
		
	КонецЕсли;
	
	Константы.ПредставлениеСкидкиВПечатнойФорме.Установить(Перечисления.СпособОтображенияСкидок.Сумма);
	
	Константы.ПредставлениеНомераДокументаБезПрефиксаИнформационнойБазы.Установить(Истина);
	Константы.ПредставлениеНомераДокументаБезПрефиксаПользователя.Установить(Истина);
	Константы.ПредставлениеНомераДокументаБезПрефиксаОрганизации.Установить(Истина);
	Константы.ПредставлениеНомераДокументаСЛидирующимиНулями.Установить(Ложь);
	
КонецПроцедуры

//(58) Предзаполненное округление копеек в суммах документов
Процедура СоздатьПредзаполняемоеОкруглениеСуммДокументов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АвтоматическиеСкидки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.АвтоматическиеСкидки КАК АвтоматическиеСкидки
	|ГДЕ
	|	АвтоматическиеСкидки.СпособПредоставления = Значение(Перечисление.СпособыПредоставленияСкидокНаценок.Округление)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Количество() = 0 Тогда
	
		Округление = Справочники.АвтоматическиеСкидки.СоздатьЭлемент();
		Округление.Наименование = "Без копеек";
		Округление.Действует = Ложь;
		Округление.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Округление;
		Округление.Назначение = Перечисления.НазначенияАвтоматическихСкидок.Везде;
		Округление.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе;
		Округление.ВариантОграниченияПоНоменклатуре = Перечисления.ВариантыОграниченийСкидокПоНоменклатуре.ПоНоменклатуре;
		Округление.ВалютаПредоставления = Константы.ВалютаУчета.Получить();
		Округление.ВариантОкругления = Перечисления.ВариантыОкругления.ПоАрифметическимПравилам;
		Округление.ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр1;
		
		Попытка
			Округление.Записать();
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

//(59) Установка значений по умолчанию для реквизитов расчетов в карточке котрагента.
Процедура УстановитьЗначенияПоУмолчаниюДляРеквизитовРасчетов() Экспорт
	
	Константы.ВестиРасчетыПоДоговорам.Установить(Истина);
	Константы.ВестиРасчетыПоДокументам.Установить(Истина);
	Константы.ВестиРасчетыПоЗаказам.Установить(Истина);
	Константы.ВестиУчетОплатыПоСчетам.Установить(Истина);
	
КонецПроцедуры

//(60) Начало действия Постановления Правительства РФ № 981 (счет-фактура)
Процедура УстановитьДатуНачалаДействияПостановления981() Экспорт
	
	Константы.НачалоИспользованияСФ981.Установить(Дата(2017, 10, 01));
	
КонецПроцедуры

//(63) Установить константу "ИспользоватьЧатВОбсуждениях"
//
Процедура УстановитьКонстантуИспользоватьЧатВОбсуждениях() Экспорт
	
	Если НЕ Константы.ИспользоватьЧатВОбсуждениях.Получить() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Обсуждения.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.Обсуждения КАК Обсуждения
		|ГДЕ
		|	НЕ Обсуждения.Системный";
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Константы.ИспользоватьЧатВОбсуждениях.Установить(Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//(64) Установка варианта возврата по чеку из закрытой смены
Процедура УстановитьВариантВозвратаПоЗакрытойСмене() Экспорт
	
	Если Константы.ВариантВозвратаПоЗакрытойСмене.Получить() = Перечисления.ВариантыВозвратаПоЗакрытойСмене.ПустаяСсылка() Тогда
		Константы.ВариантВозвратаПоЗакрытойСмене.Установить(Перечисления.ВариантыВозвратаПоЗакрытойСмене.ПН_Чек);
	КонецЕсли;
	
КонецПроцедуры

//(65) Установка значений констант начального заполнения оснований печати для заказа покупателя и счета на оплату
Процедура НачальноеЗаполнениеОснованийПечатиСчетовИЗаказов() Экспорт
	
	Константы.ОснованиеПечатиЗаказПокупателя.Установить(Перечисления.ОснованиеПечатиСпособНачальногоЗаполнение.ДоговорКонтрагента);
	Константы.ОснованиеПечатиСчетНаОплату.Установить(Перечисления.ОснованиеПечатиСпособНачальногоЗаполнение.ДоговорКонтрагента);
	
КонецПроцедуры

//(67) Обработчик обновления графиков учета рабочего времени
Процедура ОбновитьГрафикиУчетаРабочегоВремени() Экспорт
	
	ВыборкаГрафиков = Справочники.ГрафикиРаботы.Выбрать();
	Если ВыборкаГрафиков.Следующий() Тогда
		
		Справочники.ГрафикиРаботы.ОбновитьГрафикиУчетаРабочегоВремени();
		Справочники.ПараметрыРасчетов.ДополнитьПараметрыРасчета();
		Справочники.ВидыНачисленийИУдержаний.ДополнитьВидыНачислений();
		
	Иначе
		
		Справочники.ГрафикиРаботы.СозадьПредопреденныеШаблоныГрафиков();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПервогоЗапуска

// Процедура заполняет пустую ИБ общими данными
//
// К данным относятся неразделенные сведения, например, глобальные настройки сервиса
//
Процедура ПервыйЗапуск_ОбщиеДанные() Экспорт
	
	НачатьТранзакцию();
	
	// 1. Заполним константу ИзвлекатьТекстыФайловНаСервере
	Константы.ИзвлекатьТекстыФайловНаСервере.Установить(Истина);
	Константы.ИспользоватьПроверкуКонтрагентов.Установить(Истина);
	
	// 2. Заполним календарь отчетности
	Справочники.КалендарьПодготовкиОтчетности.ЗагрузитьКалендарьПодготовкиОтчетности();
	
	// 3. Загружаем  тарифы страховых взносов с предельными величинами
	Справочники.ВидыТарифовСтраховыхВзносов.ЗаполнитьСправочникВидыТарифовСтраховыхВзносов();
	Справочники.ВидыТарифовСтраховыхВзносов.ЗаполнитьКодыВидовТарифаСтраховыхВзносов_2012();
	РегистрыСведений.ТарифыСтраховыхВзносов.УстановитьЗначенияТарифовСтраховыхВзносов2011_2012();
	РегистрыСведений.ПредельнаяВеличинаБазыСтраховыхВзносов.УстановитьПредельнуюВеличинуБазыСтраховыхВзносов();
	
	// 4. Заполняем виды предпринимательской деятельности
	Справочники.ВидыПредпринимательскойДеятельности.ЗаполнитьВидыПредпринимательскойДеятельности();
	
	// 5. Заполняем справочник ОКУН
	ЗагрузитьОКУН();
	
	// 6. Заполняем регистр сведений КоэффициентДефлятор
	ЗаполнитьКоэффициентДефлятор();
	
	// 7. Заполняем регистр сведений МРОТ
	ЗагрузитьМРОТ();
	
	// 8. Заполняем справочник Вычеты НДФЛ
	Справочники.ВычетыНДФЛ.НачальноеЗаполнение();
	
	// 9. Заполним регистр сведений НДФЛРазмерВычетов.
	Сотрудники.ЗаполнитьРазмерыВычетовНДФЛ();
	
	// 10. Отчетность
	Справочники.ОсобыеУсловияТрудаПФР.ЗаполнитьКоды();
	Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НачальноеЗаполнение();
	Справочники.ОснованияДосрочногоНазначенияПенсии.НачальноеЗаполнение();
	Справочники.ТерриториальныеУсловияПФР.НачальноеЗаполнение();
	РегистрыСведений.ФиксированныеВзносыИП.УстановитьФиксированныеВзносыИП();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Процедура заполняет пустую ИБ данными пользователей
//
Процедура ПервыйЗапуск_РазделенныеДанные() Экспорт
	
	НачатьТранзакцию();
	
	// 1. Загрузим план счетов.
	ЗагрузитьУправленческийПланСчетовПервыйЗапуск();
	
	// 2. Заполним вид и направление деятельности.
	ПрочееНаправлениеДеятельностиСсылка = Справочники.НаправленияДеятельности.Прочее;
	ПрочееНаправлениеДеятельности = ПрочееНаправлениеДеятельностиСсылка.ПолучитьОбъект();
	ПрочееНаправлениеДеятельности.СчетУчетаВыручкиОтПродаж = ПланыСчетов.Управленческий.ПрочиеДоходы;
	ПрочееНаправлениеДеятельности.СчетУчетаСебестоимостиПродаж = ПланыСчетов.Управленческий.ПрочиеРасходы;
	ПрочееНаправлениеДеятельности.СчетУчетаПрибыли = ПланыСчетов.Управленческий.ПрибылиИУбыткиБезНалогаНаПрибыль;
	ПрочееНаправлениеДеятельности.Записать();
	
	ОсновноеНаправлениеДеятельностиСсылка = Справочники.НаправленияДеятельности.ОсновноеНаправление;
	ОсновноеНаправлениеДеятельности = ОсновноеНаправлениеДеятельностиСсылка.ПолучитьОбъект();
	ОсновноеНаправлениеДеятельности.СчетУчетаВыручкиОтПродаж = ПланыСчетов.Управленческий.ВыручкаОтПродаж;
	ОсновноеНаправлениеДеятельности.СчетУчетаСебестоимостиПродаж = ПланыСчетов.Управленческий.СебестоимостьПродаж;
	ОсновноеНаправлениеДеятельности.СчетУчетаПрибыли = ПланыСчетов.Управленческий.ПрибылиИУбыткиБезНалогаНаПрибыль;
	ОсновноеНаправлениеДеятельности.Записать();
	
	// 3. Заполним виды налогов.
	ЗаполнитьВидыНалоговПервыйЗапуск();
	
	// 4. Заполним валюты.
	ВалютаОбъект = СправочникОбъектВалютыПоКоду("643");
	ВалютаОбъект.Наименование = НСтр("ru = 'руб.'");
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВалютаОбъект);
	РаботаСКурсамиВалют.ПроверитьКорректностьКурсаНа01_01_1980(ВалютаОбъект.Ссылка);
	
	// 5. Заполним ставки НДС.
	СтавкаНДС18 = ЗаполнитьСтавкиНДСПервыйЗапуск();
	
	// 6. Заполним кассы.
	КассаРублевая = Справочники.Кассы.СоздатьЭлемент();
	КассаРублевая.Наименование = НСтр("ru = 'Основная касса'");
	КассаРублевая.ВалютаПоУмолчанию = ВалютаОбъект.Ссылка;
	КассаРублевая.СчетУчета = ПланыСчетов.Управленческий.Касса;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(КассаРублевая);
	
	// 7. Заполним Календарь на основании ПроизводственногоКалендаря.
	Календарь = УправлениеНебольшойФирмойСервер.ПолучитьКалендарьПоПроизводственномуКалендарюРФ(); 
	Если Календарь = Неопределено Тогда
		
		СоздатьКалендарьПятидневкаРоссийскойФедерации();
		Календарь = УправлениеНебольшойФирмойСервер.ПолучитьКалендарьПоПроизводственномуКалендарюРФ(); 
		
	КонецЕсли;
	
	// 8. Заполним организации.
	Константы.НеИспользоватьНесколькоОрганизаций.Установить(Истина);
	
	НашаОрганизацияСсылка = Справочники.Организации.ОсновнаяОрганизация;
	НашаОрганизация = НашаОрганизацияСсылка.ПолучитьОбъект();
	НашаОрганизация.НаименованиеПолное	  = НСтр("ru = 'ООО ""Наша фирма""'");
	НашаОрганизация.Префикс				  = НСтр("ru = 'НФ-'");
	НашаОрганизация.ЮридическоеФизическоеЛицо			  = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	НашаОрганизация.НДСВключатьВСтоимость = Истина;
	НашаОрганизация.КассаПоУмолчанию	  = КассаРублевая.Ссылка;
	НашаОрганизация.ВидСтавкиНДСПоУмолчанию  = Перечисления.ВидыСтавокНДС.Общая;
	НашаОрганизация.ПроизводственныйКалендарь = Календарь;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НашаОрганизация);
	
	// 9. Заполним подразделения.
	ОсновноеПодразделениеСсылка = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
	ОсновноеПодразделение = ОсновноеПодразделениеСсылка.ПолучитьОбъект();
	ОсновноеПодразделение.Организация = НашаОрганизация.Ссылка;
	ОсновноеПодразделение.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение;
	ОсновноеПодразделение.Записать();
	
	// 10. Заполним основной склад.
	ОсновнойСкладСсылка = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
	ОсновнойСклад = ОсновнойСкладСсылка.ПолучитьОбъект();
	ОсновнойСклад.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад;
	ОсновнойСклад.Организация = НашаОрганизация.Ссылка;
	ОсновнойСклад.Записать();
	
	// 11. Заполним виды цен.
	// Оптовая.
	ОптоваяСсылка = Справочники.ВидыЦен.Оптовая;
	Оптовая = ОптоваяСсылка.ПолучитьОбъект();
	Оптовая.ИдентификаторФормул = Нстр("ru ='Оптовая'");
	Оптовая.ВалютаЦены = ВалютаОбъект.Ссылка;
	Оптовая.ЦеныАктуальны = Истина;
	Оптовая.ЦенаВключаетНДС = Истина;
	Оптовая.ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр1;
	Оптовая.ОкруглятьВБольшуюСторону = Ложь;
	Оптовая.ФорматЦены = "ЧЦ=15; ЧДЦ=2";
	Оптовая.Записать();
	
	// Учетная.
	УчетнаяСсылка = Справочники.ВидыЦен.Учетная;
	Учетная = УчетнаяСсылка.ПолучитьОбъект();
	Учетная.ИдентификаторФормул = Нстр("ru ='Учетная'");
	Учетная.ВалютаЦены = ВалютаОбъект.Ссылка;
	Учетная.ЦеныАктуальны = Истина;
	Учетная.ЦенаВключаетНДС = Истина;
	Учетная.ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр1;
	Учетная.ОкруглятьВБольшуюСторону = Ложь;
	Учетная.ФорматЦены = "ЧЦ=15; ЧДЦ=2";
	Учетная.Записать();
	
	// 12. Заполним константы.
	Константы.ВалютаУчета.Установить(ВалютаОбъект.Ссылка);
	Константы.НациональнаяВалюта.Установить(ВалютаОбъект.Ссылка);
	Константы.КонтролироватьОстаткиПриПроведении.Установить(Истина);
	Константы.ИспользоватьНапоминанияПользователя.Установить(Истина);
	
	Константы.ФункциональнаяОпцияКонтрольДоговоров.Установить(Перечисления.ВидыКонтроляДоговоровПриПроведении.НеПроводить);
	Константы.ЧастотаРасчетаКурсовыхРазниц.Установить(Перечисления.ЧастотаРасчетаКурсовыхРазниц.ТолькоПриЗакрытииПериода);
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Префикс = "";
		ОбменДаннымиПереопределяемый.ПриОпределенииПрефиксаИнформационнойБазыПоУмолчанию(Префикс);
		Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Установить(Префикс);
		
	КонецЕсли;
	Константы.ИспользоватьШаблоныСообщений.Установить(Истина);
	
	// Взаиморасчеты
	Константы.СпособЗачетаПредоплатыПоУмолчанию.Установить(Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную);
	Константы.СпособРазнесенияОплатыПоУмолчанию.Установить(Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную);
	// Конец Взаиморасчеты
	
	// 13. Заполним сценарий планирования.
	Справочники.СценарииПланирования.ЗаполнитьФактическийСценарий();
	Справочники.СценарииПланирования.ЗаполнитьПоставляемыеСценарии();
	
	// 14. Заполним классификатор использования рабочего времени.
	Справочники.ВидыРабочегоВремени.ЗаполнитьКлассификаторИспользованияРабочегоВремени();
	
	// 15. Заполним параметры расчета и виды начислений.
	ЗаполнитьПараметрыРасчетовИВидыНачислений();
	
	// 16. Заполним наборы свойств.
	ОсновнаяКатегорияСсылка = Справочники.КатегорииНоменклатуры.БезКатегории;
	ОсновнаяКатегория = ОсновнаяКатегорияСсылка.ПолучитьОбъект();
	ОсновнаяКатегория.Заполнить(Неопределено);
	ОсновнаяКатегория.Записать();
	
	// 17. Заполним реквизиты предопределенных единиц измерения.
	
	// Штука.
	ШтСсылка = Справочники.КлассификаторЕдиницИзмерения.шт;
	ШтОбъект = ШтСсылка.ПолучитьОбъект();
	ШтОбъект.НаименованиеПолное = "Штука";
	ШтОбъект.МеждународноеСокращение = "PCE";
	ШтОбъект.Записать();
	
	// Час.
	чСсылка = Справочники.КлассификаторЕдиницИзмерения.ч;
	чОбъект = чСсылка.ПолучитьОбъект();
	чОбъект.НаименованиеПолное = "Час";
	чОбъект.МеждународноеСокращение = "HUR";
	чОбъект.Записать();
	
	// 18. Заполним состояния заказов
	Справочники.СостоянияЗаказовПокупателей.ЗаполнитьПоставляемыеСостояния();
	Справочники.ВидыЗаказовПокупателей.ЗаполнитьОсновнойВидЗаказа();
	Справочники.СостоянияЗаказНарядов.ЗаполнитьПоставляемыеСостояния();
	Справочники.ВидыЗаказНарядов.ЗаполнитьОсновнойВидЗаказа();
	Справочники.СостоянияЗаказовПоставщикам.ЗаполнитьПоставляемыеСостояния();
	Справочники.СостоянияЗаказовНаПроизводство.ЗаполнитьПоставляемыеСостояния();
	
	// 21. Установим дату изменения движений по ордерному складу.
	Константы.ДатаОбновленияНаРелиз_1_2_1.Установить("19800101");
	
	// 22. Установим признак контроля остатков при пробитии чеков ККМ.
	Константы.КонтролироватьОстаткиПриПробитииЧековККМ.Установить(Истина);
	
	// 23. Настройки подбора
	ЗаполнитьПользовательскиеНастройкиПодбора();
	
	// 25. Контактная информация
	КонтактнаяИнформацияУНФ.УстановитьСвойстваПредопределенныхВидовКонтактнойИнформации();
	
	// 26. Константы прайс-листа.
	Константы.ПрайсЛистВыводитьКод.Установить(Перечисления.ДаНет.Да);
	Константы.ПрайсЛистВыводитьПолноеНаименование.Установить(Перечисления.ДаНет.Нет);
	Константы.ПрайсЛистИспользоватьИерархиюНоменклатуры.Установить(Истина);
	Константы.ПрайсЛистФормироватьПоНаличиюНаСкладах.Установить(Ложь);
	
	// 28. Регистрация
	УдалитьРегистрациюИзмененийБазовыхКлассификаторов();
	
	// 29. Заполнение бланков договоров.
	ЗаполнитьБланкиДоговоров();
	
	// 30. Константа.НачалоИспользованияСФ1137
	Константы.НачалоИспользованияСФ1137.Установить(Дата(2012, 04, 01));
	
	// 31. Константа.ЗачитыватьАвансыДолгиАвтоматически
	Константы.ЗачитыватьАвансыДолгиАвтоматически.Установить(Перечисления.ДаНет.Нет);
	
	// 32. БПО
	МенеджерОборудованияВызовСервераПереопределяемый.ОбновлениеБиблиотеки();
	
	// 33. Заполним состояния событий.
	СостояниеЗапланированоОбъект = Справочники.СостоянияСобытий.Запланировано.ПолучитьОбъект();
	СостояниеЗапланированоОбъект.РеквизитДопУпорядочивания = 1;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СостояниеЗапланированоОбъект);
	
	СостояниеЗавершеноОбъект = Справочники.СостоянияСобытий.Завершено.ПолучитьОбъект();
	СостояниеЗавершеноОбъект.РеквизитДопУпорядочивания = 2;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СостояниеЗавершеноОбъект);
	
	СостояниеОтмененоОбъект = Справочники.СостоянияСобытий.Отменено.ПолучитьОбъект();
	СостояниеОтмененоОбъект.РеквизитДопУпорядочивания = 3;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СостояниеОтмененоОбъект);
	
	// 34. Заполнение предопределенных элементов статьи расходов.
	ОплатаОтПокупателей = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей.ПолучитьОбъект();
	ОплатаОтПокупателей.УчитыватьВНУ = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОплатаОтПокупателей);
	
	ОплатаПоставщикам = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам.ПолучитьОбъект();
	ОплатаПоставщикам.УчитыватьВНУ = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОплатаПоставщикам);
	
	// 35. Заполняем регистр сведений ЗначенияКБК
	ЗагрузитьЗначенияКБК();
	
	// 36. Заполним сегменты контрагентов.
	Справочники.Сегменты.ЗаполнитьПоставляемыеСегменты();
	
	// 37. Заполним источники привлечения покупателей.
	Справочники.ИсточникиПривлеченияПокупателей.ЗаполнитьПоставляемыеИсточникиПривлеченияПокупателей();
	
	// 38. Заполним справочник ВидыДоходовПоСтраховымВзносам.
	Справочники.ВидыДоходовПоСтраховымВзносам.ЗаполнитьВидыДоходовПоСтраховымВзносам();
	
	// 39. Заполним справочник ВидыДоходовПоСтраховымВзносам.
	ЗаполнитьКодыНДФЛ();
	
	// 40. Заполним справочник ВидыДоходовПоСтраховымВзносам.
	ЗаполнитьДокументыФизическихЛицПоКлассификаторуМВД();
	
	// 41. Всегда ИспользоватьДополнительныеРеквизитыИСведения = Истина
	Константы.ИспользоватьДополнительныеРеквизитыИСведения.Установить(Истина);
	
	// 42. Настройка отбора номенклатуры.
	УправлениеНебольшойФирмойСервер.УстановитьНастройкуПользователя(Перечисления.ВидыОтборовНоменклатуры.КатегорииНоменклатуры, "ОсновнойВидОтбора");
	
	// 43. Создание шаблонов условий печати в счетах на оплату
	ЗаполнитьДополнительныеУсловияДляПечати();
	
	// 44. Создание шаблонов наименований для предопределенной категории.
	ШаблоныНаименований.СоздатьШаблоныПоУмолчанию(Справочники.КатегорииНоменклатуры.БезКатегории);
	
	// 45. Идентификаторы
	ОбновитьПредопределенныеВидыЦен();
	
	// 46. Обновление документов заработной платы
	ОтчетыУНФ.Обновить();
	ОтчетыУНФ.ОбновитьТегиОтчетов();
	
	// 47. Установка константы функциональной опции участия в опросе
	УстановитьКонстантуУчастияВОпросеПоНалогам();
	
	// 48. Заполним справочник ПравилаРабочегоПроцесса.
	Справочники.ПравилаРабочегоПроцесса.ЗаполнитьПоставляемыеПравила();
	
	// 49. Заполняет справочник ключевых операций, устанавливает целевое время
	ЗаполнитьРеквизитыКлючевыхОпераций();
	
	// МобильноеПриложение
	// 50. Установка ФО это обычное приложение.
	УстановитьКонстантуЭтоОбычноеПриложение();
	// Конец МобильноеПриложение
	
	// 51. Заполним параметры расчета доставки.
	ЗаполнитьПараметрыРасчетовДоставки();
	
	// 52. Заполним реквизиты собственной службы.
	ЗаполнитьРеквизитыСобственнойСлужбыДоставки();
	
	// 53. Шаблоны печати офисных документов.
	ШаблоныПечатиОфисныхДокументов.СоздатьПредопределенныеШаблоныКоммерческогоПредложения();
	ШаблоныПечатиОфисныхДокументов.СоздатьПредопределенныеШаблоныДоговоровКонтрагентов();
	
	// 54. Расчет стоимости операций сдельным нарядом с учетом нормы времени
	Константы.РасчетСтоимостиОперацийПоНормеВремени.Установить(Перечисления.ДаНет.Да);
	
	// 55. Настройка представлений кодов в печатных формах
	ЗаполнитьНастройкиПредставленийВПечатныхФормахПриНачалеРаботы();
	
	// 56. Настройка вида КИ для ПФ Товарный чек
	Константы.КонтактнаяИнформацияТоварногоЧека.Установить(Перечисления.КонтактнаяИнформацияТоварногоЧека.ОрганизацияИСтруктурнаяЕдиница);
	
	// 57. Коды товаров SKU 
	Константы.НижняяГраницаДиапазонаSKUВесовогоТовара.Установить(1);
	Константы.ВерхняяГраницаДиапазонаSKUВесовогоТовара.Установить(99999);
	
	// 58. Предзаполненное округление копеек в суммах документов
	СоздатьПредзаполняемоеОкруглениеСуммДокументов();
	
	// 59. Установка значений по умолчанию для реквизитов расчетов в карточке котрагента.
	УстановитьЗначенияПоУмолчаниюДляРеквизитовРасчетов();
	
	// 60. Начало действия Постановления Правительства РФ № 981 (счет-фактура)
	УстановитьДатуНачалаДействияПостановления981();
	
	// 61. Заполнение поставляемых состояний лидов.
	Справочники.СостоянияЛидов.ЗаполнитьПоставляемыеСостоянияЛидов();
	
	// 62. Заполнение поставляемых причин отказа лидов.
	Справочники.ПричиныНеуспешногоЗавершенияРаботыСЛидом.ЗаполнитьПоставляемыеПричиныНеуспешногоЗавершенияРаботыСЛидом();
	
	// 63. Установить константу "ИспользоватьЧатВОбсуждениях"
	УстановитьКонстантуИспользоватьЧатВОбсуждениях();
	
	// 64. Установка варианта возврата по чеку из закрытой смены
	УстановитьВариантВозвратаПоЗакрытойСмене();
	
	// 65. Установка значений констант начального заполнения оснований печати для заказа покупателя и счета на оплату
	НачальноеЗаполнениеОснованийПечатиСчетовИЗаказов();
	
	// 66. Установить значение константы использования ручного распределения материалов по умолчанию
	Константы.ИспользоватьРучноеРаспределениеМатериаловПоУмолчанию.Установить(Перечисления.ДаНет.Нет);
	
	// 67. Обработчик обновления графиков учета рабочего времени
	ОбновитьГрафикиУчетаРабочегоВремени();
	
	// 68. Заполнение констант ДатаНачалаРегистрацииРозничныхПродажВЕГАИС и ДатаНачалаРегистрацииРозничныхПродажВЕГАИСВСельскойМестности
	ИнтеграцияЕГАИСУНФ.УстановитьКонстантыЕГАИС();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ПервыйЗапуск()

#КонецОбласти

#Область Обработчики_1_6_17

Процедура ПульсБизнесаРазделитьЧистыеАктивы(Параметры) Экспорт
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючОбъекта", "ПульсБизнеса");
	СтруктураОтбора.Вставить("КлючНастроек", "Диаграммы");
	Выборка = ХранилищеОбщихНастроек.Выбрать(СтруктураОтбора);
	
	Пока Выборка.Следующий() Цикл
		
		ТаблицаДиаграмм = Выборка.Настройки;
		Если ТипЗнч(ТаблицаДиаграмм)<>Тип("ТаблицаЗначений") Тогда
			Продолжить;
		КонецЕсли;
		Если ТаблицаДиаграмм.Колонки.Найти("Диаграмма")=Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Диаграмма", "ДинамикаПассивов");
		НайденныеСтроки = ТаблицаДиаграмм.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество()>0 Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Диаграмма", "ДинамикаАктивов");
		НайденныеСтроки = ТаблицаДиаграмм.НайтиСтроки(СтруктураОтбора);
		
		Для каждого Стр Из НайденныеСтроки Цикл
			
			НоваяСтрока = ТаблицаДиаграмм.Вставить(ТаблицаДиаграмм.Индекс(Стр));
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр, "Серия,Точка,Период,ПериодСравнения");
			НоваяСтрока.Диаграмма = "ДинамикаАктивов";
			НоваяСтрока.Представление = НСтр("ru = 'Динамика активов'");
			Если ТипЗнч(Стр.Фильтры)=Тип("ФиксированныйМассив") Тогда
				НоваяСтрока.Фильтры = Новый ФиксированныйМассив(Новый Массив(Стр.Фильтры));
			КонецЕсли; 
			Если ТипЗнч(Стр.Настройки)=Тип("ФиксированныйМассив") Тогда
				НоваяСтрока.Настройки = Новый ФиксированныйМассив(Новый Массив(Стр.Настройки));
			КонецЕсли; 
			
			НоваяСтрока = ТаблицаДиаграмм.Вставить(ТаблицаДиаграмм.Индекс(Стр));
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр, "Серия,Точка,Период,ПериодСравнения");
			НоваяСтрока.Диаграмма = "ДинамикаПассивов";
			НоваяСтрока.Представление = НСтр("ru = 'Динамика пассивов'");
			Если ТипЗнч(Стр.Фильтры)=Тип("ФиксированныйМассив") Тогда
				НоваяСтрока.Фильтры = Новый ФиксированныйМассив(Новый Массив(Стр.Фильтры));
			КонецЕсли; 
			Если ТипЗнч(Стр.Настройки)=Тип("ФиксированныйМассив") Тогда
				НоваяСтрока.Настройки = Новый ФиксированныйМассив(Новый Массив(Стр.Настройки));
			КонецЕсли;
			
			ТаблицаДиаграмм.Удалить(Стр);
			
		КонецЦикла;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПульсБизнеса", "Диаграммы", ТаблицаДиаграмм, , Выборка.Пользователь);
		
	КонецЦикла;
	
	МассивОтчетов = Новый Массив;
	МассивОтчетов.Добавить(Метаданные.Отчеты.ЧистыеАктивы);
	ОтчетыУНФ.ОбновитьОтчетыВыборочно(МассивОтчетов);
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ОбновитьОтчеты_1_6_17(Параметры) Экспорт
	
	ОтчетыКУдалению = Новый Массив;
	ОтчетыКУдалению.Добавить(Метаданные.Отчеты.АнализБазыКонтрагентов);
	ОтчетыКУдалению.Добавить(Метаданные.Отчеты.АнализБазыЛидов);
	ОтчетыКУдалению.Добавить(Метаданные.Отчеты.АнализРаботыМенеджеров);
	ОтчетыКУдалению.Добавить(Метаданные.Отчеты.НормативныйСоставИзделия);
	ОтчетыКУдалению.Добавить(Метаданные.Отчеты.РасчетнаяВедомость);
	ОтчетыКУдалению.Добавить(Метаданные.Отчеты.РасчетныеЛистки);
	
	ПометитьНаУдалениеВариантыОтчетовСПустымКлючом(ОтчетыКУдалению);
	
	ОтчетыКОбновлению = Новый Массив;
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.Закупки);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.НормативныйСоставИзделия);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.ВоронкаПродаж);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.ВоронкаПоЛидам);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.АнализБазыКонтрагентов);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.АнализБазыЛидов);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.АнализРаботыМенеджеров);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.РасчетнаяВедомость);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.РасчетныеЛистки);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.УниверсальныйОтчет);
	ОтчетыКОбновлению.Добавить(Метаданные.Отчеты.ПлатежныйКалендарь);
	
	ОтчетыУНФ.ОбновитьОтчетыВыборочно(ОтчетыКОбновлению);
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ПометитьНаУдалениеВариантыОтчетовСПустымКлючом(Знач ОтчетыКУдалению)
	
	ИдентификаторыОтчетов = Новый Массив;
	
	Для Каждого ТекОтчет Из ОбщегоНазначения.ИдентификаторыОбъектовМетаданных(ОтчетыКУдалению) Цикл
		ИдентификаторыОтчетов.Добавить(ТекОтчет.Значение);
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	НЕ ВариантыОтчетов.ПометкаУдаления
	|	И ВариантыОтчетов.КлючВарианта = """"
	|	И ВариантыОтчетов.Отчет В(&ИдентификаторыОтчетов)");
	Запрос.УстановитьПараметр("ИдентификаторыОтчетов", ИдентификаторыОтчетов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОтчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ОтчетОбъект.ПометкаУдаления = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОтчетОбъект);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьРегламентныеЗаданияОчередьРасчетаЦен() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЦенообразованиеСервер.УстановитьИспользованиеРегламентногоЗадания(Метаданные.РегламентныеЗадания.УдалитьОбработкаОчередиЦен, Ложь);
	
	Запрос = Новый Запрос("Выбрать первые 1 РегистрСведений.ОчередьРасчетаЦен.ВидЦенРасчетный");
	ЦенообразованиеСервер.УстановитьИспользованиеРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОчередьРасчетаЦен, НЕ Запрос.Выполнить().Пустой());
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьСтатусыПлатежногоПорученияВДокументахПланирования(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходДСПлан.Ссылка КАК Документ,
	|	СтатусыДокументов.Статус КАК СтатусИзРегистра
	|ПОМЕСТИТЬ ДокументыПланирования
	|ИЗ
	|	Документ.РасходДСПлан КАК РасходДСПлан
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО (СтатусыДокументов.Документ = РасходДСПлан.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеДСПлан.Ссылка,
	|	СтатусыДокументов.Статус
	|ИЗ
	|	Документ.ПеремещениеДСПлан КАК ПеремещениеДСПлан
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО (СтатусыДокументов.Документ = ПеремещениеДСПлан.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	ДокументыПланирования.Документ КАК Документ,
	|	ВЫБОР
	|		КОГДА ДокументыПланирования.Документ.ТипДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПлатежногоПоручения.НеТребуется)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПлатежноеПоручение.Ссылка ЕСТЬ NULL
	|						И ПлатежноеПоручениеРасшифровкаПлатежа.Ссылка ЕСТЬ NULL
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПлатежногоПоручения.НеСоздано)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПлатежногоПоручения.Создано)
	|			КОНЕЦ
	|	КОНЕЦ КАК Статус
	|ИЗ
	|	ДокументыПланирования КАК ДокументыПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ПО ДокументыПланирования.Документ = ПлатежноеПоручение.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение.РасшифровкаПлатежа КАК ПлатежноеПоручениеРасшифровкаПлатежа
	|		ПО ДокументыПланирования.Документ = ПлатежноеПоручениеРасшифровкаПлатежа.ДокументПланирования
	|ГДЕ
	|	ДокументыПланирования.СтатусИзРегистра ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	БылиИсключения = Ложь;
	
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		
		НаборЗаписейСтатусы = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяЗапись = НаборЗаписейСтатусы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
		КонецЦикла;
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейСтатусы, Ложь);
		Исключение
			
			БылиИсключения = Истина;
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Заполнение статусов платежных поручений в документах планирования.'"),
				УровеньЖурналаРегистрации.Ошибка,
				НаборЗаписейСтатусы.Метаданные(),
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = НЕ БылиИсключения И ВыборкаДетальныеЗаписи.Количество() < 100;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыВыгрузкиНСИСинхронизацияДанныхЧерезУниверсальныйФормат() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СинхронизацияДанныхЧерезУниверсальныйФормат.Ссылка КАК УзелОбмена
	|ИЗ
	|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК СинхронизацияДанныхЧерезУниверсальныйФормат
	|ГДЕ
	|	СинхронизацияДанныхЧерезУниверсальныйФормат.Ссылка <> &ЭтотУзел";
	
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел());
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		УзелОбъект = Выборка.УзелОбмена.ПолучитьОбъект();
		УзелОбъект.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация";
		УзелОбъект.РежимВыгрузкиСправочников = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию;
		
		Если УзелОбъект.РучнойОбмен Тогда
			УзелОбъект.ПравилаОтправкиДокументов = "ИнтерактивнаяСинхронизация";
			УзелОбъект.РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную;
		Иначе
			УзелОбъект.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация";
			УзелОбъект.РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(УзелОбъект, Истина, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВакантныйНомерОчередиРасчетаЦен() Экспорт
	
	Константы.ВакантныйНомерОчередиРасчетаЦен.Установить(1);
	
КонецПроцедуры

Процедура ОбновитьШаблоныСообщений(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШаблоныСообщений.Ссылка КАК Ссылка,
	|	ШаблоныСообщений.ФорматВложений КАК ФорматВложений
	|ИЗ
	|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
	|ГДЕ
	|	НЕ ШаблоныСообщений.ПредназначенДляSMS";
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		ФорматВложений = Результат.ФорматВложений.Получить();
		Если ФорматВложений <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ШаблонОбъект = Результат.Ссылка.ПолучитьОбъект();
		ШаблонОбъект.ФорматВложений = Новый ХранилищеЗначения(Новый СписокЗначений);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ШаблонОбъект);
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры


Процедура ОбновитьПоказателиНа2019Год() Экспорт
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКоэффициентДефлятор();
	РегистрыСведений.ПредельнаяВеличинаБазыСтраховыхВзносов.УстановитьПредельнуюВеличинуБазыСтраховыхВзносов();
	ЗагрузитьМРОТ();
КонецПроцедуры

#КонецОбласти 