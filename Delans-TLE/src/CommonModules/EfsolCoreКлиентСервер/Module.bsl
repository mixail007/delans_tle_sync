////////////////////////////// Accounts //////////////////////////////
// Аккаунты ядра

// Функция создаёт новый аккаунт
//
// параметры:
//	accountCaption, тип "строка" - наименование организации (произвольный идентификатор)
//	referralAccountID, тип "строка" - идентификатор партнерского аккаунта 
//	login, тип "строка" - логин
//	password, тип "строка" - пароль  
//	email, тип "строка" - електропочта 
//	phoneCountry, тип "строка" - телефонный код города?
//	phoneNumber, тип "строка" - номер телефона
//  firstName, тип "строка" - имя
//	lastName, тип "строка" - фамилия
//	MiddleName, тип "строка" - отчество
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значения: Идентификатор аккаунта или неопределено
//	
Функция Accounts_Add(AccountCaption, ReferralAccountID = "", Login, Password, Email, PhoneCountry, PhoneNumber, FirstName, LastName = "", MiddleName = "", ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountCaption, ReferralAccountID, Login, Password, Email, PhoneCountry, PhoneNumber, FirstName, LastName, MiddleName", AccountCaption, ReferralAccountID, Login, Password, Email, PhoneCountry, PhoneNumber, FirstName, LastName, MiddleName);
	СтрокаЗапроса = "/api_v2/Accounts/Add";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.AccountID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает массив идентификаторов
//
// параметры:
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: массив идентификаторов аккаунта или неопределено
//	
Функция Accounts_GetIDs(ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "Accounts/GetIDs";
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.AccountIDs;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает свойства аккаунта
//
// параметры:
//	accountID, тип "строка" - идентификатор аккаунта
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: свойства аккаунта или неопределено
//	
Функция Accounts_GetProperties(accountID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "Accounts/GetProperties?accountID=" + accountID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   

	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		СтруктураТиповПараметров = Новый Структура("AccountCaption, ReferralAccountID, RegistrationDate, IndexNumber, Removed", "Строка", "Строка", "Дата", "Строка", "Булево");
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция удаляет аккаунт
//
// параметры:
//	accountID, тип "строка" - идентификатор аккаунта
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//	
Функция Accounts_Delete(accountID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "Accounts/Delete?accountID=" + accountID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает количество элементов списка аккаунтов
//
// параметры:
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: количество или неопределено
//	
Функция Accounts_Count(ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "Accounts/Count";
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		СтруктураТиповПараметров = Новый Структура("Count", "Число");
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета.Count;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция устанавливает заголовок аккаунта
//
// параметры:
//	accountID, тип "строка" - идентификатор аккаунта
//	accountCaption, тип "строка" - заголовок аккаунта
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//	
Функция Accounts_SetAccountCaption(AccountID, AccountCaption, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountID, AccountCaption", AccountID, AccountCaption);
	СтрокаЗапроса = "/api_v2/Accounts/SetAccountCaption";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает заголовок аккаунта
//
// параметры:
//	accountID, тип "строка" - идентификатор аккаунта
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: заголовок или неопределено
//	
Функция Accounts_GetAccountCaption(accountID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "Accounts/GetAccountCaption?accountID=" + accountID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.AccountCaption;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает идентификатор партнерского аккаунта
//
// параметры:
//	accountID, тип "строка" - идентификатор аккаунта
//	referralAccountID, тип "строка" - идентификатор партнерского аккаунта 
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//	
Функция Accounts_SetReferralAccountID(AccountID, ReferralAccountID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountID, ReferralAccountID", AccountID, ReferralAccountID);
	СтрокаЗапроса = "/api_v2/Accounts/SetReferralAccountID";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает идентификатор партнерского аккаунта
//
// параметры:
//	accountID, тип "строка" - идентификатор аккаунта
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: идентификатор или неопределено
//	
Функция Accounts_GetReferralAccountID(accountID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "Accounts/GetReferralAccountID?accountID=" + accountID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.ReferralAccountID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция выполняет поиск по свойствам аккаунта
//
// параметры:
//	searchString, тип "строка" - строка аккаунта
//	maxRecordsCount, тип "число" - количество выдаваумых результатов
//
// возвращаемое значение: свойства аккаунта
//	
Функция Accounts_Find(searchString, maxRecordsCount, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "Accounts/Find?searchString=" + searchString+ "&maxRecordsCount=" + maxRecordsCount;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   

	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.AccountSearchResultTable;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция выполняет поиск по Email аккаунта
//
// параметры:
//	searchString, тип "строка" - строка аккаунта
//	
//возвращаемое значение: идентификатор пользователя	 или неопределено
Функция Accounts_FindByEmail(searchString, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "Accounts/FindByEmail?searchString=" + searchString;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   

	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.AccountID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


////////////////////////////// AccountUsers //////////////////////////////
// Пользователи аккаунтов

// Функция возвращает идентификатор пользователя
//
// параметры:
//	accountUserID, тип "строка" - идентификатор юзера
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: идентификатор или неопределено
//	
Функция AccountUsers_CheckAdminUserRole(accountUserID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUsers/CheckAdminUserRole?accountUserID=" + accountUserID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		СтруктураТиповПараметров = Новый Структура("AdminUserRole", "Булево");
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета.AdminUserRole;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает идентификатор нового пользователя
//
// параметры:
//	login, тип "строка" - идентификатор юзера
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: идентификатор созданного пользователя или неопределено
//	
Функция AccountUsers_GetIDByLogin(login, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUsers/GetIDByLogin?login=" + login;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.AccountUserID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает идентификатор по электропочте
//
// параметры:
//	email, тип "строка" - электропочта юзера
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: идентификатор или неопределено
//
Функция AccountUsers_GetIDByEmail(email, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUsers/GetIDByEmail?email=" + email;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.AccountUserID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает идентификатор по номеру телефона
//
// параметры:
//	phoneCountry, тип "строка" - код города
//	phoneNumber, тип "строка" - номер телефона
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: идентификатор или неопределено
//
Функция AccountUsers_GetIDByPhoneNumber(phoneCountry, phoneNumber, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUsers/GetIDByPhoneNumber?phoneCountry=" + phoneCountry + "?phoneNumber=" + phoneNumber;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.AccountUserID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает идентификатор аккаунта
//
// параметры:
//	accountUserID, тип "строка" - идентификатор юзера
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: идентификатор или неопределено
//
Функция AccountUsers_GetAccountID(accountUserID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUsers/GetAccountID?accountUserID=" + accountUserID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.AccountID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает идентификаторы
//
// параметры:
//	accountID, тип "строка" - идентификатор юзера
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: массив идентификаторов или неопределено
//
Функция AccountUsers_GetIDs(accountID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUsers/GetIDs?accountID=" + accountID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.AccountUserIDs;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция добавляет нового пользователя
//
// параметры:
//	accountID, тип "строка" - идентификатор аккаунта
//	login, тип "строка" - логин
//	password, тип "строка" - пароль  
//	email, тип "строка" - електропочта 
//	phoneCountry, тип "строка" - телефонный код города
//	phoneNumber, тип "строка" - номер телефона
//  firstName, тип "строка" - имя
//	lastName, тип "строка" - фамилия
//	MiddleName, тип "строка" - отчество
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: идентификатор созданного пользователя или неопределено
//
Функция AccountUsers_Add(AccountID, Login, Password, Email, PhoneCountry, PhoneNumber, FirstName, LastName = "", MiddleName = "", ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountID, Login, Password, Email, PhoneCountry, PhoneNumber, FirstName, LastName, MiddleName", AccountID, Login, Password, Email, PhoneCountry, PhoneNumber, FirstName, LastName, MiddleName);
	СтрокаЗапроса = "/api_v2/AccountUsers/_Add";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.AccountUserID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция проверяет добавленного пользователя по коду подтверждения 
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	comfirmationCode, тип "строка" - код подтверждения
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: идентификатор или неопределено
//
Функция AccountUsers_VerificationAdditionUserByComfirmationCode(accountUserID, comfirmationCode, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUsers/VerificationAdditionUserByComfirmationCode?accountUserID=" + accountUserID + "&comfirmationCode=" + comfirmationCode;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.AccountUserID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция получает параметры пользователя по идентификатору 
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: структура параметров или неопределено
//
Функция AccountUsers_GetProperties(accountUserID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUsers/GetProperties?accountUserID=" + accountUserID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		СтруктураТиповПараметров = Новый Структура("AccountID, Login, Email, PhoneCountry, PhoneNumber, FirstName, LastName, MiddleName, CorpUserID", "Строка", "Строка", "Строка", "Строка", "Строка", "Строка", "Строка", "Строка", "Строка");
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция удаляет пользователя 
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция AccountUsers_Delete(AccountUserID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountUserID", AccountUserID);
	СтрокаЗапроса = "/api_v2/AccountUsers/Delete";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает количество пользователей 
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: количество или неопределено
//
Функция AccountUsers_Count(accountUserID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUsers/Count?accountUserID=" + accountUserID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		СтруктураТиповПараметров = Новый Структура("Count", "Число");
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета.Count;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция устанавливает новый пароль 
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	newPassword, тип "строка" - новый пароль
//	oldPassword, тип "строка" - старый пароль
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция AccountUsers_SetPassword(AccountUserID, NewPassword, OldPassword, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountUserID, NewPassword, OldPassword", AccountUserID, NewPassword, OldPassword);
	СтрокаЗапроса = "/api_v2/AccountUsers/SetPassword";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция устанавливает новый логин 
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	login, тип "строка" - новый логин
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция AccountUsers_SetLogin(AccountUserID, Login, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountUserID, Login", AccountUserID, Login);
	СтрокаЗапроса = "/api_v2/AccountUsers/SetLogin";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция получает логин 
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: логин или неопределено
//
Функция AccountUsers_GetLogin(accountUserID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUsers/GetLogin?accountUserID=" + accountUserID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.Login;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция устанавливает имейл 
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	email, тип "строка" - новый имейл
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция AccountUsers_SetEmail(AccountUserID, Email, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountUserID, Email", AccountUserID, Email);
	СтрокаЗапроса = "/api_v2/AccountUsers/SetEmail";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция получает имейл 
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: имейл или неопределено
//
Функция AccountUsers_GetEmail(accountUserID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUsers/GetEmail?accountUserID=" + accountUserID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.Email;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция устанавливает код страны 
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	phoneCountry, тип "строка" - код страны
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция AccountUsers_SetPhoneCountry(AccountUserID, PhoneCountry, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountUserID, PhoneCountry", AccountUserID, PhoneCountry);
	СтрокаЗапроса = "/api_v2/AccountUsers/SetPhoneCountry";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция получает код страны 
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: код страны или неопределено
//
Функция AccountUsers_GetPhoneCountry(accountUserID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUsers/GetPhoneCountry?accountUserID=" + accountUserID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.PhoneCountry;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция устанавливает номер телефона 
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	phoneNumber, тип "строка" - номер телефона
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция AccountUsers_SetPhoneNumber(AccountUserID, PhoneNumber, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountUserID, PhoneNumber", AccountUserID, PhoneNumber);
	СтрокаЗапроса = "/api_v2/AccountUsers/SetPhoneNumber";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция получает номер телефона
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: номер или неопределено
//
Функция AccountUsers_GetPhoneNumber(accountUserID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUsers/GetPhoneNumber?accountUserID=" + accountUserID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.PhoneNumber;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция устанавливает имя 
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	firstName, тип "строка" - имя
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция AccountUsers_SetFirstName(AccountUserID, FirstName, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountUserID, FirstName", AccountUserID, FirstName);
	СтрокаЗапроса = "/api_v2/AccountUsers/SetFirstName";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция получает имя
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: имя или неопределено
//
Функция AccountUsers_GetFirstName(accountUserID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUsers/GetFirstName?accountUserID=" + accountUserID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.FirstName;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция устанавливает фамилию 
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	lastName, тип "строка" - фамилия
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция AccountUsers_SetLastName(AccountUserID, LastName, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountUserID, LastName", AccountUserID, LastName);
	СтрокаЗапроса = "/api_v2/AccountUsers/SetLastName";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция получает фамилию
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: фамилия или неопределено
//
Функция AccountUsers_GetLastName(accountUserID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUsers/GetLastName?accountUserID=" + accountUserID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.LastName;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция устанавливает отчество 
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	middleName, тип "строка" - отчество
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция AccountUsers_SetMiddleName(AccountUserID, MiddleName, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountUserID, MiddleName", AccountUserID, MiddleName);
	СтрокаЗапроса = "/api_v2/AccountUsers/SetMiddleName";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция получает отчество
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: отчество или неопределено
//
Функция AccountUsers_GetMiddleName(accountUserID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUsers/GetMiddleName?accountUserID=" + accountUserID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.MiddleName;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция устанавливает UPNDomainUsers 
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	upnDomainUsers, тип "строка" - ?
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция AccountUsers_SetUPNDomainUsers(AccountUserID, UPNDomainUsers, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountUserID, UPNDomainUsers", AccountUserID, UPNDomainUsers);
	СтрокаЗапроса = "/api_v2/AccountUsers/SetUPNDomainUsers";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция получает UPNDomainUsers
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: UPNDomainUsers или неопределено
//
Функция AccountUsers_GetUPNDomainUsers(accountUserID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUsers/GetUPNDomainUsers?accountUserID=" + accountUserID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.UPNDomainUsers;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция устанавливает время создания токена 
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	tokenСreationTime, тип "строка" - время создания токена
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция AccountUsers_SetTokenСreationTime(AccountUserID, TokenСreationTime, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountUserID, TokenСreationTime", AccountUserID, TokenСreationTime);
	СтрокаЗапроса = "/api_v2/AccountUsers/SetTokenСreationTime";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция получает время создания токена
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: время или неопределено
//
Функция AccountUsers_GetTokenСreationTime(accountUserID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUsers/GetTokenСreationTime?accountUserID=" + accountUserID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		СтруктураТиповПараметров = Новый Структура("TokenСreationTime", "Дата");
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета.TokenСreationTime;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция устанавливает роль
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	roleID, тип "число" - идентификатор роли
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция AccountUsers_SetRoleID(AccountUserID, RoleID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountUserID, RoleID", AccountUserID, RoleID);
	СтрокаЗапроса = "/api_v2/AccountUsers/SetRoleID";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция получает идентификатор роли
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: идентификатор или неопределено
//
Функция AccountUsers_GetRoleID(accountUserID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUsers/GetRoleID?accountUserID=" + accountUserID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		СтруктураТиповПараметров = Новый Структура("RoleID", "Число");
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета.RoleID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция устанавливает CorpUserID
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	corpUserID, тип "число" - ?
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция AccountUsers_SetCorpUserID(AccountUserID, CorpUserID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountUserID, CorpUserID", AccountUserID, CorpUserID);
	СтрокаЗапроса = "/api_v2/AccountUsers/SetCorpUserID";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция получает CorpUserID
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: идентификатор или неопределено
//
Функция AccountUsers_GetCorpUserID(accountUserID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUsers/GetCorpUserID?accountUserID=" + accountUserID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.CorpUserID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция устанавливает комментарий
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	comment, тип "число" - комментарий
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция AccountUsers_SetComment(AccountUserID, Comment, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountUserID, Comment", AccountUserID, Comment);
	СтрокаЗапроса = "/api_v2/AccountUsers/SetCorpUserID";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция получает комментарий
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: комментарий или неопределено
//
Функция AccountUsers_GetComment(accountUserID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUsers/GetComment?accountUserID=" + accountUserID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.Comment;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция получает IDByCorpUserID
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: идентификатор или неопределено
//
Функция AccountUsers_GetIDByCorpUserID(accountUserID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUsers/GetIDByCorpUserID?accountUserID=" + accountUserID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.AccountUserID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция обновляет свойства
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//  СтруктураИзменяемыхПараметров, тип "структура" - ([corpUserID], тип "строка" - идентификатор пользователя, [firstName], тип "строка" - имя, [lastName], тип "строка" - фамилия, [middleName], тип "строка" - отчество, [comment], тип "строка" - комментарий)
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция AccountUsers_UpdatePropertiesByCorp(AccountUserID, СтруктураИзменяемыхПараметров, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "";
	СтруктураПараметров = Новый Структура("AccountUserID", AccountUserID);
	
	Для Каждого ПараметрПоиска Из СтруктураИзменяемыхПараметров Цикл 
		СтруктураПараметров.Вставить(ПараметрПоиска.Ключ, ПараметрПоиска.Значение);
	КонецЦикла;
	
	СтрокаЗапроса = "/api_v2/AccountUsers/UpdatePropertiesByCorp";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


////////////////////////////// AccountUserSessions //////////////////////////////
// Сессии пользователей, содержащие токены авторизации


// Функция авторизации
//
// параметры:
//	accountUserLogin, тип "строка" - логин
//	accountUserPassword, тип "строка" - пароль
//	clientDescription, тип "строка" - описание клиентского приложения
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение:
//
Функция AccountUserSessions_Login(AccountUserLogin, AccountUserPassword, ClientDescription="EfsolClient", ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountUserLogin, AccountUserPassword, ClientDescription", AccountUserLogin, AccountUserPassword, ClientDescription);
	СтрокаЗапроса = "/api_v2/AccountUserSessions/Login";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.Token;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция проверяет валидность токена
//
// параметры:
//	token, тип "строка" - идентификатор токена
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина/ложь или неопределено
//
Функция AccountUserSessions_CheckTokenValidity(token, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUserSessions/CheckTokenValidity?token=" + token;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		СтруктураТиповПараметров = Новый Структура("TokenValidity", "Булево");
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета.TokenValidity;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции



// Функция авторизации по UPNDomainUser
//
// параметры:
//	encodingUPNDomainUser, тип "строка" - зашифрованное значение локального доменного пользователя в формате UPN
//  clientDescription, тип "строка" - идентификатор токена
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: токен или неопределено
//
Функция AccountUserSessions_LoginByUPNDomainUser(encodingUPNDomainUser, clientDescription, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUserSessions/LoginByUPNDomainUser?encodingUPNDomainUser=" + encodingUPNDomainUser + "&clientDescription=" + clientDescription;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.Token;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает идентификатор юзера по токену
//
// параметры:
//	token, тип "строка" - токен
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: идентификатор или неопределено
//
Функция AccountUserSessions_GetAccountUserIDByToken(token, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUserSessions/GetAccountUserIDByToken?token=" + token;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.AccountUserID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает идентификаторы сессий подключения
//
// параметры:
//	accountUserID, тип "строка" - токен
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: массив или неопределено
//
Функция AccountUserSessions_GetIDs(accountUserID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUserSessions/GetIDs?accountUserID=" + accountUserID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.AccountUserSessionIDs;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает свойства подключения
//
// параметры:
//	accountUserSessionID, тип "строка" - идентификатор подключения
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: структуру или неопределено
//
Функция AccountUserSessions_GetProperties(accountUserSessionID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUserSessions/GetProperties?accountUserSessionID=" + accountUserSessionID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		СтруктураТиповПараметров = Новый Структура("AccountUserID, Token, TokenСreationTime, ClientDescription, ClientDeviceInfo, ClientIPAddress", "Строка", "Строка", "Дата", "Строка", "Строка", "Строка");
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция удаляет подключение
//
// параметры:
//	accountUserSessionID, тип "строка" - идентификатор подключения
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция AccountUserSessions_Delete(AccountUserSessionID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountUserSessionID", AccountUserSessionID);
	СтрокаЗапроса = "/api_v2/AccountUserSessions/Delete";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает количество подключений
//
// параметры:
//	accountUserID, тип "строка" - идентификатор пользователя
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: количество или неопределено
//
Функция AccountUserSessions_Count(accountUserID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUserSessions/Count?accountUserID=" + accountUserID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		СтруктураТиповПараметров = Новый Структура("Count", "Число");
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета.Count;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает идентификатор пользователя
//
// параметры:
//	accountUserSessionID, тип "строка" - идентификатор пользователя
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: идентификатор или неопределено
//
Функция AccountUserSessions_GetAccountUserID(accountUserSessionID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUserSessions/GetAccountUserID?accountUserSessionID=" + accountUserSessionID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.AccountUserID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает токен
//
// параметры:
//	accountUserSessionID, тип "строка" - идентификатор
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: токен или неопределено
//
Функция AccountUserSessions_GetToken(accountUserSessionID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUserSessions/GetToken?accountUserSessionID=" + accountUserSessionID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.Token;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает время создания токена
//
// параметры:
//	accountUserSessionID, тип "строка" - идентификатор
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: время или неопределено
//
Функция AccountUserSessions_GetTokenСreationTime(accountUserSessionID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUserSessions/GetTokenСreationTime?accountUserSessionID=" + accountUserSessionID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		СтруктураТиповПараметров = Новый Структура("TokenСreationTime", "Дата");
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета.TokenСreationTime;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает описание клиента
//
// параметры:
//	accountUserSessionID, тип "строка" - идентификатор
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: описание или неопределено
//
Функция AccountUserSessions_GetClientDescription(accountUserSessionID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUserSessions/GetClientDescription?accountUserSessionID=" + accountUserSessionID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.ClientDescription;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает описание клиента
//
// параметры:
//	accountUserSessionID, тип "строка" - идентификатор
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: описание или неопределено
//
Функция AccountUserSessions_GetClientDeviceInfo(accountUserSessionID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUserSessions/GetClientDeviceInfo?accountUserSessionID=" + accountUserSessionID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.ClientDeviceInfo;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает IP адрес
//
// параметры:
//	accountUserSessionID, тип "строка" - идентификатор
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: адрес или неопределено
//
Функция AccountUserSessions_GetClientIPAddress(accountUserSessionID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUserSessions/GetClientIPAddress?accountUserSessionID=" + accountUserSessionID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.ClientIPAddress;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция AccountUserSessions_GetTokenByLogin(Login, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUserSessions/GetTokenByLogin?login=" + Login;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.Token;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

////////////////////////////// CloudServices //////////////////////////////
// Службы

// Функция добавляет сервис
//
// параметры:
//	cloudServiceID, тип "строка" - идентификатор сервиса
//	serviceCaption, тип "строка" - заголовок сервиса
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: идентификатор или неопределено
//
Функция CloudServices_Add(CloudServiceID, ServiceCaption, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("CloudServiceID, ServiceCaption", CloudServiceID, ServiceCaption);
	СтрокаЗапроса = "/api_v2/CloudServices/Add";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.CloudServiceID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает идентификаторы
//
// параметры:
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: массив или неопределено
//
Функция CloudServices_GetIDs(ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "CloudServices/GetIDs";
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.CloudServiceIDs;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция удаляет сервис
//
// параметры:
//	cloudServiceID, тип "строка" - идентификатор сервиса
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция CloudServices_Delete(CloudServiceID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("CloudServiceID", CloudServiceID);
	СтрокаЗапроса = "/api_v2/CloudServices/Delete";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает количество сервисов
//
// параметры:
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: количество или неопределено
//
Функция CloudServices_Count(ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "CloudServices/Count";
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		СтруктураТиповПараметров = Новый Структура("Count", "Число");
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета.Count;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция устанавливает заголовок сервиса
//
// параметры:
//	cloudServiceID, тип "строка" - идентификатор сервиса
//	serviceCaption, тип "строка" - заголовок сервиса
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция CloudServices_SetServiceCaption(CloudServiceID, ServiceCaption, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("CloudServiceID, ServiceCaption", CloudServiceID, ServiceCaption);
	СтрокаЗапроса = "/api_v2/CloudServices/SetServiceCaption";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает заголовок сервиса
//
// параметры:
//	cloudServiceID, тип "строка" - идентификатор сервиса
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: заголовок или неопределено
//
Функция CloudServices_GetServiceCaption(cloudServiceID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "CloudServices/GetServiceCaption?cloudServiceID=" + cloudServiceID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.ServiceCaption;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция устанавливает токен
//
// параметры:
//	cloudServiceID, тип "строка" - идентификатор сервиса
//	serviceToken, тип "строка" - заголовок сервиса
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция CloudServices_SetServiceToken(CloudServiceID, ServiceToken, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("CloudServiceID, ServiceToken", CloudServiceID, ServiceToken);
	СтрокаЗапроса = "/api_v2/CloudServices/SetServiceToken";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает токен
//
// параметры:
//	cloudServiceID, тип "строка" - идентификатор сервиса
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: токен или неопределено
//
Функция CloudServices_GetServiceToken(cloudServiceID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "CloudServices/GetServiceCaption?cloudServiceID=" + cloudServiceID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.ServiceToken;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция проверяет токен сервиса
//
// параметры:
//	serviceToken, тип "строка" - идентификатор сервиса
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: токен или неопределено
//
Функция CloudServices_CheckServiceTokenValidity(serviceToken, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "CloudServices/CheckServiceTokenValidity?serviceToken=" + serviceToken;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		СтруктураТиповПараметров = Новый Структура("ServiceTokenValidity", "Булево");
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета.ServiceTokenValidity;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


////////////////////////////// CSResources //////////////////////////////
// Ресурсы служб


// Функция добавляет ресурс
//
// параметры:
//	cloudServiceID, тип "строка" - идентификатор сервиса
//	resourceName, тип "строка" - имя ресурса
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: идентификатор или неопределено
//
Функция CSResources_Add(CloudServiceID, ResourceName, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("CloudServiceID, ResourceName", CloudServiceID, ResourceName);
	СтрокаЗапроса = "/api_v2/CSResources/Add";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.CSResourceID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает идентификаторы
//
// параметры:
//	cloudServiceID, тип "строка" - идентификатор сервиса
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: массив или неопределено
//
Функция CSResources_GetIDs(cloudServiceID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "CSResources/GetIDs?cloudServiceID=" + cloudServiceID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.CSResourceIDs;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция удаляет ресурс
//
// параметры:
//	csResourceID, тип "строка" - идентификатор сервиса
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция CSResources_Delete(CSResourceID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("CSResourceID", CSResourceID);
	СтрокаЗапроса = "/api_v2/CSResources/Delete";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает количество ресурсов
//
// параметры:
//	cloudServiceID, тип "строка" - идентификатор сервиса
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: количество или неопределено
//
Функция CSResources_Count(cloudServiceID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "CSResources/Count?cloudServiceID=" + cloudServiceID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		СтруктураТиповПараметров = Новый Структура("Count", "Число");
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета.Count;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает CSResourceID
//
// параметры:
//	resourceName, тип "строка" - идентификатор сервиса
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: идентификатор или неопределено
//
Функция CSResources_GetCSResourceIDByName(resourceName, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "CSResources/GetCSResourceIDByName?resourceName=" + resourceName;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.CSResourceID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает CloudServiceID
//
// параметры:
//	csResourceID, тип "строка" - идентификатор ресурса
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: идентификатор или неопределено
//
Функция CSResources_GetCloudServiceID(csResourceID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "CSResources/GetCloudServiceID?csResourceID=" + csResourceID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.CloudServiceID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция устанавливает имя ресурса
//
// параметры:
//	csResourceID, тип "строка" - идентификатор ресурса
//	resourceName, тип "строка" - имя ресурса
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция CSResources_SetResourceName(CSResourceID, ResourceName, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("CSResourceID, ResourceName", CSResourceID, ResourceName);
	СтрокаЗапроса = "/api_v2/CSResources/SetResourceName";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает имя ресурса
//
// параметры:
//	csResourceID, тип "строка" - идентификатор ресурса
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: имя или неопределено
//
Функция CSResources_GetResourceName(csResourceID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "CSResources/GetResourceName?csResourceID=" + csResourceID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.ResourceName;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция устанавливает 
//
// параметры:
//	csResourceID, тип "строка" - идентификатор ресурса
//	daysAutoDecrease, тип "строка" - 
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция CSResources_SetDaysAutoDecrease(CSResourceID, DaysAutoDecrease, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("CSResourceID, DaysAutoDecrease", CSResourceID, DaysAutoDecrease);
	СтрокаЗапроса = "/api_v2/CSResources/SetDaysAutoDecrease";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает количество дней
//
// параметры:
//	csResourceID, тип "строка" - идентификатор ресурса
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: количество или неопределено
//
Функция CSResources_GetDaysAutoDecrease(csResourceID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "CSResources/GetResourceName?csResourceID=" + csResourceID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		СтруктураТиповПараметров = Новый Структура("DaysAutoDecrease", "Булево");
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета.DaysAutoDecrease;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


////////////////////////////// AccountCSResourceValues //////////////////////////////
// Показатели ресурсов служб (регистр накопления)


// Функция увеличивает значение 
//
// параметры:
//	accountID, тип "строка" - идентификатор ресурса
//	csResourceID, тип "строка" - 
//	modifyResourceValue, тип "число" - 
//	modifyResourceComment, тип "строка" - комментарий причины изменения ресурса 
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция AccountCSResourceValues_IncreaseValue(AccountID, CSResourceID, ModifyResourceValue, ModifyResourceComment, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountID, CSResourceID, ModifyResourceValue, ModifyResourceComment", AccountID, CSResourceID, ModifyResourceValue, ModifyResourceComment);
	СтрокаЗапроса = "/api_v2/AccountCSResourceValues/IncreaseValue";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция уменьшает значение 
//
// параметры:
//	accountID, тип "строка" - идентификатор ресурса
//	csResourceID, тип "строка" - 
//	modifyResourceValue, тип "число" - 
//	modifyResourceComment, тип "строка" - комментарий причины изменения ресурса 
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция AccountCSResourceValues_DecreaseValue(AccountID, CSResourceID, ModifyResourceValue, ModifyResourceComment, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountID, CSResourceID, ModifyResourceValue, ModifyResourceComment", AccountID, CSResourceID, ModifyResourceValue, ModifyResourceComment);
	СтрокаЗапроса = "/api_v2/AccountCSResourceValues/DecreaseValue";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция получает значение 
//
// параметры:
//	accountID, тип "строка" - идентификатор ресурса
//	csResourceID, тип "строка" -  
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: значение или неопределено
//
Функция AccountCSResourceValues_GetValue(accountID, csResourceID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountCSResourceValues/GetValue?accountID=" + accountID + "&csResourceID=" + csResourceID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда    
		СтруктураТиповПараметров = Новый Структура("ServiceResourceValue", "Число");
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета.ServiceResourceValue;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция ищет идентификаторы значений 
//
// параметры:
//	accountID, тип "строка" - идентификатор ресурса
//	csResourceID, тип "строка" -  
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: массив или неопределено
//
Функция AccountCSResourceValues_FindIDs(accountID, csResourceID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountCSResourceValues/FindIDs?accountID=" + accountID + "&csResourceID=" + csResourceID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда    
		Возврат ПараметрыОтвета.СтруктураОтвета.AcountCSResourceValueIDs;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает свойства ресурса 
//
// параметры:
//	acountCSResourceValueID, тип "строка" - идентификатор значения ресурса 
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: структура или неопределено
//
Функция AccountCSResourceValues_GetProperties(acountCSResourceValueID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountCSResourceValues/GetProperties?acountCSResourceValueID=" + acountCSResourceValueID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда    
		СтруктураТиповПараметров = Новый Структура("AccountID, CSResourceID, InitiatorCloudServiceID, ModifyResourceDateTime, ModifyResourceValue, ModifyResourceComment", "Строка", "Строка", "Строка", "Дата", "Число", "Строка");
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает идентификатор аккаунта 
//
// параметры:
//	acountCSResourceValueID, тип "строка" - идентификатор значения ресурса 
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: идентификатор или неопределено
//
Функция AccountCSResourceValues_GetAccountID(acountCSResourceValueID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountCSResourceValues/GetAccountID?acountCSResourceValueID=" + acountCSResourceValueID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда    
		Возврат ПараметрыОтвета.СтруктураОтвета.AccountID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает идентификатор ресурса 
//
// параметры:
//	acountCSResourceValueID, тип "строка" - идентификатор значения ресурса 
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: идентификатор или неопределено
//
Функция AccountCSResourceValues_GetCSResourceID(acountCSResourceValueID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountCSResourceValues/GetCSResourceID?acountCSResourceValueID=" + acountCSResourceValueID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда    
		Возврат ПараметрыОтвета.СтруктураОтвета.CSResourceID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает идентификатор сервиса 
//
// параметры:
//	acountCSResourceValueID, тип "строка" - идентификатор значения ресурса 
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: идентификатор или неопределено
//
Функция AccountCSResourceValues_GetInitiatorCloudServiceID(acountCSResourceValueID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountCSResourceValues/GetInitiatorCloudServiceID?acountCSResourceValueID=" + acountCSResourceValueID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда    
		Возврат ПараметрыОтвета.СтруктураОтвета.InitiatorCloudServiceID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает модифицированную дату
//
// параметры:
//	acountCSResourceValueID, тип "строка" - идентификатор значения ресурса 
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: дата или неопределено
//
Функция AccountCSResourceValues_GetModifyResourceDateTime(acountCSResourceValueID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountCSResourceValues/GetModifyResourceDateTime?acountCSResourceValueID=" + acountCSResourceValueID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда    
		СтруктураТиповПараметров = Новый Структура("ModifyResourceDateTime", "Дата");
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета.ModifyResourceDateTime;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает модифицированное значение 
//
// параметры:
//	acountCSResourceValueID, тип "строка" - идентификатор значения ресурса 
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: значение или неопределено
//
Функция AccountCSResourceValues_GetModifyResourceValue(acountCSResourceValueID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountCSResourceValues/GetModifyResourceValue?acountCSResourceValueID=" + acountCSResourceValueID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда    
		СтруктураТиповПараметров = Новый Структура("ModifyResourceValue", "Число");
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета.ModifyResourceValue;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает модифицированный комментарий 
//
// параметры:
//	acountCSResourceValueID, тип "строка" - идентификатор значения ресурса 
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: комментарий или неопределено
//
Функция AccountCSResourceValues_GetModifyResourceComment(acountCSResourceValueID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountCSResourceValues/GetModifyResourceComment?acountCSResourceValueID=" + acountCSResourceValueID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда    
		Возврат ПараметрыОтвета.СтруктураОтвета.ModifyResourceComment;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


////////////////////////////// CSPerformanceCounters //////////////////////////////
// Счетчики производительности служб


// Функция устанавливает перформанс значение
//
// параметры:
//	cloudServiceID, тип "строка" - идентификатор
//	accountUserID, тип "строка" - 
//	performanceCounterID, тип "строка" -
//	performanceCounterValue, тип "число" (float) -
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция CSPerformanceCounters_SetPerformanceValue(CloudServiceID, AccountUserID, PerformanceCounterID, PerformanceCounterValue, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("CloudServiceID, AccountUserID, PerformanceCounterID, PerformanceCounterValue", CloudServiceID, AccountUserID, PerformanceCounterID, PerformanceCounterValue);
	СтрокаЗапроса = "/api_v2/CSPerformanceCounters/SetPerformanceValue";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда    
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает перформанс значение 
//
// параметры:
//	cloudServiceID, тип "строка" - идентификатор
//	accountUserID, тип "строка" - 
//	performanceCounterID, тип "строка" -
//	dateTimeFrom, тип "дата" -
//	dateTimeTo, тип "дата" -
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция CSPerformanceCounters_GetPerformanceValue(cloudServiceID, accountUserID, performanceCounterID, dateTimeFrom, dateTimeTo, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "CSPerformanceCounters/GetPerformanceValue?cloudServiceID=" + cloudServiceID + "&accountUserID=" + accountUserID + "&performanceCounterID=" + performanceCounterID + "&dateTimeFrom=" + dateTimeFrom + "&dateTimeTo=" + dateTimeTo;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда    
		Возврат ПараметрыОтвета.СтруктураОтвета.CSPerformanceCountersTable;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции



////////////////////////////// AccountDatabases //////////////////////////////
// Информация о базах данных аккаунтов

// Функция возвращает идентификатор аккаунта
//
// параметры:
//	accountDatabaseID, тип "строка" - идентификатор базы данных
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: идентификатор или неопределено
//
Функция AccountDatabases_GetAccountID(accountDatabaseID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountDatabases/GetAccountID?accountDatabaseID=" + accountDatabaseID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.AccountID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция устанавливает идентификатор шаблона
//
// параметры:
//	accountDatabaseID, тип "строка" - идентификатор базы данных
//  templateID, тип "строка" - идентификатор шаблона
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция AccountDatabases_SetTemplateID(AccountDatabaseID, TemplateID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountDatabaseID, TemplateID", AccountDatabaseID, TemplateID);
	СтрокаЗапроса = "/api_v2/AccountDatabases/SetTemplateID";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает идентификатор шаблона
//
// параметры:
//	accountDatabaseID, тип "строка" - идентификатор базы данных
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: идентификатор или неопределено
//
Функция AccountDatabases_GetTemplateID(accountDatabaseID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountDatabases/GetTemplateID?accountDatabaseID=" + accountDatabaseID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.TemplateID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает свойства базы данных
//
// параметры:
//	accountDatabaseID, тип "строка" - идентификатор базы данных
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: структура или неопределено
//
Функция AccountDatabases_GetProperties(accountDatabaseId, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountDatabases/GetProperties?accountDatabaseID=" + accountDatabaseID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		СтруктураТиповПараметров = Новый Структура("AccountID, LastActivityDate, CreationDate, Caption, ConfigurationName, ConfigurationServer, ConfigurationVersion, ApplicationName, FilePath", 
													"Строка", "Дата", "Дата", "Строка", "Строка", "Строка", "Строка", "Строка", "Строка");
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция устанавливает LastActivityDate
//
// параметры:
//	accountDatabaseID, тип "строка" - идентификатор базы данных
//	lastActivityDate, тип "дата" - дата
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция AccountDatabases_SetLastActivityDate(AccountDatabaseID, LastActivityDate, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountDatabaseID, LastActivityDate", AccountDatabaseID, LastActivityDate);
	СтрокаЗапроса = "/api_v2/AccountDatabases/SetLastActivityDate";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает LastActivityDate
//
// параметры:
//	accountDatabaseID, тип "строка" - идентификатор базы данных
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: дата или неопределено
//
Функция AccountDatabases_GetLastActivityDate(accountDatabaseID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountDatabases/GetLastActivityDate?accountDatabaseID=" + accountDatabaseID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		СтруктураТиповПараметров = Новый Структура("LastActivityDate", "Дата");
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета.LastActivityDate;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция устанавливает BackupDate
//
// параметры:
//	accountDatabaseID, тип "строка" - идентификатор базы данных
//	backupDate, тип "дата" - дата
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция AccountDatabases_SetBackupDate(AccountDatabaseID, BackupDate, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountDatabaseID, BackupDate", AccountDatabaseID, BackupDate);
	СтрокаЗапроса = "/api_v2/AccountDatabases/SetBackupDate";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает BackupDate
//
// параметры:
//	accountDatabaseID, тип "строка" - идентификатор базы данных
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: дата или неопределено
//
Функция AccountDatabases_GetBackupDate(accountDatabaseID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountDatabases/GetBackupDate?accountDatabaseID=" + accountDatabaseID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		СтруктураТиповПараметров = Новый Структура("BackupDate", "Дата");
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета.BackupDate;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция устанавливает CreationDate
//
// параметры:
//	accountDatabaseID, тип "строка" - идентификатор базы данных
//	сreationDate, тип "дата" - дата
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция AccountDatabases_SetCreationDate(AccountDatabaseID, CreationDate, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountDatabaseID, CreationDate", AccountDatabaseID, CreationDate);
	СтрокаЗапроса = "/api_v2/AccountDatabases/SetCreationDate";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает CreationDate
//
// параметры:
//	accountDatabaseID, тип "строка" - идентификатор базы данных
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: дата или неопределено
//
Функция AccountDatabases_GetCreationDate(accountDatabaseID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountDatabases/GetCreationDate?accountDatabaseID=" + accountDatabaseID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		СтруктураТиповПараметров = Новый Структура("CreationDate", "Дата");
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета.CreationDate;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция устанавливает Caption
//
// параметры:
//	accountDatabaseID, тип "строка" - идентификатор базы данных
//	caption, тип "строка" - заголовок
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция AccountDatabases_SetCaption(AccountDatabaseID, Caption, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountDatabaseID, Caption", AccountDatabaseID, Caption);
	СтрокаЗапроса = "/api_v2/AccountDatabases/SetCaption";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает Caption
//
// параметры:
//	accountDatabaseID, тип "строка" - идентификатор базы данных
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: заголовок или неопределено
//
Функция AccountDatabases_GetCaption(accountDatabaseID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountDatabases/GetCaption?accountDatabaseID=" + accountDatabaseID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.Caption;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция устанавливает ConfigurationServer
//
// параметры:
//	accountDatabaseID, тип "строка" - идентификатор базы данных
//	configurationServer, тип "строка" - конфигурация сервера
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция AccountDatabases_SetConfigurationServer(AccountDatabaseID, ConfigurationServer, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountDatabaseID, ConfigurationServer", AccountDatabaseID, ConfigurationServer);
	СтрокаЗапроса = "/api_v2/AccountDatabases/SetConfigurationServer";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает ConfigurationServer
//
// параметры:
//	accountDatabaseID, тип "строка" - идентификатор базы данных
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: структура или неопределено
//
Функция AccountDatabases_GetConfigurationServer(accountDatabaseID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountDatabases/GetConfigurationServer?accountDatabaseID=" + accountDatabaseID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.ConfigurationServer;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция устанавливает ConfigurationFilePath
//
// параметры:
//	accountDatabaseID, тип "строка" - идентификатор базы данных
//	configurationFilePath, тип "строка" - путь до конфигурации
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция AccountDatabases_SetConfigurationFilePath(AccountDatabaseID, ConfigurationFilePath, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountDatabaseID, ConfigurationFilePath", AccountDatabaseID, ConfigurationFilePath);
	СтрокаЗапроса = "/api_v2/AccountDatabases/SetConfigurationFilePath";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает ConfigurationFilePath
//
// параметры:
//	accountDatabaseID, тип "строка" - идентификатор базы данных
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: путь или неопределено
//
Функция AccountDatabases_GetConfigurationFilePath(accountDatabaseID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountDatabases/GetConfigurationFilePath?accountDatabaseID=" + accountDatabaseID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.ConfigurationFilePath;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция устанавливает SqlName
//
// параметры:
//	accountDatabaseID, тип "строка" - идентификатор базы данных
//	sqlName, тип "строка" - путь до конфигурации
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: истина или неопределено
//
Функция AccountDatabases_SetSqlName(AccountDatabaseID, SQLName, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountDatabaseID, SQLName", AccountDatabaseID, SQLName);
	СтрокаЗапроса = "/api_v2/AccountDatabases/SetSqlName";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает SqlName
//
// параметры:
//	accountDatabaseID, тип "строка" - идентификатор базы данных
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: имя или неопределено
//
Функция AccountDatabases_GetSqlName(accountDatabaseID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountDatabases/GetSqlName?accountDatabaseID=" + accountDatabaseID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.SqlName;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает AccountDatabasesIDs (список баз данных аккаунта)
//
// параметры:
//	accountDatabaseID, тип "строка" - идентификатор базы данных
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемое значение: массив идентификаторов баз или неопределено
//
Функция AccountDatabases_GetIDs(accountId, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AccountDatabases/GetIDs?accountId=" + accountId;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.AccountDatabasesIDs;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции




////////////////////////////// AcDbAccesses //////////////////////////////
// Параметры доступов при совместной работе с базами данных 


// Получение списка идентификаторов доступов, предоставленных указанному аккаунту 
//
// параметры:
//	AccessAccountID, тип "строка" - идентификатор доступа аккаунта 
//
// возвращаемое значение: массив идентификаторов доступов или неопределено
//
Функция AcDbAccesses_FindIDsByAccessAccountID(accountID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AcDbAccesses/FindIDsByAccessAccountID?accountID=" + accountID + "&accountUserId=";
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда    
		Возврат ПараметрыОтвета.СтруктураОтвета.AccessIDs;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


// Получение списка идентификаторов доступов, предоставленных указанному аккаунту 
//
// параметры:
//	AccessAccountID, тип "строка" - идентификатор доступа аккаунта 
//
// возвращаемое значение: массив идентификаторов доступов или неопределено
//
Функция AcDbAccesses_GetProperties(accessID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolCoreHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("Core");
	#КонецЕсли
	
	СтрокаПараметры = "AcDbAccesses/GetProperties?accessID=" + accessID;
	СтрокаЗапроса = "/api_v2/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolCoreHTTP, СтрокаЗапроса);                   
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда    
		Возврат ПараметрыОтвета.СтруктураОтвета;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции
