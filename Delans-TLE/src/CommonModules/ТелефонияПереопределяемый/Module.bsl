
#Область ПрограммныйИнтерфейс

Процедура ПриСозданииИсходящегоВызова(Знач НомерАбонента, ДанныеПользователяАТС, URL, ТелоЗапроса, Заголовки, Ошибка) Экспорт
	
	НастройкиТелефонии = ТелефонияСервер.ПолучитьНастройкиТелефонии();
	
	ИспользуемаяАТС = Константы.ИспользуемаяАТС.Получить();
	ПараметрыЗапроса = Новый Массив;
	
	Если НЕ НастройкиИнтеграцииЗаполнены(ИспользуемаяАТС, НастройкиТелефонии) Тогда
		Ошибка = "НеЗаполненыНастройкиИнтеграции";
		Возврат;
	КонецЕсли;
	
	НомерАбонента = КонтактнаяИнформацияУНФ.ПреобразоватьНомерДляКонтактнойИнформации(НомерАбонента);
	
	Если ИспользуемаяАТС = Перечисления.ДоступныеАТС.MangoOffice Тогда
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("command_id");
		ЗаписьJSON.ЗаписатьЗначение(Строка(Новый УникальныйИдентификатор));
		
		ЗаписьJSON.ЗаписатьИмяСвойства("from");
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("extension");
		ЗаписьJSON.ЗаписатьЗначение(ДанныеПользователяАТС.ВнутреннийНомер);
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("to_number");
		ЗаписьJSON.ЗаписатьЗначение(НомерАбонента);
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		json = ЗаписьJSON.Закрыть();
		
		sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
		
		ПараметрыЗапроса.Добавить("vpbx_api_key=" + КодировкаURL(НастройкиТелефонии.vpbx_api_key));
		ПараметрыЗапроса.Добавить("sign=" + КодировкаURL(sign));
		ПараметрыЗапроса.Добавить("json=" + КодировкаURL(json));
		
		URL = URL + "commands/callback";
		
	ИначеЕсли ЭтоПлатформаItoolabs(ИспользуемаяАТС) Тогда
		
		ПараметрыЗапроса.Добавить("cmd=makeCall");
		ПараметрыЗапроса.Добавить("phone=" + НомерАбонента);
		ПараметрыЗапроса.Добавить("user=" + ДанныеПользователяАТС.ВнутреннийНомер);
		ПараметрыЗапроса.Добавить("token=" + НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС);
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.ДоступныеАТС.Яндекс Тогда
		
		Если НЕ ЗначениеЗаполнено(ДанныеПользователяАТС.ИсходящийНомер) Тогда
			Ошибка = "НеЗаполненНомерИсходящегоЗвонкаПользователя";
			Возврат;
		КонецЕсли;
		
		Токен = ТокенДоступаAPI(ДанныеПользователяАТС.ВнутреннийНомер, Ошибка);
		
		Если Ошибка <> Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Токен = Неопределено Тогда
			ВызватьИсключение НСтр("ru='Не удалось авторизоваться.'");
		КонецЕсли;
		
		URL = URL + "api/v2/calls/makecall";
		
		Заголовки.Вставить("Authorization", "bearer " + Токен);
		Заголовки.Вставить("x-api-key", ТелефонияСервер.ПолучитьНастройкиТелефонии().КлючДляАвторизацииАТСЯндекс);
		
		Если НЕ СтрНачинаетсяС(НомерАбонента, "+") Тогда
			НомерАбонента = "+" + НомерАбонента;
		КонецЕсли;
		НомерАбонента = КодироватьСтроку(НомерАбонента, СпособКодированияСтроки.КодировкаURL);
		
		БизнесНомер = КонтактнаяИнформацияУНФ.ПреобразоватьНомерДляКонтактнойИнформации(ДанныеПользователяАТС.ИсходящийНомер);
		Если НЕ СтрНачинаетсяС(БизнесНомер, "+") Тогда
			БизнесНомер = "+" + БизнесНомер;
		КонецЕсли;
		БизнесНомер = КодироватьСтроку(БизнесНомер, СпособКодированияСтроки.КодировкаURL);
		
		ПараметрыЗапроса.Добавить("from=" + БизнесНомер);
		ПараметрыЗапроса.Добавить("to=" + НомерАбонента);
		
	КонецЕсли;
	
	ТелоЗапроса = СтрСоединить(ПараметрыЗапроса, "&");
	
КонецПроцедуры

Процедура ПриОбработкеОтветаНаСозданиеИсходящегоВызова(HTTPОтвет, ИмяСобытияДляЖурналаРегистрации) Экспорт
	
	ИспользуемаяАТС = Константы.ИспользуемаяАТС.Получить();
	
	Если ИспользуемаяАТС = Перечисления.ДоступныеАТС.MangoOffice Тогда
		
		ТелоОтвета = РаскодироватьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
		
		Если HTTPОтвет.КодСостояния = 200 Тогда
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
			ПараметрыОтвета = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			
			КодОтвета = Неопределено;
			ПараметрыОтвета.Свойство("result", КодОтвета);
			
			// 1ххх: Действие успешно выполнено
			Если СтрНачинаетсяС(КодОтвета, "1") Тогда
				Возврат;
			КонецЕсли;
			
			ЗаголовокОшибки = РасшифровкаОшибкиMango(КодОтвета);
			ТекстОшибки = ТелоОтвета;
			
		Иначе
			
			ЗаголовокОшибки = НСтр("ru='Ошибка при инициализации вызова.'");
			ТекстОшибки = ТелоОтвета;
			
		КонецЕсли;
		
	ИначеЕсли ЭтоПлатформаItoolabs(ИспользуемаяАТС) Тогда
		
		// 200 ОК
		Если HTTPОтвет.КодСостояния = 200 Тогда
			Возврат;
		КонецЕсли;
		
		ЗаголовокОшибки = РасшифровкаОшибкиItoolabs(HTTPОтвет.КодСостояния);
		ТекстОшибки = РаскодироватьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ТекстОшибки = СтрШаблон("%1%2%3",
		ЗаголовокОшибки,
		Символы.ПС,
		ТекстОшибки);
	
	ЗаписатьЗапросВЖурналРегистрации(ИмяСобытияДляЖурналаРегистрации, ТекстОшибки, УровеньЖурналаРегистрации.Ошибка);
	
	ВызватьИсключение ТекстОшибки;
	
КонецПроцедуры

Функция СсылкаНаЗаписьРазговора(ИдентификаторЗвонка, Ошибка) Экспорт
	
	ИспользуемаяАТС = Константы.ИспользуемаяАТС.Получить();
	
	Если ИспользуемаяАТС = Перечисления.ДоступныеАТС.Яндекс Тогда
		
		Возврат ДанныеЗвонка(ИдентификаторЗвонка, Ошибка);
		
	КонецЕсли;
	
КонецФункции

Функция НастройкиФормыПользователей() Экспорт
	
	НастройкиФормы = Новый Структура;
	НастройкиФормы.Вставить("ПоказыватьИсходящийНомер", Константы.ИспользуемаяАТС.Получить() = Перечисления.ДоступныеАТС.Яндекс);
	
	Возврат НастройкиФормы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область MangoOffice

Функция КодировкаURL(Строка)
	
	Возврат КодироватьСтроку(Строка, СпособКодированияСтроки.КодировкаURL);
	
КонецФункции

Функция ПолучитьSign(vpbx_api_key, json, vpbx_api_salt) Экспорт
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	//ХешированиеДанных.Добавить(vpbx_api_key + json + vpbx_api_salt);
	ХешированиеДанных.Добавить(vpbx_api_key);
	ХешированиеДанных.Добавить(json);
	ХешированиеДанных.Добавить(vpbx_api_salt);
	
	Возврат НРег(СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", ""));
	
КонецФункции

Функция РасшифровкаОшибкиMango(Знач Код)
	
	Код = Формат(Код, "ЧГ=0");
	
	Если СтрНачинаетсяС(Код, "21") Тогда // 2100
		Возврат НСтр("ru='Доступ к счету невозможен'");
	ИначеЕсли Код = "2210" Тогда
		Возврат НСтр("ru='Доступ ограничен периодом использования'");
	ИначеЕсли Код = "2211" Тогда
		Возврат НСтр("ru='Достигнут дневной лимит использования услуги'");
	ИначеЕсли Код = "2212" Тогда
		Возврат НСтр("ru='Достигнут месячный лимит использования услуги'");
	ИначеЕсли Код = "2220" Тогда
		Возврат НСтр("ru='Количество одновременных вызовов/действий ограничено'");
	ИначеЕсли Код = "2230" Тогда
		Возврат НСтр("ru='Услуга недоступна'");
	ИначеЕсли Код = "2240" Тогда
		Возврат НСтр("ru='Недостаточно средств на счете'");
	ИначеЕсли Код = "2250" Тогда
		Возврат НСтр("ru='Ограничение на количество использований услуги в биллинге'");
	ИначеЕсли СтрНачинаетсяС(Код, "22") Тогда // 2200
		Возврат НСтр("ru='Доступ к счету ограничен'");
	ИначеЕсли СтрНачинаетсяС(Код, "23") Тогда // 2300
		Возврат НСтр("ru='Направление заблокировано'");
	ИначеЕсли СтрНачинаетсяС(Код, "24") Тогда // 2400
		Возврат НСтр("ru='Ошибка биллинга'");
	ИначеЕсли СтрНачинаетсяС(Код, "2") Тогда // 2000
		Возврат НСтр("ru='Ограничение биллинговой системы'");
	ИначеЕсли Код = "3100" Тогда
		Возврат НСтр("ru='Переданы неверные параметры команды'");
	ИначеЕсли Код = "3101" Тогда
		Возврат НСтр("ru='Запрос выполнен по методу, отличному от POST'");
	ИначеЕсли Код = "3102" Тогда
		Возврат НСтр("ru='Значение ключа не соответствуют рассчитанному'");
	ИначеЕсли Код = "3103" Тогда
		Возврат НСтр("ru='В запросе отсутствует обязательный параметр'");
	ИначеЕсли Код = "3104" Тогда
		Возврат НСтр("ru='Параметр передан в неправильном формате'");
	ИначеЕсли Код = "3105" Тогда
		Возврат НСтр("ru='Неверный ключ доступа'");
	ИначеЕсли СтрНачинаетсяС(Код, "32") Тогда // 3200
		Возврат НСтр("ru='Неверно указан номер абонента'");
	ИначеЕсли Код = "3310" Тогда
		Возврат НСтр("ru='Вызов не найден'");
	ИначеЕсли Код = "3320" Тогда
		Возврат НСтр("ru='Запись разговора не найдена'");
	ИначеЕсли Код = "3330" Тогда
		Возврат НСтр("ru='Номер не найден у ВАТС или сотрудника'");
	ИначеЕсли СтрНачинаетсяС(Код, "33") Тогда // 3300
		Возврат НСтр("ru='Объект не существует'");
	ИначеЕсли СтрНачинаетсяС(Код, "3") Тогда // 3000
		Возврат НСтр("ru='Неверный запрос'");
	ИначеЕсли СтрНачинаетсяС(Код, "4") Тогда // 4000
		Возврат НСтр("ru='Действие не может быть выполнено'");
	ИначеЕсли СтрНачинаетсяС(Код, "5") Тогда // 5000
		Возврат НСтр("ru='Ошибка сервера'");
	Иначе
		Возврат НСтр("ru='Неизвестная ошибка'");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Itoolabs

Функция РасшифровкаОшибкиItoolabs(Код)
	
	Если Код = 400 Тогда
		Возврат НСтр("ru='Переданы некорректные параметры'");
	ИначеЕсли Код = 401 Тогда
		Возврат НСтр("ru='Передан неверный ключ (token)'");
	Иначе
		Возврат НСтр("ru='Неизвестная ошибка'")
	КонецЕсли;
	
КонецФункции

Функция ЭтоПлатформаItoolabs(АТС) Экспорт
	
	АТСНаПлатформеItoolabs = Новый Массив;
	АТСНаПлатформеItoolabs.Добавить(Перечисления.ДоступныеАТС.УниверсальныйItoolabs);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.ДоступныеАТС.ДомRu);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.ДоступныеАТС.ВестКоллСПб);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.ДоступныеАТС.ДеловаяСетьИркутск);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.ДоступныеАТС.Энфорта);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.ДоступныеАТС.Мегафон);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.ДоступныеАТС.ТТК);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.ДоступныеАТС.ВестКоллМосква);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.ДоступныеАТС.VirginConnect);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.ДоступныеАТС.ГарсТелеком);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.ДоступныеАТС.НаукаСвязь);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.ДоступныеАТС.RiNet);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.ДоступныеАТС.СибирскиеСети);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.ДоступныеАТС.Авантел);
	АТСНаПлатформеItoolabs.Добавить(Перечисления.ДоступныеАТС.Гравител);
	
	Возврат АТСНаПлатформеItoolabs.Найти(АТС) <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область ЯндексТелефония

Функция ТокенДоступаAPI(ВнутреннийНомер, Ошибка)
	
	Токен = АктуальныйТокенДоступаAPI(ВнутреннийНомер);
	
	Если Токен = Неопределено Тогда
		Токен = НовыйТокенДоступаAPI(ВнутреннийНомер, Ошибка);
	КонецЕсли;
	
	Возврат Токен;
	
КонецФункции

Функция АктуальныйТокенДоступаAPI(ВнутреннийНомер)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ТокеныДоступаAPIТелефонии.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВнутреннийНомерСотрудника = ВнутреннийНомер;
	МенеджерЗаписи.Прочитать();
	
	Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.Токен) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если МенеджерЗаписи.СрокДействия < ТекущаяДатаСеанса() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат МенеджерЗаписи.Токен;
	
КонецФункции

Функция НовыйТокенДоступаAPI(ВнутреннийНомер, Ошибка)
	
	ДанныеАвторизации = ЗапроситьТокенДоступа(ВнутреннийНомер, Ошибка);
	
	Если ЗначениеЗаполнено(Ошибка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДанныеАвторизации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаписатьТокенДоступа(
		ВнутреннийНомер,
		ДанныеАвторизации.access_token,
		ТекущаяДатаСеанса() + ДанныеАвторизации.expires_in);
	
	Возврат ДанныеАвторизации.access_token;
	
КонецФункции

Функция ЗапроситьТокенДоступа(ВнутреннийНомер, Ошибка)
	
	api_key = ТелефонияСервер.ПолучитьНастройкиТелефонии().КлючДляАвторизацииАТСЯндекс;
	
	URL = ТелефонияСервер.КорневойАдресАТС() + "api/v2/auth/token";
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	
	ПараметрыЗапроса = Новый Массив;
	ПараметрыЗапроса.Добавить("grant_type=client_credentials");
	ПараметрыЗапроса.Добавить("client_id=" + api_key);
	ПараметрыЗапроса.Добавить("client_secret=" + ВнутреннийНомер);
	
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	HTTPЗапрос.Заголовки.Вставить("x-api-key", api_key);
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрСоединить(ПараметрыЗапроса, "&"),
		КодировкаТекста.UTF8,
		ИспользованиеByteOrderMark.НеИспользовать);
	
	Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(СтруктураURI.Схема);
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт,,, Прокси, 20, Новый ЗащищенноеСоединениеOpenSSL);
	HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТелоЗапроса = РаскодироватьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
	ПараметрыЗапроса = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Если ПараметрыЗапроса.Свойство("error") И ПараметрыЗапроса.error = "invalid_client" Тогда
		Ошибка = "НекорректныйВнутреннийНомерПользователя";
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ЗаписатьТокенДоступа(ВнутреннийНомер, Токен, СрокДействия)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ТокеныДоступаAPIТелефонии.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВнутреннийНомерСотрудника = ВнутреннийНомер;
	МенеджерЗаписи.Токен = Токен;
	МенеджерЗаписи.СрокДействия = СрокДействия;
	МенеджерЗаписи.Записать();
	
КонецФункции

Функция ДанныеЗвонка(ИдентификаторЗвонка, Ошибка)
	
	Токен = ТокенДоступаAPI(ТелефонияСервер.ПолучитьВнутреннийНомерПоПользователю(), Ошибка);
	
	Если Ошибка <> Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Токен = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Не удалось авторизоваться.'");
	КонецЕсли;
	
	URL = ТелефонияСервер.КорневойАдресАТС() + "api/v2/calls/" + ИдентификаторЗвонка;
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization", "bearer " + Токен);
	HTTPЗапрос.Заголовки.Вставить("x-api-key", ТелефонияСервер.ПолучитьНастройкиТелефонии().КлючДляАвторизацииАТСЯндекс);
	
	Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(СтруктураURI.Схема);
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт,,, Прокси, 20, Новый ЗащищенноеСоединениеOpenSSL);
	
	HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("GET", HTTPЗапрос);
	
	// todo если запрос неуспешно то отвал
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТелоЗапроса = РаскодироватьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку(), СпособКодированияСтроки.КодировкаURL);
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
	МассивИмен = Новый Массив;
	ПараметрыЗапроса = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	ДанныеЗаписи = ПараметрыЗапроса.data.callRecord;
	
	СсылкаНаЗапись = ?(ДанныеЗаписи = Неопределено, Неопределено, ДанныеЗаписи.Uri);
	
	ТелефонияСервер.ОбработатьЗавершениеЗвонка(,,,,,,
		СсылкаНаЗапись,
		Ложь,
		ИдентификаторЗвонка);
	
	Возврат СсылкаНаЗапись;
	
КонецФункции

#КонецОбласти

Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru='Телефония'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Процедура ЗаписатьЗапросВЖурналРегистрации(ВложенноеИмяСобытия, Текст, УровеньЖР = Неопределено) Экспорт
	
	Если УровеньЖР = Неопределено Тогда
		УровеньЖР = УровеньЖурналаРегистрации.Примечание;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации() + "." + ВложенноеИмяСобытия,
		УровеньЖР,,,
		Текст);
	
КонецПроцедуры

Функция НастройкиИнтеграцииЗаполнены(АТС, НастройкиТелефонии)
	
	Если АТС = Перечисления.ДоступныеАТС.MangoOffice Тогда
		
		Возврат ЗначениеЗаполнено(НастройкиТелефонии.vpbx_api_key)
			И ЗначениеЗаполнено(НастройкиТелефонии.vpbx_api_salt);
		
	ИначеЕсли ЭтоПлатформаItoolabs(АТС) Тогда
		
		Возврат ЗначениеЗаполнено(НастройкиТелефонии.АдресОблачнойАТС)
			И ЗначениеЗаполнено(НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС)
			И ЗначениеЗаполнено(НастройкиТелефонии.КлючДляАвторизацииВУНФ);
		
	ИначеЕсли АТС = Перечисления.ДоступныеАТС.Яндекс Тогда
		
		Возврат ЗначениеЗаполнено(НастройкиТелефонии.КлючДляАвторизацииАТСЯндекс);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти
