
Функция ПолучитьКурьераПоУстройству(ИдентификаторУстройства) Экспорт
	
	СтруктураОтвета = Новый Структура("Ок, Курьер, Сообщение");
	Запрос = Новый Запрос;
	Запрос.Текст =
	   	"ВЫБРАТЬ
		|	ES_CоответствиеПравилОбменаОборудованияOfflineИКурьеров.Курьер
		|ИЗ
		|	РегистрСведений.ES_CоответствиеПравилОбменаОборудованияOfflineИКурьеров КАК ES_CоответствиеПравилОбменаОборудованияOfflineИКурьеров
		|ГДЕ
		|	ES_CоответствиеПравилОбменаОборудованияOfflineИКурьеров.Оборудование.ИдентификаторWebСервисОборудования = &ИдентификаторУстройства";
	
	Запрос.УстановитьПараметр("ИдентификаторУстройства", СокрЛП(ИдентификаторУстройства));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		СтруктураОтвета.Ок = Ложь;
		СтруктураОтвета.Сообщение = "В центральной базе не установлено соответствие мобильного устройства и курьера."; 
		Возврат СтруктураОтвета;
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() > 1 Тогда
		СтруктураОтвета.Ок = Ложь;
		СтруктураОтвета.Сообщение = "В центральной базе существует несколько записей о данном устройстве."; 
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		  СтруктураОтвета.Ок = Истина;
		  СтруктураОтвета.Курьер = Выборка.Курьер;
		  Возврат СтруктураОтвета;
	КонецЦикла;
	
	
	
КонецФункции

Функция УстановитьIDУстройстваДляКурьера(ИдентификаторУстройства, ТекстЗапроса) Экспорт
	
	СтруктураОтвета = Новый Структура("Ок, Курьер, Сообщение, МенеджерКонтактноеЛицо, МенеджерТелефон, МенеджерEmail, АдресСклада, МетроСклада");
	Запрос = Новый Запрос;
	Запрос.Текст =
	   	"ВЫБРАТЬ
	   	|	ES_CоответствиеПравилОбменаОборудованияOfflineИКурьеров.Курьер КАК Курьер,
	   	|	ES_CоответствиеПравилОбменаОборудованияOfflineИКурьеров.Оборудование КАК Оборудование,
	   	|	ES_CоответствиеПравилОбменаОборудованияOfflineИКурьеров.Курьер.ES_АдресСклада КАК КурьерES_АдресСклада,
	   	|	ES_CоответствиеПравилОбменаОборудованияOfflineИКурьеров.Курьер.ES_МетроСклада КАК КурьерES_МетроСклада
	   	|ИЗ
	   	|	РегистрСведений.ES_CоответствиеПравилОбменаОборудованияOfflineИКурьеров КАК ES_CоответствиеПравилОбменаОборудованияOfflineИКурьеров
	   	|ГДЕ
	   	|	ES_CоответствиеПравилОбменаОборудованияOfflineИКурьеров.Оборудование.ИдентификаторWebСервисОборудования = &ИдентификаторУстройства";
	
	Запрос.УстановитьПараметр("ИдентификаторУстройства", СокрЛП(ИдентификаторУстройства));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		СтруктураОтвета.Ок = Ложь;
		СтруктураОтвета.Сообщение = "В центральной базе не установлено соответствие мобильного устройства и курьера."; 
		Возврат СтруктураОтвета;
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() > 1 Тогда
		СтруктураОтвета.Ок = Ложь;
		СтруктураОтвета.Сообщение = "В центральной базе существует несколько записей о данном устройстве."; 
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	Выборка.Следующий();
	
	СтруктураОтвета.Ок = Истина;
	//EFSOL_Сальник К.А. 2019-05-15 {+
	СтруктураОтвета.МенеджерКонтактноеЛицо = Константы.ES_МенеджерКонтактноеЛицо.Получить();
	СтруктураОтвета.МенеджерТелефон = Константы.ES_МенеджерТелефон.Получить();	
	СтруктураОтвета.МенеджерEmail = Константы.ES_МенеджерEmail.Получить();
	СтруктураОтвета.АдресСклада = Выборка.КурьерES_АдресСклада;
	СтруктураОтвета.МетроСклада = Выборка.КурьерES_МетроСклада;
	//EFSOL_Сальник К.А.  -}
	
	Данные = Десериализовать(ТекстЗапроса);
	
	МЗ = РегистрыСведений.ES_CоответствиеПравилОбменаОборудованияOfflineИКурьеров.СоздатьМенеджерЗаписи();
	МЗ.Оборудование = Выборка.Оборудование;
	МЗ.Прочитать();
	МЗ.ID = Новый ХранилищеЗначения(Данные);
	МЗ.Записать();
	Возврат СтруктураОтвета;
	
	
	
КонецФункции

Функция Десериализовать(Данные,ТипПреобразования = Неопределено) Экспорт
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.УстановитьСтроку(Данные);
	ПрочитанныеДанные = СериализаторXDTO.ПрочитатьXML(ЧтениеХМЛ);
	ЧтениеХМЛ.Закрыть();
	Возврат ПрочитанныеДанные;
	
КонецФункции


Функция ПолучитьОтчетНаСегодня (Курьер) Экспорт
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Причины", Новый Массив);
	СтруктураОтвета.Вставить("Отчеты", Новый Массив);
	//СтруктураОтвета.Вставить("Заказы");
	//СтруктураОтвета.Вставить("Товары");
	МассивОтчетов = Новый Массив;	
	МассивЗаказов = Новый Массив;
	МассивТоваров = Новый Массив;     	
	
	ПолучитьМаксимальныйКодПоискаНоменклатуры(Курьер);      	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	
		"ВЫБРАТЬ
		|	МАКСИМУМ(ES_ОтчетОДоставке.Ссылка) КАК Ссылка,
		|	МАКСИМУМ(ES_ОтчетОДоставке.Курьер) КАК Курьер,
		|	ES_ОтчетОДоставке.Номер КАК Номер,
		|	МАКСИМУМ(ES_ОтчетОДоставке.Дата) КАК Дата,
		|	МАКСИМУМ(ES_CоответствиеПравилОбменаОборудованияOfflineИКурьеров.Оборудование.ПравилоОбмена) КАК ПравилоОбмена,
		|	МАКСИМУМ(ES_ОтчетОДоставке.Ссылка) КАК Ссылка1,
		|	МАКСИМУМ(ES_ОтчетОДоставкеЗаказы.ВремяФактическойДоставки) КАК ВремяФактическойДоставки,
		|	ES_ОтчетОДоставке.ПометкаУдаления КАК ПометкаУдаления,
		|	ES_ОтчетОДоставке.Статус = ЗНАЧЕНИЕ(Перечисление.ES_СтатусыОтчетов.Закрыт) КАК Обработан,
		|	ES_ОтчетОДоставке.Статус КАК Статус
		|ПОМЕСТИТЬ ВТ_Отчеты
		|ИЗ
		|	Документ.ES_ОтчетОДоставке.Заказы КАК ES_ОтчетОДоставкеЗаказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ES_ОтчетОДоставке КАК ES_ОтчетОДоставке
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_CоответствиеПравилОбменаОборудованияOfflineИКурьеров КАК ES_CоответствиеПравилОбменаОборудованияOfflineИКурьеров
		|			ПО ES_ОтчетОДоставке.Курьер = ES_CоответствиеПравилОбменаОборудованияOfflineИКурьеров.Курьер
		|		ПО ES_ОтчетОДоставкеЗаказы.Ссылка = ES_ОтчетОДоставке.Ссылка
		|ГДЕ
		|	КОНЕЦПЕРИОДА(ES_ОтчетОДоставке.Дата, ДЕНЬ) >= КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
		|	И ES_ОтчетОДоставке.Курьер = &Курьер
		|
		|СГРУППИРОВАТЬ ПО
		|	ES_ОтчетОДоставке.Номер,
		|	ES_ОтчетОДоставке.ПометкаУдаления,
		|	ES_ОтчетОДоставке.Статус,
		|	ES_ОтчетОДоставке.Статус = ЗНАЧЕНИЕ(Перечисление.ES_СтатусыОтчетов.Закрыт)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Отчеты.Ссылка КАК ДокОтчет,
		|	ВТ_Отчеты.Номер КАК НомерОтчета,
		|	ВТ_Отчеты.Дата КАК ДатаОтчета,
		|	ES_ОтчетОДоставкеЗаказы.ДокументДоставки КАК ДокументДоставки,
		|	ES_ОтчетОДоставкеЗаказы.АдресДоставки КАК АдресДоставки,
		|	ES_ОтчетОДоставкеЗаказы.ВидДоставки КАК ВидДоставки,
		|	ES_ОтчетОДоставкеЗаказы.Заказчик КАК Заказчик,
		|	ES_ОтчетОДоставкеЗаказы.НППлан КАК НППлан,
		|	ES_ОтчетОДоставкеЗаказы.НПФакт КАК НПФакт,
		|	ES_ОтчетОДоставкеЗаказы.СтатусЗаказа КАК СтатусЗаказа,
		|	ES_ОтчетОДоставкеЗаказы.ВидОплаты КАК ВидОплаты,
		|	ES_ОтчетОДоставкеЗаказы.НомерНакладной КАК НомерНакладной,
		|	ВТ_Отчеты.ПравилоОбмена КАК ПравилоОбмена,
		|	ВТ_Отчеты.ВремяФактическойДоставки КАК ВремяФактическойДоставки,
		|	ES_ОтчетОДоставкеЗаказы.НомерНакладнойПредставление КАК НомерНакладнойПредставление,
		|	ES_ОтчетОДоставкеЗаказы.НПФактБезнал КАК НПФактБезнал,
		|	ВТ_Отчеты.ПометкаУдаления КАК ПометкаУдаления,
		|	ВТ_Отчеты.Обработан КАК Обработан,
		|	ES_ОтчетОДоставкеЗаказы.ОплаченiBox КАК ОплаченiBox,
		|	ES_ОтчетОДоставкеЗаказы.ИДТранзакции КАК ИДТранзакции,
		|	ES_ОтчетОДоставкеЗаказы.НомерЧека КАК НомерЧека,
		|	ES_ОтчетОДоставкеЗаказы.ФИОПолучателя КАК ФИОПолучателя,
		|	ES_ОтчетОДоставкеЗаказы.СвязанныйДокумент КАК СвязанныйДокумент
		|ПОМЕСТИТЬ ВТ_Заказы
		|ИЗ
		|	ВТ_Отчеты КАК ВТ_Отчеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ES_ОтчетОДоставке.Заказы КАК ES_ОтчетОДоставкеЗаказы
		|		ПО ВТ_Отчеты.Ссылка = ES_ОтчетОДоставкеЗаказы.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Заказы.ДокОтчет КАК ДокОтчет,
		|	ЕСТЬNULL(ВТ_Заказы.НомерОтчета, 0) КАК НомерОтчета,
		|	ЕСТЬNULL(ВТ_Заказы.ДатаОтчета, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОтчета,
		|	ЕСТЬNULL(ES_ДанныеПоЗаказамСрезПоследних.ДатаДокумента, ДАТАВРЕМЯ(1, 1, 1)) КАК Дата,
		|	ЕСТЬNULL(ES_ДанныеПоЗаказамСрезПоследних.НомерДокумента, 0) КАК Номер,
		|	ЕСТЬNULL(ВТ_Заказы.НомерНакладной, """") КАК НомерНакладной,
		|	ВТ_Заказы.ДокументДоставки КАК ДокументДоставки,
		|	ЕСТЬNULL(ВТ_Заказы.СтатусЗаказа, """") КАК СтатусЗаказа,
		|	ЕСТЬNULL(ВТ_Заказы.АдресДоставки, """") КАК АдресДоставки,
		|	ЕСТЬNULL(ВТ_Заказы.ВидДоставки, """") КАК ВидДоставки,
		|	ЕСТЬNULL(ВТ_Заказы.Заказчик, """") КАК Заказчик,
		|	ЕСТЬNULL(ES_ДанныеПоЗаказамСрезПоследних.ЗаказчикКонтактноеЛицо, """") КАК ЗаказчикКонтактноеЛицо,
		|	ЕСТЬNULL(ES_ДанныеПоЗаказамСрезПоследних.ЗаказчикТелефон, """") КАК ЗаказчикТелефон,
		|	ЕСТЬNULL(ВТ_Заказы.НППлан, 0) КАК НППлан,
		|	ЕСТЬNULL(ВТ_Заказы.НПФакт, 0) КАК НПФакт,
		|	ЕСТЬNULL(ES_ДанныеПоЗаказамСрезПоследних.СтоимостьДоставки, 0) КАК СтоимостьДоставки,
		|	ЕСТЬNULL(ВТ_Заказы.ВидОплаты, """") КАК ВидОплаты,
		|	ЕСТЬNULL(ES_ДанныеПоЗаказамСрезПоследних.Предоплачен, ЛОЖЬ) КАК Предоплачен,
		|	ЕСТЬNULL(ES_ДанныеПоЗаказамСрезПоследних.ЧекНаОбщуюСумму, ЛОЖЬ) КАК ЧекНаОбщуюСумму,
		|	ЕСТЬNULL(ES_ДанныеПоЗаказамСрезПоследних.Получатель, """") КАК Получатель,
		|	ЕСТЬNULL(ES_ДанныеПоЗаказамСрезПоследних.ПолучательКонтактноеЛицо, """") КАК ПолучательКонтактноеЛицо,
		|	ЕСТЬNULL(ES_ДанныеПоЗаказамСрезПоследних.ПолучательРегион, """") КАК ПолучательРегион,
		|	ЕСТЬNULL(ES_ДанныеПоЗаказамСрезПоследних.ПолучательТелефон, """") КАК ПолучательТелефон,
		|	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Номенклатура.Код, """") КАК Код,
		|	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Номенклатура.Наименование, """") КАК Наименование,
		|	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Номенклатура, """") КАК ЗапасНоменклатура,
		|	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Номенклатура.Артикул, """") КАК Артикул,
		|	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Номенклатура.ТипНоменклатуры, """") КАК НоменклатураТипНоменклатуры,
		|	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение, """") КАК ЕдиницаИзмеренияМеждународноеСокращение,
		|	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Номенклатура.ЕдиницаИзмерения.Наименование, """") КАК НоменклатураЕдиницаИзмеренияНаименование,
		|	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Номенклатура.ЕдиницаИзмерения.Код, """") КАК НоменклатураЕдиницаИзмеренияКод,
		|	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.СтавкаНДС, """") КАК НоменклатураСтавкаНДС,
		|	ES_НоменклатураВЗаказахСрезПоследних.Содержание КАК Содержание,
		|	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Количество, 0) КАК Количество,
		|	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Цена, 0) КАК Цена,
		|	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.НППлан, 0) КАК ЗапасНППлан,
		|	ЕСТЬNULL(ES_ДанныеПоЗаказамСрезПоследних.ВремяДоставкиС, ДАТАВРЕМЯ(1, 1, 1)) КАК ВремяС,
		|	ЕСТЬNULL(ES_ДанныеПоЗаказамСрезПоследних.ВремяДоставкиПо, ДАТАВРЕМЯ(1, 1, 1)) КАК ВремяПо,
		|	ВТ_Заказы.ПравилоОбмена КАК ПравилоОбмена,
		|	ES_НоменклатураВЗаказахСрезПоследних.Номенклатура КАК Номенклатура,
		|	ES_НоменклатураВЗаказахСрезПоследних.Характеристика КАК Характеристика,
		|	ЕСТЬNULL(ES_ДанныеПоЗаказамСрезПоследних.ДатаДоставки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДоставки,
		|	ЕСТЬNULL(ES_ДанныеПоЗаказамСрезПоследних.ОбщийВес, 0) КАК ОбщийВес,
		|	ЕСТЬNULL(ES_ДанныеПоЗаказамСрезПоследних.ОбщийОбъем, 0) КАК ОбщийОбъем,
		|	ЕСТЬNULL(ES_ДанныеПоЗаказамСрезПоследних.ОбщийОбъемныйВес, 0) КАК ОбщийОбъемныйВес,
		|	ЕСТЬNULL(ES_ДанныеПоЗаказамСрезПоследних.КоличествоМест, 0) КАК Мест,
		|	ES_ДанныеПоЗаказамСрезПоследних.Регистратор КАК Регистратор,
		|	NULL КАК Отправитель,
		|	NULL КАК Регион,
		|	NULL КАК Комментарий,
		|	ES_ДанныеПоЗаказамСрезПоследних.Заказ.Комментарий КАК Примечание,
		|	ВТ_Заказы.ВремяФактическойДоставки КАК ВремяФактическойДоставки,
		|	NULL КАК ЗаборДокументОснование,
		|	NULL КАК ЗаборДокументОснованиеНомер,
		|	ВТ_Заказы.НомерНакладнойПредставление КАК НомерНакладнойПредставление,
		|	ES_НоменклатураВЗаказахСрезПоследних.Штрихкод КАК Штрихкод,
		|	ВТ_Заказы.НПФактБезнал КАК НПФактБезнал,
		|	ВТ_Заказы.ПометкаУдаления КАК ПометкаУдаления,
		|	ЕСТЬNULL(ES_ДанныеПоЗаказамСрезПоследних.ВхНакладная, """") КАК ВхНакладная,
		|	ВТ_Заказы.Обработан КАК Обработан,
		|	ВТ_Заказы.ОплаченiBox КАК ОплаченiBox,
		|	ВТ_Заказы.ИДТранзакции КАК ИДТранзакции,
		|	ES_ДанныеПоЗаказамСрезПоследних.АдресДоставкиДолгота КАК Долгота,
		|	ES_ДанныеПоЗаказамСрезПоследних.АдресДоставкиШирота КАК Широта,
		|	ВТ_Заказы.НомерЧека КАК НомерЧека,
		|	ВТ_Заказы.ФИОПолучателя КАК ФИОПолучателя,
		|	ES_ДанныеПоЗаказамСрезПоследних.ВидЗабора КАК ВидЗабора,
		|	ES_ДанныеПоЗаказамСрезПоследних.ЗаборАдрес КАК ЗаборАдрес,
		|	ES_ДанныеПоЗаказамСрезПоследних.ЗаборАдресДолгота КАК ЗаборАдресДолгота,
		|	ES_ДанныеПоЗаказамСрезПоследних.ЗаборАдресШирота КАК ЗаборАдресШирота,
		|	ES_ДанныеПоЗаказамСрезПоследних.ЗаборДата КАК ЗаборДата,
		|	ES_ДанныеПоЗаказамСрезПоследних.ЗаборВремяС КАК ЗаборВремяС,
		|	ES_ДанныеПоЗаказамСрезПоследних.ЗаборВремяПо КАК ЗаборВремяПо,
		|	ES_ДанныеПоЗаказамСрезПоследних.ЗаборОтправитель КАК ЗаборОтправитель,
		|	ES_ДанныеПоЗаказамСрезПоследних.ЗаборКонтактноеЛицо КАК ЗаборКонтактноеЛицо,
		|	ES_ДанныеПоЗаказамСрезПоследних.ЗаборРегион КАК ЗаборРегион,
		|	ES_ДанныеПоЗаказамСрезПоследних.ЗаборТелефон КАК ЗаборТелефон,
		|	ВЫРАЗИТЬ(ES_ДанныеПоЗаказамСрезПоследних.Заказ.ES_ЗаборКомментарий КАК СТРОКА(300)) КАК ЗаборКомментарий,
		|	ЕСТЬNULL(ВТ_Заказы.СвязанныйДокумент, ЗНАЧЕНИЕ(документ.ES_ЗаборГруза.пустаяссылка)) КАК СвязанныйДокумент,
		|	ЕСТЬNULL(ES_ДанныеПоЗаказамСрезПоследних.Ответственный.Наименование, """") КАК ОтветственныйКонтЛицо,
		|	ЕСТЬNULL(ES_ДанныеПоЗаказамСрезПоследних.Ответственный.ES_НомерТелефона, """") КАК ОтветственныйТелефон
		|ПОМЕСТИТЬ ВТ_Итог
		|ИЗ
		|	ВТ_Заказы КАК ВТ_Заказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ДанныеПоЗаказам.СрезПоследних(
		|				,
		|				Заказ В
		|					(ВЫБРАТЬ
		|						ВТ_Заказы.ДокументДоставки
		|					ИЗ
		|						ВТ_Заказы КАК ВТ_Заказы)) КАК ES_ДанныеПоЗаказамСрезПоследних
		|		ПО ВТ_Заказы.ДокументДоставки = ES_ДанныеПоЗаказамСрезПоследних.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_НоменклатураВЗаказах.СрезПоследних(
		|				,
		|				ДокументДоставки В
		|					(ВЫБРАТЬ
		|						ВТ_Заказы.ДокументДоставки
		|					ИЗ
		|						ВТ_Заказы КАК ВТ_Заказы)) КАК ES_НоменклатураВЗаказахСрезПоследних
		|		ПО ВТ_Заказы.ДокументДоставки = ES_НоменклатураВЗаказахСрезПоследних.ДокументДоставки
		|ГДЕ
		|	ВТ_Заказы.ДокументДоставки ССЫЛКА Документ.ЗаказПокупателя
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Заказы.ДокОтчет,
		|	ВТ_Заказы.НомерОтчета,
		|	ВТ_Заказы.ДатаОтчета,
		|	ES_ДанныеПоЗаборамСрезПоследних.Забор.Дата,
		|	ES_ДанныеПоЗаборамСрезПоследних.НомерДокумента,
		|	ВТ_Заказы.НомерНакладной,
		|	ВТ_Заказы.ДокументДоставки,
		|	ВТ_Заказы.СтатусЗаказа,
		|	ВТ_Заказы.АдресДоставки,
		|	ВТ_Заказы.ВидДоставки,
		|	ES_ДанныеПоЗаборамСрезПоследних.Заказчик,
		|	ES_ДанныеПоЗаборамСрезПоследних.КонтактноеЛицо,
		|	ES_ДанныеПоЗаборамСрезПоследних.Телефон,
		|	ВТ_Заказы.НППлан,
		|	ВТ_Заказы.НПФакт,
		|	NULL,
		|	ВТ_Заказы.ВидОплаты,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Номенклатура.Код, """"),
		|	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Номенклатура.Наименование, """"),
		|	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Номенклатура, """"),
		|	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Номенклатура.Артикул, """"),
		|	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Номенклатура.ТипНоменклатуры, """"),
		|	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение, """"),
		|	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Номенклатура.ЕдиницаИзмерения.Наименование, """"),
		|	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Номенклатура.ЕдиницаИзмерения.Код, """"),
		|	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.СтавкаНДС, """"),
		|	ES_НоменклатураВЗаказахСрезПоследних.Содержание,
		|	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Количество, 0),
		|	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.Цена, 0),
		|	ЕСТЬNULL(ES_НоменклатураВЗаказахСрезПоследних.НППлан, 0),
		|	ES_ДанныеПоЗаборамСрезПоследних.ВремяЗабораС,
		|	ES_ДанныеПоЗаборамСрезПоследних.ВремяЗабораПо,
		|	ВТ_Заказы.ПравилоОбмена,
		|	ES_НоменклатураВЗаказахСрезПоследних.Номенклатура,
		|	ES_НоменклатураВЗаказахСрезПоследних.Характеристика,
		|	ES_ДанныеПоЗаборамСрезПоследних.ДатаЗабора,
		|	ES_ДанныеПоЗаборамСрезПоследних.ОбщийВес,
		|	ES_ДанныеПоЗаборамСрезПоследних.ОбщийОбъем,
		|	ES_НоменклатураВЗаказахСрезПоследних.ОбъемныйВес,
		|	ES_ДанныеПоЗаборамСрезПоследних.КоличествоМест,
		|	ES_ДанныеПоЗаборамСрезПоследних.Регистратор,
		|	ES_ДанныеПоЗаборамСрезПоследних.Отправитель,
		|	ES_ДанныеПоЗаборамСрезПоследних.Регион,
		|	ES_ДанныеПоЗаборамСрезПоследних.Комментарий,
		|	ES_ДанныеПоЗаборамСрезПоследних.Забор.ES_КомментарийКурьера,
		|	ВТ_Заказы.ВремяФактическойДоставки,
		|	ES_ДанныеПоЗаборамСрезПоследних.Забор.ДокументОснование,
		|	ES_ДанныеПоЗаборамСрезПоследних.Забор.ДокументОснование.Номер,
		|	ВТ_Заказы.НомерНакладнойПредставление,
		|	ES_НоменклатураВЗаказахСрезПоследних.Штрихкод,
		|	ВТ_Заказы.НПФактБезнал,
		|	ВТ_Заказы.ПометкаУдаления,
		|	"""",
		|	ВТ_Заказы.Обработан,
		|	ВТ_Заказы.ОплаченiBox,
		|	ВТ_Заказы.ИДТранзакции,
		|	ES_ДанныеПоЗаборамСрезПоследних.АдресДолгота,
		|	ES_ДанныеПоЗаборамСрезПоследних.АдресШирота,
		|	ВТ_Заказы.НомерЧека,
		|	ВТ_Заказы.ФИОПолучателя,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ЕСТЬNULL(ВТ_Заказы.СвязанныйДокумент, ЗНАЧЕНИЕ(документ.Заказпокупателя.пустаяссылка)),
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТ_Заказы КАК ВТ_Заказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ДанныеПоЗаборам.СрезПоследних(
		|				,
		|				Забор В
		|					(ВЫБРАТЬ
		|						ВТ_Заказы.ДокументДоставки
		|					ИЗ
		|						ВТ_Заказы КАК ВТ_Заказы)) КАК ES_ДанныеПоЗаборамСрезПоследних
		|		ПО ВТ_Заказы.ДокументДоставки = ES_ДанныеПоЗаборамСрезПоследних.Забор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_НоменклатураВЗаказах.СрезПоследних(
		|				,
		|				ДокументДоставки В
		|					(ВЫБРАТЬ
		|						ВТ_Заказы.ДокументДоставки
		|					ИЗ
		|						ВТ_Заказы КАК ВТ_Заказы)) КАК ES_НоменклатураВЗаказахСрезПоследних
		|		ПО ВТ_Заказы.ДокументДоставки = ES_НоменклатураВЗаказахСрезПоследних.ДокументДоставки
		|ГДЕ
		|	ВТ_Заказы.ДокументДоставки ССЫЛКА Документ.ES_ЗаборГруза
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Итог.ДокОтчет КАК ДокОтчет,
		|	ВТ_Итог.НомерОтчета КАК НомерОтчета,
		|	ВТ_Итог.ДатаОтчета КАК ДатаОтчета,
		|	ВТ_Итог.ДокументДоставки.Дата КАК Дата,
		|	ВТ_Итог.ДокументДоставки.Номер КАК Номер,
		|	ВТ_Итог.НомерНакладной КАК НомерНакладной,
		|	ВТ_Итог.ДокументДоставки КАК ДокументДоставки,
		|	ВТ_Итог.СтатусЗаказа КАК СтатусЗаказа,
		|	ВТ_Итог.АдресДоставки КАК АдресДоставки,
		|	ВТ_Итог.ВидДоставки КАК ВидДоставки,
		|	ЕСТЬNULL(ВТ_Итог.Заказчик, ВТ_Итог.ДокументДоставки.Контрагент) КАК Заказчик,
		|	ЕСТЬNULL(ВТ_Итог.ЗаказчикКонтактноеЛицо, ВТ_Итог.ДокументДоставки.ES_ЗаказчикКонтактноеЛицо) КАК ЗаказчикКонтактноеЛицо,
		|	ЕСТЬNULL(ВТ_Итог.ЗаказчикТелефон, ВТ_Итог.ДокументДоставки.ES_ЗаказчикТелефон) КАК ЗаказчикТелефон,
		|	ВТ_Итог.НППлан КАК НППлан,
		|	ВТ_Итог.НПФакт КАК НПФакт,
		|	ЕСТЬNULL(ВТ_Итог.СтоимостьДоставки, ВТ_Итог.ДокументДоставки.СтоимостьДоставки) КАК СтоимостьДоставки,
		|	ВТ_Итог.ВидОплаты КАК ВидОплаты,
		|	ЕСТЬNULL(ВТ_Итог.Предоплачен, ВТ_Итог.ДокументДоставки.ES_Предоплачен) КАК Предоплачен,
		|	ЕСТЬNULL(ВТ_Итог.ЧекНаОбщуюСумму, ВТ_Итог.ДокументДоставки.ES_ЧекНаОбщуюСумму) КАК ЧекНаОбщуюСумму,
		|	ЕСТЬNULL(ВТ_Итог.Получатель, ВТ_Итог.ДокументДоставки.ES_Получатель) КАК Получатель,
		|	ЕСТЬNULL(ВТ_Итог.ПолучательКонтактноеЛицо, ВТ_Итог.ДокументДоставки.ES_ПолучательКонтактноеЛицо) КАК ПолучательКонтактноеЛицо,
		|	ЕСТЬNULL(ВТ_Итог.ПолучательРегион, ВТ_Итог.ДокументДоставки.ES_ПолучательРегион) КАК ПолучательРегион,
		|	ЕСТЬNULL(ВТ_Итог.ПолучательТелефон, ВТ_Итог.ДокументДоставки.ES_ПолучательТелефон) КАК ПолучательТелефон,
		|	ВТ_Итог.Код КАК Код,
		|	ВТ_Итог.Наименование КАК Наименование,
		|	ВТ_Итог.ЗапасНоменклатура КАК ЗапасНоменклатура,
		|	ВТ_Итог.Артикул КАК Артикул,
		|	ВТ_Итог.НоменклатураТипНоменклатуры КАК НоменклатураТипНоменклатуры,
		|	ВТ_Итог.ЕдиницаИзмеренияМеждународноеСокращение КАК ЕдиницаИзмеренияМеждународноеСокращение,
		|	ВТ_Итог.НоменклатураЕдиницаИзмеренияНаименование КАК НоменклатураЕдиницаИзмеренияНаименование,
		|	ВТ_Итог.НоменклатураЕдиницаИзмеренияКод КАК НоменклатураЕдиницаИзмеренияКод,
		|	ВТ_Итог.НоменклатураСтавкаНДС КАК НоменклатураСтавкаНДС,
		|	ВТ_Итог.Содержание КАК Содержание,
		|	ВТ_Итог.Количество КАК Количество,
		|	ВТ_Итог.Цена КАК Цена,
		|	ВТ_Итог.ЗапасНППлан КАК ЗапасНППлан,
		|	ЕСТЬNULL(ВТ_Итог.ВремяС, ВТ_Итог.ДокументДоставки.ES_ВремяДоставкиС) КАК ВремяС,
		|	ЕСТЬNULL(ВТ_Итог.ВремяПо, ВТ_Итог.ДокументДоставки.ES_ВремяДоставкиПо) КАК ВремяПо,
		|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Код, 0) КАК КодПоиска,
		|	ЕСТЬNULL(ВТ_Итог.ДатаДоставки, ВТ_Итог.ДокументДоставки.ES_ДатаДоставки) КАК ДатаДоставки,
		|	ЕСТЬNULL(ВТ_Итог.ОбщийВес, ВТ_Итог.ДокументДоставки.ES_ОбщийВес) КАК ОбщийВес,
		|	ЕСТЬNULL(ВТ_Итог.ОбщийОбъем, ВТ_Итог.ДокументДоставки.ES_Объем) КАК ОбщийОбъем,
		|	ЕСТЬNULL(ВТ_Итог.ОбщийОбъемныйВес, ВТ_Итог.ДокументДоставки.ES_ОбщийОбъемныйВес) КАК ОбщийОбъемныйВес,
		|	ВТ_Итог.Мест КАК Мест,
		|	ВТ_Итог.ПравилоОбмена КАК ПравилоОбмена,
		|	ЕСТЬNULL(КодыМаксимум.КодМаксимум, 0) КАК КодМаксимум,
		|	ВТ_Итог.Регистратор КАК Регистратор,
		|	ВТ_Итог.Отправитель КАК Отправитель,
		|	ВТ_Итог.Регион КАК Регион,
		|	ВТ_Итог.Примечание КАК Примечание,
		|	ВТ_Итог.Комментарий КАК Комментарий,
		|	ВТ_Итог.ВремяФактическойДоставки КАК ВремяФактическойДоставки,
		|	ВТ_Итог.ЗаборДокументОснование КАК ЗаборДокументОснование,
		|	ВТ_Итог.ЗаборДокументОснованиеНомер КАК ЗаборДокументОснованиеНомер,
		|	ТИПЗНАЧЕНИЯ(ВТ_Итог.ДокументДоставки) = ТИП(Документ.ES_ЗаборГруза) КАК ПолеСОртировки,
		|	ВТ_Итог.НомерНакладнойПредставление КАК НомерНакладнойПредставление,
		|	ВТ_Итог.Штрихкод КАК Штрихкод,
		|	ВТ_Итог.НПФактБезнал КАК НПФактБезнал,
		|	ВТ_Итог.ПометкаУдаления КАК ПометкаУдаления,
		|	ВТ_Итог.ВхНакладная КАК ВхНакладная,
		|	ЕСТЬNULL(ВТ_Итог.Обработан, ЛОЖЬ) КАК Закрыт,
		|	ВТ_Итог.ОплаченiBox КАК ОплаченiBox,
		|	ВТ_Итог.ИДТранзакции КАК ИДТранзакции,
		|	ВТ_Итог.Долгота КАК Долгота,
		|	ВТ_Итог.Широта КАК Широта,
		|	ВТ_Итог.НомерЧека КАК НомерЧека,
		|	ВТ_Итог.ФИОПолучателя КАК ФИОПолучателя,
		|	ВТ_Итог.ВидЗабора КАК ВидЗабора,
		|	ВТ_Итог.ЗаборАдрес КАК ЗаборАдрес,
		|	ВТ_Итог.ЗаборАдресДолгота КАК ЗаборАдресДолгота,
		|	ВТ_Итог.ЗаборАдресШирота КАК ЗаборАдресШирота,
		|	ВТ_Итог.ЗаборДата КАК ЗаборДата,
		|	ВТ_Итог.ЗаборВремяС КАК ЗаборВремяС,
		|	ВТ_Итог.ЗаборВремяПо КАК ЗаборВремяПо,
		|	ВТ_Итог.ЗаборОтправитель КАК ЗаборОтправитель,
		|	ВТ_Итог.ЗаборКонтактноеЛицо КАК ЗаборКонтактноеЛицо,
		|	ВТ_Итог.ЗаборРегион КАК ЗаборРегион,
		|	ВТ_Итог.ЗаборТелефон КАК ЗаборТелефон,
		|	ВТ_Итог.ЗаборКомментарий КАК ЗаборКомментарий,
		|	ВТ_Итог.СвязанныйДокумент КАК СвязанныйДокумент,
		|	ВТ_Итог.ОтветственныйКонтЛицо КАК ОтветственныйКонтЛицо,
		|	ВТ_Итог.ОтветственныйТелефон КАК ОтветственныйТелефон
		|ИЗ
		|	ВТ_Итог КАК ВТ_Итог
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
		|		ПО ВТ_Итог.ПравилоОбмена = КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена
		|			И ВТ_Итог.Номенклатура = КодыТоваровПодключаемогоОборудованияOffline.Номенклатура
		|			И ВТ_Итог.Характеристика = КодыТоваровПодключаемогоОборудованияOffline.Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена КАК ПравилоОбмена,
		|			МАКСИМУМ(КодыТоваровПодключаемогоОборудованияOffline.Код) КАК КодМаксимум
		|		ИЗ
		|			РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
		|		
		|		СГРУППИРОВАТЬ ПО
		|			КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена) КАК КодыМаксимум
		|		ПО ВТ_Итог.ПравилоОбмена = КодыМаксимум.ПравилоОбмена
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПолеСОртировки
		|ИТОГИ
		|	МАКСИМУМ(НомерОтчета),
		|	МАКСИМУМ(ДатаОтчета),
		|	МАКСИМУМ(Дата),
		|	МАКСИМУМ(Номер),
		|	МАКСИМУМ(НомерНакладной),
		|	МАКСИМУМ(СтатусЗаказа),
		|	МАКСИМУМ(АдресДоставки),
		|	МАКСИМУМ(ВидДоставки),
		|	МАКСИМУМ(Заказчик),
		|	МАКСИМУМ(ЗаказчикКонтактноеЛицо),
		|	МАКСИМУМ(ЗаказчикТелефон),
		|	МАКСИМУМ(НППлан),
		|	МАКСИМУМ(НПФакт),
		|	МАКСИМУМ(СтоимостьДоставки),
		|	МАКСИМУМ(ВидОплаты),
		|	МАКСИМУМ(Предоплачен),
		|	МАКСИМУМ(ЧекНаОбщуюСумму),
		|	МАКСИМУМ(Получатель),
		|	МАКСИМУМ(ПолучательКонтактноеЛицо),
		|	МАКСИМУМ(ПолучательРегион),
		|	МАКСИМУМ(ПолучательТелефон),
		|	МАКСИМУМ(ВремяС),
		|	МАКСИМУМ(ВремяПо),
		|	МАКСИМУМ(КодПоиска),
		|	МАКСИМУМ(ДатаДоставки),
		|	МАКСИМУМ(ОбщийВес),
		|	МАКСИМУМ(ОбщийОбъем),
		|	МАКСИМУМ(ОбщийОбъемныйВес),
		|	МАКСИМУМ(Мест),
		|	МАКСИМУМ(ПравилоОбмена),
		|	МАКСИМУМ(КодМаксимум),
		|	МАКСИМУМ(Отправитель),
		|	МАКСИМУМ(Регион),
		|	МАКСИМУМ(Примечание),
		|	МАКСИМУМ(Комментарий),
		|	МАКСИМУМ(ВремяФактическойДоставки),
		|	МАКСИМУМ(ЗаборДокументОснование),
		|	МАКСИМУМ(ЗаборДокументОснованиеНомер),
		|	МАКСИМУМ(НомерНакладнойПредставление),
		|	МАКСИМУМ(НПФактБезнал),
		|	МАКСИМУМ(ПометкаУдаления),
		|	МАКСИМУМ(ВхНакладная),
		|	МАКСИМУМ(Закрыт),
		|	МАКСИМУМ(ОплаченiBox),
		|	МАКСИМУМ(ИДТранзакции),
		|	МАКСИМУМ(Долгота),
		|	МАКСИМУМ(Широта),
		|	МАКСИМУМ(НомерЧека),
		|	МАКСИМУМ(ФИОПолучателя),
		|	МАКСИМУМ(ВидЗабора),
		|	МАКСИМУМ(ЗаборАдрес),
		|	МАКСИМУМ(ЗаборАдресДолгота),
		|	МАКСИМУМ(ЗаборАдресШирота),
		|	МАКСИМУМ(ЗаборДата),
		|	МАКСИМУМ(ЗаборВремяС),
		|	МАКСИМУМ(ЗаборВремяПо),
		|	МАКСИМУМ(ЗаборОтправитель),
		|	МАКСИМУМ(ЗаборКонтактноеЛицо),
		|	МАКСИМУМ(ЗаборРегион),
		|	МАКСИМУМ(ЗаборТелефон),
		|	МАКСИМУМ(ЗаборКомментарий),
		|	МАКСИМУМ(СвязанныйДокумент),
		|	МАКСИМУМ(ОтветственныйКонтЛицо),
		|	МАКСИМУМ(ОтветственныйТелефон)
		|ПО
		|	ДокОтчет,
		|	ДокументДоставки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ES_ПрикрепленныеИзображения.Период КАК Период,
		|	ES_ПрикрепленныеИзображения.ДокументДоставки КАК ДокументДоставки,
		|	ES_ПрикрепленныеИзображения.ИмяФайла КАК ИмяФайла,
		|	ES_ПрикрепленныеИзображения.Тип КАК Тип,
		|	ES_ПрикрепленныеИзображения.СсылкаНаДиск КАК СсылкаНаДиск,
		|	ES_ПрикрепленныеИзображения.ХранилищеЗначения КАК ХранилищеЗначения,
		|	ES_ПрикрепленныеИзображения.Идентификатор КАК Идентификатор
		|ИЗ
		|	ВТ_Итог КАК ВТ_Итог
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ПрикрепленныеИзображения КАК ES_ПрикрепленныеИзображения
		|		ПО ВТ_Итог.ДокументДоставки = ES_ПрикрепленныеИзображения.ДокументДоставки";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("Курьер", Курьер);
	
	//EFSOL_Сальник К.А. 2019-05-14 {+
	//РезультатЗапроса = Запрос.Выполнить();
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	//ВыборкаОтчет = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОтчет = МассивРезультатов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПрикрепленныеИзображения = МассивРезультатов[4].Выгрузить();
	//EFSOL_Сальник К.А.  -}
	
	Пока ВыборкаОтчет.Следующий() Цикл
		СтруктураОтчета = ПолучитьСтруктуруОтчета();
		СтруктураОтчета.НомерОтчета = ВыборкаОтчет.НомерОтчета;
		СтруктураОтчета.УИДОтчета 	= ВыборкаОтчет.ДокОтчет.Ссылка.УникальныйИдентификатор();
		СтруктураОтчета.ДатаОтчета	= ВыборкаОтчет.ДатаОтчета;
		СтруктураОтчета.ПометкаУдаления	= ВыборкаОтчет.ПометкаУдаления;
		//ЭР Несторук С.И. 15.12.2017 15:33:31 {
		СтруктураОтчета.Закрыт			= ВыборкаОтчет.Закрыт;
		//}ЭР Несторук С.И.
		//МассивОтчетов.Добавить(СтруктураОтчета);
		
		ВыборкаЗаказ = ВыборкаОтчет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗаказ.Следующий() Цикл
			Если ТипЗнч(ВыборкаЗаказ.ДокументДоставки) = Тип("ДокументСсылка.ЗаказПокупателя") тогда
				СтруктураЗаказа = ПолучитьСтруктуруЗаказаНаДоставку();
				ЗаполнитьЗначенияСвойств(СтруктураЗаказа, ВыборкаЗаказ);
				СтруктураЗаказа.УИДОтчета 				= ВыборкаОтчет.ДокОтчет.Ссылка.УникальныйИдентификатор();
				СтруктураЗаказа.УИДДокументаДоставки	= ВыборкаЗаказ.ДокументДоставки.Ссылка.УникальныйИдентификатор();
				Если ВыборкаЗаказ.СвязанныйДокумент <> Неопределено Тогда
					СтруктураЗаказа.СвязанныйДокумент	    = ВыборкаЗаказ.СвязанныйДокумент.Ссылка.УникальныйИдентификатор();
				КонецЕсли;

				СтруктураЗаказа.ЭтоЗаказ				= Истина;

				СтруктураЗаказа.Заказчик 				= Строка(ВыборкаЗаказ.Заказчик);
				СтруктураЗаказа.СтатусЗаказа 			= Строка(ВыборкаЗаказ.СтатусЗаказа);
				СтруктураЗаказа.ВидДоставки     		= Строка(ВыборкаЗаказ.ВидДоставки);
				СтруктураЗаказа.ЗаказчикКонтактноеЛицо  = Строка(ВыборкаЗаказ.ЗаказчикКонтактноеЛицо);
				СтруктураЗаказа.ВидОплаты				= Строка(ВыборкаЗаказ.ВидОплаты);
				СтруктураЗаказа.ПолучательРегион		= Строка(ВыборкаЗаказ.ПолучательРегион);
				СтруктураЗаказа.ЗначДока 				= 1;
				
				//EFSOL_Сальник К.А. 2019-05-14 {+
				ДокументДоставки = ВыборкаЗаказ.ДокументДоставки;
				Отбор = Новый Структура;
				Отбор.Вставить("ДокументДоставки", ДокументДоставки);
				Строки = ВыборкаПрикрепленныеИзображения.НайтиСтроки(Отбор);
				Для Каждого Стр Из Строки Цикл
					Запись = Новый Структура;
					Запись.Вставить("Период", Стр.Период);
					Запись.Вставить("ИмяФайла", Стр.ИмяФайла);
					Запись.Вставить("Тип", Стр.Тип);
					Запись.Вставить("СсылкаНаДиск", Стр.СсылкаНаДиск);
					Запись.Вставить("ДвоичныеДанные", Base64Строка(Стр.ХранилищеЗначения.Получить()));
					Запись.Вставить("Идентификатор", Стр.Идентификатор);
					СтруктураЗаказа.ПрикрепленныеИзображения.Добавить(Запись);
				КонецЦикла;
				//EFSOL_Сальник К.А.  -}
				
				ВыборкаТовар = ВыборкаЗаказ.Выбрать();
				
				Пока ВыборкаТовар.Следующий() Цикл
					СтруктураТовара = ПолучитьСтруктуруПоТовару();
					ЗаполнитьЗначенияСвойств(СтруктураТовара,ВыборкаТовар);
					
					СтруктураТовара.НоменклатураСтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(ВыборкаТовар.НоменклатураСтавкаНДС);
					СтруктураЗаказа.Товары.Добавить(СтруктураТовара);
				КонецЦикла;
				СтруктураОтчета.Заказы.Добавить(СтруктураЗаказа);
			ИначеЕсли ТипЗнч(ВыборкаЗаказ.ДокументДоставки) = Тип("ДокументСсылка.ES_ЗаборГруза") тогда  				
				СтруктураЗаказа = ПолучитьСтруктуруЗабораНаДоставку();
				ЗаполнитьЗначенияСвойств(СтруктураЗаказа, ВыборкаЗаказ);
				СтруктураЗаказа.УИДОтчета 				= ВыборкаОтчет.ДокОтчет.Ссылка.УникальныйИдентификатор();
				СтруктураЗаказа.УИДДокументаДоставки	= ВыборкаЗаказ.ДокументДоставки.Ссылка.УникальныйИдентификатор();
				Если ВыборкаЗаказ.СвязанныйДокумент <> Неопределено Тогда
					СтруктураЗаказа.СвязанныйДокумент	    = ВыборкаЗаказ.СвязанныйДокумент.Ссылка.УникальныйИдентификатор();
				КонецЕсли;    
				СтруктураЗаказа.ЭтоЗаказ				= Ложь;
				СтруктураЗаказа.Заказчик 				= Строка(ВыборкаЗаказ.Заказчик);
				СтруктураЗаказа.СтатусЗаказа 			= Строка(ВыборкаЗаказ.СтатусЗаказа);
				СтруктураЗаказа.ВидДоставки     		= Строка(ВыборкаЗаказ.ВидДоставки);
				СтруктураЗаказа.ВидОплаты				= Строка(ВыборкаЗаказ.ВидОплаты);
				СтруктураЗаказа.ПолучательРегион		= Строка(ВыборкаЗаказ.ПолучательРегион);
				СтруктураЗаказа.ЗначДока 				= 0; 
				
				//EFSOL_Сальник К.А. 2019-05-14 {+
				ДокументДоставки = ВыборкаЗаказ.ДокументДоставки;
				Отбор = Новый Структура;
				Отбор.Вставить("ДокументДоставки", ДокументДоставки);
				Строки = ВыборкаПрикрепленныеИзображения.НайтиСтроки(Отбор);
				Для Каждого Стр Из Строки Цикл
					Запись = Новый Структура;
					Запись.Вставить("Период", Стр.Период);
					Запись.Вставить("ИмяФайла", Стр.ИмяФайла);
					Запись.Вставить("Тип", Стр.Тип);
					Запись.Вставить("СсылкаНаДиск", Стр.СсылкаНаДиск);
					Запись.Вставить("ДвоичныеДанные", Base64Строка(Стр.ХранилищеЗначения.Получить()));
					Запись.Вставить("Идентификатор", Стр.Идентификатор);
					СтруктураЗаказа.ПрикрепленныеИзображения.Добавить(Запись);
				КонецЦикла;
				//EFSOL_Сальник К.А.  -}
				
				ВыборкаТовар = ВыборкаЗаказ.Выбрать();
				
				Пока ВыборкаТовар.Следующий() Цикл
					СтруктураТовара = ПолучитьСтруктуруПоТовару();
					ЗаполнитьЗначенияСвойств(СтруктураТовара,ВыборкаТовар); 					
					СтруктураТовара.НоменклатураСтавкаНДС = Строка(УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(ВыборкаТовар.НоменклатураСтавкаНДС));
					СтруктураЗаказа.Товары.Добавить(СтруктураТовара);
				КонецЦикла;
				СтруктураОтчета.Заказы.Добавить(СтруктураЗаказа);
			КонецЕсли;
		КонецЦикла;
		СтруктураОтвета.Отчеты.Добавить(СтруктураОтчета);
	КонецЦикла;
	//ЗаписьJSON = Новый ЗаписьJSON;
	//ЗаписьJSON.УстановитьСтроку();
	//СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON,СтруктураОтвета);
	//Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
	СтруктураОтвета.Причины = ПолучитьМассивПричин();
	
	ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
	СтрокаJSON =  ОбработкаJSON.JSON(СтруктураОтвета);	
	//СтрокаJSON = ES_RetailCRM_Общий.JSON(СтруктураОтвета);
	Ответ.УстановитьТелоИзСтроки(СтрокаJSON);

	
	Возврат Ответ;
	
	
КонецФункции

Функция ПолучитьМассивПричин()
	
	Массив = Новый Массив;
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Перечисления.ES_СтатусыЗаказов.Доставлен);
	МассивСтатусов.Добавить(Перечисления.ES_СтатусыЗаказов.ЧастичноДоставлен);
	МассивСтатусов.Добавить(Перечисления.ES_СтатусыЗаказов.НеДоставлен);
	МассивСтатусов.Добавить(Перечисления.ES_СтатусыЗаказов.ВПути);
	МассивСтатусов.Добавить(Перечисления.ES_СтатусыЗаказов.Принят);
	МассивСтатусов.Добавить(Перечисления.ES_СтатусыЗаказов.Отказ);
	МассивСтатусов.Добавить(Перечисления.ES_СтатусыЗаказов.Назначен);

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ES_Причины.Код,
		|	ES_Причины.Наименование,
		|	ES_Причины.Статус
		|ИЗ
		|	Справочник.ES_КомментарииКСтатусам КАК ES_Причины
		|ГДЕ
		//|	НЕ ES_Причины.ЭтоГруппа
		|	 НЕ ES_Причины.ПометкаУдаления
		|	И ES_Причины.Статус В (&МассивСтатусов)";
	Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураПоПричине = ПолучитьСтруктуруПричины();
		ЗаполнитьЗначенияСвойств(СтруктураПоПричине, Выборка);
		СтруктураПоПричине.Статус = Строка(Выборка.Статус);
		Массив.Добавить(СтруктураПоПричине);
	КонецЦикла;
	
	возврат Массив;
	
	
	
КонецФункции

Функция ПолучитьСтруктуруПричины()
	
	Структура = Новый Структура;
	Структура.Вставить("Код");
	Структура.Вставить("Наименование");
	Структура.Вставить("Статус");
	
	Возврат Структура;
	
	
КонецФункции



Функция ПолучитьСтруктуруОтчета()
	
	Структура = Новый Структура;
	Структура.Вставить("НомерОтчета");
	Структура.Вставить("УИДОтчета");
	Структура.Вставить("ДатаОтчета");
	Структура.Вставить("ПометкаУдаления"); 
	Структура.Вставить("Расходы");
	Структура.Вставить("Заказы", Новый Массив);
	//ЭР Несторук С.И. 15.12.2017 15:31:11 {
	Структура.Вставить("Закрыт", Ложь);
	//}ЭР Несторук С.И.
	
	Возврат Структура;
	
КонецФункции


Функция ПолучитьСтруктуруЗаказаНаДоставку()
	
	Структура = Новый Структура;
	Структура.Вставить("НомерОтчета");
	Структура.Вставить("УИДОтчета");
	Структура.Вставить("ЭтоЗаказ");
	Структура.Вставить("УИДДокументаДоставки");
	Структура.Вставить("Номер");	
	Структура.Вставить("Дата");	
	Структура.Вставить("НомерНакладной");
	Структура.Вставить("ВхНакладная");
	Структура.Вставить("АдресДоставки");	
	Структура.Вставить("ВидДоставки");
	Структура.Вставить("ФИОПолучателя");
	Структура.Вставить("Заказчик");	
	Структура.Вставить("ЗаказчикКонтактноеЛицо");	
	Структура.Вставить("ЗаказчикТелефон");	
	Структура.Вставить("НППлан");	
	Структура.Вставить("НПФакт");	
	Структура.Вставить("СтатусЗаказа");	
	Структура.Вставить("ВидОплаты");
	Структура.Вставить("СтоимостьДоставки");
	Структура.Вставить("Получатель");
	Структура.Вставить("ПолучательКонтактноеЛицо");
	Структура.Вставить("ПолучательРегион");
	Структура.Вставить("ПолучательТелефон");
	Структура.Вставить("Предоплачен");
	Структура.Вставить("ЧекНаОбщуюСумму");
	Структура.Вставить("ВремяС");
	Структура.Вставить("ВремяПо");
	Структура.Вставить("ДатаДоставки");
	Структура.Вставить("ОбщийВес");
	Структура.Вставить("ОбщийОбъем");
	Структура.Вставить("ОбщийОбъемныйВес");
	Структура.Вставить("Мест");
	Структура.Вставить("ЗначДока");
	Структура.Вставить("НомерНакладнойПредставление");
	Структура.Вставить("Комментарий");
  	Структура.Вставить("НПФактБезнал");
	Структура.Вставить("НППланБезнал");	
	Структура.Вставить("Примечание");
	Структура.Вставить("Долгота");
	Структура.Вставить("Широта");
	Структура.Вставить("ОплаченiBox");
	Структура.Вставить("ИДТранзакции");
	Структура.Вставить("НомерЧека");
	Структура.Вставить("ВидЗабора");
	Структура.Вставить("ЗаборАдрес");
	Структура.Вставить("ЗаборАдресДолгота");
	Структура.Вставить("ЗаборАдресШирота");
	Структура.Вставить("ЗаборДата");
	Структура.Вставить("ЗаборВремяС");
	Структура.Вставить("ЗаборВремяПо");
	Структура.Вставить("ЗаборОтправитель");
	Структура.Вставить("ЗаборКонтактноеЛицо");
	Структура.Вставить("ЗаборРегион");
	Структура.Вставить("ЗаборТелефон");	
	Структура.Вставить("ЗаборКомментарий");
	Структура.Вставить("СвязанныйДокумент");
	Структура.Вставить("Товары",Новый Массив);
	//EFSOL_Сальник К.А. 2019-05-14 {+
	Структура.Вставить("ОтветственныйКонтЛицо");
	Структура.Вставить("ОтветственныйТелефон");
	Структура.Вставить("ПрикрепленныеИзображения",Новый Массив);
	//EFSOL_Сальник К.А.  -}

	Возврат Структура;

КонецФункции

Функция ПолучитьСтруктуруЗабораНаДоставку()
	
	Структура = Новый Структура;
	Структура.Вставить("НомерОтчета");
	Структура.Вставить("УИДОтчета");
	Структура.Вставить("ЭтоЗаказ");
	Структура.Вставить("УИДДокументаДоставки");
	Структура.Вставить("Номер");	
	Структура.Вставить("Дата");	
	Структура.Вставить("НомерНакладной");	
	Структура.Вставить("АдресДоставки");	
	Структура.Вставить("ВидДоставки");
	Структура.Вставить("ФИОПолучателя");
	Структура.Вставить("Заказчик");	
	Структура.Вставить("ЗаказчикКонтактноеЛицо");	
	Структура.Вставить("ЗаказчикТелефон");	
	Структура.Вставить("НППлан");	
	Структура.Вставить("НПФакт");	
	Структура.Вставить("СтатусЗаказа");	
	Структура.Вставить("ВидОплаты");
	Структура.Вставить("СтоимостьДоставки");
	Структура.Вставить("Получатель");
	Структура.Вставить("ПолучательКонтактноеЛицо");
	Структура.Вставить("ПолучательРегион");
	Структура.Вставить("ПолучательТелефон");
	Структура.Вставить("Предоплачен");
	Структура.Вставить("ЧекНаОбщуюСумму");
	Структура.Вставить("ДатаДоставки");
	Структура.Вставить("ВремяС");
	Структура.Вставить("ВремяПо");
	Структура.Вставить("ДатаДоставки");
	Структура.Вставить("ОбщийВес");
	Структура.Вставить("ОбщийОбъем");
	Структура.Вставить("ОбщийОбъемныйВес");
	Структура.Вставить("Мест");
	Структура.Вставить("ЗначДока");
	Структура.Вставить("Отправитель");
	Структура.Вставить("Комментарий");
	Структура.Вставить("Примечание"); 
	Структура.Вставить("Регион");
	Структура.Вставить("ВремяФакт");
	Структура.Вставить("ВремяФактическойДоставки");
	Структура.Вставить("ЗаборДокументОснованиеНомер"); 
	Структура.Вставить("НомерНакладнойПредставление");
	Структура.Вставить("Комментарий");
	Структура.Вставить("ОплаченiBox");
	Структура.Вставить("ИДТранзакции");
	Структура.Вставить("НомерЧека");
	Структура.Вставить("СвязанныйДокумент");	
	//EFSOL_Сальник К.А. 2019-05-14 {+	
	Структура.Вставить("ПрикрепленныеИзображения",Новый Массив());
	//EFSOL_Сальник К.А.  -}
	Структура.Вставить("Товары",Новый Массив);

	Возврат Структура;

КонецФункции


Функция ПолучитьСтруктуруПоТовару()
	
	Структура = Новый Структура;
	Структура.Вставить("Номер");		
	Структура.Вставить("Код");	
	Структура.Вставить("Наименование");	
	Структура.Вставить("Артикул");	
	Структура.Вставить("Штрихкод");	
	Структура.Вставить("НоменклатураТипНоменклатуры");	
	Структура.Вставить("ЕдиницаИзмеренияМеждународноеСокращение");	
	Структура.Вставить("НоменклатураЕдиницаИзмеренияНаименование");	
	Структура.Вставить("НоменклатураЕдиницаИзмеренияКод");	
	Структура.Вставить("НоменклатураСтавкаНДС");	
	Структура.Вставить("Количество");	
	Структура.Вставить("Цена");	
	Структура.Вставить("ЗапасНППлан");
	Структура.Вставить("КодПоиска");
	Структура.Вставить("Содержание");
	
	Возврат Структура;
	
КонецФункции

Процедура ПолучитьМаксимальныйКодПоискаНоменклатуры(Курьер)
	
	ПравилоОбмена = Неопределено;
	НовыйКод = 0;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ES_CоответствиеПравилОбменаОборудованияOfflineИКурьеров.Оборудование.ПравилоОбмена
		|ПОМЕСТИТЬ ВТ_Правило
		|ИЗ
		|	РегистрСведений.ES_CоответствиеПравилОбменаОборудованияOfflineИКурьеров КАК ES_CоответствиеПравилОбменаОборудованияOfflineИКурьеров
		|ГДЕ
		|	ES_CоответствиеПравилОбменаОборудованияOfflineИКурьеров.Курьер = &Курьер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Код, 0)) КАК Код,
		|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена 
		|ИЗ
		|	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
		|ГДЕ
		|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена В
		|			(ВЫБРАТЬ
		|				ВТ_Правило.ОборудованиеПравилоОбмена
		|			ИЗ
		|				ВТ_Правило КАК ВТ_Правило)
		|
		|СГРУППИРОВАТЬ ПО
		|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена";
	
	Запрос.УстановитьПараметр("Курьер", Курьер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НовыйКод =  ВыборкаДетальныеЗаписи.Код;
			ПравилоОбмена = ВыборкаДетальныеЗаписи.ПравилоОбмена;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПравилоОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ES_ОтчетОДоставке.Ссылка КАК Ссылка,
	|	ES_CоответствиеПравилОбменаОборудованияOfflineИКурьеров.Оборудование.ПравилоОбмена КАК ПравилоОбмена
	|ПОМЕСТИТЬ ВТ_Отчеты
	|ИЗ
	|	Документ.ES_ОтчетОДоставке КАК ES_ОтчетОДоставке
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_CоответствиеПравилОбменаОборудованияOfflineИКурьеров КАК ES_CоответствиеПравилОбменаОборудованияOfflineИКурьеров
	|		ПО ES_ОтчетОДоставке.Курьер = ES_CоответствиеПравилОбменаОборудованияOfflineИКурьеров.Курьер
	|ГДЕ
	|	КОНЕЦПЕРИОДА(ES_ОтчетОДоставке.Дата, ДЕНЬ) = КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	|	И ES_ОтчетОДоставке.Курьер = &Курьер
	|	И НЕ ES_ОтчетОДоставке.ES_ЗакрытКурьером
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ES_ОтчетОДоставкеГрузы.Номенклатура КАК Номенклатура,
	|	ВТ_Отчеты.ПравилоОбмена КАК ПравилоОбмена
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	ВТ_Отчеты КАК ВТ_Отчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ES_ОтчетОДоставке.Грузы КАК ES_ОтчетОДоставкеГрузы
	|		ПО ВТ_Отчеты.Ссылка = ES_ОтчетОДоставкеГрузы.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ES_ОтчетОДоставкеГрузы.Номенклатура,
	|	ВТ_Отчеты.ПравилоОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Номенклатура.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Код, 0) КАК Код,
	|	ВТ_Номенклатура.ПравилоОбмена КАК ПравилоОбмена
	|ИЗ
	|	ВТ_Номенклатура КАК ВТ_Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ПО ВТ_Номенклатура.Номенклатура = КодыТоваровПодключаемогоОборудованияOffline.Номенклатура
	|			И ВТ_Номенклатура.ПравилоОбмена = КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена
	|ГДЕ
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Код, 0) = 0";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("Курьер", Курьер);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат
	КонецЕсли;
	
	Выборка= РезультатЗапроса.Выбрать();
	НаборЗаписей = РегистрыСведений.КодыТоваровПодключаемогоОборудованияOffline.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПравилоОбмена.Установить(ПравилоОбмена);
	НаборЗаписей.Прочитать();
	ТЗ = НаборЗаписей.Выгрузить();
	//НаборЗаписей.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		НовыйКод = НовыйКод + 1;
		ДобавитьЗаписьВРКодыТоваровПодключаемогоОборудованияOffline(ТЗ,Выборка.ПравилоОбмена,Выборка.Номенклатура, НовыйКод);
		
	КонецЦикла;
	
	НаборЗаписей.Загрузить(ТЗ);
	
	НаборЗаписей.Записать(Истина);
		
КонецПроцедуры

Процедура ДобавитьЗаписьВРКодыТоваровПодключаемогоОборудованияOffline(ТаблицаЗаписей,ПравилоОбмена,Номенклатура, НовыйКод)
	
	НоваяЗапись = ТаблицаЗаписей.Добавить();
	
	НоваяЗапись.ПравилоОбмена = ПравилоОбмена;
	НоваяЗапись.Номенклатура = Номенклатура;
	НоваяЗапись.Код			= НовыйКод;
	НоваяЗапись.ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
	//НоваяЗапись.Период		= ТекущаяДата();
	НоваяЗапись.Используется = Истина;
	
			
КонецПроцедуры



#Область ОбработкаОтветаМобильногоПриложения

Функция ЗаполнитьОтчетДаннымиСМобильного(СтрокаJSON, Курьер) Экспорт
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	//EFSOL_Сальник К.А. 2019-05-14 {+
	//работкаJSON = Обработки.JSON_and_UnJSON.Создать();
	//ответствиеОтчета =  ОбработкаJSON.UnJSON(СтрокаJSON);
	СоответствиеОтчета = ES_JSON.ПрочитатьJSON_(СтрокаJSON);
	//EFSOL_Сальник К.А.  -} 
	
	//НомерОтчета = СоответствиеОтчета.Получить("НомерОтчета");
	УИДОтчета = СоответствиеОтчета.Получить("УИДОтчета");
	
	Трекинг = СоответствиеОтчета.Получить("Трекинг");
	
	Если УИДОтчета = Неопределено Тогда
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.УстановитьТелоИзСтроки("Не указан номер отчета");
		Возврат Ответ;
	КонецЕсли;
		
	мОтчетОДоставке = ПолучитьОтчетОДоставке(УИДОтчета, Курьер);
	
	Если мОтчетОДоставке = Неопределено Тогда
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.УстановитьТелоИзСтроки("Отчет не найден");
		Возврат Ответ;

	КонецЕсли;
	
	//Efsol Сережко А.С. 19.12.18 + 	
	//ЗаписатьДанныеТрекинга(Трекинг,Курьер);   	
	//Efsol Сережко А.С. 19.12.18 - 
	
	Заказы = СоответствиеОтчета.Получить("Заказы");
	
	Ответ = ЗаполнитьОтчет(мОтчетОДоставке,
	Заказы, 
	СоответствиеОтчета.Получить("Закрыт"),
	СоответствиеОтчета.Получить("ДатаЗакрытия"),
	СоответствиеОтчета.Получить("Возвраты"),
	СоответствиеОтчета.Получить("Расходы"));
	
	Возврат Ответ;	

	
КонецФункции

Функция ПолучитьОтчетОДоставке(УИДОтчета, Курьер)
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ES_ОтчетОДоставке.Ссылка
	//|ИЗ
	//|	Документ.ES_ОтчетОДоставке КАК ES_ОтчетОДоставке
	//|ГДЕ
	//|	НЕ ES_ОтчетОДоставке.ПометкаУдаления
	//|	И ES_ОтчетОДоставке.Курьер = &Курьер
	//|	И ES_ОтчетОДоставке.Номер = &НомерОтчета";
	//
	//Запрос.УстановитьПараметр("Курьер", Курьер);
	//Запрос.УстановитьПараметр("НомерОтчета", НомерОтчета);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//Если РезультатЗапроса.Пустой() Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	//
	//Выборка = РезультатЗапроса.Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	
	//	Возврат Выборка.Ссылка;
	//	
	//КонецЦикла;
	ДокСсылка = Документы.ES_ОтчетОДоставке.ПолучитьСсылку(новый УникальныйИдентификатор(УИДОтчета));
	Если ДокСсылка.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДокСсылка;
	
КонецФункции

Функция ЗаполнитьОтчет(ОтчетОДоставке, Заказы, Закрыт,ДатаЗакрытия,Возвраты, Расходы)
	Если Заказы.Количество() = 0 Тогда
		Возврат Новый HTTPСервисОтвет(200);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	мОтчет = ОтчетОДоставке.ПолучитьОбъект();
	мОтчет.ES_ЗакрытКурьером = Закрыт;
	мОтчет.ИтогоРасходы = Расходы;
	мОтчет.ES_Возвраты = Возвраты;
	Если Закрыт = Истина Тогда
		мОтчет.ES_ЗакрытКурьеромМомент = ПреобразоватьСтрокуВДату(ДатаЗакрытия);
	КонецЕсли;

	Для каждого Заказ Из Заказы Цикл
		//НомерНакладной = Заказ.Получить("НомерНакладнойПредставление");
		//НайтиСтроки = мОтчет.Заказы.НайтиСтроки(Новый Структура("НомерНакладнойПредставление",НомерНакладной));
		ЭтоЗаказ = Заказ.Получить("ЭтоЗаказ");
		УИДДокДоставки = Заказ.Получить("УИДДокументаДоставки");
		Если ЭтоЗаказ Тогда
			СсылкаНаДокДоставки = Документы.ЗаказПокупателя.ПолучитьСсылку(новый УникальныйИдентификатор(УИДДокДоставки));
		Иначе
			//это сбор
			СсылкаНаДокДоставки = Документы.ES_ЗаборГруза.ПолучитьСсылку(новый УникальныйИдентификатор(УИДДокДоставки));
		КонецЕсли;
		НайтиСтроки = мОтчет.Заказы.НайтиСтроки(Новый Структура("ДокументДоставки",СсылкаНаДокДоставки));
		
		Если НайтиСтроки.Количество() = 0 Тогда Продолжить; КонецЕсли;
		СтрокаЗаказ = НайтиСтроки[0];     		
		Если ЭтоЗаказ тогда
			СтрокаЗаказ.СтатусЗаказа = ПолучитьСтатусЗаказа(Заказ.Получить("СтатусЗаказа"));
		Иначе
			СтрокаЗаказ.СтатусЗаказа = ПолучитьСтатусЗабора(Заказ.Получить("СтатусЗаказа"));
			//Сбор = СтрокаЗаказ.ДокументДоставки.ПолучитьОбъект();
			//Попытка
			//	Сбор.ВхНакладная = Заказ.Получить("ВхНакладная");
			//	Сбор.Записать(РежимЗаписиДокумента.Проведение);
			//Исключение
			//КонецПопытки;
		КонецЕсли;
		
		//ЗаписьЖурналаРегистрации("АПИ",,,СсылкаНаДокДоставки, СтрокаЗаказ.СтатусЗаказа);
		
		СтрокаЗаказ.НПФактНал       = 	Заказ.Получить("НПФактВсего");
		СтрокаЗаказ.НПФактБезнал	=   Заказ.Получить("НПФактБезНал"); 		
		
		Если СтрокаЗаказ.СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.НеДоставлен Тогда
			СтрокаЗаказ.ДатаНД			= ПреобразоватьСтрокуВДату(Заказ.Получить("ДатаНД"));
			СтрокаЗаказ.ВремяНД_С		= ПреобразоватьСтрокуВДату(Заказ.Получить("ВремяНД_С"));
			СтрокаЗаказ.ВремяНД_По		= ПреобразоватьСтрокуВДату(Заказ.Получить("ВремяНД_По"));
		КонецЕсли;
		КодПричины = Заказ.Получить("КодПричины");
		Если ЗначениеЗаполнено(КодПричины) Тогда
		СтрокаЗаказ.КомментарийКСтатусу = Справочники.ES_КомментарииКСтатусам.НайтиПоКоду(КодПричины);	
		КонецЕсли;
		//СтрокаЗаказ.Комментарий			= Заказ.Получить("Комментарий");
		НПФактПоЗаказу = Заказ.Получить("НПФактВсего");
		Если ЗначениеЗаполнено(НПФактПоЗаказу) Тогда
			СтрокаЗаказ.НПФакт = НПФактПоЗаказу;
		КонецЕсли;
		
		СтрокаЗаказ.ДатаФактическойДоставки = ПреобразоватьСтрокуВДату(Заказ.Получить("ДатаФакт"));
		СтрокаЗаказ.ВремяФактическойДоставки = ПреобразоватьСтрокуВДату(Заказ.Получить("ВремяФакт"));

		
		ТоварыПоЗаказу = Заказ.Получить("Товары");
 		Если ТоварыПоЗаказу = Неопределено Тогда
			ТоварыПоЗаказу = Заказ.Получить("Грузы");
			Если ТоварыПоЗаказу.Количество() = 0 Тогда   
			Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		//оплата iBox
		СтрокаЗаказ.ОплаченiBox = Заказ.Получить("ОплаченiBox");
		СтрокаЗаказ.ИДТранзакции = Заказ.Получить("ИДТранзакции");
		СтрокаЗаказ.НомерЧека = Заказ.Получить("НомерЧека");
		СтрокаЗаказ.ФИОПолучателя = Заказ.Получить("ФИОПолучателя");

		
		Для каждого Товар ИЗ ТоварыПоЗаказу Цикл
			
			КодНоменклатуры = Товар.Получить("НоменклатураКод");
			Если НЕ ЗначениеЗаполнено(КодНоменклатуры) Тогда
				Продолжить;
			КонецЕсли;
				
			мНоменклатура = Справочники.Номенклатура.НайтиПоКоду(КодНоменклатуры);
			Если Не ЗначениеЗаполнено(мНоменклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			ОтборСтрок = Новый Структура;
			ОтборСтрок.Вставить("ДокументДоставки",СтрокаЗаказ.ДокументДоставки);
			ОтборСтрок.Вставить("Номенклатура", мНоменклатура);
			ОтборСтрок.Вставить("Содержание", Товар.Получить("Содержание"));
			НайтиСтроки = мОтчет.Грузы.НайтиСтроки(ОтборСтрок);
			Если НайтиСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаГрузы = НайтиСтроки[0];
			СтрокаГрузы.НПФакт 			= Товар.Получить("НПФакт");
			СтрокаГрузы.КоличествоФакт  = Товар.Получить("КоличествоФакт");
			
			
		КонецЦикла;
		
	//ЭР Несторук С.И. 23.04.2019 13:22:44 {
	ПерезаписатьВхНакладнуюВЗаказе(Заказ.Получить("ВхНакладная"), СсылкаНаДокДоставки); 
	//}ЭР Несторук С.И.	
	
	//EFSOL_Сальник К.А. 2019-05-14 {+	
	НаборЗаписи = РегистрыСведений.ES_ПрикрепленныеИзображения.СоздатьНаборЗаписей();
	НаборЗаписи.Отбор.ДокументДоставки.Установить(СсылкаНаДокДоставки);
	НаборЗаписи.Прочитать();
	НаборЗаписи.Очистить();
	НаборЗаписи.Записать();
	
	ПрикрепленныеИзображения = Заказ.Получить("ПрикрепленныеИзображения");
	Если ПрикрепленныеИзображения <> Неопределено Тогда
		Для Каждого Изображение Из ПрикрепленныеИзображения Цикл
			МенеджерЗаписи = РегистрыСведений.ES_ПрикрепленныеИзображения.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период = ПреобразоватьСтрокуВДату(Изображение.Получить("Период"));
			МенеджерЗаписи.ИмяФайла = Изображение.Получить("ИмяФайла");
			МенеджерЗаписи.Тип = Изображение.Получить("Тип");
			МенеджерЗаписи.СсылкаНаДиск = Изображение.Получить("СсылкаНаДиск");
			МенеджерЗаписи.ХранилищеЗначения = Новый ХранилищеЗначения(Base64Значение(Изображение.Получить("ДвоичныеДанные")), Новый СжатиеДанных(9));
			МенеджерЗаписи.Идентификатор = Изображение.Получить("Идентификатор");
			МенеджерЗаписи.ДокументДоставки = СсылкаНаДокДоставки;
			МенеджерЗаписи.Записать();
		КонецЦикла;
	КонецЕсли;
	//EFSOL_Сальник К.А.  -}
	
	ПересчитатьИтогиВОтчете(мОтчет);	

	КонецЦикла;
	Попытка
		мОтчет.Записать(РежимЗаписиДокумента.Проведение);
		Ответ = Новый HTTPСервисОтвет(200);
		СтруктураОтвет = Новый Структура;
		СтруктураОтвет.Вставить("Status", Истина);
		ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
		СтрокаJSON =  ОбработкаJSON.JSON(СтруктураОтвет);
		Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
		Возврат Ответ;
	Исключение
		мОтчет.Записать(РежимЗаписиДокумента.Запись);
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.УстановитьТелоИзСтроки("Ошибка записи отчета о доставке:" + ОписаниеОшибки());
		Возврат Ответ;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьСтатусЗаказа(СтатусСтрокой) 
	СтатусСтрокой = СтрЗаменить(СтатусСтрокой," ", "");
	СтатусСтрокой = ?(СтатусСтрокой = "Приняткурьером", "Принят", СтатусСтрокой);
	СтатусСтрокой = ?(СтатусСтрокой = "Перенос", "НеДоставлен", СтатусСтрокой);
	СтатусСтрокой = ?(СтатусСтрокой = "Отмена", "Отказ", СтатусСтрокой);
	
	Попытка
		
		СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаказов."+ СтатусСтрокой);
		
	Исключение
		СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ПустаяСсылка();
		
	КонецПопытки;
	
	Возврат СтатусЗаказа;
	
КонецФункции

Функция ПолучитьСтатусЗабора(СтатусСтрокой) 
	СтатусСтрокой = СтрЗаменить(СтатусСтрокой," ", "");
	СтатусСтрокой = ?(СтатусСтрокой = "Приняткурьером", "Принят", СтатусСтрокой);
	СтатусСтрокой = ?(СтатусСтрокой = "Перенос", "НеДоставлен", СтатусСтрокой);
	СтатусСтрокой = ?(СтатусСтрокой = "Отмена", "Отказ", СтатусСтрокой);
	
	Попытка
		
		СтатусЗаказа = ПредопределенноеЗначение("Перечисление.ES_СтатусыЗаборов."+ СтатусСтрокой);
		
	Исключение
		СтатусЗаказа = Перечисления.ES_СтатусыЗаборов.ПустаяСсылка();
		
	КонецПопытки;
	
	Возврат СтатусЗаказа;
	
КонецФункции


Функция ПреобразоватьСтрокуВДату(ДатаСтрокой) Экспорт
	
	мДата = СтрЗаменить(ДатаСтрокой,"T", "");
	мДата = СтрЗаменить(мДата,"-","");
	мДата = СтрЗаменить(мДата,":","");
	
	Попытка
	
		мДата = Дата(мДата);
	
	Исключение
	    мДата = Дата("00010101");
	КонецПопытки;
	
	Возврат мДата;
	
КонецФункции

Процедура ПересчитатьИтогиВОтчете(мОтчет)
	
	мОтчет.ES_ОплатаНаличными = мОтчет.Заказы.Итог("НПФактНал");
	мОтчет.ES_НПФактНал = мОтчет.Заказы.Итог("НПФактНал");
	мОтчет.ES_ОплатаБезналичными =   мОтчет.Заказы.Итог("НПФактБезнал");
	//мОтчет.ES_Возвраты		= 
КонецПроцедуры

// Создает файл в ИБ.
//
// Параметры:
//   Владелец       - СправочникСсылка.ПапкиФайлов, ЛюбаяСсылка - будет установлен в реквизит ВладелецФайла у
//                    созданного файла.
//   СведенияОФайле - Структура - см. РаботаСФайламиКлиентСервер.СведенияОФайле, в режиме "Файл".
//
// Возвращаемое значение:
//    СправочникСсылка.Файлы - созданный файл.
//
Функция СоздатьФайл(Знач Владелец, Знач СведенияОФайле, ДокументДоставки)
	
	Файл = Справочники.Файлы.СоздатьЭлемент();
	Файл.ВладелецФайла = Владелец;
	Файл.Наименование = СведенияОФайле.ИмяБезРасширения;
	Файл.Владелец = ДокументДоставки; 	
	//Файл.ПолноеНаименование = СведенияОФайле.ИмяБезРасширения;
	Файл.Автор = ?(СведенияОФайле.Автор <> Неопределено, СведенияОФайле.Автор, Пользователи.ТекущийПользователь());
	Файл.ДатаСоздания = ТекущаяДатаСеанса();
	Файл.Описание = СведенияОФайле.Комментарий;
	Файл.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Неопределено);
	Файл.ХранитьВерсии = СведенияОФайле.ХранитьВерсии;
	
	//Если ТипЗнч(СведенияОФайле.АдресВременногоХранилищаТекста) = Тип("ХранилищеЗначения") Тогда
	//	// При создании Файла из шаблона хранилище значения копируется напрямую.
	//	Файл.ТекстХранилище = СведенияОФайле.АдресВременногоХранилищаТекста;
	//ИначеЕсли Не ПустаяСтрока(СведенияОФайле.АдресВременногоХранилищаТекста) Тогда
	//	Текст = ФайловыеФункцииСлужебный.ПолучитьСтрокуИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаТекста);
	//	Файл.ТекстХранилище = Новый ХранилищеЗначения(Текст);
	//КонецЕсли;
	
	Файл.Заполнить(Неопределено);
	Файл.Записать();
	Возврат Файл.Ссылка;
	
КонецФункции


Функция СоздатьВерсию(ФайлСсылка, СведенияОФайле) Экспорт
	
	ХранилищеФайла = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Версия = Справочники.ВерсииФайлов.СоздатьЭлемент();
	
	Версия.НомерВерсии = 1;
	
	Версия.Владелец = ФайлСсылка;
	Версия.ДатаМодификацииУниверсальная 		= ТекущаяДатаСеанса();
	Версия.ДатаМодификацииФайла 				= ТекущаяДатаСеанса();
	
	
	
	Версия.Автор = Пользователи.ТекущийПользователь();
	
	
	Версия.ДатаСоздания = ТекущаяДатаСеанса();
	
	Версия.ПолноеНаименование = СведенияОФайле.ИмяБезРасширения;
	
	Версия.Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СведенияОФайле.РасширениеБезТочки);
	
	ТипХраненияФайлов  = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;

	Версия.ТипХраненияФайла = ТипХраненияФайлов;
	// Создание объекта Файл на основе выбранного файла с диска.
		
	Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		
		ХранилищеФайла = Новый ХранилищеЗначения(
		ПолучитьИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаФайла));
		
		Если Версия.Размер = 0 Тогда
			ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
			Версия.Размер = ДвоичныеДанныеФайла.Размер();
			
			РаботаСФайламиСлужебныйКлиентСервер.ПроверитьРазмерФайлаДляЗагрузки(Версия);
		КонецЕсли;
			
	КонецЕсли; 
		
	
	
	Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;

	Если Версия.Размер = 0 Тогда
		Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
			Версия.Размер = ДвоичныеДанныеФайла.Размер();
		КонецЕсли;
	КонецЕсли;

	Версия.Заполнить(Неопределено);
	Версия.Записать();
	
	Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		ЗаписатьФайлВИнформационнуюБазу(Версия.Ссылка, ДвоичныеДанныеФайла);
	КонецЕсли;
	
	Возврат Версия.Ссылка;
	
КонецФункции

// Записывает двоичные данные файла в информационную базу.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на присоединенный файл.
//  ДвоичныеДанные     - ДвоичныеДанные, которые требуется записать.
//
Процедура ЗаписатьФайлВИнформационнуюБазу(Знач ПрисоединенныйФайл, Знач ДвоичныеДанные) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи                     = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Файл                = ПрисоединенныйФайл;
	МенеджерЗаписи.ДвоичныеДанныеФайла = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

//УСТАРЕЛА
//
Процедура ЗаписатьДанныеТрекинга(Трекинг,Курьер)
	
	Для Каждого ЭЛ_Запись Из Трекинг Цикл
		НЗ = РегистрыСведений.ES_КоординатыКурьеров.СоздатьМенеджерЗаписи();
		НЗ.Курьер 	= Курьер;
		НЗ.Период 	= Дата(ЭЛ_Запись.Получить("Период"));
		НЗ.Долгота 	= ЭЛ_Запись.Получить("Долгота");
		НЗ.Широта 	= ЭЛ_Запись.Получить("Широта");
		НЗ.Адрес 	= ЭЛ_Запись.Получить("Адрес");
		НЗ.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьДанныеМестонахожденияКурьера(Курьер,Долгота,Широта,Адрес) Экспорт 
	
	НЗ = РегистрыСведений.ES_КоординатыКурьеров.СоздатьМенеджерЗаписи();
	НЗ.Курьер 	= Курьер;
	НЗ.Период 	= ТекущаяДата();
	НЗ.Долгота 	= СтрЗаменить(Долгота,",",".");
	НЗ.Широта 	= СтрЗаменить(Широта,",",".");
	НЗ.Адрес 	= Адрес;
	НЗ.Записать();
	
КонецПроцедуры

Функция ПолучитьТокенДоступаGoogleDrive(ДокументДоставкиИД) Экспорт
	//EFSOL_Сальник К.А. 2019-05-08 {+
	
	Ответ = Новый HTTPСервисОтвет(200);
	СтруктураОтвета = Новый Структура;
	
	ИД = Новый УникальныйИдентификатор(ДокументДоставкиИД);
	
	ИдентификаторКаталога = "";
	
	ДокументДоставки = Документы.ЗаказПокупателя.ПолучитьСсылку(ИД);
	Если ДокументДоставки.ПолучитьОбъект() = Неопределено Тогда
		ДокументДоставки = Документы.ES_ЗаборГруза.ПолучитьСсылку(ИД);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументДоставки) Тогда
		ИдентификаторКаталога = Обработки.ES_НастройкаGoogleDrive.ПолучитьКаталогДляСохраненияНаДиске(ДокументДоставки, ТекущаяДата());
	КонецЕсли;
	
	ПараметрыПодключенияGoogleDrive = Обработки.ES_НастройкаGoogleDrive.ПолучитьПараметрыПодключенияGoogleDrive();
	
	Если ПараметрыПодключенияGoogleDrive = Неопределено Тогда
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.УстановитьТелоИзСтроки("Не заданы параметры подключения к GoogleDrive.");
		Возврат Ответ;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.ВремяЖизниТокена) и ТекущаяДата() <= ПараметрыПодключенияGoogleDrive.ВремяЖизниТокена и ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.ТокенДоступа) Тогда
		СтруктураОтвета.Вставить("token", ПараметрыПодключенияGoogleDrive.ТокенДоступа);
		СтруктураОтвета.Вставить("folder", ИдентификаторКаталога);
		ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
		СтруктураОтветаJSON =  ОбработкаJSON.JSON(СтруктураОтвета);
		Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJson);
		Возврат Ответ;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.ИдентификаторКлиента) и  ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.СекретКлиента) и ЗначениеЗаполнено(ПараметрыПодключенияGoogleDrive.ТокенОбновления) Тогда
		Если Обработки.ES_НастройкаGoogleDrive.ОбновитьТокенДоступа() Тогда
			ПараметрыПодключенияGoogleDrive = Обработки.ES_НастройкаGoogleDrive.ПолучитьПараметрыПодключенияGoogleDrive();
			СтруктураОтвета.Вставить("token", ПараметрыПодключенияGoogleDrive.ТокенДоступа);
			СтруктураОтвета.Вставить("folder", ИдентификаторКаталога);
			ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
			СтруктураОтветаJSON =  ОбработкаJSON.JSON(СтруктураОтвета);
			Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJson);
			Возврат Ответ;
		Иначе
			Ответ = Новый HTTPСервисОтвет(500);
			Ответ.УстановитьТелоИзСтроки("Не заданы параметры подключения к GoogleDrive.");
			Возврат Ответ;
		КонецЕсли;
	Иначе
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.УстановитьТелоИзСтроки("Не заданы параметры подключения к GoogleDrive.");
		Возврат Ответ;
	КонецЕсли;
	//EFSOL_Сальник К.А.  -}

КонецФункции

Процедура ПерезаписатьВхНакладнуюВЗаказе(ВхНакладная, СсылкаНаЗаказ)
	
	Если ТипЗнч(СсылкаНаЗаказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Если ЗначениеЗаполнено(ВхНакладная) И СсылкаНаЗаказ.ES_ВхНакладная <> ВхНакладная Тогда
			УстановитьПривилегированныйРежим(Истина);
			ЗаказОбъект = СсылкаНаЗаказ.ПолучитьОбъект();
			ЗаказОбъект.ES_ВхНакладная = ВхНакладная;
			Попытка
				ЗаказОбъект.Записать(?(ЗаказОбъект.Проведен,РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			Исключение
				
			КонецПопытки;
			
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти
