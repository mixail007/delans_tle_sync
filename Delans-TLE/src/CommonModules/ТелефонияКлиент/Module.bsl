
#Область ПрограммныйИнтерфейс

Процедура ПослеНачалаРаботыСистемы(ПараметрыРаботыКлиента) Экспорт
	
	Если НЕ ПараметрыРаботыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыРаботыКлиента.ИспользуетсяТелефония Тогда
		Возврат;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.11.0") < 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		
		Если ПараметрыРаботыКлиента.Свойство("ПредложитьИспользованиеСистемыВзаимодействия") Тогда
			ПодключитьОбработчикОжидания("ПредложитьИспользованиеСистемыВзаимодействия", 180, Истина);
		ИначеЕсли ПараметрыРаботыКлиента.Свойство("ПредложитьРегистрациюСистемыВзаимодействия") Тогда
			ПодключитьОбработчикОжидания("ПредложитьРегистрациюСистемыВзаимодействия", 180, Истина);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыРаботыКлиента.Свойство("СлужебныйЖурналЗвонков") ИЛИ ПараметрыРаботыКлиента.СлужебныйЖурналЗвонков = Неопределено Тогда
		ПодключитьОбработчикОжидания("СоздатьСлужебныйЖурналЗвонковСистемыВзаимодействия", 60, Истина);
	Иначе
		ПодключитьОбработчикОжидания("ПодключитьОбработчикНовыхСообщенийСистемыВзаимодействия", 10, Истина);
	КонецЕсли;
	
	Если ПараметрыРаботыКлиента.Свойство("ОбновитьЖурналЗвонков") Тогда
		ТелефонияВызовСервера.ОбновитьЖурналЗвонков();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПредложитьРегистрацияИнформационнойБазыСистемыВзаимодействия(ЕстьПравоРегистрации) Экспорт
	
	Если СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьПравоРегистрации Тогда
		ДействиеПриНажатии = "e1cib/command/Обработка.РегистрацияВСистемеВзаимодействияУНФ.Команда.РегистрацияВзаимодействий";
	Иначе
		ДействиеПриНажатии = Новый ОписаниеОповещения("ПредложитьРегистрацияИнформационнойБазыСистемыВзаимодействияНетПрав", ТелефонияКлиент);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru='Автоматическая обработка звонков с системой взаимодействия'"),
		ДействиеПриНажатии,
		НСтр("ru='Без дополнительных нажатий программа покажет уведомления о входящих звонках и автоматически откроет карточку клиента!'"),
		БиблиотекаКартинок.ОбсужденияУНФ,
		СтатусОповещенияПользователя.Важное
	);
	
КонецПроцедуры

Процедура ПредложитьРегистрацияИнформационнойБазыСистемыВзаимодействияНетПрав(ДополнительныеПараметры) Экспорт
	
	ПоказатьПредупреждение(, НСтр("ru='Нет прав для регистрации информационной базы в системе взаимодействия.
		|Обратитесь к администратору.
		|
		|Для регистрации: Еще больше возможностей — CRM — Автоматическая обработка звонков'"));
	
КонецПроцедуры

Процедура ОбработчикНовогоСообщенияОбсуждениеЖурналЗвонков(Сообщение, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Сообщение.Данные) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сообщение.Данные) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОповещения = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(Сообщение.Данные);
	
	Если ДанныеОповещения.ТипЗвонка = "НовыйЗвонок" Тогда
		
		Если Сообщение.Получатели.Содержит(ТелефонияВызовСервераПовтИсп.ИдентификаторТекущегоПользователяСистемыВзаимодействия()) Тогда
			ДанныеЗвонка = ТелефонияВызовСервера.ПолучитьДанныеВходящегоЗвонка(Ложь);
			
			Если ДанныеЗвонка.ПользовательКому = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ОповеститьПользователяОНовомЗвонке(ДанныеЗвонка);
			ОповеститьОбИзменении(Тип("ДокументСсылка.Событие"));
		КонецЕсли;
		
	ИначеЕсли ДанныеОповещения.ТипЗвонка = "НачалоРазговора" Тогда
		
		Если Сообщение.Получатели.Содержит(ТелефонияВызовСервераПовтИсп.ИдентификаторТекущегоПользователяСистемыВзаимодействия()) Тогда
			ДанныеЗвонка = ТелефонияВызовСервера.ПолучитьДанныеВходящегоЗвонка();
			ОбработкаВходящегоЗвонка(ДанныеЗвонка);
		КонецЕсли;
		
	ИначеЕсли ДанныеОповещения.ТипЗвонка = "КонецРазговора" Тогда
		
		ОповеститьОбИзменении(Тип("ДокументСсылка.Событие"));
		
	ИначеЕсли ДанныеОповещения.ТипЗвонка = "Неотвеченный" Тогда
		
		Если Сообщение.Получатели.Содержит(ТелефонияВызовСервераПовтИсп.ИдентификаторТекущегоПользователяСистемыВзаимодействия()) Тогда
			Если ДанныеОповещения.Свойство("НавигационнаяСсылка")
				И ДанныеОповещения.Свойство("Представление") Тогда
				
				ПоказатьОповещениеПользователя(НСтр("ru='Пропущенный вызов'"),
					ДанныеОповещения.НавигационнаяСсылка,
					ДанныеОповещения.Представление,
					БиблиотекаКартинок.ТелефонныйЗвонокНеотвеченный,
					СтатусОповещенияПользователя.Важное
				);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработчикНажатияОповещенияОВходящемЗвонке(ДополнительныеПараметры) Экспорт
	
	ОбработкаВходящегоЗвонка(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработкаВходящегоЗвонка(ДанныеЗвонка = Неопределено) Экспорт
	
	ПоказатьОповещение = (ДанныеЗвонка = Неопределено);
	
	Если ДанныеЗвонка = Неопределено Тогда
		ДанныеЗвонка = ТелефонияВызовСервера.ПолучитьДанныеВходящегоЗвонка();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеЗвонка.ПользовательКому) Тогда
		ПоказатьОповещениеПользователя(,,
			НСтр("ru='Текущие вызовы отсутствуют'"),
			БиблиотекаКартинок.Информация32);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗвонка.АбонентОтКого) Тогда
		Если ПоказатьОповещение Тогда
			ОповеститьПользователяОНовомЗвонке(ДанныеЗвонка);
		КонецЕсли;
		ОбработкаЗвонкаИзвестногоКонтакта(ДанныеЗвонка);
	Иначе
		ОбработкаЗвонкаНеизвестногоКонтакта(ДанныеЗвонка);
	КонецЕсли;
	
КонецПроцедуры

Функция ПоддерживаютсяВызовы() Экспорт
	
#Если МобильныйКлиент Тогда
	Возврат СредстваТелефонии.ПоддерживаетсяНаборНомера();
#Иначе
	Возврат УправлениеНебольшойФирмойПовтИсп.ИспользуетсяТелефония();
#КонецЕсли
	
КонецФункции

Процедура ПозвонитьПоНомеру(НомерТелефона, Контакт = Неопределено, КонтактРодитель = Неопределено, Событие = Неопределено) Экспорт
	Перем Ошибка;
	Перем СтрокаПояснения;
	
#Если МобильныйКлиент Тогда
	
	СредстваТелефонии.ПодключитьОбработчикЗвонков(Новый ОписаниеОповещения("Подключаемый_ОбработчикЗвонковМобильногоУстройства", ТелефонияКлиент));
	СредстваТелефонии.НабратьНомер(НомерТелефона, Ложь);
	
#Иначе
	
	Действие = УправлениеНебольшойФирмойПовтИсп.ДействиеПриИсходящемЗвонке();
	
	Если Действие = "ОткрытьСобытие" И Событие = Неопределено Тогда
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("ТипСобытия",      ПредопределенноеЗначение("Перечисление.ТипыСобытий.ТелефонныйЗвонок"));
		ЗначенияЗаполнения.Вставить("Контакт",         Контакт);
		ЗначенияЗаполнения.Вставить("КонтактРодитель", КонтактРодитель);
		ЗначенияЗаполнения.Вставить("ЗначениеКИ",      НомерТелефона);
		ОткрытьФорму("Документ.Событие.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения));
	Иначе
		ТелефонияВызовСервера.ПозвонитьПоНомеру(НомерТелефона, Событие, Ошибка, СтрокаПояснения);
		ОбработатьРезультатВызова(Ошибка, СтрокаПояснения);
	КонецЕсли;
	
#КонецЕсли
	
КонецПроцедуры

Процедура ОповеститьПользователяОНовомЗвонке(ДанныеЗвонка)
	
	Если ДанныеЗвонка.ВходящееИсходящее = ПредопределенноеЗначение("Перечисление.ВходящееИсходящееСобытие.ПустаяСсылка") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеЗвонка.ВходящееИсходящее = ПредопределенноеЗначение("Перечисление.ВходящееИсходящееСобытие.Входящее") Тогда
		Текст = НСтр("ru='Входящий звонок'");
		ПояснениеШаблон = НСтр("ru='от %1,
			|с номера: %2,
			|в %3'"
		);
	Иначе
		Текст = НСтр("ru='Исходящий звонок'");
		ПояснениеШаблон = НСтр("ru='%1,
			|на номер: %2,
			|в %3'"
		);
	КонецЕсли;
	
	ПредставлениеДаты = ?(НачалоДня(ДанныеЗвонка.ДатаЗвонка) = НачалоДня(ТекущаяДата()),
		Формат(ДанныеЗвонка.ДатаЗвонка, "ДФ=HH.mm"),
		Формат(ДанныеЗвонка.ДатаЗвонка, "ДЛФ=DD")
	);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикНажатияОповещенияОВходящемЗвонке", ТелефонияКлиент, ДанныеЗвонка);
	
	ПоказатьОповещениеПользователя(
		Текст,
		ОписаниеОповещения,
		СтрШаблон(
			ПояснениеШаблон,
			?(ЗначениеЗаполнено(ДанныеЗвонка.ПредставлениеАбонента), ДанныеЗвонка.ПредставлениеАбонента, НСтр("ru='Неизвестный абонент'")),
			ДанныеЗвонка.НомерТелефонаАбонента,
			ПредставлениеДаты
		),
		БиблиотекаКартинок.ТелефонныйЗвонокВходящий
	);
	
КонецПроцедуры

Процедура ПрослушатьЗаписьРазговора(ИдентификаторЗвонка, СсылкаНаЗапись, ОбновитьДанныеЗвонка) Экспорт
	Перем Ошибка;
	
	ИспользуемаяАТС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеКонстанты("ИспользуемаяАТС");
	
	ОбновитьДанныеЗвонка = Ложь;
	URL = Неопределено;
	
	Если ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.ДоступныеАТС.MangoOffice") Тогда
		
		ШаблонURL = ТелефонияВызовСервера.КорневойАдресАТС() + "queries/recording/issa/[recording_id]/[action]";
		ПараметрыURL = Новый Структура;
		ПараметрыURL.Вставить("recording_id", СсылкаНаЗапись);
		ПараметрыURL.Вставить("action", "play");
		URL = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонURL, ПараметрыURL);
		
	ИначеЕсли ЭтоПлатформаItoolabs(ИспользуемаяАТС) Тогда
		
		URL = СсылкаНаЗапись;
		
	Иначе
		
		Если ЗначениеЗаполнено(СсылкаНаЗапись) Тогда
			URL = СсылкаНаЗапись;
		Иначе
			URL = ТелефонияВызовСервера.СсылкаНаЗаписьРазговора(ИдентификаторЗвонка, Ошибка);
			ОбновитьДанныеЗвонка = Истина;
			Оповестить("ОбновитьДанныеТелефонногоЗвонка");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Ошибка <> Неопределено Тогда
		ОбработатьРезультатВызова(Ошибка);
		Возврат;
	КонецЕсли;
	
	Если URL = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Запись данного разговора отсутствует.'"));
		Возврат;
	КонецЕсли;
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(URL);
	
КонецПроцедуры

Процедура Подключаемый_ОбработчикЗвонковМобильногоУстройства(НомерТелефона, Дата, ВариантСобытия, ТипЗвонка, ДополнительныеПараметры) Экспорт
	
#Если МобильныйКлиент Тогда
	
	Если ТипЗвонка = ТипЗвонкаСредствТелефонии.Входящий Тогда
		ТипЗвонкаСтрокой = "Входящий"
	ИначеЕсли ТипЗвонка = ТипЗвонкаСредствТелефонии.Исходящий Тогда
		ТипЗвонкаСтрокой = "Исходящий"
	ИначеЕсли ТипЗвонка = ТипЗвонкаСредствТелефонии.Пропущенный Тогда
		ТипЗвонкаСтрокой = "Пропущенный"
	КонецЕсли;
	
	ЗвонокЗавершен = Ложь;
	Если ВариантСобытия = ВариантСобытияЗвонкаСредствТелефонии.ЗавершениеВходящего Тогда
		ВариантСобытияСтрокой = "ЗавершениеВходящего";
		ЗвонокЗавершен = Истина;
	ИначеЕсли ВариантСобытия = ВариантСобытияЗвонкаСредствТелефонии.ЗавершениеИсходящего Тогда
		ВариантСобытияСтрокой = "ЗавершениеИсходящего";
		ЗвонокЗавершен = Истина;
	ИначеЕсли ВариантСобытия = ВариантСобытияЗвонкаСредствТелефонии.НачалоВходящего Тогда
		ВариантСобытияСтрокой = "НачалоВходящего";
	ИначеЕсли ВариантСобытия = ВариантСобытияЗвонкаСредствТелефонии.НачалоИсходящего Тогда
		ВариантСобытияСтрокой = "НачалоИсходящего";
	ИначеЕсли ВариантСобытия = ВариантСобытияЗвонкаСредствТелефонии.НачалоСигналаВходящего Тогда
		ВариантСобытияСтрокой = "НачалоСигналаВходящего";
	Конецесли;
	
	Событие = ТелефонияВызовСервера.ОбработатьЗвонок(НомерТелефона, ПользователиКлиент.АвторизованныйПользователь(), МестноеВремя(Дата), ТипЗвонкаСтрокой, ВариантСобытияСтрокой);
	
	Если ЗвонокЗавершен Тогда
		
		// todo
		//СредстваТелефонии.ОтключитьОбработчикЗвонков(Новый ОписаниеОповещения("Подключаемый_ОбработчикЗвонковМобильногоУстройства", КонтактнаяИнформацияУНФКлиент));
		//СредстваТелефонии.ОтключитьОбработчикЗвонков();
		
		Если Событие <> Неопределено Тогда
			ОткрытьФорму("Документ.Событие.Форма.ФормаСобытия", Новый Структура("Ключ", Событие));
		КонецЕсли;
		
	КонецЕсли;
	
#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработкаЗвонкаИзвестногоКонтакта(ДанныеЗвонка)
	
	Если ДанныеЗвонка.ДействиеТекущегоЗвонкаНайденногоАбонента = "ОткрытьКарточкуАбонента"
		Или ДанныеЗвонка.ДействиеТекущегоЗвонкаНайденногоАбонента = "ОткрыватьСобытиеПриЗакрытииКарточкиАбонента" Тогда
		
		Если ТипЗнч(ДанныеЗвонка.АбонентОтКого) = Тип("СправочникСсылка.Контрагенты") Тогда
			ИмяФормы = "Справочник.Контрагенты.ФормаОбъекта";
		ИначеЕсли ТипЗнч(ДанныеЗвонка.АбонентОтКого) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			ИмяФормы = "Справочник.КонтактныеЛица.ФормаОбъекта";
		ИначеЕсли ТипЗнч(ДанныеЗвонка.АбонентОтКого) = Тип("СправочникСсылка.Лиды") Тогда
			ИмяФормы = "Справочник.Лиды.ФормаОбъекта";
		Иначе
			ВызватьИсключение НСтр("ru='Не определен тип звонящего.'");
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Ключ", ДанныеЗвонка.АбонентОтКого);
		Если ДанныеЗвонка.ДействиеТекущегоЗвонкаНайденногоАбонента = "ОткрыватьСобытиеПриЗакрытииКарточкиАбонента" Тогда
			ПараметрыФормы.Вставить("СобытиеДляПоказаПослеЗакрытия", ДанныеЗвонка.Событие);
		КонецЕсли;
		ОткрытьФорму(ИмяФормы, ПараметрыФормы);
		
	ИначеЕсли ДанныеЗвонка.ДействиеТекущегоЗвонкаНайденногоАбонента = "ОткрытьСобытие" Тогда
		
		ПоказатьЗначение(, ДанныеЗвонка.Событие);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗвонкаНеизвестногоКонтакта(ДанныеЗвонка)
	
	Если ДанныеЗвонка.ДействиеТекущегоЗвонкаНеизвестногоАбонента = "ЗадаватьВопрос" Тогда
		
		ПараметрыФормы = Новый Структура("ПользовательКому", ДанныеЗвонка.ПользовательКому);
		ОткрытьФорму("РегистрСведений.ТекущиеВходящиеЗвонки.Форма.НеизвестныйАбонент", ПараметрыФормы);
		
	ИначеЕсли ДанныеЗвонка.ДействиеТекущегоЗвонкаНеизвестногоАбонента = "СозданиеКонтрагента" Тогда
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Покупатель", Истина);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ПараметрыФормы.Вставить(
			"КонтактКакСвязаться",
			Новый Структура(
				"ВидКонтакта,Контакт,КакСвязаться,ТипКИ",
				"КонтактноеЛицо", "", ДанныеЗвонка.НомерТелефонаАбонента, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")));
		
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы);
		
	ИначеЕсли ДанныеЗвонка.ДействиеТекущегоЗвонкаНеизвестногоАбонента = "СозданиеСобытия" Тогда
		
		//ЗначенияЗаполнения = Новый Структура;
		//ЗначенияЗаполнения.Вставить("НомерТелефона",            ДанныеЗвонка.НомерТелефонаАбонента);
		//ЗначенияЗаполнения.Вставить("ТипСобытия",               ПредопределенноеЗначение("Перечисление.ТипыСобытий.ТелефонныйЗвонок"));
		//ЗначенияЗаполнения.Вставить("ВходящееИсходящееСобытие", ПредопределенноеЗначение("Перечисление.ВходящееИсходящееСобытие.Входящее"));
		//
		//ПараметрыФормы = Новый Структура;
		//ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		//
		//ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы);
		
		ПоказатьЗначение(, ДанныеЗвонка.Событие);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРезультатВызова(Ошибка, СтрокаПояснения = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Ошибка) Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru='Набор номера'"),,
			СтрокаПояснения,
			БиблиотекаКартинок.ТелефонныйЗвонокИсходящий);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("Ошибка", Ошибка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВызоваЗавершение", ТелефонияКлиент, ДополнительныеПараметры);
	
	ИспользуемаяАТС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеКонстанты("ИспользуемаяАТС");
	
	Если Ошибка = "НеЗаполненыНастройкиПользователя"
		ИЛИ Ошибка = "НеЗаполненВнутреннийНомерПользователя" Тогда
		
		ТекстВопроса = НСтр("ru='Необходимо указать внутренний номер пользователя АТС.'");
		
	ИначеЕсли Ошибка = "НеЗаполненНомерИсходящегоЗвонкаПользователя" Тогда
		
		ТекстВопроса = НСтр("ru='Необходимо указать номер исходящего звонка в настройках интеграции.'");
		
	ИначеЕсли Ошибка = "НеЗаполненАдресАТС" Тогда
		
		ТекстВопроса = НСтр("ru='Не заполнен адрес вашей АТС в настройках интеграции.'");
		
	ИначеЕсли Ошибка = "НекорректныйВнутреннийНомерПользователя" Тогда
		
		ТекстВопроса = НСтр("ru='Указан некорректный внутренний номер пользователя телефонии.'");
		
	ИначеЕсли Ошибка = "НеЗаполненыНастройкиИнтеграции" Тогда
		
		ТекстВопроса = НСтр("ru='Не заполнены настройки интеграции с выбранной АТС.'")
		
	КонецЕсли;
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Перейти в настройки'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,, КодВозвратаДиалога.Да);
	
КонецПроцедуры

Процедура ОбработатьРезультатВызоваЗавершение(Результат, ДополнительныеСвойства) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Ошибка = "НеЗаполненыНастройкиПользователя" Тогда
		
		ОткрытьФорму("РегистрСведений.НастройкиПользователейТелефонии.ФормаСписка");
		
	ИначеЕсли ДополнительныеСвойства.Ошибка = "НеЗаполненВнутреннийНомерПользователя"
		ИЛИ ДополнительныеСвойства.Ошибка = "НекорректныйВнутреннийНомерПользователя" Тогда
		
		ОткрытьФорму("РегистрСведений.НастройкиПользователейТелефонии.ФормаЗаписи",
			Новый Структура(
				"Пользователь,ТекущийЭлемент",
				ПользователиКлиент.ТекущийПользователь(),
				"ВнутреннийНомер"
		));
		
	ИначеЕсли ДополнительныеСвойства.Ошибка = "НеЗаполненНомерИсходящегоЗвонкаПользователя" Тогда
		
		ОткрытьФорму("РегистрСведений.НастройкиПользователейТелефонии.ФормаЗаписи",
			Новый Структура(
				"Пользователь,ТекущийЭлемент",
				ПользователиКлиент.ТекущийПользователь(),
				"ИсходящийНомер"
		));
		
	ИначеЕсли ДополнительныеСвойства.Ошибка = "НеЗаполненАдресАТС"
		ИЛИ ДополнительныеСвойства.Ошибка = "НеЗаполненыНастройкиИнтеграции" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РазделПоУмолчанию", "CRM");
		ОткрытьФорму("Обработка.НастройкаПрограммы.Форма.НастройкаТелефонии", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоПлатформаItoolabs(АТС) Экспорт
	
	АТСНаПлатформеItoolabs = Новый Массив;
	АТСНаПлатформеItoolabs.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеАТС.УниверсальныйItoolabs"));
	АТСНаПлатформеItoolabs.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеАТС.ДомRu"));
	АТСНаПлатформеItoolabs.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеАТС.ВестКоллСПб"));
	АТСНаПлатформеItoolabs.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеАТС.ДеловаяСетьИркутск"));
	АТСНаПлатформеItoolabs.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеАТС.Энфорта"));
	АТСНаПлатформеItoolabs.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеАТС.Мегафон"));;
	АТСНаПлатформеItoolabs.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеАТС.ТТК"));
	АТСНаПлатформеItoolabs.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеАТС.ВестКоллМосква"));
	АТСНаПлатформеItoolabs.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеАТС.VirginConnect"));
	АТСНаПлатформеItoolabs.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеАТС.ГарсТелеком"));
	АТСНаПлатформеItoolabs.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеАТС.НаукаСвязь"));
	АТСНаПлатформеItoolabs.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеАТС.RiNet"));
	АТСНаПлатформеItoolabs.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеАТС.СибирскиеСети"));
	АТСНаПлатформеItoolabs.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеАТС.Авантел"));
	АТСНаПлатформеItoolabs.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеАТС.Гравител"));
	
	Возврат АТСНаПлатформеItoolabs.Найти(АТС) <> Неопределено;
	
КонецФункции

#КонецОбласти
