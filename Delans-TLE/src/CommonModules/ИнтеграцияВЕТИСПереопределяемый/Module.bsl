
#Область ПрограммныйИнтерфейс

// Возвращает объекты прикладных метаданных, в которых возможна
//  интеграция с ВетИС (в формах объектов)
// Возвращаемое значение:
//  Массив - объекты прикладных метаданных
//
Функция ОбъектыМетаданныхИнтеграции() Экспорт
	
	Результат = Новый Массив;
	Возврат Результат;
	
КонецФункции

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой необходимо настроить подключаемое оборудование,
//  ПрефиксыЭлементовФормы - Строка - строка имен табличных частей, разделенных запятыми, в которых нужно настроить видимость команд.
//
Процедура НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы = "Товары") Экспорт
	
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	
	Если ЗначениеЗаполнено(ПрефиксыЭлементовФормы) Тогда
		МассивПрефиксыЭлементовФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрефиксыЭлементовФормы, ",");
	Иначе
		МассивПрефиксыЭлементовФормы = Новый Массив;
		МассивПрефиксыЭлементовФормы.Добавить(ПрефиксыЭлементовФормы);
	КонецЕсли;
	
	Для Каждого Префикс Из МассивПрефиксыЭлементовФормы Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			Префикс + "ВыгрузитьДанныеВТСД",
			"Видимость",
			ИспользоватьПодключаемоеОборудование);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизит 'ЕдиницаИзмерения' справочника 'ЕдиницыИзмеренияВЕТИС' по ОКЕИ.
//
// Параметры:
//	СправочникОбъект - СправочникОбъект.ЕдиницыИзмеренияВЕТИС - Единица измерения ВетИС.
//
Процедура ЗаполнитьЕдиницуИзмеренияПоКлассификаторам(СправочникОбъект) Экспорт
	
	Если СправочникОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКлассификатораВЕТИС = ИнтеграцияВЕТИСПовтИсп.ДанныеКлассификатораЕдиницИзмеренияВЕТИС();
	СтрокаКлассификатораВЕТИС = ДанныеКлассификатораВЕТИС.Найти(СправочникОбъект.Идентификатор, "ЕдиницаИзмеренияGUID");
	
	Если ЗначениеЗаполнено(СтрокаКлассификатораВЕТИС)
		И ЗначениеЗаполнено(СтрокаКлассификатораВЕТИС.КодОКЕИ) Тогда
		
		КодОКЕИ = СтрокаКлассификатораВЕТИС.КодОКЕИ;
		ЕдиницаИзмерения = ЕдиницаИзмеренияОКЕИ(КодОКЕИ);
		
		Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			СправочникОбъект.ЕдиницаИзмерения = ЕдиницаИзмерения;
		Иначе
			СправочникОбъект.ЕдиницаИзмерения = СоздатьЕдиницуИзмеренияПоКлассификаторуОКЕИ(КодОКЕИ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийДокументов

// Вызывается при вводе документа на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - заполняемый документ,
//  ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения,
//  ТекстЗаполнения - Строка, Неопределено - текст, используемый для заполнения документа,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполненияДокумента(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ИнвентаризацияПродукцииВЕТИС") Тогда
		ОбработкаЗаполненияИнвентаризацииПродукцииВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ИсходящаяТранспортнаяОперацияВЕТИС") Тогда
		ОбработкаЗаполненияДокументаИсходящаяТранспортнаяОперацияВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
		ОбработкаЗаполненияДокументаВходящаяТранспортнаяОперацияВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПроизводственнаяОперацияВЕТИС") Тогда
		ОбработкаЗаполненияПроизводственнаяОперацияВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияИнвентаризацииПродукцииВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СписаниеЗапасов")Тогда 
		ЗаполнитьИнвентаризациюПродукцииВЕТИСНаОснованииСписанияЗапасов(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РаспределениеЗатрат")Тогда 
		ЗаполнитьИнвентаризациюПродукцииВЕТИСНаОснованииРаспределенияЗатрат(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОприходованиеЗапасов")Тогда 
		ЗаполнитьИнвентаризациюПродукцииВЕТИСНаОснованииОприходованияЗапасов(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПересортицаЗапасов")Тогда 
		ЗаполнитьИнвентаризациюПродукцииВЕТИСНаОснованииПересортицыЗапасов(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаИсходящаяТранспортнаяОперацияВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда 
		ЗаполнитьИсходящуюТранспортнуюОперациюВЕТИСНаОснованииРасходнойНакладной(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПеремещениеЗапасов") Тогда 
		ЗаполнитьИсходящуюТранспортнуюОперациюВЕТИСНаОснованииПеремещенияЗапасов(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда 
		ЗаполнитьИсходящуюТранспортнуюОперациюВЕТИСНаОснованииЗаказаПокупателя(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетОПереработке") Тогда
		ЗаполнитьИсходящуюТранспортнуюОперациюВЕТИСНаОснованииОтчетаОПереработке(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаВходящаяТранспортнаяОперацияВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Возврат;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияПроизводственнаяОперацияВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнтеграцияВЕТИСУНФ.ОбработкаЗаполненияДокументаПроизводственнаяОперацияВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

// Вызывается расширением формы при необходимости проверки заполнения реквизитов при записи или при проведении документа в форме,
// а также при выполнении метода ПроверитьЗаполнение.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - проверяемый документ,
//  Отказ - Булево - признак отказа от проведения документа,
//  ПроверяемыеРеквизиты - Массив - массив путей к реквизитам, для которых будет выполнена проверка заполнения,
//  МассивНепроверяемыхРеквизитов - Массив - массив путей к реквизитам, для которых не будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
		Если ДокументОбъект.ГрузополучательПредприятие = ДокументОбъект.ГрузоотправительПредприятие Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ДатаТТН");
			МассивНепроверяемыхРеквизитов.Добавить("НомерТТН");
			МассивНепроверяемыхРеквизитов.Добавить("ТипТТН");
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПроизводственнаяОперацияВЕТИС") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Сырье.Серия");
		ИнтеграцияВЕТИСУНФ.ПроверитьЗаполнениеИдентификатораПартии(ДокументОбъект, Отказ, МассивНепроверяемыхРеквизитов);
	КонецЕсли;
	
	// ВРЕМЕННО. ДО ИСПРАВЛЕНИЯ БИБЛИОТЕКИ
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ИсходящаяТранспортнаяОперацияВЕТИС") Тогда
		ИнтеграцияВЕТИС.ПроверитьЗаполнениеТипаПроисхождения(ДокументОбъект, Отказ, МассивНепроверяемыхРеквизитов);
	КонецЕсли;
	// ВРЕМЕННО. ДО ИСПРАВЛЕНИЯ БИБЛИОТЕКИ
	
	ПараметрыПроверки = ПолучитьПараметрыПроверкиРеквизита(ДокументОбъект, "ИспользоватьХарактеристики", "Характеристика");
	Если ПараметрыПроверки <> Неопределено Тогда
		ПроверитьЗаполнениеРеквизита(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
		
		ПараметрыПроверки = ПолучитьПараметрыПроверкиРеквизита(ДокументОбъект, "ИспользоватьПартии", "Серия");
		ПроверитьЗаполнениеРеквизита(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПроизводственнаяОперацияВЕТИС") Тогда
			ПараметрыПроверки = ПолучитьПараметрыПроверкиРеквизита(ДокументОбъект, "ИспользоватьПартии", "Серия", "Сырье");
			ПроверитьЗаполнениеРеквизита(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при проведении документа. Выполняется в транзакции записи.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - проводимый документ,
//  Отказ - Булево - признак отказа от проведения документа,
//  РежимПроведения - РежимПроведенияДокумента - текущий режим проведения.
//
Процедура ОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Возникает перед выполнением записи документа. Вызывается после начала транзакции записи, но до начала записи документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - записываемый документ,
//  Отказ - Булево - признак отказа от записи,
//  РежимЗаписи - РежимЗаписиДокумента - текущий режим записи документа,
//  РежимПроведения - РежимПроведенияДокумента - текущий режим проведения документа.
//
Процедура ПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи)Экспорт
	
	ИнтеграцияВЕТИСУНФКлиентСервер.УстановитьВидимостьКомандыГенерацииСерии(Форма);
	
КонецПроцедуры

// Создает временную таблицу "ДокументыИнформационнойБазы", для дальнейшего использования в методе
//	ЗаполнениеДокументовВЕТИС.ДокументОснованиеПоДаннымСвязанныхДокументов.
//	Содержит колонки:
//		* ТипДокумента - ПеречислениеСсылка.ТипыДокументовВЕТИС - тип документа ВЕТИС, служит для определения типа связи со связанными документами;
//		* ПоказательУпорядочивания - ПроизвольныйТип - при определении документа основания, служит для определения приоритета найденных документов;
//		* Документ - ДокументСсылка - документ, который будет определяться как документ-основание;
//		* Дата - Дата - дата входящего документа, по которой будут сопоставляться данные документов ИБ и данные связанных документов;
//		* Номер - Строка - номер входящего документа, по которому будут сопоставляться данные документов ИБ и данные связанных документов;
//	Параметры:
//		ВременныеТаблицы - МенеджерВременныхТаблиц - менеджер временных таблиц запроса, в который будет добавлена создаваемая временная таблица.
//
Процедура ЗаполнитьВременнуюТаблицуСвязанныхДокументовИнформационнойБазы(ВременныеТаблицы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументовВЕТИС.ПустаяСсылка) КАК ТипДокумента,
	|	НЕОПРЕДЕЛЕНО КАК ПоказательУпорядочивания,
	|	НЕОПРЕДЕЛЕНО КАК Документ,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Дата,
	|	"""" КАК Номер
	|ПОМЕСТИТЬ ДокументыИнформационнойБазы
	|ГДЕ
	|	ЛОЖЬ";
	
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПолучитьПараметрыПроверкиРеквизита(ДокументОбъект, ИмяФО, ИмяРеквизита, ИмяТЧ = "")
	
	Если ИмяТЧ = "" Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "Товары") Тогда
			ИмяТЧ = "Товары";
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "ТоварыУточнение") Тогда
			ИмяТЧ = "ТоварыУточнение";
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПроверки = Новый Структура("ИмяТЧ, ВыводитьНомераСтрок, ИмяФО, ИмяРеквизита", ИмяТЧ, Истина, ИмяФО, ИмяРеквизита);
	
	Если ИмяРеквизита = "Характеристика" Тогда
		ПараметрыПроверки.Вставить("ПустоеЗначение", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	ИначеЕсли ИмяРеквизита = "Серия" Тогда
		ПараметрыПроверки.Вставить("ПустоеЗначение", Справочники.ПартииНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Процедура проверки заполнения колонок "Характеристика" в объектах.
//
// Параметры:
//	Объект - ДокументОбъект (СправочникОбъект и т.п.) - объект, для которого требуется проверить заполнение 
//		колонки "Характеристика" в табличной части;
//	МассивНепроверяемыхРеквизитов -Массив - реквизиты, которые не нужно проверять платформенной проверкой;
//	Отказ - Булево, Истина - признак отказа продолжения операции;
//	ПараметрыПроверки - Структура - см. НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик.
//
Процедура ПроверитьЗаполнениеРеквизита(Объект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки) Экспорт
	
	ИмяТЧ = ПараметрыПроверки.ИмяТЧ;
	ИмяРеквизита = ПараметрыПроверки.ИмяРеквизита;
	ВыводитьНомераСтрок = ПараметрыПроверки.ВыводитьНомераСтрок;
	ПустоеЗначение = ПараметрыПроверки.ПустоеЗначение;
	
	МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ+"."+ИмяРеквизита);
	
	Если Не ПолучитьФункциональнуюОпцию(ПараметрыПроверки.ИмяФО) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Характеристика = &ПустоеЗначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиСОшибками.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ПроверятьЗаполнениеХарактеристики
	|				И СтрокиСОшибками.Характеристика = &ПустоеЗначение
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаХарактеристика
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|ГДЕ
	|	ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ПроверятьЗаполнениеХарактеристики
	|	И СтрокиСОшибками.Характеристика = &ПустоеЗначение";
	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".Характеристика", "."+ИмяРеквизита);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК Характеристика", "КАК "+ИмяРеквизита);
	
	Если ИмяРеквизита = "Серия" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПроверятьЗаполнениеХарактеристики", "ПроверятьЗаполнениеПартий");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",
		Объект[ИмяТЧ].Выгрузить(, "НомерСтроки,Номенклатура,Серия,"+ИмяРеквизита))
	;
	Запрос.УстановитьПараметр("ПустоеЗначение", ПустоеЗначение);
	
	Если ВыводитьНомераСтрок Тогда
		ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%Характеристика%"" в строке %НомерСтроки% списка ""%ТаблицаТовары%"".'");
	Иначе
		ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%Характеристика%"" в списке ""%ТаблицаТовары%"".'");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	ПредставлениеТЧ = ?(Не ПараметрыПроверки.Свойство("ПредставлениеТЧ") ИЛИ Не ЗначениеЗаполнено(ПараметрыПроверки.ПредставлениеТЧ),
		МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним,
		ПараметрыПроверки.ПредставлениеТЧ);
	ПредставлениеРеквизитаХарактеристика = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты[ИмяРеквизита].Синоним;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НеЗаполненаХарактеристика Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Характеристика%", ПредставлениеРеквизитаХарактеристика);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, ИмяРеквизита);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает условное оформление формы в части заполнения данных сопоставлений номенклатуры.
//
//	Параметры:
//		Форма - УправляемаяФорма - форма для которой устанавливается условное оформление;
//		ПараметрыУсловногоОформления - Структура - см. ЗаполнениеДокументовВЕТИС.ПараметрыУсловногоОформления()
//
Процедура УстановитьУсловноеОформлениеФормы(Форма, ПараметрыУсловногоОформления = Неопределено) Экспорт
	
	Если ПараметрыУсловногоОформления = Неопределено Тогда
		ПараметрыУсловногоОформления = ПараметрыУсловногоОформления();
	КонецЕсли;
	
	#Область УсловноеОформлениеНоменклатуры
	
	ПараметрыНоменклатуры = ПараметрыУсловногоОформления.Номенклатура;
	
	// Текст сопоставления
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы[ПараметрыНоменклатуры.ИмяПоляВвода].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыНоменклатуры.ПутьКПолю);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеСопоставления = Новый ПолеКомпоновкиДанных(ПараметрыНоменклатуры.ПутьКПолюСопоставления);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ПолеСопоставления);
	
	//  Сопоставление не однозначное	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы[ПараметрыНоменклатуры.ИмяПоляВвода].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыНоменклатуры.ПутьКПолю);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыУсловногоОформления.ПутьКСопоставленоКоличество);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	#КонецОбласти
	
	#Область УсловноеОформлениеХарактеристикиНоменклатуры
	
	ПараметрыХарактеристики = ПараметрыУсловногоОформления.Характеристика;
	
	// Текст сопоставления
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы[ПараметрыХарактеристики.ИмяПоляВвода].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыХарактеристики.ПутьКПолю);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыХарактеристики.ПутьКПолюИспользования);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ПолеСопоставления = Новый ПолеКомпоновкиДанных(ПараметрыХарактеристики.ПутьКПолюСопоставления);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных(ПолеСопоставления));
	
	// Сопоставление не однозначное
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы[ПараметрыХарактеристики.ИмяПоляВвода].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыХарактеристики.ПутьКПолю);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыХарактеристики.ПутьКПолюИспользования);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыУсловногоОформления.ПутьКСопоставленоКоличество);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	СобытияФормВЕТИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		Форма, ПараметрыХарактеристики.ИмяПоляВвода, ПараметрыХарактеристики.ПутьКПолюИспользования);
	
	#КонецОбласти
	
	#Область УсловноеОформлениеСерийНоменклатуры
	
	ПараметрыСерии = ПараметрыУсловногоОформления.Серия;
	СобытияФормВЕТИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(
		Форма, ПараметрыСерии.ИмяПоляВвода, ПараметрыСерии.ПутьКПолюСтатуса, ПараметрыСерии.ПутьКПолюТипаНоменклатуры);
	
	#КонецОбласти
	
КонецПроцедуры

// Определяет параметры, по которым будет устанавливаться условное оформление формы.
//
//	ВозвращаемоеЗначение:
//		Структура - структура с ключами:
//			* Номенклатура - Структура - параметры для настройки условного оформления номенклатуры:
//				** ИмяПоляВвода - Строка - имя поля элемента формы, содержащего данные по номенклатуры, условное оформление которого надо переопределить
//					Значение по умолчанию: "ТоварыНоменклатура";
//				** ПутьКПолю - Строка - путь к полю номенклатуры, для получения данных
//					Значение по умолчанию: "Объект.Товары.Номенклатура";
//				** ПутьКПолюСопоставления - Строка - путь к полю сопоставления номенклатуры, где содержатся данные сопоставления
//              	Значение по умолчанию: "Объект.Товары.СопоставлениеНоменклатура";
//				
//			* Характеристика - Структура - параметры для настройки условного оформления характеристики номенклатуры:
//				** ИмяПоляВвода - Строка - имя поля элемента формы, содержащего данные по характеристике номенклатуры, условное оформление которого надо переопределить
//					Значение по умолчанию: "ТоварыХарактеристика";
//				** ПутьКПолю - Строка - путь к полю характеристики номенклатуры, для получения данных
//					Значение по умолчанию: "Объект.Товары.Характеристика";
//				** ПутьКПолюСопоставления - Строка - путь к полю сопоставления характеристики номенклатуры, где содержатся данные сопоставления
//              	Значение по умолчанию: "Объект.Товары.СопоставлениеХарактеристика";
//				** ПутьКПолюИспользования - Строка - путь к полю признака использования характеристики номенклатуры
//              	Значение по умолчанию: "Объект.Товары.ХарактеристикиИспользуются";
//
//			* Серия - Структура - параметры для настройки условного оформления серии номенклатуры:
//				** ИмяПоляВвода - Строка - имя поля элемента формы, содержащего данные по серии номенклатуры, условное оформление которого надо переопределить
//					Значение по умолчанию: "ТоварыСерия";
//				** ПутьКПолюСтатуса - Строка - путь к полю статуса серии номенклатуры
//					Значение по умолчанию: "Объект.Товары.СтатусУказанияСерий";
//				** ПутьКПолюТипаНоменклатуры - Строка - путь к полю типа серии номенклатуры
//              	Значение по умолчанию: "Объект.Товары.ТипНоменклатуры";
//
//			* ПутьКСопоставленоКоличество - Строка - путь к полю с данными по сопоставленному количеству
//              	Значение по умолчанию: "Объект.Товары.СопоставленоКоличество".
//
Функция ПараметрыУсловногоОформления(ИмяТЧ = "Товары") Экспорт
	
	СтруктураУсловногоОформленияНоменклатуры = Новый Структура;
	
	СтруктураУсловногоОформленияНоменклатуры.Вставить("ИмяПоляВвода", СтрШаблон("%1Номенклатура", ИмяТЧ));
	СтруктураУсловногоОформленияНоменклатуры.Вставить("ПутьКПолю", СтрШаблон("Объект.%1.Номенклатура", ИмяТЧ));
	СтруктураУсловногоОформленияНоменклатуры.Вставить("ПутьКПолюСопоставления", СтрШаблон("Объект.%1.СопоставлениеНоменклатура", ИмяТЧ));
	
	СтруктураУсловногоОформленияХарактеристики = Новый Структура;
	
	СтруктураУсловногоОформленияХарактеристики.Вставить("ИмяПоляВвода", СтрШаблон("%1Характеристика", ИмяТЧ));
	СтруктураУсловногоОформленияХарактеристики.Вставить("ПутьКПолю", СтрШаблон("Объект.%1.Характеристика", ИмяТЧ));
	СтруктураУсловногоОформленияХарактеристики.Вставить("ПутьКПолюСопоставления", СтрШаблон("Объект.%1.СопоставлениеХарактеристика", ИмяТЧ));
	СтруктураУсловногоОформленияХарактеристики.Вставить("ПутьКПолюИспользования", СтрШаблон("Объект.%1.ХарактеристикиИспользуются", ИмяТЧ));
	
	СтруктураУсловногоОформленияСерии = Новый Структура;
	
	СтруктураУсловногоОформленияСерии.Вставить("ИмяПоляВвода", СтрШаблон("%1Серия", ИмяТЧ));
	СтруктураУсловногоОформленияСерии.Вставить("ПутьКПолюСтатуса", СтрШаблон("Объект.%1.СтатусУказанияСерий", ИмяТЧ));
	СтруктураУсловногоОформленияСерии.Вставить("ПутьКПолюТипаНоменклатуры", СтрШаблон("Объект.%1.ТипНоменклатуры", ИмяТЧ));
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Номенклатура", СтруктураУсловногоОформленияНоменклатуры);
	СтруктураВозврата.Вставить("Характеристика", СтруктураУсловногоОформленияХарактеристики);
	СтруктураВозврата.Вставить("Серия", СтруктураУсловногоОформленияСерии);
	СтруктураВозврата.Вставить("ПутьКСопоставленоКоличество", СтрШаблон("Объект.%1.СопоставленоКоличество", ИмяТЧ));
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#Область ОрганизацииИКонтрагенты

// В функции нужно реализовать поиск организации предприятия по ИНН и/или КПП.
//
// Параметры:
//  ИНН - Строка - ИНН искомой организации,
//  КПП - Строка - КПП искомой организации.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ОрганизацияКонтрагентВЕТИС - найденная организация,
//  Неопределено - организация не найдена.
//
Функция ОрганизацияПоИННКПП(ИНН, КПП) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Организации", ИНН, КПП, ВозвращаемоеЗначение);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// В функции нужно реализовать поиск контрагента по ИНН и/или КПП.
//
// Параметры:
//  ИНН - Строка - ИНН искомого контрагента,
//  КПП - Строка - КПП искомого контрагента.
// 
// Возвращаемое значение:
//  СправочникСсылка.Контрагенты - структура со свойствами:
//   * Контрагент - ОпределяемыйТип.ОрганизацияКонтрагентВЕТИС - найденный контрагент,
//   * ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - найденный торговый объект контрагента (партнер).
//  Неопределено - контрагент не найден.
//
Функция КонтрагентПоИННКПП(ИНН, КПП) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Контрагенты", ИНН, КПП, ВозвращаемоеЗначение);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает ИНН и КПП объекта, сопоставленного хозяйствующему субъекту по данным ИБ.
//
// Параметры:
//  ХозяйствующийСубъект - ОпределяемыйТип.ОрганизацияКонтрагентВЕТИС - ссылка на хозя, реквизиты которой нужно определить,
// 
// Возвращаемое значение:
//  Структура - структура со свойствами:
//   * КПП - Строка - КПП организации,
//   * ИНН - Строка - ИНН организации.
//
Функция ИННКППСопоставленногоХозяйствующегоСубъекта(ХозяйствующийСубъект) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если Не ЗначениеЗаполнено(ХозяйствующийСубъект) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ХозяйствующийСубъект) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Запрос.Текст ="
		|ВЫБРАТЬ 
		|	Контрагенты.ИНН    КАК ИНН,
		|	Контрагенты.КПП    КАК КПП
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &ХозяйствующийСубъект";
		
	Иначе
		
		Запрос.Текст ="
		|ВЫБРАТЬ
		|	Организации.ИНН КАК ИНН,
		|	Организации.КПП КАК КПП
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &ХозяйствующийСубъект";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ХозяйствующийСубъект"   , ХозяйствующийСубъект);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("ИНН", Выборка.ИНН);
		ВозвращаемоеЗначение.Вставить("КПП", Выборка.КПП);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Определяет заданы ли настройки подключения к сервису интернет подддержки пользователей.
//
Функция НастройкиПодключенияКСервисуИППЗаданы() Экспорт

	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		Возврат Истина;
		
	Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАвторизации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		
		Возврат (ДанныеАвторизации <> Неопределено); 
		
	КонецЕсли;

КонецФункции

Функция ДанныеКонтрагентаДляПоискаХозяйствующегоСубъекта(Контрагент) Экспорт
	
	ДанныеКонтрагента = Новый Структура;
	ДанныеКонтрагента.Вставить("ИНН", "");
	ДанныеКонтрагента.Вставить("КПП", "");
	ДанныеКонтрагента.Вставить("ОГРН", "");
	ДанныеКонтрагента.Вставить("Наименование", "");
	ДанныеКонтрагента.Вставить("НаименованиеПолное", "");
	ДанныеКонтрагента.Вставить("Тип", Перечисления.ТипыХозяйствующихСубъектовВЕТИС.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	"""" КАК ОГРН,
	|	Контрагенты.Наименование КАК Наименование,
	|	"""" КАК НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА Контрагенты.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ЮридическоеЛицо)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыХозяйствующихСубъектовВЕТИС.ЮридическоеЛицо)
	|		КОГДА Контрагенты.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ИндивидуальныйПредприниматель)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыХозяйствующихСубъектовВЕТИС.ИндивидуальныйПредприниматель)
	|		КОГДА Контрагенты.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ФизическоеЛицо)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыХозяйствующихСубъектовВЕТИС.ФизическоеЛицо)
	|	КОНЕЦ КАК Тип
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеКонтрагента, Выборка);
	КонецЕсли;
	
	Возврат ДанныеКонтрагента;
	
КонецФункции

#КонецОбласти

#Область ФизическиеЛица

Функция ДанныеФизическогоЛица(ФизическоеЛицо) Экспорт
	
	ДанныеФизЛица = Новый Структура();
	ДанныеФизЛица.Вставить("Фамилия");
	ДанныеФизЛица.Вставить("Имя");
	ДанныеФизЛица.Вставить("Отчество");
	ДанныеФизЛица.Вставить("ДатаРождения");
	ДанныеФизЛица.Вставить("ДокументВид");
	ДанныеФизЛица.Вставить("ДокументТип");
	ДанныеФизЛица.Вставить("ДокументСерия");
	ДанныеФизЛица.Вставить("ДокументНомер");
	ДанныеФизЛица.Вставить("ГражданствоСтрана");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА ФИОФизическихЛицСрезПоследних.Фамилия ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ ФИОФизическихЛицСрезПоследних.Фамилия
	|	КОНЕЦ КАК Фамилия,
	|	ВЫБОР
	|		КОГДА ФИОФизическихЛицСрезПоследних.Имя ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ ФИОФизическихЛицСрезПоследних.Имя
	|	КОНЕЦ КАК Имя,
	|	ВЫБОР
	|		КОГДА ФИОФизическихЛицСрезПоследних.Отчество ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ ФИОФизическихЛицСрезПоследних.Отчество
	|	КОНЕЦ КАК Отчество,
	|	ФизическиеЛица.ДатаРождения КАК ДатаРождения,
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ДокументВид,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК ДокументСерия,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК ДокументНомер,
	|	ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия) КАК ГражданствоСтрана
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОФизическихЛицСрезПоследних
	|		ПО (ФИОФизическихЛицСрезПоследних.ФизЛицо = ФизическиеЛица.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц.СрезПоследних КАК ДокументыФизическихЛицСрезПоследних
	|		ПО (ДокументыФизическихЛицСрезПоследних.Физлицо = ФизическиеЛица.Ссылка)
	|			И (ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность)
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &ФизическоеЛицо";
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеФизЛица, Выборка);
		
		Если Не ЗначениеЗаполнено(ДанныеФизЛица.Фамилия)
			И Не ЗначениеЗаполнено(ДанныеФизЛица.Имя)
			И Не ЗначениеЗаполнено(ДанныеФизЛица.Отчество) Тогда
			ФИО = ФизическоеЛицо.Наименование;
			ДанныеФизЛица.Фамилия	= УправлениеНебольшойФирмойСервер.ВыделитьСлово(ФИО);
			ДанныеФизЛица.Имя		= УправлениеНебольшойФирмойСервер.ВыделитьСлово(ФИО);
			ДанныеФизЛица.Отчество	= УправлениеНебольшойФирмойСервер.ВыделитьСлово(ФИО);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеФизЛица;
	
КонецФункции

#КонецОбласти

// Процедура вызывается при изменении статуса обработки документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - ссылка на документ,
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработки* - предыдущий статус обработки,
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработки* - новый статус обработки.
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса = Неопределено) Экспорт
	
	Возврат;
	
КонецПроцедуры

// В процедуре необходимо определить значения по умолчанию, которые будут подставляться в
// реквизиты не сопоставленных элементов справочника.
//
// Параметры:
//  СобственнаяОрганизация - ОпределяемыйТип.ОрганизацияКонтрагентВЕТИС - значение по умолчанию для собственной организации,
//  СторонняяОрганизация - ОпределяемыйТип.ОрганизацияКонтрагентВЕТИС - значение по умолчанию для сторонней организации.
//
Процедура ЗначенияПоУмолчаниюНеСопоставленныхОбъектов(СобственнаяОрганизация,
		                                              СобственныйТорговыйОбъект,
		                                              СобственныйПроизводственныйОбъект,
		                                              СторонняяОрганизация,
		                                              СтороннийТорговыйОбъект) Экспорт
	
	СобственнаяОрганизация            = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователи.ТекущийПользователь(),
		"ОсновнаяОрганизация");
		
	СобственныйТорговыйОбъект         = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователи.ТекущийПользователь(),
		"ОсновнойСклад");
		
	СобственныйПроизводственныйОбъект = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователи.ТекущийПользователь(),
		"ОсновноеПодразделение");
		
	СторонняяОрганизация              = Справочники.Контрагенты.ПустаяСсылка();
	СтороннийТорговыйОбъект           = Справочники.Контрагенты.ПустаяСсылка();
	
КонецПроцедуры

// Процедура формирования движений по регистру "Движения серий товаров".
//
// Параметры:
//	ДополнительныеСвойства - Структура - дополнительные свойства для записи движений 
//	Движения - КоллекцияДвижений - движения по которым двигается документ
//	Отказ - Булево - признак отказа от проведения документа
//
Процедура ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Получает данные транспортной накладной для входящей или исходящей транспортной операции по документу-основанию.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Ссылка на документ-основание транспортной операции.
// 
// Возвращаемое значение:
//  Структура - структура с данными транспортной накладной с полями:
//  * Номер — Строка, Неопределено — номер транспортной накладной. Неопределено, если транспортная накладная не найдена.
//  * Дата — Дата, Неопределено — дата транспортной накладной. Неопределено, если транспортная накладная не найдена.
//
Функция ДанныеТТНДляТранспортнойОперацииПоДокументуОснованию(ДокументОснование) Экспорт
	
	ДанныеТТН = Новый Структура("Номер, Дата");
	
	Если ДокументОснование.Метаданные().Имя = "ЗаказПокупателя" Тогда
		РеквизитДата = "Финиш";
	Иначе
		РеквизитДата = "Дата";
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(
		ДанныеТТН, 
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДокументОснование,
			"Номер, " + РеквизитДата));
	
	Возврат ДанныеТТН;
	
КонецФункции

#Область Отчеты

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
//
Процедура ДобавитьКомандуАнализРасхожденийПриПоступленииПродукцииВЕТИС(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.АнализРасхожденийПриПоступленииПродукцииВЕТИС) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Менеджер = Метаданные.Отчеты.АнализРасхожденийПриПоступленииПродукцииВЕТИС.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Расхождения при поступлении продукции ВЕТИС'");
		КомандаОтчет.МножественныйВыбор = Истина;
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "АнализРасхожденийПриПоступленииПродукцииВЕТИС");
		
		КомандаОтчет.ВидимостьВФормах = "ФормаДокумента";
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
//
Процедура ДобавитьКомандуАнализРасхожденийПриИнвентаризацииПродукцииВЕТИС(КомандыОтчетов) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ТабличнаяЧастьТовары

// Получить представление номенклатуры.
//
// Параметры:
//	Номенклатура				- ОпределяемыйТип.Номенклатура					- Ссылка на номенклатуру
//	ХарактеристикаНоменклатуры	- ОпределяемыйТип.ХарактеристикаНоменклатуры	- Ссылка на характеристику номенклатуры.
//	Упаковка					- ОпределяемыйТип.Упаковка						- Ссылка на упаковку.
//
// Возвращаемое значение:
//	Строка - Представление номенклатуры.
//
Функция ПредставлениеНоменклатуры(Номенклатура, ХарактеристикаНоменклатуры, Упаковка) Экспорт
	
	ПредставлениеНоменклатуры = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Номенклатура, ХарактеристикаНоменклатуры);
	
	Возврат ПредставлениеНоменклатуры;
	
КонецФункции

// Устанавливает параметры выбора номенклатуры.
//
// Параметры:
//	Форма			- УправляемаяФорма	- Форма, в которой нужно установить параметры выбора.
//	ИмяПоляВвода	- Строка			- Имя поля ввода номенклатуры.
//
Процедура УстановитьПараметрыВыбораНоменклатуры(Форма, ИмяПоляВвода = "ТоварыНоменклатура") Экспорт
	
	
	ПараметрыВыбора = ОбщегоНазначения.СкопироватьРекурсивно(Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора, Ложь);
	
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Запас));
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ПодконтрольнаяПродукцияВЕТИС", Истина));
	
	Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
	Возврат;
	
КонецПроцедуры

// Заполняет количество номенклатуры по количеству ВЕТИС.
//
// Параметры:
//	ТекущаяСтрока - Строка табличной части "Товары",
//	Суффикс       - Строка - Окончание наименования колонки, содержащей количество по данным ВЕТИС.
//
Процедура ЗаполнитьКоличествоНоменклатурыПоКоличествуВЕТИС(ТекущаяСтрока, Суффикс = "ВЕТИС") Экспорт
	
	ПересчитатьКоличествоЕдиницПоВЕТИС = Новый Структура("ЕдиницаИзмеренияВЕТИС, Суффикс");
	ЗаполнитьЗначенияСвойств(ПересчитатьКоличествоЕдиницПоВЕТИС, ТекущаяСтрока);
	ПересчитатьКоличествоЕдиницПоВЕТИС.Суффикс = Суффикс;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницПоВЕТИС", ПересчитатьКоличествоЕдиницПоВЕТИС);
	ИнтеграцияВЕТИСУНФ.ВыполнитьОперацииПриИзмененииРеквизитовФормы(, ТекущаяСтрока, Неопределено, СтруктураДействий);
	
КонецПроцедуры

// Заполняет статус указания серий и проверяет серию в строке 
// табличной части "Товары".
//
// Параметры:
//	ТекущаяСтрока  - Строка табличной части "Товары",
//	ДокументОбъект - Документ (объект).
//
Процедура ПроверитьСериюРассчитатьСтатус(ДокументОбъект, ТекущаяСтрока) Экспорт
	
	ИнтеграцияВЕТИСУНФВызовСервера.ПроверитьСериюРассчитатьСтатус(ДокументОбъект, ТекущаяСтрока);
	
КонецПроцедуры

// Заполняет идентификатор партии по данным серии в строке табличной части объекта.
//
// Параметры:
//	ТекущаяСтрока - ДанныеФормыЭлементКоллекции - Строка табличной части объекта.
//
Процедура ЗаполнитьИдентификаторПартии(ТекущаяСтрока, Серия = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Серия) Тогда
		ТекущаяСтрока.ИдентификаторПартии = ТекущаяСтрока.Серия.ИдентификаторПартииВЕТИС;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает связь элемента формы с полем ввода номенклатуры.
//
// Параметры:
//	Форма					- УправляемаяФорма	- Форма, в которой нужно установить связь.
//	ИмяПоляВвода			- Строка			- Имя поля, связываемого с номенклатурой.
//	ПутьКДаннымНоменклатуры	- Строка			- Путь к текущей номенклатуре в форме.
//
Процедура УстановитьСвязиПараметровВыбораСНоменклатурой(Форма,
														ИмяПоляВвода,
														ПутьКДаннымНоменклатуры = "Элементы.Товары.ТекущиеДанные.Номенклатура") Экспорт
	
	СвязиПараметровВыбораИсточник = Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора;
	
	СвязиПараметровВыбора = ОбщегоНазначения.СкопироватьРекурсивно(СвязиПараметровВыбораИсточник);
	СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Номенклатура", ПутьКДаннымНоменклатуры));
	
	Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
	Возврат;
	
КонецПроцедуры

// В функции требуется определить признак использования характеристик для номенклатуры.
//
// Параметры:
//	Номенклатура - ОпределяемыйТип.Номенклатура - Ссылка на элемент номенклатуры.
//
// Возвращаемое значение:
//	Булево - Признак использования характеристик.
//
Функция ПризнакИспользованияХарактеристик(Номенклатура) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Номенклатура.ИспользоватьХарактеристики;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Серии

// Возвращает текст запроса для движений по регистру накопления СерииНоменклатуры.
//
// Возвращаемое значение:
//	Строка - текст запроса.
//
Функция ТекстЗапросаДвижениеСерийТоваров(ИмяДокумента) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК Поле";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает структуру параметров заполнения серий.
//
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//		* ПараметрыУказанияСерий	- Структура				- Состав полей определен в функции 
//																НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//		* Склад						- ОпределяемыйТип.Склад	- Склад, на котором осуществляется серийный учет.
//
Функция ПараметрыЗаполненияСерий() Экспорт
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("ПараметрыУказанияСерий",	Неопределено);
	ПараметрыЗаполнения.Вставить("Склад",					Неопределено);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Заполняет свойство "Склад" в структуре параметров заполнения серий.
//
// Параметры:
//	Объект				- ДокументОбъект, ДанныеФормыКоллекция	- Объект, хранящий значение склада.
//	ПараметрыЗаполнения	- Структура								- Параметры заполнения серий.
//
Процедура ЗаполнитьПараметрЗаполненияСклад(Объект, ПараметрыЗаполнения) Экспорт
	
	ПараметрыУказанияСерий = ПараметрыЗаполнения.ПараметрыУказанияСерий;
	
	Если ПараметрыУказанияСерий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыУказанияСерий.ИмяПоляСклад)
		И ОбщегоНазначения.ЕстьРеквизитОбъекта(ПараметрыУказанияСерий.ИмяПоляСклад, Объект.Ссылка.Метаданные()) Тогда
		
		ПараметрыЗаполнения.Склад = Объект[ПараметрыУказанияСерий.ИмяПоляСклад];
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизит "Серия" в товарной табличной части.
//
// Параметры:
//	ТабличнаяЧасть		- ДанныеФормыКоллекция, ТабличнаяЧасть - Товарная табличная часть объекта.
//	ВыделенныеСтроки	- Массив	- Обрабатываемые строки таблицы.
//	ПараметрыЗаполнения	- Структура	- Состав полей определен в функции 
//										ИнтеграцияВЕТИСПереопределяемый.ПараметрыЗаполненияСерий.
//	СтруктураДействий	- Структура	- Структура с действиями, которые нужно произвести.
//
// Возвращаемое значение:
//	Структура - Результат генерации серий, состав полей которого определен в функции 
//				ИнтеграцияВЕТИСУТ.ЗаполнитьСгенерироватьСерии.
//
Функция ЗаполнитьСгенерироватьСерии(ТабличнаяЧастьТовары,
									ВыделенныеСтрокиТоваров,
									ПараметрыЗаполнения,
									ТабличнаяЧастьУточнения,
									СтруктураДействий) Экспорт
	
	Результат = ИнтеграцияВЕТИСУНФ.ЗаполнитьСгенерироватьСерии(ТабличнаяЧастьТовары,
									ВыделенныеСтрокиТоваров,
									ПараметрыЗаполнения,
									ТабличнаяЧастьУточнения,
									СтруктураДействий);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДокументОснованиеПроизводственнойОперации

Функция ПолучитьИдентификаторПроизводственнойТранзакцииПоДокументуОснования(ДокументОснования) Экспорт
	
	Результат = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ИдентификаторПроизводственнойТранзакцииВЕТИС");
	
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеПартииПроизводстваПоДокументуОснования(ДокументОснования) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторПроизводственнойТранзакции", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ИдентификаторПроизводственнойТранзакцииВЕТИС"));
	Результат.Вставить("ЗавершениеПроизводственнойТранзакции", Ложь);
	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция УказываетсяТранспортноеСредство() Экспорт
	Возврат Истина;
КонецФункции

// Функция определяет признак использования комиссии при продажах или производства из давальческого сырья.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево - Признак использования комиссии при продажах или производства из давальческого сырья.
//
Функция ИспользуетсяКомиссияИлиПереработка() Экспорт
	
	ЕстьКомиссияПереработка = Ложь;
	
	ЕстьКомиссияПереработка = ЕстьКомиссияПереработка ИЛИ ПолучитьФункциональнуюОпцию("ПередачаТоваровНаКомиссию");
	
	ЕстьКомиссияПереработка = ЕстьКомиссияПереработка ИЛИ ПолучитьФункциональнуюОпцию("ПереработкаДавальческогоСырья");
	
	Возврат ЕстьКомиссияПереработка;
	
КонецФункции

Функция РеквизитыТранспортногоСредства(ТранспортноеСредство) Экспорт
	
	Результат = Новый Структура("НомерТранспортногоСредства, НомерАвтомобильногоПрицепа", "", "");
	
	Если ЗначениеЗаполнено(ТранспортноеСредство) Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТранспортноеСредство, "Код");
		Результат.НомерТранспортногоСредства = ЗначенияРеквизитов.Код;
		Результат.НомерАвтомобильногоПрицепа = "";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Записывает соответствие между номенклатурой и продукцией ВЕТИС из табличной части документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ, содержащий табличную часть Товары.
//  ЗаписыватьЗаписьСкладскогоЖурнала - Булево - признак сопоставления по записи складского журнала.
//  СопоставлятьПоСерии - Булево - признак сопоставления по серии.
//
Процедура ЗаписатьСоответствиеНоменклатуры(ДокументОбъект, ЗаписыватьЗаписьСкладскогоЖурнала = Истина, СопоставлятьПоСерии = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КолонкиДляВыгрузки = "Продукция, Номенклатура, Характеристика";
	Если СопоставлятьПоСерии Тогда
		КолонкиДляВыгрузки = КолонкиДляВыгрузки + ", Серия";
	КонецЕсли;
	Если ЗаписыватьЗаписьСкладскогоЖурнала Тогда
		КолонкиДляВыгрузки = КолонкиДляВыгрузки + ", ЗаписьСкладскогоЖурнала";
	КонецЕсли;
	Данные = ДокументОбъект.Товары.Выгрузить(, КолонкиДляВыгрузки);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Продукция КАК Продукция,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	&ИмяКолонкиСерия КАК Серия,
	|	&ИмяКолонкиЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Продукция КАК Продукция,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Серия КАК Серия,
	|	Таблица.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	Сопоставлено.Продукция КАК Сопоставлено,
	|	МАКСИМУМ(ЕСТЬNULL(Сопоставлено.Порядок,ЕСТЬNULL(СопоставленоБЕЗСерии.Порядок,0))) КАК Порядок
	|ИЗ
	|	Таблица КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК Сопоставлено
	|		ПО Сопоставлено.Номенклатура = Таблица.Номенклатура
	|		 И Сопоставлено.Характеристика = Таблица.Характеристика
	|		 И Сопоставлено.ЗаписьСкладскогоЖурнала = Таблица.ЗаписьСкладскогоЖурнала
	|		 И Сопоставлено.Серия = Таблица.Серия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СопоставленоБЕЗСерии
	|		ПО СопоставленоБЕЗСерии.Номенклатура = Таблица.Номенклатура
	|		 И СопоставленоБЕЗСерии.Характеристика = Таблица.Характеристика
	|		 И СопоставленоБЕЗСерии.ЗаписьСкладскогоЖурнала = Таблица.ЗаписьСкладскогоЖурнала
	|ГДЕ
	|	Таблица.Продукция <> ЗНАЧЕНИЕ(Справочник.ПродукцияВЕТИС.ПустаяСсылка)
	|	И Таблица.Номенклатура <> &ПустаяСсылкаНоменклатура
	|	И (Сопоставлено.Продукция ЕСТЬ NULL
	|		ИЛИ Сопоставлено.Продукция <> Таблица.Продукция)
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Продукция,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Серия,
	|	Таблица.ЗаписьСкладскогоЖурнала,
	|	Сопоставлено.Продукция
	|");
	
	Запрос.УстановитьПараметр("Таблица", Данные);
	Запрос.УстановитьПараметр("ПустаяСсылкаНоменклатура", Метаданные.ОпределяемыеТипы.Номенклатура.Тип.ПривестиЗначение());
	Запрос.УстановитьПараметр("ПустаяЗаписьСкладскогоЖурнала", Справочники.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСерия", Метаданные.ОпределяемыеТипы.СерияНоменклатурыВЕТИС.Тип.ПривестиЗначение());
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ИмяКолонкиСерия",
		?(СопоставлятьПоСерии, "Т.Серия", "&ПустаяСерия"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ИмяКолонкиЗаписьСкладскогоЖурнала",
		?(ЗаписыватьЗаписьСкладскогоЖурнала, "Т.ЗаписьСкладскогоЖурнала", "&ПустаяЗаписьСкладскогоЖурнала"));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыВЕТИС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура, Истина);
		НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика, Истина);
		НаборЗаписей.Отбор.Серия.Установить(Выборка.Серия, Истина);
		НаборЗаписей.Отбор.Продукция.Установить(Выборка.Продукция, Истина);
		НаборЗаписей.Отбор.ЗаписьСкладскогоЖурнала.Установить(Выборка.ЗаписьСкладскогоЖурнала, Истина);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.Номенклатура            = Выборка.Номенклатура;
		НоваяЗапись.Характеристика          = Выборка.Характеристика;
		НоваяЗапись.Серия                   = Выборка.Серия;
		НоваяЗапись.Продукция               = Выборка.Продукция;
		НоваяЗапись.ЗаписьСкладскогоЖурнала = Выборка.ЗаписьСкладскогоЖурнала;
		НоваяЗапись.Порядок                 = Выборка.Порядок + 1;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			
			ТекстОшибки = НСтр("ru = 'При записи соответствия номенклатуры ВЕТИС произошла ошибка:
			                         |%1'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
			
			ИнтеграцияВЕТИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#Область УНФ

#Область ЗаполнениеДокументов

Процедура ЗаполнитьИсходящуюТранспортнуюОперациюВЕТИСНаОснованииРасходнойНакладной(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Основание.Ссылка КАК ДокументОснование,
	|	Основание.Номер КАК НомерТТН,
	|	Основание.Дата КАК ДатаТТН,
	|	НЕ Основание.Проведен КАК ЕстьОшибкиПроведен,
	|	Основание.Ответственный КАК Ответственный,
	|	Основание.Контрагент КАК Грузополучатель,
	|	Основание.Организация КАК Грузоотправитель,
	|	Основание.СтруктурнаяЕдиница КАК Склад
	|ИЗ
	|	Документ.РасходнаяНакладная КАК Основание
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	
	РеквизитыДокумента = Запрос.Выполнить().Выбрать();
	РеквизитыДокумента.Следующий();
	
	ЭтоПерезаполнение = ЗначениеЗаполнено(ДокументОбъект.Ссылка);
	
	Если Не ЭтоПерезаполнение Тогда
		
		Если РеквизитыДокумента.ЕстьОшибкиПроведен Тогда
		
			ТекстОшибки = НСтр("ru='Документ %Документ% не проведен. Ввод на основании непроведенного документа запрещен.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", РеквизитыДокумента.Ссылка);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
			
		ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыДокумента);
		ДокументОбъект.НомерТТН = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(РеквизитыДокумента.ДатаТТН, РеквизитыДокумента.НомерТТН, "");
		
		Грузоотправитель = Справочники.ХозяйствующиеСубъектыВЕТИС.ХозяйствующийСубъектИПредприятиеПоПрикладнымРеквизитам(РеквизитыДокумента.Грузоотправитель, РеквизитыДокумента.Склад);
		ДокументОбъект.ГрузоотправительХозяйствующийСубъект = Грузоотправитель.ХозяйствующийСубъект;
		ДокументОбъект.ГрузоотправительПредприятие          = Грузоотправитель.Предприятие;
		
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию Тогда
			//Для комиссии выполняется операция без перехода права собственности, по тому же хоз. субъекту
			ДокументОбъект.ГрузополучательХозяйствующийСубъект = Грузоотправитель.ХозяйствующийСубъект;
		Иначе
			ДокументОбъект.ГрузополучательХозяйствующийСубъект  = ИнтеграцияВЕТИСУНФВызовСервера.ХозяйствующийСубъектПоОрганизации(РеквизитыДокумента.Грузополучатель);
		КонецЕсли; 
		
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.УпаковкиВЕТИС.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОформленныеДокументы
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС КАК ТаблицаДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовВЕТИС КАК СтатусыДокументовВЕТИС
	|		ПО (СтатусыДокументовВЕТИС.Документ = ТаблицаДокументы.Ссылка)
	|ГДЕ
	|	ТаблицаДокументы.ДокументОснование = &ДокументОснование
	|	И ТаблицаДокументы.Ссылка <> &ЭтаСсылка
	|	И ТаблицаДокументы.Проведен
	|	И НЕ СтатусыДокументовВЕТИС.Статус В (&КонечныеСтатусы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Партия КАК Серия,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыСерии
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|	И СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыСерии.Номенклатура КАК Номенклатура,
	|	ТоварыСерии.Характеристика КАК Характеристика,
	|	ТоварыСерии.Серия КАК Серия,
	|	ТоварыСерии.Количество КАК Количество
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	ТоварыСерии КАК ТоварыСерии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	ОформленныеТовары.Серия,
	|	-ОформленныеТовары.Количество
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ссылка
	|			ИЗ
	|				ОформленныеДокументы КАК Т)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(СоответствиеНоменклатурыВЕТИС.Продукция, СоответствиеНоменклатурыВЕТИС2.Продукция)) КАК Продукция,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.Серия КАК Серия
	|ПОМЕСТИТЬ СопоставленыеПозиции
	|ИЗ
	|	ТоварыКОформлению КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС
	|		ПО (СоответствиеНоменклатурыВЕТИС.Номенклатура = ТабличнаяЧасть.Номенклатура)
	|			И (СоответствиеНоменклатурыВЕТИС.Характеристика = ТабличнаяЧасть.Характеристика)
	|			И (СоответствиеНоменклатурыВЕТИС.Серия = ТабличнаяЧасть.Серия)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС2
	|		ПО (СоответствиеНоменклатурыВЕТИС2.Номенклатура = ТабличнаяЧасть.Номенклатура)
	|			И (СоответствиеНоменклатурыВЕТИС2.Характеристика = ТабличнаяЧасть.Характеристика)
	|			И (СоответствиеНоменклатурыВЕТИС2.Серия = &ПустаяСерия)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Серия
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(СоответствиеНоменклатурыВЕТИС.Продукция, СоответствиеНоменклатурыВЕТИС2.Продукция)) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика КАК Характеристика,
	|	ТоварыКОформлению.Серия КАК Серия,
	|	СопоставленыеПозиции.Продукция КАК Продукция,
	|	ТоварыКОформлению.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
	|	ЗНАЧЕНИЕ(Перечисление.РезультатыЛабораторныхИсследованийВЕТИС.НеПодвергнутаВСЭ) КАК ЭкспертизаРезультат,
	|	""Местность благополучна по заразным болезням животных"" КАК БлагополучиеМестности,
	|	СУММА(ТоварыКОформлению.Количество) КАК КоличествоВЕТИС,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	СопоставленыеПозиции.Продукция.ФасовкаЕдиницаИзмерения КАК ЕдиницаИзмеренияВЕТИС
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|		ЛЕВОЕ СОЕДИНЕНИЕ СопоставленыеПозиции КАК СопоставленыеПозиции
	|		ПО (СопоставленыеПозиции.Номенклатура = ТоварыКОформлению.Номенклатура)
	|			И (СопоставленыеПозиции.Характеристика = ТоварыКОформлению.Характеристика)
	|			И (СопоставленыеПозиции.Серия = ТоварыКОформлению.Серия)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия,
	|	СопоставленыеПозиции.Продукция,
	|	ТоварыКОформлению.Номенклатура.ЕдиницаИзмерения,
	|	СопоставленыеПозиции.Продукция.ФасовкаЕдиницаИзмерения
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0";
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.ИсходящаяТранспортнаяОперацияВЕТИС.КонечныеСтатусы());
	Запрос.УстановитьПараметр("ПустаяСерия",       Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип.ПривестиЗначение());
	
	КолонкиКоличествоВЕТИС = Новый Структура;
	КолонкиКоличествоВЕТИС.Вставить("Количество","КоличествоВЕТИС");
	
	ИнтеграцияВЕТИСУНФ.ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Запрос.Выполнить(), ДанныеЗаполнения, КолонкиКоличествоВЕТИС);
	
	МассивСтрок = Новый Массив;
	Для каждого СтрокаТоваров Из ДокументОбъект.Товары Цикл
		МассивСтрок.Добавить(СтрокаТоваров);
	КонецЦикла;
	
	Документы.ИсходящаяТранспортнаяОперацияВЕТИС.ЗаполнитьЗаписиСкладскогоЖурнала(ДокументОбъект, МассивСтрок);
	
КонецПроцедуры

Процедура ЗаполнитьИсходящуюТранспортнуюОперациюВЕТИСНаОснованииЗаказаПокупателя(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Основание.Ссылка КАК ДокументОснование,
	|	Основание.Номер КАК НомерТТН,
	|	Основание.Дата КАК ДатаТТН,
	|	НЕ Основание.Проведен КАК ЕстьОшибкиПроведен,
	|	Основание.Ответственный КАК Ответственный,
	|	Основание.Контрагент КАК Грузополучатель,
	|	Основание.Организация КАК Грузоотправитель,
	|	Основание.СтруктурнаяЕдиницаПродажи КАК Склад,
	|	Основание.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд) КАК ЭтоЗаказНаряд,
	|	Основание.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен) КАК Отменен,
	|	ВидыЗаказНарядовПорядокСостояний.НомерСтроки >= ВЫРАЗИТЬ(Основание.ВидЗаказа КАК Справочник.ВидыЗаказНарядов).НомерСостоянияВыполнения КАК ЭтоСостояниеВыполненияЗаказНаряда
	|ИЗ
	|	Документ.ЗаказПокупателя КАК Основание
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЗаказНарядов.ПорядокСостояний КАК ВидыЗаказНарядовПорядокСостояний
	|		ПО Основание.ВидЗаказа = ВидыЗаказНарядовПорядокСостояний.Ссылка
	|			И Основание.СостояниеЗаказа = ВидыЗаказНарядовПорядокСостояний.Состояние
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	
	РеквизитыДокумента = Запрос.Выполнить().Выбрать();
	РеквизитыДокумента.Следующий();
	
	ЭтоПерезаполнение = ЗначениеЗаполнено(ДокументОбъект.Ссылка);
	
	Если Не ЭтоПерезаполнение Тогда
		
		Если РеквизитыДокумента.ЕстьОшибкиПроведен Тогда
			
			ТекстОшибки = НСтр("ru='Документ %Документ% не проведен. Ввод на основании непроведенного документа запрещен.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", РеквизитыДокумента.Ссылка);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
		Если Не РеквизитыДокумента.ЭтоЗаказНаряд Тогда
			
			ТекстОшибки = НСтр("ru='Ввод на основании заказа покупателя запрещен.'");
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
		Если РеквизитыДокумента.Отменен Тогда
			
			ТекстОшибки = НСтр("ru='Документ %Документ% отменен. Ввод на основании отмененного документа запрещен.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", РеквизитыДокумента.Ссылка);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
		Если Не РеквизитыДокумента.ЭтоСостояниеВыполненияЗаказНаряда Тогда
			
			ТекстОшибки = НСтр("ru='Ввод возможен только на основании выполненного заказ-наряда.'");
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыДокумента);
		
		Грузоотправитель = Справочники.ХозяйствующиеСубъектыВЕТИС.ХозяйствующийСубъектИПредприятиеПоПрикладнымРеквизитам(РеквизитыДокумента.Грузоотправитель, РеквизитыДокумента.Склад);
		ДокументОбъект.ГрузоотправительХозяйствующийСубъект = Грузоотправитель.ХозяйствующийСубъект;
		ДокументОбъект.ГрузоотправительПредприятие          = Грузоотправитель.Предприятие;
		Грузополучатель = Справочники.ХозяйствующиеСубъектыВЕТИС.ХозяйствующийСубъектИПредприятиеПоПрикладнымРеквизитам(РеквизитыДокумента.Грузополучатель, РеквизитыДокумента.Склад);
		ДокументОбъект.ГрузополучательХозяйствующийСубъект  = Грузополучатель.ХозяйствующийСубъект;
		ДокументОбъект.ГрузополучательПредприятие           = Грузополучатель.Предприятие;
		
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.УпаковкиВЕТИС.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОформленныеДокументы
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС КАК ТаблицаДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовВЕТИС КАК СтатусыДокументовВЕТИС
	|		ПО СтатусыДокументовВЕТИС.Документ = ТаблицаДокументы.Ссылка
	|ГДЕ
	|	ТаблицаДокументы.ДокументОснование = &ДокументОснование
	|	И ТаблицаДокументы.Ссылка <> &ЭтаСсылка
	|	И ТаблицаДокументы.Проведен
	|	И СтатусыДокументовВЕТИС.Статус Не В(&КонечныеСтатусы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура                                КАК Номенклатура,
	|	Товары.Характеристика                              КАК Характеристика,
	|	Товары.Партия                                      КАК Серия,
	|	СУММА(Товары.Количество)                           КАК Количество
	|ПОМЕСТИТЬ ТоварыСерии
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|	И СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыСерии.Номенклатура          КАК Номенклатура,
	|	ТоварыСерии.Характеристика        КАК Характеристика,
	|	ТоварыСерии.Серия                 КАК Серия,
	|	ТоварыСерии.Количество            КАК Количество
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	ТоварыСерии КАК ТоварыСерии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура          КАК Номенклатура,
	|	ОформленныеТовары.Характеристика        КАК Характеристика,
	|	ОформленныеТовары.Серия                 КАК Серия,
	|	-ОформленныеТовары.Количество           КАК Количество
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка В (ВЫБРАТЬ Т.Ссылка Из ОформленныеДокументы КАК Т)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(СоответствиеНоменклатурыВЕТИС.Продукция,СоответствиеНоменклатурыВЕТИС2.Продукция)) КАК Продукция,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.Серия КАК Серия
	|ПОМЕСТИТЬ СопоставленыеПозиции
	|ИЗ
	|	ТоварыКОформлению КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС
	|		ПО СоответствиеНоменклатурыВЕТИС.Номенклатура = ТабличнаяЧасть.Номенклатура
	|			И СоответствиеНоменклатурыВЕТИС.Характеристика = ТабличнаяЧасть.Характеристика
	|			И (СоответствиеНоменклатурыВЕТИС.Серия = ТабличнаяЧасть.Серия)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС2
	|		ПО СоответствиеНоменклатурыВЕТИС2.Номенклатура = ТабличнаяЧасть.Номенклатура
	|			И СоответствиеНоменклатурыВЕТИС2.Характеристика = ТабличнаяЧасть.Характеристика
	|			И (СоответствиеНоменклатурыВЕТИС2.Серия = &ПустаяСерия)
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Серия
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(СоответствиеНоменклатурыВЕТИС.Продукция,СоответствиеНоменклатурыВЕТИС2.Продукция)) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура            КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика          КАК Характеристика,
	|	ТоварыКОформлению.Серия                   КАК Серия,
	|	СопоставленыеПозиции.Продукция            КАК Продукция,
	|	ТоварыКОформлению.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
	|	ЗНАЧЕНИЕ(Перечисление.РезультатыЛабораторныхИсследованийВЕТИС.НеПодвергнутаВСЭ) КАК ЭкспертизаРезультат,
	|	""Местность благополучна по заразным болезням животных"" КАК БлагополучиеМестности,
	|	СУММА(ТоварыКОформлению.Количество)       КАК КоличествоВЕТИС,
	|	СУММА(ТоварыКОформлению.Количество)       КАК Количество,
	|	СопоставленыеПозиции.Продукция.ФасовкаЕдиницаИзмерения КАК ЕдиницаИзмеренияВЕТИС
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|		ЛЕВОЕ СОЕДИНЕНИЕ СопоставленыеПозиции КАК СопоставленыеПозиции
	|		ПО СопоставленыеПозиции.Номенклатура = ТоварыКОформлению.Номенклатура
	|			И СопоставленыеПозиции.Характеристика = ТоварыКОформлению.Характеристика
	|			И СопоставленыеПозиции.Серия = ТоварыКОформлению.Серия
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия,
	|	СопоставленыеПозиции.Продукция
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|";
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.ИсходящаяТранспортнаяОперацияВЕТИС.КонечныеСтатусы());
	Запрос.УстановитьПараметр("ПустаяСерия",       Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип.ПривестиЗначение());
	
	КолонкиКоличествоВЕТИС = Новый Структура;
	КолонкиКоличествоВЕТИС.Вставить("Количество","КоличествоВЕТИС");
	
	ИнтеграцияВЕТИСУНФ.ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Запрос.Выполнить(), ДанныеЗаполнения, КолонкиКоличествоВЕТИС);
	
КонецПроцедуры

Процедура ЗаполнитьИсходящуюТранспортнуюОперациюВЕТИСНаОснованииПеремещенияЗапасов(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПеремещениеЗапасов.Ссылка КАК ДокументОснование,
	|	ПеремещениеЗапасов.Номер КАК НомерТТН,
	|	ПеремещениеЗапасов.Дата КАК ДатаТТН,
	|	НЕ ПеремещениеЗапасов.Проведен КАК ЕстьОшибкиПроведен,
	|	ПеремещениеЗапасов.Организация КАК Организация,
	|	ПеремещениеЗапасов.Организация КАК ОрганизацияПолучатель,
	|	ПеремещениеЗапасов.СтруктурнаяЕдиница КАК СкладОтправитель,
	|	ПеремещениеЗапасов.СтруктурнаяЕдиницаПолучатель КАК СкладПолучатель,
	|	ПеремещениеЗапасов.Автор КАК Ответственный
	|ИЗ
	|	Документ.ПеремещениеЗапасов КАК ПеремещениеЗапасов
	|ГДЕ
	|	ПеремещениеЗапасов.Ссылка = &ДокументОснование");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	
	РеквизитыДокумента = Запрос.Выполнить().Выбрать();
	РеквизитыДокумента.Следующий();
	
	ЭтоПерезаполнение = ЗначениеЗаполнено(ДокументОбъект.Ссылка);
	
	Если Не ЭтоПерезаполнение Тогда
		
		Если РеквизитыДокумента.ЕстьОшибкиПроведен Тогда
			
			ТекстОшибки = НСтр("ru='Документ %Документ% не проведен. Ввод на основании непроведенного документа запрещен.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", РеквизитыДокумента.Ссылка);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
			
		ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыДокумента);
		
		Грузоотправитель = Справочники.ХозяйствующиеСубъектыВЕТИС.ХозяйствующийСубъектИПредприятиеПоПрикладнымРеквизитам(РеквизитыДокумента.Организация, РеквизитыДокумента.СкладОтправитель);
		ДокументОбъект.ГрузоотправительХозяйствующийСубъект = Грузоотправитель.ХозяйствующийСубъект;
		ДокументОбъект.ГрузоотправительПредприятие          = Грузоотправитель.Предприятие;
		Грузополучатель = Справочники.ХозяйствующиеСубъектыВЕТИС.ХозяйствующийСубъектИПредприятиеПоПрикладнымРеквизитам(РеквизитыДокумента.ОрганизацияПолучатель, РеквизитыДокумента.СкладПолучатель);
		ДокументОбъект.ГрузополучательХозяйствующийСубъект  = Грузополучатель.ХозяйствующийСубъект;
		ДокументОбъект.ГрузополучательПредприятие           = Грузополучатель.Предприятие;
		
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.УпаковкиВЕТИС.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОформленныеДокументы
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС КАК ТаблицаДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовВЕТИС КАК СтатусыДокументовВЕТИС
	|		ПО (СтатусыДокументовВЕТИС.Документ = ТаблицаДокументы.Ссылка)
	|ГДЕ
	|	ТаблицаДокументы.ДокументОснование = &ДокументОснование
	|	И ТаблицаДокументы.Ссылка <> &ЭтаСсылка
	|	И ТаблицаДокументы.Проведен
	|	И НЕ СтатусыДокументовВЕТИС.Статус В (&КонечныеСтатусы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.Партия КАК Серия,
	|	ТабличнаяЧасть.Количество КАК Количество
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	Документ.ПеремещениеЗапасов.Запасы КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТабличнаяЧасть.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &ДокументОснование
	|	И СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	ОформленныеТовары.Серия,
	|	-ОформленныеТовары.Количество
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ссылка
	|			ИЗ
	|				ОформленныеДокументы КАК Т)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(СоответствиеНоменклатурыВЕТИС.Продукция, СоответствиеНоменклатурыВЕТИС2.Продукция)) КАК Продукция,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.Серия КАК Серия
	|ПОМЕСТИТЬ СопоставленыеПозиции
	|ИЗ
	|	ТоварыКОформлению КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС
	|		ПО (СоответствиеНоменклатурыВЕТИС.Номенклатура = ТабличнаяЧасть.Номенклатура)
	|			И (СоответствиеНоменклатурыВЕТИС.Характеристика = ТабличнаяЧасть.Характеристика)
	|			И (СоответствиеНоменклатурыВЕТИС.Серия = ТабличнаяЧасть.Серия)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС2
	|		ПО (СоответствиеНоменклатурыВЕТИС2.Номенклатура = ТабличнаяЧасть.Номенклатура)
	|			И (СоответствиеНоменклатурыВЕТИС2.Характеристика = ТабличнаяЧасть.Характеристика)
	|			И (СоответствиеНоменклатурыВЕТИС2.Серия = &ПустаяСерия)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Серия
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(СоответствиеНоменклатурыВЕТИС.Продукция, СоответствиеНоменклатурыВЕТИС2.Продукция)) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика КАК Характеристика,
	|	ТоварыКОформлению.Серия КАК Серия,
	|	СопоставленыеПозиции.Продукция КАК Продукция,
	|	ТоварыКОформлению.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
	|	ЗНАЧЕНИЕ(Перечисление.РезультатыЛабораторныхИсследованийВЕТИС.НеПодвергнутаВСЭ) КАК ЭкспертизаРезультат,
	|	""Местность благополучна по заразным болезням животных"" КАК БлагополучиеМестности,
	|	СУММА(ТоварыКОформлению.Количество) КАК КоличествоВЕТИС,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	СопоставленыеПозиции.Продукция.ФасовкаЕдиницаИзмерения КАК ЕдиницаИзмеренияВЕТИС
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|		ЛЕВОЕ СОЕДИНЕНИЕ СопоставленыеПозиции КАК СопоставленыеПозиции
	|		ПО (СопоставленыеПозиции.Номенклатура = ТоварыКОформлению.Номенклатура)
	|			И (СопоставленыеПозиции.Характеристика = ТоварыКОформлению.Характеристика)
	|			И (СопоставленыеПозиции.Серия = ТоварыКОформлению.Серия)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия,
	|	СопоставленыеПозиции.Продукция,
	|	ТоварыКОформлению.Номенклатура.ЕдиницаИзмерения
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0";
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.ИсходящаяТранспортнаяОперацияВЕТИС.КонечныеСтатусы());
	Запрос.УстановитьПараметр("ПустаяСерия",       Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип.ПривестиЗначение());
	
	КолонкиКоличествоВЕТИС = Новый Структура;
	КолонкиКоличествоВЕТИС.Вставить("Количество","КоличествоВЕТИС");
	
	ИнтеграцияВЕТИСУНФ.ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Запрос.Выполнить(), ДанныеЗаполнения, КолонкиКоличествоВЕТИС);
	
КонецПроцедуры

Процедура ЗаполнитьИсходящуюТранспортнуюОперациюВЕТИСНаОснованииОтчетаОПереработке(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Основание.Ссылка КАК ДокументОснование,
	|	Основание.Номер КАК НомерТТН,
	|	Основание.Дата КАК ДатаТТН,
	|	НЕ Основание.Проведен КАК ЕстьОшибкиПроведен,
	|	Основание.Ответственный КАК Ответственный,
	|	Основание.Контрагент КАК Грузополучатель,
	|	Основание.Организация КАК Грузоотправитель,
	|	Основание.СтруктурнаяЕдиница КАК Склад
	|ИЗ
	|	Документ.ОтчетОПереработке КАК Основание
	|ГДЕ
	|	Основание.Ссылка = &ДокументОснование");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	
	РеквизитыДокумента = Запрос.Выполнить().Выбрать();
	РеквизитыДокумента.Следующий();
	
	ЭтоПерезаполнение = ЗначениеЗаполнено(ДокументОбъект.Ссылка);
	
	Если Не ЭтоПерезаполнение Тогда
		
		Если РеквизитыДокумента.ЕстьОшибкиПроведен Тогда
		
			ТекстОшибки = НСтр("ru='Документ %Документ% не проведен. Ввод на основании непроведенного документа запрещен.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", РеквизитыДокумента.Ссылка);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
			
		ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыДокумента);
		
		ДокументОбъект.НомерТТН = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(РеквизитыДокумента.ДатаТТН, РеквизитыДокумента.НомерТТН, ""); 
		
		Грузоотправитель = Справочники.ХозяйствующиеСубъектыВЕТИС.ХозяйствующийСубъектИПредприятиеПоПрикладнымРеквизитам(РеквизитыДокумента.Грузоотправитель, РеквизитыДокумента.Склад);
		ДокументОбъект.ГрузоотправительХозяйствующийСубъект = Грузоотправитель.ХозяйствующийСубъект;
		ДокументОбъект.ГрузоотправительПредприятие          = Грузоотправитель.Предприятие;
		
		ДокументОбъект.ГрузополучательХозяйствующийСубъект = Грузоотправитель.ХозяйствующийСубъект;
		
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.УпаковкиВЕТИС.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОформленныеДокументы
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС КАК ТаблицаДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовВЕТИС КАК СтатусыДокументовВЕТИС
	|		ПО (СтатусыДокументовВЕТИС.Документ = ТаблицаДокументы.Ссылка)
	|ГДЕ
	|	ТаблицаДокументы.ДокументОснование = &ДокументОснование
	|	И ТаблицаДокументы.Ссылка <> &ЭтаСсылка
	|	И ТаблицаДокументы.Проведен
	|	И НЕ СтатусыДокументовВЕТИС.Статус В (&КонечныеСтатусы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Партия КАК Серия,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыСерии
	|ИЗ
	|	Документ.ОтчетОПереработке.Продукция КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|	И СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыСерии.Номенклатура КАК Номенклатура,
	|	ТоварыСерии.Характеристика КАК Характеристика,
	|	ТоварыСерии.Серия КАК Серия,
	|	ТоварыСерии.Количество КАК Количество
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	ТоварыСерии КАК ТоварыСерии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	ОформленныеТовары.Серия,
	|	-ОформленныеТовары.Количество
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ссылка
	|			ИЗ
	|				ОформленныеДокументы КАК Т)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(СоответствиеНоменклатурыВЕТИС.Продукция, СоответствиеНоменклатурыВЕТИС2.Продукция)) КАК Продукция,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.Серия КАК Серия
	|ПОМЕСТИТЬ СопоставленыеПозиции
	|ИЗ
	|	ТоварыКОформлению КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС
	|		ПО (СоответствиеНоменклатурыВЕТИС.Номенклатура = ТабличнаяЧасть.Номенклатура)
	|			И (СоответствиеНоменклатурыВЕТИС.Характеристика = ТабличнаяЧасть.Характеристика)
	|			И (СоответствиеНоменклатурыВЕТИС.Серия = ТабличнаяЧасть.Серия)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС2
	|		ПО (СоответствиеНоменклатурыВЕТИС2.Номенклатура = ТабличнаяЧасть.Номенклатура)
	|			И (СоответствиеНоменклатурыВЕТИС2.Характеристика = ТабличнаяЧасть.Характеристика)
	|			И (СоответствиеНоменклатурыВЕТИС2.Серия = &ПустаяСерия)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Серия
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(СоответствиеНоменклатурыВЕТИС.Продукция, СоответствиеНоменклатурыВЕТИС2.Продукция)) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика КАК Характеристика,
	|	ТоварыКОформлению.Серия КАК Серия,
	|	СопоставленыеПозиции.Продукция КАК Продукция,
	|	ТоварыКОформлению.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
	|	ЗНАЧЕНИЕ(Перечисление.РезультатыЛабораторныхИсследованийВЕТИС.НеПодвергнутаВСЭ) КАК ЭкспертизаРезультат,
	|	""Местность благополучна по заразным болезням животных"" КАК БлагополучиеМестности,
	|	СУММА(ТоварыКОформлению.Количество) КАК КоличествоВЕТИС,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	СопоставленыеПозиции.Продукция.ФасовкаЕдиницаИзмерения КАК ЕдиницаИзмеренияВЕТИС
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|		ЛЕВОЕ СОЕДИНЕНИЕ СопоставленыеПозиции КАК СопоставленыеПозиции
	|		ПО (СопоставленыеПозиции.Номенклатура = ТоварыКОформлению.Номенклатура)
	|			И (СопоставленыеПозиции.Характеристика = ТоварыКОформлению.Характеристика)
	|			И (СопоставленыеПозиции.Серия = ТоварыКОформлению.Серия)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия,
	|	СопоставленыеПозиции.Продукция,
	|	ТоварыКОформлению.Номенклатура.ЕдиницаИзмерения,
	|	СопоставленыеПозиции.Продукция.ФасовкаЕдиницаИзмерения
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0";
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.ИсходящаяТранспортнаяОперацияВЕТИС.КонечныеСтатусы());
	Запрос.УстановитьПараметр("ПустаяСерия",       Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип.ПривестиЗначение());
	
	КолонкиКоличествоВЕТИС = Новый Структура;
	КолонкиКоличествоВЕТИС.Вставить("Количество","КоличествоВЕТИС");
	
	ИнтеграцияВЕТИСУНФ.ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Запрос.Выполнить(), ДанныеЗаполнения, КолонкиКоличествоВЕТИС);
	
	МассивСтрок = Новый Массив;
	Для каждого СтрокаТоваров Из ДокументОбъект.Товары Цикл
		МассивСтрок.Добавить(СтрокаТоваров);
	КонецЦикла;
	
	Документы.ИсходящаяТранспортнаяОперацияВЕТИС.ЗаполнитьЗаписиСкладскогоЖурнала(ДокументОбъект, МассивСтрок);
	
КонецПроцедуры

Процедура ЗаполнитьИнвентаризациюПродукцииВЕТИСНаОснованииСписанияЗапасов(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК ДокументОснование,
	|	Документ.Номер КАК НомерАктаНесоответствия,
	|	Документ.Дата КАК ДатаАктаНесоответствия,
	|	НЕ Документ.Проведен КАК ЕстьОшибкиПроведен,
	|	Документ.Автор КАК Ответственный,
	|	Документ.Организация КАК Организация,
	|	Документ.СтруктурнаяЕдиница КАК ТорговыйОбъект
	|ИЗ
	|	Документ.СписаниеЗапасов КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуИнвентаризацииПродукции(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	ТекстТоварыДокумента = 
	"
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Партия КАК Серия,
	|	-СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыСерии
	|ИЗ
	|	Документ.СписаниеЗапасов.Запасы КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|	И СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Партия
	|;
	|";
	
	ЗаполнитьТабличнуюЧастьИнвентаризацииПродукции(ДокументОбъект, ДанныеЗаполнения, ТекстТоварыДокумента, -1);
	
КонецПроцедуры

Процедура ЗаполнитьИнвентаризациюПродукцииВЕТИСНаОснованииРаспределенияЗатрат(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК ДокументОснование,
	|	Документ.Номер КАК НомерАктаНесоответствия,
	|	Документ.Дата КАК ДатаАктаНесоответствия,
	|	НЕ Документ.Проведен КАК ЕстьОшибкиПроведен,
	|	Документ.Автор КАК Ответственный,
	|	Документ.Организация КАК Организация,
	|	Документ.СтруктурнаяЕдиница КАК ТорговыйОбъект
	|ИЗ
	|	Документ.РаспределениеЗатрат КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуИнвентаризацииПродукции(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	ТекстТоварыДокумента = 
	"
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Партия КАК Серия,
	|	-СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыСерии
	|ИЗ
	|	Документ.РаспределениеЗатрат.Запасы КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|	И СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Партия
	|;
	|";
	
	ЗаполнитьТабличнуюЧастьИнвентаризацииПродукции(ДокументОбъект, ДанныеЗаполнения, ТекстТоварыДокумента, -1);
	
КонецПроцедуры

Процедура ЗаполнитьШапкуИнвентаризацииПродукции(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	
	РеквизитыДокумента = Запрос.Выполнить().Выбрать();
	РеквизитыДокумента.Следующий();
	
	ЭтоПерезаполнение = ЗначениеЗаполнено(ДокументОбъект.Ссылка);
	
	Если Не ЭтоПерезаполнение Тогда
		
		Если РеквизитыДокумента.ЕстьОшибкиПроведен Тогда
			
			ТекстОшибки = НСтр("ru='Документ %Документ% не проведен. Ввод на основании непроведенного документа запрещен.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", РеквизитыДокумента.ДокументОснование);
		
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыДокумента);
		
		РеквизитыВЕТИС = Справочники.ХозяйствующиеСубъектыВЕТИС.ХозяйствующийСубъектИПредприятиеПоПрикладнымРеквизитам(
			РеквизитыДокумента.Организация, РеквизитыДокумента.ТорговыйОбъект);
		ЗаполнитьЗначенияСвойств(ДокументОбъект,РеквизитыВЕТИС);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьИнвентаризацииПродукции(ДокументОбъект, ДанныеЗаполнения, ТекстТоварыДокумента, ДопустимыйЗнак)
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.УпаковкиВЕТИС.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияИнвентаризацииПродукцииИзПрикладногоДокумента(ТекстТоварыДокумента, ДопустимыйЗнак);
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.ИнвентаризацияПродукцииВЕТИС.КонечныеСтатусы());
	Запрос.УстановитьПараметр("ПустаяСерия",       Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип.ПривестиЗначение());
	
	КолонкиКоличестваВЕТИС = Новый Структура;
	КолонкиКоличестваВЕТИС.Вставить("КоличествоИзменение","КоличествоИзменениеВЕТИС");
	
	ИнтеграцияВЕТИСУНФ.ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Запрос.Выполнить(), ДанныеЗаполнения, КолонкиКоличестваВЕТИС);
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияИнвентаризацииПродукцииИзПрикладногоДокумента(ТекстТоварыДокумента, ДопустимыйЗнак)
	
	Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОформленныеДокументы
	|ИЗ
	|	Документ.ИнвентаризацияПродукцииВЕТИС КАК ТаблицаДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовВЕТИС КАК СтатусыДокументовВЕТИС
	|		ПО СтатусыДокументовВЕТИС.Документ = ТаблицаДокументы.Ссылка
	|ГДЕ
	|	ТаблицаДокументы.ДокументОснование = &ДокументОснование
	|	И ТаблицаДокументы.Ссылка <> &ЭтаСсылка
	|	И ТаблицаДокументы.Проведен
	|	И СтатусыДокументовВЕТИС.Статус НЕ В(&КонечныеСтатусы)
	|;
	|"
	+
	ТекстТоварыДокумента
	+
	"
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыСерии.Номенклатура                    КАК Номенклатура,
	|	ТоварыСерии.Характеристика                  КАК Характеристика,
	|	ТоварыСерии.Серия                           КАК Серия,
	|	ТоварыСерии.Количество                      КАК Количество
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	ТоварыСерии КАК ТоварыСерии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура              КАК Номенклатура,
	|	ОформленныеТовары.Характеристика            КАК Характеристика,
	|	ОформленныеТовары.Серия                     КАК Серия,
	|	-ОформленныеТовары.КоличествоИзменение      КАК Количество
	|ИЗ
	|	Документ.ИнвентаризацияПродукцииВЕТИС.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка В (ВЫБРАТЬ Т.Ссылка ИЗ ОформленныеДокументы КАК Т)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(СоответствиеНоменклатурыВЕТИС.Продукция,СоответствиеНоменклатурыВЕТИС2.Продукция)) КАК Продукция,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.Серия КАК Серия
	|ПОМЕСТИТЬ СопоставленыеПозиции
	|ИЗ
	|	ТоварыКОформлению КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС
	|		ПО СоответствиеНоменклатурыВЕТИС.Номенклатура = ТабличнаяЧасть.Номенклатура
	|			И СоответствиеНоменклатурыВЕТИС.Характеристика = ТабличнаяЧасть.Характеристика
	|			И (СоответствиеНоменклатурыВЕТИС.Серия = ТабличнаяЧасть.Серия)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС2
	|		ПО СоответствиеНоменклатурыВЕТИС2.Номенклатура = ТабличнаяЧасть.Номенклатура
	|			И СоответствиеНоменклатурыВЕТИС2.Характеристика = ТабличнаяЧасть.Характеристика
	|			И (СоответствиеНоменклатурыВЕТИС2.Серия = &ПустаяСерия)
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Серия
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(СоответствиеНоменклатурыВЕТИС.Продукция,СоответствиеНоменклатурыВЕТИС2.Продукция)) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура                                        КАК Номенклатура,
	|	ТоварыКОформлению.Номенклатура.ЕдиницаИзмерения                       КАК Упаковка,
	|	ТоварыКОформлению.Характеристика                                      КАК Характеристика,
	|	ТоварыКОформлению.Серия                                               КАК Серия,
	|	СопоставленыеПозиции.Продукция                                        КАК Продукция,
	|	СУММА(ТоварыКОформлению.Количество)                                   КАК КоличествоИзменение,
	|	СУММА(ТоварыКОформлению.Количество)                                   КАК КоличествоИзменениеВЕТИС,
	|	ВЫБОР
	|		КОГДА СУММА(ТоварыКОформлению.Количество) > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Добавление)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Изменение)
	|	КОНЕЦ                               КАК Операция
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|		ЛЕВОЕ СОЕДИНЕНИЕ СопоставленыеПозиции КАК СопоставленыеПозиции
	|		ПО СопоставленыеПозиции.Номенклатура = ТоварыКОформлению.Номенклатура
	|			И СопоставленыеПозиции.Характеристика = ТоварыКОформлению.Характеристика
	|			И СопоставленыеПозиции.Серия = ТоварыКОформлению.Серия
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия,
	|	СопоставленыеПозиции.Продукция
	|ИМЕЮЩИЕ ДопустимыйЗнак
	|";
	Если ДопустимыйЗнак = -1 Тогда
		Текст = СтрЗаменить(Текст, "ДопустимыйЗнак", "СУММА(ТоварыКОформлению.Количество)<0");
	ИначеЕсли ДопустимыйЗнак = 1 Тогда
		Текст = СтрЗаменить(Текст, "ДопустимыйЗнак", "СУММА(ТоварыКОформлению.Количество)>0");
	Иначе
		Текст = СтрЗаменить(Текст, "ДопустимыйЗнак", "СУММА(ТоварыКОформлению.Количество)<>0");
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

Процедура ЗаполнитьИнвентаризациюПродукцииВЕТИСНаОснованииОприходованияЗапасов(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК ДокументОснование,
	|	Документ.Номер КАК НомерАктаНесоответствия,
	|	Документ.Дата КАК ДатаАктаНесоответствия,
	|	НЕ Документ.Проведен КАК ЕстьОшибкиПроведен,
	|	Документ.Автор КАК Ответственный,
	|	Документ.Организация КАК Организация,
	|	Документ.СтруктурнаяЕдиница КАК ТорговыйОбъект
	|ИЗ
	|	Документ.ОприходованиеЗапасов КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуИнвентаризацииПродукции(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	ТекстТоварыДокумента =
	"
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Партия КАК Серия,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыСерии
	|ИЗ
	|	Документ.ОприходованиеЗапасов.Запасы КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|	И СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Партия
	|;
	|";
	
	ЗаполнитьТабличнуюЧастьИнвентаризацииПродукции(ДокументОбъект, ДанныеЗаполнения, ТекстТоварыДокумента, 1);
	
КонецПроцедуры

Процедура ЗаполнитьИнвентаризациюПродукцииВЕТИСНаОснованииПересортицыЗапасов(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК ДокументОснование,
	|	Документ.Номер КАК НомерАктаНесоответствия,
	|	Документ.Дата КАК ДатаАктаНесоответствия,
	|	НЕ Документ.Проведен КАК ЕстьОшибкиПроведен,
	|	Документ.Автор КАК Ответственный,
	|	Документ.Организация КАК Организация,
	|	Документ.СтруктурнаяЕдиница КАК ТорговыйОбъект
	|ИЗ
	|	Документ.ПересортицаЗапасов КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуИнвентаризацииПродукции(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	ТекстТоварыДокумента =
	"
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Партия КАК Серия,
	|	-СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыСерии
	|ИЗ
	|	Документ.ПересортицаЗапасов.Запасы КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|	И СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.НоменклатураОприходование,
	|	Товары.ХарактеристикаОприходование,
	|	Товары.ПартияОприходование,
	|	СУММА(Товары.Количество)
	|ИЗ
	|	Документ.ПересортицаЗапасов.Запасы КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.НоменклатураОприходование = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|	И СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.НоменклатураОприходование,
	|	Товары.ХарактеристикаОприходование,
	|	Товары.ПартияОприходование
	|;
	|";
	
	ЗаполнитьТабличнуюЧастьИнвентаризацииПродукции(ДокументОбъект, ДанныеЗаполнения, ТекстТоварыДокумента, 0);
	
КонецПроцедуры

Функция ДанныеПрикладныхДокументовИзВходящейТранспортнойОперацииВЕТИС(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВходящаяТранспортнаяОперацияВЕТИС.ГрузоотправительХозяйствующийСубъект.Контрагент КАК Грузоотправитель,
	|	ВходящаяТранспортнаяОперацияВЕТИС.ГрузоотправительХозяйствующийСубъект.Контрагент КАК Контрагент,
	|	ВходящаяТранспортнаяОперацияВЕТИС.ГрузополучательХозяйствующийСубъект.Контрагент КАК Грузополучатель,
	|	ВходящаяТранспортнаяОперацияВЕТИС.ГрузополучательХозяйствующийСубъект.Контрагент КАК Организация,
	|	ПредприятияОтправителя.ТорговыйОбъект КАК ГрузоотправительПредприятие,
	|	ПредприятияОтправителя.ТорговыйОбъект КАК ТорговыйОбъектОтправителя,
	|	ПредприятияПолучателя.ТорговыйОбъект КАК ГрузополучательПредприятие,
	|	ПредприятияПолучателя.ТорговыйОбъект КАК СтруктурнаяЕдиница,
	|	ПредприятияПолучателя.ТорговыйОбъект КАК СтруктурнаяЕдиницаПолучатель,
	|	ПредприятияОтправителя.ПроизводственныйОбъект КАК ГрузоотправительПодразделение,
	|	ПредприятияПолучателя.ПроизводственныйОбъект КАК ГрузополучательПодразделение,
	|	ПредприятияПолучателя.ПроизводственныйОбъект КАК ПроизводственныйОбъектПолучателя,
	|	ВходящаяТранспортнаяОперацияВЕТИС.ПеревозчикХозяйствующийСубъект.Контрагент КАК Перевозчик,
	|	ВходящаяТранспортнаяОперацияВЕТИС.СерияТТН КАК СерияТТН,
	|	ВходящаяТранспортнаяОперацияВЕТИС.ДатаТТН КАК ДатаТТН,
	|	ВходящаяТранспортнаяОперацияВЕТИС.НомерТТН КАК НомерТТН,
	|	ВходящаяТранспортнаяОперацияВЕТИС.ТипТТН КАК ТипТТН,
	|	ВходящаяТранспортнаяОперацияВЕТИС.Комментарий КАК Комментарий,
	|	ВходящаяТранспортнаяОперацияВЕТИС.Дата КАК Дата,
	|	ВходящаяТранспортнаяОперацияВЕТИС.Товары.(
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		Серия КАК Партия,
	|		Количество КАК Количество,
	|		ЕдиницаИзмеренияВЕТИС.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмеренияВЕТИСБазоваяЕдиницаИзмерения,
	|		ЕдиницаИзмеренияВЕТИС.Коэффициент КАК ЕдиницаИзмеренияВЕТИСКоэффициент,
	|		Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ИдентификаторСтроки КАК ИдентификаторСтроки,
	|		ЛОЖЬ КАК БылоУточнение
	|	) КАК Товары,
	|	ВходящаяТранспортнаяОперацияВЕТИС.ТоварыУточнение.(
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		Серия КАК Партия,
	|		Количество КАК Количество,
	|		Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ИдентификаторСтроки КАК ИдентификаторСтроки
	|	) КАК ТоварыУточнение
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС КАК ВходящаяТранспортнаяОперацияВЕТИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХозяйствующиеСубъектыВЕТИС.Предприятия КАК ПредприятияОтправителя
	|		ПО ВходящаяТранспортнаяОперацияВЕТИС.ГрузоотправительХозяйствующийСубъект = ПредприятияОтправителя.Ссылка
	|			И ВходящаяТранспортнаяОперацияВЕТИС.ГрузоотправительПредприятие = ПредприятияОтправителя.Предприятие
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХозяйствующиеСубъектыВЕТИС.Предприятия КАК ПредприятияПолучателя
	|		ПО ВходящаяТранспортнаяОперацияВЕТИС.ГрузополучательХозяйствующийСубъект = ПредприятияПолучателя.Ссылка
	|			И ВходящаяТранспортнаяОперацияВЕТИС.ГрузополучательПредприятие = ПредприятияПолучателя.Предприятие
	|ГДЕ
	|	ВходящаяТранспортнаяОперацияВЕТИС.Ссылка = &Ссылка";
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ДанныеПрикладныхДокументовИзИсходящейТранспортнойОперацииВЕТИС(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсходящаяТранспортнаяОперацияВЕТИС.ГрузоотправительХозяйствующийСубъект.Контрагент КАК Грузоотправитель,
	|	ИсходящаяТранспортнаяОперацияВЕТИС.ГрузоотправительХозяйствующийСубъект.Контрагент КАК Организация,
	|	ИсходящаяТранспортнаяОперацияВЕТИС.ГрузополучательХозяйствующийСубъект.Контрагент  КАК Грузополучатель,
	|	ИсходящаяТранспортнаяОперацияВЕТИС.ГрузополучательХозяйствующийСубъект.Контрагент  КАК Контрагент,
	|	ПредприятияОтправителя.ТорговыйОбъект                                              КАК ГрузоотправительПредприятие,
	|	ПредприятияОтправителя.ТорговыйОбъект                                              КАК СтруктурнаяЕдиница,
	|	ПредприятияПолучателя.ТорговыйОбъект                                               КАК ГрузополучательПредприятие,
	|	ПредприятияПолучателя.ТорговыйОбъект                                               КАК Партнер,
	|	ПредприятияПолучателя.ТорговыйОбъект                                               КАК СтруктурнаяЕдиницаПолучатель,
	|	ПредприятияОтправителя.ПроизводственныйОбъект                                      КАК ГрузоотправительПодразделение,
	|	ПредприятияОтправителя.ПроизводственныйОбъект                                      КАК Подразделение,
	|	ПредприятияПолучателя.ПроизводственныйОбъект                                       КАК ГрузополучательПодразделение,
	|	ИсходящаяТранспортнаяОперацияВЕТИС.ПеревозчикХозяйствующийСубъект.Контрагент       КАК Перевозчик,
	|	ИсходящаяТранспортнаяОперацияВЕТИС.СерияТТН                                        КАК СерияТТН,
	|	ИсходящаяТранспортнаяОперацияВЕТИС.ДатаТТН                                         КАК ДатаТТН,
	|	ИсходящаяТранспортнаяОперацияВЕТИС.НомерТТН                                        КАК НомерТТН,
	|	ИсходящаяТранспортнаяОперацияВЕТИС.ТипТТН                                          КАК ТипТТН,
	|	ИсходящаяТранспортнаяОперацияВЕТИС.Комментарий                                     КАК Комментарий,
	|	ИсходящаяТранспортнаяОперацияВЕТИС.Дата                                            КАК Дата,
	|	ИсходящаяТранспортнаяОперацияВЕТИС.Товары.(
	|		Номенклатура                                  КАК Номенклатура,
	|		Характеристика                                КАК Характеристика,
	|		Серия                                         КАК Партия,
	|		Количество                                    КАК Количество,
	|		Номенклатура.ЕдиницаИзмерения                 КАК ЕдиницаИзмерения
	|	) КАК Товары
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС КАК ИсходящаяТранспортнаяОперацияВЕТИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХозяйствующиеСубъектыВЕТИС.Предприятия КАК ПредприятияОтправителя
	|		ПО ИсходящаяТранспортнаяОперацияВЕТИС.ГрузоотправительХозяйствующийСубъект = ПредприятияОтправителя.Ссылка
	|			И ИсходящаяТранспортнаяОперацияВЕТИС.ГрузоотправительПредприятие = ПредприятияОтправителя.Предприятие
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХозяйствующиеСубъектыВЕТИС.Предприятия КАК ПредприятияПолучателя
	|		ПО ИсходящаяТранспортнаяОперацияВЕТИС.ГрузополучательХозяйствующийСубъект = ПредприятияПолучателя.Ссылка
	|			И ИсходящаяТранспортнаяОперацияВЕТИС.ГрузополучательПредприятие = ПредприятияПолучателя.Предприятие
	|ГДЕ
	|	ИсходящаяТранспортнаяОперацияВЕТИС.Ссылка = &Ссылка";
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ДанныеПрикладныхДокументовИзИнвентаризацииПродукцииВЕТИС(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Предприятия.ТорговыйОбъект                                   КАК ТорговыйОбъект,
	|	Предприятия.ТорговыйОбъект                                   КАК СтруктурнаяЕдиница,
	|	Предприятия.ПроизводственныйОбъект                           КАК Подразделение,
	|	ИнвентаризацияПродукцииВЕТИС.Комментарий                     КАК Комментарий,
	|	ИнвентаризацияПродукцииВЕТИС.Дата                            КАК Дата,
	|	ИнвентаризацияПродукцииВЕТИС.ХозяйствующийСубъект.Контрагент КАК ХозяйствующийСубъект,
	|	ИнвентаризацияПродукцииВЕТИС.ХозяйствующийСубъект.Контрагент КАК Организация,
	|	ИнвентаризацияПродукцииВЕТИС.Товары.(
	|		Номенклатура                  КАК Номенклатура,
	|		Характеристика                КАК Характеристика,
	|		Серия                         КАК Партия,
	|		КоличествоИзменение           КАК Количество,
	|		Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	) КАК Товары
	|ИЗ
	|	Документ.ИнвентаризацияПродукцииВЕТИС КАК ИнвентаризацияПродукцииВЕТИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХозяйствующиеСубъектыВЕТИС.Предприятия КАК Предприятия
	|		ПО ИнвентаризацияПродукцииВЕТИС.ХозяйствующийСубъект = Предприятия.Ссылка
	|			И ИнвентаризацияПродукцииВЕТИС.Предприятие = Предприятия.Предприятие
	|ГДЕ
	|	ИнвентаризацияПродукцииВЕТИС.Ссылка = &Ссылка";
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ДанныеПрикладныхДокументовИзПроизводственнойОперацииВЕТИС(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСборкаЗапасов.Сборка) КАК ВидОперации,
	|	ПроизводственнаяОперацияВЕТИС.ХозяйствующийСубъект.Контрагент КАК Организация,
	|	Предприятия.ТорговыйОбъект КАК СтруктурнаяЕдиница,
	|	Предприятия.ПроизводственныйОбъект КАК Подразделение,
	|	ПроизводственнаяОперацияВЕТИС.Комментарий КАК Комментарий,
	|	ПроизводственнаяОперацияВЕТИС.Дата КАК Дата,
	|	ПроизводственнаяОперацияВЕТИС.Товары.(
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		Серия КАК Партия,
	|		Количество КАК Количество,
	|		Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ИдентификаторСтроки КАК ИдентификаторСтроки
	|	) КАК Товары,
	|	ПроизводственнаяОперацияВЕТИС.Сырье.(
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		Серия КАК Партия,
	|		Количество КАК Количество,
	|		Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ИдентификаторСтроки КАК ИдентификаторСтроки
	|	) КАК Сырье
	|ИЗ
	|	Документ.ПроизводственнаяОперацияВЕТИС КАК ПроизводственнаяОперацияВЕТИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХозяйствующиеСубъектыВЕТИС.Предприятия КАК Предприятия
	|		ПО ПроизводственнаяОперацияВЕТИС.ХозяйствующийСубъект = Предприятия.Ссылка
	|			И ПроизводственнаяОперацияВЕТИС.Предприятие = Предприятия.Предприятие
	|ГДЕ
	|	ПроизводственнаяОперацияВЕТИС.Ссылка = &Ссылка";
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает сведения о коэффициенте пересчета единицы измерения ВетИС.
//
// Параметры:
//	ЕдиницаИзмеренияВЕТИС	- СправочникСсылка.ЕдиницыИзмеренияВЕТИС	- Единица измерения ВетИС, коэффициент которой нужно 
//																		получить.
//	Номенклатура			- СправочникСсылка.Номенклатура				- Номенклатура для единицы хранения, которой осуществляется 
//																		получение коэффициента пересчета.
//	КэшированныеЗначения	- Структура									- Сохраненные значения параметров, используемых при обработке 
//																		строки таблицы.
//
// Возвращаемое значение:
//	Структура - см. описание модуля менеджера УпаковкиЕдиницы.КоэффициентЕдиницыИзмеренияПоВЕТИС.
//
Функция ДанныеЕдиницыИзмеренияВЕТИС(ЕдиницаИзмеренияВЕТИС, Номенклатура, КэшированныеЗначения) Экспорт
	
	ДанныеЕдиницыИзмеренияВЕТИС = Новый Структура(
								"КодОшибки,
								|Коэффициент,
								|ТипИзмеряемойВеличины,
								|НужноОкруглятьКоличество",
								0, 1, Неопределено, Истина);
								
								
	Если ДанныеЕдиницыИзмеренияВЕТИС.Свойство("КэшироватьДанные") И ДанныеЕдиницыИзмеренияВЕТИС.КэшироватьДанные Тогда
		
		КлючКоэффициента = ИнтеграцияВЕТИСКлиентСерверПереопределяемый.КлючКэшаУпаковки(Номенклатура, ЕдиницаИзмеренияВЕТИС);
		
		ДанныеКлюча = Новый Структура;
		ДанныеКлюча.Вставить("КодОшибки",                ДанныеЕдиницыИзмеренияВЕТИС.КодОшибки);
		ДанныеКлюча.Вставить("Коэффициент",              ДанныеЕдиницыИзмеренияВЕТИС.Коэффициент);
		ДанныеКлюча.Вставить("ТипИзмеряемойВеличины",    ДанныеЕдиницыИзмеренияВЕТИС.ТипИзмеряемойВеличины);
		ДанныеКлюча.Вставить("НужноОкруглятьКоличество", ДанныеЕдиницыИзмеренияВЕТИС.НужноОкруглятьКоличество);
		
		КэшированныеЗначения.КоэффициентыУпаковок.Вставить(КлючКоэффициента, ДанныеКлюча);
		
	КонецЕсли;
	
	Возврат ДанныеЕдиницыИзмеренияВЕТИС;
	
КонецФункции

Функция ЕдиницаИзмеренияОКЕИ(КодОКЕИ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕдиницыИзмерения.Ссылка КАК Ссылка,
	|	ЕдиницыИзмерения.Код КАК Код
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Код = &КодОКЕИ";
	Запрос.УстановитьПараметр("КодОКЕИ", КодОКЕИ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЕдиницаИзмерения = Выборка.Ссылка;
	Иначе
		ЕдиницаИзмерения = Неопределено;
	КонецЕсли;
	
	Возврат ЕдиницаИзмерения;
	
КонецФункции

// Создает единицу измерения по ОКЕИ.
//
// Параметры:
//	КодОКЕИ - ОпределяемыйТип.СтрокаВЕТИС - Код ОКЕИ.
//
// Возвращаемое значение:
//	СправочникСсылка.ЕдиницаИзмерения, Неопределено - Единица измерения по ОКЕИ.
//
Функция СоздатьЕдиницуИзмеренияПоКлассификаторуОКЕИ(КодОКЕИ) Экспорт
	
	ДеревоДанныхКлассификатора = Справочники.КлассификаторЕдиницИзмерения.ПолучитьДанныеКлассификатора();
	
	ДанныеКлассификатора = ДанныеДерева(ДеревоДанныхКлассификатора, 2);
	СтрокаКлассификатора = ДанныеКлассификатора.Найти(КодОКЕИ, "КодЧисловой");
	
	ЕдиницаИзмерения = Неопределено;
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ЗначениеЗаполнено(СтрокаКлассификатора.УсловноеОбозначениеНациональное) Тогда
			Наименование = СтрокаКлассификатора.УсловноеОбозначениеНациональное;
		ИначеЕсли ЗначениеЗаполнено(СтрокаКлассификатора.УсловноеОбозначениеМеждународное) Тогда
			Наименование = СтрокаКлассификатора.УсловноеОбозначениеМеждународное;
		ИначеЕсли ЗначениеЗаполнено(СтрокаКлассификатора.КодовоеБуквенноеОбозначениеНациональное) Тогда
			Наименование = СтрокаКлассификатора.КодовоеБуквенноеОбозначениеНациональное;
		ИначеЕсли ЗначениеЗаполнено(СтрокаКлассификатора.КодовоеБуквенноеОбозначениеМеждународное) Тогда
			Наименование = СтрокаКлассификатора.КодовоеБуквенноеОбозначениеМеждународное;
		Иначе
			Наименование = СтрокаКлассификатора.Наименование;
		КонецЕсли;
		
		СправочникОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		
		СправочникОбъект.Код                     = СокрЛП(СтрокаКлассификатора.КодЧисловой);
		СправочникОбъект.Наименование            = СтрЗаменить(Наименование, Символы.ПС, "/");
		СправочникОбъект.НаименованиеПолное      = СтрЗаменить(СтрокаКлассификатора.Наименование, Символы.ПС, "/");
		СправочникОбъект.МеждународноеСокращение = СтрЗаменить(СтрокаКлассификатора.КодовоеБуквенноеОбозначениеМеждународное,
																Символы.ПС,
																"/");
		
		Если ЗначениеЗаполнено(СтрокаКлассификатора.ТипИзмеряемойВеличины) Тогда
			ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин[СтрокаКлассификатора.ТипИзмеряемойВеличины];
			
			СправочникОбъект.ТипИзмеряемойВеличины = ТипИзмеряемойВеличины;
		КонецЕсли;
		
		СправочникОбъект.Записать();
		
		ЕдиницаИзмерения = СправочникОбъект.Ссылка;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		ИмяСобытия = НСтр("ru = 'Создание единицы измерения по классификатору.'", КодОсновногоЯзыка);
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат ЕдиницаИзмерения;
	
КонецФункции

// Возвращает таблицу значений с данными дерева значений
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений, ДанныеФормыДерево - дерево с данными
//  Уровень		 - Число - уровень дерева, на котором расположены искомые данные (нумерация с 0). Если не передано, то 
//						   будут возвращенные данные со всех последних уровней веток.
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит данные дерева.
//
Функция ДанныеДерева(ДеревоДанных, Уровень = Неопределено)
	
	ТаблицаВозврата = Новый ТаблицаЗначений;
	Для Каждого Колонка Из ДеревоДанных.Колонки Цикл
		ТаблицаВозврата.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	
	Если ТипЗнч(ДеревоДанных) = Тип("ДеревоЗначений") Тогда
		СтрокиДерева = ДеревоДанных.Строки;
	ИначеЕсли ТипЗнч(ДеревоДанных) = Тип("ДанныеФормыДерево") Тогда
		СтрокиДерева = ДеревоДанных.ПолучитьЭлементы();
	Иначе
		ВызватьИсключение НСтр("ru = 'Передан некорректный тип аргумента'");
	КонецЕсли;
	
	ЗаполнитьТаблицуРекурсивно(ТаблицаВозврата, СтрокиДерева, Уровень, 0);
	
	Возврат ТаблицаВозврата;

КонецФункции

Процедура ЗаполнитьТаблицуРекурсивно(ТаблицаЗначений, СтрокиДерева, ИскомыйУровень, ТекущийУровень)
	
	Для Каждого Строка Из СтрокиДерева Цикл

		Если ТипЗнч(СтрокиДерева) = Тип("КоллекцияСтрокДереваЗначений") Тогда
			Подстроки = Строка.Строки;
		ИначеЕсли ТипЗнч(СтрокиДерева) = Тип("ДанныеФормыКоллекцияЭлементовДерева") Тогда
			Подстроки = Строка.ПолучитьЭлементы();
		КонецЕсли;
		
		Если ИскомыйУровень = ТекущийУровень 
			Или (ИскомыйУровень = Неопределено И Подстроки.Количество() = 0) Тогда
			НовСтрока = ТаблицаЗначений.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
		Иначе
			ЗаполнитьТаблицуРекурсивно(ТаблицаЗначений, Подстроки, ИскомыйУровень, ТекущийУровень + 1);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти