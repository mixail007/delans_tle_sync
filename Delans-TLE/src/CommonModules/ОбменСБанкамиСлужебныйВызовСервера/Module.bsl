////////////////////////////////////////////////////////////////////////////////
// ОбменСБанкамиСлужебныйВызовСервера: механизм обмена электронными документами с банками.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область АсинхронныйОбмен

// Запускает длительную операцию по получению новых документов из банка
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком;
//  ИдентификаторСессии - ДвоичныеДанные - идентификатор установленной сессии.
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет
//                                     помещен (или уже помещен) результат работы процедуры.
//   * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
//                                     содержит адрес дополнительного временного хранилища,
//                                     в которое будет помещен (или уже помещен) результат работы процедуры.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
// 
Функция ЗапускЗаданияОтправкиДокументовАсинхронныйОбмен(Знач НастройкаОбмена, Знач ИдентификаторСессии) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = '1С:ДиректБанк. Отправка документов в банк.'");
	
	ПараметрыСинхронизации = Новый Структура;
	ПараметрыСинхронизации.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыСинхронизации.Вставить("ИдентификаторСессии", ИдентификаторСессии);
		
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ОтправкаДокументовВБанкАсинхронныйОбмен", ПараметрыСинхронизации, ПараметрыВыполнения);
	
КонецФункции

// Анализирует ответ банка на отправку пакета.
// Если банк вернул ошибку, то вызывается исключение с текстом ошибки.
//
// Параметры:
//    ОтветБанка - ДвоичныеДанные - содержимое ответа банка;
//    ПакетОбменСБанками - ДокументСсылка.ПакетОбменСБанками - отправленный пакет обмена.
//    ВремФайл - Строка - путь к временному файлу. Не удаляется при возникновении ошибок чтения.
//
Процедура ОбработатьОтветБанкаНаОтправкуДокументаAsync(Знач ОтветБанка, Знач ПакетОбменСБанками, ВремФайл = Неопределено) Экспорт
	
	СодержимоеФайла = Новый Соответствие;
	Чтение = Новый ЧтениеXML;
	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	ОтветБанка.Записать(ВремФайл);
	Чтение.ОткрытьФайл(ВремФайл);
	ResultBank = ФабрикаXDTO.ПрочитатьXML(Чтение);
	
	Если ResultBank.Свойства().Получить("formatVersion") = Неопределено Тогда
		ВерсияФормата = ОбменСБанкамиКлиентСервер.УстаревшаяВерсияФорматаАсинхронногоОбмена();
	Иначе
		ВерсияФормата = ResultBank.formatVersion;
	КонецЕсли;
	
	ПространствоИмен = ОбменСБанкамиСлужебный.ПространствоИменАсинхронногоОбмена(ВерсияФормата);

	Фабрика = ОбменСБанкамиСлужебныйПовтИсп.ФабрикаAsyncXDTO(ВерсияФормата);

	Чтение.ОткрытьФайл(ВремФайл);
	
	ПакетТип = ОбменСБанкамиСлужебный.ТипЗначенияCML(Фабрика, ПространствоИмен, "ResultBank");
	ResultBank = Фабрика.ПрочитатьXML(Чтение, ПакетТип);
	Если НЕ ResultBank.Success = Неопределено Тогда
		Если НЕ ResultBank.Success.SendPacketResponse = Неопределено Тогда
			ПакетОбъект = ПакетОбменСБанками.ПолучитьОбъект();
			ПакетОбъект.ВнешнийИдентификатор = ResultBank.Success.SendPacketResponse.ID;
			ПакетОбъект.Записать();
		КонецЕсли
	ИначеЕсли НЕ ResultBank.Error = Неопределено Тогда
		Чтение.Закрыть();
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
		
		ТекстОшибки = ОбменСБанкамиСлужебный.ТекстСообщенияОбОшибкеОтветаБанка(ResultBank.Error);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Чтение.Закрыть();
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
	
КонецПроцедуры

#КонецОбласти

#Область Транспорт

// Отправляет подготовленные документы в банк
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком
//  ИдентификаторСессии - Строка - идентификатор сессии
//  ДанныеВозврата - Структура - результат выполнения, содержит поля:
//    * КоличествоОтправленныхПакетов - Число - количество отправленных пакетов
//    * ТекстОшибки - Строка - текст ошибки, если она была
//
Процедура ОтправитьЭДВБанк(Знач НастройкаОбмена, Знач ИдентификаторСессии, ДанныеВозврата) Экспорт
	
	ТекстОшибки = "";
	КоличествоОтправленныхПакетов = ОтправкаСформированныхСообщенийВБанк(НастройкаОбмена, ИдентификаторСессии, ТекстОшибки);
	ДанныеВозврата.Вставить("КоличествоОтправленныхПакетов", КоличествоОтправленныхПакетов);
	ДанныеВозврата.Вставить("ТекстОшибки", ТекстОшибки);
	
КонецПроцедуры

// Проверяет выполнение фонового задания на сервере.
//
// Параметры:
//  ФоновоеЗаданиеИдентификатор - УникальныйИдентификатор - идентификатор фонового задания.
//  ИдентификаторФормы - ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы, на которую будут выводиться сообщения об ошибках.
// 
// Возвращаемое значение:
//  Структура - информация о фоновом задании. Содержит следующие поля:
//    * Завершено - Булево - признак завершения фонового задания;
//    * Успешно - Булево - признак, что при выполнении задания не произошло ошибки.
//
Функция ПроверитьВыполнениеФоновогоЗаданияНаСервере(ФоновоеЗаданиеИдентификатор, ИдентификаторФормы) Экспорт
	
	Задание = Новый Структура("Завершено, Успешно", Ложь, Ложь);
	Попытка
		Если ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор) Тогда
			Задание.Завершено = Истина;
			МассивСообщений = СообщенияОбОшибкахФоновогоЗадания(ФоновоеЗаданиеИдентификатор);
			Если МассивСообщений.Количество() Тогда
				Для Каждого СообщениеОбОшибке Из МассивСообщений Цикл
					СообщениеОбОшибке.ИдентификаторНазначения = ИдентификаторФормы;
					СообщениеОбОшибке.Сообщить();
				КонецЦикла;
				Задание.Успешно = Ложь;
			Иначе
				Задание.Успешно = Истина;
			КонецЕсли;
		КонецЕсли;
	Исключение
		Задание.Завершено = Истина;
		Задание.Успешно   = Ложь;
		Текст = НСтр("ru = 'При выполнении операции произошла ошибка.'");
		ВидОперации = НСтр("ru = 'Фоновое задание на сервере'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстОшибки, Текст, "ОбменСБанками");
	КонецПопытки;
	Возврат Задание;
	
КонецФункции

// Запускает длительную операцию по получению новых документов из банка
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком;
//  ИдентификаторСессии - ДвоичныеДанные - идентификатор установленной сессии.
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет
//                                     помещен (или уже помещен) результат работы процедуры.
//   * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
//                                     содержит адрес дополнительного временного хранилища,
//                                     в которое будет помещен (или уже помещен) результат работы процедуры.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
// 
Функция ЗапускЗаданияПоПолучениюНовыхДокументовИзБанка(Знач НастройкаОбмена, Знач ИдентификаторСессии) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение новых документов из банка.'");
	
	ПараметрыСинхронизации = Новый Структура;
	ПараметрыСинхронизации.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыСинхронизации.Вставить("ИдентификаторСессии", ИдентификаторСессии);
	ПараметрыСинхронизации.Вставить("АдресРезультата");
		
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ПолучитьНовыеДокументыИзБанка", ПараметрыСинхронизации, ПараметрыВыполнения);
	
КонецФункции

#КонецОбласти

#Область ОперацииСоСтроками

// Возвращает строку Base64, содержащей данные строки в виде двоичных данных файла без BOM.
//
// Параметры:
//  СтрокаДанных - Строка - строка для преобразования в BASE64.
//  КодировкаТекста - Строка - используемая кодировка текста.
//
// Возвращаемое значение:
//   Строка   - строка в BASE64.
//
Функция СтрокаBase64БезBOM(СтрокаДанных, КодировкаТекста = "UTF-8") Экспорт

	ПотокВПамяти = Новый ПотокВПамяти();
	Текст = Новый ЗаписьТекста(ПотокВПамяти, КодировкаТекста, , Символы.ПС);
	Текст.Записать(СтрокаДанных);
	Текст.Закрыть();
	ДвоичныеДанные = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	СтрокаФорматBase64 = Base64Строка(ДвоичныеДанные);
	
	Возврат СтрокаФорматBase64;

КонецФункции

#КонецОбласти

#Область ПолучениеДанныхИзИнформационнойБазы

// Определяет название объекта в метаданных
//
// Параметры:
//  Тип - ОписаниеТипов - тип, название которого нужно получить
// 
// Возвращаемое значение:
//  Строка - название типа в метаданных.
//
Функция НазваниеОбъектаВМетаданных(Знач Тип) Экспорт
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
	Возврат ОбъектМетаданных.Имя;
	
КонецФункции

// Получает реквизиты банковского счета организации.
//
// Параметры:
//  Ссылка - ОпределяемыеТипы.СчетОрганизацииОбменСБанками - ссылка на банковскийСчетОрганизации
// 
// Возвращаемое значение:
//  Структура - реквизиты счета. Содержит поля:
//   * Организация - ОпределяемыеТипы.Организация - ссылка на организацию
//   * Банк - ОпределяемыеТипы.БанкОбменСБанками - ссылка на банк.
//
Функция РеквизитыБанковскогоСчетаОрганизации(Знач Ссылка) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура("Организация, Банк");
	
	НазваниеРеквизитаОрганизация = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
		"БанковскийСчетОрганизации.Организация");
	НазваниеРеквизитаБанк = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
		"БанковскийСчетОрганизации.Банк");
	
	ЗначенияРеквизитовОснование = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Ссылка, НазваниеРеквизитаОрганизация + "," + НазваниеРеквизитаБанк);
		
	ЗначенияРеквизитовОснование.Свойство(НазваниеРеквизитаОрганизация, ВозвращаемоеЗначение.Организация);
	ЗначенияРеквизитовОснование.Свойство(НазваниеРеквизитаБанк, ВозвращаемоеЗначение.Банк);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получает значения реквизитов сертификата.
//
// Параметры:
//    Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат;
//    ЗапрашиваемыеРеквизиты - Структура - в ключах названия реквизитов, которые нужно получить. Возможные поля:
//      * Отпечаток - Строка - отпечаток сертификата;
//      * СертификатBase64 - Строка - сертификат в формате Base64;
//      * ДанныеСертификата - Произвольный - данные сертификата в формате хранения.
//
Процедура ПолучитьЗначенияРеквизитовСертификата(Знач Сертификат, ЗапрашиваемыеРеквизиты) Экспорт
	
	РеквизитыСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сертификат, "Отпечаток, ДанныеСертификата");
	Если ЗапрашиваемыеРеквизиты.Свойство("СертификатBase64") Тогда
		СертификатBase64 = СертификатВФорматеBase64(РеквизитыСертификата.ДанныеСертификата);
		РеквизитыСертификата.Вставить("СертификатBase64", СертификатBase64);
	КонецЕсли;
	Если ЗапрашиваемыеРеквизиты.Свойство("ДанныеСертификата") Тогда
		РеквизитыСертификата.ДанныеСертификата = РеквизитыСертификата.ДанныеСертификата.Получить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЗапрашиваемыеРеквизиты, РеквизитыСертификата);
	
КонецПроцедуры

// Получает двоичные данные прикрепленного с объекту присоединенного файла.
//
// Параметры:
//    СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы.
//
// Возвращаемое значение:
//    ДвоичныеДанные - двоичные данные присоединенного файла.
//
Функция ДвоичныеДанныеПрисоединенногоФайла(Знач СсылкаНаОбъект) Экспорт
	
	МассивФайлов = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(СсылкаНаОбъект, МассивФайлов);
	Если НЕ МассивФайлов.Количество() Тогда
		ТекстОшибки = НСтр("ru = 'Не обнаружен присоединенный файл объекта: %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, СсылкаНаОбъект);
		Операция = НСтр("ru = 'Получение двоичных данных присоединенного файла'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ТекстОшибки, ТекстОшибки, "ОбменСБанками", СсылкаНаОбъект);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РаботаСФайлами.ДвоичныеДанныеФайла(МассивФайлов[0]);
		
КонецФункции

// Получает значения реквизитов сертификата.
//
// Параметры:
//    НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмен;
//    ЗапрашиваемыеРеквизиты - Структура - в ключах названия реквизитов, которые нужно получить. Возможные поля:
//      * ИмяВнешнегоМодуля - Строка - имя внешней компоненты или дополнительной обработки;
//      * СертификатБанкаBase64 - Строка - сертификат банка в формате Base64;
//      * ПрограммаБанка - ПеречислениеСсылка.ПрограммыБанка - программа банка;
//      * АутентификацияПоСертификату - Булево - признак аутентификации по сертификату;
//      * ИспользуетсяКриптография - Булево - признак использования криптографии;
//      * ВерсияФормата - Булево - признак использования криптографии;
//      * АдресСервера - Строка - адрес сервера банка;
//      * ИдентификаторОрганизации - Строка - идентификатор организации;
//      * ИспользоватьЖурналирование - Булево - признак журналирования обмена;
//      * КаталогДляЖурналирования - Строка - каталог для записи файлов журнала;
//      * Недействительна - Булево - признак отключенной настройки обмена;
//      * ПометкаУдаления - Булево - признак пометки на удаление настройки обмена.
//
Процедура ПолучитьЗначенияРеквизитовНастройкиОбмена(Знач НастройкаОбмена, ЗапрашиваемыеРеквизиты) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаОбмена,
		"ИмяВнешнегоМодуля, СертификатБанка, ПрограммаБанка, АутентификацияПоСертификату, ИспользуетсяКриптография,
		|ВерсияФормата, АдресСервера, ИдентификаторОрганизации, Недействительна, ПометкаУдаления");
	ЗаполнитьЗначенияСвойств(ЗапрашиваемыеРеквизиты, РеквизитыНастройкиОбмена);
	
	Если ЗапрашиваемыеРеквизиты.Свойство("ИспользоватьЖурналирование") Тогда
		ПараметрыЖурналирования = ПараметрыЖурналирования(НастройкаОбмена);
		ЗаполнитьЗначенияСвойств(ЗапрашиваемыеРеквизиты, ПараметрыЖурналирования);
	КонецЕсли;
	
	Если ЗапрашиваемыеРеквизиты.Свойство("СертификатБанкаBase64") Тогда
		ЗапрашиваемыеРеквизиты.СертификатБанкаBase64 = Base64Строка(РеквизитыНастройкиОбмена.СертификатБанка.Получить());
	КонецЕсли;
	
КонецПроцедуры

// Получает реквизиты электронного документа по владельцу
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - объект информационной базы.
// 
// Возвращаемое значение:
//  Структура - реквизиты электронного документа
//    * СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение обмена с банком
//                      - Неопределено - электронный документ не сформирован
//    * Состояние - ПеречислениеСсылка.СостоянияОбменСБанками - текущее состояние ЭДО
//    * ПрограммаБанка - ПеречислениеСсылка.ПрограммыБанка - технология обмена.
//  Неопределено - прямой обмен с банком не используется.
//
Функция РеквизитыЭлектронногоДокумента(Знач ДокументСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СостоянияОбменСБанками.СообщениеОбмена.Ссылка КАК СообщениеОбмена,
	               |	СостоянияОбменСБанками.Состояние КАК Состояние,
	               |	СостоянияОбменСБанками.СообщениеОбмена.НастройкаОбмена.ПрограммаБанка КАК ПрограммаБанка
	               |ИЗ
	               |	РегистрСведений.СостоянияОбменСБанками КАК СостоянияОбменСБанками
	               |ГДЕ
	               |	СостоянияОбменСБанками.СсылкаНаОбъект = &СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", ДокументСсылка);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		СтруктураВозврата = Новый Структура("Состояние, СообщениеОбмена, ПрограммаБанка");
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Результат);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Получает идентификатор электронного документа
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - электронный документ.
// 
// Возвращаемое значение:
//  Строка - идентификатор документа.
//
Функция ИдентификаторЭлектронногоДокумента(Знач СообщениеОбмена) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "Идентификатор");
	
КонецФункции

// Получает значения реквизитов сообщения обмена.
//
// Параметры:
//    СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена
//    ЗапрашиваемыеРеквизиты - Структура - в ключах названия реквизитов, которые нужно получить. Возможные поля:
//      * СообщениеОбмена - Строка - представление электронного документа;
//      * Идентификатор - Строка - внутренний идентификатор электронного документа.
//      * ВнешнийИдентификатор - Строка - идентификатор электронного документа в базе банка.
//
Процедура ПолучитьЗначенияРеквизитовСообщенияОбмена(Знач СообщениеОбмена, ЗапрашиваемыеРеквизиты) Экспорт
	
	РеквизитыСообщенияОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СообщениеОбмена, "ПредставлениеДокумента, Идентификатор, ВнешнийИдентификатор");
	ЗаполнитьЗначенияСвойств(ЗапрашиваемыеРеквизиты, РеквизитыСообщенияОбмена);
	
КонецПроцедуры

// Подбирает действующую настройку обмена, в которой есть указанный сертификат.
// 
// Параметры:
//    Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат подписи.
//    ИмяМодуля - Строка - (возвращаемое значение) название используемого внешнего модуля.
//
// Возвращаемое значение:
//    СправочникСсылка.НастройкиОбменСБанками или Неопределено - найденная настройка обмена.
//
Функция НастройкаОбменаПоСертификату(Сертификат, ИмяВнешнегоМодуля = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиОбменСБанкамиСертификатыПодписейОрганизации.Ссылка КАК Ссылка,
	|	НастройкиОбменСБанкамиСертификатыПодписейОрганизации.Ссылка.ИмяВнешнегоМодуля КАК ИмяВнешнегоМодуля
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменСБанкамиСертификатыПодписейОрганизации
	|ГДЕ
	|	НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП = &СертификатЭП
	|	И НЕ НастройкиОбменСБанкамиСертификатыПодписейОрганизации.Ссылка.ПометкаУдаления
	|	И НЕ НастройкиОбменСБанкамиСертификатыПодписейОрганизации.Ссылка.Недействительна";
	
	Запрос.УстановитьПараметр("СертификатЭП", Сертификат);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ИмяВнешнегоМодуля = Выборка.ИмяВнешнегоМодуля;
		Возврат Выборка.Ссылка;
	КонецЕсли;

КонецФункции

// Определяет документ, который имеет отражение в учете по указанному сообщению обмену.
//
// Параметры:
//    СообщениеОбмена - СправочникСсылка.СообщенияОбменСБанками - сообщение обмена.
//
// Возвращаемое значение:
//    ДокументСсылка - ссылка на объект информационной базы.
//
Функция ДокументУчета(Знач СообщениеОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СостоянияОбменСБанками.СсылкаНаОбъект
	               |ИЗ
	               |	РегистрСведений.СостоянияОбменСБанками КАК СостоянияОбменСБанками
	               |ГДЕ
	               |	СостоянияОбменСБанками.СообщениеОбмена = &СообщениеОбмена";
	Запрос.УстановитьПараметр("СообщениеОбмена", СообщениеОбмена);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СсылкаНаОбъект;
	КонецЕсли;
	
КонецФункции

// Определяет было ли получено извещение по отправленному запросу.
//
// Параметры:
//  СообщениеЗапрос - ДокументСсылка.СообщенияОбменСБанками - отправленный в банк запрос;
//  ЕстьОшибка - Булево - признак, что банк не принял запрос и вернул ошибку.
//
// Возвращаемое значение:
//  Булево - если извещение было получено, тогда Истина.
//
Функция ПолученоИзвещениеПоЗапросу(СообщениеЗапрос, ЕстьОшибка) Экспорт
	
	ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеЗапрос, "ВидЭД");
	
	Извещение = Неопределено;
	Если ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД Тогда 
		СтатусЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеЗапрос, "Статус");
		Если СтатусЭД = Перечисления.СтатусыОбменСБанками.ПолученоИзвещение Тогда 
			Возврат Истина;
		КонецЕсли;
	Иначе
		Извещение = ОбменСБанкамиСлужебный.ПодчиненноеСообщениеОбмена(СообщениеЗапрос);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Извещение) Тогда 
		
		РеквизитыСообщенияОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СообщениеЗапрос, "ВидЭД, ПричинаОтклонения, Статус");
		Если РеквизитыСообщенияОбмена.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд
				И РеквизитыСообщенияОбмена.Статус = Перечисления.СтатусыОбменСБанками.ОтклоненБанком Тогда
			ЕстьОшибка = Истина;
			ТекстСообщения = НСтр("ru = 'Запрос отклонен.
										|Причина отклонения: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, РеквизитыСообщенияОбмена.ПричинаОтклонения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	Иначе // проверка синхронного отклонения запроса
		РеквизитыЗапроса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеЗапрос, "ПричинаОтклонения, Статус");
		
		Если РеквизитыЗапроса.Статус = Перечисления.СтатусыОбменСБанками.ОтклоненБанком Тогда
			ЕстьОшибка = Истина;
			ТекстСообщения = НСтр("ru = 'Запрос отклонен.
										|Причина отклонения: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, РеквизитыЗапроса.ПричинаОтклонения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеЗаполнено(Извещение);

КонецФункции

#КонецОбласти

#Область ОперацииСВК

// Возвращает данные для отправки в банк через ВК.
//
// Параметры:
//  ИсходныеДанные - Соответствие - данные, в которыми производилась работа
//    * Ключ - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена;
//    * Значение - Массив - документы для обработки
//        ** ДокументСсылка.СообщенияОбменСБанками - ссылка на электронный документ.
// 
// Возвращаемое значение:
//  Соответствие - данные, которые готовы к отправке в банк
//    * Ключ - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена;
//    * Значение - Массив - документы для отправки
//        ** ДокументСсылка.СообщенияОбменСБанками - ссылка на электронный документ.
//
Функция ДанныеДляОтправкиЧерезВК(ИсходныеДанные) Экспорт
	
	ДанныеВозврата = Новый Соответствие;
	
	Для Каждого КлючЗначение Из ИсходныеДанные Цикл
		МассивСообщенийОбмена = Новый Массив;
		Для Каждого СообщениеОбмена Из КлючЗначение.Значение.МассивСообщенийОбмена Цикл
			Если ЭлектронныйДокументПолностьюПодписан(СообщениеОбмена) Тогда
				МассивСообщенийОбмена.Добавить(СообщениеОбмена);
			КонецЕсли;
		КонецЦикла;
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("МассивСообщенийОбмена", МассивСообщенийОбмена);
		СтруктураДанных.Вставить(
			"МассивСообщенийТребующихПодтверждение", КлючЗначение.Значение.МассивСообщенийТребующихПодтверждение);
		ДанныеВозврата.Вставить(КлючЗначение.Ключ, СтруктураДанных);
	КонецЦикла;
	
	Возврат ДанныеВозврата;
	
КонецФункции

// Скачивает внешнюю компоненту с сервера банка в фоновом процессе.
//
// Параметры:
//  УникальныйИдентификатор - УникальныйИдентификатор - идентификатор формы,
//                           из которой выполняется запуск длительной операции.
//  URL - Строка - адрес, с которого скачивается внешняя компонента.
// 
// Возвращаемое значение:
// Структура - результат выполнения фонового задания. Содержит следующие поля:
//   * Завершено - Булево - задание было завершено;
//   * Успешно - Булево - признак выполнения задания без ошибок;
//   * Идентификатор - УникальныйИдентификатор - идентификатор фонового задания;
//   * АдресХранилища - Строка - адрес хранилища, в которое помещается результат выполнения метода.
//
Функция СкачатьВКНаСервере(Знач УникальныйИдентификатор, Знач URL) Экспорт
	
	Задание = Новый Структура;
	Задание.Вставить("Завершено", Ложь);
	Задание.Вставить("Успешно", Ложь);
	Задание.Вставить("Идентификатор", Неопределено);
	Задание.Вставить("АдресХранилища", Неопределено);
	
	Попытка
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = '1С:ДиректБанк: Скачивание внешней компоненты с сервера банка'");
		РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(
			"Справочники.НастройкиОбменСБанками.СкачатьВКССервераБанка", URL, ПараметрыВыполнения);
		Если РезультатФоновогоЗадания.Статус = "Выполнено" Тогда
			Задание.АдресХранилища = РезультатФоновогоЗадания.АдресРезультата;
			Задание.Завершено = Истина;
			Задание.Успешно = Истина;
		ИначеЕсли РезультатФоновогоЗадания.Статус = "Ошибка" Тогда
			Задание.Завершено = Истина;
			Текст = НСтр("ru = 'Не удалось скачать внешний модуль с сервера банка.'");
			ВидОперации = НСтр("ru = 'Скачивание внешней компоненты с сервера банка'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, Задание.ПодробноеПредставлениеОшибки, Задание.КраткоеПредставлениеОшибки, "ОбменСБанками");
		ИначеЕсли РезультатФоновогоЗадания.Статус = "Отменено" Тогда
			Задание.Завершено = Истина;
		Иначе // выполняется
			Задание.АдресХранилища = РезультатФоновогоЗадания.АдресРезультата;
			Задание.Идентификатор = РезультатФоновогоЗадания.ИдентификаторЗадания;
		КонецЕсли;
	Исключение
		Задание.Завершено = Истина;
		Текст = НСтр("ru = 'Не удалось скачать внешний модуль с сервера банка.'");
		ВидОперации = НСтр("ru = 'Скачивание внешней компоненты с сервера банка'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ПодробныйТекстОшибки, Текст, "ОбменСБанками");
	КонецПопытки;
	
	Возврат Задание;
	
КонецФункции

// Сохраняет полученный пакет в информационной базе.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена;
//  ПакетBase64 - Строка - файл, полученный их банка в формате Base64;
//  ДанныеВозврата - Структура - возвращаемые параметры:
//     * ЕстьОшибка - Булево - Если значение Истина, то при распаковке пакета возникла ошибка;
//     * ДанныеЭП - Соответствие - данные электронных подписей для обработки на клиенте;
//         ** Ключ - ДокументСсылка.СообщениеОбменСБанками - сообщение обмена;
//         ** Значение - Массив - подписи электронного документа.
//               *** ДвоичныеДанные - двоичные данные электронной подписи.
//
Процедура СохранитьПолученныйПакетЧерезВК(Знач НастройкаОбмена, Знач ПакетBase64, ДанныеВозврата) Экспорт
	
	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанныеПакета = Base64Значение(ПакетBase64);
	ДвоичныеДанныеПакета.Записать(ВремФайл);
	
	Попытка
		ОбменСБанкамиСлужебный.СохранитьПолученныйПакет(НастройкаОбмена, ВремФайл, ДанныеВозврата);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), НастройкаОбмена);
		ДанныеВозврата.ЕстьОшибка = Истина;
	КонецПопытки;
	
КонецПроцедуры

// Создает пакет для передачи через внешнюю компоненту
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена;
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение, помещаемое в пакет;
//  СвойстваСертификатов - Соответствие - свойства сертификатов не x509:
//    * Ключ - Строка - отпечаток сертификата;
//    * Значение - Структура - свойства сертификата:
//          ** СерийныйНомер - Строка - серийный номер сертификата;
//          ** ИмяИздателя - Строка - имя издателя.
//
// Возвращаемое значение:
//   ДокументСсылка.ПакетОбменСБанками - ссылка на созданный пакет ЭД:
//   Неопределено - при создании пакета произошла ошибка.
//
Функция СоздатьПакетВК(НастройкаОбмена, СообщениеОбмена, СвойстваСертификатов = Неопределено) Экспорт
	
	МассивСообщенийОбмена = Новый Массив;
	МассивСообщенийОбмена.Добавить(СообщениеОбмена);
	
	ТекстСообщения = "";
	
	ПакетОбменСБанками = Неопределено;
	ОбменСБанкамиСлужебный.СоздатьПакетОбменСБанками(НастройкаОбмена, МассивСообщенийОбмена, ПакетОбменСБанками);
	Если ПакетОбменСБанками = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ЕстьОшибка = Ложь;
	ОбменСБанкамиСлужебный.СоздатьЭДПакетаAsync(ПакетОбменСБанками, ЕстьОшибка, СвойстваСертификатов);
	
	Если ЕстьОшибка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьСтатусыСообщенийОбмена(МассивСообщенийОбмена, Перечисления.СтатусыОбменСБанками.ПодготовленКОтправке);
	
	Возврат ПакетОбменСБанками;
	
КонецФункции

// Получает параметры для установки соединения через ВК.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена.
// 
// Возвращаемое значение:
//  Структура - параметры создания соединения:
//   * ИдентификаторОрганизации - Строка - уникальный идентификатор организации на сервере банка;
//   * БИК - Строка - БИК банка;
//   * КлючУникальности - Строка - ключ уникальности клиента для сбора статистики;
//
Функция ПараметрыСоединенияВК(НастройкаОбмена) Экспорт
	
	ПараметрыСоединения = Новый Структура();
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбмена, "ИдентификаторОрганизации, Банк, Организация");
	ПараметрыСоединения.Вставить("ИдентификаторОрганизации", РеквизитыНастройкиОбмена.ИдентификаторОрганизации);
	БИК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыНастройкиОбмена.Банк, "Код");
	ПараметрыСоединения.Вставить("БИК", БИК);
	РеквизитыОрганизации = Неопределено; 
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(
		РеквизитыНастройкиОбмена.Организация, РеквизитыОрганизации);
	ПараметрыСоединения.Вставить("КлючУникальности", РеквизитыОрганизации.ИНН + "_" + БИК);
	
	Возврат ПараметрыСоединения;
	
КонецФункции

// Получает информацию о программе для инициализации внешней компоненты.
// 
// Возвращаемое значение:
//  Структура - информация о программе, содержит поля:
//   * ВерсияФормата - Строка - версия текущей схемы обмена;
//   * СинонимКонфигурации - Строка - синоним имени (Имя) конфигурации;
//   * ВерсияКонфигурации - Строка - Версия конфигурации;
//   * ВерсияПриложения - Строка - Содержит версию используемого 1С:Предприятия 8;
//   * ИдентификаторКлиента - Строка -  уникальный идентификатор клиента;
//   * ИнформацияПрограммыПросмотра - Строка - Информация о веб-браузере (userAgent);
//   * Язык - Строка - Код локализации (язык, страна), установленный для данной информационной базы.
//
Функция ИнформацияОПрограммеДляВК() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Информация = Новый Структура;
	Информация.Вставить("ИмяКонфигурации", Метаданные.Имя);
	Информация.Вставить("ВерсияКонфигурации", Метаданные.Версия);
	Информация.Вставить("ВерсияПриложения", СистемнаяИнформация.ВерсияПриложения);
	Информация.Вставить("ИдентификаторКлиента", СистемнаяИнформация.ИдентификаторКлиента);
	Информация.Вставить("ИнформацияПрограммыПросмотра", СистемнаяИнформация.ИнформацияПрограммыПросмотра);
	Информация.Вставить("Язык", КодЛокализацииИнформационнойБазы());
	
	Возврат СериализованныеДанные(Информация);
	
КонецФункции

#КонецОбласти

#Область ОперацииСЭлектроннымДокументом

// Определяет можно ли отклонить этот ЭД.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение обмена с банком.
//
// Возвращаемое значение:
//  Булево - Если можно отклонять, тогда Истина.
//
Функция МожноОтклонитьЭтотЭД(СообщениеОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыСообщения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеОбмена, "Статус, ВидЭД");
		
	Если (РеквизитыСообщения.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение
			ИЛИ РеквизитыСообщения.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПереводВалюты
			ИЛИ РеквизитыСообщения.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПокупкуВалюты
			ИЛИ РеквизитыСообщения.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПродажуВалюты
			ИЛИ РеквизитыСообщения.ВидЭД = Перечисления.ВидыЭДОбменСБанками.РаспоряжениеНаОбязательнуюПродажуВалюты
			ИЛИ РеквизитыСообщения.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование)
		И (РеквизитыСообщения.Статус = Перечисления.СтатусыОбменСБанками.Сформирован
			ИЛИ РеквизитыСообщения.Статус = Перечисления.СтатусыОбменСБанками.Подписан
			ИЛИ РеквизитыСообщения.Статус = Перечисления.СтатусыОбменСБанками.ЧастичноПодписан) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Получает текстовое представление версии электронного документа.
//
// Параметры:
//  СсылкаНаВладельца - СправочникСсылка.НастройкиОбменСБанками, ДокументСсылка.СообщениеОбменСБанками - Ссылка на объект ИБ, состояние версии электронного документа которого необходимо получить;
//  Гиперссылка - Булево - Истина - необходимо реквизит формы "СостояниеЭД" сделать гиперссылкой.
//
// Возвращаемое значение:
//  Строка - текстовое представление версии электронного документа.
//
Функция ТекстСостоянияЭД(СсылкаНаВладельца, Гиперссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ТекстСостоянияЭД = "";
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		Если ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ЗначениеФункциональнойОпции("ИспользоватьОбменСБанками") Тогда
			
			Если ТипЗнч(СсылкаНаВладельца) = Тип("СправочникСсылка.НастройкиОбменСБанками") Тогда
				Гиперссылка = Истина;
				Возврат ТекстСостоянияЭД;
			Иначе
				ТекущееСостояниеЭД = ОбменСБанкамиСлужебный.СостояниеЭД(СсылкаНаВладельца);
				Если ТекущееСостояниеЭД = Перечисления.СостоянияОбменСБанками.НаПодписи Тогда
					ТекстСостоянияЭД = НСтр("ru = 'На подписи'");
				ИначеЕсли ТекущееСостояниеЭД = Перечисления.СостоянияОбменСБанками.НеСформирован Тогда
					ТекстСостоянияЭД = НСтр("ru = 'Не сформирован'");
				ИначеЕсли ТекущееСостояниеЭД = Перечисления.СостоянияОбменСБанками.ТребуетсяОтправка Тогда
					ТекстСостоянияЭД = НСтр("ru = 'Требуется отправка'");
				ИначеЕсли ТекущееСостояниеЭД = Перечисления.СостоянияОбменСБанками.ТребуетсяПодтверждение Тогда
					ТекстСостоянияЭД = НСтр("ru = 'Требуется подтверждение по SMS'");
				Иначе
					ТекстСостоянияЭД = Строка(ТекущееСостояниеЭД);
				КонецЕсли;
			КонецЕсли;
			
			ДействующиеПараметрыОбмена = ОбменСБанкамиСлужебный.ДействующиеПараметрыОбмена(СсылкаНаВладельца);
				
			Если ДействующиеПараметрыОбмена.НастройкаОбменаДействует
				И ДействующиеПараметрыОбмена.ВидЭДПоддерживаетсяБанком Тогда
				
				Гиперссылка = Истина;
				Если Не ЗначениеЗаполнено(ТекстСостоянияЭД) Тогда
					Гиперссылка = Ложь;
					ТекстСостоянияЭД = НСтр("ru = 'ЭДО не начат'");
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(ТекстСостоянияЭД) Тогда
					ШаблонСостоянияЭД = НСтр("ru = '%1 (настройка обмена недействительна)'");
					ТекстСостоянияЭД = СтрШаблон(ШаблонСостоянияЭД, ТекстСостоянияЭД);
					Гиперссылка = Истина;
				Иначе
					Если ДействующиеПараметрыОбмена.НастройкаОбменаДействует
						И НЕ ДействующиеПараметрыОбмена.ВидЭДПоддерживаетсяБанком Тогда
						ТекстСостоянияЭД = НСтр("ru = 'Данный вид электронного документа банк не принимает'");
					Иначе
						ТекстСостоянияЭД = НСтр("ru = 'Прямой обмен с банком не подключен'");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекстСостоянияЭД = НСтр("ru = 'Прямой обмен с банками отключен'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСостоянияЭД;
	
КонецФункции

// Запускает фоновое задание по обработке электронных документов.
//
// Параметры:
//  Параметры - Структура - параметры обработки документов. См. описание в ОбменСБанкамиСлужебный.ОбработатьЭлектронныеДокументы.
// 
// Возвращаемое значение:
//  Структура - см. описание в ДлительныеОперации.ВыполнитьВФоне.
//
Функция ЗапускЗаданияПоОбработкеЭлектронныхДокументов(Параметры) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обработка электронных документов'");
	
	Параметры.Вставить("СессииОбменСБанками", ПараметрыСеанса.СессииОбменСБанками);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ОбработатьЭлектронныеДокументы", Параметры, ПараметрыВыполнения);
	
КонецФункции

#КонецОбласти

#Область ОбработкаСообщенийОбмена

// Меняет статус и состояние исполненных платежных поручений по выписке банка.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - документ выписки банка.
//
Процедура ОпределитьИсполненныеПлатежныеПоручения(Знач СообщениеОбмена) Экспорт
	
	МассивВнешнихИдентификаторов = МассивИдентификаторовВыпискиБанка(СообщениеОбмена);
	
	Если Не МассивВнешнихИдентификаторов.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "НастройкаОбмена");
	ПрограммаБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ПрограммаБанка");
	
	ОбменСБанкамиСлужебный.ОтметитьИсполненныеПлатежныеДокументы(
		НастройкаОбмена, ПрограммаБанка, МассивВнешнихИдентификаторов);
	
КонецПроцедуры

// Обновляет двоичные данные присоединенного файла сообщения обмена.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщенияОбмена - ссылка на сообщение обмена;
//  ДвоичныеДанныеЭД - ДвоичныеДанные - данные, которые нужно записать в присоединенный файл.
//
Процедура ОбновитьДанныеЭД(Знач СообщениеОбмена, Знач ДвоичныеДанныеЭД) Экспорт
	
	ПрисоединенныйФайл = ПрисоединенныйФайл(СообщениеОбмена);
	ИнформацияОФайле = Новый Структура;
	ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭД));
	ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
	
	РаботаСФайлами.ОбновитьФайл(ПрисоединенныйФайл, ИнформацияОФайле);
	
КонецПроцедуры

// Получает сопоставление владельцев и актуальных ЭД.
//
// Параметры:
//  МассивСсылокНаВладельцев - Массив - массив ссылок на владельцев электронных документов, данные которых необходимо получить.
//
// Возвращаемое значение:
//  Соответствие - владельцы и сообщения обмена:
//     * Ключ - ЛюбаяСсылка - ссылка на владельца сообщения;
//     * Значение - ДокументСсылка.СообщениеОбменСБанками - найденное сообщение обмена.
//
Функция СообщенияОбменаПоВладельцам(МассивСсылокНаВладельцев) Экспорт
	
	СоответствиеВладельцевИСообщенийОбмена = Новый Соответствие;
	
	Запрос = Новый Запрос;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект КАК СсылкаНаОбъект,
	|	СостоянияЭД.СообщениеОбмена КАК СообщениеОбмена
	|ИЗ
	|	РегистрСведений.СостоянияОбменСБанками КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылокНаВладельцев)";
	Запрос.УстановитьПараметр("МассивСсылокНаВладельцев", МассивСсылокНаВладельцев);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		СоответствиеВладельцевИСообщенийОбмена.Вставить(Результат.СсылкаНаОбъект, Результат.СообщениеОбмена);
	КонецЦикла;
	
	Возврат СоответствиеВладельцевИСообщенийОбмена;
	
КонецФункции

// Получает данные о владельцах сообщений обмена.
//
// Параметры:
//  МассивСообщений - Массив - ссылки на сообщения обмена, владельцев которых нужно определить.
//
// Возвращаемое значение:
//  Массив - владельцы сообщений обмена
//     * ЛюбаяСсылка - ссылка на владельца сообщения.
//
Функция ВладельцыСообщенийОбмена(МассивСообщений) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект КАК СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.СостоянияОбменСБанками КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СообщениеОбмена В(&МассивСообщенийОбмена)";
	Запрос.УстановитьПараметр("МассивСообщенийОбмена", МассивСообщений);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СсылкаНаОбъект");
	
	Возврат Результат;
	
КонецФункции

// Изменяет реквизиты сообщения обмена.
//
// Параметры:
//    СообщениеОбмена - СправочникСсылка.СообщениеОбменСБанками - изменяемое сообщение,
//    Реквизиты - Структура - изменяемые реквизиты. Названия ключей совпадают с названиями реквизитов справочника.
//
Процедура ИзменитьСообщениеОбмена(СообщениеОбмена, Знач Реквизиты) Экспорт
	
	СообщениеОбменаОбъект = СообщениеОбмена.ПолучитьОбъект();
	Попытка
		СообщениеОбменаОбъект.Заблокировать();
	Исключение
		ВидОперации = НСтр("ru = 'Изменение параметров сообщения'");
		ТекстОшибки = НСтр("ru = 'Не удалось заблокировать сообщение обмена: %1
							|Причина: %2'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтрШаблон(
			ТекстОшибки, СообщениеОбмена, ПодробноеПредставлениеОшибки);
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Не удалось изменить сообщение обмена: %1
									|Причина: %2
									|Операция не выполнена.'");
		ТекстСообщения = СтрШаблон(
			ТекстСообщения, СообщениеОбмена, КраткоеПредставлениеОшибки);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, , "ОбменСБанками", СообщениеОбмена);
		Возврат;
	КонецПопытки;
	
	Если Реквизиты.Свойство("ДополнительныеДанные") Тогда
		
		Если ЗначениеЗаполнено(СообщениеОбменаОбъект.ДополнительныеДанные) Тогда
			ДополнительныеДанные = СообщениеОбменаОбъект.ДополнительныеДанные.Получить();
			Если Не ЗначениеЗаполнено(ДополнительныеДанные) Тогда
				ДополнительныеДанные = Новый Структура;
			КонецЕсли;
		Иначе
			ДополнительныеДанные = Реквизиты.ДополнительныеДанные;
		КонецЕсли;
		
		Для Каждого КлючЗначение Из Реквизиты.ДополнительныеДанные Цикл
			ДополнительныеДанные.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		СообщениеОбменаОбъект.ДополнительныеДанные = Новый ХранилищеЗначения(ДополнительныеДанные);
	
		Реквизиты.Удалить("ДополнительныеДанные");
		
	КонецЕсли;
	
	ДополнительныеСвойства = Неопределено;
	Если Реквизиты.Свойство("ДополнительныеСвойства", ДополнительныеСвойства) 
		И ЗначениеЗаполнено(ДополнительныеСвойства) Тогда
		Для Каждого КлючЗначение Из ДополнительныеСвойства Цикл
			СообщениеОбменаОбъект.ДополнительныеСвойства.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если Реквизиты.Свойство("Статус") И Реквизиты.Статус <> СообщениеОбменаОбъект.Статус Тогда
		Реквизиты.Вставить("ДатаИзмененияСтатуса", ТекущаяДатаСеанса());
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СообщениеОбменаОбъект, Реквизиты);
	
	СообщениеОбменаОбъект.Записать();
	
	УстановитьПривилегированныйРежим(Истина);
	Если Реквизиты.Свойство("УдалитьЭП") Тогда
		ПрисоединенныйФайл = ПрисоединенныйФайл(СообщениеОбмена, Ложь);
		Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
			МассивПодписей = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл);
			Для Каждого Подпись Из МассивПодписей Цикл
				ЭлектроннаяПодпись.УдалитьПодпись(ПрисоединенныйФайл, 1);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Реквизиты.Свойство("АдресФайлаВоВременномХранилище") Тогда
		ПрисоединенныйФайл = ПрисоединенныйФайл(СообщениеОбмена, Ложь);
		Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
			Реквизиты.Вставить("АдресВременногоХранилищаТекста");
			РаботаСФайлами.ОбновитьФайл(ПрисоединенныйФайл, Реквизиты);
		Иначе
			Представление = Строка(СообщениеОбмена);
			Название = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(Представление);
			НазваниеФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Название, "");
			ПараметрыФайла = Новый Структура();
			ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", СообщениеОбмена);
			ПараметрыФайла.Вставить("ИмяБезРасширения", НазваниеФайла);
			ПараметрыФайла.Вставить("РасширениеБезТочки", "xml");
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
			РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, Реквизиты.АдресФайлаВоВременномХранилище);
		КонецЕсли;
	КонецЕсли;
	
	СообщениеОбменаОбъект.Разблокировать();
	
КонецПроцедуры

// Устанавливает статусы сообщений обмена.
//
// Параметры:
//  МассивСообщенийОбмена - Массив - документы, для которых меняется статус:
//    * ДокументСсылка.СообщенияОбменСБанками - изменяемое сообщение.
//  Статус - ПеречислениеСсылка.СтатусыОбменСБанками - новый статус сообщения обмена.
//
Процедура УстановитьСтатусыСообщенийОбмена(Знач МассивСообщенийОбмена, Знач Статус) Экспорт
	
	Для Каждого СообщениеОбмена Из МассивСообщенийОбмена Цикл
		ОбменСБанкамиСлужебный.УстановитьСтатусСообщенияОбмена(СообщениеОбмена, Статус);
	КонецЦикла;
	
КонецПроцедуры

// Используется для получения списка представлений сообщений обмена с клиента.
//
// Параметры:
//   МассивСообщенийОбмена - Массив - содержит ссылки на сообщения обмена.
//    * ДокументСсылка.СообщениеОбменСБанками - сообщения для которых надо сформировать список представлений.
//
// Возвращаемое значение:
//  Соответствие - Ключ - ссылка на объект, Значение - представление.
//      * Ключ     - ссылка на объект,
//      * Значение - значение представления.
// 
Функция СписокПредставленийСообщенийОбмена(МассивСообщенийОбмена) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСообщенийОбмена, "ПредставлениеДокумента");
	
КонецФункции

// Предназначен для возврата на клиента двоичных данных ЭД, установленных подписей и сертификатов для дальнейшей
// проверки валидности подписей на клиенте.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена.
//
// Возвращаемое значение:
//  Структура - данные для проверки подписей электронного документа.
//    * ДанныеЭД - ДвоичныеДанные - двоичные данные электронного документа;
//    * Подписи - Массив - данные электронных подписей
//      ** Значение - Структура - содержит следующие поля:
//        *** НомерСтроки - Число - номер строки таблицы электронных подписей
//        *** Сертификат - ДвоичныеДанные - двоичные данные сертификата подписи
//        *** Подпись - ДвоичныеДанные - двоичные данные электронной подписи
//    * НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком
//  Неопределено - не найдены двоичные данные для проверки подписи.
//
Функция СтруктураСодержимогоСообщенияОбмена(СообщениеОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭП.ПорядковыйНомер КАК НомерСтроки,
	|	ЭП.Сертификат,
	|	ЭП.Подпись,
	|	ЭП.ПодписанныйОбъект.ВладелецФайла.НастройкаОбмена.ПрограммаБанка КАК ПрограммаБанка,
	|	ЭП.ПодписанныйОбъект.ВладелецФайла.ВидЭД КАК ВидЭД,
	|	ЭП.ПодписанныйОбъект.ВладелецФайла.НастройкаОбмена КАК НастройкаОбмена
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
	|ГДЕ
	|	ЭП.ПодписанныйОбъект.ВладелецФайла = &ВладелецФайла
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Запрос.УстановитьПараметр("ВладелецФайла", СообщениеОбмена);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	МассивПодписей = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураПодписей = Новый Структура;
		СтруктураПодписей.Вставить("НомерСтроки", Выборка.НомерСтроки);
		СтруктураПодписей.Вставить("Сертификат",  Выборка.Сертификат.Получить());
		СтруктураПодписей.Вставить("Подпись",     Выборка.Подпись.Получить());
		МассивПодписей.Добавить(СтруктураПодписей);
	КонецЦикла;
	Если Выборка.Количество() > 0 И Выборка.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
		И Выборка.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение Тогда
		
		СлужебныйЭД = ОбменСБанкамиСлужебный.ПодчиненноеСообщениеОбмена(
			СообщениеОбмена, Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные);
		Если Не ЗначениеЗаполнено(СлужебныйЭД) Тогда
			ТекстСообщения = НСтр("ru = 'Не обнаружены служебные данные электронного документа.
										|Операция не выполнена.'");
			ТекстОшибки = НСтр("ru = 'Не обнаружены служебные данные для сообщения обмена:
									|%1'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, СообщениеОбмена);
			ВидОперации = НСтр("ru = 'Получение служебных данных электронного документа'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ТекстОшибки, ТекстСообщения, "ОбменСБанками", СообщениеОбмена);
		Иначе
			ДанныеЭД = ДвоичныеДанныеПрисоединенногоФайла(СлужебныйЭД);
		КонецЕсли;
	Иначе
		ДанныеЭД = ДвоичныеДанныеПрисоединенногоФайла(СообщениеОбмена);
	КонецЕсли;
	
	Если ДанныеЭД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ДанныеЭД", ДанныеЭД);
	СтруктураВозврата.Вставить("Подписи", МассивПодписей);
	СтруктураВозврата.Вставить("НастройкаОбмена", Выборка.НастройкаОбмена);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Определяет сообщения обмена, требующие подтверждения.
//
// Параметры:
//  МассивСообщенийОбмена - Массив - сообщения обмена, которые были отправлены в банк.
// 
// Возвращаемое значение:
//   Массив - сообщения обмена, которые нужно дополнительно подтвердить:
//      * ДокументСсылка.СообщенияОбменСБанками - отправленное сообщение.
//
Функция СообщенияОбменаТребующиеПодтверждения(МассивСообщенийОбмена) Экспорт
	
	МассивВозврата = Новый Массив;
	ЗначенияРеквизита = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСообщенийОбмена, "Состояние");
	Для Каждого КлючЗначение Из ЗначенияРеквизита Цикл
		Если КлючЗначение.Значение = Перечисления.СостоянияОбменСБанками.ТребуетсяПодтверждение Тогда
			МассивВозврата.Добавить(КлючЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	Возврат МассивВозврата;
		
КонецФункции

#КонецОбласти

#Область ЭлектронныеПодписи

// Определяет, все ли установленные на ЭД подписи являются валидными.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка сообщение обмена.
//
// Возвращаемое значение:
//  Булево - если все подписи валидны, то возвращается Истина.
//
Функция УстановленныеПодписиВалидны(Знач СообщениеОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЭП.ПодписьВерна
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
	|ГДЕ
	|	ЭП.ПодписанныйОбъект.ВладелецФайла = &ВладелецФайла
	|	И НЕ ЭП.ПодписьВерна";
	Запрос.УстановитьПараметр("ВладелецФайла", СообщениеОбмена);
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Количество() > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Определяет необходимость стандартной криптографии для обработки документов.
//
// Параметры:
//  МассивОбъектов - Массив - содержит ссылки на документы информационной базы.
// 
// Возвращаемое значение:
//    Булево - если требуется криптография, то возвращается Истина.
//
Функция ТребуетсяКриптографияДляОбработкиДокументов(Знач МассивОбъектов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СсылкаНаДокумент Из МассивОбъектов Цикл
		
		ПараметрыЭД = ОбменСБанкамиСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаДокумент);
		
		Запрос = Новый Запрос;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТЧ_НастройкиОбмена.ИсходящийДокумент КАК ВидЭД,
		|	ТЧ_НастройкиОбмена.Ссылка КАК НастройкаОбмена,
		|	ТЧ_НастройкиОбмена.Ссылка.АутентификацияПоСертификату КАК АутентификацияПоСертификату
		|ПОМЕСТИТЬ ВТ_ТЧ_НастройкиОбмена
		|ИЗ
		|	Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК ТЧ_НастройкиОбмена
		|ГДЕ
		|	НЕ ТЧ_НастройкиОбмена.Ссылка.ПометкаУдаления
		|	И НЕ ТЧ_НастройкиОбмена.Ссылка.Недействительна
		|	И ТЧ_НастройкиОбмена.Ссылка.Организация = &Организация
		|	И ТЧ_НастройкиОбмена.Ссылка.Банк = &Банк
		|	И ТЧ_НастройкиОбмена.ИсходящийДокумент = &ВидЭД
		|	И (ТЧ_НастройкиОбмена.ИспользоватьЭП
		|			ИЛИ ТЧ_НастройкиОбмена.Ссылка.АутентификацияПоСертификату)
		|	И ТЧ_НастройкиОбмена.Ссылка.ПрограммаБанка В (ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.АльфаБанкОнлайн), ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.АсинхронныйОбмен))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сертификаты.Ссылка КАК Ссылка,
		|	ВидыЭДЭП.ВидЭД КАК ВидДокумента
		|ПОМЕСТИТЬ ВТ_Сертификаты
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
		|		ПО (ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			НастройкиОбменаСертификаты.СертификатЭП КАК СертификатЭП,
		|			ВТ_ТЧ_НастройкиОбмена.АутентификацияПоСертификату КАК АутентификацияПоСертификату
		|		ИЗ
		|			ВТ_ТЧ_НастройкиОбмена КАК ВТ_ТЧ_НастройкиОбмена
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменаСертификаты
		|				ПО ВТ_ТЧ_НастройкиОбмена.НастройкаОбмена = НастройкиОбменаСертификаты.Ссылка) КАК СертификатыИзНастроекОбмена
		|		ПО Сертификаты.Ссылка = СертификатыИзНастроекОбмена.СертификатЭП
		|ГДЕ
		|	НЕ Сертификаты.ПометкаУдаления
		|	И НЕ Сертификаты.Отозван
		|	И ВидыЭДЭП.ВидЭД = &ВидЭД
		|	И (ВидыЭДЭП.Использовать
		|			ИЛИ СертификатыИзНастроекОбмена.АутентификацияПоСертификату)
		|	И &ПроверкаПользователя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИСТИНА КАК ТребуетсяКриптография
		|ИЗ
		|	ВТ_ТЧ_НастройкиОбмена КАК ВТ_ТЧ_НастройкиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_Сертификаты
		|		ПО ВТ_ТЧ_НастройкиОбмена.ВидЭД = ВТ_Сертификаты.ВидДокумента
		|ГДЕ
		|	НЕ ВТ_Сертификаты.Ссылка ЕСТЬ NULL ";
		Запрос.УстановитьПараметр("ВидЭД", ПараметрыЭД.ВидЭД);
		Запрос.УстановитьПараметр("Организация", ПараметрыЭД.Организация);
		Запрос.УстановитьПараметр("Банк", ПараметрыЭД.Банк);
		
		Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПроверкаПользователя", "ИСТИНА");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПроверкаПользователя",
				"Сертификаты.Пользователь В (&ТекущийПользователь, &ПустойПользователь, &ПользовательНеУказан)");
			Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
			Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
			Запрос.УстановитьПараметр("ПользовательНеУказан",  Пользователи.СсылкаНеуказанногоПользователя());
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Добавляет данные подписей в сообщение обмена
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена;
//  ДанныеПодписей - Массив - набор данных электронных подписей
//    * Соответствие - данные подписи:
//       ** Ключ - ДвоичныеДанные - двоичные данные сертификата подписи;
//       ** Значение - ДвоичныеДанные - двоичные данные электронной подписи.
//
Процедура ДобавитьПодписиВСообщениеОбмена(СообщениеОбмена, ДанныеПодписей) Экспорт
	
	Для Каждого СертификатИПодпись Из ДанныеПодписей Цикл
		Для Каждого КлючЗначение Из СертификатИПодпись Цикл
			Сертификат = Новый СертификатКриптографии(КлючЗначение.Ключ);
			ОтпечатокСтрокой = Base64Строка(Сертификат.Отпечаток);
			ПредставлениеСубъекта = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(Сертификат);
			ПрисоединенныйФайл = ПрисоединенныйФайл(СообщениеОбмена);
			Если Не ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
				Продолжить;
			КонецЕсли;
			
			СвойстваПодписи = Новый Структура;
			СвойстваПодписи.Вставить("Подпись", КлючЗначение.Значение);
			СвойстваПодписи.Вставить("Отпечаток", ОтпечатокСтрокой);
			СвойстваПодписи.Вставить("КомуВыданСертификат", ПредставлениеСубъекта);
			СвойстваПодписи.Вставить("Сертификат", КлючЗначение.Ключ);
			
			ЭлектроннаяПодпись.ДобавитьПодпись(ПрисоединенныйФайл, СвойстваПодписи);
			
		КонецЦикла
	КонецЦикла;
	
КонецПроцедуры

// Сохранить данные электронных подписей, полученного из банка документа.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение обмена с банком;
//  СвойстваСертификатаБанка - Структура - свойства сертификата банка;
//  ДанныеПодписей - Массив - данные установленных подписей.
//
Процедура СохранитьДанныеЭлектронныхПодписей(Знач СообщениеОбмена, Знач СвойстваСертификатаБанка, Знач ДанныеПодписей) Экспорт
	
	Для Каждого Элемент Из ДанныеПодписей Цикл
		ДанныеПодписи = Элемент.ДанныеПодписи;
		ДобавитьПодпись(СообщениеОбмена, ДанныеПодписи, СвойстваСертификатаБанка, Элемент);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет действия с сообщениями обмена после установки электронной подписи.
//
// Параметры:
//   МассивСообщенийОбменаКОбновлениюСтатуса - Массив - массив сообщений подписанного ЭД, типа ДокументСсылка.СообщениеОбменСБанками.
//
Процедура ДействияПослеПодписанияЭДНаСервере(СоответствиеСертификатовПодписаннымЭд) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СертификатМассивЭД Из СоответствиеСертификатовПодписаннымЭд Цикл
		Сертификат = СертификатМассивЭД.Ключ;
		МассивСообщенийОбменаКОбновлениюСтатуса = СертификатМассивЭД.Значение;
		
		Для Каждого СообщениеОбмена Из МассивСообщенийОбменаКОбновлениюСтатуса Цикл
			НачатьТранзакцию();
			Попытка
				СтруктураПараметров = Новый Структура;
				Если ОбменСБанкамиСлужебный.ДокументПодписываетсяПоМаршруту(СообщениеОбмена) Тогда
					ВесМаршрута = 0;
					ЭлектронноеВзаимодействиеСлужебный.ОбновитьМаршрутПриПодписании(СообщениеОбмена, Сертификат, ВесМаршрута);
					
					ПредставлениеПрогрессаПодписания = ОбменСБанкамиСлужебный.ПредставлениеПрогрессаПодписания(
						СообщениеОбмена, ВесМаршрута);
					СтруктураПараметров.Вставить("ПредставлениеПрогрессаПодписания", ПредставлениеПрогрессаПодписания);
					
					// Это дополнительное свойство добавляется, чтобы обновить представление в регистре "СостоянияОбменСБанками".
					СтруктураПараметров.Вставить("ДополнительныеСвойства", Новый Структура("ОбновитьСостояниеОбъектовИБ"));
				КонецЕсли;
				
				Если ЭлектронныйДокументПолностьюПодписан(СообщениеОбмена) Тогда
					СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Подписан);
				Иначе
					СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.ЧастичноПодписан);
				КонецЕсли;
				ИзменитьСообщениеОбмена(СообщениеОбмена, СтруктураПараметров);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ШаблонСообщения = НСтр("ru = 'Ошибка подписи электронного документа в сообщении обмена %1'");
				ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%1", СообщениеОбмена);
				Операция = НСтр("ru = 'Установка подписи ЭП'");
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
					Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, "ОбменСБанками", СообщениеОбмена);
				Продолжить;
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Сохраняет результаты проверки ЭП, выполненные на клиенте.
//
// Параметры:
// СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена;
// МассивРезультатов - Массив - содержит результаты проверки подписей:
//    * Структура - данные одиночной записи:
//          ** ДатаПроверкиПодписи - дата - дата и время проверки подписи;
//          ** ПодписьВерна - Булево - признак валидности подписи.
//
Процедура СохранитьРезультатыПроверкиПодписей(Знач СообщениеОбмена, Знач МассивРезультатов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПрисоединенныйФайл = ПрисоединенныйФайл(СообщениеОбмена);
	
	Индекс = 0;
	Для Каждого Элемент Из МассивРезультатов Цикл
		Индекс = Индекс + 1;
		Если Элемент.Количество() Тогда
			НовЗапись = РегистрыСведений.ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
			НовЗапись.ПодписанныйОбъект = ПрисоединенныйФайл;
			НовЗапись.ПорядковыйНомер = Индекс;
			НовЗапись.Прочитать();
			НовЗапись.ПодписанныйОбъект = ПрисоединенныйФайл;
			НовЗапись.ПорядковыйНомер = Индекс;
			ЗаполнитьЗначенияСвойств(НовЗапись, Элемент);
			НовЗапись.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет добавление ЭП в электронный документ. Для исходящих документов также меняет статус.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщенияОбменСБанками - сообщение обмена с банками,
//  Подпись - ДвоичныеДанные - электронная подпись.
//  Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат подписи;
//             - Структура - свойства сертификата подписи:
//                  * Отпечаток - Строка -  отпечаток сертификата;
//                  * ДвоичныеДанные - Строка - двоичные данные сертификата;
//                  * КомуВыдан - Строка - владелец сертификата.
//  ДанныеПроверкиПодписи - Структура - результаты проверки подписи на клиенте. Содержит следующие поля:
//    * ДатаПроверкиПодписи - Дата - дата проверки подписи;
//    * ПодписьВерна - Булево - признак валидности подписи.
//
Процедура ДобавитьПодпись(Знач СообщениеОбмена, Знач Подпись, Знач Сертификат, Знач ДанныеПроверкиПодписи = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СертификатПодписи = Неопределено;
	ДанныеПодписи = Новый Структура("Подпись, УстановившийПодпись, Комментарий, ИмяФайлаПодписи, ДатаПодписи, Отпечаток,
		|Сертификат, КомуВыданСертификат");
	
	Если ТипЗнч(Сертификат) = Тип("Структура") Тогда
		ДвоичныеДанныеСертификата = Сертификат.ДвоичныеДанные;
		КомуВыданСертификат = Сертификат.КомуВыдан;
		Отпечаток = Сертификат.Отпечаток;
		Сертификат.Свойство("СертификатСсылка", СертификатПодписи); 
		
		СтруктураСвойствСертификата = Новый Структура("СерийныйНомер, КемВыдан, КомуВыдан, ДатаНачала, ДатаОкончания");
		ЗаполнитьЗначенияСвойств(СтруктураСвойствСертификата, Сертификат);
		ДанныеПодписи.Вставить("ОписаниеСертификата", СтруктураСвойствСертификата);
	Иначе
		РеквизитыСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Сертификат, "Отпечаток, ДанныеСертификата, КомуВыдан");
		Отпечаток = РеквизитыСертификата.Отпечаток;
		ДвоичныеДанныеСертификата = РеквизитыСертификата.ДанныеСертификата.Получить();
		КомуВыданСертификат = РеквизитыСертификата.КомуВыдан;
		СертификатПодписи = Сертификат;
	КонецЕсли;
	
	ДанныеПодписи.Подпись = Подпись;
	ДанныеПодписи.ДатаПодписи = ТекущаяДатаСеанса();
	ДанныеПодписи.Отпечаток = Отпечаток;
	ДанныеПодписи.Сертификат = ДвоичныеДанныеСертификата;
	ДанныеПодписи.КомуВыданСертификат = КомуВыданСертификат;
	
	Если НЕ ДанныеПроверкиПодписи = Неопределено Тогда
		ДанныеПодписи.Вставить("ДатаПроверкиПодписи", ДанныеПроверкиПодписи.ДатаПроверкиПодписи);
		ДанныеПодписи.Вставить("ПодписьВерна", ДанныеПроверкиПодписи.ПодписьВерна);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		ПрисоединенныйФайл = ПрисоединенныйФайл(СообщениеОбмена);
		РаботаСФайлами.ДобавитьПодписьКФайлу(ПрисоединенныйФайл, ДанныеПодписи);
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "Направление") = Перечисления.НаправленияЭД.Исходящий Тогда
			СтруктураПараметров = Новый Структура;
			Если ОбменСБанкамиСлужебный.ДокументПодписываетсяПоМаршруту(СообщениеОбмена) Тогда
				ВесМаршрута = 0;
				ЭлектронноеВзаимодействиеСлужебный.ОбновитьМаршрутПриПодписании(СообщениеОбмена, СертификатПодписи, ВесМаршрута);
				
				ПредставлениеПрогрессаПодписания = ОбменСБанкамиСлужебный.ПредставлениеПрогрессаПодписания(
					СообщениеОбмена, ВесМаршрута);
				СтруктураПараметров.Вставить("ПредставлениеПрогрессаПодписания", ПредставлениеПрогрессаПодписания);
				
				// Это дополнительное свойство добавляется, чтобы обновить представление в регистре "СостоянияОбменСБанками".
				СтруктураПараметров.Вставить("ДополнительныеСвойства", Новый Структура("ОбновитьСостояниеОбъектовИБ"));
			КонецЕсли;
			
			Если ЭлектронныйДокументПолностьюПодписан(СообщениеОбмена) Тогда
				СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Подписан);
			Иначе
				СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.ЧастичноПодписан);
			КонецЕсли;
			ИзменитьСообщениеОбмена(СообщениеОбмена, СтруктураПараметров);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонСообщения = НСтр("ru = 'Ошибка сохранения подписи электронного документа %1'");
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%1", ПрисоединенныйФайл);
		ВидОперации = НСтр("ru = 'Сохранение данных электронной подписи'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ИнформацияОбОшибке, ТекстСообщения, "ОбменСБанками", СообщениеОбмена);
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

// Определяет готов ли электронный документ к отправке.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщенияОбменСБанками - ссылка на проверяемое сообщение обмена.
//
// Возвращаемое значение:
//  Булево - если документ полностью подписан, тогда Истина, иначе Ложь.
//
Функция ЭлектронныйДокументПолностьюПодписан(СообщениеОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиОбменСБанками.ИспользоватьЭП
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК НастройкиОбменСБанками
	|ГДЕ
	|	НастройкиОбменСБанками.ИспользоватьЭП
	|	И НастройкиОбменСБанками.ИсходящийДокумент = &ВидЭД
	|	И НастройкиОбменСБанками.Ссылка = &НастройкаОбмена
	|;
	|
	|ВЫБРАТЬ
	|	Сертификаты.Ссылка КАК Сертификат,
	|	ЭП.Отпечаток КАК Отпечаток,
	|	ЭП.ПодписанныйОбъект.ВладелецФайла.ВидЭД КАК ВидЭД,
	|	ЭП.ПодписанныйОбъект.ВладелецФайла.НастройкаОбмена КАК НастройкаОбмена
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|		ПО ЭП.Отпечаток = Сертификаты.Отпечаток
	|ГДЕ
	|	ЭП.ПодписанныйОбъект.ВладелецФайла = &СообщениеОбмена
	|;";
	
	РеквизитыСообщенияОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеОбмена, "НастройкаОбмена, ВидЭД");
	ВидыДокументовПодписываемыхПоМаршруту = ОбменСБанкамиСлужебныйПовтИсп.ВидыДокументовПодписываемыхПоМаршруту(Ложь);

	ФлагПодписанПолностью = Истина;
	
	Запрос.УстановитьПараметр("НастройкаОбмена", РеквизитыСообщенияОбмена.НастройкаОбмена);
	Запрос.УстановитьПараметр("СообщениеОбмена", СообщениеОбмена);
	Запрос.УстановитьПараметр("ВидЭД", РеквизитыСообщенияОбмена.ВидЭД);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ИспользоватьЭП 				= Не МассивРезультатов[0].Пустой();
	ЕстьУстановленныеПодписи 	= Не МассивРезультатов[1].Пустой();
	ПодписываетсяПоМаршруту		= ВидыДокументовПодписываемыхПоМаршруту.Найти(РеквизитыСообщенияОбмена.ВидЭД) <> Неопределено;
	МаршрутПодписанияЗавершен	= ЭлектронноеВзаимодействиеСлужебный.МаршрутПодписанияЗавершен(СообщениеОбмена);
	
	ФлагПодписанПолностью = Не ИспользоватьЭП 
		ИЛИ (ЕстьУстановленныеПодписи 
			И (Не ПодписываетсяПоМаршруту 
				ИЛИ МаршрутПодписанияЗавершен));
	
	Возврат ФлагПодписанПолностью;
	
КонецФункции

#КонецОбласти

#Область ОбработкаПакетов

// Устанавливает новый статус пакета.
//
// Параметры:
//  Пакет - ДокументСсылка.ПакетОбменСБанками - ссылка на пакет, у которого меняется статус.
//  СтатусПакета - ПеречислениеСсылка.СтатусыПакетовЭД - новый статус пакета.
//
Процедура УстановитьСтатусПакета(Знач Пакет, Знач СтатусПакета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПакетЭДОбъект = Пакет.ПолучитьОбъект();
	ПакетЭДОбъект.Статус = СтатусПакета;
	ПакетЭДОбъект.Записать();
	
КонецПроцедуры

// Читает файл, полученный из банка и возвращает идентификаторы пакетов, которых еще нет в информационной базе.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком;
//  ДанныеФайлаBase64 - Строка - двоичные данные файла, полученного из банка в формате Base64;
//  МассивИдентификаторов - Массив - содержит идентификаторы новых пакетов банка:
//     * Строка - идентификатор пакета.
//  ЕстьОшибка - Булево - при разборе файла произошла ошибка.
//
Процедура ПрочитатьИдентификаторыПакетов(Знач НастройкаОбмена, Знач ДанныеФайлаBase64, МассивИдентификаторов, ЕстьОшибка) Экспорт
	
	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанныеФайла = Base64Значение(ДанныеФайлаBase64);
	ДвоичныеДанныеФайла.Записать(ВремФайл);
	
	Попытка
		ОбменСБанкамиСлужебный.ПрочитатьИдентификаторыПакетов(НастройкаОбмена, ВремФайл, МассивИдентификаторов);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), НастройкаОбмена);
		ЕстьОшибка = Истина;
	КонецПопытки
	
КонецПроцедуры

// Получает список подготовленных к отправке пакетов.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена.
// 
// Возвращаемое значение:
// Массив - список пакетов обмена к отправке
//   * ДокументСсылка.ПакетОбменСБанками - готовый к отправке пакет.
//
Функция ПодготовленныеКОтправкеПакетыЭДО(НастройкаОбмена) Экспорт
	
	ЗапросПодготовленныхПакетов = Новый Запрос;
	ЗапросПодготовленныхПакетов.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПакетЭД.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПакетОбменСБанками КАК ПакетЭД
	|ГДЕ
	|	НЕ ПакетЭД.ПометкаУдаления
	|	И ПакетЭД.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.ПодготовленКОтправке)
	|	И ПакетЭД.НастройкаОбмена = &НастройкаОбмена";
	ЗапросПодготовленныхПакетов.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	
	Результат = ЗапросПодготовленныхПакетов.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

// Обновляет статус пакета обмена, а также сообщений обмена, которые находятся в табличной части.
//
// Параметры:
//    ПакетОбменСБанками - ДокументСсылка.ПакетОбменСБанками - ссылка на пакет обмена;
//    НовыйСтатусПакетаЭД - ПеречислениеСсылка.СтатусыПакетовЭД - назначаемый статус пакета;
//    СтруктураПараметров - Структура - изменяемые реквизиты сообщений обмена, входящих в пакет.
//    СообщенияОбмена - Массив - Массив ссылок на сообщения, которые есть в пакете обмена;
//
Процедура ОбновитьСтатусыДокументовПакетаЭДО(Знач ПакетОбменСБанками, Знач НовыйСтатусПакетаЭД, Знач СтруктураПараметров, СообщенияОбмена = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПакетОбменСБанками) Тогда
		Возврат;
	КонецЕсли;
	
	СообщенияОбмена = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПакетОбменСБанкамиСообщения.Сообщение КАК Сообщение
		|ИЗ
		|	Документ.ПакетОбменСБанками.Сообщения КАК ПакетОбменСБанкамиСообщения
		|ГДЕ
		|	ПакетОбменСБанкамиСообщения.Ссылка = &ПакетОбменСБанками
		|	И ИСТИНА";
		Если НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Доставлен Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИСТИНА",
				"ПакетОбменСБанкамиСообщения.Сообщение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Отправлен)");
		КонецЕсли;
		Запрос.УстановитьПараметр("ПакетОбменСБанками", ПакетОбменСБанками);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Отправлен Тогда
				ДополнительныеДанные = Новый Структура("ДатаПоступления", ТекущаяДатаСеанса());
				СтруктураПараметров.Вставить("ДополнительныеДанные", ДополнительныеДанные);
			КонецЕсли;
			ИзменитьСообщениеОбмена(Выборка.Сообщение, СтруктураПараметров);
			СообщенияОбмена.Добавить(Выборка.Сообщение);
		КонецЦикла;
		
		ПакетОбъект = ПакетОбменСБанками.ПолучитьОбъект();
		ПакетОбъект.Статус = НовыйСтатусПакетаЭД;
		ПакетОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Операция = НСтр("ru = 'Смена статуса пакета ЭДО и обновление статусов ЭД'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ТекстОшибки, ТекстСообщения, "ОбменСБанками", ПакетОбменСБанками);
	КонецПопытки;
	
КонецПроцедуры

// Только для внутреннего использования. Создает и отправляет пакеты электронных документов.
//
// Параметры:
//   СообщенияОбмена - Массив - Массив ссылок на сообщения, которые надо включить в пакет;
//   СоотвНастроекОбменаИПараметровСертификатов - Соответствие - параметры настроек обмена.
//
// Возвращаемое значение:
//    Структура - результат создания и отправки, вида:
//      * КолПодготовленных - Число - количество пакетов подготовленных к отправке;
//      * ОтправленныеДокументы - Массив - отправленные документы информационной базы;
//         ** ДокументСсылка - ссылка на отправленный документ 
//      * ОтправленныеСообщенияОбмена - Массив - отправленные сообщения обмена, даже если была ошибка передачи;
//         ** ДокументСсылка.СообщениеОбменСБанками - ссылка на электронный документ.
//      * КоличествоОтправленных - Число - количество отправленных документов;
//      * ДанныеДляОтправкиЧерезДопОбработку - Соответствие - настройки обмена и данные для отправки.
//
Функция СоздатьИОтправитьДокументыПЭД(Знач СообщенияОбмена, Знач СоотвНастроекОбменаИПараметровСертификатов = Неопределено) Экспорт
	
	МассивСтруктурПакетовЭД = СоздатьДокументыПакетовЭД(СообщенияОбмена);
	СтруктураРезультата = Новый Структура;
	
	СтруктураРезультата.Вставить("КолПодготовленных", 0);
	СтруктураРезультата.Вставить("ОтправленныеДокументы", Новый Массив);
	СтруктураРезультата.Вставить("ОтправленныеСообщенияОбмена", Новый Массив);

	Для Каждого Элемент Из МассивСтруктурПакетовЭД Цикл
		Если Элемент.ЭтоНовый Тогда
			СтруктураРезультата.КолПодготовленных = СтруктураРезультата.КолПодготовленных + 1;
		КонецЕсли;
	КонецЦикла;

	КоличествоОтправленных = 0;
	МассивПакетовДляОбработкиНаКлиенте = Новый Массив;
	МассивПакетовДляОтправкиСКлиента   = Новый Массив;
	Если МассивСтруктурПакетовЭД.Количество() > 0 Тогда
		Для Каждого СтруктураПЭД Из МассивСтруктурПакетовЭД Цикл
			Если СтруктураПЭД.Свойство("ОтправкаСКлиента") Тогда
				МассивПакетовДляОтправкиСКлиента.Добавить(СтруктураПЭД.ПЭД);
				Продолжить;
			// Если пакет бы сформирован ранее, но аутентификация на сервере не производилась.
			ИначеЕсли СтруктураПЭД.АутентификацияПоСертификату
				И СоотвНастроекОбменаИПараметровСертификатов.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			МассивПЭД = Новый Массив;
			МассивПЭД.Добавить(СтруктураПЭД.ПЭД);
			ТекстОшибки = "";
			Результат = ОбменСБанкамиСлужебный.ОтправкаПакетовЭДО(МассивПЭД, СоотвНастроекОбменаИПараметровСертификатов, ТекстОшибки);
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
			КоличествоОтправленных = КоличествоОтправленных + Результат.КоличествоОтправлено;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СтруктураРезультата.ОтправленныеДокументы, Результат.ОтправленныеДокументы);
				
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СтруктураРезультата.ОтправленныеСообщенияОбмена, Результат.ОтправленныеСообщенияОбмена);

		КонецЦикла;
	КонецЕсли;
	СтруктураРезультата.Вставить("КоличествоОтправленных", КоличествоОтправленных);
	Если МассивПакетовДляОтправкиСКлиента.Количество() > 0 Тогда
		ДанныеДляОтправкиЧерезДопОбработку = ДанныеДляОтправкиВБанкЧерезДопОбработку(МассивПакетовДляОтправкиСКлиента);
		СтруктураРезультата.Вставить("ДанныеДляОтправкиЧерезДопОбработку", ДанныеДляОтправкиЧерезДопОбработку);
	КонецЕсли;
	Возврат СтруктураРезультата;
	
КонецФункции

#КонецОбласти

#Область Сертификаты

// Возвращает сертификаты в формате BASE64 для каждого сообщения обмена.
//
// Параметры:
//  МассивСообщенийОбмена - массив - сообщения обмена для получения сертификатов:
//      * ДокументСсылка.СообщениеОбменСБанками - сообщение обмена с банком.
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//
// Возвращаемое значение:
//  Соответствие - данные сертификатов подписи:
//    * Ключ - ДокументСсылка.СообщениеОбменаСБанками - ссылка на сообщение обмена;
//    * Значение - массив - данные сертификатов подписи:
//        ** Строка - сертификат в формате Base64;
//
Функция ДанныеСертификатовСообщенийОбмена(Знач МассивСообщенийОбмена, Знач НастройкаОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщениеОбменСБанками.Ссылка КАК СообщениеОбмена,
	|	ЭП.Сертификат КАК Сертификат
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭП
	|		ПО СообщениеОбменСБанками.Ссылка = ЭП.ПодписанныйОбъект.ВладелецФайла
	|ГДЕ
	|	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	|	И СообщениеОбменСБанками.Ссылка В(&МассивСообщенийОбмена)
	|ИТОГИ ПО
	|	СообщениеОбмена";
	
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.УстановитьПараметр("МассивСообщенийОбмена", МассивСообщенийОбмена);
	ВыборкаСообщениеОбмена = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СоответствиеВозврата = Новый Соответствие;
	
	Пока ВыборкаСообщениеОбмена.Следующий() Цикл
		ВыборкаСертификаты = ВыборкаСообщениеОбмена.Выбрать();
		МассивДанныхСертификатов = Новый Массив;
		Пока ВыборкаСертификаты.Следующий() И НЕ ВыборкаСертификаты.Сертификат = NULL Цикл
			МассивДанныхСертификатов.Добавить(ВыборкаСертификаты.Сертификат.Получить());
		КонецЦикла;
		СоответствиеВозврата.Вставить(ВыборкаСообщениеОбмена.СообщениеОбмена, МассивДанныхСертификатов);
	КонецЦикла;

	Возврат СоответствиеВозврата;
	
КонецФункции

// Возвращает соответствие с данными о доступных сертификатах.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена.
//
// Возвращаемое значение:
//  Соответствие - содержит данные сертификатов:
//    * Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат;
//    * Значение - Структура - реквизиты сертификата:
//          ** Отпечаток - Строка - отпечаток сертификата;
//          ** ДанныеСертификата - ДвоичныеДанные - данные сертификата;
//          ** КомуВыдан - Строка - кому выдан сертификат.
//
Функция ДоступныеСертификаты(Знач НастройкаОбмена) Экспорт
	
	ДанныеВозврата = Новый Соответствие;
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования) Тогда
		Возврат ДанныеВозврата;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сертификаты.Ссылка,
	|	Сертификаты.ДанныеСертификата КАК ДанныеСертификата,
	|	ЛОЖЬ КАК ПарольПолучен,
	|	Сертификаты.Отпечаток,
	|	Сертификаты.КомуВыдан
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК СертификатыПодписейОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|		ПО СертификатыПодписейОрганизации.СертификатЭП = Сертификаты.Ссылка
	|ГДЕ
	|	СертификатыПодписейОрганизации.Ссылка = &НастройкаОбмена
	|	И &ПроверкаПользователя";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	
	Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПользовательНеУказан", Пользователи.СсылкаНеуказанногоПользователя());
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя",
			"Сертификаты.Пользователь В (&ТекущийПользователь, &ПустойПользователь, &ПользовательНеУказан)");
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Структура = Новый Структура("ПарольСертификата, Отпечаток, ДанныеСертификата, ПарольПолучен, КомуВыдан");
		ЗаполнитьЗначенияСвойств(Структура, Результат);
		Структура.Вставить("ДанныеСертификата", Результат.ДанныеСертификата.Получить());
		ДанныеВозврата.Вставить(Результат.Ссылка, Структура);
	КонецЦикла;
	Возврат ДанныеВозврата;
	
КонецФункции

// Возвращает соответствие с данными о доступных сертификатах.
//
// Параметры:
//   МассивОтпечатковСертификатов - Массив - массив структур сертификатов,
//     установленных в личном хранилище на компьютере пользователя.
//   НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - будут выбраны сертификаты,
//     зарегистрированные в указанной настройке и доступные текущему пользователю.
//
// Возвращаемое значение:
//  Соответствие - соответствие доступных сертификатов, вида:
//    * Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат.
//    * Значение - Структура - данные сертификата.
//
Функция СоответствиеДоступныхСертификатовИПараметров(Знач МассивОтпечатковСертификатов, Знач НастройкаОбмена = Неопределено) Экспорт
	
	Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
		МассивОтпечатковСервера = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковСертификатов, МассивОтпечатковСервера);
	КонецЕсли;
	МассивСтруктур = МассивСтруктурДоступныхДляПодписиСертификатов(МассивОтпечатковСертификатов, НастройкаОбмена);
	
	СоответствиеСертификатовИПаролей = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ПарольКСертификату(,МассивОтпечатковСертификатов);
	ДанныеВозврата = Новый Соответствие;
	Если ТипЗнч(МассивСтруктур) = Тип("Массив") Тогда
		Для Каждого Элемент Из МассивСтруктур Цикл
			ПарольКСертификату = СоответствиеСертификатовИПаролей.Получить(Элемент.Сертификат);
			Если ПарольКСертификату <> Неопределено Тогда
				Элемент.ПарольСертификата = ПарольКСертификату;
				Элемент.ПарольПолучен = Истина;
			КонецЕсли;
			ДанныеВозврата.Вставить(Элемент.Сертификат, Элемент);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеВозврата;
	
КонецФункции

// Возвращает структуру с полями сертификата.
//
// Параметры:
//   ДвоичныеДанныеСертификата - ДвоичныеДанные - данные сертификата криптографии.
//
// Возвращаемое значение:
//   Структура - Структура с полями сертификата.
//
Функция СтруктураСертификата(Знач ДвоичныеДанныеСертификата) Экспорт
	
	Попытка
		НовыйСертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
	Исключение
		ВидОперации = НСтр("ru = 'Загрузка сертификата с банковского ключа'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТестСообщения = НСтр("ru = 'Не удалось прочитать файл сертификата, операция прервана.'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ПодробныйТекстОшибки, ТестСообщения, "ОбменСБанками");
		Возврат Неопределено;
	КонецПопытки;
	
	СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(НовыйСертификат);
	
	Возврат СтруктураСертификата;
	
КонецФункции

// Возвращает данные сертификатов используемых в настройке обмена.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена.
//
// Возвращаемое значение:
//  Массив - Массив данных сертификатов в виде структур.
//
Функция ДанныеСертификатовБанка(НастройкаОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(НастройкиОбменСБанкамиСертификатыЭП.СертификатЭП) КАК ВсегоСертификатов
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменСБанкамиСертификатыЭП
	|ГДЕ
	|	НастройкиОбменСБанкамиСертификатыЭП.Ссылка = &НастройкаОбмена
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиОбменСБанкамиСертификатыЭП.СертификатЭП КАК Сертификат,
	|	НастройкиОбменСБанкамиСертификатыЭП.СертификатЭП.ДействителенДо КАК ДействителенДо
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменСБанкамиСертификатыЭП
	|ГДЕ
	|	&ПроверкаПользователя
	|	И НастройкиОбменСБанкамиСертификатыЭП.Ссылка = &НастройкаОбмена";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	
	Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПользовательНеУказан", Пользователи.СсылкаНеуказанногоПользователя());
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя",
			"НастройкиОбменСБанкамиСертификатыЭП.СертификатЭП.Пользователь В (&ТекущийПользователь, &ПустойПользователь, &ПользовательНеУказан)");
	КонецЕсли;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаПоКоличеству = МассивРезультатов[0].Выбрать();
	ВыборкаПоКоличеству.Следующий();
	ВсегоСертификатов = ВыборкаПоКоличеству.ВсегоСертификатов;

	ВыборкаСертификаты = МассивРезультатов[1].Выбрать();
	
	Если ВыборкаСертификаты.Количество() = 0 И ВсегоСертификатов > 0 Тогда
		ТекстСообщения =  НСтр("ru = 'Сертификат подписи недоступен для текущего пользователя.
								|Проверьте настройки обмена или обратитесь к администратору.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	МассивСертификатов = Новый Массив;
	Пока ВыборкаСертификаты.Следующий() Цикл
		Если ВыборкаСертификаты.ДействителенДо < ТекущаяДатаСеанса() Тогда
			ШаблонСообщения = НСтр("ru = 'Закончился срок действия сертификата: %1
										|Получите новый сертификат'");
			ТекстСообщения = СтрШаблон(
				ШаблонСообщения, ВыборкаСертификаты.Сертификат);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		МассивСертификатов.Добавить(ВыборкаСертификаты.Сертификат);
	КонецЦикла;
	
	Результат = ДанныеСертификатов(МассивСертификатов);
	Для Каждого ДанныеСертификата Из Результат Цикл
		ДанныеСертификата.Вставить("ПрограммаБанка", НастройкаОбмена.ПрограммаБанка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные переданных сертификатов.
//
// Параметры:
//  Сертификаты - Массив - содержит ссылки на сертификаты, по которым нужно получить данные.
//
// Возвращаемое значение:
//  Массив - Массив данных сертификатов в виде структур.
//
Функция ДанныеСертификатов(Сертификаты) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЛОЖЬ КАК ПарольПолучен,
	|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя,
	|	Сертификаты.Ссылка КАК Сертификат,
	|	Сертификаты.ДанныеСертификата КАК ДанныеСертификата,
	|	Сертификаты.Отпечаток КАК Отпечаток,
	|	Сертификаты.ДействителенДо КАК ДействителенДо,
	|	Сертификаты.ПользовательОповещенОСрокеДействия КАК ПользовательОповещенОСрокеДействия
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|ГДЕ
	|	Сертификаты.Ссылка В (&Сертификаты)";
	Запрос.УстановитьПараметр("Сертификаты", Сертификаты);
	ВыборкаСертификаты = Запрос.Выполнить().Выбрать();
	
	ДанныеСертификатов = Новый Массив;
	Пока ВыборкаСертификаты.Следующий() Цикл
		ДанныеСертификата = Новый Структура("Сертификат, ДвоичныеДанныеСертификата, ЗапомнитьПарольКСертификату,
			|ПарольПользователя, ПарольПолучен, Отпечаток, ДействителенДо, ПользовательОповещенОСрокеДействия");
		ЗаполнитьЗначенияСвойств(ДанныеСертификата, ВыборкаСертификаты);
		ДанныеСертификата.ДвоичныеДанныеСертификата = ВыборкаСертификаты.ДанныеСертификата.Получить();
		ДанныеСертификатов.Добавить(ДанныеСертификата);
	КонецЦикла;
	
	Возврат ДанныеСертификатов;

КонецФункции 

// Получает двоичные данные сертификатов по настройке обмена
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
// 
// Возвращаемое значение:
//  Массив - содержит данные доступных сертификатов настройки обмена
//    * Структура - данные сертификата:
//         * СертификатСсылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат
//         * ДанныеСертификата - ДвоичныеДанные - данные сертификата.
//
Функция ДанныеСертификатовПоНастройкеОбмена(Знач НастройкаОбмена) Экспорт
	
	МассивВозврата = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП.Ссылка КАК Ссылка,
	|	НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП.ДанныеСертификата КАК ДанныеСертификата
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменСБанкамиСертификатыПодписейОрганизации
	|ГДЕ
	|	НастройкиОбменСБанкамиСертификатыПодписейОрганизации.Ссылка = &НастройкаОбмена
	|	И &ПроверкаПользователя";
	
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	
	Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя", "ИСТИНА");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя",
			"НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП.Пользователь В (&ПустойПользователь, &ТекущийПользователь, &ПользовательНеУказан)");
		Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
		Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
		Запрос.УстановитьПараметр("ПользовательНеУказан", Пользователи.СсылкаНеуказанногоПользователя());
	КонецЕсли;
	
	ВыборкаСертификатовДанные = Запрос.Выполнить().Выбрать();
	Пока ВыборкаСертификатовДанные.Следующий() Цикл
		ДанныеСертификата = Новый Структура();
		ДанныеСертификата.Вставить("СертификатСсылка", ВыборкаСертификатовДанные.Ссылка);
		ДанныеСертификата.Вставить("ДвоичныеДанныеСертификата", ВыборкаСертификатовДанные.ДанныеСертификата.Получить());
		ДанныеСертификата.Вставить("ПарольСертификата", Неопределено);
		МассивВозврата.Добавить(ДанныеСертификата);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

#КонецОбласти

#Область НастройкаОбмена

// Проверяет возможность отправки документа в банк
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена
//  ВидЭД - ПеречислениеСсылка.ВидыЭДОбменСБанками - вид электронного документа
//  ТребуетсяПодпись - Булево - (возвращаемый параметр) данный вид документа необходимо подписывать
// 
// Возвращаемое значение:
//  Булево - признак поддержки вида электронного документа.
//
Функция ЕстьПоддержкаВидаЭД(Знач НастройкаОбмена, Знач ВидЭД, ТребуетсяПодпись = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК НастройкиОбменСБанкамиИсходящиеДокументы
	|ГДЕ
	|	НастройкиОбменСБанкамиИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
	|	И НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка = &НастройкаОбмена";
	
	Запрос.УстановитьПараметр("ВидЭД", ВидЭД);
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Результат = Запрос.Выполнить();
	ТребуетсяПодпись = ОбменСБанкамиСлужебный.ПодписыватьВидЭД(НастройкаОбмена, ВидЭД);
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

// Возвращает параметры обмена с банком по настройке.
//
// Параметры:
//  НастройкаОбмена	 - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена.
// 
// Возвращаемое значение:
// Структура - параметры настройки, содержит следующие элементы:
//    * ПоследняяДатаПолученияЭД - Дата - дата последнего получения документов.
//
Функция ПараметрыОбменаСБанком(НастройкаОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Отбор = Новый Структура("НастройкаОбмена", НастройкаОбмена);
	Возврат РегистрыСведений.ПараметрыОбменСБанками.Получить(Отбор);
	
КонецФункции

// Получает список действующих настроек обмена с банками. Если параметры не переданы, то возвращает все настройки.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация в настройке;
//  Банк  - СправочникСсылка.КлассификаторБанковРФ - банк в настройке.
//
// Возвращаемое значение:
//   Массив - содержит ссылки на справочник НастройкиОбменСБанками.
//
Функция НастройкиОбмена(Организация, Банк) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиОбменСБанками.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
	|ГДЕ
	|	ИСТИНА
	|	И НЕ НастройкиОбменСБанками.Недействительна
	|	И НЕ НастройкиОбменСБанками.ПометкаУдаления";
	
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Банк) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИСТИНА", "НастройкиОбменСБанками.Организация = &Организация
														|	И НастройкиОбменСБанками.Банк = &Банк");
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Банк", Банк);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Получает постоянные параметры обмена с банком.
//
// Параметры:
//   Банк - СправочникСсылка.КлассификаторБанковРФ - банк, для которого идет поиск настроек;
//   ВключитьФО - Булево - признак принудительного включения функциональной опции обмена с банками;
//   ЕстьПравоСозданияНастройкиЭДО - Булево - признак наличия у пользователя права создания настройки ЭДО.
//
// Возвращаемое значение:
//   Структура - параметры обмена, содержит поля:
//      * ПрограммаБанка - ПеречислениеСсылка.ПрограммыБанков - используемая программа обмена с банком;
//      * СпособАутентификации - Строка - способ аутентификации при получении настроек с сервера банка;
//      * АдресСервера - Строка - адрес ресурса банка для автоматического получения настроек обмена.
//      * Проект - Строка - список поддерживаемых проектов, перечисленных через запятую.
//   Неопределено - параметры не найдены.
//
Функция ПоставляемыеНастройкиОбмена(Банк, ВключитьФО = Ложь, ЕстьПравоСозданияНастройкиЭДО = Ложь) Экспорт
	
	ЕстьПравоСозданияНастройкиЭДО = ПравоДоступа("Изменение", Метаданные.Справочники.НастройкиОбменСБанками);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВключитьФО Тогда
		ИспользуетсяОбменСБанком = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ЗначениеФункциональнойОпции(
			"ИспользоватьОбменСБанками");
		Если НЕ ИспользуетсяОбменСБанком Тогда
			Константы.ИспользоватьОбменСБанками.Установить(Истина);
			ОбновитьПовторноИспользуемыеЗначения();
		КонецЕсли;
	КонецЕсли;

	Макет = ОбменСБанкамиСлужебныйПовтИсп.СписокБанков();
	
	БИКБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Код");
	КоличествоЗаписей = Макет.ВысотаТаблицы;
	
	Для Индекс = 1 По КоличествоЗаписей Цикл
		БИК = Макет.Область(Индекс, 2).Текст;
		Если БИК <> БИКБанка Тогда
			Продолжить;
		КонецЕсли;
		ВариантПодключения = Макет.Область(Индекс, 3).Текст;
		СпособАутентификации = Макет.Область(Индекс, 4).Текст;
		Если ВариантПодключения = "СинхронныйОбмен" Тогда
			ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн;
		ИначеЕсли ВариантПодключения = "АсинхронныйОбмен" Тогда
			ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен;
		ИначеЕсли ВариантПодключения = "ДополнительнаяОбработка" Тогда
			ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку;
		ИначеЕсли ВариантПодключения = "Сбербанк" Тогда
			ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн;
		ИначеЕсли ВариантПодключения = "ОбменЧерезВК" Тогда
			ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК;
		КонецЕсли;
		
		Настройки = Новый Структура();
		Настройки.Вставить("ПрограммаБанка", ПрограммаБанка);
		Настройки.Вставить("СпособАутентификации", СпособАутентификации);
		Настройки.Вставить("АдресСервера", Макет.Область(Индекс, 5).Текст);
		Настройки.Вставить("АдресСтраницыБанка", Макет.Область(Индекс, 7).Текст);
		Настройки.Вставить("Проект", Макет.Область(Индекс, 8).Текст);
		Настройки.Вставить("АдресИнструкции", Макет.Область(Индекс, 9).Текст);
		Прервать
	КонецЦикла;

	Возврат Настройки;
	
КонецФункции

// Возвращает параметры обмена для указанных вида электронного документа и настройки.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена.
//  ВидЭД- ПеречислениеСсылка.ВидыЭДОбменСБанками  - вид электронного документа.
// 
// Возвращаемое значение:
//  Структура - структура, содержащая параметры, необходимые для выполнения обмена электронными документами:
//    * ИдентификаторОрганизации - Строка - уникальный идентификатор отправителя в обмене электронными документами;
//    * ИспользуетсяКриптография - Булево - Истина, если при обмене электронными документами используется криптография;
//    * ПрограммаБанка - ПеречислениеСсылка.ПрограммыБанка - тип банковской программы;
//    * СертификатБанка - ХранилищеЗначения - сертификат криптографии, который будет использоваться для шифрования 
//          электронных документов;
//    * АутентификацияПоСертификату - Булево - если Истина, аутентификация на сервере банка будет производится с 
//          использованием закрытой части ключа электронной подписи;
//    * ПометкаУдаления - Булево - признак пометки на удаление;
//    * АдресСервера - Строка - адрес ftp-сервера, используемого для обмена;
//    * Недействительна - Булево - если Истина, то настройка не используется;
//    * ВерсияФормата - Строка - версия формата обмена с банком;
//    * ТребуетсяПодпись - Булево - признак необходимости подписания электронных документов перед отправкой;
//    * МаршрутПодписания - СправочникСсылка.МаршрутыПодписания - маршрут подписания электронного документа;
//    * ИспользуемыеСертификаты - Массив - сертификаты, указанные в настройке обмена с банком;
//    * ИмяВнешнегоМодуля - Строка - название используемого внешнего модуля.
//
Функция ПараметрыОбменаПоВидуЭД(Знач НастройкаОбмена, Знач ВидЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыНастройкиОбмена = Новый Структура;
	РеквизитыНастройкиОбмена.Вставить("ИдентификаторОрганизации", "");
	РеквизитыНастройкиОбмена.Вставить("ИспользуетсяКриптография", Ложь);
	РеквизитыНастройкиОбмена.Вставить("ПрограммаБанка", Неопределено);
	РеквизитыНастройкиОбмена.Вставить("СертификатБанка", Неопределено);
	РеквизитыНастройкиОбмена.Вставить("АутентификацияПоСертификату", Ложь);
	РеквизитыНастройкиОбмена.Вставить("ПометкаУдаления", Ложь);
	РеквизитыНастройкиОбмена.Вставить("АдресСервера", "");
	РеквизитыНастройкиОбмена.Вставить("Недействительна", Ложь);
	РеквизитыНастройкиОбмена.Вставить("ВерсияФормата", "");
	РеквизитыНастройкиОбмена.Вставить("ИмяВнешнегоМодуля",);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидЭД", ВидЭД);
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	ТекстВыборки =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(НастройкиОбменаПоВидамДокументов.ИспользоватьЭП, ЛОЖЬ) КАК ТребуетсяПодпись,
	|	ЕСТЬNULL(НастройкиОбменаПоВидамДокументов.МаршрутПодписания, НЕОПРЕДЕЛЕНО) КАК МаршрутПодписания,
	|	НастройкиОбменаОбщие.СертификатыПодписейОрганизации.(
	|		Ссылка,
	|		НомерСтроки,
	|		СертификатЭП
	|	) КАК СертификатыПодписей";
	ТекстИсточников = "
	|ИЗ
	|	Справочник.НастройкиОбменСБанками КАК НастройкиОбменаОбщие
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК НастройкиОбменаПоВидамДокументов
	|		ПО НастройкиОбменаПоВидамДокументов.Ссылка = НастройкиОбменаОбщие.Ссылка
	|			И НастройкиОбменаПоВидамДокументов.ИсходящийДокумент = &ВидЭД
	|ГДЕ
	|	НастройкиОбменаОбщие.Ссылка = &НастройкаОбмена";
	Для Каждого РеквизитНастройки Из РеквизитыНастройкиОбмена Цикл
		ТекстВыборки = ТекстВыборки + ",
		|	НастройкиОбменаОбщие." + РеквизитНастройки.Ключ;
	КонецЦикла;
	РеквизитыНастройкиОбмена.Вставить("ТребуетсяПодпись", Ложь);
	РеквизитыНастройкиОбмена.Вставить("МаршрутПодписания", Неопределено);
	РеквизитыНастройкиОбмена.Вставить("ИспользуемыеСертификаты", Новый Массив);
	
	Запрос.Текст = ТекстВыборки + ТекстИсточников;
	ВыборкаНастроек = Запрос.Выполнить().Выбрать();
	Если ВыборкаНастроек.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыНастройкиОбмена, ВыборкаНастроек);
		
		ИспользуемыеСертификаты = Новый Массив;
		ВыборкаСертификатов = ВыборкаНастроек.СертификатыПодписей.Выбрать();
		Пока ВыборкаСертификатов.Следующий() Цикл
			ИспользуемыеСертификаты.Добавить(ВыборкаСертификатов.СертификатЭП);
		КонецЦикла;
		РеквизитыНастройкиОбмена.ИспользуемыеСертификаты = ИспользуемыеСертификаты;
	КонецЕсли;
	
	Возврат РеквизитыНастройкиОбмена;
	
КонецФункции

#КонецОбласти

#Область Письма

// Возвращает количество непрочитанных писем
// 
// Возвращаемое значение:
//  Структура - состояние писем с банками
//    * ЕстьНастройка - Булево - в информационной базе есть доступная настройка обмена с письмами
//    * КоличествоНепрочитанных - Число - количество непрочитанных писем.
//
Функция ТекущееСостояниеПисемСБанками() Экспорт
	
	СтруктураВозврата = Новый Структура("ЕстьНастройка, КоличествоНепрочитанных", Ложь, 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК НастройкиОбменСБанкамиИсходящиеДокументы
	|ГДЕ
	|	НастройкиОбменСБанкамиИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.Письмо)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(ВложенныйЗапрос.Ссылка) КАК КоличествоНепрочитанных
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПисьмоОбменСБанками.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ПисьмоОбменСБанками КАК ПисьмоОбменСБанками
	|	ГДЕ
	|		ПисьмоОбменСБанками.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	|		И НЕ ПисьмоОбменСБанками.Прочитано
	|		И НЕ ПисьмоОбменСБанками.ПометкаУдаления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПисьмоОбменСБанками.Ссылка
	|	ИЗ
	|		Документ.ПисьмоОбменСБанками КАК ПисьмоОбменСБанками
	|	ГДЕ
	|		ПисьмоОбменСБанками.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.ОтклоненБанком), ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.ЧастичноПодписан), ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.НеПодтвержден))
	|		И НЕ ПисьмоОбменСБанками.ПометкаУдаления) КАК ВложенныйЗапрос";
	
	Результат = Запрос.ВыполнитьПакет();
	Настройки = Результат[0].Выбрать();
	СтруктураВозврата.ЕстьНастройка = Настройки.Следующий();
	Количество = Результат[1].Выбрать();
	Если Количество.Следующий() Тогда
		СтруктураВозврата.КоличествоНепрочитанных = Количество.КоличествоНепрочитанных;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Получает реквизиты основания письма
//
// Параметры:
//  Основание - ОпределяемыеТипы.ВладельцыОбменСБанками - ссылка на основание письма.
// 
// Возвращаемое значение:
//  Структура - реквизиты основания. Содержит поля:
//   * Организация - ОпределяемыеТипы.Организация - ссылка на организацию
//   * Банк - ОпределяемыеТипы.БанкОбменСБанками - ссылка на банк.
//   * Счет - ОпределяемыеТипы.СчетОрганизацииОбменСБанками - ссылка на банковский счет организации.
//
Функция РеквизитыОснованияПисьма(Знач Основание) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура("Организация, Банк, Счет");
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПисьмоОбменСБанками") Тогда
		НазваниеРеквизитаСчет = "СчетОрганизации";
		НазваниеРеквизитаОрганизация = "Организация"
	Иначе
		НазваниеРеквизитаСчет = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
			"ПлатежноеПоручение.СчетОрганизации");
		НазваниеРеквизитаОрганизация = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
			"ПлатежноеПоручение.Организация");
	КонецЕсли;
	
	ЗначенияРеквизитовОснование = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Основание, НазваниеРеквизитаСчет + "," + НазваниеРеквизитаОрганизация);
		
	ЗначенияРеквизитовОснование.Свойство(НазваниеРеквизитаОрганизация, ВозвращаемоеЗначение.Организация);
	ЗначенияРеквизитовОснование.Свойство(НазваниеРеквизитаСчет, ВозвращаемоеЗначение.Счет);
	
	НазваниеРеквизитаБанк = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
		"БанковскийСчетОрганизации.Банк");
	
	ВозвращаемоеЗначение.Банк = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ВозвращаемоеЗначение.Счет, НазваниеРеквизитаБанк);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область Сбербанк

// Запускает фоновое задание отправки данных в Сбербанк
//
// Параметры:
//  НаименованиеФоновогоЗадания - Строка - Наименование фонового задания
//  НазваниеМетода - Строка - название экспортной процедуры, которая будет вызвана в ОбменСБанкамиСлужебный
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком
//  СсылкаНаОбъект - ЛюбаяСсылка - ссылка на отправляемый объект
// 
// Возвращаемое значение:
//  Структура - структура возврата описана в ДлительныеОперации.ВыполнитьВФоне. Также добавлено 3 поля
//     * ИспользоватьЖурналирование - Булево - признак необходимости журналирования обмена
//     * КаталогДляЖурналирования - Строка - пусть на диске клиента для сохранения журнала
//     * ИмяВнешнегоМодуля - Строка - название используемого внешнего модуля Сбербанка.
//
Функция ЗапускЗаданияОтправкиДанныхВСбербанк(Знач НаименованиеФоновогоЗадания, Знач НазваниеМетода, Знач НастройкаОбмена, Знач СсылкаНаОбъект) Экспорт
	
	ТекущаяСессия = ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена);
	Если ТекущаяСессия = Неопределено Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("ТребуетсяАутентификация", Истина);
		ИмяВнешнегоМодуля = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИмяВнешнегоМодуля");
		СтруктураВозврата.Вставить("ИмяВнешнегоМодуля", ИмяВнешнегоМодуля);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ТекущаяСессия", ТекущаяСессия);
	ПараметрыОперации.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыОперации.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеФоновогоЗадания;
		
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный." + НазваниеМетода, ПараметрыОперации, ПараметрыВыполнения);
	
	ПараметрыЖурналирования = ПараметрыЖурналирования(НастройкаОбмена);
	Результат.Вставить("ИспользоватьЖурналирование", ПараметрыЖурналирования.ИспользоватьЖурналирование);
	Результат.Вставить("КаталогДляЖурналирования", ПараметрыЖурналирования.КаталогДляЖурналирования);
	Результат.Вставить("ИмяВнешнегоМодуля", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИмяВнешнегоМодуля"));
	
	Возврат Результат
	
КонецФункции

// Процедура - После отправки платежного документа сбербанк
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком
//  СообщениеОбмена - ДокументСсылка.СообщенияОбменСБанками - отправленное сообщение обмена
//  Тикет - Строка - тикет, полученный из банка.
//
Процедура ПослеОтправкиПлатежногоДокументаСбербанк(Знач НастройкаОбмена, Знач СообщениеОбмена, Знач Тикет) Экспорт
	
	ОбменСБанкамиСлужебный.СохранитьТикетСбербанк(НастройкаОбмена, Тикет);
	
	ОбменСБанкамиСлужебный.УстановитьСтатусСообщенияОбмена(СообщениеОбмена, Перечисления.СтатусыОбменСБанками.Отправлен);
	
КонецПроцедуры

// Получает список типов писем из ответа Сбербанка.
//
// Параметры:
//  ОтветБанка - Строка - данные, полученные из банка.
//  УникальныйИдентификатор - УникальныйИдентификатор - адрес для временного хранилища.
// 
// Возвращаемое значение:
//  Строка - адрес временного хранилища, содержащего таблицу типов писем.
//
Функция ТипыПисемСбербанк(Знач ОтветБанка, Знач УникальныйИдентификатор) Экспорт
	
	ВидОперации = НСтр("ru = 'Чтение полученных данных из банка'");
	
	СтруктураВозврата = Новый Структура;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ОтветБанка);
	Попытка
		ЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Исключение
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЧтениеXML.Закрыть();
		ТекстСообщения = НСтр("ru = 'Возникла ошибка при чтении полученных данных из банка'");
		ТекстОшибки = НСтр("ru = 'Возникла ошибка при чтении полученных данных из банка
								|Текст ошибки: %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, ТекстСообщения, "ОбменСБанками");
		Возврат Неопределено;
	КонецПопытки;
	
	postFix = ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(ЭД, "Dict.Step.postFix");
	
	Если postFix = Неопределено Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		ТекстСообщения = НСтр("ru = 'Получены некорректные данные из банка'");
		ТекстОшибки = НСтр("ru = 'Отсутствуют данные о типах писем.
								|Файл данных: %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИмяФайла);
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(ЭД, ИмяФайла, Ложь, "UTF-8");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, ТекстСообщения, "ОбменСБанками");
		Возврат Неопределено;
	КонецЕсли;

	ИспользуетсяТестовыйРежим = Ложь;
	ОбменСБанкамиПереопределяемый.ПроверитьИспользованиеТестовогоРежима(ИспользуетсяТестовыйРежим);
	Если ИспользуетсяТестовыйРежим Тогда
		АдресСервера = "https://iftupg.testsbi.sberbank.ru:9443";
	Иначе
		АдресСервера = "https://upgsbi.sberbank.ru:9443";
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Результат = ЭлектронноеВзаимодействиеСлужебный.ОтправитьЗапросНаСервер(
		АдресСервера, "sbns-upg" + postFix, Заголовки);
		
	Если НЕ Результат.Статус Тогда
		Если ЗначениеЗаполнено(Результат.КодСостояния) Тогда
			Шаблон = НСтр("ru = 'При получении данных из банка произошла ошибка (%1). %2'");
			ТекстОшибки = СтрШаблон(Шаблон, Результат.КодСостояния, Результат.СообщениеОбОшибке);
		Иначе
			ТекстОшибки = Результат.СообщениеОбОшибке;
		КонецЕсли;
		ВидОперации = НСтр("ru = 'Получение списка видов писем'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, ТекстОшибки, "ОбменСБанками");
		Возврат Неопределено;
	КонецЕсли;

	ЧтениеДанныхАрхив = Новый ЧтениеДанных(Результат.Тело);
	ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог();
	Попытка
		ЧтениеZIP = Новый ЧтениеZIPФайла(ЧтениеДанныхАрхив.ИсходныйПоток());
		ЧтениеZIP.ИзвлечьВсе(ПапкаДляРаспаковки);
	Исключение
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если НЕ ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(ЧтениеZIP, ПапкаДляРаспаковки) Тогда
			ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
		Иначе
			ТекстСообщения = НСтр("ru = 'Файл, полученный из банка невозможно прочитать так как он содержит ошибку'");
		КонецЕсли;
		ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке ответа банка
										|Подробное представление ошибки:
										|%1'");
		ПодробнаяИнформация = СтрШаблон(ПодробнаяИнформация, ПодробноеПредставлениеОшибки);
		Операция = НСтр("ru = 'Распаковка ответа банка'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ПодробнаяИнформация, ТекстСообщения, "ОбменСБанками");
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
		Возврат Неопределено;
	КонецПопытки;
		
	ЧтениеZIP.Закрыть();

	ПотокВПамяти = Новый ПотокВПамяти();
	ЗаписьВПамяти = Новый ЗаписьДанных(ПотокВПамяти);
	
	ФайлыЭД = НайтиФайлы(ПапкаДляРаспаковки, "*");
	Если ФайлыЭД.Количество() > 0 Тогда
		ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ФайлыЭД[0].ПолноеИмя);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
	Иначе
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
		Операция = НСтр("ru = 'Распаковка ответа банка'");
		ТекстСообщения = НСтр("ru = 'Получены некорректные данные из банка'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ТекстСообщения, ТекстСообщения, "ОбменСБанками");
		Возврат Неопределено;
	КонецЕсли;
	ЗаписьВПамяти.Записать(ДвоичныеДанныеФайла);
	ЗаписьВПамяти.Закрыть();

	ПотокВПамяти.Перейти(0, ПозицияВПотоке.Начало);

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьПоток(ПотокВПамяти);
	Попытка
		ЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Исключение
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЧтениеXML.Закрыть();
		ТекстСообщения = НСтр("ru = 'Возникла ошибка при чтении полученных данных из банка'");
		ТекстОшибки = НСтр("ru = 'Возникла ошибка при чтении полученных данных из банка
								|Текст ошибки: %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, ТекстСообщения, "ОбменСБанками");
		Возврат Неопределено;
	КонецПопытки;

	ПараметрыСтроки = Новый КвалификаторыСтроки(150);
	ТаблицаВозврата = Новый ТаблицаЗначений;
	ТаблицаВозврата.Колонки.Добавить("Шаблон", Новый ОписаниеТипов("Строка"));
	ТаблицаВозврата.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", , , , ПараметрыСтроки));
	
	Для каждого ЭлементКоллекции Из ЭД.LetterTypeEntry Цикл
		Если ЭлементКоллекции.canSendToUser = "true" И ЭлементКоллекции.systemName <> "NoType" Тогда
			НовСтрока = ТаблицаВозврата.Добавить();
			НовСтрока.Шаблон = ЭлементКоллекции.messageText;
			НовСтрока.Представление = ЭлементКоллекции.messageType;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаВозврата, УникальныйИдентификатор);
	
КонецФункции

// Получает массив идентификаторов для дальнейшего формирования запроса в банк.
//
// Параметры:
//  НастройкаОбмена   СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком;
//  ИдентификаторОрганизации - Строка - уникальный идентификатор организации в системе банка.
//
Функция ТикетыЗапросовСтатусовСбербанк(Знач НастройкаОбмена,  ИдентификаторОрганизации) Экспорт
	
	МассивИдентификаторов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТикетыОбменСБанками.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.ТикетыОбменСБанками КАК ТикетыОбменСБанками
	|ГДЕ
	|	ТикетыОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиОбменСБанками.ИдентификаторОрганизации КАК ИдентификаторОрганизации
	|ИЗ
	|	Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
	|ГДЕ
	|	НастройкиОбменСБанками.Ссылка = &НастройкаОбмена";
	
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаИдентификаторов = Результат[0].Выбрать();
	
	Пока ВыборкаИдентификаторов.Следующий() Цикл
		МассивИдентификаторов.Добавить(ВыборкаИдентификаторов.Идентификатор);
	КонецЦикла;
	
	ВыборкаПоИдентификатору = Результат[1].Выбрать();
	
	ВыборкаПоИдентификатору.Следующий();
	
	ИдентификаторОрганизации = ВыборкаПоИдентификатору.ИдентификаторОрганизации;
	
	Возврат МассивИдентификаторов;

КонецФункции

// Формирует текст запроса состояния обработки платежных документов для Сбербанка
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком
//  МассивТикетов - Массив - (возвращаемое значение) массив тикетов, для которых еще не получен ответ из банка.
//    * Строка - единичный тикет.
// 
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаСостоянияОбработкиДокументовСбербанк(Знач НастройкаОбмена, МассивТикетов = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщениеОбменСБанками.ВнешнийИдентификатор КАК ВнешнийИдентификатор
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменСБанками КАК СостоянияОбменСБанками
	|		ПО (СостоянияОбменСБанками.СообщениеОбмена = СообщениеОбменСБанками.Ссылка)
	|ГДЕ
	|	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	|	И СостоянияОбменСБанками.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ОжидаетсяИсполнение), ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ТребуетсяПодтверждение))
	|	И НЕ СообщениеОбменСБанками.ВнешнийИдентификатор = """"
	|	И НЕ СообщениеОбменСБанками.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТикетыОбменСБанками.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.ТикетыОбменСБанками КАК ТикетыОбменСБанками
	|ГДЕ
	|	ТикетыОбменСБанками.НастройкаОбмена = &НастройкаОбмена";
	
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ИдентификаторыДокументов = РезультатЗапроса[0].Выгрузить().ВыгрузитьКолонку("ВнешнийИдентификатор");
	МассивТикетов = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Идентификатор");
	
	Если ИдентификаторыДокументов.Количество() Тогда
		ТекстЗапроса = ОбменСБанкамиСлужебный.ТекстЗапросаСостоянияДокументовСбербанк(
			НастройкаОбмена, ИдентификаторыДокументов);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса типов писем
// Параметры:
//  ИдентификаторОрганизации - Строка - идентификатор организации.
// 
// Возвращаемое значение:
//  Строка - текст запроса персональных данных.
//
Функция ЗапросТиповПисемСбербанк(Знач ИдентификаторОрганизации) Экспорт
	
	Операция = НСтр("ru = 'Формирование запроса типов писем.'");
	
	Попытка
		Request = ОбменСБанкамиСлужебный.ОбъектТипаCML(ФабрикаXDTO, "Request", "http://bssys.com/upg/request");
		ИдентификаторЗапроса = Новый УникальныйИдентификатор;
		ТекстОшибки = "";
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "requestId", Строка(ИдентификаторЗапроса), Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "orgId", ИдентификаторОрганизации, Истина, ТекстОшибки);
		ВерсияФорматаСбербанк = ОбменСБанкамиСлужебный.ВерсияФорматаСбербанк();
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "version", ВерсияФорматаСбербанк, Истина, ТекстОшибки);
		ПредставлениеОтправителя = ОбменСБанкамиСлужебный.ПредставлениеОтправителяСбербанк();
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "sender", ПредставлениеОтправителя, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "receiver", "SBBOL_DBO", Истина, ТекстОшибки);
		
		Dict = ОбменСБанкамиСлужебный.ОбъектТипаCML(ФабрикаXDTO, "Dict", "http://bssys.com/upg/request");
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Dict, "dictId", "LetterType", , ТекстОшибки);
		Request.Dict.Добавить(Dict);
		
		Request.Проверить();
		
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку("UTF-8");
		Запись.ЗаписатьОбъявлениеXML();
		ФабрикаXDTO.ЗаписатьXML(Запись, Request);
		ТекстЗапроса = Запись.Закрыть();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				Операция, ТекстОшибки, ТекстОшибки, "ОбменСБанками");
			Возврат Неопределено;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ТекстОшибки, ТекстСообщения, "ОбменСБанками");
		Возврат Неопределено;
	КонецПопытки;
		
	Возврат ТекстЗапроса;
	
КонецФункции

// Выполняет необходимые действия для разбора большого пакета, полученного из банка.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком;
//  ИдентификаторЗапроса - Строка - идентификатор запроса, на который пришел ответ.
//  МассивДанныхПакета - Массив - данные, полученные из банка.
//     * Строка - часть данных большого пакета;
//  МассивНовыхСообщенийОбмена - Массив - массив новых полученных сообщений;
//    * ДокументСсылка.СообщениеОбменСБанками - полученное из банка сообщение.
//
Процедура СохранитьБольшойПакетСбербанк(НастройкаОбмена, ИдентификаторЗапроса, МассивДанныхПакета, МассивНовыхСообщенийОбмена) Экспорт
	
	МассивКаталогов = Новый Массив;
	
	Для Каждого Ответ Из МассивДанныхПакета Цикл
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(Ответ);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ДвоичныеДанныеФайла = Base64Значение(ЭД.ResponsePart.Attachment.Body);
		
		ЧтениеДанныхАрхив = Новый ЧтениеДанных(ДвоичныеДанныеФайла);
		ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог();
		Попытка
			ЧтениеZIP = Новый ЧтениеZIPФайла(ЧтениеДанныхАрхив.ИсходныйПоток());
			ЧтениеZIP.ИзвлечьВсе(ПапкаДляРаспаковки);
		Исключение
			Если НЕ ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(ЧтениеZIP, ПапкаДляРаспаковки) Тогда
				ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
			Иначе
				ТекстСообщения = НСтр("ru = 'Файл, полученный из банка невозможно прочитать так как он содержит ошибку'");
			КонецЕсли;
			ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке ответа банка
											|Подробное представление ошибки:
											|%1'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ПодробнаяИнформация = СтрШаблон(ПодробнаяИнформация, ПодробноеПредставлениеОшибки);
			Операция = НСтр("ru = 'Распаковка ответа банка'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				Операция, ПодробнаяИнформация, ТекстСообщения, "ОбменСБанками", НастройкаОбмена);
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		
		ЧтениеZIP.Закрыть();
		
		МассивКаталогов.Добавить(ПапкаДляРаспаковки);
	
	КонецЦикла;

	ПотокВПамяти = Новый ПотокВПамяти();
	ЗаписьВПамяти = Новый ЗаписьДанных(ПотокВПамяти);
	
	Для Каждого ПапкаДляРаспаковки Из МассивКаталогов Цикл
		
		ФайлыЭД = НайтиФайлы(ПапкаДляРаспаковки, "*");
		Если ФайлыЭД.Количество() > 0 Тогда
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ФайлыЭД[0].ПолноеИмя);
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
			ВызватьИсключение НСтр("ru = 'Ошибка при распаковке ответа банка'");
		КонецЕсли;
		ЗаписьВПамяти.Записать(ДвоичныеДанныеФайла);
	КонецЦикла;
	ЗаписьВПамяти.Закрыть();
	
	ПотокВПамяти.Перейти(0, ПозицияВПотоке.Начало);
	ЧтениеВПамяти = Новый ЧтениеДанных(ПотокВПамяти);
	Ответ = ЧтениеВПамяти.ПрочитатьСимволы();
	
	ОбработатьОтветСбербанка(Ответ, НастройкаОбмена, МассивНовыхСообщенийОбмена, ИдентификаторЗапроса);
	
КонецПроцедуры

// Получает все настройки обмена с журналированием
// 
// Возвращаемое значение:
//  Соответствие - настройки обмена и каталог для журнала
//    * Ключ - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком;
//    * Значение - Строка - каталог для сохранения данных журнала.
//
Функция НастройкиОбменаСЖурналированием() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ВозвращаемоеЗначение = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыОбменСБанками.НастройкаОбмена КАК НастройкаОбмена,
	|	ПараметрыОбменСБанками.КаталогДляЖурналирования КАК КаталогДляЖурналирования
	|ИЗ
	|	РегистрСведений.ПараметрыОбменСБанками КАК ПараметрыОбменСБанками
	|ГДЕ
	|	ПараметрыОбменСБанками.ИспользоватьЖурналирование
	|	И НЕ ПараметрыОбменСБанками.НастройкаОбмена.Недействительна
	|	И НЕ ПараметрыОбменСБанками.НастройкаОбмена.ПометкаУдаления
	|	И ПараметрыОбменСБанками.НастройкаОбмена.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.СбербанкОнлайн)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВозвращаемоеЗначение.Вставить(Выборка.НастройкаОбмена, Выборка.КаталогДляЖурналирования);
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получает текст выгрузки журнала обмена
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
// 
// Возвращаемое значение:
//  Строка - текст журнала для сохранения во внешнем файле.
//
Функция ТекстВыгрузкиЖурнала(Знач НастройкаОбмена) Экспорт
	
	ВозвращаемоеЗначение = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ЖурналОбменСБанками.Запись КАК Запись
	                |ИЗ
	                |	РегистрСведений.ЖурналОбменСБанками КАК ЖурналОбменСБанками
	                |ГДЕ
	                |	ЖурналОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	                |	И ЖурналОбменСБанками.Пользователь = &Пользователь
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	ЖурналОбменСБанками.Индекс";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВозвращаемоеЗначение = ВозвращаемоеЗначение + Выборка.Запись;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Очищает журнал после выгрузки в файл
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//
Процедура ОчиститьЖурнал(Знач НастройкаОбмена) Экспорт
	
	НаборЗаписей = РегистрыСведений.ЖурналОбменСБанками.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НастройкаОбмена.Установить(НастройкаОбмена);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.АвторизованныйПользователь());
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Получает строку для фрод-мониторинга
//
// Параметры:
//    Параметры - Структура - содержит строковые значения параметров фрод-мониторинга.
//
// Возвращаемое значение:
//    Строка - строка фрод-мониторинга.
//
Функция Фрод(Параметры) Экспорт
	
	ФродТип = ФабрикаXDTO.Тип("http://bssys.com/upg", "FraudParams");
	ФродЭл = ФабрикаXDTO.Создать(ФродТип);
	
	ОбменСБанкамиСлужебный.ЗаполнитьФродПараметрыВXDTO(ФродЭл, Параметры);
	
	НоваяЗаписьXML = Новый ЗаписьXML;
	НоваяЗаписьXML.УстановитьСтроку("UTF-8");
	НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(НоваяЗаписьXML, ФродЭл);
	Возврат НоваяЗаписьXML.Закрыть();

КонецФункции

// Подготавливает текст запроса для получения ночной выписки.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком;
//  ИдентификаторЗапроса  - Строка - уникальный идентификатор запроса;
//  ИдентификаторОрганизации  - Строка - уникальный идентификатор организации в банковской системе;
//  ДанныеПодписи - Структура - данные электронной подписи, содержит поля:
//                      * ЭП  - Строка - электронная подпись дайджеста;
//                      * СертификатПодписи  - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат подписи.
//                - Неопределено - подпись не используется.
//
// Возвращаемое значение:
// Строка - текст запроса ночной выписки.
//
Функция ТекстЗапросаНочнойВыписки(Знач НастройкаОбмена, Знач ИдентификаторЗапроса, Знач ИдентификаторОрганизации, Знач ДанныеПодписи = Неопределено) Экспорт

	ПространствоИмен = "http://bssys.com/upg/request";
	
	ТекстОшибки = ""; ТекстЗапроса = "";
	
	Request = ОбменСБанкамиСлужебный.ОбъектТипаCML(ФабрикаXDTO, "Request", ПространствоИмен);
	ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "requestId", ИдентификаторЗапроса, Истина, ТекстОшибки);
	ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "orgId", ИдентификаторОрганизации, Истина, ТекстОшибки);
	ВерсияФорматаСбербанк = ОбменСБанкамиСлужебный.ВерсияФорматаСбербанк();
	ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "version", ВерсияФорматаСбербанк, Истина, ТекстОшибки);
	Отправитель = ОбменСБанкамиСлужебный.ПредставлениеОтправителяСбербанк();
	ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "sender", Отправитель, Истина, ТекстОшибки);
	ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "receiver", "SBBOL_DBO", Истина, ТекстОшибки);
	Incoming = ОбменСБанкамиСлужебный.ОбъектТипаCML(ФабрикаXDTO, "Request.Incoming", ПространствоИмен);
	
	ПоследняяВходящаяДата = ПоследняяВходящаяДатаСбербанк(НастройкаОбмена);
	
	Если ЗначениеЗаполнено(ПоследняяВходящаяДата) Тогда
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(
			Incoming, "lastIncomingTime", ПоследняяВходящаяДата, , ТекстОшибки);
	КонецЕсли;
	
	ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "Incoming", Incoming, Истина, ТекстОшибки);
	
	Если ДанныеПодписи <> Неопределено Тогда
		ХранилищеСертификата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ДанныеПодписи.СертификатПодписи, "ДанныеСертификата");
		ДвоичныеДанныеСертификата = ХранилищеСертификата.Получить();
		
		ДанныеСертификата = ИнформацияОСертификатеПодписиСбербанк(ДвоичныеДанныеСертификата);
		Если ДанныеСертификата = Неопределено Тогда
			ВызватьИсключение НСтр("ru='Не найден сертификат установленной подписи'");
		КонецЕсли;
		DigitalSign = ОбменСБанкамиСлужебный.ОбъектТипаCML(ФабрикаXDTO, "DigitalSign","http://bssys.com/upg/request");
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(DigitalSign, "Issuer", ДанныеСертификата.Issuer, Истина);
		СтрокаСерийныйНомер = Строка(ДанныеСертификата.SN);
		СтрокаСерийныйНомер = СтрЗаменить(СтрокаСерийныйНомер," ","");
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(DigitalSign, "SN", СтрокаСерийныйНомер, Истина);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(DigitalSign, "Value", ДанныеПодписи.ЭП, Истина);
		Request.Sign.Добавить(DigitalSign);
	КонецЕсли;
	
	Request.Проверить();
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВидОперации = НСтр("ru = 'Формирование запроса новых документов'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, , "ОбменСБанками", НастройкаОбмена);
		ВызватьИсключение НСтр("ru = 'Ошибка формирования запроса ночной выписки'");
	КонецЕсли;
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(Запись, Request);
	ТекстЗапроса = Запись.Закрыть();
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Выполняет необходимые действия для разбора ответа банка.
//
// Параметры:
//  Ответ - Строка - текст с ответом;
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком;
//  МассивНовыхСообщений - Массив - массив новых полученных сообщений
//    * ДокументСсылка.СообщениеОбменСБанками - полученное из банка сообщение;
//  Идентификатор - Строка - идентификатор запроса, на который пришел ответ;
//  КоличествоТомов - Число - (возвращаемое значение)если больше 0, то ответ банка содержит несколько томов.
//
Процедура ОбработатьОтветСбербанка(Знач Ответ, Знач НастройкаОбмена, МассивНовыхСообщений, Знач Идентификатор = Неопределено, КоличествоТомов = 0) Экспорт
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		УдалитьИдентификаторЗапроса(НастройкаОбмена, Идентификатор);
	КонецЕсли;

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Ответ);
	ЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Если ЭД.Свойства().Получить("Errors") <> Неопределено Тогда
		ТекстСообщения = "";
		ОбработатьИзвещениеСОшибкойСбербанк(Ответ, ТекстСообщения, НастройкаОбмена);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если ЭД.Свойства().Получить("Tickets") <> Неопределено Тогда
		Если ТипЗнч(ЭД.Tickets.Ticket) = Тип("СписокXDTO") Тогда
			Для Каждого Тикет Из ЭД.Tickets.Ticket Цикл
				ОбменСБанкамиСлужебный.ПрочитатьТикетСбербанка(НастройкаОбмена, Тикет, МассивНовыхСообщений, КоличествоТомов);
			КонецЦикла;
		Иначе
			Тикет = ЭД.Tickets.Ticket;
			ОбменСБанкамиСлужебный.ПрочитатьТикетСбербанка(НастройкаОбмена, Тикет, МассивНовыхСообщений, КоличествоТомов);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭД.Свойства().Получить("Statements") <> Неопределено Тогда
		СохранитьВыпискиСбербанка(ЭД, НастройкаОбмена, МассивНовыхСообщений);
	КонецЕсли;
	
	Если ЭД.Свойства().Получить("LettersFromBank") <> Неопределено Тогда
		СохранитьПисьмаСбербанка(ЭД, НастройкаОбмена, МассивНовыхСообщений);
	КонецЕсли;
	
	Если ЭД.Свойства().Получить("ExchangeMessagesFromBank") <> Неопределено Тогда
		СохранитьПисьмаСбербанка(ЭД, НастройкаОбмена, МассивНовыхСообщений, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Записывает ошибку в журнал регистрации и возвращает текст сообщения.
//
// Параметры:
//  Ответ - Строка - ответ банка с ошибкой;
//  ТекстСообщения - Строка - сообщение, которое нужно показать пользователю.
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком.
//
Процедура ОбработатьИзвещениеСОшибкойСбербанк(Знач Ответ, ТекстСообщения, Знач НастройкаОбмена = Неопределено) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Ответ);
	ЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	СсылкаНаОбъект = НастройкаОбмена;
	
	ШаблонСообщения = НСтр("ru = 'Получена ошибка из банка.
								|Код: %1.'");
	Если ТипЗнч(ЭД.Errors.Error) = Тип("СписокXDTO") Тогда
		Для Каждого Error Из ЭД.Errors.Error Цикл
			ТекстСообщения = ТекстСообщения + СтрШаблон(ШаблонСообщения, Error.Code);
			Если Error.Свойства().Получить("Type") Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС + Error.Type;
			КонецЕсли;
			Если Error.Свойства().Получить("Desc") Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС + Error.Desc;
			КонецЕсли;
			Если Error.Code = "103" Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС
					+ НСтр("ru = 'Возможная причина ошибки: не подключена услуга ""Сбербанк Интеграция"" в личном кабинете.'") ;
			ИначеЕсли НастройкаОбмена <> Неопределено И ЭД.Свойства().Получить("requestId") <> Неопределено
				И ЗначениеЗаполнено(ЭД.requestId) Тогда
				СообщениеОбмена = ОбменСБанкамиСлужебный.СообщениеОбменаПоИдентификатору(НастройкаОбмена, ЭД.requestId);
				Если ЗначениеЗаполнено(СообщениеОбмена) Тогда
					СтруктураПараметров = Новый Структура;
					СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
					СтруктураПараметров.Вставить("ПричинаОтклонения", ТекстСообщения);
					ИзменитьСообщениеОбмена(СообщениеОбмена, СтруктураПараметров);
					СсылкаНаОбъект = СообщениеОбмена;
				КонецЕсли;
			КонецЕсли;
			ВидОперации = НСтр("ru = 'Отправка данных в банк'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ТекстСообщения, , "ОбменСБанками", СсылкаНаОбъект);
		КонецЦикла;
	Иначе
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ЭД.Errors.Error.Code);
		Если ЭД.Errors.Error.Свойства().Получить("Type") <> Неопределено Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + ЭД.Errors.Error.Type;
		КонецЕсли;
		Если ЭД.Errors.Error.Свойства().Получить("Desc") <> Неопределено Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + ЭД.Errors.Error.Desc;
		КонецЕсли;
		Если ЭД.Errors.Error.Code = "103" Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС
				+ НСтр("ru = 'Возможная причина ошибки: не подключена услуга ""Сбербанк Интеграция"" в личном кабинете.'") ;
		ИначеЕсли НастройкаОбмена <> Неопределено И ЭД.Свойства().Получить("requestId") <> Неопределено
			И ЗначениеЗаполнено(ЭД.requestId) Тогда
			СообщениеОбмена = ОбменСБанкамиСлужебный.СообщениеОбменаПоИдентификатору(НастройкаОбмена, ЭД.requestId);
			Если ЗначениеЗаполнено(СообщениеОбмена) Тогда
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
				СтруктураПараметров.Вставить("ПричинаОтклонения", ТекстСообщения);
				ИзменитьСообщениеОбмена(СообщениеОбмена, СтруктураПараметров);
				СсылкаНаОбъект = СообщениеОбмена;
			КонецЕсли;
		КонецЕсли;
		ВидОперации = НСтр("ru = 'Отправка данных в банк'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстСообщения, , "ОбменСБанками", СсылкаНаОбъект);
	КонецЕсли
	
КонецПроцедуры

// Заполняет в схеме подписи и Формирует файл пакета для отправки в банк
//
// Параметры
//  СообщениеОбмена - ДокументСсылка.СообщенияОбменСБанками - ссылка на сообщение обмена
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком
//  ФродПараметры - Структура - данные для фрод-мониторинга.
//  Логин - Строка - логин пользователя в системе банка.
//
// Возвращаемое значение:
// Структура с данными файла или Неопределено.
//
Функция ПакетXMLСбербанка(Знач СообщениеОбмена, Знач НастройкаОбмена, Знач ФродПараметры = Неопределено, Знач Логин = Неопределено) Экспорт

	ДвоичныеДанныеФайла = ДвоичныеДанныеПрисоединенногоФайла(СообщениеОбмена);
	
	ОбъектXML = Новый ЧтениеXML;
	ПространствоИмен = "http://bssys.com/upg/request";
	
	ЧтениеДанных = Новый ЧтениеДанных(ДвоичныеДанныеФайла);

	Попытка
		
		ОбъектXML.ОткрытьПоток(ЧтениеДанных.ИсходныйПоток());
		
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		ТекстОшибки = "";
		
		Если ЭД.Тип() = ОбменСБанкамиСлужебный.ТипЗначенияCML(ФабрикаXDTO, ПространствоИмен, "PayDocRu") Тогда
			
			СтрокаXML = ДанныеПакетаXMLСтрокойСбербанк(
				ЭД, НастройкаОбмена, СообщениеОбмена, "PayDocRu", ФродПараметры, ТекстОшибки, Логин);
			
		ИначеЕсли ЭД.Тип() = ОбменСБанкамиСлужебный.ТипЗначенияCML(ФабрикаXDTO, ПространствоИмен, "StmtReqType") Тогда
			
			СтрокаXML = ДанныеПакетаXMLСтрокойСбербанк(
				ЭД, НастройкаОбмена, СообщениеОбмена, "StmtReq", ФродПараметры, ТекстОшибки);

		ИначеЕсли ЭД.Тип() = ОбменСБанкамиСлужебный.ТипЗначенияCML(ФабрикаXDTO, ПространствоИмен, "PayDocCur") Тогда
			
			СтрокаXML = ДанныеПакетаXMLСтрокойСбербанк(
				ЭД, НастройкаОбмена, СообщениеОбмена, "PayDocCur", ФродПараметры, ТекстОшибки);
		
		ИначеЕсли ЭД.Тип() = ОбменСБанкамиСлужебный.ТипЗначенияCML(ФабрикаXDTO, ПространствоИмен, "CurrBuy") Тогда
			
			СтрокаXML = ДанныеПакетаXMLСтрокойСбербанк(
				ЭД, НастройкаОбмена, СообщениеОбмена, "CurrBuy", ФродПараметры, ТекстОшибки);
			
		ИначеЕсли ЭД.Тип() = ОбменСБанкамиСлужебный.ТипЗначенияCML(ФабрикаXDTO, ПространствоИмен, "CurrSell") Тогда
			
			СтрокаXML = ДанныеПакетаXMLСтрокойСбербанк(
				ЭД, НастройкаОбмена, СообщениеОбмена, "CurrSell", ФродПараметры, ТекстОшибки);
			
		ИначеЕсли ЭД.Тип() = ОбменСБанкамиСлужебный.ТипЗначенияCML(ФабрикаXDTO, ПространствоИмен, "MandatorySale") Тогда
			
			СтрокаXML = ДанныеПакетаXMLСтрокойСбербанк(
				ЭД, НастройкаОбмена, СообщениеОбмена, "MandatorySale", ФродПараметры, ТекстОшибки);
			
		ИначеЕсли ЭД.Тип() = ОбменСБанкамиСлужебный.ТипЗначенияCML(ФабрикаXDTO, ПространствоИмен, "LetterInBank") Тогда
			
			СтрокаXML = ДанныеПакетаXMLСтрокойСбербанк(
				ЭД, НастройкаОбмена, СообщениеОбмена, "LetterInBank", ФродПараметры, ТекстОшибки);
			
		ИначеЕсли ЭД.Тип() = ОбменСБанкамиСлужебный.ТипЗначенияCML(ФабрикаXDTO, ПространствоИмен, "ExchangeMessagesWithBank") Тогда
			
			СтрокаXML = ДанныеПакетаXMLСтрокойСбербанк(
				ЭД, НастройкаОбмена, СообщениеОбмена, "ExchangeMessagesWithBank", ФродПараметры, ТекстОшибки);
			
		Иначе
			ВызватьИсключение НСтр("ru = 'Неизвестный формат файла'");
		КонецЕсли;
		ОбъектXML.Закрыть();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;

	Исключение
		ОбъектXML.Закрыть();
		ТекстОшибки = НСтр("ru = 'Возникла ошибка при формировании пакета данных банка'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки + Символы.ПС + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат СтрокаXML;

КонецФункции

// Определяет название бизнес-системы для организации канала с банком.
//
// Возвращаемое значение:
// Строка - название бизнес-системы.
//
Функция НазваниеБизнесСистемыСбербанк() Экспорт
	
	НазваниеБизнесСистемы = """УПШ СББОЛ""";

	ИспользуетсяТестовыйРежим = Ложь;
	ОбменСБанкамиПереопределяемый.ПроверитьИспользованиеТестовогоРежима(ИспользуетсяТестовыйРежим);

	Если ИспользуетсяТестовыйРежим Тогда
		НазваниеБизнесСистемы = "sbbolsbt_upg_int";
	КонецЕсли;
	
	Возврат НазваниеБизнесСистемы;
	
КонецФункции

// Возвращает структуру данных сертификата
//
// Параметры:
// ДвоичныеДанныеСертификата - ДвоичныеДанные - сертификат.
//
// Возвращаемое значение:
// Структура, содержит данные сертификата.
//
Функция ИнформацияОСертификатеПодписиСбербанк(ДвоичныеДанныеСертификата) Экспорт
	
	СтруктураВозврата = Новый Структура;
	Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
		
	Issuer = "EMAILADDRESS=%1, CN=%2, OU=%3, O=%4, C=%5"; 
	Issuer = СтрШаблон(Issuer, Сертификат.Издатель.E,
			Сертификат.Издатель.CN, Сертификат.Издатель.OU, Сертификат.Издатель.O, Сертификат.Издатель.C);
			
	СтруктураВозврата.Вставить("SN", Сертификат.СерийныйНомер);
	СтруктураВозврата.Вставить("Issuer", Issuer);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Добавляет новый сертификат в справочник СертификатыКлючейЭлектроннойПодписиИШифрования.
// 
// Параметры:
//    ДвоичныеДанныеСертификата - ДвоичныеДанные - данные сертификата;
//    Организация - СправочникСсылка.Организации - организация сертификата.
//
// Возвращаемое значение:
//    СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - созданный сертификат.
//
Функция СоздатьСертификатСбербанка(Знач ДвоичныеДанныеСертификата, Знач Организация) Экспорт
	
	НовыйСертификат = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.НайтиСоздатьСертификатЭП(
		ДвоичныеДанныеСертификата, Организация);
	
	Если ЗначениеЗаполнено(НовыйСертификат) Тогда
		МенеджерЗаписи = РегистрыСведений.СведенияОСертификатахОбменСБанками.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн;
		МенеджерЗаписи.СертификатЭП = НовыйСертификат;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	Возврат НовыйСертификат;
	
КонецФункции

// Определяет наличие установленной подписи по сертификату для сообщения обмена
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщенияОбменСБанками - ссылка на сообщение обмена, которое требуется подписать
//  СертификатСсылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат подписи.
// 
// Возвращаемое значение:
//  Булево - если есть такая подпись, то Истина, иначе Ложь.
//
Функция СообщениеСодержитПодписьПоСертификату(СообщениеОбмена, СертификатСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПрисоединенныйФайл = ПрисоединенныйФайл(СообщениеОбмена);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭП.Отпечаток
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
	|ГДЕ
	|	ЭП.ПодписанныйОбъект = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ПрисоединенныйФайл);
	МассивОтпечатков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Отпечаток");
	ОтпечатокСертификата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СертификатСсылка, "Отпечаток");
	Если МассивОтпечатков.Найти(ОтпечатокСертификата) <> Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Электронный документ %1
									|уже имеет подпись по сертификату %2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, СообщениеОбмена, СертификатСсылка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СообщениеОбмена);
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

// Производит базовую аутентификацию на сервере Сбербанка
//
// Параметры:
//    НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена.
//    Логин - Строка - логин пользователя в системе банка
//    Пароль - Строка - пароль для логина.
//    ФродПараметры - Структура - параметры фрод-мониторинга, полученные на клиенте.
//    КлючСессии - Произвольный - ключ для сохранения параметров установленной сессии.
//    ПараметрыВозврата - Структура - возвращаемые значения, содержит поля:
//          * ТребуетсяСМСАутентификация - Булево - требуется подтверждение сессии;
//          * ТребуетсяТокен - Булево - пользователь должен использовать токен;
//          * B - Строка - параметр B для расчета свертки нового пароля.
//
Процедура БазоваяАутентификацияСбербанк(Знач НастройкаОбмена, Знач Логин, Знач Пароль, Знач ФродПараметры, Знач КлючСессии, ПараметрыВозврата) Экспорт
	
	ПараметрыВозврата = Новый Структура;
	ПараметрыВозврата.Вставить("ТребуетсяСМСАутентификация", Ложь);
	ПараметрыВозврата.Вставить("ТребуетсяТокен", Ложь);
	ПараметрыВозврата.Вставить("B");
	ПараметрыВозврата.Вставить("Соль");
	
	ТекстОшибки = "";
	
	WSПрокси = ОбменСБанкамиСлужебныйПовтИсп.WSПроксиСбербанк();
	
	ЗапросАутентификацииТип = WSПрокси.ФабрикаXDTO.Тип("http://upg.sbns.bssys.com/", "preLogin");
	ЗначениеXDTO = WSПрокси.ФабрикаXDTO.Создать(ЗапросАутентификацииТип);
	
	ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗначениеXDTO, "userLogin", Логин, Истина, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВидОперации = НСтр("ru = 'Формирование запроса аутентификации'");
		ШаблонСообщения = НСтр("ru = 'Ошибка при формировании запроса аутентификации:
								|%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекстОшибки);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ЗначениеXDTO.Проверить();

	Попытка
		XDTOРезультат = WSПрокси.preLogin(ЗначениеXDTO);
	Исключение
		ОбменСБанкамиСлужебный.ДобавитьЗаписьВЖурнал(НастройкаОбмена, "preLogin", WSПрокси.ФабрикаXDTO, ЗначениеXDTO, XDTOРезультат);
		ВызватьИсключение;
	КонецПопытки;
	
	ОбменСБанкамиСлужебный.ДобавитьЗаписьВЖурнал(НастройкаОбмена, "preLogin", WSПрокси.ФабрикаXDTO, ЗначениеXDTO, XDTOРезультат);

	КодВозврата = Base64Строка(XDTOРезультат.return[3]);
	Если КодВозврата = "AA==" Тогда // успех
		
		K = ""; A = "";
		РассчитатьСверткуПароляСбербанк(Логин, Пароль, XDTOРезультат.return[0], XDTOРезультат.return[1], K, A);
		
		ПараметрыВозврата.B = XDTOРезультат.return[1];
		ПараметрыВозврата.Соль = XDTOРезультат.return[0];
	
		АутентификацияТип = WSПрокси.ФабрикаXDTO.Тип("http://upg.sbns.bssys.com/", "login");
		ЗначениеXDTO = WSПрокси.ФабрикаXDTO.Создать(АутентификацияТип);
	
		ИдентификаторСессии = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(
			XDTOРезультат.return[2]);
		
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗначениеXDTO, "sessionId", ИдентификаторСессии, Истина, ТекстОшибки);
		ФродСтрока = Фрод(ФродПараметры);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗначениеXDTO, "FraudParams", ФродСтрока, Истина, ТекстОшибки);
		ЗначениеXDTO.clientAuthData.Добавить(K);
		ЗначениеXDTO.clientAuthData.Добавить(A);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВидОперации = НСтр("ru = 'Формирование данных аутентификации'");
			ШаблонСообщения = НСтр("ru = 'Ошибка при формировании данных аутентификации:
									|%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекстОшибки);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		ЗначениеXDTO.Проверить();

		Попытка
			XDTOРезультат = WSПрокси.login(ЗначениеXDTO);
		Исключение
			ОбменСБанкамиСлужебный.ДобавитьЗаписьВЖурнал(НастройкаОбмена, "login", WSПрокси.ФабрикаXDTO, ЗначениеXDTO, XDTOРезультат);
			ВызватьИсключение
		КонецПопытки;
		
		ОбменСБанкамиСлужебный.ДобавитьЗаписьВЖурнал(НастройкаОбмена, "login", WSПрокси.ФабрикаXDTO, ЗначениеXDTO, XDTOРезультат);
	
		КодВозврата = Base64Строка(XDTOРезультат.return[1]);

		Если КодВозврата = "AA==" Тогда // Успех
			СохранитьСессиюНаСервереСбербанк(КлючСессии, ИдентификаторСессии, ФродПараметры, Логин);
		ИначеЕсли КодВозврата = "Ew==" Тогда // требуется аутентификация по СМС
			ПараметрыВозврата.ТребуетсяСМСАутентификация = Истина;
			СохранитьСессиюНаСервереСбербанк(КлючСессии, ИдентификаторСессии, ФродПараметры, Логин);
		ИначеЕсли КодВозврата = "GA==" Тогда
			ПараметрыВозврата.ТребуетсяТокен = Истина;
		Иначе
			ИнформацияОбОшибке = ОбменСБанкамиКлиентСервер.ТекстОшибкиСбербанк(КодВозврата);
			
			Если ИнформацияОбОшибке = Неопределено Тогда
				ШаблонОшибки = НСтр("ru = 'При аутентификации произошла ошибка.
									|Код: %1'");
				ТекстОшибки = СтрШаблон(ШаблонОшибки, КодВозврата);
			Иначе
				Если ИнформацияОбОшибке.Код = "01" Тогда
					ТекстОшибки = ИнформацияОбОшибке.Описание;
				Иначе
					ШаблонОшибки = НСтр("ru = 'При аутентификации произошла ошибка.
										|Код: %1
										|Описание: %2'");
					ТекстОшибки = СтрШаблон(ШаблонОшибки, ИнформацияОбОшибке.Код, ИнформацияОбОшибке.Описание);
				КонецЕсли;
			КонецЕсли;
			ВидОперации = НСтр("ru = 'Отправка данных аутентификации'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	Иначе
		ИнформацияОбОшибке = ОбменСБанкамиКлиентСервер.ТекстОшибкиСбербанк(КодВозврата);
		
		Если ИнформацияОбОшибке = Неопределено Тогда
			ШаблонОшибки = НСтр("ru = 'При запросе аутентификации произошла ошибка.
								|Код: %1'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, КодВозврата);
		Иначе
			
			Если ИнформацияОбОшибке.Код = "01" Тогда
				ТекстОшибки = ИнформацияОбОшибке.Описание;
			Иначе
				ШаблонОшибки = НСтр("ru = 'При аутентификации произошла ошибка.
									|Код: %1
									|Описание: %2'");
				ТекстОшибки = СтрШаблон(ШаблонОшибки, ИнформацияОбОшибке.Код, ИнформацияОбОшибке.Описание);
			КонецЕсли;
			
		КонецЕсли;
		ВидОперации = НСтр("ru = 'Отправка запроса аутентификации'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Запускает длительную операцию по генерации SMSСбербанк
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанком - сообщение обмена с подтверждаемым электронным документом.
// 
// Возвращаемое значение:
//  Структура - см. описание в ДлительныеОперации.ВыполнитьВФоне.
//
Функция ЗапускЗаданияГенерацииSMSСбербанк(Знач НастройкаОбмена, Знач СообщениеОбмена) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка запроса генерации SMS в Сбербанк.'");
	
	ПараметрыСинхронизации = Новый Структура;
	ПараметрыСинхронизации.Вставить("ТекущаяСессия", ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена));
	ПараметрыСинхронизации.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыСинхронизации.Вставить("СообщениеОбмена", СообщениеОбмена);
		
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ОтправитьЗапросНаГенерациюSMSСбербанк", ПараметрыСинхронизации, ПараметрыВыполнения);

КонецФункции

// Запускает длительную операцию по отправке SMS в Сбербанк
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - подтверждаемый электронный документ
//  ИдентификаторКриптопрофиля - Строка - идентификатор, полученный из банка
//  SMSКод - Строка - код, введенный пользователем.
// 
// Возвращаемое значение:
//  Структура - см. описание в ДлительныеОперации.ВыполнитьВФоне.
//
Функция ЗапускЗаданияОтправкиSMSВСбербанк(Знач НастройкаОбмена, Знач СообщениеОбмена, Знач ИдентификаторКриптопрофиля, Знач SMSКод) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка кода SMS в Сбербанк.'");
	
	ПараметрыСинхронизации = Новый Структура;
	ПараметрыСинхронизации.Вставить("ТекущаяСессия", ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена));
	ПараметрыСинхронизации.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыСинхронизации.Вставить("СообщениеОбмена", СообщениеОбмена);
	ПараметрыСинхронизации.Вставить("SMSКод", SMSКод);
	ПараметрыСинхронизации.Вставить("ИдентификаторКриптопрофиля", ИдентификаторКриптопрофиля);
		
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ОтправитьЗапросНаПроверкуSMSСбербанк", ПараметрыСинхронизации, ПараметрыВыполнения);

КонецФункции

// Запускает длительную операцию синхронизации документов со Сбербанком
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
// 
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет
//                                     помещен (или уже помещен) результат работы процедуры.
//   * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
//                                     содержит адрес дополнительного временного хранилища,
//                                     в которое будет помещен (или уже помещен) результат работы процедуры.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//
Функция ЗапускЗаданияСинхронизацииСбербанк(Знач НастройкаОбмена) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выполнение синхронизации со Сбербанком.'");
	
	ПараметрыСинхронизации = Новый Структура;
	ПараметрыСинхронизации.Вставить("ТекущаяСессия", ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена));
	ПараметрыСинхронизации.Вставить("НастройкаОбмена", НастройкаОбмена);
		
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.СинхронизироватьДокументыСбербанк", ПараметрыСинхронизации, ПараметрыВыполнения);

КонецФункции

// Определяет параметры обмена со Сбербанком.
//
// Параметры:
//  ПерсональныеДанные - Строка - персональные данные, полученные из банка.
// 
// Возвращаемое значение:
//  Структура - параметры обмена с банком, содержит поля:
//     * ИдентификаторОрганизации - строка - идентификатор организации в системе банка.
//     * НаименованиеБанка - строка - наименование банка.
//     * НомерПодразделенияБанка - строка - номер подразделения банка.
//     * ЗаблокированныеКриптопрофили - Массив - идентификаторы заблокированных профилей.
//
Функция ПараметрыОбменаСбербанк(Знач ПерсональныеДанные) Экспорт
	
	ВидОперации = НСтр("ru = 'Чтение полученных данных из банка'");
	
	СтруктураВозврата = Новый Структура;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПерсональныеДанные);
	Попытка
		ЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Исключение
		ЧтениеXML.Закрыть();
		ТекстСообщения = НСтр("ru = 'Возникла ошибка при чтении полученных данных из банка'");
		ТекстОшибки = НСтр("ru = 'Возникла ошибка при чтении полученных данных из банка
								|Текст ошибки: %1'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки);
		ВидОперации = НСтр("ru = 'Чтение полученных данных из банка'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, ТекстСообщения, "ОбменСБанками");
		Возврат Неопределено;
	КонецПопытки;
	
	Если ЭД.Свойства().Получить("Errors") <> Неопределено Тогда
		ТекстСообщения = "";
		ОбработатьИзвещениеСОшибкойСбербанк(ПерсональныеДанные, ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	OrganizationInfo = ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(
		ЭД, "OrganizationsInfo.OrganizationInfo");
		
	Если OrganizationInfo = Неопределено Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		ТекстСообщения = НСтр("ru = 'Полученные некорректные данные из банка'");
		ТекстОшибки = НСтр("ru = 'Отсутствуют данные об организации.
								|Файл данных: %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИмяФайла);
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(ЭД, ИмяФайла, Ложь, "UTF-8");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, ТекстСообщения, "ОбменСБанками");
		Возврат Неопределено;
	КонецЕсли;

	Если ТипЗнч(OrganizationInfo) = Тип("ОбъектXDTO") Тогда
		ИнформацияОбОрганизации = OrganizationInfo;
	ИначеЕсли ТипЗнч(OrganizationInfo) = Тип("СписокXDTO") Тогда
		ИнформацияОбОрганизации = OrganizationInfo.Получить(0);
	Иначе
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		ТекстСообщения = НСтр("ru = 'Полученные некорректные данные из банка'");
		ТекстОшибки = НСтр("ru = 'Отсутствуют персональные данных организации.
								|Файл данных: %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИмяФайла);
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(ЭД, ИмяФайла, Ложь, "UTF-8");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, ТекстСообщения, "ОбменСБанками");
		Возврат Неопределено;
	КонецЕсли;
		
	ИдентификаторОрганизации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(
		ИнформацияОбОрганизации, "OrgData.OrgId");
	
	Если Не ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		ТекстСообщения = НСтр("ru = 'Полученные некорректные данные из банка'");
		ТекстОшибки = НСтр("ru = 'В персональных данных организации отсутствует идентификатор.
								|Файл данных: %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИмяФайла);
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(ЭД, ИмяФайла, Ложь, "UTF-8");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, ТекстСообщения, "ОбменСБанками");
		Возврат Неопределено;
	КонецЕсли;

	СтруктураВозврата.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
	
	Branch = ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(
		ЭД, "OrganizationsInfo.OrganizationInfo.Branches.Branch");
		
	Если Branch = Неопределено Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		ТекстСообщения = НСтр("ru = 'Полученные некорректные данные из банка'");
		ТекстОшибки = НСтр("ru = 'Отсутствуют данные о банке.
								|Файл данных: %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИмяФайла);
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(ЭД, ИмяФайла, Ложь, "UTF-8");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, ТекстСообщения, "ОбменСБанками");
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Branch) = Тип("ОбъектXDTO") Тогда
		ИнформацияОБанке = Branch;
	ИначеЕсли ТипЗнч(Branch) = Тип("СписокXDTO") Тогда
		ИнформацияОБанке = Branch.Получить(0);
	Иначе
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		ТекстСообщения = НСтр("ru = 'Полученные некорректные данные из банка'");
		ТекстОшибки = НСтр("ru = 'Отсутствуют данные о наименовании и подразделении банка.
								|Файл данных: %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИмяФайла);
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(ЭД, ИмяФайла, Ложь, "UTF-8");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, ТекстСообщения, "ОбменСБанками");
		Возврат Неопределено;
	КонецЕсли;
	
	НаименованиеБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(ИнформацияОБанке, "SystemName");
	СтруктураВозврата.Вставить("НаименованиеБанка", НаименованиеБанка);
	НомерПодразделенияБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(ИнформацияОБанке, "BranchId");
	СтруктураВозврата.Вставить("НомерПодразделенияБанка", НомерПодразделенияБанка);
	
	ЗаблокированныеКриптопрофили = Новый Массив;
	
	УчетныеЗаписиКлиентов = ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(
		ЭД, "OrganizationsInfo.OrganizationInfo.AuthPersons.AuthPerson");
		
	Если ТипЗнч(УчетныеЗаписиКлиентов) = Тип("СписокXDTO") Тогда
		Для каждого УчетнаяЗаписьКлиента Из УчетныеЗаписиКлиентов Цикл
			ДобавитьЗаблокированныеКриптопрофилиСбербанк(УчетнаяЗаписьКлиента, ЗаблокированныеКриптопрофили);
		КонецЦикла;
	ИначеЕсли ТипЗнч(УчетныеЗаписиКлиентов) = Тип("ОбъектXDTO") Тогда
		ДобавитьЗаблокированныеКриптопрофилиСбербанк(УчетныеЗаписиКлиентов, ЗаблокированныеКриптопрофили);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(ЗаблокированныеКриптопрофили);
	СтруктураВозврата.Вставить("ЗаблокированныеКриптопрофили", ЗаблокированныеКриптопрофили);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Запускает фоновое задание по отправке документов в Сбербанк
//
// Параметры:
//  ПараметрыОтправки - Структура - параметры отправки, содержит следующие поля:
//     * НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком
//     * МассивСообщенийОбмена - Массив - сообщения, которые необходимо отправить в банк
//          ** ДокументСсылка.СообщенияОбменСБанками - ссылка на сообщение обмена.
//     * МассивСообщенийОбменаСсылка - Строка - адрес временного хранилища, который содержит МассивСообщенийОбмена.
// 
// Возвращаемое значение:
//  Структура - см. описание в ДлительныеОперации.ВыполнитьВФоне.
//
Функция ЗапускЗаданияПоОтправкеДокументовВСбербанк(Знач ПараметрыОтправки) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка документов в Сбербанк.'");
	
	Если ПараметрыОтправки.Свойство("МассивСообщенийОбменаСсылка") Тогда
		МассивСообщенийОбмена = ПолучитьИзВременногоХранилища(ПараметрыОтправки.МассивСообщенийОбменаСсылка);
		ПараметрыОтправки.Вставить("МассивСообщенийОбмена", МассивСообщенийОбмена);
	КонецЕсли;
	
	ПараметрыОтправки.Вставить("ТекущаяСессия", ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(ПараметрыОтправки.НастройкаОбмена));
		
	ПараметрыОтправки.Вставить("АдресРезультата");
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ОтправитьДокументыВСбербанкБазоваяАутентификация", ПараметрыОтправки, ПараметрыВыполнения);
	
КонецФункции

// Отправляет одноразовый пароль в Сбербанк
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком;
//  КлючСессии - Произвольный - ключ установленной сессии со Сбербанком
//  ОдноразовыйПароль - Строка - пароль из SMS сообщения
//  Ошибка - Булево - признак ошибки при выполнении процедуры
//  ТребуетсяСменаПароля - Булево - (возвращаемое значение) требуется смена пароля
//  Соль - ДвоичныеДанные - (возвращаемое значение) соль.
//
Процедура ОтправитьОдноразовыйПарольВСбербанк(Знач НастройкаОбмена, Знач КлючСессии, Знач ОдноразовыйПароль, Ошибка, ТребуетсяСменаПароля) Экспорт
	
	WSПрокси = ОбменСБанкамиСлужебныйПовтИсп.WSПроксиСбербанк();
	
	ИдентификаторСессии = ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(КлючСессии).ИдентификаторСессии;
	
	Попытка
		XDTOРезультат = WSПрокси.verifySMSSession(ИдентификаторСессии, ОдноразовыйПароль);
	Исключение
	
		ОбменСБанкамиСлужебный.ДобавитьЗаписьВЖурнал(
			НастройкаОбмена, "verifySMSSession", WSПрокси.ФабрикаXDTO, ИдентификаторСессии, XDTOРезультат);
		ВидОперации = НСтр("ru = 'SMS аутентификация'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонСообщения = Нстр("ru = 'При SMS-аутентификации произошла ошибка:
								|%1'");
		ТекстОшибки = СтрШаблон(ШаблонСообщения, КраткаяИнформация);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ПодробноеПредставлениеОшибки, ТекстОшибки, "ОбменСБанками");
		Ошибка = Истина;
		Возврат;
	КонецПопытки;
	
	ОбменСБанкамиСлужебный.ДобавитьЗаписьВЖурнал(
		НастройкаОбмена, "verifySMSSession", WSПрокси.ФабрикаXDTO, ИдентификаторСессии, XDTOРезультат);
	
	Если XDTOРезультат = "AA==" Тогда // Операция выполнена успешно
	ИначеЕсли XDTOРезультат = "Ag==" Тогда // Необходимо сменить пароль
		ТребуетсяСменаПароля = Истина;
	Иначе
		ВидОперации = НСтр("ru = 'Проверка SMS пароля'");
		ОбменСБанкамиКлиентСервер.СообщитьОбОшибкеСбербанк(ВидОперации, XDTOРезультат);
		Ошибка = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет смену пароля 
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//  КлючСессии - Произвольный - ключ установленной сессии с банком
//  ДанныеАутентификации - Структура - данные для аутентификации на сервере банка:
//   * Логин - Строка - логин пользователя в системе банка
//   * Пароль - Строка - старый пароль
//   * НовыйПароль - Строка - новый пароль
//  Соль - ДвоичныеДанные - соль, полученная из банка
//  B - ДвоичныеДанные - значение параметра B для расчета свертки
//  Ошибка - Булево - признак возникновения ошибки.
//
Процедура СменитьПарольСбербанк(Знач НастройкаОбмена, Знач КлючСессии, Знач ДанныеАутентификации, Знач Соль, Знач B, Ошибка) Экспорт
	
	Логин = ДанныеАутентификации.Логин;
	СтарыйПароль = ДанныеАутентификации.Пароль;
	НовыйПароль = ДанныеАутентификации.НовыйПароль;
	
	ИдентификаторСессии = ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(КлючСессии).ИдентификаторСессии;
	
	WSПрокси = ОбменСБанкамиСлужебныйПовтИсп.WSПроксиСбербанк();
	
	Попытка
	
		ТекстОшибки = "";
	
		ПодготовкаСменыПароляТип = WSПрокси.ФабрикаXDTO.Тип("http://upg.sbns.bssys.com/", "preChangePassword");
		ЗначениеXDTO = WSПрокси.ФабрикаXDTO.Создать(ПодготовкаСменыПароляТип);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗначениеXDTO, "sessionId", ИдентификаторСессии, Истина, ТекстОшибки);
	
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ШаблонСообщения = НСтр("ru = 'Ошибка формирования запроса на смену пароля:
									|%1'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ШаблонСообщения, ТекстОшибки));
			Ошибка = Истина;
			Возврат;
		КонецЕсли;
	
		ЗначениеXDTO.Проверить();
	
	Исключение
	
		ВидОперации = НСтр("ru = 'Формирование запроса на смену пароля'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонСообщения = Нстр("ru = 'При формировании запроса на смену пароля произошла ошибка:
								|%1'");
		ТекстОшибки = СтрШаблон(ШаблонСообщения, КраткаяИнформация);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ПодробноеПредставлениеОшибки, ТекстОшибки, "ОбменСБанками");
		Ошибка = Истина;
		Возврат;
	КонецПопытки;
	
	Попытка
		XDTOРезультат = WSПрокси.preChangePassword(ЗначениеXDTO);
	Исключение
		ОбменСБанкамиСлужебный.ДобавитьЗаписьВЖурнал(
			НастройкаОбмена, "preChangePassword", WSПрокси.ФабрикаXDTO, ЗначениеXDTO, XDTOРезультат);
		ВидОперации = НСтр("ru = 'Запрос смены пароля'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонСообщения = Нстр("ru = 'При отправке запроса на смену пароля произошла ошибка:
								|%1'");
		ТекстОшибки = СтрШаблон(ШаблонСообщения, КраткаяИнформация);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ПодробноеПредставлениеОшибки, ТекстОшибки, "ОбменСБанками");
		Ошибка = Истина;
		Возврат;
	КонецПопытки;
	
	ОбменСБанкамиСлужебный.ДобавитьЗаписьВЖурнал(
		НастройкаОбмена, "preChangePassword", WSПрокси.ФабрикаXDTO, ЗначениеXDTO, XDTOРезультат);
	
	СольНовая = XDTOРезультат.return[0];
	
	ВидОперации = НСтр("ru = 'Смена пароля'");

	K = Неопределено; A = Неопределено;
	РассчитатьСверткуПароляСбербанк(Логин, СтарыйПароль, Соль, B, K, A);

	Верификатор = ВерификаторНовогоПароляСбербанк(Логин, НовыйПароль, СольНовая);
	
	Попытка
	
		ТекстОшибки = "";
		
		
		ИзменениеПароляТип = WSПрокси.ФабрикаXDTO.Тип("http://upg.sbns.bssys.com/", "changePassword");
		ЗначениеXDTO = WSПрокси.ФабрикаXDTO.Создать(ИзменениеПароляТип);
		
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗначениеXDTO, "sessionId", ИдентификаторСессии, Истина, ТекстОшибки);
		ЗначениеXDTO.newPasswordData.Добавить(K);
		ЗначениеXDTO.newPasswordData.Добавить(A);
		ЗначениеXDTO.newPasswordData.Добавить(Верификатор);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ШаблонСообщения = НСтр("ru = 'Ошибка смены пароля:
									|%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекстОшибки);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ТекстСообщения, ТекстСообщения, "ОбменСБанками");
			Ошибка = Истина;
			Возврат;

		КонецЕсли;
		
		ЗначениеXDTO.Проверить();
		
	Исключение
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонСообщения = Нстр("ru = 'При смене пароля произошла ошибка:
								|%1'");
		ТекстОшибки = СтрШаблон(ШаблонСообщения, КраткаяИнформация);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ПодробноеПредставлениеОшибки, ТекстОшибки, "ОбменСБанками");
		Ошибка = Истина;
		Возврат;
	КонецПопытки;

	Попытка
		XDTOРезультат = WSПрокси.changePassword(ЗначениеXDTO);
	Исключение
		ОбменСБанкамиСлужебный.ДобавитьЗаписьВЖурнал(
			НастройкаОбмена, "changePassword", WSПрокси.ФабрикаXDTO, ЗначениеXDTO, XDTOРезультат);
		ВидОперации = НСтр("ru = 'Отправка нового пароля в банк'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонСообщения = Нстр("ru = 'При отправке пароля в банк произошла ошибка:
								|%1'");
		ТекстОшибки = СтрШаблон(ШаблонСообщения, КраткаяИнформация);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ПодробноеПредставлениеОшибки, ТекстОшибки, "ОбменСБанками");
		Ошибка = Истина;
		Возврат;
	КонецПопытки;
	
	ОбменСБанкамиСлужебный.ДобавитьЗаписьВЖурнал(
		НастройкаОбмена, "changePassword", WSПрокси.ФабрикаXDTO, ЗначениеXDTO, XDTOРезультат);
	
	КодВозврата = Base64Строка(XDTOРезультат.return[1]);
	Если КодВозврата <> "AA==" Тогда // успех
		СписокКодовСбербанк = Новый Соответствие;
		Описание = НСтр("ru = 'Время жизни идентификатора сессии истекло.'");
		СписокКодовСбербанк.Вставить("AQ==", Новый Структура("Код, Описание", "01", Описание));
		Описание = НСтр("ru = 'Неверные данные нового пароля.'");
		СписокКодовСбербанк.Вставить("Ag==", Новый Структура("Код, Описание", "02", Описание));
		Описание = НСтр("ru = 'Не специфицированная ошибка.'");
		СписокКодовСбербанк.Вставить("CQ==", Новый Структура("Код, Описание", "09", Описание));
		
		ТекущаяОшибка = СписокКодовСбербанк.Получить(КодВозврата);
			
		Если ТекущаяОшибка = Неопределено Тогда
			ШаблонОшибки = НСтр("ru = 'Ошибка смены пароля.
									|Код: %1'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, КодВозврата);
		Иначе
			ШаблонОшибки = НСтр("ru = 'Ошибка смены пароля.
									|Код: %1
									|Описание: %2'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, ТекущаяОшибка.Код, ТекущаяОшибка.Описание);
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, ТекстОшибки, "ОбменСБанками");
		Ошибка = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Формирует текст запроса персональных данных организации
// 
// Возвращаемое значение:
//  Строка - текст запроса персональных данных.
//
Функция ЗапросПерсональныхДанныхОрганизацииСбербанк() Экспорт
	
	Операция = НСтр("ru = 'Формирование запроса персональных данных организации.'");
	
	Попытка
		Request = ОбменСБанкамиСлужебный.ОбъектТипаCML(ФабрикаXDTO, "Request", "http://bssys.com/upg/request");
		ИдентификаторЗапроса = Новый УникальныйИдентификатор;
		ТекстОшибки = "";
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "requestId", Строка(ИдентификаторЗапроса), Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "orgId", "00000000-0000-0000-0000-000000000000", Истина, ТекстОшибки);
		ВерсияФорматаСбербанк = ОбменСБанкамиСлужебный.ВерсияФорматаСбербанк();
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "version", ВерсияФорматаСбербанк, Истина, ТекстОшибки);
		ПредставлениеОтправителя = ОбменСБанкамиСлужебный.ПредставлениеОтправителяСбербанк();
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "sender", ПредставлениеОтправителя, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "receiver", "SBBOL_DBO", Истина, ТекстОшибки);
		
		PersonalInfo = ОбменСБанкамиСлужебный.ОбъектТипаCML(ФабрикаXDTO, "PersonalInfo", "http://bssys.com/upg/request");
		
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "PersonalInfo", PersonalInfo, Истина, ТекстОшибки);
		
		Request.Проверить();
		
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку("UTF-8");
		Запись.ЗаписатьОбъявлениеXML();
		ФабрикаXDTO.ЗаписатьXML(Запись, Request);
		ТекстЗапроса = Запись.Закрыть();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				Операция, ТекстОшибки, ТекстОшибки, "ОбменСБанками");
			Возврат Неопределено;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ТекстОшибки, ТекстСообщения, "ОбменСБанками");
		Возврат Неопределено;
	КонецПопытки;
		
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Права

// Проверяет возможность чтения данных обмена с банком для текущего пользователя
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости вывода сообщения о недостаточности прав.
// 
// Возвращаемое значение:
//  Булево - наличие права на выполнение обмена с банком.
//
Функция ПравоЧтенияДанных(ВыводитьСообщение = Ложь) Экспорт
	
	Возврат ОбменСБанками.ПравоЧтенияДанных(ВыводитьСообщение);
		
КонецФункции

// Только для внутреннего использования
Функция ПравоВыполненияОбмена(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = Пользователи.РолиДоступны("ВыполнениеОбменаОбменСБанками")
		И ПравоОбработкиЭД();
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		ЭлектронноеВзаимодействиеСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
		
	Возврат ЕстьПраво;
	
КонецФункции

// Только для внутреннего использования
Функция ПравоНастройкиОбмена() Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ПравоДоступа("Изменение", Метаданные.Справочники.НастройкиОбменСБанками);
	
КонецФункции


#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиОбменаСБанками

// Получает параметры журналирования.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком;
// 
// Возвращаемое значение:
//  Структура - параметры обмена с банком:
//    * ИспользоватьЖурналирование - Булево - признак использования журналирования обмена;
//    * КаталогДляЖурналирования - Строка - каталог для сохранения файлов журнала.
//
Функция ПараметрыЖурналирования(Знач НастройкаОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Новый Структура("ИспользоватьЖурналирование, КаталогДляЖурналирования", Ложь, "");
	
	Отбор = Новый Структура("НастройкаОбмена", НастройкаОбмена);
	
	Выборка = РегистрыСведений.ПараметрыОбменСБанками.Выбрать(Отбор);
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Производит поиск настройки обмена с банком.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация, указанная в настройке;
//   Банк - СправочникСсылка.КлассификаторБанков - банк, указанный в настройке;
//   ТолькоДействительная - Булево - Истина - поиск только действующей настройки, Ложь - поиск любой настройки.
//   ЕстьПравоПросмотраНастройкиЭДО - Булево - признак наличия у пользователя права открытия настройки обмена для просмотра.
//   ЕстьПравоНастройкиЭДО - Булево - признак наличия у пользователя права настройки обмена с банком.
//   ВключитьФО - Булево - включить функциональную опцию возможности прямого обмена, если у пользователя достаточно на это прав.
//   ФОВключенаСейчас - Булево - прямой обмен с банком был включен при вызове метода.
//
// Возвращаемое значение:
//   СправочникСсылка.НастройкиОбменСБанками или Неопределено - найденная настройка обмена с банком.
//
Функция НастройкаОбмена(Знач Организация, Знач Банк, Знач ТолькоДействительная, Знач ВключитьФО, ЕстьПравоПросмотраНастройкиЭДО = Ложь, ЕстьПравоНастройкиЭДО = Ложь, ФОВключенаСейчас = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОтключенаФО = НЕ Константы.ИспользоватьОбменСБанками.Получить();
	ЕстьПравоПросмотраНастройкиЭДО = ПравоДоступа("Просмотр", Метаданные.Справочники.НастройкиОбменСБанками);
	ТекущаяНастройкаОбмена = ОбменСБанками.НастройкаОбмена(Организация, Банк, ТолькоДействительная);
	ЕстьПравоНастройкиЭДО = ПравоДоступа("Изменение", Метаданные.Справочники.НастройкиОбменСБанками);

	Если ОтключенаФО И ВключитьФО И ЕстьПравоНастройкиЭДО И ЗначениеЗаполнено(ТекущаяНастройкаОбмена) Тогда
		Константы.ИспользоватьОбменСБанками.Установить(Истина);
		ФОВключенаСейчас = Истина;
	КонецЕсли;
	
	Возврат ТекущаяНастройкаОбмена;
	
КонецФункции

#КонецОбласти

#Область ОбработкаЭлектронногоДокумента

Функция ЗапросыВыписок(Знач НастройкаОбмена, Знач ДатаНачала, Знач ДатаОкончания, Знач НомерСчета, МассивОтпечатковСертификатов, НастройкиОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбмена, "Организация, Банк, ПрограммаБанка, ИдентификаторОрганизации");
	
	МассивБанковскихСчетов = Новый Массив;
	Если ЗначениеЗаполнено(НомерСчета) Тогда
		МассивБанковскихСчетов.Добавить(НомерСчета);
	Иначе
		ОбменСБанкамиПереопределяемый.ПолучитьНомераБанковскихСчетов(
			РеквизитыНастройкиОбмена.Организация, РеквизитыНастройкиОбмена.Банк, МассивБанковскихСчетов);
	КонецЕсли;
		
	Если РеквизитыНастройкиОбмена.ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн Тогда
		МассивСообщенийЗапросов = МассивЗапросовВыписки(НастройкаОбмена, РеквизитыНастройкиОбмена.Организация,
			РеквизитыНастройкиОбмена.Банк, ДатаНачала, ДатаОкончания, МассивБанковскихСчетов);
	Иначе
		МассивСообщенийЗапросов = МассивЗапросовВыпискиAsync(
			НастройкаОбмена, РеквизитыНастройкиОбмена.ИдентификаторОрганизации, ДатаНачала, ДатаОкончания, МассивБанковскихСчетов);
	КонецЕсли;
		
	Если НЕ МассивСообщенийЗапросов.Количество() Тогда
		Возврат МассивСообщенийЗапросов;
	КонецЕсли;
	
	ВыполнятьКриптооперацииНаСервере = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере();
	
	Если ВыполнятьКриптооперацииНаСервере Тогда
		Попытка
			МассивОтпечатковСервера = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов();
		Исключение
			МассивОтпечатковСервера = Новый Массив;
		КонецПопытки;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковСертификатов, МассивОтпечатковСервера, Истина);
	КонецЕсли;
	
	НастройкиОбмена = ОбменСБанкамиСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(
		НастройкаОбмена, Истина, МассивОтпечатковСертификатов, МассивСообщенийЗапросов[0]);
	
	Возврат МассивСообщенийЗапросов;
	
КонецФункции

// Возвращает ссылку на присоединенный к сообщению файл.
// 
// Параметры:
//   СообщениеОбмена - ДокументСсылка.СообщенияОбменСБанками - ссылка на сообщение обмена.
//   ВыводитьОшибку - Булево - выводить текст ошибки в виде сообщения.
//
// Возвращаемое значение:
//   СправочникСсылка.СообщениеОбменСБанкамиПрисоединенныеФайлы - присоединенный файл.
//
Функция ПрисоединенныйФайл(СообщениеОбмена, ВыводитьОшибку = Истина) Экспорт
	
	МассивФайлов = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(СообщениеОбмена, МассивФайлов);
	Если МассивФайлов.Количество() Тогда
		Возврат МассивФайлов[0];
	ИначеЕсли ВыводитьОшибку Тогда
		Операция = НСтр("ru = 'Получение присоединенного файла'");
		ТекстОшибки = НСтр("ru = 'Не обнаружен присоединенный файл объекта: %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, СообщениеОбмена);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ТекстОшибки, ТекстОшибки, "ОбменСБанками", СообщениеОбмена);
	КонецЕсли;
	
КонецФункции

// Возвращает ссылку на владельца присоединенного файла.
//
// Параметры:
//   ПрисоединенныйФайл - СправочникСсылка - ссылка на присоединенный файл.
//
// Возвращаемое значение:
//   ДокументСсылка - ссылка на владельца присоединенного файла.
//
Функция ВладелецФайла(ПрисоединенныйФайл) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "ВладелецФайла");
	
КонецФункции

// Возвращает представление электронного документа.
// 
// Параметры:
//   СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена.
//
// Возвращаемое значение:
//   Строка - строковое представление электронного документа.
//
Функция ПредставлениеЭлектронногоДокумента(СообщениеОбмена) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "ПредставлениеДокумента");
	
КонецФункции

#КонецОбласти

#Область АсинхронныйОбменСБанками

// Возвращает зашифрованный маркер банка. Может вызывать исключение.
//
// Параметры:
//  АдресСервера - Строка - URL адрес сервера;
//  ИдентификаторОрганизации - Строка - идентификатор организации на сервере банка;
//  ДанныеСертификата - ДвоичныеДанные - содержимое сертификата электронной подписи;
//  ВерсияФормата - Строка - текущая версия схемы обмена;
//  ПробнаяОперация - Булево - признак, что операция пробная и записывать ошибки в журнал регистрации не нужно;
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена с банком.
//
// Возвращаемое значение:
//  ДвоичныеДанные - зашифрованные двоичные данные маркера.
//
Функция МаркерБанкаПоСертификату(АдресСервера, ИдентификаторОрганизации, ДвоичныеДанныеСертификата, ВерсияФормата = Неопределено, ПробнаяОперация = Ложь, НастройкаОбмена = Неопределено) Экспорт
	
	ВидОперации = НСтр("ru = 'Аутентификация на сервере банка'");

	Маркер = Неопределено;
	
	Если Не ЗначениеЗаполнено(ВерсияФормата) Тогда
		ВерсияФормата = ОбменСБанкамиКлиентСервер.БазоваяВерсияФорматаАсинхронногоОбмена();
	КонецЕсли;
	
	ДанныеАутентификации = ДанныеДляАутентификацииПоСертификату(ДвоичныеДанныеСертификата, ВерсияФормата);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/xml; charset=utf-8");
	Заголовки.Вставить("CustomerID", ИдентификаторОрганизации);
	Заголовки.Вставить("APIVersion", ВерсияФормата);
	Заголовки.Вставить("AvailableAPIVersion", ОбменСБанкамиКлиентСервер.АктуальнаяВерсияФорматаАсинхронногоОбмена());
	
	Результат = ЭлектронноеВзаимодействиеСлужебный.ОтправитьЗапросНаСервер(
		АдресСервера, "LogonCert", Заголовки, ДанныеАутентификации, , 30);
		
	Если НЕ Результат.Статус Тогда
		Если ЗначениеЗаполнено(Результат.КодСостояния) Тогда
			Шаблон = НСтр("ru = 'Ошибка аутентификации на сервере банка по сертификату.
								|Адрес ресурса: %1
								|Код ошибки: %2
								|%3'");
			ТекстОшибки = СтрШаблон(Шаблон, АдресСервера, Результат.КодСостояния, Результат.СообщениеОбОшибке);
		Иначе
			Шаблон = НСтр("ru = 'Ошибка аутентификации на сервере банка по сертификату.
								|Адрес ресурса: %1
								|Ошибка: %2'");
			ТекстОшибки = СтрШаблон(Шаблон, АдресСервера, Результат.СообщениеОбОшибке);
		КонецЕсли;
		Если НЕ ПробнаяОперация Тогда
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ТекстОшибки, , "ОбменСБанками", НастройкаОбмена);
		КонецЕсли;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Чтение = Новый ЧтениеXML;
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла("xml");
	Результат.Тело.Записать(ИмяФайлаРезультата);
	
	Попытка
		
		Чтение.ОткрытьФайл(ИмяФайлаРезультата);
		
		ResultBank = ФабрикаXDTO.ПрочитатьXML(Чтение);
		Если ResultBank.Свойства().Получить("formatVersion") = Неопределено Тогда
			ВерсияФормата = ОбменСБанкамиКлиентСервер.УстаревшаяВерсияФорматаАсинхронногоОбмена();
		Иначе
			ВерсияФормата = ResultBank.formatVersion;
		КонецЕсли;
		ПространствоИмен = ОбменСБанкамиСлужебный.ПространствоИменАсинхронногоОбмена(ВерсияФормата);

		Фабрика = ОбменСБанкамиСлужебныйПовтИсп.ФабрикаAsyncXDTO(ВерсияФормата);
		Чтение.ОткрытьФайл(ИмяФайлаРезультата);

		ПакетТип = ОбменСБанкамиСлужебный.ТипЗначенияCML(Фабрика, ПространствоИмен, "ResultBank");
		ResultBank = Фабрика.ПрочитатьXML(Чтение, ПакетТип);
		
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось пройти процесс аутентификации. Получен некорректный ответ банка.
									|Проверьте настройки обмена с сервисом 1С:ДиректБанк или обратитесь в техподдержку банка.'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = НСтр("ru = 'Не удалось прочитать файл, полученный из банка.
								|Полученный файл: %1
								|Подробная информация об ошибке: %2'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИмяФайлаРезультата, ПодробноеПредставлениеОшибки);
		Если Не ПробнаяОперация Тогда
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ТекстОшибки, , "ОбменСБанками", НастройкаОбмена);
		КонецЕсли;
		Чтение.Закрыть();
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Если НЕ ResultBank.Error = Неопределено Тогда
		Если Не ПробнаяОперация Тогда
			ТекстСообщенияОПолученнойОшибке = ОбменСБанкамиСлужебный.ТекстСообщенияОбОшибкеОтветаБанка(ResultBank.Error);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ТекстСообщенияОПолученнойОшибке, , "ОбменСБанками", НастройкаОбмена);
		КонецЕсли;
		Чтение.Закрыть();
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаРезультата);
		ВызватьИсключение ТекстСообщенияОПолученнойОшибке;
	КонецЕсли;
	
	Маркер = ResultBank.Success.LogonCertResponse.EncryptedSID.__content;
	Чтение.Закрыть();
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаРезультата);
	
	Возврат Маркер;
	
КонецФункции

// Получает зашифрованный идентификатор сессии с сервера банка.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком;
//  ДанныеСертификатаАутентификации - Структура - данные сертификата аутентификации. Содержит поля:
//     * Ссылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат аутентификации;
//     * Данные - Строка - адрес временного хранилища, содержащий двоичные данные сертификата аутентификации.
// 
// Возвращаемое значение:
//  ДвоичныеДанные - зашифрованные двоичные данные идентификатора сессии;
//  Неопределено - при получении идентификатора сессии произошла ошибка.
//
Функция ЗашифрованныйИдентификаторСессии(Знач НастройкаОбмена, Знач ДанныеСертификатаАутентификации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбмена, "ИдентификаторОрганизации, АдресСервера, ВерсияФормата");
	
	СертификатПодписи = ДанныеСертификатаАутентификации.Ссылка;
	ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(ДанныеСертификатаАутентификации.Данные);
	
	Возврат МаркерБанкаПоСертификату(РеквизитыНастройкиОбмена.АдресСервера,
		РеквизитыНастройкиОбмена.ИдентификаторОрганизации, ДвоичныеДанныеСертификата, РеквизитыНастройкиОбмена.ВерсияФормата,
		, НастройкаОбмена)
	
КонецФункции

// Производит аутентификацию на сервере банка и получает идентификатор сессии.
//
// Параметры:
//  АдресСервера - Строка - URL адрес сервера банка;
//  ИдентификаторОрганизации  - Строка - идентификатор организации на сервере банка;
//  ДанныеАутентификации - Структура - данные аутентификации на сервере банка:
//        * Пользователь - Строка - логин на сервере банка;
//        * Пароль - Строка - пароль аутентификации на сервере банка.
//  ВерсияAPI - Строка - версия API;
//  ДанныеSMSАвторизации - Структура - возвращаемый параметр - содержит данные для дополнительной авторизации по SMS.
// Возвращаемое значение:
//  Строка - идентификатор сессии банка, Неопределено - если произошла ошибка получения идентификатора.
//
Функция МаркерБанкаБазоваяАутентификация(Знач АдресСервера, Знач ИдентификаторОрганизации, Знач ДанныеАутентификации, Знач ВерсияAPI, ДанныеSMSАутентификации, Знач НастройкаОбмена = Неопределено, НеверныеДанныеАутентификации = Ложь) Экспорт
	
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла("xml");
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/xml; charset=utf-8");
	Заголовки.Вставить("CustomerID", ИдентификаторОрганизации);
	Заголовки.Вставить("APIVersion", ВерсияAPI);
	Заголовки.Вставить("AvailableAPIVersion", ОбменСБанкамиКлиентСервер.АктуальнаяВерсияФорматаАсинхронногоОбмена());
	ХЭШ = СтрокаBase64БезBOM(ДанныеАутентификации.Логин + ":" + ДанныеАутентификации.Пароль);
	Заголовки.Вставить("Authorization", "Basic " + Хэш);
	
	Результат = ЭлектронноеВзаимодействиеСлужебный.ОтправитьЗапросНаСервер(АдресСервера, "Logon", Заголовки, , , 15);
	
	Если Не Результат.Статус Тогда
		Если ЗначениеЗаполнено(Результат.КодСостояния) Тогда
			Шаблон = НСтр("ru = 'Ошибка отправки данных аутентификации на сервер банка.
								|Адрес ресурса: %1
								|Код ошибки: %2
								|%3.'");
			ТекстОшибки = СтрШаблон(Шаблон, АдресСервера, Результат.КодСостояния, Результат.СообщениеОбОшибке);
		Иначе
			Шаблон = НСтр("ru = 'Ошибка отправки данных аутентификации на сервер банка.
								|Адрес ресурса: %1
								|Ошибка: %2'");
			ТекстОшибки = СтрШаблон(Шаблон, АдресСервера, Результат.СообщениеОбОшибке);
		КонецЕсли;
		ОписаниеОперации = НСтр("ru = 'Аутентификация на сервере банка'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ОписаниеОперации, ТекстОшибки, ТекстОшибки, "ОбменСБанками", НастройкаОбмена);
		Возврат Неопределено;
	КонецЕсли;
	
	Результат.Тело.Записать(ИмяФайлаРезультата);
	
	Чтение = Новый ЧтениеXML;
	
	Попытка
		Чтение.ОткрытьФайл(ИмяФайлаРезультата);
		ResultBank = ФабрикаXDTO.ПрочитатьXML(Чтение);
		Если ResultBank.Свойства().Получить("formatVersion") = Неопределено Тогда
			ВерсияФормата = ОбменСБанкамиКлиентСервер.УстаревшаяВерсияФорматаАсинхронногоОбмена();
		Иначе
			ВерсияФормата = ResultBank.formatVersion;
		КонецЕсли;
		ПространствоИмен = ОбменСБанкамиСлужебный.ПространствоИменАсинхронногоОбмена(ВерсияФормата);
		Фабрика = ОбменСБанкамиСлужебныйПовтИсп.ФабрикаAsyncXDTO(ВерсияФормата);
		Чтение.ОткрытьФайл(ИмяФайлаРезультата);
		ПакетТип = ОбменСБанкамиСлужебный.ТипЗначенияCML(Фабрика, ПространствоИмен, "ResultBank");
		ResultBank = Фабрика.ПрочитатьXML(Чтение, ПакетТип);
		Если НЕ ResultBank.Success = Неопределено Тогда
			Если НЕ ResultBank.Success.LogonResponse = Неопределено Тогда
				Если НЕ ResultBank.Success.LogonResponse.ExtraAuth = Неопределено Тогда
					ДанныеSMSАутентификации = Новый Структура;
					ДанныеSMSАутентификации.Вставить("ТребуетсяSMSАвторизация");
					ДанныеSMSАутентификации.Вставить("МаскаТелефона", ResultBank.Success.LogonResponse.ExtraAuth.OTP.phoneMask);
				КонецЕсли;
				Чтение.Закрыть();
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаРезультата);
				Возврат ResultBank.Success.LogonResponse.SID;
			Иначе
				ТекстСообщения = НСтр("ru = 'Получен некорректный ответ банковского сервиса'");
				ТекстОшибки = НСтр("ru = 'Ответ банка содержит некорректные данные.
										|Файл ответа банка: %1'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, ИмяФайлаРезультата);
				ОписаниеОперации = НСтр("ru = 'Аутентификация на сервере банка'");
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
					ОписаниеОперации, ТекстОшибки, ТекстСообщения, "ОбменСБанками", НастройкаОбмена);
				Возврат Неопределено;
			КонецЕсли
		ИначеЕсли НЕ ResultBank.Error = Неопределено Тогда
			ТекстОшибки = ОбменСБанкамиСлужебный.ТекстСообщенияОбОшибкеОтветаБанка(ResultBank.Error);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, НастройкаОбмена);
			Если ResultBank.Error.Code = "1201" Тогда // неверные данные аутентификации
				НеверныеДанныеАутентификации = Истина;
			КонецЕсли;
		КонецЕсли;
		Чтение.Закрыть();
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаРезультата);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка чтения ответа банка.'");
		ОписаниеОперации = НСтр("ru = 'Аутентификация на сервере банка'");
		ШаблонОшибки = НСтр("ru = 'При чтении ответа банка произошла ошибка.
								|Файл ответа: %1
								|Ошибка: %2'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтрШаблон(ШаблонОшибки, ИмяФайлаРезультата, ПодробноеПредставлениеОшибки);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ОписаниеОперации, ТекстОшибки, ТекстСообщения, "ОбменСБанками", НастройкаОбмена);
	КонецПопытки;
	
КонецФункции

// Авторизуется на сервере банка и получает идентификатор сессии по одноразовому паролю из SMS.
//
// Параметры
//  АдресСервера - Строка - URL адрес сервера банка;
//  ИдентификаторОрганизации - Строка - идентификатор организации на сервере банка;
//  ИдентификаторСессии  - Строка - неавторизованный идентификатор сессии;
//  ОдноразовыйПароль - Строка - пароль, полученный пользователем в виде СМС;
//  ВерсияAPI - Строка - версия API асинхронного обмена;
// Возвращаемое значение:
//   Строка   - идентификатор сессии банка, Неопределено - если произошла ошибка получения идентификатора.
//
Функция МаркерБанкаПоSMS(Знач АдресСервера, Знач ИдентификаторОрганизации, Знач ИдентификаторСессии, Знач ОдноразовыйПароль, Знач ВерсияAPI) Экспорт
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/xml; charset=utf-8");
	Заголовки.Вставить("CustomerID", ИдентификаторОрганизации);
	Заголовки.Вставить("SID", ИдентификаторСессии);
	Заголовки.Вставить("OTP", ОдноразовыйПароль);
	Заголовки.Вставить("APIVersion", ВерсияAPI);
	
	Результат = ЭлектронноеВзаимодействиеСлужебный.ОтправитьЗапросНаСервер(АдресСервера, "LogonOTP", Заголовки, , , 15);
	
	Если Не Результат.Статус Тогда
		Если ЗначениеЗаполнено(Результат.КодСостояния) Тогда
			Шаблон = НСтр("ru = 'Ошибка отправки одноразового пароля.
								|Код ошибки: %1.
								|%2'");
			ТекстОшибки = СтрШаблон(Шаблон, Результат.КодСостояния, Результат.СообщениеОбОшибке);
		Иначе
			ТекстОшибки = Результат.СообщениеОбОшибке;
		КонецЕсли;
		ОписаниеОперации = НСтр("ru = 'Аутентификация на сервере банка'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ОписаниеОперации, ТекстОшибки, ТекстОшибки, "ОбменСБанками");
		Возврат Неопределено;
	КонецЕсли;

	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла("xml");
	
	Результат.Тело.Записать(ИмяФайлаРезультата);
	
	Чтение = Новый ЧтениеXML;
	
	Попытка
		Чтение.ОткрытьФайл(ИмяФайлаРезультата);
		ResultBank = ФабрикаXDTO.ПрочитатьXML(Чтение);
		Если ResultBank.Свойства().Получить("formatVersion") = Неопределено Тогда
			ВерсияФормата = ОбменСБанкамиКлиентСервер.УстаревшаяВерсияФорматаАсинхронногоОбмена();
		Иначе
			ВерсияФормата = ResultBank.formatVersion;
		КонецЕсли;
		ПространствоИмен = ОбменСБанкамиСлужебный.ПространствоИменАсинхронногоОбмена(ВерсияФормата);
		Фабрика = ОбменСБанкамиСлужебныйПовтИсп.ФабрикаAsyncXDTO(ВерсияФормата);
		Чтение.ОткрытьФайл(ИмяФайлаРезультата);
		ПакетТип = ОбменСБанкамиСлужебный.ТипЗначенияCML(Фабрика, ПространствоИмен, "ResultBank");
		ResultBank = Фабрика.ПрочитатьXML(Чтение, ПакетТип);
		Если НЕ ResultBank.Success = Неопределено Тогда
			Если НЕ ResultBank.Success.LogonResponse = Неопределено Тогда
				Чтение.Закрыть();
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаРезультата);
				Возврат ResultBank.Success.LogonResponse.SID;
			КонецЕсли
		ИначеЕсли НЕ ResultBank.Error = Неопределено Тогда
			ТекстОшибки = ОбменСБанкамиСлужебный.ТекстСообщенияОбОшибкеОтветаБанка(ResultBank.Error);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка чтения ответа банка.'");
		ОписаниеОперации = НСтр("ru = 'Аутентификация на сервере банка'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ОписаниеОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, "ОбменСБанками");
	КонецПопытки;
	
	Чтение.Закрыть();
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаРезультата);
	
КонецФункции

// Формирует ЭД запрос-зонд.
//
// Параметры:
//  НастройкаОбмена  - СправочникСсылка.НастройкиОбменСБаками - настройка обмена с банком;
//  МассивСтруктурСертификатов - Массив - в элементах содержатся отпечатки сертификатов в виде строки;
//  НастройкиОбмена - Структура - (Возвращаемое значение) содержит настройки обмена;
//  НовоеСообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сформированное сообщение запрос-зонд.
//
Процедура СформироватьЗапросЗонд(Знач НастройкаОбмена, Знач МассивОтпечатковСертификатов, НовоеСообщениеОбмена, НастройкиОбмена) Экспорт
	
	ЗапросОтправлен = Ложь;
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбмена, "Организация, Банк, ИдентификаторОрганизации, ВерсияФормата");

	ОтправительНаименование = ЭлектронноеВзаимодействиеСлужебный.СокращенноеНаименованиеОрганизации(
		РеквизитыНастройкиОбмена.Организация);
	ВерсияПрограммыКлиента = ОбменСБанкамиСлужебныйПовтИсп.ВерсияПрограммыКлиентаДляБанка();
	РеквизитыОрганизации = Неопределено; 
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(
		РеквизитыНастройкиОбмена.Организация, РеквизитыОрганизации);
	РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыНастройкиОбмена.Банк, "Код, Наименование");
	
	Если ЗначениеЗаполнено(РеквизитыНастройкиОбмена.ВерсияФормата) Тогда
		ВерсияФормата = РеквизитыНастройкиОбмена.ВерсияФормата;
	Иначе
		ВерсияФормата = ОбменСБанкамиКлиентСервер.АктуальнаяВерсияФорматаАсинхронногоОбмена();
	КонецЕсли;
	
	ПространствоИмен = ОбменСБанкамиСлужебный.ПространствоИменАсинхронногоОбмена(ВерсияФормата);
	ТекстОшибки = "";
	
	Попытка
		
		Фабрика = ОбменСБанкамиСлужебныйПовтИсп.ФабрикаAsyncXDTO(ВерсияФормата);
		
		Идентификатор = Новый УникальныйИдентификатор;
		
		ЗапросЗонд = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "Probe", ПространствоИмен);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗапросЗонд, "id", Строка(Идентификатор), Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗапросЗонд, "formatVersion", ВерсияФормата, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗапросЗонд, "creationDate", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗапросЗонд, "userAgent", ВерсияПрограммыКлиента, , ТекстОшибки);
		Отправитель = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "CustomerPartyType", ПространствоИмен);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(
			Отправитель, "id", РеквизитыНастройкиОбмена.ИдентификаторОрганизации, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Отправитель, "name", ОтправительНаименование, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Отправитель, "inn", РеквизитыОрганизации.ИНН, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Отправитель, "kpp", РеквизитыОрганизации.КПП, , ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗапросЗонд, "Sender", Отправитель, Истина, ТекстОшибки);
		
		Получатель = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "BankPartyType", ПространствоИмен);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Получатель, "bic", РеквизитыБанка.Код, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Получатель, "name", РеквизитыБанка.Наименование, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЗапросЗонд, "Recipient", Получатель, Истина, ТекстОшибки);
		ЗапросЗонд.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ДвоичныеДанные = ОбменСБанкамиСлужебный.ДвоичныеДанныеИзXDTO(Фабрика, ЗапросЗонд, Ложь);
			ФайлСформирован = Истина;
		КонецЕсли;

	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Операция = НСтр("ru = 'Формирование ЭД'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, "ОбменСБанками", НастройкаОбмена);
		ФайлСформирован = Ложь;
	КонецПопытки;
		
	Если Не ФайлСформирован Тогда
		Возврат;
	КонецЕсли;
	
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);

	НазваниеДокумента = НСтр("ru = 'Запрос-зонд'");
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
	СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд);
	СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
	СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
	СтруктураРеквизитов.Вставить("ПредставлениеДокумента", НазваниеДокумента);
	СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
	СтруктураРеквизитов.Вставить("Идентификатор", Строка(Идентификатор));
	СтруктураРеквизитов.Вставить("Организация", РеквизитыНастройкиОбмена.Организация);
	СтруктураРеквизитов.Вставить("Банк", РеквизитыНастройкиОбмена.Банк);
	СтруктураРеквизитов.Вставить("СсылкаНаОбъект", НастройкаОбмена);
	
	НовоеСообщениеОбмена = Неопределено;
	ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(СтруктураРеквизитов, НовоеСообщениеОбмена);

	ВыполнятьКриптооперацииНаСервере = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере();
	
	Если ВыполнятьКриптооперацииНаСервере Тогда
		Попытка
			МассивОтпечатковСертификатовНаСервере = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов();
		Исключение
			МассивОтпечатковСертификатовНаСервере = Новый Массив;
		КонецПопытки;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковСертификатов, МассивОтпечатковСертификатовНаСервере, Истина);
	КонецЕсли;
		
	НастройкиОбмена = ОбменСБанкамиСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(НастройкаОбмена, Истина,
		МассивОтпечатковСертификатов, НовоеСообщениеОбмена, Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд, Ложь);

КонецПроцедуры

#КонецОбласти

#Область ОбменСБанкомЧерезДополнительнуюОбработку


// Получает данные для отправки в банк через дополнительную обработку с клиента
//
// Параметры:
//  Ссылки - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком
//         - Массив - список пакетов к отправке
//             * ДокументСсылка.ПакетОбменСБанками - отправляемый пакет
// 
// Возвращаемое значение:
//  Соответствие - данные для отправки по каждой настройки обмена
//
Функция ДанныеДляОтправкиВБанкЧерезДопОбработку(Знач Ссылки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеВозврата = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПакетЭД.Ссылка КАК Ссылка,
	|	ПакетЭД.НастройкаОбмена КАК НастройкаОбмена
	|ПОМЕСТИТЬ Пакеты
	|ИЗ
	|	Документ.ПакетОбменСБанками КАК ПакетЭД
	|ГДЕ
	|	НЕ ПакетЭД.НастройкаОбмена.ПометкаУдаления
	|	И НЕ ПакетЭД.НастройкаОбмена.Недействительна
	|	И ПакетЭД.НастройкаОбмена.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку)
	|	И НЕ ПакетЭД.ПометкаУдаления
	|	И ПакетЭД.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.ПодготовленКОтправке)
	|	И ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПакетЭД.Ссылка КАК Ссылка,
	|	ПакетЭД.Сообщения.(
	|		Сообщение КАК Сообщение,
	|		Сообщение.ВидЭД КАК СообщениеВидЭД,
	|		Сообщение.Идентификатор КАК СообщениеИдентификатор
	|	) КАК Сообщения,
	|	ПакетЭД.НастройкаОбмена КАК НастройкаОбмена
	|ИЗ
	|	Документ.ПакетОбменСБанками КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Пакеты.Ссылка
	|			ИЗ
	|				Пакеты)
	|ИТОГИ ПО
	|	НастройкаОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СертификатыПодписейОрганизации.СертификатЭП КАК СертификатЭП,
	|	СертификатыПодписейОрганизации.Ссылка КАК НастройкаОбмена
	|ПОМЕСТИТЬ Сертификаты
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК СертификатыПодписейОрганизации
	|ГДЕ
	|	СертификатыПодписейОрганизации.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Пакеты.НастройкаОбмена
	|			ИЗ
	|				Пакеты)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СертификатЭП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СертификатыЭП.Ссылка КАК Ссылка,
	|	СертификатыЭП.ДанныеСертификата КАК ДанныеСертификата,
	|	ЛОЖЬ КАК ПарольПолучен,
	|	НЕОПРЕДЕЛЕНО КАК ПарольСертификата,
	|	Сертификаты.НастройкаОбмена КАК НастройкаОбмена
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыЭП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Сертификаты КАК Сертификаты
	|		ПО (Сертификаты.СертификатЭП = СертификатыЭП.Ссылка)
	|ГДЕ
	|	&ПроверкаПользователя
	|	И СертификатыЭП.Ссылка В
	|			(ВЫБРАТЬ
	|				Сертификаты.СертификатЭП
	|			ИЗ
	|				Сертификаты)
	|ИТОГИ ПО
	|	НастройкаОбмена";
	Если ТипЗнч(Ссылки) = Тип("СправочникСсылка.НастройкиОбменСБанками") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИСТИНА", "И ПакетЭД.НастройкаОбмена = &НастройкаОбмена");
		Запрос.УстановитьПараметр("НастройкаОбмена", Ссылки);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИСТИНА", "И ПакетЭД.Ссылка В (&ПакетыЭД)");
		Запрос.УстановитьПараметр("ПакетыЭД", Ссылки);
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя", "ИСТИНА");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя",
			"СертификатыЭП.Пользователь В (&ПустойПользователь, &ТекущийПользователь, &ПользовательНеУказан)");
		Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
		Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
		Запрос.УстановитьПараметр("ПользовательНеУказан", Пользователи.СсылкаНеуказанногоПользователя());
	КонецЕсли;
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	ВыборкаНастройкиОбмена = ПакетЗапросов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаСертификатов = ПакетЗапросов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВремФайл = ПолучитьИмяВременногоФайла();
	Пока ВыборкаНастройкиОбмена.Следующий() Цикл
		ВыборкаПакеты = ВыборкаНастройкиОбмена.Выбрать();
		ДанныеПакетов = Новый Соответствие;
		Пока ВыборкаПакеты.Следующий() Цикл
			ВыборкаСообщений = ВыборкаПакеты.Сообщения.Выбрать();
			СтруктураДанных = Новый Структура;
			Пока ВыборкаСообщений.Следующий() Цикл
				ДвоичныеДанныеФайла = ДвоичныеДанныеПрисоединенногоФайла(ВыборкаСообщений.Сообщение);
				Если ВыборкаСообщений.СообщениеВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение
					ИЛИ ВыборкаСообщений.СообщениеВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование Тогда
					ДвоичныеДанныеФайла.Записать(ВремФайл);
					ТекстовыйДокумент = Новый ТекстовыйДокумент;
					ТекстовыйДокумент.Прочитать(ВремФайл);
					ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
					СтрокаXML = ТекстовыйДокумент.ПолучитьТекст();
					СтруктураДанных.Вставить("ПлатежноеПоручение", СтрокаXML);
					СтруктураДанных.Вставить("Ключ", ВыборкаСообщений.СообщениеИдентификатор);
					Подписи = ДанныеПодписей(ВыборкаСообщений.Сообщение);
					МассивПодписей = Новый Массив;
					Для Каждого ДанныеПодписи Из Подписи Цикл
						СтруктураДанныхПодписи = Новый Структура;
						СтруктураДанныхПодписи.Вставить("АдресПодписи", ДанныеПодписи.АдресПодписи);
						СтруктураДанныхПодписи.Вставить("Сертификат",   ДанныеПодписи.Сертификат);
						МассивПодписей.Добавить(СтруктураДанныхПодписи);
					КонецЦикла;
					СтруктураДанных.Вставить("Подписи", МассивПодписей);
				ИначеЕсли ВыборкаСообщений.СообщениеВидЭД = Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные Тогда
					СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
					СтруктураДанных.Вставить("СлужебныеДанные", СсылкаНаДвоичныеДанныеФайла);
				КонецЕсли;
			КонецЦикла;
			ДанныеПакетов.Вставить(ВыборкаПакеты.Ссылка, СтруктураДанных);
		КонецЦикла;
		ВыборкаСертификатов.Сбросить();
		СтруктураПоиска = Новый Структура("НастройкаОбмена", ВыборкаНастройкиОбмена.НастройкаОбмена);
		Если ВыборкаСертификатов.НайтиСледующий(СтруктураПоиска) Тогда
			ВыборкаСертификатовДанные = ВыборкаСертификатов.Выбрать();
			Сертификаты = Новый Массив;
			Пока ВыборкаСертификатовДанные.Следующий() Цикл
				ДанныеСертификата = Новый Структура();
				ДанныеСертификата.Вставить("СертификатСсылка", ВыборкаСертификатовДанные.Ссылка);
				ДанныеСертификата.Вставить("ПарольСертификата", ВыборкаСертификатовДанные.ПарольСертификата);
				ДанныеСертификата.Вставить("ДвоичныеДанныеСертификата", ВыборкаСертификатовДанные.ДанныеСертификата.Получить());
				Сертификаты.Добавить(ДанныеСертификата);
			КонецЦикла;
			СтруктураДанных = Новый Структура("ДанныеПакетов, Сертификаты", ДанныеПакетов, Сертификаты);
			ДанныеВозврата.Вставить(ВыборкаНастройкиОбмена.НастройкаОбмена, СтруктураДанных);
		Иначе
			ШаблонСообщения = НСтр("ru = 'Не указаны сертификаты в настройке обмена с банком %1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыборкаНастройкиОбмена.НастройкаОбмена);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ДанныеВозврата.Количество() И ТипЗнч(Ссылки) = Тип("СправочникСсылка.НастройкиОбменСБанками") Тогда
		ОбменСБанкамиСлужебный.СохранитьДатуСинхронизации(Ссылки);
	КонецЕсли;
	
	Возврат ДанныеВозврата;
	
КонецФункции

// Производит подключение внешней обработки.
//
// Параметры:
//  ИмяВнешнегоМодуля - Строка - имя используемого внешнего модуля;
//  АдресФайла - Адрес временного хранилища, куда помещается двоичные данные обработки.
//
// Возвращаемое значение:
//  Булево - Истина, если обработка подключена.
//
Функция ПодключитьАктуальнуюВнешнююОбработку(Знач ИмяВнешнегоМодуля, АдресФайла = "") Экспорт

	ОбработкаПодключена = Ложь;
	
	ДанныеВнешнейОбработки = ОбменСБанкамиСлужебныйПовтИсп.ДанныеВнешнейОбработки(ИмяВнешнегоМодуля);
	
	Если Не ЗначениеЗаполнено(ДанныеВнешнейОбработки) Тогда
		Возврат ОбработкаПодключена;
	КонецЕсли;
	
	АдресФайла = ПоместитьВоВременноеХранилище(ДанныеВнешнейОбработки.ДвоичныеДанныеМодуля);
	
	ИмяОбъекта = Неопределено;
	ОбменСБанкамиСлужебный.ПодключитьВнешнююОбработку(АдресФайла, ИмяОбъекта);
	ОбработкаПодключена = ЗначениеЗаполнено(ИмяОбъекта);
	НоваяВерсия = ДанныеВнешнейОбработки.Версия;

	Возврат ОбработкаПодключена;
	
КонецФункции

// Получает сведения о внешней обработке.
//
// Параметры:
//    ИмяВнешнейОбработки - Строка - имя внешней обработки.
//
// Возвращаемое значение:
//   Структура - данные о внешней обработке
//     * Наименование - Строка -  наименование внешней обработки;
//     * Версия - Строка - версия внешней обработки.
//
Функция СведенияОВнешнейОбработке(ИмяВнешнегоМодуля) Экспорт
	
	Попытка
		// Получение сведений о внешней обработке.
		ВнешнийОбъект = ВнешниеОбработки.Создать(ИмяВнешнегоМодуля);
		ВнешнийОбъектМетаданные = ВнешнийОбъект.Метаданные();
		СведенияОВнешнейОбработке = ВнешнийОбъект.СведенияОВнешнейОбработке();
		СтруктураВозврата = Новый Структура();
		СтруктураВозврата.Вставить("Наименование", СведенияОВнешнейОбработке.Наименование);
		СтруктураВозврата.Вставить("Версия", СведенияОВнешнейОбработке.Версия);
		Возврат СтруктураВозврата;
	Исключение
		Операция = НСтр("ru = 'Создание объекта внешней обработки.'");
		ТекстСообщения = НСтр("ru = 'Не удалось подключить указанный внешний модуль'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ПодробныйТекстОшибки, ТекстСообщения, "ОбменСБанками");
	КонецПопытки;

КонецФункции

// Сравнивает переданную версию дополнительной обработки с версией обработки, сохраненной в базе.
// Если версии отличаются, то возвращает адрес временного хранилища и версию обработки, хранимой в базе.
//
// Параметры:
//    ИмяМодуля - Строка - имя дополнительной обработки;
//    ВерсияНовая - Строка - версия обработки для сравнения;
//    ВерсияСтарая - Строка - возвращает версию обработки в базе данных.
//
Процедура ПроверитьАктуальностьВнешнейОбработки(Знач ИмяМодуля, Знач ВерсияНовая, ВерсияСтарая) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеВнешнихМодулей = Константы.ВнешниеФайлыОбменСБанками.Получить().Получить();
	Если ДанныеВнешнихМодулей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеВнешнихМодулей.Свойство("ВнешниеОбработки") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеМодуля = ДанныеВнешнихМодулей.ВнешниеОбработки.Получить(ИмяМодуля);
	
	Если ДанныеМодуля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеМодуля.Версия <> ВерсияНовая Тогда
		ВерсияСтарая = ДанныеМодуля.Версия;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает ответ банка на отправку платежных документов
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//  ПакетыЭДО - Соответствие
//    * Ключ - ДокументСсылка.ПакетОбменСБанками - ссылка на документ ПакетОбменСБанками
//  ДанныеОтвета  - Соответствие - данные ответа банка
//  ОтправленныеДокументы - Массив - владельцы отправленных электронных документов
//    * ДокументСсылка - ссылка на владельца отправленного электронного документа.
//  СообщенияОбменаДляПодтверждения - Массив - документы, требующие подтверждения
//    * ДокументСсылка.СообщенияОбменСБанками - сообщение для подтверждения.
//
Процедура ОбработатьОтветБанкаПослеОтправкиДокументовЧерезВнешнююОбработку(Знач НастройкаОбмена, Знач ПакетыЭДО, Знач ДанныеОтвета, ОтправленныеДокументы, СообщенияОбменаДляПодтверждения) Экспорт
	
	Для Каждого Элемент Из ПакетыЭДО Цикл
		Параметры = Новый Структура("Статус", Перечисления.СтатусыОбменСБанками.Отправлен);
		ОбновитьСтатусыДокументовПакетаЭДО(Элемент.Ключ, Перечисления.СтатусыПакетовЭД.Отправлен, Параметры);
	КонецЦикла;
	
	МассивОтправленныхСообщенийОбмена = Новый Массив;
	СообщенияОбменаДляПодтверждения = Новый Массив;
	
	Для Каждого Ответ Из ДанныеОтвета Цикл
		
		СообщениеОбмена = ОбменСБанкамиСлужебный.СообщениеОбменаПоИдентификатору(НастройкаОбмена, Строка(Ответ.Ключ));
		
		Если Не ЗначениеЗаполнено(СообщениеОбмена) Тогда
			ТекстСообщения = НСтр("ru = 'Получены некорректные данные из банка.'");
			ТекстОшибки = НСтр("ru = 'Не найдено исходное сообщение обмена по идентификатору: %1.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Ответ.Ключ);
			ВидОперации = НСтр("ru = 'Чтение данных ответа банка'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ТекстОшибки, ТекстСообщения, "ОбменСБанками");
			Продолжить;
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		Если ЗначениеЗаполнено(Ответ.Значение.Идентификатор) Тогда
			МассивОтправленныхСообщенийОбмена.Добавить(СообщениеОбмена);
			Если Ответ.Значение.Статус = "30" Тогда
				СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.НеПодтвержден);
				СообщенияОбменаДляПодтверждения.Добавить(СообщениеОбмена);
			Иначе
				СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Доставлен);
			КонецЕсли;
			СтруктураПараметров.Вставить("ВнешнийИдентификатор", Ответ.Значение.Идентификатор);
		Иначе
			СтруктураПараметров.Вставить("Статус", Перечисления.СтатусыОбменСБанками.ОтклоненБанком);
			СтруктураПараметров.Вставить("ПричинаОтклонения", Ответ.Значение.ТекстОшибки);
		КонецЕсли;

		
		ИзменитьСообщениеОбмена(СообщениеОбмена, СтруктураПараметров);

	КонецЦикла;
	
	Если МассивОтправленныхСообщенийОбмена.Количество() Тогда
		ОтправленныеДокументы = ВладельцыСообщенийОбмена(МассивОтправленныхСообщенийОбмена);
	КонецЕсли;

КонецПроцедуры

// Производит сериализацию данных.
//
// Параметры:
// Значение - Произвольный - данные для сериализации.
//
// Возвращаемое значение:
//  Строка - сериализованные данные.
//
Функция СериализованныеДанные(Знач Значение) Экспорт

	Если Значение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	ОбъектXDTO = Сериализатор.ЗаписатьXDTO(Значение);
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);

	Возврат ЗаписьXML.Закрыть();

КонецФункции

// Производит десериализацию данных.
//
// Параметры:
// ПредставлениеXML - Строка - сериализованные данные.
//
// Возвращаемое значение:
//  Произвольный - десериализованные данные.
//
Функция ДеСериализованныеДанные(Знач ПредставлениеXML) Экспорт

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПредставлениеXML);
	ЧтениеXML.Прочитать();

	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	Возврат Сериализатор.ПрочитатьXML(ЧтениеXML);
	
КонецФункции

// Получает структуру данных электронных документов для последующего формирования ЭП.
//
// Параметры
//  МассивСообщений  - Массив
//    * ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение.
//
// Возвращаемое значение:
// Структура, содержит данные для обработки на клиенте.
//
Функция ДанныеДляФормированияЭПЧерезДопОбработку(Знач МассивСообщений) Экспорт
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("МассивСообщенийБезСхем", Новый Массив);
	СтруктураВозврата.Вставить("МассивСообщенийСоСхемами", Новый Массив);
	СтруктураВозврата.Вставить("МассивТекстовыхДанныхЭД", Новый Массив);
	СтруктураВозврата.Вставить("МассивДанныхСхем", Новый Массив);
	
	Для Каждого Сообщение Из МассивСообщений Цикл
		СообщениеСхема = ОбменСБанкамиСлужебный.ПодчиненноеСообщениеОбмена(
			Сообщение, Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные);
		Если ЗначениеЗаполнено(СообщениеСхема) Тогда
			СтруктураВозврата.МассивСообщенийСоСхемами.Добавить(СообщениеСхема);
			ДвоичныеДанные = ДвоичныеДанныеПрисоединенногоФайла(СообщениеСхема);
			СтруктураВозврата.МассивДанныхСхем.Добавить(ДвоичныеДанные);
		Иначе
			СтруктураВозврата.МассивСообщенийБезСхем.Добавить(Сообщение);
			ДвоичныеДанные = ДвоичныеДанныеПрисоединенногоФайла(Сообщение);
			ВремФайл = ПолучитьИмяВременногоФайла();
			ДвоичныеДанные.Записать(ВремФайл);
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.Прочитать(ВремФайл);
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
			СтрокаXML = ТекстовыйДокумент.ПолучитьТекст();
			СтруктураВозврата.МассивТекстовыхДанныхЭД.Добавить(СтрокаXML);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Сохраняет схемы данных электронных документов.
//
// Параметры
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройки обмена с банком;
//  МассивСообщений  - Массив
//    * - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена.
//  МассивСхемДанных  - Массив
//    * - Строка - текстовые данные электронного документа.
//
Процедура СохранитьСхемыДанных(Знач НастройкаОбмена, Знач МассивСообщений, Знач МассивСхемДанных) Экспорт
	
	Индекс = 0;
	КоличествоСообщений = МассивСообщений.Количество();
	
	Для Индекс = 0 По КоличествоСообщений - 1 Цикл
		
		АдресХранилища = ПоместитьВоВременноеХранилище(МассивСхемДанных[Индекс]);
		
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Получен);
		СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные);
		СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
		СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
		СтруктураРеквизитов.Вставить("ПредставлениеДокумента", НСтр("ru = 'Схема данных'"));
		СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресХранилища);
		СтруктураРеквизитов.Вставить("СообщениеРодитель", МассивСообщений[Индекс]);
		ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(СтруктураРеквизитов);

	
	КонецЦикла;
	
КонецПроцедуры

// Сохраняет подписи электронного документа. Используется только для обмена через дополнительную обработку.
//
// Параметры:
//  МассивСообщений  - Массив
//    * ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена.
//  МассивПодписей  - Массив - содержит массив данных подписей;
//  Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписи - ссылка на сертификат подписи.
//
Процедура СохранитьДанныеПодписей(Знач МассивСообщений, Знач МассивПодписей, Знач Сертификат) Экспорт
	
	КоличествоЭД = МассивСообщений.Количество();
	
	Для Индекс = 0 По КоличествоЭД - 1 Цикл
		ДанныеПроверкиПодписи = Новый Структура;
		ДанныеПроверкиПодписи.Вставить("ДатаПроверкиПодписи", ТекущаяДатаСеанса());
		ДанныеПроверкиПодписи.Вставить("ПодписьВерна", Истина);
		ДобавитьПодпись(МассивСообщений[Индекс], МассивПодписей[Индекс], Сертификат, ДанныеПроверкиПодписи);
	КонецЦикла

КонецПроцедуры

#КонецОбласти

#Область Сбербанк

Процедура СохранитьВходящееПисьмоСбербанка(НастройкаОбмена, ПисьмоXDTO, ДляВалютногоКонтроля, МассивСообщенийОбмена)
	
	ВнешнийИдентификатор = ПисьмоXDTO.docExtId;
	СообщениеПисьмо = НайтиСообщениеОбмена(НастройкаОбмена, ВнешнийИдентификатор);
	Если СообщениеПисьмо <> Неопределено Тогда // такое письмо уже есть в информационной базе
		Возврат
	КонецЕсли;
	
	СсылкаНаОбъект = СоздатьВходящееПисьмоСбербанк(НастройкаОбмена, ПисьмоXDTO, ДляВалютногоКонтроля);
	
	ДвоичныеДанныеФайлаОтвета = ОбменСБанкамиСлужебный.ДвоичныеДанныеИзXDTO(ФабрикаXDTO, ПисьмоXDTO, , "LetterFromBank");
	СсылкаНаХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаОтвета);
	
	ПредставлениеДокумента = Строка(СсылкаНаОбъект);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Получен);
	СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.Письмо);
	СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
	СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
	СтруктураРеквизитов.Вставить("ПредставлениеДокумента", ПредставлениеДокумента);
	СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", СсылкаНаХранилище);
	СтруктураРеквизитов.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	СтруктураРеквизитов.Вставить("Основной");
	СтруктураРеквизитов.Вставить("ВнешнийИдентификатор", ВнешнийИдентификатор);
	
	ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(СтруктураРеквизитов, СообщениеПисьмо);
	МассивСообщенийОбмена.Добавить(СообщениеПисьмо);
	
КонецПроцедуры

Процедура ДобавитьПрисоединенныйФайлСбербанк(Владелец, ЭД)
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	ПараметрыФайла.Вставить("ВладелецФайлов", Владелец);
	ПолноеИмяФайла = ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(ЭД, "AttachmentName");

	СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайла);
	ПараметрыФайла.Вставить("ИмяБезРасширения", СтруктураФайла.ИмяБезРасширения);
	РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураФайла.Расширение);
	ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеБезТочки);
	FileDate = ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(ЭД, "FileDate");
	Если ЗначениеЗаполнено(FileDate) Тогда
		ВремяИзмененияУниверсальное = XMLЗначение(Тип("Дата"), FileDate);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ВремяИзмененияУниверсальное);
	Иначе
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
	КонецЕсли;
	ДвоичныеДанныеФайла = Base64Значение(ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(ЭД, "Body"));
	АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	Описание = ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(ЭД, "Description");
	РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайлаВоВременномХранилище, , Описание);
	
КонецПроцедуры

Функция СоздатьВходящееПисьмоСбербанк(НастройкаОбмена, ЭД, ДляВалютногоКонтроля)
	
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаОбмена, "Организация, Банк");
	
	ПисьмоОбъект = Документы.ПисьмоОбменСБанками.СоздатьДокумент();
	ПисьмоОбъект.Банк = РеквизитыНастройкиОбмена.Банк;
	ПисьмоОбъект.Организация = РеквизитыНастройкиОбмена.Организация;
	ПисьмоОбъект.Направление = Перечисления.НаправленияЭД.Входящий;
	ПисьмоОбъект.ВходящийНомер = ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(ЭД, "DocData.docNum");
	ДатаСтрокой = ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(ЭД, "DocData.docDate");
	ПисьмоОбъект.ВходящаяДата = XMLЗначение(Тип("Дата"), ДатаСтрокой);
	ПисьмоОбъект.Дата = ТекущаяДатаСеанса();
	ПисьмоОбъект.ДляВалютногоКонтроля = ДляВалютногоКонтроля;
	
	Attachment = ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(ЭД, "Attachments.Attachment");
	Если Attachment <> Неопределено Тогда
		ПисьмоОбъект.ЕстьВложение = Истина;
	КонецЕсли;
	ПисьмоОбъект.Идентификатор = ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(ЭД, "docExtId");
		
	ПисьмоОбъект.Статус = Перечисления.СтатусыОбменСБанками.Получен;
	ПисьмоОбъект.Текст = ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(ЭД, "AddInfo");
	ПисьмоОбъект.Тема = ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(ЭД, "Theme");
	ТипПисьмаСтрокой = ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(ЭД, "Type");
	
	Если ЗначениеЗаполнено(ТипПисьмаСтрокой) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ТипыПисемОбменСБанками.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.ТипыПисемОбменСБанками КАК ТипыПисемОбменСБанками
		               |ГДЕ
		               |	ТипыПисемОбменСБанками.Владелец = &Владелец
		               |	И ТипыПисемОбменСБанками.Наименование = &Наименование
		               |	И ТипыПисемОбменСБанками.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
		               |	И НЕ ТипыПисемОбменСБанками.Недействителен
		               |	И НЕ ТипыПисемОбменСБанками.ПометкаУдаления";
		Запрос.УстановитьПараметр("Владелец", НастройкаОбмена);
		Запрос.УстановитьПараметр("Наименование", ТипПисьмаСтрокой);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПисьмоОбъект.ТипПисьма = Выборка.Ссылка;
		Иначе
			НовыйТипПисьма = Справочники.ТипыПисемОбменСБанками.СоздатьЭлемент();
			НовыйТипПисьма.Владелец = НастройкаОбмена;
			НовыйТипПисьма.Наименование = ТипПисьмаСтрокой;
			НовыйТипПисьма.Направление = Перечисления.НаправленияЭД.Входящий;
			НовыйТипПисьма.Записать();
			ПисьмоОбъект.ТипПисьма = НовыйТипПисьма.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	ПисьмоОбъект.Записать();
	
	Если ПисьмоОбъект.ЕстьВложение Тогда
		Если ТипЗнч(Attachment) = Тип("ОбъектXDTO") Тогда
			ДобавитьПрисоединенныйФайлСбербанк(ПисьмоОбъект.Ссылка, Attachment);
		Иначе
			Для Каждого Параметр Из Attachment Цикл
				ДобавитьПрисоединенныйФайлСбербанк(ПисьмоОбъект.Ссылка, Параметр);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПисьмоОбъект.Ссылка;
	
КонецФункции

Процедура ДобавитьЗаблокированныеКриптопрофилиСбербанк(УчетнаяЗаписьКлиента, ЗаблокированныеКриптопрофили)
	
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(УчетнаяЗаписьКлиента, "blocked") = "1" Тогда
		ИнформацияОКриптопрофилях = ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(
			УчетнаяЗаписьКлиента, "SignDevices.SignDevice");
		Если ТипЗнч(ИнформацияОКриптопрофилях) = Тип("СписокXDTO") Тогда
			Для каждого ИнформацияОКриптопрофиле Из ИнформацияОКриптопрофилях Цикл
				Если ИнформацияОКриптопрофиле <> Неопределено Тогда
					ИдентификаторКрипропрофиля = ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(
						ИнформацияОКриптопрофиле, "SignDeviceId");
					Если ЗначениеЗаполнено(ИдентификаторКрипропрофиля) Тогда
						ЗаблокированныеКриптопрофили.Добавить(ИдентификаторКрипропрофиля);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(ИнформацияОКриптопрофилях) = Тип("ОбъектXDTO") Тогда
			ИдентификаторКрипропрофиля = ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(
				ИнформацияОКриптопрофилях, "SignDeviceId");
			Если ЗначениеЗаполнено(ИдентификаторКрипропрофиля) Тогда
				ЗаблокированныеКриптопрофили.Добавить(ИдентификаторКрипропрофиля);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеПакетаXMLСтрокойСбербанк(ЭД, НастройкаОбмена, СообщениеОбмена, ТипДокумента, ФродПараметры, ТекстОшибки, Логин = Неопределено)
	
	ПространствоИмен = "http://bssys.com/upg/request";
	Request = ОбменСБанкамиСлужебный.ОбъектТипаCML(ФабрикаXDTO, "Request", ПространствоИмен);
	ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИдентификаторОрганизации");
	ИдентификаторЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "Идентификатор");
	ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "requestId", ИдентификаторЗапроса, Истина, ТекстОшибки);
	ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "orgId", ИдентификаторОрганизации, Истина, ТекстОшибки);
	ВерсияФорматаСбербанк = ОбменСБанкамиСлужебный.ВерсияФорматаСбербанк();
	ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "version", ВерсияФорматаСбербанк, Истина, ТекстОшибки);
	Отправитель = ОбменСБанкамиСлужебный.ПредставлениеОтправителяСбербанк();
	ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "sender", Отправитель, Истина, ТекстОшибки);
	ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "receiver", "SBBOL_DBO", Истина, ТекстОшибки);
	ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, ТипДокумента, ЭД, Истина, ТекстОшибки);
			
	МассивПодписей = ОбменСБанкамиСлужебный.ПодписиСообщенияОбмена(СообщениеОбмена);
			
	Для Каждого ЭП Из МассивПодписей Цикл
		Подпись = ЭП.Подпись.Получить();
		ДвоичныеДанныеСертификата = ЭП.Сертификат.Получить();
		ДанныеСертификата = ИнформацияОСертификатеПодписиСбербанк(ДвоичныеДанныеСертификата);
		Если ДанныеСертификата = Неопределено Тогда
			ВызватьИсключение НСтр("ru='Не найден сертификат установленной подписи'");
		КонецЕсли;
		DigitalSign = ОбменСБанкамиСлужебный.ОбъектТипаCML(ФабрикаXDTO, "DigitalSign", "http://bssys.com/upg/request");
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(DigitalSign, "Issuer", ДанныеСертификата.Issuer, Истина);
		СтрокаСерийныйНомер = Строка(ДанныеСертификата.SN);
		СтрокаСерийныйНомер = СтрЗаменить(СтрокаСерийныйНомер, " ", "");
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(DigitalSign, "SN", СтрокаСерийныйНомер, Истина);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(DigitalSign, "Value", Подпись, Истина);
		
		Если ТипДокумента = "PayDocRu" ИЛИ ТипДокумента = "LetterInBank" ИЛИ ТипДокумента = "ExchangeMessagesWithBank" Тогда
			Fraud = ОбменСБанкамиСлужебный.ОбъектТипаCML(ФабрикаXDTO, "Fraud", ПространствоИмен);
			ОбменСБанкамиСлужебный.ЗаполнитьФродПараметрыВXDTO(Fraud, ФродПараметры, Логин);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(DigitalSign, "Fraud", Fraud);
		КонецЕсли;
		Request.Sign.Добавить(DigitalSign);
	КонецЦикла;
	
	Если ТипДокумента = "PayDocRu" ИЛИ ТипДокумента = "LetterInBank" ИЛИ ТипДокумента = "ExchangeMessagesWithBank" Тогда
		Fraud = ОбменСБанкамиСлужебный.ОбъектТипаCML(ФабрикаXDTO, "Fraud", ПространствоИмен);
		ОбменСБанкамиСлужебный.ЗаполнитьФродПараметрыВXDTO(Fraud, ФродПараметры, Логин);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Request, "Fraud", Fraud, Истина, ТекстОшибки);
	КонецЕсли;
	
	Request.Проверить();
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Request, , , , НазначениеТипаXML.Явное);
	СтрокаXML = ЗаписьXML.Закрыть();

	Возврат СтрокаXML;
	
КонецФункции

Функция ПоследняяВходящаяДатаСбербанк(НастройкаОбмена)
	
	Отбор = Новый Структура("НастройкаОбмена", НастройкаОбмена);
	
	Выборка = РегистрыСведений.ПараметрыОбменСБанками.Выбрать(Отбор);
	
	Если Выборка.Следующий() Тогда
		Возврат НачалоДня(Выборка.ПоследняяДатаПолученияЭД);
	КонецЕсли;
	
КонецФункции

Процедура УстановитьКонечныеСтатусыЗапросовВыписокСбербанк(НастройкаОбмена, НомерСчета, ДатаЗапроса)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщениеОбменСБанками.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|ГДЕ
	|	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	|	И СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ЗапросВыписки)
	|	И СообщениеОбменСБанками.ДатаСообщения = &ДатаСообщения
	|	И СообщениеОбменСБанками.НомерСчета = &НомерСчета
	|	И СообщениеОбменСБанками.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Доставлен), ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Исполнен), ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Обработан), ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Отправлен), ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Принят))";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.УстановитьПараметр("ДатаСообщения", ДатаЗапроса);
	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбменСБанкамиСлужебный.УстановитьСтатусСообщенияОбмена(Выборка.Ссылка, Перечисления.СтатусыОбменСБанками.Обработан);
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьШтампыСбербанка(НастройкаОбмена, ВыпискаXDTO)
	
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(ВыпискаXDTO, "Docs") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШтампов = Новый Соответствие;
	
	Операции = ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(ВыпискаXDTO, "Docs.TransInfo");
	
	Если ТипЗнч(Операции) = Тип("ОбъектXDTO") Тогда
		ПрочитатьШтампОперацииСбербанк(Операции, ДанныеШтампов);
	Иначе
		Для Каждого Операция Из Операции Цикл
			ПрочитатьШтампОперацииСбербанк(Операция, ДанныеШтампов);
		КонецЦикла;
	КонецЕсли;

	Если ДанныеШтампов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивВнешнихИдентификаторов = Новый Массив;
	
	Для Каждого КлючЗначение Из ДанныеШтампов Цикл
		МассивВнешнихИдентификаторов.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщениеОбменСБанками.ВнешнийИдентификатор КАК ВнешнийИдентификатор,
	|	СообщениеОбменСБанками.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|ГДЕ
	|	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	|	И СообщениеОбменСБанками.ВнешнийИдентификатор В(&МассивВнешнихИдентификаторов)
	|	И СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ПлатежноеПоручение)";
	
	Запрос.УстановитьПараметр("МассивВнешнихИдентификаторов", МассивВнешнихИдентификаторов);
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеШтампа = ДанныеШтампов.Получить(Выборка.ВнешнийИдентификатор);
		ДополнительныеДанные = Новый Структура("ДанныеШтампа", ДанныеШтампа);
		СтруктураИзменения = Новый Структура("ДополнительныеДанные", ДополнительныеДанные);
		ИзменитьСообщениеОбмена(Выборка.Ссылка, СтруктураИзменения);
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьВыпискиСбербанка(ЭД, НастройкаОбмена, МассивВыписок)
	
	ВыпискиСбербанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(ЭД, "Statements.Statement");
	Если ВыпискиСбербанка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ВыпискиСбербанка) = Тип("ОбъектXDTO") Тогда
		СохранитьВыпискуСбербанка(НастройкаОбмена, ВыпискиСбербанка, МассивВыписок);
	Иначе
		Для Каждого ВыпискаXDTO Из ВыпискиСбербанка Цикл
			СохранитьВыпискуСбербанка(НастройкаОбмена, ВыпискаXDTO, МассивВыписок);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьВыпискуСбербанка(НастройкаОбмена, ВыпискаXDTO, МассивВыписок)
	
	ВнешнийИдентификатор = ВыпискаXDTO.docId;
	СообщениеВыписка = НайтиСообщениеОбмена(НастройкаОбмена, ВнешнийИдентификатор);
	Если СообщениеВыписка <> Неопределено Тогда // такая выписка уже есть в информационной базе
		МассивВыписок.Добавить(СообщениеВыписка);
	КонецЕсли;
	ДвоичныеДанныеФайлаОтвета = ОбменСБанкамиСлужебный.ДвоичныеДанныеИзXDTO(ФабрикаXDTO, ВыпискаXDTO, , "Statement");
	СсылкаНаХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаОтвета);
	ТекДата = ТекущаяДатаСеанса();
	ДатаНачала = ВыпискаXDTO.beginDate;
	ДатаНачала = НачалоДня(Дата(СтрЗаменить(Сред(ДатаНачала, 1, 10), "-", "")));
	ПредставлениеДокумента = НСтр("ru = 'Выписка банка за'") + " " + Формат(ДатаНачала, "ДЛФ=D");
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Получен);
	СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка);
	СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
	СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
	СтруктураРеквизитов.Вставить("ПредставлениеДокумента", ПредставлениеДокумента);
	СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", СсылкаНаХранилище);
	СтруктураРеквизитов.Вставить("СсылкаНаОбъект", НастройкаОбмена);
	СтруктураРеквизитов.Вставить("ДатаСообщения", Дата(СтрЗаменить(Сред(ВыпискаXDTO.beginDate, 1, 10), "-", "")));
	СтруктураРеквизитов.Вставить("НомерСчета", ВыпискаXDTO.acc);
	СтруктураРеквизитов.Вставить("ВнешнийИдентификатор", ВнешнийИдентификатор);

	Если СообщениеВыписка = Неопределено Тогда
		ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(СтруктураРеквизитов, СообщениеВыписка);
	Иначе
		СтруктураРеквизитов.Вставить("УдалитьЭП");
		СтруктураРеквизитов.Вставить("Дата", ТекущаяДатаСеанса());
		ИзменитьСообщениеОбмена(СообщениеВыписка, СтруктураРеквизитов);
	КонецЕсли;
	ОпределитьИсполненныеПлатежныеПоручения(СообщениеВыписка);
	
	ИспользуетсяКриптография = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИспользуетсяКриптография");
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИспользуетсяКриптография") Тогда
	
		ДайджестBase64 = ОбменСБанкамиСлужебный.ДайджестСбербанк(
			Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка, СсылкаНаХранилище, НастройкаОбмена);
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Base64Значение(ДайджестBase64));
		
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
		СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные);
		СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
		СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
		СтруктураРеквизитов.Вставить("ПредставлениеДокумента", НСтр("ru = 'Схема данных'"));
		СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресХранилища);
		СтруктураРеквизитов.Вставить("СообщениеРодитель", СообщениеВыписка);
		
		ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(СтруктураРеквизитов);
		
	КонецЕсли;

	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбмена, "СертификатБанка, ИспользуетсяКриптография");
	
	Если РеквизитыНастройкиОбмена.ИспользуетсяКриптография
		И Не ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(ВыпискаXDTO, "Sign") = Неопределено Тогда
		ХранилищеСертификата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "СертификатБанка");
		ДанныеСертификата = РеквизитыНастройкиОбмена.СертификатБанка.Получить();
		Если Не ДанныеСертификата = Неопределено Тогда
			Сертификат = Новый СертификатКриптографии(ДанныеСертификата);
			ВладелецПодписи = ВыпискаXDTO.Sign.issuer;
			ДвоичныеДанныеПодписи = Base64Значение(ВыпискаXDTO.Sign.value);
			ДатаУстановкиПодписи = ЭлектроннаяПодпись.ДатаПодписания(ДвоичныеДанныеПодписи);
			ДатаУстановкиПодписи = ?(ЗначениеЗаполнено(ДатаУстановкиПодписи), ДатаУстановкиПодписи, ТекущаяДатаСеанса());
			СвойстваПодписи = Новый Структура;
			СвойстваПодписи.Вставить("Подпись", ДвоичныеДанныеПодписи);
			СвойстваПодписи.Вставить("УстановившийПодпись", Пользователи.АвторизованныйПользователь());
			СвойстваПодписи.Вставить("ДатаПодписи", ДатаУстановкиПодписи);
			СвойстваПодписи.Вставить("Сертификат", ДанныеСертификата);
			СвойстваПодписи.Вставить("Отпечаток", Сертификат.Отпечаток);
			СвойстваПодписи.Вставить("КомуВыданСертификат", ВладелецПодписи);
			МассивФайлов = Новый Массив;
			РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(СообщениеВыписка, МассивФайлов);
			ПрисоединенныйФайл = ПрисоединенныйФайл(СообщениеВыписка);
			ЭлектроннаяПодпись.ДобавитьПодпись(ПрисоединенныйФайл, СвойстваПодписи);
		КонецЕсли;
	КонецЕсли;
	МассивВыписок.Добавить(СообщениеВыписка);
	СохранитьШтампыСбербанка(НастройкаОбмена, ВыпискаXDTO);
	
	УстановитьКонечныеСтатусыЗапросовВыписокСбербанк(НастройкаОбмена, ВыпискаXDTO.acc, ДатаНачала);
	
КонецПроцедуры

Процедура СохранитьПисьмаСбербанка(ЭД, НастройкаОбмена, МассивСообщенийОбмена, ДляВалютногоКонтроля = Ложь)
	
	Если ДляВалютногоКонтроля Тогда
		ПисьмаСбербанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(
			ЭД, "ExchangeMessagesFromBank.ExchangeMessageFromBank");
	Иначе
		ПисьмаСбербанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(ЭД, "LettersFromBank.LetterFromBank");
	КонецЕсли;
	
	Если ПисьмаСбербанка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ПисьмаСбербанка) = Тип("ОбъектXDTO") Тогда
		СохранитьВходящееПисьмоСбербанка(НастройкаОбмена, ПисьмаСбербанка, ДляВалютногоКонтроля, МассивСообщенийОбмена);
	Иначе
		Для Каждого ПисьмоXDTO Из ПисьмаСбербанка Цикл
			СохранитьВходящееПисьмоСбербанка(НастройкаОбмена, ПисьмоXDTO, ДляВалютногоКонтроля, МассивСообщенийОбмена);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьПараметрОперацииСбербанк(Параметр, ДанныеШтампа)
	
	Если Параметр.Name = "StampBankName" Тогда
		ДанныеШтампа.Вставить("НаименованиеБанка", Параметр.Value);
	ИначеЕсли Параметр.Name = "StampBranch" Тогда
		ДанныеШтампа.Вставить("Отделение", Параметр.Value);
	ИначеЕсли Параметр.Name = "StampSubBranch" Тогда
		ДанныеШтампа.Вставить("Офис", Параметр.Value);
	ИначеЕсли Параметр.Name = "StampDate" Тогда
		ДанныеШтампа.Вставить("ДатаОперации", Параметр.Value);
	ИначеЕсли Параметр.Name = "StampBIC" Тогда
		ДанныеШтампа.Вставить("БИК", Параметр.Value);
	ИначеЕсли Параметр.Name = "StampStatus" Тогда
		ДанныеШтампа.Вставить("Статус", Параметр.Value);
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьШтампОперацииСбербанк(ПлатежноеПоручениеXDTO, ДанныеШтампов)
	
	Если НЕ ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(ПлатежноеПоручениеXDTO, "Params") = Неопределено Тогда
		ВнешнийИдентификатор = ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(ПлатежноеПоручениеXDTO, "docid");
		ДанныеШтампа = Новый Структура;
		
		ПараметрыОперации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеСвойстваXDTO(ПлатежноеПоручениеXDTO, "Params.Param");
		
		Если ТипЗнч(ПараметрыОперации) = Тип("ОбъектXDTO") Тогда
			ПрочитатьПараметрОперацииСбербанк(ПараметрыОперации, ДанныеШтампа);
		Иначе
			Для Каждого Параметр Из ПараметрыОперации Цикл
				ПрочитатьПараметрОперацииСбербанк(Параметр, ДанныеШтампа);
			КонецЦикла;
		КонецЕсли;
		
		ДанныеШтампов.Вставить(ВнешнийИдентификатор, ДанныеШтампа);
	КонецЕсли;

КонецПроцедуры

// Удаляет идентификатор из регистра, чтобы в дальнейшем не происходил запрос состояния по нему.
//
// Параметры:
//   НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена со сбербанком;
//   Идентификатор - Строка - идентификатор запроса;
//   ВидЭД - ПеречислениеСсылка.ВидыЭДОбменСБанками - вид электронного документа.
//
Процедура УдалитьИдентификаторЗапроса(Знач НастройкаОбмена, Знач Идентификатор) Экспорт

	НаборЗаписей = РегистрыСведений.ТикетыОбменСБанками.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НастройкаОбмена.Установить(НастройкаОбмена);
	НаборЗаписей.Отбор.Идентификатор.Установить(Идентификатор);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Формирует соответствие установленных на ЭД подписей и данных сертификатов.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками.
//  ИмяМодуля - Строка - (возвращаемый параметр) идентификатор внешней компоненты.
//
// Возвращаемое значение:
// Соответствие - содержит строки данных установленных подписей и строки данных сертификатов в формате BASE64.
//
Функция ДанныеУстановленныхПодписейИСертификатов(СообщениеОбмена, ИмяМодуля) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СоответствиеВозврата = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭП.Подпись,
	|	ЭП.Сертификат
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
	|ГДЕ
	|	ЭП.ПодписанныйОбъект.ВладелецФайла = &ВладелецФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СообщениеОбменСБанками.НастройкаОбмена.ИмяВнешнегоМодуля КАК ИмяВнешнегоМодуля
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|ГДЕ
	|	СообщениеОбменСБанками.Ссылка = &ВладелецФайла";
	
	Запрос.УстановитьПараметр("ВладелецФайла", СообщениеОбмена);
	Результат = Запрос.ВыполнитьПакет();

	Выборка = Результат[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		ДвоичныеДанныеПодписи = Выборка.Подпись.Получить();
		СтрокаЭП = Base64Строка(ДвоичныеДанныеПодписи);
		СтрокаЭП = СтрЗаменить(СтрокаЭП, Символы.ПС, "");
		СтрокаЭП = СтрЗаменить(СтрокаЭП, Символы.ВК, "");
		СтрокаСертификата = СертификатВФорматеBase64(Выборка.Сертификат);
		СоответствиеВозврата.Вставить(СтрокаЭП, СтрокаСертификата);
	КонецЦикла;
	
	Выборка = Результат[1].Выбрать();
	Если Выборка.Следующий() Тогда
		ИмяМодуля = Выборка.ИмяВнешнегоМодуля;
	КонецЕсли;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

// Возвращает строку подписанных данных в формате Base64.
//
// Параметры
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на документ сообщения.
//
// Возвращаемое значение:
//   Строка   - данные в формате base64.
//
Функция ПодписанныеДанныеBase64(СообщениеОбмена) Экспорт
	
	СлужебноеСообщение = ОбменСБанкамиСлужебный.ПодчиненноеСообщениеОбмена(
		СообщениеОбмена, Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные);
	ДанныеЭД = ДвоичныеДанныеПрисоединенногоФайла(СлужебноеСообщение);
	Возврат Base64Строка(ДанныеЭД);
	
КонецФункции

// Подготавливает структуру данных для отправки в Сбербанк.
//
// Параметры:
//   МассивСообщений - сообщения к отправке в банк
//    * ДокументСсылка.СообщениеОбменСБанком - ссылка на отправляемое сообщение.
//
// Возвращаемое значение:
//   Соответствие 
//    * Ключ - СправочникСсылка.НастройкиОбменСБанком - ссылка на настройку ЭДО с банком
//    * Значение - Массив
//        ** ДокументСсылка.СообщениеОбменСБанком - ссылка на отправляемое сообщение.
//
Функция ДанныеДляОтправкиВСбербанк(Знач МассивСообщенийОбмена) Экспорт
	
	СоответствиеВозврата = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СообщениеОбменСБанками.Ссылка,
	               |	СообщениеОбменСБанками.НастройкаОбмена КАК НастройкаОбмена
	               |ИЗ
	               |	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	               |ГДЕ
	               |	СообщениеОбменСБанками.Ссылка В(&МассивСообщенийОбмена)
	               |	И СообщениеОбменСБанками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Подписан)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НастройкаОбмена";
	
	Запрос.УстановитьПараметр("МассивСообщенийОбмена", МассивСообщенийОбмена);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("НастройкаОбмена") Цикл
		МассивЭД = Новый Массив;
		Пока Выборка.Следующий() Цикл
			МассивЭД.Добавить(Выборка.Ссылка);
		КонецЦикла;
		СоответствиеВозврата.Вставить(Выборка.НастройкаОбмена, МассивЭД);
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

// Возвращает строку с содержимым сертификата в формате Base64.
//
// Параметры:
//  СсылкаНаХранилище  - Строка - ссылка на хранилище с двоичными данными сертификата.
//
// Возвращаемое значение:
//   Строка   - Строка содержит данные сертификата в формате Base64.
//
Функция СертификатВФорматеBase64(СсылкаНаХранилище)

	ДвоичныеДанныеСертификата = СсылкаНаХранилище.Получить();
	
	СтрокаBase64 = Base64Строка(ДвоичныеДанныеСертификата);
	СтрокаBase64 = "-----BEGIN CERTIFICATE-----" + Символы.ПС + СтрокаBase64 + Символы.ПС + "-----END CERTIFICATE-----";

	Возврат СтрокаBase64;

КонецФункции // СертификатВФорматеBase64()

// Производит расчет свертки пароля по алгоритму SRP.
//
// Параметры:
//  Логин - Строка - название учетной записи на сервере банка
//  Пароль - Строка - пароль для учетной записи
//  Соль - ДвоичныеДанные - соль , значение полученное от сервера банка
//  B - ДвоичныеДанные - значение полученное от сервера банка
//  K - Строка - рассчитанное значение параметра
//  A - Строка - рассчитанное значение параметра.
//
Процедура РассчитатьСверткуПароляСбербанк(Логин, Пароль, Соль, B, K, A)

	СлучайноеЧисло_a = СлучайноеЧисло256Бит();
	N = 125617018995153554710546479714086468244499594888726646874671447258204721048803;
	Константа_k = 1255395351873185901587718910969259987480671485520;
	ЧислоA = ВозвестиВСтепень(2, СлучайноеЧисло_a, N);
	
	ЛогинПароль = Логин + ":" + Пароль;
	
	ХЭШ = СтрокаBase64БезBOM(ЛогинПароль, "windows-1251");
	ДвоичныеДанные = Base64Значение(ХЭШ);
	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA1);
	Хеширование.Добавить(ДвоичныеДанные);
	Hp = Хеширование.ХешСумма;
	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA1);
	Хеширование.Добавить(Соль);
	Хеширование.Добавить(Hp);
	x = Хеширование.ХешСумма;
	
	РазмерА = РазмерЧисла(ЧислоA);
	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA1);
	Если РазмерА < 33 Тогда // 33 - размер числа N
		Для Счетчик = РазмерА + 1 По 33 Цикл
			Хеширование.Добавить(Символ(0));
		КонецЦикла;
	КонецЕсли;
	A = ДвоичныеДанныеИзЧисла(ЧислоA);
	Хеширование.Добавить(A);
	РазмерВ = B.Размер();
	Если РазмерВ < 33 Тогда
		Для Счетчик = РазмерВ + 1 По 33 Цикл
			Хеширование.Добавить(Символ(0));
		КонецЦикла;
	КонецЕсли;
	Хеширование.Добавить(B);
	u = Хеширование.ХешСумма;
	ЧислоВ = ЧислоИзДвоичныхДанных(B);
	ЧислоХ = ЧислоИзДвоичныхДанных(x);
	Base = ЧислоВ - Константа_k * ВозвестиВСтепень(2, ЧислоХ, N);
	Если Base < 0 Тогда
		Base = Константа_k * N + ЧислоВ - Константа_k * ВозвестиВСтепень(2, ЧислоХ, N);
	КонецЕсли;
	
	S = ВозвестиВСтепень(Base, СлучайноеЧисло_a + ЧислоИзДвоичныхДанных(u) * ЧислоХ, N);
	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA1);
	Хеширование.Добавить(ДвоичныеДанныеИзЧисла(S));
	K = Хеширование.ХешСумма;
	
КонецПроцедуры

Функция ДвоичныеДанныеИзЧисла(Знач Число)
	
	ШестнадцатеричнаяСтрока = ШестнадцатеричнаяСтрока(Число);
	ТипXDTOДвоичныеДанные = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "hexBinary");
	ЗначениеHEX = ФабрикаXDTO.Создать(ТипXDTOДвоичныеДанные, ШестнадцатеричнаяСтрока);
	Возврат ЗначениеHEX.Значение;

КонецФункции

// Вычисляет верификатор нового пароля при смене
//
// Параметры:
//  Логин - Строка - название учетной записи клиента банка
//  Пароль - Строка - новый пароль
//  Соль - ДвоичныеДанные - соль.
// 
// Возвращаемое значение:
//  ДвоичныеДанные - верификатор нового пароля.
//
Функция ВерификаторНовогоПароляСбербанк(Логин, Пароль, Соль)
	
	ЛогинПароль = Логин + ":" + Пароль;
	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA1);
	Хеширование.Добавить(ЛогинПароль);
	Hp = Хеширование.ХешСумма;

	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA1);
	Хеширование.Добавить(Соль);
	Хеширование.Добавить(Hp);
	x = Хеширование.ХешСумма;
	
	N = 125617018995153554710546479714086468244499594888726646874671447258204721048803;
	ЧислоХ = ЧислоИзДвоичныхДанных(x);

	V = ВозвестиВСтепень(2, ЧислоХ, N);
	
	Возврат ДвоичныеДанныеИзЧисла(V);

КонецФункции

Функция ШестнадцатеричнаяСтрока(Знач Число)
	
	Если Число = 0 Тогда
		Возврат "0";
	КонецЕсли;
	ВозвращаемоеЗначение = "";
	Пока Число > 0 Цикл
		Остаток = Число % 16;
		Если Остаток >= 10 Тогда
			ВозвращаемоеЗначение = Символ(КодСимвола("A") + Остаток - 10) + ВозвращаемоеЗначение;
		Иначе
			ВозвращаемоеЗначение = Строка(Остаток) + ВозвращаемоеЗначение;
		КонецЕсли;
		Число = Цел(Число / 16);
	КонецЦикла;
	
	Если СтрДлина(ВозвращаемоеЗначение) % 2 > 0 Тогда
		ВозвращаемоеЗначение = "0" + ВозвращаемоеЗначение;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СлучайноеЧисло256Бит()
	
	ИтоговоеЧисло = "";
	Для Счетчик = 1 По 8 Цикл
		ГСЧ = Новый ГенераторСлучайныхЧисел();
		СлучайноеЧисло = ГСЧ.СлучайноеЧисло(100000000, 999999999);
		ИтоговоеЧисло = ИтоговоеЧисло + Формат(СлучайноеЧисло, "ЧГ=");
	КонецЦикла;
	СлучайноеЧисло = ГСЧ.СлучайноеЧисло(100000, 999999);
	ИтоговоеЧисло = ИтоговоеЧисло + Формат(СлучайноеЧисло, "ЧГ=");
	Возврат Число(ИтоговоеЧисло);
	
КонецФункции

Функция ВозвестиВСтепень(Знач ИсходноеЧисло, Знач Степень, Знач Делитель)
	
	Результат = 1;
	Пока Степень <> 0 Цикл
		Если Степень % 2 = 1 Тогда
			Результат = (Результат * ИсходноеЧисло) % Делитель;
			Степень = Степень - 1;
		КонецЕсли;
		Степень = Степень / 2;
		ИсходноеЧисло = (ИсходноеЧисло * ИсходноеЧисло) % Делитель;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция РазмерЧисла(Знач Число)
	
	ШестнадцатеричнаяСтрока = ШестнадцатеричнаяСтрока(Число);
	
	Возврат СтрДлина(ШестнадцатеричнаяСтрока)/2;
	
КонецФункции

Функция ЧислоИзДвоичныхДанных(ДвоичныеДанные)
	
	ДвоичныеДанныеСтрокой = СтрЗаменить(Строка(ДвоичныеДанные), " ", "");
	ВозвращаемоеЗначение = 0;
	ДлинаСтроки = СтрДлина(ДвоичныеДанныеСтрокой);
	Для Счетчик = 1 По ДлинаСтроки Цикл
		КодСимвола = КодСимвола(ДвоичныеДанныеСтрокой, Счетчик);
		Если КодСимвола >= КодСимвола("0") И КодСимвола <= КодСимвола("9") Тогда
			Разница = КодСимвола - КодСимвола("0");
		Иначе
			Разница=КодСимвола - КодСимвола("A") + 10;
		КонецЕсли;
		ВозвращаемоеЗначение = ВозвращаемоеЗначение * 16 + Разница;
	КонецЦикла;
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Сохраняет параметры установленного сеанса на сервере
//
// Параметры:
//  КлючСессии			 - 	 - 
//  ИдентификаторСессии	 - 	 - 
//  ФродПараметры		 - 	 - 
//  Логин				 - 	 - 
//
Процедура СохранитьСессиюНаСервереСбербанк(КлючСессии, ИдентификаторСессии, ФродПараметры, Логин)
	
	УстановитьПривилегированныйРежим(Истина);
	СохраненныеСессии = Новый Соответствие(ПараметрыСеанса.СессииОбменСБанками);
	ПараметрыСессии = Новый Структура;
	ПараметрыСессии.Вставить("ИдентификаторСессии", ИдентификаторСессии);
	ПараметрыСессии.Вставить("ФродПараметры", ФродПараметры);
	ПараметрыСессии.Вставить("Логин", Логин);
	СохраненныеСессии.Вставить(КлючСессии, Новый ФиксированнаяСтруктура(ПараметрыСессии));
	ПараметрыСеанса.СессииОбменСБанками = Новый ФиксированноеСоответствие(СохраненныеСессии);
	
КонецПроцедуры

// Запускает фоновое задание по формированию и отправке запросов выписки в Сбербанк
//
// Параметры:
//    НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка прямого обмена с банком;
//    ДатаНачала - Дата - дата начала периода запроса выписки;
//    ДатаОкончания - Дата - дата окончания периода запроса выписки;
//    НомерСчета - Строка - номер банковского счета или Неопределено;
//    ФормироватьПринудительно - Булево - формировать запрос даже при наличии выписок за указанный период;
// 
// Возвращаемое значение:
//  Структура - см. описание в ДлительныеОперации.ВыполнитьВФоне.
//
Функция ЗапускЗаданияФормированияИОтправкиЗапросовВыпискиСбербанк(Знач НастройкаОбмена, Знач ДатаНачала, Знач ДатаОкончания, Знач НомерСчета, Знач ФормироватьПринудительно = Ложь) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Формирование и отправка запросов выписки в Сбербанк.'");

	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("ТекущаяСессия", ОбменСБанкамиСлужебный.ПараметрыУстановленнойСессииСбербанк(НастройкаОбмена));
	ПараметрыОтправки.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыОтправки.Вставить("ДатаНачала", ДатаНачала);
	ПараметрыОтправки.Вставить("ДатаОкончания", ДатаОкончания);
	ПараметрыОтправки.Вставить("НомерСчета", НомерСчета);
	ПараметрыОтправки.Вставить("ФормироватьПринудительно", ФормироватьПринудительно);
	ПараметрыОтправки.Вставить("ПолучитьСтатусыДокументов", Ложь);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.СформироватьИОтправитьЗапросыВыписокСбербанк", ПараметрыОтправки, ПараметрыВыполнения);
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

Функция НайтиСообщениеОбмена(НастройкаОбмена, ВнешнийИдентификатор)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СообщениеОбменСБанками.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|ГДЕ
	|	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	|	И СообщениеОбменСБанками.ВнешнийИдентификатор = &ВнешнийИдентификатор
	|	И НЕ СообщениеОбменСБанками.ПометкаУдаления";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.УстановитьПараметр("ВнешнийИдентификатор", ВнешнийИдентификатор);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ПравоОбработкиЭД()
	
	Возврат ПравоДоступа("Изменение", Метаданные.Документы.ПакетОбменСБанками);
	
КонецФункции

Функция ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту)

	Возврат ЭлектронноеВзаимодействие.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту)
		
КонецФункции

// Создает пакет электронных документов.
// 
// Параметры:
//  МассивСообщенийОбмена - Массив ссылок на сообщения, которые надо включить в пакет.
//  ПризнакПодписи - булево, признак, что документы подписаны ЭП.
//
Функция СоздатьДокументыПакетовЭД(МассивСообщенийОбмена)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТЗ_ПЭД = Новый ТаблицаЗначений;
	ТЗ_ПЭД.Колонки.Добавить("ПЭД");
	ТЗ_ПЭД.Колонки.Добавить("ПрограммаБанка");
	ТЗ_ПЭД.Колонки.Добавить("ФормироватьЭД");
	ТЗ_ПЭД.Колонки.Добавить("АутентификацияПоСертификату");
	
	МассивПодготовленныхКОтправкеСообщенийОбмена = Новый Массив;
	
	ПодготовленныеПакеты = НайтиПодготовленныеКОтправкеПакеты(МассивСообщенийОбмена);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщениеОбменСБанками.Статус,
	|	СообщениеОбменСБанками.НастройкаОбмена,
	|	СообщениеОбменСБанками.Направление,
	|	СообщениеОбменСБанками.ВидЭД,
	|	СообщениеОбменСБанками.НастройкаОбмена.ПрограммаБанка КАК ПрограммаБанка,
	|	СообщениеОбменСБанками.НастройкаОбмена.АутентификацияПоСертификату
	|		И СообщениеОбменСБанками.НастройкаОбмена.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.АсинхронныйОбмен) КАК АутентификацияПоСертификату,
	|	СообщениеОбменСБанками.Ссылка КАК СообщениеОбмена
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|ГДЕ
	|	СообщениеОбменСБанками.Ссылка В(&МассивДокументов)";
	Запрос.УстановитьПараметр("МассивДокументов", МассивСообщенийОбмена);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПЭД = ПодготовленныеПакеты.Получить(Выборка.СообщениеОбмена);
		ФормироватьЭД = Ложь;
		
		Если ПЭД = Неопределено Тогда
			
			ФормироватьЭД = Истина;
					
			ДокументНЕПодписан = Выборка.Статус = Перечисления.СтатусыОбменСБанками.Сформирован
								ИЛИ Выборка.Статус = Перечисления.СтатусыОбменСБанками.ЧастичноПодписан
								ИЛИ Выборка.Статус = Перечисления.СтатусыОбменСБанками.ОтклоненБанком; // для обмена через ДО
			Если НЕ УстановленныеПодписиВалидны(Выборка.СообщениеОбмена) Тогда
				ШаблонТекста = НСтр("ru = 'Обработка сообщения обмена %1.
									|Документ не обработан, так как содержит невалидные подписи.'");
				Текст = СтрШаблон(ШаблонТекста, Выборка.СообщениеОбмена);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			КонецЕсли;

			Если (ОбменСБанкамиСлужебный.ПодписыватьВидЭД(Выборка.НастройкаОбмена, Выборка.ВидЭД)
					И (ДокументНеПодписан ИЛИ НЕ УстановленныеПодписиВалидны(Выборка.СообщениеОбмена)))
				ИЛИ Выборка.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
				Продолжить;
			КонецЕсли;
			
			Если Выборка.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку Тогда
				СлужебноеСообщениеБанка = ОбменСБанкамиСлужебный.ПодчиненноеСообщениеОбмена(
					Выборка.СообщениеОбмена, Перечисления.ВидыЭДОбменСБанками.ДополнительныеДанные);
				Если Не ЗначениеЗаполнено(СлужебноеСообщениеБанка) Тогда
					ТекстСообщения = НСтр("ru = 'Невозможно сформировать пакет банка'");
					ВидОперации = НСтр("ru = 'Формирование пакета ЭД'");
					ТекстОшибки = НСтр("ru = 'Не найдены дополнительные данные для электронного документа'");
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
						ВидОперации, ТекстОшибки, ТекстСообщения, "ОбменСБанками", Выборка.СообщениеОбмена);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
				
			СообщенияОбменаТабличнойЧасти = Новый Массив;
			СообщенияОбменаТабличнойЧасти.Добавить(Выборка.СообщениеОбмена);
			
			Если ЗначениеЗаполнено(СлужебноеСообщениеБанка) Тогда
				СообщенияОбменаТабличнойЧасти.Добавить(СлужебноеСообщениеБанка);
			КонецЕсли;

			ПЭД = Неопределено;
			ОбменСБанкамиСлужебный.СоздатьПакетОбменСБанками(Выборка.НастройкаОбмена, СообщенияОбменаТабличнойЧасти, ПЭД);
		КонецЕсли;

		Если ЗначениеЗаполнено(ПЭД) Тогда
			НовСтрока = ТЗ_ПЭД.Добавить();
			НовСтрока.ПЭД = ПЭД;
			НовСтрока.ПрограммаБанка = Выборка.ПрограммаБанка;
			НовСтрока.ФормироватьЭД = ФормироватьЭД;
			НовСтрока.АутентификацияПоСертификату = Выборка.АутентификацияПоСертификату;
			Если ФормироватьЭД Тогда
				МассивПодготовленныхКОтправкеСообщенийОбмена.Добавить(Выборка.СообщениеОбмена);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	// Сформируем массив структур для обработки на клиенте
	МассивСтруктурПЭД = Новый Массив;
	Для Каждого ТекСтрока Из ТЗ_ПЭД Цикл
		СтруктураПЭД = Новый Структура;
		СтруктураПЭД.Вставить("ПЭД", ТекСтрока.ПЭД);
		СтруктураПЭД.Вставить("ЭтоНовый", ТекСтрока.ФормироватьЭД);
		СтруктураПЭД.Вставить("АутентификацияПоСертификату", ТекСтрока.АутентификацияПоСертификату);
		
		Если ТекСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
			ИЛИ ТекСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК Тогда
			СтруктураПЭД.Вставить("ОтправкаСКлиента");
		ИначеЕсли ТекСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн И ТекСтрока.ФормироватьЭД Тогда
			ОбменСБанкамиСлужебный.СоздатьЭДПакетаCMSDETACHED(ТекСтрока.ПЭД)
		ИначеЕсли ТекСтрока.ФормироватьЭД Тогда
			ЕстьОшибка = Ложь;
			ОбменСБанкамиСлужебный.СоздатьЭДПакетаAsync(ТекСтрока.ПЭД, ЕстьОшибка);
			Если ЕстьОшибка Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		МассивСтруктурПЭД.Добавить(СтруктураПЭД);
	КонецЦикла;
	
	Для Каждого СообщениеОбмена Из МассивПодготовленныхКОтправкеСообщенийОбмена Цикл
		СтруктураПараметров = Новый Структура("Статус", Перечисления.СтатусыОбменСБанками.ПодготовленКОтправке);
		ИзменитьСообщениеОбмена(СообщениеОбмена, СтруктураПараметров);
	КонецЦикла;
		
	Возврат МассивСтруктурПЭД;
	
КонецФункции

Функция НайтиПодготовленныеКОтправкеПакеты(МассивСообщенийОбмена)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетЭДСообщения.Ссылка КАК ПакетЭД,
	|	ПакетЭДСообщения.Сообщение КАК СообщениеОбмена
	|ИЗ
	|	Документ.ПакетОбменСБанками.Сообщения КАК ПакетЭДСообщения
	|ГДЕ
	|	ПакетЭДСообщения.Сообщение В(&МассивСообщенийОбмена)
	|	И ПакетЭДСообщения.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.ПодготовленКОтправке)";
	Запрос.УстановитьПараметр("МассивСообщенийОбмена", МассивСообщенийОбмена);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоответствиеВозврата = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		СоответствиеВозврата.Вставить(Выборка.СообщениеОбмена, Выборка.ПакетЭД);
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

// Возвращает двоичные данные файла, содержащего данные для аутентификации на сервере банка по сертификату.
// Может вызывать исключение.
//
// Параметры:
//  ДанныеСертификата - ДвоичныеДанные - данные сертификата для аутентификации на ресурсе банка;
//  ВерсияФормата - Строка - версия схемы обмена с банком.
//
// Возвращаемое значение:
//  ДвоичныеДанные - данные файла аутентификации.
//
Функция ДанныеДляАутентификацииПоСертификату(ДанныеСертификата, ВерсияФормата)
	
	Операция = НСтр("ru = 'Формирование электронного документа.'");
	
	ПространствоИмен = ОбменСБанкамиСлужебный.ПространствоИменАсинхронногоОбмена(ВерсияФормата);

	ТекстОшибки = "";
	
	Фабрика = ОбменСБанкамиСлужебныйПовтИсп.ФабрикаAsyncXDTO(ВерсияФормата);
	
	Попытка
		ЭД = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "X509Data", ПространствоИмен);
		УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "id", УникальныйИдентификатор, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "formatVersion", ВерсияФормата, Истина, ТекстОшибки);

		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "creationDate", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
		ВерсияПрограммыКлиентаДляБанка = ОбменСБанкамиСлужебныйПовтИсп.ВерсияПрограммыКлиентаДляБанка();
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "userAgent", ВерсияПрограммыКлиентаДляБанка, , ТекстОшибки);
		Сертификат = Новый СертификатКриптографии(ДанныеСертификата);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(
			ЭД, "X509IssuerName", Сертификат.Издатель.CN, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(
			ЭД, "X509SerialNumber", Сертификат.СерийныйНомер, Истина, ТекстОшибки);
		ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "X509Certificate", ДанныеСертификата, Истина, ТекстОшибки);
		ЭД.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	Исключение
		ТекстСообщения = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ПодробноеПредставлениеОшибки, , "ОбменСБанками");
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Возврат ОбменСБанкамиСлужебный.ДвоичныеДанныеИзXDTO(Фабрика, ЭД, Ложь);
	
КонецФункции

Функция ЗапросВыпискиCMLXDTO(ДатаНачала, ДатаКонца, МассивБанковскихСчетов, Банк)
	
	Попытка
		URI = "urn:1C.ru:ClientBankExchange";
		
		Пакет = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI,"ClientBankExchange"));
		Пакет.ВерсияФормата = "1.08";
		Пакет.Получатель = Банк.Наименование;
		Пакет.Отправитель = "1С: Предприятие";
		Пакет.ДатаСоздания = ТекущаяДатаСеанса();
		Пакет.ВремяСоздания = ТекущаяДатаСеанса();
		
		УсловияОтбора = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI,"УсловияОтбора"));
		УсловияОтбора.ДатаНачала = ДатаНачала;
		УсловияОтбора.ДатаКонца = ДатаКонца;
		Для Каждого НомерСчета Из МассивБанковскихСчетов Цикл
			УсловияОтбора.РасчСчет.Добавить(НомерСчета);
		КонецЦикла;
		
		Пакет.УсловияОтбора = УсловияОтбора;
		
		Пакет.Проверить();
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВидОперации = НСтр("ru = 'Формирование ЭД'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, "ОбменСБанками");
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Пакет;
	
КонецФункции

Функция МассивЗапросовВыписки(НастройкаОбмена, Организация, Банк, ДатаНачала, ДатаОкончания, МассивБанковскихСчетов)
	
	ПакетXDTO = ЗапросВыпискиCMLXDTO(ДатаНачала, ДатаОкончания, МассивБанковскихСчетов, Банк);
		
	Если ПакетXDTO = Неопределено Тогда
		Возврат Неопределено
	КонецЕсли;
	
	ПолноеИмяФайла = ПолучитьИмяВременногоФайла("xml");
	Запись = Новый ЗаписьXML;
	Запись.ОткрытьФайл(ПолноеИмяФайла);
	Запись.ЗаписатьОбъявлениеXML();

	ФабрикаXDTO.ЗаписатьXML(
		Запись, ПакетXDTO, "ClientBankExchange", "urn:1C.ru:ClientBankExchange", , НазначениеТипаXML.Явное);
	
	Запись.Закрыть();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПолноеИмяФайла);
	
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	ШаблонСообщения = НСтр("ru='Запрос выписки с %1 по %2'");
	
	ТекстСообщения = СтрШаблон(
		ШаблонСообщения, Формат(ДатаНачала, "ДЛФ=D"), Формат(ДатаОкончания, "ДЛФ=D"));
		
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
	СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки);
	СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
	СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
	СтруктураРеквизитов.Вставить("ПредставлениеДокумента", ТекстСообщения);
	СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
	СтруктураРеквизитов.Вставить("СсылкаНаОбъект", НастройкаОбмена);
	
	СообщениеЗапрос = Неопределено;
	ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(СтруктураРеквизитов, СообщениеЗапрос);
	
	МассивВозврата = Новый Массив;
	МассивВозврата.Добавить(СообщениеЗапрос);
	
	Возврат МассивВозврата;
	
КонецФункции

Функция МассивЗапросовВыпискиAsync(НастройкаОбмена, ИдентификаторОрганизации, ДатаНачала, ДатаОкончания, МассивБанковскихСчетов)
	
	МассивЗапросов = Новый Массив;
	
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбмена, "Организация, Банк, ИдентификаторОрганизации, ИспользуетсяКриптография, ВерсияФормата");
	
	ОтправительНаименование = ЭлектронноеВзаимодействиеСлужебный.СокращенноеНаименованиеОрганизации(
		РеквизитыНастройкиОбмена.Организация);
	РеквизитыОрганизации = Неопределено; 
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(
		РеквизитыНастройкиОбмена.Организация, РеквизитыОрганизации);
	РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыНастройкиОбмена.Банк, "Код, Наименование");

	Если ЗначениеЗаполнено(РеквизитыНастройкиОбмена.ВерсияФормата) Тогда
		ВерсияФормата = РеквизитыНастройкиОбмена.ВерсияФормата;
	Иначе
		ВерсияФормата = ОбменСБанкамиКлиентСервер.АктуальнаяВерсияФорматаАсинхронногоОбмена();
	КонецЕсли;
	
	ПространствоИмен = ОбменСБанкамиСлужебный.ПространствоИменАсинхронногоОбмена(ВерсияФормата);
	Фабрика = ОбменСБанкамиСлужебныйПовтИсп.ФабрикаAsyncXDTO(ВерсияФормата);
	
	Для Каждого НомерСчета Из МассивБанковскихСчетов Цикл
	
		ТекстОшибки = "";
		Попытка
			
			Идентификатор = Новый УникальныйИдентификатор;
			
			ЭД = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "StatementRequest", ПространствоИмен);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "id", Строка(Идентификатор), Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "formatVersion", ВерсияФормата, Истина, ТекстОшибки);

			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "creationDate", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "userAgent", 
				ОбменСБанкамиСлужебныйПовтИсп.ВерсияПрограммыКлиентаДляБанка(), , ТекстОшибки);
			
			Отправитель = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "CustomerPartyType", ПространствоИмен);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Отправитель, "id", ИдентификаторОрганизации, Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Отправитель, "name", ОтправительНаименование, , ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Отправитель, "inn", РеквизитыОрганизации.ИНН, , ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Отправитель, "kpp", РеквизитыОрганизации.КПП, , ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "Sender", Отправитель, Истина, ТекстОшибки);
			
			Получатель = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "BankPartyType", ПространствоИмен);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Получатель, "bic", РеквизитыБанка.Код, Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(Получатель, "name", РеквизитыБанка.Наименование, , ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "Recipient", Получатель, Истина, ТекстОшибки);
			
			ДанныеЗапроса = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "StatementRequest.Data", ПространствоИмен);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ДанныеЗапроса, "StatementType", "0", Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ДанныеЗапроса, "DateFrom", ДатаНачала, Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ДанныеЗапроса, "DateTo", ДатаОкончания, Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ДанныеЗапроса, "Account", НомерСчета, Истина, ТекстОшибки);
			
			БанкСчета = ОбменСБанкамиСлужебный.ОбъектТипаCML(Фабрика, "BankType", ПространствоИмен);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(БанкСчета, "BIC", РеквизитыБанка.Код, Истина, ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(БанкСчета, "Name", РеквизитыБанка.Наименование, , ТекстОшибки);
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ДанныеЗапроса, "Bank", БанкСчета, Истина, ТекстОшибки);
			
			ОбменСБанкамиСлужебный.ЗаполнитьСвойствоXDTO(ЭД, "Data", ДанныеЗапроса, Истина, ТекстОшибки);
			
			ЭД.Проверить();
		
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				ФайлСформирован = Ложь;
			Иначе
				ДвоичныеДанные = ОбменСБанкамиСлужебный.ДвоичныеДанныеИзXDTO(Фабрика, ЭД, Ложь);
				ФайлСформирован = Истина;
			КонецЕсли;

		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Операция = НСтр("ru = 'Формирование ЭД'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, "ОбменСБанками", НастройкаОбмена);
			ФайлСформирован = Ложь;
		КонецПопытки;
		
		Если Не ФайлСформирован Тогда
			Продолжить;
		КонецЕсли;
		
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);

		Шаблон = НСтр("ru = 'Запрос выписки с %1 по %2'");
	
		ИмяФайла = СтрШаблон(
			Шаблон, Формат(ДатаНачала, "ДЛФ=D"), Формат(ДатаОкончания, "ДЛФ=D"));
			
		СтруктураРеквизитов = Новый Структура;
		
		Если РеквизитыНастройкиОбмена.ИспользуетсяКриптография Тогда
			СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
		Иначе
			СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.ПодготовленКОтправке);
		КонецЕсли;
		
		СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки);
		СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
		СтруктураРеквизитов.Вставить("Организация", РеквизитыНастройкиОбмена.Организация);
		СтруктураРеквизитов.Вставить("Банк", РеквизитыНастройкиОбмена.Банк);
		СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭД.Исходящий);
		СтруктураРеквизитов.Вставить("ПредставлениеДокумента", ИмяФайла);
		СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
		СтруктураРеквизитов.Вставить("СсылкаНаОбъект", НастройкаОбмена);
		СтруктураРеквизитов.Вставить("Идентификатор", Идентификатор);
		СообщениеЗапрос = Неопределено;
		ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(СтруктураРеквизитов, СообщениеЗапрос);

		МассивЗапросов.Добавить(СообщениеЗапрос);
		
	КонецЦикла;
	
	Возврат МассивЗапросов;
	
КонецФункции

Функция ОтправкаСформированныхСообщенийВБанк(НастройкаОбмена, ИдентификаторСессии = Неопределено, ТекстОшибки = "")

	ГотовыеКОтправкеПакеты = ПодготовленныеКОтправкеПакетыЭДО(НастройкаОбмена);
	Если ЗначениеЗаполнено(ГотовыеКОтправкеПакеты) Тогда
		ПараметрыАвторизации = Новый Структура("ИдентификаторСессии", ИдентификаторСессии);
		ПараметрыОтправки = Новый Соответствие;
		ПараметрыОтправки.Вставить(НастройкаОбмена, ПараметрыАвторизации);
		Результат = ОбменСБанкамиСлужебный.ОтправкаПакетовЭДО(ГотовыеКОтправкеПакеты, ПараметрыОтправки, ТекстОшибки);
		Возврат Результат.КоличествоОтправлено;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Только для внутреннего использования
Функция МассивИдентификаторовВыпискиБанка(ВыпискаБанка)
	
	МассивВнешнихИдентификаторов = Новый Массив;
	
	ДанныеЭД = ДвоичныеДанныеПрисоединенногоФайла(ВыпискаБанка);
	
	Если НЕ ТипЗнч(ДанныеЭД) = Тип("ДвоичныеДанные") Тогда
		Возврат МассивВнешнихИдентификаторов;
	КонецЕсли;
	
	СтруктураДанных = ОбменСБанкамиСлужебный.СформироватьДеревоРазбора(Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка, ДанныеЭД);
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат МассивВнешнихИдентификаторов;
	КонецЕсли;
		
	ДеревоРазбора = СтруктураДанных.ДеревоРазбора;
	СтрокаОбъекта = СтруктураДанных.СтрокаОбъекта;
		
	СтруктураОтбора = Новый Структура("Реквизит", "БанковскиеСчетаОрганизаций");
	БанковскиеСчетаОрганизаций = СтрокаОбъекта.Строки.НайтиСтроки(СтруктураОтбора);
	МассивСчетов = Новый Массив;
		
	Для Каждого СтрокаБанковскийСчет Из БанковскиеСчетаОрганизаций Цикл
		НомерСчета = ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаБанковскийСчет, "БанковскийСчет.РасчСчет");
		МассивСчетов.Добавить(НомерСчета);
	КонецЦикла;
		
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		ТекНомерСчета = ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаТЧ, "ПлательщикСчет");
			
		ЭтоИсходящийПлатеж = МассивСчетов.Найти(ТекНомерСчета) <> Неопределено;
		Если ЭтоИсходящийПлатеж Тогда
			ИДВнешний = ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ИдПлатежа");
			Если ЗначениеЗаполнено(ИДВнешний) Тогда
				МассивВнешнихИдентификаторов.Добавить(ИДВнешний);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивВнешнихИдентификаторов;

КонецФункции

Функция ДанныеПодписей(СообщениеОбмена)
	
	УстановитьПривилегированныйРежим(Истина);
	МассивВозврата = Новый Массив;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЭлектронныеПодписи.Подпись КАК Подпись,
	               |	ЭлектронныеПодписи.Сертификат
	               |ИЗ
	               |	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
	               |ГДЕ
	               |	ЭлектронныеПодписи.ПодписанныйОбъект.ВладелецФайла = &ВладелецФайла";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("ВладелецФайла", СообщениеОбмена);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		ДвоичныеДанные = ВыборкаЗапроса.Подпись.Получить();
		АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
		ДанныеСертификата = ВыборкаЗапроса.Сертификат.Получить();
		СтруктураВозврата = Новый Структура("АдресПодписи, Сертификат", АдресПодписи, ДанныеСертификата);
		МассивВозврата.Добавить(СтруктураВозврата);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Функция возвращает пересечение массива сертификатов, установленных в личном хранилище
// с массивом сертификатов зарегистрированных в 1с (действующих и доступных текущему пользователю).
// В случае, если передан необязательный параметр НастройкаОбмена, то массив зарегистрированных в 1с сертификатов,
// дополнительно ограничивается условием вхождения в список зарегистрированных по данной настройке сертификатов.
//
// Параметры:
//  МассивОтпечатковСертификатов - массив - массив отпечатков сертификатов, установленных в хранилище на Клиенте/Сервере
//    (в зависимости от настроек работы с криптографией).
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена, список сертификатов
//    которой требуется получить.
//
// Возвращаемое значение - массив структур сертификатов.
//
Функция МассивСтруктурДоступныхДляПодписиСертификатов(МассивОтпечатковСертификатов, НастройкаОбмена = Неопределено)
	
	МассивСтруктурДоступныхСертификатов = Новый Массив;
	
	ТаблицаДоступныхСертификатов = ОбменСБанкамиСлужебный.ТаблицаДоступныхДляПодписиСертификатов(
		МассивОтпечатковСертификатов, НастройкаОбмена);
	Для Каждого ТекЭл Из МассивОтпечатковСертификатов Цикл
		СтрокаТаблицы = ТаблицаДоступныхСертификатов.Найти(ТекЭл, "Отпечаток");
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтруктураСертификата = Новый Структура;
		СтруктураСертификата.Вставить("Отпечаток", ТекЭл);
		СтруктураСертификата.Вставить("Сертификат", СтрокаТаблицы.Ссылка);
		СтруктураСертификата.Вставить("ПарольПолучен", СтрокаТаблицы.ПарольПолучен);
		СтруктураСертификата.Вставить("ПарольСертификата", СтрокаТаблицы.ПарольСертификата);
		СтруктураСертификата.Вставить("Комментарий", "");
		
		МассивСтруктурДоступныхСертификатов.Добавить(СтруктураСертификата);
	КонецЦикла;
	
	Возврат МассивСтруктурДоступныхСертификатов;
	
КонецФункции

#КонецОбласти

#Область ЭлектронныеПодписи

// Получает массив сообщений, которые возникли при выполнении фонового задания.
//
// Параметры:
//   ИдентификаторЗадания - Строка - идентификатор фонового задания.
// 
// Возвращаемые параметры:
//   Массив - сообщения пользователю
//    * СообщениеПользователю - сообщение, содержащее текст ошибки.
//
Функция СообщенияОбОшибкахФоновогоЗадания(Знач ИдентификаторЗадания) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание = Неопределено Тогда
		МассивСообщений = Новый Массив;
	Иначе
		МассивСообщений = ФоновоеЗадание.ПолучитьСообщенияПользователю();
		Если МассивСообщений = Неопределено Тогда
			МассивСообщений = Новый Массив;
		КонецЕсли;
	КонецЕсли;

	Возврат МассивСообщений;
	
КонецФункции

// Запускает на сервере фоновое задание по отправке в банк запроса-зонда.
//
// Параметры:
//   ПараметрыОтправки - Структура - первый параметр для процедуры ОбменСБанкамиСлужебный.ОтправитьЗапросЗондВБанк;
//   УникальныйИдентификатор - Строка - идентификатор формы для создания временного хранилища;
//
// Возвращаемое значение:
//   Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция ЗапускЗаданияОтправкиЗапросЗондаНаСервере(Знач ПараметрыОтправки, Знач УникальныйИдентификатор) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка тестового запроса в банк'");

	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ОтправитьЗапросЗондВБанк", ПараметрыОтправки, ПараметрыВыполнения);
	
КонецФункции

// Запускает на сервере фоновое задание по получению извещения о состоянии из банка.
//
// Параметры:
//   ПараметрыПроцедуры - Структура - первый параметр для процедуры ОбменСБанкамиСлужебный.ПолучитьИзвещениеОСостоянииЭДАсинхронно;
//   УникальныйИдентификатор - Строка - идентификатор формы для создания временного хранилища;
//
// Возвращаемое значение:
//   Структура - см. ДлительныеОперации.ВыполнитьВФоне.
//
Функция ЗапускЗаданияПолученияИзвещенияОСостоянииЭДНаСервере(Знач ПараметрыПроцедуры, Знач УникальныйИдентификатор) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение извещения о состоянии электронного документа'");

	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСБанкамиСлужебный.ПолучитьИзвещениеОСостоянииЭДАсинхронно", ПараметрыПроцедуры, ПараметрыВыполнения);

КонецФункции

#КонецОбласти

#Область ПродвижениеДиректБанк

// Только для внутреннего использования. Получает данные банковского счета организации из документа.
//
// Параметры:
//    ДокументСсылка - ДокументСсылка - Ссылка на документ, в котором указан банковский счет;
//
// Возвращаемое значение:
//    Структура
//
Функция ПолучитьДанныеБанковскогоСчетаИзДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументВыборки.#ИмяРеквизитаБанковскийСчет#.Владелец КАК Организация,
		|	ДокументВыборки.#ИмяРеквизитаБанковскийСчет#.Банк КАК Банк
		|ИЗ
		|	Документ.#ДокументВыборки# КАК ДокументВыборки
		|ГДЕ
		|	ДокументВыборки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	ДокументВыборки = ДокументСсылка.Метаданные().Имя;
	ИмяРеквизитаБанковскийСчет = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
		"ПлатежноеПоручение.СчетОрганизации");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяРеквизитаБанковскийСчет#", ИмяРеквизитаБанковскийСчет);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДокументВыборки#", ДокументВыборки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Банк) Тогда
		Результат = Новый Структура;
		Результат.Вставить("Организация", Выборка.Организация);
		Результат.Вставить("Банк", Выборка.Банк);
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает количество банков из списка расчетных счетов организаций, доступных для настройки обмена через 1С:ДиректБанк.
// 
// Возвращаемое значение:
//    Число - количество банков доступных для настройки обмена через 1С:ДиректБанк.
Функция КоличествоБанковДляПодключенияДиректБанк() Экспорт
	
	БанкиДляОбмена = ОбменСБанкамиСлужебный.БанкиДляНастройкиОбменаЧерезДиректБанк();
	Если БанкиДляОбмена = Неопределено Тогда
		Возврат 0;
	Иначе
		Возврат БанкиДляОбмена.Количество();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти
