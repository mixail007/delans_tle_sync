
// Парсер xml ответа
// Параметры:
//	ТекстXML, типа HTTPСервисОтвет
// Возвращаемое значение: 
//	ПараметрыОтвета, типа Структура, где:
//		СтруктураХML, тип Структура – структура данных из тела ответа в формате xml
//		КодОтвета, тип число – код состояния ответа
//
Функция ПарсерXML(ТекстXML) Экспорт
	
	ПараметрыОтвета = Новый Структура("КодОтвета, СтруктураОтвета, ТелоОтветаСтрока", 200, Новый Структура, ТекстXML);
	
	Если НЕ ТекстXML = "" Тогда
		
		ТекстXML = СтрЗаменить(ТекстXML, "<result>", "<Result>");
		ТекстXML = СтрЗаменить(ТекстXML, "</result>", "</Result>");
		ТекстXML = СтрЗаменить(ТекстXML, "<result/>", "<Result/>");
		ТекстXML = СтрЗаменить(ТекстXML, "<request>", "<Request>");
		ТекстXML = СтрЗаменить(ТекстXML, "</request>", "</Request>");
		ТекстXML = СтрЗаменить(ТекстXML, "<request/>", "<Request/>");
		ТекстXML = СтрЗаменить(ТекстXML, "<error>", "<Error>");
		ТекстXML = СтрЗаменить(ТекстXML, "</error>", "</Error>");
		ТекстXML = СтрЗаменить(ТекстXML, "<error/>", "<Error/>");
		ТекстXML = СтрЗаменить(ТекстXML, "<code>", "<Code>");
		ТекстXML = СтрЗаменить(ТекстXML, "</code>", "</Code>");
		ТекстXML = СтрЗаменить(ТекстXML, "<code/>", "<Code/>");
		ТекстXML = СтрЗаменить(ТекстXML, "<description>", "<Description>");
		ТекстXML = СтрЗаменить(ТекстXML, "</description>", "</Description>");
		ТекстXML = СтрЗаменить(ТекстXML, "<description/>", "<Description/>");
		ТекстXML = СтрЗаменить(ТекстXML, "<debuginfo>", "<DebugInfo>");
		ТекстXML = СтрЗаменить(ТекстXML, "</debuginfo>", "</DebugInfo>");
		ТекстXML = СтрЗаменить(ТекстXML, "<debuginfo/>", "<DebugInfo/>");
		ТекстXML = СтрЗаменить(ТекстXML, "type=", "Type=");
		ТекстXML = СтрЗаменить(ТекстXML, """list""", """List""");
		ТекстXML = СтрЗаменить(ТекстXML, """table""", """Table""");
		ТекстXML = СтрЗаменить(ТекстXML, "<row>", "<Row>");
		ТекстXML = СтрЗаменить(ТекстXML, "</row>", "</Row>");
		ТекстXML = СтрЗаменить(ТекстXML, "<row/>", "<Row/>");



		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(ТекстXML);
			
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					КорневойЭлемент = ЧтениеXML.Имя;
					Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = КорневойЭлемент И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
							ИмяЭлементаОтвета = ЧтениеXML.Имя;
							Если ЧтениеXML.ПервыйАтрибут() И ЧтениеXML.Имя = "Type" Тогда
								ТипЭлемента = ЧтениеXML.Значение
							Иначе
								ТипЭлемента = "String";
							КонецЕсли;
							Если ТипЭлемента = "List" Тогда 
								ЗначениеЭлементаОтвета = Новый Массив;
								Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = ИмяЭлементаОтвета И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
									Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
										ЗначениеЭлементаОтвета.Добавить(ЧтениеXML.Значение);
									КонецЕсли;
								КонецЦикла;
							ИначеЕсли ТипЭлемента = "Table" Тогда 
								ЗначениеЭлементаОтвета = Новый ТаблицаЗначений;
								Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = ИмяЭлементаОтвета И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
									Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Row" Тогда
										СтрокаТаблицы = ЗначениеЭлементаОтвета.Добавить();
										
										Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = "Row" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
											Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
												ИмяКолонки = ЧтениеXML.Имя;
												Если ЧтениеXML.ПервыйАтрибут() И ЧтениеXML.Имя = "Type" И ЧтениеXML.Значение = "Table" Тогда
													Если ЗначениеЭлементаОтвета.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
														ЗначениеЭлементаОтвета.Колонки.Добавить(ИмяКолонки);	
													КонецЕсли;
													ЗначениеЭлементаВложенияОтвета = Новый ТаблицаЗначений;
													Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = ИмяКолонки И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
														Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Row" Тогда
															СтрокаТаблицыВложения = ЗначениеЭлементаВложенияОтвета.Добавить();
															Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = "Row" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
																Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
																	ИмяКолонкиВложения = ЧтениеXML.Имя;
																	ЗначениеЯчейкиВложенияСохранено = Ложь;
																ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст ИЛИ ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
																	Если ЗначениеЭлементаВложенияОтвета.Колонки.Найти(ИмяКолонкиВложения) = Неопределено Тогда
																		ЗначениеЭлементаВложенияОтвета.Колонки.Добавить(ИмяКолонкиВложения);	
																	КонецЕсли;
																	Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
																		СтрокаТаблицыВложения[ИмяКолонкиВложения] = ЧтениеXML.Значение;
																		ЗначениеЯчейкиСохранено = Истина;
																	ИначеЕсли Не ЗначениеЯчейкиСохранено Тогда
																		СтрокаТаблицыВложения[ИмяКолонкиВложения] = "";
																	КонецЕсли
																КонецЕсли
															КонецЦикла;
														КонецЕсли;
													КонецЦикла;
													СтрокаТаблицы[ИмяКолонки] = ЗначениеЭлементаВложенияОтвета;
												Иначе
													ТипВложенногоЭлемента = "String";
													ЗначениеЯчейкиСохранено = Ложь;
												КонецЕсли;
											ИначеЕсли ТипВложенногоЭлемента = "String" И ЧтениеXML.ТипУзла = ТипУзлаXML.Текст ИЛИ ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
												Если ЗначениеЭлементаОтвета.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
													ЗначениеЭлементаОтвета.Колонки.Добавить(ИмяКолонки);	
												КонецЕсли;
												Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
													ЗначениеВложения  =   ЧтениеXML.Значение;
													СтрокаТаблицы[ИмяКолонки] = ЗначениеВложения;
													ЗначениеЯчейкиСохранено = Истина;
													
												ИначеЕсли Не ЗначениеЯчейкиСохранено Тогда
													СтрокаТаблицы[ИмяКолонки] = "";
												КонецЕсли
											КонецЕсли
										КонецЦикла;
									КонецЕсли;
								КонецЦикла
							ИначеЕсли ТипЭлемента = "String" Тогда
								ЗначениеЭлементаОтвета = "";
								Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = ИмяЭлементаОтвета И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
									Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
										ЗначениеЭлементаОтвета = ЧтениеXML.Значение;
									КонецЕсли;
								КонецЦикла
							КонецЕсли;
							ПараметрыОтвета.СтруктураОтвета.Вставить(ИмяЭлементаОтвета, ЗначениеЭлементаОтвета);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			Если КорневойЭлемент = "Error" Тогда
				Попытка
					ПараметрыОтвета.КодОтвета = Число(ПараметрыОтвета.СтруктураОтвета.Code);
				Исключение
					ПараметрыОтвета.КодОтвета = 400;
				КонецПопытки;
			ИначеЕсли НЕ (КорневойЭлемент = "Result" ИЛИ КорневойЭлемент = "Request") Тогда
				ПараметрыОтвета.КодОтвета = 400;
			КонецЕсли;
		Исключение
			ПараметрыОтвета.КодОтвета = 400;
		КонецПопытки;
		
	Иначе
		
		ПараметрыОтвета.КодОтвета = 400;
		
	КонецЕсли;
	
	Если ПараметрыОтвета.КодОтвета = 400 И Не ПараметрыОтвета.СтруктураОтвета.Свойство("Code") Тогда
		Если Не ПараметрыОтвета.СтруктураОтвета.Свойство("Code") Тогда
			ПараметрыОтвета.СтруктураОтвета.Вставить("Code", Строка("400"));
		КонецЕсли;
		Если НЕ (ПараметрыОтвета.СтруктураОтвета.Свойство("Description") И ПараметрыОтвета.СтруктураОтвета.Свойство("DebugInfo")) Тогда
			ПараметрыОтвета.СтруктураОтвета.Вставить("DebugInfo", "The server's response does not meet the standard of service");
			ПараметрыОтвета.СтруктураОтвета.Вставить("Description", "Ответ сервера не соответствует стандарту сервиса");
		КонецЕсли;
	КонецЕсли;
	
	Если КорневойЭлемент = "Request" Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета;
	Иначе
		Возврат ПараметрыОтвета;
	КонецЕсли;
	
КонецФункции

// функция преобразования масиива стуктур строк в таблицу значений
//
// параметры:
//  МассивСтуктурСтрок, тип "Массив", где каждый элемент - структура, ключи которой являются именами колонок таблицы 
//
// возвращаемое значение: таблица значений
//
Функция ПреобразоватьМассивСтуктурСтрокВТаблицуЗначений(МассивСтуктурСтрок) Экспорт
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	Для Каждого СтуктураСтроки Из МассивСтуктурСтрок Цикл
		НоваяСтрока = ТаблицаЗначений.Добавить();
		Для Каждого ЭлементСтруктуры Из СтуктураСтроки Цикл
			Если ТаблицаЗначений.Колонки.Найти(ЭлементСтруктуры.Ключ) = Неопределено Тогда
				ТаблицаЗначений.Колонки.Добавить(ЭлементСтруктуры.Ключ);
			КонецЕсли;
			НоваяСтрока[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
		КонецЦикла;		
	КонецЦикла;		
		
	Возврат ТаблицаЗначений;

КонецФункции

Функция СформироватьHTTPСервисОтвет(ТекстXML, КодОтвета = Неопределено, СтруктураТаймингов = Неопределено, ID) Экспорт 
	
	Если КодОтвета = 200 Тогда
		Причина = "";
	Иначе
		Причина = ТекстXML;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/xml");
	//Заголовки.Вставить("Timings", СформироватьTimings(СтруктураТаймингов));
	Заголовки.Вставить("ID", ID);

	Ответ = Новый HTTPСервисОтвет(КодОтвета, Причина, Заголовки);
	Ответ.УстановитьТелоИзСтроки(ТекстXML);

	Возврат Ответ;
	
КонецФункции

// Функция преобразования данных для xml
// Параметры:
// 	Значение - преобразовываемое значение 
// Возвращает преобразованные к нужному формату данные
//
Функция ПреобразоватьЗначение(Значение) Экспорт

	Если ТипЗнч(Значение) = Тип("Дата") Тогда
		ЗначениеXMLСтрока = ДатаВФорматеISO8601(Значение);
	Иначе
		ЗначениеXMLСтрока = XMLСтрока(Значение);
	КонецЕсли;
	Возврат ЗначениеXMLСтрока;
КонецФункции

// Функция преобразования даты в формат ISO8601
// Параметры:
// 	Дата, тип Дата 
// Возвращает значение даты даты в формат ISO8601
//
Функция ДатаВФорматеISO8601(Дата) Экспорт
	
	Если ТипЗнч(Дата) = Тип("Дата") Тогда
		СтрокаЧасовойПояс = XMLСтрока(Дата);
		СмещениеЧасы = СмещениеСтандартногоВремени(ЧасовойПояс(), УниверсальноеВремя(ТекущаяДата(), ЧасовойПояс())) / 3600;
		СтрокаЧасовойПояс = СтрокаЧасовойПояс + ?(СмещениеЧасы > 0, "+", "-");
		СмещениеЧасы = Макс(СмещениеЧасы,-СмещениеЧасы);
		////!!! костыль из-за неверной настройки ОС
		//ЭтоДев = Константы.DEV.Получить();
		//Если ЭтоДев Тогда	
		//	СмещениеЧасы = СмещениеЧасы - 1;
		//КонецЕсли;
		//// конец костыля
		СтрокаЧасовойПояс = СтрокаЧасовойПояс + ?(СмещениеЧасы < 10, "0" + СмещениеЧасы, СмещениеЧасы) + ":00";
		Возврат СтрокаЧасовойПояс;
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

// Функция формирования ответа на rest- запрос
// Параметры:
// 	СтруктураХML, тип Структура – структура для формирования тела ответа в формате xml
//	КодОтвета, тип число – код состояния ответа
// Возвращает значение типа HTTPСервисОтвет или текст XML (для формирования POST запросов)
//
Функция СформироватьXML(СтруктураХML, КодОтвета = Неопределено, КоличествоЭлементов = 0) Экспорт
		
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	Запись.ЗаписатьОбъявлениеXML();
	
	Если КодОтвета = Неопределено Тогда
		Запись.ЗаписатьНачалоЭлемента("Request");
	ИначеЕсли КодОтвета = 200 Тогда
		Запись.ЗаписатьНачалоЭлемента("Result");
	Иначе
		Запись.ЗаписатьНачалоЭлемента("Error");
	КонецЕсли;
	
	Для Каждого Элемент Из СтруктураХML Цикл
		Запись.ЗаписатьНачалоЭлемента(Элемент.Ключ);
		Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			Запись.ЗаписатьАтрибут("Type","List");
			Массив = Элемент.Значение;
			Для Каждого ЭлементМассива Из Массив Цикл
				Запись.ЗаписатьНачалоЭлемента("Item");
				КоличествоЭлементов = КоличествоЭлементов + 1;
				Запись.ЗаписатьТекст(ПреобразоватьЗначение(ЭлементМассива));
				Запись.ЗаписатьКонецЭлемента();
			КонецЦикла;
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") Тогда
			Запись.ЗаписатьАтрибут("Type","Table");
			ТаблицаЗначений = Элемент.Значение;
			Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
				Запись.ЗаписатьНачалоЭлемента("Row");
				Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
					ИмяКолонки = Колонка.Имя;
					ЗначениеЯчейки = СтрокаТаблицы[ИмяКолонки];
					Запись.ЗаписатьНачалоЭлемента(ИмяКолонки);
					КоличествоЭлементов = КоличествоЭлементов + 1;
					Запись.ЗаписатьТекст(ПреобразоватьЗначение(ЗначениеЯчейки));
					Запись.ЗаписатьКонецЭлемента();
				КонецЦикла;
				Запись.ЗаписатьКонецЭлемента();
			КонецЦикла;
		Иначе
			КоличествоЭлементов = КоличествоЭлементов + 1;
			Запись.ЗаписатьТекст(ПреобразоватьЗначение(Элемент.Значение));	
		КонецЕсли;
		Запись.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента();
	ТекстXML = Запись.Закрыть();
	
	Возврат ТекстXML;
	
КонецФункции

Функция ПостроитьDomДокумент(Текст) Экспорт
	
	Чтение = Новый ЧтениеXML();	
	Чтение.УстановитьСтроку(Текст);
	Построитель = Новый ПостроительDOM();	
	Документ = Построитель.Прочитать(Чтение);	
	Возврат Документ;
	
КонецФункции	

Функция ПреоброзоватьРезультат(Результат) Экспорт
	
	Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") Тогда 
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку();		
		Запись.ЗаписатьНачалоЭлемента("Result");		
		Запись.ЗаписатьНачалоЭлемента("Table");
		Запись.ЗаписатьАтрибут("Type", "Table");		
		Для Каждого Строка Из Результат Цикл 
			Запись.ЗаписатьНачалоЭлемента("Row");
			Для Каждого Колонка Из Результат.Колонки Цикл 
				Запись.ЗаписатьНачалоЭлемента(Колонка.Имя);
				Попытка					
					Запись.ЗаписатьТекст(XMLСтрока(Строка[Колонка.Имя]));				 
				Исключение
					Запись.ЗаписатьТекст(ОписаниеОшибки());				 	
				КонецПопытки;
				Запись.ЗаписатьКонецЭлемента();			
			КонецЦикла;				
			Запись.ЗаписатьКонецЭлемента();			
		КонецЦикла;	
		
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьКонецЭлемента();
		Возврат Запись.Закрыть();
	Иначе
		ПустойОтвет();
	КонецЕсли;	
		
КонецФункции	

Функция ВыполнитьКоманду(ТекстСкрипта) Экспорт
	
	result = Неопределено;		
	Выполнить(ТекстСкрипта);					
	Возврат result; 	
	
КонецФункции

Функция ВыполнитьЗапрос(Текст) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = Текст;
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции	

Функция Строка64ВСтроку(Знач Строка64) Экспорт  
	
	Строка64 = СокрЛП(Строка64);
	
	Если Лев(Строка64, 4) = "77u/" Тогда Строка64 = Сред(Строка64, 5); КонецЕсли;	 //Компенсация непонятного модификатора при стандартном преобразовании
	                    
	Массив64 = Новый Массив;
	Для Код = КодСимвола("A") По КодСимвола("Z") Цикл Массив64.Добавить(Символ(Код)); КонецЦикла;
	Для Код = КодСимвола("a") По КодСимвола("z") Цикл Массив64.Добавить(Символ(Код)); КонецЦикла;
	Для Код = КодСимвола("0") По КодСимвола("9") Цикл Массив64.Добавить(Символ(Код)); КонецЦикла;
	Массив64.Добавить("+");
	Массив64.Добавить("/");
	
	МассивВрем = Новый Массив;
	
	Строка64 = СтрЗаменить(СтрЗаменить(Строка64, Символ(13), ""), Символ(10), "");

	Количество4 = Цел(СтрДлина(Строка64) / 4);
	Рет = "";
	Загрушек = 0;
	Для Индекс4 = 0 По Количество4 - 1 Цикл
		Накопитель = 0;
		Для Индекс = 0 По 3 Цикл
			Символ = Сред(Строка64, Индекс4 * 4 + 1 + Индекс, 1);
			Если Символ = "=" Тогда 
				Загрушек = Загрушек + 1;
				Накопитель = Накопитель * 64; // Поднимаем разрядность
				Продолжить;
			КонецЕсли;
			
			ИндексЭлемента = Массив64.Найти(Символ);
			Накопитель = Накопитель * 64 + ИндексЭлемента;
		КонецЦикла;
		
		Для Индекс3 = - 2 По 0 Цикл
			Остаток = Накопитель % 256;
			Если МассивВрем.ВГраница() >= Индекс4 * 3 - Индекс3 Тогда
				МассивВрем[Индекс4 * 3 - Индекс3] = Остаток;
			Иначе
				МассивВрем.Вставить(Индекс4 * 3 - Индекс3, Остаток);
			КонецЕсли;
			Накопитель = (Накопитель - Остаток) / 256;
		КонецЦикла;
	КонецЦикла;
		
	КоличествоЭлементов = МассивВрем.Количество() - Загрушек;
	Индекс = 0;
	Пока Индекс < КоличествоЭлементов Цикл
		Если Индекс + 3 < КоличествоЭлементов И МассивВрем[Индекс] >= 240 И МассивВрем[Индекс + 1] >= 128 И МассивВрем[Индекс + 2] >= 128 И МассивВрем[Индекс + 3] >= 128 Тогда
			Рет = Рет + Символ(64 * 64 * 64 *(МассивВрем[Индекс] - 240) + 64 * 64 *(МассивВрем[Индекс + 1]) - 128 + 64 * (МассивВрем[Индекс + 2] - 128) + МассивВрем[Индекс + 3] - 128);
			Индекс = Индекс + 4;
			Продолжить;
		ИначеЕсли Индекс + 2 < КоличествоЭлементов И МассивВрем[Индекс] >= 224 И МассивВрем[Индекс + 1] >= 128 И МассивВрем[Индекс + 2] >= 128 Тогда
			Рет = Рет + Символ(64 * 64 * (МассивВрем[Индекс] - 224) + 64 * (МассивВрем[Индекс + 1] - 128) + МассивВрем[Индекс + 2] - 128);
			Индекс = Индекс + 3;
			Продолжить;
		ИначеЕсли Индекс + 1 < КоличествоЭлементов И МассивВрем[Индекс] >= 192 И МассивВрем[Индекс + 1] >= 128 Тогда
			Рет = Рет + Символ(64 * (МассивВрем[Индекс] - 192) + МассивВрем[Индекс + 1] - 128);
			Индекс = Индекс + 2;
			Продолжить;
		Иначе	
			Рет = Рет + Символ(МассивВрем[Индекс]);
			Индекс = Индекс + 1;
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	Рет = СтрЗаменить(Рет, Символы.ВК + Символы.ПС, Символы.ПС);
	Возврат Рет;                                                                                           
КонецФункции

Процедура ОбходДерева(Элемент, Рез, Level) Экспорт
	
	Level = Level + 1;	
	ПодчиненныйЭлемент = Элемент.Строки;
	Для каждого Строка из ПодчиненныйЭлемент Цикл
		
		Если Элемент.Name = Строка.Name Тогда 
			ОбходДерева(Строка, Рез, Level-1);	
		Иначе 	
		
			Если Рез.Колонки.Найти("Level" + Level) = Неопределено Тогда 
				Рез.Колонки.Добавить("Level" + Level); 	 
			КонецЕсли;		 
		
			НоваяСтрока = Рез.Добавить();
			НоваяСтрока["Level" + Level] = ?(Строка.Name = Неопределено или Строка.Name = Null, "", Строка.Name.Наименование);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);		
			ОбходДерева(Строка, Рез, Level);
		КонецЕсли;
		Level = Level - 1;	

	КонецЦикла
	
КонецПроцедуры

Функция ПолучитьОтвет() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Организации.Наименование
	               |ИЗ
	               |	Справочник.Организации КАК Организации";
	РезультатЗапроса = Запрос.Выполнить();			   
	
	хедер = "<div class='reportHead'>
                    |<div>
			        |<span class='glyphicon glyphicon-menu-hamburger'></span>
        		    |<b class='name'>Список организаций</b>
        			|<div class='dropdown' style='float: right;'>
            |<span class='glyphicon glyphicon-option-vertical' data-toggle='dropdown' style='cursor:pointer'></span>
            |<ul class='dropdown-menu dropdown-menu-right'>
            |    <li><a href='javascript:void(0);'>В KPI</a></li>
            |    <li><a href='javascript:void(0);'>Cообщить об ошибке</a></li>
            |    <li><a href='javascript:void(0);'>Отправить на почту</a></li>
            |</ul>
       		|</div>
    		|</div>";	
	Результат = "";
	Если РезультатЗапроса.Пустой() Тогда 
		Результат = хедер + "Список организаций пуст";
	Иначе 	
		
		табЧасть = "<table class='table table-striped ReportTable'>";		
		Выборка =  РезультатЗапроса.Выбрать();		
		Пока Выборка.Следующий() Цикл 
			табЧасть = табЧасть + "<tr><td>"+Выборка.Наименование+"</td><td>";			
		КонецЦикла;	
    	табЧасть = табЧасть + "</table>";				
		Результат = хедер + табЧасть; 
	КонецЕсли;	
	
	Возврат "<br><div class='bubble message'>
	| "+Результат+"
	|</div>"
	
КонецФункции	

Функция ПустойОтвет() Экспорт
	
	Запись = Новый ЗаписьXML();
	Запись.УстановитьСтроку();
	Запись.ЗаписатьНачалоЭлемента("Result");
	Запись.ЗаписатьКонецЭлемента();
	Возврат Запись.Закрыть();
	
КонецФункции	

// Функция формирования заголовка "Timings" с описанием содержимого ответа 
// Параметры:
// 	СтруктураТаймингов, тип Структура – структура для формирования строки заголовка
// Возвращает строку заголовка "Timings"
//
Функция СформироватьTimings(СтруктураТаймингов) Экспорт
	
	ЗначениеTimings = "";
	Если СтруктураТаймингов <> Неопределено Тогда
		Для Каждого Тайминг Из СтруктураТаймингов Цикл
			ЗначениеTimings = ЗначениеTimings + ?(ЗначениеTimings="", "", "&") + Тайминг.Ключ + ":" + ?(Формат(Тайминг.Значение, "ЧГ=0")="", 0,  Формат(Тайминг.Значение, "ЧГ=0"));
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЗначениеTimings;
	
КонецФункции
