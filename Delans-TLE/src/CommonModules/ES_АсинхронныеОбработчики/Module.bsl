
Функция АсинхронноеАвтораспределение(СтруктураПараметров, АдресВХранилище) Экспорт
	
	Машины = СтруктураПараметров.Машины;
	Дата = СтруктураПараметров.Дата;
	ДатаНаФорме = СтруктураПараметров.ДатаНаФорме;
	
	//Сообщить("Начало - " + ТекущаяДата());
	КолЗапросов = 0;
	Интервал = Константы.ES_ИнтервалВыбораЗаявок.Получить();
	
	ТЗЗаявкиВПланах = Новый ТаблицаЗначений;   
	ТЗЗаявкиВПланах.Колонки.Добавить("Заявка");
	
	ТаблРаспредЗаявок = Новый ТаблицаЗначений;
	ТаблРаспредЗаявок.Колонки.Добавить("Заявка");
	
	ПоследняяМашина = Неопределено;
	
	Машины.Сортировать("ВремяРаботыС Возр, ВремяРаботыПо Убыв");
	
	а = 1;
	
	
	//последовательно перебираем и заполняем каждую машину
	Для Каждого СтрокаМашина Из Машины Цикл
		Процент =  а/Машины.Количество()*100;
		Текст = ""+СтрокаМашина.Машина;
		// Регистрация сообщения для чтения из клиентского сеанса.
		ДлительныеОперации.СообщитьПрогресс(Процент, Текст); 
		
		ТаблРаспредЗаявокТест = Новый ТаблицаЗначений;
		ТаблРаспредЗаявокТест.Колонки.Добавить("Заявка");
		
		Если Не СтрокаМашина.Отметка Тогда
			Продолжить;
		КонецЕсли;
		
		ВремяПодачиНачало = СтрокаМашина.ВремяРаботыС;
		ВремяПодачиКонец = ВремяПодачиНачало + Интервал;
			
		Выполнять = Истина;
		
		//ВремяПодачи
		МассивКонечныхУзлов = Новый Массив;
		НовыйМассивКонечныхУзлов = Новый Массив;
		
		//создаем узел (наименьшую сущность бинарного дерева)
		//ДанныеУзла = Новый Структура;
		
		ДанныеУзла = Новый Структура("Заявка, ТекАдресДолгота, ТекАдресШирота, ХолостоеРасстояниеОтПредУзла, ВремяФиниш", 
										Неопределено, ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.АдресСкладаДолгота), ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.АдресСкладаШирота), 0, ВремяПодачиНачало);
		
		Узел = Новый Структура("Левый, Правый, Данные, Родитель, ЭтоКонечныйУзел, ДобавитьКИнтервалу,КоличествоВложений,ХолостойПуть", Неопределено, Неопределено, ДанныеУзла, Неопределено, Истина, 0,0,0); // ссылка на лев. узел; ссылка на прав. узел; даннные; родительский узел; признак, что узел конечный(к нему можно прикрепить узел)
		НовыйМассивКонечныхУзлов.Добавить(Узел);
		
		БинарноеДерево = Узел;
		ОбновлятьЗапрос = Истина;
		КолИнтерваловСПустымиЗаявками = 0;
		
		мТаблРаспредЗаявок = Новый ТаблицаЗначений;
		мТаблРаспредЗаявок.Колонки.Добавить("Заявка");
		
		Пока Выполнять Цикл
			ПоследняяМашина = СтрокаМашина.Машина;
			//EFSOL Шаповал ОПТИМИЗАЦИЯ
			//нужно вынести запрос из цикла
			Если ОбновлятьЗапрос Тогда
				
				Запрос = Новый Запрос;
				МВТ = Новый МенеджерВременныхТаблиц;
				Запрос.МенеджерВременныхТаблиц = МВТ;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗаказПокупателя.Ссылка КАК Заявка,
				|	ЗаказПокупателя.ES_ВремяДоставкиС КАК ES_ВремяПодачи,
				|	ЗаказПокупателя.ES_ВремяДоставкиПо КАК ES_ВремяПо
				|ПОМЕСТИТЬ ВТ_ВсеЗаявки
				|ИЗ
				|	РегистрСведений.ES_СтатусыЗаказов.СрезПоследних(, ) КАК ES_СтатусыЗаказовСрезПоследних
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
				|		ПО ES_СтатусыЗаказовСрезПоследних.Заказ = ЗаказПокупателя.Ссылка
				|ГДЕ
				|	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_СтатусыЗаказов.Подготовлен)
				//|	И ЗаказПокупателя.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
				|	И ЗаказПокупателя.ES_ДатаДоставки МЕЖДУ &ДатаНачала И &ДатаОкончания
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ES_ЗаборГруза.Ссылка,
				|	ES_ЗаборГруза.ВремяЗабораС,
				|	ES_ЗаборГруза.ВремяЗабораПо
				|ИЗ
				|	РегистрСведений.ES_СтатусыЗаборов.СрезПоследних КАК ES_СтатусыЗаборовСрезПоследних
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ES_ЗаборГруза КАК ES_ЗаборГруза
				|		ПО ES_СтатусыЗаборовСрезПоследних.Регистратор = ES_ЗаборГруза.Ссылка
				|			И ES_СтатусыЗаборовСрезПоследних.Забор = ES_ЗаборГруза.Ссылка
				|ГДЕ
				|	ES_СтатусыЗаборовСрезПоследних.СтатусЗабора = ЗНАЧЕНИЕ(Перечисление.ES_СтатусыЗаборов.ВРаботе)
				//|	И ES_ЗаборГруза.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
				|	И ES_ЗаборГруза.ДатаЗабора МЕЖДУ &ДатаНачала И &ДатаОкончания
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_ВсеЗаявки.Заявка КАК Заявка,
				|	ВТ_ВсеЗаявки.ES_ВремяПодачи КАК ES_ВремяПодачи,
				|	ВТ_ВсеЗаявки.ES_ВремяПо КАК ES_ВремяПо
				|ПОМЕСТИТЬ ВТ_Итог
				|ИЗ
				|	ВТ_ВсеЗаявки КАК ВТ_ВсеЗаявки";
				Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Дата));
				Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаНаФорме));
				
				Запрос.Выполнить();
								
			КонецЕсли;
			
			МассивКонечныхУзлов = СкопироватьМассив(НовыйМассивКонечныхУзлов);
			
			
			ТаблРаспредЗаявок = Новый ТаблицаЗначений;
			ТаблРаспредЗаявок.Колонки.Добавить("Заявка");
			
			Для каждого ЭлементМассива Из МассивКонечныхУзлов Цикл
				
				
				Если Не ЭлементМассива.ЭтоКонечныйУзел Тогда
					Продолжить;
				КонецЕсли;
				
				ВремяПодачиНачало = ЭлементМассива.Данные.ВремяФиниш + (Интервал*ЭлементМассива.ДобавитьКИнтервалу);
				ВремяПодачиКонец = ВремяПодачиНачало + Интервал;
				
				Если ВремяПодачиКонец > СтрокаМашина.ВремяРаботыПо Тогда
				//	//ПрикрепитьЗаявку = Ложь;
				//	ЭлементМассива.ДобавитьКИнтервалу = ЭлементМассива.ДобавитьКИнтервалу + 1;
					Продолжить;
				КонецЕсли;
				
				Если Не ЭлементМассива.Левый = Неопределено Тогда
					НоваяСтрока = ТаблРаспредЗаявок.Добавить();
					НоваяСтрока.Заявка = ЭлементМассива.Левый.Данные.Заявка;
				КонецЕсли;
				
				РасстояниеКМДляРадиуса = 0;
				
				//~НачалоЦикла:
				
				мТЗПакетЗаявок = ПолучитьПакетЗаявокДерево(ВремяПодачиНачало, ВремяПодачиКонец, мТаблРаспредЗаявок, ТЗЗаявкиВПланах, СтрокаМашина.Машина, Запрос);
				
				//дописка оптимизации. Попробуем выбрать заявки только те которые входят в зону Н километров
				Если мТЗПакетЗаявок.Количество() = 0 Тогда
					ЭлементМассива.ДобавитьКИнтервалу = ЭлементМассива.ДобавитьКИнтервалу + 1;
					
					ОбновлятьЗапрос = Ложь;
					Продолжить;
				КонецЕсли;
				
				ТЗПолигон = ES_ОбщегоНазначенияКлиентСервер.ПолучитьТаблицуТочекПолигонаПоРадиусу(Новый Структура("Долгота, Широта", ЭлементМассива.Данные.ТекАдресДолгота, ЭлементМассива.Данные.ТекАдресШирота), РасстояниеКМДляРадиуса);
				ТЗТочек = ES_ОбщегоНазначенияКлиентСервер.ПолучитьТаблицуТочекДляПроверки(мТЗПакетЗаявок);
				
				мТЗПакетЗаявок = ES_ОбщегоНазначенияКлиентСервер.ПроверитьТочкиЗапросом(ТЗПолигон, ТЗТочек);
				
				ТЗУпорядоченныеЗаявки = УпорядочитьЗаявкиПоБлизостиКМашинеДерево(ЭлементМассива, мТЗПакетЗаявок, РасстояниеКМДляРадиуса);
				
				ЭтоЛевый = Истина;
				СчетчикУзлов = 0;
				ПрикрепитьЗаявку = Ложь;
				
				
				Для каждого СтрокаТЗ Из ТЗУпорядоченныеЗаявки Цикл
					
					
					//ПрикрепитьЗаявку = Истина;
					
					Если Не ЭлементМассива.Левый = Неопределено Тогда
						//ПрикрепитьЗаявку = Ложь;
						ЭлементМассива.ДобавитьКИнтервалу = ЭлементМассива.ДобавитьКИнтервалу + 1;
						Прервать;
					КонецЕсли;
					
					ПрикрепитьЗаявку = ПрикрепитьЗаявкуКМашинеДерево(СтрокаТЗ,МассивКонечныхУзлов);
					
					Если ПрикрепитьЗаявку Тогда
						НоваяСтрока = ТаблРаспредЗаявок.Добавить();
						НоваяСтрока.Заявка = СтрокаТЗ.Заявка;
												
						ВремяВыполненияЗаявки = ПолучитьВремяВыполненияЗаявкиДерево(СтрокаТЗ.Заявка);
						
						СозданныйУзел = СоздатьПрикрепитьУзел(БинарноеДерево, ВремяВыполненияЗаявки, СтрокаТЗ.Заявка, СтрокаТЗ.Расстояние, ЭлементМассива, ЭтоЛевый, СчетчикУзлов, НовыйМассивКонечныхУзлов);
						ЭтоЛевый = Ложь;
						ОбновлятьЗапрос = Истина;
						
						
						Если СчетчикУзлов >= 1 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
				Если СчетчикУзлов < 1 Тогда
					ЭлементМассива.ДобавитьКИнтервалу = ЭлементМассива.ДобавитьКИнтервалу + 1;
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого СТ_Строка Из ТаблРаспредЗаявок Цикл				
				мСТ_Строка = мТаблРаспредЗаявок.Найти(СТ_Строка.Заявка,"Заявка");
				Если мСТ_Строка = Неопределено Тогда
					НоваяСтрока = мТаблРаспредЗаявок.Добавить();
					НоваяСтрока.Заявка = СТ_Строка.Заявка;
				КонецЕсли;	
			КонецЦикла;
			
			Если ЗначениеЗаполнено(СтрокаМашина.ВремяРаботыПо) Тогда
				Если ВремяПодачиКонец > СтрокаМашина.ВремяРаботыПо Тогда
					Выполнять = Ложь;
				КонецЕсли;
			Иначе
				Если ВремяПодачиКонец > '00010101235959' Тогда
					Выполнять = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		МассивКонечныхУзлов = СкопироватьМассив(НовыйМассивКонечныхУзлов);
		
		ТЗДанныеПоМаршрутам = Новый ТаблицаЗначений;
		ТЗДанныеПоМаршрутам.Колонки.Добавить("МассивСтруктурЗаявок");
		ТЗДанныеПоМаршрутам.Колонки.Добавить("ХолостойПуть");
		ТЗДанныеПоМаршрутам.Колонки.Добавить("КоличествоЗаявок");
		ТЗДанныеПоМаршрутам.Колонки.Добавить("РасстояниеКДому");
		ТЗДанныеПоМаршрутам.Колонки.Добавить("ОбщийХолостойПуть");
		
		Для Каждого КонечныйУзел Из МассивКонечныхУзлов Цикл
			Если КонечныйУзел.Родитель = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Родитель = КонечныйУзел.Родитель;
			ХолостойПутьКм = КонечныйУзел.Данные.ХолостоеРасстояниеОтПредУзла;
			КоличествоЗаявокНаМаршруте = 1;
			
			МассивСтруктурЗаявок = Новый Массив;
			Если ТипЗнч(КонечныйУзел.Данные.Заявка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				ES_ВремяПодачи = КонечныйУзел.Данные.Заявка.ES_ВремяДоставкиС;
			Иначе
				ES_ВремяПодачи = КонечныйУзел.Данные.Заявка.ВремяЗабораС;
			КонецЕсли;
			СтруктураЗаявка = Новый Структура("Заявка, ВремяСтарт, ВремяФиниш", КонечныйУзел.Данные.Заявка, ES_ВремяПодачи, КонечныйУзел.Данные.ВремяФиниш);
			МассивСтруктурЗаявок.Добавить(СтруктураЗаявка);
			
			СтартСтруктура = Новый Структура("Долгота, Широта", КонечныйУзел.Данные.ТекАдресДолгота, КонечныйУзел.Данные.ТекАдресШирота);
			Если ТипЗнч(КонечныйУзел.Данные.Заявка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				ФинишСтруктура = Новый Структура("Долгота,Широта", КонечныйУзел.Данные.Заявка.ES_АдресДоставкиДолгота, КонечныйУзел.Данные.Заявка.ES_АдресДоставкиШирота);
			Иначе
				ФинишСтруктура = Новый Структура("Долгота,Широта",КонечныйУзел.Данные.Заявка.АдресДолгота, КонечныйУзел.Данные.Заявка.АдресШирота);
			КонецЕсли;
			РасстояниеКДому = ПолучитьВремяМаршрута(СтартСтруктура, ФинишСтруктура, КонечныйУзел.Данные.ВремяФиниш).Расстояние;
			
			Пока Не Родитель.Родитель = Неопределено Цикл
				СтруктураЗаявка = Новый Структура("Заявка, ВремяСтарт, ВремяФиниш", Родитель.Данные.Заявка, ES_ВремяПодачи, Родитель.Данные.ВремяФиниш);
				
				МассивСтруктурЗаявок.Добавить(СтруктураЗаявка);
				КоличествоЗаявокНаМаршруте = КоличествоЗаявокНаМаршруте + 1;
				ХолостойПутьКм = ХолостойПутьКм + Родитель.Данные.ХолостоеРасстояниеОтПредУзла;
				Родитель = Родитель.Родитель;
			КонецЦикла;
			
			НоваяСтрока = ТЗДанныеПоМаршрутам.Добавить();
			НоваяСтрока.МассивСтруктурЗаявок = МассивСтруктурЗаявок;
			НоваяСтрока.ХолостойПуть = ХолостойПутьКм;
			НоваяСтрока.КоличествоЗаявок = КоличествоЗаявокНаМаршруте;
			НоваяСтрока.РасстояниеКДому = РасстояниеКДому;
			НоваяСтрока.ОбщийХолостойПуть = РасстояниеКДому + ХолостойПутьКм;
			
		КонецЦикла;
		ТЗДанныеПоМаршрутам.Сортировать("РасстояниеКДому Возр, КоличествоЗаявок Убыв");
		
		НапечататьВсеВозможныеМаршруты(ТЗДанныеПоМаршрутам, СтрокаМашина.Машина);
		
		Если Не ТЗДанныеПоМаршрутам.Количество() = 0 Тогда
			СамыйОптимальныйМаршрут = ТЗДанныеПоМаршрутам[0];
			
			//Создаем планы доставки по распределенным заявкам
			
			СоздатьПланДоставкиПоОтработаннымЗаявкамДерево(ТЗДанныеПоМаршрутам[0].МассивСтруктурЗаявок, СтрокаМашина.Машина, ДатаНаФорме);
			
			Для Каждого Элем Из ТЗДанныеПоМаршрутам[0].МассивСтруктурЗаявок Цикл
				НоваяСтрока = ТЗЗаявкиВПланах.Добавить();
				НоваяСтрока.Заявка = Элем.Заявка;
			КонецЦикла
			
		КонецЕсли;
		
	КонецЦикла;
		
	//СообщитьИнформациюПоЗаявкам(Дата);	
	
	//Сообщить("Конец - " + ТекущаяДата());
	
	Возврат ПоследняяМашина;
	
КонецФункции

Функция СформироватьСтрокуВремяДоставки(ВремяСтарт, ВремяФиниш)
	
	НовоеВремяСтарт = Сред(Строка(ВремяСтарт), 12, 5);
	НовоеВремяФиниш = Сред(Строка(ВремяФиниш), 12, 5);
	
	СтрокаВремяДоставки = НовоеВремяСтарт + " - " + НовоеВремяФиниш;
	
	Возврат СтрокаВремяДоставки;
	
КонецФункции

Процедура НапечататьВсеВозможныеМаршруты(ТЗДанныеПоМаршрутам, мМашина)
	
	ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьОбщийМакет("ES_МакетВыгрузкиМаршрутов");
	
	ОбластьМашина = макет.ПолучитьОбласть("ОбластьМашина");
	ОбластьМашина.Параметры.Машина = мМашина;
	ОбластьМашина.Параметры.АдресВодителя = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.АдресСклада);
	ТабДок.Вывести(ОбластьМашина);
	
	ОбластьМаршрут = Макет.ПолучитьОбласть("ОбластьМаршрут");
	ОбластьЗаявки = Макет.ПолучитьОбласть("ОбластьЗаявки");
	
	Итератор = 1;
	
	Для Каждого Элем Из ТЗДанныеПоМаршрутам Цикл
		
		ОбластьМаршрут.Параметры.Заполнить(Элем);
		ОбластьМаршрут.Параметры.Итератор = Итератор;
		ТабДок.Вывести(ОбластьМаршрут);
		
		КолЭлем = Элем.МассивСтруктурЗаявок.Количество();
		
		Для Индекс=1 По КолЭлем Цикл
			СтрокаЗаявок = Элем.МассивСтруктурЗаявок[КолЭлем-Индекс];
			
			Областьзаявки.Параметры.Заполнить(СтрокаЗаявок);
			
			//ОбластьЗаявки.Параметры.АдресОтпр = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.АдресСклада);
			Если ТипЗнч(СтрокаЗаявок.Заявка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				ОбластьЗаявки.Параметры.АдресОтпр = СтрокаЗаявок.Заявка.ES_АдресДоставки;
				ОбластьЗаявки.Параметры.АдресПриб = СтрокаЗаявок.Заявка.ES_АдресДоставки;
			Иначе
				ОбластьЗаявки.Параметры.АдресОтпр = СтрокаЗаявок.Заявка.Адрес; 
				ОбластьЗаявки.Параметры.АдресПриб = СтрокаЗаявок.Заявка.Адрес;
			КонецЕсли;
			ТабДок.Вывести(ОбластьЗаявки);
		КонецЦикла;
		Итератор = Итератор + 1;
	КонецЦикла;
	ИмяВремФайла = ПолучитьИмяВременногоФайла(".xls");
	
	ТабДок.Записать(ИмяВремФайла, ТипФайлаТабличногоДокумента.XLS);
	Сообщить(ИмяВремФайла);
	
КонецПроцедуры

Процедура СообщитьИнформациюПоЗаявкам(Дата)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(РаспределенныеЗаказы.КоличествоРаспределенных, 0) КАК КоличествоРаспределенных,
	|	ЕСТЬNULL(НераспределенныеЗаказы.КоличествоНераспределенных, 0) КАК КоличествоНераспределенных,
	|	""ВСЕГО"" КАК Всего,
	|	ВЫРАЗИТЬ(СредняяСтоимость.СтоимостьСредняя КАК ЧИСЛО(15, 2)) КАК СтоимостьСредняя,
	|	СредняяСтоимость.Контрагент КАК Контрагент
	|ИЗ
	|	(ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ES_СтатусыЗаказов.Заказ) КАК КоличествоНераспределенных,
	|		ES_СтатусыЗаказов.Заказ.Контрагент КАК Контрагент
	|	ИЗ
	|		РегистрСведений.ES_СтатусыЗаказов КАК ES_СтатусыЗаказов
	|	ГДЕ
	|		КОНЕЦПЕРИОДА(ES_СтатусыЗаказов.Заказ.ES_ДатаДоставки, ДЕНЬ) МЕЖДУ &ДатаНач И &ДатаКон
	|		И ES_СтатусыЗаказов.СтатусЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_СтатусыЗаказов.Подготовлен)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ES_СтатусыЗаказов.Заказ.Контрагент) КАК НераспределенныеЗаказы,
	|	(ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ES_СтатусыЗаказов.Заказ) КАК КоличествоРаспределенных,
	|		ES_СтатусыЗаказов.Заказ.Контрагент КАК Контрагент
	|	ИЗ
	|		РегистрСведений.ES_СтатусыЗаказов КАК ES_СтатусыЗаказов
	|	ГДЕ
	|		КОНЕЦПЕРИОДА(ES_СтатусыЗаказов.Заказ.ES_ДатаДоставки, ДЕНЬ) МЕЖДУ &ДатаНач И &ДатаКон
	|		И ES_СтатусыЗаказов.СтатусЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_СтатусыЗаказов.Назначен)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ES_СтатусыЗаказов.Заказ.Контрагент) КАК РаспределенныеЗаказы,
	|	(ВЫБРАТЬ
	|		ЗаказПокупателя.Контрагент КАК Контрагент,
	|		СУММА(ЗаказПокупателя.ES_НППлан) / КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПокупателя.Ссылка) КАК СтоимостьСредняя
	|	ИЗ
	|		Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних КАК СтатусыЗаказов
	|			ПО ЗаказПокупателя.Ссылка = СтатусыЗаказов.Заказ
	|	ГДЕ
	|		КОНЕЦПЕРИОДА(ЗаказПокупателя.ES_ДатаДоставки, ДЕНЬ) МЕЖДУ &ДатаНач И &ДатаКон
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПокупателя.Контрагент) КАК СредняяСтоимость
	|ИТОГИ
	|	СУММА(КоличествоРаспределенных),
	|	СУММА(КоличествоНераспределенных),
	|	СРЕДНЕЕ(СтоимостьСредняя)
	|ПО
	|	Всего";
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Дата));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Дата));
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		Сообщить("Всего: распределено/не распределено - " + Выборка.КоличествоРаспределенных + "/"+ Выборка.КоличествоНераспределенных + ", средняя стоимость - " + Окр(Выборка.СтоимостьСредняя, 2) + " руб.");
		ВыборкаДетальная = Выборка.Выбрать();
		Пока ВыборкаДетальная.Следующий() Цикл
			Сообщить("" + ВыборкаДетальная.Контрагент + " - " + ВыборкаДетальная.КоличествоРаспределенных + "/"+ ВыборкаДетальная.КоличествоНераспределенных + ", средняя стоимость - " + ВыборкаДетальная.СтоимостьСредняя + " руб.");
		КонецЦикла;
	КонецЦикла;
	
	
КонецПроцедуры

Функция СкопироватьМассив(Массив)
	МассивКопия = Новый Массив;
	
	//оптимизация маршрута
	
	КолМаршрутов = 20;
	
	мТЗ = Новый ТаблицаЗначений;
	мТЗ.Колонки.Добавить("Маршрут");
	мТЗ.Колонки.Добавить("КолЗаказов");
	мТЗ.Колонки.Добавить("ХолостойПуть");
	Если Массив.Количество() > КолМаршрутов Тогда
		
		Для каждого Элемент Из Массив Цикл
			
			СтрокаТаблици = мТЗ.Добавить();
			СтрокаТаблици.Маршрут = Элемент;
			СтрокаТаблици.КолЗаказов = Элемент.КоличествоВложений;
			СтрокаТаблици.ХолостойПуть = Элемент.ХолостойПуть;
						
		КонецЦикла;
		
		мТз.Сортировать("ХолостойПуть Возр,КолЗаказов Убыв");
		
		//изменение
		КолМаршрутовОстаток = 20;
		
		Для Каждого СТ_Таб Из мТЗ Цикл
			
			МассивКопия.Добавить(СТ_Таб.Маршрут);
			
			Если МассивКопия.Количество() >= КолМаршрутовОстаток Тогда
				Прервать;
			КонецЕсли;
						
		КонецЦикла;
		
	Иначе
		Для Каждого Элем Из Массив Цикл
			МассивКопия.Добавить(Элем);
		КонецЦикла;
	КонецЕсли;
	
	//оставляем всего N маршрутов
	Возврат МассивКопия;
		
КонецФункции

Функция ДобавитьКИнтервалу(Узел)
	
	ДобавитьКИнтервалу = 0;
	
	Пока НЕ Узел.Левый = Неопределено Цикл
		ДобавитьКИнтервалу = ДобавитьКИнтервалу + 1;	
	КонецЦикла;
		
	Возврат ДобавитьКИнтервалу;
	
КонецФункции

Функция СоздатьПрикрепитьУзел(БинарноеДерево, ВремяВыполненияЗаявки, Заявка, ХолостоеРасстояние, Родитель, ЭтоЛевый, СчетчикУзлов, МассивКонечныхУзлов)
	
	Если ТипЗнч(Заявка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ТекАдресДолгота = Заявка.ES_АдресДоставкиДолгота;
		ТекАдресШирота = Заявка.ES_АдресДоставкиШирота;
		
	Иначе
		ТекАдресДолгота = Заявка.АдресДолгота;
		ТекАдресШирота = Заявка.АдресШирота;
	КонецЕсли;
	
	ДанныеУзла = Новый Структура("Заявка, ТекАдресДолгота, ТекАдресШирота, ХолостоеРасстояниеОтПредУзла, ВремяФиниш", 
										Заявка, ТекАдресДолгота, ТекАдресШирота, ХолостоеРасстояние, ВремяВыполненияЗаявки);
	Узел = Новый Структура("Левый, Правый, Данные, Родитель, ЭтоКонечныйУзел, ДобавитьКИнтервалу,КоличествоВложений,ХолостойПуть", Неопределено, Неопределено, ДанныеУзла, Родитель, Истина, 0,0,0);
	МассивКонечныхУзлов.Добавить(Узел);
	
	Если ЭтоЛевый И Родитель.Левый = Неопределено Тогда
		Родитель.Левый = Узел;
		СчетчикУзлов = 1;
	ИначеЕсли Родитель.Правый = Неопределено Тогда
		Родитель.Правый = Узел;
		Родитель.ЭтоКонечныйУзел = Ложь;
		
		// удаление элемента из массива конечных узлов, это значит, что в данного узла заполнены оба дочерных элемента (правый и левый)
		ИндексЭлемента = МассивКонечныхУзлов.Найти(Родитель);
		Если НЕ ИндексЭлемента = Неопределено Тогда
			МассивКонечныхУзлов.Удалить(ИндексЭлемента);	
		КонецЕсли;
		СчетчикУзлов = 2;
	КонецЕсли;
	
	Узел.КоличествоВложений = Родитель.КоличествоВложений+1;
	Узел.ХолостойПуть 		= Родитель.Данные.ХолостоеРасстояниеОтПредУзла + ХолостоеРасстояние;
	
	Возврат Узел;
	
	
КонецФункции

// СтрокаТЗ - строка таб.значений ТЗУпорядоченныеЗаявки
//
Функция ПрикрепитьЗаявкуКМашинеДерево(СтрокаТЗ, МассивКонечныхУзлов)
	
	//можно добавить + 5 мин. 
	//интервал на опоздание, по курить, привязать коня/кобылу
	Пятиминутка = 0;
	
	//Для каждого ЭлементМассива Из МассивКонечныхУзлов Цикл
	//	Если СтрокаТЗ.Заявка = ЭлементМассива.Данные.Заявка Тогда
	//		//СтрокаТЗ.Удалить();
	//		Возврат Ложь;
	//	КонецЕсли;
	//КонецЦикла;
	
	
	
	Если ТипЗнч(СтрокаТЗ.Заявка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ВремяС = СтрокаТЗ.Заявка.ES_ВремяДоставкиС;
		ВремяПо = СтрокаТЗ.Заявка.ES_ВремяДоставкиПо + 300;
	Иначе
		ВремяС = СтрокаТЗ.Заявка.ВремяЗабораС;
		ВремяПо = СтрокаТЗ.Заявка.ВремяЗабораПо + 300;
	КонецЕсли;
	
	Если СтрокаТЗ.ВремяПрибытия > ВремяС Тогда
		// Проверим, если клиент подождет N мин., что допустимо, тогда машина успеет?
		//ВремяВозможногоОпозданияМашини = Константы.ES_ВремяВозможноеДляЗадержкиТакси.Получить();
		
		Если СтрокаТЗ.ВремяПрибытия > ВремяПо + 600 Тогда //ВремяС + ВремяПо
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;
		
	
КонецФункции

Функция ПолучитьВремяВыполненияЗаявкиДерево(Заявка)
	
	Если ТипЗнч(Заявка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		//ВремяПрибытияИзменить
			ВремяС = Заявка.ES_ВремяДоставкиС;
			//ВремяС = Заявка.ES_ВремяДоставкиПо;
		Иначе
			ВремяС = Заявка.ВремяЗабораС;    
		КонецЕсли;
	
	//Если Заявка.ES_ВремяНаРазгрузку<> неопределено и ЗначениеЗаполнено(Заявка.ES_ВремяНаРазгрузку) Тогда
		////из реестра время перенеслось в минутах, по этому переводим в секунды
		//Возврат ВремяС + Заявка.ES_ВремяНаРазгрузку * 60;
	//Иначе
		Возврат ВремяС + Константы.ES_ВремяВыполненияЗаказа.Получить();
	//КонецЕсли;
		
КонецФункции

Функция УпорядочитьЗаявкиПоБлизостиКМашинеДерево(Узел,ТЗПакетЗаявок, РасстояниеКМДляРадиуса)
	
	ИнтервалОграничения = Константы.ES_ОграничениеПоРасстоянию.Получить() + РасстояниеКМДляРадиуса;
	
	ТЗУпорядоченныеЗаявки = Новый ТаблицаЗначений;
	ТЗУпорядоченныеЗаявки.Колонки.Добавить("Заявка");
	ТЗУпорядоченныеЗаявки.Колонки.Добавить("Расстояние");
	ТЗУпорядоченныеЗаявки.Колонки.Добавить("ВремяФинишТочкиА");
	ТЗУпорядоченныеЗаявки.Колонки.Добавить("ВремяДоездаТочкиБ");
	ТЗУпорядоченныеЗаявки.Колонки.Добавить("ВремяПрибытия");
	ТЗУпорядоченныеЗаявки.Колонки.Добавить("ВремяПодачи");
	ТЗУпорядоченныеЗаявки.Колонки.Добавить("АдресДоставки");
	
	Для каждого СтрокаТЗ Из ТЗПакетЗаявок Цикл
		СтартСтруктура = Новый Структура("Долгота, Широта", Узел.Данные.ТекАдресДолгота, Узел.Данные.ТекАдресШирота);
		Если ТипЗнч(СтрокаТЗ.Заявка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ФинишСтруктура = Новый Структура("Долгота, Широта", СтрокаТЗ.Заявка.ES_АдресДоставкиДолгота, СтрокаТЗ.Заявка.ES_АдресДоставкиШирота);
		Иначе
			ФинишСтруктура = Новый Структура("Долгота, Широта", СтрокаТЗ.Заявка.АдресДолгота, СтрокаТЗ.Заявка.АдресШирота);
		КонецЕсли;
		
		СтруктураВремяРасстояние = ПолучитьВремяМаршрута(СтартСтруктура, ФинишСтруктура, Узел.Данные.ВремяФиниш);
		РасстояниеМашинаЗаявка = СтруктураВремяРасстояние.Расстояние;
		//добавим время выполнения заявки для заказа на доставку
		//Если ТипЗнч(СтрокаТЗ.Заявка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			//ВремяДоездаМашинаЗаявкаВСек = СтрокаТЗ.Заявка.ES_ВремяНаРазгрузку;
		//Иначе
			ВремяДоездаМашинаЗаявкаВСек = СтруктураВремяРасстояние.Время;
		//КонецЕсли;
		ВремяДоездаМашинаЗаявка = Узел.Данные.ВремяФиниш + ВремяДоездаМашинаЗаявкаВСек;
		
		Если РасстояниеМашинаЗаявка <= ИнтервалОграничения Тогда
			
			НоваяСтрока 					= ТЗУпорядоченныеЗаявки.Добавить();
			НоваяСтрока.Заявка 				= СтрокаТЗ.Заявка;
			НоваяСтрока.Расстояние 			= РасстояниеМашинаЗаявка;
			НоваяСтрока.ВремяПрибытия 		= ВремяДоездаМашинаЗаявка;
			
			Если ТипЗнч(СтрокаТЗ.Заявка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				НоваяСтрока.ВремяПодачи 		= СтрокаТЗ.Заявка.ES_ВремяДоставкиС;
				НоваяСтрока.АдресДоставки 		= СтрокаТЗ.Заявка.ES_АдресДоставки;
			Иначе
				НоваяСтрока.ВремяПодачи 		= СтрокаТЗ.Заявка.ВремяЗабораС;
				НоваяСтрока.АдресДоставки		= СтрокаТЗ.Заявка.Адрес
			КонецЕсли;
			НоваяСтрока.ВремяФинишТочкиА 	= Узел.Данные.ВремяФиниш;
			НоваяСтрока.ВремяДоездаТочкиБ 	= СтруктураВремяРасстояние.Время;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТЗУпорядоченныеЗаявки.Сортировать("ВремяПодачи, Расстояние");
	
	Возврат ТЗУпорядоченныеЗаявки;
	
	
	
КонецФункции

Функция ПолучитьПакетЗаявокДерево(ВремяПодачиНачало, ВремяПодачиКонец, ТаблицаРаспределенныхЗаявок, ТЗЗаявкиВПланах, Машина,Запрос)
	
	ТЗЗаявкиИзТаблицыРаспределенныхЗаявок = ТаблицаРаспределенныхЗаявок.Скопировать(, "Заявка");
	мТЗЗаявкиВПланах = ТЗЗаявкиВПланах.Скопировать(,"Заявка");
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВТ_Итог.Заявка
	|ИЗ
	|	ВТ_Итог КАК ВТ_Итог
	|ГДЕ
	//|	"+Шаблон+ШаблонКресло+"
	//ВремяПрибытияИзменить
	|	(ВТ_Итог.ES_ВремяПодачи МЕЖДУ &ВремяПодачиНачало И &ВремяПодачиКонец ИЛИ
	|	ВТ_Итог.ES_ВремяПо МЕЖДУ &ВремяПодачиНачало И &ВремяПодачиКонец) И
	|	НЕ ВТ_Итог.Заявка В (&ТЗЗаявкиИзТаблицыРаспределенныхЗаявок) И
	|	НЕ ВТ_Итог.Заявка В (&мТЗЗаявкиВПланах) ";
	
	Запрос.УстановитьПараметр("мТЗЗаявкиВПланах", мТЗЗаявкиВПланах);			   
	Запрос.УстановитьПараметр("ТЗЗаявкиИзТаблицыРаспределенныхЗаявок", ТЗЗаявкиИзТаблицыРаспределенныхЗаявок);
	//Запрос.УстановитьПараметр("ТЗЗаявкиИзТаблицыРаспределенныхЗаявок", ТаблицаРаспредЗаявокТест.Скопировать(, "Заявка"));
	//Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ЭтаФорма.ЗаказыОтборСтандартныйПериод.ДатаНачала));
	//Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ЭтаФорма.ЗаказыОтборСтандартныйПериод.ДатаОкончания));
	Запрос.УстановитьПараметр("ВремяПодачиНачало", ВремяПодачиНачало);
	Запрос.УстановитьПараметр("ВремяПодачиКонец", ВремяПодачиКонец);
	ТЗПакетЗаявок = Запрос.Выполнить().Выгрузить();
	
	Возврат ТЗПакетЗаявок;
	
	
КонецФункции

Функция ПолучитьВремяМаршрута(СтартСтруктура, ФинишСтруктура, ВремяСтарт = Неопределено,ПоЗаявке = Ложь)
	
	Возврат ES_ОбщегоНазначенияКлиентСервер.ПолучитьВремяМаршрута(СтартСтруктура, ФинишСтруктура, ВремяСтарт);
	
КонецФункции

Процедура СоздатьПланДоставкиПоОтработаннымЗаявкамДерево(МассивСтруктурЗаявок, Машина, ДатаНаФорме)
	
	Если МассивСтруктурЗаявок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
		|	ES_ПланДоставки.Ссылка,
		|	ES_ПланДоставки.ПометкаУдаления
		|ИЗ
		|	Документ.ES_ПланДоставки КАК ES_ПланДоставки
		|ГДЕ
		|	ES_ПланДоставки.Курьер = &Курьер
		|	И НачалоПериода(ES_ПланДоставки.Дата,ДЕнь) = &Дата";
	Запрос.УстановитьПараметр("Дата", НачалоДня(ДатаНаФорме));
	Запрос.УстановитьПараметр("Курьер", Машина);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ДокументПланСсылка= Выборка.Ссылка;
		ДокументОбъект = ДокументПланСсылка.ПолучитьОбъект();
		ДокументОбъект.ПометкаУдаления = Ложь;
		ДокументОбъект.Заказы.Очистить();
	Иначе
		ДокументОбъект = Документы.ES_ПланДоставки.СоздатьДокумент();
	Конецесли;
	
	ДокументОбъект.Дата = ТекущаяДата();
	ДокументОбъект.Курьер = Машина;
	////////////////////////////////////////////////////////////////////////////////
	//если план по заказам на доставку
	ДокументОбъект.Склад = Справочники.СтруктурныеЕдиницы.ОсновнойСклад; 
	//ДатаВремяДобавленияЗаказов = НачалоДня(ЗаказыОтборСтандартныйПериод.ДатаОкончания);
	//мТекДата = ТекущаяДата();
	//мНачалоДня = НачалоДня(мТекДата);
	//мТекВремя = мТекДата - мНачалоДня;
	//ДатаВремяДобавленияЗаказов = ДатаВремяДобавленияЗаказов + мТекВремя;
	//ДокументОбъект.ДатаВремяДобавленияЗаказов = ДатаВремяДобавленияЗаказов;
	
	Индекс = МассивСтруктурЗаявок.Количество() - 1;
	Пока Индекс >= 0 Цикл
		НоваяСтрока = ДокументОбъект.Заказы.Добавить();
		
		НоваяСтрока.ДокументДоставки = МассивСтруктурЗаявок[Индекс].Заявка;
		ES_ОбщегоНазначения.ПолучитьДанныеПоЗаказамДляЗаполненияПланаДоставки(ТипЗнч(ДокументОбъект.Ссылка),ДокументОбъект,МассивСтруктурЗаявок[Индекс].Заявка, Истина, Ложь);
		Индекс = Индекс - 1;
	КонецЦикла;
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры
