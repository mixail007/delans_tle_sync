////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с номенклатурой".
// ОбщийМодуль.РаботаСНоменклатурой.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбработкаСобытийФорм

// Процедура, вызываемая из обработчика события формы ПриСозданииНаСервере.
//  Создает поле с представлением номенклатуры сервиса 1С:Номенклатура, вспомогательные кнопки.
//
// Параметры:
//  Форма							 - УправляемаяФорма	 - из обработчика события которой происходит вызов процедуры.
//  ГруппаРодитель					 - ЭлементФормы		 - группа формы для размещения элементов.
//  РежимПредставленияОбъектаСервиса - Строка - представление объекта сервиса на форме. Значения: "Гиперссылка", "ПолеВвода".
//
Процедура ПриСозданииНаСервереФормаНоменклатуры(Форма, ГруппаРодитель, РежимПредставленияОбъектаСервиса = "ПолеВвода") Экспорт
	
	СервисДоступен = Истина;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСервисРаботаСНоменклатурой") Тогда
		СервисДоступен = Ложь;
	КонецЕсли;
	
	Если НЕ ПравоЧтенияДанных() Тогда
		СервисДоступен = Ложь;
	КонецЕсли;
	
	ДобавитьРеквизитыФормы(Форма, СервисДоступен, РежимПредставленияОбъектаСервиса);
	
	Если НЕ СервисДоступен Тогда
		Возврат;
	КонецЕсли;
	
	Форма.РаботаСНоменклатурой_СервисДоступен = Истина;
	
	Объект = Форма.Объект;
	
	ДобавитьЭлементыФормыСервиса(Форма, "ПредставлениеНоменклатурыСервиса", ГруппаРодитель, "1С:Номенклатура", РежимПредставленияОбъектаСервиса);
	
	ЗаполнитьДанныеПоНоменклатуре(Форма, Объект, РежимПредставленияОбъектаСервиса);
	
	УстановитьДействиеИзменениеТекстаПолей(Форма);
	
	НастроитьЭлементыФормы(Форма, РежимПредставленияОбъектаСервиса);
	
КонецПроцедуры

// Процедура, вызываемая из обработчика события формы ПриСозданииНаСервере.
// Создает кнопку подбора номенклатуры из сервиса 1С:Номенклатура.
//
// Параметры:
//  Форма - УправляемаяФорма - из обработчика события которой происходит вызов процедуры.
//  ГруппаРодитель - ЭлементФормы - группа формы для размещения элементов.
//
Процедура ПриСозданииНаСервереФормаСпискаНоменклатуры(Форма, ГруппаРодитель) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСервисРаботаСНоменклатурой") Тогда
		Возврат;
	КонецЕсли;	
		
	Если НЕ ПравоИзмененияДанных() Тогда
		Возврат;
	КонецЕсли;
		
	// Побор номенклатуры из списка
	
	// Команда
	
	НоваяКомандаФормы           = Форма.Команды.Добавить("ПодобратьНоменклатуруИзСервиса");
	НоваяКомандаФормы.Заголовок = НСтр("ru = 'Добавить номенклатуру из сервиса 1С:Номенклатура'");
	НоваяКомандаФормы.Подсказка = НСтр("ru = 'Добавить номенклатуру из сервиса 1С:Номенклатура'");
	НоваяКомандаФормы.Действие  = "Подключаемый_ПодобратьНоменклатуруИзСервиса";
	НоваяКомандаФормы.Картинка  = БиблиотекаКартинок.ДобавитьРаботаСНоменклатурой;
	
	// Элемент кнопка
	
	НовыйЭлемент             = Форма.Элементы.Добавить("ПодобратьНоменклатуруИзСервиса", Тип("КнопкаФормы"), ГруппаРодитель);
	НовыйЭлемент.Вид         = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НовыйЭлемент.ИмяКоманды  = "ПодобратьНоменклатуруИзСервиса";
	
КонецПроцедуры

// Процедура, вызываемая из обработчика события формы ПриЗаписиНаСервере.
//  Записывает соответствие объекта базы и объекта сервиса 1С:Номенклатура.
//
// Параметры:
//  Форма			 - УправляемаяФорма	 - из обработчика события которой происходит вызов процедуры.
//  ТекущийОбъект	 - 	Объект           - записываемый объект.
//  Отказ			 - Булево			 - признак отказа.
//
Процедура ПриЗаписиНаСервереФормаНоменклатуры(Форма, ТекущийОбъект, Отказ) Экспорт
	
	Если НЕ Форма.РаботаСНоменклатурой_СервисДоступен Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.ОбъектСервисаИзменен Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыЗаписи = ПараметрыЗаписиСоответствияНоменклатуры();
	
	ПараметрыЗаписи.ИдентификаторНоменклатурыСервиса = Форма.ИдентификаторОбъектаСервиса;
	ПараметрыЗаписи.ПредставлениеНоменклатурыСервиса = Форма.ПредставлениеОбъектаСервиса;
	ПараметрыЗаписи.ОбновляетсяАвтоматически    = Форма.ОбновляетсяАвтоматически;
	
	ЗаписатьСоответствиеНоменклатуры(ТекущийОбъект.Ссылка, ПараметрыЗаписи)
	
КонецПроцедуры

// Процедура, вызываемая из обработчика события формы ПриСозданииНаСервере.
// Создает поле с представлением категории сервиса 1С:Номенклатура, вспомогательные кнопки.
//
// Параметры:
//  Форма - УправляемаяФорма - из обработчика события которой происходит вызов процедуры.
//  ГруппаРодитель - ЭлементФормы - группа формы для размещения элементов.
//  РежимПредставленияОбъектаСервиса - Строка - представление объекта сервиса на форме. Значения: "Гиперссылка", "ПолеВвода".
//
Процедура ПриСозданииНаСервереФормаВидаНоменклатуры(Форма, ГруппаРодитель, РежимПредставленияОбъектаСервиса = "ПолеВвода") Экспорт
	
	СервисДоступен = Истина;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСервисРаботаСНоменклатурой") Тогда
		СервисДоступен = Ложь;
	КонецЕсли;
		
	Если НЕ ПравоЧтенияДанных() Тогда
		СервисДоступен = Ложь;
	КонецЕсли;
	
	ДобавитьРеквизитыФормы(Форма, СервисДоступен, РежимПредставленияОбъектаСервиса);
	
	Если НЕ СервисДоступен Тогда
		Возврат;
	КонецЕсли;
	
	Форма.РаботаСНоменклатурой_СервисДоступен = Истина;
	
	Объект = Форма.Объект;
	
	ДобавитьЭлементыФормыСервиса(Форма, "ПредставлениеКатегорииСервиса", ГруппаРодитель, 
		НСтр("ru = 'Категория 1С:Номенклатуры'"), РежимПредставленияОбъектаСервиса);
	
	ЗаполнитьДанныеПоКатегории(Форма, Объект, РежимПредставленияОбъектаСервиса);
	
	НастроитьЭлементыФормы(Форма, РежимПредставленияОбъектаСервиса);
	
КонецПроцедуры

// Процедура, вызываемая из обработчика события формы ПриСозданииНаСервере.
// Создает кнопку подбора категорий из сервиса 1С:Номенклатура.
//
// Параметры:
//  Форма - УправляемаяФорма - из обработчика события которой происходит вызов процедуры.
//  ГруппаРодитель - ЭлементФормы - группа формы для размещения элементов.
//
Процедура ПриСозданииНаСервереФормаСпискаВидаНоменклатуры(Форма, ГруппаРодитель) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСервисРаботаСНоменклатурой") Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ ПравоИзмененияДанных() Тогда
		Возврат;
	КонецЕсли;
			
	// Команда
	
	НоваяКомандаФормы           = Форма.Команды.Добавить("ПодобратьКатегорииИзСервиса");
	НоваяКомандаФормы.Заголовок = НСтр("ru = 'Добавить виды номенклатуры из сервиса 1С:Номенклатура'");
	НоваяКомандаФормы.Подсказка = НСтр("ru = 'Добавить виды номенклатуры из сервиса 1С:Номенклатура'");
	НоваяКомандаФормы.Действие  = "Подключаемый_ПодобратьКатегорииИзСервиса";
	НоваяКомандаФормы.Картинка  = БиблиотекаКартинок.ДобавитьРаботаСНоменклатурой;
	
	// Элемент кнопка
	
	НовыйЭлемент             = Форма.Элементы.Добавить("ПодобратьКатегорииИзСервиса", Тип("КнопкаФормы"), ГруппаРодитель);
	НовыйЭлемент.Вид         = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НовыйЭлемент.ИмяКоманды  = "ПодобратьКатегорииИзСервиса";
	
КонецПроцедуры

// Процедура, вызываемая из обработчика события формы ПриЗаписиНаСервере.
//  Записывает соответствие объекта базы и объекта сервиса 1С:Номенклатура.
//
// Параметры:
//  Форма			 - УправляемаяФорма	 - из обработчика события которой происходит вызов процедуры.
//  ТекущийОбъект	 - 	Объект           - записываемый объект.
//  Отказ			 - Булево			 - признак отказа.
//
Процедура ПриЗаписиНаСервереФормаВидаНоменклатуры(Форма, ТекущийОбъект, Отказ) Экспорт
	
	Если НЕ Форма.РаботаСНоменклатурой_СервисДоступен Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.ОбъектСервисаИзменен Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ИдентификаторОбъектаСервиса) Тогда
		
		
		ПараметрыЗаписи = ПараметрыЗаписиСоответствияВидаНоменклатуры();
		
		ПараметрыЗаписи.Вставить("ПредставлениеКатегории",   Форма.ПредставлениеОбъектаСервиса);
		ПараметрыЗаписи.Вставить("ИдентификаторКатегории",   Форма.ИдентификаторОбъектаСервиса);
		ПараметрыЗаписи.Вставить("ОбновляетсяАвтоматически", Форма.ОбновляетсяАвтоматически);
		ПараметрыЗаписи.Вставить("ЗагружатьХарактеристикиВХарактеристики", Истина);
		
		ЗаписатьСоответствиеВидаНоменклатуры(ТекущийОбъект.Ссылка, ПараметрыЗаписи);
		
	Иначе
		ОчиститьСоответствияПоВидуНоменклатуры(ТекущийОбъект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверки заполнения, для подготовки объекта к предварительной записи.
//
// Параметры:
//  Форма			 - УправляемаяФорма	 - из обработчика события которой происходит вызов процедуры.
//  Отказ			 - Булево			 - признак отказа.
//  ПроверяемыеРеквизиты - Массив - см. синтаксис-помощник ОбработкаПроверкиЗаполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если Не Форма.РаботаСНоменклатурой_СервисДоступен Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.РаботаСНоменклатурой_ИгнорироватьПроверкуЗаполнения Тогда
		ПроверяемыеРеквизиты.Очистить();
		Форма.РаботаСНоменклатурой_ИгнорироватьПроверкуЗаполнения = Ложь;
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти

#Область РаботаСДанными

// Таблица, заполняемая в момент сравнения значений реквизитов объектов информационной базы
// и объектов сервиса. После заполнения, таблица используется в формах заполнения объектов
// и в методах обновления объектов информационной базы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - колонки:
//    * ПредставлениеРеквизита - Строка - представление реквизита объекта информационной базы для отображение в формах.
//    * ПредставлениеЗначенияСервиса - Строка - представление значения сервиса для отображения в формах.
//    * Пометка - Булево - флаг выбора реквизита для обновления для отображения в формах.
//    * РеквизитОбъекта - Строка, Ссылка - имя реквизита объекта или ссылка на дополнительный реквизит.
//    * НовоеЗначение - Произвольный - значение объекта сервиса.
//    * ТекущееЗначение - Произвольный - значение реквизита объекта информационной базы.
//
Функция ТаблицаОтличийРеквизитов() Экспорт
	
	ТаблицаОтличийРеквизитов = Новый ТаблицаЗначений;
	
	ТаблицаОтличийРеквизитов.Колонки.Добавить("РеквизитОбъекта");
	ТаблицаОтличийРеквизитов.Колонки.Добавить("ПредставлениеРеквизита", Новый ОписаниеТипов("Строка"));
	ТаблицаОтличийРеквизитов.Колонки.Добавить("ТекущееЗначение");
	ТаблицаОтличийРеквизитов.Колонки.Добавить("НовоеЗначение");
	ТаблицаОтличийРеквизитов.Колонки.Добавить("ПредставлениеЗначенияСервиса", Новый ОписаниеТипов("Строка"));
	ТаблицаОтличийРеквизитов.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаОтличийРеквизитов;	
	
КонецФункции

// Добавление строки в таблицу отличий, для отображения изменений на формах, а также для процедур обновления.
//
// Параметры:
//  ТаблицаОтличийРеквизитов	 - ТаблицаЗначений - таблица отличий.
//  РеквизитОбъекта				 - Строка, Ссылка - имя реквизита объекта или ссылка на дополнительный реквизит.
//  ЗначениеСервиса				 - Произвольный	 - значение объекта сервиса.
//  ТекущееЗначение				 - Произвольный - значение реквизита объекта информационной базы.
//  ПредставлениеРеквизита		 - Строка - представление реквизита объекта информационной базы.
//  ПредставлениеЗначенияСервиса - Строка - представление значения сервиса.
//  Пометка						 - Булево - признак того, что изменение отмечено (для форм).
//
Процедура ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, РеквизитОбъекта, 
		ЗначениеСервиса, ТекущееЗначение, ПредставлениеРеквизита = "", ПредставлениеЗначенияСервиса = "", Пометка = Истина) Экспорт
	
	ПредставлениеРеквизита = ?(ЗначениеЗаполнено(ПредставлениеРеквизита), ПредставлениеРеквизита, РеквизитОбъекта);
	ПредставлениеЗначения  = ?(ЗначениеЗаполнено(ПредставлениеЗначенияСервиса), ПредставлениеЗначенияСервиса, ЗначениеСервиса);
	
	НоваяСтрока = ТаблицаОтличийРеквизитов.Добавить();
	
	НоваяСтрока.РеквизитОбъекта = РеквизитОбъекта;
	НоваяСтрока.ПредставлениеРеквизита = ПредставлениеРеквизита;
	НоваяСтрока.ТекущееЗначение = ТекущееЗначение;
	НоваяСтрока.НовоеЗначение   = ЗначениеСервиса;
	НоваяСтрока.ПредставлениеЗначенияСервиса = ПредставлениеЗначения;
	НоваяСтрока.Пометка         = Пометка;
	
КонецПроцедуры

// Функция возвращает значение строки дополнительного реквизита.
//
// Параметры:
//  СтрокаДанных - СтрокаТаблицыЗначений - строка таблицы дополнительных реквизитов.
// 
// Возвращаемое значение:
//  Произвольный - значение дополнительного реквизита.
//
Функция ЗначениеДополнительногоРеквизита(СтрокаДанных) Экспорт
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ИдентификаторЗначения) Тогда
		Результат = СтрокаДанных.ЗначениеИнформационнойБазы;
	Иначе
		Результат = СтрокаДанных.Значение;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает описание типа, на основании типа реквизита сервиса.
//
// Параметры:
//  ТипРеквизита - Строка - возможные значения: "Строка", "Число", "Дата", "Булево", "Список".
// 
// Возвращаемое значение:
//  ОписаниеТипа - описание типа.
//
Функция ОписаниеТипаНаОснованииТипаСервиса(ТипРеквизита) Экспорт
	
	ОписаниеТипаЗначения = Новый ОписаниеТипов("Строка");
	
	Если СтрСравнить(ТипРеквизита, "Строка") = 0 Тогда
		ОписаниеТипаЗначения = Новый ОписаниеТипов("Строка");
	ИначеЕсли СтрСравнить(ТипРеквизита, "Число") = 0 Тогда	
		ОписаниеТипаЗначения = Новый ОписаниеТипов("Число");
	ИначеЕсли СтрСравнить(ТипРеквизита, "Дата") = 0 Тогда
		ОписаниеТипаЗначения = Новый ОписаниеТипов("Дата");
	ИначеЕсли СтрСравнить(ТипРеквизита, "Булево") = 0 Тогда
		ОписаниеТипаЗначения = Новый ОписаниеТипов("Булево");
	ИначеЕсли СтрСравнить(ТипРеквизита, "Список") = 0 Тогда
		ОписаниеТипаЗначения = Метаданные.ОпределяемыеТипы.ЗначенияСвойствОбъектовРаботаСНоменклатурой.Тип;
	КонецЕсли;
	
	Возврат ОписаниеТипаЗначения;
	
КонецФункции

// Получение данных из формы для интерактивного заполнения объект.
//
// Параметры:
//  Форма	 - УправляемаяФорма - форма объекта.
// 
// Возвращаемое значение:
//  Строка - адрес временного хранилища структуру с ключами: ВидНоменклатуры, ОсновныеРеквизиты, ДополнительныеРеквизиты.
//
Функция ПодготовитьДанныеДляИнтерактивногоЗаполнения(Форма) Экспорт
	
	ДанныеФормы = Новый Структура;
	
	ДанныеФормы.Вставить("ВидНоменклатуры",         Неопределено);
	ДанныеФормы.Вставить("ОсновныеРеквизиты",       Новый Структура);
	ДанныеФормы.Вставить("ДополнительныеРеквизиты", Новый ТаблицаЗначений);
		
	РаботаСНоменклатуройПереопределяемый.ПолучитьВидНоменклатурыИзФормы(Форма, ДанныеФормы.ВидНоменклатуры);
	РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовНоменклатурыИзФормы(Форма, ДанныеФормы.ОсновныеРеквизиты);
	РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияДополнительныхРеквизитовИзФормы(Форма, ДанныеФормы.ДополнительныеРеквизиты);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеФормы, Форма.УникальныйИдентификатор);
	
КонецФункции

// Заполнение реквизитов формы объекта, после закрытия окна заполнения объекта.
//
// Параметры:
//  Форма	                 - УправляемаяФорма - форма заполняемого объекта.
//  ПараметрыЗакрытияФормы	 - Структура - результат закрытия окна заполнения объекта.
//
Процедура ЗаполнитьРеквизитыФормы(Форма, ПараметрыЗакрытияФормы) Экспорт
	
	Если ПараметрыЗакрытияФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ОбновляетсяАвтоматически = ПараметрыЗакрытияФормы.АвтоматическийРежимОбновления;
	
	Если ПараметрыЗакрытияФормы.АвтоматическийРежимОбновления Тогда
		Если Форма.РаботаСНоменклатурой_РежимПредставленияОбъектаСервиса = "ПолеВвода" Тогда
			Форма.Элементы.РежимОбновления.Картинка 
				= БиблиотекаКартинок.АвтоматическоеОбновлениеРаботаСНоменклатурой;
		Иначе
			РаботаСНоменклатуройСлужебныйКлиентСервер.НастроитьВидимостьГиперссылок(Форма);
		КонецЕсли;	
		
		Форма.Прочитать();
	Иначе 
		Если Форма.РаботаСНоменклатурой_РежимПредставленияОбъектаСервиса = "ПолеВвода" Тогда
			Форма.Элементы.РежимОбновления.Картинка = БиблиотекаКартинок.РучноеОбновлениеРаботаСНоменклатурой;
		Иначе
			РаботаСНоменклатуройСлужебныйКлиентСервер.НастроитьВидимостьГиперссылок(Форма);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПараметрыЗакрытияФормы.Свойство("ТаблицаОтличий") 
		ИЛИ Не ЭтоАдресВременногоХранилища(ПараметрыЗакрытияФормы.ТаблицаОтличий) Тогда
		
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта = ПолучитьИзВременногоХранилища(ПараметрыЗакрытияФормы.ТаблицаОтличий);
	
	Если ТипЗнч(ДанныеОбъекта) <> Тип("ТаблицаЗначений")
		ИЛИ ДанныеОбъекта.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	РаботаСНоменклатуройПереопределяемый.ЗаполнитьНоменклатуруВФорме(Форма, 
		ДанныеОбъекта.Скопировать(
			Новый Структура("Пометка, ЯвляетсяДополнительнымРеквизитом", Истина, Ложь)));
	
	РаботаСНоменклатуройПереопределяемый.ЗаполнитьДополнительныеРеквизитыНоменклатурыВФорме(Форма, 
		ДанныеОбъекта.Скопировать(
			Новый Структура("Пометка, ЯвляетсяДополнительнымРеквизитом", Истина, Истина)));
	
КонецПроцедуры

// Возвращает ссылки на виды номенклатуры по идентификатору категории.
//
// Параметры:
//  ИдентификаторКатегории - Строка - идентификатор категории.
// 
// Возвращаемое значение:
//  Массив - массив ссылок на виды номенклатуры.
//
Функция ВидыНоменклатурыПоИдентификаторуКатегории(ИдентификаторКатегории) Экспорт
	
	Возврат РаботаСНоменклатуройСлужебный.ВидыНоменклатурыПоИдентификаторам(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторКатегории));
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтеграцияПодсистемБиблиотеки

// См. ИнтернетПоддержкаПользователейПереопределяемый.ПриОпределенииСервисовСопровождения.
//
// Параметры:
//  МодулиСервисов	 - Массив - массив имен модулей.
//
Процедура ПриОпределенииСервисовСопровождения(МодулиСервисов) Экспорт
	
	МодулиСервисов.Добавить("РаботаСНоменклатурой");
	
КонецПроцедуры

Функция РазрешеноПакетноеСозданиеНоменклатуры() Экспорт
	
	РазрешеноПакетноеСоздание = Истина;
	
	РаботаСНоменклатуройПереопределяемый.РазрешеноПакетноеСозданиеНоменклатуры(РазрешеноПакетноеСоздание);
	
	Возврат РазрешеноПакетноеСоздание;
	
КонецФункции

#КонецОбласти

#Область РаботаСКатегориями

// Возвращает признак учета видов номенклатуры в системе.
// 
// Возвращаемое значение:
//  Булево - Истина если ведется.
//
Функция ВедетсяУчетВидовНоменклатуры() Экспорт
	
	Результат = Истина;
	
	РаботаСНоменклатуройПереопределяемый.ВедетсяУчетВидовНоменклатуры(Результат);
	
	Возврат Результат;
	
КонецФункции

// Загрузка категорий с замером.
//
// Параметры:
//  КатегорииКЗагрузке	 - Массив (Строка) - идентификаторы категорий.
//  АдресРезультата		 - Строка - адрес результата.
//
Процедура ЗагрузитьКатегории(Знач КатегорииКЗагрузке, Знач АдресРезультата) Экспорт

	Если Не ВедетсяУчетВидовНоменклатуры() Тогда
		Возврат;
	КонецЕсли; 
	
	Начало = ОценкаПроизводительности.НачатьЗамерВремени();
	ДолжноБытьСоздано = КатегорииКЗагрузке.Количество();
	
	ЗагрузкаКатегорий(КатегорииКЗагрузке, АдресРезультата, ДолжноБытьСоздано);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ОбщийМодуль.РаботаСНоменклатурой.ЗагрузкаКатегорий", Начало, ДолжноБытьСоздано);

КонецПроцедуры

// Признак учета индивидуальных характеристик.
//
// Параметры:
//  ВидНоменклатуры	 - Ссылка - анализируемый вид номенклатуры.
// 
// Возвращаемое значение:
//  Булево - Истина если ведется.
//
Функция ИспользуютсяИндивидуальныеХарактеристики(ВидНоменклатуры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Ложь;
	
	РаботаСНоменклатуройПереопределяемый.ИспользуютсяИндивидуальныеХарактеристики(ВидНоменклатуры, Результат);
	
	Возврат Результат;
	
КонецФункции

// Создание дополнительного реквизита в системе.
//
// Параметры:
//  ВидНоменклатурыСсылка			 - Ссылка - вид номенклатуры.
//  ДополнительныйРеквизит			 - СтрокаТаблицыЗначений - строка данных сервиса по дополнительным реквизитам.
//  ДополнительныеРеквизиты			 - ТаблицаЗначений - таблица реквизитов.
//  ЯвляетсяРеквизитомХарактеристики - Булево - признак, что это характеристика.
//
Процедура СоздатьДополнительныйРеквизит(ВидНоменклатурыСсылка, ДополнительныйРеквизит, ДополнительныеРеквизиты, ЯвляетсяРеквизитомХарактеристики) Экспорт
	
	РеквизитСсылка = Неопределено;
	
	РаботаСНоменклатуройПереопределяемый.СоздатьДополнительныйРеквизит(ВидНоменклатурыСсылка, ДополнительныйРеквизит, РеквизитСсылка);
	
	Если ЗначениеЗаполнено(ДополнительныйРеквизит.Значения) Тогда
		МассивЗначений = Новый Массив;
		Для каждого ЗначениеРеквизита Из ДополнительныйРеквизит.Значения Цикл
			ЗначениеСсылка = Неопределено;
			РаботаСНоменклатуройПереопределяемый.СоздатьЗначениеРеквизита(РеквизитСсылка, ЗначениеРеквизита, ЗначениеСсылка);
			МассивЗначений.Добавить(Новый Структура("ЗначениеРеквизитаВидаНоменклатуры, ИдентификаторЗначенияРеквизитаКатегории, ЗначениеРеквизитаКатегории",
			ЗначениеСсылка, ЗначениеРеквизита.Идентификатор, ЗначениеРеквизита.Наименование));	
		КонецЦикла;
		
		ЗаписатьСоответствиеЗначенийРеквизита(ВидНоменклатурыСсылка, РеквизитСсылка, МассивЗначений);
	КонецЕсли;
	
	НоваяСтрока = ДополнительныеРеквизиты.Добавить();
	
	НоваяСтрока.РеквизитВидаНоменклатуры = РеквизитСсылка;
	НоваяСтрока.ИдентификаторРеквизитаКатегории = ДополнительныйРеквизит.Идентификатор;
	НоваяСтрока.ЯвляетсяРеквизитомХарактеристики = ЯвляетсяРеквизитомХарактеристики;
	
КонецПроцедуры

// Получение данных категорий.
//
// Параметры:
//  ИдентификаторыКатегорий	 - Массив (Строка) - идентификаторы категорий.
//  АдресРезультата			 - Строка - адрес результата.
//
Процедура ПолучитьДанныеКатегорийСервиса(Знач ИдентификаторыКатегорий, Знач АдресРезультата) Экспорт
	
	ПоместитьВоВременноеХранилище(ДанныеКатегорийСервиса(ИдентификаторыКатегорий), АдресРезультата);
	
КонецПроцедуры

// Функция возвращает данные категорий сервиса по идентификаторам
//
// Параметры:
//  ИдентификаторыКатегорий           - Массив, Строка - идентификаторы запрашиваемых категорий.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - колонки:
//    * ДатаИзменения                 - Дата - дата последнего изменения категории.
//    * ДополнительныеРеквизиты       - Таблица значений - дополнительные реквизиты категории.
//      Колонки:
//      ** ДатаИзменения              - Дата - дата последнего изменения реквизита.
//      ** Значения                   - ТаблицаЗначений - таблица с возможными значениями реквизита.
//         Колонки:
//         ** ДатаИзменения           - Дата - дата последнего изменения значения в сервисе.
//         ** ЗначениеИнформационнойБазы - Ссылка - значение в информационной базе согласно 
//                                                  регистру сведений СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.
//         ** Идентификатор           - Строка - идентификатор значения.
//         ** Наименование            - Строка - представление значения.
//      ** Идентификатор              - Строка - идентификатор реквизита.
//      ** ИдентификаторыЗначений     - Массив - (Строка) идентификаторы значений.
//      ** МаксимальноеЗначение       - Число - максимальное значение.
//      ** МинимальноеЗначение        - Число - минимальное значение.
//      ** Наименование               - Строка - наименование реквизита.
//      ** Обязательный               - Булево - флаг обязательности заполнения.
//      ** РеквизитИнформационнойБазы - Ссылка - ссылка на реквизит в информационной базе согласно 
//                                               регистру сведений СоответствиеРеквизитовРаботаСНоменклатурой.
//      ** Тип                        - Строка - тип значения реквизита. См. РаботаСНоменклатурой.ОписаниеТипаНаОснованииТипаСервиса.
//    * Идентификатор                 - Строка - идентификатор категории.
//    * ИдентификаторРодителя         - Строка - идентификатор родителя категории.
//    * Изображения                   - Массив - массив ссылок на изображения.
//    * Классификаторы                - ТаблицаЗначений - классификаторы категорий.
//      Колонки:
//      ** Наименование               - Строка - наименование классификатора.
//      ** Идентификатор              - Строка - идентификатор классификатора.
//      ** Описание                   - Строка - описание классификатора.
//    * КоличествоПодчиненных         - Число - количество подчиненных элементов.
//    * Наименование                  - Строка - наименование категории.
//    * НаименованиеРодителя          - Строка - наименование родителя категории.
//    * Описание                      - Строка - описание категории.
//    * СтавкаНДС                     - Строка - ставка НДС. Возможны значения: "18", "10", "-".
//    * Тип                           - Строка - тип номенклатуры категории. Возможны значения: "Товар", "Услуга".
//    * УчастникГИСМ                  - Булево - флаг ГИСМ.
//    * УчастникЕГАИС                 - Булево - флаг ЕГАИС.
//    * Характеристики                - Структура - характеристики категории.
//      ** ДополнительныеРеквизиты    - ТаблицаЗначений - см. Дополнительные реквизиты
//      ** Идентификаторы	          - Массив - идентификаторы характеристик.
//      ** Наименование               - Строка - представление характеристики.
//
Функция ДанныеКатегорийСервиса(Знач ИдентификаторыКатегорий) Экспорт
	
	Если ТипЗнч(ИдентификаторыКатегорий) = Тип("Строка")Тогда
		ИдентификаторыКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыКатегорий);
	КонецЕсли;
	
	Если ИдентификаторыКатегорий.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ДанныеПоКатегориям = ПолучитьДанныеКатегорийПоИдентификаторам(ИдентификаторыКатегорий, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗначенияКатегорий = ПолучитьЗначенияВсехДополнительныхРеквизитов(ИдентификаторыКатегорий, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого Категория Из ДанныеПоКатегориям Цикл
		
		Категория.ДополнительныеРеквизиты.Колонки.Добавить("РеквизитИнформационнойБазы");
		Категория.ДополнительныеРеквизиты.Колонки.Добавить("Значения");
		
		Категория.Характеристики.ДополнительныеРеквизиты.Колонки.Добавить("РеквизитИнформационнойБазы");
		Категория.Характеристики.ДополнительныеРеквизиты.Колонки.Добавить("Значения");
		
		ЗначенияТекущейКатегории = ЗначенияКатегорий.Скопировать(Новый Структура("ИдентификаторКатегории", Категория.Идентификатор));
		
		////////////////////////////////////////////////////////////////////////////////
		
		Для каждого ДополнительныйРеквизит Из Категория.ДополнительныеРеквизиты Цикл
			СтрокаРеквизита = ЗначенияТекущейКатегории.Найти(ДополнительныйРеквизит.Идентификатор, "ИдентификаторДополнительногоРеквизита");
			
			Если СтрокаРеквизита <> Неопределено Тогда
				ДополнительныйРеквизит.Значения = СтрокаРеквизита.Значения.Скопировать();
				ДополнительныйРеквизит.Значения.Колонки.Добавить("ЗначениеИнформационнойБазы");
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ДополнительныйРеквизит Из Категория.Характеристики.ДополнительныеРеквизиты Цикл
			СтрокаРеквизита = ЗначенияТекущейКатегории.Найти(ДополнительныйРеквизит.Идентификатор, "ИдентификаторДополнительногоРеквизита");
			
			Если СтрокаРеквизита <> Неопределено Тогда
				ДополнительныйРеквизит.Значения = СтрокаРеквизита.Значения.Скопировать();
				ДополнительныйРеквизит.Значения.Колонки.Добавить("ЗначениеИнформационнойБазы");
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	РаботаСНоменклатуройПереопределяемый.ПриПолученииДанныхИзСервисаПоКатегориям(ДанныеПоКатегориям);
	
	Возврат ДанныеПоКатегориям;
	
КонецФункции

// Получить значения дополнительного реквизита, в соответствии с представлением значений базы.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры метода.
//   Ключи:
//    * ИдентификаторКатегории - Строка - идентификатор категории.
//    * ИдентификаторДополнительногоРеквизита - Строка - идентификатор реквизита.
//    * ИдентификаторКатегории - Массив (Строка) - строковое представление значений базы.
//  АдресРезультата	 - Строка - адрес результата.
//
Процедура ПолучитьЗначенияСоответствующиеЗаданным(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	
	ТаблицаПоиска.Колонки.Добавить("ИдентификаторКатегории",                Новый ОписаниеТипов("Строка"));
	ТаблицаПоиска.Колонки.Добавить("ИдентификаторДополнительногоРеквизита", Новый ОписаниеТипов("Строка"));
	ТаблицаПоиска.Колонки.Добавить("Значение",                              Новый ОписаниеТипов("Строка"));
	
	Для каждого ЭлементКоллекции Из ПараметрыЗапроса.ПредставлениеЗначений Цикл
		
		Если СтрДлина(ЭлементКоллекции) < 2 Тогда // Ограничение, выставленное в сервисе.
			ЭлементКоллекции = Лев(ЭлементКоллекции + "__", 2);
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПоиска.Добавить();
		
		НоваяСтрока.ИдентификаторКатегории = ПараметрыЗапроса.ИдентификаторКатегории;
		НоваяСтрока.ИдентификаторДополнительногоРеквизита = ПараметрыЗапроса.ИдентификаторДополнительногоРеквизита;
		НоваяСтрока.Значение = ЭлементКоллекции;
		
	КонецЦикла;
	
	ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаЗначенияДополнительныхРеквизитов();
	
	ПараметрыЗапроса.ТаблицаПоиска = ТаблицаПоиска;
	ПараметрыЗапроса.НаборПолей    = РаботаСНоменклатуройСлужебный.НаборПолейМинимальный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаЗначенияДополнительныхРеквизитов(ПараметрыЗапроса);
	
	Отказ = Ложь;
	
	ЗначенияРеквизитов = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	ПоместитьВоВременноеХранилище(ЗначенияРеквизитов, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСНоменклатурой

// Получение идентификаторов номенклатуры сервиса с номенклатурой информационной базы.
//
// Параметры:
//  ИдентификаторыНоменклатуры	 - Массив (Строка) - идентификаторы номенклатуры.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица соответствия.
//
Функция ПолучитьСоответствиеНоменклатурыПоИдентификаторам(ИдентификаторыНоменклатуры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатурыСервиса,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса В(&ИдентификаторыНоменклатуры)";
	
	Запрос.УстановитьПараметр("ИдентификаторыНоменклатуры", ИдентификаторыНоменклатуры);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Получение идентификаторов номенклатуры сервиса с номенклатурой информационной базы.
//
// Параметры:
//  СсылкиНоменклатуры	 - Массив (Ссылка) - ссылки на номенклатуру.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица соответствия.
//
Функция ПолучитьСоответствиеНоменклатурыПоСсылкамНоменклатуры(СсылкиНоменклатуры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатурыСервиса,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура В(&СсылкиНоменклатуры)";
	
	Запрос.УстановитьПараметр("СсылкиНоменклатуры", СсылкиНоменклатуры);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Получение данных номенклатуры сервиса.
//
// Параметры:
//  ПараметрыВызова	 - Структура - параметры вызова.
//  АдресРезультата	 - Строка - адрес результата.
//
Процедура ПолучитьДанныеНоменклатурыСервиса(ПараметрыВызова, Знач АдресРезультата) Экспорт
		
	ПоместитьВоВременноеХранилище(ДанныеНоменклатурыСервиса(ПараметрыВызова.ИдентификаторыНоменклатуры, 
		ПараметрыВызова.РежимПроверкиПередЗагрузкой), АдресРезультата);
	
КонецПроцедуры

// Функция возвращает данные номенклатуры из сервиса по идентификаторам
//
// Параметры:
//  ИдентификаторыНоменклатуры      - Массив, Строка - идентификаторы запрашиваемой номенклатуры.
//  РежимПроверкиПередЗагрузкой     - Булево - если Истина, функция вернет минимальный набор данных, 
//                                             необходимых для предварительной проверки номенклатуры.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - колонки:
//    * Артикул                    - Строка - артикул номенклатуры
//    * Бренд                      - Структура - описание бренда.
//      Ключи:
//      ** ДатаИзменения             - Дата - дата последнего изменения бренда в сервисе.
//      ** Идентификатор             - Строка - идентификатор бренда.
//      ** ИдентификаторПроизводителя - Строка - идентификатор производителя.
//      ** Логотипы                  - Массив - массив ссылок на логотипы.
//      ** Наименование              - Строка - наименование бренда.
//      ** НаименованиеПроизводителя - Строка - наименование производителя.
//    * ВидНоменклатурыПоУмолчанию   - Структура - данные по виду номенклатуры, который будет присвоен номенклатуре при создании.
//    Ключи:
//      ** ВидНоменклатуры                          - Ссылка - ссылка на вид номенклатуры в информационной базе.
//      ** ЗагружатьХарактеристикиВХарактеристики   - Булево - флаг загрузки характеристик в характеристики вида номенклатуры,
//                                                           а не в дополнительные реквизиты.
//      ** ИндивидуальныеХарактеристикиНоменклатуры - Булево - флаг использования индивидуальных характеристик номенклатуры данного вида.
//    * ДатаИзменения              - Дата - дата последнего изменения номенклатуры в сервисе.
//    * ДополнительныеРеквизиты    - ТаблицаЗначений - таблица дополнительных реквизитов.
//      Колонки:
//      ** Значение                - Произвольный - значение реквизита.
//      ** ЗначениеИнформационнойБазы - Ссылка - ссылка на значение в информационной базы для реквизитов с типом "Список" согласно регистру сведений
//                                               СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.
//      ** Идентификатор           - Строка - идентификатор реквизита.
//      ** ИдентификаторЗначения   - Строка - идентификатор значения.
//      ** КодКлассификатора       - Строка - код классификатора.
//      ** Наименование            - Строка - наименование реквизита.
//      ** НаименованиеКлассификатора - Строка - наименование классификатора.
//      ** ОписаниеКлассификатора     - Строка - описание классификатора.
//      ** РеквизитИнформационнойБазы - Ссылка - ссылка на реквизит информационной базы согласно регистру сведений СоответствиеРеквизитовРаботаСНоменклатурой.
//      ** СтроковоеЗначение          - Строка - строковое представление значения реквизита.
//    * ЕдиницаИзмерения           - Структура - данные по единице измерения.
//      Ключи:
//      ** БазовыйОКЕИ             - Строка - код базовой величины.
//      ** ВнутреннееНаименование  - Строка - международное сокращение единицы измерения.
//      ** ЗнаменательКратности    - Число - знаменатель кратности.
//      ** Наименование            - Строка - наименование единицы измерения.
//      ** ОКЕИ                    - Строка - код по ОКЕИ
//      ** ПолноеНаименование      - Строка - полное наименование.
//      ** Тип                     - Строка - тип измеряемой величины.
//      ** ЧислительКратности      - Число - числитель кратности.
//    * Идентификатор              - Строка - идентификатор номенклатуры в сервисе.
//    * ИдентификаторКатегории     - Строка - идентификатор категории номенклатуры в сервисе.
//    * Изображения                - Массив - массив ссылок на изображения.
//    * Категория                  - Структура - подробное описание категории номенклатуры. Набор ключей соответствует описанию РаботаСНоменклатурой.ДанныеКатегорийСервиса.
//    * Классификаторы             - ТаблицаЗначений - классификаторы.
//      Колонки:
//      ** Наименование            - Строка - наименование классификатора. Возможные значения: "OKPD2", "TNVED","EGAIS", "OKVED2"
//      ** Идентификатор           - Строка - идентификатор классификатора.
//      ** Описание                - Строка - описание классификатора.
//    * Наименование               - Строка - наименование номенклатуры.
//    * НаименованиеДляПечати      - Строка - наименование номенклатуры для печати.
//    * ОблагаетсяАкцизом          - Булево - флаг акциза.
//    * Описание                   - Строка - описание номенклатуры.
//    * Производитель              - Структура - описание производителя.
//      ** GLN                     - Строка - номер GLN
//      ** Адрес                   - Строка - адрес производителя.
//      ** ДатаИзменения           - Дата - дата последнего изменения производителя в сервисе.
//      ** ИНН                     - Строка - ИНН производителя.
//      ** Идентификатор           - Строка - идентификатор производителя.
//      ** КПП                     - Строка - КПП производителя.
//      ** Логотипы                - Массив - массив ссылок на логотипы.
//      ** Наименование            - Строка - наименование производителя.
//      ** Сайт                    - Строка - сайт производителя.
//      ** Телефоны                - Массив - массив строк телефонов.
//      ** Факс                    - Строка - факс производителя.
//      ** ЭлектроннаяПочта        - Массив - массив адресов электронной почты.
//    * СтавкаНДС                  - Строка - ставка НДС. Возможны значения: "18", "10", "-".
//    * Тип                        - Строка  - тип номенклатуры. Возможны значения: "Товар", "Услуга".
//    * УчастникГИСМ               - Булево - флаг ГИСМ.
//    * УчастникЕГАИС              - Булево - флаг ЕГАИС.
//    * УчетГТД                    - Булево - флаг ГТД.
//    * Характеристики             - ТаблицаЗначений - данные по характеристикам.
//      Колонки:
//      ** ДополнительныеРеквизиты - ТаблицаЗначений - реквизиты и значения характеристики. См. поле ДополнительныеРеквизиты.
//      ** Идентификатор           - Строка - идентификатор характеристики.
//      ** Наименование            - Строка - представление характеристики.
//      ** Штрихкоды               - Массив - (Строка) массив штрихкодов для характеристики.
//    * ШтрихКоды                  - Массив - массив штрихкодов.
//
Функция ДанныеНоменклатурыСервиса(ИдентификаторыНоменклатуры, РежимПроверкиПередЗагрузкой = Ложь) Экспорт
		
	Если ТипЗнч(ИдентификаторыНоменклатуры) = Тип("Строка")Тогда
		ИдентификаторыНоменклатуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыНоменклатуры);
	КонецЕсли;
	
	Если ИдентификаторыНоменклатуры.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отказ = Ложь;
	
	Если РежимПроверкиПередЗагрузкой Тогда
		ДанныеПоНоменклатуре = РаботаСНоменклатуройСлужебный.ПолучитьСтандартныйНаборДанныхПоНоменклатуре(ИдентификаторыНоменклатуры, Отказ);	
	Иначе
		ДанныеПоНоменклатуре = РаботаСНоменклатуройСлужебный.ПолучитьДанныеПоНоменклатуре(ИдентификаторыНоменклатуры, Ложь, Отказ);		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УбратьНеКупленнуюНоменклатуру(ИдентификаторыНоменклатуры, ДанныеПоНоменклатуре, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ДанныеПоНоменклатуре.Колонки.Добавить("Производитель");
	ДанныеПоНоменклатуре.Колонки.Добавить("Бренд");
	ДанныеПоНоменклатуре.Колонки.Добавить("Категория");
	ДанныеПоНоменклатуре.Колонки.Добавить("ВидНоменклатурыПоУмолчанию");
	
	ИдентификаторПроизводителей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеПоНоменклатуре.ВыгрузитьКолонку("ИдентификаторПроизводителя"));
	ИдентификаторБрендов        = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеПоНоменклатуре.ВыгрузитьКолонку("ИдентификаторБренда"));
	ИдентификаторКатегории      = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеПоНоменклатуре.ВыгрузитьКолонку("ИдентификаторКатегории"));
	
	СопоставленныеРеквизиты = Неопределено;
	ВидНоменклатуры = Неопределено;
		
	////////////////////////////////////////////////////////////////////////////////
	
	ЗаполнитьДанныеПоКатегориям(ИдентификаторКатегории, ДанныеПоНоменклатуре, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИдентификаторыХарактеристик = Новый Массив;
	
	ДополнитьДанныеПоНоменклатуре(ИдентификаторыХарактеристик, ДанныеПоНоменклатуре);
	
	ЗаполнитьРеквизитыИЗначенияХарактеристик(
		ИдентификаторыХарактеристик, ДанныеПоНоменклатуре, РежимПроверкиПередЗагрузкой, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Если НЕ РежимПроверкиПередЗагрузкой Тогда
		
		ЗаполнитьДанныеПоПроизводителям(ИдентификаторПроизводителей, ДанныеПоНоменклатуре, Отказ);
		
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ЗаполнитьДанныеПоБрендам(ИдентификаторБрендов, ДанныеПоНоменклатуре, Отказ);
		
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	ДанныеПоНоменклатуре.Колонки.Удалить("ИдентификаторПроизводителя");
	ДанныеПоНоменклатуре.Колонки.Удалить("ИдентификаторБренда");
	
	ДанныеПоНоменклатуре.Колонки.Удалить("НаименованиеПроизводителя");
	ДанныеПоНоменклатуре.Колонки.Удалить("НаименованиеБренда");
	ДанныеПоНоменклатуре.Колонки.Удалить("НаименованиеКатегории");
	
	ДанныеПоНоменклатуре.Колонки.Удалить("ИдентификаторРекламнойЗаписи");
	
	РаботаСНоменклатуройПереопределяемый.ПриПолученииДанныхИзСервисаПоНоменклатуре(ДанныеПоНоменклатуре);
	
	Возврат ДанныеПоНоменклатуре;
	
КонецФункции


#Область СозданиеНоменклатуры

// Создание номенклатуры с замером времени.
//
// Параметры:
//  ИдентификаторыНоменклатуры		 - Строка - идентификатор номенклатуры.
//  АдресРезультата					 - Строка - адрес результата.
//  АдресДополнительногоРезультата	 - Строка - адрес дополнительного результата.
//
Процедура СоздатьНоменклатуру(Знач ИдентификаторыНоменклатуры, Знач АдресРезультата, Знач АдресДополнительногоРезультата) Экспорт
	
	Начало = ОценкаПроизводительности.НачатьЗамерВремени();
	ВесЗамера = ИдентификаторыНоменклатуры.Количество();
	
	ПараметрСоздания = РаботаСНоменклатуройСлужебныйКлиентСервер.ОписаниеПараметровСозданияПроцедуры();
	ПараметрСоздания.ИдентификаторыНоменклатуры = ИдентификаторыНоменклатуры;
	
	СозданиеНоменклатуры(ПараметрСоздания, АдресРезультата, АдресДополнительногоРезультата);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ОбщийМодуль.РаботаСНоменклатурой.СозданиеНоменклатуры", Начало, ВесЗамера);
	
КонецПроцедуры

// Создание номенклатуры с параметрами.
//
// Параметры:
//  ПараметрыПроцедуры		         - Структура - параметры создания.
//  АдресРезультата					 - Строка - адрес результата.
//  АдресДополнительногоРезультата	 - Строка - адрес дополнительного результата.
//
Процедура СоздатьНоменклатуруСУсловиями(Знач ПараметрыПроцедуры, Знач АдресРезультата, Знач АдресДополнительногоРезультата) Экспорт
	
	Начало = ОценкаПроизводительности.НачатьЗамерВремени();
	
	
	ПараметрСоздания = РаботаСНоменклатуройСлужебныйКлиентСервер.ОписаниеПараметровСозданияПроцедуры();
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрСоздания, ПараметрыПроцедуры, Истина);
	
	ВесЗамера = ПараметрыПроцедуры.ИдентификаторыНоменклатуры.Количество();
	
	СозданиеНоменклатуры(ПараметрСоздания, АдресРезультата, АдресДополнительногоРезультата);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ОбщийМодуль.РаботаСНоменклатурой.СозданиеНоменклатуры", Начало, ВесЗамера);
	
КонецПроцедуры

// Заполнение таблицы соответствия объектов информационной базы и объектов сервиса.
//
// Параметры:
//  ИдентификаторыКатегорий	 - Массив (Строка) - идентификаторы категорий.
//  СопоставленныеРеквизиты	 - ДеревоЗначений - дерево сопоставлений.
//  ВидНоменклатуры			 - Ссылка - вид номенклатуры.
// 
Процедура ПолучитьСоответствиеРеквизитовИЗначений(ИдентификаторыКатегорий, СопоставленныеРеквизиты, ВидНоменклатуры = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеВидовНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
	|	СоответствиеВидовНоменклатуры.ИдентификаторКатегории КАК ИдентификаторКатегории,
	|	СоответствиеВидовНоменклатуры.ЗагружатьХарактеристикиВХарактеристики КАК ЗагружатьХарактеристикиВХарактеристики,
	|	СоответствиеВидовНоменклатуры.ОбновляетсяАвтоматически КАК ОбновляетсяАвтоматически,
	|	ЕСТЬNULL(СоответствиеРеквизитов.РеквизитОбъекта, """") КАК РеквизитОбъекта,
	|	ЕСТЬNULL(СоответствиеРеквизитов.ИдентификаторРеквизитаКатегории, """") КАК ИдентификаторРеквизитаКатегории,
	|	ЕСТЬNULL(СоответствиеРеквизитов.ПредставлениеРеквизитаКатегории, """") КАК ПредставлениеРеквизитаКатегории,
	|	ЕСТЬNULL(СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.Значение, НЕОПРЕДЕЛЕНО) КАК ЗначениеОбъекта,
	|	ЕСТЬNULL(СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.ИдентификаторЗначенияРеквизитаКатегории, """") КАК ИдентификаторЗначения
	|ИЗ
	|	РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеРеквизитов
	|		ПО СоответствиеВидовНоменклатуры.ВидНоменклатуры = СоответствиеРеквизитов.ОбъектСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой КАК СоответствиеЗначенийРеквизитовРаботаСНоменклатурой
	|		ПО (СоответствиеРеквизитов.ОбъектСопоставления = СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.ОбъектСопоставления)
	|			И (СоответствиеРеквизитов.РеквизитОбъекта = СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.РеквизитОбъекта)
	|ГДЕ
	|	СоответствиеВидовНоменклатуры.ИдентификаторКатегории В(&ИдентификаторыКатегорий)
	|	И (&ПоВсемВидамНоменклатуры
	|			ИЛИ СоответствиеВидовНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры)
	|ИТОГИ
	|	МАКСИМУМ(ЗагружатьХарактеристикиВХарактеристики),
	|	МАКСИМУМ(ОбновляетсяАвтоматически),
	|	МАКСИМУМ(РеквизитОбъекта)
	|ПО
	|	ИдентификаторКатегории,
	|	ВидНоменклатуры,
	|	ИдентификаторРеквизитаКатегории";
		
	Запрос.УстановитьПараметр("ИдентификаторыКатегорий", ИдентификаторыКатегорий);
	Запрос.УстановитьПараметр("ПоВсемВидамНоменклатуры", ВидНоменклатуры = Неопределено);
	Запрос.УстановитьПараметр("ВидНоменклатуры",         ВидНоменклатуры);
	
	СопоставленныеРеквизиты = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаботаСРекламойИсточников

// Кэширование изображения баннеров для отображения на формах.
//
// Параметры:
//  ХранилищеКэшей	 - Соответствие - хранилище кэшей.
//  АдресРезультата	 - Строка - адрес результата.
//
Процедура ЗакэшироватьИзображенияБаннеров(Знач ХранилищеКэшей, Знач АдресРезультата) Экспорт 
	
	ИдентификаторыРекламныхЗаписей = Новый Массив;
	Для Каждого ЗаписьХранилищаКэшей Из ХранилищеКэшей Цикл
		ИдентификаторыРекламныхЗаписей.Добавить(ЗаписьХранилищаКэшей.Ключ);
	КонецЦикла;
		
	ПараметрыПоиска = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаРекламныеЗаписи();
	ПараметрыПоиска.Идентификаторы = ИдентификаторыРекламныхЗаписей;
	
	Отказ = Ложь;
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаРекламныеЗаписи(ПараметрыПоиска);
	РекламныеЗаписи = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого РекламнаяЗапись Из РекламныеЗаписи Цикл 
		
		ЗаписьКэша = ХранилищеКэшей.Получить(РекламнаяЗапись.Идентификатор);
		Если Не ЗаписьКэша = Неопределено Тогда 
			ЗаписьКэша.АдресИзображения        = РекламнаяЗапись.БаннерURL;
			ЗаписьКэша.СсылкаПереходаПоБаннеру = РекламнаяЗапись.Сайт;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЗаписьХранилищаКэшей Из ХранилищеКэшей Цикл
		ПоместитьВоВременноеХранилище(
			РаботаСНоменклатуройСлужебный.ДвоичныеДанныеПоАдресуURL(ЗаписьХранилищаКэшей.Значение.АдресИзображения), ЗаписьХранилищаКэшей.Значение.ПутьКДаннымБаннера); 
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ХранилищеКэшей, АдресРезультата);
	
КонецПроцедуры

// Кэширование изображения.
//
// Параметры:
//  ХранилищеКэшей	 - Соответствие - хранилище кэшей.
//  АдресРезультата	 - Строка - адрес результата.
//
Процедура ЗакэшироватьИзображения(Знач ХранилищеКэшей, Знач АдресРезультата) Экспорт 
	
	Для Каждого ЗаписьХранилищаКэшей Из ХранилищеКэшей Цикл
		ПоместитьВоВременноеХранилище(
			РаботаСНоменклатуройСлужебный.ДвоичныеДанныеПоАдресуURL(ЗаписьХранилищаКэшей.АдресИзображения), ЗаписьХранилищаКэшей.ПутьКДаннымИзображения); 
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ХранилищеКэшей, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДанных

// Получение измененных объектов по дате последнего обновления.
//
// Параметры:
//  ДанныеДляОтправки	 - ТаблицаЗначений - таблица дат с идентификаторами.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - измененные объекты.
//
Функция ПолучитьИзмененияИзСервисаПоНоменклатуре(ДанныеДляОтправки) Экспорт
	
	Если ДанныеДляОтправки.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Результат = Новый ТаблицаЗначений;
	Отказ = Ложь;
	
	ОтправитьДанныеПорционно(Результат, ДанныеДляОтправки, "Номенклатура", Отказ);
	
	Возврат Результат;	
	
КонецФункции

// Получение измененных объектов по дате последнего обновления.
//
// Параметры:
//  ДанныеДляОтправки	 - ТаблицаЗначений - таблица дат с идентификаторами.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - измененные объекты.
//
Функция ПолучитьИзмененияИзСервисаПоВидамНоменклатуры(ДанныеДляОтправки) Экспорт
	
	Если ДанныеДляОтправки.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Результат = Новый ТаблицаЗначений;
	Отказ = Ложь;
	
	ОтправитьДанныеПорционно(Результат, ДанныеДляОтправки, "Категории", Отказ);
	
	Возврат Результат;	
			
КонецФункции

Процедура ПолучитьОбновленияВидовНоменклатуры(ОбновляемыеОбъекты, АдресРезультата) Экспорт
	
	РезультатАнализаВидовНоменклатуры = Новый ТаблицаЗначений;	
	ДатыОбновленияВидовНоменклатуры   = Новый ТаблицаЗначений;
	ИдентификаторыКатегорий           = Новый Массив;
	
	РаботаСНоменклатуройСлужебный.ПолучитьДатыОбновленияВидовНоменклатуры(ДатыОбновленияВидовНоменклатуры, Истина);
	
	Если ДатыОбновленияВидовНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбновляемыеОбъекты = Неопределено Тогда
		
		ДанныеОбновленияПоВидамНоменклатуры = ПолучитьИзмененияИзСервисаПоВидамНоменклатуры(ДатыОбновленияВидовНоменклатуры);
		
		Если ДанныеОбновленияПоВидамНоменклатуры.Количество() > 0  Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИдентификаторыКатегорий, ДанныеОбновленияПоВидамНоменклатуры.ВыгрузитьКолонку("Идентификатор"), Истина);	
		КонецЕсли;
		
	Иначе 
		
		ИдентификаторКатегории = ПолучитьСоответствиеВидовНоменклатурыПоСсылкам(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбновляемыеОбъекты));
		
		Если ИдентификаторКатегории.Количество() = 0 Тогда
			Возврат;
		КонецЕсли; 	
		
		ИдентификаторыКатегорий = ИдентификаторКатегории.ВыгрузитьКолонку("ИдентификаторКатегории");
	КонецЕсли; 
		
	РаботаСНоменклатуройСлужебный.РазобратьИзмененияВидовНоменклатуры(ИдентификаторыКатегорий, РезультатАнализаВидовНоменклатуры, ОбновляемыеОбъекты);
	
	ПоместитьВоВременноеХранилище(РезультатАнализаВидовНоменклатуры, АдресРезультата);
	
КонецПроцедуры

Процедура ПолучитьОбновленияНоменклатуры(ОбновляемыеОбъекты, АдресРезультата) Экспорт
	
	ДатыОбновленияНоменклатуры         = Новый ТаблицаЗначений;
	РезультатАнализаНоменклатуры       = Новый ТаблицаЗначений;
	РеквизитыНоменклатурыДляОбновления = Новый ТаблицаЗначений;
	ИдентификаторыНоменклатуры         = Новый Массив;
	
	РеквизитыНоменклатурыДляОбновления.Колонки.Добавить("Номенклатура");
	РеквизитыНоменклатурыДляОбновления.Колонки.Добавить("РеквизитОбъекта");
	РеквизитыНоменклатурыДляОбновления.Колонки.Добавить("НовоеЗначение");
	РеквизитыНоменклатурыДляОбновления.Колонки.Добавить("ИдентификаторЗначения", Новый ОписаниеТипов("Строка"));
	РеквизитыНоменклатурыДляОбновления.Колонки.Добавить("ЯвляетсяДополнительнымРеквизитом", Новый ОписаниеТипов("Булево"));	
	
	Если ОбновляемыеОбъекты = Неопределено Тогда
		
		РаботаСНоменклатуройСлужебный.ПолучитьДатыОбновленияНоменклатуры(ДатыОбновленияНоменклатуры, Истина);
		
		Если ДатыОбновленияНоменклатуры.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеОбновленияПоНоменклатуре = ПолучитьИзмененияИзСервисаПоНоменклатуре(ДатыОбновленияНоменклатуры);
		ИдентификаторыНоменклатуры = ДанныеОбновленияПоНоменклатуре.ВыгрузитьКолонку("Идентификатор");
	Иначе 
		
		ИдентификаторНоменклатуры = ПолучитьСоответствиеНоменклатурыПоСсылкамНоменклатуры(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбновляемыеОбъекты));
			
		Если ИдентификаторНоменклатуры.Количество() = 0 Тогда
			Возврат;
		КонецЕсли; 	
		
		ИдентификаторыНоменклатуры = ИдентификаторНоменклатуры.ВыгрузитьКолонку("ИдентификаторНоменклатурыСервиса");
	КонецЕсли; 
		
	РаботаСНоменклатуройСлужебный.РазобратьИзмененияНоменклатуры(
		ИдентификаторыНоменклатуры, 
		РезультатАнализаНоменклатуры, 
		РеквизитыНоменклатурыДляОбновления,
		ОбновляемыеОбъекты);
	
	Результат = Новый Структура("РезультатАнализаНоменклатуры, РеквизитыНоменклатурыДляОбновления",
		РезультатАнализаНоменклатуры,
		РеквизитыНоменклатурыДляОбновления);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхИзСервиса

#Область ДанныеПоКатегориям

// Получение списка дополнительных реквизитов категории.
//
// Параметры:
//  ИдентификаторКатегории	 - Строка - идентификатор категории.
//  АдресРезультата			 - Строка - адрес результата.
//
Процедура ПолучитьДополнительныеРеквизитыКатегорий(Знач ИдентификаторКатегории, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаДополнительныеРеквизиты();
	ПараметрыЗапроса.ИдентификаторыКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторКатегории);
	ПараметрыЗапроса.НаборПолей              = РаботаСНоменклатуройСлужебный.НаборПолейМаксимальный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаДополнительныеРеквизиты(ПараметрыЗапроса);
	
	ТаблицаРеквизитов = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ТаблицаРеквизитов, АдресРезультата);
	
КонецПроцедуры

// Получение списка значений дополнительного реквизита категории.
//
// Параметры:
//  ПараметрыПоиска	 - Структура - параметры поиска.
//  АдресРезультата			 - Строка - адрес результата.
//
Процедура ПолучитьЗначенияДополнительногоРеквизитаКатегории(Знач ПараметрыПоиска, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если Не (ПараметрыПоиска.Свойство("ИдентификаторКатегории")
			И ПараметрыПоиска.Свойство("ИдентификаторДополнительногоРеквизита")) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаЗначенияДополнительныхРеквизитовКатегорий();
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса.ТаблицаПоиска.Добавить(), ПараметрыПоиска);
		
	ПараметрыЗапроса.НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейСтандартный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаЗначенияДополнительныхРеквизитовКатегорий(ПараметрыЗапроса);
	
	ТаблицаЗначений = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ТаблицаЗначений, АдресРезультата);
	
КонецПроцедуры

// Получение списка производителей категории.
//
// Параметры:
//  ИдентификаторКатегории	 - Строка - идентификатор категории.
//  АдресРезультата			 - Строка - адрес результата.
//
Процедура ПолучитьПроизводителейКатегории(Знач ИдентификаторКатегории, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаПроизводители();
	ПараметрыЗапроса.ИдентификаторыКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторКатегории);
	ПараметрыЗапроса.НаборПолей              = РаботаСНоменклатуройСлужебный.НаборПолейМинимальный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаПроизводители(ПараметрыЗапроса);
	Производители    = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Производители, АдресРезультата);
	
КонецПроцедуры

// Получение пути к категории.
//
// Параметры:
//  ИдентификаторКатегории	 - Строка - идентификатор категории.
//  АдресРезультата			 - Строка - адрес результата.
//
Процедура ПолучитьКатегорииНаПутиКЭлементу(Знач ИдентификаторКатегории, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;

	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаВсеРодительскиеКатегории(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторКатегории));
	ИдентификаторыКатегорийУзлов = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторыКатегорийУзлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыКатегорийУзлов = ИдентификаторыКатегорийУзлов[0];
	
	Если ТипЗнч(ИдентификаторыКатегорийУзлов) <> Тип("ТаблицаЗначений") 
		ИЛИ ИдентификаторыКатегорийУзлов.Количество() = 0 Тогда 
		
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
	ПараметрыПоиска.ИдентификаторыРодителей = ИдентификаторыКатегорийУзлов.ВыгрузитьКолонку("Идентификатор");
	ПараметрыПоиска.НаборПолей              = РаботаСНоменклатуройСлужебный.НаборПолейМаксимальный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПараметрыПоиска);
	ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПутиДоКатегорий(ТаблицаКатегорий);
	ЗаполнитьСоответствиеВидовНоменклатуры(ТаблицаКатегорий);
	
	Результат = Новый Структура();
	Результат.Вставить("ИдентификаторыКатегорийУзлов", ИдентификаторыКатегорийУзлов.ВыгрузитьКолонку("Идентификатор"));
	Результат.Вставить("ТаблицаКатегорий", ТаблицаКатегорий);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение корневых категорий.
//
// Параметры:
//  Параметры		 - Структура - параметры процедуры.
//  АдресРезультата			 - Строка - адрес результата.
//
Процедура ПолучитьКорневыеКатегории(Знач Параметры, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	ПоисковыйЗапрос = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
	ПоисковыйЗапрос.ТолькоКорневые = Истина;
	ПоисковыйЗапрос.НаборПолей     = РаботаСНоменклатуройСлужебный.НаборПолейСтандартный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
	ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если НЕ Отказ Тогда
		ЗаполнитьСоответствиеВидовНоменклатуры(ТаблицаКатегорий);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ТаблицаКатегорий, АдресРезультата);
	
КонецПроцедуры

// Получение списка фильтров категорий.
//
// Параметры:
//  ИдентификаторКатегории	 - Строка - идентификатор категории.
//  АдресРезультата			 - Строка - адрес результата.
//
Процедура ПолучитьФильтрыКатегории(Знач ИдентификаторКатегории, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	// Получение фильтров категории
	ПоисковыйЗапрос = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
	ПоисковыйЗапрос.Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторКатегории);
	ПоисковыйЗапрос.НаборПолей     = РаботаСНоменклатуройСлужебный.НаборПолейМаксимальный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
	ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаКатегорий.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ДополнительныеРеквизиты = ТаблицаКатегорий[0].ДополнительныеРеквизиты;
	ДополнительныеРеквизиты.Колонки.Добавить("ЕдиницаИзмерения");
	
	Если ДополнительныеРеквизиты.Количество() Тогда 
		ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаДополнительныеРеквизиты();
		ПараметрыЗапроса.Идентификаторы = ДополнительныеРеквизиты.ВыгрузитьКолонку("Идентификатор");
		ПараметрыЗапроса.НаборПолей              = РаботаСНоменклатуройСлужебный.НаборПолейМаксимальный();
		
		ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаДополнительныеРеквизиты(ПараметрыЗапроса);
		
		ТаблицаРеквизитов = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
		Если Не Отказ Тогда
			Для Каждого Реквизит Из ДополнительныеРеквизиты Цикл 
				ДопРеквизит = ТаблицаРеквизитов.Найти(Реквизит.Идентификатор, "Идентификатор"); 
				Если Не ДопРеквизит = Неопределено Тогда 
					Реквизит.ЕдиницаИзмерения = ДопРеквизит.ЕдиницаИзмерения;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Получение производителей категории
	ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаПроизводители();
	ПараметрыЗапроса.ИдентификаторыКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторКатегории);
	ПараметрыЗапроса.НаборПолей              = РаботаСНоменклатуройСлужебный.НаборПолейМинимальный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаПроизводители(ПараметрыЗапроса);
	Производители    = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	ДополнительныеРеквизиты.Сортировать("Ранг Возр, Наименование Возр");
	
	Если  Не ДополнительныеРеквизиты = Неопределено
		И Не Производители = Неопределено
		И Производители.Количество() Тогда
		
		ФильтрПоПроизводителю = ДополнительныеРеквизиты.Вставить(0);
		ФильтрПоПроизводителю.Наименование  = НСтр("ru = 'Производитель'");
		ФильтрПоПроизводителю.Тип           = "Список";
		ФильтрПоПроизводителю.Идентификатор = "Производитель";
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ДополнительныеРеквизиты, АдресРезультата);
	
КонецПроцедуры

// Получение пути к категории.
//
// Параметры:
//  ИдентификаторКатегории	 - Строка - идентификатор категории.
//  АдресРезультата			 - Строка - адрес результата.
//
Процедура ПолучитьКатегорииНаПутиКЭлементуСКорневымиКатегориями(Знач ИдентификаторКатегории, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;

	ПоисковыйЗапрос = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
	ПоисковыйЗапрос.ТолькоКорневые = Истина;
	ПоисковыйЗапрос.НаборПолей     = РаботаСНоменклатуройСлужебный.НаборПолейСтандартный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
	КорневыеКатегории = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаВсеРодительскиеКатегории(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторКатегории));
	ИдентификаторыКатегорийУзлов = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторыКатегорийУзлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыКатегорийУзлов = ИдентификаторыКатегорийУзлов[0];
	
	Если ТипЗнч(ИдентификаторыКатегорийУзлов) <> Тип("ТаблицаЗначений") 
		ИЛИ ИдентификаторыКатегорийУзлов.Количество() = 0 Тогда 
		
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
	ПараметрыПоиска.ИдентификаторыРодителей = ИдентификаторыКатегорийУзлов.ВыгрузитьКолонку("Идентификатор");
	ПараметрыПоиска.НаборПолей              = РаботаСНоменклатуройСлужебный.НаборПолейМаксимальный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПараметрыПоиска);
	ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПутиДоКатегорий(ТаблицаКатегорий);
	ЗаполнитьСоответствиеВидовНоменклатуры(ТаблицаКатегорий);
	
	Результат = Новый Структура();
	Результат.Вставить("ИдентификаторыКатегорийУзлов", ИдентификаторыКатегорийУзлов.ВыгрузитьКолонку("Идентификатор"));
	Результат.Вставить("ТаблицаКатегорий",  ТаблицаКатегорий);
	Результат.Вставить("КорневыеКатегории", КорневыеКатегории);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Поиск категорий по строке поиска.
//
// Параметры:
//  ПоисковаяСтрока	 - Строка - поисковая строка.
//  АдресРезультата	 - Строка - адрес результата.
//
Процедура НайтиКатегорииПоСтрокеПоиска(Знач ПоисковаяСтрока, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	ПоисковыйЗапрос = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
	ПоисковыйЗапрос.ПоисковаяСтрока   = ПоисковаяСтрока;
	ПоисковыйЗапрос.НаборПолей        = РаботаСНоменклатуройСлужебный.НаборПолейМаксимальный();
	ПоисковыйЗапрос.КоличествоЗаписей = 100;
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
	ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если НЕ Отказ Тогда
		
		ЗаполнитьПутиДоКатегорий(ТаблицаКатегорий);
		ЗаполнитьСоответствиеВидовНоменклатуры(ТаблицаКатегорий);
		
	КонецЕсли;
		
	ПоместитьВоВременноеХранилище(ТаблицаКатегорий, АдресРезультата);
	
КонецПроцедуры

#Область ПолучитьСписокДочернихКатегорий

// Получить список дочерних категорий.
//
// Параметры:
//  Идентификатор	 - Строка - идентификатор категории.
//  АдресРезультата	 - Строка - адрес результата.
//
Процедура ПолучитьПредставлениеДочернихКатегорий(Знач Идентификатор, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	ПоисковыйЗапрос = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
	ПоисковыйЗапрос.ИдентификаторыРодителей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификатор);
	ПоисковыйЗапрос.НаборПолей              = РаботаСНоменклатуройСлужебный.НаборПолейМинимальный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
	ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
	ПоместитьВоВременноеХранилище(ТаблицаКатегорий, АдресРезультата);
	
КонецПроцедуры

// Получить список дочерних категорий.
//
// Параметры:
//  Идентификатор	 - Строка - идентификатор категории.
//  АдресРезультата	 - Строка - адрес результата.
//
Процедура ПолучитьКраткоеОписаниеДочернихКатегорий(Знач Идентификатор, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	ПоисковыйЗапрос = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
	ПоисковыйЗапрос.ИдентификаторыРодителей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификатор);
	ПоисковыйЗапрос.НаборПолей              = РаботаСНоменклатуройСлужебный.НаборПолейСтандартный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
	ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
	ПоместитьВоВременноеХранилище(ТаблицаКатегорий, АдресРезультата);
	
КонецПроцедуры

// Получить список дочерних категорий.
//
// Параметры:
//  Идентификатор	 - Строка - идентификатор категории.
//  АдресРезультата	 - Строка - адрес результата.
//
Процедура ПолучитьПолноеОписаниеДочернихКатегорий(Знач Идентификатор, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	ПоисковыйЗапрос = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
	ПоисковыйЗапрос.ИдентификаторыРодителей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификатор);
	ПоисковыйЗапрос.НаборПолей              = РаботаСНоменклатуройСлужебный.НаборПолейМаксимальный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
	ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если НЕ Отказ Тогда
		
		ЗаполнитьПутиДоКатегорий(ТаблицаКатегорий);
		ЗаполнитьСоответствиеВидовНоменклатуры(ТаблицаКатегорий);
	
	КонецЕсли;
		
	ПоместитьВоВременноеХранилище(ТаблицаКатегорий, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучитьКатегориюПоИдентификатору

// Получение представления категории по идентификатору.
//
// Параметры:
//  Идентификатор	 - Строка - идентификатор категории.
//  АдресРезультата	 - Строка - адрес результата.
//
Процедура ПолучитьПредставлениеКатегорииПоИдентификатору(Знач Идентификатор, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	ПоисковыйЗапрос = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
	ПоисковыйЗапрос.Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификатор);
	ПоисковыйЗапрос.НаборПолей     = РаботаСНоменклатуройСлужебный.НаборПолейМинимальный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
	ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
	ПоместитьВоВременноеХранилище(ТаблицаКатегорий, АдресРезультата);
	
КонецПроцедуры

// Получение описания категории по идентификатору
//
// Параметры:
//  Идентификатор	 - Строка - идентификатор категории.
//  АдресРезультата	 - Строка - адрес результата.
//
Процедура ПолучитьОписаниеКатегорииПоИдентификатору(Знач Идентификатор, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	ПоисковыйЗапрос = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
	ПоисковыйЗапрос.Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификатор);
	ПоисковыйЗапрос.НаборПолей     = РаботаСНоменклатуройСлужебный.НаборПолейСтандартный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
	ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
	ПоместитьВоВременноеХранилище(ТаблицаКатегорий, АдресРезультата);
	
КонецПроцедуры

// Получение полного описания категории по идентификатору
//
// Параметры:
//  Идентификатор	 - Строка - идентификатор категории.
//  АдресРезультата	 - Строка - адрес результата.
// 
// Возвращаемое значение:
//  ТаблицаЗначений, Неопределено - данные по категории.
//
Функция ПолучитьПолноеОписаниеКатегорииПоИдентификатору(Знач Идентификатор, Знач АдресРезультата = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	ПоисковыйЗапрос = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
	ПоисковыйЗапрос.Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификатор);
	ПоисковыйЗапрос.НаборПолей     = РаботаСНоменклатуройСлужебный.НаборПолейМаксимальный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
	ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	ЗаполнитьПутиДоКатегорий(ТаблицаКатегорий);
	ЗаполнитьСоответствиеВидовНоменклатуры(ТаблицаКатегорий);
		
	Если ЗначениеЗаполнено(АдресРезультата) Тогда 
		ПоместитьВоВременноеХранилище(ТаблицаКатегорий, АдресРезультата);
	Иначе
		Возврат ТаблицаКатегорий;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ДанныеПоНоменклатуре

// Получение списка номенклатуры.
//
// Параметры:
//  ПараметрыПоиска	 - Структура - параметры поиска.
//  АдресРезультата	 - Строка - адрес результата.
//
Процедура ПолучитьПереченьНоменклатуры(Знач ПараметрыПоиска, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	ТекущийБалансКарточек = ТекущийБаланс(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыИсключения = "";
	ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаНоменклатура();
	Если ПараметрыПоиска.Свойство("ДополнительныеРеквизиты") Тогда 
		РеквизитыИсключения = "ДополнительныеРеквизиты";
		Для Каждого Реквизит Из ПараметрыПоиска.ДополнительныеРеквизиты Цикл 
			ЗаполнитьЗначенияСвойств(ПараметрыЗапроса.ДополнительныеРеквизиты.Добавить(), Реквизит)
		КонецЦикла;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ПараметрыПоиска,, РеквизитыИсключения);
	ПараметрыЗапроса.НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейСтандартный();
	ПараметрыЗапроса.КоличествоЗаписей = 500;
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаНоменклатура(ПараметрыЗапроса);
	
	ТаблицаНоменклатуры = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНоменклатуры.Колонки.Добавить("ПредставлениеЕдиницыИзмерения", Новый ОписаниеТипов("Строка"));
	Для Каждого Номенклатура Из ТаблицаНоменклатуры Цикл 
		Если Номенклатура.ЕдиницаИзмерения.Свойство("Наименование") Тогда
			Номенклатура.ПредставлениеЕдиницыИзмерения = Номенклатура.ЕдиницаИзмерения.Наименование;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеИзСервиса", ТаблицаНоменклатуры.Скопировать(,"Идентификатор, ИдентификаторКатегории, Наименование, НаименованиеПроизводителя, ПредставлениеЕдиницыИзмерения"));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеИзСервиса.Идентификатор КАК Идентификатор,
	               |	ДанныеИзСервиса.ИдентификаторКатегории КАК ИдентификаторКатегории,
	               |	ДанныеИзСервиса.Наименование КАК Наименование,
	               |	ДанныеИзСервиса.НаименованиеПроизводителя КАК НаименованиеПроизводителя,
	               |	ДанныеИзСервиса.ПредставлениеЕдиницыИзмерения КАК ПредставлениеЕдиницыИзмерения
	               |ПОМЕСТИТЬ ДанныеИзСервиса
	               |ИЗ
	               |	&ДанныеИзСервиса КАК ДанныеИзСервиса
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеИзСервиса.Идентификатор КАК Идентификатор,
	               |	ИСТИНА В
	               |		(ВЫБРАТЬ ПЕРВЫЕ 1
	               |			ИСТИНА
	               |		ИЗ
	               |			РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	               |		ГДЕ
	               |			СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса = (ВЫРАЗИТЬ(ДанныеИзСервиса.Идентификатор КАК СТРОКА(32)))) КАК Загружена,
	               |	ДанныеИзСервиса.ИдентификаторКатегории КАК ИдентификаторКатегории,
	               |	ДанныеИзСервиса.Наименование КАК Наименование,
	               |	ДанныеИзСервиса.НаименованиеПроизводителя КАК НаименованиеПроизводителя,
	               |	ДанныеИзСервиса.ПредставлениеЕдиницыИзмерения КАК ПредставлениеЕдиницыИзмерения
	               |ИЗ
	               |	ДанныеИзСервиса КАК ДанныеИзСервиса";
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ПоместитьВоВременноеХранилище(
		Новый Структура("ПереченьНоменклатуры, ТекущийБаланс", ТаблицаНоменклатуры, ТекущийБалансКарточек), АдресРезультата);
	
КонецПроцедуры

// Получение данных номенклатуры по штрихкоду.
//
// Параметры:
//  ШтрихКод							 - Строка - штрих код.
//  ЗаполнитьСоответствиеНоменклатуры	 - Булево - заполнить ссылки на соответствующую номенклатуру базы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - данны номенклатуры.
//
Функция ПолучитьДанныеПоНоменклатуреПоШтрихкоду(Знач ШтрихКод, ЗаполнитьСоответствиеНоменклатуры = Ложь) Экспорт
	
	МассивШтрихКодов = Новый Массив;
	
	Если ТипЗнч(ШтрихКод) = Тип("Строка") Тогда
		МассивШтрихКодов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ШтрихКод);
	Иначе
		МассивШтрихКодов = ШтрихКод;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаНоменклатура();
	
	ПараметрыЗапроса.ШтрихКоды = МассивШтрихКодов;
	ПараметрыЗапроса.НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейМинимальный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаНоменклатура(ПараметрыЗапроса);
	
	Отказ = Ложь;
	
	ДанныеПоНоменклатуре = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеПоНоменклатуре;
	
КонецФункции

// Подсчет количества номенклатуры по строке поиска.
//
// Параметры:
//  СтрокаПоиска	 - Строка - строка поиска.
//  АдресРезультата	 - Строка - адрес результата.
//
Процедура КоличествоНоменклатурыПоСтрокеПоиска(Знач СтрокаПоиска, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаНоменклатура();
	ПараметрыЗапроса.НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейМинимальный();
	ПараметрыЗапроса.КоличествоЗаписей = 500;
	ПараметрыЗапроса.СтрокаПоиска = СтрокаПоиска;

	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаНоменклатура(ПараметрыЗапроса);
	ТаблицаНоменклатуры = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	КоличествоНоменклатуры = ТаблицаНоменклатуры.Количество();
	
	ПоместитьВоВременноеХранилище(КоличествоНоменклатуры, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РегламентныеЗадания

// Обновление номенклатуры.
//
Процедура ОбновлениеНоменклатуры() Экспорт 
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеНоменклатурыРаботаСНоменклатурой);
	
	Начало = ОценкаПроизводительности.НачатьЗамерВремени();
	ВесЗамера = 1;
	
	ВыполнитьОбновлениеНоменклатуры(ВесЗамера);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ОбщийМодуль.РаботаСНоменклатурой.ВыполнитьОбновлениеНоменклатуры", Начало, ВесЗамера);
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияПодсистемБиблиотеки

// Регистрирует список сервисов, которые доступны для
// использования в конфигурации.
//
// Параметры:
//   СервисыСопровождения - Массив    - массив структур, описывающий сервисы доступные для использовании в конфигурации;
//     Значение - Структура - см. ПодключениеСервисовСопровождения.НовыйОписательСервиса().
//
// Пример:
//  ОписательСервиса = ПодключениеСервисовСопровождения.НовыйОписательСервиса();
//  ОписательСервиса.Идентификатор   = "1C-Nomenclature";
//  ОписательСервиса.КартинкаСервиса = Метаданные.ОбщиеКартинки.ЛоготипСервисРаботаСНоменклатурой;
//  ОписательСервиса.Наименование    = НСтр("ru = '1С:Номенклатура'");
//  ОписательСервиса.ОписаниеСервиса = НСтр("ru = 'Быстрая проверка информации о контрагентах, автоматическое
//    |заполнение реквизитов контрагентов в различных документах и другие полезные функции.'");
//
//  СервисыСопровождения.Добавить(ОписательСервиса);
//
Процедура ПриДобавленииОписанийСервисовСопровождения(СервисыСопровождения) Экспорт
	
	ОписательСервиса = ПодключениеСервисовСопровождения.НовыйОписательСервиса();
	ОписательСервиса.Идентификатор   = РаботаСНоменклатуройСлужебныйКлиентСервер.ИдентификаторСервиса();
	ОписательСервиса.Картинка        = Метаданные.ОбщиеКартинки.ЛоготипСервисРаботаСНоменклатурой;
	ОписательСервиса.Наименование    = НСтр("ru = '1С:Номенклатура'");
	ОписательСервиса.Описание        = НСтр("ru = 'Поиск, загрузка и обновление номенклатуры и видов номенклатуры из сервиса 1С:Номенклатура'");
	
	СервисыСопровождения.Добавить(ОписательСервиса);
	
КонецПроцедуры

#КонецОбласти

#Область БиллингСервиса

// Проверка состояния сервиса.
//
// Параметры:
//  ПараметрыПроцедуры	 - Структура - параметры процедуры.
//  АдресРезультата		 - Строка - адрес результата.
//
Процедура ПроверитьСостояниеСервиса(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт 
	
	СостоянияСервиса = РаботаСНоменклатуройСлужебныйКлиентСервер.ОписаниеСостоянияСервиса();
	Отказ = Ложь;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		СостоянияСервиса.ПодключенаИнтернетПоддержка = Истина;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		ПараметрыАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		СостоянияСервиса.ПодключенаИнтернетПоддержка = ТипЗнч(ПараметрыАутентификации) = Тип("Структура");
	КонецЕсли;
	
	Если СостоянияСервиса.ПодключенаИнтернетПоддержка Тогда 
		
		СостоянияСервиса.ЕстьДоступныеОпции = ЕстьДоступныеОпции(Отказ);
		
		Если СостоянияСервиса.ЕстьДоступныеОпции = Ложь Тогда 
			
			СостоянияСервиса.ДоступенСтартовыйПакет = ДоступноПодключениеТестовогоПериода();
			
		КонецЕсли;
		
	КонецЕсли;
	
	СостоянияСервиса.ОшибкаОпределенияСостояния = Отказ;
	
	ПоместитьВоВременноеХранилище(СостоянияСервиса, АдресРезультата);
	
КонецПроцедуры 

// Проверка доступности тестового периода.
// 
// Возвращаемое значение:
//  Булево - результат проверки.
//
Функция ДоступноПодключениеТестовогоПериода() Экспорт 
	
	ИдентификаторСервиса = РаботаСНоменклатуройСлужебныйКлиентСервер.ИдентификаторСервиса();
	Идентификаторы = Новый Массив;
	Идентификаторы.Добавить(ИдентификаторСервиса);
	РезультатПроверки = ПодключениеСервисовСопровождения.ДоступноПодключениеТестовогоПериода(Идентификаторы);
	СтатусПодключения = РезультатПроверки.СервисыСопровождения.Получить(ИдентификаторСервиса);
	Возврат СтатусПодключения = "Доступно";
	
КонецФункции

// Покупка карточек номенклатуры.
//
// Параметры:
//  ИдентификаторыНоменклатуры	 - Массив (Строка) - идентификаторы номенклатуры.
//  Отказ						 - Булево - признак отказа.
// 
// Возвращаемое значение:
//  Структура - информация об ошибки.
//    Ключи:
//    * ЕстьОшибки - Булево - признак того, что есть ошибки при покупке.
//    * ОписаниеОшибки - Структура - описание ошибки.
//
Функция ПокупкаКарточекНоменклатуры(Знач ИдентификаторыНоменклатуры, Отказ) Экспорт
	
	ОписаниеОшибки = РаботаСНоменклатуройСлужебныйКлиентСервер.ОписаниеОшибкиПокупкиНоменклатуры();

	Результат = Новый Структура();
	Результат.Вставить("ЕстьОшибки",  Ложь);
	Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки);

	ЗагружаемоеКоличество = ИдентификаторыНоменклатуры.Количество();
	ТекущийБаланс         = ТекущийБаланс(Отказ);
	
	Результат.ОписаниеОшибки.ДоступныйОстаток     = ТекущийБаланс;
	Результат.ОписаниеОшибки.ПокупаемоеКоличество = ЗагружаемоеКоличество;
	
	Если Отказ Тогда 
		Возврат Неопределено;
	ИначеЕсли ТекущийБаланс = 0 Тогда 
		Результат.ЕстьОшибки = Истина;
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаПокупкаНоменклатуры(ИдентификаторыНоменклатуры);
	Куплено = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ ИЛИ Куплено = Неопределено Тогда 
		Возврат Неопределено;
	ИначеЕсли Не Куплено Тогда 
		Результат.ЕстьОшибки = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура КупитьКарточкиНоменклатуры(Знач ИдентификаторыНоменклатуры, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	РезультатПокупки = ПокупкаКарточекНоменклатуры(ИдентификаторыНоменклатуры, Отказ);
	
	ПоместитьВоВременноеХранилище(РезультатПокупки, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСРегистрамиСоответствий

// Записать соответствие значений дополнительного реквизита.
//
// Параметры:
//  ВидНоменклатуры		 - Ссылка - вид номенклатуры.
//  РеквизитОбъекта		 - Ссылка - дополнительный реквизит.
//  ЗначенияРеквизита	 - Ссылка - значение реквизита.
//  РежимДополнения		 - Булев - Истина, если реквизит нужно добавить.
//
Процедура ЗаписатьСоответствиеЗначенийРеквизита(ВидНоменклатуры, РеквизитОбъекта, ЗначенияРеквизита, РежимДополнения = Ложь) Экспорт
	
	НаборЗаписей = РегистрыСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ОбъектСопоставления.Установить(ВидНоменклатуры);
	НаборЗаписей.Отбор.РеквизитОбъекта.Установить(РеквизитОбъекта);
	
	Если РежимДополнения Тогда
		НаборЗаписей.Прочитать();	
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из ЗначенияРеквизита Цикл
		Если ЗначениеЗаполнено(ЭлементКоллекции.ЗначениеРеквизитаВидаНоменклатуры) Тогда
			
			НоваяЗапись = НаборЗаписей.Добавить();
			
			НоваяЗапись.ОбъектСопоставления = ВидНоменклатуры;
			НоваяЗапись.РеквизитОбъекта = РеквизитОбъекта;
			НоваяЗапись.Значение = ЭлементКоллекции.ЗначениеРеквизитаВидаНоменклатуры;
			НоваяЗапись.ИдентификаторЗначенияРеквизитаКатегории = ЭлементКоллекции. ИдентификаторЗначенияРеквизитаКатегории;
			НоваяЗапись.ПредставлениеЗначенияРеквизитаКатегории = ЭлементКоллекции.ЗначениеРеквизитаКатегории;
			
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Записать соответствие номенклатуры.
//
// Параметры:
//  НоменклатураСсылка	 - Ссылка - номенклатура.
//  ДанныеЗаполнения	 - Структура - см. ПараметрыЗаписиСоответствияНоменклатуры.
//
Процедура ЗаписатьСоответствиеНоменклатуры(НоменклатураСсылка, ДанныеЗаполнения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыРаботаСНоменклатурой.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(НоменклатураСсылка);
	
	// Запись по Номенклатуре удаляется если привязки нет
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ИдентификаторНоменклатурыСервиса) Тогда
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда 
			Если НаборЗаписей[0].ИдентификаторНоменклатурыСервиса = ДанныеЗаполнения.ИдентификаторНоменклатурыСервиса Тогда
				
				НаборЗаписей[0].ОбновляетсяАвтоматически = ДанныеЗаполнения.ОбновляетсяАвтоматически;
				НаборЗаписей.Записать();
				
				Возврат;
			Иначе 
				НаборЗаписей.Очистить();	
			КонецЕсли; 
		КонецЕсли;		
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.Номенклатура                = НоменклатураСсылка;
		НоваяЗапись.ИдентификаторНоменклатурыСервиса = ДанныеЗаполнения.ИдентификаторНоменклатурыСервиса;
		НоваяЗапись.ПредставлениеНоменклатурыСервиса = ДанныеЗаполнения.ПредставлениеНоменклатурыСервиса;
		НоваяЗапись.ОбновляетсяАвтоматически    = ДанныеЗаполнения.ОбновляетсяАвтоматически;
		НоваяЗапись.ДатаОбновления              = ТекущаяДатаСеанса();	
		
	КонецЕсли;
	
	НаборЗаписей.Записать();
		
КонецПроцедуры

// Установка режима обновления номенклатуры.
//
// Параметры:
//  НоменклатураБазы			 - Ссылка - номенклатура.
//  ИдентификаторНоменклатуры	 - Строка - идентификатор номенклатуры сервиса.
//  ОбновляетсяАвтоматически	 - Булево - режим обновления.
//
Процедура УстановитьРежимОбновленияНоменклатуры(НоменклатураБазы, ИдентификаторНоменклатуры, ОбновляетсяАвтоматически) Экспорт
	
	НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыРаботаСНоменклатурой.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Номенклатура.Установить(НоменклатураБазы);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей[0].ОбновляетсяАвтоматически = ОбновляетсяАвтоматически;
	
	Если ОбновляетсяАвтоматически Тогда
		НаборЗаписей[0].ДатаОбновления = ТекущаяДатаСеанса();
	КонецЕсли; 
		
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Изменение даты обновления номенклатуры.
//
// Параметры:
//  НоменклатураБазы			 - Ссылка - номенклатура.
//  ИдентификаторНоменклатуры	 - Строка - идентификатор номенклатуры сервиса.
//  ДатаОбновления				 - Дата - новая дата обновления.
//
Процедура ИзменитьДатуОбновленияНоменклатуры(НоменклатураБазы, ИдентификаторНоменклатуры, ДатаОбновления = Неопределено) Экспорт
	
	НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыРаботаСНоменклатурой.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Номенклатура.Установить(НоменклатураБазы);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей[0].ДатаОбновления = ?(ЗначениеЗаполнено(ДатаОбновления), ДатаОбновления, ТекущаяДатаСеанса());
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Установка режима обновления вида номенклатуры.
//
// Параметры:
//  ВидНоменклатуры			 - Ссылка - вид номенклатуры.
//  ИдентификаторКатегории	 - Строка - идентификатор категории.
//  ОбновляетсяАвтоматически - Булево - режим обновления.
//
Процедура УстановитьРежимОбновленияВидаНоменклатуры(ВидНоменклатуры, ИдентификаторКатегории, ОбновляетсяАвтоматически) Экспорт
	
	НаборЗаписей = РегистрыСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ВидНоменклатуры.Установить(ВидНоменклатуры);
	НаборЗаписей.Отбор.ИдентификаторКатегории.Установить(ИдентификаторКатегории);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей[0].ОбновляетсяАвтоматически = ОбновляетсяАвтоматически;
	
	Если ОбновляетсяАвтоматически Тогда
		НаборЗаписей[0].ДатаОбновления = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Изменение даты обновления вида номенклатуры.
//
// Параметры:
//  ВидНоменклатуры			     - Ссылка - вид номенклатуры.
//  ИдентификаторКатегории	     - Строка - идентификатор категории.
//  ДатаОбновления				 - Дата - новая дата обновления.
//
Процедура ИзменитьДатуОбновленияВидаНоменклатуры(ВидНоменклатуры, ИдентификаторКатегории, ДатаОбновления = Неопределено) Экспорт
	
	НаборЗаписей = РегистрыСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ВидНоменклатуры.Установить(ВидНоменклатуры);
	НаборЗаписей.Отбор.ИдентификаторКатегории.Установить(ИдентификаторКатегории);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей[0].ДатаОбновления = ?(ЗначениеЗаполнено(ДатаОбновления), ДатаОбновления, ТекущаяДатаСеанса());
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Запись соответствия реквизитов.
//
// Параметры:
//  ВидНоменклатуры			 - Ссылка - вид номенклатуры.
//  ДополнительныеРеквизиты	 - Массив (Структура) - данные по реквизитам.
//  РежимДополнения			 - Булево - Истина, если реквизит нужно добавить.
//
Процедура ЗаписатьСоответствиеРеквизитов(ВидНоменклатуры, ДополнительныеРеквизиты, РежимДополнения = Ложь) Экспорт
	
	НаборЗаписей = РегистрыСведений.СоответствиеРеквизитовРаботаСНоменклатурой.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ОбъектСопоставления.Установить(ВидНоменклатуры);
	
	Если РежимДополнения Тогда
		НаборЗаписей.Прочитать();
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из ДополнительныеРеквизиты Цикл
		Если ЗначениеЗаполнено(ЭлементКоллекции.РеквизитВидаНоменклатуры) Тогда
			
			НоваяЗапись = НаборЗаписей.Добавить();
			
			НоваяЗапись.ОбъектСопоставления = ВидНоменклатуры;
			НоваяЗапись.РеквизитОбъекта = ЭлементКоллекции.РеквизитВидаНоменклатуры;
			НоваяЗапись.ИдентификаторРеквизитаКатегории = ЭлементКоллекции.ИдентификаторРеквизитаКатегории;
			НоваяЗапись.ЯвляетсяРеквизитомХарактеристики = ЭлементКоллекции.ЯвляетсяРеквизитомХарактеристики;
			
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.Записать();
		
КонецПроцедуры

// Запись соответствия вида номенклатуры.
//
// Параметры:
//  ВидНоменклатуры	 - Ссылка - вид номенклатуры.
//  ДанныеЗаполнения - Структура - см. ПараметрыЗаписиСоответствияВидаНоменклатуры.
//
Процедура ЗаписатьСоответствиеВидаНоменклатуры(ВидНоменклатуры, ДанныеЗаполнения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ВидНоменклатуры.Установить(ВидНоменклатуры.Ссылка);
	
	// Запись по Виду номенклатуры удаляется если привязки нет
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ИдентификаторКатегории) Тогда
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.ВидНоменклатуры = ВидНоменклатуры.Ссылка;
		НоваяЗапись.ИдентификаторКатегории                 = ДанныеЗаполнения.ИдентификаторКатегории;
		НоваяЗапись.ПредставлениеКатегории                 = ДанныеЗаполнения.ПредставлениеКатегории;
		НоваяЗапись.ЗагружатьХарактеристикиВХарактеристики = ДанныеЗаполнения.ЗагружатьХарактеристикиВХарактеристики;
		НоваяЗапись.ОбновляетсяАвтоматически               = ДанныеЗаполнения.ОбновляетсяАвтоматически;
		НоваяЗапись.ДатаОбновления                         = ТекущаяДатаСеанса();
		
	КонецЕсли;
		
	НаборЗаписей.Записать();
		
КонецПроцедуры

#КонецОбласти

#Область ПредставлениеОбъектов

#Область ПредставлениеКарточкиКатегории

// Формирование представления категории.
//
// Параметры:
//  ИдентификаторКатегории	 - Строка - идентификатор категории.
//  АдресРезультата			 - Строка - адрес результата.
//
Процедура СформироватьПредставлениеКарточкиКатегории(Знач ИдентификаторКатегории, Знач АдресРезультата) Экспорт
	
	ДанныеПоКатегории = ПолучитьПолноеОписаниеКатегорииПоИдентификатору(ИдентификаторКатегории);
	
	Если ДанныеПоКатегории = Неопределено Тогда 
		Возврат;
	ИначеЕсли ДанныеПоКатегории.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеПоКатегории = ДанныеПоКатегории[0];
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
		
	ЗаполнитьКарточкуВидаНоменклатуры(ТабличныйДокумент, ДанныеПоКатегории);
	
	ПоместитьВоВременноеХранилище(ТабличныйДокумент, АдресРезультата);
	
КонецПроцедуры

// Заполнение карточки категории.
//
// Параметры:
//  ТабличныйДокумент	 - ТабличныйДокумент - табличный документ.
//  ДанныеПоКатегории	 - СтрокаТаблицыЗначений - данные категории из сервиса.
//
Процедура ЗаполнитьКарточкуВидаНоменклатуры(ТабличныйДокумент, ДанныеПоКатегории) Экспорт
	
	Макет = Обработки.РаботаСНоменклатурой.ПолучитьМакет("ПФ_MXL_КарточкаКатегории");
	
	ОбластьШапка          = Макет.ПолучитьОбласть("Шапка");
	ОбластьОписание       = Макет.ПолучитьОбласть("Описание");
	
	////////////////////////////////////////////////////////////////////////////////
		
	ОбластьШапка.Параметры.Заполнить(ДанныеПоКатегории);
	
	Если ДанныеПоКатегории.ВидыНоменклатуры.Количество() = 0 Тогда
		ОбластьШапка.Параметры.ВидыНоменклатурыПредставление = НСтр("ru = '<Не загружена>'");
	ИначеЕсли ДанныеПоКатегории.ВидыНоменклатуры.Количество() = 1 Тогда 
		ОбластьШапка.Параметры.ВидыНоменклатуры = ДанныеПоКатегории.ВидыНоменклатуры[0];
		ОбластьШапка.Параметры.ВидыНоменклатурыПредставление = ОбластьШапка.Параметры.ВидыНоменклатуры;
	Иначе
		ОбластьШапка.Параметры.ВидыНоменклатуры = ДанныеПоКатегории.ВидыНоменклатуры;
		ОбластьШапка.Параметры.ВидыНоменклатурыПредставление = СтрШаблон(НСтр("ru = 'Список (%1)'"), ДанныеПоКатегории.ВидыНоменклатуры.Количество());
	КонецЕсли;
	
	ОбластьШапка.Параметры.СтавкаНДС = ПредставлениеСтавкиНДС(ДанныеПоКатегории.СтавкаНДС);
	
	ТабличныйДокумент.Вывести(ОбластьШапка, 0);
	
	Если ЗначениеЗаполнено(ДанныеПоКатегории.Описание) Тогда
		ОбластьОписание.Параметры.Описание = ДанныеПоКатегории.Описание;
		ТабличныйДокумент.Вывести(ОбластьОписание, 0);
	КонецЕсли;
	
	ЗаполнитьДополнительныеРеквизитыИХарактеристикиКатегории(ДанныеПоКатегории, ТабличныйДокумент, Макет);
		
КонецПроцедуры

#КонецОбласти

#Область ПредставлениеКарточкиНоменклатуры

// Формирование представления номенклатуры.
//
// Параметры:
//  ПараметрыПроцедуры	 - Структура - параметры создания.
//  АдресРезультата		 - Строка - адрес результата.
//
Процедура СформироватьПредставленияКарточекНоменклатуры(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт 
	
	ХранилищеКэшей =             ПараметрыПроцедуры.ХранилищеКэшей;
	ИдентификаторыНоменклатуры = ПараметрыПроцедуры.ИдентификаторыНоменклатуры;
	
	Отказ = Ложь;
	
	ДанныеПоНоменклатуре = ПолучитьДанныеПоНоменклатуре(ИдентификаторыНоменклатуры, Истина, Отказ);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
		
	ПредставлениеНоменклатуры = Новый Структура;
	
	ПредставлениеНоменклатуры.Вставить("Идентификатор",                "");
	ПредставлениеНоменклатуры.Вставить("ИдентификаторРекламнойЗаписи", "");
	ПредставлениеНоменклатуры.Вставить("ПутьКТабличномуДокументу",     "");
	ПредставлениеНоменклатуры.Вставить("ПутьКДаннымБаннера",           "");
	ПредставлениеНоменклатуры.Вставить("СсылкаПереходаПоБаннеру",      "");
	ПредставлениеНоменклатуры.Вставить("ПревышенЛимит",                Ложь);
	ПредставлениеНоменклатуры.Вставить("ТекущийБаланс",                0);
	ПредставлениеНоменклатуры.Вставить("КарточкаКуплена",              Ложь);
	ПредставлениеНоменклатуры.Вставить("ОписаниеОшибки",               Неопределено);
	ПредставлениеНоменклатуры.Вставить("ЕстьОшибки",                   Ложь);
	
	Если ДанныеПоНоменклатуре = Неопределено 
		ИЛИ ДанныеПоНоменклатуре.Количество() = 0 Тогда
		
		СформироватьТехническоеПредставлениеНоменклатуры(ИдентификаторыНоменклатуры, ДанныеПоНоменклатуре, ХранилищеКэшей, ПредставлениеНоменклатуры);
	Иначе
		
		ЭлементКоллекции  = ДанныеПоНоменклатуре[0];
		
		Если ЭлементКоллекции.ЗаполненныеРеквизиты.Количество() > 0 Тогда // Номенклатура не куплена
			
			РезультатПокупки = ПокупкаКарточекНоменклатуры(ИдентификаторыНоменклатуры, Отказ);
			
			Если Отказ Тогда 
				Возврат;
			КонецЕсли;
			
			ПредставлениеНоменклатуры.ТекущийБаланс = РезультатПокупки.ОписаниеОшибки.ДоступныйОстаток;
			
			Если НЕ РезультатПокупки.ЕстьОшибки Тогда
				ДанныеПоНоменклатуре = ПолучитьДанныеПоНоменклатуре(ИдентификаторыНоменклатуры, Истина, Отказ);
				
				Если Отказ 
					ИЛИ ДанныеПоНоменклатуре = Неопределено 
					ИЛИ ДанныеПоНоменклатуре.Количество() = 0 Тогда 
					
					Возврат;
				КонецЕсли;
				
				ЭлементКоллекции = ДанныеПоНоменклатуре[0]
			Иначе
				ЗаполнитьЗначенияСвойств(ПредставлениеНоменклатуры, РезультатПокупки);
			КонецЕсли;
		КонецЕсли;
		
		ПутьКТабличномуДокументу = ХранилищеКэшей.Получить(ЭлементКоллекции.Идентификатор);
		СформироватьКарточкуНоменклатуры(ЭлементКоллекции, ПутьКТабличномуДокументу);
		
		ПредставлениеНоменклатуры.Идентификатор = ЭлементКоллекции.Идентификатор;
		ПредставлениеНоменклатуры.ИдентификаторРекламнойЗаписи = ЭлементКоллекции.ИдентификаторРекламнойЗаписи;
		ПредставлениеНоменклатуры.ПутьКТабличномуДокументу = ПутьКТабличномуДокументу; 
		ПредставлениеНоменклатуры.КарточкаКуплена = ЭлементКоллекции.ЗаполненныеРеквизиты.Количество() = 0;
					
	КонецЕсли;
	
	Если Не ПредставлениеНоменклатуры.ПревышенЛимит 
		И Не ЗначениеЗаполнено(ПредставлениеНоменклатуры.ТекущийБаланс) Тогда
		
		ТекущийБалансКарточек = ТекущийБаланс(Отказ);
		
		Если Отказ Тогда
			ТекущийБалансКарточек = 0;
		КонецЕсли;
		
		ПредставлениеНоменклатуры.ТекущийБаланс = ТекущийБалансКарточек;
		
	КонецЕсли;
		
	ПоместитьВоВременноеХранилище(ПредставлениеНоменклатуры, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПраваДоступа

// Проверка права чтения объектов подсистемы.
//
// Параметры:
//  ВыводитьСообщение	 - Булево - выводить сообщение в случае отказа.
// 
// Возвращаемое значение:
//  Булево - Истина, если право доступно.
//
Функция ПравоЧтенияДанных(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой);
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
		
	Возврат ЕстьПраво;
		
КонецФункции

// Проверка права изменения объектов подсистемы.
//
// Параметры:
//  ВыводитьСообщение	 - Булево - выводить сообщение в случае отказа.
// 
// Возвращаемое значение:
//  Булево - Истина, если право доступно.
//
Функция ПравоИзмененияДанных(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой);
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
		
	Возврат ЕстьПраво;
		
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СозданиеОбъектов

// Создание номенклатуры.
//
// Параметры:
//  ПараметрыПроцедуры		         - Структура - параметры создания.
//  АдресРезультата					 - Строка - адрес результата.
//  АдресДополнительногоРезультата	 - Строка - адрес дополнительного результата.
//
Процедура СозданиеНоменклатуры(Знач ПараметрСоздания, Знач АдресРезультата, Знач АдресДополнительногоРезультата)
	
	ИдентификаторыНоменклатуры           = ПараметрСоздания.ИдентификаторыНоменклатуры;
	КонтролироватьНастройкиХарактеристик = ПараметрСоздания.КонтролироватьНастройкиХарактеристик;
	
	// Покупаем карточки
	Отказ = Ложь;
	РезультатПокупки = ПокупкаКарточекНоменклатуры(ИдентификаторыНоменклатуры, Отказ); 
	
	Если Отказ Тогда 
		Возврат;
	ИначеЕсли РезультатПокупки.ЕстьОшибки = Истина Тогда 
		ПоместитьВоВременноеХранилище(РезультатПокупки, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ДанныеПоНоменклатуре = ДанныеНоменклатурыСервиса(ИдентификаторыНоменклатуры);
	Если ДанныеПоНоменклатуре = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РазрешеноПакетноеСоздание = Ложь;
	РаботаСНоменклатуройПереопределяемый.РазрешеноПакетноеСозданиеНоменклатуры(РазрешеноПакетноеСоздание);
	
	ИдентификаторыНоменклатурыДляЗагрузки = Новый Массив;
	
	Если ВедетсяУчетВидовНоменклатуры() Тогда
		
		// Если в системе ведется учет по видам номенклатуры, 
		// заполняем соответствие реквизитов и значений по дополнительным реквизитам.
		
		СоответствиеРеквизитовИЗначений = Неопределено;
		
		ПолучитьСоответствиеРеквизитовИЗначений(ДанныеПоНоменклатуре.ВыгрузитьКолонку("ИдентификаторКатегории"), СоответствиеРеквизитовИЗначений);
		
		Для каждого СтрокаДанныхПоНоменклатуре Из ДанныеПоНоменклатуре Цикл
			ЗаполнитьСоответствиеРеквизитовИЗначенийНоменклатуры(СоответствиеРеквизитовИЗначений, СтрокаДанныхПоНоменклатуре);
		КонецЦикла;
		
		////////////////////////////////////////////////////////////////////////////////
		
		Если РазрешеноПакетноеСоздание Тогда
			УстановитьСтатусыПроверкиНоменклатуры(ДанныеПоНоменклатуре);
			ИдентификаторыНоменклатурыДляЗагрузки = НоменклатураДляЗагрузки(ДанныеПоНоменклатуре, КонтролироватьНастройкиХарактеристик);
		Иначе
			ИдентификаторыНоменклатурыДляЗагрузки = ИдентификаторыНоменклатуры;
		КонецЕсли;
				
	Иначе 
		ИдентификаторыНоменклатурыДляЗагрузки = ИдентификаторыНоменклатуры;
	КонецЕсли; 
		
	Если РазрешеноПакетноеСоздание Тогда
		
		СозданнаяНоменклатура = Новый Массив;
		КоличествоЭлементовКСозданию = 0; // По идентификаторам считать нельзя, поскольку могут быть создано несколько элементов на один идентификатор
		НоменклатураДляЗагрузки = Новый Массив;
		
		Для Каждого СтрокаНоменклатуры Из ДанныеПоНоменклатуре Цикл 			
			Если ИдентификаторыНоменклатурыДляЗагрузки.Найти(СтрокаНоменклатуры.Идентификатор) <> Неопределено Тогда
				НоменклатураДляЗагрузки.Добавить(СтрокаНоменклатуры);	
			КонецЕсли;
		КонецЦикла;
		
		ЗагрузитьОтобраннуюНоменклатуру(ДанныеПоНоменклатуре, НоменклатураДляЗагрузки, СозданнаяНоменклатура, ПараметрСоздания, КоличествоЭлементовКСозданию);
				
		Результат = Новый Структура();
		Результат.Вставить("Создано",                СозданнаяНоменклатура.Количество());
		Результат.Вставить("ДолжноБытьСоздано",      КоличествоЭлементовКСозданию);
		Результат.Вставить("НовыеЭлементы",          СозданнаяНоменклатура);
		Результат.Вставить("НоменклатураДляАнализа", Неопределено); 
		
		Если ДанныеПоНоменклатуре.Количество() > 0 Тогда
			ПоместитьВоВременноеХранилище(ДанныеПоНоменклатуре, АдресДополнительногоРезультата);
			Результат.НоменклатураДляАнализа = АдресДополнительногоРезультата;
		КонецЕсли;
	
	Иначе
		
		ПоместитьВоВременноеХранилище(ДанныеПоНоменклатуре, АдресДополнительногоРезультата);
		
		Результат = Новый Структура();
		Результат.Вставить("СозданиеИнтерактивно");
		Результат.Вставить("АдресДанныхЗаполнения",  АдресДополнительногоРезультата);
		
	КонецЕсли;
	
	ТекущийБалансКарточек = ТекущийБаланс(Отказ);
	
	Если Отказ Тогда
		ТекущийБалансКарточек = 0;
	КонецЕсли;
	
	Результат.Вставить("ТекущийБаланс", ТекущийБалансКарточек);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Функция НоменклатураДляЗагрузки(ДанныеПоНоменклатуре, КонтролироватьНастройкиХарактеристик)
	
	Статусы = РаботаСНоменклатуройСлужебныйКлиентСервер.СтатусыПроверкиНоменклатуры();
	
	НоменклатураДляЗагрузки = Новый Массив;
	СтатусыГотовыхКЗагрузке = Новый Массив;
	
	СтатусыГотовыхКЗагрузке.Добавить(Статусы.ГотоваКЗагрузке);
	СтатусыГотовыхКЗагрузке.Добавить(Статусы.ИндивидуальныеХарактеристики);
	СтатусыГотовыхКЗагрузке.Добавить(Статусы.ХарактеристикиНеИспользуются);
	
	Для каждого Номенклатура Из ДанныеПоНоменклатуре Цикл
		
		Если Не КонтролироватьНастройкиХарактеристик 
			ИЛИ (КонтролироватьНастройкиХарактеристик 
				И СтатусыГотовыхКЗагрузке.Найти(Номенклатура.СтатусПроверки) <> Неопределено) Тогда
			
			НоменклатураДляЗагрузки.Добавить(Номенклатура.Идентификатор);
		КонецЕсли;			
	КонецЦикла;
	
	Возврат НоменклатураДляЗагрузки;
	
КонецФункции

Процедура ЗагрузитьОтобраннуюНоменклатуру(ДанныеПоНоменклатуре, НоменклатураКЗагрузке, СозданнаяНоменклатура, ПараметрСоздания, КоличествоЭлементовКСозданию)
	
	Для каждого Номенклатура Из НоменклатураКЗагрузке Цикл
		
		НоваяНоменклатура = ЗаписатьНоменклатуруВБазуДанных(Номенклатура, ПараметрСоздания, КоличествоЭлементовКСозданию);
		
		Если ТипЗнч(НоваяНоменклатура) = Тип("Массив") Тогда
			Для каждого ЭлементКоллекции Из НоваяНоменклатура Цикл
				СозданнаяНоменклатура.Добавить(ЭлементКоллекции);
			КонецЦикла;
		Иначе
			Если НоваяНоменклатура <> Неопределено Тогда
				СозданнаяНоменклатура.Добавить(НоваяНоменклатура);
			КонецЕсли;
		КонецЕсли;
		
		СтрокаКУдалению = ДанныеПоНоменклатуре.Найти(Номенклатура.Идентификатор, "Идентификатор");
		Если СтрокаКУдалению <> Неопределено Тогда 
			ДанныеПоНоменклатуре.Удалить(СтрокаКУдалению);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьРеквизитыХарактеристик(Идентификаторы, ПолеИдентификаторов, ДанныеХарактеристик, Отказ)
	
	ПараметрыПоиска = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаХарактеристики();
	
	ПараметрыПоиска.Вставить(ПолеИдентификаторов, Идентификаторы);	
	ПараметрыПоиска.Вставить("НаборПолей",        РаботаСНоменклатуройСлужебный.НаборПолейМаксимальный());
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаХарактеристики(ПараметрыПоиска);
	ДанныеХарактеристик = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
КонецПроцедуры

Функция ЗаписатьНоменклатуруВБазуДанных(Знач ДанныеЗаполнения, ПараметрСоздания, КоличествоЭлементовКСозданию)
	
	СохранятьХарактеристикиВНаименование = ПараметрСоздания.СохранятьХарактеристикиВНаименование;
	СохранятьХарактеристики              = ВедетсяУчетВидовНоменклатуры() И ПараметрСоздания.СохранятьХарактеристики;
	СохранятьДополнительныеРеквизиты     = ВедетсяУчетВидовНоменклатуры() И ПараметрСоздания.СохранятьДополнительныеРеквизиты;
	
	ДополнитьОписаниеНеСопоставленнымиДопРеквизитами(ДанныеЗаполнения.Описание, ДанныеЗаполнения);
	
	Если СохранятьХарактеристики
		И СохранятьХарактеристикиВНаименование 
		И ДанныеЗаполнения.Характеристики.Количество() > 1 Тогда
		
		// Если характеристики сохраняются в наименование, при этом характеристик несколько,
		// необходимо создать номенклатуру на каждую строку характеристик.
		
		КоличествоЭлементовКСозданию = КоличествоЭлементовКСозданию + ДанныеЗаполнения.Характеристики.Количество();
		
		Возврат НовыеЭлементыНоменклатурыДляКаждойХарактеристики(ДанныеЗаполнения,
			СохранятьХарактеристикиВНаименование, 
			СохранятьХарактеристики,
			СохранятьДополнительныеРеквизиты);
		
	Иначе
		
		КоличествоЭлементовКСозданию = КоличествоЭлементовКСозданию + 1;
		
		Возврат НовыйЭлементНоменклатуры(ДанныеЗаполнения,
			СохранятьХарактеристикиВНаименование, 
			СохранятьХарактеристики,
			СохранятьДополнительныеРеквизиты);
		
	КонецЕсли;
	
КонецФункции

Функция НовыеЭлементыНоменклатурыДляКаждойХарактеристики(Знач ДанныеЗаполнения, СохранятьХарактеристикиВНаименование = Ложь, 
	СохранятьХарактеристики = Истина, СохранятьДополнительныеРеквизиты = Истина)
	
	СозданнаяНоменклатура = Новый Массив;
		
	Характеристики = ДанныеЗаполнения.Характеристики.Скопировать();
	ДанныеЗаполнения.Характеристики.Очистить();
	
	НаименованиеСервиса = ДанныеЗаполнения.Наименование;
	
	Для каждого ТекущаяХарактеристика Из Характеристики Цикл
		
		НаименованиеНоменклатуры = "";
		
		РаботаСНоменклатуройПереопределяемый.СформироватьНаименованиеПоХарактеристике(
			НаименованиеСервиса, ТекущаяХарактеристика.Наименование, НаименованиеНоменклатуры);
		
		ДанныеЗаполнения.Наименование = НаименованиеНоменклатуры;

		НовыйЭлемент = НовыйЭлементНоменклатуры(ДанныеЗаполнения,
			СохранятьХарактеристикиВНаименование, 
			СохранятьХарактеристики,
			СохранятьДополнительныеРеквизиты);
			
		Если НовыйЭлемент <> Неопределено Тогда
			СозданнаяНоменклатура.Добавить(НовыйЭлемент);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СозданнаяНоменклатура;
	
КонецФункции

Функция НовыйЭлементНоменклатуры(Знач ДанныеЗаполнения, СохранятьХарактеристикиВНаименование = Ложь, 
	СохранятьХарактеристики = Истина, СохранятьДополнительныеРеквизиты = Истина)
	
	СсылкаНаОбъект = Неопределено;
	
	НачатьТранзакцию();
	
	Попытка
		РаботаСНоменклатуройПереопределяемый.СоздатьНоменклатуру(ДанныеЗаполнения, СсылкаНаОбъект);
		
		Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			Текст = НСтр("ru = 'Ошибка создания элемента справочника Номенклатура'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			ВызватьИсключение Текст;
		КонецЕсли;
		
		// Дополнительные реквизиты
		
		Если СохранятьДополнительныеРеквизиты И ДанныеЗаполнения.ДополнительныеРеквизиты.Количество() > 0 Тогда
			РаботаСНоменклатуройПереопределяемый.ЗаполнитьЗначенияДополнительныхРеквизитов(ДанныеЗаполнения.ДополнительныеРеквизиты, СсылкаНаОбъект);	
		КонецЕсли;
		
		// Характеристики
		
		ОбрабатыватьХарактеристики = 
			СохранятьХарактеристики И НЕ СохранятьХарактеристикиВНаименование И ДанныеЗаполнения.Характеристики.Количество() > 0;
			
		Если ОбрабатыватьХарактеристики Тогда
			ЗаполнитьЗначенияХарактеристик(ДанныеЗаполнения, СсылкаНаОбъект);
		КонецЕсли;
		
		РаботаСНоменклатуройПереопределяемый.ЗаписатьШтрихкоды(
			ТаблицаШтрихкодов(ДанныеЗаполнения, СсылкаНаОбъект, ОбрабатыватьХарактеристики));
		
		ПараметрыЗаписи = ПараметрыЗаписиСоответствияНоменклатуры();
		
		ПараметрыЗаписи.ИдентификаторНоменклатурыСервиса = ДанныеЗаполнения.Идентификатор;
		ПараметрыЗаписи.ПредставлениеНоменклатурыСервиса = ДанныеЗаполнения.Наименование;
		ПараметрыЗаписи.ОбновляетсяАвтоматически    = Истина;
		
		ЗаписатьСоответствиеНоменклатуры(СсылкаНаОбъект, ПараметрыЗаписи);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция ТаблицаШтрихкодов(ДанныеЗаполнения, СсылкаНаОбъект, ВРазрезеХарактеристик)
	
	Штрихкоды = Новый ТаблицаЗначений;
	
	Штрихкоды.Колонки.Добавить("Номенклатура");
	Штрихкоды.Колонки.Добавить("Характеристика");
	Штрихкоды.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка"));
	
	Если ДанныеЗаполнения.Характеристики.Количество() = 0 Тогда
		Для каждого Штрихкод Из ДанныеЗаполнения.Штрихкоды Цикл
			НоваяСтрока = Штрихкоды.Добавить();
			НоваяСтрока.Номенклатура = СсылкаНаОбъект;
			НоваяСтрока.Штрихкод = Штрихкод;
		КонецЦикла;
	Иначе
		Для каждого Характеристика Из ДанныеЗаполнения.Характеристики Цикл
			Для каждого Штрихкод Из Характеристика.ШтрихКоды Цикл
				
				Если НЕ ЗначениеЗаполнено(Характеристика.ХарактеристикаИнформационнойБазы) Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = Штрихкоды.Добавить();
				НоваяСтрока.Номенклатура = СсылкаНаОбъект;
				НоваяСтрока.Характеристика = Характеристика.ХарактеристикаИнформационнойБазы;
				НоваяСтрока.Штрихкод = Штрихкод;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	Возврат Штрихкоды;
	
КонецФункции

Процедура ДополнитьОписаниеНеСопоставленнымиДопРеквизитами(Описание, ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.ДополнительныеРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОписания = Новый Массив;
	
	ШаблонОписания = "%1: %2";
	Для каждого ДополнительныйРеквизит Из ДанныеЗаполнения.ДополнительныеРеквизиты Цикл
		
		Если ЗначениеЗаполнено(ДополнительныйРеквизит.РеквизитИнформационнойБазы) Тогда
			Продолжить;
		КонецЕсли;
				
		ТекстОписания.Добавить(СтрШаблон(ШаблонОписания, ДополнительныйРеквизит.Наименование, 
			?(ЗначениеЗаполнено(ДополнительныйРеквизит.Значение), ДополнительныйРеквизит.Значение, ДополнительныйРеквизит.СтроковоеЗначение)));
		
	КонецЦикла;
	
	Если ТекстОписания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Описание) Тогда 
		ТекстОписания.Вставить(0, Описание);
		ТекстОписания.Вставить(1, Символы.ПС);
	КонецЕсли;
	
	Описание = СтрСоединить(ТекстОписания, Символы.ПС);
	
КонецПроцедуры

// Загрузка категорий.
//
// Параметры:
//  КатегорииКЗагрузке	 - Массив (Строка) - идентификаторы категорий.
//  АдресРезультата		 - Строка - адрес результата.
//  ДолжноБытьСоздано    - Число - количество элементов к созданию.
//
Процедура ЗагрузкаКатегорий(Знач КатегорииКЗагрузке, Знач АдресРезультата, ДолжноБытьСоздано)
	
	ИдентификаторыЛистовыхКатегорий = Новый Массив;
	ИдентификаторыРодительскихКатегорий = Новый Массив;
	Для каждого ЭлементКоллекции Из КатегорииКЗагрузке Цикл
		Если ЭлементКоллекции.КоличествоПодчиненных = 0 Тогда
			ИдентификаторыЛистовыхКатегорий.Добавить(ЭлементКоллекции.Идентификатор);
		Иначе 
			ИдентификаторыРодительскихКатегорий.Добавить(ЭлементКоллекции.Идентификатор);
		КонецЕсли;		
	КонецЦикла;
	
	Если ИдентификаторыРодительскихКатегорий.Количество() Тогда 
		
		ИдентификаторыДочернихЛистовыхКатегорий = ИдентификаторыВсехДочернихЛистовыхКатегорий(ИдентификаторыРодительскихКатегорий);
		Если ИдентификаторыДочернихЛистовыхКатегорий = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИдентификаторыЛистовыхКатегорий, ИдентификаторыДочернихЛистовыхКатегорий, Истина);
		
	КонецЕсли;
	
	ДолжноБытьСоздано = ИдентификаторыЛистовыхКатегорий.Количество();
	
	УбратьРанееЗагруженныеКатегории(ИдентификаторыЛистовыхКатегорий);
	
	Если ИдентификаторыЛистовыхКатегорий.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выбранные категории были загружены ранее.'"));
		
		Результат = Новый Структура();
		Результат.Вставить("Создано",           0);
		Результат.Вставить("ДолжноБытьСоздано", ДолжноБытьСоздано);
		Результат.Вставить("НовыеЭлементы",     Новый Массив);
		
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		
		Возврат;
	КонецЕсли;
	
	ДанныеКатегорий = ДанныеКатегорийСервиса(ИдентификаторыЛистовыхКатегорий);
	
	Если ДанныеКатегорий = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТипВидаНоменклатуры =           Метаданные.ОпределяемыеТипы.ВидНоменклатурыРаботаСНоменклатурой.Тип.Типы()[0];
	МетаданныеВидаНоменклатуры =    Метаданные.НайтиПоТипу(ТипВидаНоменклатуры);
	ПредставлениеВидаНоменклатуры = МетаданныеВидаНоменклатуры.Представление();
	
	НовыеЭлементы = Новый Массив;
	
	Для каждого ДанныеЗаполнения Из ДанныеКатегорий Цикл
		
		НачатьТранзакцию();
		Попытка
			ВидНоменклатурыСсылка = НовыйЭлементВидаНоменклатуры(ДанныеЗаполнения);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		ПараметрыЗаписи = ПараметрыЗаписиСоответствияВидаНоменклатуры();
		
		ПараметрыЗаписи.ИдентификаторКатегории = ДанныеЗаполнения.Идентификатор;
		ПараметрыЗаписи.ПредставлениеКатегории = ДанныеЗаполнения.Наименование;
		
		ЗаписатьСоответствиеВидаНоменклатуры(ВидНоменклатурыСсылка, ПараметрыЗаписи);
		
		Если ЗначениеЗаполнено(ВидНоменклатурыСсылка) Тогда
			НовыеЭлементы.Добавить(ВидНоменклатурыСсылка);
		Иначе
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка создания элемента справочника ""%1""'"), ПредставлениеВидаНоменклатуры);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура();
	Результат.Вставить("Создано",           НовыеЭлементы.Количество());
	Результат.Вставить("ДолжноБытьСоздано", ИдентификаторыЛистовыхКатегорий.Количество());
	Результат.Вставить("НовыеЭлементы",     НовыеЭлементы);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеЭлементовНаФорму

Процедура ДобавитьРеквизитыФормы(Форма, СервисДоступен, РежимПредставленияОбъектаСервиса)
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_СервисДоступен", Новый ОписаниеТипов("Булево")));
	
	Если СервисДоступен Тогда
		
		Если РежимПредставленияОбъектаСервиса = "ПолеВвода" Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПредставлениеОбъектаСервиса", Новый ОписаниеТипов("Строка")));
		Иначе
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПредставлениеОбъектаСервиса", Новый ОписаниеТипов("ФорматированнаяСтрока")));	
		КонецЕсли;
		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИдентификаторОбъектаСервиса",                                 Новый ОписаниеТипов("Строка")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ОбновляетсяАвтоматически",                                    Новый ОписаниеТипов("Булево")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СтрокаПоискаОбъектаСервиса",                                  Новый ОписаниеТипов("Строка")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ОбъектСервисаИзменен",                                        Новый ОписаниеТипов("Булево")));
		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_СписокПолейДляПодбораНоменклатуры",      Новый ОписаниеТипов("СписокЗначений")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_ИдентификаторЗаданияДлительнойОперации", Новый ОписаниеТипов("Строка")));		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_РежимПредставленияОбъектаСервиса",       Новый ОписаниеТипов("Строка")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_ИгнорироватьПроверкуЗаполнения",         Новый ОписаниеТипов("Булево")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РаботаСНоменклатурой_ТипОбъекта",                             Новый ОписаниеТипов("Строка")));
		
	КонецЕсли;
		
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
КонецПроцедуры

Процедура УстановитьДействиеИзменениеТекстаПолей(Форма)
	
	НаборПолейПриРедактировании = Новый Массив;
	НаборПолейПриИзменении      = Новый Массив;
	
	РаботаСНоменклатуройПереопределяемый.ЗаполнитьМассивПолейСобытияИзменениеТекстаРедактирования(НаборПолейПриРедактировании);
	РаботаСНоменклатуройПереопределяемый.ЗаполнитьМассивПолейСобытияПриИзменении(НаборПолейПриИзменении);
	
	// При редактировании текста
	
	Для Каждого ЭлементКоллекции Из НаборПолейПриРедактировании Цикл
		Если Форма.Элементы.Найти(ЭлементКоллекции) <> Неопределено Тогда
			
			Если Форма.РаботаСНоменклатурой_СписокПолейДляПодбораНоменклатуры.НайтиПоЗначению(ЭлементКоллекции) = Неопределено Тогда
				Форма.РаботаСНоменклатурой_СписокПолейДляПодбораНоменклатуры.Добавить(ЭлементКоллекции);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Форма.Элементы[ЭлементКоллекции].ПолучитьДействие("ИзменениеТекстаРедактирования")) Тогда
				Форма.Элементы[ЭлементКоллекции].
					УстановитьДействие("ИзменениеТекстаРедактирования", "Подключаемый_ИзменениеТекстаРедактирования");
				Форма.Элементы[ЭлементКоллекции].ОбновлениеТекстаРедактирования = ОбновлениеТекстаРедактирования.ПриИзмененииЗначения;
			КонецЕсли;
						
		КонецЕсли;
	КонецЦикла;
	
	// При изменении
	
	Для Каждого ЭлементКоллекции Из НаборПолейПриИзменении Цикл
		Если Форма.Элементы.Найти(ЭлементКоллекции) <> Неопределено Тогда
			
			Если Форма.РаботаСНоменклатурой_СписокПолейДляПодбораНоменклатуры.НайтиПоЗначению(ЭлементКоллекции) = Неопределено Тогда
				Форма.РаботаСНоменклатурой_СписокПолейДляПодбораНоменклатуры.Добавить(ЭлементКоллекции);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Форма.Элементы[ЭлементКоллекции].ПолучитьДействие("ПриИзменении")) Тогда
				Форма.Элементы[ЭлементКоллекции].
					УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзменении");
			КонецЕсли;
				
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура НастроитьЭлементыФормы(Форма, РежимПредставленияОбъектаСервиса)
	
	Если СтрСравнить(РежимПредставленияОбъектаСервиса, "Гиперссылка") = 0 Тогда
		
		РаботаСНоменклатуройСлужебныйКлиентСервер.НастроитьВидимостьГиперссылок(Форма);	
			
	ИначеЕсли СтрСравнить(РежимПредставленияОбъектаСервиса, "ПолеВвода") = 0 Тогда	
		
		Если Форма.ОбновляетсяАвтоматически Тогда
			Форма.Элементы.РежимОбновления.Картинка = БиблиотекаКартинок.АвтоматическоеОбновлениеРаботаСНоменклатурой;
		Иначе
			Форма.Элементы.РежимОбновления.Картинка = БиблиотекаКартинок.РучноеОбновлениеРаботаСНоменклатурой;
		КонецЕсли;
		
		Форма.Элементы.РежимОбновления.Доступность = ЗначениеЗаполнено(Форма.ИдентификаторОбъектаСервиса);
			
	КонецЕсли;
				
	Форма.Модифицированность = Ложь;	
		
КонецПроцедуры

Процедура ЗаполнитьДанныеПоКатегории(Форма, Объект, РежимПредставленияОбъектаСервиса)
	
	Форма.РаботаСНоменклатурой_ТипОбъекта = "ВидНоменклатуры";
	Форма.РаботаСНоменклатурой_РежимПредставленияОбъектаСервиса = РежимПредставленияОбъектаСервиса;
	
	РаботаСНоменклатуройСлужебныйКлиентСервер.СброситьДанныеОбъектаСервиса(Форма,
		Форма.Элементы.ПредставлениеКатегорииСервиса,
		РаботаСНоменклатуройСлужебныйКлиентСервер.ПредставлениеПустойКатегории(РежимПредставленияОбъектаСервиса));
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ПредставлениеКатегории КАК ПредставлениеКатегории,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории КАК ИдентификаторКатегории,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ОбновляетсяАвтоматически КАК ОбновляетсяАвтоматически
	|ИЗ
	|	РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры = &ВидНоменклатуры";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Форма.ПредставлениеОбъектаСервиса = Новый ФорматированнаяСтрока(Выборка.ПредставлениеКатегории,,,,"Ссылка");
		Форма.ИдентификаторОбъектаСервиса = Выборка.ИдентификаторКатегории;
		Форма.ОбновляетсяАвтоматически = Выборка.ОбновляетсяАвтоматически;
	КонецЕсли;	
		
КонецПроцедуры

Процедура ЗаполнитьДанныеПоНоменклатуре(Форма, Объект, РежимПредставленияОбъектаСервиса)
	
	Форма.РаботаСНоменклатурой_ТипОбъекта = "Номенклатура";
	Форма.РаботаСНоменклатурой_РежимПредставленияОбъектаСервиса = РежимПредставленияОбъектаСервиса;
	
	РаботаСНоменклатуройСлужебныйКлиентСервер.СброситьДанныеОбъектаСервиса(Форма,
		Форма.Элементы.ПредставлениеНоменклатурыСервиса, 
		РаботаСНоменклатуройСлужебныйКлиентСервер.ПредставлениеПустойНоменклатуры(РежимПредставленияОбъектаСервиса));
	
	УстановитьПривилегированныйРежим(Истина);	
		
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ РазрешеноПакетноеСозданиеНоменклатуры() Тогда
			ЗаполнитьНоменклатуруПриИнтерактивномРежиме(Форма);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ПредставлениеНоменклатурыСервиса КАК ПредставлениеНоменклатурыСервиса,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатурыСервиса,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ОбновляетсяАвтоматически КАК ОбновляетсяАвтоматически
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Форма.ПредставлениеОбъектаСервиса = Новый ФорматированнаяСтрока(Выборка.ПредставлениеНоменклатурыСервиса,,,,"Ссылка");
		Форма.ИдентификаторОбъектаСервиса = Выборка.ИдентификаторНоменклатурыСервиса;
		Форма.ОбновляетсяАвтоматически = Выборка.ОбновляетсяАвтоматически;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьНоменклатуруПриИнтерактивномРежиме(Форма)
	
	Если Форма.Параметры.Свойство("АдресДанныхЗаполнения") 
		И ЭтоАдресВременногоХранилища(Форма.Параметры.АдресДанныхЗаполнения) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(Форма.Параметры.АдресДанныхЗаполнения);
		
		Если ТипЗнч(Результат) = Тип("ТаблицаЗначений")
			И Результат.Количество() > 0 Тогда
			
			Форма.ПредставлениеОбъектаСервиса = Новый ФорматированнаяСтрока(Результат[0].Наименование,,,,"Ссылка");
			Форма.ИдентификаторОбъектаСервиса = Результат[0].Идентификатор;
			Форма.ОбновляетсяАвтоматически = Ложь;		
			Форма.ОбъектСервисаИзменен = Истина;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДобавитьЭлементыФормыСервиса(Форма, ИмяЭлемента, ГруппаРодитель, ЗаголовокЭлемента, РежимПредставленияОбъектаСервиса)
	
	ПравоИзменения = ПравоИзмененияДанных();
	
	// Группа
	
	ГруппаФормы                     = Форма.Элементы.Добавить("ГруппаСсылкаНаОбъект1СНоменклатуры", Тип("ГруппаФормы"), ГруппаРодитель);
	ГруппаФормы.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаФормы.Отображение         = ОтображениеОбычнойГруппы.Нет;
	ГруппаФормы.ОтображатьЗаголовок = Ложь;
	ГруппаФормы.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	// Элемент для отображения объекта сервиса
	
	Если СтрСравнить(РежимПредставленияОбъектаСервиса, "ПолеВвода") = 0 Тогда
		
		НовыйЭлемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ГруппаФормы);
		
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.РедактированиеТекста = Ложь;
		
		НовыйЭлемент.ПутьКДанным = "ПредставлениеОбъектаСервиса";
		НовыйЭлемент.Заголовок   = СтрШаблон(НСтр("ru = '%1'"), ЗаголовокЭлемента);
		
		// Кнопки
		
		НовыйЭлемент.КнопкаВыбора   = ПравоИзменения;
		НовыйЭлемент.КнопкаОчистки  = ПравоИзменения;
		НовыйЭлемент.КнопкаОткрытия = Истина;
		
		// Обработчики
		
		НовыйЭлемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбораРаботаСНоменклатурой");
		НовыйЭлемент.УстановитьДействие("Очистка",      "Подключаемый_ОчисткаРаботаСНоменклатурой");
		НовыйЭлемент.УстановитьДействие("Открытие",     "Подключаемый_ОткрытьРаботаСНоменклатурой");
		
		// Иконка режима обновления
		
		НовыйЭлемент             = Форма.Элементы.Добавить("РежимОбновления", Тип("ДекорацияФормы"), ГруппаФормы);
		НовыйЭлемент.Вид         = ВидДекорацииФормы.Картинка;
		НовыйЭлемент.Картинка    = БиблиотекаКартинок.РучноеОбновлениеРаботаСНоменклатурой;
		НовыйЭлемент.Гиперссылка = Истина;
		НовыйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
		НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_НажатиеРежимОбновления");
		НовыйЭлемент.Видимость   = ПравоИзменения;
		
		// Декорация длительной операции
		
		НовыйЭлемент          = Форма.Элементы.Добавить("РаботаСНоменклатуройДекорацияДлительнойОперации", Тип("ДекорацияФормы"), ГруппаФормы);
		НовыйЭлемент.Вид      = ВидДекорацииФормы.Картинка;
		НовыйЭлемент.Картинка = БиблиотекаКартинок.Пустая;
		НовыйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
						
	ИначеЕсли СтрСравнить(РежимПредставленияОбъектаСервиса, "Гиперссылка") = 0 Тогда	
		
		НовыйЭлемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ГруппаФормы);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
		
		НовыйЭлемент.ПутьКДанным = "ПредставлениеОбъектаСервиса";
		НовыйЭлемент.Заголовок   = СтрШаблон(НСтр("ru = '%1'"), ЗаголовокЭлемента);		
		
		НовыйЭлемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылки");
				
		// Гиперссылка очистки
		
		НовыйЭлемент = Форма.Элементы.Добавить("РаботаСНоменклатурой_ОчиститьОбъектСервиса", Тип("ДекорацияФормы"), ГруппаФормы);
		НовыйЭлемент.Гиперссылка = Истина;
		НовыйЭлемент.Видимость = Ложь;
		НовыйЭлемент.Заголовок = НСтр("ru = 'Очистить'");
		НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_НажатиеРаботаСНоменклатурой");
		
		// Гиперссылка обновления
		
		НовыйЭлемент = Форма.Элементы.Добавить("РежимОбновления", Тип("ДекорацияФормы"), ГруппаФормы);
		НовыйЭлемент.Гиперссылка = Истина;
		НовыйЭлемент.Видимость = Ложь;
		НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_НажатиеРаботаСНоменклатурой");
		
		// Иконка перечитать
		
		НовыйЭлемент             = Форма.Элементы.Добавить("РаботаСНоменклатурой_ОбновитьСейчас", Тип("ДекорацияФормы"), ГруппаФормы);
		НовыйЭлемент.Вид         = ВидДекорацииФормы.Картинка;
		НовыйЭлемент.Картинка    = БиблиотекаКартинок.Перечитать;
		НовыйЭлемент.Гиперссылка = Истина;
		НовыйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
		НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_НажатиеРежимОбновления");
		НовыйЭлемент.Видимость   = ПравоИзменения;
		
		// Декорация длительной операции
		
		НовыйЭлемент          = Форма.Элементы.Добавить("РаботаСНоменклатуройДекорацияДлительнойОперации", Тип("ДекорацияФормы"), ГруппаФормы);
		НовыйЭлемент.Вид      = ВидДекорацииФормы.Картинка;
		НовыйЭлемент.Картинка = БиблиотекаКартинок.Пустая;
		НовыйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
		НовыйЭлемент.Видимость = Истина;
						
	КонецЕсли;	
				
КонецПроцедуры

#КонецОбласти
	
#Область ПодготовкаДанныхНоменклатуры

Процедура ПреобразоватьЗначенияРеквизитов(ДополнительныеРеквизиты, ТаблицаТипов)
	
	Для каждого ТекущийРеквизит Из ДополнительныеРеквизиты Цикл
		
		Если ЗначениеЗаполнено(ТекущийРеквизит.ИдентификаторЗначения) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРеквизита = ТаблицаТипов.Найти(ТекущийРеквизит.Идентификатор, "Идентификатор");
		
		Если СтрокаРеквизита = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрСравнить(СтрокаРеквизита.Тип, "Число") = 0 И ТипЗнч(ТекущийРеквизит.Значение) = Тип("Строка") Тогда
			
			ЧислоИзСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ТекущийРеквизит.Значение);
			
			Если ЧислоИзСтроки <> Неопределено Тогда
				ТекущийРеквизит.Значение = ЧислоИзСтроки;
			КонецЕсли;

		ИначеЕсли СтрСравнить(СтрокаРеквизита.Тип, "Булево") = 0  И ТипЗнч(ТекущийРеквизит.Значение) = Тип("Строка") Тогда	

			Если СтрСравнить(ТекущийРеквизит.Значение, "false") = 0 Тогда
				ТекущийРеквизит.Значение = Ложь;	
			ИначеЕсли СтрСравнить(ТекущийРеквизит.Значение, "true") = 0 Тогда
				ТекущийРеквизит.Значение = Истина;		
			КонецЕсли;
			
		ИначеЕсли СтрСравнить(СтрокаРеквизита.Тип, "Дата") = 0  И ТипЗнч(ТекущийРеквизит.Значение) = Тип("Строка") Тогда	
			
			ЧислоИзСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ТекущийРеквизит.Значение);
			
			Если ЧислоИзСтроки <> Неопределено Тогда
				ТекущийРеквизит.Значение = РаботаСНоменклатуройСлужебный.ДатаИзUnixTime(ЧислоИзСтроки);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура ДополнитьДанныеПоНоменклатуре(ИдентификаторыХарактеристик, ТаблицаНоменклатуры)
	
	Для каждого Номенклатура Из ТаблицаНоменклатуры Цикл
		
		Номенклатура.ВидНоменклатурыПоУмолчанию = 
			Новый Структура("ВидНоменклатуры, ЗагружатьХарактеристикиВХарактеристики, ИндивидуальныеХарактеристикиНоменклатуры", 
			Неопределено, Ложь, Ложь);
			
		Номенклатура.ДополнительныеРеквизиты.Колонки.Добавить("РеквизитИнформационнойБазы"); // Ссылка на дополнительный реквизит
		Номенклатура.ДополнительныеРеквизиты.Колонки.Добавить("ЗначениеИнформационнойБазы"); // Ссылка на значение дополнительного реквизита
		
		ПреобразоватьЗначенияРеквизитов(Номенклатура.ДополнительныеРеквизиты, Номенклатура.Категория.ДополнительныеРеквизиты);	
		
		Номенклатура.Характеристики.Колонки.Добавить("ДополнительныеРеквизиты", Новый ОписаниеТипов("ТаблицаЗначений")); // Расшифровка характеристик
		
		Для каждого Характеристика Из Номенклатура.Характеристики Цикл
			ИдентификаторыХарактеристик.Добавить(Характеристика.Идентификатор);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыИЗначенияХарактеристик(ИдентификаторыХарактеристик, ТаблицаНоменклатуры, РежимПроверкиПередЗагрузкой, Отказ)
	
	// При режиме предварительной проверки характеристик, 
	// данные по характеристикам номенклатуры можно получить только через идентификатор номенклатуры. 
	// Когда номенклатура приобретена, характеристики можно получить одним запросом по идентификаторам характеристик.
	
	Если РежимПроверкиПередЗагрузкой Тогда 
		
		Для каждого Номенклатура Из ТаблицаНоменклатуры Цикл
			ПолучитьРеквизитыХарактеристик(Номенклатура.Идентификатор, 
				"ИдентификаторНоменклатуры", Номенклатура.Характеристики, Отказ);
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			Для каждого Характеристика Из Номенклатура.Характеристики Цикл
				Характеристика.ДополнительныеРеквизиты.Колонки.Добавить("РеквизитИнформационнойБазы");
				Характеристика.ДополнительныеРеквизиты.Колонки.Добавить("ЗначениеИнформационнойБазы");
			КонецЦикла;
		КонецЦикла;
				
	Иначе
			
		Если ИдентификаторыХарактеристик.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеХарактеристик = Неопределено;
		
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИдентификаторыХарактеристик);
		
		ПолучитьРеквизитыХарактеристик(ИдентификаторыХарактеристик, "Идентификаторы", ДанныеХарактеристик, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Для каждого Номенклатура Из ТаблицаНоменклатуры Цикл
			Для каждого Характеристика Из Номенклатура.Характеристики Цикл
				
				СтрокаХарактеристики = ДанныеХарактеристик.Найти(Характеристика.Идентификатор, "Идентификатор");
				
				Если СтрокаХарактеристики = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Характеристика.ДополнительныеРеквизиты = СтрокаХарактеристики.ДополнительныеРеквизиты.Скопировать();
				
				Характеристика.ДополнительныеРеквизиты.Колонки.Добавить("РеквизитИнформационнойБазы");
				Характеристика.ДополнительныеРеквизиты.Колонки.Добавить("ЗначениеИнформационнойБазы");
				
				ПреобразоватьЗначенияРеквизитов(Характеристика.ДополнительныеРеквизиты, Номенклатура.Категория.Характеристики.ДополнительныеРеквизиты);
				
			КонецЦикла;		
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьСоответствиеРеквизитовИЗначенийНоменклатуры(СоответствиеРеквизитовИЗначений, ДанныеПоНоменклатуре, ВидНоменклатуры = Неопределено) Экспорт
	
	ДанныеПоНоменклатуре.ДополнительныеРеквизиты.ЗаполнитьЗначения(Неопределено, "РеквизитИнформационнойБазы");
	ДанныеПоНоменклатуре.ДополнительныеРеквизиты.ЗаполнитьЗначения(Неопределено, "ЗначениеИнформационнойБазы");
	
	Для каждого ЭлементКоллекции Из ДанныеПоНоменклатуре.Характеристики Цикл
		ЭлементКоллекции.ДополнительныеРеквизиты.ЗаполнитьЗначения(Неопределено, "РеквизитИнформационнойБазы");
		ЭлементКоллекции.ДополнительныеРеквизиты.ЗаполнитьЗначения(Неопределено, "ЗначениеИнформационнойБазы");
	КонецЦикла;
	
	////////////////////////////////////////////////////////////////////////////////
	
	СтрокаСоответствияКатегория = СоответствиеРеквизитовИЗначений.Строки.Найти(ДанныеПоНоменклатуре.Категория.Идентификатор, "ИдентификаторКатегории");
	
	Если СтрокаСоответствияКатегория = Неопределено 
		ИЛИ СтрокаСоответствияКатегория.Строки.Количество() = 0 Тогда
		
		Возврат;	
	КонецЕсли;
	
	ДанныеПоНоменклатуре.Категория.ВидыНоменклатурыИнформационнойБазы = 
	СтрокаСоответствияКатегория.Строки.ВыгрузитьКолонку("ВидНоменклатуры");
	
	Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		СтрокаСоответствияВидНоменклатуры = СтрокаСоответствияКатегория.Строки.Найти(ВидНоменклатуры, "ВидНоменклатуры");
		Если СтрокаСоответствияВидНоменклатуры = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		СтрокаСоответствияВидНоменклатуры = СтрокаСоответствияКатегория.Строки[0];
	КонецЕсли;
	
	Если СтрокаСоответствияВидНоменклатуры.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре.ВидНоменклатурыПоУмолчанию, СтрокаСоответствияВидНоменклатуры);
	
	Если ЗначениеЗаполнено(ДанныеПоНоменклатуре.ВидНоменклатурыПоУмолчанию.ВидНоменклатуры) Тогда
		ДанныеПоНоменклатуре.ВидНоменклатурыПоУмолчанию.ИндивидуальныеХарактеристикиНоменклатуры
			= ИспользуютсяИндивидуальныеХарактеристики(
				ДанныеПоНоменклатуре.ВидНоменклатурыПоУмолчанию.ВидНоменклатуры);
	КонецЕсли;
	
	Для каждого ДополнительныйРеквизит Из ДанныеПоНоменклатуре.ДополнительныеРеквизиты Цикл
		ПроставитьСоответствиеРеквизитовИЗначений(ДополнительныйРеквизит, СтрокаСоответствияВидНоменклатуры);	
	КонецЦикла;	
	
	Для каждого Характеристика Из ДанныеПоНоменклатуре.Характеристики Цикл
		Для каждого ДополнительныйРеквизит Из Характеристика.ДополнительныеРеквизиты Цикл
			ПроставитьСоответствиеРеквизитовИЗначений(ДополнительныйРеквизит, СтрокаСоответствияВидНоменклатуры);	
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоКатегориям(ИдентификаторыКатегории, ТаблицаНоменклатуры, Отказ)
	
	Если ИдентификаторыКатегории.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоисковыйЗапрос = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
	ПоисковыйЗапрос.Идентификаторы          = ИдентификаторыКатегории;
	ПоисковыйЗапрос.НаборПолей              = РаботаСНоменклатуройСлужебный.НаборПолейМаксимальный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
	ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Категория Из ТаблицаКатегорий Цикл
		СтрокиНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("ИдентификаторКатегории", Категория.Идентификатор));	
		
		Для каждого Номенклатура Из СтрокиНоменклатуры Цикл
			Номенклатура.Категория = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Категория);
			Номенклатура.Категория.Вставить("ВидыНоменклатурыИнформационнойБазы", Новый Массив);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоБрендам(ИдентификаторыБрендов, ТаблицаНоменклатуры, Отказ)
	
	Если ИдентификаторыБрендов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаБренды();
	ПараметрыЗапроса.ИдентификаторыБрендов   = ИдентификаторыБрендов;
	ПараметрыЗапроса.НаборПолей              = РаботаСНоменклатуройСлужебный.НаборПолейМаксимальный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаБренды(ПараметрыЗапроса);
	ТаблицаБрендов   = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Бренд Из ТаблицаБрендов Цикл
		СтрокиНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("ИдентификаторБренда", Бренд.Идентификатор));	
		
		Для каждого Номенклатура Из СтрокиНоменклатуры Цикл
			Номенклатура.Бренд = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Бренд);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоПроизводителям(ИдентификаторыПроизводителей, ТаблицаНоменклатуры, Отказ)
	
	Если ИдентификаторыПроизводителей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаПроизводители();
	ПараметрыЗапроса.ИдентификаторыПроизводителей = ИдентификаторыПроизводителей;
	ПараметрыЗапроса.НаборПолей                   = РаботаСНоменклатуройСлужебный.НаборПолейМаксимальный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаПроизводители(ПараметрыЗапроса);
	ТаблицаПроизводителей    = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Производитель Из ТаблицаПроизводителей Цикл
		СтрокиНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("ИдентификаторПроизводителя", Производитель.Идентификатор));	
		
		Для каждого Номенклатура Из СтрокиНоменклатуры Цикл
			Номенклатура.Производитель = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Производитель);
		КонецЦикла;		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроставитьСоответствиеРеквизитовИЗначений(ДополнительныйРеквизит, ДеревоСоответствий)
	
	СоответствиеРеквизита = ДеревоСоответствий.Строки.Найти(ДополнительныйРеквизит.Идентификатор, "ИдентификаторРеквизитаКатегории");
	
	Если СоответствиеРеквизита = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныйРеквизит.РеквизитИнформационнойБазы = СоответствиеРеквизита.РеквизитОбъекта;
	
	Если НЕ ЗначениеЗаполнено(ДополнительныйРеквизит.ИдентификаторЗначения) Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеЗначения = СоответствиеРеквизита.Строки.Найти(ДополнительныйРеквизит.ИдентификаторЗначения, "ИдентификаторЗначения");
	
	Если СоответствиеЗначения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныйРеквизит.ЗначениеИнформационнойБазы = СоответствиеЗначения.ЗначениеОбъекта;
	
КонецПроцедуры

Процедура УстановитьСтатусыПроверкиНоменклатуры(ДанныеПоНоменклатуре)
	
	Статусы = РаботаСНоменклатуройСлужебныйКлиентСервер.СтатусыПроверкиНоменклатуры();
	
	ДанныеПоНоменклатуре.Колонки.Добавить("СтатусПроверки", Новый ОписаниеТипов("Строка"));
	
	Для каждого СтрокаНоменклатуры Из ДанныеПоНоменклатуре Цикл
		
		Если СтрокаНоменклатуры.Характеристики.Количество() = 0
			И СтрокаНоменклатуры.ДополнительныеРеквизиты.Количество() = 0 Тогда
			
			СтрокаНоменклатуры.СтатусПроверки = Статусы.ХарактеристикиНеИспользуются;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаНоменклатуры.Категория.ВидыНоменклатурыИнформационнойБазы.Количество() = 0
			И СтрокаНоменклатуры.Характеристики.Количество() > 0 Тогда
			
			СтрокаНоменклатуры.СтатусПроверки = Статусы.НеСопоставленаКатегория;
			Продолжить;
		КонецЕсли;
		
		////////////////////////////////////////////////////////////////////////////////
				
		НастройкаРаботыСХарактеристиками = СтрокаНоменклатуры.ВидНоменклатурыПоУмолчанию;
		
		Если НастройкаРаботыСХарактеристиками.ИндивидуальныеХарактеристикиНоменклатуры Тогда
			СтрокаНоменклатуры.СтатусПроверки = Статусы.ИндивидуальныеХарактеристики;
			Продолжить;
		КонецЕсли;
		
		// Характеристики грузятся в дополнительные реквизиты
		
		Если СтрокаНоменклатуры.Характеристики.Количество() > 0 
			И НЕ НастройкаРаботыСХарактеристиками.ЗагружатьХарактеристикиВХарактеристики Тогда
			
			СтрокаНоменклатуры.СтатусПроверки = Статусы.ХарактеристикиГрузятсяВДопРеквизиты;
			Продолжить;
		КонецЕсли;	
		
		// Сопоставление реквизитов характеристик
		
		Если СтрокаНоменклатуры.Характеристики.Количество() > 0 
			И СтрокаНоменклатуры.Характеристики[0].ДополнительныеРеквизиты.Найти(Неопределено, "РеквизитИнформационнойБазы") <> Неопределено Тогда
			
			СтрокаНоменклатуры.СтатусПроверки = Статусы.НеВсеРеквизитыСопоставлены;
			Продолжить;
		КонецЕсли;
		
		////////////////////////////////////////////////////////////////////////////////
		
		Если СтрокаНоменклатуры.Характеристики.Количество() >= 1000 Тогда
			СтрокаНоменклатуры.СтатусПроверки = Статусы.ХарактеристикиГрузятсяВДопРеквизиты;
			Продолжить;
		КонецЕсли;
		
		СтрокаНоменклатуры.СтатусПроверки = Статусы.ГотоваКЗагрузке;
		
	КонецЦикла;
		
КонецПроцедуры

// Получить данные по номенклатуре.
//
// Параметры:
//  ИдентификаторыНоменклатуры			 - Массив (Строка) - идентификаторы номенклатуры.
//  ЗаполнитьСоответствиеНоменклатуры	 - Булево - заполнить ссылки на соответствующую номенклатуру базы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - данны номенклатуры.
//
Функция ПолучитьДанныеПоНоменклатуре(Знач ИдентификаторыНоменклатуры, ЗаполнитьСоответствиеНоменклатуры = Ложь, Отказ = Ложь)
	
	Если ТипЗнч(ИдентификаторыНоменклатуры) = Тип("Строка")Тогда
		ИдентификаторыНоменклатуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыНоменклатуры);
	КонецЕсли;
	
	ДанныеПоНоменклатуре = РаботаСНоменклатуройСлужебный.ПолучитьДанныеПоНоменклатуре(ИдентификаторыНоменклатуры, ЗаполнитьСоответствиеНоменклатуры, Отказ);
	
	Если Отказ Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеПоНоменклатуре) <> Тип("ТаблицаЗначений") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДанныеПоНоменклатуре.Количество() = 0 Тогда
		Возврат ДанныеПоНоменклатуре;
	КонецЕсли;
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаВсеРодительскиеКатегории(ДанныеПоНоменклатуре.ВыгрузитьКолонку("ИдентификаторКатегории"));
	ПутьДоКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	ДанныеПоНоменклатуре.Колонки.Добавить("ПутьДоКатегорий");
	Если Не Отказ Тогда 
		КоличествоЗаписей = ДанныеПоНоменклатуре.Количество();
		Для Индекс = 0 По КоличествоЗаписей-1 Цикл 
			СтрокаДанных = ДанныеПоНоменклатуре[Индекс];
			Путь = ПутьДоКатегорий[Индекс];
			Если Путь.Количество() Тогда 
				Наименования = Путь.ВыгрузитьКолонку("Наименование");
				Если Наименования.Количество() = 1 Тогда 
					СтрокаДанных.ПутьДоКатегорий = Наименования[0];
				ИначеЕсли Наименования.Количество() > 1 Тогда 
					НаименованиеКатегории = Новый Массив;
					НаименованиеКатегории.Добавить(Наименования[0]);
					МаксимальнаяДлина = 85;
					Занято = СтрДлина(Наименования[0]) + СтрДлина(Наименования[Наименования.ВГраница()]) + 9 ;
					Для ИндексПути = 1 По Наименования.Количество()-2 Цикл 
						ДлинаОбщая = Занято + СтрДлина(Наименования[ИндексПути]) + 3;
						Если ДлинаОбщая <= МаксимальнаяДлина Тогда 
							НаименованиеКатегории.Добавить(Наименования[ИндексПути]);
							Занято = Занято + СтрДлина(Наименования[ИндексПути]) + 3;
						ИначеЕсли ИндексПути < Наименования.Количество()-1 Тогда
							Если ДлинаОбщая <= 100 Тогда 
								НаименованиеКатегории.Добавить(Наименования[ИндексПути]);
							КонецЕсли;	
							НаименованиеКатегории.Добавить("...");
							Прервать;
						Иначе
							Прервать;
						КонецЕсли;
					КонецЦикла;
					НаименованиеКатегории.Добавить(Наименования[Наименования.ВГраница()]);
					СтрокаДанных.ПутьДоКатегорий = СтрСоединить(НаименованиеКатегории, " \ ");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеПоНоменклатуре;
	
КонецФункции

#КонецОбласти

#Область ПодготовкаДанныхКатегорий

Процедура ЗаполнитьСоответствиеРеквизитовИЗначенийКатегорий(СопоставленныеРеквизиты, ДанныеПоКатегории, ВидНоменклатуры) Экспорт
	
	ДанныеПоКатегории.ДополнительныеРеквизиты.ЗаполнитьЗначения(Неопределено, "РеквизитИнформационнойБазы");
	ДанныеПоКатегории.Характеристики.ДополнительныеРеквизиты.ЗаполнитьЗначения(Неопределено, "РеквизитИнформационнойБазы");
	
	СоответствияКатегории = СопоставленныеРеквизиты.Строки.Найти(ДанныеПоКатегории.Идентификатор, "ИдентификаторКатегории");
	
	Если СоответствияКатегории = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствияВидаНоменклатуры = СоответствияКатегории.Строки.Найти(ВидНоменклатуры, "ВидНоменклатуры");
	
	Если СоответствияВидаНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ДополнительныйРеквизит Из ДанныеПоКатегории.ДополнительныеРеквизиты Цикл
		ЗаполнитьСоответствиеРеквизита(ДополнительныйРеквизит, СоответствияВидаНоменклатуры);
	КонецЦикла;
	
	Для каждого ДополнительныйРеквизит Из ДанныеПоКатегории.Характеристики.ДополнительныеРеквизиты Цикл
		ЗаполнитьСоответствиеРеквизита(ДополнительныйРеквизит, СоответствияВидаНоменклатуры);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСоответствиеРеквизита(ДополнительныйРеквизит, СоответствияВидаНоменклатуры)
	
	Если СоответствияВидаНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеРеквизита = СоответствияВидаНоменклатуры.Строки.Найти(ДополнительныйРеквизит.Идентификатор, "ИдентификаторРеквизитаКатегории");
	
	Если СоответствиеРеквизита = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ДополнительныйРеквизит.РеквизитИнформационнойБазы = СоответствиеРеквизита.РеквизитОбъекта;
	
	Если НЕ ЗначениеЗаполнено(ДополнительныйРеквизит.Значения) Тогда
		Возврат;
	КонецЕсли;	
	
	ДополнительныйРеквизит.Значения.ЗаполнитьЗначения(Неопределено, "ЗначениеИнформационнойБазы");
	
	Для каждого ТекущееЗначение Из ДополнительныйРеквизит.Значения Цикл
		
		СоответствиеЗначения = СоответствиеРеквизита.Строки.Найти(ТекущееЗначение.Идентификатор, "ИдентификаторЗначения");
		
		Если СоответствиеЗначения <> Неопределено Тогда
			ТекущееЗначение.ЗначениеИнформационнойБазы = СоответствиеЗначения.ЗначениеОбъекта;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьСоответствиеВидовНоменклатуры(ТаблицаКатегорий)
	
	Если ТипЗнч(ТаблицаКатегорий) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКатегорий.Колонки.Добавить("ВидыНоменклатуры", Новый ОписаниеТипов("Массив"));
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории КАК ИдентификаторКатегории,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории В(&ИдентификаторКатегории)
	|ИТОГИ ПО
	|	ИдентификаторКатегории";
	
	Запрос.УстановитьПараметр("ИдентификаторКатегории", ТаблицаКатегорий.ВыгрузитьКолонку("Идентификатор"));
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		СтрокаКатегории = ТаблицаКатегорий.Найти(Выборка.ИдентификаторКатегории, "Идентификатор");
		
		Если СтрокаКатегории <> Неопределено Тогда
			ДетальныеЗаписи = Выборка.Выбрать();
			Пока ДетальныеЗаписи.Следующий() Цикл
				СтрокаКатегории.ВидыНоменклатуры.Добавить(ДетальныеЗаписи.ВидНоменклатуры);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьПутиДоКатегорий(ТаблицаКатегорий)
	
	Если ТипЗнч(ТаблицаКатегорий) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
		
	ТаблицаКатегорий.Колонки.Добавить("ПутьДоКатегории", Новый ОписаниеТипов("Строка"));
	
	Если ТаблицаКатегорий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаВсеРодительскиеКатегории(ТаблицаКатегорий.ВыгрузитьКолонку("Идентификатор"));
	ПутьДоКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из ПутьДоКатегорий Цикл
		
		Если ЭлементКоллекции.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторКатегории = ЭлементКоллекции[0].Идентификатор;
		
		СтрокаКатегории = ТаблицаКатегорий.Найти(ИдентификаторКатегории, "Идентификатор");
		
		Если СтрокаКатегории <> Неопределено Тогда
			ЭлементКоллекции.Удалить(0); // Удаление наименования конечной категории
			СтрокаКатегории.ПутьДоКатегории = СтрСоединить(ЭлементКоллекции.ВыгрузитьКолонку("Наименование"), " \ ");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Идентификаторы дочерних категорий.
//
// Параметры:
//  ИдентификаторыРодительскихКатегорий	 - Массив (Строка) - идентификаторы категорий.
// 
// Возвращаемое значение:
//  Массив - идентификаторы.
//
Функция ИдентификаторыВсехДочернихЛистовыхКатегорий(ИдентификаторыРодительскихКатегорий) 
	
	НомерСтраницы = 1;
	ОграничениеПакетаЗапроса = 1000;
	Отказ = Ложь;
	
	ПоисковыйЗапрос = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
	ПоисковыйЗапрос.ИдентификаторыРодителей = ИдентификаторыРодительскихКатегорий;
	ПоисковыйЗапрос.ТолькоКонечныеПотомки  = Истина;
	ПоисковыйЗапрос.ТолькоПрямыеПотомки    = Ложь;
	ПоисковыйЗапрос.НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейМинимальный();
	ПоисковыйЗапрос.КоличествоЗаписей = ОграничениеПакетаЗапроса;
	ПоисковыйЗапрос.НомерСтраницы = НомерСтраницы;
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
	ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ДочерниеЛистовыеКатегорий = ТаблицаКатегорий.ВыгрузитьКолонку("Идентификатор");
	
	Пока ТаблицаКатегорий.Количество() = ОграничениеПакетаЗапроса Цикл 
		НомерСтраницы = НомерСтраницы + 1;
		
		ПоисковыйЗапрос.НомерСтраницы = НомерСтраницы;
		ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
		ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
		Если Отказ Тогда 
			Возврат Неопределено;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДочерниеЛистовыеКатегорий, ТаблицаКатегорий.ВыгрузитьКолонку("Идентификатор"));
	КонецЦикла; 
	
	Возврат ДочерниеЛистовыеКатегорий;
	
КонецФункции

#КонецОбласти

#Область ФормированиеПредставлениеОбъектов

Процедура ВывестиКлассификаторы(Классификаторы, ТабличныйДокумент, Макет, КарточкаКуплена)
	
	Если Классификаторы = Неопределено
		ИЛИ Классификаторы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	ОбластьСвойстваШапка  = Макет.ПолучитьОбласть("СвойстваШапка");
	ОбластьСвойстваСтрока = Макет.ПолучитьОбласть("СвойстваСтрока");
	
	////////////////////////////////////////////////////////////////////////////////
	
	ОбластьСвойстваШапка.Параметры.ЗаголовокШапки = НСтр("ru = 'Классификаторы'");
	ТабличныйДокумент.Вывести(ОбластьСвойстваШапка);
	
	Для каждого ЭлементКоллекции Из Классификаторы Цикл
		
		ОбластьСвойстваСтрока.Параметры.ИмяСвойства 
			= ПреобразованноеНаименованиеКлассификатора(ЭлементКоллекции.Наименование);
		
		Если КарточкаКуплена Тогда
			ОбластьСвойстваСтрока.Параметры.ЗначениеСвойства = ЭлементКоллекции.Идентификатор;
		Иначе
			ОбластьСвойстваСтрока.Параметры.ЗначениеСвойства = ПредставлениеСкрытогоЗначения();
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьСвойстваСтрока);
	КонецЦикла;
	
	ОбластьСвойстваСтрока = Макет.ПолучитьОбласть("СвойстваСтрока");
	ТабличныйДокумент.Вывести(ОбластьСвойстваСтрока); // Пустая строка
	
КонецПроцедуры

Функция ПреобразованноеНаименованиеКлассификатора(Знач Наименование)
	
	Наименование = ВРег(Наименование);
	
	Результат = Наименование;
	
	Если Наименование = "OKPD2" Тогда
		Результат = "ОКПД2";
	ИначеЕсли Наименование = "TNVED" Тогда	
		Результат = "ТН ВЭД";	
	ИначеЕсли Наименование = "EGAIS" Тогда	
		Результат = "ЕГАИС";	
	ИначеЕсли Наименование = "OKVED2" Тогда	
		Результат = "ОКВЕД2";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ВывестиКоллекцию(Коллекция, Заголовок, ТабличныйДокумент, Макет, ЗаполнятьЗначение = Ложь)
	
	Если Коллекция = Неопределено
		ИЛИ Коллекция.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	ОбластьСвойстваШапка  = Макет.ПолучитьОбласть("СвойстваШапка");
	ОбластьСвойстваСтрока = Макет.ПолучитьОбласть("СвойстваСтрока");
	
	ОбластьСвойстваШапка.Параметры.ЗаголовокШапки = СтрШаблон(Заголовок, Коллекция.Количество());
	ТабличныйДокумент.Вывести(ОбластьСвойстваШапка, 0);
	
	Для Счетчик = 0 По ОбластьСвойстваСтрока.Параметры.Количество() - 1 Цикл
		ОбластьСвойстваСтрока.Параметры.Установить(Счетчик, Неопределено);	
	КонецЦикла;
	
	Для каждого ЭлементКоллекции Из Коллекция Цикл
		ОбластьСвойстваСтрока.Параметры.ИмяСвойства = ЭлементКоллекции.Наименование;
		
		Если ЗаполнятьЗначение Тогда
			ЗначениеСвойства = ?(ЗначениеЗаполнено(ЭлементКоллекции.Значение), 
				ЭлементКоллекции.Значение, 
				ЭлементКоллекции.СтроковоеЗначение);

			Если ЗначениеЗаполнено(ЭлементКоллекции.Значение) И ТипЗнч(ЭлементКоллекции.Значение) = Тип("Строка") Тогда
				Если СтрСравнить(ЭлементКоллекции.Значение, "true") = 0 Тогда
					ЗначениеСвойства = Истина;
				ИначеЕсли СтрСравнить(ЭлементКоллекции.Значение, "false") = 0 Тогда	
					ЗначениеСвойства = Ложь;
				КонецЕсли;	
			КонецЕсли;
				
			ОбластьСвойстваСтрока.Параметры.ЗначениеСвойства = ЗначениеСвойства;	
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьСвойстваСтрока, 1);
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеСкрытогоЗначения()
	
	Возврат НСтр("ru = 'Значение скрыто'");
	
КонецФункции

Процедура СформироватьКарточкуНоменклатуры(Знач ДанныеНоменклатуры, Знач АдресРезультата)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Макет = Обработки.РаботаСНоменклатурой.ПолучитьМакет("ПФ_MXL_КарточкаНоменклатуры");
	
	ОбластьШапка          = Макет.ПолучитьОбласть("Шапка");
	ОбластьОписание       = Макет.ПолучитьОбласть("Описание");
	ОбластьКартинка       = Макет.ПолучитьОбласть("Картинка");
	
	// Заполнение представлений скрытых реквизитов.
	
	ПлатныеРеквизиты = Новый Структура;	
	
	КарточкаКуплена = ДанныеНоменклатуры.ЗаполненныеРеквизиты.Количество() = 0;
	
	Если Не КарточкаКуплена Тогда
		
		Для каждого Реквизит Из ДанныеНоменклатуры.ЗаполненныеРеквизиты Цикл
			ПлатныеРеквизиты.Вставить(Реквизит, ПредставлениеСкрытогоЗначения());
		КонецЦикла;
		
		ПлатныеРеквизиты.Вставить("ПутьДоКатегорий", ПредставлениеСкрытогоЗначения());
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	ОбластьШапка.Параметры.Заполнить(ДанныеНоменклатуры);
	
	Если ДанныеНоменклатуры.НоменклатураПрограммы.Количество() = 0 Тогда
		
		Если ПравоИзмененияДанных() Тогда
			ОбластьШапка.Параметры.НоменклатураПрограммыПредставление = НСтр("ru = 'Создать'");
		Иначе
			ОбластьШапка.Параметры.НоменклатураПрограммыПредставление = НСтр("ru = '<Не загружена>'");
		КонецЕсли;
		
	ИначеЕсли ДанныеНоменклатуры.НоменклатураПрограммы.Количество() = 1 Тогда 
		ОбластьШапка.Параметры.НоменклатураПрограммы =              ДанныеНоменклатуры.НоменклатураПрограммы[0];
		ОбластьШапка.Параметры.НоменклатураПрограммыПредставление = ОбластьШапка.Параметры.НоменклатураПрограммы;
	Иначе
		ОбластьШапка.Параметры.НоменклатураПрограммыПредставление = СтрШаблон(НСтр("ru = 'Список (%1)'"), ДанныеНоменклатуры.НоменклатураПрограммы.Количество());
	КонецЕсли;
		
	ОбластьШапка.Параметры.ШтрихКоды        = СтрСоединить(ДанныеНоменклатуры.ШтрихКоды, "; ");
	ОбластьШапка.Параметры.ЕдиницаИзмерения = ДанныеНоменклатуры.ЕдиницаИзмерения.Наименование;
	ОбластьШапка.Параметры.СтавкаНДС        = ПредставлениеСтавкиНДС(ДанныеНоменклатуры.СтавкаНДС);
	
	ОбластьШапка.Параметры.Заполнить(ПлатныеРеквизиты);
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ВывестиКлассификаторы(ДанныеНоменклатуры.Классификаторы, ТабличныйДокумент, Макет, КарточкаКуплена);
	
	Если ЗначениеЗаполнено(ДанныеНоменклатуры.Описание) 
		ИЛИ ПлатныеРеквизиты.Свойство("Описание") Тогда
		
		ОбластьОписание.Параметры.Описание = ДанныеНоменклатуры.Описание;
		ОбластьОписание.Параметры.Заполнить(ПлатныеРеквизиты);
		ТабличныйДокумент.Вывести(ОбластьОписание);
	КонецЕсли;
	
	Если ПлатныеРеквизиты.Свойство("Изображения") Тогда
		ОбластьКартинка.Параметры.ОписаниеКартинки = НСтр("ru = 'Изображение скрыто'");
		ТабличныйДокумент.Вывести(ОбластьКартинка);
	Иначе
			
		Если ЗначениеЗаполнено(ДанныеНоменклатуры.Изображения) Тогда
			
			ХранилищеКэшей = Новый Массив;
			Для каждого АдресИзображения Из ДанныеНоменклатуры.Изображения Цикл
				
				ЗаписьХранилищаКэшей = Новый Структура("ПутьКДаннымИзображения, АдресИзображения");
				ЗаписьХранилищаКэшей.АдресИзображения       = АдресИзображения.ИзображениеURL;
				ЗаписьХранилищаКэшей.ПутьКДаннымИзображения = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
				
				ХранилищеКэшей.Добавить(ЗаписьХранилищаКэшей);
				
				ПоместитьВоВременноеХранилище(
				РаботаСНоменклатуройСлужебный.ДвоичныеДанныеПоАдресуURL(ЗаписьХранилищаКэшей.АдресИзображения), ЗаписьХранилищаКэшей.ПутьКДаннымИзображения); 
				
			КонецЦикла;
			
			Если ХранилищеКэшей.Количество() Тогда 
				ОбластьКартинка.Рисунки.Рисунок.Картинка = Новый Картинка(ПолучитьИзВременногоХранилища(ХранилищеКэшей[0].ПутьКДаннымИзображения));
				ТабличныйДокумент.Вывести(ОбластьКартинка);
			КонецЕсли;
		КонецЕсли;
			
	КонецЕсли;
		
	ЗаполнитьДополнительныеРеквизитыИХарактеристикиНоменклатуры(ДанныеНоменклатуры, ТабличныйДокумент, Макет, КарточкаКуплена);
	
	ТабличныйДокумент.ПоказатьУровеньГруппировокСтрок(0);
		
	Если НЕ КарточкаКуплена Тогда
		
		ОбластиСкрытыхЗначений = Неопределено;
		
		Пока Истина Цикл
			
			ОбластиСкрытыхЗначений = ТабличныйДокумент.НайтиТекст(ПредставлениеСкрытогоЗначения(), ОбластиСкрытыхЗначений);
			
			Если ОбластиСкрытыхЗначений = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			ОбластиСкрытыхЗначений.ЦветТекста = ЦветаСтиля.НедоступныеДанныеЭДЦвет;
			ОбластиСкрытыхЗначений.Гиперссылка = Ложь;
			ОбластиСкрытыхЗначений.Расшифровка = Неопределено;
			
		КонецЦикла;
	КонецЕсли;
		
	ПоместитьВоВременноеХранилище(ТабличныйДокумент, АдресРезультата);
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеРеквизитыИХарактеристикиКатегории(ДанныеПоКатегории, ТабличныйДокумент, Макет)
	
	Если (ДанныеПоКатегории.Характеристики = Неопределено 
			ИЛИ ДанныеПоКатегории.Характеристики.Количество() = 0)
		И (ДанныеПоКатегории.ДополнительныеРеквизиты = Неопределено 
			ИЛИ ДанныеПоКатегории.ДополнительныеРеквизиты.Количество() = 0) Тогда
		
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
	
	ВывестиКоллекцию(ДанныеПоКатегории.ДополнительныеРеквизиты, 
		НСтр("ru = 'Дополнительные реквизиты (всего %1)'"), ТабличныйДокумент, Макет);
		
	ВывестиКоллекцию(ДанныеПоКатегории.Характеристики.ДополнительныеРеквизиты, 
		НСтр("ru = 'Реквизиты характеристик (всего %1)'"), ТабличныйДокумент, Макет);
	
	ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
			
КонецПроцедуры

Процедура ЗаполнитьДополнительныеРеквизитыИХарактеристикиНоменклатуры(ДанныеНоменклатуры, ТабличныйДокумент, Макет, КарточкаКуплена)
	
	Если (ДанныеНоменклатуры.Характеристики = Неопределено 
			ИЛИ ДанныеНоменклатуры.Характеристики.Количество() = 0)
		И (ДанныеНоменклатуры.ДополнительныеРеквизиты = Неопределено 
			ИЛИ ДанныеНоменклатуры.ДополнительныеРеквизиты.Количество() = 0) Тогда
		
		Возврат;
	КонецЕсли;	
	////////////////////////////////////////////////////////////////////////////////
	
	ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
	
	Если НЕ КарточкаКуплена Тогда
		
		РеквизитыХарактеристик = Новый Массив;
		
		Для каждого ЭлементКоллекции Из ДанныеНоменклатуры.РеквизитыХарактеристик Цикл
			РеквизитыХарактеристик.Вставить("Наименование, Значение", ЭлементКоллекции, ПредставлениеСкрытогоЗначения());
		КонецЦикла;
		
		Для каждого ЭлементКоллекции Из ДанныеНоменклатуры.ДополнительныеРеквизиты Цикл
			ЭлементКоллекции.Значение = ПредставлениеСкрытогоЗначения();
		КонецЦикла;
		
		ВывестиКоллекцию(ДанныеНоменклатуры.ДополнительныеРеквизиты, 
			НСтр("ru = 'Дополнительные реквизиты (всего %1)'"), ТабличныйДокумент, Макет, Истина);
		
		ВывестиКоллекцию(РеквизитыХарактеристик, 
			НСтр("ru = 'Характеристики (всего %1)'"), ТабличныйДокумент, Макет);
	Иначе
		ВывестиКоллекцию(ДанныеНоменклатуры.ДополнительныеРеквизиты, 
			НСтр("ru = 'Дополнительные реквизиты (всего %1)'"), ТабличныйДокумент, Макет, Истина);
		
		ВывестиКоллекцию(ДанныеНоменклатуры.Характеристики, 
			НСтр("ru = 'Характеристики (всего %1)'"), ТабличныйДокумент, Макет);
	КонецЕсли;
		
	ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
		
КонецПроцедуры

Процедура СформироватьПредставлениеПревышенияЛимита(Знач АдресРезультата)
	
	Макет = Обработки.РаботаСНоменклатурой.ПолучитьМакет("ПФ_MXL_ПредставлениеПревышенияЛимита");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ПоместитьВоВременноеХранилище(ТабличныйДокумент, АдресРезультата);
	
КонецПроцедуры

Процедура СформироватьНоменклатураОтсутствует(Знач АдресРезультата)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
	ТабличныйДокумент.ОтображатьСетку     = Ложь;
	
	ТекущаяОбласть = ТабличныйДокумент.Область(2, 1);
	
	ТекущаяОбласть.Текст = НСтр("ru = 'Номенклатура не найдена.'");
	ТекущаяОбласть.Отступ = 2;
	ТекущаяОбласть.Шрифт = Новый Шрифт("Arial", 11);
	
	ПоместитьВоВременноеХранилище(ТабличныйДокумент, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область Биллинг

Функция ЕстьДоступныеОпции(Отказ)
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаПроверкаОпции();
	Результат = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТекущийБаланс(Отказ)
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаБалансОпций();
	Результат = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда 
		Возврат 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ОчиститьСоответствияПоВидуНоменклатуры(ВидНоменклатуры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		// Вид номенклатуры
		
		НаборЗаписей = РегистрыСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидНоменклатуры.Установить(ВидНоменклатуры);
		НаборЗаписей.Записать();
		
		// Реквизиты
		
		НаборЗаписей = РегистрыСведений.СоответствиеРеквизитовРаботаСНоменклатурой.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектСопоставления.Установить(ВидНоменклатуры);
		НаборЗаписей.Записать();
		
		// Значения
		
		НаборЗаписей = РегистрыСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектСопоставления.Установить(ВидНоменклатуры);
		НаборЗаписей.Записать();
				
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура УбратьНеКупленнуюНоменклатуру(ИдентификаторыНоменклатуры, ДанныеПоНоменклатуре, Отказ)
	
	Счетчик = 0;
	
	Пока Счетчик < ДанныеПоНоменклатуре.Количество() Цикл
		Если ДанныеПоНоменклатуре[Счетчик].ЗаполненныеРеквизиты.Количество() > 0 Тогда
			ДанныеПоНоменклатуре.Удалить(Счетчик);
		Иначе
			Счетчик = Счетчик + 1	
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеПоНоменклатуре.Количество() = 0 Тогда
		Если ИдентификаторыНоменклатуры.Количество() = 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Карточка не приобретена или приобретена под другой учетной записью, операция прервана.'"),,,, Отказ);
		ИначеЕсли ИдентификаторыНоменклатуры.Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Отсутствуют приобретенные карточки, операция прервана.'"),,,, Отказ);						
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьТехническоеПредставлениеНоменклатуры(ИдентификаторыНоменклатуры, ДанныеПоНоменклатуре, ХранилищеКэшей, ПредставлениеНоменклатуры)
	
	ПревышенЛимит = ДанныеПоНоменклатуре = Неопределено; 
	
	// Отработка превышения лимита
	
	ТекущийИдентификатор = ИдентификаторыНоменклатуры[0];
	
	ПутьКТабличномуДокументу = ХранилищеКэшей.Получить(ТекущийИдентификатор);
	
	Если ПревышенЛимит Тогда
		СформироватьПредставлениеПревышенияЛимита(ПутьКТабличномуДокументу);	
		ПредставлениеНоменклатуры.ПревышенЛимит = Истина;
	Иначе
		СформироватьНоменклатураОтсутствует(ПутьКТабличномуДокументу);	
		ПредставлениеНоменклатуры.ПревышенЛимит = Ложь;
	КонецЕсли;
	
	ПредставлениеНоменклатуры.Идентификатор            = ТекущийИдентификатор;
	ПредставлениеНоменклатуры.ПутьКТабличномуДокументу = ПутьКТабличномуДокументу; 
	
КонецПроцедуры

Функция ПолучитьСоответствиеВидовНоменклатурыПоСсылкам(ВидыНоменклатуры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры КАК ВидНоменклатуры,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории КАК ИдентификаторКатегории
	|ИЗ
	|	РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры В(&ВидыНоменклатуры)";
	
	Запрос.УстановитьПараметр("ВидыНоменклатуры", ВидыНоменклатуры);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура УбратьРанееЗагруженныеКатегории(Идентификаторы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	
	ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторКатегории", 
		Метаданные.РегистрыСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой.Измерения.ИдентификаторКатегории.Тип);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ТаблицаИдентификаторов, Идентификаторы, "ИдентификаторКатегории");
		
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ТаблицаИдентификаторов.ИдентификаторКатегории КАК ИдентификаторКатегории
	|ПОМЕСТИТЬ ВТИдентификаторыКатегорий
	|ИЗ
	|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИдентификаторыКатегорий.ИдентификаторКатегории КАК ИдентификаторКатегории
	|ИЗ
	|	ВТИдентификаторыКатегорий КАК ВТИдентификаторыКатегорий
	|ГДЕ
	|	НЕ ВТИдентификаторыКатегорий.ИдентификаторКатегории В
	|				(ВЫБРАТЬ
	|					СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории КАК ИдентификаторКатегории
	|				ИЗ
	|					РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатурыРаботаСНоменклатурой)";
	
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Идентификаторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторКатегории");
	
КонецПроцедуры

Процедура СообщитьПользователюОНарушенииПравДоступа()
	
	ТекстСообщения = НСтр("ru = 'Нарушение прав доступа.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

Процедура ВыполнитьОбновлениеНоменклатуры(КоличествоОбновленныхЗаписей)
	
	РаботаСНоменклатуройСлужебный.ОбновитьАвтоматическиОбновляемыеОбъекты(КоличествоОбновленныхЗаписей);

КонецПроцедуры

Функция НовыйЭлементВидаНоменклатуры(ДанныеЗаполнения)
	
	ВидНоменклатурыСсылка = Неопределено;
	
	РаботаСНоменклатуройПереопределяемый.СоздатьВидНоменклатуры(ДанныеЗаполнения, ВидНоменклатурыСсылка);
	
	ДополнительныеРеквизиты = Новый ТаблицаЗначений;
	
	ДополнительныеРеквизиты.Колонки.Добавить("РеквизитВидаНоменклатуры");
	ДополнительныеРеквизиты.Колонки.Добавить("ИдентификаторРеквизитаКатегории");
	ДополнительныеРеквизиты.Колонки.Добавить("ЯвляетсяРеквизитомХарактеристики");
	
	Для каждого ДополнительныйРеквизит Из ДанныеЗаполнения.ДополнительныеРеквизиты Цикл
		СоздатьДополнительныйРеквизит(ВидНоменклатурыСсылка, ДополнительныйРеквизит, ДополнительныеРеквизиты, Ложь);	
	КонецЦикла;
			
	Для каждого ДополнительныйРеквизит Из ДанныеЗаполнения.Характеристики.ДополнительныеРеквизиты Цикл
		СоздатьДополнительныйРеквизит(ВидНоменклатурыСсылка, ДополнительныйРеквизит, ДополнительныеРеквизиты, Истина);	
	КонецЦикла;
	
	РаботаСНоменклатуройПереопределяемый.ПрисвоитьРеквизитыОбъекту(ВидНоменклатурыСсылка, 
		ДополнительныеРеквизиты.Скопировать(Новый Структура("ЯвляетсяРеквизитомХарактеристики", Ложь)).ВыгрузитьКолонку("РеквизитВидаНоменклатуры"), Ложь);
	
	РаботаСНоменклатуройПереопределяемый.ПрисвоитьРеквизитыОбъекту(ВидНоменклатурыСсылка, 
		ДополнительныеРеквизиты.Скопировать(Новый Структура("ЯвляетсяРеквизитомХарактеристики", Истина)).ВыгрузитьКолонку("РеквизитВидаНоменклатуры"), Истина);
	
	ЗаписатьСоответствиеРеквизитов(ВидНоменклатурыСсылка, ДополнительныеРеквизиты);
	
	Возврат ВидНоменклатурыСсылка;
	
КонецФункции

Функция ПолучитьЗагруженныеХарактеристики(Характеристики, ВидНоменклатуры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаХарактеристикДляПоиска = Новый ТаблицаЗначений;
	
	ТаблицаХарактеристикДляПоиска.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	ТаблицаХарактеристикДляПоиска.Колонки.Добавить("Свойство", Метаданные.ОпределяемыеТипы.ДополнительныеРеквизитыРаботаСНоменклатурой.Тип);
	
	УниверсальныйТип = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100));
	УниверсальныйТип = Новый ОписаниеТипов(УниверсальныйТип, "Булево, Число, Дата");
	УниверсальныйТип = Новый ОписаниеТипов(УниверсальныйТип, Справочники.ТипВсеСсылки().Типы());
	УниверсальныйТип = Новый ОписаниеТипов(УниверсальныйТип, Документы.ТипВсеСсылки().Типы());
	
	ТаблицаХарактеристикДляПоиска.Колонки.Добавить("Значение", УниверсальныйТип);
	
	Для каждого Характеристика Из Характеристики Цикл
		Для каждого СвойствоХарактеристики Из Характеристика.ДополнительныеРеквизиты Цикл
			
			Если НЕ ЗначениеЗаполнено(СвойствоХарактеристики.РеквизитИнформационнойБазы) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаХарактеристикДляПоиска.Добавить();
			
			НоваяСтрока.Характеристика = Характеристика.Идентификатор;
			НоваяСтрока.Свойство = СвойствоХарактеристики.РеквизитИнформационнойБазы;
			НоваяСтрока.Значение = ЗначениеДополнительногоРеквизита(СвойствоХарактеристики);
			
		КонецЦикла;	
	КонецЦикла;
	
	ЗначенияХарактеристикТекущейБазы = Новый ТаблицаЗначений;
	
	ЗначенияХарактеристикТекущейБазы.Колонки.Добавить("ХарактеристикаБазы", Новый ОписаниеТипов(Справочники.ТипВсеСсылки().Типы()));
	ЗначенияХарактеристикТекущейБазы.Колонки.Добавить("Свойство", Метаданные.ОпределяемыеТипы.ДополнительныеРеквизитыРаботаСНоменклатурой.Тип);
	ЗначенияХарактеристикТекущейБазы.Колонки.Добавить("Значение", УниверсальныйТип);
	
	РаботаСНоменклатуройПереопределяемый.ЗаполнитьТаблицуХарактеристикПоВидуНоменклатуры(ВидНоменклатуры, ЗначенияХарактеристикТекущейБазы);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ХарактеристикиБазы.ХарактеристикаБазы КАК ХарактеристикаБазы,
	|	ХарактеристикиБазы.Свойство КАК Свойство,
	|	ХарактеристикиБазы.Значение КАК Значение
	|ПОМЕСТИТЬ ВТХарактеристикиБазы
	|ИЗ
	|	&ТаблицаХарактеристикТекущейБазы КАК ХарактеристикиБазы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаХарактеристик.Характеристика КАК ХарактеристикаСервиса,
	|	ТаблицаХарактеристик.Свойство КАК Свойство,
	|	ТаблицаХарактеристик.Значение КАК Значение
	|ПОМЕСТИТЬ ВТХарактеристикиСервиса
	|ИЗ
	|	&ТаблицаХарактеристикСервиса КАК ТаблицаХарактеристик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТХарактеристикиБазы.ХарактеристикаБазы КАК ХарактеристикаБазы
	|ПОМЕСТИТЬ ВТХарактеристикиБазыРазличные
	|ИЗ
	|	ВТХарактеристикиБазы КАК ВТХарактеристикиБазы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТХарактеристикиСервиса.ХарактеристикаСервиса КАК ХарактеристикаСервиса,
	|	ВТХарактеристикиСервиса.Свойство КАК Свойство,
	|	ВТХарактеристикиСервиса.Значение КАК Значение,
	|	ЕСТЬNULL(ВТХарактеристикиБазыРазличные.ХарактеристикаБазы, НЕОПРЕДЕЛЕНО) КАК ХарактеристикаБазы
	|ПОМЕСТИТЬ ВТСоединениеТаблиц
	|ИЗ
	|	ВТХарактеристикиСервиса КАК ВТХарактеристикиСервиса
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиБазыРазличные КАК ВТХарактеристикиБазыРазличные
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСоединениеТаблиц.ХарактеристикаСервиса КАК ХарактеристикаСервиса,
	|	ВТСоединениеТаблиц.ХарактеристикаБазы КАК ХарактеристикаБазы,
	|	ВЫБОР
	|		КОГДА (ВТСоединениеТаблиц.ХарактеристикаБазы, ВТСоединениеТаблиц.Свойство, ВТСоединениеТаблиц.Значение) В
	|				(ВЫБРАТЬ
	|					ВТХарактеристикиБазы.ХарактеристикаБазы КАК ХарактеристикаБазы,
	|					ВТХарактеристикиБазы.Свойство КАК Свойство,
	|					ВТХарактеристикиБазы.Значение КАК Значение
	|				ИЗ
	|					ВТХарактеристикиБазы КАК ВТХарактеристикиБазы)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоВхождений
	|ПОМЕСТИТЬ ВТЧислоВхождений
	|ИЗ
	|	ВТСоединениеТаблиц КАК ВТСоединениеТаблиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЧислоВхождений.ХарактеристикаСервиса КАК ХарактеристикаСервиса,
	|	ВТЧислоВхождений.ХарактеристикаБазы КАК ХарактеристикаБазы,
	|	СУММА(ВТЧислоВхождений.КоличествоВхождений) КАК КоличествоВхождений
	|ПОМЕСТИТЬ ВТЧислоВхожденийСумма
	|ИЗ
	|	ВТЧислоВхождений КАК ВТЧислоВхождений
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТЧислоВхождений.ХарактеристикаСервиса,
	|	ВТЧислоВхождений.ХарактеристикаБазы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТХарактеристикиСервиса.ХарактеристикаСервиса КАК ХарактеристикаСервиса,
	|	КОЛИЧЕСТВО(ВТХарактеристикиСервиса.Свойство) КАК КоличествоСвойств
	|ПОМЕСТИТЬ ВТКоличествоСвойств
	|ИЗ
	|	ВТХарактеристикиСервиса КАК ВТХарактеристикиСервиса
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТХарактеристикиСервиса.ХарактеристикаСервиса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЧислоВхожденийСумма.ХарактеристикаСервиса КАК ХарактеристикаСервиса,
	|	ВТЧислоВхожденийСумма.ХарактеристикаБазы КАК ХарактеристикаБазы,
	|	ВТЧислоВхожденийСумма.КоличествоВхождений КАК КоличествоВхождений,
	|	ВТКоличествоСвойств.КоличествоСвойств КАК КоличествоСвойств
	|ПОМЕСТИТЬ ВТКоличествоВхождений
	|ИЗ
	|	ВТЧислоВхожденийСумма КАК ВТЧислоВхожденийСумма
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоличествоСвойств КАК ВТКоличествоСвойств
	|		ПО ВТЧислоВхожденийСумма.ХарактеристикаСервиса = ВТКоличествоСвойств.ХарактеристикаСервиса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТКоличествоВхождений.ХарактеристикаСервиса КАК ХарактеристикаСервиса,
	|	ВТКоличествоВхождений.ХарактеристикаБазы КАК ХарактеристикаБазы	
	|ИЗ
	|	ВТКоличествоВхождений КАК ВТКоличествоВхождений
	|ГДЕ
	|	ВТКоличествоВхождений.КоличествоВхождений = ВТКоличествоВхождений.КоличествоСвойств";
		
	Запрос.УстановитьПараметр("ТаблицаХарактеристикСервиса", ТаблицаХарактеристикДляПоиска);
	Запрос.УстановитьПараметр("ТаблицаХарактеристикТекущейБазы", ЗначенияХарактеристикТекущейБазы);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗаполнитьЗначенияХарактеристик(ДанныеЗаполнения, Номенклатура)
	
	ИндивидуальныеХарактеристикиНоменклатуры 
		= ДанныеЗаполнения.ВидНоменклатурыПоУмолчанию.ИндивидуальныеХарактеристикиНоменклатуры;
	ВидНоменклатуры 
		= ДанныеЗаполнения.ВидНоменклатурыПоУмолчанию.ВидНоменклатуры;
		
	ДанныеЗаполнения.Характеристики.Колонки.Добавить("ХарактеристикаИнформационнойБазы");	
		
	Если ИндивидуальныеХарактеристикиНоменклатуры Тогда
		Для каждого Характеристика Из ДанныеЗаполнения.Характеристики Цикл
			СсылкаНаХарактеристику = Неопределено;
			РаботаСНоменклатуройПереопределяемый.СоздатьХарактеристику(Характеристика, Номенклатура, СсылкаНаХарактеристику);
			Характеристика.ХарактеристикаИнформационнойБазы = СсылкаНаХарактеристику;
		КонецЦикла;
	Иначе
		
		ЗагруженныеРанееХарактеристики = ПолучитьЗагруженныеХарактеристики(
			ДанныеЗаполнения.Характеристики, 
			ВидНоменклатуры);
				
		Для каждого Характеристика Из ДанныеЗаполнения.Характеристики Цикл
			
			ЗагруженныеХарактеристики = ЗагруженныеРанееХарактеристики.Найти(Характеристика.Идентификатор, "ХарактеристикаСервиса");
			
			Если ЗагруженныеХарактеристики <> Неопределено Тогда
				Характеристика.ХарактеристикаИнформационнойБазы = ЗагруженныеХарактеристики.ХарактеристикаБазы;
				Продолжить;
			КонецЕсли;
			
			СсылкаНаХарактеристику = Неопределено;
			РаботаСНоменклатуройПереопределяемый.СоздатьХарактеристикуСДополнительнымиРеквизитами(Характеристика, ВидНоменклатуры, Неопределено);
			Характеристика.ХарактеристикаИнформационнойБазы = СсылкаНаХарактеристику;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьДанныеКатегорийПоИдентификаторам(ИдентификаторыКатегорий, Отказ = Ложь)
	
	Если ТипЗнч(ИдентификаторыКатегорий) = Тип("Строка") Тогда
		ИдентификаторыКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыКатегорий);
	КонецЕсли;
	
	ОграничениеПакетаЗапроса = 1000;
	НомерСтраницы            = 1;
			
	ПоисковыйЗапрос = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
	
	ПоисковыйЗапрос.Идентификаторы    = ИдентификаторыКатегорий;
	ПоисковыйЗапрос.НаборПолей        = РаботаСНоменклатуройСлужебный.НаборПолейМаксимальный();
	ПоисковыйЗапрос.КоличествоЗаписей = ОграничениеПакетаЗапроса;
	
	ТаблицаКатегорийИтоговая = Неопределено;
	
	Пока Истина Цикл
		
		ПоисковыйЗапрос.НомерСтраницы = НомерСтраницы;
		ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПоисковыйЗапрос);
		ТаблицаКатегорий = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
		Если Отказ Тогда 
			Возврат Неопределено;
		КонецЕсли;
		
		Если ТаблицаКатегорий.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если ТаблицаКатегорийИтоговая = Неопределено Тогда
			ТаблицаКатегорийИтоговая = ТаблицаКатегорий.СкопироватьКолонки();
		КонецЕсли;
		
		Для каждого СтрокаТЗ Из ТаблицаКатегорий Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаКатегорийИтоговая.Добавить(), СтрокаТЗ);
		КонецЦикла;
				
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если ТаблицаКатегорийИтоговая = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат ТаблицаКатегорийИтоговая;
	
КонецФункции

Функция ПолучитьЗначенияВсехДополнительныхРеквизитов(ИдентификаторыКатегорий, Отказ = Ложь)
	
	ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаЗначенияДополнительныхРеквизитовКатегорий();
	
	ПараметрыЗапроса.Идентификаторы = ИдентификаторыКатегорий;
	ПараметрыЗапроса.НаборПолей = РаботаСНоменклатуройСлужебный.НаборПолейСтандартный();
	
	ПараметрыКоманды = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаЗначенияДополнительныхРеквизитовКатегорий(ПараметрыЗапроса);
	
	Возврат РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
КонецФункции

Процедура ОтправитьДанныеПорционно(ИзмененныеОбъекты, ДанныеДляОтправки, ТипОбъектов, Отказ)
	
	СтрокиДляОтправки = Новый Массив;
	Счетчик           = 0;
	ТаблицаСоздана    = Ложь;
	
	РазмерПорции = КоличествоСтрокДанныхДляПроверкиОбновления();
	
	Если СтрСравнить(ТипОбъектов, "Категории") = 0 Тогда
		ПараметрыПоиска = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаКатегории();
		ИмяПараметра = "ОбновляемыеКатегории";
	ИначеЕсли СтрСравнить(ТипОбъектов, "Номенклатура") = 0  Тогда	
		ПараметрыПоиска = РаботаСНоменклатуройСлужебный.ОписаниеПараметровЗапросаНоменклатура();	
		ИмяПараметра = "ОбновлениеНоменклатуры";
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из ДанныеДляОтправки Цикл
		
		СтрокиДляОтправки.Добавить(ЭлементКоллекции);
		
		Счетчик = Счетчик + 1;
		
		Если Счетчик = РазмерПорции ИЛИ Счетчик = ДанныеДляОтправки.Количество() Тогда
			
			ПараметрыПоиска[ИмяПараметра] = СтрокиДляОтправки;
			ПараметрыПоиска.НаборПолей    = РаботаСНоменклатуройСлужебный.НаборПолейМинимальный();
			
			Если СтрСравнить(ТипОбъектов, "Категории") = 0 Тогда
				ПараметрыКоманды              = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаКатегории(ПараметрыПоиска);
			ИначеЕсли СтрСравнить(ТипОбъектов, "Номенклатура") = 0  Тогда	
				ПараметрыКоманды              = РаботаСНоменклатуройСлужебный.ПараметрыЗапросаНоменклатура(ПараметрыПоиска);	
			КонецЕсли;
			
			ОбновляемыеОбъекты = РаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);	
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;

			Если НЕ ТаблицаСоздана Тогда
				ИзмененныеОбъекты = ОбновляемыеОбъекты.Скопировать();
				ТаблицаСоздана = Истина;
			Иначе
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОбновляемыеОбъекты, ИзмененныеОбъекты);
			КонецЕсли;
			
			Счетчик = 0;
			СтрокиДляОтправки.Очистить();
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеСтавкиНДС(Знач СтавкаНДС)
	
	СтавкаНДССтрокой = Строка(СтавкаНДС);
	
	Если Найти("-", СтавкаНДССтрокой) > 0 Тогда
		Возврат СтавкаНДССтрокой;
	Иначе
		Возврат СтавкаНДССтрокой + "%";	
	КонецЕсли;
	
КонецФункции

// Количество строк коллекции для проверки обновления номенклатуры и видов номенклатуры.
// 
// Возвращаемое значение:
//  Число - количество строк.
//
Функция КоличествоСтрокДанныхДляПроверкиОбновления()
	
	Возврат 10000;
	
КонецФункции

// Параметры записи соответствия номенклатуры.
// 
// Возвращаемое значение:
//  Структура - параметры записи.
//
Функция ПараметрыЗаписиСоответствияНоменклатуры()
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ИдентификаторНоменклатурыСервиса", "");
	Параметры.Вставить("ПредставлениеНоменклатурыСервиса", "");
	Параметры.Вставить("ОбновляетсяАвтоматически", Истина);
	
	Возврат Параметры;
	
КонецФункции

// Параметры записи соответствия вида номенклатуры.
// 
// Возвращаемое значение:
//  Структура - параметры записи.
//
Функция ПараметрыЗаписиСоответствияВидаНоменклатуры()
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ПредставлениеКатегории",   "");
	Параметры.Вставить("ИдентификаторКатегории",   "");
	Параметры.Вставить("ОбновляетсяАвтоматически", Истина);
	Параметры.Вставить("ЗагружатьХарактеристикиВХарактеристики", Истина);
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#КонецОбласти