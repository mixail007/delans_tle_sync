////////////////////////////////////////////////////////////////////////////////
// Подсистема "Торговые предложения".
// ОбщийМодуль.ТорговыеПредложенияКлиент.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма - УправляемаяФорма - форма из обработчика события которой происходит вызов процедуры.
//  ПараметрыЗаписи - Структура - параметры записи.
//
Процедура ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	Оповестить("ТорговыеПредложения_ПослеЗаписи", ПараметрыЗаписи);
	
КонецПроцедуры

// Отрабатывает событие нажатия на гиперссылку на форме.
//
// Параметры:
//  Форма - УправляемаяФорма - из обработчика события которой происходит вызов процедуры.
//  Объект - ЛюбаяСсылка - Ссылка на объект источник события.
//  Элемент - ЭлементФормы - элемент формы.
//  СтандартнаяОбработка - Булево - Признак стандартной отработки события.
//
Процедура ТорговыеПредложенияНажатиеГиперссылки(Форма, Объект, Элемент, СтандартнаяОбработка) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	ОчиститьСообщения();
	
	Если Элемент.Имя = "ТорговыеПредложенияСостояниеОбмена" Тогда
		ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.СписокПубликаций",, Объект);
	ИначеЕсли Элемент.Имя = "ТорговыеПредложенияОткрытьНастройкиПубликации" Тогда
		ОткрываемаяФорма = "РегистрСведений.СостоянияСинхронизацииТорговыеПредложения.Форма.НастройкиПубликации";
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("ТорговоеПредложение", Объект.Ссылка);
		ОткрытьФорму(ОткрываемаяФорма, ПараметрыОткрытияФормы, Объект);
	КонецЕсли;
	
КонецПроцедуры

// Отрабатывает событие смены флага публикации на форме.
//
// Параметры:
//  Форма - УправляемаяФорма - из обработчика события которой происходит вызов процедуры.
//  Объект - ЛюбаяСсылка - Ссылка на объект источник события.
//  Элемент - ЭлементФормы - элемент формы.
//  СтандартнаяОбработка - Булево - Признак стандартной отработки события.
//
Процедура ПриИзмененииПубликоватьТорговыеПредложения(Форма, Объект, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Форма.Элементы.ТорговыеПредложенияСостояниеОбмена.Заголовок = НСтр("ru = 'Для смены статуса публикации нажмите Записать'");
	Форма.Элементы.ТорговыеПредложенияСостояниеОбмена.Доступность = Ложь;
	Форма.Элементы.ТорговыеПредложенияОткрытьНастройкиПубликации.Доступность = Ложь;
	Форма.Элементы.Организация.АвтоОтметкаНезаполненного = Форма.ТорговыеПредложенияПубликовать;
	
КонецПроцедуры

// Открытие форму подсказки.
//
// Параметры:
//  Форма	 - УправляемаяФорма - форма, из которой открывается форма подсказки.
//
Процедура ОткрытьФормуПодсказок(Форма) Экспорт
	
	Подсказка = Форма.Подключаемый_ТорговыеПредложенияПодсказка;
	ОчиститьСообщения();
	
	Если ТипЗнч(Подсказка) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикЗакрытия = Новый ОписаниеОповещения("СкрытьПодсказку", ТорговыеПредложенияКлиент, Форма);
	
	// Открытие формы регистрации.
	Если Подсказка.Действия.Найти("Регистрация") <> Неопределено Тогда
		
		ОткрытьФорму("Обработка.БизнесСеть.Форма.РегистрацияОрганизаций", Подсказка,,,,, ОбработчикЗакрытия);
		
	ИначеЕсли Подсказка.Действия.Найти("ПоискПоТоварам") <> Неопределено Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ПараметрыКоманды", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Подсказка.Основание));
		ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.ПоискПоТоварам", ПараметрыОткрытия, Форма,,,, ОбработчикЗакрытия);
		
	ИначеЕсли Подсказка.Действия.Найти("ПоискПоОтборам") <> Неопределено Тогда
		
		ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.ПоискПоОтборам", Подсказка.ДополнительныеПараметры, Форма,,,,
			ОбработчикЗакрытия);
		
	Иначе
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Подсказка", Форма.Подключаемый_ТорговыеПредложенияПодсказка);
		ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.Подсказка", ПараметрыОткрытия, Форма,,,, ОбработчикЗакрытия);
		
	КонецЕсли;
	
КонецПроцедуры

// Обновление подсказки торговых предложений в форме.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, для которой обновляется подсказки.
//
Процедура ОбновитьПодсказкуФормы(Форма) Экспорт
	
	Если Форма.Элементы.Найти("Подключаемый_ПодсказкаТорговыеПредложения") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКонтекста = ДанныеКонтекстаДляПодсказки(Форма);
	Если ДанныеКонтекста = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = БизнесСетьВызовСервера.ОбновитьПодсказкуФормыВФоне(ДанныеКонтекста, Форма.УникальныйИдентификатор);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Ложь;
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("Форма", Форма);
	ПараметрыЗавершения.Вставить("ДанныеКонтекста", ДанныеКонтекста);
	
	ДлительнаяОперацияЗавершение = Новый ОписаниеОповещения("ОбновитьПодсказкуФормыЗавершение",
		ЭтотОбъект, ПараметрыЗавершения);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
		ДлительнаяОперацияЗавершение,
		ПараметрыОжидания);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Данные контекста для подсказки.
//
// Параметры:
//  Форма	 - УправляемаяФорма - форма для которой получается подсказка.
// 
// Возвращаемое значение:
//  Структура - данные подсказки:
//   * Основание - Произвольный - ссылка на источник данных, например документ.
//   * Организации - Массив - организации контекста.
//   * РежимПоставщика - Булево - контекст определяет режим поставщика.
//   * РежимПокупателя - Булево - контекст определяет режим покупателя.
//   * РежимПоискаПоОтборам - Булево - действием подсказки является открытие формы поиска с отборами.
//   * РежимПоискаПоСписку - Булево - действием подсказки является открытие формы поиска по списку.
//
Функция ДанныеКонтекстаДляПодсказки(Форма)
	
	ДанныеКонтекста = Новый Структура;
	ДанныеКонтекста.Вставить("Основание",            Неопределено);
	ДанныеКонтекста.Вставить("Организации",          Новый Массив);
	ДанныеКонтекста.Вставить("РежимПоставщика",      Ложь);
	ДанныеКонтекста.Вставить("РежимПокупателя",      Ложь);
	ДанныеКонтекста.Вставить("РежимПоискаПоОтборам", Ложь);
	ДанныеКонтекста.Вставить("РежимПоискаПоСписку",  Ложь);
	
	ТорговыеПредложенияКлиентПереопределяемый.ПолучитьДанныеКонтекстаДляПодсказки(Форма, ДанныеКонтекста);
	
	Возврат ДанныеКонтекста;
	
КонецФункции

// Асинхронная процедура отображения подсказок, см. ОбновитьПодсказкуФормы.
Процедура ОбновитьПодсказкуФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда // отменено пользователем.
		Возврат;
	КонецЕсли;
	
	Подсказки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если Не ЗначениеЗаполнено(Подсказки)
		ИЛИ Не ЗначениеЗаполнено(Подсказки.Заголовок) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Подсказки, ДополнительныеПараметры.ДанныеКонтекста, "РежимПоставщика, РежимПокупателя, Основание");
	
	Форма = ДополнительныеПараметры.Форма;
	Форма.Подключаемый_ТорговыеПредложенияПодсказка = Подсказки;
	Форма.Элементы.Подключаемый_ПодсказкаТорговыеПредложения.Заголовок = Подсказки.Заголовок;
	Форма.Элементы.Подключаемый_ПодсказкаТорговыеПредложения.Видимость = Истина;
	Форма.Элементы.Подключаемый_КартинкаТорговыеПредложения.Видимость  = Истина;
	
КонецПроцедуры

// Скрытие элементов подсказки в прикладной форме.
//
// Параметры:
//   Результат - Произвольный - результат закрытия формы.
//   ДополнительныеПараметры - УправляемаяФорма - форма, с размещенными элементами подсказок.
//
Процедура СкрытьПодсказку(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры = Неопределено ИЛИ ТипЗнч(ДополнительныеПараметры) <> Тип("УправляемаяФорма") Тогда
		Возврат;
	КонецЕсли;
	
	Картинка = ДополнительныеПараметры.Элементы.Найти("Подключаемый_КартинкаТорговыеПредложения");
	Если Картинка <> Неопределено Тогда
		Картинка.Видимость = Ложь;
	КонецЕсли;
	
	Гиперссылка = ДополнительныеПараметры.Элементы.Найти("Подключаемый_ПодсказкаТорговыеПредложения");
	Если Гиперссылка <> Неопределено Тогда
		Гиперссылка.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти