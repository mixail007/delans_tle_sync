
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с номенклатурой".
// ОбщийМодуль.РаботаСНоменклатуройПереопределяемый.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область АвтоподборНоменклатуры

// Заполнение массива имен полей формы, по которым будет складываться поисковая строка
// для подбора 1С:Номенклатуры при заполнении номенклатуры информационной базы.
// Обрабатывается событие ИзменениеТекстаРедактирования.
//
// Параметры:
//  МассивПолей - Массив - (Строка) массив имен полей полей.
//
Процедура ЗаполнитьМассивПолейСобытияИзменениеТекстаРедактирования(МассивПолей) Экспорт
	
КонецПроцедуры

// Заполнение массива имен полей формы, по которым будет складываться поисковая строка
// для подбора 1С:Номенклатуры при заполнении номенклатуры информационной базы.
// Обрабатывается событие ПриИзменении.
//
// Параметры:
//  МассивПолей - Массив - (Строка) массив имен полей полей.
//
Процедура ЗаполнитьМассивПолейСобытияПриИзменении(МассивПолей) Экспорт
	
	МассивПолей.Добавить("Наименование");
	МассивПолей.Добавить("ЕдиницаИзмерения");
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеОбъектовИнформационнойБазы

// Создание вида номенклатуры в информационной базе.
//
// Параметры:
//  ДанныеЗаполнения - СтрокаТаблицыЗначений - данные, на основании которых идет заполнение объекта. 
//                                             Описание таблицы значений см. РаботаСНоменклатурой.ДанныеКатегорийСервиса
//  ВидНоменклатурыСсылка - Ссылка - ссылка на новый элемент.
//
Процедура СоздатьВидНоменклатуры(ДанныеЗаполнения, ВидНоменклатурыСсылка) Экспорт
	
	ДанныеЗаполненияКатегории = Новый Структура;
	
	Если ДанныеЗаполнения.Тип = "Услуга" Тогда
		ДанныеЗаполненияКатегории.Вставить("ТипНоменклатурыПоУмолчанию", Перечисления.ТипыНоменклатуры.Услуга);
	ИначеЕсли ДанныеЗаполнения.Тип = "Товар" Тогда 
		ДанныеЗаполненияКатегории.Вставить("ТипНоменклатурыПоУмолчанию", Перечисления.ТипыНоменклатуры.Запас);
	КонецЕсли;
	
	КатегорияНоменклатуры = Справочники.КатегорииНоменклатуры.СоздатьЭлемент();
	КатегорияНоменклатуры.Заполнить(ДанныеЗаполненияКатегории);
	КатегорияНоменклатуры.Наименование = ДанныеЗаполнения.Наименование;
	КатегорияНоменклатуры.Записать();
	
	ВидНоменклатурыСсылка = КатегорияНоменклатуры.Ссылка;
	
КонецПроцедуры

// Создание номенклатуры в информационной базе.
//
// Параметры:
//  ДанныеЗаполнения - СтрокаТаблицыЗначений - данные, на основании которых идет заполнение объекта.
//                                             Описание таблицы значений см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса
//  НоменклатураСсылка - Ссылка - ссылка на новый элемент.
//
Процедура СоздатьНоменклатуру(ДанныеЗаполнения, НоменклатураСсылка) Экспорт
	
	// Заполнение объекта
	НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
	НоменклатураОбъект.Заполнить(Неопределено);
	НоменклатураОбъект.Наименование          = ДанныеЗаполнения.Наименование;
	НоменклатураОбъект.НаименованиеПолное    = ?(ЗначениеЗаполнено(ДанныеЗаполнения.НаименованиеДляПечати), ДанныеЗаполнения.НаименованиеДляПечати, ДанныеЗаполнения.Наименование);
	НоменклатураОбъект.КатегорияНоменклатуры = ?(ЗначениеЗаполнено(ДанныеЗаполнения.ВидНоменклатурыПоУмолчанию.ВидНоменклатуры), ДанныеЗаполнения.ВидНоменклатурыПоУмолчанию.ВидНоменклатуры, Справочники.КатегорииНоменклатуры.БезКатегории);
	НоменклатураОбъект.Комментарий           = ДанныеЗаполнения.Описание;
	НоменклатураОбъект.АлкогольнаяПродукция  = ДанныеЗаполнения.УчастникЕГАИС;
	Если ДанныеЗаполнения.УчастникГИСМ Тогда
		НоменклатураОбъект.ВидМаркировки = Перечисления.ВидыМаркировки.МаркируемаяПродукция;
	КонецЕсли;
	
	СтавкаНДС = СтавкаНДСПоДаннымНоменклатурыСервиса(ДанныеЗаполнения.СтавкаНДС);
	Если ЗначениеЗаполнено(СтавкаНДС) Тогда
		НоменклатураОбъект.ВидСтавкиНДС = СтавкаНДС.ВидСтавкиНДС;
	КонецЕсли;
	
	ЕдиницаИзмерения = ЕдиницаИзмеренияПоДаннымНоменклатурыСервиса(ДанныеЗаполнения.ЕдиницаИзмерения);
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		НоменклатураОбъект.ЕдиницаИзмерения = ЕдиницаИзмерения;
	КонецЕсли;
	
	ТипНоменклатуры = ТипНоменклатурыПоДаннымНоменклатурыСервиса(ДанныеЗаполнения.Тип);
	Если ЗначениеЗаполнено(ТипНоменклатуры) Тогда
		НоменклатураОбъект.ТипНоменклатуры = ТипНоменклатуры;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство") Тогда
		НоменклатураОбъект.СчетУчетаЗатрат = ПланыСчетов.Управленческий.НезавершенноеПроизводство;
	Иначе
		НоменклатураОбъект.СчетУчетаЗатрат = ПланыСчетов.Управленческий.КоммерческиеРасходы;
	КонецЕсли;
	НоменклатураОбъект.СчетУчетаЗапасов = ПланыСчетов.Управленческий.СырьеИМатериалы;
	
	НоменклатураОбъект.ОбменДанными.Загрузка = Истина;
	
	НоменклатураОбъект.Записать();
	
	НоменклатураСсылка = НоменклатураОбъект.Ссылка;
	
	// Сохранение изображения
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Изображения) Тогда
		ПрикрепитьИзображения(НоменклатураСсылка, ДанныеЗаполнения.Изображения.ВыгрузитьКолонку("ИзображениеURL"));
	КонецЕсли;
	
КонецПроцедуры

// Создание характеристики с заполнением дополнительных реквизитов.
//
// Параметры:
//  ДанныеЗаполнения     - СтрокаТаблицыЗначений - данные, на основании которых идет заполнение.
//                                                 Описание таблицы значений см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса, 
//                                                 поле Характеристики
//  Владелец             - Ссылка - ссылка на владельца характеристики.
//  ХарактеристикаСсылка - Ссылка - ссылка на новый элемент.
//
Процедура СоздатьХарактеристикуСДополнительнымиРеквизитами(ДанныеЗаполнения, Владелец, ХарактеристикаСсылка) Экспорт
	
КонецПроцедуры

// Создание характеристики.
//
// Параметры:
//  ДанныеЗаполнения     - СтрокаТаблицыЗначений - данные, на основании которых идет заполнение.
//                                                 Описание таблицы значений см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса, 
//                                                 поле Характеристики.
//  Владелец             - Ссылка - ссылка на владельца характеристики.
//  ХарактеристикаСсылка - Ссылка - ссылка на новый элемент.
//
Процедура СоздатьХарактеристику(ДанныеЗаполнения, Владелец, ХарактеристикаСсылка) Экспорт
	
КонецПроцедуры

// Создание дополнительных реквизитов номенклатуры.
//
// Параметры:
//  ДанныеЗаполнения - СтрокаТаблицыЗначений - данные, на основании которых идет заполнение.
//                                             Описание таблицы значений см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса, 
//                                             поле ДополнительныеРеквизиты.
//  НоменклатураСсылка - ЛюбаяСсылка - ссылка на элемент.
//
Процедура ЗаполнитьЗначенияДополнительныхРеквизитов(ДанныеЗаполнения, НоменклатураСсылка) Экспорт
	
	ЗначенияДополнительныхРеквизитов = Новый ТаблицаЗначений;
	
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Свойство");
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Значение");
	
	Для каждого ДополнительныйРеквизит Из ДанныеЗаполнения Цикл
		
		Если НЕ ЗначениеЗаполнено(ДополнительныйРеквизит.РеквизитИнформационнойБазы) Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = ЗначенияДополнительныхРеквизитов.Добавить();
		
		НоваяСтрока.Свойство = ДополнительныйРеквизит.РеквизитИнформационнойБазы;
		НоваяСтрока.Значение = РаботаСНоменклатурой.ЗначениеДополнительногоРеквизита(ДополнительныйРеквизит);
		
	КонецЦикла;
	
	Если ЗначенияДополнительныхРеквизитов.Количество() > 0 Тогда
		УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(НоменклатураСсылка, ЗначенияДополнительныхРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

// Сформировать наименование номенклатуры по характеристике.
//
// Параметры:
//  НаименованиеНоменклатуры	 - Строка - текущее наименование объекта.
//  ПредставлениеХарактеристики  - Строка - представление характеристики в сервисе.
//  НаименованиеХарактеристики	 - Строка - итоговое наименование.
//
Процедура СформироватьНаименованиеПоХарактеристике(НаименованиеНоменклатуры, ПредставлениеХарактеристики, НаименованиеХарактеристики) Экспорт
	
КонецПроцедуры

// Создание значения реквизита.
//
// Параметры:
//  ДополнительныйРеквизит           - ЛюбаяСсылка - ссылка на реквизит.
//  СтрокаДанных                     - СтрокаТаблицыЗначений - строка таблицы значений.
//                                                             Описание таблицы см. РаботаСНоменклатурой.ДанныеКатегорийСервиса, 
//                                                             поле ДополнительныеРеквизиты, колонка Значения.
//  ЗначениеРеквизитаСсылка          - Ссылка - ссылка на новое значение.
//
Процедура СоздатьЗначениеРеквизита(ДополнительныйРеквизит, СтрокаДанных, ЗначениеРеквизитаСсылка) Экспорт
	
	НовоеЗначение = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
	
	НовоеЗначение.Владелец = ДополнительныйРеквизит;
	НовоеЗначение.Наименование = СтрокаДанных.Наименование;
	НовоеЗначение.ПолноеНаименование = СтрокаДанных.Наименование;
	НовоеЗначение.Записать();
	
	ЗначениеРеквизитаСсылка = НовоеЗначение.Ссылка;
	
КонецПроцедуры

// Создание дополнительного реквизита.
//
// Параметры:
//  ВидНоменклатуры  - СправочникСсылка - ссылка на вид номенклатуры.
//  СтрокаДанных     - Структура, СтрокаТаблицыЗначений - данные для заполнения реквизита.
//                                                        Описание таблицы см. РаботаСНоменклатурой.ДанныеКатегорийСервиса, 
//                                                        поле ДополнительныеРеквизиты.
//  РеквизитСсылка   - ЛюбаяСсылка - ссылка на новый реквизит.
//
Процедура СоздатьДополнительныйРеквизит(ВидНоменклатуры, СтрокаДанных, РеквизитСсылка) Экспорт
	
	НаборСвойств = ВидНоменклатуры.НаборСвойств;
	
	УИД = Новый УникальныйИдентификатор();
	СтрокаУИД = СтрЗаменить(Строка(УИД), "-", "");
	ИмяРеквизита = СтрокаДанных.Наименование + "_" + СтрокаУИД;
	
	НаименованиеНабора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НаборСвойств, "Наименование");
	Наименование = СтрокаДанных.Наименование + " (" + НаименованиеНабора + ")";
	
	ОписаниеТипа = РаботаСНоменклатурой.ОписаниеТипаНаОснованииТипаСервиса(СтрокаДанных.Тип);
	
	// Заполнение объекта
	
	НовыйРеквизит = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	
	НовыйРеквизит.Наименование = Наименование;
	НовыйРеквизит.Имя          = ИмяРеквизита;
	НовыйРеквизит.Заголовок    = СтрокаДанных.Наименование;
	НовыйРеквизит.НаборСвойств = НаборСвойств;
	НовыйРеквизит.ТипЗначения = ОписаниеТипа;
	НовыйРеквизит.Доступен = Истина;
	
	НовыйРеквизит.Записать();
	
	РеквизитСсылка = НовыйРеквизит.Ссылка;
	
КонецПроцедуры

// Запись штрихкодов в информационную базу. Вызов метода идет в разрезе одной номенклатуры.
//
// Параметры:
//  ДанныеПоШтрихкодам	 - ТаблицаЗначений - данные по штрихкодам.
//    Колонки:
//    * Номенклатура - Ссылка - ссылка на номенклатуру.
//    * Характеристика - Ссылка, Неопределено - ссылка на характеристику.
//    * Штрихкод - Строка - штрихкод.
//
Процедура ЗаписатьШтрихкоды(ДанныеПоШтрихкодам) Экспорт 
	
	ЕдиницыИзмерения = Новый Соответствие;
	
	Для каждого ЭлементКоллекции Из ДанныеПоШтрихкодам Цикл
		
		Если ЕдиницыИзмерения.Получить(ЭлементКоллекции.Номенклатура) = Неопределено Тогда
			ЕдиницыИзмерения.Вставить(ЭлементКоллекции.Номенклатура, 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементКоллекции.Номенклатура, "ЕдиницаИзмерения"));
		КонецЕсли;
		
		Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
		Штрихкод.Период = ТекущаяДатаСеанса();
		Штрихкод.Штрихкод = ЭлементКоллекции.Штрихкод;
		Штрихкод.Номенклатура = ЭлементКоллекции.Номенклатура;
		Штрихкод.Характеристика = ЭлементКоллекции.Характеристика;
		Штрихкод.ЕдиницаИзмерения = ЕдиницыИзмерения.Получить(ЭлементКоллекции.Номенклатура);
		
		Штрихкод.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

// Присвоение новых дополнительных реквизитов виду номенклатуры, которому они должны принадлежать.
//
// Параметры:
//  ВидНоменклатуры         - СправочникСсылка - ссылка на вид номенклатуры.
//  ДополнительныеРеквизиты - Массив - (СправочникСсылка) массив ссылок на новые дополнительные реквизиты.
//  ЯвляетсяРеквизитомХарактеристики - Булево - признак принадлежности реквизитам характеристик. В зависимости от этого
//												параметра, может быть реализован разный алгоритм присвоения.
//
Процедура ПрисвоитьРеквизитыОбъекту(ВидНоменклатуры, ДополнительныеРеквизиты, ЯвляетсяРеквизитомХарактеристики) Экспорт
	
	Если ЯвляетсяРеквизитомХарактеристики Тогда
		НаборСвойствОбъект = ВидНоменклатуры.НаборСвойствХарактеристики.ПолучитьОбъект();	
	Иначе
		НаборСвойствОбъект = ВидНоменклатуры.НаборСвойств.ПолучитьОбъект();
	КонецЕсли;
	
	Для каждого ДополнительныйРеквизит Из ДополнительныеРеквизиты Цикл
		
		НоваяСтрокаРеквизита = НаборСвойствОбъект.ДополнительныеРеквизиты.Добавить();	
		
		НоваяСтрокаРеквизита.Свойство = ДополнительныйРеквизит;
		
	КонецЦикла;
	
	НаборСвойствОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ФункциональностьСистемы

// Процедура управляет возможностью пакетного создания номенклатуры.
//
// Параметры:
//  РазрешеноПакетноеСоздание - Булево - флаг возможности пакетного создания номенклатуры.
//
Процедура РазрешеноПакетноеСозданиеНоменклатуры(РазрешеноПакетноеСоздание) Экспорт
	
	РазрешеноПакетноеСоздание = Истина;
	
КонецПроцедуры

// Процедура определяет наличие учета характеристик в системе.
//
// Параметры:
//  ИспользоватьХарактеристикиНоменклатуры - Булево - флаг использования характеристик.
//
Процедура ВедетсяУчетПоХарактеристикам(ИспользоватьХарактеристикиНоменклатуры) Экспорт
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	
КонецПроцедуры

// Получение признака использования видов номенклатуры в системе. Если виды номенклатуры не используются, не будет
// доступен функционал по работе с дополнительными реквизитами и характеристиками.
//
// Параметры:
//  Результат - Булево - признак использования в системе видов номенклатуры.
//
Процедура ВедетсяУчетВидовНоменклатуры(Результат) Экспорт
	
	Результат = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхИнформационнойБазы

// Получение значение свойств реквизитов характеристик информационной базы. Метод используется при поиске заведенных в базе
// характеристик. Поиск осуществляется по составу реквизитов и их значениям. Если характеристика с заданным набором
// реквизитов найдена, объект не создается.
//
// Параметры:
//  ВидНоменклатуры                  - СправочникСсылка - вид номенклатуры в разрезе которого
//                                                        анализируются характеристики.
//  ЗначенияХарактеристикТекущейБазы - ТаблицаЗначений - таблица данных информационной базы. Колонки:
//    * ХарактеристикаБазы - Ссылка - ссылка на характеристику.
//    * Свойство           - Ссылка - реквизит характеристики.
//    * Значение           - Произвольный - значение реквизита.
//
Процедура ЗаполнитьТаблицуХарактеристикПоВидуНоменклатуры(ВидНоменклатуры, ЗначенияХарактеристикТекущейБазы) Экспорт
	
КонецПроцедуры

// Получение признака использования индивидуальных характеристик вида номенклатуры.
//
// Параметры:
//  ВидНоменклатуры - СправочникСсылка - вид номенклатуры в разрезе которого
//                                       анализируются свойство.
//  Результат - Булево - признак использования индивидуальных характеристик.
//
Процедура ИспользуютсяИндивидуальныеХарактеристики(ВидНоменклатуры, Результат) Экспорт
	
КонецПроцедуры

// Получение используемых для вида номенклатуры дополнительных реквизитов.
//
// Параметры:
//  ВидНоменклатуры   - СправочникСсылка - вид номенклатуры в разрезе которого производится поиск данных.
//  ТаблицаРеквизитов - ТаблицаЗначений - таблица реквизитов. Колонки:
//    * РеквизитВидаНоменклатуры              - Ссылка - ссылка дополнительный реквизит.
//    * РеквизитВидаНоменклатурыПредставление - Строка - представление реквизита.
//    * ЯвляетсяХарактеристикой               - Булево - Истина, если реквизит является реквизитом характеристики.
//
Процедура ПолучитьДополнительныеРеквизитыВидаНоменклатуры(ВидНоменклатуры, ТаблицаРеквизитов) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Свойство КАК РеквизитВидаНоменклатуры,
	|	ЛОЖЬ КАК ЯвляетсяХарактеристикой,
	|	ДополнительныеРеквизиты.Свойство.Заголовок КАК РеквизитВидаНоменклатурыПредставление
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	ДополнительныеРеквизиты.Ссылка В
	|			(ВЫБРАТЬ
	|				ВидыНоменклатуры.НаборСвойств КАК НаборСвойств
	|			ИЗ
	|				Справочник.КатегорииНоменклатуры КАК ВидыНоменклатуры
	|			ГДЕ
	|				ВидыНоменклатуры.Ссылка = &ВидНоменклатуры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Свойство,
	|	ИСТИНА,
	|	ДополнительныеРеквизиты.Свойство.Заголовок
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	ДополнительныеРеквизиты.Ссылка В
	|			(ВЫБРАТЬ
	|				ВидыНоменклатуры.НаборСвойствХарактеристики КАК НаборСвойств
	|			ИЗ
	|				Справочник.КатегорииНоменклатуры КАК ВидыНоменклатуры
	|			ГДЕ
	|				ВидыНоменклатуры.Ссылка = &ВидНоменклатуры)";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	ТаблицаРеквизитов = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Получение значений реквизитов вида номенклатуры. Используется для выявления расхождений в значениях реквизитов
// объектов информационной базы и объектов сервиса.
//
// Параметры:
//  ВидыНоменклатуры - Ссылка, Массив - виды номенклатуры по которым идет запрос значений реквизитов.
//  Результат        - ТаблицаЗначений - таблица значений реквизитов. Таблица обязательно должна содержать
//                                      колонку с ссылкой на вид номенклатуры и именем ВидНоменклатуры и иметь вид: 
//                                      ВидНоменклатуры, Реквизит1, Реквизит2...Реквизит N.
//
Процедура ПолучитьЗначенияРеквизитовВидовНоменклатуры(Знач ВидыНоменклатуры, Результат) Экспорт
	
	Если ТипЗнч(ВидыНоменклатуры) <> Тип("Массив") Тогда
		ВидыНоменклатуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидыНоменклатуры);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КатегорииНоменклатуры.Ссылка КАК ВидНоменклатуры,
	|	КатегорииНоменклатуры.Наименование КАК Наименование,
	|	КатегорииНоменклатуры.ТипНоменклатурыПоУмолчанию КАК ТипНоменклатурыПоУмолчанию
	|ИЗ
	|	Справочник.КатегорииНоменклатуры КАК КатегорииНоменклатуры
	|ГДЕ
	|	КатегорииНоменклатуры.Ссылка В(&КатегорииНоменклатуры)";
	
	Запрос.УстановитьПараметр("КатегорииНоменклатуры", ВидыНоменклатуры);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Получение значений реквизитов номенклатуры. Используется для выявления расхождений в значениях реквизитов
// объектов информационной базы и объектов сервиса.
//
// Параметры:
//  Номенклатура - Ссылка, Массив - номенклатура по которым идет запрос значений реквизитов.
//  Результат       - ТаблицаЗначений - таблица значений реквизитов. Таблица обязательно должна содержать
//                                      колонку с ссылкой на номенклатуру и именем Номенклатура и иметь вид: 
//                                      Номенклатура, Реквизит1, Реквизит2...Реквизит N.
//
Процедура ПолучитьЗначенияРеквизитовНоменклатуры(Знач Номенклатура, Результат) Экспорт
	
	Если ТипЗнч(Номенклатура) <> Тип("Массив") Тогда
		Номенклатура = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Номенклатура);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = Справочники.СтавкиНДС.ПолучитьТекстЗапросаСозданияВТСтавкиНДС() +
	
	"ВЫБРАТЬ
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТСтавкиНДС.СтавкаНДС КАК СтавкаНДС,
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.КатегорияНоменклатуры КАК ВидНоменклатуры,
	|	Номенклатура.Комментарий КАК Комментарий,
	|	Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНДС КАК ВТСтавкиНДС
	|		ПО (Номенклатура.ВидСтавкиНДС = ВТСтавкиНДС.ВидСтавкиНДС)
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Получение значений дополнительных реквизитов номенклатуры.
//
// Параметры:
//  Номенклатура         - Массив - (Ссылка) массив ссылок номенклатуры.
//  ЗначенияРеквизитов	 - ТаблицаЗначений - заполняемые данные значений свойство.
//    * ВладелецСвойств - Ссылка - ссылка на номенклатуру.
//    * Свойство - Ссылка - свойство номенклатуры.
//    * Значение - Произвольный - значение свойства.
//
Процедура ПолучитьЗначенияДополнительныхРеквизитов(Номенклатура, ЗначенияРеквизитов) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.Ссылка КАК ВладелецСвойств,
	|	НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
	|	НоменклатураДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|ГДЕ
	|	НоменклатураДополнительныеРеквизиты.Ссылка В(&Номенклатура)";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	ЗначенияРеквизитов = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Получение вида номенклатуры по номенклатуре.
//
// Параметры:
//  НоменклатураСсылка   - Ссылка - номенклатура.
//  ВидНоменклатуры	     - Ссылка - вид номенклатуры.
//
Процедура ПолучитьВидНоменклатуры(НоменклатураСсылка, ВидНоменклатуры) Экспорт
	
	ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураСсылка, "КатегорияНоменклатуры");
	
КонецПроцедуры

// Получение вида номенклатуры из формы номенклатуры.
//
// Параметры:
//  Форма				 - УправляемаяФорма - форма номенклатуры.
//  ВидНоменклатуры	     - Ссылка - вид номенклатуры.
//
Процедура ПолучитьВидНоменклатурыИзФормы(Форма, ВидНоменклатуры) Экспорт
	
	ВидНоменклатуры = Форма.Объект.КатегорияНоменклатуры;
	
КонецПроцедуры

// Получение значений реквизитов из формы.
//
// Параметры:
//  Форма				 - УправляемаяФорма - форма номенклатуры.
//  ЗначенияРеквизитов	 - Структура - структура, где ключ - имя реквизита, значение - значение реквизита.
//
Процедура ПолучитьЗначенияРеквизитовНоменклатурыИзФормы(Форма, ЗначенияРеквизитов) Экспорт
	
	ЗначенияРеквизитов.Вставить("Наименование");
	ЗначенияРеквизитов.Вставить("НаименованиеПолное");
	ЗначенияРеквизитов.Вставить("СтавкаНДС");
	ЗначенияРеквизитов.Вставить("Комментарий");
	ЗначенияРеквизитов.Вставить("Артикул");
	ЗначенияРеквизитов.Вставить("ЕдиницаИзмерения");
	ЗначенияРеквизитов.Вставить("ТипНоменклатуры");
	ЗначенияРеквизитов.Вставить("Ссылка");
	
	Для каждого ЭлементКоллекции Из ЗначенияРеквизитов Цикл
		Если ЭлементКоллекции.Ключ = "СтавкаНДС" Тогда
			ЗначенияРеквизитов[ЭлементКоллекции.Ключ] = Справочники.СтавкиНДС.СтавкаНДС(Форма.Объект["ВидСтавкиНДС"]);
		Иначе
			ЗначенияРеквизитов[ЭлементКоллекции.Ключ] = Форма.Объект[ЭлементКоллекции.Ключ];
		КонецЕсли;
	КонецЦикла;
	
	ЗначенияРеквизитов.Вставить("ВидНоменклатуры", Форма.Объект.КатегорияНоменклатуры);
	
КонецПроцедуры

// Получение значений дополнительных реквизитов из формы.
//
// Параметры:
//  Форма				 - УправляемаяФорма - форма номенклатуры.
//  ЗначенияРеквизитов	 - ТаблицаЗначений - таблица значений дополнительных реквизитов. Колонки:
//    * Свойство           - Ссылка - дополнительный реквизит.
//    * Значение           - Произвольный - значение реквизита.
//
Процедура ПолучитьЗначенияДополнительныхРеквизитовИзФормы(Форма, ЗначенияРеквизитов) Экспорт
	
	УправлениеСвойствами.ПеренестиЗначенияИзРеквизитовФормыВОбъект(Форма,Форма.Объект);
	ЗначенияРеквизитов = Форма.Объект.ДополнительныеРеквизиты.Выгрузить(, "Свойство, Значение");
	
КонецПроцедуры

#КонецОбласти

#Область ПриПолученииДанныхИзСервиса

// Процедура вызывается после получения данных номенклатуры из сервиса. Может использоваться
// для предварительной подготовки данных информационной базы 
// перед созданием, сравнением, заполнением объектов. Например на этом этапе можно 
// создать бренды, производителей, единицы измерения и так далее.
//
// Параметры:
//  ДанныеПоНоменклатуре - ТаблицаЗначений - см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса.
//
Процедура ПриПолученииДанныхИзСервисаПоНоменклатуре(ДанныеПоНоменклатуре) Экспорт
	
КонецПроцедуры

// Процедура вызывается после получения данных категорий из сервиса. Может использоваться
// для предварительной подготовки данных информационной базы 
// перед созданием, сравнением, заполнением объектов.
//
// Параметры:
//  ДанныеПоКатегориям - ТаблицаЗначений - см. РаботаСНоменклатурой.ДанныеКатегорийСервиса.
//
Процедура ПриПолученииДанныхИзСервисаПоКатегориям(ДанныеПоКатегориям) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СопоставлениеДанных

// Сравнение значений реквизитов вида номенклатуры и категории.
//
// Параметры:
//  ДанныеКатегории       - СтрокаТаблицыЗначений - данные по категории. Описание таблицы значений см. РаботаСНоменклатурой.ДанныеКатегорийСервиса
//  ДанныеВидаНоменклатуры - СтрокаТаблицыЗначений, Структура, Ссылка - данные по виду номенклатуре. См. ПолучитьЗначенияРеквизитовВидовНоменклатуры
//  ТаблицаОтличийРеквизитов - ТаблицаЗначений - см. РаботаСНоменклатурой.ТаблицаОтличийРеквизитов.
//
Процедура ПолучитьОтличияВидаНоменклатурыИКатегории(ДанныеКатегории, ДанныеВидаНоменклатуры, ТаблицаОтличийРеквизитов) Экспорт
	
	// Проверка наименования
	Если ДанныеВидаНоменклатуры.Наименование <> ДанныеКатегории.Наименование Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"Наименование", ДанныеКатегории.Наименование, ДанныеВидаНоменклатуры.Наименование);
	КонецЕсли;
	
	// Проверка типа номенклатуры
	ТипНоменклатурыСервиса = ТипНоменклатурыПоДаннымНоменклатурыСервиса(ДанныеКатегории.Тип);
	
	Если ДанныеВидаНоменклатуры.ТипНоменклатурыПоУмолчанию <> ТипНоменклатурыСервиса Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"ТипНоменклатурыПоУмолчанию", ТипНоменклатурыСервиса, ДанныеВидаНоменклатуры.ТипНоменклатурыПоУмолчанию, НСтр("ru = 'Тип'"));
	КонецЕсли;
	
КонецПроцедуры

// Сравнение значений реквизитов номенклатуры информационной базы и номенклатуры сервиса.
//
// Параметры:
//  ДанныеНоменклатурыСервиса - СтрокаТаблицыЗначений - данные по номенклатуре. Описание таблицы значений см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса.
//  ДанныеНоменклатурыБазы    - СтрокаТаблицыЗначений, Структура, Ссылка - данные по номенклатуре. См. ПолучитьЗначенияРеквизитовНоменклатуры
//  ТаблицаОтличийРеквизитов  - ТаблицаЗначений - см. РаботаСНоменклатурой.ТаблицаОтличийРеквизитов.
//
Процедура ПолучитьОтличияНоменклатуры(ДанныеНоменклатурыСервиса, ДанныеНоменклатурыБазы, ТаблицаОтличийРеквизитов) Экспорт
	
	// Проверка простых типов
	
	СоответствиеПолей = Новый Структура();
	
	СоответствиеПолей.Вставить("Наименование", "Наименование");
	СоответствиеПолей.Вставить("Артикул",      "Артикул");
	СоответствиеПолей.Вставить("Описание",     "Комментарий");
	
	Для каждого ЭлементКоллекции Из СоответствиеПолей Цикл
		Если ДанныеНоменклатурыБазы[ЭлементКоллекции.Значение] <> ДанныеНоменклатурыСервиса[ЭлементКоллекции.Ключ] Тогда
			РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
				ЭлементКоллекции.Значение, ДанныеНоменклатурыСервиса[ЭлементКоллекции.Ключ], ДанныеНоменклатурыБазы[ЭлементКоллекции.Значение]);
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеПолей.Вставить("НаименованиеДляПечати", "НаименованиеПолное");
	Если ДанныеНоменклатурыБазы.НаименованиеПолное <> ДанныеНоменклатурыСервиса.НаименованиеДляПечати Тогда
		
		Если ЗначениеЗаполнено(ДанныеНоменклатурыСервиса.НаименованиеДляПечати) Тогда
			НовоеНаименованиеПолное = ДанныеНоменклатурыСервиса.НаименованиеДляПечати;
		Иначе
			НовоеНаименованиеПолное = ДанныеНоменклатурыСервиса.Наименование;
		КонецЕсли;
		
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов,
			"НаименованиеПолное", ДанныеНоменклатурыСервиса.НаименованиеДляПечати, ДанныеНоменклатурыБазы.НаименованиеПолное,, НовоеНаименованиеПолное);
	КонецЕсли;
	
	ВидыНоменклатуры = РаботаСНоменклатурой.ВидыНоменклатурыПоИдентификаторуКатегории(ДанныеНоменклатурыСервиса.Категория.Идентификатор);
	
	Если ВидыНоменклатуры.Количество() Тогда
		Если ВидыНоменклатуры[0] <> ДанныеНоменклатурыБазы.ВидНоменклатуры Тогда 
			РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов,
				"КатегорияНоменклатуры", ВидыНоменклатуры[0], ДанныеНоменклатурыБазы.ВидНоменклатуры, НСтр("ru = 'Категория'"), ДанныеНоменклатурыСервиса.Категория.Наименование);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеНоменклатурыБазы, "Ссылка")
		И НЕ ЗначениеЗаполнено(ДанныеНоменклатурыБазы.Ссылка)
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеНоменклатурыБазы, "ТипНоменклатуры") Тогда
		
		ТипНоменклатурыСервиса = ТипНоменклатурыПоДаннымНоменклатурыСервиса(ДанныеНоменклатурыСервиса.Тип);
		Если ДанныеНоменклатурыБазы.ТипНоменклатуры <> ТипНоменклатурыСервиса Тогда
			РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
				"ТипНоменклатуры", ТипНоменклатурыСервиса, ДанныеНоменклатурыБазы.ТипНоменклатуры, НСтр("ru = 'Тип'"),, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеНоменклатурыБазы.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас
		ИЛИ ДанныеНоменклатурыБазы.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
		ИЛИ ДанныеНоменклатурыБазы.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
		ИЛИ ДанныеНоменклатурыБазы.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
		
		// Проверка ставки НДС
		СтавкаНДССервиса = СтавкаНДСПоДаннымНоменклатурыСервиса(ДанныеНоменклатурыСервиса.СтавкаНДС);
		Если ДанныеНоменклатурыБазы.СтавкаНДС <> СтавкаНДССервиса Тогда
			РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
				"СтавкаНДС", СтавкаНДССервиса, ДанныеНоменклатурыБазы.СтавкаНДС, НСтр("ru = 'Ставка НДС'"));
		КонецЕсли;
	КонецЕсли;
	
	// Единица измерения
	ЕдиницаИзмеренияСервиса = ЕдиницаИзмеренияПоДаннымНоменклатурыСервиса(ДанныеНоменклатурыСервиса.ЕдиницаИзмерения);
	Если Строка(ДанныеНоменклатурыБазы.ЕдиницаИзмерения) <> ЕдиницаИзмеренияСервиса Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"ЕдиницаИзмерения", ЕдиницаИзмеренияСервиса, ДанныеНоменклатурыБазы.ЕдиницаИзмерения, НСтр("ru = 'Ед. изм.'"), ЕдиницаИзмеренияСервиса.Наименование);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДанных

// Заполнение реквизитов вида номенклатуры.
//
// Параметры:
//  ВидНоменклатурыСсылка - СправочникСсылка - ссылка на вид номенклатуры.
//  ТаблицаИзменений      - ТаблицаЗначений - реквизиты и значения для записи. Таблица должна быть 
//                                            сформирована в методе ПолучитьОтличияВидаНоменклатурыИКатегории.
//                                            см. РаботаСНоменклатурой.ТаблицаОтличийРеквизитов.
//
Процедура ЗаполнитьВидНоменклатуры(ВидНоменклатурыСсылка, ТаблицаИзменений) Экспорт
	
	Если ТаблицаИзменений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВидНоменклатурыОбъект = ВидНоменклатурыСсылка.ПолучитьОбъект();
	
	ЗаблокироватьДанныеДляРедактирования(ВидНоменклатурыОбъект.Ссылка);
	
	Для каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
		ВидНоменклатурыОбъект[ЭлементКоллекции.РеквизитОбъекта] = ЭлементКоллекции.НовоеЗначение;
	КонецЦикла;
	
	ВидНоменклатурыОбъект.Записать();
	
КонецПроцедуры

// Заполнение реквизитов номенклатуры.
//
// Параметры:
//  НоменклатураСсылка - СправочникСсылка - ссылка на номенклатуру.
//  ТаблицаИзменений   - ТаблицаЗначений - реквизиты и значения для записи. Таблица должна быть 
//                                         сформирована в методе ПолучитьОтличияНоменклатуры.
//                                         см. РаботаСНоменклатурой.ТаблицаОтличийРеквизитов.
//
Процедура ЗаполнитьНоменклатуру(НоменклатураСсылка, ТаблицаИзменений) Экспорт
	
	Если ТаблицаИзменений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
	
	ЗаблокироватьДанныеДляРедактирования(НоменклатураОбъект.Ссылка);
	
	Для каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
		НоменклатураОбъект[ЭлементКоллекции.РеквизитОбъекта] = ЭлементКоллекции.НовоеЗначение;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(НоменклатураОбъект.НаименованиеПолное) И ЗначениеЗаполнено(НоменклатураОбъект.Наименование) Тогда
		НоменклатураОбъект.НаименованиеПолное = НоменклатураОбъект.Наименование;
	КонецЕсли;
	
	НоменклатураОбъект.Записать();
	
КонецПроцедуры

// Заполнение дополнительных реквизитов номенклатуры.
//
// Параметры:
//  НоменклатураСсылка      - Ссылка - ссылка на номенклатуру.
//  ДополнительныеРеквизиты - ТаблицаЗначений - реквизиты для записи в структуре:
//    * РеквизитОбъекта - Ссылка - свойство реквизита.
//    * НовоеЗначение   - Произвольный - значение реквизита.
//
Процедура ЗаполнитьДополнительныеРеквизитыНоменклатуры(НоменклатураСсылка, ДополнительныеРеквизиты) Экспорт
	
	Если ДополнительныеРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияДополнительныхРеквизитов = Новый ТаблицаЗначений;
	
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Свойство");
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Значение");
	
	Для каждого Реквизит Из ДополнительныеРеквизиты Цикл
		
		НоваяСтрока = ЗначенияДополнительныхРеквизитов.Добавить();
		
		НоваяСтрока.Свойство = Реквизит.РеквизитОбъекта;
		НоваяСтрока.Значение = Реквизит.НовоеЗначение;
		
	КонецЦикла;
	
	УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(НоменклатураСсылка, ЗначенияДополнительныхРеквизитов);
	
КонецПроцедуры

// Интерактивное заполнение основных реквизитов номенклатуры.
//
// Параметры:
//  Форма                 - УправляемаяФорма - форма номенклатуры.
//  ТаблицаИзменений      - ТаблицаЗначений - реквизиты и значения для записи. Таблица должна быть 
//                                            сформирована в методе ПолучитьОтличияВидаНоменклатурыИКатегории.
//                                            см. РаботаСНоменклатурой.ТаблицаОтличийРеквизитов.
//
Процедура ЗаполнитьНоменклатуруВФорме(Форма, ТаблицаИзменений) Экспорт
	
	Для каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
		Если ЭлементКоллекции.РеквизитОбъекта = "СтавкаНДС" Тогда
			Форма.Объект["ВидСтавкиНДС"] = ?(ЗначениеЗаполнено(ЭлементКоллекции.НовоеЗначение),ЭлементКоллекции.НовоеЗначение.ВидСтавкиНДС, Перечисления.ВидыСтавокНДС.ПустаяСсылка());
		Иначе
			Форма.Объект[ЭлементКоллекции.РеквизитОбъекта] = ЭлементКоллекции.НовоеЗначение;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Форма.Объект.НаименованиеПолное) Тогда
		Форма.Объект.НаименованиеПолное = Форма.Объект.Наименование;
	КонецЕсли;
	
КонецПроцедуры

// Интерактивное заполнение дополнительных реквизитов номенклатуры.
//
// Параметры:
//  Форма                 - УправляемаяФорма - форма номенклатуры.
//  ТаблицаИзменений      - ТаблицаЗначений - реквизиты и значения для записи. Таблица должна быть 
//                                            сформирована в методе ПолучитьОтличияВидаНоменклатурыИКатегории.
//                                            см. РаботаСНоменклатурой.ТаблицаОтличийРеквизитов.
//
Процедура ЗаполнитьДополнительныеРеквизитыНоменклатурыВФорме(Форма, ТаблицаИзменений) Экспорт
	
	Объект = Форма.Объект;
	
	Объект.ДополнительныеРеквизиты.Очистить();
	
	Для каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
		НоваяСтрока = Объект.ДополнительныеРеквизиты.Добавить();
		НоваяСтрока.Свойство = ЭлементКоллекции.РеквизитОбъекта;
		НоваяСтрока.Значение = ЭлементКоллекции.НовоеЗначение;
	КонецЦикла;	
	
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(Форма, Объект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтавкаНДСПоДаннымНоменклатурыСервиса(Значение)
	
	Если Значение = "10" ИЛИ Значение = "18" ИЛИ Значение = "20" Тогда
		Возврат УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДС(Число(Значение));
	КонецЕсли;
	
	Возврат Справочники.СтавкиНДС.СтавкаНДС(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.Организации.ОрганизацияПоУмолчанию(),"ВидСтавкиНДСПоУмолчанию", Истина));
	
КонецФункции

Функция ТипНоменклатурыПоДаннымНоменклатурыСервиса(Значение)
	
	Если Значение = "Услуга" Тогда 
		Возврат Перечисления.ТипыНоменклатуры.Услуга;
	ИначеЕсли Значение = "Товар" Тогда 
		Возврат Перечисления.ТипыНоменклатуры.Запас;
	Иначе 
		Возврат Перечисления.ТипыНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ЕдиницаИзмеренияПоДаннымНоменклатурыСервиса(ЕдиницаИзмеренияСервиса)
	
	ЕдиницаИзмерения = Неопределено;
	
	// Поиск по коду
	КодОКЕИ = Неопределено;
	ЕдиницаИзмеренияСервиса.Свойство("ОКЕИ", КодОКЕИ);
	Если КодОКЕИ <> Неопределено Тогда
		ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(КодОКЕИ);
	КонецЕсли;
	
	Если ЕдиницаИзмерения <> Неопределено Тогда
		Возврат ЕдиницаИзмерения;
	КонецЕсли;
	
	// Поиск по наименованию
	НаименованиеЕдиницыИзмерения = СокрЛП(ЕдиницаИзмеренияСервиса.Наименование);
	Если НЕ ЗначениеЗаполнено(НаименованиеЕдиницыИзмерения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЕдиницаИзмерения = ЕдиницаИзмеренияПоНаименованию(НаименованиеЕдиницыИзмерения);
	
	Если ЕдиницаИзмерения <> Неопределено Тогда
		Возврат ЕдиницаИзмерения;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	
	Возврат НовыйЕдиницаИзмерения(НаименованиеЕдиницыИзмерения, ЕдиницаИзмеренияСервиса);
	
КонецФункции

Функция ЕдиницаИзмеренияПоНаименованию(Наименование)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторЕдиницИзмерения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|ГДЕ
	|	КлассификаторЕдиницИзмерения.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НовыйЕдиницаИзмерения(Наименование, ЕдиницаИзмеренияСервиса)
	
	ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
	ЗначенияЗаполнения = Новый Структура;
	
	Если ЕдиницаИзмеренияСервиса.Свойство("ПолноеНаименование") Тогда
		ЗначенияЗаполнения.Вставить("НаименованиеПолное", ЕдиницаИзмеренияСервиса.ПолноеНаименование);
	КонецЕсли;
	
	Если ЕдиницаИзмеренияСервиса.Свойство("ВнутреннееНаименование") Тогда
		ЗначенияЗаполнения.Вставить("МеждународноеСокращение", ЕдиницаИзмеренияСервиса.ВнутреннееНаименование);
	КонецЕсли;
	
	ЕдиницаИзмерения.Заполнить(ЗначенияЗаполнения);
	
	ЕдиницаИзмерения.Наименование = Наименование;
	Если ЕдиницаИзмеренияСервиса.Свойство("ОКЕИ") И ЗначениеЗаполнено(ЕдиницаИзмеренияСервиса.ОКЕИ) Тогда
		ЕдиницаИзмерения.Код = ЕдиницаИзмеренияСервиса.ОКЕИ;
	КонецЕсли;
	
	ЕдиницаИзмерения.Записать();
	
	Возврат ЕдиницаИзмерения.Ссылка;
	
КонецФункции

// Получение двоичных данных по адресу URL, например изображения.
//
// Параметры:
//  АдресURL - Строка - адрес хранения данных.
// 
// Возвращаемое значение:
//  ДвоичныеДанные - полученные данные.
//
Функция ДвоичныеДанныеПоАдресуURL(АдресURL)
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресURL);
	
	ПараметрыСоединения = Новый Структура("Протокол, ИмяСервера, АдресРесурса, Порт, Таймаут, ЗащищенноеСоединение, Прокси");
	ПараметрыСоединения.Протокол     = СтруктураURI.Схема;
	ПараметрыСоединения.ИмяСервера   = СтруктураURI.Хост;
	ПараметрыСоединения.АдресРесурса = СтруктураURI.ПутьНаСервере;
	ПараметрыСоединения.Порт         = СтруктураURI.Порт;
	ПараметрыСоединения.Таймаут      = 30;
	ПараметрыСоединения.ЗащищенноеСоединение = ПараметрыСоединения.Протокол = "https";
	ПараметрыСоединения.Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(ПараметрыСоединения.Протокол);
	
	ЗащищенноеСоединение = Неопределено;
	Если ПараметрыСоединения.ЗащищенноеСоединение Тогда
		СертификатыУдостоверяющихЦентров = Неопределено;
		Если Не ОбщегоНазначения.ЭтоLinuxСервер() И Не ОбщегоНазначения.РазделениеВключено() Тогда
			// Ошибка фреша при работе с веб сервисами. Не работает проверка доверенных сертификатов при установке соединения.
			СертификатыУдостоверяющихЦентров = Новый СертификатыУдостоверяющихЦентровWindows;
		КонецЕсли;
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(, СертификатыУдостоверяющихЦентров);
	КонецЕсли;
	
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.ИмяСервера,
			ПараметрыСоединения.Порт,,,,ПараметрыСоединения.Таймаут, ЗащищенноеСоединение);
	Исключение
		ВызватьИсключение НСтр("ru = 'Ошибка установки соединения при получении изображения'");
	КонецПопытки;
	
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыСоединения.АдресРесурса);
	
	Попытка
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	Исключение
		ВызватьИсключение НСтр("ru = 'Ошибка получения изображения'");
	КонецПопытки;
	
	Возврат HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
	
КонецФункции

// Прикрепление изображений к номенклатуре по массиву адресов.
//
// Параметры:
//  НоменклатураСсылка	 - Ссылка - владелец изображений.
//  СсылкиНаИзображения	 - Массив (Строка) - ссылки на изображения.
//
Процедура ПрикрепитьИзображения(НоменклатураСсылка, СсылкиНаИзображения)
	
	СозданныеИзображения = Новый Массив;
	
	Для каждого ИзображениеURL Из СсылкиНаИзображения Цикл
		
		ДанныеИзображения = ДвоичныеДанныеПоАдресуURL(ИзображениеURL);
		
		ИмяИзображения = "";
		РасширениеИзображения = "";
		
		ПодстрокиАдреса = СтрРазделить(ИзображениеURL, "/");		
		
		Если ПодстрокиАдреса.Количество() > 0  Тогда
			ИмяИзображения = ПодстрокиАдреса[ПодстрокиАдреса.ВГраница()];
			
			ПодстрокиИмени = СтрРазделить(ИмяИзображения, ".");
			
			Если ПодстрокиИмени.Количество() = 2 Тогда
				ИмяИзображения = ПодстрокиИмени[0];	
				РасширениеИзображения = ПодстрокиИмени[1];	
			КонецЕсли;	
		КонецЕсли;
				
		ПараметрыФайла = Новый Структура();
		ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов", НоменклатураСсылка);
		ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяИзображения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеИзображения);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		
		СозданныеИзображения.Добавить(
			РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ПоместитьВоВременноеХранилище(ДанныеИзображения)));
		
	КонецЦикла;
	
	Если СозданныеИзображения.Количество() > 0 Тогда
		НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
		НоменклатураОбъект.ФайлКартинки = СозданныеИзображения[0];
		НоменклатураОбъект.ОбменДанными.Загрузка = Истина;
		НоменклатураОбъект.Записать();		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти