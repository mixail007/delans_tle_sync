Функция ПолучитьIDСесси(Запрос) 
	SessionId = Запрос.Заголовки.Получить("SessionId");
	Если Не ЗначениеЗаполнено(SessionId) Тогда
		SessionId = Запрос.Заголовки.Получить(Нрег("SessionId"));
	КонецЕсли;
	
	Возврат SessionId;
КонецФункции

Функция ОписаниеОтветаСгенерить(Текст,Ошибка, ТипВызова,ТаблицаЗначенийОтвета=Неопределено,ErrorCode = "")
	СоответствиеТекста = Новый Соответствие;
	ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
	Ответ = "";
	
	Если  ТипВызова = "Authorization" Тогда 
		Если Ошибка Тогда 
			СоответствиеТекста.Вставить("Success","false");
			СоответствиеТекста.Вставить("SessionId","");
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		Иначе 
			СоответствиеТекста.Вставить("Success","true");
			СоответствиеТекста.Вставить("SessionId",ТаблицаЗначенийОтвета[0].GUID);
			СоответствиеТекста.Вставить("ICN",ТаблицаЗначенийОтвета[0].ICN);
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		КонецЕсли;
		
	ИначеЕсли ТипВызова = "CloseAuthorization" Тогда 
		
		Если Ошибка Тогда 
			СоответствиеТекста.Вставить("Success","false");
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		Иначе 
			СоответствиеТекста.Вставить("Success","true");
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		КонецЕсли;
		
	ИначеЕсли ТипВызова = "ShipmentsCreate" Тогда 
		//Структура ответа
		//{
		//“Success”:		”<Признак успешности запроса >,//<true/false>
		//“ShipmentNumber:”		“<номер накладной>”,	
		//“ClientShipmentNumber”:	“<клиентский номер накладной>”,
		//“Barcode”:		“<ШК отправления”>,
		//“ErrorCode”:		”<код ошибки>”,
		//“ErrorMessage”:		”<Описание ошибки>”
		//}
		Если Ошибка Тогда 
			СоответствиеТекста.Вставить("Success","false");
			Если НЕ ТаблицаЗначенийОтвета = Неопределено Тогда
				СоответствиеТекста.Вставить("ShipmentNumber",ТаблицаЗначенийОтвета[0].ShipmentNumber);
				СоответствиеТекста.Вставить("ClientShipmentNumber",ТаблицаЗначенийОтвета[0].ClientShipmentNumber);
				СоответствиеТекста.Вставить("Barcode",ТаблицаЗначенийОтвета[0].ШК);
			КонецЕсли;
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		Иначе 
			СоответствиеТекста.Вставить("Success","true");
			СоответствиеТекста.Вставить("ShipmentNumber",ТаблицаЗначенийОтвета[0].ShipmentNumber);
			СоответствиеТекста.Вставить("ClientShipmentNumber",ТаблицаЗначенийОтвета[0].ClientShipmentNumber);
			СоответствиеТекста.Вставить("Barcode",ТаблицаЗначенийОтвета[0].ШК);
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		КонецЕсли;
	ИначеЕсли ТипВызова = "СallСourier" Тогда 
		//{
		//“Success”:	”<Признак успешности регистрации вызова курьера >,//<true/false>
		//“OrderNumber”:	”<Номер вызова/сбора>”,
		//“ErrorCode”:	”<код ошибки>”
		//“ErrorMessage”:	”<Описание ошибки>”
		//}

		Если Ошибка Тогда 
			СоответствиеТекста.Вставить("Success","false");
			СоответствиеТекста.Вставить("OrderNumber",ТаблицаЗначенийОтвета[0].OrderNumber);
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		Иначе 
			СоответствиеТекста.Вставить("Success","true");
			СоответствиеТекста.Вставить("OrderNumber",ТаблицаЗначенийОтвета[0].OrderNumber);
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		КонецЕсли;
	ИначеЕсли ТипВызова = "CancelCouriercAll" Тогда 
		//{	
		//“OrderNumber“:	“<Номер вызова/сбора>”,
		//“Success”:	”<Результат запроса>”//<true/false>,
		//“ErrorCode”:	”<код ошибки>”,
		//“ErrorMessage”:	”<Описание ошибки>”
		//}
		
		Если Ошибка Тогда 
			СоответствиеТекста.Вставить("Success","false");
			СоответствиеТекста.Вставить("OrderNumber",ТаблицаЗначенийОтвета[0].OrderNumber);
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		Иначе 
			СоответствиеТекста.Вставить("Success","true");
			СоответствиеТекста.Вставить("OrderNumber",ТаблицаЗначенийОтвета[0].OrderNumber);
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		КонецЕсли;
		//EFSOL_Шаповал Олег Анатольевич 16 августа 2017 г. 10:22:19 +
	ИначеЕсли ТипВызова = "SaveCustomerRegistration" Тогда
		//Структура ответа
		//{
		//“Success”:		”<Признак успешности запроса >,//<true/false>	
		//“ClientID”:		“<номер клиента в 1С>”,
		//“ErrorCode”:		”<код ошибки>”,
		//“ErrorMessage”:	”<Описание ошибки>”
		//}
		
		Если Ошибка Тогда 
			СоответствиеТекста.Вставить("Success","false");
			СоответствиеТекста.Вставить("ClientID",ТаблицаЗначенийОтвета[0].ClientID);
			СоответствиеТекста.Вставить("ICN",ТаблицаЗначенийОтвета[0].ICN);
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		Иначе 
			СоответствиеТекста.Вставить("Success","true");
			СоответствиеТекста.Вставить("ClientID",ТаблицаЗначенийОтвета[0].ClientID);
			СоответствиеТекста.Вставить("ICN",ТаблицаЗначенийОтвета[0].ICN);
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		КонецЕсли;
		//EFSOL Шаповал О.А. -
		
	ИначеЕсли ТипВызова = "GetInvoiceInfo" Тогда 
		//{	
		//“OrderNumber“:	“<Номер вызова/сбора>”,
		//“Success”:	”<Результат запроса>”//<true/false>,
		//“ErrorCode”:	”<код ошибки>”,
		//“ErrorMessage”:	”<Описание ошибки>”
		//}
		
		СоответствиеТекста.Вставить("ICN",ТаблицаЗначенийОтвета[0].ICN);	
		СоответствиеТекста.Вставить("Sender",ТаблицаЗначенийОтвета[0].Sender);
		СоответствиеТекста.Вставить("Shipment",ТаблицаЗначенийОтвета[0].Shipment);	
		СоответствиеТекста.Вставить("Is_delivered",ТаблицаЗначенийОтвета[0].Is_delivered);
		
		//Латыш Дмитрий 06.06.2019
		Если Ошибка = Ложь Тогда
			СоответствиеТекста.Вставить("Customer",ТаблицаЗначенийОтвета[0].Customer);
		КонецЕсли;
		//Латыш Дмитрий 06.06.2019

		СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
		СоответствиеТекста.Вставить("ErrorMessage",Текст);
		
		Если Ошибка Тогда 
			СоответствиеТекста.Вставить("Success","false");
		Иначе 
			СоответствиеТекста.Вставить("Success","true");	
		КонецЕсли;
		
		Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
	
	ИначеЕсли ТипВызова = "MonitorInvoiceInfo" Тогда 
		//{	
		//“OrderNumber“:	“<Номер вызова/сбора>”,
		//“Success”:	”<Результат запроса>”//<true/false>,
		//“ErrorCode”:	”<код ошибки>”,
		//“ErrorMessage”:	”<Описание ошибки>”
		//}
		Если Ошибка Тогда 
			СоответствиеТекста.Вставить("Success","false");
			//	
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		Иначе 
			СоответствиеТекста.Вставить("Success","true");
			СоответствиеТекста.Вставить("ICN",ТаблицаЗначенийОтвета[0].ICN);
			СоответствиеТекста.Вставить("Shipments",ТаблицаЗначенийОтвета[0].Shipments);
			
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		КонецЕсли;	
		
	ИначеЕсли ТипВызова = "GetExtMon" Тогда 
		//{	
		//“OrderNumber“:	“<Номер вызова/сбора>”,
		//“Success”:	”<Результат запроса>”//<true/false>,
		//“ErrorCode”:	”<код ошибки>”,
		//“ErrorMessage”:	”<Описание ошибки>”
		//}
		Если Ошибка Тогда 
			СоответствиеТекста.Вставить("Success","false");
			//	
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		Иначе 
			СоответствиеТекста.Вставить("Success","true");
			СоответствиеТекста.Вставить("ICN",ТаблицаЗначенийОтвета[0].ICN);
			СоответствиеТекста.Вставить("Shipments",ТаблицаЗначенийОтвета[0].Shipments);
			
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		КонецЕсли;
		
	ИначеЕсли ТипВызова = "HistoryStatusChangesInvoices" Тогда 
		//{	
		//“OrderNumber“:	“<Номер вызова/сбора>”,
		//“Success”:	”<Результат запроса>”//<true/false>,
		//“ErrorCode”:	”<код ошибки>”,
		//“ErrorMessage”:	”<Описание ошибки>”
		//}
		Если Ошибка Тогда 
			СоответствиеТекста.Вставить("Success","false");
			//	
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		Иначе 
			СоответствиеТекста.Вставить("Success","true");
			СоответствиеТекста.Вставить("ICN",ТаблицаЗначенийОтвета[0].ICN);
			СоответствиеТекста.Вставить("List",ТаблицаЗначенийОтвета[0].List);
			
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		КонецЕсли;
		
	ИначеЕсли ТипВызова = "GetByNumberInvoice" Тогда 
		//{	
		//“OrderNumber“:	“<Номер вызова/сбора>”,
		//“Success”:	”<Результат запроса>”//<true/false>,
		//“ErrorCode”:	”<код ошибки>”,
		//“ErrorMessage”:	”<Описание ошибки>”
		//}
		Если Ошибка Тогда 
			СоответствиеТекста.Вставить("Success","false");
			//	
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		Иначе 
			СоответствиеТекста.Вставить("Success","true");
			//СоответствиеТекста.Вставить("ICN",ТаблицаЗначенийОтвета[0].ICN);
			СоответствиеТекста.Вставить("Shipments",ТаблицаЗначенийОтвета[0].Shipments);
			
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		КонецЕсли;	
	ИначеЕсли ТипВызова = "GetOrders" Тогда 
		//{	
		//“OrderNumber“:	“<Номер вызова/сбора>”,
		//“Success”:	”<Результат запроса>”//<true/false>,
		//“ErrorCode”:	”<код ошибки>”,
		//“ErrorMessage”:	”<Описание ошибки>”
		//}
		Если Ошибка Тогда 
			СоответствиеТекста.Вставить("Success","false");
			//	
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		Иначе 
			СоответствиеТекста.Вставить("Success","true");
			СоответствиеТекста.Вставить("ICN",ТаблицаЗначенийОтвета[0].ICN);
			СоответствиеТекста.Вставить("Orders",ТаблицаЗначенийОтвета[0].Orders);
			
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		КонецЕсли;	
	
	ИначеЕсли ТипВызова = "GetStickers" Тогда
		//{	
		//“Stikers“:	“<двоичные данные печ. формы в pdf>”,
		//“Success”:	”<Результат запроса>”//<true/false>,
		//“ErrorCode”:	”<код ошибки>”,
		//“ErrorMessage”:	”<Описание ошибки>”
		//}
		Если Ошибка Тогда 
			СоответствиеТекста.Вставить("Success","false");
			СоответствиеТекста.Вставить("Stickers",ТаблицаЗначенийОтвета[0].Stickers);
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		Иначе 
			СоответствиеТекста.Вставить("Success","true");
			СоответствиеТекста.Вставить("Stickers",ТаблицаЗначенийОтвета[0].Stickers);
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		КонецЕсли;
	ИначеЕсли ТипВызова = "GetInvoice" Тогда
		//{	
		//“Invoice“:	“<двоичные данные печ. формы в pdf>”,
		//“Success”:	”<Результат запроса>”//<true/false>,
		//“ErrorCode”:	”<код ошибки>”,
		//“ErrorMessage”:	”<Описание ошибки>”
		//}
		Если Ошибка Тогда 
			СоответствиеТекста.Вставить("Success","false");
		Иначе 
			СоответствиеТекста.Вставить("Success","true");			
		КонецЕсли;
		СоответствиеТекста.Вставить("Invoice",ТаблицаЗначенийОтвета[0].Invoice);
		СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
		СоответствиеТекста.Вставить("ErrorMessage",Текст);
		Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
	ИначеЕсли ТипВызова = "CustomerInfo" Тогда	
		//{	
		//“Info“:	“<информация о клиенте>”,
		//“Success”:	”<Результат запроса>”//<true/false>,
		//“ErrorCode”:	”<код ошибки>”,
		//“ErrorMessage”:	”<Описание ошибки>”
		//}
		Если Ошибка Тогда 
			СоответствиеТекста.Вставить("Success","false");
			СоответствиеТекста.Вставить("Info",ТаблицаЗначенийОтвета[0].Info);
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		Иначе 
			СоответствиеТекста.Вставить("Success","true");
			СоответствиеТекста.Вставить("Info",ТаблицаЗначенийОтвета[0].Info);
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		КонецЕсли;
	ИначеЕсли ТипВызова = "DeliveryPrice" Тогда	
		//{	
		//“Info“:	“<информация о клиенте>”,
		//“Success”:	”<Результат запроса>”//<true/false>,
		//“ErrorCode”:	”<код ошибки>”,
		//“ErrorMessage”:	”<Описание ошибки>”
		//}
		Если Ошибка Тогда 
			СоответствиеТекста.Вставить("Success","false");
			СоответствиеТекста.Вставить("PriceDelivery",ТаблицаЗначенийОтвета[0].PriceDelivery);
			СоответствиеТекста.Вставить("TimeDelivery",ТаблицаЗначенийОтвета[0].TimeDelivery);
			СоответствиеТекста.Вставить("Services",ТаблицаЗначенийОтвета[0].Services);
			СоответствиеТекста.Вставить("TotalSum",ТаблицаЗначенийОтвета[0].TotalSum);
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		Иначе 
			СоответствиеТекста.Вставить("Success","true");
			СоответствиеТекста.Вставить("PriceDelivery",ТаблицаЗначенийОтвета[0].PriceDelivery);
			СоответствиеТекста.Вставить("TimeDelivery",ТаблицаЗначенийОтвета[0].TimeDelivery);
			СоответствиеТекста.Вставить("Services",ТаблицаЗначенийОтвета[0].Services);
			СоответствиеТекста.Вставить("TotalSum",ТаблицаЗначенийОтвета[0].TotalSum);
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		КонецЕсли;
	ИначеЕсли ТипВызова = "pvz" Тогда	
		//{	
		//“List“:	“<информация о пвз>”,
		//“Success”:	”<Результат запроса>”//<true/false>,
		//“ErrorCode”:	”<код ошибки>”,
		//“ErrorMessage”:	”<Описание ошибки>”
		//}
		Если Ошибка Тогда 
			СоответствиеТекста.Вставить("Success","false");
			СоответствиеТекста.Вставить("List",ТаблицаЗначенийОтвета[0].List);
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		Иначе 
			СоответствиеТекста.Вставить("Success","true");
			СоответствиеТекста.Вставить("List",ТаблицаЗначенийОтвета[0].List);
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		КонецЕсли;
	ИначеЕсли ТипВызова = "terminal" Тогда	
		//{	
		//“List“:	“<информация о пвз>”,
		//“Success”:	”<Результат запроса>”//<true/false>,
		//“ErrorCode”:	”<код ошибки>”,
		//“ErrorMessage”:	”<Описание ошибки>”
		//}
		Если Ошибка Тогда 
			СоответствиеТекста.Вставить("Success","false");
			СоответствиеТекста.Вставить("List",ТаблицаЗначенийОтвета[0].List);
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		Иначе 
			СоответствиеТекста.Вставить("Success","true");
			СоответствиеТекста.Вставить("List",ТаблицаЗначенийОтвета[0].List);
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		КонецЕсли;
	ИначеЕсли ТипВызова = "city" Тогда	
		//{	
		//“List“:	“<информация о пвз>”,
		//“Success”:	”<Результат запроса>”//<true/false>,
		//“ErrorCode”:	”<код ошибки>”,
		//“ErrorMessage”:	”<Описание ошибки>”
		//}
		Если Ошибка Тогда 
			СоответствиеТекста.Вставить("Success","false");
			СоответствиеТекста.Вставить("List",ТаблицаЗначенийОтвета[0].List);
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		Иначе 
			СоответствиеТекста.Вставить("Success","true");
			СоответствиеТекста.Вставить("List",ТаблицаЗначенийОтвета[0].List);
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		КонецЕсли;
	ИначеЕсли ТипВызова = "Route" Тогда	
		Если Ошибка Тогда 
			СоответствиеТекста.Вставить("Success","false");
			//СоответствиеТекста.Вставить("Route",ТаблицаЗначенийОтвета[0].List);
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		Иначе 
			СоответствиеТекста.Вставить("Success","true");
			//СоответствиеТекста.Вставить("List",ТаблицаЗначенийОтвета[0].List);
			СоответствиеТекста.Вставить("ErrorCode",ErrorCode);
			СоответствиеТекста.Вставить("ErrorMessage",Текст);
			Ответ = ОбработкаJSON.JSON(СоответствиеТекста, Истина);
		КонецЕсли;
		
	КонецЕсли;

	   
	Возврат Ответ;
	
КонецФункции

Функция АвторизацияПользователя(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(302);
	ТекТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
	ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
	ОтветJSON =  ОбработкаJSON.UnJSON(ТекТекстЗапроса);
	Если НЕ ТипЗнч(ОтветJSON) = Тип("Соответствие") Тогда
		СообщениеОшибки=  ОписаниеОтветаСгенерить("Данные должны передаваться в формате json.",Истина,"Authorization");
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
		Возврат Ответ;
	КонецЕсли;
	Password = ОтветJSON.Получить("Password");
	Login = ОтветJSON.Получить("Login");
	
	Если Password = Неопределено или Login = Неопределено Тогда 
		СообщениеОшибки=  ОписаниеОтветаСгенерить("Необходимо проверить структуру вызова.",Истина,"Authorization",,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	иначе
		Запрос = новый Запрос("ВЫБРАТЬ
		                      |	NS_APIАвторизация.Логин КАК Логин,
		                      |	NS_APIАвторизация.Пароль КАК Пароль,
		                      |	NS_APIАвторизация.Контрагент КАК Контрагент,
		                      |	NS_APIАвторизация.Договор.Код КАК ICN
		                      |ИЗ
		                      |	РегистрСведений.NS_APIАвторизация КАК NS_APIАвторизация
		                      |ГДЕ
		                      |	NS_APIАвторизация.Логин = &Логин
		                      |	И NS_APIАвторизация.Пароль = &Пароль");
		Запрос.УстановитьПараметр("Логин",СокрЛП(Login));
		Запрос.УстановитьПараметр("Пароль",СокрЛП(Password));
		Выборка = Запрос.Выполнить().Выгрузить();
		Если Выборка.Количество()=1 Тогда 
			ТаблицаЗначенийОтвета  = Новый ТаблицаЗначений();
			 ТаблицаЗначенийОтвета.Колонки.Добавить("GUID");
			 ТаблицаЗначенийОтвета.Колонки.Добавить("ICN");
			GUID = Новый УникальныйИдентификатор();
			МенеджерЗаписи = РегистрыСведений.NS_СессииЛК.СоздатьМенеджерЗаписи();
			
			МенеджерЗаписи.id = GUID;
			МенеджерЗаписи.Начата = ТекущаяДата();
			МенеджерЗаписи.Истекает = МенеджерЗаписи.Начата +60*60*2;//60 - это минута *60*2 = два часа! 
			МенеджерЗаписи.Контрагент = Выборка[0].Контрагент;
			МенеджерЗаписи.ЗакрытаСамостоятельно = Ложь;
			МенеджерЗаписи.Записать();
			
			СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
			СТ_Доб.GUID =GUID;
			СТ_Доб.ICN =Выборка[0].ICN;

			СообщениеОшибки=  ОписаниеОтветаСгенерить("",Ложь,"Authorization",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
		иначе
			СообщениеОшибки=  ОписаниеОтветаСгенерить("Авторизация не выполнена. Проверьте правильность логина и пароля.",Истина,"Authorization",,4);
			Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);

		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция АвторизацияПользователяЗакрыть(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(302);
	ТекТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
	ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
	ОтветJSON =  ОбработкаJSON.UnJSON(ТекТекстЗапроса);
	SessionId = ОтветJSON.Получить("SessionId");
		
	Если SessionId = Неопределено Тогда 
		СообщениеОшибки=  ОписаниеОтветаСгенерить("Необходимо проверить структуру вызова.",Истина,"CloseAuthorization");
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	иначе
		Запрос = новый Запрос("ВЫБРАТЬ
		                      |	NS_СессииЛК.id,
		                      |	NS_СессииЛК.Начата,
		                      |	NS_СессииЛК.Истекает,
		                      |	NS_СессииЛК.Контрагент,
		                      |	NS_СессииЛК.ЗакрытаСамостоятельно
		                      |ИЗ
		                      |	РегистрСведений.NS_СессииЛК КАК NS_СессииЛК
		                      |ГДЕ
		                      |	NS_СессииЛК.id = &id");
		Запрос.УстановитьПараметр("id",СокрЛП(SessionId));
		
		Выборка = Запрос.Выполнить().Выгрузить();
		Если Выборка.Количество()=1 Тогда 
						
			НаборЗаписей = РегистрыСведений.NS_СессииЛК.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.id.Установить(СокрЛП(SessionId)); 
			НаборЗаписей.Прочитать();
			
			Для каждого Запись из НаборЗаписей Цикл
				Запись.ЗакрытаСамостоятельно = Истина;
			КонецЦикла;
			НаборЗаписей.Записать();   
			
			
			СообщениеОшибки=  ОписаниеОтветаСгенерить("",Ложь,"CloseAuthorization");
			Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
		иначе
			СообщениеОшибки=  ОписаниеОтветаСгенерить("Авторизация не выполнена. Проверьте правильность логина и пароля.",Истина,"CloseAuthorization");
			Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);

		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция СодатьОтгрузку(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(302);
	SessionId = ПолучитьIDСесси(Запрос);	//провериьт на SessionId !!!
	ЗапросСесии = новый Запрос("ВЫБРАТЬ
						|	NS_СессииЛК.id,
						|	NS_СессииЛК.Начата,
						|	NS_СессииЛК.Истекает,
						|	NS_СессииЛК.Контрагент как Контрагент,
						|	NS_СессииЛК.ЗакрытаСамостоятельно
						|ИЗ
						|	РегистрСведений.NS_СессииЛК КАК NS_СессииЛК
						|ГДЕ
						|	NS_СессииЛК.id = &id
						|	И NS_СессииЛК.Истекает >=&ДатаТек
						|	И NS_СессииЛК.Начата <= &ДатаТек
						|	И НЕ NS_СессииЛК.ЗакрытаСамостоятельно");
	
	ЗапросСесии.УстановитьПараметр("id",СокрЛП(SessionId));
	ЗапросСесии.УстановитьПараметр("ДатаТек",ТекущаяДата());
	
	Выборка = ЗапросСесии.Выполнить().Выгрузить();
	Если Выборка.Количество()= 0 Тогда 
		СообщениеОшибки = ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"ShipmentsCreate",,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	
	ИначеЕсли   Выборка.Количество()= 1 Тогда  
		
		ТекТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
		ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
		ОтветJSON =  ОбработкаJSON.UnJSON(ТекТекстЗапроса);
		
		//надо ОтветJSON проверить на правильность заполнения!!!
		ОтветНаПроверкуСтруктурыShipmentsCreate = ПроверитьСтруктуруВходаShipmentsCreate(ОтветJSON);
		ПрошлаПроверку = ОтветНаПроверкуСтруктурыShipmentsCreate.Получить("ПрошлаПроверку") ;
		Если ПрошлаПроверку Тогда 
			
			//Надо создать документ "Заказ клиента"
			ПрошлаПроверкуЗК = ОбработатьЗаказПокупателя(ОтветJSON,Выборка[0].Контрагент);
			
			ЗагрузкаУспешна = ПрошлаПроверкуЗК.Получить("ЗагрузкаУспешна") ;
			ШК                   =    ПрошлаПроверкуЗК.Получить("ШК") ;
			ClientShipmentNumber =    ПрошлаПроверкуЗК.Получить("ClientShipmentNumber") ;
			ShipmentNumber       =    ПрошлаПроверкуЗК.Получить("ShipmentNumber") ;
			ТекстОтвета          =  ПрошлаПроверкуЗК.Получить("ТекстОтвета") ;
			
			ОшибкаВОтвете = Не ЗагрузкаУспешна;
			
			ТаблицаЗначенийОтвета  = Новый ТаблицаЗначений();
			ТаблицаЗначенийОтвета.Колонки.Добавить("ШК");
			ТаблицаЗначенийОтвета.Колонки.Добавить("ShipmentNumber");
			ТаблицаЗначенийОтвета.Колонки.Добавить("ClientShipmentNumber");
			
			СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
			СТ_Доб.ШК                   = ШК;
			СТ_Доб.ShipmentNumber       = ShipmentNumber;
			СТ_Доб.ClientShipmentNumber = ClientShipmentNumber;
			
			СообщениеОтветЗаписи =  ОписаниеОтветаСгенерить(ТекстОтвета,ОшибкаВОтвете,"ShipmentsCreate",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОтветЗаписи);

		иначе
			ТекстТек =  ОтветНаПроверкуСтруктурыShipmentsCreate.Получить("ТекстОшибки") ;
			СообщениеОшибки=  ОписаниеОтветаСгенерить(ТекстТек,Истина,"ShipmentsCreate");
			Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
		КонецЕсли;
	Иначе 
		СообщениеОшибки=  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"ShipmentsCreate",,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	КонецЕсли;
	 		
	Возврат Ответ;
	
КонецФункции


Функция СодатьВызовКурьера (Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(302);
	ТаблицаЗначенийОтвета  = Новый ТаблицаЗначений();
	ТаблицаЗначенийОтвета.Колонки.Добавить("OrderNumber");
	СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
	СТ_Доб.OrderNumber = "";
	
	SessionId = ПолучитьIDСесси(Запрос);
	//провериьт на SessionId !!!
	ЗапросСесии = новый Запрос("ВЫБРАТЬ
						|	NS_СессииЛК.id,
						|	NS_СессииЛК.Начата,
						|	NS_СессииЛК.Истекает,
						|	NS_СессииЛК.Контрагент,
						|	NS_СессииЛК.ЗакрытаСамостоятельно
						|ИЗ
						|	РегистрСведений.NS_СессииЛК КАК NS_СессииЛК
						|ГДЕ
						|	NS_СессииЛК.id = &id
						|	И NS_СессииЛК.Истекает >=&ДатаТек
						|	И NS_СессииЛК.Начата <= &ДатаТек
						|	И НЕ NS_СессииЛК.ЗакрытаСамостоятельно");
	
	ЗапросСесии.УстановитьПараметр("id",СокрЛП(SessionId));
	ЗапросСесии.УстановитьПараметр("ДатаТек",ТекущаяДата());
	
	Выборка = ЗапросСесии.Выполнить().Выгрузить();
	Если Выборка.Количество()= 0 Тогда 
		СообщениеОшибки=  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"СallСourier",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	
	ИначеЕсли   Выборка.Количество()= 1 Тогда  
		
		ТекТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
		ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
		ОтветJSON =  ОбработкаJSON.UnJSON(ТекТекстЗапроса);
		
		//надо ОтветJSON проверить на правильность заполнения!!!
		ОтветНаПроверкуСтруктурыShipmentsCreate = ПроверитьСтруктуруВходаСallСourier(ОтветJSON);
		ПрошлаПроверку = ОтветНаПроверкуСтруктурыShipmentsCreate.Получить("ПрошлаПроверку") ;
		Если ПрошлаПроверку Тогда 
			
			//Надо создать документ "Забор груза"
			ОтветОбработки = ОбработатьВызовКурьера(ОтветJSON,Выборка[0].Контрагент);
			//
			ЗагрузкаУспешна = ОтветОбработки.Получить("ЗагрузкаУспешна") ;
			OrderNumber     = ОтветОбработки.Получить("OrderNumber") ;
			ТекстОтвета     = ОтветОбработки.Получить("ТекстОтвета") ;
			//
			ОшибкаВОтвете = Не ЗагрузкаУспешна;
			//
			ТаблицаЗначенийОтвета.Очистить();
			СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
			СТ_Доб.OrderNumber = OrderNumber;
			
			СообщениеОтветЗаписи =  ОписаниеОтветаСгенерить(ТекстОтвета,ОшибкаВОтвете,"СallСourier",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОтветЗаписи); 

		иначе
			ТекстТек =  ОтветНаПроверкуСтруктурыShipmentsCreate.Получить("ТекстОшибки") ;
			СообщениеОшибки=  ОписаниеОтветаСгенерить(ТекстТек,Истина,"СallСourier",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
		КонецЕсли;
	Иначе 
		СообщениеОшибки=  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"СallСourier",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	КонецЕсли;
	 		
	Возврат Ответ;

КонецФункции

Функция ОбработатьВызовКурьера(ОтветJSON_Соответствие, Контрагент) 
	//EFSOL_Шаповал Олег Анатольевич 17 августа 2017 г. 17:53:06 +
	ТекПользователь = Пользователи.ТекущийПользователь();
	ТекСотрудник  	= Справочники.Сотрудники.НайтиПоНаименованию(ТекПользователь.Наименование);
	
	ТекстОшибки = "";
	ЗагрузкаУспешна = Истина;
	СоответсвиеОтвета = Новый Соответствие;
	
	OrderNumber =   ОтветJSON_Соответствие.Получить("OrderNumber");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ES_ЗаборГруза.Ссылка
	               |ИЗ
	               |	Документ.ES_ЗаборГруза КАК ES_ЗаборГруза
	               |ГДЕ
	               |	ES_ЗаборГруза.НомерНакладной = &Номер
	               |	И ES_ЗаборГруза.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И ES_ЗаборГруза.Проведен";
	Запрос.УстановитьПараметр("Номер",OrderNumber);
	//поиск вызова в пределах 60 дней
	ДатаПоиска = НачалоДня((ТекущаяДата()-60*24*60*60));
	Запрос.УстановитьПараметр("ДатаНачала",ДатаПоиска);
	Запрос.УстановитьПараметр("ДатаОкончания",КонецДня(ТекущаяДата()));
	ТЗВызовКурьера = Запрос.Выполнить().Выгрузить();
	ОшибкаПриПоиске = Ложь;
	Если ТЗВызовКурьера.Количество() = 1 Тогда 		
		//проверим в камом статусе вызов курьера
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ES_СтатусыЗаборовСрезПоследних.Забор,
		               |	ES_СтатусыЗаборовСрезПоследних.СтатусЗабора
		               |ИЗ
		               |	РегистрСведений.ES_СтатусыЗаборов.СрезПоследних(
		               |			&ТекДата,
		               |			Забор = &Забор) КАК ES_СтатусыЗаборовСрезПоследних";
		Запрос.УстановитьПараметр("ТекДата",ТекущаяДата());
		Запрос.УстановитьПараметр("Забор",ТЗВызовКурьера[0].Ссылка);
		ТЗСтатусы = Запрос.Выполнить().Выгрузить();
		Если ТЗСтатусы[0].СтатусЗабора = Перечисления.ES_СтатусыЗаборов.ВРаботе Тогда
			ОбВК = ТЗВызовКурьера[0].Ссылка.ПолучитьОбъект();
		Иначе
			ОшибкаПриПоиске = Истина;
			ЗагрузкаУспешна = Ложь;
			ТекстОшибки = ТекстОшибки+"
			|Вызов уже обработан. Для редактирования обратитесь к менеждеру.";
		КонецЕсли;
	ИначеЕсли  ТЗВызовКурьера.Количество() = 0 Тогда
		Если OrderNumber = "" или OrderNumber = Неопределено Тогда
			ОбВК =  Документы.ES_ЗаборГруза.СоздатьДокумент();
			ОбВК.Ответственный = ТекСотрудник;
			ОбВК.Организация = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Организация);
		Иначе
			ОшибкаПриПоиске = Истина;
			ЗагрузкаУспешна = Ложь;
			ТекстОшибки = ТекстОшибки+"
			|Не найден вызов курьера №"+OrderNumber+". Обратитесь к менеждеру.";
		КонецЕсли;
	Иначе
		ОшибкаПриПоиске = Истина;
		ЗагрузкаУспешна = Ложь;
		ТекстОшибки = ТекстОшибки+"
		|Найдено более одной накладной. Обратитесь к менеждеру.";
	КонецЕсли;
	
	Если ЗагрузкаУспешна Тогда
		
		// заполняем шапку документа		
		ОбВК.Дата 							= ТекущаяДата();
		ОбВК.ВидЗабора  					= Перечисления.ES_ВидыЗабора.Выезд;
		
		ОбВК.Заказчик						= Контрагент;
		ОбВК.ЗаказчикИОтправительОдноЛицо 	= Истина;
		ОбВК.Отправитель					= Контрагент;	
		Name								= ОтветJSON_Соответствие.Получить("Name");
		ОбВК.КонтактноеЛицо 				= Name;		
		FullAddress							= ОтветJSON_Соответствие.Получить("FullAddress");
		ОбВК.Адрес			 				= FullAddress;
		PostalCode          = СокрЛП(ОтветJSON_Соответствие.Получить("PostalCode"));
		PostalCode = ?(PostalCode=Неопределено,"",PostalCode);
		//ОбЗП.ES_Индекс = PostalCode;
		Region              = СокрЛП(ОтветJSON_Соответствие.Получить("Region"));
		Region = ?(Region=Неопределено,"",Region);
		//ОбЗП.ES_Область = Справочники.ES_Области.НайтиПоНаименованию(Region);
		City                = СокрЛП(ОтветJSON_Соответствие.Получить("City")); 
		City = ?(City=Неопределено,"",City);
		//Area                = СокрЛП(Sender.Получить("Area")); 
		//Area = ?(Area=Неопределено,"",Area);
		//Settlement          = СокрЛП(Sender.Получить("Settlement")); 
		//Settlement = ?(Settlement=Неопределено,"",Settlement);
		Street              = СокрЛП(ОтветJSON_Соответствие.Получить("Street"));
		Street = ?(Street=Неопределено,"",Street);
		House               = СокрЛП(ОтветJSON_Соответствие.Получить("House")); 
		House = ?(House=Неопределено,"",House);
		Building            = СокрЛП(ОтветJSON_Соответствие.Получить("Building"));
		Building = ?(Building=Неопределено,"",Building);
		Block               = СокрЛП(ОтветJSON_Соответствие.Получить("Block")); 
		Block = ?(Block=Неопределено,"",Block);
		Flat                = СокрЛП(ОтветJSON_Соответствие.Получить("Flat")); 
		Flat = ?(Flat=Неопределено,"",Flat);
		
		ОбВК.ES_Индекс = PostalCode;
		ОбВК.ES_Области = Region;
		ОбВК.ES_Город = City;
		ОбВК.ES_АдресДоставки = Street;
		ОбВК.ES_АдресДоставкиДом = House;
		ОбВК.ES_АдресДоставкиСтроение = Building;
		ОбВК.ES_АдресДоставкиКорпус = Block;
		ОбВК.ES_АдресДоставкиКвартира = Flat;
		ОбВК.ES_ИзКЛАДР = ЛОЖЬ;

		Phone								= ОтветJSON_Соответствие.Получить("Phone");
		AddPhone							= ОтветJSON_Соответствие.Получить("AddPhone");
		ОбВК.Телефон		 				= ""+Phone+?(ЗначениеЗаполнено(AddPhone)," доб."+AddPhone,"");
		Urgency                             = ОтветJSON_Соответствие.Получить("Urgency");
		ОбВК.Срочность						= ES_ОбщегоНазначения.ПолучитьСрочностьДоставки(0);
		PickupDate                          = ОтветJSON_Соответствие.Получить("PickupDate");
		ОбВК.ДатаЗабора						= Дата(СтрЗаменить(PickupDate,".",""));
		PickupTimeFrom                      = ОтветJSON_Соответствие.Получить("PickupTimeFrom");
		PickupTimeFrom						= СтрЗаменить(PickupTimeFrom,":","");
		ОбВК.ВремяЗабораС					= Дата("00010101"+PickupTimeFrom+"00");
		PickupTimeTo	                    = ОтветJSON_Соответствие.Получить("PickupTimeTo");
		PickupTimeTo						= СтрЗаменить(PickupTimeTo,":","");
		ОбВК.ВремяЗабораПо					= Дата("00010101"+PickupTimeTo+"00");		
		Weight	                   			= ОтветJSON_Соответствие.Получить("Weight");
		Weight	                   			= СтрЗаменить(Weight,",","."); // Линукс не читает в формате x.x
		Weight 								= ?(Weight = Неопределено ИЛИ Weight = "",0,Число(Weight));
		ОбВК.ОбщийВес						= Weight; //не возможности записать вес		
		Comment	                    		= ОтветJSON_Соответствие.Получить("Comment");
		ОбВК.Комментарий					= "Вес:"+Weight+". "+Comment;
		ЗаполнитьШиротуИДолготуПоАдресу(ОбВК,"Адрес","АдресДолгота","АдресДолгота","Регион");
		
		// заполняем таблицу заказов которую нужно забрать
		Shipments = ОтветJSON_Соответствие.Получить("Shipments");
		// ищем заказы
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказПокупателя.Ссылка КАК Заказ
		               |ИЗ
		               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		               |ГДЕ
		               |	ЗаказПокупателя.ES_НомерНакладной В(&ES_НомерНакладной)
		               |	И ЗаказПокупателя.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
		Запрос.УстановитьПараметр("ДатаНачала",ДатаПоиска);
		Запрос.УстановитьПараметр("ДатаОкончания",КонецДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("ES_НомерНакладной",Shipments);
		
		ТЗ_Заказы = Запрос.Выполнить().Выгрузить();
		КоличествоЗаказов = Shipments.Количество();
		Если ТЗ_Заказы.Количество() = КоличествоЗаказов Тогда
			// все заказы найдены можно заполнять
			ОбВК.Заказы.Очистить();
			ОбВК.Заказы.Загрузить(ТЗ_Заказы);
		ИначеЕсли ТЗ_Заказы.Количество() > КоличествоЗаказов Тогда
			ОшибкаПриПоиске = Истина;
			ЗагрузкаУспешна = Ложь;
			ТекстОшибки = ТекстОшибки+"
			|Найдено больше заказов для забора чем указано в заявке. Проверьте номера накладных или обратитесь к менеждеру.";
		Иначе
			ОшибкаПриПоиске = Истина;
			ЗагрузкаУспешна = Ложь;
			ТекстОшибки = ТекстОшибки+"
			|Не все заказы найдены. Проверьте номера накладных или обратитесь к менеждеру.";
		КонецЕсли;
		
		ИКН = ОтветJSON_Соответствие.Получить("ICN");
		Если НЕ ИКН = "" Тогда 
			Договор = Справочники.ДоговорыКонтрагентов.НайтиПоКоду(ИКН);
			Если Договор.Пустая() Тогда
				Договор = Контрагент.ОсновнойДоговор;
			КонецЕсли;
		Иначе
			Договор = Контрагент.ОсновнойДоговор;
		КонецЕсли;
		ОбВК.ES_Договор = Договор;
		
		
		Services = ОтветJSON_Соответствие.Получить("Services");
		мСуммаУслуг = 0;
		Если Services.Количество() > 0 Тогда
			Таб = Новый ТаблицаЗначений;
			Таб.Колонки.Добавить("Номенклатура");
			Таб.Колонки.Добавить("Количество");
			Таб.Колонки.Добавить("Цена");
			Для а=0 По Services.Количество()-1 Цикл
				Артикул = Services[а].Получить("code");
				Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
				Количество = Services[а].Получить("count");
				Если Номенклатура.Пустая() Тогда
					ЗагрузкаУспешна = Ложь;
					ТекстОшибки = ТекстОшибки+"
					|Не найдена услуга, артикул("+Строка(Артикул)+").";
				Иначе
					//мОбъект = РеквизитФормыВЗначение("Объект");
					Стр = Таб.Добавить();
					Стр.Номенклатура = Номенклатура;
					Стр.Количество = ?(Число(Количество)=0,1,Число(Количество));
					Стр.Цена = 0;				
				КонецЕсли;
			КонецЦикла;
			
			Если Не Договор.Пустая()Тогда
				Если НЕ Договор.ES_УчетПриРасчетеЦенТК Тогда
					Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
			Ответ = ES_ОбщегоНазначенияКлиентСервер.ЭР_ОбновитьУслугиТЧДоставки(Таб,ТекущаяДата(),Договор,,,,ОбВК.ОбщийВес);
			
			мСуммаУслуг = Таб.Итог("Цена");
			
		КонецЕсли;
		ОбВК.ES_Стоимость = мСуммаУслуг;
		
	КонецЕсли;
	
	Если ЗагрузкаУспешна Тогда
		Попытка
			ОбВК.Записать(РежимЗаписиДокумента.Проведение);
			OrderNumber = ОбВК.Номер;
			ОбВК.НомерНакладной = OrderNumber;
			ОбВК.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОшибкаПриПоиске = Истина;
			ЗагрузкаУспешна = Ложь;
			ТекстОшибки = ТекстОшибки+"
			|Не удалось создать вызов курьера. Обратитесь к менеждеру.";
		КонецПопытки;
	КонецЕсли;
	
	
	СоответсвиеОтвета.Вставить("ЗагрузкаУспешна",ЗагрузкаУспешна);
	СоответсвиеОтвета.Вставить("OrderNumber",OrderNumber);
	СоответсвиеОтвета.Вставить("ТекстОтвета",ТекстОшибки);
	
	Возврат  СоответсвиеОтвета;
	//EFSOL Шаповал О.А. -	
КонецФункции

Функция ОтменитьВызовКурьера(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(302);
	SessionId = ПолучитьIDСесси(Запрос);
	ТаблицаЗначенийОтвета  = Новый ТаблицаЗначений();
	ТаблицаЗначенийОтвета.Колонки.Добавить("OrderNumber");
	СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
	СТ_Доб.OrderNumber                   = "";

	//провериьт на SessionId !!!
	ЗапросСесии = новый Запрос("ВЫБРАТЬ
						|	NS_СессииЛК.id,
						|	NS_СессииЛК.Начата,
						|	NS_СессииЛК.Истекает,
						|	NS_СессииЛК.Контрагент,
						|	NS_СессииЛК.ЗакрытаСамостоятельно
						|ИЗ
						|	РегистрСведений.NS_СессииЛК КАК NS_СессииЛК
						|ГДЕ
						|	NS_СессииЛК.id = &id
						|	И NS_СессииЛК.Истекает >=&ДатаТек
						|	И NS_СессииЛК.Начата <= &ДатаТек
						|	И НЕ NS_СессииЛК.ЗакрытаСамостоятельно");
	
	ЗапросСесии.УстановитьПараметр("id",СокрЛП(SessionId));
	ЗапросСесии.УстановитьПараметр("ДатаТек",ТекущаяДата());
	
	Выборка = ЗапросСесии.Выполнить().Выгрузить();
	Если Выборка.Количество()= 0 Тогда 
		СообщениеОшибки=  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"CancelCouriercAll",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	
	ИначеЕсли   Выборка.Количество()= 1 Тогда  
		
		ТекТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
		ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
		ОтветJSON =  ОбработкаJSON.UnJSON(ТекТекстЗапроса);
		
		//надо ОтветJSON проверить на правильность заполнения!!!
		ОтветНаПроверкуСтруктурыShipmentsCreate = ПроверитьСтруктуруВходаCancelCouriercAll(ОтветJSON);
		ПрошлаПроверку = ОтветНаПроверкуСтруктурыShipmentsCreate.Получить("ПрошлаПроверку") ;
		Если ПрошлаПроверку Тогда 
			
			//Надо найти документ "Вызов курьера"
			//
			ОтветОбработки = ОбработатьОтменаВызовзаКурьера(ОтветJSON,Выборка[0].Контрагент);
			//
			ЗагрузкаУспешна = ОтветОбработки.Получить("ЗагрузкаУспешна") ;
			OrderNumber     = ОтветОбработки.Получить("OrderNumber") ;
			ТекстОтвета     = ОтветОбработки.Получить("ТекстОтвета") ;
			//
			ОшибкаВОтвете = Не ЗагрузкаУспешна;
			//
			ТаблицаЗначенийОтвета.Очистить();
			СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
			СТ_Доб.OrderNumber = OrderNumber;
			
			СообщениеОтветЗаписи =  ОписаниеОтветаСгенерить(ТекстОтвета,ОшибкаВОтвете,"CancelCouriercAll",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОтветЗаписи); 

		иначе
			ТекстТек =  ОтветНаПроверкуСтруктурыShipmentsCreate.Получить("ТекстОшибки") ;
			СообщениеОшибки=  ОписаниеОтветаСгенерить(ТекстТек,Истина,"CancelCouriercAll",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
		КонецЕсли;
	Иначе 
		СообщениеОшибки=  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"CancelCouriercAll",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	КонецЕсли;
	 		
	Возврат Ответ;
	

	
КонецФункции

Функция ПроверитьСтруктуруВходаShipmentsCreate(ОтветJSON_Соответствие)
	ТекстОшибки = "";
	СоответствиеПроверки = Новый Соответствие;
	
	Если ТипЗнч(ОтветJSON_Соответствие) = Тип("Соответствие") Тогда 
		
		ICN = ОтветJSON_Соответствие.Получить("ICN");
		Shipment = ОтветJSON_Соответствие.Получить("Shipment");
		Sender = ОтветJSON_Соответствие.Получить("Sender");  
		
		Если ICN = Неопределено Тогда 
			ТекстОшибки = ТекстОшибки +"
			|Структура не соответствует. Нет JSON ICN."; 
		КонецЕсли;
		
		Если ТипЗнч(Sender) = Тип("Соответствие") Тогда
			
			TypeDelivery = СокрЛП(Sender.Получить("TypeDelivery")); //Строка
			Urgent = СокрЛП(Sender.Получить("Urgent"));     //число
			City = СокрЛП(Sender.Получить("City"));       //Строка

			ТекстОшибки = ПроверитьНаЗаполениеИТип(TypeDelivery,Тип("Строка"),ТекстОшибки,"TypeDelivery");
			ТекстОшибки = ПроверитьНаЗаполениеИТип(Urgent,Тип("Число"),ТекстОшибки,"Urgent");
			ТекстОшибки = ПроверитьНаЗаполениеИТип(City,Тип("Строка"),ТекстОшибки,"City");
			
		Иначе
			ТекстОшибки = ТекстОшибки +"
			|Структура не соответствует тип Sender или отсутствует."; 
		КонецЕсли;
		
		Если ТипЗнч(Shipment) = Тип("Соответствие") Тогда 
			
			//ClientShipmentNumber = Shipment.Получить("ClientShipmentNumber"); //что заполнено!
			//
			//ТекстОшибки = ПроверитьНаЗаполениеИТип(ClientShipmentNumber,Тип("Строка"),ТекстОшибки,"ClientShipmentNumber");
			
			Weight = СокрЛП(Shipment.Получить("Weight")); //число
			Length = СокрЛП(Shipment.Получить("Length"));     //число
			Width = СокрЛП(Shipment.Получить("Width"));       //число
			Height = СокрЛП(Shipment.Получить("Height"));     //число

			ТекстОшибки = ПроверитьНаЗаполениеИТип(Weight,Тип("Число"),ТекстОшибки,"Weight");
			ТекстОшибки = ПроверитьНаЗаполениеИТип(Length,Тип("Число"),ТекстОшибки,"Length");
			ТекстОшибки = ПроверитьНаЗаполениеИТип(Width,Тип("Число"),ТекстОшибки,"Width");
			ТекстОшибки = ПроверитьНаЗаполениеИТип(Height,Тип("Число"),ТекстОшибки,"Height");
			
			Recipient = Shipment.Получить("Recipient");     //структура для получателя
			Если ТипЗнч(Recipient) <> Тип("Соответствие") Тогда 
				ТекстОшибки = ТекстОшибки +"
				|Структура не соответствует тип Recipient или отсутствует."; 
				
			иначе
				Name = СокрЛП(Recipient.Получить("Name"));  //что заполнено!
				Phone = СокрЛП(Recipient.Получить("Phone")); //что заполнено!
				
				ТекстОшибки = ПроверитьНаЗаполениеИТип(Name,Тип("Строка"),ТекстОшибки,"Name");
				ТекстОшибки = ПроверитьНаЗаполениеИТип(Phone,Тип("Строка"),ТекстОшибки,"Phone");
			КонецЕсли;
			
			Items = Shipment.Получить("Items");     //массив
			
			Если ТипЗнч(Items) <> Тип("Массив") Тогда 
				ТекстОшибки = ТекстОшибки +"
				|Структура не соответствует тип Items или отсутствует."; 
				
			иначе
				Для Каждого ст из Items Цикл 
					Если ТипЗнч(ст) <> Тип("Соответствие") Тогда 
						ТекстОшибки = ТекстОшибки +"
						|Структура не соответствует тип Packages(состав) или отсутствует."; 
						
					иначе
						Article   = СокрЛП(ст.Получить("Article"));  //что заполнено!
						Name      = СокрЛП(ст.Получить("Name")); //что заполнено!
						Barcode   = СокрЛП(ст.Получить("Barcode")); //что заполнено!
						IsService = СокрЛП(ст.Получить("IsService")); //что заполнено!
						Price     = СокрЛП(ст.Получить("Price")); //что заполнено!
						Discount  = СокрЛП(ст.Получить("Discount")); //что заполнено!
						Count     = СокрЛП(ст.Получить("Count")); //что заполнено!
						VATSum    = СокрЛП(ст.Получить("VATSum")); //что заполнено!
						VAT       = СокрЛП(ст.Получить("VAT")); //что заполнено!
						 
						ТекстОшибки = ПроверитьНаЗаполениеИТип(Article,Тип("Строка"),ТекстОшибки,"Article (Packages)");
						ТекстОшибки = ПроверитьНаЗаполениеИТип(Name,Тип("Строка"),ТекстОшибки,"Name (Packages)");
						ТекстОшибки = ПроверитьНаЗаполениеИТип(Barcode,Тип("Строка"),ТекстОшибки,"Barcode (Packages)");
						ТекстОшибки = ПроверитьНаЗаполениеИТип(IsService,Тип("Строка"),ТекстОшибки,"IsService (Packages)");
						ТекстОшибки = ПроверитьНаЗаполениеИТип(Price,Тип("Число"),ТекстОшибки,"Price (Packages)");
						ТекстОшибки = ПроверитьНаЗаполениеИТип(Discount,Тип("Число"),ТекстОшибки,"Discount (Packages)");
						ТекстОшибки = ПроверитьНаЗаполениеИТип(Count,Тип("Число"),ТекстОшибки,"Count (Packages)");
						ТекстОшибки = ПроверитьНаЗаполениеИТип(VATSum,Тип("Число"),ТекстОшибки,"VATSum (Packages)");
						ТекстОшибки = ПроверитьНаЗаполениеИТип(VAT,Тип("Число"),ТекстОшибки,"VAT (Packages)");

					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		иначе
			ТекстОшибки = ТекстОшибки +"
			|Структура не соответствует тип Shipment или отсутствует."; 
		КонецЕсли;
	иначе
		ТекстОшибки = "Структура не соответствует. Необходимо проверить текст вызова.";
	КонецЕсли;
	
	СоответствиеПроверки.Вставить("ТекстОшибки",ТекстОшибки);

	Если ТекстОшибки = "" Тогда 
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Истина);
	Иначе
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Ложь);
	КонецЕсли;

	Возврат  СоответствиеПроверки;
КонецФункции

Функция ПроверитьСтруктуруВходаСallСourier(ОтветJSON_Соответствие)
	ТекстОшибки = "";
	СоответствиеПроверки = Новый Соответствие;
	
	Если ТипЗнч(ОтветJSON_Соответствие) = Тип("Соответствие") Тогда 
		//{	
		//“OrderNumber“:	“<номер накладной>”,
		//“FullAddress“:	“<Полный адрес сбора>”,
		//“Name“: 		“<Контактное лицо>”, обязательное поле,
		//“Phone“: 		“<Контактный телефон>”, обязательное поле,
		//“AddPhone“: 	“<Добавочный номер к Phone>”,
		//“PickupDate“	“<Дата сбора>”, обязательное поле,//формат гггг.мм.дд
		//“PickupTimeFrom“: 	“<Ожидаемое время сбора с>”,//формат чч:мм
		//“PickupTimeTo“:	“<Ожидаемое время сбора по>”,//формат чч:мм
		//“Weight”: 		“<Общий вес, грамм>” примерное значение,	
		//“Comment“: 	“<Комментарий для курьера>”,
		//	“Shipments”:	“<Массив с номерами отправлений привязанными к вызову>”
		//	[“SPE0001234”, “SPE0001235” ]
		//	}
		
		ICN = ОтветJSON_Соответствие.Получить("ICN");
		Name = ОтветJSON_Соответствие.Получить("Name");
		Phone = ОтветJSON_Соответствие.Получить("Phone"); 
		PickupDate = ОтветJSON_Соответствие.Получить("PickupDate"); 
		ТекстОшибки = ПроверитьНаЗаполениеИТип(ICN,Тип("Строка"),ТекстОшибки,"ICN");
		ТекстОшибки = ПроверитьНаЗаполениеИТип(Name,Тип("Строка"),ТекстОшибки,"Name");
		ТекстОшибки = ПроверитьНаЗаполениеИТип(Phone,Тип("Строка"),ТекстОшибки,"Phone");
		ТекстОшибки = ПроверитьНаЗаполениеИТип(PickupDate,Тип("Строка"),ТекстОшибки,"PickupDate");
		
		//Если ICN = Неопределено Тогда 
		//	ТекстОшибки = ТекстОшибки +"
		//	|Структура не соответствует. Нет JSON ICN."; 
		//КонецЕсли;
		Shipments = ОтветJSON_Соответствие.Получить("Shipments"); 
		Если ТипЗнч(Shipments)<> Тип("Массив") Тогда 
			
			ТекстОшибки = ТекстОшибки +"
			|Структура не соответствует тип Shipments или отсутствует."; 
		КонецЕсли;
		
		Services = ОтветJSON_Соответствие.Получить("Services"); 
		Если ТипЗнч(Services)<> Тип("Массив") Тогда 
			
			ТекстОшибки = ТекстОшибки +"
			|Структура не соответствует тип Services или отсутствует."; 
		КонецЕсли;
		
	Иначе
		ТекстОшибки = "Структура не соответствует. Необходимо проверить текст вызова.";
	КонецЕсли;
	
	СоответствиеПроверки.Вставить("ТекстОшибки",ТекстОшибки);
	
	Если ТекстОшибки = "" Тогда 
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Истина);
	Иначе
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Ложь);
	КонецЕсли;
	
	Возврат  СоответствиеПроверки;
	
КонецФункции

Функция ПроверитьСтруктуруВходаCancelCouriercAll(ОтветJSON_Соответствие)
	ТекстОшибки = "";
	СоответствиеПроверки = Новый Соответствие;
	
	Если ТипЗнч(ОтветJSON_Соответствие) = Тип("Соответствие") Тогда 
		//{
		//“OrderNumber“:	“<Номер вызова/сбора>”
		//}
		
		OrderNumber = ОтветJSON_Соответствие.Получить("OrderNumber");
		ТекстОшибки = ПроверитьНаЗаполениеИТип(OrderNumber,Тип("Строка"),ТекстОшибки,"OrderNumber");
	иначе
		ТекстОшибки = "Структура не соответствует. Необходимо проверить текст вызова.";
	КонецЕсли;
	
	СоответствиеПроверки.Вставить("ТекстОшибки",ТекстОшибки);
	
	Если ТекстОшибки = "" Тогда 
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Истина);
	Иначе
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Ложь);
	КонецЕсли;
	
	Возврат  СоответствиеПроверки;
	
КонецФункции

Функция ОбработатьОтменаВызовзаКурьера(ОтветJSON_Соответствие,Контрагент)
	//EFSOL_Шаповал Олег Анатольевич 21 августа 2017 г. 13:38:25 +
	ТекПользователь = Пользователи.ТекущийПользователь();
	ТекСотрудник  	= Справочники.Сотрудники.НайтиПоНаименованию(ТекПользователь.Наименование);
	
	ТекстОшибки = "";
	ЗагрузкаУспешна = Истина;
	СоответсвиеОтвета = Новый Соответствие;
	
	OrderNumber =   ОтветJSON_Соответствие.Получить("OrderNumber");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ES_ЗаборГруза.Ссылка
	               |ИЗ
	               |	Документ.ES_ЗаборГруза КАК ES_ЗаборГруза
	               |ГДЕ
	               |	ES_ЗаборГруза.НомерНакладной = &Номер
	               |	И ES_ЗаборГруза.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И ES_ЗаборГруза.Проведен";
	Запрос.УстановитьПараметр("Номер",OrderNumber);
	//поиск вызова в пределах 60 дней
	ДатаПоиска = НачалоДня((ТекущаяДата()-60*24*60*60));
	Запрос.УстановитьПараметр("ДатаНачала",ДатаПоиска);
	Запрос.УстановитьПараметр("ДатаОкончания",КонецДня(ТекущаяДата()));
	ТЗВызовКурьера = Запрос.Выполнить().Выгрузить();
	ОшибкаПриПоиске = Ложь;
	Если ТЗВызовКурьера.Количество() = 1 Тогда 		
		//проверим в камом статусе вызов курьера
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ES_СтатусыЗаборовСрезПоследних.Забор,
		               |	ES_СтатусыЗаборовСрезПоследних.СтатусЗабора
		               |ИЗ
		               |	РегистрСведений.ES_СтатусыЗаборов.СрезПоследних(
		               |			&ТекДата,
		               |			Забор = &Забор) КАК ES_СтатусыЗаборовСрезПоследних";
		Запрос.УстановитьПараметр("ТекДата",ТекущаяДата());
		Запрос.УстановитьПараметр("Забор",ТЗВызовКурьера[0].Ссылка);
		ТЗСтатусы = Запрос.Выполнить().Выгрузить();
		Если ТЗСтатусы[0].СтатусЗабора = Перечисления.ES_СтатусыЗаборов.ВРаботе Тогда
			ОбВК = ТЗВызовКурьера[0].Ссылка.ПолучитьОбъект();
		Иначе
			ОшибкаПриПоиске = Истина;
			ЗагрузкаУспешна = Ложь;
			ТекстОшибки = ТекстОшибки+"
			|Вызов уже обработан. Для отмены обратитесь к менеждеру.";
		КонецЕсли;
	ИначеЕсли  ТЗВызовКурьера.Количество() = 0 Тогда
			ОшибкаПриПоиске = Истина;
			ЗагрузкаУспешна = Ложь;
			ТекстОшибки = ТекстОшибки+"
			|Не найден вызов курьера №"+OrderNumber+". Обратитесь к менеждеру.";
	Иначе
		ОшибкаПриПоиске = Истина;
		ЗагрузкаУспешна = Ложь;
		ТекстОшибки = ТекстОшибки+"
		|Найдено более одной накладной. Обратитесь к менеждеру.";
	КонецЕсли;
	
	Если ЗагрузкаУспешна Тогда
		
		ОбВК.Отменен = Истина;
		
		Попытка
			ОбВК.Записать(РежимЗаписиДокумента.Проведение);
			OrderNumber = ОбВК.Номер;
			ОбВК.НомерНакладной = OrderNumber;
			ОбВК.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОшибкаПриПоиске = Истина;
			ЗагрузкаУспешна = Ложь;
			ТекстОшибки = ТекстОшибки+"
			|Не удалось выполнить отмену. Обратитесь к менеждеру.";
		КонецПопытки;
	КонецЕсли;
	
	
	СоответсвиеОтвета.Вставить("ЗагрузкаУспешна",ЗагрузкаУспешна);
	СоответсвиеОтвета.Вставить("OrderNumber",OrderNumber);
	СоответсвиеОтвета.Вставить("ТекстОтвета",ТекстОшибки);
	
	Возврат  СоответсвиеОтвета;
	
	//EFSOL Шаповал О.А. -	
КонецФункции


Функция ПроверитьНаЗаполениеИТип(ПолеЗначение,Тип,ТекстОшибки,ПолеНазвание)
	
	Если   ПолеЗначение <> Неопределено Тогда 
		Если СокрЛП(строка(ПолеЗначение)) = "" Тогда
			ТекстОшибки = ТекстОшибки +"
			|Не заполнено "+ПолеНазвание+". Поле обязательно для заполнения."; 
			
		иначе  //проверить на число
			Если Тип = Тип("Число") Тогда 
				//по хорошему надо проверить каждый символ на зачение от 0 до 9	, иначе попытка не сработает 
				ВсегоСимволов = СтрДлина(ПолеЗначение);
				ЭтоЧисло =  Истина;    
				Для Счетчик = 1 По ВсегоСимволов Цикл
					ТекСимвол = Прав(Лев(ПолеЗначение,Счетчик),1);
					Если ТекСимвол = "." или
						ТекСимвол = "," или
						ТекСимвол = "1" или
						ТекСимвол = "2" или
						ТекСимвол = "3" или
						ТекСимвол = "4" или
						ТекСимвол = "5" или
						ТекСимвол = "6" или
						ТекСимвол = "7" или
						ТекСимвол = "8" или
						ТекСимвол = "9" или
						ТекСимвол = "0" Тогда 
						Если  ЭтоЧисло Тогда 
							ЭтоЧисло = Истина;  //и так истина
						КонецЕсли;
					иначе
						ЭтоЧисло = Ложь;
					КонецЕсли;
				КонецЦикла; 
				
				Если НЕ ЭтоЧисло Тогда 
					ТекстОшибки = ТекстОшибки +"
					|Значение поля: "+ПолеНазвание+" не число. Необходимо изменить формат."; 
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстОшибки = ТекстОшибки +"
		|Нет "+ПолеНазвание+". Поле обязательно для заполнения."; 
	КонецЕсли;
	
	Возврат  ТекстОшибки;
 КонецФункции
 
Функция ОбработатьЗаказПокупателя(ОтветJSON_Соответствие, Заказчик)
	ТекстОшибки = "";
	ЗагрузкаУспешна = Истина;
	ShipmentNumber = "";
	СоответсвиеОтвета = Новый Соответствие; 
	Sender =   ОтветJSON_Соответствие.Получить("Sender"); //это для вызово курьера, не обработывается
	
	ICN = ОтветJSON_Соответствие.Получить("ICN");   //это проверялось, не обработывается
	//ICN  - номер договора, не обработывается пока что
	Shipment = ОтветJSON_Соответствие.Получить("Shipment"); //это проверялось
	
	ShipmentNumber = Shipment.Получить("ShipmentNumber"); //это проверялось
	ClientShipmentNumber = Shipment.Получить("ClientShipmentNumber"); //это проверялось
	ЗапросНаЗаказПокупателя = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                                       |	ЗаказПокупателя.Ссылка КАК Ссылка,
	                                       |	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа
	                                       |ИЗ
	                                       |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	                                       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних КАК ES_СтатусыЗаказовСрезПоследних
	                                       |		ПО ЗаказПокупателя.Ссылка = ES_СтатусыЗаказовСрезПоследних.Заказ
	                                       |ГДЕ
	                                       |	ЗаказПокупателя.ES_НомерНакладной = &ES_НомерНакладной
	                                       |	И НЕ ЗаказПокупателя.ПометкаУдаления
	                                       |	И ЗаказПокупателя.Контрагент = &Контрагент");
	ЗапросНаЗаказПокупателя.УстановитьПараметр( "ES_НомерНакладной",ShipmentNumber);
	ЗапросНаЗаказПокупателя.УстановитьПараметр( "Контрагент",Заказчик);
	Если ShipmentNumber = "" или ShipmentNumber = Неопределено Тогда
		ВыборкаНаЗаказПокупателя = Новый ТаблицаЗначений;
	Иначе
		ВыборкаНаЗаказПокупателя = ЗапросНаЗаказПокупателя.Выполнить().Выгрузить();
	КонецЕсли;
	ОшибкаПриПоиске = Ложь;
	Если ВыборкаНаЗаказПокупателя.Количество() = 1 Тогда 
		
		Если ВыборкаНаЗаказПокупателя[0].СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.Подготовлен
			ИЛИ ВыборкаНаЗаказПокупателя[0].СтатусЗаказа = Перечисления.ES_СтатусыЗаказов.ОжидаетГруз Тогда
			ОбЗП = ВыборкаНаЗаказПокупателя[0].Ссылка.ПолучитьОбъект();
		Иначе
			ОшибкаПриПоиске = Истина;
			ЗагрузкаУспешна = Ложь;
			ТекстОшибки = ТекстОшибки+"
			|Накладная "+ShipmentNumber+" в статусе "+ВыборкаНаЗаказПокупателя[0].СтатусЗаказа+". Изменение запрещено, обратитесь к менеждеру.";
		КонецЕсли;
	ИначеЕсли  ВыборкаНаЗаказПокупателя.Количество() = 0 и ЗначениеЗаполнено(ShipmentNumber) Тогда	
		ОшибкаПриПоиске = Истина;
		ЗагрузкаУспешна = Ложь;
		ТекстОшибки = ТекстОшибки+"
		|Накладная "+ShipmentNumber+" не найдена. Обратитесь к менеждеру.";
	ИначеЕсли  ВыборкаНаЗаказПокупателя.Количество() = 0 Тогда 
		ОбЗП =  Документы.ЗаказПокупателя.СоздатьДокумент();
		ОбЗП.ES_ВхНакладная = ClientShipmentNumber;
		ОбЗП.Организация 	= ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Организация);
		ОбЗП.СтруктурнаяЕдиницаПродажи = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
		ОбЗП.Дата 			= ТекущаяДата();
		ОбЗП.ВидОперации  	= Перечисления.ВидыОперацийЗаказПокупателя.ES_ЗаказНаДоставку;
		ТекПользователь = Пользователи.ТекущийПользователь();
		ТекСотрудник  	= Справочники.Сотрудники.НайтиПоНаименованию(ТекПользователь.Наименование);
		ОбЗП.Ответственный = ТекСотрудник;
	Иначе
		ОшибкаПриПоиске = Истина;
		ЗагрузкаУспешна = Ложь;
		ТекстОшибки = ТекстОшибки+"
		|Найдено более одной накладной. Обратитесь к менеждеру.";
	КонецЕсли;
	
	Если Не ОшибкаПриПоиске Тогда
		
		Если ОбЗП.Организация.Пустая() Тогда
			ОбЗП.Организация 	= ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Организация);
		КонецЕсли;
				
		Recipient = Shipment.Получить("Recipient");//это проверялось
		
		КодВидаДоставки = СокрЛП(Sender.Получить("TypeDelivery"));
		ВидДоставки = ES_ОбщегоНазначения.ОпределитьВидДоставки(ES_ОбщегоНазначения.ПолучитьСтруктуруКодовВидовДоставки(),КодВидаДоставки,Ложь);
		Если ВидДоставки = Перечисления.ES_ВидыДоставки.ПустаяСсылка() ИЛИ ВидДоставки = Неопределено Тогда 
			ЗагрузкаУспешна = Ложь;
			ТекстОшибки = ТекстОшибки+"
			|Не определен вид доставки "+Строка(КодВидаДоставки)+".";
		КонецЕсли;
		ОбЗП.ES_ВидДоставки = ВидДоставки;
		
		КодСрочности	= СокрЛП(Sender.Получить("Urgent"));
		Срочность = ES_ОбщегоНазначения.ПолучитьСрочностьДоставки(КодСрочности);
		Если ВидДоставки = Перечисления.ES_ВидыДоставки.ПустаяСсылка() Тогда 
			ЗагрузкаУспешна = Ложь;
			ТекстОшибки = ТекстОшибки+"
			|Не определена срочность доставки с кодом - "+Строка(КодСрочности)+".";
		КонецЕсли;
		ОбЗП.ES_СрочностьДоставки = Срочность;
		
		ГородОтправитель = СокрЛП(Sender.Получить("City"));
		РегионОтправитель = СокрЛП(Sender.Получить("Region"));
		//ГородОтправитель = Справочники.ES_Города.НайтиПоНаименованию(СтрокаГородОтправитель);
		//Если ГородОтправитель = Справочники.ES_Города.ПустаяСсылка() Тогда
		//	ЗагрузкаУспешна = Ложь;
		//	ТекстОшибки = ТекстОшибки+"
		//	|Город не определен - "+Строка(СтрокаГородОтправитель)+". Проверьте правильность заполнения.";	
		//КонецЕсли;
		ОбЗП.ES_Город1 = ГородОтправитель;
		
		ГородПолучатель = СокрЛП(Recipient.Получить("City"));
		РегионПолучатель = СокрЛП(Recipient.Получить("Region"));
		//ГородПолучатель = Справочники.ES_Города.НайтиПоНаименованию(СтрокаГородПолучатель);
		//Если ГородПолучатель = Справочники.ES_Города.ПустаяСсылка() Тогда
		//	ЗагрузкаУспешна = Ложь;
		//	ТекстОшибки = ТекстОшибки+"
		//	|Город не определен - "+Строка(СтрокаГородПолучатель)+". Проверьте правильность заполнения.";	
		//КонецЕсли;
		ОбЗП.ES_АдресДоставкиГород = ГородПолучатель;
		
		мСтруктураНаправлений = ES_ОбщегоНазначения.ПолучитьНаправление(ГородОтправитель,ГородПолучатель,РегионОтправитель,РегионПолучатель); 
		Направление = мСтруктураНаправлений.Направление;
		ВнутризональныйКоэффициент = мСтруктураНаправлений.Коэффициент;
		Если Направление.Пустая() Тогда
			ЗагрузкаУспешна = Ложь;
			ТекстОшибки = ТекстОшибки+"
			|Направление не определено - "+Строка(""+ГородОтправитель+"+"+ГородПолучатель)+".";
		КонецЕсли;
		ОбЗП.ES_Направление = Направление;
		ОбЗП.ES_ВнутризональныйКоэф = ВнутризональныйКоэффициент;
		
		мЗонаДоставки = ES_ОбщегоНазначения.ОпределитьЗонуДоставки(Направление,Заказчик.ES_ВидКонтрагента,Срочность);
		ЗонаДоставки = мЗонаДоставки.Зона;
		Если ЗонаДоставки.Пустая() Тогда
			ЗагрузкаУспешна = Ложь;
			ТекстОшибки = ТекстОшибки+"
			|По направлению "+Направление+" доставка не выполняется.";
		КонецЕсли;
		
		СрокДоставки = мЗонаДоставки.СрокДоставки;
		ДниДоставки = 5;
		ИндексСтроки = Найти(СрокДоставки,"-");
		Если ИндексСтроки > 0 Тогда
			ДниДоставки = Прав(СрокДоставки,СтрДлина(СрокДоставки) - ИндексСтроки);
			Попытка
				ДниДоставки = Число(ДниДоставки);
			Исключение
				ДниДоставки = 5;
			КонецПопытки;
		КонецЕсли;
		
		Попытка
			ДниДоставки = Число(СрокДоставки);
		Исключение
			ДниДоставки = 5;
		КонецПопытки;
		
		ОбЗП.ES_ЗонаДоставки = ЗонаДоставки;
		ОбЗП.ES_СрокДоставки = мЗонаДоставки.СрокДоставки;
		ОбЗП.ДатаОтгрузки = ТекущаяДатаСеанса();
		
		//проверяем вид доставки.
		//Если Двери-Двери тогда нужно создать забор груза
		Если ВидДоставки = Перечисления.ES_ВидыДоставки.ДвериДвери Тогда
			DesiredDate      = СокрЛП(Sender.Получить("DesiredDate"));
			Попытка
				ОбЗП.ES_ЗаборДата   = Дата(DesiredDate);
			Исключение
				ЗагрузкаУспешна = Ложь;
				ТекстОшибки = ТекстОшибки+"
				|Не верный формат даты DesiredDate в блоке Sender. Формат - ггггммдд.";
			КонецПопытки;
			//ЭР Несторук С.И. 29.10.2018 10:46:25 {
			DesiredTimeFrom		= СокрЛП(Sender.Получить("DesiredTimeFrom"));
			Попытка
				ОбЗП.ES_ЗаборВремяС  = Дата("0001","01","01",Лев(DesiredTimeFrom,2),Прав(DesiredTimeFrom,2),"00");
			Исключение
				ЗагрузкаУспешна = Ложь;
				ТекстОшибки = ТекстОшибки+"
				|Не верный формат времени DesiredTimeFrom в блоке Sender. Формат - чч:мм";
			КонецПопытки;
			DesiredTimeTo		= СокрЛП(Sender.Получить("DesiredTimeTo"));
			Попытка
				ОбЗП.ES_ЗаборВремяПо  = Дата("0001","01","01",Лев(DesiredTimeTo,2),Прав(DesiredTimeTo,2),"00");
			Исключение
				ЗагрузкаУспешна = Ложь;
				ТекстОшибки = ТекстОшибки+"
				|Не верный формат времени DesiredTimeTo в блоке Sender. Формат - чч:мм";
			КонецПопытки;

			//}ЭР Несторук С.И.
			FullAddress         = СокрЛП(Sender.Получить("FullAddress"));
			FullAddress = ?(FullAddress=Неопределено,"",FullAddress);
			PostalCode          = СокрЛП(Sender.Получить("PostalCode"));
			PostalCode = ?(PostalCode=Неопределено,"",PostalCode);
			//ОбЗП.ES_Индекс = PostalCode;
			Region              = СокрЛП(Sender.Получить("Region"));
			Region = ?(Region=Неопределено,"",Region);
			//ОбЗП.ES_Область = Справочники.ES_Области.НайтиПоНаименованию(Region);
			City                = СокрЛП(Sender.Получить("City")); 
			City = ?(City=Неопределено,"",City);
			//Area                = СокрЛП(Sender.Получить("Area")); 
			//Area = ?(Area=Неопределено,"",Area);
			//Settlement          = СокрЛП(Sender.Получить("Settlement")); 
			//Settlement = ?(Settlement=Неопределено,"",Settlement);
			Street              = СокрЛП(Sender.Получить("Street"));
			Street = ?(Street=Неопределено,"",Street);
			House               = СокрЛП(Sender.Получить("House")); 
			House = ?(House=Неопределено,"",House);
			Building            = СокрЛП(Sender.Получить("Building"));
			Building = ?(Building=Неопределено,"",Building);
			Block               = СокрЛП(Sender.Получить("Block")); 
			Block = ?(Block=Неопределено,"",Block);
			Flat                = СокрЛП(Sender.Получить("Flat")); 
			Flat = ?(Flat=Неопределено,"",Flat);
			Name                = СокрЛП(Sender.Получить("Name")); 
			Name = ?(Name=Неопределено,"",Name);
			Phone                = СокрЛП(Sender.Получить("Phone")); 
			Phone = ?(Phone=Неопределено,"",Phone);
			Email               = СокрЛП(Sender.Получить("Email")); 
			Email = ?(Email=Неопределено,"",Email);
			
			ЗаборКомметарий     = СокрЛП(Sender.Получить("Comment")); 
			ЗаборКомметарий = ?(ЗаборКомметарий=Неопределено,"",ЗаборКомметарий);
			
			ОбЗП.ES_ЗаборОтправитель = Name;
			ОбЗП.ES_ЗаборКонтактноеЛицо = Name;
			ОбЗП.ES_ЗаборТелефон = Phone;
			ОбЗП.ES_ЗаборАдрес = FullAddress;
			ОбЗП.ES_ЗаборИндексОтправитель = PostalCode;
			ОбЗП.ES_ЗаборОбластьОтправитель = Region;
			ОбЗП.ES_Город1 = City;
			ОбЗП.ES_ЗаборАдресОтправитель = Street;
			ОбЗП.ES_АдресЗаборДом = House;
			ОбЗП.ES_АдресЗаборСтроение = Building;
			ОбЗП.ES_АдресЗаборКорпус = Block;
			ОбЗП.ES_АдресЗаборКвартира = Flat;
			ОбЗП.ES_ЗаборКомментарий =  ЗаборКомметарий; 
			
			мАдрес = "";
			мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(ОбЗП.ES_ЗаборИндексОтправитель)),СокрЛП(ОбЗП.ES_ЗаборИндексОтправитель)+", ","");
			мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(ОбЗП.ES_ЗаборОбластьОтправитель)),СокрЛП(ОбЗП.ES_ЗаборОбластьОтправитель)+", ","");
			мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(ОбЗП.ES_Город1)),СокрЛП(ОбЗП.ES_Город1)+", ","");
			мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(ОбЗП.ES_ЗаборАдресОтправитель)),СокрЛП(ОбЗП.ES_ЗаборАдресОтправитель)+" ул, ","");
			мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(ОбЗП.ES_АдресЗаборДом)),"дом № "+СокрЛП(ОбЗП.ES_АдресЗаборДом)+", ","");
			мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(ОбЗП.ES_АдресЗаборСтроение)),"строение "+СокрЛП(ОбЗП.ES_АдресЗаборСтроение)+", ","");
			мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(ОбЗП.ES_АдресЗаборКорпус)),"корпус "+СокрЛП(ОбЗП.ES_АдресЗаборКорпус)+", ","");
			мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(ОбЗП.ES_АдресЗаборКвартира)),"квартира "+СокрЛП(ОбЗП.ES_АдресЗаборКвартира)+", ","");
			
			ОбЗП.ES_ЗаборАдрес = ?(ЗначениеЗаполнено(FullAddress),FullAddress,мАдрес) ;
			
			//ЭР Несторук С.И. 29.10.2018 11:07:37 {
			//РасчетКоординатАдреса 
			Если ЗначениеЗаполнено(ОбЗП.ES_ЗаборАдрес) Тогда
				ЗаполнитьШиротуИДолготуПоАдресу(ОбЗП, "ES_ЗаборАдрес","ES_ЗаборАдресДолгота","ES_ЗаборАдресШирота","ES_ЗаборРегион");
			КонецЕсли;
			//}ЭР Несторук С.И.

		КонецЕсли;		
		
		ОбЗП.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ES_ЗаказНаДоставку;
		Weight = СокрЛП(Shipment.Получить("Weight")); //это проверялось
		Weight = СтрЗаменить(Weight,",","."); // Линукс не читает в формате x.x
		Weight = ?(Weight=Неопределено или Weight="",0,Число(Weight));
		
		Length = СокрЛП(Shipment.Получить("Length"));     //это проверялось
		Length = СтрЗаменить(Length,",","."); // Линукс не читает в формате x.x
		Length = ?(Length=Неопределено или Length="",0,Число(Length));
		
		Width  = СокрЛП(Shipment.Получить("Width"));       //это проверялось
		Width = СтрЗаменить(Width,",","."); // Линукс не читает в формате x.x
		Width = ?(Width=Неопределено или Width="",0,Число(Width));
		
		Height = СокрЛП(Shipment.Получить("Height"));     //это проверялось
		Height = СтрЗаменить(Height,",","."); // Линукс не читает в формате x.x
		Height = ?(Height=Неопределено или Height="",0,Число(Height));
		
		//ВидДоставки = СокрЛП(Shipment.Получить("Weight"));
		
		//EFSOL_Шаповал Олег Анатольевич 1 ноября 2017 г. 15:09:35 +
		//ОбЗП.ES_ОбщийВес 	= Число(Weight)/1000;
		ОбЗП.ES_ОбщийВес 	= Число(Weight);
		//EFSOL Шаповал О.А. -
		Коэффициент = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Коэффициент);
		ОбЗП.ES_Объем  		= Число(Length)*Число(Width)*Число(Height); 
		ОбЗП.ES_ОбщийОбъемныйВес = Окр(Число(Length)*Число(Width)*Число(Height)*100*100*100/(Коэффициент),3); 
		ОбЗП.Ширина			= Число(Width);
		ОбЗП.Длина			= Число(Length);
		ОбЗП.Высота			= Число(Height);
		
		
		Barcode          = СокрЛП(Shipment.Получить("Barcode"));
		Description      = СокрЛП(Shipment.Получить("Description"));
		Comment          = СокрЛП(Shipment.Получить("Comment"));
		DesiredDate      = СокрЛП(Shipment.Получить("DesiredDate"));
		DesiredTimeFrom  = СокрЛП(Shipment.Получить("DesiredTimeFrom"));
		DesiredTimeTo    = СокрЛП(Shipment.Получить("DesiredTimeTo"));
		
		CodePVZ			 = СокрЛП(Shipment.Получить("DeliveryPointNumber"));
		Если ЗначениеЗаполнено(CodePVZ) Тогда
			ОбЗП.ES_ПВЗ		 = Справочники.ES_ПунктыВыдачиЗаказов.НайтиПоКоду(CodePVZ);
		КонецЕсли;
		
		Если Comment<> Неопределено Тогда 
			ОбЗП.Комментарий =  Comment; 
		КонецЕсли;
		
		Если НЕ DesiredDate = "" Тогда
			Попытка
				ОбЗП.ES_ДатаДоставки     =  Дата(""+Лев(DesiredDate,4)+Прав(Лев(DesiredDate,6),2)+Прав(DesiredDate,2));
				ОбЗП.ES_ВремяДоставкиС   = Дата("0001","01","01",Лев(DesiredTimeFrom,2),Прав(DesiredTimeFrom,2),"00");
				ОбЗП.ES_ВремяДоставкиПо  =  Дата("0001","01","01",Лев(DesiredTimeTo,2),Прав(DesiredTimeTo,2),"00");
			Исключение
				ЗагрузкаУспешна = Ложь;
				ТекстОшибки = ТекстОшибки+"
				|Не верный формат даты/времени DesiredDate/DesiredTimeFrom/DesiredTimeTo в блоке Shipment. Формат даты/времени - ггггммдд/чч:мм.";
			КонецПопытки;
		Иначе
			ОбЗП.ES_ДатаДоставки     =  НачалоДня(ТекущаяДата() + ДниДоставки * 24 * 3600);
			ОбЗП.ES_ВремяДоставкиС   = Дата("0001","01","01","09","00","00");
			ОбЗП.ES_ВремяДоставкиПо  =  Дата("0001","01","01","17","00","00");
		КонецЕсли;
		
		Name = СокрЛП(Recipient.Получить("Name"));  //это проверялось
		Phone = СокрЛП(Recipient.Получить("Phone")); //это проверялось
		
		
		WithoutDelivery     = СокрЛП(Recipient.Получить("WithoutDelivery")); 
		WithoutDelivery = ?(WithoutDelivery=Неопределено,"",WithoutDelivery);
		
		CodeСклад			 = СокрЛП(Recipient.Получить("Terminal"));
		Если ЗначениеЗаполнено(CodeСклад) Тогда
			ОбЗП.ES_Терминал = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(CodeСклад);
		КонецЕсли;
		
		DeliveryPointNumber = СокрЛП(Recipient.Получить("DeliveryPointNumber")); 
		DeliveryPointNumber = ?(DeliveryPointNumber=Неопределено,"",DeliveryPointNumber);
		
		FullAddress         = СокрЛП(Recipient.Получить("FullAddress"));
		FullAddress = ?(FullAddress=Неопределено,"",FullAddress);
		PostalCode          = СокрЛП(Recipient.Получить("PostalCode"));
		PostalCode = ?(PostalCode=Неопределено,"",PostalCode);
		ОбЗП.ES_АдресДоставкиИндекс = PostalCode;
		Region              = СокрЛП(Recipient.Получить("Region"));
		Region = ?(Region=Неопределено,"",Region);
		ОбЗП.ES_АдресДоставкиОбласть = Region;
		City                = СокрЛП(Recipient.Получить("City")); 
		City = ?(City=Неопределено,"",City);
		ОбЗП.ES_АдресДоставкиГород = City;
		//Area                = СокрЛП(Recipient.Получить("Area")); 
		//Area = ?(Area=Неопределено,"",Area);
		//Settlement          = СокрЛП(Recipient.Получить("Settlement")); 
		//Settlement = ?(Settlement=Неопределено,"",Settlement);
		Street              = СокрЛП(Recipient.Получить("Street"));
		Street = ?(Street=Неопределено,"",Street);
		ОбЗП.ES_АдресДоставкиУлица = Street;
		House               = СокрЛП(Recipient.Получить("House")); 
		House = ?(House=Неопределено,"",House);
		ОбЗП.ES_АдресДоставкиДом = House;
		Building            = СокрЛП(Recipient.Получить("Building"));
		Building = ?(Building=Неопределено,"",Building);
		ОбЗП.ES_АдресДоставкиСтроение = Building;
		Block               = СокрЛП(Recipient.Получить("Block")); 
		Block = ?(Block=Неопределено,"",Block);
		ОбЗП.ES_АдресДоставкиКорпус = Block;
		Flat                = СокрЛП(Recipient.Получить("Flat")); 
		Flat = ?(Flat=Неопределено,"",Flat);
		ОбЗП.ES_АдресДоставкиКвартира = Flat;
		ОбЗП.ES_ИзКЛАДР = Ложь;
		
		CompanyName         = СокрЛП(Recipient.Получить("CompanyName")); 
		CompanyName = ?(CompanyName=Неопределено,"",CompanyName);
		AddPhone            = СокрЛП(Recipient.Получить("AddPhone"));
		AddPhone = ?(AddPhone=Неопределено,"",AddPhone);
		Phone2              = СокрЛП(Recipient.Получить("Phone2")); 
		Phone2 = ?(Phone2=Неопределено,"",Phone2);
		AddPhone2           = СокрЛП(Recipient.Получить("AddPhone2")); 
		AddPhone2 = ?(AddPhone2=Неопределено,"",AddPhone2);
		Email               = СокрЛП(Recipient.Получить("Email")); 
		Email = ?(Email=Неопределено,"",Email);
		
		мАдрес = "";
		мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(ОбЗП.ES_АдресДоставкиИндекс)),СокрЛП(ОбЗП.ES_АдресДоставкиИндекс)+", ","");
		мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(ОбЗП.ES_АдресДоставкиОбласть)),СокрЛП(ОбЗП.ES_АдресДоставкиОбласть)+", ","");
		мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(ОбЗП.ES_АдресДоставкиГород)),СокрЛП(ОбЗП.ES_АдресДоставкиГород)+", ","");
		мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(ОбЗП.ES_АдресДоставкиУлица)),СокрЛП(ОбЗП.ES_АдресДоставкиУлица)+" ул, ","");
		мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(ОбЗП.ES_АдресДоставкиДом)),"дом № "+СокрЛП(ОбЗП.ES_АдресДоставкиДом)+", ","");
		мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(ОбЗП.ES_АдресДоставкиСтроение)),"строение "+СокрЛП(ОбЗП.ES_АдресДоставкиСтроение)+", ","");
		мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(ОбЗП.ES_АдресДоставкиКорпус)),"корпус "+СокрЛП(ОбЗП.ES_АдресДоставкиКорпус)+", ","");
		мАдрес = мАдрес + ?(ЗначениеЗаполнено(СокрЛП(ОбЗП.ES_АдресДоставкиКвартира)),"квартира "+СокрЛП(ОбЗП.ES_АдресДоставкиКвартира)+", ","");
 
		
		ОбЗП.ES_АдресДоставки = ?(ЗначениеЗаполнено(FullAddress),FullAddress,мАдрес) ;
		//EFSOL_Сальник К.А. 2018-11-22 {+
		ЗаполнитьШиротуИДолготуПоАдресу(ОбЗП,"ES_АдресДоставки","ES_АдресДоставкиШирота","ES_АдресДоставкиДолгота","ES_ПолучательРегион");
		//EFSOL_Сальник К.А.  -}
		
		// ОбЗП. CompanyName
		AdditionalInfo  = Shipment.Получить("Recipient"); //Массив ,не обработывается   дополнительная информация к заказу
		
		ОбЗП.ES_КомментарийКурьера =  ОбЗП.ES_КомментарийКурьера  + " "+CompanyName+ " "+Phone2 + " "+AddPhone2 + " "+Email ; 
		ОбЗП.ES_ПолучательКонтактноеЛицо = Name;
		ОбЗП.ES_Получатель = ?(CompanyName <>"", CompanyName,Name);
		ОбЗП.ES_ПолучательТелефон = Phone;
		ОбЗП.ES_Плательщик = Перечисления.ES_ТипыПлательщиков.Получатель;
		//ОбЗП.ES_ВидДоставки = Перечисления.ES_ВидыДоставки.СкладДвери;
		//ОбЗП.ES_СрочностьДоставки = Перечисления.ES_СрочностьДоставки.Стандартная;
		ОбЗП.ES_СправочноЗаказчик   =   Заказчик;
		ОбЗП.Контрагент				=   Заказчик;
		//ОбЗП.СуммаВключаетНДС		= Ложь;
		Если ЗначениеЗаполнено(ICN) Тогда
			ЗапросДоговора = Новый Запрос("ВЫБРАТЬ
			                             |	ДоговорыКонтрагентов.Ссылка КАК Ссылка
			                             |ИЗ
			                             |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			                             |ГДЕ
			                             |	ДоговорыКонтрагентов.Владелец = &Владелец
			                             |	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
			                             |	И ДоговорыКонтрагентов.Код = &Код");
			ЗапросДоговора.УстановитьПараметр("Владелец",Заказчик);
			ЗапросДоговора.УстановитьПараметр("Код",ICN);
			ТЗДоговора = ЗапросДоговора.Выполнить().Выгрузить();
			Если ТЗДоговора.Количество() = 1 Тогда
				Договор  =  ТЗДоговора[0].Ссылка;
			Иначе
				ЗагрузкаУспешна = Ложь;
				ТекстОшибки = ТекстОшибки+"
				|Для клиента"+Заказчик+" не определен ICN - "+ICN+". Обратитесь к менеджеру.";
				Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			КонецЕсли;
		Иначе
			Договор = Заказчик.ДоговорПоУмолчанию;
		КонецЕсли;
		ОбЗП.Договор = Договор;
		ДанныеДоговора = ПолучитьДанныеДоговорПриИзменении(ОбЗП.Дата, ОбЗП.ВалютаДокумента, ОбЗП.Договор);
		
		ОбЗП.СуммаВключаетНДС = ДанныеДоговора.СуммаВключаетНДС;			
		ОбЗП.Курс      = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс);
		ОбЗП.Кратность = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность);
		ОбЗП.ВидЦен = ДанныеДоговора.ВидЦен;
		ОбЗП.ВалютаДокумента = ДанныеДоговора.ВалютаРасчетов;
		ОбЗП.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		
		//ЗапросКЛ = Новый Запрос("ВЫБРАТЬ
		//                       |	КонтактныеЛица.Ссылка КАК Ссылка
		//                       |ИЗ
		//                       |	Справочник.КонтактныеЛица КАК КонтактныеЛица
		//                       |ГДЕ
		//                       |	КонтактныеЛица.Владелец = &Владелец
		//                       |	И НЕ КонтактныеЛица.ПометкаУдаления");
		//ЗапросКЛ.УстановитьПараметр( "Владелец",Заказчик);
		//ВыборкаКЛ = ЗапросКЛ.Выполнить().Выбрать();
		//Пока ВыборкаКЛ.Следующий() Цикл 
			ОбЗП.ES_ЗаказчикКонтактноеЛицо  =  Заказчик.КонтактноеЛицо;
		//КонецЦикла;
		
		//заполним товары
		Items  = Shipment.Получить("Items");  // тут все проверялось 
		ОбЗП.ES_Грузы.Очистить();
		Для Каждого ст из Items Цикл 
			
			Article   = СокрЛП(ст.Получить("Article"));  //это проверялось
			//Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Article);
			//Если Номенклатура.Пустая() Тогда
			//	ЗагрузкаУспешна = Ложь;
			//	ТекстОшибки = ТекстОшибки+"
			//	|Номенклатура "+Строка(Article)+" не найдена.";
			//Иначе
			//	СТ_ES_Грузы = ОбЗП.ES_Грузы.Найти(Номенклатура,"Номенклатура");
			//	Если СТ_ES_Грузы = Неопределено Тогда
				СТ_ES_Грузы = ОбЗП.ES_Грузы.Добавить();
				//КонецЕсли;
				Name      = СокрЛП(ст.Получить("Name")); //это проверялось      не обрабатывается,
				Barcode   = СокрЛП(ст.Получить("Barcode")); //это проверялось   не обрабатывается,
				IsService = СокрЛП(ст.Получить("IsService")); //это проверялось  не обрабатывается, пока что всё товар
				Price     = СокрЛП(ст.Получить("Price")); //это проверялось
				Price = СтрЗаменить(Price,",","."); // Линукс не читает в формате x.x
				Price = ?(Price=Неопределено или Price="",0,Число(Price));
				
				Discount  = СокрЛП(ст.Получить("Discount")); //это проверялось    не обрабатывается,
				Count     = СокрЛП(ст.Получить("Count")); //это проверялось
				Count = СтрЗаменить(Count,",","."); // Линукс не читает в формате x.x
				Count = ?(Count=Неопределено или Count="",0,Число(Count));

				VATSum    = СокрЛП(ст.Получить("VATSum")); //это проверялось
				VATSum = СтрЗаменить(VATSum,",","."); // Линукс не читает в формате x.x
				VATSum = ?(VATSum=Неопределено или VATSum="",0,Число(VATSum));
				
				VAT       = СокрЛП(ст.Получить("VAT")); //это проверялось
				VAT = СтрЗаменить(VAT,",","."); // Линукс не читает в формате x.x
				VAT = ?(VAT=Неопределено или VAT="",0,Число(VAT));
				
				Weight    = СокрЛП(ст.Получить("Weight")); //это проверялось
				Weight = СтрЗаменить(Weight,",","."); // Линукс не читает в формате x.x
				Weight = ?(Weight=Неопределено или Weight="",0,Число(Weight));
				
				Length    = СокрЛП(ст.Получить("Length")); //это проверялось
				Length = СтрЗаменить(Length,",","."); // Линукс не читает в формате x.x
				Length = ?(Length=Неопределено или Length="",0,Число(Length));
				
				Width     = СокрЛП(ст.Получить("Width")); //это проверялось
				Width = СтрЗаменить(Width,",","."); // Линукс не читает в формате x.x
				Width = ?(Width=Неопределено или Width="",0,Число(Width));
				
				Height    = СокрЛП(ст.Получить("Height")); //это проверялось
				Height = СтрЗаменить(Height,",","."); // Линукс не читает в формате x.x
				Height = ?(Height=Неопределено или Height="",0,Число(Height));
				
				
				СТ_ES_Грузы.Номенклатура 	= Справочники.Номенклатура.Груз;
				СТ_ES_Грузы.Содержание		= Name;
				СТ_ES_Грузы.ЕдиницаИзмерения= СТ_ES_Грузы.Номенклатура.ЕдиницаИзмерения;//Справочники.ЕдиницыИзмерения.НайтиПоНаименованию("шт");
				СТ_ES_Грузы.Штрихкод		= Barcode;
				//СТ_ES_Грузы.Вес				= Номенклатура.Вес;
				//СТ_ES_Грузы.Объем			= Номенклатура.Объем;
				//СТ_ES_Грузы.ОбъемныйВес		= 0;
				СТ_ES_Грузы.СтавкаНДС		= Справочники.СтавкиНДС.НайтиПоНаименованию("18%");
				СТ_ES_Грузы.Артикул			= Article;
				СТ_ES_Грузы.Цена 			= Число(Price);
				СТ_ES_Грузы.Количество 		= Число(Count);
				СТ_ES_Грузы.СуммаНДС		= Число(VATSum);
				СТ_ES_Грузы.Вес 			= Число(Weight);
				СТ_ES_Грузы.Длина	 		= Число(Length);
				СТ_ES_Грузы.Ширина			= Число(Width);
				СТ_ES_Грузы.Высота			= Число(Height);
				
				СТ_ES_Грузы.ОбъемныйВес = ?(Коэффициент = 0,0, СТ_ES_Грузы.Ширина*СТ_ES_Грузы.Длина*СТ_ES_Грузы.Высота*(100*100*100)/Коэффициент);
				СТ_ES_Грузы.Объем = СТ_ES_Грузы.Ширина*СТ_ES_Грузы.Длина*СТ_ES_Грузы.Высота;///(100*100*100);
			//КонецЕсли;
			
		КонецЦикла;
		
		//EFSOL_Шаповал Олег Анатольевич 1 ноября 2017 г. 15:11:22 +
		//ОбЗП.ES_ОбщийВес 	= ?(ОбЗП.ES_ОбщийВес>0,ОбЗП.ES_ОбщийВес,ОбЗП.ES_Грузы.Итог("Вес"));
		//ОбЗП.ES_Объем  		= ?(ОбЗП.ES_Объем>0,ОбЗП.ES_Объем,ОбЗП.ES_Грузы.Итог("Объем"));
		//ОбЗП.ES_ОбщийОбъемныйВес = ?(ОбЗП.ES_ОбщийОбъемныйВес>0,ОбЗП.ES_ОбщийОбъемныйВес,ОбЗП.ES_Грузы.Итог("ОбъемныйВес"));	
		ОбЗП.ES_ОбщийВес 	= Макс(ОбЗП.ES_ОбщийВес,ОбЗП.ES_Грузы.Итог("Вес"));
		ОбЗП.ES_Объем  		= Макс(ОбЗП.ES_Объем,ОбЗП.ES_Грузы.Итог("Объем"));
		ОбЗП.ES_ОбщийОбъемныйВес = Макс(ОбЗП.ES_ОбщийОбъемныйВес,ОбЗП.ES_Грузы.Итог("ОбъемныйВес"));		
		//EFSOL Шаповал О.А. -		
		
		СтартНастройки = ES_ОбщегоНазначения.ПолучитьВсеСтартовыеНастройки();
		мУслуга = СтартНастройки.УслугаДоставки;
		ОбЗП.Запасы.Очистить();
		// добавляем услугу доставки
		Если мУслуга.Пустая() Тогда
			ЗагрузкаУспешна = Ложь;
			ТекстОшибки = ТекстОшибки+"
			|Система не смогла получить стоимость услуги доставки. Обратитесь к менеджеру";
		КонецЕсли;
		СТ_Поиска = ОбЗП.Запасы.Найти(мУслуга,"Номенклатура");
		Если Не СТ_Поиска = Неопределено Тогда
			СТ_Запасы = СТ_Поиска;
		Иначе
			СТ_Запасы = ОбЗП.Запасы.Добавить();
		КонецЕсли;
		
		мВес = ?(Договор.ES_РасчетТарифовОтМаксимальногоВеса, Макс(ОбЗП.ES_ОбщийВес,ОбЗП.ES_ОбщийОбъемныйВес),ОбЗП.ES_ОбщийВес);
		
		СтруктураВозврата = ES_ОбщегоНазначенияКлиентСервер.ЭР_ОбновитьСтоимостьДоставки(ОбЗП.Дата, Договор, ЗонаДоставки, мВес,  ОбЗП.ES_СрочностьДоставки,  ОбЗП.ES_ВидДоставки,Заказчик.ES_ВидКонтрагента);
		ЦенаДоставки = СтруктураВозврата.Цена*ВнутризональныйКоэффициент;
		СТ_Запасы.Номенклатура = мУслуга;
		СТ_Запасы.Количество = 1;
		СТ_Запасы.Цена = ЦенаДоставки;
		СТ_Запасы.СтавкаНДС = ES_ОбщегоНазначения.ПолучитьСтавкуНДСНоменклатуры(мУслуга);
		СТ_Запасы.ТипНоменклатурыЗапас = Ложь;
		СТ_Запасы.ДатаОтгрузки 	= ТекущаяДата();
		СТ_Запасы.Сумма = СТ_Запасы.Количество * СТ_Запасы.Цена;
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СТ_Запасы.СтавкаНДС);		
		СТ_Запасы.СуммаНДС = ?(ОбЗП.СуммаВключаетНДС, 
		СТ_Запасы.Сумма - (СТ_Запасы.Сумма) / ((СтавкаНДС + 100) / 100),
		СТ_Запасы.Сумма * СтавкаНДС / 100);		
		СТ_Запасы.Всего = СТ_Запасы.Сумма + ?(ОбЗП.СуммаВключаетНДС, 0, СТ_Запасы.СуммаНДС);					
		
		// заполняем товары
				
		COD = Shipment.Получить("COD");
		COD = СтрЗаменить(COD,",","."); // Линукс не читает в формате x.x
		COD = ?(COD=Неопределено или COD="",0,Число(COD));
		//Если ЗначениеЗаполнено(COD) Тогда
		//	COD = Число(COD);
		//Иначе
		//	COD = 0;
		//КонецЕсли;
				
		Amount = Shipment.Получить("Amount");
		Amount = СтрЗаменить(Amount,",","."); // Линукс не читает в формате x.x
		Amount = ?(Amount=Неопределено или Amount="",0,Число(Amount));
		//Если ЗначениеЗаполнено(Amount) Тогда
		//	Amount = Число(Amount);
		//Иначе
		//	Amount = 0;
		//КонецЕсли;
		
		ОбЗП.ES_НППлан = COD;
		ОбЗП.ES_ОбьявленнаяСтоимость = Amount;
		
		//ДопУслуги
		Services = Shipment.Получить("Services"); // не обработывается
		Таб = Новый ТаблицаЗначений;
		Таб.Колонки.Добавить("Номенклатура");
		Таб.Колонки.Добавить("Количество");
		Таб.Колонки.Добавить("Цена");
		
		Если COD > 0 Тогда
			//Стр = Таб.Добавить();
			//Стр.Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул","1001");
			//Стр.Количество = 1;
			//Стр.Цена = 0;
		КонецЕсли;
		
		Для а=0 По Services.Количество()-1 Цикл
			Если НЕ ТипЗнч(Services[а]) = Тип("Соответствие") Тогда
				ЗагрузкаУспешна = Ложь;
				ТекстОшибки = ТекстОшибки+"
				|Элементом массива Services должна быть структура.";
				Прервать;
			ИНаче
				
				Артикул = Services[а].Получить("code");
				Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
				Количество = Services[а].Получить("count");
				Если НЕ ЗначениеЗаполнено(Количество) Тогда
					Количество = 0;
				КонецЕсли;
				Если Номенклатура.Пустая() Тогда
					ЗагрузкаУспешна = Ложь;
					ТекстОшибки = ТекстОшибки+"
					|Не найдена услуга, артикул("+Строка(Артикул)+").";
				Иначе
					//мОбъект = РеквизитФормыВЗначение("Объект"); 
					Стр = Таб.Добавить();
					Стр.Номенклатура = Номенклатура;
					Стр.Количество = ?(Число(Количество)=0,1,Число(Количество));
					Стр.Цена = 0;				
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// позднее время
		Если Константы.ES_ПозднееВремя.Получить() <= ОбЗП.ES_ВремяДоставкиПо Тогда
			Артикул = "1016";
			Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);      	                                    
			
			СТ_Поиска = Таб.Найти(Номенклатура,"Номенклатура");
			Если СТ_Поиска = Неопределено Тогда
				Стр = Таб.Добавить();
				Стр.Номенклатура = Номенклатура;
				Стр.Количество = 1;
				Стр.Цена = 0;
			КонецЕсли;	
		КонецЕсли;
		
		// объявленная стоимость
		Если ОбЗП.ES_ОбьявленнаяСтоимость > 0 Тогда
			Артикул = "1002";
			Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);      	                                    
			
			СТ_Поиска = Таб.Найти(Номенклатура,"Номенклатура");
			Если СТ_Поиска = Неопределено Тогда
				Стр = Таб.Добавить();
				Стр.Номенклатура = Номенклатура;
				Стр.Количество = 1;
				Стр.Цена = 0;
			КонецЕсли;	
		КонецЕсли;
		
		// доставка выходного дня
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеПроизводственногоКалендаря.ВидДня
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.Дата = &Дата
		|	И ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь";
		
		Запрос.УстановитьПараметр("Дата", ОбЗП.ES_ДатаДоставки);
		Запрос.УстановитьПараметр("ПроизводственныйКалендарь", Справочники.ПроизводственныеКалендари.НайтиПоКоду("РФ"));
		
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		ВидДня = ВыборкаДетальныеЗаписи.ВидДня;
		Если НЕ ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий Тогда
			Артикул = "1017";
			Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
			
			СТ_Поиска = Таб.Найти(Номенклатура,"Номенклатура");
			Если СТ_Поиска = Неопределено Тогда
				Стр = Таб.Добавить();
				Стр.Номенклатура = Номенклатура;
				Стр.Количество = 1;
				Стр.Цена = 0;
			КонецЕсли;
		КонецЕсли;
		
		// Услуги из договора
		Если Не Договор.Пустая()Тогда
			Если НЕ Договор.ES_УчетПриРасчетеЦенТК Тогда
				Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			Иначе
				// добавим услуги из договора
				Для Каждого СТ_УслугаДоговора Из Договор.Услуги Цикл
					СТ_Поиска = Таб.Найти(СТ_УслугаДоговора.Номенклатура,"Номенклатура");
					Если СТ_Поиска = Неопределено Тогда
						Стр = Таб.Добавить();
						Стр.Номенклатура = СТ_Поиска.Номенклатура;
						Стр.Количество = 1;
						Стр.Цена = 0;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Ответ = ES_ОбщегоНазначенияКлиентСервер.ЭР_ОбновитьУслугиТЧДоставки(Таб,ТекущаяДата(),Договор,ЦенаДоставки, ОбЗП.ES_ОбьявленнаяСтоимость,ОбЗП.ES_НППлан, ОбЗП.ES_ОбщийВес);
		
		Для Каждого СТ_Таб Из Таб Цикл
			Если СТ_Таб.Цена = 0 Тогда
				//ЗагрузкаУспешна = Ложь;
				//ТекстОшибки = ТекстОшибки+"
				//|Нет возможности определить стоимость услуги, артикул("+Строка(Артикул)+").";
				ОбЗП.ES_ДоУточнения = Истина;
			КонецЕсли;
			СТ_Запасы = ОбЗП.Запасы.Добавить();
			СТ_Запасы.Номенклатура = СТ_Таб.Номенклатура;
			СТ_Запасы.Количество = СТ_Таб.Количество;
			СТ_Запасы.Цена = СТ_Таб.Цена;
			СТ_Запасы.СтавкаНДС = ES_ОбщегоНазначения.ПолучитьСтавкуНДСНоменклатуры(СТ_Таб.Номенклатура);
			СТ_Запасы.ТипНоменклатурыЗапас = Ложь;
			СТ_Запасы.ДатаОтгрузки 	= ТекущаяДата();
			СТ_Запасы.Сумма = СТ_Запасы.Количество * СТ_Запасы.Цена;
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СТ_Запасы.СтавкаНДС);
			
			СТ_Запасы.СуммаНДС = ?(ОбЗП.СуммаВключаетНДС, 
			СТ_Запасы.Сумма - (СТ_Запасы.Сумма) / ((СтавкаНДС + 100) / 100),
			СТ_Запасы.Сумма * СтавкаНДС / 100);
			
			СТ_Запасы.Всего = СТ_Запасы.Сумма + ?(ОбЗП.СуммаВключаетНДС, 0, СТ_Запасы.СуммаНДС);
		КонецЦикла;
		
		Если ЗагрузкаУспешна Тогда 
			Попытка
				ОбЗП.Записать(РежимЗаписиДокумента.Проведение);
				ShipmentNumber =  ОбЗП.ES_НомерНакладной;
			Исключение
				ОбЗП.Записать(РежимЗаписиДокумента.Запись);
				ЗагрузкаУспешна = Ложь;
				ТекстОшибки = ТекстОшибки+"
				|Заказ №"+Строка(ClientShipmentNumber)+" записан с ошибками. Обратитесь к Вашему персональному менеджеру."+ОписаниеОшибки();
				
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	СоответсвиеОтвета.Вставить("ЗагрузкаУспешна",ЗагрузкаУспешна);
	СоответсвиеОтвета.Вставить("ШК","");
	СоответсвиеОтвета.Вставить("ClientShipmentNumber",ClientShipmentNumber);
	СоответсвиеОтвета.Вставить("ShipmentNumber",ShipmentNumber);
	СоответсвиеОтвета.Вставить("ТекстОтвета",ТекстОшибки);
	
	Возврат  СоответсвиеОтвета;

КонецФункции

Функция ПолучитьДанныеДоговорПриИзменении(Дата, ВалютаДокумента, Договор)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
	"ВалютаРасчетов",
	Договор.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
	"ВалютаРасчетовКурсКратность",
	РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
	"ВидЦен",
	Договор.ВидЦен
	);
	
	СтруктураДанные.Вставить(
	"ВидСкидкиНаценки",
	Договор.ВидСкидкиНаценки
	);
	
	СтруктураДанные.Вставить(
	"РасчетыВУсловныхЕдиницах",
	Договор.РасчетыВУсловныхЕдиницах
	);
	
	СтруктураДанные.Вставить(
	"СуммаВключаетНДС",
	?(ЗначениеЗаполнено(Договор.ВидЦен), Договор.ВидЦен.ЦенаВключаетНДС, Неопределено)
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()



#Область МЕТОДЫ_РЕГИСТРАЦИИ_В_ЛК

//сохраняет данные регистрации в новую карточку контрагента
//
Функция СохранитьРегистрациюКлиента(Запрос) Экспорт	
	//EFSOL_Шаповал Олег Анатольевич 16 августа 2017 г. 9:58:44 +
	Ответ = Новый HTTPСервисОтвет(200);
	ТаблицаЗначенийОтвета  = Новый ТаблицаЗначений();
	ТаблицаЗначенийОтвета.Колонки.Добавить("ClientID");
	ТаблицаЗначенийОтвета.Колонки.Добавить("ICN");
	СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
	СТ_Доб.ClientID = "";
	СТ_Доб.ICN		= "";
	
	SessionId = ПолучитьIDСесси(Запрос);
	
	ЭтоРегистрация = Ложь;
	
	// для регистрации клиента не нужна сессия
	Если Не ЗначениеЗаполнено(SessionId) Тогда
		ЭтоРегистрация = Истина;
	КонецЕсли;
	
	//проверить на SessionId !!!
	ЗапросСесии = новый Запрос("ВЫБРАТЬ
						|	NS_СессииЛК.id,
						|	NS_СессииЛК.Начата,
						|	NS_СессииЛК.Истекает,
						|	NS_СессииЛК.Контрагент,
						|	NS_СессииЛК.ЗакрытаСамостоятельно
						|ИЗ
						|	РегистрСведений.NS_СессииЛК КАК NS_СессииЛК
						|ГДЕ
						|	NS_СессииЛК.id = &id
						|	И NS_СессииЛК.Истекает >=&ДатаТек
						|	И NS_СессииЛК.Начата <= &ДатаТек
						|	И НЕ NS_СессииЛК.ЗакрытаСамостоятельно");
	
	ЗапросСесии.УстановитьПараметр("id",СокрЛП(SessionId));
	ЗапросСесии.УстановитьПараметр("ДатаТек",ТекущаяДата());
	
	Выборка = ЗапросСесии.Выполнить().Выгрузить();
	Если Выборка.Количество()= 0 и НЕ ЭтоРегистрация Тогда 
		СообщениеОшибки=  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"SaveCustomerRegistration",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	
	ИначеЕсли   Выборка.Количество()= 1 или ЭтоРегистрация Тогда
		
		ТекТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
		ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
		ОтветJSON =  ОбработкаJSON.UnJSON(ТекТекстЗапроса);
		
		ОтветНаПроверкуСтруктурыSaveCustomerRegistration = ПроверитьСтруктуруВходаSaveCustomerRegistration(ОтветJSON);
		ПрошлаПроверку = ОтветНаПроверкуСтруктурыSaveCustomerRegistration.Получить("ПрошлаПроверку") ;
		Если ПрошлаПроверку Тогда 
			
			//Надо создать элемент справочника "Контрагент"
			ОтветОбработки = ОбработатьРегистрациюКлиента(ОтветJSON);
			//
			ЗагрузкаУспешна = ОтветОбработки.Получить("ЗагрузкаУспешна") ;
			ClientID        = ОтветОбработки.Получить("ClientID") ;
			ICN		        = ОтветОбработки.Получить("ICN") ;
			КодОшибки 		= ОтветОбработки.Получить("КодОшибки");
			ТекстОтвета     =  ОтветОбработки.Получить("ТекстОтвета") ;
			//
			ОшибкаВОтвете = Не ЗагрузкаУспешна;
			//
			ТаблицаЗначенийОтвета.Очистить();
			СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
			СТ_Доб.ClientID = ClientID;
			СТ_Доб.ICN = ICN;
			
			СообщениеОтветЗаписи =  ОписаниеОтветаСгенерить(ТекстОтвета,ОшибкаВОтвете,"SaveCustomerRegistration",ТаблицаЗначенийОтвета,КодОшибки);
			Ответ.УстановитьТелоИзСтроки(СообщениеОтветЗаписи);

		Иначе
			ТекстТек =  ОтветНаПроверкуСтруктурыSaveCustomerRegistration.Получить("ТекстОшибки") ;
			СообщениеОшибки=  ОписаниеОтветаСгенерить(ТекстТек,Истина,"SaveCustomerRegistration",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
		КонецЕсли;
	Иначе 
		СообщениеОшибки=  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"SaveCustomerRegistration",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	КонецЕсли;
	
	Возврат Ответ;

	//EFSOL Шаповал О.А. -	
КонецФункции

Функция ПроверитьСтруктуруВходаSaveCustomerRegistration(ОтветJSON_Соответствие)
	//EFSOL_Шаповал Олег Анатольевич 16 августа 2017 г. 13:00:15 +
	ТекстОшибки = "";
	СоответствиеПроверки = Новый Соответствие;
	
	Если ТипЗнч(ОтветJSON_Соответствие) = Тип("Соответствие") Тогда 
		//{
		//“ICN”:		“<индивидуальный номер клиента>”,
		//"Login"       "<логин авторизации АПИ>"
		//"Password"    "<пароль авторизации АПИ>"
		//“ClientID“:	“<ИД клиента в 1С>”,
		//"CompanyName":"<название компании>" , обязательное поле
		//“Name“: 		“<Контактное лицо>”, обязательное поле,
		//“Phone“: 		“<Контактный телефон>”, обязательное поле,
		//“Email”:		“<Контактный email>” , обязательное поле,
		//“City“: 		“<Город>”, обязательное поле,
		//“ZAO”:		“<Форма юр. лица ЗАО/ИП>” , обязательное поле,// формат true/false
		//“BasicInformationCard“				“<Карточка учера основных сведений>”, //формат двоичные данные
		//“CertificateStateRegistration“: 		“<свидетельство о государственной регистрации юр. лица>”,//формат двоичные данные
		//“CertificateTax“:						“<свидетельство о постановке на учет в налоговом органе>”,//формат двоичные данные
		//“CertificateManagers”: 				“<решение собрания учредителей о назначении руководителя>”,//формат двоичные данные
		//“Charter“:							“<устав>”,//формат двоичные данные
		//“EGRUL”: 								“<выписка ЕГРЮЛ>”,//формат двоичные данные
		//	}
		
		ICN 			= ОтветJSON_Соответствие.Получить("ICN");
		ClientID 		= ОтветJSON_Соответствие.Получить("ClientID");
		
		Login 			= ОтветJSON_Соответствие.Получить("Login");
		Password 		= ОтветJSON_Соответствие.Получить("Password");
		
		CompanyName 	= ОтветJSON_Соответствие.Получить("CompanyName");
		Name 			= ОтветJSON_Соответствие.Получить("Name");
		Phone 			= ОтветJSON_Соответствие.Получить("Phone");
		Email 			= ОтветJSON_Соответствие.Получить("Email");
		City 			= ОтветJSON_Соответствие.Получить("City");
		ZAO 			= ОтветJSON_Соответствие.Получить("ZAO");
		
		ТекстОшибки = ПроверитьНаЗаполениеИТип(Login,Тип("Строка"),ТекстОшибки,"Login");
		ТекстОшибки = ПроверитьНаЗаполениеИТип(Password,Тип("Строка"),ТекстОшибки,"Password");
		
		ТекстОшибки = ПроверитьНаЗаполениеИТип(CompanyName,Тип("Строка"),ТекстОшибки,"CompanyName");
		ТекстОшибки = ПроверитьНаЗаполениеИТип(Name,Тип("Строка"),ТекстОшибки,"Name");
		ТекстОшибки = ПроверитьНаЗаполениеИТип(Phone,Тип("Строка"),ТекстОшибки,"Phone");
		ТекстОшибки = ПроверитьНаЗаполениеИТип(Email,Тип("Строка"),ТекстОшибки,"Email");
		ТекстОшибки = ПроверитьНаЗаполениеИТип(City,Тип("Строка"),ТекстОшибки,"City");
		ТекстОшибки = ПроверитьНаЗаполениеИТип(ZAO,Тип("Строка"),ТекстОшибки,"ZAO");
		
		Если ICN = Неопределено Тогда 
			ТекстОшибки = ТекстОшибки +"
			|Структура не соответствует. Нет JSON ICN."; 
		КонецЕсли;
		
		Если ClientID = Неопределено Тогда 
			ТекстОшибки = ТекстОшибки +"
			|Структура не соответствует. Нет JSON ClientID."; 
		КонецЕсли;
		
		//BasicInformationCard = ОтветJSON_Соответствие.Получить("BasicInformationCard"); 
		//Если ТипЗнч(BasicInformationCard)<> Тип("ДвоичныеДанные") Тогда 
		//	
		//	ТекстОшибки = ТекстОшибки +"
		//	|Структура не соответствует тип BasicInformationCard или отсутствует."; 
		//КонецЕсли;
	иначе
		ТекстОшибки = "Структура не соответствует. Необходимо проверить текст вызова.";
	КонецЕсли;
	
	СоответствиеПроверки.Вставить("ТекстОшибки",ТекстОшибки);
	
	Если ТекстОшибки = "" Тогда 
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Истина);
	Иначе
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Ложь);
	КонецЕсли;
	
	Возврат  СоответствиеПроверки;
	//EFSOL Шаповал О.А. -	
КонецФункции

Функция ОбработатьРегистрациюКлиента(ОтветJSON_Соответствие)
	//EFSOL_Шаповал Олег Анатольевич 16 августа 2017 г. 13:00:24 +
	
	ТекПользователь = Пользователи.ТекущийПользователь();
	ТекСотрудник  	= Справочники.Сотрудники.НайтиПоНаименованию(ТекПользователь.Наименование);
	
	ТекстОшибки = "";
	КодОшибки = "";
	ЗагрузкаУспешна = Истина;
	мДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	СоответсвиеОтвета = Новый Соответствие;
	
	ClientID 		= ОтветJSON_Соответствие.Получить("ClientID");
	
	Login		 	= ОтветJSON_Соответствие.Получить("Login");
	Password 		= ОтветJSON_Соответствие.Получить("Password");
	
	// проверим нет ли уже зарегистрированного пользователя с такими учетными данными
	Если НЕ ЗначениеЗаполнено(ClientID) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	NS_APIАвторизация.Контрагент
		               |ИЗ
		               |	РегистрСведений.NS_APIАвторизация КАК NS_APIАвторизация
		               |ГДЕ
		               |	NS_APIАвторизация.Логин = &Логин";
		Запрос.УстановитьПараметр("Логин",Login);
		//Запрос.УстановитьПараметр("Пароль",Password);
		ТЗ_ЛК = Запрос.Выполнить().Выгрузить();
		Если ТЗ_ЛК.Количество() > 0 Тогда 
			ЗагрузкаУспешна = Ложь;
			ТекстОшибки = ТекстОшибки+"
			|Пользователь с такими учетными данными уже зарегистрирован. Введите новый логин.";
			КодОшибки = 2;
		КонецЕсли;
	КонецЕсли;

	Если ЗагрузкаУспешна Тогда
		Если ЗначениеЗаполнено(ClientID) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Код = &Код";
			Запрос.УстановитьПараметр("Код",ClientID);
			ТЗ = Запрос.Выполнить().Выгрузить();
		Иначе
			ТЗ = Новый ТаблицаЗначений;
		КонецЕсли;	
		
		Если ТЗ.Количество() = 0 Тогда
			Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
			Контрагент.Ответственный = ТекСотрудник;
		ИначеЕсли ТЗ.Количество() = 1 Тогда
			Контрагент = ТЗ[0].Ссылка.ПолучитьОбъект();
		Иначе
			ЗагрузкаУспешна = Ложь;
			ТекстОшибки = ТекстОшибки+"
			|Не найден id контрагента. Обратитесь к менеждеру.";
		КонецЕсли;
		
		Если ЗагрузкаУспешна Тогда
			
			// получаем параметры
			ICN 			= ОтветJSON_Соответствие.Получить("ICN");
			
			CompanyName 	= ОтветJSON_Соответствие.Получить("CompanyName");
			Name 			= ОтветJSON_Соответствие.Получить("Name");
			Phone 			= ОтветJSON_Соответствие.Получить("Phone");
			Email 			= ОтветJSON_Соответствие.Получить("Email");
			City 			= ОтветJSON_Соответствие.Получить("City");
			ZAO 			= ОтветJSON_Соответствие.Получить("ZAO");
			
			Контрагент.Наименование 		= CompanyName;
			Контрагент.НаименованиеПолное 	= CompanyName;
			Контрагент.ВидКонтрагента 		= ?(ZAO = "true",Перечисления.ВидыКонтрагентов.ЮридическоеЛицо,Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель);
			//Контрагент.ВидКонтрагента 		= Перечисления.ES_ВидКонтрагента.В2В;
			Контрагент.ФИО 					= Name;
			Контрагент.НомерТелефона 		= Phone;
			Контрагент.Покупатель			= Истина;
			Контрагент.ВестиРасчетыПоДоговорам = Истина;
			Контрагент.ES_ВидКонтрагента	= Перечисления.ES_ВидКонтрагента.В2В;
			
			Попытка
				Контрагент.Записать();		
				ClientID = Контрагент.Код;
			Исключение
				ЗагрузкаУспешна = Ложь;
				ТекстОшибки = ТекстОшибки+"
				|Не удалось создать карточку контрагента. Обратитесь к менеждеру.
				|"+ОписаниеОшибки();
			КонецПопытки;
			
			Если ЗагрузкаУспешна Тогда
				//заполняем контактную информацию
				Если ЗначениеЗаполнено(Контрагент.КонтактноеЛицо) Тогда 
					мКЛ = Контрагент.КонтактноеЛицо.ПолучитьОбъект();
				Иначе
					мКЛ = Справочники.КонтактныеЛица.СоздатьЭлемент();
					мКЛ.Ответственный = ТекСотрудник;
				КонецЕсли;
				мКЛ.Владелец = Контрагент.Ссылка;
				мКЛ.Наименование = Name;
				КонтИнфо = мКЛ.КонтактнаяИнформация;
				КонтИнфо.Очистить();
				НоваяСтрока 				= КонтИнфо.Добавить();
				НоваяСтрока.Тип 			= Перечисления.ТипыКонтактнойИнформации.Телефон;
				НоваяСтрока.Вид 			= Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
				НоваяСтрока.НомерТелефона 	= Phone;
				НоваяСтрока.Представление 	= Phone;
				
				НоваяСтрока 				= КонтИнфо.Добавить();
				НоваяСтрока.Тип 			= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				НоваяСтрока.Вид 			= Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
				НоваяСтрока.АдресЭП		 	= Email;
				НоваяСтрока.Представление	= Email;
				
				НоваяСтрока 				= КонтИнфо.Добавить();
				НоваяСтрока.Тип 			= Перечисления.ТипыКонтактнойИнформации.Адрес;
				НоваяСтрока.Вид 			= Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета;
				НоваяСтрока.Город		 	= City;
				НоваяСтрока.Представление 	= City;
				
				мКЛ.Записать();
				
				// инфо о организации
				мКонтактыОрганизации = Контрагент.КонтактнаяИнформация;
				мКонтактыОрганизации.Очистить();
				НоваяСтрока 				= мКонтактыОрганизации.Добавить();
				НоваяСтрока.Тип 			= Перечисления.ТипыКонтактнойИнформации.Телефон;
				НоваяСтрока.Вид 			= ?(ZAO = "true",Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица);
				НоваяСтрока.НомерТелефона 	= Phone;
				НоваяСтрока.Представление 	= Phone;
				
				НоваяСтрока 				= мКонтактыОрганизации.Добавить();
				НоваяСтрока.Тип 			= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				НоваяСтрока.Вид 			= ?(ZAO = "true",Справочники.ВидыКонтактнойИнформации.EmailКонтрагента,Справочники.ВидыКонтактнойИнформации.EmailФизическиеЛица);
				НоваяСтрока.АдресЭП		 	= Email;
				НоваяСтрока.Представление	= Email;
				
				НоваяСтрока 				= мКонтактыОрганизации.Добавить();
				НоваяСтрока.Тип 			= Перечисления.ТипыКонтактнойИнформации.Адрес;
				НоваяСтрока.Вид 			= Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета;
				НоваяСтрока.Город		 	= City;
				НоваяСтрока.Представление 	= City;
				
				
				Контрагент.КонтактноеЛицо = мКЛ.Ссылка;
				Контрагент.Записать();
				
				// добавим договор
				Если Не ЗначениеЗаполнено(ICN) Тогда
					// ЕФСОЛ Сережко А.С. 24.01.18
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ДоговорыКонтрагентов.Код КАК Код,
					|	ДоговорыКонтрагентов.Наименование КАК Наименование,
					|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
					|ГДЕ
					|	ДоговорыКонтрагентов.Владелец = &Контрагент";
					
					Запрос.УстановитьПараметр("Контрагент", Контрагент);   					
					РезультатЗапроса = Запрос.Выполнить().Выгрузить(); 
					
					Если РезультатЗапроса.Количество() = 0 Тогда  					
					
						мДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
						мДоговор.Наименование = "Основной договор";
						мДоговор.Владелец = Контрагент.Ссылка;
						мДоговор.ES_РасчетТарифовОтМаксимальногоВеса = Истина;
						мДоговор.ES_УчетПриРасчетеЦенТК = Истина;
						мДоговор.Организация = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Организация);
						мДоговор.Записать();
						мДоговор.Наименование = "Основной договор("+мДоговор.Код+")";
						//мДоговор.ES_ = "Основной договор("+мДоговор.Код+")";
						мДоговор.Записать();
						Контрагент.ДоговорПоУмолчанию = мДоговор.Ссылка;
						Контрагент.Записать();
					КонецЕсли;
				КонецЕсли;
				
				// добавим запись в РС APIАвторизация
				//Если Не ЗначениеЗаполнено(ClientID) Тогда
				НаборЗаписей = РегистрыСведений.NS_APIАвторизация.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Контрагент.Установить(Контрагент.Ссылка);
				НаборЗаписей.Прочитать();
				НаборЗаписей.Очистить();
				
				НоваяСтрокаНЗ = НаборЗаписей.Добавить();
				НоваяСтрокаНЗ.Контрагент 	= Контрагент.Ссылка;
				НоваяСтрокаНЗ.Логин			= СокрЛП(Login);
				НоваяСтрокаНЗ.Пароль		= СокрЛП(Password);
				НаборЗаписей.Записать();
				//КонецЕсли;
				//заполняем файлы
				Попытка
					BasicInformationCard = ОтветJSON_Соответствие.Получить("BasicInformationCard");
					Если НЕ BasicInformationCard = "" И НЕ BasicInformationCard = Неопределено Тогда
						ДобавитьИзменитьФайл(Контрагент,"Карточка учета основных сведений",BasicInformationCard);
					КонецЕсли;
					
					CertificateStateRegistration = ОтветJSON_Соответствие.Получить("CertificateStateRegistration");
					Если НЕ CertificateStateRegistration = "" И НЕ CertificateStateRegistration = Неопределено Тогда
						ДобавитьИзменитьФайл(Контрагент,"Свидетельство о государственной регистрации юр. лица",CertificateStateRegistration);
					КонецЕсли;
					
					CertificateTax = ОтветJSON_Соответствие.Получить("CertificateTax");
					Если НЕ CertificateTax = "" И НЕ CertificateTax = Неопределено Тогда
						ДобавитьИзменитьФайл(Контрагент,"Свидетельство о постановке на учет в налоговом органе",CertificateTax);
					КонецЕсли;
					
					CertificateManagers = ОтветJSON_Соответствие.Получить("CertificateManagers");
					Если НЕ CertificateManagers = "" И НЕ CertificateManagers = Неопределено Тогда
						ДобавитьИзменитьФайл(Контрагент,"Решение собрания учредителей о назначении руководителя",CertificateManagers);
					КонецЕсли;
					
					Charter = ОтветJSON_Соответствие.Получить("Charter");
					Если НЕ Charter = "" И НЕ Charter = Неопределено Тогда
						ДобавитьИзменитьФайл(Контрагент,"Устав",Charter);
					КонецЕсли;
					
					EGRUL = ОтветJSON_Соответствие.Получить("EGRUL");
					Если НЕ EGRUL = "" И НЕ EGRUL = Неопределено Тогда
						ДобавитьИзменитьФайл(Контрагент,"Выписка ЕГРЮЛ",EGRUL);
					КонецЕсли;
				Исключение
					ТекстОшибки = ТекстОшибки+"
					|Не удалось загрузить документы. Обратитесь к менеждеру.
					|"+ОписаниеОшибки();
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	СоответсвиеОтвета.Вставить("ЗагрузкаУспешна",ЗагрузкаУспешна);
	СоответсвиеОтвета.Вставить("ClientID",ClientID);
	СоответсвиеОтвета.Вставить("КодОшибки",КодОшибки);
	СоответсвиеОтвета.Вставить("ICN",мДоговор.Код);
	СоответсвиеОтвета.Вставить("ТекстОтвета",ТекстОшибки);
	
	Возврат  СоответсвиеОтвета;
	//EFSOL Шаповал О.А. -	
КонецФункции

Процедура ДобавитьИзменитьФайл(Владелец,ИмяФайла,ДвоичныеДанные) Экспорт
	//EFSOL_Шаповал Олег Анатольевич 16 августа 2017 г. 16:49:27 +
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	//               |	Файлы.Ссылка
	//               |ИЗ
	//               |	Справочник.Файлы КАК Файлы
	//               |ГДЕ
	//               |	Файлы.ВладелецФайла = &ВладелецФайла
	//               |	И Файлы.Наименование = &Наименование";
	//Запрос.УстановитьПараметр("ВладелецФайла",Владелец);
	//Запрос.УстановитьПараметр("Наименование",ИмяФайла);
	//
	//ТЗ = Запрос.Выполнить().Выгрузить();
	//
	//Если ТЗ.Количество() = 0 Тогда
	//	Файл = Справочники.Файлы.СоздатьЭлемент();
	//Иначе
	//	Файл = ТЗ[0].Ссылка.ПолучитьОбъект();
	//КонецЕсли;
	//
	//Файл.Наименование = ИмяФайла;
	//Файл.ВладелецФайла = Владелец.Ссылка;
	//Файл.ТекстХранилище = Новый ХранилищеЗначения(ДвоичныеДанные);
	//Файл.Записать();
	
	//EFSOL Шаповал О.А. -	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьШиротуИДолготуПоАдресу(Объект,Адрес,АдресДолгота,АдресШирота,Регион) Экспорт
	
	Если ES_YandexMaps.ПроверкаИнтернет() Тогда
		
		СтруктураГеокодирования = ES_YandexMaps.ГеокодированияПолучитьКоординаты(Объект[Адрес]);
		Объект[АдресДолгота] = СтруктураГеокодирования.Долгота;
		Объект[АдресШирота] 	= СтруктураГеокодирования.Широта;
		ДанныеПоМетро = ПолучитьДанныеПоМетро(СтруктураГеокодирования);
		//Объект.РегионРасстоняние = ДанныеПоМетро.Расстоняие;
		//EFSOL_Сальник К.А. 2018-11-21 {+
		Объект[Регион] = ДанныеПоМетро.Метро;
		Если не ЗначениеЗаполнено(Объект.ES_АдресДоставкиСтрана) Тогда 
			Страна = СтруктураГеокодирования.Страна;
			Объект.ES_АдресДоставкиСтрана = Справочники.СтраныМира.НайтиПоНаименованию(Страна);
		КонецЕсли;
		Если не ЗначениеЗаполнено(Объект.ES_АдресДоставкиГород) Тогда
			Объект.ES_АдресДоставкиГород = СтруктураГеокодирования.Город;
		КонецЕсли;
		Если не ЗначениеЗаполнено(Объект.ES_АдресДоставкиИндекс) Тогда
			Объект.ES_АдресДоставкиИндекс = СтруктураГеокодирования.Индекс;
		КонецЕсли;
		Если не ЗначениеЗаполнено(Объект.ES_АдресДоставкиОбласть) Тогда
			Объект.ES_АдресДоставкиОбласть = СтруктураГеокодирования.Область;
		КонецЕсли;
		Если не ЗначениеЗаполнено(Объект.ES_АдресДоставкиУлица) Тогда
			Объект.ES_АдресДоставкиУлица = СтруктураГеокодирования.Улица;
		КонецЕсли;
		Если не ЗначениеЗаполнено(Объект.ES_АдресДоставкиДом) Тогда
			Объект.ES_АдресДоставкиДом = СтруктураГеокодирования.Дом;
		КонецЕсли;
		Если не ЗначениеЗаполнено(Объект.ES_АдресДоставкиСтроение) Тогда
			Объект.ES_АдресДоставкиСтроение = СтруктураГеокодирования.Строение;
		КонецЕсли;
		//EFSOL_Сальник К.А.  -}
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьДанныеПоМетро(СтруктураГеокодирования)
	
	//ЕФСОЛ Несторук 05.08.2016 +
	Если ЗначениеЗаполнено(СтруктураГеокодирования.Долгота) И ЗначениеЗаполнено(СтруктураГеокодирования.Широта) Тогда
		PI = 3.1415926535897932; 
		СтруктураПоМетро = ES_YandexMaps.ГеокодированияПолучитьКоординатыМетро(СтруктураГеокодирования);
		
		Lt1 = СтруктураГеокодирования.Долгота;
		Lg1 = СтруктураГеокодирования.Широта;
		
		Lt2 = СтруктураПоМетро.Долгота;
		Lg2 = СтруктураПоМетро.Широта;
		Если ЗначениеЗаполнено(Lt1) И ЗначениеЗаполнено(Lg1) 
			И ЗначениеЗаполнено(Lt2) И ЗначениеЗаполнено(Lg2) И НЕ Lt1=Lt2 И НЕ Lg1 =Lg2 Тогда
			
			abs = (PI*Lg2/180- PI*Lg1/180);
			
			Если abs < 0 Тогда
				abs = abs* -1;
			КонецЕсли;
		Попытка
			dist = 6372797*acos(sin(PI*Lt1/180)*sin(PI*Lt2/180)+ cos(PI*Lt1/180)* cos(PI*Lt2/180)* cos(abs));							
			dist = ""+Окр((dist/1000),2)+" км";
			
			Возврат Новый Структура("Расстоняие, Метро",dist,ДобавитьМетроНаСервере(СтруктураПоМетро.Имя));  
		Исключение
			Возврат Новый Структура("Расстоняие, Метро",0,ПредопределенноеЗначение("Справочник.ES_Регионы.ПустаяСсылка"));
		КонецПопытки;
		
		Иначе
			Возврат Новый Структура("Расстоняие, Метро",0,ПредопределенноеЗначение("Справочник.ES_Регионы.ПустаяСсылка"));
		КонецЕсли;
	Иначе Возврат Новый Структура("Расстоняие, Метро",0,ПредопределенноеЗначение("Справочник.ES_Регионы.ПустаяСсылка"));
	КонецЕсли;
	//ЕФСОЛ Несторук 05.08.2016 -
	
КонецФункции

Функция ДобавитьМетроНаСервере(Метро)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ES_Регионы.Ссылка
		|ИЗ
		|	Справочник.ES_Регионы КАК ES_Регионы
		|ГДЕ
		|	ES_Регионы.Наименование = &Наименование
		|	И ES_Регионы.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Наименование", Метро);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
	
	Иначе
		Если Метро = "..." ИЛИ НЕ ЗначениеЗаполнено(Метро) Тогда
			Возврат Справочники.ES_Регионы.ПустаяСсылка();
		Иначе
			
		НовыйЭлемент = Справочники.ES_Регионы.СоздатьЭлемент();
		НовыйЭлемент.Наименование = Метро;
		НовыйЭлемент.Записать();
		
		Возврат НовыйЭлемент.Ссылка;
		КонецЕсли;
	
	КонецЕсли;
	
КонецФункции

#Область ПОЛУЧЕНИЯ_ИНФОРМАЦИИ_И_СТАТУСОВ_ПО_ЗАЯВКАМ

Функция ПолучитьИнформациюПоЗаявке(Запрос) Экспорт
	//EFSOL_Лохоня Юрий Анатольевич 17 августа 2017 г. 10:16:20 +
	
	Ответ = Новый HTTPСервисОтвет(302);
	ТаблицаЗначенийОтвета  = Новый ТаблицаЗначений();
	ТаблицаЗначенийОтвета.Колонки.Добавить("ICN");	
	ТаблицаЗначенийОтвета.Колонки.Добавить("Sender");
	ТаблицаЗначенийОтвета.Колонки.Добавить("Shipment");	
	ТаблицаЗначенийОтвета.Колонки.Добавить("Is_delivered");
	
	//
	СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
	СТ_Доб.ICN 					= "";			
	СТ_Доб.Sender				= Новый Структура;
	СТ_Доб.Shipment				= Новый Структура;	
	СТ_Доб.Is_delivered			= "";

	SessionId = ПолучитьIDСесси(Запрос);
	//провериьт на SessionId !!!
	ЗапросСесии = новый Запрос("ВЫБРАТЬ
						|	NS_СессииЛК.id,
						|	NS_СессииЛК.Начата,
						|	NS_СессииЛК.Истекает,
						|	NS_СессииЛК.Контрагент как Контрагент,
						|	NS_СессииЛК.ЗакрытаСамостоятельно
						|ИЗ
						|	РегистрСведений.NS_СессииЛК КАК NS_СессииЛК
						|ГДЕ
						|	NS_СессииЛК.id = &id
						|	И NS_СессииЛК.Истекает >=&ДатаТек
						|	И NS_СессииЛК.Начата <= &ДатаТек
						|	И НЕ NS_СессииЛК.ЗакрытаСамостоятельно");
	
	ЗапросСесии.УстановитьПараметр("id",СокрЛП(SessionId));
	ЗапросСесии.УстановитьПараметр("ДатаТек",ТекущаяДата());
	
	Выборка = ЗапросСесии.Выполнить().Выгрузить();
	Если Выборка.Количество()= 0 Тогда 
		СообщениеОшибки =  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"GetInvoiceInfo",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	
	ИначеЕсли   Выборка.Количество()= 1 Тогда  
		
		ТекТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
		ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
		ОтветJSON =  ОбработкаJSON.UnJSON(ТекТекстЗапроса);
		
		//надо ОтветJSON проверить на правильность заполнения!!!
		ОтветНаПроверкуСтруктурыGetInvoiceInfo = ПроверитьСтруктуруВходаGetInvoiceInfo(ОтветJSON);
		ПрошлаПроверку = ОтветНаПроверкуСтруктурыGetInvoiceInfo.Получить("ПрошлаПроверку") ;
		Если ПрошлаПроверку Тогда 
			
			////Надо вывести данные "Заказ клиента"
			ПрошлаПроверкуЗК = ОбработатьИПолучитьСтатусЗаказПокупателя(ОтветJSON,Выборка[0].Контрагент);

			ЗагрузкаУспешна = ПрошлаПроверкуЗК.Получить("ЗагрузкаУспешна") ;
			ICN             =    ПрошлаПроверкуЗК.Получить("ICN") ;		
			Sender			=    ПрошлаПроверкуЗК.Получить("Sender") ;		
			Is_delivered    =    ПрошлаПроверкуЗК.Получить("Is_delivered") ;
			Shipment      	=    ПрошлаПроверкуЗК.Получить("Shipment");
			ТекстОтвета     =    ПрошлаПроверкуЗК.Получить("ТекстОтвета") ;

			//Латыш Дмитрий 06.06.2019
			Customer        =    ПрошлаПроверкуЗК.Получить("Customer") ;
			//Латыш Дмитрий 06.06.2019

			ОшибкаВОтвете = Не ЗагрузкаУспешна;
			//
			ТаблицаЗначенийОтвета  = Новый ТаблицаЗначений();
			ТаблицаЗначенийОтвета.Колонки.Добавить("ICN");
			
			ТаблицаЗначенийОтвета.Колонки.Добавить("Sender");
			ТаблицаЗначенийОтвета.Колонки.Добавить("Shipment");
			
			ТаблицаЗначенийОтвета.Колонки.Добавить("Is_delivered");

			//Латыш Дмитрий 06.06.2019
			ТаблицаЗначенийОтвета.Колонки.Добавить("Customer");
			//Латыш Дмитрий 06.06.2019

			СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
			СТ_Доб.ICN 					= ICN;			
			СТ_Доб.Sender				= Sender;
			СТ_Доб.Shipment				= Shipment;
			
			СТ_Доб.Is_delivered			= Is_delivered;
			
			//Латыш Дмитрий 06.06.2019
			СТ_Доб.Customer 			= Customer;
			//Латыш Дмитрий 06.06.2019

			СообщениеОтветЗаписи =  ОписаниеОтветаСгенерить(ТекстОтвета,ОшибкаВОтвете,"GetInvoiceInfo",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОтветЗаписи);

		иначе
			ТекстТек =  ОтветНаПроверкуСтруктурыGetInvoiceInfo.Получить("ТекстОшибки") ;
			СообщениеОшибки =  ОписаниеОтветаСгенерить(ТекстТек,Истина,"GetInvoiceInfo",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
		КонецЕсли;
	Иначе 
		СообщениеОшибки =  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"GetInvoiceInfo",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	КонецЕсли;
	 		
	Возврат Ответ;
	
	//EFSOL_Лохоня Юрий Анатольевич -	
КонецФункции

Функция ПолучитьСтатутыПоЗаявкам(Запрос) Экспорт
	//EFSOL_Лохоня Юрий Анатольевич 17 августа 2017 г. 10:16:20 +
	
	Ответ = Новый HTTPСервисОтвет(302);
	ТаблицаЗначенийОтвета  = Новый ТаблицаЗначений();

	SessionId = ПолучитьIDСесси(Запрос);
	//провериьт на SessionId !!!
	ЗапросСесии = новый Запрос("ВЫБРАТЬ
						|	NS_СессииЛК.id,
						|	NS_СессииЛК.Начата,
						|	NS_СессииЛК.Истекает,
						|	NS_СессииЛК.Контрагент как Контрагент,
						|	NS_СессииЛК.ЗакрытаСамостоятельно
						|ИЗ
						|	РегистрСведений.NS_СессииЛК КАК NS_СессииЛК
						|ГДЕ
						|	NS_СессииЛК.id = &id
						|	И NS_СессииЛК.Истекает >=&ДатаТек
						|	И NS_СессииЛК.Начата <= &ДатаТек
						|	И НЕ NS_СессииЛК.ЗакрытаСамостоятельно");
	
	ЗапросСесии.УстановитьПараметр("id",СокрЛП(SessionId));
	ЗапросСесии.УстановитьПараметр("ДатаТек",ТекущаяДата());
	
	Выборка = ЗапросСесии.Выполнить().Выгрузить();
	Если Выборка.Количество()= 0 Тогда 
		СообщениеОшибки =  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"MonitorInvoiceInfo",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	
	ИначеЕсли   Выборка.Количество()= 1 Тогда  
		
		ТекТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
		ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
		ОтветJSON =  ОбработкаJSON.UnJSON(ТекТекстЗапроса);
		
		//надо ОтветJSON проверить на правильность заполнения!!!
		ОтветНаПроверкуСтруктурыMonitorInvoiceInfo = ПроверитьСтруктуруВходаMonitorInvoiceInfo(ОтветJSON);
		ПрошлаПроверку = ОтветНаПроверкуСтруктурыMonitorInvoiceInfo.Получить("ПрошлаПроверку") ;
		Если ПрошлаПроверку Тогда 
			
			////Надо вывести данные "Заказ клиента"
			ПрошлаПроверкуЗК = ПолучитьСтатусыЗаказов(ОтветJSON,Выборка[0].Контрагент);

			ЗагрузкаУспешна = ПрошлаПроверкуЗК.Получить("ЗагрузкаУспешна") ;
			ICN                   =    ПрошлаПроверкуЗК.Получить("ICN") ;
			Shipments      			    =    ПрошлаПроверкуЗК.Получить("Shipments") ;
			ТекстОтвета     			    =    ПрошлаПроверкуЗК.Получить("ТекстОтвета") ;

			ОшибкаВОтвете = Не ЗагрузкаУспешна;

			ТаблицаЗначенийОтвета  = Новый ТаблицаЗначений();
			ТаблицаЗначенийОтвета.Колонки.Добавить("ICN");			
			ТаблицаЗначенийОтвета.Колонки.Добавить("Shipments");
			
			СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
			СТ_Доб.ICN 					= ICN;
			СТ_Доб.Shipments			= Shipments;

			СообщениеОтветЗаписи =  ОписаниеОтветаСгенерить(ТекстОтвета,ОшибкаВОтвете,"MonitorInvoiceInfo",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОтветЗаписи);

		иначе
			ТекстТек =  ОтветНаПроверкуСтруктурыMonitorInvoiceInfo.Получить("ТекстОшибки") ;
			СообщениеОшибки =  ОписаниеОтветаСгенерить(ТекстТек,Истина,"MonitorInvoiceInfo",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
		КонецЕсли;
	Иначе 
		СообщениеОшибки =  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"MonitorInvoiceInfo",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	КонецЕсли;
	 		
	Возврат Ответ;
	
	//EFSOL_Лохоня Юрий Анатольевич -	

КонецФункции	

Функция ПолучитьСписокЗаказовПокупателя(Запрос) Экспорт
	//EFSOL_Лохоня Юрий Анатольевич 17 августа 2017 г. 10:16:20 +
	
	Ответ = Новый HTTPСервисОтвет(302);
	ТаблицаЗначенийОтвета  = Новый ТаблицаЗначений();

	SessionId = ПолучитьIDСесси(Запрос);
	//провериьт на SessionId !!!
	ЗапросСесии = новый Запрос("ВЫБРАТЬ
						|	NS_СессииЛК.id,
						|	NS_СессииЛК.Начата,
						|	NS_СессииЛК.Истекает,
						|	NS_СессииЛК.Контрагент как Контрагент,
						|	NS_СессииЛК.ЗакрытаСамостоятельно
						|ИЗ
						|	РегистрСведений.NS_СессииЛК КАК NS_СессииЛК
						|ГДЕ
						|	NS_СессииЛК.id = &id
						|	И NS_СессииЛК.Истекает >=&ДатаТек
						|	И NS_СессииЛК.Начата <= &ДатаТек
						|	И НЕ NS_СессииЛК.ЗакрытаСамостоятельно");
	
	ЗапросСесии.УстановитьПараметр("id",СокрЛП(SessionId));
	ЗапросСесии.УстановитьПараметр("ДатаТек",ТекущаяДата());
	
	Выборка = ЗапросСесии.Выполнить().Выгрузить();
	Если Выборка.Количество()= 0 Тогда 
		СообщениеОшибки =  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"GetExtMon",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	
	ИначеЕсли   Выборка.Количество()= 1 Тогда  
		
		ТекТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
		ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
		ОтветJSON =  ОбработкаJSON.UnJSON(ТекТекстЗапроса);
		
		//надо ОтветJSON проверить на правильность заполнения!!!
		ОтветНаПроверкуСтруктурыGetExtMon = ПроверитьСтруктуруВходаGetExtMon(ОтветJSON);
		ПрошлаПроверку = ОтветНаПроверкуСтруктурыGetExtMon.Получить("ПрошлаПроверку") ;
		Если ПрошлаПроверку Тогда 
			
			////Надо вывести данные "Заказ клиента"
			ПрошлаПроверкуЗК = ПолучитьСписокЗаказов(ОтветJSON,Выборка[0].Контрагент);

			ЗагрузкаУспешна = ПрошлаПроверкуЗК.Получить("ЗагрузкаУспешна") ;
			ICN                   =    ПрошлаПроверкуЗК.Получить("ICN") ;
			КодОшибки				=  ПрошлаПроверкуЗК.Получить("КодОшибки");
			Shipments      			    =    ПрошлаПроверкуЗК.Получить("Shipments") ;
			ТекстОтвета     			    =    ПрошлаПроверкуЗК.Получить("ТекстОтвета") ;

			ОшибкаВОтвете = Не ЗагрузкаУспешна;

			ТаблицаЗначенийОтвета  = Новый ТаблицаЗначений();
			ТаблицаЗначенийОтвета.Колонки.Добавить("ICN");			
			ТаблицаЗначенийОтвета.Колонки.Добавить("Shipments");
			
			СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
			СТ_Доб.ICN 					= ICN;
			СТ_Доб.Shipments			= Shipments;

			СообщениеОтветЗаписи =  ОписаниеОтветаСгенерить(ТекстОтвета,ОшибкаВОтвете,"GetExtMon",ТаблицаЗначенийОтвета,КодОшибки);
			Ответ.УстановитьТелоИзСтроки(СообщениеОтветЗаписи);

		иначе
			ТекстТек =  ОтветНаПроверкуСтруктурыGetExtMon.Получить("ТекстОшибки") ;
			СообщениеОшибки =  ОписаниеОтветаСгенерить(ТекстТек,Истина,"GetExtMon",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
		КонецЕсли;
	Иначе 
		СообщениеОшибки =  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"GetExtMon",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	КонецЕсли;
	 		
	Возврат Ответ;
	
	//EFSOL_Лохоня Юрий Анатольевич -	
КонецФункции	

Функция ПолучитьЗаказыНаСбор(Запрос) Экспорт
	//EFSOL_Лохоня Юрий Анатольевич 17 августа 2017 г. 10:16:20 +
	
	Ответ = Новый HTTPСервисОтвет(302);
	ТаблицаЗначенийОтвета  = Новый ТаблицаЗначений();

	SessionId = ПолучитьIDСесси(Запрос);
	//провериьт на SessionId !!!
	ЗапросСесии = новый Запрос("ВЫБРАТЬ
						|	NS_СессииЛК.id,
						|	NS_СессииЛК.Начата,
						|	NS_СессииЛК.Истекает,
						|	NS_СессииЛК.Контрагент как Контрагент,
						|	NS_СессииЛК.ЗакрытаСамостоятельно
						|ИЗ
						|	РегистрСведений.NS_СессииЛК КАК NS_СессииЛК
						|ГДЕ
						|	NS_СессииЛК.id = &id
						|	И NS_СессииЛК.Истекает >=&ДатаТек
						|	И NS_СессииЛК.Начата <= &ДатаТек
						|	И НЕ NS_СессииЛК.ЗакрытаСамостоятельно");
	
	ЗапросСесии.УстановитьПараметр("id",СокрЛП(SessionId));
	ЗапросСесии.УстановитьПараметр("ДатаТек",ТекущаяДата());
	
	Выборка = ЗапросСесии.Выполнить().Выгрузить();
	Если Выборка.Количество()= 0 Тогда 
		СообщениеОшибки =  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"GetOrders",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	
	ИначеЕсли   Выборка.Количество()= 1 Тогда  
		
		ТекТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
		ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
		ОтветJSON =  ОбработкаJSON.UnJSON(ТекТекстЗапроса);
		
		//надо ОтветJSON проверить на правильность заполнения!!!
		ОтветНаПроверкуСтруктурыGetOrders = ПроверитьСтруктуруВходаGetOrders(ОтветJSON);
		ПрошлаПроверку = ОтветНаПроверкуСтруктурыGetOrders.Получить("ПрошлаПроверку") ;
		Если ПрошлаПроверку Тогда 
			
			////Надо вывести данные "Заказ клиента"
			ПрошлаПроверкуЗК = ПолучитьСписокЗаказовНаСбор(ОтветJSON,Выборка[0].Контрагент);

			ЗагрузкаУспешна = ПрошлаПроверкуЗК.Получить("ЗагрузкаУспешна") ;
			ICN                   =    ПрошлаПроверкуЗК.Получить("ICN") ;
			Orders      			    =    ПрошлаПроверкуЗК.Получить("Orders") ;
			ТекстОтвета     			    =    ПрошлаПроверкуЗК.Получить("ТекстОтвета") ;
			КодОшибки     			    =    ПрошлаПроверкуЗК.Получить("КодОшибки") ;

			ОшибкаВОтвете = Не ЗагрузкаУспешна;

			ТаблицаЗначенийОтвета  = Новый ТаблицаЗначений();
			ТаблицаЗначенийОтвета.Колонки.Добавить("ICN");			
			ТаблицаЗначенийОтвета.Колонки.Добавить("Orders");
			
			СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
			СТ_Доб.ICN 					= ICN;
			СТ_Доб.Orders				= Orders;

			СообщениеОтветЗаписи =  ОписаниеОтветаСгенерить(ТекстОтвета,ОшибкаВОтвете,"GetOrders",ТаблицаЗначенийОтвета,КодОшибки);
			Ответ.УстановитьТелоИзСтроки(СообщениеОтветЗаписи);

		иначе
			ТекстТек =  ОтветНаПроверкуСтруктурыGetOrders.Получить("ТекстОшибки") ;
			СообщениеОшибки =  ОписаниеОтветаСгенерить(ТекстТек,Истина,"GetOrders",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
		КонецЕсли;
	Иначе 
		СообщениеОшибки =  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"GetOrders",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	КонецЕсли;
	 		
	Возврат Ответ;
	
	//EFSOL_Лохоня Юрий Анатольевич -	
КонецФункции	

Функция ПроверитьСтруктуруВходаGetInvoiceInfo(ОтветJSON_Соответствие)
	//EFSOL_Лохоня Юрий Анатольевич 17 августа 2017 г. 10:16:20 +
	
	ТекстОшибки = "";
	СоответствиеПроверки = Новый Соответствие;
	
	Если ТипЗнч(ОтветJSON_Соответствие) = Тип("Соответствие") Тогда 
		//{
		//“ICN”		“<индивидуальный номер клиента>”,	
		//“FullAddress“:	“<Полный адрес сбора>”,
		//“Region”:		“<Регион>”,
		//“City“: 		“<Город>”,
		//“Area“	:	“<Район>”,
		//“Settlement“:	“<Населенный пункт>”,
		//“Street”:		“<Улица>”,
		//“House”:		“<Дом>”,
		//“Building”:	“<Строение>”,
		//“Block”:		“<Корпус>”,
		//“Flat”:		“<Квартира/офис>”,
		//"CompanyName": 	"<название компании>"
		//“Name“: 		“<Контактное лицо>”, обязательное поле,
		//“Phone“: 		“<Контактный телефон>”, обязательное поле,
		//“AddPhone“: 	“<Добавочный номер к Phone>”,
		//“Phone2“:		“<Запасной контактный телефон>”,
		//“AddPhone2“: 	“<Добавочный номер к Phone2>”,
		//“Email”:		“<контактный email>”
		//“PickupDate“	“<Дата сбора>”, обязательное поле,//формат гггг.мм.дд
		//“PickupTimeFrom“: 	“<Ожидаемое время сбора с>”,//формат чч:мм
		//“PickupTimeTo“:	“<Ожидаемое время сбора по>”,//формат чч:мм
		//“Weight”: 		“<Общий вес, грамм>” примерное значение,	
		//“Comment“: 	“<Комментарий для курьера>”,
		//	“Shipments”:	“<Массив с номерами отправлений привязанными к вызову>”
		//	[“SPE0001234”, “SPE0001235” ]
		//	}
		
		
		ICN = ОтветJSON_Соответствие.Получить("ICN");
		
		Если ICN = Неопределено Тогда 
			ТекстОшибки = ТекстОшибки +"
			|Структура не соответствует. Нет JSON ICN."; 
		КонецЕсли;
		
		ShipmentNumber = ОтветJSON_Соответствие.Получить("ShipmentNumber"); 
		Если ShipmentNumber = Неопределено Тогда 
			
			ТекстОшибки = ТекстОшибки +"
			|Структура не соответствует. Нет JSON ShipmentNumber."; 
		КонецЕсли;
		
	иначе
		ТекстОшибки = "Структура не соответствует. Необходимо проверить текст вызова.";
	КонецЕсли;
	
	СоответствиеПроверки.Вставить("ТекстОшибки",ТекстОшибки);
	
	Если ТекстОшибки = "" Тогда 
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Истина);
	Иначе
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Ложь);
	КонецЕсли;
	
	Возврат  СоответствиеПроверки;
	
	//EFSOL_Лохоня Юрий Анатольевич -
КонецФункции

Функция ПроверитьСтруктуруВходаMonitorInvoiceInfo(ОтветJSON_Соответствие)
		//EFSOL_Лохоня Юрий Анатольевич 17 августа 2017 г. 10:16:20 +
	
	ТекстОшибки = "";
	СоответствиеПроверки = Новый Соответствие;
	
	Если ТипЗнч(ОтветJSON_Соответствие) = Тип("Соответствие") Тогда 
		//{
		//“ICN”		“<индивидуальный номер клиента>”,	
		//“FullAddress“:	“<Полный адрес сбора>”,
		//“Region”:		“<Регион>”,
		//“City“: 		“<Город>”,
		//“Area“	:	“<Район>”,
		//“Settlement“:	“<Населенный пункт>”,
		//“Street”:		“<Улица>”,
		//“House”:		“<Дом>”,
		//“Building”:	“<Строение>”,
		//“Block”:		“<Корпус>”,
		//“Flat”:		“<Квартира/офис>”,
		//"CompanyName": 	"<название компании>"
		//“Name“: 		“<Контактное лицо>”, обязательное поле,
		//“Phone“: 		“<Контактный телефон>”, обязательное поле,
		//“AddPhone“: 	“<Добавочный номер к Phone>”,
		//“Phone2“:		“<Запасной контактный телефон>”,
		//“AddPhone2“: 	“<Добавочный номер к Phone2>”,
		//“Email”:		“<контактный email>”
		//“PickupDate“	“<Дата сбора>”, обязательное поле,//формат гггг.мм.дд
		//“PickupTimeFrom“: 	“<Ожидаемое время сбора с>”,//формат чч:мм
		//“PickupTimeTo“:	“<Ожидаемое время сбора по>”,//формат чч:мм
		//“Weight”: 		“<Общий вес, грамм>” примерное значение,	
		//“Comment“: 	“<Комментарий для курьера>”,
		//	“Shipments”:	“<Массив с номерами отправлений привязанными к вызову>”
		//	[“SPE0001234”, “SPE0001235” ]
		//	}
		
		
		ICN = ОтветJSON_Соответствие.Получить("ICN");
		
		Если ICN = Неопределено Тогда 
			ТекстОшибки = ТекстОшибки +"
			|Структура не соответствует. Нет JSON ICN."; 
		КонецЕсли;
		
		ShipmentNumber = ОтветJSON_Соответствие.Получить("ShipmentNumber"); 
		Если ShipmentNumber = Неопределено Тогда 
			
			ТекстОшибки = ТекстОшибки +"
			|Структура не соответствует. Нет JSON ShipmentNumber."; 
		КонецЕсли;
		
	иначе
		ТекстОшибки = "Структура не соответствует. Необходимо проверить текст вызова.";
	КонецЕсли;
	
	СоответствиеПроверки.Вставить("ТекстОшибки",ТекстОшибки);
	
	Если ТекстОшибки = "" Тогда 
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Истина);
	Иначе
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Ложь);
	КонецЕсли;
	
	Возврат  СоответствиеПроверки;
	
	//EFSOL_Лохоня Юрий Анатольевич -

КонецФункции

Функция ПроверитьСтруктуруВходаGetExtMon(ОтветJSON_Соответствие)
	//EFSOL_Лохоня Юрий Анатольевич 17 августа 2017 г. 10:16:20 +
	
	ТекстОшибки = "";
	СоответствиеПроверки = Новый Соответствие;
	
	Если ТипЗнч(ОтветJSON_Соответствие) = Тип("Соответствие") Тогда 
		//{
		//“ICN”		“<индивидуальный номер клиента>”,	
		//“FullAddress“:	“<Полный адрес сбора>”,
		//“Region”:		“<Регион>”,
		//“City“: 		“<Город>”,
		//“Area“	:	“<Район>”,
		//“Settlement“:	“<Населенный пункт>”,
		//“Street”:		“<Улица>”,
		//“House”:		“<Дом>”,
		//“Building”:	“<Строение>”,
		//“Block”:		“<Корпус>”,
		//“Flat”:		“<Квартира/офис>”,
		//"CompanyName": 	"<название компании>"
		//“Name“: 		“<Контактное лицо>”, обязательное поле,
		//“Phone“: 		“<Контактный телефон>”, обязательное поле,
		//“AddPhone“: 	“<Добавочный номер к Phone>”,
		//“Phone2“:		“<Запасной контактный телефон>”,
		//“AddPhone2“: 	“<Добавочный номер к Phone2>”,
		//“Email”:		“<контактный email>”
		//“PickupDate“	“<Дата сбора>”, обязательное поле,//формат гггг.мм.дд
		//“PickupTimeFrom“: 	“<Ожидаемое время сбора с>”,//формат чч:мм
		//“PickupTimeTo“:	“<Ожидаемое время сбора по>”,//формат чч:мм
		//“Weight”: 		“<Общий вес, грамм>” примерное значение,	
		//“Comment“: 	“<Комментарий для курьера>”,
		//	“Shipments”:	“<Массив с номерами отправлений привязанными к вызову>”
		//	[“SPE0001234”, “SPE0001235” ]
		//	}
		
		
		ICN = ОтветJSON_Соответствие.Получить("ICN");	
		Если ICN = Неопределено Тогда 
			ТекстОшибки = ТекстОшибки +"
			|Структура не соответствует. Нет JSON ICN."; 
		КонецЕсли;
		
		Date_Start = ОтветJSON_Соответствие.Получить("Date_Start"); 
		Если Date_Start = Неопределено Тогда 			
			ТекстОшибки = ТекстОшибки +"
			|Структура не соответствует. Нет JSON Date_Start."; 
		КонецЕсли;
		
		Date_End = ОтветJSON_Соответствие.Получить("Date_End"); 
		Если Date_End = Неопределено Тогда 			
			ТекстОшибки = ТекстОшибки +"
			|Структура не соответствует. Нет JSON Date_End."; 
		КонецЕсли;
		
	иначе
		ТекстОшибки = "Структура не соответствует. Необходимо проверить текст вызова.";
	КонецЕсли;
	
	СоответствиеПроверки.Вставить("ТекстОшибки",ТекстОшибки);
	
	Если ТекстОшибки = "" Тогда 
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Истина);
	Иначе
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Ложь);
	КонецЕсли;
	
	Возврат  СоответствиеПроверки;
	
	//EFSOL_Лохоня Юрий Анатольевич -
КонецФункции

Функция ПроверитьСтруктуруВходаGetOrders(ОтветJSON_Соответствие)
	//EFSOL_Лохоня Юрий Анатольевич 17 августа 2017 г. 10:16:20 +
	
	ТекстОшибки = "";
	СоответствиеПроверки = Новый Соответствие;
	
	Если ТипЗнч(ОтветJSON_Соответствие) = Тип("Соответствие") Тогда 
		//{
		//“ICN”		“<индивидуальный номер клиента>”,	
		//“FullAddress“:	“<Полный адрес сбора>”,
		//“Region”:		“<Регион>”,
		//“City“: 		“<Город>”,
		//“Area“	:	“<Район>”,
		//“Settlement“:	“<Населенный пункт>”,
		//“Street”:		“<Улица>”,
		//“House”:		“<Дом>”,
		//“Building”:	“<Строение>”,
		//“Block”:		“<Корпус>”,
		//“Flat”:		“<Квартира/офис>”,
		//"CompanyName": 	"<название компании>"
		//“Name“: 		“<Контактное лицо>”, обязательное поле,
		//“Phone“: 		“<Контактный телефон>”, обязательное поле,
		//“AddPhone“: 	“<Добавочный номер к Phone>”,
		//“Phone2“:		“<Запасной контактный телефон>”,
		//“AddPhone2“: 	“<Добавочный номер к Phone2>”,
		//“Email”:		“<контактный email>”
		//“PickupDate“	“<Дата сбора>”, обязательное поле,//формат гггг.мм.дд
		//“PickupTimeFrom“: 	“<Ожидаемое время сбора с>”,//формат чч:мм
		//“PickupTimeTo“:	“<Ожидаемое время сбора по>”,//формат чч:мм
		//“Weight”: 		“<Общий вес, грамм>” примерное значение,	
		//“Comment“: 	“<Комментарий для курьера>”,
		//	“Shipments”:	“<Массив с номерами отправлений привязанными к вызову>”
		//	[“SPE0001234”, “SPE0001235” ]
		//	}
		
		
		ICN = ОтветJSON_Соответствие.Получить("ICN");	
		Если ICN = Неопределено Тогда 
			ТекстОшибки = ТекстОшибки +"
			|Структура не соответствует. Нет JSON ICN."; 
		КонецЕсли;
		
		Date_Start = ОтветJSON_Соответствие.Получить("Date_Start"); 
		Если Date_Start = Неопределено Тогда 			
			ТекстОшибки = ТекстОшибки +"
			|Структура не соответствует. Нет JSON Date_Start."; 
		КонецЕсли;
		
		Date_End = ОтветJSON_Соответствие.Получить("Date_End"); 
		Если Date_End = Неопределено Тогда 			
			ТекстОшибки = ТекстОшибки +"
			|Структура не соответствует. Нет JSON Date_End."; 
		КонецЕсли;
		
	иначе
		ТекстОшибки = "Структура не соответствует. Необходимо проверить текст вызова.";
	КонецЕсли;
	
	СоответствиеПроверки.Вставить("ТекстОшибки",ТекстОшибки);
	
	Если ТекстОшибки = "" Тогда 
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Истина);
	Иначе
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Ложь);
	КонецЕсли;
	
	Возврат  СоответствиеПроверки;
	
	//EFSOL_Лохоня Юрий Анатольевич -
КонецФункции

Функция ОбработатьИПолучитьСтатусЗаказПокупателя(ОтветJSON_Соответствие, Заказчик)
	ТекстОшибки = "";
	ЗагрузкаУспешна = Истина;
	ShipmentNumber = "";
	СоответсвиеОтвета = Новый Соответствие; 
	//Sender =   ОтветJSON_Соответствие.Получить("Sender"); //это для вызово курьера, не обработывается
	
	//ICN = ОтветJSON_Соответствие.Получить("ICN");   //это проверялось, не обработывается
	
	ICN = ОтветJSON_Соответствие.Получить("ICN");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДоговорыКонтрагентов.Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Код = &Код
	               |	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	               |	И ДоговорыКонтрагентов.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Код",ICN);
	Запрос.УстановитьПараметр("Владелец",Заказчик);
	ТЗ_Договора = Запрос.Выполнить().Выгрузить();
	Если ТЗ_Договора.Количество() > 0 Тогда
		Договор = ТЗ_Договора[0].Ссылка;
	Иначе
		Договор = Неопределено;
	КонецЕсли;
			
	Если Не ЗначениеЗаполнено(Договор) Тогда
		ОшибкаПриПоиске = Истина;
		ЗагрузкаУспешна = Ложь;
		ТекстОшибки = ТекстОшибки+"
		|Не найден номер договора "+ICN+". Обратитесь к менеждеру.";
	КонецЕсли;
	
	Если ЗагрузкаУспешна Тогда
		
		ShipmentNumber = ОтветJSON_Соответствие.Получить("ShipmentNumber");
		
		ЗапросНаЗаказПокупателя = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                                       |	ЗаказПокупателя.Ссылка КАК Заказ,
		                                       |	ЗаказПокупателя.Договор.Код КАК ICN,
		                                       |	ВЫБОР
		                                       |		КОГДА ЗаказПокупателя.ES_СрочностьДоставки = ЗНАЧЕНИЕ(Перечисление.ES_СрочностьДоставки.Стандартная)
		                                       |			ТОГДА 0
		                                       |		КОГДА ЗаказПокупателя.ES_СрочностьДоставки = ЗНАЧЕНИЕ(Перечисление.ES_СрочностьДоставки.Срочная)
		                                       |			ТОГДА 1
		                                       |		ИНАЧЕ 2
		                                       |	КОНЕЦ КАК Sender_Urgent,
		                                       |	ВЫБОР
		                                       |		КОГДА ЗаказПокупателя.ES_ВидДоставки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыДоставки.СкладДвери)
		                                       |			ТОГДА ""Т-Д""
		                                       |		КОГДА ЗаказПокупателя.ES_ВидДоставки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыДоставки.СкладСклад)
		                                       |			ТОГДА ""Т-Т""
		                                       |		КОГДА ЗаказПокупателя.ES_ВидДоставки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыДоставки.ДвериДвери)
		                                       |			ТОГДА ""Д-Д""
		                                       |		ИНАЧЕ ""Т-ПВЗ""
		                                       |	КОНЕЦ КАК Sender_TypeDelivery,
		                                       |	ЗаказПокупателя.ES_ЗаборАдрес КАК Sender_FullAddress,
		                                       |	ЗаказПокупателя.ES_ЗаборДата КАК Sender_DesiredDate,
		                                       |	ЗаказПокупателя.ES_ЗаборИндексОтправитель КАК Sender_PostalCode,
		                                       |	ЗаказПокупателя.ES_ЗаборОбластьОтправитель КАК Sender_Region,
		                                       |	ЗаказПокупателя.ES_Город1 КАК Sender_City,
		                                       |	"""" КАК Sender_Area,
		                                       |	"""" КАК Sender_Settlement,
		                                       |	ЗаказПокупателя.ES_ЗаборАдресОтправитель КАК Sender_Street,
		                                       |	ЗаказПокупателя.ES_АдресЗаборДом КАК Sender_House,
		                                       |	ЗаказПокупателя.ES_АдресЗаборСтроение КАК Sender_Building,
		                                       |	ЗаказПокупателя.ES_АдресЗаборКорпус КАК Sender_Block,
		                                       |	ЗаказПокупателя.ES_АдресЗаборКвартира КАК Sender_Flat,
		                                       |	ЗаказПокупателя.ES_ЗаборКонтактноеЛицо КАК Sender_Name,
		                                       |	ЗаказПокупателя.ES_ЗаборТелефон КАК Sender_Phone,
		                                       |	"""" КАК Sender_Email,
		                                       |	ЗаказПокупателя.ES_НомерНакладной КАК ShipmentNumber,
		                                       |	ЗаказПокупателя.ES_ВхНакладная КАК ClientShipmentNumber,
		                                       |	ЗаказПокупателя.ES_НомерНакладной КАК Barcode,
		                                       |	ЗаказПокупателя.Комментарий КАК Description,
		                                       |	ЗаказПокупателя.ES_ОбщийВес КАК Weight,
		                                       |	ЗаказПокупателя.Длина КАК Length,
		                                       |	ЗаказПокупателя.Высота КАК Width,
		                                       |	ЗаказПокупателя.Ширина КАК Height,
		                                       |	ЗаказПокупателя.ES_КомментарийКурьера КАК Comment,
		                                       |	ЗаказПокупателя.ES_ДатаДоставки КАК DesiredDate,
		                                       |	ЗаказПокупателя.ES_ВремяДоставкиС КАК DesiredTimeFrom,
		                                       |	ЗаказПокупателя.ES_ВремяДоставкиПо КАК DesiredTimeTo,
		                                       |	ЗаказПокупателя.ES_ПВЗ.Код КАК CodePVZ,
		                                       |	ЗаказПокупателя.ES_НППлан КАК COD,
		                                       |	ЗаказПокупателя.ES_ОбьявленнаяСтоимость КАК Amount,
		                                       |	""false"" КАК WithoutDelivery,
		                                       |	ЗаказПокупателя.ES_ПВЗ.Код КАК Recipient_DeliveryPointNumber,
		                                       |	ЗаказПокупателя.ES_АдресДоставки КАК Recipient_FullAddress,
		                                       |	ЗаказПокупателя.ES_АдресДоставкиИндекс КАК Recipient_PostalCode,
		                                       |	ЗаказПокупателя.ES_АдресДоставкиОбласть КАК Recipient_Region,
		                                       |	ЗаказПокупателя.ES_АдресДоставкиГород КАК Recipient_City,
		                                       |	"""" КАК Recipient_Area,
		                                       |	"""" КАК Recipient_Settlement,
		                                       |	ЗаказПокупателя.ES_АдресДоставкиУлица КАК Recipient_Street,
		                                       |	ЗаказПокупателя.ES_АдресДоставкиДом КАК Recipient_House,
		                                       |	ЗаказПокупателя.ES_АдресДоставкиСтроение КАК Recipient_Building,
		                                       |	ЗаказПокупателя.ES_АдресДоставкиКорпус КАК Recipient_Block,
		                                       |	ЗаказПокупателя.ES_АдресДоставкиКвартира КАК Recipient_Flat,
		                                       |	ЗаказПокупателя.ES_Получатель КАК Recipient_CompanyName,
		                                       |	ЗаказПокупателя.ES_ПолучательКонтактноеЛицо КАК Recipient_Name,
		                                       |	ЗаказПокупателя.ES_ПолучательТелефон КАК Recipient_Phone,
		                                       |	"""" КАК Recipient_AddPhone,
		                                       |	"""" КАК Recipient_Phone2,
		                                       |	"""" КАК Recipient_AddPhone2,
		                                       |	"""" КАК Recipient_Email,
		                                       |	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа КАК СтатусЗаказа,
		                                       |	ЗаказПокупателя.ES_ОбщийОбъемныйВес КАК FullVolumeWeight,
		                                       |	ЗаказПокупателя.ES_Объем КАК FullVolume,
		                                       |	ЗаказПокупателя.Контрагент КАК Customer_Name,
		                                       |	ЗаказПокупателя.ES_ЗаказчикКонтактноеЛицо КАК Customer_ContPerson,
		                                       |	ЗаказПокупателя.ES_ЗаказчикТелефон КАК Customer_Phone,
		                                       |	ЗаказПокупателя.ES_Плательщик КАК Payer,
		                                       |	ЗаказПокупателя.ES_СпособОплаты КАК PaymentMethod
		                                       |ИЗ
		                                       |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		                                       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних КАК ES_СтатусыЗаказовСрезПоследних
		                                       |		ПО ЗаказПокупателя.Ссылка = ES_СтатусыЗаказовСрезПоследних.Заказ
		                                       |ГДЕ
		                                       |	ЗаказПокупателя.Договор = &Договор
		                                       |	И НЕ ЗаказПокупателя.ПометкаУдаления
		                                       |	И ЗаказПокупателя.ES_НомерНакладной = &ES_НомерНакладной");
		
		
		ЗапросНаЗаказПокупателя.УстановитьПараметр( "ES_НомерНакладной",ShipmentNumber);
		//ЗапросНаЗаказПокупателя.УстановитьПараметр( "Ссылка",Заказчик.Ссылка);
		ЗапросНаЗаказПокупателя.УстановитьПараметр( "Договор",Договор);
		
		ВыборкаНаЗаказПокупателя = ЗапросНаЗаказПокупателя.Выполнить().Выгрузить();
		//ВыборкаНаЗаказПокупателя = ЗапросНаЗаказПокупателя.Выполнить();
		ОшибкаПриПоиске = Ложь;
		Если ВыборкаНаЗаказПокупателя.Количество() = 1 Тогда 
			ОбЗП = ВыборкаНаЗаказПокупателя[0].Заказ;
			Is_delivered = ВыборкаНаЗаказПокупателя[0].СтатусЗаказа;
		ИначеЕсли ВыборкаНаЗаказПокупателя.Количество() = 0 Тогда
			ОшибкаПриПоиске = Истина;
			ЗагрузкаУспешна = Ложь;
			ТекстОшибки = ТекстОшибки+"
			|Не найдено накладной с таким номером. Обратитесь к менеждеру.";
		Иначе	
			ОшибкаПриПоиске = Истина;
			ЗагрузкаУспешна = Ложь;
			ТекстОшибки = ТекстОшибки+"
			|Найдено более одной накладной. Обратитесь к менеждеру.";
		КонецЕсли;
		
		Если  Не ОшибкаПриПоиске Тогда
			
			//Латыш Дмитрий 06.06.2019
			 Customer = Новый Структура;
			 Customer.Вставить("Name", ВыборкаНаЗаказПокупателя[0].Customer_Name);
			 Customer.Вставить("ContPerson", ВыборкаНаЗаказПокупателя[0].Customer_ContPerson);
			 Customer.Вставить("Phone", ВыборкаНаЗаказПокупателя[0].Customer_Phone);
			 Customer.Вставить("Payer", ВыборкаНаЗаказПокупателя[0].Payer);
			 Customer.Вставить("PaymentMethod", ВыборкаНаЗаказПокупателя[0].PaymentMethod);
			 //Латыш Дмитрий 06.06.2019

			 ICN = ВыборкаНаЗаказПокупателя[0].ICN;
			 Sender = Новый Структура;
			 Sender.Вставить("Urgent",ВыборкаНаЗаказПокупателя[0].Sender_Urgent);
			 Sender.Вставить("TypeDelivery",ВыборкаНаЗаказПокупателя[0].Sender_TypeDelivery);
			 Sender.Вставить("FullAddress",ВыборкаНаЗаказПокупателя[0].Sender_FullAddress);
			 Sender.Вставить("DesiredDate",ВыборкаНаЗаказПокупателя[0].Sender_DesiredDate);
			 Sender.Вставить("PostalCode",ВыборкаНаЗаказПокупателя[0].Sender_PostalCode);
			 Sender.Вставить("Region",ВыборкаНаЗаказПокупателя[0].Sender_Region);
			 Sender.Вставить("City",ВыборкаНаЗаказПокупателя[0].Sender_City);
			 Sender.Вставить("Area",ВыборкаНаЗаказПокупателя[0].Sender_Area);
			 Sender.Вставить("Settlement",ВыборкаНаЗаказПокупателя[0].Sender_Settlement);		 
			 Sender.Вставить("Street",ВыборкаНаЗаказПокупателя[0].Sender_Street);
			 Sender.Вставить("House",ВыборкаНаЗаказПокупателя[0].Sender_House);
			 Sender.Вставить("Building",ВыборкаНаЗаказПокупателя[0].Sender_Building);
			 Sender.Вставить("Block",ВыборкаНаЗаказПокупателя[0].Sender_Block);
			 Sender.Вставить("Flat",ВыборкаНаЗаказПокупателя[0].Sender_Flat);
			 Sender.Вставить("Name",ВыборкаНаЗаказПокупателя[0].Sender_Name);
			 Sender.Вставить("Phone",ВыборкаНаЗаказПокупателя[0].Sender_Phone);
			 Sender.Вставить("Email",ВыборкаНаЗаказПокупателя[0].Sender_Email);
			 
			 Shipment = Новый Структура;
			 Shipment.Вставить("ShipmentNumber",ВыборкаНаЗаказПокупателя[0].ShipmentNumber);
			 Shipment.Вставить("ClientShipmentNumber",ВыборкаНаЗаказПокупателя[0].ClientShipmentNumber);
			 Shipment.Вставить("Barcode",ВыборкаНаЗаказПокупателя[0].Barcode);
			 Shipment.Вставить("Description",ВыборкаНаЗаказПокупателя[0].Description);
			 Shipment.Вставить("Weight",ВыборкаНаЗаказПокупателя[0].Weight);
			 Shipment.Вставить("Length",ВыборкаНаЗаказПокупателя[0].Length);
			 Shipment.Вставить("Width",ВыборкаНаЗаказПокупателя[0].Width);
			 Shipment.Вставить("Height",ВыборкаНаЗаказПокупателя[0].Height);
			 Shipment.Вставить("Comment",ВыборкаНаЗаказПокупателя[0].Comment);
			 Shipment.Вставить("DesiredDate",ВыборкаНаЗаказПокупателя[0].DesiredDate);
			 Shipment.Вставить("DesiredTimeFrom",ВыборкаНаЗаказПокупателя[0].DesiredTimeFrom);
			 Shipment.Вставить("DesiredTimeTo",ВыборкаНаЗаказПокупателя[0].DesiredTimeTo);
			 Shipment.Вставить("CodePVZ",ВыборкаНаЗаказПокупателя[0].CodePVZ);
			 Shipment.Вставить("COD",ВыборкаНаЗаказПокупателя[0].COD);
			 Shipment.Вставить("Amount",ВыборкаНаЗаказПокупателя[0].Amount);
			 
			 //Латыш Дмитрий 06.06.2019
			 Shipment.Вставить("FullVolumeWeight",ВыборкаНаЗаказПокупателя[0].FullVolumeWeight);
			 Shipment.Вставить("FullVolume",ВыборкаНаЗаказПокупателя[0].FullVolume);
			 //Латыш Дмитрий 06.06.2019

			 Services = Новый Массив;
			 Для Каждого Усл из ОбЗП.Запасы Цикл 
				 Услуги = Новый Структура;
				 Услуги.Вставить("Code", Усл.Номенклатура.Артикул);
				 Услуги.Вставить("Price", Усл.Цена);
				 Услуги.Вставить("Count", Усл.Количество);
				 Services.Добавить(Услуги);
			 КонецЦикла;			 
			 Shipment.Вставить("Services",Services);
			 
			 Recipient = Новый Структура;
			 Recipient.Вставить("WithoutDelivery",ВыборкаНаЗаказПокупателя[0].WithoutDelivery);
			 Recipient.Вставить("DeliveryPointNumber",ВыборкаНаЗаказПокупателя[0].Recipient_DeliveryPointNumber);
			 Recipient.Вставить("FullAddress",ВыборкаНаЗаказПокупателя[0].Recipient_FullAddress);
			 Recipient.Вставить("PostalCode",ВыборкаНаЗаказПокупателя[0].Recipient_PostalCode);
			 Recipient.Вставить("Region",ВыборкаНаЗаказПокупателя[0].Recipient_Region);
			 Recipient.Вставить("City",ВыборкаНаЗаказПокупателя[0].Recipient_City);
			 Recipient.Вставить("Area",ВыборкаНаЗаказПокупателя[0].Recipient_Area);
			 Recipient.Вставить("Settlement",ВыборкаНаЗаказПокупателя[0].Recipient_Settlement);
			 Recipient.Вставить("Street",ВыборкаНаЗаказПокупателя[0].Recipient_Street);
			 Recipient.Вставить("House",ВыборкаНаЗаказПокупателя[0].Recipient_House);
			 Recipient.Вставить("Building",ВыборкаНаЗаказПокупателя[0].Recipient_Building);
			 Recipient.Вставить("Block",ВыборкаНаЗаказПокупателя[0].Recipient_Block);
			 Recipient.Вставить("Flat",ВыборкаНаЗаказПокупателя[0].Recipient_Flat);
			 Recipient.Вставить("CompanyName",ВыборкаНаЗаказПокупателя[0].Recipient_CompanyName);
			 Recipient.Вставить("Name",ВыборкаНаЗаказПокупателя[0].Recipient_Name);
			 Recipient.Вставить("Phone",ВыборкаНаЗаказПокупателя[0].Recipient_Phone);
			 Recipient.Вставить("AddPhone",ВыборкаНаЗаказПокупателя[0].Recipient_AddPhone);
			 Recipient.Вставить("Phone2",ВыборкаНаЗаказПокупателя[0].Recipient_Phone2);
			 Recipient.Вставить("AddPhone2",ВыборкаНаЗаказПокупателя[0].Recipient_AddPhone2);
			 Recipient.Вставить("Email",ВыборкаНаЗаказПокупателя[0].Recipient_Email);
			 Shipment.Вставить("Recipient",Recipient);			 
						
			//Товары
			Items = Новый Массив();
			
			Для Каждого Тов из ОбЗП.ES_Грузы Цикл 
				Товары = Новый Структура;
				Товары.Вставить("Article", Тов.Артикул);
				Товары.Вставить("Name", Тов.Содержание);
				Товары.Вставить("Barcode", Тов.Штрихкод);
				Товары.Вставить("IsService", "false");
				Товары.Вставить("Price", Тов.Цена);
				Товары.Вставить("Discount", "0");
				Товары.Вставить("Count", Тов.Количество);
				Товары.Вставить("VATSum", Тов.СуммаНДС);
				Товары.Вставить("VAT", Тов.СтавкаНДС);
				Товары.Вставить("Weight", Тов.Вес);
				Товары.Вставить("Length", Тов.Длина);
				Товары.Вставить("Width", Тов.Ширина);
				Товары.Вставить("Height", Тов.Высота);
				Items.Добавить(Товары);
			КонецЦикла;
			
			Shipment.Вставить("Items",Items);
			
		КонецЕсли;
	КонецЕсли;
	//
	СоответсвиеОтвета.Вставить("ЗагрузкаУспешна",ЗагрузкаУспешна);
	СоответсвиеОтвета.Вставить("ICN",ICN);
	//  Sender
	СоответсвиеОтвета.Вставить("Sender",Sender);
	СоответсвиеОтвета.Вставить("Shipment",Shipment);
	СоответсвиеОтвета.Вставить("Is_delivered",Is_delivered);
	СоответсвиеОтвета.Вставить("ТекстОтвета",ТекстОшибки);
	
	//Латыш Дмитрий 06.06.2019
	СоответсвиеОтвета.Вставить("Customer",Customer);	
	//Латыш Дмитрий 06.06.2019

	Возврат  СоответсвиеОтвета;

КонецФункции

Функция ПолучитьСтатусыЗаказов(ОтветJSON_Соответствие, Заказчик)
	ТекстОшибки = "";
	ЗагрузкаУспешна = Истина;
	ShipmentNumber = "";
	СоответсвиеОтвета = Новый Соответствие; 
	
	ICN = ОтветJSON_Соответствие.Получить("ICN");   //это проверялось, не обработывается
	ShipmentNumber = ОтветJSON_Соответствие.Получить("ShipmentNumber");
	//ICN  - номер договора, не обработывается пока что
	Shipments = Новый Массив();
	Для Индекс = 0 По ShipmentNumber.Количество() - 1 Цикл
		//Сообщить(Массив[Индекс]);		
		
		ЗапросНаЗаказПокупателя = Новый Запрос("ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Ссылка,
		|	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа,
		|	ЗаказПокупателя.ES_НомерНакладной
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних КАК ES_СтатусыЗаказовСрезПоследних
		|		ПО ЗаказПокупателя.Ссылка = ES_СтатусыЗаказовСрезПоследних.Заказ
		|ГДЕ
		|	НЕ ЗаказПокупателя.ПометкаУдаления
		|	И ЗаказПокупателя.ES_НомерНакладной = &ES_НомерНакладной");
		ЗапросНаЗаказПокупателя.УстановитьПараметр( "ES_НомерНакладной",ShipmentNumber[Индекс]);
		
		ВыборкаНаЗаказПокупателя = ЗапросНаЗаказПокупателя.Выполнить().Выгрузить();
		//ВыборкаНаЗаказПокупателя = ЗапросНаЗаказПокупателя.Выполнить();
		ОшибкаПриПоиске = Ложь;
		Если ВыборкаНаЗаказПокупателя.Количество() = 1 Тогда 
			//ОбЗП = ВыборкаНаЗаказПокупателя[0].Ссылка.ПолучитьОбъект();
			Delivered = ВыборкаНаЗаказПокупателя[0].СтатусЗаказа;
		ИначеЕсли ВыборкаНаЗаказПокупателя.Количество() = 0 Тогда
			ОшибкаПриПоиске = Истина;
			ЗагрузкаУспешна = Ложь;
			ТекстОшибки = ТекстОшибки+"
			|Не найдено накладной с таким номером. Обратитесь к менеждеру.";
		Иначе	
			ОшибкаПриПоиске = Истина;
			ЗагрузкаУспешна = Ложь;
			ТекстОшибки = ТекстОшибки+"
			|Найдено более одной накладной. Обратитесь к менеждеру.";
		КонецЕсли;
		
		ID = Новый Структура;
		ID.Вставить("ICN ", ICN);
		ID.Вставить("ShipmentNumber ", ShipmentNumber[Индекс]);
		ID.Вставить("Is_delivered ", Delivered);
		Shipments.Добавить(ID);

		
	КонецЦикла;
	
	СоответсвиеОтвета.Вставить("ЗагрузкаУспешна",ЗагрузкаУспешна);
	СоответсвиеОтвета.Вставить("ICN",ICN);	
	СоответсвиеОтвета.Вставить("Shipments",Shipments);
	СоответсвиеОтвета.Вставить("ТекстОтвета",ТекстОшибки);
	
	Возврат  СоответсвиеОтвета;	
	
КонецФункции	

Функция ПолучитьСписокЗаказов(ОтветJSON_Соответствие, Заказчик)
	ТекстОшибки = "";
	КодОшибки = "";
	ЗагрузкаУспешна = Истина;
	Shipments = Новый Массив();
	СоответсвиеОтвета = Новый Соответствие; 
	
	ICN = ОтветJSON_Соответствие.Получить("ICN");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДоговорыКонтрагентов.Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Код = &Код
	               |	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	               |	И ДоговорыКонтрагентов.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Код",ICN);
	Запрос.УстановитьПараметр("Владелец",Заказчик);
	ТЗ_Договора = Запрос.Выполнить().Выгрузить();
	Если ТЗ_Договора.Количество() > 0 Тогда
		Договор = ТЗ_Договора[0].Ссылка;
	Иначе
		Договор = Неопределено;
	КонецЕсли;
			
	Если Не ЗначениеЗаполнено(Договор) Тогда
		ОшибкаПриПоиске = Истина;
		ЗагрузкаУспешна = Ложь;
		ТекстОшибки = ТекстОшибки+"
		|Не найден номер договора "+ICN+". Обратитесь к менеждеру.";
	КонецЕсли;
	
	Date_Start = ОтветJSON_Соответствие.Получить("Date_Start");
	Date_End = ОтветJSON_Соответствие.Получить("Date_End");
	
	// Хорошо бы ограничить выборку по периоду. Например 1 месяц.
	
	Попытка
		ДатаНачала = Дата(Date_Start);
	Исключение
		ОшибкаПриПоиске = Истина;
		ЗагрузкаУспешна = Ложь;
		ТекстОшибки = ТекстОшибки+"
		|Не верно указана Date_Start - ггггммдд.";
	КонецПопытки;
	
	Попытка
		ДатаОкончания = Дата(Date_End);
	Исключение
		ОшибкаПриПоиске = Истина;
		ЗагрузкаУспешна = Ложь;
		ТекстОшибки = ТекстОшибки+"
		|Не верно указана Date_End - ггггммдд.";
	КонецПопытки;
	
	Если ЗагрузкаУспешна Тогда
		
		ЗапросНаЗаказПокупателя = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1000
		                                       |	ЗаказПокупателя.Ссылка КАК Ссылка,
		                                       |	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа КАК СтатусЗаказа,
											   //{[*]EFSOL, Козлов Максим EFSOL 06.06.2019 14:14:21
											   |    ЗаказПокупателя.ES_ВидДоставки КАК ВидДоставки,
											   |    ЗаказПокупателя.ES_Город1 КАК ГородОтправки ,
											   //}06.06.2019 14:14:21 EFSOL 
		                                       |	ЗаказПокупателя.ES_НомерНакладной КАК ES_НомерНакладной,
		                                       |	ЗаказПокупателя.ES_Получатель КАК ES_Получатель,
		                                       |	ЗаказПокупателя.ES_ПолучательКонтактноеЛицо КАК ES_ПолучательКонтактноеЛицо,
		                                       |	ЗаказПокупателя.ES_ПолучательТелефон КАК ES_ПолучательТелефон,
		                                       |	ЗаказПокупателя.Номер КАК Номер,
		                                       |	ЗаказПокупателя.Дата КАК Дата,
		                                       |	ЗаказПокупателя.ES_ДатаДоставки КАК ES_ДатаДоставки,
		                                       |	ЗаказПокупателя.ES_АдресДоставки КАК ES_АдресДоставки,
		                                       |	ЗаказПокупателя.ES_АдресДоставкиГород КАК ES_АдресДоставкиГород,
		                                       |	СУММА(1) КАК НомерПоПорядку,
		                                       |	ЗаказПокупателя.Договор.Код КАК ДоговорКод,
		                                       |	ЕСТЬNULL(КомментарийКСтатусу.Значение, """") КАК КомментарийКСтатусу,
		                                       |	ЗаказПокупателя.ES_ВхНакладная КАК ES_ВхНакладная,
		                                       |	ЗаказПокупателя.ES_ОбщийВес КАК ES_ОбщийВес,
		                                       |	ЗаказПокупателя.ES_ОбщийОбъемныйВес КАК ES_ОбщийОбъемныйВес,
		                                       |	ЗаказПокупателя.ES_КоличествоМест КАК ES_КоличествоМест,
		                                       |	ЗаказПокупателя.ES_НППлан КАК ES_НППлан,
		                                       |	ЗаказПокупателя.ES_ОбьявленнаяСтоимость КАК ES_ОбьявленнаяСтоимость,
		                                       |	ЗаказПокупателя.ES_СтоимостьДоставки КАК ES_СтоимостьДоставки
		                                       |ПОМЕСТИТЬ ВТ_
		                                       |ИЗ
		                                       |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		                                       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних КАК ES_СтатусыЗаказовСрезПоследних
		                                       |		ПО ЗаказПокупателя.Ссылка = ES_СтатусыЗаказовСрезПоследних.Заказ
		                                       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(, РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.КомментарийСтатуса)) КАК КомментарийКСтатусу
		                                       |		ПО ЗаказПокупателя.Ссылка = КомментарийКСтатусу.Заказ
		                                       |ГДЕ
		                                       |	НЕ ЗаказПокупателя.ПометкаУдаления
		                                       |	И ЗаказПокупателя.Дата МЕЖДУ &Date_Start И &Date_End
		                                       |	И ЗаказПокупателя.Договор = &ICN
		                                       |
		                                       |СГРУППИРОВАТЬ ПО
		                                       |	ЗаказПокупателя.Ссылка,
		                                       |	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа,
		                                       |	ЗаказПокупателя.ES_НомерНакладной,
		                                       |	ЗаказПокупателя.ES_Получатель,
		                                       |	ЗаказПокупателя.ES_ПолучательКонтактноеЛицо,
		                                       |	ЗаказПокупателя.ES_ПолучательТелефон,
		                                       |	ЗаказПокупателя.Номер,
		                                       |	ЗаказПокупателя.Дата,
		                                       |	ЗаказПокупателя.ES_ДатаДоставки,
		                                       |	ЗаказПокупателя.ES_АдресДоставки,
		                                       |	ЗаказПокупателя.Договор.Код,
		                                       |	ЕСТЬNULL(КомментарийКСтатусу.Значение, """"),
		                                       |	ЗаказПокупателя.ES_ВхНакладная,
		                                       |	ЗаказПокупателя.ES_АдресДоставкиГород
		                                       |;
		                                       |
		                                       |////////////////////////////////////////////////////////////////////////////////
		                                       |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                                       |	ES_СтартовыеНастройки.Значение КАК УслугаДоставки
		                                       |ПОМЕСТИТЬ ВТ_УслугаДоставки
		                                       |ИЗ
		                                       |	РегистрСведений.ES_СтартовыеНастройки КАК ES_СтартовыеНастройки
		                                       |ГДЕ
		                                       |	ES_СтартовыеНастройки.ВидСтартовойНастройки = ЗНАЧЕНИЕ(Перечисление.ES_ВидыСтартовыхнастроек.УслугаДоставки)
		                                       |;
		                                       |
		                                       |////////////////////////////////////////////////////////////////////////////////
		                                       |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                                       |	ЗаказПокупателяЗапасы.Ссылка КАК Ссылка,
		                                       |	СУММА(ЗаказПокупателяЗапасы.Всего) КАК Всего
		                                       |ПОМЕСТИТЬ ВТ_СтоимостьУслугиДоставки
		                                       |ИЗ
		                                       |	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
		                                       |ГДЕ
		                                       |	ЗаказПокупателяЗапасы.Ссылка В
		                                       |			(ВЫБРАТЬ
		                                       |				ВТ_.Ссылка КАК Ссылка
		                                       |			ИЗ
		                                       |				ВТ_ КАК ВТ_)
		                                       |	И ЗаказПокупателяЗапасы.Номенклатура В
		                                       |			(ВЫБРАТЬ
		                                       |				ВТ_УслугаДоставки.УслугаДоставки КАК УслугаДоставки
		                                       |			ИЗ
		                                       |				ВТ_УслугаДоставки КАК ВТ_УслугаДоставки)
		                                       |
		                                       |СГРУППИРОВАТЬ ПО
		                                       |	ЗаказПокупателяЗапасы.Ссылка
		                                       |;
		                                       |
		                                       |////////////////////////////////////////////////////////////////////////////////
		                                       |ВЫБРАТЬ
		                                       |	ВТ_.Ссылка КАК Ссылка,
		                                       |	ВТ_.СтатусЗаказа КАК СтатусЗаказа,
											    //{[*]EFSOL, Козлов Максим EFSOL 06.06.2019 14:14:21
											   |    ВТ_.ВидДоставки КАК ВидДоставки,
											   |    ВТ_.ГородОтправки КАК ГородОтправки ,
											   //}06.06.2019 14:14:21 EFSOL
		                                       |	ВТ_.ES_НомерНакладной КАК ES_НомерНакладной,
		                                       |	ВТ_.ES_Получатель КАК ES_Получатель,
		                                       |	ВТ_.ES_ПолучательКонтактноеЛицо КАК ES_ПолучательКонтактноеЛицо,
		                                       |	ВТ_.ES_ПолучательТелефон КАК ES_ПолучательТелефон,
		                                       |	ВТ_.Номер КАК Номер,
		                                       |	ВТ_.Дата КАК Дата,
		                                       |	ВТ_.ES_ДатаДоставки КАК ES_ДатаДоставки,
		                                       |	ВТ_.ES_АдресДоставки КАК ES_АдресДоставки,
		                                       |	ВТ_.ES_АдресДоставкиГород КАК ES_АдресДоставкиГород,
		                                       |	ВТ_.НомерПоПорядку КАК НомерПоПорядку,
		                                       |	ВТ_.ДоговорКод КАК ДоговорКод,
		                                       |	ВТ_.КомментарийКСтатусу КАК КомментарийКСтатусу,
		                                       |	ВТ_.ES_ВхНакладная КАК ES_ВхНакладная,
		                                       |	ВТ_.ES_ОбщийВес КАК ES_ОбщийВес,
		                                       |	ВТ_.ES_ОбщийОбъемныйВес КАК ES_ОбщийОбъемныйВес,
		                                       |	ВТ_.ES_КоличествоМест КАК ES_КоличествоМест,
		                                       |	ВТ_.ES_НППлан КАК ES_НППлан,
		                                       |	ВТ_.ES_ОбьявленнаяСтоимость КАК ES_ОбьявленнаяСтоимость,
		                                       |	ВТ_.ES_СтоимостьДоставки КАК Total,
		                                       |	ВТ_СтоимостьУслугиДоставки.Всего КАК DeliveryPrice
		                                       |ИЗ
		                                       |	ВТ_ КАК ВТ_
		                                       |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостьУслугиДоставки КАК ВТ_СтоимостьУслугиДоставки
		                                       |		ПО ВТ_.Ссылка = ВТ_СтоимостьУслугиДоставки.Ссылка");
		ЗапросНаЗаказПокупателя.УстановитьПараметр( "ICN",Договор);
		ЗапросНаЗаказПокупателя.УстановитьПараметр( "Date_Start",НачалоДня(ДатаНачала));
		ЗапросНаЗаказПокупателя.УстановитьПараметр( "Date_End",КонецДня(ДатаОкончания));
		
		ВыборкаНаЗаказПокупателя = ЗапросНаЗаказПокупателя.Выполнить().Выгрузить();	
		//ВыборкаНаЗаказПокупателя = РезультатЗапроса.Выбрать();
		
		Если ВыборкаНаЗаказПокупателя.Количество()>0 Тогда
			
			Для Каждого Стр Из ВыборкаНаЗаказПокупателя Цикл
				// Вставить обработку выборки ВыборкаДетальныеЗаписи
				
				
				
				ОшибкаПриПоиске = Ложь;
				DesiredDate      = Стр.ES_ДатаДоставки;
				Number 			 = Стр.Номер;
				Date			 = Стр.Дата;
				//Recipient - Получатель
				Recipient         			  = Стр.ES_Получатель;
				Recipient_Name      		  = Стр.ES_ПолучательКонтактноеЛицо;
				Recipient_Phone               = Стр.ES_ПолучательТелефон;
				Recipient_FullAddress         = Стр.ES_АдресДоставки;
				Recipient_City                = Стр.ES_АдресДоставкиГород;
				Delivered 					  = Стр.СтатусЗаказа;
				DeliveredComents			  = Стр.КомментарийКСтатусу;
				ES_НомерНакладной 			  = Стр.ES_НомерНакладной;
				ES_ВхНакладная	 			  = Стр.ES_ВхНакладная;
				Weight						  = Стр.ES_ОбщийВес;
				VolumeWeight				  = Стр.ES_ОбщийОбъемныйВес;
				Places						  = Стр.ES_КоличествоМест;
				CashOfDelivery				  = Стр.ES_НППлан;
				DeclaredValue				  = Стр.ES_ОбьявленнаяСтоимость;
				Total						  = Стр.Total;
				DeliveryPrice				  = Стр.DeliveryPrice;
				
				//{[+]EFSOL, Козлов Максим 06.06.2019 14:26:55
				// sender - отправитель
				Sender_City						= Стр.ГородОтправки;
				DeliveryType                    = Стр.ВидДоставки;
				//}06.06.2019 14:26:55 EFSOL

				ID = Новый Структура;
				ID.Вставить("Number ", Number);
				ID.Вставить("ShipmentNumber ", ES_НомерНакладной);
				ID.Вставить("ClientShipmentNumber", ES_ВхНакладная);
				ID.Вставить("Date ", Date);
				ID.Вставить("DesiredDate ", DesiredDate);
				ID.Вставить("Is_delivered ", Delivered);
				ID.Вставить("Is_deliveredComents", DeliveredComents);
				ID.Вставить("Recipient ", Recipient);
				ID.Вставить("Recipient_Name ", Recipient_Name);
				ID.Вставить("Recipient_Phone ", Recipient_Phone);
				ID.Вставить("Recipient_City ", Recipient_City);
				ID.Вставить("Recipient_FullAddress ", Recipient_FullAddress);
				ID.Вставить("Weight ", Weight);
				ID.Вставить("VolumeWeight ", VolumeWeight);
				ID.Вставить("Places ", Places);
				ID.Вставить("CashOfDelivery ", CashOfDelivery);
				ID.Вставить("DeclaredValue ", DeclaredValue);
				ID.Вставить("Total ", Total);
				ID.Вставить("DeliveryPrice ", DeliveryPrice);
				
				//{[+]EFSOL, Козлов Максим 06.06.2019 14:29:59
				ID.Вставить("Sender_City ", Sender_City);
				ID.Вставить("DeliveryType ", DeliveryType);
				//}06.06.2019 14:29:59 EFSOL

				Shipments.Добавить(ID);
			КонецЦикла;
			
		Иначе
			ОшибкаПриПоиске = Истина;
			ЗагрузкаУспешна = Ложь;
			КодОшибки = 1;
			ТекстОшибки = ТекстОшибки+"
			|Не найдено ни одной накладной за период. Обратитесь к менеждеру.";
		КонецЕсли;
	КонецЕсли;	
	
	СоответсвиеОтвета.Вставить("ЗагрузкаУспешна",ЗагрузкаУспешна);
	СоответсвиеОтвета.Вставить("ICN",ICN);
	СоответсвиеОтвета.Вставить("КодОшибки",КодОшибки);
	СоответсвиеОтвета.Вставить("Shipments",Shipments);
	СоответсвиеОтвета.Вставить("ТекстОтвета",ТекстОшибки);
	
	Возврат  СоответсвиеОтвета;	
	
КонецФункции	

Функция ПолучитьСписокЗаказовНаСбор(ОтветJSON_Соответствие, Заказчик)
	ТекстОшибки = "";
	КодОшибки = "";
	ЗагрузкаУспешна = Истина;
	Orders = Новый Массив();
	СоответсвиеОтвета = Новый Соответствие; 
	
	ICN = ОтветJSON_Соответствие.Получить("ICN");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДоговорыКонтрагентов.Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Код = &Код
	               |	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	               |	И ДоговорыКонтрагентов.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Код",ICN);
	Запрос.УстановитьПараметр("Владелец",Заказчик);
	ТЗ_Договора = Запрос.Выполнить().Выгрузить();
	Если ТЗ_Договора.Количество() > 0 Тогда
		Договор = ТЗ_Договора[0].Ссылка;
	Иначе
		Договор = Неопределено;
	КонецЕсли;
			
	Если Не ЗначениеЗаполнено(Договор) Тогда
		ОшибкаПриПоиске = Истина;
		ЗагрузкаУспешна = Ложь;
		ТекстОшибки = ТекстОшибки+"
		|Не найден номер договора "+ICN+". Обратитесь к менеждеру.";
	КонецЕсли;
	
	Date_Start = ОтветJSON_Соответствие.Получить("Date_Start");
	Date_End = ОтветJSON_Соответствие.Получить("Date_End");
	
	Попытка
		ДатаНачала = Дата(Date_Start);
	Исключение
		ОшибкаПриПоиске = Истина;
		ЗагрузкаУспешна = Ложь;
		ТекстОшибки = ТекстОшибки+"
		|Не верно указана Date_Start - ггггммдд.";
	КонецПопытки;
	
	Попытка
		ДатаОкончания = Дата(Date_End);
	Исключение
		ОшибкаПриПоиске = Истина;
		ЗагрузкаУспешна = Ложь;
		ТекстОшибки = ТекстОшибки+"
		|Не верно указана Date_End - ггггммдд.";
	КонецПопытки;
	
	Если ЗагрузкаУспешна Тогда
		ЗапросНаЗаборГруза = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ES_СтатусыЗаборовСрезПоследних.СтатусЗабора,
		|	ES_ЗаборГруза.Номер,
		|	ES_ЗаборГруза.Дата,
		|	ES_ЗаборГруза.ДатаЗабора,
		|	ES_ЗаборГруза.НомерНакладной,
		|	ES_ЗаборГруза.Заказчик,
		|	ES_ЗаборГруза.Отправитель,
		|	ES_ЗаборГруза.КонтактноеЛицо,
		|	ES_ЗаборГруза.Телефон,
		|	ES_ЗаборГруза.Адрес,
		|	ES_ЗаборГруза.Курьер,
		|	ES_ЗаборГруза.Автор,
		|	ES_ЗаборГруза.Ответственный,
		|	ES_ЗаборГруза.ES_КомментарийКурьера,
		|	ES_ЗаборГруза.Срочность,
		|	ES_ЗаборГруза.ДокументОснование,
		|	ES_ЗаборГруза.ES_Договор.Код
		|ИЗ
		|	Документ.ES_ЗаборГруза КАК ES_ЗаборГруза
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаборов.СрезПоследних КАК ES_СтатусыЗаборовСрезПоследних
		|		ПО ES_ЗаборГруза.Ссылка = ES_СтатусыЗаборовСрезПоследних.Забор
		|ГДЕ
		|	ES_ЗаборГруза.Дата МЕЖДУ &Date_Start И &Date_End
		|	И НЕ ES_ЗаборГруза.ПометкаУдаления
		|	И ES_ЗаборГруза.ES_Договор = &ICN");
		
		ЗапросНаЗаборГруза.УстановитьПараметр( "ICN",Договор);
		ЗапросНаЗаборГруза.УстановитьПараметр( "Date_Start",НачалоДня(Date_Start));
		ЗапросНаЗаборГруза.УстановитьПараметр( "Date_End",КонецДня(Date_End));
		
		Выборка = ЗапросНаЗаборГруза.Выполнить().Выгрузить();	
		//ВыборкаНаЗаказПокупателя = РезультатЗапроса.Выбрать();
		
		КоличествоЗаписей = ЗапросНаЗаборГруза.Выполнить ().Выбрать().Количество();
		//Пока ВыборкаНаЗаказПокупателя.Следующий() Цикл
		//Для Индекс = 0 По КоличествоЗаписей - 1 Цикл //ВыборкаНаЗаказПокупателя[0].НомерПоПорядку - 1 Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		
		Если Выборка.Количество() > 0 Тогда
			
			Для Каждого Стр Из Выборка Цикл
				
				ОшибкаПриПоиске = Ложь;
				Delivered 					  = Стр.СтатусЗабора;    
				ES_НомерНакладной 			  = Стр.НомерНакладной;  
				Number 			 = Стр.Номер;
				Date			 = Стр.Дата;
				CollectionDate   = Стр.ДатаЗабора;
				Urgency          = Стр.Срочность;
				Responsible      = Стр.Ответственный;
				Base             = Стр.ДокументОснование;
				//Recipient - Получатель
				Recipient         			  = Стр.Заказчик;
				//Sender - Отправитель
				Sender				          = Стр.Отправитель;
				Sender_Name                   = Стр.КонтактноеЛицо;
				Sender_Phone				  = Стр.Телефон;
				Sender_Adress                 = Стр.Адрес;	
				//Courier - Отправитель
				Courier				          = Стр.Курьер;
				Courier_Comment		          = Стр.ES_КомментарийКурьера;
				//Author
				Author		                  = Стр.Автор;	
				
				ID = Новый Структура;
				ID.Вставить("OrderState ", Delivered);
				ID.Вставить("ShipmentNumber ", ES_НомерНакладной);
				ID.Вставить("Number ", Number);
				ID.Вставить("Date ", Date);
				ID.Вставить("CollectionDate ", CollectionDate);	
				ID.Вставить("Urgency ", Urgency);
				ID.Вставить("Responsible ", Responsible);
				ID.Вставить("Base ", Base);
				ID.Вставить("Recipient ", Recipient);
				ID.Вставить("Sender ", Sender);
				ID.Вставить("Sender_Name ", Sender_Name);
				ID.Вставить("Sender_Phone ", Sender_Phone);
				ID.Вставить("Sender_Adress ", Sender_Adress);
				ID.Вставить("Courier ", Courier);
				ID.Вставить("Courier_Comment ", Courier_Comment);
				ID.Вставить("Author ", Author);
				
				Orders.Добавить(ID);
			КонецЦикла;
			
		Иначе
			ОшибкаПриПоиске = Истина;
			ЗагрузкаУспешна = Ложь;
			КодОшибки = 1;
			ТекстОшибки = ТекстОшибки+"
			|Не найдено ни одной накладной за период. Обратитесь к менеждеру.";
		КонецЕсли;
		//Индекс = Индекс + 1;
		
	КонецЕсли;
	
	СоответсвиеОтвета.Вставить("ЗагрузкаУспешна",ЗагрузкаУспешна);
	СоответсвиеОтвета.Вставить("ICN",ICN);
	СоответсвиеОтвета.Вставить("КодОшибки",КодОшибки);
	СоответсвиеОтвета.Вставить("Orders",Orders);
	СоответсвиеОтвета.Вставить("ТекстОтвета",ТекстОшибки);
	
	Возврат  СоответсвиеОтвета;	
	
КонецФункции	


#КонецОбласти

#Область Наклека
Функция ПолучитьНаклейки(Запрос) Экспорт
	//EFSOL_Шаповал Олег Анатольевич 23 августа 2017 г. 12:41:19 +
	Ответ = Новый HTTPСервисОтвет(302);
	ТаблицаЗначенийОтвета  = Новый ТаблицаЗначений();
	ТаблицаЗначенийОтвета.Колонки.Добавить("Stickers");
	СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
	СТ_Доб.Stickers = "";
	
	SessionId = ПолучитьIDСесси(Запрос);
	//провериьт на SessionId !!!
	ЗапросСесии = новый Запрос("ВЫБРАТЬ
						|	NS_СессииЛК.id,
						|	NS_СессииЛК.Начата,
						|	NS_СессииЛК.Истекает,
						|	NS_СессииЛК.Контрагент,
						|	NS_СессииЛК.ЗакрытаСамостоятельно
						|ИЗ
						|	РегистрСведений.NS_СессииЛК КАК NS_СессииЛК
						|ГДЕ
						|	NS_СессииЛК.id = &id
						|	И NS_СессииЛК.Истекает >=&ДатаТек
						|	И NS_СессииЛК.Начата <= &ДатаТек
						|	И НЕ NS_СессииЛК.ЗакрытаСамостоятельно");
	
	ЗапросСесии.УстановитьПараметр("id",СокрЛП(SessionId));
	ЗапросСесии.УстановитьПараметр("ДатаТек",ТекущаяДата());
	
	Выборка = ЗапросСесии.Выполнить().Выгрузить();
	Если Выборка.Количество()= 0 Тогда 
		СообщениеОшибки=  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"GetStickers",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	
	ИначеЕсли   Выборка.Количество()= 1 Тогда  
		
		ТекТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
		ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
		ОтветJSON =  ОбработкаJSON.UnJSON(ТекТекстЗапроса);
		
		//надо ОтветJSON проверить на правильность заполнения!!!
		ОтветНаПроверкуСтруктурыGetStickers = ПроверитьСтруктуруВходаGetStickers(ОтветJSON);
		ПрошлаПроверку = ОтветНаПроверкуСтруктурыGetStickers.Получить("ПрошлаПроверку");
		Если ПрошлаПроверку Тогда 
			
			//Надо напечатать наклейки
			ОтветОбработки = ВыполнитьПечатьНаклеек(ОтветJSON);
			//
			ЗагрузкаУспешна = ОтветОбработки.Получить("ЗагрузкаУспешна") ;
			Stickers		    = ОтветОбработки.Получить("Stickers") ;
			ТекстОтвета     = ОтветОбработки.Получить("ТекстОтвета") ;
			//
			ОшибкаВОтвете = Не ЗагрузкаУспешна;
			//
			ТаблицаЗначенийОтвета.Очистить();
			СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
			СТ_Доб.Stickers = Stickers;
			
			СообщениеОтветЗаписи =  ОписаниеОтветаСгенерить(ТекстОтвета,ОшибкаВОтвете,"GetStickers",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОтветЗаписи); 

		Иначе
			ТекстТек =  ОтветНаПроверкуСтруктурыGetStickers.Получить("ТекстОшибки") ;
			СообщениеОшибки=  ОписаниеОтветаСгенерить(ТекстТек,Истина,"GetStickers",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
		КонецЕсли;
	Иначе 
		СообщениеОшибки=  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"GetStickers",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	КонецЕсли;
	 		
	Возврат Ответ;
	//EFSOL Шаповал О.А. -	
КонецФункции

Функция ПроверитьСтруктуруВходаGetStickers(ОтветJSON_Соответствие)
	//EFSOL_Шаповал Олег Анатольевич 16 августа 2017 г. 13:00:15 +
	ТекстОшибки = "";
	СоответствиеПроверки = Новый Соответствие;
	
	Если ТипЗнч(ОтветJSON_Соответствие) = Тип("Соответствие") Тогда 
		//{
		//“ICN”:		“<индивидуальный номер клиента>”,
		//"Invoices":    "<массив с номерами накладных>"
		//}
		
		ICN 			= ОтветJSON_Соответствие.Получить("ICN");
		Invoices 		= ОтветJSON_Соответствие.Получить("Invoices"); // массив
		
		Если НЕ ТипЗнч(Invoices) = Тип("Массив") Тогда 
			ТекстОшибки = ТекстОшибки +"
			|Структура не соответствует. Invoices должен быть массивом."; 
		КонецЕсли;
		
	Иначе
		ТекстОшибки = "Структура не соответствует. Необходимо проверить текст вызова.";
	КонецЕсли;
	
	СоответствиеПроверки.Вставить("ТекстОшибки",ТекстОшибки);
	
	Если ТекстОшибки = "" Тогда 
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Истина);
	Иначе
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Ложь);
	КонецЕсли;
	
	Возврат  СоответствиеПроверки;
	//EFSOL Шаповал О.А. -	
КонецФункции

Функция ВыполнитьПечатьНаклеек(ОтветJSON_Соответствие) 
	//EFSOL_Шаповал Олег Анатольевич 23 августа 2017 г. 15:38:08 +
	ТекстОшибки = "";
	ЗагрузкаУспешна = Истина;
	СоответсвиеОтвета = Новый Соответствие;
	Stickers = Неопределено;
	
	Invoices = ОтветJSON_Соответствие.Получить("Invoices");  // массив
	
	Если Invoices.Количество() > 0 Тогда		
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказПокупателя.Ссылка
		               |ИЗ
		               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		               |ГДЕ
		               |	ЗаказПокупателя.ES_НомерНакладной В(&СписокНакладных)
		               |	И ЗаказПокупателя.Проведен";
		Запрос.УстановитьПараметр("СписокНакладных",Invoices);
		ТЗ = Запрос.Выполнить().Выгрузить();
		
		Если ТЗ.Количество() = Invoices.Количество() Тогда
			// печатаем
			ТабДок = Документы.ЗаказПокупателя.ПечатьESСтикер(ТЗ.ВыгрузитьКолонку("Ссылка"),Неопределено,"ПФ_MXL_ES_Стикер");
			ИмяФайла = ПолучитьИмяВременногоФайла("pdf");
			ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.PDF);
			ДвоичныеДанные = Новый ДвоичныеДанные (ИмяФайла);
			Stickers = Base64Строка(ДвоичныеДанные);
			//Stickers = Новый ДвоичныеДанные(ИмяФайла);
		Иначе
			ЗагрузкаУспешна = Ложь;
			ТекстОшибки = ТекстОшибки+"
			|Не найдены накладные для печати. Обратитесь к менеждеру.";
		КонецЕсли;
	Иначе
		ЗагрузкаУспешна = Ложь;
		ТекстОшибки = ТекстОшибки+"
		|Не выбраны заказы для печати наклейки.";
	КонецЕсли;	
	
	СоответсвиеОтвета.Вставить("ЗагрузкаУспешна",ЗагрузкаУспешна);
	СоответсвиеОтвета.Вставить("Stickers",Stickers);
	СоответсвиеОтвета.Вставить("ТекстОтвета",ТекстОшибки);
	
	Возврат  СоответсвиеОтвета;
	
	//EFSOL Шаповал О.А. -
КонецФункции
#КонецОбласти

#Область ИнфоОКлиенте
Функция ПолучитьИнформациюОКлиенте(Запрос) Экспорт
	//EFSOL_Шаповал Олег Анатольевич 23 августа 2017 г. 12:41:19 +
	Ответ = Новый HTTPСервисОтвет(302);
	ТаблицаЗначенийОтвета  = Новый ТаблицаЗначений();
	ТаблицаЗначенийОтвета.Колонки.Добавить("Info");
	СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
	СТ_Доб.Info = "";
	
	SessionId = ПолучитьIDСесси(Запрос);
	//провериьт на SessionId !!!
	ЗапросСесии = новый Запрос("ВЫБРАТЬ
						|	NS_СессииЛК.id,
						|	NS_СессииЛК.Начата,
						|	NS_СессииЛК.Истекает,
						|	NS_СессииЛК.Контрагент,
						|	NS_СессииЛК.ЗакрытаСамостоятельно
						|ИЗ
						|	РегистрСведений.NS_СессииЛК КАК NS_СессииЛК
						|ГДЕ
						|	NS_СессииЛК.id = &id
						|	И NS_СессииЛК.Истекает >=&ДатаТек
						|	И NS_СессииЛК.Начата <= &ДатаТек
						|	И НЕ NS_СессииЛК.ЗакрытаСамостоятельно");
	
	ЗапросСесии.УстановитьПараметр("id",СокрЛП(SessionId));
	ЗапросСесии.УстановитьПараметр("ДатаТек",ТекущаяДата());
	
	Выборка = ЗапросСесии.Выполнить().Выгрузить();
	Если Выборка.Количество()= 0 Тогда 
		СообщениеОшибки=  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"CustomerInfo",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	
	ИначеЕсли Выборка.Количество()= 1 Тогда  
		
		ТекТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
		ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
		ОтветJSON =  ОбработкаJSON.UnJSON(ТекТекстЗапроса);
		
		//надо ОтветJSON проверить на правильность заполнения!!!
		ОтветНаПроверкуСтруктурыCustomerInfo = ПроверитьСтруктуруВходаCustomerInfo(ОтветJSON);
		ПрошлаПроверку = ОтветНаПроверкуСтруктурыCustomerInfo.Получить("ПрошлаПроверку");
		Если ПрошлаПроверку Тогда 
			
			//Надо напечатать наклейки
			ОтветОбработки = ОбработатьИнформациюОКлиенте(ОтветJSON, Выборка[0].Контрагент);
			//
			ЗагрузкаУспешна = ОтветОбработки.Получить("ЗагрузкаУспешна") ;
			Info		    = ОтветОбработки.Получить("Info") ;
			ТекстОтвета     = ОтветОбработки.Получить("ТекстОтвета") ;
			//
			ОшибкаВОтвете = Не ЗагрузкаУспешна;
			//
			ТаблицаЗначенийОтвета.Очистить();
			СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
			СТ_Доб.Info = Info;
			
			СообщениеОтветЗаписи =  ОписаниеОтветаСгенерить(ТекстОтвета,ОшибкаВОтвете,"CustomerInfo",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОтветЗаписи); 

		Иначе
			ТекстТек =  ОтветНаПроверкуСтруктурыCustomerInfo.Получить("ТекстОшибки") ;
			СообщениеОшибки=  ОписаниеОтветаСгенерить(ТекстТек,Истина,"CustomerInfo",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
		КонецЕсли;
	Иначе 
		СообщениеОшибки=  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"CustomerInfo",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	КонецЕсли;
	 		
	Возврат Ответ;
	//EFSOL Шаповал О.А. -	
КонецФункции

Функция ПроверитьСтруктуруВходаCustomerInfo(ОтветJSON_Соответствие)
	//EFSOL_Шаповал Олег Анатольевич 16 августа 2017 г. 13:00:15 +
	ТекстОшибки = "";
	СоответствиеПроверки = Новый Соответствие;
	
	Если ТипЗнч(ОтветJSON_Соответствие) = Тип("Соответствие") Тогда 
		//{
		//"ClientID":    "<номер клиента>"
		//}
		
		ClientID		= ОтветJSON_Соответствие.Получить("ClientID");
		ТекстОшибки = ПроверитьНаЗаполениеИТип(ClientID,Тип("Строка"),ТекстОшибки,"ClientID");
		
	Иначе
		ТекстОшибки = "Структура не соответствует. Необходимо проверить текст вызова.";
	КонецЕсли;
	
	СоответствиеПроверки.Вставить("ТекстОшибки",ТекстОшибки);
	
	Если ТекстОшибки = "" Тогда 
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Истина);
	Иначе
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Ложь);
	КонецЕсли;
	
	Возврат  СоответствиеПроверки;
	//EFSOL Шаповал О.А. -	
КонецФункции

Функция ОбработатьИнформациюОКлиенте(ОтветJSON_Соответствие,Контрагент) 
	//EFSOL_Шаповал Олег Анатольевич 23 августа 2017 г. 15:38:08 +
	ТекстОшибки = "";
	ЗагрузкаУспешна = Истина;
	СоответсвиеОтвета = Новый Соответствие;
	Info = Неопределено;
	
	ClientID = ОтветJSON_Соответствие.Получить("ClientID");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Контрагенты.Ссылка
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.Код = &Код";
	Запрос.УстановитьПараметр("Код",ClientID);
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ТЗ.Количество() = 1 Тогда
		Контрагент = ТЗ[0].Ссылка;
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура;
	
	СтруктураОтвета.Вставить("CompanyName",Контрагент.Наименование);
	СтруктураОтвета.Вставить("Name",?(ЗначениеЗаполнено(Контрагент.ФИО),Контрагент.ФИО,Контрагент.КонтактноеЛицо.Наименование));
	СтруктураОтвета.Вставить("ZAO",?(Контрагент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо,"true","false"));
	
	ЗапросИКН = Новый Запрос;
	ЗапросИКН.Текст = "ВЫБРАТЬ
	                  |	ДоговорыКонтрагентов.Код
	                  |ИЗ
	                  |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	                  |ГДЕ
	                  |	ДоговорыКонтрагентов.Владелец = &Владелец
	                  |	И не ДоговорыКонтрагентов.ПометкаУдаления";
	ЗапросИКН.УстановитьПараметр("Владелец",Контрагент);
	ТЗ = ЗапросИКН.Выполнить().Выгрузить();
	СтруктураОтвета.Вставить("ICN",ТЗ.ВыгрузитьКолонку("Код"));
	
	ЗапросКонтакты = Новый Запрос;
	ЗапросКонтакты.Текст = "ВЫБРАТЬ
	                       |	КонтрагентыКонтактнаяИнформация.Ссылка,
	                       |	КонтрагентыКонтактнаяИнформация.НомерСтроки,
	                       |	КонтрагентыКонтактнаяИнформация.Тип,
	                       |	КонтрагентыКонтактнаяИнформация.Вид,
	                       |	КонтрагентыКонтактнаяИнформация.Представление,
	                       |	КонтрагентыКонтактнаяИнформация.ЗначенияПолей,
	                       |	КонтрагентыКонтактнаяИнформация.Страна,
	                       |	КонтрагентыКонтактнаяИнформация.Регион,
	                       |	КонтрагентыКонтактнаяИнформация.Город,
	                       |	КонтрагентыКонтактнаяИнформация.АдресЭП,
	                       |	КонтрагентыКонтактнаяИнформация.ДоменноеИмяСервера,
	                       |	КонтрагентыКонтактнаяИнформация.НомерТелефона,
	                       |	КонтрагентыКонтактнаяИнформация.НомерТелефонаБезКодов
	                       |ИЗ
	                       |	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	                       |ГДЕ
	                       |	КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка";
	ЗапросКонтакты.УстановитьПараметр("Ссылка",Контрагент);
	Выборка = ЗапросКонтакты.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента или Выборка.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица Тогда
			СтруктураОтвета.Вставить("Phone",Выборка.Представление);
		ИначеЕсли Выборка.Вид = Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета Тогда
			СтруктураОтвета.Вставить("City",Выборка.Представление);
		ИначеЕсли Выборка.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента или Выборка.Вид = Справочники.ВидыКонтактнойИнформации.EmailФизическиеЛица Тогда
			СтруктураОтвета.Вставить("Email",Выборка.Представление);
		КонецЕсли;
	КонецЦикла;
		
	
	СоответсвиеОтвета.Вставить("ЗагрузкаУспешна",ЗагрузкаУспешна);
	СоответсвиеОтвета.Вставить("Info",СтруктураОтвета);
	СоответсвиеОтвета.Вставить("ТекстОтвета",ТекстОшибки);
	
	Возврат  СоответсвиеОтвета;
	
	//EFSOL Шаповал О.А. -
КонецФункции
#КонецОбласти

#Область РасчетСтоимостиДоставки
Функция ПолучитьСтоимостьДоставки(Запрос) Экспорт
	//EFSOL_Шаповал Олег Анатольевич 23 августа 2017 г. 12:41:19 +
	Ответ = Новый HTTPСервисОтвет(302);
	ТаблицаЗначенийОтвета  = Новый ТаблицаЗначений();
	ТаблицаЗначенийОтвета.Колонки.Добавить("PriceDelivery");
	ТаблицаЗначенийОтвета.Колонки.Добавить("TimeDelivery");
	ТаблицаЗначенийОтвета.Колонки.Добавить("Services");
	ТаблицаЗначенийОтвета.Колонки.Добавить("TotalSum");
	СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
	СТ_Доб.PriceDelivery = "нет данных";
	СТ_Доб.TimeDelivery  = "нет данных";
	СТ_Доб.Services = новый Массив;
	СТ_Доб.TotalSum = 0;
	
	SessionId = ПолучитьIDСесси(Запрос);
	//провериьт на SessionId !!!
	ЗапросСесии = новый Запрос("ВЫБРАТЬ
						|	NS_СессииЛК.id,
						|	NS_СессииЛК.Начата,
						|	NS_СессииЛК.Истекает,
						|	NS_СессииЛК.Контрагент,
						|	NS_СессииЛК.ЗакрытаСамостоятельно
						|ИЗ
						|	РегистрСведений.NS_СессииЛК КАК NS_СессииЛК
						|ГДЕ
						|	NS_СессииЛК.id = &id
						|	И NS_СессииЛК.Истекает >=&ДатаТек
						|	И NS_СессииЛК.Начата <= &ДатаТек
						|	И НЕ NS_СессииЛК.ЗакрытаСамостоятельно");
	
	ЗапросСесии.УстановитьПараметр("id",СокрЛП(SessionId));
	ЗапросСесии.УстановитьПараметр("ДатаТек",ТекущаяДата());
	
	Выборка = ЗапросСесии.Выполнить().Выгрузить();
	//Если Выборка.Количество()= 0 Тогда 
	//	СообщениеОшибки=  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"DeliveryPrice",ТаблицаЗначенийОтвета);
	//	Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	
//Иначе
	Если Выборка.Количество()= 1 ИЛИ Выборка.Количество()= 0 Тогда  
		
		ТекТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
		ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
		ОтветJSON =  ОбработкаJSON.UnJSON(ТекТекстЗапроса);
		
		//надо ОтветJSON проверить на правильность заполнения!!!
		ОтветНаПроверкуСтруктурыDeliveryPrice = ПроверитьСтруктуруВходаDeliveryPrice(ОтветJSON);
		ПрошлаПроверку = ОтветНаПроверкуСтруктурыDeliveryPrice.Получить("ПрошлаПроверку");
		Если ПрошлаПроверку Тогда 
			
			//Надо напечатать наклейки
			ОтветОбработки = ОбработатьСтоимостьОтправления(ОтветJSON,?(Выборка.Количество()= 1,Выборка[0].Контрагент,Справочники.Контрагенты.ПустаяСсылка()));
			//
			ЗагрузкаУспешна = ОтветОбработки.Получить("ЗагрузкаУспешна") ;
			PriceDelivery	= ОтветОбработки.Получить("PriceDelivery") ;
			TimeDelivery	= ОтветОбработки.Получить("TimeDelivery") ;
			Services		= ОтветОбработки.Получить("Services") ;
			TotalSum		= ОтветОбработки.Получить("TotalSum") ;
			ТекстОтвета     = ОтветОбработки.Получить("ТекстОтвета") ;
			//
			ОшибкаВОтвете = Не ЗагрузкаУспешна;
			//
			ТаблицаЗначенийОтвета.Очистить();
			СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
			СТ_Доб.PriceDelivery = PriceDelivery;
			СТ_Доб.Services = Services;
			СТ_Доб.TotalSum = TotalSum;
			СТ_Доб.TimeDelivery = TimeDelivery;
			
			СообщениеОтветЗаписи =  ОписаниеОтветаСгенерить(ТекстОтвета,ОшибкаВОтвете,"DeliveryPrice",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОтветЗаписи); 

		Иначе
			ТекстТек =  ОтветНаПроверкуСтруктурыDeliveryPrice.Получить("ТекстОшибки") ;
			СообщениеОшибки=  ОписаниеОтветаСгенерить(ТекстТек,Истина,"DeliveryPrice",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
		КонецЕсли;
	Иначе 
		СообщениеОшибки=  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"DeliveryPrice",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	КонецЕсли;
	 		
	Возврат Ответ;
	//EFSOL Шаповал О.А. -
КонецФункции

Функция ПроверитьСтруктуруВходаDeliveryPrice(ОтветJSON_Соответствие)
	//EFSOL_Шаповал Олег Анатольевич 16 августа 2017 г. 13:00:15 +
	ТекстОшибки = "";
	СоответствиеПроверки = Новый Соответствие;
	
	Если ТипЗнч(ОтветJSON_Соответствие) = Тип("Соответствие") Тогда 
		//{
		//"ICN":    "<icn клиента>"
		//"TypeDelivery":    "<вид доставки>"
		//"Urgent":    "<срочность>"
		//"ToCity":    "<город получатель>"
		//"ToRegion":    "<регион получатель>"
		//"FromCity":    "<город отправитель>"
		//"FromRegion":  "<регион отправитель>"
		//"Weight":    "<вес отправления, грамм>"
		//"Amount":    "<оценочная стоимость, руб.>"
		//"Services": 	[ <массив доп. услуг>
		//				{"code":"<артикул>"
		//				 "count":"<кол. выражение если требуется>"}
		//				]
		//}
		
		ICN 			= ОтветJSON_Соответствие.Получить("ICN");
		TypeDelivery 	= ОтветJSON_Соответствие.Получить("TypeDelivery");
		Urgent 			= ОтветJSON_Соответствие.Получить("Urgent"); 
		ToCity 			= ОтветJSON_Соответствие.Получить("ToCity"); 
		FromCity 		= ОтветJSON_Соответствие.Получить("FromCity");
		Weight 			= ОтветJSON_Соответствие.Получить("Weight"); 
		//Amount 			= ОтветJSON_Соответствие.Получить("Amount");
		Length 			= ОтветJSON_Соответствие.Получить("Length");     //число
		Width 			= ОтветJSON_Соответствие.Получить("Width");       //число
		Height 			= ОтветJSON_Соответствие.Получить("Height");     //число
		
		ТекстОшибки = ПроверитьНаЗаполениеИТип(Length,Тип("Число"),ТекстОшибки,"Length");
		ТекстОшибки = ПроверитьНаЗаполениеИТип(Width,Тип("Число"),ТекстОшибки,"Width");
		ТекстОшибки = ПроверитьНаЗаполениеИТип(Height,Тип("Число"),ТекстОшибки,"Height");	
		ТекстОшибки = ПроверитьНаЗаполениеИТип(TypeDelivery,Тип("Строка"),ТекстОшибки,"TypeDelivery");
		ТекстОшибки = ПроверитьНаЗаполениеИТип(Urgent,Тип("Число"),ТекстОшибки,"Urgent");
		ТекстОшибки = ПроверитьНаЗаполениеИТип(ToCity,Тип("Строка"),ТекстОшибки,"ToCity");
		ТекстОшибки = ПроверитьНаЗаполениеИТип(FromCity,Тип("Строка"),ТекстОшибки,"FromCity");
		ТекстОшибки = ПроверитьНаЗаполениеИТип(Weight,Тип("Число"),ТекстОшибки,"Weight");
		//ТекстОшибки = ПроверитьНаЗаполениеИТип(Amount,Тип("Число"),ТекстОшибки,"Amount");
		
		Если ICN = Неопределено Тогда 
			ТекстОшибки = ТекстОшибки +"
			|Структура не соответствует. Нет JSON ICN."; 
		КонецЕсли;
		Services = ОтветJSON_Соответствие.Получить("Services"); 
		Если ТипЗнч(Services)<> Тип("Массив") Тогда 
			
			ТекстОшибки = ТекстОшибки +"
			|Структура не соответствует тип Services или отсутствует."; 
		КонецЕсли;
		
	Иначе
		ТекстОшибки = "Структура не соответствует. Необходимо проверить текст вызова.";
	КонецЕсли;
	
	СоответствиеПроверки.Вставить("ТекстОшибки",ТекстОшибки);
	
	Если ТекстОшибки = "" Тогда 
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Истина);
	Иначе
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Ложь);
	КонецЕсли;
	
	Возврат  СоответствиеПроверки;
	//EFSOL Шаповал О.А. -	
КонецФункции

&НаСервере  
Функция ОбработатьСтоимостьОтправления(ОтветJSON_Соответствие,Заказчик)
	//EFSOL_Шаповал Олег Анатольевич 23 августа 2017 г. 15:38:08 +
	ТекстОшибки = "";
	ЗагрузкаУспешна = Истина;
	СоответсвиеОтвета = Новый Соответствие;
	Price = Неопределено;
	
	ICN = ОтветJSON_Соответствие.Получить("ICN");//это проверялось
	ВидКлиента = Заказчик.ES_ВидКонтрагента;
	
	Если Заказчик.Пустая() Тогда
		мЗначение = ОтветJSON_Соответствие.Получить("B2B");
		Если Не ЗначениеЗаполнено(мЗначение) Тогда
			ЗагрузкаУспешна = Ложь;
			ТекстОшибки = ТекстОшибки+"
			|Не найдено значение поля B2B.";
		Иначе
			ВидКлиента = ?(мЗначение = "false", Перечисления.ES_ВидКонтрагента.В2С, Перечисления.ES_ВидКонтрагента.В2В);
		КонецЕсли;
	КонецЕсли;
	
	КодВидаДоставки = СокрЛП(ОтветJSON_Соответствие.Получить("TypeDelivery"));
	ВидДоставки = ES_ОбщегоНазначения.ОпределитьВидДоставки(ES_ОбщегоНазначения.ПолучитьСтруктуруКодовВидовДоставки(),КодВидаДоставки,Ложь);
	Если ВидДоставки = Перечисления.ES_ВидыДоставки.ПустаяСсылка() Тогда 
		ЗагрузкаУспешна = Ложь;
		ТекстОшибки = ТекстОшибки+"
		|Не определен вид доставки "+Строка(КодВидаДоставки)+".";
	КонецЕсли;
	
	КодСрочности	= СокрЛП(ОтветJSON_Соответствие.Получить("Urgent"));
	Срочность = ES_ОбщегоНазначения.ПолучитьСрочностьДоставки(КодСрочности);
	Если ВидДоставки = Перечисления.ES_ВидыДоставки.ПустаяСсылка() Тогда 
		ЗагрузкаУспешна = Ложь;
		ТекстОшибки = ТекстОшибки+"
		|Не определена срочность доставки с кодом - "+Строка(КодСрочности)+".";
	КонецЕсли;
	
	ГородОтправитель = СокрЛП(ОтветJSON_Соответствие.Получить("FromCity"));
	РегионОтправитель = СокрЛП(ОтветJSON_Соответствие.Получить("FromRegion"));
	//ГородОтправитель = Справочники.ES_Города.НайтиПоНаименованию(СтрокаГородОтправитель);
	//Если ГородОтправитель = Справочники.ES_Города.ПустаяСсылка() Тогда
	//	ЗагрузкаУспешна = Ложь;
	//	ТекстОшибки = ТекстОшибки+"
	//	|Город не определен - "+Строка(СтрокаГородОтправитель)+". Проверьте правильность заполнения.";	
	//КонецЕсли;
	
	ГородПолучатель = СокрЛП(ОтветJSON_Соответствие.Получить("ToCity"));
	РегионПолучатель = СокрЛП(ОтветJSON_Соответствие.Получить("ToRegion"));
	//ГородПолучатель = Справочники.ES_Города.НайтиПоНаименованию(СтрокаГородПолучатель);
	//Если ГородПолучатель = Справочники.ES_Города.ПустаяСсылка() Тогда
	//	ЗагрузкаУспешна = Ложь;
	//	ТекстОшибки = ТекстОшибки+"
	//	|Город не определен - "+Строка(СтрокаГородПолучатель)+". Проверьте правильность заполнения.";	
	//КонецЕсли;
	
	мСтруктураНаправлений = ES_ОбщегоНазначения.ПолучитьНаправление(ГородОтправитель,ГородПолучатель,РегионОтправитель,РегионПолучатель); 
	Направление = мСтруктураНаправлений.Направление;
	ВнутризональныйКоэффициент = мСтруктураНаправлений.Коэффициент;
	Если Направление.Пустая() Тогда
		ЗагрузкаУспешна = Ложь;
		ТекстОшибки = ТекстОшибки+"
		|Направление не определено - "+Строка(""+ГородОтправитель+"+"+ГородПолучатель)+".";
	КонецЕсли;
		
	СтруктураЗоны = ES_ОбщегоНазначения.ОпределитьЗонуДоставки(Направление,ВидКлиента,Срочность);  // проверить!!!!!
	ЗонаДоставки = СтруктураЗоны.Зона;
	СрокДоставки = СтруктураЗоны.СрокДоставки;
	Если ЗонаДоставки.Пустая() Тогда
		ЗагрузкаУспешна = Ложь;
		ТекстОшибки = ТекстОшибки+"
		|По направлению "+Направление+" "+Заказчик.ES_ВидКонтрагента+" "+Срочность+" доставка не выполняется.";
	КонецЕсли;
	
	Weight =ОтветJSON_Соответствие.Получить("Weight");//
	Weight = СтрЗаменить(Weight,",",".");//
	Weight = ?(Weight = Неопределено ИЛИ Weight = "",0,Число(Weight));
	Length = СокрЛП(ОтветJSON_Соответствие.Получить("Length"));     //число
	Length = СтрЗаменить(Length,",",".");//
	Length = ?(Length = Неопределено ИЛИ Length = "",0,Число(Length));
	Width = СокрЛП(ОтветJSON_Соответствие.Получить("Width"));       //число
	Width = СтрЗаменить(Width,",",".");//
	Width = ?(Width = Неопределено ИЛИ Width = "",0,Число(Width));
	Height = СокрЛП(ОтветJSON_Соответствие.Получить("Height"));     //число
	Height = СтрЗаменить(Height,",",".");//
	Height = ?(Height = Неопределено ИЛИ Height = "",0,Число(Height));
	
	//ОбъемМ3 = (Length)*(Width)*(Height);
	Коэффициент = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Коэффициент); 
	ОбъемМ3 = Окр(Число(Length)*Число(Width)*Число(Height)*100*100*100/(Коэффициент),3); 		
	
	Amount = ОтветJSON_Соответствие.Получить("Amount");//
	Amount = СтрЗаменить(Amount,",",".");//
	Amount = ?(Amount = Неопределено или Amount = "",0,Число(Amount));
	мCOD = ОтветJSON_Соответствие.Получить("COD");
	мCOD = СтрЗаменить(мCOD,",",".");//
	COD = ?(мCOD = Неопределено или мCOD = "",0,Число(мCOD));//
	Вес = Число(Weight);
			
	Services = ОтветJSON_Соответствие.Получить("Services");//
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("Номенклатура");
	Таб.Колонки.Добавить("Количество");
	Таб.Колонки.Добавить("Цена");
	Для а=0 По Services.Количество()-1 Цикл
		Артикул = Services[а].Получить("code");
		Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
		Количество = Services[а].Получить("count");
		Если Номенклатура.Пустая() Тогда
			ЗагрузкаУспешна = Ложь;
			ТекстОшибки = ТекстОшибки+"
			|Не найдена услуга, артикул("+Строка(Артикул)+").";
		Иначе
			//мОбъект = РеквизитФормыВЗначение("Объект");
			Стр = Таб.Добавить();
   			Стр.Номенклатура = Номенклатура;
			Стр.Количество = ?(Число(Количество)=0,1,Число(Количество));
			Стр.Цена = 0;
			
		КонецЕсли;
	КонецЦикла;
	
	МассивУслуг = Новый Массив;
	СуммаУслуг = 0;
	ЦенаКурьерскойДоставки = 0;
	
	Договор = Справочники.ДоговорыКонтрагентов.НайтиПоКоду(ICN);
	Если Не Договор.Пустая()Тогда
		МаксВес = Договор.ES_РасчетТарифовОтМаксимальногоВеса;
		Если НЕ Договор.ES_УчетПриРасчетеЦенТК Тогда
			Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	Иначе
		МаксВес = Истина;
	КонецЕсли;
	
	Если ЗагрузкаУспешна Тогда
		мВес = ?(МаксВес, Макс(Вес,ОбъемМ3),Вес);
		мЦенаКурьерскойДоставки = ES_ОбщегоНазначенияКлиентСервер.ЭР_ОбновитьСтоимостьДоставки(ТекущаяДата(),Договор,ЗонаДоставки,мВес,Срочность,ВидДоставки,ВидКлиента);
		ЦенаКурьерскойДоставки = Окр(мЦенаКурьерскойДоставки.Цена*ВнутризональныйКоэффициент,2,РежимОкругления.Окр15как20);
		
		Ответ = ES_ОбщегоНазначенияКлиентСервер.ЭР_ОбновитьУслугиТЧДоставки(Таб,ТекущаяДата(),Договор,ЦенаКурьерскойДоставки,Amount,COD,Вес);
		
		Для Каждого СТ_Таб Из Таб Цикл
			мСтруктура = Новый Структура;
			мСтруктура.Вставить("code",СТ_Таб.Номенклатура.Артикул);
			ЦенаУслуги = СТ_Таб.Количество * СТ_Таб.Цена;
			//СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СТ_Таб.Номенклатура.СтавкаНДС);
			//ЦенаУслуги = Окр((ЦенаУслуги * СтавкаНДС / 100),2,РежимОкругления.Окр15как20);
			мСтруктура.Вставить("price",ЦенаУслуги);
			МассивУслуг.Добавить(мСтруктура);
			СуммаУслуг = СуммаУслуг + ЦенаУслуги;
		КонецЦикла;
	КонецЕсли;
		
	ТекстСоообщения = "Для расчета стоимости доставки свяжитесь по телефону +7 (495) 646-88-20";
	СоответсвиеОтвета.Вставить("ЗагрузкаУспешна",ЗагрузкаУспешна);
	СоответсвиеОтвета.Вставить("PriceDelivery",?(ЦенаКурьерскойДоставки = 0,ТекстСоообщения,ЦенаКурьерскойДоставки));
	СоответсвиеОтвета.Вставить("TimeDelivery",СрокДоставки);
	СоответсвиеОтвета.Вставить("Services",МассивУслуг);
	СоответсвиеОтвета.Вставить("TotalSum",СуммаУслуг+ЦенаКурьерскойДоставки);
	СоответсвиеОтвета.Вставить("ТекстОтвета",ТекстОшибки);
	
	Возврат  СоответсвиеОтвета;
	
	//EFSOL Шаповал О.А. -
КонецФункции

#КонецОбласти

#Область ПВЗ
Функция ПолучитьСписокПВЗ(Запрос) Экспорт
	//EFSOL_Шаповал Олег Анатольевич 23 августа 2017 г. 12:41:19 +
	Ответ = Новый HTTPСервисОтвет(302);
	ТаблицаЗначенийОтвета  = Новый ТаблицаЗначений();
	ТаблицаЗначенийОтвета.Колонки.Добавить("List");
	СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
	СТ_Доб.List = Новый Массив;
	
	SessionId = ПолучитьIDСесси(Запрос);
	//провериьт на SessionId !!!
	ЗапросСесии = новый Запрос("ВЫБРАТЬ
						|	NS_СессииЛК.id,
						|	NS_СессииЛК.Начата,
						|	NS_СессииЛК.Истекает,
						|	NS_СессииЛК.Контрагент,
						|	NS_СессииЛК.ЗакрытаСамостоятельно
						|ИЗ
						|	РегистрСведений.NS_СессииЛК КАК NS_СессииЛК
						|ГДЕ
						|	NS_СессииЛК.id = &id
						|	И NS_СессииЛК.Истекает >=&ДатаТек
						|	И NS_СессииЛК.Начата <= &ДатаТек
						|	И НЕ NS_СессииЛК.ЗакрытаСамостоятельно");
	
	ЗапросСесии.УстановитьПараметр("id",СокрЛП(SessionId));
	ЗапросСесии.УстановитьПараметр("ДатаТек",ТекущаяДата());
	
	Выборка = ЗапросСесии.Выполнить().Выгрузить();
	Если Выборка.Количество()= 0 Тогда 
		СообщениеОшибки=  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"pvz",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	
	ИначеЕсли   Выборка.Количество()= 1 Тогда  
		
		ТекТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
		ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
		ОтветJSON =  ОбработкаJSON.UnJSON(ТекТекстЗапроса);
		
		//надо ОтветJSON проверить на правильность заполнения!!!
		ОтветНаПроверкуСтруктурыpvz = ПроверитьСтруктуруВходаpvz(ОтветJSON);
		ПрошлаПроверку = ОтветНаПроверкуСтруктурыpvz.Получить("ПрошлаПроверку");
		Если ПрошлаПроверку Тогда 
			
			//Надо напечатать наклейки
			ОтветОбработки = ОбработатьСписокПВЗ(ОтветJSON);
			//
			ЗагрузкаУспешна = ОтветОбработки.Получить("ЗагрузкаУспешна") ;
			List			= ОтветОбработки.Получить("List") ;
			ТекстОтвета     = ОтветОбработки.Получить("ТекстОтвета") ;
			//
			ОшибкаВОтвете = Не ЗагрузкаУспешна;
			//
			ТаблицаЗначенийОтвета.Очистить();
			СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
			СТ_Доб.List = List;
			
			СообщениеОтветЗаписи =  ОписаниеОтветаСгенерить(ТекстОтвета,ОшибкаВОтвете,"pvz",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОтветЗаписи); 

		Иначе
			ТекстТек =  ОтветНаПроверкуСтруктурыpvz.Получить("ТекстОшибки") ;
			СообщениеОшибки=  ОписаниеОтветаСгенерить(ТекстТек,Истина,"pvz",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
		КонецЕсли;
	Иначе 
		СообщениеОшибки=  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"pvz",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	КонецЕсли;
	 		
	Возврат Ответ;
	//EFSOL Шаповал О.А. -
КонецФункции

Функция ПроверитьСтруктуруВходаpvz(ОтветJSON_Соответствие)
	//EFSOL_Шаповал Олег Анатольевич 16 августа 2017 г. 13:00:15 +
	ТекстОшибки = "";
	СоответствиеПроверки = Новый Соответствие;
	
	Если ТипЗнч(ОтветJSON_Соответствие) = Тип("Соответствие") Тогда 
		//{
		//"City":    "<город>"
		//}
		 
		City 			= ОтветJSON_Соответствие.Получить("City");  		
		//ТекстОшибки = ПроверитьНаЗаполениеИТип(City,Тип("Строка"),ТекстОшибки,"City");
				
	Иначе
		ТекстОшибки = "Структура не соответствует. Необходимо проверить текст вызова.";
	КонецЕсли;
	
	СоответствиеПроверки.Вставить("ТекстОшибки",ТекстОшибки);
	
	Если ТекстОшибки = "" Тогда 
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Истина);
	Иначе
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Ложь);
	КонецЕсли;
	
	Возврат  СоответствиеПроверки;
	//EFSOL Шаповал О.А. -	
КонецФункции

&НаСервере  
Функция ОбработатьСписокПВЗ(ОтветJSON_Соответствие)
	//EFSOL_Шаповал Олег Анатольевич 23 августа 2017 г. 15:38:08 +
	ТекстОшибки = "";
	ЗагрузкаУспешна = Истина;
	СоответсвиеОтвета = Новый Соответствие;
	МассивПВЗ = Новый Массив;
	
	City = ОтветJSON_Соответствие.Получить("City");//это проверялось
	
	//Если ЗначениеЗаполнено(City) Тогда
	//	Город = Справочники.ES_Города.НайтиПоНаименованию(City);
	//	Если Город = Справочники.ES_Города.ПустаяСсылка() Тогда
	//		ЗагрузкаУспешна = Ложь;
	//		ТекстОшибки = ТекстОшибки+"
	//		|Город не определен - "+Строка(City)+". Проверьте правильность заполнения.";	
	//	КонецЕсли;
	//КонецЕсли;
	
	
	Если ЗагрузкаУспешна Тогда
		Запрос = Новый Запрос;
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ES_ПунктыВыдачиЗаказов.Код,
		               |	ES_ПунктыВыдачиЗаказов.Наименование КАК Наименование,
		               |	ES_ПунктыВыдачиЗаказов.ПолныйАдрес
		               |ИЗ
		               |	Справочник.ES_ПунктыВыдачиЗаказов КАК ES_ПунктыВыдачиЗаказов
		               |ГДЕ
		               |	НЕ ES_ПунктыВыдачиЗаказов.ПометкаУдаления";
		               
		Если ЗначениеЗаполнено(City) Тогда
			ТекстЗапроса = ТекстЗапроса+"
			|	И ES_ПунктыВыдачиЗаказов.Город = &Город";
			Запрос.УстановитьПараметр("Город",СокрЛП(City));
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса+"
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			мСтруктура = Новый Структура;
			мСтруктура.Вставить("code",Выборка.Код);
			мСтруктура.Вставить("name",Выборка.Наименование);
			мСтруктура.Вставить("address",СокрЛП(Выборка.ПолныйАдрес));
			МассивПВЗ.Добавить(мСтруктура);	
		КонецЦикла;
		
	КонецЕсли;	
	
	СоответсвиеОтвета.Вставить("ЗагрузкаУспешна",ЗагрузкаУспешна);
	СоответсвиеОтвета.Вставить("List",МассивПВЗ);
	СоответсвиеОтвета.Вставить("ТекстОтвета",ТекстОшибки);
	
	Возврат  СоответсвиеОтвета;
	
	//EFSOL Шаповал О.А. -
КонецФункции

#КонецОбласти

#Область СписокГородов
Функция ПолучитьСписокГородов(Запрос) Экспорт
	//EFSOL_Шаповал Олег Анатольевич 23 августа 2017 г. 12:41:19 +
	Ответ = Новый HTTPСервисОтвет(302);
	ТаблицаЗначенийОтвета  = Новый ТаблицаЗначений();
	ТаблицаЗначенийОтвета.Колонки.Добавить("List");
	СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
	СТ_Доб.List = Новый Массив;
	
	SessionId = Запрос.Заголовки.Получить("SessionId");
	//провериьт на SessionId !!!
	ЗапросСесии = новый Запрос("ВЫБРАТЬ
						|	NS_СессииЛК.id,
						|	NS_СессииЛК.Начата,
						|	NS_СессииЛК.Истекает,
						|	NS_СессииЛК.Контрагент,
						|	NS_СессииЛК.ЗакрытаСамостоятельно
						|ИЗ
						|	РегистрСведений.NS_СессииЛК КАК NS_СессииЛК
						|ГДЕ
						|	NS_СессииЛК.id = &id
						|	И NS_СессииЛК.Истекает >=&ДатаТек
						|	И NS_СессииЛК.Начата <= &ДатаТек
						|	И НЕ NS_СессииЛК.ЗакрытаСамостоятельно");
	
	ЗапросСесии.УстановитьПараметр("id",СокрЛП(SessionId));
	ЗапросСесии.УстановитьПараметр("ДатаТек",ТекущаяДата());
	
	Выборка = ЗапросСесии.Выполнить().Выгрузить();
	Если Выборка.Количество()= 0 Тогда 
		СообщениеОшибки=  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"city",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	
	ИначеЕсли   Выборка.Количество()= 1 Тогда  
		
		ТекТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
		ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
		ОтветJSON =  ОбработкаJSON.UnJSON(ТекТекстЗапроса);
		
		//надо ОтветJSON проверить на правильность заполнения!!!
		ОтветНаПроверкуСтруктурыcity = ПроверитьСтруктуруВходаcity(ОтветJSON);
		ПрошлаПроверку = ОтветНаПроверкуСтруктурыcity.Получить("ПрошлаПроверку");
		Если ПрошлаПроверку Тогда 
			
			//Надо напечатать наклейки
			ОтветОбработки = ОбработатьСписокГородов(ОтветJSON);
			//
			ЗагрузкаУспешна = ОтветОбработки.Получить("ЗагрузкаУспешна") ;
			List			= ОтветОбработки.Получить("List") ;
			ТекстОтвета     = ОтветОбработки.Получить("ТекстОтвета") ;
			//
			ОшибкаВОтвете = Не ЗагрузкаУспешна;
			//
			ТаблицаЗначенийОтвета.Очистить();
			СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
			СТ_Доб.List = List;
			
			СообщениеОтветЗаписи =  ОписаниеОтветаСгенерить(ТекстОтвета,ОшибкаВОтвете,"city",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОтветЗаписи); 

		Иначе
			ТекстТек =  ОтветНаПроверкуСтруктурыcity.Получить("ТекстОшибки") ;
			СообщениеОшибки=  ОписаниеОтветаСгенерить(ТекстТек,Истина,"city",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
		КонецЕсли;
	Иначе 
		СообщениеОшибки=  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"city",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	КонецЕсли;
	 		
	Возврат Ответ;
	//EFSOL Шаповал О.А. -
КонецФункции

Функция ПроверитьСтруктуруВходаCity(ОтветJSON_Соответствие)
	//EFSOL_Шаповал Олег Анатольевич 16 августа 2017 г. 13:00:15 +
	ТекстОшибки = "";
	СоответствиеПроверки = Новый Соответствие;
	
	//Если ТипЗнч(ОтветJSON_Соответствие) = Тип("Соответствие") Тогда 
	//	//{
	//	//"City":    "<город>"
	//	//}
	//	 
	//	City 			= ОтветJSON_Соответствие.Получить("ToCity");  		
	//	ТекстОшибки = ПроверитьНаЗаполениеИТип(City,Тип("Строка"),ТекстОшибки,"City");
	//			
	//Иначе
	//	ТекстОшибки = "Структура не соответствует. Необходимо проверить текст вызова.";
	//КонецЕсли;
	
	СоответствиеПроверки.Вставить("ТекстОшибки",ТекстОшибки);
	
	Если ТекстОшибки = "" Тогда 
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Истина);
	Иначе
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Ложь);
	КонецЕсли;
	
	Возврат  СоответствиеПроверки;
	//EFSOL Шаповал О.А. -	
КонецФункции

&НаСервере  
Функция ОбработатьСписокГородов(ОтветJSON_Соответствие)
	//EFSOL_Шаповал Олег Анатольевич 23 августа 2017 г. 15:38:08 +
	ТекстОшибки = "";
	ЗагрузкаУспешна = Истина;
	СоответсвиеОтвета = Новый Соответствие;
	МассивГорода = Новый Массив;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ES_Города.Наименование КАК Наименование,
	               |	ES_Города.Индекс,
	               |	ES_Города.Ссылка
	               |ИЗ
	               |	Справочник.ES_Города КАК ES_Города
	               |ГДЕ
	               |	НЕ ES_Города.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		мСтруктура = Новый Структура;
		мСтруктура.Вставить("PostalCode",Выборка.Индекс);
		мСтруктура.Вставить("Name",Выборка.Наименование);
		МассивГорода.Добавить(мСтруктура);	
	КонецЦикла;
	
	
	СоответсвиеОтвета.Вставить("ЗагрузкаУспешна",ЗагрузкаУспешна);
	СоответсвиеОтвета.Вставить("List",МассивГорода);
	СоответсвиеОтвета.Вставить("ТекстОтвета",ТекстОшибки);
	
	Возврат  СоответсвиеОтвета;
	
	//EFSOL Шаповал О.А. -
КонецФункции

#КонецОбласти

#Область СтоимостьОтправления
Функция ПолучитьСтоимостьДоставкаНомерЗаказа(Запрос) Экспорт
	//EFSOL_Шаповал Олег Анатольевич 23 августа 2017 г. 12:41:19 +
	Ответ = Новый HTTPСервисОтвет(302);
	ТаблицаЗначенийОтвета  = Новый ТаблицаЗначений();
	ТаблицаЗначенийОтвета.Колонки.Добавить("PriceDelivery");
	ТаблицаЗначенийОтвета.Колонки.Добавить("Services");
	ТаблицаЗначенийОтвета.Колонки.Добавить("TimeDelivery");
	ТаблицаЗначенийОтвета.Колонки.Добавить("TotalSum");
	СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
	СТ_Доб.PriceDelivery = 0;
	СТ_Доб.TimeDelivery = "";
	СТ_Доб.Services = новый Массив;
	СТ_Доб.TotalSum = 0;
	
	SessionId = ПолучитьIDСесси(Запрос);
	//провериьт на SessionId !!!
	ЗапросСесии = новый Запрос("ВЫБРАТЬ
						|	NS_СессииЛК.id,
						|	NS_СессииЛК.Начата,
						|	NS_СессииЛК.Истекает,
						|	NS_СессииЛК.Контрагент,
						|	NS_СессииЛК.ЗакрытаСамостоятельно
						|ИЗ
						|	РегистрСведений.NS_СессииЛК КАК NS_СессииЛК
						|ГДЕ
						|	NS_СессииЛК.id = &id
						|	И NS_СессииЛК.Истекает >=&ДатаТек
						|	И NS_СессииЛК.Начата <= &ДатаТек
						|	И НЕ NS_СессииЛК.ЗакрытаСамостоятельно");
	
	ЗапросСесии.УстановитьПараметр("id",СокрЛП(SessionId));
	ЗапросСесии.УстановитьПараметр("ДатаТек",ТекущаяДата());
	
	Выборка = ЗапросСесии.Выполнить().Выгрузить();
	Если Выборка.Количество()= 0 Тогда 
		СообщениеОшибки=  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"DeliveryPrice",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	
	ИначеЕсли   Выборка.Количество()= 1 Тогда  
		
		ТекТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
		ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
		ОтветJSON =  ОбработкаJSON.UnJSON(ТекТекстЗапроса);
		
		//надо ОтветJSON проверить на правильность заполнения!!!
		ОтветНаПроверкуСтруктурыShipmentNumber = ПроверитьСтруктуруВходаShipmentNumber(ОтветJSON);
		ПрошлаПроверку = ОтветНаПроверкуСтруктурыShipmentNumber.Получить("ПрошлаПроверку");
		Если ПрошлаПроверку Тогда 
			
			//Надо напечатать наклейки
			ОтветОбработки = ОбработатьСтоимостьОтправленияShipmentNumber(ОтветJSON,Выборка[0].Контрагент);
			//
			ЗагрузкаУспешна = ОтветОбработки.Получить("ЗагрузкаУспешна") ;
			PriceDelivery	= ОтветОбработки.Получить("PriceDelivery") ;
			Services		= ОтветОбработки.Получить("Services") ;
			TimeDelivery    = ОтветОбработки.Получить("TimeDelivery") ;
			TotalSum		= ОтветОбработки.Получить("TotalSum") ;
			ТекстОтвета     = ОтветОбработки.Получить("ТекстОтвета") ;
			//
			ОшибкаВОтвете = Не ЗагрузкаУспешна;
			//
			ТаблицаЗначенийОтвета.Очистить();
			СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
			СТ_Доб.PriceDelivery = PriceDelivery;
			СТ_Доб.Services = Services;
			СТ_Доб.TimeDelivery = TimeDelivery;
			СТ_Доб.TotalSum = TotalSum;
			
			СообщениеОтветЗаписи =  ОписаниеОтветаСгенерить(ТекстОтвета,ОшибкаВОтвете,"DeliveryPrice",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОтветЗаписи); 

		Иначе
			ТекстТек =  ОтветНаПроверкуСтруктурыShipmentNumber.Получить("ТекстОшибки") ;
			СообщениеОшибки=  ОписаниеОтветаСгенерить(ТекстТек,Истина,"DeliveryPrice",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
		КонецЕсли;
	Иначе 
		СообщениеОшибки=  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"DeliveryPrice",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	КонецЕсли;
	 		
	Возврат Ответ;
	//EFSOL Шаповал О.А. -
КонецФункции

Функция ПроверитьСтруктуруВходаShipmentNumber(ОтветJSON_Соответствие)
	//EFSOL_Шаповал Олег Анатольевич 16 августа 2017 г. 13:00:15 +
	ТекстОшибки = "";
	СоответствиеПроверки = Новый Соответствие;
	
	Если ТипЗнч(ОтветJSON_Соответствие) = Тип("Соответствие") Тогда 
		 
		
		ShipmentNumber = ОтветJSON_Соответствие.Получить("ShipmentNumber");
		ICN = ОтветJSON_Соответствие.Получить("ICN");
		
				
		ТекстОшибки = ПроверитьНаЗаполениеИТип(ShipmentNumber,Тип("Строка"),ТекстОшибки,"ShipmentNumber");
		ТекстОшибки = ПроверитьНаЗаполениеИТип(ICN,Тип("Строка"),ТекстОшибки,"ICN");
		
		Если ShipmentNumber = Неопределено Тогда 
			ТекстОшибки = ТекстОшибки +"
			|Структура не соответствует. Нет JSON ShipmentNumber."; 
		КонецЕсли;
		Если ICN = Неопределено Тогда 
			ТекстОшибки = ТекстОшибки +"
			|Структура не соответствует. Нет JSON ICN."; 
		КонецЕсли;
		
	Иначе
		ТекстОшибки = "Структура не соответствует. Необходимо проверить текст вызова.";
	КонецЕсли;
	
	СоответствиеПроверки.Вставить("ТекстОшибки",ТекстОшибки);
	
	Если ТекстОшибки = "" Тогда 
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Истина);
	Иначе
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Ложь);
	КонецЕсли;
	
	Возврат  СоответствиеПроверки;
	//EFSOL Шаповал О.А. -	
КонецФункции

&НаСервере  
Функция ОбработатьСтоимостьОтправленияShipmentNumber(ОтветJSON_Соответствие,Заказчик)
	//EFSOL_Шаповал Олег Анатольевич 23 августа 2017 г. 15:38:08 +
	ТекстОшибки = "";
	ЗагрузкаУспешна = Истина;
	СоответсвиеОтвета = Новый Соответствие;
	//Price = Неопределено;
	МассивУслуг = Новый Массив;
	СуммаУслуг = 0;
	ЦенаКурьерскойДоставки = 0;
	TimeDelivery = "";
	
	ICN = ОтветJSON_Соответствие.Получить("ICN");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДоговорыКонтрагентов.Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Код = &Код
	               |	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	               |	И ДоговорыКонтрагентов.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Код",ICN);
	Запрос.УстановитьПараметр("Владелец",Заказчик);
	ТЗ_Договора = Запрос.Выполнить().Выгрузить();
	Если ТЗ_Договора.Количество() > 0 Тогда
		Договор = ТЗ_Договора[0].Ссылка;
	Иначе
		Договор = Неопределено;
	КонецЕсли;
			
	Если Не ЗначениеЗаполнено(Договор) Тогда
		ОшибкаПриПоиске = Истина;
		ЗагрузкаУспешна = Ложь;
		ТекстОшибки = ТекстОшибки+"
		|Не найден номер договора "+ICN+". Обратитесь к менеждеру.";
	КонецЕсли;
	
	Если ЗагрузкаУспешна Тогда
		
		ShipmentNumber = ОтветJSON_Соответствие.Получить("ShipmentNumber");//это проверялось
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЗаказПокупателя.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		               |ГДЕ
		               |	ЗаказПокупателя.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		               |	И ЗаказПокупателя.Проведен
		               |	И ЗаказПокупателя.ES_НомерНакладной = &Номер
		               |	И ЗаказПокупателя.Договор = &Договор";
		
		Запрос.УстановитьПараметр("Номер",ShipmentNumber);
		Запрос.УстановитьПараметр("Договор",Договор);
		//поиск вызова в пределах 60 дней
		ДатаПоиска = НачалоДня((ТекущаяДата()-60*24*60*60)); // дней
		Запрос.УстановитьПараметр("ДатаНачала",ДатаПоиска);
		Запрос.УстановитьПараметр("ДатаОкончания",КонецДня(ТекущаяДата()));
		ТЗ = Запрос.Выполнить().Выгрузить();
		ОшибкаПриПоиске = Ложь;
		Если ТЗ.Количество() = 1 Тогда 		
			//проверим в камом статусе вызов курьера
			ОбЗП = ТЗ[0].Ссылка;
			TimeDelivery = ОбЗП.ES_СрокДоставки;
		ИначеЕсли  ТЗ.Количество() = 0 Тогда
			ОшибкаПриПоиске = Истина;
			ЗагрузкаУспешна = Ложь;
			ТекстОшибки = ТекстОшибки+"
			|Не найден заказ №"+ShipmentNumber+". Обратитесь к менеджеру.";
		Иначе
			ОшибкаПриПоиске = Истина;
			ЗагрузкаУспешна = Ложь;
			ТекстОшибки = ТекстОшибки+"
			|Найдено более одного заказа. Обратитесь к менеджеру.";
		КонецЕсли;
		
		//МассивУслуг = Новый Массив;
		//СуммаУслуг = 0;
		//ЦенаКурьерскойДоставки = 0;       
		
		Если ЗагрузкаУспешна Тогда
			
			Для Каждого Элемент из ОбЗП.Запасы Цикл  
				Если  Элемент.Номенклатура = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.УслугаДоставки) Тогда
					ЦенаКурьерскойДоставки = Элемент.Количество * Элемент.Цена;
				Иначе   				
					мСтруктура = Новый Структура;
					мСтруктура.Вставить("code",Элемент.Номенклатура.Артикул);
					ЦенаУслуги = Элемент.Количество * Элемент.Цена;
					//СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Элемент.Номенклатура.СтавкаНДС);
					//ЦенаУслуги = Окр((ЦенаУслуги * СтавкаНДС / 100),2,РежимОкругления.Окр15как20);
					мСтруктура.Вставить("price",ЦенаУслуги);
					МассивУслуг.Добавить(мСтруктура);
					СуммаУслуг = СуммаУслуг + ЦенаУслуги;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли; 
		
	КонецЕсли;
	
	СоответсвиеОтвета.Вставить("ЗагрузкаУспешна",ЗагрузкаУспешна);
	СоответсвиеОтвета.Вставить("PriceDelivery",ЦенаКурьерскойДоставки);
	СоответсвиеОтвета.Вставить("TimeDelivery",TimeDelivery);
	СоответсвиеОтвета.Вставить("Services",МассивУслуг);
	СоответсвиеОтвета.Вставить("TotalSum",СуммаУслуг+ЦенаКурьерскойДоставки);
	СоответсвиеОтвета.Вставить("ТекстОтвета",ТекстОшибки);
	
	Возврат  СоответсвиеОтвета;	
	
КонецФункции

#КонецОбласти

#Область Направления
Функция ПолучитьНаправление(Запрос) Экспорт
	//EFSOL_Шаповал Олег Анатольевич 23 августа 2017 г. 12:41:19 +
	Ответ = Новый HTTPСервисОтвет(302);
	ТаблицаЗначенийОтвета  = Новый ТаблицаЗначений();
		
	//SessionId = Запрос.Заголовки.Получить("SessionId");
	////провериьт на SessionId !!!
	//ЗапросСесии = новый Запрос("ВЫБРАТЬ
	//					|	NS_СессииЛК.id,
	//					|	NS_СессииЛК.Начата,
	//					|	NS_СессииЛК.Истекает,
	//					|	NS_СессииЛК.Контрагент,
	//					|	NS_СессииЛК.ЗакрытаСамостоятельно
	//					|ИЗ
	//					|	РегистрСведений.NS_СессииЛК КАК NS_СессииЛК
	//					|ГДЕ
	//					|	NS_СессииЛК.id = &id
	//					|	И NS_СессииЛК.Истекает >=&ДатаТек
	//					|	И NS_СессииЛК.Начата <= &ДатаТек
	//					|	И НЕ NS_СессииЛК.ЗакрытаСамостоятельно");
	//
	//ЗапросСесии.УстановитьПараметр("id",СокрЛП(SessionId));
	//ЗапросСесии.УстановитьПараметр("ДатаТек",ТекущаяДата());
	//
	//Выборка = ЗапросСесии.Выполнить().Выгрузить();
	//Если Выборка.Количество()= 0 Тогда 
	//	СообщениеОшибки=  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"DeliveryPrice",ТаблицаЗначенийОтвета);
	//	Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	//
	//ИначеЕсли   Выборка.Количество()= 1 Тогда  
		
		ТекТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
		ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
		ОтветJSON =  ОбработкаJSON.UnJSON(ТекТекстЗапроса);
		
		//надо ОтветJSON проверить на правильность заполнения!!!
		ОтветНаПроверкуСтруктурыRoute = ПроверитьСтруктуруВходаRoute(ОтветJSON);
		ПрошлаПроверку = ОтветНаПроверкуСтруктурыRoute.Получить("ПрошлаПроверку");
		Если ПрошлаПроверку Тогда 
			
			//Надо напечатать наклейки
			ОтветОбработки = ОбработатьСтоимостьОтправленияRoute(ОтветJSON);
			//
			ЗагрузкаУспешна = ОтветОбработки.Получить("ЗагрузкаУспешна") ;
			ТекстОтвета     = ОтветОбработки.Получить("ТекстОтвета") ;
			КодОшибки     	= ОтветОбработки.Получить("КодОшибки") ;
			//
			ОшибкаВОтвете = Не ЗагрузкаУспешна;
			//			
			СообщениеОтветЗаписи =  ОписаниеОтветаСгенерить(ТекстОтвета,ОшибкаВОтвете,"Route",ТаблицаЗначенийОтвета,КодОшибки);
			Ответ.УстановитьТелоИзСтроки(СообщениеОтветЗаписи); 

		Иначе
			ТекстТек =  ОтветНаПроверкуСтруктурыRoute.Получить("ТекстОшибки") ;
			СообщениеОшибки=  ОписаниеОтветаСгенерить(ТекстТек,Истина,"Route",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
		КонецЕсли;
	//Иначе 
	//	СообщениеОшибки=  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"DeliveryPrice",ТаблицаЗначенийОтвета);
	//	Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	//КонецЕсли;
	 		
	Возврат Ответ;
	//EFSOL Шаповал О.А. -
КонецФункции

Функция ПроверитьСтруктуруВходаRoute(ОтветJSON_Соответствие)
	//EFSOL_Шаповал Олег Анатольевич 16 августа 2017 г. 13:00:15 +
	ТекстОшибки = "";
	СоответствиеПроверки = Новый Соответствие;
	
	Если ТипЗнч(ОтветJSON_Соответствие) = Тип("Соответствие") Тогда 
		 
		
		ToCity 		= ОтветJSON_Соответствие.Получить("ToCity");
		FromCity 	= ОтветJSON_Соответствие.Получить("FromCity");		
				
		ТекстОшибки = ПроверитьНаЗаполениеИТип(ToCity,Тип("Строка"),ТекстОшибки,"ToCity");
		ТекстОшибки = ПроверитьНаЗаполениеИТип(FromCity,Тип("Строка"),ТекстОшибки,"FromCity");	
		
	Иначе
		ТекстОшибки = "Структура не соответствует. Необходимо проверить текст вызова.";
	КонецЕсли;
	
	СоответствиеПроверки.Вставить("ТекстОшибки",ТекстОшибки);
	
	Если ТекстОшибки = "" Тогда 
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Истина);
	Иначе
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Ложь);
	КонецЕсли;
	
	Возврат  СоответствиеПроверки;
	//EFSOL Шаповал О.А. -	
КонецФункции

&НаСервере  
Функция ОбработатьСтоимостьОтправленияRoute(ОтветJSON_Соответствие)
	//EFSOL_Шаповал Олег Анатольевич 23 августа 2017 г. 15:38:08 +
	ТекстОшибки = "";
	КодОшибки = "";
	ЗагрузкаУспешна = Истина;
	СоответсвиеОтвета = Новый Соответствие;
	
	ToCity 		= СокрЛП(ОтветJSON_Соответствие.Получить("ToCity"));
	FromCity 	= СокрЛП(ОтветJSON_Соответствие.Получить("FromCity"));
	ToRegion	= СокрЛП(ОтветJSON_Соответствие.Получить("ToRegion"));
	FromRegion 	= СокрЛП(ОтветJSON_Соответствие.Получить("FromRegion"));
	
	мСтруктураНаправлений = ES_ОбщегоНазначения.ПолучитьНаправление(FromCity,ToCity,FromRegion,ToRegion); 
	Направление = мСтруктураНаправлений.Направление;
	ВнутризональныйКоэффициент = мСтруктураНаправлений.Коэффициент;
	Если Направление.Пустая() Тогда
		ЗагрузкаУспешна = Ложь;
		КодОшибки = 3;
		ТекстОшибки = ТекстОшибки+"
		|Направление не определено - "+Строка(""+FromCity+"+"+ToCity)+".";
	КонецЕсли;
	
	СоответсвиеОтвета.Вставить("ЗагрузкаУспешна",ЗагрузкаУспешна);
	СоответсвиеОтвета.Вставить("ТекстОтвета",ТекстОшибки);
	СоответсвиеОтвета.Вставить("КодОшибки",КодОшибки);
	
	Возврат  СоответсвиеОтвета;	
	
КонецФункции

#КонецОбласти

#Область ПечатьНакладной
Функция ПолучитьНакладную(Запрос) Экспорт
	//EFSOL_Шаповал Олег Анатольевич 23 августа 2017 г. 12:41:19 +
	Ответ = Новый HTTPСервисОтвет(302);
	ТаблицаЗначенийОтвета  = Новый ТаблицаЗначений();
	ТаблицаЗначенийОтвета.Колонки.Добавить("Invoice");
	СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
	СТ_Доб.Invoice = "";
	
	SessionId = ПолучитьIDСесси(Запрос);
	//провериьт на SessionId !!!
	ЗапросСесии = новый Запрос("ВЫБРАТЬ
						|	NS_СессииЛК.id,
						|	NS_СессииЛК.Начата,
						|	NS_СессииЛК.Истекает,
						|	NS_СессииЛК.Контрагент,
						|	NS_СессииЛК.ЗакрытаСамостоятельно
						|ИЗ
						|	РегистрСведений.NS_СессииЛК КАК NS_СессииЛК
						|ГДЕ
						|	NS_СессииЛК.id = &id
						|	И NS_СессииЛК.Истекает >=&ДатаТек
						|	И NS_СессииЛК.Начата <= &ДатаТек
						|	И НЕ NS_СессииЛК.ЗакрытаСамостоятельно");
	
	ЗапросСесии.УстановитьПараметр("id",СокрЛП(SessionId));
	ЗапросСесии.УстановитьПараметр("ДатаТек",ТекущаяДата());
	
	Выборка = ЗапросСесии.Выполнить().Выгрузить();
	Если Выборка.Количество()= 0 Тогда 
		СообщениеОшибки=  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"GetInvoice",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	
	ИначеЕсли   Выборка.Количество()= 1 Тогда  
		
		ТекТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
		ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
		ОтветJSON =  ОбработкаJSON.UnJSON(ТекТекстЗапроса);
		
		//надо ОтветJSON проверить на правильность заполнения!!!
		ОтветНаПроверкуСтруктурыInvoice = ПроверитьСтруктуруВходаInvoice(ОтветJSON);
		ПрошлаПроверку = ОтветНаПроверкуСтруктурыInvoice.Получить("ПрошлаПроверку");
		Если ПрошлаПроверку Тогда 
			
			//Надо напечатать наклейки
			ОтветОбработки = ВыполнитьПечатьНакладных(ОтветJSON,Выборка[0].Контрагент);
			//
			ЗагрузкаУспешна = ОтветОбработки.Получить("ЗагрузкаУспешна") ;
			Invoice		    = ОтветОбработки.Получить("Invoices") ;
			ТекстОтвета     = ОтветОбработки.Получить("ТекстОтвета") ;
			//
			ОшибкаВОтвете = Не ЗагрузкаУспешна;
			//
			ТаблицаЗначенийОтвета.Очистить();
			СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
			СТ_Доб.Invoice = Invoice;
			
			СообщениеОтветЗаписи =  ОписаниеОтветаСгенерить(ТекстОтвета,ОшибкаВОтвете,"GetInvoice",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОтветЗаписи); 

		Иначе
			ТекстТек =  ОтветНаПроверкуСтруктурыInvoice.Получить("ТекстОшибки") ;
			СообщениеОшибки=  ОписаниеОтветаСгенерить(ТекстТек,Истина,"GetInvoice",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
		КонецЕсли;
	Иначе 
		СообщениеОшибки=  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"GetInvoice",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	КонецЕсли;
	 		
	Возврат Ответ;
	//EFSOL Шаповал О.А. -	
КонецФункции

Функция ПроверитьСтруктуруВходаInvoice(ОтветJSON_Соответствие)
	//EFSOL_Шаповал Олег Анатольевич 16 августа 2017 г. 13:00:15 +
	ТекстОшибки = "";
	СоответствиеПроверки = Новый Соответствие;
	
	Если ТипЗнч(ОтветJSON_Соответствие) = Тип("Соответствие") Тогда 
		//{
		//“ICN”:		“<индивидуальный номер клиента>”,
		//"Invoices":    "<массив с номерами накладных>"
		//}
		
		ICN 			= ОтветJSON_Соответствие.Получить("ICN");
		Invoices 		= ОтветJSON_Соответствие.Получить("Invoices"); // массив
		
		Если НЕ ТипЗнч(Invoices) = Тип("Массив") Тогда 
			ТекстОшибки = ТекстОшибки +"
			|Структура не соответствует. Invoices должен быть массивом."; 
		КонецЕсли;
		
	Иначе
		ТекстОшибки = "Структура не соответствует. Необходимо проверить текст вызова.";
	КонецЕсли;
	
	СоответствиеПроверки.Вставить("ТекстОшибки",ТекстОшибки);
	
	Если ТекстОшибки = "" Тогда 
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Истина);
	Иначе
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Ложь);
	КонецЕсли;
	
	Возврат  СоответствиеПроверки;
	//EFSOL Шаповал О.А. -	
КонецФункции

Функция ВыполнитьПечатьНакладных(ОтветJSON_Соответствие,Заказчик) 
	//EFSOL_Шаповал Олег Анатольевич 23 августа 2017 г. 15:38:08 +
	ТекстОшибки = "";
	ЗагрузкаУспешна = Истина;
	СоответсвиеОтвета = Новый Соответствие;
	Накладная = Неопределено;
	
	Invoices = ОтветJSON_Соответствие.Получить("Invoices");  // массив
	
	Если Invoices.Количество() > 0 Тогда		
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказПокупателя.Ссылка
		               |ИЗ
		               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		               |ГДЕ
		               |	ЗаказПокупателя.ES_НомерНакладной В(&СписокНакладных)
		               |	И ЗаказПокупателя.Проведен";
		Запрос.УстановитьПараметр("СписокНакладных",Invoices);
		ТЗ = Запрос.Выполнить().Выгрузить();
		
		Если ТЗ.Количество() = Invoices.Количество() Тогда
			// печатаем
			Если Заказчик.ES_ВидКонтрагента = Перечисления.ES_ВидКонтрагента.В2В Тогда
				ТабДок = Документы.ЗаказПокупателя.ПечатьESНакладнаяB2B(ТЗ.ВыгрузитьКолонку("Ссылка"),Неопределено,"ПФ_MXL_ES_НакладнаяB2B");
			ИначеЕсли Заказчик.ES_ВидКонтрагента = Перечисления.ES_ВидКонтрагента.В2С Тогда
				ТабДок = Документы.ЗаказПокупателя.ПечатьESНакладнаяB2C(ТЗ.ВыгрузитьКолонку("Ссылка"),Неопределено,"ПФ_MXL_ES_НакладнаяB2C");
			Иначе
				ТабДок = Новый ТабличныйДокумент;
			КонецЕсли;
			ИмяФайла = ПолучитьИмяВременногоФайла("pdf");
			ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.PDF);
			ДвоичныеДанные = Новый ДвоичныеДанные (ИмяФайла);
			Накладная = Base64Строка(ДвоичныеДанные);
		Иначе
			ЗагрузкаУспешна = Ложь;
			ТекстОшибки = ТекстОшибки+"
			|Не найдены накладные для печати. Обратитесь к менеждеру.";
		КонецЕсли;
	Иначе
		ЗагрузкаУспешна = Ложь;
		ТекстОшибки = ТекстОшибки+"
		|Не выбраны заказы для печати накладной.";
	КонецЕсли;	
	
	СоответсвиеОтвета.Вставить("ЗагрузкаУспешна",ЗагрузкаУспешна);
	СоответсвиеОтвета.Вставить("Invoices",Накладная);
	СоответсвиеОтвета.Вставить("ТекстОтвета",ТекстОшибки);
	
	Возврат  СоответсвиеОтвета;
	
	//EFSOL Шаповал О.А. -
КонецФункции
#КонецОбласти

#Область КодыОшибок
Функция ПолучитьКодыОшибок()
	
	СтруктураОшибок = Новый Структура;
	СтруктураОшибок.Вставить("0","Сессия истекла");
	СтруктураОшибок.Вставить("1","Нет накладных");
	СтруктураОшибок.Вставить("2","Пользователь с таким логином уже существует");
	СтруктураОшибок.Вставить("3","Направление не найдено");
	СтруктураОшибок.Вставить("4","Не верный логин или пароль");
	
	Возврат СтруктураОшибок;
	
КонецФункции
#КонецОбласти

#Область ПолучитьСостояниеЗаказаПоНомеру
Функция ПолучитьЗаказПокупателя(Запрос) Экспорт
	//EFSOL_Шаповал Олег Анатольевич 23 августа 2017 г. 12:41:19 +
	Ответ = Новый HTTPСервисОтвет(302);
	ТаблицаЗначенийОтвета  = Новый ТаблицаЗначений();
	
	ТекТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
	ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
	ОтветJSON =  ОбработкаJSON.UnJSON(ТекТекстЗапроса);
	
	//надо ОтветJSON проверить на правильность заполнения!!!
	ОтветНаПроверкуСтруктурыGetByNumberInvoice = ПроверитьСтруктуруВходаGetByNumberInvoice(ОтветJSON);
	ПрошлаПроверку = ОтветНаПроверкуСтруктурыGetByNumberInvoice.Получить("ПрошлаПроверку") ;
	Если ПрошлаПроверку Тогда 
		
		////Надо вывести данные "Заказ клиента"
		ПрошлаПроверкуЗК = ПолучитьЗаказПоНомеру(ОтветJSON);
		
		ЗагрузкаУспешна = ПрошлаПроверкуЗК.Получить("ЗагрузкаУспешна") ;
		//ICN                   =    ПрошлаПроверкуЗК.Получить("ICN") ;
		КодОшибки				=  ПрошлаПроверкуЗК.Получить("КодОшибки");
		Shipments      			    =    ПрошлаПроверкуЗК.Получить("Shipments") ;
		ТекстОтвета     			    =    ПрошлаПроверкуЗК.Получить("ТекстОтвета") ;
		
		ОшибкаВОтвете = Не ЗагрузкаУспешна;
		
		ТаблицаЗначенийОтвета  = Новый ТаблицаЗначений();
		//ТаблицаЗначенийОтвета.Колонки.Добавить("ICN");			
		ТаблицаЗначенийОтвета.Колонки.Добавить("Shipments");
		
		СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
		//СТ_Доб.ICN 					= ICN;
		СТ_Доб.Shipments			= Shipments;
		
		СообщениеОтветЗаписи =  ОписаниеОтветаСгенерить(ТекстОтвета,ОшибкаВОтвете,"GetByNumberInvoice",ТаблицаЗначенийОтвета,КодОшибки);
		Ответ.УстановитьТелоИзСтроки(СообщениеОтветЗаписи);
		
	иначе
		ТекстТек =  ОтветНаПроверкуСтруктурыGetByNumberInvoice.Получить("ТекстОшибки") ;
		СообщениеОшибки =  ОписаниеОтветаСгенерить(ТекстТек,Истина,"GetByNumberInvoice",ТаблицаЗначенийОтвета);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	КонецЕсли;
	
	Возврат Ответ;
	//EFSOL Шаповал О.А. -	
КонецФункции

Функция ПроверитьСтруктуруВходаGetByNumberInvoice(ОтветJSON_Соответствие)
	//EFSOL_Шаповал Олег Анатольевич 16 августа 2017 г. 13:00:15 +
	ТекстОшибки = "";
	СоответствиеПроверки = Новый Соответствие;
	
	Если ТипЗнч(ОтветJSON_Соответствие) = Тип("Соответствие") Тогда 
		//{
		//“ICN”:		“<индивидуальный номер клиента>”,
		//"Invoices":    "<массив с номерами накладных>"
		//}
		
		ShipmentNumber = ОтветJSON_Соответствие.Получить("ShipmentNumber");		
		ТекстОшибки = ПроверитьНаЗаполениеИТип(ShipmentNumber,Тип("Строка"),ТекстОшибки,"ShipmentNumber");
		
	Иначе
		ТекстОшибки = "Структура не соответствует. Необходимо проверить текст вызова.";
	КонецЕсли;
	
	СоответствиеПроверки.Вставить("ТекстОшибки",ТекстОшибки);
	
	Если ТекстОшибки = "" Тогда 
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Истина);
	Иначе
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Ложь);
	КонецЕсли;
	
	Возврат  СоответствиеПроверки;
	//EFSOL Шаповал О.А. -	
КонецФункции

Функция ПолучитьЗаказПоНомеру(ОтветJSON_Соответствие) 
	//EFSOL_Шаповал Олег Анатольевич 23 августа 2017 г. 15:38:08 +
	ТекстОшибки = "";
	КодОшибки = "";
	ЗагрузкаУспешна = Истина;
	Shipments = Новый Массив();
	СоответсвиеОтвета = Новый Соответствие; 
	
	ShipmentNumber = ОтветJSON_Соответствие.Получить("ShipmentNumber");
			
	Если Не ЗначениеЗаполнено(ShipmentNumber) Тогда
		ОшибкаПриПоиске = Истина;
		ЗагрузкаУспешна = Ложь;
		ТекстОшибки = ТекстОшибки+"
		|Укажите номер накладной.";
	КонецЕсли;
	
	Если ЗагрузкаУспешна Тогда
		
		ЗапросНаЗаказПокупателя = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		                                       |	ЗаказПокупателя.Ссылка КАК Ссылка,
		                                       |	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа КАК СтатусЗаказа,
		                                       |	ЗаказПокупателя.ES_НомерНакладной КАК ES_НомерНакладной,
		                                       |	ЗаказПокупателя.ES_Получатель КАК ES_Получатель,
		                                       |	ЗаказПокупателя.ES_ПолучательКонтактноеЛицо КАК ES_ПолучательКонтактноеЛицо,
		                                       |	ЗаказПокупателя.ES_ПолучательТелефон КАК ES_ПолучательТелефон,
		                                       |	ЗаказПокупателя.Номер КАК Номер,
		                                       |	ЗаказПокупателя.Дата КАК Дата,
		                                       |	ЗаказПокупателя.ES_ДатаДоставки КАК ES_ДатаДоставки,
		                                       |	ЗаказПокупателя.ES_АдресДоставки КАК ES_АдресДоставки,
		                                       |	ЗаказПокупателя.ES_ПолучательРегион КАК ES_ПолучательРегион,
		                                       |	СУММА(1) КАК НомерПоПорядку,
		                                       |	ЗаказПокупателя.Договор.Код КАК ДоговорКод,
		                                       |	ЕСТЬNULL(КомментарийКСтатусу.Значение, """") КАК КомментарийКСтатусу,
		                                       |	ЗаказПокупателя.ES_ВхНакладная КАК ES_ВхНакладная,
		                                       |	ЗаказПокупателя.ES_ВхНакладная = &ShipmentNumber КАК Порядок1,
		                                       |	ЗаказПокупателя.ES_НомерНакладной = &ShipmentNumber КАК Порядок2,
		                                       |	ЗаказПокупателя.ES_Город1 КАК ГородОтправитель,
		                                       |	ЗаказПокупателя.ES_АдресДоставкиГород КАК ГородПолучатель
		                                       |ИЗ
		                                       |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		                                       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних КАК ES_СтатусыЗаказовСрезПоследних
		                                       |		ПО ЗаказПокупателя.Ссылка = ES_СтатусыЗаказовСрезПоследних.Заказ
		                                       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(, РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.КомментарийСтатуса)) КАК КомментарийКСтатусу
		                                       |		ПО ЗаказПокупателя.Ссылка = КомментарийКСтатусу.Заказ
		                                       |ГДЕ
		                                       |	НЕ ЗаказПокупателя.ПометкаУдаления
		                                       |	И ЗаказПокупателя.Дата МЕЖДУ &Date_Start И &Date_End
		                                       |	И (ЗаказПокупателя.ES_ВхНакладная = &ShipmentNumber
		                                       |			ИЛИ ЗаказПокупателя.ES_НомерНакладной = &ShipmentNumber)
		                                       |
		                                       |СГРУППИРОВАТЬ ПО
		                                       |	ЗаказПокупателя.Ссылка,
		                                       |	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа,
		                                       |	ЗаказПокупателя.ES_НомерНакладной,
		                                       |	ЗаказПокупателя.ES_Получатель,
		                                       |	ЗаказПокупателя.ES_ПолучательКонтактноеЛицо,
		                                       |	ЗаказПокупателя.ES_ПолучательТелефон,
		                                       |	ЗаказПокупателя.Номер,
		                                       |	ЗаказПокупателя.Дата,
		                                       |	ЗаказПокупателя.ES_ДатаДоставки,
		                                       |	ЗаказПокупателя.ES_АдресДоставки,
		                                       |	ЗаказПокупателя.ES_ПолучательРегион,
		                                       |	ЗаказПокупателя.Договор.Код,
		                                       |	ЕСТЬNULL(КомментарийКСтатусу.Значение, """"),
		                                       |	ЗаказПокупателя.ES_ВхНакладная,
		                                       |	ЗаказПокупателя.ES_ВхНакладная = &ShipmentNumber,
		                                       |	ЗаказПокупателя.ES_НомерНакладной = &ShipmentNumber,
		                                       |	ЗаказПокупателя.ES_Город1,
		                                       |	ЗаказПокупателя.ES_АдресДоставкиГород
		                                       |
		                                       |УПОРЯДОЧИТЬ ПО
		                                       |	Порядок1,
		                                       |	Порядок2,
		                                       |	ES_ДатаДоставки");
		ЗапросНаЗаказПокупателя.УстановитьПараметр( "ShipmentNumber",ShipmentNumber);
		ЗапросНаЗаказПокупателя.УстановитьПараметр( "Date_Start",НачалоДня(ТекущаяДата()-365*24*3600));
		ЗапросНаЗаказПокупателя.УстановитьПараметр( "Date_End",КонецДня(ТекущаяДата()));
		
		ВыборкаНаЗаказПокупателя = ЗапросНаЗаказПокупателя.Выполнить().Выгрузить();	
		//ВыборкаНаЗаказПокупателя = РезультатЗапроса.Выбрать();
		
		Если ВыборкаНаЗаказПокупателя.Количество()>0 Тогда
			
			Для Каждого Стр Из ВыборкаНаЗаказПокупателя Цикл
				// Вставить обработку выборки ВыборкаДетальныеЗаписи				
				ОшибкаПриПоиске = Ложь;
				DesiredDate      = Стр.ES_ДатаДоставки;
				Number 			 = Стр.Номер;
				Date			 = Стр.Дата;
				//Recipient - Получатель
				Recipient         			  = Стр.ES_Получатель;
				Recipient_Name      		  = Стр.ES_ПолучательКонтактноеЛицо;
				Recipient_Phone               = Стр.ES_ПолучательТелефон;
				Recipient_FullAddress         = Стр.ES_АдресДоставки;
				FromCity               		  = Стр.ГородОтправитель;
				ToCity				          = Стр.ГородПолучатель;
				Recipient_City                = Стр.ES_ПолучательРегион;
				Delivered 					  = Стр.СтатусЗаказа;
				DeliveredComents			  = Стр.КомментарийКСтатусу;
				ES_НомерНакладной 			  = Стр.ES_НомерНакладной;
				ES_ВхНакладная	 			  = Стр.ES_ВхНакладная;
				
				ID = Новый Структура;
				ID.Вставить("Number ", Number);
				ID.Вставить("ShipmentNumber ", ES_НомерНакладной);
				ID.Вставить("ClientShipmentNumber", ES_ВхНакладная);
				ID.Вставить("Date ", Date);
				ID.Вставить("DesiredDate ", DesiredDate);
				ID.Вставить("Is_delivered ", Delivered);
				ID.Вставить("Is_deliveredComents", DeliveredComents);
				ID.Вставить("FromCity", FromCity);
				ID.Вставить("ToCity", ToCity);
				ID.Вставить("Recipient ", Recipient);
				ID.Вставить("Recipient_Name ", Recipient_Name);
				ID.Вставить("Recipient_Phone ", Recipient_Phone);
				ID.Вставить("Recipient_City ", Recipient_City);
				ID.Вставить("Recipient_FullAddress ", Recipient_FullAddress);
				Shipments.Добавить(ID);
			КонецЦикла;
			
		Иначе
			ОшибкаПриПоиске = Истина;
			ЗагрузкаУспешна = Ложь;
			КодОшибки = 1;
			ТекстОшибки = ТекстОшибки+"
			|Отправление не найдено. Обратитесь к менеждеру.";
		КонецЕсли;
	КонецЕсли;	
	
	СоответсвиеОтвета.Вставить("ЗагрузкаУспешна",ЗагрузкаУспешна);
	СоответсвиеОтвета.Вставить("КодОшибки",КодОшибки);
	СоответсвиеОтвета.Вставить("Shipments",Shipments);
	СоответсвиеОтвета.Вставить("ТекстОтвета",ТекстОшибки);
	
	Возврат  СоответсвиеОтвета;
	
	//EFSOL Шаповал О.А. -
КонецФункции
#КонецОбласти

#Область ПолучитьИсториюИзмСтатусов
Функция ПолучитьИсториюИзмененияСтатусовЗаказа(Запрос) Экспорт
	//EFSOL_Шаповал Олег Анатольевич 23 августа 2017 г. 12:41:19 +
	Ответ = Новый HTTPСервисОтвет(302);
	ТаблицаЗначенийОтвета  = Новый ТаблицаЗначений();
	
	SessionId = ПолучитьIDСесси(Запрос);
	
	ЭтоВитрина = Ложь;
	
	Если SessionId = Неопределено Тогда
		ЭтоВитрина = Истина;
	КонецЕсли;
	
	//провериьт на SessionId !!!
	ЗапросСесии = новый Запрос("ВЫБРАТЬ
	|	NS_СессииЛК.id,
	|	NS_СессииЛК.Начата,
	|	NS_СессииЛК.Истекает,
	|	NS_СессииЛК.Контрагент,
	|	NS_СессииЛК.ЗакрытаСамостоятельно
	|ИЗ
	|	РегистрСведений.NS_СессииЛК КАК NS_СессииЛК
	|ГДЕ
	|	NS_СессииЛК.id = &id
	|	И NS_СессииЛК.Истекает >=&ДатаТек
	|	И NS_СессииЛК.Начата <= &ДатаТек
	|	И НЕ NS_СессииЛК.ЗакрытаСамостоятельно");
	
	ЗапросСесии.УстановитьПараметр("id",СокрЛП(SessionId));
	ЗапросСесии.УстановитьПараметр("ДатаТек",ТекущаяДата());
	
	Выборка = ЗапросСесии.Выполнить().Выгрузить();
	Если Выборка.Количество()= 0 и НЕ ЭтоВитрина Тогда 
		СообщениеОшибки=  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"GetInvoice",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
		
	ИначеЕсли Выборка.Количество()= 1 ИЛИ ЭтоВитрина Тогда	
		
		ТекТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
		ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
		ОтветJSON =  ОбработкаJSON.UnJSON(ТекТекстЗапроса);
		
		//надо ОтветJSON проверить на правильность заполнения!!!
		ОтветНаПроверкуСтруктурыHistoryStatusChangesInvoices = ПроверитьСтруктуруВходаHistoryStatusChangesInvoices(ОтветJSON);
		ПрошлаПроверку = ОтветНаПроверкуСтруктурыHistoryStatusChangesInvoices.Получить("ПрошлаПроверку") ;
		Если ПрошлаПроверку Тогда 
			
			Если Не ЭтоВитрина Тогда
				Заказчик = Выборка[0].Контрагент;
			Иначе
				Заказчик = Неопределено;
			КонецЕсли;
			
			////Надо вывести данные "Заказ клиента"
			ПрошлаПроверкуЗК = ПолучитьИсториюСтатусаПоЗаказам(ОтветJSON, Заказчик);
			
			ЗагрузкаУспешна = ПрошлаПроверкуЗК.Получить("ЗагрузкаУспешна") ;
			ICN                   =    ПрошлаПроверкуЗК.Получить("ICN") ;
			КодОшибки				=  ПрошлаПроверкуЗК.Получить("КодОшибки");
			List      			    =    ПрошлаПроверкуЗК.Получить("List") ;
			ТекстОтвета     			    =    ПрошлаПроверкуЗК.Получить("ТекстОтвета") ;
			
			ОшибкаВОтвете = Не ЗагрузкаУспешна;
			
			ТаблицаЗначенийОтвета  = Новый ТаблицаЗначений();
			ТаблицаЗначенийОтвета.Колонки.Добавить("ICN");			
			ТаблицаЗначенийОтвета.Колонки.Добавить("List");
			
			СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
			СТ_Доб.ICN 			= ICN;
			СТ_Доб.List			= List;
			
			СообщениеОтветЗаписи =  ОписаниеОтветаСгенерить(ТекстОтвета,ОшибкаВОтвете,"HistoryStatusChangesInvoices",ТаблицаЗначенийОтвета,КодОшибки);
			Ответ.УстановитьТелоИзСтроки(СообщениеОтветЗаписи);
			
		иначе
			ТекстТек =  ОтветНаПроверкуСтруктурыHistoryStatusChangesInvoices.Получить("ТекстОшибки") ;
			СообщениеОшибки =  ОписаниеОтветаСгенерить(ТекстТек,Истина,"HistoryStatusChangesInvoices",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
		КонецЕсли;
		
	Иначе 
		СообщениеОшибки=  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"HistoryStatusChangesInvoices",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	КонецЕсли;
	
	Возврат Ответ;
	//EFSOL Шаповал О.А. -	
КонецФункции

Функция ПроверитьСтруктуруВходаHistoryStatusChangesInvoices(ОтветJSON_Соответствие)
	//EFSOL_Шаповал Олег Анатольевич 16 августа 2017 г. 13:00:15 +
	ТекстОшибки = "";
	СоответствиеПроверки = Новый Соответствие;
	
	Если ТипЗнч(ОтветJSON_Соответствие) = Тип("Соответствие") Тогда 
		ICN 			= ОтветJSON_Соответствие.Получить("ICN");
		ShipmentNumber = ОтветJSON_Соответствие.Получить("ShipmentNumber"); // массив
		
		Если НЕ ТипЗнч(ShipmentNumber) = Тип("Массив") Тогда 
			ТекстОшибки = ТекстОшибки +"
			|Структура не соответствует. ShipmentNumber должен быть массивом."; 
		КонецЕсли;
		
	Иначе
		ТекстОшибки = "Структура не соответствует. Необходимо проверить текст вызова.";
	КонецЕсли;
	
	СоответствиеПроверки.Вставить("ТекстОшибки",ТекстОшибки);
	
	Если ТекстОшибки = "" Тогда 
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Истина);
	Иначе
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Ложь);
	КонецЕсли;
	
	Возврат  СоответствиеПроверки;
	//EFSOL Шаповал О.А. -	
КонецФункции

Функция ПолучитьИсториюСтатусаПоЗаказам(ОтветJSON_Соответствие,Заказчик) 
	//EFSOL_Шаповал Олег Анатольевич 23 августа 2017 г. 15:38:08 +
	ТекстОшибки = "";
	КодОшибки = "";
	ЗагрузкаУспешна = Истина;
	Shipments = Новый Массив();
	СоответсвиеОтвета = Новый Соответствие; 
	
	ICN = ОтветJSON_Соответствие.Получить("ICN");
	Если ЗначениеЗаполнено(ICN) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Код = &Код
		|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
		|	И ДоговорыКонтрагентов.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Код",ICN);
		Запрос.УстановитьПараметр("Владелец",Заказчик);
		ТЗ_Договора = Запрос.Выполнить().Выгрузить();
		Если ТЗ_Договора.Количество() > 0 Тогда
			Договор = ТЗ_Договора[0].Ссылка;
		Иначе
			Договор = Неопределено;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Договор) Тогда
			ОшибкаПриПоиске = Истина;
			ЗагрузкаУспешна = Ложь;
			ТекстОшибки = ТекстОшибки+"
			|Не найден номер договора "+ICN+". Обратитесь к менеждеру.";
		КонецЕсли;		
	КонецЕсли;
	
	ShipmentNumber = ОтветJSON_Соответствие.Получить("ShipmentNumber");
			
	Если ShipmentNumber.Количество() = 0 Тогда
		ОшибкаПриПоиске = Истина;
		ЗагрузкаУспешна = Ложь;
		ТекстОшибки = ТекстОшибки+"
		|Укажите номер отправления.";
	КонецЕсли;
	
	Если ShipmentNumber.Количество() > 100 Тогда
		ОшибкаПриПоиске = Истина;
		ЗагрузкаУспешна = Ложь;
		ТекстОшибки = ТекстОшибки+"
		|Превышено количество запросов. Максиму 100 отправлений.";
	КонецЕсли;
	
	Если ЗагрузкаУспешна Тогда
		
		ЗапросНаЗаказПокупателя = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1000
		                                       |	ЗаказПокупателя.Ссылка КАК Ссылка
		                                       |ПОМЕСТИТЬ ВТ_Заказы
		                                       |ИЗ
		                                       |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		                                       |ГДЕ
		                                       |	НЕ ЗаказПокупателя.ПометкаУдаления
		                                       |	И ЗаказПокупателя.Дата МЕЖДУ &Date_Start И &Date_End"+?(Договор = Неопределено,"","
		                                       |	И ЗаказПокупателя.Договор = &Договор")+"
		                                       |
		                                       |СГРУППИРОВАТЬ ПО
		                                       |	ЗаказПокупателя.Ссылка
		                                       |
		                                       |ИНДЕКСИРОВАТЬ ПО
		                                       |	Ссылка
		                                       |;
		                                       |
		                                       |////////////////////////////////////////////////////////////////////////////////
		                                       |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                                       |	ВТ_Заказы.Ссылка КАК Ссылка,
		                                       |	ВТ_Заказы.Ссылка.ES_ВхНакладная КАК ES_ВхНакладная
		                                       |ПОМЕСТИТЬ ВТ_ВхНакладные
		                                       |ИЗ
		                                       |	ВТ_Заказы КАК ВТ_Заказы
		                                       |ГДЕ
		                                       |	ВТ_Заказы.Ссылка.ES_ВхНакладная В (&ShipmentNumber)
		                                       |
		                                       |СГРУППИРОВАТЬ ПО
		                                       |	ВТ_Заказы.Ссылка.ES_ВхНакладная,
		                                       |	ВТ_Заказы.Ссылка
		                                       |;
		                                       |
		                                       |////////////////////////////////////////////////////////////////////////////////
		                                       |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                                       |	ВТ_Заказы.Ссылка КАК Ссылка,
		                                       |	ВТ_Заказы.Ссылка.ES_НомерНакладной КАК ES_Накладная
		                                       |ПОМЕСТИТЬ ВТ_Накладные
		                                       |ИЗ
		                                       |	ВТ_Заказы КАК ВТ_Заказы
		                                       |ГДЕ
		                                       |	ВТ_Заказы.Ссылка.ES_НомерНакладной В (&ShipmentNumber)
		                                       |
		                                       |СГРУППИРОВАТЬ ПО
		                                       |	ВТ_Заказы.Ссылка,
		                                       |	ВТ_Заказы.Ссылка.ES_НомерНакладной
		                                       |;
		                                       |
		                                       |////////////////////////////////////////////////////////////////////////////////
		                                       |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                                       |	ЕСТЬNULL(ВТ_ВхНакладные.Ссылка, ВТ_Накладные.Ссылка) КАК Заказ,
		                                       |	ЕСТЬNULL(ВТ_ВхНакладные.ES_ВхНакладная, ВТ_Накладные.ES_Накладная) КАК Накладная
		                                       |ПОМЕСТИТЬ ВТ_ЗаказыГруппировка
		                                       |ИЗ
		                                       |	ВТ_ВхНакладные КАК ВТ_ВхНакладные
		                                       |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Накладные КАК ВТ_Накладные
		                                       |		ПО ВТ_ВхНакладные.ES_ВхНакладная = ВТ_Накладные.ES_Накладная
		                                       |;
		                                       |
		                                       |////////////////////////////////////////////////////////////////////////////////
		                                       |ВЫБРАТЬ
		                                       |	ВТ_ЗаказыГруппировка.Заказ КАК Заказ,
		                                       |	ВТ_ЗаказыГруппировка.Накладная КАК Накладная,
		                                       |	ES_СтатусыЗаказов.СтатусЗаказа КАК СтатусЗаказа,
		                                       |	МАКСИМУМ(ES_СтатусыЗаказов.Период) КАК Период,
		                                       |	ES_СтатусыЗаказов.Регистратор КАК Регистратор
		                                       |ПОМЕСТИТЬ ВТ_Статусы
		                                       |ИЗ
		                                       |	ВТ_ЗаказыГруппировка КАК ВТ_ЗаказыГруппировка
		                                       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов КАК ES_СтатусыЗаказов
		                                       |		ПО ВТ_ЗаказыГруппировка.Заказ = ES_СтатусыЗаказов.Заказ
		                                       |ГДЕ
		                                       |	ES_СтатусыЗаказов.Период МЕЖДУ &Date_Start И &Date_End
		                                       |
		                                       |СГРУППИРОВАТЬ ПО
		                                       |	ВТ_ЗаказыГруппировка.Заказ,
		                                       |	ВТ_ЗаказыГруппировка.Накладная,
		                                       |	ES_СтатусыЗаказов.СтатусЗаказа,
		                                       |	ES_СтатусыЗаказов.Регистратор
		                                       |;
		                                       |
		                                       |////////////////////////////////////////////////////////////////////////////////
		                                       |ВЫБРАТЬ
		                                       |	ВТ_Статусы.Заказ КАК Заказ,
		                                       |	ВТ_Статусы.Накладная КАК Накладная,
		                                       |	ВТ_Статусы.СтатусЗаказа КАК СтатусЗаказа,
		                                       |	ВТ_Статусы.Период КАК Период,
		                                       |	ВТ_Статусы.Регистратор КАК Регистратор,
		                                       |	ВложенныйЗапрос.Комментарий КАК Комментарий
		                                       |ИЗ
		                                       |	ВТ_Статусы КАК ВТ_Статусы
		                                       |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                                       |			ES_ИзменяемыеРеквизитыЗаказов.Заказ КАК Заказ,
		                                       |			ES_ИзменяемыеРеквизитыЗаказов.Регистратор КАК Регистратор,
		                                       |			ES_ИзменяемыеРеквизитыЗаказов.Значение КАК Комментарий
		                                       |		ИЗ
		                                       |			РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов КАК ES_ИзменяемыеРеквизитыЗаказов
		                                       |		ГДЕ
		                                       |			ES_ИзменяемыеРеквизитыЗаказов.РеквизитЗаказа = &РеквизитЗаказа
		                                       |			И ES_ИзменяемыеРеквизитыЗаказов.Заказ В
		                                       |					(ВЫБРАТЬ
		                                       |						мВТ.Заказ
		                                       |					ИЗ
		                                       |						ВТ_Статусы КАК мВТ)
		                                       |			И ES_ИзменяемыеРеквизитыЗаказов.Период МЕЖДУ &Date_Start И &Date_End) КАК ВложенныйЗапрос
		                                       |		ПО ВТ_Статусы.Заказ = ВложенныйЗапрос.Заказ
		                                       |			И ВТ_Статусы.Регистратор = ВложенныйЗапрос.Регистратор
		                                       |
		                                       |УПОРЯДОЧИТЬ ПО
		                                       |	Накладная,
		                                       |	Период
		                                       |ИТОГИ ПО
		                                       |	Заказ");
		ЗапросНаЗаказПокупателя.УстановитьПараметр( "ShipmentNumber",ShipmentNumber);
		Если Не Договор = Неопределено Тогда
			ЗапросНаЗаказПокупателя.УстановитьПараметр( "Договор",Договор);
		КонецЕсли;
		ЗапросНаЗаказПокупателя.УстановитьПараметр( "РеквизитЗаказа",Перечисления.ES_ИзменяемыеРеквизитыЗаказа.КомментарийСтатуса);
		ЗапросНаЗаказПокупателя.УстановитьПараметр( "Date_Start",НачалоДня(ТекущаяДата()-90*24*3600));
		ЗапросНаЗаказПокупателя.УстановитьПараметр( "Date_End",КонецДня(ТекущаяДата()));
		
		РезультатЗапроса = ЗапросНаЗаказПокупателя.Выполнить();
		//.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);	
		//ВыборкаНаЗаказПокупателя = РезультатЗапроса.Выбрать();
		List = Новый Массив;
		
		Если не РезультатЗапроса.Пустой() Тогда
						
			ВыборкаДок = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ОшибкаПриПоиске = Ложь;
			
			Пока ВыборкаДок.Следующий() Цикл
				
				Shipment = Новый Структура;
				// Вставить обработку выборки ВыборкаДетальныеЗаписи				
				Shipment.Вставить("ShipmentNumber", ВыборкаДок.Заказ.ES_НомерНакладной);
				Shipment.Вставить("ClientShipmentNumber", ВыборкаДок.Заказ.ES_ВхНакладная);
				Shipment.Вставить("FromCity", ВыборкаДок.Заказ.ES_Город1);
				Shipment.Вставить("ToCity", ВыборкаДок.Заказ.ES_АдресДоставкиГород);
				
				ВыборкаСтатус = ВыборкаДок.Выбрать();
				МассиыСтатусов = Новый Массив;
				Пока ВыборкаСтатус.Следующий() Цикл
					//Recipient - Получатель
					
					ID = Новый Структура;
					ID.Вставить("Date ", ВыборкаСтатус.Период);
					ID.Вставить("Is_delivered ", ВыборкаСтатус.СтатусЗаказа);
					ID.Вставить("Is_deliveredComents", ВыборкаСтатус.Комментарий);
					МассиыСтатусов.Добавить(ID);
				КонецЦикла;
				Shipment.Вставить("History", МассиыСтатусов);
				List.Добавить(Shipment);
			КонецЦикла;
						
		Иначе
			ОшибкаПриПоиске = Истина;
			ЗагрузкаУспешна = Ложь;
			КодОшибки = 1;
			ТекстОшибки = ТекстОшибки+"
			|Отправление не найдено. Обратитесь к менеждеру.";
		КонецЕсли;
	КонецЕсли;	
	
	СоответсвиеОтвета.Вставить("ЗагрузкаУспешна",ЗагрузкаУспешна);
	СоответсвиеОтвета.Вставить("КодОшибки",КодОшибки);
	СоответсвиеОтвета.Вставить("ICN",ICN);
	СоответсвиеОтвета.Вставить("List",List);
	СоответсвиеОтвета.Вставить("ТекстОтвета",ТекстОшибки);
	
	Возврат  СоответсвиеОтвета;
	
	//EFSOL Шаповал О.А. -
КонецФункции
#КонецОбласти

#Область Терминал
Функция ПолучитьСписокСкладов(Запрос) Экспорт
	//EFSOL_Шаповал Олег Анатольевич 23 августа 2017 г. 12:41:19 +
	Ответ = Новый HTTPСервисОтвет(302);
	ТаблицаЗначенийОтвета  = Новый ТаблицаЗначений();
	ТаблицаЗначенийОтвета.Колонки.Добавить("List");
	СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
	СТ_Доб.List = Новый Массив;
	
	SessionId = Запрос.Заголовки.Получить("SessionId");
	//провериьт на SessionId !!!
	ЗапросСесии = новый Запрос("ВЫБРАТЬ
						|	NS_СессииЛК.id,
						|	NS_СессииЛК.Начата,
						|	NS_СессииЛК.Истекает,
						|	NS_СессииЛК.Контрагент,
						|	NS_СессииЛК.ЗакрытаСамостоятельно
						|ИЗ
						|	РегистрСведений.NS_СессииЛК КАК NS_СессииЛК
						|ГДЕ
						|	NS_СессииЛК.id = &id
						|	И NS_СессииЛК.Истекает >=&ДатаТек
						|	И NS_СессииЛК.Начата <= &ДатаТек
						|	И НЕ NS_СессииЛК.ЗакрытаСамостоятельно");
	
	ЗапросСесии.УстановитьПараметр("id",СокрЛП(SessionId));
	ЗапросСесии.УстановитьПараметр("ДатаТек",ТекущаяДата());
	
	Выборка = ЗапросСесии.Выполнить().Выгрузить();
	Если Выборка.Количество()= 0 Тогда 
		СообщениеОшибки=  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"terminal",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	
	ИначеЕсли   Выборка.Количество()= 1 Тогда  
		
		ТекТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
		ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
		ОтветJSON =  ОбработкаJSON.UnJSON(ТекТекстЗапроса);
		
		//надо ОтветJSON проверить на правильность заполнения!!!
		ОтветНаПроверкуСтруктуры_terminal = ПроверитьСтруктуруВхода_terminal(ОтветJSON);
		ПрошлаПроверку = ОтветНаПроверкуСтруктуры_terminal.Получить("ПрошлаПроверку");
		Если ПрошлаПроверку Тогда 
			
			//Надо напечатать наклейки
			ОтветОбработки = ОбработатьСписокСкладов(ОтветJSON);
			//
			ЗагрузкаУспешна = ОтветОбработки.Получить("ЗагрузкаУспешна") ;
			List			= ОтветОбработки.Получить("List") ;
			ТекстОтвета     = ОтветОбработки.Получить("ТекстОтвета") ;
			//
			ОшибкаВОтвете = Не ЗагрузкаУспешна;
			//
			ТаблицаЗначенийОтвета.Очистить();
			СТ_Доб = ТаблицаЗначенийОтвета.Добавить();
			СТ_Доб.List = List;
			
			СообщениеОтветЗаписи =  ОписаниеОтветаСгенерить(ТекстОтвета,ОшибкаВОтвете,"terminal",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОтветЗаписи); 

		Иначе
			ТекстТек =  ОтветНаПроверкуСтруктуры_terminal.Получить("ТекстОшибки") ;
			СообщениеОшибки=  ОписаниеОтветаСгенерить(ТекстТек,Истина,"terminal",ТаблицаЗначенийОтвета);
			Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
		КонецЕсли;
	Иначе 
		СообщениеОшибки=  ОписаниеОтветаСгенерить("Сессия: "+Строка(SessionId)+" недействительна.",Истина,"terminal",ТаблицаЗначенийОтвета,0);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	КонецЕсли;
	 		
	Возврат Ответ;
	//EFSOL Шаповал О.А. -
КонецФункции

Функция ПроверитьСтруктуруВхода_terminal(ОтветJSON_Соответствие)
	//EFSOL_Шаповал Олег Анатольевич 16 августа 2017 г. 13:00:15 +
	ТекстОшибки = "";
	СоответствиеПроверки = Новый Соответствие;
	
	Если ТипЗнч(ОтветJSON_Соответствие) = Тип("Соответствие") Тогда 
		//{
		//"City":    "<город>"
		//}
		 
		//City 			= ОтветJSON_Соответствие.Получить("City");  		
		//ТекстОшибки = ПроверитьНаЗаполениеИТип(City,Тип("Строка"),ТекстОшибки,"City");
				
	Иначе
		ТекстОшибки = "Структура не соответствует. Необходимо проверить текст вызова.";
	КонецЕсли;
	
	СоответствиеПроверки.Вставить("ТекстОшибки",ТекстОшибки);
	
	Если ТекстОшибки = "" Тогда 
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Истина);
	Иначе
		СоответствиеПроверки.Вставить("ПрошлаПроверку",Ложь);
	КонецЕсли;
	
	Возврат  СоответствиеПроверки;
	//EFSOL Шаповал О.А. -	
КонецФункции

&НаСервере  
Функция ОбработатьСписокСкладов(ОтветJSON_Соответствие)
	//EFSOL_Шаповал Олег Анатольевич 23 августа 2017 г. 15:38:08 +
	ТекстОшибки = "";
	ЗагрузкаУспешна = Истина;
	СоответсвиеОтвета = Новый Соответствие;
	МассивСкладов = Новый Массив;
	
	City = ОтветJSON_Соответствие.Получить("City");//это проверялось
	
	//Если ЗначениеЗаполнено(City) Тогда
	//	Город = Справочники.ES_Города.НайтиПоНаименованию(City);
	//	Если Город = Справочники.ES_Города.ПустаяСсылка() Тогда
	//		ЗагрузкаУспешна = Ложь;
	//		ТекстОшибки = ТекстОшибки+"
	//		|Город не определен - "+Строка(City)+". Проверьте правильность заполнения.";	
	//	КонецЕсли;
	//КонецЕсли;
	
	
	Если ЗагрузкаУспешна Тогда
		Запрос = Новый Запрос;
		ТекстЗапроса = "ВЫБРАТЬ
		               |	СтруктурныеЕдиницыКонтактнаяИнформация.Ссылка.Код КАК Код,
		               |	СтруктурныеЕдиницыКонтактнаяИнформация.Ссылка.Наименование КАК Наименование,
		               |	СтруктурныеЕдиницыКонтактнаяИнформация.Представление КАК ПолныйАдрес,
		               |	СтруктурныеЕдиницыКонтактнаяИнформация.Город КАК Город,
		               |	СтруктурныеЕдиницыКонтактнаяИнформация.Регион КАК Регион
		               |ИЗ
		               |	Справочник.СтруктурныеЕдиницы.КонтактнаяИнформация КАК СтруктурныеЕдиницыКонтактнаяИнформация
		               |ГДЕ
		               |	СтруктурныеЕдиницыКонтактнаяИнформация.Вид = &Вид
		               |	И НЕ СтруктурныеЕдиницыКонтактнаяИнформация.Ссылка.ПометкаУдаления";
		Запрос.УстановитьПараметр("Вид",Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы);
		//               
		Если ЗначениеЗаполнено(City) Тогда
			ТекстЗапроса = ТекстЗапроса+"
			|	И (СтруктурныеЕдиницыКонтактнаяИнформация.Город Подобно ""%""+&Город+""%"" или СтруктурныеЕдиницыКонтактнаяИнформация.Регион ПОДОБНО ""%""+&Город+""%"")";
			Запрос.УстановитьПараметр("Город",СокрЛП(City));
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса+"
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			мСтруктура = Новый Структура;
			мСтруктура.Вставить("code",Выборка.Код);
			мСтруктура.Вставить("name",Выборка.Наименование);
			мСтруктура.Вставить("address",СокрЛП(Выборка.ПолныйАдрес));
			МассивСкладов.Добавить(мСтруктура);	
		КонецЦикла;
		
	КонецЕсли;	
	
	СоответсвиеОтвета.Вставить("ЗагрузкаУспешна",ЗагрузкаУспешна);
	СоответсвиеОтвета.Вставить("List",МассивСкладов);
	СоответсвиеОтвета.Вставить("ТекстОтвета",ТекстОшибки);
	
	Возврат  СоответсвиеОтвета;
	
	//EFSOL Шаповал О.А. -
КонецФункции

#КонецОбласти

#Область ПолучитьЗаказыПокупателяПоЧастиНомера

&НаСервере
Функция ПолучитьЗаказыПокупателяПоЧастиНомера(Запрос) Экспорт
	//{[+]EFSOL, Козлов Максим 07.06.2019 14:41:28
	Ответ = Новый HTTPСервисОтвет(302);
	ТаблицаЗначенийОтвета  = Новый ТаблицаЗначений();
	
	ТекТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
	ОбработкаJSON = Обработки.JSON_and_UnJSON.Создать();
	ОтветJSON =  ОбработкаJSON.UnJSON(ТекТекстЗапроса);
	
	ОтветНаПроверкуСтруктурыGetByNumberInvoice = ПроверитьСтруктуруВходаGetByNumberInvoice(ОтветJSON);
	ПрошлаПроверку = ОтветНаПроверкуСтруктурыGetByNumberInvoice.Получить("ПрошлаПроверку") ;
	Если ПрошлаПроверку Тогда 
		
		ПрошлаПроверкуЗК = ПолучитьЗаказыПоЧастиНомера(ОтветJSON);
		
		ЗагрузкаУспешна = ПрошлаПроверкуЗК.Получить("ЗагрузкаУспешна") ;
		КодОшибки		= ПрошлаПроверкуЗК.Получить("КодОшибки");
		Shipments      	= ПрошлаПроверкуЗК.Получить("Shipments") ;
		ТекстОтвета     = ПрошлаПроверкуЗК.Получить("ТекстОтвета") ;
		
		ОшибкаВОтвете = Не ЗагрузкаУспешна;
		
		ТаблицаЗначенийОтвета  = Новый ТаблицаЗначений();
		ТаблицаЗначенийОтвета.Колонки.Добавить("Shipments");
		
		СТ_Доб 				= ТаблицаЗначенийОтвета.Добавить();
		СТ_Доб.Shipments	= Shipments;
		
		СообщениеОтветЗаписи =  ОписаниеОтветаСгенерить(ТекстОтвета,ОшибкаВОтвете,"GetByNumberInvoice",ТаблицаЗначенийОтвета,КодОшибки);
		Ответ.УстановитьТелоИзСтроки(СообщениеОтветЗаписи);
		
	иначе
		ТекстТек =  ОтветНаПроверкуСтруктурыGetByNumberInvoice.Получить("ТекстОшибки") ;
		СообщениеОшибки =  ОписаниеОтветаСгенерить(ТекстТек,Истина,"GetByNumberInvoice",ТаблицаЗначенийОтвета);
		Ответ.УстановитьТелоИзСтроки(СообщениеОшибки);
	КонецЕсли;
	
	Возврат Ответ;	
	//}07.06.2019 14:41:28 EFSOL
КонецФункции

Функция ПолучитьЗаказыПоЧастиНомера(ОтветJSON_Соответствие) 
	//{[+]EFSOL, Козлов Максим 07.06.2019 14:42:03	
	ТекстОшибки 	= ""; 		КодОшибки 					= "";					ЗагрузкаУспешна 	= Истина;						
	Shipments 		= Новый 	Массив();СоответсвиеОтвета 	= Новый Соответствие; 
	
	ShipmentNumber = ОтветJSON_Соответствие.Получить("ShipmentNumber");
			
	Если Не ЗначениеЗаполнено(ShipmentNumber) Тогда
		ОшибкаПриПоиске = Истина;
		ЗагрузкаУспешна = Ложь;
		ТекстОшибки = ТекстОшибки+"
		|Укажите номер накладной.";
	КонецЕсли;
	
	ICN = ОтветJSON_Соответствие.Получить("ICN");
			
	Если Не ЗначениеЗаполнено(ICN) Тогда
		ОшибкаПриПоиске = Истина;
		ЗагрузкаУспешна = Ложь;
		ТекстОшибки = ТекстОшибки+"
		|Укажите ICN клиента.";
	КонецЕсли;
	
	Если ЗагрузкаУспешна Тогда
		
		ЗапросНаЗаказПокупателя = Новый Запрос;
		ЗапросНаЗаказПокупателя.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ES_СтатусыЗаказовСрезПоследних.СтатусЗаказа 						КАК Is_delivered,
			|	ЗаказПокупателя.ES_НомерНакладной 									КАК ShipmentNumber,
			|	ЗаказПокупателя.ES_Получатель 										КАК Recipient,
			|	ЗаказПокупателя.ES_ПолучательКонтактноеЛицо 						КАК Recipient_Name,
			|	ЗаказПокупателя.ES_ПолучательТелефон 								КАК Recipient_Phone,
			|	ЗаказПокупателя.Номер 												КАК Number,
			|	ЗаказПокупателя.Дата 												КАК Date,
			|	ЗаказПокупателя.ES_ДатаДоставки 									КАК DesiredDate,
			|	ЗаказПокупателя.ES_АдресДоставки 									КАК Recipient_FullAddress,
			|	ЗаказПокупателя.ES_ПолучательРегион 								КАК Recipient_City,
			|	ЕСТЬNULL(КомментарийКСтатусу.Значение, """") 						КАК Is_deliveredComents,
			|	ЗаказПокупателя.ES_ВхНакладная 										КАК ClientShipmentNumber,
			|	ЗаказПокупателя.ES_Город1 											КАК FromCity,
			|	ЗаказПокупателя.ES_АдресДоставкиГород 								КАК ToCity,
			|	ЗаказПокупателя.ES_ВидДоставки		            					КАК DeliveryType
			|ИЗ
			|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_СтатусыЗаказов.СрезПоследних КАК ES_СтатусыЗаказовСрезПоследних
			|		ПО ЗаказПокупателя.Ссылка = ES_СтатусыЗаказовСрезПоследних.Заказ
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ES_ИзменяемыеРеквизитыЗаказов.СрезПоследних(, РеквизитЗаказа = ЗНАЧЕНИЕ(Перечисление.ES_ИзменяемыеРеквизитыЗаказа.КомментарийСтатуса)) КАК КомментарийКСтатусу
			|		ПО ЗаказПокупателя.Ссылка = КомментарийКСтатусу.Заказ
			|ГДЕ
			|	НЕ ЗаказПокупателя.ПометкаУдаления
			|	И (ЗаказПокупателя.ES_ВхНакладная ПОДОБНО(&ShipmentNumber)
			|			ИЛИ ЗаказПокупателя.ES_НомерНакладной ПОДОБНО(&ShipmentNumber))
			|   И ЗаказПокупателя.Договор.Код = &ICN
			|
			|УПОРЯДОЧИТЬ ПО 
			|	ES_ДатаДоставки УБЫВ";
		ЗапросНаЗаказПокупателя.УстановитьПараметр( "ShipmentNumber","%"+ShipmentNumber+"%");
		ЗапросНаЗаказПокупателя.УстановитьПараметр( "ICN",ICN);
		
		ВыборкаНаЗаказПокупателя = ЗапросНаЗаказПокупателя.Выполнить().Выгрузить();	
		
		Если ВыборкаНаЗаказПокупателя.Количество()>0 Тогда
			
			Для Каждого Стр Из ВыборкаНаЗаказПокупателя Цикл
				ID = Новый Структура ("
										|Number,
										|ShipmentNumber,
										|ClientShipmentNumber,
										|Date,
										|DesiredDate,
										|Is_delivered,
										|Is_deliveredComents,
										|FromCity,
										|ToCity,
										|Recipient,
										|Recipient_Name,
										|Recipient_Phone,
										|Recipient_City,
										|Recipient_FullAddress,
										|DeliveryType", );
				ЗаполнитьЗначенияСвойств(ID, Стр);
				Shipments.Добавить(ID);
			КонецЦикла;
			
		Иначе
			ОшибкаПриПоиске = Истина;
			ЗагрузкаУспешна = Ложь;
			КодОшибки = 1;
			ТекстОшибки = ТекстОшибки+"
			|Отправление не найдено. Обратитесь к менеждеру.";
		КонецЕсли;
	КонецЕсли;	
	
	СоответсвиеОтвета.Вставить("ЗагрузкаУспешна",ЗагрузкаУспешна);
	СоответсвиеОтвета.Вставить("КодОшибки",КодОшибки);
	СоответсвиеОтвета.Вставить("Shipments",Shipments);
	СоответсвиеОтвета.Вставить("ТекстОтвета",ТекстОшибки);
	
	Возврат  СоответсвиеОтвета;	
	//}07.06.2019 14:41:28 EFSOL
КонецФункции
 
#КонецОбласти 






