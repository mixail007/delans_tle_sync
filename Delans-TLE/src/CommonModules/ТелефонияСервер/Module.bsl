
#Область ИнтеграцияСистемаВзаимодействия

Функция ИдентификаторОбсужденияЖурналЗвонков() Экспорт
	
	ОбсуждениеЖурналИдентификатор = Неопределено;
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.11.0") < 0 Тогда
		Возврат ОбсуждениеЖурналИдентификатор;
	КонецЕсли;
	
#Если НЕ ВнешнееСоединение Тогда
	Ключ = КлючСлужебногоОбсужденияСистемыВзаимодействия();
	
	Если НЕ СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		Возврат ОбсуждениеЖурналИдентификатор;
	КонецЕсли;
	
	Обсуждение = Неопределено;
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(Ключ);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru='Поиск обсуждения Системы взаимодействия по ключу'"), УровеньЖурналаРегистрации.Ошибка,, Ключ, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Обсуждение <> Неопределено Тогда
		ОбсуждениеЖурналИдентификатор = Обсуждение.Идентификатор;
	КонецЕсли;
#КонецЕсли
	
	Возврат ОбсуждениеЖурналИдентификатор;
	
КонецФункции

Функция КлючОбсужденияЖурналЗвонков() Экспорт
	
	ОбсуждениеЖурналИдентификатор = Неопределено;
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.11.0") < 0 Тогда
		Возврат ОбсуждениеЖурналИдентификатор;
	КонецЕсли;
	
	Обсуждение = Неопределено;
	Ключ = КлючСлужебногоОбсужденияСистемыВзаимодействия();
	
#Если НЕ ВнешнееСоединение Тогда
	Если НЕ СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		Возврат ОбсуждениеЖурналИдентификатор;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(Ключ);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru='Поиск обсуждения Системы взаимодействия по ключу'"), УровеньЖурналаРегистрации.Ошибка,, Ключ, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
#КонецЕсли
	
	Если Обсуждение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Ключ;
	
КонецФункции

Функция СоздатьОбсуждениеЖурналЗвонков() Экспорт
	
	ОбсуждениеЖурналИдентификатор = Неопределено;
	
#Если НЕ ВнешнееСоединение Тогда
	Ключ = КлючСлужебногоОбсужденияСистемыВзаимодействия();
	
	ОбсуждениеЖурнал = СистемаВзаимодействия.СоздатьОбсуждение();
	ОбсуждениеЖурнал.Ключ = Ключ;
	ОбсуждениеЖурнал.Отображаемое = Ложь;
	ОбсуждениеЖурнал.Заголовок = НСтр("ru='Журнал звонков'");
	ОбсуждениеЖурнал.Участники.Добавить(СистемаВзаимодействия.СтандартныеПользователи.ВсеПользователиПриложения);
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		ОбсуждениеЖурнал.Записать();
		ОбсуждениеЖурналИдентификатор = ОбсуждениеЖурнал.Идентификатор;
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru='Создание служебного обсуждения Системы взаимодействия'"), УровеньЖурналаРегистрации.Ошибка,, Ключ, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
#КонецЕсли
	
	Возврат ОбсуждениеЖурналИдентификатор;
	
КонецФункции

Процедура ОбновитьЖурналЗвонков() Экспорт
	
	ОбсуждениеЖурналИдентификатор = Неопределено;
	ЕстьОшибки = Ложь;
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.11.0") < 0 Тогда
		УстановитьПривилегированныйРежим(Истина);
		Константы.ТелефонияЖурналЗвонковОбновлен.Установить(Истина);
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;
	
#Если НЕ ВнешнееСоединение Тогда
	Если НЕ СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		УстановитьПривилегированныйРежим(Истина);
		Константы.ТелефонияЖурналЗвонковОбновлен.Установить(Истина);
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(КлючСлужебногоОбсужденияСистемыВзаимодействия());
	Исключение
		ЕстьОшибки = Истина;
		ЗаписьЖурналаРегистрации(НСтр("ru='Телефония.ПолучениеОбсужденияСистемыВзаимодействияПоКлючу'"), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Обсуждение <> Неопределено Тогда
		ОбсуждениеЖурналИдентификатор = Обсуждение.Идентификатор;
	КонецЕсли;
#КонецЕсли
	
	Если ОбсуждениеЖурналИдентификатор = Неопределено Тогда
		УстановитьПривилегированныйРежим(Истина);
		Константы.ТелефонияЖурналЗвонковОбновлен.Установить(НЕ ЕстьОшибки);
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;
	
#Если НЕ ВнешнееСоединение Тогда
	Отбор = Новый ОтборСообщенийСистемыВзаимодействия();
	Отбор.Обсуждение = ОбсуждениеЖурналИдентификатор;
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		Сообщения = СистемаВзаимодействия.ПолучитьСообщения(Отбор);
		Для каждого Сообщение Из Сообщения Цикл
			СистемаВзаимодействия.УдалитьСообщение(Сообщение.Идентификатор);
		КонецЦикла;
		ЗаписьЖурналаРегистрации(
			"Телефония.ОбновлениеЖурналаЗвонков",
			УровеньЖурналаРегистрации.Информация
		);
	Исключение
		ЕстьОшибки = Истина;
		ЗаписьЖурналаРегистрации(
			"Телефония.ОбновлениеЖурналаЗвонков",
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ТелефонияЖурналЗвонковОбновлен.Установить(Истина);
	УстановитьПривилегированныйРежим(Ложь);
#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияТехнологияСервиса

Процедура ПриЗагрузкеПользователяИнформационнойБазы(ПользовательИБ) Экспорт
	
	Если ПользовательИБ.Имя <> СлужебныйПользовательТелефонииЛогин() Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательИБ.ПоказыватьВСпискеВыбора = Ложь;
	
	Если НЕ ПользовательИБ.ПарольУстановлен Тогда
		ПользовательИБ.Пароль = СлужебныйПользовательТелефонииПароль();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиТелефонии

Функция КорневойАдресАТС() Экспорт
	
	ИспользуемаяАТС = Константы.ИспользуемаяАТС.Получить();
	Если ИспользуемаяАТС = Перечисления.ДоступныеАТС.MangoOffice Тогда
		Возврат "https://app.mango-office.ru/vpbx/";
	ИначеЕсли ТелефонияПереопределяемый.ЭтоПлатформаItoolabs(ИспользуемаяАТС) Тогда
		Возврат ПолучитьНастройкиТелефонии().АдресОблачнойАТС;
	ИначеЕсли ИспользуемаяАТС = Перечисления.ДоступныеАТС.Яндекс Тогда
		Возврат "https://api.yandex.mightycall.ru/";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНастройкиТелефонии() Экспорт
	
	Результат = НастройкиТелефонииПоУмолчанию();
	СохраненныеНастройки = Константы.НастройкиТелефонии.Получить().Получить();
	
	Если СохраненныеНастройки <> Неопределено Тогда
		
		Для Каждого КлючИЗначение Из Результат Цикл
			Если СохраненныеНастройки.Свойство(КлючИЗначение.Ключ) Тогда
				Результат[КлючИЗначение.Ключ] = СохраненныеНастройки[КлючИЗначение.Ключ];
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УстановитьНастройкуТелефонии(Ключ, Значение) Экспорт
	
	НастройкиТелефонии = ТелефонияСервер.ПолучитьНастройкиТелефонии();
	НастройкиТелефонии.Вставить(Ключ, Значение);
	
	Константы.НастройкиТелефонии.Установить(Новый ХранилищеЗначения(НастройкиТелефонии, Новый СжатиеДанных(6)));
	
КонецФункции

Функция ПерсональноеМобильноеУстройство() Экспорт
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТелефонии", "УзелОбмена", Неопределено);
	
КонецФункции

Функция АдресОбратногоВызоваОблачнаяТелефония(ИспользуемаяАТС = Неопределено) Экспорт
	
	Перем НавигационнаяСсылка;
	
	Если ИспользуемаяАТС = Неопределено Тогда
		ИспользуемаяАТС = Константы.ИспользуемаяАТС.Получить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИспользуемаяАТС) Тогда
		Возврат НавигационнаяСсылка;
	КонецЕсли;
	
	АдресСервераОсновнойПубликации = Неопределено;
	АдресРесурсаОсновнойПубликации = Неопределено;
	
	ОбщиеНастройкиТелефонии = Константы.ОбщиеНастройкиТелефонии.Получить().Получить();
	ЕстьНастройкиПубликации = ТипЗнч(ОбщиеНастройкиТелефонии) = Тип("Структура");
	
	НавигационнаяСсылкаИнформационнойБазы = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
	БазаОпубликованаНаВебСервере = СтрНачинаетсяС(НавигационнаяСсылкаИнформационнойБазы, "http://") ИЛИ СтрНачинаетсяС(НавигационнаяСсылкаИнформационнойБазы, "https://");
	
	ПараметрыПодключения = Новый Структура;
	ШаблонСтрокиПодключения = Неопределено;
	
	Если ЕстьНастройкиПубликации Тогда
		
		Если ОбщиеНастройкиТелефонии.Свойство("АдресСервераОсновнойПубликации") И ЗначениеЗаполнено(ОбщиеНастройкиТелефонии.АдресСервераОсновнойПубликации) Тогда
			ПараметрыПодключения.Вставить("АдресСервераОсновнойПубликации", ОбщиеНастройкиТелефонии.АдресСервераОсновнойПубликации);
		КонецЕсли;
		
		НастройкиПубликацииИнтеграции = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОбщиеНастройкиТелефонии, "НастройкиПубликации", Новый Соответствие).Получить(ИспользуемаяАТС);
		
		Если ТипЗнч(НастройкиПубликацииИнтеграции) = Тип("Структура")
			И НастройкиПубликацииИнтеграции.Свойство("АдресРесурсаОсновнойПубликации")
			И ЗначениеЗаполнено(НастройкиПубликацииИнтеграции.АдресРесурсаОсновнойПубликации)Тогда
			
			ПараметрыПодключения.Вставить("АдресРесурсаОсновнойПубликации", НастройкиПубликацииИнтеграции.АдресРесурсаОсновнойПубликации);
		КонецЕсли;
		
	ИначеЕсли БазаОпубликованаНаВебСервере Тогда
		
		ПараметрыПодключения.Вставить("АдресСервераОсновнойПубликации", НавигационнаяСсылкаИнформационнойБазы);
		
	КонецЕсли;
	
	ПараметрыПодключения.Вставить("КорневойURL", КорневойURLСервисаОсновнойПубликации(ИспользуемаяАТС));
	ПараметрыПодключения.Вставить("ОбластьДанных", Формат(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса(), "ЧГ=0"));
	
	Если БазаОпубликованаНаВебСервере И НЕ ЕстьНастройкиПубликации Тогда
		ШаблонСтрокиПодключения = "[АдресСервераОсновнойПубликации]/hs/[КорневойURL]";
	ИначеЕсли ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Если ПараметрыПодключения.Свойство("АдресРесурсаОсновнойПубликации") И ЗначениеЗаполнено(ПараметрыПодключения.АдресРесурсаОсновнойПубликации) Тогда
			ШаблонСтрокиПодключения = "[АдресСервераОсновнойПубликации]/[АдресРесурсаОсновнойПубликации]/[ОбластьДанных]/hs/[КорневойURL]";
		Иначе
			ШаблонСтрокиПодключения = "[АдресСервераОсновнойПубликации]/[ОбластьДанных]/hs/[КорневойURL]";
		КонецЕсли;
	Иначе
		ШаблонСтрокиПодключения = "[АдресСервераОсновнойПубликации]/[АдресРесурсаОсновнойПубликации]/hs/[КорневойURL]";
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонСтрокиПодключения, ПараметрыПодключения);
	
КонецФункции

Функция КорневойURLСервисаОсновнойПубликации(ИспользуемаяАТС) Экспорт
	
	Если ИспользуемаяАТС = Перечисления.ДоступныеАТС.MangoOffice Тогда
		
		Возврат "telephony/mango";
		
	ИначеЕсли ИспользуемаяАТС = Перечисления.ДоступныеАТС.Яндекс Тогда
		
		Возврат "telephony/yandex";
		
	ИначеЕсли ТелефонияПереопределяемый.ЭтоПлатформаItoolabs(ИспользуемаяАТС) Тогда
		
		Возврат "telephony/itoolabs";
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОблачнаяТелефония

Функция ПолучитьПользователяОтветственногоЗаАбонента(АбонентОтКого) Экспорт
	
	Если Не ЗначениеЗаполнено(АбонентОтКого) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если АбонентОтКого.Метаданные().Реквизиты.Найти("Ответственный") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ответственный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АбонентОтКого, "Ответственный");
	Если ЗначениеЗаполнено(Ответственный) И ТипЗнч(Ответственный) = Тип("СправочникСсылка.Сотрудники") Тогда
		Ответственный = РегистрыСведений.СотрудникиПользователя.ПолучитьПользователяПоСотруднику(Ответственный);
	КонецЕсли;
	
	Возврат Ответственный;
	
КонецФункции

Функция ОбработатьВходящийЗвонок(НомерКонтакта, Пользователь, ДатаНачалаРазговора = Неопределено, ИдентификаторЗвонкаВАТС = Неопределено, СоздаватьСобытие = Истина, РегистрироватьВходящий = Истина, НомерОрганизации = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Абонент = ПолучитьАбонентаПоНомеруТелефона(НомерКонтакта);
	
	Если Пользователь = Неопределено Тогда
		// Звонок на группу
		ПользовательВнутреннийНомер = Неопределено;
		ПользовательИБ = Неопределено;
	ИначеЕсли ТипЗнч(Пользователь) = Тип("Строка") Тогда
		// Передан внутренний номер
		ПользовательВнутреннийНомер = Пользователь;
		ПользовательИБ = ПолучитьПользователяПоВнутреннемуНомеру(Пользователь);
	Иначе
		// Передан пользователь
		ПользовательВнутреннийНомер = ПолучитьВнутреннийНомерПоПользователю(Пользователь);
		ПользовательИБ = Пользователь;
	КонецЕсли;
	
	СотрудникОтветственный = ПолучитьСотрудникаПоПользователю(ПользовательИБ);
	
	Событие = НайтиСобытиеПоДаннымЗвонка(,, ИдентификаторЗвонкаВАТС);
	
	Если СоздаватьСобытие И НЕ ЗначениеЗаполнено(Событие) Тогда
		Событие = СоздатьСобытиеПоЗвонку(Абонент, НомерКонтакта, ПользовательИБ, СотрудникОтветственный, ПользовательВнутреннийНомер,
			Перечисления.ВходящееИсходящееСобытие.Входящее, ДатаНачалаРазговора, ИдентификаторЗвонкаВАТС, НомерОрганизации);
	КонецЕсли;
	
	// РегистрСведений.ТекущиеВходящиеЗвонки
	Если РегистрироватьВходящий Тогда
		ЗарегистрироватьТекущийВходящийЗвонок(НомерКонтакта, Абонент, ПользовательИБ, ДатаНачалаРазговора,
			Событие, Перечисления.ВходящееИсходящееСобытие.Входящее, ИдентификаторЗвонкаВАТС);
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
#Если НЕ ВнешнееСоединение Тогда
		ЖурналЗвонков = ИдентификаторОбсужденияЖурналЗвонков();
		Если ЖурналЗвонков <> Неопределено Тогда
			ДанныеЗвонка = СтрШаблон(
				"ТипЗвонка=""%1"";",
				"НовыйЗвонок");
			СообщениеЖурналЗвонков = СистемаВзаимодействия.СоздатьСообщение(ЖурналЗвонков);
			СообщениеЖурналЗвонков.Данные = ДанныеЗвонка;
			Если ПользовательИБ <> Неопределено Тогда
				СообщениеЖурналЗвонков.Получатели.Добавить(
					СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ПользовательИБ.ИдентификаторПользователяИБ)
				);
			КонецЕсли;
			СообщениеЖурналЗвонков.Записать();
		КонецЕсли;
#КонецЕсли
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Событие;
	
КонецФункции

Функция ОбработатьИзменениеЗвонка(ИдентификаторЗвонкаВАТС = Неопределено, ДатаНачалаРазговора, Пользователь = Неопределено, ВходящееИсходящее = Неопределено, НомерКонтакта = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Событие = НайтиСобытиеПоДаннымЗвонка(ВходящееИсходящее, НомерКонтакта, ИдентификаторЗвонкаВАТС);
	
	Если НЕ ЗначениеЗаполнено(Событие) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Пользователь <> Неопределено Тогда
		
		Если ТипЗнч(Пользователь) = Тип("Строка") Тогда
			// Передан внутренний номер
			ПользовательВнутреннийНомер = Пользователь;
			ПользовательИБ = ПолучитьПользователяПоВнутреннемуНомеру(Пользователь);
		Иначе
			// Передан пользователь
			ПользовательВнутреннийНомер = ПолучитьВнутреннийНомерПоПользователю(Пользователь);
			ПользовательИБ = Пользователь;
		КонецЕсли;
		
		СотрудникОтветственный = ПолучитьСотрудникаПоПользователю(ПользовательИБ);
		
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ДанныеЗвонков.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Событие = Событие;
	МенеджерЗаписи.ИдентификаторЗвонкаВАТС = ИдентификаторЗвонкаВАТС;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		
		МенеджерЗаписи.НачалоРазговора = ДатаНачалаРазговора;
		
		Если Пользователь <> Неопределено Тогда
			МенеджерЗаписи.Сотрудник = СотрудникОтветственный;
			Если МенеджерЗаписи.ВходящееИсходящее = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
				МенеджерЗаписи.НомерКому = ПользовательВнутреннийНомер;
			Иначе
				МенеджерЗаписи.НомерОтКого = ПользовательВнутреннийНомер;
			КонецЕсли;
		КонецЕсли;
		
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
#Если НЕ ВнешнееСоединение Тогда
		ЖурналЗвонков = ИдентификаторОбсужденияЖурналЗвонков();
		Если ЖурналЗвонков <> Неопределено Тогда
			ДанныеЗвонка = СтрШаблон(
				"ТипЗвонка=""%1"";",
				"НачалоРазговора");
			СообщениеЖурналЗвонков = СистемаВзаимодействия.СоздатьСообщение(ЖурналЗвонков);
			СообщениеЖурналЗвонков.Данные = ДанныеЗвонка;
			Если Пользователь <> Неопределено Тогда
				СообщениеЖурналЗвонков.Получатели.Добавить(
					СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ПользовательИБ.ИдентификаторПользователяИБ)
				);
			КонецЕсли;
			СообщениеЖурналЗвонков.Записать();
		КонецЕсли;
#КонецЕсли
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Событие;
	
КонецФункции

Функция ОбработатьИсходящийЗвонок(ДатаСобытия, Пользователь, Контрагент = Неопределено, НомерКонтакта = Неопределено, ИдентификаторЗвонкаВАТС = Неопределено, ДатаНачалаРазговора = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Контрагент = Неопределено Тогда
		Абонент = ПолучитьАбонентаПоНомеруТелефона(НомерКонтакта);
	Иначе
		Абонент = Контрагент;
	КонецЕсли;
	
	Если ТипЗнч(Пользователь) = Тип("Строка") Тогда
		// Передан внутренний номер
		ПользовательВнутреннийНомер = Пользователь;
		ПользовательИБ = ПолучитьПользователяПоВнутреннемуНомеру(Пользователь);
	Иначе
		// Передан пользователь
		ПользовательВнутреннийНомер = ПолучитьВнутреннийНомерПоПользователю(Пользователь);
		ПользовательИБ = Пользователь;
	КонецЕсли;
	
	СотрудникОтветственный = ПолучитьСотрудникаПоПользователю(ПользовательИБ);
	
	ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Исходящее;
	
	Событие = НайтиСобытиеПоДаннымЗвонка(ВходящееИсходящееСобытие, НомерКонтакта);
	
	Если НЕ ЗначениеЗаполнено(Событие) Тогда
		Событие = СоздатьСобытиеПоЗвонку(Абонент, НомерКонтакта, ПользовательИБ, СотрудникОтветственный, ПользовательВнутреннийНомер,
			Перечисления.ВходящееИсходящееСобытие.Исходящее, ДатаСобытия, ИдентификаторЗвонкаВАТС);
	КонецЕсли;
	
	ЗаписатьДанныеЗвонка(Событие, ИдентификаторЗвонкаВАТС, ДатаСобытия, ДатаНачалаРазговора, ВходящееИсходящееСобытие, Абонент, НомерКонтакта,
		ПользовательВнутреннийНомер, СотрудникОтветственный);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Событие;
	
КонецФункции

Функция ОбработатьЗавершениеЗвонка(ВходящееИсходящееСобытие = Неопределено, НомерКонтакта = Неопределено, ДатаНачалаВызова = Неопределено, ДатаЗавершенияВызова = Неопределено, ДлительностьРазговора = Неопределено,
		Неотвеченный = Неопределено, СсылкаНаЗаписьРазговора = Неопределено, ТрубетсяЗапроситьЗаписьРазговора = Ложь, ИдентификаторЗвонкаВАТС = Неопределено, ОпределятьНеотвеченный = Истина, Пользователь = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Событие = НайтиСобытиеПоДаннымЗвонка(ВходящееИсходящееСобытие, НомерКонтакта, ИдентификаторЗвонкаВАТС);
	
	Если НЕ ЗначениеЗаполнено(Событие) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ДанныеЗвонков.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Событие = Событие;
	МенеджерЗаписи.ИдентификаторЗвонкаВАТС = ИдентификаторЗвонкаВАТС;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		
		Если ЗначениеЗаполнено(ДлительностьРазговора) Тогда
			МенеджерЗаписи.ДлительностьРазговора = ДлительностьРазговора;
		ИначеЕсли ЗначениеЗаполнено(ДатаЗавершенияВызова) И ЗначениеЗаполнено(МенеджерЗаписи.НачалоРазговора) Тогда
			МенеджерЗаписи.ДлительностьРазговора = ДатаЗавершенияВызова - МенеджерЗаписи.НачалоРазговора;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СсылкаНаЗаписьРазговора) Тогда
			МенеджерЗаписи.СсылкаНаЗаписьРазговора = СсылкаНаЗаписьРазговора;
		КонецЕсли;
		МенеджерЗаписи.ТрубетсяЗапроситьЗаписьРазговора = ТрубетсяЗапроситьЗаписьРазговора;
		
		НеотвеченныйКэш = МенеджерЗаписи.Неотвеченный;
		
		Если ОпределятьНеотвеченный Тогда
			Если МенеджерЗаписи.ВходящееИсходящее = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
				Если Неотвеченный = Неопределено Тогда
					МенеджерЗаписи.Неотвеченный = МенеджерЗаписи.ДлительностьРазговора = 0;
				Иначе
					МенеджерЗаписи.Неотвеченный = Неотвеченный;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		МенеджерЗаписи.ВызовЗавершен = Истина;
		
		МенеджерЗаписи.Записать();
		
		Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		#Если НЕ ВнешнееСоединение Тогда
			Если Пользователь = Неопределено И ЗначениеЗаполнено(МенеджерЗаписи.Сотрудник) Тогда
				Пользователь = РегистрыСведений.СотрудникиПользователя.ПолучитьПользователяПоСотруднику(МенеджерЗаписи.Сотрудник);
			КонецЕсли;
			ПользовательИБ = Неопределено;
			Если Пользователь <> Неопределено Тогда
				Если ТипЗнч(Пользователь) = Тип("Строка") Тогда
					// Передан внутренний номер
					ПользовательИБ = ПолучитьПользователяПоВнутреннемуНомеру(Пользователь);
				Иначе
					// Передан пользователь
					ПользовательИБ = Пользователь;
				КонецЕсли;
			КонецЕсли;
			
			ЖурналЗвонков = ИдентификаторОбсужденияЖурналЗвонков();
			Если ЖурналЗвонков <> Неопределено Тогда
				ДанныеЗвонка = СтрШаблон(
					"ТипЗвонка=""%1"";",
					"КонецРазговора");
				СообщениеЖурналЗвонков = СистемаВзаимодействия.СоздатьСообщение(ЖурналЗвонков);
				СообщениеЖурналЗвонков.Данные = ДанныеЗвонка;
				СообщениеЖурналЗвонков.Записать();
				
				Если НЕ НеотвеченныйКэш И МенеджерЗаписи.Неотвеченный Тогда
					ПредставлениеСообщения = "" +
						МенеджерЗаписи.ДатаСобытия +
						?(ЗначениеЗаполнено(МенеджерЗаписи.Контрагент), " " + МенеджерЗаписи.Контрагент, "") +
						" (" + МенеджерЗаписи.НомерОтКого + ")";
						
					ДанныеЗвонка = СтрШаблон(
						"ТипЗвонка=""%1"";НавигационнаяСсылка=""%2"";Представление=""%3""",
						"Неотвеченный",
						ПолучитьНавигационнуюСсылку(Событие),
						ПредставлениеСообщения);
					
					СообщениеЖурналЗвонков = СистемаВзаимодействия.СоздатьСообщение(ЖурналЗвонков);
					СообщениеЖурналЗвонков.Данные = ДанныеЗвонка;
					Если ПользовательИБ <> Неопределено Тогда
						СообщениеЖурналЗвонков.Получатели.Добавить(
							СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ПользовательИБ.ИдентификаторПользователяИБ)
						);
					КонецЕсли;
					СообщениеЖурналЗвонков.Записать();
				КонецЕсли;
			КонецЕсли;
		#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Событие;
	
КонецФункции

Функция ПозвонитьПоНомеру(НомерКому, Контрагент, КонтактноеЛицо = Неопределено, Событие = Неопределено, Ошибка, СтрокаПояснения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательИБ = Пользователи.ТекущийПользователь();
	Сотрудник = ПолучитьСотрудникаПоПользователю(ПользовательИБ);
	ДанныеПользователяАТС = ДанныеПользователяАТС(ПользовательИБ);
	
	Если Константы.ИспользоватьМобильнуюТелефонию.Получить() Тогда
		
		МобильноеУстройство = ПерсональноеМобильноеУстройство();
		Если НЕ ЗначениеЗаполнено(МобильноеУстройство) Тогда
			ВызватьИсключение НСтр("ru='Не выбрано мобильное устройство в персональных настройках.'");
		КонецЕсли;
		
		ВнутреннийНомер = Неопределено;
		Если ДанныеПользователяАТС <> Неопределено Тогда
			ВнутреннийНомер = ДанныеПользователяАТС.ВнутреннийНомер;
		КонецЕсли;
		
		Если Событие <> Неопределено Тогда
			ЗаписатьДанныеЗвонка(Событие,, ТекущаяДатаСеанса(),, Перечисления.ВходящееИсходящееСобытие.Исходящее, Контрагент, НомерКому, ВнутреннийНомер, Сотрудник);
		КонецЕсли;
		
		ОбменМобильноеПриложениеОбщее.ПозвонитьКонтрагенту(НомерКому, МобильноеУстройство);
		
		СтрокаПояснения = СтрШаблон(
			НСтр("ru='Вызов: %1,
			|с устройства: %2'"),
			НомерКому,
			МобильноеУстройство
		);
		
	ИначеЕсли Константы.ИспользоватьОблачнуюТелефонию.Получить() Тогда
		
		Если ДанныеПользователяАТС = Неопределено Тогда
			Ошибка = "НеЗаполненыНастройкиПользователя";
			Возврат Неопределено;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеПользователяАТС.ВнутреннийНомер) Тогда
			Ошибка = "НеЗаполненВнутреннийНомерПользователя";
			Возврат Неопределено;
		КонецЕсли;
		
		URL = КорневойАдресАТС();
		Если URL = Неопределено Тогда
			Ошибка = "НеЗаполненАдресАТС";
			Возврат Неопределено;
		КонецЕсли;
		
		HTTPЗапрос = Новый HTTPЗапрос();
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
		
		ТелоЗапроса = Новый Массив;
		ТелефонияПереопределяемый.ПриСозданииИсходящегоВызова(НомерКому, ДанныеПользователяАТС, URL, ТелоЗапроса, HTTPЗапрос.Заголовки, Ошибка);
		
		Если ЗначениеЗаполнено(Ошибка) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
		HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;
		
		Если Событие <> Неопределено Тогда
			ЗаписатьДанныеЗвонка(Событие,, ТекущаяДатаСеанса(),, Перечисления.ВходящееИсходящееСобытие.Исходящее, Контрагент, НомерКому, ДанныеПользователяАТС.ВнутреннийНомер, Сотрудник);
		КонецЕсли;
		
		Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(СтруктураURI.Схема);
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт,,, Прокси, 20, Новый ЗащищенноеСоединениеOpenSSL);
		HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
		
		ИмяСобытияДляЖурналаРегистрации = "ИнициализацияИсходящегоВызова";
		
		ТелефонияПереопределяемый.ЗаписатьЗапросВЖурналРегистрации(
			ИмяСобытияДляЖурналаРегистрации,
			ПредставлениеСоответствияСтрокой(HTTPЗапрос.Заголовки) + Символы.ПС + ТелоЗапроса);
		
		ТелефонияПереопределяемый.ПриОбработкеОтветаНаСозданиеИсходящегоВызова(HTTPОтвет, ИмяСобытияДляЖурналаРегистрации);
		
		СтрокаПояснения = СтрШаблон(НСтр("ru='Вызов: %1'"), НомерКому);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

Функция ПолучитьДанныеКлиента(НомерКонтакта) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Абонент = ПолучитьАбонентаПоНомеруТелефона(НомерКонтакта);
	
	Если НЕ ЗначениеЗаполнено(Абонент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ответственный = ПолучитьПользователяОтветственногоЗаАбонента(Абонент);
	ВнутреннийНомерОтветственного = Неопределено;
	Если ЗначениеЗаполнено(Ответственный) Тогда
		ВнутреннийНомерОтветственного = ПолучитьВнутреннийНомерПоПользователю(Ответственный);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Представление", Строка(Абонент));
	Если ЗначениеЗаполнено(ВнутреннийНомерОтветственного) Тогда
		Результат.Вставить("ВнутреннийНомерОтветственного", ВнутреннийНомерОтветственного);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область МобильнаяТелефония

Функция ОбработатьЗвонок(знач НомерКонтакта, знач Пользователь, знач ДатаЗвонка, знач ТипЗвонка, знач ВариантСобытия) Экспорт
	
	НужноОбработатьЗвонок = (ПолучитьФункциональнуюОпцию("ИспользоватьМобильнуюТелефонию") И ОбрабатыватьЗвонокСНомера(НомерКонтакта))
		ИЛИ ОбщегоНазначения.ЭтоМобильныйКлиент();
	
	Если НЕ НужноОбработатьЗвонок Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВариантСобытия = "НачалоСигналаВходящего" ИЛИ ВариантСобытия = "НачалоВходящего" ИЛИ ВариантСобытия = "ЗавершениеВходящего" Тогда
		ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее;
	ИначеЕсли ВариантСобытия = "НачалоИсходящего" ИЛИ ВариантСобытия = "ЗавершениеИсходящего" Тогда
		ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Исходящее;
	КонецЕсли;
	
	Если ТипЗвонка = "Входящий" ИЛИ ТипЗвонка = "Исходящий" Тогда
		
		Абонент = Неопределено;
		
		Если Не ПустаяСтрока(НомерКонтакта) Тогда
			Абонент = ПолучитьАбонентаПоНомеруТелефона(НомерКонтакта);
		КонецЕсли;
		
		Если ВариантСобытия = "НачалоСигналаВходящего" Тогда
			
			Событие = ОбработатьВходящийЗвонок(НомерКонтакта, Пользователь, ДатаЗвонка);
			
		ИначеЕсли ВариантСобытия = "НачалоВходящего" Тогда
			
			Событие = ОбработатьИзменениеЗвонка(, ДатаЗвонка, Пользователь, ВходящееИсходящееСобытие, НомерКонтакта);
			
		ИначеЕсли ВариантСобытия = "НачалоИсходящего" Тогда
			
			Событие = ОбработатьИсходящийЗвонок(ДатаЗвонка, Пользователь,, НомерКонтакта,, ДатаЗвонка);
			
		ИначеЕсли ВариантСобытия = "ЗавершениеВходящего" ИЛИ ВариантСобытия = "ЗавершениеИсходящего" Тогда
			
			Событие = ОбработатьЗавершениеЗвонка(ВходящееИсходящееСобытие, НомерКонтакта, Неопределено, ДатаЗвонка);
			
		Иначе
			
			ВызватьИсключение СтрШаблон(НСтр("ru='Не реализована обработка варианта события: ""%1""'"), ВариантСобытия);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗвонка = "Пропущенный" Тогда
		
		Если ВариантСобытия = "ЗавершениеВходящего" Тогда
			
			Событие = ОбработатьЗавершениеЗвонка(ВходящееИсходящееСобытие, НомерКонтакта, Неопределено, ДатаЗвонка,, Истина);
			
		Иначе
			
			ВызватьИсключение СтрШаблон(НСтр("ru='Не реализована обработка варианта события: ""%1""'"), ВариантСобытия);
			
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru='Не реализована обработка типа звонка: ""%1""'"), ТипЗвонка);
		
	КонецЕсли;
	
	Возврат Событие;
	
КонецФункции

Функция НайтиСобытиеПоДаннымЗвонка(ВходящееИсходящее, Знач Номер = Неопределено, ИдентификаторЗвонкаВАТС = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеЗвонков.Событие КАК Событие
	|ИЗ
	|	РегистрСведений.ДанныеЗвонков КАК ДанныеЗвонков
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ЭтоЗвонокОблачнойАТС
	|				ТОГДА ДанныеЗвонков.ИдентификаторЗвонкаВАТС = &ИдентификаторЗвонкаВАТС
	|			ИНАЧЕ НЕ ДанныеЗвонков.ВызовЗавершен
	|					И ДанныеЗвонков.ВходящееИсходящее = &ВходящееИсходящее
	|					И ВЫБОР
	|						КОГДА &ВходящееИсходящее = ЗНАЧЕНИЕ(Перечисление.ВходящееИсходящееСобытие.Входящее)
	|							ТОГДА ДанныеЗвонков.НомерОтКого ПОДОБНО &ПоисковоеВыражение
	|						ИНАЧЕ ДанныеЗвонков.НомерКому ПОДОБНО &ПоисковоеВыражение
	|					КОНЕЦ
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеЗвонков.ДатаСобытия УБЫВ";
	
	ПоисковоеВыражение = СтрЗаменить(Номер, "+", "") + "%";
	Если СтрНачинаетсяС(ПоисковоеВыражение, "7") Или СтрНачинаетсяС(ПоисковоеВыражение, "8") Тогда
		ПоисковоеВыражение = "[78]" + Сред(ПоисковоеВыражение, 2);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЭтоЗвонокОблачнойАТС", ИдентификаторЗвонкаВАТС <> Неопределено);
	Запрос.УстановитьПараметр("ИдентификаторЗвонкаВАТС", ИдентификаторЗвонкаВАТС);
	Запрос.УстановитьПараметр("ВходящееИсходящее", ВходящееИсходящее);
	Запрос.УстановитьПараметр("ПоисковоеВыражение", ПоисковоеВыражение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Событие;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс

Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	ИспользуетсяТелефония = ИспользуетсяТелефония();
	
	Параметры.Вставить("ИспользуетсяТелефония", ИспользуетсяТелефония);
	
	Если НЕ ИспользуетсяТелефония Тогда
		Возврат;
	КонецЕсли;
	
	ЖурналЗвонков = КлючОбсужденияЖурналЗвонков();
	
	Если ЖурналЗвонков <> Неопределено Тогда
		Параметры.Вставить("СлужебныйЖурналЗвонков", ЖурналЗвонков);
		УстановитьПривилегированныйРежим(Истина);
		Если НЕ Константы.ТелефонияЖурналЗвонковОбновлен.Получить() Тогда
			Параметры.Вставить("ОбновитьЖурналЗвонков", Истина);
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
#Если НЕ ВнешнееСоединение Тогда
	СистемнаяИнформация = Новый СистемнаяИнформация();
	Если (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ДобавлениеИзменениеКонтрагентов"))
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.11.0") > 0
		И НЕ СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована()
		И НЕ УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ПредложениеИспользованияСистемыВзаимодействияДляТелефонииПоказано") Тогда
		
		Если ПравоДоступа("РегистрацияИнформационнойБазыСистемыВзаимодействия", Метаданные) Тогда
			Параметры.Вставить("ПредложитьРегистрациюСистемыВзаимодействия", Истина);
		Иначе
			Параметры.Вставить("ПредложитьИспользованиеСистемыВзаимодействия", Истина);
		КонецЕсли;
	КонецЕсли;
#КонецЕсли
	
КонецПроцедуры

Функция ИспользуетсяТелефония() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьОблачнуюТелефонию") ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьМобильнуюТелефонию");
	
КонецФункции

Процедура МаршрутизироватьВызовМанго(call_id, ВнутреннийНомер) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("command_id");
	ЗаписьJSON.ЗаписатьЗначение(Строка(Новый УникальныйИдентификатор));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("call_id");
	ЗаписьJSON.ЗаписатьЗначение(call_id);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("to_number");
	ЗаписьJSON.ЗаписатьЗначение(ВнутреннийНомер);
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	json = ЗаписьJSON.Закрыть();
	
	НастройкиТелефонии = ПолучитьНастройкиТелефонии();
	sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
	
	ПараметрыТела = Новый Массив;
	ПараметрыТела.Добавить("vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key);
	ПараметрыТела.Добавить("sign=" + sign);
	ПараметрыТела.Добавить(КодироватьСтроку("json=" + json, СпособКодированияСтроки.URLВКодировкеURL));
	
	URL = КорневойАдресАТС() + "commands/route";
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрСоединить(ПараметрыТела, "&"),
		КодировкаТекста.UTF8,
		ИспользованиеByteOrderMark.НеИспользовать
	);
	
	Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(СтруктураURI.Схема);
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт,,, Прокси, 20, Новый ЗащищенноеСоединениеOpenSSL);
	HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	
	ЗаписьЖурналаРегистрации(
		ТелефонияПереопределяемый.СобытиеЖурналаРегистрации() + "./commands/route",
		УровеньЖурналаРегистрации.Примечание,
		,
		,
		json + Символы.ПС + НСтр("ru='Код состояния HTTP ответа: '") + HTTPОтвет.КодСостояния
	);
	
КонецПроцедуры

// Процедура обработчик подписки "ОчиститьВходящиеЗвонки". Очищает вспомогательные данные по удаляемому абоненту.
//
Процедура ОчиститьВходящиеЗвонкиПередУдалением(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТекущиеВходящиеЗвонки.ПользовательКому КАК ПользовательКому
		|ИЗ
		|	РегистрСведений.ТекущиеВходящиеЗвонки КАК ТекущиеВходящиеЗвонки
		|ГДЕ
		|	ТекущиеВходящиеЗвонки.АбонентОтКого = &УдаляемыйАбонент";
	
	Запрос.УстановитьПараметр("УдаляемыйАбонент", Источник.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ТекущиеВходящиеЗвонки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПользовательКому.Установить(Выборка.ПользовательКому);
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьИзменитьСлужебногоПользователяТелефонии(Включить = Ложь) Экспорт
	
	Логин = СлужебныйПользовательТелефонииЛогин();
	Пароль = СлужебныйПользовательТелефонииПароль();
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИзСправочника = Пользователи.НайтиПоИмени(Логин);
	УстановитьПривилегированныйРежим(Ложь);
	
	Попытка
		Если ПользовательИзСправочника = Неопределено Тогда
			
			ИмяСобытия = "Телефония.СозданиеСлужебногоПользователя";
			
			ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
			ОписаниеПользователяИБ.Имя = Логин;
			ОписаниеПользователяИБ.ПолноеИмя = НСтр("ru='Служебный пользователь телефонии'");
			ОписаниеПользователяИБ.АутентификацияСтандартная = Включить;
			ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
			ОписаниеПользователяИБ.Вставить("Действие", "Записать");
			ОписаниеПользователяИБ.Вставить("ВходВПрограммуРазрешен", Истина);
			ОписаниеПользователяИБ.ЗапрещеноИзменятьПароль = Истина;
			ОписаниеПользователяИБ.Пароль = Пароль;
			ОписаниеПользователяИБ.Роли = Новый Массив;
			ОписаниеПользователяИБ.Роли.Добавить(Метаданные.Роли.ИспользованиеМетодовПровайдераТелефонии.Имя);
			
			НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
			НовыйПользователь.Наименование = ОписаниеПользователяИБ.ПолноеИмя;
			НовыйПользователь.Служебный = Истина;
			НовыйПользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
			НовыйПользователь.Записать();
			
		Иначе
			
			ИмяСобытия = "Телефония.ИзменениеДоступаСлужебногоПользователя";
			ИзменитьДоступВБазу(Включить, Пароль, ПользовательИзСправочника);
			
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.Пользователи, ПользовательИзСправочника);
		Возврат Истина;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КлючСлужебногоОбсужденияСистемыВзаимодействия()
	
	Возврат "ТелефонияЖурналЗвонков";
	
КонецФункции

Функция СлужебныйПользовательТелефонииЛогин() Экспорт
	Возврат "TelephonyService";
КонецФункции

Функция СлужебныйПользовательТелефонииПароль() Экспорт
	Возврат "ae71f215-2d74-4528-be4f-f29923b8f3dd";
КонецФункции

Функция СлужебныйПользовательТелефонииАвторизацияВСтрокеПодключения() Экспорт
	Возврат СтрШаблон("Usr=%1;Pwd=&quot;%2&quot;;", СлужебныйПользовательТелефонииЛогин(), СлужебныйПользовательТелефонииПароль());
КонецФункции

Функция ВосстановлениеJSON(Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	Если Свойство = "timestamp" Тогда
		Возврат МестноеВремя(Дата(1970,01,01) + Число(Значение), ЧасовойПоясСеанса());
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьSign(vpbx_api_key, json, vpbx_api_salt) Экспорт
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанных.Добавить(vpbx_api_key + json + vpbx_api_salt);
	
	Возврат НРег(СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", ""));
	
КонецФункции

Функция ПолучитьИдентификаторЗаписиРазговора(Событие) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеЗвонков.СсылкаНаЗаписьРазговора КАК СсылкаНаЗаписьРазговора
		|ИЗ
		|	РегистрСведений.ДанныеЗвонков КАК ДанныеЗвонков
		|ГДЕ
		|	ДанныеЗвонков.Событие = &Событие";
	
	Запрос.УстановитьПараметр("Событие", Событие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СсылкаНаЗаписьРазговора;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Поиск контакта (Контрагент/КонтактноеЛицо/Лид) по номеру телефона.
// Сперва выполнается поиск среди Контрагентов/Контактов. Если не найдено — среди лидов.
//
// Параметры:
//  НомерТелефонаАбонента - Строка - Номер телефона контакта.
//  ИскатьВКонтрагентах   - Булево - Указывает, искать ли среди справочника Контрагенты.
//  ИскатьВКонтактах      - Булево - Указывает, искать ли среди справочника КонтактныеЛица.
//  ИскатьВЛидах          - Булево - Указывает, искать ли среди справочника Лиди
//                                   (Внимание! Поиск выполняется если контакт не найден среди Контрагентов и Контактных лиц).
// 
// Возвращаемое значение:
//   - Неопределено, СправочникСсылка.Контрагенты, СправочникСсылка.КонтактныеЛица, СправочникСсылка.Лиды.
//
Функция ПолучитьАбонентаПоНомеруТелефона(знач НомерТелефонаАбонента, ИскатьВКонтрагентах = Истина, ИскатьВКонтактах = Истина, ИскатьВЛидах = Истина) Экспорт
	
	Если НЕ ИскатьВКонтрагентах И НЕ ИскатьВКонтактах И НЕ ИскатьВЛидах Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПоисковоеВыражение = СтрЗаменить(НомерТелефонаАбонента, "+", "") + "%";
	Если СтрНачинаетсяС(ПоисковоеВыражение, "7") Или СтрНачинаетсяС(ПоисковоеВыражение, "8") Тогда
		ПоисковоеВыражение = "[78]" + Сред(ПоисковоеВыражение, 2);
	КонецЕсли;
	
	ТипыАбонентов = Новый Массив;
	
	Если ИскатьВКонтрагентах Тогда
		ТипыАбонентов.Добавить(Метаданные.Справочники.Контрагенты);
	КонецЕсли;
	
	Если ИскатьВКонтактах Тогда
		ТипыАбонентов.Добавить(Метаданные.Справочники.КонтактныеЛица);
	КонецЕсли;
	
	Если ТипыАбонентов.Количество() <> 0 Тогда
		Контакт = АбонентПоНомеруТелефона(ПоисковоеВыражение, ТипыАбонентов);
		Если Контакт <> Неопределено Тогда
			Возврат Контакт;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ИскатьВЛидах Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипыАбонентов.Очистить();
	ТипыАбонентов.Добавить(Метаданные.Справочники.Лиды);
	
	Возврат АбонентПоНомеруТелефона(ПоисковоеВыражение, ТипыАбонентов);
	
КонецФункции

Функция АбонентПоНомеруТелефона(ПоисковоеВыражение, ТипыАбонентов)
	
	СекцияОбъединить = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|";
	БазаЗапроса = "
		|ВЫБРАТЬ
		|	КонтактнаяИнформация_1.Ссылка
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация_1
		|ГДЕ
		|	КонтактнаяИнформация_1.НомерТелефона ПОДОБНО &ПоисковоеВыражение
		|	И КонтактнаяИнформация_1.Тип = &ТипТелефон";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПоисковоеВыражение", ПоисковоеВыражение);
	Запрос.УстановитьПараметр("ТипТелефон", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.Текст = "";
	НомерОбъединения = 0;
	
	Для Каждого ТипАбонента Из ТипыАбонентов Цикл
		
		НомерОбъединения = НомерОбъединения + 1;
		ЧастьОбъединения = СтрЗаменить(БазаЗапроса, "Справочник.Контрагенты", ТипАбонента.ПолноеИмя());
		ЧастьОбъединения = СтрЗаменить(ЧастьОбъединения, "КонтактнаяИнформация_1", "КонтактнаяИнформация_" + НомерОбъединения);
		
		Запрос.Текст = Запрос.Текст + ?(ПустаяСтрока(Запрос.Текст), "", СекцияОбъединить) + ЧастьОбъединения;
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗарегистрироватьТекущийВходящийЗвонок(НомерТелефонаАбонента, АбонентОтКого, ПользовательКому, ДатаЗвонка, Событие, ВходящийИсходящий, ИдентификаторЗвонкаВАТС = Неопределено)
	
	Набор = РегистрыСведений.ТекущиеВходящиеЗвонки.СоздатьНаборЗаписей();
	Набор.Отбор.ПользовательКому.Установить(ПользовательКому);
	
	ЗаписьНабора = Набор.Добавить();
	ЗаписьНабора.ПользовательКому        = ПользовательКому;
	ЗаписьНабора.НомерТелефонаАбонента   = НомерТелефонаАбонента;
	ЗаписьНабора.АбонентОтКого           = АбонентОтКого;
	ЗаписьНабора.ДатаЗвонка              = ДатаЗвонка;
	ЗаписьНабора.Событие                 = Событие;
	ЗаписьНабора.ВходящееИсходящее       = ВходящийИсходящий;
	ЗаписьНабора.ИдентификаторЗвонкаВАТС = ИдентификаторЗвонкаВАТС;
	
	Набор.Записать(Истина);
	
КонецПроцедуры

Функция НастройкиТелефонииПоУмолчанию()
	
	Результат = Новый Структура();
	
	Результат.Вставить("МаршрутизироватьВходящиеНаОтветственных", Ложь);
	
	Результат.Вставить("ДействиеТекущегоЗвонкаНайденногоАбонента", "ОткрытьКарточкуАбонента");
	Результат.Вставить("ДействиеТекущегоЗвонкаНеизвестногоАбонента", "ЗадаватьВопрос");
	Результат.Вставить("ДействиеИсходящегоЗвонка", "НичегоНеДелать");
	
	// MangoOffice
	Результат.Вставить("vpbx_api_key", "");
	Результат.Вставить("vpbx_api_salt", "");
	
	// Itoolabs
	Результат.Вставить("АдресОблачнойАТС", "");
	Результат.Вставить("КлючДляАвторизацииВОблачнойАТС", "");
	Результат.Вставить("КлючДляАвторизацииВУНФ", Строка(Новый УникальныйИдентификатор));
	
	// Яндекс
	Результат.Вставить("КлючДляАвторизацииАТСЯндекс", "");
	
	Возврат Результат;
	
КонецФункции

Функция ОбрабатыватьЗвонокСНомера(НомерТелефонаАбонента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НеобрабатываемыеТелефонныеНомера.НомерТелефонаАбонента
		|ИЗ
		|	РегистрСведений.НеобрабатываемыеТелефонныеНомера КАК НеобрабатываемыеТелефонныеНомера
		|ГДЕ
		|	НеобрабатываемыеТелефонныеНомера.НомерТелефонаАбонента = &НомерТелефонаАбонента";
	
	Запрос.УстановитьПараметр("НомерТелефонаАбонента", НомерТелефонаАбонента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

Функция ПолучитьПользователяПоВнутреннемуНомеру(ВнутреннийНомер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПользователейТелефонии.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.НастройкиПользователейТелефонии КАК НастройкиПользователейТелефонии
		|ГДЕ
		|	НастройкиПользователейТелефонии.ВнутреннийНомер = &ВнутреннийНомер";
	
	Запрос.УстановитьПараметр("ВнутреннийНомер", ВнутреннийНомер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Пользователь;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ДанныеПользователяАТС(Знач ПользовательУНФ = Неопределено)
	
	Если ПользовательУНФ = Неопределено Тогда
		ПользовательУНФ = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиПользователейТелефонии.ВнутреннийНомер КАК ВнутреннийНомер,
	|	НастройкиПользователейТелефонии.ИсходящийНомер КАК ИсходящийНомер
	|ИЗ
	|	РегистрСведений.НастройкиПользователейТелефонии КАК НастройкиПользователейТелефонии
	|ГДЕ
	|	НастройкиПользователейТелефонии.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", ПользовательУНФ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура("ВнутреннийНомер,ИсходящийНомер");
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьВнутреннийНомерПоПользователю(Пользователь = Неопределено) Экспорт
	
	//Если Пользователь = Неопределено Тогда
	//	Пользователь = Пользователи.ТекущийПользователь();
	//КонецЕсли;
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	НастройкиПользователейТелефонии.ВнутреннийНомер КАК ВнутреннийНомер
	//	|ИЗ
	//	|	РегистрСведений.НастройкиПользователейТелефонии КАК НастройкиПользователейТелефонии
	//	|ГДЕ
	//	|	НастройкиПользователейТелефонии.Пользователь = &Пользователь";
	//
	//Запрос.УстановитьПараметр("Пользователь", Пользователь);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Если Выборка.Следующий() Тогда
	//	Возврат Выборка.ВнутреннийНомер;
	//КонецЕсли;
	//
	//Возврат Неопределено;
	
	ДанныеПользователяАТС = ДанныеПользователяАТС(Пользователь);
	
	Если ДанныеПользователяАТС = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеПользователяАТС.ВнутреннийНомер;
	
КонецФункции

Функция ПолучитьСотрудникаПоПользователю(Пользователь)
	
	СотрудникиПользователя = УправлениеНебольшойФирмойСервер.ПолучитьСотрудниковПользователя(Пользователь);
	Возврат ?(СотрудникиПользователя.Количество() > 0, СотрудникиПользователя[0], Справочники.Сотрудники.ПустаяСсылка());
	
КонецФункции

Процедура ИзменитьДоступВБазу(Включить, Знач Пароль, Знач ПользовательИзСправочника)
	
	ОбновляемыеСвойства = Новый Структура;
	ОбновляемыеСвойства.Вставить("СтарыйПароль", Пароль);
	ОбновляемыеСвойства.Вставить("АутентификацияСтандартная", Включить);
	
	ОписаниеОшибки = "";
	ПользовательИБ = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательЗаписан = Пользователи.ЗаписатьПользователяИБ(
	//Пользователи.УстановитьСвойстваПользователяИБ(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПользовательИзСправочника, "ИдентификаторПользователяИБ"),
		ОбновляемыеСвойства,
		Ложь,
		ОписаниеОшибки,
		ПользовательИзСправочника
	);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ПользовательЗаписан Тогда
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДанныеЗвонка(Событие, ИдентификаторЗвонкаВАТС, ДатаСобытия, НачалоРазговора = Неопределено, ВходящийИсходящий, Контрагент, НомерКому, НомерОтКого, СотрудникОтветственный, НомерОрганизации = Неопределено)
	
	НаборЗаписей = РегистрыСведений.ДанныеЗвонков.СоздатьНаборЗаписей(); 
	НаборЗаписей.Отбор.Событие.Значение = Событие;
	НаборЗаписей.Отбор.Событие.Использование = Истина;
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Запись = НаборЗаписей[0];
	Иначе
		Запись = НаборЗаписей.Добавить();
	КонецЕсли;
	
	Запись.Событие = Событие;
	Запись.ИдентификаторЗвонкаВАТС = ИдентификаторЗвонкаВАТС;
	Запись.ДатаСобытия = ДатаСобытия;
	Если НачалоРазговора <> Неопределено Тогда
		Запись.НачалоРазговора   = НачалоРазговора;
	КонецЕсли;
	Запись.ВходящееИсходящее = ВходящийИсходящий;
	Запись.Контрагент        = Контрагент;
	Запись.НомерКому         = НомерКому;
	Запись.НомерОтКого       = НомерОтКого;
	Запись.Сотрудник         = СотрудникОтветственный;
	Если НомерОрганизации <> Неопределено Тогда
		Запись.НомерОрганизации = НомерОрганизации;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	НаборЗаписей.Записать(Истина);
	
	Если ЗначениеЗаполнено(ИдентификаторЗвонкаВАТС) Тогда
		МенеджерЗаписи = РегистрыСведений.ДанныеЗвонков.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ИдентификаторЗвонкаВАТС = ИдентификаторЗвонкаВАТС;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция СоздатьСобытиеПоЗвонку(Абонент, НомерТелефонаАбонента, Пользователь, Сотрудник, ВнутреннийНомерПользователя,
		ВходящийИсходящий, ДатаНачалаРазговора, ИдентификаторЗвонкаВАТС = Неопределено, НомерОрганизации = Неопределено)
	
	Событие = Неопределено;
	Если ИдентификаторЗвонкаВАТС <> Неопределено Тогда
		Событие = НайтиСобытиеПоДаннымЗвонка(,, ИдентификаторЗвонкаВАТС);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Событие) Тогда
		Возврат Событие;
	КонецЕсли;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	СобытиеОбъект = Документы.Событие.СоздатьДокумент();
	
	ОсновнойКонтакт = Неопределено;
	ДанныеЗаполнения = Неопределено;
	
	Если ЗначениеЗаполнено(Абонент) И ТипЗнч(Абонент) = Тип("СправочникСсылка.Лиды") Тогда
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ТипСобытия", Перечисления.ТипыСобытий.ТелефонныйЗвонок);
		ДанныеЗаполнения.Вставить("Лид", Абонент);
		
		ОсновнойКонтакт = Абонент;
		
	КонецЕсли;
	
	СобытиеОбъект.ДополнительныеСвойства.Вставить("НомерОрганизации", НомерОрганизации);
	СобытиеОбъект.Заполнить(ДанныеЗаполнения);
	
	СобытиеОбъект.Дата = ТекущаяДатаСеанса();
	СобытиеОбъект.УстановитьНовыйНомер();
	
	СобытиеОбъект.НачалоСобытия = ДатаНачалаРазговора;
	СобытиеОбъект.ОкончаниеСобытия = ДатаНачалаРазговора;
	СобытиеОбъект.ТипСобытия = Перечисления.ТипыСобытий.ТелефонныйЗвонок;
	СобытиеОбъект.Состояние = Справочники.СостоянияСобытий.Завершено;
	СобытиеОбъект.ВходящееИсходящееСобытие = ВходящийИсходящий;
	
	СобытиеОбъект.Ответственный = Сотрудник;
	СобытиеОбъект.Автор = Пользователи.ТекущийПользователь();
	
	Если НЕ ЗначениеЗаполнено(Абонент) Тогда
		
		Участник = СобытиеОбъект.Участники.Добавить();
		Участник.Контакт = "";
		Участник.КакСвязаться = НомерТелефонаАбонента;
		
		СобытиеОбъект.Участники.Вставить(0);
		
	ИначеЕсли ТипЗнч(Абонент) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		ОсновнойКонтакт = Абонент;
		
		Участник = СобытиеОбъект.Участники.Добавить();
		Участник.Контакт = Абонент;
		Участник.КакСвязаться = Документы.Событие.ПолучитьКакСвязаться(Абонент, Перечисления.ТипыКонтактнойИнформации.Телефон);
		
	ИначеЕсли ТипЗнч(Абонент) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		Участник = СобытиеОбъект.Участники.Добавить();
		Участник.Контакт = Абонент;
		Участник.КакСвязаться = Документы.Событие.ПолучитьКакСвязаться(Абонент, Перечисления.ТипыКонтактнойИнформации.Телефон);
		
		СвязанныеКонтрагенты = Справочники.КонтактныеЛица.СвязанныеКонтрагенты(Абонент);
		Если СвязанныеКонтрагенты.Количество() = 1 Тогда
			ОсновнойКонтакт = СвязанныеКонтрагенты[0];
		Иначе
			ОсновнойКонтакт = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		
		Если ОсновнойКонтакт <> Неопределено Тогда
			Участник = СобытиеОбъект.Участники.Вставить(0);
			Участник.Контакт = ОсновнойКонтакт;
			Участник.КакСвязаться = Документы.Событие.ПолучитьКакСвязаться(ОсновнойКонтакт, Перечисления.ТипыКонтактнойИнформации.Телефон);
		Иначе
			Участник = СобытиеОбъект.Участники.Вставить(0);
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		
		СобытиеОбъект.Записать();
		Событие = СобытиеОбъект.Ссылка;
		
		// РегистрСведений.ДанныеЗвонков
		Если ЗначениеЗаполнено(ДатаНачалаРазговора) Тогда
			ДатаСобытия = ДатаНачалаРазговора;
		Иначе
			ДатаСобытия = Событие.Дата;
		КонецЕсли;
		Если ВходящийИсходящий = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
			НомерКому   = ВнутреннийНомерПользователя;
			НомерОтКого = НомерТелефонаАбонента;
		Иначе
			НомерКому   = НомерТелефонаАбонента;
			НомерОтКого = ВнутреннийНомерПользователя;
		КонецЕсли;
		ЗаписатьДанныеЗвонка(Событие, ИдентификаторЗвонкаВАТС, ДатаСобытия,, ВходящийИсходящий, ОсновнойКонтакт, НомерКому, НомерОтКого, Сотрудник, НомерОрганизации);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Событие;
	
КонецФункции

Функция ПолучитьВходящийЗвонокПользователя(Пользователь = Неопределено) Экспорт
	
	Результат = Новый Структура("АбонентОтКого, ДатаЗвонка, НомерТелефонаАбонента, ПредставлениеАбонента");
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТекущиеВходящиеЗвонки.ИдентификаторЗвонка КАК ИдентификаторЗвонка,
		|	ТекущиеВходящиеЗвонки.АбонентОтКого КАК АбонентОтКого,
		|	ТекущиеВходящиеЗвонки.ДатаЗвонка КАК ДатаЗвонка,
		|	ТекущиеВходящиеЗвонки.НомерТелефонаАбонента КАК НомерТелефонаАбонента,
		|	ПРЕДСТАВЛЕНИЕ(ТекущиеВходящиеЗвонки.АбонентОтКого) КАК ПредставлениеАбонента
		|ИЗ
		|	РегистрСведений.ТекущиеВходящиеЗвонки КАК ТекущиеВходящиеЗвонки
		|ГДЕ
		|	ТекущиеВходящиеЗвонки.ПользовательКому = &ПользовательКому
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаЗвонка УБЫВ";
	
	Запрос.УстановитьПараметр("ПользовательКому", Пользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ТекущиеВходящиеЗвонки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПользовательКому.Установить(Пользователь);
	НаборЗаписей.Записать(Истина);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеВходящегоЗвонка(ОчиститьДанные = Неопределено) Экспорт
	
	Если ОчиститьДанные = Неопределено Тогда
		ОчиститьДанные = Истина;
	КонецЕсли;
	
	Результат = ТелефонияСервер.ПолучитьНастройкиТелефонии();
	ДанныеЗвонка = Новый Структура("ПользовательКому,АбонентОтКого,ДатаЗвонка,НомерТелефонаАбонента,Событие,ПредставлениеАбонента,ВходящееИсходящее,ИдентификаторЗвонкаВАТС");
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Выборка = РегистрыСведений.ТекущиеВходящиеЗвонки.Выбрать(Новый Структура("ПользовательКому", ТекущийПользователь));
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеЗвонка, Выборка);
		
		Если ОчиститьДанные Тогда
			Если ЗначениеЗаполнено(ДанныеЗвонка.АбонентОтКого)
				Или Результат.ДействиеТекущегоЗвонкаНеизвестногоАбонента <> "ЗадаватьВопрос" Тогда
				
				МенеджерЗаписи = РегистрыСведений.ТекущиеВходящиеЗвонки.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ПользовательКому = ТекущийПользователь;
				МенеджерЗаписи.Удалить();
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ТекущиеВходящиеЗвонки.ПользовательКому КАК ПользовательКому
				|ИЗ
				|	РегистрСведений.ТекущиеВходящиеЗвонки КАК ТекущиеВходящиеЗвонки
				|ГДЕ
				|	ТекущиеВходящиеЗвонки.Событие = &Событие";
				Запрос.УстановитьПараметр("Событие", ДанныеЗвонка.Событие);
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					МенеджерЗаписи = РегистрыСведений.ТекущиеВходящиеЗвонки.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.ПользовательКому = Выборка.ПользовательКому;
					МенеджерЗаписи.Прочитать();
					Если МенеджерЗаписи.Выбран() Тогда
						МенеджерЗаписи.Удалить();
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗвонка.АбонентОтКого) Тогда
		ДанныеЗвонка.ПредставлениеАбонента = Строка(ДанныеЗвонка.АбонентОтКого);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗвонка.Событие) И ЗначениеЗаполнено(ДанныеЗвонка.ИдентификаторЗвонкаВАТС) Тогда
		ДанныеЗвонка.Событие = НайтиСобытиеПоДаннымЗвонка(,, ДанныеЗвонка.ИдентификаторЗвонкаВАТС);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, ДанныеЗвонка, Истина);
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеСоответствияСтрокой(Соответствие)
	
	Строка = "";
	Для Каждого КлючИЗначение Из Соответствие Цикл
		Если ЗначениеЗаполнено(Строка) Тогда
			Строка = Строка + Символы.ПС;
		КонецЕсли;
		Строка = Строка + КлючИЗначение.Ключ + ":" + КлючИЗначение.Значение;
	КонецЦикла;
	
	Возврат Строка
	
КонецФункции

#КонецОбласти
