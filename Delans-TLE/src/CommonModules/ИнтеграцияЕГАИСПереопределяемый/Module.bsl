
#Область ПрограммныйИнтерфейс

// Процедура вызывается при загрузке после записи алкогольной продукции в базу.
//
// Параметры:
//  АлкогольнаяПродукция - СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС - загружаемая алкогольная продукция,
//  ЕстьИзменения - Булево - признак наличия изменений.
//
Процедура ПриЗагрузкеАлкогольнойПродукции(АлкогольнаяПродукция, ЕстьИзменения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура вызывается перед записью организации в базу.
//
// Параметры:
//  Организация - СправочникОбъект.КлассификаторОрганизацийЕГАИС - загружаемая организация.
//
Процедура ПриЗагрузкеОрганизации(Организация) Экспорт
	
	Если ЗначениеЗаполнено(Организация.ИНН) И Не Организация.Сопоставлено Тогда
		Контрагент = ИнтеграцияГИСМУНФ.КонтрагентПоИННКПП(Организация.ИНН, Организация.КПП);
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			Организация.Контрагент     = Контрагент;
			Организация.Сопоставлено   = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при загрузке ТТН (перед записью).
//
// Параметры:
//  ТТН_Объект - ДокументОбъект.ТТНВходящаяЕГАИС - загружаемая ТТН.
//
Процедура ПриЗагрузкеТТНВходящаяЕГАИС(ТТНВходящаяОбъект) Экспорт
	
	// Заполнение склада и организации
	РеквизитыОрганизацииЕГАИС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТТНВходящаяОбъект.Грузополучатель, "Контрагент, ТорговыйОбъект");
	
	ТТНВходящаяОбъект.Организация = РеквизитыОрганизацииЕГАИС.Контрагент;
	ТТНВходящаяОбъект.ТорговыйОбъект = РеквизитыОрганизацииЕГАИС.ТорговыйОбъект;
	
	// Заполнение документа основания
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТТНИсходящаяЕГАИС.Ссылка            КАК Ссылка,
	|	ТТНИсходящаяЕГАИС.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.Идентификатор = &Идентификатор");
	
	Запрос.УстановитьПараметр("Идентификатор", ТТНВходящаяОбъект.Идентификатор);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ТТНИсходящая = Неопределено;
	
	Если Выборка.Следующий() Тогда
		ТТНИсходящая = Выборка.Ссылка;
		Если ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда
			ТТНВходящаяОбъект.ДокументОснование = Выборка.ДокументОснование;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТТНВходящаяОбъект.ДокументОснование) Тогда // скопировать ТЧ из ТТНИсходящая
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТТНИсходящаяЕГАИСТовары.НомерСтроки                   КАК НомерСтроки,
		|	ТТНИсходящаяЕГАИСТовары.АлкогольнаяПродукция          КАК АлкогольнаяПродукция,
		|	ТТНИсходящаяЕГАИСТовары.Номенклатура                  КАК Номенклатура,
		|	ТТНИсходящаяЕГАИСТовары.Характеристика                КАК Характеристика,
		|	ТТНИсходящаяЕГАИСТовары.Серия                         КАК Серия,
		|	ТТНИсходящаяЕГАИСТовары.ИдентификаторУпаковки         КАК ИдентификаторУпаковки,
		|	ТТНИсходящаяЕГАИСТовары.Количество                    КАК Количество,
		|	ТТНИсходящаяЕГАИСТовары.Сумма                         КАК Сумма,
		|	ТТНИсходящаяЕГАИСТовары.Цена                          КАК Цена,
		|	ТТНИсходящаяЕГАИСТовары.НомерПартии                   КАК НомерПартии,
		|	ТТНИсходящаяЕГАИСТовары.Справка2.РегистрационныйНомер КАК НомерСправки2Поставщика
		|ИЗ
		|	Документ.ТТНИсходящаяЕГАИС.Товары КАК ТТНИсходящаяЕГАИСТовары
		|ГДЕ
		|	ТТНИсходящаяЕГАИСТовары.Ссылка = &Ссылка
		|";
		Запрос.УстановитьПараметр("Ссылка", ТТНИсходящая);
		Результат = Запрос.Выполнить();
		
		ТаблицаТТН = ТТНВходящаяОбъект.Товары.Выгрузить(, "НомерСправки2Поставщика,ИдентификаторСтроки,Справка2");
		
		ТТНВходящаяОбъект.Товары.Загрузить(Результат.Выгрузить());
		
		Для Каждого СтрокаТТН Из ТаблицаТТН Цикл
			СтруктураПоиска = Новый Структура("НомерСправки2Поставщика", СтрокаТТН.НомерСправки2Поставщика);
			СтрокиТовары = ТТНВходящаяОбъект.Товары.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаТовары Из СтрокиТовары Цикл
				СтрокаТовары.ИдентификаторСтроки = СтрокаТТН.ИдентификаторСтроки;
				СтрокаТовары.Справка2            = СтрокаТТН.Справка2;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при загрузке акта подтверждения ТТН.
//
// Параметры:
//  ТТН_Объект - ДокументОбъект.ТТНИсходящаяЕГАИС - подтверждаемая ТТН,
//  ОтказОтТТН - Булево - признак загрузки акта отказа от ТТН,
//  ЕстьРасхождения - Булево - признак загрузки акта расхождений.
//
Процедура ПриЗагрузкеАктаПодтвержденияТТН(ТТН_Объект, ОтказОтТТН, ЕстьРасхождения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура вызывается при загрузке подтверждения акта расхождений ТТН.
//
// Параметры:
//  ТТН - ДокументСсылка.ТТНВходящаяЕГАИС - подтверждаемая ТТН,
//  ОтказОтАкта - Булево - признак загрузки отказа от акта расхождений ТТН,
//
Процедура ПриЗагрузкеПодтвержденияАктаРасхожденийТТН(ТТН, ОтказОтАкта) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура вызывается при изменении статуса обработки документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - ссылка на документ,
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработки* - предыдущий статус обработки,
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработки* - новый статус обработки.
//  ДополнительныеПараметры - Структура - см. функцию ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Вызывается при определении настроек обмена с УТМ.
//
// Параметры:
//  ТранспортныйМодуль - Структура - данные транспортного модуля.
//
Процедура ПриПолученииНастроекУТМ(ТранспортныйМодуль) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Вызывается при отказе от входящей ТТН. Нужно реализовать алгоритм отмены проведения связанных поступлений.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на документ.
//
Процедура ОтменитьПроведениеПоступленияТоваровПриОтказеОтТТН(ДокументСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументПоступления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументОснование");
	
	Если ЗначениеЗаполнено(ДокументПоступления) Тогда
		
		ДокументПоступленияОбъект = ДокументПоступления.ПолучитьОбъект();
		
		Если ДокументПоступленияОбъект.Проведен Тогда
			ДокументПоступленияОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			ДокументПоступленияОбъект.Записать();
		КонецЕсли;
		
		//ДокументПоступленияОбъект.УстановитьПометкуУдаления(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу расхождений между входящей ТТН и документом поступления товаров.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на документ.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица расхождений с колонками:
//   * АлкогольнаяПродукция,
//   * Справка2,
//   * Количество,
//   * КоличествоФакт,
//   * Расхождение,
//   * ИдентификаторСтроки.
//
Функция ТаблицаРасхожденийТТН_ЕГАИС(ДокументСсылка) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("АлкогольнаяПродукция");
	Результат.Колонки.Добавить("Справка2");
	Результат.Колонки.Добавить("Количество");
	Результат.Колонки.Добавить("КоличествоФакт");
	Результат.Колонки.Добавить("Расхождение");
	Результат.Колонки.Добавить("ИдентификаторСтроки");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕГАИСТовары.Ссылка КАК Ссылка,
	|	ЕГАИСТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ЕГАИСТовары.Номенклатура КАК Номенклатура,
	|	ЕГАИСТовары.Характеристика КАК Характеристика,
	|	ЕГАИСТовары.Серия КАК Серия,
	|	ЕГАИСТовары.Количество КАК Количество,
	|	ЕГАИСТовары.Справка2 КАК Справка2
	|ПОМЕСТИТЬ ТаблицаТоварыТТН
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ЕГАИСТовары
	|ГДЕ
	|	ЕГАИСТовары.Ссылка = &СсылкаТТН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СУММА(ЕСТЬNULL(ТабличнаяЧасть.Количество, 0) * ВЫБОР
	|			КОГДА ТТНВходящаяЕГАИС.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)
	|				ТОГДА ЕСТЬNULL(ТТНВходящаяЕГАИС.Номенклатура.ОбъемДАЛ, 0)
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Количество
	|ПОМЕСТИТЬ ВтТоварыПоступления
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная.Запасы КАК ТабличнаяЧасть
	|		ПО (ТабличнаяЧасть.Ссылка = ТТНВходящаяЕГАИС.Ссылка.ДокументОснование)
	|			И (ТабличнаяЧасть.Номенклатура = ТТНВходящаяЕГАИС.Номенклатура)
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Ссылка = &СсылкаТТН
	|	И ЕСТЬNULL(ТабличнаяЧасть.Ссылка.Проведен, ЛОЖЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТТНВходящаяЕГАИС.АлкогольнаяПродукция
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.АлкогольнаяПродукция,
	|	СУММА(ЕСТЬNULL(ТабличнаяЧасть.Количество, 0) * ВЫБОР
	|			КОГДА ТТНВходящаяЕГАИС.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)
	|				ТОГДА ЕСТЬNULL(ТТНВходящаяЕГАИС.Номенклатура.ОбъемДАЛ, 0)
	|			ИНАЧЕ 1
	|		КОНЕЦ)
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеЗапасов.Запасы КАК ТабличнаяЧасть
	|		ПО (ТабличнаяЧасть.Ссылка = ТТНВходящаяЕГАИС.Ссылка.ДокументОснование)
	|			И (ТабличнаяЧасть.Номенклатура = ТТНВходящаяЕГАИС.Номенклатура)
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Ссылка = &СсылкаТТН
	|	И ЕСТЬNULL(ТабличнаяЧасть.Ссылка.Проведен, ЛОЖЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТТНВходящаяЕГАИС.АлкогольнаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СУММА(ТабличнаяЧасть.Количество) КАК Количество
	|ПОМЕСТИТЬ ВтТоварыТТН
	|ИЗ
	|	ТаблицаТоварыТТН КАК ТабличнаяЧасть
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.АлкогольнаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТоварыТТН.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ВтТоварыТТН.Количество - ЕСТЬNULL(ВтТоварыПоступления.Количество, 0) КАК Количество
	|ПОМЕСТИТЬ ВТРасхождения
	|ИЗ
	|	ВтТоварыТТН КАК ВтТоварыТТН
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТоварыПоступления КАК ВтТоварыПоступления
	|		ПО (ВтТоварыПоступления.АлкогольнаяПродукция = ВтТоварыТТН.АлкогольнаяПродукция)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоварыТТН.Ссылка КАК Ссылка,
	|	ТаблицаТоварыТТН.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаТоварыТТН.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТаблицаТоварыТТН.Количество КАК Количество,
	|	0 КАК КоличествоФакт,
	|	ЕСТЬNULL(ВТРасхождения.Количество, 0) КАК Расхождение,
	|	ТаблицаТоварыТТН.Справка2 КАК Справка2
	|ИЗ
	|	ТаблицаТоварыТТН КАК ТаблицаТоварыТТН
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасхождения КАК ВТРасхождения
	|		ПО ТаблицаТоварыТТН.АлкогольнаяПродукция = ВТРасхождения.АлкогольнаяПродукция
	|
	|УПОРЯДОЧИТЬ ПО
	|	Расхождение,
	|	АлкогольнаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРасхождения.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ВТРасхождения.Количество КАК Количество
	|ИЗ
	|	ВТРасхождения КАК ВТРасхождения";
	
	Запрос.УстановитьПараметр("СсылкаТТН", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	
	СтруктураПоиска = Новый Структура("АлкогольнаяПродукция");
	
	ТаблицаРасхождения = Результат[5].Выгрузить();
	ТаблицаТоварыТТН = Результат[4].Выгрузить();
	
	Для каждого СтрокаТоварыТТН Из ТаблицаТоварыТТН Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТоварыТТН);
		
		НайденныеСтроки = ТаблицаРасхождения.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТоварыТТН.КоличествоФакт = СтрокаТоварыТТН.Количество;
			Продолжить;
		КонецЕсли;
		
		СтрокаРасхождения = НайденныеСтроки.Получить(0);
		КоличествоФакт = 0;
		
		Если СтрокаТоварыТТН.Количество >= СтрокаРасхождения.Количество Тогда
			КоличествоФакт = СтрокаТоварыТТН.Количество - СтрокаРасхождения.Количество;
		КонецЕсли;
		
		СтрокаТоварыТТН.КоличествоФакт = КоличествоФакт;
		
		СтрокаРасхождения.Количество = СтрокаРасхождения.Количество - СтрокаТоварыТТН.Количество;
		
		Если СтрокаРасхождения.Количество <= 0 Тогда
			ТаблицаРасхождения.Удалить(СтрокаРасхождения);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаТоварыТТН;
	
КонецФункции

// Заполняет таблицу штрихкодов алкогольной продукции входящей ТТН.
//
// Параметры:
//  ДокументСсылка     - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на документ.
//  ЗаполняемаяТаблица - ДанныеФормыКоллеция - заполняемая таблица.
//
Процедура ЗаполнитьТаблицуШтрихкодовНеМаркируемойПродукцииТТН_ЕГАИС(ДокументСсылка, ЗаполняемаяТаблица) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтрихкодыНоменклатуры.Штрихкод              КАК Штрихкод,
	|	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ПО ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|		ПО (КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции = ВидыАлкогольнойПродукции.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ТТНВходящаяЕГАИСТовары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|ГДЕ
	|	ТТНВходящаяЕГАИСТовары.Ссылка = &ДокументСсылка
	|	И НЕ ВидыАлкогольнойПродукции.Маркируемый";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	ЗаполняемаяТаблица.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

// Заполняет таблицу сопоставленных справок 2 документа документа ТТН входящая.
//
// Параметры:
//  ДокументСсылка     - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на документ.
//  ЗаполняемаяТаблица - ДанныеФормыКоллеция - заполняемая таблица.
//
Процедура ЗаполнитьТаблицуСопоставленныхСправок2ТТН_ЕГАИС(ДокументСсылка, ЗаполняемаяТаблица) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТТНВходящаяЕГАИСТовары.Справка2 КАК Справка2,
	|	ТТНВходящаяЕГАИСТовары.Номенклатура КАК Номенклатура,
	|	ТТНВходящаяЕГАИСТовары.Характеристика КАК Характеристика
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|ГДЕ
	|	ТТНВходящаяЕГАИСТовары.Ссылка = &ДокументСсылка
	|	И ТТНВходящаяЕГАИСТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ТТНВходящаяЕГАИСТовары.Справка2 <> ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	ЗаполняемаяТаблица.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

// Получить представление валюты регламентированного учета.
// 
// Возвращаемое значение:
//  Строка - Представление валюты.
//
Функция ПредставлениеВалютыРегламентированногоУчета() Экспорт
	
	Возврат Константы.НациональнаяВалюта.Получить();
	
КонецФункции

// Получить представление документа поступления.
//
// Параметры:
//  Номер - Строка - номер документа поступления,
//  Дата - Дата - дата документа поступления.
// 
// Возвращаемое значение:
//  Строка - представление документа поступления.
//
Функция ПредставлениеДокументаПоступления(Номер, Дата) Экспорт
	
	НазваниеДокумента = НСтр("ru = 'Приходная накладная'");
	Возврат СтрШаблон(
			"%1 № %2 от %3 г.",
			НазваниеДокумента,
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, Истина, Ложь),
			Формат(Дата, "ДФ='дд ММММ гггг'"));
	
КонецФункции

// В функции нужно реализовать алгоритм получения данных документа поступления.
//
// Параметры:
//  ДокументПоступления - ДокументСсылка - ссылка на документ поступления товаров.
// 
// Возвращаемое значение:
//  Структура - данные поступления. Структура со свойствами:
//   * ТекстПоступлениеТоваров - Строка - представление документа поступления товаров и услуг,
//   * ПоступлениеТоваровУслуг - ДокументСсылка - ссылка на документ поступления товаров и услуг.
//
Функция ДанныеДокументаПоступления(ДокументПоступления) Экспорт
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПоступления, "Ссылка, Номер, Дата", Истина);
	
	Если ЗначениеЗаполнено(Реквизиты.Ссылка) Тогда
		ТекстПоступлениеТоваров = ИнтеграцияЕГАИСПереопределяемый.ПредставлениеДокументаПоступления(Реквизиты.Номер, Реквизиты.Дата);
		ПоступлениеТоваровУслуг = Реквизиты.Ссылка;
	Иначе
		ТекстПоступлениеТоваров = "";
		ПоступлениеТоваровУслуг = Неопределено;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТекстПоступлениеТоваров", ТекстПоступлениеТоваров);
	ВозвращаемоеЗначение.Вставить("ПоступлениеТоваровУслуг", ПоступлениеТоваровУслуг);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Функция проверяет наличие расхождений между ТТН и товарами накладной.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНВходящаяЕГАИС - проверяемая ТТН,
//  ДокументПоступления - ДокументСсылка - проверяемое поступление товаров.
//
// Возвращаемое значение:
//  Булево - Истина, если есть расхождения, иначе - Ложь.
//
Функция ЕстьРасхожденияМеждуДокументомПоступленияИТТНЕГАИС(ДокументСсылка, ДокументПоступления) Экспорт
	
	Если ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПеремещениеЗапасов") Тогда
		Возврат ИнтеграцияЕГАИСУНФ.ЕстьРасхожденияМеждуДокументомПеремещениеТоваровИТТНЕГАИС(ДокументСсылка, ДокументПоступления);
	ИначеЕсли ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		Возврат ИнтеграцияЕГАИСУНФ.ЕстьРасхожденияМеждуДокументомПоступлениеТоваровИТТНЕГАИС(ДокументСсылка, ДокументПоступления);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Получить представление номенклатуры.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.Номенклатура - ссылка на номенклатуру,
//  ХарактеристикаНоменклатуры - ОпределяемыйТип.ХарактеристикаНоменклатуры - ссылка на характеристику номенклатуры,
//  Упаковка - ОпределяемыйТип.Упаковка - ссылка на упаковку.
// 
// Возвращаемое значение:
//  Строка - представление номенклатуры.
//
Функция ПредставлениеНоменклатуры(Номенклатура, ХарактеристикаНоменклатуры, Упаковка) Экспорт
	
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "Наименование, НаименованиеПолное, ЕдиницаИзмерения", Истина);
	Наименование = ?(ЗначениеЗаполнено(РеквизитыНоменклатуры.НаименованиеПолное), РеквизитыНоменклатуры.НаименованиеПолное, РеквизитыНоменклатуры.Наименование);
	Возврат Наименование;
	
КонецФункции

// Возвращает текст запроса списка распоряжений на оформление документа передача в регистр №2 ЕГАИС.
// 
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаСпискаРаспоряженийНаОформлениеДокументаПередачаВРегистр2ЕГАИС() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.Справка2 КАК Справка2,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.СвободныйОстатокОстаток КАК КПередаче
	|ПОМЕСТИТЬ ВТОстатки
	|ИЗ
	|	РегистрНакопления.ОстаткиАлкогольнойПродукцииЕГАИС.Остатки КАК ОстаткиАлкогольнойПродукцииЕГАИСОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	|		ПО ОстаткиАлкогольнойПродукцииЕГАИСОстатки.ОрганизацияЕГАИС.Код = НастройкиОбменаЕГАИС.ИдентификаторФСРАР
	|ГДЕ
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.СвободныйОстатокОстаток > 0
	|	И ОстаткиАлкогольнойПродукцииЕГАИСОстатки.ОрганизацияЕГАИС.ТорговыйОбъект.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АкцизныеМарки.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	АкцизныеМарки.Справка2 КАК Справка2,
	|	КОЛИЧЕСТВО(АкцизныеМарки.АкцизнаяМарка) КАК Количество
	|ПОМЕСТИТЬ АкцизныеМарки
	|ИЗ
	|	РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМарки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОстатки КАК втОстатки
	|		ПО (втОстатки.Справка2 = АкцизныеМарки.Справка2)
	|			И (втОстатки.ОрганизацияЕГАИС = АкцизныеМарки.ОрганизацияЕГАИС)
	|ГДЕ
	|	АкцизныеМарки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ВНаличии), ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.КПостановкеНаБаланс))
	|
	|СГРУППИРОВАТЬ ПО
	|	АкцизныеМарки.ОрганизацияЕГАИС,
	|	АкцизныеМарки.Справка2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.Справка2 КАК Справка2,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.КПередаче - ЕСТЬNULL(АкцизныеМарки.Количество, 0) КАК КПередаче
	|ИЗ
	|	ВТОстатки КАК ОстаткиАлкогольнойПродукцииЕГАИСОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ АкцизныеМарки КАК АкцизныеМарки
	|		ПО ОстаткиАлкогольнойПродукцииЕГАИСОстатки.Справка2 = АкцизныеМарки.Справка2
	|			И ОстаткиАлкогольнойПродукцииЕГАИСОстатки.ОрганизацияЕГАИС = АкцизныеМарки.ОрганизацияЕГАИС
	|ГДЕ
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.КПередаче - ЕСТЬNULL(АкцизныеМарки.Количество, 0) > 0";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для движений по регистру Серии номенклатуры.
// 
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДвижениеСерийТоваров(ИмяТаблицы) Экспорт
	
	ТекстЗапроса = "";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаСерии.Номенклатура                                     КАК Номенклатура,
	|	ТаблицаСерии.Характеристика                                   КАК Характеристика,
	|	ТаблицаСерии.Серия                                            КАК Серия,
	|	ТаблицаСерии.Количество                                       КАК Количество
	|ИЗ
	|	Документ.%ИмяТаблицы%.Товары КАК ТаблицаСерии
	|
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицы%", ИмяТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает имя формы рабочего места по оформлению входящих ТТН.
// 
// Возвращаемое значение:
//  Строка - имя формы.
//
Функция ИмяФормыРабочегоМестаПоОформлениюДокументаТТНВходящаяЕГАИС() Экспорт
	
	ИмяФормы = "Документ.ТТНВходящаяЕГАИС.Форма.ФормаСпискаДокументов";
	
	Возврат ИмяФормы;
	
КонецФункции

// Получить количество возможных документов поступления товаров для сопоставления.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - ссылка на собственную организацию,
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - ссылка на торговый объект,
//  Контрагент - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - поставщик.
// 
// Возвращаемое значение:
//  Число - количество документов.
//
Функция ПолучитьКоличествоВозможныхДокументовПоступленияТоваров(Организация, ТорговыйОбъект, Контрагент) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПриходнаяНакладная.Запасы КАК ПоступлениеТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТТНВходящаяЕГАИС КАК ДокументТТНВходящаяЕГАИС
	|		ПО (ДокументТТНВходящаяЕГАИС.ДокументОснование = ПоступлениеТоваровУслугТовары.Ссылка)
	|ГДЕ
	|	НЕ ПоступлениеТоваровУслугТовары.Ссылка.ПометкаУдаления
	|	И ПоступлениеТоваровУслугТовары.Ссылка.Организация = &Организация
	|	И ПоступлениеТоваровУслугТовары.Ссылка.СтруктурнаяЕдиница = &Склад
	|	И ПоступлениеТоваровУслугТовары.Ссылка.Контрагент = &ПоставщикКонтрагент
	|	И ДокументТТНВходящаяЕГАИС.Ссылка ЕСТЬ NULL
	|	И ПоступлениеТоваровУслугТовары.Номенклатура.АлкогольнаяПродукция");
	
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("Склад",               ТорговыйОбъект);
	Запрос.УстановитьПараметр("ПоставщикКонтрагент", Контрагент);
	
	КоличествоНакладных = Запрос.Выполнить().Выгрузить().Количество();
	
	Возврат КоличествоНакладных;
	
КонецФункции

// Возвращает признак разрешения розничной продажи без сопоставления с классификатором ЕГАИС.
// 
// Возвращаемое значение:
//  Булево - если Истина, продажа разрешена, иначе - Ложь.
//
Функция РазрешатьПродажуАлкогольнойПродукцииБезСопоставленияЕГАИС() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Процедура формирования движений по регистру "Движения серий товаров".
//
// Параметры:
//	ДополнительныеСвойства - Структура - дополнительные свойства для записи движений 
//	Движения - КоллекцияДвижений - движения по которым двигается документ
//	Отказ - Булево - признак отказа от проведения документа
//
Процедура ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Возврат;
	
КонецПроцедуры

#Область ОбработчикиСобытийДокументов

// Вызывается при вводе документа на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - заполняемый документ,
//  ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения,
//  ТекстЗаполнения - Строка, Неопределено - текст, используемый для заполнения документа,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполненияДокумента(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	ИнтеграцияЕГАИСУНФ.ЗаполнениеДокументовЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

// Вызывается расширением формы при необходимости проверки заполнения реквизитов при записи или при проведении документа в форме,
// а также при выполнении метода ПроверитьЗаполнение.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - проверяемый документ,
//  Отказ - Булево - признак отказа от проведения документа,
//  ПроверяемыеРеквизиты - Массив - массив путей к реквизитам, для которых будет выполнена проверка заполнения,
//  МассивНепроверяемыхРеквизитов - Массив - массив путей к реквизитам, для которых не будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	//Если ПроверяемыеРеквизиты.Найти("Товары.Номенклатура") <> Неопределено Тогда
	//	МассивНепроверяемыхРеквизитов.Добавить("Товары.Номенклатура");
	//КонецЕсли;
	
	Если ПроверяемыеРеквизиты.Найти("Товары.Серия") <> Неопределено Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Серия");
	КонецЕсли;
	
	Если ПроверяемыеРеквизиты.Найти("Товары.Характеристика") <> Неопределено Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Характеристика");
	КонецЕсли;
	
	Если ПроверяемыеРеквизиты.Найти("Характеристика") <> Неопределено Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Характеристика");
	КонецЕсли;
	
	Если ПроверяемыеРеквизиты.Найти("ВложенныеТовары.Характеристика") <> Неопределено Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВложенныеТовары.Характеристика");
	КонецЕсли;
		
	Возврат;
	
КонецПроцедуры

// Вызывается при проведении документа. Выполняется в транзакции записи.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - проводимый документ,
//  Отказ - Булево - признак отказа от проведения документа,
//  РежимПроведения - РежимПроведенияДокумента - текущий режим проведения.
//
Процедура ОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Возникает перед выполнением записи документа. Вызывается после начала транзакции записи, но до начала записи документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - записываемый документ,
//  Отказ - Булево - признак отказа от записи,
//  РежимЗаписи - РежимЗаписиДокумента - текущий режим записи документа,
//  РежимПроведения - РежимПроведенияДокумента - текущий режим проведения документа.
//
Процедура ПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

// Проверяет возможность использования регистр №2 для организации.
//
// Параметры:
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - ссылка на организацию в классификаторе ЕГАИС.
// 
// Возвращаемое значение:
//  Булево - Истина, если для организации можно использовать регистр №2.
//
Функция ИспользоватьРегистр2(ОрганизацияЕГАИС) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОрганизацииЕГАИС.ТорговыйОбъект.ТипСтруктурнойЕдиницы КАК ТипСклада
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК ОрганизацииЕГАИС
	|		ПО (ОрганизацииЕГАИС.Код = НастройкиОбменаЕГАИС.ИдентификаторФСРАР)
	|ГДЕ
	|	ОрганизацииЕГАИС.Ссылка = &ОрганизацияЕГАИС");
	
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ТипСклада = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Розница");
	
КонецФункции

// Записывает соответствие между номенклатурой и классификатором ЕГАИС из табличной части документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ, содержащий табличную часть Товары.
//  ИменаДопКолонок - Строка - Дополнительные колонки для сопоставления.
//  ЗаписыватьСправку2 - Булево - признак сопоставления по справке 2.
//  СопоставлятьПоИдентификаторуУпаковки - Булево - признак сопоставления по идентификатору.
//
Процедура ЗаписатьСоответствиеНоменклатуры(ДокументОбъект, ЗаписыватьСправку2 = Ложь, СопоставлятьПоИдентификаторуУпаковки = Ложь, СопоставлятьПоСерии = Истина) Экспорт
	
	ИмяКолонки = "АлкогольнаяПродукция";
	КолонкиДляВыгрузки = ИмяКолонки + ", " + "Номенклатура, Характеристика";
	Если СопоставлятьПоСерии Тогда
		КолонкиДляВыгрузки = КолонкиДляВыгрузки + ", Серия";
	КонецЕсли;
	Если СопоставлятьПоИдентификаторуУпаковки Тогда
		КолонкиДляВыгрузки = КолонкиДляВыгрузки + ", ИдентификаторУпаковки";
	КонецЕсли;
	Если ЗаписыватьСправку2 Тогда
		КолонкиДляВыгрузки = КолонкиДляВыгрузки + ", Справка2";
	КонецЕсли;
	Данные = ДокументОбъект.Товары.Выгрузить(, КолонкиДляВыгрузки);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&ИмяКолонкиАлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	&ИмяКолонкиСерия КАК Серия,
	|	&ИмяКолонкиИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	&ИмяКолонкиСправка2 КАК Справка2
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Серия КАК Серия,
	|	Таблица.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	Таблица.Справка2 КАК Справка2,
	|	Сопоставлено.АлкогольнаяПродукция КАК Сопоставлено,
	|	МАКСИМУМ(ЕСТЬNULL(Сопоставлено.Порядок, ЕСТЬNULL(СопоставленоБЕЗСерии.Порядок, 0))) КАК Порядок
	|ИЗ
	|	Таблица КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК Сопоставлено
	|		ПО (Сопоставлено.Номенклатура = Таблица.Номенклатура)
	|			И (Сопоставлено.Характеристика = Таблица.Характеристика)
	|			И (Сопоставлено.ИдентификаторУпаковки = Таблица.ИдентификаторУпаковки)
	|			И (Сопоставлено.Справка2 = Таблица.Справка2)
	|			И (Сопоставлено.Серия = Таблица.Серия)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СопоставленоБЕЗСерии
	|		ПО (СопоставленоБЕЗСерии.Номенклатура = Таблица.Номенклатура)
	|			И (СопоставленоБЕЗСерии.Характеристика = Таблица.Характеристика)
	|			И (СопоставленоБЕЗСерии.ИдентификаторУпаковки = Таблица.ИдентификаторУпаковки)
	|			И (СопоставленоБЕЗСерии.Справка2 = Таблица.Справка2)
	|ГДЕ
	|	Таблица.АлкогольнаяПродукция <> ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|	И Таблица.Номенклатура <> &ПустаяСсылкаНоменклатура
	|	И Сопоставлено.АлкогольнаяПродукция ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.АлкогольнаяПродукция,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Серия,
	|	Таблица.ИдентификаторУпаковки,
	|	Таблица.Справка2,
	|	Сопоставлено.АлкогольнаяПродукция");
	
	Запрос.УстановитьПараметр("Таблица", Данные);
	Запрос.УстановитьПараметр("ПустаяСсылкаНоменклатура", ИнтеграцияЕГАИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	Запрос.УстановитьПараметр("ПустаяСтрока",             "");
	Запрос.УстановитьПараметр("ПустаяСправка2",           Справочники.Справки2ЕГАИС.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСерия",              ИнтеграцияЕГАИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяКолонкиАлкогольнаяПродукция", ИмяКолонки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ИмяКолонкиИдентификаторУпаковки",
		?(СопоставлятьПоИдентификаторуУпаковки, "Т.ИдентификаторУпаковки", "&ПустаяСтрока"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ИмяКолонкиСерия",
		?(СопоставлятьПоСерии, "Т.Серия", "&ПустаяСерия"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ИмяКолонкиСправка2",
		?(ЗаписыватьСправку2, "Т.Справка2", "&ПустаяСправка2"));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура, Истина);
		НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика, Истина);
		НаборЗаписей.Отбор.Серия.Установить(Выборка.Серия, Истина);
		НаборЗаписей.Отбор.АлкогольнаяПродукция.Установить(Выборка.АлкогольнаяПродукция, Истина);
		НаборЗаписей.Отбор.ИдентификаторУпаковки.Установить(Выборка.ИдентификаторУпаковки, Истина);
		НаборЗаписей.Отбор.Справка2.Установить(Выборка.Справка2, Истина);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Номенклатура          = Выборка.Номенклатура;
		НоваяЗапись.Характеристика        = Выборка.Характеристика;
		НоваяЗапись.Серия                 = Выборка.Серия;
		НоваяЗапись.АлкогольнаяПродукция  = Выборка.АлкогольнаяПродукция;
		НоваяЗапись.ИдентификаторУпаковки = Выборка.ИдентификаторУпаковки;
		НоваяЗапись.Справка2              = Выборка.Справка2;
		НоваяЗапись.Порядок               = Выборка.Порядок + 1;
	
		Попытка
			НаборЗаписей.Записать();
		Исключение
			
			ТекстОшибки = НСтр("ru = 'При записи соответствия номенклатуры произошла ошибка:
			                         |%1'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
			
			ИнтеграцияЕГАИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет таблицу данными о действующих лицензиях на продажу алкогольной продукции.
//
// Параметры:
//  ТаблицаЛицензий - ТаблицаЗначений - таблица для заполнения. Колонки:
//   * Лицензиат     - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - контрагент, для которого нужно получить лицензию,
//   * ДатаТТН       - Дата - дата документа, на которую нужно получить действующую лицензию,
//   * Наименование  - Строка - представление лицензии,
//   * ДатаНачала    - Дата - дата начала действия лицензии,
//   * ДатаОкончания - Дата - дата окончания действия лицензии,
//   * КемВыдана     - Строка - наименование организации, выдавшей лицензию.
//
Процедура ЗаполнитьТаблицуЛицензийНаАлкоголь(ТаблицаЛицензий) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЛицензий", ТаблицаЛицензий);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЛицензий.Лицензиат КАК Лицензиат,
	|	ТаблицаЛицензий.ДатаТТН КАК ДатаТТН
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ
	|	&ТаблицаЛицензий КАК ТаблицаЛицензий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанные.Лицензиат КАК Лицензиат,
	|	ИсходныеДанные.ДатаТТН КАК ДатаТТН,
	|	МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания) КАК ДатаОкончания
	|ПОМЕСТИТЬ ДатыОкончанияЛицензий
	|ИЗ
	|	ИсходныеДанные КАК ИсходныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|		ПО ИсходныеДанные.Лицензиат = ЛицензииПоставщиковАлкогольнойПродукции.Владелец
	|			И (ИсходныеДанные.ДатаТТН МЕЖДУ ЛицензииПоставщиковАлкогольнойПродукции.ДатаНачала И ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсходныеДанные.Лицензиат,
	|	ИсходныеДанные.ДатаТТН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыОкончанияЛицензий.Лицензиат КАК Лицензиат,
	|	ДатыОкончанияЛицензий.ДатаТТН КАК ДатаТТН,
	|	МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.Ссылка) КАК Лицензия
	|ПОМЕСТИТЬ ЛицензииНаАлкоголь
	|ИЗ
	|	Справочник.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДатыОкончанияЛицензий КАК ДатыОкончанияЛицензий
	|		ПО ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания = ДатыОкончанияЛицензий.ДатаОкончания
	|			И ЛицензииПоставщиковАлкогольнойПродукции.Владелец = ДатыОкончанияЛицензий.Лицензиат
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыОкончанияЛицензий.Лицензиат,
	|	ДатыОкончанияЛицензий.ДатаТТН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛицензииНаАлкоголь.Лицензиат КАК Лицензиат,
	|	ЛицензииНаАлкоголь.ДатаТТН КАК ДатаТТН,
	|	ЛицензииНаАлкоголь.Лицензия.Наименование КАК Наименование,
	|	ЛицензииНаАлкоголь.Лицензия.ДатаНачала КАК ДатаНачала,
	|	ЛицензииНаАлкоголь.Лицензия.ДатаОкончания КАК ДатаОкончания,
	|	ЛицензииНаАлкоголь.Лицензия.КемВыдана КАК КемВыдана
	|ИЗ
	|	ЛицензииНаАлкоголь КАК ЛицензииНаАлкоголь";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Лицензиат", Выборка.Лицензиат);
		ПараметрыОтбора.Вставить("ДатаТТН", Выборка.ДатаТТН);
		
		МассивСтрок = ТаблицаЛицензий.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой необходимо настроить подключаемое оборудование,
//  ПрефиксыЭлементовФормы - Строка - строка имен табличных частей, разделенных запятыми, в которых нужно настроить видимость команд.
//
Процедура НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы = "Товары") Экспорт
	
	Если ЗначениеЗаполнено(ПрефиксыЭлементовФормы) Тогда
		МассивПрефиксыЭлементовФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрефиксыЭлементовФормы, ",");
	КонецЕсли;
	
	Форма.ИспользоватьПодключаемоеОборудование = Истина;
	
	Для Каждого Префикс Из МассивПрефиксыЭлементовФормы Цикл
		
		Элемент = Форма.Элементы.Найти(Префикс + "ЗагрузитьДанныеИзТСД");
		Если Элемент <> Неопределено Тогда
			Элемент.Видимость = Ложь;
		КонецЕсли;
		
		Элемент = Форма.Элементы.Найти(Префикс + "ВыгрузитьДанныеВТСД");
		Если Элемент <> Неопределено Тогда
			Элемент.Видимость = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// В функции нужно определить значения по умолчанию, которые будут подставляться в
// реквизиты не сопоставленных элементов справочника.
//
// Параметры:
//  СобственнаяОрганизация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - значение по умолчанию для собственной организации,
//  СобственныйТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - значение по умолчанию для собственного торгового объекта,
//  СторонняяОрганизация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - значение по умолчанию для сторонней организации,
//  СтороннийТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - значение по умолчанию для стороннего торгового объекта.
//
Процедура ЗначенияПоУмолчаниюНеСопоставленныхОбъектов(
		СобственнаяОрганизация = Неопределено,
		СобственныйТорговыйОбъект = Неопределено,
		СторонняяОрганизация = Неопределено,
		СтороннийТорговыйОбъект = Неопределено) Экспорт
		
	ТекПользователь = Пользователи.ТекущийПользователь();
	
	СобственнаяОрганизация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновнаяОрганизация");
	СобственныйТорговыйОбъект = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновнойСклад");
	СторонняяОрганизация      = Справочники.Контрагенты.ПустаяСсылка();
	СтороннийТорговыйОбъект   = Неопределено;
	
КонецПроцедуры

// Данные сопоставления организации ЕГАИС с объектами предприятия.
//
// Параметры:
//  КодВФСРАР - Строка - код организации в ФСРАР.
// 
// Возвращаемое значение:
//  Структура - структура со свойствами:
//   * ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС, Неопределено - ссылка на организацию в классификаторе ЕГАИС,
//   * Организация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - сопоставленная организация предприятия,
//   * ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - сопоставленный торговый объект предприятия,
//   * КПП - Строка - КПП организации,
//   * ИНН - Строка - ИНН организации.
//
Функция ДанныеСопоставленияОрганизацииЕГАИС(КодВФСРАР) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("ТорговыйОбъект");
	Результат.Вставить("ОрганизацияЕГАИС");
	Результат.Вставить("ИНН", "");
	Результат.Вставить("КПП", "");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Код", КодВФСРАР);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлассификаторОрганизацийЕГАИС.Контрагент КАК Организация,
	|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект,
	|	КлассификаторОрганизацийЕГАИС.Ссылка КАК ОрганизацияЕГАИС,
	|	ЕСТЬNULL(КлассификаторОрганизацийЕГАИС.Контрагент.ИНН, КлассификаторОрганизацийЕГАИС.ИНН) КАК ИНН,
	|	ЕСТЬNULL(КлассификаторОрганизацийЕГАИС.Контрагент.КПП, КлассификаторОрганизацийЕГАИС.КПП) КАК КПП
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.Код = &Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает ИНН и КПП переданной организации и торгового объекта.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - ссылка на организацию, реквизиты которой нужно определить,
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - ссылка на торговый объект для определения КПП.
// 
// Возвращаемое значение:
//  Структура - структура со свойствами:
//   * КПП - Строка - КПП организации,
//   * ИНН - Строка - ИНН организации.
//
Функция ИННКППСопоставленнойОрганизации(Организация, ТорговыйОбъект) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИНН, КПП");
	
КонецФункции

// В функции нужно реализовать поиск организации предприятия по ИНН и/или КПП.
//
// Параметры:
//  ИНН - Строка - ИНН искомой организации,
//  КПП - Строка - КПП искомой организации.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - найденная организация,
//  Неопределено - организация не найдена.
//
Функция ОрганизацияПоИННКПП(ИНН, КПП) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН = &ИНН
	|	И Организации.КПП = &КПП
	|	И НЕ Организации.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
КонецФункции

// Возвращает список значений идентификаторов организаций и их представлений
//
// Параметры:
//  ВключаяДату - Дата - В состав идентификатора может быть включено представление даты маркировки.
//              - Неопределено - В состав идентификатора представление даты не включается.
//
// Возвращаемое значение:
//  СписокЗначений - Список идентификаторов
//   * Значение - Строка - Идентификатор организации для генерации штрихкода, содержащий символы цифр.
//   * Представление - Строка - Представление идентификатора для отображения пользователю.
//
Функция ИдентификаторыОрганизации(ВключаяДату = Неопределено, ТолькоКодФСРАР = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	1 КАК Порядок,
		|	Организации.ИНН КАК ИдентификаторОрганизации,
		|	&ТипИдентификатораИНН КАК ТипИдентификатора
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления
		|	И НЕ Организации.ИНН = """"
		|	И &ТолькоКодФСРАР = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	2,
		|	НастройкиОбменаЕГАИС.ИдентификаторФСРАР,
		|	&ТипИдентификатораКодФСРАР
		|ИЗ
		|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	ТипИдентификатора";
	
	Запрос.УстановитьПараметр("ТолькоКодФСРАР", ТолькоКодФСРАР);
	Если ВключаяДату = Неопределено Тогда
		Запрос.УстановитьПараметр("ТипИдентификатораИНН",
		                          НСтр("ru = 'ИНН'"));
		
		Запрос.УстановитьПараметр("ТипИдентификатораКодФСРАР",
		                          НСтр("ru = 'Код ФСРАР'"));
	Иначе
		Запрос.УстановитьПараметр("ТипИдентификатораИНН",
		                          НСтр("ru = 'ИНН + дата'"));
		
		Запрос.УстановитьПараметр("ТипИдентификатораКодФСРАР",
		                          НСтр("ru = 'Код ФСРАР + дата'"));
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокИдентификаторовОрганизации = Новый СписокЗначений;
	ШаблонПредставления = НСтр("ru = '%1: %2'");
	
	Пока Выборка.Следующий() Цикл
		
		Если ВключаяДату = Неопределено Тогда
			ИдентификаторОрганизации = Выборка.ИдентификаторОрганизации;
		Иначе
			ИдентификаторОрганизации = Выборка.ИдентификаторОрганизации + Формат(ВключаяДату, "ДФ=yyMMdd"); // Установленный формат даты в GS1-128
		КонецЕсли;
		
		ПредставлениеИдентификатора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонПредставления,
			Выборка.ТипИдентификатора,
			ИдентификаторОрганизации);
		
		СписокИдентификаторовОрганизации.Добавить(ИдентификаторОрганизации, ПредставлениеИдентификатора);
	КонецЦикла;
	
	Возврат СписокИдентификаторовОрганизации;
	
КонецФункции

// Проверяет наличие права создания котрагента у текущего пользователя.
//
// Возвращаемое значение:
//  Булево - Истина, если есть право создания контрагента, Ложь в обратном случае.
//
Функция ЕстьПравоСозданияКонтрагента() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Проверяет наличие права изменения документов ЕГАИС у текущего пользователя.
//
// Возвращаемое значение:
//  Булево - Истина, если есть право изменения хотя бы одного документа ЕГАИС, Ложь в обратном случае.
//
Функция ЕстьПравоИзмененияДокументовЕГАИС() Экспорт
	
	Возврат Истина;
	
КонецФункции

// В функции нужно реализовать поиск контрагента и торгового объекта контрагента (партнера) по ИНН и/или КПП.
//
// Параметры:
//  ИНН - Строка - ИНН искомого контрагента,
//  КПП - Строка - КПП искомого контрагента.
// 
// Возвращаемое значение:
//  Структура - структура со свойствами:
//   * Контрагент - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - найденный контрагент,
//   * ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - найденный торговый объект контрагента (партнер).
//  Неопределено - контрагент не найден.
//
Функция КонтрагентТорговыйОбъектПоИННКПП(ИНН, КПП) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КПП = &КПП
	|	И НЕ Контрагенты.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("Контрагент", РезультатЗапроса.Выгрузить()[0].Ссылка);
		Результат.Вставить("ТорговыйОбъект");
	КонецЕсли;
	
КонецФункции

// Получает контрагента торгового объекта.
//
// Параметры:
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - Торговый объект, для которого необходимо получить контрагента.
//
// Возвращаемое значение:
//   ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - контрагент торгового объекта.
//
Функция КонтрагентТорговогоОбъекта(ТорговыйОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТорговыйОбъект", ТорговыйОбъект);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.Контрагент КАК Контрагент
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект = &ТорговыйОбъект
	|	И НЕ КлассификаторОрганизацийЕГАИС.ПометкаУдаления
	|	И КлассификаторОрганизацийЕГАИС.Сопоставлено";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить()[0].Контрагент;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Получает торгового объект контрагента.
//
// Параметры:
//  ТорговыйОбъект - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - Контрагент.
//
// Возвращаемое значение:
//   ОпределяемыйТип.ТорговыйОбъектЕГАИС - Торговый объект.
//
Функция ТорговыйОбъектКонтрагента(Контрагент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.Контрагент = &Контрагент
	|	И НЕ КлассификаторОрганизацийЕГАИС.ПометкаУдаления
	|	И КлассификаторОрганизацийЕГАИС.Сопоставлено";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить()[0].ТорговыйОбъект;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает фактический адрес торгового объекта для чека ЕГАИС.
//
// Параметры:
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - ссылка на торговый объект для определения адреса.
//
// Возвращаемое значение:
//  Строка - адрес торгового объекта.
//
Функция АдресТорговогоОбъекта(ТорговыйОбъект) Экспорт
	
	Если ЗначениеЗаполнено(ТорговыйОбъект) Тогда
		Возврат УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
			ТорговыйОбъект,
			Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Возвращает признак использования торговых объектов для контрагентов.
//
// Возвращаемое значение:
//  Булево - признак использования торговых объектов.
//
Функция ИспользоватьТорговыеОбъектыКонтрагентов() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Проверяет наличие права создания поступления товаров у текущего пользователя.
//
// Возвращаемое значение:
//  Булево - Истина, если есть право создания поступления товаров, Ложь в обратном случае.
//
Функция ЕстьПравоСозданияПоступления() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Проверяет наличие права изменения поступления товаров у текущего пользователя.
//
// Возвращаемое значение:
//  Булево - Истина, если есть право изменения поступления товаров, Ложь в обратном случае.
//
Функция ЕстьПравоИзмененияПоступления() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает имя документа поступления товаров, который создается на основании входящей ТТН.
//
Функция ИмяДокументаПоступлениеТоваров() Экспорт
	
	Возврат "ПриходнаяНакладная";
	
КонецФункции

// Возвращает имя документа перемещения товаров, который создается на основании входящей ТТН.
//
Функция ИмяДокументаПеремещениеТоваров() Экспорт
	
	Возврат "ПеремещениеЗапасов";
	
КонецФункции

// Проверить сопоставление классификаторов
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ, для которого необходимо проверить соответствие классификаторов.
//  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор формы открытого документа.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   *ЕстьНеСопоставленныеТовары - Булево - Признак наличия несопоставленных товаров.
//   *НеСопоставленныеТовары - Строка - Адрес по временном хранилище.
//
Функция ПроверитьСопоставлениеКлассификаторовПрикладногоДокумента(ДокументСсылка, УникальныйИдентификатор) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьНеСопоставленныеТовары", Ложь);
	Результат.Вставить("НеСопоставленныеТовары", "");
	
	ИмяТаблицы = "Документ" + "." + ДокументСсылка.Метаданные().Имя + "." + "Товары";
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	ИмяТаблицы КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &ДокументСсылка
	|	И ТабличнаяЧасть.Номенклатура.АлкогольнаяПродукция
	|;
	|
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО СоответствиеНоменклатурыЕГАИС.Номенклатура   = Товары.Номенклатура
	|		 И СоответствиеНоменклатурыЕГАИС.Характеристика = Товары.Характеристика
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция ЕСТЬ NULL");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицы", ИмяТаблицы);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	НеСопоставленныеТовары = Запрос.Выполнить().Выгрузить();
	Результат.ЕстьНеСопоставленныеТовары = НеСопоставленныеТовары.Количество() > 0;
	
	Если Результат.ЕстьНеСопоставленныеТовары Тогда
		Результат.НеСопоставленныеТовары = ПоместитьВоВременноеХранилище(НеСопоставленныеТовары, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст запроса ТТН динамического списка, отображаемого в форме списка документов.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентЕГАИС - организация, по которой нужно отобрать документы,
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - торговый объект, по которому нужно отобрать документы,
//  ОжидаетсяОформление- Булево - если Истина, будут отобраны только документы, ожидающие оформления.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаТТН(Организация = Неопределено, ТорговыйОбъект = Неопределено, ОжидаетсяОформление = Ложь) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументТТНВходящаяЕГАИС.Ссылка,
	|	ДокументТТНВходящаяЕГАИС.ПометкаУдаления,
	|	ДокументТТНВходящаяЕГАИС.Номер,
	|	ДокументТТНВходящаяЕГАИС.Дата,
	|	ДокументТТНВходящаяЕГАИС.Проведен,
	|	ДокументТТНВходящаяЕГАИС.ТорговыйОбъект,
	|	ДокументТТНВходящаяЕГАИС.Организация,
	|	ДокументТТНВходящаяЕГАИС.Идентификатор,
	|	ДокументТТНВходящаяЕГАИС.ИдентификаторЕГАИС,
	|	ДокументТТНВходящаяЕГАИС.Упакована,
	|	ДокументТТНВходящаяЕГАИС.НомерТТН,
	|	ДокументТТНВходящаяЕГАИС.ДатаТТН,
	|	ДокументТТНВходящаяЕГАИС.ДатаОтгрузки,
	|	ДокументТТНВходящаяЕГАИС.Грузоотправитель,
	|	ДокументТТНВходящаяЕГАИС.Грузополучатель,
	|	ДокументТТНВходящаяЕГАИС.Поставщик,
	|	ЕСТЬNULL(ДокументТТНВходящаяЕГАИС.Поставщик.Контрагент, ДокументТТНВходящаяЕГАИС.Грузоотправитель.Контрагент) КАК ПоставщикКонтрагент,
	|	ДокументТТНВходящаяЕГАИС.Основание,
	|	ДокументТТНВходящаяЕГАИС.Комментарий,
	|	ДокументТТНВходящаяЕГАИС.ТипДоставки,
	|	ДокументТТНВходящаяЕГАИС.Перевозчик,
	|	ДокументТТНВходящаяЕГАИС.Автомобиль,
	|	ДокументТТНВходящаяЕГАИС.Прицеп,
	|	ДокументТТНВходящаяЕГАИС.Заказчик,
	|	ДокументТТНВходящаяЕГАИС.Водитель,
	|	ДокументТТНВходящаяЕГАИС.ПунктПогрузки,
	|	ДокументТТНВходящаяЕГАИС.ПунктРазгрузки,
	|	ДокументТТНВходящаяЕГАИС.Перенаправление,
	|	ДокументТТНВходящаяЕГАИС.Экспедитор,
	|	ДокументТТНВходящаяЕГАИС.СуммаДокумента,
	|	ДокументТТНВходящаяЕГАИС.МоментВремени,
	|	ДокументТТНВходящаяЕГАИС.ЕстьРасхождения,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваров.Ссылка ЕСТЬ NULL И ПеремещениеТоваров.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВведеноПоступление,
	|	ВЫБОР
	|		КОГДА НЕ ПеремещениеТоваров.Ссылка ЕСТЬ NULL 
	|			ТОГДА ПеремещениеТоваров.Ссылка
	|		КОГДА НЕ ПоступлениеТоваров.Ссылка ЕСТЬ NULL 
	|			ТОГДА ПоступлениеТоваров.Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ПриходнаяНакладная.ПустаяСсылка)
	|	КОНЕЦ КАК ПоступлениеТоваров,
	|	ВЫБОР
	|		КОГДА НЕ ПеремещениеТоваров.Ссылка ЕСТЬ NULL 
	|			ТОГДА ПеремещениеТоваров.Номер
	|		КОГДА НЕ ПоступлениеТоваров.Ссылка ЕСТЬ NULL 
	|			ТОГДА ПоступлениеТоваров.Номер
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПоступлениеТоваровПредставление,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваров.Ссылка ЕСТЬ NULL И ПеремещениеТоваров.Ссылка ЕСТЬ NULL
	|			И НЕ СтатусыДокументовЕГАИС.Статус В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаКПередаче),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаПереданВУТМ),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаОбрабатываетсяЕГАИС),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаОшибка))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено)
	|		КОГДА (НЕ ПоступлениеТоваров.Ссылка ЕСТЬ NULL ИЛИ НЕ ПеремещениеТоваров.Ссылка ЕСТЬ NULL)
	|			И НЕ СтатусыДокументовЕГАИС.Статус В(
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаКПередаче),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаПереданВУТМ),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаОбрабатываетсяЕГАИС),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаОшибка))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.Оформлено)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеТребуется)
	|	КОНЕЦ КАК ОформлениеПоступления,
	|	ВЫБОР
	|		КОГДА СтатусыДокументовЕГАИС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПустойСтатус,
	|
	|	СтатусыДокументовЕГАИС.Статус              КАК СтатусЕГАИС,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие1 КАК ДальнейшееДействиеЕГАИС1,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие2 КАК ДальнейшееДействиеЕГАИС2,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие3 КАК ДальнейшееДействиеЕГАИС3
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ДокументТТНВходящаяЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходнаяНакладная КАК ПоступлениеТоваров
	|		ПО ДокументТТНВходящаяЕГАИС.ДокументОснование = ПоступлениеТоваров.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеЗапасов КАК ПеремещениеТоваров
	|		ПО ДокументТТНВходящаяЕГАИС.ДокументОснование = ПеремещениеТоваров.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО (СтатусыДокументовЕГАИС.Документ = ДокументТТНВходящаяЕГАИС.Ссылка)
	|ГДЕ
	|	&УсловиеОтбора";
	
	УсловиеОтбора = "";
	Если ЗначениеЗаполнено(Организация) Тогда
		УсловиеОтбора = УсловиеОтбора + "ДокументТТНВходящаяЕГАИС.Организация = &Организация";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТорговыйОбъект) Тогда
		Если ЗначениеЗаполнено(УсловиеОтбора) Тогда
			УсловиеОтбора = УсловиеОтбора + " И ";
		КонецЕсли;
		УсловиеОтбора = УсловиеОтбора + "ДокументТТНВходящаяЕГАИС.ТорговыйОбъект = &ТорговыйОбъект";
	КонецЕсли;
	
	Если ОжидаетсяОформление Тогда
		Если ЗначениеЗаполнено(УсловиеОтбора) Тогда
			УсловиеОтбора = УсловиеОтбора + " И ";
		КонецЕсли;
		УсловиеОтбора = УсловиеОтбора +
		"(СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ТребующиеДействия))";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловиеОтбора) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбора", УсловиеОтбора);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбора", "ИСТИНА");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для формирования временной таблицы коэффициентов пересчета базовых единиц измерения
// номенклатуры в единицы ЕГАИС:
//   - для упакованного товара: коэффициент пересчета в штуки (бутылки)
//   - для неупакованного товара: коэффициент пересчета в декалитры.
// Временная таблица используется при проведении документов по регистру ОстаткиЕГАИС и при передаче данных в УТМ.
//
// Параметры:
//  ИмяТаблицыТовары - Строка - Имя таблицы с колонками: АлкогольнаяПродукция, Номенклатура, Характеристика.
//  ИмяВременнойТаблицы - Строка - Имя результирующей временной таблицы.
//  ДобавлятьРазделитель - Булево - Признак добавления разделителя запросов.
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ТекстЗапросаВТКоэффициентыПересчетаВЕдиницыЕГАИС(ИмяТаблицыТовары = "ВТТовары", ИмяВременнойТаблицы = "ВТКоэффициентыПересчетаВЕдиницыЕГАИС") Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.АлкогольнаяПродукция  КАК АлкогольнаяПродукция,
	|	Таблица.Номенклатура          КАК Номенклатура,
	|	Таблица.Характеристика        КАК Характеристика,
	|	Таблица.Серия                 КАК Серия,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА Таблица.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная) ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ) КАК ПроверятьОбъемДАЛ,
	|	МАКСИМУМ(ЕСТЬNULL(Таблица.Номенклатура.ОбъемДАЛ, 0)) КАК ОбъемДАЛ,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА Таблица.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная) ТОГДА
	|			ЕСТЬNULL(Таблица.Номенклатура.ОбъемДАЛ, 0)
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ) КАК Коэффициент
	|ПОМЕСТИТЬ ШаблонИмяВременнойТаблицы
	|ИЗ
	|	ШаблонТаблицаТовары КАК Таблица
	|СГРУППИРОВАТЬ ПО
	|	Таблица.АлкогольнаяПродукция,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Серия
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ШаблонТаблицаТовары",       ИмяТаблицыТовары);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ШаблонИмяВременнойТаблицы", ИмяВременнойТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Определяет, является ли номенклатура алкогольной маркируемой продукцией.
//
// Параметры:
//  Номенклатура  - ОпределяемыйТип.Номенклатура.
//
// Возвращаемое значение:
//   Булево   - Истина, если является.
//
Функция НоменклатураЯвляетсяАлкогольнойМаркируемойПродукцией(Номенклатура) Экспорт

	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ) КАК Маркируемый
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|		ПО Номенклатура.ВидАлкогольнойПродукции = ВидыАлкогольнойПродукции.Ссылка
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Маркируемый;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#Область МенюОтчеты

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
//
Процедура ДобавитьКомандуАнализРасхожденийПриПоступленииАлкогольнойПродукцииВТТН_ЕГАИС(КомандыОтчетов) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

// Заполняет в переданной таблице значений реквизиты: Крепость, ВидПродукции и Объем.
//
// Параметры:
//  ТаблицаНоменклатуры - ТаблицаЗначений - таблица номенклатуры с колонками: НомерСтроки, Номенклатура.
//
Процедура ЗаполнитьРеквизитыАлкогольнойПродукции(ТаблицаНоменклатуры) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура.Крепость КАК Крепость,
	|	Товары.Номенклатура.ВидАлкогольнойПродукции КАК ВидПродукции,
	|	ВЫРАЗИТЬ(Товары.Номенклатура.ОбъемДАЛ * 10 КАК ЧИСЛО(10, 3)) КАК Объем
	|ИЗ
	|	Товары КАК Товары");
	
	Запрос.УстановитьПараметр("Товары", ТаблицаНоменклатуры);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаНоменклатуры.Найти(Выборка.НомерСтроки, "НомерСтроки");
		Если СтрокаТаблицы <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка, "Крепость, ВидПродукции, Объем");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаСопоставлениеОрганизацийЕГАИСПоТТН() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ОрганизацияЕГАИС                                     КАК ОрганизацияЕГАИС,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.ИНН                                 КАК ИНН,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.КПП                                 КАК КПП,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.Наименование                        КАК Наименование,
	|	ПОДСТРОКА(ВложенныйЗапрос.ОрганизацияЕГАИС.НаименованиеПолное,1,255) КАК НаименованиеПолное,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.ТорговыйОбъект                      КАК ТорговыйОбъект,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.Контрагент                          КАК Контрагент,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.Сопоставлено                        КАК Сопоставлено
	|ПОМЕСТИТЬ ВтОрганизацииЕГАИС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТТНВходящаяЕГАИС.Грузоотправитель КАК ОрганизацияЕГАИС
	|	ИЗ
	|		Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|	ГДЕ
	|		ТТНВходящаяЕГАИС.Ссылка В(&СписокТТН)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТТНВходящаяЕГАИС.Грузополучатель
	|	ИЗ
	|		Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|	ГДЕ
	|		ТТНВходящаяЕГАИС.Ссылка В(&СписокТТН)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТТНВходящаяЕГАИС.Поставщик
	|	ИЗ
	|		Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|	ГДЕ
	|		ТТНВходящаяЕГАИС.Ссылка В(&СписокТТН)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.АлкогольнаяПродукция.Импортер = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)
	|				ТОГДА ТабличнаяЧасть.АлкогольнаяПродукция.Производитель
	|			ИНАЧЕ ТабличнаяЧасть.АлкогольнаяПродукция.Импортер
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ТТНВходящаяЕГАИС.Товары КАК ТабличнаяЧасть
	|	ГДЕ
	|		ТабличнаяЧасть.Ссылка В(&СписокТТН)) КАК ВложенныйЗапрос
	|ГДЕ
	|	НЕ (ВложенныйЗапрос.ОрганизацияЕГАИС = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка))
	|	И НЕ (ВложенныйЗапрос.ОрганизацияЕГАИС.СоответствуетОрганизации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтОрганизацииЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ВтОрганизацииЕГАИС.Наименование     КАК НаименованиеЕГАИС,
	|	Контрагенты1.Ссылка                 КАК Контрагент1,
	|	НЕОПРЕДЕЛЕНО                        КАК ТорговыйОбъект1,
	|	Контрагенты2.Ссылка                 КАК Контрагент2,
	|	НЕОПРЕДЕЛЕНО                        КАК ТорговыйОбъект2
	|ПОМЕСТИТЬ ВтСопоставления
	|ИЗ
	|	ВтОрганизацииЕГАИС КАК ВтОрганизацииЕГАИС
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты1
	|		ПО ВтОрганизацииЕГАИС.ИНН = Контрагенты1.ИНН
	|			И ВтОрганизацииЕГАИС.КПП = Контрагенты1.КПП
	|			И (НЕ Контрагенты1.ИНН = """")
	|			И (НЕ Контрагенты1.ПометкаУдаления)
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты2
	|		ПО ВтОрганизацииЕГАИС.ИНН = Контрагенты2.ИНН
	|			И (НЕ Контрагенты2.ИНН = """")
	|			И (НЕ Контрагенты2.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОрганизацииЕГАИС.ОрганизацияЕГАИС   КАК ОрганизацияЕГАИС,
	|	ОрганизацииЕГАИС.Наименование       КАК Наименование,
	|	ОрганизацииЕГАИС.ТорговыйОбъект     КАК ТорговыйОбъект,
	|	ОрганизацииЕГАИС.Контрагент         КАК Контрагент,
	|	ОрганизацииЕГАИС.Сопоставлено       КАК Сопоставлено,
	|	ОрганизацииЕГАИС.ИНН                КАК ИНН,
	|	ОрганизацииЕГАИС.КПП                КАК КПП,
	|	ОрганизацииЕГАИС.НаименованиеПолное КАК НаименованиеПолное
	|ИЗ
	|	ВтОрганизацииЕГАИС КАК ОрганизацииЕГАИС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сопоставления.ОрганизацияЕГАИС                                         КАК ОрганизацияЕГАИС,
	|	ЕстьNULL(Сопоставления.Контрагент1,     Сопоставления.Контрагент2)     КАК Контрагент,
	|	ЕстьNULL(Сопоставления.ТорговыйОбъект1, Сопоставления.ТорговыйОбъект2) КАК ТорговыйОбъект
	|ИЗ
	|	ВтСопоставления КАК Сопоставления
	|ГДЕ
	|	Сопоставления.Контрагент1 ЕСТЬ НЕ NULL
	|	ИЛИ Сопоставления.Контрагент2 ЕСТЬ НЕ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сопоставления.ОрганизацияЕГАИС  КАК ОрганизацияЕГАИС,
	|	Сопоставления.НаименованиеЕГАИС КАК НаименованиеЕГАИС
	|ИЗ
	|	ВтСопоставления КАК Сопоставления
	|ГДЕ
	|	Сопоставления.Контрагент1 ЕСТЬ NULL
	|	И Сопоставления.Контрагент2 ЕСТЬ NULL
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСопоставлениеНоменклатурыПоТТН() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Товары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&СписокТТН)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|ПОМЕСТИТЬ втАлкогольнаяПродукция
	|ИЗ
	|	втТовары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втАлкогольнаяПродукция.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СУММА(1) КАК Количество
	|ПОМЕСТИТЬ СопоставленоПозиций
	|ИЗ
	|	втАлкогольнаяПродукция КАК втАлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО (СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = втАлкогольнаяПродукция.АлкогольнаяПродукция)
	|ГДЕ
	|	НЕ СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	втАлкогольнаяПродукция.АлкогольнаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Товары.АлкогольнаяПродукция.Объем КАК Объем,
	|	Товары.АлкогольнаяПродукция.Крепость КАК Крепость,
	|	Товары.АлкогольнаяПродукция.Наименование КАК Наименование,
	|	ПОДСТРОКА(Товары.АлкогольнаяПродукция.НаименованиеПолное, 1, 255) КАК НаименованиеПолное,
	|	Товары.АлкогольнаяПродукция.ВидПродукции КАК ВидПродукции,
	|	Товары.АлкогольнаяПродукция.Производитель.Контрагент КАК ПроизводительИБ,
	|	Товары.АлкогольнаяПродукция.Импортер.Контрагент КАК ИмпортерИБ,
	|	Товары.АлкогольнаяПродукция.Производитель КАК Производитель,
	|	Товары.АлкогольнаяПродукция.Импортер КАК Импортер,
	|	ЕСТЬNULL(СопоставленоПозиций.Количество, 0) КАК Количество,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА СоответствиеНоменклатурыЕГАИС.Номенклатура
	|		ИНАЧЕ Товары.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА Товары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА СоответствиеНоменклатурыЕГАИС.Характеристика
	|		ИНАЧЕ Товары.Характеристика
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА Товары.Серия = """"
	|			ТОГДА СоответствиеНоменклатурыЕГАИС.Серия
	|		ИНАЧЕ Товары.Серия
	|	КОНЕЦ КАК Серия
	|ПОМЕСТИТЬ втДанныеТТН
	|ИЗ
	|	втТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СопоставленоПозиций КАК СопоставленоПозиций
	|		ПО (СопоставленоПозиций.АлкогольнаяПродукция = Товары.АлкогольнаяПродукция)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО Товары.АлкогольнаяПродукция = СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция
	|			И (СопоставленоПозиций.Количество = 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	СправочникНоменклатура.Наименование КАК Наименование,
	|	СправочникНоменклатура.ВидАлкогольнойПродукции КАК ВидАлкогольнойПродукции,
	|	СправочникНоменклатура.ПроизводительИмпортерАлкогольнойПродукции КАК ПроизводительИмпортер,
	|	СправочникНоменклатура.ОбъемДАЛ КАК ОбъемДАЛ,
	|	СправочникНоменклатура.Крепость КАК Крепость
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|ГДЕ
	|	СправочникНоменклатура.АлкогольнаяПродукция
	|	И НЕ СправочникНоменклатура.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеТТН.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	втДанныеТТН.Наименование КАК Наименование
	|ИЗ
	|	втДанныеТТН КАК втДанныеТТН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатура.Номенклатура КАК Номенклатура,
	|	втНоменклатура.Наименование КАК Наименование
	|ИЗ
	|	втНоменклатура КАК втНоменклатура";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСопоставлениеОрганизацийЕГАИСПоВходящимДанным() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(Товары.АлкогольнаяПродукция КАК Справочник.КлассификаторАлкогольнойПродукцииЕГАИС) КАК АлкогольнаяПродукция,
	|	Товары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ втТаблицаТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОрганизацииЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС
	|ПОМЕСТИТЬ втТаблицаОрганизацииЕГАИС
	|ИЗ
	|	&ОрганизацииЕГАИС КАК ОрганизацииЕГАИС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.ИНН КАК ИНН,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.КПП КАК КПП,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.Наименование КАК Наименование,
	|	ПОДСТРОКА(ВложенныйЗапрос.ОрганизацияЕГАИС.НаименованиеПолное, 1, 255) КАК НаименованиеПолное,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.Контрагент КАК Контрагент,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.Сопоставлено КАК Сопоставлено
	|ПОМЕСТИТЬ ВтОрганизацииЕГАИС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОрганизацииЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС
	|	ИЗ
	|		втТаблицаОрганизацииЕГАИС КАК ОрганизацииЕГАИС
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.АлкогольнаяПродукция.Импортер = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)
	|				ТОГДА ТабличнаяЧасть.АлкогольнаяПродукция.Производитель
	|			ИНАЧЕ ТабличнаяЧасть.АлкогольнаяПродукция.Импортер
	|		КОНЕЦ
	|	ИЗ
	|		втТаблицаТовары КАК ТабличнаяЧасть) КАК ВложенныйЗапрос
	|ГДЕ
	|	НЕ ВложенныйЗапрос.ОрганизацияЕГАИС = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)
	|	И НЕ ВложенныйЗапрос.ОрганизацияЕГАИС.СоответствуетОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтОрганизацииЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ВтОрганизацииЕГАИС.Наименование КАК НаименованиеЕГАИС,
	|	Контрагенты1.Ссылка КАК Контрагент1,
	|	НЕОПРЕДЕЛЕНО КАК ТорговыйОбъект1,
	|	Контрагенты2.Ссылка КАК Контрагент2,
	|	НЕОПРЕДЕЛЕНО КАК ТорговыйОбъект2
	|ПОМЕСТИТЬ ВтСопоставления
	|ИЗ
	|	ВтОрганизацииЕГАИС КАК ВтОрганизацииЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты1
	|		ПО ВтОрганизацииЕГАИС.ИНН = Контрагенты1.ИНН
	|			И ВтОрганизацииЕГАИС.КПП = Контрагенты1.КПП
	|			И (НЕ Контрагенты1.ИНН = """")
	|			И (НЕ Контрагенты1.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты2
	|		ПО ВтОрганизацииЕГАИС.ИНН = Контрагенты2.ИНН
	|			И (НЕ Контрагенты2.ИНН = """")
	|			И (НЕ Контрагенты2.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОрганизацииЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ОрганизацииЕГАИС.Наименование КАК Наименование,
	|	ОрганизацииЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект,
	|	ОрганизацииЕГАИС.Контрагент КАК Контрагент,
	|	ОрганизацииЕГАИС.Сопоставлено КАК Сопоставлено,
	|	ОрганизацииЕГАИС.ИНН КАК ИНН,
	|	ОрганизацииЕГАИС.КПП КАК КПП,
	|	ОрганизацииЕГАИС.НаименованиеПолное КАК НаименованиеПолное
	|ИЗ
	|	ВтОрганизацииЕГАИС КАК ОрганизацииЕГАИС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сопоставления.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ЕСТЬNULL(Сопоставления.Контрагент1, Сопоставления.Контрагент2) КАК Контрагент,
	|	ЕСТЬNULL(Сопоставления.ТорговыйОбъект1, Сопоставления.ТорговыйОбъект2) КАК ТорговыйОбъект
	|ИЗ
	|	ВтСопоставления КАК Сопоставления
	|ГДЕ
	|	(Сопоставления.Контрагент1 ЕСТЬ НЕ NULL 
	|			ИЛИ Сопоставления.Контрагент2 ЕСТЬ НЕ NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сопоставления.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	Сопоставления.НаименованиеЕГАИС КАК НаименованиеЕГАИС
	|ИЗ
	|	ВтСопоставления КАК Сопоставления
	|ГДЕ
	|	Сопоставления.Контрагент1 ЕСТЬ NULL
	|	И Сопоставления.Контрагент2 ЕСТЬ NULL";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСопоставлениеНоменклатурыПоВходящимДанным() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(Товары.АлкогольнаяПродукция КАК Справочник.КлассификаторАлкогольнойПродукцииЕГАИС) КАК АлкогольнаяПродукция,
	|	Товары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|ПОМЕСТИТЬ втАлкогольнаяПродукция
	|ИЗ
	|	втТовары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втАлкогольнаяПродукция.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СУММА(1) КАК Количество
	|ПОМЕСТИТЬ СопоставленоПозиций
	|ИЗ
	|	втАлкогольнаяПродукция КАК втАлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО (СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = втАлкогольнаяПродукция.АлкогольнаяПродукция)
	|ГДЕ
	|	НЕ СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	втАлкогольнаяПродукция.АлкогольнаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Товары.АлкогольнаяПродукция.Объем КАК Объем,
	|	Товары.АлкогольнаяПродукция.Крепость КАК Крепость,
	|	Товары.АлкогольнаяПродукция.Наименование КАК Наименование,
	|	ПОДСТРОКА(Товары.АлкогольнаяПродукция.НаименованиеПолное, 1, 255) КАК НаименованиеПолное,
	|	Товары.АлкогольнаяПродукция.ВидПродукции КАК ВидПродукции,
	|	Товары.АлкогольнаяПродукция.Производитель.Контрагент КАК ПроизводительИБ,
	|	Товары.АлкогольнаяПродукция.Импортер.Контрагент КАК ИмпортерИБ,
	|	Товары.АлкогольнаяПродукция.Производитель КАК Производитель,
	|	Товары.АлкогольнаяПродукция.Импортер КАК Импортер,
	|	ЕСТЬNULL(СопоставленоПозиций.Количество, 0) КАК Количество,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА СоответствиеНоменклатурыЕГАИС.Номенклатура
	|		ИНАЧЕ Товары.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА Товары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА СоответствиеНоменклатурыЕГАИС.Характеристика
	|		ИНАЧЕ Товары.Характеристика
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА Товары.Серия = """"
	|			ТОГДА СоответствиеНоменклатурыЕГАИС.Серия
	|		ИНАЧЕ Товары.Серия
	|	КОНЕЦ КАК Серия
	|ПОМЕСТИТЬ втДанныеТТН
	|ИЗ
	|	втТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СопоставленоПозиций КАК СопоставленоПозиций
	|		ПО (СопоставленоПозиций.АлкогольнаяПродукция = Товары.АлкогольнаяПродукция)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО Товары.АлкогольнаяПродукция = СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция
	|			И (СопоставленоПозиций.Количество = 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	СправочникНоменклатура.Наименование КАК Наименование,
	|	СправочникНоменклатура.ВидАлкогольнойПродукции КАК ВидАлкогольнойПродукции,
	|	СправочникНоменклатура.ПроизводительИмпортерАлкогольнойПродукции КАК ПроизводительИмпортер,
	|	СправочникНоменклатура.ОбъемДАЛ КАК ОбъемДАЛ,
	|	СправочникНоменклатура.Крепость КАК Крепость
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|ГДЕ
	|	СправочникНоменклатура.АлкогольнаяПродукция
	|	И НЕ СправочникНоменклатура.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеТТН.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	втДанныеТТН.Наименование КАК Наименование
	|ИЗ
	|	втДанныеТТН КАК втДанныеТТН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатура.Номенклатура КАК Номенклатура,
	|	втНоменклатура.Наименование КАК Наименование
	|ИЗ
	|	втНоменклатура КАК втНоменклатура";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура СформироватьДанныеДокументаОснования(ДокументОснование, ДокументЕГАИС, ТаблицаДанных) Экспорт
	
	
КонецПроцедуры

// Обрабатывает таблицу штриховых кодов и получает для каждого из них данные в информационной базе.
// На входе имеется таблица, в которой заполнены только колонки "Штриховой код" и "Количество".
// В процедуре устанавливается значение "Истина" в одной из других колонок.
//
// Параметры:
//  ТаблицаНеАкцизныеМарки               - ТаблицаЗначение - имеет слудующие колонки:
//   * ШтриховойКод                      - Строка                              - штриховой код полученный с ТСД.
//   * Количество                        - Число                               - сколько раз был считан данный штрихкод.
//   * ШтрихКодУпаковки                  - Справочник.ШтрихкодыУпаковокТоваров - ссылка на имеющуюся в базе упаковку.
//   * ЭтоИмеющаясяВБазеУпаковка         - Булево                              - если это имеющаяся в базе упаковка.
//   * ЭтоУпаковка                       - Булево                              - если это новая упаковка.
//   * ЭтоПартионнаяАлкогольнаяПродукция - Булево                              - если это штрихкод партионной алкогольной продукции
//   * ЭтоПрочаяНоменклатура             - Булево                              - если это штрихкод не идентифицирует алкогольную продукцию.
//
Процедура ОпределитьТипыШтриховыхКодовНеМаркируемойПродукцииТСД(ТаблицаНеАкцизныеМарки) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтриховыеКоды.ШтриховойКод КАК ШтриховойКод,
	|	ШтриховыеКоды.Количество КАК Количество,
	|	ШтриховыеКоды.ШтрихКодУпаковки КАК ШтрихКодУпаковки,
	|	ШтриховыеКоды.ЭтоУпаковка КАК ЭтоУпаковка,
	|	ШтриховыеКоды.ЭтоИмеющаясяВБазеУпаковка КАК ЭтоИмеющаясяВБазеУпаковка,
	|	ШтриховыеКоды.ЭтоПартионнаяАлкогольнаяПродукция КАК ЭтоПартионнаяАлкогольнаяПродукция,
	|	ШтриховыеКоды.ЭтоПрочаяНоменклатура КАК ЭтоПрочаяНоменклатура
	|ПОМЕСТИТЬ ШтриховыеКоды
	|ИЗ
	|	&ШтриховыеКоды КАК ШтриховыеКоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтриховыеКоды.ШтриховойКод КАК ШтриховойКод,
	|	ШтриховыеКоды.Количество КАК Количество,
	|	ЕСТЬNULL(ШтрихкодыУпаковокТоваров.Ссылка, ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)) КАК ШтрихКодУпаковки,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.Ссылка ЕСТЬ NULL
	|				И ШтрихкодыУпаковокТоваров.Ссылка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоУпаковка,
	|	ВЫБОР
	|		КОГДА ШтрихкодыУпаковокТоваров.ТипУпаковки <> ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоИмеющаясяВБазеУпаковка,
	|	ВЫБОР
	|		КОГДА ВидыАлкогольнойПродукции.Маркируемый = ЛОЖЬ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПартионнаяАлкогольнаяПродукция,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.АлкогольнаяПродукция = ЛОЖЬ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПрочаяНоменклатура
	|ИЗ
	|	ШтриховыеКоды КАК ШтриховыеКоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ШтриховыеКоды.ШтриховойКод = ШтрихкодыНоменклатуры.Штрихкод
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (ШтрихкодыНоменклатуры.Номенклатура = СправочникНоменклатура.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|		ПО (СправочникНоменклатура.ВидАлкогольнойПродукции = ВидыАлкогольнойПродукции.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО ШтриховыеКоды.ШтриховойКод = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода";
	
	Запрос.УстановитьПараметр("ШтриховыеКоды", ТаблицаНеАкцизныеМарки);
	
	ТаблицаНеАкцизныеМарки = Запрос.Выполнить().Выгрузить();

КонецПроцедуры

// Устанавливает параметры выбора номенклатуры.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой нужно установить параметры выбора,
//  ИмяПоляВвода - Строка - имя поля ввода номенклатуры.
//
Процедура УстановитьПараметрыВыбораНоменклатуры(Форма, ИмяПоляВвода = "ТоварыНоменклатура") Экспорт
	
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПанельОбменСЕГАИС

Функция ТекстЗапросаАктПостановкиНаБалансЕГАИСОформите() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Документ) * КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Основание) КАК КоличествоДокументов
	|ПОМЕСТИТЬ ВремТаблВРегистры1И2
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОприходованиеЗапасов КАК ОприходованиеИзлишковТоваров
	|		ПО СтатусыОформленияДокументовЕГАИС.Основание = ОприходованиеИзлишковТоваров.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО (КлассификаторОрганизацийЕГАИС.Ссылка В (&ОрганизацияЕГАИС))
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Документ = ЗНАЧЕНИЕ(Документ.АктПостановкиНаБалансЕГАИС.ПустаяСсылка)
	|	И СтатусыОформленияДокументовЕГАИС.СтатусОформления В (ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено), ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично), ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры))
	|	И ОприходованиеИзлишковТоваров.Ссылка ЕСТЬ НЕ NULL 
	|	И (ОприходованиеИзлишковТоваров.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
	|			ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	0.5 КАК КоличествоДокументов
	|ПОМЕСТИТЬ ВремТаблВРегистр3
	|ИЗ
	|	РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|ГДЕ
	|	АкцизныеМаркиЕГАИС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.КПостановкеНаБаланс)
	|	И (АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС В (&ОрганизацияЕГАИС)
	|			ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|	И НЕ АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВРегистры1И2.КоличествоДокументов, 0) + ЕСТЬNULL(ВРегистр3.КоличествоДокументов, 0) КАК КоличествоДокументов
	|ИЗ
	|	ВремТаблВРегистры1И2 КАК ВРегистры1И2
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВремТаблВРегистр3 КАК ВРегистр3
	|		ПО (ИСТИНА)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАктСписанияЕГАИСОформите() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Документ) * КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Основание) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеЗапасов КАК СписаниеНедостачТоваров
	|		ПО СтатусыОформленияДокументовЕГАИС.Основание = СписаниеНедостачТоваров.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ПО СтатусыОформленияДокументовЕГАИС.Основание = ОтчетОРозничныхПродажах.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО (КлассификаторОрганизацийЕГАИС.Ссылка В (&ОрганизацияЕГАИС))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаВРегистр2ЕГАИС КАК ПередачаВРегистр2ЕГАИС
	|		ПО СтатусыОформленияДокументовЕГАИС.Основание = ПередачаВРегистр2ЕГАИС.Ссылка
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Документ = ЗНАЧЕНИЕ(Документ.АктСписанияЕГАИС.ПустаяСсылка)
	|	И СтатусыОформленияДокументовЕГАИС.СтатусОформления В (ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено), ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично), ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры))
	|	И (СписаниеНедостачТоваров.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ ОтчетОРозничныхПродажах.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ ПередачаВРегистр2ЕГАИС.Ссылка ЕСТЬ НЕ NULL )
	|	И (СписаниеНедостачТоваров.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
	|			ИЛИ ОтчетОРозничныхПродажах.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
	|			ИЛИ ПередачаВРегистр2ЕГАИС.ОрганизацияЕГАИС В (&ОрганизацияЕГАИС)
	|			ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВозвратИзРегистра2ЕГАИСОформите() Экспорт
	
	ТекстЗапроса ="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Документ) 
	|	* КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Основание) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|		ПО СтатусыОформленияДокументовЕГАИС.Основание = ТТНИсходящаяЕГАИС.Ссылка
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Документ = ЗНАЧЕНИЕ(Документ.ВозвратИзРегистра2ЕГАИС.ПустаяСсылка)
	|	И СтатусыОформленияДокументовЕГАИС.СтатусОформления В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено), 
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично), 
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры))
	|	И (ТТНИсходящаяЕГАИС.Ссылка ЕСТЬ НЕ NULL)
	|	И (ТТНИсходящаяЕГАИС.Грузоотправитель В(&ОрганизацияЕГАИС)
	|			ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПередачаВРегистр2ЕГАИСОформите() Экспорт
	
	ТекстЗапроса ="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Документ) 
	|	* КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Основание) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|		ПО СтатусыОформленияДокументовЕГАИС.Основание = ТТНВходящаяЕГАИС.Ссылка
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Документ = ЗНАЧЕНИЕ(Документ.ПередачаВРегистр2ЕГАИС.ПустаяСсылка)
	|	И СтатусыОформленияДокументовЕГАИС.СтатусОформления В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено), 
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично), 
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры))
	|	И (ТТНВходящаяЕГАИС.Ссылка ЕСТЬ НЕ NULL)
	|	И (ТТНВходящаяЕГАИС.Грузополучатель В(&ОрганизацияЕГАИС)
	|			ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТТНИсходящаяЕГАИСОформите() Экспорт
	
	ТекстЗапроса ="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Документ) 
	|	* КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Основание) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная КАК ВозвратТоваровПоставщику
	|		ПО СтатусыОформленияДокументовЕГАИС.Основание = ВозвратТоваровПоставщику.Ссылка
	|			И (ВозвратТоваровПоставщику.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеЗапасов КАК ПеремещениеТоваров
	|		ПО СтатусыОформленияДокументовЕГАИС.Основание = ПеремещениеТоваров.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО (КлассификаторОрганизацийЕГАИС.Ссылка В (&ОрганизацияЕГАИС))
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Документ = ЗНАЧЕНИЕ(Документ.ТТНИсходящаяЕГАИС.ПустаяСсылка)
	|	И СтатусыОформленияДокументовЕГАИС.СтатусОформления В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено), 
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично), 
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры))
	|	И (ВозвратТоваровПоставщику.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ ПеремещениеТоваров.Ссылка ЕСТЬ НЕ NULL)
	|	И (ВозвратТоваровПоставщику.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
	|			ИЛИ ПеремещениеТоваров.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
	|			ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЧекЕГАИСОформите() Экспорт
	
	ТекстЗапроса ="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Документ) 
	|	* КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Основание) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Документ = ЗНАЧЕНИЕ(Документ.ЧекЕГАИС.ПустаяСсылка)
	|	И СтатусыОформленияДокументовЕГАИС.СтатусОформления В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено), 
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично), 
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры))
	|	И (Выразить(СтатусыОформленияДокументовЕГАИС.Документ КАК Документ.ЧекЕГАИС).ОрганизацияЕГАИС В(&ОрганизацияЕГАИС)
	|			ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЧекЕГАИСВозвратОформите() Экспорт
	
	ТекстЗапроса ="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Документ) 
	|	* КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Основание) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Документ = ЗНАЧЕНИЕ(Документ.ЧекЕГАИСВозврат.ПустаяСсылка)
	|	И СтатусыОформленияДокументовЕГАИС.СтатусОформления В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено), 
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично), 
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры))
	|	И (Выразить(СтатусыОформленияДокументовЕГАИС.Документ КАК Документ.ЧекЕГАИСВозврат).ОрганизацияЕГАИС В(&ОрганизацияЕГАИС)
	|			ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Статусы

Процедура РассчитатьСтатусОформленияАктПостановкиНаБалансЕГАИС(Источник, Отказ) Экспорт
	
	ИнтеграцияЕГАИСУНФ.РассчитатьСтатусОформленияДокументаЕГАИС(Источник, Отказ);
	
КонецПроцедуры

Функция ЗапросСтатусаОформленияАктПостановкиНаБалансЕГАИС(ДокументОснование) Экспорт
	
	Возврат ИнтеграцияЕГАИСУНФ.ЗапросСтатусаОформленияЕГАИС(ДокументОснование, Метаданные.Документы.АктПостановкиНаБалансЕГАИС);
	
КонецФункции


Процедура РассчитатьСтатусОформленияАктСписанияЕГАИС(Источник, Отказ) Экспорт
	
	ИнтеграцияЕГАИСУНФ.РассчитатьСтатусОформленияДокументаЕГАИС(Источник, Отказ);
	
КонецПроцедуры

Функция ЗапросСтатусаОформленияАктСписанияЕГАИС(ДокументОснование) Экспорт
	
	Возврат ИнтеграцияЕГАИСУНФ.ЗапросСтатусаОформленияЕГАИС(ДокументОснование, Метаданные.Документы.АктСписанияЕГАИС);
	
КонецФункции


Процедура РассчитатьСтатусОформленияВозвратИзРегистра2ЕГАИС(Источник, Отказ) Экспорт
	
	ИнтеграцияЕГАИСУНФ.РассчитатьСтатусОформленияДокументаЕГАИС(Источник, Отказ);
	
КонецПроцедуры

Функция ЗапросСтатусаОформленияВозвратИзРегистра2ЕГАИС(ДокументОснование) Экспорт
	
	Возврат ИнтеграцияЕГАИСУНФ.ЗапросСтатусаОформленияЕГАИС(ДокументОснование, Метаданные.Документы.ВозвратИзРегистра2ЕГАИС);
	
КонецФункции


Процедура РассчитатьСтатусОформленияПередачаВРегистр2ЕГАИС(Источник, Отказ) Экспорт
	
	ИнтеграцияЕГАИСУНФ.РассчитатьСтатусОформленияДокументаЕГАИС(Источник, Отказ);
	
КонецПроцедуры

Функция ЗапросСтатусаОформленияПередачаВРегистр2ЕГАИС(ДокументОснование) Экспорт
	
	Возврат ИнтеграцияЕГАИСУНФ.ЗапросСтатусаОформленияЕГАИС(ДокументОснование, Метаданные.Документы.ПередачаВРегистр2ЕГАИС);
	
КонецФункции


Процедура РассчитатьСтатусОформленияТТНИсходящаяЕГАИС(Источник, Отказ) Экспорт
	
	ИнтеграцияЕГАИСУНФ.РассчитатьСтатусОформленияДокументаЕГАИС(Источник, Отказ);
	
КонецПроцедуры

Функция ЗапросСтатусаОформленияТТНИсходящаяЕГАИС(ДокументОснование) Экспорт
	
	Возврат ИнтеграцияЕГАИСУНФ.ЗапросСтатусаОформленияЕГАИС(ДокументОснование, Метаданные.Документы.ТТНИсходящаяЕГАИС);
	
КонецФункции


Процедура РассчитатьСтатусОформленияТТНВходящаяЕГАИС(Источник, Отказ) Экспорт
	
	ИнтеграцияЕГАИСУНФ.РассчитатьСтатусОформленияДокументаЕГАИС(Источник, Отказ);
	
КонецПроцедуры

Функция ЗапросСтатусаОформленияТТНВходящаяЕГАИС(ДокументОснование) Экспорт
	
	Возврат ИнтеграцияЕГАИСУНФ.ЗапросСтатусаОформленияЕГАИС(ДокументОснование, Метаданные.Документы.ТТНВходящаяЕГАИС);
	
КонецФункции


Процедура РассчитатьСтатусОформленияЧекЕГАИС(Источник, Отказ) Экспорт
	
	ИнтеграцияЕГАИСУНФ.РассчитатьСтатусОформленияДокументаЕГАИС(Источник, Отказ);
	
КонецПроцедуры

Функция ЗапросСтатусаОформленияЧекЕГАИС(ДокументОснование) Экспорт
	
	Возврат ИнтеграцияЕГАИСУНФ.ЗапросСтатусаОформленияЕГАИС(ДокументОснование, Метаданные.Документы.ЧекЕГАИС);
	
КонецФункции


Процедура РассчитатьСтатусОформленияЧекЕГАИСВозврат(Источник, Отказ) Экспорт
	
	ИнтеграцияЕГАИСУНФ.РассчитатьСтатусОформленияДокументаЕГАИС(Источник, Отказ);
	
КонецПроцедуры

Функция ЗапросСтатусаОформленияЧекЕГАИСВозврат(ДокументОснование) Экспорт
	
	Возврат ИнтеграцияЕГАИСУНФ.ЗапросСтатусаОформленияЕГАИС(ДокументОснование, Метаданные.Документы.ЧекЕГАИСВозврат);
	
КонецФункции


Функция ЭтоНеиспользуемыйСтатусДокумента(Статус) Экспорт
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область Серии

// Создает структуру для передачи параметров заполнения серий в функцию ЗаполнитьСгенерироватьСерии
//
// Возвращаемое значение:
//   Структура - Структура с необходимыми свойствами
//
Функция ПараметрыЗаполненияСерий() Экспорт

	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("ОрганизацияЕГАИС",			Неопределено);
	ПараметрыЗаполнения.Вставить("ЗаполнятьБезЗапросаСправок",	Ложь);
	ПараметрыЗаполнения.Вставить("ПараметрыУказанияСерий",		Неопределено);
	ПараметрыЗаполнения.Вставить("Склад",						Неопределено);
	
	Возврат ПараметрыЗаполнения;

КонецФункции // ПараметрыЗаполненияСерий()

// Создает структуру возвращаемых значений функции ЗаполнитьСгенерироватьСерии
//
// Возвращаемое значение:
//   Структура - Структура с необходимыми свойствами
//
Функция РезультатЗаполненияСерий() Экспорт
	
	
КонецФункции

// Заполняет свойство "Склад" в структуре параметров заполнения серий
//
// Параметры:
// 	Объект - ДокументОбъект, ДанныеФормыКоллекция - объект, содержащий значение склада
//  ПараметрыЗаполнения - Структура - Структура параметров заполнения серий
//
Процедура ЗаполнитьПараметрЗаполненияСклад(Объект, ПараметрыЗаполнения) Экспорт

	
КонецПроцедуры // ЗаполнитьПараметрЗаполненияСклад()

// Заполняет реквизит "Серия" в товарной табличной части
//
// Параметры:
// 		ТабличнаяЧасть - ДанныеФормыКоллекция, ТабличнаяЧасть - Товарная табличная часть документа
// 		ВыделенныеСтроки - Массив - Массив выделенных строк
// 		ПараметрыЗаполнения - Структура - Структура параметров заполнения
// 			Обязательные поля:
// 				"ОрганизацияЕГАИС" - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация
// 				"ЗаполнятьБезЗапросаСправок" - Булево - Принудительное заполнение серий без запроса справок 1
// 				"ПараметрыУказанияСерий" - Структура - Параметры указания серий, формируется в модулях менеджеров документов
// 				"Склад" - СправочникСсылка.Склады - склад
// 			Необязательные поля:
// 				"ПоляЗаполнения" - Строка - Строка с перечислением заполняемых полей в таблице. Значение по умолчанию: "Серия".
// 				"КолонкиПоЗначению" - Структура - Структура для передачи в качестве параметра "КолонкиПоЗначению" в функцию "ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений"
// 				"ДругиеИменаКолонок" - Структура - Структура для передачи в качестве параметра "НовыеИменаКолонок" в функцию "ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений"
// 		СтруктураДействий - Структура - Стандартная структура действий со строками для вызова "ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ"
// 		
// Возвращаемое значение:
//   Структура - Структура с результатом выполнения функции.
//
Функция ЗаполнитьСгенерироватьСерии(ТабличнаяЧасть, ВыделенныеСтроки = Неопределено, ПараметрыЗаполнения = Неопределено, СтруктураДействий = Неопределено) Экспорт
	
	
КонецФункции

#КонецОбласти


// Функция - Поле коэффициент пересчета неупакованной продукции
//
// Параметры:
//  ИмяТаблицы - Строка - имя таблицы запроса-источника
// Возвращаемое значение:
//  Строка - Поле коэффициента пересчета неупакованной алкогольной продукции,
//  при вызове заполнения библиотечных документов
//
Функция ПолеКоэффициентПересчетаНеупакованнойПродукции(ИмяТаблицы = "ТабличнаяЧасть") Экспорт
	
	
	Возврат "1";

КонецФункции

#Область УстаревшиеОбработчикиПрошлыхРедакций

#КонецОбласти


