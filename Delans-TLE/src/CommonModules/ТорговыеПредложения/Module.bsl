////////////////////////////////////////////////////////////////////////////////
// Подсистема "Торговые предложения".
// ОбщийМодуль.ТорговыеПредложения.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытий

// Процедура, вызываемая из обработчика события формы ПриСозданииНаСервере.
// Для формы настройки выгрузки торгового предложения программно формирует элементы
// настройки торговых предложений (гиперссылки, статус).
//
// Параметры:
//  Форма - УправляемаяФорма - из обработчика события которой происходит вызов процедуры.
//  ЭлементИнтерфейса - ЭлементФормы - элемент формы.
//
Процедура ИнициализацияЭлементовФормы(Знач Форма, ЭлементИнтерфейса) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть") Тогда
		Возврат;
	КонецЕсли;
	
	ТипТорговоеПредложение = Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип;
	Если ТипТорговоеПредложение.СодержитТип(ТипЗнч(Форма.Объект.Ссылка)) Тогда
		
		Если Не ПравоНастройкиТорговыхПредложений() Тогда
			Возврат;
		КонецЕсли;
		
		ДобавитьЭлементыУправленияФормыТорговыеПредложения(Форма, ЭлементИнтерфейса);
		ДекорацияФормы = Форма.Элементы.ТорговыеПредложенияСостояниеОбмена;
		
		ОбновитьДекорациюСостоянияПубликации(Форма.Объект.Ссылка, ДекорацияФормы, Форма.ТорговыеПредложенияПубликовать);
		Форма.Элементы.ТорговыеПредложенияОткрытьНастройкиПубликации.Видимость = Форма.ТорговыеПредложенияПубликовать;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновления элемента формы состояния обмена.
// Изменяет заголовок, цвет, гиперссылку для декорации формы.
//
// Параметры:
//  Ссылка - СправочникСсылка - ссылка на определяемый тип ТорговыеПредложения.
//  ДекорацияФормы - ДекорацияФормы - элемент формы Декорация.
//  РежимПубликации - Булево - признак публикации торгового предложения.
//
Процедура ОбновитьДекорациюСостоянияПубликации(Ссылка, ДекорацияФормы, РежимПубликации = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТорговоеПредложение", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияСинхронизацииТорговыеПредложения.ДатаСинхронизации     КАК ДатаСинхронизации,
	|	СостоянияСинхронизацииТорговыеПредложения.Состояние             КАК Состояние,
	|	СостоянияСинхронизацииТорговыеПредложения.ОписаниеОшибки        КАК ОписаниеОшибки,
	|	СостоянияСинхронизацииТорговыеПредложения.ДействиеСинхронизации КАК ДействиеСинхронизации
	|ИЗ
	|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизацииТорговыеПредложения
	|ГДЕ
	|	СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение = &ТорговоеПредложение";
	Выборка = Запрос.Выполнить().Выбрать();
	
	РежимПубликации = Ложь;
	Если Выборка.Следующий() Тогда
		РежимПубликации = Истина;
		Если Выборка.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.Синхронизировано Тогда
			ДекорацияФормы.Заголовок = СтрШаблон("%1 (%2)",
				НСтр("ru = 'Опубликовано'"),
				Формат(Выборка.ДатаСинхронизации, "ДЛФ=DT"));
			ДекорацияФормы.ЦветТекста  = ЦветаСтиля.РезультатУспехЦвет;
			ДекорацияФормы.Гиперссылка = Ложь;
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСинхронизация Тогда
			Если Выборка.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.Удаление Тогда
				ДекорацияФормы.Заголовок = НСтр("ru = 'Удаление публикации. Требуется синхронизация'");
				РежимПубликации          = Ложь;
			Иначе
				ДекорацияФормы.Заголовок = НСтр("ru = 'Требуется синхронизация'");
			КонецЕсли;
			ДекорацияФормы.ЦветТекста  = ЦветаСтиля.ЦветГиперссылкиБЭД;
			ДекорацияФормы.Гиперссылка = Истина;
		Иначе
			ДекорацияФормы.Заголовок   = НСтр("ru = 'Ошибка синхронизации'");
			ДекорацияФормы.ЦветТекста  = ЦветаСтиля.ПоясняющийОшибкуТекст;
			ДекорацияФормы.Гиперссылка = Истина;
		КонецЕсли;
	Иначе
		ДекорацияФормы.Заголовок = "";
	КонецЕсли;
		
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, из обработчика события которой происходит вызов процедуры.
//  Источник - СправочникОбъект - источник события.
//  Организация - СправочникСсылка - организация торгового предложения.
//  ЭлементИнтерфейса - ЭлементФормы - группа элементов формы.
//  Отказ - Булево - признак отказа от выполнения действия.
//
Процедура ПередЗаписьюНаСервере(Знач Форма, Знач Источник, Знач Организация, Знач ЭлементИнтерфейса, Отказ) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть") Тогда
		Возврат;
	КонецЕсли;
	
	Если Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип.СодержитТип(ТипЗнч(Источник.Ссылка)) Тогда
		ГруппаТорговыеПредложения = ЭлементИнтерфейса.ПодчиненныеЭлементы.Найти("ГруппаТорговыеПредложения");
		Если ГруппаТорговыеПредложения = Неопределено
			ИЛИ ГруппаТорговыеПредложения.ПодчиненныеЭлементы.Найти("ТорговыеПредложенияПубликовать") = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Форма.ТорговыеПредложенияПубликовать Тогда
			ТекстСообщения = "";
			Если Не ЗначениеЗаполнено(Источник.Организация) Тогда
				ТекстСообщения = НСтр("ru = 'Организация не указана. Публикация торговых предложений невозможна.'");
			ИначеЕсли Не БизнесСеть.ОрганизацияЗарегистрирована(Источник.Организация) Тогда
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Организация %1 не зарегистрирована в сервисе 1С:Бизнес-сеть. Публикация торговых предложений отменена.'"),
					Источник.Организация);
			КонецЕсли;
			Если Не ПустаяСтрока(ТекстСообщения) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
					Источник.Ссылка, "Организация", "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, из обработчика события которой происходит вызов процедуры.
//  ТекущийОбъект - СправочникОбъект - торговое предложений.
//  Организация - СправочникСсылка - организация торгового предложения.
//  ЭлементИнтерфейса - ЭлементФормы - группа элементов формы.
//
Процедура ПослеЗаписиНаСервере(Знач Форма, Знач ТекущийОбъект, Знач Организация, Знач ЭлементИнтерфейса = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть") Тогда
		Возврат;
	КонецЕсли;

	Если Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип.СодержитТип(ТипЗнч(ТекущийОбъект.Ссылка)) Тогда
		
		Если ЭлементИнтерфейса.ПодчиненныеЭлементы.Найти("ГруппаТорговыеПредложения") = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Источник = ТекущийОбъект.Ссылка;
		ЭлементСостояниеОбмена     = Форма.Элементы.ТорговыеПредложенияСостояниеОбмена;
		ЭлементНастройкиПубликации = Форма.Элементы.ТорговыеПредложенияОткрытьНастройкиПубликации;
		Публиковать                = Форма.ТорговыеПредложенияПубликовать;
		
		СостоянияСинхронизации = РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения;
		Выборка = СостоянияСинхронизации.Выбрать(Новый Структура("ТорговоеПредложение", Источник));
		МенеджерЗаписи = РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТорговоеПредложение = Источник;
		ЕстьЗапись = Ложь;
		Если Выборка.Следующий() Тогда
			МенеджерЗаписи.Организация = Выборка.Организация;
			МенеджерЗаписи.Прочитать();
			ЕстьЗапись = Истина;
		Иначе
			МенеджерЗаписи.Организация = Организация;
		КонецЕсли;
		
		Если Публиковать Тогда
			Статус = НСтр("ru = 'Требуется синхронизация'");
		ИначеЕсли ЕстьЗапись Тогда
			Статус = НСтр("ru = 'Удаление публикации. Требуется синхронизация'");
		Иначе
			Статус = "";
		КонецЕсли;
		
		Если Не Публиковать И ЕстьЗапись Тогда
			Если МенеджерЗаписи.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.Добавление Тогда // отменяем синхронизацию
				МенеджерЗаписи.Удалить();
				Статус = "";
			Иначе
				МенеджерЗаписи.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.Удаление;
				МенеджерЗаписи.Состояние             = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСинхронизация;
				МенеджерЗаписи.ДатаСинхронизации     = '00010101';
				МенеджерЗаписи.Записать();
			КонецЕсли;
		ИначеЕсли Публиковать Тогда
			МенеджерЗаписи.ТорговоеПредложение = Источник;
			МенеджерЗаписи.Организация         = Организация;
			МенеджерЗаписи.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСинхронизация;
			МенеджерЗаписи.ДействиеСинхронизации = ?(ЕстьЗапись,
				Перечисления.ДействияСинхронизацииТорговыеПредложения.Изменение,
				Перечисления.ДействияСинхронизацииТорговыеПредложения.Добавление);
			МенеджерЗаписи.Записать(ЕстьЗапись);
		КонецЕсли;
		
		Если ЭлементСостояниеОбмена <> Неопределено И (ЕстьЗапись ИЛИ Публиковать) Тогда
			ЭлементСостояниеОбмена.Заголовок = Строка(МенеджерЗаписи.Состояние);
			ЭлементСостояниеОбмена.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиБЭД;
			ЭлементСостояниеОбмена.Гиперссылка     = Истина;
			ЭлементНастройкиПубликации.Видимость   = Не ПустаяСтрока(Статус) И Публиковать;
			ЭлементСостояниеОбмена.Доступность     = Истина;
			ЭлементНастройкиПубликации.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик создания подсказок формы.
//
// Параметры:
//  Форма			 - УправляемаяФорма - форма, в которой создаются подсказки.
//  ГруппаЭлементов	 - ГруппаЭлементов - группа элементов формы, в которой размещаются подсказки.
//
Процедура ПриСозданииПодсказокФормы(Форма, ГруппаЭлементов) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть") Тогда
		Возврат;
	КонецЕсли;
	
	// Добавление реквизита формы для хранения подсказки.
	Картинка = Форма.Элементы.Добавить("Подключаемый_КартинкаТорговыеПредложения", Тип("ДекорацияФормы"), ГруппаЭлементов);
	Картинка.Вид       = ВидДекорацииФормы.Картинка;
	Картинка.Картинка  = БиблиотекаКартинок.Идея;
	Картинка.Видимость = Ложь;
	
	Декорация = Форма.Элементы.Добавить("Подключаемый_ПодсказкаТорговыеПредложения", Тип("ДекорацияФормы"), ГруппаЭлементов);
	Декорация.АвтоМаксимальнаяШирина = Ложь;
	Декорация.УстановитьДействие("Нажатие", "Подключаемый_ПодсказкиБизнесСетьНажатие");
	Декорация.Гиперссылка = Истина;
	Декорация.Видимость   = Ложь;
	
	НовыйРеквизит = Новый РеквизитФормы("Подключаемый_ТорговыеПредложенияПодсказка",
		Новый ОписаниеТипов("Неопределено"),, НСтр("ru = 'Подсказка торговых предложений'"));
	
	// Добавление реквизита формы для хранения подсказки.
	НовыеРеквизитыФормы = Новый Массив;
	НовыеРеквизитыФормы.Добавить(НовыйРеквизит);
	Форма.ИзменитьРеквизиты(НовыеРеквизитыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// ЭлектронноеВзаимодействие

// См. ЭлектронноеВзаимодействие.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.10.23";
	Обработчик.Процедура = "РегистрыСведений.СоответствиеРеквизитовБизнесСеть.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("39a14352-c603-4697-9953-0f69f0adc720");
	Обработчик.Комментарий = НСтр("ru = 'Обновление сопоставления номенклатуры 1С:Бизнес-сеть'");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СоответствиеРеквизитовБизнесСеть.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "РегистрыСведений.СоответствиеРеквизитовБизнесСеть.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.СоответствиеРеквизитовБизнесСеть, РегистрСведений.СоответствиеЗначенийРеквизитовБизнесСеть";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.СоответствиеРеквизитовБизнесСеть, РегистрСведений.СоответствиеЗначенийРеквизитовБизнесСеть";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.СоответствиеРеквизитовБизнесСеть, РегистрСведений.СоответствиеЗначенийРеквизитовБизнесСеть";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ТорговыеПредложения

// Синхронизация торговых предложений с сервисом.
// Экспортная процедура, запускается по регламентному заданию.
//
// Параметры:
//   ПараметрыПроцедуры - Структура - параметры процедуры, не заполнять.
//   АдресРезультата - УникальныйИдентификатор - адрес результат в хранилище, не заполнять.
//
Процедура СинхронизацияТорговыхПредложений(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт
	
	// &ЗамерПроизводительности
	ОписаниеЗамера = ЭлектронноеВзаимодействиеСлужебный.НачатьЗамерВремени(
		"ОбщийМодуль.ТорговыеПредложения.СинхронизацияТорговыхПредложений");
	КоличествоПовторяющихсяДанных = 0;

	СинхронизироватьТорговыеПредложения(КоличествоПовторяющихсяДанных);

	// &ЗамерПроизводительности
	ЭлектронноеВзаимодействиеСлужебный.ЗакончитьЗамерВремени(ОписаниеЗамера, Макс(1, КоличествоПовторяющихсяДанных /100)); // Пакет по 100 записей.
	
КонецПроцедуры

// Поиск торговых предложений в сервисе по отбору.
//
// Параметры:
//   ПараметрыПоиска - Структура - параметры получения торговых предложений из сервиса.
//    * КодВалюты - Число - код валюты для отбора. По умолчанию 643 (Рубль).
//    * ИдентификаторКатегории - Строка - идентификатор категории рубрикатора для отбора.
//    * НазваниеТовара - Строка - наименование товара для отбора.
//    * Артикул - Строка - артикул товара.
//    * ШтрихКоды - Массив - штрихкоды для отбора.
//    * Поставщик - ОпределяемыйТип.Контрагент - отбор по контрагенту.
//    * ПоставщикИдентификатор - Строка - значение ИНН/КПП к для отбора.
//    * ПоставщикНаименование - Строка - наименование контрагента для отбора.
//    * ЦенаОт - Число - нижний порог цены для отбора.
//    * ЦенаДо - Число - верхний порог цены для отбора.
//    * РежимСортировки - Строка - название режима сортировки, можно использовать следующие названия:
//      ** СортировкаНаименованиеВозрастание - по названию товара, возрастание.
//      ** СортировкаНаименованиеУбывание - по названию товара, убывание.
//      ** СортировкаЦенаВозрастание - по цене, возрастание.
//      ** СортировкаЦенаУбывание - по цене, убывание.
//    * Атрибуты - Массив - значения атрибутов товара для отбора, элементы в структуре:
//      ** ИдентификаторАтрибута - Строка - идентификатор атрибута товара в рубрикаторе, обязательно заполнение.
//      ** ИдентификаторЗначения - Строка - идентификатор значения атрибута товара в рубрикаторе.
//      ** Значение - Строка - значение атрибута товара. Следует передавать, в случае если значения не сопоставлены или не могут
//                             быть сопоставлены, например числовое значение.
//   АдресРезультата - УникальныйИдентификатор - адрес результата в хранилище таблицы с торговыми предложениями.
//   Отказ - Булево - признак ошибки при выполнении.
//
Процедура НайтиТорговыеПредложенияПоОтбору(Знач ПараметрыПоиска, Знач АдресРезультата) Экспорт
	
	ОбъектПоиска = ФабрикаXDTO.Создать(ТипXDTO("ProductSearch"));
	
	Если ПараметрыПоиска.Свойство("ВалютаКод") Тогда
		ОбъектПоиска.currency = ПараметрыПоиска.ВалютаКод;
	ИначеЕсли ПараметрыПоиска.Свойство("Валюта")
		И ЗначениеЗаполнено(ПараметрыПоиска.Валюта) Тогда
		ОбъектПоиска.currency = КодВалюты(ПараметрыПоиска.Валюта);
	КонецЕсли;
	ОбъектПоиска.currencyConversion = Истина;

	Если ПараметрыПоиска.Свойство("ИдентификаторКатегории") И Не ПустаяСтрока(ПараметрыПоиска.ИдентификаторКатегории) Тогда
		ОбъектПоиска.categoryId	= ПараметрыПоиска.ИдентификаторКатегории;
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("НазваниеТовара") И Не ПустаяСтрока(ПараметрыПоиска.НазваниеТовара) Тогда
		ОбъектПоиска.productName = ПараметрыПоиска.НазваниеТовара;
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("Артикул") И Не ПустаяСтрока(ПараметрыПоиска.Артикул) Тогда
		ОбъектПоиска.vendorCode = Лев(ПараметрыПоиска.Артикул, 50); // Ограничение 50 символов.
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("ШтрихКоды")
		И ЗначениеЗаполнено(ПараметрыПоиска.ШтрихКоды)
		И ТипЗнч(ПараметрыПоиска.ШтрихКоды) = Тип("Массив") Тогда
		
		Для каждого ШтрихКод Из ПараметрыПоиска.ШтрихКоды Цикл
			ОбъектПоиска.barcodes.Добавить(ШтрихКод);
		КонецЦикла;
	КонецЕсли;
	
	ОбъектКонтрагент = ФабрикаXDTO.Создать(ТипXDTO("Vendor"));
	ОтборПоПоставщику = Ложь;
	Если ПараметрыПоиска.Свойство("Поставщик") И ЗначениеЗаполнено(ПараметрыПоиска.Поставщик) Тогда
		РеквизитыПоставщика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыПоиска.Поставщик, "ИНН, КПП");
		Если СтрДлина(РеквизитыПоставщика.ИНН) < 10 Тогда
			Возврат;
		КонецЕсли;
		
		Отказ = Ложь;
		Идентификаторы = БизнесСеть.ИдентификаторыУчастника(РеквизитыПоставщика.ИНН, РеквизитыПоставщика.КПП,, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;;
		
		ОбъектКонтрагент.inn = Идентификаторы.ИНН;
		ОбъектКонтрагент.kpp = Идентификаторы.КПП;
		
		ОтборПоПоставщику = Истина;
	ИначеЕсли ПараметрыПоиска.Свойство("ПоставщикИдентификатор") И СтрДлина(ПараметрыПоиска.ПоставщикИдентификатор) >= 10 Тогда
		МассивИдентификаторов = СтрРазделить(ПараметрыПоиска.ПоставщикИдентификатор, "/");
		ОбъектКонтрагент.inn = МассивИдентификаторов[0];
		Если МассивИдентификаторов.Количество() > 1 Тогда
			ОбъектКонтрагент.kpp = МассивИдентификаторов[1];	
		КонецЕсли;
		ОтборПоПоставщику = Истина;
	ИначеЕсли ПараметрыПоиска.Свойство("ПоставщикНаименование") И СтрДлина(ПараметрыПоиска.ПоставщикНаименование) >= 3 Тогда
		// Если в наименовании число, то ищем поставщика по ИНН.
		ПоставщикНаименование = ПараметрыПоиска.ПоставщикНаименование;
		ТипЧисло = Новый ОписаниеТипов("Число");
		ЗначениеЧисло = ТипЧисло.ПривестиЗначение(ПоставщикНаименование);
		Если ЗначениеЧисло <> 0 И СтрДлина(ПоставщикНаименование) >= 10 И СтрДлина(ПоставщикНаименование) <= 12 Тогда
			ОбъектКонтрагент.inn = XMLСтрока(ЗначениеЧисло);
		Иначе
			ОбъектКонтрагент.title = ПоставщикНаименование;
		КонецЕсли;
		ОтборПоПоставщику = Истина;
	КонецЕсли;
	
	Если ОтборПоПоставщику Тогда
		ОбъектПоиска.vendors.Добавить(ОбъектКонтрагент);
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("ЦенаОт") И ПараметрыПоиска.ЦенаОт <> 0 Тогда
		ТипЦена = ТипXDTO("MoneyType");
		ОбъектЦена = ФабрикаXDTO.Создать(ТипXDTO("MoneyType"), ПараметрыПоиска.ЦенаОт);
		ОбъектПоиска.Установить("minPrice", ПараметрыПоиска.ЦенаОт);
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("ЦенаДо") И ПараметрыПоиска.ЦенаДо <> 0 Тогда
		ОбъектЦена = ФабрикаXDTO.Создать(ТипXDTO("MoneyType"), ПараметрыПоиска.ЦенаДо);
		ОбъектПоиска.Установить("maxPrice", ПараметрыПоиска.ЦенаДо);
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("РежимСортировки") Тогда
		ОбъектСортировка = ФабрикаXDTO.Создать(ТипXDTO("Sort"));
		Если ПараметрыПоиска.РежимСортировки = "СортировкаНаименованиеВозрастание" Тогда
			ОбъектСортировка.Установить("name",     "name");
			ОбъектСортировка.Установить("ascending", Истина);
		ИначеЕсли ПараметрыПоиска.РежимСортировки = "СортировкаНаименованиеУбывание" Тогда
			ОбъектСортировка.Установить("name",      "name");
			ОбъектСортировка.Установить("ascending", Ложь);
		ИначеЕсли ПараметрыПоиска.РежимСортировки = "СортировкаЦенаВозрастание" Тогда
			ОбъектСортировка.Установить("name",      "price");
			ОбъектСортировка.Установить("ascending", Истина);
		ИначеЕсли ПараметрыПоиска.РежимСортировки = "СортировкаЦенаУбывание" Тогда
			ОбъектСортировка.Установить("name",      "price");
			ОбъектСортировка.Установить("ascending", Ложь);
		КонецЕсли;
		ОбъектПоиска.sortings.Добавить(ОбъектСортировка);
	КонецЕсли;
	
	// Поиск по региону.
	ОбъектРегион = ФабрикаXDTO.Создать(ТипXDTO("RegionFilter"));
	Если ПараметрыПоиска.Свойство("РегионРежимОтбора") И ТипЗнч(ПараметрыПоиска.РегионРежимОтбора) = Тип("Число") Тогда
		ОбъектРегион.regionMode = ПараметрыПоиска.РегионРежимОтбора;
		Если ПараметрыПоиска.РегионРежимОтбора = 2 И ПараметрыПоиска.Свойство("РегионЗначенияПолей") Тогда // Отбор по указанному региону.
			ОбъектРегион.regions.Добавить(ПоляXDTOРегионаКонтактнойИнформацииСервиса(ПараметрыПоиска.РегионЗначенияПолей));
		КонецЕсли;
	КонецЕсли;
	
	// Поиск по способу доставки.
	Если ПараметрыПоиска.Свойство("ВозможенСамовывоз") Тогда
		ОбъектРегион.pickup = ПараметрыПоиска.ВозможенСамовывоз;
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("ВозможнаДоставка") Тогда
		ОбъектРегион.delivery = ПараметрыПоиска.ВозможнаДоставка;
	КонецЕсли;
	ОбъектПоиска.regionFilter = ОбъектРегион;
	
	Если ПараметрыПоиска.Свойство("Атрибуты") Тогда
		Для каждого Атрибут Из ПараметрыПоиска.Атрибуты Цикл
			ОбъектАтрибуты = ФабрикаXDTO.Создать(ТипXDTO("Attribute"));
			ОбъектАтрибуты.attributeId = Атрибут.ИдентификаторАтрибута;
			Если Атрибут.Свойство("ИдентификаторЗначения") Тогда
				ОбъектАтрибуты.valueId = Атрибут.ИдентификаторЗначения;
			ИначеЕсли Атрибут.Свойство("Значение") Тогда
				ОбъектАтрибуты.value = Атрибут.Значение;
			КонецЕсли;
			ОбъектПоиска.attributeFilters.Добавить(ОбъектАтрибуты);
		КонецЦикла;
	КонецЕсли;

	Данные = ОбъектXDTOВСтрокуJSON(ОбъектПоиска);
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Данные", Данные);
	Отказ = Ложь;
	ПараметрыКоманды = ПараметрыКомандыПоискТорговыхПредложенийПоСтроке(ПараметрыМетода, Отказ);
	Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	Если Отказ ИЛИ Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	СписокВалют = Новый Соответствие;
	
	РезультатПоиска = ОписаниеРезультатаПоискаТорговыхПредложений();
	Для каждого ДанныеСервиса Из Результат Цикл
		
		Если ТипЗнч(ДанныеСервиса) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = РезультатПоиска.Добавить();
		ДанныеСервиса.Свойство("id",          НоваяСтрока.ПредложениеИдентификатор);
		ДанныеСервиса.Свойство("name",        НоваяСтрока.ТоварНаименование);
		ДанныеСервиса.Свойство("description", НоваяСтрока.Описание);
		ДанныеСервиса.Свойство("vendorCode",  НоваяСтрока.Артикул);
		ДанныеСервиса.Свойство("unit",        НоваяСтрока.ЕдиницаИзмерения);
		ДанныеСервиса.Свойство("feature",     НоваяСтрока.Характеристика);
		
		Если Не ДанныеСервиса.Свойство("priceConverted")
			ИЛИ Не ЗначениеЗаполнено(ДанныеСервиса.priceConverted) Тогда
			НоваяСтрока.Цена = -1; // Режим запроса цены.
		Иначе
			НоваяСтрока.Цена  = ДанныеСервиса.priceConverted / 100; // Данные в сервисе хранятся в копейках.
		КонецЕсли;
		
		ДанныеСервисаПоставщик = Неопределено;
		ДанныеСервиса.Свойство("vendor", ДанныеСервисаПоставщик);
		Если ДанныеСервисаПоставщик <> Неопределено Тогда
			ДанныеСервисаПоставщик.Свойство("title", НоваяСтрока.ПоставщикНаименование);
			ДанныеСервисаПоставщик.Свойство("inn",   НоваяСтрока.ПоставщикИНН);
			ДанныеСервисаПоставщик.Свойство("kpp",   НоваяСтрока.ПоставщикКПП);
			НоваяСтрока.ПоставщикИдентификатор = НоваяСтрока.ПоставщикИНН + "/" + НоваяСтрока.ПоставщикКПП;
		КонецЕсли;
		
		КодВалюты = Неопределено;
		ДанныеСервиса.Свойство("currency", КодВалюты);
		Если СписокВалют[КодВалюты] = Неопределено Тогда
			СписокВалют.Вставить(КодВалюты, Справочники.Валюты.НайтиПоКоду(ДанныеСервиса.currency));
		КонецЕсли;
		НоваяСтрока.Валюта = СписокВалют[КодВалюты];
		
		// Срок поставки.
		СрокПоставки = Неопределено;
		ДанныеСервиса.Свойство("deliveryTime", СрокПоставки);
		Если СрокПоставки = Неопределено Тогда
			НоваяСтрока.СрокПоставки = -1;
		Иначе
			НоваяСтрока.СрокПоставки = СрокПоставки;
		КонецЕсли;
		
		ДанныеСервиса.Свойство("basicUnit",     НоваяСтрока.ЕдиницаИзмеренияКод);
		ДанныеСервиса.Свойство("remainderHint", НоваяСтрока.Остаток);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(РезультатПоиска, АдресРезультата);
	
КонецПроцедуры

// Поиск торговых предложений в сервисе по списку товаров.
//
// Параметры:
//   ПараметрыПоиска - Структура - параметры по которым надо получить торговые предложения из сервиса.
//    * Товары - Массив, ТаблицаЗначений - товары которые надо найти в сервисе, состав свойств структур/колонок:
//      ** Наименование - Строка - наименование искомого товара.
//      ** Характеристика - Строка - наименование характеристики товара.
//      ** Артикул - Строка - артикул товара.
//      ** ШтрихКоды - Массив - массив штрихкодов по которым надо искать товар.
//      ** ИдентификаторКатегории - Строка - идентификатор категории (в сервисе 1С:Рубрикатор) в которой надо искать.
//      ** ЕдиницаИзмеренияКод - Строка - код ОКЕИ базовой единицы измерения товара.
//      ** Числитель - Число - количество в базовой единице измерения.
//      ** Знаменатель - Число - количество в текущей единице измерения.
//      ** ИдентификаторКатегории - Строка - идентификатор категории (в сервисе 1С:Рубрикатор) в которой надо искать.
//    * МаксимальныйСрокПоставки - Число - срок доставки в днях при превышении которого предложение не будет считаться оптимальным.
//    * ПревышениеМинимальнойЦены - Число - максимальное отклонение в процентах от минимальной цены при котором предложение не будет считаться оптимальным.
//    * ОграничениеТорговыхПредложений - Число - максимальное количество поставщиков по которым вернуть предложения.
//    * КодВалюты - Число - код валюты в которой ищутся цены. По умолчанию 643 (Рубль).
//    * ПоискПоНаименованию - Булево - признак того, что поиск будет осуществляться по наименованию.
//    * ПоискПоХарактеристике - Булево - признак того, что поиск будет осуществляться по характеристике.
//    * ПоискПоАртикулу - Булево - признак того, что поиск будет осуществляться по артикулу.
//    * ПоискПоШтрихКоду - Булево - признак того, что поиск будет осуществляться по штрихкоду.
//   АдресРезультата - УникальныйИдентификатор - адрес результат в хранилище, кода будут помещены таблицы:
//    * ТаблицаПоставщиков - ТаблицаЗначений - таблица поставщиков отсортированная по мере убывания оптимальности предложений
//    * ТаблицаРезультата - ТаблицаЗначений - таблица с найденными торговыми предложениями.
//   Отказ - Булево - признак ошибки в процедуре.
//
Процедура НайтиТорговыеПредложенияПоСпискуТоваров(Знач ПараметрыПоиска, Знач АдресРезультата) Экспорт
	
	Если ПараметрыПоиска.Свойство("Товары") = Ложь Или ПараметрыПоиска.Товары.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектПоиска = ФабрикаXDTO.Создать(ТипXDTO("ProductListSearch"));
	
	Если ПараметрыПоиска.Свойство("МаксимальныйСрокПоставки") Тогда
		ОбъектПоиска.maxDeliveryTime = ПараметрыПоиска.МаксимальныйСрокПоставки;
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("ПревышениеМинимальнойЦены") Тогда
		ОбъектПоиска.maxOptimalPriceExcess = ПараметрыПоиска.ПревышениеМинимальнойЦены;
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("ОграничениеТорговыхПредложений") Тогда
		ОбъектПоиска.maxCount = ПараметрыПоиска.ОграничениеТорговыхПредложений;
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("ВалютаКод") Тогда
		ОбъектПоиска.currency = ПараметрыПоиска.ВалютаКод;
	Иначе
		ОбъектПоиска.currency = 643; // По умолчанию рубли.
	КонецЕсли;
	ОбъектПоиска.currencyConversion = Истина;
	
	// Поиск по региону.
	Если ПараметрыПоиска.Свойство("РегионРежимОтбора") И ТипЗнч(ПараметрыПоиска.РегионРежимОтбора) = Тип("Число") Тогда
		ОбъектРегион = ФабрикаXDTO.Создать(ТипXDTO("RegionFilter"));
		ОбъектРегион.regionMode = ПараметрыПоиска.РегионРежимОтбора;
		Если ПараметрыПоиска.РегионРежимОтбора = 2 И ПараметрыПоиска.Свойство("РегионЗначенияПолей") Тогда // Отбор по указанному региону
			ОбъектРегион.regions.Добавить(ПоляXDTOРегионаКонтактнойИнформацииСервиса(ПараметрыПоиска.РегионЗначенияПолей));
		КонецЕсли;
		Если ПараметрыПоиска.Свойство("ВозможенСамовывоз") Тогда
			ОбъектРегион.pickup = ПараметрыПоиска.ВозможенСамовывоз;
		КонецЕсли; 
		Если ПараметрыПоиска.Свойство("ВозможнаДоставка") Тогда
			ОбъектРегион.delivery = ПараметрыПоиска.ВозможнаДоставка;
		КонецЕсли;
		ОбъектПоиска.regionFilter = ОбъектРегион;
	КонецЕсли;
	
	МассивТоваров = ТоварыДляПоискаПоСпискуXDTO(ПараметрыПоиска);
	Для каждого ЗначениеМассива Из МассивТоваров Цикл
		ОбъектПоиска.listSearch.Добавить(ЗначениеМассива);
	КонецЦикла;
	
	Если ОбъектПоиска.listSearch.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОбъектПоиска.Проверить();
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка формирования запроса.'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Формирование запроса'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения, "БизнесСеть");
		Возврат;
	КонецПопытки;
	
	Отказ = Ложь;
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Данные", ОбъектXDTOВСтрокуJSON(ОбъектПоиска));
	ПараметрыКоманды = ПараметрыКомандыПоискТорговыхПредложенийПоСписку(ПараметрыМетода, Отказ);
	ДанныеСервиса = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ ИЛИ Не ЗначениеЗаполнено(ДанныеСервиса) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПоставщиков = Новый ТаблицаЗначений;
	ТаблицаПоставщиков.Колонки.Добавить("Наименование");
	ТаблицаПоставщиков.Колонки.Добавить("ИНН");
	ТаблицаПоставщиков.Колонки.Добавить("КПП");
	ТаблицаПоставщиков.Колонки.Добавить("Идентификатор");
	
	Для каждого СтрокаПоставщика Из ДанныеСервиса.vendors Цикл
		НовыйПоставщик = ТаблицаПоставщиков.Добавить();
		СтрокаПоставщика.Свойство("inn",   НовыйПоставщик.ИНН);
		СтрокаПоставщика.Свойство("kpp",   НовыйПоставщик.КПП);
		СтрокаПоставщика.Свойство("title", НовыйПоставщик.Наименование);
		НовыйПоставщик.Идентификатор = НовыйПоставщик.ИНН
			+ ?(ПустаяСтрока(НовыйПоставщик.КПП),"", "_" + НовыйПоставщик.КПП);
	КонецЦикла;
	
	ТаблицаРезультата = ОписаниеРезультатаПоискаТорговыхПредложенийПоСписку();
	Для каждого СтрокаТовара Из ДанныеСервиса.offers Цикл
		
		НоваяСтрока = ТаблицаРезультата.Добавить();
		
		// Общие данные сервис.а
		СтрокаТовара.Свойство("index",           НоваяСтрока.ИндексСтроки);
		СтрокаТовара.Свойство("bestPrice",       НоваяСтрока.ЛучшаяЦена);
		СтрокаТовара.Свойство("bestDelivery",    НоваяСтрока.ЛучшийСрок);
		СтрокаТовара.Свойство("minPrice",        НоваяСтрока.МинимальнаяЦена);
		СтрокаТовара.Свойство("maxPrice",        НоваяСтрока.МаксимальнаяЦена);
		СтрокаТовара.Свойство("minDeliveryTime", НоваяСтрока.МинимальныйСрокПоставки);
		СтрокаТовара.Свойство("maxDeliveryTime", НоваяСтрока.МаксимальныйСрокПоставки);
		СтрокаТовара.Свойство("amountProducts",  НоваяСтрока.КоличествоПредложений);
		
		// Получение сведений о товаре.
		Товар = Неопределено;
		Если Не СтрокаТовара.Свойство("product", Товар) ИЛИ ТипЗнч(Товар) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		Товар.Свойство("id",   НоваяСтрока.ПредложениеИдентификатор);
		Товар.Свойство("name", НоваяСтрока.Наименование);
		Товар.Свойство("unit", НоваяСтрока.Упаковка);
		
		СрокПоставки = -1; // По умолчанию срок поставки не определен, значение -1.
		Товар.Свойство("deliveryTime", СрокПоставки);
		Если СрокПоставки = Неопределено Тогда
			СрокПоставки = -1;
		КонецЕсли;
		НоваяСтрока.СрокПоставки = СрокПоставки;
		
		// Получение поставщика.
		Поставщик = Неопределено;
		Если Не Товар.Свойство("vendor", Поставщик) Тогда
			Продолжить;
		КонецЕсли;
		Поставщик.Свойство("title", НоваяСтрока.Поставщик);
		Поставщик.Свойство("inn",   НоваяСтрока.ПоставщикИНН);
		Поставщик.Свойство("kpp",   НоваяСтрока.ПоставщикКПП);
		НоваяСтрока.ПоставщикИдентификатор   = НоваяСтрока.ПоставщикИНН
			+ ?(ПустаяСтрока(НоваяСтрока.ПоставщикКПП),"","_" + НоваяСтрока.ПоставщикКПП);
			
		// Получение цены.
		Если Не Товар.Свойство("priceConverted")
			ИЛИ Не ЗначениеЗаполнено(Товар.priceConverted) Тогда
			НоваяСтрока.Цена = -1; // Цена по запросу.
		Иначе
			НоваяСтрока.Цена = Товар.priceConverted / 100;
		КонецЕсли;
		
		// Получение НДС.
		Если Товар.Свойство("campaign") И ТипЗнч(Товар.campaign) = Тип("Структура") Тогда
			Товар.campaign.Свойство("saleWithNds", НоваяСтрока.ЦенаВключаетНДС);
		КонецЕсли;
		СтавкаНДС = Неопределено;
		Товар.Свойство("nds", СтавкаНДС);
		ТорговыеПредложенияПереопределяемый.ПолучитьЗначениеСтавкиНДС(СтавкаНДС, НоваяСтрока.СтавкаНДС);
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаПоставщиков", ТаблицаПоставщиков);
	Результат.Вставить("ТаблицаРезультата",  ТаблицаРезультата);
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Возвращает структуру таблицы, в которой будут возвращены найденные торговые предложения.
//
// Параметры:
//   Идентификатор - Строка - Идентификатор торгового предложения.
//   НаборДанных - Структура - Структура определяющая список свойств которые будут получены.
//   Отказ - Булево - Признак того, что в процедуре возникли ошибки.
//
// Возвращаемое значение:
//   Структура - структура данных торгового предложения.
//
Функция ПрочитатьТорговоеПредложение(Идентификатор, Валюта = Неопределено, НаборДанных = Неопределено, Отказ = Ложь) Экспорт
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Идентификатор", Идентификатор);
	ПараметрыМетода.Вставить("КодВалюты",     КодВалюты(Валюта));
	ПараметрыКоманды = ПараметрыКомандыПрочитатьТорговоеПредложение(ПараметрыМетода, Отказ);
	ДанныеСервиса    = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ ИЛИ ДанныеСервиса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДанныеСервиса.Свойство("categoryId") И ДанныеСервиса.categoryId <> Неопределено Тогда
		
		ИдентификаторКатегории = ДанныеСервиса.categoryId;
		
		Если ТипЗнч(НаборДанных) = Тип("Структура") И НаборДанных.Свойство("Характеристики") Тогда
			Если ДанныеСервиса.Свойство("attributes") И ДанныеСервиса.attributes <> Неопределено Тогда
				
				ОтказПриПолученииСпискаХарактеристикКатегории = Ложь;
				
				СписокХарактеристикКатегории = Новый Структура;
				
				ПараметрыМетода = Новый Структура;
				ПараметрыМетода.Вставить("ИдентификаторКатегории", ИдентификаторКатегории);
					
				ПараметрыКоманды = ПараметрыКомандыПолучитьСписокХарактеристикКатегории(ПараметрыМетода, Отказ);
				СписокХарактеристикКатегории = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);	
				
				Если Не ОтказПриПолученииСпискаХарактеристикКатегории
					И СписокХарактеристикКатегории <> Неопределено
					И ТипЗнч(СписокХарактеристикКатегории) = Тип("Массив") Тогда
					
					ИменаХарактеристикКатегории = Новый Соответствие;
					ТипыХарактеристикКатегории  = Новый Соответствие;
					
					Для каждого ХарактеристикаКатегории Из СписокХарактеристикКатегории Цикл
						ПредставлениеХарактеристики = ХарактеристикаКатегории.title
							+ ?(Не ПустаяСтрока(ХарактеристикаКатегории.unitCode), ", "
							+ ХарактеристикаКатегории.unitCode, "");
						ИдентификаторХарактеристики = ?(ТипЗнч(ХарактеристикаКатегории.id) = Тип("Строка"), ХарактеристикаКатегории.id,
							Формат(ХарактеристикаКатегории.id, "ЧГ="));
						ИменаХарактеристикКатегории.Вставить(ИдентификаторХарактеристики, ПредставлениеХарактеристики);
						ТипыХарактеристикКатегории.Вставить(ИдентификаторХарактеристики, ХарактеристикаКатегории.type);
					КонецЦикла;
					
					Характеристики = Новый ТаблицаЗначений;
					Характеристики.Колонки.Добавить("Название");
					Характеристики.Колонки.Добавить("Значение");
					
					Для каждого Атрибут Из ДанныеСервиса.attributes Цикл
						
						ИдентификаторХарактеристики = Атрибут.attributeId;
						
						НаименованиеХарактеристики = ИменаХарактеристикКатегории.Получить(ИдентификаторХарактеристики);
						Если НаименованиеХарактеристики = Неопределено Тогда
							// Неактуальный идентификатор характеристики позиции торгового предложения.
							Продолжить;
						КонецЕсли;
						
						ТипХарактеристикКатегории = ТипыХарактеристикКатегории.Получить(ИдентификаторХарактеристики);
						
						Если Атрибут.Свойство("valueId")
							И Атрибут.valueId <> Неопределено Тогда
							
							ОтказПриПолученииЗначенияХарактеристики = Ложь;
							ЗначениеХарактеристики = Новый Структура;
							ПараметрыМетода = Новый Структура;
							ПараметрыМетода.Вставить("ИдентификаторЗначенияХарактеристики", Атрибут.valueId);
							ПараметрыКоманды = ПараметрыКомандыПолучитьЗначениеХарактеристики(ПараметрыМетода, Отказ);
							ЗначениеХарактеристики = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, ОтказПриПолученииЗначенияХарактеристики);
							
							Если Не ОтказПриПолученииЗначенияХарактеристики
								И ЗначениеХарактеристики <> Неопределено Тогда
								Значение = ЗначениеХарактеристики.value
							Иначе
								Продолжить;
							КонецЕсли;
							
						ИначеЕсли Атрибут.Свойство("value")
							И Атрибут.value <> Неопределено
							И ТипХарактеристикКатегории <> "ENUMERATION" Тогда
							Значение = Атрибут.value;
						Иначе
							Продолжить;
						КонецЕсли;
						
						НоваяХарактеристика = Характеристики.Добавить();
						НоваяХарактеристика.Название = НаименованиеХарактеристики;
						НоваяХарактеристика.Значение = ПривестиКТипуЗначениеРубрикатора(Значение, ТипХарактеристикКатегории);
						
					КонецЦикла;
					
					Если Характеристики.Количество() Тогда
						ДанныеСервиса.Вставить("Характеристики", Характеристики);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеСервиса;
	
КонецФункции

// Возвращает количество торговых предложений участника.
//
// Параметры:
//   ПараметрыКоманды - Структура - параметры вызова.
//     * ИНН - Строка - ИНН участника.
//     * КПП - Строка - КПП участника.
//   Отказ - Булево - признак ошибки выполнения.
//
// Возвращаемое значение:
//   Число - количество торговых предложений.
//
Функция ПолучитьКоличествоТорговыхПредложений(ПараметрыМетода, Отказ) Экспорт
	
	ПараметрыКоманды = ПараметрыКомандыПолучитьКоличествоТорговыхПредложений(ПараметрыМетода, Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Получение подсказки по контексту в фоновом задании.
//
// Параметры:
//  ДанныеКонтекста	 - Структура - контекст данных формы для подсказок,
//    см. ТорговыеПредложенияКлиент.ДанныеКонтекстаДляПодсказки().
//  АдресРезультата - Строка - адрес временного хранилища, в которое будет
//                             помещен (или уже помещен) результат работы процедуры.
// 
// Возвращаемое значение:
//  Структура - данные подсказок, см. ОписаниеПодсказокСервиса().
//
Функция ПолучитьПодсказкуПоКонтексту(ДанныеКонтекста, Знач АдресРезультата) Экспорт
	
	Подсказки = ОписаниеПодсказокСервиса();
	
	// Заполнение роли пользователя.
	ПодсказкаXDTO = ФабрикаXDTO.Создать(ТипXDTO("HintRequest"));
	Если ДанныеКонтекста.РежимПоставщика Тогда
		ПодсказкаXDTO.role = "shipper";
	ИначеЕсли ДанныеКонтекста.РежимПокупателя Тогда
		ПодсказкаXDTO.role = "customer";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	// Показ контекстной подсказки из документов производится только при включенной опции
	// показа подсказок для покупателей.
	УстановитьПривилегированныйРежим(Истина);
	ПоказыватьПодсказкиПокупателей = Константы.ПоказыватьПодсказкиПокупателейБизнесСеть.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеКонтекста.РежимПокупателя 
		И (ДанныеКонтекста.РежимПоискаПоСписку ИЛИ ДанныеКонтекста.РежимПоискаПоОтборам)
		И Не ПоказыватьПодсказкиПокупателей Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Заполнение данных по организациям.
	Если ДанныеКонтекста.Организации.Количество() Тогда
		
		// Проверка регистрации организации в сервисе.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОрганизацииБизнесСеть.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
		|ГДЕ
		|	ОрганизацииБизнесСеть.Организация В(&СписокОрганизаций)";
		Запрос.УстановитьПараметр("СписокОрганизаций", ДанныеКонтекста.Организации);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() <> ДанныеКонтекста.Организации.Количество() Тогда
			// Не все организации контекста зарегистрированы в сервисе, подсказка не отображается.
			Возврат Неопределено;
		КонецЕсли;
		
		// Заполнение данных по организации.
		Для каждого Организация Из ДанныеКонтекста.Организации Цикл
			РеквизитыОрганизации = Неопределено; 
			ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Организация, РеквизитыОрганизации);
			ОрганизацияXDTO = ФабрикаXDTO.Создать(ТипXDTO("Organization"));
			
			Отказ = Ложь;
			Идентификаторы = БизнесСеть.ИдентификаторыУчастника(РеквизитыОрганизации.ИНН, РеквизитыОрганизации.КПП,, Отказ);
			Если Отказ Тогда
				Продолжить;
			КонецЕсли;
			
			ОрганизацияXDTO.inn = Идентификаторы.ИНН;
			ОрганизацияXDTO.kpp = Идентификаторы.КПП;
			ПодсказкаXDTO.organizations.Добавить(ОрганизацияXDTO);
		КонецЦикла;
		
	Иначе
		// Получение всех зарегистрированных организаций.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОрганизацииБизнесСеть.Организация КАК Ссылка
		|ИЗ
		|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть";
		
		СписокОрганизаций = Запрос.Выполнить().Выгрузить();
		БизнесСеть.ЗаполнитьРеквизитыОрганизаций(СписокОрганизаций);
		
		Для каждого РеквизитыОрганизации Из СписокОрганизаций Цикл
			
			ОрганизацияXDTO = ФабрикаXDTO.Создать(ТипXDTO("Organization"));
			
			Отказ = Ложь;
			Идентификаторы = БизнесСеть.ИдентификаторыУчастника(РеквизитыОрганизации.ИНН, РеквизитыОрганизации.КПП,, Отказ);
			Если Отказ Тогда
				Продолжить;
			КонецЕсли;
			
			ОрганизацияXDTO.inn = Идентификаторы.ИНН;
			ОрганизацияXDTO.kpp = Идентификаторы.КПП;
			
			ПодсказкаXDTO.organizations.Добавить(ОрганизацияXDTO);
			
		КонецЦикла;
	КонецЕсли;
	
	// Подготовка данных по объекту.
	Если ЗначениеЗаполнено(ДанныеКонтекста.Основание) Тогда
		
		// Валюта.
		Валюта = Неопределено; ВалютаКод = "";
		ТорговыеПредложенияПереопределяемый.ПолучитьВалютуРегламентированногоУчета(Валюта);
		Если ЗначениеЗаполнено(Валюта) Тогда
			ВалютаКод = КодВалюты(Валюта);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВалютаКод) Тогда
			ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Получение подсказки торговых предложений.'"),
				НСтр("ru = 'Ошибка получения валюты или кода валюты.'"),, "БизнесСеть");
			Отказ = Истина;
			Возврат Неопределено;
		КонецЕсли;
		
		Если ДанныеКонтекста.РежимПоискаПоСписку Тогда
			
			ПоискXDTO = ФабрикаXDTO.Создать(ТипXDTO("ProductListSearch"));
			ПоискXDTO.currency = ВалютаКод;
			
			// Список товаров для поиска.
			ПараметрыПоиска = Новый Структура;
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыПоиска, СохраненныеНастройкиПоискаПоТоварам());
			Товары = ОписаниеТаблицыТоваровДляПоиска();
			ТорговыеПредложенияПереопределяемый.ПолучитьТоварыДляПодсказокПоСсылке(
				ДанныеКонтекста.Основание, ПараметрыПоиска.ПоискПоШтрихКоду, Товары);
			ПараметрыПоиска.Вставить("Товары", Товары);
			СписокТоваровXDTO = ТоварыДляПоискаПоСпискуXDTO(ПараметрыПоиска);
			
			// Если список товаров пустой, прерывание.
			Если СписокТоваровXDTO.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Для каждого СтрокаТовара Из СписокТоваровXDTO Цикл
				ПоискXDTO.listSearch.Добавить(СтрокаТовара);
			КонецЦикла;
			
			// Регион поиска.
			РегионПоиска = СохраненныеНастройкиРегионаПоиска();
			Если РегионПоиска.РежимОтбора <> 0 Тогда
				ОбъектРегион = ФабрикаXDTO.Создать(ТипXDTO("RegionFilter"));
				ОбъектРегион.regionMode = РегионПоиска.РежимОтбора;
				Если РегионПоиска.РежимОтбора = 2 Тогда // Отбор по указанному региону
					ОбъектРегион.regions.Добавить(ПоляXDTOРегионаКонтактнойИнформацииСервиса(РегионПоиска.ЗначенияПолей));
				КонецЕсли;
				ПоискXDTO.regionFilter = ОбъектРегион;
			КонецЕсли;
			
			// Заполнение списка поиска.
			ПодсказкаXDTO.productListSearch = ПоискXDTO;
			
		ИначеЕсли ДанныеКонтекста.РежимПоискаПоОтборам Тогда
			
			ПоискXDTO = ФабрикаXDTO.Создать(ТипXDTO("ProductSearch"));
			ПоискXDTO.currency = ВалютаКод;
			
			Товары = ОписаниеТаблицыТоваровДляПоиска();
			ТорговыеПредложенияПереопределяемый.ПолучитьТоварыДляПодсказокПоСсылке(ДанныеКонтекста.Основание, Истина, Товары);
			Если Не Товары.Количество() Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			ПоискXDTO.productName = Товары[0].Наименование;
			ПоискXDTO.vendorCode  = Товары[0].Артикул;
			Для каждого ЗначениеМассива Из Товары[0].Штрихкоды Цикл
				ПоискXDTO.barcodes.Добавить(ЗначениеМассива);
			КонецЦикла;
			
			ПодсказкаXDTO.productSearch = ПоискXDTO;
			
			// Дополнительные параметры для открытия поиска по отборам.
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ОтборНаименование", Товары[0].Наименование);
			ДополнительныеПараметры.Вставить("ОтборАртикул",      Товары[0].Артикул);
			ДополнительныеПараметры.Вставить("ОтборШтрихкоды",    Товары[0].Штрихкоды);
			Подсказки.ДополнительныеПараметры = ДополнительныеПараметры;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Выполнение запроса к сервису.
	Отказ = Ложь;
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Данные",  ОбъектXDTOВСтрокуJSON(ПодсказкаXDTO));
	ПараметрыКоманды = ПараметрыКомандыПолучитьПодсказку(ПараметрыМетода);
	Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	Если Отказ ИЛИ Не ЗначениеЗаполнено(Результат) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Подсказки, Результат, "Код, Заголовок, Содержание");
	
	// Преобразование значений доступных действий.
	Если ТипЗнч(Результат.Действия) = Тип("Массив") Тогда
		Для каждого Действие Из Результат.Действия Цикл
			Если ВРег(Действие) = "REGISTRATION" Тогда
				Подсказки.Действия.Добавить("Регистрация");
			ИначеЕсли ВРег(Действие) = "PRODUCT_PUBLICATION" Тогда
				Подсказки.Действия.Добавить("ПубликацияТорговыхПредложений");
			ИначеЕсли ВРег(Действие) = "BARCODE_UPLOAD" Тогда
				Подсказки.Действия.Добавить("ВыгрузкаШтрихкодов");
			ИначеЕсли ВРег(Действие) = "INVITE_ORG" Тогда
				Подсказки.Действия.Добавить("ОтправкаПриглашений");
			ИначеЕсли ВРег(Действие) = "PRODUCT_SEARCH" Тогда
				Подсказки.Действия.Добавить("ПоискПоОтборам");
			ИначеЕсли ВРег(Действие) = "PRODUCT_LIST_SEARCH" Тогда
				Подсказки.Действия.Добавить("ПоискПоТоварам");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Сохранение подсказки по временное хранилище.
	ПоместитьВоВременноеХранилище(Подсказки, АдресРезультата);
	
КонецФункции

// Получение кода валюты.
//
// Параметры:
//  Валюта	 - СправочникСсылка.Валюта - валюта.
// 
// Возвращаемое значение:
//  Строка - цифровой код валюты.
//
Функция КодВалюты(Валюта) Экспорт
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Валюта, "Код");
	КонецЕсли;
	
КонецФункции

// Получение валюты по коду.
//
// Параметры:
//  КодВалюты	 - Число - международный код валюты.
// 
// Возвращаемое значение:
//  Структура - данные валюты в сервисе:
//    * ПолноеНаименование - Строка - полное наименование валюты.
//    * Наименование - Строка - наименование валюты.
//    * Код - Строка - код валюты.
//    * Курс - Число - курс валюты.
//    * ДатаКурса - Дата - дата установки курса валюты.
//
Функция ПолучитьВалютуПоКоду(КодВалюты) Экспорт
	
	Отказ = Ложь;
	ПараметрыКоманды = ПараметрыКомандыПолучитьВалютуПоКоду(КодВалюты);
	Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Рубрикатор

// Получение категорий рубрикатора.
//
// Параметры:
//  СтрокаДерева	 - КоллекцияСтрокДереваЗначений - строка дерева значения для заполнения.
//  Идентификатор	 - Строка - идентификатор категории.
//
Процедура ПолучитьКатегорииРубрикатора(СтрокаДерева, Знач Идентификатор) Экспорт
	
	Отказ = Ложь;
	
	Если Идентификатор = Неопределено Тогда
		// Получение корневого дерева.
		ПараметрыКоманды = ПараметрыКомандыПолучитьСписокКатегорийПервогоУровня();
		Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	Иначе
		// Получение вложенных объектов.
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("ИдентификаторКатегории", Идентификатор);
		ПараметрыКоманды = ПараметрыКомандыПолучитьСписокДочернихКатегорий(ПараметрыМетода, Отказ);
		Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	КонецЕсли;
	
	ВозвращаемоеЗначение = "";
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлементСтруктуры Из Результат Цикл
		НоваяСтрока = СтрокаДерева.Строки.Добавить();
		НоваяСтрока.Идентификатор = Формат(ЭлементСтруктуры.Id, "ЧГ=");
		НоваяСтрока.Представление = ЭлементСтруктуры.title;
		НоваяСтрока.КоличествоПодчиненных = ЭлементСтруктуры.childrenCount;
		Если НоваяСтрока.КоличествоПодчиненных > 0 Тогда
			НоваяСтрока.ИндексКартинки = 0; // Картинка группы.
		Иначе
			НоваяСтрока.ИндексКартинки = 3; // Картинка элемента.
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получение реквизитов рубрикатора по условиям.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - параметры для выполнения:
//   * ВидНоменклатуры        - СправочникСсылка.ВидыНоменклатуры, Строка - владелец для отбора реквизитов.
//   * ИдентификаторКатегории - Строка - идентификатор категории рубрикатора 1С:Бизнес-сеть.
//  АдресРезультата    - Строка - адрес временного хранилища с результатом.
//
Процедура ПолучитьРеквизитыРубрикатора(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт
	
	// Получить данные из сервиса.
	Отказ = Ложь;
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ИдентификаторКатегории", ПараметрыПроцедуры.ИдентификаторКатегории);
	ПараметрыКоманды = ПараметрыКомандыПолучитьСписокХарактеристикКатегории(ПараметрыМетода, Отказ);
	Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);	
	
	Если Отказ ИЛИ Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	// Сопоставленные значения реквизитов информационной базы и сервиса.
	СопоставленныеРеквизиты = Новый ТаблицаЗначений;
	СопоставленныеРеквизиты.Колонки.Добавить("РеквизитОбъекта");
	СопоставленныеРеквизиты.Колонки.Добавить("ИдентификаторРеквизитаКатегории", Новый ОписаниеТипов("Строка"));
	СопоставленныеРеквизиты.Колонки.Добавить("Представление",                   Новый ОписаниеТипов("Строка"));
	СопоставленныеРеквизиты.Индексы.Добавить("ИдентификаторРеквизитаКатегории"); // Индекс.
	
	// Дополнительные реквизиты номенклатуры в информационной базе.
	ДополнительныеРеквизиты = Новый ТаблицаЗначений;
	ДополнительныеРеквизиты.Колонки.Добавить("РеквизитОбъекта", Метаданные.ОпределяемыеТипы.ДополнительныеРеквизитыБизнесСеть.Тип);
	ДополнительныеРеквизиты.Колонки.Добавить("ТипЗначения");
	ДополнительныеРеквизиты.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	// Таблица расчета сопоставленных значений реквизитов в информационной базе со значениями сервиса.
	РасчетСоответствий = Новый ТаблицаЗначений;
	РасчетСоответствий.Колонки.Добавить("РеквизитОбъекта");
	РасчетСоответствий.Колонки.Добавить("КоличествоЗначенийРеквизита");
	РасчетСоответствий.Колонки.Добавить("КоличествоСопоставленныхРеквизитов");
	РасчетСоответствий.Индексы.Добавить("РеквизитОбъекта");	// Индекс.
	
	ТорговыеПредложенияПереопределяемый.ПолучитьДанныеСопоставленияРеквизитов(ПараметрыПроцедуры.Ссылка,
		СопоставленныеРеквизиты, ДополнительныеРеквизиты, РасчетСоответствий);
	
	РеквизитыРубрикатора = ОписаниеРеквизитовСопоставленияРубрикатора();
	
	Для каждого РеквизитРубрикатора Из Результат Цикл
		
		ЭтоДополнительныеЗначенияРеквизита = Ложь;
		ЭтоДополнительныеЗначенияСервиса   = Ложь;
		
		// Заполнение данных рубрикатора сервера.
		Если СтрНайти(РеквизитРубрикатора.sourceId, "-") ИЛИ СтрНайти(РеквизитРубрикатора.sourceId, "shipping")
			ИЛИ РеквизитРубрикатора.title = "Минимальная цена" ИЛИ РеквизитРубрикатора.title = "Максимальная цена" Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйРеквизит = РеквизитыРубрикатора.Добавить();
		НовыйРеквизит.ПредставлениеРеквизитаКатегории = РеквизитРубрикатора.title
			+ ?(ЗначениеЗаполнено(РеквизитРубрикатора.unitCode), ", " + РеквизитРубрикатора.unitCode, "");
		НовыйРеквизит.ИдентификаторРеквизитаКатегории = Формат(РеквизитРубрикатора.id, "ЧГ=");
		Если РеквизитРубрикатора.type = "NUMBER" Тогда
			НовыйРеквизит.ТипРеквизитаРубрикатора = "Число";
		ИначеЕсли РеквизитРубрикатора.type = "STRING" Тогда
			НовыйРеквизит.ТипРеквизитаРубрикатора = "Строка";
		ИначеЕсли РеквизитРубрикатора.type = "BOOLEAN" Тогда
			НовыйРеквизит.ТипРеквизитаРубрикатора = "Да/Нет";
		ИначеЕсли РеквизитРубрикатора.type = "ENUMERATION" Тогда
			НовыйРеквизит.ТипРеквизитаРубрикатора = "Список";
			ЭтоДополнительныеЗначенияСервиса = Истина;
		КонецЕсли;
		
		// Установка типов данных.
		СтрокаПоиска = СопоставленныеРеквизиты.Найти(
			НовыйРеквизит.ИдентификаторРеквизитаКатегории, "ИдентификаторРеквизитаКатегории");
		Если СтрокаПоиска <> Неопределено Тогда
			
			НовыйРеквизит.РеквизитОбъекта = СтрокаПоиска.РеквизитОбъекта;
			
			// Поиск в списке реквизитов номенклатуры.
			СтрокиРеквизитов = ДополнительныеРеквизиты.НайтиСтроки(
				Новый Структура("РеквизитОбъекта", СтрокаПоиска.РеквизитОбъекта));
			Если СтрокиРеквизитов.Количество() Тогда
				НовыйРеквизит.ТипЗначения = СтрокиРеквизитов[0].ТипЗначения;
				Если ОбщегоНазначения.ЭтоСсылка(СтрокиРеквизитов[0].ТипЗначения.Типы()[0]) Тогда
					ЭтоДополнительныеЗначенияРеквизита = Истина;
					Если РасчетСоответствий.Найти(СтрокаПоиска.РеквизитОбъекта, "РеквизитОбъекта") = Неопределено Тогда
						НовоеСоответствие = РасчетСоответствий.Добавить();
						НовоеСоответствие.РеквизитОбъекта = СтрокаПоиска.РеквизитОбъекта;
						НовоеСоответствие.КоличествоЗначенийРеквизита = 0;
						НовоеСоответствие.КоличествоСопоставленныхРеквизитов = 0;
					КонецЕсли;
				КонецЕсли;
			Иначе
				// Это ссылочный тип доп реквизита
				НовыйРеквизит.ТипЗначения = СтрокаПоиска.РеквизитОбъекта.ТипЗначения;
				Если ОбщегоНазначения.ЭтоСсылка(НовыйРеквизит.ТипЗначения.Типы()[0]) Тогда
					ЭтоДополнительныеЗначенияРеквизита = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ЭтоДополнительныеЗначенияРеквизита И ЭтоДополнительныеЗначенияСервиса Тогда
				НовыйРеквизит.ВозможноСопоставление = Истина;
			КонецЕсли;
			
			СтрокаСоответствий = РасчетСоответствий.Найти(СтрокаПоиска.РеквизитОбъекта, "РеквизитОбъекта");
			Если СтрокаСоответствий <> Неопределено Тогда
				НовыйРеквизит.Сопоставлено = СтрШаблон(НСтр("ru = 'Сопоставлено %1 из %2'"),
					СтрокаСоответствий.КоличествоСопоставленныхРеквизитов,
					СтрокаСоответствий.КоличествоЗначенийРеквизита);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("РеквизитыРубрикатора",    РеквизитыРубрикатора);
	Реквизиты.Вставить("СопоставленныеРеквизиты", СопоставленныеРеквизиты);
	
	ПоместитьВоВременноеХранилище(Реквизиты, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыКомандРубрикатора

Функция ПараметрыКомандыПолучитьСписокКатегорийПервогоУровня() Экспорт

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Сервис = "Рубрикатор";
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Поиск категории рубрикатора.'");
	ПараметрыКоманды.Адрес = "api/classifier/v1/categories";
	ПараметрыКоманды.Метод = "get";
	ПараметрыКоманды.Права = "bn_user";
	ПараметрыКоманды.Ошибки.Вставить(400, НСтр("ru = 'Поиск содержит менее 3 символов'"));
	
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыПолучитьСписокДочернихКатегорий(ПараметрыМетода, Отказ = Неопределено) Экспорт

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Сервис = "Рубрикатор";
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Чтение списка подчиненных категорий рубрикатора.'");
	ПараметрыКоманды.Адрес = СтрШаблон("api/classifier/v1/category/%1/children",
		Формат(ПараметрыМетода.ИдентификаторКатегории, "ЧГ="));
	ПараметрыКоманды.Метод = "get";
	ПараметрыКоманды.Права = "bn_user";
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Категория не найдена.'"));
	
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыПолучитьЦепочкуКатегорийДоКорневой(ПараметрыМетода, Отказ = Неопределено) Экспорт

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Сервис = "Рубрикатор";
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Чтение родительских категорий рубрикатора.'");
	ПараметрыКоманды.Адрес  = "api/classifier/v1/category/pathToRoot";
	ПараметрыКоманды.Метод  = "post";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Данные = ПараметрыМетода.ИдентификаторыКатегории;
		
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыПолучитьСписокХарактеристикКатегории(ПараметрыМетода, Отказ = Неопределено) Экспорт

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Сервис = "Рубрикатор";

	ПараметрыКоманды.Наименование = НСтр("ru = 'Чтение списка характеристик категории рубрикатора.'");
	ПараметрыКоманды.Адрес = СтрШаблон("api/classifier/v1/category/%1/attributes",
		Формат(ПараметрыМетода.ИдентификаторКатегории, "ЧГ="));
	ПараметрыКоманды.Метод = "get";
	ПараметрыКоманды.Права = "bn_user";
	ПараметрыКоманды.Ошибки.Вставить(404, Ложь);
	
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыПолучитьЗначенияХарактеристики(ПараметрыМетода, Отказ = Неопределено) Экспорт

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Сервис = "Рубрикатор";

	ПараметрыКоманды.Наименование = НСтр("ru = 'Чтение значений характеристики рубрикатора.'");
	ПараметрыКоманды.Адрес = СтрШаблон("api/classifier/v1/category/%1/attribute/%2/values",
		Формат(ПараметрыМетода.ИдентификаторКатегории, "ЧГ="),
		Формат(ПараметрыМетода.ИдентификаторХарактеристики, "ЧГ="));
	ПараметрыКоманды.Метод = "get";
	ПараметрыКоманды.Права = "bn_user";
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Категории или атрибуты не найдены.'"));
	
	РеквизитыМассива = Новый Структура;
	РеквизитыМассива.Вставить("Идентификатор", "id");
	РеквизитыМассива.Вставить("Значение",      "value");
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(РеквизитыМассива);
	
	ПараметрыКоманды.Вставить("ОбработкаРезультата", Реквизиты);
	
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыПоискКатегорий(ПараметрыМетода, Отказ = Неопределено) Экспорт

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Сервис = "Рубрикатор";
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Поиск категорий рубрикатора.'");
	ПараметрыКоманды.Адрес = СтрШаблон("api/classifier/v1/categories/search?search=%1",
		КодироватьСтроку(ПараметрыМетода.СтрокаПоиска, СпособКодированияСтроки.КодировкаURL));
		
	Если ПараметрыКоманды.Свойство("ТолькоЭлементы") И ПараметрыМетода.ТолькоЭлементы Тогда
		ПараметрыКоманды.Адрес = ПараметрыМетода.Адрес + СтрШаблон("&onlyLeaves=%1",
			Формат(ПараметрыКоманды.ДополнительныеПараметры, "БЛ=false; БИ=true"));
	КонецЕсли;

	ПараметрыКоманды.Метод = "get";
	ПараметрыКоманды.Права = "bn_user";
	ПараметрыКоманды.Ошибки.Вставить(400, НСтр("ru = 'Поиск содержит менее 3 символов'"));
	
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыСопоставитьЗначенияРеквизитов(ПараметрыМетода, Отказ = Неопределено) Экспорт

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Сервис = "Рубрикатор";
	
	// Формирование пакета для запроса.
	ОбъектПоискаЗначений = ФабрикаXDTO.Создать(ТипXDTO("AttributeValueSearch"));
	
	Для каждого ЗначениеДляСопоставления Из ПараметрыМетода.Данные Цикл
		ОбъектЗначения = ФабрикаXDTO.Создать(ТипXDTO("AttributeValue"));
		ОбъектЗначения.categoryId  = ПараметрыМетода.ИдентификаторКатегории;
		ОбъектЗначения.attributeId = ПараметрыМетода.ИдентификаторРеквизита;
		ОбъектЗначения.value       = Строка(ЗначениеДляСопоставления);
		ОбъектПоискаЗначений.AttributeValues.Добавить(ОбъектЗначения);
	КонецЦикла;
	
	Данные = ОбъектXDTOВСтрокуJSON(ОбъектПоискаЗначений, -1);
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Сопоставление значений реквизитов рубрикатора.'");
	ПараметрыКоманды.Адрес  = "api/classifier/v1/findAttributeValueIdsByValues";
	ПараметрыКоманды.Метод  = "post";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Данные = Данные;
		
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыПолучитьСписокВсехКатегорий() Экспорт

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
    ПараметрыКоманды.Сервис = "Рубрикатор";
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Чтение всех категорий рубрикатора.'");
	ПараметрыКоманды.Адрес = "api/classifier/v1/categories/all?onlyId=false";
	ПараметрыКоманды.Метод = "get";
	ПараметрыКоманды.Права = "bn_user";

	Возврат ПараметрыКоманды;

КонецФункции

#КонецОбласти

#Область КонтактнаяИнформация

// Описание адресов абонента.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица для заполнения адресов.
//    * Представление - Строка - представление адреса.
//    * ЗначенияПолей - Строка - адрес в формате XML.
//    * Описание - Строка - комментарий адреса.
//    * Ссылка - Ссылка - объект хранения контактной информации.
//    * Вид - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации.
//    * Значение - Строка - адрес в формате JSON.
//
Функция ОписаниеАдресовАбонента() Экспорт
	
	АдресаАбонента = Новый ТаблицаЗначений;
	АдресаАбонента.Колонки.Добавить("Представление");
	АдресаАбонента.Колонки.Добавить("ЗначенияПолей");
	АдресаАбонента.Колонки.Добавить("Описание");
	АдресаАбонента.Колонки.Добавить("Ссылка");
	АдресаАбонента.Колонки.Добавить("Вид");
	
	Возврат АдресаАбонента;
	
КонецФункции

// Получить адреса самовывоза организации
//
// Параметры:
//  ИдентификаторОрганизации - Строка - идентификатор в формате ИНН/КПП.
// 
// Возвращаемое значение:
//  СписокЗначений - список адресов организации, значение - адрес в XML, представление - строка адреса.
//
Функция ПолучитьАдресаСамовывозаОрганизации(Идентификатор, Отказ) Экспорт
	
	ПараметрыМетода = Новый Структура("Идентификатор", Идентификатор);
	ПараметрыКоманды = ПараметрыКомандыПолучитьАдресаСамовывоза(ПараметрыМетода, Отказ);
	Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокАдресов = Новый СписокЗначений;
	Для каждого СтрокаРезультата Из Результат Цикл
		Если ТипЗнч(СтрокаРезультата) <> Тип("Структура")
			ИЛИ СтрокаРезультата.Свойство("addressInfo1") = Ложь Тогда
			Отказ = Истина;
			Возврат Неопределено;
		КонецЕсли;
		СписокАдресов.Добавить(СтрокаРезультата.addressInfo2, СтрокаРезультата.addressInfo1);
	КонецЦикла;

	Возврат СписокАдресов;
	
КонецФункции

// Получить адресные настройки абонента.
//
// Параметры:
//  Отказ - Булево - признак ошибки выполнения.
// 
// Возвращаемое значение:
//  Массив - адреса абонента.
//
Функция ПолучитьАдресныеНастройкиАбонента(Отказ) Экспорт
	
	ПараметрыКоманды = ПараметрыКомандыПолучитьАдресныеНастройкиАбонента();
	Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Возврат Результат;

КонецФункции

// Получить таблицы адресов абонента.
//
// Параметры:
//  Отказ - Булево - признак ошибки выполнения.
// 
// Возвращаемое значение:
//  Структура - адреса абонента:
//    РегионыПродажи - ТаблицаЗначений - регионы продаж абонента.
//    РегионыЗакупки - ТаблицаЗначений - регионы закупок абонента.
//    Адреса - ТаблицаЗначений - адреса магазинов/складов абонента.
//
Функция ПолучитьТаблицыАдресовАбонента(Отказ) Экспорт
	
	Данные = ПолучитьАдресныеНастройкиАбонента(Отказ);
	Если Данные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СоставКолонок = Новый Структура;
	СоставКолонок.Вставить("address",      "АдресСтруктурой");
	СоставКолонок.Вставить("addressInfo1", "Представление");
	СоставКолонок.Вставить("addressInfo2", "ЗначенияПолей");
	
	Отбор = Новый Структура;
	Отбор.Вставить("addressType", 1);
	Отбор.Вставить("shipment",    Истина);
	Отбор.Вставить("active",      Истина);
	РегионыПродажи = МассивСтруктурВТаблицуЗначений(Данные, СоставКолонок, Отбор);
	
	Отбор = Новый Структура;
	Отбор.Вставить("addressType", 1);
	Отбор.Вставить("entrance",    Истина);
	Отбор.Вставить("active",      Истина);
	РегионыЗакупки = МассивСтруктурВТаблицуЗначений(Данные, СоставКолонок, Отбор);
	
	Отбор = Новый Структура;
	Отбор.Вставить("addressType", 2);
	Отбор.Вставить("shipment",    Истина);
	Отбор.Вставить("active",      Истина);
	АдресаПродажи = МассивСтруктурВТаблицуЗначений(Данные, СоставКолонок, Отбор);
	
	Отбор = Новый Структура;
	Отбор.Вставить("addressType", 2);
	Отбор.Вставить("entrance",    Истина);
	Отбор.Вставить("active",      Истина);
	АдресаЗакупки = МассивСтруктурВТаблицуЗначений(Данные, СоставКолонок, Отбор);
	
	Результат = Новый Структура;
	Результат.Вставить("РегионыПродажи", РегионыПродажи);
	Результат.Вставить("АдресаПродажи",  АдресаПродажи);
	Результат.Вставить("РегионыЗакупки", РегионыЗакупки);
	Результат.Вставить("АдресаЗакупки",  АдресаЗакупки);
	
	Возврат Результат;
	
КонецФункции

// Синхронизация адресных настроек абонента.
//
// Параметры:
//  РегионаАдреса - ТаблицаЗначений - регионы и адреса абонента.
//   * Представление - Строка - представление адреса.
//   * ЗначенияПолей - Строка - контактная информация XML.
//   * ЭтоРегион - Булево - признак региона.
//   * ЭтоПродажи - Булево - признак продажи.
//   * ЭтоЗакупки - Булево - признак закупки.
//  Отказ - Булево - признак ошибки выполнения.
// 
Процедура СинхронизироватьАдресныеНастройкиАбонента(РегионыАдреса, Отказ) Экспорт
	
	РегионыАбонентаXDTO = ФабрикаXDTO.Создать(ТипXDTO("RegionsSubscriber"));
	СтраныПоиска = Новый Соответствие;
	
	Попытка

		Для каждого СтрокаТаблицы Из РегионыАдреса Цикл
			Если ПустаяСтрока(СтрокаТаблицы.Представление) Тогда
				Продолжить;
			КонецЕсли;
			АдресаРегионыXDTO = ФабрикаXDTO.Создать(ТипXDTO("CampaignAddress"));
			АдресаРегионыXDTO.address      = ПоляXDTOРегионаКонтактнойИнформацииСервиса(
				СтрокаТаблицы.ЗначенияПолей, СтраныПоиска);
			АдресаРегионыXDTO.addressType  = ?(СтрокаТаблицы.ЭтоРегион, 1, 2);
			АдресаРегионыXDTO.addressInfo1 = СтрокаТаблицы.Представление;
			АдресаРегионыXDTO.addressInfo2 = СтрокаТаблицы.ЗначенияПолей;
			АдресаРегионыXDTO.shipment     = СтрокаТаблицы.ЭтоПродажи;
			АдресаРегионыXDTO.entrance     = СтрокаТаблицы.ЭтоЗакупки;
			АдресаРегионыXDTO.active       = СтрокаТаблицы.Активный;
			РегионыАбонентаXDTO.CampaignAddress.Добавить(АдресаРегионыXDTO);
		КонецЦикла;
		
		РегионыАбонентаXDTO.Проверить();
		
	Исключение
		
		Отказ = Истина;
		Операция = НСтр("ru = 'Синхронизация адресных настроек абонента.'");
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения, "БизнесСеть");
		Возврат;
		
	КонецПопытки;
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Данные", ОбъектXDTOВСтрокуJSON(РегионыАбонентаXDTO, -1));
	ПараметрыКоманды = ПараметрыКомандыСинхронизироватьАдресныеНастройкиАбонента(ПараметрыМетода, Отказ);
	Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
КонецПроцедуры

// Последний уровень региона контактной информации.
//
// Параметры:
//  ЗначенияПолей	 - Строка - контактная информация в XML.
//  Отказ - Булево - признак ошибки выполнения.
// 
// Возвращаемое значение:
//  Строка - значение последнего заполненного уровня региона.
//
Функция ПоследнийУровеньКонтактнойИнформации(ЗначенияПолей, Ошибка) Экспорт
	
	ОбъектXDTO = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	Если ТипЗнч(ОбъектXDTO) <> Тип("ОбъектXDTO") Тогда
		Ошибка = Истина;
		Возврат "";
	КонецЕсли;
	
	Если ОбъектXDTO.Состав.Свойства().Получить("Страна") = Неопределено
		ИЛИ ОбъектXDTO.Состав.Свойства().Получить("Состав") = Неопределено Тогда
		Ошибка = Истина;
		Возврат "";
	КонецЕсли;
	
	СоставАдреса = ОбъектXDTO.Состав.Состав;
	Если ТипЗнч(СоставАдреса) = Тип("ОбъектXDTO") Тогда
		Район = Неопределено;
		Если СоставАдреса.Свойства().Получить("СвРайМО") <> Неопределено
			И СоставАдреса.СвРайМО <> Неопределено
			И СоставАдреса.СвРайМО.Свойства().Получить("Район") <> Неопределено	Тогда
				Район = СоставАдреса.СвРайМО.Район;
		КонецЕсли;
		
		Если СоставАдреса.Свойства().Получить("СубъектРФ") = Неопределено
			ИЛИ СоставАдреса.Свойства().Получить("Город") = Неопределено
			ИЛИ СоставАдреса.Свойства().Получить("НаселПункт") = Неопределено
			ИЛИ СоставАдреса.Свойства().Получить("Город") = Неопределено Тогда
			Ошибка = Истина;
			Возврат "";
		КонецЕсли;
		
		Если СоставАдреса.НаселПункт <> Неопределено Тогда
			Возврат СоставАдреса.НаселПункт;
		ИначеЕсли СоставАдреса.Город <> Неопределено Тогда
			Возврат СоставАдреса.Город;
		ИначеЕсли Район <> Неопределено Тогда
			Возврат Район;
		ИначеЕсли СоставАдреса.СубъектРФ <> Неопределено Тогда
			Возврат СоставАдреса.СубъектРФ;
		ИначеЕсли ОбъектXDTO.Состав.Страна <> Неопределено Тогда
			Возврат ОбъектXDTO.Состав.Страна;
		Иначе
			Ошибка = Истина;
			Возврат "";
		КонецЕсли;
	ИначеЕсли ОбъектXDTO.Состав.Свойства().Получить("Страна") <> Неопределено Тогда
		Возврат ОбъектXDTO.Состав.Страна;
	КонецЕсли;
	
КонецФункции

// Получить регионы контактной информации
//
// Параметры:
//  ЗначенияПолей - Строка - контактная информация в XML.
//  Представление - Строка - представление адреса.
//
Процедура ПолучитьРегионыКонтактнойИнформации(ЗначенияПолей, Представление) Экспорт
	
	ОбъектXDTO = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Адрес);
	НовоеПредставление = "";
	
	Если ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO")
		И ОбъектXDTO.Свойства().Получить("Состав") <> Неопределено
		И ОбъектXDTO.Состав.Свойства().Получить("Состав") <> Неопределено Тогда
		
		Если ТипЗнч(ОбъектXDTO.Состав.Состав) = Тип("ОбъектXDTO")
			И ОбъектXDTO.Состав.Состав.Свойства().Получить("ДопАдрЭл") <> Неопределено Тогда
		
			ОбъектXDTO.Состав.Состав.ДопАдрЭл.Очистить();
			ОбъектXDTO.Состав.Состав.Улица = "";
			ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTO);
			
			ОбъектXDTO.Представление = "";
			НовоеПредставление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ОбъектXDTO,
				Новый Структура("ВключатьСтрануВПредставление, ФорматАдреса", Истина, "ФИАС"));
		ИначеЕсли ОбъектXDTO.Состав.Свойства().Получить("Страна") <> Неопределено Тогда
			НовоеПредставление = ОбъектXDTO.Состав.Страна;
		КонецЕсли;
			
	КонецЕсли;
	Если Не ПустаяСтрока(НовоеПредставление) Тогда
		Представление = НовоеПредставление;
	КонецЕсли;

КонецПроцедуры

// Инициализация вида контактной информации для ввода адреса.
//
// Возвращаемое значение:
//  Структура - свойства для ввода адреса:
//    * Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации - значения типа адрес.
//    * ВключатьСтрануВПредставление - Булево - признак включения страны в представление.
//
Функция ВидКонтактнойИнформацииАдрес() Экспорт
	
	ВидКонтактнойИнформации = УправлениеКонтактнойИнформациейСлужебный.СтруктураВидаКонтактнойИнформации();
	ВидКонтактнойИнформации.Вставить("Тип", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
	ВидКонтактнойИнформации.Вставить("ВключатьСтрануВПредставление", Истина);
	
	Возврат ВидКонтактнойИнформации;
	
КонецФункции



#КонецОбласти

#Область РегламентныеЗадания

// Выполняет регламентное задание по синхронизации торговых предложений с сервисом.
//
Процедура СинхронизацияТорговыхПредложенийОбработчикЗадания() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.СинхронизацияТорговыхПредложений);
	
	СинхронизацияТорговыхПредложений(Неопределено, Неопределено);
	
КонецПроцедуры

// Выполняет регламентное задание по выгрузки штрихкодов для подсказок.
//
Процедура ОбновитьПодсказкиТорговыеПредложенияОбработчикЗадания() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеПодсказокТорговыеПредложения);
		
	УстановитьПривилегированныйРежим(Истина);
	ПодсказкиДоступны = Константы.ПоказыватьПодсказкиПокупателейБизнесСеть.Получить()
		ИЛИ Константы.ПоказыватьПодсказкиПоставщиковБизнесСеть.Получить();
	УстановитьПривилегированныйРежим(Ложь);
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть") И ПодсказкиДоступны Тогда
		ОбновлениеПодсказокТорговыхПредложений();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОписаниеПараметров

// Описание реквизитов номенклатуры.
// Возвращаемое значение:
//  Структура - описание реквизитов.
//
Функция ОписаниеРеквизитовНоменклатуры() Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ИспользованиеХарактеристик");
	Реквизиты.Вставить("ЕдиницаИзмерения");
	Реквизиты.Вставить("НоменклатураПоставщика");
	Реквизиты.Вставить("Упаковка");

	Возврат Реквизиты;
	
КонецФункции

// Описание региона поиска.
// 
// Возвращаемое значение:
//  Структура - описание переменной для отбора по региону поиска:
//    * РежимОтбора - Число - режим отбора (0 - без отбора, 1 - отбор по регионам профиля, 2 - указанный регион).
//    * Представление - Строка - представление региона поиска.
//    * ЗначенияПолей - Строка - внутреннее представление региона поиска введенного вручную.
//
Функция ОписаниеРегионаПоиска() Экспорт
		
	Результат = Новый Структура;
	Результат.Вставить("РежимОтбора",   0);
	Результат.Вставить("Представление", "");
	Результат.Вставить("ЗначенияПолей", Неопределено);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Настройки

// Сохраненные настройки поиска по товарам.
// 
// Возвращаемое значение:
//  Структура - сохраненные настройки поиска по товарам, см. ОписаниеНастроекПоискаПоТоварам().
//
Функция СохраненныеНастройкиПоискаПоТоварам() Экспорт
	
	// Заполнение структуры настроек по умолчанию.
	Результат = ОписаниеНастроекПоискаПоТоварам();
	
	// Чтение сохраненных данных.
	СохраненныеНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТорговыеПредложения.ПоискПоТоварам",
		"НастройкиПоискаПоТоварам");
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Результат, СохраненныеНастройки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сохранение настроек поиска по товарам.
//
// Параметры:
//  СохраняемыеНастройки - Структура - сохраняемые данные, см. ОписаниеНастроекПоискаПоТоварам().
//
Процедура СохранитьНастройкиПоискаПоТоварам(СохраняемыеНастройки) Экспорт
	
	Настройки = ОписаниеНастроекПоискаПоТоварам();
	
	Если ТипЗнч(СохраняемыеНастройки) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Настройки, СохраняемыеНастройки);
	КонецЕсли;

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ТорговыеПредложения.ПоискПоТоварам",
		"НастройкиПоискаПоТоварам", Настройки);
		
КонецПроцедуры

// Сохраненные настройки региона поиска
// 
// Возвращаемое значение:
//  Структура - сохраненные настройки региона поиска, см. ОписаниеРегионаПоиска().
//
Функция СохраненныеНастройкиРегионаПоиска() Экспорт
	
	РегионПоиска = ОписаниеРегионаПоиска();
	
	// Заполнение структуры настроек по умолчанию.
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТорговыеПредложения.РегионПоиска",
		"СохраненныеНастройки");
	
	Если СохраненноеЗначение <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(РегионПоиска, СохраненноеЗначение);
	КонецЕсли;
	
	Возврат РегионПоиска;
	
КонецФункции

// Сохранение настроек региона поиска.
//
// Параметры:
//  СохраняемыеНастройки - Структура - сохраняемые настройки поиска, см. ОписаниеРегионаПоиска().
//
Процедура СохранитьНастройкиРегионаПоиска(СохраняемыеНастройки) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ТорговыеПредложения.РегионПоиска",
		"СохраненныеНастройки", СохраняемыеНастройки);
		
КонецПроцедуры

#КонецОбласти

#Область Права

// Проверяет возможность настройки торговых предложений в сервисе 1С:Бизнес-сеть для текущего пользователя.
//
// Возвращаемое значение:
//  Булево - наличие права на настройку обмена документами.
//
Функция ПравоНастройкиТорговыхПредложений(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения);
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		ЭлектронноеВзаимодействиеСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

// Проверяет возможность поиска торговых предложений в сервисе 1С:Бизнес-сеть для текущего пользователя.
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости вывода сообщения о недостаточности прав.
// 
// Возвращаемое значение:
//  Булево - наличие права на выполнение обмена.
//
Функция ПравоПоискаТорговыхПредложений(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = ПравоДоступа("Просмотр", Метаданные.ОбщиеКоманды.ТорговыеПредложенияБизнесСеть);
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		ЭлектронноеВзаимодействиеСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

#КонецОбласти

#Область ДополнительныеНастройки


// Дополнительные настройки публикации.
//
// Параметры:
//  ТорговоеПредложение	 - Ссылка - ссылка на торговое предложение.
// 
// Возвращаемое значение:
//  Структура - значения дополнительных настроек.
//   * Организация - Ссылка - организация настройки.
//   * АдресЭлектроннойПочты - Строка - адрес электронной почты поставщика.
//   * Организация - Ссылка - организация настройки.
//   * УведомлятьОЗаказах - Булево - признак уведомления о получении заказов покупателей.
//   * ПубликоватьЦены - Булево - публиковать цены.
//   * ПубликоватьСрокиПоставки - Булево - публиковать сроки поставки.
//   * ПубликоватьОстатки - Булево - публиковать остатки.
//   * ДополнительноеОписание - Строка - дополнительное текстовое описание.
//
Функция ДополнительныеНастройкиПубликации(ТорговоеПредложение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостоянияСинхронизацииТорговыеПредложения.Организация КАК Организация,
	|	СостоянияСинхронизацииТорговыеПредложения.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	СостоянияСинхронизацииТорговыеПредложения.УведомлятьОЗаказах КАК УведомлятьОЗаказах,
	|	СостоянияСинхронизацииТорговыеПредложения.ПубликоватьЦены КАК ПубликоватьЦены,
	|	СостоянияСинхронизацииТорговыеПредложения.ПубликоватьСрокиПоставки КАК ПубликоватьСрокиПоставки,
	|	СостоянияСинхронизацииТорговыеПредложения.ПубликоватьОстатки КАК ПубликоватьОстатки,
	|	СостоянияСинхронизацииТорговыеПредложения.ДополнительноеОписание КАК ДополнительноеОписание
	|ИЗ
	|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизацииТорговыеПредложения
	|ГДЕ
	|	СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТорговоеПредложение);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() Тогда
		Результат = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Таблица[0]);
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПараметрыКомандТорговыеПредложения

Функция ПараметрыКомандыПоискТорговыхПредложенийПоСтроке(ПараметрыМетода, Отказ = Неопределено)

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Поиск торговых предложений с отборами.'");
	ПараметрыКоманды.Адрес  = "/api/offer/v1/product/search";
	ПараметрыКоманды.Метод  = "post";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Данные = ПараметрыМетода.Данные;
	
	// Если нет регистрации, необходима аутентификация по логину интернет-поддержки.
	Если Не БизнесСеть.ОрганизацияЗарегистрирована() Тогда
		ПараметрыКоманды.Права = "bn_its";
	КонецЕсли;

	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыПоискТорговыхПредложенийПоСписку(ПараметрыМетода, Отказ = Неопределено)

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();

	ПараметрыКоманды.Наименование = НСтр("ru = 'Поиск торговых предложений по списку товаров.'");
	ПараметрыКоманды.Адрес  = "/api/offer/v1/product/listSearch";
	ПараметрыКоманды.Метод  = "post";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Данные = ПараметрыМетода.Данные;

	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыПрочитатьТорговоеПредложение(ПараметрыМетода, Отказ = Неопределено)

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();

	ПараметрыКоманды.Наименование = НСтр("ru = 'Чтение карточки торгового предложения'");
	ПараметрыКоманды.Адрес = СтрШаблон("/api/offer/v1/product/%1/?currency=%2",
		КодироватьСтроку(ПараметрыМетода.Идентификатор, СпособКодированияСтроки.КодировкаURL), ПараметрыМетода.КодВалюты);
	ПараметрыКоманды.Метод = "get";
	ПараметрыКоманды.Права = "bn_user";
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Карточка торгового предложения не найдена.'"));
	
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыПолнаяСинхронизацияТорговыхПредложений(ПараметрыМетода, Отказ = Неопределено)

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
	
	ТекстОшибки = "";
	Идентификаторы = БизнесСеть.ИдентификаторыУчастника(ПараметрыМетода.ИНН, ПараметрыМетода.КПП,
		ПараметрыМетода.Организация, Отказ, ТекстОшибки);
		

	ПараметрыКоманды.Наименование = НСтр("ru = 'Публикация торговых предложений.'");
	ПараметрыКоманды.Адрес  = "/api/offer/v1/organization/"
		+ Идентификаторы.ИНН + "/" + Идентификаторы.КПП + "/campaigns/fullSync";

	ПараметрыКоманды.Метод  = "post";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Данные = ПараметрыМетода.Данные;
	
	Если Не ЗначениеЗаполнено(ПараметрыКоманды.Данные) Тогда
		Отказ = Истина;
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Отсутствуют данные публикации для %1'"), ПараметрыМетода.Организация);
	КонецЕсли;
	
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			НСтр("ru = 'Ошибка публикации торговых предложений:'") + " " + ТекстОшибки, "БизнесСеть");
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыКоманды.Ошибки.Вставить(404,
		СтрШаблон(НСтр("ru = 'Организация %1 не найдена в сервисе.'"), ПараметрыМетода.Организация));
	ПараметрыКоманды.Ошибки.Вставить(403,
		СтрШаблон(НСтр("ru = 'Недостаточно прав на организацию %1.'"), ПараметрыМетода.Организация));
	ПараметрыКоманды.Ошибки.Вставить(400, НСтр("ru = 'Обнаружены ошибки публикации торговых предложений.'"));
	
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыСписокОтсутствующихКартинок(ПараметрыМетода, Отказ = Неопределено)

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
		
	// Подготовка списка картинок.
	МассивКартинок = Новый Массив;
	Для каждого СтрокаТаблицы Из ПараметрыМетода.ТаблицаКартинок Цикл
		МассивКартинок.Добавить(Новый Структура("id, updateDate",
			СтрокаТаблицы.ИдентификаторКартинки, Формат(
				Формат(СтрокаТаблицы.ДатаИзмененияКартинки - Дата(1970, 1, 1, 1, 0, 0), "ЧГ=0"))));
	КонецЦикла;

	Данные = БизнесСеть.ЗначениеВJSON(МассивКартинок, Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто));
	ПараметрыКоманды.Наименование = НСтр("ru = 'Получение списка отсутствующих картинок.'");
	ПараметрыКоманды.Адрес  = "/api/offer/v1/product/picture/missingOrOutdated";
	ПараметрыКоманды.Метод  = "post";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Данные = Данные;
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Отсутствует идентификатор программы в сервисе 1С:Бизнес-сеть.'"));
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Программа зарегистрирована для другой учетной записи сервиса.'"));
		
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыВыгрузитьКартинку(ПараметрыМетода, Отказ = Неопределено)

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Выгрузка картинки.'");
	ПараметрыКоманды.Адрес = "/api/offer/v1/product/picture/"
		+ ПараметрыМетода.ИдентификаторКартинки
		+ "/" + Формат(ПараметрыМетода.ДатаИзмененияКартинки, "ДФ=dd-MM-yyyy-HH-mm-ss");
	ПараметрыКоманды.Метод = "post";
	ПараметрыКоманды.Права = "bn_user";
	
	Разделитель = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	ИмяФайла = ПараметрыМетода.ИдентификаторКартинки + "." + НРег(ПараметрыМетода.Расширение);
	
	Текст = Новый ТекстовыйДокумент;
	Текст.РазделительСтрок = Символы.ВК + Символы.ПС;
	Текст.ДобавитьСтроку("--" + Разделитель);
	Текст.ДобавитьСтроку("Content-Disposition: form-data; name=""file""; filename=""" + ИмяФайла + """");
	Текст.ДобавитьСтроку("Content-Type: image/" + НРег(ПараметрыМетода.Расширение));
	Текст.ДобавитьСтроку("");
	
	МассивДвоичныхДанных = Новый Массив;
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(Текст.ПолучитьТекст()));
	МассивДвоичныхДанных.Добавить(РаботаСФайлами.ДвоичныеДанныеФайла(ПараметрыМетода.Картинка));
	
	Текст.Очистить();
	Текст.ДобавитьСтроку("");
	Текст.ДобавитьСтроку("--" + Разделитель + "--");
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(Текст.ПолучитьТекст()));
	
	ДвоичныеДанные = СоединитьДвоичныеДанные(МассивДвоичныхДанных);
	ПараметрыКоманды.Данные = ДвоичныеДанные;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Length", XMLСтрока(ДвоичныеДанные.Размер()));
	Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + Разделитель);
	ПараметрыКоманды.Вставить("Заголовки", Заголовки);
	
	Если ДвоичныеДанные.Размер() > 1024 Тогда
		ПараметрыКоманды.Вставить("Таймаут", ДвоичныеДанные.Размер() / 1024 * 128);
	КонецЕсли;
	
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыПолучитьКоличествоТорговыхПредложений(ПараметрыМетода, Отказ = Неопределено)

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование = НСтр("ru = 'Запрос количества торговых предложений.'");
	
	Валюта = Неопределено;
	КлючНастроекФормы = "Обработка.ТорговыеПредложения.Форма.ПоискПоОтборам/ТекущиеДанные";
	Настройки = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекФормы);
	СохраненнаяВалюта = Неопределено;
	Если ТипЗнч(Настройки) = Тип("Соответствие") Тогда
		Валюта = Настройки.Получить("Валюта");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		ТорговыеПредложенияПереопределяемый.ПолучитьВалютуРегламентированногоУчета(Валюта);
	КонецЕсли;
	
	КодВалюты = КодВалюты(Валюта);
	Если КодВалюты = Неопределено Тогда
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ПараметрыКоманды.Наименование,
			НСтр("ru = 'Ошибка получения валюты или кода валюты.'"),, "БизнесСеть");
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Идентификаторы = БизнесСеть.ИдентификаторыУчастника(ПараметрыМетода.ИНН, ПараметрыМетода.КПП,, Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;

	Поставщик = Новый Массив;
	Поставщик.Добавить(Новый Структура("inn, kpp", Идентификаторы.ИНН, Идентификаторы.КПП));
	ПараметрыСтруктуры = Новый Структура("currency, currencyConversion, vendors", КодВалюты, Истина, Поставщик);
	ПараметрыКоманды.Адрес  = "/api/offer/v1/product/count";
	ПараметрыКоманды.Метод  = "post";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Данные = БизнесСеть.ЗначениеВJSON(ПараметрыСтруктуры);

	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыПолучитьАдресныеНастройкиАбонента()

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
		
	ПараметрыКоманды.Наименование = НСтр("ru = 'Чтение адресов абонента.'");
	ПараметрыКоманды.Адрес = "/api/offer/v1/campaign/address";
	ПараметрыКоманды.Метод = "get";
	ПараметрыКоманды.Права = "bn_user";
	
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыСинхронизироватьАдресныеНастройкиАбонента(ПараметрыМетода, Отказ = Неопределено)

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
		
	ПараметрыКоманды.Наименование = НСтр("ru = 'Запись адресов абонента.'");
	ПараметрыКоманды.Адрес  = "/api/offer/v1/campaign/address/fullSync";
	ПараметрыКоманды.Метод  = "post";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Данные = ПараметрыМетода.Данные;
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав для записи данных.'"));
	
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыПолучитьАдресаСамовывоза(ПараметрыМетода, Отказ = Неопределено)

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
		
	Реквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрыМетода.Идентификатор, "_");
	Если Реквизиты.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат Неопределено;
	Иначе
		ИНН = Реквизиты[0];
		КПП = "0";
		Если Реквизиты.Количество()>1 Тогда
			КПП = Реквизиты[1];
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Чтение адресов самовывоза.'");
	ПараметрыКоманды.Адрес = СтрШаблон("/api/offer/v1/organization/%1/%2/campaign/address", ИНН, КПП);
	ПараметрыКоманды.Метод = "get";
	ПараметрыКоманды.Права = "bn_user";
		
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыВыгрузкаШтрихкодовДляПодсказок(ПараметрыМетода, Отказ)

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
	
	РеквизитыОрганизации = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыМетода.Организация, РеквизитыОрганизации);
	
	ТекстОшибки = "";
	Идентификаторы = БизнесСеть.ИдентификаторыУчастника(РеквизитыОрганизации.ИНН, РеквизитыОрганизации.КПП,
		ПараметрыМетода.Организация, Отказ, ТекстОшибки);
	Если Отказ Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка выгрузки штрихкодов для подсказок:'") + " " + ТекстОшибки;
	КонецЕсли;

	ПараметрыКоманды.Адрес = СтрШаблон("/api/offer/v1/organization/%1/%2/barcode/fullSync",
		Идентификаторы.ИНН, Идентификаторы.КПП);
		
	ПараметрыКоманды.Наименование = НСтр("ru = 'Выгрузка штрихкодов номенклатуры.'");
	ПараметрыКоманды.Метод = "post";
	ПараметрыКоманды.Права = "bn_user";
	ПараметрыКоманды.Данные = ПараметрыМетода.Данные;
	ПараметрыКоманды.Ошибки.Вставить(400, НСтр("ru = 'Ошибка выгрузки штрихкодов номенклатуры.'"));
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыПолучитьПодсказку(ПараметрыМетода)

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();

	ПараметрыКоманды.Наименование = НСтр("ru = 'Получение подсказок'");
	ПараметрыКоманды.Адрес  = "/api/offer/v1/hint";
	ПараметрыКоманды.Метод  = "post";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Данные = ПараметрыМетода.Данные;
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Организация не найдена в сервисе.'"));
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав на организацию.'"));
	ПараметрыКоманды.Ошибки.Вставить(400, НСтр("ru = 'Ошибка параметров.'"));
	ПараметрыКоманды.БлокироватьСообщенияОбОшибках = Истина;
	
	ОбработкаРезультата = Новый Структура;
	ОбработкаРезультата.Вставить("Код",        "code");
	ОбработкаРезультата.Вставить("Заголовок",  "shortText");
	ОбработкаРезультата.Вставить("Содержание", "longText");
	ОбработкаРезультата.Вставить("Действия",   "actions");
	
	ПараметрыКоманды.Вставить("ОбработкаРезультата", ОбработкаРезультата);
	
	// Проверка регистрации организаций.
	Если Не БизнесСеть.ОрганизацияЗарегистрирована() Тогда
		ПараметрыКоманды.Права = "bn_its";
	КонецЕсли;

	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыПолучитьВалютуПоКоду(КодВалюты)

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();

	ПараметрыКоманды.Наименование = НСтр("ru = 'Получение валюты'");
	ПараметрыКоманды.Адрес  = СтрШаблон("/api/offer/v1/currency/%1", Формат(КодВалюты, "ЧГ="));
	ПараметрыКоманды.Метод  = "get";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Валюта не найдена.'"));
	
	ОбработкаРезультата = Новый Структура;
	ОбработкаРезультата.Вставить("ПолноеНаименование", "name");
	ОбработкаРезультата.Вставить("Наименование",       "codeStr");
	ОбработкаРезультата.Вставить("Код",       "codeNum");
	ОбработкаРезультата.Вставить("Курс",      "rate");
	ОбработкаРезультата.Вставить("ДатаКурса", "rateTime");
	
	ПараметрыКоманды.Вставить("ОбработкаРезультата", ОбработкаРезультата);
	
	Возврат ПараметрыКоманды;
	
КонецФункции

Функция ПараметрыКомандыСоздатьТорговоеПредложение(ПараметрыМетода, Отказ)

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
	
	ТекстОшибки = "";
	Идентификаторы = БизнесСеть.ИдентификаторыУчастника(ПараметрыМетода.ИНН, ПараметрыМетода.КПП,, Отказ, ТекстОшибки);
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			НСтр("ru = 'Ошибка публикации торговых предложений:'") + " " + ТекстОшибки, "БизнесСеть");
		Возврат Неопределено;
	КонецЕсли;

	ПараметрыКоманды.Наименование = НСтр("ru = 'Создание торговых предложений'");
	ПараметрыКоманды.Адрес  = СтрШаблон("/api/offer/v1/organization/%1/%2/campaign", Идентификаторы.ИНН, Идентификаторы.КПП);
	ПараметрыКоманды.Метод  = "post";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Данные = ПараметрыМетода.Данные;
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Организация не найдена.'"));
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав на организацию.'"));
	ПараметрыКоманды.Ошибки.Вставить(400, НСтр("ru = 'Ошибка параметров запроса.'"));
	ПараметрыКоманды.Ошибки.Вставить(422, НСтр("ru = 'Ошибка заполнения телефона или электронной почты.'"));
	
	Возврат ПараметрыКоманды;
	
КонецФункции

Функция ПараметрыКомандыСоздатьЗаписиТорговогоПредложения(ПараметрыМетода, Отказ)

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
	
	ТекстОшибки = "";
	Идентификаторы = БизнесСеть.ИдентификаторыУчастника(ПараметрыМетода.ИНН, ПараметрыМетода.КПП,, Отказ, ТекстОшибки);
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			НСтр("ru = 'Ошибка публикации позиций торговых предложений:'") + " " + ТекстОшибки, "БизнесСеть");
		Возврат Неопределено;
	КонецЕсли;

	ПараметрыКоманды.Наименование = НСтр("ru = 'Создание торгового предложения'");
	ПараметрыКоманды.Адрес  = СтрШаблон("/api/offer/v1/organization/%1/%2/campaign/%3/products",
		Идентификаторы.ИНН, Идентификаторы.КПП, ПараметрыМетода.ИдентификаторТорговогоПредложения);
	ПараметрыКоманды.Метод  = "post";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Данные = ПараметрыМетода.Данные;
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Публикация торгового предложения не найдена.'"));
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав на публикацию торгового предложения.'"));
	ПараметрыКоманды.Ошибки.Вставить(400, НСтр("ru = 'Дублирование номенклатуры при публикации.'"));
	
	Возврат ПараметрыКоманды;
	
КонецФункции

#КонецОбласти

#Область ПараметрыКомандРубрикатора

Функция ПараметрыКомандыПолучитьЗначениеХарактеристики(ПараметрыМетода, Отказ = Неопределено)

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Сервис = "Рубрикатор";

	ПараметрыКоманды.Наименование = НСтр("ru = 'Чтение значения характеристики рубрикатора.'");
	ПараметрыКоманды.Адрес = СтрШаблон("api/classifier/v1/value/%1",
		Формат(ПараметрыМетода.ИдентификаторЗначенияХарактеристики, "ЧГ="));
	ПараметрыКоманды.Метод = "get";
	ПараметрыКоманды.Права = "bn_user";
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Значение характеристики не найдено.'"));
		
	Возврат ПараметрыКоманды;

КонецФункции

#КонецОбласти

#Область ОписаниеПараметров

// Описание пакета предложений для заполнения данных.
// 
// Возвращаемое значение:
//  Структура - описание пакета предложений.
//
Функция ОписаниеПакетаПредложений()
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипЧисло  = Новый ОписаниеТипов("Число");
	ТипДата   = Новый ОписаниеТипов("Дата");
	ТипЦена   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	
	ИмяСправочникаНоменклатура   = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Номенклатура");
	ИмяСправочникаХарактеристики = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("ХарактеристикиНоменклатуры");
	ИмяСправочникаУпаковки       = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("УпаковкиНоменклатуры");
	
	ТипНоменклатура   = Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочникаНоменклатура);
	ТипХарактеристики = Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочникаХарактеристики);
	ТипУпаковки       = Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочникаУпаковки);
	
	КонтактноеЛицо = Новый Структура;
	КонтактноеЛицо.Вставить("ФИО",              "");
	КонтактноеЛицо.Вставить("Телефон",          "");
	КонтактноеЛицо.Вставить("ЭлектроннаяПочта", "");
	
	КонтактыОрганизации = Новый Структура;
	КонтактыОрганизации.Вставить("ИНН",     "");
	КонтактыОрганизации.Вставить("КПП",     "");
	КонтактыОрганизации.Вставить("Телефон", "");
	КонтактыОрганизации.Вставить("Сайт",    "");
	КонтактыОрганизации.Вставить("ЭлектроннаяПочта", "");
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура",               ТипНоменклатура);
	Товары.Колонки.Добавить("Наименование",               ТипСтрока);
	Товары.Колонки.Добавить("Цена",                       ТипЦена);
	Товары.Колонки.Добавить("ВалютаКод",                  ТипСтрока);
	Товары.Колонки.Добавить("Характеристика",             ТипХарактеристики);
	Товары.Колонки.Добавить("ХарактеристикаНаименование", ТипСтрока);
	Товары.Колонки.Добавить("Артикул",                    ТипСтрока);
	Товары.Колонки.Добавить("ИдентификаторКатегории",     ТипСтрока);
	Товары.Колонки.Добавить("СрокПоставки",               ТипЧисло);
	Товары.Колонки.Добавить("Упаковка",                   ТипУпаковки);
	Товары.Колонки.Добавить("УпаковкаКод",                ТипСтрока);
	Товары.Колонки.Добавить("УпаковкаНаименование",       ТипСтрока);
	Товары.Колонки.Добавить("УпаковкаЧислитель",          ТипЧисло);
	Товары.Колонки.Добавить("УпаковкаЗнаменатель",        ТипЧисло);
	Товары.Колонки.Добавить("ОбъектСопоставления");       // Ссылка.
	Товары.Колонки.Добавить("БазоваяЕдиницаИзмерения");   // Ссылка.
	Товары.Колонки.Добавить("СтавкаНДС");                 // Ссылка.
	Товары.Колонки.Добавить("ШтрихКоды",                  Новый ОписаниеТипов("ТаблицаЗначений"));
	Товары.Колонки.Добавить("Атрибуты",                   Новый ОписаниеТипов("ТаблицаЗначений"));
	Товары.Колонки.Добавить("Картинка");                  // Ссылка
	Товары.Колонки.Добавить("Расширение",                 ТипСтрока);
	Товары.Колонки.Добавить("ДатаИзмененияКартинки",      ТипДата);
	
	// Количество на складах в базовых единицах измерения.
	Товары.Колонки.Добавить("Количество",                 ТипЧисло);
	
	// Остатки на складах (мало-много): 0 - не выгружать, 1 - мало, 2 - достаточно, 3 - много.
	Товары.Колонки.Добавить("Остаток",                    ТипЧисло);
	
	ШтрихКоды = Новый ТаблицаЗначений;
	ШтрихКоды.Колонки.Добавить("Номенклатура",   ТипНоменклатура);
	ШтрихКоды.Колонки.Добавить("Характеристика", ТипХарактеристики);
	ШтрихКоды.Колонки.Добавить("ЕдиницаИзмерения");
	ШтрихКоды.Колонки.Добавить("Значение");
	ШтрихКоды.Индексы.Добавить("Номенклатура, Характеристика, ЕдиницаИзмерения");
	
	Атрибуты = Новый ТаблицаЗначений;
	Атрибуты.Колонки.Добавить("ИдентификаторРеквизитаКатегории", ТипСтрока);
	Атрибуты.Колонки.Добавить("Наименование",                    ТипСтрока);
	Атрибуты.Колонки.Добавить("ИдентификаторЗначения",           ТипСтрока);
	Атрибуты.Колонки.Добавить("Значение");
	
	// Сегмент контрагентов для ограничения доступа к торговым предложениям.
	СписокКонтрагентов = Новый ТаблицаЗначений;
	СписокКонтрагентов.Колонки.Добавить("ИНН", ТипСтрока);
	СписокКонтрагентов.Колонки.Добавить("КПП", ТипСтрока);
	
	ПакетПредложений = Новый Структура;
	ПакетПредложений.Вставить("Статус",                Перечисления.СостоянияСинхронизацииТорговыеПредложения.ПустаяСсылка());
	ПакетПредложений.Вставить("ДатаНачалаДействия",    '00010101');
	ПакетПредложений.Вставить("ДатаОкончанияДействия", '00010101');
	ПакетПредложений.Вставить("Организация",           Неопределено); // Тип СправочникСсылка
	ПакетПредложений.Вставить("ВидЦен",                Неопределено); // Тип СправочникСсылка
	ПакетПредложений.Вставить("ЦенаВключаетНДС",       Ложь);
	ПакетПредложений.Вставить("Валюта",                Ложь);
	ПакетПредложений.Вставить("КонтактноеЛицо",        КонтактноеЛицо);
	ПакетПредложений.Вставить("КонтактыОрганизации",   КонтактыОрганизации);
	
	// Табличные части.
	ПакетПредложений.Вставить("СписокКонтрагентов", СписокКонтрагентов);
	ПакетПредложений.Вставить("Товары",    Товары);
	ПакетПредложений.Вставить("ШтрихКоды", ШтрихКоды);
	ПакетПредложений.Вставить("Атрибуты",  Атрибуты);
	
	Возврат ПакетПредложений;
	
КонецФункции

// Возвращает структуру таблицы, в которой будут возвращены найденные торговые предложения при поиске по списку.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица в которую будет помещен результат поиска.
//
Функция ОписаниеРезультатаПоискаТорговыхПредложенийПоСписку()
	
	ТипСтрока         = Новый ОписаниеТипов("Строка");
	ТипБулево         = Новый ОписаниеТипов("Булево");
	ТипЧислоДенежный  = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	ТипЧислоИзмерения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	ТипЧисло          = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0));
	
	СтавкаНДС = Неопределено;
	ТорговыеПредложенияПереопределяемый.ПолучитьЗначениеСтавкиНДС(Неопределено, СтавкаНДС);
	ТипСтавкаНДС      = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(СтавкаНДС)));
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить("ИндексСтроки",             ТипЧисло);
	ТаблицаРезультата.Колонки.Добавить("ПредложениеИдентификатор", ТипСтрока);
	ТаблицаРезультата.Колонки.Добавить("Наименование",             ТипСтрока);
	ТаблицаРезультата.Колонки.Добавить("Цена",                     ТипЧислоДенежный);
	ТаблицаРезультата.Колонки.Добавить("СтавкаНДС",                ТипСтавкаНДС);
	ТаблицаРезультата.Колонки.Добавить("СрокПоставки",             ТипЧисло);
	ТаблицаРезультата.Колонки.Добавить("Артикул",                  ТипСтрока);
	ТаблицаРезультата.Колонки.Добавить("Упаковка",                 ТипСтрока);
	ТаблицаРезультата.Колонки.Добавить("ЦенаВключаетНДС",          ТипБулево);
	ТаблицаРезультата.Колонки.Добавить("Поставщик",                ТипСтрока);
	ТаблицаРезультата.Колонки.Добавить("ПоставщикИНН",             ТипСтрока);
	ТаблицаРезультата.Колонки.Добавить("ПоставщикКПП",             ТипСтрока);
	ТаблицаРезультата.Колонки.Добавить("ЛучшаяЦена",               ТипБулево);
	ТаблицаРезультата.Колонки.Добавить("ЛучшийСрок",               ТипБулево);
	ТаблицаРезультата.Колонки.Добавить("МинимальнаяЦена",          ТипЧислоДенежный);
	ТаблицаРезультата.Колонки.Добавить("МаксимальнаяЦена",         ТипЧислоДенежный);
	ТаблицаРезультата.Колонки.Добавить("МинимальныйСрокПоставки",  ТипЧислоИзмерения);
	ТаблицаРезультата.Колонки.Добавить("МаксимальныйСрокПоставки", ТипЧислоИзмерения);
	ТаблицаРезультата.Колонки.Добавить("КоличествоПредложений",    ТипЧисло);
	ТаблицаРезультата.Колонки.Добавить("ПоставщикИдентификатор",   ТипСтрока);
	
	Возврат ТаблицаРезультата;

КонецФункции

// Возвращает структуру таблицы, в которой будут возвращены найденные торговые предложения.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица в которую будет помещен результат поиска.
//
Функция ОписаниеРезультатаПоискаТорговыхПредложений()
	
	ТипСтрока         = Новый ОписаниеТипов("Строка");
	ТипБулево         = Новый ОписаниеТипов("Булево");
	ТипЧислоДенежный  = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	ТипЧислоИзмерения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	ТипЧисло          = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0));
	ТипВалюта         = Новый ОписаниеТипов("СправочникСсылка.Валюты");
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ПредложениеИдентификатор", ТипСтрока);
	Таблица.Колонки.Добавить("ТоварНаименование",        ТипСтрока);
	Таблица.Колонки.Добавить("Описание",                 ТипСтрока);
	Таблица.Колонки.Добавить("Артикул",                  ТипСтрока);
	Таблица.Колонки.Добавить("ЕдиницаИзмерения",         ТипСтрока);
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияКод",      ТипСтрока);
	Таблица.Колонки.Добавить("Характеристика",           ТипСтрока);
	Таблица.Колонки.Добавить("Цена",                     ТипЧислоДенежный); // -1 цена по запросу.
	Таблица.Колонки.Добавить("ПоставщикНаименование",    ТипСтрока);
	Таблица.Колонки.Добавить("ПоставщикИдентификатор",   ТипСтрока);
	Таблица.Колонки.Добавить("ПоставщикИНН",             ТипСтрока);
	Таблица.Колонки.Добавить("ПоставщикКПП",             ТипСтрока);
	Таблица.Колонки.Добавить("Валюта",                   ТипВалюта);
	Таблица.Колонки.Добавить("СрокПоставки",             ТипЧисло); // -1 не известен.
	Таблица.Колонки.Добавить("Остаток",                  ТипЧисло); // 0 не известен, 1 мало, 2 достаточно, 3 много.
	
	Возврат Таблица;
	
КонецФункции

// Возвращает структуру таблицы, в которой будут храниться картинки для выгрузки.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с картинками и свойствами.
//
Функция ОписаниеТаблицыКартинок()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Картинка"); // Ссылка.
	Таблица.Колонки.Добавить("ИдентификаторКартинки", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДатаИзмененияКартинки", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("Расширение",            Новый ОписаниеТипов("Строка"));
	Таблица.Индексы.Добавить("ИдентификаторКартинки");
	
	Возврат Таблица;
		
КонецФункции

// Получение структуры реквизитов сопоставления рубрикатора.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица реквизитов с указанными типами колонок.
//
Функция ОписаниеРеквизитовСопоставленияРубрикатора()
	
	ТипСтрока        = Новый ОписаниеТипов("Строка");
	ТипБулево        = Новый ОписаниеТипов("Булево");
	ТипОписаниеТипов = Новый ОписаниеТипов("ОписаниеТипов");
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("РеквизитОбъекта");
	Таблица.Колонки.Добавить("ИдентификаторРеквизитаКатегории", ТипСтрока);
	Таблица.Колонки.Добавить("ПредставлениеРеквизитаКатегории", ТипСтрока);
	Таблица.Колонки.Добавить("Сопоставлено",                    ТипСтрока);
	Таблица.Колонки.Добавить("ТипЗначения",                     ТипОписаниеТипов);
	Таблица.Колонки.Добавить("ТипРеквизитаРубрикатора",         ТипСтрока);
	Таблица.Колонки.Добавить("ВозможноСопоставление",           ТипБулево);
	
	Возврат Таблица;
	
КонецФункции

// Описание настроек поиска по товарам
// 
// Возвращаемое значение:
//  Структура - описание структуры для хранения настроек поиска по товарам.
//
Функция ОписаниеНастроекПоискаПоТоварам()
	
	Результат = Новый Структура;
	Результат.Вставить("ПревышениеМинимальнойЦены",     25);
	Результат.Вставить("МаксимальныйСрокПоставки",       7);
	Результат.Вставить("ОграничениеТорговыхПредложений", 5);
	Результат.Вставить("ПоискПоНаименованию",   Истина);
	Результат.Вставить("ПоискПоАртикулу",       Ложь);
	Результат.Вставить("ПоискПоШтрихКоду",      Ложь);
	Результат.Вставить("ПоискПоХарактеристике", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Описание подсказок сервиса.
// 
// Возвращаемое значение:
//  Структура - описание данных для подсказок.
//
Функция ОписаниеПодсказокСервиса()
	
	Подсказки = Новый Структура;
	Подсказки.Вставить("Код",        "");
	Подсказки.Вставить("Заголовок",  "");
	Подсказки.Вставить("Содержание", "");
	Подсказки.Вставить("ДействиеРегистрация", Ложь);
	Подсказки.Вставить("ДействиеПубликация",  Ложь);
	Подсказки.Вставить("ДействиеВыгрузка",    Ложь);
	Подсказки.Вставить("ДействиеПриглашение", Ложь);
	Подсказки.Вставить("ДействиеПоиск",       Ложь);
	Подсказки.Вставить("Действия",            Новый Массив); // Массив действий.
	Подсказки.Вставить("ДополнительныеПараметры", Новый Структура); // Массив действий.
	Подсказки.Вставить("Основание",           Неопределено); // Заполняется по контексту формы.
	Подсказки.Вставить("РежимПоставщика",     Ложь); // Заполняется по контексту формы.
	Подсказки.Вставить("РежимПокупателя",     Ложь); // Заполняется по контексту формы.
	
	Возврат Подсказки;
	
КонецФункции

// Описание таблицы товаров для поиска.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица товаров для поиска.
//
Функция ОписаниеТаблицыТоваровДляПоиска()
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура",        Справочники.ТипВсеСсылки());
	Товары.Колонки.Добавить("Характеристика",      Справочники.ТипВсеСсылки());
	Товары.Колонки.Добавить("Упаковка",            Справочники.ТипВсеСсылки());
	Товары.Колонки.Добавить("Количество",          Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("УпаковкаКод",         Новый ОписаниеТипов("Строка"));
	Товары.Колонки.Добавить("ЕдиницаИзмеренияКод", Новый ОписаниеТипов("Строка"));
	Товары.Колонки.Добавить("УпаковкаЧислитель",   Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("УпаковкаЗнаменатель", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("Артикул",             Новый ОписаниеТипов("Строка"));
	Товары.Колонки.Добавить("Наименование",        Новый ОписаниеТипов("Строка"));
	Товары.Колонки.Добавить("Штрихкоды",           Новый ОписаниеТипов("Массив"));
	
	Возврат Товары;
	
КонецФункции

#КонецОбласти

#Область ПреобразованиеДанных

// Получение значение JSON простого типа (строка, число, дата, булево).
//
// Параметры:
//  Значение - Произвольный - значение преобразования.
// 
// Возвращаемое значение:
//  Строка, Число, Дата, Булево - преобразованное значение.
//
Функция ЗначениеJSON(Знач Значение)
	
	Если ТипЗнч(Значение) = Тип("Дата") Тогда
		Значение = Формат(Значение, "ДФ=yyyy-MM-dd; ДП=null");
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") И Значение = 0 Тогда
		Значение = Строка(Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Чтение значения объекта XTDO в запись JSON.
//
// Параметры:
//  ОбъектXDTO	 - Произвольный - элемент XDTO.
//  ЗаписьJSON	 - ЗаписьJSON - запись JSON.
//  Уровень		 - Число - уровень вложенности.
//
Процедура ПрочитатьОбъектXDTOВЗаписьJSON(Знач ОбъектXDTO, ЗаписьJSON, Знач Уровень = 0)
	
	Если ТипЗнч(ОбъектXDTO) = Тип("СписокXDTO") Тогда
		Если ОбъектXDTO.Количество() Тогда
			Если Уровень > 0 Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства(ОбъектXDTO.ВладеющееСвойство.Имя);
			КонецЕсли;
			ЗаписьJSON.ЗаписатьНачалоМассива();
			Для каждого ЭлементСпискаXDTO Из ОбъектXDTO Цикл
				ПрочитатьОбъектXDTOВЗаписьJSON(ЭлементСпискаXDTO, ЗаписьJSON, Уровень);
			КонецЦикла;
			ЗаписьJSON.ЗаписатьКонецМассива();
		Иначе
			ЗаписьJSON.ЗаписатьНачалоМассива();
			ЗаписьJSON.ЗаписатьКонецМассива();
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO") Тогда
		Если Уровень > 0 Или ОбъектXDTO.Свойства().Количество() > 1 Тогда
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
		КонецЕсли;
		Для каждого СвойствоXDTO Из ОбъектXDTO.Свойства() Цикл
			Если ТипЗнч(ОбъектXDTO[СвойствоXDTO.Имя]) = Тип("СписокXDTO") Тогда
				Если СвойствоXDTO.НижняяГраница > 0 
					ИЛИ ОбъектXDTO[СвойствоXDTO.Имя].Количество() <> 0 
					ИЛИ Уровень = -1 Тогда
					ПрочитатьОбъектXDTOВЗаписьJSON(ОбъектXDTO.ПолучитьСписок(СвойствоXDTO.Имя), ЗаписьJSON, Уровень + 1);
				КонецЕсли;
			ИначеЕсли ТипЗнч(ОбъектXDTO[СвойствоXDTO.Имя]) = Тип("ОбъектXDTO") Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства(СвойствоXDTO.Имя);
				ПрочитатьОбъектXDTOВЗаписьJSON(ОбъектXDTO.Получить(СвойствоXDTO.Имя), ЗаписьJSON, Уровень + 1);
			Иначе	
				ЗначениеСвойства = ЗначениеJSON(ОбъектXDTO.Получить(СвойствоXDTO.Имя));
				Если НЕ ЗначениеЗаполнено(ЗначениеСвойства) И СвойствоXDTO.НижняяГраница = 0 Тогда
					Продолжить;
				КонецЕсли;
				ЗаписьJSON.ЗаписатьИмяСвойства(СвойствоXDTO.Имя);	
				ЗаписьJSON.ЗаписатьЗначение(ЗначениеСвойства);
			КонецЕсли;
		КонецЦикла;
		Если Уровень > 0 Или ОбъектXDTO.Свойства().Количество() > 1 Тогда
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОбъектXDTO) <> Неопределено Тогда
		ЗаписьJSON.ЗаписатьЗначение(ЗначениеJSON(ОбъектXDTO));
	КонецЕсли;
	
КонецПроцедуры

// Приведение к типу значения рубрикатора.
//
// Параметры:
//  Значение		 - Произвольный - значение рубрикатора.
//  ТипРубрикатора	 - Строка - тип значения рубрикатора (BOOLEAN, NUMBER).
// 
// Возвращаемое значение:
//  Булево, Число - возвращаемое значение по типу.
//
Функция ПривестиКТипуЗначениеРубрикатора(Знач Значение, Знач ТипРубрикатора)
	
 	Если ВРег(ТипРубрикатора) = "BOOLEAN" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Булево");
		Результат = ОписаниеТипа.ПривестиЗначение(Значение);
	ИначеЕсли ВРег(ТипРубрикатора) = "NUMBER" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		Результат = ОписаниеТипа.ПривестиЗначение(Значение);
	ИначеЕсли ВРег(ТипРубрикатора) = "ENUMERATION" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Строка");
		Результат = ОписаниеТипа.ПривестиЗначение(Значение);
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Приведение массива структур в таблицу значений.
//
// Параметры:
//  Источник		 - Массив - коллекция структур данных, первый элемент определяют состав колонок и типов.
//  СоставКолонок	 - Структура - коллекция возвращаемых колонок таблицы, ключ описывает имя колонки до преобразования,
//                                 значение описывает новое имя колонки.
//  Отбор			 - Структура - отбор данных для преобразования по ключу и значению.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - преобразованные данные.
//
Функция МассивСтруктурВТаблицуЗначений(Источник, СоставКолонок, Отбор)
	
	Если Не ЗначениеЗаполнено(Источник) ИЛИ ТипЗнч(Источник) <> Тип("Массив")
		ИЛИ Источник.Количество() = 0 ИЛИ ТипЗнч(Источник[0]) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Инициализация таблицы значений.
	Таблица = Новый ТаблицаЗначений;
	Для каждого ЭлементКоллекции Из Источник[0] Цикл
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(ЭлементКоллекции.Значение));
		Таблица.Колонки.Добавить(ЭлементКоллекции.Ключ, Новый ОписаниеТипов(МассивТипов), ЭлементКоллекции.Ключ);
	КонецЦикла;
	
	// Заполнение таблицы.
	Для каждого ЭлементКоллекции Из Источник Цикл
		Пропустить = Ложь;
		Для каждого ЭлементОтбора Из Отбор Цикл
			Если ЭлементКоллекции[ЭлементОтбора.Ключ] <> ЭлементОтбора.Значение Тогда
				Пропустить = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Пропустить Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), ЭлементКоллекции);
	КонецЦикла;
	
	// Переименование колонок.
	Для каждого ЭлементКоллекции Из Источник[0] Цикл
		ИмяКолонки = ЭлементКоллекции.Ключ;
		Если СоставКолонок.Свойство(ИмяКолонки) Тогда
			Таблица.Колонки[ИмяКолонки].Имя = СоставКолонок[ИмяКолонки]; // Переименование колонки
		Иначе
			Таблица.Колонки.Удалить(Таблица.Колонки[ИмяКолонки]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

// Преобразование объекта XDTO в формат JSON.
//
// Параметры:
//  ОбъектXDTO	 - ОбъектXDTO - объект данных модели XDTO.
//  Уровень		 - Число - уровень вложенности.
// 
// Возвращаемое значение:
//  Строка - строка значения в формате JSON.
//
Функция ОбъектXDTOВСтрокуJSON(Знач ОбъектXDTO, Знач Уровень = 0)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ЗаписьJSON.УстановитьСтроку();
	
	ПрочитатьОбъектXDTOВЗаписьJSON(ОбъектXDTO, ЗаписьJSON, Уровень);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

#КонецОбласти

#Область ОбменДанными

Функция ТипXDTO(ИмяТипа)
	
	Возврат ФабрикаXDTO.Тип("http://1cbn.ru/offers/XMLSchema", ИмяТипа)
	
КонецФункции

// Синхронизация торговых предложения с сервисом.
//
// Параметры:
//  КоличествоПовторяющихсяДанных	 - Число - количество выгруженных данных.
//
Процедура СинхронизироватьТорговыеПредложения(КоличествоПовторяющихсяДанных)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть") Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОрганизацииБизнесСеть.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияСинхронизации.ТорговоеПредложение.Ссылка КАК ТорговоеПредложение,
	|	СостоянияСинхронизации.Организация КАК Организация,
	|	СостоянияСинхронизации.Организация.ИНН КАК ИНН,
	|	СостоянияСинхронизации.Организация.КПП КАК КПП,
	|	СостоянияСинхронизации.УведомлятьОЗаказах КАК УведомлятьОЗаказах,
	|	СостоянияСинхронизации.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	СостоянияСинхронизации.ДополнительноеОписание КАК ДополнительноеОписание,
	|	СостоянияСинхронизации.ВыгружатьКартинки КАК ВыгружатьКартинки,
	|	СостоянияСинхронизации.ПубликоватьЦены КАК ПубликоватьЦены,
	|	СостоянияСинхронизации.ПубликоватьСрокиПоставки КАК ПубликоватьСрокиПоставки,
	|	СостоянияСинхронизации.ПубликоватьОстатки КАК ПубликоватьОстатки,
	|	ВЫБОР
	|		КОГДА СостоянияСинхронизации.ТорговоеПредложение.ПометкаУдаления
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДействияСинхронизацииТорговыеПредложения.Удаление)
	|		ИНАЧЕ СостоянияСинхронизации.ДействиеСинхронизации
	|	КОНЕЦ КАК ДействиеСинхронизации
	|ИЗ
	|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизации
	|ИТОГИ ПО
	|	Организация";
	
	ИННОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	КППОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".ИНН", "." + ИННОрганизации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".КПП", "." + КППОрганизации);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	ПодключенныеОрганизации = ПакетЗапроса[0].Выгрузить().ВыгрузитьКолонку("Организация");
	ТорговыеПредложенияПоОрганизациям = ПакетЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаОпераций = Новый ТаблицаЗначений;
	ТаблицаОпераций.Колонки.Добавить("ТорговоеПредложение");
	ТаблицаОпераций.Колонки.Добавить("Организация");
	ТаблицаОпераций.Колонки.Добавить("Дата");
	ТаблицаОпераций.Колонки.Добавить("Статус");
	ТаблицаОпераций.Колонки.Добавить("ОписаниеОшибки");
	ТаблицаОпераций.Колонки.Добавить("ДействиеСинхронизации");
	
	ТаблицаКартинок = ОписаниеТаблицыКартинок();
	
	Пока ТорговыеПредложенияПоОрганизациям.Следующий() Цикл
		
		ТекстОшибки = "";
		Если ПустаяСтрока(ТорговыеПредложенияПоОрганизациям.ИНН) Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Для организации %1 не указан ИНН.'"),
				СокрЛП(ТорговыеПредложенияПоОрганизациям.Организация));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		ИначеЕсли ПодключенныеОрганизации.Найти(ТорговыеПредложенияПоОрганизациям.Организация) = Неопределено Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Организации %1 не зарегистрирована в сервисе.'"),
				СокрЛП(ТорговыеПредложенияПоОрганизациям.Организация));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			
			ПакетыТорговыхПредложений = ТорговыеПредложенияПоОрганизациям.Выбрать();
			Пока ПакетыТорговыхПредложений.Следующий() Цикл
				СтрокаОперации = ТаблицаОпераций.Добавить();
				СтрокаОперации.ТорговоеПредложение   = ПакетыТорговыхПредложений.ТорговоеПредложение;
				СтрокаОперации.Организация           = ПакетыТорговыхПредложений.Организация;
				СтрокаОперации.Дата                  = ТекущаяДатаСеанса();
				СтрокаОперации.Статус                = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ОшибкаСинхронизации;
				СтрокаОперации.ОписаниеОшибки        = ТекстОшибки;
				СтрокаОперации.ДействиеСинхронизации = ПакетыТорговыхПредложений.ДействиеСинхронизации;
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		УдалитьВсеТорговыеПредложенияПоОрганизации(ТорговыеПредложенияПоОрганизациям, Отказ);
		
		ТаблицаКартинок.Очистить();
		
		Отказ = Ложь;
		ПакетыТорговыхПредложений = ТорговыеПредложенияПоОрганизациям.Выбрать();
		Пока ПакетыТорговыхПредложений.Следующий() Цикл
			
			КоличествоПозиций = 0;
			ПакетПредложенийXDTO = СформироватьПакетПредложенийXDTO(ПакетыТорговыхПредложений, ТаблицаКартинок,
				КоличествоПозиций, Отказ);
			
			СтрокаОперации = ТаблицаОпераций.Добавить();
			СтрокаОперации.ТорговоеПредложение   = ПакетыТорговыхПредложений.ТорговоеПредложение;
			СтрокаОперации.Организация           = ПакетыТорговыхПредложений.Организация;
			СтрокаОперации.Дата                  = ТекущаяДатаСеанса();
			СтрокаОперации.ДействиеСинхронизации = ПакетыТорговыхПредложений.ДействиеСинхронизации;
			
			Если Отказ Тогда
				ТекстОшибки                   = НСтр("ru = 'Ошибка публикации.'");
				СтрокаОперации.Статус         = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ОшибкаСинхронизации;
				СтрокаОперации.ОписаниеОшибки = ТекстОшибки;
			ИначеЕсли ПакетПредложенийXDTO = Неопределено Тогда
				ТекстОшибки                   = НСтр("ru = 'Отсутствует товар для публикации.'");
				СтрокаОперации.Статус         = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ОшибкаСинхронизации;
				СтрокаОперации.ОписаниеОшибки = ТекстОшибки;
			Иначе
				КоличествоПовторяющихсяДанных = КоличествоПовторяющихсяДанных + КоличествоПозиций;
			КонецЕсли;
			
		КонецЦикла;
		
		Отказ = Ложь;
		
		// Выгрузка картинок.
		Если ТаблицаКартинок.Количество() Тогда
			
			// Получение списка невыгруженных картинок.
			ПараметрыМетода = Новый Структура("ТаблицаКартинок", ТаблицаКартинок);
			ПараметрыКоманды = ПараметрыКомандыСписокОтсутствующихКартинок(ПараметрыМетода, Отказ);
			Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			// Отправка картинок в сервис.
			Для каждого ИдентификаторКартинки Из Результат.Данные Цикл
				
				СтрокаКартинки = ТаблицаКартинок.Найти(ИдентификаторКартинки, "ИдентификаторКартинки");
				Если СтрокаКартинки = Неопределено Тогда
					ВызватьИсключение СтрШаблон(НСтр("ru = 'Неверный идентификатор картинки %1'"), ИдентификаторКартинки);
				КонецЕсли;
				
				ПараметрыМетода = Новый Структура;
				ПараметрыМетода.Вставить("Картинка",              СтрокаКартинки.Картинка);
				ПараметрыМетода.Вставить("ИдентификаторКартинки", СтрокаКартинки.ИдентификаторКартинки);
				ПараметрыМетода.Вставить("ДатаИзмененияКартинки", СтрокаКартинки.ДатаИзмененияКартинки);
				ПараметрыМетода.Вставить("Расширение",            СтрокаКартинки.Расширение);
				ПараметрыКоманды = ПараметрыКомандыВыгрузитьКартинку(ПараметрыМетода, Отказ);
				Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
				Если Отказ Тогда
					Возврат;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		// Конец Выгрузка картинок.
		
		ПакетыТорговыхПредложений.Сбросить();
		Пока ПакетыТорговыхПредложений.Следующий() Цикл
			СтрокаОперации = ТаблицаОпераций.Найти(ПакетыТорговыхПредложений.ТорговоеПредложение, "ТорговоеПредложение");
			СтрокаОперации.Дата = ТекущаяДатаСеанса();
			Если Не ЗначениеЗаполнено(СтрокаОперации.Статус) Тогда
				СтрокаОперации.Статус = ?(Не Отказ,
					Перечисления.СостоянияСинхронизацииТорговыеПредложения.Синхронизировано,
					Перечисления.СостоянияСинхронизацииТорговыеПредложения.ОшибкаСинхронизации);
				СтрокаОперации.ОписаниеОшибки = Результат;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого СтрокаОперации Из ТаблицаОпераций Цикл
		МенеджерЗаписи = РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТорговоеПредложение = СтрокаОперации.ТорговоеПредложение;
		МенеджерЗаписи.Организация         = СтрокаОперации.Организация;
		МенеджерЗаписи.Прочитать();
		Если СтрокаОперации.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.Удаление Тогда
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Удалить();
			КонецЕсли;
		Иначе
			МенеджерЗаписи.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.ПустаяСсылка();
			МенеджерЗаписи.Состояние         = СтрокаОперации.Статус;
			МенеджерЗаписи.ДатаСинхронизации = СтрокаОперации.Дата;
			МенеджерЗаписи.ОписаниеОшибки    = СтрокаОперации.ОписаниеОшибки;
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Удаление торговых предложений по организации.
//
// Параметры:
//  ТорговыеПредложенияПоОрганизациям	 - Произвольный - коллекция торговых предложений по организации.
//  Отказ								 - Булево - результат выполнения.
//
Процедура УдалитьВсеТорговыеПредложенияПоОрганизации(ТорговыеПредложенияПоОрганизациям, Отказ)
	
	ProductList = ФабрикаXDTO.Создать(ТипXDTO("ProductList"));
	ПараметрыМетода = Новый Структура("Организация, ИНН, КПП, Данные");
	ЗаполнитьЗначенияСвойств(ПараметрыМетода, ТорговыеПредложенияПоОрганизациям);
	ПараметрыМетода.Вставить("Данные", ОбъектXDTOВСтрокуJSON(ProductList, -1));
	ПараметрыКоманды = ПараметрыКомандыПолнаяСинхронизацияТорговыхПредложений(ПараметрыМетода, Отказ);
	Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
КонецПроцедуры

// Выгрузка штрихкодов для получения подсказок сервиса 1С:Бизнес-сеть.
//
Процедура ОбновитьПодсказкиТорговыеПредложения(КоличествоПовторяющихсяДанных)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть") Тогда
		Возврат;
	КонецЕсли;
	
	// Выбрать подключенные организации к Бизнес-сети.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОрганизацииБизнесСеть.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть";
	
	Организации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
	// Сформировать таблицу штрихкодов в переопределяемом модуле.
	Штрихкоды = Новый ТаблицаЗначений;
	Штрихкоды.Колонки.Добавить("Организация");
	Штрихкоды.Колонки.Добавить("Штрихкод");
	Штрихкоды.Колонки.Добавить("Наименование");
	Штрихкоды.Колонки.Добавить("РежимПоставщика");
	Штрихкоды.Колонки.Добавить("РежимПокупателя");
	
	УстановитьПривилегированныйРежим(Истина);
	РежимПоставщика = Константы.ПоказыватьПодсказкиПоставщиковБизнесСеть.Получить();
	РежимПокупателя = Константы.ПоказыватьПодсказкиПокупателейБизнесСеть.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТорговыеПредложенияПереопределяемый.ЗаполнитьШтрихкодыДляВыгрузки(Организации, Истина, Истина, Штрихкоды);
	
	Если Штрихкоды.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Выгрузка данных производится отдельно для каждой организации.
	Для каждого Организация Из Организации Цикл
		
		Отказ = Ложь;
		
		// Подготовить данные для запроса.
		ШтрихкодыXDTO = ФабрикаXDTO.Создать(ТипXDTO("ProductBarcodeList"));
		ШтрихкодыОрганизация = Штрихкоды.НайтиСтроки(Новый Структура("Организация", Организация));
		Для каждого СтрокаШтрихкода Из ШтрихкодыОрганизация Цикл
			
			СтрокаШтрихкодаXDTO = ФабрикаXDTO.Создать(ТипXDTO("ProductBarcode"));
			СтрокаШтрихкодаXDTO.barcode = СтрокаШтрихкода.Штрихкод;
			СтрокаШтрихкодаXDTO.productName = СтрокаШтрихкода.Наименование;
			Если СтрокаШтрихкода.РежимПоставщика И СтрокаШтрихкода.РежимПокупателя Тогда
				СтрокаШтрихкодаXDTO.type = 3; // Товар и поставляется и закупается.
			ИначеЕсли СтрокаШтрихкода.РежимПоставщика И Не СтрокаШтрихкода.РежимПокупателя Тогда
				СтрокаШтрихкодаXDTO.type = 1; // Товар только поставляется.
			ИначеЕсли Не СтрокаШтрихкода.РежимПоставщика И СтрокаШтрихкода.РежимПокупателя Тогда
				СтрокаШтрихкодаXDTO.type = 2; // Товар только закупается.
			Иначе
				Продолжить;
			КонецЕсли;
			
			ШтрихкодыXDTO.ProductBarcodes.Добавить(СтрокаШтрихкодаXDTO);
			
		КонецЦикла;
		
		Данные = ОбъектXDTOВСтрокуJSON(ШтрихкодыXDTO, -1);
		ПараметрыМетода = Новый Структура("Организация, Данные", Организация, Данные);
		ПараметрыКоманды = ПараметрыКомандыВыгрузкаШтрихкодовДляПодсказок(ПараметрыМетода, Отказ);
		Если Отказ Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка обновления подсказок торговых предложений'");
		КонецЕсли;

		Результат = БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		Если Отказ Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка обновления подсказок торговых предложений'");
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоПовторяющихсяДанных = Штрихкоды.Количество();

КонецПроцедуры

// Формирование пакет предложений XDTO для синхронизации.
//
// Параметры:
//  ПараметрыТорговогоПредложения	 - Структура - параметры для синхронизации.
// 
// Возвращаемое значение:
//  ОбъектXTDO - объект выгрузки торговых предложений.
//
Функция СформироватьПакетПредложенийXDTO(Знач ПараметрыТорговогоПредложения, ТаблицаКартинок, КоличествоПозиций, Отказ)
	
	ТорговоеПредложение    = ПараметрыТорговогоПредложения.ТорговоеПредложение;
	ДействиеСинхронизации  = ПараметрыТорговогоПредложения.ДействиеСинхронизации;
	ДополнительноеОписание = ПараметрыТорговогоПредложения.ДополнительноеОписание;
	
	Campaign = ФабрикаXDTO.Создать(ТипXDTO("Campaign"));
	Campaign.id = Строка(ТорговоеПредложение.УникальныйИдентификатор());
	
	Если ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.Удаление Тогда
		Campaign.active = Ложь;
		Возврат Campaign;
	КонецЕсли;
	
	// Формирование торгового предложения.
	ПакетПредложений = ОписаниеПакетаПредложений();
	ТорговыеПредложенияПереопределяемый.ЗаполнитьПакетПредложений(ТорговоеПредложение, ПакетПредложений);
	
	Если ПакетПредложений.Товары.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Campaign.active      = Истина;
	Campaign.validFrom   = ПакетПредложений.ДатаНачалаДействия;
	Campaign.saleWithNds = ПакетПредложений.ЦенаВключаетНДС;
	
	ОкончаниеДействия = ПакетПредложений.ДатаОкончанияДействия;
	Если Не ЗначениеЗаполнено(ОкончаниеДействия) Тогда
		ОкончаниеДействия = ДобавитьМесяц(Макс(ПакетПредложений.ДатаНачалаДействия, ТекущаяДатаСеанса()), 1);
	ИначеЕсли ОкончаниеДействия < НачалоДня(ТекущаяДатаСеанса()) Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка публикации торговых предложений: Период публикации завершен.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстОшибки, "БизнесСеть",
			УровеньЖурналаРегистрации.Предупреждение,, ПараметрыТорговогоПредложения.ТорговоеПредложение);
		Возврат Неопределено;
	КонецЕсли;
	Campaign.validTo = ОкончаниеДействия;
	
	// Заполнение контактной информации.
	ContactInfo  = ФабрикаXDTO.Создать(ТипXDTO("ContactInfo"));
	Organization = ФабрикаXDTO.Создать(ТипXDTO("Organization"));
	Person       = ФабрикаXDTO.Создать(ТипXDTO("Person"));
	
	ТекстОшибки = "";
	ИдентификаторыОрганизации = БизнесСеть.ИдентификаторыУчастника(ПакетПредложений.КонтактыОрганизации.ИНН,
		ПакетПредложений.КонтактыОрганизации.КПП, ПакетПредложений.Организация, Отказ, ТекстОшибки);
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка публикации торговых предложений:'")
			+ " " + ТекстОшибки);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			ТекстОшибки, "БизнесСеть");
		Возврат Неопределено;
	КонецЕсли;
	
	Organization.inn   = ИдентификаторыОрганизации.ИНН;
	Organization.kpp   = ИдентификаторыОрганизации.КПП;
	Organization.phone = ПакетПредложений.КонтактыОрганизации.Телефон;
	Organization.email = ПакетПредложений.КонтактыОрганизации.ЭлектроннаяПочта;
	Organization.site  = ПакетПредложений.КонтактыОрганизации.Сайт;
	
	Person.name  = ПакетПредложений.КонтактноеЛицо.ФИО;
	Person.phone = ПакетПредложений.КонтактноеЛицо.Телефон;
	Person.email = ПакетПредложений.КонтактноеЛицо.ЭлектроннаяПочта;
	
	ContactInfo.organization = Organization;
	ContactInfo.person       = Person;
	
	Если ПараметрыТорговогоПредложения.УведомлятьОЗаказах 
		И Не ПустаяСтрока(ПараметрыТорговогоПредложения.АдресЭлектроннойПочты) Тогда
		ContactInfo.notificationEmail = ПараметрыТорговогоПредложения.АдресЭлектроннойПочты;
	КонецЕсли;
	
	Campaign.contactInfo = ContactInfo;
	
	// Заполнение сегмента контрагентов.
	Для каждого СтрокаКонтрагентов Из ПакетПредложений.СписокКонтрагентов Цикл
		ПропуститьСтроку = Ложь;
		ИдентификаторыКонтрагента = БизнесСеть.ИдентификаторыУчастника(СтрокаКонтрагентов.ИНН,
			СтрокаКонтрагентов.КПП,, ПропуститьСтроку);
		Если ПропуститьСтроку Тогда
			Продолжить;
		КонецЕсли;
		Customer = ФабрикаXDTO.Создать(Campaign.customers.ВладеющееСвойство.Тип);
		Customer.inn = ИдентификаторыКонтрагента.ИНН;
		Customer.kpp = ИдентификаторыКонтрагента.КПП;
		Campaign.customers.Добавить(Customer);
	КонецЦикла;
	
	// Создание торгового предложения.
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ИНН", Organization.inn);
	ПараметрыМетода.Вставить("КПП", Organization.kpp);
	ПараметрыМетода.Вставить("Данные", ОбъектXDTOВСтрокуJSON(Campaign));
	ПараметрыКоманды = ПараметрыКомандыСоздатьТорговоеПредложение(ПараметрыМетода, Отказ);
	БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	Если Отказ Тогда
		Возврат Campaign;
	КонецЕсли;

	// Подготовка параметров для создания набора записей товаров.
	ПараметрыМетода.Вставить("ИдентификаторТорговогоПредложения", Campaign.id);	
	
	// Заполнение позиций торговых предложений.
	Для каждого СтрокаТовары Из ПакетПредложений.Товары Цикл
		
		Если ПараметрыТорговогоПредложения.ПубликоватьЦены И СтрокаТовары.Цена = 0 Тогда
			// Торговые предложения без цен не выгружаются в сервис (если включен режим публикации цен).
			Продолжить;
		КонецЕсли;
		
		Product = ФабрикаXDTO.Создать(ТипXDTO("Product"));
		Product.name           = СтрокаТовары.Наименование;
		Product.currency       = СтрокаТовары.ВалютаКод;
		Product.vendorCode     = СтрокаТовары.Артикул;
		Product.categoryId     = ?(СтрокаТовары.ИдентификаторКатегории = "", "0", СтрокаТовары.ИдентификаторКатегории);
		Если ЗначениеЗаполнено(СтрокаТовары.БазоваяЕдиницаИзмерения) Тогда
			Product.basicUnit = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.БазоваяЕдиницаИзмерения, "Код"));
		Иначе
			Product.basicUnit = СокрЛП(СтрокаТовары.УпаковкаКод);
		КонецЕсли;
		
		Product.unit           = СтрокаТовары.УпаковкаНаименование;
		Product.basicUnitCount = СтрокаТовары.УпаковкаЧислитель;
		Product.unitCount      = СтрокаТовары.УпаковкаЗнаменатель;
		Product.feature        = СтрокаТовары.ХарактеристикаНаименование;
		Product.description    = ДополнительноеОписание;
		Product.feature        = СтрокаТовары.ХарактеристикаНаименование;
		
		Product.id = СтрШаблон("%1#%2#%3#%4",
			Строка(ПараметрыТорговогоПредложения.ТорговоеПредложение.УникальныйИдентификатор()),
			Строка(СтрокаТовары.Номенклатура.УникальныйИдентификатор()),
			?(ЗначениеЗаполнено(СтрокаТовары.Характеристика), Строка(СтрокаТовары.Характеристика.УникальныйИдентификатор()), ""),
			?(ЗначениеЗаполнено(СтрокаТовары.Упаковка), Строка(СтрокаТовары.Упаковка.УникальныйИдентификатор()), ""));
			
		Если ЗначениеЗаполнено(СтрокаТовары.СтавкаНДС) Тогда
			ТорговыеПредложенияПереопределяемый.ПолучитьИмяСтавкиНДС(СтрокаТовары.СтавкаНДС, Product.nds);
		КонецЕсли;
		
		Если ПараметрыТорговогоПредложения.ПубликоватьЦены Тогда
			Product.price = СтрокаТовары.Цена * 100; // Цены в сервисе хранятся в копейках.
		КонецЕсли;
		
		Если ПараметрыТорговогоПредложения.ПубликоватьОстатки Тогда
			Product.remainderCount = Окр(СтрокаТовары.Количество); // Количество свободных остатков.
			Product.remainderHint  = СтрокаТовары.Остаток; // Количество мало-много.
		КонецЕсли;
		
		Если ПараметрыТорговогоПредложения.ПубликоватьСрокиПоставки Тогда
			Product.deliveryTime = СтрокаТовары.СрокПоставки;
		КонецЕсли;
		
		Если ПараметрыТорговогоПредложения.ВыгружатьКартинки И ЗначениеЗаполнено(СтрокаТовары.Картинка) Тогда
			НоваяСтрокаКартинок = ТаблицаКартинок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаКартинок, СтрокаТовары);
			НоваяСтрокаКартинок.ИдентификаторКартинки = СтрокаТовары.Картинка.УникальныйИдентификатор();
			Product.pictureId = НоваяСтрокаКартинок.ИдентификаторКартинки;
		КонецЕсли;
		
		// Заполнение атрибутов номенклатуры.
		Для каждого СтрокаАтрибуты Из СтрокаТовары.Атрибуты Цикл
			Если ЗначениеЗаполнено(СтрокаАтрибуты.Значение)
				ИЛИ ЗначениеЗаполнено(СтрокаАтрибуты.ИдентификаторЗначения) Тогда
				Attribute = ФабрикаXDTO.Создать(ТипXDTO("Attribute"));
				Attribute.name        = СтрокаАтрибуты.Наименование;
				Attribute.attributeId = СтрокаАтрибуты.ИдентификаторРеквизитаКатегории;
				Attribute.valueId     = СтрокаАтрибуты.ИдентификаторЗначения;
				Attribute.value       = СтрокаАтрибуты.Значение;
				Product.attributes.Добавить(Attribute);
			КонецЕсли;
		КонецЦикла;
		
		// Заполнение штрих-кодов.
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура",     СтрокаТовары.Номенклатура);
		Отбор.Вставить("Характеристика",   СтрокаТовары.Характеристика);
		Отбор.Вставить("ЕдиницаИзмерения", СтрокаТовары.Упаковка);
		ШтрихКодыНоменклатуры = СтрокаТовары.ШтрихКоды.НайтиСтроки(Отбор);
		Для каждого СтрокаШтрихКодов Из ШтрихКодыНоменклатуры Цикл
			Product.barcodes.Добавить(СтрокаШтрихКодов.Значение);
		КонецЦикла;
		
		Если Campaign.products.Количество() = 1000 Тогда
			
			ПараметрыМетода.Данные = ОбъектXDTOВСтрокуJSON(Campaign.products);
			ПараметрыКоманды = ПараметрыКомандыСоздатьЗаписиТорговогоПредложения(ПараметрыМетода, Отказ);
			БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
			
			КоличествоПозиций = КоличествоПозиций + Campaign.products.Количество();
			
			Если Отказ Тогда
				Возврат Campaign;
			КонецЕсли;
			
			Campaign.products.Очистить();
		КонецЕсли;
		
		Campaign.products.Добавить(Product);
		
	КонецЦикла;
	
	ПараметрыМетода.Данные = ОбъектXDTOВСтрокуJSON(Campaign.products);
	ПараметрыКоманды = ПараметрыКомандыСоздатьЗаписиТорговогоПредложения(ПараметрыМетода, Отказ);
	БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	КоличествоПозиций = КоличествоПозиций + Campaign.products.Количество();
	
	Возврат Campaign;
	
КонецФункции

// Массив товаров для поиска
//
// Параметры:
//  ПараметрыПоиска	 - Структура - параметры поиска, см. ОписаниеНастроекПоискаПоТоварам().
// 
// Возвращаемое значение:
//  Массив - массив объектов XDTO для поиска.
//
Функция ТоварыДляПоискаПоСпискуXDTO(ПараметрыПоиска)
	
	МассивДанных = Новый Массив;
	
	Для каждого СтрокаТовары Из ПараметрыПоиска.Товары Цикл
		
		Если Не (ПараметрыПоиска.ПоискПоНаименованию И ЗначениеЗаполнено(СтрокаТовары.Наименование))
			И Не (ПараметрыПоиска.ПоискПоХарактеристике И ЗначениеЗаполнено(СтрокаТовары.Характеристика))
			И Не (ПараметрыПоиска.ПоискПоАртикулу И ЗначениеЗаполнено(СтрокаТовары.Артикул))
			И Не (ПараметрыПоиска.ПоискПоШтрихКоду И ТипЗнч(СтрокаТовары.ШтрихКоды) = Тип("Массив") И СтрокаТовары.ШтрихКоды.Количество()) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементПоиска = ФабрикаXDTO.Создать(ТипXDTO("ListSearch"));
		ЭлементПоиска.index = ПараметрыПоиска.Товары.Индекс(СтрокаТовары);
		
		Если ПараметрыПоиска.ПоискПоНаименованию И ЗначениеЗаполнено(СтрокаТовары.Наименование) Тогда
			ЭлементПоиска.Установить("productName", СтрокаТовары.Наименование);
		КонецЕсли;
		
		Если ПараметрыПоиска.ПоискПоХарактеристике И ЗначениеЗаполнено(СтрокаТовары.Характеристика) Тогда
			ЭлементПоиска.Установить("productFeature", Строка(СтрокаТовары.Характеристика));
		КонецЕсли;
		
		Если ПараметрыПоиска.ПоискПоАртикулу И ЗначениеЗаполнено(СтрокаТовары.Артикул) Тогда
			ЭлементПоиска.Установить("vendorCode", СтрокаТовары.Артикул);
		КонецЕсли;
		
		Если ПараметрыПоиска.ПоискПоШтрихКоду И ТипЗнч(СтрокаТовары.ШтрихКоды) = Тип("Массив") И СтрокаТовары.ШтрихКоды.Количество() Тогда
			Для каждого ЗначениеМассива Из СтрокаТовары.ШтрихКоды Цикл
				ЭлементПоиска.barcodes.Добавить(ЗначениеМассива);
			КонецЦикла;
		КонецЕсли;
		
		ОбъектЕдиницаИзмерения = ФабрикаXDTO.Создать(ТипXDTO("UnitFilter"));
		Если ЗначениеЗаполнено(СтрокаТовары.ЕдиницаИзмеренияКод) Тогда
			ОбъектЕдиницаИзмерения.basicUnit = СокрЛП(СтрокаТовары.ЕдиницаИзмеренияКод);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТовары.УпаковкаКод) Тогда
			ОбъектЕдиницаИзмерения.basicUnit = СокрЛП(СтрокаТовары.УпаковкаКод);
		Иначе
			ОбъектЕдиницаИзмерения.basicUnit = "NULL";
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТовары.УпаковкаЧислитель) Тогда
			ОбъектЕдиницаИзмерения.basicUnitCount = СтрокаТовары.УпаковкаЧислитель;
		Иначе
			ОбъектЕдиницаИзмерения.basicUnitCount = 1;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТовары.УпаковкаЗнаменатель) Тогда
			ОбъектЕдиницаИзмерения.unitCount = СтрокаТовары.УпаковкаЗнаменатель;
		Иначе
			ОбъектЕдиницаИзмерения.unitCount = 1;
		КонецЕсли;
		ЭлементПоиска.units.Добавить(ОбъектЕдиницаИзмерения);
		ЭлементПоиска.buyingCount = СтрокаТовары.Количество * Макс(1, СтрокаТовары.УпаковкаЗнаменатель);
		
		МассивДанных.Добавить(ЭлементПоиска);
		
	КонецЦикла;
	
	Возврат МассивДанных;
		
КонецФункции

#КонецОбласти

#Область Прочее

// Добавление элементов управления для формы торговые предложения.
//
// Параметры:
//  Форма			 - УправляемаяФорма - форма объекта торговые предложения, например Справочник.Соглашения.
//  ГруппаЭлементов	 - ГруппаФормы - группа элементов формы для добавления новых элементов.
//
Процедура ДобавитьЭлементыУправленияФормыТорговыеПредложения(Форма, ГруппаЭлементов)

	// Создание реквизитов формы.
	НовыеРеквизитыФормы = Новый Массив;
	РеквизитыФормы = Форма.ПолучитьРеквизиты();
	Реквизиты = Новый Соответствие;
	Для каждого РеквизитФормы Из РеквизитыФормы Цикл
		Реквизиты.Вставить(РеквизитФормы.Имя, РеквизитФормы);
	КонецЦикла;
	
	РеквизитТорговыеПредложенияПубликовать = Новый РеквизитФормы("ТорговыеПредложенияПубликовать",
		Новый ОписаниеТипов("Булево"),, НСтр("ru = 'Публиковать торговые предложения в сервисе'"),	Истина);
		
	Если Реквизиты.Получить(РеквизитТорговыеПредложенияПубликовать.Имя) = Неопределено Тогда
		НовыеРеквизитыФормы.Добавить(РеквизитТорговыеПредложенияПубликовать);
	КонецЕсли;
	Если НовыеРеквизитыФормы.Количество() Тогда
		Форма.ИзменитьРеквизиты(НовыеРеквизитыФормы);
	КонецЕсли;
	
	// Создание/настройка элементов управления.
	
	// Создание общей группы 1С:Бизнес-сеть.
	ЭлементГруппаТорговыеПредложения = ГруппаЭлементов.ПодчиненныеЭлементы.Найти("ГруппаТорговыеПредложения");
	Если ЭлементГруппаТорговыеПредложения = Неопределено Тогда
		ЭлементГруппаТорговыеПредложения = Форма.Элементы.Добавить("ГруппаТорговыеПредложения",
			Тип("ГруппаФормы"), ГруппаЭлементов);
		ЭлементГруппаТорговыеПредложения.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		ЭлементГруппаТорговыеПредложения.Заголовок           = НСтр("ru = '1С:Бизнес-сеть'");
		ЭлементГруппаТорговыеПредложения.Отображение         = ОтображениеОбычнойГруппы.Нет;
		ЭлементГруппаТорговыеПредложения.ОтображатьЗаголовок = Ложь;
		ЭлементГруппаТорговыеПредложения.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	КонецЕсли;
	
	ЭлементыГруппы = ЭлементГруппаТорговыеПредложения.ПодчиненныеЭлементы;
	
	// Флаг Публиковать торговые предложения.
	ЭлементТорговыеПредложенияПубликовать = ЭлементыГруппы.Найти("ТорговыеПредложенияПубликовать");
	Если ЭлементТорговыеПредложенияПубликовать = Неопределено Тогда
		ЭлементТорговыеПредложенияПубликовать = Форма.Элементы.Добавить("ТорговыеПредложенияПубликовать",
			Тип("ПолеФормы"), ЭлементГруппаТорговыеПредложения);
		ЭлементТорговыеПредложенияПубликовать.Вид                = ВидПоляФормы.ПолеФлажка;
		ЭлементТорговыеПредложенияПубликовать.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		ЭлементТорговыеПредложенияПубликовать.ПутьКДанным        = РеквизитТорговыеПредложенияПубликовать.Имя;
		ЭлементТорговыеПредложенияПубликовать.УстановитьДействие("ПриИзменении",
			"Подключаемый_ПриИзменении_ПубликоватьТорговыеПредложения");
	КонецЕсли;
	
	// Гиперссылка Торговые предложения.
	ЭлементТорговыеПредложенияСостояниеОбмена = ЭлементыГруппы.Найти("ТорговыеПредложенияСостояниеОбмена");
	Если ЭлементТорговыеПредложенияСостояниеОбмена = Неопределено Тогда
		ЭлементГиперссылка = Форма.Элементы.Добавить("ТорговыеПредложенияСостояниеОбмена",
			Тип("ДекорацияФормы"), ЭлементГруппаТорговыеПредложения);
		ЭлементГиперссылка.Заголовок = НСтр("ru = 'Торговые предложения состояние обмена'");
		ЭлементГиперссылка.Гиперссылка = Истина;
		ЭлементГиперссылка.УстановитьДействие("Нажатие",
			"Подключаемый_Нажатие_ГиперссылкиТорговыхПредложений");
	КонецЕсли;
	
	// Гиперссылка Дополнительные настройки.
	ЭлементГиперссылка = ЭлементыГруппы.Найти("ТорговыеПредложенияОткрытьНастройкиПубликации");
	Если ЭлементГиперссылка = Неопределено Тогда
		ЭлементГиперссылка = Форма.Элементы.Добавить("ТорговыеПредложенияОткрытьНастройкиПубликации",
			Тип("ДекорацияФормы"), ЭлементГруппаТорговыеПредложения);
		ЭлементГиперссылка.Заголовок = НСтр("ru = 'Настройки публикации торгового предложения'");
		ЭлементГиперссылка.Гиперссылка = Истина;
		ЭлементГиперссылка.УстановитьДействие("Нажатие",
			"Подключаемый_Нажатие_ГиперссылкиТорговыхПредложений");
	КонецЕсли;

КонецПроцедуры

Функция ПоляXDTOРегионаКонтактнойИнформацииСервиса(ЗначенияПолей, СтраныПоиска = Неопределено)
	
	ПоляРегионаXDTO = ФабрикаXDTO.Создать(ТипXDTO("Address"));
	
	ОбъектXDTO = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Адрес);
	Если ОбъектXDTO = Неопределено ИЛИ ОбъектXDTO.Свойства().Получить("Состав") = Неопределено Тогда
		Возврат ПоляРегионаXDTO;
	КонецЕсли;
	
	Если СтраныПоиска = Неопределено Тогда
		СтраныПоиска = Новый Соответствие;
	КонецЕсли;
	
	Если ОбъектXDTO.Состав.Свойства().Получить("Страна") <> Неопределено Тогда
		
		Страна = ОбъектXDTO.Состав.Страна;
		КодСтраны = СтраныПоиска.Получить(Страна);
		Если ПустаяСтрока(КодСтраны) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СтраныМира.Код КАК Код
			|ИЗ
			|	Справочник.СтраныМира КАК СтраныМира
			|ГДЕ
			|	СтраныМира.Наименование = &Наименование";
			Запрос.УстановитьПараметр("Наименование", Страна);
			УстановитьПривилегированныйРежим(Истина);
			Выборка = Запрос.Выполнить().Выбрать();
			УстановитьПривилегированныйРежим(Ложь);
			
			КодСтраны = "";
			Если Выборка.Следующий() Тогда
				КодСтраны = Выборка.Код;
			КонецЕсли;
			СтраныПоиска.Вставить("Страна", КодСтраны);
		КонецЕсли;
		ПоляРегионаXDTO.country = КодСтраны;
		
	КонецЕсли;
	
	СоставАдреса = ОбъектXDTO.Состав.Состав;
	Если ТипЗнч(СоставАдреса) = Тип("ОбъектXDTO") Тогда
		Если СоставАдреса.Свойства().Получить("СубъектРФ") <> Неопределено
			И СоставАдреса.СубъектРФ <> Неопределено Тогда
			ПоляРегионаXDTO.region = СоставАдреса.СубъектРФ;
		КонецЕсли;
		Если СоставАдреса.Свойства().Получить("СвРайМО") <> Неопределено
			И СоставАдреса.СвРайМО <> Неопределено Тогда
			Если ТипЗнч(СоставАдреса.СвРайМО) = Тип("ОбъектXDTO")
				И СоставАдреса.СвРайМО.Свойства().Получить("Район") <> Неопределено Тогда
				ПоляРегионаXDTO.area = СоставАдреса.СвРайМО.Район;
			Иначе
				ПоляРегионаXDTO.area = СоставАдреса.СвРайМО;
			КонецЕсли;
		КонецЕсли;
		Если СоставАдреса.Свойства().Получить("Город") <> Неопределено
			И СоставАдреса.Город <> Неопределено Тогда
			ПоляРегионаXDTO.city = СоставАдреса.Город;
		КонецЕсли;
		Если СоставАдреса.Свойства().Получить("НаселПункт") <> Неопределено
			И СоставАдреса.НаселПункт <> Неопределено Тогда
			ПоляРегионаXDTO.place = СоставАдреса.НаселПункт;
		КонецЕсли;
		
		Если СоставАдреса.Свойства().Получить("ДопАдрЭл") <> Неопределено
			И СоставАдреса.ДопАдрЭл.Количество() Тогда
			ПомещениеXDTO = Неопределено;
			Для каждого ПомещениеАдрес Из СоставАдреса.ДопАдрЭл Цикл
				Если ЗначениеЗаполнено(ПомещениеАдрес.ТипАдрЭл) Тогда
					// Это индекс.
					ПоляРегионаXDTO.postalCode = ПомещениеАдрес.Значение;
				ИначеЕсли ПомещениеАдрес.Номер <> Неопределено Тогда
					// Это номер дома.
					ПомещениеXDTO = ФабрикаXDTO.Создать(ТипXDTO("HouseElement"));
					ПомещениеXDTO.Установить("type", ПомещениеАдрес.Номер.Тип);
					ПомещениеXDTO.Установить("number", ПомещениеАдрес.Номер.Значение);
				КонецЕсли;
			КонецЦикла;
			Если ПомещениеXDTO <> Неопределено Тогда
				ПоляРегионаXDTO.houseElements.Добавить(ПомещениеXDTO);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПоляРегионаXDTO;
	
КонецФункции

// Обновление подсказок торговых предложений торговых предложений в сервисе 1С:Бизнес-сеть.
//
Процедура ОбновлениеПодсказокТорговыхПредложений()
	
	// &ЗамерПроизводительности
	ОписаниеЗамера = ЭлектронноеВзаимодействиеСлужебный.НачатьЗамерВремени(
		"ОбщийМодуль.ТорговыеПредложения.ОбновлениеПодсказокТорговыхПредложений");
	
	КоличествоПовторяющихсяДанных = 0;

	ОбновитьПодсказкиТорговыеПредложения(КоличествоПовторяющихсяДанных);

	// &ЗамерПроизводительности
	ЭлектронноеВзаимодействиеСлужебный.ЗакончитьЗамерВремени(ОписаниеЗамера,
		Макс(1, КоличествоПовторяющихсяДанных /1000)); // Пакет по 1000 записей.
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
