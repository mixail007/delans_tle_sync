////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с номенклатурой".
// ОбщийМодуль.РаботаСНоменклатуройСлужебный.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтерфейсныеМетоды

// Получение данных по номенклатуре.
//
// Параметры:
//  Идентификаторы						 - Массив - идентификаторы карточек номенклатуры в сервисе.
//  ЗаполнитьСоответствиеНоменклатуры	 - Булево - признак заполнения соответствия номенклатуры.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - список номенклатуры.
//
Функция ПолучитьДанныеПоНоменклатуре(Знач Идентификаторы, ЗаполнитьСоответствиеНоменклатуры = Ложь, Отказ = Ложь) Экспорт
	
	Если ТипЗнч(Идентификаторы) <> Тип("Массив") Тогда
		Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификаторы);
	КонецЕсли;
	
	ПараметрыЗапроса = ОписаниеПараметровЗапросаНоменклатура();
	ПараметрыЗапроса.Идентификаторы = Идентификаторы;
	ПараметрыЗапроса.НаборПолей = НаборПолейМаксимальный();
	
	ПараметрыКоманды = ПараметрыЗапросаНоменклатура(ПараметрыЗапроса);
	Если ПараметрыКоманды = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Результат) <>  Тип("ТаблицаЗначений") Тогда
		Возврат Неопределено; 
	КонецЕсли;
	
	// Заполнение массива номенклатуры программы по соответствию идентификаторов.
	Если ТипЗнч(Результат) = Тип("ТаблицаЗначений")
		И ЗаполнитьСоответствиеНоменклатуры Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатурыСервиса,
		|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
		|ГДЕ
		|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса В(&ИдентификаторыНоменклатуры)
		|ИТОГИ ПО
		|	ИдентификаторНоменклатурыСервиса";
		
		Запрос.УстановитьПараметр("ИдентификаторыНоменклатуры", Результат.ВыгрузитьКолонку("Идентификатор"));
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Результат.Колонки.Добавить("НоменклатураПрограммы", Типы().Массив, "НоменклатураПрограммы");
		Пока Выборка.Следующий() Цикл
			СтрокаРезультата = Результат.Найти(Выборка.ИдентификаторНоменклатурыСервиса, "Идентификатор");
			ВыборкаНоменклатуры = Выборка.Выбрать();
			СтрокаРезультата.НоменклатураПрограммы = Новый Массив;
			Пока ВыборкаНоменклатуры.Следующий() Цикл
				СтрокаРезультата.НоменклатураПрограммы.Добавить(ВыборкаНоменклатуры.Номенклатура);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получение списка номенклатуры.
//
// Параметры:
//  Идентификаторы						 - Массив - идентификаторы карточек номенклатуры в сервисе.
//  ЗаполнитьСоответствиеНоменклатуры	 - Булево - признак заполнения соответствия номенклатуры.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - список номенклатуры.
//
Функция ПолучитьСтандартныйНаборДанныхПоНоменклатуре(Знач Идентификаторы, Отказ) Экспорт
	
	Если ТипЗнч(Идентификаторы) <> Тип("Массив") Тогда
		Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификаторы);
	КонецЕсли;
	
	ПараметрыЗапроса = ОписаниеПараметровЗапросаНоменклатура();
	ПараметрыЗапроса.Идентификаторы = Идентификаторы;
	ПараметрыЗапроса.НаборПолей = НаборПолейСтандартный();
	
	ПараметрыКоманды = ПараметрыЗапросаНоменклатура(ПараметрыЗапроса);
	Результат = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
	Возврат Результат;
	
КонецФункции

// Получение двоичных данных по адресу URL, например изображения.
//
// Параметры:
//  АдресURL - Строка - адрес хранения данных.
// 
// Возвращаемое значение:
//  ДвоичныеДанные - полученные данные.
//
Функция ДвоичныеДанныеПоАдресуURL(АдресURL) Экспорт 
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресURL);
	
	ПараметрыСоединения = Новый Структура("Протокол, ИмяСервера, АдресРесурса, Порт, Таймаут, ЗащищенноеСоединение, Прокси");
	ПараметрыСоединения.Протокол     = СтруктураURI.Схема;
	ПараметрыСоединения.ИмяСервера   = СтруктураURI.Хост;
	ПараметрыСоединения.АдресРесурса = СтруктураURI.ПутьНаСервере;
	ПараметрыСоединения.Порт         = СтруктураURI.Порт;
	ПараметрыСоединения.Таймаут      = 30;
	ПараметрыСоединения.ЗащищенноеСоединение = ПараметрыСоединения.Протокол = "https";
	ПараметрыСоединения.Прокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(ПараметрыСоединения.Протокол);
	
	ЗащищенноеСоединение = Неопределено;
	Если ПараметрыСоединения.ЗащищенноеСоединение Тогда
		СертификатыУдостоверяющихЦентров = Неопределено;
		Если Не ОбщегоНазначения.ЭтоLinuxСервер() И Не ОбщегоНазначения.РазделениеВключено() Тогда
			// Ошибка фреша при работе с веб сервисами. Не работает проверка доверенных сертификатов при установке соединения.
			СертификатыУдостоверяющихЦентров = Новый СертификатыУдостоверяющихЦентровWindows;
		КонецЕсли;
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(, СертификатыУдостоверяющихЦентров);
	КонецЕсли;
	
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.ИмяСервера,
			ПараметрыСоединения.Порт,,,,ПараметрыСоединения.Таймаут, ЗащищенноеСоединение);
	Исключение
		ВызватьИсключение НСтр("ru = 'Ошибка установки соединения при получении изображения'");
	КонецПопытки;
	
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыСоединения.АдресРесурса);
	Попытка
		
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	Исключение
		ВызватьИсключение НСтр("ru = 'Ошибка получения изображения'");
	КонецПопытки;
	
	Возврат HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
	
КонецФункции

#КонецОбласти

#Область ОписаниеПараметровЗапросов

// Описание поиска NomenclatureRequest.
//
Функция ОписаниеПараметровЗапросаНоменклатура() Экспорт
	
	ДополнительныеРеквизиты = Новый ТаблицаЗначений; // NomenclatureRequest.search.attributes.
	ДополнительныеРеквизиты.Колонки.Добавить("Идентификатор",          Типы().Строка);     // attributeId.
	ДополнительныеРеквизиты.Колонки.Добавить("Значение",               Типы().Простой);    // value.
	ДополнительныеРеквизиты.Колонки.Добавить("ИдентификаторыЗначений", Типы().Массив);     // valueIds.
	ДополнительныеРеквизиты.Колонки.Добавить("МинимальноеЗначение",    Типы().Простой);    // range.min.
	ДополнительныеРеквизиты.Колонки.Добавить("МаксимальноеЗначение",   Типы().Простой);    // range.max.
	ДополнительныеРеквизиты.Колонки.Добавить("КодКлассификатора",      Типы().Строка);     // classifier.code.
	ДополнительныеРеквизиты.Колонки.Добавить("НаименованиеКлассификатора", Типы().Строка); // classifier.name.
	
	ТаблицаОбновления = Новый ТаблицаЗначений; // NomenclatureRequest.update.
	ТаблицаОбновления.Колонки.Добавить("Идентификатор",  Типы().Строка); // id.
	ТаблицаОбновления.Колонки.Добавить("ДатаОбновления", Типы().Дата);   // modified.
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторКатегории",  "");                // category.Id.
	Результат.Вставить("ИскатьВПодчиненных",      Ложь);              // category.subcategoriesSearch.
	Результат.Вставить("ИдентификаторыПроизводителей", Новый Массив); // manufacturerIds.
	Результат.Вставить("Идентификаторы",          Новый Массив);      // ids.
	Результат.Вставить("Штрихкоды",               Новый Массив);      // barcodes.
	Результат.Вставить("СтрокаПоиска",            "");                // search.text.
	Результат.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты); // search.attributes.
	Результат.Вставить("ОбновлениеНоменклатуры",  ТаблицаОбновления); // update.
	Результат.Вставить("НаборПолей",              "");                // fieldSet
	Результат.Вставить("КоличествоЗаписей",       Неопределено);      // Количество записей для страничной загрузки.
	Результат.Вставить("НомерСтраницы",           Неопределено);      // Номер страницы для страничной загрузки.
	
	Возврат Результат;
	
КонецФункции

// Описание параметров списка брендов.
//
Функция ОписаниеПараметровЗапросаБренды() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторыБрендов",        Новый Массив); // идентификаторы брендов.
	Результат.Вставить("ИдентификаторыПроизводителей", Новый Массив); // идентификаторы производителей.
	Результат.Вставить("ИдентификаторыКатегорий",      Новый Массив); // идентификаторы категорий.
	Результат.Вставить("НаборПолей",        ""); // набор полей возвращаемых данных.
	Результат.Вставить("КоличествоЗаписей", 0); // количество записей для страничной загрузки.
	Результат.Вставить("НомерСтраницы",     0); // номер страницы для страничной загрузки.
	
	Возврат Результат;
	
КонецФункции

// Описание параметров получения списка производителей.
//
Функция ОписаниеПараметровЗапросаПроизводители() Экспорт
		
	Результат = Новый Структура;
	Результат.Вставить("СтрокаПоиска",                 ""); // наименование категории.
	Результат.Вставить("ИдентификаторыПроизводителей", Новый Массив); // идентификаторы производителей.
	Результат.Вставить("ИдентификаторыКатегорий",      Новый Массив); // идентификаторы категорий.
	Результат.Вставить("НаборПолей",        ""); // набор полей возвращаемых данных.
	Результат.Вставить("КоличествоЗаписей", 0); // количество записей для страничной загрузки.
	Результат.Вставить("НомерСтраницы",     0); // номер страницы для страничной загрузки.
	
	Возврат Результат;
	
КонецФункции

// Описание поиска категорий CategoryRequest.
//
Функция ОписаниеПараметровЗапросаКатегории() Экспорт
	
	ОбновляемыеКатегории = Новый ТаблицаЗначений; // CategoryRequest.update.
	ОбновляемыеКатегории.Колонки.Добавить("Идентификатор",  Новый ОписаниеТипов("Строка")); // id
	ОбновляемыеКатегории.Колонки.Добавить("ДатаОбновления", Новый ОписаниеТипов("Дата"));   // modified
	
	ДополнительныеРеквизиты = Новый ТаблицаЗначений; // CategoryRequest.search.attributes.
	ДополнительныеРеквизиты.Колонки.Добавить("Идентификатор",         Типы().Строка);      // attributeId.
	ДополнительныеРеквизиты.Колонки.Добавить("Значение",              Типы().Простой);     // value, searchValue.
	ДополнительныеРеквизиты.Колонки.Добавить("ИдентификаторЗначения", Типы().Строка);      // valueId.
	ДополнительныеРеквизиты.Колонки.Добавить("МинимальноеЗначение",   Типы().Простой);     // range.min.
	ДополнительныеРеквизиты.Колонки.Добавить("МаксимальноеЗначение",  Типы().Простой);     // range.max.
	ДополнительныеРеквизиты.Колонки.Добавить("КодКлассификатора",     Типы().Строка);      // classifier.code.
	ДополнительныеРеквизиты.Колонки.Добавить("НаименованиеКлассификатора", Типы().Строка); // classifier.name.
	ДополнительныеРеквизиты.Колонки.Добавить("Наименование",          Типы().Строка);      // attributeName.
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификаторы", Новый Массив);               // ids.
	Результат.Вставить("Все",            Ложь);                       // all.
	Результат.Вставить("ТолькоКорневые", Ложь);                       // all.root.
	Результат.Вставить("ТолькоКонечныеПотомки",        Ложь);         // parents.onlyLeaves.
	Результат.Вставить("ТолькоПрямыеПотомки",          Истина);       // parents.onlyDirect.
	Результат.Вставить("ИдентификаторыРодителей",      Новый Массив); // parents.ids.
	Результат.Вставить("ИдентификаторыПроизводителей", Новый Массив); // manufacturerIds.
	Результат.Вставить("ИдентификаторыХарактеристик",  Новый Массив); // featureIds.
	Результат.Вставить("ИдентификаторыНоменклатуры",   Новый Массив); // nomenclatureIds.
	Результат.Вставить("ПоисковаяСтрока",              "");           // search.text.
	Результат.Вставить("ТолькоКонечныеКатегории", Ложь);              // search.onlyLeaves.
	Результат.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты); // search.attributes.
	Результат.Вставить("ОбновляемыеКатегории",    ОбновляемыеКатегории); // update.
	Результат.Вставить("НаборПолей",              "");           // fieldSet.
	Результат.Вставить("КоличествоЗаписей",       Неопределено); // Количество записей.
	Результат.Вставить("НомерСтраницы",           Неопределено); // Номер страницы.
	
	Возврат Результат;
		
КонецФункции

// Описание поиска реквизитов AttributeRequest.
//
Функция ОписаниеПараметровЗапросаДополнительныеРеквизиты() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификаторы",              Новый Массив); // ids.
	Результат.Вставить("ИдентификаторыКатегорий",     Новый Массив); // categoryIds.
	Результат.Вставить("ИдентификаторыНоменклатуры",  Новый Массив); // nomenclatureId.
	Результат.Вставить("ИдентификаторХарактеристики", "");           // featureId.
	Результат.Вставить("НаборПолей",                  "");           // fieldSet.
	Результат.Вставить("КоличествоЗаписей",           Неопределено); // Количество записей.
	Результат.Вставить("НомерСтраницы",               Неопределено); // Номер страницы.
	
	Возврат Результат;
	
КонецФункции

// Описание поиска значений реквизитов AttributeValueRequest.
//
Функция ОписаниеПараметровЗапросаЗначенияДополнительныхРеквизитов() Экспорт
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("ИдентификаторКатегории",                Новый ОписаниеТипов("Строка")); // search.categoryId.
	ТаблицаПоиска.Колонки.Добавить("ИдентификаторДополнительногоРеквизита", Новый ОписаниеТипов("Строка")); // search.attributeId.
	ТаблицаПоиска.Колонки.Добавить("Значение",                              Новый ОписаниеТипов("Строка")); // search.value.
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификаторы", Новый Массив);  // ids.
	Результат.Вставить("ТаблицаПоиска",  ТаблицаПоиска); // search.
	Результат.Вставить("НаборПолей",     "");            // fieldSet.
	
	Возврат Результат;
	
КонецФункции

// Описание поиска значений дополнительных реквизитов категорий AttributeValuesByCategoriesRequest.
//
Функция ОписаниеПараметровЗапросаЗначенияДополнительныхРеквизитовКатегорий() Экспорт
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("ИдентификаторКатегории",                Типы().Строка); // search.categoryId.
	ТаблицаПоиска.Колонки.Добавить("ИдентификаторДополнительногоРеквизита", Типы().Строка); // search.attributeId.
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификаторы", Новый Массив);  // categoryIds.
	Результат.Вставить("ТаблицаПоиска",  ТаблицаПоиска); // search.
	Результат.Вставить("НаборПолей", "");                // fieldSet.
	
	Возврат Результат;
	
КонецФункции

// Описание поиска характеристик FeatureRequest.
//
Функция ОписаниеПараметровЗапросаХарактеристики() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификаторы",            Новый Массив); // ids.
	Результат.Вставить("ИдентификаторыКатегорий",   Новый Массив); // categoryIds.
	Результат.Вставить("ИдентификаторНоменклатуры", "");           // nomenclatureId.
	Результат.Вставить("НаборПолей",                "");           // fieldSet.
	Результат.Вставить("КоличествоЗаписей",         Неопределено); // Количество записей.
	Результат.Вставить("НомерСтраницы",             Неопределено); // Номер страницы.
	
	Возврат Результат;
	
КонецФункции

// Описание поиска рекламных записей AdvertRequest.
//
Функция ОписаниеПараметровЗапросаРекламныеЗаписи() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификаторы",            Новый Массив); // ids.
	Результат.Вставить("КоличествоЗаписей",         Неопределено); // Количество записей.
	Результат.Вставить("НомерСтраницы",             Неопределено); // Номер страницы.
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПараметрыЗапросов

// Запрос цепочки родительских рубрик до корня.
//
// Параметры:
//  ИдентификаторКатегории	 - Строка - идентификатор категории рубрикатора.
//  НаборПолей				 - Строка - набор полей данных.
// 
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаВсеРодительскиеКатегории(ИдентификаторыКатегорий, НаборПолей = "min") Экспорт
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование = НСтр("ru = 'Запрос всех родительских категорий'");
	ПараметрыКоманды.Адрес = "/api/v2/catalog/categoryPathToRoot";
	ПараметрыКоманды.Метод = "post";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Результат = "pathToRoot";
	ПараметрыКоманды.Обработка = "CategoryPathToRootResponse.pathToRoot";
	
	// Дополнительные параметры запроса.
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "fieldSet", НаборПолей);
	
	Объект = ФабрикаXDTO.Создать(ТипОбъектаXDTO("CategoryPathToRootRequest"));
	ДополнитьМассив(Объект.ids, ИдентификаторыКатегорий);
	ПараметрыКоманды.Данные = ЗначениеXDTOВФорматJSON(Объект, 1);
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Запрос брендов BrandRequest.
//
// Параметры:
//  ПараметрыЗапроса	 - Структура - параметры поиска, см. ОписаниеПараметровЗапросаБренды().
// 
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаБренды(ПараметрыЗапроса) Экспорт
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование = НСтр("ru = 'Запрос брендов'");
	ПараметрыКоманды.Адрес = "/api/v2/catalog/brand";
	ПараметрыКоманды.Метод = "post";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Результат = "brands";
	ПараметрыКоманды.Обработка = ОписаниеТаблицыБренды();
	
	// Дополнительные параметры запроса.
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "fieldSet", ПараметрыЗапроса.НаборПолей);
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "pageSize", ПараметрыЗапроса.КоличествоЗаписей);
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "page",     ПараметрыЗапроса.НомерСтраницы);
		
	Объект = ФабрикаXDTO.Создать(ТипОбъектаXDTO("BrandRequest"));
	Если ПараметрыЗапроса.Свойство("ИдентификаторыБрендов")
		И ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыБрендов) Тогда
		ДополнитьМассив(Объект.ids, ПараметрыЗапроса.ИдентификаторыБрендов);
	КонецЕсли;
	Если ПараметрыЗапроса.Свойство("ИдентификаторыПроизводителей")
		И ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыПроизводителей) Тогда
		ДополнитьМассив(Объект.manufacturerIds, ПараметрыЗапроса.ИдентификаторыПроизводителей);
	КонецЕсли;
	Если ПараметрыЗапроса.Свойство("ИдентификаторыКатегорий")
		И ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыКатегорий) Тогда
		ДополнитьМассив(Объект.categoryIds, ПараметрыЗапроса.ИдентификаторыКатегорий);
	КонецЕсли;
	
	ПараметрыКоманды.Данные = ЗначениеXDTOВФорматJSON(Объект);
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Запрос производителей.
//
// Параметры:
//  ПараметрыЗапроса	 - Структура - параметры поиска, см. ОписаниеПараметровЗапросаПроизводители().
// 
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаПроизводители(ПараметрыЗапроса) Экспорт
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование = НСтр("ru = 'Запрос производителей'");
	ПараметрыКоманды.Адрес = "/api/v2/catalog/manufacturer";
	ПараметрыКоманды.Метод = "post";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Результат = "manufacturers";
	ПараметрыКоманды.Обработка = ОписаниеТаблицыПроизводители();
	
	// Дополнительные параметры запроса.
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "fieldSet", ПараметрыЗапроса.НаборПолей);
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "pageSize", ПараметрыЗапроса.КоличествоЗаписей);
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "page",     ПараметрыЗапроса.НомерСтраницы);
	
	Объект = ФабрикаXDTO.Создать(ТипОбъектаXDTO("ManufacturerRequest"));
	
	Если ПараметрыЗапроса.Свойство("ИдентификаторыПроизводителей")
		И ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыПроизводителей) Тогда
		ДополнитьМассив(Объект.Ids, ПараметрыЗапроса.ИдентификаторыПроизводителей);
	Иначе
		ОбъектПоиск = ФабрикаXDTO.Создать(ТипОбъектаXDTO("ManufacturerRequest.search"));
		Если ПараметрыЗапроса.Свойство("ИдентификаторыКатегорий")
			И ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыКатегорий) Тогда
			ДополнитьМассив(ОбъектПоиск.categoryIds, ПараметрыЗапроса.ИдентификаторыКатегорий);
		КонецЕсли;
		Если ПараметрыЗапроса.Свойство("СтрокаПоиска")
			И ЗначениеЗаполнено(ПараметрыЗапроса.СтрокаПоиска) Тогда
			ОбъектПоиск.name = ПараметрыЗапроса.СтрокаПоиска;
		КонецЕсли;
		Объект.search = ОбъектПоиск;
	КонецЕсли;
	
	ПараметрыКоманды.Данные = ЗначениеXDTOВФорматJSON(Объект);
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Запрос рубрик.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. ОписаниеПараметровЗапросаКатегории().
// 
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаКатегории(ПараметрыЗапроса) Экспорт
	
	// Общие параметры.
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование = НСтр("ru = 'Запрос пути до категории'");
	ПараметрыКоманды.Адрес = "/api/v2/catalog/category";
	ПараметрыКоманды.Метод = "post";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Результат = "categories";
	ПараметрыКоманды.Ошибки.Вставить(400, НСтр("ru = 'Ошибка выполнения запроса.'"));
	ПараметрыКоманды.Обработка = ОписаниеТаблицыКатегории(); // CategoryResponse
	
	// Дополнительные параметры запроса.
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "fieldSet", ПараметрыЗапроса.НаборПолей);
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "pageSize", ПараметрыЗапроса.КоличествоЗаписей);
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "page",     ПараметрыЗапроса.НомерСтраницы);
	
	// Параметры поиска.
	Объект = ФабрикаXDTO.Создать(ТипОбъектаXDTO("CategoryRequest"));
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Идентификаторы) Тогда
		
		ДополнитьМассив(Объект.ids, ПараметрыЗапроса.Идентификаторы);
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыРодителей) Тогда
		
		ОбъектРодители = ФабрикаXDTO.Создать(ТипОбъектаXDTO("CategoryRequest.parents"));
		ОбъектРодители.onlyLeaves = ПараметрыЗапроса.ТолькоКонечныеПотомки;
		ОбъектРодители.onlyDirect = ПараметрыЗапроса.ТолькоПрямыеПотомки;
		ДополнитьМассив(ОбъектРодители.ids, ПараметрыЗапроса.ИдентификаторыРодителей);
		Объект.parents = ОбъектРодители;
		
	ИначеЕсли ПараметрыЗапроса.Все ИЛИ ПараметрыЗапроса.ТолькоКорневые Тогда
		
		ЗначениеВсеКатегории = ФабрикаXDTO.Создать(ТипОбъектаXDTO("CategoryRequest.all"));
		ЗначениеВсеКатегории.root = ПараметрыЗапроса.ТолькоКорневые;
		Объект.all = ЗначениеВсеКатегории;
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыПроизводителей) Тогда
		
		ДополнитьМассив(Объект.manufacturerIds, ПараметрыЗапроса.ИдентификаторыПроизводителей);
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыХарактеристик) Тогда
		
		ДополнитьМассив(Объект.featureIds,ПараметрыЗапроса.ИдентификаторыХарактеристик);
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыНоменклатуры) Тогда
		
		ДополнитьМассив(Объект.nomenclatureIds, ПараметрыЗапроса.ИдентификаторыНоменклатуры);
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ОбновляемыеКатегории) Тогда
		Для каждого ЭлементКоллекции Из ПараметрыЗапроса.ОбновляемыеКатегории Цикл
			ОбъектПоиска = ФабрикаXDTO.Создать(ТипОбъектаXDTO("CategoryRequest.update"));
			ОбъектПоиска.id       = ЭлементКоллекции.Идентификатор;
			ОбъектПоиска.modified = ЭлементКоллекции.ДатаОбновления;
			Объект.update.Добавить(ОбъектПоиска);
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ПоисковаяСтрока)
		ИЛИ ЗначениеЗаполнено(ПараметрыЗапроса.ТолькоКонечныеКатегории)
		ИЛИ ЗначениеЗаполнено(ПараметрыЗапроса.ДополнительныеРеквизиты) Тогда
		
		ОбъектПоиска = ФабрикаXDTO.Создать(ТипОбъектаXDTO("CategoryRequest.search"));
		Если ЗначениеЗаполнено(ПараметрыЗапроса.ПоисковаяСтрока) Тогда
			ОбъектПоиска.text = ПараметрыЗапроса.ПоисковаяСтрока;
		КонецЕсли;
		Если ПараметрыЗапроса.ТолькоКонечныеКатегории Тогда
			ОбъектПоиска.onlyLeaves = Истина;
		КонецЕсли;
		
		// Заполнение реквизитов поиска.
		Если ЗначениеЗаполнено(ПараметрыЗапроса.ДополнительныеРеквизиты) Тогда
			Для каждого РеквизитПоиска Из ПараметрыЗапроса.ДополнительныеРеквизиты Цикл
				ОбъектРеквизитов = ФабрикаXDTO.Создать(ТипОбъектаXDTO("CategoryRequest.search.attributes"));
				Если ЗначениеЗаполнено(РеквизитПоиска.Идентификатор) Тогда
					
					ОбъектРеквизитов.attributeId = РеквизитПоиска.Идентификатор;
					Если ЗначениеЗаполнено(РеквизитПоиска.Значение) Тогда
						ОбъектРеквизитов.value = РеквизитПоиска.Значение;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(РеквизитПоиска.ИдентификаторЗначения) Тогда
						ОбъектРеквизитов.valueId = РеквизитПоиска.ИдентификаторЗначения;
					КонецЕсли;
					
					// Заполнение диапазона значений (число или дата) - range.
					Если ЗначениеЗаполнено(РеквизитПоиска.МинимальноеЗначение)
						ИЛИ ЗначениеЗаполнено(РеквизитПоиска.МаксимальноеЗначение) Тогда
						ЗначениеДиапазона = ФабрикаXDTO.Создать(ТипОбъектаXDTO("CategoryRequest.search.attributes.range"));
						Если ЗначениеЗаполнено(РеквизитПоиска.МинимальноеЗначение) Тогда
							ЗначениеДиапазона.min = РеквизитПоиска.МинимальноеЗначение;
						КонецЕсли;
						Если ЗначениеЗаполнено(РеквизитПоиска.МаксимальноеЗначение) Тогда
							ЗначениеДиапазона.max = РеквизитПоиска.МаксимальноеЗначение;
						КонецЕсли;
						ОбъектРеквизитов.range = ЗначениеДиапазона;
					КонецЕсли;
					
					// Заполнение классификатора валют или стран - classifier.
					Если ЗначениеЗаполнено(РеквизитПоиска.КодКлассификатора)
						ИЛИ ЗначениеЗаполнено(РеквизитПоиска.НаименованиеКлассификатора) Тогда
						ЗначениеКлассификатора = ФабрикаXDTO.Создать(ТипОбъектаXDTO("CategoryRequest.search.attributes.classifier"));
						ЗначениеКлассификатора.code = РеквизитПоиска.КодКлассификатора;
						ЗначениеКлассификатора.name = РеквизитПоиска.НаименованиеКлассификатора;
						ОбъектРеквизитов.classifier = ЗначениеКлассификатора;
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(РеквизитПоиска.Наименование) Тогда
					// Поиск по названию и значению дополнительного реквизита.
					ОбъектРеквизитов.attributeName = РеквизитПоиска.Наименование;
					ОбъектРеквизитов.searchValue   = РеквизитПоиска.Значение;
					
				КонецЕсли;
				ОбъектПоиска.attributes = ОбъектРеквизитов;
			КонецЦикла;
		КонецЕсли;
		
		Объект.search = ОбъектПоиска;
		
	КонецЕсли;
	
	// Подготовка результата.
	ПараметрыКоманды.Данные = ЗначениеXDTOВФорматJSON(Объект);
	Возврат ПараметрыКоманды;
	
КонецФункции

// Запрос дополнительных реквизитов.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. ОписаниеПараметровЗапросаДополнительныеРеквизиты().
// 
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаДополнительныеРеквизиты(ПараметрыЗапроса) Экспорт
	
	// Общие параметры.
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование   = НСтр("ru = 'Запрос дополнительных реквизитов'");
	ПараметрыКоманды.Адрес          = "/api/v2/catalog/attribute";
	ПараметрыКоманды.Метод          = "post";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Результат      = "attributes";
	ПараметрыКоманды.Обработка      = ОписаниеТаблицыДополнительныхРеквизитов(); // AttributeResponse.attributes.
	
	// Дополнительные параметры запроса.
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "fieldSet", ПараметрыЗапроса.НаборПолей);
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "pageSize", ПараметрыЗапроса.КоличествоЗаписей);
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "page",     ПараметрыЗапроса.НомерСтраницы);

	// Параметры поиска.
	Объект = ФабрикаXDTO.Создать(ТипОбъектаXDTO("AttributeRequest"));
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Идентификаторы) Тогда
		ДополнитьМассив(Объект.ids, ПараметрыЗапроса.Идентификаторы);
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыКатегорий) Тогда
		ДополнитьМассив(Объект.categoryIds, ПараметрыЗапроса.ИдентификаторыКатегорий);
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыНоменклатуры) Тогда
		ДополнитьМассив(Объект.nomenclatureId, ПараметрыЗапроса.ИдентификаторыНоменклатуры);
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторХарактеристики) Тогда
		Объект.featureId = ПараметрыЗапроса.ИдентификаторХарактеристики;
	КонецЕсли;
	
	// Подготовка результата.
	ПараметрыКоманды.Данные = ЗначениеXDTOВФорматJSON(Объект);
	Возврат ПараметрыКоманды;
	
КонецФункции

// Запрос формализованных значений дополнительных реквизитов.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. ОписаниеПараметровЗапросаЗначенияДополнительныхРеквизитов().
// 
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаЗначенияДополнительныхРеквизитов(ПараметрыЗапроса) Экспорт
	
	// Общие параметры.
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование   = НСтр("ru = 'Запрос значений дополнительных реквизитов'");
	ПараметрыКоманды.Адрес          = "/api/v2/catalog/attributeValue";
	ПараметрыКоманды.Метод          = "post";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Результат      = "attributeValues";
	ПараметрыКоманды.Обработка      = ОписаниеТаблицыЗначенияДополнительныхРеквизитов(); // AttributeValueResponse.attributeValues.
	
	// Дополнительные параметры запроса.
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "fieldSet", ПараметрыЗапроса.НаборПолей);

	// Параметры поиска.
	Объект = ФабрикаXDTO.Создать(ТипОбъектаXDTO("AttributeValueRequest"));
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Идентификаторы) Тогда
		ДополнитьМассив(Объект.ids, ПараметрыЗапроса.Идентификаторы);
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ТаблицаПоиска) Тогда
		Для каждого ЭлементКоллекции Из ПараметрыЗапроса.ТаблицаПоиска Цикл
			ОбъектПоиска = ФабрикаXDTO.Создать(ТипОбъектаXDTO("AttributeValueRequest.search"));
			ОбъектПоиска.categoryId  = ЭлементКоллекции.ИдентификаторКатегории;
			ОбъектПоиска.attributeId = ЭлементКоллекции.ИдентификаторДополнительногоРеквизита;
			ОбъектПоиска.value       = ЭлементКоллекции.Значение;
			Объект.search.Добавить(ОбъектПоиска);
		КонецЦикла; 
	КонецЕсли;
	
	// Подготовка результата.
	ПараметрыКоманды.Данные = ЗначениеXDTOВФорматJSON(Объект);
	Возврат ПараметрыКоманды;
	
КонецФункции

// Запрос формализованных значения конкретных рубрик с разбивкой по дополнительным реквизитам.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. ОписаниеПараметровЗапросаЗначенияДополнительныхРеквизитовКатегорий().
// 
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаЗначенияДополнительныхРеквизитовКатегорий(ПараметрыЗапроса) Экспорт
	
	// Общие параметры.
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование   = НСтр("ru = 'Запрос значений дополнительных реквизитов категорий'");
	ПараметрыКоманды.Адрес          = "/api/v2/catalog/attributeValue/byCategories";
	ПараметрыКоманды.Метод          = "post";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Результат      = "attributeValuesByCategories";
	ПараметрыКоманды.Обработка      = ОписаниеТаблицыЗначенияДополнительныхРеквизитовКатегорий();
	
	// Дополнительные параметры запроса.
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "fieldSet", ПараметрыЗапроса.НаборПолей);

	// Параметры поиска.
	Объект = ФабрикаXDTO.Создать(ТипОбъектаXDTO("AttributeValuesByCategoriesRequest"));
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Идентификаторы) Тогда
		ДополнитьМассив(Объект.categoryIds, ПараметрыЗапроса.Идентификаторы);
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ТаблицаПоиска) Тогда
		Для каждого ЭлементКоллекции Из ПараметрыЗапроса.ТаблицаПоиска Цикл
			ОбъектПоиска = ФабрикаXDTO.Создать(ТипОбъектаXDTO("AttributeValuesByCategoriesRequest.search"));
			ОбъектПоиска.categoryId = ЭлементКоллекции.ИдентификаторКатегории;
			ОбъектПоиска.attributeId = ЭлементКоллекции.ИдентификаторДополнительногоРеквизита;
			Объект.search.Добавить(ОбъектПоиска);
		КонецЦикла;
	КонецЕсли;
	
	// Подготовка результата.
	ПараметрыКоманды.Данные = ЗначениеXDTOВФорматJSON(Объект);
	Возврат ПараметрыКоманды;
	
КонецФункции

// Запрос характеристик.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. ОписаниеПараметровЗапросаХарактеристики().
// 
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаХарактеристики(ПараметрыЗапроса) Экспорт
	
	// Общие параметры.
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование   = НСтр("ru = 'Запрос характеристик'");
	ПараметрыКоманды.Адрес          = "/api/v2/catalog/feature";
	ПараметрыКоманды.Метод          = "post";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Результат      = "features";
	ПараметрыКоманды.Обработка      = ОписаниеТаблицыХарактеристики(); // FeatureResponse.features.
	
	// Дополнительные параметры запроса.
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "fieldSet", ПараметрыЗапроса.НаборПолей);
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "pageSize", ПараметрыЗапроса.КоличествоЗаписей);
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "page",     ПараметрыЗапроса.НомерСтраницы);

	// Параметры поиска.
	Объект = ФабрикаXDTO.Создать(ТипОбъектаXDTO("FeatureRequest"));
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Идентификаторы) Тогда
		ДополнитьМассив(Объект.ids, ПараметрыЗапроса.Идентификаторы);
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыКатегорий) Тогда
		ДополнитьМассив(Объект.categoryIds, ПараметрыЗапроса.ИдентификаторыКатегорий);
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторНоменклатуры) Тогда
		Объект.nomenclatureId = ПараметрыЗапроса.ИдентификаторНоменклатуры;
	КонецЕсли;
	
	// Подготовка результата.
	ПараметрыКоманды.Данные = ЗначениеXDTOВФорматJSON(Объект);
	Возврат ПараметрыКоманды;
	
КонецФункции

// Запрос рекламных записей.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. ОписаниеПараметровЗапросаРекламныеЗаписи().
// 
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаРекламныеЗаписи(ПараметрыЗапроса) Экспорт
	
	// Общие параметры.
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование   = НСтр("ru = 'Запрос рекламных записей'");
	ПараметрыКоманды.Адрес          = "/api/v2/catalog/advert";
	ПараметрыКоманды.Метод          = "post";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Результат      = "adverts";
	ПараметрыКоманды.Обработка      = ОписаниеТаблицыРекламныеЗаписи(); // AdvertResponse.adverts.
	
	// Дополнительные параметры запроса.
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "pageSize", ПараметрыЗапроса.КоличествоЗаписей);
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "page",     ПараметрыЗапроса.НомерСтраницы);

	// Параметры поиска.
	Объект = ФабрикаXDTO.Создать(ТипОбъектаXDTO("AdvertRequest"));
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Идентификаторы) Тогда
		ДополнитьМассив(Объект.ids, ПараметрыЗапроса.Идентификаторы);
	КонецЕсли;
	
	// Подготовка результата.
	ПараметрыКоманды.Данные = ЗначениеXDTOВФорматJSON(Объект, 1);
	Возврат ПараметрыКоманды;
	
КонецФункции

// Запрос карточек номенклатуры.
//
// Параметры:
//  ПараметрыЗапроса			 - Структура - см. ОписаниеПараметровЗапросаНоменклатура().
//  ДополнительныеПараметры	 - Произвольный - дополнительные параметры.
// 
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаНоменклатура(ПараметрыЗапроса) Экспорт

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование = НСтр("ru = 'Запрос карточек номенклатуры'");
	ПараметрыКоманды.Адрес = "/api/v2/catalog/nomenclature";
	ПараметрыКоманды.Метод = "post";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Результат = "nomenclatures";
	ПараметрыКоманды.Ошибки.Вставить(403, Ложь);
	ПараметрыКоманды.Ошибки.Вставить(429, Ложь);
	ПараметрыКоманды.Обработка = ОписаниеТаблицыНоменклатуры();
	
	// Дополнительные параметры запроса.
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "fieldSet", ПараметрыЗапроса.НаборПолей);
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "pageSize", ПараметрыЗапроса.КоличествоЗаписей);
	ДобавитьПараметрАдресаHTML(ПараметрыКоманды.Адрес, "page",     ПараметрыЗапроса.НомерСтраницы);
	
	Объект = ФабрикаXDTO.Создать(ТипОбъектаXDTO("NomenclatureRequest"));
	
	ПоискЗаполнен = Ложь;
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Идентификаторы) Тогда
		// Идентификаторы номенклатуры.
		ДополнитьМассив(Объект.ids, ПараметрыЗапроса.Идентификаторы);
		ПоискЗаполнен = Истина;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.Штрихкоды) Тогда
		// Штрихкоды.
		ДополнитьМассив(Объект.barcodes, ПараметрыЗапроса.Штрихкоды);
		ПоискЗаполнен = Истина;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ОбновлениеНоменклатуры) Тогда
		// Запрос обновления
		Для каждого ЭлементКоллекции Из ПараметрыЗапроса.ОбновлениеНоменклатуры Цикл
			ОбъектОбновление = ФабрикаXDTO.Создать(ТипОбъектаXDTO("NomenclatureRequest.update"));
			ОбъектОбновление.id = ЭлементКоллекции.Идентификатор;
			ОбъектОбновление.modified = ЭлементКоллекции.ДатаОбновления;
			Объект.update.Добавить(ОбъектОбновление);
		КонецЦикла;
		ПоискЗаполнен = Истина;
	КонецЕсли;
	
	Если Не ПоискЗаполнен Тогда
		// Поиск по строке и реквизитам.
		ОбъектПоиска = ФабрикаXDTO.Создать(ТипОбъектаXDTO("NomenclatureRequest.search"));
		ОбъектПоиска.text = ПараметрыЗапроса.СтрокаПоиска;
		
		Если ЗначениеЗаполнено(ПараметрыЗапроса.ДополнительныеРеквизиты) Тогда
			Для каждого РеквизитПоиска Из ПараметрыЗапроса.ДополнительныеРеквизиты Цикл
				ОбъектРеквизитов = ФабрикаXDTO.Создать(ТипОбъектаXDTO("NomenclatureRequest.search.attributes"));
				ОбъектРеквизитов.attributeId = РеквизитПоиска.Идентификатор;
				Если ЗначениеЗаполнено(РеквизитПоиска.Значение) Тогда
					// Значение.
					ОбъектРеквизитов.value = РеквизитПоиска.Значение;
				ИначеЕсли ЗначениеЗаполнено(РеквизитПоиска.ИдентификаторыЗначений) Тогда
					// Идентификаторы значений.
					ДополнитьМассив(ОбъектРеквизитов.valueIds, РеквизитПоиска.ИдентификаторыЗначений);
				ИначеЕсли ЗначениеЗаполнено(РеквизитПоиска.МинимальноеЗначение)
					ИЛИ ЗначениеЗаполнено(РеквизитПоиска.МаксимальноеЗначение) Тогда
					// Заполнение диапазона значений (число или дата) - range.
					ЗначениеДиапазона = ФабрикаXDTO.Создать(ТипОбъектаXDTO("NomenclatureRequest.search.attributes.range"));
					Если ЗначениеЗаполнено(РеквизитПоиска.МинимальноеЗначение) Тогда
						ЗначениеДиапазона.min = РеквизитПоиска.МинимальноеЗначение;
					КонецЕсли;
					Если ЗначениеЗаполнено(РеквизитПоиска.МаксимальноеЗначение) Тогда
						ЗначениеДиапазона.max = РеквизитПоиска.МаксимальноеЗначение;
					КонецЕсли;
					ОбъектРеквизитов.range = ЗначениеДиапазона;
				ИначеЕсли ЗначениеЗаполнено(РеквизитПоиска.КодКлассификатора)
					ИЛИ ЗначениеЗаполнено(РеквизитПоиска.НаименованиеКлассификатора) Тогда
					// Заполнение классификатора валют или стран - classifier.
					ЗначениеКлассификатора = ФабрикаXDTO.Создать(ТипОбъектаXDTO("NomenclatureRequest.search.attributes.classifier"));
					ЗначениеКлассификатора.code = РеквизитПоиска.КодКлассификатора;
					ЗначениеКлассификатора.name = РеквизитПоиска.НаименованиеКлассификатора;
					ОбъектРеквизитов.classifier = ЗначениеКлассификатора;
				Иначе
					ВызватьИсключение НСтр("ru = 'Ошибка установки параметров запроса номенклатуры.'");
				КонецЕсли;
					
				ОбъектПоиска.attributes.Добавить(ОбъектРеквизитов);
			КонецЦикла;
		КонецЕсли;
		
		Объект.search = ОбъектПоиска;
	КонецЕсли;
	
	// Производители.
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыПроизводителей) Тогда
		ДополнитьМассив(Объект.manufacturerIds, ПараметрыЗапроса.ИдентификаторыПроизводителей);
	КонецЕсли;
	
	// Категория.
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторКатегории) Тогда
		ОбъектКатегория = ФабрикаXDTO.Создать(ТипОбъектаXDTO("NomenclatureRequest.category"));
		ОбъектКатегория.Id = ПараметрыЗапроса.ИдентификаторКатегории;
		Если ПараметрыЗапроса.ИскатьВПодчиненных Тогда
			ОбъектКатегория.subcategoriesSearch = Истина;
		КонецЕсли;
		Объект.category = ОбъектКатегория;
	КонецЕсли;
	
	ПараметрыКоманды.Данные = ЗначениеXDTOВФорматJSON(Объект);
	ПараметрыКоманды.Ошибки.Вставить(400, НСтр("ru = 'Не указаны параметры поиска.'"));
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Запрос ОКЕИ классификатора.
//
// Параметры:
//  КодыЕдиницИзмерения	- Массив - коды измерений, если пустой массив, то весь классификатор.
// 
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаКлассификаторОКЕИ(КодыЕдиницИзмерения) Экспорт

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование = НСтр("ru = 'Запрос ОКЕИ классификатора'");
	ПараметрыКоманды.Адрес = "/api/v2/catalog/okei";
	ПараметрыКоманды.Метод = "post";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Результат = "units";
	ПараметрыКоманды.Обработка = ОписаниеТаблицыЕдиницыИзмеренияОКЕИ();
	
	Объект = Новый Структура;
	Данные = Новый Массив;
	Если ЗначениеЗаполнено(КодыЕдиницИзмерения) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Данные, КодыЕдиницИзмерения);
	КонецЕсли;
	Объект.Вставить("okei", Данные);
	
	ПараметрыКоманды.Данные = ЗначениеВФорматJSON(Объект);
	Возврат ПараметрыКоманды;
	
КонецФункции

#КонецОбласти

#Область ПараметрыБиллинга

// Метод проверки наличия опции.
//
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаПроверкаОпции() Экспорт
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование = НСтр("ru = 'Проверка доступа к сервису 1С:Номенклатура'");
	ПараметрыКоманды.Адрес = "/api/v2/catalog/nomenclature/hasAccess";
	ПараметрыКоманды.Метод = "get";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Ошибки.Вставить(403, Ложь);
	ПараметрыКоманды.Обработка = "ИстинаПоКоду200";
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Метод покупки карточек номенклатуры.
//
// Параметры:
//  Идентификаторы - Массив - идентификаторы номенклатуры (Число).
// 
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаПокупкаНоменклатуры(Идентификаторы) Экспорт
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование = НСтр("ru = 'Покупка карточек номенклатуры'");
	ПараметрыКоманды.Адрес = "/api/v2/catalog/nomenclature/buy";
	ПараметрыКоманды.Метод = "post";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Не найдена карточка номенклатуры.'"));
	ПараметрыКоманды.Ошибки.Вставить(403, Ложь);
	ПараметрыКоманды.Обработка = "ИстинаПоКоду200";
	
	Данные = Новый Структура;
	Данные.Вставить("ids", Идентификаторы);
	ПараметрыКоманды.Данные = ЗначениеВФорматJSON(Данные);
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Метод баланса опций.
//
// Возвращаемое значение:
//  Структура - параметры команды.
//
Функция ПараметрыЗапросаБалансОпций() Экспорт
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование = НСтр("ru = 'Проверка баланса сервиса 1С:Номенклатура'");
	ПараметрыКоманды.Адрес = "/api/v2/catalog/nomenclature/optionBalance";
	ПараметрыКоманды.Метод = "get";
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.Результат = "balance";
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав доступа.'"));
	
	Возврат ПараметрыКоманды;
	
КонецФункции
#КонецОбласти

#Область ВыполнениеМетодов

// Выполнение команды сервиса.
//
// Параметры:
//   ПараметрыКоманды - Структура - параметры вызова или имя команды.
//   Отказ - Булево - признак ошибки выполнения.
// Возврат
//   Строка, Массив, Структура - возвращаемые данные сервиса.
//
Функция ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ) Экспорт
	
	// Получение параметров соединения м сервисом.
	СохранятьПараметрыСеанса = Ложь;
	ПараметрыСоединения = ПараметрыСоединенияССервисом(ПараметрыКоманды.Аутентификация, Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыКоманды.Таймаут) Тогда
		ПараметрыСоединения.Таймаут = ПараметрыКоманды.Таймаут;
	КонецЕсли;
	
	// Общая ошибка.
	ПараметрыКоманды.Ошибки.Вставить(401, НСтр("ru = 'Ошибка аутентификации.'"));
	ПараметрыКоманды.Ошибки.Вставить(500, НСтр("ru = 'Внутренняя ошибка сервиса.'"));
	ПараметрыКоманды.Ошибки.Вставить(502, НСтр("ru = 'Внутренняя ошибка сервиса.'"));
	
	// Установка соединения  в сервисом.
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.ИмяСервера, ПараметрыСоединения.Порт,,,
			ПараметрыСоединения.Прокси, ПараметрыСоединения.Таймаут, ПараметрыСоединения.ЗащищенноеСоединение);
	Исключение
		ТекстСообщения = НСтр("ru='Отсутствует соединение с сервисом 1С:Номенклатура'")
			+ Символы.ПС + НСтр("ru ='Подробности см. в журнале регистрации.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		ВыполнитьЗаписьСобытияВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), УровеньЖурналаРегистрации.Ошибка);
		Возврат Неопределено;
	КонецПопытки;

	// Установка параметров запроса.
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыКоманды.Адрес);
	
	// Установка заголовков запроса.
	Для каждого ЭлементКоллекции Из ПараметрыСоединения.Заголовки Цикл
		HTTPЗапрос.Заголовки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
	КонецЦикла;
	Если ПараметрыКоманды.Свойство("Заголовки") Тогда
		Для каждого ПараметрЗаголовка Из ПараметрыКоманды.Заголовки Цикл
			HTTPЗапрос.Заголовки.Вставить(ПараметрЗаголовка.Ключ, ПараметрЗаголовка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыКоманды.Данные) Тогда
		Если ТипЗнч(ПараметрыКоманды.Данные) = Тип("ДвоичныеДанные") Тогда
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ПараметрыКоманды.Данные);
		Иначе
			HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыКоманды.Данные);
		КонецЕсли;
	КонецЕсли;
	
	// Выполнение запроса HTTP к сервису.
	Попытка
		
		Если ВРег(ПараметрыКоманды.Метод) = "GET" Тогда
			HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		ИначеЕсли ВРег(ПараметрыКоманды.Метод) = "POST" Тогда
			HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		ИначеЕсли ВРег(ПараметрыКоманды.Метод) = "PUT" Тогда
			HTTPОтвет = Соединение.Записать(HTTPЗапрос);
		ИначеЕсли ВРег(ПараметрыКоманды.Метод) = "DELETE" Тогда
			HTTPЗапрос.Заголовки.Вставить("Content-Length", СтрДлина(HTTPЗапрос.ПолучитьТелоКакСтроку()));
			HTTPОтвет = Соединение.Удалить(HTTPЗапрос);
		Иначе
			ВызватьИсключение НСтр("ru = 'Ошибка выполнения команды сервиса.'");
		КонецЕсли;
		
		КодСостояния = HTTPОтвет.КодСостояния;
		Данные = HTTPОтвет.ПолучитьТелоКакСтроку();
		
	Исключение
		ПараметрыОшибки = Новый Структура("ПодробныйТекстОшибки", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат ОбработатьОшибкуСервиса(ПараметрыКоманды, 0, ПараметрыОшибки, Отказ);
	КонецПопытки;
	
	// Обработка результата запроса.
	Результат = ОбработатьОтветСервиса(ПараметрыКоманды, КодСостояния, Данные, Отказ);
	
	Возврат Результат;
	
КонецФункции

// Идентификатор минимального набора полей.
// 
// Возвращаемое значение:
//   Строка - идентификатор.
//
Функция НаборПолейМинимальный() Экспорт
	
	// Минимальный набор полей возвращаемых полей fieldSet.
	// Дает описание ссылки на объект, содержит только идентификатор и текстовое представление объекта.
	
	Возврат "min";
	
КонецФункции

// Идентификатор стандартного набора полей.
// 
// Возвращаемое значение:
//   Строка - идентификатор.
//
Функция НаборПолейСтандартный() Экспорт
	
	// Стандартный набор возвращаемых полей fieldSet.
	// Содержит поля набора min и дополнительные поля, необходимые для отображения списка или дерева объектов.
	
	Возврат "standard";
	
КонецФункции

// Идентификатор максимального набора полей.
// 
// Возвращаемое значение:
//   Строка - идентификатор.
//
Функция НаборПолейМаксимальный() Экспорт
	
	// Максимальный набор возвращаемых полей fieldSet.
	// Содержит поля standard и все остальные, используется в основном для работы с конкретным объектом,
	// как правило для создания этого объекта на клиентской стороне.
	
	Возврат "max";
	
КонецФункции

#КонецОбласти

#Область ОбновлениеОбъектов

// Получение таблицы дат последнего изменения видов номенклатур.
//
// Параметры:
//  ДанныеДляОтправки	 - ТаблицаЗначений - заполняемая таблица.
//  ВсеРежимыОбновления	 - Булево - признак учета всех режимов обновления: автоматический, ручной.
//
Процедура ПолучитьДатыОбновленияВидовНоменклатуры(ДанныеДляОтправки, ВсеРежимыОбновления = Ложь) Экспорт
		
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ДатаОбновления КАК ДатаОбновления,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры КАК ВидНоменклатуры,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории КАК Идентификатор
	|ИЗ
	|	РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ДатаОбновления <> ДАТАВРЕМЯ(1, 1, 1)
	|	И (&ВсеРежимыОбновления
	|			ИЛИ СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ОбновляетсяАвтоматически)";
	
	Запрос.УстановитьПараметр("ВсеРежимыОбновления", ВсеРежимыОбновления);
	
	ДанныеДляОтправки = Запрос.Выполнить().Выгрузить();	
	
КонецПроцедуры

// Получение таблицы дат последнего изменения номенклатуры.
//
// Параметры:
//  ДанныеДляОтправки	 - ТаблицаЗначений - заполняемая таблица.
//  ВсеРежимыОбновления	 - Булево - признак учета всех режимов обновления: автоматический, ручной.
//
Процедура ПолучитьДатыОбновленияНоменклатуры(ДанныеДляОтправки, ВсеРежимыОбновления = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ДатаОбновления КАК ДатаОбновления,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК Идентификатор,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ДатаОбновления <> ДАТАВРЕМЯ(1, 1, 1)
	|	И (&ВсеРежимыОбновления
	|			ИЛИ СоответствиеНоменклатурыРаботаСНоменклатурой.ОбновляетсяАвтоматически)";
	
	Запрос.УстановитьПараметр("ВсеРежимыОбновления", ВсеРежимыОбновления);
	
	ДанныеДляОтправки = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Обновление объектов на автоматическом обновлении.
//
// Параметры:
//  КоличествоОбновленныхЗаписей - Число - количество обновленных записей.
//
Процедура ОбновитьАвтоматическиОбновляемыеОбъекты(КоличествоОбновленныхЗаписей) Экспорт
	
	ДатыОбновленияВидовНоменклатуры = Неопределено;
	ДатыОбновленияНоменклатуры      = Неопределено;
	ИдентификаторыКатегорий         = Новый Массив;
	КоличествоОбновленныхВидовНоменклатуры = 0;
	КоличествоОбновленнойНоменклатуры      = 0;
	
	ПолучитьДатыОбновленияВидовНоменклатуры(ДатыОбновленияВидовНоменклатуры);
	ПолучитьДатыОбновленияНоменклатуры(ДатыОбновленияНоменклатуры);
	
	ДанныеОбновленияПоВидамНоменклатуры = РаботаСНоменклатурой.ПолучитьИзмененияИзСервисаПоВидамНоменклатуры(ДатыОбновленияВидовНоменклатуры);
	ДанныеОбновленияПоНоменклатуре      = РаботаСНоменклатурой.ПолучитьИзмененияИзСервисаПоНоменклатуре(ДатыОбновленияНоменклатуры);
	
	Если ДанныеОбновленияПоНоменклатуре.Количество() = 0 
		И ДанныеОбновленияПоВидамНоменклатуры.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	// Обновление Видов номенклатуры
	
	Если ДанныеОбновленияПоВидамНоменклатуры.Количество() > 0  Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИдентификаторыКатегорий, ДанныеОбновленияПоВидамНоменклатуры.ВыгрузитьКолонку("Идентификатор"), Истина);	
	КонецЕсли;
	Если ДанныеОбновленияПоНоменклатуре.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИдентификаторыКатегорий, ДанныеОбновленияПоНоменклатуре.ВыгрузитьКолонку("ИдентификаторКатегории"), Истина);	
	КонецЕсли;
	
	РезультатАнализа = Новый ТаблицаЗначений;
	
	// Обновление видов номенклатуры
	
	Если ИдентификаторыКатегорий.Количество() > 0 Тогда
		РазобратьИзмененияВидовНоменклатуры(ИдентификаторыКатегорий, РезультатАнализа, Неопределено, Истина);
		КоличествоОбновленныхВидовНоменклатуры = РезультатАнализа.Количество();
	КонецЕсли;
		
	// Обновление номенклатуры
	
	Если ДанныеОбновленияПоНоменклатуре.Количество() > 0 Тогда
		РазобратьИзмененияНоменклатуры(ДанныеОбновленияПоНоменклатуре.ВыгрузитьКолонку("Идентификатор"), РезультатАнализа, Неопределено, Неопределено, Истина);
		КоличествоОбновленнойНоменклатуры = РезультатАнализа.Количество();
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	КоличествоОбновленныхЗаписей = КоличествоОбновленныхВидовНоменклатуры + КоличествоОбновленнойНоменклатуры;
	
КонецПроцедуры

// Обновление вида номенклатуры.
//
// Параметры:
//  ВидНоменклатуры			 - Ссылка - ссылка на вид номенклатуры.
//  ИдентификаторКатегории	 - Строка - идентификатор категории.
//
Процедура ОбновитьВидНоменклатуры(ВидНоменклатуры, ИдентификаторКатегории) Экспорт
	
	МассивИдентификаторов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторКатегории);
	
	РазобратьИзмененияВидовНоменклатуры(МассивИдентификаторов, Неопределено, ВидНоменклатуры, Истина);	
	
КонецПроцедуры

// Обновление номенклатуры.
//
// Параметры:
//  Номенклатура				 - Ссылка - ссылка на номенклатуру.
//  ИдентификаторНоменклатуры	 - Строка - идентификатор номенклатуры.
//
Процедура ОбновитьНоменклатуру(Номенклатура, ИдентификаторНоменклатуры) Экспорт
	
	МассивИдентификаторов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторНоменклатуры);
	
	РазобратьИзмененияНоменклатуры(МассивИдентификаторов, Неопределено, Неопределено, Номенклатура, Истина);
	
КонецПроцедуры

#Область ВидыНоменклатуры

// Анализ отличий реквизитов и обновление видов номенклатуры базы и категорий сервиса.
//
// Параметры:
//  ИдентификаторыКатегорий	 - Массив (Строка) - массив идентификаторов категорий.
//  РезультатАнализа		 - ТаблицаЗначений - результат анализа.
//  ВидНоменклатуры			 - СправочникСсылка - ссылка на вид номенклатуры, для обновления конкретного объекта.
//  РежимОбновления			 - Булево - если Истина, происходит обновление объектов.
//
Процедура РазобратьИзмененияВидовНоменклатуры(ИдентификаторыКатегорий, РезультатАнализа = Неопределено, ВидНоменклатуры = Неопределено, РежимОбновления = Ложь) Экспорт
	
	Если РезультатАнализа = Неопределено Тогда
		РезультатАнализа = Новый ТаблицаЗначений;
	КонецЕсли; 
	
	РезультатАнализа.Колонки.Добавить("НеСопоставленоЗначений",   Новый ОписаниеТипов("Число"));
	РезультатАнализа.Колонки.Добавить("НеСопоставленоРеквизитов", Новый ОписаниеТипов("Число"));
	РезультатАнализа.Колонки.Добавить("ИзмененоРеквизитов",       Новый ОписаниеТипов("Число"));
	РезультатАнализа.Колонки.Добавить("ИдентификаторКатегории",   Новый ОписаниеТипов("Строка"));
	РезультатАнализа.Колонки.Добавить("ПредставлениеКатегории",   Новый ОписаниеТипов("Строка"));
	РезультатАнализа.Колонки.Добавить("ОбновляетсяАвтоматически", Новый ОписаниеТипов("Булево"));
	РезультатАнализа.Колонки.Добавить("ВидНоменклатуры");
		
	ДанныеПоКатегориям = РаботаСНоменклатурой.ДанныеКатегорийСервиса(ИдентификаторыКатегорий);
	
	Если ДанныеПоКатегориям = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитовВидовНоменклатуры = Новый ТаблицаЗначений;
	
	РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовВидовНоменклатуры(
		ВидыНоменклатурыПоИдентификаторам(ИдентификаторыКатегорий), ЗначенияРеквизитовВидовНоменклатуры);
		
	ЗаполнитьТехническиеРеквизитыВидовНоменклатуры(ЗначенияРеквизитовВидовНоменклатуры);	
	
	СоответствиеРеквизитовИЗначений = Неопределено;
	
	РаботаСНоменклатурой.ПолучитьСоответствиеРеквизитовИЗначений(ИдентификаторыКатегорий, СоответствиеРеквизитовИЗначений, ВидНоменклатуры);
	
	Для каждого СтрокаДанныхПоКатегории Из ДанныеПоКатегориям Цикл
		
		СтрокиВидовНоменклатуры = ЗначенияРеквизитовВидовНоменклатуры.НайтиСтроки(
			Новый Структура("ИдентификаторКатегории", СтрокаДанныхПоКатегории.Идентификатор));
			
		Для каждого СтрокаВидаНоменклатуры Из СтрокиВидовНоменклатуры Цикл
			РаботаСНоменклатурой.ЗаполнитьСоответствиеРеквизитовИЗначенийКатегорий(СоответствиеРеквизитовИЗначений, СтрокаДанныхПоКатегории, 
				СтрокаВидаНоменклатуры.ВидНоменклатуры);
			РазобратьРеквизитыВидовНоменклатуры(СтрокаДанныхПоКатегории, СтрокаВидаНоменклатуры, РезультатАнализа, РежимОбновления);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Номенклатура

// Анализ отличий реквизитов и обновление номенклатуры базы и номенклатуры сервиса.
//
// Параметры:
//  ИдентификаторыНоменклатуры	 - Массив (Строка) - массив идентификаторов номенклатуры.
//  РезультатАнализа			 - ТаблицаЗначений - результат анализа.
//  РеквизитыДляОбновления		 - ТаблицаЗначений - таблица измененных реквизитов.
//  Номенклатура				 - СправочникСсылка - ссылка на номенклатуру, для обновления конкретного объекта.
//  РежимОбновления				 - Булево - если Истина, происходит обновление объектов.
//
Процедура РазобратьИзмененияНоменклатуры(ИдентификаторыНоменклатуры, РезультатАнализа, РеквизитыДляОбновления, Номенклатура = Неопределено, РежимОбновления = Ложь) Экспорт
	
	СопоставленныеРеквизиты = Новый ТаблицаЗначений;
	
	РезультатАнализа = Новый ТаблицаЗначений;
	
	РезультатАнализа.Колонки.Добавить("ИдентификаторНоменклатуры",    Новый ОписаниеТипов("Строка"));
	РезультатАнализа.Колонки.Добавить("ОбновляетсяАвтоматически",     Новый ОписаниеТипов("Булево"));
	РезультатАнализа.Колонки.Добавить("КоличествоНовыхЗначений",      Новый ОписаниеТипов("Число"));
	РезультатАнализа.Колонки.Добавить("КоличествоИзмененныхЗначений", Новый ОписаниеТипов("Число"));
	РезультатАнализа.Колонки.Добавить("Номенклатура");
	РезультатАнализа.Колонки.Добавить("ВидНоменклатуры");
		
	ДанныеПоНоменклатуре = РаботаСНоменклатурой.ДанныеНоменклатурыСервиса(ИдентификаторыНоменклатуры);
	
	Если ДанныеПоНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитовНоменклатуры = Новый ТаблицаЗначений;
	ЗначенияДополнительныхРеквизитов = Новый ТаблицаЗначений;
	
	РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовНоменклатуры(
		НоменклатураПоИдентификаторам(ИдентификаторыНоменклатуры), ЗначенияРеквизитовНоменклатуры);
		
	Если ЗначенияРеквизитовНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьТехническиеРеквизитыНоменклатуры(ЗначенияРеквизитовНоменклатуры);	
	
	СоответствиеРеквизитовИЗначений = Неопределено;
	
	Если РаботаСНоменклатурой.ВедетсяУчетВидовНоменклатуры() Тогда
		РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияДополнительныхРеквизитов(ЗначенияРеквизитовНоменклатуры.ВыгрузитьКолонку("Номенклатура"), ЗначенияДополнительныхРеквизитов);	
		РаботаСНоменклатурой.ПолучитьСоответствиеРеквизитовИЗначений(ДанныеПоНоменклатуре.ВыгрузитьКолонку("ИдентификаторКатегории"), СоответствиеРеквизитовИЗначений);
	КонецЕсли;
		
	Для каждого СтрокаДанныхПоНоменклатуре Из ДанныеПоНоменклатуре Цикл
		
		СтрокиНоменклатурыБазы = ЗначенияРеквизитовНоменклатуры.НайтиСтроки(
			Новый Структура("ИдентификаторНоменклатуры", СтрокаДанныхПоНоменклатуре.Идентификатор));
			
		Для каждого СтрокаНоменклатуры Из СтрокиНоменклатурыБазы Цикл
			
			ДополнительныеРеквизитыНоменклатуры = Неопределено;
			
			Если РаботаСНоменклатурой.ВедетсяУчетВидовНоменклатуры() Тогда
				ДополнительныеРеквизитыНоменклатуры = ЗначенияДополнительныхРеквизитов.Скопировать(
					Новый Структура("ВладелецСвойств", СтрокаНоменклатуры.Номенклатура));
			КонецЕсли;
			
			РазобратьРеквизитыНоменклатуры(СтрокаДанныхПоНоменклатуре, СтрокаНоменклатуры, ДополнительныеРеквизитыНоменклатуры, 
				СоответствиеРеквизитовИЗначений, РезультатАнализа, РеквизитыДляОбновления, РежимОбновления);	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаботаСДанными

// Получение вида номенклатуры информационной базы по идентификаторам.
//
// Параметры:
//  ИдентификаторыКатегорий	 - Массив (Строка) - массив идентификаторов.
// 
// Возвращаемое значение:
//  Массив - массив ссылок.
//
Функция ВидыНоменклатурыПоИдентификаторам(ИдентификаторыКатегорий) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории В(&ИдентификаторыКатегорий)";
	
	Запрос.УстановитьПараметр("ИдентификаторыКатегорий", ИдентификаторыКатегорий);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидНоменклатуры");
		
КонецФункции

// Конвертирует дату из формата UnixTime в тип Дата.
// Параметры:
//   Источник - Число - число в формате UnixTime, например 1405955187848899.
//
Функция ДатаИзUnixTime(Источник) Экспорт
	
	Возврат МестноеВремя(Дата(1970, 1, 1, 0 ,0, 0) + Источник / 1000);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеМетодыAPI

// Общие параметры вызова команд сервиса.
//
Функция ОписаниеПараметровКомандыСервиса()
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Наименование");   // Полное наименование метода.
	ПараметрыКоманды.Вставить("Адрес");          // Адрес URI метода.
	ПараметрыКоманды.Вставить("Метод");          // Метод HTTP соединения, например POST.
	ПараметрыКоманды.Вставить("Таймаут");        // Длительность ожидания ответа.
	ПараметрыКоманды.Вставить("Данные");         // Двоичные данные или строка.
	ПараметрыКоманды.Вставить("Аутентификация"); // Требуется аутентификация.
	ПараметрыКоманды.Вставить("БлокироватьСообщенияОбОшибках"); // Не выводить сообщения об ошибках.
	ПараметрыКоманды.Вставить("Результат");      // Свойство возврата результата, например "path[0].cat".
	ПараметрыКоманды.Вставить("Обработка");      // Описание обработки данных результата.
	ПараметрыКоманды.Вставить("ДополнительныеПараметры"); // Дополнительные параметры.
	ПараметрыКоманды.Вставить("Ошибки",          Новый Соответствие); // Соответствие ошибок, например: (404, "Не найдено").
	
	Возврат ПараметрыКоманды;
		
КонецФункции

// Общие настройки для подключения к сервису 1С:Бизнес-сеть.
//
Функция ПараметрыСоединенияССервисом(НеобходимаАутентификация, Отказ)

	ПараметрыСоединения = Новый Структура;
	ПараметрыСоединения.Вставить("ИмяСервера", "catalog-api.1c.ru");
	ПараметрыСоединения.Вставить("Порт", 443);
	ПараметрыСоединения.Вставить("Таймаут", 30);
	ПараметрыСоединения.Вставить("Прокси", ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("https"));
	ПараметрыСоединения.Вставить("ЗащищенноеСоединение",
		ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(, Новый СертификатыУдостоверяющихЦентровОС));
		
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json;charset=UTF-8");
	
	Если НеобходимаАутентификация = Истина Тогда
		// Получение тикета интернет-поддержки.
		УстановитьПривилегированныйРежим(Истина);
		ТикетАутентификации = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки("1c-nomenklatura");
		УстановитьПривилегированныйРежим(Ложь);
		Если ЗначениеЗаполнено(ТикетАутентификации.КодОшибки) Тогда
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось подключиться к порталу интернет-поддержки по причине:
					|%1'"),
				ТикетАутентификации.СообщениеОбОшибке);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки,,,, Отказ);
			Возврат Неопределено;
		КонецЕсли;
		Заголовки.Вставить("Authorization", "Basic " + СтрокаBase64БезBOM("AUTH_TOKEN:" + ТикетАутентификации.Тикет));
	КонецЕсли;
	ПараметрыСоединения.Вставить("Заголовки", Заголовки);
		
	Возврат ПараметрыСоединения;

КонецФункции

Функция СтрокаBase64БезBOM(СтрокаДанных)

	ПотокВПамяти = Новый ПотокВПамяти();
	Текст = Новый ЗаписьТекста(ПотокВПамяти, КодировкаТекста.UTF8, , Символы.ПС);
	Текст.Записать(СтрокаДанных);
	Текст.Закрыть();
	ДвоичныеДанные = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	СтрокаФорматBase64 = Base64Строка(ДвоичныеДанные);
	
	СтрокаФорматBase64 = СтрЗаменить(СтрокаФорматBase64, Символы.ВК, "");
	СтрокаФорматBase64 = СтрЗаменить(СтрокаФорматBase64, Символы.ПС, "");
	
	Возврат СтрокаФорматBase64;

КонецФункции


// Обработка ответа сервиса.
//
// Параметры:
//  ПараметрыКоманды - Структура - параметры команды, см.БизнесСеть.ОписаниеПараметровКомандыСервиса().
//  КодСостояния	 - Строка - код состояния ответа HTTP-соединения.
//  Данные			 - Структура, Строка - возвращаемые данные сервиса.
//  Отказ			 - Булево - результат проверки.
// 
// Возвращаемое значение:
//  Произвольный - возвращаемый результат обработки.
//
Функция ОбработатьОтветСервиса(ПараметрыКоманды, КодСостояния, Данные, Отказ)
	
	// Инициализация возврата ошибки.
	Результат = Неопределено;
	
	Если ПараметрыКоманды.Ошибки.Получить(КодСостояния) <> Неопределено Тогда
		Возврат ОбработатьОшибкуСервиса(ПараметрыКоманды, КодСостояния, Данные, Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыКоманды.Результат) Тогда
		Данные = ЗначениеИзСтрокиJSON(Данные);
		Данные = ПолучитьЗначенияДанныеСтруктурыПоАбсолютномуПути(Данные, ПараметрыКоманды.Результат, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПараметрыКоманды.Обработка <> Неопределено Тогда
		Результат = ОбработатьРезультатОтветаСервиса(ПараметрыКоманды.Обработка, КодСостояния,
			Данные, Отказ);
	Иначе
		Результат = ЗначениеИзСтрокиJSON(Данные);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьОшибкуСервиса(ПараметрыКоманды, КодСостояния, Результат, Отказ)

	ТекстОшибки = ПараметрыКоманды.Ошибки.Получить(КодСостояния);
	
	Если ТекстОшибки = Ложь Тогда
		Возврат Ложь;
	ИначеЕсли ПустаяСтрока(ТекстОшибки) Тогда
		ТекстОшибки = НСтр("ru = 'Работа с номенклатурой.Ошибка'");
	КонецЕсли;
	
	Отказ = Истина;
	
	ТекстОшибкиСервиса = "";
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("message") Тогда
			ТекстОшибкиСервиса = Результат.message;
		ИначеЕсли Результат.Свойство("error_description") Тогда
			ТекстОшибкиСервиса = Результат.error_description;
		ИначеЕсли Результат.Свойство("ПодробныйТекстОшибки") Тогда
			ТекстОшибкиСервиса = Результат.ПодробныйТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	ПодробныйТекстОшибки = ТекстОшибки
		+ ?(КодСостояния > 200, Символы.ПС + НСтр("ru = 'Код состояния:'") + " " + КодСостояния, "")
		+ Символы.ПС + ПараметрыКоманды.Адрес
		+ ?(ТекстОшибкиСервиса = "", "", Символы.ПС + ТекстОшибкиСервиса);
	
	Если Не (ПараметрыКоманды.Свойство("БлокироватьСообщенияОбОшибках")
		И ПараметрыКоманды.БлокироватьСообщенияОбОшибках = Истина) Тогда
		Если Пользователи.ЭтоПолноправныйПользователь() Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru ='Подробности см. в журнале регистрации.'");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())
		+ ПараметрыКоманды.Наименование, УровеньЖурналаРегистрации.Ошибка,,, ПодробныйТекстОшибки);
		
	Возврат Неопределено;
КонецФункции

Функция ОбработатьРезультатОтветаСервиса(Обработка, КодСостояния, Данные, Отказ)
	
	ЗначениеДанных = ЗначениеИзСтрокиJSON(Данные);
	
	Если ТипЗнч(Обработка) = Тип("ТаблицаЗначений")
		И ТипЗнч(ЗначениеДанных) = Тип("Массив") Тогда
		
		Результат = МассивСтруктурВТаблицуЗначений(ЗначениеДанных, Обработка);
		
	ИначеЕсли ТипЗнч(Обработка) = Тип("Строка") Тогда
		
		Результат = ПреобразоватьЗначениеСервиса(ЗначениеДанных, Обработка, КодСостояния);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТипОбъектаXDTO(Путь, URIПространстваИмен = "http://catalog-api.1c.ru/XMLSchema")
	
	МассивПути = Новый СписокЗначений;
	МассивПути.ЗагрузитьЗначения(СтрРазделить(Путь, "."));
	МассивПути = МассивПути.ВыгрузитьЗначения();
		
	ПервыйЭлемент = МассивПути[0];
	Если Лев(ПервыйЭлемент,1) = "{" И Прав(ПервыйЭлемент,1) = "}" Тогда
		ИмяПакета = Сред(ПервыйЭлемент, 2, СтрДлина(ПервыйЭлемент) - 2);
		Коллекция = ФабрикаXDTO.Пакеты.Получить(ИмяПакета).КорневыеСвойства;
	Иначе
		ТипОбъекта = ФабрикаXDTO.Тип(URIПространстваИмен, ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	КонецЕсли;
	
	МассивПути.Удалить(0);
	Пока МассивПути.Количество() > 0 Цикл
		
		Если Коллекция = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Свойство = Коллекция.Получить(МассивПути[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТипОбъекта = Свойство.Тип;
		МассивПути.Удалить(0);
		Попытка
			Коллекция = ТипОбъекта.Свойства;
		Исключение
			Коллекция = Неопределено;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТипОбъекта;
	
КонецФункции

// Типы получаемых данных.
// 
// Возвращаемое значение:
//  Структура - описание типов:
//   * Простой         - простой тип.
//   * Строка          - тип Строка.
//   * Число           - тип Число.
//   * Булево          - тип Булево.
//   * Структура       - тип Структура.
//   * Дата            - тип Дата.
//   * ТаблицаЗначений - тип ТаблицаЗначений.
//   * СтавкаНДС       - тип СтавкаНДС.
//
Функция Типы()
	
	Результат = Новый Структура;
	Результат.Вставить("Простой",   Новый ОписаниеТипов("Строка, Булево, Число, Дата"));
	Результат.Вставить("Булево",    Новый ОписаниеТипов("Булево"));
	Результат.Вставить("Число",     Новый ОписаниеТипов("Число"));
	Результат.Вставить("Дата",      Новый ОписаниеТипов("Дата"));
	Результат.Вставить("Строка",    Новый ОписаниеТипов("Строка"));
	Результат.Вставить("Структура", Новый ОписаниеТипов("Структура"));
	Результат.Вставить("Массив",    Новый ОписаниеТипов("Массив"));
	Результат.Вставить("Таблица",   Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти

#Область ОписаниеВозвращаемыхЗначений

// Описание эталонной карточки номенклатуры Nomenclature.
//
Функция ОписаниеТаблицыНоменклатуры()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ЕдиницаИзмерения",        Типы().Структура,   "unit|Nomenclature.unit");
	Результат.Колонки.Добавить("ШтрихКоды",               Типы().Массив,      "barcodes");
	Результат.Колонки.Добавить("Изображения",             Типы().Таблица,     "images|Nomenclature.images");
	Результат.Колонки.Добавить("Классификаторы",          Типы().Таблица,     "classifiers|Nomenclature.classifiers");
	Результат.Колонки.Добавить("Характеристики",          Типы().Таблица,     "features|Nomenclature.features");
	Результат.Колонки.Добавить("ДополнительныеРеквизиты", Типы().Таблица,     "attributes|Nomenclature.attributes");
	Результат.Колонки.Добавить("Идентификатор",           Типы().Строка,      "id");
	Результат.Колонки.Добавить("Наименование",            Типы().Строка,      "name");
	Результат.Колонки.Добавить("ИдентификаторКатегории",  Типы().Строка,      "categoryId");
	Результат.Колонки.Добавить("НаименованиеКатегории",   Типы().Строка,      "categoryName");
	Результат.Колонки.Добавить("СтавкаНДС",               Типы().Строка,       "vat");
	Результат.Колонки.Добавить("Тип",                     Типы().Строка,      "type|ДесериализоватьТипНоменклатуры");
	Результат.Колонки.Добавить("УчетГТД",                 Типы().Булево,      "requiredGTD");
	Результат.Колонки.Добавить("УчастникЕГАИС",           Типы().Булево,      "alcoholContaining");
	Результат.Колонки.Добавить("УчастникГИСМ",            Типы().Булево,      "requiredGISM");
	Результат.Колонки.Добавить("ОблагаетсяАкцизом",       Типы().Булево,      "excisable");
	Результат.Колонки.Добавить("НаименованиеДляПечати",   Типы().Строка,      "nameShort");
	Результат.Колонки.Добавить("ИдентификаторБренда",     Типы().Строка,      "brandId");
	Результат.Колонки.Добавить("НаименованиеБренда",      Типы().Строка,      "brandName");
	Результат.Колонки.Добавить("ИдентификаторПроизводителя", Типы().Строка,   "manufacturerId");
	Результат.Колонки.Добавить("НаименованиеПроизводителя",  Типы().Строка,   "manufacturerName");
	Результат.Колонки.Добавить("Артикул",                 Типы().Строка,      "manufacturerCode");
	Результат.Колонки.Добавить("Описание",                Типы().Строка,      "description");
	Результат.Колонки.Добавить("ИдентификаторРекламнойЗаписи", Типы().Строка, "advertId");
	Результат.Колонки.Добавить("ДатаИзменения",           Типы().Дата,        "modified|ДесериализоватьДату");
	Результат.Колонки.Добавить("ЗаполненныеРеквизиты",    Типы().Массив,      "propertiesHavingValue|Nomenclature.propertiesHavingValue");
	Результат.Колонки.Добавить("РеквизитыХарактеристик",  Типы().Массив,      "featuresAttributes");
	
	Возврат Результат;
	
КонецФункции

// Описание типа классификатора рубрики Nomenclature.classifiers.
//
Функция ОписаниеТаблицыКлассификатораНоменклатуры()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Наименование",  Типы().Строка, "name");
	Результат.Колонки.Добавить("Идентификатор", Типы().Строка, "code");
	Результат.Колонки.Добавить("Описание",      Типы().Строка, "description");
	
	Возврат Результат;

КонецФункции

// Описание типа характеристик номенклатуры Nomenclature.features.
//
Функция ОписаниеТаблицыХарактеристикНоменклатуры()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Штрихкоды",     Новый ОписаниеТипов("Массив"), "barcodes" );
	Результат.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"), "featureId");
	Результат.Колонки.Добавить("Наименование",  Новый ОписаниеТипов("Строка"), "name");
	
	Возврат Результат;
	
КонецФункции

// Описание типа характеристик категории Category.features.
//
Функция ОписаниеТаблицыХарактеристикКатегорий()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Наименование",            Типы().Строка,  "name");
	Результат.Колонки.Добавить("ДополнительныеРеквизиты", Типы().Таблица, "attributes|Category.features.attributes");
	Результат.Колонки.Добавить("Идентификаторы",          Типы().Массив,  "featureIds");
	
	Возврат Результат;
	
КонецФункции

// Описание поиска дополнительных реквизитов NomenclatureResponse.nomenclatures.attributes.
//
Функция ОписаниеТаблицыДополнительныхРеквизитовНоменклатуры()
	
	ПростойТип = Новый ОписаниеТипов("Строка, Булево, Число, Дата");
	Типы().Строка  = Новый ОписаниеТипов("Строка");
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор",              Типы().Строка,  "attributeId");
	Результат.Колонки.Добавить("Наименование",               Типы().Строка,  "name");
	Результат.Колонки.Добавить("Значение",                   ПростойТип, "value");
	Результат.Колонки.Добавить("ИдентификаторЗначения",      Типы().Строка,  "valueId.id");
	Результат.Колонки.Добавить("СтроковоеЗначение",          Типы().Строка,  "valueId.value");
	Результат.Колонки.Добавить("КодКлассификатора",          Типы().Строка,  "classifier.code");
	Результат.Колонки.Добавить("НаименованиеКлассификатора", Типы().Строка,  "classifier.name");
	Результат.Колонки.Добавить("ОписаниеКлассификатора",     Типы().Строка,  "classifier.description");
	
	Возврат Результат;
	
КонецФункции

// Описание поиска реквизитов категории CategoryResponse.categories.attributes
//
Функция ОписаниеТаблицыРеквизитовКатегорий()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор",          Типы().Строка,  "attributeId");
	Результат.Колонки.Добавить("ИдентификаторыЗначений", Типы().Массив,  "valueIds");
	Результат.Колонки.Добавить("Наименование",           Типы().Строка, "name");
	Результат.Колонки.Добавить("Обязательный",           Типы().Строка,  "required");
	Результат.Колонки.Добавить("МинимальноеЗначение",    Типы().Строка,  "min");
	Результат.Колонки.Добавить("МаксимальноеЗначение",   Типы().Строка,  "max");
	Результат.Колонки.Добавить("Ранг",                   Типы().Число,   "rank");
	Результат.Колонки.Добавить("ДатаИзменения",          Типы().Дата,    "modified|ДесериализоватьДату");
	Результат.Колонки.Добавить("Тип",                    Типы().Строка,  "type|ДесериализоватьТипЗначения");
	
	Возврат Результат;
	
КонецФункции

// Описание поиска реквизитов AttributeResponse.attributes
//
Функция ОписаниеТаблицыДополнительныхРеквизитов()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор", Типы().Строка, "id");
	Результат.Колонки.Добавить("Наименование",  Типы().Строка, "name");
	Результат.Колонки.Добавить("Тип",           Типы().Строка, "type|ДесериализоватьТипЗначения");
	Результат.Колонки.Добавить("ДатаИзменения", Типы().Дата,   "modified|ДесериализоватьДату");
	Результат.Колонки.Добавить("ИдентификаторыКатегорий", Типы().Массив,    "categoryIds");
	Результат.Колонки.Добавить("ЕдиницаИзмерения",        Типы().Структура, "unit|Attribute.unit");
	
	Возврат Результат;
	
КонецФункции

// Описание поиска значений реквизитов AttributeValueResponse.attributeValues.
//
Функция ОписаниеТаблицыЗначенияДополнительныхРеквизитов()

	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Идентификатор",           Типы().Строка,  "id");
	Результат.Колонки.Добавить("Значение",                Типы().Строка,  "value");
	Результат.Колонки.Добавить("ДатаИзменения",           Типы().Дата,    "modified|ДесериализоватьДату");
	Результат.Колонки.Добавить("ДополнительныеРеквизиты", Типы().Таблица, "reference|AttributeValueResponse.attributeValues.reference");
	
	Возврат Результат;
	
КонецФункции

// Описание поиска значений категорий с дополнительными реквизитами
// AttributeValuesByCategoriesResponse.attributeValuesByCategories.
//
Функция ОписаниеТаблицыЗначенияДополнительныхРеквизитовКатегорий()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИдентификаторКатегории",                Типы().Строка, "categoryId");
	Результат.Колонки.Добавить("НаименованиеКатегории",                 Типы().Строка, "categoryName");
	Результат.Колонки.Добавить("ИдентификаторДополнительногоРеквизита", Типы().Строка, "attributeId");
	Результат.Колонки.Добавить("НаименованиеДополнительногоРеквизита",  Типы().Строка, "attributeName");
	Результат.Колонки.Добавить("Значения",                              Типы().Таблица,
		"values|AttributeValuesByCategoriesResponse.attributeValuesByCategories.values");
	
	Возврат Результат;
	
КонецФункции

// Описание поиска характеристик FeatureResponse.FeatureResponse.
//
Функция ОписаниеТаблицыХарактеристики()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор",           Типы().Строка, "id");
	Результат.Колонки.Добавить("Наименование",            Типы().Строка, "value");
	Результат.Колонки.Добавить("ДатаИзменения",           Типы().Дата,   "modified|ДесериализоватьДату");
	Результат.Колонки.Добавить("ДополнительныеРеквизиты", Типы().Таблица,
		"attributes|Feature.attributes");
	Результат.Колонки.Добавить("ИдентификаторыКатегорий", Типы().Массив, "categoryIds");
	
	Возврат Результат;
	
КонецФункции

// Описание поиска рекламных записей AdvertResponse.adverts.
//
Функция ОписаниеТаблицыРекламныеЗаписи()

	Типы().Строка = Новый ОписаниеТипов("Строка");
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор", Типы().Строка, "id");
	Результат.Колонки.Добавить("Наименование",  Типы().Строка, "name");
	Результат.Колонки.Добавить("Сайт",          Типы().Строка, "site");
	Результат.Колонки.Добавить("БаннерURL",     Типы().Строка, "bannerImageLink");
	Результат.Колонки.Добавить("ЛоготипURL",    Типы().Строка, "logoIconLink");
	
	Возврат Результат;
	
КонецФункции

// Описание единиц измерения Nomenclature.unit.
//
Функция ОписаниеТаблицыЕдиницыИзмеренияНоменклатуры()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ОКЕИ",                   Типы().Строка, "okei");
	Результат.Колонки.Добавить("Наименование",           Типы().Строка, "name");
	Результат.Колонки.Добавить("ПолноеНаименование",     Типы().Строка, "fullName");
	Результат.Колонки.Добавить("ВнутреннееНаименование", Типы().Строка, "interName");
	Результат.Колонки.Добавить("Тип",                    Типы().Строка, "type");
	Результат.Колонки.Добавить("БазовыйОКЕИ",            Типы().Строка, "baseOKEI");
	Результат.Колонки.Добавить("ЧислительКратности",     Типы().Число,  "baseUnitCount");
	Результат.Колонки.Добавить("ЗнаменательКратности",   Типы().Число,  "unitCount");
	
	Возврат Результат;
	
КонецФункции

// Описание единиц измерения Attribute.unit.
//
Функция ОписаниеТаблицыЕдиницыИзмеренияДополнительныхРеквизитов()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ОКЕИ",                   Типы().Строка, "okei");
	Результат.Колонки.Добавить("Наименование",           Типы().Строка, "name");
	Результат.Колонки.Добавить("ПолноеНаименование",     Типы().Строка, "fullName");
	Результат.Колонки.Добавить("ВнутреннееНаименование", Типы().Строка, "interName");
	Результат.Колонки.Добавить("Тип",                    Типы().Строка, "type");
	Результат.Колонки.Добавить("БазовыйОКЕИ",            Типы().Строка, "baseOKEI");
	Результат.Колонки.Добавить("ЧислительКратности",     Типы().Число,  "baseUnitCount");
	Результат.Колонки.Добавить("ЗнаменательКратности",   Типы().Число,  "unitCount");
	
	Возврат Результат;
	
КонецФункции

// Описание единиц измерения Unit.
//
Функция ОписаниеТаблицыЕдиницыИзмеренияОКЕИ()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ОКЕИ",                     Типы().Строка, "okei");
	Результат.Колонки.Добавить("Наименование",             Типы().Строка, "name");
	Результат.Колонки.Добавить("НациональноеОбозначение",  Типы().Строка, "nationalSymbol");
	Результат.Колонки.Добавить("МеждународноеОбозначение", Типы().Строка, "internationalSymbol");
	Результат.Колонки.Добавить("НациональныйКод",          Типы().Строка, "nationalCodeMark");
	Результат.Колонки.Добавить("МеждународныйКод",         Типы().Строка, "internationalCodeMark");
	Результат.Колонки.Добавить("Тип",                      Типы().Строка, "type");
	Результат.Колонки.Добавить("ЧислительКратности",         Типы().Число,  "baseUnitCount");
	
	Возврат Результат;
	
КонецФункции

// Описание поиска брендов BrandResponse.brands.
//
Функция ОписаниеТаблицыБренды()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор",              Типы().Строка, "id");
	Результат.Колонки.Добавить("Наименование",               Типы().Строка, "name");
	Результат.Колонки.Добавить("ИдентификаторПроизводителя", Типы().Строка, "manufacturerId");
	Результат.Колонки.Добавить("НаименованиеПроизводителя",  Типы().Строка, "manufacturerName");
	Результат.Колонки.Добавить("ДатаИзменения",              Типы().Дата,   "modified|ДесериализоватьДату");
	Результат.Колонки.Добавить("Логотипы",                   Типы().Массив, "images");
	
	Возврат Результат;
	
КонецФункции

// Описание поиска производителей ManufacturerResponse.manufacturers.
//
Функция ОписаниеТаблицыПроизводители()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор",    Типы().Строка, "id");
	Результат.Колонки.Добавить("Наименование",     Типы().Строка, "name");
	Результат.Колонки.Добавить("GLN",              Типы().Строка, "gln");
	Результат.Колонки.Добавить("ИНН",              Типы().Строка, "inn");
	Результат.Колонки.Добавить("КПП",              Типы().Строка, "kpp");
	Результат.Колонки.Добавить("Сайт",             Типы().Строка, "site");
	Результат.Колонки.Добавить("Адрес",            Типы().Строка, "address");
	Результат.Колонки.Добавить("Факс",             Типы().Строка, "fax");
	Результат.Колонки.Добавить("Телефоны",         Типы().Массив, "phones");
	Результат.Колонки.Добавить("ЭлектроннаяПочта", Типы().Массив, "emails");
	Результат.Колонки.Добавить("ДатаИзменения",    Типы().Дата,   "modified|ДесериализоватьДату");
	Результат.Колонки.Добавить("Логотипы",         Типы().Массив, "images");
	Возврат Результат;
	
КонецФункции

// Описание категорий Category.
//
Функция ОписаниеТаблицыКатегории()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ДополнительныеРеквизиты",      Типы().Таблица,   "attributes|CategoryResponse.categories.attributes");
	Результат.Колонки.Добавить("Характеристики",               Типы().Структура, "features|CategoryResponse.categories.features");
	Результат.Колонки.Добавить("Классификаторы",               Типы().Таблица,   "classifiers|CategoryResponse.categories.classifiers");
	Результат.Колонки.Добавить("Изображения",                  Типы().Массив,    "images");
	Результат.Колонки.Добавить("Идентификатор",                Типы().Строка,    "id");
	Результат.Колонки.Добавить("Наименование",                 Типы().Строка,    "name");
	Результат.Колонки.Добавить("ИдентификаторРодителя",        Типы().Строка,    "parentId");
	Результат.Колонки.Добавить("НаименованиеРодителя",         Типы().Строка,    "parentName");
	Результат.Колонки.Добавить("КоличествоПодчиненных",        Типы().Число,     "childrenCount");
	Результат.Колонки.Добавить("Ранг",                         Типы().Число,     "rank");	
	Результат.Колонки.Добавить("СтавкаНДС",                    Типы().Строка,     "vat");
	Результат.Колонки.Добавить("Тип",                          Типы().Строка,     "type|ДесериализоватьТипНоменклатуры");
	Результат.Колонки.Добавить("УчастникЕГАИС",                Типы().Булево,    "alcoholContaining");
	Результат.Колонки.Добавить("УчастникГИСМ",                 Типы().Булево,    "requiredGISM");
	Результат.Колонки.Добавить("Описание",                     Типы().Строка,    "description");
	Результат.Колонки.Добавить("ОтсылочныйИдентификатор",      Типы().Строка,    "referenceId");
	Результат.Колонки.Добавить("ИдентификаторРекламнойЗаписи", Типы().Строка,    "advertId");
	Результат.Колонки.Добавить("ДатаИзменения",                Типы().Дата,      "modified|ДесериализоватьДату");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПреобразованиеДанных

// Получение данных из строки в формате JSON.
//
Функция ЗначениеИзСтрокиJSON(Значение)
	
	// Проверка типа JSON
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат Значение;
	КонецЕсли;
	ПервыйСимвол = Лев(Значение, 1);
	Если ПервыйСимвол <> "[" И ПервыйСимвол <> "{" Тогда
		Возврат Значение;
	КонецЕсли;
	
	Результат = Неопределено;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.УстановитьСтроку(Значение);
		Результат = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Преобразование данных'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Получение значения в формате JSON.
//
Функция ЗначениеВФорматJSON(Данные, ПараметрыЗаписи = Неопределено)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписатьJSON(ЗаписьJSON, Данные);
	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

// Преобразование объекта XDTO в формат JSON.
//
// Параметры:
//  ОбъектXDTO	 - ОбъектXDTO - значение данных модели XDTO.
//  Уровень		 - Число - уровень вложенности.
// 
// Возвращаемое значение:
//  Строка - строка значения в формате JSON.
//
Функция ЗначениеXDTOВФорматJSON(Знач ЗначениеXDTO, Знач Уровень = 0)
	
	Если ЗначениеXDTO = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ЗаписьJSON.УстановитьСтроку();
	
	ПрочитатьОбъектXDTOВЗаписьJSON(ЗначениеXDTO, ЗаписьJSON, Уровень);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// Чтение значения объекта XTDO в запись JSON.
//
// Параметры:
//  ОбъектXDTO	 - Произвольный - элемент XDTO.
//  ЗаписьJSON	 - ЗаписьJSON - запись JSON.
//  Уровень		 - Число - уровень вложенности.
//
Процедура ПрочитатьОбъектXDTOВЗаписьJSON(Знач ЗначениеXDTO, ЗаписьJSON, Знач Уровень = 0)
	
	Если ТипЗнч(ЗначениеXDTO) = Тип("СписокXDTO") Тогда
		Если ЗначениеXDTO.Количество() Тогда
			Если Уровень > 0 Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства(ЗначениеXDTO.ВладеющееСвойство.Имя);
			КонецЕсли;
			ЗаписьJSON.ЗаписатьНачалоМассива();
			Для каждого ЭлементСпискаXDTO Из ЗначениеXDTO Цикл
				ПрочитатьОбъектXDTOВЗаписьJSON(ЭлементСпискаXDTO, ЗаписьJSON, Уровень);
			КонецЦикла;
			ЗаписьJSON.ЗаписатьКонецМассива();
		Иначе
			ЗаписьJSON.ЗаписатьНачалоМассива();
			ЗаписьJSON.ЗаписатьКонецМассива();
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗначениеXDTO) = Тип("ОбъектXDTO") Тогда
		Если Уровень > 0 Или ЗначениеXDTO.Свойства().Количество() > 1 Тогда
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
		КонецЕсли;
		Для каждого СвойствоXDTO Из ЗначениеXDTO.Свойства() Цикл
			Если ТипЗнч(ЗначениеXDTO[СвойствоXDTO.Имя]) = Тип("СписокXDTO") Тогда
				Если СвойствоXDTO.НижняяГраница > 0 
					ИЛИ ЗначениеXDTO[СвойствоXDTO.Имя].Количество() <> 0 
					ИЛИ Уровень = -1 Тогда
					ПрочитатьОбъектXDTOВЗаписьJSON(ЗначениеXDTO.ПолучитьСписок(СвойствоXDTO.Имя), ЗаписьJSON, Уровень + 1);
				КонецЕсли;
			ИначеЕсли ТипЗнч(ЗначениеXDTO[СвойствоXDTO.Имя]) = Тип("ОбъектXDTO") Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства(СвойствоXDTO.Имя);
				ПрочитатьОбъектXDTOВЗаписьJSON(ЗначениеXDTO.Получить(СвойствоXDTO.Имя), ЗаписьJSON, Уровень + 1);
			Иначе	
				ЗначениеСвойства = ЗначениеJSON(ЗначениеXDTO.Получить(СвойствоXDTO.Имя));
				Если НЕ ЗначениеЗаполнено(ЗначениеСвойства) И СвойствоXDTO.НижняяГраница = 0 Тогда
					Продолжить;
				КонецЕсли;
				ЗаписьJSON.ЗаписатьИмяСвойства(СвойствоXDTO.Имя);	
				ЗаписьJSON.ЗаписатьЗначение(ЗначениеСвойства);
			КонецЕсли;
		КонецЦикла;
		Если Уровень > 0 Или ЗначениеXDTO.Свойства().Количество() > 1 Тогда
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗначениеXDTO) <> Неопределено Тогда
		ЗаписьJSON.ЗаписатьЗначение(ЗначениеJSON(ЗначениеXDTO));
	КонецЕсли;
	
КонецПроцедуры

// Получение значение JSON простого типа (строка, число, дата, булево).
//
// Параметры:
//  Значение - Произвольный - значение преобразования.
// 
// Возвращаемое значение:
//  Строка, Число, Дата, Булево - преобразованное значение.
//
Функция ЗначениеJSON(Знач Значение)
	
	Если ТипЗнч(Значение) = Тип("Дата") Тогда
		Если ЗначениеЗаполнено(Значение) Тогда
			Значение = ЗаписатьДатуJSON(Значение, ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением);
		Иначе
			Значение = "null";	
		КонецЕсли;		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") И Значение = 0 Тогда
		Значение = Строка(Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Заполнение массива приемника по массиву источника.
//
// Параметры:
//  МассивПриемник - Коллекция - коллекция приемник для заполнения, например ЗначениеXDTO, массив.
//  МассивИсточник - Коллекция - коллекция источник.
//
Процедура ДополнитьМассив(МассивПриемник, МассивИсточник)
	
	Если Не ЗначениеЗаполнено(МассивИсточник)
		ИЛИ ТипЗнч(МассивИсточник) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЗначениеМассива Из МассивИсточник Цикл
		МассивПриемник.Добавить(ЗначениеМассива);
	КонецЦикла;
	
КонецПроцедуры

// Формирование строки параметров для HTTP запроса в формате "?Параметр1=Значение1&Параметр2...".
//
// Параметры:
//  Адрес	 - Строка - адрес ресурса.
//  Имя		 - Строка - имя параметра.
//  Значение - Строка - значение параметра.
//
Процедура ДобавитьПараметрАдресаHTML(Адрес, Имя, Знач Значение)
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Значение = Формат(Значение, "ЧГ=");
	КонецЕсли; 
	
	Адрес = Адрес + ?(СтрНайти(Адрес, "?") = 0, "?", "&") + Имя + "=" + Значение;
	
КонецПроцедуры

// Получение структуры данных по абсолютному пути.
// Параметры:
//  Путь - Строка - например, "pathToRoot[0].categories".
//
// Возвращаемое значение:
//  Произвольный - возвращаемые данные.
//
Функция ПолучитьЗначенияДанныеСтруктурыПоАбсолютномуПути(Значение, Путь, Отказ)
	
	СвойстваПути = СтрРазделить(Путь, ".");
	Результат = ЗначениеСвойстваСтруктурыВРекурсии(Значение, СвойстваПути, Отказ);
	Возврат Результат;
	
КонецФункции

// Получить значение данных структуры в рекурсии.
//
// Параметры:
//  Значение - Произвольный - значения обработки.
//  СвойстваПути - Массив - элементы пути, например  pathToRoot[0]; categories.
//  Отказ - Булево - признак ошибки при разборе.
//
Функция ЗначениеСвойстваСтруктурыВРекурсии(Знач Значение, Знач СвойстваПути, Отказ = Ложь)
	
	Свойство = СвойстваПути[0];
	МеткаКоллекции = СтрНайти(Свойство, "[");
	ИндексКоллекции = Неопределено;
	Если МеткаКоллекции <> 0 Тогда
		ИндексКоллекции = Сред(Свойство, МеткаКоллекции + 1);
		ИндексКоллекции = Лев(ИндексКоллекции, СтрДлина(ИндексКоллекции) - 1);
		Свойство = Лев(Свойство, МеткаКоллекции - 1);
	КонецЕсли;
	
	// Проверка свойства структуры.
	Если ТипЗнч(Значение) <> Тип("Структура")
		ИЛИ Значение.Свойство(Свойство) = Ложь Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	// Поиск нового элемента
	Если МеткаКоллекции = 0 Тогда
		Значение = Значение[Свойство];
	Иначе
		Значение = Значение[Свойство][Число(ИндексКоллекции)];
	КонецЕсли;
	
	Если СвойстваПути.Количество() = 1 Тогда
		// Последний элемент пути.
		Возврат Значение;
	Иначе
		СвойстваПути.Удалить(0);
		Возврат ЗначениеСвойстваСтруктурыВРекурсии(Значение, СвойстваПути, Отказ);
	КонецЕсли;
	
КонецФункции

// Преобразование коллекции массива структур в коллекцию таблицу значений.
//
// Параметры:
//  Данные				 	- Массив - массив структур данных для преобразования.
//  ОписаниеТаблицыЗначений	- ТаблицаЗначений - описание результирующей таблицы.
// 
// Возвращаемое значение:
//  Массив - результат преобразования.
//
Функция КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Данные, ОписаниеПолучателя, Свойство = "")

	Если ТипЗнч(Данные) <> Тип("Массив") Тогда
		Возврат Данные;
	КонецЕсли;
	
	Результат = Новый Массив;
	Для каждого ЭлементКоллекции Из Данные Цикл
		
		Если ЗначениеЗаполнено(Свойство) Тогда
			Значение = ЭлементКоллекции[Свойство];
		Иначе
			Значение = ЭлементКоллекции;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Значение)
			ИЛИ (ТипЗнч(Значение) <> Тип("Массив") И Значение.Количество() = 0) Тогда
				Результат.Добавить(ОписаниеПолучателя.Скопировать());
		Иначе
			Результат.Добавить(МассивСтруктурВТаблицуЗначений(Значение,	ОписаниеПолучателя));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Преобразование массива структур в таблицу значений.
//
// Параметры:
//  Коллекция				 - Массив - массив структура.
//  ОписаниеТаблицыЗначений	 - ТаблицаЗначений - описание результирующей таблицы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - результат преобразования.
//
Функция МассивСтруктурВТаблицуЗначений(Источник, ОписаниеТаблицыЗначений)
	
	Если ТипЗнч(Источник) <> Тип("Массив")
		ИЛИ Источник.Количество() = 0 Тогда
		Возврат ОписаниеТаблицыЗначений;
	КонецЕсли;
	
	ПравилаПреобразования = Новый Структура;
	РеквизитыВСтруктуре = Новый Массив;
	
	// Создание колонок без типов.
	ТаблицаОбработки = Новый ТаблицаЗначений;
	Для каждого КолонкаТаблицыОписания Из ОписаниеТаблицыЗначений.Колонки Цикл
		
		// Поиск правил преобразования.
		ИмяСвойстваИсточника = КолонкаТаблицыОписания.Заголовок;
		РазделительПравила = СтрНайти(ИмяСвойстваИсточника, "|");
		ИмяПравила = "";
		Если РазделительПравила <> 0 Тогда
			ИмяСвойстваИсточника = СокрП(Лев(ИмяСвойстваИсточника, РазделительПравила - 1));
			ИмяПравила = Сред(КолонкаТаблицыОписания.Заголовок, РазделительПравила + 1);
		КонецЕсли;
		
		// Поиск реквизитов в структуре.
		Если СтрНайти(ИмяСвойстваИсточника, ".") Тогда
			ИмяСвойстваИсточника = СтрЗаменить(ИмяСвойстваИсточника, ".", "_");
			РеквизитыВСтруктуре.Добавить(ИмяСвойстваИсточника);
		КонецЕсли;
		
		// Добавления правила преобразования
		Если РазделительПравила <> 0 Тогда
			ПравилаПреобразования.Вставить(ИмяСвойстваИсточника, ИмяПравила);
		КонецЕсли;
		
		ТаблицаОбработки.Колонки.Добавить(ИмяСвойстваИсточника,, КолонкаТаблицыОписания.Имя);
		
	КонецЦикла;
	
	// Заполнение данных таблицы обработки.
	Для каждого СтрокаИсточника Из Источник Цикл
		НоваяСтрока = ТаблицаОбработки.Добавить();
		Если СтрокаИсточника <> Неопределено Тогда // Возможно значение неопределено.
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
		КонецЕсли;
		
		// Заполнение реквизитов в структуре.
		Для каждого ИмяРеквизита Из РеквизитыВСтруктуре Цикл
			СоставСтруктурыРеквизита = СтрРазделить(ИмяРеквизита, "_");
			НоваяСтрока[ИмяРеквизита] = ЗначениеСвойстваСтруктурыВРекурсии(СтрокаИсточника,	СоставСтруктурыРеквизита);
		КонецЦикла;
		
	КонецЦикла;
	
	// Обработка по правилам преобразования.
	Для каждого ЭлементПреобразования Из ПравилаПреобразования Цикл
		ДанныеОбработки = ТаблицаОбработки.ВыгрузитьКолонку(ЭлементПреобразования.Ключ);
		ОбработанныеЗначения = ПреобразоватьЗначениеСервиса(ДанныеОбработки, ЭлементПреобразования.Значение);
		Если ТипЗнч(ОбработанныеЗначения) = Тип("Массив") Тогда
			ТаблицаОбработки.ЗагрузитьКолонку(ОбработанныеЗначения, ЭлементПреобразования.Ключ);
		КонецЕсли;
	КонецЦикла; 
	
	// Обратное переименование колонок.
	Для каждого КолонкаТаблицыОбработки Из ТаблицаОбработки.Колонки Цикл
		КолонкаТаблицыОбработки.Имя = КолонкаТаблицыОбработки.Заголовок;
	КонецЦикла;
	
	// Заполнение таблицы результата.
	Результат = ОписаниеТаблицыЗначений.Скопировать();
	Для каждого СтрокаТаблицы Из ТаблицаОбработки Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Преобразовать значение полученное из сервиса.
//
// Параметры:
//  Данные			- Произвольный - данные, полученные из сервиса.
//  Правило			- Строка - имя обработчика.
//  КодСостояния	- Число - код состояния ответа сервиса.
// 
// Возвращаемое значение:
//  Произвольный - возвращаемое значение разбора.
//
Функция ПреобразоватьЗначениеСервиса(Значение, Правило, КодСостояния = 200)
	
	Если Правило = "CategoryPathToRootResponse.pathToRoot" Тогда
		
		// Разобрать список родительских категорий.
		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение, 
			ОписаниеТаблицыКатегории(), "categories");
		Возврат Результат;
		
	ИначеЕсли Правило = "Nomenclature.classifiers" Тогда
		
		// Разобрать классификатор номенклатуры
		
		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение,
			ОписаниеТаблицыКлассификатораНоменклатуры());
		Возврат Результат;
		
	ИначеЕсли Правило = "Nomenclature.propertiesHavingValue" Тогда
		
		Результат = Новый Массив;
		
		Для каждого ЭлементКоллекции Из Значение Цикл
			ПреобразованныеЗначения = Новый Массив;
			ПреобразоватьИменаРеквизитов(ЭлементКоллекции, ПреобразованныеЗначения, ОписаниеТаблицыНоменклатуры());			
			Результат.Добавить(ПреобразованныеЗначения);
		КонецЦикла;
		
		Возврат Результат;
				
	ИначеЕсли Правило = "Nomenclature.images" Тогда
		
		ОписаниеТаблицыИзображенийНоменклатуры = Новый ТаблицаЗначений;
		ОписаниеТаблицыИзображенийНоменклатуры.Колонки.Добавить("ИзображениеURL", Типы().Строка, "link");
		
		// Разобрать изображения номенклатуры.
		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение, ОписаниеТаблицыИзображенийНоменклатуры);
		Возврат Результат;
		
	ИначеЕсли Правило = "Nomenclature.features" Тогда
		
		// Разобрать характеристики номенклатуры
		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение,
			ОписаниеТаблицыХарактеристикНоменклатуры());
		Возврат Результат;
			
	ИначеЕсли Правило = "Nomenclature.attributes" Тогда
		
		// Разобрать дополнительные реквизиты номенклатуры.
		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение,
			ОписаниеТаблицыДополнительныхРеквизитовНоменклатуры());
		Возврат Результат;
		
	ИначеЕсли Правило = "Nomenclature.unit" Тогда
		
		// Разобрать единицы измерения номенклатуры
		Результат = МассивСтруктурВТаблицуЗначений(Значение, ОписаниеТаблицыЕдиницыИзмеренияНоменклатуры());
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
		
	ИначеЕсли Правило = "CategoryResponse.categories.attributes" Тогда
		
		// Разобрать реквизиты категории
		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение,
			ОписаниеТаблицыРеквизитовКатегорий());
		Возврат Результат;
		
	ИначеЕсли Правило = "CategoryResponse.categories.features" Тогда
		
		// Разобрать характеристики категории
		Результат = МассивСтруктурВТаблицуЗначений(Значение, ОписаниеТаблицыХарактеристикКатегорий());
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
		
	ИначеЕсли Правило = "Category.features.attributes" Тогда
		
		// Разобрать реквизиты характеристик категории
		ОписаниеТаблицыРеквизитов = Новый ТаблицаЗначений;
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("Идентификатор", Типы().Строка, "id");
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("Наименование",  Типы().Строка, "name");
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("Тип",           Типы().Строка, "type|ДесериализоватьТипЗначения");
		
		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение, ОписаниеТаблицыРеквизитов);
		Возврат Результат;
		
	ИначеЕсли Правило = "CategoryResponse.categories.classifiers" Тогда
		
		// Разобрать классификаторы категорий
		ОписаниеТаблицыКлассификатора = Новый ТаблицаЗначений;
		ОписаниеТаблицыКлассификатора.Колонки.Добавить("Наименование",  Типы().Строка, "name");
		ОписаниеТаблицыКлассификатора.Колонки.Добавить("Идентификатор", Типы().Строка, "code");
		ОписаниеТаблицыКлассификатора.Колонки.Добавить("Описание",      Типы().Строка, "description");
		
		Результат = МассивСтруктурВТаблицуЗначений(Значение, ОписаниеТаблицыКлассификатора);
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
		
	ИначеЕсли Правило = "Feature.attributes" Тогда 
		
		// Разобрать дополнительные реквизиты характеристик.
		ОписаниеТаблицыРеквизитов = Новый ТаблицаЗначений;
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("Идентификатор", Типы().Строка,    "attributeId");
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("Наименование",  Типы().Строка,    "name");
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("Значение",      Неопределено, "value");
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("ИдентификаторЗначения",      Типы().Строка, "valueId.id");
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("СтроковоеЗначение",    Типы().Строка, "valueId.value");
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("КодКлассификатора",          Типы().Строка, "classifier.code");
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("НаименованиеКлассификатора", Типы().Строка, "classifier.name");
		ОписаниеТаблицыРеквизитов.Колонки.Добавить("ОписаниеКлассификатора",     Типы().Строка, "classifier.description");
		
		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение, ОписаниеТаблицыРеквизитов);
		Возврат Результат;
		
	ИначеЕсли Правило = "Attribute.unit" Тогда
		
		Результат = МассивСтруктурВТаблицуЗначений(Значение, ОписаниеТаблицыЕдиницыИзмеренияДополнительныхРеквизитов());
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
		
	ИначеЕсли Правило = "AttributeValuesByCategoriesResponse.attributeValuesByCategories.values" Тогда
		
		// Значения дополнительных атрибутов категорий.
		ОписаниеТаблицыЗначений = Новый ТаблицаЗначений;
		ОписаниеТаблицыЗначений.Колонки.Добавить("Идентификатор", Типы().Строка, "id");
		ОписаниеТаблицыЗначений.Колонки.Добавить("Наименование",  Типы().Строка, "value");
		ОписаниеТаблицыЗначений.Колонки.Добавить("ДатаИзменения", Типы().Дата,   "modified|ДесериализоватьДату");
		
		Результат = КоллекцияМассивовСтруктурВКоллекциюТаблицЗначений(Значение, ОписаниеТаблицыЗначений);
		Возврат Результат;
		
	ИначеЕсли Правило = "AttributeValueResponse.attributeValues.reference" Тогда
		
		// Значения дополнительных реквизитов категорий.
		ОписаниеТаблицыЗначений = Новый ТаблицаЗначений;
		ОписаниеТаблицыЗначений.Колонки.Добавить("ИдентификаторКатегории", Типы().Строка, "categoryId");
		ОписаниеТаблицыЗначений.Колонки.Добавить("НаименованиеКатегории",  Типы().Строка, "categoryName");
		ОписаниеТаблицыЗначений.Колонки.Добавить("Идентификатор",          Типы().Строка, "attributeId");
		ОписаниеТаблицыЗначений.Колонки.Добавить("Наименование",           Типы().Строка, "attributeName");
		
		Результат = МассивСтруктурВТаблицуЗначений(Значение, ОписаниеТаблицыЗначений);
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
		
	ИначеЕсли Правило = "ДесериализоватьСтавкуНДС" Тогда
		
		Результат = Новый Массив;
		Для каждого ЭлементКоллекции Из Значение Цикл
			Результат.Добавить(ЭлементКоллекции);
		КонецЦикла;
		
		Возврат Результат;
		
	ИначеЕсли Правило = "ДесериализоватьДату" Тогда
		
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			Результат = Новый Массив;
			Для каждого ЭлементКоллекции Из Значение Цикл
				Если ЗначениеЗаполнено(ЭлементКоллекции) Тогда
					Результат.Добавить(ДатаИзUnixTime(ЭлементКоллекции));
				Иначе
					Результат.Добавить(Неопределено);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Результат = ДатаИзUnixTime(Значение);
		КонецЕсли;
		Возврат Результат;
		
	ИначеЕсли Правило = "ДесериализоватьТипЗначения" Тогда
		
		Результат = Новый Массив;
		Для каждого ЗначениеТипа Из Значение Цикл
			Если ЗначениеЗаполнено(ЗначениеТипа) Тогда
				Результат.Добавить(ДесериализоватьТипЗначенияСервиса(ЗначениеТипа));
			Иначе
				Результат.Добавить(Неопределено);
			КонецЕсли;
		КонецЦикла;

		Возврат Результат;
		
	ИначеЕсли Правило = "ДесериализоватьТипНоменклатуры" Тогда
		
		Результат = Новый Массив;
		Для каждого ЗначениеТипа Из Значение Цикл
			Если ЗначениеЗаполнено(ЗначениеТипа) Тогда
				Результат.Добавить(ДесериализоватьТипНоменклатурыСервиса(ЗначениеТипа));
			Иначе
				Результат.Добавить(Неопределено);
			КонецЕсли;
		КонецЦикла;

		Возврат Результат;
		
	ИначеЕсли Правило = "ИстинаПоКоду200" Тогда 
		
		Результат = (КодСостояния = 200);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДесериализоватьТипЗначенияСервиса(Значение)
	
	Если Значение = "string"           Тогда Результат = НСтр("ru = 'Строка'");
	ИначеЕсли Значение = "number"      Тогда Результат = НСтр("ru = 'Число'");
	ИначеЕсли Значение = "boolean"     Тогда Результат = НСтр("ru = 'Булево'");
	ИначеЕсли Значение = "date"        Тогда Результат = НСтр("ru = 'Булево'");
	ИначеЕсли Значение = "enumeration" Тогда Результат = НСтр("ru = 'Список'");
	ИначеЕсли Значение = "classifier"  Тогда Результат = НСтр("ru = 'Классификатор'");
	Иначе Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДесериализоватьТипНоменклатурыСервиса(Значение)
	
	Если Значение = "Service" Тогда
		Результат = НСтр("ru = 'Услуга'");
	ИначеЕсли Значение = "Product" Тогда
		Результат = НСтр("ru = 'Товар'");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура ПреобразоватьИменаРеквизитов(ИсходныеИмена, ИтоговыеИмена, ТаблицаСоответствияПолей)
	
	Если ИсходныеИмена = Неопределено Тогда
		ИтоговыеИмена = Новый Массив;
		Возврат;
	КонецЕсли;
	
	Для Счетчик = 0 По ИсходныеИмена.ВГраница() Цикл
		
		ИмяПреобразовано = Ложь;
		
		Для каждого Колонка Из ТаблицаСоответствияПолей.Колонки Цикл
			
			ИмяИзСервиса = "";
			
			Если СтрНайти(Колонка.Заголовок, "|") <> 0 Тогда
				ИмяИзСервиса = Лев(Колонка.Заголовок, СтрНайти(Колонка.Заголовок, "|") - 1);	
			Иначе
				ИмяИзСервиса = Колонка.Заголовок;
			КонецЕсли;
			
			Если СтрСравнить(ИсходныеИмена[Счетчик], ИмяИзСервиса) = 0 Тогда
				ИтоговыеИмена.Добавить(Колонка.Имя);
				ИмяПреобразовано = Истина;
			КонецЕсли;	
			
		КонецЦикла;
		
		Если Не ИмяПреобразовано Тогда
			ИтоговыеИмена.Добавить(ИсходныеИмена[Счетчик]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ЗаполнитьТехническиеРеквизитыНоменклатуры(ЗначенияРеквизитовНоменклатуры)
	
	ЗначенияРеквизитовНоменклатуры.Колонки.Добавить("ИдентификаторНоменклатуры", Новый ОписаниеТипов("Строка"));
	ЗначенияРеквизитовНоменклатуры.Колонки.Добавить("ОбновляетсяАвтоматически", Новый ОписаниеТипов("Булево"));
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура КАК Номенклатура,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатуры,
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ОбновляетсяАвтоматически КАК ОбновляетсяАвтоматически
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура В(&Номенклатура)";
	
	Запрос.УстановитьПараметр("Номенклатура", ЗначенияРеквизитовНоменклатуры.ВыгрузитьКолонку("Номенклатура"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаНоменклатуры = ЗначенияРеквизитовНоменклатуры.Найти(Выборка.Номенклатура, "Номенклатура");
		Если СтрокаНоменклатуры <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры, Выборка);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьТехническиеРеквизитыВидовНоменклатуры(ЗначенияРеквизитовВидовНоменклатуры)
	
	ЗначенияРеквизитовВидовНоменклатуры.Колонки.Добавить("ИдентификаторКатегории", Новый ОписаниеТипов("Строка"));
	ЗначенияРеквизитовВидовНоменклатуры.Колонки.Добавить("ОбновляетсяАвтоматически", Новый ОписаниеТипов("Булево"));
	ЗначенияРеквизитовВидовНоменклатуры.Колонки.Добавить("ЗагружатьХарактеристикиВХарактеристики", Новый ОписаниеТипов("Булево"));
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры КАК ВидНоменклатуры,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории КАК ИдентификаторКатегории,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ОбновляетсяАвтоматически КАК ОбновляетсяАвтоматически,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ЗагружатьХарактеристикиВХарактеристики КАК ЗагружатьХарактеристикиВХарактеристики
	|ИЗ
	|	РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатурыРаботаСНоменклатурой";
	
	Запрос.УстановитьПараметр("Номенклатура", ЗначенияРеквизитовВидовНоменклатуры.ВыгрузитьКолонку("ВидНоменклатуры"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаВидаНоменклатуры = ЗначенияРеквизитовВидовНоменклатуры.Найти(Выборка.ВидНоменклатуры, "ВидНоменклатуры");
		Если СтрокаВидаНоменклатуры <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаВидаНоменклатуры, Выборка);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура ВыполнитьЗаписьСобытияВЖурналРегистрации(ОписаниеСобытия, УровеньВажности,
	ОбъектМетаданных = Неопределено, ДанныеСсылка = Неопределено, РежимТранзакции = Неопределено)
	
	ИмяСобытия = НСтр("ru = 'Электронное взаимодействие.Работа с номенклатурой'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	УровеньВажностиСобытия = ?(ТипЗнч(УровеньВажности) = Тип("УровеньЖурналаРегистрации"),
		УровеньВажности, УровеньЖурналаРегистрации.Ошибка);
			
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньВажностиСобытия, ОбъектМетаданных, 
		ДанныеСсылка, ОписаниеСобытия, РежимТранзакции);
	
КонецПроцедуры

Процедура РазобратьРеквизитыНоменклатуры(СтрокаДанныхПоНоменклатуре, СтрокаНоменклатуры, ДополнительныеРеквизитыНоменклатуры, СоответствиеРеквизитовИЗначений, РезультатАнализа, РеквизитыДляОбновления, РежимОбновления = Ложь)
	
	ТаблицаОтличий = РаботаСНоменклатурой.ТаблицаОтличийРеквизитов();
	
	ТаблицаОтличий.Колонки.Добавить("ЯвляетсяДополнительнымРеквизитом", Новый ОписаниеТипов("Булево"));
	
	НоваяСтрока = РезультатАнализа.Добавить();
		
	НоваяСтрока.Номенклатура              = СтрокаНоменклатуры.Номенклатура;
	НоваяСтрока.ОбновляетсяАвтоматически  = СтрокаНоменклатуры.ОбновляетсяАвтоматически;
	НоваяСтрока.ИдентификаторНоменклатуры = СтрокаНоменклатуры.ИдентификаторНоменклатуры;
	
	РаботаСНоменклатуройПереопределяемый.ПолучитьОтличияНоменклатуры(СтрокаДанныхПоНоменклатуре, СтрокаНоменклатуры, ТаблицаОтличий);
	
	Если РаботаСНоменклатурой.ВедетсяУчетВидовНоменклатуры() Тогда
		
		НоваяСтрока.ВидНоменклатуры = СтрокаНоменклатуры.ВидНоменклатуры;	
		
		РаботаСНоменклатурой.ЗаполнитьСоответствиеРеквизитовИЗначенийНоменклатуры(СоответствиеРеквизитовИЗначений, СтрокаДанныхПоНоменклатуре, 
			СтрокаНоменклатуры.ВидНоменклатуры);	
		
		ВидыНоменклатурыИнформационнойБазы = СтрокаДанныхПоНоменклатуре.Категория.ВидыНоменклатурыИнформационнойБазы;
		
		Если ВидыНоменклатурыИнформационнойБазы.Найти(СтрокаНоменклатуры.ВидНоменклатуры) = Неопределено 
			И ВидыНоменклатурыИнформационнойБазы.Количество() > 0 Тогда
			
			// Проверка наличия изменения вида номенклатуры.
			
			СтрокиПоВидамНоменклатуры = ТаблицаОтличий.НайтиСтроки(
				Новый Структура("ТекущееЗначение, НовоеЗначение, Пометка", СтрокаНоменклатуры.ВидНоменклатуры, ВидыНоменклатурыИнформационнойБазы[0], Истина));
			
			Если СтрокиПоВидамНоменклатуры.Количество() > 0 Тогда
				РаботаСНоменклатурой.ЗаполнитьСоответствиеРеквизитовИЗначенийНоменклатуры(СоответствиеРеквизитовИЗначений, СтрокаДанныхПоНоменклатуре, 
					ВидыНоменклатурыИнформационнойБазы[0]);
				
				Если РежимОбновления Тогда
					НоваяСтрока.ВидНоменклатуры = ВидыНоменклатурыИнформационнойБазы[0];
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	НоваяСтрока.КоличествоИзмененныхЗначений = ТаблицаОтличий.Количество();
	
	Если РежимОбновления Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		Если РежимОбновления И ТаблицаОтличий.Количество() > 0 Тогда
			РаботаСНоменклатуройПереопределяемый.ЗаполнитьНоменклатуру(СтрокаНоменклатуры.Номенклатура, ТаблицаОтличий);					
		КонецЕсли;
		
		Если РеквизитыДляОбновления <> Неопределено Тогда
			Для каждого ЭлементКоллекции Из ТаблицаОтличий Цикл
				СтрокаТаблицыОбновления = РеквизитыДляОбновления.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыОбновления, ЭлементКоллекции);
				СтрокаТаблицыОбновления.Номенклатура = СтрокаНоменклатуры.Номенклатура;
			КонецЦикла;
		КонецЕсли;	
		
		Если РаботаСНоменклатурой.ВедетсяУчетВидовНоменклатуры() Тогда
			
			ТаблицаОтличий.Очистить();
			
			Для каждого ТекущийРеквизит Из СтрокаДанныхПоНоменклатуре.ДополнительныеРеквизиты Цикл
				
				Если НЕ ЗначениеЗаполнено(ТекущийРеквизит.РеквизитИнформационнойБазы) Тогда
					НоваяСтрока.КоличествоНовыхЗначений = НоваяСтрока.КоличествоНовыхЗначений + 1;
					Продолжить;
				КонецЕсли;
				
				СтрокаДополнительногоРеквизита = ДополнительныеРеквизитыНоменклатуры.Найти(ТекущийРеквизит.РеквизитИнформационнойБазы, "Свойство");
				
				ЭтоСсылочноеЗначение = ЗначениеЗаполнено(ТекущийРеквизит.ИдентификаторЗначения);
				
				Если СтрокаДополнительногоРеквизита <> Неопределено Тогда
					
					ЗначенияСовпадают = (ЭтоСсылочноеЗначение И СтрокаДополнительногоРеквизита.Значение = ТекущийРеквизит.ЗначениеИнформационнойБазы)
						ИЛИ (Не ЭтоСсылочноеЗначение И СтрокаДополнительногоРеквизита.Значение = ТекущийРеквизит.Значение);
					
					Если ЗначенияСовпадают Тогда
						Продолжить;
					КонецЕсли;
				Иначе
					Если (Не ЗначениеЗаполнено(ТекущийРеквизит.Значение) 
							И Не ЗначениеЗаполнено(ТекущийРеквизит.ИдентификаторЗначения)) 
								ИЛИ ТекущийРеквизит.Значение = Ложь Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				СтрокаИзменений = ТаблицаОтличий.Добавить();
				
				СтрокаИзменений.РеквизитОбъекта        = ТекущийРеквизит.РеквизитИнформационнойБазы;
				СтрокаИзменений.ПредставлениеРеквизита = ТекущийРеквизит.РеквизитИнформационнойБазы;
				СтрокаИзменений.НовоеЗначение          = ?(ЭтоСсылочноеЗначение, ТекущийРеквизит.ЗначениеИнформационнойБазы, ТекущийРеквизит.Значение);
				СтрокаИзменений.ПредставлениеЗначенияСервиса = ?(ЭтоСсылочноеЗначение, ТекущийРеквизит.ЗначениеИнформационнойБазы, ТекущийРеквизит.Значение);
				СтрокаИзменений.ЯвляетсяДополнительнымРеквизитом = Истина;
				
				Если СтрокаДополнительногоРеквизита = Неопределено Тогда
					НоваяСтрока.КоличествоНовыхЗначений = НоваяСтрока.КоличествоНовыхЗначений + 1;
				Иначе
					НоваяСтрока.КоличествоИзмененныхЗначений = НоваяСтрока.КоличествоИзмененныхЗначений + 1;	
				КонецЕсли;
				
			КонецЦикла;
			
			Если РежимОбновления И ТаблицаОтличий.Количество() > 0 Тогда
				РаботаСНоменклатуройПереопределяемый.ЗаполнитьДополнительныеРеквизитыНоменклатуры(СтрокаНоменклатуры.Номенклатура, ТаблицаОтличий);			
			КонецЕсли;
			
			Если РеквизитыДляОбновления <> Неопределено Тогда
				Для каждого ЭлементКоллекции Из ТаблицаОтличий Цикл
					СтрокаТаблицыОбновления = РеквизитыДляОбновления.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыОбновления, ЭлементКоллекции);
					СтрокаТаблицыОбновления.Номенклатура = СтрокаНоменклатуры.Номенклатура;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если РежимОбновления Тогда
			РаботаСНоменклатурой.ИзменитьДатуОбновленияНоменклатуры(СтрокаНоменклатуры.Номенклатура, СтрокаНоменклатуры.ИдентификаторНоменклатуры);
			ЗафиксироватьТранзакцию();	
		КонецЕсли;
		
	Исключение
		Если РежимОбновления Тогда
			ОтменитьТранзакцию();	
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

Процедура РазобратьРеквизитыВидовНоменклатуры(ДанныеПоКатегории, СтрокаВидаНоменклатуры, РезультатАнализа, РежимОбновления = Ложь)
	
	ТаблицаОтличий = РаботаСНоменклатурой.ТаблицаОтличийРеквизитов();
	
	НоваяСтрока = РезультатАнализа.Добавить();
	
	НоваяСтрока.ВидНоменклатуры          = СтрокаВидаНоменклатуры.ВидНоменклатуры;
	НоваяСтрока.ОбновляетсяАвтоматически = СтрокаВидаНоменклатуры.ОбновляетсяАвтоматически;
	НоваяСтрока.ИдентификаторКатегории   = СтрокаВидаНоменклатуры.ИдентификаторКатегории;
	НоваяСтрока.ПредставлениеКатегории   = СтрокаВидаНоменклатуры.Наименование;
	
	РаботаСНоменклатуройПереопределяемый.ПолучитьОтличияВидаНоменклатурыИКатегории(ДанныеПоКатегории, СтрокаВидаНоменклатуры, ТаблицаОтличий);
	
	НоваяСтрока.ИзмененоРеквизитов = ТаблицаОтличий.Количество();
	
	Если РежимОбновления Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		Если РежимОбновления И ТаблицаОтличий.Количество() > 0 Тогда
			РаботаСНоменклатуройПереопределяемый.ЗаполнитьВидНоменклатуры(СтрокаВидаНоменклатуры.ВидНоменклатуры, ТаблицаОтличий);		
		КонецЕсли;
		
		ДополнитьРеквизитыИЗначения(СтрокаВидаНоменклатуры, ДанныеПоКатегории, 
			ДанныеПоКатегории.ДополнительныеРеквизиты, Ложь, НоваяСтрока, РежимОбновления);
		
		ДополнитьРеквизитыИЗначения(СтрокаВидаНоменклатуры, ДанныеПоКатегории, 
			ДанныеПоКатегории.Характеристики.ДополнительныеРеквизиты, Истина, НоваяСтрока, РежимОбновления);
			
		Если РежимОбновления Тогда
			РаботаСНоменклатурой.ИзменитьДатуОбновленияВидаНоменклатуры(СтрокаВидаНоменклатуры.ВидНоменклатуры, СтрокаВидаНоменклатуры.ИдентификаторКатегории);
			ЗафиксироватьТранзакцию();
		КонецЕсли;	
		
	Исключение
		Если РежимОбновления Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецПопытки;
		
КонецПроцедуры

Процедура ДополнитьРеквизитыИЗначения(СтрокаВидаНоменклатуры, ДанныеПоКатегории, ДополнительныеРеквизиты, ЯвляетсяХарактеристикой, СтрокаДанных, РежимОбновления)
	
	ВидНоменклатуры = СтрокаВидаНоменклатуры.ВидНоменклатуры;
	
	ДополнительныеРеквизитыКДобавлению = Новый ТаблицаЗначений;
	
	ДополнительныеРеквизитыКДобавлению.Колонки.Добавить("РеквизитВидаНоменклатуры");
	ДополнительныеРеквизитыКДобавлению.Колонки.Добавить("ИдентификаторРеквизитаКатегории");
	ДополнительныеРеквизитыКДобавлению.Колонки.Добавить("ЯвляетсяРеквизитомХарактеристики");
	
	Для каждого ДополнительныйРеквизит Из ДополнительныеРеквизиты Цикл
		Если НЕ ЗначениеЗаполнено(ДополнительныйРеквизит.РеквизитИнформационнойБазы) Тогда
			
			РаботаСНоменклатурой.СоздатьДополнительныйРеквизит(ВидНоменклатуры, ДополнительныйРеквизит, ДополнительныеРеквизитыКДобавлению, ЯвляетсяХарактеристикой);
			
			СтрокаДанных.НеСопоставленоРеквизитов = СтрокаДанных.НеСопоставленоРеквизитов + 1;
			Если ЗначениеЗаполнено(ДополнительныйРеквизит.Значения) Тогда
				СтрокаДанных.НеСопоставленоЗначений = СтрокаДанных.НеСопоставленоЗначений + ДополнительныйРеквизит.Значения.Количество();
			КонецЕсли;
		Иначе
			Если НЕ ЗначениеЗаполнено(ДополнительныйРеквизит.Значения) Тогда
				Продолжить;
			КонецЕсли;	
			
			МассивЗначений = Новый Массив;
			
			Для каждого ТекущееЗначения Из ДополнительныйРеквизит.Значения Цикл
				Если ЗначениеЗаполнено(ТекущееЗначения.ЗначениеИнформационнойБазы) Тогда
					Продолжить;
				КонецЕсли;	
				
				ЗначениеСсылка = Неопределено;
				РаботаСНоменклатуройПереопределяемый.СоздатьЗначениеРеквизита(
					ДополнительныйРеквизит.РеквизитИнформационнойБазы, ТекущееЗначения, ЗначениеСсылка);
				
				МассивЗначений.Добавить(Новый Структура("ЗначениеРеквизитаВидаНоменклатуры, ИдентификаторЗначенияРеквизитаКатегории, ЗначениеРеквизитаКатегории",
					ЗначениеСсылка, ТекущееЗначения.Идентификатор, ТекущееЗначения.Наименование));	
					
				СтрокаДанных.НеСопоставленоЗначений = СтрокаДанных.НеСопоставленоЗначений + 1;
			КонецЦикла;			
			
			Если РежимОбновления И МассивЗначений.Количество() > 0 Тогда
				РаботаСНоменклатурой.ЗаписатьСоответствиеЗначенийРеквизита(ВидНоменклатуры, 
					ДополнительныйРеквизит.РеквизитИнформационнойБазы, МассивЗначений, Истина);				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если РежимОбновления И ДополнительныеРеквизитыКДобавлению.Количество() > 0 Тогда
		РаботаСНоменклатуройПереопределяемый.ПрисвоитьРеквизитыОбъекту(ВидНоменклатуры, 
			ДополнительныеРеквизитыКДобавлению.ВыгрузитьКолонку("РеквизитВидаНоменклатуры"), ЯвляетсяХарактеристикой);
		
		РаботаСНоменклатурой.ЗаписатьСоответствиеРеквизитов(ВидНоменклатуры, ДополнительныеРеквизитыКДобавлению, Истина);
	КонецЕсли;	

КонецПроцедуры

// Получение номенклатуры информационной базы по идентификаторам.
//
// Параметры:
//  ИдентификаторыНоменклатуры	 - Массив (Строка) - массив идентификаторов.
// 
// Возвращаемое значение:
//  Массив - массив ссылок.
//
Функция НоменклатураПоИдентификаторам(ИдентификаторыНоменклатуры)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеНоменклатурыРаботаСНоменклатурой.ИдентификаторНоменклатурыСервиса В (&ИдентификаторыНоменклатуры)";
	
	Запрос.УстановитьПараметр("ИдентификаторыНоменклатуры", ИдентификаторыНоменклатуры);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
			
КонецФункции

#КонецОбласти

#КонецОбласти
