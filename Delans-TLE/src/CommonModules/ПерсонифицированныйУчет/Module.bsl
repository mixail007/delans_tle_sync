Процедура ДокументыПерсУчетаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИмяДокумента = Источник.Метаданные().Имя;
	
	Если Не Источник.ПометкаУдаления Тогда
		Документы[ИмяДокумента].ОбработкаФормированияФайла(Источник);
	КонецЕсли;
	
КонецПроцедуры


Функция ПолучитьДатыПериодаДокумента(ДокументСсылка)Экспорт
	ТипДокумента = ТипЗнч(ДокументСсылка);
	
	Если ТипДокумента = Тип("ДокументСсылка.ОписьПачекСЗВ_6")
		Или ТипДокумента = Тип("ДокументСсылка.РеестрСЗВ_6_2") 
		Или ТипДокумента = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_3")
		Или ТипДокумента = Тип("СправочникСсылка.КомплектыОтчетностиПерсучета") Тогда

		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "ОтчетныйПериод,Организация");
		Если ТипДокумента = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_3") Тогда
			
			ДатаНачала = Дата(ДанныеДокумента.ОтчетныйПериод, 1, 1);
			ДатаОкончания = Дата(ДанныеДокумента.ОтчетныйПериод, 12, 31, 23, 59, 59);
		Иначе
			ДатаНачала = ДанныеДокумента.ОтчетныйПериод;
			ДатаОкончания = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ДатаНачала);
		КонецЕсли;
		
		Возврат Новый Структура("ДатаНачала, ДатаОкончания, Организация", ДатаНачала, ДатаОкончания, ДанныеДокумента.Организация);
	Иначе
		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Дата,Организация");
		
		Возврат Новый Структура("ДатаНачала, ДатаОкончания, Организация", ДанныеДокумента.Дата, ДанныеДокумента.Дата, ДанныеДокумента.Организация);
	КонецЕсли;	
 КонецФункции	

Функция ПредставлениеПараметровТерриториальныхУсловий(ЗаписьСтажа) Экспорт
	
	ПредставлениеПараметровТУ = "";
	Ставка = ЗаписьСтажа.ПараметрТерриториальныхУсловий;
	ПервыйПараметрТУ = ЗаписьСтажа.ПервыйПараметрИсчисляемогоСтажа;
	ВторойПараметрТУ = ЗаписьСтажа.ВторойПараметрИсчисляемогоСтажа;
	
	Если Ставка <> "0.00" Тогда
		ПредставлениеПараметровТУ = Ставка;
	Иначе
		ПредставлениеПараметровТУ = ?(ПервыйПараметрТУ > 0,"" + ПервыйПараметрТУ+" м ","") + ?(ВторойПараметрТУ > 0,""+ВторойПараметрТУ+" дн ","");
	КонецЕсли;
	
	Возврат ПредставлениеПараметровТУ;
	
КонецФункции

// Формирует представление параметров исчисляемого  трудового стажа
//
// Параметры:
//		ЗаписьСтажа -	структура - запись о стаже
// Возвращаемое значение:
//		Строка
Функция ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьСтажа) Экспорт
	
	ПредставлениеПараметровИТС = "";
	КодОснованияИТС = ЗаписьСтажа.ОснованиеИсчисляемогоСтажаКод;
	ПервыйПараметрИТС = ЗаписьСтажа.ПервыйПараметрИсчисляемогоСтажа;
	ВторойПараметрИТС = ЗаписьСтажа.ВторойПараметрИсчисляемогоСтажа;
	ТретийПараметрИТС = ЗаписьСтажа.ТретийПараметрИсчисляемогоСтажа;
	
	Если КодОснованияИТС = "ВОДОЛАЗ" Тогда
		ПредставлениеПараметровИТС = ?(ПервыйПараметрИТС > 0,""+ПервыйПараметрИТС+" ч ","")+?(ВторойПараметрИТС > 0,""+ВторойПараметрИТС+" мин","");
	ИначеЕсли КодОснованияИТС = "СЕЗОН" Тогда
		ПредставлениеПараметровИТС = "";
	Иначе
		ПредставлениеПараметровИТС = ?(ПервыйПараметрИТС > 0,"" + ПервыйПараметрИТС+" м ","") + ?(ВторойПараметрИТС > 0,""+ВторойПараметрИТС+" дн ","") + Строка(ТретийПараметрИТС);
	КонецЕсли;
	
	Возврат ПредставлениеПараметровИТС;
	
КонецФункции

// Формирует строки "дополнительных сведений" по выслуге лет в "удобочитаемом" виде для отражения в формах.
//
// Параметры:
//		ЗаписьСтажа -	структура - запись о стаже
//		СтрПервыйВторойПараметр  -	строка - возвращаемый параметр - представление первых двух параметров
//		СтрСтавки  -	строка - возвращаемый параметр - представление третьего параметра
//
Процедура ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьСтажа, СтрПервыйВторойПараметр, СтрСтавки) Экспорт
	
	КодОснования = ЗаписьСтажа.ОснованиеВыслугиЛетКод;
	ПервыйПараметр = ЗаписьСтажа.ПервыйПараметрВыслугиЛет;
	ВторойПараметр = ЗаписьСтажа.ВторойПараметрВыслугиЛет;
	ТретийПараметр = ЗаписьСтажа.ТретийПараметрВыслугиЛет;
	
	СтрПервыйВторойПараметр = "";
	СтрСтавки = "";
	
	Если (КодОснования="ИСПКЛС1") или (КодОснования="САМОЛЕТ") или (КодОснования="ИНСПЕКТ") 
		или (КодОснования="СПЕЦАВ") или (КодОснования="ЛЕТИСП") или (КодОснования="ИТСИСП") 
		или (КодОснования="ИНСПЕКТ") или (КодОснования="ИТСМАВ") или (КодОснования="ОПЫТИСП") Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" ч ","")+?(ВторойПараметр>0,""+ВторойПараметр+" мин","");
		
	ИначеЕсли (КодОснования="РЕАКТИВН") или (КодОснования="НОРМСП") или (КодОснования="НОРМАПР") Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" прыжков ","");
		
	ИначеЕсли (КодОснования="УВД") или (КодОснования="ИТС")	или (КодОснования="27-14") или (КодОснования="27-15") Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" м ","")+?(ВторойПараметр>0,""+ВторойПараметр+" дн ","");
		
	ИначеЕсли (КодОснования="ХИРУРГД") или (КодОснования="ХИРУРСМ") или (КодОснования="ЗП81ГД") или (КодОснования="ЗП81СМ") 
		или (КодОснования="28-ГДХР") или (КодОснования="28-СМХР") или (КодОснования="28-ГД") или (КодОснования="28-СМ") Тогда
		СтрСтавки = ?(ТретийПараметр>0,""+ТретийПараметр,"");
		
	ИначеЕсли (КодОснования="ЗП80РК") или (КодОснования="ЗП80ПД") 
		или (КодОснования="28-ПДРК") или (КодОснования="28-ПД") Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" ч ","");
		СтрСтавки = ?(ТретийПараметр>0,""+ТретийПараметр,"");
		
	КонецЕсли;
	
КонецПроцедуры 

Функция ОписаниеВыгруженногоФайлаОтчетности() Экспорт
	ОписаниеФайла = Новый Структура;
	ОписаниеФайла.Вставить("Владелец");
	ОписаниеФайла.Вставить("ИмяФайла");
	ОписаниеФайла.Вставить("АдресВоВременномХранилище");
	ОписаниеФайла.Вставить("ПроверятьCheckXML", Ложь);
	ОписаниеФайла.Вставить("ПроверятьCheckUFA", Ложь);
	ОписаниеФайла.Вставить("ПроверятьTesterNDFL", Ложь);
	ОписаниеФайла.Вставить("ФайлВСоставеКомплекта", Ложь);
	ОписаниеФайла.Вставить("ПроверяемыйФайлКомплекта", Ложь);
	
	Возврат ОписаниеФайла;
КонецФункции


Функция ПредставлениеДатыВФорматеdateTimeСЧасовымПоясом(Дата) Экспорт

	СмещениеВСекундах = СмещениеСтандартногоВремени();
	ЗнакЧасовогоПояса = ?(СмещениеВСекундах < 0, "-", "+");
	ПоложительноеСмещениеВСекундах = ?(СмещениеВСекундах < 0, -СмещениеВСекундах, СмещениеВСекундах);
	
	Возврат Формат(Дата, "ДФ=yyyy-MM-ddTЧЧ:мм:сс; ДП=0001-01-01T00:00:00") + ?(ЗначениеЗаполнено(ПоложительноеСмещениеВСекундах), ЗнакЧасовогоПояса + Формат('00010101' + ПоложительноеСмещениеВСекундах, "ДФ=чч:мм"), "Z")
	
КонецФункции


Функция ВыгрузитьДокументы(ДокументСсылка, УникальныйИдентификатор)Экспорт
	
	Если ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.КомплектыОтчетностиПерсучета") Тогда
		МассивОписанийФайловВыгрузки = Новый Массив;

		КомплектОбъект = ДокументСсылка.ПолучитьОбъект();
		КомплектОбъект.ПоместитьОписанияФайловКомплектаВМассив(МассивОписанийФайловВыгрузки, УникальныйИдентификатор);
		
		Возврат МассивОписанийФайловВыгрузки;		
	Иначе	
		СоответсвиеТиповСсылокТипамФайловВыгрузки = СоответсвиеТиповСсылокТипамФайловВыгрузки();
		Кодировка =  КодировкаТекста.ANSI;
		ИмяФайла =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ИмяФайлаДляПФР");
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОписьПачекСЗВ_6") Тогда
			СсылкаНаДвоичныеДанныеФайла = УчетСтраховыхВзносов.СохранитьФайлВыгрузкиАДВ62(ДокументСсылка);
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			СсылкаНаДвоичныеДанныеФайла = "";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеестрСЗВ_6_2") Тогда
			СсылкаНаДвоичныеДанныеФайла = УчетСтраховыхВзносов.СохранитьФайлВыгрузкиСЗВ62(ДокументСсылка);
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_3") Тогда
			СсылкаНаДвоичныеДанныеФайла = УчетСтраховыхВзносов.СохранитьФайлВыгрузкиСЗВ63(ДокументСсылка);
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4") Тогда
			СсылкаНаДвоичныеДанныеФайла = УчетСтраховыхВзносов.СохранитьФайлВыгрузкиСЗВ64(ДокументСсылка);
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СведенияОЗастрахованныхЛицахСЗВ_М") Тогда
			СсылкаНаДвоичныеДанныеФайла = УчетСтраховыхВзносов.СохранитьФайлВыгрузкиСЗВМ(ДокументСсылка);
			Кодировка = КодировкаТекста.UTF8;
			ИмяФайла =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ИмяФайлаДляПФР") +".xml";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ") 
			ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОписьОДВ_1") Тогда
			СсылкаНаДвоичныеДанныеФайла = УчетСтраховыхВзносов.ПолучитьДанныеФайла(ДокументСсылка, Новый УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла;
			Кодировка = КодировкаТекста.UTF8;
			ИмяФайла =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ИмяФайлаДляПФР") +".xml";
		КонецЕсли;
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("Ссылка",  ДокументСсылка);
		ОписаниеФайла.Вставить("АдресФайлаВыгрузки", СсылкаНаДвоичныеДанныеФайла);
		ОписаниеФайла.Вставить("ИмяФайлаВыгрузки", ИмяФайла);
		ТипФайлаВыгрузки = СоответсвиеТиповСсылокТипамФайловВыгрузки.Получить(ТипЗнч(ДокументСсылка));
		ОписаниеФайла.Вставить("ТипФайлаВыгрузки",  ?(ТипФайлаВыгрузки = Неопределено, "", ТипФайлаВыгрузки));
		ОписаниеФайла.Вставить("КодировкаФайлаВыгрузки", Кодировка);

		Возврат ОписаниеФайла;
	КонецЕсли;
	
КонецФункции

Функция СписокНестрахуемыхВидовДохода() Экспорт
	МассивВидовДохода = Новый Массив;
	
	МассивВидовДохода.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.ДенежноеДовольствиеВоеннослужащих);
	МассивВидовДохода.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.ДенежноеСодержаниеПрокуроров);
	МассивВидовДохода.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.ДоходыСтудентовЗаРаботуВСтудотрядеПоТрудовомуДоговору);
	МассивВидовДохода.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.ДоходыСтудентовЗаРаботуВСтудотрядеПоГражданскоПравовомуДоговору);

	Возврат МассивВидовДохода;	
КонецФункции	

Функция СоответсвиеТиповСсылокТипамФайловВыгрузки()Экспорт
	СоответствиеТиповСсылокТипамФайловВыгрузки = Новый Соответствие;
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.ОписьПачекСЗВ_6"), "ПачкаАДВ");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.РегламентированныйОтчет"), "ПачкаРСВ");	
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.РеестрСЗВ_6_2"), "ПачкаИС");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_3"), "ПачкаИС");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4"), "ПачкаИС");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.ПачкаРазделов6РасчетаРСВ_1"), "пачкаСВВ");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.СведенияОЗастрахованныхЛицахСЗВ_М"), "ПачкаИС");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ"), "ПачкаИС");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.ОписьОДВ_1"), "ПачкаИС");
	
	Возврат СоответствиеТиповСсылокТипамФайловВыгрузки;
	
КонецФункции

// Процедура возвращает структуру с табличными документами разделов 2.5 и 6 формы РСВ-1.
//
// Параметры:
//  СсылкаНаСохрРеглОтчет - ссылка на сохраненный документ "РегламентированныйОтчет".
//  СтруктураРазделов     - Структура - структура с полями:
//    * Раздел25 - Массив - массив структур см. РегламентированнаяОтчетность.ПустаяСтруктураДляРазделовФормыРСВ_1;
//    * Раздел6  - Массив - массив структур см. РегламентированнаяОтчетность.ПустаяСтруктураДляРазделовФормыРСВ_1
//
Процедура ЗаполнитьПечатныеФормыРазделовРСВ1(СсылкаНаСохрРеглОтчет, СтруктураРазделов, НумероватьСтраницы, НомерПервойстраницыРаздела25, НомерПоследнейстраницыРаздела25, НомерПервойстраницыРаздела6, ОбщееКоличествоСтраницРаздела6) Экспорт
	Ссылка = Справочники.КомплектыОтчетностиПерсучета.КомплектСодержащийРСВ_1(СсылкаНаСохрРеглОтчет);
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ПараметрыФормирования = Справочники.КомплектыОтчетностиПерсучета.ПараметрыФормированияПечатныхФормКомплекта();
		
		Если СтруктураРазделов.Свойство("Раздел25") Тогда
			ПараметрыФормирования.ФормироватьПечатныеФормыРаздел25 = СтруктураРазделов.Раздел25.ПолучатьТабличныеДокументыРаздела;
			ПараметрыФормирования.ФормироватьСтруктуруРаздел25 = СтруктураРазделов.Раздел25.ПолучатьСтруктуруРаздела;
		КонецЕсли;	
		
		Если СтруктураРазделов.Свойство("Раздел6") Тогда
			Если СтруктураРазделов.Раздел6.ПолучатьСтруктуруРаздела Тогда
				ПараметрыФормирования.ФормироватьСтруктуруРаздел6 = Истина;
			Иначе
				
				ПараметрыФормирования.ФормироватьСтруктуруРаздел6 = Ложь;
				ПечатуемыеДокументы = Новый Массив;
				
				Для Каждого ОписаниеСтраницыРаздела6 Из СтруктураРазделов.Раздел6.СтраницыРаздела Цикл
					ПечатуемыеДокументы.Добавить(ОписаниеСтраницыРаздела6.Идентификатор);	
				КонецЦикла;	
				
				ПараметрыФормирования.ПечатуемыеДокументы = ПечатуемыеДокументы;
			КонецЕсли;	
			
			ПараметрыФормирования.ФормироватьПечатныеФормыРаздел6 = СтруктураРазделов.Раздел6.ПолучатьТабличныеДокументыРаздела;	
		КонецЕсли;	
			
		
		ПечатныеФормыКомплекта2014Года = Справочники.КомплектыОтчетностиПерсучета.ПечатныеФормыКомплекта2014Года(
												Ссылка, 
												ПараметрыФормирования,
												НумероватьСтраницы,
												НомерПервойстраницыРаздела25,
												НомерПоследнейстраницыРаздела25,
												НомерПервойстраницыРаздела6,
												ОбщееКоличествоСтраницРаздела6);
												
		Если СтруктураРазделов.Свойство("Раздел25") Тогда 
			СтруктураРазделов.Раздел25.СтраницыРаздела = ПечатныеФормыКомплекта2014Года.Раздел25;
		КонецЕсли;	
							
		Если СтруктураРазделов.Свойство("Раздел6") Тогда
			СтруктураРазделов.Раздел6.СтраницыРаздела =  ПечатныеФормыКомплекта2014Года.Раздел6 ;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(СсылкаНаСохрРеглОтчет) Тогда
		ДанныеРСВ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаСохрРеглОтчет, "ДатаНачала, Организация, ДатаПодписи");
		ОписаниеРаздела25 = РегламентированнаяОтчетностьПереопределяемый.ПустаяСтруктураДляРазделовФормыРСВ_1();
		ОписаниеРаздела25.Описание = "Раздел 2.5";
		ОписаниеРаздела25.ТабличныйДокумент = Справочники.КомплектыОтчетностиПерсучета.ПустойРаздел25РасчетаРСВ1(
												ДанныеРСВ.Организация, 
												ДанныеРСВ.ДатаПодписи,
												НумероватьСтраницы, 
												НомерПервойстраницыРаздела25,
												НачалоКвартала(ДанныеРСВ.ДатаНачала));
												
												
												
		СтруктураРазделов.Раздел25.СтраницыРаздела.Добавить(ОписаниеРаздела25);	
	КонецЕсли;		

КонецПроцедуры

Процедура ВывестиДанныеПоБуквенно(Данные, Раздел, ИмяПоказателя, КоличествоЯчеек, НачальнаяЯчейка = 1) Экспорт

	Для НомЯчейки = НачальнаяЯчейка По НачальнаяЯчейка + КоличествоЯчеек - 1 Цикл
		Раздел.Области[ИмяПоказателя + Формат(НомЯчейки,"ЧГ=0")].Текст = Сред(Данные, НомЯчейки - НачальнаяЯчейка + 1, 1);
	КонецЦикла;

КонецПроцедуры

Процедура ПроставитьНомерСтраницыВЯчейках(НумероватьСтраницы, НомерСтраницы, ОбластьКолонтитула) Экспорт

	Если НумероватьСтраницы Тогда
		ВывестиДанныеПоБуквенно(СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Формат(НомерСтраницы,"ЧГ=0"), 6, "0", "Слева"), ОбластьКолонтитула, "НомСтр", 6);
	КонецЕсли;

КонецПроцедуры

Функция ОписаниеИсточникаДанныхДляСоздатьВТСведенияОбОрганизациях() Экспорт
	Описание = Новый Структура;
	Описание.Вставить("ИмяТаблицы");
	Описание.Вставить("ИмяПоляОрганизация");
	Описание.Вставить("ИмяПоляПериод");
	Описание.Вставить("СписокСсылок");
	
	Возврат Описание;
КонецФункции	

Функция ПараметрыИсчисляемогоСтажаПредусматривающиеПравоНаДосрочнуюПенсию() Экспорт

	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДЕКРЕТ);
	МассивПараметров.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДЛОТПУСК);
	МассивПараметров.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ВРНЕТРУД);
	МассивПараметров.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ВАХТА);
	МассивПараметров.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.МЕДНЕТРУД);
	МассивПараметров.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.МЕСЯЦ);
	МассивПараметров.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДОГОВОР);
	
	Возврат МассивПараметров;
КонецФункции 

Процедура УдалитьПробелыРядомСДефисом(РедактируемаяСтрока) Экспорт 
	
	Пока Найти(РедактируемаяСтрока, " -") <> 0 Цикл 
		РедактируемаяСтрока = СтрЗаменить(РедактируемаяСтрока, " -", "-");
	КонецЦикла;
	
	Пока Найти(РедактируемаяСтрока, "- ") <> 0 Цикл 
		РедактируемаяСтрока = СтрЗаменить(РедактируемаяСтрока, "- ", "-");
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьВТСведенияОбОрганизацияхПоОписаниюДокументаИсточникаДанных(МенеджерВременныхТаблиц, ОписаниеИсточникаДанных) Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокСсылок", ОписаниеИсточникаДанных.СписокСсылок);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникДанных.Организация КАК Организация,
	|	ИсточникДанных.Период КАК Период
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	#ИсточникДанных КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка В(&СписокСсылок)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Организация", "." + ОписаниеИсточникаДанных.ИмяПоляОрганизация); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Период", "." + ОписаниеИсточникаДанных.ИмяПоляПериод); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИсточникДанных", ОписаниеИсточникаДанных.ИмяТаблицы); 

	Запрос.Выполнить();
	
	СоздатьВТСведенияОбОрганизацияхПоВременнойТаблице(МенеджерВременныхТаблиц);	

	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТОрганизации";
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура СоздатьВТСведенияОбОрганизацияхПоВременнойТаблице(МенеджерВременныхТаблиц) Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Организация,
	|	Организации.Период,
	|	Организации.Организация КАК СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВТОрганизацииДляСреза
	|ИЗ
	|	ВТОрганизации КАК Организации";
	
	
	Запрос.Выполнить();
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Организация,
	|	Организации.Период,
	|	ДанныеОрганизации.ИНН,
	|	ДанныеОрганизации.КодОрганаПФР,
	|	""""  КАК КодОрганаФСГС,
	|	"""" КАК КодПодчиненностиФСС,
	|	ДанныеОрганизации.КодПоОКПО,
	|	ДанныеОрганизации.НаименованиеПолное,
	|	ДанныеОрганизации.Наименование КАК НаименованиеСокращенное,
	|	ДанныеОрганизации.Наименование,
	|	ДанныеОрганизации.ОГРН,
	|	ДанныеОрганизации.КодОКВЭД,
	|	ДанныеОрганизации.НаименованиеОКВЭД,
	|	ДанныеОрганизации.КодОКОПФ,
	|	"""" КАК НаименованиеОКОПФ,
	|	ДанныеОрганизации.КодОКФС,
	|	"""" КАК НаименованиеОКФС,
	|	ЕСТЬNULL(ДанныеОрганизации.РегистрацияВНалоговомОргане.КПП, """") КАК КПП,
	|	ЕСТЬNULL(ДанныеОрганизации.РегистрацияВНалоговомОргане.НаименованиеИФНС, """") КАК НаименованиеИФНС,
	|	ЕСТЬNULL(ДанныеОрганизации.РегистрацияВНалоговомОргане.КодПоОКАТО, """") КАК ОКАТО,
	|	"""" КАК ТерриториальныеУсловияПФР,
	|	ЕСТЬNULL(ДанныеОрганизации.РегистрационныйНомерПФР, """") КАК РегистрационныйНомерПФР,
	|	ДанныеОрганизации.ЮридическоеФизическоеЛицо,
	|	ДанныеОрганизации.ЮридическоеФизическоеЛицо,
	|	"""" КАК РайонныйКоэффициент,
	|	Организации.Организация КАК ГоловнаяОрганизация
	|ПОМЕСТИТЬ ВТСведенияОбОрганизациях
	|ИЗ
	|	ВТОрганизации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ДанныеОрганизации
	|		ПО Организации.Организация = ДанныеОрганизации.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОрганизацииДляСреза";
		
	Запрос.Выполнить();	
	
КонецПроцедуры

Функция УзелФайлаПФР(ДеревоВыгрузки) Экспорт
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("xmlns", "http://schema.pfr.ru");
	УзелПФР = СправкиПоНДФЛ.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ФайлПФР", "", Атрибуты);	
	
	Возврат УзелПФР;
КонецФункции

//Выполняет проверку дополнительной записи стажа на допустимость значений реквизитов
Процедура ДокументыСЗВПроверитьДополнительнойЗаписиСтажа(Ошибки, Ссылка, Запись, ОсновнаяЗапись, НомерСтрокиСотрудник, НомерСтроки, Отказ) Экспорт
	СотрудникНаименование = Запись.СотрудникНаименование; 	
	
	Если НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОсобыеУсловияТруда) 
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеВыслугиЛет)
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ТерриториальныеУсловия)
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеИсчисляемогоСтажа) Тогда
		
		ТекстОшибки = НСтр("ru = 'дополнительная запись может вводиться только при заполнении хотя бы одного из реквизитов основной записи: Особые условия труда , Выслуга лет, Территориальные условия, Основание исчисляемого стажа.'");  
		ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, Запись, Отказ, Истина);
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(Запись.ОснованиеИсчисляемогоСтажа) Тогда
		ТекстОшибки =("ru = 'в дополнительной записи о стаже не может указываться основание исчисляемого стажа.'");     
		ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, Запись, Отказ, Истина, "ОснованиеИсчисляемогоСтажа");
	КонецЕсли;	
	
	//Проверка на обязательный ввод одной из льгот
	УказаныТерриториальныеУсловия = ЗначениеЗаполнено(Запись.ТерриториальныеУсловия);
	
	УказаныОсобыеУсловияТруда = ЗначениеЗаполнено(Запись.ОсобыеУсловияТруда);
	УказаноОснованиеВыслугиЛет = ЗначениеЗаполнено(Запись.ОснованиеВыслугиЛет);
	
	Если (НЕ УказаныТерриториальныеУсловия) И (НЕ УказаныОсобыеУсловияТруда) И (НЕ УказаноОснованиеВыслугиЛет) Тогда
		ТекстОшибки =НСтр("ru = 'в дополнительной записи должна быть задана либо территориальная льгота, либо особые условия труда, либо выслуга лет.'");     
		ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, Запись, Отказ, Истина);
	КонецЕсли;	 
	
	//Проверка на ввод территориальной льготы
	Если УказаныТерриториальныеУсловия Тогда
		Если  НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ТерриториальныеУсловия) Тогда
			ТекстОшибки = НСтр("ru = 'в дополнительной записи территориальная льгота может быть указана только при указании территориальной льготы в основной записи.'");     
			ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, Запись, Отказ, Истина, "ТерриториальныеУсловия");
		КонецЕсли;	 
	КонецЕсли;	
	
	//Проверка на ввод условий труда
	Если УказаныОсобыеУсловияТруда Тогда
		УсловияТрудаЗаписи = Запись.ОсобыеУсловияТруда;
		Если (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТрудаПФР.Ст27_1)
			И (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТрудаПФР.Ст27_2)
			И (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТрудаПФР.Ст27_7) Тогда
			ТекстОшибки = НСтр("ru = 'в дополнительной записи код условий труда должен принимать значение 27-1, 27-2 или 27-7.'");     
			ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, Запись, Отказ, Истина, "ОсобыеУсловияТруда");
		КонецЕсли;
		
		Если (УсловияТрудаЗаписи = Справочники.ОсобыеУсловияТрудаПФР.Ст27_7) 
			И (ОсновнаяЗапись.ОснованиеИсчисляемогоСтажа <> Справочники.ОснованияИсчисляемогоСтраховогоСтажа.УИК104) Тогда
			ТекстОшибки = НСтр("ru = 'в дополнительной записи код условий труда 27-7 может быть указан только в случае указания в основной записи кода исчисляемого стажа УИК104.'");     
			ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, Запись, Отказ, Истина, "ОсобыеУсловияТруда");
		КонецЕсли;	 
	КонецЕсли;
	
	//Проверка на ввод основания выслуги лет
	КодВыслугиЛетЗаписи = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);
	
	Если НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеВыслугиЛет) Тогда
		Если СтрНайти(",,27-СМ,27-ГД,27-СМХР,27-ГДХР,",","+КодВыслугиЛетЗаписи+",") = 0 Тогда
			ТекстОшибки = НСтр("ru = 'если в основной записи не указан код выслуги лет, то в дополнительной записи основание выслуги лет должно быть пустым или указаны коды 28-СМ,28-ГД,28-СМХР или 28-ГДХР.'");     
			ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, Запись, Отказ, Истина, "ОснованиеВыслугиЛет");
		КонецЕсли;	
	Иначе//В основной записи код выслуги указан
		
		МассивПравилНаКодыВыслугиДопЗаписей =  Новый Массив;
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",ЛЕТИСП,САМОЛЕТ,СПЕЦАВ,ОПЫТИСП,ИСПКЛС1,ИТСМАВ,");
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить("НОРМАПР,РЕАКТИВН,НОРМСП,");
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",,27-СМ,27-ГД,27-СМХР,27-ГДХР,");//пустой код допустим
		
		КодВыслугиЛетОсновнойЗаписи = СОКРЛП(ОсновнаяЗапись.ОснованиеВыслугиЛетКод);
		
		ПроверочнаяСтрокаКодов = "";
		Для Каждого СтрокаКодов из МассивПравилНаКодыВыслугиДопЗаписей Цикл 
			Если СтрНайти(СтрокаКодов,","+КодВыслугиЛетОсновнойЗаписи+",") Тогда
				ПроверочнаяСтрокаКодов = СтрокаКодов;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	
		
		Если ПроверочнаяСтрокаКодов = "" Тогда
			ШаблонТекстаОшибки = НСтр("ru = 'при указании в основной записи кода выслуги лет %3 в дополнительной записи код выслуги указываться не может.'");  
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаОшибки, КодВыслугиЛетЗаписи);
			ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, Запись, Отказ, Истина, "ОснованиеВыслугиЛет");
 		Иначе
			//Код выслуги основной записи исключим из списка возможных значений
			ПроверочнаяСтрокаКодов = СтрЗаменить(ПроверочнаяСтрокаКодов,","+КодВыслугиЛетОсновнойЗаписи,"");
			
			Если НЕ СтрНайти(ПроверочнаяСтрокаКодов,","+КодВыслугиЛетЗаписи+",") Тогда
				ШаблонТекстаОшибки = НСтр("ru = 'при указании в основной записи кода выслуги лет %1 в дополнительной записи могут быть указаны только следующие коды выслуги: %2.'");
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаОшибки, КодВыслугиЛетОсновнойЗаписи, Сред(ПроверочнаяСтрокаКодов,2));     
				ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, Запись, Отказ, Истина, "ОснованиеВыслугиЛет");
 			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
КонецПроцедуры	 

Процедура ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаЗаписейСтажа, Отказ, РасширеннаяПроверка = Истина, Поле = "") Экспорт
	Если РасширеннаяПроверка Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1, записи о стаже, № основной записи %2 %3: %4'"), ВыборкаЗаписейСтажа.СотрудникНаименование, ВыборкаЗаписейСтажа.НомерОсновнойЗаписи, ?(ЗначениеЗаполнено(ВыборкаЗаписейСтажа.НомерДополнительнойЗаписи), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '№ дополнительной записи %1'"), ВыборкаЗаписейСтажа.НомерДополнительнойЗаписи), ""), ТекстОшибки);
	Иначе 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1, записи о стаже: %2'"), ВыборкаЗаписейСтажа.СотрудникНаименование, ТекстОшибки);
	КонецЕсли;	
	
	Если РасширеннаяПроверка Тогда
		НомерОсновнойЗаписи = ВыборкаЗаписейСтажа.НомерОсновнойЗаписи;
		НомерДополнительнойЗаписи = ВыборкаЗаписейСтажа.НомерДополнительнойЗаписи;
	Иначе	
		НомерОсновнойЗаписи = 0;
		НомерДополнительнойЗаписи = 0;
	КонецЕсли;	
		
	ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуДанныхОСтаже(Ошибки, 
			Ссылка, 
			ВыборкаЗаписейСтажа.НомерСтрокиСотрудник,
			ВыборкаЗаписейСтажа.НомерСтрокиСтаж, 
			ТекстСообщения, 
			Поле, 
			Отказ);
	
КонецПроцедуры

Функция ПечатнаяФормаОДВ_1(МассивОбъектов, ОбъектыПечати, ИмяДокумента) Экспорт 
	
	
	ВыборкаПоШапкеДокумента = ЗапросПоШапкеДляПечатиОДВ_1(МассивОбъектов, ИмяДокумента).Выбрать();
	ВыборкаПоПоДаннымДосрочногоНазначенияПенсии = ЗапросПоДаннымДосрочногоНазначенияПенсииОДВ_1(МассивОбъектов, ИмяДокумента).Выбрать();

	ЭтоПервыйДокументКоллекции = Истина;
	
	Пока ВыборкаПоШапкеДокумента.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		Макет = ?(ВыборкаПоШапкеДокумента.Формат2019, 
			УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ФормаОДВ_1_2019"),
			УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ФормаОДВ_1"));
		
		ДокументРезультат = Новый ТабличныйДокумент;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОДВ_1";
		ДокументРезультат.ПолеСлева = 0;
		ДокументРезультат.ПолеСправа = 0;
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьСтрокаПозиции = Макет.ПолучитьОбласть("СтрокаПозиции");
		ОбластьУплатаВзносовСтрока = Макет.ПолучитьОбласть("УплатаВзносовСтрока");
		ОбластьШапкаРаздела5 = Макет.ПолучитьОбласть("ШапкаРаздела5");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		
		Если ЭтоПервыйДокументКоллекции Тогда
			ЭтоПервыйДокументКоллекции = Ложь;	
		Иначе
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;	
		
		ТекущийЛист = Новый ТабличныйДокумент;
		ТекущийЛист.ПолеСлева = 0;
		ТекущийЛист.ПолеСправа = 0;
		ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
		
		РегистрационныйНомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР," ","");
		РегистрационныйНомерПФР = СтрЗаменить(РегистрационныйНомерПФР,"-","");
		ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(РегистрационныйНомерПФР, ОбластьШапка, "НомРег", 12);
		
		ИНН = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ВыборкаПоШапкеДокумента.ИНН, 12, "-", "Справа");
		ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(ИНН, ОбластьШапка, "ИНН", 12);
		
		ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.КПП,"ЧГ=0"), ОбластьШапка, "КПП", 9);
		ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Формат(Год(ВыборкаПоШапкеДокумента.ОтчетныйПериод),"ЧГ=0"), ОбластьШапка, "Год", 4);
		
		ОбластьШапка.Параметры.НаименованиеОрганизации = ВыборкаПоШапкеДокумента.НаименованиеОрганизации;
		ОбластьШапка.Параметры.Организация = ВыборкаПоШапкеДокумента.Организация;
		ОбластьШапка.Параметры.КодОтчетногоПериода = ПерсонифицированныйУчетКлиентСервер.КодОтчетногоПериода(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
		
		Если ИмяДокумента = "ОписьОДВ_1" Тогда 
			Если ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ Тогда 
				ОбластьШапка.Параметры.Корректирующая = Истина;
			Иначе 
				ОбластьШапка.Параметры.Отменяющая = Истина;
			КонецЕсли;
		Иначе 
			ОбластьШапка.Параметры.Исходная = Истина;
		КонецЕсли;
		
		Если ИмяДокумента = "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ" Тогда 
			ОбластьШапка.Параметры.КоличествоЗастрахованныхЛицСЗВ_Стаж = ВыборкаПоШапкеДокумента.КоличествоЗастрахованныхЛиц;
		ИначеЕсли ИмяДокумента = "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ" Тогда
			ОбластьШапка.Параметры.КоличествоЗастрахованныхЛицСЗВ_ИСХ = ВыборкаПоШапкеДокумента.КоличествоЗастрахованныхЛиц;
		ИначеЕсли ИмяДокумента = "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР" Тогда
			ОбластьШапка.Параметры.КоличествоЗастрахованныхЛицСЗВ_КОРР = ВыборкаПоШапкеДокумента.КоличествоЗастрахованныхЛиц;
		КонецЕсли;
		
		ЕстьДанныеНачисленныхУплаченныхВзносов = ИмяДокумента = "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ" ; 
		
		Если ЕстьДанныеНачисленныхУплаченныхВзносов Тогда 
			СтруктураПоиска = Новый Структура("Ссылка", ВыборкаПоШапкеДокумента.Ссылка);
		КонецЕсли;
		ТекущийЛист.Вывести(ОбластьШапка);
		
		ТекущийЛист.Вывести(ОбластьУплатаВзносовСтрока);
		ТекущийЛист.Вывести(ОбластьУплатаВзносовСтрока);
		
		ТекущийЛист.Вывести(ОбластьШапкаРаздела5);
		Если ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.Количество() > 0 Тогда 

			СтруктураПоиска = Новый Структура("Ссылка", ВыборкаПоШапкеДокумента.Ссылка);
			Если ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.НайтиСледующий(СтруктураПоиска) Тогда
				КоличествоРабочихМест = 0;
				КоличествоРаботающих = 0;
				ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.СледующийПоЗначениюПоля("Ссылка");
				Пока ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.Следующий() Цикл 
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаПозиции.Параметры, ВыборкаПоПоДаннымДосрочногоНазначенияПенсии);
					ВывестиОбластьОДВ_1(ОбластьСтрокаПозиции, ДокументРезультат, ТекущийЛист);
					КоличествоРабочихМест = КоличествоРабочихМест + ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.КоличествоРабочихМест;
					КоличествоРаботающих = КоличествоРаботающих + ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.КоличествоРаботающих;
				КонецЦикла;
				ОбластьПодвал.Параметры.КоличествоРабочихМест = КоличествоРабочихМест;
				ОбластьПодвал.Параметры.КоличествоРаботающих = КоличествоРаботающих;
			КонецЕсли;
		Иначе 
			ТекущийЛист.Вывести(ОбластьСтрокаПозиции);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, ВыборкаПоШапкеДокумента);
		ВывестиОбластьОДВ_1(ОбластьПодвал, ДокументРезультат, ТекущийЛист);
		
		ДокументРезультат.Вывести(ТекущийЛист);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

Процедура ВывестиОбластьОДВ_1(ВыводимаяОбласть, ДокументРезультат, ТекущийЛист)
	
	ВыводимыеОбласти = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыводимаяОбласть);
	Если ТекущийЛист.ПроверитьВывод(ВыводимыеОбласти) Тогда 
		ТекущийЛист.Вывести(ВыводимаяОбласть);
	Иначе 
		ДокументРезультат.Вывести(ТекущийЛист);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		ТекущийЛист = Новый ТабличныйДокумент;
		ТекущийЛист.ПолеСлева = 0;
		ТекущийЛист.ПолеСправа = 0;
		ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
		ТекущийЛист.Вывести(ВыводимаяОбласть);
	КонецЕсли;	
	
КонецПроцедуры 

Функция ЗапросПоШапкеДляПечатиОДВ_1(МассивСсылок, ИмяДокумента) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	ОписаниеИсточникаДанных = ПерсонифицированныйУчет.ОписаниеИсточникаДанныхДляСоздатьВТСведенияОбОрганизациях();
	ОписаниеИсточникаДанных.ИмяТаблицы = "Документ" + "." + ИмяДокумента;
	ОписаниеИсточникаДанных.ИмяПоляОрганизация = "Организация";
	ОписаниеИсточникаДанных.ИмяПоляПериод = "ОкончаниеОтчетногоПериода";
	ОписаниеИсточникаДанных.СписокСсылок = МассивСсылок;

	СоздатьВТСведенияОбОрганизацияхПоОписаниюДокументаИсточникаДанных(Запрос.МенеджерВременныхТаблиц, ОписаниеИсточникаДанных);
	
	Если ИмяДокумента = "ОписьОДВ_1" Тогда 
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	0 КАК Количество,
		|	ЗНАЧЕНИЕ(Документ.ОписьОДВ_1.ПустаяСсылка) КАК Ссылка
		|ПОМЕСТИТЬ ВТИтоги";
		Запрос.Выполнить();
	Иначе 
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Сотрудники.НомерСтроки) КАК Количество,
		|	Сотрудники.Ссылка
		|ПОМЕСТИТЬ ВТИтоги
		|ИЗ
		|	Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&МассивСсылок)
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.Ссылка";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ", ИмяДокумента);
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Организация,
	|	СведенияОбОрганизациях.НаименованиеСокращенное КАК НаименованиеОрганизации,
	|	СведенияОбОрганизациях.ИНН КАК ИНН,
	|	СведенияОбОрганизациях.КПП КАК КПП,
	|	СведенияОбОрганизациях.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	ГОД(ДанныеДокумента.ОтчетныйПериод) КАК Год,
	|	ДанныеДокумента.ОтчетныйПериод,
	|	ДанныеДокумента.ОкончаниеОтчетногоПериода,
	|	ДанныеДокумента.КорректируемыйПериод КАК КорректируемыйПериод,
	|	ДанныеДокумента.ТипСведений КАК ТипСведений,
	|	ДанныеДокумента.Руководитель КАК Руководитель,
	|	ДанныеДокумента.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ДанныеДокумента.Дата,
	|	СведенияОбОрганизациях.КодПоОКПО КАК КодПоОКПО,
	|	СведенияОбОрганизациях.ОГРН КАК ОГРН,
	|	СведенияОбОрганизациях.НаименованиеПолное КАК НаименованиеПолное,
	|	СведенияОбОрганизациях.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	СведенияОбОрганизациях.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
	|	Итоги.Количество КАК КоличествоЗастрахованныхЛиц,
	|	ДанныеДокумента.НачисленыВзносыНаОПС КАК НачисленыВзносыНаОПС,
	|	ДанныеДокумента.НачисленыВзносыПоДТ КАК НачисленыВзносыПоДТ,
	|	ДанныеДокумента.Формат2019 КАК Формат2019,
	|	ДанныеДокумента.ИмяФайлаДляПФР
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбОрганизациях КАК СведенияОбОрганизациях
	|		ПО ДанныеДокумента.Организация = СведенияОбОрганизациях.Организация
	|			И ДанныеДокумента.ОкончаниеОтчетногоПериода = СведенияОбОрганизациях.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИтоги КАК Итоги
	|		ПО ДанныеДокумента.Ссылка = Итоги.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка В(&МассивСсылок)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Руководитель";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ", ИмяДокумента);
	
	Если ИмяДокумента <> "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ" Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеДокумента.НачисленыВзносыНаОПС", "ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеДокумента.НачисленыВзносыПоДТ", "ЛОЖЬ");
	КонецЕсли;
	
	Если ИмяДокумента <> "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР" Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеДокумента.КорректируемыйПериод", "ДАТАВРЕМЯ(1, 1, 1)");
	КонецЕсли;
	
	Если ИмяДокумента = "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ" Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеДокумента.ТипСведений", "NULL");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияОбОрганизациях.ИНН", "ДанныеДокумента.ИНН");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияОбОрганизациях.КПП", "ДанныеДокумента.КПП");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияОбОрганизациях.РегистрационныйНомерПФР", "ДанныеДокумента.РегистрационныйНомерПФР");
	КонецЕсли;
	
	Если ИмяДокумента = "ОписьОДВ_1" Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеДокумента.Формат2019", "ЛОЖЬ");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	
	УчетСтраховыхВзносов.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	ДанныеДокументов.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
	|	ДанныеДокументов.НаименованиеОрганизации КАК НаименованиеОрганизации,
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.ЮридическоеФизическоеЛицо,
	|	ДанныеДокументов.ИНН КАК ИНН,
	|	ДанныеДокументов.КПП КАК КПП,
	|	ДанныеДокументов.ОГРН КАК ОГРН,
	|	ДанныеДокументов.КодПоОКПО КАК ОКПО,
	|	ДанныеДокументов.НаименованиеПолное КАК НаименованиеПолное,
	|	ДанныеДокументов.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	ДанныеДокументов.Год,
	|	ДанныеДокументов.ОтчетныйПериод,
	|	ДанныеДокументов.ОкончаниеОтчетногоПериода,
	|	ДанныеДокументов.КорректируемыйПериод,
	|	ДанныеДокументов.ТипСведений КАК ТипСведений,
	|	ДанныеДокументов.Руководитель КАК Руководитель,
	|	ЕСТЬNULL(ВТФИОПоследние.Фамилия, """") КАК ФамилияРуководителя,
	|	ЕСТЬNULL(ВТФИОПоследние.Имя, """") КАК ИмяРуководителя,
	|	ЕСТЬNULL(ВТФИОПоследние.Отчество, """") КАК ОтчествоРуководителя,
	|	ДанныеДокументов.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ДанныеДокументов.Дата,
	|	ДанныеДокументов.КоличествоЗастрахованныхЛиц,
	|	ДанныеДокументов.НачисленыВзносыНаОПС,
	|	ДанныеДокументов.НачисленыВзносыПоДТ,
	|	ДанныеДокументов.Формат2019 КАК Формат2019,
	|	ДанныеДокументов.ИмяФайлаДляПФР
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОПоследние
	|		ПО ДанныеДокументов.Ссылка = ВТФИОПоследние.Ссылка
	|			И ДанныеДокументов.Руководитель = ВТФИОПоследние.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипСведений,
	|	Ссылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоДаннымДосрочногоНазначенияПенсииОДВ_1(МассивСсылок, ИмяДокумента) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДосрочноеНазначениеПенсии.Ссылка КАК Ссылка,
	               |	ДосрочноеНазначениеПенсии.НомерСтроки КАК НомерСтроки,
	               |	ДосрочноеНазначениеПенсии.Подразделение,
	               |	ДосрочноеНазначениеПенсии.Подразделение.Наименование КАК НаименованиеПодразделения,
	               |	ДосрочноеНазначениеПенсии.Должность,
	               |	ДосрочноеНазначениеПенсии.Должность.Наименование КАК НаименованиеДолжности,
	               |	ДосрочноеНазначениеПенсии.КоличествоРабочихМест,
	               |	ДосрочноеНазначениеПенсии.КоличествоРаботающих,
	               |	ДосрочноеНазначениеПенсии.ХарактерВыполняемыхРабот,
	               |	ДосрочноеНазначениеПенсии.ПервичныеДокументы,
	               |	ДосрочноеНазначениеПенсии.ОснованиеВыслугиЛет,
	               |	ДосрочноеНазначениеПенсии.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
	               |	ДосрочноеНазначениеПенсии.КодПозицииСписка,
	               |	ДосрочноеНазначениеПенсии.КодПозицииСписка.Код КАК КодПозицииСпискаКод
	               |ИЗ
	               |	Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ДосрочноеНазначениеПенсии КАК ДосрочноеНазначениеПенсии
	               |ГДЕ
	               |	ДосрочноеНазначениеПенсии.Ссылка В(&МассивСсылок)

	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки";
	
	Если ИмяДокумента <> "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР" Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ", ИмяДокумента);
	КонецЕсли;
	
	Возврат Запрос.Выполнить();			   
	
КонецФункции

Функция ЗапросПоДаннымНачисленныхУплаченныхВзносовОДВ_1(МассивСсылок, ИмяДокумента) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеОКорректировкеСведений.Ссылка
	               |ПОМЕСТИТЬ ВТСписокДокументов
	               |ИЗ
	               |	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР КАК ДанныеОКорректировкеСведений
	               |ГДЕ
	               |	ДанныеОКорректировкеСведений.Ссылка В(&МассивСсылок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеНачисленныхУплаченныхВзносов.Ссылка,
	               |	ДанныеНачисленныхУплаченныхВзносов.ВидСтраховыхВзносов,
	               |	ДанныеНачисленныхУплаченныхВзносов.ЗадолженностьНаНачалоПериода,
	               |	ДанныеНачисленныхУплаченныхВзносов.Начислено,
	               |	ДанныеНачисленныхУплаченныхВзносов.Уплачено,
	               |	ДанныеНачисленныхУплаченныхВзносов.ЗадолженностьНаКонецПериода
	               |ПОМЕСТИТЬ ВТДанныеОВзносах
	               |ИЗ
	               |	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.НачисленныеУплаченныеВзносы КАК ДанныеНачисленныхУплаченныхВзносов
	               |ГДЕ
	               |	ДанныеНачисленныхУплаченныхВзносов.Ссылка В(&МассивСсылок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокДокументов.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА Страховая.Ссылка ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьСтраховая,
	               |	ЕСТЬNULL(Страховая.ЗадолженностьНаНачалоПериода, 0) КАК ЗадолженностьНаНачалоСтраховая,
	               |	ЕСТЬNULL(Страховая.Начислено, 0) КАК НачисленоСтраховая,
	               |	ЕСТЬNULL(Страховая.Уплачено, 0) КАК УплаченоСтраховая,
	               |	ЕСТЬNULL(Страховая.ЗадолженностьНаКонецПериода, 0) КАК ЗадолженностьНаКонецСтраховая,
	               |	ВЫБОР
	               |		КОГДА Накопительная.Ссылка ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьНакопительная,
	               |	ЕСТЬNULL(Накопительная.ЗадолженностьНаНачалоПериода, 0) КАК ЗадолженностьНаНачалоНакопительная,
	               |	ЕСТЬNULL(Накопительная.Начислено, 0) КАК НачисленоНакопительная,
	               |	ЕСТЬNULL(Накопительная.Уплачено, 0) КАК УплаченоНакопительная,
	               |	ЕСТЬNULL(Накопительная.ЗадолженностьНаКонецПериода, 0) КАК ЗадолженностьНаКонецНакопительная,
	               |	ВЫБОР
	               |		КОГДА ТарифСВ.Ссылка ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьТарифСВ,
	               |	ЕСТЬNULL(ТарифСВ.ЗадолженностьНаНачалоПериода, 0) КАК ЗадолженностьНаНачалоТарифСВ,
	               |	ЕСТЬNULL(ТарифСВ.Начислено, 0) КАК НачисленоТарифСВ,
	               |	ЕСТЬNULL(ТарифСВ.Уплачено, 0) КАК УплаченоТарифСВ,
	               |	ЕСТЬNULL(ТарифСВ.ЗадолженностьНаКонецПериода, 0) КАК ЗадолженностьНаКонецТарифСВ
	               |ИЗ
	               |	ВТСписокДокументов КАК СписокДокументов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОВзносах КАК Страховая
	               |		ПО СписокДокументов.Ссылка = Страховая.Ссылка
	               |			И (Страховая.ВидСтраховыхВзносов = ЗНАЧЕНИЕ(Перечисление.ВидыСтраховыхВзносовПФР.НаСтраховуюПенсию))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОВзносах КАК Накопительная
	               |		ПО СписокДокументов.Ссылка = Накопительная.Ссылка
	               |			И (Накопительная.ВидСтраховыхВзносов = ЗНАЧЕНИЕ(Перечисление.ВидыСтраховыхВзносовПФР.НаНакопительнуюПенсию))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОВзносах КАК ТарифСВ
	               |		ПО СписокДокументов.Ссылка = ТарифСВ.Ссылка
	               |			И (ТарифСВ.ВидСтраховыхВзносов = ЗНАЧЕНИЕ(Перечисление.ВидыСтраховыхВзносовПФР.ПоТарифуСтраховыхВзносов))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
	
	Если ИмяДокумента = "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ" Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР", "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ");
	КонецЕсли;
				   
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса;			   
	
КонецФункции

Функция ЗапросПоДаннымРасшифровкиУплаченныхВзносовОДВ_1(МассивСсылок, ИмяДокумента) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	УплаченныеВзносыРасшифровка.Ссылка КАК Ссылка,
	               |	УплаченныеВзносыРасшифровка.Год КАК Год,
	               |	УплаченныеВзносыРасшифровка.НаСтраховуюПенсию,
	               |	УплаченныеВзносыРасшифровка.НаНакопительнуюПенсию,
	               |	УплаченныеВзносыРасшифровка.ПоТарифуСтраховыхВзносов
	               |ИЗ
	               |	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.УплаченныеВзносыРасшифровка КАК УплаченныеВзносыРасшифровка
	               |ГДЕ
	               |	УплаченныеВзносыРасшифровка.Ссылка В(&МассивСсылок)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	Год";
	
	Если ИмяДокумента = "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ" Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР", "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ");
	КонецЕсли;
				   
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса;			   
	
КонецФункции

// Формирует временную таблицу периодов с заданной периодичностью, формируемой, с помощью,
// запроса, возвращаемого методом ЗапросВТПериоды.
// Создает в МенеджерВременныхТаблиц временную таблицу с именем <ИмяВТ> 
// и периодичностью <Периодичность>	
// за интервал с <НачалоИнтервала> по <ОкончаниеИнтервала>.
//
Процедура СоздатьВТПериоды(МенеджерВременныхТаблиц, НачалоИнтервала, ОкончаниеИнтервала, Периодичность = "МЕСЯЦ", ИмяПоляПериод = "Период", ИмяВТ = "ВТПериоды", ИспользоватьКонецПериода = Ложь) Экспорт
	
	Если НачалоИнтервала > ОкончаниеИнтервала Тогда
		ВызватьИсключение НСтр("ru='Дата окончания не может быть меньше даты начала.'")
	КонецЕсли;
	
	Запрос = ЗапросВТПериоды(НачалоИнтервала, ОкончаниеИнтервала, Периодичность, ИмяПоляПериод, ИмяВТ, ИспользоватьКонецПериода);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ЗапросВТПериоды(Знач ОписаниеНачалаИнтервала, Знач ОписаниеОкончанияИнтервала, Периодичность = "МЕСЯЦ", ИмяПоляПериод = "Период", ИмяВТ = "ВТПериоды", ИспользоватьКонецПериода = Ложь) Экспорт
	
	Если ТипЗнч(ОписаниеНачалаИнтервала) = Тип("Дата")
		И ТипЗнч(ОписаниеОкончанияИнтервала) = Тип("Дата") Тогда
		
		Если ОписаниеОкончанияИнтервала < ОписаниеНачалаИнтервала Тогда
			
			ТекстИсключения = НСтр("ru='Дата окончания периода не может быть меньше даты начала'");
			ВызватьИсключение ТекстИсключения;
			
		Иначе
			
			ЛетВИнтервале = Год(ОписаниеОкончанияИнтервала) - Год(ОписаниеНачалаИнтервала);
			Если ЛетВИнтервале > 100 Тогда
				
				ТекстИсключения = НСтр("ru='Попытка получить данные за слишком большой интервал времени'")
					+ " (%1 " + НСтр("ru='лет'") + ": " + НСтр("ru='с'")+ " %2 " + НСтр("ru='по'") + " %3)";
				
				ТекстИсключения = СтрШаблон(ТекстИсключения, Формат(ЛетВИнтервале, "ЧГ="), Формат(ОписаниеНачалаИнтервала, "ДЛФ=D"), Формат(ОписаниеОкончанияИнтервала, "ДЛФ=D"));
				
				ВызватьИсключение ТекстИсключения;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	0 КАК Цифра
		|ПОМЕСТИТЬ ВТЦифры
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	5
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	6
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	7
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	8
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	9
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериодаИнтервала, ЧАС, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ЧАС) КАК ИмяПоляПериод
		|ПОМЕСТИТЬ ИмяВТ
		|ИЗ
		|	ВТЦифры КАК Цифры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры10
		|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 9)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры100
		|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 99)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры1000
		|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 999)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры10000
		|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 9999)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры100000
		|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 99999)
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериодаИнтервала, ЧАС, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ЧАС) МЕЖДУ &НачалоИнтервала И &ОкончаниеИнтервала";
	
	Если ВРег(Периодичность) <> "ГОД"
		И ВРег(Периодичность) <> "КВАРТАЛ"
		И ВРег(Периодичность) <> "МЕСЯЦ"
		И ВРег(Периодичность) <> "ДЕНЬ" Тогда
		
		ВызватьИсключение НСтр("ru='Невозможно сформировать запрос с переданными параметрами.'");
		
	КонецЕсли;
	
	Если ИспользоватьКонецПериода Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НАЧАЛОПЕРИОДА", "КОНЕЦПЕРИОДА");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЧАС", Периодичность);
	ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ИмяВТ", ИмяВТ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК ИмяПоляПериод", "КАК " + ИмяПоляПериод);
	
	Если ИспользоватьКонецПериода Тогда
		НачалоПериодаИнтервалаПредставление = "КОНЕЦПЕРИОДА(&НачалоИнтервала, " + ВРег(Периодичность) + ")";
		ОкончаниеПериодаИнтервалаПредставление = "КОНЕЦПЕРИОДА(&ОкончаниеИнтервала, " + ВРег(Периодичность) + ")";
	Иначе
		НачалоПериодаИнтервалаПредставление = "НАЧАЛОПЕРИОДА(&НачалоИнтервала, " + ВРег(Периодичность) + ")";
		ОкончаниеПериодаИнтервалаПредставление = "НАЧАЛОПЕРИОДА(&ОкончаниеИнтервала, " + ВРег(Периодичность) + ")";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоПериодаИнтервала", НачалоПериодаИнтервалаПредставление);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОкончаниеПериодаИнтервала", ОкончаниеПериодаИнтервалаПредставление);
	
	Если ТипЗнч(ОписаниеНачалаИнтервала) = Тип("Строка") Тогда
		НачалоИнтервалаПредставление = ОписаниеНачалаИнтервала;
	Иначе
		НачалоИнтервалаПредставление = "ДАТАВРЕМЯ(" + Формат(ОписаниеНачалаИнтервала, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеОкончанияИнтервала) = Тип("Строка") Тогда
		ОкончаниеИнтервалаПредставление = ОписаниеОкончанияИнтервала;
	Иначе
		ОкончаниеИнтервалаПредставление = "ДАТАВРЕМЯ(" + Формат(ОписаниеОкончанияИнтервала, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоИнтервала",
		"ВЫБОР КОГДА " + НачалоИнтервалаПредставление + " = ДАТАВРЕМЯ(1, 1, 1) ТОГДА ДАТАВРЕМЯ(1980, 1, 1) ИНАЧЕ " + НачалоИнтервалаПредставление + " КОНЕЦ");
	
	ИмяОкончаниеИнтервала = "ОкончаниеИнтервала" + СтрЗаменить(ИмяВТ, "_", "");
	Запрос.УстановитьПараметр(ИмяОкончаниеИнтервала, ДобавитьМесяц(ТекущаяДатаСеанса(), 60));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОкончаниеИнтервала",
		"ВЫБОР КОГДА " + ОкончаниеИнтервалаПредставление+ " = КОНЕЦПЕРИОДА(ДАТАВРЕМЯ(1, 1, 1), " + ВРег(Периодичность) + ") ТОГДА &" + ИмяОкончаниеИнтервала + " ИНАЧЕ " + ОкончаниеИнтервалаПредставление+ " КОНЕЦ");
	
	ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, "ВТЦифры");
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

// Осуществляет замену имени временной таблицы. Если не указано новое имя 
// временной таблицы, производится удаление из текста запроса строки, осуществляющей
// создание временной таблицы. Если новое имя временной таблицы передано, то производится
// замена всех фрагментов текста, содержащих старое имя временной таблицы на новое имя.
//
// Параметры:
//	ТекстЗапроса
//	ТекущееИмяТаблицы
//	НовоеИмяТаблицы
//
Процедура ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, ТекущееИмяТаблицы, НовоеИмяТаблицы = "") Экспорт
	
	Если ПустаяСтрока(НовоеИмяТаблицы) Тогда
		ЗамещаемыйТекст = "";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ " + ТекущееИмяТаблицы, "");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекущееИмяТаблицы, НовоеИмяТаблицы);
	КонецЕсли;
	
КонецПроцедуры


// Добавляет к тексту запроса, переданному в параметре ТекстЗапроса, текст запроса
// уничтожения временной таблицы
//
// Параметры:
//		ТекстЗапроса - Строка
//		ИмяВременнойТаблицы - Строка
//
Процедура ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, ИмяВременнойТаблицы) Экспорт
	
	Если Не ПустаяСтрока(ИмяВременнойТаблицы) Тогда
		ТекстЗапроса = ?(ПустаяСтрока(ТекстЗапроса), "", ТекстЗапроса + 
		"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|") + "УНИЧТОЖИТЬ " + ИмяВременнойТаблицы;
	КонецЕсли;
	
КонецПроцедуры


