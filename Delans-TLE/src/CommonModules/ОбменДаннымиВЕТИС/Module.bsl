////////////////////////////////////////////////////////////////////////////////
// Механизмы обмена данными с ВЕТИС.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ВыгрузкаДанных

Процедура ЗаполнитьОбъект_Delivery(Шапка, СтрокаТовары, ВспомогательныеДанные, ДополнительныеПараметры, DeliveryXDTO, СообщениеXML) Экспорт
	
	// Дата оформления входящей партии.
	ИнтеграцияИС.УстановитьДатуСЧасовымПоясом(DeliveryXDTO, "deliveryDate", Шапка.Дата, ВспомогательныеДанные.ХранилищеВременныхДат);
	
	// Сведения об отправителе (владельце).
	СведенияОбОтправителе = СоздатьОбъектXDTOПоИмениТипа(DeliveryXDTO, "consignor");
	ЗаполнитьОбъект_BusinessMember(Шапка, ДополнительныеПараметры.Грузоотправитель, СведенияОбОтправителе, СообщениеXML);
	
	// Сведения о получателе продукции.
	СведенияОПолучателе = СоздатьОбъектXDTOПоИмениТипа(DeliveryXDTO, "consignee");
	ЗаполнитьОбъект_BusinessMember(Шапка, ДополнительныеПараметры.Грузополучатель, СведенияОПолучателе, СообщениеXML);
	
	// Сведения о партии продукции или группе животных.
	Если ЗначениеЗаполнено(СтрокаТовары[ДополнительныеПараметры.ПолеКоличество]) Тогда
		
		СведенияОПартииПродукции = ИнтеграцияВЕТИС.ОбъектXDTOПоИмениТипа(DeliveryXDTO, "consignment");
		
		ДополнительныеДанные = Новый Структура;
		ДополнительныеДанные.Вставить("СтраныМира", ВспомогательныеДанные.СтраныМира);
		ДополнительныеДанные.Вставить("ШтрихкодыУпаковок", ВспомогательныеДанные.ШтрихкодыУпаковок);
		
		Если ВспомогательныеДанные.Свойство("Производители") Тогда
			СтруктураПоиска = Новый Структура("ВСД", СтрокаТовары.ВСД);
			ПроизводителиНайденныеСтроки = ВспомогательныеДанные.Производители.НайтиСтроки(СтруктураПоиска);
			ДополнительныеДанные.Вставить("Производители", ПроизводителиНайденныеСтроки);
		КонецЕсли;
		
		Если ВспомогательныеДанные.Свойство("ПроизводственныеПартии") Тогда
			СтруктураПоиска = Новый Структура("ВСД", СтрокаТовары.ВСД);
			ПроизводственныеПартииНайденныеСтроки = ВспомогательныеДанные.ПроизводственныеПартии.НайтиСтроки(СтруктураПоиска);
			ДополнительныеДанные.Вставить("ПроизводственныеПартии", ПроизводственныеПартииНайденныеСтроки);
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ИдентификаторСтрокиТовары", СтрокаТовары.ИдентификаторСтроки);
		УпаковкиНайденныеСтроки = ВспомогательныеДанные.Упаковки.НайтиСтроки(СтруктураПоиска);
		ДополнительныеДанные.Вставить("Упаковки", УпаковкиНайденныеСтроки);
		
		ЗаполнитьОбъект_Batch(СтрокаТовары, ДополнительныеПараметры.ПолеКоличество, ДополнительныеДанные, СведенияОПартииПродукции, СообщениеXML);
		
		Если ЗначениеЗаполнено(СтрокаТовары.ЗаписьСкладскогоЖурнала_Идентификатор) Тогда
			ЗаписьСкладскогоЖурнала = СоздатьОбъектXDTOПоИмениТипа(СведенияОПартииПродукции, "sourceStockEntry");
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				ЗаписьСкладскогоЖурнала,
				"guid",
				СтрокаТовары.ЗаписьСкладскогоЖурнала_Идентификатор,
				СообщениеXML);
		КонецЕсли;
		
		DeliveryXDTO.consignment.Добавить(СведенияОПартииПродукции);
	
	КонецЕсли; 
	
	// Фирма-посредник (перевозчик продукции).
	Перевозчик = СоздатьОбъектXDTOПоИмениТипа(DeliveryXDTO, "broker");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		Перевозчик,
		"guid",
		Шапка.ПеревозчикХозяйствующийСубъект_Идентификатор,
		СообщениеXML);
	
	// Информация о транспорте.
	Если ЗначениеЗаполнено(Шапка.ТипТранспорта) Тогда
		ИнформацияОТранспорте = СоздатьОбъектXDTOПоИмениТипа(DeliveryXDTO, "transportInfo");
		ЗаполнитьОбъект_TransportInfo(Шапка, ВспомогательныеДанные, ИнформацияОТранспорте, СообщениеXML);
	КонецЕсли; 
	
	// Способ хранения продукции при перевозке.
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		DeliveryXDTO,
		"transportStorageType",
		ПродукцияВЕТИСВызовСервера.СпособХраненияПриТранспортировке(Шапка.СпособХранения),
		СообщениеXML);
	
	// Сведения о маршруте следования (пунктах перегрузки).
	Если ДополнительныеПараметры.Маршрут.Количество() <> 0 Тогда
		МаршрутПеревозки = СоздатьОбъектXDTOПоИмениТипа(DeliveryXDTO, "shipmentRoute");
		ЗаполнитьОбъект_ShipmentRoute(ДополнительныеПараметры.Маршрут, ВспомогательныеДанные, МаршрутПеревозки, СообщениеXML);
	КонецЕсли; 
	
	// Сопроводительные документы
	СопроводительныеДокументы = СоздатьОбъектXDTOПоИмениТипа(DeliveryXDTO, "accompanyingForms");
	
	Если Шапка.ТТНУказан Тогда
		ДопСведенияТТН = СоздатьОбъектXDTOПоИмениТипа(СопроводительныеДокументы, "waybill");
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДопСведенияТТН, "issueSeries", Шапка.СерияТТН, СообщениеXML);
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДопСведенияТТН, "issueNumber", Шапка.НомерТТН, СообщениеXML);
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДопСведенияТТН, "issueDate",   Шапка.ДатаТТН, СообщениеXML);
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДопСведенияТТН, "type",        ИнтеграцияВЕТИСПовтИсп.КодДокумента(Шапка.ТипТТН), СообщениеXML);
	КонецЕсли; 
	
	Если ТипЗнч(СтрокаТовары.ВСД_Идентификатор) = Тип("Массив") Тогда
		
		Для каждого ВСД_Идентификатор Из СтрокаТовары.ВСД_Идентификатор Цикл
			
			ВСД = ИнтеграцияВЕТИС.ОбъектXDTOПоИмениТипа(СопроводительныеДокументы, "vetCertificate");
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ВСД, "uuid", ВСД_Идентификатор, СообщениеXML);
			СопроводительныеДокументы.vetCertificate.Добавить(ВСД);
			
		КонецЦикла;
		
	Иначе
		
		ВСД = ИнтеграцияВЕТИС.ОбъектXDTOПоИмениТипа(СопроводительныеДокументы, "vetCertificate");
		
		Если ЗначениеЗаполнено(СтрокаТовары.ВСД_Идентификатор) Тогда
			// Электронный ВСД
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ВСД, "uuid", СтрокаТовары.ВСД_Идентификатор, СообщениеXML);
		Иначе
			// Бумажный ВСД - нужно передать его данные
			ЗаполнитьОбъект_VetDocument(СтрокаТовары, Шапка, ВспомогательныеДанные, ДополнительныеПараметры, ВСД, СообщениеXML);
		КонецЕсли;
		
		СопроводительныеДокументы.vetCertificate.Добавить(ВСД);
		
	КонецЕсли;
	
	// Связанные документы
	Если ВспомогательныеДанные.Свойство("СвязанныеДокументы") Тогда
		
		Для каждого ДанныеСвязанногоДокумента Из ВспомогательныеДанные.СвязанныеДокументы Цикл
			
			СвязанныйДокумент = ИнтеграцияВЕТИС.ОбъектXDTOПоИмениТипа(СопроводительныеДокументы, "relatedDocument");
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(СвязанныйДокумент, "issueSeries", ДанныеСвязанногоДокумента.Серия, СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(СвязанныйДокумент, "issueNumber", ДанныеСвязанногоДокумента.Номер, СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(СвязанныйДокумент, "issueDate", ДанныеСвязанногоДокумента.Дата, СообщениеXML);
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				СвязанныйДокумент, 
				"type", 
				ИнтеграцияВЕТИСПовтИсп.КодДокумента(ДанныеСвязанногоДокумента.ТипДокумента), 
				СообщениеXML);
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(СвязанныйДокумент, "relationshipType", 6, СообщениеXML);
			
			СопроводительныеДокументы.relatedDocument.Добавить(СвязанныйДокумент);
		
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьОбъект_DeliveryПакетом(Шапка, ДанныеОТоваре, ВспомогательныеДанные, ДополнительныеПараметры, DeliveryXDTO, СообщениеXML) Экспорт
	
	// Дата оформления входящей партии.
	ИнтеграцияИС.УстановитьДатуСЧасовымПоясом(DeliveryXDTO, "deliveryDate", Шапка.Дата, ВспомогательныеДанные.ХранилищеВременныхДат);
	
	// Сведения об отправителе (владельце).
	СведенияОбОтправителе = СоздатьОбъектXDTOПоИмениТипа(DeliveryXDTO, "consignor");
	ЗаполнитьОбъект_BusinessMember(Шапка, ДополнительныеПараметры.Грузоотправитель, СведенияОбОтправителе, СообщениеXML);
	
	// Сведения о получателе продукции.
	СведенияОПолучателе = СоздатьОбъектXDTOПоИмениТипа(DeliveryXDTO, "consignee");
	ЗаполнитьОбъект_BusinessMember(Шапка, ДополнительныеПараметры.Грузополучатель, СведенияОПолучателе, СообщениеXML);
	
	// Сведения о партии продукции или группе животных.
	Для каждого СтрокаТовары Из ДанныеОТоваре Цикл
		
		Если ЗначениеЗаполнено(СтрокаТовары[ДополнительныеПараметры.ПолеКоличество]) Тогда
			
			СведенияОПартииПродукции = ИнтеграцияВЕТИС.ОбъектXDTOПоИмениТипа(DeliveryXDTO, "consignment");
			
			ДопДанные = Новый Структура;
			ДопДанные.Вставить("СтраныМира", ВспомогательныеДанные.СтраныМира);
			ДопДанные.Вставить("ШтрихкодыУпаковок", ВспомогательныеДанные.ШтрихкодыУпаковок);
			
			Если ВспомогательныеДанные.Свойство("Производители") Тогда
				СтруктураПоиска = Новый Структура("ВСД", СтрокаТовары.ВСД);
				ПроизводителиНайденныеСтроки = ВспомогательныеДанные.Производители.НайтиСтроки(СтруктураПоиска);
				ДопДанные.Вставить("Производители", ПроизводителиНайденныеСтроки);
			КонецЕсли; 
			
			Если ВспомогательныеДанные.Свойство("ПроизводственныеПартии") Тогда
				СтруктураПоиска = Новый Структура("ВСД", СтрокаТовары.ВСД);
				ПроизводственныеПартииНайденныеСтроки = ВспомогательныеДанные.ПроизводственныеПартии.НайтиСтроки(СтруктураПоиска);
				ДопДанные.Вставить("ПроизводственныеПартии", ПроизводственныеПартииНайденныеСтроки);
			КонецЕсли; 
			
			СтруктураПоиска = Новый Структура("ИдентификаторСтрокиТовары", СтрокаТовары.ИдентификаторСтроки);
			УпаковкиНайденныеСтроки = ВспомогательныеДанные.Упаковки.НайтиСтроки(СтруктураПоиска);
			ДопДанные.Вставить("Упаковки", УпаковкиНайденныеСтроки);
			
			ЗаполнитьОбъект_Batch(СтрокаТовары, ДополнительныеПараметры.ПолеКоличество, ДопДанные, СведенияОПартииПродукции, СообщениеXML);
			
			Если ЗначениеЗаполнено(СтрокаТовары.ЗаписьСкладскогоЖурнала_Идентификатор) Тогда
				ЗаписьСкладскогоЖурнала = СоздатьОбъектXDTOПоИмениТипа(СведенияОПартииПродукции, "sourceStockEntry");
				ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				ЗаписьСкладскогоЖурнала,
				"guid",
				СтрокаТовары.ЗаписьСкладскогоЖурнала_Идентификатор,
				СообщениеXML);
			КонецЕсли;
			
			СведенияОПартииПродукции.id = "id"+Формат(СтрокаТовары.НомерСтроки, "ЧГ=0");
			
			DeliveryXDTO.consignment.Добавить(СведенияОПартииПродукции);
			
			// Заполнение сведений о записи журнала.
			ОбменДаннымиВЕТИС.ДобавитьЗаписьСкладскогоЖурналаВСообщениеXML(СтрокаТовары, СообщениеXML);
			
		КонецЕсли;
	КонецЦикла;
	
	// Фирма-посредник (перевозчик продукции).
	Перевозчик = СоздатьОбъектXDTOПоИмениТипа(DeliveryXDTO, "broker");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		Перевозчик,
		"guid",
		Шапка.ПеревозчикХозяйствующийСубъект_Идентификатор,
		СообщениеXML);
	
	// Информация о транспорте.
	Если ЗначениеЗаполнено(Шапка.ТипТранспорта) Тогда
		ИнформацияОТранспорте = СоздатьОбъектXDTOПоИмениТипа(DeliveryXDTO, "transportInfo");
		ЗаполнитьОбъект_TransportInfo(Шапка, ВспомогательныеДанные, ИнформацияОТранспорте, СообщениеXML);
	КонецЕсли;
	
	// Способ хранения продукции при перевозке.
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		DeliveryXDTO,
		"transportStorageType",
		ПродукцияВЕТИСВызовСервера.СпособХраненияПриТранспортировке(Шапка.СпособХранения),
		СообщениеXML);
	
	// Сведения о маршруте следования (пунктах перегрузки).
	Если ДополнительныеПараметры.Маршрут.Количество() <> 0 Тогда
		МаршрутПеревозки = СоздатьОбъектXDTOПоИмениТипа(DeliveryXDTO, "shipmentRoute");
		ЗаполнитьОбъект_ShipmentRoute(ДополнительныеПараметры.Маршрут, ВспомогательныеДанные, МаршрутПеревозки, СообщениеXML);
	КонецЕсли;
	
	// Сопроводительные документы
		
	СопроводительныеДокументы = СоздатьОбъектXDTOПоИмениТипа(DeliveryXDTO, "accompanyingForms");
	
	Если Шапка.ТТНУказан Тогда
		ДопСведенияТТН = СоздатьОбъектXDTOПоИмениТипа(СопроводительныеДокументы, "waybill");
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДопСведенияТТН, "issueSeries", Шапка.СерияТТН, СообщениеXML);
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДопСведенияТТН, "issueNumber", Шапка.НомерТТН, СообщениеXML);
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДопСведенияТТН, "issueDate",   Шапка.ДатаТТН, СообщениеXML);
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДопСведенияТТН, "type",        ИнтеграцияВЕТИСПовтИсп.КодДокумента(Шапка.ТипТТН), СообщениеXML);
	КонецЕсли;
	
	Для каждого СтрокаТовары Из ДанныеОТоваре Цикл
		
		ВСД = ИнтеграцияВЕТИС.ОбъектXDTOПоИмениТипа(СопроводительныеДокументы, "vetCertificate");
		
		Если ЗначениеЗаполнено(СтрокаТовары.ВСД_Идентификатор) Тогда
			// Электронный ВСД
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ВСД, "uuid", СтрокаТовары.ВСД_Идентификатор, СообщениеXML);
		Иначе
			// Бумажный ВСД - нужно передать его данные
			ЗаполнитьОбъект_VetDocument(СтрокаТовары, Шапка, ВспомогательныеДанные, ДополнительныеПараметры, ВСД, СообщениеXML);
		КонецЕсли;
		
		ВСД.for = "id"+Формат(СтрокаТовары.НомерСтроки, "ЧГ=0");
		
		СопроводительныеДокументы.vetCertificate.Добавить(ВСД);
		
	КонецЦикла;
	
	// Связанные документы
	Если ВспомогательныеДанные.Свойство("СвязанныеДокументы") Тогда
		
		Для каждого ДанныеСвязанногоДокумента Из ВспомогательныеДанные.СвязанныеДокументы Цикл
			
			СвязанныйДокумент = ИнтеграцияВЕТИС.ОбъектXDTOПоИмениТипа(СопроводительныеДокументы, "relatedDocument");
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(СвязанныйДокумент, "issueSeries", ДанныеСвязанногоДокумента.Серия, СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(СвязанныйДокумент, "issueNumber", ДанныеСвязанногоДокумента.Номер, СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(СвязанныйДокумент, "issueDate", ДанныеСвязанногоДокумента.Дата, СообщениеXML);
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				СвязанныйДокумент, 
				"type", 
				ИнтеграцияВЕТИСПовтИсп.КодДокумента(ДанныеСвязанногоДокумента.ТипДокумента), 
				СообщениеXML);
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(СвязанныйДокумент, "relationshipType", 6, СообщениеXML);
			
			СопроводительныеДокументы.relatedDocument.Добавить(СвязанныйДокумент);
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОбъект_BusinessMember(Данные, ПрефиксРеквизита, ОбъектXDTO, СообщениеXML) Экспорт

	// Информация о хозяйствующем субъекте-отправителе транспортной партии.
	ХозяйствующийСубъект = СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "businessEntity");
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		ХозяйствующийСубъект,
		"guid",
		Данные[ПрефиксРеквизита + "ХозяйствующийСубъект_Идентификатор"],
		СообщениеXML); 
	
	// Информация о предприятии-отправителе транспортной партии.
	Предприятие = СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "enterprise");
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		ОбъектXDTO.enterprise,
		"guid",
		Данные[ПрефиксРеквизита + "Предприятие_Идентификатор"],
		СообщениеXML);
		
КонецПроцедуры

Процедура ЗаполнитьОбъект_TransportInfo(Данные, ВспомогательныеДанные, ОбъектXDTO, СообщениеXML) Экспорт

	// Тип транспортного средства.
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		ОбъектXDTO,
		"transportType",
		ПродукцияВЕТИСВызовСервера.ТипТранспорта(Данные.ТипТранспорта),
		СообщениеXML);
	
	// Номера транспортного средства.
	Если ЗначениеЗаполнено(Данные.НомерТранспортногоСредства) Тогда
		
		НомерТранспорта = СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "transportNumber");
		Если Данные.ТипТранспорта = Перечисления.ТипыТранспортаВЕТИС.Автомобиль Тогда
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(НомерТранспорта, "vehicleNumber", Данные.НомерТранспортногоСредства, СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(НомерТранспорта, "trailerNumber", Данные.НомерАвтомобильногоКонтейнера, СообщениеXML);
			
		ИначеЕсли Данные.ТипТранспорта = Перечисления.ТипыТранспортаВЕТИС.ЖелезнодорожныйВагон Тогда
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(НомерТранспорта, "wagonNumber", Данные.НомерТранспортногоСредства, СообщениеXML);
			
		ИначеЕсли Данные.ТипТранспорта = Перечисления.ТипыТранспортаВЕТИС.Авиарейс Тогда
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(НомерТранспорта, "flightNumber", Данные.НомерТранспортногоСредства, СообщениеXML);
			
		ИначеЕсли Данные.ТипТранспорта = Перечисления.ТипыТранспортаВЕТИС.МорскойКонтейнер Тогда
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(НомерТранспорта, "shipName", Данные.НомерТранспортногоСредства, СообщениеXML);
			
		ИначеЕсли Данные.ТипТранспорта = Перечисления.ТипыТранспортаВЕТИС.МорскойТрюм Тогда
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(НомерТранспорта, "shipName", Данные.НомерТранспортногоСредства, СообщениеXML);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОбъект_ShipmentRoute(Маршрут, ВспомогательныеДанные, ОбъектXDTO, СообщениеXML) Экспорт
	
	Для каждого ДанныеСтроки Из Маршрут Цикл
		
		// Сведения о точке маршрута.
		ТочкаМаршрута = ИнтеграцияВЕТИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO, "routePoint");
		
		// Порядовый номер точки маршрута.
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ТочкаМаршрута, "sqnId", ДанныеСтроки.НомерСтроки - 1, СообщениеXML);
		
		// Сведения о пункте перегрузки.
		Если ЗначениеЗаполнено(ДанныеСтроки.Предприятие_Идентификатор) Тогда
			ПунктПерегрузки = СоздатьОбъектXDTOПоИмениТипа(ТочкаМаршрута, "enterprise");
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ПунктПерегрузки, "guid", ДанныеСтроки.Предприятие_Идентификатор, СообщениеXML);
		Иначе
			АдресПунктаПерегрузки = СоздатьОбъектXDTOПоИмениТипа(ТочкаМаршрута, "location");
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(АдресПунктаПерегрузки, "name", ДанныеСтроки.АдресПредставление, СообщениеXML);
			ИнтеграцияВЕТИС.УстановитьАдрес(АдресПунктаПерегрузки, ДанныеСтроки.ДанныеАдреса.Получить());
		КонецЕсли; 
		
		// Признак того, осуществляется ли в данной точке перегрузка.
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ТочкаМаршрута, "transshipment", ДанныеСтроки.СПерегрузкой, СообщениеXML);
		
		// Сведения о дальнейшем транспорте.
		СледующееТранпортноеСредствоXDTO = СоздатьОбъектXDTOПоИмениТипа(ТочкаМаршрута, "nextTransport");
		ЗаполнитьОбъект_TransportInfo(ДанныеСтроки, ВспомогательныеДанные, СледующееТранпортноеСредствоXDTO, СообщениеXML);
		
		ОбъектXDTO.routePoint.Добавить(ТочкаМаршрута);
		
	КонецЦикла; 

КонецПроцедуры

Процедура ЗаполнитьОбъект_Период(ПериодXDTO, Данные, ИмяПоля, СообщениеXML)
	
	ИмяПоляСтрокой            = ИмяПоля + "Строка";
	ИмяПоляНачалоПериода      = ИмяПоля + "НачалоПериода";
	ИмяПоляКонецПериода       = ИмяПоля + "КонецПериода";
	ИмяПоляТочностьЗаполнения = ИмяПоля + "ТочностьЗаполнения";
	
	ТочностьЗаполненияБезДаты = ИнтеграцияВЕТИСКлиентСервер.ТочностьЗаполненияБезДаты(Данные[ИмяПоляТочностьЗаполнения]);
	Если НЕ ЗначениеЗаполнено(Данные[ИмяПоляСтрокой])
		И НЕ ЗначениеЗаполнено(Данные[ИмяПоляНачалоПериода])
		И НЕ ТочностьЗаполненияБезДаты Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные[ИмяПоляСтрокой]) Тогда
		
		ПериодXDTO.informalDate = Данные[ИмяПоляСтрокой];
		
	ИначеЕсли ТочностьЗаполненияБезДаты Тогда
		
		Если Данные[ИмяПоляТочностьЗаполнения] = Перечисления.ТочностьЗаполненияПериодаВЕТИС.Неизвестно Тогда
			ПериодXDTO.informalDate = "НЕИЗВЕСТНО";
		ИначеЕсли Данные[ИмяПоляТочностьЗаполнения] = Перечисления.ТочностьЗаполненияПериодаВЕТИС.СрокГодностиНеОграничен Тогда
			ПериодXDTO.informalDate = "НЕ ОГРАНИЧЕН";
		КонецЕсли;
		
	Иначе
		
		firstDate = СоздатьОбъектXDTOПоИмениТипа(ПериодXDTO, "firstDate");
		firstDate.year  = Год(Данные[ИмяПоляНачалоПериода]);
		firstDate.month = Месяц(Данные[ИмяПоляНачалоПериода]);
		Если ТребуетсяУказаниеДняПериода(Данные, ИмяПоля) Тогда
			firstDate.day = День(Данные[ИмяПоляНачалоПериода]);
		КонецЕсли;
		Если ТребуетсяУказаниеЧасаПериода(Данные, ИмяПоля) Тогда
			firstDate.hour = Час(Данные[ИмяПоляНачалоПериода]);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Данные[ИмяПоляКонецПериода])
			И Данные[ИмяПоляКонецПериода] <> Данные[ИмяПоляНачалоПериода] Тогда
			
			secondDate = СоздатьОбъектXDTOПоИмениТипа(ПериодXDTO, "secondDate");
			secondDate.year  = Год(Данные[ИмяПоляКонецПериода]);
			secondDate.month = Месяц(Данные[ИмяПоляКонецПериода]);
			Если ТребуетсяУказаниеДняПериода(Данные, ИмяПоля) Тогда
				secondDate.day = День(Данные[ИмяПоляКонецПериода]);
			КонецЕсли;
			Если ТребуетсяУказаниеЧасаПериода(Данные, ИмяПоля) Тогда
				secondDate.hour = Час(Данные[ИмяПоляКонецПериода]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОбъект_Batch(Данные, ПолеКоличество, ВспомогательныеДанные, ОбъектXDTO, СообщениеXML) Экспорт
	
	СтраныМира = ВспомогательныеДанные.СтраныМира;
	
	// Тип продукции. Первый уровень иерархического справочника продукции ИС Меркурий.
	КодТипаПродукции = ПродукцияВЕТИСВызовСервера.ТипПродукции(Данные.ТипПродукции);
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "productType", КодТипаПродукции, СообщениеXML);
	
	// Продукция. Второй уровень иерархического справочника продукции ИС Меркурий.
	Продукция = СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "product");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Продукция, "guid", Данные.ПродукцияПродукция_Идентификатор, СообщениеXML);
	
	// Вид продукции. Третий уровень иерархического справочника продукции ИС Меркурий.
	ВидПродукции = СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "subProduct");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ВидПродукции, "guid", Данные.ВидПродукции_Идентификатор, СообщениеXML);
	
	// Наименование продукции.
	НаименованиеПродукции = СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "productItem");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(НаименованиеПродукции, "guid", Данные.Продукция_Идентификатор, СообщениеXML);
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(НаименованиеПродукции, "name", Данные.Продукция_Наименование, СообщениеXML);
	
	// Произвольная продукция
	Если Не ЗначениеЗаполнено(Данные.Продукция_Идентификатор) Тогда
		
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(НаименованиеПродукции, "code",     Данные.Продукция_Артикул, СообщениеXML);
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(НаименованиеПродукции, "globalID", Данные.Продукция_GTIN, СообщениеXML);
		
		Если ЗначениеЗаполнено(Данные.Продукция_ФасовкаЕдиницаИзмерения)
			Или ЗначениеЗаполнено(Данные.Продукция_ФасовкаКоличествоЕдиницВУпаковке)
			Или ЗначениеЗаполнено(Данные.Продукция_ФасовкаКоличествоУпаковок)
			Или ЗначениеЗаполнено(Данные.Продукция_ФасовкаУпаковка) Тогда
			
			packaging = СоздатьОбъектXDTOПоИмениТипа(НаименованиеПродукции, "packaging");
			
			Если ЗначениеЗаполнено(Данные.Продукция_ФасовкаУпаковка) Тогда
				packagingType = СоздатьОбъектXDTOПоИмениТипа(packaging, "packagingType");
				packagingType.guid = Данные.Продукция_ФасовкаУпаковка_Идентификатор;
			КонецЕсли;
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(packaging, "quantity", Данные.Продукция_ФасовкаКоличествоУпаковок, СообщениеXML);
			
			Если ЗначениеЗаполнено(Данные.Продукция_ФасовкаЕдиницаИзмерения) Тогда
				unit = СоздатьОбъектXDTOПоИмениТипа(packaging, "unit");
				unit.guid = Данные.Продукция_ФасовкаЕдиницаИзмерения_Идентификатор;
			КонецЕсли;
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(packaging, "volume", Данные.Продукция_ФасовкаКоличествоЕдиницВУпаковке, СообщениеXML);
			
			ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеXML,
				СтрШаблон(
					НСтр("ru = 'Для продукции ""%1"" указана фасовка.
					           |К сожалению, ФГИС Меркурий больше не поддерживает такую возможность.
					           |Удалите сведения о фасовке из продукции и повторите операцию.'"), Данные.Продукция_Наименование));
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Объём принимаемой продукции.
	ИнтеграцияВЕТИС.УстановитьСвойствоXDTO(ОбъектXDTO, "volume", Данные[ПолеКоличество], СообщениеXML);
	
	// Единица измерения объема партии продукции.
	ЕдиницаИзмерения = СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "unit");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "guid", Данные.ЕдиницаИзмеренияВЕТИС_Идентификатор, СообщениеXML);
	
	// Дата выработки продукции.
	Если ЗначениеЗаполнено(Данные.ДатаПроизводстваСтрока)
		Или ЗначениеЗаполнено(Данные.ДатаПроизводстваНачалоПериода)
		Или ИнтеграцияВЕТИСКлиентСервер.ТочностьЗаполненияБезДаты(Данные.ДатаПроизводстваТочностьЗаполнения) Тогда
		ДатаВыработки = СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "dateOfProduction");
		ЗаполнитьОбъект_Период(ДатаВыработки, Данные, "ДатаПроизводства", СообщениеXML);
	КонецЕсли;
	
	// Дата окончания срока годности.
	Если ЗначениеЗаполнено(Данные.СрокГодностиСтрока)
		Или ЗначениеЗаполнено(Данные.СрокГодностиНачалоПериода)
		Или ИнтеграцияВЕТИСКлиентСервер.ТочностьЗаполненияБезДаты(Данные.СрокГодностиТочностьЗаполнения) Тогда
		
		Если Данные.СрокГодностиТочностьЗаполнения <> Перечисления.ТочностьЗаполненияПериодаВЕТИС.Неприменимо Тогда
			
			СрокГодности = СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "expiryDate");
			ЗаполнитьОбъект_Период(СрокГодности, Данные, "СрокГодности", СообщениеXML);

		КонецЕсли;
		
	КонецЕсли;
	
	// Идентификатор производственной партии продукции.
	Если ВспомогательныеДанные.Свойство("ПроизводственныеПартии") Тогда
		Для каждого ДанныеПартии Из ВспомогательныеДанные.ПроизводственныеПартии Цикл
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "batchID", ДанныеПартии.ИдентификаторПартии, СообщениеXML);
		КонецЦикла;
	КонецЕсли;
	
	// Флаг: является ли продукция скоропортящейся.
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		ОбъектXDTO,
		"perishable",
		?(?(Данные.СкоропортящаясяПродукция = Null, Ложь, Данные.СкоропортящаясяПродукция), "true", "false"),
		СообщениеXML);
	
	// Сведения о происхождении продукции.
	Если ЗначениеЗаполнено(Данные.СтранаПроизводства) Тогда
		ДанныеСтраныМира = ПрочиеКлассификаторыВЕТИСВызовСервера.ДанныеСтраныМира(Данные.СтранаПроизводства, СтраныМира);
		СведенияОПроисхождении = СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "origin");
		СтранаПроисхождения = СоздатьОбъектXDTOПоИмениТипа(СведенияОПроисхождении, "country");
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(СтранаПроисхождения, "guid", ДанныеСтраныМира.Идентификатор, СообщениеXML);
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(СтранаПроисхождения, "name", ДанныеСтраныМира.Наименование, СообщениеXML);
	Иначе
		СведенияОПроисхождении = Неопределено;
	КонецЕсли;
	
	Если ВспомогательныеДанные.Свойство("Производители") Тогда
		
		Для Каждого ПроизводителиНайденнаяСтрока Из ВспомогательныеДанные.Производители Цикл
			
			Если СведенияОПроисхождении = Неопределено Тогда
				СведенияОПроисхождении = СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "origin");
			КонецЕсли;
			
			ПроизводительПартии = ИнтеграцияВЕТИС.ОбъектXDTOПоИмениТипа(СведенияОПроисхождении, "producer");
			
			ИнформацияОПроизводителе = СоздатьОбъектXDTOПоИмениТипа(ПроизводительПартии, "enterprise");
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ИнформацияОПроизводителе, "guid", ПроизводителиНайденнаяСтрока.Производитель_Идентификатор, СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ИнформацияОПроизводителе, "name", ПроизводителиНайденнаяСтрока.ПроизводительНаименование, СообщениеXML);
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				ПроизводительПартии,
				"role",
				ИнтеграцияВЕТИСПовтИсп.РольПредприятия(ПроизводителиНайденнаяСтрока.РольПредприятия),
				СообщениеXML);
			
			СведенияОПроисхождении.producer.Добавить(ПроизводительПартии);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Флаг: является ли груз некачественным.
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		ОбъектXDTO,
		"lowGradeCargo",
		?(?(Данные.НизкокачественнаяПродукция = Null, Ложь, Данные.НизкокачественнаяПродукция), "true", "false"),
		СообщениеXML);
		
	Если ВспомогательныеДанные.Упаковки.Количество() <> 0 Тогда
		СписокУпаковок = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "packageList");
		ЗаполнитьОбъект_PackageList(ВспомогательныеДанные.Упаковки, ВспомогательныеДанные, СписокУпаковок, СообщениеXML);
	КонецЕсли; 
	
	// Дополнительные характеристики партии.
	Если ИнтеграцияИСКлиентСервер.ЕстьРеквизитОбъекта(Данные, "ТипПроисхождения")
	   И ЗначениеЗаполнено(Данные.ТипПроисхождения) Тогда
		ДополнительныеХарактеристики = СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "applicableClassifications");
		
		ТипПроисхождения  = ПродукцияВЕТИСВызовСервера.ТипПроисхожденияНепищевойПродукции(Данные.ТипПроисхождения);
		
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДополнительныеХарактеристики, "nonFoodSource", ТипПроисхождения, СообщениеXML);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОбъект_VetDocument(Данные, Шапка, ВспомогательныеДанные, ДополнительныеПараметры, ОбъектXDTO, СообщениеXML) Экспорт

	// Серия бланка строгой отчётности.
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "issueSeries", Данные.ВСД_СерияБланкаСтрогойОтчетности, СообщениеXML);
	
	// Номер бланка строгой отчётности.
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "issueNumber", Данные.ВСД_НомерБланкаСтрогойОтчетности, СообщениеXML);

	// Дата оформления ветеринарного сопроводительного документа.
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "issueDate", Данные.ВСД_Дата, СообщениеXML);
	
	// Форма ветеринарного сопроводительного документа.
	Если ЗначениеЗаполнено(Данные.ВСД_Форма) Тогда
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
			ОбъектXDTO, 
			"vetDForm", 
			ОбщегоНазначения.ИмяЗначенияПеречисления(Данные.ВСД_Форма),
			СообщениеXML);
	КонецЕсли; 
	
	// Сертифицированная партия.
	#Область certifiedConsignment
	
	Если ЗначениеЗаполнено(Данные.ВСД_ГрузоотправительПредприятие_Идентификатор) Тогда
		
		ПартияВСД = СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "certifiedConsignment");
		
		// Сведения об отправителе (владельце).
		СведенияОбОтправителе = СоздатьОбъектXDTOПоИмениТипа(ПартияВСД, "consignor");
		ЗаполнитьОбъект_BusinessMember(Данные, "ВСД_Грузоотправитель", СведенияОбОтправителе, СообщениеXML);
		
		// Сведения о получателе продукции.
		СведенияОПолучателе = СоздатьОбъектXDTOПоИмениТипа(ПартияВСД, "consignee");
		ЗаполнитьОбъект_BusinessMember(Данные, "ВСД_Грузополучатель", СведенияОПолучателе, СообщениеXML);
		
		// Фирма-посредник (перевозчик продукции).
		Если ЗначениеЗаполнено(Данные.ВСД_ПеревозчикХозяйствующийСубъект_Идентификатор) Тогда
			Посредник = СоздатьОбъектXDTOПоИмениТипа(ПартияВСД, "broker");
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				Посредник, 
				"guid", 
				Данные.ВСД_ПеревозчикХозяйствующийСубъект_Идентификатор,
				СообщениеXML);
		КонецЕсли; 
		
		// Информация о транспорте.
		ИнформацияОТранспорте = СоздатьОбъектXDTOПоИмениТипа(ПартияВСД, "transportInfo");
		ЗаполнитьОбъект_TransportInfo(Шапка, ВспомогательныеДанные, ИнформацияОТранспорте, СообщениеXML);
		
		// Способ хранения продукции при перевозке.
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
			ПартияВСД, 
			"transportStorageType", 
			ПродукцияВЕТИСВызовСервера.СпособХраненияПриТранспортировке(Шапка.СпособХранения),
			СообщениеXML);
		
		// Сведения о партии продукции.
		СведенияОПартииПродукции = СоздатьОбъектXDTOПоИмениТипа(ПартияВСД, "batch");
		ЗаполнитьОбъект_Batch(Данные, ДополнительныеПараметры.ПолеКоличество, ВспомогательныеДанные, СведенияОПартииПродукции, СообщениеXML);
	
	КонецЕсли; 
	
	#КонецОбласти
	
	// Результаты осмотра/исследований партии. Заключение ветеринарного врача/специалиста.
	#Область authentication
	
	РезультатыИследованийПартии = СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, "authentication");
	
	// Цель. Назначение груза.
	ЦельГруза = СоздатьОбъектXDTOПоИмениТипа(РезультатыИследованийПартии, "purpose");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		ЦельГруза, 
		"guid", 
		Данные.ВСД_Цель_Идентификатор, 
		СообщениеXML);
	
	// Осуществлен ли контроль гос.ветврачом на соответствие требованиям.
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		РезультатыИследованийПартии, 
		"cargoInspected", 
		Данные.ВСД_ЭкспертизаВыполнена, 
		СообщениеXML);
	
	// Проводилась ли ветсанэкспертиза.
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		РезультатыИследованийПартии,
		"cargoExpertized",
		ИнтеграцияВЕТИСВызовСервера.КодРезультатаЛабораторныхИсследований(Данные.ВСД_ЭкспертизаРезультат),
		СообщениеXML);
	
	// Благополучие местности.
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		РезультатыИследованийПартии,
		"locationProsperity",
		Данные.ВСД_БлагополучиеМестности,
		СообщениеXML);
	
	// Период нахождения животных на территории ТС.
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		РезультатыИследованийПартии,
		"animalSpentPeriod",
		ИнтеграцияВЕТИСПовтИсп.ПериодНахожденияЖивотныхНаТерриторииТС(Данные.ВСД_ПериодНахожденияЖивотныхНаТерриторииТС),
		СообщениеXML);
	
	// Кол-во месяцев нахождения животных на территории ТС.
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		РезультатыИследованийПартии,
		"monthsSpent",
		Данные.ВСД_КоличествоПериодовНахожденияЖивотныхНаТерриторииТС,
		СообщениеXML);
	
	Если ДополнительныеПараметры.Свойство("Регионализация") Тогда
		Для каждого ДанныеРегионализации Из ДополнительныеПараметры.Регионализация Цикл
			
			Регионализация = ИнтеграцияВЕТИС.ОбъектXDTOПоИмениТипа(РезультатыИследованийПартии, "r13nClause");
			
			// Условие регионализации, соблюдаемое при перевозке груза.
			УсловиеРегионализации = СоздатьОбъектXDTOПоИмениТипа(Регионализация, "condition");
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				УсловиеРегионализации, 
				"guid", 
				ДанныеРегионализации.УсловиеРегионализации_Идентификатор,
				СообщениеXML);
			
			РезультатыИследованийПартии.r13nClause.Добавить(Регионализация);
			
		КонецЦикла;
	КонецЕсли;
	
	// Сведения о проведенных лабораторных исследованиях.
	#Область laboratoryResearch
	Если ДополнительныеПараметры.Свойство("ЛабораторныеИсследования") Тогда
		
		СтруктураПоиска = Новый Структура("ВСД", Данные.ВСД);
		СписокСтрок = ДополнительныеПараметры.ЛабораторныеИсследования.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеИследований Из СписокСтрок Цикл
			
			ДанныеИследованийXDTO = ИнтеграцияВЕТИС.ОбъектXDTOПоИмениТипа(РезультатыИследованийПартии, "laboratoryResearch");
			
			// Дата события.
			ИнтеграцияИС.УстановитьДатуСЧасовымПоясом(
				ДанныеИследованийXDTO, 
				"actualDateTime", 
				ДанныеИследований.ДатаПолученияРезультата, 
				ВспомогательныеДанные.ХранилищеВременныхДат);
			
			// Организация-оператор, осуществляющий мероприятие.
			Лаборатория = СоздатьОбъектXDTOПоИмениТипа(ДанныеИследованийXDTO, "operator");
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				Лаборатория, 
				"name", 
				ДанныеИследований.НаименованиеЛаборатории,
				СообщениеXML);
				
			// Номер экспертизы.
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				ДанныеИследованийXDTO, 
				"expertiseID", 
				ДанныеИследований.НомерЭкспертизы,
				СообщениеXML);
			
			// Показатель безопасности.
			НаименованиеПоказателя = СоздатьОбъектXDTOПоИмениТипа(ДанныеИследованийXDTO, "indicator");
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				НаименованиеПоказателя, 
				"name", 
				ДанныеИследований.НаименованиеПоказателя,
				СообщениеXML);
			
			// Метод исследования.
			Если ЗначениеЗаполнено(ДанныеИследований.МетодИсследования) Тогда
				МетодИсследования = СоздатьОбъектXDTOПоИмениТипа(ДанныеИследованийXDTO, "method");
				ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
					МетодИсследования, 
					"name", 
					ДанныеИследований.МетодИсследования,
					СообщениеXML);
			КонецЕсли; 
			
			// Результат исследования.
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				ДанныеИследованийXDTO, 
				"result", 
				ИнтеграцияВЕТИСВызовСервера.КодРезультатаЛабораторныхИсследований(ДанныеИследований.РезультатИсследования),
				СообщениеXML);
			
			// Заключение.
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				ДанныеИследованийXDTO, 
				"conclusion", 
				ДанныеИследований.Заключение,
				СообщениеXML);
			
			РезультатыИследованийПартии.laboratoryResearch.Добавить(ДанныеИследованийXDTO);
		
		КонецЦикла;
	
	КонецЕсли;
	#КонецОбласти
	
	// Сведения о проведенной обработке/иммунизации животных.
	#Область immunization
	Если ДополнительныеПараметры.Свойство("Иммунизация") Тогда
		
		СтруктураПоиска = Новый Структура("ВСД", Данные.ВСД);
		СписокСтрок = ДополнительныеПараметры.Иммунизация.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеОбработки Из СписокСтрок Цикл
			
			ДанныеОбработкиXDTO = ИнтеграцияВЕТИС.ОбъектXDTOПоИмениТипа(РезультатыИследованийПартии, "immunization");
			
			// Дата события.
			ИнтеграцияИС.УстановитьДатуСЧасовымПоясом(
				ДанныеОбработкиXDTO, 
				"actualDateTime", 
				ДанныеОбработки.ДатаПроведенияИммунизацииОбработки, 
				ВспомогательныеДанные.ХранилищеВременныхДат);

			// Заболевание.
			Заболевание = СоздатьОбъектXDTOПоИмениТипа(ДанныеОбработкиXDTO, "disease");
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				Заболевание, 
				"name", 
				ДанныеОбработки.НаименованиеБолезниПаразита,
				СообщениеXML);

			// Препарат.
			Препарат = СоздатьОбъектXDTOПоИмениТипа(ДанныеОбработкиXDTO, "medicinalDrug");
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				Препарат, 
				"name", 
				ДанныеОбработки.НазваниеИПроизводительВакциныПрепарата,
				СообщениеXML);
				
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				Препарат, 
				"series", 
				ДанныеОбработки.НомерСерииВакциныПрепарата,
				СообщениеXML);

			// Срок действия препарата/вакцины.
			Если ЗначениеЗаполнено(ДанныеОбработки.ДатаОкончанияДействияВакциныПрепарата) Тогда
				ИнтеграцияИС.УстановитьДатуСЧасовымПоясом(
					ДанныеОбработкиXDTO, 
					"effectiveBeforeDate", 
					ДанныеОбработки.ДатаОкончанияДействияВакциныПрепарата, 
					ВспомогательныеДанные.ХранилищеВременныхДат);
			КонецЕсли;

			РезультатыИследованийПартии.immunization.Добавить(ДанныеОбработкиXDTO);
			
		КонецЦикла; 

	КонецЕсли; 
	#КонецОбласти
	
	// Особые отметки для ВСД.
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
		РезультатыИследованийПартии, 
		"specialMarks", 
		Данные.ВСД_ОсобыеОтметки,
		СообщениеXML);

	#КонецОбласти

	// Сведения об установлении статуса ветеринарного документа.
	#Область statusChange
	Если ВспомогательныеДанные.Свойство("ИсторияСтатусов") Тогда
		
		// Нельзя использовать НайтиСтроки, т.к. результат должен быть упорядочен.
		Для каждого ДанныеСтатуса Из ВспомогательныеДанные.ИсторияСтатусов Цикл
			
			Если ДанныеСтатуса.ВСД <> Данные.ВСД Тогда
				Продолжить;
			КонецЕсли;
			
			СтатусВСД = ИнтеграцияВЕТИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO, "statusChange");
			
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
				СтатусВСД, 
				"status", 
				ИнтеграцияВЕТИСПовтИсп.СтатусВетеринарноСопроводительногоДокумента(ДанныеСтатуса.Статус), 
				СообщениеXML);
			
			ИзменилСтатус = СоздатьОбъектXDTOПоИмениТипа(СтатусВСД, "specifiedPerson");
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ИзменилСтатус, "fio", ДанныеСтатуса.ФИО, СообщениеXML);
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ИзменилСтатус, "post", ДанныеСтатуса.Должность, СообщениеXML);
			
			ИнтеграцияИС.УстановитьДатуСЧасовымПоясом(
				СтатусВСД,
				"actualDateTime",
				ДанныеСтатуса.ДатаИзменения,
				ВспомогательныеДанные.ХранилищеВременныхДат);
			
			ОбъектXDTO.statusChange.Добавить(СтатусВСД);
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьОбъект_PackageList(Упаковки, ВспомогательныеДанные, ОбъектXDTO, СообщениеXML) Экспорт

	Для каждого ДанныеУпаковки Из Упаковки Цикл
	
		// Описание упаковки.
		ОписаниеУпаковки = ИнтеграцияВЕТИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO, "package");
		
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
			ОписаниеУпаковки, 
			"level", 
			ИнтеграцияВЕТИСПовтИсп.УровеньУпаковки(ДанныеУпаковки.УровеньУпаковки), 
			СообщениеXML);
			
		// Тип упаковки.
		ТипУпаковки = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ОписаниеУпаковки, "packingType");
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ТипУпаковки, "globalID", ДанныеУпаковки.УпаковкаВЕТИС_КодЕЭК, СообщениеXML);
		
		// Количество единиц упаковки.
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ОписаниеУпаковки, "quantity", ДанныеУпаковки.КоличествоУпаковокВЕТИС, СообщениеXML);

		// Маркировка партии продукции.
		Если ВспомогательныеДанные.Свойство("ШтрихкодыУпаковок") Тогда
			
			СтруктураПоиска = Новый Структура("ИдентификаторСтрокиУпаковки", ДанныеУпаковки.ИдентификаторСтроки);
			СписокСтрок = ВспомогательныеДанные.ШтрихкодыУпаковок.НайтиСтроки(СтруктураПоиска);
			Для каждого ДанныеШтрихкода Из СписокСтрок Цикл
				
				Штрихкод = ИнтеграцияВЕТИС.ОбъектXDTOПоИмениТипа(ОписаниеУпаковки, "productMarks");
				
				ТипМаркировки = ПродукцияВЕТИСВызовСервера.ТипМаркировкиУпаковки(ДанныеШтрихкода.ТипМаркировки);
				
				ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Штрихкод, "class",     ТипМаркировки, СообщениеXML);
				ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Штрихкод, "__content", ДанныеШтрихкода.Штрихкод, СообщениеXML);
				
				ОписаниеУпаковки.productMarks.Добавить(Штрихкод);
				
			КонецЦикла; 
			
		КонецЕсли;
	
		ОбъектXDTO.package.Добавить(ОписаниеУпаковки);
		
	КонецЦикла; 
	
КонецПроцедуры

Функция СоздатьОбъектXDTOПоИмениТипа(ОбъектXDTO, ИмяСвойства) Экспорт

	ОбъектXDTO[ИмяСвойства] = ИнтеграцияВЕТИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO, ИмяСвойства);
	
	Возврат ОбъектXDTO[ИмяСвойства];
	
КонецФункции

Процедура ДобавитьЗаписьСкладскогоЖурналаВСообщениеXML(Данные, СообщениеXML) Экспорт
	
	Если ИнтеграцияВЕТИСПовтИсп.ИспользоватьОчередьПередачиЗаписейСкладскогоЖурналаВЕТИС() Тогда
		Если СообщениеXML.ЗаписиСкладскогоЖурнала = Неопределено Тогда
			СообщениеXML.ЗаписиСкладскогоЖурнала = Новый Соответствие;
		КонецЕсли;
		
		ДанныеРезервирования = Новый Структура;
		ДанныеРезервирования.Вставить("КоличествоВЕТИС",       Данные.КоличествоВЕТИС);
		ДанныеРезервирования.Вставить("ЕдиницаИзмеренияВЕТИС", Данные.ЕдиницаИзмеренияВЕТИС);
		ДанныеРезервирования.Вставить("Продукция",             Данные.Продукция);
		
		СообщениеXML.ЗаписиСкладскогоЖурнала.Вставить(Данные.ЗаписьСкладскогоЖурнала, ДанныеРезервирования);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗагрузитьЗаписиСкладскогоЖурналаПоРезультатамЗапросаВЕТИС(ДанныеЗаписейСкладскогоЖурнала, ТабличнаяЧасть, Документ) Экспорт

	Для Каждого ДанныеЗаписиСкладскогоЖурнала Из ДанныеЗаписейСкладскогоЖурнала Цикл
		
		ЗаписьСкладскогоЖурналаСсылка = ДанныеЗаписиСкладскогоЖурнала.Ссылка;
		ЗаписьСкладскогоЖурналаОбъект = ДанныеЗаписиСкладскогоЖурнала.Объект;
		
		ДанныеСтроки = ТабличнаяЧасть.Найти(ЗаписьСкладскогоЖурналаСсылка, "ЗаписьСкладскогоЖурнала");
		Если ДанныеСтроки <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗаписьСкладскогоЖурналаОбъект.ВетеринарноСопроводительныеДокументы.Количество() = 1 Тогда
			
			ВетеринарноСопроводительныйДокумент = ЗаписьСкладскогоЖурналаОбъект.ВетеринарноСопроводительныеДокументы[0].ВетеринарноСопроводительныйДокумент;
			
			ДанныеСтроки = ТабличнаяЧасть.Найти(ВетеринарноСопроводительныйДокумент, "ВетеринарноСопроводительныйДокумент");
			Если ДанныеСтроки <> Неопределено Тогда
				ДанныеСтроки.ЗаписьСкладскогоЖурнала = ЗаписьСкладскогоЖурналаСсылка;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеСтроки = Неопределено Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Продукция",             ЗаписьСкладскогоЖурналаОбъект.Продукция);
			ПараметрыОтбора.Вставить("КоличествоВЕТИС",       ДанныеЗаписиСкладскогоЖурнала.КоличествоВЕТИС);
			ПараметрыОтбора.Вставить("ЕдиницаИзмеренияВЕТИС", ДанныеЗаписиСкладскогоЖурнала.ЕдиницаИзмеренияВЕТИС);
			
			ПараметрыОтбора.Вставить("СрокГодностиСтрока",             ЗаписьСкладскогоЖурналаОбъект.СрокГодностиСтрока);
			ПараметрыОтбора.Вставить("СрокГодностиТочностьЗаполнения", ЗаписьСкладскогоЖурналаОбъект.СрокГодностиТочностьЗаполнения);
			ПараметрыОтбора.Вставить("СрокГодностиНачалоПериода",      ЗаписьСкладскогоЖурналаОбъект.СрокГодностиНачалоПериода);
			ПараметрыОтбора.Вставить("СрокГодностиКонецПериода",       ЗаписьСкладскогоЖурналаОбъект.СрокГодностиКонецПериода);
			
			ПараметрыОтбора.Вставить("ЗаписьСкладскогоЖурнала", Справочники.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка());
			
			НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() <> 0 Тогда
				ДанныеСтроки = НайденныеСтроки[0];
				ДанныеСтроки.ЗаписьСкладскогоЖурнала = ЗаписьСкладскогоЖурналаСсылка;
			Иначе
				// Запись могла быть образована в результате возврата.
				// В таком случае нельзя искать количество методом "НайтиСтроки".
				МетаданныеДокумента = Документ.Метаданные();
				Если НЕ МетаданныеДокумента.ТабличныеЧасти.Найти("Товары") = Неопределено
					И ОбщегоНазначения.ЕстьРеквизитОбъекта("ВозвращаемоеКоличествоВЕТИС", МетаданныеДокумента.ТабличныеЧасти.Товары) Тогда
			
					ПараметрыОтбора.Удалить("КоличествоВЕТИС");
					НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(ПараметрыОтбора);
					Для Каждого СтрокаТЧ из НайденныеСтроки Цикл
						Если ДанныеЗаписиСкладскогоЖурнала.КоличествоВЕТИС = СтрокаТЧ.КоличествоВЕТИС
							- СтрокаТЧ.ВозвращаемоеКоличествоВЕТИС Тогда
							
							ДанныеСтроки = СтрокаТЧ;
							ДанныеСтроки.ЗаписьСкладскогоЖурнала = ЗаписьСкладскогоЖурналаСсылка;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
			
		Если ДанныеСтроки = Неопределено Тогда
			
			ТекстОшибки = НСтр("ru = 'При заполнении записи складского журнала по документу %1 не удалось найти позицию документа по продукции %2 (количество %3 %4; дата производства %5; срок годности %6)'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, 
				Документ, 
				ЗаписьСкладскогоЖурналаОбъект.Продукция,
				ДанныеЗаписиСкладскогоЖурнала.КоличествоВЕТИС,
				ДанныеЗаписиСкладскогоЖурнала.ЕдиницаИзмеренияВЕТИС,
				ЗаписьСкладскогоЖурналаОбъект.ДатаПроизводстваСтрока,
				ЗаписьСкладскогоЖурналаОбъект.СрокГодностиСтрока);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
			
	КонецЦикла;

КонецФункции
 
#КонецОбласти

#Область ЗагрузкаДанных

// Преобразует список измененных записей складского журнала в таблицу значений
// и добавляет ее в "ПараметрыОбмена" (ТаблицаЭлементовПоДатам).
//
// Параметры:
//  Список           - Массив структур, полученный в результате выполнения запроса к ВЕТИС "GetStockEntryChangesList",
//                     См. http://help.vetrf.ru/wiki/GetStockEntryChangesListOperation_v2.0
//  ПараметрыОбмена  - См. "ИнтеграцияВЕТИС.ПараметрыОбмена",
//  ПараметрыЗапроса - Структура - Параметры сообщения, переданного в ВЕТИС.
//
Процедура ЗаполнитьТаблицуЭлементовПоДате(Список, ПараметрыОбмена, ПараметрыЗапроса) Экспорт
	
	ОписаниеТипаУникальныйИдентификаторВЕТИС = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36));
	
	ТипЧисло                   = Новый ОписаниеТипов("Число");
	ТипДата                    = Новый ОписаниеТипов("Дата");
	ТипБулево                  = Новый ОписаниеТипов("Булево");
	ТипСтруктура               = Новый ОписаниеТипов("Структура");
	
	// Таблица элементов с одной датой изменения.
	ТаблицаЭлементовШаблон = Новый ТаблицаЗначений;
	ТаблицаЭлементовШаблон.Колонки.Добавить("Идентификатор",                 ОписаниеТипаУникальныйИдентификаторВЕТИС);
	ТаблицаЭлементовШаблон.Колонки.Добавить("ИдентификаторВерсии",           ОписаниеТипаУникальныйИдентификаторВЕТИС);
	ТаблицаЭлементовШаблон.Колонки.Добавить("ИдентификаторВСД",              ОписаниеТипаУникальныйИдентификаторВЕТИС);
	ТаблицаЭлементовШаблон.Колонки.Добавить("ИдентификаторЕдиницыИзмерения", ОписаниеТипаУникальныйИдентификаторВЕТИС);
	ТаблицаЭлементовШаблон.Колонки.Добавить("ЭлементДанных",                 ТипСтруктура);
	ТаблицаЭлементовШаблон.Колонки.Добавить("ЭлементДанныхСледующий",        ТипСтруктура);
	ТаблицаЭлементовШаблон.Колонки.Добавить("ЭлементДанныхПредыдущий",       ТипСтруктура);
	ТаблицаЭлементовШаблон.Колонки.Добавить("КоличествоВЕТИС",               ТипЧисло);
	ТаблицаЭлементовШаблон.Колонки.Добавить("Статус",                        ТипЧисло);
	ТаблицаЭлементовШаблон.Колонки.Добавить("СинхронизированРанее",          ТипБулево);
	
	// Преобразуем "Список" в таблицу значений для обработки.
	ТаблицаИдентификаторов = ИнтеграцияВЕТИС.НоваяТаблицаДляСравненияИдентификаторов();
	ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторЕдиницыИзмерения", ОписаниеТипаУникальныйИдентификаторВЕТИС);
	ТаблицаИдентификаторов.Колонки.Добавить("ЭлементДанных",                 ТипСтруктура);
	
	Индекс = -1;
	// Заполним таблицу идентификаторов.
	Для Каждого ЭлементДанных Из Список Цикл
		Индекс = Индекс + 1;
		
		СтрокаТЧ = ТаблицаИдентификаторов.Добавить();
		СтрокаТЧ.Идентификатор       = ЭлементДанных.guid;
		СтрокаТЧ.ИдентификаторВерсии = ЭлементДанных.uuid;
		СтрокаТЧ.ДатаИзменения       = ЭлементДанных.createDate;
		СтрокаТЧ.ЭлементДанных       = ЭлементДанных;
		СтрокаТЧ.Индекс              = Индекс;
		
	КонецЦикла;
		
		
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.Индекс КАК Индекс,
	|	Т.Идентификатор КАК Идентификатор,
	|	Т.ИдентификаторВерсии КАК ИдентификаторВерсии,
	|	Т.ДатаИзменения КАК ДатаИзменения
	|ПОМЕСТИТЬ ВтИдентификаторы
	|ИЗ
	|	&Таблица КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтИдентификаторы.Индекс КАК Индекс,
	|	ВтИдентификаторы.Идентификатор КАК Идентификатор,
	|	ВтИдентификаторы.ИдентификаторВерсии КАК ИдентификаторВерсии,
	|	ВтИдентификаторы.ДатаИзменения КАК ДатаИзменения,
	|	ВЫБОР
	|		КОГДА СинхронизацияОбъектовВЕТИС.ИдентификаторВерсии ЕСТЬ NULL
	|				И ВтИдентификаторы.ДатаИзменения >= &НачалоПериода
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СинхронизированРанее
	|ИЗ
	|	ВтИдентификаторы КАК ВтИдентификаторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СинхронизацияОбъектовВЕТИС КАК СинхронизацияОбъектовВЕТИС
	|		ПО ВтИдентификаторы.Идентификатор = СинхронизацияОбъектовВЕТИС.Идентификатор
	|			И ВтИдентификаторы.ИдентификаторВерсии = СинхронизацияОбъектовВЕТИС.ИдентификаторВерсии
	|			И (СинхронизацияОбъектовВЕТИС.ТипВЕТИС = ЗНАЧЕНИЕ(Перечисление.ТипыВЕТИС.ЗаписиСкладскогоЖурнала))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаИзменения,
	|	Индекс УБЫВ
	|ИТОГИ ПО
	|	ДатаИзменения";
	
	// В запрос будем передавать таблицу идентификаторов без элементов данных.
	Таблица = ТаблицаИдентификаторов.Скопировать();
	Таблица.ЗаполнитьЗначения(Неопределено, "ЭлементДанных");
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Если ТипЗнч(ПараметрыЗапроса) = Тип("Структура")
		И ПараметрыЗапроса.Свойство("Интервал") Тогда
		Запрос.УстановитьПараметр("НачалоПериода", ПараметрыЗапроса.Интервал.НачалоПериода);
	Иначе
		Запрос.УстановитьПараметр("НачалоПериода", Дата(1,1,1));
	КонецЕсли;
	
	ВыборкаДатаИзменения = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДатаИзменения.Следующий() Цикл
		
		ЭлементыПоДате = ПараметрыОбмена.ТаблицаЭлементовПоДатам.Найти(ВыборкаДатаИзменения.ДатаИзменения);
		Если ЭлементыПоДате = Неопределено Тогда
			ЭлементыПоДате = ПараметрыОбмена.ТаблицаЭлементовПоДатам.Добавить();
			ЭлементыПоДате.Дата     = ВыборкаДатаИзменения.ДатаИзменения;
		КонецЕсли;
		
		Если ЭлементыПоДате.ТаблицаЭлементов = Неопределено Тогда
			ЭлементыПоДате.ТаблицаЭлементов = ТаблицаЭлементовШаблон.СкопироватьКолонки();
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Идентификатор, ИдентификаторВерсии");
		Выборка = ВыборкаДатаИзменения.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
			МассивСтрок = ЭлементыПоДате.ТаблицаЭлементов.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрок.Количество() = 0 Тогда
				НоваяСтрока = ЭлементыПоДате.ТаблицаЭлементов.Добавить();
			Иначе
				НоваяСтрока = МассивСтрок[0];
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ЭлементДанных = Список[Выборка.Индекс];
			
			// Заполним идентификатор ВСД.
			МассивВСД = НоваяСтрока.ЭлементДанных.vetDocument;
			Если МассивВСД.Количество() >= 1
				и НЕ НоваяСтрока.ЭлементДанных.status = 202 Тогда
				НоваяСтрока.ИдентификаторВСД = МассивВСД[МассивВСД.Количество()-1].uuid;
			КонецЕсли;
			
			// Заполним идентификатор единицы измерения ВЕТИС.
			НоваяСтрока.ИдентификаторЕдиницыИзмерения = НоваяСтрока.ЭлементДанных.batch.unit.guid;
			
			// Заполним статус.
			НоваяСтрока.Статус = НоваяСтрока.ЭлементДанных.status;
			
			// Заполним "ЭлементДанныхСледующий".
			Если Не ПустаяСтрока(НоваяСтрока.ЭлементДанных.next) Тогда
				ПараметрыОтбора = Новый Структура;
				
				ТекущийСтатус = ИнтеграцияВЕТИСПовтИсп.СтатусВерсионногоОбъекта(НоваяСтрока.ЭлементДанных.status);
				Если ТекущийСтатус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеОбъединения Тогда
					// Для операции удаления записи в результате объединения в графе "next"
					// указывается uuid выходной продукции, а не uuid текущей записи.
					ПараметрыОтбора.Вставить("ИдентификаторВерсии", НоваяСтрока.ЭлементДанных.next);
					ПараметрыОтбора.Вставить("ДатаИзменения",       НоваяСтрока.ЭлементДанных.createDate);
				Иначе
					ПараметрыОтбора.Вставить("Идентификатор",       НоваяСтрока.ЭлементДанных.guid);
					ПараметрыОтбора.Вставить("ИдентификаторВерсии", НоваяСтрока.ЭлементДанных.next);
				КонецЕсли;
				НайденныеСтроки = ТаблицаИдентификаторов.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() > 0 Тогда
					НоваяСтрока.ЭлементДанныхСледующий = НайденныеСтроки[0].ЭлементДанных;
				КонецЕсли;
			КонецЕсли;
			
			// Заполним "ЭлементДанныхПредыдущий".
			Если Не ПустаяСтрока(НоваяСтрока.ЭлементДанных.previous) Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Идентификатор",       НоваяСтрока.ЭлементДанных.guid);
				ПараметрыОтбора.Вставить("ИдентификаторВерсии", НоваяСтрока.ЭлементДанных.previous);
				НайденныеСтроки = ТаблицаИдентификаторов.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() > 0 Тогда	
					НоваяСтрока.ЭлементДанныхПредыдущий  = НайденныеСтроки[0].ЭлементДанных;
				КонецЕсли;
			КонецЕсли;
			
			// Заполним количество ВЕТИС.
			Если ЗначениеЗаполнено(НоваяСтрока.ЭлементДанныхПредыдущий) Тогда
				НоваяСтрока.КоличествоВЕТИС = НоваяСтрока.ЭлементДанныхПредыдущий.batch.volume - НоваяСтрока.ЭлементДанных.batch.volume;
			Иначе
				НоваяСтрока.КоличествоВЕТИС = НоваяСтрока.ЭлементДанных.batch.volume;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет идентификаторы синхронизированных объектов
// в регистр сведений "СинхронизацияОбъектовВЕТИС".
//
// Параметры:
//  ТаблицаИдентификаторов - ТаблицаЗначений с колонками: "Идентификатор", "ИдентификаторВерсии".
//  ТипВЕТИС               - Перечисление.ТипыВЕТИС
//
Процедура ЗарегистрироватьСинхронизациюОбъектов(ТаблицаИдентификаторов, ТипВЕТИС) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Стр из ТаблицаИдентификаторов Цикл
		
		МенеджерЗаписи = РегистрыСведений.СинхронизацияОбъектовВЕТИС.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Стр);
		МенеджерЗаписи.ТипВЕТИС = ТипВЕТИС;
		МенеджерЗаписи.Прочитать();
		Если НЕ МенеджерЗаписи.Выбран() Тогда
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Стр);
			МенеджерЗаписи.ТипВЕТИС = ТипВЕТИС;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает результат запроса, содержащий номер строки ТЧ и сопоставленные товары.
//
// Параметры:
//  ТЧТовары - Табличная часть "Товары" документа ВЕТИС.
//
Функция ПолучитьТоварыСопоставленныеПоЗаписи(ТЧТовары) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", ТЧТовары.Выгрузить(,"НомерСтроки, ЗаписьСкладскогоЖурнала, Продукция, Номенклатура, Характеристика, Серия"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	Товары.Продукция КАК Продукция,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Серия КАК Серия,
	|	Товары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&Товары КАК Товары";
	
	ДополнитьЗапросСопоставлениемТоваров(Запрос);
	
	Запрос.Текст = Запрос.Текст +
	"
	|
	|;
	|ВЫБРАТЬ
	|	втТовары.НомерСтроки КАК НомерСтроки,
	|	втНоменклатураСопоставленная.Номенклатура КАК Номенклатура,
	|	втНоменклатураСопоставленная.Характеристика КАК Характеристика,
	|	втНоменклатураСопоставленная.Серия КАК Серия
	|ИЗ
	|	втТовары КАК втТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатураСопоставленная КАК втНоменклатураСопоставленная
	|		ПО втТовары.ЗаписьСкладскогоЖурнала = втНоменклатураСопоставленная.ЗаписьСкладскогоЖурнала";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

#Область ФормированиеДокументов

// Формирует документы ВЕТИС на основании таблицы измененных записей складского журнала.
//
// Параметры:
//  ОбщиеДанные       - Структура: "ХозяйствующийСубъект", "Предприятие", "Дата",
//  ТаблицаЭлементов  - См. "ОбменДаннымиВЕТИС.ЗаполнитьТаблицуЭлементовПоДате" (Таблица элементов с одной датой изменения),
//  ПараметрыОбмена   - См. "ИнтеграцияВЕТИС.ПараметрыОбмена",
//  ИзмененныеОбъекты - Массив.
//
Процедура СформироватьДокументыПоДате(ОбщиеДанные, ТаблицаЭлементов, ПараметрыОбмена, ИзмененныеОбъекты) Экспорт
	
	ОписаниеТиповДокументыВЕТИС = Новый Массив;
	ОписаниеТиповДокументыВЕТИС.Добавить(Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС"));
	ОписаниеТиповДокументыВЕТИС.Добавить(Тип("ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС"));
	
	ТипСпособыХранения         = Новый ОписаниеТипов("ПеречислениеСсылка.СпособыХраненияПриТранспортировкеВЕТИС");
	ТипХозяйствующиеСубъекты   = Новый ОписаниеТипов("СправочникСсылка.ХозяйствующиеСубъектыВЕТИС");
	ТипПредприятия             = Новый ОписаниеТипов("СправочникСсылка.ПредприятияВЕТИС");
	ТипЗаписьСкладскогоЖурнала = Новый ОписаниеТипов("СправочникСсылка.ЗаписиСкладскогоЖурналаВЕТИС");
	ТипТТН                     = Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовВЕТИС");
	
	// Шаблон таблицы для хранения документов транспортных операций.
	ТаблицаТО = Новый ТаблицаЗначений;
	ТаблицаТО.Колонки.Добавить("Ссылка",                               Новый ОписаниеТипов(ОписаниеТиповДокументыВЕТИС));
	ТаблицаТО.Колонки.Добавить("ПеревозчикХозяйствующийСубъект",       ТипХозяйствующиеСубъекты);
	ТаблицаТО.Колонки.Добавить("СпособХранения",                       ТипСпособыХранения);
	ТаблицаТО.Колонки.Добавить("СерияТТН",                             Новый ОписаниеТипов("Строка"));
	ТаблицаТО.Колонки.Добавить("НомерТТН",                             Новый ОписаниеТипов("Строка"));
	ТаблицаТО.Колонки.Добавить("ДатаТТН",                              Новый ОписаниеТипов("Дата"));
	ТаблицаТО.Колонки.Добавить("ТипТТН",                               ТипТТН);
	ТаблицаТО.Колонки.Добавить("ГрузополучательХозяйствующийСубъект",  ТипХозяйствующиеСубъекты);
	ТаблицаТО.Колонки.Добавить("ГрузополучательПредприятие",           ТипПредприятия);
	ТаблицаТО.Колонки.Добавить("ГрузоотправительХозяйствующийСубъект", ТипХозяйствующиеСубъекты);
	ТаблицаТО.Колонки.Добавить("ГрузоотправительПредприятие",          ТипПредприятия);
	
	СтрокаРазделителиТО = "";
	Для Каждого КолонкаТО из ТаблицаТО.Колонки Цикл
		Если Не КолонкаТО.Имя = "Ссылка" Тогда
			СтрокаРазделителиТО = СтрокаРазделителиТО + ?(СтрокаРазделителиТО = "", "", ", ") + КолонкаТО.Имя;
		КонецЕсли;
	КонецЦикла;
	
	КСозданиюДокументов = Новый Структура;
	КСозданиюДокументов.Вставить("ВходящаяТранспортнаяОперацияВЕТИС",  ТаблицаТО.СкопироватьКолонки());
	КСозданиюДокументов.Вставить("ИсходящаяТранспортнаяОперацияВЕТИС", ТаблицаТО.СкопироватьКолонки());
	КСозданиюДокументов.Вставить("ОбъединениеЗаписейСкладскогоЖурналаВЕТИС", Новый Соответствие());
	КСозданиюДокументов.Вставить("ИнвентаризацияПродукцииВЕТИС");
	КСозданиюДокументов.Вставить("ПроизводственнаяОперацияВЕТИС");
	
	// Получим данные для формирования документов по идентификаторам.
	ТаблицаДанныеДокументов = ПолучитьДанныеДляФормированияДокументов(ОбщиеДанные, ТаблицаЭлементов);
	ТаблицаДанныеДокументов.Индексы.Добавить("Идентификатор, ИдентификаторВерсии");
	СтруктураПоиска = Новый Структура("Идентификатор, ИдентификаторВерсии");
	
	Для Каждого СтрокаТЧ Из ТаблицаЭлементов Цикл
		
		// Если объект был синхронизирован ранее, пропустим его для обработки
		// и будем использовать только для анализа.
		Если СтрокаТЧ.СинхронизированРанее Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийСтатус = ИнтеграцияВЕТИСПовтИсп.СтатусВерсионногоОбъекта(СтрокаТЧ.ЭлементДанных.status);
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЧ); 
		МассивСтрокДанныеДокумента = ТаблицаДанныеДокументов.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрокДанныеДокумента.Количество() = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Загрузка измененных записей складского журнала ВетИС завершилась с ошибкой.
			                         |В базе данных не обнаружена запись с идентификатором %1'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, 
				СтрокаТЧ.Идентификатор);
			
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		СтрокаДанныеДокументов = МассивСтрокДанныеДокумента[0];
		
		Если ТекущийСтатус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.Создан Тогда
			
			Если СтрокаДанныеДокументов.ТипВСД = Перечисления.ТипыВетеринарныхДокументовВЕТИС.Производственный
				или НЕ СтрокаДанныеДокументов.Производители.Найти(ОбщиеДанные.Предприятие, "Производитель") = Неопределено Тогда
				
				// Запись создана в результате производственной операции.
				СформироватьДокумент_ПроизводственнаяОперацияВЕТИС(ОбщиеДанные, КСозданиюДокументов, СтрокаТЧ, СтрокаДанныеДокументов, ПараметрыОбмена);
				
			Иначе
				
				// Запись создана в результате инвентаризации (Операция - Добавление) или внесения бумажного документа.
				Операция = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Добавление;
				СформироватьДокумент_ИнвентаризацияПродукцииВЕТИС(ОбщиеДанные, КСозданиюДокументов, СтрокаТЧ, СтрокаДанныеДокументов, ПараметрыОбмена, Операция);
				
			КонецЕсли;
			
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.СозданВРезультатеПроизводственнойОперации Тогда
			
			// Запись создана в результате производственной операции.
			СформироватьДокумент_ПроизводственнаяОперацияВЕТИС(ОбщиеДанные, КСозданиюДокументов, СтрокаТЧ, СтрокаДанныеДокументов, ПараметрыОбмена);
			
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.СозданВРезультатеОперацииГашения
			Или ТекущийСтатус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.СозданВРезультатеОперацииГашенияИмпорт Тогда
			
			Если Не СтрокаДанныеДокументов.ТипВСД = Перечисления.ТипыВетеринарныхДокументовВЕТИС.Возвратный Тогда
				
				// Запись создана в результате гашения входящей ВСД.
				СформироватьДокумент_ВходящаяТранспортнаяОперацияВЕТИС(ОбщиеДанные, КСозданиюДокументов, СтрокаТЧ, СтрокаДанныеДокументов, ПараметрыОбмена, СтрокаРазделителиТО);
				
			КонецЕсли;
			
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.СозданВРезультатеОбъединения Тогда
			
			// Запись создана в результате объединения записей.
			СформироватьДокумент_ОбъединениеЗаписейСкладскогоЖурналаВЕТИС(ОбщиеДанные, КСозданиюДокументов, СтрокаТЧ, СтрокаДанныеДокументов, ПараметрыОбмена);
			
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.Изменен Тогда
			
			// Запись создана в результате инвентаризации (Операция - Изменение).
			Если СтрокаТЧ.ЭлементДанных.batch.volume = 0 Тогда
				// Изменение количества в 0 интерпретируем как удаление.
				Операция = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Удаление;
			Иначе
				Операция = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Изменение;
			КонецЕсли;
			СформироватьДокумент_ИнвентаризацияПродукцииВЕТИС(ОбщиеДанные, КСозданиюДокументов, СтрокаТЧ, СтрокаДанныеДокументов, ПараметрыОбмена, Операция);
			
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.ИзмененВРезультатеОперацииСписания Тогда
			
			Если ЗначениеЗаполнено(СтрокаДанныеДокументов.ВетеринарноСопроводительныйДокумент) Тогда
				
				Если Не СтрокаДанныеДокументов.ТипВСД = Перечисления.ТипыВетеринарныхДокументовВЕТИС.Возвратный Тогда
					
					// Запись создана в результате исходящей транзакции.
					СформироватьДокумент_ИсходящаяТранспортнаяОперацияВЕТИС(ОбщиеДанные, КСозданиюДокументов, СтрокаТЧ, СтрокаДанныеДокументов, ПараметрыОбмена, СтрокаРазделителиТО);
					
				КонецЕсли;
				
			Иначе
				
				// Запись создана в результате инвентаризации (Операция - Удаление)
				// или производственной операции - Списание сырья.
				Операция = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Удаление;
				СформироватьДокумент_ИнвентаризацияПродукцииВЕТИС(ОбщиеДанные, КСозданиюДокументов, СтрокаТЧ, СтрокаДанныеДокументов, ПараметрыОбмена ,Операция);
				
			КонецЕсли;
			
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеОбъединения Тогда
			
			// Запись создана в результате объединения записей.
			СформироватьДокумент_ОбъединениеЗаписейСкладскогоЖурналаВЕТИС(ОбщиеДанные, КСозданиюДокументов, СтрокаТЧ, СтрокаДанныеДокументов, ПараметрыОбмена);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КСозданиюДокументов.ПроизводственнаяОперацияВЕТИС <> Неопределено Тогда
		
		ПровестиЗаписатьДокумент(КСозданиюДокументов.ПроизводственнаяОперацияВЕТИС);
		
		ДальнейшиеДействия = Новый Массив;
		ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПодтвердитеКорректностьДокументаСозданногоЧерезWeb);
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
			Перечисления.СтатусыОбработкиПроизводственныхОперацийВЕТИС.ВСДОформленыЧерезWeb,
			ДальнейшиеДействия);
		
		РегистрыСведений.СтатусыДокументовВЕТИС.ЗаписатьСтатус(КСозданиюДокументов.ПроизводственнаяОперацияВЕТИС.Ссылка, ПараметрыОбновления);
		
		ИзмененныеОбъекты.Добавить(КСозданиюДокументов.ПроизводственнаяОперацияВЕТИС.Ссылка);
		
	КонецЕсли;
	
	Если КСозданиюДокументов.ИнвентаризацияПродукцииВЕТИС <> Неопределено Тогда
		
		ПровестиЗаписатьДокумент(КСозданиюДокументов.ИнвентаризацияПродукцииВЕТИС);
		
		ДальнейшиеДействия = Новый Массив;
		ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПодтвердитеКорректностьДокументаСозданногоЧерезWeb);
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
			Перечисления.СтатусыОбработкиИнвентаризацийТоваровВЕТИС.ВыполненЧерезWeb,
			ДальнейшиеДействия);
		
		РегистрыСведений.СтатусыДокументовВЕТИС.ЗаписатьСтатус(КСозданиюДокументов.ИнвентаризацияПродукцииВЕТИС.Ссылка, ПараметрыОбновления);
		
		ИзмененныеОбъекты.Добавить(КСозданиюДокументов.ИнвентаризацияПродукцииВЕТИС.Ссылка);
		
	КонецЕсли;
	
	Для Каждого Соответствие из КСозданиюДокументов.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС Цикл
		ИзмененныеОбъекты.Добавить(Соответствие.Значение.Ссылка);
	КонецЦикла;
	
	Для Каждого СтрокаВТО из КСозданиюДокументов.ВходящаяТранспортнаяОперацияВЕТИС Цикл
		ИзмененныеОбъекты.Добавить(СтрокаВТО.Ссылка);
	КонецЦикла;
	
	Для Каждого СтрокаИТО из КСозданиюДокументов.ИсходящаяТранспортнаяОперацияВЕТИС Цикл
		ИзмененныеОбъекты.Добавить(СтрокаИТО.Ссылка);
	КонецЦикла;
	
	ЗарегистрироватьСинхронизациюОбъектов(ТаблицаЭлементов, Перечисления.ТипыВЕТИС.ЗаписиСкладскогоЖурнала);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РегламентныеЗадания

// Процедура запуска регламентного задания ОбменДаннымиВЕТИС.
//
Процедура ОбменДаннымиРегламентноеЗадание() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаПолучениеДанныхВЕТИС);
	
	ПараметрыОбмена = ИнтеграцияВЕТИС.ПараметрыОбмена(Неопределено, Неопределено, Истина);
	ПараметрыОбмена.ОжидатьНаСервере = Не ОбщегоНазначения.РазделениеВключено();
	
	ИнтеграцияВЕТИС.ПостроитьОчередьСообщений(ПараметрыОбмена);
	
	ИнтеграцияВЕТИСВызовСервера.ВыполнитьОбменУниверсально(ПараметрыОбмена);
	
	ИнтеграцияВЕТИСВызовСервера.ВыполнитьСинхронизациюКлассификаторов(
		Неопределено,
		Неопределено,
		ПараметрыОбмена);
	
КонецПроцедуры

#КонецОбласти

// Позволяет определить есть ли в табличной части документа строки с одинаковыми
// значениями заданных реквизитов (всех одновременно).
// При нахождении дублей формирует сообщения пользователю.
//
// Параметры
//  Объект            - Объект ссылочного типа
//  ИмяТабличнойЧасти - Имя табличной части, в которой нужно искать дубли
//  ПоляПроверки      - Структура с перечнем реквизитов, по которым нужно искать дубли.
//                      Ключ структуры - имя реквизита, значение - признак необходимости
//                      поиска дублей в том числе по пустым значениям. Истина - искать
//                      дубли по пустым значениям реквизита, любое другое значение - 
//                      игнорировать строки, в которых реквизит не заполнен
//  Отказ             - Признак отказа от дальнейшей обработки. В случае нахождения дублей
//                      выставляется в Истина.
//
// Возвращаемое значение:
//   Булево - Истина - ошибок (дублей) не обнаружено, Ложь - в противном случае.
//
Функция ПроверитьОтсутствиеДублейВТабличнойЧасти(Объект, ИмяТабличнойЧасти, ПоляПроверки, Отказ) Экспорт
	
	СтруктураОтбора = Новый Структура;
	
	ПоляПроверкиСтрокой = "";
	Для Каждого КлючИЗначение Из ПоляПроверки Цикл
		ПоляПроверкиСтрокой = ПоляПроверкиСтрокой + ", " + КлючИЗначение.Ключ;
		СтруктураОтбора.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ПоляПроверкиСтрокой = Сред(ПоляПроверкиСтрокой, 3);
	
	НаборыЗначений = Объект[ИмяТабличнойЧасти].Выгрузить(, ПоляПроверкиСтрокой);
	НаборыЗначений.Колонки.Добавить("__КоличествоВхождений", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	НаборыЗначений.ЗаполнитьЗначения(1, "__КоличествоВхождений");
	НаборыЗначений.Свернуть(ПоляПроверкиСтрокой, "__КоличествоВхождений");
	
	НайденыДубли = Ложь;
	
	Если ПоляПроверки.Количество() > 1 Тогда
		ШаблонСообщенияОбОшибке = НСтр("ru = 'Значения %1 повторяются в строках %2.'");
	Иначе
		ШаблонСообщенияОбОшибке = НСтр("ru = 'Значение %1 повторяется в строках %2.'");
	КонецЕсли;
	ТекстСообщения = "";
	
	Если НаборыЗначений.Количество() <> Объект[ИмяТабличнойЧасти].Количество() Тогда
		// Есть дубли
		Для Каждого НаборЗначений Из НаборыЗначений Цикл
			Если НаборЗначений.__КоличествоВхождений = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначенияСтрокой = "";
			
			ПропуститьНаборЗначений = Ложь;
			Для Каждого КлючИЗначение Из ПоляПроверки Цикл
				Если КлючИЗначение.Значение <> Истина Тогда
					Если НЕ ЗначениеЗаполнено(НаборЗначений[КлючИЗначение.Ключ]) Тогда
						ПропуститьНаборЗначений = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
				ЗначенияСтрокой = ЗначенияСтрокой + ", """ + НаборЗначений[КлючИЗначение.Ключ] + """";
			КонецЦикла;
			Если ПропуститьНаборЗначений Тогда
				Продолжить;
			КонецЕсли;
			
			НайденыДубли = Истина;
			
			ЗначенияСтрокой = Сред(ЗначенияСтрокой, 3);
			
			НомераСтрок = "";
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, НаборЗначений);
			СтрокиДубли = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаДубль Из СтрокиДубли Цикл
				НомераСтрок = НомераСтрок + ", " + Формат(СтрокаДубль.НомерСтроки, "ЧГ=");
			КонецЦикла;
			НомераСтрок = Сред(НомераСтрок, 3);
			
			ТекстСообщения = ТекстСообщения + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщенияОбОшибке, ЗначенияСтрокой, НомераСтрок);
		КонецЦикла;
	КонецЕсли;
	
	Если НайденыДубли Тогда
		ПредставленияРеквизитов = "";
		МетаданныеТабличнойЧасти = Объект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти];
		Для Каждого КлючИЗначение Из ПоляПроверки Цикл
			ПредставленияРеквизитов = ПредставленияРеквизитов + ", """
				+ МетаданныеТабличнойЧасти.Реквизиты[КлючИЗначение.Ключ].Представление() + """";
		КонецЦикла;
		ПредставленияРеквизитов = Сред(ПредставленияРеквизитов, 3);
		
		Если ПоляПроверки.Количество() > 1 Тогда
			ШаблонСообщения = НСтр("ru = 'Значения в колонках %1 не должны повторяться.'");
		Иначе
			ШаблонСообщения = НСтр("ru = 'Значения в колонке %1 не должны повторяться.'");
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПредставленияРеквизитов)
			+ ТекстСообщения;
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("СПИСОК", "КОРРЕКТНОСТЬ", , ,
			МетаданныеТабличнойЧасти.Представление(), ТекстСообщения);
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ИмяТабличнойЧасти);
		
		Отказ = Истина;
	КонецЕсли;
	
	Возврат НЕ НайденыДубли;
	
КонецФункции // ПроверитьОтсутствиеДублейВТабличнойЧасти()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеДокументов

Функция ПолучитьДанныеДляФормированияДокументов(ОбщиеДанные, ТаблицаЭлементов)
	
	ПереченьКолонок = "Идентификатор, ИдентификаторВерсии, ИдентификаторВСД, ИдентификаторЕдиницыИзмерения, КоличествоВЕТИС, Статус";
	Таблица = ТаблицаЭлементов.Скопировать(,ПереченьКолонок);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаИзменения", ОбщиеДанные.Дата);
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.Идентификатор КАК Идентификатор,
	|	Т.ИдентификаторВерсии КАК ИдентификаторВерсии,
	|	Т.ИдентификаторВСД КАК ИдентификаторВСД,
	|	Т.ИдентификаторЕдиницыИзмерения КАК ИдентификаторЕдиницыИзмерения,
	|	Т.КоличествоВЕТИС КАК КоличествоВЕТИС,
	|	Т.Статус КАК Статус
	|ПОМЕСТИТЬ ВтТаблицаИдентификаторов
	|ИЗ
	|	&Таблица КАК Т
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТаблицаИдентификаторов.Идентификатор КАК Идентификатор,
	|	ВтТаблицаИдентификаторов.ИдентификаторВерсии КАК ИдентификаторВерсии,
	|	ВтТаблицаИдентификаторов.ИдентификаторВСД КАК ИдентификаторВСД,
	|	ВтТаблицаИдентификаторов.ИдентификаторЕдиницыИзмерения КАК ИдентификаторЕдиницыИзмерения,
	|	ВтТаблицаИдентификаторов.КоличествоВЕТИС КАК КоличествоВЕТИС,
	|	ЗаписиСкладскогоЖурналаВЕТИС.Ссылка КАК ЗаписьСкладскогоЖурнала,
	|	ЕСТЬNULL(ВетеринарноСопроводительныйДокументВЕТИСИсторияСтатусов.Ссылка, ЗНАЧЕНИЕ(Справочник.ВетеринарноСопроводительныйДокументВЕТИС.ПустаяСсылка)) КАК ВетеринарноСопроводительныйДокументВЕТИС,
	|	ЗаписиСкладскогоЖурналаВЕТИС.Продукция КАК Продукция
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	ВтТаблицаИдентификаторов КАК ВтТаблицаИдентификаторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗаписиСкладскогоЖурналаВЕТИС КАК ЗаписиСкладскогоЖурналаВЕТИС
	|		ПО ВтТаблицаИдентификаторов.Идентификатор = ЗаписиСкладскогоЖурналаВЕТИС.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВетеринарноСопроводительныйДокументВЕТИС.ИсторияСтатусов КАК ВетеринарноСопроводительныйДокументВЕТИСИсторияСтатусов
	|		ПО (ВетеринарноСопроводительныйДокументВЕТИСИсторияСтатусов.ДатаИзменения = &ДатаИзменения)
	|			И ВтТаблицаИдентификаторов.КоличествоВЕТИС = ВетеринарноСопроводительныйДокументВЕТИСИсторияСтатусов.Ссылка.КоличествоВЕТИС
	|			И ВтТаблицаИдентификаторов.ИдентификаторЕдиницыИзмерения = ВетеринарноСопроводительныйДокументВЕТИСИсторияСтатусов.Ссылка.ЕдиницаИзмеренияВЕТИС.Идентификатор
	|			И (ЗаписиСкладскогоЖурналаВЕТИС.Продукция = ВетеринарноСопроводительныйДокументВЕТИСИсторияСтатусов.Ссылка.Продукция)
	|			И (ЗаписиСкладскогоЖурналаВЕТИС.СкоропортящаясяПродукция = ВетеринарноСопроводительныйДокументВЕТИСИсторияСтатусов.Ссылка.СкоропортящаясяПродукция)
	|			И (ЗаписиСкладскогоЖурналаВЕТИС.НизкокачественнаяПродукция = ВетеринарноСопроводительныйДокументВЕТИСИсторияСтатусов.Ссылка.НизкокачественнаяПродукция)
	|			И (ЗаписиСкладскогоЖурналаВЕТИС.ДатаПроизводстваНачалоПериода = ВетеринарноСопроводительныйДокументВЕТИСИсторияСтатусов.Ссылка.ДатаПроизводстваНачалоПериода)
	|			И (ЗаписиСкладскогоЖурналаВЕТИС.ДатаПроизводстваКонецПериода = ВетеринарноСопроводительныйДокументВЕТИСИсторияСтатусов.Ссылка.ДатаПроизводстваКонецПериода)
	|			И (ЗаписиСкладскогоЖурналаВЕТИС.СрокГодностиНачалоПериода = ВетеринарноСопроводительныйДокументВЕТИСИсторияСтатусов.Ссылка.СрокГодностиНачалоПериода)
	|			И (ЗаписиСкладскогоЖурналаВЕТИС.СрокГодностиКонецПериода = ВетеринарноСопроводительныйДокументВЕТИСИсторияСтатусов.Ссылка.СрокГодностиКонецПериода)
	|			И (ЗаписиСкладскогоЖурналаВЕТИС.ХозяйствующийСубъект = ВетеринарноСопроводительныйДокументВЕТИСИсторияСтатусов.Ссылка.ГрузоотправительХозяйствующийСубъект)
	|			И (ЗаписиСкладскогоЖурналаВЕТИС.Предприятие = ВетеринарноСопроводительныйДокументВЕТИСИсторияСтатусов.Ссылка.ГрузоотправительПредприятие)
	|			И (ЗаписиСкладскогоЖурналаВЕТИС.Предприятие = ВетеринарноСопроводительныйДокументВЕТИСИсторияСтатусов.Ссылка.ГрузоотправительПредприятие)
	|			И (ВЫБОР
	|				КОГДА ВтТаблицаИдентификаторов.Статус = 202
	|					ТОГДА ВетеринарноСопроводительныйДокументВЕТИСИсторияСтатусов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВетеринарныхДокументовВЕТИС.Оформлен)
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|ГДЕ
	|	ВтТаблицаИдентификаторов.ИдентификаторВСД = """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтТаблицаИдентификаторов.Идентификатор,
	|	ВтТаблицаИдентификаторов.ИдентификаторВерсии,
	|	ВтТаблицаИдентификаторов.ИдентификаторВСД,
	|	ВтТаблицаИдентификаторов.ИдентификаторЕдиницыИзмерения,
	|	ВтТаблицаИдентификаторов.КоличествоВЕТИС,
	|	ЗаписиСкладскогоЖурналаВЕТИС.Ссылка,
	|	ЕСТЬNULL(ВетеринарноСопроводительныйДокументВЕТИС.Ссылка, ЗНАЧЕНИЕ(Справочник.ВетеринарноСопроводительныйДокументВЕТИС.ПустаяСсылка)),
	|	ЗаписиСкладскогоЖурналаВЕТИС.Продукция
	|ИЗ
	|	ВтТаблицаИдентификаторов КАК ВтТаблицаИдентификаторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗаписиСкладскогоЖурналаВЕТИС КАК ЗаписиСкладскогоЖурналаВЕТИС
	|		ПО ВтТаблицаИдентификаторов.Идентификатор = ЗаписиСкладскогоЖурналаВЕТИС.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВетеринарноСопроводительныйДокументВЕТИС КАК ВетеринарноСопроводительныйДокументВЕТИС
	|		ПО ВтТаблицаИдентификаторов.ИдентификаторВСД = ВетеринарноСопроводительныйДокументВЕТИС.Идентификатор
	|ГДЕ
	|	НЕ ВтТаблицаИдентификаторов.ИдентификаторВСД = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтТаблицаИдентификаторов";
	
	ДополнитьЗапросСопоставлениемТоваров(Запрос);
	
	Запрос.Текст = Запрос.Текст +
	"
	|
	|;
	|ВЫБРАТЬ
	|	втТовары.Идентификатор КАК Идентификатор,
	|	втТовары.ИдентификаторВерсии КАК ИдентификаторВерсии,
	|	втТовары.ИдентификаторВСД КАК ИдентификаторВСД,
	|	втТовары.ИдентификаторЕдиницыИзмерения КАК ИдентификаторЕдиницыИзмерения,
	|	втТовары.КоличествоВЕТИС КАК КоличествоВЕТИС,
	|	втТовары.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	втТовары.ВетеринарноСопроводительныйДокументВЕТИС КАК ВетеринарноСопроводительныйДокумент,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.ПеревозчикХозяйствующийСубъект КАК ПеревозчикХозяйствующийСубъект,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.СпособХранения КАК СпособХранения,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.ДатаТТН КАК ДатаТТН,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.НомерТТН КАК НомерТТН,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.СерияТТН КАК СерияТТН,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.ТипТТН КАК ТипТТН,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.ГрузоотправительХозяйствующийСубъект КАК ГрузоотправительХозяйствующийСубъект,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.ГрузоотправительПредприятие КАК ГрузоотправительПредприятие,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.ГрузополучательХозяйствующийСубъект КАК ГрузополучательХозяйствующийСубъект,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.ГрузополучательПредприятие КАК ГрузополучательПредприятие,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.Тип КАК ТипВСД,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.ЕдиницаИзмеренияВЕТИС КАК ЕдиницаИзмеренияВЕТИС,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.ЭкспертизаРезультат КАК ЭкспертизаРезультат,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.БлагополучиеМестности КАК БлагополучиеМестности,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.Цель КАК Цель,
	|	ВетеринарноСопроводительныеДокументыВЕТИС.ТипПроисхождения КАК ТипПроисхождения,
	|	втНоменклатураСопоставленная.Номенклатура КАК Номенклатура,
	|	втНоменклатураСопоставленная.Характеристика КАК Характеристика,
	|	втНоменклатураСопоставленная.Серия КАК Серия,
	|	втТовары.Продукция КАК Продукция,
	|	ЗаписиСкладскогоЖурналаВЕТИС.СтранаПроизводства КАК СтранаПроизводства,
	|	ЗаписиСкладскогоЖурналаВЕТИС.СкоропортящаясяПродукция КАК СкоропортящаясяПродукция,
	|	ЗаписиСкладскогоЖурналаВЕТИС.НизкокачественнаяПродукция КАК НизкокачественнаяПродукция,
	|	ЗаписиСкладскогоЖурналаВЕТИС.ДатаПроизводстваСтрока КАК ДатаПроизводстваСтрока,
	|	ЗаписиСкладскогоЖурналаВЕТИС.ДатаПроизводстваТочностьЗаполнения КАК ДатаПроизводстваТочностьЗаполнения,
	|	ЗаписиСкладскогоЖурналаВЕТИС.ДатаПроизводстваНачалоПериода КАК ДатаПроизводстваНачалоПериода,
	|	ЗаписиСкладскогоЖурналаВЕТИС.ДатаПроизводстваКонецПериода КАК ДатаПроизводстваКонецПериода,
	|	ЗаписиСкладскогоЖурналаВЕТИС.СрокГодностиСтрока КАК СрокГодностиСтрока,
	|	ЗаписиСкладскогоЖурналаВЕТИС.СрокГодностиТочностьЗаполнения КАК СрокГодностиТочностьЗаполнения,
	|	ЗаписиСкладскогоЖурналаВЕТИС.СрокГодностиНачалоПериода КАК СрокГодностиНачалоПериода,
	|	ЗаписиСкладскогоЖурналаВЕТИС.СрокГодностиКонецПериода КАК СрокГодностиКонецПериода,
	|	ЗаписиСкладскогоЖурналаВЕТИС.УпаковкиВЕТИС.(
	|		ИдентификаторСтроки КАК ИдентификаторСтроки,
	|		УровеньУпаковки КАК УровеньУпаковки,
	|		УпаковкаВЕТИС КАК УпаковкаВЕТИС,
	|		КоличествоУпаковокВЕТИС КАК КоличествоУпаковокВЕТИС
	|	) КАК УпаковкиВЕТИС,
	|	ЗаписиСкладскогоЖурналаВЕТИС.ШтрихкодыУпаковок.(
	|		ИдентификаторСтроки КАК ИдентификаторСтроки,
	|		Штрихкод КАК Штрихкод,
	|		ТипМаркировки КАК ТипМаркировки
	|	) КАК ШтрихкодыУпаковок,
	|	ЗаписиСкладскогоЖурналаВЕТИС.Производители.(
	|		Производитель КАК Производитель
	|	) КАК Производители,
	|	ЗаписиСкладскогоЖурналаВЕТИС.ПроизводственныеПартии.(
	|		ИдентификаторПартии КАК ИдентификаторПартии
	|	) КАК ПроизводственныеПартии
	|ИЗ
	|	втТовары КАК втТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатураСопоставленная КАК втНоменклатураСопоставленная
	|		ПО втТовары.ЗаписьСкладскогоЖурнала = втНоменклатураСопоставленная.ЗаписьСкладскогоЖурнала
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗаписиСкладскогоЖурналаВЕТИС КАК ЗаписиСкладскогоЖурналаВЕТИС
	|		ПО втТовары.ЗаписьСкладскогоЖурнала = ЗаписиСкладскогоЖурналаВЕТИС.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВетеринарноСопроводительныйДокументВЕТИС КАК ВетеринарноСопроводительныеДокументыВЕТИС
	|		ПО втТовары.ВетеринарноСопроводительныйДокументВЕТИС = ВетеринарноСопроводительныеДокументыВЕТИС.Ссылка
	|ГДЕ
	|	НЕ втТовары.ВетеринарноСопроводительныйДокументВЕТИС = ЗНАЧЕНИЕ(Справочник.ВетеринарноСопроводительныйДокументВЕТИС.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втТовары.Идентификатор,
	|	втТовары.ИдентификаторВерсии,
	|	втТовары.ИдентификаторВСД,
	|	втТовары.ИдентификаторЕдиницыИзмерения,
	|	втТовары.КоличествоВЕТИС,
	|	втТовары.ЗаписьСкладскогоЖурнала,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	втНоменклатураСопоставленная.Номенклатура,
	|	втНоменклатураСопоставленная.Характеристика,
	|	втНоменклатураСопоставленная.Серия,
	|	втТовары.Продукция,
	|	ЗаписиСкладскогоЖурналаВЕТИС.СтранаПроизводства,
	|	ЗаписиСкладскогоЖурналаВЕТИС.СкоропортящаясяПродукция,
	|	ЗаписиСкладскогоЖурналаВЕТИС.НизкокачественнаяПродукция,
	|	ЗаписиСкладскогоЖурналаВЕТИС.ДатаПроизводстваСтрока,
	|	ЗаписиСкладскогоЖурналаВЕТИС.ДатаПроизводстваТочностьЗаполнения,
	|	ЗаписиСкладскогоЖурналаВЕТИС.ДатаПроизводстваНачалоПериода,
	|	ЗаписиСкладскогоЖурналаВЕТИС.ДатаПроизводстваКонецПериода,
	|	ЗаписиСкладскогоЖурналаВЕТИС.СрокГодностиСтрока,
	|	ЗаписиСкладскогоЖурналаВЕТИС.СрокГодностиТочностьЗаполнения,
	|	ЗаписиСкладскогоЖурналаВЕТИС.СрокГодностиНачалоПериода,
	|	ЗаписиСкладскогоЖурналаВЕТИС.СрокГодностиКонецПериода,
	|	ЗаписиСкладскогоЖурналаВЕТИС.УпаковкиВЕТИС.(
	|		ИдентификаторСтроки,
	|		УровеньУпаковки,
	|		УпаковкаВЕТИС,
	|		КоличествоУпаковокВЕТИС
	|	),
	|	ЗаписиСкладскогоЖурналаВЕТИС.ШтрихкодыУпаковок.(
	|		ИдентификаторСтроки,
	|		Штрихкод,
	|		ТипМаркировки
	|	),
	|	ЗаписиСкладскогоЖурналаВЕТИС.Производители.(
	|		Производитель
	|	),
	|	ЗаписиСкладскогоЖурналаВЕТИС.ПроизводственныеПартии.(
	|		ИдентификаторПартии
	|	)
	|ИЗ
	|	втТовары КАК втТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатураСопоставленная КАК втНоменклатураСопоставленная
	|		ПО втТовары.ЗаписьСкладскогоЖурнала = втНоменклатураСопоставленная.ЗаписьСкладскогоЖурнала
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗаписиСкладскогоЖурналаВЕТИС КАК ЗаписиСкладскогоЖурналаВЕТИС
	|		ПО втТовары.ЗаписьСкладскогоЖурнала = ЗаписиСкладскогоЖурналаВЕТИС.Ссылка
	|ГДЕ
	|	втТовары.ВетеринарноСопроводительныйДокументВЕТИС = ЗНАЧЕНИЕ(Справочник.ВетеринарноСопроводительныйДокументВЕТИС.ПустаяСсылка)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Добавляет в запрос формирование временной таблицы "втНоменклатураСопоставленная".
//
// Параметры:
//  Запрос - формируемый запрос, в котором ранее определяется таблица "втТовары",
//    для которой будут соспоставлены товары (должна содержать колонки "ЗаписьСкладскогоЖурнала", "Продукция")
//
Процедура ДополнитьЗапросСопоставлениемТоваров(Запрос)
	
	Запрос.УстановитьПараметр("ПустаяСерия", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа(Метаданные.ОпределяемыеТипы.СерияНоменклатурыВЕТИС.Имя));
	Запрос.Текст = Запрос.Текст + 
	"
	|
	|;
	|ВЫБРАТЬ
	|	втТовары.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	МАКСИМУМ(СоответствиеНоменклатурыВЕТИС.Номенклатура) КАК Номенклатура,
	|	МАКСИМУМ(СоответствиеНоменклатурыВЕТИС.Характеристика) КАК Характеристика,
	|	МАКСИМУМ(СоответствиеНоменклатурыВЕТИС.Серия) КАК Серия
	|ПОМЕСТИТЬ втНоменклатураСопоставленнаяПоЗаписи
	|ИЗ
	|	втТовары КАК втТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС
	|		ПО втТовары.ЗаписьСкладскогоЖурнала = СоответствиеНоменклатурыВЕТИС.ЗаписьСкладскогоЖурнала
	|
	|СГРУППИРОВАТЬ ПО
	|	втТовары.ЗаписьСкладскогоЖурнала
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(СоответствиеНоменклатурыВЕТИС.ЗаписьСкладскогоЖурнала) = 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаписьСкладскогоЖурнала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТовары.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	СоответствиеНоменклатурыВЕТИС.Номенклатура КАК Номенклатура,
	|	СоответствиеНоменклатурыВЕТИС.Характеристика КАК Характеристика,
	|	СоответствиеНоменклатурыВЕТИС.Серия КАК Серия
	|ПОМЕСТИТЬ втНоменклатураСопоставленнаяПоПродукции
	|ИЗ
	|	втТовары КАК втТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатураСопоставленнаяПоЗаписи КАК втНоменклатураСопоставленнаяПоЗаписи
	|		ПО втТовары.ЗаписьСкладскогоЖурнала = втНоменклатураСопоставленнаяПоЗаписи.ЗаписьСкладскогоЖурнала
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС
	|		ПО втТовары.Продукция = СоответствиеНоменклатурыВЕТИС.Продукция
	|ГДЕ
	|	втНоменклатураСопоставленнаяПоЗаписи.ЗаписьСкладскогоЖурнала ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаписьСкладскогоЖурнала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатураСопоставленнаяПоПродукции.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втНоменклатураСопоставленнаяПоПродукции.Номенклатура) КАК НоменклатураКоличество,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втНоменклатураСопоставленнаяПоПродукции.Характеристика) КАК ХарактеристикаКоличество,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втНоменклатураСопоставленнаяПоПродукции.Серия) КАК СерияКоличество
	|ПОМЕСТИТЬ втНоменклатураСопоставленнаяПоПродукцииКоличество
	|ИЗ
	|	втНоменклатураСопоставленнаяПоПродукции КАК втНоменклатураСопоставленнаяПоПродукции
	|
	|СГРУППИРОВАТЬ ПО
	|	втНоменклатураСопоставленнаяПоПродукции.ЗаписьСкладскогоЖурнала
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаписьСкладскогоЖурнала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатураСопоставленнаяПоЗаписи.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	втНоменклатураСопоставленнаяПоЗаписи.Номенклатура КАК Номенклатура,
	|	втНоменклатураСопоставленнаяПоЗаписи.Характеристика КАК Характеристика,
	|	втНоменклатураСопоставленнаяПоЗаписи.Серия КАК Серия
	|ПОМЕСТИТЬ втНоменклатураСопоставленная
	|ИЗ
	|	втНоменклатураСопоставленнаяПоЗаписи КАК втНоменклатураСопоставленнаяПоЗаписи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втНоменклатураСопоставленнаяПоПродукции.ЗаписьСкладскогоЖурнала,
	|	втНоменклатураСопоставленнаяПоПродукции.Номенклатура,
	|	втНоменклатураСопоставленнаяПоПродукции.Характеристика,
	|	ВЫБОР
	|		КОГДА втНоменклатураСопоставленнаяПоПродукцииКоличество.СерияКоличество < 2
	|			ТОГДА втНоменклатураСопоставленнаяПоПродукции.Серия
	|		ИНАЧЕ &ПустаяСерия
	|	КОНЕЦ
	|ИЗ
	|	втНоменклатураСопоставленнаяПоПродукции КАК втНоменклатураСопоставленнаяПоПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатураСопоставленнаяПоПродукцииКоличество КАК втНоменклатураСопоставленнаяПоПродукцииКоличество
	|		ПО втНоменклатураСопоставленнаяПоПродукции.ЗаписьСкладскогоЖурнала = втНоменклатураСопоставленнаяПоПродукцииКоличество.ЗаписьСкладскогоЖурнала
	|ГДЕ
	|	втНоменклатураСопоставленнаяПоПродукцииКоличество.НоменклатураКоличество = 1
	|	И втНоменклатураСопоставленнаяПоПродукцииКоличество.ХарактеристикаКоличество < 2
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаписьСкладскогоЖурнала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втНоменклатураСопоставленнаяПоЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втНоменклатураСопоставленнаяПоПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втНоменклатураСопоставленнаяПоПродукцииКоличество";
	
КонецПроцедуры

Процедура СформироватьДокумент_ИнвентаризацияПродукцииВЕТИС(ОбщиеДанные, КСозданиюДокументов, СтрокаТаблицыЭлементов, СтрокаДанныеДокументов, ПараметрыОбмена, Операция)
	
	ЭлементДанных = СтрокаТаблицыЭлементов.ЭлементДанных;
	
	Если КСозданиюДокументов.ИнвентаризацияПродукцииВЕТИС = Неопределено Тогда
		// Создадим новый документ
		ДокументОбъект = Документы.ИнвентаризацияПродукцииВЕТИС.СоздатьДокумент();
		ДокументОбъект.Заполнить(Неопределено);
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ОбщиеДанные);
		КСозданиюДокументов.ИнвентаризацияПродукцииВЕТИС = ДокументОбъект;
		
		ПредставленияСопоставлений = ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(
			ДокументОбъект.ХозяйствующийСубъект, ДокументОбъект.Предприятие);
			
		ДокументОбъект.ТорговыйОбъект = ПредставленияСопоставлений.ТорговыйОбъект.Ссылка;
	Иначе
		// Получим существующий
		ДокументОбъект = КСозданиюДокументов.ИнвентаризацияПродукцииВЕТИС;
	КонецЕсли;
	
	// Товары
	ТоварыСтрокаТЧ = ДокументОбъект.Товары.Добавить();
	ТоварыСтрокаТЧ.Операция            = Операция;
	ТоварыСтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
	ЗаполнитьЗначенияСвойств(ТоварыСтрокаТЧ, СтрокаДанныеДокументов);
	
	Если ЗначениеЗаполнено(СтрокаТаблицыЭлементов.ЭлементДанныхПредыдущий) Тогда
		ТоварыСтрокаТЧ.КоличествоИзменениеВЕТИС = ЭлементДанных.batch.volume - СтрокаТаблицыЭлементов.ЭлементДанныхПредыдущий.batch.volume;
	Иначе
		ТоварыСтрокаТЧ.КоличествоИзменениеВЕТИС = ЭлементДанных.batch.volume;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТоварыСтрокаТЧ.ЕдиницаИзмеренияВЕТИС) Тогда
		ТоварыСтрокаТЧ.ЕдиницаИзмеренияВЕТИС = ИнтеграцияВЕТИС.ЕдиницаИзмерения(СтрокаТаблицыЭлементов.ИдентификаторЕдиницыИзмерения, ПараметрыОбмена);
	КонецЕсли;
	
	ИнтеграцияВЕТИСПереопределяемый.ЗаполнитьКоличествоНоменклатурыПоКоличествуВЕТИС(ТоварыСтрокаТЧ, "Изменение");
	
	// Для операций "Изменение" создадим архивные версии
	// записей журнала и поместим их в поле табличной части.
	Если Операция = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Изменение
		И Значениезаполнено(СтрокаТаблицыЭлементов.ЭлементДанныхПредыдущий) Тогда
		
		// Попробуем найти архивную запись по идентификатору версии
		// и актуальной записи.
		АрхивнаяЗапись = ИнтеграцияВЕТИС.АрхивнаяЗаписьСкладскогоЖурнала(
			ТоварыСтрокаТЧ.ЗаписьСкладскогоЖурнала,
			СтрокаТаблицыЭлементов.ЭлементДанныхПредыдущий.uuid);
		
		ДополнительныеПараметры = ИнтеграцияВЕТИС.ДополнительныеПараметрыЗагрузкиЗаписиСкладскогоЖурнала();
		ДополнительныеПараметры.РегистрироватьСинхронизацию       = Ложь;
		ДополнительныеПараметры.АктуальнаяЗаписьСкладскогоЖурнала = ТоварыСтрокаТЧ.ЗаписьСкладскогоЖурнала;
		ДополнительныеПараметры.ПроверятьАктуальностьЗаписи       = Не ЗначениеЗаполнено(ТоварыСтрокаТЧ.ЗаписьСкладскогоЖурнала);
		
		ДанныеЗаписиСкладскогоЖурналаАрхив = ИнтеграцияВЕТИС.ЗагрузитьЗаписьСкладскогоЖурнала(
			СтрокаТаблицыЭлементов.ЭлементДанныхПредыдущий,
			АрхивнаяЗапись,
			ОбщиеДанные.ХозяйствующийСубъект,
			ОбщиеДанные.Предприятие,
			ПараметрыОбмена, ДополнительныеПараметры);
		
		ТоварыСтрокаТЧ.ЗаписьСкладскогоЖурналаАрхив = ДанныеЗаписиСкладскогоЖурналаАрхив.Ссылка;
	КонецЕсли;
	
	// Производственные партии
	Для Каждого Стр Из СтрокаДанныеДокументов.ПроизводственныеПартии Цикл
		ПроизводственныеПартииСтрокаТЧ = ДокументОбъект.ПроизводственныеПартии.Добавить();
		ПроизводственныеПартииСтрокаТЧ.ИдентификаторСтрокиТовары = ТоварыСтрокаТЧ.ИдентификаторСтроки;
		ЗаполнитьЗначенияСвойств(ПроизводственныеПартииСтрокаТЧ, Стр);
	КонецЦикла;
	
	// Производители
	Для Каждого Стр Из СтрокаДанныеДокументов.Производители Цикл
		ПроизводителиСтрокаТЧ = ДокументОбъект.Производители.Добавить();
		ПроизводителиСтрокаТЧ.ИдентификаторСтрокиТовары = ТоварыСтрокаТЧ.ИдентификаторСтроки;
		ЗаполнитьЗначенияСвойств(ПроизводителиСтрокаТЧ, Стр);
	КонецЦикла;
	
	// УпаковкиВЕТИС
	Для Каждого Стр Из СтрокаДанныеДокументов.УпаковкиВЕТИС Цикл
		УпаковкиСтрокаТЧ = ДокументОбъект.УпаковкиВЕТИС.Добавить();
		УпаковкиСтрокаТЧ.ИдентификаторСтрокиТовары = ТоварыСтрокаТЧ.ИдентификаторСтроки;
		ЗаполнитьЗначенияСвойств(УпаковкиСтрокаТЧ, Стр);
	КонецЦикла;
	
	// ШтрихкодыУпаковок
	Для Каждого Стр Из СтрокаДанныеДокументов.ШтрихкодыУпаковок Цикл
		ШтрихкодыУпаковокСтрокаТЧ = ДокументОбъект.ШтрихкодыУпаковок.Добавить();
		ЗаполнитьЗначенияСвойств(ШтрихкодыУпаковокСтрокаТЧ, Стр);
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДокумент_ПроизводственнаяОперацияВЕТИС(ОбщиеДанные, КСозданиюДокументов, СтрокаТаблицыЭлементов, СтрокаДанныеДокументов, ПараметрыОбмена)
	
	ЭлементДанных = СтрокаТаблицыЭлементов.ЭлементДанных;
	
	Если КСозданиюДокументов.ПроизводственнаяОперацияВЕТИС = Неопределено Тогда
		// Создадим новый документ.
		ДокументОбъект = Документы.ПроизводственнаяОперацияВЕТИС.СоздатьДокумент();
		ДокументОбъект.Заполнить(Неопределено);
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ОбщиеДанные);
		КСозданиюДокументов.ПроизводственнаяОперацияВЕТИС = ДокументОбъект;
		
		ПредставленияСопоставлений = ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(
			ДокументОбъект.ХозяйствующийСубъект, ДокументОбъект.Предприятие);
			
		ДокументОбъект.ТорговыйОбъект = ПредставленияСопоставлений.ТорговыйОбъект.Ссылка;
	Иначе
		// Получим существующий.
		ДокументОбъект = КСозданиюДокументов.ПроизводственнаяОперацияВЕТИС;
	КонецЕсли;
	
	ТоварыСтрокаТЧ = ДокументОбъект.Товары.Добавить();
	ТоварыСтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
	ЗаполнитьЗначенияСвойств(ТоварыСтрокаТЧ, СтрокаДанныеДокументов);
	
	Если Не ЗначениеЗаполнено(ТоварыСтрокаТЧ.ЕдиницаИзмеренияВЕТИС) Тогда
		ТоварыСтрокаТЧ.ЕдиницаИзмеренияВЕТИС = ИнтеграцияВЕТИС.ЕдиницаИзмерения(СтрокаТаблицыЭлементов.ИдентификаторЕдиницыИзмерения, ПараметрыОбмена);
	КонецЕсли;
	
	ИнтеграцияВЕТИСПереопределяемый.ЗаполнитьКоличествоНоменклатурыПоКоличествуВЕТИС(ТоварыСтрокаТЧ);
	
	// Производственные партии
	Если СтрокаДанныеДокументов.ПроизводственныеПартии.Количество() = 1 Тогда
		ТоварыСтрокаТЧ.ИдентификаторПартии = СтрокаДанныеДокументов.ПроизводственныеПартии[0].ИдентификаторПартии;
	КонецЕсли;
	
	// УпаковкиВЕТИС
	Для Каждого Стр Из СтрокаДанныеДокументов.УпаковкиВЕТИС Цикл
		УпаковкиСтрокаТЧ = ДокументОбъект.УпаковкиВЕТИС.Добавить();
		УпаковкиСтрокаТЧ.ИдентификаторСтрокиТовары = ТоварыСтрокаТЧ.ИдентификаторСтроки;
		ЗаполнитьЗначенияСвойств(УпаковкиСтрокаТЧ, Стр);
	КонецЦикла;
	
	// ШтрихкодыУпаковок
	Для Каждого Стр Из СтрокаДанныеДокументов.ШтрихкодыУпаковок Цикл
		ШтрихкодыУпаковокСтрокаТЧ = ДокументОбъект.ШтрихкодыУпаковок.Добавить();
		ЗаполнитьЗначенияСвойств(ШтрихкодыУпаковокСтрокаТЧ, Стр);
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДокумент_ВходящаяТранспортнаяОперацияВЕТИС(ОбщиеДанные, КСозданиюДокументов, СтрокаТаблицыЭлементов, СтрокаДанныеДокументов, ПараметрыОбмена, СтрокаРазделителиТО)
	
	ЭлементДанных = СтрокаТаблицыЭлементов.ЭлементДанных;
	ТаблицаВТО    = КСозданиюДокументов.ВходящаяТранспортнаяОперацияВЕТИС;
	
	ДокументОбъект = Неопределено;
	СтрокаВТО = Неопределено;
	Если ТаблицаВТО.Количество() > 0 Тогда
		// Попробуем найти документ ВТО по реквизитам.
		СтруктураПоиска = Новый Структура(СтрокаРазделителиТО);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДанныеДокументов);
		
		МассивСтрокВТО = ТаблицаВТО.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрокВТО.Количество() > 0 Тогда
			СтрокаВТО = МассивСтрокВТО[0];
			ДокументОбъект = СтрокаВТО.Ссылка.ПолучитьОбъект();
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументОбъект = Неопределено Тогда
		// Создадим новый документ.
		ДокументОбъект = Документы.ВходящаяТранспортнаяОперацияВЕТИС.СоздатьДокумент();
		ДокументОбъект.Заполнить(Неопределено);
		ДокументОбъект.Дата = ОбщиеДанные.Дата;
		ДокументОбъект.ГрузополучательХозяйствующийСубъект = ОбщиеДанные.ХозяйствующийСубъект;
		ДокументОбъект.ГрузополучательПредприятие          = ОбщиеДанные.Предприятие;
		
		ПредставленияГрузополучателя = ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(
			ДокументОбъект.ГрузополучательХозяйствующийСубъект, ДокументОбъект.ГрузополучательПредприятие, "Грузополучатель");
			
		ДокументОбъект.ТорговыйОбъект = ПредставленияГрузополучателя.ТорговыйОбъект.Ссылка;
		
		Если ЗначениеЗаполнено(СтрокаДанныеДокументов.ВетеринарноСопроводительныйДокумент) Тогда
			ЗаполнитьЗначенияСвойств(ДокументОбъект, СтрокаДанныеДокументов,
				,
				"ГрузополучательХозяйствующийСубъект, ГрузополучательПредприятие");
				
			РеквизитыВСД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДанныеДокументов.ВетеринарноСопроводительныйДокумент,
																		"СвязанныеДокументы, Маршрут");
			// Перенесем связанные документы из ВСД в документ.
			СвязанныеДокументы = РеквизитыВСД.СвязанныеДокументы.Выгрузить();
			Если СвязанныеДокументы.Количество() > 0 Тогда
				ДокументОбъект.СвязанныеДокументы.Загрузить(СвязанныеДокументы);
				
				// Заполним документ-основание.
				ДокументОснование = ЗаполнениеДокументовВЕТИС.ДокументОснованиеПоДаннымСвязанныхДокументов(СвязанныеДокументы);
				Если Не ДокументОснование = Неопределено Тогда
					ДокументОбъект.ДокументОснование = ДокументОснование;
				КонецЕсли;
			КонецЕсли;
			
			// Перенесем маршрут из ВСД в документ.
			Маршрут = РеквизитыВСД.Маршрут.Выгрузить();
			Если Маршрут.Количество() > 0 Тогда
				ДокументОбъект.Маршрут.Загрузить(Маршрут);
			КонецЕсли;
			
			ДанныеПоследнегоТранспорта = Неопределено;
			Для Каждого СтрокаТЧ Из Маршрут Цикл
				Если Маршрут.Индекс(СтрокаТЧ) = 0 Или СтрокаТЧ.СПерегрузкой Тогда
					ДанныеПоследнегоТранспорта = СтрокаТЧ;
				КонецЕсли;
			КонецЦикла;
			
			Если ДанныеПоследнегоТранспорта <> Неопределено Тогда
				ДокументОбъект.ТипТранспорта                 = ДанныеПоследнегоТранспорта.ТипТранспорта;
				ДокументОбъект.НомерТранспортногоСредства    = ДанныеПоследнегоТранспорта.НомерТранспортногоСредства;
				ДокументОбъект.НомерАвтомобильногоПрицепа    = ДанныеПоследнегоТранспорта.НомерАвтомобильногоПрицепа;
				ДокументОбъект.НомерАвтомобильногоКонтейнера = ДанныеПоследнегоТранспорта.НомерАвтомобильногоКонтейнера;
			КонецЕсли;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ДокументОбъект.НомерТТН) Тогда
			ДокументОбъект.ТТНУказан = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Товары
	ТоварыСтрокаТЧ = ДокументОбъект.Товары.Добавить();
	ТоварыСтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
	ЗаполнитьЗначенияСвойств(ТоварыСтрокаТЧ, СтрокаДанныеДокументов, Неопределено);
	
	Если Не ЗначениеЗаполнено(ТоварыСтрокаТЧ.ЕдиницаИзмеренияВЕТИС) Тогда
		ТоварыСтрокаТЧ.ЕдиницаИзмеренияВЕТИС = ИнтеграцияВЕТИС.ЕдиницаИзмерения(СтрокаТаблицыЭлементов.ИдентификаторЕдиницыИзмерения, ПараметрыОбмена);
	КонецЕсли;
	
	ИнтеграцияВЕТИСПереопределяемый.ЗаполнитьКоличествоНоменклатурыПоКоличествуВЕТИС(ТоварыСтрокаТЧ);
	ИнтеграцияВЕТИСПереопределяемый.ПроверитьСериюРассчитатьСтатус(ДокументОбъект, ТоварыСтрокаТЧ);
	
	// Производственные партии
	Для Каждого Стр Из СтрокаДанныеДокументов.ПроизводственныеПартии Цикл
		ЕстьУточнения = СтрокаДанныеДокументов.ПроизводственныеПартии.Количество() > 1;
		ПроизводственныеПартииСтрокаТЧ = ?(ЕстьУточнения, ДокументОбъект.ТоварыУточнение.Добавить(), ТоварыСтрокаТЧ);
		Если ЕстьУточнения Тогда
			ТоварыСтрокаТЧ.ЕстьУточнения = Истина;
			ПроизводственныеПартииСтрокаТЧ.ИдентификаторСтроки = ТоварыСтрокаТЧ.ИдентификаторСтроки;
		КонецЕсли;
		ПроизводственныеПартииСтрокаТЧ.ИдентификаторПартии = Стр.ИдентификаторПартии;
	КонецЦикла;
	
	// УпаковкиВЕТИС
	Для Каждого Стр Из СтрокаДанныеДокументов.УпаковкиВЕТИС Цикл
		УпаковкиСтрокаТЧ = ДокументОбъект.УпаковкиВЕТИС.Добавить();
		УпаковкиСтрокаТЧ.ИдентификаторСтрокиТовары = ТоварыСтрокаТЧ.ИдентификаторСтроки;
		ЗаполнитьЗначенияСвойств(УпаковкиСтрокаТЧ, Стр);
	КонецЦикла;
	
	// ШтрихкодыУпаковок
	Для Каждого Стр Из СтрокаДанныеДокументов.ШтрихкодыУпаковок Цикл
		ШтрихкодыУпаковокСтрокаТЧ = ДокументОбъект.ШтрихкодыУпаковок.Добавить();
		ЗаполнитьЗначенияСвойств(ШтрихкодыУпаковокСтрокаТЧ, Стр);
	КонецЦикла;
	
	ПровестиЗаписатьДокумент(ДокументОбъект);
	
	ДальнейшиеДействия = Новый Массив;
	ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПодтвердитеКорректностьДокументаСозданногоЧерезWeb);
	ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
		Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ВСДПогашеныЧерезWeb,
		ДальнейшиеДействия);
	
	РегистрыСведений.СтатусыДокументовВЕТИС.ЗаписатьСтатус(ДокументОбъект.Ссылка, ПараметрыОбновления);
	
	Если СтрокаВТО = Неопределено Тогда
		СтрокаВТО = ТаблицаВТО.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВТО, ДокументОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДокумент_ИсходящаяТранспортнаяОперацияВЕТИС(ОбщиеДанные, КСозданиюДокументов, СтрокаТаблицыЭлементов, СтрокаДанныеДокументов, ПараметрыОбмена, СтрокаРазделителиТО)
	
	ЭлементДанных = СтрокаТаблицыЭлементов.ЭлементДанных;
	ТаблицаИТО    = КСозданиюДокументов.ИсходящаяТранспортнаяОперацияВЕТИС;
	
	ДокументОбъект = Неопределено;
	СтрокаИТО = Неопределено;
	Если ТаблицаИТО.Количество() > 0 Тогда
		// Попробуем найти документ ИТО по реквизитам.
		СтруктураПоиска = Новый Структура(СтрокаРазделителиТО);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДанныеДокументов); 
		
		МассивСтрокИТО = ТаблицаИТО.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрокИТО.Количество() > 0 Тогда
			СтрокаИТО = МассивСтрокИТО[0];
			ДокументОбъект = СтрокаИТО.Ссылка.ПолучитьОбъект();
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументОбъект = Неопределено Тогда
		// Создадим новый документ.
		ДокументОбъект = Документы.ИсходящаяТранспортнаяОперацияВЕТИС.СоздатьДокумент();
		ДокументОбъект.Заполнить(Неопределено);
		ДокументОбъект.Дата = ОбщиеДанные.Дата;
		ДокументОбъект.ГрузоотправительХозяйствующийСубъект = ОбщиеДанные.ХозяйствующийСубъект;
		ДокументОбъект.ГрузоотправительПредприятие          = ОбщиеДанные.Предприятие;
		
		ИнформацияГрузоотправителя = ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(
			ДокументОбъект.ГрузоотправительХозяйствующийСубъект, ДокументОбъект.ГрузоотправительПредприятие, "Грузоотправитель");
			
		ДокументОбъект.ТорговыйОбъект = ИнформацияГрузоотправителя.ТорговыйОбъект.Ссылка;
		
		Если ЗначениеЗаполнено(СтрокаДанныеДокументов.ВетеринарноСопроводительныйДокумент) Тогда
			ЗаполнитьЗначенияСвойств(ДокументОбъект, СтрокаДанныеДокументов,
				,
				"ГрузоотправительХозяйствующийСубъект, ГрузоотправительПредприятие");
				
			РеквизитыВСД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДанныеДокументов.ВетеринарноСопроводительныйДокумент,
																		"СвязанныеДокументы, Маршрут");
			// Перенесем связанные документы из ВСД в документ.
			СвязанныеДокументы = РеквизитыВСД.СвязанныеДокументы.Выгрузить();
			Если СвязанныеДокументы.Количество() > 0 Тогда
				ДокументОбъект.СвязанныеДокументы.Загрузить(СвязанныеДокументы);
				
				// Заполним документ-основание.
				ДокументОснование = ЗаполнениеДокументовВЕТИС.ДокументОснованиеПоДаннымСвязанныхДокументов(СвязанныеДокументы);
				Если Не ДокументОснование = Неопределено Тогда
					ДокументОбъект.ДокументОснование = ДокументОснование;
				КонецЕсли;
			КонецЕсли;
			
			// Перенесем маршрут из ВСД в документ.
			Маршрут = РеквизитыВСД.Маршрут.Выгрузить();
			Если Маршрут.Количество() > 0 Тогда
				ДокументОбъект.Маршрут.Загрузить(Маршрут);
			КонецЕсли;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ДокументОбъект.НомерТТН) Тогда
			ДокументОбъект.ТТНУказан = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Товары
	ТоварыСтрокаТЧ = ДокументОбъект.Товары.Добавить();
	ТоварыСтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
	ЗаполнитьЗначенияСвойств(ТоварыСтрокаТЧ, СтрокаДанныеДокументов);
	
	Если Не ЗначениеЗаполнено(ТоварыСтрокаТЧ.ЕдиницаИзмеренияВЕТИС) Тогда
		ТоварыСтрокаТЧ.ЕдиницаИзмеренияВЕТИС = ИнтеграцияВЕТИС.ЕдиницаИзмерения(СтрокаТаблицыЭлементов.ИдентификаторЕдиницыИзмерения, ПараметрыОбмена);
	КонецЕсли;
	
	ИнтеграцияВЕТИСПереопределяемый.ЗаполнитьКоличествоНоменклатурыПоКоличествуВЕТИС(ТоварыСтрокаТЧ);
	
	// УпаковкиВЕТИС
	Для Каждого Стр Из СтрокаДанныеДокументов.УпаковкиВЕТИС Цикл
		УпаковкиСтрокаТЧ = ДокументОбъект.УпаковкиВЕТИС.Добавить();
		УпаковкиСтрокаТЧ.ИдентификаторСтрокиТовары = ТоварыСтрокаТЧ.ИдентификаторСтроки;
		ЗаполнитьЗначенияСвойств(УпаковкиСтрокаТЧ, Стр);
	КонецЦикла;
	
	// ШтрихкодыУпаковок
	Для Каждого Стр Из СтрокаДанныеДокументов.ШтрихкодыУпаковок Цикл
		ШтрихкодыУпаковокСтрокаТЧ = ДокументОбъект.ШтрихкодыУпаковок.Добавить();
		ЗаполнитьЗначенияСвойств(ШтрихкодыУпаковокСтрокаТЧ, Стр);
	КонецЦикла;
	
	ПровестиЗаписатьДокумент(ДокументОбъект);
	
	ДальнейшиеДействия = Новый Массив;
	ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПодтвердитеКорректностьДокументаСозданногоЧерезWeb);
	ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
		Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ВСДОформленыЧерезWeb,
		ДальнейшиеДействия);
	
	РегистрыСведений.СтатусыДокументовВЕТИС.ЗаписатьСтатус(ДокументОбъект.Ссылка, ПараметрыОбновления);
	
	Если СтрокаИТО = Неопределено Тогда
		СтрокаИТО = ТаблицаИТО.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаИТО, ДокументОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДокумент_ОбъединениеЗаписейСкладскогоЖурналаВЕТИС(ОбщиеДанные, КСозданиюДокументов, СтрокаТаблицыЭлементов, СтрокаДанныеДокументов, ПараметрыОбмена)
	
	ЭлементДанных = СтрокаТаблицыЭлементов.ЭлементДанных;
	СоответствиеДокументов = КСозданиюДокументов.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС;
	
	ТекущийСтатус = ИнтеграцияВЕТИСПовтИсп.СтатусВерсионногоОбъекта(ЭлементДанных.status);
	Если ТекущийСтатус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеОбъединения
		И ЗначениеЗаполнено(СтрокаТаблицыЭлементов.ЭлементДанныхСледующий) Тогда
		// Получим создаваемую запись журнала.
		ЗаписьЖурналаПолучаемая = ИнтеграцияВЕТИС.СсылкаПоИдентификатору(
			ПараметрыОбмена,
			"ЗаписиСкладскогоЖурналаВЕТИС",
			СтрокаТаблицыЭлементов.ЭлементДанныхСледующий.guid);
			
		ЕдиницаИзмерения = ИнтеграцияВЕТИС.ЕдиницаИзмерения(СтрокаТаблицыЭлементов.ЭлементДанныхСледующий.batch.unit.guid,
																					ПараметрыОбмена);
	Иначе
		ЗаписьЖурналаПолучаемая = СтрокаДанныеДокументов.ЗаписьСкладскогоЖурнала;
		
		ЕдиницаИзмерения = ИнтеграцияВЕТИС.ЕдиницаИзмерения(СтрокаТаблицыЭлементов.ИдентификаторЕдиницыИзмерения, ПараметрыОбмена);
	КонецЕсли;
	
	ДокументОбъект = Неопределено;
	СтрокаДокумент = СоответствиеДокументов.Получить(ЗаписьЖурналаПолучаемая);
	Если СтрокаДокумент = Неопределено Тогда
		// Создадим новый документ.
		ДокументОбъект = Документы.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС.СоздатьДокумент();
		ДокументОбъект.Заполнить(Неопределено);
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ОбщиеДанные);
		ДокументОбъект.ЗаписьСкладскогоЖурнала = ЗаписьЖурналаПолучаемая;
		ДокументОбъект.СпособОбъединения       = Перечисления.СпособыОбъединенияЗаписейСкладскогоЖурналаВЕТИС.Объединить;
		ДокументОбъект.Продукция               = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаписьЖурналаПолучаемая, "Продукция");
		ДокументОбъект.ЕдиницаИзмерения        = ЕдиницаИзмерения;
	Иначе
		// Получим существующий.
		ДокументОбъект = СтрокаДокумент.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Если ТекущийСтатус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеОбъединения Тогда
		НоваяСтрока = ДокументОбъект.ОбъединяемыеЗаписиСкладскогоЖурнала.Добавить();
		НоваяСтрока.ЗаписьСкладскогоЖурнала = СтрокаДанныеДокументов.ЗаписьСкладскогоЖурнала;
	КонецЕсли;
	
	ПровестиЗаписатьДокумент(ДокументОбъект);
	
	ДальнейшиеДействия = Новый Массив;
	ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПодтвердитеКорректностьДокументаСозданногоЧерезWeb);
	ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
		Перечисления.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС.ВыполненЧерезWeb,
		ДальнейшиеДействия);
	
	РегистрыСведений.СтатусыДокументовВЕТИС.ЗаписатьСтатус(ДокументОбъект.Ссылка, ПараметрыОбновления);
	
	Если СтрокаДокумент = Неопределено Тогда
		СоответствиеДокументов.Вставить(ЗаписьЖурналаПолучаемая, ДокументОбъект.Ссылка);
	КонецЕсли;

КонецПроцедуры

Функция ПроводитьДокументКомментарий(ДокументОбъект)
	
	// Контроль заполнения полей "Количество" и "Количство (ВЕТИС)"
	ИмяТЧ = "Товары";
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, ИмяТЧ) Тогда
		
		ПредставлениеТЧ = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТЧ].Синоним;
		ШаблонСообщения =
		НСтр("ru = 'Должны быть заполнены оба поля ""%1"" и ""%2"" для продукции ""%3"" в строке %4 списка ""%5"" в документе'");
		
		Если ДокументОбъект[ИмяТЧ].Количество() Тогда
			ЕстьКоличество = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			    ДокументОбъект[ИмяТЧ][0], "Количество");
			ЕстьКоличествоИзменение = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			    ДокументОбъект[ИмяТЧ][0], "КоличествоИзменение");
			ЕстьКоличествоВЕТИС = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			    ДокументОбъект[ИмяТЧ][0], "КоличествоВЕТИС");
			ЕстьКоличествоИзменениеВЕТИС = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			    ДокументОбъект[ИмяТЧ][0], "КоличествоИзменениеВЕТИС");
		КонецЕсли; 
		
		Для каждого ТекущаяСтрока Из ДокументОбъект[ИмяТЧ] Цикл
			
			ТекстСообщения = СтрШаблон(
				ШаблонСообщения,
				НСтр("ru = 'Количество'"),
				НСтр("ru = 'Количество (ВетИС)'"),
				ТекущаяСтрока.Продукция,
				ТекущаяСтрока.НомерСтроки,
				ПредставлениеТЧ);
			
			Если ЕстьКоличество И ЕстьКоличествоВЕТИС Тогда	
				Если Не (ЗначениеЗаполнено(ТекущаяСтрока.Количество) И ЗначениеЗаполнено(ТекущаяСтрока.КоличествоВЕТИС)) Тогда
					
					Возврат ТекстСообщения;
					
				КонецЕсли;
			КонецЕсли;
			
			Если ЕстьКоличествоИзменение И ЕстьКоличествоИзменениеВЕТИС Тогда
				Если Не (ЗначениеЗаполнено(ТекущаяСтрока.КоличествоИзменение)
					И ЗначениеЗаполнено(ТекущаяСтрока.КоличествоИзменениеВЕТИС)) Тогда
					
					Возврат ТекстСообщения;
					
				КонецЕсли;
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат "";

КонецФункции // ПроводитьДокумент()

Процедура ПровестиЗаписатьДокумент(ДокументОбъект)
	
	Попытка
		ПроводитьДокументКомментарий = ПроводитьДокументКомментарий(ДокументОбъект);
		
		ДокументОбъект.Записать(
			?(ПроводитьДокументКомментарий = "", РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			
	Исключение
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		ТекстОшибки = НСтр("ru = 'При проведении документа %1, произошла ошибка:
		                         |%2'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(ТекстОшибки,
						ДокументОбъект.Ссылка,
						КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		
		ИнтеграцияВЕТИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтрШаблон(ТекстОшибки,
						ДокументОбъект.Ссылка,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ТребуетсяУказаниеДняПериода(Данные, ИмяПоля)
	
	Если Данные[ИмяПоля + "ТочностьЗаполнения"] = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГ Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Данные[ИмяПоля + "ТочностьЗаполнения"] = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГЧЧ Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ТребуетсяУказаниеЧасаПериода(Данные, ИмяПоля)
	
	Если Данные[ИмяПоля + "ТочностьЗаполнения"] = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГЧЧ Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти
