////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ВЫГРУЗКИ

 //Процедура регистрирует изменения, для всех данных, входящих в состав плана обмена
 //Параметры:
 // УзелОбмена - узел плана обмена, для которого регистрируются изменения
Процедура ЗарегистрироватьИзмененияДанных(УзелОбмена) Экспорт
	
	СоставПланаОбмена = УзелОбмена.Метаданные().Состав;
	Для каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл
		
		//Если ОбщегоНазначения.ЭтоДокумент(ЭлементСоставаПланаОбмена.Метаданные) Тогда
		//	
		//	ПолноеИмяОбъекта = ЭлементСоставаПланаОбмена.Метаданные.ПолноеИмя();
		//	Выборка = ПолучитьВыборкуДокументовДляРегистрации(ПолноеИмяОбъекта);
		//	
		//	Пока Выборка.Следующий() Цикл
		//		
		//		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка);
		//		
		//	КонецЦикла;
		//	
		//Иначе
		//	
		//	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ЭлементСоставаПланаОбмена.Метаданные);
		//	
		//КонецЕсли;
		
		Если НЕ ОбщегоНазначения.ЭтоДокумент(ЭлементСоставаПланаОбмена.Метаданные) Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ЭлементСоставаПланаОбмена.Метаданные);
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры // ЗарегистрироватьИзмененияДанных()

// Функция получает выборку документов, соответствующих условиям отбора.
//
//Функция ПолучитьВыборкуДокументовДляРегистрации(ПолноеИмяОбъекта)
//	
//	ОтборыДляВыгрузкиДокументов = ПолучитьОтборыДляВыгрузкиДокументовВМобильноеПриложение();
//	
//	ТекстЗапроса =
//	"ВЫБРАТЬ
//	|	Таблица.Ссылка КАК Ссылка
//	|ИЗ
//	|	[ПолноеИмяОбъекта] КАК Таблица
//	|ГДЕ
//	|	Таблица.Дата >= &ДатаНачалаВыгрузки
//	|	И Таблица.Организация = &Организация
//	|	И Таблица.Ответственный = &Ответственный
//	|	И (Таблица.СостояниеЗаказа.СтатусЗаказа = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказов.ВРаботе)
//	|			ИЛИ Таблица.СостояниеЗаказа.СтатусЗаказа = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказов.Выполнен))";
//		
//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОбъекта]", ПолноеИмяОбъекта);
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ОтборыДляВыгрузкиДокументов.ДатаНачалаВыгрузки);
//	Запрос.УстановитьПараметр("Организация", ОтборыДляВыгрузкиДокументов.ОсновнаяОрганизация);
//	Запрос.УстановитьПараметр("Ответственный", ОтборыДляВыгрузкиДокументов.ОсновнойОтветственный);
//	
//	Запрос.Текст = ТекстЗапроса;
//	
//	Возврат Запрос.Выполнить().Выбрать();
//	
//КонецФункции // ПолучитьВыборкуДокументовДляРегистрации()

// Функция получает отборы для выгрузки документов.
//
//Функция ПолучитьОтборыДляВыгрузкиДокументовВМобильноеПриложение()
//	
//	Пользователь = Пользователи.ТекущийПользователь();
//	
//	ОсновнойОтветственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
//		Пользователь,
//		"ОсновнойОтветственный"
//	);
//	
//	ОсновнаяОрганизация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
//		Пользователь,
//		"ОсновнаяОрганизация"
//	);
//	Если НЕ ЗначениеЗаполнено(ОсновнаяОрганизация) Тогда
//		ОсновнаяОрганизация = Справочники.Организации.ОсновнаяОрганизация;
//	КонецЕсли;
//	
//	ПериодВыгрузкиВМобильноеПриложение = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
//		Пользователь,
//		"ПериодВыгрузкиВМобильноеПриложение"
//	);
//	
//	Если ПериодВыгрузкиВМобильноеПриложение = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнийМесяц Тогда
//		ДатаНачалаВыгрузки = НачалоМесяца(ТекущаяДата());
//	ИначеЕсли ПериодВыгрузкиВМобильноеПриложение = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнююНеделю Тогда
//		ДатаНачалаВыгрузки = НачалоНедели(ТекущаяДата());
//	ИначеЕсли ПериодВыгрузкиВМобильноеПриложение = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнийДень Тогда
//		ДатаНачалаВыгрузки = НачалоДня(ТекущаяДата());
//	КонецЕсли;
//	
//	ОтборыДляВыгрузкиДокументов = Новый Структура;
//	
//	ОтборыДляВыгрузкиДокументов.Вставить("ОсновнойОтветственный", ОсновнойОтветственный);
//	ОтборыДляВыгрузкиДокументов.Вставить("ОсновнаяОрганизация", ОсновнаяОрганизация);
//	
//	
//	ОтборыДляВыгрузкиДокументов.Вставить("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
//	
//	
//	Возврат ОтборыДляВыгрузкиДокументов;
//	
//КонецФункции // ПолучитьОтборыДляВыгрузкиДокументовВМобильноеПриложение()

// Функция создает объект переданного типа.
//
Функция СоздатьОбъектXDTO(ТипОбъекта) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("EFSOL_DeliveryServiceUT", ТипОбъекта));
	
КонецФункции // СоздатьОбъектXDTO()

// Процедура записывает данные в формат XML
// Процедура анализирует переданный объект данных и на основе этого анализа
// записывает его определенным образом в формат XML
//
// Параметры:
//  ЗаписьXML	- объект, записывающий XML данные
//  Данные 		- данные, подлежащие записи в формат XML
//
Процедура ЗаписатьДанные(ВозвращаемыйСписок, Данные) Экспорт
	
	ОбъектXDTO = ПолучитьОбъектXDTO(Данные);
	Если ОбъектXDTO <> Неопределено Тогда
		ВозвращаемыйСписок.objects.Добавить(ОбъектXDTO);
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьДанные()

// Получает объект XDTO из переданного объекта конфигурации.
//
Функция ПолучитьОбъектXDTO(Данные)
	
	ПередаваемыйОбъект = Неопределено;
	
	// Сериализация справочника Партнеры.
	Если ТипЗнч(Данные) = Тип("СправочникОбъект.Контрагенты")
		ИЛИ ТипЗнч(Данные) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("ES_Contractors");
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.name = Данные.Наименование;
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
				
		Для каждого ТекСтрока Из Данные.КонтактнаяИнформация Цикл
			Если ТекСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
				ПередаваемыйОбъект.Tel = ТекСтрока.Представление;
			ИначеЕсли ТекСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
				ПередаваемыйОбъект.Adress = ТекСтрока.Представление;
			ИначеЕсли ТекСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
				ПередаваемыйОбъект.Email = ТекСтрока.Представление;
			КонецЕсли;
		КонецЦикла;
		
		ПередаваемыйОбъект.AdditionalInfo = Данные.Комментарий;		
		
	//Сериализация документа Отчет О Доставке.
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ES_ОтчетОДоставке")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.ES_ОтчетОДоставке") Тогда
		
		ПередаваемыйОбъект 				= СоздатьОбъектXDTO("ES_DocDeliveryReport");
		ПередаваемыйОбъект.Id 			= Строка(Данные.Ссылка.УникальныйИдентификатор());
		ПередаваемыйОбъект.DeletionMark = Данные.ПометкаУдаления;
		ПередаваемыйОбъект.Posted 		= Данные.Проведен;
		ПередаваемыйОбъект.Name 		= Данные.Номер;
		ПередаваемыйОбъект.Date 		= Данные.Дата;
		
		ПередаваемыйОбъект.Courier			= Строка(Данные.Курьер);
		ПередаваемыйОбъект.PaymentCash 		= Данные.ES_ОплатаНаличными;
		ПередаваемыйОбъект.PaymentCashless 	= Данные.ES_ОплатаБезналичными;
		ПередаваемыйОбъект.Closed      		= Данные.ES_ЗакрытКурьером;
		ПередаваемыйОбъект.DateClosed 		= Данные.ES_ЗакрытКурьеромМомент;
		
		// Передача табличной части Заказы		
		ДобавляемыеСтрокиТип = ПередаваемыйОбъект.Свойства().Получить("Orders").Тип;
		ДобавляемыеСтроки	 = ФабрикаXDTO.Создать(ДобавляемыеСтрокиТип);
		
		ДобавляемыеСтрокиТипТовары = ПередаваемыйОбъект.Свойства().Получить("Products").Тип;
		ДобавляемыеСтрокиТовары	 = ФабрикаXDTO.Создать(ДобавляемыеСтрокиТипТовары);
		
		ДобавляемыеСтрокиТипМеста = ПередаваемыйОбъект.Свойства().Получить("Places").Тип;
		ДобавляемыеСтрокиМеста	 = ФабрикаXDTO.Создать(ДобавляемыеСтрокиТипМеста);
		
		МассивЗаказов = Новый Массив();
		
		
		Для Каждого СтрокаТЧ ИЗ Данные.Заказы Цикл
			
			ДобавляемаяСтрокаТип	= ДобавляемыеСтроки.Свойства().Получить("Order").Тип;
			ДобавляемаяСтрока 		= ФабрикаXDTO.Создать(ДобавляемаяСтрокаТип);
			ЭтоЗаказ = Истина;
			
			Если ТипЗнч(СтрокаТЧ.ДокументДоставки) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				
				ДобавляемаяСтрока.IsOrder = Истина;
				ДобавляемаяСтрока.OrdersNumber	= "ЗК-" + СтрокаТЧ.ДокументДоставки.Номер;		
				ДобавляемаяСтрока.Recipient				 	= СтрокаТЧ.ДокументДоставки.ES_Получатель;
				ДобавляемаяСтрока.ContactPersonRecipient 	= СтрокаТЧ.ДокументДоставки.ES_ПолучательКонтактноеЛицо;
				ДобавляемаяСтрока.TelContactPersonRecipient	= СтрокаТЧ.ДокументДоставки.ES_ПолучательТелефон;		
				ДобавляемаяСтрока.DeliveryType				= Строка(СтрокаТЧ.ДокументДоставки.ES_ВидДоставки);
				ДобавляемаяСтрока.Waybill 					= СтрокаТЧ.ДокументДоставки.ES_НомерНакладной;
				
				//Коваленко 17.08.2016
				ДобавляемаяСтрока.TimeFromTo 	= ПреобразоватьДиапазонВремениВСтроку(СтрокаТЧ.ДокументДоставки.ES_ВремяДоставкиС, СтрокаТЧ.ДокументДоставки.ES_ВремяДоставкиПо);
				ДобавляемаяСтрока.Note			= СтрокаТЧ.ДокументДоставки.Комментарий;
				ДобавляемаяСтрока.QuantityPlaces= СтрокаТЧ.ДокументДоставки.ES_КоличествоМест;
				ДобавляемаяСтрока.Weight 		= СтрокаТЧ.ДокументДоставки.ES_ОбщийВес;
				ДобавляемаяСтрока.TypeGoods		= ?(ЗначениеЗаполнено(СтрокаТЧ.ДокументДоставки.ES_ТипГруза), 
																		Строка(СтрокаТЧ.ДокументДоставки.ES_ТипГруза), "");
				//
				
				//Коваленко 18.08.2016
				Если СтрокаТЧ.ДокументДоставки.ES_ВидДоставки = Перечисления.ES_ВидыДоставки.ДвериДвери И 
							СтрокаТЧ.ДокументДоставки.ES_ВидЗабора = Перечисления.ES_ВидыЗабора.Упрощенный Тогда
							
						ДобавляемаяСтрока.GoodsSender = 		Строка(СтрокаТЧ.ДокументДоставки.ES_ЗаборОтправитель);
						ДобавляемаяСтрока.FIOGoodsSender =  	Строка(СтрокаТЧ.ДокументДоставки.ES_ЗаборКонтактноеЛицо);
						ДобавляемаяСтрока.AdressGoodsSender =   СтрокаТЧ.ДокументДоставки.ES_ЗаборАдрес;
						ДобавляемаяСтрока.MetroGoodsSender =    Строка(СтрокаТЧ.ДокументДоставки.ES_ЗаборРегион);
						ДобавляемаяСтрока.TelephoneGoodsSender = СтрокаТЧ.ДокументДоставки.ES_ЗаборТелефон; 
						ДобавляемаяСтрока.TimeGoodsSender = ПреобразоватьДиапазонВремениВСтроку(СтрокаТЧ.ДокументДоставки.ES_ЗаборВремяС, СтрокаТЧ.ДокументДоставки.ES_ЗаборВремяПо);
						
				КонецЕсли;
				//
				
				//Коваленко 19.08.2016
				ДобавляемаяСтрока.Metro = Строка(СтрокаТЧ.ДокументДоставки.ES_ПолучательРегион);
				//
				
				ДокументЗаборГруза = ПолучитьЗаборГрузаПоЗаказу(СтрокаТЧ.ДокументДоставки);		
				ДобавляемаяСтрока.DocumentReference			= Строка(ДокументЗаборГруза);
				
				МассивЗаказов.Добавить(СтрокаТЧ.ДокументДоставки);
				ЭтоЗаказ = Истина;
				
			ИначеЕсли ТипЗнч(СтрокаТЧ.ДокументДоставки) = Тип("ДокументСсылка.ES_ЗаборГруза") Тогда
				
				ДобавляемаяСтрока.IsOrder = Ложь;
				ДобавляемаяСтрока.OrdersNumber	 = "ЗГ-" + СтрокаТЧ.ДокументДоставки.Номер;				
				ДобавляемаяСтрока.Sender				 	= СтрокаТЧ.ДокументДоставки.Отправитель;
				ДобавляемаяСтрока.ContactPersonSender 		= СтрокаТЧ.ДокументДоставки.КонтактноеЛицо;
				ДобавляемаяСтрока.TelContactPersonSender	= СтрокаТЧ.ДокументДоставки.Телефон;			
				ДобавляемаяСтрока.DeliveryType				= Строка(СтрокаТЧ.ДокументДоставки.ВидЗабора);
				ДобавляемаяСтрока.DocumentReference			= Строка(СтрокаТЧ.ДокументДоставки.ДокументОснование);
				ДобавляемаяСтрока.Waybill 					= СтрокаТЧ.ДокументДоставки.НомерНакладной;
				
				//Коваленко 17.08.2016
				ДобавляемаяСтрока.TimeFromTo 	= ПреобразоватьДиапазонВремениВСтроку(СтрокаТЧ.ДокументДоставки.ВремяЗабораС, СтрокаТЧ.ДокументДоставки.ВремяЗабораПо);
				ДобавляемаяСтрока.Note			= СтрокаТЧ.ДокументДоставки.Комментарий;
				//

				//Коваленко 19.08.2016
				ДобавляемаяСтрока.Metro = Строка(СтрокаТЧ.ДокументДоставки.Регион);
				//
				
				ЭтоЗаказ = Ложь;
				
			КонецЕсли;
			
			ДобавляемаяСтрока.Adress         = СтрокаТЧ.АдресДоставки;
			
			Если НЕ СтрокаТЧ.СтатусЗаказа = Неопределено И ЭтоЗаказ Тогда
				ДобавляемаяСтрока.StatusOrder = ПолучитьОбъектXDTO(СтрокаТЧ.СтатусЗаказа);
			КонецЕсли;
			
			Если НЕ СтрокаТЧ.СтатусЗаказа = Неопределено И НЕ ЭтоЗаказ Тогда
				ДобавляемаяСтрока.StatusPickUpGoods = ПолучитьОбъектXDTO(СтрокаТЧ.СтатусЗаказа);
			КонецЕсли;
			
			ДобавляемаяСтрока.Comment		= СтрокаТЧ.Комментарий;
			ДобавляемаяСтрока.TrackNumber	= СтрокаТЧ.ТрекНомер;
			ДобавляемаяСтрока.Expences		= СтрокаТЧ.Расходы;
			ДобавляемаяСтрока.DateFact		= СтрокаТЧ.ДатаФактическойДоставки;
			ДобавляемаяСтрока.TimeFact		= СтрокаТЧ.ВремяФактическойДоставки;
			ДобавляемаяСтрока.Customer		= Строка(СтрокаТЧ.Заказчик);
			//ДобавляемаяСтрока.Payer			= Строка(СтрокаТЧ.Плательщик);
			ДобавляемаяСтрока.CostPlan		= СтрокаТЧ.СтоимостьПлан;
			ДобавляемаяСтрока.NPPlan		= СтрокаТЧ.НППлан;
			ДобавляемаяСтрока.CostFact		= СтрокаТЧ.СтоимостьФактНал;
			ДобавляемаяСтрока.CostFactBN	= СтрокаТЧ.СтоимостьФактБезнал;
			ДобавляемаяСтрока.NPFact		= СтрокаТЧ.НПФактНал;
			ДобавляемаяСтрока.NPFactBN		= СтрокаТЧ.НПФактБезнал;
			ДобавляемаяСтрока.NewDate		= СтрокаТЧ.ДатаНД;
			
			////Коваленко 17.08.2016
			//ДобавляемаяСтрока.TimeFromTo 	= ПреобразоватьДиапазонВремениВСтроку(СтрокаТЧ.ДокументДоставки.ВремяЗабораС, СтрокаТЧ.ДокументДоставки.ВремяЗабораПо);
			//ДобавляемаяСтрока.Note			= СтрокаТЧ.ДокументДоставки.Комментарий;
			////
			
			//ДобавляемаяСтрока.PaymentType	= ПолучитьОбъектXDTO(СтрокаТЧ.ES_ВидОплаты);
				
			ДобавляемыеСтроки.Order.Добавить(ДобавляемаяСтрока);
			
			
			//Обработка Заборов груза 
			Если Не ЭтоЗаказ Тогда
				
				Если СтрокаТЧ.ДокументДоставки.СписокГрузов.Количество() > 0 Тогда
					
					Для Каждого Стр ИЗ СтрокаТЧ.ДокументДоставки.СписокГрузов Цикл
						ДобавляемаяСтрокаТипМеста	= ДобавляемыеСтрокиМеста.Свойства().Получить("Place").Тип;
						ДобавляемаяСтрокаМеста 		= ФабрикаXDTO.Создать(ДобавляемаяСтрокаТипМеста);
				
						ДобавляемаяСтрокаМеста.OrdersNumber = "ЗГ-" + СтрокаТЧ.ДокументДоставки.Номер;
						ДобавляемаяСтрокаМеста.TypeGood 	= Строка(Стр.ТипГруза);
						ДобавляемаяСтрокаМеста.NPPlan    	= Стр.НППлан;
						//ДобавляемаяСтрокаМеста.NPFact    	= СтрМеста.НПФакт;
						ДобавляемаяСтрокаМеста.Description	= Стр.ОписаниеГруза; 
							
						ДобавляемыеСтрокиМеста.Place.Добавить(ДобавляемаяСтрокаМеста);
					КонецЦикла;
					
				КонецЕсли;
				
				Если СтрокаТЧ.ДокументДоставки.Грузы.Количество() > 0 Тогда
					Для Каждого Стр ИЗ СтрокаТЧ.ДокументДоставки.Грузы Цикл
						ДобавляемаяСтрокаТипТовары	= ДобавляемыеСтрокиТовары.Свойства().Получить("Product").Тип;
						ДобавляемаяСтрокаТовары 		= ФабрикаXDTO.Создать(ДобавляемаяСтрокаТипТовары);
						
						ДобавляемаяСтрокаТовары.OrdersNumber 	= "ЗГ-" + СтрокаТЧ.ДокументДоставки.Номер;
						ДобавляемаяСтрокаТовары.Nomenclature 	= Строка(Стр.Номенклатура);
						ДобавляемаяСтрокаТовары.Characteristic 	= Строка(Стр.Характеристика);
						ДобавляемаяСтрокаТовары.Party 			= Строка(Стр.Партия);
						ДобавляемаяСтрокаТовары.QuantityPlan 	= Стр.Количество;
						//ДобавляемаяСтрокаТовары.QuantityFact 	= СтрЗапасы.КоличествоФакт;
						ДобавляемаяСтрокаТовары.Price    		= Стр.Цена;
						ДобавляемаяСтрокаТовары.NPPlan     		= Стр.НППлан;
						//ДобавляемаяСтрокаТовары.NPFact     		= СтрЗапасы.НПФакт;		 
							
						ДобавляемыеСтрокиТовары.Product.Добавить(ДобавляемаяСтрокаТовары);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
			
		КонецЦикла;	
		
		// передаем ТЧ "Места" по всем заказам данного ОтчетаОДоставке
		Для Каждого СтрМеста ИЗ Данные.СписокГрузов Цикл
			
			ДобавляемаяСтрокаТипМеста	= ДобавляемыеСтрокиМеста.Свойства().Получить("Place").Тип;
			ДобавляемаяСтрокаМеста 		= ФабрикаXDTO.Создать(ДобавляемаяСтрокаТипМеста);
			
			ДобавляемаяСтрокаМеста.OrdersNumber = "ЗК-" + СтрМеста.ДокументДоставки.Номер;
			ДобавляемаяСтрокаМеста.TypeGood 	= Строка(СтрМеста.ТипГруза);
			ДобавляемаяСтрокаМеста.NPPlan    	= СтрМеста.НППлан;
			ДобавляемаяСтрокаМеста.NPFact    	= СтрМеста.НПФакт;
			ДобавляемаяСтрокаМеста.Description	= СтрМеста.ОписаниеГруза; 
				
			ДобавляемыеСтрокиМеста.Place.Добавить(ДобавляемаяСтрокаМеста);
			
		КонецЦикла;
		
		
		// передаем ТЧ "Запасы" по всем заказам данного ОтчетаОДоставке
		Для Каждого СтрЗапасы ИЗ Данные.Грузы Цикл
			
			ДобавляемаяСтрокаТипТовары	= ДобавляемыеСтрокиТовары.Свойства().Получить("Product").Тип;
			ДобавляемаяСтрокаТовары 		= ФабрикаXDTO.Создать(ДобавляемаяСтрокаТипТовары);
			
			ДобавляемаяСтрокаТовары.OrdersNumber 	= "ЗК-" + СтрЗапасы.ДокументДоставки.Номер;
			ДобавляемаяСтрокаТовары.Nomenclature 	= Строка(СтрЗапасы.Номенклатура);
			ДобавляемаяСтрокаТовары.Characteristic 	= Строка(СтрЗапасы.Характеристика);
			ДобавляемаяСтрокаТовары.Party 			= Строка(СтрЗапасы.Партия);
			ДобавляемаяСтрокаТовары.QuantityPlan 	= СтрЗапасы.КоличествоПлан;
			ДобавляемаяСтрокаТовары.QuantityFact 	= СтрЗапасы.КоличествоФакт;
			ДобавляемаяСтрокаТовары.Price    		= СтрЗапасы.Цена;
			ДобавляемаяСтрокаТовары.NPPlan     		= СтрЗапасы.НППлан;
			ДобавляемаяСтрокаТовары.NPFact     		= СтрЗапасы.НПФакт;		 
				
			ДобавляемыеСтрокиТовары.Product.Добавить(ДобавляемаяСтрокаТовары);
			
		КонецЦикла;
		
		ПередаваемыйОбъект.Orders = ДобавляемыеСтроки;
		ПередаваемыйОбъект.Products = ДобавляемыеСтрокиТовары;	
		ПередаваемыйОбъект.Places = ДобавляемыеСтрокиМеста;
	
	//// Преобразование типа перечисления ES_СтатусыЗаказов
	ИначеЕсли ТипЗнч(Данные) = Тип("ПеречислениеСсылка.ES_СтатусыЗаказов") Тогда
		
		//Если Данные = Перечисления.ES_СтатусыЗаказов.ТребуетсяЗабор Тогда
		//	ПередаваемыйОбъект = "NeedsTake";
		//ИначеЕсли Данные = Перечисления.ES_СтатусыЗаказов.Комплектуется Тогда
		//	ПередаваемыйОбъект = "Completed";
		//ИначеЕсли Данные = Перечисления.ES_СтатусыЗаказов.Подготовлен Тогда
		//	ПередаваемыйОбъект = "Prepared";
		//ИначеЕсли Данные = Перечисления.ES_СтатусыЗаказов.ОжидаетГруз Тогда	
		//	ПередаваемыйОбъект = "AwaitGoods";
		Если Данные = Перечисления.ES_СтатусыЗаказов.Назначен Тогда
			ПередаваемыйОбъект = "Assigned";
		ИначеЕсли Данные = Перечисления.ES_СтатусыЗаказов.Принят Тогда
			ПередаваемыйОбъект = "Accepted";
		ИначеЕсли Данные = Перечисления.ES_СтатусыЗаказов.ВПути Тогда
			ПередаваемыйОбъект = "OnWay";
		ИначеЕсли Данные = Перечисления.ES_СтатусыЗаказов.НеДоставлен Тогда
			ПередаваемыйОбъект = "Undelivered";
		//ИначеЕсли Данные = Перечисления.ES_СтатусыЗаказов.ГотовКВыдаче Тогда
		//	ПередаваемыйОбъект = "ReadyToIssue";
		//ИначеЕсли Данные = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставленРассчитать Тогда
		//	ПередаваемыйОбъект = "PartiallyDeliveredCalculate";
		ИначеЕсли Данные = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставлен Тогда
			ПередаваемыйОбъект = "PartiallyDelivered";
		//ИначеЕсли Данные = Перечисления.ES_СтатусыЗаказов.ДоставленВозвращен Тогда
		//	ПередаваемыйОбъект = "DeliveredReturned";
		//ИначеЕсли Данные = Перечисления.ES_СтатусыЗаказов.ДоставленРассчитать Тогда
		//	ПередаваемыйОбъект = "DeliveredCalculate";
		ИначеЕсли Данные = Перечисления.ES_СтатусыЗаказов.Доставлен Тогда
			ПередаваемыйОбъект = "Delivered";
		ИначеЕсли Данные = Перечисления.ES_СтатусыЗаказов.Отказ Тогда
			ПередаваемыйОбъект = "Canceled";
		//ИначеЕсли Данные = Перечисления.ES_СтатусыЗаказов.ОжидаетВыдачи Тогда
		//	ПередаваемыйОбъект = "AwaitIssue";	
		//ИначеЕсли Данные = Перечисления.ES_СтатусыЗаказов.Возвращен Тогда
		//	ПередаваемыйОбъект = "Returned";		
		КонецЕсли;
		
	//// Преобразование типа перечисления ES_СтатусыЗаборов
	ИначеЕсли ТипЗнч(Данные) = Тип("ПеречислениеСсылка.ES_СтатусыЗаборов") Тогда
		
		//Если Данные = Перечисления.ES_СтатусыЗаборов.Комплектуется Тогда
		//	ПередаваемыйОбъект = "Completed";
		//ИначеЕсли Данные = Перечисления.ES_СтатусыЗаборов.ВРаботе Тогда
		//	ПередаваемыйОбъект = "InWork";
		Если Данные = Перечисления.ES_СтатусыЗаборов.Принят Тогда
			ПередаваемыйОбъект = "Accepted";
		ИначеЕсли Данные = Перечисления.ES_СтатусыЗаборов.Назначен Тогда
			ПередаваемыйОбъект = "Assigned";
		ИначеЕсли Данные = Перечисления.ES_СтатусыЗаборов.ВПути Тогда
			ПередаваемыйОбъект = "OnWay";
		ИначеЕсли Данные = Перечисления.ES_СтатусыЗаборов.Выполнен Тогда
			ПередаваемыйОбъект = "Done";
		ИначеЕсли Данные = Перечисления.ES_СтатусыЗаборов.НеВыполнен Тогда
			ПередаваемыйОбъект = "NotDone";
		ИначеЕсли Данные = Перечисления.ES_СтатусыЗаборов.Отказ Тогда 
			ПередаваемыйОбъект = "Canceled";
		ИначеЕсли Данные = Перечисления.ES_СтатусыЗаборов.Передан Тогда
			ПередаваемыйОбъект = "Handed";		
	    КонецЕсли;
		
	////// Преобразование типа перечисления ES_ВидыОплаты.
	ИначеЕсли ТипЗнч(Данные) = Тип("ПеречислениеСсылка.ТипыДенежныхСредств") Тогда
		
		Если Данные = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
			ПередаваемыйОбъект = "CashLess";
		ИначеЕсли Данные = Перечисления.ТипыДенежныхСредств.Наличные Тогда
			ПередаваемыйОбъект = "Cash";
		КонецЕсли;
		
	//сериализация Удаление Объекта	
	ИначеЕсли ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
		
		ПередаваемыйОбъект = СоздатьОбъектXDTO("ObjectDeletion");
		ПередаваемыйОбъект.Id = Строка(Данные.Ссылка.УникальныйИдентификатор());
		
		Если ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ES_ОтчетОДоставке") Тогда
			ПередаваемыйОбъект.Type = "ES_DocDeliveryReport";
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ПередаваемыйОбъект;
	
КонецФункции // ПолучитьОбъектXDTO()

// Процедура загружает объекты в информационную базу.
//
Процедура ЗагрузитьОбъекты(УзелОбмена, Объекты) Экспорт
	
	//ДокументыДляОтложенногоПроведения = Новый ТаблицаЗначений;
	//ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументСсылка");
	//ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументТип");
	
	НачатьТранзакцию();
	
	Если Объекты <> Неопределено Тогда
		Для каждого ОбъектXDTO Из Объекты.objects Цикл
			Если ОбъектXDTO.Тип().Имя = "ES_DocDeliveryReport" Тогда
				НайтиСоздатьОтчетОДоставке(УзелОбмена, ОбъектXDTO);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	//ВыполнитьОтложенноеПроведениеДокументов(УзелОбмена, ДокументыДляОтложенногоПроведения);
	
КонецПроцедуры // ЗагрузитьОбъекты()

Функция ПреобразоватьДиапазонВремениВСтроку(ВремяЗабораС, ВремяЗабораПо)
	
	СтрокаВремя = "";
	
	Ч_с =  Час(ВремяЗабораС); // 13
	Ч_с = ?(СтрДлина(Ч_с) = 1,"0"+Ч_с,Ч_с);
    Ми_с = Минута(ВремяЗабораС); // 25
	Ми_с = ?(СтрДлина(Ми_с) = 1,"0"+Ми_с,Ми_с);
	мВремяЗабораС = ""+Ч_с+":"+Ми_с;
	Ч_по =  Час(ВремяЗабораПо); // 13
	Ч_по = ?(СтрДлина(Ч_по) = 1,"0"+Ч_по,Ч_по);
    Ми_по = Минута(ВремяЗабораПо); // 25
	Ми_по = ?(СтрДлина(Ми_по) = 1,"0"+Ми_по,Ми_по);
	мВремяЗабораПо = ""+Ч_по+":"+Ми_по;
	
	Если ЗначениеЗаполнено(ВремяЗабораС) И ЗначениеЗаполнено(ВремяЗабораПо) Тогда	
		СтрокаВремя = мВремяЗабораС + "-" + мВремяЗабораПо;
	ИначеЕсли ЗначениеЗаполнено(ВремяЗабораС) Тогда
		СтрокаВремя = "с " + мВремяЗабораС;
	ИначеЕсли ЗначениеЗаполнено(ВремяЗабораПо) Тогда
		СтрокаВремя = "по " + мВремяЗабораПо;
	КонецЕсли;
	
	
	Возврат СтрокаВремя;
	
КонецФункции //ПреобразоватьДиапазонВремениВСтроку() 

Функция НайтиСоздатьОтчетОДоставке(УзелОбмена, ОбъектXDTO)  
	НужноЗаписыватьОбъект = Ложь; 
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Документы.ES_ОтчетОДоставке.ПустаяСсылка();
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.Id);
	Ссылка = Документы.ES_ОтчетОДоставке.ПолучитьСсылку(Идентификатор);
	Объект = Ссылка.ПолучитьОбъект();
	
	Если Объект = Неопределено Тогда
		Сообщить("Отчет """ + ОбъектXDTO.name + """ не синхронизирован, так как не найден в центральной базе!");	
		Возврат Документы.ES_ОтчетОДоставке.ПустаяСсылка();
	КонецЕсли;
	
	//Если Объект = Неопределено Тогда
	//	Объект = Документы.ES_ОтчетОДоставке.СоздатьДокумент();
	//	Объект.УстановитьСсылкуНового(Ссылка);
	//	Ссылка = Объект.Ссылка;
	//КонецЕсли;
	
	Если Объект.Дата <> ОбъектXDTO.Date Тогда
		Объект.Дата = ОбъектXDTO.Date;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
		
	Если Объект.ПометкаУдаления <> ОбъектXDTO.DeletionMark Тогда
		Объект.ПометкаУдаления = ОбъектXDTO.DeletionMark;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.Проведен <> ОбъектXDTO.Posted Тогда
		Объект.Проведен = ОбъектXDTO.Posted;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.ES_ЗакрытКурьером <> ОбъектXDTO.Closed Тогда
		Объект.ES_ЗакрытКурьером = ОбъектXDTO.Closed;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	//
	Если Объект.ES_ЗакрытКурьеромМомент <> ОбъектXDTO.DateClosed Тогда
		Объект.ES_ЗакрытКурьеромМомент = ОбъектXDTO.DateClosed;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.ES_Возвраты <> ОбъектXDTO.Returns Тогда
		Объект.ES_Возвраты = ОбъектXDTO.Returns;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.ES_ОплатаНаличными <> ОбъектXDTO.PaymentCash Тогда
		Объект.ES_ОплатаНаличными = ОбъектXDTO.PaymentCash;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если Объект.ES_ОплатаБезналичными <> ОбъектXDTO.PaymentCashless Тогда
		Объект.ES_ОплатаБезналичными = ОбъектXDTO.PaymentCashless;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	ТЗЗаказыВОтчете = ПолучитьЗаказыПоОтчету(Объект.Ссылка);
		
    Если ОбъектXDTO.Orders <> Неопределено Тогда
    	Для Каждого ТекСтрока Из ОбъектXDTO.Orders.Order Цикл
    		//поиск заказов в документе ES_ОтчетОДоставке 
			НомерЗаказа = Сред(ТекСтрока.OrdersNumber, 4);
			
			
			СтрокаТЗ = ТЗЗаказыВОтчете.Найти(НомерЗаказа, "НомерЗаказа");
			
			Если НЕ СтрокаТЗ = Неопределено Тогда
				СтрокаТаблицыЗаказы = Объект.Заказы.Найти(СтрокаТЗ.ДокументДоставки, "ДокументДоставки");
				
				Если Не СтрокаТаблицыЗаказы = Неопределено Тогда
					
					Если Лев(ТекСтрока.OrdersNumber, 2) = "ЗК" Тогда
						СтрокаТаблицыЗаказы.СтатусЗаказа = ПреобразоватьСтатусЗаказа(ТекСтрока.StatusOrder);
						СтрокаТаблицыЗаказы.НПФактНал					= ТекСтрока.NPFact;
						СтрокаТаблицыЗаказы.НПФактБезнал				= ТекСтрока.NPFactBN;
						СтрокаТаблицыЗаказы.СтоимостьФактНал			= ТекСтрока.CostFact;
						СтрокаТаблицыЗаказы.СтоимостьФактБезнал			= ТекСтрока.CostFactBN;
						СтрокаТаблицыЗаказы.ДатаНД						= ТекСтрока.NewDate;
						//СтрокаТаблицыЗаказы.ES_ВидОплаты 				= ПреобразоватьВидОплаты(ТекСтрока.PaymentType);
						СтрокаТаблицыЗаказы.ТрекНомер					= ТекСтрока.TrackNumber;
						СтрокаТаблицыЗаказы.Расходы						= ТекСтрока.Expences;

					Иначе
						СтрокаТаблицыЗаказы.СтатусЗаказа = ПреобразоватьСтатусЗабора(ТекСтрока.StatusPickUpGoods);
					КонецЕсли;
					
					СтрокаТаблицыЗаказы.ДатаФактическойДоставки		= ТекСтрока.DateFact;
					СтрокаТаблицыЗаказы.ВремяФактическойДоставки	= ТекСтрока.TimeFact;
					//СтрокаТаблицыЗаказы.НПФакт 						= ТекСтрока.NPFact;
					//СтрокаТаблицыЗаказы.ES_ВидОплаты 				= ПреобразоватьВидОплаты(ТекСтрока.PaymentType);
					СтрокаТаблицыЗаказы.Комментарий					= ТекСтрока.Comment;
					
					//СтрокаТаблицыЗаказы.ТрекНомер					= ТекСтрока.TrackNumber;
					//СтрокаТаблицыЗаказы.Расходы						= ТекСтрока.Expences;
					
				КонецЕсли;
				
			КонецЕсли;
					
			
			//СтрокаТаблицыЗаказы = Объект.Заказы.Найти(ДокументДоставки, "ДокументДоставки");
			//Если Не СтрокаТаблицыЗаказы = Неопределено Тогда
			//	Если Лев(ТекСтрока.OrdersNumber, 2) = "ЗК" Тогда
			//		СтрокаТаблицыЗаказы.Статус		= ПреобразоватьСтатусЗаказа(ТекСтрока.StatusOrder);	
			//	Иначе
			//		СтрокаТаблицыЗаказы.Статус		= ПреобразоватьСтатусЗабора(ТекСтрока.StatusPickUpGoods);
			//	КонецЕсли;
			//	
			//	
			//	СтрокаТаблицыЗаказы.ДатаФакт	= ТекСтрока.Time;
			//	СтрокаТаблицыЗаказы.ВремяФакт	= ТекСтрока.Time;
			//	СтрокаТаблицыЗаказы.ОплатаФакт 	= ТекСтрока.PaymentFact;
			//	СтрокаТаблицыЗаказы.ВидОплаты 	= ПреобразоватьВидОплаты(ТекСтрока.PaymentType);
			//	СтрокаТаблицыЗаказы.Комментарий	= ТекСтрока.Comment;
			//КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//получение таблицы товары (грузы)
	Для Каждого СтрокаТовар ИЗ Объект.Грузы Цикл
		Описание = Строка(СтрокаТовар.Номенклатура) + " " + Строка(СтрокаТовар.Характеристика) + " " + Строка(СтрокаТовар.Партия);
		Для Каждого ТекСтрока Из ОбъектXDTO.Products.Product Цикл	
			Если Описание = ТекСтрока.Description И СтрокаТовар.ДокументДоставки.Номер = Сред(ТекСтрока.OrdersNumber, 4) Тогда //И НЕ СтрокаТовар.КоличествоФакт = ТекСтрока.QuantityFact Тогда
				СтрокаТовар.КоличествоФакт 	= ТекСтрока.QuantityFact;
				СтрокаТовар.НПФакт		= ТекСтрока.NPFact;
				НужноЗаписыватьОбъект = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	//получение таблицы места (список грузов)
	Для Каждого СтрокаМеста ИЗ Объект.СписокГрузов Цикл
		Описание = Строка(СтрокаМеста.ТипГруза);
		Для Каждого ТекСтрока Из ОбъектXDTO.Places.Place Цикл	
			Если Описание = ТекСтрока.TypeGood И СтрокаМеста.ДокументДоставки.Номер = Сред(ТекСтрока.OrdersNumber, 4) Тогда //И НЕ СтрокаТовар.КоличествоФакт = ТекСтрока.QuantityFact Тогда
				СтрокаМеста.НПФакт		= ТекСтрока.NPFact;
				НужноЗаписыватьОбъект 	= Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
  	
	Если НужноЗаписыватьОбъект Тогда
		//Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		//Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Попытка
			Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Исключение
			ЗаписьЖурналаРегистрации("Ошибка выгрузки "+Объект+" в MasterData",,Объект.Метаданные(),,ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
		
	Возврат Объект.Ссылка;
	
КонецФункции // НайтиСоздатьОтчетОДоставке()

Функция ПреобразоватьВидОплаты(PaymentType)
	Если PaymentType = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если PaymentType = "CashLess" Тогда
		ВидОплаты = Перечисления.ТипыДенежныхСредств.Безналичные;
	ИначеЕсли PaymentType = "Cash" Тогда
		ВидОплаты = Перечисления.ТипыДенежныхСредств.Наличные;
	КонецЕсли;
	
	Возврат ВидОплаты;		
КонецФункции

Функция ПреобразоватьСтатусЗаказа(ОбъектXDTO)
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//Если ОбъектXDTO = "NeedsTake" Тогда
	//	Объект = Перечисления.ES_СтатусыЗаказов.ТребуетсяЗабор;
	//ИначеЕсли ОбъектXDTO = "Completed" Тогда
	//	Объект = Перечисления.ES_СтатусыЗаказов.Комплектуется;
	//ИначеЕсли ОбъектXDTO = "Prepared" Тогда
	//	Объект = Перечисления.ES_СтатусыЗаказов.Подготовлен;
	//ИначеЕсли ОбъектXDTO = "AwaitGoods" Тогда
	//	Объект = Перечисления.ES_СтатусыЗаказов.ОжидаетГруз;
	Если ОбъектXDTO = "Assigned" Тогда
		Объект = Перечисления.ES_СтатусыЗаказов.Назначен;
	ИначеЕсли ОбъектXDTO = "OnWay" Тогда
		Объект = Перечисления.ES_СтатусыЗаказов.ВПути;
	ИначеЕсли ОбъектXDTO = "Undelivered" Тогда
		Объект = Перечисления.ES_СтатусыЗаказов.НеДоставлен;
	//ИначеЕсли ОбъектXDTO = "ReadyToIssue" Тогда
	//	Объект = Перечисления.ES_СтатусыЗаказов.ГотовКВыдаче;
	//ИначеЕсли ОбъектXDTO = "PartiallyDeliveredCalculate" Тогда
	//	Объект = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставленРассчитать;
	ИначеЕсли ОбъектXDTO = "PartiallyDelivered" Тогда
		Объект = Перечисления.ES_СтатусыЗаказов.ЧастичноДоставлен;
	//ИначеЕсли ОбъектXDTO = "DeliveredReturned" Тогда
	//	Объект = Перечисления.ES_СтатусыЗаказов.ДоставленВозвращен;
	//ИначеЕсли ОбъектXDTO = "DeliveredCalculate" Тогда
	//	Объект = Перечисления.ES_СтатусыЗаказов.ДоставленРассчитать;
	ИначеЕсли ОбъектXDTO = "Delivered" Тогда
		Объект = Перечисления.ES_СтатусыЗаказов.Доставлен;
	ИначеЕсли ОбъектXDTO = "Canceled" Тогда
		Объект = Перечисления.ES_СтатусыЗаказов.Отказ;
	//ИначеЕсли ОбъектXDTO = "AwaitIssue" Тогда
	//	Объект = Перечисления.ES_СтатусыЗаказов.ОжидаетВыдачи;
	//ИначеЕсли ОбъектXDTO = "Returned" Тогда
	//	Объект = Перечисления.ES_СтатусыЗаказов.Возвращен;
	ИначеЕсли ОбъектXDTO = "Accepted" Тогда
		Объект = Перечисления.ES_СтатусыЗаказов.Принят;
	КонецЕсли;

	
	Возврат Объект;
		
КонецФункции

Функция ПреобразоватьСтатусЗабора(ОбъектXDTO)
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//Если ОбъектXDTO = "Completed" Тогда
	//	Объект = Перечисления.ES_СтатусыЗаборов.Комплектуется;
	//ИначеЕсли ОбъектXDTO = "InWork" Тогда
	//	Объект = Перечисления.ES_СтатусыЗаборов.ВРаботе;
	Если ОбъектXDTO = "Assigned" Тогда
		Объект = Перечисления.ES_СтатусыЗаборов.Назначен;
	ИначеЕсли ОбъектXDTO = "OnWay" Тогда
		Объект = Перечисления.ES_СтатусыЗаборов.ВПути;
	ИначеЕсли ОбъектXDTO = "Done" Тогда
		Объект = Перечисления.ES_СтатусыЗаборов.Выполнен;
	ИначеЕсли ОбъектXDTO = "NotDone" Тогда
		Объект = Перечисления.ES_СтатусыЗаборов.НеВыполнен;
	ИначеЕсли ОбъектXDTO = "Canceled" Тогда
		Объект = Перечисления.ES_СтатусыЗаборов.Отказ;
	ИначеЕсли ОбъектXDTO = "Handed" Тогда
		Объект = Перечисления.ES_СтатусыЗаборов.Передан;
	ИначеЕсли ОбъектXDTO = "Accepted" Тогда
		Объект = Перечисления.ES_СтатусыЗаборов.Принят;
	КонецЕсли;	
	
	Возврат Объект;

КонецФункции


//Функция СоединитьДатуИВремя(Дата, Время) Экспорт
//	
//	ДатаСтрока = Формат(Дата, "ДФ=""ггггММдд""");
//	ВремяСтрока = Формат(Время, "ДФ=""ЧЧммсс""");
//	Результат = Дата(ДатаСтрока + ВремяСтрока);
//	
//	Возврат Результат;
//	
//КонецФункции

Функция ПреобразоватьВремяВСтроку(ВремяНачало, ВремяКонец) Экспорт
	СтрокаДефис = "-";
	ФорматВремяНачало = Формат(ВремяНачало, "ДФ=""ЧЧ:мм""");
	ФорматВремяКонец = Формат(ВремяКонец, "ДФ=""ЧЧ:мм""");
	Если ЗначениеЗаполнено(ФорматВремяКонец) Тогда
		Результат = ФорматВремяНачало + СтрокаДефис + ФорматВремяКонец;
	Иначе 
		Результат = ФорматВремяНачало;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСписокГрузов(МассивЗаказов)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателяES_СписокГрузов.Ссылка,
	               |	ЗаказПокупателяES_СписокГрузов.НППлан,
	               |	ЗаказПокупателяES_СписокГрузов.ОписаниеГруза,
	               |	ЗаказПокупателяES_СписокГрузов.ТипГруза
	               |ИЗ
	               |	Документ.ЗаказПокупателя.ES_СписокГрузов КАК ЗаказПокупателяES_СписокГрузов
	               |ГДЕ
	               |	ЗаказПокупателяES_СписокГрузов.Ссылка В(&МассивСсылок)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивЗаказов);
	
	ТЗ_СписокГрузов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТЗ_СписокГрузов;
КонецФункции

Функция ПолучитьГрузы(МассивЗаказов) 
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателяES_Грузы.Ссылка,
	               |	ЗаказПокупателяES_Грузы.НППлан,
	               |	ЗаказПокупателяES_Грузы.Номенклатура,
	               |	ЗаказПокупателяES_Грузы.Характеристика,
	               |	ЗаказПокупателяES_Грузы.Партия,
	               |	ЗаказПокупателяES_Грузы.Цена
	               |ИЗ
	               |	Документ.ЗаказПокупателя.ES_Грузы КАК ЗаказПокупателяES_Грузы
	               |ГДЕ
	               |	ЗаказПокупателяES_Грузы.Ссылка В(&МассивСсылок)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивЗаказов);
	
	ТЗ_Грузы = Запрос.Выполнить().Выгрузить();
	
	Возврат ТЗ_Грузы;
КонецФункции

Функция ПолучитьЗаказыПоОтчету(Ссылка)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ES_ОтчетОДоставкеЗаказы.ДокументДоставки.Номер КАК НомерЗаказа,
	               |	ES_ОтчетОДоставкеЗаказы.ДокументДоставки.Ссылка КАК ДокументДоставки
	               |ИЗ
	               |	Документ.ES_ОтчетОДоставке.Заказы КАК ES_ОтчетОДоставкеЗаказы
	               |ГДЕ
	               |	ES_ОтчетОДоставкеЗаказы.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	ТЗНомераЗаказов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТЗНомераЗаказов;
	
КонецФункции


// Процедура выполнения регламентного задания для обмена данными с мобильным приложением
//
Процедура ES_ОбменМобильноеПриложение() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	EFSOL_МобильноеПриложение.Ссылка
	               |ИЗ
	               |	Документ.ES_ОтчетОДоставке.Изменения КАК ES_ОтчетОДоставкеИзменения
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланОбмена.EFSOL_МобильноеПриложение КАК EFSOL_МобильноеПриложение
	               |		ПО ES_ОтчетОДоставкеИзменения.Узел = EFSOL_МобильноеПриложение.Ссылка
	               |ГДЕ
	               |	НЕ EFSOL_МобильноеПриложение.ЭтотУзел
	               |	И НЕ EFSOL_МобильноеПриложение.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		УзелОбмена = Выборка.Ссылка;
		// выгрузка данных
		Ответ = EFSOL_ОбменМобильноеПриложениеОбщее.СформироватьПакетОбмена(УзелОбмена, УзелОбмена.Пользователь.Наименование);
		
		//загрузка данных
		//EFSOL_ОбменМобильноеПриложениеОбщее.ПринятьПакетОбмена(УзелОбмена, Ложь, Истина);
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	EFSOL_МобильноеПриложение.Ссылка
	               |ИЗ
	               |	ПланОбмена.EFSOL_МобильноеПриложение КАК EFSOL_МобильноеПриложение
	               |ГДЕ
	               |	НЕ EFSOL_МобильноеПриложение.ЭтотУзел
	               |	И НЕ EFSOL_МобильноеПриложение.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		УзелОбмена = Выборка.Ссылка;
		// выгрузка данных
		//Ответ = EFSOL_ОбменМобильноеПриложениеОбщее.СформироватьПакетОбмена(УзелОбмена, УзелОбмена.Пользователь.Наименование);
		
		//загрузка данных
		EFSOL_ОбменМобильноеПриложениеОбщее.ПринятьПакетОбмена(УзелОбмена, Ложь, Истина);
	КонецЦикла;
	
КонецПроцедуры


Функция ПолучитьЗаборГрузаПоЗаказу(ДокументЗаказ)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ES_СтатусыЗаборов.Забор
	               |ИЗ
	               |	РегистрСведений.ES_СтатусыЗаборов КАК ES_СтатусыЗаборов
	               |ГДЕ
	               |	ES_СтатусыЗаборов.Заказ = &ЗаказДляОтбораВИсторию";
	Запрос.УстановитьПараметр("ЗаказДляОтбораВИсторию", ДокументЗаказ);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Документы.ES_ЗаборГруза.ПустаяСсылка();	
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Забор;
КонецФункции


//Процедура ПересчитатьДанныеПодвалаДокументаОтчетОДоставке(ДокументОбъект)
//	
//	ДокументОбъект.ИтогоРасходы = ДокументОбъект.Заказы.Итог("Расходы");
//	ДокументОбъект.ИтогоПереданнаяСумма = ДокументОбъект.Заказы.Итог("НПФакт") + ДокументОбъект.Заказы.Итог("СтоимостьФакт");
//		
//КонецПроцедуры




