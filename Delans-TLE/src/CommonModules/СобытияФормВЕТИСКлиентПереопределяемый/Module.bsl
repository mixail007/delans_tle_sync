
#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийФормы

// Возникает на клиенте перед выполнением записи объекта из формы.
//
// Параметры:
//  Форма           - УправляемаяФорма - форма записываемого объекта,
//  Отказ           - Булево           - признак отказа от записи,
//  ПараметрыЗаписи - Структура        - структура, содержащая параметры записи.
//
Процедура ПередЗаписью(Форма, Отказ, ПараметрыЗаписи) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Вызывается во всех созданных формах при вызове метода Оповестить.
//
// Параметры:
//  Форма - УправляемаяФорма - оповещаемая форма,
//  ИмяСобытия - Строка - имя события,
//  Параметр - Произвольный - параметр сообщения. Могут быть переданы любые необходимые данные,
//  Источник - Произвольный - источник события.
//
Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		//Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = Форма.УникальныйИдентификатор
		Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "Страницы") Тогда
			ИмяТабличнойЧасти = ?(Форма.Элементы.Страницы.ТекущаяСтраница.Имя = "СтраницаСырье", "Сырье", "Товары");
		Иначе
			ИмяТабличнойЧасти = "Товары";
		КонецЕсли; 
		
		АдресЗапасовВХранилище = Параметр;
		
		ИнтеграцияВЕТИСУНФКлиент.ЗаполнитьВыбранныеТовары(Форма, ИмяТабличнойЧасти, АдресЗапасовВХранилище);
		
	ИначеЕсли ИмяСобытия = "Запись_Номенклатура"
		И ЗначениеЗаполнено(Параметр)
		//Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = Форма.УникальныйИдентификатор
		Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "Страницы") Тогда
			ИмяТабличнойЧасти = ?(Форма.Элементы.Страницы.ТекущаяСтраница.Имя = "СтраницаСырье", "Сырье", "Товары");
		Иначе
			ИмяТабличнойЧасти = "Товары";
		КонецЕсли; 
		
		Форма.Элементы[ИмяТабличнойЧасти].ТекущиеДанные.Номенклатура = Параметр;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

// Обработчик переопределяемой команды формы.
//
// Параметры:
//  Форма   - УправляемаяФорма - форма объекта справочника или документа,
//  Команда - КомандаФормы     - команда формы.
//
Процедура ВыполнитьПереопределяемуюКоманду(Форма, Команда) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Открывает форму подбора номенклатуры.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой вызывается команда открытия обработки сопоставления,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы подбора.
//
Процедура ОткрытьФормуПодбораНоменклатуры(Форма, ОповещениеПриЗавершении = Неопределено,  ПараметрыПодбора = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	ТипОбъекта = ТипЗнч(Объект.Ссылка);
	ЭтоПриходныйДокумент = Истина;
	ИмяТабличнойЧасти = Форма.ТекущийЭлемент.Имя;
	
	Если ТипОбъекта = Тип("ДокументСсылка.ИнвентаризацияПродукцииВЕТИС") ИЛИ ТипОбъекта = Тип("ДокументСсылка.ПроизводственнаяОперацияВЕТИС") Тогда
		ИмяРеквизитаОрганизация = "ХозяйствующийСубъект";
		ИмяРеквизитаПодразделение = "ТорговыйОбъект";
		ЭтоПриходныйДокумент = Ложь;
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС") Тогда
		ИмяРеквизитаОрганизация = "ГрузоотправительХозяйствующийСубъект";
		ИмяРеквизитаПодразделение = "ТорговыйОбъект";
		ЭтоПриходныйДокумент = Ложь;
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
		 ИмяРеквизитаОрганизация = "ГрузополучательХозяйствующийСубъект";
		 ИмяРеквизитаПодразделение = "ТорговыйОбъект"
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект[ИмяРеквизитаОрганизация]) Тогда
		ДанныеХозяйствующегоСубъекта = ИнтеграцияВЕТИСУНФВызовСервера.ПолучитьДанныеХозяйствующгоСубъектаВЕТИС(Объект[ИмяРеквизитаОрганизация]);
	Иначе
		ДанныеХозяйствующегоСубъекта = Неопределено;
	КонецЕсли; 
	
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
	
	Если ПараметрыПодбора = Неопределено Тогда
		ПараметрыПодбора = Новый Структура;
	КонецЕсли;
	
	ПараметрыПодбора.Вставить("Период", 							   Объект.Дата);
	ПараметрыПодбора.Вставить("ЭтоПриходныйДокумент",				   ЭтоПриходныйДокумент);
	ПараметрыПодбора.Вставить("ДоступноИзменениеЦены",				   Ложь);
	ПараметрыПодбора.Вставить("ТипНоменклатуры",				       СписокТипов);
	ПараметрыПодбора.Вставить("ПодконтрольнаяПродукцияВЕТИС",		   Истина);
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", Форма.УникальныйИдентификатор);
	
	Если ЗначениеЗаполнено(ДанныеХозяйствующегоСубъекта) И ДанныеХозяйствующегоСубъекта.СоответствуетОрганизации Тогда
		ПараметрыПодбора.Вставить("Организация", ДанныеХозяйствующегоСубъекта.Контрагент);
		ПараметрыПодбора.Вставить("ОрганизацияДокумента", ДанныеХозяйствующегоСубъекта.Контрагент);
	Иначе
		ПараметрыПодбора.Вставить("Организация", ПредопределенноеЗначение("Справочник.Организации.ОсновнаяОрганизация"));
		ПараметрыПодбора.Вставить("ОрганизацияДокумента", ПредопределенноеЗначение("Справочник.Организации.ОсновнаяОрганизация"));
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ИмяРеквизитаПодразделение) Тогда
		ПараметрыПодбора.Вставить("СтруктурнаяЕдиница", Объект[ИмяРеквизитаПодразделение]);
	КонецЕсли; 
	
	Если Не ЭтоПриходныйДокумент Тогда
		ПараметрыПодбора.Вставить("ВидЦен",  УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиентСервер.АвторизованныйПользователь(),
			"ОсновнойВидЦенПродажи"));
		Если Не ЗначениеЗаполнено(ПараметрыПодбора.ВидЦен) Тогда
			ПараметрыПодбора.Вставить("ВидЦен", ПредопределенноеЗначение("Справочник.ВидыЦен.Оптовая"));
		КонецЕсли;
		ПараметрыПодбора.Вставить("Валюта", УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеКонстанты("НациональнаяВалюта"));
		Параметрыподбора.Вставить("СуммаВключаетНДС", УправлениеНебольшойФирмойСервер.ЗначениеРеквизитаОбъекта(ПараметрыПодбора.ВидЦен, "ЦенаВключаетНДС"));
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, Форма);
	
КонецПроцедуры

// Открывает форму выбора характеристики номенклатуры.
//
// Параметры:
//  Форма                   - УправляемаяФорма   - форма, в которой вызывается команда выбора номенклатуры,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы подбора,
//  ПараметрыХарактеристики - Структура          - параметры создания характеристики номенклатуры из формы выбора.
//
Процедура ОткрытьФормуВыбораХарактеристикиНоменклатуры(Форма, ОповещениеПриЗавершении, ПараметрыХарактеристики = Неопределено) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Открывает форму выбора номенклатуры.
//
// Параметры:
//	Форма					- УправляемаяФорма	- Форма, в которой вызывается команда выбора номенклатуры.
//	ПараметрыНоменклатуры	- Структура			- Параметры создания номенклатуры из формы выбора номенклатуры (см. описание 
//													ИнтеграцияВЕТИСВызовСервера.ПараметрыНоменклатуры).
//
Процедура ОткрытьФормуВыбораНоменклатуры(Форма, ПараметрыНоменклатуры = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	Если ПараметрыНоменклатуры <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ПараметрыНоменклатуры Цикл
			ПараметрыФормы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ТипНоменклатуры  = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас");
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТипНоменклатуры",					ТипНоменклатуры);
	ПараметрыОтбора.Вставить("ПодконтрольнаяПродукцияВЕТИС",	Истина);
	
	ПараметрыФормы.Вставить("Отбор",				ПараметрыОтбора);
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов",	ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("РежимВыбора",			Истина);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Форма);
	
КонецПроцедуры

// Открывает форму создания номенклатуры.
//
// Параметры:
//	Форма					- УправляемаяФорма - Форма, в которой вызывается команда создания номенклатуры.
//	ПараметрыНоменклатуры	- Структура - Параметры создания номенклатуры (см. описание 
//											ИнтеграцияВЕТИСВызовСервера.ПараметрыНоменклатуры).
//	ЕдиницаИзмеренияВЕТИС	- СправочникСсылка.ЕдиницыИзмеренияВЕТИС - Единица измерения ВетИС, на основании которой 
//																		создается номенклатура.
//
Процедура ОткрытьФормуСозданияНоменклатуры(Форма, ПараметрыНоменклатуры, ЕдиницаИзмеренияВЕТИС) Экспорт
	
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияВЕТИС)
		И Не ЗначениеЗаполнено(ПараметрыНоменклатуры.ЕдиницаИзмеренияВЕТИС) Тогда
		
		ТекстСообщения = НСтр("ru = 'Невозможно создать номенклатуру, т.к. не заполнено поле ""Единица измерения"" в карточке единицы измерения ВетИС ""%ЕдиницаИзмеренияВЕТИС%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмеренияВЕТИС%", Строка(ЕдиницаИзмеренияВЕТИС));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	Для Каждого КлючИЗначение Из ПараметрыНоменклатуры Цикл
		ПараметрыФормы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	ТипНоменклатуры  = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас");
	
	ПараметрыФормы.Вставить("ТипНоменклатуры",  ТипНоменклатуры);
	ПараметрыФормы.Вставить("ПодконтрольнаяПродукцияВЕТИС", Истина);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыФормы, Форма);
	
КонецПроцедуры

// Открывает форму создания нового контрагента.
//
// Параметры:
//  ДанныеКонтрагента - Структура - данные для заполнения нового контрагента. Структура со свойствами:
//   * Наименование - Строка - наименование контрагента,
//   * СокращенноеНаименование - Строка - сокращенное наименование контрагента,
//   * ИНН - Строка - ИНН контрагента,
//   * КПП - Строка - КПП контрагента.
//  Форма  - УправляемаяФорма - форма-владелец.
//
Процедура ОткрытьФормуСозданияКонтрагента(ФормаВладелец, Реквизиты) Экспорт
	
	Основание = Новый Структура;
	Основание.Вставить("ИНН",					Реквизиты.ИНН);
	Основание.Вставить("КПП",					Реквизиты.КПП);
	Основание.Вставить("Наименование",			Реквизиты.СокращенноеНаименование);
	Основание.Вставить("НаименованиеПолное",	Реквизиты.Наименование);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Основание", Основание);
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы, ФормаВладелец);
	
КонецПроцедуры

// Открывает форму выбора контрагента.
//
// Параметры:
//  Реквизиты - Структура - данные для заполнения нового контрагента:
//   * Наименование            - Строка - наименование контрагента,
//   * СокращенноеНаименование - Строка - сокращенное наименование контрагента,
//   * ИНН                     - Строка - ИНН контрагента,
//   * КПП                     - Строка - КПП контрагента.
//  ФормаВладелец  - УправляемаяФорма - форма, из которой осуществляется выбор.
//
Процедура ОткрытьФормуВыбораКонтрагента(ФормаВладелец, Реквизиты) Экспорт
	
	Основание = Новый Структура;
	Основание.Вставить("ИНН",					Реквизиты.ИНН);
	Основание.Вставить("КПП",					Реквизиты.КПП);
	Основание.Вставить("Наименование",			Реквизиты.СокращенноеНаименование);
	Основание.Вставить("НаименованиеПолное",	Реквизиты.Наименование);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Основание);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыФормы, ФормаВладелец);
	
КонецПроцедуры

Процедура ОткрытьФормуСозданияОснованияДокументаВЕТИС(ФормаВладелец, ОповещениеПриЗавершении, Основание, ТипОбъекта) Экспорт
	
	ПодключаемыеКомандыВЕТИСКлиент.ОткрытьФормуСозданияОснованияДокументаВЕТИС(ФормаВладелец, ОповещениеПриЗавершении, Основание, ТипОбъекта);
	
КонецПроцедуры

// Открывает форму выбора документа-основания по документу ВЕТИС.
//
// Параметры:
//  ФормаВладелец           - УправляемаяФорма   - форма, из которой выполняется команда выбора,
//  ОповещениеПриЗавершении - ОписаниеОповещения - действие формы после завершения выбора,
//  Основание               - Строка             - имя основания (имя метаданных документа-основания),
//  ТипОбъекта              - Тип                - тип объекта формы для которого осуществляется выбор.
//
Процедура ОткрытьФормуВыбораОснованияДокументаВЕТИС(Форма, ОповещениеПриЗавершении, Основание, ТипОбъекта)Экспорт
	
	ПодключаемыеКомандыВЕТИСКлиент.ОткрытьФормуВыбораОснованияДокументаВЕТИС(Форма, ОповещениеПриЗавершении, Основание, ТипОбъекта);
	
КонецПроцедуры

// Открывает форму создания нового документа поступления товаров и услуг на основании ТТН ЕГАИС.
//
// Параметры:
//  ТТНВходящаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на ТТН.
//
Процедура ОткрытьФормуСозданияДокументаПоступленияТоваровНаОснованииТТНЕГАИС(ТТНВходящаяЕГАИС) Экспорт
	
	ОткрытьФорму("Документ.ПриходнаяНакладная.ФормаОбъекта", Новый Структура("Основание", ТТНВходящаяЕГАИС));
	
КонецПроцедуры

Процедура ОткрытьФормуВыбораТорговогоОбъекта(ФормаВладелец, Реквизиты) Экспорт
	
	Основание = Новый Структура;
	Основание.Вставить("ИНН",                     Реквизиты.ИНН);
	Основание.Вставить("КПП",                     Реквизиты.КПП);
	Основание.Вставить("Наименование",            Реквизиты.Наименование);
	Основание.Вставить("СокращенноеНаименование", Реквизиты.СокращенноеНаименование);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Основание);
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыФормы, ФормаВладелец);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Выполняет действия при изменении номенклатуры в таблице Товары.
//
// Параметры:
//	Форма					- УправляемаяФорма				- Форма, в которой произошло событие.
//	ТекущаяСтрока			- ДанныеФормыЭлементКоллекции 	- Строка таблицы товаров.
//	КэшированныеЗначения	- Структура						- Сохраненные значения параметров, используемых при обработке строки таблицы.
//	ПараметрыЗаполнения		- Структура						- См. функцию ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//	ПараметрыУказанияСерий	- Структура						- Состав полей определен в функции 
//																НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Процедура ПриИзмененииНоменклатуры(Форма,
								ТекущаяСтрока,
								КэшированныеЗначения,
								ПараметрыЗаполнения,
								ПараметрыУказанияСерий = Неопределено) Экспорт
								
								ПараметрыЗаполнения.Вставить("ИзменениеНоменклатуры", Истина);
								
	ИнтеграцияВЕТИСУНФКлиент.ВыполнитьОперацииПриИзмененииРеквизитовФормы(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
КонецПроцедуры

// Выполняет действия при изменении характеристики в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - Структура - см. функцию СобытияФормЕГАИСКлиент.СтруктураПараметрыЗаполнения.
//
Процедура ПриИзмененииХарактеристики(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	ИнтеграцияВЕТИСУНФКлиент.ВыполнитьОперацииПриИзмененииРеквизитовФормы(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
КонецПроцедуры

// Выполняет действия при изменении серии в таблице Товары.
//
// Параметры:
//	Форма					- УправляемаяФорма	- Форма, в которой произошло событие.
//	ПараметрыУказанияСерий	- Структура			- Состав полей определен в функции 
//													НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//	ТекущиеДанные			- ДанныеФормыЭлементКоллекции 	- Строка таблицы товаров.
//	КэшированныеЗначения	- Структура			- Сохраненные значения параметров, используемых при обработке строки таблицы.
//	ПараметрыЗаполнения		- Структура			- См. функцию ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//
Процедура ПриИзмененииСерии(Форма,
							ПараметрыУказанияСерий,
							ТекущиеДанные,
							КэшированныеЗначения = Неопределено,
							ПараметрыЗаполнения = Неопределено) Экспорт
	
	ИнтеграцияВЕТИСУНФКлиент.ВыполнитьОперацииПриИзмененииРеквизитовФормы(Форма, ТекущиеДанные, КэшированныеЗначения, ПараметрыЗаполнения);
	
КонецПроцедуры

// Выполняет действия при изменении единицы измерения ВетИС в таблице Товары.
//
// Параметры:
//	Форма					- УправляемаяФорма				- Форма, в которой произошло событие.
//	ТекущаяСтрока			- ДанныеФормыЭлементКоллекции 	- Строка таблицы товаров.
//	КэшированныеЗначения	- Структура						- Сохраненные значения параметров, используемых при обработке строки таблицы.
//	ПараметрыЗаполнения		- Структура						- См. функцию ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//
Процедура ПриИзмененииЕдиницыИзмеренияВЕТИС(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	ИнтеграцияВЕТИСУНФКлиент.ВыполнитьОперацииПриИзмененииРеквизитовФормы(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
КонецПроцедуры

// Выполняет действия при изменении количества ВетИС в таблице Товары.
//
// Параметры:
//	Форма					- УправляемаяФорма				- Форма, в которой произошло событие.
//	ТекущаяСтрока			- ДанныеФормыЭлементКоллекции 	- Строка таблицы товаров.
//	КэшированныеЗначения	- Структура						- Сохраненные значения параметров, используемых при обработке строки таблицы.
//	ПараметрыЗаполнения		- Структура						- См. функцию ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//
Процедура ПриИзмененииКоличестваВЕТИС(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	ИнтеграцияВЕТИСУНФКлиент.ВыполнитьОперацииПриИзмененииРеквизитовФормы(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
КонецПроцедуры

// Выполняет действия при изменении количества в таблице Товары.
//
// Параметры:
//	Форма					- УправляемаяФорма				- Форма, в которой произошло событие.
//	ТекущаяСтрока			- ДанныеФормыЭлементКоллекции 	- Строка таблицы товаров.
//	КэшированныеЗначения	- Структура						- Сохраненные значения параметров, используемых при обработке строки таблицы.
//	ПараметрыЗаполнения		- Структура						- См. функцию ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//
Процедура ПриИзмененииКоличества(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	ИнтеграцияВЕТИСУНФКлиент.ВыполнитьОперацииПриИзмененииРеквизитовФормы(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
КонецПроцедуры

// Выполняет действия при начале выбора характеристики в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  Элемент - ПолеВвода - элемент формы Характеристика,
//  ДанныеВыбора - СписокЗначений - в обработчике можно сформировать и передать в этом параметре данные для выбора,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура НачалоВыбораХарактеристики(Форма, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент <> Неопределено И Элемент.Имя = "ТоварыПредставлениеХарактеристика" Тогда
		ПараметрыФормыВыбора = Новый Структура;
		ПараметрыФормыВыбора.Вставить("Отбор", Новый Структура("Владелец", ТекущаяСтрока.Номенклатура));
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора", ПараметрыФормыВыбора, Элемент, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуру обработки подбора, если произошел выбор из формы подбора.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура завершения подбора номенклатуры,
//  ВыбранноеЗначение       - Произвольный       - результат выбора в подчиненной форме,
//  ИсточникВыбора          - УправляемаяФорма   - форма, где осуществлен выбор.
//
Процедура ОбработкаВыбораПодборНоменклатуры(ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Вызывает процедуру обработки получения данных выбора номенклатуры, если произошло окончание ввода текста.
//
// Параметры:
//  ДанныеВыбора             - СписокЗначений - данные выбора номенклатуры, параметр события "ОкончаниеВводаТекста" поля формы,
//  ПараметрыПолученияДанных - Структура      - структура получения данных номенклатуры, параметр события "ОкончаниеВводаТекста" поля формы,
//  СтандартнаяОбработка     - Булево         - признак стандартной обработки выбора номенклатуры, параметр события "ОкончаниеВводаТекста" поля формы.
//
Процедура ОбработкаПолученияДанныхВыбораНоменклатуры(ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Вызывает процедуру обработки выбора серии, если произошел выбор из формы подбора.
//
// Параметры:
//	Форма                  - УправляемаяФорма - форма, в которой произошло событие,
//	ПараметрыУказанияСерий - Структура        - состав полей определен в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий,
//	ВыбраннаяСерия         - ОпределяемыйТип.СерияНоменклатурыВЕТИС - обрабатываемое значение серии,
//	ИсточникВыбора         - УправляемаяФорма - форма, в которой осуществлен выбор,
//	ПараметрыЗаполнения    - Структура        - параметры обработки выбора серии.
//
Процедура ОбработкаВыбораСерии(Форма,
								ПараметрыУказанияСерий,
								ВыбраннаяСерия,
								ИсточникВыбора,
								ПараметрыЗаполнения = Неопределено) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении упаковки в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - Структура - см. функцию СобытияФормЕГАИСКлиент.СтруктураПараметрыЗаполнения.
//
Процедура ПриИзмененииУпаковки(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	ИнтеграцияВЕТИСУНФКлиент.ВыполнитьОперацииПриИзмененииРеквизитовФормы(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
КонецПроцедуры

// Выполняет действия при изменении количества упаковок в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - Структура - см. функцию СобытияФормЕГАИСКлиент.СтруктураПараметрыЗаполнения.
//
Процедура ПриИзмененииКоличестваУпаковок(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	ИнтеграцияВЕТИСУНФКлиент.ВыполнитьОперацииПриИзмененииРеквизитовФормы(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
КонецПроцедуры

// Выполняет действия при изменении цены в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - Структура - см. функцию СобытияФормЕГАИСКлиент.СтруктураПараметрыЗаполнения.
//
Процедура ПриИзмененииЦены(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	ИнтеграцияВЕТИСУНФКлиент.ВыполнитьОперацииПриИзмененииРеквизитовФормы(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
КонецПроцедуры

#КонецОбласти

// Вызывает процедуру обработки выбора номенклатуры, если произошел выбор из формы выбора.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура завершения подбора номенклатуры,
//  ВыбранноеЗначение - Произвольный - результат выбора в подчиненной форме,
//  ИсточникВыбора - УправляемаяФорма - форма, где осуществлен выбор.
//
Процедура ОбработкаВыбораКонтрагента(ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ВыбранноеЗначение);
	
КонецПроцедуры

// Вызывает процедуру обработки выбора номенклатуры, если произошел выбор из формы выбора.
//
// Параметры:
//	ОповещениеПриЗавершении	- ОписаниеОповещения	- Процедура завершения выбора номенклатуры.
//	ВыбранноеЗначение		- Произвольный			- Результат выбора.
//	ИсточникВыбора			- УправляемаяФорма		- Форма, в которой осуществлен выбор номенклатуры.
//
Процедура ОбработкаВыбораНоменклатуры(ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	//++ НЕ ВЕТИС
	Если СтрНачинаетсяС(ИсточникВыбора.ИмяФормы, "Справочник.Номенклатура") Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ВыбранноеЗначение);
	КонецЕсли;
	//-- НЕ ВЕТИС
	
КонецПроцедуры

// Вызывается перед обработкой штрихкодов, не привязанных ни к одной номенклатуре.
//
// Параметры:
//  ОписаниеОповещения - ОписаниеОповещения - процедура, которую нужно вызвать после выполнения обработки,
//  Форма - УправляемаяФорма - форма, в которой отсканировали штрихкоды,
//  ИмяСобытия - Строка - имя события, инициировавшее оповещение,
//  Параметр - Структура - данные для обработки,
//  Источник - Произвольный - источник события.
//
Процедура ОбработкаОповещенияОбработаныНеизвестныеШтрихкоды(ОписаниеОповещения, Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = Форма.УникальныйИдентификатор Тогда
		
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ДанныеШтрихкодов);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПодключаемоеОборудование

#КонецОбласти

#Область ВыборОснования

#КонецОбласти

#КонецОбласти

