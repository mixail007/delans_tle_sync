Функция SendSMSProstor(Документ, Заказ, ОтКого, НомерТелефона, ТекстСообщения) Экспорт	
	
	Владелец = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоНаименованию("Провайдер SMS (Константа)");
	АвторизационныеДанные = ОбщегоНазначения.ДанныеИзБезопасногоХранилища(Владелец, "БезопасноеХранилищеДанных", "Пароль, Логин");

	АдресСервера = "api.prostor-sms.ru";	
	Пользователь = АвторизационныеДанные.Логин;
	Пароль = АвторизационныеДанные.Пароль;
	
	Попытка
		HTTPПростор = Новый HTTPСоединение(АдресСервера);
	Исключение
		Сообщить("Соединение отсутствует!");
		Возврат Неопределено;                                       
	КонецПопытки;
			
	HTTPЗапрос = Новый HTTPЗапрос("messages/v2/send/?login=" + Пользователь + "&password=" + Пароль + "&phone=" + НомерТелефона + "&text=" + ТекстСообщения + "&sender=" + ОтКого);
		
	Попытка
		Ответ = HTTPПростор.Получить(HTTPЗапрос);  		
	Исключение
		Сообщить("Соединение отсутствует!");
		Возврат Неопределено;
	КонецПопытки;   
	
	ОтветКод = Ответ.КодСостояния; 
	
	
	Ответ = Ответ.ПолучитьТелоКакСтроку();
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Ответ", Ответ);
	СтруктураОтвета.Вставить("Код", ОтветКод);
	
	Возврат СтруктураОтвета;
		
КонецФункции


Функция GetStatusesProstor(СписокИД) Экспорт
	
	Владелец = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоНаименованию("Провайдер SMS (Константа)");
	АвторизационныеДанные = ОбщегоНазначения.ДанныеИзБезопасногоХранилища(Владелец, "БезопасноеХранилищеДанных", "Пароль, Логин");
	
	АдресСервера = "api.prostor-sms.ru";	
	Пользователь = АвторизационныеДанные.Логин;
	Пароль = АвторизационныеДанные.Пароль;
	
	Попытка
		HTTPПростор = Новый HTTPСоединение(АдресСервера);
	Исключение
		Сообщить("Соединение отсутствует!");
		Возврат Неопределено;                                       
	КонецПопытки;
	
	СтрокаПараметры = "";
	
	Для Каждого ИД из СписокИД Цикл
		Если СтрокаПараметры = "" Тогда
			СтрокаПараметры = СтрокаПараметры + "id=" + ИД;
		Иначе
			СтрокаПараметры = СтрокаПараметры + "&id=" + ИД;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаПараметры <> "" Тогда
		HTTPЗапрос = Новый HTTPЗапрос("messages/v2/status/?" + СтрокаПараметры + "&login=" + Пользователь + "&password=" + Пароль);
		
		Попытка
			Ответ = HTTPПростор.Получить(HTTPЗапрос);  		
		Исключение
			Сообщить("Соединение отсутствует!");
			Возврат Неопределено;
		КонецПопытки;   
		
		ОтветКод = Ответ.КодСостояния; 	
		
		Ответ = Ответ.ПолучитьТелоКакСтроку();
		
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("Ответ", Ответ);
		СтруктураОтвета.Вставить("Код", ОтветКод);
		
		Возврат СтруктураОтвета;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


Процедура ES_ОбновлениеСтатусовSMS() Экспорт
	
	НеКонечныеСтатусы = Новый Массив;
	НеКонечныеСтатусы.Добавить("queued");
	НеКонечныеСтатусы.Добавить("smsc submit");
	НеКонечныеСтатусы.Добавить("accepted");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ES_СтатусыSMSСообщенийСрезПоследних.Заказ КАК Заказ,
		|	ES_СтатусыSMSСообщенийСрезПоследних.Шаблон КАК Шаблон,
		|	ES_СтатусыSMSСообщенийСрезПоследних.ТелефонПолучателя КАК ТелефонПолучателя,
		|	ES_СтатусыSMSСообщенийСрезПоследних.IdSMS КАК IdSMS,
		|	ES_СтатусыSMSСообщенийСрезПоследних.СтатусSMS КАК СтатусSMS,
		|	ES_СтатусыSMSСообщенийСрезПоследних.ТекстSMS КАК ТекстSMS,
		|	ES_СтатусыSMSСообщенийСрезПоследних.Попытки КАК Попытки
		|ИЗ
		|	РегистрСведений.ES_СтатусыSMSСообщений.СрезПоследних КАК ES_СтатусыSMSСообщенийСрезПоследних
		|ГДЕ
		|	ES_СтатусыSMSСообщенийСрезПоследних.СтатусSMS В(&НеКонечныеСтатусы)
		|	И ES_СтатусыSMSСообщенийСрезПоследних.Попытки < &МаксКоличествоПопыток";
	
	Запрос.УстановитьПараметр("МаксКоличествоПопыток", 3);
	Запрос.УстановитьПараметр("НеКонечныеСтатусы", НеКонечныеСтатусы);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		СписокИД = Новый Массив;
		Для Каждого Строка из РезультатЗапроса Цикл
			СписокИД.Добавить(Строка.IdSMS);
		КонецЦикла;
		
		СтрокаОтвет = GetStatusesProstor(СписокИД);
		Если СтрокаОтвет <> Неопределено Тогда
			Если СтрокаОтвет.Код = 200 Тогда
				Разложение1 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаОтвет.Ответ, Символы.ПС);
				
				Для Каждого Строка из Разложение1 Цикл
					Разложение2 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка, ";");
					Данные = РезультатЗапроса.Найти(Разложение2[0], "IdSMS");
					ЗаписатьВРегистрСтатусыСМС(Разложение2, Данные.Заказ, Данные.Шаблон, Данные.ТелефонПолучателя, Данные.ТекстSMS, Данные.Попытки)
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	

КонецПроцедуры

Процедура ЗаписатьВРегистрСтатусыСМС(Разложение2, Заказ, Шаблон, Телефон, ТекстСМС, Попытки) 
	
	НоваяЗапись = РегистрыСведений.ES_СтатусыSMSСообщений.СоздатьМенеджерЗаписи(); 
	НоваяЗапись.Период = ТекущаяДата();
	НоваяЗапись.Заказ = Заказ;
	НоваяЗапись.Шаблон = Шаблон;
	НоваяЗапись.IdSMS = Разложение2[0];
	НоваяЗапись.СтатусSMS = Разложение2[1];
	НоваяЗапись.ТелефонПолучателя = Телефон;
	НоваяЗапись.ТекстSMS = ТекстСМС;
	НоваяЗапись.Попытки = Попытки + 1;
	НоваяЗапись.Записать();	
	
КонецПроцедуры


