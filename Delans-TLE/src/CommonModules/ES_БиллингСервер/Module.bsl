Функция ИдентификаторСервисаDelans () Экспорт
	
	Возврат  "a651a222-1ec7-4582-9c62-052b1bd50b96";
	
КонецФункции

Функция ИдентификаторУслугиМенеджерDelans() Экспорт
	
	Возврат "258fc5bb-8376-40ea-ad33-2d3e10d08a5d";
	
КонецФункции

Функция ИдентификаторУслугиКурьерDelans() Экспорт
	
	Возврат "6bc1dc0f-5eac-425b-b80d-fb973df19108";
	
КонецФункции

Функция ИдентификаторУслугиTelegram() Экспорт
	
	Возврат "0199AC9F-2185-483D-9D39-38625FE5519A";
	
КонецФункции

Функция АдресСервераDelans() Экспорт
	
	Возврат "unf.42clouds.com";
	
КонецФункции

Функция ИмяБазыDelans() Экспорт
	
	Возврат СтрЗаменить("unf_base1/"+ПараметрыСеанса.ОбластьДанныхЗначение, " ", "");
	
КонецФункции


Функция ПроверкаДостпуностиСервисаПриСтартеРаботыСистемы() Экспорт
	
	ТестоваяСреда = ES_ОбщегоНазначенияКлиентСервер.ЭтоТестоваяСреда(); 
	
	Если НЕ ОбщегоНазначения.РазделениеВключено() ИЛИ НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() 
		ИЛИ ТестоваяСреда Тогда
		Возврат Новый Структура("ДоступПолучен, КрайнийСрок", Истина, Дата("39991231"));
	КонецЕсли;
	
	ИДСервиса = ES_БиллингСервер.ИдентификаторСервисаDelans();
	ТекПользователь = Пользователи.ТекущийПользователь();
	ПользовательИБ = ОпределитьПользователяИБ(ТекПользователь);
	
	Если ПользовательИБ = Неопределено ИЛИ ТипЗнч(ПользовательИБ) = Тип("Строка") Тогда
		Возврат Новый Структура("ДоступПолучен, КрайнийСрок", Истина, Дата("39991231"));
	КонецЕсли;
	
	Логин = СокрЛП(ПользовательИБ.Имя);
	
	ТекстОшибки = "";	
	ОтветСервиса = CTSM_Efsol_Платформа.ПолучитьИнформациюДляПартнераОСостоянииСервиса(ИДСервиса, Логин, ТекстОшибки);
	
	СтрокаОтвет = "";
	СтруктураОтвета = ОбработатьОтветсСервиса(ОтветСервиса, ТекстОшибки, ТекПользователь);
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ОпределитьПользователяИБ(ТекущийПользователь) Экспорт
	
	УИНПользователя     = ТекущийПользователь.ИдентификаторПользователяИБ;
	
	Попытка
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(УИНПользователя);
			
	Исключение
		ПользовательИБ = "Не найден";
	КонецПопытки;
	
	Возврат ПользовательИБ;
	
КонецФункции

Функция ОбработатьОтветсСервиса(ОтветСервиса, Знач ТекстОшибки, ТекущийПользователь)
	
	 СтруктураОтвета = Новый Структура;
	 СтруктураОтвета.Вставить("ДоступПолучен", Ложь);
	 СтруктураОтвета.Вставить("Сообщение", "");
	 СтруктураОтвета.Вставить("КрайнийСрок",Дата("00010101")); 
	 ДоступПолучен = Ложь;
	 Сообщение = "";
	 КрайнийСрок = Дата("00010101");
	 СервисДоступен = Ложь;
	 Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		 ДоступПолучен = Ложь;
		 Сообщение = ТекстОшибки;
	 ИначеЕсли ТипЗнч(ОтветСервиса) = Тип("Структура") Тогда
		 
		 Если ОтветСервиса.Свойство("ServiceIsActive") Тогда
			 СервисДоступен = Врег(ОтветСервиса.ServiceIsActive) = Врег("true");
		 КонецЕсли;
		 
		 Если ОтветСервиса.Свойство("ServiceExpiredDate") Тогда
			 КрайнийСрок = ПреобразоватьСтрокуВДату(ОтветСервиса.ServiceExpiredDate);
		 КонецЕсли;
		 
		 Если СервисДоступен Тогда
			 Если ОтветСервиса.Свойство("EnabledServiceTypesList") Тогда
				 Если ТипЗнч(ОтветСервиса.EnabledServiceTypesList) = Тип("Массив") Тогда
					 Если ОтветСервиса.EnabledServiceTypesList.Найти(ИдентификаторУслугиМенеджерDelans()) <> Неопределено Тогда
						ДоступПолучен = Истина;	 
					 КонецЕсли;
				 КонецЕсли;
			 КонецЕсли;
		 КонецЕсли;
		 
		 
	 Иначе
		 ДоступПолучен = Ложь;
		 Сообщение = ОтветСервиса;
	 КонецЕсли;
	
	СтруктураОтвета.ДоступПолучен 	= ДоступПолучен;
	СтруктураОтвета.Сообщение	  	= Сообщение;
	СтруктураОтвета.КрайнийСрок		= КрайнийСрок;
	
	ДобавитьЗаписьВРегистрДоступов(ДоступПолучен, КрайнийСрок, ТекущийПользователь);		
	
	Возврат СтруктураОтвета;
КонецФункции

Процедура ДобавитьЗаписьВРегистрДоступов(ДоступПолучен, КрайнийСрок, ТекущийПользователь)

	МенеджерЗаписи = РегистрыСведений.ES_Delans_Доступ.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Доступен	= ДоступПолучен;
	МенеджерЗаписи.КрайнийСрок	= КрайнийСрок;
	МенеджерЗаписи.Пользователь = ТекущийПользователь;
	МенеджерЗаписи.Записать(Истина);

КонецПроцедуры

Функция ПроверитьДоступностьСервисаDelans() Экспорт
	
	ДоступПолучен = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ES_Delans_Доступ.Доступен КАК Доступен
		|ИЗ
		|	РегистрСведений.ES_Delans_Доступ КАК ES_Delans_Доступ
		|ГДЕ
		|	ES_Delans_Доступ.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДоступПолучен = Выборка.Доступен;	
	КонецЦикла;
	
	Возврат ДоступПолучен;		
	
КонецФункции


Функция ПреобразоватьСтрокуВДату(ДатаСтрокой)
	
	Возврат ES_Mobile.ПреобразоватьСтрокуВДату(ДатаСтрокой);
	
КонецФункции

#Область ПроверкаДоступностиУслугиTelegram

Функция ПроверкаДоступностиУслугиТелеграмм() Экспорт
	
	ТестоваяСреда = ES_ОбщегоНазначенияКлиентСервер.ЭтоТестоваяСреда();
	Если НЕ ОбщегоНазначения.РазделениеВключено() ИЛИ НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() 
		ИЛИ ТестоваяСреда Тогда
		Возврат Истина;
	КонецЕсли;
	ИДУслуги = ИдентификаторУслугиTelegram();
	ТекПользователь = Пользователи.ТекущийПользователь();
	ПользовательИБ = ОпределитьПользователяИБ(ТекПользователь);
	Если ПользовательИБ = Неопределено ИЛИ ТипЗнч(ПользовательИБ) = Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;

	Логин = СокрЛП(ПользовательИБ.Имя);
	
	ТекстОшибки = "";	
	ОтветСервиса = CTSM_Efsol_Платформа.УслугаСервисаПодключена(ИДУслуги, Логин, ТекстОшибки);
	
	Если ОтветСервиса = Неопределено Тогда
		Сообщить(ТекстОшибки);
	Иначе
		Возврат ОтветСервиса;
	КонецЕсли;
		
КонецФункции

#КонецОбласти

#Область РаботаСМобильнымПриложениемDelans_ЗаполнениеСпискаКурьеров
Процедура ЗаполнитьСписокПользователейСУслугойКурьерDelans()   Экспорт
	
	ПользователиСДоступнойУслугой = Новый Массив;
	
	Если НЕ ПроверитьДоступностьРаботыПодключаемогоОборудования() Тогда
		Сообщить("В настройках не включено использование подключаемого оборудования и обмена с подключаемым оборудованием");
		Возврат;
	КонецЕсли;
	
	Попытка
		
		HTTPConnectionCore = CTSM_EfsolУниверсальныеФункцииСервер.HTTPConnection("Core");
		
		ПользовательИБ = ES_БиллингСервер.ОпределитьПользователяИБ(Пользователи.ТекущийПользователь());
		Логин = СокрЛП(ПользовательИБ);
		//Логин = "lks-kargo";
		//1) получаем ID юзера по логину
		АдресРесурса = "api_v2/AccountUsers/GetIdByLogin?login="+Логин;
		ПараметрыОтвета = CTSM_EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(HTTPConnectionCore, АдресРесурса, "Get");
		Если ПараметрыОтвета.КодОтвета = 200 Тогда
			IDТекЮзера = ПараметрыОтвета.СтруктураОтвета.AccountUserID;
		Иначе
			Возврат; 
		КонецЕсли;
		
		//2) получаем ID акаунта по ID Юзера
		АдресРесурса = "api_v2/AccountUsers/GetAccountId?accountUserId="+IDТекЮзера;
		ПараметрыОтвета = CTSM_EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(HTTPConnectionCore, АдресРесурса, "Get");
		Если ПараметрыОтвета.КодОтвета = 200 Тогда
			IDАккаунта = ПараметрыОтвета.СтруктураОтвета.AccountID;
		Иначе
			Возврат; 
		КонецЕсли;
		
		//3) получаем список ID Юзеров по ID Аккаунта
		АдресРесурса = "api_v2/AccountUsers/GetIDs?accountID="+IDАккаунта;
		ПараметрыОтвета = CTSM_EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(HTTPConnectionCore, АдресРесурса, "Get");
		Если ПараметрыОтвета.КодОтвета = 200 Тогда
			МассивIDЮзеров = ПараметрыОтвета.СтруктураОтвета.AccountUserIDs;
		Иначе
			Возврат; 
		КонецЕсли;
		
		ИдентификаторУслугиКурьерDelans = ES_БиллингСервер.ИдентификаторУслугиКурьерDelans();
		//4) для каждого id Юзера аккаунта проверяем доступность услуги "Курьер Деланс". Для этого
		Для каждого IDЮзера ИЗ МассивIDЮзеров Цикл
			//4.1) получаем логин юзера по ID
			АдресРесурса = "api_v2/AccountUsers/GetLogin?accountUserID="+IDЮзера;
			ПараметрыОтвета = CTSM_EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(HTTPConnectionCore, АдресРесурса, "Get");
			Если ПараметрыОтвета.КодОтвета = 200 Тогда
				ЛогинЮзера = ПараметрыОтвета.СтруктураОтвета.Login;
			Иначе
				Возврат; 
			КонецЕсли;
			//4.2) проверяем доступность услуги по логину юзера
			АдресРесурса = "api_v2/PartnerServicesData/CheckServiceTypeStatusForUserByLogin?serviceTypeId="
			+ИдентификаторУслугиКурьерDelans+"&accountUserLogin=" + ЛогинЮзера;
			ПараметрыОтвета = CTSM_EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(HTTPConnectionCore, АдресРесурса, "Get");
			Если ПараметрыОтвета.КодОтвета = 200 Тогда
				ДоступПолучен = ПараметрыОтвета.СтруктураОтвета.Result;
			Иначе
				Возврат; 
			КонецЕсли;
			
			Если ДоступПолучен Тогда
				ПользователиСДоступнойУслугой.Добавить(ЛогинЮзера);
			КонецЕсли;
			
		КонецЦикла;	
		
	Исключение
		Сообщить("Ошибка выполнения запроса в Ядро.");
		Возврат;
	КонецПопытки;
	
	
	Если ПользователиСДоступнойУслугой.Количество() > 0 Тогда
		ПравилоОбмена = НайтиСоздатьПравилоОбмена();
		Если ПравилоОбмена = Неопределено Тогда
			Возврат;
		КонецЕсли;
		НайтиСоздатьПодключаемоеОборудование(ПользователиСДоступнойУслугой, ПравилоОбмена);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьДоступностьРаботыПодключаемогоОборудования ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИспользоватьОбменСПодключаемымОборудованиемOffline.Значение КАК ИспользоватьОбменСПодключаемымОборудованиемOffline,
	|	ФункциональнаяОпцияИспользоватьПодключаемоеОборудование.Значение КАК ФункциональнаяОпцияИспользоватьПодключаемоеОборудование
	|ИЗ
	|	Константа.ИспользоватьОбменСПодключаемымОборудованиемOffline КАК ИспользоватьОбменСПодключаемымОборудованиемOffline,
	|	Константа.ФункциональнаяОпцияИспользоватьПодключаемоеОборудование КАК ФункциональнаяОпцияИспользоватьПодключаемоеОборудование";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ИспользоватьОбменСПодключаемымОборудованиемOffline И
			Выборка.ФункциональнаяОпцияИспользоватьПодключаемоеОборудование Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
		
КонецФункции

Функция НайтиСоздатьПравилоОбмена()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбменаСПодключаемымОборудованиемOffline
	|ГДЕ
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.ТипПодключаемогоОборудования = ЗНАЧЕНИЕ(перечисление.ТипыПодключаемогоОборудования.ККМОфлайн)
	|	И НЕ ПравилаОбменаСПодключаемымОборудованиемOffline.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ПравилоОбъект = РезультатЗапроса.Выгрузить()[0].Ссылка.ПолучитьОбъект();
	Иначе
		ПравилоОбъект = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.СоздатьЭлемент();
	КонецЕсли;
	
	ПравилоОбъект.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ККМОфлайн;
	ПравилоОбъект.Наименование	=	ПроверитьЗаполнениеЗначения(ПравилоОбъект.Наименование,"Правило обмена");
	ПравилоОбъект.СтруктурнаяЕдиница = ПроверитьЗаполнениеЗначения(ПравилоОбъект.СтруктурнаяЕдиница, Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
	ПравилоОбъект.ПрефиксВесовогоТовара = ПроверитьЗаполнениеЗначения(ПравилоОбъект.ПрефиксВесовогоТовара, 1);
	ПравилоОбъект.ВыгружатьИзменения	= Истина;
	ПравилоОбъект.Организация 			= ПроверитьЗаполнениеЗначения(ПравилоОбъект.Организация,ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Организация));
	ПравилоОбъект.ВидЦеныНоменклатуры	= ПроверитьЗаполнениеЗначения(ПравилоОбъект.ВидЦеныНоменклатуры, Справочники.ВидыЦен.Оптовая);
	
	Попытка
		ПравилоОбъект.Записать();
		Возврат ПравилоОбъект.Ссылка;
	Исключение
		Сообщить("Не удалось записать правило обмена");
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Процедура НайтиСоздатьПодключаемоеОборудование(МассивИдентификаторов, ПравилоОбмена)
	
	Если ПравилоОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПодключаемоеОборудование.Ссылка КАК Ссылка,
		|	ПодключаемоеОборудование.ИдентификаторWebСервисОборудования КАК ИдентификаторWebСервисОборудования
		|ИЗ
		|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|ГДЕ
		|	ПодключаемоеОборудование.ИдентификаторWebСервисОборудования В(&ИдентификаторWebСервисОборудования)
		|	И ПодключаемоеОборудование.ВидТранспортаОфлайнОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыТранспортаОфлайнОбмена.WS)";
	
	Запрос.УстановитьПараметр("ИдентификаторWebСервисОборудования", МассивИдентификаторов);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	ДрайверОборудования = Справочники.ДрайверыОборудования.Драйвер1СККМOffline;
	Если ЗначениеЗаполнено(ПравилоОбмена.Организация) Тогда
		Организация = ПравилоОбмена.Организация;
	Иначе
		Организация = ES_ОбщегоНазначения.ПолучитьСтартовуюНастройку(Перечисления.ES_ВидыСтартовыхНастроек.Организация);
	КонецЕсли;
	
	ТекРабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	
	Для каждого ИдентификаторУстройства Из МассивИдентификаторов Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ИдентификаторWebСервисОборудования",ИдентификаторУстройства);
		
		НайтиСтроки = ТЗ.НайтиСтроки(СтруктураОтбора);
		Если НайтиСтроки.Количество() > 0 Тогда
			ОборудованиеОбъект  = НайтиСтроки[0].Ссылка.ПолучитьОбъект();
		Иначе
			ОборудованиеОбъект = Справочники.ПодключаемоеОборудование.СоздатьЭлемент();
		Конецесли;
		
		ОборудованиеОбъект.ВидТранспортаОфлайнОбмена = Перечисления.ВидыТранспортаОфлайнОбмена.WS;
		ОборудованиеОбъект.ИдентификаторWebСервисОборудования	= ИдентификаторУстройства;
		ОборудованиеОбъект.Наименование 						= ИдентификаторУстройства;
		ОборудованиеОбъект.ДрайверОборудования 					= Справочники.ДрайверыОборудования.Драйвер1СККМOffline;
		ОборудованиеОбъект.Организация 							= Организация;
		ОборудованиеОбъект.РабочееМесто							= ТекРабочееМесто;
		ОборудованиеОбъект.СпособФорматноЛогическогоКонтроля	= Перечисления.СпособыФорматноЛогическогоКонтроля.РазделятьСтроки;
		ОборудованиеОбъект.ДопустимоеРасхождениеФорматноЛогическогоКонтроля	=	0.01;
		ОборудованиеОбъект.ТипОборудования		= Перечисления.ТипыПодключаемогоОборудования.ККМОфлайн;
		ОборудованиеОбъект.ТипОфлайнОборудования	= Перечисления.ТипыОфлайнОборудования.ККМ;
		ОборудованиеОбъект.ПравилоОбмена			= ПравилоОбмена;
		Если Не ЗначениеЗаполнено(ОборудованиеОбъект.УзелИнформационнойБазы) Тогда
			ОборудованиеОбъект.УзелИнформационнойБазы = СоздатьУзелОбмена(ИдентификаторУстройства);
		КонецЕсли;	
		ОборудованиеОбъект.УстройствоИспользуется		= Истина;
		ОборудованиеОбъект.Записать();
		
		ДобавитьЗаписьВРегистрСоответствияОборудованияИКурьеров(ОборудованиеОбъект.Ссылка);
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ДобавитьЗаписьВРегистрСоответствияОборудованияИКурьеров(Оборудование)
	
	НаборЗаписей = РегистрыСведений.ES_CоответствиеПравилОбменаОборудованияOfflineИКурьеров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Оборудование.Установить(Оборудование);
	НаборЗаписей.Прочитать();
	
	ТЗ = НаборЗаписей.Выгрузить();
	
	Если ТЗ.Количество() = 0 Тогда
		НовСтр = ТЗ.Добавить();
	Иначе
		НовСтр = ТЗ[0];
	КонецЕсли;
	
	НовСтр.Оборудование = Оборудование;
	НовСтр.АдресСервера = ES_БиллингСервер.АдресСервераDelans();
	НовСтр.ИмяБазы		= ES_БиллингСервер.ИмяБазыDelans();
	НовСтр.ТипАдреса	= 3;
	НовСтр.SSL			= Истина;
	НаборЗаписей.Загрузить(ТЗ);
	НаборЗаписей.Записать(Истина);
		
КонецПроцедуры

Функция СоздатьУзелОбмена(ИдентификаторУстройства) 
	
	УзелОбъект = ПланыОбмена.ОбменСПодключаемымОборудованиемOffline.НайтиПоНаименованию(ИдентификаторУстройства);
	Если ЗначениеЗаполнено(УзелОбъект) Тогда
		УзелОбъект = УзелОбъект.ПолучитьОбъект();
	Иначе
		УзелОбъект = ПланыОбмена.ОбменСПодключаемымОборудованиемOffline.СоздатьУзел();
	КонецЕсли;
	
	УзелОбъект.Наименование = ИдентификаторУстройства;
	УзелОбъект.ОбластьДанныхОсновныеДанные = ПараметрыСеанса.ОбластьДанныхЗначение;
	УзелОбъект.ЭтотУзел 	= Ложь;
	Попытка
	
		УзелОбъект.Записать();
	    УлезСсылка = УзелОбъект.Ссылка;
	Исключение
	   УлезСсылка = ПланыОбмена.ОбменСПодключаемымОборудованиемOffline.ПустаяСсылка();
   КонецПопытки;
   
   Возврат  УлезСсылка;
	
КонецФункции

Функция ПроверитьЗаполнениеЗначения(ПроверяемоеЗначение, НовоеЗначение)
	
	Если ЗначениеЗаполнено(ПроверяемоеЗначение) Тогда
		Возврат ПроверяемоеЗначение;
	Иначе
		Возврат НовоеЗначение;
	КонецЕсли;
	
КонецФункции

#КонецОбласти