
//////////////////////////////  Service  //////////////////////////////
//Абстрактный объект, инкапсулирует основные методы объекта работы с сервисом
         
// Метод возвращает признак работы сервера
//
// параметры:
//	 ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: истина/ложь или неопределено
//
Функция Service_isRunning(ErrorDescription) Экспорт 
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаПараметры = "Service/isRunning/";
	СтрокаЗапроса = "/adl42/hs/api_v1/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);          
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		СтруктураТиповПараметров = Новый Структура("isRunning", "Булево");
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета.isRunning;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Метод возвращает массив строк таблицы найденных данных
//
// параметры:
//	UserID, тип "строка" - идентификатор
//  BeginDate, тип "дата" - начальная дата
//	EndDate, тип "дата" - конечная дата
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: массив строк таблицы или неопределено
//
Функция Service_GetTableDataFound(СтруктураПоиска, ErrorDescription) Экспорт 
 
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
		AccountUserID = ПараметрыСеанса.EfsolИДПользователя;
	#Иначе
		AccountUserID = EfsolИДПользователя; 
	#КонецЕсли
	
	СтрокаЗапроса = "/adl42/hs/api_v1/Service/GetTableDataFound";
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post", СтруктураПоиска);
	ВремяВыполнения = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала)/1000; 
	РезультатСохранения = EfsolCoreКлиентСервер.CSPerformanceCounters_SetPerformanceValue("DOCARCHIVE", AccountUserID, "docarchive.internal.Service.GetTableDataFound", XMLСтрока(ВремяВыполнения), "");
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.TableDataFound;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
 
КонецФункции


//////////////////////////////  DocLoaderFiles  //////////////////////////////
//Коллекция файлов Загрузки документов
         
// Метод возвращает признак работы сервера
//
// параметры:
//	 ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: истина/ложь или неопределено
//
Функция DocLoaderFiles_GetTheUpdateFile(ErrorDescription) Экспорт 
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаПараметры = "DocLoaderFiles/GetTheUpdateFile?DocLoaderFileID=ЗагрузкаДокументовФормыWeb";
	СтрокаЗапроса = "/adl42/hs/api_v1/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса,,,,Истина);          
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.ДвоичныеДанные;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//////////////////////////////  AccountUserIncomingFiles  //////////////////////////////
//Коллекция файлов очереди атрибутирования


//Метод создает новый файл и возвращает его ID
//
// параметры:
//	UserID, тип "строка" - идентификатор
//	FileName, тип "строка" - имя файла 
//	BinaryData, тип "ДвоичныеДанные" - Двоичные данные
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: идентификатор или неопределено
//
Функция AccountUserIncomingFiles_Add(UserID, FileName, ДанныеФайла, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
		Файл_ДвоичныйДанные = Новый ДвоичныеДанные(ДанныеФайла);
		Файл_ДвоичныйДанные.Записать(ИмяВременногоФайла);
		//BinaryData.Записать(ИмяВременногоФайла);
	#Иначе
		ИмяВременногоФайла = ДанныеФайла; 
	#КонецЕсли

	СтруктураПараметров = Новый Структура("UserID, FileName", UserID, FileName);
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountUserIncomingFiles/Add";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post_File", СтруктураПараметров, ИмяВременногоФайла);
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.FileID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции        

// Метод удаляет указанный файл
//
// параметры:
//	FileID, тип "строка" - идентификатор
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: истина или неопределено
//
Функция AccountUserIncomingFiles_DeleteFile(FileID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("FileID", FileID);
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountUserIncomingFiles/DeleteFile";
	
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);
	 
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Метод возвращает массив ID файлов по пользователю, за указанный период
//
// параметры:
//	UserID, тип "строка" - идентификатор
//  BeginDate, тип "дата" - начальная дата
//	EndDate, тип "дата" - конечная дата
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: массив или неопределено
//
Функция AccountUserIncomingFiles_GetFileList(UserID, BeginDate, EndDate, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUserIncomingFiles/GetFileList?UserID=" + UserID + "&BeginDate=" + BeginDate + "&EndDate=" + EndDate; //даты должны передаваться в функцию в формате ISO8601
	//СтрокаПараметры = "AccountUserIncomingFiles/GetFileList?UserID=" + UserID + "&BeginDate=" + ДатаВФорматеISO8601(BeginDate) + "&EndDate=" + ДатаВФорматеISO8601(EndDate);
	СтрокаЗапроса = "/adl42/hs/api_v1/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.ListFileID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Метод возвращает количество файлов по пользователю, за указанный период с указанным статусом
//
// параметры:
//	UserID, тип "строка" - идентификатор
//  BeginDate, тип "дата" - начальная дата
//	EndDate, тип "дата" - конечная дата
//	Status, тип "дата" - статус
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: массив или неопределено
//
Функция AccountUserIncomingFiles_GetCount(знач UserID, знач BeginDate, знач EndDate, знач Status, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли

	UserID = ?(UserID = Неопределено, "", "UserID=" + UserID);
	BeginDate = ?(BeginDate = Неопределено, "", "&BeginDate=" + BeginDate);
	EndDate = ?(EndDate = Неопределено, "", "&EndDate=" + EndDate);
	Status = ?(Status = Неопределено, "", "&Status=" + Status);

	СтрокаПараметры = "AccountUserIncomingFiles/GetCount?" + UserID + BeginDate + EndDate + Status; 	//даты должны передаваться в функцию в формате ISO8601
	//СтрокаПараметры = "AccountUserIncomingFiles/GetCount?UserID=" + UserID + "&BeginDate=" + ДатаВФорматеISO8601(BeginDate) + "&EndDate=" + ДатаВФорматеISO8601(EndDate) + "&Status=" + Status;
	СтрокаЗапроса = "/adl42/hs/api_v1/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);
	                              
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		СтруктураТиповПараметров = Новый Структура("Count", "Число");
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета.Count;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Метод возвращает структуру параметров файла по его ID
//
// параметры:
//	FileID, тип "строка" - идентификатор
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: структура или неопределено
//
Функция AccountUserIncomingFiles_GetFileProperties(FileID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаПараметры = "AccountUserIncomingFiles/GetFileProperties?FileID=" + FileID;
	СтрокаЗапроса = "/adl42/hs/api_v1/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		СтруктураТиповПараметров = Новый Структура("UserID, Status, StatusComment, Size, Placed, Type, FileName, Path", "Строка", 
													"Число", "Строка", "Число", "Дата", "Строка", "Строка", "Строка");
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


//////////////////////////////  AccountDeals  //////////////////////////////
//Коллекция сделок


// Метод создает сделку у пользователя
//
// параметры:
//	UserID, тип "строка" - идентификатор
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: идентификатор или неопределено
//
Функция AccountDeals_Add(UserID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("UserID", UserID);
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountDeals/Add";
	
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);          
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.DealID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Метод удаляет указанную сделку
//
// параметры:
//	DealID, тип "строка" - идентификатор 
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: истина или ложь
//
Функция AccountDeals_Delete(DealID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("DealID", DealID);
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountDeals/Delete";
	
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);          
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Метод возвращает структуру параметров сделки по её ID
//
// параметры:
//	DealID, тип "строка" - идентификатор 
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: структура или неопределено
//
Функция AccountDeals_GetDealProperties(DealID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаПараметры = "AccountDeals/GetDealProperties?DealID=" + DealID;
	СтрокаЗапроса = "/adl42/hs/api_v1/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		СтруктураТиповПараметров = Новый Структура("AccountOrganizationID, DealType, Organization, Contractor, Sum, Status, Comment, CreateData", "Строка", "Строка", "Строка", "Строка", "Число", "Число", "Строка", "Дата");
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Метод устанавливает параметры сделки по её ID
//
// параметры:
//	СтруктураИзменяемыхПараметров, тип "структура" - структура
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: истина или ложь
//
Функция AccountDeals_SetDealProperties(СтруктураИзменяемыхПараметров, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountDeals/SetDealProperties";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post", СтруктураИзменяемыхПараметров);          
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Метод получает массив ID сделок по пользователю
//
// параметры:
//	UserID, тип "строка" - идентификатор
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: массив или неопределено
//
Функция AccountDeals_GetList(UserID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаПараметры = "AccountDeals/GetList?UserID=" + UserID;
	СтрокаЗапроса = "/adl42/hs/api_v1/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.ListDealID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Метод получает количество сделок указанного пользователя с указанным статусом
//
// параметры:
//	UserID, тип "строка" - идентификатор
//	Status, тип "дата" - статус
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: число или неопределено
//
Функция AccountDeals_GetCount(UserID, Status, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаПараметры = "AccountDeals/GetCount?UserID=" + UserID + "&Status=" + Status;
	СтрокаЗапроса = "/adl42/hs/api_v1/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ?(ПараметрыОтвета.СтруктураОтвета.Count = "", 0, Число(ПараметрыОтвета.СтруктураОтвета.Count));
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Метод находит и возвращает массив ID сделок по указанным параметрам
//
// параметры:
//	СтруктураПоиска, тип "структура" - структура
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: массив или неопределено
//
Функция AccountDeals_Find(СтруктураПоиска, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	// старая версия (27.01.2015 14:00 Иванченко Ю.В.)
	//СтрокаПараметрыПоиска = "";
	//Для Каждого ПараметрПоиска Из СтруктураПоиска Цикл 
	//	СтрокаПараметрыПоиска = СтрокаПараметрыПоиска + "&" + ПараметрПоиска.Ключ + "=" + ПараметрПоиска.Значение;
	//КонецЦикла;
	//
	//СтрокаЗапроса = "/adl42/hs/api_v1/AccountDeals/Find" + ?(СтрокаПараметрыПоиска = "", "", "?") + СтрокаПараметрыПоиска;
	//ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);
	
	// новая версия
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountDeals/Find";
	
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post", СтруктураПоиска);
	
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.ListDealID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


//////////////////////////////  AccountDealDocumens  //////////////////////////////
//Коллекция ссылок на электронные документы


//Метод добавляет документ в указанную сделку
//
// параметры:
//	DealID, тип "строка" - идентификатор 
//	DocumentID, тип "строка" - идентификатор
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: истина или ложь
//
Функция AccountDealDocuments_Add(DealID, DocumentID, AccountOrganizationID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("DealID, DocumentID, AccountOrganizationID", DealID, DocumentID, AccountOrganizationID);
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountDealDocuments/Add";
		
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);          
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//Метод удаляет указанный документ из указанной сделки
//
// параметры:
//	DealID, тип "строка" - идентификатор 
//	DocumentID, тип "строка" - идентификатор
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: истина или ложь
//
Функция AccountDealDocuments_Delete(DealID, DocumentID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("DealID, DocumentID", DealID, DocumentID);
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountDealDocuments/Delete";
	
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);          
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//Метод получает список документов по указанной сделке
//
// параметры:
//	DealID, тип "строка" - идентификатор 
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: массив или неопределено
//
Функция AccountDealDocuments_GetList(DealID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаПараметры = "AccountDealDocuments/GetList?DealID=" + DealID;
	СтрокаЗапроса = "/adl42/hs/api_v1/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.ListDocumentID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Метод находит и возвращает массив ID сделок по указанным параметрам
//
// параметры:
//	СтруктураПоиска, тип "структура" - статус
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: таблица или неопределено
//
Функция AccountDealDocuments_Find(СтруктураПоиска, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли

	СтрокаЗапроса = "/adl42/hs/api_v1/AccountDealDocuments/Find";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post", СтруктураПоиска);
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.TableDocumentID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


//////////////////////////////  AccountEDocuments  //////////////////////////////
//Коллекция электронных документов


//Метод создает электронный документ
//
// параметры:
//	UserID, тип "строка" - идентификатор
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: идентификатор или неопределено
//
Функция AccountEDocuments_Add(UserID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("UserID", UserID);
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocuments/Add";
	
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);          
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.DocumentID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Метод удаляет указанный документ
//
// параметры:
//	DocumentID, тип "строка" - идентификатор
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: истина или ложь
//
Функция AccountEDocuments_Delete(DocumentID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
		AccountUserID = ПараметрыСеанса.EfsolИДПользователя;
	#Иначе
		AccountUserID = EfsolИДПользователя; 
	#КонецЕсли

	
	СтруктураПараметров = Новый Структура("DocumentID", DocumentID);
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocuments/Delete";
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);          
	ВремяВыполнения = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала)/1000; 
	РезультатСохранения = EfsolCoreКлиентСервер.CSPerformanceCounters_SetPerformanceValue("DOCARCHIVE", AccountUserID, "docarchive.internal.AccountEDocuments.Delete", XMLСтрока(ВремяВыполнения), "");

	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//Метод получает список документов указанного пользователя
//
// параметры:
//	UserID, тип "строка" - идентификатор
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: массив или неопределено
//
Функция AccountEDocuments_GetList(UserID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаПараметры = "AccountEDocuments/GetList?UserID=" + UserID;
	СтрокаЗапроса = "/adl42/hs/api_v1/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);          
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.ListDocumentID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Метод получает количество документов указанного пользователя с указанным статусом
//
// параметры:
//	UserID, тип "строка" - идентификатор
//	Status, тип "строка" - статус
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: число или неопределено
//
Функция AccountEDocuments_GetCount(UserID, Status, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаПараметры = "AccountEDocuments/GetCount?UserID=" + UserID + "&Status=" + Status;
	СтрокаЗапроса = "/adl42/hs/api_v1/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);          
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		СтруктураТиповПараметров = Новый Структура("Count", "Число");
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета.Count;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Метод находит и возвращает массив ID документов по указанным параметрам
//
// параметры:
//	СтруктураПоиска, тип "структура" - структура
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: массив или неопределено
//
Функция AccountEDocuments_Find(СтруктураПоиска, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
		AccountUserID = ПараметрыСеанса.EfsolИДПользователя;
	#Иначе
		AccountUserID = EfsolИДПользователя; 
	#КонецЕсли
	
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocuments/Find";
	
	//ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post", СтруктураПоиска);
	//ВремяВыполнения = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала)/1000; 
	//РезультатСохранения = EfsolCoreКлиентСервер.CSPerformanceCounters_SetPerformanceValue("DOCARCHIVE", AccountUserID, "docarchive.internal.AccountEDocuments.Find", XMLСтрока(ВремяВыполнения), "");
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.ListDocumentID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Метод возвращает структуру параметров указанного документа
//
// параметры: 
//	DocumentID, тип "строка" - идентификатор
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: структура или неопределено
//
Функция AccountEDocuments_GetDocumentProperties(DocumentID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаПараметры = "AccountEDocuments/GetDocumentProperties?DocumentID=" + DocumentID;
	СтрокаЗапроса = "/adl42/hs/api_v1/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		СтруктураТиповПараметров = Новый Структура("AccountDatabaseID, AccountOrganizationID, Organization, Contractor, Sum, DocumentDate, CreateData, DocumentNumber, DocumentType, DocumentFileExtension, LinkID, LinkType, Status, Comment, Emanating, Original, InDeal, Received, RecognitionType",  
													"Строка", "Строка", "Строка", "Строка", "Число", "Дата", "Дата", "Строка", "Строка", "Строка", "Строка", "Строка", "Число", "Строка", "Булево", "Булево", "Булево", "Булево", "Строка");
									
													
		ПреобразованнаяСтруктураОтвета = EfsolУниверсальныеФункцииКлиентСервер.ПолучитьXMLЗначенияДанных(ПараметрыОтвета.СтруктураОтвета, СтруктураТиповПараметров);
		Возврат ПреобразованнаяСтруктураОтвета;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Метод устанавливает параметры указанного документа: 
//
// параметры:
//	СтруктураИзменяемыхПараметров, тип "структура" - статус
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: истина или ложь
//
//	в структуре:
//	DocumentID, string   //идентификатор ЭД
//	Organization, string   //Наименование организации
//	Contractor, string   //наименование контрагента
//	Sum, number   //Сумма сделки
//	DocumentDate, data   //дата документа
//	DocumentType, string   //Тип документа
//	DocumentNumber, string   //Номер документа
//	LinkID, string   //идентификатор ссылки в УС
//	Status	int   //статус
//	Comment 	string   //Комментарий
//
Функция AccountEDocuments_SetDocumentProperties(СтруктураИзменяемыхПараметров, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
		AccountUserID = ПараметрыСеанса.EfsolИДПользователя;
	#Иначе
		AccountUserID = EfsolИДПользователя; 
	#КонецЕсли

	
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocuments/SetDocumentProperties";
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post", СтруктураИзменяемыхПараметров);          
	ВремяВыполнения = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала)/1000; 
	РезультатСохранения = EfsolCoreКлиентСервер.CSPerformanceCounters_SetPerformanceValue("DOCARCHIVE", AccountUserID, "docarchive.internal.AccountEDocuments.SetDocumentProperties", XMLСтрока(ВремяВыполнения), "");
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//Метод получает XML-документ
//
// параметры:
//	DocumentID, тип "строка" - идентификатор
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: двоичные данные или неопределено
//
Функция AccountEDocuments_GetDocumentXML(DocumentID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаПараметры = "AccountEDocuments/GetDocumentXML?DocumentID=" + DocumentID;
	СтрокаЗапроса = "/adl42/hs/api_v1/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса,,,,Истина);
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.ТелоОтветаСтрока;
		//Возврат ПараметрыОтвета.СтруктураОтвета.ДвоичныеДанные;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Метод получает PDF-документ
//
// параметры:
//	DocumentID, тип "строка" - идентификатор
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: структура или неопределено
//
Функция AccountEDocuments_GetDocumentFile(DocumentID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаПараметры = "AccountEDocuments/GetDocumentFile?DocumentID=" + DocumentID;
	СтрокаЗапроса = "/adl42/hs/api_v1/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса,,,,Истина);
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Новый Структура("ДвоичныеДанные, РасширениеФайла", ПараметрыОтвета.СтруктураОтвета.ДвоичныеДанные, ПараметрыОтвета.СтруктураПараметровContentDisposition.FileExtension); 
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Метод сохраняет документ в XML-формате
//
// параметры: 
//	DocumentID, тип "строка" - идентификатор
//  BinaryData, тип "двоичные данные" - двоичные данные
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: истина или ложь
//
Функция AccountEDocuments_SaveDocumentXML(DocumentID, BinaryData, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
		BinaryData.Записать(ИмяВременногоФайла);
	#Иначе
		АдресФайла = ПоместитьВоВременноеХранилище(BinaryData);
		ПолучитьФайл(АдресФайла, ИмяВременногоФайла, Ложь); 
	#КонецЕсли


	СтруктураПараметров = Новый Структура("DocumentID", DocumentID);
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocuments/SaveDocumentXML";

	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post_File", СтруктураПараметров, ИмяВременногоФайла);
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

//Метод сохраняет документ в PDF-формате
//
// параметры:
//	DocumentID, тип "строка" - идентификатор
//  BinaryData, тип "двоичные данные" - двоичные данные
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: истина или ложь
//
Функция AccountEDocuments_SaveDocumentFile(DocumentID, BinaryData, DocumentFileExtension = Неопределено, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
		BinaryData.Записать(ИмяВременногоФайла);
	#Иначе
		АдресФайла = ПоместитьВоВременноеХранилище(BinaryData);
		ПолучитьФайл(АдресФайла, ИмяВременногоФайла, Ложь); 
	#КонецЕсли

	СтруктураПараметров = Новый Структура("DocumentID", DocumentID);
	Если НЕ DocumentFileExtension = Неопределено Тогда
		СтруктураПараметров.Вставить("DocumentFileExtension", DocumentFileExtension);	
	КонецЕсли;
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocuments/SaveDocumentFile";

	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post_File", СтруктураПараметров, ИмяВременногоФайла);
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//Метод получает список документов аккаунта к автозагрузке
//
// параметры:
//	UserID, тип "строка" - идентификатор
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: массив или неопределено
//
Функция AccountEDocuments_GetListForАutoloadingDelans(AccountID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаПараметры = "AccountEDocuments/GetListForАutoloadingDelans?AccountID=" + AccountID;
	СтрокаЗапроса = "/adl42/hs/api_v1/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);          
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.ListDocumentID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции




//////////////////////////////  AccountEDocumentPages  //////////////////////////////
//Коллекция страниц документа


//Метод создает страницу в указанном документе
//
// параметры:
//	DocumentID, тип "строка" - идентификатор
//	PageID, тип "строка" - идентификатор
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: неопределено
//
Функция AccountEDocumentPages_Аdd(DocumentID, PageID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("DocumentID, PageID", DocumentID, PageID);
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocumentPages/Add";
	
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);

	Если ПараметрыОтвета.КодОтвета <> 200 Тогда
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Метод удаляет указанную страницу
//
// параметры:
//	PageID, тип "строка" - идентификатор
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: истина или ложь
//
Функция AccountEDocumentPages_Delete(PageID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("PageID", PageID);
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocumentPages/Delete";
	
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);          
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//Метод получает список документов по указанной сделке
//
// параметры:
//	DocumentID, тип "строка" - идентификатор
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: массив или ложь
//
Функция AccountEDocumentPages_GetList(DocumentID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаПараметры = "AccountEDocumentPages/GetList?DocumentID=" + DocumentID;
	СтрокаЗапроса = "/adl42/hs/api_v1/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.ListPageID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Метод устанавливает параметры указанной страницы
//
// параметры:
//	PageID, тип "строка" - идентификатор
//	Number, тип "число" - номер
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: истина или ложь
//
Функция AccountEDocumentPages_SetPageProperties(PageID, Number, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("PageID, Number", PageID, Number);
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocumentPages/SetPageProperties";
	
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);          
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//Метод получает страницу для просмотра
//
// параметры:
//	PageID, тип "строка" - идентификатор
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: двоичные данные или неопределено
//
Функция AccountEDocumentPages_GetPagePreview(PageID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаПараметры = "AccountEDocumentPages/GetPagePreview?PageID=" + PageID;
	СтрокаЗапроса = "/adl42/hs/api_v1/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса,,,,Истина);

	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.ДвоичныеДанные;  
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Метод получает страницу
//
// параметры:
//	PageID, тип "строка" - идентификатор
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: двоичные данные или неопределено
//
Функция AccountEDocumentPages_GetPage(PageID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
		AccountUserID = ПараметрыСеанса.EfsolИДПользователя;
	#Иначе
		AccountUserID = EfsolИДПользователя; 
	#КонецЕсли
	
	СтрокаПараметры = "AccountEDocumentPages/GetPage?PageID=" + PageID;
	СтрокаЗапроса = "/adl42/hs/api_v1/" + СтрокаПараметры;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса,,,,Истина);
	ВремяВыполнения = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала)/1000; 
	РезультатСохранения = EfsolCoreКлиентСервер.CSPerformanceCounters_SetPerformanceValue("DOCARCHIVE", AccountUserID, "docarchive.internal.AccountEDocumentPages.GetPage", XMLСтрока(ВремяВыполнения), "");

	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.ДвоичныеДанные;  
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции



//////////////////////////////  AccountEDocumentLinks  //////////////////////////////
//Коллекция ссылок документа


//Метод создает ссылку в указанном документе
//
// параметры:
//	DocumentID, тип "строка" - идентификатор документа
//	LinkID, тип "строка" - идентификатор ссылки
//	LinkType, тип "строка" - тип ссылки
//  LinkDatabaseID, тип "строка" - идентификатор УС
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: булево
//
Функция AccountEDocumentLinks_Аdd(DocumentID, LinkID, LinkType, LinkDatabaseID, DocumentName, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("DocumentID, LinkID, LinkType, LinkDatabaseID, DocumentName", DocumentID, LinkID, LinkType, LinkDatabaseID, DocumentName);
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocumentLinks/Add";
	
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);

	Если ПараметрыОтвета.КодОтвета <> 200 Тогда
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description + "_DocumentID:" + DocumentID;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;	
	
КонецФункции


//Метод удаляет ссылку из указанного документе
//
// параметры:
//	DocumentID, тип "строка" - идентификатор
//	LinkID, тип "строка" - идентификатор ссылки
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: неопределено
//
Функция AccountEDocumentLinks_Delete(DocumentID, LinkID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("DocumentID, LinkID", DocumentID, LinkID);
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocumentLinks/Delete";
	
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);

	Если ПараметрыОтвета.КодОтвета <> 200 Тогда
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Метод получает свойства ссылки на документ в УС
//
// параметры:
//	LinkID, тип "строка" - идентификатор ссылки
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: структура свойств или Неопределено
//
Функция AccountEDocumentLinks_GetProperties(LinkID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocumentLinks/GetProperties?LinkID=" + LinkID;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);

	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета;  
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Метод ищет ссылку на указанный документ в УС
//
// параметры:
//	DocumentID, тип "строка" - идентификатор
//  LinkDatabaseID, тип "строка" - идентификатор УС
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: идентификатор ссылки или Неопределено
//
Функция AccountEDocumentLinks_Find(LinkID, LinkDatabaseID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountEDocumentLinks/Find?LinkID=" + LinkID + "&LinkDatabaseID=" + LinkDatabaseID;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);

	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.LinkID;  
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции



//////////////////////////////  EDocumentsTypes  //////////////////////////////
//Типы электронных  документов


// Метод получает типы электронных документов
//
// параметры:
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: истина или ложь
//
Функция EDocumentsTypes_GetList(ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаЗапроса = "/adl42/hs/api_v1/EDocumentsTypes/GetList";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);

	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.ListDocumentType;  
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


//////////////////////////////  EDocumentTypeFields  //////////////////////////////
//Коллекция описаний полей для типов электронных документов

// Метод получает типы электронных документов
//
// параметры:
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: истина или ложь
//
Функция EDocumentTypeFields_GetTableFieldsProperties(DocumentTypeName, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаЗапроса = "/adl42/hs/api_v1/EDocumentTypeFields/GetTableFieldsProperties?DocumentTypeName=" + DocumentTypeName;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);

	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.TableFieldsProperties;  
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


//////////////////////////////  AccountOrganizations  //////////////////////////////
//Коллекция Организаций

//Метод создает новую организацию аккаунта 
//
// параметры:
//	OrganizationName, тип "строка" - наименование организации  
//	OrganizationINN, тип "строка" - ИНН организации
//	OrganizationKPP, тип "строка" - КПП организации
//  ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: булево
// 
Функция AccountOrganizations_Аdd(OrganizationName, OrganizationINN, OrganizationKPP, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("OrganizationName, OrganizationINN, OrganizationKPP", OrganizationName, OrganizationINN, OrganizationKPP);
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountOrganizations/Add";
	
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);

	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.AccountOrganizationID;  
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

//Метод удаляет организацию аккаунта
//
// параметры:
//	AccountOrganizationID, тип "строка" - идентификатор организации аккаунта
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: истина или ложь
//
Функция AccountOrganizations_Delete(AccountOrganizationID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountOrganizationID", AccountOrganizationID);
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountOrganizations/Delete";
	
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);

	Если ПараметрыОтвета.КодОтвета <> 200 Тогда
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

//Метод устанавливает свойства организации
//
// параметры:
//	AccountOrganizationID, тип "строка" - идентификатор организации аккаунта
//	OrganizationName, тип "строка" - наименование организации
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: истина или ложь
//
Функция AccountOrganizations_SetAccountOrganizationProperties(AccountOrganizationID, OrganizationName, ErrorDescription)Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура(" AccountOrganizationID, OrganizationName", AccountOrganizationID, OrganizationName);
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountOrganizations/SetAccountOrganizationProperties";
	
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);          
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//Метод получает список организаций аккаунта
//
// параметры:
//	AccountID, тип "строка" - идентификатор аккаунта
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: массив или ложь
//
Функция AccountOrganizations_GetList (AccountID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаПараметры = "AccountOrganizations/GetList?AccountID=" + AccountID;
	СтрокаЗапроса = "/adl42/hs/api_v1/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);          
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.ListAccountOrganizationID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Метод получает таблицы доступов к организациям аккаунта по ИД аккаунта
//
// параметры:
//	UserID, тип "строка" - идентификатор пользователя
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: массив или ложь
//
Функция AccountOrganizations_GetTable (AccountID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаПараметры = "AccountOrganizations/GetTable?AccountID=" + AccountID;
	СтрокаЗапроса = "/adl42/hs/api_v1/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);          
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.AccountOrganizationsTable;  
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Метод получает свойства организации аккаунта
//
// параметры:
//	AccountOrganizationID, тип "строка" - идентификатор организации аккаунта
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: структура свойств или Неопределено
//
Функция AccountOrganizations_GetAccountOrganizationProperties(AccountOrganizationID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаЗапроса = "/adl42/hs/api_v1/AccountOrganizations/GetAccountOrganizationProperties?AccountOrganizationID=" + AccountOrganizationID;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);

	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета;  
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


////////////////////////////  AccOrgAccess  ////////////////////////////
//Коллекция доступов к организацям аккаунта

//Метод создает новый доступ к организации аккаунта 
//
// параметры:
//	AccountOrganizationID, тип "строка" - идентификатор организации аккаунта  
//	UserID, тип "строка" - идентификатор пользователя
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: булево
// 
Функция AccOrgAccess_Аdd(AccountOrganizationID, UserID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountOrganizationID, UserID", AccountOrganizationID, UserID);
	СтрокаЗапроса = "/adl42/hs/api_v1/AccOrgAccess/Add";
	
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);

	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.AccOrgAccesID;  
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

//Метод удаляет доступ к организации аккаунта
//
// параметры:
//	AccOrgAccesID, тип "строка" - идентификатор доступа к организации аккаунта
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: истина или ложь
//
Функция AccOrgAccess_Delete(AccOrgAccesID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccOrgAccesID", AccOrgAccesID);
	СтрокаЗапроса = "/adl42/hs/api_v1/AccOrgAccess/Delete";
	
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);

	Если ПараметрыОтвета.КодОтвета <> 200 Тогда
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

//Метод получает список доступов к организациям аккаунта по ИД пользователя
//
// параметры:
//	UserID, тип "строка" - идентификатор пользователя
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: массив или ложь
//
Функция AccOrgAccess_GetListByUserID (UserID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаПараметры = "AccOrgAccess/GetListByUserID?UserID=" + UserID;
	СтрокаЗапроса = "/adl42/hs/api_v1/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);          
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.ListAccOrgAccesID;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Метод получает таблицы доступов к организациям аккаунта по ИД пользователя
//
// параметры:
//	UserID, тип "строка" - идентификатор пользователя
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: массив или ложь
//
Функция AccOrgAccess_GetTableByUserID (UserID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаПараметры = "AccOrgAccess/GetTableByUserID?UserID=" + UserID;
	СтрокаЗапроса = "/adl42/hs/api_v1/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);          
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.TableAccOrgAccess;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Метод получает таблицы доступов к организациям аккаунта по ИД аккаунта//
// параметры:
//	AccountID, тип "строка" - идентификатор аккаунта
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: массив или ложь
//
Функция AccOrgAccess_GetTableByAccountID (AccountID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаПараметры = "AccOrgAccess/GetTableByAccountID?AccountID=" + AccountID;
	СтрокаЗапроса = "/adl42/hs/api_v1/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);          
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.TableAccOrgAccess;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Метод получает таблицы доступов к организациям аккаунта по ИД организации
//
// параметры:
//	AccountOrganizationID, тип "строка" - идентификатор организации
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: массив или ложь
//
Функция AccOrgAccess_GetTableByAccountOrganizationID (AccountOrganizationID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли                                                    	
	СтрокаПараметры = "AccOrgAccess/GetTableByAccountOrganizationID?AccountOrganizationID=" + AccountOrganizationID;
	СтрокаЗапроса = "/adl42/hs/api_v1/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);          
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.TableAccOrgAccess;  
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Метод получает свойства  доступа к организации аккаунта
//
// параметры:
//	AccOrgAccesID, тип "строка" - идентификатор доступа к организации аккаунта
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения:структура свойств или Неопределено
Функция AccOrgAccess_GetAccOrgAccesProperties(AccOrgAccesID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаЗапроса = "/adl42/hs/api_v1/AccOrgAccess/GetAccOrgAccesProperties?AccOrgAccesID=" + AccOrgAccesID;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);

	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета;  
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции



////////////////////////////  AcUserAccess  ////////////////////////////
//Коллекция доступов пользователей к документам и сделкам пользователя

//Метод создает новый доступ к документам и сделкам пользователя 
//
// параметры:
//	AccesForUserID, тип "строка" - идентификатор пользователя аккаунта  
//	AccessByAccount, тип "булево" - признак доступности всем пользователям аккаунта
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: булево
// 
Функция AcUserAccess_Аdd(AccesForUserID, AccessByAccount, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccesForUserID, AccessByAccount", AccesForUserID, AccessByAccount);
	СтрокаЗапроса = "/adl42/hs/api_v1/AcUserAccess/Add";
	
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);

	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.AcUserAccesID;  
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

//Метод удаляет доступ к документам и сделкам пользователя
//
// параметры:
//	UserAccesID, тип "строка" - идентификатор доступа 
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: истина или ложь
//
Функция AcUserAccess_Delete(UserAccesID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("UserAccesID", UserAccesID);
	СтрокаЗапроса = "/adl42/hs/api_v1/AcUserAccess/Delete";
	
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);

	Если ПараметрыОтвета.КодОтвета <> 200 Тогда
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

//Метод получает список ИД доступных пользователей аккаунта
//
// параметры:
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: массив ИД пользователей или Неопределено
//
Функция AcUserAccess_GetListIDsAvailable(ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаЗапроса = "/adl42/hs/api_v1/AcUserAccess/GetListIDsAvailable";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);          
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.ListIDsAvailable;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Метод получает таблицу доступов к документам и сделкам пользователя
//
// параметры:
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: таблица доступов или Неопределено
//
Функция AcUserAccess_GetTable(ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтрокаЗапроса = "/adl42/hs/api_v1/AcUserAccess/GetTable";
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);          
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.TableAcUserAccess;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


////////////////////////////  AccauntDataBases  ////////////////////////////
//Коллекция описаний баз данных

//Метод идентифицирует базу данных и возвращает ее ИД
//
// параметры:
//	ListOrganizationsIDs, тип "строка" - список идентификаторов организаций (через разделиьтель ";")  
//	AcDBConnectionString, тип "булево" - строка соединения информационной базы
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: булево
// 
Функция AccauntDataBases_IdentifyDatabase(ListOrganizationsIDs, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("ListOrganizationsIDs, AcDBConnectionString", ListOrganizationsIDs, СтрокаСоединенияИнформационнойБазы());
	СтрокаЗапроса = "/adl42/hs/api_v1/AccauntDataBases/IdentifyDatabase";
	
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);

	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.AccauntDataBaseID;  
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;

КонецФункции


//Метод получает настройки пользователя
//
// параметры:
//	ListOrganizationsIDs, тип "строка" - список идентификаторов организаций (через разделиьтель ";")  
//	AcDBConnectionString, тип "булево" - строка соединения информационной базы
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: булево
// 
Функция AccauntDataBases_GetUserSettings(AccauntDataBaseID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли

	ПользовательИнфБазыИД = "";
	СтрокаЗапроса = "/adl42/hs/api_v1/AccauntDataBases/GetUserSettings?AccauntDataBaseID=" + AccauntDataBaseID + "&DatabaseUserID=" + ПользовательИнфБазыИД;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса);

	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат ПараметрыОтвета.СтруктураОтвета.ТелоОтветаСтрока;  
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

////////////////////////////  АutoloadingDelansAccounts  ////////////////////////////
//Список аккаунтов автозагрузки в Саюри

//Метод получает список документов аккаунта к автозагрузке
//
// параметры:
//	UserID, тип "строка" - идентификатор
//	ErrorDescription, тип "строка" - строка с описанием ошибки
//
// возвращаемые значения: массив или неопределено

Функция АutoloadingDelansAccounts_AddAccountID(AccountID, ErrorDescription) Экспорт
	
	#Если Сервер И НЕ ТолстыйКлиентОбычноеПриложение Тогда
		EfsolADLHTTP = EfsolУниверсальныеФункцииКлиентСервер.HTTPConnection("ADL");
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("AccountID", AccountID);
	СтрокаПараметры = "АutoloadingDelansAccounts/AddAccountID";
	СтрокаЗапроса = "/adl42/hs/api_v1/" + СтрокаПараметры;
	ПараметрыОтвета = EfsolУниверсальныеФункцииКлиентСервер.ВыполнитьЗапрос(EfsolADLHTTP, СтрокаЗапроса, "Post", СтруктураПараметров);
	
	Если ПараметрыОтвета.КодОтвета = 200 Тогда
		Возврат Истина;
	Иначе
		ErrorDescription = ПараметрыОтвета.СтруктураОтвета.Description;
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции
