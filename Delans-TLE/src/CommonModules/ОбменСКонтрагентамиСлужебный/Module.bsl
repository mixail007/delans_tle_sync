////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентамиСлужебный: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Формирует список типов основных (неслужебных) документов.
// 
// Возвращаемое значение:
//  Массив - содержит элементы типа "ПеречислениеСсылка.ТипыЭлементовВерсииЭД".
//
Функция ОсновныеТипыЭД() Экспорт

	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОП"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ЭСФ"));
	
	Возврат Результат;

КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// Регистрация объектов для обмена электронными документами

// Обработчик события "ПередЗаписью" владельцев электронных документов.
//
// Параметры:
//  Источник        - Объект - владелец присоединенного файла.
//  Отказ           - Булево - признак отказа от записи.
//  РежимЗаписи     - РежимЗаписиДокумента - режим записи владельца электронного документа.
//  РежимПроведения - РежимПроведенияДокумента - режим проведения владельца электронного документа.
//
Процедура ОбменСКонтрагентамиВладелецПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ГрупповоеПерепроведение = Неопределено;
	Если Источник.ДополнительныеСвойства.Свойство("ГрупповоеПерепроведение", ГрупповоеПерепроведение)
		И ГрупповоеПерепроведение = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", Истина);
	КонецЕсли;
	
	ТипИсточника = ТипЗнч(Источник);
	
	// ЭД делаем только когда есть действующее соглашение об обмене
	Если (Не Источник.ДополнительныеСвойства.Свойство("ЕстьСоглашение") ИЛИ НЕ Источник.ДополнительныеСвойства.ЕстьСоглашение)
		И Не ТипИсточника = Тип("ДокументОбъект.ПакетЭД") Тогда
		
		ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(Источник);
		НастройкаЭДСуществует = ОбменСКонтрагентамиСлужебныйВызовСервера.НастройкаЭДСуществует(Источник.Ссылка, ПараметрыЭД);
		Если Не НастройкаЭДСуществует Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
	
	ДанныеСостояния = ДанныеСостоянияЭД(Источник.Ссылка);
	ТекущееСостояние = ДанныеСостояния.СостояниеВерсииЭД;
	ПризнакИзменения = Источник.ЭтоНовый();
	ПризнакУчастияВОбмене = Истина;
	ЭлектронноеВзаимодействиеПереопределяемый.ПередЗаписьюВладельцаЭлектронногоДокумента(
		Источник, ПризнакИзменения, ТекущееСостояние, ПризнакУчастияВОбмене, Отказ);
		
	Если Отказ Тогда
		Если ПризнакИзменения Тогда
			ТекстСообщения = НСтр("ru='Существует электронный документ. Изменение ключевых реквизитов документа запрещено.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		Возврат;
	КонецЕсли;
		
	УстановитьСвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОбменСКонтрагентами.ИзмененыКлючевыеРеквизиты", ПризнакИзменения);
	УстановитьСвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОбменСКонтрагентами.УчаствуетВОбмене", ПризнакУчастияВОбмене);
	
КонецПроцедуры

// Обработчик события "ПриЗаписи" владельцев электронных документов.
//
// Параметры:
//  Источник - Объект - владелец присоединенного файла,
//  Отказ    - Булево - признак отказа от записи.
//
Процедура ОбменСКонтрагентамиВладелецПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ГрупповоеПерепроведение = Неопределено;
	Если Источник.ДополнительныеСвойства.Свойство("ГрупповоеПерепроведение", ГрупповоеПерепроведение)
		И ГрупповоеПерепроведение = Истина Тогда
		Возврат;
	КонецЕсли;

	
	Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ЕстьСоглашение")
		ИЛИ НЕ Источник.ДополнительныеСвойства.ЕстьСоглашение Тогда
		
		ПроверитьНаличиеИУдалитьСостояниеДокумента(Источник.Ссылка);
		Возврат;
	КонецЕсли;
	
	// При изменении ключевых реквизитов объекта устанавливается новая версия электронного документа.
	
	ПризнакИзменения = СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОбменСКонтрагентами.ИзмененыКлючевыеРеквизиты", Ложь);
	ПризнакУчастияВОбмене = СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОбменСКонтрагентами.УчаствуетВОбмене", Ложь);
	
	Если ПризнакИзменения ИЛИ Не ПризнакУчастияВОбмене Тогда
		
		ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(Источник.Ссылка,, Истина, ПризнакУчастияВОбмене);
		
	Иначе
		
		ОбновитьОписаниеОснованияЭлектронногоДокумента(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Изменение электронных документов

// Обработчик события "ПередЗаписью" электронных документов.
// 
// Параметры:
//  Источник - Объект - электронный документ.
//  Отказ    - Булево - признак отказа от записи.
//
Процедура ПередЗаписьюЭлектронногоДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ПометкаУдаления Тогда
		ОбработатьУдалениеЭлектронногоДокумента(Источник.Ссылка);
	ИначеЕсли ЗначениеЗаполнено(Источник.НаправлениеЭД)
		И ЗначениеЗаполнено(Источник.ТипЭлементаВерсииЭД)
		И ЗначениеЗаполнено(Источник.ВладелецФайла) Тогда
		
		Если НЕ ЗначениеЗаполнено(Источник.Ссылка) Тогда
			Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Ложь);
		ИначеЕсли Источник.Ссылка.СтатусЭД = Источник.СтатусЭД Тогда			
			Если Источник.Ссылка.Описание <> Источник.Описание Тогда
				Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Истина);
			Иначе
				Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Ложь);
			КонецЕсли;
		Иначе
			Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Истина);
			Источник.ДополнительныеСвойства.Вставить("СостояниеВерсииЭД", ОпределитьСостояниеВерсииПоСтатусуЭД(Источник.Ссылка));
		КонецЕсли;
	КонецЕсли;
	
	Если Источник.ТипЭлементаВерсииЭД <> Перечисления.ТипыЭлементовВерсииЭД.ПДО
	 И Источник.ТипЭлементаВерсииЭД <> Перечисления.ТипыЭлементовВерсииЭД.ПДП Тогда
		// Выполнять смену состояния владельца будем перед записью, так как для формирования маршрута подписания и записи
		// представления прогресса подписания необходимо понять, находится ли он на подписании. 
		СостояниеВерсииЭД = Неопределено;
	
		Если Источник.ДополнительныеСвойства.Свойство("СоглашениеЭД") Тогда
			СостояниеВерсииЭД = ОпределитьСостояниеВерсииПоСтатусуЭД(Источник);
		КонецЕсли;
		
		ВерсияЭДОбновлена = Ложь;
		ПринудительнаяСменаСостоянияВерсии = Неопределено;
		Источник.ДополнительныеСвойства.Свойство("ПринудительнаяСменаСостоянияВерсии", ПринудительнаяСменаСостоянияВерсии);
		ВерсияФорматаПакета = Неопределено;
		Источник.ДополнительныеСвойства.Свойство("ВерсияФорматаПакета", ВерсияФорматаПакета);
		ОтклонениеАннулирования = Неопределено;
		Источник.ДополнительныеСвойства.Свойство("ОтклонениеАннулирования", ОтклонениеАннулирования);

		Если Источник.ДополнительныеСвойства.Свойство("СостояниеВерсииЭД") Тогда
			
			СледСостояниеВерсииЭД = Источник.ДополнительныеСвойства.СостояниеВерсииЭД;
			СтруктураТекВерсииЭД  = ПараметрыВерсииЭлектронногоДокумента(Источник.ВладелецФайла);
			
			ОбновитьВерсию = СостояниеВерсииЭД <> СтруктураТекВерсииЭД.СостояниеВерсииЭД
				И Не ЭтоОтветныйТитул(Источник.ТипЭлементаВерсииЭД);
			Если ОбновитьВерсию Тогда
				ВерсияЭДОбновлена = Истина;
				ОбновитьВерсиюЭД(Источник, ПринудительнаяСменаСостоянияВерсии, ВерсияФорматаПакета, ОтклонениеАннулирования);
			КонецЕсли;
			
			НовоеСостояниеЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.ВладелецФайла, "СостояниеЭДО");
			Если ДокументОтправленНаПодпись(Источник) Тогда
				// При отправке документа на подпись заполняем маршрут подписания
				ВыполнитьДействияСМаршрутамиПриОтправкеНаПодпись(Источник);	
			ИначеЕсли СтруктураТекВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НаПодписи 
				И НовоеСостояниеЭДО = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент Тогда
				// При отказе от подписи очищаем маршрут подписания
				
				// Это может быть новый объект - нужно корректно получить ссылку
				СсылкаДокумента = ЭлектронноеВзаимодействиеСлужебный.ПолучитьСсылкуОбъектаБезопасно(Источник);
				ЭлектронноеВзаимодействиеСлужебный.ОчиститьМаршрутПодписания(СсылкаДокумента);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПриЗаписи" электронных документов.
// 
// Параметры:
//  Источник - Объект - электронный документ.
//  Отказ    - Булево - признак отказа от записи.
//
Процедура ПриЗаписиЭлектронногоДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗаписатьСобытиеЖР")
		 И Источник.ДополнительныеСвойства.ЗаписатьСобытиеЖР Тогда
		ЗаписатьСобытиеЖурналаРегистрацииПоОбменуЭД(Источник.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение объектов

// Получение выборки элементов справочника ЭДПрисоединенныеФайлы по отбору.
//
// Параметры:
//  Параметры - Структура - ключ - название реквизита отбора, значение - значение отбора.
//
// Возвращаемое значение:
//  ОбходРезультатаЗапроса - выборка электронных документов.
//
Функция ПолучитьВыборкуЭДПоОтбору(Параметры) Экспорт
	
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") ИЛИ Параметры.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	ЭДПрисоединенныеФайлы.Наименование,
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ПакетЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|";
	
	ПервыйЭлемент = Истина;
	Для Каждого Элемент Из Параметры Цикл
		Запрос.Текст = Запрос.Текст + ?(НЕ ПервыйЭлемент," И ","") + " ЭДПрисоединенныеФайлы." + Элемент.Ключ + "=&" + Элемент.Ключ;
		ПервыйЭлемент = Ложь;
		Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Заполняет реквизит "Организация" при однофирменном учете.
//
// Параметры:
//  Источник - Ссылка - источник события
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - Признак выполнения стандартной (системной) обработки события.
//
Процедура ЗаполнитьЗначениеРеквизитаОрганизацияПриОдноФирменномУчете(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	ИспользуетсяНесколькоОрганизаций = Ложь;
	ОрганизацияПоУмолчанию = Неопределено;
	
	ИспользуетсяНесколькоОрганизаций = ЭлектронноеВзаимодействиеСлужебный.ИспользуетсяНесколькоОрганизаций();
	
	Если НЕ ИспользуетсяНесколькоОрганизаций И ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", Источник.Метаданные())
		И Не ЗначениеЗаполнено(Источник.Организация) Тогда
		
		Источник.Организация = ЭлектронноеВзаимодействиеСлужебный.ОрганизацияПоУмолчанию();
		
		Если Не ЗначениеЗаполнено(Источник.Организация) Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось определить организацию.'");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Регламентные задания

// Выполняет регламентное задание по получению новых электронных документов.
//
Процедура ПолучитьНовыеЭлектронныеДокументы() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПолучениеЭлектронныхДокументов);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		ВызватьИсключение
			НСтр("ru = 'Работа регламентного задания в режиме сервиса не предусмотрена.'");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Текст = НСтр("ru = 'Начато регламентное задание по получению новых эл.документов.'");
	ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
		Текст, "РегламентныеЗадания", УровеньЖурналаРегистрации.Информация);
	
	Попытка
		СоотвСоглашений = Неопределено;
		КоличествоПакетов = 0; КолРаспакованныхЭД = 0;
		Если ДоступныПараметрыДляАвторизацииНаСервереОператора( , СоотвСоглашений) Тогда
			
			ОбменСКонтрагентамиСлужебныйВызовСервера.ОбновитьСтатусыПодключенияНастроекЭДО(СоотвСоглашений);
			
		КонецЕсли;
		
		НовыеДокументы = ПолучитьНовыеЭД(СоотвСоглашений);
		КоличествоПакетов = НовыеДокументы.МассивПакетовЭД.Количество();
		
		ДополнитьПакетамиКРаспаковке(НовыеДокументы.МассивПакетовЭД, НовыеДокументы.Профили);
		
		// Распаковываем принятые пакеты с электронными документами.
		РаспаковатьПакетыЭДНаСервере(НовыеДокументы.МассивПакетовЭД, КолРаспакованныхЭД);
		
		ШаблонСообщения = НСтр("ru = 'Закончено регламентное задание.
									|Получено пакетов: %1. Распаковано: %2.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КоличествоПакетов, КолРаспакованныхЭД);
		
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения, "РегламентныеЗадания",
			УровеньЖурналаРегистрации.Информация);
	Исключение
		
		Операция = НСтр("ru = 'Регламентное получение электронных документов'");
		
		ШаблонСообщения = НСтр("ru = 'При процессе выполнении произошла ошибка: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Выполняет регламентное задание по фактической отправке электронных документов.
Процедура ОтправитьЭлектронныеДокументы() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаЭлектронныхДокументов);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		ВызватьИсключение
			НСтр("ru = 'Работа регламентного задания в режиме сервиса не предусмотрена.'");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Текст = НСтр("ru = 'Начато регламентное задание по отправке оформленных эл.документов.'");
	ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(Текст, "РегламентныеЗадания", УровеньЖурналаРегистрации.Информация);
	
	Попытка
		КоличествоПакетов = ОтправкаСформированныхЭД();
		Текст = НСтр("ru = 'Закончено регламентное задание. Отправлено пакетов: %КоличествоПакетов%.'");
		Текст = СтрЗаменить(Текст, "%КоличествоПакетов%", КоличествоПакетов);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(Текст, "РегламентныеЗадания", УровеньЖурналаРегистрации.Информация);
	Исключение
		ОписаниеОшибки = НСтр("ru = 'Во время регламентной отправки оформленных эл.документов произошла ошибка.
		|Дополнительное описание:
		|%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ОписаниеОшибки, "РегламентныеЗадания", УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки;
	
КонецПроцедуры

// Метод регламентного задания по управлению проверкой контрагентов в справочнике.
// Создает подчиненное регламентное задание ПроверкаКонтрагентовБЭДВыполнение.
Процедура ПроверитьКонтрагентовРегламентноеЗадание() Экспорт
	
	МетаданныеОсновногоЗадания = Метаданные.РегламентныеЗадания.ПроверкаКонтрагентовБЭД;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(МетаданныеОсновногоЗадания);
	
	МетаданныеПодчиненногоЗадания = Метаданные.РегламентныеЗадания.ПроверкаКонтрагентовБЭДВыполнение;
	
	// Удалим подчиненные задания выполнения проверки, если они остались с предыдущего раза.
	
	ОтборЗадания = Новый Структура;
	ОтборЗадания.Вставить("Метаданные", МетаданныеПодчиненногоЗадания);
	
	ВсеЗадания = РегламентныеЗаданияСервер.НайтиЗадания(ОтборЗадания);
	Для каждого Задание Из ВсеЗадания Цикл
		РегламентныеЗаданияСервер.УдалитьЗадание(Задание.УникальныйИдентификатор);
	КонецЦикла;
	
	// Добавим подчиненное задание для выполнения проверки контрагентов.
	// Запустим задание в случайный момент в интервале следующих 0,5 - 10 минут.
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	СекундДоСтарта = ГСЧ.СлучайноеЧисло(30, 600);
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ВремяНачала = ТекущаяДатаСеанса() + СекундДоСтарта;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Истина);
	ПараметрыЗадания.Вставить("Метаданные", МетаданныеПодчиненногоЗадания);
	ПараметрыЗадания.Вставить("Наименование", МетаданныеОсновногоЗадания.Синоним + " (" + Формат(Расписание.ВремяНачала, "ДЛФ=T") + ")");
	ПараметрыЗадания.Вставить("Расписание", Расписание);
	ПараметрыЗадания.Вставить("Ключ", "1");
	
	РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	
КонецПроцедуры

// Метод регламентного задания по проверке контрагентов в справочнике.
// 		В модели сервиса обновляет состояния контрагентов по каждой записи регистра.
// 		В локальном режима записывает недостающих контрагентов в регистр и обновляет состояния по каждой записи регистра.
Процедура ПроверитьКонтрагентовВыполнениеРегламентноеЗадание() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПроверкаКонтрагентовБЭДВыполнение);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СостоянияКонтрагентов.Контрагент,
	|	СостоянияКонтрагентов.ИНН,
	|	СостоянияКонтрагентов.КПП,
	|	СостоянияКонтрагентов.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,
	|	&Дата КАК Дата
	|ИЗ
	|	РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентов";

	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"СостоянияКонтрагентов.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,",
			"");
			
	КонецЕсли;

	// Указываем дату, на которую будет выполняться проверка.
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса()));
	ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
	
	// Выполняется проверка только тех ИНН и КПП, которые записаны в регистр.
	ПроверитьКонтрагентов(ДанныеКонтрагентов);
	
	// Дозаписываем недостающие ИНН и КПП в регистр в локальном режиме.
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		ПроверитьНепроверенныхКонтрагентов(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Проверка наличия новых электронных документов.
//
Процедура ПроверитьНовыеЭлектронныеДокументы() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПроверкаНовыхЭлектронныхДокументов);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписиЭД") Тогда
		Возврат;
	КонецЕсли;
	
	СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрофилиНастроекЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|ГДЕ
	|	ПрофилиНастроекЭДО.СпособОбменаЭД = &СпособОбменаЭД
	|	И ПрофилиНастроекЭДО.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("СпособОбменаЭД", СпособОбмена);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Соединение = ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(СпособОбмена);
	
	ИдентификаторыЕстьЭДО = Новый Массив;
	ИдентификаторыНетЭДО = Новый Массив;
	
	ВидОперации = НСтр("ru = 'Получение информации о новых электронных документах'");
	
	Пока Выборка.Следующий() Цикл
		
		ИдентификаторОрганизации = Выборка.ИдентификаторОрганизации;
		
		Если Не УведомленияПодключены(ИдентификаторОрганизации, Соединение) Тогда
			ИдентификаторыНетЭДО.Добавить(ИдентификаторОрганизации);
			Продолжить;
		КонецЕсли;
		
		ИмяМетода = "IsMessagesExists?query=" + Выборка.ИдентификаторОрганизации;
		Запрос = Новый HTTPЗапрос(ИмяМетода);
		
		Попытка
			Ответ = Соединение.Получить(Запрос);
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Ошибка выполнения команды сервиса.'");
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
				
			Продолжить;
		КонецПопытки;
		
		Если Не Ответ.КодСостояния = 200 Тогда
			
			ШаблонСообщения = НСтр("ru = 'Код ответа сервиса %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Ответ.КодСостояния);
			
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстСообщения);
			
			Продолжить;
		КонецЕсли;
		
		Результат = Ответ.ПолучитьТелоКакСтроку();
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(Результат);
		ЭДО = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		
		ЕстьНовыйЭД = ЗначениеСтатуса(ЭДО.Result);
		Если ЕстьНовыйЭД Тогда
			ИдентификаторыЕстьЭДО.Добавить(ИдентификаторОрганизации);
		Иначе
			ИдентификаторыНетЭДО.Добавить(ИдентификаторОрганизации);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьИдентификаторыЭДО(ИдентификаторыЕстьЭДО);
	ОбновитьИдентификаторыЭДО(ИдентификаторыНетЭДО, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с ЭП

// Процедура - Сохранить вместе с последней ЭП.
//
// Параметры:
//  ПрисоединенныйФайл - Файл - файл для сохранения.
//  ДанныеФайла - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ.
//  АдресКаталога - Строка - путь для сохранения.
//  СоответствиеФайлЭД - Соответствие - соответствие файлов и электронных подписей.
//
Процедура СохранитьВместеСПоследнейЭП(ПрисоединенныйФайл, ДанныеФайла, АдресКаталога, СоответствиеФайлЭД) Экспорт
	
	ПолноеИмяФайла = АдресКаталога + ДанныеФайла.ИмяФайла;
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	МассивСтруктурПодписей = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл);
	
	Файл = Новый Файл(АдресКаталога);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(АдресКаталога);
	КонецЕсли;
	
	Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
		КоличествоПодписей = МассивСтруктурПодписей.Количество();
		Для Сч = 1 По КоличествоПодписей - 1 Цикл
			МассивСтруктурПодписей.Удалить(0);
		КонецЦикла;
		СохранитьПодписи(
				ПрисоединенныйФайл,
				ПолноеИмяФайла,
				МассивСтруктурПодписей,
				АдресКаталога,
				СоответствиеФайлЭД,
				Истина);
	КонецЕсли;
	
КонецПроцедуры

// Сохранение электронного документа с электронной подписью.
//
// Параметры:
//  ПрисоединенныйФайл - Файл - файл для сохранения.
//  ДанныеФайла - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ.
//  АдресКаталога - Строка - путь для сохранения.
//  СоответствиеФайлЭД - Соответствие - соответствие файлов и электронных подписей.
//  ЭтоПроизвольныйДокумент - Булево - признак произвольного документа.
//
Процедура СохранитьВместеСЭП(ПрисоединенныйФайл,
								ДанныеФайла,
								АдресКаталога,
								СоответствиеФайлЭД,
								ЭтоПроизвольныйДокумент = Неопределено) Экспорт
	
	// Для подтверждения необходимо в каталог формирования файлов сохранить только последнюю подпись.
	ПолноеИмяФайла = СохранитьФайлКак(ДанныеФайла, АдресКаталога, ПрисоединенныйФайл, ЭтоПроизвольныйДокумент, СоответствиеФайлЭД);
	Если ПолноеИмяФайла = "" Тогда
		Возврат;
	КонецЕсли;
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	МассивСтруктурПодписей = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл);

	Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
		СохранитьПодписи(ПрисоединенныйФайл, ПолноеИмяФайла, МассивСтруктурПодписей, АдресКаталога,
			СоответствиеФайлЭД, , ЭтоПроизвольныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

// Сертификаты электронных документов

// Функция возвращает пересечение массива сертификатов, установленных в личном хранилище
// с массивом сертификатов зарегистрированных в 1с (действующих и доступных текущему пользователю).
// В случае, если передан необязательный параметр НастройкаЭДО, то массив зарегистрированных в 1с сертификатов,
// дополнительно ограничивается условием вхождения в список зарегистрированных по данной настройке или профилю сертификатов.
//
// Параметры:
//  МассивОтпечатков - Массив - содержит строки отпечатков сертификатов, установленных в хранилище на Клиенте/Сервере
//                     (в зависимости от настроек работы с криптографией).
//  НастройкаЭДО - СправочникСсылка.СоглашенияОбИспользованииЭД, СправочникСсылка.ПрофилиНастроекЭДО - объект, для
//                                                                 которого требуется получить список сертификатов.
//  ОграничиватьПоПользователям - Булево - определяет, будет ли применен фильтр по пользователям при выборе
//                                         доступных сертификатов.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица сертификатов.
//
Функция ТаблицаДоступныхДляПодписиСертификатов(МассивОтпечатков, НастройкаЭДО = Неопределено,
	ОграничиватьПоПользователям = Истина) Экспорт
	
	ВозвращаемоеЗначение = Новый ТаблицаЗначений;
	Если ТипЗнч(МассивОтпечатков) = Тип("Массив") Тогда
		ПереданыСсылки = МассивОтпечатков.Количество() > 0 
			И ТипЗнч(МассивОтпечатков[0]) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования");
		
		ЗапросПоСертификатам = Новый Запрос;
		Если ТипЗнч(НастройкаЭДО) = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД") Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Сертификаты.Ссылка,
			|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя,
			|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
			|	ЛОЖЬ КАК ПарольПолучен,
			|	Сертификаты.Отпечаток
			|ИЗ
			|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
			|			ПО Сертификаты.Ссылка = ВидыЭДЭП.СертификатЭП
			|		ПО СоглашенияЭДСертификаты.Сертификат = Сертификаты.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
			|		ПО СоглашенияЭДСертификаты.Ссылка = СоглашенияОбИспользованииЭД.Ссылка
			|ГДЕ
			|	СоглашенияОбИспользованииЭД.Ссылка = &НастройкаЭДО";
			ЗапросПоСертификатам.УстановитьПараметр("НастройкаЭДО", НастройкаЭДО);
		ИначеЕсли ТипЗнч(НастройкаЭДО) = Тип("СправочникСсылка.ПрофилиНастроекЭДО") Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Сертификаты.Ссылка,
			|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя,
			|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
			|	ЛОЖЬ КАК ПарольПолучен,
			|	Сертификаты.Отпечаток
			|ИЗ
			|	Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофильНастроекЭДОСертификаты
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
			|			ПО Сертификаты.Ссылка = ВидыЭДЭП.СертификатЭП
			|		ПО ПрофильНастроекЭДОСертификаты.Сертификат = Сертификаты.Ссылка
			|ГДЕ
			|	ПрофильНастроекЭДОСертификаты.Ссылка = &НастройкаЭДО";
			ЗапросПоСертификатам.УстановитьПараметр("НастройкаЭДО", НастройкаЭДО);
		Иначе
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Сертификаты.Ссылка,
			|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя,
			|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
			|	ЛОЖЬ КАК ПарольПолучен,
			|	Сертификаты.Отпечаток
			|ИЗ
			|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
			|ГДЕ
			|	НЕ Сертификаты.Отозван";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
			|	И НЕ Сертификаты.ПометкаУдаления";
		
		Если ОграничиватьПоПользователям Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И (Сертификаты.Пользователь = &ТекущийПользователь
			|			ИЛИ Сертификаты.Пользователь = &ПустойПользователь
			|			ИЛИ Сертификаты.Пользователь = &ПользовательНеУказан)";
		КонецЕсли;
		
		Если ПереданыСсылки Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И Сертификаты.Ссылка В (&МассивОтпечатков)";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|	И Сертификаты.Отпечаток В (&МассивОтпечатков)"
		КонецЕсли;

		ЗапросПоСертификатам.Текст = ТекстЗапроса;
			
		ЗапросПоСертификатам.УстановитьПараметр("ТекущийПользователь",	Пользователи.АвторизованныйПользователь());
		ЗапросПоСертификатам.УстановитьПараметр("ПустойПользователь",	Справочники.Пользователи.ПустаяСсылка());
		ЗапросПоСертификатам.УстановитьПараметр("ПользовательНеУказан",	Пользователи.СсылкаНеуказанногоПользователя());
		ЗапросПоСертификатам.УстановитьПараметр("МассивОтпечатков",		МассивОтпечатков);
		ВозвращаемоеЗначение = ЗапросПоСертификатам.Выполнить().Выгрузить();
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Функция возвращает пересечение массива сертификатов, установленных в личном хранилище
// с массивом сертификатов зарегистрированных в 1с (действующих и доступных текущему пользователю).
// В случае, если передан необязательный параметр СоглашениеЭД, то массив зарегистрированных в 1с сертификатов,
// дополнительно ограничивается условием вхождения в список зарегистрированных, по данному соглашению, сертификатов.
//
// Параметры:
//  МассивОтпечатковСертификатов - Массив - массив отпечатков сертификатов, установленных в хранилище на Клиенте/Сервере
//                                 (в зависимости от настроек работы с криптографией).
//  НастройкаЭДО - СправочникСсылка.СоглашенияОбИспользованииЭД - ссылка на соглашение об обмене ЭД через оператора ЭДО,
//                                                                список сертификатов которого требуется.
//   ОграничиватьПоПользователям - Булево - определяет, будет ли применен фильтр по пользователям при выборе
//                                          доступных сертификатов.
//
// Возвращаемое значение:
//  Массив - массив структур сертификатов.
//
Функция МассивСтруктурДоступныхДляПодписиСертификатов(МассивОтпечатковСертификатов, НастройкаЭДО = Неопределено, 
	ОграничиватьПоПользователям = Истина) Экспорт
	
	МассивСтруктурДоступныхСертификатов = Новый Массив;
	
	ТаблицаДоступныхСертификатов = ТаблицаДоступныхДляПодписиСертификатов(МассивОтпечатковСертификатов, НастройкаЭДО,
		ОграничиватьПоПользователям);
	Для Каждого ТекЭл Из МассивОтпечатковСертификатов Цикл
		СтрокаТаблицы = ТаблицаДоступныхСертификатов.Найти(ТекЭл, "Отпечаток");
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтруктураСертификата = Новый Структура;
		СтруктураСертификата.Вставить("Отпечаток",                   ТекЭл);
		СтруктураСертификата.Вставить("Сертификат",                  СтрокаТаблицы.Ссылка);
		СтруктураСертификата.Вставить("ПарольПолучен",               СтрокаТаблицы.ПарольПолучен);
		СтруктураСертификата.Вставить("ПарольПользователя",          СтрокаТаблицы.ПарольПользователя);
		СтруктураСертификата.Вставить("ЗапомнитьПарольКСертификату", СтрокаТаблицы.ЗапомнитьПарольКСертификату);
		СтруктураСертификата.Вставить("Комментарий",                 "");
		
		МассивСтруктурДоступныхСертификатов.Добавить(СтруктураСертификата);
	КонецЦикла;
	
	Возврат МассивСтруктурДоступныхСертификатов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями электронных документов

// Получает номер текущей версии электронного документа для владельца.
// 
// Параметры:
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, номер версии электронного документа которого надо получить.
//
// Возвращаемое значение:
//  Число - номер версии.
//
Функция НомерВерсииЭДПоВладельцу(СсылкаНаВладельца) Экспорт
	
	СтруктураВерсииЭД = ПараметрыВерсииЭлектронногоДокумента(СсылкаНаВладельца);
	Если ЗначениеЗаполнено(СтруктураВерсииЭД.НомерВерсииЭД) Тогда
		Возврат СтруктураВерсииЭД.НомерВерсииЭД;
	КонецЕсли;

	Возврат ПолучитьПоследнююВерсиюЭДПоВладельцу(СсылкаНаВладельца) + 1;
	
КонецФункции

// Получение первого состояния версии электронного документа для владельца.
//
// Параметры:
//  СсылкаНаВладельца - Ссылка - ссылка на владельца электронного документа.
//  ПризнакПолучения - Булево - признак получения для входящего документа.
// 
// Возвращаемое значение:
//  Перечисление.СостоянияВерсийЭД - состояние версии.
//
Функция ПолучитьПервоеСостояниеВерсииЭДДляВладельца(СсылкаНаВладельца, ПризнакПолучения = Ложь) Экспорт
	
	ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаВладельца);
	
	СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
	НаправлениеЭД = "";
	Если ПараметрыЭД.Свойство("НаправлениеЭД", НаправлениеЭД) И ЗначениеЗаполнено(НаправлениеЭД) Тогда
		Если НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
			ИЛИ НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			
			СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован;
		ИначеЕсли НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			Если ПризнакПолучения Тогда 
				СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НаУтверждении;
			Иначе
				СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеПолучен;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеВерсииЭД;
	
КонецФункции

// Получение данных состояния электронного документа.
//
// Параметры:
//  СсылкаНаВладельца - ДокументСсылка.ЭлектронныйДокументВходящий, ЭлектронныйДокументИсходящий - электронный документ.
// 
// Возвращаемое значение:
//  Структура - состояние электронного документа.
//    * СостояниеВерсииЭД - ПеречислениеСсылка.СостоянияВерсийЭД - состояние версии.
//    * КомментарийРС - Строка - комментарий.
//
Функция ДанныеСостоянияЭД(СсылкаНаВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СостояниеЭД = Новый Структура;
	СостояниеЭД.Вставить("СостояниеВерсииЭД", Перечисления.СостоянияВерсийЭД.ПустаяСсылка());
	СостояниеЭД.Вставить("КомментарийРС", "");
	
	Если ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
		ИЛИ ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
		
			СостояниеЭД.Вставить("СостояниеВерсииЭД", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				СсылкаНаВладельца,"СостояниеЭДО"));
				
			Если СостояниеЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно Тогда 
				СостояниеЭД.Вставить("КомментарийРС", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					СсылкаНаВладельца,"ПричинаОтклонения"));
			КонецЕсли;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СостояниеВерсииЭД КАК СостояниеВерсииЭД,
		|	СостоянияЭД.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
		Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаВладельца);
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			СостояниеЭД.Вставить("СостояниеВерсииЭД", Выборка.СостояниеВерсииЭД);
			СостояниеЭД.Вставить("КомментарийРС", Выборка.Комментарий);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен через FTP

// Подготовка пути FTP.
//
// Параметры:
//  Путь - Строка - путь для FTP сервера.
//
Процедура ПодготовитьПутьFTP(Путь) Экспорт
	
	Путь = СтрЗаменить(Путь, "\", "/");
	Если ЗначениеЗаполнено(Путь) Тогда
		Если НЕ Лев(Путь, 1) = "/" Тогда
			Путь = "/" + Путь;
		КонецЕсли;
		Если НЕ Прав(Путь, 1) = "/" Тогда
			Путь = Путь + "/";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура используется для проведения тестирования настроек обмена через FTP.
//
// Параметры:
//  ПрофильНастроекЭДО - СправочникСсылка.Соглашение - тестируемое соглашение.
//  КаталогВходящихДокументов - Строка - путь к каталогу обмена входящими документами.
//  КаталогИсходящихДокументов - Строка - путь к каталогу обмена исходящими документами.
//
Процедура ТестСвязиОбменаЧерезFTP(ПрофильНастроекЭДО, КаталогВходящихДокументов, КаталогИсходящихДокументов) Экспорт
	
	FTPСоединение = ПолучитьFTPСоединение(ПрофильНастроекЭДО, Истина);
	
	Если FTPСоединение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'Проверка каталога исходящих документов.
							|%1'");
	
	ТекстОшибки = "";
	Попытка
		ПодготовитьПутьFTP(КаталогИсходящихДокументов);
		FTPСоединение.УстановитьТекущийКаталог(КаталогИсходящихДокументов);
	Исключение
		СоздатьКаталогиFTP(FTPСоединение, КаталогИсходящихДокументов, Истина, ТекстОшибки);
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		РезультатТеста = ТекстОшибки;
	Иначе
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
	ТекстСообщения = НСтр("ru = 'Тест обмена по профилю %1.'") + " " + ТекстСообщения;
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПрофильНастроекЭДО);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'Проверка записи и чтения файлов в каталоге исходящих документов.
									|%1'");
		ПроверитьФайл(ШаблонСообщения, FTPСоединение, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			РезультатТеста = ТекстОшибки;
		Иначе
			РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ТекстСообщения = НСтр("ru = 'Тест обмена по профилю %1.'") + " " + ТекстСообщения;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПрофильНастроекЭДО);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ТекстОшибки = "";
	
	ШаблонСообщения = НСтр("ru = 'Проверка каталога входящих документов.
		|%1'");
	Попытка
		ПодготовитьПутьFTP(КаталогВходящихДокументов);
		FTPСоединение.УстановитьТекущийКаталог(КаталогВходящихДокументов);
	Исключение
		СоздатьКаталогиFTP(FTPСоединение, КаталогВходящихДокументов, Истина, ТекстОшибки);
	КонецПопытки;
		
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		РезультатТеста = ТекстОшибки;
	Иначе
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
	ТекстСообщения = НСтр("ru = 'Тест обмена по профилю %1.'") + " " + ТекстСообщения;
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПрофильНастроекЭДО);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'Проверка записи и чтения файлов в каталоге входящих документов.
									|%1'");
		ПроверитьФайл(ШаблонСообщения, FTPСоединение, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			РезультатТеста = ТекстОшибки;
		Иначе
			РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ТекстСообщения = НСтр("ru = 'Тест обмена по профилю %1.'") + " " + ТекстСообщения;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПрофильНастроекЭДО);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Создание каталогов на FTP сервере
//
// Параметры:
//  FTPСоединение - FTPСоединение - соединение с FTP сервером.
//  ПолныйПуть - Строка - путь для создания каталога.
//  ЭтоТест - Булево - признак тестирования.
//  ТекстОшибки - Строка - текст ошибки создания.
//
Процедура СоздатьКаталогиFTP(FTPСоединение, ПолныйПуть, ЭтоТест = Ложь, ТекстОшибки = Неопределено) Экспорт
	
	ПолныйПуть = СтрЗаменить(ПолныйПуть, "\", "/");
	МассивКаталогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолныйПуть, "/", Истина);
	ТекущийПуть = "/";
	FTPСоединение.УстановитьТекущийКаталог(ТекущийПуть);
	Для Каждого Элемент Из МассивКаталогов Цикл
		
		мКаталог = Новый Массив;
		
		НайтиФайлыВКаталогеFTP(FTPСоединение, Элемент, Неопределено, Истина, ТекстОшибки, мКаталог);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Возврат;
		КонецЕсли;
		
		Если мКаталог.Количество() = 1 Тогда 
			Если мКаталог[0].ЭтоФайл() Тогда 
				ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("122");
				Если НЕ ЭтоТест Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				КонецЕсли;
				Возврат;
			КонецЕсли;
			СоздаватьКаталог = Ложь;
		Иначе
			СоздаватьКаталог = Истина;
		КонецЕсли;

		Если СоздаватьКаталог Тогда
			Попытка
				FTPСоединение.СоздатьКаталог(Элемент);
			Исключение
				ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("123");
				Если НЕ ЭтоТест Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				КонецЕсли;
				Возврат;
			КонецПопытки
		КонецЕсли;
		
		ТекущийПуть = ТекущийПуть + Элемент + "/";
		
		Попытка
			FTPСоединение.УстановитьТекущийКаталог(ТекущийПуть);
		Исключение
			ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("124");
			Если НЕ ЭтоТест Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
		КонецПопытки
		
	КонецЦикла;
	
КонецПроцедуры

// Запись файла на FTP.
//
// Параметры:
//  FTPСоединение - FTPСоединение - соединение FTP.
//  Источник - Строка - информация для записи.
//  ИмяВыходногоФайла - Строка - имя файла.
//  ЭтоТест - Булево - для тестирования не выводится результат теста в случае ошибки.
//  РезультатТеста - Строка - сообщение об ошибке.
//
Процедура ЗаписатьФайлНаFTP(FTPСоединение,
							Источник,
							ИмяВыходногоФайла,
							ЭтоТест = Ложь,
							РезультатТеста = Неопределено) Экспорт
	
	Попытка
		FTPСоединение.Записать(Источник, ИмяВыходногоФайла);
	Исключение
		РезультатТеста = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("127");
		
		Если НЕ ЭтоТест Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		КонецЕсли;
	КонецПопытки;

КонецПроцедуры

// Загружает файл с FTP источника.
//
// Параметры:
//  FTPСоединение - FTPСоединение - используемое соединение для получения файла.
//  Источник - Строка - адрес ресурса.
//  ИмяВыходногоФайла - Строка - имя файла, в который помещаются данные полученного ресурса.
//  ЭтоТест - Булево - получение файла выполняется в рамках тестирования.
//  РезультатТеста - Строка - текст ошибки, если она возникнет.
//
Процедура ПолучитьФайлСFTP(FTPСоединение, Источник, ИмяВыходногоФайла, ЭтоТест = Ложь, РезультатТеста = Неопределено) Экспорт
	
	Попытка
		FTPСоединение.Получить(Источник, ИмяВыходногоФайла);
	Исключение
		РезультатТеста = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("128");
		
		Если НЕ ЭтоТест Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Удаляет файл с FTP источника.
//
// Параметры:
//    FTPСоединение - FTPСоединение - используемое соединение для получения файла.
//    Путь - Строка - путь к удаляемым файлам на сервере.
//    РезультатТеста - Строка - текст ошибки, если она возникнет.
//    ЭтоТест - Булево - получение файла выполняется в рамках тестирования.
//
Процедура УдалитьФайлFTP(FTPСоединение, Путь, РезультатТеста = Неопределено, ЭтоТест = Ложь) Экспорт
	
	Попытка
		FTPСоединение.Удалить(Путь);
	Исключение
		РезультатТеста = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("129");
		
		Если НЕ ЭтоТест Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка пакетов электронных документов

// Формирование нового пакета электронного документа.
//
// Параметры:
//  СтруктураПараметров - Структура - параметры для формирования.
// 
// Возвращаемое значение:
//  ДокументСсылка.ПакетЭД - сформированный документ ПакетЭД.
//
Функция СформироватьНовыйПакетЭД(СтруктураПараметров) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ПакетЭД                         = Документы.ПакетЭД.СоздатьДокумент();
		ПакетЭД.Дата                    = ТекущаяДатаСеанса();
		ПакетЭД.СтатусПакета            = СтруктураПараметров.СтатусПакета;
		
		ПакетЭД.Направление             = СтруктураПараметров.НаправленияЭД;
		
		ПакетЭД.Контрагент              = СтруктураПараметров.Контрагент;
		ПакетЭД.Организация             = СтруктураПараметров.Организация;
		
		ПакетЭД.Отправитель             = СтруктураПараметров.Отправитель;
		ПакетЭД.Получатель              = СтруктураПараметров.Получатель;
		
		Если СтруктураПараметров.Свойство("ПрофильНастроекЭДО") Тогда
			ПакетЭД.ПрофильНастроекЭДО      = СтруктураПараметров.ПрофильНастроекЭДО;
		КонецЕсли;
		
		ПакетЭД.НастройкаЭДО            = СтруктураПараметров.НастройкаЭДО;
		ПакетЭД.СпособОбменаЭД          = СтруктураПараметров.СпособОбменаЭД;
		
		ПакетЭД.ВерсияФорматаПакета     = СтруктураПараметров.ВерсияФорматаПакета;
		
		ПакетЭД.ДанныеЗашифрованы       = СтруктураПараметров.Зашифрован;
		Если СтруктураПараметров.СертификатОрганизацииДляРасшифровки <> Неопределено Тогда
			ПакетЭД.СертификатШифрования = СтруктураПараметров.СертификатОрганизацииДляРасшифровки;
		КонецЕсли;
		
		ПакетЭД.АдресРесурсаКонтрагента = СтруктураПараметров.АдресОтправителя;
		ПакетЭД.АдресРесурсаОрганизации = СтруктураПараметров.АдресПолучателя;
		
		Если СтруктураПараметров.Свойство("ВнешнийУИД") Тогда
			ПакетЭД.ВнешнийУИД          = СтруктураПараметров.ВнешнийУИД;
		КонецЕсли;
		ПакетЭД.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'создание нового ПакетаЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
	КонецПопытки;
	
	Возврат ПакетЭД.Ссылка;
	
КонецФункции

// Помещение пакета электронного документа в конверт.
//
// Параметры:
//  Конверт					 - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ.
//  АдресАрхиваКонтейнера	 - Строка - имя файла.
//
Процедура ПоместитьПакетЭДВКонверт(Конверт, АдресАрхиваКонтейнера) Экспорт
	
	// Так как теперь может быть несколько документов в одном пакете, надо проверять, есть ли
	// уже присоединенные файлы к пакету. Если есть - ничего не делать.
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", Конверт));
	
	Если ЗначениеЗаполнено(Выборка) И Выборка.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(АдресАрхиваКонтейнера);
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(АдресАрхиваКонтейнера);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	
	ПараметрыФайла = Новый Структура();
	ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	ПараметрыФайла.Вставить("ВладелецФайлов", Конверт);
	ПараметрыФайла.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки", СтрЗаменить(Файл.Расширение,".", ""));
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");

	ДобавленныйФайл = РаботаСФайлами.ДобавитьФайл(
		ПараметрыФайла, АдресВоВременномХранилище);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов

// Определение настройки обмена ЭД по источнику - документу базы данных или по ЭД.
//
// Параметры:
//  Источник - Ссылка - ссылка на источник.
//  ВыводитьСообщения - Булево - выводить сообщения об ошибках.
//  МассивОтпечатковСертификатов - Массив - отпечатки сертификатов.
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ.
//  ВидЭД - ПеречислениеСсылка.ВидыЭД - вид электронного документа.
//  ФлагДействующиеСоглашения - Булево - отбор по действующим настройкам ЭДО.
// 
// Возвращаемое значение:
//  Структура - настройки обмена.
//
Функция ОпределитьНастройкиОбменаЭДПоИсточнику(
				Источник,
				ВыводитьСообщения = Истина,
				МассивОтпечатковСертификатов = Неопределено,
				ЭД = Неопределено,
				ВидЭД = Неопределено,
				ФлагДействующиеСоглашения = Истина) Экспорт
				
	ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(Источник);
	
	// Заполним ВидЭД в случае непосредственного выбора пользователем.
	Если ЗначениеЗаполнено(ВидЭД) Тогда
		ПараметрыЭД.ВидЭД = ВидЭД;
	КонецЕсли;
	
	Результат = ОпределитьНастройкиОбменаЭД(ПараметрыЭД, МассивОтпечатковСертификатов, ФлагДействующиеСоглашения);
	
	Если Результат = Неопределено Тогда
		Если ВыводитьСообщения Тогда
			ПараметрыЭД.Удалить("ИмяРеквизитаОрганизации");
			ПараметрыЭД.Удалить("ИмяРеквизитаКонтрагента");
			СообщитьОбОтсутствииСоглашенияЭД(ПараметрыЭД, Источник);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает настройки обмена ЭД по ИД участников.
//
// Параметры:
//  ИДОтправителя - Строка - строка с уникальный идентификатор отправителя.
//  ИДПолучателя - Строка - строка с уникальный идентификатор получателя.
//  ВидЭД - ПеречислениеСсылка - вид электронного документа.
//
// Возвращаемое значение:
//  Структура - структура параметров с настройками обмена.
//
Функция ПолучитьНастройкиОбменаЭДПоИД(ИДОтправителя, ИДПолучателя, ВидЭД = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.Организация,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.Контрагент,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка КАК НастройкаЭДО,
	|	НастройкиЭДОИсходящиеДокументы.СпособОбменаЭД КАК СпособОбменаЭД,
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО КАК ПрофильНастроекЭД,
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО.РесурсВходящихДокументов КАК ОбщийРесурсВходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогВходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогИсходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогВходящихДокументовFTP,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогИсходящихДокументовFTP,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.ЭлектроннаяПочтаКонтрагента,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.РесурсВходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.РесурсИсходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.СертификатОрганизацииДляРасшифровки,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.СертификатКонтрагентаДляШифрования,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.ВерсияФорматаПакета
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкиЭДОИсходящиеДокументы
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НЕ &ИдентификаторКонтрагента = НЕОПРЕДЕЛЕНО
	|				ТОГДА НастройкиЭДОИсходящиеДокументы.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ &ИдентификаторОрганизации = НЕОПРЕДЕЛЕНО
	|				ТОГДА НастройкиЭДОИсходящиеДокументы.ИдентификаторОрганизации = &ИдентификаторОрганизации
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ НастройкиЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
	|	И ВЫБОР
	|			КОГДА НЕ &ВидЭД = НЕОПРЕДЕЛЕНО
	|				ТОГДА НастройкиЭДОИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", ИДПолучателя);
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИДОтправителя);
	Запрос.УстановитьПараметр("ВидЭД", ВидЭД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Отправитель",         ИДОтправителя);
		СтруктураВозврата.Вставить("Получатель",          ИДПолучателя);
		СтруктураВозврата.Вставить("Организация",         Выборка.Организация);
		СтруктураВозврата.Вставить("Контрагент",          Выборка.Контрагент);
		СтруктураВозврата.Вставить("ПрофильНастроекЭДО",  Выборка.ПрофильНастроекЭД);
		СтруктураВозврата.Вставить("НастройкаЭДО",        Выборка.НастройкаЭДО);
		СтруктураВозврата.Вставить("СпособОбменаЭД",      Выборка.СпособОбменаЭД);
		СтруктураВозврата.Вставить("СертификатОрганизацииДляРасшифровки", Выборка.СертификатОрганизацииДляРасшифровки);
		СтруктураВозврата.Вставить("СертификатКонтрагентаДляШифрования",  Выборка.СертификатКонтрагентаДляШифрования);
		СтруктураВозврата.Вставить("ВерсияФорматаПакета", Выборка.ВерсияФорматаПакета);
		СтруктураВозврата.Вставить("ТребуетсяИзвещениеОПолучении", Выборка.ТребуетсяИзвещениеОПолучении);
		
		АдресОтправителя = Выборка.РесурсВходящихДокументов;
		АдресПолучателя  = Выборка.РесурсИсходящихДокументов;
		Если Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
			АдресОтправителя = Выборка.ОбщийРесурсВходящихДокументов;
			АдресПолучателя  = Выборка.ЭлектроннаяПочтаКонтрагента;
			
		ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
			
			АдресОтправителя = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				Выборка.ОбщийРесурсВходящихДокументов, Выборка.КаталогВходящихДокументов);
			АдресПолучателя = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				Выборка.ОбщийРесурсВходящихДокументов, Выборка.КаталогИсходящихДокументов);
		
		ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
			
			АдресОтправителя = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				Выборка.ОбщийРесурсВходящихДокументов, Выборка.КаталогВходящихДокументовFTP);
			АдресПолучателя = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				Выборка.ОбщийРесурсВходящихДокументов, Выборка.КаталогИсходящихДокументовFTP)
			
		КонецЕсли;
		СтруктураВозврата.Вставить("АдресОтправителя", АдресОтправителя);
		СтруктураВозврата.Вставить("АдресПолучателя",  АдресПолучателя);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Получение представления электронного документа.
//
// Параметры:
//  СсылкаНаФайлЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ, текстовое представление которого необходимо получить.
//
// Возвращаемое значение:
//  Строка - текстовое представление электронного документа.
//
Функция ПолучитьПредставлениеЭД(СсылкаНаФайлЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(СсылкаНаФайлЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		
		РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаФайлЭД, "ДатаФормированияЭДОтправителем,
		|НаправлениеЭД, ТипЭлементаВерсииЭД, ВладелецФайла, ДатаСоздания");
		
		РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыФайла.ВладелецФайла, "НомерВерсииЭД,
		|ВидЭД, ДатаДокументаОтправителя, НомерДокументаОтправителя, Номер, Дата");
		
		Версия = РеквизитыЭД.НомерВерсииЭД;
		Если РеквизитыФайла.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий 
			И ЗначениеЗаполнено(РеквизитыФайла.ДатаФормированияЭДОтправителем) Тогда
			Версия = РеквизитыФайла.ДатаФормированияЭДОтправителем;
		ИначеЕсли РеквизитыФайла.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			И ЗначениеЗаполнено(РеквизитыФайла.ДатаСоздания) Тогда
			Версия = РеквизитыФайла.ДатаСоздания;
		КонецЕсли;
		
		ТекстВерсии = ?(ЗначениеЗаполнено(Версия), " (версия " + Версия + ")", "");
		
		ТекстДаты = ?(ЗначениеЗаполнено(РеквизитыЭД.ДатаДокументаОтправителя),
		" " + "от" + " " + Формат(РеквизитыЭД.ДатаДокументаОтправителя, "ДЛФ=D"), " " + "от" + " " + Формат(РеквизитыЭД.Дата, "ДЛФ=D"));
		
		Если РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
			Представление = "" + РеквизитыЭД.ВидЭД + ТекстДаты + ТекстВерсии;
		ИначеЕсли  ЭтоИзвещениеОПолучении(РеквизитыФайла.ТипЭлементаВерсииЭД)
			ИЛИ ЭтоПодтверждение(РеквизитыФайла.ТипЭлементаВерсииЭД)
			ИЛИ ЭтоУведомлениеОбУточнении(РеквизитыФайла.ТипЭлементаВерсииЭД)  Тогда
			Представление = "" + РеквизитыФайла.ТипЭлементаВерсииЭД + ТекстДаты;
		ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			Представление = "" + РеквизитыЭД.ВидЭД + " № " + РеквизитыЭД.НомерДокументаОтправителя + ТекстДаты;
		Иначе
			НомерДокумента = ?(ЗначениеЗаполнено(РеквизитыЭД.НомерДокументаОтправителя), РеквизитыЭД.НомерДокументаОтправителя, РеквизитыЭД.Номер);
			Представление = "" + РеквизитыЭД.ВидЭД + " "+"№"+" " + НомерДокумента + " " +ТекстДаты
			+ ТекстВерсии;
		КонецЕсли;
		
	Иначе
		
		РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаФайлЭД, "НомерВерсииЭД,
		|ВидЭД, ДатаДокументаОтправителя, НомерДокументаОтправителя, ТипЭлементаВерсииЭД, Номер, Дата");
		
		Версия = РеквизитыЭД.НомерВерсииЭД;
		ТекстВерсии = ?(ЗначениеЗаполнено(Версия), " (версия " + Версия + ")", "");
		ТекстДаты = ?(ЗначениеЗаполнено(РеквизитыЭД.ДатаДокументаОтправителя),
		" от " + Формат(РеквизитыЭД.ДатаДокументаОтправителя, "ДЛФ=D"), "");
		
		Если РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
			Представление = "" + РеквизитыЭД.ВидЭД + ТекстДаты + ТекстВерсии;
		ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			Представление = "" + РеквизитыЭД.ВидЭД + " № " + РеквизитыЭД.НомерДокументаОтправителя + ТекстДаты;
		ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
			ТекстЗаголовка = НСтр("ru = 'Произвольный документ %1 от %2'");
			Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстЗаголовка, РеквизитыЭД.Номер, РеквизитыЭД.Дата);
			
		ИначеЕсли РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
			ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
			ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
			ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
			ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
			ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
			
			Представление = НСтр("ru = 'Информация продавца №'") + " " + РеквизитыЭД.НомерДокументаОтправителя + ТекстДаты;
		Иначе
			Представление = "" + РеквизитыЭД.ВидЭД + " № " + РеквизитыЭД.НомерДокументаОтправителя + ТекстДаты
			+ ТекстВерсии;
		КонецЕсли;
		
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Представление;
	
КонецФункции

// Определение состояния версии электронного документа на основании статуса.
//
// Параметры:
//  ФайлЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, СправочникОбъект.ЭДПрисоединенныеФайлы - ссылка на электронный 
//   документ или объект электронного документа.
//  ВерсияФорматаПакетаЭД - ПеречислениеСсылка.ВерсииФорматаПакетаЭД - версия формата пакета ЭД.
//  ПринудительнаяСменаСостояния - Булево - Устарело. Не используется.
//  ОтклонениеАннулирования - Булево - признак отклонения аннулирования.
//
// Возвращаемое значение:
//  Перечисления.СостоянияВерсийЭД - значение состояния.
//
Функция ОпределитьСостояниеВерсииПоСтатусуЭД(ФайлЭД, ВерсияФорматаПакетаЭД = Неопределено, ПринудительнаяСменаСостояния = Ложь,
		ОтклонениеАннулирования = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если ФайлЭД = Неопределено Или ФайлЭД = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка() Тогда
		ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НеСформирован;
	Иначе
		РеквизитыФайлаЭД = ЭлектронноеВзаимодействиеСлужебный.ЗначенияРеквизитовОбъектаИлиСсылки(ФайлЭД, 
			"ТипЭлементаВерсииЭД, СтатусЭД, ВладелецФайла");
		РеквизитыВладельцаЭД = ЭлектронноеВзаимодействиеСлужебный.ЗначенияРеквизитовОбъектаИлиСсылки(РеквизитыФайлаЭД.ВладелецФайла, 
			"СостояниеЭДО, ВидЭД");
		Если ЗначениеЗаполнено(РеквизитыФайлаЭД.ТипЭлементаВерсииЭД) 
			И НЕ РеквизитыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД  Тогда
			 
			ТекущийСтатус = РеквизитыФайлаЭД.СтатусЭД;
			
			НастройкиОбмена = НастройкиОбменаЭД(ФайлЭД);
			
			Если ТекущийСтатус = Перечисления.СтатусыЭД.ОшибкаПередачи Тогда
				ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОшибкаПередачи;
			ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.Отклонен
				ИЛИ ТекущийСтатус = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
				
				Если НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
					ИЛИ НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО
					ИЛИ НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Входящий Тогда
					
					Если НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
						
						// Если отклонение пришло с другой стороны, надо править документ.
						Если ТекущийСтатус = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
						// Если документ был отклонен ранее, не меняем состояние.
						ИначеЕсли РеквизитыВладельцаЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ОжидаетсяИсправление Тогда
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяИсправление;
						// Если статус "отклонен" установлен на стороне отправителя, то дальнейшее поведение зависит от состояния ЭД.
						Иначе	
							// Если документ отклоняется на подписи, отправляем его на исправление.
							Если РеквизитыВладельцаЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НаПодписи Тогда
								ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
							// Из любого другого состояния закрываем документооборот.
							Иначе
								ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Отклонен;
							КонецЕсли;
						КонецЕсли;
						
					ИначеЕсли НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Входящий
						И ТекущийСтатус = Перечисления.СтатусыЭД.Отклонен
						И НЕ ЭтоФНС(РеквизитыВладельцаЭД.ВидЭД) Тогда
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Отклонен;
						
					Иначе
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяИсправление;
					КонецЕсли;
					
				Иначе
					Если ТекущийСтатус = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
					Иначе
						Если НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
						Иначе
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Отклонен;	
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании Тогда
				ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяАннулирование;
			ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании Тогда
				ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ТребуетсяАннулировать;
			ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.Аннулирован Тогда
				ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Аннулирован;
			ИначеЕсли НастройкиОбмена <> Неопределено Тогда
				
				Если ВерсияФорматаПакетаЭД = Неопределено Тогда
					ВерсияФорматаПакетаЭД = ВерсияПакетаЭД(ФайлЭД);
				КонецЕсли;
				
				Если ВерсияФорматаПакетаЭД = Перечисления.ВерсииФорматаПакетаЭД.Версия30
					ИЛИ НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
					ИЛИ НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
					
					// Если у документа владельца ЭД есть неотправленное подтверждение о получении, то меняем состояние версии ЭД.
					Если (ТекущийСтатус = Перечисления.СтатусыЭД.Получен 
							И НЕ ЭтоСлужебныйДокумент(РеквизитыФайлаЭД.ТипЭлементаВерсииЭД)
							И ЭтоСчетНаОплату(РеквизитыФайлаЭД.ВладелецФайла))
						
						Или ЭтоОтветныйТитул(РеквизитыФайлаЭД.ТипЭлементаВерсииЭД)
						// Последний статус для фнс документов через оператора.
						И (ТекущийСтатус = Перечисления.СтатусыЭД.ПереданОператору
						// Последний статус для фнс документов через прямой обмен.
						ИЛИ ТекущийСтатус = Перечисления.СтатусыЭД.Отправлен)
						
						// Для CML документов последний статус.
						Или (ТекущийСтатус = Перечисления.СтатусыЭД.ОтправленоПодтверждение
						И НЕ ЭтоCMLДокумент(РеквизитыФайлаЭД.ВладелецФайла)) Тогда
						
						Если ЕстьНеотправленноеПодтверждение(РеквизитыФайлаЭД.ВладелецФайла, ВозвращаемоеЗначение) Тогда
							Возврат ВозвращаемоеЗначение;
						КонецЕсли;
						
					КонецЕсли;
					
					
				КонецЕсли;
				
				МассивСтатусов = ВернутьМассивСтатусовЭД(НастройкиОбмена);
				Если МассивСтатусов.Количество() > 0 Тогда
					
					ИндексТекущегоСтатуса = МассивСтатусов.Найти(ТекущийСтатус);
					Если ИндексТекущегоСтатуса = Неопределено Тогда
					ИначеЕсли ИндексТекущегоСтатуса + 1 = МассивСтатусов.Количество() Тогда
						
						Если ТекущийСтатус = Перечисления.СтатусыЭД.Утвержден 
							И НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Входящий 
							И ЭтоТитулФНС(НастройкиОбмена.ВидЭД)
							И Не ОтклонениеАннулирования
							И НастройкиОбмена.ТребуетсяПодтверждение Тогда
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НаПодписи;
							
						Иначе
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
							
						КонецЕсли;
					Иначе
						СледующийСтатус = МассивСтатусов[ИндексТекущегоСтатуса + 1];
						Если СледующийСтатус = Перечисления.СтатусыЭД.Утвержден Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НаУтверждении;
							
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Подписан
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ПолностьюПодписан
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ЧастичноПодписан Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НаПодписи;
							
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Отправлен
							И Не ОбменСКонтрагентамиСлужебныйКлиентСервер.ЭтоПрямойОбмен(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыФайлаЭД.ВладелецФайла, "ПрофильНастроекЭДО.СпособОбменаЭД")) Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю;
							
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.ПереданОператору Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяПередачаОператору;
							
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Отправлен
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ОтправленоПодтверждение
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправка;
							
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Доставлен
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ДоставленоПодтверждение Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении;
							
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.ПолученоПодтверждение Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение;
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует таблицу сведений о форматах электронных документов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - состав и типы колонок описаны в макете Обработка.ОбменСКонтрагентами.ВерсииФорматовЭлектронныхДокументов.
//                    Дополняется служебной колонкой "Действует" типа Булево.
//
Функция ФорматыЭлектронныхДокументов() Экспорт

	ТекущаяДата = ТекущаяДатаСеанса();
	
	Результат = ОбменСКонтрагентамиПовтИсп.СведенияОФорматахЭлектронныхДокументов();
	Если Результат.Колонки.Найти("Действует") = Неопределено Тогда
		Результат.Колонки.Добавить("Действует", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Для Каждого СтрокаФормата Из Результат Цикл
		// Проставим признак действия формата
		Если Не СтрокаФормата.Отключен
			И (НЕ ЗначениеЗаполнено(СтрокаФормата.ДатаНачалаДействия) 
				ИЛИ СтрокаФормата.ДатаНачалаДействия <= ТекущаяДата)
			И (НЕ ЗначениеЗаполнено(СтрокаФормата.ДатаОкончанияДействия) 
				ИЛИ КонецДня(СтрокаФормата.ДатаОкончанияДействия) >= ТекущаяДата) Тогда
			СтрокаФормата.Действует = Истина;
		Иначе
			СтрокаФормата.Действует = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

// Отправка сформированных электронных документов.
//
// Параметры:
//  СоответствиеСоглашенийИСтруктурСертификатов - Соответствие - соглашения и сертификаты.
// 
// Возвращаемое значение:
//  Число - количество отправленных документов.
//
Функция ОтправкаСформированныхЭД(СоответствиеСоглашенийИСтруктурСертификатов = Неопределено) Экспорт
	
	Результат = 0;
	// Создание и заполнение документов ПакетыЭД
	ГотовыеКОтправкеПакеты = ОпределитьПодготовленныеКОтправкеЭД();
	Если ЗначениеЗаполнено(ГотовыеКОтправкеПакеты) Тогда
		Результат = ОбменСКонтрагентамиСлужебныйВызовСервера.ОтправкаПакетовЭД(ГотовыеКОтправкеПакеты,
			СоответствиеСоглашенийИСтруктурСертификатов);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получение новых электронных документов на основе заведенных соглашений об обмене.
//
// Параметры:
//  СоотвСоглашенийИСтруктурСертификатов - Соответствие - соглашения и сертификаты.
//  ПовторноеПолучение - Булево - признак повторного получения.
// 
// Возвращаемое значение:
//  Структура - данные по результатам получения электронных документов.
//
Функция ПолучитьНовыеЭД(СоотвСоглашенийИСтруктурСертификатов = Неопределено, ПовторноеПолучение = Ложь) Экспорт
	
	СтруктураВозврата = Новый Структура("МассивПакетовЭД, ВызватьОповещение, Профили",
		Новый Массив, Ложь, Новый Массив);
		
	Профили = СтруктураВозврата.Профили;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО.СпособОбменаЭД КАК СпособОбменаЭД,
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО.РесурсВходящихДокументов КАК ОбщийРесурсВходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогВходящихДокументов КАК КаталогВходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогВходящихДокументовFTP КАК КаталогВходящихДокументовFTP
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкиЭДОИсходящиеДокументы
	|ГДЕ
	|	НЕ НастройкиЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)";
	
	РесурсыДляПроверки = Запрос.Выполнить().Выгрузить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтборЭП = Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
	МассивРесурсовЭП = РесурсыДляПроверки.НайтиСтроки(ОтборЭП);

	Для Каждого СтрокаРесурсовЭП Из МассивРесурсовЭП Цикл
		Если ПустаяСтрока(СтрокаРесурсовЭП.ОбщийРесурсВходящихДокументов) Тогда
			Продолжить;
		КонецЕсли;
		
		УчетнаяЗаписьЭП = СтрокаРесурсовЭП.ОбщийРесурсВходящихДокументов;
		НаборСообщений = Новый Массив();
		Попытка
			НаборСообщений = РаботаСПочтовымиСообщениями.ЗагрузитьПочтовыеСообщения(УчетнаяЗаписьЭП);
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Текст = НСтр("ru = 'Ошибка при получении сообщения с сервера электронной почты.
			|%1'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ТекстОшибки);
			
			ТекстСообщения = НСтр("ru = 'Ошибка при получении новых эл.документов.'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				НСтр("ru = 'Получение новых эл.документов'"), ТекстОшибки, ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		Профили.Добавить(СтрокаРесурсовЭП.ПрофильНастроекЭДО);
		
		Для Каждого Сообщение Из НаборСообщений Цикл
			СтруктураПараметров = Новый Структура;
			Если НЕ НеобходимоПолучить(Сообщение, СтруктураПараметров) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(Сообщение.Тема, НСтр("ru = 'Подтверждение получения пакета электронных документов.'")) Тогда
				ОбработатьПодтверждениеПолучения(Сообщение);
				СтруктураВозврата.ВызватьОповещение = Истина;
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров.Вставить("СтатусПакета",   Перечисления.СтатусыПакетовЭД.КРаспаковке);
			СтруктураПараметров.Вставить("НаправленияЭД",  Перечисления.НаправленияЭД.Входящий);
			ПакетЭД = СформироватьНовыйПакетЭД(СтруктураПараметров);
			
			Для Каждого ЭлементВложенийПисьма Из Сообщение.Вложения Цикл
				ДвоичныеДанныеЭлемента = ЭлементВложенийПисьма.Значение;
				АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
				ПараметрыФайла = Новый Структура();
				ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
				ПараметрыФайла.Вставить("ВладелецФайлов", ПакетЭД);
				ИмяБезРасширения = Лев(ЭлементВложенийПисьма.Ключ, СтрДлина(ЭлементВложенийПисьма.Ключ) -4);
				ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяБезРасширения);
				ПараметрыФайла.Вставить("РасширениеБезТочки", Прав(ЭлементВложенийПисьма.Ключ, 3));
				ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");

				ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(
					ПараметрыФайла, АдресВХранилище);
			КонецЦикла;
			
			Если ЗначениеЗаполнено(СтруктураПараметров.ВерсияФорматаПакета)  
				И Не СтруктураПараметров.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
				
				ОтправитьПодтверждениеПоПакету(ПакетЭД, УчетнаяЗаписьЭП, Сообщение.Отправитель,
												Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
			КонецЕсли;
				
			СтруктураВозврата.МассивПакетовЭД.Добавить(ПакетЭД);
		КонецЦикла;
	КонецЦикла;
	
	ОтборКаталог = Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезКаталог);
	МассивРесурсовКаталоги = РесурсыДляПроверки.НайтиСтроки(ОтборКаталог);
	Для Каждого СтрокаРесурсовКаталог Из МассивРесурсовКаталоги Цикл
		КаталогСФайлами = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
			СтрокаРесурсовКаталог.ОбщийРесурсВходящихДокументов, СтрокаРесурсовКаталог.КаталогВходящихДокументов);
			
		
		Профили.Добавить(СтрокаРесурсовКаталог.ПрофильНастроекЭДО);
		
		МассивИменФайлов = Новый Массив;
		МассивФайлов = НайтиФайлы(КаталогСФайлами, "*");
		Для Каждого ЭлементФайл Из МассивФайлов Цикл
			Если ЭлементФайл.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементФайл.Расширение = ".xml" Тогда
				ОбработатьПодтверждениеПолучения(ЭлементФайл, Истина);
				СтруктураВозврата.ВызватьОповещение = Истина;
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЭлементФайл.Расширение = ".zip" Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура;
			ДвоичныеДанныеЭлемента = Новый ДвоичныеДанные(ЭлементФайл.ПолноеИмя);
			Если Не НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанныеЭлемента, ЭлементФайл.Имя, СтруктураПараметров) Тогда
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ЭлементФайл.ПолноеИмя);
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров.Вставить("СтатусПакета",       Перечисления.СтатусыПакетовЭД.КРаспаковке);
			СтруктураПараметров.Вставить("НаправленияЭД",      Перечисления.НаправленияЭД.Входящий);
			ПакетЭД = СформироватьНовыйПакетЭД(СтруктураПараметров);
			
			АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
			
			ПараметрыФайла = Новый Структура();
			ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", ПакетЭД);
			ПараметрыФайла.Вставить("ИмяБезРасширения", Лев(ЭлементФайл.Имя, СтрДлина(ЭлементФайл.Имя) -4));
			ПараметрыФайла.Вставить("РасширениеБезТочки", Прав(ЭлементФайл.Имя, 3));
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(
				ПараметрыФайла, АдресВХранилище);

			Если ЗначениеЗаполнено(СтруктураПараметров.ВерсияФорматаПакета)
					И Не СтруктураПараметров.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
				
				ОтправитьПодтверждениеПоПакету(ПакетЭД, СтрокаРесурсовКаталог, СтруктураПараметров.АдресОтправителя,
					Перечисления.СпособыОбменаЭД.ЧерезКаталог);
			КонецЕсли;
			
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ЭлементФайл.ПолноеИмя);
			
			СтруктураВозврата.МассивПакетовЭД.Добавить(ПакетЭД);
		КонецЦикла;
	КонецЦикла;
	
	ОтборFTP = Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезFTP);
	МассивРесурсовFTP = РесурсыДляПроверки.НайтиСтроки(ОтборFTP);
	Для Каждого СтрокаРесурсовFTP Из МассивРесурсовFTP Цикл
		ПрофильНастроекЭДО = СтрокаРесурсовFTP.ПрофильНастроекЭДО;
		FTPСоединение = ПолучитьFTPСоединение(ПрофильНастроекЭДО);
		Если FTPСоединение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		КаталогВходящихДокументов = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
			СтрокаРесурсовFTP.ОбщийРесурсВходящихДокументов, СтрокаРесурсовFTP.КаталогВходящихДокументовFTP);
			
		МассивИменФайлов = Новый Массив;
		МассивФайловFTP = Новый Массив;
		ТекстОшибки = "";
		ПодготовитьПутьFTP(КаталогВходящихДокументов);
		Попытка
			FTPСоединение.УстановитьТекущийКаталог(КаталогВходящихДокументов);
		Исключение
			Продолжить;
		КонецПопытки;
		НайтиФайлыВКаталогеFTP(FTPСоединение, КаталогВходящихДокументов, "*", Ложь, ТекстОшибки, МассивФайловFTP);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ФайлFTP Из МассивФайловFTP Цикл
			Если ФайлFTP.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;
			ВремКаталог = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("ext", Новый УникальныйИдентификатор);
			ПолноеИмяФайла = ВремКаталог + ФайлFTP.Имя;
			ПолучитьФайлСFTP(FTPСоединение, ФайлFTP.ПолноеИмя, ПолноеИмяФайла, , ТекстОшибки);
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремКаталог);
				Продолжить;
			КонецЕсли;
			ЭлементФайл = Новый Файл(ПолноеИмяФайла);
			ДвоичныеДанныеЭлемента = Новый ДвоичныеДанные(ЭлементФайл.ПолноеИмя);
			СтруктураПараметров = Новый Структура;
			
			Если ЭлементФайл.Расширение = ".xml" Тогда
				ОбработатьПодтверждениеПолучения(ЭлементФайл, Истина);
				СтруктураВозврата.ВызватьОповещение = Истина;
				УдалитьФайлFTP(FTPСоединение, ФайлFTP.ПолноеИмя);
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремКаталог);
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЭлементФайл.Расширение = ".zip" Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанныеЭлемента, ЭлементФайл.Имя, СтруктураПараметров) Тогда
				УдалитьФайлFTP(FTPСоединение, ФайлFTP.ПолноеИмя);
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремКаталог);
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров.Вставить("СтатусПакета",   Перечисления.СтатусыПакетовЭД.КРаспаковке);
			СтруктураПараметров.Вставить("НаправленияЭД",  Перечисления.НаправленияЭД.Входящий);
			ПакетЭД = СформироватьНовыйПакетЭД(СтруктураПараметров);
			
			АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
			
			ПараметрыФайла = Новый Структура();
			ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", ПакетЭД);
			ПараметрыФайла.Вставить("ИмяБезРасширения", Лев(ЭлементФайл.Имя, СтрДлина(ЭлементФайл.Имя) -4));
			ПараметрыФайла.Вставить("РасширениеБезТочки", Прав(ЭлементФайл.Имя, 3));
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(
				ПараметрыФайла, АдресВХранилище);
			
			Если Не СтруктураПараметров.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
				
				ОтправитьПодтверждениеПоПакету(ПакетЭД, СтрокаРесурсовFTP, СтруктураПараметров.АдресОтправителя,
					Перечисления.СпособыОбменаЭД.ЧерезFTP);
			КонецЕсли;
			
			Профили.Добавить(СтрокаРесурсовFTP.ПрофильНастроекЭДО);
			
			УдалитьФайлFTP(FTPСоединение, ФайлFTP.ПолноеИмя);
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремКаталог);
			
			СтруктураВозврата.МассивПакетовЭД.Добавить(ПакетЭД);
		КонецЦикла;
	КонецЦикла;
	
	// Получаем документы из сервисов операторов ЭДО.
	ОбменСКонтрагентамиВнутренний.ПолучитьНовыеЭДОператораЭДО(СтруктураВозврата,
		СоотвСоглашенийИСтруктурСертификатов, , ПовторноеПолучение);
		
	Если СтруктураВозврата.Свойство("ИдентификаторыЭДО") Тогда
		ОчиститьИдентификаторыЭДО(СтруктураВозврата.ИдентификаторыЭДО);
	КонецЕсли;
		
	Возврат СтруктураВозврата;
	
КонецФункции

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - Объект, Ссылка - объект либо ссылка документа/справочника-источника.
//  ФорматCML - Булево - если истина, то для формирования ЭД будут использоваться схемы CML (не ФНС),
//              в параметрах должны быть указаны соответствующие виды ЭД.
//  ВидЭД - ПеречислениеСсылка.ВидыЭД - вид электронного документа.
//  БыстрыйОбмен - Булево - признак того, что не будут использоваться УПД и УКД.
//
// Возвращаемое значение:
//  Структура - параметры источника, необходимые для определения
//              настроек обмена ЭД. Обязательные параметры: НаправлениеЭД, ВидЭД,
//              Контрагент, СоглашениеЭД или Организация.
//
Функция ЗаполнитьПараметрыЭДПоИсточнику(Источник, ФорматCML = Ложь, ВидЭД = Неопределено, БыстрыйОбмен = Ложь) Экспорт
	
	ПараметрыЭД = СтруктураПараметровЭД();
	
	ТипИсточника = ТипЗнч(Источник);
	
	СправочникОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Организации");
	
	ЗначенияРеквизитовИсточника = Новый Структура;
	РеквизитыИсточника = Новый Массив;
	Если ТипИсточника = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД")
		ИЛИ ТипИсточника = Тип("СправочникОбъект.СоглашенияОбИспользованииЭД") Тогда
		
		ПараметрыЭД.ВидЭД     = Перечисления.ВидыЭД.КаталогТоваров;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.СоглашениеЭД  = Источник.Ссылка;
		Если Не Источник.ЭтоИнтеркампани Тогда
			РеквизитыИсточника.Добавить("Контрагент");
			РеквизитыИсточника.Добавить("Организация");
			РеквизитыИсточника.Добавить("ДоговорКонтрагента");
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("СправочникСсылка." + СправочникОрганизации)
		Или ТипИсточника = Тип("СправочникОбъект." + СправочникОрганизации) Тогда
		
		ПараметрыЭД.ВидЭД = "РеквизитыОрганизации";
		ПараметрыЭД.Организация = Источник;
		ПараметрыЭД.Вставить("РеквизитыОрганизации", Истина);
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЭлектронныйДокументВходящий") Тогда
		
		РеквизитыИсточника.Добавить("ВидЭД");
		РеквизитыИсточника.Добавить("Контрагент");
		РеквизитыИсточника.Добавить("Организация");
		РеквизитыИсточника.Добавить("ДоговорКонтрагента");
		РеквизитыИсточника.Добавить("НастройкаЭДО");
		
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЭлектронныйДокументИсходящий") Тогда
		
		РеквизитыИсточника.Добавить("ВидЭД");
		РеквизитыИсточника.Добавить("Контрагент");
		РеквизитыИсточника.Добавить("Организация");
		РеквизитыИсточника.Добавить("ДоговорКонтрагента");
		РеквизитыИсточника.Добавить("НастройкаЭДО");
		
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
	Иначе
		
		ПараметрыЭД.ВидЭД = ВидЭД;
		ОбменСКонтрагентамиПереопределяемый.ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД, ФорматCML);
	КонецЕсли;
	
	Если РеквизитыИсточника.Количество() Тогда
		ЗначенияРеквизитовИсточника = ЭлектронноеВзаимодействиеСлужебный.ЗначенияРеквизитовОбъектаИлиСсылки(Источник, РеквизитыИсточника);
		ЗаполнитьЗначенияСвойств(ПараметрыЭД, ЗначенияРеквизитовИсточника);
		
		Если ЗначенияРеквизитовИсточника.Свойство("НастройкаЭДО") Тогда
			ПараметрыЭД.СоглашениеЭД  = ЗначенияРеквизитовИсточника.НастройкаЭДО;
		КонецЕсли;
	КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(ПараметрыЭД.Контрагент) 
		И Не ЗначениеЗаполнено(ПараметрыЭД.Организация) Тогда
		ДополнитьПараметрыЭД(Источник, ПараметрыЭД);
	КонецЕсли;
	
	Если БыстрыйОбмен Тогда
		Возврат ПараметрыЭД;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыЭД.ВидЭД)
		И ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоЧтенияЭД() Тогда
	
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(?(ОбщегоНазначения.ЭтоСсылка(ТипИсточника), Источник, Источник.Ссылка));
	
		СоответствиеВладельцевИЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ВладельцыИЭлектронныеДокументы(МассивСсылок);
		Для Каждого ТекЭл Из МассивСсылок Цикл
			
			СсылкаНаЭД = СоответствиеВладельцевИЭД.Получить(ТекЭл);
			Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
				Если ТипЗнч(СсылкаНаЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
					ВладелецЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВладелецФайла");
					ПараметрыЭД.ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецЭД, "ВидЭД");
				Иначе
					ПараметрыЭД.ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбменСКонтрагентами.ИспользованиеУниверсальногоПередаточногоДокумента(ПараметрыЭД.Организация, ПараметрыЭД.Контрагент, ПараметрыЭД.ДоговорКонтрагента) Тогда
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
			ПараметрыЭД.Вставить("ВидПервичногоДокумента", ПараметрыЭД.ВидЭД);
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
	КонецЕсли;
	Если ОбменСКонтрагентами.ИспользованиеУниверсальногоКорректировочногоДокумента(ПараметрыЭД.Организация, ПараметрыЭД.Контрагент, ПараметрыЭД.ДоговорКонтрагента) Тогда
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыЭД;
	
КонецФункции

// Изменение реквизитов элемента справочника ЭДПрисоединенныеФайлы.
//
// Параметры:
//  ДобавленныйФайл - СправочникСсылка - ссылка на элемент справочника с электронным документом.
//  СтруктураЭД - Структура - структура параметров, которые необходимо заполнить в справочнике.
//  ПоверятьОбязательныеРеквизиты - Булево - требуется проверка обязательных реквизитов.
//
Процедура ИзменитьПоСсылкеПрисоединенныйФайл(
				ДобавленныйФайл,
				СтруктураЭД,
				ПоверятьОбязательныеРеквизиты = Истина) Экспорт
				
	Если Не ЗначениеЗаполнено(ДобавленныйФайл) Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	
	Попытка
	
		Если ПоверятьОбязательныеРеквизиты Тогда
			ТекстОшибки = "";
			СтруктураОбязательныхПолей = Новый Структура("ВладелецЭД, ТипЭлементаВерсииЭД, НаправлениеЭД");
			Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
				Значение = Неопределено;
				Если СтруктураЭД.Свойство(КлючЗначение.Ключ, Значение) Тогда
					Если НЕ ЗначениеЗаполнено(Значение) Тогда
						Текст = НСтр("ru = 'Значение параметра <%1> не заполнено.'");
						Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КлючЗначение.Ключ);
						ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + Текст, Текст);
					КонецЕсли;
				Иначе
					Текст = НСтр("ru = 'Не передан обязательный параметр <%1>.'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КлючЗначение.Ключ);
					ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + Текст, Текст);
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ТекстСообщения = НСтр("ru = 'Ошибка заполнения доп.свойств электронного документа.
				|%1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
		ОбменСКонтрагентамиПереопределяемый.ПриИзмененииПрисоединенногоФайла(ДобавленныйФайл, СтруктураЭД);
		
		Блокировка = Новый БлокировкаДанных;
		МетаданныеОбъекта = ДобавленныйФайл.Метаданные();
		ЭлементБлокировки = Блокировка.Добавить(МетаданныеОбъекта.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ДобавленныйФайл);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ФайлОбъект = ДобавленныйФайл.ПолучитьОбъект();
		ФайлОбъект.Заблокировать();
		
		ПринудительнаяСменаСостоянияВерсии = Ложь;
		
		Если СтруктураЭД.Свойство("Автор") Тогда
			ФайлОбъект.Автор = СтруктураЭД.Автор;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДатаИзмененияСтатусаЭД") Тогда
			ФайлОбъект.ДатаИзмененияСтатусаЭД = СтруктураЭД.ДатаИзмененияСтатусаЭД;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДатаИзмененияВнешнегоСтатусаЭД") Тогда
			ФайлОбъект.ДатаИзмененияВнешнегоСтатусаЭД = СтруктураЭД.ДатаИзмененияВнешнегоСтатусаЭД;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДатаМодификацииУниверсальная") Тогда
			ФайлОбъект.ДатаМодификацииУниверсальная = СтруктураЭД.ДатаМодификацииУниверсальная;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДатаСоздания") Тогда
			ФайлОбъект.ДатаСоздания = СтруктураЭД.ДатаСоздания;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДатаФормированияЭДОтправителем") Тогда
			ФайлОбъект.ДатаФормированияЭДОтправителем = СтруктураЭД.ДатаФормированияЭДОтправителем;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДополнительнаяИнформация") Тогда
			ФайлОбъект.ДополнительнаяИнформация = СтруктураЭД.ДополнительнаяИнформация;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДополнительныеРеквизиты") Тогда
			Если ЗначениеЗаполнено(ФайлОбъект.ДополнительныеРеквизиты) Тогда
				ДополнительныеРеквизиты = ФайлОбъект.ДополнительныеРеквизиты.Получить();
				Если Не ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
					ДополнительныеРеквизиты = Новый Структура;
				КонецЕсли;
			Иначе
				ДополнительныеРеквизиты = СтруктураЭД.ДополнительныеРеквизиты;
			КонецЕсли;
			
			Для Каждого КлючЗначение Из СтруктураЭД.ДополнительныеРеквизиты Цикл
				ДополнительныеРеквизиты.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
			
			ФайлОбъект.ДополнительныеРеквизиты = Новый ХранилищеЗначения(СтруктураЭД.ДополнительныеРеквизиты);
		КонецЕсли;
				
		Если СтруктураЭД.Свойство("Изменил") Тогда
			ФайлОбъект.Изменил = СтруктураЭД.Изменил;
		КонецЕсли;
				
		Если СтруктураЭД.Свойство("Наименование") Тогда
			ФайлОбъект.Наименование = СтруктураЭД.Наименование;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("НаименованиеФайла") Тогда
			ФайлОбъект.НаименованиеФайла = СтруктураЭД.НаименованиеФайла;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("НаправлениеЭД") Тогда
			ФайлОбъект.НаправлениеЭД = СтруктураЭД.НаправлениеЭД;
		КонецЕсли;
						
		Если СтруктураЭД.Свойство("НомерЭД") Тогда 
			ФайлОбъект.НомерЭД = СтруктураЭД.НомерЭД;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("Описание") Тогда
			ФайлОбъект.Описание = СокрЛП(СтруктураЭД.Описание);
		Иначе
			ФайлОбъект.Описание = "";
		КонецЕсли;
				
		Если НЕ ЗначениеЗаполнено(ФайлОбъект.ОтправительЭД) И СтруктураЭД.Свойство("Отправитель") Тогда
			ФайлОбъект.ОтправительЭД = СтруктураЭД.Отправитель;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ПодписанныеДанные") Тогда
			ХранилищеПодписанныхДанных = Новый ХранилищеЗначения(СтруктураЭД.ПодписанныеДанные);
			ФайлОбъект.ПодписанныеДанные = ХранилищеПодписанныхДанных;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ФайлОбъект.ПолучательЭД) И СтруктураЭД.Свойство("Получатель") Тогда
			ФайлОбъект.ПолучательЭД = СтруктураЭД.Получатель;
		КонецЕсли;
				
		Если СтруктураЭД.Свойство("Расширение") Тогда
			ФайлОбъект.Расширение = СтруктураЭД.Расширение;
		КонецЕсли;
				
		Если СтруктураЭД.Свойство("СтатусЭД") Тогда
			
			Если ФайлОбъект.СтатусЭД <> СтруктураЭД.СтатусЭД Тогда
				ПринудительнаяСменаСостоянияВерсии = Истина;
			КонецЕсли;
			
			ФайлОбъект.СтатусЭД = СтруктураЭД.СтатусЭД;
			Если Не СтруктураЭД.Свойство("ДатаИзмененияСтатусаЭД") Тогда
				ФайлОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса();
			КонецЕсли;
			
		КонецЕсли;
		
		ОбновитьСостояниеЭД = Неопределено;
		Если СтруктураЭД.Свойство("ОбновитьСостояниеЭД", ОбновитьСостояниеЭД)
			И Не ОбновитьСостояниеЭД = Неопределено Тогда
			ПринудительнаяСменаСостоянияВерсии = ОбновитьСостояниеЭД;
		КонецЕсли;
		
		ОтклонениеАннулирования = Ложь;
		Если СтруктураЭД.Свойство("ОтклонениеАннулирования") Тогда
			ОтклонениеАннулирования = Истина;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ТекстУточнения") Тогда
			ЗаписатьПричинуОтклонения(ФайлОбъект.ВладелецФайла,СтруктураЭД.ТекстУточнения);
		КонецЕсли;  
		
		Если СтруктураЭД.Свойство("ПричинаОтклонения") Тогда
			ЗаписатьПричинуОтклонения(ФайлОбъект.ВладелецФайла,СтруктураЭД.ПричинаОтклонения);
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ТипЭлементаВерсииЭД") Тогда
			ФайлОбъект.ТипЭлементаВерсииЭД = СтруктураЭД.ТипЭлементаВерсииЭД;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("УникальныйИД") Тогда
			ФайлОбъект.УникальныйИД = СтруктураЭД.УникальныйИД;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("УникальныйИДВнешний") Тогда
			ФайлОбъект.УникальныйИДВнешний = СтруктураЭД.УникальныйИДВнешний;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ЭлектронныйДокументВладелец") Тогда
			ФайлОбъект.ЭлектронныйДокументВладелец = СтруктураЭД.ЭлектронныйДокументВладелец;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ПредставлениеПрогрессаПодписания") Тогда
			ФайлОбъект.ПредставлениеПрогрессаПодписания = СтруктураЭД.ПредставлениеПрогрессаПодписания;
		КонецЕсли;
		
		ДополнительныеСвойства = Неопределено;
		Если СтруктураЭД.Свойство("ДополнительныеСвойства", ДополнительныеСвойства) 
			И ЗначениеЗаполнено(ДополнительныеСвойства) Тогда
			Для Каждого КлючЗначение Из ДополнительныеСвойства Цикл
				ФайлОбъект.ДополнительныеСвойства.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
		КонецЕсли;
		
		ВерсияФорматаПакета = Неопределено;
		СтруктураЭД.Свойство("ВерсияФорматаПакета", ВерсияФорматаПакета);
		
		ФайлОбъект.ДополнительныеСвойства.Вставить("ВерсияФорматаПакета", ВерсияФорматаПакета);
		ФайлОбъект.ДополнительныеСвойства.Вставить("ПринудительнаяСменаСостоянияВерсии", ПринудительнаяСменаСостоянияВерсии);
		ФайлОбъект.ДополнительныеСвойства.Вставить("ОбновитьВерсиюЭД", Истина);
		ФайлОбъект.ДополнительныеСвойства.Вставить("ОтклонениеАннулирования", ОтклонениеАннулирования);

		ФайлОбъект.Записать();
		ФайлОбъект.Разблокировать();
				
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает структуру данных файла, полученную из одноименной функции общего модуля ПрисоединенныеФайлы.
// В полученной структуре данных меняет значение элемента с ключом Наименование на полное наименование,
// хранящееся в реквизите элемента справочника НаименованиеФайла, так же заново формирует значение элемента ИмяФайла.
// Используется в различных командах работы с файлами,
// и как значение параметра ДанныеФайла других процедур и функций.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка - Ссылка на присоединенный файл.
//  ИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы, используется при 
//                                                 получении двоичных данных файла.
//  ПолучатьСсылкуНаДвоичныеДанные - Булево - начальное значение Истина, если передать Ложь, то ссылка на 
//                                            двоичные данные не будет получена, что существенно ускорит выполнение
//                                            для больших двоичных данных.
//
// Возвращаемое значение:
//  Структура - структура со свойствами:
//    * СсылкаНаДвоичныеДанныеФайла        - Строка - адрес во временном хранилище.
//    * ОтносительныйПуть                  - Строка - путь к файлу.
//    * ДатаМодификацииУниверсальная       - Дата - дата изменения.
//    * ИмяФайла                           - Строка - имя файла.
//    * Наименование                       - Строка - соответствует значению реквизита элемента справочника НаименованиеФайла.
//    * Расширение                         - Строка - расширение файла.
//    * Размер                             - Число - размер файла.
//    * Редактирует                        - СправочникСсылка.Пользователи - пользователь.
//    * ПодписанЭП                         - Булево - признак подписи.
//    * Зашифрован                         - Булево - признак шифрования.
//    * ФайлРедактируется                  - Булево - признак редактирования.
//    * ФайлРедактируетТекущийПользователь - Булево - признак редактирования текущим пользователем.
// 
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл,
                            Знач ИдентификаторФормы = Неопределено,
                            Знач ПолучатьСсылкуНаДвоичныеДанные = Истина) Экспорт
	
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл,
		ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда 
		
		СтруктураПараметров = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайл, "ВладелецФайла, УникальныйИД, НаименованиеФайла");
		Если ЗначениеЗаполнено(СтруктураПараметров.НаименованиеФайла) Тогда
			ДанныеФайла.Наименование = СокрЛП(СтруктураПараметров.НаименованиеФайла);
			ДанныеФайла.ИмяФайла = ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение;
		Иначе
			Если ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураПараметров.ВладелецФайла,"ВидЭД") = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
				СтрокаУИД = СтруктураПараметров.УникальныйИД;
				Наименование = ДанныеФайла.Наименование;
				ПозицияУИД = СтрНайти(Наименование, "_" + Лев(СтрокаУИД, 35));
				Если ПозицияУИД > 0 Тогда
					ДанныеФайла.Наименование = Лев(Наименование, ПозицияУИД) + СтрокаУИД;
					ДанныеФайла.ИмяФайла = ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеФайла;
	
КонецФункции

// Сохранение приглашений.
//
// Параметры:
//  ТаблицаПриглашений - ТаблицаЗначений - таблица с приглашениями.
//
Процедура СохранитьПриглашения(ТаблицаПриглашений) Экспорт
	
	Если ТаблицаПриглашений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Приглашения.ПрофильНастроекЭДО,
	|	Приглашения.ТекстПриглашения,
	|	Приглашения.Идентификатор,
	|	Приглашения.ВнешнийИД КАК ВнешнийИД,
	|	Приглашения.ИНН КАК ИНН,
	|	Приглашения.КПП,
	|	Приглашения.Состояние,
	|	Приглашения.Наименование,
	|	Приглашения.Изменен КАК Изменен,
	|	Приглашения.ОписаниеОшибки
	|ПОМЕСТИТЬ Приглашения
	|ИЗ
	|	&Приглашения КАК Приглашения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИНН,
	|	ВнешнийИД,
	|	Изменен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приглашения.ПрофильНастроекЭДО,
	|	Приглашения.Идентификатор,
	|	Приглашения.ИНН КАК ИНН,
	|	Приглашения.КПП,
	|	Приглашения.ВнешнийИД КАК ВнешнийИД,
	|	МАКСИМУМ(Приглашения.Изменен) КАК Изменен
	|ПОМЕСТИТЬ ПоследниеИзмененияЗаписей
	|ИЗ
	|	Приглашения КАК Приглашения
	|
	|СГРУППИРОВАТЬ ПО
	|	Приглашения.ПрофильНастроекЭДО,
	|	Приглашения.Идентификатор,
	|	Приглашения.ИНН,
	|	Приглашения.КПП,
	|	Приглашения.ВнешнийИД
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИНН,
	|	ВнешнийИД,
	|	Изменен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приглашения.ПрофильНастроекЭДО,
	|	Приглашения.ТекстПриглашения,
	|	Приглашения.Идентификатор,
	|	Приглашения.ВнешнийИД,
	|	Приглашения.ИНН,
	|	Приглашения.КПП,
	|	Приглашения.Наименование,
	|	Приглашения.Изменен КАК Изменен,
	|	Приглашения.ОписаниеОшибки,
	|	Приглашения.Состояние КАК СтатусУчастника
	|ИЗ
	|	ПоследниеИзмененияЗаписей КАК ПоследниеИзмененияЗаписей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Приглашения КАК Приглашения
	|		ПО ПоследниеИзмененияЗаписей.ПрофильНастроекЭДО = Приглашения.ПрофильНастроекЭДО
	|			И ПоследниеИзмененияЗаписей.Идентификатор = Приглашения.Идентификатор
	|			И ПоследниеИзмененияЗаписей.ИНН = Приглашения.ИНН
	|			И ПоследниеИзмененияЗаписей.Изменен = Приглашения.Изменен
	|			И ПоследниеИзмененияЗаписей.ВнешнийИД = Приглашения.ВнешнийИД
	|
	|УПОРЯДОЧИТЬ ПО
	|	Изменен";
	Запрос.УстановитьПараметр("Приглашения", ТаблицаПриглашений);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		УстановитьПривилегированныйРежим(Истина); // Приглашения сохранять можно с любыми правами, а вот принимать нет.
		
		// В случае ошибки, содержащейся в запросе на присоединение контрагента,
		// Такском возвращает запись с указанием ошибки, но без КПП. В результате
		// запрос может вернуть 2 записи по одному контрагенту (ИНН и ВнешнийИД совпадают,
		// а КПП в одной записи пустой, а в другой заполнен). Чтобы не вводить в заблуждение
		// пользователей, одну запись (более раннюю) надо удалить.
		ТЗПоследнихИзменений = Результат.Выгрузить();
		Для Сч = -ТЗПоследнихИзменений.Количество() + 1 По 0 Цикл
			СтрокаТЗ = ТЗПоследнихИзменений[-Сч];
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЗ.ПрофильНастроекЭДО,
				"СпособОбменаЭД") = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
				
				Отбор = Новый Структура("ИНН, ВнешнийИД, ПрофильНастроекЭДО", СтрокаТЗ.ИНН, СтрокаТЗ.ВнешнийИД,
					СтрокаТЗ.ПрофильНастроекЭДО);
				МассивСтрок = ТЗПоследнихИзменений.НайтиСтроки(Отбор);
				Если МассивСтрок.Количество() > 1 Тогда
					ПервыйЭлемент = МассивСтрок[0];
					ВторойЭлемент = МассивСтрок[1];
					Если НЕ ЗначениеЗаполнено(ПервыйЭлемент.КПП) ИЛИ НЕ ЗначениеЗаполнено(ВторойЭлемент.КПП) Тогда
						Если ПервыйЭлемент.Изменен > ВторойЭлемент.Изменен Тогда
							ТЗПоследнихИзменений.Удалить(ВторойЭлемент);
						Иначе
							ТЗПоследнихИзменений.Удалить(ПервыйЭлемент);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СдвигатьДату = Истина;
		Для Каждого НовыеПриглашения Из ТЗПоследнихИзменений Цикл
			Контрагент = Неопределено;
			Ошибка = (НовыеПриглашения.СтатусУчастника = Перечисления.СтатусыУчастниковОбменаЭД.Ошибка);
			Если ЗначениеЗаполнено(НовыеПриглашения.ИНН) Тогда
				ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
				ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
				
				Запрос = Новый Запрос;
				ТекстЗапроса =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	НастройкиЭДО.Контрагент
				|ИЗ
				|	Справочник.СоглашенияОбИспользованииЭД КАК НастройкиЭДО
				|ГДЕ
				|	НЕ НастройкиЭДО.ПометкаУдаления
				|	И НастройкиЭДО.СпособОбменаЭД В (ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО), ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском))
				|	И &ОтборПоИННКонтрагента";
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоИННКонтрагента", "НастройкиЭДО.Контрагент."
					+ ИмяРеквизитаИННКонтрагента + " = &ИНН");
				Запрос.УстановитьПараметр("ИНН", НовыеПриглашения.ИНН);
				Если ЗначениеЗаполнено(НовыеПриглашения.КПП) И ИмяРеквизитаКППКонтрагента <> Неопределено Тогда
					ТекстЗапроса = ТекстЗапроса + "
						|	И НастройкиЭДО.Контрагент." + ИмяРеквизитаКППКонтрагента + " = &КПП";
					Запрос.УстановитьПараметр("КПП", НовыеПриглашения.КПП);
				КонецЕсли;
				Запрос.Текст = ТекстЗапроса;
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Контрагент = Выборка.Контрагент;
				Иначе
					ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Контрагенты", НовыеПриглашения.ИНН, НовыеПриглашения.КПП, Контрагент);
				КонецЕсли;
			КонецЕсли;
			
			Если Контрагент = Неопределено Тогда
				СдвигатьДату = Ложь;
				Если Не Ошибка Тогда
					Текст = НСтр("ru = 'Обмен по профилю настроек ЭДО %1.
					|В базе не найден контрагент:
					|Наименование: %2
					|ИНН: %3
					|КПП: %4
					|Статус: %5.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, НовыеПриглашения.ПрофильНастроекЭДО,
						НовыеПриглашения.Наименование, НовыеПриглашения.ИНН, НовыеПриглашения.КПП, НовыеПриглашения.СтатусУчастника);
				Иначе
					ОписаниеОшибки = ?(ЗначениеЗаполнено(НовыеПриглашения.ОписаниеОшибки),
						НовыеПриглашения.ОписаниеОшибки, НСтр("ru = 'Ошибка'"));
					Наименование = ?(ЗначениеЗаполнено(Контрагент), Контрагент.Наименование, "");
					Текст = НСтр("ru = 'Обмен по профилю настроек ЭДО %1.
					|%2 в приглашении для контрагента:
					|Наименование: %3
					|Адрес ЭП: %4
					|ИНН: %5
					|КПП: %6
					|Статус: %7.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, НовыеПриглашения.ПрофильНастроекЭДО,
						ОписаниеОшибки, Наименование, НовыеПриглашения.Наименование, НовыеПриглашения.ИНН, НовыеПриглашения.КПП,
						НовыеПриглашения.СтатусУчастника);
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			// Поиск существующей настройки ЭДО.
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	НастройкаЭДОИсходящиеДокументы.Ссылка КАК НастройкаЭДО,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.РасширенныйРежимНастройкиСоглашения КАК РасширенныйРежимНастройки,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.СпособОбменаЭД КАК СпособОбменаЭД,
			|	НастройкаЭДОИсходящиеДокументы.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.СтатусПодключения,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления КАК ПометкаУдаления
			|ИЗ
			|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкаЭДОИсходящиеДокументы
			|ГДЕ
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
			|	И НастройкаЭДОИсходящиеДокументы.Ссылка.Организация = &Организация
			|	И НастройкаЭДОИсходящиеДокументы.Ссылка.ПрофильНастроекЭДО = &ПрофильНастроекЭДО
			|	И НастройкаЭДОИсходящиеДокументы.ИдентификаторКонтрагента В (&ИдентификаторКонтрагента, """")
			|
			|СГРУППИРОВАТЬ ПО
			|	НастройкаЭДОИсходящиеДокументы.Ссылка,
			|	НастройкаЭДОИсходящиеДокументы.ИдентификаторКонтрагента,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.СпособОбменаЭД,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.РасширенныйРежимНастройкиСоглашения,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.СтатусПодключения,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПометкаУдаления,
			|	ИдентификаторКонтрагента УБЫВ";
			
			Запрос.УстановитьПараметр("Контрагент",  Контрагент);
			Запрос.УстановитьПараметр("ИдентификаторКонтрагента", НовыеПриглашения.Идентификатор);
			Запрос.УстановитьПараметр("Организация", НовыеПриглашения.ПрофильНастроекЭДО.Организация);
			Запрос.УстановитьПараметр("ПрофильНастроекЭДО", НовыеПриглашения.ПрофильНастроекЭДО);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				// Проверка наличия настройки ЭДО с искомым идентификатором.
				Если Выборка.СтатусПодключения = НовыеПриглашения.СтатусУчастника
					И Выборка.ИдентификаторКонтрагента = НовыеПриглашения.Идентификатор Тогда
					Продолжить;
				КонецЕсли;
				
				НастройкаЭДО = Выборка.НастройкаЭДО.ПолучитьОбъект();
				Если НастройкаЭДО.ПометкаУдаления Тогда
					НастройкаЭДО.ПометкаУдаления = Ложь;
				КонецЕсли;
				
				Если Не Выборка.РасширенныйРежимНастройки
					И ОбменСКонтрагентамиСлужебныйКлиентСервер.ЭтоПрямойОбмен(Выборка.СпособОбменаЭД) Тогда
					
					НастройкаЭДО.РасширенныйРежимНастройкиСоглашения = Истина;
					
					ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НовыеПриглашения.ПрофильНастроекЭДО,
						"ИдентификаторОрганизации, СпособОбменаЭД");
					
					Отбор = Новый Структура;
					Отбор.Вставить("ИсходящийДокумент", Перечисления.ВидыЭД.СчетФактура);
					НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
					Для каждого Строка Из НайденныеСтроки Цикл
						Строка.Формировать              = Истина;
						Строка.ИспользоватьЭП           = Истина;
						Строка.ПрофильНастроекЭДО       = НовыеПриглашения.ПрофильНастроекЭДО;
						Строка.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
						Строка.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
						Строка.ИдентификаторКонтрагента = НовыеПриглашения.Идентификатор;
					КонецЦикла;
					
					Отбор = Новый Структура;
					Отбор.Вставить("ИсходящийДокумент", Перечисления.ВидыЭД.КорректировочныйСчетФактура);
					НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
					Для каждого Строка Из НайденныеСтроки Цикл
						Строка.Формировать              = Истина;
						Строка.ИспользоватьЭП           = Истина;
						Строка.ПрофильНастроекЭДО       = НовыеПриглашения.ПрофильНастроекЭДО;
						Строка.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
						Строка.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
						Строка.ИдентификаторКонтрагента = НовыеПриглашения.Идентификатор;
					КонецЦикла;
				Иначе
					Отбор = Новый Структура;
					Отбор.Вставить("ПрофильНастроекЭДО", НовыеПриглашения.ПрофильНастроекЭДО);
					НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
					Для каждого Строка Из НайденныеСтроки Цикл
						Строка.ИдентификаторКонтрагента = НовыеПриглашения.Идентификатор;
					КонецЦикла;
				КонецЕсли;
			Иначе
				
				// Создаем новую настройку ЭДО по входящему приглашению.
				ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НовыеПриглашения.ПрофильНастроекЭДО,
					"Организация, ИдентификаторОрганизации, СпособОбменаЭД, ШаблонТекстаПриглашений, ИсходящиеДокументы, ИспользоватьУПД, ИспользоватьУКД");
					
				НастройкаЭДО = Справочники.СоглашенияОбИспользованииЭД.СоздатьЭлемент();
				НастройкаЭДО.ОбменДанными.Загрузка = Истина;
				НастройкаЭДО.Контрагент = Контрагент;
				НастройкаЭДО.Наименование = Строка(Контрагент);
				НастройкаЭДО.ПрофильНастроекЭДО = НовыеПриглашения.ПрофильНастроекЭДО;
				НастройкаЭДО.Организация              = ПараметрыПрофиляНастроек.Организация;
				НастройкаЭДО.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
				НастройкаЭДО.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
				НастройкаЭДО.ИспользоватьУПД          = ПараметрыПрофиляНастроек.ИспользоватьУПД;
				НастройкаЭДО.ИспользоватьУКД          = ПараметрыПрофиляНастроек.ИспользоватьУКД;
				НастройкаЭДО.ВерсияФорматаПакета      = Перечисления.ВерсииФорматаПакетаЭД.Версия30;
				
				// Загрузка табличной части ИсходящиеДокументы из профиля настроек ЭДО.
				ИсходнаяТаблицаЭД = ПараметрыПрофиляНастроек.ИсходящиеДокументы.Выгрузить();
				ИсходнаяТаблицаЭД.Колонки.Добавить("ПрофильНастроекЭДО");
				ИсходнаяТаблицаЭД.Колонки.Добавить("СпособОбменаЭД");
				ИсходнаяТаблицаЭД.Колонки.Добавить("ИдентификаторОрганизации");
				ИсходнаяТаблицаЭД.Колонки.Добавить("ИдентификаторКонтрагента");
				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(НовыеПриглашения.ПрофильНастроекЭДО, "ПрофильНастроекЭДО");
				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(ПараметрыПрофиляНастроек.СпособОбменаЭД, "СпособОбменаЭД");
				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(ПараметрыПрофиляНастроек.ИдентификаторОрганизации, "ИдентификаторОрганизации");
				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(НовыеПриглашения.Идентификатор, "ИдентификаторКонтрагента");
				НастройкаЭДО.ИсходящиеДокументы.Загрузить(ИсходнаяТаблицаЭД);
				
				// Загрузка табличной части ВходящиеДокументы из профиля настроек ЭДО.
				НастройкаЭДО.ВходящиеДокументы.Загрузить(ТаблицаПредопределенногоПрофиля("Автоматически"));
			КонецЕсли;
			
			// Заполнение остальных реквизитов.
			НастройкаЭДО.ИдентификаторКонтрагента = НовыеПриглашения.Идентификатор;
			Если ЗначениеЗаполнено(НовыеПриглашения.ТекстПриглашения) Тогда
				НастройкаЭДО.ТекстПриглашения = НовыеПриглашения.ТекстПриглашения;
			КонецЕсли;
			
			НастройкаЭДО.СтатусПодключения = НовыеПриглашения.СтатусУчастника;
			ОбменСКонтрагентамиВнутренний.ОбновитьДатуИзмененияСтатуса(НастройкаЭДО);
			
			СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
			Если НовыеПриглашения.СтатусУчастника = Перечисления.СтатусыУчастниковОбменаЭД.Присоединен Тогда
				СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ПроверкаТехническойСовместимости;
				
				// Проверка на существование уже присоединенной настройки по контрагенту.
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	НастройкаЭДОИсходящиеДокументы.Ссылка КАК НастройкаЭДО
				|ИЗ
				|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкаЭДОИсходящиеДокументы
				|ГДЕ
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
				|	И НастройкаЭДОИсходящиеДокументы.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
				|	И НастройкаЭДОИсходящиеДокументы.Ссылка.Организация = &Организация
				|	И НастройкаЭДОИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
				|	И НЕ НастройкаЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
				|
				|СГРУППИРОВАТЬ ПО
				|	НастройкаЭДОИсходящиеДокументы.Ссылка";
				
				Запрос.УстановитьПараметр("Контрагент",  Контрагент);
				Запрос.УстановитьПараметр("Организация", НовыеПриглашения.ПрофильНастроекЭДО.Организация);
				Запрос.УстановитьПараметр("ДоговорКонтрагента", НастройкаЭДО.ДоговорКонтрагента);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					НастройкаЭДО.ОбменДанными.Загрузка = Истина;
					НастройкаЭДО.СтатусПодключения     = Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяСогласие;
					НастройкаЭДО.Комментарий           = НСтр("ru = '##Автоматически снят статус ""присоединен"". Уже существует настройка ЭДО по выбранному контрагенту.'");
				КонецЕсли;
				
			ИначеЕсли НовыеПриглашения.СтатусУчастника = Перечисления.СтатусыУчастниковОбменаЭД.Отсоединен Тогда
				СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.Закрыто;
			КонецЕсли;
			НастройкаЭДО.СостояниеСоглашения = СостояниеСоглашения;
			
			ТекстОписанияОшибки = "";
			Если Ошибка Тогда
				ШаблонОписанияОшибки = НСтр("ru = '%1. Повторите отправку.'");
				ТекстОписанияОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписанияОшибки,
					НовыеПриглашения.ОписаниеОшибки);
			КонецЕсли;
			НастройкаЭДО.ОписаниеОшибки = ТекстОписанияОшибки;
			НастройкаЭДО.АвтоПереходНаНовыеФорматы = Истина;
			НастройкаЭДО.Записать();
			
			// Сдвиг даты проверки приглашений.
			Если СдвигатьДату Тогда
				Запись = РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.СоздатьМенеджерЗаписи();
				Запись.ПрофильНастроекЭДО = НовыеПриглашения.ПрофильНастроекЭДО;
				Запись.Прочитать();
				Запись.ДатаПоследнегоПолученияПриглашений = НовыеПриглашения.Изменен;
				Запись.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет, нужно ли выводить предупреждение по формату в электронном документе, а также формирует необходимые
// для вывода предупреждения данные.
//
// Параметры:
//  ЭлектронныйДокумент	 - ДокументСсылка.ЭлектронныйДокументВходящий - электронный документ.
// 
// Возвращаемое значение:
//  Структура - содержит ключи:
//               * Выводить - Булево;
//               * ТекстПредупреждения - Строка.
//
Функция ПараметрыВыводаПредупреждения(ЭлектронныйДокумент) Экспорт

	Результат = Новый Структура("Выводить, ТекстПредупреждения", Ложь, "");
	
	ПрисоединенныйФайлСсылка = ПрисоединенныйФайл(ЭлектронныйДокумент);
	Если ЗначениеЗаполнено(ПрисоединенныйФайлСсылка) Тогда
		РеквизитыЭлектронногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, "ВидЭД");
		РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайлСсылка, 
			"ДатаФормированияЭДОтправителем");
		
		ВидЭД = РеквизитыЭлектронногоДокумента.ВидЭД;
		
		// Сохраним электронный документ в файл.
		ПараметрыФайла = Неопределено;
		ОбменСКонтрагентамиВнутренний.СохранитьЭДВФайл(ПрисоединенныйФайлСсылка, ПараметрыФайла);
		
		Если ЗначениеЗаполнено(ПараметрыФайла.ИмяФайла) Тогда
			ОписаниеОшибки = "";
			ДанныеФайла = ОбменСКонтрагентамиВнутренний.ДанныеФайлаЭД(ПараметрыФайла.ИмяФайла, ОписаниеОшибки);
			
			Если ДанныеФайла <> Неопределено Тогда
				ПространствоИмен = ДанныеФайла.Тип().URIПространстваИмен;
				ФорматЭлектронногоДокумента = ФорматПоПространствуИмен(ВидЭД, ПространствоИмен);
				
				СведенияОФормате = СведенияОФормате(ВидЭД, ФорматЭлектронногоДокумента);
				
				Если СведенияОФормате <> Неопределено 
					И ЗначениеЗаполнено(СведенияОФормате.ТекстПредупрежденияДляВходящегоДокумента) Тогда
					
					Если Не ЗначениеЗаполнено(СведенияОФормате.УсловиеВыводаПредупреждения) Тогда
						Результат.Выводить = Истина;
					ИначеЕсли СведенияОФормате.УсловиеВыводаПредупреждения = "ДатаФормированияЭлектронногоДокумента" Тогда
						Если ЗначениеЗаполнено(СведенияОФормате.ДатаОкончанияДействия) 
							И КонецДня(СведенияОФормате.ДатаОкончанияДействия) < РеквизитыФайла.ДатаФормированияЭДОтправителем Тогда
							Результат.Выводить = Истина;
						КонецЕсли;
					КонецЕсли;
					
					// Предупреждение нужно выводить. Будем формировать текст.
					Если Результат.Выводить Тогда
						Результат.ТекстПредупреждения = ТекстПредупрежденияДляВходящегоДокумента(СведенияОФормате);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции 

// Добавляет в форму элементы условного оформления, необходимые для оформления таблицы исходящих документов.
//
// Параметры:
//  Форма							 - УправляемаяФорма - форма настроек. Должна содержать таблицу параметров обработки исходящих
//                                                        документов. В таблице обязательно должны присутствовать колонки,
//                                                        содержащая вид электронного документа и версию формата.
//  ИмяЭлементаВерсияФормата		 - Строка - имя элемента формы, отображающего версию формата.
//  ПолноеИмяПоляВерсияФормата		 - Строка - имя поля, содержащего версию формата.
//  ПолноеИмяПоляИсходящийДокумент	 - Строка - имя поля, содержащего вид электронного документа.
//
Процедура УстановитьУсловноеОформлениеФорматов(Форма, ИмяЭлементаВерсияФормата = "ИсходящиеДокументыВерсияФормата",
	ПолноеИмяПоляВерсияФормата = "Объект.ИсходящиеДокументы.ВерсияФормата", 
	ПолноеИмяПоляИсходящийДокумент = "Объект.ИсходящиеДокументы.ИсходящийДокумент") Экспорт
	
	ТаблицаФорматов = ФорматыЭлектронныхДокументов();
	
	Для Каждого СтрокаФормата Из ТаблицаФорматов Цикл
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаВерсияФормата);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолноеИмяПоляВерсияФормата);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = СтрокаФормата.ИдентификаторФормата;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолноеИмяПоляИсходящийДокумент);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = СтрокаФормата.ВидЭлектронногоДокумента;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", СтрокаФормата.ПредставлениеФормата);
		Если Не СтрокаФормата.Действует Тогда
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

// Получение имени файла для выгрузки ФНС
//
// Параметры:
//  СтруктураИмени - Структура - параметры для формирования.
// 
// Возвращаемое значение:
//  Строка - имя файла.
//
Функция ФНСИмяФайла(СтруктураИмени) Экспорт
	
	ИмяФайла = СтруктураИмени.Префикс + "_" + СтруктураИмени.ИДПолучателя + "_"
		+ СтруктураИмени.ИДОтправителя + "_" + СтруктураИмени.ГГГГММДД + "_" + СтруктураИмени.УникальныйИдентификатор;
	
	Возврат ИмяФайла;
	
КонецФункции

// Возврат имени временного файла.
//
// Параметры:
//  Расширение - Строка - строка расширения файла.
// 
// Возвращаемое значение:
//  Строка - имя временного файла.
//
Функция ТекущееИмяВременногоФайла(Расширение = "") Экспорт
	
	ИмяВременногоФайла = "";
	ОбменСКонтрагентамиПереопределяемый.ТекущееИмяВременногоФайла(ИмяВременногоФайла, Расширение);
	Если НЕ ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	КонецЕсли;
	
	Возврат ИмяВременногоФайла;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Сравнение электронных документов

// Готовит файлы табличных документов MXL по данным электронных документов.
//
// Параметры:
//  МассивЭД - Массив - массив ссылок на электронные документы, которые необходимо обработать.
//
// Возвращаемое значение:
//  Массив структур - структура содержит имя файла данных и имя файла табличного документа MXL.
//
Функция ПодготовитьВременныеФайлыПросмотраЭД(МассивЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПереченьВременныхФайлов = Новый Массив;
	
	Для Каждого ЭД Из МассивЭД Цикл
		
		ДопИнформацияПоЭД = ПолучитьДанныеФайла(ЭД, Новый УникальныйИдентификатор, Истина);
		Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
			
			ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
			Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
				ИмяФайла = ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
			Иначе
				ИмяФайла = ТекущееИмяВременногоФайла("xml");
			КонецЕсли;
			ДанныеЭД.Записать(ИмяФайла);
			
			ФайлыАрхива = Новый Массив;
			Если СтрНайти(ДопИнформацияПоЭД.Расширение, "zip") > 0 Тогда
				
				ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("proc", ЭД.УникальныйИдентификатор());
				ОбменСКонтрагентамиВнутренний.РаспаковатьАрхив(ИмяФайла, ПапкаДляРаспаковки, НСтр("ru = 'Распаковка пакета ЭД'"));
				
				ФайлыАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
				
			ИначеЕсли СтрНайти(ДопИнформацияПоЭД.Расширение, "xml") > 0 Тогда
				ФайлДанных = Новый Файл(ИмяФайла);
				ФайлыАрхива.Добавить(ФайлДанных);
			КонецЕсли;
			
			Для Каждого РаспакованныйФайл Из ФайлыАрхива Цикл
				ПараметрыПечати = Новый Структура;
				ПараметрыПечати.Вставить("ИД", ЭД.УникальныйИдентификатор());
				ТабличныйДокумент = ОбменСКонтрагентамиВнутренний.СформироватьПечатнуюФормуЭД(РаспакованныйФайл.ПолноеИмя,
					ЭД.НаправлениеЭД, ПараметрыПечати);
					
				Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
					АдресФайлаДанных = ПоместитьВоВременноеХранилище(ТабличныйДокумент, ЭД.УникальныйИдентификатор());
					НазваниеЭД = ПолучитьПредставлениеЭД(ЭД.Ссылка);
					
					СтруктураИменФайлов = Новый Структура("НазваниеЭД, АдресФайлаДанных", НазваниеЭД, АдресФайлаДанных);
					ПереченьВременныхФайлов.Добавить(СтруктураИменФайлов);
				КонецЕсли;
				
				Прервать; // Должен быть только один файл данных.
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ПапкаДляРаспаковки) Тогда
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
			КонецЕсли;
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
		КонецЕсли;
	КонецЦикла;

	Возврат ПереченьВременныхФайлов;
	
КонецФункции

// Получение настроек обмена по электронному документу.
//
// Параметры:
//  ФайлЭД - Ссылка, Объект - электронный документ.
// 
// Возвращаемое значение:
//  Структура - параметры обмена электронными документами.
//
Функция НастройкиОбменаЭД(ФайлЭД) Экспорт
	
	НастройкиОбмена = Неопределено;
	
	Если ФайлЭД <> Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка() Тогда

		РеквизитыФайла = ЭлектронноеВзаимодействиеСлужебный.ЗначенияРеквизитовОбъектаИлиСсылки(ФайлЭД,
				"НаправлениеЭД, ПодписанЭП, ВладелецФайла, ТипЭлементаВерсииЭД, ЭлектронныйДокументВладелец, НаправлениеЭД");
		РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыФайла.ВладелецФайла,
				"ВидЭД, НастройкаЭДО, ПрофильНастроекЭДО, ВерсияРегламентаЭДО, ТребуетсяПодтверждение, ТребуетсяИзвещение");
			
		Если ЗначениеЗаполнено(РеквизитыЭД) Тогда
			НастройкиОбмена = Новый Структура;
			
			РеквизитыПрофиляНастроекЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыЭД.ПрофильНастроекЭДО,
			"СпособОбменаЭД");
			
			НастройкиОбмена.Вставить("СпособОбмена",          РеквизитыПрофиляНастроекЭДО.СпособОбменаЭД);
			
			НастройкиОбмена.Вставить("МаршрутПодписания",     Справочники.МаршрутыПодписания.ОднойДоступнойПодписью);
			
			ВидЭД = Неопределено;
			
			НастройкиОбмена.Вставить("Направление",            РеквизитыФайла.НаправлениеЭД);
			НастройкиОбмена.Вставить("ВидЭД",                  РеквизитыЭД.ВидЭД);
			Если ЭтоИзвещениеОПолучении(РеквизитыФайла.ТипЭлементаВерсииЭД) Тогда
				ИспользоватьПодпись = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыФайла.ЭлектронныйДокументВладелец,
					"ПодписанЭП");
			Иначе
				ИспользоватьПодпись = РеквизитыФайла.ПодписанЭП;
			КонецЕсли;
			НастройкиОбмена.Вставить("ИспользоватьПодпись",    ИспользоватьПодпись);
			НастройкиОбмена.Вставить("ИспользоватьКвитанции",  Ложь);
			НастройкиОбмена.Вставить("ТребуетсяПодтверждение", РеквизитыЭД.ТребуетсяПодтверждение);
			НастройкиОбмена.Вставить("ТребуетсяИзвещение",     РеквизитыЭД.ТребуетсяИзвещение);
			НастройкиОбмена.Вставить("ВерсияРегламентаЭДО",    РеквизитыЭД.ВерсияРегламентаЭДО);
			НастройкиОбмена.Вставить("ТипЭлементаВерсииЭД",    РеквизитыФайла.ТипЭлементаВерсииЭД);
			
			СоглашениеЭД = РеквизитыЭД.НастройкаЭДО;
			ВерсияФорматаПакета = ВерсияПакетаЭД(ФайлЭД);
			
			НастройкиОбмена.Вставить("ВерсияФорматаПакета", ВерсияФорматаПакета);
			
			ЗапросПоНастройкам = Новый Запрос;
			ЗапросПоНастройкам.УстановитьПараметр("СоглашениеЭД",    РеквизитыЭД.НастройкаЭДО);
			ЗапросПоНастройкам.УстановитьПараметр("НаправлениеЭД",   РеквизитыФайла.НаправлениеЭД);
			ЗапросПоНастройкам.УстановитьПараметр("ВидЭД",           РеквизитыЭД.ВидЭД);
			ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
			"ИспользоватьЭлектронныеПодписиЭД");
			
			ЗапросПоНастройкам.УстановитьПараметр("ИспользуетсяЭП", ИспользоватьЭП);
			
			ВидЭДВладельца = Неопределено;
			ЭтоСлужебныйЭД = Ложь;
			Если ЭтоСлужебныйДокумент(РеквизитыФайла.ТипЭлементаВерсииЭД) Тогда
				ЭтоСлужебныйЭД = Истина;
				ЭДВладелец = РеквизитыФайла.ЭлектронныйДокументВладелец;
				Если ЗначениеЗаполнено(ЭДВладелец) Тогда
					ВидЭДВладельца = РеквизитыЭД.ВидЭД;
				КонецЕсли;
			КонецЕсли;
			ЗапросПоНастройкам.УстановитьПараметр("ВидЭДВладельца", ВидЭДВладельца);
			ЗапросПоНастройкам.УстановитьПараметр("ЭтоСлужебныйЭД", ЭтоСлужебныйЭД);
			
			ВидыЭДФНС = Новый Массив;
			ВидыЭДФНС.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
			ВидыЭДФНС.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
			ВидыЭДФНС.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
			ЗапросПоНастройкам.УстановитьПараметр("ВидыЭДФНС", ВидыЭДФНС);
			
			ЗапросПоНастройкам.Текст =
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА &ИспользуетсяЭП
			|			ТОГДА Соглашение.ИспользоватьПодпись
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ИспользоватьПодпись,
			|	Соглашение.ИспользоватьКвитанции,
			|	Соглашение.МаршрутПодписания
			|ИЗ
			|	(ВЫБРАТЬ
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП КАК ИспользоватьПодпись,
			|		ВЫБОР
			|			КОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ВерсияФорматаПакета = ЗНАЧЕНИЕ(Перечисление.ВерсииФорматаПакетаЭД.Версия30)
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ КАК ИспользоватьКвитанции,
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ТребуетсяОтветнаяПодпись КАК ТребуетсяПодтверждение,
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
			|		ВЫБОР
			|			КОГДА &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
			|			ИНАЧЕ ВЫБОР
			|					КОГДА &ВидЭД В (&ВидыЭДФНС)
			|							И &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
			|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
			|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
			|				КОНЕЦ
			|		КОНЕЦ КАК НаправлениеЭД,
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.МаршрутПодписания КАК МаршрутПодписания
			|	ИЗ
			|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
			|	ГДЕ
			|		ВЫБОР
			|				КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Торг12Покупатель)
			|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ТОРГ12Продавец)
			|				КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктЗаказчик)
			|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктИсполнитель)
			|				КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)
			|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель)
			|				КОГДА &ЭтоСлужебныйЭД
			|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭДВладельца
			|				ИНАЧЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
			|			КОНЕЦ
			|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &СоглашениеЭД
			|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать) КАК Соглашение
			|ГДЕ
			|	Соглашение.НаправлениеЭД = &НаправлениеЭД";
			
			Результат = ЗапросПоНастройкам.Выполнить();
			
			Если НЕ Результат.Пустой() Тогда
				ТЗ = Результат.Выгрузить();
				ЗаполнитьЗначенияСвойств(НастройкиОбмена, ТЗ[0],,
					?(ЭтоСлужебныйЭД, "ИспользоватьПодпись",""));
			КонецЕсли;
			
			Если РеквизитыФайла.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				НастройкиОбмена.ТребуетсяПодтверждение = РеквизитыЭД.ТребуетсяПодтверждение;
				НастройкиОбмена.ТребуетсяИзвещение = РеквизитыЭД.ТребуетсяИзвещение;
			ИначеЕсли ИспользоватьЭП И РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
				НастройкиОбмена.ТребуетсяПодтверждение = РеквизитыЭД.ТребуетсяПодтверждение;
			КонецЕсли;
			
			// Добавим настройки для работы маршрутов подписания
			Если ЗначениеЗаполнено(РеквизитыЭД.ПрофильНастроекЭДО) Тогда
				ИспользуемыеСертификаты = РеквизитыЭД.ПрофильНастроекЭДО.СертификатыПодписейОрганизации.ВыгрузитьКолонку("Сертификат");
			ИначеЕсли РеквизитыФайла.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
				// Если это интеркампани, нужно подготовить маршрут вручную, так как он будет нестандартный и фиксированный.
				НастройкиОбмена.Вставить("МаршрутПодписания",     Справочники.МаршрутыПодписания.УказыватьПриСоздании);
				
				ИспользуемыеСертификаты = Новый ТаблицаЗначений;
				ИспользуемыеСертификаты.Колонки.Добавить("Подписант", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
				ИспользуемыеСертификаты.Колонки.Добавить("Сертификат", 
					Новый ОписаниеТипов("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования"));
				ИспользуемыеСертификаты.Колонки.Добавить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип);
				
				НастройкаЭДО = РеквизитыЭД.НастройкаЭДО;
				Если ЗначениеЗаполнено(НастройкаЭДО) Тогда
					Если ЗначениеЗаполнено(НастройкаЭДО.Организация) Тогда
						НоваяСтрока = ИспользуемыеСертификаты.Добавить();
						НоваяСтрока.Организация = НастройкаЭДО.Организация;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(НастройкаЭДО.Контрагент) Тогда
						НоваяСтрока = ИспользуемыеСертификаты.Добавить();
						НоваяСтрока.Организация = НастройкаЭДО.Контрагент;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ИспользуемыеСертификаты = Новый Массив;
			КонецЕсли;
			НастройкиОбмена.Вставить("ИспользуемыеСертификаты",     ИспользуемыеСертификаты);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НастройкиОбмена;
	
КонецФункции

// Получение дополнительных данных электронного документа.
//
// Параметры:
//  ЭДВладелец - ДокументСсылка.ЭлектронныйДокументВходящий, ЭлектронныйДокументИсходящий - электронный документ.
// 
// Возвращаемое значение:
//  СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ.
//
Функция ВыборкаДопДанныеЭД(ЭДВладелец) Экспорт
	
	// Для одного ЭД может быть сформирован один ЭД-доп.данных.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭДПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
		|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДополнительныйЭД)";

	Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", ЭДВладелец);

	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Сохранение файлов дополнительных данных электронного документа.
//
// Параметры:
//  ПрисоединенныйФайл - ДокументСсылка.ЭлектронныйДокументВходящий, ЭлектронныйДокументИсходящий - электронный документ.
//  ИмяКаталога - Строка - каталог сохранения.
//  СтруктураФайловЭД - Структура - параметры файлов электронных документов.
//
Процедура СохранитьФайлыДопДанныхЭД(ПрисоединенныйФайл, ИмяКаталога, СтруктураФайловЭД) Экспорт
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		// Для одного ЭД может быть сформирован один ЭД-доп.данных.
		Выборка = ВыборкаДопДанныеЭД(ПрисоединенныйФайл);

		Если Выборка.Следующий() Тогда
			Файл = Новый Файл(ИмяКаталога);
			Если НЕ Файл.Существует() Тогда
				СоздатьКаталог(ИмяКаталога);
			КонецЕсли;
			ДанныеФайла = ПолучитьДанныеФайла(Выборка.Ссылка);
			ИмяПолучаемогоФайла = ДанныеФайла.ИмяФайла;
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ДвоичныеДанныеФайла.Записать(ИмяКаталога + ИмяПолучаемогоФайла);
		
			СтруктураФайловЭД.Вставить("ДополнительныйФайл", ИмяПолучаемогоФайла);
			
			// Необходимо предусмотреть заполнение подписей для дополнительного файла в дереве транспортной информации.
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция предназначена для проверки имени файла на наличие некорректных символов.
// Алгоритм взят с небольшими изменениями из процедуры клиентского общего модуля "ФайловыеФункции".
//
// Параметры:
//  СтрИмяФайла - Строка - проверяемое имя файла.
//  УдалятьНекорректные - Булево - удалять или нет некорректные символы из переданной строки.
// Возвращаемое значение:
//  Строка - имя файла.
//
Функция КорректноеИмяФайла(Знач СтрИмяФайла, УдалятьНекорректные = Ложь) Экспорт
	
	// Перечень запрещенных символов взят отсюда: http://support.microsoft.com/kb/100108/ru
	// при этом были объединены запрещенные символы для файловых систем FAT и NTFS.
	СтрИсключения = """/\[]:;|=,?*<>№";
	Результат = Истина;
	
	Для Сч = 1 По СтрДлина(СтрИсключения) Цикл
		Символ = Сред(СтрИсключения, Сч, 1);
		Если СтрНайти(СтрИмяФайла, Символ) <> 0 Тогда
			Если УдалятьНекорректные Тогда
				СтрИмяФайла = СтрЗаменить(СтрИмяФайла, Символ, "");
			Иначе
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Результат Тогда
		Текст = НСтр("ru = 'В имени файла не должно быть следующих символов: %1
		|Имя файла: %2'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрИсключения, СтрИмяФайла);
		ВызватьИсключение ТекстОшибки;
	Иначе
		Возврат СтрИмяФайла;
	КонецЕсли;
	
КонецФункции

// Получение массива статусов ЭД по настройке обмена.
//
// Параметры:
//  НастройкиОбмена - Структура - настройки обмена электронными документами.
// 
// Возвращаемое значение:
//  Массив - возможные статусы по настройке.
//
Функция ВернутьМассивСтатусовЭД(НастройкиОбмена) Экспорт
	
	МассивСтатусов = Новый Массив;
	
	Если Не ЗначениеЗаполнено(НастройкиОбмена) Тогда
		Возврат МассивСтатусов;
	КонецЕсли;
	
	ТребуетсяПодтверждение = Истина;
	Если ТипЗнч(НастройкиОбмена) = Тип("Структура") Тогда
		Если Не НастройкиОбмена.Свойство("ТребуетсяПодтверждение", ТребуетсяПодтверждение) Тогда
			ТребуетсяПодтверждение = Истина;
		КонецЕсли;
	Иначе
		Если НастройкиОбмена.Владелец().Колонки.Найти("ТребуетсяПодтверждение") = Неопределено Тогда
			ТребуетсяПодтверждение = Истина;
		Иначе
			ТребуетсяПодтверждение = НастройкиОбмена.ТребуетсяПодтверждение;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(ТребуетсяПодтверждение) <> Тип("Булево") Тогда
		ТребуетсяПодтверждение = Истина;
	КонецЕсли;
	
	Если ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД) Тогда
		ТребуетсяПодтверждение = Ложь;
	КонецЕсли;
	
	Если НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
		
		Если ЭтоИзвещениеОПолучении(НастройкиОбмена.ТипЭлементаВерсииЭД)
			ИЛИ ЭтоУведомлениеОбУточнении(НастройкиОбмена.ТипЭлементаВерсииЭД) Тогда
			
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
			Если НастройкиОбмена.ИспользоватьПодпись Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
			КонецЕсли;
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
			
		ИначеЕсли НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
			ИЛИ НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
			
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
			Если ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД)
					ИЛИ НастройкиОбмена.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
			КонецЕсли;
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
			
			Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД 
				И НастройкиОбмена.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
				Если ТребуетсяПодтверждение Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
				КонецЕсли;
			Иначе
				
				// Изменяется набор статусов ЭД в зависимости от использования версии регламента.
				Если НастройкиОбмена.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
					
					Если НЕ ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД) Тогда
						
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
						
						Если НастройкиОбмена.ТребуетсяИзвещение Тогда
							МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
						КонецЕсли;
					КонецЕсли;
				Иначе
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
				КонецЕсли;
				
				
				Если ТребуетсяПодтверждение Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
			
			Если ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД)
				ИЛИ НастройкиОбмена.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
			КонецЕсли;
			
			Если НастройкиОбмена.ИспользоватьПодпись Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
			КонецЕсли;
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
			Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД
				И НастройкиОбмена.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
				Если ТребуетсяПодтверждение Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
				КонецЕсли;
			Иначе
				Если НастройкиОбмена.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
					// Не будем для ответных титулов добавлять статус Доставлен,
					// т.к. по ним не должны приходить Уведомления.
					Если НЕ ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД) Тогда
						
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
						
						Если НастройкиОбмена.ТребуетсяПодтверждение Тогда
							МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
						КонецЕсли;
					КонецЕсли;
				Иначе
					// Если формат исходящих документов 2.0
					Если НастройкиОбмена.ИспользоватьКвитанции Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
					КонецЕсли;
					Если НастройкиОбмена.ИспользоватьПодпись
						И НЕ ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД) Тогда
						
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Входящий Тогда
		
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Получен);
		
		Если НЕ (ЭтоИзвещениеОПолучении(НастройкиОбмена.ТипЭлементаВерсииЭД)
				ИЛИ ЭтоПодтверждение(НастройкиОбмена.ТипЭлементаВерсииЭД)
				ИЛИ ЭтоУведомлениеОбУточнении(НастройкиОбмена.ТипЭлементаВерсииЭД)
				ИЛИ ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД)) Тогда
			
			Если НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
				ИЛИ НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
				
				Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД 
					И НастройкиОбмена.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
					
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
					Если ТребуетсяПодтверждение Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
					КонецЕсли;
				Иначе
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
				Если НастройкиОбмена.ТипЭлементаВерсииЭД <> Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
					И НЕ ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД)
					И ТребуетсяПодтверждение Тогда
						
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД
					И НастройкиОбмена.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
					Если ТребуетсяПодтверждение Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
					КонецЕсли;
				Иначе
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
					Если НастройкиОбмена.ИспользоватьПодпись
						И НастройкиОбмена.ТребуетсяПодтверждение
						И НЕ ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД) Тогда
						
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
						Если НастройкиОбмена.ИспользоватьКвитанции
							И Не НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
							МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ДоставленоПодтверждение);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Интеркампани Тогда
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолностьюПодписан);
	КонецЕсли;
	
	
	Возврат МассивСтатусов;
	
КонецФункции

// Удаление лишнего слэша в пути.
//
// Параметры:
//  Путь - Строка - путь к каталогу (файлу).
//
Процедура УдалитьЛишнийСлэшВПути(Путь) Экспорт
	
	Пока СтрНайти(Путь, "\\") > 0 Цикл
		
		Путь = СтрЗаменить(Путь, "\\", "\");
		
	КонецЦикла;
	
КонецПроцедуры

// Определение настройки обмена электронными документами по параметрам.
//
// Параметры:
//  СтруктураПараметров - Структура - параметры поиска.
//  МассивОтпечатковСертификатов - Массив - отпечатки сертификатов для проверки.
//  ФлагДействующиеСоглашения - Булево - признак поиска только действующих соглашений.
// 
// Возвращаемое значение:
//  Структура - данные настройки обмена.
//
Функция ОпределитьНастройкиОбменаЭД(СтруктураПараметров, МассивОтпечатковСертификатов = Неопределено, ФлагДействующиеСоглашения = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиОбменаЭД = Неопределено;
	
	НаправлениеЭД = "";
	ВидЭД = "";
	Контрагент = "";
	Если СтруктураПараметров.Свойство("НаправлениеЭД", НаправлениеЭД)
		И СтруктураПараметров.Свойство("ВидЭД", ВидЭД)
		И СтруктураПараметров.Свойство("Контрагент", Контрагент)
		И ЗначениеЗаполнено(НаправлениеЭД) И ЗначениеЗаполнено(ВидЭД) И ЗначениеЗаполнено(Контрагент) Тогда
		
		Запрос  = Новый Запрос;
		Запрос.УстановитьПараметр("Пользователь",	Пользователи.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("НаправлениеЭД",	НаправлениеЭД);
		
		Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
			ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;		
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ВидЭД",			ВидЭД);
		Запрос.УстановитьПараметр("Контрагент",		Контрагент);
		
		ДоговорКонтрагента = "";
		Если СтруктураПараметров.Свойство("ДоговорКонтрагента", ДоговорКонтрагента) И Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ДоговорКонтрагента = ОбменСКонтрагентамиПовтИсп.ПолучитьПустуюСсылку("ДоговорыКонтрагентов");
		КонецЕсли;
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
		
		ВидЭДВладельца = Неопределено;
		Если СтруктураПараметров.Свойство("ВидЭДВладельца", ВидЭДВладельца) Тогда
			Запрос.УстановитьПараметр("ЭтоСлужебныйЭД", Истина);
		Иначе
			Запрос.УстановитьПараметр("ЭтоСлужебныйЭД", Ложь);
		КонецЕсли;
		Запрос.УстановитьПараметр("ВидЭДВладельца",				ВидЭДВладельца);
		Запрос.УстановитьПараметр("ДокументФНС",				ЭтоФНС(ВидЭДВладельца));
		Запрос.УстановитьПараметр("ТолькоДействующиеСоглашения",ФлагДействующиеСоглашения);
		Запрос.УстановитьПараметр("ПользовательНеУказан",		Пользователи.СсылкаНеуказанногоПользователя());
		
		СоглашениеЭД = "";
		Организация = "";
		ВыполнятьЗапрос = Истина;
		Если СтруктураПараметров.Свойство("СоглашениеЭД", СоглашениеЭД) И ЗначениеЗаполнено(СоглашениеЭД) Тогда
			Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
			ПолучитьТекстНастроекОбменаПоСоглашению(Запрос.Текст);
		ИначеЕсли СтруктураПараметров.Свойство("Организация", Организация) И ЗначениеЗаполнено(Организация) Тогда
			Запрос.УстановитьПараметр("Организация", Организация);
			Если ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
				Партнер = "";
				СтруктураПараметров.Свойство("Партнер", Партнер);
				Запрос.УстановитьПараметр("Партнер", Партнер);
			КонецЕсли;
			ПолучитьТекстЗапросаНастроекОбменаСПриоритетами(Запрос.Текст);
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			ВыполнятьЗапрос = Ложь;
			Если РезультатЗапроса[2].Пустой() Тогда
				// Поищем настройку ЭДО без указания договора контрагента.
				ДоговорКонтрагента = ОбменСКонтрагентамиПовтИсп.ПолучитьПустуюСсылку("ДоговорыКонтрагентов");
				Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
				ВыполнятьЗапрос = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запрос.Текст) Тогда
			
			Если ВыполнятьЗапрос Тогда
				РезультатЗапроса = Запрос.ВыполнитьПакет();
			КонецЕсли;
			ТЗ = РезультатЗапроса[2].Выгрузить();
			
			Если Не ТЗ.Количество() = 0 Тогда
				ТекущаяНастройка = ТЗ[0];
				
				НастройкиОбменаЭД = Новый Структура;
				НастройкиОбменаЭД.Вставить("СертификатДоступен", Ложь);
				// Если с клиента были переданы установленные сертификаты криптографии,
				// то надо выбрать настройку с этими сертификатами.
				Если МассивОтпечатковСертификатов <> Неопределено Тогда

					Для Каждого СтрокаТЗ Из ТЗ Цикл
						Если СтрокаТЗ.Подписывать Тогда
							Если МассивОтпечатковСертификатов = Неопределено ИЛИ МассивОтпечатковСертификатов.Количество() = 0 Тогда
								Прервать;
							Иначе
								Если МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииДляПодписи.Отпечаток) <> Неопределено
									ИЛИ МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииПолучателяДляПодписи.Отпечаток) <> Неопределено
									ИЛИ МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииДляПодтверждения.Отпечаток) <> Неопределено Тогда
									
									ТекущаяНастройка = СтрокаТЗ;
									НастройкиОбменаЭД.Вставить("СертификатДоступен", Истина);
									Прервать;
								КонецЕсли;
							КонецЕсли;
						Иначе
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Каждого ТекКолонка Из ТЗ.Колонки Цикл
					НастройкиОбменаЭД.Вставить(ТекКолонка.Имя, ТекущаяНастройка[ТекКолонка.Имя]);
				КонецЦикла;
				
				Если НастройкиОбменаЭД.Свойство("Подписывать") Тогда
					ФлагПодписи = НастройкиОбменаЭД.Подписывать;
				Иначе
					ФлагПодписи = Ложь;
				КонецЕсли;
				НастройкиОбменаЭД.Вставить("Подписывать", ФлагПодписи);
				
				ВидПервичногоДокумента = Неопределено;
				Если СтруктураПараметров.Свойство("ВидПервичногоДокумента", ВидПервичногоДокумента) Тогда
					НастройкиОбменаЭД.Вставить("ВидПервичногоДокумента", ВидПервичногоДокумента);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Если заполнены не все обязательные реквизиты, то нельзя утверждать, что нет соглашения об обмене.
		НастройкиОбменаЭД = "";
	КонецЕсли;
	
	Возврат НастройкиОбменаЭД;
	
КонецФункции

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ЛюбаяСсылка - элемент справочника, документ, ...
//  ИменаРеквизитов - Строка, Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то имя поля берется из ключа.
// 
// Возвращаемое значение:
//  Структура    - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Функция ЗначенияРеквизитов(Ссылка, ИменаРеквизитов) Экспорт
	
	СтруктураДанных = "";
	ОбменСКонтрагентамиПереопределяемый.ПолучитьСтруктуруЗначенийРеквизитов(Ссылка, ИменаРеквизитов, СтруктураДанных);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		СтруктураДанных = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

// Меняет состояние ЭД документа ИБ
//
// Параметры:
//   ИзменяемыеДокументы - массив - ссылка на документ ИБ
//   НовоеСостояние - ПеречислениеСсылка.СостоянияВерсийЭД - значение нового состояния
//   ИзменяемыеСостояния - Массив- ПеречислениеСсылка.СостоянияВерсийЭД - Массив состояний, менять которые не нужно.
//
Процедура ИзменитьСостояниеЭД(ИзменяемыеДокументы, НовоеСостояние, ИзменяемыеСостояния = Неопределено,
	ВыполняетсяОбновлениеИнформационнойБазы = Ложь) Экспорт
	
	Если Не ТипЗнч(ИзменяемыеДокументы) = Тип("Массив") Тогда
		
		ДокументыИБ = Новый Массив;
		ДокументыИБ.Добавить(ИзменяемыеДокументы);
	Иначе
		ДокументыИБ = ИзменяемыеДокументы;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Для Каждого ДокументИБ Из ДокументыИБ Цикл
			Если Не ИзменяемыеСостояния = Неопределено Тогда
				Если ИзменяемыеСостояния.Найти(ДокументИБ.СостояниеЭДО) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ДокументОбъект = ДокументИБ.ПолучитьОбъект();
			ДокументОбъект.СостояниеЭДО = НовоеСостояние;
			ДокументОбъект.ДатаИзмененияСостоянияЭДО = ТекущаяДатаСеанса();
			ДокументОбъект.ОбменДанными.Загрузка = ВыполняетсяОбновлениеИнформационнойБазы;
			ДокументОбъект.Записать();
			СводнаяИнформацияПоСтатусу = Новый Структура;
			СводнаяИнформацияПоСтатусу.Вставить("СНашейСтороны", Перечисления.СводныеСостоянияЭД.ВсеВыполнено);
			СводнаяИнформацияПоСтатусу.Вставить("СоСтороныДругогоУчастника", Перечисления.СводныеСостоянияЭД.ВсеВыполнено);
			ОбновитьВерсиюЭДВРегистре(ДокументИБ, НовоеСостояние, СводнаяИнформацияПоСтатусу);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// БСП ЭлектроннаяПодпись

// Получение отпечатков ожидаемых сертификатов
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящий, ЭлектронныйДокументИсходящий - электронный документ.
// 
// Возвращаемое значение:
//  Массив - отпечатки сертификатов.
//
Функция ОтпечаткиОжидаемыхСертификатов(ЭлектронныйДокумент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
		ИмяДокумента = "ЭлектронныйДокументВходящий";
	Иначе
		ИмяДокумента = "ЭлектронныйДокументИсходящий";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка,
	|	ЭДПрисоединенныеФайлы.ВидЭД,
	|	ЭДПрисоединенныеФайлы.НастройкаЭДО КАК СоглашениеЭД,
	|	ЭДПрисоединенныеФайлы.ПрофильНастроекЭДО
	|ПОМЕСТИТЬ ВТ_ЭД
	|ИЗ
	|	Документ." + ИмяДокумента + " КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СертификатыЭП.Отпечаток КАК Отпечаток
	|ИЗ
	|	ВТ_ЭД КАК ВТ_ЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ПодписываемыеВидыЭД
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыЭП
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ПрофилиЭДОСертификаты.Сертификат КАК Сертификат
	|				ИЗ
	|					ВТ_ЭД КАК ВТ_ЭД
	|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиЭДОСертификаты
	|						ПО ВТ_ЭД.ПрофильНастроекЭДО = ПрофилиЭДОСертификаты.Ссылка
	|				
	|				ОБЪЕДИНИТЬ ВСЕ
	|				
	|				ВЫБРАТЬ
	|					СоглашенияЭДСертификаты.Сертификат
	|				ИЗ
	|					ВТ_ЭД КАК ВТ_ЭД
	|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
	|						ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭДСертификаты.Ссылка) КАК СертификатыИзНастроекИПрофилей
	|				ПО СертификатыЭП.Ссылка = СертификатыИзНастроекИПрофилей.Сертификат
	|			ПО ПодписываемыеВидыЭД.СертификатЭП = СертификатыЭП.Ссылка
	|		ПО ВТ_ЭД.ВидЭД = ПодписываемыеВидыЭД.ВидЭД
	|ГДЕ
	|	НЕ СертификатыЭП.Отозван
	|	И НЕ СертификатыЭП.ПометкаУдаления
	|	И ПодписываемыеВидыЭД.Использовать
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияЭДСертификатыКонтрагента.Отпечаток
	|ИЗ
	|	ВТ_ЭД КАК ВТ_ЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейКонтрагента КАК СоглашенияЭДСертификатыКонтрагента
	|		ПО СоглашенияЭДСертификатыКонтрагента.Ссылка = ВТ_ЭД.СоглашениеЭД";
	Запрос.УстановитьПараметр("Ссылка", ЭлектронныйДокумент);
	
	МассивОтпечатков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Отпечаток");
	
	Возврат МассивОтпечатков;
	
КонецФункции

// Чтение текста из файла.
//
// Параметры:
//  ИмяФайла - Строка - имя файла.
//  Кодировка - КодировкаТекста - кодировка файла.
//  АвтоОпределениеКодировкиXML - Булево - признак автоопределения кодировки.
// 
// Возвращаемое значение:
//  Строка - текстовое содержимое файла.
//
Функция ПрочитатьТекстИзФайла(ИмяФайла, Кодировка = Неопределено, АвтоОпределениеКодировкиXML = Ложь) Экспорт
	
	Если ЭтоАдресВременногоХранилища(ИмяФайла) Тогда
		ИмяФайлаНаДиске = ПолучитьИмяВременногоФайла();
		ПолучитьИзВременногоХранилища(ИмяФайла).Записать(ИмяФайлаНаДиске);
	Иначе
		ИмяФайлаНаДиске = ИмяФайла;
	КонецЕсли;
	
	ОбъектЧтение = Новый ЧтениеТекста(ИмяФайлаНаДиске, Кодировка);
	ТекстИзФайла = ОбъектЧтение.Прочитать();
	ОбъектЧтение.Закрыть();
	
	Если АвтоОпределениеКодировкиXML И ЗначениеЗаполнено(ТекстИзФайла) Тогда
		ПерваяСтрокаФайла = ВРЕГ(Лев(СтрПолучитьСтроку(ТекстИзФайла, 1), 100));
		Если СтрНайти(ПерваяСтрокаФайла, ВРЕГ("encoding=""UTF-8""")) <> 0 Тогда
			ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF8);
		ИначеЕсли СтрНайти(ПерваяСтрокаФайла, ВРЕГ("encoding=""UTF-16""")) <> 0 Тогда
			ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF16);
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаНаДиске);
	
	Возврат ТекстИзФайла;
	
КонецФункции

// Загрузка строки XML в дерево значений.
//
// Параметры:
//  СтрокаXML - Строка - строка с данными XML
//  ОписаниеОшибки - Строка - возвращаемое сообщение об ошибке.
//  ЧтениеXML - ЧтениеXML - возвращаемый объект ЧтениеXML
//  ТекущийУзел - СтрокаДереваЗначений, Неопределено - строка дерева значений.
// 
// Возвращаемое значение:
//  СтрокаДереваЗначений - загруженная строка XML.
//
Функция ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки = Неопределено, ЧтениеXML = Неопределено, Знач ТекущийУзел = Неопределено) Экспорт
	
	ПерваяИтерация = (ТекущийУзел = Неопределено);
	Если ПерваяИтерация Тогда
		ТекущийУзел = СоздатьДеревоСтруктурыXML();
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(СтрокаXML);
		Исключение
			ОписаниеОшибки = НСтр("ru = 'Ошибка разбора XML:'") + " " + ИнформацияОбОшибке().Описание + ".";
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		Пока ЧтениеXML.Прочитать() Цикл
			ТипУзла = ЧтениеXML.ТипУзла;
			Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				НовыйУзел = ТекущийУзел.Строки.Добавить();
				НовыйУзел.Имя = ЧтениеXML.Имя;
				НовыйУзел.Тип = "Э";
				НовыйУзел.Значение = ЧтениеXML.Значение;
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					НовыйАтрибут = НовыйУзел.Строки.Добавить();
					НовыйАтрибут.Имя = ЧтениеXML.Имя;
					НовыйАтрибут.Тип = "А";
					НовыйАтрибут.Значение = ЧтениеXML.Значение;
				КонецЦикла;
				ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки, ЧтениеXML, НовыйУзел);
				Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
					Возврат Неопределено;
				КонецЕсли;
			ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			ИначеЕсли ТипУзла = ТипУзлаXML.Текст И ТипЗнч(ТекущийУзел) = Тип("СтрокаДереваЗначений") И ТекущийУзел.Тип = "Э" Тогда
				ТекущийУзел.Значение = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОписаниеОшибки = НСтр("ru = 'Ошибка разбора XML:'") + " " + ИнформацияОбОшибке().Описание + ".";
		Возврат Неопределено;
	КонецПопытки;
	
	Если ПерваяИтерация Тогда
		Возврат ТекущийУзел;
	КонецЕсли;
	
КонецФункции

// Получение билета на сайте интернет-поддержки.
//
// Параметры:
//  ИнтернетПоддержкаПользователейПодключена - Булево - в данную переменную возвращается Истина, если 
//	                                                    интернет-поддержку удалось подключить
//  ПоказыватьОшибки - Булево - признак показа ошибок.
//  ПоказыватьОшибкуАутентификацииПриОтсутствииДанных - Булево - определяет, показывать ли ошибку аутентификации
//                                                      в случае, если не указан логин и пароль.
// 
// Возвращаемое значение:
//  Строка - контрольная строка для авторизации.
//
Функция БилетНаСайтПоддержки(ИнтернетПоддержкаПользователейПодключена, ПоказыватьОшибки = Истина,
	ПоказыватьОшибкуАутентификацииПриОтсутствииДанных = Истина) Экспорт
	
	Билет = "";
	ИнтернетПоддержкаПользователейПодключена = Истина;
	
	ТекстЗаголовкаСообщения = НСтр("ru = 'Невозможно подключиться к порталу интернет-поддержки по причине:'");
	
	Если ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
	
		Если ОбщегоНазначения.ПодсистемаСуществует("Тарификация") Тогда
			
			МодульТарификация = ОбщегоНазначения.ОбщийМодуль("Тарификация");
			Если Не МодульТарификация.ЗарегистрированаЛицензияБезлимитнойУслуги(
				ЭлектронноеВзаимодействиеКлиентСервер.ИдентификаторПоставщикаУслугПортал1СИТС(),
				ОбменСКонтрагентамиКлиентСервер.ИдентификаторУслугиОбменаЭлектроннымиДокументами()) Тогда
			
				ОписаниеОшибки = НСтр("ru = 'Услуга ""Обмен электронными документами"" не подключена.
											|Необходимо:
											|Проверить наличие ИТС по рег. номеру;
											|Проверить окончание срока действия договора ИТС на портале.'");
				ТекстСообщения = "";
				Если ПоказыватьОшибки Тогда
					ТекстСообщения = ТекстЗаголовкаСообщения + Символы.ПС + ОписаниеОшибки;
				КонецЕсли;
				
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ТекстЗаголовкаСообщения,
					ОписаниеОшибки, ТекстСообщения);
					
				Возврат Билет;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		ОписаниеОшибки =
			НСтр("ru = 'Библиотека интернет поддержки пользователей не внедрена в конфигурацию.'");
		ТекстСообщения = "";
		Если ПоказыватьОшибки Тогда
			ТекстСообщения = ТекстЗаголовкаСообщения + Символы.ПС + ОписаниеОшибки;
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ТекстЗаголовкаСообщения,
			ОписаниеОшибки, ТекстСообщения);
				
		Возврат Билет;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки("1C-EDO");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(Результат.КодОшибки) Тогда
		Если Результат.КодОшибки = "НеверныйЛогинИлиПароль" Тогда
			ИнтернетПоддержкаПользователейПодключена = Ложь;
		КонецЕсли;
		
		ТекстСообщения = "";
		Если ПоказыватьОшибки Тогда
			УстановитьПривилегированныйРежим(Истина);
			ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Не (Не ПоказыватьОшибкуАутентификацииПриОтсутствииДанных И Результат.КодОшибки = "НеверныйЛогинИлиПароль"
						И ДанныеАутентификации = Неопределено) Тогда
				ТекстСообщения = ТекстЗаголовкаСообщения + Символы.ПС + Результат.СообщениеОбОшибке;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекстСообщения) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ТекстЗаголовкаСообщения, Результат.СообщениеОбОшибке);
	Иначе
		Билет = Результат.Тикет;
	КонецЕсли;
	
	Возврат Билет;
	
КонецФункции

// Формирование архива регистрационного пакета для оператора ЭДО.
//
// Параметры:
//  РеквизитыПакета - Структура - параметры пакета.
//  ЗашифрованныеДанныеОператораЭДО - ДвоичныеДанные - данные для оператора ЭДО
//  								- Строка - адрес временного хранилища
//  ПодписанныеДвоичныеДанныеДляОператораЭДО - ДвоичныеДанные - подписанные данные для оператора.
//  ДвоичныеДанныеСоглашенияНаПодключениеЭДО - ДвоичныеДанные - данные соглашения.
//  ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО - ДвоичныеДанные - подписанные данные соглашения.
// 
// Возвращаемое значение:
//  Строка - имя файла пакета.
//
Функция РегистрационныйПакетДляОператораЭДО(РеквизитыПакета, ЗашифрованныеДанныеОператораЭДО, ПодписанныеДвоичныеДанныеДляОператораЭДО,
		ДвоичныеДанныеСоглашенияНаПодключениеЭДО, ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО) Экспорт
		
	// Сформируем пакет для 1СЭДО
	ИмяФайлаПакетаДля1СЭДО = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог() + "EDI_"
		+ РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО + ".zip";
	
	АдресКаталогаРегистрации = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(
		"reg", РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	ИмяВременногоФайлаПакетаДляОператораЭДО            = АдресКаталогаРегистрации + "packet.zip";
	ИмяВременногоФайлаАрхиваСоглашенияНаПодключениеЭДО = АдресКаталогаРегистрации + "LicenseCard.zip";
	ИмяВременногоФайлаЭДКарточки                       = АдресКаталогаРегистрации + "card.xml";
	ИмяВременногоФайлаЭДТранспортнойИнформации         = АдресКаталогаРегистрации + "meta.xml";
	
	// Готовим данные для ОператораЭДО
	Если ТипЗнч(ЗашифрованныеДанныеОператораЭДО) = Тип("ДвоичныеДанные") Тогда
		ЗашифрованныеДвоичныеДанныеОператораЭДО	= ЗашифрованныеДанныеОператораЭДО;
	Иначе
		ЗашифрованныеДвоичныеДанныеОператораЭДО = ПолучитьИзВременногоХранилища(ЗашифрованныеДанныеОператораЭДО);
	КонецЕсли;
	
	ИмяФайла = АдресКаталогаРегистрации + НовыйUUID() + ".bin";
	ЗашифрованныеДвоичныеДанныеОператораЭДО.Записать(ИмяФайла);
	
	ИмяФайлаПодписи = АдресКаталогаРегистрации + НовыйUUID() + ".bin";
	ПодписанныеДвоичныеДанныеДляОператораЭДО.Записать(ИмяФайлаПодписи);
	
	ИмяФайлаОписанияПакетаДляОператораЭДО = АдресКаталогаРегистрации + "packageDescription.xml";
	ДвоичныеДанныеОписанияПакетаДляОператораЭДО = ОписаниеПакетаДляОператораЭДО(РеквизитыПакета, ИмяФайла, ИмяФайлаПодписи);
	ДвоичныеДанныеОписанияПакетаДляОператораЭДО.Записать(ИмяФайлаОписанияПакетаДляОператораЭДО);
	
	МассивФайловПакетаНаПодключениеЭДО = Новый Массив;
	МассивФайловПакетаНаПодключениеЭДО.Добавить(ИмяФайлаОписанияПакетаДляОператораЭДО);
	МассивФайловПакетаНаПодключениеЭДО.Добавить(ИмяФайла);
	МассивФайловПакетаНаПодключениеЭДО.Добавить(ИмяФайлаПодписи);
	СформироватьАрхивФайлов(ИмяВременногоФайлаПакетаДляОператораЭДО, МассивФайловПакетаНаПодключениеЭДО);
	
	// Готовим соглашение для 1СЭДО
	ИмяФайлаСоглашенияНаПодключениеЭДО       = АдресКаталогаРегистрации + "LicenseCard.xml";
	ДвоичныеДанныеСоглашенияНаПодключениеЭДО.Записать(ИмяФайлаСоглашенияНаПодключениеЭДО);
	
	ИмяФайлПодписиСоглашенияНаПодключениеЭДО = АдресКаталогаРегистрации + "LicenseCard.p7s";
	ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО.Записать(ИмяФайлПодписиСоглашенияНаПодключениеЭДО);
	
	МассивФайловАрхиваСоглашенияНаПодключениеЭДО = Новый Массив;
	МассивФайловАрхиваСоглашенияНаПодключениеЭДО.Добавить(ИмяФайлаСоглашенияНаПодключениеЭДО);
	МассивФайловАрхиваСоглашенияНаПодключениеЭДО.Добавить(ИмяФайлПодписиСоглашенияНаПодключениеЭДО);
	СформироватьАрхивФайлов(ИмяВременногоФайлаАрхиваСоглашенияНаПодключениеЭДО, МассивФайловАрхиваСоглашенияНаПодключениеЭДО);
	
	// Готовим описание пакета для 1СЭДО
	РеквизитыПакета.Вставить("ИмяВременногоФайлаЭДКарточки", ИмяВременногоФайлаЭДКарточки);
	РеквизитыПакета.Вставить("ИмяВременногоФайлаЭДТранспортнойИнформации", ИмяВременногоФайлаЭДТранспортнойИнформации);
	СоздатьФайлыОписанияПакета(РеквизитыПакета);
	
	МассивФайловРегистрационногоПакета = Новый Массив;
	МассивФайловРегистрационногоПакета.Добавить(ИмяВременногоФайлаПакетаДляОператораЭДО);
	МассивФайловРегистрационногоПакета.Добавить(ИмяВременногоФайлаАрхиваСоглашенияНаПодключениеЭДО);
	МассивФайловРегистрационногоПакета.Добавить(ИмяВременногоФайлаЭДКарточки);
	МассивФайловРегистрационногоПакета.Добавить(ИмяВременногоФайлаЭДТранспортнойИнформации);
	СформироватьАрхивФайлов(ИмяФайлаПакетаДля1СЭДО, МассивФайловРегистрационногоПакета);
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталогаРегистрации);
	
	Возврат ИмяФайлаПакетаДля1СЭДО;

КонецФункции

// Отправка регистрационного пакета 1С-ЭДО.
//
// Параметры:
//  Файл - Файл - файл пакета.
//  ИнтернетПоддержкаПользователейПодключена - Булево - в данную переменную возвращается Истина, если 
//	                                                    интернет-поддержку удалось подключить
//  ЕстьОшибки - Булево - возвращает результат отправки.
//
Процедура ОтправитьРегистрационныйПакет1СЭДО(Знач Файл, ИнтернетПоддержкаПользователейПодключена, ЕстьОшибки) Экспорт
	
	Билет = БилетНаСайтПоддержки(ИнтернетПоддержкаПользователейПодключена);
	Если Не ЗначениеЗаполнено(Билет) Тогда
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;
	
	// Если доступа к ВебСервису нет, то работу с ним прекращаем.
	Если Не ЕстьДоступКВебСервису1CЭДО(Истина) Тогда
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;
	
	Соединение = ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
	АдресРесурса = "SendRequest?ticket=" + Билет;
	
	// возможно будет ответ от сервера
	ИмяФайлаРезультата = ТекущееИмяВременногоФайла("txt");
	Попытка
		Соединение.ОтправитьДляОбработки(Файл, АдресРесурса, ИмяФайлаРезультата);
	Исключение
		ЕстьОшибки = Истина;
		
		ФайлРезультата = Новый ТекстовыйДокумент;
		ФайлРезультата.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
		Результат = ФайлРезультата.ПолучитьТекст();
		
		ШаблонЗаголовкаСообщения = НСтр("ru = 'При отправке заявления о регистрации: %1 (тикет %2) на сервисе 1С-ЭДО возникла ошибка:'");
		
		Файл = Новый Файл(Файл);
		ТекстЗаголовкаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонЗаголовкаСообщения, Файл.Имя, Билет);
			
		ТекстСообщения = "";
		Если ЗначениеЗаполнено(Результат) Тогда
			Результат = СтрЗаменить(Результат, """", "");
			Результат = СтрЗаменить(Результат, ":", ",");
			МассивПараметровОшибки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Результат, ",");
			Если МассивПараметровОшибки.Количество() >= 7 Тогда
				
				КодОшибки = МассивПараметровОшибки[5];
				
				ШаблонОшибки = НСтр("ru = '%1: %2.'");
				ТекстОшибкиЭДО = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
					МассивПараметровОшибки[7], МассивПараметровОшибки[1]);
				
				ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке(
					КодОшибки, ТекстОшибкиЭДО);
				
				ТекстСообщения = ТекстЗаголовкаСообщения + Символы.ПС + ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекстСообщения) Тогда
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Результат = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
		
		ТекстСообщения = ТекстОшибкиОбращенияКСервису(ТекстСообщения);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ТекстЗаголовкаСообщения,
			Результат, ТекстСообщения);
		
	КонецПопытки;
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаРезультата);
	
КонецПроцедуры

// Получение файла ответа от сервера ЭДО.
//
// Параметры:
//  АдресРесурса - Строка - адрес ресурса.
//  ПараметрЗапросаОтветаОтСервера - Строка - суффикс адреса ресурса.
//  ОписаниеОшибки - Строка - текст ошибки.
// 
// Возвращаемое значение:
//  Строка - имя временного файла.
//
Функция ПолучитьФайлОтветаОтСервераЭДО(АдресРесурса, ПараметрЗапросаОтветаОтСервера = Неопределено, ОписаниеОшибки = "") Экспорт
	
	ВидОперации = НСтр("ru = 'Получение данных от сервиса 1С-ЭДО.'");
	
	// Если доступа к ВебСервису нет, то работу с ним прекращаем.
	Если Не ЕстьДоступКВебСервису1CЭДО(Истина) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Соединение = ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
	
	Если ПараметрЗапросаОтветаОтСервера <> Неопределено Тогда
		АдресРесурса = АдресРесурса + "/" + ПараметрЗапросаОтветаОтСервера;
	КонецЕсли;
	
	Попытка
		HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки);
		
		ОписаниеОшибки = НСтр("ru = 'Ошибка выполнения запроса к сервису 1С-ЭДО.'")
			+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке)
			+ Символы.ПС + НСтр("ru ='Подробности см. в журнале регистрации.'");
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		
		ДанныеОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		ТипДанныхОтвета = HTTPОтвет.Заголовки.Получить("Content-Type");
		Если ТипДанныхОтвета <> Неопределено И СтрНайти(ТипДанныхОтвета, "json") Тогда
			СтрокаJSON = HTTPОтвет.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
			СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
			СтруктураОтвета.Свойство("Details", ОписаниеОшибки);
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru = 'При работе с сервисом 1С-ЭДО возникла ошибка.'")
			+ ?(ПустаяСтрока(ОписаниеОшибки),"",Символы.ПС + ОписаниеОшибки)
			+ Символы.ПС + НСтр("ru ='Подробности см. в журнале регистрации.'");
		
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ДанныеОтвета);
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ИмяФайлаРезультата = Неопределено;
	
	ДвоичныеДанные = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
	Если ДвоичныеДанные <> Неопределено Тогда
		ИмяФайлаРезультата = ТекущееИмяВременногоФайла("xml");
		ДвоичныеДанные.Записать(ИмяФайлаРезультата);
	КонецЕсли;
	
	Возврат ИмяФайлаРезультата;
	
КонецФункции

#Область Сервис1CЭДО

// Проверяет наличие доступа к веб-сервису 1С-ЭДО.
//
// Параметры:
//  ВыводитьСообщения - Булево, требуется ли выводить сообщения.
//
// Возвращаемое значение:
//  Булево - наличие доступа к веб-сервису ФНС.
//
Функция ЕстьДоступКВебСервису1CЭДО(ВыводитьСообщения = Ложь) Экспорт
	
	Результат = Истина;
	
	ИмяФайлаРезультата = ТекущееИмяВременногоФайла("xml");
	Соединение = ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
	Попытка
		Соединение.Получить("GetInfo/1", ИмяФайлаРезультата);
	Исключение
		
		ТекстЗаголовкаСообщения = НСтр("ru = 'При работе с сервисом 1С-ЭДО возникла ошибка:'");
		
		ШаблонСообщения = НСтр("ru = '%1
		|Сервис 1С-ЭДО не доступен. Попробуйте чуть позже.'");
		
		ТекстСообщения = "";
		Если ВыводитьСообщения Тогда
			ТекстСообщения = ТекстЗаголовкаСообщения
				+ Символы.ПС + СтрШаблон(ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
		ПодробныйТекстОшибки = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ТекстЗаголовкаСообщения,
			ПодробныйТекстОшибки, ТекстСообщения);
		
		Результат = Ложь;
		
	КонецПопытки;
	
	УдалитьФайлы(ИмяФайлаРезультата);
	
	Возврат Результат;
	
КонецФункции

// Формирует текст ошибки обращения к сервису 1С-ЭДО с рекомендациями для исправления.
//
// Параметры:
//  ТекстСообщения	 - Строка - краткая информация по ошибке. Подставляется в начало сообщения.
// 
// Возвращаемое значение:
//  Строка - полный текст с рекомендациями.
//
Функция ТекстОшибкиОбращенияКСервису(Знач ТекстСообщения) Экспорт

	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ШаблонСообщения = НСтр("ru = '%1
		|Необходимо:
		|Проверить наличие ИТС по рег. номеру;
		|Проверить окончание срока действия договора ИТС на сайте.'");
	Иначе
		ШаблонСообщения = НСтр("ru = '%1
		|Необходимо:
		|Проверить верность введения логина\пароля;
		|Проверить наличие ИТС по рег. номеру;
		|Проверить окончание срока действия договора ИТС на сайте;
		|Проверить актуальность платформы (доступ 80 и 443 порта);
		|Проверить авторизацию на сайте интернет-поддержки;
		|Добавить в исключения антивируса\брандмауэра платформы 1С.'");
	КонецЕсли;

	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекстСообщения);
		
	Возврат ТекстСообщения;

КонецФункции

#КонецОбласти

#Область Прочее

Процедура СформироватьДокумент(ДеревоРазбора, СтрокаОбъекта, ДокументСсылка, Контрагент, Записывать, ТекстСообщения, Отказ) Экспорт
	
	ЭтоПередачаРабот                = Ложь;
	ЭтоПередачаТоваров              = Ложь;
	УПДДокументОПередаче            = Ложь;
	УКДДокументОбИзмененииСтоимости = Ложь;
	ЭтоФизЛицо                      = Ложь;
	
	ДанныеВыбранногоКонтрагента = Неопределено;
	
	ИмяРеквизитаКонтрагент = "Контрагент";
	Если СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		И ВРег(СтрокаОбъекта.ОписаниеОбъекта) = ВРег("ПередачаРезультатовРабот") Тогда
		
		ЭтоПередачаРабот = Истина;
		ИмяРеквизитаКонтрагент = "Заказчик";
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Контрагент, ДанныеВыбранногоКонтрагента);
		Если ТипЗнч(ДанныеВыбранногоКонтрагента) = Тип("Структура") Тогда
			
			ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо(Контрагент, ЭтоФизЛицо);
			ДанныеВыбранногоКонтрагента.Вставить("ЭтоФизЛицо", ЭтоФизЛицо);

			ЗаполнитьДанныеУчастникаСделки(ДанныеВыбранногоКонтрагента, СтрокаОбъекта.ЗначениеРеквизита, ИмяРеквизитаКонтрагент); 
			
		КонецЕсли;
		
	ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		И ВРег(СтрокаОбъекта.ОписаниеОбъекта) = ВРег("ПередачаТоваров") Тогда
		
		ЭтоПередачаТоваров = Истина;
		ИмяРеквизитаКонтрагент = "Поставщик"; 
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Контрагент, ДанныеВыбранногоКонтрагента);
		Если ТипЗнч(ДанныеВыбранногоКонтрагента) = Тип("Структура") Тогда
			
			ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо(Контрагент, ЭтоФизЛицо);
			ДанныеВыбранногоКонтрагента.Вставить("ЭтоФизЛицо", ЭтоФизЛицо);
				
			ЗаполнитьДанныеУчастникаСделки(ДанныеВыбранногоКонтрагента, СтрокаОбъекта.ЗначениеРеквизита, ИмяРеквизитаКонтрагент);
			
		КонецЕсли;
	ИначеЕсли СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
		
		УКДДокументОбИзмененииСтоимости = Истина;
		
		ИмяРеквизитаКонтрагент = "СведенияОПродавце";
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Контрагент, ДанныеВыбранногоКонтрагента);
		Если ТипЗнч(ДанныеВыбранногоКонтрагента) = Тип("Структура") Тогда
			
			ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо(Контрагент, ЭтоФизЛицо);
			ДанныеВыбранногоКонтрагента.Вставить("ЭтоФизЛицо", ЭтоФизЛицо);	
			ЗаполнитьДанныеУчастникаСделкиУПДУКД(ДанныеВыбранногоКонтрагента, СтрокаОбъекта.ЗначениеРеквизита, ИмяРеквизитаКонтрагент);
			
		КонецЕсли;
	ИначеЕсли СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
		
		УПДДокументОПередаче = Истина;
		
		ИмяРеквизитаКонтрагент = "СведенияОПродавце";
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Контрагент, ДанныеВыбранногоКонтрагента);
		Если ТипЗнч(ДанныеВыбранногоКонтрагента) = Тип("Структура") Тогда
			
			ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо(Контрагент, ЭтоФизЛицо);
			ДанныеВыбранногоКонтрагента.Вставить("ЭтоФизЛицо", ЭтоФизЛицо);
			ЗаполнитьДанныеУчастникаСделкиУПДУКД(ДанныеВыбранногоКонтрагента, СтрокаОбъекта.ЗначениеРеквизита, ИмяРеквизитаКонтрагент);
			
		КонецЕсли;

	ИначеЕсли СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
		Или СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
		ИЛИ СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
		ИЛИ СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД Тогда
		
		ШаблонСообщения = НСтр("ru = 'Загрузка документов вида ""%1"" возможна только через оператора ЭДО.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаОбъекта.ВидЭД);
			
		Отказ = Истина;
		
	Иначе
		
		СтрокаДерева = НайтиСтрокуВДереве(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаКонтрагент);
		Если СтрокаДерева.СсылкаНаОбъект <> Контрагент Тогда
			СтрокаДерева.СсылкаНаОбъект = Контрагент;
			// Замена партнера.
			Если ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
				СтрокаДереваПартнер = НайтиСтрокуВДереве(ДеревоРазбора, СтрокаОбъекта, "Партнер");
				Если СтрокаДереваПартнер <> Неопределено Тогда
					РеквизитыПартнера = Новый Структура();
					РеквизитыПартнера.Вставить("Контрагент", Контрагент);
					ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ИмяПрикладногоСправочника("Партнеры");
					СтрокаДереваПартнер.СсылкаНаОбъект = ЭлектронноеВзаимодействие.НайтиСсылку(ИмяПрикладногоСправочника, , РеквизитыПартнера);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		Попытка
			Если ЭтоПередачаРабот Тогда
				ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьДокументПередачаРезультатовРабот(СтрокаОбъекта.ЗначениеРеквизита, 
					ДокументСсылка);
			ИначеЕсли ЭтоПередачаТоваров Тогда
				ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьДокументПередачаТоваров(СтрокаОбъекта.ЗначениеРеквизита, 
					ДокументСсылка);
			ИначеЕсли УПДДокументОПередаче Тогда
				ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУПДДокументОПередаче(СтрокаОбъекта.ЗначениеРеквизита, 
					ДокументСсылка, Записывать);
			ИначеЕсли УКДДокументОбИзмененииСтоимости Тогда
				ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУКДДокументОбИзмененииСтоимости(СтрокаОбъекта.ЗначениеРеквизита, 
					ДокументСсылка, Записывать);
			Иначе
				ОбменСКонтрагентамиПереопределяемый.СохранитьДанныеОбъектаВБД(СтрокаОбъекта, ДеревоРазбора, 
					ДокументСсылка, Записывать,, ДокументСсылка);
			КонецЕсли;
			
		Исключение
			ШаблонСообщения = НСтр("ru = '%1.
									|%2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				ИнформацияОбОшибке().Описание,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;
		
КонецПроцедуры

Функция НайтиСтрокуВДереве(ДеревоРазбора, СтрокаОбъекта, ИмяОбъектаПоиска) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураПоиска = Новый Структура("Реквизит", ИмяОбъектаПоиска);
	МассивСтрок = СтрокаОбъекта.Строки.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		ИндексСтрокиКонтрагента = МассивСтрок[0].ЗначениеРеквизита;
		СтруктураПоиска = Новый Структура("ИндексСтроки", ИндексСтрокиКонтрагента);
		МассивСтрок = ДеревоРазбора.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаДерева = МассивСтрок[0];
			ВозвращаемоеЗначение = СтрокаДерева;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Преобразует ссылочное значение ставки НДС в числовое.
//
// Параметры:
//  СтавкаНДС	 - ЛюбаяСсылка - ссылка на значение ставки НДС.
// 
// Возвращаемое значение:
//  Число - числовое значение ставки НДС.
//
Функция ЗначениеСтавкиНДСИзПеречисления(СтавкаНДС) Экспорт

	ПредставлениеСтавки = ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзСоответствия(, СтавкаНДС);
	
	Если ПредставлениеСтавки = "18" ИЛИ ПредставлениеСтавки = "18/118" Тогда
		Значение = 0.18;
	ИначеЕсли ПредставлениеСтавки = "10" ИЛИ ПредставлениеСтавки = "10/110" Тогда
		Значение = 0.10;
	ИначеЕсли ПредставлениеСтавки = "20" ИЛИ ПредставлениеСтавки = "20/120" Тогда
		Значение = 0.20;
	Иначе
		Значение = 0;
	КонецЕсли;
	
	Возврат Значение;

КонецФункции

// Для полей форм, в которые выбирается договор контрагента, необходимо установить связи параметров выбора.
//
// Параметры:
//  ЭлементФормы           - ПолеФормы - Поле, в которое указывается договор контрагента.
//  ПутьКДаннымОрганизация - Строка    - Путь к реквизиту "Организация" объекта формы.
//  ПутьКДаннымКонтрагент  - Строка    - Путь к реквизиту "Контрагент"  объекта формы.
//
Процедура УстановитьСвязиПараметровВыбораДоговорКонтрагента(ЭлементФормы, ПутьКДаннымОрганизация, ПутьКДаннымКонтрагент) Экспорт

	ИмяСвязиПоОрганизации = "";
	ИмяСвязиПоКонтрагенту = "";
	
	ОбменСКонтрагентамиПереопределяемый.УстановитьИменаСвязейПараметровВыбораДоговорКонтрагента(
		ИмяСвязиПоОрганизации, ИмяСвязиПоКонтрагенту);
	
	НовыеСвязи = Новый Массив;
	
	Если ЗначениеЗаполнено(ИмяСвязиПоОрганизации) Тогда
		НовыеСвязи.Добавить(Новый СвязьПараметраВыбора(ИмяСвязиПоОрганизации, ПутьКДаннымОрганизация));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяСвязиПоКонтрагенту) Тогда
		НовыеСвязи.Добавить(Новый СвязьПараметраВыбора(ИмяСвязиПоКонтрагенту, ПутьКДаннымКонтрагент));
	КонецЕсли;
	
	ЭлементФормы.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыеСвязи);
	
КонецПроцедуры

#КонецОбласти

// Выполняет действия, необходимые для работы механизма подписания по маршруту.
//
// Параметры:
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ.
//
Процедура ВыполнитьДействияСМаршрутамиПриОтправкеНаПодпись(ЭД) Экспорт
	
	// Если документ отправили на подпись, значит нужно заполнить таблицу маршрута подписания.
	ПараметрыМаршрута = ПараметрыМаршрутаПодписанияДокумента(ЭД);
	
	// Это может быть новый объект - нужно корректно получить ссылку.
	СсылкаДокумента = ЭлектронноеВзаимодействиеСлужебный.ПолучитьСсылкуОбъектаБезопасно(ЭД);
	
	ВесМаршрута = 0;
	ЭлектронноеВзаимодействиеСлужебный.СформироватьМаршрутПодписанияЭД(СсылкаДокумента, 
		ПараметрыМаршрута.МаршрутПодписания, ПараметрыМаршрута.УсловиеПодписания, ПараметрыМаршрута.СписокПодписантов, 
		ВесМаршрута);
		
	// Сформируем и запишем представление прогресса подписания.
	ЭД.ПредставлениеПрогрессаПодписания = ПредставлениеПрогрессаПодписания(ЭД, ВесМаршрута);
	
КонецПроцедуры

// Возвращает имя поля формы настроек, на котором нужно спозиционироваться при возникновении ошибки проверки настроек.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.ПрофилиНастроекЭДО, СправочникСсылка.СоглашенияОбИспользованииЭД - ссылка на 
//      настройку обмена.
//  НомерСтроки		- Число - номер строки таблицы исходящих документов, на которой нужно спозиционироваться.
// 
// Возвращаемое значение:
//  Строка - имя поля для передачи в функцию ОбщегоНазначенияКлиентСервер.СообщитьПользователю.
//
Функция ИмяПоляДляОтображенияОшибкиПоМаршруту(НастройкаОбмена, НомерСтроки) Экспорт

	Если ТипЗнч(НастройкаОбмена) = Тип("СправочникСсылка.ПрофилиНастроекЭДО") Тогда
		ИмяПоляОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ИсходящиеДокументы[%1].ДокументУчета", НомерСтроки - 1);
	Иначе
		// Настройки ЭДО
		Если НастройкаОбмена.ЭтоИнтеркампани Тогда
			ИмяПоляОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ИсходящиеДокументы[%1].МаршрутПодписания", НомерСтроки - 1);
		Иначе
			ИмяПоляОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ИсходящиеДокументы[%1].ДополнительныеНастройки", НомерСтроки - 1);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяПоляОшибки;

КонецФункции

// Получает файла ответа и читает идентификаторы абонента в фоновом процессе.
//
// Параметры:
//  Параметры - Структура - параметры выполнения задания.
//     * ИдентификаторЗапросаНаРегистрацию - Строка - уникальный идентификатор заявки 1СЭДО.
//  АдресРезультата - Строка - адрес временного хранилища для помещения результата.
//
Процедура ОбменССерверомПолучитьОтветЭДО(Параметры, АдресРезультата) Экспорт
	
	Результат = Новый Соответствие;
	
	Для Каждого ИдентификаторЗаявки Из Параметры.ИдентификаторыЗаявок Цикл
		
		Значение = Ложь;
		ОписаниеОшибки = "";
		ИмяФайлаОтвета = ПолучитьФайлОтветаОтСервераЭДО("GetInfo", ИдентификаторЗаявки, ОписаниеОшибки);
		Если ИмяФайлаОтвета = Неопределено Тогда
			Значение = ОписаниеОшибки;
		Иначе
			ДанныеФайла = ПрочитатьТекстИзФайла(ИмяФайлаОтвета, , Истина);
			Если Не ПустаяСтрока(ДанныеФайла) Тогда
				ДеревоXML = ЗагрузитьСтрокуXMLВДеревоЗначений(ДанныеФайла);
				Если ДеревоXML <> Неопределено Тогда
					УзелАбоненты = ДеревоXML.Строки.Найти("Abonents", "Имя");
					Если УзелАбоненты <> Неопределено Тогда
						Значение = УзелАбоненты.Строки.Количество() > 0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Результат.Вставить(ИдентификаторЗаявки, Значение);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Формирование XML файлов документов.
//
// Параметры:
//  МассивОбъектовДляВыгрузки - Массив - объекты для формирования.
//  ПараметрыОбмена - Структура - параметры формирования.
//  ДопПараметры - Структура - дополнительные параметры.
// 
// Возвращаемое значение:
//  Массив - структуры возвратов.
//
Функция СформироватьXMLФайлыДокументов(МассивОбъектовДляВыгрузки, ПараметрыОбмена, ДопПараметры = "") Экспорт
	
	МассивСтруктурВозврата = Новый Массив;
	СтруктураВидовЭД = Новый Соответствие;
	
	Для Каждого ТекЭлемент Из МассивОбъектовДляВыгрузки Цикл
		ВидЭД = "";
		Если НЕ ЗначениеЗаполнено(ДопПараметры) ИЛИ НЕ ДопПараметры.Свойство("ВидЭД", ВидЭД) Тогда
			ПараметрыЭД = ПараметрыОбмена.Получить(ТекЭлемент.Ссылка);
			ПараметрыЭД.Свойство("ВидЭД", ВидЭД);
		КонецЕсли;
	
		МассивОбъектовПоВидуЭД = СтруктураВидовЭД.Получить(ВидЭД);
		Если МассивОбъектовПоВидуЭД = Неопределено Тогда
			МассивОбъектовПоВидуЭД = Новый Массив;
		КонецЕсли;
		МассивОбъектовПоВидуЭД.Добавить(ТекЭлемент);
		СтруктураВидовЭД.Вставить(ВидЭД, МассивОбъектовПоВидуЭД);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СтруктураВидовЭД Цикл
		СформироватьXMLФайл(ТекЭлемент, МассивСтруктурВозврата, ПараметрыОбмена, ДопПараметры);
	КонецЦикла;
	
	Возврат МассивСтруктурВозврата;
	
КонецФункции

// Возвращает данные классификатора валют.
// Подлежит замене после реализации в БСП интерфейсного метода.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - имеет колонки:
//    * КодВалютыЦифровой - цифровой код по классификатору.
//    * КодВалютыБуквенный - буквенный код по классификатору.
//    * Наименование - наименование по классификатору.
//
Функция ДанныеКлассификатораВалют() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеКлассификатора = Новый ТаблицаЗначений;
	ДанныеКлассификатора.Колонки.Добавить("КодВалютыЦифровой");
	ДанныеКлассификатора.Колонки.Добавить("КодВалютыБуквенный");
	ДанныеКлассификатора.Колонки.Добавить("Наименование");
	
	КлассификаторXML = Обработки.ЗагрузкаКурсовВалют.ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст(); 
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	Для Каждого ЗаписьОКВ Из КлассификаторТаблица Цикл
		НоваяСтрока = ДанныеКлассификатора.Добавить();
		НоваяСтрока.КодВалютыЦифровой         = ЗаписьОКВ.Code;
		НоваяСтрока.КодВалютыБуквенный        = ЗаписьОКВ.CodeSymbol;
		НоваяСтрока.Наименование              = ЗаписьОКВ.Name;
	КонецЦикла;
	
	Если Не ДанныеКлассификатора.Количество() Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось получить классификатор валют.'");
	КонецЕсли;
	
	Возврат ДанныеКлассификатора;

КонецФункции

#Область Ознакомление

// Возвращает признак использования механизма ознакомления с электронными документам.
//
// Возвращаемое значение:
//  Булево - признак использования механизма ознакомлений.
//
Функция ИспользоватьОзнакомлениеСЭД() Экспорт
	
	НастройкиОбмена = НастройкиОбменаСКонтрагентами();
	
	Возврат НастройкиОбмена.ИспользоватьОзнакомлениеСЭД;
	
КонецФункции

// Устанавливает признак необходимости ознакомиться с электронным документом.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящий
//                        ДокументСсылка.ЭлектронныйДокументИсходящий - электронный документ для изменения.
//  НаОзнакомление - Булево - новое состояние ознакомления с электронным документом.
//
Процедура УстановитьНеобходимостьОзнакомленияСЭД(Знач ЭлектронныйДокумент, Знач НаОзнакомление = Истина) Экспорт
	
	Если НаОзнакомление И Не ИспользоватьОзнакомлениеСЭД() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееСостояние = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "НаОзнакомлении");
	
	Если ТекущееСостояние = НаОзнакомление Тогда
		Возврат;
	КонецЕсли;
	
	Объект = ЭлектронныйДокумент.ПолучитьОбъект();
	Объект.НаОзнакомлении = НаОзнакомление;
	Объект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСОписаниемОснованияЭД

// Возвращает данные основания электронного документа, описывающие его в терминах подсистемы.
//
// Параметры:
//  ОснованиеЭД - ОпределяемыйТип.ОснованияЭлектронныхДокументов - объект или ссылка на основание электронного документа.
//
// Возвращаемое значение:
//  ФиксированнаяСтруктура - описание основания электронного документа:
//   * Вид - Строка - представление вида объекта.
//   * Организация - ОпределяемыйТип.Организация - организация основания.
//   * Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент основания.
//   * Дата - Дата - дата основания.
//   * Номер - Строка - номер основания.
//   * СуммаДокумента - Число - сумма основания.
//
Функция ОписаниеОснованияЭлектронногоДокумента(Знач ОснованиеЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОснованиеОбъект = Неопределено;
	ОснованиеСсылка = Неопределено;
	
	ТипОснования = ТипЗнч(ОснованиеЭД);
	Если ОбщегоНазначения.ЭтоСсылка(ТипОснования) Тогда
		ОснованиеОбъект = ОснованиеЭД.ПолучитьОбъект();
		ОснованиеСсылка = ОснованиеЭД;
	Иначе
		ОснованиеОбъект = ОснованиеЭД;
		ОснованиеСсылка = ОснованиеЭД.Ссылка;
	КонецЕсли;
	
	МетаданныеОснования = ОснованиеЭД.Метаданные();
	ИмяОснования = МетаданныеОснования.Имя;
	СинонимОснования = МетаданныеОснования.Синоним;
	
	ОписаниеОснованияЭД = Новый Структура;
	ОписаниеОснованияЭД.Вставить("Вид", СинонимОснования);
	ОписаниеОснованияЭД.Вставить("Организация", Неопределено);
	ОписаниеОснованияЭД.Вставить("Контрагент", Неопределено);
	ОписаниеОснованияЭД.Вставить("Дата", Дата(1, 1, 1));
	ОписаниеОснованияЭД.Вставить("Номер", "");
	ОписаниеОснованияЭД.Вставить("СуммаДокумента", 0);
	
	СтандартнаяОбработка = Истина;
	ОбменСКонтрагентамиПереопределяемый.ПриПолученииОписанияОснованияЭлектронногоДокумента(
		ОснованиеОбъект, ОписаниеОснованияЭД, СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат Новый ФиксированнаяСтруктура(ОписаниеОснованияЭД);
	КонецЕсли;
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	&Псевдоним.Организация КАК Организация,
	|	&Псевдоним.Контрагент КАК Контрагент,
	|	&Псевдоним.СуммаДокумента КАК СуммаДокумента,
	|	&Псевдоним.Дата КАК Дата,
	|	&Псевдоним.Номер КАК Номер
	|ИЗ
	|	&ОснованиеЭД КАК &Псевдоним
	|ГДЕ
	|	&Псевдоним.Ссылка = &Ссылка";
	
	РеквизитыОснования = Новый Массив;
	РеквизитыОснования.Добавить("Организация");
	РеквизитыОснования.Добавить("Контрагент");
	РеквизитыОснования.Добавить("СуммаДокумента");
	РеквизитыОснования.Добавить("Дата");
	РеквизитыОснования.Добавить("Номер");
	
	ПсевдонимТаблицы = "Документ";
	
	Для Каждого ИмяРеквизита Из РеквизитыОснования Цикл
			
		ЗаменяемыйШаблон = "&Псевдоним."+ ИмяРеквизита;
		
		ПрикладноеИмяРеквизита = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
			ИмяОснования + "." + ИмяРеквизита);
		
		Если ЗначениеЗаполнено(ПрикладноеИмяРеквизита) Тогда
			ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, ЗаменяемыйШаблон, ПрикладноеИмяРеквизита);
			Если ПсевдонимТаблицы = "Документ" Тогда
				СтрокиВМассиве = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрикладноеИмяРеквизита, ".");
				ПсевдонимТаблицы = СтрокиВМассиве[0];
			КонецЕсли;
		ИначеЕсли Не ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеОснования)
			И Не ОбщегоНазначения.ЭтоСтандартныйРеквизит(МетаданныеОснования.СтандартныеРеквизиты, ИмяРеквизита) Тогда 
			
			ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, ЗаменяемыйШаблон, "NULL");
		КонецЕсли;
		
	КонецЦикла;
	
	ВидОснования = ОбщегоНазначения.ВидОбъектаПоСсылке(ОснованиеСсылка);
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "&ОснованиеЭД", ВидОснования + "." + ИмяОснования);
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "&Псевдоним", ПсевдонимТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ШаблонЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ОснованиеСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый ФиксированнаяСтруктура(ОписаниеОснованияЭД);
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеОснованияЭД, Выборка);
	КонецЕсли;
	
	Возврат Новый ФиксированнаяСтруктура(ОписаниеОснованияЭД);
	
КонецФункции

#КонецОбласти

// Проверяет, является ли переданный в параметре ЭД служебным или нет.
//
// Параметры:
//  ФайлЭД - Ссылка, ПеречислениеСсылка.ТипыЭлементовВерсииЭД - электронный документ или перечисление.
// 
// Возвращаемое значение:
//  Булево - Истина, если это служебный документ.
//
Функция ЭтоСлужебныйДокумент(ФайлЭД) Экспорт 
	
	Если ТипЗнч(ФайлЭД) = Тип("ПеречислениеСсылка.ТипыЭлементовВерсииЭД") Тогда
		ТипЭлементаВерсииЭД = ФайлЭД;
	Иначе
		ТипЭлементаВерсииЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлЭД, "ТипЭлементаВерсииЭД"); 	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипЭлементаВерсииЭД) Тогда
		
		ОсновныеТипыЭД = ОсновныеТипыЭД();
		ВозвращаемоеЗначение = ОсновныеТипыЭД.Найти(ТипЭлементаВерсииЭД) = Неопределено;
	Иначе
		ВозвращаемоеЗначение = Ложь;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ОбновитьВерсиюЭДВРегистре(СообщениеОбмена, СостояниеВерсииЭД, СводнаяИнформацияПоСтатусу) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);

	ДействияСНашейСтороны = "";
	СводнаяИнформацияПоСтатусу.Свойство("СНашейСтороны",ДействияСНашейСтороны);
	
	ДействияСоСтороныДругогоУчастника = "";
	СводнаяИнформацияПоСтатусу.Свойство("СоСтороныДругогоУчастника",ДействияСоСтороныДругогоУчастника);
	
	ПредставлениеСостояния = "";
	СводнаяИнформацияПоСтатусу.Свойство("ПредставлениеСостояния",ПредставлениеСостояния);
	Если Не ЗначениеЗаполнено(ПредставлениеСостояния) Тогда
		ПредставлениеСостояния = Строка(СостояниеВерсииЭД);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование КАК СсылкаНаОбъект,
	|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка КАК СообщениеОбмена
	|ПОМЕСТИТЬ втДокументыУчета
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
	|ГДЕ
	|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка = &СообщениеОбмена
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование,
	|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
	|ГДЕ
	|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка = &СообщениеОбмена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СсылкаНаОбъект,
	|	СообщениеОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДокументыУчета КАК втДокументыУчета
	|		ПО СостоянияЭД.СсылкаНаОбъект = втДокументыУчета.СсылкаНаОбъект
	|			И СостоянияЭД.ЭлектронныйДокумент = втДокументыУчета.СообщениеОбмена
	|ГДЕ
	|	СостоянияЭД.СостояниеВерсииЭД <> &СостояниеВерсииЭД
	|	ИЛИ СостоянияЭД.ПредставлениеСостояния <> &ПредставлениеСостояния";
	
	Запрос.УстановитьПараметр("СообщениеОбмена",СообщениеОбмена);
	Запрос.УстановитьПараметр("СостояниеВерсииЭД",СостояниеВерсииЭД);
	Запрос.УстановитьПараметр("ПредставлениеСостояния",ПредставлениеСостояния);
	
	Если ЗначениеЗаполнено(ДействияСНашейСтороны) Тогда
		ТекстЗапроса = ТекстЗапроса + "	ИЛИ СостоянияЭД.ДействияСНашейСтороны <> &ДействияСНашейСтороны ";
		Запрос.УстановитьПараметр("ДействияСНашейСтороны",ДействияСНашейСтороны);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДействияСоСтороныДругогоУчастника) Тогда
		ТекстЗапроса = ТекстЗапроса + "ИЛИ СостоянияЭД.ДействияСоСтороныДругогоУчастника <> &ДействияСоСтороныДругогоУчастника";
		Запрос.УстановитьПараметр("ДействияСоСтороныДругогоУчастника",ДействияСоСтороныДругогоУчастника);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
				
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(Выборка.СсылкаНаОбъект,Истина);
		НаборЗаписей.Прочитать();
		
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			
			ЗаписьНабора.СостояниеВерсииЭД = СостояниеВерсииЭД;
			ЗаписьНабора.ПредставлениеСостояния = ПредставлениеСостояния;
			
			Если ЗначениеЗаполнено(ДействияСНашейСтороны) Тогда
				ЗаписьНабора.ДействияСНашейСтороны = ДействияСНашейСтороны;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДействияСоСтороныДругогоУчастника) Тогда
				ЗаписьНабора.ДействияСоСтороныДругогоУчастника = ДействияСоСтороныДругогоУчастника;
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает статус электронного документа.
//
// Параметры:
//  ЭД - СправочникСсылка.ЭдПрисоединенныеФайлы - ссылка на электронный документ.
//  СтатусЭД - ПеречислениеСсылка.СтатусыЭД - новый статус электронного документа.
//
Процедура УстановитьСтатусЭД(ЭД, СтатусЭД) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтатусЭД", СтатусЭД);
	ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
	
КонецПроцедуры

// Получение данных пакетов ЭД.
//
// Параметры:
//  МассивПакетовЭД	 - Массив - список Пакетов ЭД.
// 
// Возвращаемое значение:
//  Структура - данные пакетов ЭД.
//
Функция ДанныеПакетовЭД(МассивПакетовЭД) Экспорт
	
	ДанныеПакетовЭД = Новый Массив;
	// Делаем перебор пакетов и распаковку их содержимого в папку
	Для каждого ПакетЭД Из МассивПакетовЭД Цикл
		СтруктураПакетаЭД = Новый Структура("ПакетЭДСсылка, МассивЭД, МассивЭП");
		
		// УстановитьПривилегированныйРежим(Истина);
		НастройкаЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПакетЭД, "НастройкаЭДО");
		
		Если Не ЗначениеЗаполнено(НастройкаЭДО) Тогда
			
			ПрофильНастроекЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПакетЭД, "ПрофильНастроекЭДО");
			
			Текст = НСтр("ru = 'Обмен по профилю настроек ЭДО: %1.
				|Не удалось распаковать пакет: %2
				|По причине: Не определена настройка ЭДО.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ПрофильНастроекЭДО, ПакетЭД);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
			
		КонецЕсли;
		
		МассивЭД = Новый Массив;
		МассивЭП = Новый Массив;
		УникальныйИдентификатор = ПакетЭД.УникальныйИдентификатор();
		
		Попытка
			
			// Необходимо получить архив пакета из присоединенных файлов к документу.
			ВыборкаПрисоединенныхФайлов = ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", ПакетЭД));
			Если НЕ ЗначениеЗаполнено(ВыборкаПрисоединенныхФайлов) 
				Или НЕ ВыборкаПрисоединенныхФайлов.Следующий() Тогда
				Продолжить;
			КонецЕсли;
			
			// Для каждого из пакетов необходимо определить файл с данными.
			ПараметрыДанных = РаботаСФайлами.ДанныеФайла(ВыборкаПрисоединенныхФайлов.Ссылка);
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПараметрыДанных.СсылкаНаДвоичныеДанныеФайла);
			
			ФайлАрхива = ТекущееИмяВременногоФайла("zip");
			ДвоичныеДанныеФайла.Записать(ФайлАрхива);
			
			АрхивЧтение = Новый ЧтениеZipФайла(ФайлАрхива);
			ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("ext", УникальныйИдентификатор);
			
			Если ЕстьОдинаковыеИменаФайловСНедопустимымиСимволамиВАрхиве(АрхивЧтение) Тогда
				ТекстОшибки = НСтр("ru = '""%1"" содержит в своем архиве файлы с недопустимыми символами. Распаковка не возможна.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка(ПакетЭД));
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			Попытка
				АрхивЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
			Исключение
				ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				Если НЕ ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(АрхивЧтение, ПапкаДляРаспаковки) Тогда
					ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
				КонецЕсли;
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Распаковка архива пакета ЭД'"), ТекстОшибки,
					ТекстСообщения);
					
				АрхивЧтение.Закрыть();
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлАрхива);
				Продолжить;
			КонецПопытки;
			
			АрхивЧтение.Закрыть();
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлАрхива);
			
			МассивФайловТранспортнойИнформации = НайтиФайлы(ПапкаДляРаспаковки, "meta*.xml", Истина);
			
			Если МассивФайловТранспортнойИнформации.Количество() > 0 Тогда
				ФайлТранспортнойИнформации = МассивФайловТранспортнойИнформации[0];
			Иначе
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
				Продолжить;
			КонецЕсли;
			
			ОбъектXML = Новый ЧтениеXML;
			ОбъектXML.ОткрытьФайл(ФайлТранспортнойИнформации.ПолноеИмя);
			ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML,
				ОбменСКонтрагентамиВнутренний.ПолучитьТипЗначенияCML("ContainerDescription", "http://api-invoice.taxcom.ru/meta"));
			ОбъектXML.Закрыть();
			
			Для Каждого ДокОборот Из ЭД.DocFlow Цикл
				
				НомерЭДО = ОбменСКонтрагентамиВнутренний.ЗначениеСвойстваXDTO(ДокОборот, "Id");
				
				Для Каждого Документ Из ДокОборот.Documents.Document Цикл
					
					СтруктураВложения = Новый Структура("ТипДанных, АдресЭД, АдресДополнительногоЭД,
					|УникальныйИД, НомерЭД, КодТранзакции, КодРегламента, ТипЭлементаВерсииЭД, МассивИдентификаторовДокументовОснований,
					|Зашифрован, СсылкаНаСертификатРасшифровки, ДополнительныеПараметры,
					|ПроизвольныйЭД, ТипДокумента, ТекстСопроводительнойЗаписки, ТребуетсяПодтверждение,
					|АдресЭП, АдресСертификата, Отпечаток, КомуВыданСертификат, ДатаПроверкиПодписи, ПодписьВерна");
					
					КодТранзакции = ОбменСКонтрагентамиВнутренний.ЗначениеСвойстваXDTO(Документ, "TransactionCode");
					КодРегламента = ОбменСКонтрагентамиВнутренний.ЗначениеСвойстваXDTO(Документ, "ReglamentCode");
					Зашифрован = Ложь;
					ТипКарточкиЭД = Перечисления.ТипыЭД.Прочее;
					ТипКарточкиЭДПолучен = Ложь;
					НомерЭДКарточки = "";
					ПроизвольныйЭД = Ложь;
					ТекстСопроводительнойЗаписки = "";
					МассивИдентификаторовДокументовОснований = Новый Массив;
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
					
					// Получим карточку электронного документа
					Если ОбменСКонтрагентамиВнутренний.ЕстьСвойствоXDTO(Документ, "Files") Тогда
						Если Документ.Files.ExternalCard <> Неопределено Тогда
							
							ПолноеИмяФайлаКарточки = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПапкаДляРаспаковки,
								Документ.Files.ExternalCard.Path);
							СтруктураФайлаКарточки = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайлаКарточки);
							
							Если Прав(ПапкаДляРаспаковки, 1) = "\" Тогда
								СтруктураФайлаКарточки.ПолноеИмя = СтрЗаменить(СтруктураФайлаКарточки.ПолноеИмя, "/", "\");
							КонецЕсли;
							
							ОбъектXMLКарточки = Новый ЧтениеXML;
							ОбъектXMLКарточки.ОткрытьФайл(СтруктураФайлаКарточки.ПолноеИмя);
							КарточкаЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXMLКарточки,
							ОбменСКонтрагентамиВнутренний.ПолучитьТипЗначенияCML("Card", "http://api-invoice.taxcom.ru/card"));
							ОбъектXMLКарточки.Закрыть();
							
							НомерЭДКарточки = ОбменСКонтрагентамиВнутренний.НомерЭДВКарточкеЭД(КарточкаЭД);
							
							Если КарточкаЭД.Description <> Неопределено Тогда
								Если КарточкаЭД.Description.AdditionalData <> Неопределено
									И КарточкаЭД.Description.AdditionalData.AdditionalParameter <> Неопределено Тогда
									
									ДополнительныеПараметры = Новый Структура;
									Если ТипЗнч(КарточкаЭД.Description.AdditionalData.AdditionalParameter) = Тип("СписокXDTO") Тогда
										Для Каждого Свойство Из КарточкаЭД.Description.AdditionalData.AdditionalParameter Цикл
											Если Свойство.Name = "Зашифрован" Тогда
												Зашифрован = Булево(Свойство.Value);
												СтруктураВложения.Вставить("СсылкаНаСертификатРасшифровки",
												ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаЭДО, "СертификатОрганизацииДляРасшифровки"));
											ИначеЕсли Свойство.Name = "DocumentType" Тогда
												// После расширения состава типов документов, типы передаются в доп.данных
												ТипКарточкиЭД = ОбменСКонтрагентамиВнутренний.ТипДокументаПоСтроке(Свойство.Value);
												ТипКарточкиЭДПолучен = Истина;
											ИначеЕсли Свойство.Name = "ParentDocument" Тогда
												МассивИдентификаторовДокументовОснований.Добавить(Свойство.Value);
											ИначеЕсли Свойство.Name = "Комментарий" Тогда
												ТекстСопроводительнойЗаписки = Свойство.Value;
											Иначе
												ДополнительныеПараметры.Вставить(Свойство.Name, Свойство.Value);
											КонецЕсли;
										КонецЦикла;
										
									ИначеЕсли ТипЗнч(КарточкаЭД.Description.AdditionalData.AdditionalParameter) = Тип("ОбъектXDTO") Тогда
										Если КарточкаЭД.Description.AdditionalData.AdditionalParameter.Name = "Зашифрован" Тогда
											Зашифрован = Булево(КарточкаЭД.Description.AdditionalData.AdditionalParameter.Value);
											СтруктураВложения.Вставить("СсылкаНаСертификатРасшифровки",
											ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаЭДО, "СертификатОрганизацииДляРасшифровки"));
										ИначеЕсли Свойство.Name = "ParentDocument" Тогда
											МассивИдентификаторовДокументовОснований.Добавить(КарточкаЭД.Description.AdditionalData.AdditionalParameter.Value);
										Иначе
											ДополнительныеПараметры.Вставить(
											КарточкаЭД.Description.AdditionalData.AdditionalParameter.Name,
											КарточкаЭД.Description.AdditionalData.AdditionalParameter.Value);
										КонецЕсли;
									КонецЕсли;
									СтруктураВложения.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
								КонецЕсли;
								
								// Определим заголовок произвольного ЭД.
								Если Не КарточкаЭД.Description = Неопределено Тогда
									Если КарточкаЭД.Description.Свойства().Получить("Title") <> Неопределено Тогда
										Если КарточкаЭД.Description.Title <> Неопределено Тогда
											ПроизвольныйЭД = (КарточкаЭД.Description.Title = Строка(Перечисления.ВидыЭД.ПроизвольныйЭД));
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
								Если Не ЗначениеЗаполнено(ТекстСопроводительнойЗаписки) Тогда
									ТекстСопроводительнойЗаписки = КарточкаЭД.Description.Comment;
								КонецЕсли;
								
							КонецЕсли;
							
							Если КарточкаЭД.Type <> Неопределено Тогда
								Если НЕ ТипКарточкиЭДПолучен Тогда
									ТипКарточкиЭД = ОбменСКонтрагентамиВнутренний.ТипДокументаПоСтроке(КарточкаЭД.Type.Name);
								КонецЕсли;
								ИмяТипаЭлектронногоДокумента = НРег(СокрЛП(КарточкаЭД.Type.Name));
								Если ИмяТипаЭлектронногоДокумента = "invoice"
									Или ИмяТипаЭлектронногоДокумента = "correctiveinvoice" Тогда
									
									ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
								ИначеЕсли ИмяТипаЭлектронногоДокумента = "formalizedworkresultvendor"
									Или ИмяТипаЭлектронногоДокумента = "formalizedtradingvendor" Тогда
									
									ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП;
								ИначеЕсли ИмяТипаЭлектронногоДокумента = "formalizedworkresultcustomer"
									Или ИмяТипаЭлектронногоДокумента = "formalizedstatementcustomer" Тогда
									
									ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик;
								ИначеЕсли ИмяТипаЭлектронногоДокумента = "formalizedtradingcustomer"
									Или ИмяТипаЭлектронногоДокумента = "formalizedconsignmentcustomer" Тогда
									
									ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель;
									Если ОбменСКонтрагентамиВнутренний.ЕстьСвойствоXDTO(КарточкаЭД, "Description") Тогда
										Если КарточкаЭД.Description.Свойства().Получить("Title") <> Неопределено Тогда
											Если КарточкаЭД.Description.Title <> Неопределено
												И ВРег(КарточкаЭД.Description.Title) = ВРег(Строка(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель)) Тогда
												ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;
								ИначеЕсли ИмяТипаЭлектронногоДокумента = "expinvoice" Тогда
									
									ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД;
								ИначеЕсли ИмяТипаЭлектронногоДокумента = "corexpinvoice" Тогда
									
									ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД;
								ИначеЕсли ИмяТипаЭлектронногоДокумента = "expinvoiceandprimaryaccountingdocumentvendor" Тогда
									
									ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД;
								ИначеЕсли ИмяТипаЭлектронногоДокумента = "expinvoiceandprimaryaccountingdocumentcustomer"
									Или ИмяТипаЭлектронногоДокумента = "primaryaccountingdocumentcustomer" Тогда
									
									ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД;
								ИначеЕсли ИмяТипаЭлектронногоДокумента = "corexpinvoiceandprimaryaccountingdocumentvendor" Тогда
									
									ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД;
								ИначеЕсли ИмяТипаЭлектронногоДокумента = "corexpinvoiceandprimaryaccountingdocumentcustomer"
									Или ИмяТипаЭлектронногоДокумента = "corprimaryaccountingdocumentcustomer" Тогда
									
									ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД;
								ИначеЕсли ИмяТипаЭлектронногоДокумента = "primaryaccountingdocumentvendor" Тогда
									
									ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД;
								ИначеЕсли ИмяТипаЭлектронногоДокумента = "corprimaryaccountingdocumentvendor" Тогда
									
									ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД;
								КонецЕсли;
								Если КарточкаЭД.Type.ResignRequired <> Неопределено Тогда
									ТребуетсяПодтверждение = Булево(КарточкаЭД.Type.ResignRequired);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					// Из ЭД
					СтруктураВложения.Вставить("УникальныйИД",                 НомерЭДО);
					СтруктураВложения.Вставить("НомерЭД",                      НомерЭДКарточки);
					СтруктураВложения.Вставить("КодТранзакции",                КодТранзакции);
					СтруктураВложения.Вставить("КодРегламента",                КодРегламента);
					СтруктураВложения.Вставить("ТипЭлементаВерсииЭД",          ТипЭлементаВерсииЭД);
					СтруктураВложения.Вставить("ПроизвольныйЭД",               ПроизвольныйЭД);
					СтруктураВложения.Вставить("ТипДокумента",                 ТипКарточкиЭД);
					СтруктураВложения.Вставить("ТекстСопроводительнойЗаписки", ТекстСопроводительнойЗаписки);
					СтруктураВложения.Вставить("ТребуетсяПодтверждение",       ТребуетсяПодтверждение);
					СтруктураВложения.Вставить("МассивИдентификаторовДокументовОснований", МассивИдентификаторовДокументовОснований);
					
					// Получим файл электронного документа
					СтруктураЭлектронногоДокумента = Новый Структура();
					Если Документ.Files.MainImage <> Неопределено Тогда
						ОтносительныйПутьКФайлу = ИсправитьРазделителиПутиКФайлу(Документ.Files.MainImage.Path);
						ПолноеИмяФайлаЭД = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПапкаДляРаспаковки, ОтносительныйПутьКФайлу);
						СтруктураФайлаЭД = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайлаЭД);
						
						Если Прав(ПапкаДляРаспаковки, 1) = "/" Тогда
							СтруктураФайлаЭД.ПолноеИмя = СтрЗаменить(СтруктураФайлаЭД.ПолноеИмя, "\", "/");
						КонецЕсли;
						
						Попытка
							ДвоичныеДанныеФайлаЭД = Новый ДвоичныеДанные(СтруктураФайлаЭД.ПолноеИмя);
						Исключение
							// Проблема распаковки файла. Ищем по расширению, исключая служебные файлы.
							ДвоичныеДанныеФайлаЭД = ДвоичныеДанныеФайлаЭДВПакете(ПапкаДляРаспаковки, Документ.Files, СтруктураФайлаЭД);
							Если ДвоичныеДанныеФайлаЭД = Неопределено Тогда
								ВызватьИсключение;
							КонецЕсли;
						КонецПопытки;
						СтруктураВложения.Вставить("АдресЭД", ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаЭД, УникальныйИдентификатор));
						СтруктураВложения.Вставить("СсылкаНаЭДПрисоединенныйФайл", Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
						
						// Когда приходят пакеты от оператора ЭДО без явного признака "НеФормализованный".
						Если ВРег(СтруктураФайлаЭД.Расширение) <> ".ZIP" И ВРег(СтруктураФайлаЭД.Расширение) <> ".XML" Тогда
							СтруктураВложения.Вставить("ПроизвольныйЭД", Истина);
						КонецЕсли;
						
						ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураЭлектронногоДокумента, СтруктураВложения);
						
						СтруктураЭлектронногоДокумента.Вставить("ТипДанных",        ОпределитьТипДанныхПоКодуТранзакции(КодТранзакции));
						СтруктураЭлектронногоДокумента.Вставить("ИмяБезРасширения", СтруктураФайлаЭД.ИмяБезРасширения);
						СтруктураЭлектронногоДокумента.Вставить("Расширение",       СтруктураФайлаЭД.Расширение);
						СтруктураЭлектронногоДокумента.Вставить("Зашифрован",       Зашифрован);
						
						МассивЭД.Добавить(СтруктураЭлектронногоДокумента);
					КонецЕсли;
					
					Если Документ.Files.MainImageSignature <> Неопределено Тогда
						
						// При распаковке архива возможны нарушения в именовании файлов.
						// Поэтому определяемы файлы подписи как по данным транспортной информации, так и по расширению в архиве.
						// При совпадении работаем с данными архива, иначе по транспортной информации.
						ФайлыВАрхиве = Новый Массив;
						ФайлыВТИ = Новый Массив;
						РасширенияФайлов = Новый Массив;
						Для Каждого Подпись Из Документ.Files.MainImageSignature Цикл
							
							ОтносительныйПутьКФайлу = ИсправитьРазделителиПутиКФайлу(Подпись.Path);
							ПолноеИмяФайлаЭП = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПапкаДляРаспаковки, ОтносительныйПутьКФайлу);
							СтруктураФайлаЭП = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайлаЭП);
							Если Прав(ПапкаДляРаспаковки, 1) = "/" Тогда
								СтруктураФайлаЭП.ПолноеИмя = СтрЗаменить(СтруктураФайлаЭП.ПолноеИмя, "\", "/");
							КонецЕсли;
							
							ТекФайл = Новый Файл(СтруктураФайлаЭП.ПолноеИмя);
							ФайлыВТИ.Добавить(ТекФайл);
							
							Если РасширенияФайлов.Найти(СтруктураФайлаЭП.Расширение) = Неопределено Тогда
								РасширенияФайлов.Добавить(СтруктураФайлаЭП.Расширение);
								ФайлыВАрхивеПоРасширению = НайтиФайлы(ПапкаДляРаспаковки, "*" + СтруктураФайлаЭП.Расширение);
								ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФайлыВАрхиве, ФайлыВАрхивеПоРасширению);
							КонецЕсли;
							
						КонецЦикла;
						
						ФайлыПодписи = ФайлыВТИ;
						Если ФайлыВАрхиве.Количество() = ФайлыВТИ.Количество() Тогда
							ФайлыПодписи = ФайлыВАрхиве;
						КонецЕсли;
						
						Для Каждого Подпись Из ФайлыПодписи Цикл
							
							СтруктураФайлаЭП = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(Подпись.ПолноеИмя);
						
							Если Прав(ПапкаДляРаспаковки, 1) = "/" Тогда
								СтруктураФайлаЭП.ПолноеИмя = СтрЗаменить(СтруктураФайлаЭП.ПолноеИмя, "\", "/");
							КонецЕсли;
							
							СтруктураЭлектроннойПодписи = Новый Структура();
							ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураЭлектроннойПодписи, СтруктураВложения);
							
							ДвоичныеДанныеФайлаЭП = Новый ДвоичныеДанные(СтруктураФайлаЭП.ПолноеИмя);
							СтруктураЭлектроннойПодписи.Вставить("АдресЭП",
								ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаЭП, УникальныйИдентификатор));
								
							СтруктураЭлектроннойПодписи.Вставить("ТипДанных",        "ЭП");
							СтруктураЭлектроннойПодписи.Вставить("ИмяБезРасширения", СтруктураФайлаЭП.ИмяБезРасширения);
							СтруктураЭлектроннойПодписи.Вставить("Расширение",       СтруктураФайлаЭП.Расширение);
							
							// В случае ответной подписи найдем исходный ЭД.
							Если НЕ ЗначениеЗаполнено(СтруктураЭлектроннойПодписи.АдресЭД) Тогда
								
								СтруктураПараметровПоиска = Новый Структура;
								СтруктураПараметровПоиска.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
								СтруктураПараметровПоиска.Вставить("УникальныйИД",  СтруктураЭлектроннойПодписи.УникальныйИД);
								Если КодТранзакции = "MainDocumentResign" Тогда
									ТипЭлементаВерсииЭД = Новый Массив;
									ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
									ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
									ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
									ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
									ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
									ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
									СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
								ИначеЕсли КодТранзакции = "CancellationOfferResign" Тогда
									СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПОА);
								КонецЕсли;
								
								ЭлектронныйДокумент = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
								Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
									
									ДопИнформацияПоЭД = ПолучитьДанныеФайла(ЭлектронныйДокумент, УникальныйИдентификатор);
									
									СтруктураЭлектроннойПодписи.Вставить("АдресЭД", ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
									СтруктураЭлектроннойПодписи.Вставить("СсылкаНаЭДПрисоединенныйФайл", ЭлектронныйДокумент);
								КонецЕсли;
							КонецЕсли;
							
							МассивЭП.Добавить(СтруктураЭлектроннойПодписи);
						КонецЦикла;
					КонецЕсли;
					
					Если Документ.Files.DataImage <> Неопределено Тогда
						ПолноеИмяФайлаДопДанныхЭД = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПапкаДляРаспаковки,
							Документ.Files.DataImage.Path);
						СтруктураФайлаДопДанныхЭД = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайлаДопДанныхЭД);
						
						Если Прав(ПапкаДляРаспаковки, 1) = "/" Тогда
							СтруктураФайлаДопДанныхЭД.ПолноеИмя = СтрЗаменить(СтруктураФайлаДопДанныхЭД.ПолноеИмя, "\", "/");
						КонецЕсли;
						
						ДвоичныеДанныеФайлаДопДанныхЭД = Новый ДвоичныеДанные(СтруктураФайлаДопДанныхЭД.ПолноеИмя);
						АдресДополнительногоЭД = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаДопДанныхЭД, УникальныйИдентификатор);
						СтруктураВложения.Вставить("АдресЭД", АдресДополнительногоЭД);
						СтруктураЭлектронногоДокумента.Вставить("АдресДополнительногоЭД", АдресДополнительногоЭД);
						
						СтруктураВложения.Вставить("СсылкаНаЭДПрисоединенныйФайл", Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
						
						СтруктураЭлектронногоДокумента = Новый Структура();
						ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураЭлектронногоДокумента, СтруктураВложения);
						
						СтруктураЭлектронногоДокумента.Вставить("ТипДанных",        "ДополнительныйЭД");
						СтруктураЭлектронногоДокумента.Вставить("ИмяБезРасширения", СтруктураФайлаДопДанныхЭД.ИмяБезРасширения);
						СтруктураЭлектронногоДокумента.Вставить("Расширение",       СтруктураФайлаДопДанныхЭД.Расширение);
						СтруктураЭлектронногоДокумента.Вставить("Зашифрован",       Ложь);
						
						МассивЭД.Добавить(СтруктураЭлектронногоДокумента);
					КонецЕсли;
					
					Если Документ.Files.DataImageSignature <> Неопределено Тогда
						
						Для Каждого Подпись Из Документ.Files.DataImageSignature Цикл
							ПолноеИмяФайлаДопДанныхЭП = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПапкаДляРаспаковки, Подпись.Path);
							СтруктураФайлаДопДанныхЭП = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайлаДопДанныхЭП);
						
							Если Прав(ПапкаДляРаспаковки, 1) = "/" Тогда
								СтруктураФайлаДопДанныхЭП.ПолноеИмя = СтрЗаменить(СтруктураФайлаДопДанныхЭП.ПолноеИмя, "\", "/");
							КонецЕсли;
							
							СтруктураЭлектроннойПодписи = Новый Структура();
							ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураЭлектроннойПодписи, СтруктураВложения);
							
							ДвоичныеДанныеФайлаДопДанныхЭП = Новый ДвоичныеДанные(СтруктураФайлаДопДанныхЭП.ПолноеИмя);
							СтруктураВложения.Вставить("АдресЭП", ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаДопДанныхЭП,
								УникальныйИдентификатор));
								
							СтруктураЭлектроннойПодписи.Вставить("ТипДанных",        "ПодписьДополнительногоЭД");
							СтруктураЭлектроннойПодписи.Вставить("ИмяБезРасширения", СтруктураФайлаДопДанныхЭП.ИмяБезРасширения);
							СтруктураЭлектроннойПодписи.Вставить("Расширение",       СтруктураФайлаДопДанныхЭП.Расширение);
							
							МассивЭП.Добавить(СтруктураЭлектроннойПодписи);
						КонецЦикла;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
			СтруктураПакетаЭД.Вставить("ПакетЭДСсылка", ПакетЭД);
			СтруктураПакетаЭД.Вставить("МассивЭД",      МассивЭД);
			СтруктураПакетаЭД.Вставить("МассивЭП",      МассивЭП);
			ДанныеПакетовЭД.Добавить(СтруктураПакетаЭД);
			
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
			
		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстОшибки,
				ТекстСообщения);
			
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
		КонецПопытки;
	КонецЦикла;
	
	Возврат ДанныеПакетовЭД;
	
КонецФункции

// Запись данных пакетов ЭД.
// Не рекомендуется вызывать в транзакции, так как при падении переопределяемой части, может
// возникнуть ошибка "В данной транзакции уже происходили ошибки".
//
// Параметры:
//  ДанныеПакетовЭД	          - Массив - список пакетов ЭД.
//  РаспакованныеДокументы    - Структура - служебные данные:
//    * МассивСлужебныхЭД         - Массив - служебные электронные документы.
//    * НовыеДокументы            - Массив - добавляемые электронные документы.
//  КоличествоРаспакованныхЭД - Число - количество распакованных пакетов.
//
Процедура ЗаписатьДанныеПакетовЭД(ДанныеПакетовЭД, РаспакованныеДокументы, КоличествоРаспакованныхЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСлужебныхЭД = РаспакованныеДокументы.МассивСлужебныхЭД;
	НовыеДокументы = РаспакованныеДокументы.НовыеДокументы;
	
	// Исходные данные для создания учетного документа собираем в отдельную таблицу, в транзакции распаковки пакета.
	// Используем эти данные в следующей транзакции, где создаем учетные документы.
	ПараметрыСозданияУчетныхДокументов = Новый ТаблицаЗначений;
	ПараметрыСозданияУчетныхДокументов.Колонки.Добавить("ВладелецЭД");
	ПараметрыСозданияУчетныхДокументов.Колонки.Добавить("ПараметрыПакетаЭД");
	ПараметрыСозданияУчетныхДокументов.Колонки.Добавить("СтруктураЭД");
	ПараметрыСозданияУчетныхДокументов.Колонки.Добавить("СтруктураПараметров");
	ПараметрыСозданияУчетныхДокументов.Колонки.Добавить("ПрисоединенныйФайл");
	ПараметрыСозданияУчетныхДокументов.Колонки.Добавить("НомерЭД");
	
	Для каждого СтруктураПакетаЭД Из ДанныеПакетовЭД Цикл
		
		ПараметрыПакетаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураПакетаЭД.ПакетЭДСсылка,
			"ПрофильНастроекЭДО, СпособОбменаЭД, НастройкаЭДО, Отправитель, Получатель, Организация, Контрагент, ВерсияФорматаПакета");
		
		НачатьТранзакцию();
		Попытка			
			МассивДобавленныхФайлов = Новый Массив;
			МассивДобавленныхФайловДляИзвещений = Новый Массив;
			
			// Записываем в базу ЭД
			Для каждого ЭлектронныйДокумент Из СтруктураПакетаЭД.МассивЭД Цикл
				
				АдресЭД = Неопределено;
				ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("dec", Новый УникальныйИдентификатор);
				
				ТребуетсяИзвещение = Истина;
				Если ЭлектронныйДокумент.Свойство("ДополнительныеПараметры")
					И ЗначениеЗаполнено(ЭлектронныйДокумент.ДополнительныеПараметры) Тогда
					
					Если ЭлектронныйДокумент.ДополнительныеПараметры.Свойство("НеТребуетсяИзвещение") Тогда
						ТребуетсяИзвещение = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				// Распакуем пакет если в качестве ЭД пришел архив
				Если ВРег(ЭлектронныйДокумент.Расширение) = ВРег(".xml") Или ЭлектронныйДокумент.ПроизвольныйЭД Тогда
					
					ДвоичныеДанныеФайлЭД = ПолучитьИзВременногоХранилища(ЭлектронныйДокумент.АдресЭД);
					ФайлЭД = ТекущееИмяВременногоФайла(ЭлектронныйДокумент.Расширение);
					ДвоичныеДанныеФайлЭД.Записать(ФайлЭД);
					
					ФайлДанныхЭД = Новый Файл(ФайлЭД);
					АдресЭД = ЭлектронныйДокумент.АдресЭД;
					
				ИначеЕсли ВРег(ЭлектронныйДокумент.Расширение) = ВРег(".zip") Тогда
					
					ДвоичныеДанныеАрхиваЭД = ПолучитьИзВременногоХранилища(ЭлектронныйДокумент.АдресЭД);
					ФайлЭД = ТекущееИмяВременногоФайла(ЭлектронныйДокумент.Расширение);
					ДвоичныеДанныеАрхиваЭД.Записать(ФайлЭД);
					ФайлДанныхАрхиваЭД = Новый Файл(ФайлЭД);
					
					ФлагОшибки = НЕ ОбменСКонтрагентамиВнутренний.РаспаковатьАрхив(
						ФайлДанныхАрхиваЭД.ПолноеИмя, ПапкаДляРаспаковки, НСтр("ru = 'Распаковка пакета ЭД'"));
					
					Если ФлагОшибки Тогда
						Прервать;
					КонецЕсли;
					
					ФайлыЭД = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
					Если ФайлыЭД.Количество() > 0 Тогда
						ФайлДанныхЭД = ФайлыЭД[0];
						
						ДвоичныеДанныеФайлЭД = Новый ДвоичныеДанные(ФайлДанныхЭД.ПолноеИмя);
						АдресЭД = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлЭД);
					Иначе // Будем считать, что пришел произвольный ЭД.
						ЭлектронныйДокумент.ПроизвольныйЭД = Истина;
						
						ДвоичныеДанныеФайлЭД = ПолучитьИзВременногоХранилища(ЭлектронныйДокумент.АдресЭД);
						ФайлЭД = ТекущееИмяВременногоФайла(ЭлектронныйДокумент.Расширение);
						ДвоичныеДанныеФайлЭД.Записать(ФайлЭД);
						
						ФайлДанныхЭД = Новый Файл(ФайлЭД);
						АдресЭД = ЭлектронныйДокумент.АдресЭД;
						
					КонецЕсли;
				КонецЕсли;
				
				Если ЭлектронныйДокумент.ТипДанных = "ЭД" Тогда
					
					ВладелецЭД = Неопределено;
					ДобавленныйФайл = Неопределено;
					
					Если ЭлектронныйДокумент.КодТранзакции = "CustomerTitle"
						Или ЭлектронныйДокумент.КодТранзакции = "CustomerInformation" Тогда
						ИмяДокумента = "ЭлектронныйДокументИсходящий";
					Иначе
						ИмяДокумента = "ЭлектронныйДокументВходящий"
					КонецЕсли;
					
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
					|	ЭлектронныйДокументИсходящий.Ссылка
					|ИЗ
					|	Документ." + ИмяДокумента + " КАК ЭлектронныйДокументИсходящий
					|ГДЕ
					|	ЭлектронныйДокументИсходящий.УникальныйИД = &УникальныйИД";
					
					Запрос.УстановитьПараметр("УникальныйИД",ЭлектронныйДокумент.УникальныйИД);
					
					Выборка = Запрос.Выполнить().Выбрать();
					
					Если Выборка.Следующий() Тогда
						
						ВладелецЭД = Выборка.Ссылка;
						
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("НомерЭД",       ЭлектронныйДокумент.НомерЭД);
						СтруктураПараметровПоиска.Вставить("УникальныйИД",  ЭлектронныйДокумент.УникальныйИД);
						СтруктураПараметровПоиска.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
						СтруктураПараметровПоиска.Вставить("ВладелецФайла", ВладелецЭД);
						Если ЭлектронныйДокумент.КодТранзакции = "CustomerTitle"
							Или ЭлектронныйДокумент.КодТранзакции = "CustomerInformation" Тогда
							МассивТипов = Новый Массив;
							МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
							МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
							МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
							МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
							МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
							СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", МассивТипов);
						Иначе
							МассивТипов = Новый Массив;
							МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
							МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
							Если ЭлектронныйДокумент.КодРегламента = "Invoice" Тогда
								МассивТипов = Новый Массив;
								МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
								МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
								МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
								МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
								МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
								МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
								МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
							КонецЕсли;
							СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", МассивТипов);
						КонецЕсли;
						
						ДобавленныйФайл = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
					КонецЕсли;
					
					Если ДобавленныйФайл = Неопределено Тогда
						
						СтруктураЭД = Новый Структура; 
						ЭлектронныйДокументВладелец = "";
						
						СтруктураФайлаЭД = Новый Структура;
						СтруктураФайлаЭД.Вставить("ТипЭлементаВерсииЭД", ЭлектронныйДокумент.ТипЭлементаВерсииЭД);
						
						Если НЕ ЭлектронныйДокумент.ПроизвольныйЭД Тогда
							
							ОписаниеОшибки = "";
							
							ДанныеФайлаЭД = ОбменСКонтрагентамиВнутренний.ДанныеФайлаЭД(ФайлДанныхЭД.ПолноеИмя, ОписаниеОшибки,,, Истина);
							Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
								Если ЭлектронныйДокумент.КодРегламента = "Nonformalized" Тогда // неизвестный XML не удалось прочитать
									ЭлектронныйДокумент.ПроизвольныйЭД = Истина;
								Иначе
									ВызватьИсключение ОписаниеОшибки;
								КонецЕсли;
							Иначе
								
								ОбменСКонтрагентамиВнутренний.ПрочитатьШапкуФайлаCMLПоXDTO(ДанныеФайлаЭД, СтруктураФайлаЭД, ОписаниеОшибки);
								Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
									Если Не СтруктураФайлаЭД.Свойство("ВидЭД") Тогда // неизвестный XML не удалось определить видЭД
										ЭлектронныйДокумент.ПроизвольныйЭД = Истина;
									Иначе
										ВызватьИсключение ОписаниеОшибки;
									КонецЕсли;
								ИначеЕсли ДанныеФайлаЭД.Свойства().Получить("ИдФайл") <> Неопределено
									И ЭлектронныйДокумент.КодРегламента = "Nonformalized" Тогда // Отправили формализованный XML через ПроизвольныйЭД
										ЭлектронныйДокумент.ПроизвольныйЭД = Истина;
								Иначе
									
									Если ЭтоОтветныйТитул(СтруктураФайлаЭД.ТипЭлементаВерсииЭД) Тогда
										
										ВладелецЭД = ОпределитьОбъектПривязки(СтруктураФайлаЭД);
										
										Если ВладелецЭД = Неопределено Тогда
											// Получен ответный титул ЭД ФНС. Если владелец не найден, значит либо его удалили из ИБ,
											// либо ЭД попал сюда случайно.
											ТекстОшибки = НСтр("ru = 'Для полученного ответного титула (%1) не найден исходящий ЭД.
											|Возможные причины:
											|- первичный титул был удален из текущей базы;
											|- полученный пакет не предназначен для текущей ИБ (первичный титул был сформирован в другой базе/копии текущей базы).'");
											ОписаниеОшибки = СтрШаблон(ТекстОшибки, СтруктураФайлаЭД.ТипЭлементаВерсииЭД);
											
											ВызватьИсключение ОписаниеОшибки;
										КонецЕсли;
									КонецЕсли;
									
									СтруктураПараметров = Новый Структура;
									СтруктураПараметров.Вставить("ФайлДанныхСсылка", АдресЭД);
									СтруктураПараметров.Вставить("ФайлДопДанных",    ЭлектронныйДокумент.АдресДополнительногоЭД);
									
									СтруктураЭД = ОбменСКонтрагентамиВнутренний.ПолучитьДанныеИзФайла(СтруктураПараметров);

									СтруктураЭД.Вставить("ТипЭлементаВерсииЭД",             СтруктураФайлаЭД.ТипЭлементаВерсииЭД);
									СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем",  СтруктураФайлаЭД.ДатаФормированияЭДОтправителем);
									СтруктураЭД.Вставить("НаправлениеЭД",                   ОпределитьНаправление(СтруктураФайлаЭД));
									
									// Определим формат документа.
									ФорматЭлектронногоДокумента = ФорматПоПространствуИмен(СтруктураЭД.ВидЭД,
										ДанныеФайлаЭД.Тип().URIПространстваИмен);
									Если ЗначениеЗаполнено(ФорматЭлектронногоДокумента) Тогда
										СтруктураЭД.Вставить("ИдентификаторФормата", ФорматЭлектронногоДокумента);
									КонецЕсли;
									
									Если СтруктураФайлаЭД.Свойство("ЭлектронныйДокументВладелец", ЭлектронныйДокументВладелец) Тогда
										СтруктураЭД.Вставить("ЭлектронныйДокументВладелец", ЭлектронныйДокументВладелец);
									КонецЕсли;
									
									// Xsd-схема Счета-фактуры не позволяет передавать НомерЭД,
									// в этом случае возьмем НомерЭД из карточки транспортной информации.
									Если ЭлектронныйДокумент.Свойство("КодРегламента") И ЗначениеЗаполнено(ЭлектронныйДокумент.КодРегламента) Тогда
										СтруктураЭД.Вставить("НомерЭД", ЭлектронныйДокумент.НомерЭД);
									КонецЕсли;
									
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						Если ВладелецЭД = Неопределено Тогда
							
							Ответственный = Неопределено;
							ОбменСКонтрагентамиПереопределяемый.ПолучитьОтветственногоПоЭД(ПараметрыПакетаЭД.Контрагент,
								ПараметрыПакетаЭД.НастройкаЭДО, Ответственный);
							Если Не ЗначениеЗаполнено(Ответственный) Тогда 
								Ответственный = Пользователи.АвторизованныйПользователь();
							КонецЕсли;
							
							ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия10;
							Если ЭлектронныйДокумент.КодРегламента = "Formalized" 
								Или ЭлектронныйДокумент.КодРегламента = "Invoice" Тогда
								ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20;
							КонецЕсли;
							
							СтруктураВладельцаЭД = Новый Структура;
							СтруктураВладельцаЭД.Вставить("Входящий",               Истина);
							СтруктураВладельцаЭД.Вставить("Организация",            ПараметрыПакетаЭД.Организация);
							СтруктураВладельцаЭД.Вставить("Контрагент",             ПараметрыПакетаЭД.Контрагент);		
							СтруктураВладельцаЭД.Вставить("ВерсияФорматаПакета",    ПараметрыПакетаЭД.ВерсияФорматаПакета);
							СтруктураВладельцаЭД.Вставить("Ответственный",          Ответственный);
							СтруктураВладельцаЭД.Вставить("ПрофильНастроекЭДО",     ПараметрыПакетаЭД.ПрофильНастроекЭДО);
							СтруктураВладельцаЭД.Вставить("НастройкаЭДО",           ПараметрыПакетаЭД.НастройкаЭДО);
							СтруктураВладельцаЭД.Вставить("УникальныйИД",           ЭлектронныйДокумент.УникальныйИД);
							СтруктураВладельцаЭД.Вставить("ВерсияРегламентаЭДО",    ВерсияРегламентаЭДО);
							СтруктураВладельцаЭД.Вставить("ТребуетсяИзвещение",     ТребуетсяИзвещение);
							СтруктураВладельцаЭД.Вставить("ТипЭлементаВерсииЭД",    СтруктураФайлаЭД.ТипЭлементаВерсииЭД);
							СтруктураВладельцаЭД.Вставить("ТребуетсяПодтверждение", ЭлектронныйДокумент.ТребуетсяПодтверждение);
							
							Если СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
								Или СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
								СтруктураВладельцаЭД.ТребуетсяПодтверждение = Ложь
							ИначеЕсли СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
								Или СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда 
								СтруктураВладельцаЭД.ТребуетсяПодтверждение = Истина
							КонецЕсли;
							
							Если НЕ ЭлектронныйДокумент.ПроизвольныйЭД Тогда
								
								СтруктураВладельцаЭД.Вставить("ВидЭД",                          СтруктураЭД.ВидЭД);
								СтруктураВладельцаЭД.Вставить("НомерВерсииЭД",                  СтруктураЭД.НомерВерсииЭД);
								СтруктураВладельцаЭД.Вставить("НомерДокументаОтправителя",      СтруктураЭД.НомерДокументаОтправителя);
								СтруктураВладельцаЭД.Вставить("СуммаДокумента",                 СтруктураЭД.СуммаДокумента); 
								СтруктураВладельцаЭД.Вставить("ДатаДокументаОтправителя",       СтруктураЭД.ДатаДокументаОтправителя);
								
								Если СтруктураЭД.Свойство("НаименованиеДокументаОтправителя") Тогда
									СтруктураВладельцаЭД.Вставить("НаименованиеДокументаОтправителя", СтруктураЭД.НаименованиеДокументаОтправителя);
								КонецЕсли;
							Иначе
								СтруктураВладельцаЭД.Вставить("ВидЭД",                          Перечисления.ВидыЭД.ПроизвольныйЭД);
								СтруктураВладельцаЭД.Вставить("НомерВерсииЭД",                  0);
								СтруктураВладельцаЭД.Вставить("НомерДокументаОтправителя",      "");
								Если ЭлектронныйДокумент.Свойство("ДополнительныеПараметры")
									И ЗначениеЗаполнено(ЭлектронныйДокумент.ДополнительныеПараметры) Тогда
									
									НомерДокументаОтправителя = "";
									Если ЭлектронныйДокумент.ДополнительныеПараметры.Свойство("Номер", НомерДокументаОтправителя) Тогда
										СтруктураВладельцаЭД.Вставить("НомерДокументаОтправителя", НомерДокументаОтправителя);
									КонецЕсли;
								КонецЕсли;
								СтруктураВладельцаЭД.Вставить("ДатаДокументаОтправителя",       "");
								СтруктураВладельцаЭД.Вставить("НаименованиеДокументаОтправителя", Строка(ЭлектронныйДокумент.ТипДокумента));
								СтруктураВладельцаЭД.Вставить("ТипДокумента",                  ЭлектронныйДокумент.ТипДокумента);
								СтруктураВладельцаЭД.Вставить("Прочитан",                      Ложь);
								
								#Область ПоискДокументовОснований
								
								УникальныйИДОснования = Неопределено;
								ДокументОснование = Неопределено;
								Если ЗначениеЗаполнено(ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований)
									И ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований.Количество() > 0 Тогда
									
									// Актуальный алгоритм поиска документов-оснований на стороне получателя.
									СтруктураПараметровПоиска = Новый Структура;
									СтруктураПараметровПоиска.Вставить("Организация", ПараметрыПакетаЭД.Организация);
									СтруктураПараметровПоиска.Вставить("Контрагент",  ПараметрыПакетаЭД.Контрагент);
									СтруктураПараметровПоиска.Вставить("НаправлениеЭД",  Перечисления.НаправленияЭД.Входящий);
									
									ТЗПолученныхОснований = ОбменСКонтрагентамиВнутренний.ТаблицаЗначенийДокументовОснованийПоИдентификаторам(
											ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований, СтруктураПараметровПоиска);
									
									Для Каждого Идентификатор Из ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований Цикл
										СтрокаОснования = ТЗПолученныхОснований.Найти(Идентификатор, "УникальныйИД");
										Если СтрокаОснования <> Неопределено Тогда
											ДокументОснование = СтрокаОснования.Ссылка;
										КонецЕсли;
									КонецЦикла;
									
								ИначеЕсли ЭлектронныйДокумент.ТипДокумента = Перечисления.ТипыЭД.СоглашениеОбЭДО Тогда
									// Получено соглашение об обмене ЭД
									ДокументОснование = ПараметрыПакетаЭД.НастройкаЭДО;
								КонецЕсли;
								
								Если ЗначениеЗаполнено(ДокументОснование) Тогда
									ДокументыОснования = Новый Массив;
									ДокументыОснования.Добавить(ДокументОснование);
									СтруктураВладельцаЭД.Вставить("ДокументыОснования", ДокументыОснования);
								КонецЕсли;
								#КонецОбласти
								
							КонецЕсли;
							
							ТаблицаИдентификаторовОснований = Новый ТаблицаЗначений;
							ТаблицаИдентификаторовОснований.Колонки.Добавить("ИдентификаторДокументаОснования");
							ТаблицаИдентификаторовОснований.Колонки.Добавить("ИдентификаторЭДДокументаОснования");
							
							Для Каждого Идентификатор Из ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований Цикл
								НоваяСтрока = ТаблицаИдентификаторовОснований.Добавить();
								НоваяСтрока.ИдентификаторДокументаОснования = Идентификатор;
							КонецЦикла;
							
							Если СтруктураЭД.Свойство("ИдентификаторыОснованийУПД") Тогда
								Для Каждого Идентификатор Из СтруктураЭД.ИдентификаторыОснованийУПД Цикл
									Если ТаблицаИдентификаторовОснований.Найти(Идентификатор, "ИдентификаторДокументаОснования") = Неопределено Тогда
										НоваяСтрока = ТаблицаИдентификаторовОснований.Добавить();
										НоваяСтрока.ИдентификаторДокументаОснования = Идентификатор;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							
							СтруктураВладельцаЭД.Вставить("ИдентификаторыДокументовИЭДОснований", ТаблицаИдентификаторовОснований);

							ВладелецЭД = СоздатьЭлектронныйДокумент(СтруктураВладельцаЭД);
							
							Если ЭлектронныйДокумент.ПроизвольныйЭД 
								И НЕ ЗначениеЗаполнено(ДокументОснование) 
								И ЗначениеЗаполнено(ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований)
								И ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований.Количество() > 0 Тогда
																
								НаборЗаписей = РегистрыСведений.ИдентификаторыДокументовОснованийВладельцевЭД.СоздатьНаборЗаписей();
								НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(ВладелецЭД);
								Для Каждого Идентификатор Из ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований Цикл
									НоваяЗапись = НаборЗаписей.Добавить();
									НоваяЗапись.ИдентификаторДокументаОснования = Идентификатор;
									НоваяЗапись.ЭлектронныйДокумент = ВладелецЭД;
									НоваяЗапись.ОснованиеПолучено = Ложь;
									НоваяЗапись.ДокументПотомок = ВладелецЭД;
								КонецЦикла;
								НаборЗаписей.Записать(Истина);
							КонецЕсли;
						КонецЕсли;
						
						ПараметрыФайла = Новый Структура();
						ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
						ПараметрыФайла.Вставить("ВладелецФайлов", ВладелецЭД);
						ПараметрыФайла.Вставить("ИмяБезРасширения", ЭлектронныйДокумент.ИмяБезРасширения);
						ПараметрыФайла.Вставить("РасширениеБезТочки", ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ЭлектронныйДокумент.Расширение));
						ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
						
						ДобавленныйФайл = РаботаСФайлами.ДобавитьФайл(
							ПараметрыФайла, ЭлектронныйДокумент.АдресЭД, , , ЭлектронныйДокумент.СсылкаНаЭДПрисоединенныйФайл);
						
						Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
							
							СтруктураЭД.Вставить("ВладелецЭД",                      ВладелецЭД);
							СтруктураЭД.Вставить("Отправитель",                     ПараметрыПакетаЭД.Отправитель);
							СтруктураЭД.Вставить("Получатель",                      ПараметрыПакетаЭД.Получатель);
							СтруктураЭД.Вставить("УникальныйИД",                    ЭлектронныйДокумент.УникальныйИД);
							СтруктураЭД.Вставить("НомерЭД",                         ЭлектронныйДокумент.НомерЭД);
							СтруктураЭД.Вставить("НаименованиеФайла",               ЭлектронныйДокумент.ИмяБезРасширения);
							СтруктураЭД.Вставить("ДополнительнаяИнформация",        ЭлектронныйДокумент.ТекстСопроводительнойЗаписки);
							
							СтатусЭД = Неопределено;
							Если НЕ (СтруктураЭД.Свойство("СтатусЭД", СтатусЭД) И ЗначениеЗаполнено(СтатусЭД)) Тогда
								СтруктураЭД.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Получен);
							КонецЕсли;
							
							Если ЭлектронныйДокумент.ПроизвольныйЭД Тогда
								
								СтруктураЭД.Вставить("ТипЭлементаВерсииЭД",            Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
								СтруктураЭД.Вставить("НомерЭД",                        ЭлектронныйДокумент.НомерЭД);
								СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем", "");
								СтруктураЭД.Вставить("НаправлениеЭД",   		       Перечисления.НаправленияЭД.Входящий);
								СтруктураЭД.Вставить("СтатусДокумента",				   Перечисления.СтатусыЭД.Получен);
								
							КонецЕсли;
							
							ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД);
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ЭлектронныйДокументВладелец)
							И ЭтоОтветныйТитул(ДобавленныйФайл.ТипЭлементаВерсииЭД)
							И ЭлектронныйДокументВладелец.СтатусЭД <> Перечисления.СтатусыЭД.ПолученоПодтверждение Тогда
							
							СтруктураПараметровЭДВладельца = Новый Структура;
							
							ДопустимыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(
								Перечисления.СтатусыЭД.ПолученоПодтверждение,
								ЭлектронныйДокументВладелец);
							
							СтруктураПараметровЭДВладельца.Вставить("СтатусЭД", ДопустимыйСтатусЭД);
							ИзменитьПоСсылкеПрисоединенныйФайл(
								ЭлектронныйДокументВладелец, СтруктураПараметровЭДВладельца, Ложь);
						КонецЕсли;
						
						Если Не ЭтоОтветныйТитул(СтруктураЭД.ТипЭлементаВерсииЭД) Тогда
							
							Если ТребуетсяИзвещение Тогда
								МассивДобавленныхФайловДляИзвещений.Добавить(ДобавленныйФайл);
							КонецЕсли;
							
							Если НЕ ЭлектронныйДокумент.ПроизвольныйЭД Тогда
								
								// Нужно создать учетный документ.
								СтрокаПараметрыУчетногоДокумента = ПараметрыСозданияУчетныхДокументов.Добавить();
								
								СтрокаПараметрыУчетногоДокумента.ВладелецЭД          = ВладелецЭД;
								СтрокаПараметрыУчетногоДокумента.ПараметрыПакетаЭД   = ПараметрыПакетаЭД;
								СтрокаПараметрыУчетногоДокумента.СтруктураЭД         = СтруктураЭД;
								СтрокаПараметрыУчетногоДокумента.СтруктураПараметров = СтруктураПараметров;
								СтрокаПараметрыУчетногоДокумента.ПрисоединенныйФайл  = ДобавленныйФайл;
								СтрокаПараметрыУчетногоДокумента.НомерЭД             = ЭлектронныйДокумент.НомерЭД;
								
							КонецЕсли;
							
							#Область ПоискДокументовПотомков
							
							Если ЭлектронныйДокумент.ПроизвольныйЭД Тогда
								ДокументОснование = ВладелецЭД;
							КонецЕсли;
							
							Если ЗначениеЗаполнено(ДокументОснование) Тогда
								НайтиПроизвольныйЭДПотомокИУстановитьЕмуОснование(ЭлектронныйДокумент.НомерЭД, ДокументОснование)
							КонецЕсли;
							
							#КонецОбласти
							
						КонецЕсли;
						
						// Занесем информацию в пакет ЭД.
						МассивДобавленныхФайлов.Добавить(ДобавленныйФайл);
						
					Иначе
						// Для случая перераспаковки пакета ЭД.
						Для каждого Подпись Из СтруктураПакетаЭД.МассивЭП Цикл
							Если Подпись.УникальныйИД = ЭлектронныйДокумент.УникальныйИД Тогда
								Подпись.СсылкаНаЭДПрисоединенныйФайл = ДобавленныйФайл;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЭлектронныйДокумент.ТипДанных = "ДополнительныйЭД" Тогда
					
					// Поищем владельца.
					СтруктураПараметровПоиска = Новый Структура;
					СтруктураПараметровПоиска.Вставить("НомерЭД",       ЭлектронныйДокумент.НомерЭД);
					СтруктураПараметровПоиска.Вставить("УникальныйИД",  ЭлектронныйДокумент.УникальныйИД);
					СтруктураПараметровПоиска.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
					
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
					Если ЭлектронныйДокумент.КодРегламента = "Invoice" Тогда
						ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
					КонецЕсли;
					СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
					
					ДобавленныйФайл = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
					Если ДобавленныйФайл <> Неопределено Тогда
						
						// Поищем исходный файл доп. данных.
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("НомерЭД",       ЭлектронныйДокумент.НомерЭД);
						СтруктураПараметровПоиска.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
						СтруктураПараметровПоиска.Вставить("ЭлектронныйДокументВладелец", ДобавленныйФайл);
						СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД);
						
						ДобавленныйДопФайл = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
						Если ДобавленныйДопФайл = Неопределено Тогда
							
							ПараметрыФайла = Новый Структура();
							ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
							ПараметрыФайла.Вставить("ВладелецФайлов", ДобавленныйФайл.ВладелецФайла);
							ПараметрыФайла.Вставить("ИмяБезРасширения", ЭлектронныйДокумент.ИмяБезРасширения);
							ПараметрыФайла.Вставить("РасширениеБезТочки", ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ЭлектронныйДокумент.Расширение));
							ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		
							ДобавленныйДопФайл = РаботаСФайлами.ДобавитьФайл(
								ПараметрыФайла, ЭлектронныйДокумент.АдресЭД, , , ЭлектронныйДокумент.СсылкаНаЭДПрисоединенныйФайл);
							
							ВспомогательнаяСтруктура = Новый Структура;
							ВспомогательнаяСтруктура.Вставить("НаправлениеЭД",               Перечисления.НаправленияЭД.Входящий);
							ВспомогательнаяСтруктура.Вставить("ТипЭлементаВерсииЭД",         Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД);
							ВспомогательнаяСтруктура.Вставить("СтатусЭД",                    Перечисления.СтатусыЭД.Получен);
							ВспомогательнаяСтруктура.Вставить("УникальныйИД",                ЭлектронныйДокумент.УникальныйИД);
							ВспомогательнаяСтруктура.Вставить("НомерЭД",                     ЭлектронныйДокумент.НомерЭД);
							ВспомогательнаяСтруктура.Вставить("НаименованиеФайла",           ЭлектронныйДокумент.ИмяБезРасширения);
							ВспомогательнаяСтруктура.Вставить("ВладелецЭД",                  ДобавленныйФайл.ВладелецФайла);
							ВспомогательнаяСтруктура.Вставить("ЭлектронныйДокументВладелец", ДобавленныйФайл);
							
							ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйДопФайл, ВспомогательнаяСтруктура);
							
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЭлектронныйДокумент.ТипДанных = "СлужебныйЭД" Тогда
					
					СтруктураФайлаЭД = СформироватьСтруктуруФайлаЭД();
					ОбменСКонтрагентамиВнутренний.ПрочитатьШапкуСлужебногоФайлаCMLпоXDTO(ФайлДанныхЭД.ПолноеИмя,
						ЭлектронныйДокумент.КодРегламента, ЭлектронныйДокумент.КодТранзакции, СтруктураФайлаЭД);
						
					СтруктураФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
					
					// УИД первичного ЭД в ИБ отправителя, он же УникальныйИД в ИБ получателя.
					ГУИДПервичногоЭД = ЭлектронныйДокумент.УникальныйИД;
					
					ЭлектронныйДокументВладелец = Неопределено;
					
					// Для не формализованного документооборота служебные документы поступают только в ИБ отправителя.
					Если ЭлектронныйДокумент.КодТранзакции = "CancellationOfferReject" Тогда
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("УникальныйИД",        ГУИДПервичногоЭД);
						СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПОА);
						СтруктураПараметровПоиска.Вставить("НастройкаЭДО",        ПараметрыПакетаЭД.НастройкаЭДО);
						ПервичныйЭД = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
						ПервичныйЭДНайден = (ПервичныйЭД <> Неопределено);
						ЭлектронныйДокументВладелец = ПервичныйЭД;
					ИначеЕсли СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
						НаименованиеВладельца = СтруктураФайлаЭД.ДополнительныеДанные.НаименованиеВладельца;
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("УникальныйИД",      ГУИДПервичногоЭД);
						СтруктураПараметровПоиска.Вставить("НаименованиеФайла", НаименованиеВладельца);
						СтруктураПараметровПоиска.Вставить("НастройкаЭДО",      ПараметрыПакетаЭД.НастройкаЭДО);
						ПервичныйЭД = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
						ПервичныйЭДНайден = (ПервичныйЭД <> Неопределено);
						ЭлектронныйДокументВладелец = ПервичныйЭД;
					ИначеЕсли СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПУПДУКД Тогда
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("УникальныйИД",  ГУИДПервичногоЭД);
						СтруктураПараметровПоиска.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
						ТипЭлементаВерсииЭД = Новый Массив;
						ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
						ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
						СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
						
						ПервичныйЭД = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
						ПервичныйЭДНайден = (ПервичныйЭД <> Неопределено);
						ЭлектронныйДокументВладелец = ПервичныйЭД;
					ИначеЕсли ЭлектронныйДокумент.КодРегламента = "Nonformalized" 
						Или ЭлектронныйДокумент.КодРегламента = "Formalized"
						Или СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.Ошибка
						Или СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
						Или СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ
						Или СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ Тогда
						
						Если СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.Ошибка Тогда
							
							ПараметрыПоиска = Новый Структура;
							ПараметрыПоиска.Вставить("УникальныйИД", ГУИДПервичногоЭД);
							ПараметрыПоиска.Вставить("НастройкаЭДО", ПараметрыПакетаЭД.НастройкаЭДО);
							
							Если ВРег(ЭлектронныйДокумент.КодРегламента) = ВРег("Invoice") Тогда
								
								МассивТиповЭД = Новый Массив;
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ);
								ПараметрыПоиска.Вставить("ТипЭлементаВерсииЭД", МассивТиповЭД);
								
							Иначе
								МассивТиповЭД = Новый Массив;
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИОП);
								ПараметрыПоиска.Вставить("ТипЭлементаВерсииЭД", МассивТиповЭД);
								
							КонецЕсли;
							
							ПервичныйЭД = ОпределитьЭлектронныйДокумент(ПараметрыПоиска);
							
							ПервичныйЭДНайден = (ПервичныйЭД <> Неопределено);
							
							Если ПервичныйЭДНайден Тогда
								Если ЗначениеЗаполнено(ПервичныйЭД.ЭлектронныйДокументВладелец) Тогда
									ПервичныйЭД = ПервичныйЭД.ЭлектронныйДокументВладелец;
								КонецЕсли;
							КонецЕсли;
						Иначе
							
							ПервичныйЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИДПервичногоЭД));
							ПервичныйЭДНайден = (ПервичныйЭД.ПолучитьОбъект() <> Неопределено);
							
						КонецЕсли;
						
						ЭлектронныйДокументВладелец = ПервичныйЭД;
						
					Иначе
						
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("УникальныйИД",  ГУИДПервичногоЭД);
						СтруктураПараметровПоиска.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
						
						ТипЭлементаВерсииЭД = Новый Массив;
						ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
						ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
						ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
						ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
						ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
						ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
						ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
						
						СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
						ПервичныйЭД = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
						ПервичныйЭДНайден = ПервичныйЭД <> Неопределено;
						
						Если СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
							ЭлектронныйДокументВладелец = ПервичныйЭД;
						КонецЕсли;
						
					КонецЕсли;
					
					Если Не ПервичныйЭДНайден Тогда
						ТекстСообщения = НСтр("ru = 'Не удалось найти владельца для служебного электронного документа.'");
						ВызватьИсключение ТекстСообщения;
					КонецЕсли;
					
					Если ЭлектронныйДокументВладелец = Неопределено Тогда
						
						Параметры = Новый Структура;
						Параметры.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
						
						Если СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
							Параметры.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ);
						Иначе
							Параметры.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ);
						КонецЕсли;
						
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("УникальныйИД",        ГУИДПервичногоЭД);
						СтруктураПараметровПоиска.Вставить("НаправлениеЭД",       Параметры.НаправлениеЭД);
						СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", Параметры.ТипЭлементаВерсииЭД);
						ЭлектронныйДокументВладелец = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
					КонецЕсли;
					
					Если ЭлектронныйДокументВладелец = Неопределено Тогда
						ТекстСообщения = НСтр("ru = 'Не удалось найти владельца для служебного электронного документа.'");
						ВызватьИсключение ТекстСообщения;
					КонецЕсли;
					
					ВладелецЭД = ПервичныйЭД.ВладелецФайла;
					
					Если СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.Ошибка Тогда
						
						ШаблонСообщения = НСтр("ru = 'Возникла ошибка при передаче электронного документа %1, получатель %2.'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПервичныйЭД,
							ВладелецЭД.Контрагент);
						
						ПодробныйШаблонОшибки = НСтр("ru = 'При передаче электронного документа %1, возникла ошибка: %2.
							|Документ информационной базы (владелец электронного документа) - %3;
							|Соглашение об обмене электронными документами - %4.'");
						ПодробныйТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодробныйШаблонОшибки, ПервичныйЭД,
						СтруктураФайлаЭД.ОписаниеОшибки, ВладелецЭД, ВладелецЭД.НастройкаЭДО);
						
						ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Передача электронного документа'"),
							ПодробныйТекстОшибки, ТекстСообщения);
						
						СтруктураОбновленияПараметров = Новый Структура;
						СтруктураОбновленияПараметров.Вставить("ВладелецЭД",     ВладелецЭД);
						СтруктураОбновленияПараметров.Вставить("НаправлениеЭД",  ПервичныйЭД.НаправлениеЭД);
						СтруктураОбновленияПараметров.Вставить("ТекстУточнения", СтруктураФайлаЭД.ОписаниеОшибки);
						СтруктураОбновленияПараметров.Вставить("ТипЭлементаВерсииЭД", ПервичныйЭД.ТипЭлементаВерсииЭД);
						СтруктураОбновленияПараметров.Вставить("СтатусЭД", ПолучитьДопустимыйСтатусЭД(
							СтруктураФайлаЭД.СтатусЭДВладельца, ПервичныйЭД));
						
						ИзменитьПоСсылкеПрисоединенныйФайл(ПервичныйЭД, СтруктураОбновленияПараметров);
						
					Иначе
						
						// Поместим файл данных в присоединенные файлы к документу БД.
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("УникальныйИД",        ГУИДПервичногоЭД);
						СтруктураПараметровПоиска.Вставить("НаправлениеЭД",       СтруктураФайлаЭД.НаправлениеЭД);
						СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", СтруктураФайлаЭД.ТипЭлементаВерсииЭД);
						
						ДобавленныйФайл = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
						Если ДобавленныйФайл = Неопределено Тогда
							
							ПараметрыФайла = Новый Структура();
							ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
							ПараметрыФайла.Вставить("ВладелецФайлов", ВладелецЭД);
							ПараметрыФайла.Вставить("ИмяБезРасширения", ЭлектронныйДокумент.ИмяБезРасширения);
							ПараметрыФайла.Вставить("РасширениеБезТочки", ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ЭлектронныйДокумент.Расширение));
							ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		
							ДобавленныйФайл = РаботаСФайлами.ДобавитьФайл(
								ПараметрыФайла, ЭлектронныйДокумент.АдресЭД, , , ЭлектронныйДокумент.СсылкаНаЭДПрисоединенныйФайл);
							
							СтруктураОбновленияПараметров = Новый Структура;
							СтруктураОбновленияПараметров.Вставить("ВладелецЭД",                  ВладелецЭД);
							СтруктураОбновленияПараметров.Вставить("НаправлениеЭД",               Перечисления.НаправленияЭД.Входящий);
							СтруктураОбновленияПараметров.Вставить("УникальныйИД",                ГУИДПервичногоЭД);
							СтруктураОбновленияПараметров.Вставить("НомерЭД",                     
								?(ЗначениеЗаполнено(ЭлектронныйДокумент.НомерЭД), ЭлектронныйДокумент.НомерЭД, ЭлектронныйДокументВладелец.НомерЭД));
							СтруктураОбновленияПараметров.Вставить("НомерВерсииЭД",               СтруктураФайлаЭД.НомерВерсииЭД);
							СтруктураОбновленияПараметров.Вставить("Отправитель",                 ПараметрыПакетаЭД.Отправитель);
							СтруктураОбновленияПараметров.Вставить("Получатель",                  ПараметрыПакетаЭД.Получатель);
							СтруктураОбновленияПараметров.Вставить("ЭлектронныйДокументВладелец", ЭлектронныйДокументВладелец);
							СтруктураОбновленияПараметров.Вставить("ТипЭлементаВерсииЭД",         СтруктураФайлаЭД.ТипЭлементаВерсииЭД);
							СтруктураОбновленияПараметров.Вставить("НаименованиеФайла",           ЭлектронныйДокумент.ИмяБезРасширения);
							СтруктураОбновленияПараметров.Вставить("СтатусЭД", ПолучитьДопустимыйСтатусЭД(
								Перечисления.СтатусыЭД.Получен, ДобавленныйФайл));
							
							ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураОбновленияПараметров, Ложь);
							
							СтруктураОбновленияПараметров = Новый Структура;
							СтруктураОбновленияПараметров.Вставить("СтатусЭД",
								ПолучитьДопустимыйСтатусЭД(СтруктураФайлаЭД.СтатусЭДВладельца, ПервичныйЭД));
							
							Если ЗначениеЗаполнено(СтруктураФайлаЭД.ТекстУточнения) Тогда
								СтруктураОбновленияПараметров.Вставить("ТекстУточнения", СтруктураФайлаЭД.ТекстУточнения);
							КонецЕсли;
							
							СтатусЭДВладельца = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПервичныйЭД, "СтатусЭД");
							
							Если НЕ (ЭтоСчетФактура(ПервичныйЭД)
								И СтруктураОбновленияПараметров.СтатусЭД = Перечисления.СтатусыЭД.Отклонен
								И (СтатусЭДВладельца = Перечисления.СтатусыЭД.Сформирован
									ИЛИ СтатусЭДВладельца = Перечисления.СтатусыЭД.Утвержден)) Тогда								
								ИзменитьПоСсылкеПрисоединенныйФайл(ПервичныйЭД, СтруктураОбновленияПараметров, Ложь);
							КонецЕсли;
							
							Если ЭлектронныйДокумент.КодРегламента = "Invoice" Тогда
								
								Если ЭлектронныйДокумент.КодТранзакции <> "ReceiveNotice" И ЭлектронныйДокумент.КодТранзакции <> "CorrectionNoticeReceiveNotice" Тогда
									
									МассивДобавленныхФайловДляИзвещений.Добавить(ДобавленныйФайл);
								КонецЕсли;
								
								Если ЭлектронныйДокумент.КодТранзакции = "PostDateConfirmation" 
									Или ЭлектронныйДокумент.КодТранзакции = "SendConfirmation"
									Или ЭлектронныйДокумент.КодТранзакции = "ReceiveNotice" 
									Или ЭлектронныйДокумент.КодТранзакции = "ReceiveNoticePostDateConfirmation" Тогда
									
									Для Каждого Строка Из ВладелецЭД.ДокументыОснования Цикл
										
										Если ЗначениеЗаполнено(Строка.ДокументОснование)
											И ОбменСКонтрагентамиВнутренний.ДокументЯвляетсяСчетомФактурой(Строка.ДокументОснование) Тогда
											
											ОбменСКонтрагентамиПереопределяемый.ЗаполнитьРеквизитыЭСФ(Строка.ДокументОснование, ДобавленныйФайл);
										КонецЕсли;
											
									КонецЦикла;
								КонецЕсли;
								
								Если ВРег(ЭлектронныйДокумент.КодТранзакции) = ВРег("ReceiveNotice") Тогда
									
									Если ЭтоДокументКорректировки(ДобавленныйФайл) Тогда
										ОбменСКонтрагентамиВнутренний.ИзменитьСостояниеСФОснований(ПервичныйЭД, Перечисления.НаправленияЭД.Исходящий);
									КонецЕсли;
								КонецЕсли;
								
								Если ВРег(ЭлектронныйДокумент.КодТранзакции) = ВРег("PostDateConfirmation") Тогда
									ВладелецДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПервичныйЭД, "ВладелецФайла");
									Если ЗначениеЗаполнено(ВладелецДокумента) Тогда
										ТребуетсяИзвещение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецДокумента, "ТребуетсяИзвещение");
										Если Не ТребуетсяИзвещение Тогда
											ОбменСКонтрагентамиВнутренний.ИзменитьСостояниеСФОснований(ПервичныйЭД, Перечисления.НаправленияЭД.Исходящий);
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
								
							КонецЕсли;
						Иначе
							
							// Для случая перераспаковки пакета ЭД.
							Для каждого Подпись Из СтруктураПакетаЭД.МассивЭП Цикл
								Если Подпись.УникальныйИД = ЭлектронныйДокумент.УникальныйИД Тогда
									Подпись.СсылкаНаЭДПрисоединенныйФайл = ДобавленныйФайл;
								КонецЕсли;
							КонецЦикла;
							
						КонецЕсли;
						
						// Занесем информацию в пакет ЭД.
						МассивДобавленныхФайлов.Добавить(ДобавленныйФайл);
						
						// Проверим актуальность версий форматов.
						ВходящаяВерсияФормата = Неопределено;
						Если ЭлектронныйДокумент.Свойство("ДополнительныеПараметры") И ЗначениеЗаполнено(ЭлектронныйДокумент.ДополнительныеПараметры)
							И ЭлектронныйДокумент.ДополнительныеПараметры.Свойство("ВерсияФормата", ВходящаяВерсияФормата)
							И ЗначениеЗаполнено(ВходящаяВерсияФормата)
							И ПараметрыПакетаЭД.НастройкаЭДО.АвтоПереходНаНовыеФорматы Тогда
							
							ТекущаяВерсияФормата = ПараметрыПакетаЭД.НастройкаЭДО.ИсходящиеДокументы.Найти(ВладелецЭД.ВидЭД, "ИсходящийДокумент").ВерсияФормата;
							АктуальнаяВерсияФормата = АктуальнаяВерсияФорматаЭД(ВладелецЭД.ВидЭД);
							Если ВходящаяВерсияФормата <> ТекущаяВерсияФормата
								И ВходящаяВерсияФормата = АктуальнаяВерсияФормата Тогда
								
								ТекущаяНастройкаЭДО = ПараметрыПакетаЭД.НастройкаЭДО.ПолучитьОбъект();
								ИсходнаяСтрокаЭД = ТекущаяНастройкаЭДО.ИсходящиеДокументы.Найти(ВладелецЭД.ВидЭД, "ИсходящийДокумент");
								ИсходнаяСтрокаЭД.ВерсияФормата = АктуальнаяВерсияФормата;
								ТекущаяНастройкаЭДО.Записать();
								
								Если НЕ ТекущаяНастройкаЭДО.РасширенныйРежимНастройкиСоглашения 
									И ЗначениеЗаполнено(ИсходнаяСтрокаЭД.ПрофильНастроекЭДО) Тогда
									ПрофильЭДО = ИсходнаяСтрокаЭД.ПрофильНастроекЭДО;
									
									ПрофильЭДООбъект = ПрофильЭДО.ПолучитьОбъект();
									ИсходнаяСтрокаЭД = ПрофильЭДООбъект.ИсходящиеДокументы.Найти(ВладелецЭД.ВидЭД, "ИсходящийДокумент");
									ИсходнаяСтрокаЭД.ВерсияФормата = АктуальнаяВерсияФормата;
									ПрофильЭДООбъект.Записать();
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			// Записываем ЭП в ЭД.
			Для Каждого Подпись Из СтруктураПакетаЭД.МассивЭП Цикл
				
				Если НЕ ЗначениеЗаполнено(Подпись.СсылкаНаЭДПрисоединенныйФайл) Тогда
					ТекстСообщения = НСтр("ru = 'Не удалось найти электронный документ для сохранения подписи.'");
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;
				
				ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(Подпись.АдресЭП);
				Если ЕстьТакаяПодпись(ДвоичныеДанныеПодписи, Подпись.СсылкаНаЭДПрисоединенныйФайл) Тогда
					Продолжить;
				КонецЕсли;
				
				СвойстваПодписи = Новый Структура;
				СвойстваПодписи.Вставить("Подпись",             ДвоичныеДанныеПодписи);
				СвойстваПодписи.Вставить("Сертификат",          ПолучитьИзВременногоХранилища(Подпись.АдресСертификата));
				УдалитьИзВременногоХранилища(Подпись.АдресСертификата);
				СвойстваПодписи.Вставить("Отпечаток",           Подпись.Отпечаток);
				СвойстваПодписи.Вставить("КомуВыданСертификат", Подпись.КомуВыданСертификат);
				СвойстваПодписи.Вставить("ПодписьВерна",        Подпись.ПодписьВерна);
				СвойстваПодписи.Вставить("ДатаПроверкиПодписи", Подпись.ДатаПроверкиПодписи);
				
				ЭлектроннаяПодпись.ДобавитьПодпись(Подпись.СсылкаНаЭДПрисоединенныйФайл, СвойстваПодписи);
				
				Если Подпись.КодТранзакции = "MainDocumentResign" Или Подпись.КодТранзакции = "CancellationOfferResign" Тогда
					
					НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(
						Перечисления.СтатусыЭД.ПолученоПодтверждение,
						Подпись.СсылкаНаЭДПрисоединенныйФайл);
						
					СтруктураПараметров = Новый Структура("СтатусЭД", НовыйСтатусЭД);
					ИзменитьПоСсылкеПрисоединенныйФайл(Подпись.СсылкаНаЭДПрисоединенныйФайл,
						СтруктураПараметров, Ложь);
					
					// Занесем информацию в пакет ЭД.
					МассивДобавленныхФайлов.Добавить(Подпись.СсылкаНаЭДПрисоединенныйФайл);
				КонецЕсли;
				
			КонецЦикла;
			
			// Отправим на формирование ИОП сразу на сервере.
			Если МассивДобавленныхФайловДляИзвещений.Количество() > 0 Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСлужебныхЭД,
					СформироватьСлужебныеЭД(МассивДобавленныхФайловДляИзвещений, Перечисления.ВидыЭД.ИзвещениеОПолучении));
			КонецЕсли;
			
			// Обработаем пакет ЭД
			ПакетЭДОбъект = СтруктураПакетаЭД.ПакетЭДСсылка.ПолучитьОбъект();
			
			// Добавим информацию о присоединенном файле в документ пакета электронных документов.
			Для Каждого ДобавленныйФайл Из МассивДобавленныхФайлов Цикл
				
				НовыйЭлектронныйДокумент = ПакетЭДОбъект.ЭлектронныеДокументы.Добавить();
				НовыйЭлектронныйДокумент.ЭлектронныйДокумент = ДобавленныйФайл;
				НовыйЭлектронныйДокумент.ОбъектВладелец      = ДобавленныйФайл.ВладелецФайла;
				
				НовыеДокументы.Добавить(ДобавленныйФайл);
				
			КонецЦикла;
			
			ПакетЭДОбъект.СтатусПакета = Перечисления.СтатусыПакетовЭД.Распакован;
			ПакетЭДОбъект.Записать();
			
			// статистика по отправленным документам
			КоличествоЭД = 0;
			Для Каждого Строка Из ПакетЭДОбъект.ЭлектронныеДокументы Цикл
				Если Не ЭтоСлужебныйДокумент(Строка.ЭлектронныйДокумент) Тогда
					КоличествоЭД = КоличествоЭД + 1
				КонецЕсли;
			КонецЦикла;
			Если КоличествоЭД Тогда
				ЗаписатьСтатистикуПоДокументообороту(
					ПараметрыПакетаЭД.СпособОбменаЭД, 
					ПараметрыПакетаЭД.ПрофильНастроекЭДО, 
					"Получено", 
					КоличествоЭД)
			КонецЕсли;
			// конец статистика по отправленным документам
			
			КоличествоРаспакованныхЭД = КоличествоРаспакованныхЭД + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Если ЗначениеЗаполнено(ФайлЭД) Тогда
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлЭД);
			КонецЕсли;
			Если ЗначениеЗаполнено(ПапкаДляРаспаковки) Тогда
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
			КонецЕсли;
			
			ШаблонСообщения = НСтр("ru = 'При распаковке пакетаЭД: %1 возникла ошибка:
			|%2'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения,
				СтруктураПакетаЭД.ПакетЭДСсылка, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстОшибки,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	// Создание учетных документов.
	Если ПараметрыСозданияУчетныхДокументов.Количество() Тогда
		
		Для Каждого Строка Из ПараметрыСозданияУчетныхДокументов Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				ДокументыУчета = Неопределено;
				
				ПараметрыПакетаЭД   = Строка.ПараметрыПакетаЭД;
				СтруктураЭД         = Строка.СтруктураЭД;
				СтруктураПараметров = Строка.СтруктураПараметров;
				
				СпособОбработки = СпособОбработкиВходящегоДокумента(
					ПараметрыПакетаЭД.НастройкаЭДО, СтруктураЭД.ВидЭД, СтруктураЭД.ТипЭлементаВерсииЭД);
				
				// Если документ обрабатывается не вручную, нужно проверить актуальность формата.
				ИдентификаторФормата = Неопределено;
				Если НЕ ВРег(СпособОбработки) = ВРег("Вручную") 
					И СтруктураЭД.Свойство("ИдентификаторФормата", ИдентификаторФормата) Тогда
					СведенияОФормате = СведенияОФормате(СтруктураЭД.ВидЭД, ИдентификаторФормата);
					
					Если ЗначениеЗаполнено(СведенияОФормате.ДатаОкончанияДействия) 
						И КонецДня(СведенияОФормате.ДатаОкончанияДействия) < СтруктураЭД.ДатаФормированияЭДОтправителем Тогда
						// Формат стал неактуальным прежде, чем был сформирован документ - автоматически документ не создаем.
						СпособОбработки = "Вручную";
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ((ТипЗнч(СпособОбработки) = Тип("Структура") И ВРег(СпособОбработки.СчетФактура) = ВРег("Вручную"))
					ИЛИ ВРег(СпособОбработки) = ВРег("Вручную")) Тогда
					
					Если СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
						ВладелецКаталога = Новый Массив;
						ВладелецКаталога.Добавить(ПараметрыПакетаЭД.НастройкаЭДО);
						СтруктураПараметров.Вставить("ДокументыУчета", ВладелецКаталога);
						СтруктураПараметров.Вставить("ЗаполнитьДокумент");
					Иначе
						СтруктураПараметров.Удалить("ВладелецЭД");
						ДокументыУчета = ОпределитьОбъектПривязки(СтруктураЭД);
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(ДокументыУчета) Тогда
						ДокументыУчета = ОбменСКонтрагентамиВнутренний.СохранитьДанныеОбъекта(СтруктураПараметров, СпособОбработки);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДокументыУчета) Тогда
						Для каждого ДокументУчета Из ДокументыУчета Цикл
							
							ДокументОбъект = Строка.ВладелецЭД.ПолучитьОбъект();
							НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
							НоваяСтрока.ДокументОснование = ДокументУчета;
							
							Если ТипЗнч(СпособОбработки) = Тип("Структура") Тогда
								
								Если ОбменСКонтрагентамиВнутренний.ДокументЯвляетсяСчетомФактурой(ДокументУчета) Тогда
									НоваяСтрока.СпособОбработки = СпособОбработки.СчетФактура;
								Иначе
									НоваяСтрока.СпособОбработки = СпособОбработки.ПервичныйДокумент;
								КонецЕсли;
								
							Иначе
								НоваяСтрока.СпособОбработки  = СпособОбработки;
							КонецЕсли;
							
							ДокументОбъект.Записать();
							УстановитьСсылкуДляВладельцаВРегистреСостояний(ДокументУчета, Строка.ВладелецЭД);
						КонецЦикла;
						
						НайтиПроизвольныйЭДПотомокИУстановитьЕмуОснование(Строка.НомерЭД, ДокументыУчета[0])
						
					КонецЕсли;
					
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ШаблонСообщения = НСтр("ru = 'При отражении в учете электронного документа: %1 возникла ошибка:
					|%2'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения,
					ПредставлениеЭД(Строка.ПрисоединенныйФайл), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
					НСтр("ru = 'Создание учетного документа'"), ТекстОшибки, ТекстСообщения);
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Обновим данные по основаниям у владельцев ЭД.
	НайтиЗаполнитьОснованияУВладельцевЭД();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Используется для получения представления ЭД с клиента.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - ЭД для которого надо получить представление.
//
// Возвращаемое значение:
//  Строка - представление электронного документа.
//
Функция ПредставлениеЭД(СсылкаНаЭД) Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Представление", ПолучитьПредставлениеЭД(СсылкаНаЭД));
	Структура.Вставить("Значение", СсылкаНаЭД);
	
	Возврат Структура.Представление;
	
КонецФункции

// Только для внутреннего использования
Функция СформироватьСлужебныеЭД(МассивЭД, ВидЭД, ТекстУточнения = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивВозврата = Новый Массив;
	
	ДанныеЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЭД, "НаправлениеЭД, СтатусЭД,
	                      |УникальныйИД, ТипЭлементаВерсииЭД, ВладелецФайла, НомерЭД");
	Для Каждого СсылкаНаЭД Из МассивЭД Цикл
	
		ПараметрыЭД = ДанныеЭД.Получить(СсылкаНаЭД);
		
		ЭтоИзвещение = НЕ ЗначениеЗаполнено(ТекстУточнения);
		
		Если ЭтоИзвещение Тогда
			// Не формируем извещение о получении для версии регламента 20 в формализованных документах.
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЭД.ВладелецФайла,"ВерсияРегламентаЭДО") 
					= Перечисления.ВерсииРегламентаОбмена1С.Версия20
				И ЭтоОтветныйТитул(ПараметрыЭД.ТипЭлементаВерсииЭД) Тогда
				
				Возврат МассивВозврата;
			КонецЕсли;

			Если НЕ (ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПУПДУКД) Тогда
				
				ШаблонСообщения = НСтр("ru = 'Для типа ЭД %1 не предусмотрено формирование Извещения о получении.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					ПараметрыЭД.ТипЭлементаВерсииЭД);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат МассивВозврата;
			КонецЕсли;
		КонецЕсли;
		
		АдресВоВременномХранилище = "";
		
		СтруктураЭД = ОбменСКонтрагентамиВнутренний.СформироватьФайлСлужебногоДокументаПоЭД(СсылкаНаЭД, ВидЭД, ТекстУточнения);
		Если НЕ ЗначениеЗаполнено(СтруктураЭД)
			Или НЕ СтруктураЭД.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище) Тогда
			
			Возврат МассивВозврата;
		КонецЕсли;
		ДатаСозданияФайла = ТекущаяДатаСеанса();
		
		НачатьТранзакцию();
		Попытка
			ПараметрыФайла = Новый Структура();
			ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", ПараметрыЭД.ВладелецФайла);
			ПараметрыФайла.Вставить("ИмяБезРасширения", СтруктураЭД.ИдФайла);
			ПараметрыФайла.Вставить("РасширениеБезТочки", "xml");
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
			НоваяСсылкаЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку();
		
			ДобавленныйФайл = РаботаСФайлами.ДобавитьФайл(
				ПараметрыФайла, АдресВоВременномХранилище, , , НоваяСсылкаЭД);

			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("НаправлениеЭД",               Перечисления.НаправленияЭД.Исходящий);
			СтруктураПараметров.Вставить("СтатусЭД",                    Перечисления.СтатусыЭД.Утвержден);
			СтруктураПараметров.Вставить("Получатель",                  СтруктураЭД.ИдПолучателя);
			СтруктураПараметров.Вставить("Отправитель",                 СтруктураЭД.ИдОтправителя);
			СтруктураПараметров.Вставить("НомерЭД",                     Строка(ДобавленныйФайл.УникальныйИдентификатор()));
			СтруктураПараметров.Вставить("ВладелецЭД",                  ПараметрыЭД.ВладелецФайла);
			СтруктураПараметров.Вставить("УникальныйИД",                ПараметрыЭД.УникальныйИД);
			СтруктураПараметров.Вставить("НаименованиеФайла",           СтруктураЭД.ИдФайла);
			Если ЭтоИзвещение Тогда
				ТипЭлементаВерсииЭД = ОбменСКонтрагентамиВнутренний.ОпределитьТипЭДПоТипуЭДВладельца(СсылкаНаЭД);
			ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании Тогда
				ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА;
			Иначе
				Если СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
					ИЛИ СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
					ИЛИ СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
					ИЛИ СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
					ИЛИ СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
					ИЛИ СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
					ИЛИ СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
				
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ;
				Иначе
					
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УОУ;
				КонецЕсли;
			КонецЕсли;
			СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД",         ТипЭлементаВерсииЭД);
			СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", СсылкаНаЭД);
			
			ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураПараметров);
			
			Если НЕ ЭтоИзвещение Тогда
				Если ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
					// Нужно отклонить ответные титулы, если их уже успели сформировать.
					ТипыОтветныхТитулов = ОбменСКонтрагентамиСлужебныйКлиентСервер.ТипыОтветныхТитулов();
					ТипыОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД); // для старых форматов.
					
					НовыйСтатусЭД = Перечисления.СтатусыЭД.Отклонен;
					Запрос = Новый Запрос;
					Запрос.Текст =
						"ВЫБРАТЬ
						|	ПодчиненныеЭД.Ссылка,
						|	ПодчиненныеЭД.ВладелецФайла
						|ИЗ
						|	Справочник.ЭДПрисоединенныеФайлы КАК ПодчиненныеЭД
						|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
						|		ПО (ЭДПрисоединенныеФайлы.Ссылка = ПодчиненныеЭД.ЭлектронныйДокументВладелец)
						|ГДЕ
						|	ПодчиненныеЭД.ТипЭлементаВерсииЭД В (&ТипыЭлементовВерсий)
						|	И ПодчиненныеЭД.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен)
						|	И ЭДПрисоединенныеФайлы.Ссылка = &Ссылка";
					Запрос.УстановитьПараметр("Ссылка", СсылкаНаЭД);
					Запрос.УстановитьПараметр("ТипыЭлементовВерсий", ТипыОтветныхТитулов);
					Результат = Запрос.Выполнить();
					Выборка = Результат.Выбрать();
					Пока Выборка.Следующий() Цикл
						ЭДОФайл = Выборка.Ссылка.ПолучитьОбъект();
						ЭДОФайл.СтатусЭД = НовыйСтатусЭД;
						ЭДОФайл.Записать();
						
						ЗаписатьПричинуОтклонения(Выборка.ВладелецФайла,ТекстУточнения);
					КонецЦикла;
				Иначе
					
					ВторойТитул = ВторойТитулДокумента(СсылкаНаЭД);
					ТребуетсяПодтверждение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЭД.ВладелецФайла, "ТребуетсяПодтверждение");
					
					Если ЗначениеЗаполнено(ВторойТитул) Или ТребуетсяПодтверждение Тогда
						НовыйСтатусЭД = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании;
					Иначе
						НовыйСтатусЭД = Перечисления.СтатусыЭД.Аннулирован;
					КонецЕсли;
					
				КонецЕсли;
				
				СтруктураПараметров = Новый Структура("СтатусЭД, ПричинаОтклонения", НовыйСтатусЭД, ТекстУточнения);
				ИзменитьПоСсылкеПрисоединенныйФайл(СсылкаНаЭД, СтруктураПараметров, Ложь);
			КонецЕсли;
			МассивВозврата.Добавить(ДобавленныйФайл);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Проверка на тип счет-фактура.
//
// Параметры:
//  ЭлектронныйДокумент	- Ссылка - электронный документ и ли тип элемента версии.
// 
// Возвращаемое значение:
//  Булево - Истина, если это счет-фактура.
//
Функция ЭтоСчетФактура(ЭлектронныйДокумент) Экспорт
	
	Результат = Ложь;

	Если ТипЗнч(ЭлектронныйДокумент) = Тип("ПеречислениеСсылка.ТипыЭлементовВерсииЭД") Тогда
		ТипЭлементаВерсииЭД = ЭлектронныйДокумент;
	Иначе
		ТипЭлементаВерсииЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "ТипЭлементаВерсииЭД");
	КонецЕсли;
	
	Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
		Или ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
		Или ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определение электронного документа.
//
// Параметры:
//  СтруктураПараметровПоиска - Структура - параметры поиска.
// 
// Возвращаемое значение:
//  ЭДПрисоединенныеФайлы.Ссылка - ссылка на электронный документ.
//
Функция ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
	
	Шаблон = "
		|И ЭДПрисоединенныеФайлы.%1 %2 %3";
	Для Каждого Элемент Из СтруктураПараметровПоиска Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда

			Если Элемент.Ключ = "НастройкаЭДО" Тогда
				ШаблонИмяРеквизита = СтрЗаменить(Шаблон, "%1", "ВладелецФайла." + Элемент.Ключ);
			Иначе
				ШаблонИмяРеквизита = СтрЗаменить(Шаблон, "%1", Элемент.Ключ);
			КонецЕсли;
			
			Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
				ЗнакСравнения = "В";
				ШаблонСравнение = СтрЗаменить(ШаблонИмяРеквизита, "%2", ЗнакСравнения);
				ШаблонИмяПараметра = СтрЗаменить(ШаблонСравнение, "%3", "("+"&" +Элемент.Ключ+ ")");
			Иначе
				ЗнакСравнения = "=";
				ШаблонСравнение = СтрЗаменить(ШаблонИмяРеквизита, "%2", ЗнакСравнения);
				ШаблонИмяПараметра = СтрЗаменить(ШаблонСравнение, "%3", "&"+Элемент.Ключ);
			КонецЕсли;
			Текст = Текст + ШаблонИмяПараметра;
			Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = Текст;
	Результат = Запрос.Выполнить().Выбрать();
	ВозвращаемыйПараметр = Неопределено;
	Если Результат.Следующий() Тогда
		ВозвращаемыйПараметр = Результат.Ссылка;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВозвращаемыйПараметр;
	
КонецФункции

// Выполняет последовательность действий для электронных документов.
//
// Параметры:
//  МассивСсылокНаОбъект - Массив - ссылки на электронные документы, для которых надо определить последовательность действий.
//  МассивОтпечатковСертификатов - Массив - содержит отпечатки доступных сертификатов.
//  Действия - Строка - строковое представление необходимых действий.
//  ДопПараметры - Структура - дополнительные параметры, определяющие последовательность действий с электронными документами.
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, Массив - ссылки на элемент справочника ЭДПрисоединенныеФайлы.
//  СоотвСертификатовИПаролей - Соответствие - ключ - СертификатЭП, значение - пароль к сертификату.
//
// Возвращаемое значение:
//  Структура, Неопределено - результат выполненных действий.
//
Функция ВыполнитьДействияПоЭД(Знач МассивСсылокНаОбъект,
							  Знач МассивОтпечатковСертификатов,
							  Знач Действия,
							  ДопПараметры,
							  Знач ЭД,
							  Знач СоотвСертификатовИПаролей) Экспорт
							  
	Если НЕ ЕстьПравоВыполненияОбмена() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	ВыполнятьКриптооперацииНаСервере = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере();
	НемедленнаяОтправкаЭД = НемедленнаяОтправкаЭД();
	
	МассивОтпечатковКлиент = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковКлиент, МассивОтпечатковСертификатов);
	
	Если ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Подписать")
		Или ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Отправить") Тогда
		
		Если ВыполнятьКриптооперацииНаСервере Тогда
			Попытка
				МассивОтпечатковСертификатовНаСервере = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов();
			Исключение
				МассивОтпечатковСертификатовНаСервере = Новый Массив;
			КонецПопытки;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				МассивОтпечатковСертификатов, МассивОтпечатковСертификатовНаСервере, Истина);
		КонецЕсли;
		
		ТаблицаДоступныхСертификатов = ТаблицаДоступныхДляПодписиСертификатов(МассивОтпечатковСертификатов);
		МассивОтпечатков = ТаблицаДоступныхСертификатов.ВыгрузитьКолонку("Отпечаток");

	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ЭД) <> Тип("Массив")
		И НЕ (ЗначениеЗаполнено(ЭД) И (ЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
										Или ЭтоСлужебныйДокумент(ЭД))) Тогда
		ЭлектронноеВзаимодействиеПереопределяемый.ПроверитьГотовностьИсточников(МассивСсылокНаОбъект);
	КонецЕсли;
	
	Если ТипЗнч(ЭД) <> Тип("Массив")
		И МассивСсылокНаОбъект.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	СтруктураВозврата = Новый Структура;
	// Ключи структуры возврата:
	// ВыполнятьКриптооперацииНаСервере, НемедленнаяОтправкаЭД - тип Булево;
	// КоличествоНовыхЭД, КоличествоУтвержденныхЭД, КолПодписанных, КолПодготовленных, КолОтправленных - тип Число;
	// МассивНовыхЭД - тип Массив;
	// СоотвСертификатовИМассивовЭДКПодписи - тип Соответствие (ключ - СертификатЭП, значение - МассивЭД к подписи на клиенте);
	// СтруктураКОтправке - тип Структура с ключами:
	//                   БезПодписи, СПодписью - тип Массив, МассивЭД (к подготовке) к отправке, соответственно не подписываемые и подписываемые;
	//                   САвторизацией - тип Соответствие (ключ - СоглашениеЭД, значение - МассивЭД к отправке).
	// СообщенияПользователю - тип Массив, содержит элементы типа СообщениеПользователю. Используется для вывода сообщений после выполнения всех операций. 
	//                   
	СтруктураВозврата.Вставить("ВыполнятьКриптооперацииНаСервере", ВыполнятьКриптооперацииНаСервере);
	СтруктураВозврата.Вставить("НемедленнаяОтправкаЭД", НемедленнаяОтправкаЭД);
	СтруктураВозврата.Вставить("СообщенияПользователю", Новый Массив);
	
	МассивНеОбрабатываемыхОбъектов = Новый Массив;
	
	// Формирование ЭД:
	
	КолНовыхЭД = 0;
	Если ЭД = Неопределено И ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Сформировать") Тогда
		Если Действия = "Сформировать" 
			Или Действия = "СформироватьПоказать" Тогда
			УдалитьНедоступныеДляФормированияЭДОбъекты(МассивСсылокНаОбъект);
		КонецЕсли;
		
		НастройкиОбъектов = Новый Соответствие;
		Для Сч = -МассивСсылокНаОбъект.Количество() + 1 По 0 Цикл
			СсылкаНаОбъект = МассивСсылокНаОбъект[-Сч];
			
			// Для случая определения вида ЭД пользователем
			ВидЭД = "";
			Если ЗначениеЗаполнено(ДопПараметры) Тогда
				ДопПараметры.Свойство("ВидЭД", ВидЭД);
			КонецЕсли;
			
			НастройкиОбмена = ОпределитьНастройкиОбменаЭДПоИсточнику(СсылкаНаОбъект,
																								   ,
																								   ,
																								   ,
																								   ВидЭД);
			// Проверим, что в полученных настройках используются действующие форматы
			АктуализироватьФорматыЭДВНастройкахОбмена(НастройкиОбмена, 
				СтруктураВозврата.СообщенияПользователю);
				
			Если НЕ ЗначениеЗаполнено(НастройкиОбмена) Тогда
				МассивСсылокНаОбъект.Удалить(-Сч);
			Иначе
				НастройкиОбъектов.Вставить(СсылкаНаОбъект, НастройкиОбмена);
			КонецЕсли;
		КонецЦикла;
		Если МассивСсылокНаОбъект.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		ТекстЗапросаСоздатьЭД =
		"ВЫБРАТЬ
		|	МассивСсылок.ОбъектСсылка КАК ОбъектСсылка
		|ПОМЕСТИТЬ МассивСсылок
		|ИЗ
		|	&МассивСсылок КАК МассивСсылок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МассивСсылок.ОбъектСсылка КАК ВладелецЭД
		|ИЗ
		|	МассивСсылок КАК МассивСсылок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ПО МассивСсылок.ОбъектСсылка = СостоянияЭД.СсылкаНаОбъект
		|ГДЕ
		|	(СостоянияЭД.СсылкаНаОбъект ЕСТЬ NULL
		|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован)
		|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно)
		|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент))";
		
		Если Действия = "СформироватьУтвердитьПодписатьОтправить" Тогда
			ОпределитьНеОбрабатываемыеОбъекты(НастройкиОбъектов, МассивНеОбрабатываемыхОбъектов);
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапросаСоздатьЭД;
		Измерение = Метаданные.РегистрыСведений.СостоянияЭД.Измерения.Найти("СсылкаНаОбъект");
		ТЗ_Ссылки = Новый ТаблицаЗначений;
		КолонкаТЗ = ТЗ_Ссылки.Колонки.Добавить("ОбъектСсылка", Измерение.Тип);
		Для Каждого Элемент Из МассивСсылокНаОбъект Цикл
			Строка = ТЗ_Ссылки.Добавить();
			Строка.ОбъектСсылка = Элемент;
		КонецЦикла;
		Запрос.УстановитьПараметр("МассивСсылок", ТЗ_Ссылки);
		ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
		
		// Счета фактуры из ТЗ_ЭД переместим в новую таблицу значений, чтобы при формировании с.ф. были ссылки на ЭД документа основания.
		ТЗ_ЭД_СФ = Новый ТаблицаЗначений;
		ТЗ_ЭД_СФ = ТЗ_ЭД.СкопироватьКолонки();
		Счетчик = 0;
		Пока Счетчик < ТЗ_ЭД.Количество() Цикл
			
			СтрокаТЗ = ТЗ_ЭД[Счетчик];
			Если ОбменСКонтрагентамиВнутренний.ДокументЯвляетсяСчетомФактурой(СтрокаТЗ.ВладелецЭД) Тогда
				НоваяСтрока = ТЗ_ЭД_СФ.Добавить();
				НоваяСтрока.ВладелецЭД = СтрокаТЗ.ВладелецЭД;
				
				ТЗ_ЭД.Удалить(СтрокаТЗ);
			Иначе 
				Счетчик = Счетчик +1;
			КонецЕсли;
		КонецЦикла;
		
		МассивНовыхЭД = Новый Массив;
		
		Если ТЗ_ЭД.Количество() > 0 Тогда
			МассивНовыхЭД = СформироватьПрисоединенныеФайлы(ТЗ_ЭД.ВыгрузитьКолонку("ВладелецЭД"),
																						  НастройкиОбъектов,
																						  ДопПараметры);
			КолНовыхЭД = МассивНовыхЭД.Количество();
		КонецЕсли;
		
		// Исключение обработанных счетов-фактур при формировании УПД статус 1 (СЧФДОП).
		МассивОбработанныхСФ = Неопределено;
		Если КолНовыхЭД > 0 И ДопПараметры.Свойство("МассивОбработанныхСФ", МассивОбработанныхСФ)
			И ЗначениеЗаполнено(МассивОбработанныхСФ) Тогда
			Счетчик = ТЗ_ЭД_СФ.Количество() - 1;
			Пока Счетчик > -1 Цикл
				СтрокаТаблицы = ТЗ_ЭД_СФ[Счетчик];
				Если МассивОбработанныхСФ.Найти(СтрокаТаблицы.ВладелецЭД) <> Неопределено Тогда
					ТЗ_ЭД_СФ.Удалить(СтрокаТаблицы);
				КонецЕсли;
				Счетчик = Счетчик -1;
			КонецЦикла;
		КонецЕсли;
		
		// Если с.ф. формировались отдельно, занесем их в общий массив ЭД
		// для дальнейшей обработки.
		Если ТЗ_ЭД_СФ.Количество() > 0 Тогда
			МассивНовыхСФ = СформироватьПрисоединенныеФайлы(ТЗ_ЭД_СФ.ВыгрузитьКолонку("ВладелецЭД"),
																						  НастройкиОбъектов,
																						  ДопПараметры);
			КолНовыхСФ = МассивНовыхСФ.Количество();
			
			КолНовыхЭД = КолНовыхЭД + КолНовыхСФ;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНовыхЭД, МассивНовыхСФ);
		КонецЕсли;
		
		СтруктураВозврата.Вставить("КоличествоНовыхЭД", КолНовыхЭД);
		Если Действия = "Сформировать" 
			Или Действия = "СформироватьПоказать" Тогда
			СтруктураВозврата.Вставить("МассивНовыхЭД", МассивНовыхЭД);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ЭД) <> Тип("Массив")
		И МассивСсылокНаОбъект.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	// Формирование временных таблиц - обрабатываемых ЭД, сформированные ВТ используются далее на всех этапах:
	Если ЗначениеЗаполнено(ЭД) Тогда
		
		ТекстОсновногоЗапроса =
		"ВЫБРАТЬ
		|	ЭД.Ссылка,
		|	ЭД.ВладелецФайла,
		|	ЭД.НаправлениеЭД,
		|	ЭД.ЭлектронныйДокументВладелец,
		|	ЭД.ТипЭлементаВерсииЭД,
		|	ЭД.ПодписанЭП,
		|	ЭД.СтатусЭД
		|ПОМЕСТИТЬ ВТ_ПрисоединенныеФайлы
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭД
		|ГДЕ
		|	ЭД.Ссылка В(&МассивСсылокЭД)";
		
		ТекстОсновногоЗапросаПродолжение = "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящий.ВидЭД КАК ВидЭД,
		|	ВТ_ПрисоединенныеФайлы.ВладелецФайла,
		|	ЭлектронныйДокументИсходящий.Контрагент КАК Контрагент,
		|	ВТ_ПрисоединенныеФайлы.НаправлениеЭД,
		|	ЭлектронныйДокументИсходящий.Организация КАК Организация,
		|	ЭлектронныйДокументИсходящий.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ЭлектронныйДокументИсходящий.НастройкаЭДО КАК СоглашениеЭД,
		|	ВТ_ПрисоединенныеФайлы.ЭлектронныйДокументВладелец,
		|	ВТ_ПрисоединенныеФайлы.ТипЭлементаВерсииЭД,
		|	ВТ_ПрисоединенныеФайлы.ПодписанЭП,
		|	ВТ_ПрисоединенныеФайлы.СтатусЭД,
		|	ВТ_ПрисоединенныеФайлы.Ссылка
		|ПОМЕСТИТЬ ВТ_ЭД
		|ИЗ
		|	ВТ_ПрисоединенныеФайлы КАК ВТ_ПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
		|		ПО ВТ_ПрисоединенныеФайлы.ВладелецФайла = ЭлектронныйДокументИсходящий.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументВходящий.ВидЭД,
		|	ВТ_ПрисоединенныеФайлы.ВладелецФайла,
		|	ЭлектронныйДокументВходящий.Контрагент,
		|	ВТ_ПрисоединенныеФайлы.НаправлениеЭД,
		|	ЭлектронныйДокументВходящий.Организация,
		|	ЭлектронныйДокументВходящий.ПрофильНастроекЭДО,
		|	ЭлектронныйДокументВходящий.НастройкаЭДО,
		|	ВТ_ПрисоединенныеФайлы.ЭлектронныйДокументВладелец,
		|	ВТ_ПрисоединенныеФайлы.ТипЭлементаВерсииЭД,
		|	ВТ_ПрисоединенныеФайлы.ПодписанЭП,
		|	ВТ_ПрисоединенныеФайлы.СтатусЭД,
		|	ВТ_ПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	ВТ_ПрисоединенныеФайлы КАК ВТ_ПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
		|		ПО ВТ_ПрисоединенныеФайлы.ВладелецФайла = ЭлектронныйДокументВходящий.Ссылка";
		Если ТипЗнч(ЭД) <> Тип("Массив") Тогда
			МассивСсылокЭД = Новый Массив;
			МассивСсылокЭД.Добавить(ЭД);
		Иначе
			МассивСсылокЭД = ЭД;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивСсылокЭД", МассивСсылокЭД);
	Иначе

		ТекстОсновногоЗапроса =
		"ВЫБРАТЬ
		|	ЭД.Ссылка,
		|	ЭД.ВладелецФайла,
		|	ЭД.НаправлениеЭД,
		|	ЭД.ЭлектронныйДокументВладелец,
		|	ЭД.ПодписанЭП,
		|	ЭД.ТипЭлементаВерсииЭД,
		|	ЭД.СтатусЭД
		|ПОМЕСТИТЬ ВТ_ЭДВременная
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭД
		|		ПО СостоянияЭД.ЭлектронныйДокумент = ЭД.ВладелецФайла
		|ГДЕ
		|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
		|	И СостоянияЭД.СостояниеВерсииЭД <> ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно)
		|	И ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД)";
		
		// Добавим запрос к самим присоединенным файлам - понадобится для добавления к обработке ЭД,
		// сформированных в процессе утверждения. 
		ТекстОсновногоЗапроса = ТекстОсновногоЗапроса + "
		|;
		|
		|ВЫБРАТЬ
		|	ЭД.Ссылка,
		|	ЭД.ВладелецФайла,
		|	ЭД.НаправлениеЭД,
		|	ЭД.ЭлектронныйДокументВладелец,
		|	ЭД.ТипЭлементаВерсииЭД,
		|	ЭД.ПодписанЭП,
		|	ЭД.СтатусЭД
		|ПОМЕСТИТЬ ВТ_ЭДВременная2
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭД
		|ГДЕ
		|	ЭД.Ссылка В(&МассивСсылокЭД)
		|;
		|
		|ВЫБРАТЬ
		|	ЭД.Ссылка,
		|	ЭД.ВладелецФайла,
		|	ЭД.НаправлениеЭД,
		|	ЭД.ЭлектронныйДокументВладелец,
		|	ЭД.ПодписанЭП,
		|	ЭД.ТипЭлементаВерсииЭД,
		|	ЭД.СтатусЭД
		|ПОМЕСТИТЬ ВТ_ЭДВременнаяИтоговая
		|ИЗ
		|	ВТ_ЭДВременная КАК ЭД
        |
		|ОБЪЕДИНИТЬ
        |
		|	ВЫБРАТЬ
		|	ЭД.Ссылка,
		|	ЭД.ВладелецФайла,
		|	ЭД.НаправлениеЭД,
		|	ЭД.ЭлектронныйДокументВладелец,
		|	ЭД.ПодписанЭП,
		|	ЭД.ТипЭлементаВерсииЭД,
		|	ЭД.СтатусЭД
		|ИЗ
		|	ВТ_ЭДВременная2  КАК ЭД";
		
		ТекстОсновногоЗапросаПродолжение = "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЭДВременная.Ссылка,
		|	ВТ_ЭДВременная.ВладелецФайла,
		|	ВТ_ЭДВременная.НаправлениеЭД,
		|	ВТ_ЭДВременная.ЭлектронныйДокументВладелец,
		|	ВТ_ЭДВременная.ПодписанЭП,
		|	ВТ_ЭДВременная.ТипЭлементаВерсииЭД,
		|	ВТ_ЭДВременная.СтатусЭД,
		|	ЭлектронныйДокументВходящий.НастройкаЭДО КАК СоглашениеЭД,
		|	ЭлектронныйДокументВходящий.ВидЭД,
		|	ЭлектронныйДокументВходящий.ПрофильНастроекЭДО,
		|	ЭлектронныйДокументВходящий.Организация,
		|	ЭлектронныйДокументВходящий.Контрагент
		|ПОМЕСТИТЬ ВТ_ЭД
		|ИЗ
		|	ВТ_ЭДВременнаяИтоговая КАК ВТ_ЭДВременная
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
		|		ПО ВТ_ЭДВременная.ВладелецФайла = ЭлектронныйДокументВходящий.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ЭДВременная.Ссылка,
		|	ВТ_ЭДВременная.ВладелецФайла,
		|	ВТ_ЭДВременная.НаправлениеЭД,
		|	ВТ_ЭДВременная.ЭлектронныйДокументВладелец,
		|	ВТ_ЭДВременная.ПодписанЭП,
		|	ВТ_ЭДВременная.ТипЭлементаВерсииЭД,
		|	ВТ_ЭДВременная.СтатусЭД,
		|	ЭлектронныйДокументИсходящий.НастройкаЭДО,
		|	ЭлектронныйДокументИсходящий.ВидЭД,
		|	ЭлектронныйДокументИсходящий.ПрофильНастроекЭДО,
		|	ЭлектронныйДокументИсходящий.Организация,
		|	ЭлектронныйДокументИсходящий.Контрагент
		|ИЗ
		|	ВТ_ЭДВременнаяИтоговая КАК ВТ_ЭДВременная
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
		|		ПО ВТ_ЭДВременная.ВладелецФайла = ЭлектронныйДокументИсходящий.Ссылка";
		Если МассивНеОбрабатываемыхОбъектов.Количество() > 0 Тогда
			ДопУсловие = " И НЕ(ЭД.Ссылка В (&МассивНеОбрабатываемыхОбъектов))";
			Запрос.УстановитьПараметр("МассивНеОбрабатываемыхОбъектов", МассивНеОбрабатываемыхОбъектов);
			ТекстОсновногоЗапроса = ТекстОсновногоЗапроса + ДопУсловие;
		КонецЕсли;
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылокНаОбъект);
		
		МассивСсылокЭД = Новый Массив;
		Запрос.УстановитьПараметр("МассивСсылокЭД", МассивСсылокЭД);
	КонецЕсли;
		
	ТипыПервичныхЭД = Новый Массив;
	ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
	ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
	ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
	ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
	ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
	ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
	ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
	ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
	ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	Запрос.УстановитьПараметр("ТипыПервичныхЭД", ТипыПервичныхЭД);
	
	// Первичные документы со стороны отправителя пропускают стадию утверждения, 
	// поэтому нужно выполнить недостающие действия при формировании.
	Если ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Сформировать") Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВТ_ЭД.ВладелецФайла КАК ВладелецЭД,
		|	ВТ_ЭД.Ссылка КАК СсылкаНаЭД,
		|	ВТ_ЭД.СтатусЭД,
		|	ВТ_ЭД.ВидЭД,
		|	ВТ_ЭД.НаправлениеЭД,
		|	ВТ_ЭД.ТипЭлементаВерсииЭД,
		|	ВТ_ЭД.СоглашениеЭД КАК СоглашениеЭД
		|ИЗ
		|	ВТ_ЭД КАК ВТ_ЭД
		|ГДЕ
		|	ВТ_ЭД.СтатусЭД = &СтатусСформирован";
		Запрос.УстановитьПараметр("СтатусСформирован", Перечисления.СтатусыЭД.Сформирован);
		Запрос.Текст = ТекстОсновногоЗапроса + ТекстОсновногоЗапросаПродолжение + ";" + ТекстЗапроса;
		ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
		
		ВыполнитьДействияПоСтатусамПриФормированииИлиУтверждении(ТЗ_ЭД);
	КонецЕсли;
	
	
	// Утверждение ЭД:
	
	КолУтвержденныхЭД = 0;
	
	// В этом массиве будут находиться вторичные титулы документов, сформированные после утверждения первичных титулов.
	МассивНовыхЭД = Новый Массив;
	
	Если ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Утвердить") Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВТ_ЭД.ВладелецФайла КАК ВладелецЭД,
		|	ВТ_ЭД.Ссылка КАК СсылкаНаЭД,
		|	ВТ_ЭД.СтатусЭД,
		|	ВТ_ЭД.ВидЭД,
		|	ВТ_ЭД.НаправлениеЭД,
		|	ВТ_ЭД.ТипЭлементаВерсииЭД,
		|	ВТ_ЭД.СоглашениеЭД КАК СоглашениеЭД
		|ИЗ
		|	ВТ_ЭД КАК ВТ_ЭД
		|ГДЕ
		|	ВТ_ЭД.СтатусЭД В(&МассивСтатусов)";
		МассивСтатусов = Новый Массив;
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Получен);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ЧастичноПодписан);
		Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
		Запрос.Текст = ТекстОсновногоЗапроса + ТекстОсновногоЗапросаПродолжение + ";" + ТекстЗапроса;
		ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
		КолУтвержденныхРанее = 0;
		
		УтвержденныеСФ = Новый Массив;
		ВерсииЭДОДляЗакрытия = Новый Массив;
		
		Для Каждого ТекСтрока Из ТЗ_ЭД Цикл
			НовыйЭД = Неопределено;
			СсылкаНаЭД = ТекСтрока.СсылкаНаЭД;
			
			ЭтоСлужебныйДокумент = ЭтоСлужебныйДокумент(СсылкаНаЭД);
			
			Если ТекСтрока.СтатусЭД = Перечисления.СтатусыЭД.Сформирован ИЛИ ТекСтрока.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
				
				СсылкаНаЭД = ТекСтрока.СсылкаНаЭД;
				НачатьТранзакцию();
				Попытка
					ПризнакУстановлен = Ложь;
					УстановитьПризнакУтвержден(СсылкаНаЭД, НовыйЭД, ПризнакУстановлен);
					Если ПризнакУстановлен = Неопределено Тогда
						ВызватьИсключение "";
					КонецЕсли;
					Если ЗначениеЗаполнено(НовыйЭД) Тогда
						МассивНовыхЭД.Добавить(НовыйЭД);
					КонецЕсли;
					Если ПризнакУстановлен Тогда
						ТекСтрока.СтатусЭД = Перечисления.СтатусыЭД.Утвержден;
						КолУтвержденныхЭД = КолУтвержденныхЭД + 1;
					КонецЕсли;
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					Если ЗначениеЗаполнено(ТекстСообщения) Тогда
						Операция = НСтр("ru = 'Утверждение ЭД'");
						ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения);
					КонецЕсли;
				КонецПопытки;
				
			Иначе
				КолУтвержденныхРанее = КолУтвержденныхРанее + 1;
			КонецЕсли;
			
			// В массив новых ЭД добавляем Ответный титул
			Если НЕ ЭтоСлужебныйДокумент Тогда
				Если ЭтоТитулФНС(СсылкаНаЭД.ВладелецФайла) Тогда
					ОтветныйТитул = ВторойТитулДокумента(СсылкаНаЭД);
					Если ЗначениеЗаполнено(ОтветныйТитул)
						И МассивНовыхЭД.Найти(ОтветныйТитул) = Неопределено Тогда
						МассивНовыхЭД.Добавить(ОтветныйТитул);
					КонецЕсли;
				Иначе
					МассивНовыхЭД.Добавить(СсылкаНаЭД);
				КонецЕсли;
			КонецЕсли;
			
			// В массив новых ЭД добавляем служебные ЭД
			Если ЭтоСлужебныйДокумент Тогда
				МассивНовыхЭД.Добавить(СсылкаНаЭД);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(МассивНовыхЭД) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСсылокЭД, МассивНовыхЭД, Истина);
			Запрос.УстановитьПараметр("МассивСсылокЭД", МассивСсылокЭД);
		КонецЕсли;
		
		ВыполнитьДействияПоСтатусамПриФормированииИлиУтверждении(ТЗ_ЭД);
		СтруктураВозврата.Вставить("КоличествоУтвержденныхЭД", КолУтвержденныхЭД);
		
	КонецЕсли;
	
	// Входящие ЭД вида ТОРГ12Продавец и АктИсполнитель - никогда не подписываются и не отправляются,
	// исключим их из последующих выборок:
	ТекстОсновногоЗапроса = СтрЗаменить(ТекстОсновногоЗапроса, "ЭД.Ссылка В(&МассивСсылокЭД)",
	"ЭД.Ссылка В(&МассивСсылокЭД)
	|И (Выбор Когда ЭД.НаправлениеЭД = &НаправлениеВходящий
	|		И Выразить(ЭД.ВладелецФайла КАК Документ.ЭлектронныйДокументВходящий).ВидЭД В (&МассивИсключаемыхВидовЭД) 
	|		И ЭД.ТипЭлементаВерсииЭД = Значение(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД)
	|	Тогда Ложь
	|	Иначе Истина
	|	Конец)");
	МассивИсключаемыхВидовЭД = Новый Массив;
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	Запрос.УстановитьПараметр("НаправлениеВходящий", Перечисления.НаправленияЭД.Входящий);
	Запрос.УстановитьПараметр("МассивИсключаемыхВидовЭД", МассивИсключаемыхВидовЭД);
	
	// Получим из входящих параметров СоотвСертификатовИИхСтруктур.
	СоотвСертификатовИИхСтруктур = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
	СертификатыСПаролями = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ПарольКСертификату(,МассивОтпечатковСертификатов);
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Для Каждого Элемент Из СертификатыСПаролями Цикл
		Структура = Новый Структура("ПарольПользователя, ПарольПолучен, ЗапомнитьПарольКСертификату",
			Элемент.Значение, Истина, Ложь);
		СоотвСертификатовИИхСтруктур.Вставить(Элемент.Ключ, Структура);
	КонецЦикла;
	
	// Это соответствие вернется на сторону клиента и на клиенте будет выполнена попытка получить пароли к сертификатам
	// и подписать массивы ЭД.
	СоотвСертификатовИМассивовЭД = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвСертификатовИМассивовЭД", СоотвСертификатовИМассивовЭД);
	
	СоотвСоглашенийИМассивовЭДКОтправке = Новый Соответствие;
	СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвСоглашенийИМассивовЭДКОтправке", СоотвСоглашенийИМассивовЭДКОтправке);
	СтруктураВозврата.Вставить("СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией",
		СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией);
	
	// Подписание ЭД:
	
	// Каждый подписанный ЭД должен пройти процесс отправки, который состоит из подготовки к отправке (формирование ПЭД)
	// и непосредственно отправки ПЭД (если настроена НемедленнаяОтправка). Подготовка (отправка) подразделяется на
	// отправку не подписываемых ЭД, отправку подписываемых ЭД, отправку с авторизацией (на сервере ОЭДО).
	// В связи с вышеописанным, сформируем для передачи на клиента структуру с массивами ЭД к отправке:
	// Структура в первых 2-х элементах (БезПодписи, СПодписью) содержит массивы ЭД к отправке.
	// В 3-м элементе - соответствие: ключ - соглашение ЭД, значение - массив ЭД, отправляемый в рамках соглашения.
	// 3-й элемент заполняется только если в системе настроена немедленная отправка ЭД.
	СтруктураКОтправке = Новый Структура("БезПодписи, СПодписью", Новый Массив, Новый Массив);
	
	КолПодписанных = 0;
	Если ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Подписать") Тогда
		// Для подписания формируем выборку:
		// В виртуальную таблицу выбираем ЭД, которые НАДО и ЕСТЬ ВОЗМОЖНОСТЬ подписать, т.е. отвечающие следующим условиям:
		// - ЭД входит в список к обработке (либо передан как параметр "ЭД", либо получен из Регистра "СостоянияЭД" отобранного
		//     по массиву владельцев, параметр "МассивСсылокНаОбъект");
		// - статус ЭД либо "Утвержден", либо "Частично подписан";
		// - ЭД НАДО подписывать (определяется по соглашению, указанному в ЭД): либо способ обмена "Через ОЭДО", либо "Это
		//     интеркампани", либо если ЭД - входящий, то в соглашении, на вкладке "Входящие" отмечен для обмена вид ЭД,
		//     совпадающий с видом подписываемого ЭД и отмечена опция "Использовать ЭП", либо если ЭД - исходящий, то в
		//     соглашении, на вкладке "Исходящие" отмечен для обмена вид ЭД, совпадающий с видом подписываемого ЭД и отмечена
		//     опция "Использовать ЭП";
		// - существует сертификат для подписи ЭД:
		//     - Организация в сертификате совпадает с организацией в ЭД;
		//     - в сертификате отмечен вид ЭД, соответствующий виду подписываемого ЭД;
		//     - сертификат действует (не помечен на удаление, не отозван);
		//     - доступен для использования (не ограничен по пользователям, либо текущий пользователь совпадает с указанным в
		//         сертификате, а так же, отпечаток сертификата входит в массив отпечатков полученных из личного хранилища
		//         клиента либо сервера, в зависимости от настроек использования криптографии);
		//     - если способ обмена "Через ОЭДО", то сертификат должен быть зарегистрирован у ОЭДО (добавлен в таб.часть
		//         "СертификатыПодписейОрганизации" соглашения об обмене ЭД);
		//     - сертификат соответствует требованиям к одному из текущих шагов по маршруту подписания документа;
		// - текущий пользователь соответствует требованиям к одному из текущих шагов по маршруту подписания документа.
		//
		// Если все описанные условия выполняются, то ЭД попадает в виртуальную таблицу, туда же помещаются все необходимые для
		// подписания ЭД, данные: сертификат подписи, параметры сертификата, уже установленные в ЭД подписи, соглашение.
		// Затем из временной таблицы делается 3 выборки: ЭД на подпись, сертификаты для подписания ЭД, установленные подписи.
		// Из первой выборки берем подписываемый ЭД, из второй и третьей - выбираем сертификаты по условиям:
		// его отпечатка не должно быть среди уже установленных в ЭД подписей.
		
		
		// Основной запрос - выборка из временных таблиц:
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сертификаты.Ссылка КАК Ссылка,
		|	Сертификаты.Наименование КАК Наименование,
		|	Сертификаты.Организация КАК Организация,
		|	Сертификаты.ДанныеСертификата КАК ДанныеСертификата,
		|	Сертификаты.Отозван КАК Отозван,
		|	Сертификаты.Отпечаток КАК Отпечаток,
		|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя,
		|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
		|	ЛОЖЬ КАК ПарольПолучен,
		|	Сертификаты.Программа КАК Программа
		|ПОМЕСТИТЬ ВТ_ДоступныеСертификаты
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|ГДЕ
		|	НЕ Сертификаты.Отозван
		|	И Сертификаты.Отпечаток В(&МассивОтпечатков)
		|	И НЕ Сертификаты.ПометкаУдаления
		|	И Сертификаты.Пользователь В (&ПустойПользователь, &ТекущийПользователь, &ПользовательНеУказан)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сертификаты.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДоступныеСертификаты.Ссылка КАК СертификатПодписи,
		|	ВТ_ДоступныеСертификаты.Отпечаток КАК Отпечаток,
		|	ВТ_ДоступныеСертификаты.Отозван КАК Отозван,
		|	ВТ_ДоступныеСертификаты.ДанныеСертификата КАК ДанныеСертификата,
		|	ВТ_ДоступныеСертификаты.Организация КАК ОрганизацияВСертификате,
		|	ВТ_ДоступныеСертификаты.Наименование КАК Наименование,
		|	ВТ_ДоступныеСертификаты.Программа КАК Программа,
		|	ВЫБОР
		|		КОГДА ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИОП)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)
		|		ИНАЧЕ ВТ_ЭД.ВидЭД
		|	КОНЕЦ КАК ВидДокумента,
		|	ВТ_ЭД.Ссылка КАК СсылкаНаЭД,
		|	ВТ_ЭД.ВладелецФайла КАК ВладелецФайла,
		|	ВТ_ЭД.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ПрофилиЭДО.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ВЫБОР
		|		КОГДА ВТ_ДоступныеСертификаты.Ссылка ЕСТЬ NULL
		|				ИЛИ ВидыЭДЭП.СертификатЭП ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК СертификатДоступен
		|ПОМЕСТИТЬ ВТ_СертификатыПоЭД
		|ИЗ
		|	ВТ_ЭД КАК ВТ_ЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиЭДОСертификаты
		|		ПО ВТ_ЭД.ПрофильНастроекЭДО = ПрофилиЭДОСертификаты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО КАК ПрофилиЭДО
		|		ПО ВТ_ЭД.ПрофильНастроекЭДО = ПрофилиЭДО.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоступныеСертификаты КАК ВТ_ДоступныеСертификаты
		|		ПО (ВТ_ДоступныеСертификаты.Ссылка = ПрофилиЭДОСертификаты.Сертификат)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
		|		ПО (ВидыЭДЭП.Использовать)
		|			И (ВЫБОР
		|				КОГДА ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИОП)
		|					ТОГДА ВидыЭДЭП.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)
		|				ИНАЧЕ ВТ_ЭД.ВидЭД = ВидыЭДЭП.ВидЭД
		|			КОНЕЦ)
		|			И (ВидыЭДЭП.СертификатЭП = ПрофилиЭДОСертификаты.Сертификат)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеПодписанияЭД КАК СостояниеПодписанияЭД
		|		ПО ВТ_ЭД.Ссылка = СостояниеПодписанияЭД.Объект
		|			И (СостояниеПодписанияЭД.Текущий)
		|			И (СостояниеПодписанияЭД.Подписант В (&ТекущийПользователь, &ПустойПользователь))
		|			И (СостояниеПодписанияЭД.Сертификат = ВТ_ДоступныеСертификаты.Ссылка
		|				ИЛИ СостояниеПодписанияЭД.Сертификат = ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ДоступныеСертификаты.Ссылка,
		|	ВТ_ДоступныеСертификаты.Отпечаток,
		|	ВТ_ДоступныеСертификаты.Отозван,
		|	ВТ_ДоступныеСертификаты.ДанныеСертификата,
		|	ВТ_ДоступныеСертификаты.Организация,
		|	ВТ_ДоступныеСертификаты.Наименование,
		|	ВТ_ДоступныеСертификаты.Программа,
		|	ВЫБОР
		|		КОГДА ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИОП)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)
		|		ИНАЧЕ ВТ_ЭД.ВидЭД
		|	КОНЕЦ,
		|	ВТ_ЭД.Ссылка,
		|	ВТ_ЭД.ВладелецФайла,
		|	NULL,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ПустаяСсылка),
		|	ИСТИНА
		|ИЗ
		|	ВТ_ЭД КАК ВТ_ЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДоступныеСертификаты КАК ВТ_ДоступныеСертификаты
		|		ПО (ВТ_ЭД.СоглашениеЭД.ЭтоИнтеркампани)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
		|		ПО (ВидыЭДЭП.Использовать)
		|			И ВТ_ЭД.ВидЭД = ВидыЭДЭП.ВидЭД
		|			И (ВидыЭДЭП.СертификатЭП = ВТ_ДоступныеСертификаты.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеПодписанияЭД КАК СостояниеПодписанияЭД
		|		ПО ВТ_ЭД.Ссылка = СостояниеПодписанияЭД.Объект
		|			И (СостояниеПодписанияЭД.Текущий)
		|			И (СостояниеПодписанияЭД.Подписант В (&ТекущийПользователь, &ПустойПользователь))
		|			И (СостояниеПодписанияЭД.Сертификат = ВТ_ДоступныеСертификаты.Ссылка
		|				ИЛИ СостояниеПодписанияЭД.Сертификат = ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
		|					И (СостояниеПодписанияЭД.Организация = ВТ_ДоступныеСертификаты.Организация
		|						ИЛИ СостояниеПодписанияЭД.Организация = &ПустаяОрганизация))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ДоступныеСертификаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СертификатыПоЭД.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ВТ_СертификатыПоЭД.ВладелецФайла КАК ВладелецФайла
		|ИЗ
		|	ВТ_СертификатыПоЭД КАК ВТ_СертификатыПоЭД
		|ГДЕ
		|	(ВТ_СертификатыПоЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
		|			ИЛИ ВТ_СертификатыПоЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском))
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_СертификатыПоЭД.ПрофильНастроекЭДО,
		|	ВТ_СертификатыПоЭД.ВладелецФайла
		|
		|ИМЕЮЩИЕ
		|	НЕ МАКСИМУМ(ВТ_СертификатыПоЭД.СертификатДоступен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СертификатыПоЭД.СертификатПодписи КАК СертификатПодписи,
		|	ВТ_СертификатыПоЭД.Отпечаток КАК Отпечаток,
		|	ВТ_СертификатыПоЭД.Отозван КАК Отозван,
		|	ВТ_СертификатыПоЭД.ДанныеСертификата КАК ДанныеСертификата,
		|	ВТ_СертификатыПоЭД.ОрганизацияВСертификате КАК ОрганизацияВСертификате,
		|	ВТ_СертификатыПоЭД.ВидДокумента КАК ВидДокумента,
		|	ВТ_СертификатыПоЭД.Наименование КАК Наименование,
		|	ВТ_СертификатыПоЭД.СсылкаНаЭД КАК СсылкаНаЭД,
		|	ВТ_СертификатыПоЭД.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ВТ_СертификатыПоЭД.Программа КАК Программа
		|ПОМЕСТИТЬ ВТ_Сертификаты
		|ИЗ
		|	ВТ_СертификатыПоЭД КАК ВТ_СертификатыПоЭД
		|ГДЕ
		|	ВТ_СертификатыПоЭД.СертификатДоступен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВТ_СертификатыПоЭД.СсылкаНаЭД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_СертификатыПоЭД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭД_ЭП.Отпечаток КАК УстановленныеПодписи,
		|	ВТ_ЭД.Ссылка КАК СсылкаНаЭД,
		|	СоглашенияЭД.Ссылка КАК СоглашениеЭД,
		|	ВТ_ЭД.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ВТ_Сертификаты.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ВТ_Сертификаты.СертификатПодписи КАК СертификатПодписи,
		|	ВТ_Сертификаты.Отпечаток КАК Отпечаток,
		|	ВТ_Сертификаты.Отозван КАК Отозван,
		|	ВТ_Сертификаты.Программа КАК Программа,
		|	ВТ_ЭД.Организация КАК Организация,
		|	ВТ_ЭД.Контрагент КАК Контрагент,
		|	ВТ_Сертификаты.ОрганизацияВСертификате КАК ОрганизацияВСертификате,
		|	СоглашенияЭД.ЭтоИнтеркампани КАК ЭтоИнтеркампани,
		|	ВЫБОР
		|		КОГДА ВТ_Сертификаты.СпособОбменаЭД В (&СпособыОбменаСАвторизацией)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяАвторизация,
		|	ВЫБОР
		|		КОГДА ВТ_ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЕСТЬNULL(ВТ_ЭД.ЭлектронныйДокументВладелец.ПодписанЭП, ЛОЖЬ)
		|	КОНЕЦ КАК ЭДВладелецПодписан,
		|	ВТ_Сертификаты.Наименование КАК НаименованиеСертификата,
		|	ВТ_ЭД.ВидЭД КАК ВидЭД,
		|	ВТ_Сертификаты.ДанныеСертификата КАК ДанныеСертификата
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	ВТ_Сертификаты КАК ВТ_Сертификаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЭД КАК ВТ_ЭД
		|		ПО ВТ_Сертификаты.СсылкаНаЭД = ВТ_ЭД.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияЭД
		|		ПО (ВТ_ЭД.СоглашениеЭД = СоглашенияЭД.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияЭДИсходящие
		|		ПО (ВТ_ЭД.СоглашениеЭД = СоглашенияЭДИсходящие.Ссылка)
		|			И (ВТ_ЭД.ВидЭД = СоглашенияЭДИсходящие.ИсходящийДокумент)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭД_ЭП
		|		ПО (ВТ_ЭД.Ссылка = ЭД_ЭП.ПодписанныйОбъект)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА СоглашенияЭД.ЭтоИнтеркампани
		|				ТОГДА ИСТИНА
		|			КОГДА ВТ_ЭД.НаправлениеЭД = &НаправлениеВходящий
		|				ТОГДА ВТ_ЭД.ПодписанЭП
		|			КОГДА ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
		|					И ВТ_ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД)
		|				ТОГДА СоглашенияЭДИсходящие.ИспользоватьЭП
		|						И &ИспользоватьЭП
		|			КОГДА НЕ ВТ_ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД)
		|				ТОГДА ВЫБОР
		|						КОГДА ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИОП)
		|							ТОГДА ВТ_Сертификаты.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)
		|						ИНАЧЕ ВТ_ЭД.ВидЭД = ВТ_Сертификаты.ВидДокумента
		|					КОНЕЦ
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	И НЕ СоглашенияЭД.ПометкаУдаления
		|	И (СоглашенияЭД.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|			ИЛИ СоглашенияЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует))
		|	И ВТ_ЭД.СтатусЭД В(&МассивСтатусов)
		|	И ВЫБОР
		|			КОГДА ВТ_ЭД.НаправлениеЭД = &НаправлениеВходящий
		|					И (ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ)
		|						ИЛИ ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД)
		|						ИЛИ ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД))
		|					И ВТ_ЭД.ВидЭД В (&ВидыЭДСчетаФактуры)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ.СсылкаНаЭД КАК СсылкаНаЭД,
		|	ВТ.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ВТ.Организация КАК Организация,
		|	ВТ.Контрагент КАК Контрагент,
		|	ВТ.ЭтоИнтеркампани КАК ЭтоИнтеркампани,
		|	ВТ.ТребуетсяАвторизация КАК ТребуетсяАвторизация,
		|	ВТ.СоглашениеЭД КАК СоглашениеЭД,
		|	ВТ.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ВТ.ЭДВладелецПодписан КАК ЭДВладелецПодписан,
		|	ВТ.ВидЭД КАК ВидЭД
		|ИЗ
		|	ВТ КАК ВТ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.СсылкаНаЭД КАК СсылкаНаЭД,
		|	ВТ.СертификатПодписи КАК СертификатПодписи,
		|	ВТ.Отпечаток КАК Отпечаток,
		|	ВТ.Отозван КАК Отозван,
		|	ВТ.ОрганизацияВСертификате КАК Организация,
		|	ВТ.ДанныеСертификата КАК ДанныеСертификата,
		|	ВТ.НаименованиеСертификата КАК НаименованиеСертификата,
		|	ВТ.ВидЭД КАК ВидЭД,
		|	ЛОЖЬ КАК ПарольПолучен,
		|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя,
		|	ВТ.Программа КАК Программа
		|ИЗ
		|	ВТ КАК ВТ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НаименованиеСертификата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.СсылкаНаЭД КАК СсылкаНаЭД,
		|	ВТ.УстановленныеПодписи КАК УстановленныеПодписи,
		|	Сертификаты.Организация КАК Организация
		|ИЗ
		|	ВТ КАК ВТ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|		ПО ВТ.УстановленныеПодписи = Сертификаты.Отпечаток
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ";
		
		МассивСтатусов = Новый Массив;
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ЧастичноПодписан);
		ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
		Запрос.УстановитьПараметр("МассивСтатусов",			МассивСтатусов);
		Запрос.УстановитьПараметр("НаправлениеИсходящий",	Перечисления.НаправленияЭД.Исходящий);
		Запрос.УстановитьПараметр("МассивОтпечатков",		МассивОтпечатков);
		Запрос.УстановитьПараметр("ТекущийПользователь",	Пользователи.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("ПустойПользователь",		Справочники.Пользователи.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустаяОрганизация",		Метаданные.ОпределяемыеТипы.Организация.Тип.ПривестиЗначение());
		Запрос.УстановитьПараметр("ПользовательНеУказан",	Пользователи.СсылкаНеуказанногоПользователя());
		Запрос.УстановитьПараметр("ИспользоватьЭП",			ИспользоватьЭП);
		МассивВидовЭД = Новый Массив;
		МассивВидовЭД.Добавить(Перечисления.ВидыЭД.СчетФактура);
		МассивВидовЭД.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
		Запрос.УстановитьПараметр("ВидыЭДСчетаФактуры", МассивВидовЭД);
		ОбменСАвторизацией = Новый Массив;
		ОбменСАвторизацией.Добавить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
		ОбменСАвторизацией.Добавить(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
		Запрос.УстановитьПараметр("СпособыОбменаСАвторизацией", ОбменСАвторизацией);
		Запрос.Текст = ТекстОсновногоЗапроса + ТекстОсновногоЗапросаПродолжение
			+ ";
			|////////////////
			|" + ТекстЗапроса;
		
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.ВыполнитьПакет();
		КоличествоЭлементовПакета = Результат.Количество();
		УстановитьПривилегированныйРежим(Ложь);
		
		ПрофилиЭДОБезСертификатов = Результат[КоличествоЭлементовПакета - 8];
		ДоступныеСертификаты = Результат[КоличествоЭлементовПакета - 7].Выгрузить();
		ТЗ_Сертификатов = Результат[КоличествоЭлементовПакета - 3].Выгрузить();
		ТЗ_УстановленныхПодписей = Результат[КоличествоЭлементовПакета - 2].Выгрузить();
		Выборка = Результат[КоличествоЭлементовПакета - 4].Выбрать();
		
		ТЗ_ЭД = Новый ТаблицаЗначений;
		ТЗ_ЭД.Колонки.Добавить("СсылкаНаЭД");
		ТЗ_ЭД.Колонки.Добавить("ПрофильНастроекЭДО");
		ТЗ_ЭД.Колонки.Добавить("СертификатыПодписи");
		ТЗ_ЭД.Колонки.Добавить("ТребуетсяАвторизация");
		
		Если НЕ ПрофилиЭДОБезСертификатов.Пустой() Тогда
			АдресХранилища = ПоместитьВоВременноеХранилище(ПрофилиЭДОБезСертификатов.Выгрузить(),
				Новый УникальныйИдентификатор);
			СтруктураВозврата.Вставить("ПрофилиЭДОБезСертификатов", АдресХранилища);
		КонецЕсли;
		
		Если ТЗ_Сертификатов.Количество() = 0 Тогда
			ОшибкаНастройкиКриптографии = Ложь;
			Если ДоступныеСертификаты[0].Количество = 0 И Выборка.Количество() > 0 Тогда
				ТекстСообщения = НСтр("ru = 'В процессе подписания электронного документа не найден ни один из доступных сертификатов ЭП.
											|Проверьте настройки сертификатов в профилях ЭДО.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ИначеЕсли ДопПараметры.Свойство("ОшибкаНастройкиКриптографии", ОшибкаНастройкиКриптографии)
				И ОшибкаНастройкиКриптографии Тогда
				ТекстСообщения = НСтр("ru = 'Ошибка подписания электронного документа.
											|Проверьте настройки криптографии.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ЭлектроннаяПодписьВМоделиСервиса") Тогда
			МодульЭлектроннаяПодписьВМоделиСервисаКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьВМоделиСервисаКлиентСервер");
			Если МодульЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ИспользованиеВозможно()
				И НЕ ИспользованиеСертификатовОблачногоСервисаВозможно() Тогда
				МассивУдаления = Новый Массив;
				ЛокальныеСертификаты = Новый Массив;
				ОблачныеСертификаты  = Новый Соответствие;
				Для Каждого СтрокаСертификат Из ТЗ_Сертификатов Цикл
					Если ОблачныеСертификаты.Получить(СтрокаСертификат.СертификатПодписи) <> Неопределено Тогда
						МассивУдаления.Добавить(СтрокаСертификат);
					ИначеЕсли ЛокальныеСертификаты.Найти(СтрокаСертификат.СертификатПодписи) <> Неопределено Тогда
						Продолжить;
					ИначеЕсли ЭтоСертификатОблачногоСервиса(СтрокаСертификат.СертификатПодписи) Тогда
						МассивУдаления.Добавить(СтрокаСертификат);
						ОблачныеСертификаты.Вставить(СтрокаСертификат.СертификатПодписи, СтрокаСертификат.НаименованиеСертификата);
					Иначе
						ЛокальныеСертификаты.Добавить(СтрокаСертификат.СертификатПодписи);
					КонецЕсли;
				КонецЦикла;
				Для Каждого СтрокаДляУдаления Из МассивУдаления Цикл
					ТЗ_Сертификатов.Удалить(СтрокаДляУдаления);
				КонецЦикла;
				Если ТЗ_Сертификатов.Количество() = 0 Тогда
					Для Каждого ОблачныйСертификат Из ОблачныеСертификаты Цикл 
						ПодробныйТекст = НСтр("ru = 'Сертификат ""%1"" связан с недопустимым средством ""облачной"" электронной подписи.
							|Согласно приказу Минфина РФ от 10.11.2015 № 174Н электронные документы должны быть подписаны
							|усиленной квалифицированной электронной подписью с использованием средств электронной подписи,
							|имеющих подтверждение (сертификат) соответствия требованиям, установленным в соответствии с Федеральным законом от 06.04.2011 N 63-ФЗ.'");
						ПодробныйТекст = СтрШаблон(ПодробныйТекст, ОблачныйСертификат.Значение);
						
						ТекстСообщения = НСтр("ru = 'Сертификат ""%1"" связан с недопустимым средством ""облачной"" электронной подписи.'");
						ТекстСообщения = СтрШаблон(ТекстСообщения, ОблачныйСертификат.Значение);
						
						ВидОперации = НСтр("ru = 'Подписание электронного документа'");
						ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
							ВидОперации, ПодробныйТекст, ТекстСообщения, , ОблачныйСертификат.Ключ);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Для связки ЭД, Соглашения и Сертификата, в числе прочих нужно соответствие,
		// ключом которого является ссылка на ЭД, значение - Соглашение об обмене.
		// Например, 2 ЭД могут быть подписаны 2-я сертификатами (т.е пользователь должен выбрать,
		// каким сертификатом он будет подписывать эти ЭД), при этом ЭД относятся к разным соглашениям
		// (например один - прямой обмен, другой - через оператора), если пользователь отказался подписывать
		// эти ЭД, то тот ЭД, который относится к соглашению через оператора, надо удалить из массива на отправку,
		// для этого найдем его соглашение в соответствии (ЭД - Соглашения), по соглашению найдем этот ЭД в
		// соответствии Соглашения - Массивы ЭД к отправке и удалим из массива нужный ЭД.
		СоотвЭДИСоглашений = Новый Соответствие;
		
		// Ключ - Строка (сумма УИД сертификатов: Строка(Сертификат1.УникальныйИдентификатор())
		// + Строка(Сертификат2.УникальныйИдентификатор()) + ...), Значение - Структура массивов (МассивСертификатов
		// и МассивЭД).
		// Смысл данной структуры в том, что для подписания разных ЭД возможно будет доступен одинаковый
		// набор сертификатов. Например: накладная может быть подписана сертификатами Сертификат1 и Сертификат2,
		// счет-фактура так же может быть подписана сертификатами Сертификат1 и Сертификат2, при этом накладная сформировано
		// по соглашению1 (прямой обмен), а СФ - по соглашению2 (через ОЭДО). Не правильно 2 раза спрашивать
		// пользователя, каким из 2-х сертификатов он хочет подписывать документы, поэтому, надо для этой пары
		// сертификатов сформировать массив ЭД, для подписания которых доступна именно эта пара сертификатов.
		// Чтобы сделать запись в структуре уникальной и иметь возможность искать нужную запись по ключу,
		// ключ сделан составным (в результатах запроса сертификаты упорядочены по наименованию).
		СтруктураСтруктурМассивовЭДИСертификатов = Новый Структура;
		
		// В данном соответствии будем хранить ключевые имена ошибок, возникших в процессе подписания документа:
		//   Ключ - Справочник.ЭДПрисоединенныеФайлы - ссылка на подписываемый электронный документ;
		//   Значение - Строка - ключевое имя ошибки.
		СоотвСообщенийОбменаИОшибокПодписи = Новый Соответствие;
		
		// Если в системе настроена немедленная отправка и есть действие "Отправить", то из подписываемых ЭД
		// надо выделить те, которые для отправки требуют авторизации (обмен через ОЭДО) и будут подписываться на клиенте.
		// Для этого ТЗ_ЭД обработаем в 2 прохода (1- ЭД требующие авторизации, 2- не требующие).
		ВыделятьЭДКОтправкеСАвторизацией = (ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Отправить")
											И НемедленнаяОтправкаЭД);
		
		МассивЭД = Новый Массив;
		Если Выборка.Количество() > 0 Тогда
			Пока Выборка.Следующий() Цикл
				СсылкаНаЭД = Выборка.СсылкаНаЭД;
				Отбор = Новый Структура("СсылкаНаЭД", СсылкаНаЭД);
				КопияТЗ = ТЗ_Сертификатов.Скопировать(Отбор);
				МассивОтпечатковИсключения = Новый Массив;
				МассивСертификатов = Новый Массив;
				Если Выборка.ЭтоИнтеркампани Тогда
					ТЗ_Отпечатков = ТЗ_УстановленныхПодписей.Скопировать(Отбор);
					Если ТЗ_Отпечатков.Количество() = 0 Тогда
						Если КопияТЗ.Количество() > 0 Тогда
							Для Каждого СтрокаСертификата Из КопияТЗ Цикл
								СтруктураСертификата = Новый Структура("СертификатПодписи, ПарольПолучен, ПарольПользователя, Отпечаток,
									|Отозван, ДанныеСертификата, ЗапомнитьПарольКСертификату, Программа");
								ЗаполнитьЗначенияСвойств(СтруктураСертификата, СтрокаСертификата);
								МассивСертификатов.Добавить(СтрокаСертификата.СертификатПодписи);
								ПараметрыВСоотв = СоотвСертификатовИИхСтруктур.Получить(СтрокаСертификата.СертификатПодписи);
								Если ПараметрыВСоотв <> Неопределено И ПараметрыВСоотв.ПарольПолучен Тогда
									ЗаполнитьЗначенияСвойств(СтруктураСертификата, ПараметрыВСоотв, "ПарольПолучен, ПарольПользователя");
								КонецЕсли;
								СоотвСертификатовИИхСтруктур.Вставить(СтрокаСертификата.СертификатПодписи, СтруктураСертификата);
							КонецЦикла;
							НоваяСтрока = ТЗ_ЭД.Добавить();
							НоваяСтрока.СсылкаНаЭД = СсылкаНаЭД;
							НоваяСтрока.ПрофильНастроекЭДО = Выборка.ПрофильНастроекЭДО;
							НоваяСтрока.СертификатыПодписи = МассивСертификатов;
							НоваяСтрока.ТребуетсяАвторизация = Выборка.ТребуетсяАвторизация;
							Организация2Стороны = ?(СтрокаСертификата.Организация = Выборка.Организация, Выборка.Контрагент, Выборка.Организация);
							Отбор.Вставить("Организация", Организация2Стороны);
							КопияТЗ = КопияТЗ.Скопировать(Отбор);
						КонецЕсли;
					Иначе
						МассивОтпечатковИсключения = ТЗ_Отпечатков.ВыгрузитьКолонку("УстановленныеПодписи");
						ТЗ_Отпечатков.Свернуть("Организация");
						СтрокаОтпечатка = ТЗ_Отпечатков[0];
						Если ЗначениеЗаполнено(СтрокаОтпечатка.Организация) Тогда
							Организация2Стороны = ?(СтрокаОтпечатка.Организация = Выборка.Организация, Выборка.Контрагент, Выборка.Организация);
							Отбор.Вставить("Организация", Организация2Стороны);
							КопияТЗ = КопияТЗ.Скопировать(Отбор);
						КонецЕсли;
					КонецЕсли;
				Иначе 
					ТЗ_Отпечатков = ТЗ_УстановленныхПодписей.Скопировать(Отбор);
					Если ТЗ_Отпечатков.Количество() > 0 Тогда
						МассивОтпечатковИсключения = ТЗ_Отпечатков.ВыгрузитьКолонку("УстановленныеПодписи");
					КонецЕсли;
				КонецЕсли;
				ЭтоСлужебный = ЭтоСлужебныйДокумент(СсылкаНаЭД);
				ИДМассиваЭД = "й";
				ПарольПолучен = Ложь;
				ПодозрениеНаОшибкиМаршрутаПодписания = Ложь;
				Для Каждого СтрокаСертификата Из КопияТЗ Цикл
					Если МассивОтпечатковИсключения.Найти(СтрокаСертификата.Отпечаток) <> Неопределено
						Или МассивСертификатов.Найти(СтрокаСертификата.СертификатПодписи) <> Неопределено Тогда
						Если МассивОтпечатковИсключения.Найти(СтрокаСертификата.Отпечаток) <> Неопределено Тогда
							ПодозрениеНаОшибкиМаршрутаПодписания = Истина;
						КонецЕсли;
						
						Продолжить;
					КонецЕсли;
					МассивСертификатов.Добавить(СтрокаСертификата.СертификатПодписи);
					ИДМассиваЭД = ИДМассиваЭД + Строка(СтрокаСертификата.СертификатПодписи.УникальныйИдентификатор());
					
					СтруктураСертификата = Новый Структура("СертификатПодписи, ПарольПолучен, ПарольПользователя,
						|Отпечаток, Отозван, ДанныеСертификата, ЗапомнитьПарольКСертификату, Программа");
					ЗаполнитьЗначенияСвойств(СтруктураСертификата, СтрокаСертификата);
					ПараметрыВСоотв = СоотвСертификатовИИхСтруктур.Получить(СтрокаСертификата.СертификатПодписи);
					Если ПараметрыВСоотв <> Неопределено И ПараметрыВСоотв.ПарольПолучен Тогда
						ПарольПолучен = Истина;
						ЗаполнитьЗначенияСвойств(СтруктураСертификата, ПараметрыВСоотв, "ПарольПолучен, ПарольПользователя");
					КонецЕсли;
					СоотвСертификатовИИхСтруктур.Вставить(СтрокаСертификата.СертификатПодписи, СтруктураСертификата);
					// Если обрабатывается служебный документ, то его можно подписать любым сертификатом,
					// в котором сохранен пароль.
					Если ЭтоСлужебный И ПарольПолучен Тогда
						МассивСертификатов = Новый Массив;
						МассивСертификатов.Добавить(СтрокаСертификата.СертификатПодписи);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если МассивСертификатов.Количество() > 0 Тогда
					Подписан = 0;
					
					Если НЕ Выборка.ЭДВладелецПодписан Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПарольПолучен И ВыполнятьКриптооперацииНаСервере Тогда
						Подписан = ПодписатьЭДОпределеннымСертификатом(СсылкаНаЭД, МассивСертификатов[0], СтруктураСертификата);
						Если Подписан > 0 Тогда
							КолПодписанных = КолПодписанных + Подписан;
							// Если ЭД подписаны, то для определения сертификата авторизации и последующей отправки,
							// они будут получены запросом, на следующем этапе (Отправка ЭД).
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					НоваяСтрока = ТЗ_ЭД.Добавить();
					НоваяСтрока.СсылкаНаЭД = СсылкаНаЭД;
					НоваяСтрока.ПрофильНастроекЭДО = Выборка.ПрофильНастроекЭДО;
					НоваяСтрока.СертификатыПодписи = МассивСертификатов;
					НоваяСтрока.ТребуетсяАвторизация = Выборка.ТребуетсяАвторизация;
					
					СоотвЭДИСоглашений.Вставить(СсылкаНаЭД, Выборка.ПрофильНастроекЭДО);
					СтруктураМассивов = "";
					ИДМассиваЭД = СтрЗаменить(ИДМассиваЭД, "-", "_");
					Если НЕ СтруктураСтруктурМассивовЭДИСертификатов.Свойство(ИДМассиваЭД, СтруктураМассивов)
						Или ТипЗнч(СтруктураМассивов) <> Тип("Структура") Тогда
						СтруктураСтруктурМассивовЭДИСертификатов.Вставить(ИДМассиваЭД,
							Новый Структура("МассивСертификатов", МассивСертификатов));
						СтруктураМассивов = СтруктураСтруктурМассивовЭДИСертификатов[ИДМассиваЭД];
					КонецЕсли;
					
					СоответствиеЭДИДД = Неопределено;
					Если НЕ СтруктураМассивов.Свойство("СоответствиеЭДИДД", СоответствиеЭДИДД)
						Или ТипЗнч(СоответствиеЭДИДД) <> Тип("Соответствие") Тогда
						СтруктураМассивов.Вставить("СоответствиеЭДИДД", Новый Соответствие);
						СоответствиеЭДИДД = СтруктураМассивов.СоответствиеЭДИДД;
					КонецЕсли;
					Если МассивСертификатов.Количество() = 1 Тогда
						Значение = ПоместитьВоВременноеХранилище(ПолучитьДвоичныеДанныеФайла(СсылкаНаЭД, МассивСертификатов[0]),
							СсылкаНаЭД.УникальныйИдентификатор());
					Иначе
						Значение = Неопределено;
					КонецЕсли;
					СоответствиеЭДИДД.Вставить(СсылкаНаЭД, Значение);
					
					Если ВыделятьЭДКОтправкеСАвторизацией И Выборка.ТребуетсяАвторизация Тогда
						// Подписание массива ЭД по текущему сертификату будет выполняться на клиенте, поэтому, после подписания
						// надо будет попытаться их отправить, предварительно получив сертификат аутентификации по настройке ЭДО.
						МассивЭД = СоотвСоглашенийИМассивовЭДКОтправке.Получить(Выборка.ПрофильНастроекЭДО);
						Если МассивЭД = Неопределено Тогда
							МассивЭД = Новый Массив;
						КонецЕсли;
						Если МассивЭД.Найти(СсылкаНаЭД) = Неопределено Тогда
							МассивЭД.Добавить(СсылкаНаЭД);
						КонецЕсли;
						СоотвСоглашенийИМассивовЭДКОтправке.Вставить(Выборка.ПрофильНастроекЭДО, МассивЭД);
					Иначе
						// Подписание массива ЭД по текущему сертификату будет выполняться на клиенте, поэтому, после подписания
						// надо будет подготовить их к отправке и при необходимости отправить.
						Для Каждого Элемент Из СоответствиеЭДИДД Цикл
							Если СтруктураКОтправке.СПодписью.Найти(Элемент.Ключ) = Неопределено Тогда
								СтруктураКОтправке.СПодписью.Добавить(Элемент.Ключ);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				Иначе 
					Если ПодозрениеНаОшибкиМаршрутаПодписания Тогда
						СоотвСообщенийОбменаИОшибокПодписи.Вставить(СсылкаНаЭД, "ОшибкиВМаршруте");
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если КолПодписанных > 0 Тогда
			СтруктураВозврата.Вставить("КолПодписанных", КолПодписанных);
		КонецЕсли;
		
		Если СоотвСообщенийОбменаИОшибокПодписи.Количество() > 0 Тогда
			СтруктураВозврата.Вставить("СоотвСообщенийОбменаИОшибокПодписи", СоотвСообщенийОбменаИОшибокПодписи);
		КонецЕсли;
		
		Если СоотвЭДИСоглашений.Количество() > 0 Тогда
			СтруктураВозврата.Вставить("СоотвЭДИСоглашений", СоотвЭДИСоглашений);
		КонецЕсли;
		Если СтруктураСтруктурМассивовЭДИСертификатов.Количество() > 0 Тогда
			СтруктураВозврата.Вставить("СтруктураСтруктурМассивовЭДИСертификатов", СтруктураСтруктурМассивовЭДИСертификатов);
		КонецЕсли;
	КонецЕсли;
	
	// Отправка ЭД:
	СоотвСоглашенийИСертификатовАвторизации = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвСоглашенийИСертификатовАвторизации", СоотвСоглашенийИСертификатовАвторизации);
	
	Отправлено = 0;
	Подготовлено = 0;
	Если ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Отправить") Тогда
		
		СтМассивовСтруктурСертификатов = Новый Структура("МассивОтпечатковКлиент", МассивОтпечатковКлиент);
		// Обработаем массивы ЭД (сформированные на этапе подписания ЭД), которые будут подписаны позже
		// и для отправки которых нужны сертификаты авторизации:
		Если СоотвСоглашенийИМассивовЭДКОтправке.Количество() > 0 Тогда
			МассивПрофилейНастроекЭДО = Новый Массив;
			Для Каждого Элемент Из СоотвСоглашенийИМассивовЭДКОтправке Цикл
				МассивПрофилейНастроекЭДО.Добавить(Элемент.Ключ);
			КонецЦикла;
			СоотвСоглашенийИСоответствийСертификатовИПараметров = СоотвСоглашенийИСоответствийСертификатовИПараметровДляАвторизацииСервер(
				МассивПрофилейНастроекЭДО,
				СтМассивовСтруктурСертификатов,
				СоотвСертификатовИПаролей);
			// Если есть сертификат авторизации, то попытаемся, после подписания массива ЭД на клиенте,
			// сразу же отправить ЭД, иначе, после подписания, ЭД упакуем в ПЭД и поместим в очередь на отправку.
			Для Каждого Элемент Из СоотвСоглашенийИМассивовЭДКОтправке Цикл
				ПрофильНастроекЭДО = Элемент.Ключ;
				РеквизитыПрофиляНастроекЭДО = РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО);
				
				СоотвСертификатовИПараметров = СоотвСоглашенийИСоответствийСертификатовИПараметров.Получить(ПрофильНастроекЭДО);
				Если Не ЗначениеЗаполнено(СоотвСертификатовИПараметров) Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого КлючИЗначение Из СоотвСертификатовИПараметров Цикл
					Сертификат           = КлючИЗначение.Ключ;
					СтруктураСертификата = КлючИЗначение.Значение;
					
					МаркерРасшифрованный = Неопределено;
					МаркерЗашифрованный = Неопределено;
					Если ТипЗнч(СтруктураСертификата) = Тип("Структура")
						И (СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
							Или СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный))
						И (ЗначениеЗаполнено(МаркерРасшифрованный) 
							Или ЗначениеЗаполнено(МаркерЗашифрованный)) Тогда
						
						СоотвСертификатовИИхСтруктур.Вставить(Строка(Сертификат.УникальныйИдентификатор()) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации,
							СтруктураСертификата);
							
						МассивСертификатов = СоотвСоглашенийИСертификатовАвторизации.Получить(ПрофильНастроекЭДО);
						Если МассивСертификатов = Неопределено Тогда
							МассивСертификатов = Новый Массив;
							СоотвСоглашенийИСертификатовАвторизации.Вставить(ПрофильНастроекЭДО, МассивСертификатов);
						КонецЕсли;
						МассивСертификатов.Добавить(Сертификат);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		СтруктураВозврата.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
		
		ТекстЗапроса =
				"ВЫБРАТЬ
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП КАК ИспользоватьЭП,
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД КАК СпособОбменаЭД,
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент КАК ИсходящийДокумент,
				|	ВТ_ЭД.Ссылка КАК ЭД,
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК СоглашениеЭД
				|ПОМЕСТИТЬ ВТ_НастройкиОбмена
				|ИЗ
				|	ВТ_ЭД КАК ВТ_ЭД
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
				|		ПО ВТ_ЭД.СоглашениеЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
				|			И ВТ_ЭД.ВидЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент
				|			И (ВТ_ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД))
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП,
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД,
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент,
				|	ВТ_ЭД.Ссылка,
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
				|ИЗ
				|	ВТ_ЭД КАК ВТ_ЭД
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
				|		ПО ВТ_ЭД.СоглашениеЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
				|			И ВТ_ЭД.ВидЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент
				|			И (НЕ ВТ_ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД))
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП,
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД,
				|	ВТ_ЭД.ВидЭД,
				|	ВТ_ЭД.Ссылка,
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
				|ИЗ
				|	ВТ_ЭД КАК ВТ_ЭД
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
				|		ПО ВТ_ЭД.СоглашениеЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
				|			И (ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктЗаказчик))
				|			И (СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктИсполнитель))
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП,
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД,
				|	ВТ_ЭД.ВидЭД,
				|	ВТ_ЭД.Ссылка,
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
				|ИЗ
				|	ВТ_ЭД КАК ВТ_ЭД
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
				|		ПО ВТ_ЭД.СоглашениеЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
				|			И (СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ТОРГ12Продавец))
				|			И (ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ТОРГ12покупатель))
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП,
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД,
				|	ВТ_ЭД.ВидЭД,
				|	ВТ_ЭД.Ссылка,
				|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
				|ИЗ
				|	ВТ_ЭД КАК ВТ_ЭД
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
				|		ПО ВТ_ЭД.СоглашениеЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
				|			И (ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель))
				|			И (СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель))
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_ЭД.Ссылка КАК СсылкаНаЭД,
				|	ВТ_ЭД.СтатусЭД,
				|	ВТ_ЭД.ПрофильНастроекЭДО,
				|	ВТ_НастройкиОбмена.СоглашениеЭД КАК СоглашениеЭД,
				|	ВТ_НастройкиОбмена.СпособОбменаЭД,
				|	ВЫБОР
				|		КОГДА ВТ_НастройкиОбмена.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
				|				ИЛИ ВТ_НастройкиОбмена.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК ТребуетсяАвторизация,
				|	ВЫБОР
				|		КОГДА ВТ_НастройкиОбмена.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
				|				ИЛИ ВТ_НастройкиОбмена.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
				|				ИЛИ СоглашенияЭД.ЭтоИнтеркампани
				|				ИЛИ ВТ_ЭД.НаправлениеЭД = &НаправлениеВходящий
				|					И ВТ_ЭД.ПодписанЭП
				|				ИЛИ ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
				|					И ВТ_ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД)
				|					И ВТ_НастройкиОбмена.ИспользоватьЭП
				|					И &ИспользоватьЭП
				|			ТОГДА ИСТИНА
				|		КОГДА ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИОП)
				|				ИЛИ ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ)
				|				ИЛИ ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИППДОЭСФ)
				|				ИЛИ ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИППДПЭСФ)
				|				ИЛИ ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИПУУЭСФ)
				|				ИЛИ ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИПЭСФ)
				|				ИЛИ ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.УОУ)
				|				ИЛИ ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.УУЭСФ)
				|			ТОГДА ВЫБОР
				|					КОГДА ЕСТЬNULL(ЭДВладелецЭД.ПодписанЭП, ЛОЖЬ)
				|						ТОГДА НЕ ВТ_ЭД.ПодписанЭП
				|					ИНАЧЕ ЛОЖЬ
				|				КОНЕЦ
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК ТребуетсяПодпись,
				|	ВЫБОР
				|		КОГДА ВТ_НастройкиОбмена.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
				|				И ВТ_НастройкиОбмена.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
				|				И НЕ СоглашенияЭД.ЭтоИнтеркампани
				|				И НЕ СоглашенияЭД.СертификатОрганизацииДляРасшифровки = &ПустаяСсылкаНаСертификат
				|				И &ИспользоватьЭП
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК ТребуетсяШифрование
				|ИЗ
				|	ВТ_ЭД КАК ВТ_ЭД
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияЭД
				|		ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭД.Ссылка
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДВладелецЭД
				|		ПО ВТ_ЭД.ЭлектронныйДокументВладелец = ЭДВладелецЭД.Ссылка
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НастройкиОбмена КАК ВТ_НастройкиОбмена
				|		ПО ВТ_ЭД.Ссылка = ВТ_НастройкиОбмена.ЭД
				|ГДЕ
				|	ВЫБОР
				|			КОГДА ВТ_НастройкиОбмена.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
				|					ИЛИ ВТ_НастройкиОбмена.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
				|					ИЛИ СоглашенияЭД.ЭтоИнтеркампани
				|					ИЛИ ВТ_ЭД.НаправлениеЭД = &НаправлениеВходящий
				|						И ВТ_ЭД.ПодписанЭП
				|					ИЛИ ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
				|						И ВТ_ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД)
				|						И ВТ_НастройкиОбмена.ИспользоватьЭП
				|						И &ИспользоватьЭП
				|				ТОГДА ВТ_ЭД.СтатусЭД В (&СтатусыКОтправкеСПодписью)
				|			КОГДА ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
				|					И ВТ_ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД)
				|				ТОГДА ВЫБОР
				|						КОГДА НЕ ВТ_НастройкиОбмена.ИспользоватьЭП
				|								ИЛИ НЕ &ИспользоватьЭП
				|							ТОГДА ВТ_ЭД.СтатусЭД В (&СтатусыКОтправкеБезПодписи)
				|						ИНАЧЕ ВТ_ЭД.СтатусЭД В (&СтатусыКОтправкеСПодписью)
				|					КОНЕЦ
				|			КОГДА ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
				|					И НЕ ВТ_ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД)
				|				ТОГДА ВЫБОР
				|						КОГДА ЭДВладелецЭД.ПодписанЭП
				|							ТОГДА ВТ_ЭД.СтатусЭД В (&СтатусыКОтправкеСПодписью)
				|						ИНАЧЕ ВТ_ЭД.СтатусЭД В (&СтатусыКОтправкеБезПодписи)
				|					КОНЕЦ
				|			ИНАЧЕ ЛОЖЬ
				|		КОНЕЦ";
		МассивСтатусовСПодписью = Новый Массив;
		МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.Подписан);
		
		МассивСтатусовБезПодписи = Новый Массив;
		МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.Сформирован);
		МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.Утвержден);
		МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			
		Если Действия = "ОтправитьПовторно" Тогда
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.Отправлен);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.Отправлен);
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.Доставлен);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.Доставлен);
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждениеОператора);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждениеОператора);
		КонецЕсли;
		
		ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
		
		Запрос.Текст = ТекстОсновногоЗапроса + ТекстОсновногоЗапросаПродолжение
						+ "
						|;
						|//////////
						|" + ТекстЗапроса;
		
		Запрос.УстановитьПараметр("НаправлениеИсходящий",       Перечисления.НаправленияЭД.Исходящий);
		Запрос.УстановитьПараметр("СтатусыКОтправкеБезПодписи", МассивСтатусовБезПодписи);
		Запрос.УстановитьПараметр("СтатусыКОтправкеСПодписью",  МассивСтатусовСПодписью);
		Запрос.УстановитьПараметр("ИспользоватьЭП",             ИспользоватьЭП);
		Запрос.УстановитьПараметр("ПустаяСсылкаНаСертификат",
			Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка());
		
		ДокументыКОтправке = Запрос.Выполнить().Выгрузить();
		
		Отправлено = 0;
		Подготовлено = 0;
		Если ДокументыКОтправке.Количество() > 0 Тогда
			ДокументыСШифрованием = ДокументыКОтправке.СкопироватьКолонки();
			Если НЕ ВыполнятьКриптооперацииНаСервере Тогда
				// Скопируем в отдельную таблицу ЭД, которые надо шифровать на клиенте
				// и удалим эти строки из таблицы ЭД к отправке:
				Отбор = Новый Структура("ТребуетсяШифрование", Истина);
				ДокументыСШифрованием = ДокументыКОтправке.Скопировать(Отбор);
				Отбор = Новый Структура("ТребуетсяШифрование", Ложь);
				ДокументыКОтправке = ДокументыКОтправке.Скопировать(Отбор);
			КонецЕсли;
			Отбор = Новый Структура("ТребуетсяПодпись", Ложь);
			ВременнаяТаблица = ДокументыКОтправке.Скопировать(Отбор);
			СтруктураКОтправке.Вставить("БезПодписи", ВременнаяТаблица.ВыгрузитьКолонку("СсылкаНаЭД"));
			
			Если Не НемедленнаяОтправкаЭД Тогда
				// Если используется отложенная отправка, то авторизация на сервере ОЭДО, на текущем этапе, не нужна.
				// Следовательно, ЭД передаваемые через ОЭДО, передаются на формирование ПЭД без сертификатов авторизации.
				Отбор = Новый Структура("ТребуетсяПодпись", Истина);
				ВременнаяТаблица = ДокументыКОтправке.Скопировать(Отбор);
				МассивПодписанныхЭДКОтправке = ВременнаяТаблица.ВыгрузитьКолонку("СсылкаНаЭД");
				Для Каждого Элемент Из МассивПодписанныхЭДКОтправке Цикл
					СтруктураКОтправке.СПодписью.Добавить(Элемент);
				КонецЦикла;
				
			Иначе
				Отбор = Новый Структура("ТребуетсяАвторизация, ТребуетсяПодпись", Ложь, Истина);
				ВременнаяТаблица = ДокументыКОтправке.Скопировать(Отбор);
				МассивПодписанныхЭДКОтправке = ВременнаяТаблица.ВыгрузитьКолонку("СсылкаНаЭД");
				Для Каждого Элемент Из МассивПодписанныхЭДКОтправке Цикл
					Если СтруктураКОтправке.СПодписью.Найти(Элемент) = Неопределено Тогда
						СтруктураКОтправке.СПодписью.Добавить(Элемент);
					КонецЕсли;
				КонецЦикла;
				
				Отбор = Новый Структура("ТребуетсяАвторизация", Истина);
				ВременнаяТаблица = ДокументыКОтправке.Скопировать(Отбор);
				ТзПрофилейНастроекЭДО = ВременнаяТаблица.Скопировать();
				ТзПрофилейНастроекЭДО.Свернуть("ПрофильНастроекЭДО");
				МассивПрофилейНастроекЭДО = ТзПрофилейНастроекЭДО.ВыгрузитьКолонку("ПрофильНастроекЭДО");
				Если МассивПрофилейНастроекЭДО.Количество() > 0 Тогда
					СоотвСоглашенийИСоответствийСертификатов = СоотвСоглашенийИСоответствийСертификатовИПараметровДляАвторизацииСервер(
					                                                                 МассивПрофилейНастроекЭДО,
					                                                                 СтМассивовСтруктурСертификатов,
					                                                                 СоотвСертификатовИПаролей);
				КонецЕсли;
				// Если есть расшифрованные маркеры по сертификатам авторизации,
				// то здесь же отправим ЭД по данным сертификатам.
				МассивЭДКОтправкеССервера = Новый Массив;
				ЛокальноеСоотвСоглашенийИСтруктур = Новый Соответствие;
				
				Для Каждого ПрофильНастроекЭДО Из МассивПрофилейНастроекЭДО Цикл
					РеквизитыПрофиляНастроекЭДО = РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО);
					
					СоответствиеСертификатов = СоотвСоглашенийИСоответствийСертификатов.Получить(ПрофильНастроекЭДО);
					Отбор = Новый Структура("ПрофильНастроекЭДО", ПрофильНастроекЭДО);
					ПрофилиНастроекЭДО = ВременнаяТаблица.Скопировать(Отбор);
					Если ПрофилиНастроекЭДО.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					МассивЭД = ПрофилиНастроекЭДО.ВыгрузитьКолонку("СсылкаНаЭД");
					Если Не ЗначениеЗаполнено(СоответствиеСертификатов)
						Или СоответствиеСертификатов.Количество() = 0 Тогда
						// Если нет сертификата авторизации, то передадим массив ЭД на формирование ПЭД,
						// далее, ПЭД встанет в очередь на отправку (отложенная отправка).
						Для Каждого СсылкаНаЭД Из МассивЭД Цикл
							СтруктураКОтправке.СПодписью.Добавить(СсылкаНаЭД);
						КонецЦикла;
						Продолжить;
					КонецЕсли;
					
					ОтправкаССервера = Ложь;
					Для Каждого КлючИЗначение Из СоответствиеСертификатов Цикл
						Сертификат           = КлючИЗначение.Ключ;
						СтруктураСертификата = КлючИЗначение.Значение;
						
						МаркерРасшифрованный = Неопределено;
						МаркерЗашифрованный = Неопределено;
						Если ТипЗнч(СтруктураСертификата) = Тип("Структура")
							И (СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
								Или СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный))
							И (ЗначениеЗаполнено(МаркерРасшифрованный) Или ЗначениеЗаполнено(МаркерЗашифрованный)) Тогда
							
							Если ЗначениеЗаполнено(МаркерРасшифрованный) Тогда
								Для Каждого СсылкаНаЭД Из МассивЭД Цикл
									МассивЭДКОтправкеССервера.Добавить(СсылкаНаЭД);
								КонецЦикла;
								ЛокальноеСоотвСоглашенийИСтруктур.Вставить(ПрофильНастроекЭДО, СтруктураСертификата);
								ОтправкаССервера = Истина;
								Прервать;
							Иначе
								СоотвСертификатовИИхСтруктур.Вставить(Строка(Сертификат.УникальныйИдентификатор()) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации,
									СтруктураСертификата);
									
								МассивСертификатов = СоотвСоглашенийИСертификатовАвторизации.Получить(ПрофильНастроекЭДО);
								Если МассивСертификатов = Неопределено Тогда
									МассивСертификатов = Новый Массив;
									СоотвСоглашенийИСертификатовАвторизации.Вставить(ПрофильНастроекЭДО, МассивСертификатов);
								КонецЕсли;
								МассивСертификатов.Добавить(Сертификат);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Если ОтправкаССервера Тогда
						Продолжить;
					Иначе
						// По данному соглашению может быть массив, ожидающих подписи на клиенте, ЭД.
						// Данная ситуация может получиться, когда в журнале документов выбрана группа документов ИБ
						// с разными статусами ЭД (утвержден и подписан), тогда с предыдущего этапа (Подписание ЭД)
						// в соответствии соглашений и массивов придет массив ЭД на подпись, а на текущем этапе
						// будет сформирован массив ЭД к отправке.
						// Чтобы не затереть массив ЭД на подпись, добавим ЭД к отправке в существующий массив:
						МассивЭДОжидающихПодписи = СоотвСоглашенийИМассивовЭДКОтправке.Получить(ПрофильНастроекЭДО);
						Если МассивЭДОжидающихПодписи = Неопределено Тогда
							МассивЭДОжидающихПодписи = Новый Массив;
						КонецЕсли;
						Для Каждого ЭлементКОтправке Из МассивЭД Цикл
							МассивЭДОжидающихПодписи.Добавить(ЭлементКОтправке);
						КонецЦикла;
						СоотвСоглашенийИМассивовЭДКОтправке.Вставить(ПрофильНастроекЭДО, МассивЭДОжидающихПодписи);
					КонецЕсли;
				КонецЦикла;
				
				Если МассивЭДКОтправкеССервера.Количество() > 0 Тогда
					СтРезультата = СоздатьИОтправитьДокументыПЭД(МассивЭДКОтправкеССервера, Истина, ЛокальноеСоотвСоглашенийИСтруктур);
					Отправлено = Отправлено + СтРезультата.КолОтправленных;
					Подготовлено = Подготовлено + СтРезультата.КолПодготовленных;
				КонецЕсли;
			КонецЕсли;
			Для Каждого Элемент Из СтруктураКОтправке Цикл
				Если ВРег(Элемент.Ключ) = ВРег("САвторизацией") Тогда
					Продолжить;
				КонецЕсли;
				
				МассивКОтправке = Новый Массив;
				СтруктураКОтправке.Свойство(Элемент.Ключ, МассивКОтправке);
				ПризнакПодписи = (Элемент.Ключ = "СПодписью");
				МассивЭД = Элемент.Значение;
				Если ТипЗнч(МассивЭД) = Тип("Массив") И МассивЭД.Количество() > 0 Тогда
					СтРезультата = СоздатьИОтправитьДокументыПЭД(МассивЭД, ПризнакПодписи);
					Отправлено = Отправлено + СтРезультата.КолОтправленных;
					Подготовлено = Подготовлено + СтРезультата.КолПодготовленных;
					МассивКОтправке = СтРезультата.МассивПакетовДляОбработкиНаКлиенте;
				КонецЕсли;
				МассивЭД = Новый Массив;
				// Добавим в структуру ЭД, которые надо шифровать на клиенте:
				Если ДокументыСШифрованием.Количество() > 0 Тогда
					Отбор = Новый Структура("ТребуетсяПодпись", ПризнакПодписи);
					ВременнаяТаблица = ДокументыСШифрованием.Скопировать(Отбор);
					МассивЭД = ВременнаяТаблица.ВыгрузитьКолонку("СсылкаНаЭД");
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивКОтправке, МассивЭД, Истина);
				СтруктураКОтправке.Вставить(Элемент.Ключ, МассивКОтправке);
			КонецЦикла;
		КонецЕсли;
		СтруктураКОтправке.Вставить("САвторизацией", СоотвСоглашенийИМассивовЭДКОтправке);
		СтруктураВозврата.Вставить("КолОтправленных", Отправлено);
		СтруктураВозврата.Вставить("КолПодготовленных", Подготовлено);
		СтруктураВозврата.Вставить("СтруктураКОтправке", СтруктураКОтправке);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(МассивСсылокНаОбъект) Тогда
		
		Если ТипЗнч(ЭД) = Тип("Массив") И ЭД.Количество() > 0 Тогда
			Если ТипЗнч(ЭД[0]) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
				ВладельцыДокументов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ЭД,"ВладелецФайла");
				ДокументыУчета = Новый Массив;
				Для Каждого КлючЗначение Из ВладельцыДокументов Цикл
					
					ОснованияРезультат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КлючЗначение.Значение,"ДокументыОснования");
					Если ОснованияРезультат.Пустой() Тогда
						Продолжить;
					КонецЕсли;
					
					ОснованияВыборка = ОснованияРезультат.Выбрать();
					ОснованияВыборка.Следующий();
					
					ДокументыУчета.Добавить(ОснованияВыборка.ДокументОснование);
					
				КонецЦикла;
				
				СтруктураВозврата.Вставить("ДокументыУчета", ДокументыУчета);
				
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(ДопПараметры)= Тип("Структура") Тогда
			ДопПараметры.Вставить("ЕстьОбработанныеЭД",
				(КолНовыхЭД + КолУтвержденныхЭД + КолПодписанных + Подготовлено + Отправлено) > 0);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Создание и отправка пакетов электронных документов.
//
// Параметры:
//  ДобавленныеФайлы - Массив - список электронных документов.
//  ПризнакПодписи - Булево - признак подписи.
//  СоотвСоглашенийИПараметровСертификатов -Соответствие - соответствие соглашений и сертификатов.
// 
// Возвращаемое значение:
//  Структура - результат выполнения функции.
//
Функция СоздатьИОтправитьДокументыПЭД(Знач ДобавленныеФайлы,
									  Знач ПризнакПодписи,
									  Знач СоотвСоглашенийИПараметровСертификатов = Неопределено) Экспорт
	
	МассивСтруктурПакетовЭД = СоздатьДокументыПакетовЭД(ДобавленныеФайлы, ПризнакПодписи);
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КолПодготовленных", МассивСтруктурПакетовЭД.Количество());
	КолОтправленных = 0;
	МассивПакетовДляОбработкиНаКлиенте = Новый Массив;
	МассивПакетовДляОтправкиСКлиента   = Новый Массив;
	МассивПакетовДляПовторнойОтправки  = Новый Массив;
	ТребуетсяПовторнаяОтправка = Новый Соответствие;
	Если МассивСтруктурПакетовЭД.Количество() > 0 Тогда
		Для Каждого СтруктураПЭД Из МассивСтруктурПакетовЭД Цикл
			Если СтруктураПЭД.Свойство("ОтправкаСКлиента") Тогда
				МассивПакетовДляОтправкиСКлиента.Добавить(СтруктураПЭД.ПЭД);
				Продолжить;
			КонецЕсли;
			Если СтруктураПЭД.ТребуетсяШифрованиеНаКлиенте Тогда
				МассивПакетовДляОбработкиНаКлиенте.Добавить(СтруктураПЭД.ПЭД);
				Продолжить;
			КонецЕсли;
			Если НемедленнаяОтправкаЭД() Тогда
				
				ПовторнаяОтправкаПакетовПрофиляЭДО = ТребуетсяПовторнаяОтправка[СтруктураПЭД.ПрофильНастроекЭДО];
				Если ПовторнаяОтправкаПакетовПрофиляЭДО = Истина Тогда
					МассивПакетовДляПовторнойОтправки.Добавить(СтруктураПЭД.ПЭД);
				Иначе
					ПовторнаяОтправка = Ложь;
					МассивПЭД = Новый Массив;
					МассивПЭД.Добавить(СтруктураПЭД.ПЭД);
					ОтправленоПакетов = ОтправкаПакетовЭД(МассивПЭД, СоотвСоглашенийИПараметровСертификатов,
						Неопределено, ПовторнаяОтправка);
					КолОтправленных = КолОтправленных + ОтправленоПакетов;
					
					Если ПовторнаяОтправка Тогда
						МассивПакетовДляПовторнойОтправки.Добавить(СтруктураПЭД.ПЭД);
						ТребуетсяПовторнаяОтправка.Вставить(СтруктураПЭД.ПрофильНастроекЭДО, ПовторнаяОтправка);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СтруктураРезультата.Вставить("КолОтправленных",                    КолОтправленных);
	СтруктураРезультата.Вставить("МассивПакетовДляОбработкиНаКлиенте", МассивПакетовДляОбработкиНаКлиенте);
	СтруктураРезультата.Вставить("МассивПакетовДляПовторнойОтправки",  МассивПакетовДляПовторнойОтправки);
	Возврат СтруктураРезультата;
	
КонецФункции

// Создание пакетов электронных документов.
// 
// Параметры:
//  МассивЭД - Массив - ссылки на электронные документы, которые надо включить в пакет.
//  ПризнакПодписи - Булево - признак, что документы подписаны ЭП.
//
// Возвращаемое значение:
//  Массив - список структур пакетов ЭД.
//
Функция СоздатьДокументыПакетовЭД(МассивЭД, ПризнакПодписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаПакетовЭД = Новый ТаблицаЗначений;
	ТаблицаПакетовЭД.Колонки.Добавить("ПЭД");
	ТаблицаПакетовЭД.Колонки.Добавить("СпособОбменаЭД");
	ТаблицаПакетовЭД.Колонки.Добавить("АдресРесурсаПолучателя");
	ТаблицаПакетовЭД.Колонки.Добавить("ТребуетсяШифрованиеНаКлиенте");
	ТаблицаПакетовЭД.Колонки.Добавить("ВерсияФорматаПакета");
	ТаблицаПакетовЭД.Колонки.Добавить("ТребуетсяИзвещениеОПолучении");
	ТаблицаПакетовЭД.Колонки.Добавить("ПрофильНастроекЭДО");
	
	МассивПодготовленныхКОтправкеЭД = Новый Массив;
	
	Для Каждого ЭД Из МассивЭД Цикл
		РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "СтатусЭД, НаправлениеЭД, ОтправительЭД, ПолучательЭД, ВладелецФайла, ВладелецФайла.ВидЭД");
		
		ДокументНеПодписан = РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
						 ИЛИ РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
						 ИЛИ РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.ЧастичноПодписан;
		Если (ПризнакПодписи И ДокументНеПодписан) ИЛИ НЕ УстановленныеПодписиВалидны(ЭД) Тогда
			Продолжить;
		КонецЕсли;
		
		ВидЭД = РеквизитыЭД.ВладелецФайлаВидЭД;
		
		// Поиск настройки ЭДО для исходящего пакета ЭД.
		Если РеквизитыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ПараметрыНастройкиЭДО = ПолучитьНастройкиОбменаЭДПоИД(РеквизитыЭД.ПолучательЭД, РеквизитыЭД.ОтправительЭД);
		ИначеЕсли РеквизитыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			ПараметрыНастройкиЭДО = ПолучитьНастройкиОбменаЭДПоИД(РеквизитыЭД.ОтправительЭД, РеквизитыЭД.ПолучательЭД, ВидЭД);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыНастройкиЭДО) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭДТабличнойЧасти = Новый Массив;
		ЭДТабличнойЧасти.Добавить(ЭД);
		
		ПЭД = СоздатьПакетЭД(ПараметрыНастройкиЭДО, ЭДТабличнойЧасти);
			
		Если ЗначениеЗаполнено(ПЭД) Тогда
			НовСтрока = ТаблицаПакетовЭД.Добавить();
			НовСтрока.ПЭД = ПЭД;
			Если ПараметрыНастройкиЭДО.Свойство("АдресПолучателя") Тогда
				НовСтрока.АдресРесурсаПолучателя = ПараметрыНастройкиЭДО.АдресПолучателя;
			КонецЕсли;
			НовСтрока.ТребуетсяШифрованиеНаКлиенте = ПараметрыНастройкиЭДО.Свойство("ТребуетсяШифрованиеНаКлиенте")
														И ПараметрыНастройкиЭДО.ТребуетсяШифрованиеНаКлиенте;
			НовСтрока.ВерсияФорматаПакета = ПараметрыНастройкиЭДО.ВерсияФорматаПакета;
			НовСтрока.СпособОбменаЭД = ПараметрыНастройкиЭДО.СпособОбменаЭД;
			НовСтрока.ТребуетсяИзвещениеОПолучении = ПараметрыНастройкиЭДО.ТребуетсяИзвещениеОПолучении;
			НовСтрока.ПрофильНастроекЭДО = ПараметрыНастройкиЭДО.ПрофильНастроекЭДО;
			
			МассивПодготовленныхКОтправкеЭД.Добавить(ЭД);
			
		КонецЕсли;

	КонецЦикла;
	
	// Сформируем массив структур для обработки на клиенте.
	МассивСтруктурПЭД = Новый Массив;
	Для Каждого ТекСтрока Из ТаблицаПакетовЭД Цикл
		СтруктураПЭД = Новый Структура;
		СтруктураПЭД.Вставить("ПЭД",                    ТекСтрока.ПЭД);
		СтруктураПЭД.Вставить("АдресРесурсаПолучателя", ТекСтрока.АдресРесурсаПолучателя);
		СтруктураПЭД.Вставить("ПрофильНастроекЭДО",     ТекСтрока.ПрофильНастроекЭДО);
		СтруктураПЭД.Вставить("ТребуетсяШифрованиеНаКлиенте", Ложь);
		Если ТекСтрока.ТребуетсяШифрованиеНаКлиенте = Истина Тогда
			СтруктураПЭД.ТребуетсяШифрованиеНаКлиенте = Истина;
			МассивСтруктурПЭД.Добавить(СтруктураПЭД);
			Продолжить;
		КонецЕсли;
		
		Если (ТекСтрока.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
			ИЛИ ТекСтрока.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО)
			ИЛИ (ТекСтрока.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту
				ИЛИ ТекСтрока.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог
				ИЛИ ТекСтрока.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP
				И ТекСтрока.ВерсияФорматаПакета <> Перечисления.ВерсииФорматаПакетаЭД.Версия10) Тогда
			
				Если ОбменСКонтрагентамиВнутренний.СформироватьЭДПрисоединенныйФайлПакетаОператораЭДО(ТекСтрока.ПЭД, Неопределено,
						ТекСтрока.ТребуетсяИзвещениеОПолучении) Тогда
				МассивСтруктурПЭД.Добавить(СтруктураПЭД);
			Иначе
				Для Каждого ЭД Из ТекСтрока.ПЭД.ЭлектронныеДокументы Цикл
					ЭДВМассиве = МассивПодготовленныхКОтправкеЭД.Найти(ЭД.ЭлектронныйДокумент);
					Если ЭДВМассиве <> Неопределено Тогда
						МассивПодготовленныхКОтправкеЭД.Удалить(ЭДВМассиве);
					КонецЕсли;
				КонецЦикла;
				ПЭД = ТекСтрока.ПЭД.ПолучитьОбъект();
				ПЭД.СтатусПакета    = Перечисления.СтатусыПакетовЭД.Отменен;
				ПЭД.ПометкаУдаления = Истина;
				ПЭД.Записать();
			КонецЕсли;
		Иначе
			СформироватьЭДПрисоединенныйФайлПакета(ТекСтрока.ПЭД);
			МассивСтруктурПЭД.Добавить(СтруктураПЭД);
		КонецЕсли;
	КонецЦикла;
	ОбновитьСтатусыЭД(МассивПодготовленныхКОтправкеЭД, ПризнакПодписи);
	
	Возврат МассивСтруктурПЭД;
	
КонецФункции

// Отправка пакетов электронных документов.
//
// Параметры:
//  МассивПакетовЭД - Массив - отправляемые пакеты.
//  СоотвСоглашенийИПараметровСертификатов - Соответствие - Соответствие соглашений и сертификатов.
//  ОтправленныеДокументы - Массив - отправленные электронные документы.
//  ПовторнаяОтправка - Булево - требуется повторная отправка.
// 
// Возвращаемое значение:
//  Число - количество отправленных пакетов.
//
Функция ОтправкаПакетовЭД(Знач МассивПакетовЭД, Знач СоотвСоглашенийИПараметровСертификатов,
	ОтправленныеДокументы = Неопределено, ПовторнаяОтправка = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстСообщения = "";
	
	РезультатОтправки = 0;
	Для Каждого ПакетЭД Из МассивПакетовЭД Цикл
		// Если электронный документ по каким-то причинам отправлен быть не может,
		// то не надо приостанавливать всю цепочку.
		
		НачатьТранзакцию();
		
		Попытка
			
			ОбновитьСтатусыДокументовПакетаЭД(ПакетЭД,
				Перечисления.СтатусыПакетовЭД.Отправлен,
				ТекущаяДатаСеанса());
				
			Если Не ПакетЭД.СтатусПакета = Перечисления.СтатусыПакетовЭД.Отправлен Тогда
				ОтменитьТранзакцию();
				Продолжить;
				
			КонецЕсли;
			
			РеквизитыПакетаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПакетЭД,
				"ПрофильНастроекЭДО, НастройкаЭДО, СпособОбменаЭД, АдресРесурсаКонтрагента, ЭлектронныеДокументы");
			
			МассивПрофилейНастроекЭДО = Новый Массив;
			МассивПрофилейНастроекЭДО.Добавить(РеквизитыПакетаЭД.ПрофильНастроекЭДО);
			
			ТипОтправки = РеквизитыПакетаЭД.СпособОбменаЭД;
			АдресКаталогаОтправки = СформироватьФайлыДляОтправки(ПакетЭД);
			Если ПустаяСтрока(АдресКаталогаОтправки) Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			Если ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
				ОтправленТекущийПакет = ОтправитьЭлектронноеПисьмо(ПакетЭД, АдресКаталогаОтправки);
				РезультатОтправки = РезультатОтправки + ОтправленТекущийПакет;
				Если ОтправленТекущийПакет = 0 Тогда
					ОтменитьТранзакцию();
					ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				
				ИзменитьСостояниеЭДДокументовОснования(РеквизитыПакетаЭД);
				
			ИначеЕсли ТипОтправки =  Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
				Или ТипОтправки =  Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
				
				СоотвСоглашений = Неопределено;
				Если ТипЗнч(СоотвСоглашенийИПараметровСертификатов) = Тип("Соответствие")
					И СоотвСоглашенийИПараметровСертификатов.Количество() > 0 Тогда
					ПараметрыСертификата = СоотвСоглашенийИПараметровСертификатов.Получить(РеквизитыПакетаЭД.ПрофильНастроекЭДО);
				ИначеЕсли ДоступныПараметрыДляАвторизацииНаСервереОператора(МассивПрофилейНастроекЭДО, СоотвСоглашений) Тогда
					ПараметрыСертификата = СоотвСоглашений.Получить(РеквизитыПакетаЭД.ПрофильНастроекЭДО);
				Иначе
					ОтменитьТранзакцию();
					ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				Маркер = Неопределено;
				Если Не (РасшифроватьМаркерИзСтруктурыСертификатаНаСервере(ПараметрыСертификата)
					И ПараметрыСертификата.Свойство("МаркерРасшифрованный", Маркер) И ЗначениеЗаполнено(Маркер)) Тогда
					ОтменитьТранзакцию();
					ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
				КоличествоКОтправке = ФайлыОтправки.Количество();
				
				КоличествоОтправленных = ОбменСКонтрагентамиВнутренний.ОтправитьЧерезОператораЭДО(
																	Маркер,
																	АдресКаталогаОтправки,
																	"SendMessage",
																	РеквизитыПакетаЭД.ПрофильНастроекЭДО,
																	ПовторнаяОтправка);
																	
				Если КоличествоОтправленных <> КоличествоКОтправке Тогда
					ШаблонСообщения = НСтр("ru = 'Не удалось отправить оператору ЭДО ""%1"".'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПакетЭД);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					ОтменитьТранзакцию();
					Продолжить;
				Иначе
					РезультатОтправки = РезультатОтправки + КоличествоОтправленных;
				КонецЕсли;
				
				ИзменитьСостояниеЭДДокументовОснования(РеквизитыПакетаЭД);
				
			ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
				
				АдресКаталога = РеквизитыПакетаЭД.АдресРесурсаКонтрагента
					+ ?(Прав(РеквизитыПакетаЭД.АдресРесурсаКонтрагента, 1) <> "\", "\", "");
				КаталогНаДиске = Новый Файл(АдресКаталога);
				Если НЕ КаталогНаДиске.Существует() Тогда
					СоздатьКаталог(АдресКаталога);
				КонецЕсли;
				
				ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
				Для Каждого Файл Из ФайлыОтправки Цикл
					КопироватьФайл(Файл.ПолноеИмя, АдресКаталога + Файл.Имя);
					РезультатОтправки = РезультатОтправки + 1;
				КонецЦикла;
				
				ИзменитьСостояниеЭДДокументовОснования(РеквизитыПакетаЭД);
				
			ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
				FTPСоединение = ПолучитьFTPСоединение(РеквизитыПакетаЭД.ПрофильНастроекЭДО);
				Если FTPСоединение = Неопределено Тогда
					ОтменитьТранзакцию();
					ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				КаталогОтправки = РеквизитыПакетаЭД.АдресРесурсаКонтрагента;
				ПодготовитьПутьFTP(КаталогОтправки);
				ТекстОшибки = "";
				Попытка
					FTPСоединение.УстановитьТекущийКаталог(КаталогОтправки);
				Исключение
					СоздатьКаталогиFTP(FTPСоединение, КаталогОтправки, , ТекстОшибки);
				КонецПопытки;
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ОтменитьТранзакцию();
					ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
				Для Каждого Файл Из ФайлыОтправки Цикл
					ЗаписатьФайлНаFTP(FTPСоединение, Файл.ПолноеИмя, Файл.Имя, , ТекстОшибки);
					Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
						Прервать;
					КонецЕсли;
					РезультатОтправки = РезультатОтправки + 1;
				КонецЦикла;
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ОтменитьТранзакцию();
					ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				
				ИзменитьСостояниеЭДДокументовОснования(РеквизитыПакетаЭД);
				
			КонецЕсли;
			
			// статистика по отправленным документам
			ВыборкаЭД = РеквизитыПакетаЭД.ЭлектронныеДокументы.Выбрать();
			КоличествоЭД = 0;
			Пока ВыборкаЭД.Следующий() Цикл
				Если Не ЭтоСлужебныйДокумент(ВыборкаЭД.ЭлектронныйДокумент) Тогда
					КоличествоЭД = КоличествоЭД + 1;
				КонецЕсли;
			КонецЦикла;
			Если КоличествоЭД Тогда
				ЗаписатьСтатистикуПоДокументообороту(ТипОтправки, РеквизитыПакетаЭД.ПрофильНастроекЭДО, "Отправлено", КоличествоЭД)
			КонецЕсли;
			// конец статистика по отправленным документам
			
			ТранзакцияЗафиксирована = Истина;
			ЗафиксироватьТранзакцию();
						
		Исключение
			
			ОтменитьТранзакцию();
			
			ШаблонСообщения = НСтр("ru = 'Ошибка отправки пакета по настройке: %1, способ обмена: %2
									|%3'");
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				РеквизитыПакетаЭД.НастройкаЭДО, РеквизитыПакетаЭД.СпособОбменаЭД, КраткоеПредставлениеОшибки);
			ШаблонВидаОперации = НСтр("ru = 'отправка пакета ЭД по настройке: %1, способ обмена %2'");
			ВидОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонВидаОперации, РеквизитыПакетаЭД.НастройкаЭДО, РеквизитыПакетаЭД.СпособОбменаЭД);
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
			
			ТранзакцияЗафиксирована = Ложь;
		КонецПопытки;
		
		Если ТранзакцияЗафиксирована И ОтправленныеДокументы <> Неопределено Тогда
			
			ВыборкаДокументов = РеквизитыПакетаЭД.ЭлектронныеДокументы.Выбрать();
			Пока ВыборкаДокументов.Следующий() Цикл
				
				ОтправленныеДокументы.Добавить(ВыборкаДокументов.ЭлектронныйДокумент);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдресКаталогаОтправки) Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталогаОтправки);
		КонецЕсли;
	КонецЦикла;
	
	
	Возврат РезультатОтправки;
	
КонецФункции

// Функция проверяет наличие в структуре расшифрованного маркера, если его нет, то пытается расшифровать
// зашифрованный маркер, если расшифровка прошла успешно, то расшифрованный маркер помещается в структуру.
//
// Параметры:
//  СтруктураСертификата - структура - содержит сертификат ЭП и его параметры, включая расшифрованный
//    или зашифрованный маркер.
//
// Возвращаемое значение:
//  Булево - Истина - в структуре есть расшифрованный маркер, иначе - Ложь.
//
Функция РасшифроватьМаркерИзСтруктурыСертификатаНаСервере(СтруктураСертификата) Экспорт
	
	Расшифрован = Ложь;
	
	Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
		МаркерРасшифрованный = Неопределено;
		МаркерЗашифрованный = Неопределено;
		МенеджерКриптографии = Неопределено;
		Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
			Попытка
				МенеджерКриптографии = ЭлектронноеВзаимодействиеСлужебный.МенеджерКриптографии(Ложь);
			Исключение
				МенеджерКриптографии = Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		Если СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
			И ЗначениеЗаполнено(МаркерРасшифрованный) Тогда
			Расшифрован = Истина;
		ИначеЕсли СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный)
			И ЗначениеЗаполнено(МаркерЗашифрованный) И МенеджерКриптографии <> Неопределено Тогда
			Попытка
				СтруктураСертификата.Свойство("ПарольПользователя", МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу);
				Маркер = МенеджерКриптографии.Расшифровать(МаркерЗашифрованный);
				Если ЗначениеЗаполнено(Маркер) Тогда
					Расшифрован = Истина;
					СтруктураСертификата.Вставить("МаркерРасшифрованный", Маркер);
				КонецЕсли;
			Исключение
				Операция = НСтр("ru = 'Расшифровка маркера'");
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
					Операция, ТекстОшибки, ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Расшифрован;
	
КонецФункции

// Используется в случае отсутствия возможности предложить пользователю выбрать сертификат из списка доступных и/или
// ввести пароль для сертификата (например при выполнении регламентного задания).
// Возвращает Истина, если для входящих переменных найден хотя бы один сертификат с сохраненным в ИБ паролем.
//
// Параметры:
//  МассивПрофилейНастроекЭДО     - Массив - содержит ссылки на профили настроек ЭДО, по которым требуется определить сертификаты;
//  ПараметрыАвторизации - Соответствие - в этой переменной в вызывающий метод возвращается соответствие:
//    * Ключ     - СправочникСсылка.СоглашенияОбИспользованииЭД - соглашение, для которого определен сертификат авторизации.
//    * Значение - Соответствие - соответствие сертификата и его параметров:
//       ** Ключ     - СправочникСсылка.СертификатыЭП - сертификат авторизации.
//       ** Значение - Структура - структура параметров сертификата:
//           *** СертификатПодписи           - СправочникСсылка.СертификатыЭП.
//           *** ПарольПолучен               - Булево.
//           *** ПарольПользователя          - Строка.
//           *** Отпечаток                   - Строка.
//           *** Отозван                     - Булево.
//           *** ДвоичныеДанныеСертификата             - ХранилищеЗначений.
//           *** ОповещенОСрокеДействия      - Булево.
//           *** ДатаОкончания               - Дата.
//           *** ЗапомнитьПарольКСертификату - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если найдены сертификат(ы) с сохраненными в ИБ паролями, иначе Ложь.
//
Функция ДоступныПараметрыДляАвторизацииНаСервереОператора(Знач МассивПрофилейНастроекЭДО = Неопределено,
														ПараметрыАвторизации = Неопределено) Экспорт
	
	Попытка
		МассивОтпечатковСертификатов = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов();
	Исключение
		МассивОтпечатковСертификатов = Новый Массив;
	КонецПопытки;
	
	ДоступныПараметры = Ложь;
	Если МассивОтпечатковСертификатов.Количество() > 0 Тогда
		СтМассивовСтруктурСертификатов = Новый Структура("МассивОтпечатковСервер", МассивОтпечатковСертификатов);
		
		Результат = НастройкиЭДОИСертификатыАвторизации(МассивПрофилейНастроекЭДО,, СтМассивовСтруктурСертификатов);
		
		ПараметрыАвторизации = Новый Соответствие;
		СоотвСоглашенийИМассиваСертификатовАвторизации = Неопределено;
		СоотвСертификатовИИхСтруктур = Неопределено;
		Если Результат.Свойство("СоотвСоглашенийИМассиваСертификатовАвторизации", СоотвСоглашенийИМассиваСертификатовАвторизации)
			И Результат.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
			И ТипЗнч(СоотвСоглашенийИМассиваСертификатовАвторизации) = Тип("Соответствие")
			И ТипЗнч(СоотвСертификатовИИхСтруктур) = Тип("Соответствие") Тогда
			// В СоотвСоглашенийИМассиваСертификатовАвторизации - Ключ - Соглашение, Значение - Массив сертификатов
			// по данному соглашению. Функция должна вернуть (в ПараметрыАвторизации) Соответствие, в котором Ключ - Соглашение,
			// Значение - Соответствие сертификата и его параметров.
			Для Каждого Элемент Из СоотвСоглашенийИМассиваСертификатовАвторизации Цикл
				
				ПрофильНастроекЭДО = Элемент.Ключ;
				РеквизитыПрофиляНастроекЭДО = РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО);
				
				МассивСертификатов = Элемент.Значение;
				Для Каждого Сертификат Из МассивСертификатов Цикл
					КлючПоискаСертификата = Строка(Сертификат.УникальныйИдентификатор()) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации;
					ПараметрыСертификата = СоотвСертификатовИИхСтруктур.Получить(КлючПоискаСертификата);
					
					Если ПараметрыСертификата.ПарольПолучен Тогда
						ПараметрыАвторизации.Вставить(Элемент.Ключ, ПараметрыСертификата);
						ДоступныПараметры = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДоступныПараметры;
	
КонецФункции

// Функция получает данные по сертификатам, разрешенным для использования при подписании ЭД и авторизации
// на сервере оператора ЭДО. Поиск сертификатов выполняется как пересечение массивов сертификатов установленных в
// личном хранилище (клиента либо сервера, в зависимости от настроек в 1с), с сертификатами импортированными в 1с и
// зарегистрированными у оператора ЭДО (регистрация у оператора отражается в таб.части соглашения об обмене ЭД
// "СертификатыПодписейОрганизации"). При необходимости, выборка может быть ограничена массивом соглашений, по которым
// требуется определить параметры сертификатов.
//
// Параметры:
//  ПрофилиНастроекЭДО - Массив - ссылки на профили настроек ЭДО, по которым требуется определить сертификаты;
//  ЭлектронныеДокументы - Массив - содержит ссылки на электронные документы;
//  СтМассивовСтруктурСертификатов - Структура - может содержать 2 элемента: МассивСтруктурСертификатовСервер
//    и МассивСтруктурСертификатовКлиент, соответственно массив структур сертификатов личного хранилища с сервера и
//    то же самое с клиента.
//
// Возвращаемое значение:
//  Структура - пустая, либо содержит 3 элемента:
//    СоотвСоглашенийИСертификатовПодписи;
//    СоотвСоглашенийИСертификатовАвторизации;
//    СоотвСертификатовИИхСтруктур.
//
Функция НастройкиЭДОИСертификатыАвторизации(Знач ПрофилиНастроекЭДО, Знач ЭлектронныеДокументы = Неопределено,
	Знач СтМассивовСтруктурСертификатов = Неопределено) Экспорт  
	
	СтруктураСоответствий = Новый Структура;
	
	ВыполнятьКриптооперацииНаСервере = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере();
	// Если используется отложенная отправка, то искать сертификаты авторизации не надо.
	МассивОтпечатковКлиент = Новый Массив;
	МассивОтпечатковСервер = Новый Массив;
	
	ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
	Если ТипЗнч(СтМассивовСтруктурСертификатов) = Тип("Структура") Тогда
		СтМассивовСтруктурСертификатов.Свойство("МассивОтпечатковСервер", МассивОтпечатковСервер);
		СтМассивовСтруктурСертификатов.Свойство("МассивОтпечатковКлиент", МассивОтпечатковКлиент);
		Если ВыполнятьКриптооперацииНаСервере И НЕ ЗначениеЗаполнено(МассивОтпечатковСервер) И ИспользоватьЭП Тогда
			Попытка
				МассивОтпечатковСервер = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов();
			Исключение
				ВидОперации = НСтр("ru = 'Получение данных сертификатов'");
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	МассивОтпечатковСервер = ?(ЗначениеЗаполнено(МассивОтпечатковСервер), МассивОтпечатковСервер, Новый Массив);
	МассивОтпечатковКлиент = ?(ЗначениеЗаполнено(МассивОтпечатковКлиент), МассивОтпечатковКлиент, Новый Массив);
	
	МассивОтпечатковДляАвторизации = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковДляАвторизации, МассивОтпечатковКлиент);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковДляАвторизации, МассивОтпечатковСервер);
	
	Если (МассивОтпечатковСервер <> Неопределено И МассивОтпечатковСервер.Количество())
		Или (МассивОтпечатковКлиент <> Неопределено И МассивОтпечатковКлиент.Количество()) Тогда
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаСертификатов.Сертификат,
		|	ТаблицаСертификатов.ПарольПользователя
		|ПОМЕСТИТЬ ТаблицаСертификатов
		|ИЗ
		|	&ТаблицаСертификатов КАК ТаблицаСертификатов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПрофилиНастроекЭДО.Ссылка КАК ПрофильНастроекЭДО,
		|	ПрофилиНастроекЭДО.Ссылка.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ПрофилиНастроекЭДО.Ссылка.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	Сертификаты.Ссылка КАК СертификатПодписи,
		|	ТаблицаСертификатов.ПарольПользователя КАК ПарольПользователя,
		|	ВЫБОР
		|		КОГДА ТаблицаСертификатов.Сертификат ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЗапомнитьПарольКСертификату,
		|	ВЫБОР
		|		КОГДА ТаблицаСертификатов.Сертификат ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПарольПолучен,
		|	Сертификаты.Отпечаток,
		|	Сертификаты.Отозван,
		|	Сертификаты.ДанныеСертификата КАК ДанныеСертификата,
		|	Сертификаты.ПользовательОповещенОСрокеДействия КАК ОповещенОСрокеДействия,
		|	Сертификаты.ДействителенДо КАК ДатаОкончания,
		|	Сертификаты.Программа КАК Программа
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиНастроекЭДОСертификаты
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|				ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСертификатов КАК ТаблицаСертификатов
		|				ПО (ТаблицаСертификатов.Сертификат = Сертификаты.Ссылка)
		|			ПО ПрофилиНастроекЭДОСертификаты.Сертификат = Сертификаты.Ссылка
		|		ПО (ПрофилиНастроекЭДОСертификаты.Ссылка = ПрофилиНастроекЭДО.Ссылка)
		|ГДЕ
		|	НЕ Сертификаты.ПометкаУдаления
		|	И НЕ Сертификаты.Отозван
		|	И Сертификаты.Пользователь В (&ПустойПользователь, &ТекущийПользователь, &ПользовательНеУказан)
		|	И Сертификаты.Отпечаток В(&МассивОтпечатковДляАвторизации)
		|	И ПрофилиНастроекЭДО.Ссылка.СпособОбменаЭД В (ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском), ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО))
		|	И &ИспользоватьЭП
		|	И НЕ ПрофилиНастроекЭДО.ПометкаУдаления
		|	И ПрофилиНастроекЭДО.Ссылка В(&МассивПрофилейНастроекЭДО)
		|	И ВЫБОР
		|			КОГДА Сертификаты.ДействителенДо = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ИСТИНА
		|			КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, Сертификаты.ДействителенДо, ДЕНЬ) > 0
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПарольПолучен УБЫВ";
		
		Запрос.УстановитьПараметр("МассивОтпечатковДляАвторизации", МассивОтпечатковДляАвторизации);
		Запрос.УстановитьПараметр("ПустойПользователь",		Справочники.Пользователи.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПользовательНеУказан",	Пользователи.СсылкаНеуказанногоПользователя());
		Запрос.УстановитьПараметр("ТекущийПользователь",	Пользователи.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("ИспользоватьЭП",			ИспользоватьЭП);
		Запрос.УстановитьПараметр("ТекущаяДата",			ТекущаяДатаСеанса());
		СертификатыСПаролями = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ПарольКСертификату(,МассивОтпечатковДляАвторизации);
		ТЗ_Сертификатов = Новый ТаблицаЗначений;
		ТЗ_Сертификатов.Колонки.Добавить("Сертификат",
			Новый ОписаниеТипов("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования"));
		ТЗ_Сертификатов.Колонки.Добавить("ПарольПользователя", Новый ОписаниеТипов("Строка"));
		Для Каждого Элемент Из СертификатыСПаролями Цикл
			НоваяСтрока = ТЗ_Сертификатов.Добавить();
			НоваяСтрока.Сертификат = Элемент.Ключ;
			НоваяСтрока.ПарольПользователя = Элемент.Значение;
		КонецЦикла;
		Запрос.УстановитьПараметр("ТаблицаСертификатов", ТЗ_Сертификатов);
		Если НЕ ЗначениеЗаполнено(ПрофилиНастроекЭДО) Тогда
			ПрофилиНастроекЭДО = Новый Массив;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлектронныеДокументы) И ПрофилиНастроекЭДО.Количество() = 0 Тогда
			ПрофилиНастроекЭДО = Новый Массив;
			Если ТипЗнч(ЭлектронныеДокументы) = Тип("Массив") И ЭлектронныеДокументы.Количество() > 0 Тогда

				СоотвЭДИСтруктурыВладельцев = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ЭлектронныеДокументы, "ВладелецФайла");
				МассивВладельцевЭД = Новый Массив;
				Для Каждого ЭлементСоответствия Из СоотвЭДИСтруктурыВладельцев Цикл
					МассивВладельцевЭД.Добавить(ЭлементСоответствия.Значение.ВладелецФайла);
				КонецЦикла;
				СоотвЭДИСтруктурыСоглашений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивВладельцевЭД, "ПрофильНастроекЭДО");
				Для Каждого ЭДВладелец Из СоотвЭДИСтруктурыСоглашений Цикл
					ПрофильНастроекЭДО = ЭДВладелец.Значение.ПрофильНастроекЭДО;
					Если ПрофилиНастроекЭДО.Найти(ПрофильНастроекЭДО) = Неопределено Тогда
						ПрофилиНастроекЭДО.Добавить(ПрофильНастроекЭДО);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если ПрофилиНастроекЭДО.Количество() > 0 Тогда
			Запрос.УстановитьПараметр("МассивПрофилейНастроекЭДО", ПрофилиНастроекЭДО);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ПрофилиНастроекЭДО.Ссылка В(&МассивПрофилейНастроекЭДО)", "");
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		
		СоотвСоглашенийИМассиваСертификатовАвторизации = Новый Соответствие;
		СоотвСертификатовИИхСтруктур = Новый Соответствие;
		
		// Для авторизации, помимо сертификатов, попытаемся получить маркеры, по возможности расшифрованные.
		
		МенеджерКриптографииДоступенНаСервере = Ложь;
		Если ВыполнятьКриптооперацииНаСервере Тогда
			Попытка
				МенеджерКриптографии = ЭлектронноеВзаимодействиеСлужебный.МенеджерКриптографии(Ложь);
				МенеджерКриптографииДоступенНаСервере = Истина;
			Исключение
				МенеджерКриптографииДоступенНаСервере = Ложь;
			КонецПопытки;
		КонецЕсли;
	
		ТекущийПрофильНастроекЭДО = Неопределено;
		Пока Выборка.Следующий() Цикл
			Если ТекущийПрофильНастроекЭДО <> Выборка.ПрофильНастроекЭДО Тогда
				МассивСертификатов = Новый Массив;
				ТекущийПрофильНастроекЭДО = Выборка.ПрофильНастроекЭДО;
			КонецЕсли;
			МассивСертификатов.Добавить(Выборка.СертификатПодписи);
			
			Если СоотвСоглашенийИМассиваСертификатовАвторизации.Получить(ТекущийПрофильНастроекЭДО) = Неопределено Тогда
				СоотвСоглашенийИМассиваСертификатовАвторизации.Вставить(ТекущийПрофильНастроекЭДО, МассивСертификатов);
			КонецЕсли;
			СтруктураСертификата = Новый Структура("СертификатПодписи, ПарольПолучен, ПарольПользователя, Отпечаток, Отозван, Программа,
													|ДанныеСертификата, ОповещенОСрокеДействия, ДатаОкончания, ЗапомнитьПарольКСертификату");
			ЗаполнитьЗначенияСвойств(СтруктураСертификата, Выборка);
		
			// Заполняем данные для авторизации.
			Если ТипЗнч(СтруктураСертификата.ДанныеСертификата) = Тип("ХранилищеЗначения") Тогда
				ПарольПолучен = Выборка.ПарольПолучен;
				СтруктураСертификата.Вставить("ПарольПользователя", Выборка.ПарольПользователя);
				СтруктураСертификата.Вставить("ПарольПолучен", ПарольПолучен);
				Расшифровывать = (ПарольПолучен И МенеджерКриптографииДоступенНаСервере);
				
				Соединение = ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(Выборка.СпособОбменаЭД);
				СтруктураПараметровЗапросаМаркера = СтруктураСертификата;
				СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД", Выборка.СпособОбменаЭД);
				СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", Выборка.ИдентификаторОрганизации);
					
				ПараметрыОбработки = Новый Структура("Расшифровывать", Расшифровывать);
				Маркер = ОбменСКонтрагентамиВнутренний.ПолучитьМаркерОЭДО(СтруктураПараметровЗапросаМаркера, Соединение, , ПараметрыОбработки);
				
				Если ТипЗнч(Маркер) = Тип("ДвоичныеДанные") Тогда
					Если Расшифровывать Тогда
						СтруктураСертификата.Вставить("МаркерРасшифрованный", Маркер);
					Иначе
						СтруктураСертификата.Вставить("МаркерЗашифрованный", Маркер);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СоотвСертификатовИИхСтруктур.Вставить(Строка(Выборка.СертификатПодписи.УникальныйИдентификатор()) + "_" + Выборка.ИдентификаторОрганизации,
				СтруктураСертификата);
			
		КонецЦикла;
		
		СтруктураСоответствий.Вставить("СоотвСоглашенийИМассиваСертификатовАвторизации", СоотвСоглашенийИМассиваСертификатовАвторизации);
		СтруктураСоответствий.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
	КонецЕсли;
	
	Возврат СтруктураСоответствий;
	
КонецФункции

// ЭД владелец - первичный ЭД к которому пришла вторая подпись
// для этого ЭД необходимо найти пакет ЭД, из него извлечь доп данные - наименование эл документа на основании которого он был введен
// по наименованию найти ЭДОснования, установить у его владельца статус "Обмен завершен с исправлением".
//
Процедура УстановитьСостояниеЗавершен(ДобавленныйФайл, НаправлениеЭД, ВыполняетсяОбновлениеИнформационнойБазы = Ложь) Экспорт
	
	Если Не ЭтоДокументКорректировки(ДобавленныйФайл) Тогда
		Возврат;
	КонецЕсли;
	
	ЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДобавленныйФайл, "ВладелецФайла");
	
	НомераЭД = ЭД.ИдентификаторыОснованийВладельцаФайла.ВыгрузитьКолонку("ИдентификаторДокументаОснования");
	
	Если НомераЭД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ДокументОснования
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.НомерЭД В(&НомерЭД)
	|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД
	|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД))";
	Запрос.УстановитьПараметр("НомерЭД", НомераЭД);
	Запрос.УстановитьПараметр("НаправлениеЭД", НаправлениеЭД);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ДокументыОснования = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		ДокументыОснования.Добавить(Выборка.ДокументОснования);
		
	КонецЦикла;
	
	Если ДокументыОснования.Количество() > 0 Тогда
		
		ОбменСКонтрагентамиВнутренний.УстановитьСостояниеОбменЗавершенСИсправлением(ДокументыОснования, ВыполняетсяОбновлениеИнформационнойБазы);
		
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Функция РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО, "СпособОбменаЭД, ИдентификаторОрганизации");
	
КонецФункции

// Возвращает двоичные данные электронного документа.
//
// Параметры:
//  СсылкаНаФайлЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ.
//  СертификатПодписи - Ссылка - ссылка на элемент справочника Сертификаты электронной подписи.
//
// Возвращаемое значение:
//  ДвоичныеДанные - двоичные данные электронного документа.
//
Функция ПолучитьДвоичныеДанныеФайла(СсылкаНаФайлЭД, СертификатПодписи) Экспорт
	
	ДвоичныеДанныеЭД = РаботаСФайлами.ДвоичныеДанныеФайла(СсылкаНаФайлЭД);
	
	Если ЗначениеЗаполнено(СертификатПодписи) Тогда
		
		ПараметрыФайлаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаФайлЭД, "НаправлениеЭД, Расширение, ТипЭлементаВерсииЭД, ВладелецФайла");
		ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыФайлаЭД.ВладелецФайла,"ВидЭД,Организация");
		УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(СсылкаНаФайлЭД);
		
		ПараметрыФайлаЭД.Вставить("Организация", ПараметрыЭД.Организация);
		
		ПолучаемДанные = Ложь;
		
		Если ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
			И ПараметрыФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			
			ПолучаемДанные = Ложь;
		
		ИначеЕсли ЭтоИзвещениеОПолучении(ПараметрыФайлаЭД.ТипЭлементаВерсииЭД)
			Или ЭтоУведомлениеОбУточнении(ПараметрыФайлаЭД.ТипЭлементаВерсииЭД)
			Или (ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
				И ПараметрыФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий)
			Или ЭтоОтветныйТитул(ПараметрыФайлаЭД.ТипЭлементаВерсииЭД) Тогда
			
			ПолучаемДанные = Истина;
			ПараметрыФайлаЭД.Вставить("ВидЭД", Неопределено);
			
		ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
				Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
				Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
				Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
				Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
				Или (ПараметрыФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
					И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
						Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
						Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
						Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
						Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
						Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
						Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
						Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав)) Тогда
			
			ПолучаемДанные = Истина;
			ПараметрыФайлаЭД.Вставить("ВидЭД", ПараметрыЭД.ВидЭД);
			
		КонецЕсли;
		
		// Если уже установлена хотя бы одна подпись, документ менять нельзя, иначе подпись станет недействительной.
		Если УстановленныеПодписи.Количество() > 0 Тогда
			ПолучаемДанные = Ложь;
		КонецЕсли;
			
		Если ПолучаемДанные Тогда 
			
			Если СтрНайти(ПараметрыФайлаЭД.Расширение, "xml") > 0 Тогда
				
				ИмяФайла = ПолучитьИмяВременногоФайла(ПараметрыФайлаЭД.Расширение);
				ДвоичныеДанныеЭД.Записать(ИмяФайла);
				
			ИначеЕсли СтрНайти(ПараметрыФайлаЭД.Расширение, "zip") > 0 Тогда
				
				ИмяАрхива = ПолучитьИмяВременногоФайла("zip");
				ДвоичныеДанныеЭД.Записать(ИмяАрхива);
				ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("signature", СсылкаНаФайлЭД.УникальныйИдентификатор());
				
				ОбменСКонтрагентамиВнутренний.РаспаковатьАрхив(ИмяАрхива, ПапкаДляРаспаковки, НСтр("ru = 'Извлечение ЭД CML из архива при подписи'"));
				
				ФайлыЭД = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
				Если ФайлыЭД.Количество() > 0 Тогда
					ИмяФайла = ФайлыЭД[0].ПолноеИмя;
				КонецЕсли;
				
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяАрхива);
			КонецЕсли;
			
			// Прочитаем файл для последующего редактирования.
			ОписаниеОшибки = "";
			ДанныеФайлаЭД = ОбменСКонтрагентамиВнутренний.ДанныеФайлаЭД(ИмяФайла, ОписаниеОшибки);
			Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
				ВызватьИсключение ОписаниеОшибки;
			КонецЕсли;
			
			// Заполним тег Подписант в ЭД.
			ПространствоИменСхемы = ДанныеФайлаЭД.Тип().URIПространстваИмен;
			ЗаполнитьДанныеПодписантаЭД(ДанныеФайлаЭД, ПространствоИменСхемы, ПараметрыФайлаЭД, СертификатПодписи);
			
			ДанныеФайлаЭД.Проверить();
			
			// Записываем ЭД в файл и удаляем пространство имен только у ФНС документов.
			Если ДанныеФайлаЭД.Свойства().Получить("ИдФайл") <> Неопределено Тогда
				
				ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(ДанныеФайлаЭД, ИмяФайла, Ложь);
				ОбменСКонтрагентамиВнутренний.УдалитьПространствоИмен(ИмяФайла, ПространствоИменСхемы);
			Иначе
				ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(ДанныеФайлаЭД, ИмяФайла);
			КонецЕсли;
			
			Если СтрНайти(ПараметрыФайлаЭД.Расширение, "zip") > 0 Тогда
				
				ИмяФайла = ПолучитьИмяВременногоФайла("zip");
				АрхивКонтейнер = Новый ЗаписьZipФайла(ИмяФайла);
				
				ФайлыАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*");
				Для Каждого Файл Из ФайлыАрхива Цикл
					АрхивКонтейнер.Добавить(Файл.ПолноеИмя);
				КонецЦикла;
				
				Попытка
					АрхивКонтейнер.Записать();
				Исключение
					ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование архива ЭД при подписи'"),
						ТекстОшибки, НСтр("ru = 'Невозможно записать архив'"));
				КонецПопытки;
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
				
			КонецЕсли;
			
			ДвоичныеДанныеЭД = Новый ДвоичныеДанные(ИмяФайла);
			
			ИнформацияОФайле = Новый Структура;
			ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭД));
			ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
			
			РаботаСФайлами.ОбновитьФайл(СсылкаНаФайлЭД, ИнформацияОФайле);
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДвоичныеДанныеЭД;
	
КонецФункции

// Выполняет действия с ЭД после установки электронной подписи.
//
// Параметры:
//  СоответствиеСертификатовПодписаннымЭд - Соответствие - ключ: СправочникСсылка.СертификатыЭлектроннойПодписиИШифрования,
//														   значение: массив, элементы - СправочникСсылка.ЭДПрисоединенныеФайлы;
//  ЭДСНезавершеннойПодписью - Массив - массив документов, по которым подписание еще не завершено, 
//										элементы: СправочникСсылка.ЭДПрисоединенныеФайлы.
//
Процедура ДействияПослеПодписанияЭДНаСервере(СоответствиеСертификатовПодписаннымЭд, ЭДСНезавершеннойПодписью = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭДСНезавершеннойПодписью = Неопределено Тогда
		ЭДСНезавершеннойПодписью = Новый Массив;
	КонецЕсли;
	
	Для Каждого СертификатМассивЭД Из СоответствиеСертификатовПодписаннымЭд Цикл
		Сертификат = СертификатМассивЭД.Ключ;
		МассивЭДКОбновлениюСтатуса = СертификатМассивЭД.Значение;
		
		Для Каждого ПрисоединенныйФайл Из МассивЭДКОбновлениюСтатуса Цикл
			СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл.ВладелецФайла, "ПрофильНастроекЭДО.СпособОбменаЭД");
			
			НачатьТранзакцию();
			Попытка
				СтруктураПараметров = Новый Структура;
				ВесМаршрута = 0;
				ЭлектронноеВзаимодействиеСлужебный.ОбновитьМаршрутПриПодписании(ПрисоединенныйФайл, Сертификат, ВесМаршрута);
				ПредставлениеПрогрессаПодписания = ПредставлениеПрогрессаПодписания(
						ПрисоединенныйФайл, ВесМаршрута);
				СтруктураПараметров.Вставить("ПредставлениеПрогрессаПодписания", ПредставлениеПрогрессаПодписания);
								
				Если ЭлектронныйДокументПолностьюПодписан(ПрисоединенныйФайл) Тогда
					НаправлениеЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "НаправлениеЭД");
					Если НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
						НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(
																				Перечисления.СтатусыЭД.ПолностьюПодписан,
																				ПрисоединенныйФайл);
					Иначе
						НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(
																				Перечисления.СтатусыЭД.Подписан,
																				ПрисоединенныйФайл);
					КонецЕсли;
					
					СтруктураПараметров.Вставить("СтатусЭД", НовыйСтатусЭД);
					ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
					ОбменСКонтрагентамиПереопределяемый.НазначенСтатусПодписан(ПрисоединенныйФайл);
				Иначе
					ЭДСНезавершеннойПодписью.Добавить(ПрисоединенныйФайл);
					
					НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(
						Перечисления.СтатусыЭД.ЧастичноПодписан, ПрисоединенныйФайл);
					

					СтруктураПараметров.Вставить("СтатусЭД", НовыйСтатусЭД);
					СтруктураПараметров.Вставить("Изменил", Пользователи.АвторизованныйПользователь());
					ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
					
					// Нужно принудительно обновить регистр сведений "СостоянияЭД", поскольку изменилось количество подписей.
					ОбновитьВерсиюЭДВРегистре(ПрисоединенныйФайл.ВладелецФайла, ПрисоединенныйФайл.ВладелецФайла.СостояниеЭДО,
						Новый Структура("ПредставлениеСостояния", "1"));
				КонецЕсли;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ШаблонСообщения = НСтр("ru = 'Ошибка подписи электронного документа %1'");
				ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%1", ПрисоединенныйФайл);
				Операция = НСтр("ru = 'установка подписи ЭП'");
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения);
				Продолжить;
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Определяет принадлежность сертификата пользователя к облачному сервису.
//
// Параметры:
//  Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат электронной подписи и шифрования.
//
// Возвращаемое значение:
//  Булево - Истина, если сертификат является облачным.
//
Функция ЭтоСертификатОблачногоСервиса(Сертификат) Экспорт
	
	ВозвращаемоеЗначение = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток КАК Отпечаток,
		|	ЕСТЬNULL(ПрограммыЭлектроннойПодписиИШифрования.ЭтоПрограммаОблачногоСервиса, ЛОЖЬ) КАК ЭтоПрограммаОблачногоСервиса
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрограммыЭлектроннойПодписиИШифрования КАК ПрограммыЭлектроннойПодписиИШифрования
		|		ПО СертификатыКлючейЭлектроннойПодписиИШифрования.Программа = ПрограммыЭлектроннойПодписиИШифрования.Ссылка
		|ГДЕ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Сертификат);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.ЭтоПрограммаОблачногоСервиса Тогда
			ВозвращаемоеЗначение = Истина;
		Иначе
			Отпечатки = Новый Соответствие;
			ПолучитьЛичныеОтпечаткиВСервисе(Отпечатки);
			Если ЗначениеЗаполнено(Отпечатки)
				И Отпечатки.Получить(Выборка.Отпечаток) <> Неопределено Тогда
				ВозвращаемоеЗначение = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получает отпечатки сертификатов пользователя в облачном сервисе.
//
// Параметры:
//  ОтпечаткиОблачныхСертификатов - Соответствие - Ключ - отпечаток в формате строки Base64, а Значение - Истина;
//
Процедура ПолучитьЛичныеОтпечаткиВСервисе(ОтпечаткиСертификатов) Экспорт
	
	ДатаСеанса = ТекущаяДатаСеанса();
	
	МодульХранилищеСертификатов = ОбщегоНазначения.ОбщийМодуль("ХранилищеСертификатов");
	ПерсональныеСертификаты = МодульХранилищеСертификатов.Получить("ПерсональныеСертификаты");
	Для Каждого ПерсональныйСертификат Из ПерсональныеСертификаты Цикл
		Если ПерсональныйСертификат.ДатаОкончания <= ДатаСеанса Тогда
			Продолжить; // Пропуск просроченных сертификатов.
		КонецЕсли;

		Отпечаток = Base64Строка(ПерсональныйСертификат.Отпечаток);
		ОтпечаткиСертификатов.Вставить(Отпечаток, Истина);
	КонецЦикла;
		
КонецПроцедуры

// Возвращает признак использования сертификатов пользователя в облачном сервисе.
//
// Возвращаемое значение:
//  Булево - флаг использования в сертификатов пользователя в облачном сервисе.
//
Функция ИспользованиеСертификатовОблачногоСервисаВозможно() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИспользованиеВозможно = Константы.ИспользоватьСертификатыОблачногоСервисаВЭДО.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ИспользованиеВозможно;
	
КонецФункции

// Определение действующей настройки ЭДО.
//
// Параметры:
//  СсылкаНаВладельца - Ссылка - электронный документ.
//  ПараметрыЭД - Структура - параметры поиска и заполнения данными.
//  ВидЭД - ПеречислениеСсылка.ВидыЭД - вид электронного документа.
//  СообщатьОбОшибке - Булево - признак вывода сообщения об ошибке.
// 
// Возвращаемое значение:
//  Булево - Истина, если настройка определена.
//
Функция ОпределитьДействующуюНастройкуЭДО(СсылкаНаВладельца, ПараметрыЭД = Неопределено, ВидЭД = Неопределено, СообщатьОбОшибке = Ложь) Экспорт
	
	Результат = Истина;
	
	ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаВладельца);
	Если Не ЗначениеЗаполнено(ПараметрыЭД.ВидЭД) Тогда
		
		Если ЗначениеЗаполнено(ВидЭД) Тогда
			
			ПараметрыЭД.ВидЭД = ВидЭД;
		Иначе
			МассивСсылок = Новый Массив;
			МассивСсылок.Добавить(СсылкаНаВладельца);
			
			СоответствиеВладельцевИЭД = ВладельцыИЭлектронныеДокументы(МассивСсылок);
			Для Каждого ТекЭл Из МассивСсылок Цикл
				
				СсылкаНаЭД = СоответствиеВладельцевИЭД.Получить(ТекЭл);
				Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
					ПараметрыЭД.ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОбмена = ОпределитьНастройкиОбменаЭД(ПараметрыЭД, Неопределено);
	
	Если Не ЗначениеЗаполнено(ПараметрыОбмена) Тогда
		Результат = Ложь;
		
		Если ЗначениеЗаполнено(ПараметрыЭД.Контрагент) И ЗначениеЗаполнено(ПараметрыЭД.Организация) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СоглашенияОбИспользованииЭД.Ссылка,
			|	СоглашенияОбИспользованииЭД.СтатусПодключения
			|ИЗ
			|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
			|ГДЕ
			|	СоглашенияОбИспользованииЭД.Контрагент = &Контрагент
			|	И СоглашенияОбИспользованииЭД.ДоговорКонтрагента = &ДоговорКонтрагента
			|	И СоглашенияОбИспользованииЭД.Организация = &Организация
			|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления";
			Запрос.УстановитьПараметр("Контрагент",         ПараметрыЭД.Контрагент);
			Запрос.УстановитьПараметр("ДоговорКонтрагента", ПараметрыЭД.ДоговорКонтрагента);
			Запрос.УстановитьПараметр("Организация",        ПараметрыЭД.Организация);
			
			// Получаем настройки ЭДО безусловно
			УстановитьПривилегированныйРежим(Истина);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Не Выборка.Следующий() Тогда
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	СоглашенияОбИспользованииЭД.Ссылка,
				|	СоглашенияОбИспользованииЭД.СтатусПодключения
				|ИЗ
				|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
				|ГДЕ
				|	СоглашенияОбИспользованииЭД.Контрагент = &Контрагент
				|	И СоглашенияОбИспользованииЭД.Организация = &Организация
				|	И СоглашенияОбИспользованииЭД.ДоговорКонтрагента = &ДоговорКонтрагента
				|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления";
				Запрос.УстановитьПараметр("Контрагент",         ПараметрыЭД.Контрагент);
				Запрос.УстановитьПараметр("Организация",        ПараметрыЭД.Организация);
				Запрос.УстановитьПараметр("ДоговорКонтрагента", ОбменСКонтрагентамиПовтИсп.ПолучитьПустуюСсылку("ДоговорыКонтрагентов"));
				Запрос.Выполнить().Выбрать();
				Если НЕ Выборка.Следующий() И СообщатьОбОшибке Тогда
					ШаблонСообщения = НСтр("ru = 'Не удалось определить настройку ЭДО для параметров: 
						|организация %1, 
						|контрагент %2, 
						|договор %3.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, 
						ПараметрыЭД.Организация, ПараметрыЭД.Организация, ПараметрыЭД.ДоговорКонтрагента);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
			
			ПараметрыЭД.Вставить("НастройкаЭДО", Выборка.Ссылка);
			ПараметрыЭД.Вставить("СтатусПодключения", Выборка.СтатусПодключения);
		КонецЕсли;
	Иначе
		ПараметрыЭД.Вставить("НастройкаЭДО", ПараметрыОбмена.СоглашениеЭД);
		ПараметрыЭД.Вставить("СтатусПодключения", ПараметрыОбмена.СоглашениеЭД.СтатусПодключения);
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получение соответствия документов и электронных документов.
//
// Параметры:
//  СписокВладельцев - Массив - владельцы электронных документов.
//  СписокЭлектронныхДокументов - Массив - электронные документы.
// 
// Возвращаемое значение:
//  Соответствие - ссылки на владельцев и электронных документов.
//
Функция ВладельцыИЭлектронныеДокументы(СписокВладельцев = Неопределено, СписокЭлектронныхДокументов = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СоответствиеВладельцевИЭД = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Если Не СписокВладельцев = Неопределено Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
		|	СостоянияЭД.ЭлектронныйДокумент КАК СсылкаНаЭД
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.СсылкаНаОбъект В(&СписокВладельцев)";
		Запрос.УстановитьПараметр("СписокВладельцев", СписокВладельцев);
	ИначеЕсли Не СписокЭлектронныхДокументов = Неопределено Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
		|	СостоянияЭД.ЭлектронныйДокумент КАК СсылкаНаЭД
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.ЭлектронныйДокумент В(&СписокЭлектронныхДокументов)";
		Запрос.УстановитьПараметр("СписокЭлектронныхДокументов", СписокЭлектронныхДокументов);
	Иначе
		Возврат СоответствиеВладельцевИЭД;
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	СоответствиеВладельцевИЭД = Новый Соответствие;
	Пока Результат.Следующий() Цикл
		СоответствиеВладельцевИЭД.Вставить(Результат.ВладелецЭД, Результат.СсылкаНаЭД);
	КонецЦикла;
	
	Возврат СоответствиеВладельцевИЭД;
	
КонецФункции

Процедура ВыполнитьДействияПоСтатусамПриФормированииИлиУтверждении(ТаблицаЭД,
	ВыполняетсяОбновлениеИнформационнойБазы = Ложь) Экспорт
	
	ДокументыРеализации = Новый Массив;
	ДокументыОтклонения = Новый Массив;
	УтвержденныеСФ		= Новый Массив;
	Для Каждого ТекСтрока Из ТаблицаЭД Цикл
		СсылкаНаЭД = ТекСтрока.СсылкаНаЭД;
		ЭтоСлужебныйДокумент = ЭтоСлужебныйДокумент(СсылкаНаЭД);
		
		Если НЕ ЭтоСлужебныйДокумент Тогда 					
			// Для исходящих ЭД изменим состояние документов основания 
			Если ТекСтрока.ВидЭД = Перечисления.ВидыЭД.СчетФактура
				И ТекСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				УтвержденныеСФ.Добавить(СсылкаНаЭД);
			Иначе
				Если ЭтоДокументРеализации(ТекСтрока) Тогда
					ДокументыРеализации.Добавить(СсылкаНаЭД);
				КонецЕсли;
			КонецЕсли;
			ДокументыОтклонения.Добавить(СсылкаНаЭД);
		КонецЕсли;
	КонецЦикла;
	
	// Меняем состояние предыдущих входящих с.ф.
	Если УтвержденныеСФ.Количество() > 0 Тогда
		ОбменСКонтрагентамиВнутренний.ИзменитьСостояниеСФОснований(УтвержденныеСФ, Перечисления.НаправленияЭД.Входящий,
			ВыполняетсяОбновлениеИнформационнойБазы);
	КонецЕсли;
		
	// Для документов вида РТУ меняем состояние их документов основания, если они есть
	Если ДокументыРеализации.Количество() > 0 Тогда
		ОбменСКонтрагентамиВнутренний.ИзменитьСостояниеОснованийРТУ(ДокументыРеализации, ВыполняетсяОбновлениеИнформационнойБазы);
	КонецЕсли;
	
	Если ДокументыОтклонения.Количество() > 0 Тогда
		УстановитьСостояниеЗавершенПоОтклонению(ДокументыОтклонения, ВыполняетсяОбновлениеИнформационнойБазы);
	КонецЕсли;

КонецПроцедуры

// Проверяет необходимость отправки документа сразу после утверждения или подписания.
// 
// Возвращаемое значение:
// Булево - признак необходимости немедленной отправки электронных документов.
//
Функция НемедленнаяОтправкаЭД() Экспорт
	
	Настройки = НастройкиОбменаСКонтрагентами();
	
	Возврат Не Настройки.ИспользоватьОтложеннуюОтправкуЭД;
	
КонецФункции

// Возвращает признак наличия у пользователя прав на выполнение ЭДО.
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости выводить сообщение о нарушении прав доступа.
//
// Возвращаемое значение:
//  Булево - Истина, если у пользователя есть необходимые права, иначе Ложь.
//
Функция ЕстьПравоВыполненияОбмена(ВыводитьСообщение = Ложь) Экспорт
	
	ЕстьПраво = Пользователи.РолиДоступны("ВыполнениеОбменаСКонтрагентами")
		И ЕстьПравоОбработкиЭД();
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		
		ЭлектронноеВзаимодействиеСлужебный.СообщитьПользователюОНарушенииПравДоступа();
		
	КонецЕсли;
		
	Возврат ЕстьПраво;
	
КонецФункции

// Возвращает признак наличия у пользователя прав на добавление и изменение электронных документов.
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости выводить сообщение о нарушении прав доступа.
//
// Возвращаемое значение:
//  Булево - Истина, если у пользователя есть необходимые права, иначе Ложь.
//
Функция ЕстьПравоОбработкиЭД(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = Истина;
	
	ОбменСКонтрагентамиПереопределяемый.ПриПроверкеПраваОбработкиЭлектронныхДокументов(ЕстьПраво);
	
	Если ЕстьПраво Тогда
		
		// Основные объекты метаданных, доступ к которым определяет доступ к элементарной функции.
		ОбъектыЭлементарнойФункции = Новый Массив;
		ОбъектыЭлементарнойФункции.Добавить(Метаданные.Справочники.ЭДПрисоединенныеФайлы);
		
		Для каждого Объект Из ОбъектыЭлементарнойФункции Цикл
			
			Если Не ПравоДоступа("Изменение", Объект) Тогда
				ЕстьПраво = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		
		ЭлектронноеВзаимодействиеСлужебный.СообщитьПользователюОНарушенииПравДоступа();
		
	КонецЕсли;
		
	Возврат ЕстьПраво;
	
КонецФункции

// По ссылке на документ определяет есть ли у него электронный документ счет-фактура
// или корректировочный счет-фактура.
//
// Параметры:
//  СсылкаНаВладельца - ДокументСсылка - ссылка на документ владельца.
//
// Возвращаемое значение:
//  Булево - факт существования документа.
//
Функция ЕстьРабочийЭСФ(СсылкаНаВладельца) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаВладельца
	|	И СостоянияЭД.ЭлектронныйДокумент <> ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)
	|	И СостоянияЭД.ЭлектронныйДокумент.ВидЭД В (ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура), ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КорректировочныйСчетФактура))
	|	И СостоянияЭД.ЭлектронныйДокумент.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен)";
	
	Запрос.УстановитьПараметр("СсылкаНаВладельца", СсылкаНаВладельца);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

// Проверяет что эд счет-фактура имеет конечный статус в зависимости от направления.
//
// Параметры:
//  СсылкаСФ - ДокументСсылка - ссылка на документ счет-фактуры
//  НаправлениеЭД - Перечисления.НаправленияЭД - направление обмена.
// 
// Возвращаемое значение:
//  Булево - Истина, если обмен завершен.
//
Функция ДОСФЗавершен(СсылкаСФ, НаправлениеЭД) Экспорт
	
	ДОЗавершен = Ложь;
	СвойстваСчетФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаСФ, "СтатусЭД, ВладелецФайла");
	Если НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДОЗавершен = (СвойстваСчетФактуры.СтатусЭД = Перечисления.СтатусыЭД.Утвержден);
	Иначе
		СтатусСФ = СвойстваСчетФактуры.СтатусЭД;
		ТребуетсяИзвещение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваСчетФактуры.ВладелецФайла, "ТребуетсяИзвещение");
		ДОЗавершен = (СтатусСФ = Перечисления.СтатусыЭД.Доставлен)
			Или (Не ТребуетсяИзвещение И (СтатусСФ = Перечисления.СтатусыЭД.Отправлен));
	КонецЕсли;
	
	Возврат ДОЗавершен;
	
КонецФункции

// Перезаполняет документ информационной базы данными электронного документа.
//
// Параметры:
//  ДокументИБ - ДокументСсылка - ссылка на перезаполняемый документ информационной базы;
//  ЭД - ДокументСсылка.ЭлектронныйДокументВходящий, ДокументСсылка.ЭлектронныйДокументИсходящий - ссылка на электронный документ;
//  ОбъектМетаданных - Строка - возвращает название объекта метаданных перезаполняемого документа;
//  ДокументЗагружен - Булево - если Истина, то документ успешно перезаполнен;
//  СпособОбработки - Строка - способ обработки электронного документа.
//
Процедура ПерезаполнитьДокументыИБПоЭД(ДокументИБ, Знач ЭД, ОбъектМетаданных = Неопределено, ДокументЗагружен = Ложь, СпособОбработки = "") Экспорт
	
	// Для однократной сделки в электронном документе будет Структура.
	
	Если ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
		Или ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
		Эд = ПрисоединенныйФайл(ЭД);
	КонецЕсли;
	
	Если ЭтоОтветныйТитул(ЭД.ТипЭлементаВерсииЭД) Тогда
		
		ЭД = ЭД.ЭлектронныйДокументВладелец;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособОбработки) Тогда
		ВладелецЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Эд, "ВладелецФайла");
		СвойстваВладельцаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецЭД,
			"НастройкаЭДО, ВидЭД, ТипЭлементаВерсииЭД");
		
		СпособОбработки = СпособОбработкиВходящегоДокумента(
			СвойстваВладельцаЭД.НастройкаЭДО, СвойстваВладельцаЭД.ВидЭД, СвойстваВладельцаЭД.ТипЭлементаВерсииЭД);
	КонецЕсли;
	
	ЗаполнитьДокументИБПоЭД(ДокументИБ, ЭД, ДокументЗагружен, СпособОбработки);
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ДокументИБ)).ПолноеИмя();
	
КонецПроцедуры

// Только для внутреннего использования
Функция ПолучитьДанныеЭД(СсылкаНаЭД) Экспорт
	
	СсылкаНаДанные = "";
	
	ДопИнформацияПоЭД = ПолучитьДанныеФайла(СсылкаНаЭД);
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
		И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		
		Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
			ИмяФайла = ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
		Иначе
			ИмяФайла = ТекущееИмяВременногоФайла("xml");
		КонецЕсли;
		
		ДанныеЭД.Записать(ИмяФайла);
		
		Если СтрНайти(ДопИнформацияПоЭД.Расширение, "zip") > 0
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД") = Перечисления.ВидыЭД.КаталогТоваров Тогда
			СсылкаНаДанные = ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла
		ИначеЕсли СтрНайти(ДопИнформацияПоЭД.Расширение, "zip") > 0 Тогда
			
			ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаЭД.УникальныйИдентификатор());
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки, "*.*");
			
			Если Не ОбменСКонтрагентамиВнутренний.РаспаковатьАрхив(
				ИмяФайла, ПапкаДляРаспаковки, НСтр("ru = 'Распаковка пакета ЭД'")) Тогда
				
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
				Возврат "";
			КонецЕсли;
			
			ФайлыАрхиваXML = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
			Для Каждого РаспакованныйФайл Из ФайлыАрхиваXML Цикл
				ДвоичныеДанныеФайла = Новый ДвоичныеДанные(РаспакованныйФайл.ПолноеИмя);
				СсылкаНаДанные = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
				Прервать;
			КонецЦикла;
			
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
			
		ИначеЕсли СтрНайти(ДопИнформацияПоЭД.Расширение, "xml") > 0 Тогда
			СсылкаНаДанные = ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СсылкаНаДанные;
	
КонецФункции

// Получает таблицу значений с данными по электронным документам.
//
// Параметры:
//  МассивСсылокНаВладельцев - Массив - ссылки на владельцев электронных документов, данные которых необходимо получить.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица электронных документов.
//
Функция ПолучитьДанныеЭДПоВладельцам(МассивСсылокНаВладельцев) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
	|	СостоянияЭД.СостояниеВерсииЭД КАК СостояниеВерсииЭД,
	|	СостоянияЭД.ДействияСНашейСтороны КАК ДействияСНашейСтороны,
	|	СостоянияЭД.ДействияСоСтороныДругогоУчастника КАК ДействияСоСтороныДругогоУчастника
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылокНаВладельцев)";
	
	Запрос.УстановитьПараметр("МассивСсылокНаВладельцев", МассивСсылокНаВладельцев);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция МожноОтклонитьЭтотЭД(СсылкаНаФайлЭД, ФормироватьУОУ = Ложь) Экспорт
	
	ВозвращаемоеЗначение = Ложь;
	
	МассивЭД = Новый Массив;
	МассивЭД.Добавить(СсылкаНаФайлЭД);
	ПараметрыОтклонения = ПараметрыОтклоненияЭД(МассивЭД, ФормироватьУОУ);
	
	Если ПараметрыОтклонения.Количество() > 0 Тогда
		ВозвращаемоеЗначение = Истина;
		ФормироватьУОУ = ПараметрыОтклонения[0].ФормироватьУОУ;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПараметрыОтклоненияЭД(МассивЭД, ФормироватьУОУ = Ложь) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	ВозвращаемоеЗначение = Новый Массив; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД,
	|	МАКСИМУМ(ЭДПрисоединенныеФайлы.СтатусЭД) КАК СтатусЭД,
	|	МАКСИМУМ(ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД) КАК ТипЭлементаВерсииЭД,
	|	МАКСИМУМ(ЭДПрисоединенныеФайлы.НаправлениеЭД) КАК НаправлениеЭД,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЭД_ПОА.Ссылка ЕСТЬ NULL
	|					ИЛИ ЭД_ПОА.Ссылка = &ЭДПрисоединенныеФайлыПустаяСсылка
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ПОАНеЗаведено,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЭДПрисоединенныеФайлы.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	|				ТОГДА ВЫБОР
	|						КОГДА ЭДПрисоединенныеФайлы.ВладелецФайла.ВидЭД В (&ВидыЭДПервичныхТитулов)
	|							ТОГДА ВЫБОР
	|									КОГДА ПодчиненныеЭД.Ссылка ЕСТЬ NULL
	|											ИЛИ ПодчиненныеЭД.Ссылка = &ЭДПрисоединенныеФайлыПустаяСсылка
	|											ИЛИ ПодчиненныеЭД.СтатусЭД В (&СтатусыИсходящихПервичныхЭДДопускающиеОтклонение)
	|										ТОГДА ИСТИНА
	|									ИНАЧЕ ЛОЖЬ
	|								КОНЕЦ
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ЭДПрисоединенныеФайлы.ВладелецФайла.ВидЭД В (&ВидыЭДСФ)
	|									ТОГДА ВЫБОР
	|											КОГДА ЭДПрисоединенныеФайлы.СтатусЭД В (&СтатусыЭДСФДопускающиеОтклонение)
	|												ТОГДА ИСТИНА
	|											ИНАЧЕ ЛОЖЬ
	|										КОНЕЦ
	|								ИНАЧЕ ЭДПрисоединенныеФайлы.СтатусЭД В (&СтатусыВходящихПервичныхЭДДопускающиеОтклонение)
	|							КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ ЭДПрисоединенныеФайлы.СтатусЭД В (&СтатусыИсходящихПервичныхЭДДопускающиеОтклонение)
	|		КОНЕЦ) КАК СтатусДопускаетОтклонение,
	|	МАКСИМУМ(ЭДПрисоединенныеФайлы.ВладелецФайла.ВидЭД) КАК ВидЭД,
	|	МАКСИМУМ(ЭДПрисоединенныеФайлы.ВладелецФайла.ТребуетсяПодтверждение) КАК ТребуетсяПодтверждение,
	|	МАКСИМУМ(ЕСТЬNULL(ПодчиненныеЭД.ПодписанЭП, ЛОЖЬ)) КАК ОтветПодписан
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭД_ПОА
	|		ПО ЭДПрисоединенныеФайлы.Ссылка = ЭД_ПОА.ЭлектронныйДокументВладелец
	|			И (ЭД_ПОА.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПОА))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПодчиненныеЭД
	|		ПО ЭДПрисоединенныеФайлы.Ссылка = ПодчиненныеЭД.ЭлектронныйДокументВладелец
	|			И (ПодчиненныеЭД.ТипЭлементаВерсииЭД В (&ТипыЭДОтветныхТитулов))
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка В(&МассивЭД)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭДПрисоединенныеФайлы.Ссылка";
	Запрос.УстановитьПараметр("МассивЭД", МассивЭД);
	Запрос.УстановитьПараметр("ЭДПрисоединенныеФайлыПустаяСсылка", Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка());
	СтатусыИсходящихЭДДопускающиеОтклонение = Новый Массив;
	СтатусыИсходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Сформирован);
	СтатусыИсходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Утвержден);
	СтатусыИсходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Подписан);
	СтатусыИсходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
	Запрос.УстановитьПараметр("СтатусыИсходящихПервичныхЭДДопускающиеОтклонение", СтатусыИсходящихЭДДопускающиеОтклонение);
	СтатусыВходящихЭДДопускающиеОтклонение = Новый Массив;
	СтатусыВходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Получен);
	СтатусыВходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Утвержден);
	СтатусыВходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Подписан);
	СтатусыВходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
	Запрос.УстановитьПараметр("СтатусыВходящихПервичныхЭДДопускающиеОтклонение", СтатусыВходящихЭДДопускающиеОтклонение);
	ВидыЭДОтветныхТитулов = Новый Массив;
	ВидыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
	ВидыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
	ВидыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	ВидыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
	ВидыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
	Запрос.УстановитьПараметр("ТипыЭДОтветныхТитулов", ВидыЭДОтветныхТитулов);
	ВидыЭДПервичныхТитулов = Новый Массив;
	ВидыЭДПервичныхТитулов.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	ВидыЭДПервичныхТитулов.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	ВидыЭДПервичныхТитулов.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	Запрос.УстановитьПараметр("ВидыЭДПервичныхТитулов", ВидыЭДПервичныхТитулов);
	ВидыЭДПервичныхТитулов = Новый Массив;
	ВидыЭДПервичныхТитулов.Добавить(Перечисления.ВидыЭД.СчетФактура);
	ВидыЭДПервичныхТитулов.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	Запрос.УстановитьПараметр("ВидыЭДСФ", ВидыЭДПервичныхТитулов);
	СтатусыЭДСФДопускающиеОтклонение = Новый Массив;
	СтатусыЭДСФДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Получен);
	СтатусыЭДСФДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Утвержден);
	Запрос.УстановитьПараметр("СтатусыЭДСФДопускающиеОтклонение", СтатусыЭДСФДопускающиеОтклонение);
	
	ТипыЭлементовВерсийСчетовФактур = Новый Массив;
	ТипыЭлементовВерсийСчетовФактур.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
	ТипыЭлементовВерсийСчетовФактур.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		ФормироватьУОУТекущее = ФормироватьУОУ;
		МожноОтклонить = Ложь;
		Если НЕ ЭДОтклонен(Выборка.СтатусЭД) Тогда
			Если Выборка.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
				МожноОтклонить = Истина;
				ФормироватьУОУТекущее = Выборка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
			ИначеЕсли НЕ ЭтоСлужебныйДокумент(Выборка.ТипЭлементаВерсииЭД)
				И Выборка.ПОАНеЗаведено И Выборка.СтатусДопускаетОтклонение
				// Запрещаем отклонение исходящих произвольных документов при подписи
				И НЕ (Выборка.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД 
					И Выборка.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий)
				// Запрещаем отклонение входящих утвержденных документов, не требующих ответной подписи или уже подписанных.
				// Исключение: счета-фактуры - их отклонение допускаем в отсутствие функционала аннулирования.
				И НЕ (Выборка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий 
					И Выборка.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
					И (Выборка.ОтветПодписан 
						ИЛИ Не Выборка.ТребуетсяПодтверждение И ТипыЭлементовВерсийСчетовФактур.Найти(Выборка.ТипЭлементаВерсииЭД) = Неопределено)) Тогда
						
				МожноОтклонить = Истина;
				ФормироватьУОУТекущее = (НЕ Выборка.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий);
			КонецЕсли;
			
			Если МожноОтклонить Тогда
				ВозвращаемоеЗначение.Добавить(НовыеПараметрыОтклоненияАннулирования(
					Выборка.ЭД, ФормироватьУОУТекущее, ЭтоСчетФактура(Выборка.ТипЭлементаВерсииЭД)));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;

КонецФункции

Функция ЭДОтклонен(СтатусЭД) Экспорт
	
	ЭДОтклонен = (СтатусЭД = Перечисления.СтатусыЭД.Отклонен
					Или СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
					Или СтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи);
	Возврат ЭДОтклонен
	
КонецФункции

Функция МожноАннулироватьЭтотЭД(Знач СсылкаНаЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивЭД = Новый Массив;
	МассивЭД.Добавить(СсылкаНаЭД);
	ПараметрыАннулированияЭД = ПараметрыАннулированияЭД(МассивЭД);
	МожноАннулировать = ПараметрыАннулированияЭД.Количество() > 0;
	
	Возврат МожноАннулировать;
	
КонецФункции

Функция ПараметрыАннулированияЭД(МассивЭД) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	ВозвращаемоеЗначение = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД,
	|	ПодчиненныеЭД.Ссылка КАК ПодчиненныйЭД,
	|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД,
	|	ЭДПрисоединенныеФайлы.НаправлениеЭД КАК НаправлениеЭД,
	|	ЭДПрисоединенныеФайлы.СтатусЭД КАК СтатусЭД,
	|	ПодчиненныеЭД.СтатусЭД КАК СтатусПодчиненногоЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭД_ПОА
	|		ПО (ЭД_ПОА.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПОА))
	|			И ЭДПрисоединенныеФайлы.Ссылка = ЭД_ПОА.ЭлектронныйДокументВладелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПодчиненныеЭД
	|		ПО ЭДПрисоединенныеФайлы.Ссылка = ПодчиненныеЭД.ЭлектронныйДокументВладелец
	|			И (ПодчиненныеЭД.ТипЭлементаВерсииЭД В (&ТипыЭДОтветныхТитулов))
	|ГДЕ
	|	НЕ ЭДПрисоединенныеФайлы.СтатусЭД В (&СписокСтатусовИсключений)
	|	И НЕ ЭДПрисоединенныеФайлы.ВладелецФайла.ТипЭлементаВерсииЭД В (&СписокТиповИсключений)
	|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
	|	И ЭДПрисоединенныеФайлы.Ссылка В(&МассивЭД)
	|	И ВЫБОР
	|			КОГДА ЭД_ПОА.Ссылка ЕСТЬ NULL
	|					ИЛИ ЭД_ПОА.Ссылка = &ЭДПрисоединенныеФайлыПустаяСсылка
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&ОсновныеТипыЭД)
	|	И НЕ(ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеВходящее
	|				И НЕ ЭДПрисоединенныеФайлы.ВладелецФайла.ТребуетсяПодтверждение)
	|ИТОГИ
	|	МАКСИМУМ(ПодчиненныйЭД),
	|	МАКСИМУМ(ТипЭлементаВерсииЭД),
	|	МАКСИМУМ(НаправлениеЭД),
	|	МАКСИМУМ(СтатусЭД)
	|ПО
	|	ЭД";
	
	Запрос.УстановитьПараметр("МассивЭД", МассивЭД);
	Запрос.УстановитьПараметр("ЭДПрисоединенныеФайлыПустаяСсылка", Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка());
	Запрос.УстановитьПараметр("НаправлениеВходящее", Перечисления.НаправленияЭД.Входящий);
	Запрос.УстановитьПараметр("ОсновныеТипыЭД", ОсновныеТипыЭД());
		
	СписокТиповИсключений = Новый Массив;
	СписокТиповИсключений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	СписокТиповИсключений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
	СписокТиповИсключений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
	СписокТиповИсключений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
	СписокТиповИсключений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
	СписокТиповИсключений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
	СписокТиповИсключений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
	Запрос.УстановитьПараметр("СписокТиповИсключений", СписокТиповИсключений);
	
	МассивСтатусовИсключений = Новый Массив;
	МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании);
	МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании);
	МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.Аннулирован);
	МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.Отклонен);
	МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.ОтклоненПолучателем);
	Запрос.УстановитьПараметр("СписокСтатусовИсключений", МассивСтатусовИсключений);
	
	ВидыЭДОтветныхТитулов = Новый Массив;
	ВидыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
	ВидыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
	ВидыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	Запрос.УстановитьПараметр("ТипыЭДОтветныхТитулов", ВидыЭДОтветныхТитулов);
	
	ВыборкаЭД = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЭД.Следующий() Цикл
		ОбрабатываемыйЭД = ВыборкаЭД.ЭД;
		СтатусЭД = ВыборкаЭД.СтатусЭД;
		Если ВыборкаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
			И ЗначениеЗаполнено(ВыборкаЭД.ПодчиненныйЭД) Тогда
				ВыборкаПодчиненныхЭД = ВыборкаЭД.Выбрать();
				ВыборкаПодчиненныхЭД.Следующий();
				
				ОбрабатываемыйЭД = ВыборкаПодчиненныхЭД.ПодчиненныйЭД;
				СтатусЭД = ВыборкаПодчиненныхЭД.СтатусПодчиненногоЭД;
		КонецЕсли;
		НастройкиОбмена = НастройкиОбменаЭД(ОбрабатываемыйЭД);
		МассивСтатусов = ВернутьМассивСтатусовЭД(НастройкиОбмена);
		Если МассивСтатусов.ВГраница() >= 0 И СтатусЭД = МассивСтатусов[МассивСтатусов.ВГраница()] Тогда
			ВозвращаемоеЗначение.Добавить(НовыеПараметрыОтклоненияАннулирования( 
					ВыборкаЭД.ЭД, Истина, ЭтоСчетФактура(ВыборкаЭД.ТипЭлементаВерсииЭД)));	
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;

КонецФункции

// Ищет документы основания ИБ по реквизиту документа ЭД"НомерЭД" документа и заполняет ОснованияИБ.
//
// Параметры:
//  НомераЭД - Массив ИД документов основания,
//             колонка "ИдентификаторДокументаОснования" табличной части "ИдентификаторыОснованийВладельцаФайла" ЭД;
//  НаправлениеЭД - определяет параметры поиска документа (входящий, исходящий);
//  ОснованияИБ - массив в который помещаются документы основания.
//
Процедура НайтиДокументыОснования(НомераЭД, НаправлениеЭД, ОснованияИБ) Экспорт
	
	Запрос = Новый Запрос;
	Если НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ДокументОснования,
		|	ЭДПрисоединенныеФайлы.НомерЭД КАК НомерЭД
		|ПОМЕСТИТЬ втЭД
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.НомерЭД В(&НомераЭД)
		|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД))
		|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОснования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийИдентификаторыОснованийВладельцаФайла.ИдентификаторДокументаОснования КАК ИДОснования
		|ИЗ
		|	втЭД КАК втЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий.ИдентификаторыОснованийВладельцаФайла КАК ЭлектронныйДокументВходящийИдентификаторыОснованийВладельцаФайла
		|		ПО втЭД.ДокументОснования = ЭлектронныйДокументВходящийИдентификаторыОснованийВладельцаФайла.Ссылка
		|		И втЭД.НомерЭД <> ЭлектронныйДокументВходящийИдентификаторыОснованийВладельцаФайла.ИдентификаторДокументаОснования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЭД КАК втЭД
		|		ПО ЭлектронныйДокументВходящийДокументыОснования.Ссылка = втЭД.ДокументОснования";
		
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ДокументОснования,
		|	ЭДПрисоединенныеФайлы.НомерЭД КАК НомерЭД
		|ПОМЕСТИТЬ втЭД
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.НомерЭД В(&НомераЭД)
		|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД))
		|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОснования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийИдентификаторыОснованийВладельцаФайла.ИдентификаторДокументаОснования КАК ИДОснования
		|ИЗ
		|	втЭД КАК втЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий.ИдентификаторыОснованийВладельцаФайла КАК ЭлектронныйДокументИсходящийИдентификаторыОснованийВладельцаФайла
		|		ПО втЭД.ДокументОснования = ЭлектронныйДокументИсходящийИдентификаторыОснованийВладельцаФайла.Ссылка
		|		И втЭД.НомерЭД <> ЭлектронныйДокументИсходящийИдентификаторыОснованийВладельцаФайла.ИдентификаторДокументаОснования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование
		|ИЗ
		|	втЭД КАК втЭД
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
		|		ПО втЭД.ДокументОснования = ЭлектронныйДокументИсходящийДокументыОснования.Ссылка";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НомераЭД", НомераЭД);
	Запрос.УстановитьПараметр("НаправлениеЭД", НаправлениеЭД);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Выборка = МассивРезультатов[2].Выбрать();
		
	Пока Выборка.Следующий() Цикл
		ОснованияИБ.Добавить(Выборка.ДокументОснование);
	КонецЦикла;
	
	Выборка = МассивРезультатов[1].Выбрать();
		
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ИДОснования) Тогда
			МассивИД = Новый Массив;
			МассивИД.Добавить(Выборка.ИДОснования);
			
			НайтиДокументыОснования(МассивИД, НаправлениеЭД, ОснованияИБ)
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

// Только для внутреннего использования
Функция ЕстьДоступныеСертификаты(МассивОтпечатковСертификатов, ЭД) Экспорт
	
	ИмяДокумента = "";
	Если ТипЗнч(ЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		ЭлектронныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД,"ВладелецФайла");
	Иначе
		ЭлектронныйДокумент = ЭД;
	КонецЕсли;
	
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
		ИмяДокумента = "ЭлектронныйДокументИсходящий";
	ИначеЕсли ТипЗнч(ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
		ИмяДокумента = "ЭлектронныйДокументВходящий";
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка,
	|	ЭДПрисоединенныеФайлы.ВидЭД,
	|	ЭДПрисоединенныеФайлы.НастройкаЭДО КАК СоглашениеЭД,
	|	ЭДПрисоединенныеФайлы.ПрофильНастроекЭДО
	|ПОМЕСТИТЬ ВТ_ЭД
	|ИЗ
	|	Документ." + ИмяДокумента + " КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка = &Ссылка
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПрофилиЭДОСертификаты.Сертификат КАК Сертификат
	|ПОМЕСТИТЬ СертификатыИзНастроекИПрофилей
	|ИЗ
	|	ВТ_ЭД КАК ВТ_ЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиЭДОСертификаты
	|		ПО ВТ_ЭД.ПрофильНастроекЭДО = ПрофилиЭДОСертификаты.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|			
	|ВЫБРАТЬ
	|	СоглашенияЭДСертификаты.Сертификат
	|ИЗ
	|	ВТ_ЭД КАК ВТ_ЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
	|		ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭДСертификаты.Ссылка
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Сертификаты.Ссылка
	|ИЗ
	|	ВТ_ЭД КАК ВТ_ЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
	|		ПО ВТ_ЭД.ВидЭД = ВидыЭДЭП.ВидЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|		ПО ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка
	|			И ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СертификатыИзНастроекИПрофилей КАК СертификатыИзНастроекИПрофилей
	|		ПО (СертификатыИзНастроекИПрофилей.Сертификат = Сертификаты.Ссылка ИЛИ ВТ_ЭД.СоглашениеЭД.ЭтоИнтеркампани)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ПО ЭДПрисоединенныеФайлы.ВладелецФайла = ВТ_ЭД.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеПодписанияЭД КАК СостояниеПодписанияЭД
	|		ПО ЭДПрисоединенныеФайлы.Ссылка = СостояниеПодписанияЭД.Объект
	|			И СостояниеПодписанияЭД.Текущий
	|				И СостояниеПодписанияЭД.Подписант В (&ТекущийПользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|				И (СостояниеПодписанияЭД.Сертификат = Сертификаты.Ссылка 
	|					ИЛИ СостояниеПодписанияЭД.Сертификат = ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
	|				И (СостояниеПодписанияЭД.Организация = Сертификаты.Организация
	|					ИЛИ СостояниеПодписанияЭД.Организация = &ПустаяОрганизация))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭД_ЭП
	|			ПО ВТ_ЭД.Ссылка = ЭД_ЭП.ПодписанныйОбъект
	|				И ЭД_ЭП.Отпечаток = Сертификаты.Отпечаток
	|ГДЕ
	|	НЕ Сертификаты.Отозван
	|	И Сертификаты.Пользователь В (&ТекущийПользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка), &ПользовательНеУказан)
	|	И НЕ Сертификаты.ПометкаУдаления
	|	И ВидыЭДЭП.Использовать
	|	И Сертификаты.Отпечаток В(&МассивОтпечатков)
	|	И ЭД_ЭП.Отпечаток ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("МассивОтпечатков",		МассивОтпечатковСертификатов);
	Запрос.УстановитьПараметр("ТекущийПользователь",	Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("ПользовательНеУказан",	Пользователи.СсылкаНеуказанногоПользователя());
	Запрос.УстановитьПараметр("ПустаяОрганизация",		Метаданные.ОпределяемыеТипы.Организация.Тип.ПривестиЗначение());
	Запрос.УстановитьПараметр("Ссылка",					ЭлектронныйДокумент);

	УстановитьПривилегированныйРежим(Истина);
	ЕстьСертификаты = НЕ Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЕстьСертификаты;
	
КонецФункции

// Возвращает массив проведенных документов.
//
// Параметры:
//  МассивДокументов - Массив - массив ссылок на документы.
//
// Возвращаемое значение:
//  Массив - массив ссылок на документы, которые проведены.
//
Функция МассивПроведенныхДокументов(Знач МассивДокументов) Экспорт
	
	МассивПроведенныхДокументов = Новый Массив;
	МассивПроводимыхДокументов = ЭлектронноеВзаимодействиеСлужебный.МассивПроводимыхДокументов(
		МассивДокументов);
	
	Для Каждого Документ Из МассивПроводимыхДокументов Цикл
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Проведен") Тогда
			МассивПроведенныхДокументов.Добавить(Документ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПроведенныхДокументов;
	
КонецФункции

// Только для внутреннего использования
Процедура УстановитьОтветственногоЭД(Знач СписокОбъектов, Знач НовыйОтветственный, КоличествоОбработанныхЭД,
	ПричинаПеренаправления = "") Экспорт
	
	МассивЭД = Новый Массив;
	КоличествоОбработанныхЭД = 0;
	
	Для Каждого ЭлСписка Из СписокОбъектов Цикл
		Если ТипЗнч(ЭлСписка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		МассивЭД.Добавить(ЭлСписка.Ссылка);
	КонецЦикла;
	
	Если МассивЭД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла
	|ПОМЕСТИТЬ вт_Владельцы
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка В(&МассивЭД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭлектронныйДокументВходящий.Ссылка,
	|	ЭлектронныйДокументВходящий.Ответственный,
	|	ЭлектронныйДокументВходящий.СостояниеЭДО
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
	|ГДЕ
	|	ЭлектронныйДокументВходящий.Ссылка В
	|			(ВЫБРАТЬ
	|				вт_Владельцы.ВладелецФайла
	|			ИЗ
	|				вт_Владельцы КАК вт_Владельцы)
	|	И (ЭлектронныйДокументВходящий.Ответственный <> &Ответственный
	|			ИЛИ &ЗаписьОписания)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйДокументИсходящий.Ссылка,
	|	ЭлектронныйДокументИсходящий.Ответственный,
	|	ЭлектронныйДокументИсходящий.СостояниеЭДО
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
	|ГДЕ
	|	ЭлектронныйДокументИсходящий.Ссылка В
	|			(ВЫБРАТЬ
	|				вт_Владельцы.ВладелецФайла
	|			ИЗ
	|				вт_Владельцы КАК вт_Владельцы)
	|	И (ЭлектронныйДокументИсходящий.Ответственный <> &Ответственный
	|			ИЛИ &ЗаписьОписания)";
	
	Запрос.УстановитьПараметр("МассивЭД", МассивЭД);
	Запрос.УстановитьПараметр("Ответственный", НовыйОтветственный);
	Запрос.УстановитьПараметр("ЗаписьОписания", ?(ЗначениеЗаполнено(ПричинаПеренаправления), Истина, Ложь));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Попытка
		Пока Выборка.Следующий() Цикл
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Ответственный = НовыйОтветственный;
			ДокументОбъект.Текст = ?(ПустаяСтрока(ДокументОбъект.Текст), "", ДокументОбъект.Текст + Символы.ПС) + ПричинаПеренаправления;
			ДокументОбъект.Записать();
			КоличествоОбработанныхЭД = КоличествоОбработанныхЭД + 1;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось установить ответственного электронного документа (%1). %2'"), 
			Выборка.Ссылка,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
КонецПроцедуры

// Только для внутреннего использования
Функция ДОЗакрытПринудительно(ВладелецФайла) Экспорт
	
	СостояниеЭДО = СостояниеДокументооборота(ВладелецФайла);
	
	Результат = Ложь;
	Если СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьСостояниеЭДО(ДокументИБ, СостояниеЭДО) Экспорт
	
	Если ТипЗнч(СостояниеЭДО) = Тип("ПеречислениеСсылка.СостоянияВерсийЭД") Тогда
		Состояния = Новый Массив;
		Состояния.Добавить(СостояниеЭДО);
	Иначе
		Состояния = СостояниеЭДО;
	КонецЕсли;
	
	СостояниеДО = СостояниеДокументооборота(ДокументИБ);
	
	Результат = Истина;
	Если Состояния.Найти(СостояниеДО) = Неопределено Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Дополняет массив пакетов, которые будут распаковываться, не распакованными пакетами.
// 
// Параметры:
//  ПакетыСоСвойствами - массив, элементами которого являются структура, которая содержит
//                       ссылка на документ ПакетЭД и параметры, необходимые для его распаковки.
//
Процедура ДополнитьПакетамиКРаспаковке(МассивПакетовЭД, ПрофилиЭДО) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетЭД.Ссылка КАК Пакет
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.СтатусПакета = &СтатусПакета
	|	И ПакетЭД.ПометкаУдаления = ЛОЖЬ
	|	И ПакетЭД.ПрофильНастроекЭДО В(&ПрофилиЭДО)
	|	И НЕ ПакетЭД.Ссылка В (&НовыеПакеты)";
	
	Запрос.УстановитьПараметр("СтатусПакета", Перечисления.СтатусыПакетовЭД.КРаспаковке);
	Запрос.УстановитьПараметр("ПрофилиЭДО", ПрофилиЭДО);
	Запрос.УстановитьПараметр("НовыеПакеты", МассивПакетовЭД);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивПакетовЭДКРаспаковке = Результат.Выгрузить().ВыгрузитьКолонку("Пакет");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПакетовЭД, МассивПакетовЭДКРаспаковке);
	
КонецПроцедуры

// Возвращает правила редактирования регламента строки профиля (или настройки) ЭДО.
// Параметры:
//  ВидЭД - ПеречислениеСсылка.ВидыЭД - вид электронного документа.
//  ВерсияФормата - строка - версия формата электронного документа.
//  СпособОбмена - СправочникСсылка.ПрофилиНастроекЭДО - профиль ЭДО.
// Возвращаемое значение:
//  Настройки - Структура с полями РедактироватьПодпись, РедактироватьИзвещение, РедактироватьОтветнуюПодпись.
//
Функция РегламентПрофиляЭДО(ВидЭД, ВерсияФормата, СпособОбменаЭДО) Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("РедактироватьПодпись", Ложь);
	Настройки.Вставить("РедактироватьИзвещение", Ложь);
	Настройки.Вставить("РедактироватьОтветнуюПодпись", Ложь);
	
	Если ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		И ВРег(ВерсияФормата) = ВРег("ФНС 5.01 (С 2016Г.)") Тогда
		
		Настройки.РедактироватьОтветнуюПодпись = Истина;
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетФактура
		Или ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		
		Настройки.РедактироватьИзвещение = Истина;
		
	КонецЕсли;
	
	Если ОбменСКонтрагентамиСлужебныйКлиентСервер.ЭтоПрямойОбмен(СпособОбменаЭДО) Тогда
		Настройки.РедактироватьПодпись = Истина;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#Область ПроверкаСостоянияКонтрагентовВ1СЭДО

#Область ПроверкаКонтрагентов

// Часть фонового задания по проверке контрагента из формы контрагента
Процедура ПроверитьКонтрагентаФоновоеЗадание(Параметры) Экспорт
	
	// Присвоение даты находится здесь, так как ТекущаяДатаСеанса работает только на сервере.
	Если Не Параметры.Свойство("Дата") Тогда
		Параметры.Вставить("Дата", НачалоДня(ТекущаяДатаСеанса()));
	КонецЕсли;
	
	Попытка
		ПроверитьКонтрагента(Параметры, Параметры.АдресХранилища);
	Исключение
		
		Операция = НСтр("ru = 'Проверка подключения контрагента к 1С-ЭДО из формы контрагента.'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Процедура - Проверка одного контрагента по ИНН, КПП и Дате.
//
// Параметры:
//  Параметры	 - Структура - Параметры запуска фонового задания. Ключи структуры:
//		"Контрагент" - СправочникСсылка.<Контрагенты> - Проверяемый контрагент.
//		"ИНН"		 - Строка - ИНН Контрагента.
//		"КПП"		 - Строка - КПП Контрагента.
//		"Дата"		 - Дата - Дата, на которую выполняется проверка контрагента. Может быть не указана,
//		                  тогда берется текущая дата.
//		"СохранятьРезультатСразуПослеПроверки" - Булево - Признак, указывающий нужно ли результат
//		                  проверки контрагента сразу сохранять в регистр.
//		"АдресХранилища" - Строка - Адрес, в который будет помещен результат проверки контрагента.
//  АдресХранилища	 - Строка - Адрес временного хранилища, в который будет помещен результат проверки контрагента.
Процедура ПроверитьКонтрагента(Параметры, АдресХранилища)
	
	// Готовим данные в нужном формате для передачи на проверку.
	ДанныеКонтрагентов = ШаблонТаблицыДанныеКонтрагента();
	
	НоваяСтрока = ДанныеКонтрагентов.Добавить();
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		НоваяСтрока.ОбластьДанныхВспомогательныеДанные = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Параметры);
	
	ПроверитьКонтрагентов(ДанныеКонтрагентов, АдресХранилища, Истина, Параметры.СохранятьРезультатСразуПослеПроверки);
	
КонецПроцедуры

// Процедура - Проверка нескольких контрагентов.
//
// Параметры:
//  ДанныеКонтрагентов					 - ТаблицаЗначений - Содержит данные проверяемых контрагентов. 
//		Структуру колонок таблицы см в функции ШаблонТаблицыДанныеКонтрагента.
//  АдресХранилища						 - Строка - Адрес, в который будет помещен результат проверки контрагента.
//  ЭтоПроверкаСправочника				 - Булево - Указывает, выполняется ли проверка справочника. 
//		Для справочника результат проверки сохраняется во временное хранилище, либо записывается в регистр.
//		Для остальных объектов результат проверки заполняется в колонке Состояние таблицы ДанныеКонтрагентов.
//  СохранятьРезультатСразуПослеПроверки - Булево - Признак, указывающий нужно ли результат проверки контрагента.
Процедура ПроверитьКонтрагентов(ДанныеКонтрагентов, АдресХранилища = Неопределено, ЭтоПроверкаСправочника = Истина,
	СохранятьРезультатСразуПослеПроверки = Ложь)
	
	// Если доступа к ВебСервису нет, то проверку не делаем.
	Если Не ЕстьДоступКВебСервису1CЭДО() Тогда
		Возврат;
	КонецЕсли;
	
	// Если по некоторым контрагентам можно определить, что они не существуют, не обращаясь к сервису, то к сервису по ним
	// обращаться не будем.
	Если ЭтоПроверкаСправочника Тогда
		ПолучитьСостоянияКонтрагентовИзКэша(ДанныеКонтрагентов);
	КонецЕсли;

	// Приведение данных к нужному формату, выявление записей с ошибками.
	ПодготовитьДанныеКПроверке(ДанныеКонтрагентов);
	
	// Получение результатов проверки от веб-сервиса.
	// Проверяем только тех контрагентов, у которых неопределено состояние и у которых нет ошибок.
	Отбор = Новый Структура();
	Отбор.Вставить("Состояние", Перечисления.СостоянияКонтрагентаБЭД.ПустаяСсылка());
	ПолучитьРезультатПроверкиВебСервисом(ДанныеКонтрагентов, Отбор);
	
	// Сохраняем результаты проверки, если это справочник.
	Если ЭтоПроверкаСправочника Тогда
		УстановитьПривилегированныйРежим(Истина);
		СохранитьРезультатыПроверкиСправочника(ДанныеКонтрагентов, АдресХранилища, СохранятьРезультатСразуПослеПроверки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНепроверенныхКонтрагентов(ЭтоОбновлениеИБВМоделиСервиса, Параметры = Неопределено) Экспорт
	
	// Выбираем контрагентов, которых нет в регистре сведений.
	Запрос = Новый Запрос;
	Текст = 
	"ВЫБРАТЬ %5
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.%1 КАК ИНН,
	|	Контрагенты.%2 КАК КПП,
	|	&ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,
	|	&Дата КАК Дата
	|ИЗ
	|	Справочник.%3 КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
	|		ПО Контрагенты.Ссылка = СостоянияКонтрагентовБЭД.Контрагент
	|ГДЕ
	|	СостоянияКонтрагентовБЭД.Состояние ЕСТЬ NULL 
	|	%4";
		
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
		Текст = СтрЗаменить(
			Текст,
			"&ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,",
			"");
		
	КонецЕсли;
	
	ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Контрагенты");
	ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	УсловиеНаГруппу = "";
	Если СправочникКонтрагентовИерархический() Тогда
		УсловиеНаГруппу = "И Контрагенты.ЭтоГруппа = ЛОЖЬ";
	КонецЕсли;
	
	ОграничениеНаПрава = "";
	Если ЭтоОбновлениеИБВМоделиСервиса Тогда
		РазмерПорции = 1000;
		ОграничениеНаПрава = "РАЗЛИЧНЫЕ ПЕРВЫЕ " + Формат(РазмерПорции, "ЧГ=0");
	Иначе
		ОграничениеНаПрава = "РАЗЛИЧНЫЕ";
	КонецЕсли;
	
	Запрос.Текст = СтрШаблон(Текст, 
		ИмяРеквизитаИННКонтрагента, 
		ИмяРеквизитаКППКонтрагента, 
		ИмяПрикладногоСправочника, 
		УсловиеНаГруппу,
		ОграничениеНаПрава);
		
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		Запрос.УстановитьПараметр("ОбластьДанныхВспомогательныеДанные", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса()));
	ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
	
	// Прерываем обновление, если не осталось необработанных данных.
	Если ЭтоОбновлениеИБВМоделиСервиса Тогда
		Параметры.ОбработкаЗавершена = ДанныеКонтрагентов.Количество() = 0;
		Если Параметры.ОбработкаЗавершена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьКонтрагентов(ДанныеКонтрагентов);
	
КонецПроцедуры

// Проверяет статус подключения организации в сервисе 1С-ЭДО.
//
// Параметры:
//   Организация - ОпределяемыйТип.Организация - ссылка на определяемый справочник Организация.
//   Результат - Булево, Строка - результат проверки организации в сервисе,
//     если передан адрес временного хранилища, то результат будет помещен по данному адресу.
//
Процедура ПроверитьОрганизациюВ1СЭДО(Организация, Результат) Экспорт

	ОрганизацияПодключена = Ложь;
	Если ЗначениеЗаполнено(Организация) Тогда
	
		ИмяРеквизитаИННОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
		ИмяРеквизитаКППОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
		
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация,
			ИмяРеквизитаИННОрганизации + "," + ИмяРеквизитаКППОрганизации);
		
		Если ЗначениеЗаполнено(РеквизитыОрганизации[ИмяРеквизитаИННОрганизации]) Тогда
			
			ДанныеОрганизации = Новый ТаблицаЗначений;
			ДанныеОрганизации.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12)));
			ДанныеОрганизации.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(9)));
			ДанныеОрганизации.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияКонтрагентаБЭД"));
			
			НоваяСтрока = ДанныеОрганизации.Добавить();
			НоваяСтрока.ИНН = РеквизитыОрганизации[ИмяРеквизитаИННОрганизации];
			НоваяСтрока.КПП = РеквизитыОрганизации[ИмяРеквизитаКППОрганизации];
			
			Отбор = Новый Структура();
			Отбор.Вставить("Состояние", Перечисления.СостоянияКонтрагентаБЭД.ПустаяСсылка());
			ПолучитьРезультатПроверкиВебСервисом(ДанныеОрганизации, Отбор);
			
			ОрганизацияПодключена = ДанныеОрганизации[0].Состояние = Перечисления.СостоянияКонтрагентаБЭД.Подключен;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Строка") И ЭтоАдресВременногоХранилища(Результат) Тогда
		ПоместитьВоВременноеХранилище(ОрганизацияПодключена, Результат);
	Иначе
		Результат = ОрганизацияПодключена;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентовВСправочнике

// Подписка на событие. Добавление в регистр набора ИНН и КПП для последующей проверки регламентным заданием.
//
// Параметры:
//  КонтрагентОбъект - СправочникОбъект.<Контрагенты> - записываемый контрагент.
//  Отказ			 - Булево - Параметр обработчика подписки на событие.
Процедура СохранитьРезультатПроверкиКонтрагентаПриЗаписи(Объект, Отказ) Экспорт 
	
	Если Объект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоИдентификаторОбъектаМетаданных(Объект) Тогда
		Возврат;
	КонецЕсли;

	Если СправочникКонтрагентовИерархический() И Объект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияКонтрагентовБЭД.Состояние
	|ИЗ
	|	РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
	|ГДЕ
	|	СостоянияКонтрагентовБЭД.Контрагент = &Контрагент
	|	И СостоянияКонтрагентовБЭД.ИНН = &ИНН
	|	И СостоянияКонтрагентовБЭД.КПП = &КПП";
	
	Запрос.УстановитьПараметр("ИНН", Объект[ИмяРеквизитаИННКонтрагента]);
	Запрос.УстановитьПараметр("КПП", Объект[ИмяРеквизитаКППКонтрагента]);
	Запрос.УстановитьПараметр("Контрагент", Объект.Ссылка);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКонтрагента = Новый Структура;
	
	ДанныеКонтрагента.Вставить("Контрагент",	Объект.Ссылка);
	ДанныеКонтрагента.Вставить("ИНН", 			Объект[ИмяРеквизитаИННКонтрагента]);
	ДанныеКонтрагента.Вставить("КПП",			Объект[ИмяРеквизитаКППКонтрагента]);
	ДанныеКонтрагента.Вставить("Дата", 			НачалоДня(ТекущаяДатаСеанса()));
	ДанныеКонтрагента.Вставить("Состояние", 	Перечисления.СостоянияКонтрагентаБЭД.НеПодключен);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		ДанныеКонтрагента.Вставить("ОбластьДанныхВспомогательныеДанные", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СохранитьРезультатыПроверкиКонтрагентаВРегистр(ДанныеКонтрагента);
	
КонецПроцедуры

#КонецОбласти

#Область ПодготовкаДанныхКПроверке

// Проверка ошибок, удаление дублей.
Процедура ПодготовитьДанныеКПроверке(ДанныеКонтрагентовДляПроверки)
	
	ДанныеКонтрагентов = ДанныеКонтрагентовТипизированные(ДанныеКонтрагентовДляПроверки);
	ОставитьРазрешенныхКонтрагентов(ДанныеКонтрагентов);
	СвернутьДанныеКонтрагентов(ДанныеКонтрагентов);
	
	ДанныеКонтрагентовДляПроверки = ДанныеКонтрагентов;
	
КонецПроцедуры

Функция ДанныеКонтрагентовТипизированные(ДанныеКонтрагентовДляПроверки)
	
	// Создаем таблицу
	ДанныеКонтрагентов = ШаблонТаблицыДанныеКонтрагента();
	ЕстьОбластьДанных = ДанныеКонтрагентовДляПроверки.Колонки.Найти("ОбластьДанныхВспомогательныеДанные") <> Неопределено И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса");
	
	// Копируем таблицу, сохраняя типы колонок.
	Для каждого ДанныеКонтрагентаДляПроверки Из ДанныеКонтрагентовДляПроверки Цикл
		
		// Копируем данные из таблицы с "сырыми данными" в таблицу с "типизированными" колонками.
		ДанныеКонтрагента = ДанныеКонтрагентов.Добавить();
		
		// В зависимости от наличия колонки ОбластьДанныхВспомогательныеДанные, копируем разный набор данных.
		СписокСвойств = "Контрагент, ИНН, КПП, Состояние, Дата";
		Если ЕстьОбластьДанных Тогда
			СписокСвойств = СписокСвойств + ", ОбластьДанныхВспомогательныеДанные";
		КонецЕсли;
		
		// Гарантировано контрагент не подключен, если поля не заполнены.
		Если Не ЗначениеЗаполнено(ДанныеКонтрагентаДляПроверки.ИНН) И Не ЗначениеЗаполнено(ДанныеКонтрагентаДляПроверки.КПП) Тогда
			ДанныеКонтрагентаДляПроверки.Состояние = Перечисления.СостоянияКонтрагентаБЭД.НеПодключен;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеКонтрагента, ДанныеКонтрагентаДляПроверки, СписокСвойств);
		
	КонецЦикла;
	
	Возврат ДанныеКонтрагентов;
	
КонецФункции

Процедура СвернутьДанныеКонтрагентов(ДанныеКонтрагентов)
	
	// Удаляем из таблицы дубли
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		ДанныеКонтрагентов.Свернуть("Контрагент, ИНН, КПП, Дата, Состояние, ОбластьДанныхВспомогательныеДанные");
	Иначе
		ДанныеКонтрагентов.Свернуть("Контрагент, ИНН, КПП, Дата, Состояние");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - В таблице ДанныеКонтрагентов оставляет только записи по контрагентам,
//		к которым есть доступ. В модели сервиса из неразделенной области проверку делать
//		не нужно, поскольку регламентное задание выполняется под администратором 
//		и нет доступа к разделенному справочнику контрагентов.
//
Процедура ОставитьРазрешенныхКонтрагентов(ДанныеКонтрагентов)
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	Если НЕ РазделениеВключено
		ИЛИ РазделениеВключено И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДанныеКонтрагентов.Контрагент,
			|	ДанныеКонтрагентов.ИНН,
			|	ДанныеКонтрагентов.КПП,
			|	ДанныеКонтрагентов.Дата,
			|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ДанныеКонтрагентов.Состояние
			|ПОМЕСТИТЬ ВсеДанныеКонтрагентов
			|ИЗ
			|	&ДанныеКонтрагентов КАК ДанныеКонтрагентов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВсеДанныеКонтрагентов.Контрагент КАК Контрагент
			|ПОМЕСТИТЬ ВсеКонтрагенты
			|ИЗ
			|	Справочник.%1 КАК СправочникКонтрагентов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеДанныеКонтрагентов КАК ВсеДанныеКонтрагентов
			|		ПО СправочникКонтрагентов.Ссылка = ВсеДанныеКонтрагентов.Контрагент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВсеДанныеКонтрагентов.Контрагент,
			|	ВсеДанныеКонтрагентов.ИНН,
			|	ВсеДанныеКонтрагентов.КПП,
			|	ВсеДанныеКонтрагентов.Дата,
			|	ВсеДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ВсеДанныеКонтрагентов.Состояние
			|ИЗ
			|	ВсеДанныеКонтрагентов КАК ВсеДанныеКонтрагентов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеКонтрагенты КАК ВсеКонтрагенты
			|		ПО (ВсеКонтрагенты.Контрагент = ВсеДанныеКонтрагентов.Контрагент)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВсеДанныеКонтрагентов.Контрагент,
			|	ВсеДанныеКонтрагентов.ИНН,
			|	ВсеДанныеКонтрагентов.КПП,
			|	ВсеДанныеКонтрагентов.Дата,
			|	ВсеДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ВсеДанныеКонтрагентов.Состояние
			|ИЗ
			|	ВсеДанныеКонтрагентов КАК ВсеДанныеКонтрагентов
			|ГДЕ
			|	ВсеДанныеКонтрагентов.Контрагент = ЗНАЧЕНИЕ(Справочник.%1.ПустаяСсылка)";
			
		Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"ВсеДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
				"");
				
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
				"");
				
		КонецЕсли;
			
		ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Контрагенты");
		Запрос.Текст = СтрШаблон(Запрос.Текст, ИмяПрикладногоСправочника);
			
		Запрос.УстановитьПараметр("ДанныеКонтрагентов", ДанныеКонтрагентов);
		ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСВебСервисом

Процедура ПолучитьРезультатПроверкиВебСервисом(ДанныеКонтрагентов, Отбор)
	
	// Проверяем только тех контрагентов, которые соответствуют указанному отбору
	ДанныеКонтрагентовДляПроверкиСервисом = ДанныеКонтрагентов.НайтиСтроки(Отбор);
	КоличествоКонтрагентов = ДанныеКонтрагентовДляПроверкиСервисом.Количество();

	Если КоличествоКонтрагентов = 0 Тогда
		// Нет данных для проверки
		Возврат;
	КонецЕсли;
	
	РазмерПорции = 10000;
	
	// Разбиваем всю таблицу на блоки запросов 
	КоличествоЗапросов = ?(КоличествоКонтрагентов % РазмерПорции = 0, КоличествоКонтрагентов / РазмерПорции, Цел(КоличествоКонтрагентов / РазмерПорции) + 1);
		
	// Выполняем несколько запросов. В каждом запросе не более 10000 строк
	Для НомерПорции = 1 По КоличествоЗапросов Цикл 
		
		МинимальныйНомерКонтрагента 	= Мин(РазмерПорции * (НомерПорции - 1), КоличествоКонтрагентов);
		МаксимальныйНомерКонтрагента 	= Мин(РазмерПорции * НомерПорции, КоличествоКонтрагентов) - 1;
		
		ИмяВременногоФайлаЗапросаСостояний = ТекущееИмяВременногоФайла("xml");
		ЗапросСостояний = Новый ЗаписьXML;
		ЗапросСостояний.ОткрытьФайл(ИмяВременногоФайлаЗапросаСостояний, "windows-1251");
		ЗапросСостояний.ЗаписатьОбъявлениеXML();
		ЗапросСостояний.ЗаписатьНачалоЭлемента("Abonents");
			
		Для ИндексТекущегоКонтрагента = МинимальныйНомерКонтрагента По МаксимальныйНомерКонтрагента Цикл
			
			ДанныеКонтрагента = ДанныеКонтрагентовДляПроверкиСервисом[ИндексТекущегоКонтрагента];
			
			ЗапросСостояний.ЗаписатьНачалоЭлемента("Abonent");
				ЗапросСостояний.ЗаписатьНачалоЭлемента("INN");
					ЗапросСостояний.ЗаписатьТекст(ДанныеКонтрагента.ИНН);
				ЗапросСостояний.ЗаписатьКонецЭлемента();
				ЗапросСостояний.ЗаписатьНачалоЭлемента("KPP");
					ЗапросСостояний.ЗаписатьТекст(ДанныеКонтрагента.КПП);
				ЗапросСостояний.ЗаписатьКонецЭлемента();
			ЗапросСостояний.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		ЗапросСостояний.ЗаписатьКонецЭлемента();
		ЗапросСостояний.Закрыть();
		
		Соединение = ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
		АдресРесурса = "GetMassInfo";
		
		// возможно будет ответ от сервера
		ИмяФайлаРезультата = ТекущееИмяВременногоФайла("xml"); ДанныеФайла = "";
		Попытка
			Соединение.ОтправитьДляОбработки(ИмяВременногоФайлаЗапросаСостояний, АдресРесурса, ИмяФайлаРезультата);
			
			ДанныеФайла = ПрочитатьТекстИзФайла(ИмяФайлаРезультата, , Истина);
			ОбработатьОтветСервиса(ДанныеФайла, ДанныеКонтрагентовДляПроверкиСервисом, МинимальныйНомерКонтрагента, МаксимальныйНомерКонтрагента);
		Исключение
			ЕстьОшибки = Истина;
			
			ФайлРезультата = Новый ТекстовыйДокумент;
			ФайлРезультата.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
			Результат = ФайлРезультата.ПолучитьТекст();
			
			ШаблонСообщения = НСтр("ru = 'При проверке состояния контрагентов на сервисе 1С-ЭДО возникла ошибка:'");
			
			Файл = Новый Файл(Файл);
			ТекстЗаголовкаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Файл.Имя);
				
			ТекстСообщения = "";
			Если ЗначениеЗаполнено(Результат) Тогда
				Результат = СтрЗаменить(Результат, """", "");
				Результат = СтрЗаменить(Результат, ":", ",");
				МассивПараметровОшибки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Результат, ",");
				Если МассивПараметровОшибки.Количество() >= 7 Тогда
					
					КодОшибки = МассивПараметровОшибки[5];
					
					ШаблонОшибки = НСтр("ru = '%1: %2.'");
					ТекстОшибкиЭДО = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
						МассивПараметровОшибки[7], МассивПараметровОшибки[1]);
					
					ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке(
						КодОшибки, ТекстОшибкиЭДО);
					
					ТекстСообщения = ТекстЗаголовкаСообщения + Символы.ПС + ТекстОшибки;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекстСообщения) Тогда
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				Результат = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КонецЕсли;
			
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ТекстЗаголовкаСообщения,
				Результат, ТекстСообщения);
		КонецПопытки;
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяВременногоФайлаЗапросаСостояний);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаРезультата);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьОтветСервиса(ДанныеФайла, ДанныеКонтрагентовДляПроверкиСервисом, МинимальныйНомерКонтрагента, МаксимальныйНомерКонтрагента)
	
	Если НЕ ПустаяСтрока(ДанныеФайла) Тогда
		
		ИННКПП = Новый Массив;
		ПрочитатьИННКППИзФайла(ИННКПП, ДанныеФайла);
		
		Если ИННКПП.Количество() >0 Тогда
			
			Для ИндексТекущегоКонтрагента = МинимальныйНомерКонтрагента По МаксимальныйНомерКонтрагента Цикл
				
				ДанныеКонтрагента = ДанныеКонтрагентовДляПроверкиСервисом[ИндексТекущегоКонтрагента];
				
				КлючПоиска = ДанныеКонтрагента.ИНН + ?(ЗначениеЗаполнено(ДанныеКонтрагента.КПП), "/"+ДанныеКонтрагента.КПП, "");
				
				НайденныйКонтрагент = ИННКПП.Найти(КлючПоиска);
				Если Не НайденныйКонтрагент = Неопределено Тогда
					ДанныеКонтрагента.Состояние = Перечисления.СостоянияКонтрагентаБЭД.Подключен;
				Иначе
					ДанныеКонтрагента.Состояние = Перечисления.СостоянияКонтрагентаБЭД.НеПодключен;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьРезультатаПроверкиВРегистрСведений

// Проверка нескольких контрагентов.
Процедура СохранитьРезультатыПроверкиСправочника(ДанныеКонтрагентов, АдресХранилища = Неопределено, СохранятьРезультатСразуПослеПроверки = Ложь)
	
	Если ДанныеКонтрагентов.Количество() = 1 Тогда
		
		ДанныеКонтрагента = ДанныеКонтрагентов[0]; 
	
		// Сохраняем во временное хранилище.
		Если ЗначениеЗаполнено(АдресХранилища)  Тогда
			ПоместитьВоВременноеХранилище(ДанныеКонтрагента.Состояние, АдресХранилища);
		КонецЕсли;
			
		// Сохраняем в регистр
		Если ЗначениеЗаполнено(ДанныеКонтрагента.Контрагент) 
			И (НЕ ЗначениеЗаполнено(АдресХранилища) ИЛИ СохранятьРезультатСразуПослеПроверки) Тогда
			
			СохранитьРезультатыПроверкиКонтрагентовВРегистр(ДанныеКонтрагентов);
			
		КонецЕсли;
		
	Иначе
		
		СохранитьРезультатыПроверкиКонтрагентовВРегистр(ДанныеКонтрагентов);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура СохранитьРезультатыПроверкиКонтрагентовВРегистр(ДанныеКонтрагентов)
	
	Для каждого ДанныеКонтрагента Из ДанныеКонтрагентов Цикл
		СохранитьРезультатыПроверкиКонтрагентаВРегистр(ДанныеКонтрагента);
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьРезультатыПроверкиКонтрагентаВРегистр(ДанныеКонтрагента)
	
	Ключ = Неопределено;
	
	Попытка
		
		Контрагент = ДанныеКонтрагента.Контрагент;
		
		// Блокируем по Контрагенту
		СтруктураКлюча = Новый Структура();
		СтруктураКлюча.Вставить("Контрагент", Контрагент);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			ОбластьДанныхВспомогательныеДанные	= ДанныеКонтрагента.ОбластьДанныхВспомогательныеДанные;
			СтруктураКлюча.Вставить("ОбластьДанныхВспомогательныеДанные", ОбластьДанныхВспомогательныеДанные);
		КонецЕсли;

		Ключ = РегистрыСведений.СостоянияКонтрагентовБЭД.СоздатьКлючЗаписи(СтруктураКлюча);
		ЗаблокироватьДанныеДляРедактирования(Ключ);
		
		// Записываем данные в регистр.
		НаборЗаписей = РегистрыСведений.СостоянияКонтрагентовБЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			НаборЗаписей.Отбор.ОбластьДанныхВспомогательныеДанные.Установить(ОбластьДанныхВспомогательныеДанные);
		КонецЕсли;
		// Проверим необходимость записи.
		ЕстьИзменения = Ложь;
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Выбран() И ЗначениеЗаполнено(НаборЗаписей) Тогда
			ТекущиеДанные = Новый Структура("Контрагент,Состояние,ИНН,КПП");
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, НаборЗаписей[0]);
			НовыеДанные = Новый Структура("Контрагент,Состояние,ИНН,КПП");
			ЗаполнитьЗначенияСвойств(НовыеДанные, ДанныеКонтрагента);
			Для каждого Данные Из ТекущиеДанные Цикл
				Если Данные.Значение <> НовыеДанные[Данные.Ключ] Тогда
					ЕстьИзменения = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЕстьИзменения = Истина;
		КонецЕсли;
		Если ЕстьИзменения Тогда
			НаборЗаписей.Очистить();
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ДанныеКонтрагента); 
			НаборЗаписей.Записать();
		КонецЕсли;
		
	Исключение
		Операция = НСтр("ru = 'Запись результатов проверки подключения контрагентов к 1С-ЭДО в регистр.'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки);
	КонецПопытки;
	
	Если Ключ <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(Ключ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Проверяет состояние уведомлений в сервисе 1С-ЭДО
//
// Параметры:
//  ИдентификаторОрганизации - Строка - Идентификатор организации
//  Соединение				 - Http соединение - Http соединение с сервером 1С-ЭДО.
// 
// Возвращаемое значение:
//  Булево - Состояние подключения уведомлений.
//
Функция УведомленияПодключены(ИдентификаторОрганизации, Соединение = Неопределено) Экспорт
	
	Если Соединение = Неопределено Тогда
		СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
		Соединение = ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(СпособОбмена);
	КонецЕсли;
	
	ВидОперации = НСтр("ru = 'Получение информации о состоянии уведомлений'");
	
	ИмяМетода = "CheckSubscriptions/" + ИдентификаторОрганизации;
	Запрос = Новый HTTPЗапрос(ИмяМетода);
	
	УведомленияВключены = Ложь;
	Попытка
		Ответ = Соединение.Получить(Запрос);
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Ошибка выполнения команды сервиса.'");
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
			
		Возврат УведомленияВключены;
		
	КонецПопытки;
		
	Если Не Ответ.КодСостояния = 200 Тогда
		
		ШаблонСообщения = НСтр("ru = 'Код ответа сервиса %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Ответ.КодСостояния);
		
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстСообщения);
		
		Возврат УведомленияВключены;
		
	КонецЕсли;
		
	Результат = Ответ.ПолучитьТелоКакСтроку();
	
	УведомленияВключены = ЗначениеСтатуса(Результат);
	
	Возврат УведомленияВключены;
	
КонецФункции

// Функция - Шаблон таблицы, используемой для передачи данных в веб-сервис ФНС.
// Возвращаемое значение:
// ТаблицаЗначений - пустая таблица с колонками "Контрагент", "ИНН", "КПП", "Дата", "Состояние", "ДополнительныеПараметры"
//                   "ОбластьДанныхВспомогательныеДанные"(если есть подсистема РаботаВМоделиСервиса).
Функция ШаблонТаблицыДанныеКонтрагента()
	
	// Создаем таблицу
	ДанныеКонтрагентов = Новый ТаблицаЗначений;
	
	ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Контрагенты");
	ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	Тип = "СправочникСсылка." + ИмяПрикладногоСправочника;
	
	// Проверяемый контрагент
	ДанныеКонтрагентов.Колонки.Добавить("Контрагент", 	Новый ОписаниеТипов(Тип));
	// ИНН контрагента
	ДанныеКонтрагентов.Колонки.Добавить(ИмяРеквизитаИННКонтрагента, 			Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12)));
	// КПП контрагента
	ДанныеКонтрагентов.Колонки.Добавить(ИмяРеквизитаКППКонтрагента, 			Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(9)));
	// Дата, на которую выполняется проверка контрагента.
	ДанныеКонтрагентов.Колонки.Добавить("Дата", 		Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	// Результат проверки контрагента.
	ДанныеКонтрагентов.Колонки.Добавить("Состояние", 	Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияКонтрагентаБЭД"));
	// Область данных
	ДобавитьКолонкуОбластьДанных(ДанныеКонтрагентов);

	Возврат ДанныеКонтрагентов;
	
КонецФункции

Процедура ДобавитьКолонкуОбластьДанных(Таблица)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		Таблица.Колонки.Добавить("ОбластьДанныхВспомогательныеДанные", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0, ДопустимыйЗнак.Неотрицательный)));
	КонецЕсли;
	
КонецПроцедуры

Функция СправочникКонтрагентовИерархический()
	
	ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Контрагенты");
	Возврат Метаданные.Справочники[ИмяПрикладногоСправочника].Иерархический;
	
КонецФункции

Процедура ПолучитьСостоянияКонтрагентовИзКэша(ДанныеКонтрагентов, ПолучатьВсеСостоянияИзРегистра = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	ДанныеКонтрагентов.Контрагент,
	              	|	ДанныеКонтрагентов.ИНН,
	              	|	ДанныеКонтрагентов.КПП,
	              	|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
	              	|	ДанныеКонтрагентов.Дата
	              	|ПОМЕСТИТЬ ДанныеКонтрагентов
	              	|ИЗ
	              	|	&ДанныеКонтрагентов КАК ДанныеКонтрагентов
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	ДанныеКонтрагентов.Контрагент,
	              	|	ДанныеКонтрагентов.ИНН,
	              	|	ДанныеКонтрагентов.КПП,
	              	|	ДанныеКонтрагентов.Дата,
	              	|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
	              	|	ВЫБОР
	              	|		КОГДА &ПолучатьВсеСостоянияИзРегистра
	              	|			ТОГДА СостоянияКонтрагентовБЭД.Состояние
	              	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияКонтрагентаБЭД.ПустаяСсылка)
	              	|	КОНЕЦ КАК Состояние
	              	|ИЗ
	              	|	ДанныеКонтрагентов КАК ДанныеКонтрагентов
	              	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
	              	|		ПО ДанныеКонтрагентов.Контрагент = СостоянияКонтрагентовБЭД.Контрагент
	              	|			И ДанныеКонтрагентов.ИНН = СостоянияКонтрагентовБЭД.ИНН
	              	|			И ДанныеКонтрагентов.КПП = СостоянияКонтрагентовБЭД.КПП
	              	|			И ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные = СостоянияКонтрагентовБЭД.ОбластьДанныхВспомогательныеДанные";
					
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
			"");
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"И ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные = СостоянияКонтрагентовБЭД.ОбластьДанныхВспомогательныеДанные",
			"");
		
	КонецЕсли;
				  
	Запрос.УстановитьПараметр("ПолучатьВсеСостоянияИзРегистра", ПолучатьВсеСостоянияИзРегистра); 
	
	Запрос.УстановитьПараметр("ДанныеКонтрагентов", ДанныеКонтрагентов);
	ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Только для внутреннего использования
Функция НовыйUUID() Экспорт
	
	Возврат НРег(СтрЗаменить(Строка(Новый("УникальныйИдентификатор")), "-", ""));
	
КонецФункции

// Функция - Значение статуса
// Преобразует бинарное значение статуса в файле xml или xdto в значение типа булево.
// Параметры:
//  ЗначениеСтатусаВФайле - Строка - значение статуса в файле xml.
// 
// Возвращаемое значение:
//  Булево - Значение статуса в файле.
//
Функция ЗначениеСтатуса(ЗначениеСтатусаВФайле) Экспорт
	
	Если ВРег(ЗначениеСтатусаВФайле) = ВРег("True") Тогда
		ЗначениеСтатуса = Истина;
	Иначе
		ЗначениеСтатуса = Ложь;
	КонецЕсли;
	
	Возврат ЗначениеСтатуса;
	
КонецФункции

Функция СтруктураПараметровЭД()
	
	ПараметрыЭД = Новый Структура;
	
	ПараметрыЭД.Вставить("ВидЭД",                Неопределено);
	ПараметрыЭД.Вставить("НаправлениеЭД",        Неопределено);
	ПараметрыЭД.Вставить("Контрагент",           Неопределено);
	ПараметрыЭД.Вставить("ДоговорКонтрагента",   Неопределено);
	ПараметрыЭД.Вставить("Организация",          Неопределено);
	ПараметрыЭД.Вставить("СоглашениеЭД",         Неопределено);
	ПараметрыЭД.Вставить("УстановленныеПодписи", Новый Массив);
	
	Если ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
		ПараметрыЭД.Вставить("Партнер",          Неопределено);
	КонецЕсли;
	
	Возврат ПараметрыЭД;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбменДокументами

Процедура ОбработатьПодтверждениеПолучения(Сообщение, ЭтоФайл = Ложь)
	
	Если ЭтоФайл Тогда
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(Сообщение.ПолноеИмя);
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ЛокальноеИмя = "ЭлектронныйДокумент" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ЧтениеXML.Прочитать();
				ДокументПакетЭД = ОпределитьПодтверждаемыйПакетЭД(ЧтениеXML.Значение);
			КонецЕсли;
			Если ЧтениеXML.ЛокальноеИмя = "ДатаПолучения" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ЧтениеXML.Прочитать();
				ДатаПолучения = Дата(ЧтениеXML.Значение);
			КонецЕсли;
		КонецЦикла;
		ЧтениеXML.Закрыть();
		
		Если ЗначениеЗаполнено(ДокументПакетЭД) И ДокументПакетЭД.СтатусПакета <> Перечисления.СтатусыПакетовЭД.Доставлен
			И ДатаПолучения <> Дата('00010101') Тогда
			ОбновитьСтатусыДокументовПакетаЭД(ДокументПакетЭД, Перечисления.СтатусыПакетовЭД.Доставлен, ДатаПолучения);
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(Сообщение.ПолноеИмя);
	Иначе
		Если СтрНайти(Сообщение.Тема, НСтр("ru = 'Подтверждение получения пакета электронных документов'")) > 0 Тогда
			Для Каждого Вложение Из Сообщение.Вложения Цикл
				ДвоичныеДанныеПодтверждения = Вложение.Значение;
				ИмяФайла = ТекущееИмяВременногоФайла("xml");
				ДвоичныеДанныеПодтверждения.Записать(ИмяФайла);
				
				ЧтениеXML = Новый ЧтениеXML;
				ЧтениеXML.ОткрытьФайл(ИмяФайла);
				Пока ЧтениеXML.Прочитать() Цикл
					Если ЧтениеXML.ЛокальноеИмя = "ЭлектронныйДокумент" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						ЧтениеXML.Прочитать();
						ДокументПакетЭД = ОпределитьПодтверждаемыйПакетЭД(ЧтениеXML.Значение);
					КонецЕсли;
					Если ЧтениеXML.ЛокальноеИмя = "ДатаПолучения" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						ЧтениеXML.Прочитать();
						ДатаПолучения = Дата(ЧтениеXML.Значение);
					КонецЕсли;
				КонецЦикла;
				ЧтениеXML.Закрыть();
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
				Если ЗначениеЗаполнено(ДокументПакетЭД) И ДокументПакетЭД.СтатусПакета <> Перечисления.СтатусыПакетовЭД.Доставлен
					И ДатаПолучения <> Дата('00010101') Тогда
					
					ОбновитьСтатусыДокументовПакетаЭД(ДокументПакетЭД, Перечисления.СтатусыПакетовЭД.Доставлен, ДатаПолучения);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОтправитьПодтверждениеПоПакету(ПакетЭД, РесурсОтправителя, АдресОтправителя, ТипОтправки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыборкаПрисоединенныхФайлов = ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", ПакетЭД));
	Если ЗначениеЗаполнено(ВыборкаПрисоединенныхФайлов) И ВыборкаПрисоединенныхФайлов.Следующий() Тогда
		Если ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
			ИмяПакетаЭД = ВыборкаПрисоединенныхФайлов.Наименование;
			
			ФайлXML = СформироватьXMLФайлПодтвержденияПолучения(ИмяПакетаЭД);
			СоответствиеВложений = Новый Соответствие;
			СоответствиеВложений.Вставить(ФайлXML.Имя, Новый ДвоичныеДанные(ФайлXML.ПолноеИмя));
			
			Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(АдресОтправителя, "Пароль");

			ПараметрыОтправки = Новый Структура();
			ПараметрыОтправки.Вставить("Кому",     АдресОтправителя);
			ПараметрыОтправки.Вставить("Тема",     НСтр("ru = 'Подтверждение получения пакета электронных документов:'") + " " + ИмяПакетаЭД);
			ПараметрыОтправки.Вставить("Тело",     "");
			ПараметрыОтправки.Вставить("Вложения", СоответствиеВложений);
			ПараметрыОтправки.Вставить("Пароль",   Пароль);
			Попытка
				РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(РесурсОтправителя, ПараметрыОтправки);
			Исключение
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Текст = НСтр("ru = 'Ошибка при отправке сообщения на сервер электронной почты.
				|%1'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ТекстОшибки);
				
				ТекстСообщения = НСтр("ru = 'Ошибка при отправке эл.документов.'");
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Отправка эл.документов'"),
				ТекстОшибки,
				ТекстСообщения);
			КонецПопытки;
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлXML.ПолноеИмя);
		ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
			ПрофильНастроекЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПакетЭД, "ПрофильНастроекЭДО");
			FTPСоединение = ПолучитьFTPСоединение(ПрофильНастроекЭДО);
			Если FTPСоединение = Неопределено Тогда 
				Возврат;
			КонецЕсли;
			КаталогИсхДокументов = АдресОтправителя;
			
			ПодготовитьПутьFTP(КаталогИсхДокументов);
			ИмяПакетаЭД = ВыборкаПрисоединенныхФайлов.Наименование;
			ФайлXML = СформироватьXMLФайлПодтвержденияПолучения(ИмяПакетаЭД);
			
			ТекстОшибки = "";
			Попытка
				FTPСоединение.УстановитьТекущийКаталог(КаталогИсхДокументов);
			Исключение
				СоздатьКаталогиFTP(FTPСоединение, КаталогИсхДокументов, , ТекстОшибки);
			КонецПопытки;
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				Возврат;
			КонецЕсли;
			ЗаписатьФайлНаFTP(FTPСоединение, ФайлXML.ПолноеИмя, ФайлXML.Имя);
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлXML.ПолноеИмя);
		ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
			ИмяПакетаЭД = ВыборкаПрисоединенныхФайлов.Наименование;
			
			ФайлXML = СформироватьXMLФайлПодтвержденияПолучения(ИмяПакетаЭД);
			АдресКаталога = АдресОтправителя + ?(Прав(АдресОтправителя, 1) <> "\", "\", "");
			КопироватьФайл(ФайлXML.ПолноеИмя, АдресКаталога + ФайлXML.Имя);
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлXML.ПолноеИмя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция НеобходимоПолучить(Сообщение, СтруктураПараметров)
	
	Если Сообщение.Вложения.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Сообщение.Вложения.Количество() = 1 Тогда 
	
		Если СтрНайти(Сообщение.Тема, НСтр("ru = 'Подтверждение'")) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если СтрНайти(Сообщение.Тема, НСтр("ru = 'Обмен эл.документами:'")) Тогда
			
			Для Каждого Вложение Из Сообщение.Вложения Цикл
				ДвоичныеДанныеВложения = Вложение.Значение;
			КонецЦикла;
		
			Результат = НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанныеВложения, Вложение.Ключ, СтруктураПараметров);
			
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанные, ИмяФайла, СтруктураПараметров)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Определим из файла вложений идентификаторы отправителя и получателя и сохраним файл на диск.
	ИмяВременногоФайлаЗИП = ТекущееИмяВременногоФайла("zip");
	ДвоичныеДанные.Записать(ИмяВременногоФайлаЗИП);
	
	КлючУникальности = Новый УникальныйИдентификатор();
	ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("input", КлючУникальности);
	
	Если Не ОбменСКонтрагентамиВнутренний.РаспаковатьАрхив(
		ИмяВременногоФайлаЗИП, ПапкаДляРаспаковки, НСтр("ru = 'Распаковка пакета ЭД'")) Тогда
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяВременногоФайлаЗИП);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
		Возврат Ложь;
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяВременногоФайлаЗИП);
	
	РаспакованныеФайлы = НайтиФайлы(ПапкаДляРаспаковки, "*");
	
	ФайлИнформации      = Неопределено;
	ФайлКарточки        = Неопределено;
	НастройкиСоглашения = Неопределено;
	
	Для Каждого ТекФайл Из РаспакованныеФайлы Цикл
		Если СтрНайти(ТекФайл.Имя, "packageDescription") > 0 Тогда
			ФайлИнформации = ТекФайл;
			Прервать;
		ИначеЕсли СтрНайти(ТекФайл.Имя, "card") > 0 Тогда
			ФайлКарточки = ТекФайл;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Зашифрован = Ложь;
	Если НЕ ФайлИнформации = Неопределено Тогда
		// Определим в этом файле строку с отправителем и получателем и признак шифрования и попытаемся найти соглашение.
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ФайлИнформации.ПолноеИмя);
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.ЛокальноеИмя = "Отправитель" Тогда
				ЧтениеXML.Прочитать();
				ИДОтправителя = ЧтениеXML.Значение;
			КонецЕсли;
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.ЛокальноеИмя = "Зашифрован" Тогда
				ЧтениеXML.Прочитать();
				Зашифрован = Зашифрован ИЛИ Булево(ЧтениеXML.Значение);
			КонецЕсли;
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.ЛокальноеИмя = "Получатель" Тогда
				ЧтениеXML.Прочитать();
				ИДПолучателя = ЧтениеXML.Значение;
			КонецЕсли;
				
		КонецЦикла;
		
		ЧтениеXML.Закрыть();
		НастройкиСоглашения = ПолучитьНастройкиОбменаЭДПоИД(ИДПолучателя, ИДОтправителя);
		
		ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия10;
		
	КонецЕсли;
	
	Если НЕ ФайлКарточки = Неопределено Тогда
		
		ИДПолучателя  = Неопределено;
		ИДОтправителя = Неопределено;
		
		ОбъектXML = Новый ЧтениеXML;
		СтруктураЗначений = Новый Структура;
		
		Попытка
			ТипКарточки = ОбменСКонтрагентамиВнутренний.ПолучитьТипЗначенияCML("Card", "http://api-invoice.taxcom.ru/card");
			ОбъектXML.ОткрытьФайл(ФайлКарточки.ПолноеИмя);
			ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ТипКарточки);
			ОбъектXML.Закрыть();
			ИДОтправителя = ЭД.Sender.Abonent.ID;
			ИДПолучателя  = ЭД.Receiver.Abonent.ID;
			Если ЭД.Description <> Неопределено
				И ЭД.Description.Свойства().Получить("AdditionalData") <> Неопределено
				И ЭД.Description.AdditionalData <> Неопределено
				И ЭД.Description.AdditionalData.Свойства().Получить("AdditionalParameter") <> Неопределено
				И ЭД.Description.AdditionalData.AdditionalParameter <> Неопределено Тогда
				
				Для Каждого Свойство Из ЭД.Description.AdditionalData.AdditionalParameter Цикл
					Если Свойство.Name = "Зашифрован" Тогда
						Зашифрован = Булево(Свойство.Value);
						Продолжить;
					КонецЕсли;
					Если Свойство.Name = "ВерсияФорматаПакета" Тогда
						ВерсияФорматаПакета = ВерсияФорматаИзСтроки(Свойство.Value);
						Продолжить;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			НастройкиСоглашения = ПолучитьНастройкиОбменаЭДПоИД(ИДПолучателя, ИДОтправителя);
			
		Исключение
			
			ОбъектXML.Закрыть();
			
			ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				ФайлКарточки.ПолноеИмя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Чтение ЭД.'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ТекстСообщения);
		КонецПопытки;
		
	КонецЕсли;
	
	Если (ФайлИнформации = Неопределено И ФайлКарточки = Неопределено)
		ИЛИ НастройкиСоглашения = Неопределено Тогда // не нашли файл с описанием или нет обмена
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
		Возврат Ложь;
	КонецЕсли;
	
	// Теперь проверим, что такого транспортного пакета от этого отправителя еще не было.
	ИмяПакета = Лев(ИмяФайла, СтрДлина(ИмяФайла)-4);
	
	ЗапросПрисоединенногоФайла = Новый Запрос;
	ЗапросПрисоединенногоФайла.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьПрисоединенныйФайл
	|ИЗ
	|	Справочник.ПакетЭДПрисоединенныеФайлы КАК ПакетЭДПрисоединенныеФайлы
	|ГДЕ
	|	ПакетЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ПакетЭД
	|	И ВЫРАЗИТЬ(ПакетЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ПакетЭД).Направление = &Направление
	|	И ВЫРАЗИТЬ(ПакетЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ПакетЭД).Получатель ПОДОБНО &Получатель
	|	И ВЫРАЗИТЬ(ПакетЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ПакетЭД).Отправитель ПОДОБНО &Отправитель
	|	И ПакетЭДПрисоединенныеФайлы.Наименование ПОДОБНО &Наименование
	|	И ПакетЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Направление",  Перечисления.НаправленияЭД.Входящий);
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Получатель",   ИДПолучателя);
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Отправитель",  ИДОтправителя);
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Наименование", ИмяПакета);
	
	РезультатПустой = ЗапросПрисоединенногоФайла.Выполнить().Пустой();
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
	
	Если РезультатПустой Тогда
		СтруктураПараметров.Вставить("Получатель",          ИДПолучателя);
		СтруктураПараметров.Вставить("Отправитель",         ИДОтправителя);
		СтруктураПараметров.Вставить("Организация",         НастройкиСоглашения.Организация);
		СтруктураПараметров.Вставить("Контрагент",          НастройкиСоглашения.Контрагент);
		СтруктураПараметров.Вставить("ПрофильНастроекЭДО",  НастройкиСоглашения.ПрофильНастроекЭДО);
		СтруктураПараметров.Вставить("НастройкаЭДО",        НастройкиСоглашения.НастройкаЭДО);
		СтруктураПараметров.Вставить("СпособОбменаЭД",      НастройкиСоглашения.СпособОбменаЭД);
		СтруктураПараметров.Вставить("СертификатОрганизацииДляРасшифровки", НастройкиСоглашения.СертификатОрганизацииДляРасшифровки);
		СтруктураПараметров.Вставить("АдресОтправителя",    НастройкиСоглашения.АдресОтправителя);
		СтруктураПараметров.Вставить("АдресПолучателя",     НастройкиСоглашения.АдресПолучателя);
		СтруктураПараметров.Вставить("Зашифрован",          Зашифрован);
		СтруктураПараметров.Вставить("ВерсияФорматаПакета", ВерсияФорматаПакета);
	
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ОпределитьПодтверждаемыйПакетЭД(ПредставлениеПакета)
	
	СтрокаИдентификатора = СтрЗаменить(ПредставлениеПакета, "EDI_", "");
	Идентификатор = Новый УникальныйИдентификатор(СтрокаИдентификатора);
	ДокументПакет = Документы.ПакетЭД.ПолучитьСсылку(Идентификатор);
	Если НЕ ОбщегоНазначения.СсылкаСуществует(ДокументПакет) Тогда
		ДокументПакет = Неопределено;
	КонецЕсли;
	
	Возврат ДокументПакет;
	
КонецФункции

Функция СоздатьПрисоединенныйДопФайл(СтруктураПараметров, ЭДВладелец)
	
	ДопЭДСоздан = Ложь;
	ПолноеИмяФайла = СтруктураПараметров.ПолноеИмяДопФайла;
	
	Если ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
		
		ВремяСозданияЭД = СтруктураПараметров.СтруктураЭД.ДатаЭД;
		ВладелецЭД = СтруктураПараметров.СтруктураЭД.ВладелецЭД;
		Файл = Новый Файл(ПолноеИмяФайла);
		ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
				
		ПараметрыФайла = Новый Структура();
		ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов", ВладелецЭД);
		ПараметрыФайла.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", СтрЗаменить(Файл.Расширение, ".", ""));
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		НоваяСсылкаЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку();
		
		ДобавленныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайла, , , НоваяСсылкаЭД);

		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПолноеИмяФайла);
		Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
			ДопЭДСоздан = Истина;
			ВспомогательнаяСтруктура = Новый Структура;
			ВспомогательнаяСтруктура.Вставить("Организация", СтруктураПараметров.СтруктураЭД.Организация);
			ВспомогательнаяСтруктура.Вставить("Контрагент", СтруктураПараметров.СтруктураЭД.Контрагент);
			ВспомогательнаяСтруктура.Вставить("ВладелецЭД", ВладелецЭД);
			ВспомогательнаяСтруктура.Вставить("СоглашениеЭД", СтруктураПараметров.СтруктураЭД.СоглашениеЭД);
			ВспомогательнаяСтруктура.Вставить("НомерЭД", СтруктураПараметров.СтруктураЭД.НомерЭД);
			ВспомогательнаяСтруктура.Вставить("УникальныйИД", СтруктураПараметров.УникальныйИдентификатор);
			ВспомогательнаяСтруктура.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
			ВспомогательнаяСтруктура.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД);
			ВспомогательнаяСтруктура.Вставить("ЭлектронныйДокументВладелец", ЭДВладелец);
			ВспомогательнаяСтруктура.Вставить("НаименованиеФайла", Файл.ИмяБезРасширения);
			ВспомогательнаяСтруктура.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
			
			ДатаФормированияЭДОтправителем = "";
			Если НЕ СтруктураПараметров.СтруктураЭД.Свойство("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем) Тогда
				ДатаФормированияЭДОтправителем = ВремяСозданияЭД;
			КонецЕсли;
			ВспомогательнаяСтруктура.Вставить("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем);
			
			ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, ВспомогательнаяСтруктура);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДопЭДСоздан;
	
КонецФункции

Функция ПреобразоватьДатуВКаноническийВид(ИскомаяДата)
	
	Если ТипЗнч(ИскомаяДата) = Тип("Дата") Тогда
		
		ДатаКаноническогоВида = Формат(Год(ИскомаяДата),"ЧГ=0") + Формат(Месяц(ИскомаяДата), "ЧЦ=2; ЧВН=")
			+ Формат(День(ИскомаяДата), "ЧЦ=2; ЧВН=") + Формат(Час(ИскомаяДата), "ЧЦ=2; ЧН=; ЧВН=")
			+ Формат(Минута(ИскомаяДата), "ЧЦ=2; ЧН=; ЧВН=") + Формат(Секунда(ИскомаяДата), "ЧЦ=2; ЧН=; ЧВН=");
	Иначе
		ДатаКаноническогоВида = ИскомаяДата;
	КонецЕсли;
	
	Возврат ДатаКаноническогоВида;
	
КонецФункции

Процедура ПроверитьФайл(ШаблонСообщения, FTPСоединение, ТекстОшибки)
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТестоваяСтрока = НСтр("ru = 'Тестовая строка 1С: Предприятие'");
	ТекстовыйДокумент.УстановитьТекст(ТестоваяСтрока);
	ТекстовыйДокумент.Записать(ВремФайл);
	ФайлТест = Новый Файл(ВремФайл);
		
	ЗаписатьФайлНаFTP(FTPСоединение, ВремФайл, ФайлТест.Имя, Истина, ТекстОшибки);
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	ФайлПолучатель = ПолучитьИмяВременногоФайла();
	
	ПолучитьФайлСFTP(FTPСоединение, ФайлТест.Имя, ФайлПолучатель, Истина, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлПолучатель);
		Возврат;
	КонецЕсли;
		
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ФайлПолучатель);
	СтрокаРезультата = ТекстовыйДокумент.ПолучитьТекст();
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлПолучатель);
	Если НЕ СтрокаРезультата = ТестоваяСтрока Тогда
		ШаблонСообщения = НСтр("ru = '%1 %2.'");
		ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("126");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекстСообщения,
			FTPСоединение.ТекущийКаталог());
		
		Возврат;
	КонецЕсли;
	
	УдалитьФайлFTP(FTPСоединение, ФайлТест.Имя, Истина, ТекстОшибки);
	
КонецПроцедуры

Процедура НайтиФайлыВКаталогеFTP(FTPСоединение, Путь, Маска, ЭтоТест, РезультатТеста, МассивФайлов)
	
	Попытка
		Если Маска = Неопределено Тогда
			МассивФайлов = FTPСоединение.НайтиФайлы(Путь);
		Иначе
			МассивФайлов = FTPСоединение.НайтиФайлы(Путь, Маска);
		КонецЕсли;
	Исключение
		РезультатТеста = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("125");
		
		Если НЕ ЭтоТест = Истина Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Обновляет статусы электронных документов.
//
// Параметры:
//  МассивДокументов - Массив - массив ссылок на электронные документы, состояние которых надо обновить.
//  ПризнакПодписи - Булево - признак того, что документы подписаны ЭП.
//
Процедура ОбновитьСтатусыЭД(МассивДокументов, ПризнакПодписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ЭлектронныйДокумент Из МассивДокументов Цикл
			Если ((ПризнакПодписи И ЭлектронныйДокумент.СтатусЭД <> Перечисления.СтатусыЭД.Подписан)
			
			ИЛИ (ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани
				И ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.Подписан)
				
			ИЛИ (ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение))
			
			И Не (ЭтоУведомлениеОбУточнении(ЭлектронныйДокумент.ТипЭлементаВерсииЭД)
			 		И ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.Утвержден) Тогда
			
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			НаправлениеЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "НаправлениеЭД");
			Если НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПодготовленКОтправке, ЭлектронныйДокумент);
			Иначе
				НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПодготовленоПодтверждение, ЭлектронныйДокумент);
			КонецЕсли;
			СтруктураПараметров = Новый Структура("СтатусЭД", НовыйСтатусЭД);
			ИзменитьПоСсылкеПрисоединенныйФайл(ЭлектронныйДокумент, СтруктураПараметров, Ложь);
			ПринудительнаяСменаСостояния = Ложь;
			Если ЭтоИзвещениеОПолучении(ЭлектронныйДокумент.ТипЭлементаВерсииЭД)
				И ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
				ПринудительнаяСменаСостояния = Истина;
			КонецЕсли;
			ОбновитьВерсиюЭД(ЭлектронныйДокумент, ПринудительнаяСменаСостояния);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'подготовка к отправке ЭД'"),
																						ТекстОшибки,
																						ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Создание дерева структуры XML.
// 
// Возвращаемое значение:
//  ДеревоЗначений - дерево с колонками Имя, Тип, Значение.
//
Функция СоздатьДеревоСтруктурыXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Имя");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция СформироватьXMLФайлПодтвержденияПолучения(ИмяПакетаЭД)
	
	ИмяФайла = ТекущееИмяВременногоФайла("xml");
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	// Корневой элемент
	ЗаписьXML.ЗаписатьНачалоЭлемента("Подтверждение");
	// Имя документа
	ЗаписьXML.ЗаписатьНачалоЭлемента("ЭлектронныйДокумент");
	ЗаписьXML.ЗаписатьТекст(ИмяПакетаЭД);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("ДатаПолучения");
	ЗаписьXML.ЗаписатьТекст(ПреобразоватьДатуВКаноническийВид(ТекущаяДатаСеанса()));
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
	Возврат Новый Файл(ИмяФайла);
	
КонецФункции

#КонецОбласти

#Область ОбработкаДокументов

Функция ЭтоОтправкаПодтверждения(ПрисоединенныйФайл)
	
	Возврат ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	
КонецФункции

Процедура ЗаписатьДатуПолучения(ЭД, ДатаИзменения)
	
	ТекСтатусЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "СтатусЭД");
	
	Попытка
		Если ЭД.Пустая() ИЛИ (ТекСтатусЭД <> Перечисления.СтатусыЭД.ОтправленоПодтверждение
								И ТекСтатусЭД <> Перечисления.СтатусыЭД.Отправлен) Тогда
			Возврат;
		КонецЕсли;
		НовСтатусЭД = Неопределено;
		Если ТекСтатусЭД = Перечисления.СтатусыЭД.ОтправленоПодтверждение Тогда
			НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ДоставленоПодтверждение, ЭД);
		ИначеЕсли ТекСтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
			НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Доставлен, ЭД);
		КонецЕсли;
		Если ЗначениеЗаполнено(НовСтатусЭД) Тогда
			СтруктураПараметров = Новый Структура("СтатусЭД", НовСтатусЭД);
			ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
		КонецЕсли;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'запись даты получения ЭД'"),
																					ТекстОшибки,
																					ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьДатуОтправки(ЭД, ДатаИзменения)
	
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "СтатусЭД, ВладелецФайла, ТипЭлементаВерсииЭД");
	ТекСтатусЭД = РеквизитыЭД.СтатусЭД;
	СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЭД.ВладелецФайла, "ПрофильНастроекЭДО.СпособОбменаЭД");
	
	Попытка
		
		Если ЭД.Пустая() ИЛИ (ТекСтатусЭД <> Перечисления.СтатусыЭД.ПодготовленоПодтверждение
								И ТекСтатусЭД <> Перечисления.СтатусыЭД.ПодготовленКОтправке) Тогда
			Возврат;
		КонецЕсли;
		НовСтатусЭД = Неопределено;
		Если ТекСтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение Тогда
			НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ОтправленоПодтверждение, ЭД);
		ИначеЕсли ТекСтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
			Если НЕ ОбменСКонтрагентамиСлужебныйКлиентСервер.ЭтоПрямойОбмен(СпособОбменаЭД)
				
				И НЕ ЭтоИзвещениеОПолучении(РеквизитыЭД.ТипЭлементаВерсииЭД)
				И НЕ ЭтоУведомлениеОбУточнении(РеквизитыЭД.ТипЭлементаВерсииЭД) Тогда
				
				НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПереданОператору, ЭД);
				
			Иначе
				
				НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Отправлен, ЭД);
				
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(НовСтатусЭД) Тогда
			СтруктураПараметров = Новый Структура("СтатусЭД", НовСтатусЭД);
			ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
			
			Если ЭтоОтветныйТитул(РеквизитыЭД.ТипЭлементаВерсииЭД) Тогда
				ОбновитьВерсиюЭД(ЭД);
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'запись даты отправки ЭД'"),
																					ТекстОшибки,
																					ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Создает документ ПакетЭД и заполняет его реквизиты.
//
// Параметры:
//  РеквизитыДокумента - Структура - значения реквизитов документа.
//  МассивЭД - Массив - содержит ссылки на справочник ЭДПрисоединенныеФайлы.
//
// Возвращаемое значение:
//  ДокументСсылка.ПакетЭД - ссылка на созданный документ.
//
Функция СоздатьПакетЭД(РеквизитыДокумента, МассивЭД, ТекстСообщения = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеЗашифрованы = Ложь;
	СертификатШифрования = Неопределено;
	ТребуетсяШифрованиеНаКлиенте = Ложь;
	ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеПодписиЭД");
	
	Если ИспользоватьЭП Тогда
		Если РеквизитыДокумента.Свойство("СертификатКонтрагентаДляШифрования") 
			И ЗначениеЗаполнено(РеквизитыДокумента.СертификатКонтрагентаДляШифрования)
			И РеквизитыДокумента.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
			И РеквизитыДокумента.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
			
			// Исторически сложилось, что шифруются только существенные данные - первичные ЭД (счета-фактуры
			// "ходят" только через операторов ЭДО, при обмене через операторов данные не шифруются).
			// Служебные ЭД не должны шифроваться (ответная подпись, извещения о получении, отклонение, аннулирование).
			Соответствие = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЭД, "НаправлениеЭД, ТипЭлементаВерсииЭД");  
			ЗашифроватьДанные = Ложь;
			Для Каждого КлючЗначение Из Соответствие Цикл
				Если КлючЗначение.Значение.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
					И (КлючЗначение.Значение.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
					ИЛИ КлючЗначение.Значение.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
					ИЛИ КлючЗначение.Значение.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП
					ИЛИ КлючЗначение.Значение.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
					ИЛИ КлючЗначение.Значение.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
					ИЛИ КлючЗначение.Значение.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик
					ИЛИ КлючЗначение.Значение.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель
					ИЛИ КлючЗначение.Значение.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
					ИЛИ КлючЗначение.Значение.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД) Тогда
					
					ЗашифроватьДанные = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЗашифроватьДанные Тогда
				СертификатШифрования = РеквизитыДокумента.СертификатКонтрагентаДляШифрования.Получить();
				Если ЗначениеЗаполнено(СертификатШифрования) Тогда
					ДанныеЗашифрованы = Истина;
					
					СертификатКриптографии = Новый СертификатКриптографии(СертификатШифрования);
					СертификатШифрования   = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(СертификатКриптографии);
					
					Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
						ТребуетсяШифрованиеНаКлиенте = Истина;
						РеквизитыДокумента.Вставить("ТребуетсяШифрованиеНаКлиенте", Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПЭД = Документы.ПакетЭД.СоздатьДокумент();
	ПЭД.Дата = ТекущаяДатаСеанса();
	Если РеквизитыДокумента.Свойство("Отправитель") Тогда
		ПЭД.Отправитель = РеквизитыДокумента.Отправитель;
	КонецЕсли;
	Если РеквизитыДокумента.Свойство("Получатель") Тогда
		ПЭД.Получатель = РеквизитыДокумента.Получатель;
	КонецЕсли;
	ПЭД.Контрагент = РеквизитыДокумента.Контрагент;
	ПЭД.Организация = РеквизитыДокумента.Организация;
	
	ПЭД.СтатусПакета = Перечисления.СтатусыПакетовЭД.ПодготовленКОтправке;
	ПЭД.Направление = Перечисления.НаправленияЭД.Исходящий;
	ПЭД.ДанныеЗашифрованы = ДанныеЗашифрованы;
	ПЭД.СертификатШифрования = СертификатШифрования;
	Если РеквизитыДокумента.Свойство("ВерсияФорматаПакета") Тогда
		ПЭД.ВерсияФорматаПакета = РеквизитыДокумента.ВерсияФорматаПакета;
	КонецЕсли;
	
	Если РеквизитыДокумента.Свойство("АдресОтправителя") Тогда
		ПЭД.АдресРесурсаОрганизации = РеквизитыДокумента.АдресОтправителя;
	КонецЕсли;
	Если РеквизитыДокумента.Свойство("АдресПолучателя") Тогда
		ПЭД.АдресРесурсаКонтрагента = РеквизитыДокумента.АдресПолучателя;
	КонецЕсли;

	Если РеквизитыДокумента.Свойство("СоглашениеЭД") Тогда
		ПЭД.НастройкаЭДО = РеквизитыДокумента.СоглашениеЭД;
	Иначе
		ПЭД.НастройкаЭДО = РеквизитыДокумента.НастройкаЭДО;
	КонецЕсли;
	
	ПЭД.СпособОбменаЭД = РеквизитыДокумента.СпособОбменаЭД;
	
	Если РеквизитыДокумента.Свойство("ПрофильНастроекЭДО") Тогда
		ПЭД.ПрофильНастроекЭДО = РеквизитыДокумента.ПрофильНастроекЭДО;
	КонецЕсли;
	
	ВладельцыЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивЭД, "ВладелецФайла");
	
	Для Каждого ЭД Из МассивЭД Цикл
		НоваяСтрока = ПЭД.ЭлектронныеДокументы.Добавить();
		НоваяСтрока.ЭлектронныйДокумент = ЭД;
		НоваяСтрока.ОбъектВладелец = ВладельцыЭД.Получить(ЭД);
	КонецЦикла;
	
	Попытка
		ПЭД.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Операция = НСтр("ru = 'формирование пакета ЭД'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
								Операция, ПодробноеПредставлениеОшибки, ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
		
	Возврат ПЭД.Ссылка;
	
КонецФункции

Процедура ОбработатьУдалениеЭлектронногоДокумента(СсылкаНаОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЭтоСлужебныйДокумент(СсылкаНаОбъект) Тогда
		ЗапросДокументовИБ = Новый Запрос;
		ЗапросДокументовИБ.УстановитьПараметр("ЭлектронныйДокумент", СсылкаНаОбъект);
		ЗапросДокументовИБ.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.ЭлектронныйДокумент = &ЭлектронныйДокумент";
		
		ВыборкаДокументов = ЗапросДокументовИБ.Выполнить().Выбрать();
		Пока ВыборкаДокументов.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(ВыборкаДокументов.СсылкаНаОбъект);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				Продолжить;
			Иначе
				НоваяЗаписьНабора = НаборЗаписей.Получить(0);
			КонецЕсли;
			НоваяЗаписьНабора.СостояниеВерсииЭД   = ПолучитьПервоеСостояниеВерсииЭДДляВладельца(ВыборкаДокументов.СсылкаНаОбъект);
			НоваяЗаписьНабора.ЭлектронныйДокумент = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка();
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаличиеИУдалитьСостояниеДокумента(СсылкаНаОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.СостоянияЭД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СсылкаНаОбъект = СсылкаНаОбъект;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстПредупрежденияДляВходящегоДокумента(СведенияОФормате)

	Результат = СведенияОФормате.ТекстПредупрежденияДляВходящегоДокумента;
	
	// Если указаны параметры, которые нужно подставить в текст предупреждения, формируем форматированную строку.
	Если ЗначениеЗаполнено(СведенияОФормате.ПараметрыПредупрежденияДляВходящегоДокумента) Тогда
		ЭлементыШаблона = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			СведенияОФормате.ТекстПредупрежденияДляВходящегоДокумента, "%");
		НаборыПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			СведенияОФормате.ПараметрыПредупрежденияДляВходящегоДокумента, ";", Истина, Истина);
			
		НомерПараметра = 0;	
		ЭлементыФорматированнойСтроки = Новый Массив;
		Для Каждого ЭлементШаблона Из ЭлементыШаблона Цикл
			ЭлементыФорматированнойСтроки.Добавить(ЭлементШаблона);
			
			Если НаборыПараметров.Количество() > НомерПараметра Тогда
				ЭлементыПараметра = СтрРазделить(НаборыПараметров[НомерПараметра], ",", Ложь);
				ПредставлениеСсылки = СокрЛП(ЭлементыПараметра[0]);
				
				АдресСсылки = Неопределено;
				Если ЭлементыПараметра.Количество() > 1 Тогда
					АдресСсылки = ЭлементыПараметра[1];
				КонецЕсли;
				
				Если ЗначениеЗаполнено(АдресСсылки) Тогда
					ЭлементСсылка = Новый ФорматированнаяСтрока(ПредставлениеСсылки,,,, АдресСсылки);
				Иначе
					ЭлементСсылка = ПредставлениеСсылки;
				КонецЕсли;
				ЭлементыФорматированнойСтроки.Добавить(ЭлементСсылка);
				
				НомерПараметра = НомерПараметра + 1;
			КонецЕсли;
		КонецЦикла;
			
		Результат = Новый ФорматированнаяСтрока(ЭлементыФорматированнойСтроки);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции 

Функция ДокументОтправленНаПодпись(ЭД)

	РеквизитыЭД = ЭлектронноеВзаимодействиеСлужебный.ЗначенияРеквизитовОбъектаИлиСсылки(ЭД, 
		"ВладелецФайла, ТипЭлементаВерсииЭД, СтатусЭД");
	РеквизитыВладельцаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыЭД.ВладелецФайла, "СостояниеЭДО, ВидЭД");
	
	ВладелецЭД						= РеквизитыЭД.ВладелецФайла;
	ЭтоИзвещение 					= ЭтоИзвещениеОПолучении(РеквизитыЭД.ТипЭлементаВерсииЭД);
	ЭтоУведомлениеОбУточнении		= ЭтоУведомлениеОбУточнении(РеквизитыЭД.ТипЭлементаВерсииЭД);
	ЭтоПредложениеОбАннулировании	= РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА;
	ЭтоСлужебныйДокумент 			= ЭтоСлужебныйДокумент(РеквизитыЭД.ТипЭлементаВерсииЭД);
	ЭтоИсходящийЭД					= ТипЗнч(ВладелецЭД) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий");
	ЭтоВходящийЭД					= ТипЗнч(ВладелецЭД) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий");
	ЭтоПервичныйЭДБезТитула			= РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
										И ЭтоВидЭДБезТитула(РеквизитыВладельцаЭД.ВидЭД);
	
	Результат = ЭтоИсходящийЭД И Не ЭтоСлужебныйДокумент И РеквизитыВладельцаЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НаПодписи
					ИЛИ ЭтоИсходящийЭД И (ЭтоИзвещение ИЛИ ЭтоУведомлениеОбУточнении ИЛИ ЭтоПредложениеОбАннулировании) 
						И РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
						И НЕ РеквизитыВладельцаЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно
					ИЛИ ЭтоВходящийЭД 
						И (ЭтоОтветныйТитул(РеквизитыЭД.ТипЭлементаВерсииЭД) ИЛИ ЭтоПервичныйЭДБезТитула)
						И РеквизитыВладельцаЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НаПодписи
						И РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
					ИЛИ ЭтоВходящийЭД И (ЭтоИзвещение ИЛИ ЭтоУведомлениеОбУточнении ИЛИ ЭтоПредложениеОбАннулировании) 
						И РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден 
						И НЕ РеквизитыВладельцаЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно;
	
	Возврат Результат;

КонецФункции

Функция ПараметрыМаршрутаПодписанияДокумента(ЭД)

	Результат = Новый Структура("МаршрутПодписания, УсловиеПодписания, СписокПодписантов");
	
	РеквизитыЭД = ЭлектронноеВзаимодействиеСлужебный.ЗначенияРеквизитовОбъектаИлиСсылки(ЭД, 
		"ВладелецФайла, ТипЭлементаВерсииЭД, НаправлениеЭД");
	ЭтоСлужебныйДокумент = ЭтоСлужебныйДокумент(РеквизитыЭД.ТипЭлементаВерсииЭД);
	ЭтоИсходящийЭД		 = ТипЗнч(РеквизитыЭД.ВладелецФайла) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий");
	
	НастройкиОбмена = НастройкиОбменаЭД(ЭД);
	Если НастройкиОбмена <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, НастройкиОбмена);
		
		Если РеквизитыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			// Для интеркампани список подписантов уже должен быть заполнен
			Результат.УсловиеПодписания = Перечисления.ТребованияКПодписаниюЭД.И;
			Результат.СписокПодписантов = НастройкиОбмена.ИспользуемыеСертификаты;
		
		ИначеЕсли НЕ ЭтоСлужебныйДокумент И ЭтоИсходящийЭД
			И Результат.МаршрутПодписания = Справочники.МаршрутыПодписания.УказыватьПриСоздании Тогда
			// Если маршрут указывается при создании, его нужно брать из документа-основания.
			РеквизитыВладельцаФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыЭД.ВладелецФайла, 
				"МаршрутПодписания, СписокПодписантов");
			
			
			Результат.МаршрутПодписания = РеквизитыВладельцаФайла.МаршрутПодписания;
			// Если в документе выбрали вариант ручного заполнения списка подписантов, переопределим маршрут и условие.
			Если РеквизитыВладельцаФайла.МаршрутПодписания = Справочники.МаршрутыПодписания.УказыватьПриСоздании Тогда
				СписокПодписантов = Новый ТаблицаЗначений;
				СписокПодписантов.Колонки.Добавить("Подписант");
				СписокПодписантов.Колонки.Добавить("Сертификат");
				ВыборкаПодписантов = РеквизитыВладельцаФайла.СписокПодписантов.Выбрать();
				Пока ВыборкаПодписантов.Следующий() Цикл
					НоваяСтрока = СписокПодписантов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПодписантов);
				КонецЦикла;
				
				Результат.СписокПодписантов = СписокПодписантов;
				Результат.УсловиеПодписания = Перечисления.ТребованияКПодписаниюЭД.И;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоСлужебныйДокумент ИЛИ Не ЭтоИсходящийЭД Тогда
		Результат.МаршрутПодписания = Справочники.МаршрутыПодписания.ОднойДоступнойПодписью;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции 

#КонецОбласти

#Область ОбработкаДереваЗначений

Функция ЭлектронныеДокументыИзДереваЗначений(ДеревоЗначений)
	
	ТаблицаЭД = Новый ТаблицаЗначений;
	ТаблицаЭД.Колонки.Добавить("Ссылка");
	ТаблицаЭД.Колонки.Добавить("ИмяРеквизита");
	ТаблицаЭД.Колонки.Добавить("ТипЭД");
	ТаблицаЭД.Колонки.Добавить("ВидЭД");
	ТаблицаЭД.Колонки.Добавить("ДанныеЭД");
		
	ЗаполнитьТаблицуРекурсивно(ДеревоЗначений.Строки,ТаблицаЭД);
	
	Возврат ТаблицаЭД;
	
КонецФункции

Процедура ЗаполнитьДанныеУчастникаСделки(ДанныеВыбранногоКонтрагента, ДеревоЭД, ВидУчастника)
		
	Если ДанныеВыбранногоКонтрагента.ЭтоФизЛицо Тогда
		
		Если ДанныеВыбранногоКонтрагента.Свойство("ИНН") Тогда
			ИНН = ДанныеВыбранногоКонтрагента.ИНН;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ФЛ.ИНН",
				ИНН);
		КонецЕсли;
			
		Если ДанныеВыбранногоКонтрагента.Свойство("Фамилия") Тогда
			Фамилия = ДанныеВыбранногоКонтрагента.Фамилия;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ФЛ.Фамилия",
				Фамилия);
		КонецЕсли;
		
		Если ДанныеВыбранногоКонтрагента.Свойство("Имя") Тогда
			Имя = ДанныеВыбранногоКонтрагента.Имя;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ФЛ.Имя",
				Имя);
		КонецЕсли;
		
		Если ДанныеВыбранногоКонтрагента.Свойство("Отчество") Тогда
			Отчество = ДанныеВыбранногоКонтрагента.Отчество;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ФЛ.Отчество",
				Отчество);
		КонецЕсли;
	
		ОчиститьСтрокиДереваЭД(ДеревоЭД, ВидУчастника + ".ТипУчастника.ЮЛ");
		
	Иначе
		
		Если ДанныеВыбранногоКонтрагента.Свойство("ПолноеНаименование") Тогда
			Наименование = ДанныеВыбранногоКонтрагента.ПолноеНаименование;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
				Наименование);
		КонецЕсли;
		
		Если ДанныеВыбранногоКонтрагента.Свойство("ИНН") Тогда
			ИНН = ДанныеВыбранногоКонтрагента.ИНН;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
				ИНН);
		КонецЕсли;
		
		Если ДанныеВыбранногоКонтрагента.Свойство("КПП") Тогда
			КПП = ДанныеВыбранногоКонтрагента.КПП;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
				КПП);
		КонецЕсли;
		
		ОчиститьСтрокиДереваЭД(ДеревоЭД, ВидУчастника + ".ТипУчастника.ФЛ")
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУчастникаСделкиУПДУКД(ДанныеВыбранногоКонтрагента, ДеревоЭД, ВидУчастника)
		
	Если ДанныеВыбранногоКонтрагента.ЭтоФизЛицо Тогда
		
		Если ДанныеВыбранногоКонтрагента.Свойство("ИНН") Тогда
			ИНН = ДанныеВыбранногоКонтрагента.ИНН;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ИП.ИНН",
				ИНН);
		КонецЕсли;
			
		Если ДанныеВыбранногоКонтрагента.Свойство("Фамилия") Тогда
			Фамилия = ДанныеВыбранногоКонтрагента.Фамилия;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ИП.Фамилия",
				Фамилия);
		КонецЕсли;
		
		Если ДанныеВыбранногоКонтрагента.Свойство("Имя") Тогда
			Имя = ДанныеВыбранногоКонтрагента.Имя;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ИП.Имя",
				Имя);
		КонецЕсли;
		
		Если ДанныеВыбранногоКонтрагента.Свойство("Отчество") Тогда
			Отчество = ДанныеВыбранногоКонтрагента.Отчество;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ИП.Отчество",
				Отчество);
		КонецЕсли;
	
		ОчиститьСтрокиДереваЭД(ДеревоЭД, ВидУчастника + ".ТипУчастника.ЮЛ");
		
	Иначе
		
		Если ДанныеВыбранногоКонтрагента.Свойство("ПолноеНаименование") Тогда
			Наименование = ДанныеВыбранногоКонтрагента.ПолноеНаименование;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
				Наименование);
		КонецЕсли;
		
		Если ДанныеВыбранногоКонтрагента.Свойство("ИНН") Тогда
			ИНН = ДанныеВыбранногоКонтрагента.ИНН;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
				ИНН);
		КонецЕсли;
		
		Если ДанныеВыбранногоКонтрагента.Свойство("КПП") Тогда
			КПП = ДанныеВыбранногоКонтрагента.КПП;
			ЗаполнитьРеквизитДерева(
				ДеревоЭД,
				ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
				КПП);
		КонецЕсли;
		
		ОчиститьСтрокиДереваЭД(ДеревоЭД, ВидУчастника + ".ТипУчастника.ФЛ")
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьСтрокиДереваЭД(ДеревоЭД, ПутьКДанным)
	
	СтрокаДерева = ДеревоЭД.Строки.Найти(ПутьКДанным, "ПолныйПуть", Истина);
	Если Не СтрокаДерева = Неопределено Тогда
		СтрокаДерева.Строки.Очистить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитДерева(Дерево, Реквизит, Значение, КорневойЭлементДерева = "")
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Реквизит, Значение);
	
КонецПроцедуры

#КонецОбласти

#Область НоваяАрхитектураЭДО

// Функция возвращает присоединенный файл с данными электронного документа
//
// Параметры:
//  ВладелецФайла		 - ДокументСсылка.ЭлектронныйДокументВходящий, ДокументСсылка.ЭлектронныйДокументИсходящий - документ, для которого требуется найти
//  присоединенный файл
//  ТипЭлементаВерсииЭД	 - ПеречислениеСсылка.ТипыЭлементовВерсииЭД - тип присоединенного файла, если не указан - то найдется основной присоединенный файл
//  СообщатьОбОшибке	 - Булево - признак необходимости сообщить пользователю, если файл не будет найден.
// 
// Возвращаемое значение:
//  СправочникСсылка.ЭДПрисоединенныеФайлы, Неопределено - ссылка на присоединенный файл либо неопределено, если файл не найден.
//
Функция ПрисоединенныйФайл(ВладелецФайла, ТипЭлементаВерсииЭД = Неопределено,СообщатьОбОшибке = Ложь) Экспорт
	
	Перем ПрисоединенныйФайл;
	
	Если ТипЭлементаВерсииЭД = Неопределено Тогда
		ТипЭлементаВерсииЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецФайла, "ТипЭлементаВерсииЭД");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = &ТипЭлементаВерсииЭД";
	Запрос.УстановитьПараметр("ВладелецФайла",ВладелецФайла);
	Запрос.УстановитьПараметр("ТипЭлементаВерсииЭД",ТипЭлементаВерсииЭД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПрисоединенныйФайл = Выборка.Ссылка;
	ИначеЕсли СообщатьОбОшибке Тогда
		Операция = НСтр("ru = 'Получение присоединенного файла'");
		ТекстОшибки = НСтр("ru = 'Не обнаружен присоединенный файл документа %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ВладелецФайла);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
		Операция, ТекстОшибки, ТекстОшибки, "ОбменСБанками", ВладелецФайла);
	КонецЕсли;
	
	Возврат ПрисоединенныйФайл;
	
КонецФункции

// Проверяет является ли переданный тип ЭД типом извещения о получении
//
// Параметры:
//  ТипЭлементаВерсииЭД	 - ПеречислениеСсылка.ТипыЭлементовВерсииЭД - тип ЭД для проверки.
// 
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ЭтоИзвещениеОПолучении(ТипЭлементаВерсииЭД) Экспорт 
	
	Возврат ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИОП
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД;
	
КонецФункции

// Проверяет является ли переданный тип ЭД типом уведомления об уточнении.
//
// Параметры:
//  ТипЭлементаВерсииЭД	 - ПеречислениеСсылка.ТипыЭлементовВерсииЭД - тип ЭД для проверки.
// 
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ЭтоУведомлениеОбУточнении(ТипЭлементаВерсииЭД) Экспорт 
	
	Возврат ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УОУ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ;
			
КонецФункции

// Проверяет является ли переданный тип ЭД типом подтверждения получения.
//
// Параметры:
//  ТипЭлементаВерсииЭД	 - ПеречислениеСсылка.ТипыЭлементовВерсииЭД - тип ЭД для проверки.
// 
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ЭтоПодтверждение(ТипЭлементаВерсииЭД) Экспорт 
	
	Возврат ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДО
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДП
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПУПДУКД;
			
КонецФункции

// Проверяет возможность удаления электронного документа по его состоянию
//
// Параметры:
//  СостояниеЭДО - ПеречислениеСсылка.СостоянияВерсийЭД - состояние электронного документа.
// 
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ВозможноУдалениеЭД(СостояниеЭДО) Экспорт 

	Возврат СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НаУтверждении
			ИЛИ СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НаПодписи;
КонецФункции

// Ищет среди присоединенных файлов электронного документа отправленное уведомление об уточнении.
//
// Параметры:
//  СсылкаНаФайлЭД	 - СправочникСсылка.ЭДПрисоединенныеФайлы - основной присоединенный файл среди связанных с которым будет происходить поиск уведомления.
// 
// Возвращаемое значение:
//  Булево - Возвращает ИСТИНА, если удалось найти уведомление об уточнении.
//
Функция ЕстьОтправленноеУведомление(СсылкаНаФайлЭД) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""1"" КАК Поле1
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	(ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.УОУ)
	|			ИЛИ ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.УУЭСФ))
	|			И ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
	|			И ЭДПрисоединенныеФайлы.СтатусЭД = &СтатусЭД";
	Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", СсылкаНаФайлЭД);
	Запрос.УстановитьПараметр("СтатусЭД", Перечисления.СтатусыЭД.Отправлен);
	
	Результат = Запрос.Выполнить();
	ЕстьУведомление = Истина;
	Если Результат.Пустой() Тогда
		ЕстьУведомление = Ложь;
	КонецЕсли;
	
	Возврат ЕстьУведомление;
	
КонецФункции

// Проверяет наличие подписи для второго титула электронного документа
//
// Параметры:
//  СсылкаНаФайлЭД	 - СправочникСсылка.ЭДПрисоединенныеФайлы - первый титул документа.
// 
// Возвращаемое значение:
//  Булево - Истина, если для второго титула установлена подпись.
//
Функция ВторойТитулПодписан(СсылкаНаФайлЭД) Экспорт 
	
	Результат = Ложь;
	ФайлВторогоТитула = ВторойТитулДокумента(СсылкаНаФайлЭД);
	Если ФайлВторогоТитула = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Статус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлВторогоТитула, "СтатусЭД");
	Если Статус = Перечисления.СтатусыЭД.ПодготовленКОтправке
		Или Статус = Перечисления.СтатусыЭД.Отправлен
		Или Статус = Перечисления.СтатусыЭД.ПереданОператору
		Или Статус = Перечисления.СтатусыЭД.Доставлен Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура - Удаляет запись регистра СостоянияЭД для пары документ учета и электронный документ.
//
// Параметры:
//  СсылкаНаОбъект		 - ДокументСсылка, СправочникСсылка.СоглашенияОбИспользованииЭД - объект-владелец записи в регистре
//  ЭлектронныйДокумент	 - ДокументСсылка.ЭлектронныйДокументВходящий, ДокументСсылка.ЭлектронныйДокументИсходящий - ссылка на электронный документ.
//
Процедура УдалитьСсылкуДляВладельцаВРегистреСостояний(СсылкаНаОбъект,ЭлектронныйДокумент) Экспорт 
		
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект,Истина);
	НаборЗаписей.Прочитать();
	
	МассивКУдалению = Новый Массив;
	Для Каждого Запись Из НаборЗаписей Цикл
		Если Запись.ЭлектронныйДокумент = ЭлектронныйДокумент Тогда
			МассивКУдалению.Добавить(Запись);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Запись Из МассивКУдалению Цикл
		НаборЗаписей.Удалить(Запись);
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Формирует список способов отражения в учете входящего электронного документа определенного вида.
//
// Параметры:
//  ВидЭД							 - ПеречислениеСсылка.ВидыЭД - 
//  ДобавлятьПредопределенныеСпособы	 - Булево - признак добавления способов "Вручную" и "Автоматически"
// (последний - если в переопределяемом модуле не указаны способы отражения для вида ЭД)
//  Префикс							 - Строка - текст, который будет добавлен к представлению способа обработки.
// 
// Возвращаемое значение:
//  СписокЗначений - список способов обработки с указанием представления и отметки в списке используемого по-умолчанию способа.
//
Функция СписокОперацийВидаЭД(ВидЭД, ДобавлятьПредопределенныеСпособы = Ложь, Префикс = "") Экспорт 
	
	СписокОпераций = Новый СписокЗначений;
	
	Если ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		
		Основания = Метаданные.ОпределяемыеТипы.ОснованияЭлектронныхДокументов.Тип.Типы();
		Для Каждого ТекущееОснование Из Основания Цикл
			
			МетаданныеОснования = Метаданные.НайтиПоТипу(ТекущееОснование);
			Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(МетаданныеОснования) Тогда
				Продолжить;
			КонецЕсли;
			
			СписокОпераций.Добавить(МетаданныеОснования.Имя,МетаданныеОснования.Синоним);
		КонецЦикла;
	Иначе
		ОбменСКонтрагентамиПереопределяемый.СписокОперацийВидаЭД(ВидЭД, СписокОпераций);
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокОпераций Цикл
		ЭлементСписка.Представление = Префикс + " " + ЭлементСписка.Представление;
	КонецЦикла;
	
	Если ДобавлятьПредопределенныеСпособы Тогда
		Если СписокОпераций.Количество() = 0 Тогда
			СписокОпераций.Добавить("Автоматически", НСтр("ru = 'Автоматически'"),Истина);
		КонецЕсли;
		
		СписокОпераций.Добавить("Вручную", НСтр("ru = 'Вручную в форме электронного документа'"));
	КонецЕсли;
	
	Возврат СписокОпераций;
	
КонецФункции

// Требуется для получения имени документа для открытия форм по способу обработки входящего документа.
//
// Параметры:
//  СпособОбработки	 - Строка - один из способов обработки входящего электронного документа.
// 
// Возвращаемое значение:
//  Строка - имя объекта метаданных (документа), соответствующего способу обработки.
//
Функция ИмяДокументаПоСпособуОбработки(СпособОбработки) Экспорт 
		
	ИмяДокумента = СпособОбработки; 
	
	ОбменСКонтрагентамиПереопределяемый.ИмяДокументаПоСпособуОбработки(СпособОбработки,ИмяДокумента);
		
	Возврат ИмяДокумента;
	
КонецФункции

// Формирует таблицу способов отражения входящих документов по имени профиля.
//
// Параметры:
//  Профиль	 - Строка - имя профиля настроек: "Автоматически", "Вручную", "Поставщик", "Покупатель".
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица, содержащая колонки "ВходящийДокумент" и "СпособОбработки".
//
Функция ТаблицаПредопределенногоПрофиля(Профиль) Экспорт 
	
	ТаблицаПрофиля = Новый ТаблицаЗначений;
	ТаблицаПрофиля.Колонки.Добавить("ВходящийДокумент");
	ТаблицаПрофиля.Колонки.Добавить("СпособОбработки");
	
	АктуальныеВидыЭД = Новый Массив; 
	ОбменСКонтрагентамиПереопределяемый.ПолучитьАктуальныеВидыЭД(АктуальныеВидыЭД);
	
	Для Каждого ВидЭД Из АктуальныеВидыЭД Цикл
		Если ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Покупатель
			И ВидЭД <> Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
			И ВидЭД <> Перечисления.ВидыЭД.АктЗаказчик
			И ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
						
			СписокОпераций = СписокОперацийВидаЭД(ВидЭД,Истина);
			
			Для Каждого ЭлементСписка Из СписокОпераций Цикл
				Если ЭлементСписка.Пометка Тогда
					СпособОбработки = ЭлементСписка.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ВРег(Профиль) = ВРег("Вручную") Тогда
				СпособОбработки = "Вручную";
			ИначеЕсли ВРег(Профиль) = ВРег("Поставщик") Тогда
				Если ВидЭД = Перечисления.ВидыЭД.ЗаказТовара 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
					
					СпособОбработки = "Вручную";
				КонецЕсли;
			ИначеЕсли ВРег(Профиль) = ВРег("Покупатель") Тогда
				Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12
					ИЛИ ВидЭД = Перечисления.ВидыЭД.СчетФактура 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.СчетНаОплату 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.АктИсполнитель 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
					ИЛИ ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
					ИЛИ ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
					
					СпособОбработки = "Вручную";
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаПрофиля.Добавить();
			НоваяСтрока.ВходящийДокумент = ВидЭД;
			НоваяСтрока.СпособОбработки	= СпособОбработки;
			
		КонецЕсли;            
	КонецЦикла;
	
	ТаблицаПрофиля.Сортировать("ВходящийДокумент");
	
	ОбменСКонтрагентамиПереопределяемый.ТаблицаПредопределенногоПрофиля(ТаблицаПрофиля,Профиль);
	
	Возврат ТаблицаПрофиля;
	
КонецФункции

Процедура СформироватьДеревьяЭД(ДеревоОбъект,СоответствиеВладельцевИЭД, НастройкиОбмена, ВыводитьНеактуальные = Ложь) Экспорт 
	
	Если СоответствиеВладельцевИЭД.Количество() > 0 Тогда
		
		ОбъектСсылка = Неопределено;
		
		Для Каждого Элемент Из СоответствиеВладельцевИЭД Цикл
			ОбъектСсылка = Элемент.Ключ;
			АктуальныйЭД = "";
			Если ЗначениеЗаполнено(Элемент.Значение) Тогда
				Если НЕ ЗначениеЗаполнено(НастройкиОбмена) Тогда
					НастройкиОбмена = ОпределитьНастройкиОбменаЭДПоИсточнику(
						Элемент.Значение, Ложь, , , , Ложь);
				КонецЕсли;
				АктуальныйЭД = Элемент.Значение;
				КорневойЭлемент = Неопределено;
				ПредварительноеЗаполнениеДерева(АктуальныйЭД, ДеревоОбъект, Истина, НастройкиОбмена, КорневойЭлемент);
				Если Не КорневойЭлемент = Неопределено Тогда
					ВывестиПодчиненныеДокументы(АктуальныйЭД, КорневойЭлемент, АктуальныйЭД);
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(НастройкиОбмена) Тогда
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВидЭД",               НастройкиОбмена.ВидЭД);
				СтруктураПараметров.Вставить("НаправлениеЭД",       НастройкиОбмена.НаправлениеЭД);
				СтруктураПараметров.Вставить("ВерсияРегламентаЭДО", НастройкиОбмена.ВерсияРегламентаЭДО);
				СтруктураПараметров.Вставить("СтатусЭД",            Перечисления.СтатусыЭД.ПустаяСсылка());
				СтруктураПараметров.Вставить("ПрофильНастроекЭДО",  НастройкиОбмена.ПрофильНастроекЭДО);
				СтруктураПараметров.Вставить("СоглашениеЭД",        НастройкиОбмена.СоглашениеЭД);
				СтруктураПараметров.Вставить("СостояниеЭДО",        Перечисления.СостоянияВерсийЭД.НеСформирован);
				
				СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
				Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.СчетФактура
					ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
					
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
				КонецЕсли;
				
				Если НастройкиОбмена.ВерсияФормата = "ФНС 5.01 (УПД:Счет-фактура и первичный документ)" Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
				ИначеЕсли НастройкиОбмена.ВерсияФормата = "ФНС 5.01 (УПД:Счет-фактура)" Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
				ИначеЕсли НастройкиОбмена.ВерсияФормата = "ФНС 5.01 (УПД:Первичный документ)" Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
				ИначеЕсли НастройкиОбмена.ВерсияФормата = "ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)" Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
				ИначеЕсли НастройкиОбмена.ВерсияФормата = "ФНС 5.01 (УКД:Корректировочный счет-фактура)" Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
				ИначеЕсли НастройкиОбмена.ВерсияФормата = "ФНС 5.01 (УКД:Первичный документ)" Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
				КонецЕсли;
				
				ПредварительноеЗаполнениеДерева(СтруктураПараметров, ДеревоОбъект, Ложь, НастройкиОбмена);
				
			Иначе
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		Если ВыводитьНеактуальные Тогда
			ВывестиНеАктуальныеЭД(ДеревоОбъект, АктуальныйЭД, ОбъектСсылка, НастройкиОбмена);
		КонецЕсли;
		
		ОбработатьДерево(ДеревоОбъект);
		
		ЗаполнитьДанныеВПустыхСтроках(ДеревоОбъект);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПредварительноеЗаполнениеДерева(ЭД, ДеревоОбъект, ЭтоАктуальныйЭД, НастройкиОбмена,
	КорневойЭлемент = Неопределено)
	
	Если ЗначениеЗаполнено(НастройкиОбмена) И НастройкиОбмена.Свойство("СоглашениеЭД") Тогда
		ОбменЧерезОператора = НастройкиОбмена.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО
			ИЛИ НастройкиОбмена.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском;
		
		ВерсияФорматаПакета = НастройкиОбмена.ВерсияФорматаПакета;
		
		СписокРеквизитов = "";
		Если ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий")
			Или ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
			СписокРеквизитов = "ВерсияРегламентаЭДО, ВидЭД, СостояниеЭДО, ТребуетсяИзвещение, ТребуетсяПодтверждение";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СписокРеквизитов) Тогда
			СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, СписокРеквизитов);
		Иначе
			
			СвойстваЭД = ЭД;
			СвойстваЭД.Вставить("ТребуетсяИзвещение", НастройкиОбмена.ТребуетсяИзвещение);
			СвойстваЭД.Вставить("ТребуетсяПодтверждение", НастройкиОбмена.ТребуетсяПодтверждение);
		КонецЕсли;
		
		КорневойЭлемент = Неопределено;
		
		Если ОбменЧерезОператора
			И (ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
				ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД)
			ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
			ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
		
			СтрокаЭСФ                = ДеревоОбъект.Строки.Добавить();
			СтрокаЭСФ.ТипЭД          = ЭД.ТипЭлементаВерсииЭД;
			СтрокаЭСФ.ВидЭД          = ЭД.ВидЭД;
			СтрокаЭСФ.НаправлениеЭД  = НастройкиОбмена.НаправлениеЭД;
			СтрокаЭСФ.СтрокаДоступна = Истина;
			СтрокаЭСФ.АктуальныйЭД   = ЭтоАктуальныйЭД;
			КорневойЭлемент = СтрокаЭСФ;
			
			ТипВстречногоЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД;
			Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
				ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
				ТипВстречногоЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД;
			КонецЕсли;
			
			Если НастройкиОбмена.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				
				Если ОбменЧерезОператора Тогда
					СтрокаПДО                 = СтрокаЭСФ.Строки.Добавить();
					СтрокаПДО.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ;
					СтрокаПДО.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
					СтрокаПДО.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
					
					НоваяСтрока               = СтрокаПДО.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
				КонецЕсли;
				
				Если СвойстваЭД.ТребуетсяИзвещение Тогда
					
					СтрокаИП                  = СтрокаЭСФ.Строки.Добавить();
					СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
					СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					
					Если ОбменЧерезОператора Тогда
						СтрокаПДОИП               = СтрокаИП.Строки.Добавить();
						СтрокаПДОИП.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ;
						СтрокаПДОИП.ВидЭД         = Перечисления.ВидыЭД.Подтверждение;
						СтрокаПДОИП.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
						
						НоваяСтрока               = СтрокаПДОИП.Строки.Добавить();
						НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ;
						НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
						НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
					КонецЕсли;
						
				КонецЕсли;
				
				Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
						
						Если СвойстваЭД.ТребуетсяПодтверждение Тогда
						
							ИПСтрока                  = СтрокаЭСФ.Строки.Добавить();
							ИПСтрока.ТипЭД            = ТипВстречногоЭД;
							ИПСтрока.ВидЭД            = ЭД.ВидЭД;
							ИПСтрока.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
							
							Если ОбменЧерезОператора Тогда
								ПДОИПСтрока               = ИПСтрока.Строки.Добавить();
								ПДОИПСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПУПДУКД;
								ПДОИПСтрока.ВидЭД         = Перечисления.ВидыЭД.Подтверждение;
								ПДОИПСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
								
								ИППДОИПСтрока               = ПДОИПСтрока.Строки.Добавить();
								ИППДОИПСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД;
								ИППДОИПСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
								ИППДОИПСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
							КонецЕсли;
						
						КонецЕсли;
						
				КонецЕсли;
					
				Если ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.Отклонен
					ИЛИ ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ОжидаетсяИсправление Тогда
					
					СтрокаУУ                  = СтрокаЭСФ.Строки.Добавить();
					СтрокаУУ.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ;
					СтрокаУУ.ВидЭД            = Перечисления.ВидыЭД.УведомлениеОбУточнении;
					СтрокаУУ.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					НоваяСтрока               = СтрокаУУ.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
					
				КонецЕсли;
				
			Иначе
				
				Если ОбменЧерезОператора Тогда
					СтрокаПДП                 = СтрокаЭСФ.Строки.Добавить();
					СтрокаПДП.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ;
					СтрокаПДП.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
					СтрокаПДП.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
					
					НоваяСтрока               = СтрокаПДП.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
				КонецЕсли;
				
				Если СвойстваЭД.ТребуетсяИзвещение Тогда
					
					НоваяСтрока               = СтрокаЭСФ.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
				КонецЕсли;
				
				Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
					
					Если СвойстваЭД.ТребуетсяПодтверждение Тогда
						
						ИПСтрока                  = СтрокаЭСФ.Строки.Добавить();
						ИПСтрока.ТипЭД            = ТипВстречногоЭД;
						ИПСтрока.ВидЭД            = ЭД.ВидЭД;
						ИПСтрока.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент
					ИЛИ ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.Отклонен Тогда
					
					СтрокаУУ                  = СтрокаЭСФ.Строки.Добавить();
					СтрокаУУ.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ;
					СтрокаУУ.ВидЭД            = Перечисления.ВидыЭД.УведомлениеОбУточнении;
					СтрокаУУ.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
					
					НоваяСтрока               = СтрокаУУ.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ОбменЧерезОператора
			И (ЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
				ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура) Тогда
		
			СтрокаЭСФ                = ДеревоОбъект.Строки.Добавить();
			СтрокаЭСФ.ТипЭД          = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
			СтрокаЭСФ.ВидЭД          = ЭД.ВидЭД;
			СтрокаЭСФ.НаправлениеЭД  = НастройкиОбмена.НаправлениеЭД;
			СтрокаЭСФ.СтрокаДоступна = Истина;
			СтрокаЭСФ.АктуальныйЭД   = ЭтоАктуальныйЭД;
			КорневойЭлемент = СтрокаЭСФ;
			
			Если НастройкиОбмена.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				
				СтрокаПДО                 = СтрокаЭСФ.Строки.Добавить();
				СтрокаПДО.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ;
				СтрокаПДО.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
				СтрокаПДО.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
				
				Если СвойстваЭД.ТребуетсяИзвещение Тогда
					
					СтрокаИП                  = СтрокаЭСФ.Строки.Добавить();
					СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
					СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					
					НоваяСтрока               = СтрокаПДО.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
					
					СтрокаПДОИП               = СтрокаИП.Строки.Добавить();
					СтрокаПДОИП.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ;
					СтрокаПДОИП.ВидЭД         = Перечисления.ВидыЭД.Подтверждение;
					СтрокаПДОИП.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
					
					НоваяСтрока               = СтрокаПДОИП.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
					
				КонецЕсли;
				
				Если ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.Отклонен
					ИЛИ ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ОжидаетсяИсправление Тогда
					
					СтрокаУУ                  = СтрокаЭСФ.Строки.Добавить();
					СтрокаУУ.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ;
					СтрокаУУ.ВидЭД            = Перечисления.ВидыЭД.УведомлениеОбУточнении;
					СтрокаУУ.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					НоваяСтрока               = СтрокаУУ.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
					
				КонецЕсли;
				
			Иначе
				
				СтрокаПДП                 = СтрокаЭСФ.Строки.Добавить();
				СтрокаПДП.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ;
				СтрокаПДП.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
				СтрокаПДП.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
				
				НоваяСтрока               = СтрокаПДП.Строки.Добавить();
				НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ;
				НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
				НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
				
				Если СвойстваЭД.ТребуетсяИзвещение Тогда
					
					НоваяСтрока               = СтрокаЭСФ.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
					
				КонецЕсли;

				Если ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент
					ИЛИ ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.Отклонен Тогда
					
					СтрокаУУ                  = СтрокаЭСФ.Строки.Добавить();
					СтрокаУУ.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ;
					СтрокаУУ.ВидЭД            = Перечисления.ВидыЭД.УведомлениеОбУточнении;
					СтрокаУУ.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
					
					НоваяСтрока               = СтрокаУУ.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
					
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли ЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			
			ТипВстречногоЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель;
			Если ЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
				
				ТипВстречногоЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик;
			ИначеЕсли ЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
				
				ТипВстречногоЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
			КонецЕсли;
			
			ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
			Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП Тогда
				
				ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП;
			КонецЕсли;
			
			СтрокаПродавец                = ДеревоОбъект.Строки.Добавить();
			СтрокаПродавец.ТипЭД          = ТипЭД;
			СтрокаПродавец.ВидЭД          = ЭД.ВидЭД;
			СтрокаПродавец.НаправлениеЭД  = НастройкиОбмена.НаправлениеЭД;
			СтрокаПродавец.СтрокаДоступна = Истина;
			СтрокаПродавец.АктуальныйЭД   = ЭтоАктуальныйЭД;
			КорневойЭлемент = СтрокаПродавец;
			
			Если ОбменЧерезОператора
				Или ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
				
				Если НастройкиОбмена.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
					
					СтрокаИП                  = СтрокаПродавец.Строки.Добавить();
					СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					
					Если СвойстваЭД.ТребуетсяПодтверждение Тогда
						
						СтрокаПокупатель          = СтрокаПродавец.Строки.Добавить();
						СтрокаПокупатель.ТипЭД    = ТипВстречногоЭД;
						СтрокаПокупатель.ВидЭД    = ЭД.ВидЭД;
						СтрокаПокупатель.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
						
						// Изменяется набор служебных документов в зависимости от использования версии регламента.
						Если ЭД.ВерсияРегламентаЭДО <> Перечисления.ВерсииРегламентаОбмена1С.Версия20
							И ОбменЧерезОператора Тогда
							
							НоваяСтрока               = СтрокаПокупатель.Строки.Добавить();
							НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ПДП;
							НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.Подтверждение;
							НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
							
							СтрокаИП                  = СтрокаПокупатель.Строки.Добавить();
							СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
							СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
							СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
						КонецЕсли;
					КонецЕсли;

					Если ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.Отклонен
						ИЛИ ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ОжидаетсяИсправление Тогда
						
						СтрокаУУ                  = СтрокаПродавец.Строки.Добавить();
						СтрокаУУ.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.УОУ;
						СтрокаУУ.ВидЭД            = Перечисления.ВидыЭД.УведомлениеОбУточнении;
						СтрокаУУ.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					КонецЕсли;
				Иначе
					
					Если ОбменЧерезОператора Тогда
						СтрокаПДО                 = СтрокаПродавец.Строки.Добавить();
						СтрокаПДО.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДП;
						СтрокаПДО.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
						СтрокаПДО.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
					КонецЕсли;
					
					СтрокаИП                  = СтрокаПродавец.Строки.Добавить();
					СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
					
					Если СвойстваЭД.ТребуетсяПодтверждение Тогда
						
						СтрокаПокупатель          = СтрокаПродавец.Строки.Добавить();
						СтрокаПокупатель.ТипЭД    = ТипВстречногоЭД;
						СтрокаПокупатель.ВидЭД    = ЭД.ВидЭД;
						СтрокаПокупатель.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
						
						// Изменяется набор служебных документов в зависимости от использования версии регламента.
						Если ЗначениеЗаполнено(ЭД.ВерсияРегламентаЭДО) 
							И ЭД.ВерсияРегламентаЭДО <> Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
							СтрокаИП                  = СтрокаПокупатель.Строки.Добавить();
							СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
							СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
							СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
						КонецЕсли;
					КонецЕсли;

					Если ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент
						ИЛИ ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.Отклонен Тогда
						
						СтрокаУУ                  = СтрокаПродавец.Строки.Добавить();
						СтрокаУУ.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.УОУ;
						СтрокаУУ.ВидЭД            = Перечисления.ВидыЭД.УведомлениеОбУточнении;
						СтрокаУУ.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
					КонецЕсли;
				КонецЕсли;
			Иначе
				СтрокаПокупатель          = СтрокаПродавец.Строки.Добавить();
				СтрокаПокупатель.ТипЭД    = ТипВстречногоЭД;
				СтрокаПокупатель.ВидЭД    = ЭД.ВидЭД;
				СтрокаПокупатель.НаправлениеЭД = ?(НастройкиОбмена.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий,
					Перечисления.НаправленияЭД.Исходящий, Перечисления.НаправленияЭД.Входящий);
			КонецЕсли;
		ИначеЕсли ЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
			ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда

			СтрокаГлавная                = ДеревоОбъект.Строки.Добавить();
			СтрокаГлавная.ТипЭД          = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
			СтрокаГлавная.ВидЭД          = ЭД.ВидЭД;
			СтрокаГлавная.НаправлениеЭД  = НастройкиОбмена.НаправлениеЭД;
			СтрокаГлавная.СтрокаДоступна = Истина;
			СтрокаГлавная.АктуальныйЭД   = ЭтоАктуальныйЭД;
			КорневойЭлемент = СтрокаГлавная;
			
			Если ЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
				
				Если ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
					// Извещение о получении
					СтрокаДерева                  = СтрокаГлавная.Строки.Добавить();
					СтрокаДерева.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтрокаДерева.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаДерева.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
				КонецЕсли;
					
			ИначеЕсли ЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
				
				Если ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
					
					Если ОбменЧерезОператора Тогда
						// Подтверждение доставки
						СтрокаДерева                 = СтрокаГлавная.Строки.Добавить();
						СтрокаДерева.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДП;
						СтрокаДерева.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
						СтрокаДерева.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
					КонецЕсли;
					
					// Извещение о получении
					СтрокаДерева                  = СтрокаГлавная.Строки.Добавить();
					СтрокаДерева.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтрокаДерева.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаДерева.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			СтрокаПродавец                = ДеревоОбъект.Строки.Добавить();
			СтрокаПродавец.ТипЭД          = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
			СтрокаПродавец.ВидЭД          = ЭД.ВидЭД;
			СтрокаПродавец.НаправлениеЭД  = НастройкиОбмена.НаправлениеЭД;
			СтрокаПродавец.СтрокаДоступна = Истина;
			СтрокаПродавец.АктуальныйЭД   = ЭтоАктуальныйЭД;
			КорневойЭлемент = СтрокаПродавец;
			
			Если ОбменЧерезОператора
				Или ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
				
				Если НастройкиОбмена.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
					
					СтрокаИП                  = СтрокаПродавец.Строки.Добавить();
					СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					
					Если ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.Отклонен
						ИЛИ ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ОжидаетсяИсправление Тогда
						
						СтрокаУУ                  = СтрокаПродавец.Строки.Добавить();
						СтрокаУУ.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.УОУ;
						СтрокаУУ.ВидЭД            = Перечисления.ВидыЭД.УведомлениеОбУточнении;
						СтрокаУУ.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					КонецЕсли;
					
				Иначе
					Если ОбменЧерезОператора Тогда
						СтрокаПДО                 = СтрокаПродавец.Строки.Добавить();
						СтрокаПДО.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДП;
						СтрокаПДО.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
						СтрокаПДО.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
					КонецЕсли;
					
					СтрокаИП                  = СтрокаПродавец.Строки.Добавить();
					СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
					
					Если ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент
						ИЛИ ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.Отклонен Тогда
						
						СтрокаУУ                  = СтрокаПродавец.Строки.Добавить();
						СтрокаУУ.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.УОУ;
						СтрокаУУ.ВидЭД            = Перечисления.ВидыЭД.УведомлениеОбУточнении;
						СтрокаУУ.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если КорневойЭлемент <> Неопределено И (ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ОжидаетсяАннулирование
			ИЛИ ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ТребуетсяАннулировать
			ИЛИ ЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.Аннулирован) Тогда
			
			СтрокаПОА                  = КорневойЭлемент.Строки.Добавить();
			СтрокаПОА.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ПОА;
			СтрокаПОА.ВидЭД            = Перечисления.ВидыЭД.ПредложениеОбАннулировании;
			СтрокаПОА.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиПодчиненныеДокументы(ТекущийДокумент, ДеревоРодитель, АктуальныйЭД = Неопределено)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПрисоединенныеФайлы.Ссылка,
	|	ПрисоединенныеФайлы.Ссылка.СтатусЭД КАК СтатусЭД,
	|	ПрисоединенныеФайлы.Ссылка.ДатаИзмененияСтатусаЭД КАК ДатаИзмененияСтатусаЭД,
	|	ПрисоединенныеФайлы.Ссылка.ЭлектронныйДокументВладелец КАК ЭлектронныйДокументВладелец,
	|	ПрисоединенныеФайлы.Ссылка.НаправлениеЭД КАК НаправлениеЭД,
	|	ПрисоединенныеФайлы.Ссылка.ВладелецФайла КАК ВладелецФайла,
	|	ПрисоединенныеФайлы.Ссылка.Представление КАК Представление,
	|	ПрисоединенныеФайлы.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА ПодчиненныеПрисоединенныеФайлы.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НаличиеПодчиненныхДокументов,
	|	ПрисоединенныеФайлы.Ссылка.ТипЭлементаВерсииЭД КАК ТипЭД,
	|	ВЫБОР
	|		КОГДА ПрисоединенныеФайлы.Ссылка.ТипЭлементаВерсииЭД В (&СписокТиповЭД)
	|			ТОГДА ВЫБОР
	|					КОГДА ПрисоединенныеФайлы.Ссылка.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
	|						ТОГДА ПрисоединенныеФайлы.Ссылка.ДатаСоздания
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ПрисоединенныеФайлы.Ссылка.ДатаФормированияЭДОтправителем = ДАТАВРЕМЯ(1, 1, 1)
	|								ТОГДА ПрисоединенныеФайлы.Ссылка.ДатаСоздания
	|							ИНАЧЕ ПрисоединенныеФайлы.Ссылка.ДатаФормированияЭДОтправителем
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Версия
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПрисоединенныеФайлы.Ссылка КАК Ссылка
	|	ИЗ
	|		Справочник.ЭДПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|	ГДЕ
	|		ПрисоединенныеФайлы.ВладелецФайла = &ОбъектВладелец
	|		И НЕ ПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&ТиповЭДИсключения)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПрисоединенныеФайлы.Ссылка
	|	ИЗ
	|		Справочник.ЭДПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|	ГДЕ
	|		ПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ОбъектВладелец
	|		И НЕ ПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&ТиповЭДИсключения)) КАК ПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПодчиненныеПрисоединенныеФайлы
	|		ПО (НЕ ПодчиненныеПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&ТиповЭДИсключения))
	|			И ПрисоединенныеФайлы.Ссылка = ПодчиненныеПрисоединенныеФайлы.ЭлектронныйДокументВладелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаИзмененияСтатусаЭД";
		
	Запрос.УстановитьПараметр("СписокТиповЭД", МассивТиповЭДКорневыхЭлементовДерева());
	Запрос.УстановитьПараметр("ТиповЭДИсключения", МассивТиповЭДНеОтображаемыхВДереве());
	Запрос.УстановитьПараметр("ОбъектВладелец", ТекущийДокумент);
	Выборка = Запрос.Выполнить().Выбрать();

	ДатаАктуальногоЭД = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		ТипЭД = ?(Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДО,
			Перечисления.ТипыЭлементовВерсииЭД.ПДП,
			Выборка.ТипЭД);
			
		Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
			ПараметрыПоиска = Новый Структура("ТипЭД", ТипЭД);
		Иначе 
			ПараметрыПоиска = Новый Структура("ТипЭД, НаправлениеЭД", ТипЭД, Выборка.НаправлениеЭД);
		КонецЕсли;
		
		Если НЕ ЭтоСлужебныйДокумент(Выборка.Ссылка) Тогда
			ЗаполнитьСтрокуДерева(ДеревоРодитель, Выборка, ДатаАктуальногоЭД);
			Продолжить;
		КонецЕсли;
		
		МассивСтрокДерева = ДеревоРодитель.Строки.НайтиСтроки(ПараметрыПоиска, Истина);
		
		Если МассивСтрокДерева.Количество() = 0 Тогда
			// Добавляются уведомления об уточнении подчиненных ЭД
			// (ТОРГ-12 титул покупателя, Акт титул заказчика).
			Если ЗначениеЗаполнено(Выборка.ЭлектронныйДокументВладелец) Тогда
				ПараметрыПоиска = Новый Структура("Ссылка",Выборка.ЭлектронныйДокументВладелец);
				МассивСтрокДереваВладельца = ДеревоРодитель.Строки.НайтиСтроки(ПараметрыПоиска, Ложь);
				Если МассивСтрокДереваВладельца.Количество() > 0 Тогда
					СтрокаДерева = МассивСтрокДереваВладельца[0].Строки.Добавить();
				Иначе
					СтрокаДерева = ДеревоРодитель.Строки.Добавить();
				КонецЕсли;
			Иначе
				СтрокаДерева = ДеревоРодитель.Строки.Добавить();
			КонецЕсли;
			ЗаполнитьСтрокуДерева(СтрокаДерева, Выборка, ДатаАктуальногоЭД);
		КонецЕсли;
		
		Для Каждого СтрокаДерева Из МассивСтрокДерева Цикл
			ЗаполнитьСтрокуДерева(СтрокаДерева, Выборка, ДатаАктуальногоЭД);
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

// Процедура добавляет в дерево неактуальные первичные ЭД
// с полной структурой подчиненности.
Процедура ВывестиНеАктуальныеЭД(ДеревоОбъект, АктуальныйЭД, ОбъектСсылка, НастройкиОбмена)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка КАК СсылкаНаОбъект,
	|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование КАК Ссылка
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
	|ГДЕ
	|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование = &ОбъектСсылка
	|	И НЕ ЭлектронныйДокументИсходящийДокументыОснования.Ссылка = &АктуальныйЭД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка,
	|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
	|ГДЕ
	|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование = &ОбъектСсылка
	|	И НЕ ЭлектронныйДокументВходящийДокументыОснования.Ссылка = &АктуальныйЭД";

	Запрос.УстановитьПараметр("ОбъектСсылка", ОбъектСсылка);
	Запрос.УстановитьПараметр("АктуальныйЭД", АктуальныйЭД);

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		КорневойЭлемент = Неопределено;
		ПредварительноеЗаполнениеДерева(Выборка.СсылкаНаОбъект, ДеревоОбъект, Ложь, НастройкиОбмена, КорневойЭлемент);
		Если ЗначениеЗаполнено(КорневойЭлемент) Тогда
			ВывестиПодчиненныеДокументы(Выборка.СсылкаНаОбъект, КорневойЭлемент, Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;

	ДеревоОбъект.Строки.Сортировать("Версия");
	
КонецПроцедуры

Процедура ОбработатьДерево(ДеревоОбъект)
	
	Отбор = Новый Структура("АктуальныйЭД", Истина);
	
	АктуальныеСтроки = ДеревоОбъект.Строки.НайтиСтроки(Отбор, Истина);
	
	ЭдНеСформирован = (АктуальныеСтроки.Количество()=0);
	
	Для Каждого Строка Из ДеревоОбъект.Строки Цикл
		
		Если Строка.АктуальныйЭД Или ЭдНеСформирован Тогда
			
			Если НЕ ЗначениеЗаполнено(Строка.Ссылка) Тогда
				
				Если (НЕ ЗначениеЗаполнено(Строка.Родитель) ИЛИ ЗначениеЗаполнено(Строка.Родитель.Ссылка))
					И (Строка.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
					ИЛИ Строка.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани)
					И НЕ ЭтоОтветныйТитул(Строка.ТипЭД) Тогда
					
					Если Не Строка.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда 
						Строка.ОжидаемоеДействие = Перечисления.ОжидаемоеДействиеЭД.Сформировать;
					КонецЕсли;
					Если ЗначениеЗаполнено(Строка.Родитель) Тогда
						Если ЗначениеЗаполнено(Строка.Родитель.Ссылка) Тогда
							
							Если ДОЗакрытПринудительно(Строка.Родитель.Ссылка.ВладелецФайла) Тогда
								Строка.ОжидаемоеДействие = Перечисления.ОжидаемоеДействиеЭД.ПустаяСсылка();
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Ссылка, "ПометкаУдаления") Тогда
					Строка.ОжидаемоеДействие = ОжидаемоеДействиеПоТекущемуСтатусу(Строка);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Ссылка) Тогда
			Строка.ОжидаемоеДействиеКонтрагента = ПолучитьОжидаемоеДействиеКонтрагента(Строка,Строка.Ссылка.ВладелецФайла);
		Иначе
			Строка.ОжидаемоеДействиеКонтрагента = ПолучитьОжидаемоеДействиеКонтрагента(Строка,Неопределено);
		КонецЕсли;
		Строка.СтрокаДоступна = ?(ЗначениеЗаполнено(Строка.ОжидаемоеДействие), Истина, Ложь);
		Строка.Представление = СтрЗаменить(Строка.Представление, "_", " ");
		
		Если Строка.Строки.Количество() > 0 Тогда
			ОбработатьДерево(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеВПустыхСтроках(ДеревоОбъект)
	
	СтруктураПараметров = Новый Структура;
	Для Каждого Строка Из ДеревоОбъект.Строки Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Ссылка) Тогда
			СтруктураПараметров.Вставить("ТипЭД", Строка.ТипЭД);
			Строка.Представление = ОпределитьПредставлениеЭД(Строка.ВидЭД, СтруктураПараметров);
			Строка.СтатусЭД = Перечисления.СтатусыЭД[?(Строка.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий, "НеСформирован", "НеПолучен")];
		КонецЕсли;
		Если Строка.Строки.Количество() > 0 Тогда
			ЗаполнитьДанныеВПустыхСтроках(Строка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуДерева(СтрокаДерева, Выборка,ДатаАктуальногоЭД)
	
	ЗаполнитьЗначенияСвойств(СтрокаДерева, Выборка,
		"Ссылка, СтатусЭД, ДатаИзмененияСтатусаЭД, НаправлениеЭД, Представление, ПометкаУдаления, Версия, ТипЭД");
	
	СтруктураПараметров = Новый Структура;
	Если Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
		
		СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.ВладелецФайла,"НомерДокументаОтправителя,ДатаДокументаОтправителя");

		СтруктураПараметров.Вставить("НомерВладельца", СвойстваЭД.НомерДокументаОтправителя);
		СтруктураПараметров.Вставить("ДатаВладельца",  СвойстваЭД.ДатаДокументаОтправителя);
	КонецЕсли;
	СтруктураПараметров.Вставить("ТипЭД",              Выборка.ТипЭД);

	СтрокаДерева.Представление = ОпределитьПредставлениеЭД(СтрокаДерева.ВидЭД, СтруктураПараметров);
	
	// Для входящих ЭД актуальность меняется вручную. В связи с этим надо выделять в списке
	// цветом более актуальные ЭД. Для этого в дереве есть реквизит "ДатаЭДБольшеАктуального",
	// а так же для сравнивания текущей даты создания ЭД с датой актуального ЭД, существует
	// реквизит объекта "ДатаАктуальногоЭД". Необходимо заполнить их.
	СтрокаДерева.ДатаЭДБольшеАктуального = Ложь;
	Если СтрокаДерева.АктуальныйЭД Тогда
		Если НЕ ЗначениеЗаполнено(ДатаАктуальногоЭД) И ЗначениеЗаполнено(Выборка.Версия) Тогда
			ДатаАктуальногоЭД = Выборка.Версия;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ДатаАктуальногоЭД) И ЗначениеЗаполнено(Выборка.Версия)
		И ДатаАктуальногоЭД < Выборка.Версия Тогда
		СтрокаДерева.ДатаЭДБольшеАктуального = Истина;
	КонецЕсли;
		
КонецПроцедуры

Функция ОжидаемоеДействиеПоТекущемуСтатусу(Строка)
	
	ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.ПустаяСсылка();
	
	СостояниеЭД = ОпределитьСостояниеВерсииПоСтатусуЭД(Строка.Ссылка);
	Если СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
		Или СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением
		Или СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении Тогда
		
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Ссылка, "ВладелецФайла, НаправлениеЭД");
	ДОЗакрыт = ДОЗакрытПринудительно(СвойстваЭД.ВладелецФайла);

	Если ДОЗакрыт Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ТекущийСтатусЭД = Строка.СтатусЭД;
	ЭтоСлужебныйЭД = ЭтоИзвещениеОПолучении(Строка.ТипЭД)
		ИЛИ ЭтоПодтверждение(Строка.ТипЭД)
		ИЛИ ЭтоУведомлениеОбУточнении(Строка.ТипЭД);
	
	Если ТекущийСтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи Тогда
		
	ИначеЕсли ТекущийСтатусЭД = Перечисления.СтатусыЭД.Отклонен
		ИЛИ ТекущийСтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
		
	ИначеЕсли НЕ ЭтоСлужебныйЭД И ТекущийСтатусЭД = Перечисления.СтатусыЭД.Утвержден
		И ЭтоТитулФНС(СвойстваЭД.ВладелецФайла)
		И СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		
		Возврат ВозвращаемоеЗначение;
		
	ИначеЕсли Строка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
		И ТекущийСтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
		ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Принять;
	Иначе
		НастройкиОбменаДляСтатусов = НастройкиОбменаЭД(Строка.Ссылка);
		МассивСтатусовЭД = ВернутьМассивСтатусовЭД(НастройкиОбменаДляСтатусов);
		
		Если МассивСтатусовЭД.Количество() > 0 Тогда
			ИндексТекСтатуса = МассивСтатусовЭД.Найти(ТекущийСтатусЭД);
			Если ИндексТекСтатуса <> Неопределено Тогда
				
				Если ИндексТекСтатуса + 1 < МассивСтатусовЭД.Количество() Тогда
					СледующийСтатус = МассивСтатусовЭД[ИндексТекСтатуса + 1];
					
					Если ТекущийСтатусЭД = Перечисления.СтатусыЭД.Получен
						ИЛИ ТекущийСтатусЭД = Перечисления.СтатусыЭД.Сформирован
								И СледующийСтатус = Перечисления.СтатусыЭД.Утвержден Тогда
						
						ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Утвердить;
						Если НЕ (НЕ НемедленнаяОтправкаЭД()
								ИЛИ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД")) Тогда
								
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.УтвердитьОтправить;
						КонецЕсли;
						
					ИначеЕсли ТекущийСтатусЭД = Перечисления.СтатусыЭД.Сформирован
								И СледующийСтатус <> Перечисления.СтатусыЭД.Утвержден
							ИЛИ ТекущийСтатусЭД = Перечисления.СтатусыЭД.Утвержден
							ИЛИ ТекущийСтатусЭД = Перечисления.СтатусыЭД.Подписан Тогда
						Если СледующийСтатус = Перечисления.СтатусыЭД.Подписан
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ПолностьюПодписан Тогда
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Подписать;
							Если НемедленнаяОтправкаЭД() Тогда
								ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.ПодписатьОтправить;
							КонецЕсли;
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.ПодготовленКОтправке
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ПодготовленоПодтверждение Тогда
							
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Отправить;
						КонецЕсли;
					ИначеЕсли ТекущийСтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
						
						Если СледующийСтатус = Перечисления.СтатусыЭД.Доставлен Тогда
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.ПустаяСсылка();
						Иначе
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Отправить;
						КонецЕсли;
						
					ИначеЕсли ТекущийСтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение
						И СледующийСтатус = Перечисления.СтатусыЭД.ОтправленоПодтверждение Тогда
						ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Отправить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьОжидаемоеДействиеКонтрагента(Строка,ВладелецФайла)
	
	ВозвращаемоеЗначение = "";
	
	ВерсияСтатусуЭД = ОпределитьСостояниеВерсииПоСтатусуЭД(Строка.Ссылка);
	Если ВерсияСтатусуЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
		Или ВерсияСтатусуЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением
		Или ВерсияСтатусуЭД = Перечисления.СостоянияВерсийЭД.ИзвещениеНаПодписи
		Или ВерсияСтатусуЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;

	
	Если Строка.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
		ИЛИ Строка.ВидЭД = Перечисления.ВидыЭД.Подтверждение
		ИЛИ Строка.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		
		Если Строка.ВидЭД = Перечисления.ВидыЭД.Подтверждение И НЕ ЗначениеЗаполнено(Строка.Ссылка)
			И ЗначениеЗаполнено(Строка.Родитель.Ссылка)
			И (Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
			ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
			ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Получен
			ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Доставлен) Тогда
			
			ВозвращаемоеЗначение = НСтр("ru = 'Подтверждения оператора ЭДО'");
		ИначеЕсли (Строка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ
				ИЛИ Строка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ)
				И Строка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
				И ЗначениеЗаполнено(Строка.Родитель.Ссылка) И (Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
					ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
					ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Доставлен)
				И НЕ ЗначениеЗаполнено(Строка.Ссылка) Тогда
			
			ВозвращаемоеЗначение = НСтр("ru = 'Извещения о получении'");
		КонецЕсли;
		
	Иначе
		Если Строка.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору Тогда
			
			ВозвращаемоеЗначение = НСтр("ru = 'Подтверждения отправки'");
			
			// Изменения в поведении дерева для версии регламента 20.
			Если ВладелецФайла.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
				И ЭтоОтветныйТитул(Строка.ТипЭД) Тогда
				
				ВозвращаемоеЗначение = "";
			КонецЕсли;
		ИначеЕсли Строка.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
			
			ВозвращаемоеЗначение = НСтр("ru = 'Подтверждения о доставке'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция МассивТиповЭДКорневыхЭлементовДерева()
	
	СписокТиповЭД = Новый Массив;	
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
	
	Возврат СписокТиповЭД;
	
КонецФункции

Функция МассивТиповЭДНеОтображаемыхВДереве()
	
	СписокТиповЭД = Новый Массив;
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД);
	
	Возврат СписокТиповЭД;
	
КонецФункции

// Добавляет на форму страницы для отображения электронных документов и реквизиты для хранения табличных документов.
//
// Параметры:
//  Форма			 - УправляемаяФорма - форма, на которую требуется добавить новые элементы
//  ДеревоЗначений	 - ДеревоЗначений - дерево, содержащее ссылки на справочник ЭДПрисоединенныеФайлы которые требуется вывести на форме.
//
Процедура СоздатьРеквизитыИЭлементыДляПечатныхФорм(Форма, ДеревоЗначений)  Экспорт 
	
	ТаблицаЭД = ЭлектронныеДокументыИзДереваЗначений(ДеревоЗначений);
		
	МассивНовыхРеквизитовЭД = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ТаблицаЭД Цикл
		
		Если СтрокаТаблицы.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПодписей = Новый Структура();
		
		Если СтрокаТаблицы.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
			Или СтрокаТаблицы.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП
			Или СтрокаТаблицы.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
			Или СтрокаТаблицы.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
			Или СтрокаТаблицы.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
			Или СтрокаТаблицы.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
			
			ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Ссылка,"ВладелецФайла");
			
			Если ЭтоТитулФНС(ВладелецФайла) Тогда
				ЭлектронныеПодписиЭД = ЭлектронныеПодписиДвухТитулов(СтрокаТаблицы.Ссылка);
			Иначе
				ЭлектронныеПодписиЭД = ЭлектроннаяПодпись.УстановленныеПодписи(СтрокаТаблицы.Ссылка);
			КонецЕсли;
		Иначе
			ЭлектронныеПодписиЭД = ЭлектроннаяПодпись.УстановленныеПодписи(СтрокаТаблицы.Ссылка);
		КонецЕсли;

		СтруктураПодписей.Вставить("Подписи", ЭлектронныеПодписиЭД);
		
		ПараметрыПросмотра = Новый Структура;
		ПараметрыПросмотра.Вставить("УникальныйИдентификатор", Форма.УникальныйИдентификатор);
		ПараметрыПросмотра.Вставить("СтруктураПодписей", СтруктураПодписей);
		ПараметрыПросмотра.Вставить("СкрыватьИдентификаторДокумента", Ложь);
		ПараметрыПросмотра.Вставить("СкрыватьДопДанные", Форма.ОтключитьВыводДопДанных);
		ПараметрыПросмотра.Вставить("СкрыватьКопияВерна", Форма.ОтключитьВыводКопияВерна);
		
		ДанныеЭД = ОбменСКонтрагентамиВнутренний.ФайлДанныхЭД(СтрокаТаблицы.Ссылка, ПараметрыПросмотра);		
		СтрокаТаблицы.ДанныеЭД = ДанныеЭД;
		
		Если Форма.Элементы.Найти(СтрокаТаблицы.ИмяРеквизита) = Неопределено Тогда
			
			Если ТипЗнч(СтрокаТаблицы.ДанныеЭД) = Тип("ТабличныйДокумент") Тогда
				РеквизитФормы = Новый РеквизитФормы(СтрокаТаблицы.ИмяРеквизита, Новый ОписаниеТипов("ТабличныйДокумент"));
			Иначе
				РеквизитФормы = Новый РеквизитФормы(СтрокаТаблицы.ИмяРеквизита, Новый ОписаниеТипов("Строка"));
			КонецЕсли;
			
			МассивНовыхРеквизитовЭД.Добавить(РеквизитФормы);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивНовыхРеквизитовЭД.Количество() > 0 Тогда	
		Форма.ИзменитьРеквизиты(МассивНовыхРеквизитовЭД);
	КонецЕсли;
		
	Для Каждого СтрокаТаблицы Из ТаблицаЭД Цикл
		
		Элемент = Форма.Элементы.Найти(СтрокаТаблицы.ИмяРеквизита); 
		
		Если Элемент = Неопределено Тогда
			
			ИмяСтраницы = "Страница" + СтрокаТаблицы.ИмяРеквизита;
			Страница = Форма.Элементы.Добавить(ИмяСтраницы, Тип("ГруппаФормы"), Форма.Элементы.СтраницыЭД);
			Страница.Вид = ВидГруппыФормы.Страница;
			Страница.ОтображатьЗаголовок = Ложь;
			Страница.Видимость = Истина;
			
			// Создание элементов под табличные документы.
			Если ТипЗнч(СтрокаТаблицы.ДанныеЭД) = Тип("ТабличныйДокумент") Тогда
				
				Форма[СтрокаТаблицы.ИмяРеквизита] = СтрокаТаблицы.ДанныеЭД;
				
				НовыйЭлемент = Форма.Элементы.Добавить(СтрокаТаблицы.ИмяРеквизита, Тип("ПолеФормы"), Страница);
				НовыйЭлемент.Вид = ВидПоляФормы.ПолеТабличногоДокумента;
				НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				НовыйЭлемент.ПутьКДанным = СтрокаТаблицы.ИмяРеквизита;
				НовыйЭлемент.Редактирование = Ложь;
				
				НовыйЭлемент.УстановитьДействие("ОбработкаРасшифровки","Подключаемый_ТабличныйДокументОбработкаРасшифровки")
			Иначе
				
			КонецЕсли;
			
		Иначе
			
			Если ТипЗнч(СтрокаТаблицы.ДанныеЭД) = Тип("ТабличныйДокумент") Тогда
				Форма[СтрокаТаблицы.ИмяРеквизита].Очистить();
				
				ЭлектронноеВзаимодействиеСлужебный.ВывестиОбластьВТабличныйДокумент(Форма[СтрокаТаблицы.ИмяРеквизита], СтрокаТаблицы.ДанныеЭД, "");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Определение валидности электронных подписей на электронном документе.
//
// Параметры: 
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ.
//
// Возвращаемое значение:
//  Булево - результат проверки, Истина - подпись валидна.
//
Функция УстановленныеПодписиВалидны(ЭлектронныйДокумент)
	
	Результат = Истина;
	
	ЭлектронныеПодписиЭД = ЭлектроннаяПодпись.УстановленныеПодписи(ЭлектронныйДокумент);
	Для каждого ЭП Из ЭлектронныеПодписиЭД Цикл
		
		Если Не ЭП.ПодписьВерна Тогда
			ШаблонТекста = НСтр("ru = 'Обработка электронного документа %1.
									|Документ не обработан, так как содержит невалидные подписи.'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ЭлектронныйДокумент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			Результат = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьТаблицуРекурсивно(ДеревоЗначений,ТаблицаЭД)
	
	Для Каждого СтрокаДерева Из ДеревоЗначений Цикл
		
		Если ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда
			НоваяСтрока = ТаблицаЭД.Добавить();
			НоваяСтрока.Ссылка = СтрокаДерева.Ссылка;
			НоваяСтрока.ТипЭД = СтрокаДерева.ТипЭД;
			НоваяСтрока.ВидЭД = СтрокаДерева.ВидЭД;
			НоваяСтрока.ИмяРеквизита = "ТабличныйДокумент" 
				+ ?(СтрокаДерева.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий, "Входящий", "Исходящий")
				+ ?(СтрокаДерева.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД, "Произвольный", "")
				+ ОбщегоНазначения.ИмяЗначенияПеречисления(СтрокаДерева.ТипЭД);
			СтрокаДерева.ИмяРеквизита = НоваяСтрока.ИмяРеквизита;
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ЗаполнитьТаблицуРекурсивно(СтрокаДерева.Строки,ТаблицаЭД);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭлектронныеПодписиДвухТитулов(ЭлектронныйДокумент) Экспорт
	
	ДанныеЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, "НаправлениеЭД");
	ЭлектронныеПодписиЭД = ЭлектроннаяПодпись.УстановленныеПодписи(ЭлектронныйДокумент);
	
	// Дополним сведения о подписи признаком направления
	ЭтоВходящийДокумент = ДанныеЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	ЭлектронноеВзаимодействиеСлужебный.ДополнитьМассивПодписейПризнакомНаправления(ЭлектронныеПодписиЭД, ЭтоВходящийДокумент);
	
	ВторойТитул = ВторойТитулДокумента(ЭлектронныйДокумент);
	Если ЗначениеЗаполнено(ВторойТитул) Тогда
		ДанныеВторогоТитула = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВторойТитул, 
			"НаправлениеЭД");
		ЭлектронныеПодписиВторогоТитула = ЭлектроннаяПодпись.УстановленныеПодписи(ВторойТитул);
		
		// Дополним сведения о подписи признаком направления
		ЭтоВходящийДокумент = ДанныеВторогоТитула.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		ЭлектронноеВзаимодействиеСлужебный.ДополнитьМассивПодписейПризнакомНаправления(ЭлектронныеПодписиВторогоТитула, ЭтоВходящийДокумент);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЭлектронныеПодписиЭД, ЭлектронныеПодписиВторогоТитула);
	КонецЕсли;
	
	Возврат ЭлектронныеПодписиЭД;
	
КонецФункции

// Получение параметров версии электронного документа.
//
// Параметры:
//  СсылкаНаВладельца - ДокументСсылка - электронный документ или владелец.
// 
// Возвращаемое значение:
//  Структура - параметры структуры:
//    * НомерВерсииЭД - Строка - номер версии
//    * СсылкаНаДокумент - ДокументСсылка.ЭлектронныйДокументВходящий, ЭлектронныйДокументИсходящий - электронный документ.
//    * СостояниеВерсииЭД - ПеречислениеСсылка.СостоянияВерсийЭД - состояние версии электронного документа.
//    * КомментарийРС - Строка - комментарий состояния.
//
Функция ПараметрыВерсииЭлектронногоДокумента(СсылкаНаВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВерсииЭД = Новый Структура;
	
	Если ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
		ИЛИ ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаВладельца,"СостояниеЭДО, НомерВерсииЭД");
		СтруктураВерсииЭД.Вставить("НомерВерсииЭД",     РеквизитыДокумента.НомерВерсииЭД);
		СтруктураВерсииЭД.Вставить("СсылкаНаДокумент",  СсылкаНаВладельца);
		СтруктураВерсииЭД.Вставить("СостояниеВерсииЭД", РеквизитыДокумента.СостояниеЭДО);
		СтруктураВерсииЭД.Вставить("КомментарийРС",     "");
	ИначеЕсли ТипЗнч(СсылкаНаВладельца) = Тип("Структура") Тогда
		// Бизнес-сеть.
		СтруктураВерсииЭД.Вставить("НомерВерсииЭД",     1);
		СтруктураВерсииЭД.Вставить("СсылкаНаДокумент",  Неопределено);
		СтруктураВерсииЭД.Вставить("СостояниеВерсииЭД", Неопределено);
		СтруктураВерсииЭД.Вставить("КомментарийРС",     "");
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СостоянияЭД.ЭлектронныйДокумент.НомерВерсииЭД, 0) КАК НомерВерсииЭД,
		|	СостоянияЭД.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СостоянияЭД.СостояниеВерсииЭД,
		|	СостоянияЭД.Комментарий
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка КАК СообщениеОбмена,
		|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка.СостояниеЭДО КАК СообщениеОбменаСостояниеЭДО,
		|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка.НомерВерсииЭД КАК НомерВерсииЭД
		|ПОМЕСТИТЬ вт_СвязанныеЭД
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
		|ГДЕ
		|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование = &СсылкаНаОбъект
		|	И НЕ ЭлектронныйДокументИсходящийДокументыОснования.Ссылка.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка,
		|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка.СостояниеЭДО,
		|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка.НомерВерсииЭД
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
		|ГДЕ
		|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование = &СсылкаНаОбъект
		|	И НЕ ЭлектронныйДокументВходящийДокументыОснования.Ссылка.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(вт_СвязанныеЭД.НомерВерсииЭД) КАК НомерВерсииЭД
		|ПОМЕСТИТЬ вт_МаксимальныйНомер
		|ИЗ
		|	вт_СвязанныеЭД КАК вт_СвязанныеЭД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_СвязанныеЭД.НомерВерсииЭД,
		|	вт_СвязанныеЭД.СообщениеОбмена КАК ЭлектронныйДокумент,
		|	вт_СвязанныеЭД.СообщениеОбменаСостояниеЭДО КАК СостояниеЭДО
		|ИЗ
		|	вт_МаксимальныйНомер КАК вт_МаксимальныйНомер
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_СвязанныеЭД КАК вт_СвязанныеЭД
		|		ПО вт_МаксимальныйНомер.НомерВерсииЭД = вт_СвязанныеЭД.НомерВерсииЭД";
		
		Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаВладельца);
		
		Результат = Запрос.ВыполнитьПакет();
		КомментарийРС = "";
		ВыборкаПоРегистру = Результат[0].Выбрать();
		Если ВыборкаПоРегистру.Следующий() Тогда
			НомерВерсииЭД     = ВыборкаПоРегистру.НомерВерсииЭД;
			СостояниеВерсииЭД = ВыборкаПоРегистру.СостояниеВерсииЭД;
			СсылкаНаДокумент  = ВыборкаПоРегистру.ЭлектронныйДокумент;
			КомментарийРС     = ВыборкаПоРегистру.Комментарий;
		Иначе
			НомерВерсииЭД     = 0;
			СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
			СсылкаНаДокумент  = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка();
		КонецЕсли;
		
		Если НомерВерсииЭД = 0 Тогда
			ВыборкаПоСправочнику = Результат[3].Выбрать();
			Если ВыборкаПоСправочнику.Количество() > 0 Тогда
				ВыборкаПоСправочнику.Следующий();
				НомерВерсииЭД     = ВыборкаПоСправочнику.НомерВерсииЭД;
				СсылкаНаДокумент  = ВыборкаПоСправочнику.ЭлектронныйДокумент;
				СостояниеВерсииЭД = ВыборкаПоСправочнику.СостояниеЭДО;
			КонецЕсли;
		КонецЕсли;
		СтруктураВерсииЭД.Вставить("НомерВерсииЭД",     НомерВерсииЭД);
		СтруктураВерсииЭД.Вставить("СсылкаНаДокумент",  СсылкаНаДокумент);
		СтруктураВерсииЭД.Вставить("СостояниеВерсииЭД", СостояниеВерсииЭД);
		СтруктураВерсииЭД.Вставить("КомментарийРС",     КомментарийРС);
		
	КонецЕсли;
	
	Возврат СтруктураВерсииЭД;
	
КонецФункции

Функция ИнформацияОФайлахИПодписях(ИменаФайлов)
	
	Результат = Новый Соответствие;
	
	ИменаФайловПодписей = Новый Массив;
	ИменаФайловДанных   = Новый Массив;
	
	Для Каждого ИмяФайла Из ИменаФайлов Цикл
		Если Прав(ИмяФайла, 3) = "p7s" Тогда
			ИменаФайловПодписей.Добавить(ИмяФайла);
		Иначе
			ИменаФайловДанных.Добавить(ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	Для ИндексА = 1 По ИменаФайловДанных.Количество() Цикл
		ИндексМАКС = ИндексА;
		Для ИндексБ = ИндексА+1 По ИменаФайловДанных.Количество() Цикл
			Если СтрДлина(ИменаФайловДанных[ИндексМАКС - 1]) > СтрДлина(ИменаФайловДанных[ИндексБ - 1]) Тогда
				ИндексМАКС = ИндексБ;
			КонецЕсли;
		КонецЦикла;
		Своп = ИменаФайловДанных[ИндексА - 1];
		ИменаФайловДанных[ИндексА - 1] = ИменаФайловДанных[ИндексМАКС - 1];
		ИменаФайловДанных[ИндексМАКС - 1] = Своп;
	КонецЦикла;
	
	Для Каждого ИмяФайлаДанных Из ИменаФайловДанных Цикл
		Результат.Вставить(ИмяФайлаДанных, НайтиИменаФайловПодписей(ИмяФайлаДанных, ИменаФайловПодписей));
	КонецЦикла;
	
	Для Каждого ИмяФайлаПодписи Из ИменаФайловПодписей Цикл
		Результат.Вставить(ИмяФайлаПодписи, Новый Массив);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьАрхивФайлов(ИмяОсновногоФайла, МассивФайлов)
	
	Попытка
		Файл = Новый Файл(ИмяОсновногоФайла);
		ФайлАрхива = СтрЗаменить(ИмяОсновногоФайла, Файл.Расширение, ".zip");
		ЗаписьАрхива = Новый ЗаписьZIPФайла(ФайлАрхива);
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			ЗаписьАрхива.Добавить(ИмяФайла);
		КонецЦикла;
		ЗаписьАрхива.Записать();
		Возврат ФайлАрхива;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС
			+ НСтр("ru = 'Проверьте поддержку русского языка в региональных настройках ОС для non-Unicode programs
			|и наличие доступа к каталогу временных файлов.'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'запись файла архива на диск'"),
																					ТекстОшибки,
																					ТекстСообщения);
		
		Возврат "";
	КонецПопытки;
	
КонецФункции

// Получает адрес сертификата шифрования во временном хранилище данных.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на электронный документ, адрес сертификата шифрования по которому необходимо получить.
//
Функция АдресаСертификатовШифрования(ПрисоединенныйФайл) Экспорт
	
	ПараметрыСоглашения = ОпределитьНастройкиОбменаЭДПоИсточнику(ПрисоединенныйФайл.ВладелецФайла, , , ПрисоединенныйФайл);
	Если НЕ ЗначениеЗаполнено(ПараметрыСоглашения)
		ИЛИ Не ОбменСКонтрагентамиСлужебныйКлиентСервер.ЭтоПрямойОбмен(ПараметрыСоглашения.СпособОбменаЭД) Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	СертификатКонтрагентаШифрования = ПараметрыСоглашения.СертификатКонтрагентаДляШифрования;
	СертификатОрганизацииШифрования = ПараметрыСоглашения.СертификатОрганизацииДляРасшифровки;
	
	Если СертификатКонтрагентаШифрования = Неопределено ИЛИ СертификатОрганизацииШифрования = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДвоичныеДанныеСертификата            = СертификатКонтрагентаШифрования.Получить();
	ДвоичныеДанныеСертификатаОрганизации = СертификатОрганизацииШифрования.ДанныеСертификата.Получить();
	
	Если ДвоичныеДанныеСертификата = Неопределено ИЛИ ДвоичныеДанныеСертификатаОрганизации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	АдресСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата);
	АдресСертификатаОрганизации = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификатаОрганизации);
	
	МассивВозврата = Новый Массив;
	МассивВозврата.Добавить(АдресСертификата);
	МассивВозврата.Добавить(АдресСертификатаОрганизации);
	
	Возврат МассивВозврата;
	
КонецФункции

#КонецОбласти

#Область МетодыЗаполненияДереваЭД

// Версия пакета XDTO схемы CML 2.06.
//
// Возвращаемое значение:
//  Строка - версия.
//
Функция ВерсияСхемыCML2() Экспорт
	
	Возврат "CML 2.08";
	
КонецФункции

// Пространство имен используемой схемы CML.
// 
// Возвращаемое значение:
//  Строка - пространство имен.
//
Функция ПространствоИменCML() Экспорт
	
	Возврат "urn:1C.ru:commerceml_2";
	
КонецФункции

Функция ВерсияСхемыФНС_2016()
	Возврат НСтр("ru = 'ФНС 5.01 (с 2016г.)'");
КонецФункции

#КонецОбласти

#Область РаботаСОписаниемОснованияЭД

// Сохраняет изменения в описании основания электронного документа в информационной базе.
//
// Параметры:
//  ОснованиеЭД - ОпределяемыйТип.ОснованияЭлектронныхДокументов - объект или ссылка на основание электронного документа.
//
Процедура ОбновитьОписаниеОснованияЭлектронногоДокумента(Знач ОснованиеЭД)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОснованиеОбъект = Неопределено;
	ОснованиеСсылка = Неопределено;
	
	ТипОснования = ТипЗнч(ОснованиеЭД);
	Если ОбщегоНазначения.ЭтоСсылка(ТипОснования) Тогда
		ОснованиеОбъект = ОснованиеЭД.ПолучитьОбъект();
		ОснованиеСсылка = ОснованиеЭД;
	Иначе
		ОснованиеОбъект = ОснованиеЭД;
		ОснованиеСсылка = ОснованиеЭД.Ссылка;
	КонецЕсли;
	
	Набор = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
	Набор.Отбор.СсылкаНаОбъект.Установить(ОснованиеСсылка);
	Набор.Прочитать();
	
	Описание = Неопределено;
	ОписаниеИзменено = Ложь;
	
	Для каждого Запись Из Набор Цикл
		
		Если Запись.СостояниеВерсииЭД <> Перечисления.СостоянияВерсийЭД.НеСформирован Тогда
			Продолжить;
		КонецЕсли;
		
		Если Описание = Неопределено Тогда
			Описание = ОписаниеОснованияЭлектронногоДокумента(ОснованиеОбъект);
		КонецЕсли;
		
		// Обновление описания.
		Если ОписаниеИзменено Тогда
			ЗаполнитьЗначенияСвойств(Запись, Описание);
			Продолжить;
		КонецЕсли;
		
		// Проверка изменения описания.
		Для каждого КлючЗначение Из Описание Цикл
			
			ТекущееЗначение = Запись[КлючЗначение.Ключ];
			НовоеЗначение = КлючЗначение.Значение;
			
			Если ТекущееЗначение <> НовоеЗначение Тогда
				ОписаниеИзменено = Истина;
				ЗаполнитьЗначенияСвойств(Запись, Описание);
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЦикла;
	
	Если ОписаниеИзменено Тогда
		Набор.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Определение представления электронного документа.
//
// Параметры:
//  ВидЭД - Перечисление.ВидЭД - вид электронного документа.
//  СтруктураПараметров - Структура - НомерВладельца, ДатаВладельца, ВерсияЭД.
//
// Возвращаемое значение:
//  Строка - текстовое представление электронного документа.
//
Функция ОпределитьПредставлениеЭД(ВидЭД, СтруктураПараметров)
	
	ТекстВидЭД  = "";
	ТекстНомера = "";
	ТекстДаты   = "";
	ТекстВерсии = "";
	ЗначениеСвойства = Неопределено;
	
	Если СтруктураПараметров.Свойство("НомерВладельца", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		ТекстНомера = " № " + ЗначениеСвойства;
		
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ДатаВладельца", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		ТекстДаты = " от " + Формат(ЗначениеСвойства, "ДЛФ=D");
	КонецЕсли;
	
	Если ВидЭД <> Перечисления.ВидыЭД.СчетФактура И ВидЭД <> Перечисления.ВидыЭД.ИзвещениеОПолучении
		И ВидЭД <> Перечисления.ВидыЭД.Подтверждение И ВидЭД <> Перечисления.ВидыЭД.УведомлениеОбУточнении
		И СтруктураПараметров.Свойство("ВерсияЭД", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		
		ШаблонТекстаВерсии = НСтр("ru = '(версия %1)'");
		ТекстВерсии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаВерсии, ЗначениеСвойства);
		
	КонецЕсли;
	
	ТипЭД = "";
	Если СтруктураПараметров.Свойство("ТипЭД", ТипЭД)
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ДОП
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
		
		Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
			ИЛИ ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
			ТекстВидЭД = НСтр("ru = 'Информация покупателя'");
		ИначеЕсли ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель Тогда
			ТекстВидЭД = Строка(ТипЭД);
		ИначеЕсли ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			ТекстВидЭД = Строка(ТипЭД);
		ИначеЕсли ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик Тогда
			ТекстВидЭД = Строка(ТипЭД);
		ИначеЕсли ЭтоИзвещениеОПолучении(ТипЭД) Тогда
			ТекстВидЭД = НСтр("ru = 'Извещение о получении'");
		ИначеЕсли ЭтоПодтверждение(ТипЭД) Тогда
			ТекстВидЭД = НСтр("ru = 'Подтверждение'");
			
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
				ИЛИ ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДП Тогда
				ТекстВидЭД = ТекстВидЭД + " " + НСтр("ru = 'даты получения'");
			Иначе
				ТекстВидЭД = ТекстВидЭД + " " + НСтр("ru = 'даты отправки'");
			КонецЕсли;
			
		ИначеЕсли ЭтоУведомлениеОбУточнении(ТипЭД) Тогда
			ТекстВидЭД = НСтр("ru = 'Уведомление об уточнении'");
		ИначеЕсли ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
			ТекстВидЭД = НСтр("ru = 'Предложение об аннулировании'");
		КонецЕсли;
	Иначе
		
		Если ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
			ТекстВидЭД = НСтр("ru = 'Счет-фактура'");
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД Тогда
				ТекстВидЭД = НСтр("ru = 'Информация продавца'");
			КонецЕсли;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			ТекстВидЭД = НСтр("ru = 'Корректировочный счет-фактура'");
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
				ТекстВидЭД = НСтр("ru = 'Информация продавца'");
			КонецЕсли;
			
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12 Тогда
			ТекстВидЭД = НСтр("ru = 'Товарная накладная (ТОРГ-12)'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			ТекстВидЭД = Строка(ВидЭД);
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
				ТекстВидЭД = НСтр("ru = 'Информация продавца'");
			КонецЕсли;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			ТекстВидЭД = Строка(ВидЭД);
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
				ТекстВидЭД = НСтр("ru = 'Информация продавца'");
			КонецЕсли;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот Тогда
			ТекстВидЭД = НСтр("ru = 'Акт'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
			ТекстВидЭД = НСтр("ru = 'Акт на передачу прав'");
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
				ТекстВидЭД = НСтр("ru = 'Информация продавца'");
			КонецЕсли;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктИсполнитель ИЛИ ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
			ТекстВидЭД = Строка(ВидЭД);
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
				ТекстВидЭД = НСтр("ru = 'Информация продавца'");
			КонецЕсли;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
			ТекстВидЭД = НСтр("ru = 'Счет'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
			ТекстВидЭД = НСтр("ru = 'Заказ товара'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
			ТекстВидЭД = НСтр("ru = 'Ответ на заказ'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
			ТекстВидЭД = НСтр("ru = 'Прайс-лист'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
			ТекстВидЭД = НСтр("ru = 'Каталог товаров'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
			ТекстВидЭД = НСтр("ru = 'Отчет о продажах комиссионного товара'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
			ТекстВидЭД = НСтр("ru = 'Отчет о списании комиссионного товара'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда
			ТекстВидЭД = НСтр("ru = 'Передача товаров'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
			ТекстВидЭД = НСтр("ru = 'Возврат товаров'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
			ТекстВидЭД = НСтр("ru = 'Произвольный документ'");
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеЭД = ТекстВидЭД + ТекстНомера + ТекстДаты + ТекстВерсии;
	
	Возврат ПредставлениеЭД;
	
КонецФункции

Процедура ПрочитатьИННКППИзФайла(ИННКПП, СтрокаXML)
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
	Исключение
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка разбора XML: %1.'"), ИнформацияОбОшибке().Описание);
		Возврат;
	КонецПопытки;
	
	ИННПрочитан = Ложь;
	КПППрочитан = Ложь;
	
	Попытка
		Пока ЧтениеXML.Прочитать() Цикл
			ТипУзла = ЧтениеXML.ТипУзла;
			Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если Врег(ЧтениеXML.Имя) = ВРег("INN") Тогда
					ЧтениеXML.Прочитать();
					ИНН = ЧтениеXML.Значение;
					ИННПрочитан = Истина;
				КонецЕсли;
				
				Если Врег(ЧтениеXML.Имя) = ВРег("KPP") Тогда
					ЧтениеXML.Прочитать();
					КПП = ЧтениеXML.Значение;
					КПППрочитан = Истина;
					
				КонецЕсли;
				
				Если ИННПрочитан И КПППрочитан Тогда
					
					ИННКППКонтрагента = ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП,"");
					Если ИННКПП.Найти(ИННКППКонтрагента) = Неопределено Тогда
						ИННКПП.Добавить(ИННКППКонтрагента);
					КонецЕсли;
					
					ИННПрочитан = Ложь;
					КПППрочитан = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка разбора XML: %1.'"), ИнформацияОбОшибке().Описание);
		Возврат ;
	КонецПопытки;
	
КонецПроцедуры

Функция ОписаниеПакетаДляОператораЭДО(РеквизитыПакета, ИмяФайла, ИмяФайлаПодписи)
	
	ИмяВременногоФайлаОписаниеПакетаЭДО = ТекущееИмяВременногоФайла("xml");
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента = Новый ЗаписьXML;
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ОткрытьФайл(ИмяВременногоФайлаОписаниеПакетаЭДО, "windows-1251");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьОбъявлениеXML();
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("ТрансИнф");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("ВерсПрог",
		ВРЕГ(Лев(Метаданные.Имя + " " + СокрЛП(Метаданные.Версия), 40)));
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("версияФормата", "ФНС:1.0");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("идентификаторДокументооборота",
		РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типДокументооборота", "Участник");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типТранзакции", "УчастникНП");
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("отправитель");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типСубъекта", "абонент");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // отправитель
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("получатель");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("идентификаторСубъекта", РеквизитыПакета.ОператорЭДОИд);
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типСубъекта", "спецоператор");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // получатель
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("документ");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("идентификаторДокумента", НовыйUUID());
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("сжат", XMLСтрока(Ложь));
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("зашифрован", XMLСтрока(Истина));
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типДокумента", "участник");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типСодержимого", "xml");
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("содержимое");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("имяФайла",
		ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайла).Имя);
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // содержимое
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("подпись");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("имяФайла",
		ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайлаПодписи).Имя);
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // подпись
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // документ
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента();
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.Закрыть();
	
	ДвоичныеДанныеОписаниеПакетаЭДО = Новый ДвоичныеДанные(ИмяВременногоФайлаОписаниеПакетаЭДО);
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяВременногоФайлаОписаниеПакетаЭДО);
	
	Возврат ДвоичныеДанныеОписаниеПакетаЭДО;
	
КонецФункции

Процедура СоздатьФайлыОписанияПакета(РеквизитыПакета)
	
	// Card
	ЭДКарточки = Новый ЗаписьXML;
	ЭДКарточки.ОткрытьФайл(РеквизитыПакета.ИмяВременногоФайлаЭДКарточки, "windows-1251");
	ЭДКарточки.ЗаписатьОбъявлениеXML();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("card");
	
	ЭДКарточки.ЗаписатьАтрибут("xmlns:xs", "http://www.w3.org/2001/XMLSchema");
	ЭДКарточки.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЭДКарточки.ЗаписатьАтрибут("xmlns", "http://www.1c.ru/edo/card");
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Identifiers");
	ЭДКарточки.ЗаписатьАтрибут("ExternalIdentifier", "packet.zip");
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Type");
	ЭДКарточки.ЗаписатьАтрибут("Name", "Registration");
	ЭДКарточки.ЗаписатьАтрибут("ResignRequired", XMLСтрока(Истина));
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Description");
	ЭДКарточки.ЗаписатьАтрибут("Title", "Регистрация");
	ЭДКарточки.ЗаписатьАтрибут("Date", XMLСтрока(ТекущаяДатаСеанса()));
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalData");
	
	// Наименование организации.
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name",  "AbonentOrganisationName");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.НаименованиеОрганизации);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	// Фамилия.
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name",  "AbonentSurname");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.Фамилия);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	// Имя.
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name",  "AbonentName");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.Имя);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	// Отчество.
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name",  "AbonentPatronymic");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.Отчество);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	// ОГРН.
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name",  "AbonentOGRN");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.ОГРНОрганизации);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	Для каждого ДанныеСертификата Из РеквизитыПакета.Сертификат Цикл
		ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
		ЭДКарточки.ЗаписатьАтрибут("Name", "Certificate");
		ЭДКарточки.ЗаписатьАтрибут("Value", ДанныеСертификата);
		ЭДКарточки.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	// Электронная почта.
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "Email");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.ЭлектроннаяПочта);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "OperatorID");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.ОператорЭДОИд);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "ВерсияБЭД");
	ЭДКарточки.ЗаписатьАтрибут("Value", ОбновлениеИнформационнойБазыБЭД.ВерсияБиблиотеки());
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "ПрикладноеРешение");
	ЭДКарточки.ЗаписатьАтрибут("Value", Метаданные.Имя);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "ВерсияПрикладногоРешения");
	ЭДКарточки.ЗаписатьАтрибут("Value", Метаданные.Версия);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	
	
	ЭДКарточки.ЗаписатьКонецЭлемента();
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Sender");
	ЭДКарточки.ЗаписатьНачалоЭлемента("Abonent");
	ЭДКарточки.ЗаписатьАтрибут("Name", РеквизитыПакета.НаименованиеОрганизации);
	ЭДКарточки.ЗаписатьАтрибут("Inn", РеквизитыПакета.ИННОрганизации);
	
	Если НЕ ПустаяСтрока(РеквизитыПакета.КППОрганизации) Тогда
		ЭДКарточки.ЗаписатьАтрибут("Kpp", РеквизитыПакета.КППОрганизации);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(РеквизитыПакета.ИдентификаторОрганизации) Тогда
		ЭДКарточки.ЗаписатьАтрибут("Id", РеквизитыПакета.ИдентификаторОрганизации);
	КонецЕсли;
	
	ЭДКарточки.ЗаписатьКонецЭлемента();
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Receiver");
	ЭДКарточки.ЗаписатьНачалоЭлемента("Organization");
	ЭДКарточки.ЗаписатьАтрибут("Name", РеквизитыПакета.ОператорЭДО);
	ЭДКарточки.ЗаписатьАтрибут("Type", "SpecOperator");
	ЭДКарточки.ЗаписатьКонецЭлемента();
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьКонецЭлемента();
	ЭДКарточки.Закрыть();
	
	// meta
	ЭДТранспортнойИнформации = Новый ЗаписьXML;
	ЭДТранспортнойИнформации.ОткрытьФайл(РеквизитыПакета.ИмяВременногоФайлаЭДТранспортнойИнформации, "windows-1251");
	ЭДТранспортнойИнформации.ЗаписатьОбъявлениеXML();
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("ContainerDescription");
	
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:xs", "http://www.w3.org/2001/XMLSchema");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns", "http://www.1c.ru/edo/meta");
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("DocFlow");
	
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Id", РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Documents");
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Document");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("TransactionCode", "card");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("ReglamentCode", "Registration");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Files");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("MainImage");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/card");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "card.xml");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // MainImage
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("ExternalCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/card");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "card.xml");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // ExternalCard
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Files
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Document
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Document");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("TransactionCode", "AccessionAgreement");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("ReglamentCode", "Registration");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Files");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("MainImage");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/Registration");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "packet.zip");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // MainImage
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("ExternalCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/Registration");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "packet.zip");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // ExternalCard
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Files
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Document
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Document");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("TransactionCode", "LicenseCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("ReglamentCode", "Registration");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Files");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("MainImage");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/LicenseCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "LicenseCard.zip");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // MainImage
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("ExternalCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/LicenseCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "LicenseCard.zip");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // ExternalCard
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Files
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Document
	
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Documents
	
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // DocFlow
	
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // ContainerDescription
	ЭДТранспортнойИнформации.Закрыть();
	
КонецПроцедуры

Процедура ОбновитьИдентификаторыЭДО(ИдентификаторыЭДО, Удалить = Ложь)
	
	Если ИдентификаторыЭДО.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Удалить Тогда
		ОчиститьИдентификаторыЭДО(ИдентификаторыЭДО);
	Иначе
		ЗаполнитьИдентификаторыЭДО(ИдентификаторыЭДО);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьИдентификаторыЭДО(ИдентификаторыЭДО)
	
	Если ИдентификаторыЭДО.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрофилиНастроекЭДО.Ссылка КАК ПрофильЭДО
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|ГДЕ
	|	ПрофилиНастроекЭДО.ИдентификаторОрганизации В(&ИдентификаторОрганизации)";
	
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИдентификаторыЭДО);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	НаборЗаписей = РегистрыСведений.НовыеДокументыВСервисеЭДО.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
	
		НаборЗаписей.Отбор.ПрофильЭДО.Установить(Выборка.ПрофильЭДО);
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИдентификаторыЭДО(ИдентификаторыЭДО)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрофилиНастроекЭДО.Ссылка КАК ПрофильЭДО,
	|	ИСТИНА КАК ЕстьНовыеЭД
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|ГДЕ
	|	ПрофилиНастроекЭДО.ИдентификаторОрганизации В(&Идентификаторы)
	|	И ПрофилиНастроекЭДО.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Идентификаторы", ИдентификаторыЭДО);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.НовыеДокументыВСервисеЭДО.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПрофильЭДО.Установить(Выборка.ПрофильЭДО);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьЭДПрисоединенныйФайлПакета(Конверт, МассивСтруктурДанных = Неопределено) Экспорт
	
	ПодготовленныеДокументы = Конверт.ЭлектронныеДокументы.ВыгрузитьКолонку("ЭлектронныйДокумент");
	
	СоответствиеФайлЭД      = Новый Соответствие;
	
	АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("send", Конверт.Ссылка.УникальныйИдентификатор());
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталога, "*");
	Для Каждого СтрокаЭД Из Конверт.ЭлектронныеДокументы Цикл
		ДокументНаОтправку = СтрокаЭД.ЭлектронныйДокумент;
		
		ДанныеФайла = ПолучитьДанныеФайла(ДокументНаОтправку);
		
		// Шифрование ЭД
		Если Конверт.ДанныеЗашифрованы Тогда
			Если МассивСтруктурДанных <> Неопределено Тогда // шифрование произведено на клиенте
				Для Каждого ЭлементДанных Из МассивСтруктурДанных Цикл
					Если ЭлементДанных.ЭлектронныйДокумент = СтрокаЭД.ЭлектронныйДокумент Тогда
						ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = ЭлементДанных.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ПараметрыШифрования = АдресаСертификатовШифрования(ДокументНаОтправку);
				Если ПараметрыШифрования <> Неопределено Тогда
					Отказ = Ложь;
					МенеджерКриптографии = ЭлектронноеВзаимодействиеСлужебный.МенеджерКриптографии(Отказ);
					Если Отказ Тогда
						ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("110");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
						ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталога);
						Возврат;
					КонецЕсли;
					
					МассивСертификатов = Новый Массив;
					Для каждого СтрокаСертификата Из ПараметрыШифрования Цикл
						
						ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(СтрокаСертификата);
						Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
						МассивСертификатов.Добавить(Сертификат);
					КонецЦикла;
					
					ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
					ЗашифрованныеДанные = МенеджерКриптографии.Зашифровать(ДвоичныеДанныеФайла, МассивСертификатов);
					ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ЗашифрованныеДанные);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоОтправкаПодтверждения(ДокументНаОтправку) Тогда
			СохранитьВместеСПоследнейЭП(ДокументНаОтправку, ДанныеФайла, АдресКаталога, СоответствиеФайлЭД);
		Иначе
			СохранитьВместеСЭП(ДокументНаОтправку, ДанныеФайла, АдресКаталога, СоответствиеФайлЭД);
		КонецЕсли;
		
	КонецЦикла;
	
	Файлы = НайтиФайлы(АдресКаталога, "*");
	Если Файлы.Количество() = 0 Тогда
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталога);
		Возврат;
	КонецЕсли;
	
	МассивИменФайлов = Новый Массив;
	Для Каждого НайденныйФайл Из Файлы Цикл
		МассивИменФайлов.Добавить(НайденныйФайл.Имя);
	КонецЦикла;
	
	АрхивКонтейнер = Новый ЗаписьZipФайла();
	ИмяФайла = "EDI_" + Конверт.УникальныйИдентификатор();
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
	АрхивКонтейнер.Открыть(АдресКаталога + ИмяФайла + ".zip");
	
	Для Каждого Файл Из Файлы Цикл
		АрхивКонтейнер.Добавить(Файл.ПолноеИмя);
	КонецЦикла;
	
	СоответствиеВложений    = ИнформацияОФайлахИПодписях(МассивИменФайлов);
	ТекстОписанияУчастников = СоздатьТекстОписиЭД(
									Конверт,
									СоответствиеВложений,
									СоответствиеФайлЭД);
	
	КопироватьФайл(ТекстОписанияУчастников, АдресКаталога + "packageDescription.xml");
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ТекстОписанияУчастников);
	АрхивКонтейнер.Добавить(АдресКаталога + "packageDescription.xml");
	
	АрхивКонтейнер.Записать();
	
	ПоместитьПакетЭДВКонверт(Конверт, АдресКаталога + ИмяФайла + ".zip");
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталога);
	
КонецПроцедуры

Функция ОпределитьПодготовленныеКОтправкеЭД()
	
	ЗапросПодготовленныхЭД = Новый Запрос;
	ЗапросПодготовленныхЭД.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПакетЭД.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.ПометкаУдаления = ЛОЖЬ
	|	И ПакетЭД.СтатусПакета = &СтатусПакета";
	ЗапросПодготовленныхЭД.УстановитьПараметр("СтатусПакета", Перечисления.СтатусыПакетовЭД.ПодготовленКОтправке);
	
	Результат = ЗапросПодготовленныхЭД.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

Функция НайтиИменаФайловПодписей(ИмяФайлаДанных, ИменаФайловПодписей)
	
	ИменаПодписей = Новый Массив;
	
	Файл = Новый Файл(ИмяФайлаДанных);
	ИмяБезРасширения = Файл.ИмяБезРасширения;
	
	Для Каждого ИмяФайлаПодписи Из ИменаФайловПодписей Цикл
		Если СтрНайти(ИмяФайлаПодписи, ИмяБезРасширения) > 0 Тогда
			ИменаПодписей.Добавить(ИмяФайлаПодписи);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяФайлаПодписи Из ИменаПодписей Цикл
		ИменаФайловПодписей.Удалить(ИменаФайловПодписей.Найти(ИмяФайлаПодписи));
	КонецЦикла;
	
	Возврат ИменаПодписей;
	
КонецФункции

Процедура СохранитьПодписи(ФайлСсылка,
							ПолноеИмяФайла,
							МассивСтруктурПодписей,
							АдресКаталога,
							СоответствиеФайлЭД,
							БезИсходногоФайла = Ложь,
							ЭтоПроизвольныйЭД = Ложь)
	
	ОсновнойФайл = Новый Файл(ПолноеИмяФайла);
	Путь = ОсновнойФайл.Путь;
	МассивИмен = Новый Массив;
	
	Если НЕ БезИсходногоФайла Тогда
		МассивИмен.Добавить(ОсновнойФайл.Имя);
	КонецЕсли;
	
	Сч = 0;
	Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
		ИмяФайлаПодписи = СтруктураПодписи.ИмяФайлаПодписи;
		
		Сч = Сч + 1;
		Если ПустаяСтрока(ИмяФайлаПодписи) Тогда
			Если ЗначениеЗаполнено(ЭтоПроизвольныйЭД) И ЭтоПроизвольныйЭД И Прав(ПолноеИмяФайла, 4) = ".zip" Тогда
				ИмяФайлаПодписи = Строка(ФайлСсылка)+"ЭП" + "-" + Строка(СтруктураПодписи.КомуВыданСертификат) + ".p7s";
			Иначе
				ИмяФайлаПодписи = Строка(ФайлСсылка) + "-" + Сч + ".p7s";
			КонецЕсли;
		КонецЕсли;
		
		ИмяФайлаПодписи = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(ИмяФайлаПодписи);
		ИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПодписи, "");
		
		ПолныйПутьПодписи = Путь;
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолныйПутьПодписи);
		ПолныйПутьПодписи = ПолныйПутьПодписи + ИмяФайлаПодписи;
		
		ФайлПоИмени = Новый Файл(ПолныйПутьПодписи);
		ФайлСуществует = ФайлПоИмени.Существует();
		
		Счетчик = 0;
		ИмяФайлаПодписиБезПостфикса = ФайлПоИмени.ИмяБезРасширения;
		Пока ФайлСуществует Цикл
			Счетчик = Счетчик + 1;
			
			ИмяФайлаПодписи = ИмяФайлаПодписиБезПостфикса + " (" + Строка(Счетчик) + ")" + ".p7s";
			ИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПодписи, "");
			
			ПолныйПутьПодписи = Путь;
			ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолныйПутьПодписи);
			ПолныйПутьПодписи = ПолныйПутьПодписи + ИмяФайлаПодписи;
			
			ФайлДляПроверки = Новый Файл(ПолныйПутьПодписи);
			ФайлСуществует = ФайлДляПроверки.Существует();
		КонецЦикла;
		
		Файл = Новый Файл(ПолныйПутьПодписи);
		МассивИмен.Добавить(Файл.Имя);
		
		Если ТипЗнч(СоответствиеФайлЭД) = Тип("Соответствие") Тогда
			СтруктураПараметровЭД = Новый Структура;
			СтруктураПараметровЭД.Вставить("НомерЭД", ФайлСсылка.НомерЭД);
			СтруктураПараметровЭД.Вставить("УникальныйИД", ФайлСсылка.УникальныйИД);
			
			СоответствиеФайлЭД.Вставить(Файл.Имя, СтруктураПараметровЭД);
		Иначе
			// СоответствиеФайлЭД - структура файлов ЭД.
			НоваяСтрока = СоответствиеФайлЭД.ГлавныйФайлПодписи.Добавить();
			НоваяСтрока.Имя = "";
			НоваяСтрока.Путь = Файл.Имя
		КонецЕсли;
		
		ПутьКФайлу = Файл.Путь;
		Если Прав(ПутьКФайлу,1) <> "\" Тогда
			ПутьКФайлу = ПутьКФайлу + "\";
		КонецЕсли;
		
		СтруктураПодписи.Подпись.Записать(ПолныйПутьПодписи);
	КонецЦикла;
	
КонецПроцедуры

Функция СохранитьФайлКак(ДанныеФайла,
						ИмяКаталога,
						ПрисоединенныйФайл = Неопределено,
						ЭтоПроизвольныйЭД = Неопределено,
						СоответствиеФайлЭД = Неопределено)
	
	Файл = Новый Файл(ИмяКаталога);
	Если НЕ Файл.Существует() Тогда
		СоздатьКаталог(ИмяКаталога);
	КонецЕсли;
	
	РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
	
	ИмяПолучаемогоФайла = ДанныеФайла.ИмяФайла;
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ДвоичныеДанныеФайла.Записать(ИмяКаталога + ИмяПолучаемогоФайла);
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		Если ТипЗнч(СоответствиеФайлЭД) = Тип("Соответствие") Тогда
			СтруктураПараметровЭД = Новый Структура;
			СтруктураПараметровЭД.Вставить("НомерЭД", ПрисоединенныйФайл.НомерЭД);
			СтруктураПараметровЭД.Вставить("УникальныйИД", ПрисоединенныйФайл.УникальныйИД);
			
			СоответствиеФайлЭД.Вставить(ДанныеФайла.ИмяФайла, СтруктураПараметровЭД);
		Иначе
			СоответствиеФайлЭД.Вставить("ГлавныйФайл", ДанныеФайла.ИмяФайла);
		КонецЕсли;
		
		ПутьКФайлу = Файл.Путь;
		Если Прав(ПутьКФайлу,1) <> "\" Тогда
			ПутьКФайлу = ПутьКФайлу + "\";
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоПроизвольныйЭД = Истина Тогда
		
		ИмяФайла      = ДанныеФайла.Наименование;
		ИмяКонтейнера = ИмяКаталога + ИмяФайла + ".zip";
		ИмяАрхива     = ИмяФайла + ".zip";
		
		Если ИмяФайла + ".zip" = ИмяПолучаемогоФайла Тогда
			ИмяКонтейнера = ИмяКаталога+ИмяФайла+"ЭП.zip";
			ИмяАрхива     = ИмяФайла + "ЭП.zip";
		КонецЕсли;
		
		АрхивКонтейнер = Новый ЗаписьZipФайла(ИмяКонтейнера);
		АрхивКонтейнер.Добавить(ИмяКаталога + ИмяПолучаемогоФайла );
		
		АрхивКонтейнер.Записать();
		Если ИмяФайла + ".zip" = ИмяПолучаемогоФайла Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяКаталога + ИмяПолучаемогоФайла);
		КонецЕсли;
		Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
			СтруктураПараметровЭД = Новый Структура;
			СтруктураПараметровЭД.Вставить("НомерЭД", ПрисоединенныйФайл.НомерЭД);
			СтруктураПараметровЭД.Вставить("УникальныйИД", ПрисоединенныйФайл.УникальныйИД);
			
			СоответствиеФайлЭД.Вставить(ИмяАрхива, СтруктураПараметровЭД);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяКаталога + ИмяПолучаемогоФайла;
КонецФункции

Процедура УстановитьСсылкуДляВладельцаВРегистреСостояний(СсылкаНаОбъект, ЭлектронныйДокумент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
			
	НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество()=0 Тогда
		НоваяЗаписьНабора = НаборЗаписей.Добавить();
		НоваяЗаписьНабора.СсылкаНаОбъект = СсылкаНаОбъект;
	Иначе
		НоваяЗаписьНабора = НаборЗаписей.Получить(0);
	КонецЕсли;
	
	СтруктураИнформации = ОпределитьСводнуюИнформациюПоСтатусуЭД(ПрисоединенныйФайл(ЭлектронныйДокумент));
	
	НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент;
	НоваяЗаписьНабора.СостояниеВерсииЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент,"СостояниеЭДО");
	НоваяЗаписьНабора.ДействияСНашейСтороны = СтруктураИнформации.СНашейСтороны;
	НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = СтруктураИнформации.СоСтороныДругогоУчастника;
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция СоздатьТекстОписиЭД(Конверт, СоответствиеВложений, СоответствиеФайлЭД)
	
	РеквизитыКонверта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Конверт, "Отправитель, Получатель");
	ЦентрОбменаЭД =    РеквизитыКонверта.Отправитель;
	УчастникОбменаЭД = РеквизитыКонверта.Получатель;
	
	ИмяФайла = ТекущееИмяВременногоФайла("xml");
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	ЗаписьXML.ЗаписатьНачалоЭлемента("ТранспортнаяИнформация");
	// Имя документа
	ЗаписьXML.ЗаписатьНачалоЭлемента("ДатаИВремяФормирования");
	ЗаписьXML.ЗаписатьТекст(ПреобразоватьДатуВКаноническийВид(ТекущаяДатаСеанса()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	// Идентификатор документа
	ЗаписьXML.ЗаписатьНачалоЭлемента("Идентификатор");
	ЗаписьXML.ЗаписатьТекст(Строка(Конверт.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();	
	// Дата получения
	ЗаписьXML.ЗаписатьНачалоЭлемента("Отправитель");
	ЗаписьXML.ЗаписатьТекст(ЦентрОбменаЭД);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Получатель");
	ЗаписьXML.ЗаписатьТекст(УчастникОбменаЭД);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Шифрование по документам
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("НастройкиШифрования");
	Для Каждого ВложениеДокумент Из Конверт.ЭлектронныеДокументы Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("ДокументШифрования");
		ЗаписьXML.ЗаписатьТекст(Строка(ВложениеДокумент.ЭлектронныйДокумент));
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Зашифрован");
		Если Конверт.ДанныеЗашифрованы Тогда
			ЗаписьXML.ЗаписатьТекст("Да");
		Иначе
			ЗаписьXML.ЗаписатьТекст("Нет");
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		Если Конверт.ДанныеЗашифрованы Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("СертификатШифрования");
			ЗаписьXML.ЗаписатьТекст(Строка(Конверт.СертификатШифрования));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ДокументыИПодписи");
	Для Каждого Вложение Из СоответствиеВложений Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Документ");
		ЗаписьXML.ЗаписатьТекст(Вложение.Ключ);
		
		СтруктураПараметровЭД = СоответствиеФайлЭД.Получить(Вложение.Ключ);
		НомерЭД = ""; УникальныйИД = "";
		Если СтруктураПараметровЭД.Свойство("НомерЭД", НомерЭД) И ЗначениеЗаполнено(НомерЭД) Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("НомерЭД");
			ЗаписьXML.ЗаписатьТекст(НомерЭД);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		Если СтруктураПараметровЭД.Свойство("УникальныйИД", УникальныйИД) И ЗначениеЗаполнено(УникальныйИД) Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("УникальныйИД");
			ЗаписьXML.ЗаписатьТекст(УникальныйИД);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		Для Каждого Подпись Из Вложение.Значение Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("Подпись");
			ЗаписьXML.ЗаписатьТекст(Подпись);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
	Возврат ИмяФайла;
	
КонецФункции

Функция ПолучитьПоследнююВерсиюЭДПоВладельцу(СсылкаНаОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросЭД = Новый Запрос;
	ЗапросЭД.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	ЗапросЭД.Текст =

	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВложенныйЗапрос.НомерВерсииЭД КАК НомерВерсииЭД
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЭлектронныйДокументИсходящийДокументыОснования.Ссылка.НомерВерсииЭД КАК НомерВерсииЭД
	|	ИЗ
	|		Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
	|	ГДЕ
	|		ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование = &СсылкаНаОбъект
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЭлектронныйДокументВходящийДокументыОснования.Ссылка.НомерВерсииЭД
	|	ИЗ
	|		Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
	|	ГДЕ
	|		ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование = &СсылкаНаОбъект) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерВерсииЭД УБЫВ";
	
	Результат = ЗапросЭД.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.НомерВерсииЭД;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Записывает в журнал регистрации событие записи ЭД.
//
// Параметры:
//  СсылкаНаЭД - ссылка на элемент справочника ЭДПрисоединенныеФайлы.
//
Процедура ЗаписатьСобытиеЖурналаРегистрацииПоОбменуЭД(СсылкаНаЭД)
	
	Если ТипЗнч(СсылкаНаЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		УстановитьПривилегированныйРежим(Истина);
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЖурналСобытийЭД");
			ЭлементБлокировки.УстановитьЗначение("ПрисоединенныйФайл", СсылкаНаЭД);
			Блокировка.Заблокировать();
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЕСТЬNULL(МАКСИМУМ(ЖурналСобытийЭД.НомерЗаписи), 0) + 1 КАК НомерЗаписи
			|ИЗ
			|	РегистрСведений.ЖурналСобытийЭД КАК ЖурналСобытийЭД
			|ГДЕ
			|	ЖурналСобытийЭД.ПрисоединенныйФайл = &ПрисоединенныйФайл";
			Запрос.УстановитьПараметр("ПрисоединенныйФайл", СсылкаНаЭД);
			НомерЗаписи = Запрос.Выполнить().Выгрузить()[0].НомерЗаписи;
			МенеджерЗаписи                    = РегистрыСведений.ЖурналСобытийЭД.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПрисоединенныйФайл = СсылкаНаЭД;
			МенеджерЗаписи.НомерЗаписи        = НомерЗаписи;
			МенеджерЗаписи.ВладелецЭД         = СсылкаНаЭД.ВладелецФайла;
			МенеджерЗаписи.СтатусЭД           = СсылкаНаЭД.СтатусЭД;
			МенеджерЗаписи.Дата               = ТекущаяДатаСеанса();
			МенеджерЗаписи.Пользователь       = Пользователи.ТекущийПользователь();
			МенеджерЗаписи.Ответственный      = СсылкаНаЭД.Автор;
			МенеджерЗаписи.Комментарий        = СсылкаНаЭД.Описание;
			МенеджерЗаписи.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ссылку на временное хранилище двоичных данных архива с дополнительными файлами каталога.
//
// Параметры:
//  МассивФайлов - Массив - ссылки на временное хранилище дополнительного файла.
//
// Возвращаемое значение:
//  Строка - ссылка на временное хранилище.
//
Функция АрхивДополнительныхФайлов(МассивФайлов) Экспорт
	
	ВременнаяПапка = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ВременнаяПапка);
	Попытка
		Для Каждого Элемент Из МассивФайлов Цикл
			ВременнаяПапкаТовара = ВременнаяПапка + "\" + Элемент.ИдТовара + "\";
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Элемент.АдресВременногоХранилища);
			СоздатьКаталог(ВременнаяПапкаТовара);
			ДвоичныеДанныеФайла.Записать(ВременнаяПапкаТовара + Элемент.ИмяФайла);
		КонецЦикла;
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось выгрузить дополнительные файлы каталога.'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'запись файла на диск'"),
			ТекстОшибки, ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	Архив = ПолучитьИмяВременногоФайла();
	Zip = Новый ЗаписьZipФайла(Архив);
	Zip.Добавить(
			ВременнаяПапка + "\*",
			РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
			РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	Попытка
		Zip.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС
			+ НСтр("ru = 'Проверьте поддержку русского языка в региональных настройках ОС для non-Unicode programs
			|и наличие доступа к каталогу временных файлов.'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'запись файла архива на диск'"),
																					ТекстОшибки,
																					ТекстСообщения);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(Архив);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВременнаяПапка);
		Возврат Неопределено;
	КонецПопытки;
	ДвоичныеДанныеАрхива = Новый ДвоичныеДанные(Архив);
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВременнаяПапка);
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(Архив);
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанныеАрхива);
	
КонецФункции

Функция ВерсияПакетаЭД(ЭД) Экспорт
	
	Если ТипЗнч(ЭД.ВладелецФайла) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
		
		ВерсияФормата = ФорматПакетаЭД(ЭД.Ссылка);
		
	Иначе
		
		Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
			Или ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик
			Или ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			ВерсияФормата = ФорматПакетаЭД(ЭД.ЭлектронныйДокументВладелец);
			
		Иначе
			 
			ВерсияФормата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД.ВладелецФайла,"НастройкаЭДО.ВерсияФорматаПакета");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВерсияФормата;
	
КонецФункции

Функция ФорматПакетаЭД(ЭД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПакетЭДЭлектронныеДокументы.Ссылка.ВерсияФорматаПакета КАК ВерсияФорматаПакета
	|ИЗ
	|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ПакетЭДЭлектронныеДокументы
	|ГДЕ
	|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент = &ЭлектронныйДокумент";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭД);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ВерсияФормата = Неопределено;
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ВерсияФормата = Выборка.ВерсияФорматаПакета;
		
	КонецЕсли;
	
	Возврат ВерсияФормата;
	
КонецФункции

Функция ВерсияФорматаИзСтроки(Версия)
	Если Версия = "2" Тогда
		Результат = Перечисления.ВерсииФорматаПакетаЭД.Версия20;
	ИначеЕсли Версия = "3" Тогда
		Результат = Перечисления.ВерсииФорматаПакетаЭД.Версия30;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоФНС(ВидЭД) Экспорт
	
	Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12
		Или ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		Или ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		Или ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		Или ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		Или ВидЭД = Перечисления.ВидыЭД.СчетФактура
		Или ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
		Или ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		Или ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет является ли ЭД титулом.
Функция ЭтоТитулФНС(ДанныеЭД) Экспорт
	
	Результат = Ложь;
	Если ТипЗнч(ДанныеЭД) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") 
		ИЛИ ТипЗнч(ДанныеЭД) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
		РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЭД, "ВидЭД, ТипЭлементаВерсииЭД");
	Иначе
		РеквизитыЭД = Новый Структура("ВидЭД, ТипЭлементаВерсииЭД", ДанныеЭД);
	КонецЕсли;
	
	Если РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		Или (РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
				И РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД)
		ИЛИ ((РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура)
			И (РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
			ИЛИ РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД)) Тогда
			
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Определяется является ли ЭД ответным титулом.
Функция ЭтоОтветныйТитул(ДанныеЭД) Экспорт
	
	Результат = Ложь;
	
	Если ТипЗнч(ДанныеЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		ТипЭлементаВерсииЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЭД, "ТипЭлементаВерсииЭД");
	Иначе
		ТипЭлементаВерсииЭД = ДанныеЭД;
	КонецЕсли;
	
	Если ОбменСКонтрагентамиСлужебныйКлиентСервер.ТипыОтветныхТитулов().Найти(ТипЭлементаВерсииЭД) <> Неопределено Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает ответный титул.
// Параметры:
//  ПервыйТитул - ЭД вида Торг-12 титул продавца, Акт титул исполнителя, СоглашениеОбИзмененииСтоимостиОтправитель
// Возвращаемое значение:
//  Ссылка на электронный документ вида Торг-12 титул покупателя, Акт титул заказчика, СоглашениеОбИзмененииСтоимостиПолучатель
//   если такой документ есть или неопределено, если документа нет.
//
Функция ВторойТитулДокумента(ПервыйТитул) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ВторойТитул
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
	|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&МассивТиповТитулов)";
	
	МассивТиповТитулов = Новый Массив;
	МассивТиповТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
	МассивТиповТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
	МассивТиповТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
	МассивТиповТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
	МассивТиповТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	Запрос.УстановитьПараметр("МассивТиповТитулов",МассивТиповТитулов);
	Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", ПервыйТитул);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ВторойТитул = Неопределено;
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ВторойТитул = Выборка.ВторойТитул;
		
	КонецЕсли;
	
	Возврат ВторойТитул
	
КонецФункции

Функция ЭтоСчетНаОплату(СсылкаНаЭД)
	
	Результат = Ложь;
	ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД");
	
	Если ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоCMLДокумент(СсылкаНаЭД)
	
	Результат = Ложь;

	ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД");
	
	Если ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
		Или ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
		Или ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
		Или ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
		Или ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
		Или ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
		
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Выводит сообщение пользователю об отсутствии настройки ЭДО.
// Параметры
// СтруктураЭД - структура - параметры, которыми по которым ищется настройка ЭД
// Источник - ДокументСсылка, СправочникаСсылка - объект информационной базы, которому принадлежит э.д.
//
Процедура СообщитьОбОтсутствииСоглашенияЭД(ПараметрыЭД, Источник)
	
	ПравильноЗаполнен = Истина;
	ОбменСКонтрагентамиПереопределяемый.ПроверитьПравильностьЗаполненияОбъекта(ПараметрыЭД, ПравильноЗаполнен);
	
	Если НЕ ПравильноЗаполнен Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'Обработка %1.
								 |Операция не выполнена.
								 |Необходимо создать ""Настройку ЭДО"" с реквизитами:'");
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Источник);
	
	ТаблицаПараметров = Новый ТаблицаЗначений();
	ТаблицаПараметров.Колонки.Добавить("Ключ");
	ТаблицаПараметров.Колонки.Добавить("Значение");
	ТаблицаПараметров.Колонки.Добавить("Порядок");
	
	ЭтоСчетФактураВыданный = Ложь;
	Если ПараметрыЭД.Свойство("ЭтоСчетФактураВыданный") И ЗначениеЗаполнено(ПараметрыЭД.ЭтоСчетФактураВыданный) Тогда
		ЭтоСчетФактураВыданный = ПараметрыЭД.ЭтоСчетФактураВыданный;
	КонецЕсли;
	
	Для Каждого ТекПараметр Из ПараметрыЭД Цикл
		
		Порядок = 0;
		Если НРег(ТекПараметр.Ключ) = НРег("Организация") Тогда
			Порядок = 1;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("Партнер") И НЕ ЭтоСчетФактураВыданный Тогда
			Порядок = 2;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("Контрагент") Тогда
			Порядок = 3;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("ДоговорКонтрагента") Тогда
			Порядок = 4;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("ВидЭД") И НЕ ЭтоСчетФактураВыданный Тогда
			Порядок = 5;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("ЭтоСчетФактураВыданный") И ЭтоСчетФактураВыданный Тогда
			Порядок = 0.5;
		КонецЕсли;
		
		Если Порядок > 0 Тогда
			СтрокаПараметров = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПараметров, ТекПараметр);
			Если ЭтоСчетФактураВыданный Тогда
				Если НРег(ТекПараметр.Ключ) = НРег("ЭтоСчетФактураВыданный") Тогда
					СтрокаПараметров.Ключ = НСтр("ru = 'Способ обмена'");
					СтрокаПараметров.Значение = НСтр("ru = 'через оператора ЭДО'");
				ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("Контрагент") Тогда
					СтрокаПараметров.Ключ = "Участник";
				КонецЕсли;
				ИначеЕсли ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
				Если ТекПараметр.Ключ = "Организация" Тогда
					СтрокаПараметров.Ключ = "Организация-отправитель";
				ИначеЕсли ТекПараметр.Ключ = "Контрагент" Тогда
					СтрокаПараметров.Ключ = "Организация-получатель";
				КонецЕсли;
			КонецЕсли;
			СтрокаПараметров.Порядок = Порядок;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПараметров.Сортировать("Порядок");
	Для Каждого СтрокаПараметров Из ТаблицаПараметров Цикл
		Если ЗначениеЗаполнено(СтрокаПараметров.Значение) Тогда
			Текст = Текст + Символы.ПС + НСтр("ru = '<%1>: %2'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаПараметров.Ключ, СтрокаПараметров.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	
КонецПроцедуры

// Получает текст запроса по настройкам обмена.
//
// Возвращаемое значение:
//  ТекстЗапроса - текст запроса.
//
Процедура ПолучитьТекстНастроекОбменаПоСоглашению(ТекстЗапроса)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТЧ_Соглашения.Организация КАК Организация,
	|	ТЧ_Соглашения.Контрагент КАК Контрагент,
	|	ТЧ_Соглашения.ВидЭД,
	|	ТЧ_Соглашения.НаправлениеЭД,
	|	ТЧ_Соглашения.ИспользоватьЭП КАК Подписывать,
	|	ТЧ_Соглашения.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
	|	ТЧ_Соглашения.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещение,
	|	ТЧ_Соглашения.Ссылка.СертификатКонтрагентаДляШифрования КАК СертификатКонтрагентаДляШифрования,
	|	ТЧ_Соглашения.Ссылка.СертификатОрганизацииДляРасшифровки КАК СертификатОрганизацииДляРасшифровки,
	|	ТЧ_Соглашения.ПрофильНастроекЭДО.РесурсВходящихДокументов КАК ОбщийРесурсВходящихДокументов,
	|	ТЧ_Соглашения.Ссылка.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
	|	ТЧ_Соглашения.Ссылка.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
	|	ТЧ_Соглашения.Ссылка.КаталогВходящихДокументов КАК КаталогВходящихДокументов,
	|	ТЧ_Соглашения.Ссылка.КаталогИсходящихДокументов КАК КаталогИсходящихДокументов,
	|	ТЧ_Соглашения.Ссылка.КаталогВходящихДокументовFTP КАК КаталогВходящихДокументовFTP,
	|	ТЧ_Соглашения.Ссылка.КаталогИсходящихДокументовFTP КАК КаталогИсходящихДокументовFTP,
	|	ТЧ_Соглашения.Ссылка.ЭлектроннаяПочтаКонтрагента КАК ЭлектроннаяПочтаКонтрагента,
	|	ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	|	ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	ТЧ_Соглашения.Ссылка КАК Основание,
	|	ТЧ_Соглашения.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
	|	ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
	|	ТЧ_Соглашения.ВерсияРегламентаЭДО,
	|	ТЧ_Соглашения.ВерсияФормата,
	|	ТЧ_Соглашения.ВерсияФорматаПакета,
	|	ТЧ_Соглашения.НастройкаЭДОДействует,
	|	ТЧ_Соглашения.МаршрутПодписания,
	|	ТЧ_Соглашения.ЭтоИнтеркампани
	|ПОМЕСТИТЬ ВТ_ТЧ_Соглашения
	|ИЗ
	|	(ВЫБРАТЬ
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК Ссылка,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент КАК ВидЭД,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП КАК ИспользоватьЭП,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ТребуетсяОтветнаяПодпись КАК ТребуетсяПодтверждение,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
	|		&НаправлениеЭД КАК НаправлениеЭД,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация КАК Организация,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент КАК Контрагент,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД КАК СпособОбменаЭД,
	|		ЗНАЧЕНИЕ(Перечисление.ВерсииРегламентаОбмена1С.Версия20) КАК ВерсияРегламентаЭДО,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ВерсияФормата КАК ВерсияФормата,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ВерсияФорматаПакета КАК ВерсияФорматаПакета,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
	|		ВЫБОР
	|			КОГДА НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
	|					И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НастройкаЭДОДействует,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.МаршрутПодписания КАК МаршрутПодписания,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ЭтоИнтеркампани КАК ЭтоИнтеркампани
	|	ИЗ
	|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|	ГДЕ
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &СоглашениеЭД
	|		И ВЫБОР
	|				КОГДА &ЭтоСлужебныйЭД
	|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭДВладельца
	|				ИНАЧЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
	|			КОНЕЦ
	|		И ВЫБОР
	|				КОГДА &ТолькоДействующиеСоглашения
	|					ТОГДА НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
	|							И (СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
	|								ИЛИ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ЭтоИнтеркампани)
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ) КАК ТЧ_Соглашения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сертификаты.Ссылка КАК Ссылка,
	|	ВидыЭДЭП.ВидЭД КАК ВидДокумента,
	|	Сертификаты.Организация КАК Организация,
	|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
	|	ЛОЖЬ КАК ПарольПолучен,
	|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя
	|ПОМЕСТИТЬ ВТ_Сертификаты
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
	|		ПО (ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ПрофилиЭДОСертификаты.Сертификат КАК Сертификат
	|		ИЗ
	|			ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиЭДОСертификаты
	|				ПО ВТ_ТЧ_Соглашения.ПрофильНастроекЭДО = ПрофилиЭДОСертификаты.Ссылка
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СоглашенияЭДСертификаты.Сертификат
	|		ИЗ
	|			ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
	|				ПО ВТ_ТЧ_Соглашения.Основание = СоглашенияЭДСертификаты.Ссылка) КАК СертификатыИзНастроекИПрофилей
	|		ПО Сертификаты.Ссылка = СертификатыИзНастроекИПрофилей.Сертификат
	|ГДЕ
	|	НЕ Сертификаты.ПометкаУдаления
	|	И НЕ Сертификаты.Отозван
	|	И ВидыЭДЭП.ВидЭД = &ВидЭД
	|	И Сертификаты.Пользователь В (&Пользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка), &ПользовательНеУказан)
	|	И ВидыЭДЭП.Использовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЧ_Соглашения.Организация,
	|	ВТ_ТЧ_Соглашения.Контрагент,
	|	ВТ_ТЧ_Соглашения.ВидЭД,
	|	ВТ_ТЧ_Соглашения.НаправлениеЭД,
	|	ВТ_ТЧ_Соглашения.Подписывать КАК Подписывать,
	|	ВТ_ТЧ_Соглашения.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
	|	ВТ_ТЧ_Соглашения.ТребуетсяИзвещение КАК ТребуетсяИзвещение,
	|	ВТ_ТЧ_Соглашения.СертификатКонтрагентаДляШифрования,
	|	ВТ_ТЧ_Соглашения.СертификатОрганизацииДляРасшифровки,
	|	ВТ_ТЧ_Соглашения.ОбщийРесурсВходящихДокументов,
	|	ВТ_ТЧ_Соглашения.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
	|	ВТ_ТЧ_Соглашения.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
	|	ВТ_ТЧ_Соглашения.КаталогВходящихДокументов,
	|	ВТ_ТЧ_Соглашения.КаталогИсходящихДокументов,
	|	ВТ_ТЧ_Соглашения.КаталогВходящихДокументовFTP,
	|	ВТ_ТЧ_Соглашения.КаталогИсходящихДокументовFTP,
	|	ВТ_ТЧ_Соглашения.ЭлектроннаяПочтаКонтрагента,
	|	ВТ_ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	|	ВТ_ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	ВТ_ТЧ_Соглашения.Основание КАК СоглашениеЭД,
	|	ВТ_ТЧ_Соглашения.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
	|	ВТ_ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
	|	ВЫБОР
	|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
	|		ИНАЧЕ ВТ_Сертификаты.Ссылка
	|	КОНЕЦ КАК СертификатОрганизацииДляПодписи,
	|	ВЫБОР
	|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
	|		ИНАЧЕ ВТ_Сертификаты.Ссылка
	|	КОНЕЦ КАК СертификатОрганизацииДляПодтверждения,
	|	ВЫБОР
	|		КОГДА &НаправлениеЭД <> ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
	|				ИЛИ ВТ_СертификатыОрганизацииПолучателя.Ссылка ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
	|		ИНАЧЕ ВТ_СертификатыОрганизацииПолучателя.Ссылка
	|	КОНЕЦ КАК СертификатОрганизацииПолучателяДляПодписи,
	|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификату,
	|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ПарольПолучен,
	|	ВТ_Сертификаты.ПарольПользователя,
	|	ЕСТЬNULL(ВТ_СертификатыОрганизацииПолучателя.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификатуОрганизацииПолучателя,
	|	ЕСТЬNULL(ВТ_СертификатыОрганизацииПолучателя.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ПарольОрганизацииПолучателяПолучен,
	|	ВТ_СертификатыОрганизацииПолучателя.ПарольПользователя КАК ПарольПользователяОрганизацииПолучателя,
	|	ВТ_ТЧ_Соглашения.ВерсияРегламентаЭДО,
	|	ВТ_ТЧ_Соглашения.ВерсияФормата,
	|	ВТ_ТЧ_Соглашения.ВерсияФорматаПакета,
	|	ВТ_ТЧ_Соглашения.НастройкаЭДОДействует,
	|	ВТ_ТЧ_Соглашения.МаршрутПодписания,
	|	ВТ_ТЧ_Соглашения.ЭтоИнтеркампани
	|ИЗ
	|	ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_Сертификаты
	|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_Сертификаты.ВидДокумента
	|			И (ВТ_Сертификаты.Организация = ВТ_ТЧ_Соглашения.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_СертификатыОрганизацииПолучателя
	|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_СертификатыОрганизацииПолучателя.ВидДокумента
	|			И ВТ_ТЧ_Соглашения.Контрагент = ВТ_СертификатыОрганизацииПолучателя.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат.Отпечаток КАК Отпечаток,
	|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка КАК Соглашение
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации
	|ГДЕ
	|	НЕ СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка.ПометкаУдаления
	|	И СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка = &СоглашениеЭД";
	
КонецПроцедуры

// Получает текст запроса по настройкам обмена с приоритетами.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса.
//
Процедура ПолучитьТекстЗапросаНастроекОбменаСПриоритетами(ТекстЗапроса)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТЧ_Соглашения.Организация КАК Организация,
	|	ТЧ_Соглашения.Контрагент КАК Контрагент,
	|	ТЧ_Соглашения.ВидЭД,
	|	ТЧ_Соглашения.НаправлениеЭД,
	|	ТЧ_Соглашения.ИспользоватьЭП КАК Подписывать,
	|	ТЧ_Соглашения.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
	|	ТЧ_Соглашения.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещение,
	|	ИСТИНА КАК ОжидатьКвитанциюОДоставке,
	|	ТЧ_Соглашения.Ссылка.СертификатКонтрагентаДляШифрования КАК СертификатКонтрагентаДляШифрования,
	|	ТЧ_Соглашения.Ссылка.СертификатОрганизацииДляРасшифровки КАК СертификатОрганизацииДляРасшифровки,
	|	ТЧ_Соглашения.ПрофильНастроекЭДО.РесурсВходящихДокументов КАК ОбщийРесурсВходящихДокументов,
	|	ТЧ_Соглашения.Ссылка.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
	|	ТЧ_Соглашения.Ссылка.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
	|	ТЧ_Соглашения.Ссылка.КаталогВходящихДокументов КАК КаталогВходящихДокументов,
	|	ТЧ_Соглашения.Ссылка.КаталогИсходящихДокументов КАК КаталогИсходящихДокументов,
	|	ТЧ_Соглашения.Ссылка.КаталогВходящихДокументовFTP КАК КаталогВходящихДокументовFTP,
	|	ТЧ_Соглашения.Ссылка.КаталогИсходящихДокументовFTP КАК КаталогИсходящихДокументовFTP,
	|	ТЧ_Соглашения.Ссылка.ЭлектроннаяПочтаКонтрагента КАК ЭлектроннаяПочтаКонтрагента,
	|	ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	|	ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	ТЧ_Соглашения.Ссылка КАК Основание,
	|	ТЧ_Соглашения.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
	|	ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
	|	ТЧ_Соглашения.ВерсияРегламентаЭДО КАК ВерсияРегламентаЭДО,
	|	ТЧ_Соглашения.Приоритет,
	|	ТЧ_Соглашения.ВерсияФормата,
	|	ТЧ_Соглашения.ВерсияФорматаПакета,
	|	ТЧ_Соглашения.НастройкаЭДОДействует,
	|	ТЧ_Соглашения.МаршрутПодписания
	|ПОМЕСТИТЬ ВТ_ТЧ_Соглашения
	|ИЗ
	|	(ВЫБРАТЬ
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК Ссылка,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент КАК ВидЭД,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП КАК ИспользоватьЭП,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ТребуетсяОтветнаяПодпись КАК ТребуетсяПодтверждение,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
	|		&НаправлениеЭД КАК НаправлениеЭД,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация КАК Организация,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент КАК Контрагент,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД КАК СпособОбменаЭД,
	|		ЗНАЧЕНИЕ(Перечисление.ВерсииРегламентаОбмена1С.Версия20) КАК ВерсияРегламентаЭДО,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ВерсияФормата КАК ВерсияФормата,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ВерсияФорматаПакета КАК ВерсияФорматаПакета,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
	|		0 КАК Приоритет,
	|		ВЫБОР
	|			КОГДА НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
	|					И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
	|					ИЛИ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НастройкаЭДОДействует,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.МаршрутПодписания КАК МаршрутПодписания
	|	ИЗ
	|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА &ТолькоДействующиеСоглашения
	|					ТОГДА НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
	|							И (СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
	|							ИЛИ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует))
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|		И ВЫБОР
	|				КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
	|						И &НаправлениеЭД = НЕОПРЕДЕЛЕНО
	|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
	|							И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
	|							И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
	|				КОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
	|						И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
	|						И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
	|						И ВЫБОР
	|							КОГДА &ЭтоСлужебныйЭД
	|								ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭДВладельца
	|							ИНАЧЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
	|						КОНЕЦ
	|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать
	|				КОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПрайсЛист)
	|						И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
	|						И &Партнер
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ) КАК ТЧ_Соглашения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сертификаты.Ссылка КАК Ссылка,
	|	ВидыЭДЭП.ВидЭД КАК ВидДокумента,
	|	Сертификаты.Организация КАК Организация,
	|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
	|	ЛОЖЬ КАК ПарольПолучен,
	|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя
	|ПОМЕСТИТЬ ВТ_Сертификаты
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
	|		ПО (ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ПрофилиЭДОСертификаты.Сертификат КАК Сертификат
	|		ИЗ
	|			ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиЭДОСертификаты
	|				ПО ВТ_ТЧ_Соглашения.ПрофильНастроекЭДО = ПрофилиЭДОСертификаты.Ссылка
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СоглашенияЭДСертификаты.Сертификат
	|		ИЗ
	|			ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
	|				ПО ВТ_ТЧ_Соглашения.Основание = СоглашенияЭДСертификаты.Ссылка) КАК СертификатыИзНастроекИПрофилей
	|		ПО Сертификаты.Ссылка = СертификатыИзНастроекИПрофилей.Сертификат
	|ГДЕ
	|	НЕ Сертификаты.ПометкаУдаления
	|	И НЕ Сертификаты.Отозван
	|	И ВЫБОР
	|			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВидыЭДЭП.ВидЭД = &ВидЭД
	|		КОНЕЦ
	|	И Сертификаты.Пользователь В (&Пользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка), &ПользовательНеУказан)
	|	И ВидыЭДЭП.Использовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЧ_Соглашения.Приоритет КАК Приоритет,
	|	ВТ_ТЧ_Соглашения.Организация,
	|	ВТ_ТЧ_Соглашения.Контрагент,
	|	ВТ_ТЧ_Соглашения.ВидЭД,
	|	ВТ_ТЧ_Соглашения.НаправлениеЭД,
	|	ВТ_ТЧ_Соглашения.Подписывать КАК Подписывать,
	|	ВТ_ТЧ_Соглашения.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
	|	ВТ_ТЧ_Соглашения.ТребуетсяИзвещение КАК ТребуетсяИзвещение,
	|	ВТ_ТЧ_Соглашения.ОжидатьКвитанциюОДоставке КАК ОжидатьКвитанциюОДоставке,
	|	ВТ_ТЧ_Соглашения.СертификатКонтрагентаДляШифрования,
	|	ВТ_ТЧ_Соглашения.СертификатОрганизацииДляРасшифровки,
	|	ВТ_ТЧ_Соглашения.ОбщийРесурсВходящихДокументов,
	|	ВТ_ТЧ_Соглашения.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
	|	ВТ_ТЧ_Соглашения.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
	|	ВТ_ТЧ_Соглашения.КаталогВходящихДокументов,
	|	ВТ_ТЧ_Соглашения.КаталогИсходящихДокументов,
	|	ВТ_ТЧ_Соглашения.КаталогВходящихДокументовFTP,
	|	ВТ_ТЧ_Соглашения.КаталогИсходящихДокументовFTP,
	|	ВТ_ТЧ_Соглашения.ЭлектроннаяПочтаКонтрагента,
	|	ВТ_ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	|	ВТ_ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	ВТ_ТЧ_Соглашения.Основание КАК СоглашениеЭД,
	|	ВТ_ТЧ_Соглашения.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
	|	ВТ_ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
	|	ВЫБОР
	|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
	|		ИНАЧЕ ВТ_Сертификаты.Ссылка
	|	КОНЕЦ КАК СертификатОрганизацииДляПодписи,
	|	ВЫБОР
	|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL
	|				ИЛИ ВТ_Сертификаты.Организация <> &Организация
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
	|		ИНАЧЕ ВТ_Сертификаты.Ссылка
	|	КОНЕЦ КАК СертификатОрганизацииДляПодтверждения,
	|	ВЫБОР
	|		КОГДА НЕ &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
	|				ИЛИ ВТ_СертификатыОрганизацииПолучателя.Ссылка ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
	|		ИНАЧЕ ВТ_СертификатыОрганизацииПолучателя.Ссылка
	|	КОНЕЦ КАК СертификатОрганизацииПолучателяДляПодписи,
	|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификату,
	|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ПарольПолучен,
	|	ВТ_Сертификаты.ПарольПользователя,
	|	ЕСТЬNULL(ВТ_СертификатыОрганизацииПолучателя.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификатуОрганизацииПолучателя,
	|	ЕСТЬNULL(ВТ_СертификатыОрганизацииПолучателя.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ПарольОрганизацииПолучателяПолучен,
	|	ВТ_СертификатыОрганизацииПолучателя.ПарольПользователя КАК ПарольПользователяОрганизацииПолучателя,
	|	ВТ_ТЧ_Соглашения.ВерсияРегламентаЭДО,
	|	ВТ_ТЧ_Соглашения.ВерсияФормата,
	|	ВТ_ТЧ_Соглашения.ВерсияФорматаПакета,
	|	ВТ_ТЧ_Соглашения.НастройкаЭДОДействует,
	|	ВТ_ТЧ_Соглашения.МаршрутПодписания
	|ИЗ
	|	ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_Сертификаты
	|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_Сертификаты.ВидДокумента
	|			И ВТ_ТЧ_Соглашения.Организация = ВТ_Сертификаты.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_СертификатыОрганизацииПолучателя
	|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_СертификатыОрганизацииПолучателя.ВидДокумента
	|			И ВТ_ТЧ_Соглашения.Контрагент = ВТ_СертификатыОрганизацииПолучателя.Организация
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
	|					И &НаправлениеЭД = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВТ_ТЧ_Соглашения.НаправлениеЭД = &НаправлениеЭД
	|					И ВЫБОР
	|						КОГДА &ЭтоСлужебныйЭД
	|							ТОГДА ВЫБОР
	|									КОГДА &ДокументФНС
	|										ТОГДА ИСТИНА
	|									ИНАЧЕ ВТ_ТЧ_Соглашения.ВидЭД = &ВидЭДВладельца
	|								КОНЕЦ
	|						ИНАЧЕ ВТ_ТЧ_Соглашения.ВидЭД = &ВидЭД
	|					КОНЕЦ
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	ТекстЗапросаПартнеры = "ИСТИНА";
	Если ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
		ТекстЗапросаПартнеры = "&Партнер <> НЕОПРЕДЕЛЕНО
		|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент.Партнер = &Партнер";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Партнер", ТекстЗапросаПартнеры);
	
КонецПроцедуры

// Добавление нового параметра в ПараметрыКлиентаНаСервере.
//
// Параметры:
//  ИмяПараметра      - Произвольный - имя добавляемого параметра.
//  ЗначениеПараметра - Произвольный - значение добавляемого параметра.
//
Процедура ПоместитьПараметрВПараметрыКлиентаНаСервере(ИмяПараметра, ЗначениеПараметра) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыКлиентаНаСервере = Новый Соответствие(ПараметрыСеанса.ПараметрыКлиентаНаСервере);
	
	ПараметрыОбменСКонтрагентами = ПараметрыКлиентаНаСервере.Получить("ОбменСКонтрагентами");
	Если ПараметрыОбменСКонтрагентами = Неопределено ИЛИ ТипЗнч(ПараметрыОбменСКонтрагентами) <> Тип("ФиксированноеСоответствие") Тогда
		// Параметр еще не установлен.
		ПараметрыОбменСКонтрагентами = Новый Соответствие;
	Иначе
		ПараметрыОбменСКонтрагентами = Новый Соответствие(ПараметрыОбменСКонтрагентами);
	КонецЕсли;
	
	ПараметрыОбменСКонтрагентами.Вставить(ИмяПараметра, ПреобразоватьКоллекциюЗначенийВФиксированную(ЗначениеПараметра));
	ПараметрыКлиентаНаСервере.Вставить("ОбменСКонтрагентами", Новый ФиксированноеСоответствие(ПараметрыОбменСКонтрагентами));
	ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(ПараметрыКлиентаНаСервере);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Получение хранящегося в ПараметрыКлиентаНаСервере параметра.
//
// Параметры:
//   ИмяПараметра                  - Произвольный - имя добавляемого параметра.
//   УдалитьПараметрПослеПолучения - Булево - признак необходимости удаления параметра из ПараметрыКлиентаНаСервере,
//                                  после получения значения.
//
// Возвращаемое значение:
//   Произвольный, Неопределено - хранимое в параметре значение, если параметра с таким именем нет, то неопределено.
//
Функция ПараметрИзПараметрыКлиентаНаСервере(ИмяПараметра, УдалитьПараметрПослеПолучения = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыКлиентаНаСервере = Новый Соответствие(ПараметрыСеанса.ПараметрыКлиентаНаСервере);
	
	ЗначениеПараметра = Неопределено;
	
	ПараметрыОбменСКонтрагентами = ПараметрыКлиентаНаСервере.Получить("ОбменСКонтрагентами");
	Если ТипЗнч(ПараметрыОбменСКонтрагентами) = Тип("ФиксированноеСоответствие") Тогда
		ЗначениеПараметра = ПараметрыОбменСКонтрагентами.Получить(ИмяПараметра);
		Если ЗначениеПараметра <> Неопределено Тогда
			ЗначениеПараметра = ПреобразоватьФиксированнуюКоллекциюЗначенийВПростую(ЗначениеПараметра);
			Если УдалитьПараметрПослеПолучения И ЗначениеПараметра <> Неопределено Тогда
				ПараметрыОбменСКонтрагентами = Новый Соответствие(ПараметрыОбменСКонтрагентами);
				ПараметрыОбменСКонтрагентами.Удалить(ИмяПараметра);
				ПараметрыКлиентаНаСервере.Вставить("ОбменСКонтрагентами", Новый ФиксированноеСоответствие(ПараметрыОбменСКонтрагентами));
				ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(ПараметрыКлиентаНаСервере);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЗначениеПараметра;
	
КонецФункции

Функция ПреобразоватьКоллекциюЗначенийВФиксированную(ЗначениеПараметра)
	
	Если ТипЗнч(ЗначениеПараметра) = Тип("Соответствие") Тогда
		ВозвращаемоеЗначение = Новый ФиксированноеСоответствие(ЗначениеПараметра);
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Структура") Тогда
		ВозвращаемоеЗначение = Новый ФиксированнаяСтруктура(ЗначениеПараметра);
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
		ВозвращаемоеЗначение = Новый ФиксированныйМассив(ЗначениеПараметра);
	Иначе
		ВозвращаемоеЗначение = ЗначениеПараметра;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПреобразоватьФиксированнуюКоллекциюЗначенийВПростую(ЗначениеПараметра)
	
	Если ТипЗнч(ЗначениеПараметра) = Тип("ФиксированноеСоответствие") Тогда
		ВозвращаемоеЗначение = Новый Соответствие(ЗначениеПараметра);
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("ФиксированнаяСтруктура") Тогда
		ВозвращаемоеЗначение = Новый Структура(ЗначениеПараметра);
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("ФиксированныйМассив") Тогда
		ВозвращаемоеЗначение = Новый Массив(ЗначениеПараметра);
	Иначе
		ВозвращаемоеЗначение = ЗначениеПараметра;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Только для внутреннего использования
Функция АктуальнаяВерсияФорматаЭД(ВидЭлектронногоДокумента) Экспорт
	
	Результат = Неопределено;
	
	ТаблицаФорматов = ФорматыЭлектронныхДокументов();
	СтрокиДействующихФорматов = ТаблицаФорматов.НайтиСтроки(
		Новый Структура("ВидЭлектронногоДокумента, Действует", ВидЭлектронногоДокумента, Истина));
		
	Если СтрокиДействующихФорматов.Количество() Тогда
		Результат = СтрокиДействующихФорматов[СтрокиДействующихФорматов.Количество() - 1].ИдентификаторФормата;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьПараметрыЭД(ДокументИБ, ПараметрыЭД)
	
	Если Не ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДокументИБ)) Тогда
		СсылкаНаОбъект = ДокументИБ.Ссылка;
	Иначе
		СсылкаНаОбъект = ДокументИБ
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.ЭлектронныйДокумент КАК ЭД
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Если ЗначениеЗаполнено(Выборка.ЭД) Тогда
		ЭД = Выборка.ЭД;
		СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "Организация, Контрагент");
		
		ПараметрыЭД.Контрагент = СвойстваЭД.Контрагент;
		ПараметрыЭД.Организация = СвойстваЭД.Организация;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоВидЭДБезТитула(ВидЭД)

	ВидыЭДБезТитула = Новый Массив;
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.АктВыполненныхРабот);
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями);
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.ЗаказТовара);
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.ОтветНаЗаказ);
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.КаталогТоваров);
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара);
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара);
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями);
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.ПрайсЛист);
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.ПроизвольныйЭД);
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.СчетНаОплату);
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.ТОРГ12);
	
	Возврат ВидыЭДБезТитула.Найти(ВидЭД) <> Неопределено;

КонецФункции 

Процедура СформироватьXMLФайл(ТекЭлемент, МассивСтруктурВозврата, ПараметрыОбмена, ДопПараметры)
	
	МассивОбъектовДляВыгрузки = ТекЭлемент.Значение;
	
	ВерсияФНС_2016 = ВерсияСхемыФНС_2016();
	
	Для Каждого ОбъектДляВыгрузки Из МассивОбъектовДляВыгрузки Цикл
		
		Если ТекЭлемент.Ключ = Перечисления.ВидыЭД.КаталогТоваров И НЕ ДопПараметры.Свойство("БыстрыйОбмен") Тогда
			НастройкиОбмена = ОпределитьНастройкиОбменаЭДПоИсточнику(ОбъектДляВыгрузки);
		Иначе
			НастройкиОбмена = ПараметрыОбмена.Получить(ОбъектДляВыгрузки);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НастройкиОбмена) Тогда
			Продолжить
		КонецЕсли;
		
		Если НастройкиОбмена.ПрофильНастроекЭДО.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
			ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(ОбъектДляВыгрузки, , Истина);
		КонецЕсли;

		Если ТекЭлемент.Ключ = Перечисления.ВидыЭД.СчетФактура Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьИнформациюПродавца(ОбъектДляВыгрузки, НастройкиОбмена);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьИнформациюПродавцаУКД(ОбъектДляВыгрузки, НастройкиОбмена);
				
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			
			Если НастройкиОбмена.ВерсияФормата = ВерсияФНС_2016 Тогда
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьПередачаТоваровПродавец(ОбъектДляВыгрузки, НастройкиОбмена);
			Иначе
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьИнформациюПродавца(ОбъектДляВыгрузки, НастройкиОбмена);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.АктИсполнитель Тогда
			
			Если НастройкиОбмена.ВерсияФормата = ВерсияФНС_2016 Тогда
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьПередачаРаботИсполнитель(ОбъектДляВыгрузки, НастройкиОбмена);
			Иначе
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьИнформациюПродавца(ОбъектДляВыгрузки, НастройкиОбмена);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьИнформациюПродавцаУКД(ОбъектДляВыгрузки, НастройкиОбмена);
				
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьИнформациюПродавца(ОбъектДляВыгрузки, НастройкиОбмена);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.СчетНаОплату Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьСчетНаОплатуПоДокументу(ОбъектДляВыгрузки, НастройкиОбмена);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ПрайсЛист Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьПрайсПоДокументу(ОбъектДляВыгрузки, НастройкиОбмена);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ЗаказТовара Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьЗаказПоставщикуПоДокументу(ОбъектДляВыгрузки, НастройкиОбмена);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьЗаказКлиентаПоДокументу(ОбъектДляВыгрузки, НастройкиОбмена);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьОтчетОПродажахКомиссионногоТовараПоДокументу(ОбъектДляВыгрузки, НастройкиОбмена);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьОтчетОСписанииКомиссионногоТовараПоДокументу(ОбъектДляВыгрузки, НастройкиОбмена);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.КаталогТоваров Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьКаталогНоменклатуры(НастройкиОбмена, ДопПараметры);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьПередачуТоваровМеждуОрганизациями(ОбъектДляВыгрузки, НастройкиОбмена);
				
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьВозвратТоваровМеждуОрганизациями(ОбъектДляВыгрузки, НастройкиОбмена);
				
		ИначеЕсли ВРег(ТекЭлемент.Ключ) = ВРег("РеквизитыОрганизации") Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьРеквизитыОрганизации(ОбъектДляВыгрузки, НастройкиОбмена);

		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат) Тогда
			
			ВерсияРегламентаЭДО = "";
			Если НЕ НастройкиОбмена.Свойство("ВерсияРегламентаЭДО", ВерсияРегламентаЭДО)
				ИЛИ НЕ ЗначениеЗаполнено(ВерсияРегламентаЭДО) Тогда
				ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20;
			КонецЕсли;
			
			Результат.СтруктураЭД.Вставить("ВерсияРегламентаЭДО", ВерсияРегламентаЭДО);
			
			ТребуетсяПодтверждение = Ложь;
			Если НастройкиОбмена.Свойство("ТребуетсяПодтверждение") Тогда
				ТребуетсяПодтверждение = НастройкиОбмена.ТребуетсяПодтверждение;
			КонецЕсли;
			Если Результат.СтруктураЭД.Свойство("ТипЭлементаВерсииЭД")
				И (Результат.СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
				ИЛИ Результат.СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
				ИЛИ Результат.СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ) Тогда
				ТребуетсяПодтверждение = Ложь;
			КонецЕсли;
			Если Результат.СтруктураЭД.Свойство("ПодтверждениеОбязательно") 
				И Результат.СтруктураЭД.ПодтверждениеОбязательно Тогда
				ТребуетсяПодтверждение = Истина;
			КонецЕсли;
			Результат.СтруктураЭД.Вставить("ТребуетсяПодтверждение", ТребуетсяПодтверждение);
			
			Результат.СтруктураЭД.Вставить("ТребуетсяИзвещение", ?(НастройкиОбмена.Свойство("ТребуетсяИзвещение"),
				НастройкиОбмена.ТребуетсяИзвещение, Ложь));
				
			Если Не (Результат.СтруктураЭД.Свойство("НаименованиеДокументаОтправителя") 
						И ЗначениеЗаполнено(Результат.СтруктураЭД.НаименованиеДокументаОтправителя))
					И Результат.СтруктураЭД.Свойство("ТипЭлементаВерсииЭД") Тогда
				Результат.СтруктураЭД.Вставить("НаименованиеДокументаОтправителя", Строка(Результат.СтруктураЭД.ТипЭлементаВерсииЭД));
			КонецЕсли;
				
			МассивСтруктурВозврата.Добавить(Результат);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСвойствоСтруктуры(Структура, Знач ИерархияСвойств, Знач Значение) 
	
	Если ТипЗнч(ИерархияСвойств) = Тип("Строка") Тогда
		ИерархияСвойств = СтрРазделить(ИерархияСвойств, ".");
	КонецЕсли;
	
	ТекущееСвойство = ИерархияСвойств[0];
	
	Если ИерархияСвойств.Количество() = 1 Тогда
		
		Структура.Вставить(ТекущееСвойство, Значение);
		
	Иначе
		
		ТекущееЗначение = Неопределено;
		Если Не Структура.Свойство(ТекущееСвойство, ТекущееЗначение) Тогда
			ТекущееЗначение = Новый Структура;
		КонецЕсли;
		ИерархияСвойств.Удалить(0);
		УстановитьСвойствоСтруктуры(ТекущееЗначение, ИерархияСвойств, Значение);
		Структура.Вставить(ТекущееСвойство, ТекущееЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СвойствоСтруктуры(Структура, Знач ИерархияСвойств, Знач ЗначениеПоУмолчанию = Неопределено) 
	
	Если ТипЗнч(ИерархияСвойств) = Тип("Строка") Тогда
		ИерархияСвойств = СтрРазделить(ИерархияСвойств, ".");
	КонецЕсли;
	
	ТекущееСвойство = ИерархияСвойств[0];
	
	Если ИерархияСвойств.Количество() = 1 Тогда
		
		Если Структура.Свойство(ТекущееСвойство) Тогда
			Возврат Структура[ТекущееСвойство];
		Иначе
			Возврат ЗначениеПоУмолчанию;
		КонецЕсли;
		
	Иначе
		
		ТекущееЗначение = Неопределено;
		Если Не Структура.Свойство(ТекущееСвойство, ТекущееЗначение) Тогда
			Возврат ЗначениеПоУмолчанию;
		КонецЕсли;
		ИерархияСвойств.Удалить(0);
		Возврат СвойствоСтруктуры(ТекущееЗначение, ИерархияСвойств, ЗначениеПоУмолчанию);
		
	КонецЕсли;
	
КонецФункции


// Изменяет состояние версии электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент - СправочникСсылка.ЭДПрисоединенныеФайлы, СправочникОбъект.ЭДПрисоединенныеФайлы,
//                        Массив - электронные документы, версии которых надо обновить.
//  ПринудительнаяСменаСостоянияВерсии - Булево - признак смены версии, несмотря на условия.
//  ВерсияФорматаПакета - Строка - версия формата пакета.
//  ОтклонениеАннулирования - Булево - признак отклонения аннулирования документа.
//
Процедура ОбновитьВерсиюЭД(ЭлектронныйДокумент, ПринудительнаяСменаСостоянияВерсии = Ложь, ВерсияФорматаПакета = Неопределено, 
	ОтклонениеАннулирования = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ЭлектронныйДокумент Цикл
			ОбновитьВерсиюЭД(ЭлементМассива);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	СвойстваЭД = ЭлектронноеВзаимодействиеСлужебный.ЗначенияРеквизитовОбъектаИлиСсылки(ЭлектронныйДокумент, 
		"НаправлениеЭД, ВладелецФайла, ТипЭлементаВерсииЭД, ЭлектронныйДокументВладелец");
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СвойстваЭД.ВладелецФайла,"ВидЭД,СостояниеЭДО");
	
	ТекущееСостояниеВерсииЭД = РеквизитыЭД.СостояниеЭДО;
	
	НовоеСостояниеВерсииЭД = Неопределено;
	СводнаяИнформацияПоСтатусу = Новый Структура;
	
	Если НЕ ЭтоСлужебныйДокумент(СвойстваЭД.ТипЭлементаВерсииЭД)
		Или ЭтоОтветныйТитул(СвойстваЭД.ТипЭлементаВерсииЭД) Тогда
		
		СостояниеВерсииЭД = ОпределитьСостояниеВерсииПоСтатусуЭД(ЭлектронныйДокумент,
			ВерсияФорматаПакета, ПринудительнаяСменаСостоянияВерсии, ОтклонениеАннулирования);
		
		Если ТекущееСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно Тогда
			// Для "Акта на передачу прав" и "с.ф." меняет состояние "Закрыт принудительно" на "Обмен завершен",
			// если для него пришла вторая подпись.
			Если Не ((РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
				Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
				Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура)
				И СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен) Тогда
				Возврат;
			КонецЕсли;
		ИначеЕсли ТекущееСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением
			И СостояниеВерсииЭД <> Перечисления.СостоянияВерсийЭД.ОжидаетсяАннулирование
			И СостояниеВерсииЭД <> Перечисления.СостоянияВерсийЭД.ТребуетсяАннулировать
			И СостояниеВерсииЭД <> Перечисления.СостоянияВерсийЭД.Аннулирован Тогда
			Возврат;
		КонецЕсли;
		
		Если (СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			Или СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани)
			Или (СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий //новый каталог делает неактуальным старый
				И РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров)
			Или ПринудительнаяСменаСостоянияВерсии Тогда
			
			НовоеСостояниеВерсииЭД = СостояниеВерсииЭД;
			СводнаяИнформацияПоСтатусу = ОпределитьСводнуюИнформациюПоСтатусуЭД(ЭлектронныйДокумент);
			
			Если (СвойстваЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
					Или СвойстваЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
					Или СвойстваЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД)
				И СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
				И НЕ(СводнаяИнформацияПоСтатусу.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ВсеВыполнено
					И СводнаяИнформацияПоСтатусу.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено) Тогда
				НовоеСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение;
			КонецЕсли;
			
			// Если утверждается входящий э.д. в формате "доп. УПД" без подписи, то состояние меняется
			// с ОбменЗавершен на ОжидаетсяПодтверждение.
			Если НовоеСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
				И СвойстваЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД 
				И Не (СводнаяИнформацияПоСтатусу.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ВсеВыполнено
					И СводнаяИнформацияПоСтатусу.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено) Тогда
				НовоеСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение;
			
			КонецЕсли;
			
		ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
			И СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
			И НовоеСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован Тогда
			
			НовоеСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
			
		ИначеЕсли (СвойстваЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
			И РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец)
			
			Или (СвойстваЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик
			И РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель)
			
			Или (СвойстваЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель
			И РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель) Тогда
			
			НовоеСостояниеВерсииЭД = ОпределитьСостояниеВерсииПоСтатусуЭД(ЭлектронныйДокумент,
			ВерсияФорматаПакета, ПринудительнаяСменаСостоянияВерсии, ОтклонениеАннулирования);
			
			СводнаяИнформацияПоСтатусу = ОпределитьСводнуюИнформациюПоСтатусуЭД(ЭлектронныйДокумент);
		КонецЕсли;
		
	ИначеЕсли ЭтоИзвещениеОПолучении(СвойстваЭД.ТипЭлементаВерсииЭД) Тогда
		
		Если ТекущееСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно
			ИЛИ ТекущееСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением Тогда
			Возврат;
		КонецЕсли;
		
		ПервичныйДокумент = ПрисоединенныйФайл(СвойстваЭД.ВладелецФайла);
		Если ЗначениеЗаполнено(ПервичныйДокумент) Тогда
			
			Если ЭтоТитулФНС(СвойстваЭД.ВладелецФайла) Тогда
				ОтветныйТитул = ВторойТитулДокумента(ПервичныйДокумент);
				Если ЗначениеЗаполнено(ОтветныйТитул) Тогда
					НовоеСостояниеВерсииЭД = ОпределитьСостояниеВерсииПоСтатусуЭД(ОтветныйТитул);
				Иначе
					НовоеСостояниеВерсииЭД = ОпределитьСостояниеВерсииПоСтатусуЭД(ПервичныйДокумент);
				КонецЕсли;
			Иначе
				НовоеСостояниеВерсииЭД = ОпределитьСостояниеВерсииПоСтатусуЭД(ПервичныйДокумент);
			КонецЕсли;
			
			СводнаяИнформацияПоСтатусу = ОпределитьСводнуюИнформациюПоСтатусуЭД(ПервичныйДокумент);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовоеСостояниеВерсииЭД) Тогда
		
		ОбновитьВерсиюЭДВРегистре(СвойстваЭД.ВладелецФайла, НовоеСостояниеВерсииЭД, СводнаяИнформацияПоСтатусу);
		
		Если НовоеСостояниеВерсииЭД <> ТекущееСостояниеВерсииЭД Тогда
			
			НаОзнакомление = ЕстьНеобходимостьОзнакомленияСИзменениемСостоянияЭД(
				ТекущееСостояниеВерсииЭД, НовоеСостояниеВерсииЭД);
			
			ДокументОбъект = СвойстваЭД.ВладелецФайла.ПолучитьОбъект();
			ДокументОбъект.СостояниеЭДО = НовоеСостояниеВерсииЭД;
			ДокументОбъект.ДатаИзмененияСостоянияЭДО = ТекущаяДатаСеанса();
			ДокументОбъект.НаОзнакомлении = НаОзнакомление;
			ДокументОбъект.Записать();
	
			Если НовоеСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
				Или НовоеСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением Тогда
				
				ОснованияДокумента = СвойстваЭД.ВладелецФайла.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование");
				
				ОбменСКонтрагентамиПереопределяемый.УстановленоСостояниеОбменЗавершен(ОснованияДокумента);
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Определяет необходимость выполнения какого-либо действия
// с электронным документом с нашей стороны, либо ожидание действия получателя,
// на основании статуса текущего электронного документа.
//
// Параметры:
//  ФайлЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, СправочникОбъект.ЭДПрисоединенныеФайлы - электронный документ.
//
Функция ОпределитьСводнуюИнформациюПоСтатусуЭД(ФайлЭД)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыФайлаЭД = ЭлектронноеВзаимодействиеСлужебный.ЗначенияРеквизитовОбъектаИлиСсылки(ФайлЭД, "СтатусЭД,
		|НаправлениеЭД, ЭлектронныйДокументВладелец, ВладелецФайла, ТипЭлементаВерсииЭД, Ссылка");
	
	СвойстваВладельца = "ВидЭД, ВерсияРегламентаЭДО, НастройкаЭДО, ПрофильНастроекЭДО, ТребуетсяИзвещение, ТребуетсяПодтверждение";
	ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыФайлаЭД.ВладелецФайла, СвойстваВладельца); 
	
	СтруктураДействий = Новый Структура("СНашейСтороны, СоСтороныДругогоУчастника",
		Перечисления.СводныеСостоянияЭД.ДействийНеТребуется, Перечисления.СводныеСостоянияЭД.ДействийНеТребуется);
	Если ФайлЭД <> Неопределено Тогда
		
		Если ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
			Или ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
			Или ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
			Или ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
			
			МассивЭД = Новый Массив;
			МассивПодчиненныхЭД = Новый Массив;
			МассивЭД.Добавить(ПараметрыФайлаЭД.Ссылка);
			МассивПодчиненныхЭД = ПолучитьПодчиненныеЭД(МассивЭД);
			
			СтруктураФлагов = Новый Структура;
			СтруктураФлагов.Вставить("НаправлениеЭСФ",   ПараметрыФайлаЭД.НаправлениеЭД);
			СтруктураФлагов.Вставить("СтатусЭСФ",        ПараметрыФайлаЭД.СтатусЭД);
			СтруктураФлагов.Вставить("ОтправленИПУУ",    Ложь);
			СтруктураФлагов.Вставить("ЭСФОтправлен",     (ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Доставлен
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение));
			СтруктураФлагов.Вставить("ПДППолучен",       Ложь);
			СтруктураФлагов.Вставить("ПДОПолучен",       Ложь);
			СтруктураФлагов.Вставить("ПДОИППолучен",     Ложь);
			СтруктураФлагов.Вставить("ИПЭСФОтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИПЭСФПолучен",     Ложь);
			СтруктураФлагов.Вставить("ИПУУПолучен",      Ложь);
			СтруктураФлагов.Вставить("ИПУУОтправлен",    Ложь);
			СтруктураФлагов.Вставить("ИППДПОтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИППДООтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИППДОИПОтправлен", Ложь);
			СтруктураФлагов.Вставить("УУОтправлен",      Ложь);
			СтруктураФлагов.Вставить("ИПОтправлен",      Ложь);
			СтруктураФлагов.Вставить("ИППолучен",        Ложь);
			СтруктураФлагов.Вставить("ИППДОПолучен",     Ложь);
			СтруктураФлагов.Вставить("ИППДОИПОтправлен", Ложь);
			
			Для Каждого Элемент Из МассивПодчиненныхЭД Цикл
				Если Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
					
					СтруктураФлагов.ПДППолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
					
					СтруктураФлагов.ПДОПолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
					
					СтруктураФлагов.ПДОИППолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИПЭСФОтправлен = Истина;
					ИначеЕсли Элемент.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
						СтруктураФлагов.ИПЭСФПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИПУУОтправлен = Истина;
					Иначе
						СтруктураФлагов.ИПУУПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДПОтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДООтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДОИПОтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.УУОтправлен = Истина;
					КонецЕсли;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
					Или Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
						Или Элемент.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору Тогда
						СтруктураФлагов.ИПОтправлен = Истина;
					ИначеЕсли Элемент.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
						СтруктураФлагов.ИППолучен = Истина;
					КонецЕсли;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПУПДУКД Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
						СтруктураФлагов.ИППДОПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДОИПОтправлен = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ПараметрыФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				
				Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
					Или НЕ СтруктураФлагов.ЭСФОтправлен 
					Или (СтруктураФлагов.ПДППолучен 
						И НЕ СтруктураФлагов.ИППДПОтправлен) Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
				Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.Отклонен;
					
				ИначеЕсли (ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
							Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен)
						И (НЕ СтруктураФлагов.ПДППолучен 
							Или (НЕ СтруктураФлагов.ИПЭСФПолучен И ПараметрыЭД.ТребуетсяИзвещение)
							Или (НЕ СтруктураФлагов.ИППолучен И ПараметрыЭД.ТребуетсяПодтверждение)) Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
			Иначе
				
				Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен И СтруктураФлагов.УУОтправлен Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.Отклонен;
					
				ИначеЕсли (СтруктураФлагов.ПДОПолучен И НЕ СтруктураФлагов.ИППДООтправлен)
					Или ((ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
						Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден) 
						И (НЕ СтруктураФлагов.ИПЭСФОтправлен И ПараметрыЭД.ТребуетсяИзвещение))
					Или (НЕ СтруктураФлагов.ИПОтправлен И ПараметрыЭД.ТребуетсяПодтверждение)
					Или (СтруктураФлагов.ИППДОПолучен И НЕ СтруктураФлагов.ИППДОИПОтправлен) Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
				Если (ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен)
					Или НЕ СтруктураФлагов.ПДОПолучен
					Или (СтруктураФлагов.ИПЭСФОтправлен И ПараметрыЭД.ТребуетсяИзвещение И НЕ СтруктураФлагов.ПДОИППолучен)
					Или (ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен И НЕ СтруктураФлагов.ИПУУПолучен)
					Или (СтруктураФлагов.ИПОтправлен И ПараметрыЭД.ТребуетсяПодтверждение И НЕ СтруктураФлагов.ИППДОПолучен) Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
			ИЛИ ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
			ИЛИ ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
			
			МассивЭД = Новый Массив;
			МассивПодчиненныхЭД = Новый Массив;
			МассивЭД.Добавить(ПараметрыФайлаЭД.Ссылка);
			МассивПодчиненныхЭД = ПолучитьПодчиненныеЭД(МассивЭД);
			
			СтруктураФлагов = Новый Структура;
			СтруктураФлагов.Вставить("НаправлениеЭСФ",   ПараметрыФайлаЭД.НаправлениеЭД);
			СтруктураФлагов.Вставить("СтатусЭСФ",        ПараметрыФайлаЭД.СтатусЭД);
			СтруктураФлагов.Вставить("ОтправленИПУУ",    Ложь);
			СтруктураФлагов.Вставить("ЭСФОтправлен",     (ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Доставлен));
			СтруктураФлагов.Вставить("ПДППолучен",       Ложь);
			СтруктураФлагов.Вставить("ПДОПолучен",       Ложь);
			СтруктураФлагов.Вставить("ПДОИППолучен",     Ложь);
			СтруктураФлагов.Вставить("ИПЭСФОтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИПЭСФПолучен",     Ложь);
			СтруктураФлагов.Вставить("ИПУУПолучен",      Ложь);
			СтруктураФлагов.Вставить("ИПУУОтправлен",    Ложь);
			СтруктураФлагов.Вставить("ИППДПОтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИППДООтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИППДОИПОтправлен", Ложь);
			СтруктураФлагов.Вставить("УУОтправлен",      Ложь);
			
			Для Каждого Элемент Из МассивПодчиненныхЭД Цикл
				Если Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
					
					СтруктураФлагов.ПДППолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
					
					СтруктураФлагов.ПДОПолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
					
					СтруктураФлагов.ПДОИППолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИПЭСФОтправлен = Истина;
					ИначеЕсли Элемент.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
						СтруктураФлагов.ИПЭСФПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИПУУОтправлен = Истина;
					Иначе
						СтруктураФлагов.ИПУУПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДПОтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДООтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДОИПОтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.УУОтправлен = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ПараметрыФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				
				Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
					Или НЕ СтруктураФлагов.ЭСФОтправлен 
					Или СтруктураФлагов.ПДППолучен И НЕ СтруктураФлагов.ИППДПОтправлен Тогда
		
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
					
				КонецЕсли;
				
				Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.Отклонен;
					
				ИначеЕсли (ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
							Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен)
					И (Не СтруктураФлагов.ПДППолучен 
						Или (Не СтруктураФлагов.ИПЭСФПолучен И ПараметрыЭД.ТребуетсяИзвещение)) Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
					
				КонецЕсли;
				
			Иначе
				Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен И СтруктураФлагов.УУОтправлен Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.Отклонен;
					
				ИначеЕсли СтруктураФлагов.ПДОПолучен И Не СтруктураФлагов.ИППДООтправлен
					Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
					Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
					И (Не СтруктураФлагов.ИПЭСФОтправлен И ПараметрыЭД.ТребуетсяИзвещение)  Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
					
				КонецЕсли;
				
				Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен 
					Или НЕ СтруктураФлагов.ПДОПолучен
					Или СтруктураФлагов.ИПЭСФОтправлен И Не СтруктураФлагов.ПДОИППолучен
					Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен И Не СтруктураФлагов.ИПУУПолучен Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Подписан
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение Тогда
				
				// Для утвержденного входящего счета на оплату действий не требуется.
				Если Не (ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
					И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
						ИЛИ НЕ ПараметрыЭД.ТребуетсяПодтверждение)) Тогда
				
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
			
				// Если обмен прямой, и получен ответный ЭД на отправленный ЭД, то больше не требуется действий с нашей стороны.
				Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
					И ЗначениеЗаполнено(ПараметрыФайлаЭД.ЭлектронныйДокументВладелец) Тогда
					
					СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЭД.ПрофильНастроекЭДО, "СпособОбменаЭД");
					Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог
						Или СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
						
						СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли;
			
			Если (ПараметрыЭД.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
				И (ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
					Или ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик
					Или ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель))
				Или (НЕ ПараметрыЭД.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
					И ЭтоИзвещениеОПолучении(ПараметрыФайлаЭД.ТипЭлементаВерсииЭД)) Тогда
				
				СостояниеЭД = Неопределено;
				Если ЕстьНеОтправленноеПодтверждение(ПараметрыФайлаЭД.ВладелецФайла, СостояниеЭД) Тогда
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
				Если ЕстьНепринятоеПодтверждение(ПараметрыФайлаЭД.ВладелецФайла, СостояниеЭД) Тогда
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
				 И (ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик
					Или ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
					Или ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель) Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
			КонецЕсли;
			
			Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Доставлен
				И ПараметрыФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
				И НЕ ЭтоСлужебныйДокумент(ПараметрыФайлаЭД.ТипЭлементаВерсииЭД)
				И ПараметрыЭД.ТребуетсяПодтверждение
				И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ) Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли;
			
			Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании Тогда
				СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			ИначеЕсли ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтправленоПредложениеОбАннулировании Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли;
			
			Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется
		И СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется Тогда
		
		СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ВсеВыполнено;
		СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено;
	КонецЕсли;
	
	Возврат СтруктураДействий;
	
КонецФункции

// Рекурсивная функция, получает все подчиненные электронные документы с любой глубиной вложенности.
//
// Параметры:
//  МассивЭДВладельцев - массив ссылок на электронные документы владельцы (для текущей итерации - владелец выбираемых ЭД).
//  МассивЭД - массив подчиненных электронных документов (с каждой итерацией увеличивается на количество найденных ЭД).
//             Электронный документ - владелец добавляется в этот массив отдельно (до или после вызова данной процедуры).
//
Функция ПолучитьПодчиненныеЭД(Знач МассивЭДВладельцев, Знач МассивЭД = Неопределено)

	Если МассивЭД = Неопределено Тогда
		МассивЭД = Новый Массив;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ПОМЕСТИТЬ Уровень1
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец В (&МассивЭДВладельцев)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Уровень1.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЭДПрисоединенныеФайлы.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьПодчиненныеЭлементы
	|ИЗ
	|	Уровень1 КАК Уровень1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ПО Уровень1.Ссылка = ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец";
	
	Запрос.УстановитьПараметр("МассивЭДВладельцев", МассивЭДВладельцев);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивПодчиненныхЭД = Новый Массив;
	Пока Выборка.Следующий() Цикл
		МассивЭД.Добавить(Выборка.Ссылка);
		Если Выборка.ЕстьПодчиненныеЭлементы Тогда
			МассивПодчиненныхЭД.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивПодчиненныхЭД.Количество() Тогда
		МассивЭД = ПолучитьПодчиненныеЭД(МассивПодчиненныхЭД, МассивЭД);	
	КонецЕсли;
	
	Возврат МассивЭД;
	
КонецФункции

// Вызывается из асинхронной процедуры ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьОчереднойПакетЭД(...), перед
// ее завершением. Выполняет запись ссылок на документы-основания в Произвольные ЭД, в которых по каким-либо
// причинам не удалось это сделать при распаковке ЭД документа основания.
//
Процедура НайтиЗаполнитьОснованияУВладельцевЭД()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИдентификаторыДокументовОснованийВладельцевЭД.ДокументПотомок,
		|	ИдентификаторыДокументовОснованийВладельцевЭД.ИдентификаторДокументаОснования,
		|	ИдентификаторыДокументовОснованийВладельцевЭД.ЭлектронныйДокумент,
		|	ИдентификаторыДокументовОснованийВладельцевЭД.ДокументОснование
		|ИЗ
		|	РегистрСведений.ИдентификаторыДокументовОснованийВладельцевЭД КАК ИдентификаторыДокументовОснованийВладельцевЭД
		|ГДЕ
		|	ИдентификаторыДокументовОснованийВладельцевЭД.ОснованиеПолучено";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.ДокументПотомок) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
			НачатьТранзакцию();
			Попытка
				ДокументОбъект = Выборка.ДокументПотомок.ПолучитьОбъект();
				НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
				НоваяСтрока.ДокументОснование = Выборка.ДокументОснование;
				ДокументОбъект.Записать();
				НаборЗаписей = РегистрыСведений.ИдентификаторыДокументовОснованийВладельцевЭД.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(Выборка.ЭлектронныйДокумент);
				НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(Выборка.ИдентификаторДокументаОснования);
				НаборЗаписей.Прочитать();
				Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
					НаборЗаписей.Удалить(ЗаписьРегистра);
				КонецЦикла;
				НаборЗаписей.Записать(Истина);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВидОперации = НСтр("ru = 'запись документа-основания ""%1"" в документ ""%2""'");
				ВидОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ВидОперации, Выборка.ДокументОснование, Выборка.ДокументПотомок);
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Распаковывает пакеты электронных документов.
//
// Параметры:
//  МассивПакетовЭД           - Массив - ссылки на распаковываемые пакеты;
//  КоличествоРаспакованныхЭД - Число - количество пакетов, которые удалось распаковать.
//
Процедура РаспаковатьПакетыЭДНаСервере(Знач МассивПакетовЭД, КоличествоРаспакованныхЭД)
	
	// Подготовим данные по пакетам ЭД.
	ДанныеПакетовЭД = ДанныеПакетовЭД(МассивПакетовЭД);
	
	КоличествоЭлементовКоллекции = ДанныеПакетовЭД.Количество();
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		Счетчик = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		СтруктураПакетаЭД = ДанныеПакетовЭД[Счетчик];
		
		ОписаниеОшибки = "";
		
		// Расшифруем электронные документы
		Для каждого ЭлектронныйДокумент Из СтруктураПакетаЭД.МассивЭД Цикл
			
			Если ЭлектронныйДокумент.Зашифрован Тогда
				
				МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("РасшифровкаЭД", Ложь, ОписаниеОшибки);
				Если МенеджерКриптографии = Неопределено Тогда
					Прервать;
				КонецЕсли;
				
				ПарольДоступаКЗакрытомуКлючу = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ПарольКСертификату(
					ЭлектронныйДокумент.СсылкаНаСертификатРасшифровки);
				Если ПарольДоступаКЗакрытомуКлючу = Неопределено Тогда
					ШаблонСообщения = НСтр("ru = 'Не удалось получить пароль к сертификату: %1'");
					ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
						ЭлектронныйДокумент.СсылкаНаСертификатРасшифровки);
					Прервать;
				КонецЕсли;
				МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ПарольДоступаКЗакрытомуКлючу;
				
				ДвоичныеДанныеФайлаЭД = ПолучитьИзВременногоХранилища(ЭлектронныйДокумент.АдресЭД);
				Попытка
					РасшифрованныеДвоичныеДанныеФайлаЭД = МенеджерКриптографии.Расшифровать(ДвоичныеДанныеФайлаЭД);
				Исключение
					ШаблонСообщения = НСтр("ru = 'Расшифровка пакета ЭД: %1'");
					ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					Прервать;
				КонецПопытки;
				
				// Помещаем двоичные данные файла в тот же адрес хранилища.
				АдресЭД = ПоместитьВоВременноеХранилище(РасшифрованныеДвоичныеДанныеФайлаЭД, ЭлектронныйДокумент.АдресЭД);
			КонецЕсли;
		КонецЦикла;

		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			ШаблонСообщения = НСтр("ru = 'При распаковке пакета %1 возникла ошибка:
			|%2.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтруктураПакетаЭД.ПакетЭДСсылка,
				ОписаниеОшибки);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстСообщения,
				ТекстСообщения);
			
			ДанныеПакетовЭД.Удалить(Счетчик);
			Продолжить;
		КонецЕсли;
		
		// Получим сертификаты и выполним проверку подписи
		Для каждого Подпись Из СтруктураПакетаЭД.МассивЭП Цикл
			
			МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("ПолучениеСертификатовИзПодписи", Ложь, ОписаниеОшибки);
			Если МенеджерКриптографии = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Подпись.АдресЭД) Тогда
				ОписаниеОшибки = НСтр("ru = 'Не удалось найти исходные данные для проверки ответной подписи.'");
				Прервать;
			КонецЕсли;
			
			ПодписьПроверена = ЭлектроннаяПодпись.ПроверитьПодпись(МенеджерКриптографии, Подпись.АдресЭД, Подпись.АдресЭП, ОписаниеОшибки);
			Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
				Прервать;
			КонецЕсли;
			
			Подпись.Вставить("ДатаПроверкиПодписи", ТекущаяДатаСеанса());
			Подпись.Вставить("ПодписьВерна",        ПодписьПроверена);
			
			// Подпись не была прочитана при записи объекта.
			ДвоичныеДанныеФайлаЭП = ПолучитьИзВременногоХранилища(Подпись.АдресЭП);
			ДвоичныеДанныеФайлаЭД = ПолучитьИзВременногоХранилища(Подпись.АдресЭД);
			Попытка
				Сертификат = Неопределено;
				МенеджерКриптографии.ПроверитьПодпись(ДвоичныеДанныеФайлаЭД, ДвоичныеДанныеФайлаЭП, Сертификат);
			Исключение
				ШаблонСообщения = НСтр("ru = 'Получение сертификатов из подписи: %1'");
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Прервать;
			КонецПопытки;
			
			Если Сертификат <> Неопределено Тогда
				
				Подпись.Вставить("Отпечаток", Base64Строка(Сертификат.Отпечаток));
				Подпись.Вставить("КомуВыданСертификат", ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(Сертификат));
				Подпись.Вставить("АдресСертификата", ПоместитьВоВременноеХранилище(Сертификат.Выгрузить(), Новый УникальныйИдентификатор));
			КонецЕсли;
		КонецЦикла;
		
		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			ШаблонСообщения = НСтр("ru = 'При распаковке пакета %1 возникла ошибка:
			|%2.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				СтруктураПакетаЭД.ПакетЭДСсылка, ОписаниеОшибки);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстСообщения,
				ТекстСообщения, "ЭлектронноеВзаимодействие");
			
			ДанныеПакетовЭД.Удалить(Счетчик);
		КонецЕсли;
	КонецЦикла;
		
	// Занесем данные в базу.
	МассивСлужебныхЭД = Новый Массив;
	НовыеДокументы = Новый Массив;
	
	РаспакованныеДокументы = Новый Структура;
	РаспакованныеДокументы.Вставить("МассивСлужебныхЭД", МассивСлужебныхЭД);
	РаспакованныеДокументы.Вставить("НовыеДокументы", НовыеДокументы);
	
	ЗаписатьДанныеПакетовЭД(ДанныеПакетовЭД, РаспакованныеДокументы, КоличествоРаспакованныхЭД);
	
	МассивСлужебныхЭД = РаспакованныеДокументы.МассивСлужебныхЭД;
	ВыполнитьДействияПоЭД(Новый Массив, Новый Массив, "ПодписатьОтправить", Новый Структура,
		МассивСлужебныхЭД, Новый Соответствие);
		
КонецПроцедуры

// Запись статистики отправленных и полученных документов через ЦентрМониторинга
//
// Параметры:
//  СпособОбменаЭД  - Перечисления.СпособыОбменаЭД.
//  ПрофильНастроекЭДО  - Справочники.ПрофилиНастроекЭДО.
//  ВидОперации - Строка - Срока вида "Получено" или "Отправлено".
//  КоличествоЭД - Число - Количество не служебных ЭД в пакете.
//
Процедура ЗаписатьСтатистикуПоДокументообороту(СпособОбменаЭД, ПрофильНастроекЭДО, ВидОперации, КоличествоЭД)
	
	ИменаОпераций = Новый Соответствие;
	ИменаОпераций.Вставить(Перечисления.СпособыОбменаЭД.ЧерезКаталог,             "Каталог");
	ИменаОпераций.Вставить(Перечисления.СпособыОбменаЭД.ЧерезFTP,                 "FTP");
	ИменаОпераций.Вставить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту,    "ЭлектроннаяПочта");
	ИменаОпераций.Вставить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском, "ОператорЭДОТакском");
	ИменаОпераций.Вставить(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО,         "Сервис1сЭДО");
	
	ОператорЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрофильНастроекЭДО, "ОператорЭДО");

	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(
		"ОбменСКонтрагентами.СпособОбменаЭД."+ИменаОпераций[СпособОбменаЭД]+"."+ВидОперации,
		КоличествоЭД,
		ОператорЭДО);
	
КонецПроцедуры

Функция ЭтоДокументКорректировки(ДобавленныйФайл)
	
	// Документ, основания которых должны поменять свой статус должен быть вида:
	// ТОРГ12Продавец, ТОРГ12Покупатель, СоглашениеОбИзмененииСтоимостиПолучатель, СоглашениеОбИзмененииСтоимостиОтправитель
	// АктИсполнитель, АктЗаказчик или ИзвещениеОПолучении привязанный к с.ф.
	
	Результат = Ложь;
	
	Если ЭтоСлужебныйДокумент(ДобавленныйФайл) Тогда
		
		Если ДобавленныйФайл.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
			Или ДобавленныйФайл.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик
			Или ДобавленныйФайл.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель
			Или ДобавленныйФайл.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
			Или ДобавленныйФайл.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
			
			Результат = Истина;
		ИначеЕсли ЭтоИзвещениеОПолучении(ДобавленныйФайл.ТипЭлементаВерсииЭД) 
			И ЗначениеЗаполнено(ДобавленныйФайл.ЭлектронныйДокументВладелец) Тогда
			
			ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДобавленныйФайл.ВладелецФайла,"ВидЭД");
			Результат = (ВидЭД = Перечисления.ВидыЭД.СчетФактура
						Или ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
						Или ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
						Или ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
						Или ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
		КонецЕсли;			
	Иначе
		
		ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДобавленныйФайл.ВладелецФайла,"ВидЭД");
		Результат = ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			Или ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			Или ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
			Или ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав;
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция СформироватьСтруктуруФайлаЭД()
	
	СтруктураФайлаЭД = Новый Структура();
	СтруктураФайлаЭД.Вставить("ВладелецЭД");
	СтруктураФайлаЭД.Вставить("Контрагент");
	СтруктураФайлаЭД.Вставить("НаправлениеЭД");
	
	СтруктураФайлаЭД.Вставить("СоглашениеЭД");
	СтруктураФайлаЭД.Вставить("НомерЭД");
	СтруктураФайлаЭД.Вставить("НомерВерсииЭД");
	СтруктураФайлаЭД.Вставить("ТипЭлементаВерсииЭД");
	
	СтруктураФайлаЭД.Вставить("СтатусЭДВладельца");
	СтруктураФайлаЭД.Вставить("ОписаниеОшибки");
	СтруктураФайлаЭД.Вставить("ТекстУточнения");
	СтруктураФайлаЭД.Вставить("ДополнительныеДанные");
	
	// Обязательные для заполнения параметры.
	СтруктураФайлаЭД.Вставить("ОбязательныеПараметры","ВладелецЭД, НаправлениеЭД, ТипЭлементаВерсииЭД");
	                                                                                                    
	Возврат СтруктураФайлаЭД;
	
КонецФункции

Процедура НайтиПроизвольныйЭДПотомокИУстановитьЕмуОснование(НомерЭД, ДокументОснование)
	
	НаборЗаписей = РегистрыСведений.ИдентификаторыДокументовОснованийВладельцевЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторДокументаОснования.Установить(НомерЭД);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() Тогда
		
		МассивЗаписейКУдалению = Новый Массив;
		
		Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
			
			ДокументПотомок = ЗаписьРегистра.ДокументПотомок;
			
			Если ЗначениеЗаполнено(ДокументПотомок)
				И ТипЗнч(ДокументПотомок) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПотомок, "ВидЭД") = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
				
				Попытка
					ДокументОбъект = ДокументПотомок.ПолучитьОбъект();
					НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить(); 
					НоваяСтрока.ДокументОснование = ДокументОснование;
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					МассивЗаписейКУдалению.Добавить(ЗаписьРегистра);
				Исключение
				
					ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
						НСтр("ru = 'Добавление документа основания произвольному электронному документу.'"), ТекстОшибки);
					
					ЗаписьРегистра.ОснованиеПолучено = Истина;
					ЗаписьРегистра.ДокументОснование = ДокументОснование;
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ЗаписьРегистра Из МассивЗаписейКУдалению Цикл
			НаборЗаписей.Удалить(ЗаписьРегистра);
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьНаправление(СтруктураФайлаЭД)
	
	Если (СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара)
		И СтруктураФайлаЭД.ПризнакПродавца Тогда
			Возврат Перечисления.НаправленияЭД.Исходящий;
	КонецЕсли;
	
	Возврат Перечисления.НаправленияЭД.Входящий;
	
КонецФункции

Функция ОпределитьОбъектПривязки(СтруктураПараметровДокумента)
	
	УстановитьПривилегированныйРежим(Истина);
	ВозвращаемоеЗначение = Неопределено;
	
	Если ЭтоОтветныйТитул(СтруктураПараметровДокумента.ТипЭлементаВерсииЭД) Тогда
		ЭДВладелецСсылка = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(
			Новый УникальныйИдентификатор(СтруктураПараметровДокумента.ИдЭДВладельца));
		Если ЭДВладелецСсылка.ПолучитьОбъект() <> Неопределено Тогда
			СтруктураПараметровДокумента.Вставить("ЭлектронныйДокументВладелец", ЭДВладелецСсылка);
			ВозвращаемоеЗначение = ЭДВладелецСсылка.ВладелецФайла;
		КонецЕсли;
	Иначе
		
		ПозПодстроки = СтрНайти(СтруктураПараметровДокумента.НомерЭД, "##") - 1;
		Если ПозПодстроки > 0 Тогда
			ЭлектронныйНомерДокумента = Лев(СтруктураПараметровДокумента.НомерЭД, ПозПодстроки);
		Иначе
			ЭлектронныйНомерДокумента = СтруктураПараметровДокумента.НомерЭД;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлектронныйНомерДокумента) Тогда
			
			Если СтруктураПараметровДокумента.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
				ОбменСКонтрагентамиПереопределяемый.НайтиРанееПолученныйДокумент(ВозвращаемоеЗначение, ЭлектронныйНомерДокумента);
			КонецЕсли;
			
			Если ВозвращаемоеЗначение = Неопределено Тогда
				
				ЗапросДокументовОснований = Новый Запрос;
				ЗапросДокументовОснований.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ЭДПрисоединенныеФайлы.ВладелецФайла.Ссылка КАК Ссылка
				|ПОМЕСТИТЬ вт_ЭД
				|ИЗ
				|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
				|ГДЕ
				|	ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
				|	И ЭДПрисоединенныеФайлы.НомерЭД ПОДОБНО &Параметр
				|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = &ТипЭлементаВерсииЭД
				|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование КАК Ссылка
				|ИЗ
				|	вт_ЭД КАК вт_ЭД
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
				|		ПО вт_ЭД.Ссылка = ЭлектронныйДокументИсходящийДокументыОснования.Ссылка
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование
				|ИЗ
				|	вт_ЭД КАК вт_ЭД
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
				|		ПО вт_ЭД.Ссылка = ЭлектронныйДокументВходящийДокументыОснования.Ссылка";
				ЗапросДокументовОснований.УстановитьПараметр("НаправлениеЭД",       СтруктураПараметровДокумента.НаправлениеЭД);
				ЗапросДокументовОснований.УстановитьПараметр("Параметр",            ЭлектронныйНомерДокумента + "%");
				ЗапросДокументовОснований.УстановитьПараметр("ТипЭлементаВерсииЭД", СтруктураПараметровДокумента.ТипЭлементаВерсииЭД);
				
				НайденныеДокументы = ЗапросДокументовОснований.Выполнить().Выгрузить();
				Если ЗначениеЗаполнено(НайденныеДокументы) Тогда
					
					ВозвращаемоеЗначение = НайденныеДокументы.ВыгрузитьКолонку("Ссылка");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ОпределитьТипДанныхПоКодуТранзакции(КодТранзакции)
	
	// Виды входящих ЭД и соответствующие коды транзакций:
	// ЭД       MainDocument
	// Подпись  MainDocumentResign
	// ЭД(ЭСФ)  Invoice
	// ПДПЭСФ   PostDateConfirmation
	// ИПЭСФ    ReceiveNotice
	// УУЭСФ    CorrectionNotice
	// ИПУУЭСФ  CorrectionNoticeReceiveNotice
	// ПДОЭСФ   SendConfirmation
	// ПДОИПЭСФ ReceiveNoticePostDateConfirmation
	// ПОА      CancellationOffer.
	
	ВозвращаемоеЗначение = "СлужебныйЭД";
	Если КодТранзакции = "MainDocument"
		Или КодТранзакции = "Invoice" 
		Или КодТранзакции = "CustomerInformation"
		Или КодТранзакции = "VendorTitle" 
		Или КодТранзакции = "CustomerTitle" Тогда
		
		ВозвращаемоеЗначение = "ЭД";
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ДвоичныеДанныеФайлаЭДВПакете(Знач КаталогПакета, Знач ОписаниеФайловПакета, Знач ОписаниеФайлаЭД)
	
	// Определим служебные файлы пакета.
	
	СлужебныеФайлы = Новый Массив;
	
	Если ОписаниеФайловПакета.MainImageSignature <> Неопределено Тогда
		Для каждого Объект Из ОписаниеФайловПакета.MainImageSignature Цикл
			СлужебныеФайлы.Добавить(Объект.Path);
		КонецЦикла;
	КонецЕсли;
	
	Если ОписаниеФайловПакета.DataImage <> Неопределено Тогда
		СлужебныеФайлы.Добавить(ОписаниеФайловПакета.DataImage.Path);
	КонецЕсли;
	
	Если ОписаниеФайловПакета.DataImageSignature <> Неопределено Тогда
		Для каждого Объект Из ОписаниеФайловПакета.DataImageSignature Цикл
			СлужебныеФайлы.Добавить(Объект.Path);
		КонецЦикла;
	КонецЕсли;
	
	Если ОписаниеФайловПакета.ExternalCard <> Неопределено Тогда
		СлужебныеФайлы.Добавить(ОписаниеФайловПакета.ExternalCard.Path);
	КонецЕсли;
	
	// Определим полные пути служебных файлов.
	
	Для Индекс = 1 По СлужебныеФайлы.Количество() Цикл
		
		ИмяФайла = ИсправитьРазделителиПутиКФайлу(СлужебныеФайлы[Индекс - 1]);
		СлужебныеФайлы[Индекс - 1] = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогПакета, ИмяФайла);
		
	КонецЦикла;
	
	// Добавляем к служебным файлам файл транспорта.
	
	ФайлыТранспорта = НайтиФайлы(КаталогПакета, "meta*.xml", Истина);
	Если ЗначениеЗаполнено(ФайлыТранспорта) Тогда
		СлужебныеФайлы.Добавить(ФайлыТранспорта[0].ПолноеИмя);
	КонецЕсли;
	
	// Найдем все файлы пакета.
	
	РасширениеФайлаЭД = ОписаниеФайлаЭД.Расширение;
	
	ФайлыПакета = НайтиФайлы(КаталогПакета, "*", Истина);
	
	// Берем первый неслужебный файл с заданным расширением,
	// либо единственный не служебный.
	
	ОсновныеФайлы = Новый Массив;
	
	ДвоичныеДанныеФайлаЭД = Неопределено;
	
	Для каждого Файл Из ФайлыПакета Цикл
		
		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		Если СлужебныеФайлы.Найти(Файл.ПолноеИмя) = Неопределено Тогда
			ОсновныеФайлы.Добавить(Файл.ПолноеИмя);
			Если Файл.Расширение = РасширениеФайлаЭД Тогда
				ДвоичныеДанныеФайлаЭД = Новый ДвоичныеДанные(Файл.ПолноеИмя);
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДвоичныеДанныеФайлаЭД = Неопределено И ОсновныеФайлы.Количество() = 1 Тогда
		ДвоичныеДанныеФайлаЭД = Новый ДвоичныеДанные(ОсновныеФайлы[0]);
	КонецЕсли;
	
	Возврат ДвоичныеДанныеФайлаЭД;
	
КонецФункции

Функция ИсправитьРазделителиПутиКФайлу(Знач ПутьКФайлу) 
	
	ТребуемыйРазделитель = ПолучитьРазделительПути();
	
	НекорректныйРазделитель = ?(ТребуемыйРазделитель = "/", "\", "/");
	
	ИсправленныйПутьКФайлу = СтрЗаменить(ПутьКФайлу, НекорректныйРазделитель, ТребуемыйРазделитель);
	
	Возврат ИсправленныйПутьКФайлу;
	
КонецФункции

// Проверяет в транспортном архиве имена файлов (без расширения) на наличие в них недопустимых символов.
// Такие имена при распаковке обрезаются и может получиться два файла с одинаковыми именами, в результате
// один перезапишет другого.
//
// Параметры:
//  АрхивФайлов - ЧтениеZipФайла - Инициализированный объект чтения zip архива.
// 
// Возвращаемое значение - Булево - Истина, если в архиве есть файлы с недопустимыми символами в именах,
//                                  которые после обрезки становятся одинаковыми.
//
Функция ЕстьОдинаковыеИменаФайловСНедопустимымиСимволамиВАрхиве(АрхивФайлов)
	
	ФлагОшибки = Ложь;
	
	ИменаОсновныхФайлов = Новый ТаблицаЗначений;
	ИменаОсновныхФайлов.Колонки.Добавить("ИмяФайла");
	ИменаОсновныхФайлов.Колонки.Добавить("СчетчикИмен");
	ИменаОсновныхФайлов.Колонки.Добавить("ФлагНедопустимыхСимволов");
	
	Для Каждого ФайлАрхива Из АрхивФайлов.Элементы Цикл
		
		Если ФайлАрхива.ИсходноеИмяБезРасширения <> "card" И ФайлАрхива.ИсходноеИмяБезРасширения <> "meta" Тогда
			
			НеКорректныеСимволы = ОбщегоНазначенияКлиентСервер.НайтиНедопустимыеСимволыВИмениФайла(
				ФайлАрхива.ИсходноеИмяБезРасширения);
			
			СтрокаТаблицы                          = ИменаОсновныхФайлов.Добавить();
			СтрокаТаблицы.ИмяФайла                 = ФайлАрхива.Имя;
			СтрокаТаблицы.СчетчикИмен              = 1;
			СтрокаТаблицы.ФлагНедопустимыхСимволов = НеКорректныеСимволы.Количество();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИменаОсновныхФайлов.Количество() Тогда
		
		ИменаОсновныхФайлов.Свернуть("ИмяФайла", "СчетчикИмен, ФлагНедопустимыхСимволов");
		
		Для Каждого Строка Из ИменаОсновныхФайлов Цикл
			Если Строка.СчетчикИмен > 1 И Строка.ФлагНедопустимыхСимволов Тогда
				ФлагОшибки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ФлагОшибки;
	
КонецФункции

Процедура ИзменитьСостояниеЭДДокументовОснования(РеквизитыПакетаЭД)
	
	Выборка = РеквизитыПакетаЭД.ЭлектронныеДокументы.Выбрать();
	Если Выборка.Количество() > 0 И Выборка.Следующий() Тогда
		ЭлектронныйДокумент = Выборка.ОбъектВладелец;
		СсылкаНаФайлЭД = Выборка.ЭлектронныйДокумент; 
		Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			Если ЭтоОтветныйДокумент(СсылкаНаФайлЭД,ЭлектронныйДокумент) Тогда
				
				Если ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав 
					И СсылкаНаФайлЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
					Возврат;
				ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СчетФактура
					И ЭтоДокументКорректировки(СсылкаНаФайлЭД) Тогда
					
					ОбменСКонтрагентамиВнутренний.ИзменитьСостояниеСФОснований(СсылкаНаФайлЭД, Перечисления.НаправленияЭД.Входящий);
					
				Иначе
					
					УстановитьСостояниеЗавершен(СсылкаНаФайлЭД, Перечисления.НаправленияЭД.Входящий);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоОтветныйДокумент(СсылкаНаФайлЭД,ЭлектронныйДокумент) 
	
	Результат = Ложь;
	
	Если ЭтоСлужебныйДокумент(СсылкаНаФайлЭД) Тогда
		
		Результат = (СсылкаНаФайлЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
			Или СсылкаНаФайлЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик
			Или СсылкаНаФайлЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель
			Или СсылкаНаФайлЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ);
	Иначе
		
		Результат = ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			Или ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав;
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Функция ОтправитьЭлектронноеПисьмо(ПодготовленныеДокументы, АдресКаталогаСВложениями)
	
	СоответствиеВложений = СформироватьСоответствиеВложений(АдресКаталогаСВложениями);
	Результат = ПередатьПисьмоСВложениями(ПодготовленныеДокументы, СоответствиеВложений);
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталогаСВложениями);
	
	Возврат Результат;
	
КонецФункции

// Отправляет письмо с вложениями по пакету ЭД.
//
// Параметры:
//  Конверт - Ссылка на документ "ПакетЭД" - подготовленный к отправке пакет электронных документов,
//  СоответствиеВложений - Соответствие, список вложенных файлов в пакет электронных документов.
//
Функция ПередатьПисьмоСВложениями(ПакетЭД, СоответствиеВложений)
	
	РеквизитыПакетаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
							ПакетЭД,
							"Отправитель, Получатель, АдресРесурсаКонтрагента, АдресРесурсаОрганизации, ПрофильНастроекЭДО");
	Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(РеквизитыПакетаЭД.АдресРесурсаОрганизации, "Пароль");
	
	Получатель  = РеквизитыПакетаЭД.Получатель;
	Отправитель = РеквизитыПакетаЭД.Отправитель;
	
	ПараметрыОтправки = Новый Структура();
	ПараметрыОтправки.Вставить("Кому",     РеквизитыПакетаЭД.АдресРесурсаКонтрагента);
	ПараметрыОтправки.Вставить("Тема",     СформироватьТемуПисьма(Отправитель, Получатель));
	ПараметрыОтправки.Вставить("Тело",     );
	ПараметрыОтправки.Вставить("Вложения", СоответствиеВложений);
	ПараметрыОтправки.Вставить("Пароль",   Пароль);
	
	Попытка
		РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(РеквизитыПакетаЭД.АдресРесурсаОрганизации, ПараметрыОтправки);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Текст = НСтр("ru = 'Ошибка при отправке сообщения на сервер электронной почты по профилю настроек ЭДО %1.
						|%2'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																	Текст,
																	РеквизитыПакетаЭД.ПрофильНастроекЭДО,
																	ТекстОшибки);
		
		ШаблонСообщения = НСтр("ru = 'Ошибка при отправке эл.документов по профилю настроек ЭДО: %1, способ обмена: %2.'"); 
								

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								РеквизитыПакетаЭД.ПрофильНастроекЭДО,
								Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
		ВидОперации = НСтр("ru = 'Отправка эл.документов'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
							ВидОперации,
							ТекстОшибки,
							ТекстСообщения);
 		Возврат 0;
	КонецПопытки;
	
	Возврат 1;
	
КонецФункции

Функция СформироватьТемуПисьма(Отправитель, Получатель)
	
	Возврат НСтр("ru = 'Обмен эл.документами:'")+ " " + Отправитель + ?(ЗначениеЗаполнено(Получатель), " -> " + Получатель, "");
	
КонецФункции

Функция СформироватьСоответствиеВложений(КаталогВложений, ТолькоПодписи = Ложь)
	
	СписокДоступныхРасширений = СформироватьСписокРасширенийСертификатов();
	СоответствиеВозврата = Новый Соответствие;
	СписокВложений = НайтиФайлы(КаталогВложений, "*");
	Для Каждого ФайлВложений Из СписокВложений Цикл
		Если ТолькоПодписи И СтрНайти(ФайлВложений.Расширение, СписокДоступныхРасширений) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ФайлВложений.ЭтоФайл() Тогда
			СоответствиеВозврата.Вставить(ФайлВложений.Имя, Новый ДвоичныеДанные(ФайлВложений.ПолноеИмя));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

Функция СформироватьСписокРасширенийСертификатов()
	
	СписокРасширений = Новый СписокЗначений;
	СписокРасширений.Добавить(".p7s");
	
	Возврат СписокРасширений;
	
КонецФункции

Функция СформироватьФайлыДляОтправки(Конверт)
	
	ФайлыЭД = ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", Конверт));
	АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("send", Конверт.Ссылка.УникальныйИдентификатор());
	Если НЕ ФайлыЭД = Неопределено Тогда
		Пока ФайлыЭД.Следующий() Цикл
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(ФайлыЭД.Ссылка);
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ДвоичныеДанные.Записать(АдресКаталога + ДанныеФайла.ИмяФайла);
		КонецЦикла;
	КонецЕсли;
	
	Возврат АдресКаталога;
	
КонецФункции

// Функция возвращает соответствие соглашению - структуры данных сертификата,
// содержащую ссылку на сертификат и его доп.реквизиты (запомнить пароль, пароль пользователя, маркер расшифрованный/зашифрованный).
// 
// Параметры:
//  МассивСоглашений               - Массив    - содержит ссылки на соглашения, по которым требуется определить сертификаты;
//  СтМассивовСтруктурСертификатов - Структура - содержит структуру со свойствами:
//    * МассивСтруктурСертификатовСервер - Массив - массив структур сертификатов личного хранилища с сервера.
//    * МассивСтруктурСертификатовКлиент - Массив - массив структур сертификатов личного хранилища с клиента.
//  СоотвСертификатовИПаролей      - Фиксированное соответствие:
//    * Ключ     - СправочникСсылка.СертификатыЭП - сертификат авторизации.
//    * Значение - Строка - пароль к сертификату.
//
// Возвращаемое значение:
//  Соответствие: ключ - соглашение об обмене ЭД, значение - структура параметров сертификата ЭП
//    ("СертификатДляАвторизации, ЗапомнитьПарольКСертификату, ПарольПользователя, МаркерРасшифрованный, МаркерЗашифрованный").
//
Функция СоотвСоглашенийИСоответствийСертификатовИПараметровДляАвторизацииСервер(
		Знач МассивПрофилейНастроекЭДО = Неопределено, Знач СтМассивовСтруктурСертификатов = Неопределено,
		Знач СоотвСертификатовИПаролей = Неопределено)
	
	Результат = НастройкиЭДОИСертификатыАвторизации(МассивПрофилейНастроекЭДО,, СтМассивовСтруктурСертификатов);
	
	СоотвСоглашений = Новый Соответствие;
	СоотвСоглашенийИМассиваСертификатовАвторизации = Неопределено;
	СоотвСертификатовИИхСтруктур = Неопределено;
	Если Результат.Свойство("СоотвСоглашенийИМассиваСертификатовАвторизации", СоотвСоглашенийИМассиваСертификатовАвторизации)
		И Результат.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
		И ТипЗнч(СоотвСоглашенийИМассиваСертификатовАвторизации) = Тип("Соответствие")
		И ТипЗнч(СоотвСертификатовИИхСтруктур) = Тип("Соответствие") Тогда
		// В СоотвСоглашенийИМассиваСертификатовАвторизации - Ключ - Соглашение, Значение - Массив сертификатов
		// по данному соглашению. Функция должна вернуть Соответствие, в котором Ключ - Соглашение,
		// Значение - Соответствие сертификатов и их параметров.
		Для Каждого Элемент Из СоотвСоглашенийИМассиваСертификатовАвторизации Цикл
			
			ПрофильНастроекЭДО = Элемент.Ключ;
			РеквизитыПрофиляНастроекЭДО = РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО);
			
			Соответствие = Новый Соответствие;
			МассивСертификатов = Элемент.Значение;
			Для Каждого Сертификат Из МассивСертификатов Цикл
				КлючПоискаСертификата = Строка(Сертификат.УникальныйИдентификатор()) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации;
				
				Структура = СоотвСертификатовИИхСтруктур.Получить(КлючПоискаСертификата);
				Если ЗначениеЗаполнено(Структура) И Структура.ПарольПолучен Тогда
					// Авторизоваться на сервере оператора можно любым зарегистрированным в соглашении сертификатом,
					// поэтому, если есть несколько доступных для авторизации сертификатов и среди них есть хотя бы
					// один с сохраненным (в сертификате или сеансе) паролем, то вернем именно его, чтобы не открывать
					// диалог выбора сертификата.
					Соответствие = Новый Соответствие;
					Соответствие.Вставить(Сертификат, Структура);
					Прервать;
				КонецЕсли;
				Соответствие.Вставить(Сертификат, Структура);
			КонецЦикла;
			СоотвСоглашений.Вставить(Элемент.Ключ, Соответствие);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СоотвСоглашений;
	
КонецФункции

Процедура ЗаполнитьДанныеПодписантаЭД(ДанныеФайлаЭД, ПространствоИменСхемы, ПараметрыЭД, СертификатПодписи)
	
	Ошибки = Неопределено; // служебная переменная для хранения списка возникших ошибок
	
	// Получим данные для заполнения Тега Подписант
	ПараметрыСертификата = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.РеквизитыСертификата(СертификатПодписи);
	ФамилияСертификата  = ПараметрыСертификата.Фамилия;
	ИмяСертификата      = ПараметрыСертификата.Имя;
	ОтчествоСертификата = ПараметрыСертификата.Отчество;
	Фирма               = ПараметрыСертификата.Фирма;
	
	ДолжностьПоСертификату = "---";
	Если ЗначениеЗаполнено(ПараметрыСертификата.Должность) Тогда
		ДолжностьПоСертификату = ПараметрыСертификата.Должность;
	КонецЕсли;
	
	ЭтоФизЛицо = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо(ПараметрыЭД.Организация, ЭтоФизЛицо);
	ДанныеЮрФизЛица = Неопределено; 
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыЭД.Организация, ДанныеЮрФизЛица);
	
	// Заполнение блока подписанта в ЭД.
	Если (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура)
		
		И (ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
			Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
			Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
			Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД)
			
		Или (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
			Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель)
		
		И (ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
			Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД) Тогда
		
		Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		Если Не ЭтоФизЛицо Тогда
			ЮЛ = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", ДанныеЮрФизЛица.ИНН, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", ДолжностьПоСертификату, Истина, Ошибки);
			
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ЮЛ", ЮЛ, Истина, Ошибки);
		Иначе
			ИП = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, Ошибки);
			
			ДанныеСвидетельства = "";
			ОбменСКонтрагентамиПереопределяемый.ДанныеСвидетельстваОРегистрацииИП(ПараметрыЭД.Организация, ДанныеСвидетельства);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", ДанныеСвидетельства, , Ошибки);
			
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, Ошибки);
		КонецЕсли;
		
		ИндексПодписанта = ДанныеФайлаЭД.Документ.Подписант.Количество() - 1;
		Если Не ЭтоФизЛицо Тогда
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ЮЛ", ЮЛ, Истина, Ошибки);
		Иначе
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ИП", ИП, Истина, Ошибки);
		КонецЕсли;
		
		СброситьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ФЛ",Ошибки);
		
		Если (ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
				ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД)
			И ДанныеФайлаЭД.Документ.СвПродПер <> Неопределено
			И ДанныеФайлаЭД.Документ.СвПродПер.СвПер.СвЛицПер = Неопределено Тогда
			
			СведенияЛица = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(
				"Файл.Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод", ПространствоИменСхемы);
			Если ЭтоФизЛицо Тогда
				Должность = НСтр("ru = 'ИП'");
				ОснованиеПолномочий = НСтр("ru = 'Свидетельство ОГРН'");
			Иначе
				Должность = ДолжностьПоСертификату;
				ОснованиеПолномочий = НСтр("ru = 'Должностные обязанности'");
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "Должность", Должность, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "ОснПолн", ОснованиеПолномочий, Истина, Ошибки);
			
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(
				"Файл.Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "ФИО", ФИО, Истина, Ошибки);
			
			ТоварПередал = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(
				"Файл.Документ.СвПродПер.СвПер.СвЛицПер", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ТоварПередал,
				"РабОргПрод", СведенияЛица, Истина, Ошибки);
			
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СвПродПер.СвПер, "СвЛицПер",
				ТоварПередал, Истина, Ошибки);
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
		Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
	
		Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант", ПространствоИменСхемы);
		Если Не ЭтоФизЛицо Тогда
			ЮЛ = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ЮЛ", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", ДанныеЮрФизЛица.ИНН, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", ДолжностьПоСертификату, Истина, Ошибки);
			
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ЮЛ", ЮЛ, Истина, Ошибки);
		Иначе
			ИП = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ИП", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, Ошибки);
			
			ДанныеСвидетельства = "";
			ОбменСКонтрагентамиПереопределяемый.ДанныеСвидетельстваОРегистрацииИП(ПараметрыЭД.Организация, ДанныеСвидетельства);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", ДанныеСвидетельства, , Ошибки);
			
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ИП.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, Ошибки);
		КонецЕсли;
		ИндексПодписанта = ДанныеФайлаЭД.ИнфПок.Подписант.Количество() - 1;
		Если Не ЭтоФизЛицо Тогда
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.ИнфПок.Подписант[ИндексПодписанта], "ЮЛ", ЮЛ, Истина, Ошибки);
		Иначе
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.ИнфПок.Подписант[ИндексПодписанта], "ИП", ИП, Истина, Ошибки);
		КонецЕсли;
		
		СброситьСвойствоXDTO(ДанныеФайлаЭД.ИнфПок.Подписант[ИндексПодписанта], "ФЛ",Ошибки);
		
		Если ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД 
			И ДанныеФайлаЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин = Неопределено Тогда
			
			СведенияЛица = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(
				"Файл.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок", ПространствоИменСхемы);
			Если ЭтоФизЛицо Тогда
				Должность = НСтр("ru = 'ИП'");
				ОснованиеПолномочий = НСтр("ru = 'Свидетельство ОГРН'");
			Иначе
				Должность = ДолжностьПоСертификату;
				ОснованиеПолномочий = НСтр("ru = 'Должностные обязанности'");
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "Должность", Должность, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "ОснПолн", ОснованиеПолномочий, Истина, Ошибки);
				
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(
				"Файл.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "ФИО", ФИО, Истина, Ошибки);
			
			ТоварПринял = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(
				"Файл.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ТоварПринял, 
				"РабОргПок", СведенияЛица, Истина, Ошибки);
			
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.ИнфПок.СодФХЖ4.СвПрин, "СвЛицПрин",
				ТоварПринял, Истина, Ошибки);
			
		КонецЕсли;
			
	ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		
		Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		Если Не ЭтоФизЛицо Тогда
			ЮЛ = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", ДанныеЮрФизЛица.ИНН, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", ДолжностьПоСертификату, Истина, Ошибки);
			
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ЮЛ", ЮЛ, Истина, Ошибки);
		Иначе
			ИП = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, Ошибки);
			
			ДанныеСвидетельства = "";
			ОбменСКонтрагентамиПереопределяемый.ДанныеСвидетельстваОРегистрацииИП(ПараметрыЭД.Организация, ДанныеСвидетельства);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", ДанныеСвидетельства, , Ошибки);
			
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, Ошибки);
		КонецЕсли;
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ, "Подписант", Подписант, Истина, Ошибки);
		
	ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик
		Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
		Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		
		Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		Если Не ЭтоФизЛицо Тогда
			ЮЛ = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", ДанныеЮрФизЛица.ИНН, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", ДолжностьПоСертификату, Истина, Ошибки);
			
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ЮЛ", ЮЛ, Истина, Ошибки);
		Иначе
			ИП = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, Ошибки);
			
			ДанныеСвидетельства = "";
			ОбменСКонтрагентамиПереопределяемый.ДанныеСвидетельстваОРегистрацииИП(ПараметрыЭД.Организация, ДанныеСвидетельства);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", ДанныеСвидетельства, , Ошибки);
			
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, Ошибки);
		КонецЕсли;
		
		Если ПространствоИменСхемы = "TORGPR" 
			Или ПространствоИменСхемы = "RUISP" Тогда // Передача товаров, акт результатов работ (Исполнитель).
			ИндексПодписанта = ДанныеФайлаЭД.Документ.Подписант.Количество() - 1;
			
			Если Не ЭтоФизЛицо Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "НаимОрг", Фирма, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ЮЛ", ЮЛ, Истина, Ошибки);
			Иначе
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ИП", ИП, Истина, Ошибки);
			КонецЕсли;
			
			СброситьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ФЛ",Ошибки);
			
		ИначеЕсли ПространствоИменСхемы = "TORGPOK" 
			Или ПространствоИменСхемы = "RUZAK" Тогда // Передача товаров, акт результатов работ (Заказчик).
			
			ИндексПодписанта = ДанныеФайлаЭД.Документ.Подписант.Количество() - 1;
			Если Не ЭтоФизЛицо Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "НаимОрг", Фирма, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ЮЛ", ЮЛ, Истина, Ошибки);
			Иначе
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ИП", ИП, Истина, Ошибки);
			КонецЕсли;
			
			СброситьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ФЛ",Ошибки);
			
		Иначе
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ, "Подписант", Подписант, Истина, Ошибки);
		КонецЕсли;
		
		// Заполнение блока ответственного в ЭД
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			
			Если ПространствоИменСхемы = "TORGPR" Тогда
				
				Если ДанныеФайлаЭД.Документ.СодФХЖ3.СвЛицОтпГруз = Неопределено Тогда
					ГрузОтпустил = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(
						"Файл.Документ.СодФХЖ3.СвЛицОтпГруз", ПространствоИменСхемы);
					СведенияЛица = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(
						"Файл.Документ.СодФХЖ3.СвЛицОтпГруз.РабОргПрод", ПространствоИменСхемы);
					Если ЭтоФизЛицо Тогда
						Должность = НСтр("ru = 'ИП'");
						ОснованиеПолномочий = НСтр("ru = 'Свидетельство ОГРН'");
					Иначе
						Должность = ДолжностьПоСертификату;
						ОснованиеПолномочий = НСтр("ru = 'Должностные обязанности'");
					КонецЕсли;
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "Должность", Должность, Истина, Ошибки);
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "ОснПолн", ОснованиеПолномочий, Истина, Ошибки);
					ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
					Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
						ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, Истина, Ошибки);
					КонецЕсли;
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "ФИО", ФИО, Истина, Ошибки);
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ГрузОтпустил, "РабОргПрод", СведенияЛица, Истина, Ошибки);
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СодФХЖ3,
						"СвЛицОтпГруз", ГрузОтпустил, Истина, Ошибки);
				КонецЕсли;
				
			Иначе
				ОтпускРазрешил = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ОтпускГруз.ОтпускРазреш", ПространствоИменСхемы);
				ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ОтпускГруз.ОтпускРазреш.ФИО", ПространствоИменСхемы);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
				КонецЕсли;
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ОтпускРазрешил, "ФИО", ФИО, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ОтпускРазрешил, "Должность", ДолжностьПоСертификату, , Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СвТНО.ОтпускГруз, "ОтпускРазреш", ОтпускРазрешил, Истина, Ошибки);
				
			КонецЕсли;
			
		ИначеЕсли ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
			Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			Если ПространствоИменСхемы = "TORGPOK" Тогда // Передача товаров, акт результатов работ (Исполнитель).
				ГрузПолучил = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(
					"Файл.Документ.СодФХЖ4.ГрузПолучил.СвЛицПолГруз", ПространствоИменСхемы);
				СведенияЛица = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(
					"Файл.Документ.СодФХЖ4.ГрузПолучил.СвЛицПолГруз.РабОргПок", ПространствоИменСхемы);
				Если ЭтоФизЛицо Тогда
					Должность = НСтр("ru = 'ИП'");
					ОснованиеПолномочий = НСтр("ru = 'Свидетельство ОГРН'");
				Иначе
					Должность = ДолжностьПоСертификату;
					ОснованиеПолномочий = НСтр("ru = 'Должностные обязанности'");
				КонецЕсли;
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "Должность", Должность, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "ОснПолн", ОснованиеПолномочий, Истина, Ошибки);
				ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, Истина, Ошибки);
				КонецЕсли;
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "ФИО", ФИО, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ГрузПолучил, "РабОргПок", СведенияЛица, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СодФХЖ4.ГрузПолучил,
					"СвЛицПолГруз", ГрузПолучил, Истина, Ошибки);
			Иначе
				ГрузПолучил = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз.ГрузПолучил", ПространствоИменСхемы);
				ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз.ГрузПолучил.ФИО", ПространствоИменСхемы);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
				КонецЕсли;
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ГрузПолучил, "ФИО", ФИО, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ГрузПолучил, "Должность", ДолжностьПоСертификату, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СвТНП.ПолучилГруз, "ГрузПолучил", ГрузПолучил, Истина, Ошибки);
			КонецЕсли;
			
		ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
			
			Если Не ВРег(ПространствоИменСхемы) = ВРег("RUISP") Тогда
				
				ПодписьИсполнителя = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Сдал.ПодписьИсполн", ПространствоИменСхемы);
				ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО", ПространствоИменСхемы);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
				КонецЕсли;
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ПодписьИсполнителя, "ФИО", ФИО, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ПодписьИсполнителя, "Должность", ДолжностьПоСертификату, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СвАктИ.Сдал, "ПодписьИсполн", ПодписьИсполнителя, Истина, Ошибки);
				
			КонецЕсли;
			
		ИначеЕсли ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик Тогда
			
			Если Не ВРег(ПространствоИменСхемы) = ВРег("RUZAK") Тогда
				
				ПодписьЗаказ = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Принял.ПодписьЗаказ", ПространствоИменСхемы);
				ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Принял.ПодписьЗаказ.ФИО", ПространствоИменСхемы);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
				КонецЕсли;
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ПодписьЗаказ, "ФИО", ФИО, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ПодписьЗаказ, "Должность", ДолжностьПоСертификату, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СвАктИ.Принял, "ПодписьЗаказ", ПодписьЗаказ, Истина, Ошибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЭтоИзвещениеОПолучении(ПараметрыЭД.ТипЭлементаВерсииЭД)
		Или ЭтоУведомлениеОбУточнении(ПараметрыЭД.ТипЭлементаВерсииЭД)
		Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
		
		Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Должность", ДолжностьПоСертификату, Истина, Ошибки);
		ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ФИО", ПространствоИменСхемы);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
		Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
		КонецЕсли;
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ФИО", ФИО, Истина, Ошибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ, "Подписант", Подписант, Истина, Ошибки);
		
	ИначеЕсли ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав) Тогда
		
		Если ДанныеФайлаЭД.ВерсияСхемы = СокрЛП(СтрЗаменить(ВерсияСхемыCML2(), "CML", "")) Тогда
			
			// Добавление шаблона подписанта для заполнения при подписи.
			Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
				Подписанты = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Каталог.Подписанты", ПространствоИменСхемы);
				Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Каталог.Подписанты.Подписант", ПространствоИменСхемы);
			ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
				Подписанты = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("ПакетПредложений.Подписанты", ПространствоИменСхемы);
				Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("ПакетПредложений.Подписанты.Подписант", ПространствоИменСхемы);
			Иначе
				Подписанты = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Документ.Подписанты", ПространствоИменСхемы);
				Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Документ.Подписанты.Подписант", ПространствоИменСхемы);
			КонецЕсли;
			
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			
			Если ДолжностьПоСертификату <> "---" Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Должность", ДолжностьПоСертификату, Истина, Ошибки);
			КонецЕсли;
			
			Подписанты.Подписант.Добавить(Подписант);
			Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Каталог, "Подписанты", Подписанты, Ложь, Ошибки);
			ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.ПакетПредложений, "Подписанты", Подписанты, Ложь, Ошибки);
			Иначе
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ[0], "Подписанты", Подписанты, Ложь, Ошибки);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СброситьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, Ошибки)
	
	Попытка
		ОбъектXDTO.Сбросить(ИмяСвойства);
	Исключение
		ШаблонСообщения = НСтр("ru = 'Выполнение операции: Очистка XDTO.
			|Ошибка сброса значения свойства ""%1"".'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяСвойства);
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьОшибку(Ошибки, ТекстСообщения);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения + Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "ОбменСКонтрагентами");
	КонецПопытки

	
КонецПроцедуры

// Подписывает электронные документы определенным сертификатом криптографии.
//
// Параметры:
//  ДобавленныеФайлы      - Массив ссылок на электронные документы, которые необходимо подписать,
//  СертификатПодписи     - СертификатКриптографии, сертификат, которым необходимо подписать переданные электронные документы,
//  ПараметрыСертификата  - Структура, содержит реквизиты сертификата,
//  МассивНеПодписанныхЭД - Массив либо Неопределено, в этой переменной в вызывающую процедуру возвращается массив ЭД,
//                          которые не были подписаны.
//
Функция ПодписатьЭДОпределеннымСертификатом(ДобавленныеФайлы,
											СертификатПодписи,
											ПараметрыСертификата,
											МассивНеПодписанныхЭД = Неопределено)
											
	Если Не ТипЗнч(ДобавленныеФайлы) = Тип("Массив") Тогда
		ФайлыНаПодпись = Новый Массив;
		ФайлыНаПодпись.Добавить(ДобавленныеФайлы);
	Иначе
		ФайлыНаПодпись = ДобавленныеФайлы;
	КонецЕсли;
	
	Если ТипЗнч(МассивНеПодписанныхЭД) <> Тип("Массив") Тогда
		МассивНеПодписанныхЭД = Новый Массив;
	КонецЕсли;
	Отказ = Ложь;
	Программа = Неопределено;
	ПараметрыСертификата.Свойство("Программа", Программа);
	МенеджерКриптографии = ЭлектронноеВзаимодействиеСлужебный.МенеджерКриптографии(Отказ, Истина, Программа);
	Если Отказ Тогда
		ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("110");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Для Каждого НеПодписанныйЭД Из ФайлыНаПодпись Цикл
			МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
		КонецЦикла;
		Возврат 0;
	КонецЕсли;
	
	МенеджерКриптографии.ВключениеСертификатовВПодпись = РежимВключенияСертификатовКриптографии.ВключатьСертификатСубъекта;
	
	КриптоСертификат = ЭлектронноеВзаимодействиеСлужебный.ПолучитьСертификатПоОтпечатку(
		ПараметрыСертификата.Отпечаток);
	
	КоличествоПодписанныхЭД = 0;
	
	Если КриптоСертификат <> Неопределено Тогда
		
		Попытка
			МенеджерКриптографии.ПроверитьСертификат(КриптоСертификат,
													 РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
		Исключение
			ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("112");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'проверка сертификата на корректность'"),
											  ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
											  ТекстСообщения);
			Для Каждого НеПодписанныйЭД Из ФайлыНаПодпись Цикл
				МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
			КонецЦикла;
			Возврат 0;
		КонецПопытки;
		
		Для Каждого ТекДокумент Из ФайлыНаПодпись Цикл
			
			СтруктураДанныхПодписи = Новый Структура("Сертификат, ПарольПользователя, Комментарий", КриптоСертификат, ПараметрыСертификата.ПарольПользователя,
				НСтр("ru = 'Подписание электронного документа'"));
			Попытка
				ДвоичныеДанныеФайла = ПолучитьДвоичныеДанныеФайла(ТекДокумент, СертификатПодписи);
				ДанныеПодписи = ЭлектронноеВзаимодействиеСлужебный.СформироватьДанныеПодписи(
					МенеджерКриптографии, ТекДокумент, ДвоичныеДанныеФайла, СтруктураДанныхПодписи);
				
				ДобавитьПодпись(ТекДокумент, ДанныеПодписи);
				КоличествоПодписанныхЭД = КоличествоПодписанныхЭД + 1;
				ОпределитьСтатусыПодписей(ТекДокумент);
			Исключение
				ШаблонСообщения = НСтр("ru = 'Ошибка подписи на сервере. Необходимо провести тест сертификата криптографии для: %1.
				|%2'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СертификатПодписи,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
						НСтр("ru = 'установка подписи ЭП'"),
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
						ТекстСообщения);
				МассивНеПодписанныхЭД.Добавить(ТекДокумент);
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;
	
	// Выполним действия после подписания.
	ПодписанныеЭД = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ФайлыНаПодпись, МассивНеПодписанныхЭД);
	
	СоответствиеСертификатовПодписаннымЭд = Новый Соответствие;
	СоответствиеСертификатовПодписаннымЭд.Вставить(ПараметрыСертификата.СертификатПодписи, ПодписанныеЭД);
	ДействияПослеПодписанияЭДНаСервере(СоответствиеСертификатовПодписаннымЭд);
	
	Возврат КоличествоПодписанныхЭД;
	
КонецФункции

// Проверяет все ли необходимые подписи установлены перед отправкой контрагенту.
//
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Функция ЭлектронныйДокументПолностьюПодписан(СсылкаНаФайлЭД)
	
	Возврат ЭлектронноеВзаимодействиеСлужебный.МаршрутПодписанияЗавершен(СсылкаНаФайлЭД);
	
КонецФункции

// Выполняет добавление электронной подписи в электронный документ.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка - ссылка на элемент справочника, содержащего в себе электронный документ.
//  ДанныеПодписи - Структура - структура параметров электронной подписи.
//
Процедура ДобавитьПодпись(ПрисоединенныйФайл, ДанныеПодписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл.ВладелецФайла, "ПрофильНастроекЭДО.СпособОбменаЭД");
	
	НачатьТранзакцию();
	Попытка
		РаботаСФайлами.ДобавитьПодписьКФайлу(ПрисоединенныйФайл, ДанныеПодписи);
		Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
			ОпределитьСтатусыПодписей(ПрисоединенныйФайл);
		КонецЕсли;
		Если ЭлектронныйДокументПолностьюПодписан(ПрисоединенныйФайл) Тогда
			
			НаправлениеЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "НаправлениеЭД");
			Если НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
				НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(
																		Перечисления.СтатусыЭД.ПолностьюПодписан,
																		ПрисоединенныйФайл);
			Иначе
				НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(
																		Перечисления.СтатусыЭД.Подписан,
																		ПрисоединенныйФайл);
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура("СтатусЭД", НовыйСтатусЭД);
			ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
			ОбменСКонтрагентамиПереопределяемый.НазначенСтатусПодписан(ПрисоединенныйФайл);
		Иначе
			// В рамках интеркампани, документ должен иметь 2 подписи,
			// т.к. электронный документ подписан не полностью, то достаточно проверить,
			// что количество ЭП отлично от 0.
			УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл);
			
			ДокументИнтеркампаниЧастичноПодписан = (ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани
													И УстановленныеПодписи.Количество() > 0);
			
			Если ДокументИнтеркампаниЧастичноПодписан Тогда
				
				НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(
					Перечисления.СтатусыЭД.ЧастичноПодписан, ПрисоединенныйФайл);
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("СтатусЭД", НовыйСтатусЭД);
				СтруктураПараметров.Вставить("Изменил", Пользователи.АвторизованныйПользователь());
				ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
			КонецЕсли;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонСообщения = НСтр("ru = 'Ошибка подписи электронного документа %1'");
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%1", ПрисоединенныйФайл);
		ВидОперации = НСтр("ru = 'установка подписи ЭП'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ИнформацияОбОшибке, ТекстСообщения);
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

// Проверяет валидность подписей электронного документа и заполняет реквизиты Статус и ДатаПроверкиПодписи
// в табличной части ЭлектронныеПодписи.
//
// Параметры:
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ.
//  ВыводитьСообщения - Булево - требуется ли выводить сообщения.
//
Процедура ОпределитьСтатусыПодписей(ЭД, ВыводитьСообщения = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отказ = Ложь;
	Попытка
		МенеджерКриптографии = ЭлектронноеВзаимодействиеСлужебный.МенеджерКриптографии(Отказ);
	Исключение
		Отказ = Истина;
	КонецПопытки;
	Если Отказ Тогда
		Если ВыводитьСообщения Тогда
			ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("110");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДопИнформацияПоЭД = ПолучитьДанныеФайла(ЭД);
	ДвоичныеДанныеДокумента = ПолучитьИзВременногоХранилища (ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
	
	УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ЭД);
	
	Для каждого СтрокаЭП Из УстановленныеПодписи Цикл
		ПодписьВерна = Истина;
		Попытка
			ДвоичныеДанныеЭП = СтрокаЭП.Подпись;
			ЭлектронноеВзаимодействиеСлужебный.ПроверитьПодпись(
				МенеджерКриптографии, ДвоичныеДанныеДокумента, ДвоичныеДанныеЭП);
		Исключение
			ПодписьВерна = Ложь;
			
			ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("114");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВидОперации = НСтр("ru = 'проверка электронной подписи'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
		КонецПопытки;
		
		Менеджер = РегистрыСведений.ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
		Менеджер.ПодписанныйОбъект = ЭД;
		Менеджер.ПорядковыйНомер = СтрокаЭП.ПорядковыйНомер;
		Менеджер.Прочитать();
		Менеджер.ПодписанныйОбъект = ЭД;
		Менеджер.ПорядковыйНомер = СтрокаЭП.ПорядковыйНомер;
		Менеджер.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
		Менеджер.ПодписьВерна = ПодписьВерна;
		Менеджер.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает признак того, что электронный документ был утвержден.
//
// Параметры:
//  ПрисоединенныйФайл - ссылка на электронный документ, который необходимо обработать.
//  НовыйЭД - ссылка на электронный документ, если при утверждении был создан новый электронный документ.
//
Процедура УстановитьПризнакУтвержден(ПрисоединенныйФайл, НовыйЭД, ПризнакУстановлен)
	
	ПризнакУстановлен = Истина;
	ГотовКУтверждению = Истина;
	
	ОбменСКонтрагентамиПереопределяемый.ЭлектронныйДокументГотовКУтверждению(ПрисоединенныйФайл, ГотовКУтверждению);
	
	// Проверим, все ли необходимые условия выполнены
	Если ГотовКУтверждению Тогда
		
		НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(
																Перечисления.СтатусыЭД.Утвержден,
																ПрисоединенныйФайл);
		
		Если НовыйСтатусЭД <> Перечисления.СтатусыЭД.Утвержден Тогда
			ПризнакУстановлен = Ложь;
			Возврат;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("СтатусЭД", НовыйСтатусЭД);
		СтруктураПараметров.Вставить("Изменил",  Пользователи.АвторизованныйПользователь());
		
		ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
		
		ОбменСКонтрагентамиПереопределяемый.НазначенСтатусУтвержден(ПрисоединенныйФайл);
		
	КонецЕсли;
	
	Если ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
		И НЕ ЭтоСлужебныйДокумент(ПрисоединенныйФайл) Тогда
		
		РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайл.ВладелецФайла,"ВидЭД, ТипЭлементаВерсииЭД, ТребуетсяПодтверждение");
		
		Если РеквизитыЭД.ТребуетсяПодтверждение Тогда
		
			Если РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
				
				Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
				
				Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
					И РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
				
				Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
				
				Или (РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
					И РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД)
					
				Или (РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
					И РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД) Тогда
				
				Если РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
					ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель;
				ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
					ВидЭД = Перечисления.ВидыЭД.АктЗаказчик;
				ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
					ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
				КонецЕсли;
				
				ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "ВладелецФайла");
				Если ОпределитьДействующуюНастройкуЭДО(ВладелецФайла,, РеквизитыЭД.ВидЭД, Истина) Тогда
					
					Если РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
						И РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД Тогда
						
						НовыйЭД = ОбменСКонтрагентамиВнутренний.СформироватьЭДИнформацияПокупателя(ПрисоединенныйФайл);
					ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
						И РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
						
						НовыйЭД = ОбменСКонтрагентамиВнутренний.СформироватьЭДИнформацияПокупателяУКД(ПрисоединенныйФайл);
					ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
						Если РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
							НовыйЭД = ОбменСКонтрагентамиВнутренний.СформироватьЭДИнформацияПокупателя(ПрисоединенныйФайл);
						Иначе
							НовыйЭД = ОбменСКонтрагентамиВнутренний.СформироватьЭДТорг12Покупатель(ПрисоединенныйФайл);
						КонецЕсли;
					ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
						Если РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
							НовыйЭД = ОбменСКонтрагентамиВнутренний.СформироватьЭДИнформацияПокупателя(ПрисоединенныйФайл);
						Иначе
							НовыйЭД = ОбменСКонтрагентамиВнутренний.СформироватьЭДАкт501Заказчик(ПрисоединенныйФайл);
						КонецЕсли;
					ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
						НовыйЭД = ОбменСКонтрагентамиВнутренний.СформироватьЭДИнформацияПокупателя(ПрисоединенныйФайл);
					ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
						Если РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
							НовыйЭД = ОбменСКонтрагентамиВнутренний.СформироватьЭДИнформацияПокупателяУКД(ПрисоединенныйФайл);
						Иначе
							НовыйЭД = ОбменСКонтрагентамиВнутренний.СформироватьЭДКорДокументаПолучатель(ПрисоединенныйФайл);
						КонецЕсли;
					КонецЕсли;
					
					Если НовыйЭД = Неопределено Тогда
						ПризнакУстановлен = Неопределено;
					КонецЕсли;
					
				Иначе
					ПризнакУстановлен = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСостояниеЗавершенПоОтклонению(МассивФайловЭД, ВыполняетсяОбновлениеИнформационнойБазы = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.НомерЭД КАК НомерЭД,
	|	ЭДПрисоединенныеФайлы.НаправлениеЭД КАК НаправлениеЭД,
	|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД
	|ПОМЕСТИТЬ вт_НомераЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка В(&МассивФайловЭД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ДокументОснования
	|ИЗ
	|	вт_НомераЭД КАК вт_НомераЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ПО (ЭДПрисоединенныеФайлы.НомерЭД = вт_НомераЭД.НомерЭД)
	|			И (вт_НомераЭД.НомерЭД <> """")
	|			И (ЭДПрисоединенныеФайлы.НаправлениеЭД = вт_НомераЭД.НаправлениеЭД)
	|			И (ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = вт_НомераЭД.ТипЭлементаВерсииЭД)
	|ГДЕ
	|	НЕ ЭДПрисоединенныеФайлы.Ссылка В (&МассивФайловЭД)
	|	И ЭДПрисоединенныеФайлы.ВладелецФайла <> НЕОПРЕДЕЛЕНО";
	Запрос.УстановитьПараметр("МассивФайловЭД", МассивФайловЭД);
	
	ВременнаяТаблицаОснований = Запрос.Выполнить().Выгрузить();
	ДокументыОснования = ВременнаяТаблицаОснований.ВыгрузитьКолонку("ДокументОснования");
	
	Если ДокументыОснования.Количество() > 0 Тогда
		
		ОбменСКонтрагентамиВнутренний.УстановитьСостояниеОбменЗавершенСИсправлением(ДокументыОснования, ВыполняетсяОбновлениеИнформационнойБазы);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоДокументРеализации(СвойстваЭД)
	
	Результат = Ложь;
	
	МассивРТУ = Новый Массив;
	МассивРТУ.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	МассивРТУ.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	МассивРТУ.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	МассивРТУ.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
	
	Если Не МассивРТУ.Найти(СвойстваЭД.ВидЭД) = Неопределено Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура определяет, по каким объектам ИБ не надо выполнять действия (утверждение,
// подписание, подготовка к отправке).
//
// Параметры:
//  НастройкиОбъектов - соответствие, содержит ссылки на документы ИБ,
//                     по которым предполагается выполнение каких-либо действий с ЭД.
//  МассивНеОбрабатываемыхОбъектов - массив, возвращает в вызывающую процедуру ссылки на объекты ИБ,
//                                  по которым не надо выполнять никаких действий.
//
Процедура ОпределитьНеОбрабатываемыеОбъекты(НастройкиОбъектов, МассивНеОбрабатываемыхОбъектов)
	
	МассивОтбора = Новый Массив;
	Для Каждого Элемент Из НастройкиОбъектов Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			МассивОтбора.Добавить(Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект,
	|	СостоянияЭД.ЭлектронныйДокумент,
	|	СостоянияЭД.СостояниеВерсииЭД,
	|	СостоянияЭД.ЭлектронныйДокумент.ПрофильНастроекЭДО.СпособОбменаЭД КАК СпособОбменаЭД,
	|	СостоянияЭД.СостояниеВерсииЭД КАК СостояниеВерсииЭД1,
	|	СостоянияЭД.ЭлектронныйДокумент.СтатусЭД
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
	|	И СостоянияЭД.СостояниеВерсииЭД В(&СостоянияВерсийЭД)";
	
	СостоянияВерсийЭД = Новый Массив;
	СостоянияВерсийЭД.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправка);
	СостоянияВерсийЭД.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение);
	СостоянияВерсийЭД.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершен);
	СостоянияВерсийЭД.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением);
	СостоянияВерсийЭД.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении);
	СостоянияВерсийЭД.Добавить(Перечисления.СостоянияВерсийЭД.Отклонен);
	Запрос.УстановитьПараметр("СостоянияВерсийЭД", СостоянияВерсийЭД);
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивОтбора);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		МассивНеОбрабатываемыхОбъектов.Добавить(Результат.ЭлектронныйДокумент);
		ТекстСообщения = НСтр("ru = 'Обработка %1.
				|Не требуется выполнения действий с электронным документом.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Результат.СсылкаНаОбъект);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Результат.СсылкаНаОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Производит удаление из массива объектов для которых запрещено формирование новых ЭД.
//
// Параметры:
//  МассивСсылок  - Массив - массив ссылок.
//
Процедура УдалитьНедоступныеДляФормированияЭДОбъекты(МассивСсылок)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
	|	И НЕ СостоянияЭД.ЭлектронныйДокумент.СостояниеЭДО В (
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован),
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОшибкаПередачи),
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент),
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно))";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Индекс = МассивСсылок.Найти(Результат.СсылкаНаОбъект);
		МассивСсылок.Удалить(Индекс);
		ШаблонСообщения = НСтр("ru='Для документа %1 уже есть актуальный электронный документ.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Результат.СсылкаНаОбъект);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьДокументИБПоЭД(СсылкаНаВладельца, СсылкаНаЭД, ДокЗаполнен =Ложь, СпособОбработки = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	ФайлДанныхСсылка = ПолучитьДанныеЭД(СсылкаНаЭД);
	Если НЕ ЗначениеЗаполнено(ФайлДанныхСсылка) Тогда
		Возврат;
	КонецЕсли;
	ВыборкаДопДанные = ВыборкаДопДанныеЭД(СсылкаНаЭД);
	Если ВыборкаДопДанные.Следующий() Тогда
		СсылкаНаЭДДопДанных = ВыборкаДопДанные.Ссылка;
		ФайлДопДанныхСсылка = ПолучитьДанныеЭД(СсылкаНаЭДДопДанных);
		Если НЕ ЗначениеЗаполнено(ФайлДопДанныхСсылка) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	ДокументыУчета = Новый Массив;
	Если СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
		ИЛИ СсылкаНаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
		МассивСсылокНаЭД = Новый Массив;
		МассивСсылокНаЭД.Добавить(СсылкаНаЭД.ВладелецФайла);
		СоответствиеВладельцевИЭД = ВладельцыИЭлектронныеДокументы(Неопределено, МассивСсылокНаЭД);
		
		Если СоответствиеВладельцевИЭД.Количество() = 0 Тогда
			ДокументыУчета.Добавить(СсылкаНаВладельца);
		КонецЕсли;
		
		Для каждого ТекущаяСтрока Из СоответствиеВладельцевИЭД Цикл
		
			ДокументыУчета.Добавить(ТекущаяСтрока.Ключ);
		КонецЦикла;
	
	Иначе
		ДокументыУчета.Добавить(СсылкаНаВладельца);
	КонецЕсли;
	СтруктураПараметров.Вставить("ДокументыУчета", ДокументыУчета);
	
	СтруктураПараметров.Вставить("ФайлДанныхСсылка",  ФайлДанныхСсылка);
	СтруктураПараметров.Вставить("НаправлениеЭД",     СсылкаНаЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("ЗаполнитьДокумент", Истина);
	
	Если ФайлДопДанныхСсылка <> Неопределено Тогда
		СтруктураПараметров.Вставить("ФайлДопДанных", ФайлДопДанныхСсылка);
	КонецЕсли;
	
	СтруктураЭД = ОбменСКонтрагентамиВнутренний.ПолучитьДанныеИзФайла(СтруктураПараметров);
		
	Если СтруктураЭД.Загружен Тогда
		НачатьТранзакцию();
		Попытка
			
			РеквизитыВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД.ВладелецФайла, "ВидЭД, НастройкаЭДО");
			
			Если РеквизитыВладельца.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
				СтруктураПараметров.Вставить("ВладелецЭД", РеквизитыВладельца.НастройкаЭДО);
			КонецЕсли;
			
			ДокументыУчета = ОбменСКонтрагентамиВнутренний.СохранитьДанныеОбъекта(СтруктураПараметров, СпособОбработки);
			
			Если ЗначениеЗаполнено(ДокументыУчета) Тогда
				Для каждого Строка Из ДокументыУчета Цикл
					УстановитьСсылкуДляВладельцаВРегистреСостояний(Строка, СсылкаНаЭД.ВладелецФайла);	
				КонецЦикла;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	ДокЗаполнен = СтруктураЭД.Загружен;
	
КонецПроцедуры

// Формирует структуру параметров, необходимую для работы функций аннулирования и отклонения.
//
// Параметры:
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ.
//  ФормироватьУОУ - Булево - признак необходимости формирования уведомления об уточнении.
//  ЭтоСчетФактура - Булево - признак того, что обрабатываемый документ является счетом-фактурой.
// 
// Возвращаемое значение:
//  Структура - структура параметров:
//    * СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ;
//    * ФормироватьУОУ - Булево - признак необходимости формирования уведомления;
//    * ЭтоСчетФактура - Булево - признак того, что обрабатываемый документ является счетом-фактурой.
//
Функция НовыеПараметрыОтклоненияАннулирования(ЭД, ФормироватьУОУ, ЭтоСчетФактура)

	Возврат Новый Структура("СсылкаНаЭД, ФормироватьУОУ, ЭтоСчетФактура", ЭД, ФормироватьУОУ, ЭтоСчетФактура);

КонецФункции

Функция СостояниеДокументооборота(ДокументИБ)
		
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИБ,"СостояниеЭДО");
	
КонецФункции

// Проверка подписи.
//
// Параметры:
//  ДвоичныеДанныеПроверки - ДвоичныеДанные - данные проверки.
//  ЭлектронныйДокумент - Ссылка - электронный документ.
// 
// Возвращаемое значение:
//  Булево - признак проверки подписи.
//
Функция ЕстьТакаяПодпись(ДвоичныеДанныеПроверки, ЭлектронныйДокумент)
	
	Если НЕ ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭлектронныеПодписиЭД = ЭлектроннаяПодпись.УстановленныеПодписи(ЭлектронныйДокумент);
	Для каждого ЭП Из ЭлектронныеПодписиЭД Цикл
	
		ДвоичныеДанныеПодписи = ЭП.Подпись;
		Если ДвоичныеДанныеПодписи = ДвоичныеДанныеПроверки Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Получение FTP соединения.
//
// Параметры:
//  ПрофильНастроекЭДО - СправочникСсылка.ПрофилиНастроекЭДО - профиль ЭДО.
//  ЭтоТест - Булево - признак тестового соединения.
// 
// Возвращаемое значение:
//  FTPСоединение - соединение FTP.
//
Функция ПолучитьFTPСоединение(ПрофильНастроекЭДО, ЭтоТест = Ложь)
	
	Если ЭтоТест Тогда
		ШаблонСообщения = НСтр("ru = 'Тест. Проверка установки FTP соединения.
			|%1'");
	Иначе
		ШаблонСообщения = "%1";
	КонецЕсли;
		
	ИспользоватьПрокси = Ложь;
	
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	Если НастройкаПроксиСервера <> Неопределено Тогда
		ПараметрИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		Если НЕ ПараметрИспользоватьПрокси=Неопределено Тогда
			ИспользоватьПрокси = ПараметрИспользоватьПрокси;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьПрокси Тогда
		Если НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки") Тогда
			// Системные настройки прокси-сервера.
			Прокси = Новый ИнтернетПрокси(Истина);
		Иначе
			// Ручные настройки прокси-сервера.
			Прокси = Новый ИнтернетПрокси;
			Прокси.Установить("ftp", НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"],
				НастройкаПроксиСервера["Пользователь"], НастройкаПроксиСервера["Пароль"]);
			Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
		КонецЕсли;
	Иначе
		Прокси = Новый ИнтернетПрокси(Ложь);
	КонецЕсли;
	
	ПараметрыПрофиляНастроекЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО,
		"АдресСервера, Логин, Пароль, Порт, ПассивноеСоединение");
	Таймаут = 30;
	
	Попытка
		FTPСоединение = Новый FTPСоединение(ПараметрыПрофиляНастроекЭДО.АдресСервера,
											ПараметрыПрофиляНастроекЭДО.Порт,
											ПараметрыПрофиляНастроекЭДО.Логин,
											ПараметрыПрофиляНастроекЭДО.Пароль,
											Прокси,
											ПараметрыПрофиляНастроекЭДО.ПассивноеСоединение,
											Таймаут);
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
			|%2'");
		ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("121");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата, ТекстОшибки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Если ЭтоТест Тогда
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат FTPСоединение;
	
КонецФункции

// Обновление статусов документов пакета электронного документа.
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД - ссылка на пакет электронного документа.
//  НовыйСтатусПакетаЭД - ПеречислениеСсылка.СтатусыПакетовЭД - новый статус.
//  ДатаИзменения - Дата - дата изменения статуса.
//
Процедура ОбновитьСтатусыДокументовПакетаЭД(ПакетЭД, НовыйСтатусПакетаЭД, ДатаИзменения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ПакетЭД) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПакетЭД.ЭлектронныеДокументы.Количество() = 0 Тогда
		
		ШаблонОшибки = НСтр("ru = 'Документ %1 не был отправлен. Подробнее см. Журнал регистрации'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
					ПакетЭД );
		ШаблонОшибки = НСтр("ru = 'Некорректно заполнен документ %1.
			|Не заполнена табличная часть ""ОбменСКонтрагентами""'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
					ПакетЭД );
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			НСтр("ru = 'Отправка пакета ЭД и обновление статусов ЭД'"),
			ТекстОшибки,
			ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Для Каждого Документ Из ПакетЭД.ЭлектронныеДокументы Цикл
			Если НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Доставлен Тогда
				ЗаписатьДатуПолучения(Документ.ЭлектронныйДокумент, ДатаИзменения);
			ИначеЕсли НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Отправлен Тогда
				ЗаписатьДатуОтправки(Документ.ЭлектронныйДокумент, ДатаИзменения);
			КонецЕсли;
			ОбновитьВерсиюЭД(Документ.ЭлектронныйДокумент);
		КонецЦикла;
		ПакетОбъект = ПакетЭД.ПолучитьОбъект();
		ПакетОбъект.СтатусПакета = НовыйСтатусПакетаЭД;
		ПакетОбъект.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			НСтр("ru = 'смена статуса пакета ЭД и обновление статусов ЭД'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Проверяет форматы электронных документов в настройках на актуальность и при необходимости актуализирует их.
//
// Параметры:
//  НастройкиОбмена			 - Структура - см. функцию ОбменСКонтрагентамиСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику;
//  СообщенияПользователю	 - Массив - содержит элементы типа СообщениеПользователю, которые нужно вывести по результатам
//                                      работы процедуры.
//
Процедура АктуализироватьФорматыЭДВНастройкахОбмена(НастройкиОбмена, СообщенияПользователю = Неопределено)

	Если НастройкиОбмена <> Неопределено И ТипЗнч(НастройкиОбмена) = Тип("Структура") Тогда
		ВидЭД = Неопределено;
		ВерсияФормата = Неопределено;
		
		Если НастройкиОбмена.Свойство("ВидЭД", ВидЭД) И НастройкиОбмена.Свойство("ВерсияФормата", ВерсияФормата) 
				И ЗначениеЗаполнено(ВидЭД) И ЗначениеЗаполнено(ВерсияФормата) Тогда
			ТаблицаФорматов = ФорматыЭлектронныхДокументов();
			СведенияОФормате = ТаблицаФорматов.НайтиСтроки(
				Новый Структура("ВидЭлектронногоДокумента, ИдентификаторФормата", ВидЭД, ВерсияФормата));
				
			Если СведенияОФормате.Количество() И Не СведенияОФормате[0].Действует Тогда
				ПредставлениеСтарогоФормата = СведенияОФормате[0].ПредставлениеФормата;
				
				АктуальныйФормат = АктуальнаяВерсияФорматаЭД(ВидЭД);
				СведенияОНовомФормате = ТаблицаФорматов.НайтиСтроки(
					Новый Структура("ВидЭлектронногоДокумента, ИдентификаторФормата", ВидЭД, АктуальныйФормат));
				ПредставлениеНовогоФормата = СведенияОНовомФормате[0].ПредставлениеФормата;
				
				НастройкиОбмена.Вставить("ВерсияФормата", АктуальныйФормат);
				
				// Скорректируем настройку и при необходимости профиль.
				НастройкаЭДО = Неопределено;
				Если НастройкиОбмена.Свойство("СоглашениеЭД", НастройкаЭДО) Тогда
					Если СообщенияПользователю = Неопределено Тогда
						СообщенияПользователю = Новый Массив;
					КонецЕсли;
					
					УстановитьПривилегированныйРежим(Истина);
					
					НастройкаЭДООбъект = НастройкаЭДО.ПолучитьОбъект();
					ИсходнаяСтрокаЭД = НастройкаЭДООбъект.ИсходящиеДокументы.Найти(ВидЭД, "ИсходящийДокумент");
					ИсходнаяСтрокаЭД.ВерсияФормата = АктуальныйФормат;
					НастройкаЭДООбъект.Записать();
					
					НовоеСообщение = Новый СообщениеПользователю;
					НовоеСообщение.Поле = "ИсходящиеДокументы[%1].ДокументУчета";
					НовоеСообщение.ПутьКДанным = "Объект";
						
					Если НЕ НастройкаЭДООбъект.РасширенныйРежимНастройкиСоглашения 
						И ЗначениеЗаполнено(ИсходнаяСтрокаЭД.ПрофильНастроекЭДО) Тогда
						ПрофильЭДО = ИсходнаяСтрокаЭД.ПрофильНастроекЭДО;
						
						ПрофильЭДООбъект = ПрофильЭДО.ПолучитьОбъект();
						ИсходнаяСтрокаЭД = ПрофильЭДООбъект.ИсходящиеДокументы.Найти(ВидЭД, "ИсходящийДокумент");
						ИсходнаяСтрокаЭД.ВерсияФормата = АктуальныйФормат;
						ПрофильЭДООбъект.Записать();
						
						НовоеСообщение.КлючДанных = ПрофильЭДО;
						ТипНастройки = НСтр("ru = 'профиле настроек ЭДО'");
						ИндексСтрокиНастройки = ПрофильЭДООбъект.ИсходящиеДокументы.Индекс(ИсходнаяСтрокаЭД);
					Иначе
						НовоеСообщение.КлючДанных = НастройкаЭДО;
						ТипНастройки = НСтр("ru = 'настройке ЭДО'");
						ИндексСтрокиНастройки = НастройкаЭДООбъект.ИсходящиеДокументы.Индекс(ИсходнаяСтрокаЭД);
					КонецЕсли;
					
					НовоеСообщение.Текст = СтрШаблон(НСтр("ru = 'В %1 ""%2"" устаревший формат (%3) был заменен на актуальный (%4).'"),
						ТипНастройки, НовоеСообщение.КлючДанных, ПредставлениеСтарогоФормата, ПредставлениеНовогоФормата);
					НовоеСообщение.Поле = СтрШаблон(НовоеСообщение.Поле, ИндексСтрокиНастройки);	
					СообщенияПользователю.Добавить(НовоеСообщение);
					
					УстановитьПривилегированныйРежим(Ложь);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Определяет идентификатор формата электронного документа, соответствующего указанному пространству имен.
//
// Параметры:
//  ВидЭлектронногоДокумента - ПеречислениеСсылка.ВидыЭД - вид электронного документа
//  ПространствоИмен		 - Строка - пространство имен.
// 
// Возвращаемое значение:
//  Строка - идентификатор формата.
//
Функция ФорматПоПространствуИмен(ВидЭлектронногоДокумента, ПространствоИмен)

	Результат = Неопределено;
	
	ТаблицаФорматов = ФорматыЭлектронныхДокументов();
	ПараметрыОтбора = Новый Структура("ВидЭлектронногоДокумента", ВидЭлектронногоДокумента);
	СтрокиВидаЭлектронногоДокумента = ТаблицаФорматов.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаФормата Из СтрокиВидаЭлектронногоДокумента Цикл
		Если СтрокаФормата.ПространстваИмен.Найти(СокрЛП(ПространствоИмен)) <> Неопределено Тогда
			Результат = СтрокаФормата.ИдентификаторФормата;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Формирует структуру сведений о формате.
//
// Параметры:
//  ВидЭлектронногоДокумента - ПеречислениеСсылка.ВидыЭД - вид электронного документа.
//  ИдентификаторФормата	 - Строка - формат электронного документа.
// 
// Возвращаемое значение:
//  Структура - содержит данные о формате. Состав и типы ключей описываются в макете
//              Обработка.ОбменСКонтрагентами.ВерсииФорматовЭлектронныхДокументов.
//
Функция СведенияОФормате(ВидЭлектронногоДокумента, ИдентификаторФормата)

	Результат = Неопределено;
	
	ТаблицаФорматов = ФорматыЭлектронныхДокументов();
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидЭлектронногоДокумента", ВидЭлектронногоДокумента);
	ПараметрыОтбора.Вставить("ИдентификаторФормата", ИдентификаторФормата);
	СтрокиВидаЭлектронногоДокумента = ТаблицаФорматов.НайтиСтроки(ПараметрыОтбора);
	Если СтрокиВидаЭлектронногоДокумента.Количество() Тогда
		СтрокаФормата = СтрокиВидаЭлектронногоДокумента[СтрокиВидаЭлектронногоДокумента.Количество() - 1];
		
		Результат = Новый Структура;
		Для Каждого Колонка Из ТаблицаФорматов.Колонки Цикл
			Результат.Вставить(Колонка.Имя, СтрокаФормата[Колонка.Имя]);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции 

// Получение допустимого статуса электронного документа.
//
// Параметры:
//  НовыйСтатус - Перечисления.СтатусыЭД - устанавливаемый статус.
//  СсылкаНаЭД - ДокументСсылка.ЭлектронныйДокументВходящий, ЭлектронныйДокументИсходящий - ссылка на электронный документ.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыЭД - установленный статус.
//
Функция ПолучитьДопустимыйСтатусЭД(НовыйСтатус, СсылкаНаЭД)
	
	ТекущийСтатус = Неопределено;
	
	Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		
		СвойстваДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "СтатусЭД, ВладелецФайла");
		ТекущийСтатус = СвойстваДокумента.СтатусЭД;
		
		Если НовыйСтатус = Перечисления.СтатусыЭД.Отклонен ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.ОтклоненПолучателем
			ИЛИ НЕ ЗначениеЗаполнено(ТекущийСтатус) ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.ОшибкаПередачи
			ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.Аннулирован
			ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании Тогда
			ТекущийСтатус = НовыйСтатус;
		ИначеЕсли НовыйСтатус = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании Тогда
			
			ТребуетсяПодтверждение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваДокумента.ВладелецФайла, "ТребуетсяПодтверждение");
			
			Если ТекущийСтатус = Перечисления.СтатусыЭД.ПолученоПодтверждение
				Или ЗначениеЗаполнено(ВторойТитулДокумента(СсылкаНаЭД))
				Или ТребуетсяПодтверждение Тогда
				ТекущийСтатус = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании;
				
			Иначе
				ТекущийСтатус = Перечисления.СтатусыЭД.Аннулирован;
			КонецЕсли;
			
		Иначе
			НастройкиОбмена = НастройкиОбменаЭД(СсылкаНаЭД);
			Если НастройкиОбмена <> Неопределено Тогда
				МассивСтатусов = ВернутьМассивСтатусовЭД(НастройкиОбмена);
				ИндексТекущегоСтатуса = МассивСтатусов.Найти(ТекущийСтатус);
				ИндексНовогоСтатуса   = МассивСтатусов.Найти(НовыйСтатус);
				Если ИндексНовогоСтатуса <> Неопределено И ИндексТекущегоСтатуса <> Неопределено Тогда
					Если ИндексНовогоСтатуса > ИндексТекущегоСтатуса Тогда
						ТекущийСтатус = НовыйСтатус;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекущийСтатус;
	
КонецФункции

// Формирование электронных документов и помещение в справочник присоединенных файлов.
//
// Параметры:
//  МассивОбъектов - Массив - массив ссылок на объекты, к которым надо создать электронный документ.
//  ПараметрыОбмена - Соответствие - соответствие, содержащая настройки обмена ЭД для объектов.
//  ДопПараметры - Структура - дополнительные параметры.
//
// Возвращаемое значение:
//  Массив - сформированные документы.
//
Функция СформироватьПрисоединенныеФайлы(МассивОбъектов, ПараметрыОбмена, ДопПараметры = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСтруктурОбмена = СформироватьXMLФайлыДокументов(МассивОбъектов, ПараметрыОбмена, ДопПараметры);
	МассивСформированныхЭД = Новый Массив;
	Для Каждого СтруктураОбмена Из МассивСтруктурОбмена Цикл
	
		ПолноеИмяФайла = СтруктураОбмена.ПолноеИмяФайла;
		
		Если НЕ ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
			Продолжить;
		КонецЕсли;
		
		ВремяСозданияЭД = СтруктураОбмена.СтруктураЭД.ДатаЭД;
		Файл = Новый Файл(ПолноеИмяФайла);
		ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		
		УникальныйИдентификаторЭД = "";
		СтруктураОбмена.Свойство("УникальныйИдентификатор", УникальныйИдентификаторЭД);
		
		Если НЕ ЗначениеЗаполнено(УникальныйИдентификаторЭД) Тогда
			СтруктураОбмена.СтруктураЭД.Свойство("УникальныйИдентификатор", УникальныйИдентификаторЭД);
		КонецЕсли;
		
		Ответственный = Неопределено; 
		ОбменСКонтрагентамиПереопределяемый.ПолучитьОтветственногоПоЭД(СтруктураОбмена.СтруктураЭД.Контрагент,
			СтруктураОбмена.СтруктураЭД.СоглашениеЭД, Ответственный);
		СтруктураОбмена.СтруктураЭД.Вставить("Ответственный", Ответственный);
		
		НовыйЭлектронныйДокумент = СоздатьЭлектронныйДокумент(СтруктураОбмена.СтруктураЭД);
		
		СтруктураОбмена.СтруктураЭД.Вставить("НаименованиеФайла", Файл.ИмяБезРасширения);
		СтруктураОбмена.СтруктураЭД.Вставить("ВладелецЭД", НовыйЭлектронныйДокумент);
		
		ПараметрыФайла = Новый Структура();
		ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов", НовыйЭлектронныйДокумент);
		ПараметрыФайла.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", СтрЗаменить(Файл.Расширение, ".", ""));
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		НоваяСсылкаЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(УникальныйИдентификаторЭД);
		
		ДобавленныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайла, , , НоваяСсылкаЭД);
	
		СтруктураОбмена.СтруктураЭД.Вставить("НаименованиеФайла", Файл.ИмяБезРасширения);
		
		ФлагПродолжить = Ложь;
		
		Если НЕ ЗначениеЗаполнено(ДобавленныйФайл) Тогда
			ФлагПродолжить = Истина;
		ИначеЕсли СтруктураОбмена.Свойство("ПолноеИмяДопФайла") Тогда
			ДопФайлСоздан = СоздатьПрисоединенныйДопФайл(СтруктураОбмена, ДобавленныйФайл);
			Если НЕ ДопФайлСоздан Тогда
				ФлагПродолжить = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(Файл.Путь);
		Если ФлагПродолжить Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтруктураОбмена.Свойство("МассивФайлов") И СтруктураОбмена.МассивФайлов.Количество() > 0 Тогда
			АдресАрхива = АрхивДополнительныхФайлов(СтруктураОбмена.МассивФайлов);
			Если Не АдресАрхива = Неопределено Тогда
				ПараметрыФайла = Новый Структура();
				ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
				ПараметрыФайла.Вставить("ВладелецФайлов", НовыйЭлектронныйДокумент); 
				ПараметрыФайла.Вставить("ИмяБезРасширения", НСтр("ru = 'Дополнительные файлы'"));
				ПараметрыФайла.Вставить("РасширениеБезТочки", "zip");
				ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
				НоваяСсылкаЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку();
		
				ДопФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресАрхива, , , НоваяСсылкаЭД);
			
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", ДобавленныйФайл);
				СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
				СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
				СтруктураПараметров.Вставить("Организация", СтруктураОбмена.СтруктураЭД.Организация);
				СтруктураПараметров.Вставить("Контрагент", СтруктураОбмена.СтруктураЭД.Контрагент);
				СтруктураПараметров.Вставить("СоглашениеЭД", СтруктураОбмена.СтруктураЭД.СоглашениеЭД);
				СтруктураПараметров.Вставить("ВладелецЭД", НовыйЭлектронныйДокумент);
				СтруктураПараметров.Вставить("УникальныйИД", УникальныйИдентификаторЭД);
				ИзменитьПоСсылкеПрисоединенныйФайл(ДопФайл, СтруктураПараметров, Ложь);
			КонецЕсли;
		КонецЕсли;
		
		СтруктураОбмена.СтруктураЭД.Вставить("УникальныйИД", УникальныйИдентификаторЭД);
		
		ДатаФормированияЭДОтправителем = "";
		Если НЕ СтруктураОбмена.СтруктураЭД.Свойство("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем) Тогда
			ДатаФормированияЭДОтправителем = ВремяСозданияЭД;
		КонецЕсли;
		СтруктураОбмена.СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем);
		СтатусЭД = Неопределено;
		Если НЕ (СтруктураОбмена.СтруктураЭД.Свойство("СтатусЭД", СтатусЭД) И ЗначениеЗаполнено(СтатусЭД)) Тогда
			СтруктураОбмена.СтруктураЭД.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
		КонецЕсли;
		
		Если СтруктураОбмена.Свойство("СчетФактураБезФормированияЭД")
			И ЗначениеЗаполнено(СтруктураОбмена.СчетФактураБезФормированияЭД) Тогда
			
			Если ДопПараметры = "" Тогда
				ДопПараметры = Новый Структура;
			КонецЕсли;
			
			Если ДопПараметры.Свойство("МассивОбработанныхСФ") Тогда
				ДопПараметры.МассивОбработанныхСФ.Добавить(СтруктураОбмена.СчетФактураБезФормированияЭД);
			Иначе
				ДопПараметры.Вставить("МассивОбработанныхСФ",
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтруктураОбмена.СчетФактураБезФормированияЭД));
			КонецЕсли;
			
		КонецЕсли;
		
		ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураОбмена.СтруктураЭД);
		Для каждого Строка Из СтруктураОбмена.СтруктураЭД.ДокументыОснования Цикл
			УстановитьСсылкуДляВладельцаВРегистреСостояний(Строка, НовыйЭлектронныйДокумент);
		КонецЦикла;
		МассивСформированныхЭД.Добавить(НовыйЭлектронныйДокумент);
		
		ОбменСКонтрагентамиПереопределяемый.ЭлектронныйДокументСформирован(ДобавленныйФайл);
	КонецЦикла;
	
	Возврат МассивСформированныхЭД;
	
КонецФункции

// Формирует для электронного документа текстовое представление прогресса подписания.
//
// Параметры:
//  ЭД          - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ
//  ВесМаршрута - Число                                  - максимально возможное количество подписей по маршруту.
// 
// Возвращаемое значение:
//  Строка - текстовое представление прогресса подписания.
//
Функция ПредставлениеПрогрессаПодписания(ЭД, ВесМаршрута)

	// Определим количество уже установленных подписей
	УстановленоПодписей = 0;
	
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(ЭД) Тогда
		СсылкаНаЭД = ЭД;
	Иначе
		СсылкаНаЭД = ЭД.Ссылка;
	КонецЕсли;
	УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(СсылкаНаЭД);
	УстановленоПодписей = УстановленныеПодписи.Количество();
	
	
	// Сформируем представление прогресса подписания
	Если ВесМаршрута = 0 Тогда
		ВсегоПодписей = Макс(1, УстановленоПодписей);
	Иначе
		ВсегоПодписей = ВесМаршрута + УстановленоПодписей;
	КонецЕсли;
	ЯзыкКонфигурации = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	Разделитель = ?(ЭлектронноеВзаимодействиеСлужебный.КонфигурацияИспользуетНесколькоЯзыков(), "/", НСтр("ru = 'из'", ЯзыкКонфигурации));
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '(%1 %2 %3)'", ЯзыкКонфигурации), 
		УстановленоПодписей, Разделитель, ВсегоПодписей);
		
	Возврат Результат;

КонецФункции

// Определяет необходимость ознакомления с изменением состояния электронного документа.
//
// Параметры:
//  ТекущееСостояние - ПеречислениеСсылка.СостоянияВерсийЭД - текущее состояние электронного документа.
//  НовоеСостояние - ПеречислениеСсылка.СостоянияВерсийЭД - новое состояние электронного документа.
//
// Возвращаемое значение:
//  Булево - признак необходимости ознакомления.
//
Функция ЕстьНеобходимостьОзнакомленияСИзменениемСостоянияЭД(Знач ТекущееСостояние, Знач НовоеСостояние)
	
	Если Не ИспользоватьОзнакомлениеСЭД() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НаОзнакомление = Ложь;
	
	Если НовоеСостояние = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
		ИЛИ НовоеСостояние = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением Тогда
		
		СостоянияЗавершающиесяПриОбмене = Новый Массив;
		СостоянияЗавершающиесяПриОбмене.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение);
		СостоянияЗавершающиесяПриОбмене.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю);
		СостоянияЗавершающиесяПриОбмене.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении);
		СостоянияЗавершающиесяПриОбмене.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения);
		
		Если СостоянияЗавершающиесяПриОбмене.Найти(ТекущееСостояние) <> Неопределено Тогда
			НаОзнакомление = Истина;
		КонецЕсли;
		
	ИначеЕсли НовоеСостояние = Перечисления.СостоянияВерсийЭД.Аннулирован Тогда
		
		СостоянияАннулирующиесяПриОбмене = Новый Массив;
		СостоянияАннулирующиесяПриОбмене.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяАннулирование);
		
		Если СостоянияАннулирующиесяПриОбмене.Найти(ТекущееСостояние) <> Неопределено Тогда
			НаОзнакомление = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НаОзнакомление;
	
КонецФункции

// Возвращает общие настройки обмена с контрагентами
//
// Возвращаемое значение:
//  ФиксированнаяСтруктура - настройки обмена:
//   * ИспользоватьОзнакомлениеСЭД - Булево - признак использования механизма ознакомления с электронными документам.
//   * ИспользоватьОтложеннуюОтправкуЭД - Булево - признак использования отложенной отправки электронных документов.
//
Функция НастройкиОбменаСКонтрагентами()
	
	Возврат ОбменСКонтрагентамиПовтИсп.НастройкиОбменаСКонтрагентами();
	
КонецФункции

// Функция создает электронный документ.
//
// Параметры:
//  СтруктураЭД - Структура - содержит значения реквизитов нового документа, для создания входящего документа структура 
//                            должна содержать элемент "Входящий" со значением Истина иначе будет создан исходящий документ.
//  УникальныйИдентификаторЭД - УникальныйИдентификатор - уникальный идентификатор для создания ссылки на объект.
// 
// Возвращаемое значение:
//  ДокументСсылка - ссылка на новый входящий или исходящий электронный документ.
//
Функция СоздатьЭлектронныйДокумент(СтруктураЭД = Неопределено)
	
	Если СтруктураЭД.Свойство("Входящий") И СтруктураЭД.Входящий Тогда
		НовыйЭлектронныйДокумент = Документы.ЭлектронныйДокументВходящий.СоздатьДокумент();
	Иначе
		НовыйЭлектронныйДокумент = Документы.ЭлектронныйДокументИсходящий.СоздатьДокумент();
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДокументыОснования") Тогда
		Для каждого Строка Из СтруктураЭД.ДокументыОснования Цикл
			НоваяСтрока = НовыйЭлектронныйДокумент.ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование = Строка;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйЭлектронныйДокумент,СтруктураЭД);
	
	Если СтруктураЭД.Свойство("СоглашениеЭД") Тогда
		НовыйЭлектронныйДокумент.НастройкаЭДО = СтруктураЭД.СоглашениеЭД;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("УникальныйИдентификатор") Тогда
		НовыйЭлектронныйДокумент.УникальныйИД = СтруктураЭД.УникальныйИдентификатор;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДатаЭД") Тогда
		НовыйЭлектронныйДокумент.Дата = СтруктураЭД.ДатаЭД;
	Иначе
		НовыйЭлектронныйДокумент.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ТребуетсяПодтверждение") Тогда
		НовыйЭлектронныйДокумент.ТребуетсяПодтверждение = СтруктураЭД.ТребуетсяПодтверждение;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ТребуетсяИзвещение") Тогда
		НовыйЭлектронныйДокумент.ТребуетсяИзвещение = СтруктураЭД.ТребуетсяИзвещение;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("НаименованиеДокументаОтправителя") Тогда
		НовыйЭлектронныйДокумент.НаименованиеДокументаОтправителя = СтруктураЭД.НаименованиеДокументаОтправителя;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ИдентификаторыДокументовИЭДОснований") Тогда
		Для Каждого СтрокаТаблицы Из СтруктураЭД.ИдентификаторыДокументовИЭДОснований Цикл
			НоваяСтрока = НовыйЭлектронныйДокумент.ИдентификаторыОснованийВладельцаФайла.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
	НовыйЭлектронныйДокумент.Записать();
	НовыйЭлектронныйДокументСсылка = НовыйЭлектронныйДокумент.Ссылка; 
	
	Возврат НовыйЭлектронныйДокументСсылка;
	
КонецФункции

// Сохраняет текст причины отклонения в входящем или исходящем электронном документе.
//
// Параметры:
//  СсылкаНаЭД			 - ДокументСсылка.ЭлектронныйДокументВходящий, ДокументСсылка.ЭлектронныйДокументИсходящий - ссылка на отклоняемый документ
//  ПричинаОтклонения	 - Строка - строка, содержащая причину отклонения документа.
//
Процедура ЗаписатьПричинуОтклонения(СсылкаНаЭД,ПричинаОтклонения)
	
	ОбъектЭДО = СсылкаНаЭД.ПолучитьОбъект();
	ОбъектЭДО.ПричинаОтклонения = ПричинаОтклонения;
	ОбъектЭДО.Записать();
	
КонецПроцедуры

// Получает из табличной части "Входящие электронные документы" настройки ЭДО способ обработки 
// электронного документа переданного вида.
//
// Параметры:
//  НастройкаЭДО - СправочникСсылка.СоглашенияОбИспользованииЭД - ссылка на настройку для которой определяется способ
//  ВидЭД		 - ПеречислениеСсылка.ВидыЭД - вид ЭД для поиска.
// 
// Возвращаемое значение:
//  Строка - способ обработки из табличной части настройки ЭДО.
//
Функция СпособОбработкиВходящегоДокумента(НастройкаЭДО, ВидЭД, ТипЭлементаВерсииЭД)
	
	СпособОбработки = "Автоматически";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДВходящиеДокументы.СпособОбработки,
	|	СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ВходящиеДокументы КАК СоглашенияОбИспользованииЭДВходящиеДокументы
	|ГДЕ
	|	СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент В (&ВидЭД)
	|	И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка = &НастройкаЭДО";
	Запрос.УстановитьПараметр("НастройкаЭДО", НастройкаЭДО);
	
	Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
		
		МассивВидовЭД = Новый Массив;
		МассивВидовЭД.Добавить(ВидЭД);
		МассивВидовЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
		Запрос.УстановитьПараметр("ВидЭД", МассивВидовЭД);
	Иначе
		Запрос.УстановитьПараметр("ВидЭД", ВидЭД);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат СпособОбработки;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СпособОбработки = Выборка.СпособОбработки;
	КонецЕсли;
	
	Если Выборка.Следующий() Тогда
		СтруктураСпособовОбработки = Новый Структура("ПервичныйДокумент, СчетФактура");
		Если Выборка.ВходящийДокумент = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			СтруктураСпособовОбработки.ПервичныйДокумент = Выборка.СпособОбработки;
			СтруктураСпособовОбработки.СчетФактура = СпособОбработки;
		Иначе
			СтруктураСпособовОбработки.ПервичныйДокумент = СпособОбработки;
			СтруктураСпособовОбработки.СчетФактура = Выборка.СпособОбработки;
		КонецЕсли;
		СпособОбработки = СтруктураСпособовОбработки;
	КонецЕсли;
	
	Возврат СпособОбработки;
	
КонецФункции

// Только для внутреннего использования
Функция ЕстьНеОтправленноеПодтверждение(ВладелецФайла, СостояниеЭД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.СтатусЭД,
	|	ЭДПрисоединенныеФайлы.ПодписанЭП,
	|	ЕСТЬNULL(ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец.ПодписанЭП, ЛОЖЬ) КАК ВладелецПодписанЭП
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&ТипыИзвещений)
	|	И ЭДПрисоединенныеФайлы.СтатусЭД В(&СтатусыНеотправленногоЭД)";
	
	СтатусыНеотправленногоЭД = Новый Массив;
	СтатусыНеотправленногоЭД.Добавить(Перечисления.СтатусыЭД.Утвержден);
	СтатусыНеотправленногоЭД.Добавить(Перечисления.СтатусыЭД.Подписан);
	СтатусыНеотправленногоЭД.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
	
	Запрос.УстановитьПараметр("СтатусыНеотправленногоЭД", СтатусыНеотправленногоЭД);
	ТипыИзвещений = Новый Массив;
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИОП);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД);
	Запрос.УстановитьПараметр("ТипыИзвещений", ТипыИзвещений);
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Если Выборка.СтатусЭД = Перечисления.СтатусыЭД.Утвержден Тогда
		СостояниеЭД = Перечисления.СостоянияВерсийЭД.ИзвещениеНаПодписи;
		
	ИначеЕсли Выборка.СтатусЭД = Перечисления.СтатусыЭД.Подписан Тогда
		
		Если Выборка.ВладелецПодписанЭП И Не Выборка.ПодписанЭП Тогда
			СостояниеЭД = Перечисления.СостоянияВерсийЭД.ИзвещениеНаПодписи;
		Иначе
			СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения;
		КонецЕсли;
		
	ИначеЕсли Выборка.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
		СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция определяет есть ли подтверждение о доставке для документов ФНС.
Функция ЕстьНепринятоеПодтверждение(ВладелецФайла, СостояниеЭД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&ТипыИзвещений)";
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	ТипыИзвещений = Новый Массив;
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИОП);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ);
	Запрос.УстановитьПараметр("ТипыИзвещений", ТипыИзвещений);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти
