#Область ПрограммныйИнтерфейс

// Возвращает соответствие полей документов-оснований и исходящей транспортной операции
// 
// Возвращаемое значение:
//  Соответствие - соответствие со свойствами:
//  * ИмяДокумента — Соответствие — ключом свойства является имя документа, например "РеализацияТоваровУслуг",
//  	а значением — соответствие со свойствами:
//  ** ГрузоотправительХозяйствующийСубъект — Строка — имя поля документа, которое соответствует контрагенту
//  	хозяйствуюшего субъекта грузоотправителя
//  ** ГрузоотправительПредприятие — Строка — имя поля документа, которое соответствует предприятию грузоотправителя
//  ** ГрузополучательХозяйствующийСубъект — Строка — имя поля документа, которое соответствует контрагенту
//  	хозяйствуюшего субъекта грузополучателя
//  ** ГрузополучательПредприятие — Строка — имя поля документа, которое соответствует предприяютию грузополучателя
//
Функция СоответствиеПолейДокументовОснованийИИсходящейТранспортнойОперации() Экспорт
	
	СоответствиеПолей = Новый Соответствие;
	
	СоответствиеПолей.Вставить("РасходнаяНакладная", Новый Соответствие);
	СоответствиеПолей["РасходнаяНакладная"].Вставить("ГрузоотправительХозяйствующийСубъект", "Организация");
	СоответствиеПолей["РасходнаяНакладная"].Вставить("ГрузоотправительПредприятие", "СтруктурнаяЕдиница");
	СоответствиеПолей["РасходнаяНакладная"].Вставить("ГрузополучательХозяйствующийСубъект", "Контрагент");
	СоответствиеПолей["РасходнаяНакладная"].Вставить("ГрузополучательПредприятие", "Грузополучатель");
	
	СоответствиеПолей.Вставить("ЗаказПокупателя", Новый Соответствие);
	СоответствиеПолей["ЗаказПокупателя"].Вставить("ГрузоотправительХозяйствующийСубъект", "Организация");
	СоответствиеПолей["ЗаказПокупателя"].Вставить("ГрузоотправительПредприятие", "СтруктурнаяЕдиницаПродажи");
	СоответствиеПолей["ЗаказПокупателя"].Вставить("ГрузополучательХозяйствующийСубъект", Неопределено);
	СоответствиеПолей["ЗаказПокупателя"].Вставить("ГрузополучательПредприятие", "Грузополучатель");
	
	СоответствиеПолей.Вставить("ПеремещениеЗапасов", Новый Соответствие);
	СоответствиеПолей["ПеремещениеЗапасов"].Вставить("ГрузоотправительХозяйствующийСубъект", "Организация");
	СоответствиеПолей["ПеремещениеЗапасов"].Вставить("ГрузоотправительПредприятие", "СтруктурнаяЕдиница");
	СоответствиеПолей["ПеремещениеЗапасов"].Вставить("ГрузополучательХозяйствующийСубъект", Неопределено);
	СоответствиеПолей["ПеремещениеЗапасов"].Вставить("ГрузополучательПредприятие", "СтруктурнаяЕдиницаполучатель");
	
	СоответствиеПолей.Вставить("ОтчетОПереработке", Новый Соответствие);
	СоответствиеПолей["ОтчетОПереработке"].Вставить("ГрузоотправительХозяйствующийСубъект", "Организация");
	СоответствиеПолей["ОтчетОПереработке"].Вставить("ГрузоотправительПредприятие", "СтруктурнаяЕдиница");
	СоответствиеПолей["ОтчетОПереработке"].Вставить("ГрузополучательХозяйствующийСубъект", "Контрагент");
	СоответствиеПолей["ОтчетОПереработке"].Вставить("ГрузополучательПредприятие", "Грузополучатель");
	
	Возврат СоответствиеПолей;
	
КонецФункции

// Возвращает соответствие полей документов-оснований и входящей транспортной операции
// 
// Возвращаемое значение:
//  Соответствие - соответствие со свойствами:
//  * ИмяДокумента — Соответствие — ключом свойства является имя документа, например "РеализацияТоваровУслуг",
//  	а значением — соответствие со свойствами:
//  ** ГрузоотправительХозяйствующийСубъект — Строка — имя поля документа, которое соответствует контрагенту
//  	хозяйствуюшего субъекта грузоотправителя
//  ** ГрузоотправительПредприятие — Строка — имя поля документа, которое соответствует предприятию грузоотправителя
//  ** ГрузополучательХозяйствующийСубъект — Строка — имя поля документа, которое соответствует контрагенту
//  	хозяйствуюшего субъекта грузополучателя
//  ** ГрузополучательПредприятие — Строка — имя поля документа, которое соответствует предприяютию грузополучателя
//
Функция СоответствиеПолейДокументовОснованийИВходящейТранспортнойОперации() Экспорт
	
	СоответствиеПолей = Новый Соответствие;
	
	СоответствиеПолей.Вставить("ПриходнаяНакладная", Новый Соответствие);
	СоответствиеПолей["ПриходнаяНакладная"].Вставить("ГрузоотправительХозяйствующийСубъект", "Контрагент");
	СоответствиеПолей["ПриходнаяНакладная"].Вставить("ГрузополучательХозяйствующийСубъект", "Организация");
	СоответствиеПолей["ПриходнаяНакладная"].Вставить("ГрузополучательПредприятие", "СтруктурнаяЕдиница");
	
	СоответствиеПолей.Вставить("ПеремещениеЗапасов", Новый Соответствие);
	СоответствиеПолей["ПеремещениеЗапасов"].Вставить("ГрузоотправительПредприятие", "СтруктурнаяЕдиница");
	СоответствиеПолей["ПеремещениеЗапасов"].Вставить("ГрузополучательХозяйствующийСубъект", "Организация");
	СоответствиеПолей["ПеремещениеЗапасов"].Вставить("ГрузополучательПредприятие", "СтруктурнаяЕдиницаПолучатель");
	
	Возврат СоответствиеПолей;
	
КонецФункции

// Возвращает соответствие полей документов-оснований и производственных операций
// 
// Возвращаемое значение:
//  Соответствие - соответствие
Функция СоответствиеПолейДокументовОснованийИПроизводственнойОперации() Экспорт
	
	СоответствиеПолей = Новый Соответствие;
	
	СоответствиеПолей.Вставить("СборкаЗапасов", Новый Соответствие);
	СоответствиеПолей["СборкаЗапасов"].Вставить("ХозяйствующийСубъект", "Организация");
	СоответствиеПолей["СборкаЗапасов"].Вставить("Предприятие", "СтруктурнаяЕдиница");
	
	Возврат СоответствиеПолей;
	
КонецФункции

// Возвращает соответствие полей документов-оснований и инвентаризации продукции
// 
// Возвращаемое значение:
//  Соответствие - соответствие
Функция СоответствиеПолейДокументовОснованийИИнвентаризацииПродукции() Экспорт
	
	СоответствиеПолей = Новый Соответствие;
	
	СоответствиеПолей.Вставить("СписаниеЗапасов", Новый Соответствие);
	СоответствиеПолей["СписаниеЗапасов"].Вставить("ХозяйствующийСубъект", "Организация");
	СоответствиеПолей["СписаниеЗапасов"].Вставить("Предприятие", "СтруктурнаяЕдиница");
	
	СоответствиеПолей.Вставить("РаспределениеЗатрат", Новый Соответствие);
	СоответствиеПолей["РаспределениеЗатрат"].Вставить("ХозяйствующийСубъект", "Организация");
	СоответствиеПолей["РаспределениеЗатрат"].Вставить("Предприятие", "СтруктурнаяЕдиница");
	
	СоответствиеПолей.Вставить("ОприходованиеЗапасов", Новый Соответствие);
	СоответствиеПолей["ОприходованиеЗапасов"].Вставить("ХозяйствующийСубъект", "Организация");
	СоответствиеПолей["ОприходованиеЗапасов"].Вставить("Предприятие", "СтруктурнаяЕдиница");
	
	СоответствиеПолей.Вставить("ПересортицаЗапасов", Новый Соответствие);
	СоответствиеПолей["ПересортицаЗапасов"].Вставить("ХозяйствующийСубъект", "Организация");
	СоответствиеПолей["ПересортицаЗапасов"].Вставить("Предприятие", "СтруктурнаяЕдиница");
	
	Возврат СоответствиеПолей;
	
КонецФункции

Функция СвойстваЭлементовПроизводственнойТранзакцииПоДокументуОснованию(ДокументОснование) Экспорт
	
	Результат = Новый Структура("Видимость, Доступность, ТолькоПросмотр", Ложь, Истина, Истина);
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак необходимости заполнения реквизита 'ТорговыйОбъект' документа 'ПроизводственнаяОперацияВЕТИС'.
//
// Параметры:
//	ДокументОснование - ОпределяемыйТип.ТорговыйОбъектВЕТИС - Основание документа.
//
// Возвращаемое значение:
//	Булево, Истина - нужно заполнить реквизит 'ТорговыйОбъект' документа 'ПроизводственнаяОперацияВЕТИС'.
//
Функция ЗаполнитьТорговыйОбъектПоДокументуОснованию(ДокументОснование) Экспорт
	
	Если ЗначениеЗаполнено(ДокументОснование)
		И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СборкаЗапасов") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает структуру, содержащую поля кэшируемых значений.
// 
// Возвращаемое значение:
//  Структура, Неопределено - Состав структуры зависит от конфигурации.
//
Функция ПолучитьСтруктуруКэшируемыеЗначения() Экспорт
	
	КэшированныеЗначения = Новый Структура;
	КэшированныеЗначения.Вставить("КоэффициентыУпаковок",	Новый Соответствие);
	КэшированныеЗначения.Вставить("ОбъемУпаковок",			Новый Соответствие);
	КэшированныеЗначения.Вставить("ВесУпаковок",			Новый Соответствие);
	КэшированныеЗначения.Вставить("Штрихкоды",				Новый Соответствие);
	КэшированныеЗначения.Вставить("СвойстваНазначений",		Новый Соответствие);
	КэшированныеЗначения.Вставить("СвойстваСкладов",		Новый Соответствие);
	КэшированныеЗначения.Вставить("КонтролироватьЗаполнениеАналитикиРасходов",	Новый Соответствие);
	КэшированныеЗначения.Вставить("РаспределятьНДСпоСтатьеРасходов",			Новый Соответствие);
	КэшированныеЗначения.Вставить("КонтролироватьЗаполнениеАналитикиДоходов",	Новый Соответствие);
	КэшированныеЗначения.Вставить("ИспользоватьАналитикуАктивовПассивов",		Новый Соответствие);
	КэшированныеЗначения.Вставить("ИспользоватьРучныеСкидкиВПродажах",			Неопределено);
	КэшированныеЗначения.Вставить("ИспользоватьАвтоматическиеСкидкиВПродажах",	Неопределено);
	КэшированныеЗначения.Вставить("ИспользоватьРучныеСкидкиВЗакупках",			Неопределено);  
	КэшированныеЗначения.Вставить("ПравоРегистрацииШтрихкодовНоменклатурыДоступно",	Неопределено);
	КэшированныеЗначения.Вставить("ПринимаетсяКНУ", Новый Соответствие);
	КэшированныеЗначения.Вставить("ОбработанныеСтроки", Новый Массив);
	
	Возврат КэшированныеЗначения;
	
КонецФункции

// Возвращает параметры формы подбора товаров.
//
// Параметры:
//	Форма					- УправляемаяФорма			- Форма, в которой вызывается команда открытия формы подбора товаров.
//	ПараметрыУказанияСерий	- Структура, Неопределено	- Состав полей определен в функции 
//															НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//		* СкрыватьКнопкуЗапрашиватьКоличество		- Булево - Признак необходимости сокрытия кнопки указания количества.
//		* РежимПодбораБезКоличественныхПараметров	- Булево - Признак работы формы подбора товаров с выключенным режимом 
//																использования количественных параметров.
//		* Склад										- ОпределяемыйТип.ТорговыйОбъектВЕТИС - Склад, на котором осуществляется подбор товаров.
//		* ПараметрыУказанияСерий					- ПараметрыУказанияСерий - Состав полей определен в функции 
//																			НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыФормыПодбораТоваров(Форма, ПараметрыУказанияСерий) Экспорт
	
	ПараметрыФормыПодбора = Новый Структура;
	ПараметрыФормыПодбора.Вставить("РежимВыбора", Истина);
	
	Возврат ПараметрыФормыПодбора;
	
КонецФункции

// Возвращает соответствие полей документов-оснований и транспортных операций
// 
// Возвращаемое значение:
//  Соответствие - соответствие со свойствами:
//  * ИмяДокумента — Соответствие — ключом свойства является имя документа, например "РеализацияТоваровУслуг",
//  	а значением — соответствие со свойствами:
//  ** ГрузоотправительХозяйствующийСубъект — Строка — имя поля документа, которое соответствует контрагенту
//  	хозяйствуюшего субъекта грузоотправителя
//  ** ГрузоотправительПредприятие — Строка — имя поля документа, которое соответствует предприятию грузоотправителя
//  ** ГрузополучательХозяйствующийСубъект — Строка — имя поля документа, которое соответствует контрагенту
//  	хозяйствуюшего субъекта грузополучателя
//  ** ГрузополучательПредприятие — Строка — имя поля документа, которое соответствует предприяютию грузополучателя
//
Функция СоответствиеПолейДокументовОснованийИТранспортныхОпераций() Экспорт
	
	СоответствиеПолей = Новый Соответствие;
	
	СоответствиеПолей.Вставить("ПеремещениеЗапасов", Новый Соответствие);
	СоответствиеПолей["ПеремещениеЗапасов"].Вставить("ГрузоотправительХозяйствующийСубъект", "Организация");
	СоответствиеПолей["ПеремещениеЗапасов"].Вставить("ГрузоотправительПредприятие", "СтруктурнаяЕдиница");
	СоответствиеПолей["ПеремещениеЗапасов"].Вставить("ГрузополучательХозяйствующийСубъект", Неопределено);
	СоответствиеПолей["ПеремещениеЗапасов"].Вставить("ГрузополучательПредприятие", "СтруктурнаяЕдиницаПолучатель");
	
	СоответствиеПолей.Вставить("РасходнаяНакладная", Новый Соответствие);
	СоответствиеПолей["РасходнаяНакладная"].Вставить("ГрузоотправительХозяйствующийСубъект", "Организация");
	СоответствиеПолей["РасходнаяНакладная"].Вставить("ГрузоотправительПредприятие", "СтруктурнаяЕдиница");
	СоответствиеПолей["РасходнаяНакладная"].Вставить("ГрузополучательХозяйствующийСубъект", "Контрагент");
	СоответствиеПолей["РасходнаяНакладная"].Вставить("ГрузополучательПредприятие", "Контрагент");
	
	СоответствиеПолей.Вставить("ЗаказПокупателя", Новый Соответствие);
	СоответствиеПолей["ЗаказПокупателя"].Вставить("ГрузоотправительХозяйствующийСубъект", "Организация");
	СоответствиеПолей["ЗаказПокупателя"].Вставить("ГрузоотправительПредприятие", "СтруктурнаяЕдиницаПродажи");
	СоответствиеПолей["ЗаказПокупателя"].Вставить("ГрузополучательХозяйствующийСубъект", "Контрагент");
	СоответствиеПолей["ЗаказПокупателя"].Вставить("ГрузополучательПредприятие", "Контрагент");
	
	СоответствиеПолей.Вставить("ПриходнаяНакладная", Новый Соответствие);
	СоответствиеПолей["ПриходнаяНакладная"].Вставить("ГрузоотправительХозяйствующийСубъект", "Контрагент");
	СоответствиеПолей["ПриходнаяНакладная"].Вставить("ГрузоотправительПредприятие", "Контрагент");
	СоответствиеПолей["ПриходнаяНакладная"].Вставить("ГрузополучательХозяйствующийСубъект", "Организация");
	СоответствиеПолей["ПриходнаяНакладная"].Вставить("ГрузополучательПредприятие", "СтруктурнаяЕдиница");
	
	Возврат СоответствиеПолей;
	
КонецФункции

// Устанавливается свойство ОтображениеПредупрежденияПриРедактировании элемента формы.
//
Процедура ОтображениеПредупрежденияПриРедактировании(Элемент, Отображать) Экспорт
	
	Если Отображать Тогда
		Элемент.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
	Иначе
		Элемент.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Пересчитывает количество из базовой единицы измерения номенклатуры в единицу измерения ВетИС.
//
Функция ПересчитатьКоличествоЕдиницВЕТИС(Количество, Номенклатура, ЕдиницаИзмеренияВЕТИС, КэшированныеЗначения, ТекстОшибки = Неопределено) Экспорт

	НовоеКоличествоВЕТИС = Неопределено;
	
	ТекстОшибки = Неопределено;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		ДанныеЕдиницыИзмерения = ПолучитьКоэффициентЕдиницыИзмеренияВЕТИС(
									ЕдиницаИзмеренияВЕТИС,
									КэшированныеЗначения,
									Номенклатура);
		
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияВЕТИС) Тогда
			
			Если ДанныеЕдиницыИзмерения.КодОшибки <> 0 Тогда
				
				ТекстОшибки = ТекстОшибкиПересчетаЕдиницыИзмеренияВЕТИС(
										ДанныеЕдиницыИзмерения.КодОшибки,
										Номенклатура, 
										ЕдиницаИзмеренияВЕТИС, 
										ДанныеЕдиницыИзмерения.ТипИзмеряемойВеличины);
				
				Возврат Неопределено;
				
			КонецЕсли;
			
			НовоеКоличествоВЕТИС = Количество / ДанныеЕдиницыИзмерения.Коэффициент;
		
			Если ДанныеЕдиницыИзмерения.НужноОкруглятьКоличество Тогда
				
				НовоеКоличествоВЕТИС = Окр(НовоеКоличествоВЕТИС, 0, РежимОкругления.Окр15как20);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НовоеКоличествоВЕТИС;
	
КонецФункции

// Пересчитывает количество из единицы измерения ВетИС в базовую единицу измерения номенклатуры.
//
Функция ПересчитатьКоличествоЕдиниц(КоличествоВЕТИС, Номенклатура, ЕдиницаИзмеренияВЕТИС, КэшированныеЗначения, ТекстОшибки = Неопределено) Экспорт
	
	НовоеКоличество = Неопределено;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		ДанныеЕдиницыИзмерения = ПолучитьКоэффициентЕдиницыИзмеренияВЕТИС(ЕдиницаИзмеренияВЕТИС, КэшированныеЗначения, Номенклатура);
		
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияВЕТИС) Тогда
			
			Если ДанныеЕдиницыИзмерения.КодОшибки <> 0 Тогда
				
				ТекстОшибки = ТекстОшибкиПересчетаЕдиницыИзмеренияВЕТИС(
										ДанныеЕдиницыИзмерения.КодОшибки,
										Номенклатура,
										ЕдиницаИзмеренияВЕТИС,
										ДанныеЕдиницыИзмерения.ТипИзмеряемойВеличины,
										"ВЕТИС");
				
				Возврат Неопределено;
				
			КонецЕсли;
			
			НовоеКоличество = КоличествоВЕТИС * ДанныеЕдиницыИзмерения.Коэффициент;
			
			Если ДанныеЕдиницыИзмерения.НужноОкруглятьКоличество Тогда
				
				НовоеКоличество = Окр(НовоеКоличество, 0, РежимОкругления.Окр15как20);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НовоеКоличество;
	
КонецФункции

Функция ПараметрыОформленияСерииПоДаннымСтроки(ДанныеСтроки) Экспорт
	
	// Значения по умолчанию:
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ИмяЦветаТекста", "ЦветТекстаПоля");
	СтруктураВозврата.Вставить("ОтметкаНезаполненного", Ложь);
	СтруктураВозврата.Вставить("Текст", "");
	СтруктураВозврата.Вставить("ТолькоПросмотр", Ложь);
	СтруктураВозврата.Вставить("Видимость", Истина);
	
	СтруктураНоменклатуры = ИнтеграцияВЕТИСУНФВызовСервера.ПолучитьСтруктуруСлужебныхРеквизитовНоменклатуры(ДанныеСтроки.Номенклатура);
		
	Если СтруктураНоменклатуры.ИспользоватьПартии = Истина Тогда //СтруктураНоменклатуры.ИспользоватьПартии возвращает Неопределено, если номенклатура не заполнена
		СтруктураВозврата.ОтметкаНезаполненного = СтруктураНоменклатуры.ПроверятьЗаполнениеПартий;
	Иначе
		СтруктураВозврата.Видимость = Ложь;
	КонецЕсли; 
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПараметрыФормыПодбораТоваровСКоличеством() Экспорт
	
	ПараметрыФормыПодбора = Новый Структура;
	ПараметрыФормыПодбора.Вставить("РежимВыбора", Истина);
	
	Возврат ПараметрыФормыПодбора;
	
КонецФункции

#КонецОбласти

#Область СлужебнеПроцедурыИФункции

#КонецОбласти

#Область УНФ

Функция ПолучитьКоэффициентЕдиницыИзмеренияВЕТИС(ЕдиницаИзмеренияВЕТИС, КэшированныеЗначения, Номенклатура = Неопределено) Экспорт
	
	Результат = Новый Структура("КодОшибки, Коэффициент, ТипИзмеряемойВеличины, НужноОкруглятьКоличество");
	
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияВЕТИС) Тогда
		
		КлючКоэффициента = КлючКэшаУпаковки(Номенклатура, ЕдиницаИзмеренияВЕТИС);
		Кэш              = КэшированныеЗначения.КоэффициентыУпаковок[КлючКоэффициента];
		
		Если Кэш = Неопределено Тогда
			#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
				ЗначенияРеквизитов = ИнтеграцияВЕТИСПереопределяемый.ДанныеЕдиницыИзмеренияВЕТИС(
										ЕдиницаИзмеренияВЕТИС, 
										Номенклатура,
										КэшированныеЗначения);
				
				ЗаполнитьЗначенияСвойств(Результат, ЗначенияРеквизитов);
			#Иначе
				ТекстИсключения = НСтр("ru = 'Попытка получения коэффициента единицы измерения ВетИС на клиенте.'");
				ВызватьИсключение ТекстИсключения;
			#КонецЕсли
		Иначе
			Результат = Кэш;
		КонецЕсли;
	Иначе
		Результат.КодОшибки                = 0;
		Результат.Коэффициент              = 1;
		Результат.ТипИзмеряемойВеличины    = Неопределено;
		Результат.НужноОкруглятьКоличество = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КлючКэшаУпаковки(Номенклатура, Упаковка) Экспорт
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		КлючНоменклатура = Строка(Номенклатура.УникальныйИдентификатор());
	Иначе
		КлючНоменклатура = "ПустоеЗначение";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Упаковка) Тогда
		КлючУпаковка = Строка(Упаковка.УникальныйИдентификатор());
	Иначе
		КлючУпаковка = "ПустоеЗначение";
	КонецЕсли;
	
	Возврат КлючНоменклатура + КлючУпаковка;
	
КонецФункции

Функция ТекстОшибкиПересчетаЕдиницыИзмеренияВЕТИС(КодОшибки, Номенклатура, ЕдиницаИзмеренияВЕТИС, ТипИзмеряемойВеличины, СуффиксКоличества = "")
	
	ПересчетВЕТИС        = СокрЛП(СуффиксКоличества) = "ВЕТИС";
	ТекстЕдиницыХранения = ?(ПересчетВЕТИС, НСтр("ru = 'в единицу хранения'"), НСтр("ru = 'количества (ВетИС)'"));
	
	ШаблонСообщенияНеЗаполненаЕдиницаИзмерения    = НСтр("ru = 'Не удалось выполнить пересчет %ЕдиницаХранения%, т.к. не заполнено поле ""Единица измерения"" в карточке единицы измерения ВетИС ""%ЕдиницаИзмеренияВЕТИС%""'");
	ШаблонСообщенияНеУказанТипИзмеряемойВеличины  = НСтр("ru = 'Не удалось выполнить пересчет %ЕдиницаХранения%, т.к. в карточке номенклатуры ""%Номенклатура%"" выключена возможность указания количества в единицах измерения %ТипИзмеряемойВеличины%'");
	ШаблонСообщенияНеСопоставленыЕдиницыИзмерения = НСтр("ru = 'Не удалось выполнить пересчет %ЕдиницаХранения%. Приведите в соответствие единицу измерения в карточке единицы измерения ВетИС ""%ЕдиницаИзмеренияВЕТИС%"" с единицей хранения номенклатуры ""%Номенклатура%"" или укажите %ТипКоличества% вручную'");
	
	Если КодОшибки = 1 Тогда
		ТекстСообщения = ШаблонСообщенияНеЗаполненаЕдиницаИзмерения;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаХранения%",       ТекстЕдиницыХранения);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмеренияВЕТИС%", Строка(ЕдиницаИзмеренияВЕТИС));
	ИначеЕсли КодОшибки = 2 Тогда
		
		ИмяТипаИзмеряемойВеличины = "";
		//Если ТипИзмеряемойВеличины = ПредопределенноеЗначение("Перечисление.ТипыИзмеряемыхВеличин.Вес") Тогда
		//	ИмяТипаИзмеряемойВеличины = НСтр("ru = 'веса'");
		//ИначеЕсли ТипИзмеряемойВеличины = ПредопределенноеЗначение("Перечисление.ТипыИзмеряемыхВеличин.Объем") Тогда
		//	ИмяТипаИзмеряемойВеличины = НСтр("ru = 'объема'");
		//ИначеЕсли ТипИзмеряемойВеличины = ПредопределенноеЗначение("Перечисление.ТипыИзмеряемыхВеличин.Длина") Тогда
		//	ИмяТипаИзмеряемойВеличины = НСтр("ru = 'длины'");
		//КонецЕсли;
		
		ТекстСообщения = ШаблонСообщенияНеУказанТипИзмеряемойВеличины;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаХранения%",       ТекстЕдиницыХранения);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номенклатура%",          Строка(Номенклатура));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТипИзмеряемойВеличины%", ИмяТипаИзмеряемойВеличины);
		
	ИначеЕсли КодОшибки = 3 Тогда
		ТекстТипаКоличества = ?(ПересчетВЕТИС, НСтр("ru = 'количество'"), НСтр("ru = 'количество (ВетИС)'"));
		
		ТекстСообщения = ШаблонСообщенияНеСопоставленыЕдиницыИзмерения;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаХранения%",       ТекстЕдиницыХранения);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмеренияВЕТИС%", Строка(ЕдиницаИзмеренияВЕТИС));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номенклатура%",          Строка(Номенклатура));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТипКоличества%",          Строка(Номенклатура));
	Иначе
		ТекстСообщения = "";
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

#КонецОбласти

