

Функция Link42ServicePOST(Запрос)

	
	ВремяНачалаФормированияОтвета = ТекущаяУниверсальнаяДатаВМиллисекундах(); 

	СтруктураОтвета = Новый Структура;
	СтруктураТаймингов = Новый Структура;
	СтруктураТаймингов.Вставить("MethodStart ", ВремяНачалаФормированияОтвета);
	
	ID = Запрос.Заголовки.Получить("ID");         

	ИмяМетода = Запрос.ПараметрыURL["MethodName"];
	
	КодОтвета = 200;
	СтруктураОтвета = Новый Структура;      
	Ответ = Новый HTTPСервисОтвет(КодОтвета);
	
	ФормированиеОтвета = Ложь;
	//ЗаписьЖурналаРегистрации("Link42ServicePOST", УровеньЖурналаРегистрации.Ошибка,,,ИмяМетода); 
	
	Попытка
		Если ИмяМетода = "ExecuteQuery" Тогда 
			Попытка				
				Документ = EfsolУниверсальныеФункцииСервер.ПостроитьDomДокумент(Запрос.ПолучитьТелоКакСтроку());
				СписокЭлементов = Документ.ПолучитьЭлементыПоИмени("Query");		
				Если Не СписокЭлементов.Количество() = 0 Тогда 
					Элемент = СписокЭлементов[0];
					Строка = EfsolУниверсальныеФункцииСервер.Строка64ВСтроку(Элемент.ТекстовоеСодержимое);
					Результат = EfsolУниверсальныеФункцииСервер.ВыполнитьЗапрос(Строка); 
					Ответ.УстановитьТелоИзСтроки(EfsolУниверсальныеФункцииСервер.ПреоброзоватьРезультат(Результат));		
				Иначе
					СтруктураОтвета.Вставить("Result", "");
					//Ответ.УстановитьТелоИзСтроки(ПустойОтвет());
					ФормированиеОтвета = Истина;
				КонецЕсли; 			
			Исключение		
				//Ответ.УстановитьТелоИзСтроки(ПустойОтвет());
				ФормированиеОтвета = Истина;
			КонецПопытки;	
			
		ИначеЕсли ИмяМетода = "ExecuteCommand" Тогда 
			Попытка
				Документ = EfsolУниверсальныеФункцииСервер.ПостроитьDomДокумент(Запрос.ПолучитьТелоКакСтроку());			 
				СписокЭлементов = Документ.ПолучитьЭлементыПоИмени("ScriptCommand");		
				Если Не СписокЭлементов.Количество() = 0 Тогда 
					Элемент = СписокЭлементов[0];	
					Строка = EfsolУниверсальныеФункцииСервер.Строка64ВСтроку(Элемент.ТекстовоеСодержимое);
					Результат = EfsolУниверсальныеФункцииСервер.ВыполнитьКоманду(Строка);
					Ответ.УстановитьТелоИзСтроки(EfsolУниверсальныеФункцииСервер.ПреоброзоватьРезультат(Результат));		
				Иначе
					СтруктураОтвета.Вставить("Result", "");
					//Ответ.УстановитьТелоИзСтроки(ПустойОтвет());
					ФормированиеОтвета = Истина;
				КонецЕсли; 			
			Исключение	
				ТекстОшибки = ОписаниеОшибки();
				СтруктураОтвета.Вставить("Result", "");
				СтруктураОтвета.Вставить("DebugInfo", ТекстОшибки);
				ФормированиеОтвета = Истина;
				//Ответ.УстановитьТелоИзСтроки(ПустойОтвет() + ОписаниеОшибки());
			КонецПопытки;	
						
		ИначеЕсли ИмяМетода = "ScheduledJob" Тогда 
			Попытка
				УстановитьПривилегированныйРежим(Истина);
				СтруктураПараметров = EfsolУниверсальныеФункцииСервер.ПарсерXML(Запрос.ПолучитьТелоКакСтроку());
				ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Число(СтруктураПараметров.Zone));
				РаботаВМоделиСервиса.УстановитьИспользованиеПредопределенногоРегламентногоЗадания(Метаданные.РегламентныеЗадания.EFSOL_Автозагрузка, Булево(СтруктураПараметров.Use));
	 		
			Исключение		
				ТекстОшибки = ОписаниеОшибки();
				СтруктураОтвета.Вставить("Result", "");
				СтруктураОтвета.Вставить("DebugInfo", ТекстОшибки);
				ФормированиеОтвета = Истина;
				//Ответ.УстановитьТелоИзСтроки(ПустойОтвет() + ОписаниеОшибки());

			КонецПопытки;	
					
		ИначеЕсли ИмяМетода = "TestPost" Тогда 
			
			Ответ.УстановитьТелоИзСтроки("It works");
						
		ИначеЕсли ИмяМетода = "AddApplicationUser" Тогда 
			Результат = Истина; 
			СтруктураПараметров = EfsolУниверсальныеФункцииСервер.ПарсерXML(Запрос.ПолучитьТелоКакСтроку());
			Результат = ES_Delans.ДобавитьПользователяПриложения(СтруктураПараметров);
			Если Результат = Ложь Тогда
				КодОтвета = 415;
				СтруктураОтвета.Вставить("Code", Строка(КодОтвета));
				СтруктураОтвета.Вставить("Description", "Пользователь не создан в Деланс БП");
				СтруктураОтвета.Вставить("DebugInfo", "User not add");
			КонецЕсли;
			ФормированиеОтвета = Истина;

		ИначеЕсли ИмяМетода = "DeleteApplicationUser" Тогда             
			
			СтруктураПараметров = EfsolУниверсальныеФункцииСервер.ПарсерXML(Запрос.ПолучитьТелоКакСтроку());
			Результат = ES_Delans.УдалитьПользователяПриложения(СтруктураПараметров);
			Если Результат = Ложь Тогда
				КодОтвета = 404;
				СтруктураОтвета.Вставить("Code", Строка(КодОтвета));
				СтруктураОтвета.Вставить("Description", "Пользователь не найден");
				СтруктураОтвета.Вставить("DebugInfo", "User not found");
			КонецЕсли;
			ФормированиеОтвета = Истина;
			
		ИначеЕсли ИмяМетода = "SaveModulbankToken" Тогда 
			
			ЗаписьЖурналаРегистрации("СохранитьТокенМодульбанк", УровеньЖурналаРегистрации.Ошибка,,,"1"); 

			СтруктураПараметров = EfsolУниверсальныеФункцииСервер.ПарсерXML(Запрос.ПолучитьТелоКакСтроку());
			Результат = ES_Delans.СохранитьТокенМодульбанк(СтруктураПараметров);
			Если НЕ Результат = Истина Тогда
				КодОтвета = 415;
				СтруктураОтвета.Вставить("Code", Строка(КодОтвета));
				СтруктураОтвета.Вставить("Description", "Ошибка сохранения токена в базе");
				СтруктураОтвета.Вставить("DebugInfo", Результат);
			КонецЕсли;

			ФормированиеОтвета = Истина;

		ИначеЕсли ИмяМетода = "ApplicationUserAvailability" Тогда 
			
			СтруктураПараметров = EfsolУниверсальныеФункцииСервер.ПарсерXML(Запрос.ПолучитьТелоКакСтроку());
			Результат = ES_Delans.УстановитьДоступностьПользователяПриложения(СтруктураПараметров);
			Если Результат = Ложь Тогда
				КодОтвета = 404;
				СтруктураОтвета.Вставить("Code", Строка(КодОтвета));
				СтруктураОтвета.Вставить("Description", "Пользователь не найден");
				СтруктураОтвета.Вставить("DebugInfo", "User not found");
			КонецЕсли;
			ФормированиеОтвета = Истина;
			
		ИначеЕсли ИмяМетода = "AttachDataRegion" Тогда
			
			ТекстXML = EfsolУниверсальныеФункцииСервер.ПарсерXML(Запрос.ПолучитьТелоКакСтроку());
			ES_Delans.ПрикрепитьОбластьДанных(ТекстXML);
			ФормированиеОтвета = Истина;
			
		ИначеЕсли  ИмяМетода = "DownloadDataArea" Тогда
			
			СтруктураПараметров = EfsolУниверсальныеФункцииСервер.ПарсерXML(Запрос.ПолучитьТелоКакСтроку());
			
			ПараметрыЗадания = Новый Массив;
			ПараметрыЗадания.Добавить(Число(СтруктураПараметров.Zone));
			ПараметрыЗадания.Добавить(СтруктураПараметров.FileName);
		
			Задание = ФоновыеЗадания.Выполнить("ES_Delans.ЗагрузитьОбластьДанныхИзАрхива", ПараметрыЗадания, , НСтр("ru = 'Загрузка области данных'"));
			
			СтруктураОтвета.Вставить("Result", "");
			ФормированиеОтвета = Истина;

		ИначеЕсли  ИмяМетода = "UploadingDataArea" Тогда
			                                        
			СтруктураПараметров = EfsolУниверсальныеФункцииСервер.ПарсерXML(Запрос.ПолучитьТелоКакСтроку());
			
			ПараметрыЗадания = Новый Массив;
			ПараметрыЗадания.Добавить(Число(СтруктураПараметров.Zone));
			ПараметрыЗадания.Добавить(СтруктураПараметров.Path);
			Задание = ФоновыеЗадания.Выполнить("ES_Delans.ВыгрузитьОбластьДанныхВАрхив", ПараметрыЗадания, , НСтр("ru = 'Выгрузка области данных'"));
			
			СтруктураОтвета.Вставить("Result", "");
	        ФормированиеОтвета = Истина;
			
		ИначеЕсли ИмяМетода = "AddAccountIDForArea" Тогда 
			 
			СтруктураПараметров = EfsolУниверсальныеФункцииСервер.ПарсерXML(Запрос.ПолучитьТелоКакСтроку());
			ES_Delans.ДобавитьAccountIDВОбласть(СтруктураПараметров);
			ФормированиеОтвета = Истина;

		Иначе	             
			КодОтвета = 404;
			СтруктураОтвета.Вставить("Code", Строка(КодОтвета));
			СтруктураОтвета.Вставить("Description", "Метод объекта не найден");
			СтруктураОтвета.Вставить("DebugInfo", "Method not found");
			ФормированиеОтвета = Истина;
		КонецЕсли;	
	Исключение	
		КодОтвета = 400;
		СтруктураОтвета.Вставить("Code", Строка(КодОтвета));
		СтруктураОтвета.Вставить("Description", "Ошибка при выполнении метода");
		СтруктураОтвета.Вставить("DebugInfo", ОписаниеОшибки());
		ФормированиеОтвета = Истина;
	КонецПопытки;
	
	Попытка
		
		Если ФормированиеОтвета Тогда 			
			ВремяНачалаСформироватьXML = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ТекстXML =  EfsolУниверсальныеФункцииСервер.СформироватьXML(СтруктураОтвета, КодОтвета);	
			СтруктураТаймингов.Вставить("CreateXML", (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачалаСформироватьXML));
			Ответ =  EfsolУниверсальныеФункцииСервер.СформироватьHTTPСервисОтвет(ТекстXML, КодОтвета, СтруктураТаймингов, ID);
		КонецЕсли;
		
		СтруктураТаймингов.Вставить("Total", (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачалаФормированияОтвета));
		Если  СтруктураТаймингов.Total > (Константы.EFSOL_НормаВремениВыполненияЗапроса.Получить()*1000) Тогда    
			ОтветОшибка = ?(КодОтвета = 200, "Код ответа: 200", "Код ответа: " + КодОтвета + "_DebugInfo: " + СтруктураОтвета.DebugInfo); 
			ES_Delans.ОтправитьСообщениеООшибкеРаботыСервиса(ID, "DelansBP", ИмяМетода, "<P>Время формирования ответа: "  + Формат(СтруктураТаймингов.Total , "ЧГ=0") + "</P>",  СтруктураТаймингов, , , ОтветОшибка);
		КонецЕсли;
		
	Исключение
		
		ЗаписьЖурналаРегистрации("Link42ServiceGET_ошибка при отправке",,,ОписаниеОшибки());
		
	КонецПопытки;

	Возврат Ответ;
	
КонецФункции

Функция Link42ServiceGET(Запрос)
	
	Попытка
		ВремяНачалаФормированияОтвета = ТекущаяУниверсальнаяДатаВМиллисекундах(); 
		
		СтруктураОтвета = Новый Структура;
		СтруктураТаймингов = Новый Структура;
		СтруктураТаймингов.Вставить("MethodStart ", ВремяНачалаФормированияОтвета);
		
		ID = Запрос.Заголовки.Получить("ID");
		
		ФормированиеОтвета = Ложь;
		
		//ЗаписьЖурналаРегистрации("начало метода гет Link42Service");

		ИмяМетода = Запрос.ПараметрыURL["MethodName"];	
		Если ИмяМетода = "GetOrgListForm" Тогда 
			Ответ = Новый HTTPСервисОтвет(200);	
			Ответ.Заголовки.Вставить("Content-Type","text/html; charset=UTF-8");	
			тОтвет = EfsolУниверсальныеФункцииСервер.ПолучитьОтвет();		
			Ответ.УстановитьТелоИзСтроки("<html><head><title></title>
			|<link href='https://delans.42clouds.com/api_v2/Content/bootstrap.css' rel='stylesheet'>
			|<link href='https://delans.42clouds.com/api_v2/Content/bubbles.css?v=17' rel='stylesheet'>
			|</head><body><div class='container'>"+тОтвет+"</div></body></html>");		
			
		ИначеЕсли ИмяМетода = "CheckUser" Тогда 
			
			Name = Запрос.ПараметрыЗапроса.Получить("Name");
			Попытка
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Name);
				Результат = НЕ ПользовательИБ=Неопределено;
			Исключение 
				Результат = Истина;
			КонецПопытки;
			Ответ = Новый HTTPСервисОтвет(200);	
			Ответ.Заголовки.Вставить("Content-Type","text/html; charset=UTF-8");	
			тОтвет =XMLСтрока(Результат);		
			Ответ.УстановитьТелоИзСтроки(тОтвет);
			
		ИначеЕсли ИмяМетода = "Test" Тогда 
			
			Ответ = Новый HTTPСервисОтвет(200);	
			Ответ.Заголовки.Вставить("Content-Type","text/html; charset=UTF-8");
			Ответ.УстановитьТелоИзСтроки("It works");
			
		Иначе 	
	     	КодОтвета = 404;
			СтруктураОтвета.Вставить("Code", Строка(КодОтвета));
			СтруктураОтвета.Вставить("Description", "Метод объекта не найден");
			СтруктураОтвета.Вставить("DebugInfo", "Method not found");
			ФормированиеОтвета = Истина;
		КонецЕсли;		
	Исключение
		КодОтвета = 400;
		СтруктураОтвета.Вставить("Code", Строка(КодОтвета));
		СтруктураОтвета.Вставить("Description", "Ошибка при выполнении метода");
		СтруктураОтвета.Вставить("DebugInfo", ОписаниеОшибки());
		ФормированиеОтвета = Истина;
	КонецПопытки;	
	
	Попытка
		
		Если ФормированиеОтвета Тогда 			
			ВремяНачалаСформироватьXML = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ТекстXML =  EfsolУниверсальныеФункцииСервер.СформироватьXML(СтруктураОтвета, КодОтвета);	
			СтруктураТаймингов.Вставить("CreateXML", (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачалаСформироватьXML));
			Ответ =  EfsolУниверсальныеФункцииСервер.СформироватьHTTPСервисОтвет(ТекстXML, КодОтвета, СтруктураТаймингов, ID);
		КонецЕсли;
		
		СтруктураТаймингов.Вставить("Total", (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачалаФормированияОтвета));
		Если  СтруктураТаймингов.Total > (Константы.EFSOL_НормаВремениВыполненияЗапроса.Получить()*1000) Тогда
			ОтветОшибка = ?(КодОтвета = 200, "Код ответа: 200", "Код ответа: " + КодОтвета + "_DebugInfo: " + СтруктураОтвета.DebugInfo); 
			ES_Delans.ОтправитьСообщениеООшибкеРаботыСервиса(ID, "DelansBP", ИмяМетода, "<P>Время формирования ответа: "  + Формат(СтруктураТаймингов.Total , "ЧГ=0") + "</P>",  СтруктураТаймингов, , , ОтветОшибка);
		КонецЕсли;
		
	Исключение
		
		ЗаписьЖурналаРегистрации("Link42ServiceGET_ошибка при отправке",,,ОписаниеОшибки());
		
	КонецПопытки;
	
	Возврат Ответ;

КонецФункции

// Функция возвращает типовую xml с ошибклй "метод не найден"
// метод Любой для шаблона "/*"
Функция MethodNotFoundЛюбой(Запрос)
                                     
	СтруктураОтвета = Новый Структура;
	СтруктураТаймингов = Новый Структура;
	ВремяНачалаФормированияОтвета = ТекущаяУниверсальнаяДатаВМиллисекундах(); 
	ID = "";          
	
	КодОтвета = 404;
	СтруктураОтвета.Вставить("Code", Строка(КодОтвета));
	СтруктураОтвета.Вставить("Description", "Метод не найден");
	СтруктураОтвета.Вставить("DebugInfo", "Method not found");
	
	СтруктураТаймингов.Вставить("MethodStart ", ВремяНачалаФормированияОтвета);
	
	ВремяНачалаСформироватьXML = ТекущаяУниверсальнаяДатаВМиллисекундах();
	КоличествоЭлементовXML = 0;
	ТекстXML = EfsolУниверсальныеФункцииСервер.СформироватьXML(СтруктураОтвета, КодОтвета, КоличествоЭлементовXML);
	СтруктураТаймингов.Вставить("CreateXML", (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачалаСформироватьXML));
	
	Ответ = EfsolУниверсальныеФункцииСервер.СформироватьHTTPСервисОтвет(ТекстXML, КодОтвета, СтруктураТаймингов, ID);
	СтруктураТаймингов.Вставить("Total", (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачалаФормированияОтвета));

	Если  СтруктураТаймингов.Total > (Константы.EFSOL_НормаВремениВыполненияЗапроса.Получить()*1000) Тогда
		ОтветОшибка = ?(КодОтвета = 200, "Код ответа: 200", "Код ответа: " + КодОтвета + "_DebugInfo: " + СтруктураОтвета.DebugInfo); 
		ES_Delans.ОтправитьСообщениеООшибкеРаботыСервиса(ID, "SauriBP", "MethodNotFound", "<P>Время формирования ответа: "  + Формат(СтруктураТаймингов.Total , "ЧГ=0") + "</P>",  СтруктураТаймингов, , , ОтветОшибка);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

