
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформлениеФормы();
	
	УзелОбменаЭтаИБ = ПроверитьУзелОбменаЭтаИБСервер();
	
	Если УзелОбменаЭтаИБ Тогда
		Возврат;
	КонецЕсли;
	
	РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	
	ВыполнитьДействияПриСозданииНаСервере();
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Задание = ОбменССайтомРегламентныеЗадания.НайтиЗадание(Объект.ИдентификаторРегламентногоЗадания);
	
	Если Не Задание = Неопределено Тогда
		
		Если ТипЗнч(Задание.Расписание) = Тип("РасписаниеРегламентногоЗадания") Тогда
			РасписаниеРегламентногоЗаданияОбмена = Задание.Расписание;
		ИначеЕсли ТипЗнч(Задание.Расписание) = Тип("ХранилищеЗначения") Тогда
			РасписаниеРегламентногоЗаданияОбмена = Задание.Расписание.Получить();
		Иначе
			РасписаниеРегламентногоЗаданияОбмена = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Задание = ОбменССайтомРегламентныеЗадания.НайтиЗадание(Объект.ИдентификаторРегламентногоЗаданияПечатьЧеков);
	
	Если Не Задание = Неопределено Тогда
		
		Если ТипЗнч(Задание.Расписание) = Тип("РасписаниеРегламентногоЗадания") Тогда
			РасписаниеРегламентногоЗаданияФормированиеЧеков = Задание.Расписание;
		ИначеЕсли ТипЗнч(Задание.Расписание) = Тип("ХранилищеЗначения") Тогда
			РасписаниеРегламентногоЗаданияФормированиеЧеков = Задание.Расписание.Получить();
		Иначе
			РасписаниеРегламентногоЗаданияФормированиеЧеков = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьКассыККМСоответствийОплат(Объект.СоответствиеВидовОплат);
	
КонецПроцедуры

Процедура ОбновитьКассыККМСоответствийОплат(СоответствиеВидовОплат=Неопределено)

	//Для каждого стр Из Объект.СоответствиеВидовОплат Цикл
	//	Если ЗначениеЗаполнено(стр.Терминал) Тогда
	//		стр.КассаККМ = стр.Терминал.Касса;
	//	КонецЕсли;
	//КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписьюНаСервере.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//Обмен с сайтом по расписанию
	Если ТекущийОбъект.ИспользоватьРегламентныеЗадания
		И (РасписаниеРегламентногоЗаданияОбмена = Неопределено
		ИЛИ (РазделениеВключено И Не РасписаниеРегламентногоЗаданияОбмена.ПериодПовтораВТечениеДня > 0)) Тогда
		
		ТекущийОбъект.ИспользоватьРегламентныеЗадания = Ложь;
	КонецЕсли;
	
	Задание = ОбменССайтомРегламентныеЗадания.НайтиЗадание(ТекущийОбъект.ИдентификаторРегламентногоЗадания);
	Если ТекущийОбъект.ИспользоватьРегламентныеЗадания Тогда
		
		Если Задание = Неопределено Тогда
			ИдентификаторЗадания = ОбменССайтомРегламентныеЗадания.СоздатьНовоеЗадание(ТекущийОбъект.Код, ТекущийОбъект.Наименование, РасписаниеРегламентногоЗаданияОбмена);
			ТекущийОбъект.ИдентификаторРегламентногоЗадания = ИдентификаторЗадания;
		Иначе
			ОбменССайтомРегламентныеЗадания.УстановитьПараметрыЗадания(Задание, Истина, ТекущийОбъект.Код, ТекущийОбъект.Наименование, РасписаниеРегламентногоЗаданияОбмена);
		КонецЕсли;
		
	Иначе
		
		Если Задание <> Неопределено Тогда
			ОбменССайтомРегламентныеЗадания.УдалитьЗадание(Задание);
		КонецЕсли;
		ТекущийОбъект.ИдентификаторРегламентногоЗадания = Неопределено;
		
	КонецЕсли;
	
	Задание = ОбменССайтомРегламентныеЗадания.НайтиЗадание(ТекущийОбъект.ИдентификаторРегламентногоЗаданияПечатьЧеков);
	Если ТекущийОбъект.ОнлайнОплаты Тогда
		
		Если Задание = Неопределено Тогда
			ИдентификаторЗадания = ОбменССайтомРегламентныеЗадания.СоздатьНовоеЗадание(ТекущийОбъект.Код, ТекущийОбъект.Наименование+"-онлайн чеки", РасписаниеРегламентногоЗаданияФормированиеЧеков);
			ТекущийОбъект.ИдентификаторРегламентногоЗаданияПечатьЧеков = ИдентификаторЗадания;
		Иначе
			ОбменССайтомРегламентныеЗадания.УстановитьПараметрыЗадания(Задание, Истина, ТекущийОбъект.Код, ТекущийОбъект.Наименование+"-онлайн чеки", РасписаниеРегламентногоЗаданияФормированиеЧеков);
		КонецЕсли;
		
	Иначе
		
		Если Задание <> Неопределено Тогда
			ОбменССайтомРегламентныеЗадания.УдалитьЗадание(Задание);
		КонецЕсли;
		ТекущийОбъект.ИдентификаторРегламентногоЗаданияПечатьЧеков = Неопределено;
		
	КонецЕсли;
	
	// Сохранение видов цен.
	ВидыЦен = ТекущийОбъект.ВидыЦен;
	ВидыЦен.Очистить();
	
	Для каждого ЭлементСЗ Из СписокВидовЦен Цикл 
		
		НоваяСтрока = ВидыЦен.Добавить();
		НоваяСтрока.ВидЦен = ЭлементСЗ.Значение;
		
	КонецЦикла;
	
	// Таблица каталогов.
	
	ТаблицаКаталоговТЗ = ДанныеФормыВЗначение(ТаблицаКаталогов, Тип("ТаблицаЗначений"));
	ТаблицаКаталоговТЗ.Колонки.Добавить("ХранилищеНастроекКомпоновки", Новый ОписаниеТипов("ХранилищеЗначения"));
	
	Для Каждого СтрокаТаблицыКаталогов Из ТаблицаКаталоговТЗ Цикл
		
		Если НЕ ЭтоАдресВременногоХранилища(СтрокаТаблицыКаталогов.АдресНастроекКомпоновки) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НастройкиКомпоновки = ПолучитьИзВременногоХранилища(СтрокаТаблицыКаталогов.АдресНастроекКомпоновки);
		СтрокаТаблицыКаталогов.ХранилищеНастроекКомпоновки = Новый ХранилищеЗначения(НастройкиКомпоновки);
		
	КонецЦикла;
	
	ТаблицаКаталоговТЗ.Колонки.Удалить("АдресНастроекКомпоновки");
	
	ТекущийОбъект.СохраненнаяТаблицаКаталогов = Новый ХранилищеЗначения(ТаблицаКаталоговТЗ);
	ТекущийОбъект.ВыполнятьПолнуюВыгрузкуПринудительно = ТекущийОбъект.ЭтоНовый();
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбменССайтом.ОбновитьПараметрыСеанса();
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если УзелОбменаЭтаИБ Тогда
		
		ОчиститьСообщения();
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Узел соответствует этой информационной базе и не может использоваться в обмене с сайтом. Используйте другой узел обмена или создайте новый.'"));
			
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	Элементы.НастроитьРасписаниеОбмена.Заголовок = УстановитьНадписьРасписания(РасписаниеРегламентногоЗаданияОбмена, "ИнтервалОбменаССайтом");
	Элементы.НастроитьРасписаниеЗагрузкиОплат.Заголовок = УстановитьНадписьРасписания(РасписаниеРегламентногоЗаданияФормированиеЧеков, "ИнтервалЗагрузкиОплатССайта");
	
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ОбменТоварами И ТаблицаКаталогов.Количество() = 0 Тогда
		
		Отказ = Истина;
		
		Сообщение = НСтр("ru = 'Таблица каталогов не заполнена!'");
		Поле = "ТаблицаКаталогов";
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(Сообщение, Объект.Ссылка, Поле);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ВыполнитьДействияПриСозданииНаСервере()
	
	Если ПолучитьФункциональнуюОпцию("РаботаВЛокальномРежиме") Тогда
		Элементы.ГруппаВыгружатьНаСайтГоризонтально.Видимость = Истина;
	Иначе
		Элементы.ГруппаВыгружатьНаСайтГоризонтально.Видимость = Ложь;
		Если Не Объект.ВыгружатьНаСайт Тогда
			Объект.ВыгружатьНаСайт = Истина;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ПарольИзХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.Ссылка, "Пароль");
		УстановитьПривилегированныйРежим(Ложь);
		Пароль = ?(ЗначениеЗаполнено(ПарольИзХранилища), ЭтотОбъект.УникальныйИдентификатор, "");
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ДатаНачалаВыгрузкиЗаказов = НачалоМесяца(ТекущаяДата());
		Объект.ВидЗаказа = Справочники.ВидыЗаказовПокупателей.Основной;
		Объект.СостояниеЗаказа = ПолучитьСостояниеЗаказаПокупателя(Объект.ВидЗаказа);
		Объект.СпособУстановкиДатыОтгрузкиЗаказаКоличествоДней = 1;
	КонецЕсли;
	
	СпособУстановкиДатыОтгрузкиЗаказаПриИзмененииНаСервере();
	
	ЗаполнитьСписокВидовЦенСервер();
	
	ЗаполнитьТаблицуКаталоговСервер();
	
	УстановитьПараметрыТаблицыКаталоговСервер();
	
	УстановитьТипЗначенийСпискаГруппТаблицыКаталоговСервер();
	
	Если ЗначениеЗаполнено(Объект.НастройкиПоискаКонтрагентов) Тогда
		НастройкиПоискаКонтрагентовПредставление = ПоискКонтрагентовПредставление(ОбменССайтом.ЧтениеJSONВСтруктуру(Объект.НастройкиПоискаКонтрагентов));
	КонецЕсли;
	
	НастройкиВыгрузкиРеквизитовПредставление = НастройкиВыгрузкиРеквизитовПредставление(Объект.НастройкиВыгрузкиРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьИДоступностьЭлементов()
	
	Элементы.СтраницаВыгрузкаТоваров.Видимость = Объект.ОбменТоварами;
	Элементы.СтраницаОбменЗаказами.Видимость = Объект.ОбменЗаказами;
	Элементы.СтраницаПечатьОнлайнЧеков.Видимость = Объект.ОбменЗаказами И Объект.ОнлайнОплаты;
	
	УстановитьДоступностьПолейОбменЗаказами();	
	
	Если Не РазделениеВключено Тогда
		Элементы.ГруппаАвтообменСтраницы.ТекущаяСтраница = Элементы.ГруппаАвтообменСтраница1;
		Элементы.НастроитьРасписаниеОбмена.Доступность = Объект.ИспользоватьРегламентныеЗадания;
	Иначе
		Элементы.ГруппаАвтообменСтраницы.ТекущаяСтраница = Элементы.ГруппаАвтообменСтраница2;
		Элементы.ИнтервалОбменаССайтом.Доступность = Объект.ИспользоватьРегламентныеЗадания;
	КонецЕсли;
	
	Если Объект.СпособИдентификацииКонтрагентов = ПредопределенноеЗначение("Перечисление.СпособыИдентификацииКонтрагентов.ПредопределенноеЗначение") Тогда
		Элементы.КонтрагентДляПодстановкиВЗаказы.Видимость = Истина;
		Элементы.ГруппаДляНовыхКонтрагентов.Доступность = Ложь;
	Иначе
		Элементы.КонтрагентДляПодстановкиВЗаказы.Видимость = Ложь;
		Элементы.ГруппаДляНовыхКонтрагентов.Доступность = Истина;
	КонецЕсли;
	
	Если Объект.ВыгружатьНаСайт Тогда
		Элементы.СтраницыТипОбмена.ТекущаяСтраница = Элементы.СтраницаВыгрузкаНаСайт;
		ПереключательНазначениеОбмена = 0;
	Иначе
		Элементы.СтраницыТипОбмена.ТекущаяСтраница = Элементы.СтраницаВыгрузкаВКаталог;
		ПереключательНазначениеОбмена = 1;
	КонецЕсли;
	
	Если Объект.ПротоколОбменаCMS = ПредопределенноеЗначение("Перечисление.ПротоколыОбменаCMS.UMI") Тогда
		Элементы.ВыгружатьОстаткиПоСкладам.Видимость = Ложь;
	Иначе
		Элементы.ВыгружатьОстаткиПоСкладам.Видимость = Истина;
	КонецЕсли;
	
	Если Объект.ПротоколОбменаCMS = ПредопределенноеЗначение("Перечисление.ПротоколыОбменаCMS.Битрикс") Тогда
		Элементы.СоответствиеВидовОплатЗагрузитьВидыОплатССайта.Видимость = Истина;
		Элементы.СоответствиеСтатусовЗаказовЗагрузитьСтатусыЗаказовССайта.Видимость = Истина;
		Элементы.СоответствиеСтатусовЗаказовЗагрузитьСлужбыДоставкиССайта.Видимость = Истина;
	ИначеЕсли Объект.ПротоколОбменаCMS = ПредопределенноеЗначение("Перечисление.ПротоколыОбменаCMS.UMI") Тогда
		Элементы.СоответствиеВидовОплатЗагрузитьВидыОплатССайта.Видимость = Истина;
		Элементы.СоответствиеСтатусовЗаказовЗагрузитьСтатусыЗаказовССайта.Видимость = Истина;
		Элементы.СоответствиеСтатусовЗаказовЗагрузитьСлужбыДоставкиССайта.Видимость = Ложь;
	Иначе
		Элементы.СоответствиеВидовОплатЗагрузитьВидыОплатССайта.Видимость = Ложь;
		Элементы.СоответствиеСтатусовЗаказовЗагрузитьСтатусыЗаказовССайта.Видимость = Ложь;
		Элементы.СоответствиеСтатусовЗаказовЗагрузитьСлужбыДоставкиССайта.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.РежимВыгрузкиЦен=1 Тогда
		Элементы.ГруппаНастройки.Доступность = Ложь;
	Иначе
		Элементы.ГруппаНастройки.Доступность = Истина;
	КонецЕсли;
	
	Если Объект.ВыгружатьИзменения Тогда
		ЭтотОбъект.ПереключательВыгрузкаИзменений = 1;
	Иначе
		ЭтотОбъект.ПереключательВыгрузкаИзменений = 0;
	КонецЕсли;
	Элементы.ГруппаВыгружатьИзменения.Доступность = Объект.ИспользоватьРегламентныеЗадания;
	
	Элементы.ПодчиненныеДокументы.Видимость = (Объект.ПротоколОбменаCMS = ПредопределенноеЗначение("Перечисление.ПротоколыОбменаCMS.Битрикс"));
	
	УстановитьВидимостьСтраницФормы();
	
	ВидимостьСпособИдентификацииКонтрагентов();
		
КонецПроцедуры

&НаСервере
Процедура УстановитьТипЗначенийСпискаГруппТаблицыКаталоговСервер()
	
	Если Объект.ОтборГруппыКатегорииНоменклатуры = Перечисления.ВидыОтборовНоменклатуры.ГруппыНоменклатуры Тогда
		ТипЗначений = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	Иначе
		ТипЗначений = Новый ОписаниеТипов("СправочникСсылка.КатегорииНоменклатуры");
	КонецЕсли;	
	
	Для Каждого СтрокаТаблицыКаталогов Из ТаблицаКаталогов Цикл
		
		СтрокаТаблицыКаталогов.Группы.ТипЗначения = ТипЗначений;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыТаблицыКаталоговСервер()
	
	ЗаголовокТаблицы = НСтр("ru = 'Таблица каталогов (соответствие групп номенклатуры каталогам на сайте)'");
	Если Объект.ОтборГруппыКатегорииНоменклатуры = Перечисления.ВидыОтборовНоменклатуры.ГруппыНоменклатуры Тогда
		ЗаголовокКолонки = НСтр("ru = 'Группы номенклатуры'");
		ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	Иначе
		ЗаголовокКолонки = НСтр("ru = 'Категории номенклатуры'");
		ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
	КонецЕсли;
	
	Элементы.ГруппаТаблицаКаталогов.Заголовок = ЗаголовокТаблицы;
	Элементы.ТаблицаКаталоговГруппыКатегории.Заголовок = ЗаголовокКолонки;
	Элементы.ТаблицаКаталоговГруппыКатегории.ВыборГруппИЭлементов = ВыборГруппИЭлементов;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВидовЦенСервер()
	
	СписокВидовЦенСтрока = "";
	Для каждого СтрокаВидовЦен Из Объект.ВидыЦен Цикл 
		
		НовыйЭлемент = СписокВидовЦен.Добавить();
		НовыйЭлемент.Значение = СтрокаВидовЦен.ВидЦен;
		
		СписокВидовЦенСтрока = СписокВидовЦенСтрока + ?(СписокВидовЦенСтрока = "","","; ") + СтрокаВидовЦен.ВидЦен.Наименование;
		
	КонецЦикла;
	
	Элементы.ВыбратьВидыЦенНоменклатуры.Заголовок = "Вид цен: "+СписокВидовЦенСтрока;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуКаталоговСервер()
	
	НадписьВсеЭлементыСписка = ОбменССайтом.НадписьВсеГруппы();
	
	СохраненнаяТаблицаКаталогов = РеквизитФормыВЗначение("Объект").СохраненнаяТаблицаКаталогов.Получить();
	
	Если НЕ ТипЗнч(СохраненнаяТаблицаКаталогов) = Тип("ТаблицаЗначений") Тогда
		
		СоздатьКаталогПоУмолчаниюСервер();
		
	Иначе
		
		Для Каждого СтрокаСохраненнойТаблицыКаталогов Из СохраненнаяТаблицаКаталогов Цикл
			
			НоваяСтрока = ТаблицаКаталогов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСохраненнойТаблицыКаталогов);
			
			ХранилищеНастроекКомпоновки = СтрокаСохраненнойТаблицыКаталогов.ХранилищеНастроекКомпоновки.Получить();
			НоваяСтрока.АдресНастроекКомпоновки = ПоместитьВоВременноеХранилище(ХранилищеНастроекКомпоновки, УникальныйИдентификатор);
			
		КонецЦикла;
		
		Если ТаблицаКаталогов.Количество() = 0 Тогда
			
			СоздатьКаталогПоУмолчаниюСервер();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКаталогПоУмолчаниюСервер()
	
	НоваяСтрока = ТаблицаКаталогов.Добавить();
	НоваяСтрока.Каталог = НСтр("ru = 'Основной каталог товаров'");
	НоваяСтрока.Группы.Добавить(НеОпределено, НадписьВсеЭлементыСписка);
	НоваяСтрока.ИдентификаторКаталога = Строка(Новый УникальныйИдентификатор);
	
КонецПроцедуры 

&НаСервере
Функция ПроверитьУзелОбменаЭтаИБСервер()
	
	ЭтотУзел = ПланыОбмена.ОбменУправлениеНебольшойФирмойСайт.ЭтотУзел();
	Возврат Объект.Ссылка = ЭтотУзел;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбработатьВыбранныеГруппыСерверБезКонтекста(СписокГрупп, НадписьВсеЭлементыСписка, ВыборГруппИЭлементов)
	
	ГруппыВыбраны = Ложь;
	
	Если ВыборГруппИЭлементов = ГруппыИЭлементы.Группы Тогда
		// Удаляем не группы номенклатуры.
		МассивУдалить = Новый Массив;
		Для Каждого ЭлементСЗ Из СписокГрупп Цикл
			
			ТекГруппа = ЭлементСЗ.Значение;
			Если ЗначениеЗаполнено(ТекГруппа) И НЕ ТекГруппа.ЭтоГруппа Тогда
				МассивУдалить.Добавить(ЭлементСЗ);
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекГруппа) Тогда
				ЭлементСЗ.Представление = Строка(ЭлементСЗ.Значение);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ТекГруппа) И НЕ ЗначениеЗаполнено(ЭлементСЗ.Представление) Тогда
				ЭлементСЗ.Представление = ОбменССайтом.НадписьНетГруппы();
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ЭлементМУ Из МассивУдалить Цикл
			СписокГрупп.Удалить(ЭлементМУ);
		КонецЦикла;
	КонецЕсли;
	
	// Удаляем дубли и подчиненные элементы.
	МассивУдалить = Новый Массив;
	Для Каждого ЭлементСЗ Из СписокГрупп Цикл
		
		Если НЕ МассивУдалить.Найти(ЭлементСЗ) = НеОпределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекГруппа = ЭлементСЗ.Значение;
		
		Для Каждого ЭлементСЗВлож Из СписокГрупп Цикл

			Если НЕ МассивУдалить.Найти(ЭлементСЗВлож) = НеОпределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекГруппа)
				ИЛИ НЕ ЗначениеЗаполнено(ЭлементСЗВлож.Значение) Тогда
				//Пропускаем элемент "Все" и "Нет группы"
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЭлементСЗВлож = ЭлементСЗ
				И ЭлементСЗВлож.Значение = ТекГруппа Тогда
				
				МассивУдалить.Добавить(ЭлементСЗВлож);
				
			Иначе
				
				Если ЭлементСЗВлож.Значение.ПринадлежитЭлементу(ТекГруппа) Тогда
				
					МассивУдалить.Добавить(ЭлементСЗВлож);
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ЭлементМУ Из МассивУдалить Цикл
		
		СписокГрупп.Удалить(ЭлементМУ);
		
	КонецЦикла;
	
	Для Каждого ЭлементСЗ Из СписокГрупп Цикл
		
		Если ЗначениеЗаполнено(ЭлементСЗ.Значение) ИЛИ ЗначениеЗаполнено(ЭлементСЗ.Представление) Тогда
			
			ГруппыВыбраны = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ГруппыВыбраны Тогда
		
		СписокГрупп.Очистить();
		СписокГрупп.Добавить(НеОпределено, НадписьВсеЭлементыСписка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПолейОбменЗаказами()
	
	Элементы.ФайлЗагрузки.Доступность = Объект.ОбменЗаказами;
	Элементы.ОнлайнОплаты.Доступность = Объект.ОбменЗаказами;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОбменТоварами()
	
	УстановитьВидимостьСтраницФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОбменЗаказами()
	
	Если Объект.ОбменЗаказами=Ложь Тогда
		Объект.ОнлайнОплаты = Ложь;
		Объект.ПодчиненныеДокументы = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьСтраницФормы();
	УстановитьДоступностьПолейОбменЗаказами();
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) И ЗначениеЗаполнено(Объект.КаталогВыгрузки) И ПереключательНазначениеОбмена=1 И Объект.ОбменЗаказами Тогда
		Объект.ФайлЗагрузки = Объект.КаталогВыгрузки + "\Orders.xml";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСпособИдентификацииКонтрагентов()
	
	ВидимостьСпособИдентификацииКонтрагентов();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьСпособИдентификацииКонтрагентов()
	
	СпособПредопределенноеЗначение = (Объект.СпособИдентификацииКонтрагентов = ПредопределенноеЗначение("Перечисление.СпособыИдентификацииКонтрагентов.ПредопределенноеЗначение"));
	
	Если Объект.НастройкиПоискаКонтрагентов = "" Тогда
		Объект.НастройкиПоискаКонтрагентов = ОбменССайтом.ЗаписьJSONВСтруктуру(ОбменССайтом.ПоляПоискаКонтрагентовПоУмолчанию(Истина));
		НастройкиПоискаКонтрагентовПредставление = ПоискКонтрагентовПредставление(ОбменССайтом.ЧтениеJSONВСтруктуру(Объект.НастройкиПоискаКонтрагентов));
	КонецЕсли;
	
	Элементы.КонтрагентДляПодстановкиВЗаказы.Видимость = СпособПредопределенноеЗначение;
	Элементы.ГруппаДляНовыхКонтрагентов.Видимость = НЕ СпособПредопределенноеЗначение;
	Элементы.НастройкиПоискаКонтрагентов.Видимость = НЕ СпособПредопределенноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПереключательНазначениеОбмена()
	
	Объект.ВыгружатьНаСайт = ПереключательНазначениеОбмена = 0;
	УстановитьВидимостьСтраницТипаОбмена();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
// Функция возвращает ПериодПовтораВТечениеДня в секундах
//
Функция ПолучитьПериодПовтораВТечениеДня()
	
	ЗначенияВыбора = СоответствиеЗначенийВыбораККоличествуСекунд();
	
	ПериодПовтораВТечениеДня = ЗначенияВыбора.Получить(ИнтервалОбменаССайтом);
	Возврат ?(ПериодПовтораВТечениеДня = Неопределено, 1800, ПериодПовтораВТечениеДня);
	
КонецФункции //ПолучитьПериодПовтораВТечениеДня()

&НаКлиенте
// Функция возвращает соответствие надписей выбора к количеству секунд
// 
Функция СоответствиеЗначенийВыбораККоличествуСекунд()
	
	СоответствиеНадписей = Новый Соответствие;
	СоответствиеНадписей.Вставить("Один раз в 5 минут", 300);
	СоответствиеНадписей.Вставить("Один раз в 15 минут", 900);
	СоответствиеНадписей.Вставить("Один раз в 30 минут", 1800);
	СоответствиеНадписей.Вставить("Один раз в час", 3600);
	СоответствиеНадписей.Вставить("Один раз в 3 часа", 10800);
	СоответствиеНадписей.Вставить("Один раз в 6 часов", 21600);
	СоответствиеНадписей.Вставить("Один раз в 12 часов", 43200);
	
	Возврат СоответствиеНадписей;
	
КонецФункции //СоответствиеЗначенийВыбораККоличествуСекунд()

&НаКлиенте
// Заполняет значения расписания регламентного задания.
//
Процедура УстановитьРасписаниеРегламентногоЗаданияОбмена()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);

	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	ПериодПовтораВТечениеДня = ПолучитьПериодПовтораВТечениеДня();
	
	Если ПериодПовтораВТечениеДня > 0 Тогда
		
		Расписание = Новый РасписаниеРегламентногоЗадания;
		Расписание.Месяцы					= Месяцы;
		Расписание.ДниНедели				= ДниНедели;
		Расписание.ПериодПовтораВТечениеДня = ПериодПовтораВТечениеДня; // секунды
		Расписание.ПериодПовтораДней		= 1; // каждый день
		
		РасписаниеРегламентногоЗаданияОбмена = Расписание;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Заполняет значения расписания регламентного задания.
//
Процедура УстановитьРасписаниеРегламентногоЗаданияФормированиеЧеков()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);

	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	СоответствиеНадписей = Новый Соответствие;
	СоответствиеНадписей.Вставить("Один раз в 5 минут", 300);
	СоответствиеНадписей.Вставить("Один раз в 15 минут", 900);
	СоответствиеНадписей.Вставить("Один раз в 30 минут", 1800);
	СоответствиеНадписей.Вставить("Один раз в час", 3600);
	СоответствиеНадписей.Вставить("Один раз в 3 часа", 10800);
	СоответствиеНадписей.Вставить("Один раз в 6 часов", 21600);
	СоответствиеНадписей.Вставить("Один раз в 12 часов", 43200);
	
	ПериодПовтораВТечениеДня = СоответствиеНадписей.Получить(ИнтервалЗагрузкиОплатССайта);
	Если ПериодПовтораВТечениеДня = Неопределено Тогда
		Если РазделениеВключено Тогда
			ПериодПовтораВТечениеДня = 300; //каждые 5 мин для фреша
		Иначе
			ПериодПовтораВТечениеДня = 30; //каждые 30 сек
		КонецЕсли;
	КонецЕсли;
	
	Если ПериодПовтораВТечениеДня > 0 Тогда
		
		Расписание = Новый РасписаниеРегламентногоЗадания;
		Расписание.Месяцы					= Месяцы;
		Расписание.ДниНедели				= ДниНедели;
		Расписание.ПериодПовтораВТечениеДня = ПериодПовтораВТечениеДня; // секунды
		Расписание.ПериодПовтораДней		= 1; // каждый день
		
		РасписаниеРегламентногоЗаданияФормированиеЧеков = Расписание;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьНадписьРасписания(Расписание, СтрокаРасписания)
	
	Если Не РазделениеВключено Тогда
		
		Если Расписание = Неопределено Тогда
			ТекстЗаголовка = НСтр("ru='Настроить расписание обмена'");
		Иначе
			ТекстЗаголовка = Расписание;
		КонецЕсли;
		
		Возврат ТекстЗаголовка;
		
	Иначе
		
		Если Расписание = Неопределено Тогда
			
			Если СтрокаРасписания = "ИнтервалЗагрузкиОплатССайта" Тогда
			    ЭтотОбъект[СтрокаРасписания] = "Один раз в 5 минут"; 
			Иначе	
				ЭтотОбъект[СтрокаРасписания] = "Один раз в 30 минут"; 
			КонецЕсли;
			
		Иначе
			
			ЗначениеПериода = Расписание.ПериодПовтораВТечениеДня;
			Если ЗначениеПериода = 0 Тогда
				
				ЭтотОбъект[СтрокаРасписания] = "Один раз в 30 минут";
				
			ИначеЕсли ЗначениеПериода <= 300 Тогда
				
				ЭтотОбъект[СтрокаРасписания] = "Один раз в 5 минут";
				
			ИначеЕсли ЗначениеПериода <= 900 Тогда
				
				ЭтотОбъект[СтрокаРасписания] = "Один раз в 15 минут";
				
			ИначеЕсли ЗначениеПериода <= 1800 Тогда
				
				ЭтотОбъект[СтрокаРасписания] = "Один раз в 30 минут";
				
			ИначеЕсли ЗначениеПериода <= 3600 Тогда
				
				ЭтотОбъект[СтрокаРасписания] = "Один раз в час";
				
			ИначеЕсли ЗначениеПериода <= 10800 Тогда
				
				ЭтотОбъект[СтрокаРасписания] = "Один раз в 3 часа";
				
			ИначеЕсли ЗначениеПериода <= 21600 Тогда
				
				ЭтотОбъект[СтрокаРасписания] = "Один раз в 6 часов";
				
			ИначеЕсли ЗначениеПериода <= 43200 Тогда
				
				ЭтотОбъект[СтрокаРасписания] = "Один раз в 12 часов";
				
			КонецЕсли;
			
			Возврат ЭтотОбъект[СтрокаРасписания];
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииИспользоватьРегламентныеЗадания()
	
	УстановитьДоступностьРасписанияОбмена();
	
	Если Объект.ИспользоватьРегламентныеЗадания Тогда
		
		Если Не РазделениеВключено Тогда
			ВыполнитьНастройкуРасписания(РасписаниеРегламентногоЗаданияОбмена, Элементы.НастроитьРасписаниеОбмена, "ИнтервалОбменаССайтом");
		Иначе
			УстановитьРасписаниеРегламентногоЗаданияОбмена();
		КонецЕсли;
		
		Элементы.НастроитьРасписаниеОбмена.Заголовок = УстановитьНадписьРасписания(РасписаниеРегламентногоЗаданияОбмена, "ИнтервалОбменаССайтом");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьРасписанияОбмена()
	
	Если Не РазделениеВключено Тогда
		Элементы.НастроитьРасписаниеОбмена.Доступность = Объект.ИспользоватьРегламентныеЗадания;
	Иначе
		Элементы.ИнтервалОбменаССайтом.Доступность = Объект.ИспользоватьРегламентныеЗадания;
	КонецЕсли;
	
	Элементы.ГруппаВыгружатьИзменения.Доступность = Объект.ИспользоватьРегламентныеЗадания;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательВыгрузкаИзмененийПриИзменении(Элемент)
	
	ПриИзмененииПереключательВыгрузкаИзменений()
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПереключательВыгрузкаИзменений()
	
	Объект.ВыгружатьИзменения = (ПереключательВыгрузкаИзменений = 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуРасписания(РасписаниеЗадания, Элемент, СтрокаРасписания)
	
	Если РасписаниеЗадания = Неопределено Тогда
		РасписаниеЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеЗадания);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьНастройкуРасписанияЗавершение", ЭтотОбъект, Новый Структура("ЭлементФормы, СтрокаРасписания, Расписание", Элемент, СтрокаРасписания, РасписаниеЗадания));
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуРасписанияЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание=Неопределено Тогда
		РасписаниеРегламентногоЗаданияФормированиеЧеков = ДополнительныеПараметры.Расписание;
	Иначе
		ЭтотОбъект[ДополнительныеПараметры.СтрокаРасписания] = Расписание;
		ДополнительныеПараметры.ЭлементФормы.Заголовок = УстановитьНадписьРасписания(Расписание, ЭтотОбъект[ДополнительныеПараметры.СтрокаРасписания]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриНачалеРедактированияТаблицаКаталогов(Элемент, Копирование)
	
	Если Копирование Тогда
		
		Элемент.ТекущиеДанные.ИдентификаторКаталога = "";
		
	КонецЕсли;
	
	Если (Элемент.ТекущиеДанные.Группы.Количество() = 1
		И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Группы[0].Значение) 
		И Элемент.ТекущиеДанные.Группы[0].Представление = НадписьВсеЭлементыСписка)
		ИЛИ Элемент.ТекущиеДанные.Группы.Количество() = 0 Тогда
			
		НовыйСписокГрупп = Новый СписокЗначений;
		
		Если Объект.ОтборГруппыКатегорииНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.ГруппыНоменклатуры") Тогда
			ТипЗначений = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
			Элементы.ТаблицаКаталоговГруппыКатегории.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		Иначе
			ТипЗначений = Новый ОписаниеТипов("СправочникСсылка.КатегорииНоменклатуры");
			Элементы.ТаблицаКаталоговГруппыКатегории.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
		КонецЕсли;
		
		НовыйСписокГрупп.ТипЗначения = ТипЗначений;
		НовыйСписокГрупп.Добавить(Неопределено, НадписьВсеЭлементыСписка);
		Элемент.ТекущиеДанные.Группы = НовыйСписокГрупп;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКаталоговГруппыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Группы = Элементы.ТаблицаКаталогов.ТекущиеДанные.Группы;
	
	Если Группы.Количество() = 1 Тогда
		
		Если НЕ ЗначениеЗаполнено(Группы[0].Значение) 
			И Объект.ОтборГруппыКатегорииНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.КатегорииНоменклатуры") Тогда
			
			Группы.Очистить();
		ИначеЕсли НЕ ЗначениеЗаполнено(Группы[0].Значение) И Группы[0].Представление = НадписьВсеЭлементыСписка Тогда
			Группы.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтбораКаталога(АдресНастроекКомпоновки)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("АдресНастроекКомпоновки", АдресНастроекКомпоновки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуОтбораКаталогаЗавершение", ЭтотОбъект);
	
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("ПланОбмена.ОбменУправлениеНебольшойФирмойСайт.Форма.ФормаНастройкиОтбора", ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения, РежимОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтбораКаталогаЗавершение(НастройкиКомпоновки, ДополнительныеПараметры) Экспорт

	Если НастройкиКомпоновки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	АдресНастроекКомпоновки = ПоместитьВоВременноеХранилище(НастройкиКомпоновки, УникальныйИдентификатор);
	
	Элементы.ТаблицаКаталогов.ТекущиеДанные.АдресНастроекКомпоновки = АдресНастроекКомпоновки;

КонецПроцедуры // ОткрытьФормуОтбораКаталога()

&НаКлиенте
Процедура ВыбратьВидыЦенНоменклатуры(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокВидовЦен", СписокВидовЦен);
	
	Если Объект.ПротоколОбменаCMS = ПредопределенноеЗначение("Перечисление.ПротоколыОбменаCMS.UMI") Тогда
		ОткрытьФорму("Справочник.ВидыЦен.ФормаВыбора",ПараметрыФормы,ЭтаФорма,,,, Новый ОписаниеОповещения("ВыбратьВидыЦенНоменклатурыЗавершение", ЭтотОбъект));
	Иначе	
		ОткрытьФорму("Обработка.ПомощникСозданияОбменаДаннымиССайтом.Форма.ФормаВыбораВидовЦен",ПараметрыФормы,ЭтаФорма,,,, Новый ОписаниеОповещения("ВыбратьВидыЦенНоменклатурыЗавершение", ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВидыЦенНоменклатурыЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
    
    Если РезультатВыбора <> Неопределено И ТипЗнч(РезультатВыбора) = Тип("СписокЗначений") Тогда
        
        СписокВидовЦен = РезультатВыбора;
        
        СписокВидовЦенСтрока = "";
        Для каждого ЭлементСЗ Из СписокВидовЦен Цикл
            
            СписокВидовЦенСтрока = СписокВидовЦенСтрока + ?(СписокВидовЦенСтрока = "","","; ") + ЭлементСЗ.Представление;
            
		КонецЦикла;
		Элементы.ВыбратьВидыЦенНоменклатуры.Заголовок = "Виды цен: "+СписокВидовЦенСтрока;
		
    ИначеЕсли РезультатВыбора <> Неопределено И ТипЗнч(РезультатВыбора) = Тип("СправочникСсылка.ВидыЦен") Тогда
        СписокВидовЦен.Очистить();
        СписокВидовЦен.Добавить(РезультатВыбора, РезультатВыбора);
		Элементы.ВыбратьВидыЦенНоменклатуры.Заголовок = "Вид цен: "+РезультатВыбора;
    КонецЕсли;

	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьДублированиеСтатусов(ИмяКолонки)
	
	СтатусЗаказаНаСайте = Элементы.СоответствиеСтатусовЗаказов.ТекущиеДанные.СтатусЗаказаНаСайте;
	СостояниеЗаказаПокупателя = Элементы.СоответствиеСтатусовЗаказов.ТекущиеДанные.СостояниеЗаказаПокупателя;
	
	Если НЕ ПустаяСтрока(СтатусЗаказаНаСайте) Тогда
		Найдено = Объект.СоответствиеСтатусовЗаказов.НайтиСтроки(Новый Структура("СтатусЗаказаНаСайте", СтатусЗаказаНаСайте));
		Если Найдено.Количество() > 1 Тогда
			ИмяКолонки = "СтатусЗаказаНаСайте";
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СостояниеЗаказаПокупателя) Тогда
		Найдено = Объект.СоответствиеСтатусовЗаказов.НайтиСтроки(Новый Структура("СостояниеЗаказаПокупателя", СостояниеЗаказаПокупателя));
		Если Найдено.Количество() > 1 Тогда
			ИмяКолонки = "СтатусЗаказаКлиента";
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ПроверитьУникальностьИдентификатора()
	
	ИдентификаторКаталога = Элементы.ТаблицаКаталогов.ТекущиеДанные.ИдентификаторКаталога;
	Найдено = ТаблицаКаталогов.НайтиСтроки(Новый Структура("ИдентификаторКаталога", ИдентификаторКаталога));
	ИдентификаторыУникальны = Найдено.Количество() = 1;
	
	Если НЕ ИдентификаторыУникальны Тогда
		
		ОчиститьСообщения();
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Идентификатор каталога должен быть уникальным!'"),
			Объект.Ссылка,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"ТаблицаКаталогов", ТаблицаКаталогов.Индекс(Элементы.ТаблицаКаталогов.ТекущиеДанные) + 1, "ИдентификаторКаталога"));
	
	КонецЕсли;
	
	Возврат ИдентификаторыУникальны;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаКлиенте
Процедура УстановитьВидимостьСтраницТипаОбмена()
	
	Если Объект.ВыгружатьНаСайт Тогда
		Элементы.СтраницыТипОбмена.ТекущаяСтраница = Элементы.СтраницаВыгрузкаНаСайт;
	Иначе
		Элементы.СтраницыТипОбмена.ТекущаяСтраница = Элементы.СтраницаВыгрузкаВКаталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьСтраницФормы()
	
	Элементы.СтраницаВыгрузкаТоваров.Видимость = Объект.ОбменТоварами;
	Элементы.СтраницаОбменЗаказами.Видимость = Объект.ОбменЗаказами;
	Элементы.СтраницаПечатьОнлайнЧеков.Видимость = Объект.ОбменЗаказами И (Объект.ОнлайнОплаты ИЛИ Объект.ПодчиненныеДокументы);
	
	Если Не РазделениеВключено Тогда
		Элементы.ГруппаАвтоПечатьЧековСтраницы.ТекущаяСтраница = Элементы.ГруппаАвтоПечатьЧековСтраница1;
		Элементы.НастроитьРасписаниеЗагрузкиОплат.Доступность = Объект.ОнлайнОплаты;
	Иначе
		Элементы.ГруппаАвтоПечатьЧековСтраницы.ТекущаяСтраница = Элементы.ГруппаАвтоПечатьЧековСтраница2;
		Элементы.ИнтервалЗагрузкиОплатССайта.Доступность = Объект.ОнлайнОплаты;
	КонецЕсли;
	
	Элементы.ВключитьОбмен.Видимость = Объект.ОнлайнОплаты;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	УсловноеОформление.Элементы.Очистить();
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.СоответствиеСтатусовЗаказов.РезервироватьТовар", Ложь);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.СоответствиеСтатусовЗаказовСкладРезерв.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Доступность", Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик команды КомандаПроверитьСоединение.
//
&НаКлиенте
Процедура КомандаПроверитьСоединение(Команда)
	
	Если Модифицированность Тогда
		
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("КомандаПроверитьСоединениеЗавершение", ЭтотОбъект), 
			НСтр("ru = 'Настройка обмена изменена и не записана. Записать?'"),
			РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	КомандаПроверитьСоединениеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьСоединениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    
    Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    Если НЕ Записать() Тогда
        Возврат;
    КонецЕсли;
    
    КомандаПроверитьСоединениеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьСоединениеФрагмент()
    
    Перем ТекстПредупреждения;
    
    ТекстПредупреждения = "";
	НастройкиПодключения = Новый Структура;
	НастройкиПодключения.Вставить("ИмяПользователя", Объект.ИмяПользователя);
	НастройкиПодключения.Вставить("АдресСайта", Объект.АдресСайта);
	
    ПроверитьПодключение(НастройкиПодключения, ТекстПредупреждения);
    
    ПоказатьПредупреждение(,ТекстПредупреждения);

КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключение(НастройкиПодключения, ТекстПредупреждения)
	
	Если Объект.Ссылка.Пустая() ИЛИ ПарольИзменен Тогда
		ПарольИзХранилища = Пароль;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		ПарольИзХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.Ссылка, "Пароль");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	НастройкиПодключения.Вставить("Пароль", ПарольИзХранилища);
	
	ОбменССайтом.ВыполнитьТестовоеПодключениеКСайту(НастройкиПодключения, ТекстПредупреждения);
	
КонецПроцедуры

// Процедура - обработчик команды НастроитьРасписаниеОбмена.
//
&НаКлиенте
Процедура НастроитьРасписаниеОбмена(Команда)
	
	НастроитьРасписание(РасписаниеРегламентногоЗаданияОбмена, Элементы.НастроитьРасписаниеОбмена, "РасписаниеРегламентногоЗаданияОбмена");
	
КонецПроцедуры

// Процедура - обработчик команды НастроитьРасписаниеОбмена.
//
&НаКлиенте
Процедура НастроитьРасписаниеЗагрузкиОплат(Команда)

	НастроитьРасписание(РасписаниеРегламентногоЗаданияФормированиеЧеков, Элементы.НастроитьРасписаниеЗагрузкиОплат, "РасписаниеРегламентногоЗаданияФормированиеЧеков");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписание(Расписание, Элемент, СтрокаРасписания)

	ВыполнитьНастройкуРасписания(Расписание, Элемент, СтрокаРасписания);
	Элемент.Заголовок = УстановитьНадписьРасписания(Расписание, СтрокаРасписания);
	Модифицированность = Истина;
	
КонецПроцедуры

// Процедура - обработчик команды НастроитьОтбор.
//
&НаКлиенте
Процедура НастроитьОтбор(Команда)
	
	Если Элементы.ТаблицаКаталогов.ТекущиеДанные = НеОпределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуОтбораКаталога(Элементы.ТаблицаКаталогов.ТекущиеДанные.АдресНастроекКомпоновки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

// Процедура - обработчик события ПередОкончаниемРедактирования таблицы ТаблицаКаталогов.
//
&НаКлиенте
Процедура СоответствиеСтатусовЗаказовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = "";
	Если НЕ ПроверитьДублированиеСтатусов(ИмяКолонки) Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Такой статус уже указан в другой строке таблицы!'"),
			Объект.Ссылка,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Объект.СоответствиеСтатусовЗаказов", Объект.СоответствиеСтатусовЗаказов.Индекс(Элементы.СоответствиеСтатусовЗаказов.ТекущиеДанные) + 1, ИмяКолонки));
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода КаталогВыгрузки.
//
&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("КаталогВыгрузкиНачалоВыбораЗавершение1", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбораЗавершение1(Подключено, ДополнительныеПараметры) Экспорт
    
    Если Не Подключено Тогда
		ОтветОповещения = Новый ОписаниеОповещения("ВыборФайлаЗавершить", ЭтотОбъект);
		ЗадатьВопросУстановкиРасширения(ОтветОповещения);
		
        Возврат;
    КонецЕсли;
    
    Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
    
    Диалог.Заголовок = НСтр("ru = 'Укажите каталог обмена'");
    Диалог.Каталог = Объект.КаталогВыгрузки;
    
    Диалог.Показать(Новый ОписаниеОповещения("КаталогВыгрузкиНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));

КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершить(Результат) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьДиалогВыбораФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогВыбораФайла()
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	Диалог.Заголовок = НСтр("ru = 'Укажите каталог обмена'");
	Диалог.Каталог = Объект.КаталогВыгрузки;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораКаталогаВыгрузки", ЭтотОбъект);
	
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораКаталогаВыгрузки(ВыбранныеФайлы, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект.КаталогВыгрузки = ВыбранныеФайлы[0];
		Модифицированность = Истина; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросУстановкиРасширения(ОповещениеВопроса)
	
	ТекстВопроса= НСтр("ru = 'Для данной операции необходимо установить расширение работы с файлами.
							|Установить расширение работы с файлами ?'");
							
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеВопроса", ОповещениеВопроса);
	
	ОтветОповещения = Новый ОписаниеОповещения("ВопросУстановитьРасширениеЗавершить", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОтветОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросУстановитьРасширениеЗавершить(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		УстановитьРасширениеОповещение = ДополнительныеПараметры.ОповещениеВопроса;
		
		НачатьУстановкуРасширенияРаботыСФайлами(УстановитьРасширениеОповещение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
    
    Диалог = ДополнительныеПараметры.Диалог;
    
    Если (ВыбранныеФайлы <> Неопределено) Тогда
        Объект.КаталогВыгрузки = Диалог.Каталог;
    КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события Открытие поля ввода КаталогВыгрузки.
//
&НаКлиенте
Процедура КаталогВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПолноеИмяФайла = Объект.КаталогВыгрузки;
	
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("НачатьЗапускПриложенияЗавершить", ЭтотОбъект);
	
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода ФайлЗагрузки.
//
&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ФайлЗагрузкиНачалоВыбораЗавершение1", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбораЗавершение1(Подключено, ДополнительныеПараметры) Экспорт
    
    Если Не Подключено Тогда
        
        ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Для данной операции необходимо установить расширение работы с файлами!'"));
        Возврат;
        
    КонецЕсли;
    
    Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
    
    Диалог.Заголовок = НСтр("ru = 'Выберите xml-файл с заказами'");
    Диалог.ПолноеИмяФайла = Объект.ФайлЗагрузки;
    Диалог.Фильтр = НСтр("ru = 'Документ XML'") + " (*.xml)|*.xml";
    
    Диалог.Показать(Новый ОписаниеОповещения("ФайлЗагрузкиНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));

КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
    
    Диалог = ДополнительныеПараметры.Диалог;
    
    Если (ВыбранныеФайлы <> Неопределено) Тогда
        
        Объект.ФайлЗагрузки = Диалог.ПолноеИмяФайла;
        
    КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события Открытие поля ввода ФайлЗагрузки.
//
&НаКлиенте
Процедура ФайлЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПолноеИмяФайла = Объект.ФайлЗагрузки;
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ФайлЗагрузкиОткрытиеЗавершить", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиОткрытиеЗавершить(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Не Подключено Тогда
		
		ОповещениеВопроса = Новый ОписаниеОповещения("ФайлЗагрузкиВопросЗавершить", ЭтотОбъект);
		ЗадатьВопросУстановкиРасширения(ОповещениеВопроса);
		
	Иначе
		
		ОткрытьФайлОбменаЗаказами();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиВопросЗавершить(Результат) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФайлОбменаЗаказами();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлОбменаЗаказами()
	
	Оповещение = ПустоеОповещение();
	
	ИмяСкрипта = "explorer.exe /select, " + Объект.ФайлЗагрузки;
	НачатьЗапускПриложения(Оповещение, ИмяСкрипта);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗапускПриложенияЗавершить(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Не Подключено Тогда
		
		ОтветОповещения = Новый ОписаниеОповещения("ОткрытьКаталогЗавершить", ЭтотОбъект);
		
		ЗадатьВопросУстановкиРасширения(ОтветОповещения);
		
	Иначе
		
		ОткрытьКаталогОбмена();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогОбмена()
	
	Оповещение = ПустоеОповещение();
	
	ПолноеИмяФайла = Объект.КаталогВыгрузки;
	
	НачатьЗапускПриложения(Оповещение, ПолноеИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Функция ПустоеОповещение()
	
	Оповещение = Новый ОписаниеОповещения("ПустойОбработчик", ЭтотОбъект);
	
	Возврат Оповещение;

КонецФункции

&НаКлиенте
Процедура ПустойОбработчик(Результат, ДополнительныеПараметры) Экспорт
	
	// Действий не требуется.
	Возврат;
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Комментарий");
	
КонецПроцедуры

// Процедура - обработчик события ПередОкончаниемРедактирования таблицы ТаблицаКаталогов.
//
&НаКлиенте
Процедура ТаблицаКаталоговПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Отказ = НЕ ПроверитьУникальностьИдентификатора();
	
КонецПроцедуры

// Процедура - обработчик события ПриОкончанииРедактирования таблицы ТаблицаКаталогов.
//
&НаКлиенте
Процедура ТаблицаКаталоговПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные = НеОпределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыбранныеГруппыСерверБезКонтекста(Элемент.ТекущиеДанные.Группы, НадписьВсеЭлементыСписка, Элементы.ТаблицаКаталоговГруппыКатегории.ВыборГруппИЭлементов);
	
	Если ПустаяСтрока(Элемент.ТекущиеДанные.ИдентификаторКаталога) Тогда
		Элемент.ТекущиеДанные.ИдентификаторКаталога = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Если ПустаяСтрока(Элемент.ТекущиеДанные.Каталог) Тогда
		Элемент.ТекущиеДанные.Каталог = НСтр("ru = 'Каталог товаров'") + " " + ВРег(СокрЛП(Лев(Элемент.ТекущиеДанные.ИдентификаторКаталога, 8)));
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы ТаблицаКаталогов.
//
&НаКлиенте
Процедура ТаблицаКаталоговПослеУдаления(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы ТаблицаКаталогов.
//
&НаКлиенте
Процедура ТаблицаКаталоговПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПриНачалеРедактированияТаблицаКаталогов(Элемент, Копирование);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля переключателя ПереключательНазначениеОбмена.
//
&НаКлиенте
Процедура ПереключательНазначениеОбменаПриИзменении(Элемент)
	
	ПриИзмененииПереключательНазначениеОбмена();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля флажка ИспользоватьРегламентныеЗадания.
//
&НаКлиенте
Процедура ИспользоватьРегламентныеЗаданияПриИзменении(Элемент)
	
	ПриИзмененииИспользоватьРегламентныеЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалОбменаССайтомПриИзменении(Элемент)
	
	УстановитьРасписаниеРегламентногоЗаданияОбмена();
	Элементы.НастроитьРасписаниеОбмена.Заголовок = УстановитьНадписьРасписания(РасписаниеРегламентногоЗаданияОбмена, "ИнтервалОбменаССайтом");
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалЗагрузкиОплатССайтаПриИзменении(Элемент)
	
	УстановитьРасписаниеРегламентногоЗаданияФормированиеЧеков();
	Элементы.НастроитьРасписаниеОбмена.Заголовок = УстановитьНадписьРасписания(РасписаниеРегламентногоЗаданияФормированиеЧеков, "ИнтервалОбменаССайтом");
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля флажка ОбменТоварами.
//
&НаКлиенте
Процедура ОбменТоварамиПриИзменении(Элемент)
	
	ПриИзмененииОбменТоварами();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля флажка ОбменЗаказами.
//
&НаКлиенте
Процедура ОбменЗаказамиПриИзменении(Элемент)
	
	ПриИзмененииОбменЗаказами();
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьОнлайнЧекиПриИзменении(Элемент)
	
	ПоказатьСтраницуОнлайнОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОнлайнОплаты()
	
	УстановитьВидимостьСтраницФормы();
		
	Если Объект.ОнлайнОплаты Тогда
		Если РазделениеВключено ИЛИ РасписаниеРегламентногоЗаданияФормированиеЧеков = Неопределено Тогда
			УстановитьРасписаниеРегламентногоЗаданияФормированиеЧеков();	
		Иначе
			ВыполнитьНастройкуРасписания(РасписаниеРегламентногоЗаданияФормированиеЧеков, Элементы.НастроитьРасписаниеЗагрузкиОплат, "ИнтервалЗагрузкиОплатССайта");
		КонецЕсли;
		Элементы.НастроитьРасписаниеЗагрузкиОплат.Заголовок = УстановитьНадписьРасписания(РасписаниеРегламентногоЗаданияФормированиеЧеков, "ИнтервалЗагрузкиОплатССайта");
	КонецЕсли;
		
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СпособИдентификацииКонтрагентов.
//
&НаКлиенте
Процедура СпособИдентификацииКонтрагентовПриИзменении(Элемент)
	
	ПриИзмененииСпособИдентификацииКонтрагентов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗаказаПриИзменении(Элемент)
	
	Объект.СостояниеЗаказа = ПолучитьСостояниеЗаказаПокупателя(Объект.ВидЗаказа);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗаказаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.ВидыЗаказовПокупателей"), ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаказаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	АвтоПодборСостоянияЗаказа(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеСтатусовЗаказовСтатусЗаказаКлиентаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	АвтоПодборСостоянияЗаказа(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура АвтоПодборСостоянияЗаказа(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПолученияДанных.Вставить("ВидЗаказа", Объект.ВидЗаказа);
	ДанныеВыбораСостояния = ПолучитьДанныеВыбора(Тип("СправочникСсылка.СостоянияЗаказовПокупателей"), ПараметрыПолученияДанных);
	
	ДанныеВыбора = ДанныеВыбораСостояния;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСостояниеЗаказаПокупателя(ВидЗаказа)
	
	Возврат ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаПокупателя(ВидЗаказа);
	
КонецФункции

&НаКлиенте
Процедура ОтборГруппыКатегорииНоменклатурыПриИзменении(Элемент)
	
	Если ТаблицаКаталогов.Количество()>0 Тогда
		ТаблицаКаталогов.Очистить();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("УстановитьПараметрыТаблицыКаталоговКлиент", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыТаблицыКаталоговКлиент()
	
	ЗаголовокТаблицы = НСтр("ru = 'Таблица каталогов (соответствие групп номенклатуры каталогам на сайте)'");
	Если Объект.ОтборГруппыКатегорииНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.ГруппыНоменклатуры") Тогда
		ЗаголовокКолонки = НСтр("ru = 'Группы номенклатуры'");
		ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	Иначе
		ЗаголовокКолонки = НСтр("ru = 'Категории номенклатуры'");
		ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
	КонецЕсли;
	
	Элементы.ГруппаТаблицаКаталогов.Заголовок = ЗаголовокТаблицы;
	Элементы.ТаблицаКаталоговГруппыКатегории.Заголовок = ЗаголовокКолонки;
	Элементы.ТаблицаКаталоговГруппыКатегории.ВыборГруппИЭлементов = ВыборГруппИЭлементов;
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	ПарольИзменен = Истина;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПарольИзменен Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийОбъект.Ссылка, Пароль);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстФайловОбмена(Команда)

	УзелОбмена = Объект.Ссылка;
	
    Если УзелОбмена = ОбменССайтомПовтИсп.ПолучитьЭтотУзелПланаОбмена("ОбменУправлениеНебольшойФирмойСайт") Тогда
        ОбщегоНазначенияКлиент.СообщитьПользователю(
        НСтр("ru = 'Узел соответствует этой информационной базе и не может использоваться в обмене с сайтом. Используйте другой узел обмена или создайте новый.'"));
        Возврат;
    КонецЕсли;
    
#Если НЕ МобильныйКлиент Тогда
		
	СоответствиеПакетов = ОбменССайтом.ТекстФайлаОбмена(УзелОбмена, Истина);
	
	Для каждого Пакет Из СоответствиеПакетов Цикл
		Текст = Новый ТекстовыйДокумент;
		Текст.УстановитьТекст(Пакет.Значение);
		Текст.Показать(Пакет.Ключ);
	КонецЦикла;
	
#КонецЕсли 
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстФайловПолногоОбмена(Команда)

	УзелОбмена = Объект.Ссылка;
	
    Если УзелОбмена = ОбменССайтомПовтИсп.ПолучитьЭтотУзелПланаОбмена("ОбменУправлениеНебольшойФирмойСайт") Тогда
        ОбщегоНазначенияКлиент.СообщитьПользователю(
        НСтр("ru = 'Узел соответствует этой информационной базе и не может использоваться в обмене с сайтом. Используйте другой узел обмена или создайте новый.'"));
        Возврат;
    КонецЕсли;
    
    СоответствиеПакетов = ОбменССайтом.ТекстФайлаОбмена(УзелОбмена, Ложь);
	
	Для каждого Пакет Из СоответствиеПакетов Цикл
		Текст = Новый ТекстовыйДокумент;
		Текст.УстановитьТекст(Пакет.Значение);
		Текст.Показать(Пакет.Ключ);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколОбменаCMSПриИзменении(Элемент)
	
	Если НЕ Объект.ПротоколОбменаCMS = ПредопределенноеЗначение("Перечисление.ПротоколыОбменаCMS.Битрикс") Тогда	
		Объект.ПодчиненныеДокументы = Ложь;
		Объект.ОнлайнОплаты = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимВыгрузкиЦенПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМониторОнлайнОплат(Команда)
	
	СтруктураНастроек = Новый Структура;
	МожноОткрытьМонитор = ПроверитьЗаполнениеСоответствийВидовОплат(СтруктураНастроек);
	Если МожноОткрытьМонитор Тогда
		Если Модифицированность Тогда
			Попытка
				Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
				Возврат;
			КонецПопытки;
		КонецЕсли;
		
		ОткрытьФорму("Обработка.МониторОнлайнОплат.Форма");
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьЗаполнениеСоответствийВидовОплат(СтруктураНастроек)

	ТекстПроверкиЗаполненияСоответствийВидовОплат = "";
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"
	|Выбрать 
	|	тзСоответствий.НомерСтроки,
	|	тзСоответствий.АналитикаОплаты,
	|	тзСоответствий.ТипОплатыНаСайте,
	|	тзСоответствий.СпособОплатыНаСайте
	|поместить втСоответствий
	|	из &тзСоответствий КАК тзСоответствий
	|;
	|ВЫБРАТЬ 
	|	НастройкиОплат.АналитикаОплаты КАК АналитикаОплаты,
	|	НастройкиОплат.НомерСтроки КАК НомерСтроки,
	|	НастройкиОплат.ТипОплатыНаСайте КАК ТипОплатыНаСайте,
	|	НастройкиОплат.СпособОплатыНаСайте КАК СпособОплатыНаСайте
	|из втСоответствий КАК НастройкиОплат";
	Запрос.УстановитьПараметр("тзСоответствий", Объект.СоответствиеВидовОплат.Выгрузить());
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.АналитикаОплаты) Тогда
			ТекстПроверкиЗаполненияСоответствийВидовОплат = ТекстПроверкиЗаполненияСоответствийВидовОплат + 
				"В строке "+Выборка.НомерСтроки + " не заполнено поле 'Терминал/Касса/Банк'" + Символы.ПС;
		КонецЕсли;
	
		Если НЕ ЗначениеЗаполнено(Выборка.ТипОплатыНаСайте) Тогда
			ТекстПроверкиЗаполненияСоответствийВидовОплат = ТекстПроверкиЗаполненияСоответствийВидовОплат + 
				"В строке "+Выборка.НомерСтроки + " не заполнено поле 'Тип оплаты'" + Символы.ПС;
		КонецЕсли;
	
	КонецЦикла;
	
	Если ТекстПроверкиЗаполненияСоответствийВидовОплат <> "" Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстПроверкиЗаполненияСоответствийВидовОплат);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьУстановкуКонстант(СтруктураНастроек)

	СтруктураНастроек.Вставить("УчетРозничныхПродаж", ПолучитьФункциональнуюОпцию("УчетРозничныхПродаж"));
	СтруктураНастроек.Вставить("ИспользоватьЗаказыВРозничнойТорговле", ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле"));
	СтруктураНастроек.Вставить("ИспользоватьПодключаемоеОборудование", ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование"));
	СтруктураНастроек.Вставить("ИспользоватьОнлайнОплаты", ПолучитьФункциональнуюОпцию("ИспользоватьОнлайнОплаты"));
	
	Если СтруктураНастроек.УчетРозничныхПродаж 
		И СтруктураНастроек.ИспользоватьЗаказыВРозничнойТорговле 
		И СтруктураНастроек.ИспользоватьПодключаемоеОборудование 
		И СтруктураНастроек.ИспользоватьОнлайнОплаты Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьНастройкиОнлайнОплат(Результат, ДополнительныеПараметры) Экспорт
		
    Ответ = Результат;
    Если Ответ = КодВозвратаДиалога.Да Тогда
   		УстановитьКонстантыДляОнлайнОплат(ДополнительныеПараметры);
		Объект.ОнлайнОплаты = Истина;
		ВключитьОнлайнОплаты();
	Иначе
		Объект.ОнлайнОплаты = Ложь;
    КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКонстантыДляОнлайнОплат(ДополнительныеПараметры)

	Если НЕ ДополнительныеПараметры.УчетРозничныхПродаж Тогда
		Константы.ФункциональнаяОпцияУчетРозничныхПродаж.Установить(Истина);
	КонецЕсли;
	Если НЕ ДополнительныеПараметры.ИспользоватьЗаказыВРозничнойТорговле Тогда
		Константы.ФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговле.Установить(Истина);
		Константы.ФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговлеДляНастроек.Установить(Истина);
	КонецЕсли;
	Если НЕ ДополнительныеПараметры.ИспользоватьПодключаемоеОборудование Тогда
		Константы.ФункциональнаяОпцияИспользоватьПодключаемоеОборудование.Установить(Истина);
	КонецЕсли;
	Если НЕ ДополнительныеПараметры.ИспользоватьОнлайнОплаты Тогда
		Константы.ИспользоватьОнлайнОплаты.Установить(Истина);
	КонецЕсли;
	Если НЕ Константы.ФункциональнаяОпцияИспользоватьОплатуКартами.Получить() Тогда
		Константы.ФункциональнаяОпцияИспользоватьОплатуКартами.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузитьВидыОплатССайта(Команда)
	
	ЗагрузитьВидыОплатССайтаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСтатусыЗаказовССайта(Команда)
	
	ЗагрузитьСтатусыЗаказовССайтаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВидыОплатССайтаНаСервере()

	ОписаниеОшибки = "";
	НастройкиСайта = ЗагрузитьНастройкиСайта(ОписаниеОшибки);
	
	Если НЕ ЗначениеЗаполнено(НастройкиСайта) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось загрузить виды оплат систем с сайта!'")
			+Символы.ПС + ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Если НастройкиСайта.Свойство("ПлатежныеСистемы") Тогда
		Объект.СоответствиеВидовОплат.Очистить();
		Для каждого стр Из НастройкиСайта.ПлатежныеСистемы Цикл
			
			НовСтр = Объект.СоответствиеВидовОплат.Добавить();
			НовСтр.ИдСпособаОплатыНаСайте = стр.Ид;
			НовСтр.СпособОплатыНаСайте = стр.Название;
			Если стр.Свойство("ТипОплаты") Тогда
				Если стр.ТипОплаты = "Безналичная оплата" Тогда
					НовСтр.ТипОплатыНаСайте = Перечисления.ТипыОплатНаСайте.Безналичные;
				ИначеЕсли стр.ТипОплаты = "Эквайринговая оплата" Тогда
					НовСтр.ТипОплатыНаСайте = Перечисления.ТипыОплатНаСайте.Эквайринг;
				ИначеЕсли стр.ТипОплаты = "Наличная оплата" Тогда
					НовСтр.ТипОплатыНаСайте = Перечисления.ТипыОплатНаСайте.Наличные;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ЗаполнитьСуществующиеВидыОплат();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСтатусыЗаказовССайтаНаСервере()
	
	ОписаниеОшибки = "";
	НастройкиСайта = ЗагрузитьНастройкиСайта(ОписаниеОшибки);
	
	Если НЕ ЗначениеЗаполнено(НастройкиСайта) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось загрузить список платежных систем с сайта!'")
			+Символы.ПС + ОписаниеОшибки);
		Возврат;
	КонецЕсли; 
	
	Если НастройкиСайта.Свойство("Статусы") Тогда
		Объект.СоответствиеСтатусовЗаказов.Очистить();
		Для каждого стр Из НастройкиСайта.Статусы Цикл
			
			НовСтр = Объект.СоответствиеСтатусовЗаказов.Добавить();
			НовСтр.ИДСтатусаЗаказаНаСайте = стр.Ид;
			НовСтр.СтатусЗаказаНаСайте = стр.Название;
			
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

Функция ПрочитатьЭлементы(ЧтениеXML, ИмяКорневогоУзла)
	
	МассивЗначений = Новый Массив;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.Имя = ИмяКорневогоУзла И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
		
		СтруктураЗначений = Новый Структура;
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.Имя = "Элемент" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			КонецЕсли;
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ИмяЭлемента = ЧтениеXML.Имя;
				ЧтениеXML.Прочитать();
				ЗначениеЭлемента = ЧтениеXML.Значение;
				
				СтруктураЗначений.Вставить(ИмяЭлемента, ЗначениеЭлемента);
			КонецЕсли;

		КонецЦикла;
		
		МассивЗначений.Добавить(СтруктураЗначений);
	КонецЦикла;
	
	Возврат МассивЗначений;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСуществующиеВидыОплат()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.Ссылка КАК АналитикаОплаты,
	|	ЭквайринговыеТерминалы.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Наименование В(&спНаименование)
	|	И НЕ ЭквайринговыеТерминалы.ПометкаУдаления
	|	И ЭквайринговыеТерминалы.Касса.ТипКассы = &ТипКассы";
	
	Запрос.УстановитьПараметр("ТипКассы", Перечисления.ТипыКассККМ.ФискальныйРегистратор);
	Запрос.УстановитьПараметр("спНаименование", Объект.СоответствиеВидовОплат.Выгрузить().ВыгрузитьКолонку("СпособОплатыНаСайте"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОтборНаименование = Новый Структура("СпособОплатыНаСайте", Выборка.Наименование);
		НайдСтроки = Объект.СоответствиеВидовОплат.НайтиСтроки(ОтборНаименование);
		Для каждого стр Из НайдСтроки Цикл
			стр.АналитикаОплаты = Выборка.Терминал;
			
			Модифицированность = Истина;
		КонецЦикла;
	КонецЦикла;
	
	ОбновитьКассыККМСоответствийОплат(Объект.СоответствиеВидовОплат);
	
КонецПроцедуры
	
&НаСервере
Процедура СоздатьВидыОплатВ1СНаСервере()
	
	НачатьТранзакцию();
	
	//Остальные создаем
	Для каждого стр Из Объект.СоответствиеВидовОплат Цикл
		
		Если ЗначениеЗаполнено(стр.АналитикаОплаты) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СокрЛП(стр.СпособОплатыНаСайте)) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбТерминал = Справочники.ЭквайринговыеТерминалы.СоздатьЭлемент();
		ОбТерминал.Наименование = стр.СпособОплатыНаСайте;
		
		ОсновнаяКасса = Неопределено;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КассыККМ.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|ГДЕ
		|	НЕ КассыККМ.ПометкаУдаления
		|	И КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)
		|	И КассыККМ.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККТ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	КассыККМ.ПодключаемоеОборудование УБЫВ";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество()=1 Тогда
			Выборка.Следующий();
			ОсновнаяКасса = Выборка.Ссылка;
		КонецЕсли;
		ОбТерминал.Касса = ОсновнаяКасса;
		
		ОбТерминал.Организация = ?(ЗначениеЗаполнено(Объект.ОрганизацияДляПодстановкиВЗаказы), Объект.ОрганизацияДляПодстановкиВЗаказы, Справочники.Организации.ОрганизацияПоУмолчанию());
		ОбТерминал.СчетУчета = ПланыСчетов.Управленческий.ПереводыВПути;
		ОбТерминал.СчетЗатрат = ПланыСчетов.Управленческий.ПрочиеРасходы;
		
		ОбТерминал.БанковскийСчетЭквайринг = ОбТерминал.Организация.БанковскийСчетПоУмолчанию;
		ОбТерминал.Подразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
		ОбТерминал.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
		ОбТерминал.ИспользоватьБезПодключенияОборудования = Истина;
		
		Эквайрер = Справочники.Контрагенты.НайтиПоНаименованию(ОбТерминал.Наименование);
		Если НЕ ЗначениеЗаполнено(Эквайрер) Тогда
			ОбЭквайрер = Справочники.Контрагенты.СоздатьЭлемент();
			ОбЭквайрер.Наименование = ОбТерминал.Наименование;
			ОбЭквайрер.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
			ОбЭквайрер.ПрочиеОтношения = Истина;
			
			ОбЭквайрер.ВестиРасчетыПоДоговорам = Истина;
			ОбЭквайрер.ВестиРасчетыПоДокументам = Истина;
			ОбЭквайрер.ВестиРасчетыПоЗаказам = Истина;
			ОбЭквайрер.ВестиУчетОплатыПоСчетам = Истина;
			
			ОбЭквайрер.СчетУчетаРасчетовСПокупателем = ПланыСчетов.Управленческий.РасчетыСПокупателями;
			ОбЭквайрер.СчетУчетаАвансовПокупателя = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
			ОбЭквайрер.СчетУчетаРасчетовСПоставщиком = ПланыСчетов.Управленческий.РасчетыСПоставщиками;
			ОбЭквайрер.СчетУчетаАвансовПоставщику = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
			
			ОсновнойОтветственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				Пользователи.ТекущийПользователь(),
				"ОсновнойОтветственный");
			ОбЭквайрер.Ответственный = ОсновнойОтветственный;
			ОбЭквайрер.СтранаРегистрации = Справочники.СтраныМира.Россия;
			ОбЭквайрер.Родитель = Объект.ГруппаДляНовыхКонтрагентов;
			
			Попытка
				ОбЭквайрер.Записать();
			Исключение
			КонецПопытки;
			
			СписокВидовДоговора = Новый СписокЗначений;
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.Прочее);
			ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Эквайрер, ОбТерминал.Организация, СписокВидовДоговора);
			Справочники.ДоговорыКонтрагентов.ЗаписатьДоговорПоУмолчанию(ДоговорПоУмолчанию);
			
			КонтактноеЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
			КонтактноеЛицо.Владелец = ОбЭквайрер.Ссылка;
			КонтактноеЛицо.Наименование = ОбЭквайрер.Наименование;
			КонтактноеЛицо.Ответственный = ОсновнойОтветственный;
			Попытка
				КонтактноеЛицо.Записать();
			Исключение
			КонецПопытки;
			ОбЭквайрер.КонтактноеЛицо = КонтактноеЛицо.Ссылка;
			
			Попытка
				ОбЭквайрер.Записать();
				Эквайрер = ОбЭквайрер.Ссылка;
			Исключение
			КонецПопытки;
			
		КонецЕсли; 
		ОбТерминал.Эквайрер = Эквайрер;
		ОбТерминал.Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Эквайрер.Ссылка);
		
		НовСтр = ОбТерминал.ВидыПлатежныхКарт.Добавить();
		НовСтр.ВидПлатежнойКарты = стр.СпособОплатыНаСайте;
		
		Попытка
			ОбТерминал.Записать();
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
		
		стр.АналитикаОплаты = ОбТерминал.Ссылка;
		Модифицированность = Истина;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВидыОплатВ1С(Команда)
	
	Если Объект.СоответствиеВидовОплат.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСуществующиеВидыОплат();
	
	ЧислоНезаполненных = 0;
	Для каждого стр Из Объект.СоответствиеВидовОплат Цикл
		Если НЕ ЗначениеЗаполнено(стр.АналитикаОплаты) И ЗначениеЗаполнено(СокрЛП(стр.СпособОплатыНаСайте)) Тогда
			ЧислоНезаполненных = ЧислоНезаполненных+1;
		КонецЕсли;
	КонецЦикла;
	
	Если ЧислоНезаполненных>0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьВидыОплатЗавершение", ЭтотОбъект), 
			НСтр("ru = 'Будут созданы и заполнены "+ЧислоНезаполненных+" видов оплат. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВидыОплатЗавершение(Результат, ДополнительныеПараметры) Экспорт
		
    Ответ = Результат;
    Если Ответ = КодВозвратаДиалога.Да Тогда
   		СоздатьВидыОплатВ1СНаСервере();
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуТерминалаЗавершение(ВыбЗначение, ДополнительныеПараметры) Экспорт
	
	ОбновитьКассыККМСоответствийОплат();

КонецПроцедуры

&НаКлиенте
Процедура СоответствиеВидовОплатТерминалПриИзменении(Элемент)
	
	ОбновитьКассыККМСоответствийОплат();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьКассыККМСоответствийОплат();
	
КонецПроцедуры

&НаСервере
Процедура СпособУстановкиДатыОтгрузкиЗаказаПриИзмененииНаСервере()
	
	Если Объект.СпособУстановкиДатыОтгрузкиЗаказа = Перечисления.СпособыУстановкиДатыОтгрузкиЗаказа.КоличествоДней Тогда
		Элементы.СпособУстановкиДатыОтгрузкиЗаказа.АвтоМаксимальнаяШирина = Ложь;
		Элементы.СпособУстановкиДатыОтгрузкиЗаказа.МаксимальнаяШирина = 31;
		Элементы.СпособУстановкиДатыОтгрузкиЗаказаКоличествоДней.Видимость = Истина;
	Иначе
		Элементы.СпособУстановкиДатыОтгрузкиЗаказа.АвтоМаксимальнаяШирина = Истина;
		Элементы.СпособУстановкиДатыОтгрузкиЗаказа.МаксимальнаяШирина = 0;
		Элементы.СпособУстановкиДатыОтгрузкиЗаказаКоличествоДней.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособУстановкиДатыОтгрузкиЗаказаПриИзменении(Элемент)
	СпособУстановкиДатыОтгрузкиЗаказаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеВидовОплатТерминалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.СоответствиеВидовОплат.ТекущиеДанные;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоискаКонтрагентовНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ШаблонНастройкиПоискаКонтрагентов = ОбменССайтом.ПоляПоискаКонтрагентов();
	НастройкиПоиска = ОбменССайтом.ЧтениеJSONВСтруктуру(Объект.НастройкиПоискаКонтрагентов);
	
	Для каждого стр Из ШаблонНастройкиПоискаКонтрагентов Цикл
		
		ИмяПоляПоиска = стр.Получить("Значение");
		СохраненныеНастройки = НастройкиПоиска.Получить(ИмяПоляПоиска);
		Если СохраненныеНастройки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого сохраненноеЗначение Из СохраненныеНастройки Цикл
			
			Если стр.Получить(сохраненноеЗначение.Ключ) <> Неопределено Тогда
			
				стр.Вставить(сохраненноеЗначение.Ключ, сохраненноеЗначение.Значение);
			
			КонецЕсли;
		
		КонецЦикла;
	КонецЦикла;
	
	Если НастройкиПоиска.Получить("ВариантПоиска")<>Неопределено Тогда
		ВариантПоиска = НастройкиПоиска.Получить("ВариантПоиска");
	Иначе
		ВариантПоиска = 0;
	КонецЕсли;
	
	СоответствиеНастроек = Новый Структура("НастройкиПоиска", ШаблонНастройкиПоискаКонтрагентов);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("НастройкиПоискаСоответствие", СоответствиеНастроек);
	ПараметрыОткрытия.Вставить("ВариантПоиска", ВариантПоиска);
	ПараметрыОткрытия.Вставить("ЗаголовокФормы", НСтр("ru = 'Настройки сопоставления контрагентов при загрузке с сайта'"));
	ПараметрыОткрытия.Вставить("ЗаголовокПоляПоиска", НСтр("ru = 'Данные сайта для поиска покупателя в 1С'"));
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкиПоискаПоКонтактнойИнформацииЗакрытие", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.НастройкиПоискаПоКонтактнойИнформации", ПараметрыОткрытия, ЭтотОбъект
		,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоискаПоКонтактнойИнформацииЗакрытие(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия<>Неопределено И ТипЗнч(РезультатЗакрытия) = Тип("Соответствие") Тогда
		
		НастройкиПоискаКонтрагентовПредставление = ПоискКонтрагентовПредставление(РезультатЗакрытия);
		Объект.НастройкиПоискаКонтрагентов = ОбменССайтом.ЗаписьJSONВСтруктуру(РезультатЗакрытия);
		ЭтотОбъект.Модифицированность = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоискКонтрагентовПредставление(СоответствиеНастройки)
	
	СтрокаПредставление = "";
	СписокНастроекВПорядкеПриоритета = Новый СписокЗначений;
	Для каждого элНастройки Из СоответствиеНастройки Цикл
		
		Если элНастройки.Ключ = "ВариантПоиска" ИЛИ элНастройки.Ключ = "СовпадениеВсехПолей" Тогда
			Продолжить;
		КонецЕсли;
		
		Если элНастройки.Значение.Получить("КонтрагентыПометка") = Истина
			ИЛИ элНастройки.Значение.Получить("КонтактныеЛицаПометка") = Истина
			Тогда
			
			СписокНастроекВПорядкеПриоритета.Добавить(элНастройки.Значение.Получить("Порядок"), элНастройки.Значение.Получить("Значение"));
		
		КонецЕсли;
	
	КонецЦикла;
	
	СписокНастроекВПорядкеПриоритета.СортироватьПоЗначению();
	
	Для каждого СтрокаНастроек Из СписокНастроекВПорядкеПриоритета Цикл
		СтрокаПредставление = СтрокаПредставление + СтрокаНастроек + ", ";
	КонецЦикла;
	
	Если СтрокаПредставление="" Тогда
		СтрокаПредставление = "<Настройка не заполнена>";
	Иначе
		СтрокаПредставление = Лев(СтрокаПредставление, СтрДлина(СтрокаПредставление)-2);
	КонецЕсли;
	
	Возврат СтрокаПредставление;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НастройкиВыгрузкиРеквизитовПредставление(НастройкиВыгрузкиРеквизитов)
	
	СтрокаПредставление = "";
	Если НастройкиВыгрузкиРеквизитов = "" Тогда
		СтрокаПредставление = "<Реквизиты не выбраны>";
	Иначе
		СтруктураНастроки = ОбменССайтом.ЧтениеJSONВСтруктуру(НастройкиВыгрузкиРеквизитов, Ложь);
		Для каждого СтрокаНастроек Из СтруктураНастроки Цикл
			СтрокаПредставление = СтрокаПредставление + СтрокаНастроек.Ключ + ", ";
		КонецЦикла;
		СтрокаПредставление = Лев(СтрокаПредставление, СтрДлина(СтрокаПредставление)-2);
	КонецЕсли;
	
	Возврат СтрокаПредставление;
	
КонецФункции

&НаКлиенте
Процедура НастройкиВыгрузкиРеквизитовПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьРеквизитыЗавершение", ЭтотОбъект);
	ОткрытьФорму("ПланОбмена.ОбменУправлениеНебольшойФирмойСайт.Форма.ФормаВыбораРеквизитов", Новый Структура("НастройкиВыгрузкиРеквизитов", Объект.НастройкиВыгрузкиРеквизитов), ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьРеквизитыЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Количество()=0 Тогда
		Объект.НастройкиВыгрузкиРеквизитов = "";
	Иначе
		Объект.НастройкиВыгрузкиРеквизитов = ОбменССайтом.ЗаписьJSONВСтруктуру(ВыбранныйЭлемент);
	КонецЕсли;
	
	НастройкиВыгрузкиРеквизитовПредставление = НастройкиВыгрузкиРеквизитовПредставление(Объект.НастройкиВыгрузкиРеквизитов);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьДублированиеДоставки(ИмяКолонки)
	
	СоответствиеСлужбаДоставкиНаСайте = Элементы.СоответствиеСлужбДоставки.ТекущиеДанные.СлужбаДоставкиНаСайте;
	СоответствиеСлужбаДоставки1С = Элементы.СоответствиеСлужбДоставки.ТекущиеДанные.СлужбаДоставки;
	
	Если НЕ ПустаяСтрока(СоответствиеСлужбаДоставкиНаСайте) Тогда
		Найдено = Объект.СоответствиеСлужбДоставки.НайтиСтроки(Новый Структура("СлужбаДоставкиНаСайте", СоответствиеСлужбаДоставкиНаСайте));
		Если Найдено.Количество() > 1 Тогда
			ИмяКолонки = "СлужбаДоставкиНаСайте";
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура СоответствиеСлужбыДоставкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = "";
	Если НЕ ПроверитьДублированиеДоставки(ИмяКолонки) Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Такая служба доставки уже указана в другой строке таблицы!'"),
			Объект.Ссылка,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Объект.СоответствиеСлужбДоставки", Объект.СоответствиеСлужбДоставки.Индекс(Элементы.СоответствиеСлужбДоставки.ТекущиеДанные) + 1, ИмяКолонки));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьОтгрузкиПриИзменении(Элемент)
	
	ПоказатьСтраницуОнлайнОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуОнлайнОплаты()
	
	Если Объект.ОнлайнОплаты Тогда
		СтруктураНастроек = Новый Структура;
		Если ПроверитьУстановкуКонстант(СтруктураНастроек) Тогда
			ВключитьОнлайнОплаты();
		Иначе
			ТекстВопроса = НСтр("ru = 'Для использования онлайн оплат нужно включить настройки: '");
			ТекстВопроса = ТекстВопроса + ?(СтруктураНастроек.УчетРозничныхПродаж, "", Символы.ПС+НСтр("ru = 'Продажи - Учет розничных продаж"));
			ТекстВопроса = ТекстВопроса + ?(СтруктураНастроек.ИспользоватьЗаказыВРозничнойТорговле, "", Символы.ПС+НСтр("ru = 'Продажи - Использовать заказы в розничной торговле'"));
			ТекстВопроса = ТекстВопроса + ?(СтруктураНастроек.ИспользоватьПодключаемоеОборудование, "", Символы.ПС+НСтр("ru = 'Администрирование - Использовать подключаемое оборудование'"));
			ТекстВопроса = ТекстВопроса + ?(СтруктураНастроек.ИспользоватьОнлайнОплаты, "", Символы.ПС+НСтр("ru = 'Обмен с сайтом - Использовать онлайн оплаты'"));
			
			ТекстВопроса = ТекстВопроса + Символы.ПС+НСтр("ru = 'Включить настройки сейчас?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьНастройкиОнлайнОплат", ЭтотОбъект, СтруктураНастроек), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	Иначе
		УстановитьВидимостьСтраницФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьНастройкиСайта(ОписаниеОшибки)
	
	НастройкиСайта = Новый Структура;	
	Если Объект.ПротоколОбменаCMS = ПредопределенноеЗначение("Перечисление.ПротоколыОбменаCMS.Битрикс") Тогда
		СтрокаXML = ОбменССайтом.ЗагрузитьНастройкиБитрикс(Объект.Ссылка, ОписаниеОшибки);
	ИначеЕсли Объект.ПротоколОбменаCMS = ПредопределенноеЗначение("Перечисление.ПротоколыОбменаCMS.UMI") Тогда
		СтрокаXML = ОбменССайтом.ЗагрузитьНастройкиUMI(Объект.Ссылка, ОписаниеОшибки);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтрокаXML = "" Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось подключиться к сайту!'"));
		Возврат Неопределено;
	КонецЕсли; 
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.Имя = "Статусы" ИЛИ ЧтениеXML.Имя = "Cтатусы" Тогда
			//Битрикс возвращает имя узла с английской буквой "С" в слове "Статусы"
			МассивСтатусы = ПрочитатьЭлементы(ЧтениеXML, ЧтениеXML.Имя);
			НастройкиСайта.Вставить("Статусы", МассивСтатусы);
		ИначеЕсли ЧтениеXML.Имя = "ПлатежныеСистемы" Тогда
			МассивВидыОплат = ПрочитатьЭлементы(ЧтениеXML, "ПлатежныеСистемы");
			НастройкиСайта.Вставить("ПлатежныеСистемы", МассивВидыОплат);
		ИначеЕсли ЧтениеXML.Имя = "СлужбыДоставки" Тогда
			МассивСлужбыДоставки = ПрочитатьЭлементы(ЧтениеXML, "СлужбыДоставки");
			НастройкиСайта.Вставить("СлужбыДоставки", МассивСлужбыДоставки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НастройкиСайта;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьСлужбыДоставкиССайтаНаСервере()
	
	ОписаниеОшибки = "";
	НастройкиСайта = ЗагрузитьНастройкиСайта(ОписаниеОшибки);
	
	Если НЕ ЗначениеЗаполнено(НастройкиСайта) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось загрузить список служб доставки с сайта!'")
			+Символы.ПС + ОписаниеОшибки);
		Возврат;
	КонецЕсли; 
	
	Если НастройкиСайта.Свойство("СлужбыДоставки") Тогда
		Объект.СоответствиеСлужбДоставки.Очистить();
		Для каждого стр Из НастройкиСайта.СлужбыДоставки Цикл
			
			НовСтр = Объект.СоответствиеСлужбДоставки.Добавить();
			НовСтр.ИдСлужбыДоставкиНаСайте = стр.Ид;
			НовСтр.СлужбаДоставкиНаСайте = стр.Название;
			
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСлужбыДоставкиССайта(Команда)
	ЗагрузитьСлужбыДоставкиССайтаНаСервере();
КонецПроцедуры
